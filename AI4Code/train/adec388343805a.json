{"cell_type":{"90b2f4d9":"code","9cbce966":"code","2f5234ed":"code","4978c627":"code","929a8aad":"code","ff2e8351":"code","08d01d22":"code","67b688c3":"code","4b3404fd":"code","6e5ef2c1":"code","4b86e589":"code","bc885759":"code","211e3fe6":"code","5230cc67":"code","b35a0fe3":"code","a60c7ea9":"code","fa0cc4a8":"code","67e62daf":"code","2996f39c":"code","420c7c9d":"code","1282e5b7":"code","c143827d":"code","1d1338ba":"code","65ac562b":"code","4dcfe4d1":"code","e3bec9c7":"code","e1eeb32f":"code","7c1f5bca":"code","84e5dd5c":"code","7b23bed1":"code","0bbc1de9":"code","51f94b2a":"code","77dc53ba":"code","95094c64":"code","ba98c66f":"code","90cf1afa":"code","ccf103b4":"code","2653d898":"code","f8727b7f":"code","fd1caf62":"code","a4643409":"code","49240ba9":"code","ecd277cf":"code","cd8dc8b3":"code","e7ed2b18":"code","e531881d":"code","a7189280":"code","a7920410":"code","35df4215":"code","9138ea35":"code","4b4e9097":"code","ee754db0":"code","d9b595e0":"code","9a624e0c":"code","6d334ec9":"code","73efe85f":"code","2218b2ea":"code","04e2c2ea":"code","02e0b91b":"code","7731c588":"code","c900de86":"code","a74cf421":"code","492e88d2":"code","2026f057":"code","ad9791e2":"code","48e22b05":"code","48e10433":"code","39761ef6":"code","967b7f29":"code","4752f8b0":"code","8ce4d4f8":"code","7c17a452":"code","107e2f68":"code","d832eb3c":"code","97cc6bcf":"code","9a8e494a":"code","2fb159df":"code","052aca82":"code","be8d6105":"code","25e6a58c":"code","3e209434":"code","591d978d":"code","8b875550":"code","d4e6a6ce":"code","ac518e60":"code","ca98128f":"code","8266af21":"code","e68b1278":"code","3cedd06b":"code","a1ead8f8":"code","fba6d4a3":"code","5909ee40":"code","979df99e":"code","df11917f":"code","2aa102eb":"code","aede221b":"code","e29e488f":"code","0562f83d":"code","813b352b":"code","ac60966a":"code","36be7062":"code","8d5e7c56":"code","c9c3de7a":"code","15e1b3ce":"code","72d3186f":"code","e2241859":"code","257af37e":"code","34f5580d":"code","aad9ffec":"code","f2a988f6":"code","d12c4091":"markdown","a060692a":"markdown","918f84d5":"markdown","39bdb2b6":"markdown","a929add6":"markdown","1f8167fb":"markdown","8513313e":"markdown","bc039bb8":"markdown","49b7c9a0":"markdown","3222ccfd":"markdown","f22d2def":"markdown","18d6908a":"markdown","f1ed4306":"markdown","e53becfe":"markdown","591a76bb":"markdown","d0fa98a3":"markdown","a8d0ed6b":"markdown","a371bf24":"markdown","eac22371":"markdown","d0ddb874":"markdown","23c8bd63":"markdown","a640891c":"markdown","77c6b232":"markdown","d6e4dad3":"markdown","499978aa":"markdown","30a50293":"markdown","3efc309f":"markdown","4e5c260e":"markdown"},"source":{"90b2f4d9":"# imoport required package \n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.metrics import accuracy_score,confusion_matrix, classification_report,precision_score,recall_score,f1_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier","9cbce966":"# read the dataset \n\nxyz_corp = pd.read_csv(\"\/kaggle\/input\/xyzcrop-lendingdata\/XYZCorp_LendingData.txt\",sep = '\\t',parse_dates=['issue_d'], low_memory = False)","2f5234ed":"# display the top 5 row of the dataset\n\nxyz_corp.head()","4978c627":"xyz_corp.tail()","929a8aad":"xyz_corp.columns","ff2e8351":"# check the shape or demension of the data.\n\nxyz_corp.shape #(rows, columns)","08d01d22":"# display the information of the data.\n\nxyz_corp.info()","67b688c3":"xyz_corp.dtypes","4b3404fd":"xyz_corp.default_ind.dtypes","6e5ef2c1":"xyz_corp.issue_d.dtypes","4b86e589":"#check the dependent variable counts\n\nxyz_corp['default_ind'].value_counts()","bc885759":"sns.countplot(xyz_corp['default_ind'])","211e3fe6":"corr = xyz_corp.corr()\ncor_target = (corr[\"default_ind\"])\n\ncor_target","5230cc67":"cor_target.shape","b35a0fe3":"# check the null values is present or not\/ true or flase\n\nxyz_corp.isnull().sum().any()","a60c7ea9":"#check the how many variables or columns are present in null values\n\nxyz_corp.isnull().any().sum()","fa0cc4a8":"#To Display the null values counts and columns names\n\nxyz_corp.isnull().sum()","67e62daf":"#Display percentage of null values in each column\nmiss = xyz_corp.isnull().sum() \/ len(xyz_corp) * 100\nmiss = miss[miss > 0]\nmiss.sort_values(inplace=True)\nmiss","2996f39c":"#Removing features having more than 700000 missing values \n\nlis=xyz_corp.isnull().sum()\nfor i in range(len(lis)):\n    if lis[i]>700000:\n        del xyz_corp[(lis.index[i])]","420c7c9d":"xyz_corp.shape","1282e5b7":"null = xyz_corp.isnull().sum()\nnull","c143827d":"\n\nfig=plt.figure(figsize=(20,4))\nnull.plot(kind='bar')\nplt.title('List of columns after removing columns above 700000 NAs')","1d1338ba":"#Using Pearson Correlation\n\ncor = xyz_corp.corr()\ncor_target = (cor[\"default_ind\"])\n\ncor_target","65ac562b":"#Display percentage of null values in each column\ncor = xyz_corp.corr() \/ len(xyz_corp) * 100\ncor = cor_target[cor_target > -1]\ncor.sort_values(inplace=True)\ncor","4dcfe4d1":"# The thersholud value of the coorelation is 0.02\n\nlis2=[]\nfor i in range(len(cor_target)):\n    if cor_target[i]<0.02 and cor_target[i]>(-0.02):\n        lis2.append(cor_target.index[i])","e3bec9c7":"\nfor i in range(len(lis2)):\n    xyz_corp.drop(lis2[i],axis=1, inplace = True)","e1eeb32f":"lis2","7c1f5bca":"xyz_corp.shape","84e5dd5c":"#Heat Map\n\nplt.figure(figsize=(20,16))\ncor = xyz_corp.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Greens)\nplt.show()","7b23bed1":"xyz_corp['term'].value_counts()","0bbc1de9":"sns.countplot('term',data=xyz_corp,hue='default_ind')","51f94b2a":"f,(ax1,ax2)=plt.subplots(nrows=1,ncols=2,figsize=(12,3),dpi=90)\nsns.countplot(xyz_corp['term'],ax=ax1)\nsns.countplot('term',hue='default_ind',data=xyz_corp,ax=ax2)","77dc53ba":"xyz_corp['term'] = np.where(xyz_corp['term']==' 36 months', 0,xyz_corp['term'])\nxyz_corp['term'] = np.where(xyz_corp['term']==' 60 months', 1,xyz_corp['term'])","95094c64":"xyz_corp['term'].value_counts()","ba98c66f":"xyz_corp['term']=xyz_corp['term'].astype(float)","90cf1afa":"xyz_corp['grade'].value_counts()","ccf103b4":"f,(ax1,ax2)=plt.subplots(nrows=1,ncols=2,figsize=(12,3),dpi=90)\nsns.countplot(xyz_corp['grade'],ax=ax1)\nsns.countplot('grade',hue='default_ind',data=xyz_corp,ax=ax2)","2653d898":"sns.countplot('grade',data=xyz_corp,hue='default_ind')\n","f8727b7f":"xyz_corp['grade'] = np.where(xyz_corp['grade'] == 'A', 0, xyz_corp['grade'])\nxyz_corp['grade'] = np.where(xyz_corp['grade'] == 'B', 0, xyz_corp['grade'])\nxyz_corp['grade'] = np.where(xyz_corp['grade'] == 'C', 0, xyz_corp['grade'])\nxyz_corp['grade'] = np.where(xyz_corp['grade'] == 'D', 1, xyz_corp['grade'])\nxyz_corp['grade'] = np.where(xyz_corp['grade'] == 'E', 1, xyz_corp['grade'])\nxyz_corp['grade'] = np.where(xyz_corp['grade'] == 'F', 1, xyz_corp['grade'])\nxyz_corp['grade'] = np.where(xyz_corp['grade'] == 'G', 1, xyz_corp['grade'])","fd1caf62":"xyz_corp['grade'].value_counts()","a4643409":"xyz_corp['grade']=xyz_corp['grade'].astype(float)","49240ba9":"xyz_corp['home_ownership'].value_counts()","ecd277cf":"df=xyz_corp.groupby('home_ownership')\ndf['default_ind'].value_counts()","cd8dc8b3":"f,(ax1,ax2)=plt.subplots(nrows=1,ncols=2,figsize=(12,3),dpi=90)\nsns.countplot(xyz_corp['home_ownership'],ax=ax1)\nsns.countplot('home_ownership',hue='default_ind',data=xyz_corp,ax=ax2)","e7ed2b18":"sns.countplot('home_ownership',data=xyz_corp,hue='default_ind')","e531881d":"xyz_corp['home_ownership'] = np.where(xyz_corp['home_ownership']=='RENT', 1, xyz_corp['home_ownership'])\nxyz_corp['home_ownership'] = np.where(xyz_corp['home_ownership']=='OWN', 1, xyz_corp['home_ownership'])\nxyz_corp['home_ownership'] = np.where(xyz_corp['home_ownership']=='MORTGAGE', 1, xyz_corp['home_ownership'])\nxyz_corp['home_ownership'] = np.where(xyz_corp['home_ownership']=='NONE', 2, xyz_corp['home_ownership'])\nxyz_corp['home_ownership'] = np.where(xyz_corp['home_ownership']=='OTHER', 2, xyz_corp['home_ownership'])\nxyz_corp['home_ownership'] = np.where(xyz_corp['home_ownership']=='ANY', 0, xyz_corp['home_ownership'])","a7189280":"xyz_corp['home_ownership'].value_counts()","a7920410":"df=pd.get_dummies(xyz_corp['home_ownership'],drop_first=True)\nxyz_corp=pd.concat([df, xyz_corp],axis=1)\n\n# Dummy Variables","35df4215":"xyz_corp.drop(['home_ownership'],axis = 1, inplace = True )","9138ea35":"#data['verification_status'].value_counts()\n\ndf=xyz_corp.groupby('verification_status')\ndf['default_ind'].value_counts()","4b4e9097":"f,(ax1,ax2)=plt.subplots(nrows=1,ncols=2,figsize=(12,3),dpi=90)\nsns.countplot(xyz_corp['verification_status'],ax=ax1)\nsns.countplot('verification_status',hue='default_ind',data=xyz_corp,ax=ax2)","ee754db0":"sns.countplot('verification_status',data=xyz_corp,hue='default_ind')","d9b595e0":"df=pd.get_dummies(xyz_corp['verification_status'],drop_first=True)\nxyz_corp=pd.concat([df,xyz_corp],axis=1)\n\n# Dummy Variables","9a624e0c":"xyz_corp.drop(['verification_status'],axis=1, inplace = True)","6d334ec9":"xyz_corp['pymnt_plan'].value_counts()","73efe85f":"xyz_corp.drop(['pymnt_plan'],axis=1, inplace = True)\n# del data['pymnt_plan']","2218b2ea":"xyz_corp['initial_list_status'].value_counts()","04e2c2ea":"sns.countplot('initial_list_status',data=xyz_corp,hue='default_ind')","02e0b91b":"f, (ax1,ax2,) = plt.subplots(nrows = 1, ncols = 2, figsize = (12,3),dpi = 90)\nsns.countplot(xyz_corp['initial_list_status'], ax= ax1)\nsns.countplot('initial_list_status', hue = 'default_ind', data = xyz_corp, ax = ax2)","7731c588":"xyz_corp['initial_list_status'] = np.where(xyz_corp['initial_list_status']=='f', 0, xyz_corp['initial_list_status'])\nxyz_corp['initial_list_status'] = np.where(xyz_corp['initial_list_status']=='w', 1, xyz_corp['initial_list_status'])","c900de86":"xyz_corp['initial_list_status'].value_counts()","a74cf421":"xyz_corp['initial_list_status']=xyz_corp['initial_list_status'].astype(float)","492e88d2":"xyz_corp['application_type'].value_counts()","2026f057":"f, (ax1,ax2) = plt.subplots(nrows = 1, ncols = 2, figsize = (12,3), dpi = 90)\nsns.countplot(xyz_corp['application_type'], ax = ax1)\nsns.countplot('application_type', hue = 'default_ind', data = xyz_corp, ax =ax2)","ad9791e2":"sns.countplot('application_type',data=xyz_corp)","48e22b05":"df=xyz_corp.groupby('application_type')\ndf['default_ind'].value_counts()","48e10433":"xyz_corp['application_type'] = np.where(xyz_corp['application_type']=='INDIVIDUAL', 0, xyz_corp['application_type'])\nxyz_corp['application_type'] = np.where(xyz_corp['application_type']=='JOINT', 1, xyz_corp['application_type'])","39761ef6":"xyz_corp['application_type'].value_counts()","967b7f29":"xyz_corp['application_type']=xyz_corp['application_type'].astype(float)\n# Object to Float type","4752f8b0":"xyz_corp.info()","8ce4d4f8":"xyz_corp['last_credit_pull_d'].value_counts()","7c17a452":"xyz_corp.groupby('last_credit_pull_d')['default_ind'].value_counts()","107e2f68":"xyz_corp['last_credit_pull_d'] = pd.to_datetime(xyz_corp['last_credit_pull_d'])\nxyz_corp['Month'] = xyz_corp['last_credit_pull_d'].apply(lambda x: x.month)\nxyz_corp['Year'] = xyz_corp['last_credit_pull_d'].apply(lambda x: x.year)\nxyz_corp = xyz_corp.drop(['last_credit_pull_d'], axis = 1)","d832eb3c":"# drop unnecessary variables\n\nxyz_corp.drop(['id','member_id','tot_cur_bal','total_rev_hi_lim','policy_code'], axis = 1,inplace=True)","97cc6bcf":"xyz_corp.isnull().sum()","9a8e494a":"xyz_corp.info()","2fb159df":"# Drop object data type of varibles \n\n\nxyz_corp.drop(['sub_grade','emp_title',\n            'emp_length',\n            'purpose','title','application_type',\n            'zip_code','addr_state',\n            'earliest_cr_line','last_pymnt_d',\n            'next_pymnt_d'],axis = 1, inplace = True)","052aca82":"xyz_corp.isnull().sum()","be8d6105":"# Imputation\n\nxyz_corp['revol_util'].fillna(xyz_corp['revol_util'].mean(),inplace=True)\nxyz_corp['Month'].fillna(xyz_corp.mode()['Month'][0],inplace=True)\nxyz_corp['Year'].fillna(xyz_corp.mode()['Year'][0],inplace=True)","25e6a58c":"xyz_corp.isnull().sum()","3e209434":"xyz_corp.shape","591d978d":"xyz_corp.columns","8b875550":"##Splitting our data into train and test on the basis of \n##train set is spplitted from june 2007 to may 2015\n##test set is splitted from june 2015 to december 2015\n\n\ntrain = xyz_corp[xyz_corp['issue_d'] < '2015-6-01']\ntest = xyz_corp[xyz_corp['issue_d'] >= '2015-6-01']","d4e6a6ce":"train.shape","ac518e60":"test.shape","ca98128f":"xyz_corp.drop('issue_d', axis = 1, inplace = True)","8266af21":"X = xyz_corp.drop('default_ind', axis = 1)\ny = xyz_corp.default_ind","e68b1278":" \nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, random_state = 42)","3cedd06b":"print(\"X_train.shpae :\", X_train.shape)\nprint(\"X_test_shape :\", X_test.shape)\nprint(\"y_train_shape :\", y_train.shape)\nprint(\"y_test_shape :\", y_test.shape)","a1ead8f8":"\n\nlr = LogisticRegression()\nlr.fit(X_train, y_train)","fba6d4a3":"lr_pred = lr.predict(X_test)","5909ee40":"\nlr_pred_prob=lr.predict_proba(X_test)","979df99e":"cm = confusion_matrix(y_test, lr_pred)\nprint(cm)","df11917f":"print(classification_report(y_test, lr_pred))","2aa102eb":"##Calculating important metrics Precision score,Recall score,F1_Score\n\n\nprint(\"accuracy_score is  :\", accuracy_score(y_test, lr_pred))\nprint(\"precision score is :\",precision_score(y_test,lr_pred))\nprint(\"recall is          :\",recall_score(y_test,lr_pred))\nprint(\"F1_score is        :\",f1_score(y_test,lr_pred))","aede221b":"\nlr_cvs=cross_val_score(estimator=lr,X=X_train,y=y_train,cv=10)\nlr_cvs","e29e488f":"lr_cvs.mean()","0562f83d":"#Receiver Operating Characteristics Area Under Curve(AUC) score \n\nprint(roc_auc_score(y_test,lr_pred))","813b352b":"\nfpr,tpr,thresholds=roc_curve(y_test,lr_pred)","ac60966a":"plt.figure(figsize=(9,6))\nplt.plot(fpr,tpr,color='blue',label='ROC')\nplt.plot([0,1],[0,1],color='green',linestyle='--')\nplt.title('ROC Curve of LogisticRegression')\nplt.xlabel('FalsePositiveRate')\nplt.ylabel('TruePositiveRate')\nplt.grid(True)\nplt.legend()\nplt.show","36be7062":"\nrf = RandomForestClassifier()              #n_estimators=200, min_samples_split=30, criterion='entropy'\nrf.fit(X_train, y_train)","8d5e7c56":"rf_pred = rf.predict(X_test)","c9c3de7a":"rf_cm =confusion_matrix(y_test, rf_pred)\nprint(rf_cm)","15e1b3ce":"rf_clf = classification_report(y_test, rf_pred)\nprint(rf_clf)","72d3186f":"print(\"accuracy_score is  :\",  accuracy_score(y_test, rf_pred))\nprint(\"precision score is :\",precision_score(y_test,rf_pred))\nprint(\"recall is          :\",recall_score(y_test,rf_pred))\nprint(\"F1_score is        :\",f1_score(y_test,rf_pred))","e2241859":"\nrf_cvs=cross_val_score(estimator=rf, X=X_train, y=y_train, cv=10)\nrf_cvs","257af37e":"rf_cvs.mean()","34f5580d":"#Receiver Operating Characteristics Area Under Curve(AUC) score \n\nprint(roc_auc_score(y_test,rf_pred))","aad9ffec":"\nfpr,tpr,thresholds=roc_curve(y_test,rf_pred)","f2a988f6":"plt.figure(figsize=(9,6))\nplt.plot(fpr,tpr,color='blue',label='ROC')\nplt.plot([0,1],[0,1],color='green',linestyle='--')\nplt.title('ROC Curve of RandomForestClassifier')\nplt.xlabel('FalsePositiveRate')\nplt.ylabel('TruePositiveRate')\nplt.grid(True)\nplt.legend()\nplt.show","d12c4091":"### Verification_Status","a060692a":"1)mths_since_last_major_derog, \n2)mths_since_last_record,\n3)desc,\n4)inq_fi,\n5)all_util,\n6)max_bal_bc,7)open_rv_24m,8)open_rv_12m,9)total_bal_il,\n10)open_il_24m,11)open_il_12m,12)open_il_6m,13)open_acc_6m,14)total_cu_tl,15)inq_last_12m,\n16)mths_since_rcnt_il,17)il_util,18)verification_status_joint,19)annual_inc_joint,20)dti_joint","918f84d5":"### Application_Type ","39bdb2b6":"### Cross Validation Score","a929add6":"Thus, we can conclude it is an Imbalanced Data.","1f8167fb":"### Split the data","8513313e":"#  XYZ Corp. : Default Rate Prediction and Analysis","bc039bb8":"### Term","49b7c9a0":"## Logistic Regression","3222ccfd":"Next up, we want to get rid of sparsely populated variables, so we remove columns with more that 70% missing values","f22d2def":"## Cross Validation Score","18d6908a":"### Romoving columns with Low Coorelation  ","f1ed4306":"## Confusion Matrix","e53becfe":"* We have 19 variables which we can remove from modelling and analysis\n* We should also remove those observations where all values are NAs or nulls","591a76bb":"### Last Credit Full Details","d0fa98a3":"### Grade ","a8d0ed6b":"## ROC curve","a371bf24":"### Home_Ownership ","eac22371":"## ROC Curve","d0ddb874":"## Coorelation with Dependent Variable( default_ind )","23c8bd63":"As per the problem statement, the steps as follows :\n\n- Exploratory Data Analysis (EDA)\n  - Data Cleaning\n  - Variable Transformations\n\n- Feature engineering and Variable Selection\n- Model Building and Validation\n    - Preprocessing\n    - Model Building, testing and validation\n    - Model selection\n- Final results","a640891c":"### Null Values ","77c6b232":"### Payment_Plan","d6e4dad3":"## Dependent Variable Analysis ","499978aa":"## Confusion Matrix","30a50293":"### Initial_list_status  ","3efc309f":"# EDA","4e5c260e":"## RondomForest Model"}}