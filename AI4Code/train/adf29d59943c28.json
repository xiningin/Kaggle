{"cell_type":{"2e7ecf8e":"code","5141bf46":"code","bc0f5864":"code","55a0a7a7":"code","6e94b78a":"code","7261055f":"code","aacabc8b":"code","f2a60003":"code","a6fbcfa5":"code","446703d6":"code","6bb8530c":"code","e59efe02":"code","c7ebc4c6":"code","28d74069":"code","266e512e":"code","d4d93559":"code","aba3d0be":"code","59e10ae3":"code","ba6f424b":"markdown","eb1cc3b5":"markdown","50aa7455":"markdown","f819fc72":"markdown","9b68b9bc":"markdown","c989640f":"markdown","518a491d":"markdown","9fbb4bd6":"markdown","ab1e67b3":"markdown","23cae69d":"markdown","9e83a164":"markdown","6c820328":"markdown","f847e36a":"markdown","4ad546d2":"markdown","e1b31e47":"markdown","4a242756":"markdown","0c37f8d3":"markdown","572fbb32":"markdown","b1b0462c":"markdown","08d5d8fb":"markdown","890b0c87":"markdown","2b0ac050":"markdown","0582168b":"markdown","456afbb9":"markdown","1786cfd8":"markdown","231c77b4":"markdown","1ca5c1d0":"markdown","bab46a20":"markdown","0ab4b164":"markdown","e6b73d00":"markdown"},"source":{"2e7ecf8e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5141bf46":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.style.use('ggplot')\n\ndf = pd.read_csv('..\/input\/pubg-finish-placement-prediction\/train_V2.csv')\ndf.head()","bc0f5864":"#Calculating headshot percentage \ndf['headShotPercentage'] = df[['kills','headshotKills']].apply(lambda x: x['headshotKills']\/x['kills'] if x['kills'] > 0 else 0, axis=1) #if kills are 0 returning 0 else 'heashotKills' by 'kills'\ndf[(df['headShotPercentage'] > 0.9) & (df['kills'] > 40)][['Id','boosts','heals','headshotKills','kills','winPlacePerc']] #finding outthe cheaters by searching the players with more than 40 kills and 90% of them are from headshots","55a0a7a7":"#first Calculating the total Distance travelled by a player i.e, sum of 'rideDistance','swimDistance' and 'walkDistance'\ndf['totalDistance'] = df['rideDistance'] + df['swimDistance'] + df['walkDistance']\nkills_without_movement = df[(df['totalDistance'] <= 0) & (df['kills'] > 10)]#Getting the players who had not moved but got kills more than 10\nkills_without_movement['kills'].plot.hist(figsize=(12, 7)) #Plotting the graph to chech the frequency of kills\nplt.xlabel('Kills')\nplt.title('Frequency of kills by cheaters without movement')","6e94b78a":"weapons_without_movement = df[(df['totalDistance'] == 0) & (df['weaponsAcquired'] > 50)]#players who have more than 50 weapons and has not moved\nfig, ax1 = plt.subplots(figsize=(12, 7))\nsns.distplot(weapons_without_movement['weaponsAcquired'], ax=ax1)\nplt.title('Frequency of weapons acquired by cheaters')","7261055f":"#Common player in both of previous observations\ncommon_players = [player for player in kills_without_movement['Id'].unique() if player in weapons_without_movement['Id'].unique()]\ncommon_players","aacabc8b":"matchType = kills_without_movement['matchType'].value_counts() #Getting the value count for each match in match type\nmatchType.drop(matchType[matchType == 0].index, axis=0, inplace=True)#dropping the matchType which has 0 value count.\nmatchType.plot.barh(figsize=(12,6))#plotting a bar plot\nplt.xlabel('Numbers of players')\nplt.ylabel('Match type')\nplt.title('Match type cheaters are interested in')","f2a60003":"fig, axes = plt.subplots(figsize=(20,5))\nsns.boxplot(y='kills', x='matchType', data=df, ax= axes)#Plotting box plot between different match type and kills\nplt.xticks(rotation=45)\nplt.title('kills for different matches')","a6fbcfa5":"match_count = df.groupby(['matchType']).size().reset_index() #total size (count) of each match in match type\nmatch_count[0] = match_count[0]\/df.shape[0]*100  # playing % of each match\nmatch_count.drop(match_count[match_count[0] < 1].index, axis=0, inplace=True) #Deleting the match which have playing percentage less than 1%\nfig, ax1 = plt.subplots(figsize=(16,7))\nax1.pie(match_count[0], labels=match_count['matchType'], autopct='%1.2f%%', shadow=True, startangle=90)","446703d6":"match_to_keep = ['squad-fpp','squad','solo-fpp','solo','duo-fpp','duo']\nmost_match = df[df.matchType.isin(match_to_keep)] #Getting only matches with has playing % more than 1\nfig, ax1 = plt.subplots(figsize=(16,7))\nsns.pointplot(x='kills', y='winPlacePerc', hue='matchType', data=most_match, ax=ax1)\nplt.title('Win percentage vs Kills for different matches')","6bb8530c":"sns.jointplot(y='boosts', x='winPlacePerc', data=df, color='#0066ff')#plotting for boosts\nplt.title('Win Percentage vs Boosts')","e59efe02":"fig, ax1 = plt.subplots(figsize=(13,5))# plotting for heals\nsns.pointplot(x='heals', y='winPlacePerc', data=df, ax=ax1)\nplt.xlim((0,30))\nplt.title('win percentage vs heals')","c7ebc4c6":"fig, ax1 = plt.subplots(figsize=(14,6))\nsns.distplot(df['totalDistance'], color='#1ab2ff', ax=ax1) #getting the distribution of total Distance\nplt.title('Distribution of Total Distance')","28d74069":"fig, ax1 = plt.subplots(figsize=(14,6))\ndistance = df[df['totalDistance'] < 30000][['totalDistance','kills','winPlacePerc']] #Getting total distance less than 30 km (30000 m)\ndistance['totalDistance'] = distance['totalDistance'].apply(lambda x: np.around(x\/1000)) #Converting the distance in Km and taking round of it\nsns.lineplot(x='totalDistance', y='winPlacePerc', data=distance, color='#002233', ax=ax1)\nplt.xlabel('Total Distance in Km')\nplt.title('win percentage vs total distance')","266e512e":"bin_used = [0,10,20,30,40,55]\nlabel_used = ['0-10','10-20','20-30','30-40','40-55']\ncategories = pd.cut(df['DBNOs'], bins=bin_used, labels=label_used, include_lowest=True) #Converting the knocks into bins\n\nfig, ax1 = plt.subplots(figsize=(14,6))\nsns.boxplot(y=df['winPlacePerc'], x=categories, ax=ax1)\nplt.title('Win percentage vs Knocks')\nplt.xlabel('Knocks')","d4d93559":"df['killsPerDistance'] = df[['kills','totalDistance']].apply(lambda x : x['kills']\/x['totalDistance'] if x['totalDistance'] > 0 else 0, axis=1) #If totalDistance is greater than 0 return 0 else return 'kills' by 'totalDistance'\ndf['totalBoosts\/Heals'] = df['boosts'] + df['heals'] #sum of 'boosts' and 'heals'\ndf['damagePerKill'] = df.apply(lambda x: x['damageDealt']\/x['kills'] if x['kills'] > 0 else 0, axis=1)#damage delt per kill","aba3d0be":"corr = df.corr() #Getting correlation\ncorr1 = np.abs(corr).nlargest(11, 'winPlacePerc') #absoluting the corr value so we can find the top 10 correlated columns\ncorr = corr.loc[corr1.index, corr1.index] #get highly correlated columns\n\nfig, axes = plt.subplots(figsize=(13,6))\nsns.heatmap(corr, annot=True, cmap='RdYlBu', ax=axes)","59e10ae3":"corr_col = df[corr.index] #Getting the correlated columns\nsns.pairplot(corr_col)","ba6f424b":"I have created 3 more features:\n* **killsPerDistance** : it is kills by totalDistance\n* **totalBoosts\/Heals** : it is the sum of boosts and heals\n* **damagePerKills** : it is damage dealt per kills","eb1cc3b5":"See how the distribution is, there are lots of cheaters in the dataset.  \n\nNow let's see if there are any players common in both of previous observations i.e, kills without movement and weapons without movement.\n","50aa7455":"1. **Have a very high headshot percentage.**\nGenerally cheaters have a very high headshot percentage, So I'm finding out the players who have more than 40 kills and 90% of them are from headshots.\n","f819fc72":"## Total Distance  \n\nAs we have created the feature 'totalDistance' earlier, first let's see how it is distributed.","9b68b9bc":"The number of knocks increases your chances of winning, there is 1.0 winning percentage for knocks 40-55 that is because there are only few players in that range and they have a very high win percentage.","c989640f":"There are a total of 15 players who are common in both the observations. I can either:\n* drop each row which have cheater, or\n* drop each entry of these players  \n\nI'm not doing anything to them now because our main focus is on analysing the data.\n","518a491d":"From above heatmap we can say that:\n* The totalDistance column is positively correlated with walkDistance. \n* totalBoosts\/Heals column is highly positively correlated with 'boosts' and 'heals' column.\n* 'kills' column is highly positively correlated with 'killPlace' and 'damageDealt'  \n\nFrom above corelated columns we can have the columns in which winPlacePerc is highly correlated.\n\nLet's see how these all columns are coorelated with pair plor.","9fbb4bd6":"## Let's Start\nLet's start by first identifying the cheaters\/hackers in the game. As the popularity of the game increased the people started to use different Applications which increased the chance of winning. So I'll use 3 approaches to identify the cheaters\/hackers:\n* Have a very high headshot percentage.\n* Have lots of kills without moving.\n* Have acquired lots of weapons without moving.\n\nLet's Start our Analysis:","ab1e67b3":"The DataFrame (df) has 4446966 rows and 29 columns. Before starting first let's acquire some information about each column.\n* **DBNOs** - Number of enemy players knocked.\n* **assists** - Number of enemy players this player damaged that were killed by teammates.\n* **boosts** - Number of boost items used.\n* **damageDealt** - Total damage dealt. Note: Self inflicted damage is subtracted.\n* **headshotKills** - Number of enemy players killed with headshots.\n* **heals** - Number of healing items used.\n* **Id** - Player\u2019s Id\n* **killPlace** - Ranking in match of number of enemy players killed.\n* **killPoints** - Kills-based external ranking of player. (Think of this as an Elo ranking where only kills matter.) If there is a value other than -1 in rankPoints, then any 0 in killPoints should be treated as a \u201cNone\u201d.\n* **killStreaks** - Max number of enemy players killed in a short amount of time.\n* **kills** - Number of enemy players killed.\n* **longestKill** - Longest distance between player and player killed at time of death. This may be misleading, as downing a player and driving away may lead to a large longestKill stat.\n* **matchDuration** - Duration of match in seconds.\n* **matchId** - ID to identify match. There are no matches that are in both the training and testing set.\n* **matchType** - String identifying the game mode that the data comes from. The standard modes are \u201csolo\u201d, \u201cduo\u201d, \u201csquad\u201d, \u201csolo-fpp\u201d, \u201cduo-fpp\u201d, and \u201csquad-fpp\u201d; other modes are from events or custom matches.\n* **rankPoints** - Elo-like ranking of player. This ranking is inconsistent and is being deprecated in the API\u2019s next version, so use with caution. Value of -1 takes place of \u201cNone\u201d.\n* **revives** - Number of times this player revived teammates.\n* **rideDistance** - Total distance traveled in vehicles measured in meters.\n* **roadKills** - Number of kills while in a vehicle.\n* **swimDistance** - Total distance traveled by swimming measured in meters.\n* **teamKills** - Number of times this player killed a teammate.\n* **vehicleDestroys** - Number of vehicles destroyed.\n* **walkDistance** - Total distance traveled on foot measured in meters.\n* **weaponsAcquired** - Number of weapons picked up.\n* **winPoints** - Win-based external ranking of player. (Think of this as an Elo ranking where only winning matters.) If there is a value other than -1 in rankPoints, then any 0 in winPoints should be treated as a \u201cNone\u201d.\n* **groupId** - ID to identify a group within a match. If the same group of players plays in different matches, they will have a different groupId each time.\n* **numGroups** - Number of groups we have data for in the match.\n* **maxPlace** - Worst placement we have data for in the match. This may not match with numGroups, as sometimes the data skips over placements.\n* **winPlacePerc** - The target of prediction. This is a percentile winning placement, where 1 corresponds to 1st place, and 0 corresponds to last place in the match. It is calculated off of maxPlace, not numGroups, so it is possible to have missing chunks in a match.   \n[Click Here to know more about data](https:\/\/www.kaggle.com\/c\/pubg-finish-placement-prediction\/data)\n\n","23cae69d":"## Feature Engineering  \n\nNow let's create some interesting features.  \nI have already created two features i.e, 'headshotPercentage' and 'totalDistance'. Now let's create some new features.","9e83a164":"Players are dropped into a wide, open area, and they must fight to the death - all while the battlefield shrinks, adding pressure to all in its grip. Use a variety of interesting weapons and vehicles amid the BATTLEGROUNDS. \"Killing off another player cuts down on your competition, but it also offers up the opportunity to grab some loot. Your character can only carry around a limited amount of gear, so there are important questions to ask whenever you come across new items. Is it better to stick with your current 9mm pistol, or hold out hope that you'll be able to find ammo for a found 12 gauge shotgun?\". Source- [Source](https:\/\/pubg.gamepedia.com\/About)  \n\nIn this kernel I'll try to explore the data and play with data. I'm going to do Exploratory Data Analysis and Feature Engineering on the data and see how different columns are co-related to the target variable.","6c820328":"Most of the kills (about 100) are in between 10-14, there are even some of the players who have more than 30 kills without movement.","f847e36a":"# **Know The Data**\n","4ad546d2":"There is a slight decay in the win percentage in between 15-25 Km this might be because of playzone, the players who have travelled less might have landed in the playzone area and have acquired places for attack and defence while the players who have travelled a lot for safezone have to fight with them therefore has less chances of winning the game. I think that might be the reason. ","e1b31e47":"## knocked  \n\nLet's see how win percentage depends on knocks.","4a242756":"2. **Have lots of kills without moving.**  \nIf two opponents land at the same place one might get few kills without moving. I'm using a threshold of 10 kills i.e, if any player has more than 10 kills without moving he might be a cheater. For this I'm adding a new feature 'totalDistance' which is the total distance travelled by a player.","0c37f8d3":"Most of the players travel about 0-10000 meters. There are few who have travelled more than 30000 meters, be aware they might be the cheates using some Application for high speed.  \n\nNow let's see how Total Distance is dependent on win percentage.","572fbb32":"## Match Type  \nLet's see how kills vary with match type.","b1b0462c":"Let's see which match type are cheaters interested in to play. Do they like solo or duo let's see it.","08d5d8fb":"# correlation with target  \n\nLet's see which are the top 10 features that are highly correlated with the target variable i.e winPlacePerc.","890b0c87":"## Boosts\/Heals \n\nLet's see how win percentage varies with Boosts and heals.","2b0ac050":"As I thought, the healing items increase the win percentage.","0582168b":"From the pie chart it is clear that the players like to play fpp (First Person Perspective) matches rather than classic 'solo', 'duo' or 'squad'. The playing percentage of 'normal-solo-fpp','normal-squad','normal-duo-fpp' and 'normal-squad-fpp' is less than 0% as most cheates like to play in this match.  \nLet's see how kills and win Percentage (winPlacePerc) are related to each other in each match type.\n","456afbb9":"## **Thanks for reading the kernel.** \n## **If you Like it, please Upvote**","1786cfd8":"### Reading the data\nFirst things first, let's start by exporting the libraries that I'll need and reading the data using pandas.","231c77b4":"As is the above graph 'normal-solo-fpp','normal-squad','normal-duo-fpp' and 'normal-squad-fpp' has got the highest kills this might be because there are lots of cheaters in these match types as discussed above.  \n\nLet's see which match has the highest playing percentage. ","1ca5c1d0":"As the boosting item increases the win percentage increases. ","bab46a20":"Cheaters like to play in 'normal-solo-fpp','normal-squad','normal-duo-fpp',''normal-duo','normal-solo' and 'normal-squad-fpp'.","0ab4b164":"3. **Have acquired lots of weapons without moving.**  \nIn PUBG the players land bare hands they have to loot for weapons. There are some cheaters in the game who may have acquired lots of weapons without travelling any distance. Let's see if there are any in our dataset.  \nFor this I'm looking for players who have acquired more than 50 weapons without moving \n","e6b73d00":"So, there are two players player one with id '15622257cb44e2' have got 40 out of 42 kills by headshot without using boosts or heals and another player with id '15622257cb44e2' have got 39 out of 42 kills by headshot with only two heals and no boosts. "}}