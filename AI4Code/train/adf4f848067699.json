{"cell_type":{"b956d5d5":"code","222949f2":"code","701cbf50":"code","8dec3ad7":"code","80d643d1":"code","d79e7cb7":"code","b70eed55":"code","6819d931":"code","1c2b7f15":"code","9b106a5d":"code","39061625":"code","bbb0fbee":"code","10282022":"code","6825806d":"code","a792cff6":"code","b58d6b11":"code","9fdc7554":"code","4d2225b4":"code","205aee2b":"code","58b9ed36":"code","ef59c6e7":"code","6c17ba42":"code","b86ee3da":"code","713203eb":"code","843c912b":"code","f8f8deb9":"code","c5b8311a":"code","11929746":"code","02c3593e":"code","4149ecf4":"code","24d7d575":"code","5f529a07":"code","e4178a84":"code","b4ba528e":"code","3d4318b4":"code","bdd42f84":"code","7badea4d":"code","01f04583":"code","20fbbfa0":"markdown","b939a063":"markdown","c67ec386":"markdown","a567afae":"markdown","bc238982":"markdown"},"source":{"b956d5d5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport warnings\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nwarnings.filterwarnings(\"ignore\")","222949f2":"df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\nprint(df.shape)\ndf.head()","701cbf50":"df.info()","8dec3ad7":"x_axis = np.arange(12)\nplt.figure(figsize = (14, 2))\nplt.bar(x_axis, df.count(), tick_label = df.columns)\nplt.title('non-null counts')\nplt.show()","80d643d1":"sns.set_theme(style='whitegrid')\nsns.countplot(x = 'Survived', data = df)\nplt.show()","d79e7cb7":"sns.set_theme(style='whitegrid')\nsns.countplot(x = 'Survived', data = df, hue = \"Sex\", palette=\"Set3\")\nplt.show()","b70eed55":"sns.set_theme(style='whitegrid')\nsns.countplot(x = 'Survived', data = df, hue = \"Pclass\", palette=\"Set1\")\nplt.show()","6819d931":"sns.countplot(x = 'Survived', data = df, hue = \"Embarked\", palette=\"rainbow\")\nplt.show()","1c2b7f15":"sns.distplot(df['Age'].dropna(), kde = False, color = 'blue', bins = 40)\nplt.show()","9b106a5d":"sns.countplot(x = 'SibSp', data = df, palette=\"Set2\")\nplt.show()","39061625":"sns.countplot(x = 'Survived', data = df,  hue = \"SibSp\", palette=\"Set2\")\nplt.legend(loc = \"upper right\")\nplt.show()","bbb0fbee":"xcols = [ 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked'] #input features\nycols = ['Survived'] # Target ","10282022":"df['Age'].fillna(df['Age'].mean(), inplace = True)  # Replace the NaN values from the Age with the mean age \ndf['Embarked'].fillna(\"S\", inplace = True)","6825806d":"X = df[xcols]\ny = df[ycols]","a792cff6":"from sklearn.preprocessing import LabelEncoder\n\ngender_le = LabelEncoder()\nembarked_le = LabelEncoder()\n\nX['Sex'] = gender_le.fit_transform(df['Sex'])\nX['Embarked'] = embarked_le.fit_transform(df['Embarked'])","b58d6b11":"print(gender_le.classes_)\nprint(embarked_le.classes_)","9fdc7554":"X.columns","4d2225b4":"y.value_counts()","205aee2b":"temp_df = X\ntemp_df['Survived'] = y\n\ncorr = temp_df.corr()\n\nplt.figure(figsize = (8, 6))\nsns.heatmap(corr, annot = True, fmt= \".2f\", cmap = \"gray\", linewidths= 0.1, linecolor=\"black\")\nplt.show()","58b9ed36":"from sklearn.model_selection import train_test_split\n\nnew_cols = ['Pclass', 'Sex',  'Fare', 'Embarked']\nX_train, X_val, y_train, y_val = train_test_split(X[xcols], y, test_size=0.33, random_state=42)","ef59c6e7":"X_train","6c17ba42":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nX_train = pd.DataFrame(scaler.fit_transform(X_train))\nX_val = pd.DataFrame(scaler.transform(X_val))","b86ee3da":"X_train","713203eb":"from sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression(random_state=42).fit(X_train, y_train)","843c912b":"from sklearn.metrics import confusion_matrix\n\ny_val_pred = clf.predict(X_val)\nconfusion = confusion_matrix(y_val, y_val_pred)\n\nsns.heatmap(confusion, annot = True, cmap = sns.light_palette(\"seagreen\", as_cmap=True), fmt='.2f')\nplt.show()","f8f8deb9":"clf.score(X_val, y_val)","c5b8311a":"test_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nprint(test_df.count())\ntest_df","11929746":"test_df['Age'].fillna(test_df['Age'].mean(), inplace = True)\ntest_df['Fare'].fillna(test_df['Fare'].mean(), inplace = True)\ntest_df.count()","02c3593e":"X_test = test_df[xcols]\nX_test['Sex'] = gender_le.transform(X_test['Sex'])\nX_test['Embarked'] = embarked_le.transform(X_test['Embarked'])\n\nprint(X_test.count())\nX_test = pd.DataFrame(scaler.transform(X_test))\n#X_test = X_test[new_cols]\nX_test","4149ecf4":"y_pred = clf.predict(X_test)","24d7d575":"sub_df = pd.DataFrame({'PassengerId': test_df['PassengerId'], 'Survived':y_pred})","5f529a07":"sub_df.to_csv('titanic_sub2.csv', index = False)","e4178a84":"from sklearn.svm import SVC\nclf2 = SVC(gamma=2, C=1)","b4ba528e":"clf2.fit(X_train, y_train)","3d4318b4":"print(clf2.score(X_val, y_val))\ny_pred2 = clf2.predict(X_val)\n\nconfusion_matrix(y_val, y_pred2)","bdd42f84":"new_cols = ['Pclass', 'Sex',  'Fare', 'Embarked']\nX_train, X_val, y_train, y_val = train_test_split(X[xcols], y, test_size=0.2, random_state=42)\n\n\n#X_train['Sex', 'Fare'] = pd.DataFrame(scaler.fit_transform(X_train['Sex', 'Fare']))\n#X_val['Sex', 'Fare'] = pd.DataFrame(scaler.transform(X_val['Sex', 'Fare']))\nscaler_Fare = StandardScaler()\nnew_Fare = scaler_Fare.fit(X_train['Fare'])\n\n#X_train","7badea4d":"clf_lr2 = LogisticRegression(random_state=42).fit(X_train, y_train)","01f04583":"y_val_pred = clf_lr2.predict(X_val)\nconfusion = confusion_matrix(y_val, y_val_pred)\n\nseaborn.heatmap(confusion, annot = True, cmap = seaborn.light_palette(\"seagreen\", as_cmap=True), fmt='.2f')\nplt.show()\n\nprint(\"Validation Accuracy: \", clf_lr2.score(X_val, y_val))","20fbbfa0":"## **2nd approach: SVM**","b939a063":"**Correlation Matrix**","c67ec386":"## **Exploratory Data Analysis**","a567afae":"**only 4 features :)**","bc238982":"### **Data Cleaning**"}}