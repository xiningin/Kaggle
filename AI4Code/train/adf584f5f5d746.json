{"cell_type":{"e64a2889":"code","9d6f2506":"code","7ac77113":"code","ecf7818f":"code","e9c81373":"code","9c41012c":"code","6e715b0e":"code","91a12e93":"code","fdefb08e":"code","7d2e5290":"code","363179e5":"code","aea88127":"code","7a9c9236":"code","9cb86070":"code","b52e863c":"code","0b034b4e":"code","9e8e616c":"code","0d6a81f5":"code","b4ab8c4a":"code","9255e536":"code","b4d63b7b":"code","f22f8c14":"code","a74b97e7":"code","867f2677":"markdown","83fc2c07":"markdown","43d67d51":"markdown","a3f260a4":"markdown","9928b2e9":"markdown","f21587e5":"markdown","7d96b14d":"markdown","82ac161b":"markdown","c5b0c3f8":"markdown","fc776213":"markdown"},"source":{"e64a2889":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9d6f2506":"fashion_train_df=pd.read_csv('..\/input\/fashion-mnist_train.csv',sep = ',')\n\nfashion_test_df=pd.read_csv('..\/input\/fashion-mnist_test.csv',sep = ',')","7ac77113":"fashion_train_df.head()","ecf7818f":"fashion_test_df.tail()","e9c81373":"print(fashion_test_df.shape)\nprint(fashion_train_df.shape)","9c41012c":"training =np.array(fashion_train_df,dtype ='float32')","6e715b0e":"testing=np.array(fashion_test_df,dtype = 'float32')","91a12e93":"import random\ni=random.randint(1,60000)\nplt.imshow(training[i,1:].reshape(28,28))\nlabel=training[i,0]\nlabel","fdefb08e":"#view of images in grid format\n# Define the dimensions of the plot grid \n\nw_grid=15\nl_grid=15\n\n# fig,axes = plt.subplot(l_grid,w_grid)\n# subplot return the figure object and axes object\n# we can use the axes object to plot specific figures at various locations\n\nfig,axes=plt.subplots(l_grid,w_grid,figsize=(17,17))\n\naxes = axes.ravel() # flatten thr 15 X 15 matrix into 225 array \n\nn_training = len(training) # get the length of the training dataset\n\n#select a random number from 0 t n_training\n\nfor i in np.arange(0,w_grid*l_grid): #create evenly spaces variables\n    #select a random number\n    \n    index = np.random.randint(0,n_training)\n    # read and disply and images with the selectd index\n    axes[i].imshow(training[index,1:].reshape((28,28)))\n    axes[i].set_title(training[index,0],fontsize = 8)\n    axes[i].axis('off')\n    \nplt.subplots_adjust(hspace=0.4)","7d2e5290":"x_train=training[:,1:]\/255\ny_train= training[:,0]","363179e5":"x_test= testing[:,1:]\/255\ny_test=testing[:,0]","aea88127":"from sklearn.model_selection import train_test_split\nX_train,X_vali,y_train,y_vali=train_test_split(x_train,y_train,test_size = 0.2, random_state = 12345)","7a9c9236":"X_train =X_train.reshape(X_train.shape[0],*(28,28,1))\nx_test = x_test.reshape(x_test.shape[0],*(28,28,1))\nX_vali = X_vali.reshape(X_vali.shape[0],*(28,28,1))","9cb86070":"X_train.shape","b52e863c":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D,MaxPooling2D,Dense,Flatten,Dropout\nfrom keras.optimizers import Adam\nfrom keras.callbacks import TensorBoard","0b034b4e":"clf= Sequential()\nclf.add(Conv2D(32,3,3,input_shape= (28,28,1),activation='relu'))\nclf.add(MaxPooling2D(pool_size =(2,2)))\nclf.add(Flatten())\nclf.add(Dense(output_dim= 32,activation='relu'))\nclf.add(Dense(output_dim= 10,activation='sigmoid'))","9e8e616c":"clf.compile(loss='sparse_categorical_crossentropy',optimizer=Adam(lr=0.001),metrics =['accuracy'])","0d6a81f5":"clf.fit(X_train,\n       y_train,\n       batch_size= 512,\n       nb_epoch=50,\n        verbose=1,\n        validation_data=(X_vali,y_vali))","b4ab8c4a":"evaluation=clf.evaluate(x_test,y_test)\nprint('Test Accuracy:{:.3f}'.format(evaluation[1]))","9255e536":"pred=clf.predict_classes(x_test)","b4d63b7b":"L=5\nW=5\n\nfig,axes=plt.subplots(L,W,figsize=(12,12))\naxes=axes.ravel()\n\nfor i in np.arange(0,L*W):\n    axes[i].imshow(x_test[i].reshape(28,28))\n    axes[i].set_title('Prediction Class = {:0.1f}\\n True class = {:0.1f}'.format(pred[i],y_test[i]))\n    axes[i].axis('off')\n    \nplt.subplots_adjust(wspace=0.5)","f22f8c14":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,pred)\nplt.figure(figsize=(14,10))\nsns.heatmap(cm,annot=True)","a74b97e7":"from sklearn.metrics import classification_report\n\nnum_classes=10\ntarget_names=[\"class {}\".format(i)for i in range (num_classes)]\n\nprint(classification_report(y_test,pred,target_names=target_names))\n","867f2677":"**Context**\n\n\n\nFashion-MNIST is a dataset of Zalando's article images\u2014consisting of a training set of 60,000 examples and a test set of 10,000 examples. Each example is a 28x28 grayscale image, associated with a label from 10 classes. Zalando intends Fashion-MNIST to serve as a direct drop-in replacement for the original MNIST dataset for benchmarking machine learning algorithms. It shares the same image size and structure of training and testing splits.\n\nThe original MNIST dataset contains a lot of handwritten digits. Members of the AI\/ML\/Data Science community love this dataset and use it as a benchmark to validate their algorithms. In fact, MNIST is often the first dataset researchers try. \"If it doesn't work on MNIST, it won't work at all\", they said. \"Well, if it does work on MNIST, it may still fail on others.\"\n\nZalando seeks to replace the original MNIST dataset\n\nContent\nEach image is 28 pixels in height and 28 pixels in width, for a total of 784 pixels in total. Each pixel has a single pixel-value associated with it, indicating the lightness or darkness of that pixel, with higher numbers meaning darker. This pixel-value is an integer between 0 and 255. The training and test data sets have 785 columns. The first column consists of the class labels (see above), and represents the article of clothing. The rest of the columns contain the pixel-values of the associated image.\n\nTo locate a pixel on the image, suppose that we have decomposed x as x = i * 28 + j, where i and j are integers between 0 and 27. The pixel is located on row i and column j of a 28 x 28 matrix.\nFor example, pixel31 indicates the pixel that is in the fourth column from the left, and the second row from the top, as in the ascii-diagram below. \n\nLabels\n\nEach training and test example is assigned to one of the following labels:\n\n0 T-shirt\/top\n1 Trouser\n2 Pullover\n3 Dress\n4 Coat\n5 Sandal\n6 Shirt\n7 Sneaker\n8 Bag\n9 Ankle boot \n\nTL;DR\n\nEach row is a separate image\nColumn 1 is the class label.\nRemaining columns are pixel numbers (784 total).\nEach value is the darkness of the pixel (1 to 255)","83fc2c07":"**Splitting of Data**","43d67d51":"**Remember the 10 classes decoding as follows\n 0 = T-shirt.top\n 1 = Trouser\n 2 = Pullover\n 3 = Dress\n 4 = Coat \n 5 = Sandal\n 6 = Shirt\n 7 = Sneaker\n 8 = Bag\n 9 = Ankle boot**","a3f260a4":"Once we Load the data Lets See How data look like.\nTo see Data we use pandas Head and tail command which give us first five and last five entries of our data set","9928b2e9":"Here what we had done is we make a i variable which choose random number from 1 to 60000 which we will put in plt.imshow to visual the image of size 28 X 28","f21587e5":"**Let Check the shape of our data**","7d96b14d":"let make x_train and y _train ,in x_train we include all the columns except first which contain label of the data","82ac161b":"So here in testing set we have 10000 images \nand in training set  we have 60000 images","c5b0c3f8":"**Loading Data**","fc776213":"we change the data into array so that we can visualize the data"}}