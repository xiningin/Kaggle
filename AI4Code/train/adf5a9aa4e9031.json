{"cell_type":{"365397d5":"code","3c33c098":"code","7d90db38":"code","fec7e6ac":"code","cb3fe88a":"code","b59294e0":"code","3c39db58":"code","3725e30e":"code","3253a205":"code","ce31ee02":"code","73f59aa4":"code","bba17a49":"code","e66f238d":"code","8f4a7b2f":"code","09d84668":"markdown","d1119dc6":"markdown","c4757581":"markdown","0ec9b4a1":"markdown","9a72d336":"markdown","81e083cd":"markdown","cbddc647":"markdown","b62cff18":"markdown","0f288049":"markdown"},"source":{"365397d5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3c33c098":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.python import keras\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, Conv2D, Dropout,MaxPooling2D\n","7d90db38":"img_rows, img_cols = 28, 28\nnum_classes = 10\nbatch_size = 64\nepochs = 30\n\ndef prep_data(raw):\n    y = raw[:, 0]\n    out_y = keras.utils.to_categorical(y, num_classes)\n    \n    x = raw[:,1:]\n    num_images = raw.shape[0]\n    out_x = x.reshape(num_images, img_rows, img_cols, 1)\n    out_x = out_x \/ 255\n    return out_x, out_y","fec7e6ac":"# preparing the data for Training\ntrain_data = \"..\/input\/train.csv\"\ntrain = np.loadtxt(train_data, skiprows=1, delimiter=',')\nX_train, Y_train = prep_data(train)\n\n# preparing the data for Testing\ntest_data = \"..\/input\/test.csv\"\ntest = np.loadtxt(test_data, skiprows=1, delimiter=',')","cb3fe88a":"mnist_model = Sequential() \nmnist_model.add(Conv2D(32, kernel_size=(5, 5), activation='relu', input_shape=(img_rows,img_cols,1)))\nmnist_model.add(Conv2D(32, kernel_size=(5, 5), activation='relu'))\nmnist_model.add(MaxPooling2D(pool_size=(2, 2)) )\n\nmnist_model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\nmnist_model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\nmnist_model.add(Dropout(0.2))\n\nmnist_model.add(Flatten())\nmnist_model.add(Dense(128, activation = \"relu\"))\nmnist_model.add(Dropout(0.5))\nmnist_model.add(Dense(num_classes, activation='softmax'))","b59294e0":"mnist_model.summary()","3c39db58":"mnist_model.compile(loss='categorical_crossentropy',\n             optimizer='adam',\n             metrics=['accuracy'])","3725e30e":"visualize = mnist_model.fit(X_train, Y_train, batch_size=batch_size, epochs=epochs,validation_split = 0.2, verbose=1)","3253a205":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(visualize.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(visualize.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(visualize.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(visualize.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","ce31ee02":"# Split the train and the validation set for the fitting\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=2)","73f59aa4":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    \n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    \n    \n# Predict the values from the validation dataset\nY_pred = mnist_model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10))  ","bba17a49":"# Display some error results \n\n# Errors are difference between predicted labels and true labels\nerrors = (Y_pred_classes - Y_true != 0)\n\nY_pred_classes_errors = Y_pred_classes[errors]\nY_pred_errors = Y_pred[errors]\nY_true_errors = Y_true[errors]\nX_val_errors = X_val[errors]\n\ndef display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True)\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)))\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n\n# Probabilities of the wrong predicted numbers\nY_pred_errors_prob = np.max(Y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(Y_pred_errors, Y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = Y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 6 errors \nmost_important_errors = sorted_dela_errors[-6:]\n\n# Show the top 6 errors\ndisplay_errors(most_important_errors, X_val_errors, Y_pred_classes_errors, Y_true_errors)","e66f238d":"# predict results\ntest = pd.read_csv(\"..\/input\/test.csv\")\ntest = test \/ 255.0\ntest = test.values.reshape(-1,28,28,1)\nresults = mnist_model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","8f4a7b2f":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist.csv\",index=False)","09d84668":"## Training the Model","d1119dc6":"## Validation of the Model","c4757581":"## Model Summary","0ec9b4a1":"## Plot the Loss and Accuracy of Model","9a72d336":"## Defining the Loss Function","81e083cd":"## Data Preprocessing and Preparation","cbddc647":"## Display Some True and Error Results","b62cff18":"## Defining The Model","0f288049":"## Prediction and Submission of Results"}}