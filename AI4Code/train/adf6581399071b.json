{"cell_type":{"a344e101":"code","ee45c4d0":"code","9ca900ef":"code","e0f4555c":"code","45ade416":"code","4a9b26ba":"code","e8543fdc":"code","f509c318":"code","53293ec0":"code","12527c2c":"code","edcb641e":"code","caa5eae3":"code","f84b6bf9":"code","6b4b6a90":"code","c13cdae1":"code","e45e98b9":"code","e8ec86cb":"code","a0f76c86":"code","2c833197":"code","1d54ea73":"code","08a73381":"code","dbfdfd22":"code","f471ed2c":"code","35112ae9":"code","a4edfd80":"code","cffd6eb2":"code","4a443a80":"code","11163518":"markdown","96228d5e":"markdown","bc845127":"markdown","c397c4b4":"markdown","5ce78790":"markdown","eeecbaba":"markdown","ba2f7336":"markdown","368d85d4":"markdown","ac5bc6dd":"markdown","22d5761a":"markdown","f5e7ea16":"markdown","a7be9038":"markdown","53d7ceb3":"markdown","8ed7acaa":"markdown","9aba7b2a":"markdown","0c883e4e":"markdown","c9ee7da1":"markdown","089cf601":"markdown","311b5f2c":"markdown","172a77c0":"markdown"},"source":{"a344e101":"!pip3 install pmdarima","ee45c4d0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib\nimport statsmodels.api as sm\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.statespace.tools import diff\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom pmdarima.arima import auto_arima\n\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)","9ca900ef":"dataset_confirmed = pd.read_csv('..\/input\/covid-confirmed-global\/confirmed_global.csv')\ndataset_confirmed.head()","e0f4555c":"dataset_confirmed_usa = dataset_confirmed[dataset_confirmed['Country\/Region'] == 'US']\ndataset_confirmed_usa = dataset_confirmed_usa.drop(['Province\/State', 'Country\/Region', 'Lat', 'Long'], axis=1)\ndataset_confirmed_usa.head()","45ade416":"dataset_confirmed_usa = dataset_confirmed_usa.T\ndataset_confirmed_usa.columns = ['cases']\ndataset_confirmed_usa.head()","4a9b26ba":"index = pd.DatetimeIndex(pd.date_range('20200122', '20210410', freq='d'))\ndataset_confirmed_complex=dataset_confirmed_usa.copy()\ndataset_confirmed_complex.set_index(index, inplace=True)\ndataset_confirmed_complex","e8543fdc":"after_start_date = dataset_confirmed_complex.index >= \"2020-01-22\" #All data form visualization\nbefore_end_date = dataset_confirmed_complex.index <= \"2020-09-21\"\nbetween_two_dates = after_start_date & before_end_date\nfiltered_dates_all = dataset_confirmed_complex.loc[between_two_dates]\n\nafter_start_date = dataset_confirmed_complex.index >= \"2020-01-22\" #Training data\nbefore_end_date = dataset_confirmed_complex.index <= \"2020-07-24\"\nbetween_two_dates = after_start_date & before_end_date\nfiltered_dates_train = dataset_confirmed_complex.loc[between_two_dates]\n\nafter_start_date = dataset_confirmed_complex.index >= \"2020-07-25\" #Testing data\nbefore_end_date = dataset_confirmed_complex.index <= \"2020-09-21\"\nbetween_two_dates = after_start_date & before_end_date\nfiltered_dates_predict = dataset_confirmed_complex.loc[between_two_dates]","f509c318":"len(filtered_dates_predict)","53293ec0":"for col in dataset_confirmed_complex.columns:\n    print(col, str(round(100* dataset_confirmed_complex[col].isnull().sum() \/ len(dataset_confirmed_complex), 2)) + '%')","12527c2c":"sns.lineplot(y=\"cases\", x=filtered_dates_train.index, data=filtered_dates_train)\nsns.lineplot(y=\"cases\", x=filtered_dates_predict.index, data=filtered_dates_predict,  color='red')\n\nplt.xticks(rotation=15)\nplt.title('Plot USA 22\/01 - 21\/09')\nplt.show()","edcb641e":"#Visualisasi Data latih\ndf = filtered_dates_train.copy()\nsm = plt.cm.ScalarMappable(cmap='viridis', \n                           norm=plt.Normalize(vmin=df.index.min().value,\n                                              vmax=df.index.max().value))\nsm._A = []  \n\ndf.plot(legend=False, colormap='viridis', figsize=(15,10));\n\ncbar = plt.colorbar(sm);\ncbar.ax.set_yticklabels(pd.to_datetime(cbar.get_ticks()).strftime(date_format='%b %Y'))","caa5eae3":"plot_acf(df[\"cases\"], lags = 40, label = \"90\");\nplot_pacf(df[\"cases\"], lags = 40, label = \"90\");","f84b6bf9":"# seasonality = seasonal_decompose(df, model='multiplicative')\ndf[\"d1\"] = diff(df[\"cases\"], k_diff = 1)\ndf['d2'] = diff(df[\"cases\"], k_diff = 2)","6b4b6a90":"plot_acf(df[1:].d1.values.squeeze(), lags = 40 );\nplot_pacf(df[1:].d1.values.squeeze(), lags = 40);","c13cdae1":"plot_acf(df[2:].d2.values.squeeze(), lags = 40 );\nplot_pacf(df[2:].d2.values.squeeze(), lags = 40);","e45e98b9":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nresult = seasonal_decompose(df['cases'], model='multiplicative')\nfig = result.plot()\nplt.show(fig)","e8ec86cb":"size = int(len(df)*0.8)\ntrain_data= df.iloc[:size]\ntest_data =df.iloc[size:]\nlen(test_data)\nstep_fit = auto_arima(df['cases'], start_p=0, start_q=0, max_p=7, max_q=7,\n          seasonal=False, # for SARIMA models seasonality is set to True\n          d=None, trace=True, enforce_stationarity =False, enforce_invertibility = False,\n          error_action='ignore', suppress_warnings=True, maxiter = 50, stepwise=True)\nstep_fit.summary()\n","a0f76c86":"get_ipython().run_cell_magic('time', '', 'model_base = ARIMA(df[\"cases\"].astype(float), order =(1,2,1))\\nresults_base = model_base.fit()\\nresults_base.summary()')","2c833197":"start=len(train_data)\nend=len(train_data)+len(test_data)-1\n\npredictions_base = results_base.predict(start=start, end=end, dynamic=False, typ='levels').rename('BASE_model Predictions')\nfor i in range(len(predictions_base)):\n  print(f\"predicted={predictions_base[i]:<11.10}, expected={test_data['cases'][i]}\")\n\nplt.rc('axes', axisbelow=True)\nfig = plt.figure(figsize = (15,9))\nTest_data = plt.plot(test_data['cases'],\"o\",color = \"#ff7f0e\", label = \"Test data (USA)\")\npredicted = plt.plot(predictions_base, color = '#1f77b4', label = 'Predictions(Basic model)', linewidth = 2)","1d54ea73":"def mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","08a73381":"MSE = mean_squared_error(test_data['cases'], predictions_base)\nMAE = mean_absolute_error(test_data['cases'], predictions_base)\nRMSE = mean_squared_error(test_data['cases'], predictions_base, squared=False)\nMAPE = mean_absolute_percentage_error(test_data['cases'], predictions_base)\nprint('-------------------- Error Data Testing -----------------')\nprint(\"MSE: \", MSE)\nprint(\"MAE: \", MAE)\nprint(\"RMSE: \", RMSE)\nprint(\"MAPE: \", MAPE)","dbfdfd22":"model = ARIMA(df['cases'].astype(float), order=(7,2,1))\nresults = model.fit(start_ar_lags=8) #error di parameter start_ar_lags udh deprecated => start_ar_lags=8\nfcast=results.predict(len(df),len(df)+60,typ='levels').rename('ARIMA(7,2,1) Forecast')\nfig, ax = plt.subplots(figsize=(6, 4),dpi=100)\nplot_acf(results.resid, lags =20,ax=ax,color ='#1f77b4',linewidth =0.1)\nfig, ax = plt.subplots(figsize=(6, 4),dpi=100)\nplot_pacf(results.resid, lags =20,ax=ax,color ='#1f77b4',linewidth =0.1)","f471ed2c":"start=len(train_data)\nend=len(train_data)+len(test_data)-1\npredictions = results.predict(start=(start), end=(end), dynamic=False, typ='levels').rename('Selected model Predictions')\n\nfor i in range(len(predictions)):\n  print(f\"predicted={predictions[i]:<11.10}, expected={test_data['cases'][i]}\")\n\nplt.rc('axes', axisbelow=True)\nfig = plt.figure(figsize = (10,9))\nTest_data = plt.plot(test_data['cases'],\"o\",color = \"#ff7f0e\", label = \"Test data (USA)\")\npredicted =plt.plot(predictions, color = '#1f77b4', label = 'Predictions(ARIMA 7,2,1)', linewidth =2)","35112ae9":"MSE = mean_squared_error(test_data['cases'], predictions)\nMAE = mean_absolute_error(test_data['cases'], predictions)\nRMSE = mean_squared_error(test_data['cases'], predictions, squared=False)\nMAPE = mean_absolute_percentage_error(test_data['cases'], predictions)\nprint('-------------------- Error Data Testing -----------------')\nprint(\"MSE: \", MSE)\nprint(\"MAE: \", MAE)\nprint(\"RMSE: \", RMSE)\nprint(\"MAPE: \", MAPE)","a4edfd80":"fig, ax = plt.subplots(figsize=(10,5), dpi=100)\nresults.resid.plot(kind = \"kde\")","cffd6eb2":"figs, ax = plt.subplots(figsize=(10,5),dpi = 100)\nmodel_fit = model.fit()\n# model_fit\nfigs = model_fit.plot_predict(10, 243, dynamic = False, plot_insample = True, ax=ax)\nplt.show()","4a443a80":"# start=len(train_data)\n# end=len(train_data)+len(test_data)-1\npredictions = model_fit.predict(10, 243, dynamic=False, typ='levels').rename('Selected model Predictions')\npredictions_new = predictions[175:].copy()\n\nfor i in range(len(predictions_new)):\n  print(f\"predicted={predictions_new[i]}, expected={filtered_dates_predict['cases'][i]}\")\n\nplt.rc('axes', axisbelow=True)\nfig = plt.figure(figsize = (15,9))\nTest_data = plt.plot(filtered_dates_predict['cases'],\"o\",color = \"#ff7f0e\", label = \"Testing data (USA) 25 Juli 2020 - 21 September 2020\")\npredicted =plt.plot(predictions_new, color = '#1f77b4', label = 'Predictions(ARIMA 7,2,1)', linewidth =2)","11163518":"# Plot predictions based on developed model and actual data","96228d5e":"First, we install pmdarima for module arima model","bc845127":"We also need to check if there is a missing value","c397c4b4":"The data will splitted into 2 for training dan testing","5ce78790":"# Evaluation of the basic model","eeecbaba":"# Evaluation metrics for developed model","ba2f7336":"# Build the basic model with Auto ARIMA","368d85d4":"# Predict the test data","ac5bc6dd":"# Identify Data Trends\n\nThe core proses of Time series analysis, we must check the data if there is a trends","22d5761a":"#  Development of the basic model based on the ACF and PACF\n\nFrom the result of auto_arima, we get MAPE 0,14%. Actually this result is quite good. But we try to build model based on the ACF and PACF. So we used model (7,2,1)","f5e7ea16":"# Diagnosing the developed model with kde\/q\u2013q plots","a7be9038":"# Forecasting with Autoregressive Integrated Moving Average (ARIMA)\n\nI refer to this [paper](https:\/\/doi.org\/10.1016\/j.asoc.2021.107161) ","53d7ceb3":"## Second Differencing","8ed7acaa":"From auto_arima, we get the best model is (1,2,1)","9aba7b2a":"## First Differencing","0c883e4e":"In this case, we used USA for example","c9ee7da1":"* Arima based on auto_arima **(1,2,1)** = **0,14%**\n* Arima based on the ACF & PACF Plot **(7,2,1)** = **0,1%**","089cf601":"# Select Data","311b5f2c":"# Forecasting time-series data based on the selected model\n\nBased on the best model ARIMA(7,2,1) we predict the testing data","172a77c0":"Blue Line : Training Data\nRed line  : Testing Data"}}