{"cell_type":{"51d29e05":"code","2996ace7":"code","7034647d":"code","3a882dc1":"code","68cecf13":"code","c3dc2141":"code","d02c9576":"code","666c2e41":"code","f31e7268":"code","a7145f27":"code","52c462f5":"code","ad29d85e":"code","42cac4d1":"code","237fb69a":"code","c6494dd6":"code","573a1d12":"code","a6729322":"code","b5d323b8":"code","bdcbc98f":"code","8f5cf76f":"code","d067ecb3":"code","2b0db5af":"code","6009f990":"code","565a4c14":"code","0b59ef2c":"code","b15f9bf8":"code","d69d26bd":"code","562209ca":"code","9703a61f":"code","b6f658e8":"code","698f3776":"markdown","5b6edc72":"markdown","329ae669":"markdown","d5861bb3":"markdown"},"source":{"51d29e05":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport time\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.nn.functional as F\nprint(os.listdir(\"..\/input\"))\nprint(torch.__version__)\n%matplotlib inline","2996ace7":"df_train = pd.read_csv(\"..\/input\/train.csv\")\ndf_train.head()","7034647d":"df_train.shape","3a882dc1":"df_train.info()","68cecf13":"#Use only a small subset of the Test set.\ndf_test = pd.read_csv(\"..\/input\/test.csv\", nrows=10000)\ndf_test.head()","c3dc2141":"df_test.shape","d02c9576":"sns.countplot(x='event', data=df_train)","666c2e41":"print(df_train['experiment'].unique())\nprint(df_test['experiment'].unique())","f31e7268":"dic = {'CA': 0, 'DA': 1, 'SS': 2, 'LOFT': 3}\ndf_train[\"experiment\"] = df_train[\"experiment\"].apply(lambda x: dic[x])\ndf_test[\"experiment\"] = df_test[\"experiment\"].apply(lambda x: dic[x])","a7145f27":"dic = {'A': 0, 'B': 1, 'C': 2, 'D': 3}\ndf_train[\"event\"] = df_train[\"event\"].apply(lambda x: dic[x])","52c462f5":"X = df_train.drop(columns=['event'], axis = 1)\nY = df_train['event']","ad29d85e":"X.shape","42cac4d1":"scaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)","237fb69a":"X_train, X_valid, y_train, y_valid = train_test_split(X_scaled, Y, test_size=0.2, random_state=42)","c6494dd6":"def to_categorical(y, num_classes):\n    \"\"\"1-hot encodes a tensor\"\"\"\n    return np.eye(num_classes, dtype='uint8')[y]","573a1d12":"y_train = to_categorical(y_train, 4)\ny_valid = to_categorical(y_valid, 4)","a6729322":"y_train.shape","b5d323b8":"featuresTrain = torch.from_numpy(X_train).float()\ntargetsTrain = torch.from_numpy(y_train).type(torch.LongTensor) # data type is long","bdcbc98f":"featuresValid = torch.from_numpy(X_valid).float()\ntargetsValid = torch.from_numpy(y_valid).type(torch.LongTensor) # data type is long","8f5cf76f":"X_test = df_test.drop(['id'], axis = 1)\nX_test.shape","d067ecb3":"X_test_scaled = scaler.transform(X_test)","2b0db5af":"featuresTest = torch.from_numpy(X_test_scaled).float()","6009f990":"batch_size = 512\nnum_epochs = 100\n# Pytorch train and test sets\ntrain = torch.utils.data.TensorDataset(featuresTrain,targetsTrain)\nvalid = torch.utils.data.TensorDataset(featuresValid,targetsValid)\n\ntrain_loader = DataLoader(train, batch_size = batch_size, shuffle = True)\nvalid_loader = DataLoader(valid, batch_size = batch_size, shuffle = True)","565a4c14":"class NeuralNetwork(nn.Module):\n    def __init__(self, n_features, n_neurons, dropouts):\n        super().__init__()\n        self.layer1 = nn.Linear(in_features=n_features, out_features=n_neurons[0])\n        self.dropout1 = nn.Dropout(dropouts[0])\n        self.layer2 = nn.Linear(in_features=n_neurons[0], out_features=n_neurons[1])\n        self.dropout2 = nn.Dropout(dropouts[1])\n        self.out_layer = nn.Linear(in_features=n_neurons[1], out_features=4)\n     \n    def forward(self, X):\n        out = F.relu(self.layer1(X))\n        out = self.dropout1(out)\n        out = F.relu(self.layer2(out))\n        out = self.dropout2(out)\n        out = self.out_layer(out)\n        return F.log_softmax(out, dim=1)\n        ","0b59ef2c":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nn_features = 27\nn_neurons = [100, 50]\ndropouts = [0.3, 0.2]\nmodel = NeuralNetwork(n_features, n_neurons, dropouts)\nmodel = model.to(device)\n# Cross Entropy Loss \nerror = nn.NLLLoss()\n# Adam Optimizer\nlearning_rate = 0.01\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)","b15f9bf8":"# train_losses = []\n# train_acc = []\n# valid_losses = []\n# valid_acc = []\nnum_epochs = 5\nfor e in range(num_epochs):\n    start_time = time.time()\n    # keep track of training and validation loss\n    train_loss = 0.0\n    valid_loss = 0.0\n    \n    model.train()\n    for i, (features, labels) in enumerate(train_loader):\n        #print(labels)\n        features, labels = features.to(device), labels.to(device)\n        optimizer.zero_grad()\n        outputs = model(features)\n        loss = error(outputs, torch.max(labels, 1)[1])\n        #loss = error(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        # update training loss\n        train_loss += loss.item()*features.size(0)\n        \n        #TODO: Calculate the accuracy on the train test\n        #acc = torch.eq(outputs.round(), labels).float().mean() # accuracy\n        #_, predicted = torch.max(outputs.data, 1)\n        #_, actual = torch.max(labels, 1)\n        #total = len(labels)\n        #correct = (predicted == actual).sum()\n        #train_accuracy = 100 * correct \/ total\n        #train_losses.append(train_loss.item())\n        #train_acc.append(train_accuracy.item())\n        \n    model.eval()\n    for i, (features, labels) in enumerate(valid_loader):\n        features, labels = features.to(device), labels.to(device)\n        optimizer.zero_grad()\n        outputs = model(features)\n        loss = error(outputs, torch.max(labels, 1)[1])\n        #loss = error(outputs, labels)\n        valid_loss += loss.item()*features.size(0)\n        \n        #_, predicted = torch.max(outputs.data, 1)\n        #_, actual = torch.max(labels, 1)\n        #total = len(labels)\n        #correct = (predicted == actual).sum()\n        #accuracy = 100 * correct \/ total\n        #valid_losses.append(loss.item())\n        #valid_acc.append(accuracy.item())\n    \n    \n    # calculate average losses\n    train_loss = train_loss\/len(train_loader.dataset)\n    valid_loss = valid_loss\/len(valid_loader.dataset)\n    elapsed_time = time.time() - start_time\n    # print training\/validation statistics \n    print('Epoch: {} \\tTraining Loss: {:.6f} \\tValidation Loss: {:.6f} \\tTime: {:.2f}'.format(\n        e+1, train_loss, valid_loss, elapsed_time))    \n    \n#     if e % 1 == 0:\n#         print(\"[{}\/{}], Train Loss: {} Train Acc: {}, Validation Loss : {}, Validation Acc: {} \".format(e+1,\n#         num_epochs, np.round(train_loss.item(), 3), np.round(train_accuracy.item(), 3), \n#         np.round(loss.item(), 3), np.round(accuracy.item(), 3)))","d69d26bd":"test = torch.utils.data.TensorDataset(featuresTest)\ntest_loader = DataLoader(test, batch_size = batch_size, shuffle = False)\ntest_preds = np.zeros((len(test), 4))\n\nfor i, (x_batch,) in enumerate(test_loader):\n    x_batch = x_batch.to(device)\n    y_pred = model(x_batch).detach()\n    test_preds[i * batch_size:(i+1) * batch_size, :] = y_pred.cpu().numpy()","562209ca":"test_preds.shape","9703a61f":"test_preds[100:110, :]","b6f658e8":"submission = pd.DataFrame({'id':df_test['id'],'A':test_preds[:, 0], 'B':test_preds[:, 1],\n                          'C':test_preds[:, 2], 'D':test_preds[:, 3]})\nsubmission.head()","698f3776":"### TODO\n* Calculate the accuracy of the model. As of now the code is commented out as I am not sure if I am doing it correctly","5b6edc72":"**I am used a small subset of test set (10000 rows) to generate the predictions as the number of rows in test set is huge and everytime I try to load the test set and do some operations, kernel runs out of memory.  **","329ae669":"This kernel aims to create a neural network using pytorch. I am new to pytorch and I am still learning the nitty gritties of pytorch so if you find any mistakes or any imporvements that can be done please let me know in the comments section and I will be more than happy to address it.","d5861bb3":"## Reducing Aviation Fatalities: A Neural Network approach using Pytorch"}}