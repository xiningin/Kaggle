{"cell_type":{"a6f5110d":"code","98f49658":"code","129150c6":"code","52556b0d":"code","0ce3b3d9":"code","b30d236d":"code","763d9b7e":"code","6e5a86de":"code","b2176d79":"code","130b64b6":"code","3d9ddda4":"code","81c95534":"code","ece583d6":"code","434b6f07":"code","fcf364e8":"code","93e5b80f":"code","887de9a9":"code","b6f9cce5":"code","978f6332":"code","afa78a7c":"code","f59ad193":"code","91728fa8":"code","967da958":"code","18062e4e":"code","cbee91ae":"code","9cd569db":"code","bde36d17":"code","18fe727d":"code","439d71e2":"code","7bd40d9f":"code","4b68509e":"code","3f4af3ca":"code","1e64840c":"code","933ed68c":"code","80300467":"markdown","a9010f4b":"markdown","262be67d":"markdown","f2ee038d":"markdown","996f8cb7":"markdown","811044ef":"markdown"},"source":{"a6f5110d":"import pandas as pd \nimport numpy as np\nimport missingno as msno\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import linalg\n%matplotlib inline\nimport pandas_profiling\nfrom sklearn.linear_model import LogisticRegression","98f49658":"train= pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest= pd.read_csv(\"..\/input\/titanic\/test.csv\")\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ndata = pd.concat([train, test], sort=False)\ndisplay(data.head(10))\ndata.info()\nprint(data.describe())","129150c6":"msno.bar(data)","52556b0d":"def missing_value(data):\n    missing_values = data.isnull().sum().sort_values()\n    missing_values_df = pd.DataFrame(missing_values, columns = ['cnt'])\n    missing_values_df = missing_values_df[missing_values_df.sum(axis = 1) > 0]\n    \n    return missing_values_df\n\nprint('train_data')\ndisplay(missing_value(data[:len(train)]))\nprint('-' * 20)\nprint('test_data')\ndisplay(missing_value(data[len(train):]))","0ce3b3d9":"Embarked_data = pd.DataFrame(data['Embarked'].value_counts(dropna=False))\nEmbarked_data","b30d236d":"data[data['Embarked'].isnull()]","763d9b7e":"class_1_df = data.query('Pclass == 1')\nclass_1_df","6e5a86de":"class_1_df.groupby(['Embarked', 'Sex'])['Fare'].mean()","b2176d79":"sns.boxplot(x=\"Embarked\", y=\"Fare\", data= class_1_df)","130b64b6":"data['Embarked'].fillna('S', inplace=True)","3d9ddda4":"data[data['Fare'].isnull()]","81c95534":"data.groupby(['Embarked', 'Sex', 'Pclass'])['Fare'].mean()","ece583d6":"data['Fare'].fillna(13.14, inplace=True)","434b6f07":"att_person = data[['Sex', 'Age', 'Survived']]\natt_person = att_person.dropna(subset = ['Survived'])\natt_person['Age_class'] = pd.cut(att_person['Age'], bins=np.arange(0, 100, 10), right=False)\natt_person","fcf364e8":"sns.catplot(x='Age_class', hue='Survived', col = 'Sex', kind = 'count', data=att_person, aspect = 1.5)","93e5b80f":"att_person.groupby(['Sex'])['Age'].mean()","887de9a9":"data['Age'] = data.groupby('Sex')['Age'].transform(lambda x: x.fillna(x.mean()))","b6f9cce5":"display(missing_value(data))\ndisplay(data.head(10))","978f6332":"data['Cabin_category'] = data['Cabin'].str[:1]\ndata['Cabin_category'].fillna('Unknown', inplace = True)","afa78a7c":"data","f59ad193":"g = data.groupby('Cabin_category')['Pclass'].value_counts(normalize=True).unstack()\ng.plot(kind='bar', stacked='True', figsize=(10,4) ).legend(bbox_to_anchor=(1, 0.5), title=\"Pclass\")","91728fa8":"data.groupby(['Pclass', 'Embarked', 'Cabin_category'])['Fare'].mean()","967da958":"# https:\/\/qiita.com\/qualitia_cdev\/items\/093ec0bba76f2a1ad2ab\ndef fill_deck(df):\n    temp = []\n    temp_deck = ''\n    for idx in range(len(df)):\n        temp_deck = df.iloc[idx]['Cabin_category']\n        if df.iloc[idx]['Cabin_category'] == 'Unknown':\n            if df['Pclass'].iloc[idx] == 1:\n                if df['Embarked'].iloc[idx] == 'S':\n                    if df['Fare'].iloc[idx] < 35.5:\n                        temp_deck = 'T'\n\n                    elif df['Fare'].iloc[idx] >= 35.50 and df['Fare'].iloc[idx] < 46.43:\n                        temp_deck = 'E'\n\n                    elif df['Fare'].iloc[idx] >= 46.43 and df['Fare'].iloc[idx] < 47.27:\n                        temp_deck = 'A'\n\n                    elif df['Fare'].iloc[idx] >= 47.27 and df['Fare'].iloc[idx] < 47.70:\n                        temp_deck = 'D'\n\n                    elif df['Fare'].iloc[idx] >= 47.70 and df['Fare'].iloc[idx] < 78.67:\n                        temp_deck = 'B'\n\n                    else:\n                        temp_deck = 'C'\n\n                elif df['Embarked'].iloc[idx] == 'C':\n                    if df['Fare'].iloc[idx] < 35.20:\n                        temp_deck = 'A'\n\n                    elif df['Fare'].iloc[idx] >= 35.20 and df['Fare'].iloc[idx] < 75.73:\n                        temp_deck = 'D'\n\n                    elif df['Fare'].iloc[idx] >= 75.73 and df['Fare'].iloc[idx] < 99.07:\n                        temp_deck = 'E'\n\n                    elif df['Fare'].iloc[idx] >= 99.07 and df['Fare'].iloc[idx] < 106.25:\n                        temp_deck = 'C'\n\n                    else:\n                        temp_deck = 'B'\n\n                elif df['Embarked'].iloc[idx] == 'Q':\n                    temp_deck = 'C'\n\n            elif df['Pclass'].iloc[idx] == 2:\n                if df['Embarked'].iloc[idx] == 'S':\n                    if df['Fare'].iloc[idx] < 11.33:\n                        temp_deck = 'E'\n\n                    elif df['Fare'].iloc[idx] >= 11.33 and df['Fare'].iloc[idx] < 13:\n                        temp_deck = 'D'\n\n                    else:\n                        temp_deck = 'F'\n\n                elif df['Embarked'].iloc[idx] == 'C':\n                    temp_deck = 'D'\n\n                elif df['Embarked'].iloc[idx] == 'Q':\n                    temp_deck = 'E'\n\n            elif df['Pclass'].iloc[idx] == 3:\n                if df['Embarked'].iloc[idx] == 'S':\n                    if df['Fare'].iloc[idx] < 7.60:\n                        temp_deck = 'F'\n\n                    elif df['Fare'].iloc[idx] >= 7.60 and df['Fare'].iloc[idx] < 11:\n                        temp_deck = 'E'\n\n                    else:\n                        temp_deck = 'G'\n\n                else:\n                    temp_deck = 'F'\n\n        temp.append(temp_deck)\n    df['Cabin_category'] = temp ","18062e4e":"fill_deck(data) ","cbee91ae":"display(data.head(10))","9cd569db":"data = pd.get_dummies(data, columns = ['Embarked'], prefix='Emb')\ndata = pd.get_dummies(data, columns = ['Cabin_category'], prefix='Cab')\ndata = pd.get_dummies(data, columns = ['Sex'], prefix='gen')","bde36d17":"data","18fe727d":"delete_columns = ['Name', 'PassengerId', 'SibSp', 'Parch', 'Ticket', 'Cabin']\ndata.drop(delete_columns, axis=1, inplace=True)","439d71e2":"data","7bd40d9f":"train = data[:len(train)]\ntest = data[len(train):]","4b68509e":"y_train = train['Survived']\nX_train = train.drop('Survived', axis = 1)\nX_test = test.drop('Survived', axis = 1)","3f4af3ca":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=100, max_depth=2, random_state=0)","1e64840c":"clf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)","933ed68c":"sub = gender_submission\nsub['Survived'] = list(map(int, y_pred))\nsub.to_csv(\"submission.csv\", index=False)","80300467":"# Age","a9010f4b":"# Cabin","262be67d":"# Embarked","f2ee038d":"# Fare","996f8cb7":"# Gender","811044ef":"# One Hot Encoding"}}