{"cell_type":{"f0c5fd09":"code","3e170e47":"code","4e92ad2a":"code","b72ca73a":"code","061d7f49":"code","409360e8":"code","ec6227cb":"code","ff9ad827":"code","8f0cc17b":"code","1ffda212":"code","e3b9045d":"code","d3e43d57":"code","27855223":"code","31d3fd0b":"code","8be539ba":"code","efb25388":"code","2c3a2f01":"code","acee64da":"code","b8dec7cd":"code","b0e3e20c":"code","d0404efa":"markdown","e036b967":"markdown","48eae11a":"markdown","f5a4ab8a":"markdown","cee96cd4":"markdown","490e7fa0":"markdown","623972c1":"markdown","2ae13392":"markdown","370cb9e5":"markdown","a8e63a96":"markdown"},"source":{"f0c5fd09":"import pandas as pd # import pandas Library\nimport numpy as np","3e170e47":"print(pd.Series([1,2,3]))\nser = pd.Series([1,2,3] , index = ['first', 'second','third']) #Index acts as reference \nprint(se)","4e92ad2a":"ser['first'] #Using index to access Data elements","b72ca73a":"se[0] #Using postion to access data elements","061d7f49":"# Python Dictionary\np_dict = {'name' : ['Sachin','Sourav','Rahul'], \n         'country' : ['Ind','Ind','Ind'],\n         'Runs': ['10000','10500','10100']}\nprint(p_dict)","409360e8":"#Dataframe - This will convert the dictionary to DataFrame\ndf = pd.DataFrame(p_dict) \nprint(df.head())  #by default shows the first five rows\nprint('\\n')\nprint(df.head(2))","ec6227cb":"df.tail(2) #last two rows","ff9ad827":"#Selecting a specific column\n#Below are the two ways which produces the same result\n\nprint(df.Runs)\nprint(df['Runs'])","8f0cc17b":"print(df.iloc[0]) #First row of the dataframe\nprint('\\n')\nprint(df.iloc[-1]) #Only the last row\nprint('\\n')\nprint(df.iloc[ :,1]) #all the rows and first column","1ffda212":"print(df.iloc[ :,0:2]) #All rows and 1st to 2nd column , : -> this will retrieve all rows\/columns","e3b9045d":"df = pd.read_csv('train.csv') # read_csv is the function to read csv file","d3e43d57":"df.shape # To check the count of rows and columns","27855223":"df.columns #to check the column names","31d3fd0b":"df.dtypes # to see datatypes of the columns","8be539ba":"df[\"Survived\"].value_counts() # to check unique values present in a column","efb25388":"# No. of females who survived?\ndf[(df.Sex =='female') & (df.Survived ==1)].shape[0] #() are mandatory for multiple conditions,()head -first 5 rows","2c3a2f01":"# % of Male survivors\n(len(df[(df.Sex =='male') & (df.Survived ==1)])\/len(df))*100","acee64da":"# % of Female survivors\n(len(df[(df.Sex =='female') & (df.Survived ==1)])\/len(df))*100","b8dec7cd":"# To check if there is any duplicate PassengerID\nsum(df.PassengerId.duplicated())","b0e3e20c":"#Average Age of passengers grouped by Gender and Survival Status\ndf.groupby(by = ['Sex','Survived']).mean().Age","d0404efa":"#### Slice & Dice in Dataframe","e036b967":"Please note a selection e.g.[1:6], will run from the first number to one minus the second number. e.g. [1:6] will go 1,2,3,4,5. (excludes the last number)","48eae11a":"Here we can see that Index is by default created.","f5a4ab8a":"Boolean Indexing\n- or -> condition 1 | condition 2\n- and -> condition 1 & condition 2\n- Not -> ~ (not condition)\n- equal -> == (equal criteria)","cee96cd4":"Few Common Dataframe Operations, we will perform on famous <b> Kaggle Titanic dataframe <\/b> - https:\/\/www.kaggle.com\/c\/titanic\/overview","490e7fa0":"# 1.3 - Pandas ","623972c1":"#### Series ","2ae13392":"iloc is used for integer-location based indexing \/ selection by position.Here we select rows and columns by number.\n\ndf.iloc[row_selecton , column_selection]","370cb9e5":"Pandas is built on Numpy. It has two types of easy to use and fast data structures , which helps to do Data Analysis with ease.\n\nData Structures:\n\n- Series : One Dimensional array.\n- Dataframe : Two dimenionsal data structure with Row , Columns of different types.","a8e63a96":"#### DataFrame "}}