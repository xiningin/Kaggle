{"cell_type":{"afffb336":"code","6fe1ef31":"code","1fc85366":"code","62b96885":"code","5315c102":"code","6c598cfc":"code","53b495a9":"code","587e83ef":"code","84dbedfd":"code","2fbc3614":"code","2f19c124":"code","ecb1b887":"code","a5275aef":"code","29378da0":"code","028fa49b":"code","fa0c042f":"code","51ea604c":"code","df9a0c3e":"code","755be679":"code","43eb9ccc":"code","e95f717b":"code","96d430a1":"code","e04beca1":"code","a6a04974":"code","cf1701eb":"code","8989e0c3":"code","9db03147":"code","123d698a":"code","d19e4c4c":"code","63ef26f5":"code","2a284b0d":"code","86fae06a":"code","4621c60c":"code","cb404b49":"code","92138134":"code","81deca9d":"code","9a5233b8":"code","e3226fcd":"code","02286935":"code","7ddcab42":"code","86760cea":"code","4c7cc92f":"code","12e25007":"code","3244fb28":"code","b54419a7":"code","09b78bd8":"code","e1b9d06c":"markdown","a474fdb9":"markdown","0a485740":"markdown","2a345b6b":"markdown","7b1a711c":"markdown","31e7bd4a":"markdown","e46f5d94":"markdown","2fd39a2b":"markdown","b20edf95":"markdown","663060bd":"markdown","9e57d93c":"markdown","6484b02c":"markdown","e61a6400":"markdown","048c85ed":"markdown","f6791aed":"markdown","3a231f23":"markdown","66d529a2":"markdown","5e9ed734":"markdown","2d26e04a":"markdown","320fa41f":"markdown","254362c1":"markdown","e74de43b":"markdown","e178b196":"markdown","b0b110cb":"markdown","b04a022d":"markdown","b0ddd36a":"markdown","652596a3":"markdown","180c2f27":"markdown","b42c8a42":"markdown","8d309670":"markdown","d3788944":"markdown","d9e9be39":"markdown","f3cd867f":"markdown","7e313cc3":"markdown","1aa07d18":"markdown","47319c78":"markdown","bd30edaa":"markdown","8e828fb0":"markdown","35a7a5b2":"markdown","b1416873":"markdown","9bbd61cb":"markdown","140db5ea":"markdown","64112b64":"markdown","1137be74":"markdown","de421713":"markdown"},"source":{"afffb336":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno\n\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import GradientBoostingRegressor,RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor\n\nimport cufflinks as cf\nimport plotly.offline\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\nimport plotly \nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly.offline import iplot\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\nfrom plotly import tools\n\n\n%matplotlib inline \n\n","6fe1ef31":"# Different Car's dataset\naudi = pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/audi.csv\")\nbmw = pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/bmw.csv\")\nford = pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/ford.csv\")\nhyundi = pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/hyundi.csv\")\nmerc = pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/merc.csv\")\nskoda = pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/skoda.csv\")\ntoyota = pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/toyota.csv\")\nvauxhall = pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/vauxhall.csv\")\nvw = pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/vw.csv\")","1fc85366":"audi['brand'] = 'audi'\nbmw['brand'] = 'bmw'\nford['brand'] = 'ford'\nhyundi['brand'] = 'hyundi'\nmerc['brand'] = 'merc'\nskoda['brand'] = 'skoda'\ntoyota['brand'] = 'toyota'\nvauxhall['brand'] = 'vauxhall'\nvw['brand'] = 'vw'","62b96885":"df = pd.concat([audi,bmw,\n               ford,hyundi,merc,skoda,toyota,\n               vauxhall,vw])\ndf.head()","5315c102":"df.tail()","6c598cfc":"# drop tax column\ndf.drop('tax(\u00a3)',axis=1,inplace=True)\n","53b495a9":"df","587e83ef":"# shuffle the dataset\ndf = df.sample(frac=1)\ndf","84dbedfd":"# info\ndf.info()","2fbc3614":"#check for dublicated rows\nprint(\"Numbers of duplicated rows :\",df.duplicated().sum())","2f19c124":"#dropping the duplicated rows \ndf=df.drop_duplicates(keep=\"first\")\nprint(\"After removing,now number of duplicated rows are:\",df.duplicated().sum())","ecb1b887":"# Check any null values\nmissingno.matrix(df)","a5275aef":"df['tax'].fillna(df['tax'].mean(),inplace=True)\n","29378da0":"missingno.matrix(df)","028fa49b":"# describe\ndf.describe().T.style.bar(subset=['mean'], color='#205ff2').background_gradient(\nsubset=['std'],cmap='mako').background_gradient(subset=['50%'],cmap='coolwarm')","fa0c042f":"df_1 =df.copy()\ndf_1","51ea604c":"def preprocess_data(df):\n    \n    \"\"\"\n    Performs transformation on df and returns transformed df.\n    \n    \"\"\"\n    for label,content in df.items():\n   \n        #Filled categoricnaL missing data and turned categories into numbers \n        if not pd.api.types.is_numeric_dtype(content):\n         # We add +1 to the category code because pandas encodes missing categories as -1\n           df[label] = pd.Categorical(content).codes+1\n    \n    return df","df9a0c3e":"df_transformed = preprocess_data(df_1)\ndf_transformed.head()","755be679":"# Check the correlation between target and each of columns\ndf.corr()['price']","43eb9ccc":"plt.figure(figsize=(20,10))\n\n# plot heatmap\nsns.heatmap(df_transformed.corr(), annot=True,cmap='coolwarm', linecolor='black')","e95f717b":"plot_columns=[ 'transmission','fuelType','brand']\ncolors = [\"#00FFFF\",\"#FFA500\",\"#ADD8E6\",\"#ED00D9\",\"#ED1400\",\"#EAE7C6\",\"#CF6523\",\"#99ACD2\",\"#4EBA73\",\"#DDA8D7\"]\ntextprops = {\"fontsize\":22}\ni=1\nplt.figure(figsize=(45,95))\nfor col in plot_columns:\n    plt.subplot(11,2,i)\n    sns.countplot(data=df,x=col,palette='gist_rainbow',order=df[col].value_counts().index)\n    plt.xticks(fontsize=25)\n    plt.yticks(fontsize=25)\n    plt.xlabel(col,fontsize=25)\n    plt.ylabel('count',fontsize=25)\n    i=i+1\n    plt.subplot(11,2,i)\n    df[col].value_counts().plot(kind='pie',autopct='%.2f%%',\n                               colors=colors,textprops=textprops,shadow=True,radius=1.1)\n    plt.xticks(fontsize=25)\n    plt.yticks(fontsize=25)\n    plt.xlabel(col,fontsize=25)\n    plt.ylabel('count',fontsize=25)\n    i=i+1\n    \nplt.show()","96d430a1":"# model\nplt.figure(figsize=(25,5))\nsns.countplot(x='model',data=df[:5000])\nplt.title(\"Model\",fontsize=15)\nplt.xticks(rotation=90)\nplt.show();\n\nplt.figure(figsize=(25,5))\nsns.countplot(x='model',data=df[5000:9000])\nplt.xticks(rotation=90)\nplt.show();\n","e04beca1":"# Plot scatterplot between price and  year\nplt.figure(figsize=(25,5))\nsns.scatterplot(x='model',y='year',data=df[:1000],hue='fuelType',s=150)\nplt.title(\"Model Vs Year\")\nplt.xlabel(\"Model\",fontsize=15)\nplt.ylabel(\"Year\",fontsize=15)\nplt.xticks(rotation=90,fontsize=12,fontstyle='oblique')\nplt.show();","a6a04974":"# Plot scatterplot between price and  year\nplt.figure(figsize=(25,5))\nsns.scatterplot(x='model',y='year',data=df[:1000],hue='transmission',s=150,palette=['yellow','lightgreen','black'],legend='full')\nplt.title(\"Model Vs Year\")\nplt.xlabel(\"Model\",fontsize=15)\nplt.ylabel(\"Year\",fontsize=15)\nplt.xticks(rotation=90,fontsize=12,fontstyle='oblique')\nplt.show();","cf1701eb":"# Plot scatterplot between price and  year\nplt.figure(figsize=(25,5))\nsns.scatterplot(x='model',y='price',data=df[:1000],hue='fuelType',s=100,palette=['green','brown','dodgerblue','red'],legend='full')\nplt.title(\"Model Vs price\")\nplt.xlabel(\"Model\",fontsize=15)\nplt.ylabel(\"Price\",fontsize=15)\nplt.xticks(rotation=90,fontsize=12,fontstyle='oblique')\nplt.show();","8989e0c3":"# Plot scatterplot between price and  year\nplt.figure(figsize=(25,5))\nsns.scatterplot(x='model',y='price',data=df[:1000],hue='transmission',s=100,palette=['blue','maroon','grey'],legend='full')\nplt.title(\"Model Vs price\")\nplt.ylabel(\"Price\",fontsize=15)\nplt.xlabel(\"Model\",fontsize=15)\nplt.xticks(rotation=90,fontsize=12,fontstyle='oblique')\nplt.show();","9db03147":"plt.figure(figsize=(10,5))\nsns.pointplot(x='transmission',y='year',data=df,hue='fuelType')\nplt.title(\"Tranmssion With Mileage\")\nplt.xlabel('Transmission',fontsize=15)\nplt.ylabel('Mileage',fontsize=15)\nplt.legend(bbox_to_anchor=(1.2,1.0),title='FuelType')\nplt.grid(True)\nplt.show();","123d698a":"plt.figure(figsize=(10,5))\nsns.pointplot(x='brand',y='year',data=df,hue='fuelType')\nplt.title(\"Brand WithYear\")\nplt.xlabel('Brand',fontsize=15)\nplt.ylabel('Year',fontsize=15)\nplt.legend(bbox_to_anchor=(1.2,1.0),title='FuelType')\nplt.grid(True)\nplt.show();","d19e4c4c":"plt.figure(figsize=(10,5))\nsns.stripplot(x='brand',y='price',data=df,hue='transmission')\nplt.title(\"Brand With Price\")\nplt.xlabel('Brand',fontsize=15)\nplt.ylabel('Price',fontsize=15)\nplt.legend(bbox_to_anchor=(1.2,1.0),title='Transmission')\nplt.show();","63ef26f5":"plt.figure(figsize=(10,5))\nsns.stripplot(x='brand',y='year',data=df,hue='fuelType')\nplt.title(\"Brand with Year\")\nplt.xlabel('Brand',fontsize=15)\nplt.ylabel('Year',fontsize=15)\nplt.legend(bbox_to_anchor=(1.2,1.0),title='FuelType')\nplt.show();","2a284b0d":"sns.set_theme(style=\"darkgrid\")\nplt.figure(figsize=(10,5))\nsns.barplot(x='brand',y='mileage',data=df,hue='fuelType')\nplt.xlabel('Brand',fontsize=15)\nplt.ylabel('Mileage',fontsize=15)\nplt.legend(bbox_to_anchor=(1.2,1.0),title='FuelType')\nplt.grid(True)\nplt.show();","86fae06a":"sns.set_theme(style=\"darkgrid\")\nplt.figure(figsize=(10,5))\nsns.barplot(x='brand',y='mileage',data=df,hue='transmission')\nplt.xlabel('Brand',fontsize=15)\nplt.ylabel('Mileage',fontsize=15)\nplt.legend(bbox_to_anchor=(1.2,1.0),title='Transmission')\nplt.grid(True)\nplt.show();","4621c60c":"sns.set_theme(style=\"darkgrid\")\nplt.figure(figsize=(10,5))\nsns.barplot(x='brand',y='tax',data=df,hue='transmission',palette='tab20')\nplt.xlabel('Brand',fontsize=15)\nplt.ylabel('Tax',fontsize=15)\nplt.legend(bbox_to_anchor=(1.2,1.0),title='Transmission')\nplt.grid(True)\nplt.show();","cb404b49":"sns.set_theme(style=\"darkgrid\")\nplt.figure(figsize=(10,5))\nsns.barplot(x='brand',y='tax',data=df,hue='fuelType',palette='tab10')\nplt.xlabel('Brand',fontsize=15)\nplt.ylabel('Tax',fontsize=15)\nplt.legend(bbox_to_anchor=(1.2,1.0),title='FuelType')\nplt.grid(True)\nplt.show();","92138134":"plt.figure(figsize=(15,5))\nsns.relplot(x='price',y='year',data=df,hue='fuelType',palette=['green','lightblue','yellow','red','black'])\nplt.xlabel(\"Price\")\nplt.ylabel(\"Year\")\nplt.xticks(rotation=90)\nplt.grid(True)\nplt.show();","81deca9d":"X = df_transformed.drop('price',axis=1)\ny = df_transformed['price']\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)\n\nlen(X_train),len(X_test),len(y_train),len(y_test)","9a5233b8":"# Create model and train\ndef models_score(models,X_train,X_test,y_train,y_test):\n    scores = {}\n    \n    for name, model in models.items():\n        model.fit(X_train,y_train)\n        y_pred = model.predict(X_test)\n        scores[name] = r2_score(y_test,y_pred)\n        \n        # printing the model name and accuracy\n        print(\"Model name: \",model)\n        print(\"R2 score : \",r2_score(y_test,y_pred))\n        print(\"Mean Absolute Error : \",mean_absolute_error(y_test,y_pred))\n        print(\"Mean Squared Error : \",mean_squared_error(y_test,y_pred))\n\n        print(\"\\n<<<<------------------------------------------------------------->>>>\\n\")\n        \n    model_scores = pd.DataFrame(scores, index=['R2 Score']).T\n    model_scores = model_scores.sort_values('R2 Score',ascending=False)\n    return model_scores\n        ","e3226fcd":"# Initialize the models\nnp.random.seed(42)\nmodels = {\"LinearRegression\":LinearRegression(),\n          \"GradiantBoost\":GradientBoostingRegressor(),\n         \"RandomForest\":RandomForestRegressor(),\n         \"XgBoost\": XGBRegressor(verbose=0),\n         \"DecisionTreeRegressor\":DecisionTreeRegressor(),\n         \"CatBoost\":CatBoostRegressor(verbose=0),\n         \"LightGBM\":LGBMRegressor()}","02286935":"model_scores = models_score(models,X_train,X_test,y_train,y_test)\nmodel_scores","7ddcab42":"model_scores = model_scores.reset_index().rename({\"index\":\"Models\"},axis=1)\nmodel_scores.style.bar()","86760cea":"fig = px.bar(data_frame = model_scores,\n             x=\"Models\",\n             y=\"R2 Score\",\n             color=\"Models\", title = \"<b>Models Score<\/b>\", template = 'plotly_dark')\n\nfig.update_layout(bargap=0.2)\n\nfig.show()","4c7cc92f":"label = model_scores['Models']\nvalue = model_scores['R2 Score']\n\n\nfig = go.Figure(data=[go.Pie(labels = label, values = value, rotation = 90)])\n\nfig.update_traces(textposition='inside',\n                  textinfo='percent+label',\n                  marker=dict(line=dict(color='#000000', width = 1.5)))\n\nfig.update_layout(title_x=0.5,\n                  title_font=dict(size=20),\n                  uniformtext_minsize=15,template='plotly_dark')\n\n\nfig.show()","12e25007":"\nmodel = CatBoostRegressor(verbose=0)\nmodel.fit(X_train,y_train)\n","3244fb28":"features = [70,2006,4,16356,1,305.0,58.0,4.4,1]\ny_pred = model.predict(features)\nprint(f\"Price in euros : {y_pred}\")","b54419a7":"# Print the name and gini importance of each features \nfor feature in zip(df.columns,model.feature_importances_):\n    print(feature)","09b78bd8":"# # visualize feature importance\nfeature_dict = dict(zip(df.columns,list(model.feature_importances_)))\nfeature_df = pd.DataFrame(feature_dict,index=[0])\nfeature_df.T.plot.bar(title=\"Feature Importance\",legend=False);","e1b9d06c":"<a id=\"1\"><\/a>\n## 1. Import Libaries\n    ","a474fdb9":"**This plot shows relation between `model` and `year` with `fuelType`**.\n**Here we can see that most of the models from year 2006-2020 having `Diesel` and `Petrol` fueltype.**","0a485740":"<a id=\"3\"><\/a>\n## Meta Information about DataFrame","2a345b6b":"**Most of the brands with `semi-auto` transmission having more price across all brands,`bmw` and `mercedes` have more `semi-auto` transmission.The demand for `automatic` transmission is seen in `toyota` brand.The `Manual` transmission is common in all brands, but `mercedes`, `toyota` and `bmw` has less `Manual` transmission. `**","7b1a711c":"<a id=\"2\"><\/a>\n## Load Data","31e7bd4a":"### Predicting on unseen data with our best performing model","e46f5d94":"<a id=\"11\"><\/a>\n## Modelling","2fd39a2b":"**Now they are no null values**","b20edf95":"<a id=\"6\"><\/a>\n## Statistical Information about DataFrame","663060bd":"<a id=\"13\"><\/a>\n## Feature Importance","9e57d93c":"**We are having different datasets for different brands.So, importing all of them.**","6484b02c":"**Only `tax` column contains `null` values when compared with other columns**","e61a6400":"<a id=\"8\"><\/a>\n## Correlation","048c85ed":"<a id=\"5\"><\/a>\n## Handling Missing Values","f6791aed":"**This is a `pairplot` showing relationship between `transmission` and `year`. Clearly, we observe that `Electric` fuelType is mostly used in `Automatic` transmission.The `Diesel` fuelType is in popular and in demand in all transmission till 2017. Then after that the demand for `petrol` has is risen up when compared with `diesel`.**","3a231f23":"**Brand with `Automatic` transmission pays more `tax` and `Manual` transmission has low paying `tax` capability.**","66d529a2":"<a id=\"9\"><\/a>\n## EDA & Visualization","5e9ed734":"**1) First Figure has value counts for `transmission` columns with `Manual`,`Semi-Auto`,`Automatic`,`other`. Here `Manual` transmission has more value counts when compared with other transmission.**\n\n**2) Second Figure has value counts for `fuelType` columns with `Petrol`,`Diesel`,`Hybrid`,`other`,`Electric`. Here `Petrol` fuelType has more value counts when compared with other fuelType.**\n\n**3) Third Figure has value counts for `brand` columns with all different brands. Here `ford` brand has more value counts when compared with other brands**","2d26e04a":"**Droping the `tax(\u00a3)` column. Because we have already `tax` columns without any *null values***","320fa41f":"<a id=\"10\"><\/a>\n## Split Dataset into Training and Testing","254362c1":"<a id=\"7\"><\/a>\n## Categorical Features Into Numerical Features","e74de43b":"\n    \n### **100,000 UK Used Car Dataset**\n**100,000 scraped used car listings, cleaned and split into car make.**\n    \n### Problem Statement\nPredict the prices of the used cars using dataset.\n    \n### Content\nThe cleaned data set contains information of price, transmission, mileage, fuel type, road tax, miles per gallon (mpg), and engine size.   \n    \n","e178b196":"**The new dataframe with `brand` columns is lined one after one like `audi->bmw->......->vw`. But to pass this dataframe to our model for training it is not a good practise. So, to avoid that we are shuffle 10% of dataframe**","b0b110cb":"**Dataframe with all datasets concated**","b04a022d":"**All datasets does not contain separate column for brand. So, we are creating a columns for brands**","b0ddd36a":"## End\ud83d\udd1a","652596a3":"**This plot shows relation between `model` and `year` with `transmission`**.\n**Here we can see that most of the models from year 2006-2020 having `Manual` transmission.**","180c2f27":"**Turning Categorical values into Numerical values**","b42c8a42":"<div class=\"alert alert-block alert-success\">\n    <h1 align=\"center\">\ud83d\ude97CAR PRICE PREDICTION<\/h1>\n\n<\/div>","8d309670":"**The `Electric` fueltype is only used by `bmw` and `vauxhall`.The `Hybrid` fueltype is fluctuating across all brands. `Hybrid` fueltype is mostly used by `skoda` in 2020. The `petrol` and `diesel` fueltypes are commonly in all brands.**","d3788944":"## TABLE OF CONTENT","d9e9be39":"<a id=\"12\"><\/a>\n## Evaluation Metric","f3cd867f":"**The most of the brands with different fueltypes are seen in year between 2000-2020. All brands having `Diesel` and `Petrol` fueltype.**","7e313cc3":"**Most of the `models` having high price with `Diesel` fuelType and the second highest is `Petrol`**","1aa07d18":"**When it comes to `mileage` the brand which has `Hybrid` has more in demand except `hyundi`, `skoda`. The second and third best fueltype for mileage are `Diesel` and `Petrol` respectively, it is popular and mostly used in all brands.**","47319c78":"**Value counts for `model` columns upto 9000 records**","bd30edaa":"**The `Manual` and `Automatic` transmission are common and mostly used in all brands with respect to `mileage`.**","8e828fb0":"**Most of the `models` having high price with `Manual` transmission and the second highest is `Automatic`**","35a7a5b2":" **model = 70, \n year = 2006,\n transmission.automatic = 4,\n fuelType.petrol = 1,\n tax = 305.0,\n mpg = 58.0,\n enginesize = 4.4,\n brand.bmw = 1**","b1416873":"### Data Description\n\n* **Model:** Model type.\n* **Year:** Registration Year.\n* **Price:** Price in euros.\n* **Transmission:** Type of Gearbos.\n* **Mileage:** Distance Used.\n* **FuelType:** Engine Fuel.\n* **Tax:** Road Tax.\n* **mpg:** Miles per Gallon.\n* **EngineSize:** Size in litres.\n* **Brand:** Name of the car brand.","9bbd61cb":"* [1.Importing Libraries](#1)\n\n* [2.Load the data](#2)\n    \n* [3.Meta information of dataframe](#3)\n    \n* [4.Duplicated rows.](#4)\n\n* [5.Handling Missing Values.](#5)\n    \n* [6.Statistical information of Dataframe](#6) \n\n* [7.Categorical Features Into Numerical](#7)\n\n* [8.Correlation](#8)\n\n* [9.EDA & Visualization](#9)\n\n* [10.Split training and testing](#10)\n\n* [11.Modelling](#11)\n\n* [12.Evaluation Metric](#12)\n\n* [13.Feature Importance](#13)","140db5ea":"<a id=\"4\"><\/a>\n## Duplicated Rows","64112b64":"**Brand With `Petrol` fueltype pays more tax and the second most payed tax is by `Diesel` fueltype.**","1137be74":"**The columns `year`,`transmission`,`tax`,`engineSize` are having more *correlation* with *price***","de421713":"**Concat all the different brands dataset into a single dataframe.**"}}