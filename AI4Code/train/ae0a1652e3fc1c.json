{"cell_type":{"a7d82f85":"code","a4c342af":"code","8fbfa915":"code","0a54f9b1":"code","9ab9f004":"code","1aaba051":"code","21c6cbe7":"code","17d5cbe2":"code","59adacd0":"code","e948368c":"code","9c661935":"code","c4251337":"code","5d6a5288":"code","3f5b43ce":"code","6f03ef29":"code","3840d4b7":"code","e733a1ae":"code","4593f3b9":"code","433d9cbd":"code","ba0cd466":"code","9350a18f":"code","53499881":"code","e06a0c4e":"code","b526168d":"code","cd6446de":"code","d4e97d91":"code","a6212535":"code","f800bdc0":"code","bea79c23":"code","d82fa70b":"code","e871b65b":"code","af2eafc8":"code","cba057fa":"code","88f728fa":"code","5df55cf2":"code","874be640":"code","119f8cf5":"code","c9c801f3":"code","970e65da":"code","89eee66c":"code","e3dc7a9f":"code","d5415a33":"markdown","4658879a":"markdown","6c303bf3":"markdown","b5c18c20":"markdown","502c72b0":"markdown","ea18e14a":"markdown","123292ac":"markdown","ab15aeba":"markdown","9ee776fd":"markdown","3114c9f1":"markdown"},"source":{"a7d82f85":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport warnings\nwarnings.simplefilter(\"ignore\")","a4c342af":"df = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")\ndf.head()","8fbfa915":"# Shape of the data\ndf.shape","0a54f9b1":"df.info()","9ab9f004":"df.describe()","1aaba051":"# Looking for the missing values in the dataset if any\ndf.isna().sum()","21c6cbe7":"# Dropping missing values from the dataset\ndf = df.dropna()","17d5cbe2":"df.isna().sum()","59adacd0":"df.drop(\"id\", axis=1,inplace=True)","e948368c":"labels = [\"Did not get a Stroke\", \"Got a Stroke\"]\nvalues = df['stroke'].value_counts().tolist()\n\npx.pie(df, values=values, names=labels, title=\"Stroke Distribution Pie Chart\", \n       color_discrete_sequence=[\"seagreen\", \"firebrick\"])","9c661935":"labels = df['gender'].value_counts().index.tolist()[:2]\nvalues = df['gender'].value_counts().tolist()[:2]\n\npx.pie(df, values=values, names=labels, title=\"Gender Distribution Pie Chart\", \n       color_discrete_sequence=[\"pink\", \"skyblue\"])","c4251337":"plt.style.use(\"seaborn-darkgrid\")\nfig, ax =plt.subplots(2,1, figsize=(20,15)) \n\nsns.histplot(x=df[\"age\"], kde=True, color=\"darkgreen\", bins=30, ax=ax[0])\nax[0].set_xlabel(\"age\",fontsize=15)\n\nsns.kdeplot(x=df[\"age\"], hue= df[\"stroke\"], fill=True, common_norm=False, alpha=0.5, palette=\"magma\",linewidth=0, ax=ax[1])\nax[1].set_xlabel(\"age\",fontsize=15);","5d6a5288":"labels = [\"Non-Heart Disease Patient\", \"Heart Disease Patient\"]\nvalues = df['heart_disease'].value_counts()\n\npx.pie(df, values=values, names=labels, title=\"Heart Patient Distribution Pie Chart\", \n       color_discrete_sequence=[\"crimson\", \"firebrick\"])","3f5b43ce":"labels = [\"Hypertension Not Present\", \"Hypertension Present\"]\nvalues = df['hypertension'].value_counts()\n\npx.pie(df, values=values, names=labels, title=\"Hypertension Distribution Pie Chart\")","6f03ef29":"labels = [\"Married\", \"Not Married\"]\nvalues = df['ever_married'].value_counts()\n\npx.pie(df, values=values, names=labels, title=\"Marital Status Distribution Pie Chart\", \n       color_discrete_sequence=[\"darkorchid\", \"orchid\"])","3840d4b7":"labels = [\"Private Job\", \"Self-employed\", \"Have Children\", \"Goverment Job\", \"Never Worked Before\"]\nvalues = df['work_type'].value_counts().tolist()\npx.pie(df, values=values, names=labels, title=\"Work Type Distribution Pie Chart\")","e733a1ae":"labels = [\"Never Smoked Before\", \"Unknown\", \"Ex-Smoker\", \"Currently Smokes\"]\nvalues = df['smoking_status'].value_counts().tolist()\npx.pie(df, values=values, names=labels, title=\"Smoker Type Distribution Pie Chart\")","4593f3b9":"labels = [\"Urban\", \"Rural\"]\nvalues = df['Residence_type'].value_counts().tolist()\n\npx.pie(df, values=values, names=labels, title=\"Residence Type Distribution Pie Chart\", \n       color_discrete_sequence=[\"slategray\", \"yellowgreen\"])","433d9cbd":"plt.style.use(\"seaborn-darkgrid\")\nfig, ax =plt.subplots(2,1, figsize=(20,15)) \n\nsns.histplot(x=df[\"avg_glucose_level\"], kde=True, bins=30, color=\"darkorange\", ax=ax[0])\nax[0].set_xlabel(\"avg_glucose_level\",fontsize=15)\n\nsns.kdeplot(x=df[\"avg_glucose_level\"], hue= df[\"stroke\"], fill=True, common_norm=False, palette=\"Spectral\",alpha=0.5, linewidth=0, ax=ax[1])\nax[1].set_xlabel(\"avg_glucose_level\",fontsize=15);","ba0cd466":"plt.style.use(\"seaborn\")\nfig, ax =plt.subplots(2,1, figsize=(20,15)) \n\nsns.histplot(x=df[\"bmi\"], kde=True, color=\"darkorchid\", ax=ax[0], bins=30)\nax[0].set_xlabel(\"bmi\",fontsize=15)\n\nsns.kdeplot(x=df[\"avg_glucose_level\"], hue= df[\"stroke\"], fill=True, common_norm=False, palette=\"magma\",alpha=0.5, linewidth=0, ax=ax[1])\nax[1].set_xlabel(\"bmi\",fontsize=15);","9350a18f":"plt.style.use(\"seaborn\")\nfig, ax =plt.subplots(2,1, figsize=(20,15)) \n\nsns.scatterplot(x = df['bmi'], y = df['age'], ax=ax[0], color=\"darkorchid\");\nax[0].set_xlabel(\"bmi\",fontsize=15);\n\nsns.scatterplot(x = df['avg_glucose_level'], y = df['age'], ax=ax[1], color=\"darkorange\");\nax[1].set_xlabel(\"avg_glucose_level\",fontsize=15);","53499881":"plt.style.use(\"seaborn\")\nfig, ax =plt.subplots(2,1, figsize=(20,15)) \n\nsns.scatterplot(x = df['bmi'], y = df['avg_glucose_level'], ax=ax[0], color=\"deepskyblue\");\nax[0].set_xlabel(\"bmi\",fontsize=15);\n\nsns.scatterplot(x = df['age'], y = df['avg_glucose_level'], ax=ax[1], color=\"darkorange\");\nax[1].set_xlabel(\"age\",fontsize=15);","e06a0c4e":"sns.pairplot(df, hue='stroke', palette=\"viridis\");","b526168d":"fig, ax = plt.subplots(figsize=(8,6))\nsns.heatmap(df.corr(), annot=True, fmt='.1g', cmap=\"viridis\", cbar=False);","cd6446de":"# Creating dummy variables for the non-numeric data\n\ngender_dum = pd.get_dummies(df['gender'])\nresidence_type_dum = pd.get_dummies(df['Residence_type'])\nsmoking_status_dum = pd.get_dummies(df['smoking_status'])\nwork_type_dum = pd.get_dummies(df['work_type'])","d4e97d91":"df = pd.concat([df, gender_dum, residence_type_dum, smoking_status_dum, work_type_dum],axis='columns')\ndf = df.drop(columns=['gender','ever_married','work_type','Residence_type','smoking_status'])\ndf.head()","a6212535":"# X data\nX = df.drop(\"stroke\", axis=1)\nX.head()","f800bdc0":"# y data\ny = df[\"stroke\"]\ny.head()","bea79c23":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","d82fa70b":"len(X_train), len(X_test)","e871b65b":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators = 100)\nrfc.fit(X_train,y_train)","af2eafc8":"RandomForestClassifierScore = rfc.score(X_test, y_test)\nprint(\"Accuracy obtained by Random Forest Classifier model:\",RandomForestClassifierScore*100)","cba057fa":"rfc.predict_proba(X_test)","88f728fa":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = {\n    'bootstrap': [True],\n    'max_depth': [80, 90, 100, 110],\n    'max_features': [2, 3],\n    'min_samples_leaf': [3, 4, 5],\n    'min_samples_split': [8, 10, 12],\n    'criterion' : ['gini', 'entropy'],\n    'n_estimators': [100, 200, 300, 1000]\n}\n\ngrid_search_rfc = GridSearchCV(estimator = rfc, \n                               param_grid = param_grid, \n                               cv = 3, n_jobs = -1, verbose = 2)","5df55cf2":"grid_search_rfc.fit(X_train, y_train)","874be640":"grid_search_rfc.best_params_","119f8cf5":"grid_search_rfc.best_score_","c9c801f3":"grid_search_rfc_predict = grid_search_rfc.predict(X_test)","970e65da":"print('Improvement in Random Forest Classifier after GridSearchCV: {:0.2f}%.'.format(100 * (grid_search_rfc.best_score_ - RandomForestClassifierScore) \/ RandomForestClassifierScore))","89eee66c":"# Comparing the results after the improvement in Random Forest Classifier\n\nplt.style.use(\"seaborn\")\n\nx = [\"Random Forest Classifier\",  \n     \"GridSearch-RandomForestClassifier\"]\n\ny = [RandomForestClassifierScore,  \n     grid_search_rfc.best_score_]\n\nfig, ax = plt.subplots(figsize=(6,6))\nsns.barplot(x=x,y=y, palette=\"crest\");\nplt.ylabel(\"Accuracy\")\nplt.xticks(rotation=45)\nplt.title(\"Random Forest Classifier  vs  GridSearched Random Forest Classifier\", fontsize=14, fontname=\"Helvetica\", y=1.03);","e3dc7a9f":"# Classification Report of GridSearch-Random Forest Classifier\nfrom sklearn.metrics import classification_report\n\nprint(classification_report(y_test, grid_search_rfc_predict))","d5415a33":"## Stroke Or No Stroke Pair Grid","4658879a":"## Random Forest Classifier","6c303bf3":"### Importing Libraries","b5c18c20":"## Correlation with `avg_glucose_level`","502c72b0":"## Correlation with `age`","ea18e14a":"# Stroke \ud83e\udde0 Analysis and Predictions ","123292ac":"## Splitting the data into training and test datasets\nHere, we are trying to predict the chance of a person getting a Stroke using the given data. Hence, the `stroke` will be the y label and rest of the data will be the X or the input data.","ab15aeba":"### Loading up the data","9ee776fd":"## Heatmap Correlation","3114c9f1":"#### If you like my work, It will be really great of you to upvote this notebook!\n#### If not then you leaving a comment on what do I need to work on and improve will be really helpful!"}}