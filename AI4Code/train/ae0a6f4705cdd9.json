{"cell_type":{"68a88b58":"code","56dd5a80":"code","0bda1d7c":"code","c83009fb":"code","e5fcf3c7":"code","7ba78272":"code","e397aec8":"code","ce4f396b":"code","864680ad":"code","de3de4d6":"code","a39fe79f":"code","1269882e":"code","377ce2f2":"code","5d853e9a":"code","69ba6785":"code","59db0ea4":"code","e3517483":"code","a910ecae":"code","051e1313":"code","c13c2477":"code","8eb73280":"code","2900f8c6":"code","56d58183":"code","bcf2fe88":"code","71449de7":"code","07fe94e6":"code","98ad8de7":"code","05657d66":"code","31bbaf1a":"code","c56cd3aa":"code","aa239fe5":"code","9a1952de":"code","c22a5db7":"code","b4eb7df4":"code","6eef0bf6":"code","6fb1378d":"code","20b94c28":"code","df735df4":"code","bdc6bacc":"code","69ce100e":"code","0e400376":"code","435eba68":"code","38ddc462":"code","f8cc552f":"code","6fa01c59":"code","c6eb513b":"code","dc3818c9":"markdown","fb7c8563":"markdown","83bf6dec":"markdown","d522e42b":"markdown","2eefc671":"markdown","50e38d38":"markdown","222fedca":"markdown","c6a2caa3":"markdown","312faafb":"markdown","545f588e":"markdown","81fe70c6":"markdown","5e564395":"markdown","01c7c1d5":"markdown","c01bc6df":"markdown","910951e1":"markdown","7cde9b55":"markdown","aeea3556":"markdown","b8de449d":"markdown","ab701519":"markdown","8221fc3a":"markdown","35be584e":"markdown","d210b210":"markdown","1ee47504":"markdown","500fd811":"markdown","4c5a1fcc":"markdown","0f0d3723":"markdown","ac67cbd4":"markdown","7a618667":"markdown","ff06a44a":"markdown","89eaf0a1":"markdown","c54d063d":"markdown","ebf873a4":"markdown","c5271146":"markdown","5fab5b17":"markdown","783e9e21":"markdown","841dc70a":"markdown","d99829a1":"markdown","a3f4923b":"markdown"},"source":{"68a88b58":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time","56dd5a80":"df = pd.read_csv(\"..\/input\/heart-dataset\/heart_info.csv\")","0bda1d7c":"df.shape","c83009fb":"df.info()","e5fcf3c7":"df.head()","7ba78272":"#for target\nconversion_dict = {1 : 'isHeartPatient', 0 : 'isNotHeartPatient'}\ndf['target'] = df['target'].replace(conversion_dict)\n#for sex\nconversion_dict = {1 : 'Male', 0 : 'Female'}\ndf['sex'] = df['sex'].replace(conversion_dict)\n#for cp\nconversion_dict = {0 : 'Typical', 1 : 'Atypical', 2 : 'Non-anginal', 3 : 'Asymptomatic'}\ndf['cp'] = df['cp'].replace(conversion_dict)\n#for fbs\nconversion_dict = {1 : 'fbs > 120 mg\/dl', 0 : 'fbs < 120 mg\/dl'}\ndf['fbs'] = df['fbs'].replace(conversion_dict)\n#for exang\nconversion_dict = {1 : 'induced angina', 0 : 'not induced angina'}\ndf['exang'] = df['exang'].replace(conversion_dict)\ndf.head()","e397aec8":"df.isnull().sum()","ce4f396b":"df_plot = df.groupby(['target', 'sex']).size().reset_index().pivot(columns='target', index='sex', values=0)\ndf_plot.plot(kind='bar', stacked=True, color=['skyblue','orange'])","864680ad":"df_plot = df.groupby(['target', 'cp']).size().reset_index().pivot(columns='target', index='cp', values=0)\ndf_plot.plot(kind='bar', stacked=True, color=['yellowgreen','violet'])","de3de4d6":"df_plot = df.groupby(['target', 'fbs']).size().reset_index().pivot(columns='target', index='fbs', values=0)\ndf_plot.plot(kind='bar', stacked=True, color=['orange', 'yellowgreen'])","a39fe79f":"df_plot = df.groupby(['target', 'exang']).size().reset_index().pivot(columns='target', index='exang', values=0)\ndf_plot.plot(kind='bar', stacked=True, color=['gold', 'violet'])","1269882e":"sns.distplot(df['thalach'],kde=True,bins=30,color='green')","377ce2f2":"sns.distplot(df['chol'],kde=True,bins=30,color='red')","5d853e9a":"sns.distplot(df['trestbps'],kde=True,bins=30,color='blue')","69ba6785":"plt.figure(figsize=(15,6))\nsns.countplot(x='age',data = df, hue = 'target',palette='cubehelix')","59db0ea4":"#for target\nconversion_dict = {'isHeartPatient' : 1, 'isNotHeartPatient' : 0}\ndf['target'] = df['target'].replace(conversion_dict)\n#for sex\nconversion_dict = {'Male' : 1,'Female' : 0}\ndf['sex'] = df['sex'].replace(conversion_dict)\n#for cp\nconversion_dict = {'Typical' : 0,'Atypical' : 1,'Non-anginal' : 2,'Asymptomatic' : 3}\ndf['cp'] = df['cp'].replace(conversion_dict)\n#for fbs\nconversion_dict = {'fbs > 120 mg\/dl' : 1, 'fbs < 120 mg\/dl' : 0}\ndf['fbs'] = df['fbs'].replace(conversion_dict)\n#for exang\nconversion_dict = {'induced angina' : 1,'not induced angina' : 0}\ndf['exang'] = df['exang'].replace(conversion_dict)\ndf.head()","e3517483":"x = df.drop('target',axis=1)\ny = df['target']","a910ecae":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state=42) ","051e1313":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(x_train)\n\nx_train = scaler.transform(x_train)\nx_test = scaler.transform(x_test)","c13c2477":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn import metrics","8eb73280":"from sklearn.linear_model import LogisticRegression","2900f8c6":"logreg = LogisticRegression()","56d58183":"logreg.fit(x_train, y_train)","bcf2fe88":"begin = time.time()\ny_pred = logreg.predict(x_test)\nend = time.time()\nlrExecTime = end - begin\nprint('Execution Time taken by LR : ',lrExecTime)","71449de7":"y_pred","07fe94e6":"print(confusion_matrix(y_test, y_pred))","98ad8de7":"print(classification_report(y_test, y_pred))","05657d66":"print(\"Accuracy: \",metrics.accuracy_score(y_test, y_pred))\nprint('Accuracy Score: ',accuracy_score(y_test,y_pred))\nlrAccuracy = round(accuracy_score(y_test,y_pred),5)*100\nprint('Using Logistic Regression we get an accuracy score of: ',\n      lrAccuracy,'%')","31bbaf1a":"from sklearn.naive_bayes import GaussianNB","c56cd3aa":"gnb = GaussianNB()","aa239fe5":"gnb.fit(x_train, y_train)","9a1952de":"begin = time.time()\ny_pred = gnb.predict(x_test)\nend = time.time()\ngnbExecTime = end - begin\nprint('Execution Time taken by GNB : ',gnbExecTime)","c22a5db7":"y_pred","b4eb7df4":"print(confusion_matrix(y_test, y_pred))","6eef0bf6":"print(classification_report(y_test, y_pred))","6fb1378d":"print(\"Accuracy: \",metrics.accuracy_score(y_test, y_pred))\nprint('Accuracy Score: ',accuracy_score(y_test,y_pred))\ngnbAccuracy = round(accuracy_score(y_test,y_pred),5)*100\nprint('Using Gaussian Naive Bayesian we get an accuracy score of: ',\n      gnbAccuracy,'%')","20b94c28":"from sklearn.neighbors import KNeighborsClassifier","df735df4":"classifier = KNeighborsClassifier(n_neighbors=7)","bdc6bacc":"classifier.fit(x_train, y_train)","69ce100e":"begin = time.time()\ny_pred = classifier.predict(x_test)\nend = time.time()\nknnExecTime = end - begin\nprint('Execution Time taken by KNN : ',knnExecTime)","0e400376":"y_pred","435eba68":"print(confusion_matrix(y_test, y_pred))","38ddc462":"print(classification_report(y_test, y_pred))","f8cc552f":"print('Accuracy Score: ',accuracy_score(y_test,y_pred))\nknnAccuracy = round(accuracy_score(y_test,y_pred),5)*100\nprint('Using k-NN we get an accuracy score of: ',\n      knnAccuracy,'%')","6fa01c59":"labels = 'LR','GNB','KNN'\nvalues = [lrExecTime,gnbExecTime,knnExecTime]\nplt.bar(labels,values,color=['violet','skyblue','yellowgreen'])\nplt.title('Execution Time Comparison')\nplt.show()","c6eb513b":"labels = 'LR','GNB','KNN'\nvalues = [lrAccuracy,gnbAccuracy,knnAccuracy]\nplt.bar(labels,values,color=['skyblue','gold','violet'])\nplt.title('Accuracy Comparison')\nplt.show()","dc3818c9":"#### 4. exang: exercise induced angina (1 = yes; 0 = no) vs Heart Disease Patients","fb7c8563":"### Plotting the distribution of various attributes","83bf6dec":"###  Applying K Nearest Neighors Algorithm","d522e42b":"### Features of dataset","2eefc671":"### Printing Confusion Matrix","50e38d38":"### Applying Logistic Regression","222fedca":"### Printing Classification Matrix","c6a2caa3":"#### 3. trestbps: resting blood pressure (in mm Hg on admission to the hospital)","312faafb":"### Applying Gaussian Naive Bayesian","545f588e":"### Execution Time : Logistic Regression vs Gaussian Naive Bayesian vs KNN Algorithm","81fe70c6":"### Dimensions of dataset","5e564395":"### Loading the dataset","01c7c1d5":"#### 2. Chest Pain Type vs Heart Disease Patients","c01bc6df":"### Printing Confusion Matrix","910951e1":"### Importing important modules from above imported libraries","7cde9b55":"### Printing Accuracy Score","aeea3556":"### Viewing dataset","b8de449d":"### Preprocessing - Scaling the features","ab701519":"### Reverting back to numeric values for predictions","8221fc3a":"### Checking features of various attributes","35be584e":"### Explanation of 14 features\n- **age:** age in years\n- **sex:** (1 = male; 0 = female)\n- **cp:** chest pain type\n    - 0: Typical angina: chest pain related decrease blood supply to the heart\n    - 1: Atypical angina: chest pain not related to heart\n    - 2: Non-anginal pain: typically esophageal spasms (non heart related)\n    - 3: Asymptomatic: chest pain not showing signs of disease\n- **trestbps:** resting blood pressure (in mm Hg on admission to the hospital) anything above 130-140 is typically cause for concern\n- **chol:** serum cholesterol in mg\/dl\n    - serum = LDL + HDL + .2 * triglycerides\n    - above 200 is cause for concern\n- **fbs:** (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n    - '>126' mg\/dL signals diabetes\n- **restecg:** resting electrocardiographic results\n    - 0: Nothing to note\n    - 1: ST-T Wave abnormality\n        - can range from mild symptoms to severe problems\n        - signals non-normal heart beat\n    - 2: Possible or definite left ventricular hypertrophy\n        - Enlarged heart's main pumping chamber\n- **thalach:** maximum heart rate achieved\n- **exang:** exercise induced angina (1 = yes; 0 = no)\n- **oldpeak:** ST depression induced by exercise relative to rest looks at stress of heart during excercise unhealthy heart will stress more\n- **slope:** the slope of the peak exercise ST segment\n    -0: Upsloping: better heart rate with exercise (uncommon)\n    -1: Flat Sloping: minimal change (typical healthy heart)\n    -2: Downsloping: signs of unhealthy heart\n- **ca:** number of major vessels (0-3) colored by fluoroscopy\n    -colored vessel means the doctor can see the blood passing through\n    -the more blood movement the better (no clots)\n- **thal:** 3 = normal; 6 = fixed defect; 7 = reversible defect\n    -1,3: normal\n    -6: fixed defect: used to be defect but ok now\n    -7: reversible defect: no proper blood movement when exercising\n- **target:** have disease or not (1=yes, 0=no) (= the predicted attribute)","d210b210":"### Checking for null values in the dataset","1ee47504":"### Splitting the dataset into train and test set for making predictions","500fd811":"#### 1. Sex (1 : Male , 0 : Female) vs Heart Disease Patients","4c5a1fcc":"### Making predictions","0f0d3723":"### Importing required libraries","ac67cbd4":"### Conversion for Visualizing Data","7a618667":"\n![image.png](attachment:image.png)\n\n\n## Nowadays, Heart Diseases in humans are the most common. One of them, which is Heart Attack is believed to be a peaceful death, too! These diseases are so common in humans, that for people older than 75, congestive heart failure occurs 10 times more often than in younger adults.\n\n## How helpful it would have been, if one could predict a patient would be suffering from Heart Disease or not, or whether he\/she may fall for such a situation in future or not.\n\n## Below I've aaplied Logistic Regression, Gaussian Naive Bayesian and K - Nearest Algorithm on the dataset!\n\n## Do Upvote \ud83d\ude4c my kernel if found useful!\n","ff06a44a":"### Printing Classification Matrix","89eaf0a1":"### Accuracy : Logistic Regression vs Gaussian Naive Bayesian vs KNN Algorithm","c54d063d":"### Printing Classification Matrix","ebf873a4":"### Printing Accuracy Score","c5271146":"### Printing Confusion Matrix","5fab5b17":"#### 4. Number of people who have heart disease according to age ","783e9e21":"#### 3. fbs: (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false) vs Heart Disease Patients","841dc70a":"#### 1. thalach: maximum heart rate achieved","d99829a1":"### Printing Accuracy Score","a3f4923b":"#### 2. chol: serum cholestoral in mg\/dl "}}