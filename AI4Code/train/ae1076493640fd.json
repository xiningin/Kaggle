{"cell_type":{"d9331406":"code","c7926ea6":"code","db1b4bf9":"code","bc65dec8":"code","1c7f89df":"code","d278214e":"code","bff2653d":"code","e42079b9":"code","f162a937":"code","fd13fe71":"code","4c91f929":"code","8074d6f7":"code","4fed2f85":"code","bdcea09b":"code","62e145fb":"code","67287254":"code","5f400f1d":"code","4a522eef":"code","7aeb9304":"code","8162e204":"code","ac6bd374":"code","71444224":"code","95f7f7fc":"code","177cf2ac":"code","2adce6da":"code","0f99cdde":"code","ee948a8f":"code","5f9d4db6":"code","34ebeea8":"code","6cc1fb6b":"code","948d01e0":"code","9db5a166":"code","803c9053":"code","2ef2b195":"code","86dd9aee":"code","f7f81a39":"code","afd52e57":"code","4f0b1260":"code","097fb7f9":"markdown","09b5764d":"markdown","cd0c5a8e":"markdown","2f66b6ca":"markdown","0c683bb7":"markdown","f66ec696":"markdown","85bbe4ec":"markdown","1e1c83eb":"markdown","8786ad1f":"markdown","1c1cc0df":"markdown","451a3947":"markdown"},"source":{"d9331406":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c7926ea6":"from sklearn.feature_selection import VarianceThreshold, SelectKBest, SelectFromModel, f_regression, mutual_info_regression, RFE, RFECV\nfrom sklearn.model_selection import train_test_split, KFold, GridSearchCV\nfrom sklearn.linear_model import LinearRegression, Lasso\nfrom sklearn.preprocessing import StandardScaler\nfrom matplotlib.image import imread\nfrom matplotlib import offsetbox\nfrom mpl_toolkits import mplot3d\nimport cv2\nfrom sklearn.manifold import LocallyLinearEmbedding, MDS, Isomap, TSNE\nfrom sklearn.decomposition import PCA\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n%matplotlib inline\nimport seaborn as sns","db1b4bf9":"from skimage import io\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nfolder_path = '..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/'\nfolder = ['COVID','NORMAL','Viral Pneumonia']\n\n\nfor k in [50,75,100,125,150]:\n   \n    num = 1\n    df_k = pd.DataFrame(index=range(1,3830),columns = ['Nom Image','Moyenne pixels','Pixels Blanc','Pixels Noir','Type Maladie'])\n    \n    for j in folder:\n       \n        files_image = [folder_path + j + \"\/\" + j + \" (\" + str(i+1) + \").png\" for i in range(len(os.listdir(folder_path + j)))]\n        \n        for file in files_image :\n\n            image_num= io.imread(file)\n            df_k['Moyenne pixels'][num]= round(np.mean(image_num))\n            df_k['Nom Image'][num] = j + \" (\" + str(num) + \").png\"\n            df_k['Pixels Blanc'][num] = np.sum(image_num >=k)\n            df_k['Pixels Noir'][num] =np.sum(image_num < k)\n            df_k ['Type Maladie'][num] = j\n            num=num+1\n     \n    plt.figure(figsize=(25,6))\n    plt.subplot(131),sns.barplot(x='Type Maladie',y='Moyenne pixels',data=df_k),plt.title('Moyenne des pixels par type de maladie')\n    plt.subplot(132),sns.barplot(x='Type Maladie',y='Pixels Noir',data=df_k),plt.title('Moyenne des pixels noirs par type de maladie')\n    plt.subplot(133),sns.barplot(x='Type Maladie',y='Pixels Blanc',data=df_k),plt.title('Moyenne des pixels blanc par type de maladie')\n","bc65dec8":"def image_plot_and_dist(image):\n    img_gray = cv2.imread(image, cv2.IMREAD_GRAYSCALE)\n    plt.figure(figsize = (5,5))\n    plt.imshow(img_gray, cmap = 'gray')\n    plt.xticks([])\n    plt.yticks([])\n    plt.show();\n    \n    img = cv2.imread(image,0)\n    plt.hist(img.ravel(),256,[0,256]); \n    plt.show()\n\nimage_plot_and_dist('..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/COVID\/COVID (1).png')\n","1c7f89df":"from skimage import io\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfolder_path = '..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/'\nfolder = ['COVID','NORMAL','Viral Pneumonia']\n           \ndf = pd.DataFrame(index=range(1,3830),columns = ['Nom Image','Moyenne pixels','Pixels Blanc','Pixels Noir','Type Maladie'])\nnum = 1\n\nfor j in folder:\n  \n        files_image = [folder_path + j + \"\/\" + j + \" (\" + str(i+1) + \").png\" for i in range(len(os.listdir(folder_path + j)))]\n        \n        for file in files_image :\n\n            image_num= io.imread(file)\n            df['Moyenne pixels'][num]= round(np.mean(image_num))\n            df['Nom Image'][num] = j + \" (\" + str(num) + \").png\"\n            df['Pixels Blanc'][num] = np.sum(image_num >=100)\n            df['Pixels Noir'][num] =np.sum(image_num < 100)\n            df['Type Maladie'][num] = j\n            num=num+1\ndf.head(100)","d278214e":"plt.figure(figsize=(25,6))\nplt.subplot(131),sns.barplot(x='Type Maladie',y='Moyenne pixels',data=df),plt.title('Moyenne des pixels par type de maladie')\nplt.subplot(132),sns.barplot(x='Type Maladie',y='Pixels Noir',data=df),plt.title('Moyenne des pixels noirs par type de maladie')\nplt.subplot(133),sns.barplot(x='Type Maladie',y='Pixels Blanc',data=df),plt.title('Moyenne des pixels blanc par type de maladie')","bff2653d":"g= sns.FacetGrid(df,col='Type Maladie')\ng.map(plt.hist,'Pixels Blanc');","e42079b9":"g= sns.FacetGrid(df,col='Type Maladie')\ng.map(plt.hist,'Pixels Noir');","f162a937":"from skimage import io\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2\n\nfolder_path = '..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/'\nfolder = ['COVID','NORMAL','Viral Pneumonia']\n           \ndf_mask = pd.DataFrame(index=range(1,3830),columns = ['Nom Image','Moyenne pixels','Pixels Blanc','Pixels Noir','Type Maladie'])\nnum = 1\n\nfor j in folder:\n  \n        files_image = [folder_path + j + \"\/\" + j + \" (\" + str(i+1) + \").png\" for i in range(len(os.listdir(folder_path + j)))]\n        \n        for file in files_image :            \n            \n            image_num= io.imread(file)\n            \n            \n            sommets = [(280, 50),(50,50),(50,280),(280,280)]\n            sommets =  np.array([sommets], np.int32)\n            mask = np.zeros_like(image_num) \n            mask = cv2.fillPoly(mask, sommets, color = 255)\n            masked_image_num = cv2.bitwise_and(image_num, mask)\n            #cv2.imwrite('\/path\/to\/destination\/image.png',image)\n            \n            df_mask['Moyenne pixels'][num]= round(np.mean(masked_image_num))\n            df_mask['Nom Image'][num] = j + \" (\" + str(num) + \").png\"\n            df_mask['Pixels Blanc'][num] = np.sum(masked_image_num >=100 )\n            df_mask['Pixels Noir'][num] =np.sum(masked_image_num< 100)\n            df_mask['Type Maladie'][num] = j\n            num+=1\n\ndf_mask.head(100)\n\nplt.figure(figsize=(25,6))\nplt.subplot(131),sns.barplot(x='Type Maladie',y='Moyenne pixels',data=df_mask),plt.title('Moyenne des pixels par type de maladie avec masque sur image')\nplt.subplot(132),sns.barplot(x='Type Maladie',y='Pixels Noir',data=df_mask),plt.title('Moyenne des pixels noirs par type de maladie avec masque sur image')\nplt.subplot(133),sns.barplot(x='Type Maladie',y='Pixels Blanc',data=df_mask),plt.title('Moyenne des pixels blanc par type de maladie avec masque sur image')","fd13fe71":"plt.figure(figsize=(25,6))\nplt.subplot(131),sns.barplot(x='Type Maladie',y='Moyenne pixels',data=df_mask),plt.title('Moyenne des pixels par type de maladie avec masque sur image')\nplt.subplot(132),sns.barplot(x='Type Maladie',y='Pixels Noir',data=df_mask),plt.title('Moyenne des pixels noirs par type de maladie avec masque sur image')\nplt.subplot(133),sns.barplot(x='Type Maladie',y='Pixels Blanc',data=df_mask),plt.title('Moyenne des pixels blanc par type de maladie avec masque sur image')","4c91f929":"g= sns.FacetGrid(df_mask,col='Type Maladie')\ng.map(plt.hist,'Pixels Blanc');\n","8074d6f7":"g= sns.FacetGrid(df_mask,col='Type Maladie')\ng.map(plt.hist,'Pixels Noir');","4fed2f85":"from skimage import io\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport cv2\n\nimg_gray = cv2.imread('..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/COVID\/COVID (14).png', cv2.IMREAD_GRAYSCALE)\nimg_norm = cv2.imread('..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/NORMAL\/NORMAL (6).png', cv2.IMREAD_GRAYSCALE)\nimg_viral = cv2.imread('..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/Viral Pneumonia\/Viral Pneumonia (143).png', cv2.IMREAD_GRAYSCALE)\n\nfiltre = cv2.GaussianBlur(img_gray, ksize = (3,3),sigmaX=0)\nseuil ,img_seuillage  = cv2.threshold(filtre,150,255, type = cv2.THRESH_BINARY)\n\n\nfiltre1 = cv2.GaussianBlur(img_norm, ksize = (3,3),sigmaX=0)\nseuil1 ,img_seuillage1  = cv2.threshold(filtre1,150,255, type = cv2.THRESH_BINARY)\n\nfiltre2 = cv2.GaussianBlur(img_viral, ksize = (3,3),sigmaX=0)\nseuil1 ,img_seuillage2  = cv2.threshold(filtre2,150,255, type = cv2.THRESH_BINARY)\n\nplt.figure(figsize = (8,5))\nplt.imshow(img_seuillage, cmap = 'gray')\n\nplt.figure(figsize = (8,5))\nplt.imshow(img_gray, cmap = 'gray')\n\n\nplt.figure(figsize = (8,5))\nplt.imshow(img_seuillage1, cmap = 'gray')\n\nplt.figure(figsize = (8,5))\nplt.imshow(img_norm, cmap = 'gray')\n\n\nplt.figure(figsize = (8,5))\nplt.imshow(img_seuillage2, cmap = 'gray')\n\nplt.figure(figsize = (8,5))\nplt.imshow(img_viral, cmap = 'gray')\n\n\n\nplt.xticks([])\nplt.yticks([])\n\nplt.show();","bdcea09b":"\nimg_gray = cv2.imread('..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/COVID\/COVID (14).png', cv2.IMREAD_GRAYSCALE)\n\nfiltre = cv2.GaussianBlur(img_gray, ksize = (3,3), sigmaX = 0)\nimg_seuillage2 = cv2.adaptiveThreshold(filtre,255,\n                                          adaptiveMethod = cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\n                                        thresholdType = cv2.THRESH_BINARY,\n                                          blockSize = 11,C = 5)\n\n\nfiltre1 = cv2.GaussianBlur(img_seuillage2, ksize = (3,3),sigmaX=0)\nseuil ,img_seuillage  = cv2.threshold(filtre1,150,255, type = cv2.THRESH_BINARY)\n\n\nplt.figure(figsize=(8,5))\nplt.subplot(121)\nplt.imshow(img_seuillage2,cmap='gray')\nplt.xticks([])\nplt.yticks([])\nplt.show()\n\n\nplt.figure(figsize=(8,5))\nplt.subplot(122)\nplt.imshow(img_seuillage,cmap='gray')\nplt.xticks([])\nplt.yticks([])\nplt.show()","62e145fb":"from skimage import io\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfolder_path = '..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/'\nfolder = ['COVID','NORMAL','Viral Pneumonia']\n           \ndf_zoom = pd.DataFrame(index=range(1,3830),columns = ['Nom Image','Moyenne pixels','Pixels Blanc','Pixels Noir','Type Maladie'])\nnum = 1\n\nfor j in folder:\n  \n        files_image = [folder_path + j + \"\/\" + j + \" (\" + str(i+1) + \").png\" for i in range(len(os.listdir(folder_path + j)))]\n        \n        for file in files_image :            \n            \n            image_num= io.imread(file)\n            \n            long, larg = image_num.shape[:2]\n            long_z = int(0.8*long)\n            larg_z = int(0.8*larg)\n            long_deb = 130\n            larg_deb = 90\n            image_zoom_num = image_num[long_deb:long_deb + long_z, larg_deb:larg_deb+larg_z]\n            image_zoom_num = cv2.resize(image_zoom_num, (long_z, larg_z))\n            \n            \n            df_zoom['Moyenne pixels'][num]= round(np.mean(image_zoom_num))\n            df_zoom['Nom Image'][num] = j + \" (\" + str(num) + \").png\"\n            df_zoom['Pixels Blanc'][num] = np.sum(image_zoom_num >= 100)\n            df_zoom['Pixels Noir'][num] =np.sum(image_zoom_num < 100)\n            df_zoom['Type Maladie'][num] = j\n            num+=1\n\ndf_zoom.head(100)","67287254":"plt.figure(figsize=(25,6))\nplt.subplot(131),sns.barplot(x='Type Maladie',y='Moyenne pixels',data=df_zoom),plt.title('Moyenne des pixels par type de maladie avec ZOOM sur image')\nplt.subplot(132),sns.barplot(x='Type Maladie',y='Pixels Noir',data=df_zoom),plt.title('Moyenne des pixels noirs par type de maladie avec ZOOM sur image')\nplt.subplot(133),sns.barplot(x='Type Maladie',y='Pixels Blanc',data=df_zoom),plt.title('Moyenne des pixels blanc par type de maladie avec ZOOM sur image')","5f400f1d":"from skimage import io\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfolder_path = '..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/'\nfolder = ['COVID','NORMAL','Viral Pneumonia']\n           \ndf_otsu = pd.DataFrame(index=range(1,3830),columns = ['Nom Image','Moyenne pixels','Pixels Blanc','Pixels Noir','Type Maladie'])\nnum = 1\n\nfor j in folder:\n  \n        files_image = [folder_path + j + \"\/\" + j + \" (\" + str(i+1) + \").png\" for i in range(len(os.listdir(folder_path + j)))]\n        \n        for file in files_image :            \n            \n            image_num= io.imread(file,cv2.IMREAD_GRAYSCALE)\n            # Otsu's thresholding\n            #ret2,th2 = cv2.threshold(image_num,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)\n            ret,th1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)\n            \n            df_otsu['Moyenne pixels'][num]= round(np.mean(th1))\n            df_otsu['Nom Image'][num] = j + \" (\" + str(num) + \").png\"\n            df_otsu['Pixels Blanc'][num] = np.sum(th1 == 255)\n            df_otsu['Pixels Noir'][num] =np.sum(th1 == 0)\n            df_otsu['Type Maladie'][num] = j\n            num+=1\n\ndf_otsu.head(100)","4a522eef":"plt.figure(figsize=(25,6))\nplt.subplot(131),sns.barplot(x='Type Maladie',y='Moyenne pixels',data=df_otsu),plt.title('Moyenne des pixels par type de maladie avec OTSU')\nplt.subplot(132),sns.barplot(x='Type Maladie',y='Pixels Noir',data=df_otsu),plt.title('Moyenne des pixels noirs par type de maladie avec OTSU')\nplt.subplot(133),sns.barplot(x='Type Maladie',y='Pixels Blanc',data=df_otsu),plt.title('Moyenne des pixels blanc par type de maladie avec OTSU')","7aeb9304":"from skimage import io\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfolder_path = '..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/'\nfolder = ['COVID','NORMAL','Viral Pneumonia']\n           \ndf_amt = pd.DataFrame(index=range(1,3830),columns = ['Nom Image','Moyenne pixels','Pixels Blanc','Pixels Noir','Type Maladie'])\nnum = 1\n\nfor j in folder:\n  \n        files_image = [folder_path + j + \"\/\" + j + \" (\" + str(i+1) + \").png\" for i in range(len(os.listdir(folder_path + j)))]\n        \n        for file in files_image :            \n            \n            image_num= io.imread(file,cv2.IMREAD_GRAYSCALE)\n            th1 = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_MEAN_C,\\\n            cv2.THRESH_BINARY,11,2)\n            \n            df_amt['Moyenne pixels'][num]= round(np.mean(th1))\n            df_amt['Nom Image'][num] = j + \" (\" + str(num) + \").png\"\n            df_amt['Pixels Blanc'][num] = np.sum(th1 == 255)\n            df_amt['Pixels Noir'][num] =np.sum(th1 == 0)\n            df_amt['Type Maladie'][num] = j\n            num+=1\n\ndf_amt.head(100)","8162e204":"plt.figure(figsize=(25,6))\nplt.subplot(131),sns.barplot(x='Type Maladie',y='Moyenne pixels',data=df_amt),plt.title('Moyenne des pixels par type de maladie avec AMT')\nplt.subplot(132),sns.barplot(x='Type Maladie',y='Pixels Noir',data=df_amt),plt.title('Moyenne des pixels noirs par type de maladie avec AMT')\nplt.subplot(133),sns.barplot(x='Type Maladie',y='Pixels Blanc',data=df_amt),plt.title('Moyenne des pixels blanc par type de maladie avec AMT')","ac6bd374":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/COVID\/COVID (14).png', cv2.IMREAD_GRAYSCALE)\nimg = cv2.medianBlur(img,5)\n\nret,th1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)\nth2 = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_MEAN_C,\\\n            cv2.THRESH_BINARY,11,2)\nth3 = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\\\n            cv2.THRESH_BINARY,11,2)\n\ntitles = ['Original Image', 'Global Thresholding (v = 127)',\n            'Adaptive Mean Thresholding', 'Adaptive Gaussian Thresholding']\nimages = [img, th1, th2, th3]\n\nfor i in range(4):\n    plt.subplot(2,2,i+1),plt.imshow(images[i],'gray')\n    plt.title(titles[i])\n    plt.xticks([]),plt.yticks([])\nplt.show()\nprint(np.mean(th1))","71444224":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/COVID\/COVID (14).png', cv2.IMREAD_GRAYSCALE)\n\n# global thresholding\nret1,th1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)\n\n# Otsu's thresholding\nret2,th2 = cv2.threshold(img,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)\n\n# Otsu's thresholding apr\u00e9s filtre Gaussien\nblur = cv2.GaussianBlur(img,(5,5),0)\nret3,th3 = cv2.threshold(blur,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)\n\n# affichage des images et les histogrammes associ\u00e9s\nimages = [img, 0, th1,\n          img, 0, th2,\n          blur, 0, th3]\ntitles = ['Original Noisy Image','Histogram','Global Thresholding (v=127)',\n          'Original Noisy Image','Histogram',\"Otsu's Thresholding\",\n          'Gaussian filtered Image','Histogram',\"Otsu's Thresholding\"]\n\nfor i in range(3):\n    plt.figure(figsize=(8,8))\n    plt.subplot(3,3,i*3+1),plt.imshow(images[i*3],'gray')\n    plt.title(titles[i*3]), plt.xticks([]), plt.yticks([])\n    plt.subplot(3,3,i*3+2),plt.hist(images[i*3].ravel(),256)\n    plt.title(titles[i*3+1]), plt.xticks([]), plt.yticks([])\n    plt.subplot(3,3,i*3+3),plt.imshow(images[i*3+2],'gray')\n    plt.title(titles[i*3+2]), plt.xticks([]), plt.yticks([])\nplt.show()","95f7f7fc":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/NORMAL\/NORMAL (1002).png', cv2.IMREAD_GRAYSCALE)\n\n# global thresholding\nret1,th1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)\n\n# Otsu's thresholding\nret2,th2 = cv2.threshold(img,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)\n\n# Otsu's thresholding apr\u00e9s filtre Gaussien\nblur = cv2.GaussianBlur(img,(5,5),0)\nret3,th3 = cv2.threshold(blur,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)\n\n# affichage des images et les histogrammes associ\u00e9s\nimages = [img, 0, th1,\n          img, 0, th2,\n          blur, 0, th3]\ntitles = ['Original Noisy Image','Histogram','Global Thresholding (v=127)',\n          'Original Noisy Image','Histogram',\"Otsu's Thresholding\",\n          'Gaussian filtered Image','Histogram',\"Otsu's Thresholding\"]\n\nfor i in range(3):\n    plt.figure(figsize=(8,8))\n    plt.subplot(3,3,i*3+1),plt.imshow(images[i*3],'gray')\n    plt.title(titles[i*3]), plt.xticks([]), plt.yticks([])\n    plt.subplot(3,3,i*3+2),plt.hist(images[i*3].ravel(),256)\n    plt.title(titles[i*3+1]), plt.xticks([]), plt.yticks([])\n    plt.subplot(3,3,i*3+3),plt.imshow(images[i*3+2],'gray')\n    plt.title(titles[i*3+2]), plt.xticks([]), plt.yticks([])\nplt.show()","177cf2ac":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/Viral Pneumonia\/Viral Pneumonia (1011).png', cv2.IMREAD_GRAYSCALE)\n\n# global thresholding\nret1,th1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)\n\n# Otsu's thresholding\nret2,th2 = cv2.threshold(img,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)\n\n# Otsu's thresholding apr\u00e9s filtre Gaussien\nblur = cv2.GaussianBlur(img,(5,5),0)\nret3,th3 = cv2.threshold(blur,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)\n\n# affichage des images et les histogrammes associ\u00e9s\nimages = [img, 0, th1,\n          img, 0, th2,\n          blur, 0, th3]\ntitles = ['Original Noisy Image','Histogram','Global Thresholding (v=127)',\n          'Original Noisy Image','Histogram',\"Otsu's Thresholding\",\n          'Gaussian filtered Image','Histogram',\"Otsu's Thresholding\"]\n\nfor i in range(3):\n    plt.figure(figsize=(8,8))\n    plt.subplot(3,3,i*3+1),plt.imshow(images[i*3],'gray')\n    plt.title(titles[i*3]), plt.xticks([]), plt.yticks([])\n    plt.subplot(3,3,i*3+2),plt.hist(images[i*3].ravel(),256)\n    plt.title(titles[i*3+1]), plt.xticks([]), plt.yticks([])\n    plt.subplot(3,3,i*3+3),plt.imshow(images[i*3+2],'gray')\n    plt.title(titles[i*3+2]), plt.xticks([]), plt.yticks([])\nplt.show()","2adce6da":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/Viral Pneumonia\/Viral Pneumonia (1011).png', cv2.IMREAD_GRAYSCALE)\n\nlong, larg = img.shape[:2]\nlong_z = int(0.8*long)\nlarg_z = int(0.8*larg)\nlong_deb = 130\nlarg_deb = 90\nimg= img[long_deb:long_deb + long_z, larg_deb:larg_deb+larg_z]\nimg= cv2.resize(img,(long_z, larg_z))\n\n\n# global thresholding\nret1,th1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)\n\n# Otsu's thresholding\nret2,th2 = cv2.threshold(img,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)\n\n# Otsu's thresholding apr\u00e9s filtre Gaussien\nblur = cv2.GaussianBlur(img,(5,5),0)\nret3,th3 = cv2.threshold(blur,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)\n\n# affichage des images et les histogrammes associ\u00e9s\nimages = [img, 0, th1,\n          img, 0, th2,\n          blur, 0, th3]\ntitles = ['Original Noisy Image','Histogram','Global Thresholding (v=127)',\n          'Original Noisy Image','Histogram',\"Otsu's Thresholding\",\n          'Gaussian filtered Image','Histogram',\"Otsu's Thresholding\"]\n\nfor i in range(3):\n    plt.figure(figsize=(8,8))\n    plt.subplot(3,3,i*3+1),plt.imshow(images[i*3],'gray')\n    plt.title(titles[i*3]), plt.xticks([]), plt.yticks([])\n    plt.subplot(3,3,i*3+2),plt.hist(images[i*3].ravel(),256)\n    plt.title(titles[i*3+1]), plt.xticks([]), plt.yticks([])\n    plt.subplot(3,3,i*3+3),plt.imshow(images[i*3+2],'gray')\n    plt.title(titles[i*3+2]), plt.xticks([]), plt.yticks([])\nplt.show()","0f99cdde":"plt.figure(figsize=(15,15))\nplt.hist(images[i*3].ravel(),256)\nplt.show()","ee948a8f":"import glob\nimages_COVID = []\nsizes_COVID = []\nfor img in glob.glob(\"*.png\"):\n    images_COVID.append(cv2.imread(img, cv2.IMREAD_GRAYSCALE).reshape(-1))\nfor i in range(len(images_COVID)):\n    sizes_COVID.append(images_COVID[i].size)\ndf2_covid = pd.DataFrame({'Image' : range(1, len(sizes_COVID)+1)})\ndf2_covid['size']=sizes_COVID","5f9d4db6":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/Viral Pneumonia\/Viral Pneumonia (1011).png', cv2.IMREAD_GRAYSCALE)\n\nimg1 = img.mean()\n\nplt.figure(figsize=(15,15))\nplt.subplot(121),plt.imshow(img,cmap='gray'),plt.title('IMAGE NON MOYENNEE'),plt.show()\nplt.subplot(122),plt.imshow(img1,cmap='gray'),plt.title('IMAGE AVEC MOYENNE'),plt.show()","34ebeea8":"#DEFINITION D UNE FONCTION DE COMPTAGE PIXEL SANS MASQUE NI ZOOM (le seuil entre pixel blanc est noir est fix\u00e9 \u00e0 100\n\n\ndef image_sans_filtre(img):\n    \n    #DEFINITION D UNE FONCTION DE COMPTAGE PIXEL SANS MASQUE NI ZOOM (le seuil entre pixel blanc est noir est fix\u00e9 \u00e0 100\n    \n    image_num= io.imread(img)\n    Moyenne_pixels= round(np.mean(image_num))\n    Pixels_Blanc = np.sum(image_num >=100)\n    Pixels_Noir= np.sum(image_num < 100)\n    \n    print ('La moyenne de pixel de cette image est : ',Moyenne_pixels)\n    print ('Le nombre des pixels blanc de cette image est : ',Pixels_Blanc)\n    print ('Le nombre des pixels noir de cette image est : ',Pixels_Noir)\n    \n    return Moyenne_pixels,Pixels_Blanc,Pixels_Noir","6cc1fb6b":"img = '..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/Viral Pneumonia\/Viral Pneumonia (1011).png'\nimage_sans_filtre(img)","948d01e0":"#DEFINITION D UNE FONCTION DE COMPTAGE PIXEL AVEC MASQUE (le seuil entre pixel blanc est noir est fix\u00e9 \u00e0 100\n\n\ndef image_avec_masque(img):\n\n#DEFINITION D UNE FONCTION DE COMPTAGE PIXEL AVEC MASQUE (le seuil entre pixel blanc est noir est fix\u00e9 \u00e0 100\n\n    image_num= io.imread(img)\n    sommets = [(280, 50),(50,50),(50,280),(280,280)]\n    sommets =  np.array([sommets], np.int32)\n    mask = np.zeros_like(image_num) \n    mask = cv2.fillPoly(mask, sommets, color = 255)\n    masked_image_num = cv2.bitwise_and(image_num, mask)\n    \n    Moyenne_pixels= round(np.mean(masked_image_num))\n    Pixels_Blanc = np.sum(masked_image_num >=100)\n    Pixels_Noir= np.sum(masked_image_num < 100)\n    \n    print ('La moyenne de pixel de cette image est : ',Moyenne_pixels)\n    print ('Le nombre des pixels blanc de cette image est : ',Pixels_Blanc)\n    print ('Le nombre des pixels noir de cette image est : ',Pixels_Noir)\n    \n    return Moyenne_pixels,Pixels_Blanc,Pixels_Noir","9db5a166":"img = '..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/Viral Pneumonia\/Viral Pneumonia (1011).png'\nimage_avec_masque(img)","803c9053":"def image_avec_zoom(img):\n\n#DEFINITION D UNE FONCTION DE COMPTAGE PIXEL AVEC ZOOM SUR LES POUMONS (le seuil entre pixel blanc est noir est fix\u00e9 \u00e0 100)\n\n    image_num= io.imread(img)\n    long, larg = image_num.shape[:2]\n    long_z = int(0.8*long)\n    larg_z = int(0.8*larg)\n    long_deb = 130\n    larg_deb = 90\n    image_zoom_num = image_num[long_deb:long_deb + long_z, larg_deb:larg_deb+larg_z]\n    image_zoom_num = cv2.resize(image_zoom_num, (long_z, larg_z))\n    \n    Moyenne_pixels= round(np.mean(image_zoom_num))\n    Pixels_Blanc = np.sum(image_zoom_num >=100)\n    Pixels_Noir= np.sum(image_zoom_num < 100)\n    \n    print ('La moyenne de pixel de cette image est : ',Moyenne_pixels)\n    print ('Le nombre des pixels blanc de cette image est : ',Pixels_Blanc)\n    print ('Le nombre des pixels noir de cette image est : ',Pixels_Noir)\n    \n    return Moyenne_pixels,Pixels_Blanc,Pixels_Noir\n","2ef2b195":"img = '..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/Viral Pneumonia\/Viral Pneumonia (1011).png'\nimage_avec_zoom(img)","86dd9aee":"def image_filtre_threshold(img):\n\n#ESSAIS AVEC UN NOUVEAU FILTRE ==> THRESHOLD = THRESH_OTSU\n    image_num= io.imread(img,cv2.IMREAD_GRAYSCALE)\n    ret,th1 = cv2.threshold(image_num,127,255,cv2.THRESH_BINARY)\n    \n    Moyenne_pixels= round(np.mean(th1))\n    Pixels_Blanc = np.sum(th1 >=100)\n    Pixels_Noir= np.sum(th1 < 100)\n    \n    print ('La moyenne de pixel de cette image est : ',Moyenne_pixels)\n    print ('Le nombre des pixels blanc de cette image est : ',Pixels_Blanc)\n    print ('Le nombre des pixels noir de cette image est : ',Pixels_Noir)\n    \n    return Moyenne_pixels,Pixels_Blanc,Pixels_Noir\n","f7f81a39":"img = '..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/Viral Pneumonia\/Viral Pneumonia (1011).png'\nimage_filtre_threshold(img)","afd52e57":"def image_filtre_threshold_Gaussien(img):\n\n#ESSAIS AVEC UN FILTRE GAUSSIEN PUIS THRESHOLD = THRESH_OTSU\n\n    image_num= io.imread(img,cv2.IMREAD_GRAYSCALE)\n    blur = cv2.GaussianBlur(image_num,(5,5),0)\n    ret1,th1 = cv2.threshold(blur,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)\n    Moyenne_pixels= round(np.mean(th1))\n    Pixels_Blanc = np.sum(th1 >=100)\n    Pixels_Noir= np.sum(th1 < 100)\n    \n    print ('La moyenne de pixel de cette image est : ',Moyenne_pixels)\n    print ('Le nombre des pixels blanc de cette image est : ',Pixels_Blanc)\n    print ('Le nombre des pixels noir de cette image est : ',Pixels_Noir)\n    \n    return Moyenne_pixels,Pixels_Blanc,Pixels_Noir\n","4f0b1260":"img = '..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/Viral Pneumonia\/Viral Pneumonia (1011).png'\nimage_filtre_threshold_Gaussien(img)","097fb7f9":"**** ESSAIS avec zoom avec image pneumonie","09b5764d":"# ESSAIS AVEC UN NOUVEAU FILTRE ==> THRESHOLD = THRESH_OTSU","cd0c5a8e":"#  ESSAIS AVEC UN NOUVEAU FILTRE ==> Adaptive Mean Thresholding","2f66b6ca":"ESSAIS SUR IMAGE NORMAL","0c683bb7":"ESSAIS AVEC UN NOUVEAU FILTRE ==> THRESHOLD = THRESH_OTSU","f66ec696":"**ANALYSE DES IMAGES SANS MASQUE NI ZOOM**","85bbe4ec":"**ANALYSE DES IMAGES AVEC MASQUE**","1e1c83eb":"ESSAIS SUR IMAGE PNEUMO VIRAL","8786ad1f":"**ESSAIS DE SEUILLAGE SUR IMAGE**","1c1cc0df":"**Otsu\u2019s Binarization**","451a3947":"ANALYSE AVEC ZOOM SUR LES POUMONS****"}}