{"cell_type":{"8d5c1444":"code","6979173a":"code","35a5a8ac":"code","00861ce3":"code","9cfc2924":"code","41290bd6":"code","9e70bb74":"code","ff3795a2":"code","3fc7159e":"code","566716fc":"code","8bcd3950":"code","09f944d3":"code","14371a79":"code","715888d8":"code","22273d9b":"code","1af383de":"code","4cf085e3":"code","e0289823":"code","f1f2e0b8":"code","798cf42f":"code","918440e6":"code","3fcddc6e":"code","e32f464c":"code","c128a9df":"code","f1db7ff3":"code","651e71db":"code","7867d84f":"code","8da5f315":"code","8ad24a95":"code","d6aff331":"markdown","6017c892":"markdown","8a6968b7":"markdown","734264af":"markdown","465143aa":"markdown","e29d437f":"markdown"},"source":{"8d5c1444":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom keras.models import Model\nfrom keras.layers import Dense, Embedding, Input, LSTM, Bidirectional, GlobalMaxPool1D, Dropout\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing import sequence\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras.utils import to_categorical","6979173a":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","35a5a8ac":"train.head()","00861ce3":"train.shape, test.shape","9cfc2924":"train.shape, test.shape","41290bd6":"train_length = train.comment_text.apply(len)\ntrain_length.head()","9e70bb74":"plt.figure(figsize = (12, 5))\nplt.hist(train_length, bins = 60, range = [0, 1000], alpha = 0.5, color = 'r')\nplt.show()","ff3795a2":"print(\"max length : \", np.max(train_length))\nprint(\"min length : \", np.min(train_length))\nprint(\"mean length : \", np.mean(train_length))\nprint(\"75 % percentile : \", np.percentile(train_length, 75))\nprint(\"85 % percentile : \", np.percentile(train_length, 85))\nprint(\"std length : \", np.std(train_length))","3fc7159e":"train_length = train.comment_text.apply(lambda x : len(x.split()))\ntrain_length.head()","566716fc":"plt.figure(figsize = (12, 5))\nplt.hist(train_length, bins = 60, range = [0, 200], alpha = 0.5, color = 'r')\nplt.show()","8bcd3950":"print(\"max length : \", np.max(train_length))\nprint(\"min length : \", np.min(train_length))\nprint(\"mean length : \", np.mean(train_length))\nprint(\"75 % percentile : \", np.percentile(train_length, 75))\nprint(\"85 % percentile : \", np.percentile(train_length, 85))\nprint(\"std length : \", np.std(train_length))","09f944d3":"X_train = train['comment_text'].astype(str)\nX_test = test['comment_text'].astype(str)","14371a79":"y = np.where(train['target'] >= 0.5, True, False) * 1","715888d8":"y[:10]","22273d9b":"num_words = 20000\nmax_len = 150\nemb_size = 128","1af383de":"tok = Tokenizer(num_words = num_words)\ntok.fit_on_texts(list(X_train))","4cf085e3":"X = tok.texts_to_sequences(X_train)\ntest = tok.texts_to_sequences(X_test)","e0289823":"X = sequence.pad_sequences(X, maxlen = max_len)\nX_test = sequence.pad_sequences(test, maxlen = max_len)","f1f2e0b8":"X[0]","798cf42f":"def model():\n    inp = Input(shape = (max_len, ))\n    layer = Embedding(num_words, emb_size)(inp)\n    layer = Bidirectional(LSTM(50, return_sequences = True, recurrent_dropout = 0.15))(layer)\n    layer = GlobalMaxPool1D()(layer)\n    layer = Dropout(0.2)(layer)\n    layer = Dense(50, activation = 'relu')(layer)\n    layer = Dropout(0.2)(layer)\n    layer = Dense(1, activation = 'sigmoid')(layer)\n    model = Model(inputs = inp, outputs = layer)\n    model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics=['accuracy'])\n    return model","918440e6":"model = model()\nmodel.summary()","3fcddc6e":"hist = model.fit(X, y, batch_size = 1024, epochs = 2, validation_split = 0.2)","e32f464c":"vloss = hist.history['val_loss']\nloss = hist.history['loss']\n\nx_len = np.arange(len(loss))\n\nplt.plot(x_len, vloss, marker='.', c='red', label='vloss')\nplt.plot(x_len, loss, marker='.', c='blue', label='loss')\nplt.legend()\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.grid()\nplt.show()","c128a9df":"y_test = model.predict(X_test)","f1db7ff3":"y_test[:10]","651e71db":"sub = pd.read_csv('..\/input\/sample_submission.csv')","7867d84f":"sub['prediction'] = y_test","8da5f315":"sub.head()","8ad24a95":"sub.to_csv('submission.csv', index=False)","d6aff331":"** now, make model! with LSTM, Bidirectional **","6017c892":"** check data with simple EDA **","8a6968b7":"** load data! **","734264af":"** almost data is in < len(400) ** ","465143aa":"** tokenizer **","e29d437f":"** training! **"}}