{"cell_type":{"22cb23f7":"code","6518f00c":"code","45163824":"code","464029e2":"code","0d3b8e99":"markdown"},"source":{"22cb23f7":"\"\"\" change working directory \"\"\"\nimport os\n\nif os.path.basename(os.getcwd()) == 'working':\n    os.chdir('..\/input\/tf-gan-code-20181007\/transparent_latent_gan_kaggle_2018_1007\/transparent_latent_gan_kaggle_2018_1007')\nprint('current working directory is {}'.format(os.getcwd()))\n","6518f00c":"\"\"\" import packages \"\"\"\n\nimport os\nimport glob\nimport sys\nimport numpy as np\nimport pickle\nimport tensorflow as tf\nimport PIL\nimport ipywidgets\nimport io\n\nimport src.tf_gan.generate_image as generate_image\nimport src.tf_gan.feature_axis as feature_axis\nimport src.tf_gan.feature_celeba_organize as feature_celeba_organize\n\n\n\"\"\" load learnt feature axis directions \"\"\"\npath_feature_direction = '.\/asset_results\/pg_gan_celeba_feature_direction_40'\n\npathfile_feature_direction = glob.glob(os.path.join(path_feature_direction, 'feature_direction_*.pkl'))[-1]\n\nwith open(pathfile_feature_direction, 'rb') as f:\n    feature_direction_name = pickle.load(f)\n\nfeature_direction = feature_direction_name['direction']\nfeature_name = feature_direction_name['name']\nnum_feature = feature_direction.shape[1]\n\nfeature_name = feature_celeba_organize.feature_name_celeba_rename\nfeature_direction = feature_direction_name['direction']* feature_celeba_organize.feature_reverse[None, :]\n\n","45163824":"\"\"\" ========== start tf session and load GAN model ========== \"\"\"\n\n# path to model code and weight\npath_pg_gan_code = '.\/src\/model\/pggan'\npath_model = '.\/asset_model\/karras2018iclr-celebahq-1024x1024.pkl'\nsys.path.append(path_pg_gan_code)\n\n\n\"\"\" create tf session \"\"\"\nyn_CPU_only = False\n\nif yn_CPU_only:\n    config = tf.ConfigProto(device_count = {'GPU': 0}, allow_soft_placement=True)\nelse:\n    config = tf.ConfigProto(allow_soft_placement=True)\n    config.gpu_options.allow_growth = True\n\nsess = tf.InteractiveSession(config=config)\n\ntry:\n    with open(path_model, 'rb') as file:\n        G, D, Gs = pickle.load(file)\nexcept FileNotFoundError:\n    print('before running the code, download pre-trained model to project_root\/asset_model\/')\n    raise\n\nlen_z = Gs.input_shapes[0][1]\nz_sample = np.random.randn(len_z)\nx_sample = generate_image.gen_single_img(z_sample, Gs=Gs)","464029e2":"\"\"\" ========== ipywigets gui interface ========== \"\"\"\n\ndef img_to_bytes(x_sample):\n    \"\"\" tool funcion to code image for using ipywidgets.widgets.Image plotting function \"\"\"\n    imgObj = PIL.Image.fromarray(x_sample)\n    imgByteArr = io.BytesIO()\n    imgObj.save(imgByteArr, format='PNG')\n    imgBytes = imgByteArr.getvalue()\n    return imgBytes\n\n# a random sample of latent space noise\nz_sample = np.random.randn(len_z)\n# the generated image using this noise patter\nx_sample = generate_image.gen_single_img(z=z_sample, Gs=Gs)\n\nw_img = ipywidgets.widgets.Image(value=img_to_bytes(x_sample), fromat='png', \n                                 width=512, height=512,\n                                 layout=ipywidgets.Layout(height='512px', width='512px')\n                                )\n\nclass GuiCallback(object):\n    \"\"\" call back functions for button click behaviour \"\"\"\n    counter = 0\n    #     latents = z_sample\n    def __init__(self):\n        self.latents = z_sample\n        self.feature_direction = feature_direction\n        self.feature_lock_status = np.zeros(num_feature).astype('bool')\n        self.feature_directoion_disentangled = feature_axis.disentangle_feature_axis_by_idx(\n            self.feature_direction, idx_base=np.flatnonzero(self.feature_lock_status))\n\n    def random_gen(self, event):\n        self.latents = np.random.randn(len_z)\n        self.update_img()\n\n    def modify_along_feature(self, event, idx_feature, step_size=0.01):\n        self.latents += self.feature_directoion_disentangled[:, idx_feature] * step_size\n        self.update_img()\n\n    def set_feature_lock(self, event, idx_feature, set_to=None):\n        if set_to is None:\n            self.feature_lock_status[idx_feature] = np.logical_not(self.feature_lock_status[idx_feature])\n        else:\n            self.feature_lock_status[idx_feature] = set_to\n        self.feature_directoion_disentangled = feature_axis.disentangle_feature_axis_by_idx(\n            self.feature_direction, idx_base=np.flatnonzero(self.feature_lock_status))\n    \n    def update_img(self):        \n        x_sample = generate_image.gen_single_img(z=self.latents, Gs=Gs)\n        x_byte = img_to_bytes(x_sample)\n        w_img.value = x_byte\n\nguicallback = GuiCallback()\n\nstep_size = 0.4\ndef create_button(idx_feature, width=128, height=40):\n    \"\"\" function to built button groups for one feature \"\"\"\n    w_name_toggle = ipywidgets.widgets.ToggleButton(\n        value=False, description=feature_name[idx_feature],\n        tooltip='{}, Press down to lock this feature'.format(feature_name[idx_feature]),\n        layout=ipywidgets.Layout(height='{:.0f}px'.format(height\/2), \n                                 width='{:.0f}px'.format(width),\n                                 margin='2px 2px 2px 2px')\n    )\n    w_neg = ipywidgets.widgets.Button(description='-',\n                                      layout=ipywidgets.Layout(height='{:.0f}px'.format(height\/2), \n                                                               width='{:.0f}px'.format(width\/2),\n                                                               margin='1px 1px 5px 1px'))\n    w_pos = ipywidgets.widgets.Button(description='+',\n                                      layout=ipywidgets.Layout(height='{:.0f}px'.format(height\/2), \n                                                               width='{:.0f}px'.format(width\/2),\n                                                               margin='1px 1px 5px 1px'))\n    \n    w_name_toggle.observe(lambda event: \n                      guicallback.set_feature_lock(event, idx_feature))\n    w_neg.on_click(lambda event: \n                     guicallback.modify_along_feature(event, idx_feature, step_size=-1 * step_size))\n    w_pos.on_click(lambda event: \n                     guicallback.modify_along_feature(event, idx_feature, step_size=+1 * step_size))\n    \n    button_group = ipywidgets.VBox([w_name_toggle, ipywidgets.Box([w_neg, w_pos])],\n                                  layout=ipywidgets.Layout(border='1px solid gray'))\n    \n    return button_group\n  \n\nlist_buttons = []\nfor idx_feature in range(num_feature):\n    list_buttons.append(create_button(idx_feature))\n\nyn_button_select = True\ndef arrange_buttons(list_buttons, yn_button_select=True, ncol=4):\n    num = len(list_buttons)\n    if yn_button_select:\n        feature_celeba_layout = feature_celeba_organize.feature_celeba_layout\n        layout_all_buttons = ipywidgets.VBox([ipywidgets.Box([list_buttons[item] for item in row]) for row in feature_celeba_layout])\n    else:\n        layout_all_buttons = ipywidgets.VBox([ipywidgets.Box(list_buttons[i*ncol:(i+1)*ncol]) for i in range(num\/\/ncol+int(num%ncol>0))])\n    return layout_all_buttons\n    \n\n# w_button.on_click(on_button_clicked)\nguicallback.update_img()\nw_button_random = ipywidgets.widgets.Button(description='random face', button_style='success',\n                                           layout=ipywidgets.Layout(height='40px', \n                                                               width='128px',\n                                                               margin='1px 1px 5px 1px'))\nw_button_random.on_click(guicallback.random_gen)\n\nw_box = ipywidgets.Box([w_img, \n                         ipywidgets.VBox([w_button_random, \n                                         arrange_buttons(list_buttons, yn_button_select=True)])\n                        ], layout=ipywidgets.Layout(height='628px', width='1024px')\n                       )\n\nprint('INSTRUCTION: press +\/- to adjust feature, toggle feature name to lock the feature')\ndisplay(w_box)","0d3b8e99":"# Interactive demo for TL-GAN (transparent latent-space GAN)\n\nproject page: https:\/\/github.com\/SummitKwan\/transparent_latent_gan\n\nI host the demo here at Kaggle because they generously provides kernel with free GPU!  Alternatively, it costs $600 per month if I host a backend at AWS.\n\nTo use the demo:\n\n1. Make sure you have a Kaggle account. If not, please register one (this can be done in seconds by linking to your Google or Facebook account). To have a Kaggle account is actually very rewarding, since allows you to participate numerous  data science challenges and join the knowledgeable and friendly community.\n2. Fork the current notebook\n3. run the notebook by pressing the double right arrow button at the bottom left of the web page. If something does not work right, try to restart the kernel by pressing the circular-arrow button on the bottom right and rerun the notebook\n4. Go to the bottom of the notebook and play with the image interactively\n5. You are all set, play with the model:\n    - Press the \u201c-\/+\u201c to control every feature\n    - Toggle the feature name(s) to lock one or more features. e.g. lock \u201cMale\u201d when playing with \u201cBeard\""}}