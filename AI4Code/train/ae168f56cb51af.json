{"cell_type":{"2f434bab":"code","973a2de0":"code","1583c0a7":"code","2ff1a3a2":"code","2895b94f":"code","36811215":"code","22de1f7b":"code","ec73082e":"code","66c95c20":"code","75abd54b":"code","166586c0":"code","852abed0":"code","388b235d":"code","fe3aeb2a":"code","556a6ef8":"code","e84ce0ca":"code","9583d714":"code","e81bd344":"code","a742ed61":"code","41a5483a":"code","8b4091ef":"code","fa061617":"code","9640a0f2":"code","e0afaae7":"code","4e9e0c13":"code","27a2fcdc":"markdown","1e1f8333":"markdown","cf6cb786":"markdown","457164eb":"markdown","5e317fe3":"markdown","cedea5aa":"markdown","3a1b72db":"markdown","0a521b17":"markdown","ba17a902":"markdown"},"source":{"2f434bab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n# Any results you write to the current directory are saved as output.\nimport glob\nimport os.path\nimport pandas as pd\nimport pydicom\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport numpy as np\nimport sys\nsys.path.insert(0, '..\/input\/siim-acr-pneumothorax-segmentation')\n\nfrom mask_functions import rle2mask\n\nfrom skimage import exposure","973a2de0":"def create_input_dataset(directory):\n    input_df = pd.DataFrame(glob.glob(directory + \"\/**\/*.dcm\", recursive=True), columns = [\"Path\"])\n    input_df[\"ImageId\"] = input_df[\"Path\"].apply(lambda x: os.path.basename(x)[:-4])\n    def df_extract_metadata_from_path(df):\n        dcm = pydicom.dcmread(df['Path'])\n        df['Age'] = dcm.PatientAge\n        df['Sex'] = dcm.PatientSex \n        df['Rows'] = dcm.Rows \n        df['Columns'] = dcm.Columns\n        return df\n    input_df = input_df.apply(df_extract_metadata_from_path, axis=1)\n    input_df['Age'] = input_df['Age'].astype('int32')\n    return input_df","1583c0a7":"def create_label_dataset(filename, width=1024, height=1024):\n    NO_MASK_STRING = ' -1'\n    labels_df = pd.read_csv(filename)\n    # Fix typo in target file\n    labels_df = labels_df.rename({\" EncodedPixels\":\"EncodedPixels\"}, axis=1)\n    # Images may contain multiple lre labels --> combine in df\n    labels_df = pd.DataFrame(labels_df.groupby(\"ImageId\")[\"EncodedPixels\"].apply(list))\n    labels_df['HasMask'] = labels_df[\"EncodedPixels\"].apply(lambda x: x != [NO_MASK_STRING])\n    labels_df['NMasks'] = labels_df['EncodedPixels'].apply(lambda x: len(x) if x != [NO_MASK_STRING] else 0)\n    labels_df['OverlappingMasks'] = labels_df['EncodedPixels'].apply(lambda x: (sum([rle2mask(i, width=width, height=height)\/255 for i in x]) > 1).any() if len(x) > 1 else False)\n    mask_coverages_df = labels_df[labels_df['HasMask']]['EncodedPixels'].apply(lambda y: list(map(lambda x: (rle2mask(x, width=width, height=height)\/255).sum()\/(width*height),y)))\n    labels_df[\"MaskCoverage\"] = mask_coverages_df.apply(sum)\n    return labels_df","2ff1a3a2":"input_df = create_input_dataset(\"..\/input\/siim-train-test\/siim\/dicom-images-train\")\ntest_df = create_input_dataset(\"..\/input\/siim-train-test\/siim\/dicom-images-test\")\nlabels_df = create_label_dataset(\"..\/input\/siim-train-test\/siim\/train-rle.csv\")","2895b94f":"def check_input_dataset(df):\n    rows = df['Rows'].unique()\n    columns = df['Columns'].unique()\n    if len(rows) != 1 or len(columns) != 1:\n        raise RuntimeError(\"ERROR: input images don't have the same size\")\n    print(\"Image dimensions: %d x %d\" % (rows[0], columns[0]))\n    print(\"Input data shape: %s\" % str(df.shape))","36811215":"def merge_input_with_labels(input_df, labels_df):\n    print(10*\"*\" + \" Before merge \" + 10*\"*\")\n    print(\"Input Data Shape:  %s\" % str(input_df.shape)) \n    print(\"Labels Shape:      %s\" % str(labels_df.shape))\n    df = pd.merge(labels_df, input_df, on=\"ImageId\", validate=\"one_to_one\")\n    print(10*\"*\" + \" After merge \" + 10*\"*\")\n    print(\"Merged data shape: %s\" % str(df.shape))\n    return df","22de1f7b":"check_input_dataset(input_df)","ec73082e":"train_df = merge_input_with_labels(input_df, labels_df)","66c95c20":"train_df.groupby(\"HasMask\")[\"ImageId\"].count()","75abd54b":"print(train_df[\"NMasks\"].describe())\nprint((train_df[train_df[\"HasMask\"]][\"NMasks\"] >= 2).sum())\nsb.distplot(train_df[\"NMasks\"], kde=False)","166586c0":"overlaps = train_df[train_df[\"NMasks\"] >= 2]\noverlaps[overlaps[\"OverlappingMasks\"]][\"ImageId\"]\noverlaps.to_csv(\"overlaps_IDs.csv\")","852abed0":"ax = sb.distplot(train_df['Age'])\nax = sb.distplot(test_df['Age'])\nax.set_xlim(0,100)","388b235d":"train_df.groupby(\"Sex\").count()[\"ImageId\"]\/len(train_df)","fe3aeb2a":"test_df.groupby(\"Sex\").count()[\"ImageId\"]\/len(test_df)","556a6ef8":"ax = sb.distplot(train_df[train_df[\"HasMask\"]]['Age'])\nax = sb.distplot(train_df[~train_df[\"HasMask\"]]['Age'])\nax.set_xlim(0,100)","e84ce0ca":"ax = sb.distplot(train_df[(train_df[\"HasMask\"]) & (train_df[\"Sex\"] == \"M\")]['Age'], label=\"Mask && M\")\nax = sb.distplot(train_df[(~train_df[\"HasMask\"]) & (train_df[\"Sex\"] == \"M\")]['Age'], label=\"NoMask && M\")\nplt.legend()\nax.set_xlim(0,100)","9583d714":"ax = sb.distplot(train_df[(train_df[\"HasMask\"]) & (train_df[\"Sex\"] == \"F\")]['Age'], label=\"Mask && F\")\nax = sb.distplot(train_df[(~train_df[\"HasMask\"]) & (train_df[\"Sex\"] == \"F\")]['Age'], label=\"NoMask && F\")\nplt.legend()\nax.set_xlim(0,100)","e81bd344":"fig, ax = plt.subplots()\nsb.distplot(train_df[~train_df['MaskCoverage'].isnull()]['MaskCoverage'])","a742ed61":"sb.scatterplot(train_df[\"Age\"], train_df[~train_df['MaskCoverage'].isnull()]['MaskCoverage'])","41a5483a":"def equalize_image(img):\n    cdf, centroids = exposure.cumulative_distribution(img)\n    return np.interp(img, centroids, cdf)","8b4091ef":"def show_image_and_masks(index, maskindex=-1):\n    fig, ax = plt.subplots(1, 3, figsize=(25,45))\n    dcm = pydicom.dcmread(train_df[\"Path\"][index])\n    image = dcm.pixel_array\/255\n    image_equalized = equalize_image(dcm.pixel_array\/255)\n    ax[0].imshow(image_equalized, cmap='bone')\n    ax[1].imshow(image_equalized, cmap='bone')\n\n    if train_df['HasMask'][index]:\n        print(\"Image has %d masks\" % len(train_df['EncodedPixels'][index]))\n        if maskindex == -1:\n            mask = sum([rle2mask(x, width=1024, height=1024).T for x in train_df['EncodedPixels'][index]])\n        else:\n            mask = rle2mask(train_df['EncodedPixels'][index][maskindex], width=1024, height=1024).T\n        ax[1].imshow(mask, cmap='Reds', alpha=0.3, interpolation='none')\n        ax[2].imshow(mask, cmap='Reds', interpolation='none')\n\n\n    plt.show()","fa061617":"train_df[train_df[\"NMasks\"] == 10]['Path']","9640a0f2":"show_image_and_masks(13)","e0afaae7":"show_image_and_masks(5415)","4e9e0c13":"train_df[\"ImageId\"][5415]","27a2fcdc":"### Metadata distributions and comparison","1e1f8333":"The training set contains 10712 images, but only 10675 of these images have corresponding labels.","cf6cb786":"Age distributions in train and test set are comparable","457164eb":"There are 624 images labelled with more than one segment (there exists even one image with 10 segments, see below!)  ","5e317fe3":"### Loading data\n* Use SIIM-ACR data set by [See--](https:\/\/www.kaggle.com\/seesee\/siim-train-test)\n* Extract relevant metadata from dicoms\n* Prepare mask data and do some simple analysis (overlapping segements, converage)\n* Merge dicom data frame with mask dataframe","cedea5aa":"Sex distributions in train and test set are comparable","3a1b72db":"### Analyse data","0a521b17":"The trainings set is unbalanced ","ba17a902":"Work in progress"}}