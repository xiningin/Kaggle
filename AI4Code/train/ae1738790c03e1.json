{"cell_type":{"224ade80":"code","7e921226":"code","d7935a49":"code","5f3ac371":"code","419c346e":"code","18a84319":"code","fb86d6b8":"code","3c8cad80":"code","b50b3d6e":"code","362eff3f":"code","8e9c3399":"code","9010c49c":"code","dc0a405f":"code","9a82f856":"code","da0db398":"code","e3d2fad6":"code","54761579":"code","d9d88127":"markdown"},"source":{"224ade80":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split  #Split file\nimport geopandas\nimport matplotlib\n# Input data files are available in the \"..\/input\/\" directory.\nimport os\n#print(os.listdir(\"..\/input\"))\n","7e921226":"weather_data = pd.read_csv(\"..\/input\/weatherAUS.csv\") \n# Preview the first 5 lines of the loaded data \nweather_data.head()","d7935a49":"## Let's what is inside\nweather_data[\"Date\"].head()","5f3ac371":"#Change datatype of Date column\nweather_data[\"Date\"] = pd.to_datetime(weather_data[\"Date\"])\n","419c346e":"## Data discovering\nprint(\"Maximum date :: \",weather_data[\"Date\"].max() )\nprint(\"Minimun date :: \", weather_data[\"Date\"].min())\nprint(\"Count lines :: \", weather_data[\"Date\"].count())","18a84319":"## According to the number of data per column, it's unnecessary to keep if less that 60%\nnumber_lines = weather_data.count().max()\ncalc_col = weather_data.count().sort_values()\/(number_lines)\ncalc_col.apply(lambda x :'OK' if x > 0.6 else 'NOK') \n\n## deleting columns under 60% and RISK_MM due to be itself a sort of prediction\nweather_data = weather_data.drop(columns=['Sunshine','Evaporation','Cloud3pm','Cloud9am','RISK_MM','Date'],axis=1)\n\n## drop null values\nweather_data = weather_data.dropna(how='any')\n\n","fb86d6b8":"##discovering outliers\nimport seaborn as sns\nsns.boxplot(x=weather_data['MaxTemp'])","3c8cad80":"##Discover outliers with mathematical function   Z-Score\nfrom scipy import stats\nz = np.abs(stats.zscore(weather_data._get_numeric_data()))\nprint(z)\nweather_data= weather_data[(z < 3).all(axis=1)]\n","b50b3d6e":"## Transforming categorical column\nweather_data['RainToday'].replace({'No': 0, 'Yes': 1},inplace = True)\nweather_data['RainTomorrow'].replace({'No': 0, 'Yes': 1},inplace = True)","362eff3f":"categorical_columns = ['WindGustDir', 'WindDir3pm', 'WindDir9am','Location']\nfor col in categorical_columns:\n    print(np.unique(weather_data[col]))\n# transform the categorical columns\nweather_data = pd.get_dummies(weather_data, columns=categorical_columns)\n","8e9c3399":"## Letting all in the same Magnitude with preprocessing from SKLEARN\nfrom sklearn import preprocessing\nscaler = preprocessing.MinMaxScaler()\nscaler.fit(weather_data)\nweather_data = pd.DataFrame(scaler.transform(weather_data), index=weather_data.index, columns=weather_data.columns)\nweather_data.head()","9010c49c":"##Selecting the best features using SelectKBest\n\nfrom sklearn.feature_selection import SelectKBest, chi2\nX = weather_data.loc[:,weather_data.columns!='RainTomorrow']\ny = weather_data['RainTomorrow']\nselector = SelectKBest(chi2, k=5)\nselector.fit(X, y)\nX_new = selector.transform(X)\nprint(X.columns[selector.get_support(indices=True)])","dc0a405f":"X = weather_data[['Rainfall', 'Humidity9am', 'Humidity3pm', 'RainToday', 'WindDir9am_N']] \ny = weather_data[['RainTomorrow']]\n\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25)","9a82f856":"## Comparing regression models\n\nimport matplotlib.pyplot as plt\nfrom sklearn import model_selection\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\n# prepare configuration for cross validation test harness\nseed = 7\n# prepare models\nmodels = []\nmodels.append(('LogisticRegression', LogisticRegression()))\nmodels.append(('LinearDiscriminantAnalysis', LinearDiscriminantAnalysis()))\nmodels.append(('KNeighborsClassifier', KNeighborsClassifier()))\nmodels.append(('DecisionTreeClassifier', DecisionTreeClassifier()))\nmodels.append(('GaussianNB', GaussianNB()))\nmodels.append(('SVM', SVC()))\n# evaluate each model in turn\nresults = []\nnames = []\nscoring = 'accuracy'\nfor name, model in models:\n\tkfold = model_selection.KFold(n_splits=10, random_state=seed)\n\tcv_results = model_selection.cross_val_score(model, X, y, cv=kfold, scoring=scoring)\n\tresults.append(cv_results)\n\tnames.append(name)\n\tmsg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n\tprint(msg)","da0db398":"# boxplot algorithm comparison\nfig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nfig.set_figheight(7)\nfig.set_figwidth(14)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","e3d2fad6":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline  \nimport warnings\nimport matplotlib.cbook\nwarnings.filterwarnings(\"ignore\",category=matplotlib.cbook.mplDeprecation)","54761579":"fig = plt.figure(figsize=(25, 25))\nm = Basemap(projection='lcc',resolution='c',\n            width=8E6, height=5E6, \n            lat_0=-25, lon_0=133,)\nm.etopo(scale=0.5, alpha=0.5)\n\nx,y = m(144.946457,-37.840935)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Melbourne, VIC', fontsize=12)\nx,y = m(138.599503,-34.921230)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Adelaide, SA', fontsize=12)\nx,y = m(147.157135,-41.429825)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Launceston, TAS', fontsize=12)\nx,y = m(138.593903,-34.906101)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'North Adelaide, SA', fontsize=12)\nx,y = m(146.816956,-19.258965)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Townsville City, QLD', fontsize=12)\nx,y = m(145.754120,-16.925491)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Cairns City, QLD', fontsize=12)\nx,y = m(115.857048,-31.953512)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Perth, WA', fontsize=12)\nx,y = m(142.136490,-34.206841)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Mildura, VIC', fontsize=12)\nx,y = m(144.880600,-37.649967)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Ziyou Today, Greenvale, Victoria', fontsize=12)\nx,y = m(153.114136,-30.296276)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Coffs Harbour NSW 2450', fontsize=12)\nx,y = m(149.101273,-33.283577)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Orange, NSW', fontsize=12)\nx,y = m(144.278702,-36.757786)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Bendigo, VIC', fontsize=12)\nx,y = m(146.916473,-36.080780)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Albury, NSW', fontsize=12)\nx,y = m(150.893143,-34.425072)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Wollongong, NSW', fontsize=12)\nx,y = m(130.841782,-12.462827)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Darwin, Northern Territory', fontsize=12)\nx,y = m(151.224396,-33.683212)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Terrey Hills, NSW', fontsize=12)\nx,y = m(151.035889,-33.917290)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Bankstown NSW', fontsize=12)\nx,y = m(150.987274,-33.807690)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Westmead, NSW', fontsize=12)\nx,y = m(153.021072,-27.470125)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Brisbane, QLD', fontsize=12)\nx,y = m(151.268356,-23.843138)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Gladstone QLD', fontsize=12)\nx,y = m(149.082977,-35.343784)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Phillip ACT, Canberra', fontsize=12)\nx,y = m(151.342224,-33.425018)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Gosford, NSW', fontsize=12)\nx,y = m(140.783783,-37.824429)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Mount Gambier, SA', fontsize=12)\nx,y = m(151.209900,-33.865143)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Sydney, NSW', fontsize=12)\nx,y = m(152.407181,-27.529953)\nplt.plot(x, y, 'bo', markersize=5)\nplt.text(x,y,'Glenore Grove, Queensland', fontsize=12)\n","d9d88127":"##Feature selection"}}