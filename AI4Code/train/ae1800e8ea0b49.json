{"cell_type":{"3254b260":"code","df5ea88b":"code","8028469b":"code","22506ec2":"code","dfa77b60":"code","f78cceed":"code","44aa6402":"code","c91a13fa":"code","f1d4c339":"code","b3ecc0d8":"code","9ad893f7":"code","439110ca":"code","262a022e":"code","d3dac26a":"code","f04985ba":"code","2e29b4db":"code","1fd31823":"code","bbaa3c06":"code","98046d1c":"code","1b969152":"markdown","2bfdd556":"markdown","6c06bf69":"markdown","fc28decb":"markdown","533866e5":"markdown","7594dba4":"markdown","513b4061":"markdown","2e068bb8":"markdown","eb68e46d":"markdown","9e56d45b":"markdown","1310a4b7":"markdown","a0922a21":"markdown","62f36101":"markdown","38a418ff":"markdown","a414bb16":"markdown","4f3770ac":"markdown"},"source":{"3254b260":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings # current version of seaborn generates a bunch of warnings that we'll ignore\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","df5ea88b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns ","8028469b":"df_iris = pd.read_csv('..\/input\/iris\/Iris.csv')","22506ec2":"# Q). How many data-point(no. of rows) and features(no. of columns) are there?\ndf_iris.shape","dfa77b60":"# Q). What are the columns or feature names in dataset ?\ndf_iris.columns","f78cceed":"# Q). How many data points or flower for each class\/spieces are present ?\ndf_iris['Species'].value_counts()\n# balanced vs imbalanced dataset \n# Iris is a balanced dataset since the number of data points for each speicies are equal(50)\n# What is imbalanced dataset ? \n# Ans.) Imagine if we have dataset in which there are only 2 spieces and now if one spieces has 900 datapoints  \n#        and other has 100 only then such a data set is called imbalanced data set. \n#        for example: dataset from hospital having species cancer and non-cancer as \n#        we know most of datapoint will be non-cancer patient, so this is imbalanced dataset","44aa6402":"## 2-D Scatter-Plot :\ndf_iris.plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm')\n\n# Key point: Always see the labels and scale of graph\n# cannot make much sense out it after plotting : we can only see that  4<sepal_length<8 and 2<Sepalwidth<4.5\n# Now we will do colorthe points by their class-labesls\/flower-type","c91a13fa":"# We can also use seaborn library to make similiar plot\n# A seaborn jointplot shows bivariate scatterplots and univariate histograms in the same figure.\nsns.jointplot(x='SepalLengthCm',y='SepalWidthCm',data=df_iris,size=5)","f1d4c339":"# 2-D scatter plot with color for each flower type\/class\nsns.set_style(\"whitegrid\")\nsns.FacetGrid(df_iris,hue='Species',size=4).map(plt.scatter,'SepalLengthCm','SepalWidthCm').add_legend()\nplt.show()\n\n# Notice Blue point can be easily seperated from red and blue data points by drwaing a line\n# But green and orange  data points are not easily seperable \n\n","b3ecc0d8":"# pairwise scatter plot : Pair-Plot\n# One disadvanatge of Pair Plot : Cant' be Used when number of features are high.\nsns.set_style(\"whitegrid\")\nsns.pairplot(df_iris,hue='Species',size=3,diag_kind='hist')","9ad893f7":"# 1-D scatter plot using just one Feature \n# 1-D scatter plot of Petal-Length\nsetosa=df_iris[df_iris['Species']=='Iris-setosa']\nvirginca= df_iris[df_iris['Species']=='Iris-virginica']\nversicolor=df_iris[df_iris['Species']=='Iris-versicolor']\nplt.plot(setosa['PetalLengthCm'],np.zeros_like(setosa['PetalLengthCm']),'ro')\nplt.plot(versicolor['PetalLengthCm'],np.zeros_like(versicolor['PetalLengthCm']),'o') # it will create a plot such that x-axis is PetalLengthCm and y-axis valuesare zeros\nplt.plot(virginca['PetalLengthCm'],np.zeros_like(versicolor['PetalLengthCm']),'go')\n#plt.gca().legend(('Iris-virginica','Iris-setosa','Iris-versicolor'))\nplt.legend(['Iris-setosa','Iris-virginica','Iris-versicolor'])\nplt.show()\n# disadvantage of  1-D scatter plot are very hard to read as point are overlapping a lot.","439110ca":"# Histogram a better way of visualizing 1-D scatter plots bcz we can tell about the no. of data points present between 2 points\nsns.FacetGrid(df_iris,hue='Species',size=5).map(sns.distplot,'PetalLengthCm').add_legend()\n#here the Smooth curve is smooth curve of histogram using kde(kernel density estimator) and is called P.D.F(probability density fucntion)","262a022e":"sns.FacetGrid(df_iris,hue='Species',size=5).map(sns.distplot,'PetalWidthCm').add_legend()","d3dac26a":"sns.FacetGrid(df_iris,hue='Species',size=5).map(sns.distplot,'SepalLengthCm').add_legend()","f04985ba":"sns.FacetGrid(df_iris,hue='Species',size=5).map(sns.distplot,'SepalWidthCm').add_legend()","2e29b4db":"#Plot CDF of petal_length\n\ncounts, bin_edges = np.histogram(setosa['PetalLengthCm'], bins=10 ,density = True)\npdf = counts\/(sum(counts))\nprint(pdf);\nprint(bin_edges)\n\n#compute CDF\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:], cdf)\nplt.legend(['pdf','cdf'])","1fd31823":"print(\"1st setosa\")\ncounts, bin_edges = np.histogram(setosa['PetalLengthCm'], bins=10 ,density = True)\npdf = counts\/(sum(counts))\nprint(pdf);\nprint(bin_edges)\n\n#compute CDF\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:], cdf)\n \n\nprint(\"2nd versicolor\")\ncounts, bin_edges = np.histogram(versicolor['PetalLengthCm'], bins=10 ,density = True)\npdf = counts\/(sum(counts))\nprint(pdf);\nprint(bin_edges)\n\n#compute CDF\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:], cdf)\n\nprint(\"3rd.Virginica\")\ncounts, bin_edges = np.histogram(virginca['PetalLengthCm'], bins=10 ,density = True)\npdf = counts\/(sum(counts))\nprint(pdf);\nprint(bin_edges)\n\n#compute CDF\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:], cdf)\n\n","bbaa3c06":"# Box-plot with Whiskers : another simple method of visualizing the 1-D scatterplot more intuitively\n# It uses the concept of mean , median ,Percentile and Quantile\nsns.boxplot(x='Species',y='PetalLengthCm',data=df_iris)\n# By seeing the plot we can get the 25th ,50th ,75th percentiles.  \n\n","98046d1c":"#Violinplot is the combination of the histogram with pdf and Box-Plot\n#Denser region of the data are fatter and Sparser ones are thinner in violin plot\nsns.violinplot(x='Species',y='PetalLengthCm',data=df_iris)","1b969152":"## Observation from above 4 histoggram:  \n1. Rule of thumb : the more seperated this pdf are the more best they are in distinguishing\n2. PetalWidthCm and PetalLengthCm are  the  better than other for seperating flower types\n","2bfdd556":"### IRIS FLOWER  DATASET: [https:\/\/en.wikipedia.org\/wiki\/Iris_flower_data_set]\n1.  *A simple dataset to learn the basics*.\n2.  *3 types of flowers belonging to  Iris species*. [see images on wikipedia link above]\n3.  *1936 by Ronald Fishe*r.\n4.  *Petal and Sepal*: [http:\/\/terpconnect.umd.edu\/~petersd\/666\/html\/iris_with_labels.jpg]\n5.  **Objective** : *Classify a new flower as belonging to one of the 3 classes given the 4 features*.\n6.  *Importance of domain knowledge*.\n7.  *Why use petal and sepal dimensions as features?*\n8.  *Why do we not use 'color' as a feature?*\n\n","6c06bf69":"# **Histogram** and **PDF**\n\n\nPDF(Probablity Density Function):\n1. In probability theory, a probability density function, or density of a continuous random variable, is a function whose value at any given sample in the sample space can be interpreted as providing a relative likelihood that the value of the random variable would equal that sample. It is the measure of the percentage of distribution for a certain range of values.\n","fc28decb":"# Box Plots","533866e5":"## OBSERVATIONS:\n    1. PetalLength and Petalwidth are the most used useful feature to identify various flower types.\n    2. While setosa can be easily identified(linearly seperable ).Verginica and Versicolor have some overlap\n    3. we can find and \"if-else\" condition to build a simple model to classify the flower types.","7594dba4":"# *Importing important library that we will need*\n","513b4061":"End Conclution:\n\nBased on the plots we can understand that the four random variables are unique and their values define every Species directly. By performing this EDA we are able to conclude that without using any ML algorithm we can classify any flower based on their corresponding values except that we can understand where the central data points are lying, we can understand how the distribution is, what is the 25th,50th and 75th percentile values of each features, how much outlier is present and how much correlated the features are.","2e068bb8":">   **Exploratory Data Analysis on Iris Data **\n  \n  \n  ***Before starting EDA lets know about some Basics terminology***\n* What is EDA ?  \n    According to wiki, In stats EDA is  an approach to analyzing data sts to summarize their main characteristc ,often with visual methods.   \n    or in simple words                                                                                             It is a task of analyzing dat using simple tools from statistics, simple plotting tools , from linear  algebra and other technique before we go on modeling and do actual machine learning. It is exploaratory because we don't know anything about tha data and we are exploring about data .","eb68e46d":"### CDF (Cumulative Distribution Function)\n1. Need for Cumulative distribution function(cdf)\n2. how to construct cdf?\n3. how to read cdf?\n","9e56d45b":"## Observatons : \n1. Using SepalWidthCm and SepalLengthCm features ,we can distinguish Iris-setosa from other two.\n2. Seperating Iris-versicolor and Iris-Verginica is much harder as they have considerable overlap ","1310a4b7":"# VIOLIN Plot","a0922a21":"## Observation for Setosa using cdf(reading cdf):\n1.  Let the point be 1.6 in x-axis now  the coresponding value on  blue curve let say 0.82, so this means that there are 82% of setosa flower that have petal_length less than 1.6\n","62f36101":"OBSERVATION FOR CDF :\n*     if  petal length <2 :                                                                                               \n             then setosa (bcz all 100% are <=2 by seeing CDF)\n     (petal length =5 as threshold):\n*     if   petal length >2 and < 5 :{ this will 95%  accurate , by seeing the cdf plot for versicolor only 5% will be isclassified}\n             then Versicolor\n*     if petal length 2 and petal > 5:{ this will 10% times will be missclassified and  90% timecorrectly classified or accurate\n             then virginica\n             \n             \n# Such info cannot be understood from pdf , reading the data of cdf we can tell how accurate  how our simple if-else model is.","38a418ff":"### Loading tha Iris.csv dataset in pandas dataFrame and storing in a variable (df_iris).","a414bb16":"## Simple Plotting Tools","4f3770ac":"### Since we cant' do 4-D scatter Plot , So there is a hack of Visualizing Data of all data at once \n### One such hack is Pair-Plot"}}