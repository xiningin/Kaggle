{"cell_type":{"48cc5136":"code","89521974":"code","12d0cf50":"code","dc245b27":"code","8a1a0a78":"code","44a51f9b":"code","9a51e023":"code","996b0f96":"code","f7ac1bf9":"code","66e0130c":"code","78be5ab3":"code","94e49908":"code","ce9126d5":"code","56451908":"code","4fa9df29":"code","98b15b21":"code","f7986d58":"code","9b3a8ec3":"code","6d34ec9c":"code","fa6e38f9":"code","20f269b9":"code","6e1de0f6":"code","482fef27":"code","4cef215e":"code","8720e4b6":"code","0e0c7ab4":"code","16d803cd":"code","e1028f6f":"code","fb033f54":"code","62cb7490":"code","20eef0fb":"code","f6feb2fe":"code","2c49b6f0":"code","4f45b7a6":"code","a2d06dd4":"code","6dee4f9c":"code","e73d30f6":"code","e7bd7064":"code","a1264089":"code","7833947b":"code","24921b98":"code","c3ef1b09":"code","1b1e4bf1":"code","f0b86cf4":"markdown","dd7471f3":"markdown","0cfc77af":"markdown","91507899":"markdown","71f7b1ec":"markdown","66841ee8":"markdown","776be586":"markdown","db5cc5dc":"markdown","c27aaf36":"markdown","c6b1d4bc":"markdown","61d708f1":"markdown","888965a1":"markdown","8c2e0f45":"markdown","e7c6e18d":"markdown","4318a4af":"markdown","0d6fb43b":"markdown","7b71bbff":"markdown","3b79c0c2":"markdown","8c6d2863":"markdown","5bb2d734":"markdown","68ac70cd":"markdown"},"source":{"48cc5136":"import torch\nimport pandas as pd\nfrom tqdm.notebook import tqdm\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport pandas as pd\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfTransformer","89521974":"df_train=pd.read_csv(\"\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/train.csv\")\ndf_test=pd.read_csv(\"\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/test.csv\")\ndf_train.set_index('ID', inplace=True)","12d0cf50":"df_train.head()","dc245b27":"df_train[\"text\"]=df_train[\"TITLE\"]+df_train[\"ABSTRACT\"]\ndf_test[\"text\"]=df_test[\"TITLE\"]+df_test[\"ABSTRACT\"]\ndel df_train[\"TITLE\"]\ndel df_train[\"ABSTRACT\"]\n#del df_train[\"ID\"]\n#main_test_ids=df_test[\"ID\"]\nmain_test_title=df_test[\"TITLE\"]\nmain_test_abstract=df_test[\"ABSTRACT\"]\ndel df_test[\"TITLE\"]\ndel df_test[\"ABSTRACT\"]\n#del df_test[\"ID\"]\n\ndf_train.head()","8a1a0a78":"df_train[\"text\"][1]\ndf_train_classes=df_train.drop(\"text\",axis=1)\ndf_train_classes.head()","44a51f9b":"import seaborn as sns\nsns\ndf_train_classes.apply(pd.value_counts).transpose().plot(kind='bar',title='Data Points Per Class',figsize=[12,10])","9a51e023":"df_train_classes[(df_train_classes['Quantitative Biology']==1 ) & (df_train_classes['Quantitative Finance']==1)]","996b0f96":"df_train.rename(columns={\"Physics\": \"label\"})","f7ac1bf9":"possible_labels = df_train.Physics.unique()","66e0130c":"label_dict = {}\nfor index, possible_label in enumerate(possible_labels):\n    label_dict[possible_label] = index","78be5ab3":"df_train['label'] = df_train.Physics.replace(label_dict)","94e49908":"df_train.head()","ce9126d5":"from sklearn.model_selection import train_test_split","56451908":"X_train, X_val, y_train, y_val = train_test_split(df_train.index.values, \n                                                  df_train.label.values, \n                                                  test_size=0.15, \n                                                  random_state=17, \n                                                  stratify=df_train.label.values)","4fa9df29":"df_train['data_type'] = ['not_set']*df_train.shape[0]","98b15b21":"df_train.loc[X_train, 'data_type'] = 'train'\ndf_train.loc[X_val, 'data_type'] = 'val'","f7986d58":"from transformers import BertTokenizer\nfrom torch.utils.data import TensorDataset","9b3a8ec3":"tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', do_lower_case=True)","6d34ec9c":"encoded_data_train = tokenizer.batch_encode_plus(\n    df_train[df_train.data_type=='train'].text.values, \n    add_special_tokens=True, \n    return_attention_mask=True, \n    pad_to_max_length=True, \n    max_length=256, \n    return_tensors='pt'\n)\n\nencoded_data_val = tokenizer.batch_encode_plus(\n    df_train[df_train.data_type=='val'].text.values, \n    add_special_tokens=True, \n    return_attention_mask=True, \n    pad_to_max_length=True, \n    max_length=256, \n    return_tensors='pt'\n)\n\n\ninput_ids_train = encoded_data_train['input_ids']\nattention_masks_train = encoded_data_train['attention_mask']\nlabels_train = torch.tensor(df_train[df_train.data_type=='train'].label.values)\n\ninput_ids_val = encoded_data_val['input_ids']\nattention_masks_val = encoded_data_val['attention_mask']\nlabels_val = torch.tensor(df_train[df_train.data_type=='val'].label.values)","fa6e38f9":"dataset_train = TensorDataset(input_ids_train, attention_masks_train, labels_train)\ndataset_val = TensorDataset(input_ids_val, attention_masks_val, labels_val)","20f269b9":"len(dataset_train)","6e1de0f6":"len(dataset_val)","482fef27":"from transformers import BertForSequenceClassification","4cef215e":"model = BertForSequenceClassification.from_pretrained(\"bert-base-uncased\",\n                                                      num_labels=len(label_dict),\n                                                      output_attentions=False,\n                                                      output_hidden_states=False)\n\n","8720e4b6":"from torch.utils.data import DataLoader, RandomSampler, SequentialSampler","0e0c7ab4":"batch_size = 32\n\ndataloader_train = DataLoader(dataset_train, \n                              sampler=RandomSampler(dataset_train), \n                              batch_size=batch_size)\n\ndataloader_validation = DataLoader(dataset_val, \n                                   sampler=SequentialSampler(dataset_val), \n                                   batch_size=batch_size)","16d803cd":"from transformers import AdamW, get_linear_schedule_with_warmup","e1028f6f":"optimizer = AdamW(model.parameters(),\n                  lr=1e-5, \n                  eps=1e-8)","fb033f54":"epochs = 3\n\nscheduler = get_linear_schedule_with_warmup(optimizer, \n                                            num_warmup_steps=0,\n                                            num_training_steps=len(dataloader_train)*epochs)","62cb7490":"import numpy as np","20eef0fb":"from sklearn.metrics import f1_score","f6feb2fe":"def f1_score_func(preds, labels):\n    preds_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return f1_score(labels_flat, preds_flat, average='weighted')","2c49b6f0":"def accuracy_per_class(preds, labels):\n    label_dict_inverse = {v: k for k, v in label_dict.items()}\n    \n    preds_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n\n    for label in np.unique(labels_flat):\n        y_preds = preds_flat[labels_flat==label]\n        y_true = labels_flat[labels_flat==label]\n        print(f'Class: {label_dict_inverse[label]}')\n        print(f'Accuracy: {len(y_preds[y_preds==label])}\/{len(y_true)}\\n')","4f45b7a6":"import random\n\nseed_val = 17\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)","a2d06dd4":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel.to(device)\n\nprint(device)","6dee4f9c":"def evaluate(dataloader_val):\n\n    model.eval()\n    \n    loss_val_total = 0\n    predictions, true_vals = [], []\n    \n    for batch in dataloader_val:\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0],\n                  'attention_mask': batch[1],\n                  'labels':         batch[2],\n                 }\n\n        with torch.no_grad():        \n            outputs = model(**inputs)\n            \n        loss = outputs[0]\n        logits = outputs[1]\n        loss_val_total += loss.item()\n\n        logits = logits.detach().cpu().numpy()\n        label_ids = inputs['labels'].cpu().numpy()\n        predictions.append(logits)\n        true_vals.append(label_ids)\n    \n    loss_val_avg = loss_val_total\/len(dataloader_val) \n    \n    predictions = np.concatenate(predictions, axis=0)\n    true_vals = np.concatenate(true_vals, axis=0)\n            \n    return loss_val_avg, predictions, true_vals","e73d30f6":"for epoch in tqdm(range(1, epochs+1)):\n    \n    model.train()\n    \n    loss_train_total = 0\n\n    progress_bar = tqdm(dataloader_train, desc='Epoch {:1d}'.format(epoch), leave=False, disable=False)\n    for batch in progress_bar:\n\n        model.zero_grad()\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0],\n                  'attention_mask': batch[1],\n                  'labels':         batch[2],\n                 }       \n\n        outputs = model(**inputs)\n        \n        loss = outputs[0]\n        loss_train_total += loss.item()\n        loss.backward()\n\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        optimizer.step()\n        scheduler.step()\n        \n        progress_bar.set_postfix({'training_loss': '{:.3f}'.format(loss.item()\/len(batch))})\n         \n        \n    torch.save(model.state_dict(), f'finetuned_BERT_epoch_{epoch}.model')\n        \n    tqdm.write(f'\\nEpoch {epoch}')\n    \n    loss_train_avg = loss_train_total\/len(dataloader_train)            \n    tqdm.write(f'Training loss: {loss_train_avg}')\n    \n    val_loss, predictions, true_vals = evaluate(dataloader_validation)\n    val_f1 = f1_score_func(predictions, true_vals)\n    tqdm.write(f'Validation loss: {val_loss}')\n    tqdm.write(f'F1 Score (Weighted): {val_f1}')","e7bd7064":"model = BertForSequenceClassification.from_pretrained(\"bert-base-uncased\",\n                                                      num_labels=len(label_dict),\n                                                      output_attentions=False,\n                                                      output_hidden_states=False)\n\nmodel.to(device)","a1264089":"model.load_state_dict(torch.load('.\/finetuned_BERT_epoch_2.model', map_location=torch.device('cpu')))","7833947b":"_, predictions, true_vals = evaluate(dataloader_validation)","24921b98":"accuracy_per_class(predictions, true_vals)","c3ef1b09":"dir(model)","1b1e4bf1":"predictions","f0b86cf4":"Approach adapted from an older version of HuggingFace's `run_glue.py` script. Accessible [here](https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L128).","dd7471f3":"## Training\/Validation Split","0cfc77af":"<img src=\"Images\/BERT_diagrams.pdf\" width=\"1000\">","91507899":"**Task 1**: Introduction (this section)\n\n**Task 2**: Exploratory Data Analysis and Preprocessing\n\n**Task 3**: Training\/Validation Split\n\n**Task 4**: Loading Tokenizer and Encoding our Data\n\n**Task 5**: Setting up BERT Pretrained Model\n\n**Task 6**: Creating Data Loaders\n\n**Task 7**: Setting Up Optimizer and Scheduler\n\n**Task 8**: Defining our Performance Metrics\n\n**Task 9**: Creating our Training Loop","71f7b1ec":"### Project Outline","66841ee8":"### What is BERT\n\nBERT is a large-scale transformer-based Language Model that can be finetuned for a variety of tasks.\n\nFor more information, the original paper can be found [here](https:\/\/arxiv.org\/abs\/1810.04805). \n\n[HuggingFace documentation](https:\/\/huggingface.co\/transformers\/model_doc\/bert.html)\n\n[Bert documentation](https:\/\/characters.fandom.com\/wiki\/Bert_(Sesame_Street) ;)","776be586":"## Creating Data Loaders","db5cc5dc":"## Setting Up Optimiser and Scheduler","c27aaf36":"Checking for number of columns where Quantitative Biology and Quantitative Finance are 1. We got only 4 such data points","c6b1d4bc":"Accuracy metric approach originally used in accuracy function in [this tutorial](https:\/\/mccormickml.com\/2019\/07\/22\/BERT-fine-tuning\/#41-bertforsequenceclassification).","61d708f1":"## Exploratory Data Analysis and Preprocessing","888965a1":"## Creating our Training Loop","8c2e0f45":"- Intermediate-level knowledge of Python 3 (NumPy and Pandas preferably, but not required)\n- Exposure to PyTorch usage\n- Basic understanding of Deep Learning and Language Models (BERT specifically)","e7c6e18d":"## Setting up BERT Pretrained Model","4318a4af":"### Prerequisites","0d6fb43b":"**As you can see the class imballance is high for Quantitative Biology and Finance**","7b71bbff":"## Loading Tokenizer and Encoding our Data","3b79c0c2":"We will use the SMILE Twitter dataset.\n\n_Wang, Bo; Tsakalidis, Adam; Liakata, Maria; Zubiaga, Arkaitz; Procter, Rob; Jensen, Eric (2016): SMILE Twitter Emotion dataset. figshare. Dataset. https:\/\/doi.org\/10.6084\/m9.figshare.3187909.v2_","8c6d2863":"# Subject Mapping Using BERT\n## Multilable Classification Problem","5bb2d734":"## Introduction","68ac70cd":"## Defining our Performance Metrics"}}