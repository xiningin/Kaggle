{"cell_type":{"0049fc1a":"code","e1f01df5":"code","de8aab4a":"code","6073ed16":"code","21fb8824":"code","4ce19b2f":"code","354b66b1":"code","c2dbca22":"code","d0253e83":"code","e79fe90a":"code","2c263e1a":"code","980f4121":"code","02f7b2ae":"code","217e98e5":"code","5b3a1c18":"code","1958add2":"code","3fdb7872":"code","e618b1cb":"code","31c22d13":"code","3c125900":"code","5b14daa6":"code","180e95ec":"code","4e93dc2d":"code","8d4519a4":"code","ded26f63":"code","3fefec71":"code","f0262d09":"code","6ee98f2c":"code","f94fe73b":"code","b8aa6c0c":"code","1551c72c":"code","436d1152":"code","494ff3c4":"code","b3aeb90f":"code","f72f2310":"code","7092aeec":"code","3a02956e":"code","f5c31007":"code","e6f982b3":"code","fb53dde4":"code","4f864b4a":"code","72d22463":"code","0c6549ec":"code","717b4492":"code","90a61b12":"code","b31a2b09":"code","c630d869":"code","7446ad51":"code","0a0ab879":"code","3e93e00b":"code","b5933360":"code","aefc1921":"code","dc6c677b":"code","c1b354e9":"code","ebcd090f":"code","17cb483d":"code","da71f986":"code","ef0aad80":"code","ea292b29":"code","96f895cc":"code","993a8f1a":"code","ff7e7cae":"code","3a254446":"code","0ec3f449":"code","37699550":"code","24e3ad25":"code","671a0d9c":"code","d0561e0a":"code","b593ce23":"code","747239af":"code","31377df0":"code","1daaf2ba":"code","4716e715":"code","2e5194c6":"code","a13c064b":"code","c5ac8272":"code","cd1bf977":"code","cee809fd":"code","aaca863e":"code","3df0f38a":"code","d3fad7b4":"code","b8762eb1":"code","9fbcf11c":"code","662439e6":"code","90bd47a4":"code","b886715e":"code","63f37cec":"code","596eaf6d":"code","97f345d1":"code","16552e43":"code","ae615a17":"code","a4f55df7":"code","da12a546":"code","e0621d0f":"code","91c9de6b":"code","9707f7ce":"code","2af227b7":"code","2daf54fe":"code","4671bf44":"code","49aaa73e":"code","e973be1f":"code","50dffe63":"code","b351dd04":"code","5199e4f8":"code","d74d8d62":"code","c9cae0d8":"code","73d25c23":"code","253683df":"code","328b55aa":"code","fadb85c2":"code","8e850d70":"code","670e3dce":"code","b02f7257":"code","6bcd6744":"code","26acb1e2":"code","bdd07b27":"code","04e07312":"code","c02cb8a0":"code","16cb9869":"code","4949f270":"code","b467a14b":"code","88ce4fce":"code","39940394":"code","62ac9859":"code","f4bd6ab1":"code","35bd8e33":"code","96b811c6":"code","9e638c6a":"code","f94d2acc":"code","e67885b8":"code","b6971851":"code","ee4773c8":"code","8fbf2630":"code","533d71c5":"code","c2fa2f25":"code","37543e6b":"code","ed7bfc5d":"code","6022832a":"code","9facb9c9":"code","f24601af":"code","cd51f1da":"code","9900b8db":"code","00a86574":"code","4a51dd69":"code","5cc6dc6d":"code","6ca4a558":"code","04d1f0f2":"code","d26effcb":"code","a90ff5fc":"code","1ad01234":"code","ec64f1cf":"code","317199ff":"code","f528b2f4":"code","6471b431":"code","8258122c":"code","f3f69954":"code","07b8fe12":"code","ea8a82d5":"markdown","9b749c45":"markdown","5d4ebc2f":"markdown","cb926d4f":"markdown","b4416ebf":"markdown","56ff0353":"markdown","33227c80":"markdown","9fc6936d":"markdown","5faef298":"markdown","48531591":"markdown","3a2fa77c":"markdown","f30e3965":"markdown","cf6f928b":"markdown","58ee7e1c":"markdown","fbde3ab1":"markdown","8b6c3308":"markdown","77b3cc90":"markdown","41ca1269":"markdown","046d3827":"markdown","00ffe327":"markdown","286cb000":"markdown","23122c79":"markdown","8f01dc2a":"markdown","edd8617e":"markdown","20ea6d3f":"markdown","7c5b6025":"markdown","8d5177a3":"markdown","a2fea977":"markdown","abbb3f28":"markdown","54b537a5":"markdown","dcd9c64f":"markdown","a4251845":"markdown","91443c93":"markdown","d28db9c1":"markdown","022a45ae":"markdown","f196863e":"markdown","37a4eb3b":"markdown","1e36cb77":"markdown","04bfd79a":"markdown","071e5fef":"markdown","8dee5e1c":"markdown","c92bb333":"markdown","190076cc":"markdown","a456f729":"markdown","71a3205c":"markdown","d8750400":"markdown","545446e3":"markdown","1e5d24d1":"markdown","eb4ca97b":"markdown","6d1d740d":"markdown","02607452":"markdown","39c1e552":"markdown","def9d6c4":"markdown","931824b5":"markdown","3e0285df":"markdown","e15d862e":"markdown","1e1c9da8":"markdown","1d0e5284":"markdown","94f316ed":"markdown","71678c94":"markdown","7c996d4f":"markdown","cbac0bb4":"markdown","4b20425c":"markdown","638d7e4d":"markdown","1af27977":"markdown","3b248be6":"markdown","7be697a6":"markdown","2d5476f8":"markdown","4477533f":"markdown","1c12a818":"markdown","c303e691":"markdown","5b0b7db6":"markdown","e132378a":"markdown","5e80b493":"markdown","e950eb28":"markdown","cd2fe2d6":"markdown"},"source":{"0049fc1a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e1f01df5":"pip install researchpy","de8aab4a":"import numpy as np # lineer cebir i\u015flemleri\nimport pandas as pd # data i\u015fleme s\u00fcreci, CSV uzant\u0131l\u0131 dosya i\u015flemleri\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nfrom scipy import stats\nfrom scipy.stats import norm, skew # baz\u0131 istatistiksel hesaplamalar i\u00e7in\nimport cufflinks as cf\nplt.style.use('ggplot')\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge\nfrom sklearn.svm import LinearSVR\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nimport researchpy as rp\nfrom yellowbrick.features import Rank1D\nfrom sklearn.preprocessing import MinMaxScaler\nfrom scipy.special import boxcox1p\nfrom sklearn.preprocessing import LabelEncoder\nfrom yellowbrick.regressor import AlphaSelection\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nimport warnings\nwarnings.filterwarnings('ignore')\nwarnings.simplefilter('ignore')","6073ed16":"train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n","21fb8824":"train.describe()","4ce19b2f":"test.describe()","354b66b1":"#G\u00f6nderi haz\u0131rlan\u0131rken laz\u0131m olaca\u011f\u0131 i\u00e7in veri setlerindeki \u00f6rneklerin\n# id numaralar\u0131n\u0131 tutuyoruz\ntrain_ids=train['Id']\ntest_ids=test['Id']\n\n# Makine \u00f6\u011frenemsi modelleri i\u00e7in id numaras\u0131n\u0131n anlam\u0131 olmad\u0131\u011f\u0131 i\u00e7in\n# veri setinden \u00e7\u0131kart\u0131yoruz\ntrain.drop('Id',axis=1, inplace=True)\ntest.drop('Id',axis=1, inplace=True)","c2dbca22":"train","d0253e83":"test","e79fe90a":"train.head()","2c263e1a":"test.head()","980f4121":"print('E\u011fitim Veri Seti Sat\u0131r Say\u0131s\u0131', train.shape[0])\nprint('E\u011fitim Veri Seti S\u00fctun Say\u0131s\u0131:',train.shape[1])","02f7b2ae":"train.shape","217e98e5":"test.shape","5b3a1c18":"train.size","1958add2":"test.size","3fdb7872":"print('E\u011fitim Veri Seti S\u00fctunlar\u0131:\\n')\nprint(train.dtypes)","e618b1cb":"train.info()","31c22d13":"test.head()","3c125900":"print('Test Veri Seti Sat\u0131r Say\u0131s\u0131:', test.shape[0])\nprint('Test Veri Seti S\u00fctun Say\u0131s\u0131:',test.shape[1])","5b14daa6":"train['SalePrice'].describe()","180e95ec":"train.describe().T","4e93dc2d":"sns.displot(data=train, x=\"SalePrice\");","8d4519a4":"sns.distplot(train.SalePrice,fit=norm);","ded26f63":"sns.distplot(a=train['SalePrice'],hist_kws={'histtype':'step','align':'left','color':'red','lw':3},\n                                  kde_kws={'color':'g','shade':True})\nplt.show()\n","3fefec71":"sns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n Aritmetik Ortalama = {:.2f} and Standart Sapma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal da\u011f\u0131l\u0131m. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frekans')\nplt.title('Konut Sat\u0131\u015f Fiyat Da\u011f\u0131l\u0131m\u0131')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show() ","f0262d09":"train['SalePrice'] = np.log1p(train['SalePrice'])\n\n# normal da\u011f\u0131l\u0131m\u0131 kontrol edilmesi tabloland\u0131r\u0131lmas\u0131\n\nplt.subplots(figsize =(12, 9))\nsns.distplot(train['SalePrice'], fit = stats.norm)\n\n\n(mu, sigma) = stats.norm.fit(train['SalePrice'])\n\n#Da\u011f\u0131l\u0131m\u0131n g\u00f6rselle\u015ftirilmesi\nplt.legend(['Normal Da\u011f\u0131l\u0131m. ($\\mu=$ {:.2f} and $\\sigma = $ {:.2f} )' .format(mu, sigma)], loc = 'best')\nplt.ylabel('Log Ald\u0131ktan sonraki Frekans')\n\n#Olas\u0131l\u0131k durumunun g\u00f6rselle\u015ftirilmesi\nfig = plt.figure()\nstats.probplot(train['SalePrice'], plot = plt)\nplt.show()","6ee98f2c":"sns.histplot(np.log1p(train['SalePrice']))","f94fe73b":"train_numeric=train.select_dtypes(include=[\"float64\",\"int64\"])\ntrain_numeric.head()","b8aa6c0c":"train_numeric.describe().T","1551c72c":"rp.summary_cont(train[\"SalePrice\"])","436d1152":"rp.summary_cont(train[[\"YrSold\",\"MiscVal\"]])","494ff3c4":"train.corr().style.background_gradient(cmap='coolwarm').set_precision(4)","b3aeb90f":"corrstatistics = train.corr()\nf, ax = plt.subplots(figsize=(16,8))\nsns.heatmap(corrstatistics, cmap='coolwarm', vmax=0.9, square=True);","f72f2310":"#Verilerimizin i\u00e7erisinden sadece say\u0131sal verisetini ay\u0131ral\u0131m yukar\u0131daka g\u00f6rm\u00fc\u015ft\u00fck, 81 tane s\u00fctundan 38 tanesi say\u0131sal veri i\u00e7eriyordu\ntrain_corr = train.select_dtypes(include = [np.number])","7092aeec":"train_corr.shape","3a02956e":"print('Hedef de\u011fi\u015fken(SalePrice) ile en iyi ili\u015fkisi olan de\u011fi\u015fkeni bulal\u0131m')\ncorr = train.corr()\ncorr.sort_values(['SalePrice'], ascending = False, inplace = True)\n\ncorr.SalePrice","f5c31007":"#histogram ve scatter plot grafikleri\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train[cols], height = 2.5)\nplt.show();","e6f982b3":"# OverallQual de\u011fikeni SalePrice ile ileri seviyede ili\u015fkili(korelasyonu y\u00fcksek seviyede) oldu\u011fu tespit edilmi\u015ftir.\nsns.lmplot(x='OverallQual',y='SalePrice',data=train) ","fb53dde4":"# 1stFlrSF de\u011fikeni SalePrice ile ileri seviyede ili\u015fkili(korelasyonu y\u00fcksek seviyede) oldu\u011fu tespit edilmi\u015ftir.\nsns.lmplot(x='1stFlrSF',y='SalePrice',data=train)","4f864b4a":"plt.figure(figsize=(16,8))\nsns.boxplot(x='GarageCars',y='SalePrice',data=train)\nplt.show()","72d22463":"sns.lmplot(x='GarageArea',y='SalePrice',data=train)","0c6549ec":"plt.figure(figsize=(16,8))\nsns.barplot(x='FullBath',y = 'SalePrice',data=train)\nplt.show()","717b4492":"# Eksik g\u00f6zlemvar m\u0131?\ntrain.isnull().values.any()","90a61b12":"# Eksik g\u00f6zlem de\u011fi\u015fkenleri hangileri?\ntrain.columns[train.isnull().any()]","b31a2b09":"plt.figure(figsize =(16,8)) # \u00e7izim grafi\u011fine ait \u00e7er\u00e7eve belrleme kodu\nsns.heatmap(train.isnull()) # seaborn k\u00fct\u00fcphanesinden bulunan heatmap g\u00f6sel grafi\u011fi\nplt.show()","c630d869":"#missing(eksik-kay\u0131p) data(veri)\ntotal = train.isnull().sum().sort_values(ascending=False)\npercent = (train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Toplam', 'Y\u00fczde'])\nmissing_data.head(25)","7446ad51":"#Veri setindeki \u00f6zelliklerin eksik de\u011ferlerini say\u0131sal ve\n#g\u00f6rsel olarak verir.\ndef show_missing_values(function_data):\n#Veri setindeki eksik de\u011ferleri bulal\u0131m\n    number_of_sample=function_data.shape[0]\n    check_isnull=function_data.isnull().sum()\n    \n    check_isnull=check_isnull[check_isnull!=0].sort_values(ascending=False)\n\n    if check_isnull.shape[0]==0:\n        print(\"Veri setinde eksik bilgi yoktur\")\n        print(check_isnull)\n    else:\n        print(check_isnull)\n        f, ax = plt.subplots(figsize=(15, 6))\n        plt.xticks(rotation='90')\n        sns.barplot(x=check_isnull.index, y=check_isnull)\n        plt.title(\"Eksik veri i\u00e7eren \u00f6zellilere ait eksik veri say\u0131s\u0131\")","0a0ab879":"#train veri seti i\u00e7in eksik bilgiler g\u00f6sterilsin\nshow_missing_values(train)","3e93e00b":"print(\"Ayk\u0131r\u0131 de\u011ferler \u00e7\u0131kar\u0131lmadan \u00f6nce train.shape:\",train.shape)","b5933360":"train = train.drop(train[(train['GrLivArea']>3200) & (train['SalePrice']<300000)].index)","aefc1921":"print(\"Ayk\u0131r\u0131 de\u011ferler \u00e7\u0131kar\u0131ld\u0131ktan sonra train.shape:\",train.shape)","dc6c677b":"#histogram ve scatter plot grafikleri(Y\u00fcksek Korelasyonlu-Feature Enginnering Model De\u011fi\u015fkenler \u0130\u00e7in)\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train[cols], height = 2.5)\nplt.show();","c1b354e9":"sns.lmplot(x='TotalBsmtSF',y='SalePrice',data=train)","ebcd090f":"sns.lmplot(x='1stFlrSF',y='SalePrice',data=train)","17cb483d":"corr = train.corr()","da71f986":"corr[corr['SalePrice']>0.3].index","ef0aad80":"train = train[['LotFrontage', 'OverallQual', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea',\n       'BsmtFinSF1', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'GrLivArea',\n       'FullBath', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars',\n       'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'SalePrice']]\ntest=test[['LotFrontage', 'OverallQual', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea',\n       'BsmtFinSF1', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'GrLivArea',\n       'FullBath', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars',\n       'GarageArea', 'WoodDeckSF', 'OpenPorchSF']]","ea292b29":"total = train.isnull().sum().sort_values(ascending=False)\npercent = (train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(25)","96f895cc":"#Eksik verilerin fazla oldu\u011fu de\u011fi\u015fkenlerin model d\u0131\u015f\u0131na al\u0131nmas\u0131 i\u015flemi\ntrain = train.drop((missing_data[missing_data['Total'] > 81]).index,1)","993a8f1a":"train.isnull().sum().sort_values(ascending=False).head(20)","ff7e7cae":"#Test veri seti eksik veri analizi\ntotal_test = test.isnull().sum().sort_values(ascending=False)\npercent_test = (test.isnull().sum()\/test.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total_test, percent_test], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(25)","3a254446":"#Eksik verilerin fazla oldu\u011fu de\u011fi\u015fkenlerin model d\u0131\u015f\u0131na al\u0131nmas\u0131 i\u015flemi\ntest = test.drop((missing_data[missing_data['Total'] > 78]).index,1)","0ec3f449":"test.isnull().sum().sort_values(ascending=False).head(20)","37699550":"categorical_feature_mask = train.dtypes==object\ncategorical_cols = train.columns[categorical_feature_mask].tolist()","24e3ad25":"categorical_cols","671a0d9c":"categorical_feature_mask_test = test.dtypes==object\ncategorical_cols_test = test.columns[categorical_feature_mask_test].tolist()","d0561e0a":"train.head()","b593ce23":"test.head()","747239af":"train['GarageYrBlt'] = train['GarageYrBlt'].fillna(train['GarageYrBlt'].mean())\ntrain['MasVnrArea'] = train['MasVnrArea'].fillna(train['MasVnrArea'].mean())","31377df0":"#saleprice correlation matrix\nk = 15 #number of variables for heatmap\nplt.figure(figsize=(16,8))\ncorrmat = train.corr()\n# picking the top 15 correlated features\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","1daaf2ba":"train = train[cols]","4716e715":"cols","2e5194c6":"test=test[cols.drop('SalePrice')]","a13c064b":"test.head()","c5ac8272":"test['GarageYrBlt'] = test['GarageYrBlt'].fillna(test['GarageYrBlt'].mean())\ntest['MasVnrArea'] = test['MasVnrArea'].fillna(test['MasVnrArea'].mean())\ntest['GarageCars'] = test['GarageCars'].fillna(test['GarageCars'].mean())\ntest['GarageArea'] = test['GarageArea'].fillna(test['GarageArea'].mean())\ntest['BsmtFinSF1'] = test['BsmtFinSF1'].fillna(test['BsmtFinSF1'].mean())\ntest['TotalBsmtSF'] = test['TotalBsmtSF'].fillna(test['TotalBsmtSF'].mean())","cd1bf977":"X_train, X_test, y_train, y_test = train_test_split(train.drop('SalePrice', axis=1), train['SalePrice'], test_size=0.3, random_state=101)","cee809fd":"# Veriyi \u00f6l\u00e7eklendirme i\u015flemi\/fitting\/scale process\n\ny_train= y_train.values.reshape(-1,1)\ny_test= y_test.values.reshape(-1,1)\n\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nsc_y = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.fit_transform(X_test)\ny_train = sc_X.fit_transform(y_train)\ny_test = sc_y.fit_transform(y_test)","aaca863e":"X_train","3df0f38a":"lm = LinearRegression()","d3fad7b4":"lm.fit(X_train,y_train)\nprint(lm)","b8762eb1":"# print the intercept\nprint(lm.intercept_)","9fbcf11c":"print(lm.coef_)","662439e6":"lineer_predictions = lm.predict(X_test)\nlineer_predictions= lineer_predictions.reshape(-1,1)","90bd47a4":"plt.figure(figsize=(15,8))\nplt.scatter(y_test,lineer_predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\nplt.show()","b886715e":"plt.figure(figsize=(16,8))\nplt.plot(y_test,label ='Test')\nplt.plot(lineer_predictions, label = 'predict')\nplt.show()","63f37cec":"print('MAE:', metrics.mean_absolute_error(y_test, lineer_predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, lineer_predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, lineer_predictions)))\nlm_RMSE=np.sqrt(metrics.mean_squared_error(y_test, lineer_predictions))","596eaf6d":"lm_R2score=r2_score(y_test, lineer_predictions)\nlm_R2score","97f345d1":"dtreg = DecisionTreeRegressor(random_state = 100)\ndtreg.fit(X_train, y_train)","16552e43":"dtr_pred = dtreg.predict(X_test)\ndtr_pred= dtr_pred.reshape(-1,1)","ae615a17":"print('MAE:', metrics.mean_absolute_error(y_test, dtr_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, dtr_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, dtr_pred)))\ndtr_RMSE=np.sqrt(metrics.mean_squared_error(y_test, dtr_pred))","a4f55df7":"dtr_R2score=r2_score(y_test, dtr_pred)\ndtr_R2score","da12a546":"plt.figure(figsize=(15,8))\nplt.scatter(y_test,dtr_pred,c='green')\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\nplt.show()","e0621d0f":"lsvr = LinearSVR(verbose=0, dual=True)\nlsvr.fit(X_train, y_train)","91c9de6b":"lsvr_pred = lsvr.predict(X_test)\nlsvr_pred= lsvr_pred.reshape(-1,1)","9707f7ce":"print('MAE:', metrics.mean_absolute_error(y_test, lsvr_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, lsvr_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, lsvr_pred)))\nlsvr_RMSE=np.sqrt(metrics.mean_squared_error(y_test, lsvr_pred))","2af227b7":"lsvr_R2score=r2_score(y_test, lsvr_pred)\nlsvr_R2score","2daf54fe":"plt.figure(figsize=(15,8))\nplt.scatter(y_test,lsvr_pred, c='red')\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\nplt.show()","4671bf44":"ridgereg = Ridge(alpha=0.05, normalize=True)\nridgereg.fit(X_train, y_train)","49aaa73e":"ridge_pred = ridgereg.predict(X_test)\nridge_pred= ridge_pred.reshape(-1,1)","e973be1f":"print('MAE:', metrics.mean_absolute_error(y_test, ridge_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, ridge_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, ridge_pred)))\nridge_RMSE=np.sqrt(metrics.mean_squared_error(y_test, ridge_pred))","50dffe63":"ridge_R2score=r2_score(y_test, ridge_pred)\nridge_R2score","b351dd04":"plt.figure(figsize=(15,8))\nplt.scatter(y_test,ridge_pred, c='blue')\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\nplt.show()","5199e4f8":"lassocv = LassoCV(alphas = None, cv = 10, max_iter = 100000, normalize = True)\nlassocv.fit(X_train, y_train)","d74d8d62":"lasso_pred = lassocv.predict(X_test)\nlasso_pred= lasso_pred.reshape(-1,1)","c9cae0d8":"print('MAE:', metrics.mean_absolute_error(y_test, lasso_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, lasso_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, lasso_pred)))\nlasso_RMSE=np.sqrt(metrics.mean_squared_error(y_test, lasso_pred))","73d25c23":"lasso_R2score=r2_score(y_test, lasso_pred)\nlasso_R2score","253683df":"Label_list = ['Lineer Regression  RMSE','Decsion Tree Regression RMSE','Linear SVR RMSE','Ridge Regression RMSE','Lasso Regression RMSE']\nData_List = [0.4046049305695855,0.57385849944418, 0.40778688122403417,0.4034581926650388,0.4049282979544468]\nModel_karsilastirma_RMSE= pd.Series(Data_List,Label_list)\nModel_karsilastirma_RMSE","328b55aa":"print('Lineer R2 Score De\u011feri: ',lm_R2score)\nprint('Decision Tree R2 Score De\u011feri: ',dtr_R2score)\nprint('Linear SVR R2 Score De\u011feri: ',lsvr_R2score)\nprint('Ridge R2 Score De\u011feri: ',ridge_R2score)\nprint('Lasso R2 Score De\u011feri: ',lasso_R2score)","fadb85c2":"a = pd.DataFrame(test_ids, columns=['Id'])","8e850d70":"test = sc_X.fit_transform(test)","670e3dce":"test.shape","b02f7257":"test_prediction_lineer=lm.predict(test)\ntest_prediction_lineer= test_prediction_lineer.reshape(-1,1)","6bcd6744":"test_prediction_lineer","26acb1e2":"test_prediction_lineer =sc_y.inverse_transform(test_prediction_lineer)","bdd07b27":"test_prediction_lineer= pd.DataFrame(test_prediction_lineer, columns=['SalePrice'])","04e07312":"test_prediction_lineer = pd.DataFrame(np.expm1(test_prediction_lineer))","c02cb8a0":"test_prediction_lineer.head()","16cb9869":"sonuc = pd.concat([a,test_prediction_lineer], axis=1)","4949f270":"sonuc.head()","b467a14b":"sonuc.to_csv('veriseti_ln.csv',index=False)","88ce4fce":"test_prediction_dtr=dtreg.predict(test)\ntest_prediction_dtr= test_prediction_dtr.reshape(-1,1)","39940394":"test_prediction_dtr","62ac9859":"test_prediction_dtr =sc_y.inverse_transform(test_prediction_dtr)","f4bd6ab1":"test_prediction_dtr= pd.DataFrame(test_prediction_dtr, columns=['SalePrice'])","35bd8e33":"test_prediction_dtr = pd.DataFrame(np.expm1(test_prediction_dtr))","96b811c6":"test_prediction_dtr.head()","9e638c6a":"sonuc2 = pd.concat([a,test_prediction_dtr], axis=1)","f94d2acc":"sonuc2.head()","e67885b8":"sonuc2.to_csv('veriseti_dtr.csv',index=False)","b6971851":"test_prediction_ridge=ridgereg.predict(test)\ntest_prediction_ridge= test_prediction_ridge.reshape(-1,1)","ee4773c8":"test_prediction_ridge","8fbf2630":"test_prediction_ridge =sc_y.inverse_transform(test_prediction_ridge)","533d71c5":"test_prediction_ridge= pd.DataFrame(test_prediction_ridge, columns=['SalePrice'])","c2fa2f25":"test_prediction_ridge= pd.DataFrame(np.expm1(test_prediction_ridge))","37543e6b":"test_prediction_ridge.head()","ed7bfc5d":"sonuc3 = pd.concat([a,test_prediction_ridge], axis=1)","6022832a":"sonuc3.to_csv('veriseti_ridge.csv',index=False)","9facb9c9":"test_prediction_lsvr=lsvr.predict(test)\ntest_prediction_lsvr= test_prediction_lsvr.reshape(-1,1)","f24601af":"test_prediction_lsvr","cd51f1da":"test_prediction_lsvr =sc_y.inverse_transform(test_prediction_lsvr)","9900b8db":"test_prediction_lsvr= pd.DataFrame(test_prediction_lsvr, columns=['SalePrice'])","00a86574":"test_prediction_lsvr= pd.DataFrame(np.expm1(test_prediction_lsvr))","4a51dd69":"test_prediction_lsvr.head()","5cc6dc6d":"sonuc4 = pd.concat([a,test_prediction_lsvr], axis=1)","6ca4a558":"sonuc4.head()","04d1f0f2":"sonuc4.to_csv('veriseti_lsvr.csv',index=False)","d26effcb":"test_prediction_lasso=lassocv.predict(test)\ntest_prediction_lasso= test_prediction_lasso.reshape(-1,1)","a90ff5fc":"test_prediction_lasso","1ad01234":"test_prediction_lasso =sc_y.inverse_transform(test_prediction_lasso)","ec64f1cf":"test_prediction_lasso= pd.DataFrame(test_prediction_lasso, columns=['SalePrice'])","317199ff":"test_prediction_lasso= pd.DataFrame(np.expm1(test_prediction_lasso))","f528b2f4":"test_prediction_lasso.head()","6471b431":"sonuc5 = pd.concat([a,test_prediction_lasso], axis=1)","8258122c":"sonuc5.head()","f3f69954":"sonuc5.to_csv('veriseti_lasso.csv',index=False)","07b8fe12":"test_prediction_lineer = pd.DataFrame(np.expm1(test_prediction_lineer))","ea8a82d5":"### Regresyon De\u011ferlendirme Metrikleri","9b749c45":"## Model Kar\u015f\u0131la\u015ft\u0131rma","5d4ebc2f":"### Fonksiyon de\u011feri olan show_missing_values() ile Verinin Kay\u0131p De\u011fer Analizi","cb926d4f":"## Lasso Regresyon","b4416ebf":"Model i\u00e7in \u00f6zellik m\u00fchendisli\u011fi s\u00fcrecini devam ettrilmi\u015ftir. Bunun i\u00e7in korelasyon matrisini kullanaca\u011f\u0131z ve en \u00e7ok sat\u0131\u015f fiyat\u0131 ile ili\u015fkili olan\u0131 se\u00e7ece\u011fiz.","56ff0353":"## E\u011fitim Verisinin Sat\u0131r ve S\u00fctun Aral\u0131k Say\u0131lar\u0131n\u0131n Analizi","33227c80":"Yap\u0131lan g\u00f6zlem sonucunda \u00fczere test veri seti 1459 g\u00f6zlem (sat\u0131r) ve 79 \u00f6zellik (s\u00fctun)'dan olu\u015ftu\u011fu tespit edilmi\u015ftir.","9fc6936d":"### Eksik Verinin Olma Durumunun Sorgulanmas\u0131","5faef298":"## Verinin Sat\u0131r ve S\u00fctun Veri Tiplerinin Analizi","48531591":"### Model \u00dczerinden Tahminleme \u0130\u015flemi","3a2fa77c":"## Veri G\u00f6nderi ve \u0130\u015flem Amac\u0131yla Ayr\u0131\u015ft\u0131r\u0131lmas\u0131 \u0130\u015flemi (ID veri primary key olmas\u0131 sebebiyle analizlere dahil edilmemi\u015ftir)","f30e3965":"## Decision Tree Regresyon-Karar A\u011fac\u0131 Regresyon Uygulamas\u0131","cf6f928b":"## E\u011fitim Seti Betimleyici \u0130statistikleri","58ee7e1c":"### Numeric Veri Tipine Sahip De\u011fi\u015fkenlerin Tespiti","fbde3ab1":"## Ayk\u0131r\u0131 De\u011ferlerin \u00c7\u0131kart\u0131lmas\u0131","8b6c3308":"### R Square De\u011ferlerini Model Bazl\u0131 Kar\u015f\u0131la\u015ft\u0131rma \u0130\u015flemi","77b3cc90":"## Numeric Veri Tipine Sahip De\u011fi\u015fkenlerin Betimleyici \u0130statistikleri","41ca1269":"#### Kay\u0131p Veri Analizi","046d3827":"## Linear Support Vector Machine Regresyon (Linear SVR)","00ffe327":"Yukar\u0131daki \u00e7\u0131kt\u0131dan anla\u011f\u0131ld\u0131\u011f\u0131 kadar\u0131 ile, e\u011fitim veri setimizde ; 3  noktal\u0131(float) veri tipinden, 35 say\u0131sal(int) veri tipinden, 43  nesne(object) veri tipinden olmak \u00fczere toplamda 81 adet 3 veri t\u00fcrl\u00fc bir veri seti mevcuttur.","286cb000":"## E\u011fitim Verisi Konut Sat\u0131\u015f Fiyatlar\u0131 Da\u011f\u0131l\u0131m \u0130nceleme","23122c79":"### Linear Support Vector Machine Regresyon (Linear SVR) Veri Seti Model \u00c7\u0131kt\u0131 Uygulamas\u0131","8f01dc2a":"## T\u00fcm Test Verisi ( ID'si silinmi\u015f)","edd8617e":"## E\u011fitim Veri Seti Dahilinde Sat\u0131\u015f Fiyat\u0131 Betimleyici \u0130statistikleri","20ea6d3f":"## Logoritmik D\u00f6n\u00fc\u015f\u00fcm ile Verinin Normalle\u015ftirilmesi","7c5b6025":"### E\u011fitim Veri Setinde Eksik Verinin Hangi De\u011fi\u015fkenlerde Oldu\u011funun Belirlenmesi (n), (%)","8d5177a3":"## Verilerin \u0130\u00e7e Atar\u0131lmas\u0131","a2fea977":"Mean Absolute Error (MAE) :Hatalar\u0131n mutlak de\u011ferinin ortalamas\u0131d\u0131r.\n\n1\ud835\udc5b\u2211\ud835\udc56=1\ud835\udc5b|\ud835\udc66\ud835\udc56\u2212\ud835\udc66\u0302 \ud835\udc56|\n\nMean Squared Error (MSE) : Karesel hatalar\u0131n ortalamas\u0131d\u0131r.\n\n1\ud835\udc5b\u2211\ud835\udc56=1\ud835\udc5b(\ud835\udc66\ud835\udc56\u2212\ud835\udc66\u0302 \ud835\udc56)2\n\nRoot Mean Squared Error (RMSE) :karesel hatalar\u0131n ortalamas\u0131n\u0131n karek\u00f6k\u00fcd\u00fcr.\n\n1\ud835\udc5b\u2211\ud835\udc56=1\ud835\udc5b(\ud835\udc66\ud835\udc56\u2212\ud835\udc66\u0302 \ud835\udc56)\n\nMetriklerin Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131:\n\nMAE, anla\u015f\u0131lmas\u0131 en kolay olan y\u00f6ntemdir, \u00e7\u00fcnk\u00fc bu ortalama bir hatad\u0131r. MSE, MAE'den daha pop\u00fclerdir \u00e7\u00fcnk\u00fc MSE, ger\u00e7ek d\u00fcnyada yararl\u0131 olma e\u011filiminde olan daha b\u00fcy\u00fck hatalar\u0131 minimize eder. RMSE, MSE'den daha pop\u00fclerdir, \u00e7\u00fcnk\u00fc RMSE \"y\" birimlerinde yorumlanabilir. Bunlar\u0131n hepsi kay\u0131p fonksiyonlar\u0131d\u0131r, \u00e7\u00fcnk\u00fc onlar\u0131 en aza indirme amac\u0131 makine \u00f6\u011frenmesinin en elzem ba\u015fl\u0131\u011f\u0131d\u0131r.Modelimizin performans\u0131n\u0131 \u00f6l\u00e7mek i\u00e7in Root Mean Squared Error (RMSE) kullanaca\u011f\u0131z.","abbb3f28":"### RMSE De\u011ferlerini Model Bazl\u0131 Kar\u015f\u0131la\u015ft\u0131rma \u0130\u015flemi","54b537a5":"## T\u00fcm E\u011fitim Verisi (ID'si Silinmi\u015f)","dcd9c64f":"SalePrice de\u011fi\u015fkeni ile r= 0,30 korelasyon derecesi ve daha \u00fcst seviyede bulunan de\u011fi\u015fkenler \u00f6zellk m\u00fchendisli\u011fi y\u00f6ntemi ile modelleme tasarlanm\u0131\u015ft\u0131r.","a4251845":"Verilerin istatistiksel da\u011f\u0131l\u0131m\u0131 logoritmik d\u00f6n\u00fc\u015f\u00fcm ile normal da\u011f\u0131l\u0131m formuna d\u00f6n\u00fc\u015ft\u00fcr\u00fclm\u00fc\u015ft\u00fcr.","91443c93":"Model olu\u015fturma a\u015famas\u0131nda \u00f6zellik m\u00fchendisli\u011fi a\u015fama metotlar\u0131n\u0131 kulllanarak model olu\u015fturma i\u015flemi devam etmi\u015ftir.Tablodanda aanla\u015f\u0131laca\u011f\u0131 \u00fczre gibi e\u011fitm veri setinde baz\u0131 parametrelerin \u00e7ok fazla eksik de\u011feri tespit edilmi\u015ftir.Bu nedenle modelimizin yal\u0131nl\u0131\u011f\u0131 amac\u0131yla bu de\u011ferler modelden \u00e7\u0131kar\u0131lm\u0131\u015ft\u0131r. De\u011fi\u015fkenlerin 81 den fazla eksik de\u011feri olanlar\u0131 modelimiz d\u0131\u015f\u0131na \u00e7\u0131kar\u0131lm\u0131\u015ft\u0131r.","d28db9c1":"### Eksik Verilerin Grafi\u011fi","022a45ae":"#### Kategorik Verilerin D\u00f6n\u00fc\u015ft\u00fcr\u00fclmesi \u0130\u015flemi","f196863e":"## Lineer Regresyon","37a4eb3b":"## E\u011fitim Veri Seti Verileri Aras\u0131 Korelasyon Analizi Sonu\u00e7lar\u0131-Heatmap(Is\u0131haritaland\u0131rma) Tablosu","1e36cb77":"Yap\u0131lan g\u00f6zlem sonucunda \u00fczere e\u011fitim veri seti 1460 g\u00f6zlem (sat\u0131r) ve 80 \u00f6zellik (s\u00fctun)'dan olu\u015ftu\u011fu tespit edilmi\u015ftir.","04bfd79a":"### Modelin De\u011ferlendirilmesi","071e5fef":"#### SalePrice ve TotalBsmtSF aras\u0131ndaki korelasonu g\u00f6steren i\u015flemler sonras\u0131 nihai lmplot Grafi\u011fi","8dee5e1c":"## Test Veri Seti Kullan\u0131larak Modellerin Tahmin De\u011ferlerinin Uygulanmas\u0131 ve Veri Setlerinin Olu\u015fturulmas\u0131 A\u015famas\u0131 ","c92bb333":"Korelasyon analizi ile en ili\u015fkili parametreleri istatistiksel tablolarda ve grafiklerde say\u0131sal de\u011ferler ile tespit ettik. Bu de\u011ferleri makine \u00f6\u011frenmesi modelimiz i\u00e7in \u00f6zellikler olarak se\u00e7ilmi\u015ftir.","190076cc":"## Test Verisi G\u00f6zlem Formu","a456f729":"## Ridge Regresyon","71a3205c":"En y\u00fcksek tahmin g\u00fcc\u00fcne %83,72 ile Ridge Regresyon Modelinin sahip oldu\u011fu tespit edilmi\u015ftir.S\u0131ras\u0131yla Lineer Regresyon Modeli,Lasso Regresyon Modeli,Linear SVR Modeli ve en son olarak Decision Tree Regresyon Modelinin tahmin g\u00fcc\u00fc s\u0131ralamas\u0131 tespit edilmi\u015ftir.","d8750400":"## E\u011fitim Verisi Konut Sat\u0131\u015f Fiyatlar\u0131 Normallik Da\u011f\u0131l\u0131m(Normality) \u0130ncelemeleri","545446e3":"#### Test Veri Setinin ID birle\u015ftirme ve Model Uyum E\u015fle\u015ftirme \u0130\u015flemi","1e5d24d1":"## Konsol \u00dczerinden \"\/kaggle\/input\/house-prices-advanced-regression-techniques\" Yar\u0131\u015fma Verilerine Ula\u015fma \u0130\u015flemi","eb4ca97b":"E\u011fitim Veri Seti de\u011fi\u015fkenlerine ait eksik de\u011ferler de\u011fi\u015fkene ait ortalama de\u011ferleri ile doldurulmu\u015ftur.","6d1d740d":"## \u00d6zellik M\u00fchendisli\u011fi (Feature ENginnering)","02607452":"### Lineer Regresyon Veri Seti Model \u00c7\u0131kt\u0131 Uygulamas\u0131","39c1e552":"### Lasso Regresyon Veri Seti Model \u00c7\u0131kt\u0131 Uygulamas\u0131","def9d6c4":"GrLivArea', TotalBsmtSF' ve '1stFlrSF', grafiklerinde(korelasyon grafiklerinde) g\u00f6r\u00fcld\u00fc\u011f\u00fc gibi ayk\u0131r\u0131 de\u011ferler vard\u0131r. Bu ayk\u0131r\u0131 de\u011ferleri ay\u0131klayal\u0131m. Toplamda iki ayk\u0131r\u0131 de\u011fer vard\u0131r. 1460 olan \u00f6rnek say\u0131s\u0131 ayk\u0131r\u0131 de\u011ferler \u00e7\u0131kart\u0131ld\u0131ktan sonra 1447 olmu\u015ftur.","931824b5":"#### SalePrice ile GarageArea de\u011fi\u015fkenlerinin lmplot Korelasyon Grafik Analizi","3e0285df":"#### SalePrice ile GarageCars de\u011fi\u015fkenlerinin Boxplot Grafik Analizi","e15d862e":"## Veri Seti Yap\u0131sal Bilgileri","1e1c9da8":"### Ridge Regresyon Veri Seti Model \u00c7\u0131kt\u0131 Uygulamas\u0131","1d0e5284":"### Verinin \u00d6l\u00e7eklendirilmesi","94f316ed":"## E\u011fitim Veri Setinde Missing Value (Eksik G\u00f6zlem) Tespiti\n","71678c94":"### Verilerin e\u011fitim ve test verileri olmak \u00fczere ikiye ayr\u0131lma i\u015flemi (%70 e\u011fitim, % 30 test)","7c996d4f":"### Metrik Analizi","cbac0bb4":"### Modeli Olu\u015fturma ve E\u011fitme","4b20425c":"## K\u00fct\u00fcphanelerin \u0130ndirilmesi \u0130\u015flemi","638d7e4d":"Model olu\u015fturma a\u015famas\u0131nda \u00f6zellik m\u00fchendisli\u011fi a\u015fama metotlar\u0131n\u0131 kulllanarak model olu\u015fturma i\u015flemi devam etmi\u015ftir.Tablodanda aanla\u015f\u0131laca\u011f\u0131 \u00fczre gibi baz\u0131 parametrelerin \u00e7ok fazla eksik de\u011feri tespit edilmi\u015ftir.Bu nedenle modelimizin yal\u0131nl\u0131\u011f\u0131 amac\u0131yla test veri setinde bu de\u011ferler modelden \u00e7\u0131kar\u0131lm\u0131\u015ft\u0131r. De\u011fi\u015fkenlerin 78 den fazla eksik de\u011feri olanlar\u0131 modelimiz d\u0131\u015f\u0131na \u00e7\u0131kar\u0131lm\u0131\u015ft\u0131r","1af27977":"#### FullBath ile SalePrice de\u011fi\u015fkenlerinin Barplot Grafik Analizi","3b248be6":"## Test Verisinin Sat\u0131r ve S\u00fctun Aral\u0131k Say\u0131lar\u0131n\u0131n Analizi\n","7be697a6":"### Eksik Verilerin \u0130\u015flenmesi","2d5476f8":"## E\u011fitim Verisi G\u00f6zlem Formu","4477533f":"#### SalePrice ve 1stFlrSF aras\u0131ndaki korelasonu g\u00f6steren i\u015flemler sonras\u0131 nihai lmplot Grafi\u011fi","1c12a818":"## SalePrice ile Korelasyonlar\u0131 En Y\u00fcksek Seviyede Olan De\u011fi\u015fkenlerin Histogram ve Scatter Plot Grafikleriyle \u0130ncelenmesi","c303e691":"## E\u011fitim ve Test Verilerine ait Describe \u0130statistik De\u011ferleri (Data Frame Modunda)","5b0b7db6":"Tablo de\u011feri incelendi\u011finde baz\u0131 parametrelerin \u00e7ok fazla eksik de\u011feri var. Bu de\u011fi\u015fkenler verilerden \u00e7\u0131kar\u0131lm\u0131\u015ft\u0131r.Toplam de\u011feri 81'den b\u00fcy\u00fck olan parametreleri b\u0131rak\u0131lm\u0131\u015ft\u0131r.","e132378a":"### Decision Tree Regresyon(Karar A\u011fac\u0131 Regresyon) Veri Seti Model \u00c7\u0131kt\u0131 Uygulamas\u0131","5e80b493":"Test veri Seti de\u011fi\u015fkenlerine ait eksik de\u011ferler de\u011fi\u015fkene ait ortalama de\u011ferleri ile doldurulmu\u015ftur.","e950eb28":"## Test Verisi G\u00f6zlem Formu","cd2fe2d6":"## Normalle\u015ftirilmi\u015f Verinin \u0130ncelenmesi"}}