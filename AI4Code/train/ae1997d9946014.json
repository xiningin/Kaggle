{"cell_type":{"e04a2150":"code","a37a3c9e":"code","124696cc":"code","ae2b6e1a":"code","0d0f58a6":"code","44fa3a33":"code","996e3945":"code","c082f765":"code","cc09b17d":"code","8f663422":"code","b565bde8":"code","561b16fe":"code","dae6944c":"code","ed36345d":"code","4e2664dc":"code","ea5bca38":"code","16b678fc":"code","e50f8ee8":"code","6dfae63e":"code","ab66c12a":"code","77030a67":"markdown","0a27c0d9":"markdown","431b7e78":"markdown","a364a900":"markdown","23bb45d4":"markdown"},"source":{"e04a2150":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a37a3c9e":"df = pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/train.csv\").astype(str)\ntest = pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/test.csv\").astype(str)\nsubmission = pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv\").astype(str)\n","124696cc":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd\nimport re\nimport os\nimport spacy\n\n#https:\/\/pypi.org\/project\/rake-nltk\/\n!pip install rake_nltk\n\n#import rake_nltk\nfrom rake_nltk import Metric, Rake\nr = Rake()\n\n#https:\/\/github.com\/vi3k6i5\/flashtext\nfrom flashtext import KeywordProcessor\n\n#TextRank\n#https:\/\/towardsdatascience.com\/textrank-for-keyword-extraction-by-python-c0bae21bcec0\n!pip install pytextrank\nimport pytextrank\n\n#Spacy\nimport spacy\nnlp = spacy.load('en_core_web_sm')\n\n\n#Bar\nfrom tqdm import tqdm, tqdm_pandas\ntqdm(tqdm())\nimport matplotlib.pyplot as plt\n","ae2b6e1a":"### Own Stop words\nown_stop_word = ['i','we','are','and']\n### Spacy Lemma \ndef spacy_lemma_text(text):\n    doc = nlp(text)\n    tokens = [tok.lemma_.lower().strip() for tok in doc if tok.lemma_ != '-PRON-']\n    tokens = [tok for tok in tokens if tok not in own_stop_word ]\n    tokens = ' '.join(tokens)\n    return tokens\n\n### Remove URL\ndef remove_URL(text):\n    url = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url.sub(r'',text)","0d0f58a6":"df['text_clean'] = df['text'].apply(remove_URL)\ndf['text_clean'] = df['text_clean'].apply(spacy_lemma_text)\nprint(\"Train Cleaning - Done\")\ntest['text_clean'] = test['text'].apply(remove_URL)\ntest['text_clean'] = test['text_clean'].apply(spacy_lemma_text)\nprint(\"Test Cleaning - Done\")\n","44fa3a33":"test['sentiment'].value_counts()","996e3945":"from IPython.core.display import display, HTML\nimport plotly.graph_objects as go\ntest ['length'] = test['text'].apply(len)\n\ndata = [\n    go.Box(\n        y=test[test['sentiment']=='positive']['length'],\n        name='positive'\n    ),\n    go.Box(\n        y=test[test['sentiment']=='negative']['length'],\n        name='negative'\n    ),\n    go.Box(\n        y=test[test['sentiment']=='neutral']['length'],\n        name='neutral'\n    ),\n\n]\nlayout = go.Layout(\n    title = 'Sentiment Vs Comment Lenght (Before pre-processing)'\n)\nfig1 = go.Figure(data=data, layout=layout)\n\n\ntest ['length'] = test['text_clean'].apply(len)\n\ndata = [\n    go.Box(\n        y=test[test['sentiment']=='positive']['length'],\n        name='positive'\n    ),\n    go.Box(\n        y=test[test['sentiment']=='negative']['length'],\n        name='negative'\n    ),\n    go.Box(\n        y=test[test['sentiment']=='neutral']['length'],\n        name='neutral'\n    ),\n\n]\nlayout = go.Layout(\n    title = 'Sentiment Vs Comment Lenght (After pre-processing)'\n)\nfig2 = go.Figure(data=data, layout=layout)\n","c082f765":"fig1.show()","cc09b17d":"fig2.show()","8f663422":"aspect_terms = []\nfor review in nlp.pipe(test.text_clean):\n    chunks = [(chunk.root.text) for chunk in review.noun_chunks if chunk.root.pos_ == 'NOUN']\n    aspect_terms.append(' '.join(chunks))\n    \ntest['Aspect_Terms'] = aspect_terms    ","b565bde8":"test.sample(5)","561b16fe":"sentiment_terms = []\n\nfor review in nlp.pipe(test['text_clean']):\n        if review.is_parsed:\n            sentiment_terms.append(' '.join([token.lemma_ for token in review if (not token.is_stop and not token.is_punct and (token.pos_ == \"ADJ\" or token.pos_ == \"VERB\"))]))\n        else:\n            sentiment_terms.append('')  \n            \ntest['Sentiment_terms'] = sentiment_terms  ","dae6944c":"test.sample(5)","ed36345d":"import spacy\nimport pytextrank\nnlp = spacy.load('en_core_web_sm')\ntr = pytextrank.TextRank()\nnlp.add_pipe(tr.PipelineComponent, name='textrank', last=True)","4e2664dc":"pytext_key = []\n\nfor text in test['text_clean']:\n    text = nlp(text)\n    t = text._.phrases\n    pytext_key.append(t)\n    \ntest['Pytextrank_keyword'] = pytext_key  ","ea5bca38":"test['Pytextrank_keyword'] = test['Pytextrank_keyword'].agg(lambda x: ','.join(map(str, x)))\n","16b678fc":"test.sample(5)","e50f8ee8":"submission['selected_text'] =  test['Aspect_Terms'] + ' ' + test['Sentiment_terms']  + ' ' +test['Pytextrank_keyword']","6dfae63e":"submission.head()","ab66c12a":"submission.shape","77030a67":"## 4. PyTextRank is a Python implementation of TextRank as a spaCy extension\n","0a27c0d9":"## 1. Pre-processing ","431b7e78":"## Sentence Lenght Analysis\n","a364a900":"## 3. Sentiment Word Extract","23bb45d4":"## 2 . Spacy Aspect-Based Opinion Mining is to extract product's aspects and the associated user opinions from the user text review"}}