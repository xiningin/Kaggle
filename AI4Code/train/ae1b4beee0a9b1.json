{"cell_type":{"60edde36":"code","b2f680c1":"code","08875dc7":"code","b5557936":"code","e730b429":"code","b287d65b":"code","886a5614":"code","57660a6e":"code","cb5f07e1":"code","548c0245":"code","f56cdfc7":"code","f0c21205":"markdown","a58daa83":"markdown","ceb7ea0e":"markdown","3f43c7f6":"markdown","db9256d6":"markdown","525a076b":"markdown","0e0e7cf9":"markdown"},"source":{"60edde36":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.svm import LinearSVR, SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","b2f680c1":"data = pd.read_csv('..\/input\/pgh-traffic-prediction\/pgh_train.csv')","08875dc7":"data","b5557936":"data.info()","e730b429":"plt.figure(figsize=(12, 10))\nsns.heatmap(data.corr(), annot=True, vmin=-1.0, cmap='mako')\nplt.show()","b287d65b":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Split df into X and y\n    y = df['speed']\n    X = df.drop('speed', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","886a5614":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","57660a6e":"X_train","cb5f07e1":"y_train","548c0245":"models = {\n    \"                     Linear Regression\": LinearRegression(),\n    \"                   K-Nearest Neighbors\": KNeighborsRegressor(),\n    \"                        Neural Network\": MLPRegressor(),\n    \"Support Vector Machine (Linear Kernel)\": LinearSVR(),\n    \"   Support Vector Machine (RBF Kernel)\": SVR(),\n    \"                         Decision Tree\": DecisionTreeRegressor(),\n    \"                         Random Forest\": RandomForestRegressor(),\n    \"                     Gradient Boosting\": GradientBoostingRegressor()\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + \" trained.\")","f56cdfc7":"for name, model in models.items():\n    print(name + \" R^2 Score: {:.5f}\".format(model.score(X_test, y_test)))","f0c21205":"# Task for Today  \n\n***\n\n## Traffic Speed Prediction  \n\nGiven *data about traffic at different times*, let's try to predict the **speed of traffic** at a given time.\n\nWe will use various regression models to make our predictions. ","a58daa83":"# Preprocessing","ceb7ea0e":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/Q3muXOjIlYo","3f43c7f6":"# Results","db9256d6":"# Visualizing Correlations","525a076b":"# Getting Started","0e0e7cf9":"# Training\/Model Selection"}}