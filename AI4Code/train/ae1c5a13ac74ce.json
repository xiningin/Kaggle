{"cell_type":{"fe7743f0":"code","10fc3951":"code","3f05a895":"code","8ca67410":"code","9efdc3a2":"code","e2c31620":"code","6c089548":"code","3c9f65ba":"code","de1b3361":"code","d8c6456e":"code","a8abaedd":"code","bfd99248":"code","fab15564":"code","5d1805ed":"code","3366585a":"code","cc7cd2ff":"code","b4eff285":"code","29215793":"code","e3348fe3":"code","afdfea1a":"code","08c097d2":"code","c148fb00":"code","074b717b":"code","097ffa56":"markdown","ee30bc5e":"markdown","c270b509":"markdown","3ff44f60":"markdown","b14cbcdc":"markdown","edb014af":"markdown","ca92d7e4":"markdown","7f57a0ab":"markdown","79215c5e":"markdown","19d5e211":"markdown","38d12c65":"markdown","1b085a5d":"markdown","0e1e54ea":"markdown","96cd553b":"markdown","bf8f99d2":"markdown"},"source":{"fe7743f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","10fc3951":"#prime or not\ndef is_prime(num):\n    for i in range(2,num):\n        if num%i==0:\n            print(\"{} is not a prime number\".format(num))\n            break\n    else:\n        print(\"{} is a prime number\".format(num))\n        \nis_prime(5)          \nis_prime(9)\n            ","3f05a895":"iter(\"string\")","8ca67410":"iter(50)\n#int values are not iterable\n","9efdc3a2":"a = iter(\"string\")\ntype(a)","e2c31620":"next(a)","6c089548":"#cube of numbers\ndef cuberoot(num):\n    for i in range(num):\n        yield i**3","3c9f65ba":"cuberoot(10)","de1b3361":"next(cuberoot(10))","d8c6456e":"v=iter(cuberoot(10))\ntype(v)","a8abaedd":"next(v)","bfd99248":"#A generator function can be called using a for loop\nfor i in cuberoot(10):\n    print(i)","fab15564":"#sqaure of a number\ndef square(n):\n    return n**2","5d1805ed":"#1 Normal method\nl = [1,2,3,4,5,6,7,8,9]\nn = []\nfor i in l:\n    n.append(square(i))\nprint(n)","3366585a":"#2 List comprehension\n[i**2 for i in l]\n","cc7cd2ff":"#3 Map function\nlist(map(square,l))","b4eff285":"#square of list of numbers\nlist(map(lambda x : x**2, l))","29215793":"#Lambda function can be stored iside a variable!\nc = lambda x : x**2\nlist(map(c,l))","e3348fe3":"from functools import reduce","afdfea1a":"l = [1,2,3,4,5,6,7]\ndef summation(a,b):\n    return a+b","08c097d2":"reduce(summation,l)","c148fb00":"#reduce with lambda\nreduce(lambda a,b:a+b,l)","074b717b":"#only even numbers\nl = [1,2,3,4,5,6,7]\nlist(filter(lambda x : x%2 == 0,l))","097ffa56":"The reduce(fun,seq) function is used to apply a particular function passed in its argument to all of the list elements mentioned in the sequence passed along.This function is defined in \u201cfunctools\u201d module.\n\nWorking : \n\nAt first step, first two elements of sequence are picked and the result is obtained.\nNext step is to apply the same function to the previously attained result and the number just succeeding the second element and the result is again stored.\nThis process continues till no more elements are left in the container.\nThe final returned result is returned and printed on console.\n\n\nNote: Reduce has only 2 arguments. More than 2 is not allowed at all","ee30bc5e":"# Map Functions\nmap() function returns a map object(which is an iterator) of the results after applying the given function to each item of a given iterable (list, tuple etc.)\n\nSyntax : map(fun, iter)\n\nNote : Map object behaves like a generator object","c270b509":"It is fairly simple to create a generator in Python. It is as easy as defining a normal function, but with a yield statement instead of a return statement.\n\nIf a function contains at least one yield statement (it may contain other yield or return statements), it becomes a generator function. Both yield and return will return some value from a function.\n\nThe difference is that while a return statement terminates a function entirely, yield statement pauses the function saving all its states and later continues from there on successive calls.\n\nRange function is an example of generator\n","3ff44f60":"# Reduce Function","b14cbcdc":"A next function can iterate you to the next memory cell of the iterator. It is similar to a for loop but doesn't know where to stop and thus gives an error after the last element.","edb014af":"# Lambda Function","ca92d7e4":"Iterable is an object, which one can iterate over. It generates an Iterator when passed to iter() method. Iterator is an object, which is used to iterate over an iterable object using __next__() method.\nStrings and List are examples of iterable\n\nAll the iterables can be converted into the iterator using iter() function","7f57a0ab":"# Ways to execute the code for a list of numbers","79215c5e":"Generator need not mean that the function is iterator. The generator fucntion can be converted into an iterator using the following code","19d5e211":"# Generator","38d12c65":"# Next function ()","1b085a5d":"A lambda function is a small anonymous function. (A function without name)\n\nA lambda function can take any number of arguments, but can only have one expression.\n\nSyntax : lambda arguments : expression","0e1e54ea":"# Iterator vs iterable","96cd553b":"# Filter Function","bf8f99d2":"The filter() method filters the given sequence with the help of a function that tests each element in the sequence to be true or not.\n\nSyntax : filter(function, sequence)"}}