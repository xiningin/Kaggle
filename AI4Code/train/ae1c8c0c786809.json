{"cell_type":{"65a2d7cd":"code","9210ad4c":"code","172e27cf":"code","69271e1b":"code","1b8d4610":"code","1dca55cf":"code","19c6d326":"code","a1d03824":"code","03b00b3d":"code","14fd675d":"code","ee3bb99f":"code","4237b589":"code","80679e7e":"code","2539c873":"code","5b9c8dc7":"code","b19658ca":"code","68566fea":"code","f01a19f7":"code","350337f0":"code","62325640":"code","14a46da4":"code","7ccb1c58":"code","eb0b521d":"code","9b71a1c3":"code","71b39cfd":"code","f6c49fbf":"code","dc1d0be4":"code","c2c0eb86":"code","fa90b79e":"code","2779c415":"code","4eadffb7":"code","aefac385":"code","a4e6d964":"code","f622d979":"code","0d01cf9c":"code","274a06ad":"code","f8773e59":"code","20675d67":"markdown","354ffe93":"markdown","5744c527":"markdown","94c65158":"markdown","ad7db62c":"markdown","87955d0c":"markdown"},"source":{"65a2d7cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        \n        \n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9210ad4c":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_new = df","172e27cf":"#NaN values: Age, Cabin, Embarked\n\ndf['Age'].isnull().values.any()\n\n\n#df_n = df.to_numpy()","69271e1b":"#df['Survived'].isnull().values.any()\n\n#replacing age with mean\ndf['Age'].fillna(df['Age'].mean(), inplace=True)","1b8d4610":"df","1dca55cf":"#replacing age with 0 for Nan\n#df['Age'].fillna(0, inplace=True)\n\n\n#df_n = df.to_numpy()\n\n\n#replacing Cabin with B96\ncounts = df['Cabin'].value_counts()\ncounts\n\ndf['Cabin'].fillna(0, inplace=True)","19c6d326":"# counts = df['Embarked'].value_counts()\n# counts\n\ndf['Embarked'].fillna(0, inplace=True)","a1d03824":"#final check for any NaN values\ndf.isnull().values.any()","03b00b3d":"#removing un-correlated features 1. PassengerId, Name, \n\n# df = df.drop(columns=['Name','PassengerId'])\n\n# #y = pd.get_dummies(df.Countries, prefix='Country')\n# df = df.drop(columns='Ticket')\n\n# df = pd.get_dummies(df.Sex, prefix='Sex')\n\ndf1 = df.drop(columns=['Name','PassengerId', 'Ticket'])","14fd675d":"df1 = pd.get_dummies(df1, columns=['Sex'])","ee3bb99f":"df1 = pd.get_dummies(df1, columns=['Cabin', 'Embarked'])","4237b589":"df = df1\ndf","80679e7e":"#split the data into training validation\n\nfrom sklearn.model_selection import train_test_split\n\ndf_train, df_val = train_test_split(df, test_size=0.3)","2539c873":"df_train_y = df_train['Survived']\ndf_val_y = df_val['Survived']\n\ndf_new_train_y = df_new['Survived']\ndf_new_train_X = df_new.drop(columns='Survived')\n\n#df_val.drop(columns='Survived', inplace=True)","5b9c8dc7":"df_train_X = df_train.drop(columns='Survived')\ndf_val_X = df_val.drop(columns='Survived')","b19658ca":"X_train = df_train_X.to_numpy()\ny_train = df_train_y.to_numpy()\nX_test = df_val_X.to_numpy()\ny_test = df_val_y.to_numpy()\n\nX_train_new = df_new_train_X.to_numpy()\ny_train_new = df_new_train_y.to_numpy()","68566fea":"#Import Random Forest Model\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Create a Gaussian Classifier\nclf=RandomForestClassifier(n_estimators=200)\n\n#Train the model using the training sets y_pred=clf.predict(X_test)\nclf.fit(X_train,y_train)\n\ny_pred=clf.predict(X_test)","f01a19f7":"#Import scikit-learn metrics module for accuracy calculation\nfrom sklearn import metrics\n\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","350337f0":"from xgboost import XGBClassifier\n\nmodel = XGBClassifier(eta=0.2)\n#model.fit(X_train, y_train)\nmodel.fit(X_train_new, y_train_new)","62325640":"y_pred = model.predict(X_test)","14a46da4":"from sklearn.metrics import accuracy_score\npredictions = [round(value) for value in y_pred]\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","7ccb1c58":"#testing with actual test set\n\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","eb0b521d":"df_test","9b71a1c3":"df_test = df_test.drop(columns=['Name','PassengerId', 'Ticket'])\n\n#perprocessing\ndf_test['Age'].fillna(df['Age'].mean(), inplace=True)\ndf_test['Cabin'].fillna(0, inplace=True)\ndf_test['Embarked'].fillna(0, inplace=True)\n\ndf_test = pd.get_dummies(df_test, columns=['Sex', 'Cabin', 'Embarked'])","71b39cfd":"df_test","f6c49fbf":"for item in df_train_X.columns:\n    if item not in df_test.columns:\n        df_test[item] = 0\n        \n\nfor item in df_test.columns:\n    if item not in df_train_X.columns:\n        df_test = df_test.drop(columns=item)\n\n        \n        \n#df_test = df_test.reindex(columns = ['Cabin_A10'])   \n#header_list\n#df_test","dc1d0be4":"len(df_test.columns)","c2c0eb86":"len(df_train_X.columns)","fa90b79e":"df_test","2779c415":"X_test = df_test.to_numpy()","4eadffb7":"y_pred = model.predict(X_test)","aefac385":"df_test_final = pd.DataFrame(y_pred)","a4e6d964":"df_test_final.index = df_test_final.index + 892","f622d979":"df_test_final = df_test_final.reset_index()","0d01cf9c":"df_test_final.columns = ['PassengerId', 'Survived']","274a06ad":"df_test_final","f8773e59":"df_test_final.to_csv('results.csv')","20675d67":"**Remove Null Values**","354ffe93":"**Random Forests**","5744c527":"**Split training and testing**","94c65158":"**Load Data**","ad7db62c":"**XGBoost Classifier**","87955d0c":"**Drop Non-correlated columns and add one-hot encoding (feature engineering)**"}}