{"cell_type":{"1640f201":"code","40fcf026":"code","160e9be9":"code","3e98295f":"code","fa97ac52":"code","17178f3b":"code","9d0a0f80":"code","31fb9c73":"code","6ae84fb2":"code","04d117d3":"code","12a5e642":"code","92eeb281":"code","b27e9f17":"code","a90925d2":"code","ab64e823":"code","a83d3175":"code","e32bb02c":"code","650422e4":"code","6ade617a":"code","3360bdf0":"code","a2b1c143":"markdown","8c9795ac":"markdown","2e6982c2":"markdown","1d17b053":"markdown","d1d35186":"markdown","a98eb811":"markdown","d90bc8f9":"markdown","d314fb56":"markdown","c7e623ed":"markdown","304cd17f":"markdown","a6a34d43":"markdown","ed127660":"markdown","1c941dbf":"markdown","64db8ef2":"markdown","009513d6":"markdown","c9a5d103":"markdown","64f4244b":"markdown","0155fac7":"markdown"},"source":{"1640f201":"import tensorflow as tf\nprint('Using TensorFlow version', tf.__version__)","40fcf026":"from tensorflow.keras.datasets import mnist\n(x_train , y_train) , (x_test , y_test) = mnist.load_data()","160e9be9":"print('x_train shape:' , x_train.shape)\nprint('y_train shape:' , y_train.shape)\nprint('x_test shape:' , x_test.shape)\nprint('y_test shape:' , y_test.shape)","3e98295f":"from matplotlib import pyplot as plt\n%matplotlib inline\n\nplt.imshow(x_train[0] , cmap = 'binary')\nplt.show()","fa97ac52":"y_train[0]","17178f3b":"print(set(y_train))","9d0a0f80":"from tensorflow.keras.utils import to_categorical\n\ny_train_encoded = to_categorical(y_train)\ny_test_encoded = to_categorical(y_test)","31fb9c73":"print('y_train_encoded:' , y_train_encoded.shape)\nprint('y_test_encoded:' , y_test_encoded.shape)","6ae84fb2":"y_train_encoded[0]","04d117d3":"import numpy as np\nx_train_reshaped = np.reshape(x_train , (60000 , 784))\nx_test_reshaped = np.reshape(x_test, (10000 , 784))\nprint('x_test_reshaped shape:' , x_train_reshaped.shape)\nprint('x_train_reshaped:' , x_test_reshaped.shape)","12a5e642":"print(set(x_train_reshaped[0]))","92eeb281":"x_mean = np.mean(x_train_reshaped)\nx_std = np.std(x_train_reshaped)\n\nepilson = 1e-10\n\nx_train_norm = (x_train_reshaped - x_mean)\/(x_std + epilson)\nx_test_norm = (x_test_reshaped - x_mean) \/ (x_std + epilson)","b27e9f17":"print(set(x_train_norm[0]))","a90925d2":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\n\nmodel = Sequential([\n    Dense(128 , activation = 'relu' , input_shape = (784 , )),\n    Dense(128 , activation = 'relu'),\n    Dense(10 , activation = 'softmax')\n])","ab64e823":"model.compile(\n    optimizer = 'sgd',\n    loss = 'categorical_crossentropy',\n    metrics=['accuracy']\n)\nmodel.summary()","a83d3175":"model.fit(x_train_norm , y_train_encoded , epochs=3)","e32bb02c":"loss , accuracy = model.evaluate (x_test_norm , y_test_encoded)\nprint('Test set accuracy' , accuracy*100)","650422e4":"preds = model.predict(x_test_norm)\nprint('Shape of pred:' , preds.shape)","6ade617a":"plt.figure(figsize = (12 , 12))\n\nstart_index = 0\n\nfor i in range(15):\n    plt.subplot( 5 , 5 , i+1)\n    plt.grid(False)\n    plt.xticks([])\n    plt.yticks([])\n    \n    pred = np.argmax(preds[start_index+i])\n    gt = y_test[start_index+i]\n    \n    col = 'g'\n    if pred != gt:\n        col = 'r'\n        \n    plt.xlabel('i ={} , pred ={} , gt={}'.format(start_index+i , pred , gt) , color= col)\n    plt.imshow(x_test[start_index+i] , cmap = 'binary')\nplt.show()","3360bdf0":"plt.plot(preds[8])\nplt.show()","a2b1c143":"### Display Pixel Values","8c9795ac":"### Predictions on Test Set","2e6982c2":"### Plot an Image Example","1d17b053":"### Display Normalized Pixel Values","d1d35186":"### Compiling the Model","a98eb811":"### Evaluating the Model","d90bc8f9":"# One Hot Encoding\nAfter this encoding, every label will be converted to a list with 10 elements and the element at index to the corresponding class will be set to 1, rest will be set to 0:\n\n| original label | one-hot encoded label |\n|------|------|\n| 5 | [0, 0, 0, 0, 0, 1, 0, 0, 0, 0] |\n| 7 | [0, 0, 0, 0, 0, 0, 0, 1, 0, 0] |\n| 1 | [0, 1, 0, 0, 0, 0, 0, 0, 0, 0] |\n\n### Encoding Labels","d314fb56":"### Training the Model","c7e623ed":"### Import TensorFlow","304cd17f":"### Display Labels","a6a34d43":"### Display Encoded Labels","ed127660":"### Data Normalization","1c941dbf":"### Unrolling N-dimensional Arrays to Vectors","64db8ef2":"### Import MNIST","009513d6":"### Validated Shapes","c9a5d103":"### Creating the Model","64f4244b":"### Shapes of Imported Arrays","0155fac7":"### Plotting the Results"}}