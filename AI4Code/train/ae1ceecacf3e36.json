{"cell_type":{"14a5ceab":"code","79269dd0":"code","ae51eda7":"code","1af3b6dd":"code","af70c1c8":"markdown"},"source":{"14a5ceab":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nimport ipywidgets as widgets\nfrom ipywidgets import HBox\nfrom ipywidgets import VBox\nfrom matplotlib import pyplot\nimport matplotlib.pyplot as plt\n!jupyter nbextension enable --py widgetsnbextension\n\ndef dvt(dataframe_object):\n#LOADING DATA :-\n\n    data_table = dataframe_object\n#data_table = data_table[['gender','ssc_b','hsc_p','degree_p']]\n\n##    !__data_types differentiator__!\n    columns_dtype_dict = {}\n    for i,j in zip(data_table.dtypes,data_table.columns):\n        columns_dtype_dict[str(j)] = str(i)\n    \n#columns_dtype_dict    \n##################################################################################################################\n\n#Dropdown box -X-axis\n    Dropdown_x = widgets.Dropdown(\n        options= data_table.columns,\n        value= data_table.columns[0],\n        description='X-axis',\n        disabled=False,\n    )\n\n#Dropdown box -Y-axis\n    Dropdown_y = widgets.Dropdown(\n        options= data_table.columns,\n        value= data_table.columns[0],\n        description='Y-axis',\n        disabled=False,\n    )\n\n#alpha\n#Dropdown_alpha = widgets.Dropdown(options= [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],value= 1,description='Transparency',disabled=False,)\n\n#Slider -height\n    Slider_height = widgets.IntSlider(\n                min=3,\n                max=15,\n                step=1,\n                description='Size:',\n                value=5\n    )\n#Dropdown box -Graph type\n    Dropdown_graff = widgets.Dropdown(\n                 options= ['Categorical','Relational','Distribution'],\n                 value= 'Categorical',\n                 description= 'Graph',\n                 disabled= False\n                                 )\n##__TYPE:__\n#Dropdown box -Type of categorical_graph\n    Dropdown_cat_graph_type = widgets.Dropdown(\n                            options= ['strip', 'swarm', 'box', 'violin', 'boxen', 'point', 'bar'],#, 'count'],\n                            value= 'bar',\n                            description='C-Type',\n                            disabled=False,\n    )\n\n#Dropdown box -Type of relational_graph\n    Dropdown_rel_graph_type = widgets.Dropdown(\n                            options= ['scatter','line'],#, 'count'],\n                            value= 'line',\n                            description='R-Type',\n                            disabled=False,\n    )\n\n#Dropdown box -Type of distribution_graph\n    Dropdown_dis_graph_type = widgets.Dropdown(\n                            options= ['hist','kde','ecdf'],#, 'count'],\n                            value= 'hist',\n                            description='D-Type',\n                            disabled=False,\n    )\n\n#Dropdown box -theme_context\n    Dropdown_theme_context = widgets.Dropdown(\n                            options= ['notebook','paper','talk','poster'],\n                            value= 'notebook',\n                            description='context',\n                            disabled=False,\n    )\n\n#Dropdown box -theme_style\n    Dropdown_theme_style = widgets.Dropdown(\n                            options= ['darkgrid', 'whitegrid', 'dark', 'white', 'ticks'],\n                            value= 'darkgrid',\n                            description='style',\n                            disabled=False,\n    )\n\n#Dropdown box -theme_palette\n    Dropdown_theme_palette = widgets.Dropdown(\n                            options= ['deep', 'muted', 'bright', 'pastel', 'dark', 'colorblind'],\n                            value= 'deep',\n                            description='palette',\n                            disabled=False,\n    )\n\n#Slider -theme_font_scale\n    Slider_theme_font_scale = widgets.FloatSlider(\n                            min=1,\n                            max=5,\n                            step=0.1,\n                            description='font size',\n                            value=1,\n    )\n\n#######################################################################################################################################################\n#******************************************************************************************************************************************************\n#######################################################################################################################################################\n\n## Categorical_graph_creator:-\n    def categorical_graff(x,y,kind,height):\n\n        if columns_dtype_dict[x] == columns_dtype_dict[y]:\n            print(\"Both axes can't be categorical or numeric for Categorical Plots. \\nOne axis must be categorical and other a numeric.\")\n    \n        else:\n            if kind == 'count':\n                y = None\n        \n            catplot = sns.catplot(data = data_table, kind = kind,#Dropdown_cat_graph_type.value,\n                    x= x ,     #numeric \n                    y= y,  #categorical\n                    #alpha= alpha,\n                    #orient=\"h\",\n                    height= height,\n                   legend_out=True)\n            catplot.despine(left=True)\n            return catplot\n\n#sns.set_palette(\"Set1\", 8, .75)\n\n# Relational_graph_creator:-\n    def relational_graff(x,y,kind,height):\n   \n        relplot = sns.relplot(data = data_table, kind = kind,\n                          x = x,\n                          y = y,\n                          height = height,\n                          )\n        relplot.despine(left=True)\n        return relplot\n    \n    \n    def distribution_graff(x,y,kind,height):\n    \n    #if columns_dtype_dict[x] or columns_dtype_dict[y] == 'object':\n    #    print(\"Both axes must be numeric.\")\n    #else:\n            displot = sns.displot(data = data_table, kind = kind,\n                              x = x,\n                              y = y,\n                              height = height,\n                              )\n            displot.despine(left=True)\n            return displot\n#######################################################################################################################################################\n#******************************************************************************************************************************************************\n#######################################################################################################################################################\n\n\n#This changes the dropdown box of 'kind' for selected graph type\n    Dropdown_graph_type = Dropdown_rel_graph_type\n\n    def dropdown_graff_changer(graff_type):\n        if Dropdown_graff.value == 'Relational':\n            Dropdown_graph_type = Dropdown_rel_graph_type\n            display(Dropdown_graph_type)\n        elif Dropdown_graff.value == 'Distribution':\n            Dropdown_graph_type = Dropdown_dis_graph_type\n            display(Dropdown_graph_type)\n        else:\n            Dropdown_graph_type = Dropdown_cat_graph_type\n            display(Dropdown_graph_type)\n\n#################################################################################################################\n\n#This plots graph for different kind and graph type combinations\n    def graff_creator(Dropdown_graff,x,y,kind_rel,kind_cat,kind_dis,height,context,style,palette,font_size):\n\n        sns.set_theme(context= context,\n                  style= style, \n                  palette= palette,\n                  font='Albertus', \n                  font_scale= font_size, \n                  color_codes=True, \n                  rc=None)\n        if Dropdown_graff == 'Categorical':\n            return categorical_graff(x,y,kind_cat,height)\n    \n        elif Dropdown_graff == 'Distribution':\n            return distribution_graff(x,y,kind_dis,height)\n    \n        else:\n            return relational_graff(x,y,kind_rel,height)\n   \n    \n\n#################################################################################################################\n    \n#Type:\n    option_out  =widgets.interactive_output(dropdown_graff_changer,\n                                        {'graff_type': Dropdown_graff\n                                           })\n#Plot:\n    out = widgets.interactive_output(graff_creator,                                \n                                 {'x': Dropdown_x,\n                                  'y': Dropdown_y, \n                                  'kind_rel': Dropdown_rel_graph_type, #\n                                  'kind_cat': Dropdown_cat_graph_type,\n                                  'kind_dis': Dropdown_dis_graph_type,\n                                  #'alpha': Dropdown_alpha,\n                                  'height': Slider_height,\n                                  'context': Dropdown_theme_context,\n                                  'style': Dropdown_theme_style,\n                                  'palette': Dropdown_theme_palette,\n                                  'font_size': Slider_theme_font_scale,\n                                  'Dropdown_graff': Dropdown_graff,\n                                                    })\n\n    return widgets.VBox([widgets.HBox([Dropdown_x, Dropdown_y]),\n              widgets.HBox([Dropdown_graff, option_out]),#Dropdown_graph_type]),\n              widgets.HBox([Slider_height]),\n              #widgets.HBox([header_theme]),\n              widgets.HBox([Dropdown_theme_context]),\n              widgets.HBox([Dropdown_theme_style]),\n              widgets.HBox([Dropdown_theme_palette]),\n              widgets.HBox([Slider_theme_font_scale]),\n              widgets.HBox([out])\n             ])\n            ","79269dd0":"file = pd.read_csv('..\/input\/students-performance-in-exams\/StudentsPerformance.csv')\nfile.columns","ae51eda7":"df = file[file['reading score']>50]\ndf = df[df['math score']<50]\ndf.head()","1af3b6dd":"dvt(df)","af70c1c8":"*Run inside jupyter notebook  \n*Use Drag and drop if you want to save graph"}}