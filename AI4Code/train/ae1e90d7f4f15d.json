{"cell_type":{"df3e3327":"code","32a79dae":"code","9ad3c1d3":"code","de135e48":"code","94d13a9e":"code","c298e90b":"code","8436094a":"code","78c4ad9a":"code","e066439b":"code","1151586b":"code","89c0751e":"code","3b0f60e9":"code","5009b814":"code","90131608":"code","c8b06149":"code","7fa09941":"code","13d36280":"code","a57d4fea":"code","15b7c41e":"code","b1575d3d":"code","01d4eaae":"code","2b0c82c8":"code","44be3044":"code","74082464":"code","b8cec84c":"code","f3ba9ea2":"code","8f35ccd2":"code","bdc4696e":"code","4e25945c":"code","1bd97b6e":"code","33454896":"code","10bd59da":"code","e175c387":"code","931ff62e":"code","2824121d":"code","fabea75c":"code","c2236d46":"code","d0d39af2":"code","59655587":"code","988bb238":"code","70fce532":"code","7fa6bbfc":"code","61212388":"code","82f54a31":"code","768cc61a":"code","3aef2ab7":"code","9dcbddbb":"code","3c629cb3":"code","8c4f4d09":"code","9b285d25":"code","ce0915d3":"code","8a21431d":"code","5f4f3306":"code","96185e95":"code","800de957":"code","f22d09f1":"code","2e3b9c23":"code","8237f62c":"code","90a3c405":"markdown","35bd1883":"markdown","4349a0d0":"markdown","0f25dc5b":"markdown","40390cdc":"markdown","402ba5b9":"markdown","dc32041a":"markdown","87e57bcb":"markdown","f4c1322a":"markdown","7aa3af2d":"markdown","0e1359e2":"markdown","c7e5d86a":"markdown","e3f74415":"markdown","3b4fcf8d":"markdown","d5ec88c2":"markdown","13032cb3":"markdown","f8ed5602":"markdown","e4a5dc35":"markdown","a2a6691c":"markdown","ecf8c343":"markdown","44d2a0cc":"markdown","dae45b8f":"markdown","b05f50b7":"markdown","3abb43e4":"markdown","402d1dd0":"markdown","9512ee1f":"markdown","5319366d":"markdown","cd7ca5b3":"markdown","696be964":"markdown","5557344d":"markdown","d9b762df":"markdown","82e321d9":"markdown","6daec32f":"markdown","5a247a1a":"markdown","0fa49b48":"markdown","cf51c64e":"markdown","5d726f6d":"markdown","4dbd926e":"markdown","dd75d8bb":"markdown","2eb10f43":"markdown","908ed551":"markdown","a479ee11":"markdown"},"source":{"df3e3327":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","32a79dae":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","9ad3c1d3":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier","de135e48":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ncombine = [train, test]","94d13a9e":"train.head(5)\n","c298e90b":"test.head(5)","8436094a":"train.info()\nprint('-'*30)\ntest.info()","78c4ad9a":"train.describe()","e066439b":"train[['Pclass', 'Survived']].groupby(['Pclass'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","1151586b":"train[['Sex', 'Survived']].groupby(['Sex'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","89c0751e":"train[['SibSp', 'Survived']].groupby(['SibSp'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","3b0f60e9":"train[['Parch', 'Survived']].groupby(['Parch'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","5009b814":"# Histogram betweeen Age and Survived\ng=sns.FacetGrid(train, col = 'Survived')\ng.map(plt.hist,'Age', bins = 20)","90131608":"# Histogram between Survived and PClass\ng1= sns.FacetGrid(train, col = 'Survived', row = 'Pclass' )\ng1.map(plt.hist, 'Age', bins = 20)\n","c8b06149":"g2 = sns.FacetGrid(train, col = 'Embarked')\ng2.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', pallete = 'deep')\ng2.add_legend()","7fa09941":"g3 = sns.FacetGrid(train, col = 'Embarked', row = 'Survived')\ng3.map(sns.barplot,'Sex', 'Fare')\ng3.add_legend()","13d36280":"for dataset in combine:    \n    #complete missing age with median\n    dataset['Age'].fillna(dataset['Age'].median(), inplace = True)\n\n    #complete embarked with mode\n    dataset['Embarked'].fillna(dataset['Embarked'].mode()[0], inplace = True)\n\n    #complete missing fare with median\n    dataset['Fare'].fillna(dataset['Fare'].median(), inplace = True)\n    \nprint(train.isnull().sum())\nprint(\"-\"*10)\nprint(test.isnull().sum())","a57d4fea":"train['AgeGroup'] = pd.cut(train['Age'].astype(int), 5)\ntrain[['AgeGroup', 'Survived']].groupby(['AgeGroup'], as_index=False).mean().sort_values(by='AgeGroup', ascending=True)","15b7c41e":"# replacing age with ordinal values in these groups\nfor dataset in combine:    \n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ (dataset['Age'] > 64) & (dataset['Age'] <= 80),'Age'] = 4\ntrain.head()","b1575d3d":"train['FareGroup'] = pd.cut(train['Fare'],4)\ntrain[['FareGroup', 'Survived']].groupby(['FareGroup'], as_index=False).mean().sort_values(by='FareGroup', ascending=True)","01d4eaae":"# replacing fare with ordinal values in these groups\nfor dataset in combine:    \n    dataset.loc[ dataset['Fare'] <= 128, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 128) & (dataset['Fare'] <= 256), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 256) & (dataset['Fare'] <= 384), 'Fare'] = 2\n    dataset.loc[(dataset['Fare'] > 384), 'Fare'] = 3\ncombine = [train, test]\ntrain.head()","2b0c82c8":"for dataset in combine:    \n    dataset['FamilySize'] = dataset ['SibSp'] + dataset['Parch'] + 1","44be3044":"for dataset in combine:\n    dataset['IsAlone'] = 1 #initialize to yes\/1 is alone\n    dataset['IsAlone'].loc[dataset['FamilySize'] > 1] = 0 ","74082464":"for dataset in combine:\n    dataset['Title'] = dataset['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\n","b8cec84c":"train.head()","f3ba9ea2":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\nfor dataset in combine:\n    dataset['Sex'] = labelencoder.fit_transform(dataset['Sex'])","8f35ccd2":"for dataset in combine:\n    dataset['Embarked'] = labelencoder.fit_transform(dataset['Embarked'])\n","bdc4696e":"for dataset in combine:\n    dataset['Title'] = labelencoder.fit_transform(dataset['Title'])","4e25945c":"train.head()","1bd97b6e":"test.head()","33454896":"print('Before', train.shape, test.shape, combine[0].shape, combine[1].shape)\n\ntrain = train.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'AgeGroup', 'FareGroup' ], axis = 1)\ntest = test.drop(['Name', 'Ticket', 'Cabin'], axis = 1)\ncombine = [train, test]\n\nprint('After', train.shape, test.shape, combine[0].shape, combine[1].shape)","10bd59da":"train.head(5)","e175c387":"#MinMaxScaled\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(-1,1))\nfor dataset in combine:\n    dataset['Age'] = scaler.fit_transform(dataset.Age.values.reshape(-1, 1))","931ff62e":"train.head()","2824121d":"#MinMaxScaled\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(-1,1))\nfor dataset in combine:\n    dataset['Fare'] = scaler.fit_transform(dataset.Age.values.reshape(-1, 1))","fabea75c":"train.head()","c2236d46":"X_train = train.drop('Survived', axis = 1).copy()\nY_train = train['Survived']\nX_test = test.drop('PassengerId', axis = 1).copy()\nX_train.shape, Y_train.shape, X_test.shape","d0d39af2":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\naccu_reg = round(logreg.score(X_train, Y_train) * 100, 2)\naccu_reg","59655587":"svc = SVC(kernel = 'rbf', C =1, gamma = 0.1)\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\naccu_svc = round(svc.score(X_train, Y_train) *100, 2)\naccu_svc","988bb238":"svc = SVC(kernel = 'linear', C =1, gamma = 0.1)\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\naccu_lsvc = round(svc.score(X_train, Y_train) *100, 2)\naccu_lsvc","70fce532":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\naccu_knn = round(svc.score(X_train, Y_train) *100, 2)\naccu_knn","7fa6bbfc":"gaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","61212388":"perceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\nacc_perceptron","82f54a31":"linear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nacc_linear_svc","768cc61a":"sgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\nacc_sgd","3aef2ab7":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","9dcbddbb":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","3c629cb3":"from sklearn.ensemble import GradientBoostingClassifier\nclf = GradientBoostingClassifier(random_state=0)\nclf.fit(X_train, Y_train)\nY_pred = clf.predict(X_test)\nclf.score(X_train, Y_train)\nacc_clf = round(clf.score(X_train, Y_train)*100, 2)\nacc_clf","8c4f4d09":"models = pd.DataFrame({\n    'Model': ['Radial Support Vector Machines', 'Linear Support Vector Machine', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree', 'Gradient Boosting Classifier'],\n    'Score': [accu_svc ,accu_lsvc, accu_knn, accu_reg, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_linear_svc, acc_decision_tree, acc_clf]})\nmodels.sort_values(by='Score', ascending=False)","9b285d25":"from sklearn.model_selection import KFold #for K-fold cross validation\n#from sklearn.model_selection import cross_val_score #score evaluation\n#from sklearn.model_selection import cross_val_predict #prediction\nkfold = KFold(n_splits=10) # k=10, split the data into 10 equal parts\nkfold.get_n_splits(X_test)\n","ce0915d3":"from sklearn.ensemble import AdaBoostClassifier\nada=AdaBoostClassifier(n_estimators=200,random_state=0,learning_rate=0.1)\nresult=cross_val_score(ada,X_train,Y_train,cv=10,scoring='accuracy')\nprint('The cross validated score for AdaBoost is:',result.mean())","8a21431d":"from sklearn.ensemble import GradientBoostingClassifier\ngrad=GradientBoostingClassifier(n_estimators=500,random_state=0,learning_rate=0.1)\nresult=cross_val_score(grad,X_train,Y_train,cv=10,scoring='accuracy')\nprint('The cross validated score for Gradient Boosting is:',result.mean())","5f4f3306":"import xgboost as xg\nxgboost=xg.XGBClassifier(n_estimators=900,learning_rate=0.1)\nresult=cross_val_score(xgboost,X_train,Y_train,cv=10,scoring='accuracy')\nprint('The cross validated score for XGBoost is:',result.mean())","96185e95":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\n\nsubmission.head(20)\n","800de957":"submission.to_csv('Submission.csv', index=False)","f22d09f1":"sample_submission.head(20)","2e3b9c23":"g=sns.FacetGrid(sample_submission, col = 'Survived')\ng.map(plt.hist,'PassengerId', bins = 20)","8237f62c":"g=sns.FacetGrid(submission, col = 'Survived')\ng.map(plt.hist,'PassengerId', bins = 20)","90a3c405":"* **Random Forest**","35bd1883":"1. Scaling Age using MinMaxScalar","4349a0d0":"The barplot too depicts that Sex and Embarked are an important variables for determining survival.","0f25dc5b":"# **Modelling begins**","40390cdc":"This plot also shows that age 20-40 years had lesser chances of survival who were in Pclass = 3.\nSo, Age and Pclass could be a major determining factor for the person survived or not.","402ba5b9":"5. Form Title Column","dc32041a":"2. Embarked into numerical","87e57bcb":"* **Decision Tree**","f4c1322a":"* **Linear SVC**","7aa3af2d":"# Feature Scaling","0e1359e2":"XG_Boost","c7e5d86a":"# Boosting","e3f74415":"The pointplot clearly shows that males had a greater survival rate in Pclass = 2, whereas it was the other case in Pclass = 1 and 3 where female survival chances was higher.","3b4fcf8d":"* ** Radial Support Vector Machine**","d5ec88c2":"* **Logistic Regression**","13032cb3":"# Data Visualisation","f8ed5602":"# Cross Validation","e4a5dc35":"* **KNN**","a2a6691c":"The Ages between 20 to 40 years of age have lesser chances of survival.\nThe aged people and the younger ones survived better.","ecf8c343":"3. Form Family Size","44d2a0cc":"2. Scaling Fare","dae45b8f":"2. Stochastic Gradient Boosting","b05f50b7":"# Convert categorical variables into numeric","3abb43e4":"1. Sex into numerical using labelencoder","402d1dd0":"* **Stochastic Gradient Descent**\n\n","9512ee1f":"# Statistical Analysis\n\nNow let's check on the Correlation of Survived with other variables.","5319366d":"1. Creating Age groups","cd7ca5b3":"2. Creating Fare Groups","696be964":"* **Gaussian Naive Bayes**\n\n","5557344d":"1. Adaboosting","d9b762df":"* **XGB Classifier**","82e321d9":"# Import Libraries","6daec32f":"4. Form Isalone column","5a247a1a":"Split datasets into test and train","0fa49b48":"# Drop columns","cf51c64e":"* **Linear Support Vector Machine**","5d726f6d":"# Fill missing data","4dbd926e":"# Import Dataset","dd75d8bb":"3. Title into numerical","2eb10f43":"* **Perceptron**","908ed551":"# Create new columns","a479ee11":"**It is observed that 'PClass' and 'Sex' seems to have close relation with survived whereas 'Parch' and 'SibSp' seems to have lesser impact on Survived which is visble from the numerics going to 0.**"}}