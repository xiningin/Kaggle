{"cell_type":{"39c44bfd":"code","e4d18f6d":"code","6f831533":"code","891f83e0":"code","a00ecfbc":"code","444ddbc5":"code","361914ea":"code","22e41220":"code","d2d73cc2":"code","3ec7ba48":"code","4dbbf4e2":"code","f6d87188":"code","4e139389":"code","d20b29fe":"code","e0cd5422":"code","e45bb64f":"code","260db94b":"code","cb3d007e":"code","dc2e1475":"code","15b37011":"code","f3471f7f":"code","f71fb0c7":"code","7e362b09":"code","a9f87a69":"code","01a11dac":"code","f4cb961f":"code","24b7561c":"code","d5d0aee8":"code","84779ed7":"code","dd1ec95a":"code","f9b90526":"code","cf5da710":"code","d23d372b":"code","5e10c95d":"code","436ac467":"code","c0d1665b":"code","c59a0354":"code","32de166b":"code","bd55e4a3":"code","44c94d7f":"code","9a67f515":"code","20c4c268":"code","824b6967":"code","9ddb3588":"code","a772a7d0":"code","2284ae47":"code","76c0ed60":"code","5d221021":"code","28dc7b88":"code","50e6ab5a":"code","a8d19ee3":"code","62485423":"code","92670462":"markdown","5a196a71":"markdown","f81bcf09":"markdown","0ed615f7":"markdown","4a5dde51":"markdown","1498643a":"markdown","1fe45ef3":"markdown","f0de64d1":"markdown","c2d9b387":"markdown","7b8eb580":"markdown","9a9027ee":"markdown","fbddb796":"markdown","ca0027fb":"markdown","abd1d7d3":"markdown","57525698":"markdown","4aca7429":"markdown","1d3c50e0":"markdown","9e39aa76":"markdown","e652ab64":"markdown","61bf220e":"markdown","9eb176ed":"markdown","4e5e4078":"markdown","450a5ee7":"markdown","9724f22e":"markdown","f02f829a":"markdown","d36e8e6b":"markdown","0dd35994":"markdown","9154489e":"markdown","66df9265":"markdown","1a28c6a1":"markdown","2b855afc":"markdown","de663b03":"markdown"},"source":{"39c44bfd":"!pip freeze | grep pandas","e4d18f6d":"import pandas as pd\nimport numpy as np\nimport time\nimport pandas_profiling\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n%matplotlib inline\nimport seaborn as sns","6f831533":"df = pd.read_csv(\"..\/input\/flight-delays\/flights.csv\")                  # Reading the dataset\ndf.head()","891f83e0":"df.describe()","a00ecfbc":"df.info()","444ddbc5":"df.shape","361914ea":"# Selecting important features\n\ndf = df[[\"MONTH\", \"DAY\", \"DAY_OF_WEEK\", \"AIRLINE\", \"FLIGHT_NUMBER\", \"DESTINATION_AIRPORT\", \"ORIGIN_AIRPORT\", \n         \"SCHEDULED_DEPARTURE\", \"DEPARTURE_TIME\", \"DEPARTURE_DELAY\", \n         \"SCHEDULED_ARRIVAL\", \"ARRIVAL_TIME\", \"ARRIVAL_DELAY\", \"AIR_TIME\", \"DISTANCE\"]]","22e41220":"df = df.sample(n=10000, random_state= 10, axis=0)\ndf.shape","d2d73cc2":"report = pandas_profiling.ProfileReport(df)\nreport.to_file('flight_df.html')","3ec7ba48":"from IPython.display import display, HTML, IFrame\ndisplay(HTML(open('flight_df.html').read()))","4dbbf4e2":"# Origin and Destination airport has few values which are numeric\n\n# Making a function to replace all numerical values in origin and destination airport feature with np.nan\ndef Replace(i):\n    try:\n      if str(i).isalpha():\n        return str(i)\n    except:\n      i == np.nan\n      return i\n","f6d87188":"# Applying function to replace\ndf['DESTINATION_AIRPORT'] = df['DESTINATION_AIRPORT'].apply(func=Replace)\ndf['ORIGIN_AIRPORT'] = df['ORIGIN_AIRPORT'].apply(func=Replace)\ndf.isna().sum()","4e139389":"# Dropping all NAN missing values\ndf.dropna(inplace=True)\ndf.shape","d20b29fe":"df.head()","e0cd5422":"df_delay = df[df.DEPARTURE_DELAY >= 1]\ndep_delayed_flights = df_delay.groupby(['AIRLINE'], as_index=False).agg({'DEPARTURE_DELAY': 'mean'})\n\nf,ax = plt.subplots(figsize=(10, 8))\nsns.barplot('AIRLINE','DEPARTURE_DELAY', data=dep_delayed_flights ,ax=ax)\nax.set_title('Airline Departure Delay Distribution', fontsize=16)\nax.set_ylabel(\"Departure Delay\", fontsize=16)\nax.set_xlabel(\"Airlines\", fontsize=16)\nplt.close(2)\nplt.show()","e45bb64f":"df_delay1 = df[df.ARRIVAL_DELAY >= 1]\ndep_delayed_flights = df_delay.groupby(['AIRLINE'], as_index=False).agg({'ARRIVAL_DELAY': 'mean'})\n\nf,ax = plt.subplots(figsize=(10, 8))\nsns.barplot('AIRLINE','ARRIVAL_DELAY', data=dep_delayed_flights ,ax=ax)\nax.set_title('Airline Arrival Delay Distribution', fontsize=16)\nax.set_ylabel(\"Arrival Delay\", fontsize=16)\nax.set_xlabel(\"Airlines\", fontsize=16)\nplt.close(2)\nplt.show()","260db94b":"# To find the max 10th departure delay\ndf.nlargest(10, 'DEPARTURE_DELAY')[9:]","cb3d007e":"# We see that the 10th larges value for Departure Delay is 429 minutes\n\ndep_delay_airports = df[df['DEPARTURE_DELAY']>427][['ORIGIN_AIRPORT', 'DEPARTURE_DELAY']]\n\ndep_delay_airports['ORIGIN_AIRPORT'] = dep_delay_airports['ORIGIN_AIRPORT'].astype('category')\n\nf, ax= plt.subplots(figsize=(10, 6))\nsns.barplot('ORIGIN_AIRPORT', 'DEPARTURE_DELAY', data=dep_delay_airports, ax=ax)\nax.set_title('Departure Delay Distribution of Origin Airports', fontsize=16)\nax.set_xticklabels(ax.get_xticklabels(), rotation=45)\nplt.close(2)\nplt.show()\n","dc2e1475":"# To find the max 10th arrival delay\ndf.nlargest(10, 'ARRIVAL_DELAY')[9:]","15b37011":"# We see that the 10th larges value for Arrival Delay is 434 minutes\n\narr_delay_airports = df[df['ARRIVAL_DELAY']>427][['DESTINATION_AIRPORT', 'ARRIVAL_DELAY']]\narr_delay_airports['DESTINATION_AIRPORT'] = arr_delay_airports['DESTINATION_AIRPORT'].astype('category')\n\n\nf, ax= plt.subplots(figsize=(10, 6))\nsns.barplot('DESTINATION_AIRPORT', 'ARRIVAL_DELAY', data=arr_delay_airports, ax=ax, saturation=.8)\nax.set_title('Arrival Delay Distribution of Destination Airports', fontsize=16)\nax.set_xticklabels(ax.get_xticklabels(), rotation=45)\nplt.close(2)\nplt.show()\n","f3471f7f":"f, ax = plt.subplots(figsize=(10, 8))\nsns.scatterplot('MONTH', \"DEPARTURE_DELAY\", data=df, size='DEPARTURE_DELAY', hue='AIRLINE', sizes=(50, 200))\nplt.legend(bbox_to_anchor=(1.5,1) , loc='upper right')","f71fb0c7":"f, ax = plt.subplots(figsize=(10, 8))\nsns.scatterplot('MONTH', \"ARRIVAL_DELAY\", data=df, size='ARRIVAL_DELAY', hue='AIRLINE', sizes=(50, 200))\nplt.legend(bbox_to_anchor=(1.5,1) , loc='upper right')","7e362b09":"arr_delay_flightnum = df[df['ARRIVAL_DELAY']>430][['FLIGHT_NUMBER', 'ARRIVAL_DELAY', 'AIRLINE']]\narr_delay_log = np.log(df['ARRIVAL_DELAY'])\nf, ax = plt.subplots(figsize=(14, 8))\nsns.barplot('FLIGHT_NUMBER', 'ARRIVAL_DELAY', data=arr_delay_flightnum, hue='AIRLINE')\n\nax.legend(bbox_to_anchor=(1, 1), loc='upper right')\n","a9f87a69":"# using labelencoding and give conditions to Arrival delay colum\ndf['ARRIVAL_DELAY'].value_counts()","01a11dac":"df[\"ARRIVAL_DELAY\"] = (df[\"ARRIVAL_DELAY\"]>10)*1    # Checking if delay is greater than 10 mins\ndf['ARRIVAL_DELAY'].value_counts()","f4cb961f":"# So we see that 2033 fights in our sample data has arrival delay more than 10 minutes","24b7561c":"df.head()","d5d0aee8":"df.info()","84779ed7":"# We have features like AIRLINE, DESTINATION_AIRPORT, ORIGIN_AIRPORT which are categorical data\n# Hence convert them to category","dd1ec95a":"# Categorical columns\n\ncols = [\"AIRLINE\",\"DESTINATION_AIRPORT\",\"ORIGIN_AIRPORT\"]\nfor item in cols:\n    df[item] = df[item].astype(\"category\")\n\n# Lets check data type again\ndf.info()","f9b90526":"# Now lets LabelEncode the categorical features for Model building\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ncol = ['AIRLINE', 'DESTINATION_AIRPORT', 'ORIGIN_AIRPORT']\nle.fit(df[col].values.flatten())\n\ndf[col] = df[col].apply(le.fit_transform)\ndf.head()","cf5da710":"X = df.drop('ARRIVAL_DELAY', 1)\ny = df['ARRIVAL_DELAY']","d23d372b":"X.head()","5e10c95d":"# Normalizing data X\n\nfrom sklearn.preprocessing import StandardScaler\n\n#Lets Use Sandardscaler to normalise the data\nscaler = StandardScaler()\nscaler.fit(X)\n\n# Scale and center the data\nX_norm = scaler.transform(X)\n\n# Create a pandas DataFrame\nX = pd.DataFrame(data=X_norm, index=X.index, columns=X.columns)\n","436ac467":"# Train test split\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=10, test_size=0.3)","c0d1665b":"import xgboost as xgb\nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV","c59a0354":"# Function for model evaluation\n\ndef auc(m, X_train, X_test): \n    return (metrics.roc_auc_score(y_train,m.predict_proba(X_train)[:,1]),\n            metrics.roc_auc_score(y_test,m.predict_proba(X_test)[:,1]))","32de166b":"# XGBoost Model\n%time\nmodel = xgb.XGBClassifier(max_depth=50, min_child_weight=1,  n_estimators=200,\\\n                          n_jobs=-1 , verbose=1, learning_rate=0.2)\nmodel.fit(X_train, y_train)\n\nauc(model, X_train, X_test)","bd55e4a3":"y_pred = model.predict(X_test)","44c94d7f":"import matplotlib.pyplot as plt                               # Visualization package\n\n%matplotlib inline\nimport seaborn as sns\n\nprint('Accuracy: ', metrics.accuracy_score(y_test,y_pred))\nprint('')\nprint('********************************************')\nprint('Confusion matrix')\nlr_cfm=metrics.confusion_matrix(y_test, y_pred)\n\n\nlbl1=[\"Predicted 1\", \"Predicted 2\"]\nlbl2=[\"Actual 1\", \"Actual 2\"]\n\nsns.heatmap(lr_cfm, annot=True, cmap=\"Blues\", fmt=\"d\", xticklabels=lbl1, yticklabels=lbl2)\nplt.show()\n\nprint('**********************************************')\nprint(metrics.classification_report(y_test,y_pred))","9a67f515":"import lightgbm as lgb  # ligther version of GBM ","20c4c268":"# Function to evaluate LightGBM model\n\ndef auc2(m, X_train, X_test):\n    y_train_pred = m.predict(X_train)\n    y_test_pred = m.predict(X_test)\n\n    return (print('ROC AUC Train Score: ', metrics.roc_auc_score(y_train, y_train_pred)),\n    print('ROC AUC Test Score: ', metrics.roc_auc_score(y_test, y_test_pred)),\n    print('Avg. Precision Score: ', metrics.average_precision_score(y_test, y_test_pred)),\n    print('Confusion Metrics: \\n', metrics.confusion_matrix(y_test, y_test_pred)))","824b6967":"def gini(y_test, y_test_pred):\n    fpr, tpr, thr = metrics.roc_curve(y_test, y_pred, pos_label=1)\n    g = 2 * metrics.auc(fpr, tpr) -1\n    return g\n\ndef gini_lgb(preds, dtrain):\n    y = list(dtrain.get_label())\n    score = gini(y_test, y_test_pred,) \/ gini(y_test, y)\n    return 'gini', score, True\n","9ddb3588":"%time\nmodel2 = lgb.LGBMClassifier(n_estimators=90, \n                     silent=False, \n                     random_state =94, \n                     max_depth=5, \n                     num_leaves=30, \n                     objective='binary', \n                     metrics ='auc')\n\nmodel2.fit(X_train, y_train, eval_metric=gini_lgb)","a772a7d0":"auc2(model2, X_train, X_test)","2284ae47":"import matplotlib.pyplot as plt                               # Visualization package\ny_test_pred = model2.predict(X_test)\n%matplotlib inline\nimport seaborn as sns\nprint(metrics.accuracy_score(y_test,y_test_pred))\nprint('********************************************')\nprint('Confusion matrix')\nlr_cfm=metrics.confusion_matrix(y_test, y_test_pred)\n\n\nlbl1=[\"Predicted 1\", \"Predicted 2\"]\nlbl2=[\"Actual 1\", \"Actual 2\"]\n\nsns.heatmap(lr_cfm, annot=True, cmap=\"Blues\", fmt=\"d\", xticklabels=lbl1, yticklabels=lbl2)\nplt.show()\n\nprint('**********************************************')\nprint(metrics.classification_report(y_test,y_test_pred))","76c0ed60":"!pip install catboost","5d221021":"import catboost as cb","28dc7b88":"cat_features_index = [0,1,2,3,4,5,6]  # externally defines the category index ","50e6ab5a":"clf = cb.CatBoostClassifier(eval_metric=\"AUC\", depth=10, iterations= 500, l2_leaf_reg= 9, learning_rate= 0.15)\nclf.fit(X_train,y_train)\n","a8d19ee3":"auc2(clf, X_train, X_test)","62485423":"import matplotlib.pyplot as plt                               # Visualization package\ny_test_p = clf.predict(X_test)\n%matplotlib inline\nimport seaborn as sns\nprint(metrics.accuracy_score(y_test,y_test_p))\nprint('********************************************')\nprint('Confusion matrix')\nlr_cfm=metrics.confusion_matrix(y_test, y_test_p)\n\n\nlbl1=[\"Predicted 1\", \"Predicted 2\"]\nlbl2=[\"Actual 1\", \"Actual 2\"]\n\nsns.heatmap(lr_cfm, annot=True, cmap=\"Blues\", fmt=\"d\", xticklabels=lbl1, yticklabels=lbl2)\nplt.show()\n\nprint('**********************************************')\nprint(metrics.classification_report(y_test, y_test_p))","92670462":"## Avg. Departure Delay based on AIRLINE","5a196a71":"## Departure Delay on Monthly basis","f81bcf09":"## Pandas Profiling","0ed615f7":"## Selecting Features","4a5dde51":"**Conclusion:-**\n- With the above analysis and the Models used we see that the best Model of 3 Models (XGBoost, LightGBM & Catboost) is XGBoost provideds 93% accuracy.\n- The other two Models show 92% accuracy.","1498643a":"**Observation**\n- From above both the plots we see that maximum delay's are in the month of February, June & December","1fe45ef3":"## Avg. Arrival Delay based on AIRLINE","f0de64d1":"## Top 10 Airports with max DEPARTURE_DELAY","c2d9b387":"## Loading Data","7b8eb580":"## Top 10 maximum delay flight numbers","9a9027ee":"### Import necessary packages","fbddb796":"**Observation:-** As per Pandas Profiling\n- High Correlation between:-\n    - MONTH & df_index, \n    - DEPARTURE_TIME & SCHEDULED_DEPARTURE, \n    - ARRIVAL_DELAY & DEPARTURE_DELAY, \n    - DISTANCE & AIR_TIME. \n- DESTINATION_AIRPORT & ORIGIN_AIRPORT has 3 letter apha values and some have numerical values hence need to work on. \n- DEPARTURE_DELAY has 572 (5.7%) zeros, which means flight on time so ignore\n- ARRIVAL_DELAY has 232 (2.3%) zeros, which means flight on time so ignore\n- DEPARTURE_TIME has 179 (1.8%) missing values\n- DEPARTURE_DELAY has 179 (1.8%) missing values\n- ARRIVAL_TIME has 185 (1.8%) missing values\n- ARRIVAL_DELAY has 207 (2.1%) missing values\t\n- AIR_TIME has 207 (2.1%) missing values","ca0027fb":"- Since the data we have is quite huge nearly 58 lac rows and 31 features, hence we will try to reduce by dropping few unwanted features.","abd1d7d3":"# Data Visualization","57525698":"## Data Summary","4aca7429":"**Objectve**:\nTo determine whether the flight will be delayed or not.","1d3c50e0":"**Observation**\n- Departure Time, Departure Delay, Arrival Time, Arrival Delay and Air Time has missing value. \n- Lets drop all missng values as its less then 2% of the entire data, and filling it with median or mode will not give a real or close to real time of departure or arrival. \n- Airtime missing is for the same data which has arrival and departure time and delay time missing. Hence drop all nan","9e39aa76":"### XGBoost","e652ab64":"**Observation** - Our sample data does not have data for 10th month","61bf220e":"## Data Sample","9eb176ed":"### Business Problem\n\nTo classify whether a flight will be delayed or not by more than 10 mins.","4e5e4078":"**Feature Columns**\n\nMONTH, DAY, DAY_OF_WEEK: data type int <br>\nAIRLINE and FLIGHT_NUMBER: data type int <br>\nORIGIN_AIRPORT and DESTINATION_AIRPORT: data type string <br>\nSCHEDUAL_DEPARTURE, DEPARTURE_TIME, DEPARTURE_DELAY,\nSCHEDUAL_ARRIVAL, ARRIVAL_TIME : data type float <br>\nARRIVAL_DELAY: this will be the target and is transformed into boolean variable indicating delay of more than 10 minutes <br>\nDISTANCE and AIR_TIME: data type float <br>\n\n\nYou can learn more about this dataset from the folowing Kaggle link.\nhttps:\/\/www.kaggle.com\/usdot\/flight-delays\/data?source=post_page---------------------------","450a5ee7":"## Converting Data Type","9724f22e":"## Missing Values#","f02f829a":"## Splitting Data in X & y","d36e8e6b":"### LightGBM","0dd35994":"### Catboost","9154489e":"# 2015 Flight Delay & Cancellation","66df9265":"## Top 10 Airports with max ARRIVAL_DELAY","1a28c6a1":"##  Arrival Delay on Monthly basis","2b855afc":"## Feature Engineering","de663b03":"**Now we have 9013 data with 15 features**"}}