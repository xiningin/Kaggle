{"cell_type":{"5f6bad0b":"code","c62f62de":"code","c1a2ab40":"code","ce3f7538":"code","a740b9c2":"code","a07bebf7":"code","94a7e86b":"code","1a38f95a":"code","f6d78af4":"code","988af782":"code","e4d0d888":"code","bc3d86b2":"code","4e3c784d":"code","d293d68a":"code","fd98ba08":"code","d136e8e9":"code","170fec5c":"code","147320fe":"code","246402bc":"code","c41882d3":"code","979c59c3":"code","9542f76e":"code","49012263":"code","0e1ed265":"code","fd828e9a":"code","26c1b48d":"code","f6caddcc":"code","108766dd":"code","37182fed":"code","4ed70644":"code","2cb04806":"markdown","4acbbe88":"markdown","fc0c1163":"markdown","7494ee5f":"markdown","53ea5a8c":"markdown","f0217923":"markdown","41ac1852":"markdown","bdd57dbf":"markdown","dbfd04bf":"markdown","ae04e510":"markdown","fcc42ce4":"markdown","80e722df":"markdown"},"source":{"5f6bad0b":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxIQEhANEBAVFRUOEBUQFxYWFhoWGBYWFhoWFxgVGRcaIiggGholHxUVITEhJSkrOi4uGB81ODMuNygxLisBCgoKDg0OGhAQGyslHyUvLSstLS0tKy0vLS0tLS0rLS0tLS0rLS0tLS0tLS0tLS0rKy0tKy0tLS0tLS0tLS0tLf\/AABEIAJ8BPgMBEQACEQEDEQH\/xAAcAAACAgMBAQAAAAAAAAAAAAAAAQIGAwQFBwj\/xABSEAABAwICAwgLDQYFAgcAAAABAAIDBBEFEiEx0gYHExZBUVSSFCIyNGFxc4GRlLIVIyU1UlVygoSTobPRJEJiY6LBM0NEg7HT4xdFZHTh8PH\/xAAbAQEBAAMBAQEAAAAAAAAAAAAAAQIDBAUGB\/\/EAEARAAIBAgIFCQcDAgUEAwAAAAABAgMRBFESEyEx0QUVMkFTYYGRoRQiUnGxwfAzNJIGQiRiouHxI3Ky4kNUgv\/aAAwDAQACEQMRAD8A9wVICAEAIAQAgBACAEAIAQAgBACAEAIAQAgBACAEAIAQAgBACAEAIAQAgBACAEAIAQAgBACAEAIAQHh27LdpiEFdVwRVbmMjlytaGRmwsNFy0n0rqhTi4ptGLZx\/\/EDFOnP+7i2FnqoZEux\/+IGKdOf1IthNVDIl2HH\/ABTpz+pFsJqoZDSY+P8AinTX9SLYTVQyJpMOP+KdNf1IthXVQyGk8xO3f4pbv5\/Ui2FjOlHRdkFJ3CPfAxTpz+pFsLCjCEo7UWbaexly3Abqa2tZX0slSXT9j8LTuLWAtc24IsG2Iu6PWOUrHEU0o3jsM8PNaa09q\/LnPi3ZVzgHdlO7YA9xHsrx3WnmfcrkvBNXVNeb4k+N9d0p3Uj2U108y81YPs15y4iO6+v6U7qR7Ka6eY5qwfZrzlxEd2Ff0p3Uj2U108yc1YPs15y4keOFf0p3Uj2VddPMvNWD7NecuIuONf0p3Uj2U108xzVg+zXnLiI7sa\/pbupHsprp5k5rwfZrzlxIndliHS3dSPYV1s8y81YPs15y4keOeIdLd1IthNbPMnNeD7NecuIjuzxDpbupFsK62eZea8H2a85cSPHTEOmO6kWwmtnmOa8H2a85cRcdMR6Y7qRbCa2eY5rwfZrzlxFx1xHpjupFsJrZ5jmvB9mvOXEXHXEemO6kWwmtnmTmvB9mvOXEOOuI9Md1IthNbPMc14Ps15y4hx1xHpjupFsJrZ5k5rwfZrzlxDjriPTHdSLYTWzzJzZhOzXnLiLjriPTHdSLYU1s8xzZhOzXnLiHHXEemO6kWwmtnmTmzCdmvOXEOO2I9Md1IthNbPMnNmE7NecuIcdsR6Y7qRbCa2eY5twnZrzlxFx2xHpjupFsJrZ5k5twnZrzlxJR7ssTcQxtXI5zjYNbHGSTzABlyU1s8yPk7BpXcFb5vidnjNV0mmtrXvlGkUsYizf70oZaIfwi7tPItilJbZM8+eHw9X3aFP8A\/Xveivt+bsjkVW7zEZHueKjgwdTGMZlaOa7mknzlYSrS6jppclUIr3438X\/sYuO2I9Mf1IthTWzzN3N2F7NecuIcdsR6Y\/qRbCa2eZObsL8C85cQ47Yj0x\/Ui2E1s8yc34X4F5y4l63sMcqavsrsmYycGYst2tFs3CX7kD5I9C30ZuV7nkcq4elR0NXG17592bL4ug8cEB84b4HxlXeXPstXbT6KMXvK+FmQaEGhBqkBCAgIM0Gy56fuzcTOW2Nyx7g8T7Fr6WUmzXSCF30Ze00+AEtd9VbqkbxaNcXZnc3Q0PY9XVQWsGyl7foSe+C3gGYt+qvn60bSP0DkqtrcNHNbPInufwl1ZN2OxwB4N7yeaw0X8BcWjzrGnDTdjfjcUsLS1jV9qX54XNKajlZfhIZGZSQ7M0gAg2Ivq18qji1vNsK9Ook4STv3\/Y1yobBFARKoIlARKoIoQiUKIqgiUAigEhAQgIQSgNvDcOkqHGOJo7UZnOccrI28r3vOhrdfo0XWSTb2GmtWhSjpTfyzfcl1m7JWUsHvcMDKlw0PmmzhjjzRRtc0ho+U43Piss\/dj3nCvaK\/vaWgupK3q7bfDYRz0Muts1K48rT2TF4y02kHmLlPcfcZ3xdPelNfxfD0Di9K8F1M+OpaBf3l93gfxQutID4LFNW+raI4+le1S8X\/AJl9930OTKxzSWOaWuGtrgWkeMHSFgdiaautqLDW1RpoIHUI4NlVERJPe85kbokhz\/5QHakBtswIN9a2XUUmjy1TlXrSjWfRexdVup26\/m723WK2BZam7noxgoqyGhQQgIRm7huFS1GYsADI+7leckUY53vOgeIXPgWUYt7jTVrwpdLe9yW9\/JfiL1vaVkEdS+ipi6XhIzLJM4ZGuMdg1sUesN98PbONzzLopWTsjw+UdZVpqpJWSdkvnm+vd1bD05dJ4oID5w3wPjKu8ufZau2n0UYsr6zINCDQgKgEIW7dfQRGjwvEKeJjGzwmCXIA0GaPWTbWSRLpOmzQtMJPTcWVpaN0U9+u6xq+7JSLDarGRdJqZ6butl7Jiw3FB\/qqfgZLckrLut6eGH1V4uMhZn1f9PV9sqb69vEtG4HHAYJ+GbFEykDSZABGCHZu7AAAIy6+W+ocsw87q2Rp5awurqxkpN6V9j22tbrONvm4iZ+xBDO19NIHv97cCHSMLdDnA8gcCBz35hZXls2GXItFa5uWxopZXGfVCKoIlARKARVBEoCKAiVQIoCKAEICEOzDFTxU0Ms8D5HVUs2UslMZZHFkbexa5riXl+scmtbEko3Z51WrXliHTpNKyV7q929vz3WHBhlNUX4CaoZbQRJTOlAPhkp81vO0Jop7mYyxlaj+tBeEkvR8Sy1OCvkgbTdhyCGMhx7CnY\/hH\/LminayRx0C1zyclls0Xa1vI8r2pOq6mmm\/86a2ZJptJfjuVqqwGNhy9liI\/Jq4ZaU+LOQ5hPnWt0+\/z2Hpw5QutsHb\/K1L6WOVW0j4ZHwyCz4zYi4OsAggjQQQQQeYha2mnZndTqRqQU47mYOUHlBuDyg84PIglFSVpK51I90NRlEcj2zsGptSxs4HhBfdw9Kz1j69pxywFNPSptxf+V2OzTCKeICzI4qxzYZA0WZTVrQeCnaP3YpG9qR9IX0LJWa7n6M5p6ynPa7yjtT65Q\/ui+9b15lUnhdG50T2lro3FjmnWHA2IWlq2w9OE4zipR3MghScELnubGxpc55sGtBJJ5gBpKpjKSirt2R13UMFJ32eFmH+lid3J5p5hob9Flzq0hbFBLpHBLEzqvRorZ8T+y+72dxoYniktRlbIQ2OPuIYxkij+iwcuvSbnTrUc77jOlhYx2y2t7+u\/wA31\/TuLLvT9\/8A2aT2o1nQ6Rzcr\/tvFfRnsq7D5gEB84b4HxlXeXPstXZT6KMWV9bCDQgIQYVA0IXbAP2rB8Ro9b6GRtdHy2b++APEyXzyLRU92akZR2popD9SzrK8SQdmDDoVpO8TGasz0PcrL2ThFbS634fK2sZ4GG7nAdWbrhcuMhdXPQ5Lr6rERff6M5EnbNyEktzB+W\/alwBAJHKRc+leOpNbj7udGE2nJJ2IcE2+awvzpcz0Ve9to1CkVQIoQiVSkSgIlARQCVBEoBIRggETbShDr7phkkgpuiUkMbhycI8GaQ+mW3mWc9lkebgXpyqVc27fLcvRI77m4gYaP3NL+x+xWX4EtB4fTw3CfvZ83m1W5VsvKy0TglHDyrVPanaV9l77uq3dYxcHjvPV+lqXqmWq5M+Jfnga1ZWYzCM0r6to13yktHjcAQPOo51FvM6eF5PqbIteaK3U1T5numkeXvfYucTcmwDR+AA8y1OTe1npUqEaMdCO4xLE2ghDoYJWsje6KYF0FU3gJmjSS0m7XtHy2Os4eIjlWUXbfuOfEUpTjeGyUdqffwe5nU3S0Dy18kmmehLYKgj\/ADYyLQVQ8Dm5Wu8OXUs5xfivy5yYStFNKPRntj3P+6P3RzqPBiWCpqZBTwO7l7wS+XwQxjS\/k06Bp1rGMG9rN1bFxg9GPvSy6l831fLf3EpsbyNMNEwwRuGV0hINRKP45B3Df4GWHjWWklsiaVh51XpVn8l1L5L7u7+RyGtA0Ba27nbGKjsQIUuO9P3\/APZpPajW6h0jy+V\/2\/ivueyrsPmAQHzhvgfGVd5c+y1dlPooxZX1sINCAhBoBqkLZvX14ir4439xVsfSvB1duLt9LmtH1itVZXiWO8ruKUBp5pqV17wSvi08oaSA7zix86yg9KJJbGaUfMtVF2biZT2q5dN6vEBFXsid3FZG+ncDquRmbfzty\/WWyvG8DGm7SFVUhgklpjrp5HRaeUNNmnztynzr5+cdGTR+i4OtrqEZ5ou2H7hI6mGmqGyujEkTXSNLc2m2ksJ1XPPfX5lvjQUknc8etyzOhVqU5RTs3Z7vP8RS8WYxlRUwxghkEzoW5u6OTtST4yCfOtVSKjKyPWwNedagpz3s1CsDrIlCESqUSEIFCiKoIlAIoBIQEIbmDUfD1EFPa4lmYw\/RJGb+nMrFXdjTiKuqpSnkn59XqQxSs7Innqb3E0z5B9Ek5R1coVm7s04Knq6EYmGKd7L5HvZfXkc5t\/HYi6ik1uNtWjTqdNJk3YhMBfsibRp\/xX\/qrpyzNXsVD4EdjdFXzw1EcTZ5WvpKWCBzhI8Evy8I8k3ue2kI08yznKSaODB4ajVjOTirNu3cv+LGucfdJ31BDUX1uc3gpfEJosp9IcsdO\/SR0exyp\/ozce7evJkTFQydsJ56fnY+IVA+o9jmkj6TQlovc7E12Kp7JU1LvTt5qzDPQR6m1VQRz5KeM+jO\/wD4S0ETWYue5KPm362XoHGKVna0scVKNV4m3lI5nTSXefGCE1iXRRj7G6m2tJy+nlsXozUocVmhlNQ15c9zXMcZPfM4cLEODr5hqOnlAWKm73N08LTlT1dtm\/xzMFZVSTPM00jpHu1ucbnxDkA8A0BHJsypUIUlaKMSxNrEUICoLjvT9\/8A2aT2o1uodI8vlf8Ab+K+jPZV2HzAID5w3wPjKu8uf+Grsp9FGLK+tgAIQaEGhBqkMlPO6J7Jmd1E9sjfpNIcPxAR7SFu30oGmqir4\/8ADxKljqAedwAaf6eC9K0UHa8WZzzKU7QbqT92omI7Y2NmlqHRPjmZ3UL2yt+kwhw\/EBdLV9hqPSt2pa2qgxCJrHMrqeOoaHjM1zmgA5gCLjKYtC8LER0ZXPseRKmtoSpXa+W+zyO1hu+C4UtVLUtj4aAN4NrA5rZM\/atFiSRZ1r2OorOFa6dzhxnJMqM46DbT2fL\/AJ6ilYzjE1ZIJ5o4WOy2PBNcC4cmYucbkar6P+Fz1JqbvY9\/AYOeFjouV1lk+40StZ3kSgIlUEShCKFN6hwaadplja3IHZMz5GRgusCQM7hc2I1c6zUWzmrYujRejN7d+5v6Iznc1UfyfWYNtXQf5Y1c5YfN\/wAZcCPFqo\/k+swbaaD\/ACw5yw+b\/jLgHFqo\/k+swbaaD\/LGPOWHzf8AGXAOLVR\/J9Zg200H+NDnLD5v+MuBnwykfSS1b5QGvoqOR4s5rgJJmtji0tJGnhrqxTTdzTi68K1COrd1KSXgtr+hXm2AA5tC1npRjZJDuoDewGlE9TTwaLSTMDvoA3f\/AEhyyirtI0Yqpq6M55J+fV6myaGeufPWsa3JNUSHM+SOMXcc4aM7hezXN1eBZOLk7o46NalhqcYTe23Um+7qXcHFqo\/k+swbamrl+WM+cKGb\/jLgLi1UfyfWYNtNXL8aHOFDN\/xlwDi1UfyfWYNtNXL8sTnChm\/4y4BxZqP5PrMG2mrl+NE5woZv+MuBjqNz1Qxj5S1jmxtzuyTRSFrRoLi1jibC4ubaFHTktplDG0ZyUU9r3bGvqjlrE6QQglSAgLhvT9\/\/AGaT2o1uodI8vlb9v4r6M9mXYfMAgPnDfA+Mq7y5\/wCGrsp9FGLK+swCpBoQaEBUDQhdqw9lYHDLrfhVUYXHl4KW1h4rviH1Fofu1fmZLbEo8gVrq8bkg9pJh0LbCV4pmMlZnotLJ2VgsT9b8KqeDPPwT9AHiAkZ92vPxsN78T2ORK+rxCT69nA4bhfWvKPtxlhy57HLmyX5M1ibX57AnzK2JpK+j17zGUBEoUiVQIoDLQUb55I4Ixd8rg0cw5yfAACT4AVUruxhVqxpQc5bl+eu4z49Vsle2KHTBSNMMX8em8kx8L3afFZZyfUjiwdGTvVqr3pbXw8FsXicwsHMPQsbndoRyQhGDoDbk6AALknmA5ShHCC6kXDi9UUkcbI8PE00oEkj5IBKyJv7sLAdBfyudyaBpW3RcVuueFPE0cRUa01GK3Wdm+9\/ZeJjNJiHzVB6jH+ie98PoNDDf\/Yf8nxIR0uLNfPKKeTNVFpkvAx4dk7kZXtIAHJbmHMp7972NmjgXTjB1Fs3bWt\/iZMmMdGPqcH\/AE09\/L0MdDBdr\/qfEODxfox9Tg\/6ae\/l6E0MH2v+p8RFmMaQKd4u0tu2kha6zgQbOawEaCRcK+\/l6EcMG99X\/U+JjpaHEY4mU\/uc17Ii5zeFpWykF9s1i7Vew9AUWkv7TKr7JOWkqttiWx5bifYuIfNMHqEf6K3l8PoatXhu3f8AJ8TNS4NUVJNPU4a2ISCzJoqURmKT91zsvdRnU4eG+iyWb2NWI50qPvwq6Vt8W967r9eRUa2hdDI+CVmV8Ti1w5iP+Ryg8oIWl3Tsz1oaupFTik0+4wZBzD0KXZloRyRt4VWmmlZO1oOQkFp1PY4Wew+BzSR51lGTTuaqtCFSDg1a\/XlkzNjdA2GT3sl0MzRNC46zE7UD\/E0gtPhb4UkrPZuMcPVc4e90lsfz4PejQWJuEqBFCFy3p+\/\/ALNJ7Ua3UOkeZyv+38V9z2Vdh8wCA+cN8D4yrvLn2Wrsp9FGLK+swCpBoQEIMKgaELtvZETGuwpxsMQpHBp5pGXykeGzyfqLTWWxPIyhvKSWnS1wsRoIPIRrHpWzpRMNzIxnkWqg9jRlUXWX3eqlEklZhjz2mIUrmjwPYDa3hyvefqBMTG8TKhNwmmjVwuBjntiqZTCASx7sucNeDlIOkWFwdPJ4tI8PRWlZ7D9CnXm6OtpR0na9r2\/PkerQbjqfsM0OZzmveJuEGUPz6LPabW1ADxeNdipR0dE+Sqcp1pYlV9zWy3VbI8rx2OnjnfBSvfIyIlrpH5bF41hlgLgar8p1aNJ5akFF2R9NyfiquIg5VIpfL\/dmgVgegRKEIlClg3LVkdPFW1UkHDZWw04bnLO1nMgf2wBt3AHp51tptJNs8rlONSpKlSg7XbfirW+pIY\/QD\/ydvrDtlXShkaVhMelZVfRBxgoPmdvrDtlNKGRfZeUO19EHGCg+Z2+sO2U0oZD2bH9r6Igccw\/X7jN0\/wDqX7KunD4TU8BjHt1nog93MO+Zm+sv2U04ZE9gxnaeiF7uYd8zN9ZfsppwyJ7Bi+09EHu5h3zM31l+ymnDIewYvtPRB7uYd8zN9ZfsppwyJ7Bi+09EL3cw75mb6y\/ZTThkPYcX2nog93MO+Zm+sv2U04ZE9hxfaeiD3cw75lb6y\/ZTWQyHsOL7T0QvdzDvmVvrL9lNZDIew4vtPREhj+HjVgzfWX7KOdPIyjhcZFWVT0Q+MGH\/ADM31l+yppU8i+z47tfRC4wYf8zN9ZfsppU8iez43tPRDxjEYKmiPA0Yp+xKmMN98MmidspeBcCwvE025\/xsnGUdi3EowrUsQtZK+kvpa31KstB6oKgSELlvT9\/\/AGaT2o1uodI8vlb9v4r7nsq7D5kEB84b4HxlXeXPstXZT6KMWV9ZgFSDQgIQYQDVIdLcziXYtXTVV7CGZpcf4D2r\/wClzljJXTQvZ3Ojvh4b2NiNUwCzZX9kN8Il7Y+bPnHmWFB3iWa2lZ1FYdGr8y74nV3O4l2LVU1Vewhma530D2r\/AOkuW+UdKLRqTs7lx3c0PA11Q0dzPlqW+KS4d\/W15868GvG0j7vkWtp4dRf9rsdKTfDqWvY2CGNsELQwMfcueAALlzTZmrQBe3hWevslY4lyG5uTqS2vIqVTLnkmkDMglmfIG3vlD3F2W9hcC9tXItE2m7o9rCUpUqShLqMRUOkihCJQp0MNromRTwTRyPbO6F3vb2sIMRkOtzXCxz83Is4tWaZxYujVnKE6bV43399u9ZHWwmgw+aKqqHsq420bY3OtJG8u4RzmiwyDUW\/is4wg03tOLE4rG0ZQi1BuV7bH1W7+8xfA3PX+iL9EtTzY1\/KXwR9eIvgbnr\/RF+iWp5smv5S+CPrxD4G58Q9EX6Janmxr+Uvgj68Q+BufEPRF+iaNPNk1\/KXwR9eIfA3PiHoi\/RNGnmxr+Ufgj68RfA3PiHoi\/RNGnmya\/lH4I+vEPgbnxD0RfomjTzY1\/KPwR9eIfA3PiHoi\/RNGnmya\/lH4I+vEPgbnxD0RfomjTzY1\/KHwR9eIvgbnxD0Q\/omjTzZNfyh8EfXiHwNz4h6If0TRp5v0Gv5Q+CPrxD4G58Q9EP6Jo0836E1\/KHwR9eIfA3PiHoh\/RNGnm\/Qa7lD4I+vEyYzQYdBFSTsZVvbWtlc28kTC3gnNabjIdZd+CrhBK93+eBjRxWLqTlTtFNdz4nJq6+DgH01PDK3hZY5XOlkY+3BiQANDWN18IdfMsLxSaRvVKvKrGdS2y+7v8XkcorA7gQCQhct6fv8A+zSe1Gt1DpHl8rft\/Ffc9lXYfMggPnDfA+Mq7y59lq7KfRRiyvrMAqACGI0A0INUgiEIXfdqeyqDCcT1uEbqGU8pey+UnzslP1gtEPdqNGb2xKPIOVK63MlN9RIaQt8XdXMGrM9KxiXsrDcMxDW6HNRSnl0aA53njB\/3F5WNhZn0XIFe1VwfWvVFbK88+uIlUIiUAigIoCKoLBgPeOMeSpfzHrdT6MjyOU\/1qHzl9EVxaT12CEBCAUIJCAoAQgkIBQgIQSEBACELFuk7ywXyVX+ZGt0v00eVh\/3lXw+hXVpPSEqAQgkIXLen7\/8As0ntRrdQ6R5nK37fxX3PZV2HzIID5w3wPjKu8ufZauyn0UYsr6zAIAVINCDQgKgaELtuU\/asMxTD9boA2uiGskt7toH+2B\/uLRV2SUjKHWikHSFtmtKLMFsYoysKErxsZVFtueg73p7Jo8TwvW4xiriHO9lr\/wBTIestWLhdXN+BraqrGWTvxOG1wcAeRwv6V40JOElJdR+g1aca1Nwe6Sa80atG6xcw8n9tBXpcqQWnGrHdJfnpY+a\/patJUqmFqdKnJr143NkrzD6kiUKRKASoLBgHeOMeSpfzHrdT6MjyOU\/1aHzl9EcGCnfIckcb3utfKxpebDls0E20hakm9x6s5xgryaS73b6mx7j1PRKj7iTZV0ZZGr2mj8cf5LiHuPU9EqPuJNlNGWRPaaPxx\/kuJqTROY4se1zXN1tcC1w5dIOka1izYpKSvF3XcY8w5+W3nULZizjTpGjwoSzFwg5xp8KE0WMOB0XGhCNMaEBCCQgIQEIWLdJ3lgvkqv8AMjW6X6aPLofvKvh9CurSekJUCKEBCFy3p+\/\/ALNJ7Ua3UekeZyt+38V9z2Vdh8yCA+cN8D4yrvLn2Wrsp9FGLK+swCAFSDQgIQaoGhCz72mIinxCnzdzUXpnX5RJoaOuGLXVV4MRdmcfHMO7Fqaikt\/gTOYPoXuw+dpafOrSd4oTW05rdBWqHu1GjKW2Nyz73mJ9jYhSyE2bI\/gHeKXtR5g7IfMttWN4M1xdmdDdBQdjVVTTWsI5iW\/Qf27APEHAeZeDVjaTP0HkytrcNF9a2eRw5u1kDuf\/APP0Xp\/rYHvg\/T8fofPz\/wAFy7f+2qvX\/lepsryT64iUKIqgiUBYcA7xxjyVL+Y9bafRkeRyn+tQ+cvojn4I4gVhBI\/YX6Ro\/wA2BYx6zrxiT1afxr6SNKSSRpyudI02BsS4GxAINjyEEEc4IWN2bVSpNXUY+SJU\/DSubFGXue85WtDjcn06BrJJ1AElFdmM4UYRcpJJLuRt4tUs0xhzZpCW8LUWBzFjQ1scOjRG0AAv1vI5tdk+o0YaEn73RjttH59b78l1fM7Ze33MbUuNnGL3NJ\/h4fhSPugs\/wCy\/gcUlL23VrdfT8dG31OtjtRNHNA9wyOjxg08ByBv7K5kbS1ujSztrX8J0rOV7+PocmGjCUJR3p09KW3+5N2v3ms2vnc3GHh07nis4EcDG17sjeyGNa4EaIwGgFw06FLv3jJ0aa1C2Wcb7W1t2bnnkjDuhd8GUwuX5YqEZcoHA3ikOcO1nPbL9VSXQXgbcNf26fVtn47Vs8N5SFoPaBCCQgIQEIWLdJ3lgvkqv8yNbpfpo8uh+8q+H0K4VpPSBUCQgIQuO9P3\/wDZpPajW6j0jzOVv2\/ivuezLsPmQQHzhvgfGVd5c+y1ddPooxZX1sAIAVINCAhDJBEXubG3XI4MHjcQB+JQGXEaN9PJJTzNyPidlc08h\/uCLEHlBBSLvtRGYY5HMLXtNnMIc08zgbg+kBUhc99CNsk1JiTBZuJUjJfrsDQ6\/hDXRjzLRR2NxM57UmUmTnUrbJKQp7rEwTrBsdYI1g8hC6U7mpo9K3bvFQ3D8UaNFbShj7ahIztrePtnj6i8XFQ0WfWf0\/XvpU38+JT61l235v8A7+i6OS5JzlSe6S\/PS5r\/AKpovUU8THfTkvJ\/7pE4n3aD4F584uEnF9R9FhqyrUo1FuaTGsDeRKoEUBYMA7xxjyVL+Y9bafRkeRyn+tQ+cvojnYNqrP8A2L\/zYFjHrOvF\/wDx\/wDevozPSRmsjbTi3D07bRXIHCxDSYiTYZmaXNue5zDkCL3lbrMaklh5uo+hLpdzz+T3Pvs+tmvVVLIWPp6dwcXtLZph\/mDliiOsQ851yEfJsDG7bEIQlXkqlRWS6Mfu+\/JdXz2ix+MNqHtaAAGQaALDTDEToHOST50lvLhJOVJN5y\/8mdaqwZjcMFZeUHIJRd4MTpDK6LII7Xz5Be9\/wWWj7lzkjipPHappb7btqVr78rm5i+DRx1Ukb+yODoaWapuahsj3tjLA0RkD3kXI0EciylFJ2d9hz0MVOVLSio6UpKO5q1778zWpMNboMkk9MJcTFLIHS6RG6Lhe3NgC8k2zHR22pRLvttNlSs7WUYytByVl16VtndbqFBRQ566KeGqZ2LAJeCM7bhsfBtDCcpDheQlpGgDVruokrtO5JVKmhTnBwek7Xs97vt9LMxYngMUVBHW++B7ooH3LmlkjpC8Pja22YFoYHazoKOCUbmdLFzninRdrXa67q25+O43n7maeOqoqZ\/CObVMMTiHAFs7C0PN8p7UA9z4daurSaT6zTHHVZ0ak42vF3X\/a7+veaGFYLBVdjuZwjG1Fe+CxcHFsTIWynTYAv7rT4RoWKgnb5m2riqlK+lZtQ0vFyt5GWDc7DOQYC9rajDTVwte4EibhWxNjcQBdpJA8bvArq092Rg8bOnH37XU1F2ys3f57Di7oKJsFTNAy+WNwAzaTpa06fSsZq0rHXharq0ozlvfE6e6TvLBfJVf5kazl+mjiofvKvh9CuLUemCEEgBUhcd6fv\/7NJ7Ua20ekeZyt+38V9z2Zdh8yCA+cN8D4yrvLn2Wrrp9FGLK+tgBACoAIYjQhcd7aGgfUwirfKJhMwwtA96c8EFgc5t3Zsw1Gw1a72Wqq5JbDJK56xu+Y6Ojq6uCFjp2Q2EhaC9rL9s4G17taXOA5wuVOxmfOzV3xvbaaZby8D9rwI8r8Jq7+ExS\/2vIfu1pl7tVPMyW2NikPGhbKsbxMIOzCM6FKLvEs1tPQtzz+ysGqqfW\/DJxVM8Ebrud+HZH4LlxkL7fzYehyVX1WIi++3mV94uCOcLzqFTV1IzyZ9pjcMsTh50X\/AHJrx6vU1aR2tvMbrs5Tp6NbSW6W08T+lsS6mE1Ut8HYzrzj6USoIlAWHAO8cY8lS\/mPW2n0ZHkcp\/rUPnL6I5OG1jYTJmj4Rs0JhLQ\/gzYuY64dZ3yBycqwTsd+IpOolouzTT3X3X71mZeyqXob\/Wv+0l45Gp08R2i\/j\/7CNVS9Df61\/wBpLxyGrxPaL+P\/ALGDE6vh5XzZMmcMAbmzWDGNYO2sL6GA6uVSTu7mdCk6VNQbvv8AVt\/c2ZMae6nNEWNyGJsV9N+1kdK1+vWC9w8RV0\/dsafZEq+uT23v6Wa8TaqN0med9T2LCDPHJFM0Z7TNly5sxzXBGUWLbKue29jVDA6NLV6b2NOO7Y1fz39ZirN0Dpi7hIY3NfV9luZ21ieD4LJoN8ttN9d\/Qo53LTwWrtoyd1HRvsz0rmOfHHufO\/IxonphSZRezI28HlDbm5IEY0nnKae30LHBpRjG+6WlfN7eI34+90TYHRsLWMp2C9\/9O57g7XrcJHNPgTT2WJ7GlUdRPa3J\/wAlb0tdG1PuvnklhnkDXup6mSoZe\/ah9vetH7gsLcujWq6rbuzVHk6nCMoxdk42fH5mjhuNyU7YGxhv7PUmqBNzdzmNjLSL9yQPxWKnbd8zdUwsajbk98dH1vcyT4+8uJjjZEBTNpY2szWiayVswc0uJJdmbrP9ldPL5GuODSVpO\/vaT79jVvJmni1e6pmlqXgB0zsxDb2BsBov4lJS0nc3UKKo01TXUdfdJ3lg3kqv8yNbJfpo4MP+8q+H0K4tR6YihAQgKkLjvT9\/\/ZpPajW2j0jzeVv2\/ivuezLsPmQQHzhvgfGVd5c+y1ddPooxZX1sAIAQAqQaENigqnQyxVDbZoJWSi+oljg4A25NCNX2EM1XjFTLNJVPnk4SbunNcW3HI3tSLNF7ALSqK6zNyNICy3JWVjW3cuu9dI2Saqw2Q2ZiVI+H6zQ4tt4mulK1V17t8iw3lNfE5hdG8WcxxY4czmkhw9IK2xekjCWxmJmuy0Ufdk4mye1XLtvU1wZXdjP0sroX07hyE2zNv1XN+us68bw+RjTdpGjU0phfJTu1wSOiJ58hLb+cAHzrwpxtJo\/RcJW11CM816mg7tZPpf3\/APlepW\/62ChPrjsf04HzOE\/wXLdSl\/bUWkvm9v1ubBXlH14igIlAWHc\/3jjHkqX8x63Q6Mjx+U\/1qHzl9EV1aT1wQxEgBQgIQSEBCAgBCCQgIQEICEZYt0veWDeSq\/zI1ul+mjy8P+8q+H0K4tR6YkICEBUhcd6fv\/7NJ7Ua20ekebyt+38V9z2Zdh8yCA+cN8D4yrvLn2Wrrp9FGLK+swCoBACpBoQEId\/cNQRVNbDSzxueycPYcpcCwhpcHgt5i0DTosSsajajdBbz0LdDvcRU1BUtoonz1DzGQ55aZAxsjXOawAADtQdQu7Vp0Bc+ulcz0EeXYJXmkqYKnSDTzNe4WsbNNnttyEjMPOuprSjY17mdvfLw8QYjOW9xUhtUy3KJB2x67XnzrVQfu2LURU36DdY1PdqKRYbY2Nuhq3QSRVDO6gkbKPCWEOA89l0NXVjVuL\/vhwNFW2qj0x18EdQ085ADTb6vBn6y8PERtK59nyDW0qUqeTv4MqFY3QDzFdvJr041KD61dfnkcP8AU0HRlQxkd8JWfye1ffzMjXXAPOvLas7M+ppzU4KS3PaBQzEgLFueF6HGAB\/lUv5j1uh0ZHj8p\/q0PnL6Ir\/Au+Q7qlaT1XOOaDgXfId1ShNKOaDgXfId1ShNKOYcC75DuqVCaUcxcC75DuqVSaUcw4F3yHdUqE0o5i4F3yHdUqk0o5hwLvkO6pQaUcw4F3yHegqE0o5i4F3yHegoTSjmHAu+Q70FCaUcw4F3yXegqk0o5hwTvku9BQmkszv7phaiwYEW96q\/zI1ul+mjzcO\/8ZV8PoVxaT0xIQFSAhC4703f\/wBmk9qNbaPSPM5W\/b+K+57Muw+aBAfOG+B8ZV3lz7LV10+ijFlfWYBUAgBUg0ICEOxud3Rz0DnyUwjzyNDS57MxDddgb6ATa\/PYcywnDSRU7Ms+6XfJnqKSkjhkdDOS\/skx9r3IAbkOsNdmLtBuC211zuk07GdyhySOcS97i5zjcucS4k85J0krqhHRVjXJ3LrupPZWF4XiGt1OXUEnKdHcOcfFGD\/uLVH3ajWZXtiUiQaFlXV43Mab2jYdCzpyvFEmrM9DdJ2VgtNNrfhdQad3k32DR4rPg6pXBjIb34nsciV9XiIp9ezgVmRtwRzrlwlXVVoy7\/R7D6blbC+1YOpS62rr5ravVGGldotzFbeUKWrry79vmcX9N4rX4GKe+Ozh6GUriPeIoDfwrGqikzmmmMZlyh1msdfLe3dtNu6OrnWUZuO45cThKWISVRXtu3\/nUdDjtiXTXfdw7Cz10ji5nw2Xq+IcdsS6a77uHYTXSHM+Gy9XxFx2xLprvu4dhNdInM+Gy9XxDjtiXTXfdw7Ca6Q5ow2Xq+Icd8S6a77uHYTXSJzRhsvV8RcdsS6a77uHYTXSJzRhsvV8Q474l0133cOwmukOacNl6viHHfEumu+7h2E10ic04bL1fEOO+JdNd93DsKa+ROacPl6viLjviXTXfdw7Ca+Q5pw+Xq+Icd8S6a77uHYV18ic1YfL68Q474l0133cOwmukOasPl6viHHfEumu+7h2E10ic1YfL1fE5uLYzU1ZY6pmMpiDg27WNtmy5u4aL3yt18yxlUct5uoYOnQd4GgsDqBCAqQCgLjvTd\/\/AGaT2o1to9I8zlb9v4r7nsy7D5oEB4buy3GYhPXVc8VI97JJczXB0YBFhpsXArphOKitpGcbiDinQX9eLbWWsjmQOIOKdBf14ttXWQzAcQcU6C\/rxbaayGYDiDinQX9eLbV1kMxYfEHE+gv68e2mshmSzDiDifQX9ePbTWQzJZj4g4n0F\/Xi201sMxZhxBxPoL+vFtprYZksx8QcT6E\/rx7authmTReRa9zm5Wt9z8Tw6opnM4RraiC7mHNMzTl0ONr8HGNPOVpqTjdNMzintTKpxCxPoT+vHtra6kGrXNejJPcRj3BYn0F\/Xj2lqo1FFNNmc4t7i57gdzFZGyvoaqndHFW09g4uYQ2RtwNDXE37e9\/4ApXcZLYzKi5QlpLq2nEZuNxEgXo33tp7ePbXlaqWR91HlXCNJuovJ8DE3cTiIcT2G6x\/ij8fyl6GLarUqcv7lsf5+bz5vkitTweMrx0v+lJ3i9tvlbf3buoycS8R6G\/rx7S8\/VSyPpedMH2i8pcA4l4j0N\/Xj201Ushzpg+0XlLgLiXiPQ39ePbTVSyJzng+0XlLgHEvEehv68e2mqlkTnPCdovKXAOJeI9Df149tTVTyHOeE7ReUuAcS8R6G\/rx7aaqeROc8J2i8pcBcS8R6G\/rx7aaqeQ5zwnaLyfAOJeI9Df14ttNVPInOWE7ReT4BxLxHob+vFtpqp5E5ywnaLyfAXEvEehv68e2mqnkOcsJ2i8nwDiXiPQ39eLbTVTyJzjhO0Xk+AuJWI9Df14ttNVPInOOF7ReT4BxKxHob+vHtpqp5DnHC9ovJ8A4lYj0N\/Xj201U8ic44X415PgHErEehv68e2mqnkTnHC\/GvJ8A4lYj0N\/Xj2k1U8ic4YX415PgHErEehv68e0rqp5DnDC\/GvJ8BcSsR6G\/rx7SaqeROcMN8a8nwDiTiPQ39ePaTVTyHOGG+NeT4BxJxHob+vHtJq5ZE9vw3xryfAOJOI9Df149pNXLInt+G+NeT4Fo3udzdXTVnDT07o2cA9mYuYdJLCB2rieQrbShJS2o4OUcVRqUdGEru6z7+49QXSeECAEAIAQAgBACAEAIAQAgBACAEAIAQAgBACAEAIAQAgBACAEAIAQAgBACAEAIAQAgBACAEAIAQH\/\/2Q==',width=400,height=400)","c62f62de":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c1a2ab40":"df = pd.read_csv('..\/input\/voterpersuasiondataset\/Voter-Persuasion.csv', encoding='ISO-8859-2')\ndf.head()","ce3f7538":"categorical_cols = [cname for cname in df.columns if\n                    df[cname].nunique() < 10 and \n                    df[cname].dtype == \"object\"]\n\n\n# Select numerical columns\nnumerical_cols = [cname for cname in df.columns if \n                df[cname].dtype in ['int64', 'float64']]","a740b9c2":"print(categorical_cols)","a07bebf7":"from sklearn.preprocessing import LabelEncoder\ncategorical_col = ('CAND1S', 'CAND2S', 'I3', 'CAND1_UND', 'CAND2_UND', 'MOVED_AD', 'Partition')\n        \n        \nfor col in categorical_col:\n    label = LabelEncoder() \n    label.fit(list(df[col].values)) \n    df[col] = label.transform(list(df[col].values))\n\nprint('Shape all_data: {}'.format(df.shape))","94a7e86b":"from scipy.stats import norm, skew\nnum_features = df.dtypes[df.dtypes != 'object'].index\nskewed_features = df[num_features].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nskewness = pd.DataFrame({'Skew' :skewed_features})\nskewness.head(15)","1a38f95a":"print (\"Skew is:\", df.CAND2_UND.skew())\nplt.hist(df.CAND2_UND, color='green')\nplt.show()","f6d78af4":"from scipy import stats\n# Print out Skewness and Kurtosis\nprint(\"Skewness: %f\" % df['HH_ND'].skew())\nprint(\"Kurtosis: %f\" % df['HH_ND'].kurt())\n\nfigure = plt.figure(figsize=(10,6))\nplt.subplot(1,2,1)\nsns.distplot(df['HH_ND'] , fit=norm);\n(mu, sigma) = norm.fit(df['HH_ND'])\nplt.ylabel('Frequency')\nplt.title('HH_ND Distribution')\n\nplt.subplot(1,2,2)\nstats.probplot(df['HH_ND'], plot=plt)\nplt.show()","988af782":"plt.style.use('fivethirtyeight')\nnumerical_df = df.select_dtypes(exclude='object')\n\nfor i in range(len(numerical_df.columns)):\n    f, ax = plt.subplots(figsize=(7, 4))\n    fig = sns.distplot(numerical_df.iloc[:,i].dropna(), rug=True, hist=False, label='UW', kde_kws={'bw':0.1})\n    plt.xlabel(numerical_df.columns[i])","e4d0d888":"from sklearn.model_selection import train_test_split\n# Hot-Encode Categorical features\ndf = pd.get_dummies(df) \n\n# Splitting dataset back into X and test data\nX = df[:len(df)]\ntest = df[len(df):]\n\nX.shape","bc3d86b2":"# Save target value for later\ny = df.CAND2_UND.values\n\n# In order to make imputing easier, we combine train and test data\ndf.drop(['CAND2_UND'], axis=1, inplace=True)\ndf = pd.concat((df, test)).reset_index(drop=True)","4e3c784d":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=0)","d293d68a":"from sklearn.model_selection import KFold\n# Indicate number of folds for cross validation\nkfolds = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Parameters for models\ne_alphas = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007]\ne_l1ratio = [0.8, 0.85, 0.9, 0.95, 0.99, 1]\nalphas_alt = [14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5]\nalphas2 = [0.00005, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008]","fd98ba08":"from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LassoCV\n# Lasso Model\nlasso = make_pipeline(RobustScaler(), LassoCV(max_iter=1e7, alphas = alphas2, random_state = 42, cv=kfolds))\n\n# Printing Lasso Score with Cross-Validation\nlasso_score = cross_val_score(lasso, X, y, cv=kfolds, scoring='neg_mean_squared_error')\nlasso_rmse = np.sqrt(-lasso_score.mean())\nprint(\"LASSO RMSE: \", lasso_rmse)\nprint(\"LASSO STD: \", lasso_score.std())","d136e8e9":"# Training Model for later\nlasso.fit(X_train, y_train)","170fec5c":"from sklearn.linear_model import ElasticNetCV, LassoCV, RidgeCV\nridge = make_pipeline(RobustScaler(), RidgeCV(alphas = alphas_alt, cv=kfolds))\nridge_score = cross_val_score(ridge, X, y, cv=kfolds, scoring='neg_mean_squared_error')\nridge_rmse =  np.sqrt(-ridge_score.mean())\n# Printing out Ridge Score and STD\nprint(\"RIDGE RMSE: \", ridge_rmse)\nprint(\"RIDGE STD: \", ridge_score.std())","147320fe":"# Training Model for later\nridge.fit(X_train, y_train)","246402bc":"elasticnet = make_pipeline(RobustScaler(), ElasticNetCV(max_iter=1e7, alphas=e_alphas, cv=kfolds, l1_ratio=e_l1ratio))\nelastic_score = cross_val_score(elasticnet, X, y, cv=kfolds, scoring='neg_mean_squared_error')\nelastic_rmse =  np.sqrt(-elastic_score.mean())\n\n# Printing out ElasticNet Score and STD\nprint(\"ELASTICNET RMSE: \", elastic_rmse)\nprint(\"ELASTICNET STD: \", elastic_score.std())","c41882d3":"# Training Model for later\nelasticnet.fit(X_train, y_train)","979c59c3":"from lightgbm import LGBMRegressor\nlightgbm = make_pipeline(RobustScaler(),\n                        LGBMRegressor(objective='regression',num_leaves=5,\n                                      learning_rate=0.05, n_estimators=720,\n                                      max_bin = 55, bagging_fraction = 0.8,\n                                      bagging_freq = 5, feature_fraction = 0.2319,\n                                      feature_fraction_seed=9, bagging_seed=9,\n                                      min_data_in_leaf =6, \n                                      min_sum_hessian_in_leaf = 11))\n\n# Printing out LightGBM Score and STD\nlightgbm_score = cross_val_score(lightgbm, X, y, cv=kfolds, scoring='neg_mean_squared_error')\nlightgbm_rmse = np.sqrt(-lightgbm_score.mean())\nprint(\"LIGHTGBM RMSE: \", lightgbm_rmse)\nprint(\"LIGHTGBM STD: \", lightgbm_score.std())","9542f76e":"# Training Model for later\nlightgbm.fit(X_train, y_train)","49012263":"from xgboost import XGBRegressor\nxgboost = make_pipeline(RobustScaler(),\n                        XGBRegressor(learning_rate =0.01, n_estimators=3460, \n                                     max_depth=3,min_child_weight=0 ,\n                                     gamma=0, subsample=0.7,\n                                     colsample_bytree=0.7,nthread=4,\n                                     scale_pos_weight=1,seed=27, \n                                     reg_alpha=0.00006))\n\n# Printing out XGBOOST Score and STD\nxgboost_score = cross_val_score(xgboost, X, y, cv=kfolds, scoring='neg_mean_squared_error')\nxgboost_rmse = np.sqrt(-xgboost_score.mean())\nprint(\"XGBOOST RMSE: \", xgboost_rmse)\nprint(\"XGBOOST STD: \", xgboost_score.std())","0e1ed265":"# Training Model for later\nxgboost.fit(X_train, y_train)","fd828e9a":"results = pd.DataFrame({\n    'Model':['Lasso',\n            'Ridge',\n            'ElasticNet',\n            'LightGBM',\n            'XGBOOST',\n            ],\n    'Score':[lasso_rmse,\n             ridge_rmse,\n             elastic_rmse,\n             lightgbm_rmse,\n             xgboost_rmse,\n             \n            ]})\n\nsorted_result = results.sort_values(by='Score', ascending=True).reset_index(drop=True)\nsorted_result","26c1b48d":"f, ax = plt.subplots(figsize=(14,8))\nplt.xticks(rotation='90')\nsns.barplot(x=sorted_result['Model'], y=sorted_result['Score'])\nplt.xlabel('Model', fontsize=15)\nplt.ylabel('Performance', fontsize=15)\nplt.ylim(0.10, 0.12)\nplt.title('RMSE', fontsize=15)","f6caddcc":"# Predict every model\nlasso_pred = lasso.predict(test)\nridge_pred = ridge.predict(test)\nelasticnet_pred = elasticnet.predict(test)\nlightgbm_pred = lightgbm.predict(test)\nxgboost_pred = xgboost.predict(test)","108766dd":"elasticnet_pred = elasticnet.predict(test)\n# Combine predictions into final predictions\nfinal_predictions = np.expm1((0.3*elasticnet_pred) + (0.3*lasso_pred) + (0.2*ridge_pred) + \n               (0.1*xgboost_pred) + (0.1*lightgbm_pred))","37182fed":"#submission = pd.DataFrame()\n#submission['Id'] = test_Id\n#submission['resultadoTeste'] = final_predictions\n#submission.to_csv('house_pricing_submission.csv',index=False)","4ed70644":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTExQVFhUXGCIbFxgYGB8bIBsgGyAaHR8fHRsfHSggIB8lHSAgIjEiJSkrLi8uHx8zODMtNygtLisBCgoKDg0OGxAQGy0mICYtLS0yLi8tLS0tLS0tLS0tLS0tLS0tLS0tLS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAN8A4gMBEQACEQEDEQH\/xAAcAAABBAMBAAAAAAAAAAAAAAAAAwQFBgECBwj\/xABMEAACAQMCAwUDBgkKBAYDAAABAgMABBESIQUxQQYTIlFhB3GBFCMyQpGhUlNykpSi0dLwFjNUYmSCk7GywRVEwvEkQ2Nzg+E0dMP\/xAAbAQEAAgMBAQAAAAAAAAAAAAAABAUBAgMGB\/\/EADoRAAEDAgQEAwcDAwQCAwAAAAEAAgMEERIhMUEFE1FhcZHwBhQigaGxwTLR4RVC8SMkM2JSgjRywv\/aAAwDAQACEQMRAD8A7jREURFERREURFERREURFERREURJXFyiDLuqDzYgD7TWQCdFgmyhrjtpw9Od3AfyXDf6c10EMh\/tK0MzOoTB\/aVwwf8AM\/ZFKf8Aorb3aXp9lp7zF1WF9pfDD\/zP2xS\/uU91l6fZPeYuqf2\/bXh78ruEflOE\/wBWK1MMg\/tK3EzDuFM213HIMxujjzVgw+0VzII1W4IOiWrCyiiIoiKIiiIoiKIiiIoiKIiiIoiKIiiIoiKIiiIoiKIiiJlxXi0FsmueVI16FjjPoBzJ9BWzWOcbALVzg0XJXPOO+2CJcrawtIfw5PCvvCjxEe\/TUtlGT+oqI+saP0i6ovFvaDxCfIM5jX8GHwY\/vDx\/a1Sm00bdlFfUyO3sogcMuJbgQurd+\/ITNoY53G8hG56eeay6WONtyRZZZTzzOLWgkgXPgN0jBw8tHM+uMGHGqNiQ5BIXKjGk4JGRnPpTns5gj3tdPdJOQZ\/7QbfPwRNbxLHBL8oRlk+ngHVFgqDqU8+fPrhvKuYqgWudY5fVdjQOEkcZc34wDrkL9endORwuL5Q8HyqLAVmjkOdMmkBsf1c8uuCOtZdUhobcG7lqyiLjJZw+DuM\/Dr8k0SyzA04kjwjhGTJDjUCQcEYI2PIkjqK3E7DIYxqFzdSSNhbMf0uJAz6JduFXEckSqrGSRQ8XdMHLA5GVMZJyCrAjmMGstljkbiBuFiSnmhkwPBDum6luGdu+I25wLh2A5pN4+XQlvEPgRWrqeN23kjaiRu6vHA\/bChwt3AV83iOofFDuB7i1Rn0Z\/tKlMrQf1BdE4Pxu3ul128qSDrg7j8pTuvxAqG9jmGzgpbXtcLgqQrVbIoiKIiiIoiKIiiIoiKIiiIoiKIiiIoiKIkru5SNGkkZURRlmY4AHqTWQCTYLBNsyuVdrPa1zjsV9O+cf6EP+bfm1OipN3+Sgy1mzFzPiE80p7+dpGDnHeyaiNuYDY5DyHLyqUXMjaeyjNZJM8DqbZ6eaciCCCdo5szxGPKyQNjBZQyHDAHrgqRsc5rlzZJAx0QyOt+ik+7xQukjnJDm5C2YJ8fymYvWNubdghXvNasFAddmBGsbkHI5\/grWwhONzi64OVui5uqW8pjGsALSTi3PS\/h60Ws9y8hQuzM0YCoxO6heQGMYxWW08bWBgGQWJa2eSUyuccR1Iy18Elo64Hvrqoye8F4eZ54oVzmRwufIE7n4Df4Vh7sLSVtGzE4BL9qOF\/JryeDGySHTv9U+JP1CKxG\/GwOWZWYHlqidA8hvzrewXO5W0bspRlZlaMgoQeWM8s+pO1cXU8bmYCMtclKjrZ45eaHfFa1znla2\/bJPYeKSYnVgji4GWLICwbVq1huYOc\/aaGI8wOxZAaI2obyXRlgLib4t\/BYLW7pbgZgc+GdnbUmdsMNILDrkY\/B9a5858bHPlGV8rZ5LsKWOeVkVMbkgXvYZ7jXyW5hmt5ZGiZswPpM0JOkb4B1jkGI2zzrvdrwL7qHZzHG2y6D2U9rLriO+XUvLvkHiH5aDY+9cH0NRZaPdnkpcVZs9dYsL6OZFkidXRuTKcj\/v6dKgOaWmxU4ODhcJxWFlFERREURFERREURFERREURFERRFC9qe08FjF3kzeI\/QjH0nI8h5DqTsPiAekcTpDYLnJK2MXK4J2t7XXF8+qZtManKRKfCvr\/WbH1j64wNqtI4mxDLzVXLM6U2SC2qW00XylFnhkj1fNSHYMSoIII8SsrAg53HIiuXNdK0Oh0vndSvdmUz3R1QINsgOu1+1v3Ucl1J3Rg1sYtevQdwGwwyNttmP2+6urYWNeXjUqPJVSSRNiOjb2y690mK6qOsqpJAG5Owx69KIrZ2Z7E3Fw8qyQzRhYXZC6MgZ8YRckeZz8KjyTtaBY7qTHTucTcbKHWymtyks1q+jONM8bqrZ5jJAOceR6V0xNdkD5Lnhcw3cF172eRcMuPn7a27qeHZgSx0Fgw2JOlgRq35+YFQJzK34XG4KsIOU74mixTj2hQcNhX5Vd2\/eyN4EA1ZYgEgEghRgdT089hWIDI74WGyzOI2jE8XXGZraW6d3t7Rgg20QI7hfLJ3OT5nGfTlVgCGCzj5quILzdrfJS\/H+xNxCls0cMzmWENIFjZir5JKkAeHClRjzBrSOdribnddJKdzQLBVd4irFWBVgcEEYII5gjoa73Ue1itWXPSiJW2u5Iw4R2VZF0OvRhkH\/MVydC0yCQ6hd21MjYTCP0k30zv4p7bwR3LW8MSLBMy6ZDJIdDvk4IPiIJGB5Z6CuQmdEzFORrlZSDTMqJMFICbNub2vkM\/X0SvZztJc2EpaFts+OMnKPjbcDr5MN\/hXaSJsgzUSOV0RyXeOyHa2C\/j1RnTIv85Ex8S+v9ZfJh9x2qrlhdGc1aRStkFwrBXJdUURFERREURFERREURFERRFXe2va2Lh8OpvFK20Ued2PmfJR1Pw511hhMhsFyllEYuV584vxeS5mM1zJ4mIBY8kBONgOSjPL3+pqzOGGMm2QVawPqJQ2+ZNs8gEvcP8AJzcW6mGeNwoWQICQfCwZWPiBx4SudiWBzXNrXSObJcgW0Xd7mwsdAWguxfqv026KKVQBgDA8hUkAAWChEkm5W2KLCtfs64LBc3SiV2Xu\/nSpQFGVMEhm1DTvzyCCPKuFQ9zW5bqRTxtc7PZR3a\/hEVrcvbxu7lDhiyaMZwQB4iW8J+kcZreJ5e3EVrMwMdYK89jO3cdlZRrcySTOznQi4YxRDC7k46gkKTnBXGBUWaAvecIt+6lRThjBiN1Uu3l+Z7yRxOZojhoTnYIwB0hceEqcqQQDkb71IgbhZa1io85xPve42UpwLtgLGx7m2Gq4lYvJIRkR9FAB+k2kA+QJ67iub4eY+7tAt2Tctlm6lZ4h2z+W2D2t2Pnkw8MwGzMnRlHJmXUoYbb746mw4H4maLJn5jC1+qgext40V5Eyzdwur5x84Ghd2B6HIBABB3x1xXWYAsOV1xgcQ8Z2V\/7Vdv4ru0nS2kkhkUgjOFM0YOGCnmNjq07MQPeKix05Y8FwuPspclQHtIac\/uqv7NOB29zP88xHdAuyFBodfojx6vCQzA4K749+O1TI5rct1wpo2vNzsoLtFw1Led4EkeQxkq7Mnd5I22Gpjj1OM+7eusbi5uIhcpGBrrAqKf8Ajaui5rR0B5gHG+\/nWCAdUBI0TyO++aEEvdqnehhLoGpAcqQWA1FTkHBP1F5VGfeIulcSR0U6PDUiOnY0Ndc3cTrfrfIW9aJcTvZ3RMEwLRt4ZYzsw9x5g8iDtzG9dxaRmY1UU3heQDou7dhO2Ud\/Fg4SdB85H\/1J5qftB2PQmsmhMZ7KyhmEg7q01wXdFERREURFERREURFEUV2m49FZW7Ty8hsq9XY8lHv+4AnpW8cZe6wWkjwxtyvOXGeMPd3BmuJAC7AajnSgJwAAMnSueQ35nckmrQlkEd9gqyNj6qYMGpNs8glLuV4Fns9cMsZkDK6rnBA5q3PcbH4itY2Fz+bc2I0XSaQMj93wi4J+Lc9vko7FSFDWdNFla4osLeOVgCoJAbZgDsRnIBHUZAOPQeVLBZBOiJZS2NTFsAAZOdgMAe4DbHQbVgBCb6rGKyi2HpWESiLz6fx6+tYWUMOeN\/fWUWrL0\/j7\/wCNqIsad6JZbrIwUrqIVsFhnnjJGR1xWLC90BICxLIWOp2LNtuxycDAHPyA+zFZAtohJOqSasrC1NFhGKInVrxFkieBmQRSuh1MmTGQQMhhvjz9CfOo0gwOMzibAaKdC7nMbTNaLl36tNdjtZOkmksrrVBKrPE2VkTJVgQDjpsQcFT6iugwyszGRXBwdBIRuCvQPZDtHHfW6zJ4WG0iZ3Ruo9QeYPUeuQKuWMxusVZxSCRtwpuua6IoiKIiiIoiKIsOwAJJwBuSelEXnb2hdqjfXJKn5iPKxDlnzc56t9wx61awxiJlz81VTPdNIGt8Aou6je2WW2mhhYyBHjkGlmUHScq65yrDIxnG\/LIrDLyP5jXfDbRdZcMERgfHaQHM326WUaKkqCt1rCyrBwbs4kpKz3AtpdQCpJG2+oAglhsvPrUGTiETH4NVcQcDq5YecG\/Cc9tPC9\/omXEOCvDcm0kMayB9JZnCruAQdTYwCDkZ\/wA6k85oZzCclWtp3uk5TRdykYezduNpb+JD\/wCnFLMPzgqj7M1CdxSEHJXcfszXOFy23zH5ISfaHsm9vGk8csc9u50iWPbDeTKfonn5\/DbMqCqZNoqqroZaZ2GQWSVj2VmdFkMtrGjqGUyXEa7H0ySPdjNYkrIWGxK3h4XVSjExhI8CfsnrdiJjG8kUtrP3a6nWCbWwA5nTpH3eW1YjrYnmzSsz8MqYG4pGEeII+4VdUeRqSoKdcNsmmkEYaNM53lcIoA8yen2nlXOWVkbcTiu1PTS1D8ETSTrkL5Jzx3gc1rIElAyyh1ZW1KwPUHbO+32emcxyNkF2rWWJ0bsLhms8B4N8pFxiRUaKEyKpH09O7DVyGF338x0zjnJUsZII9yu8dDM+A1AHwA2v39b9UjwnhTTvpEkUY\/DlcIoJ5DJ3J9wPrWZqiOL9ZWtNRT1N+U0m2tgclKX\/AGGvY1aQRrKi5y0LrJsOuAdXryoypjdoViSkmj\/U1QHDOHy3EqxQrrkbOldQGcAsd2IHIE12c4NFyo7WFxsFueGtHcJBc5tyzaSZEbw5zvpAyRsdxt61ylqGMZjJyXeno5Z5RE0ZqR7Q9l3tUSUSwzwOxVJImyMjfDDoee2\/KsQVLJv0raqo5aZ2GQW8clAYqQoifcOkLobXu4dUkimOViqMuxyus48J8icbcs1GeTG8yPd8PRTYwJ42wRR3fcm\/Ua6dlK9keOycMvCXBChjHcR+inB5bFlOSPiM7mt5YxKzL5LhC8xPz+a9EW8yuquhDKwDKRyIO4I9CKqSLGxVsDcXCUrCyiiIoiKIiiLnXtk7SdzALWM\/OTjx46R8j+cfD7g9S6SLE7EdvuolXLhbhGpXHLAQ5YXEchR420MhAw4HhyCPEM4B5czUuUyFwa0AjdRqdsOB7pHEOH6ctT47JqSeu\/Tf02FdmtDRYaKM97nuLnG5O5WRWVhZK6iqD6zYPu5n7gftqJWy8qEka6K04PSiprGRkZXufAZqbnQr3eRtKrsp89DBT95P2V5fAcGJfUfeme8cgfqtf7W+\/wBE89qi96ltcn6UtqhJH4yMlSfvAq+p3B9KcWy+c8QiNPxEtZlmQPPL8LQWGu1uZdbIYe7xgA57x9J5g9Aaq6KBs0mF2i9jx\/iMtFADHqd+lrfun\/s9lZvlFlcMXguUbGoDKNGhcP5fVPTovlUkOZDU4I9Pz6yVNPBPV8N95qT8Q064Tl062Iv+VBdjOFvPF3cZAYJI65BOdBYgbb71GljD6gtHVWtHVml4U2Zwuc8vEm3yTjhdxxGzkW5EZjC7EtBIFIYYIJJAIO3xxVlFw6NrgcS83We0VRURGN8YAPY5fVMCBkn7gMfZ9tWi82mV5JoeOXfCnS\/5LYGfgcVA4hFjjuFdcBrPd6kE6HXw3\/f5K9NOtxwx43I76zIeEk41RyEKUzvyYj9QVX0NWIgcWi9Bx\/hD6idjoRm777nwIz8QVBiQW1q7n6UoMYP9QYaVvidKe4yDpXShaZJHVD9vX0XDj72UtPFw+HxP89ybkpLh1oxXH4Kl3PQAbn78KB1JUdahOL6qfufoF6CPk8JoBi0aM+rnH8n6DwTfgnHbi1ugyNp1fRIBA23KOOTDGef3dJFTSGnAcw\/yqfh\/FxxN5gqWix06t8D+evYqd7b20fyu1u4BoS5iaXA20yKVV8Y9TnPnqrNRUcynauXCKHkcTex2wPz\/AMgpt2\/uXd+Gl2LMIIyzMck6zKdyee2K6WJorn1kuDMLeOYWCwBIt806ud+EuPwb1W\/OiK1nhJ+Jw9bLb2vb8cZ7fk\/uqlpq8XjFq6A425bj09aw5ocLOF1syR0bsTDY9QnkzRtFGUSRZgW77U2pT9HSw2GNywIOeS75NconSEnGLZ5eC7VDYQG8pxJtd1xax6eHf8rqnsZ7R642spD4oxri9VJ8S\/3WOfcfSo1XFY4wpFJLcYSunVCUxFERREURau4AJJwAMknpiiLzN2r418svJJ2YKruFQtnCpkKucAkbbnA5k1btwwxXO2qqsLqmcMbqTYJLirzRqLR5lljiYshU6l+cVW8LEA4xjbA3zkZrWnYzORt\/izzXStlkyhkAGDLIffqVG1JUFFYROOGKGkLZ+gMEerYOfsH31R8WluRGPFe39kaTN9QT2t+fwrHx6KBzayRSuWhh7tkMeld8sxDZ3JkZjy8qgPmbyRGArym4fOK99VIbA6DXLQX+VvJHbFdXCbN\/xcssZ\/vurj7hU2id\/t3j1r\/K8\/x2O3E2u62+38LFrxJ445YlCaZSpYlckaNRXTnYbsd8Z5YIqsZK5gOE2uvY1FFDUPa6UXw3sNs7ajfRJ30M9soZ4nQTIQjsNijDxafIlfCQcEKx23BFpw2lF+a7bQfn9l5T2m4sHN90i0\/uO2X9o+ev0TTsn3\/dobfX3gjZvm20tjBLYOR09ar34nTHDqr6mdBFw5hmthAGov8ARTNpx2+7m5juLe8khliK6pi5EZG4ffUNueMjOBvVnR00jJLud9b\/AJXlOL8RpKiHDDFhPXCBl8gq2q7c\/wDv\/Bq3Xl1idAVKtyPMenpt6++sOaHCxWzXFpuFtwAMw7okErJ3YbzzjB++vMVcWCXCvp3BawzUeN39tx8gL\/wnXbyLTJPCN1hzGn5Kc8+pOpj6savY4wymwt6LwFRUvqK0yv1J\/wAD5Ka4FEJrG\/Zdz3UTD8gSa3PwCgn3VVcN+Gcg+H3XrfaeTm0kbmaG5+38qsd1reMjkrFs\/AjHvyfPpU3ikgbGG7lU3svTPkquaB8LdT32HjupvjcwEXDkJ8Xd3BA9GlXH26W+yqktPu4Pf1916hkjf6u5u+EfZv7Lft5AflNmo5C2hYfkrGRn87AqfI4NogPWioaKJ0vG3HoXE+Z\/K3uHxwxx+Mu1GPMJExP2Fl+2nCRm4rp7XuGKNvb8n9lWgB0FXi8WhlPpREvw+9kiZgs3drKvdPnOgq+V8QAJ+seQJ8t8VGnawWleT8Km0bpXg00YF32GdvoTondpcPYXquCrNA+5Q5VhyYA+TKSN8c66m0sfio2cMmeoK9I2twsiLIhyrqGU+YYZB+yqgixsVbg3FwlawsooiKIqd7VuLdxw+QA4aYiIe5slv1Aw+IqRTMxSDtmuFS\/DGVwjhkkSv\/4iFpYirKdLaSrEeE8wD7jkelT5uYSAy3e\/RQafkAOMt72yt17poK7KKs0RArKJfs\/NGl2onDCCQrrZQSQEzkbb7jbPTIqprqR80gIXpuCcXZRQyA6kZeOdvEZ+rpleK2C6l9QOoDWxGxyRgnliu0lFEIyGtzUKLjFUZg98h1vrl\/hWY8XguOEXVuJAJllSaJDkEkjQyjbmAPvFV9HFI3E23r0Fd8cq6ecxTMdtpuM\/5PkmaXkUtrKySNHdI8ZRGU4YHVrB2xtsc5rSnoHOcQ4KXxD2jaGMMBz37HL5Ea\/wpPs923dImtbq2M8BG8bHwqehjk5r54HLpg5Nd4KWojks3T7evVlXV\/EqGrhL3tIk7aO8dLeOo7qD4Dxl7fCqJYpEXAZMnIPky8tvdUaWjnD\/AIdVa0fG6F1OI5hYDY536fMd1YuCduLqOYO4nmiwVdJZzhgykcsvjfB5dMV3goZw4Fxy8bqv4lxjh8sJZDFnsbBu\/bsoIbY69OX8fxirpeQQeu2KIk+C3yRXGJCVBmVgdJxjwZ5DpiqKtge6e4C9twPiFPDRPjkdY5n6W\/G6ke0V2s11cSIco8zsufrAseh5bY2NXbG2aAei8ZI67yR1TDgnFbnh7l7Y5XBGnAJAbBIwQQRnf3j7a2ehdixxlX1HxhnK5FQ3E29+lj1B23y08E5l44Z21vrLnnqTQB6cgoA8l\/3qA2inlf8AF5lel\/r3DqWC0I8Ggb9zp4m5+abcaeSZkcEBowBGOgVRgL7scz1JJq4fSNMIjbsvGRcTlFWal36ib+H8beCXk7StMI1nDBokEaLozhV5AMBuPU1TSUk9wwC9vXor2dHxrh7WOld8JcbnU3Pb9slte3hkWNMYRAdI82cgsx9TgD3Kvlmrukp+RHh33Xi+LcQNdUmW1m6Adv3OpTML\/kKlKsQRg+74fx8aItHH8c6aolriWJoodETRyBSJstqVm6FeeMjORy5bc65xczPmW7eCkVAgy5N9Be\/Xddq9j\/Fu+se6J8UDaP7p8S\/5lf7tQapmF9+ql0r8TLdFeqjKSiiIoi4z7cuI6riCAckjLn3ucD7Av61WNE34S5V1a7MNVH+fitNpVa3uWzoDatLRaM5H1TupyOh59K2j5ckzntJJGXZbz86GmZE9oAd8QNsyD36KLFSlXIrKLIG+KwsqwfyW\/tVr\/iH92uPO\/wCpXf3f\/sFkdl\/7Va\/nn9lOd\/1KzyP+wWw7M\/2q1\/PP7tY53YpyO4R\/Jgn\/AJq2P\/yH92s87sU5H\/YLZezP9ptvzz+7WOd2KcnuEoOzX9ptj\/fP7tOb2Kzye4WB2a\/tVt+ef2U5vYpye4Ww7Of2m29fH8PwaxzexTk9ws\/yd\/tNt6eM\/spzexTk9wsfya\/tVt+ef2U5vYpye4WP5Nnpc2355\/ZTm9inJ7hC9mzv\/wCJtvzz+ynN7FOT3C2Xs553NsR+Wf2U5vYpye4Wx7O+VxbfFyefwpzexTk9wtD2b\/tNt+ef3ac3sU5PcJC94H3aM\/fwPj6qsSTvjYY571s2S5tYrDorC9woYGui5LXNZWFg9d6IpDhHfvFPBHKojI75o3YDPdgk6M\/WwpJ5Zxz6VFfy2TBzibnIDZTo+dLSljWjCz4ibZ59T0Vr9i3EdF68XITRnbzaPxD9UvSsbdl+i50bvjt1Xb6rVZIoiKIvOXtMvDJxK5Yb6WCAfkKFI\/OBq2pxhiCqKk4pSoO+S3Gg2+sBkBcPjKvk6gCFXIxg8upHSswF5Zd7bHot6xsTZMMTy5o30+ibV2URAosrNET\/AP47df0m4\/xn\/erXls6DyW\/Nf1KP+OXX9JuP8Z\/3qctnQeSzzX9Sthxu6\/pNx\/jP+9WOWzoPJOa\/qVuvG7n+k3H+K\/7actvQeSzzH9SlF41cn\/mZ\/wDGf9v3VjA3oPJOY7qfNZHGbrH\/AORP\/iv+8KYGdB5Jjf1PmsnjN0eVxPk+Ur\/vUwN6DyTG7qfNA4xc\/wBIn\/xX2\/Wpgb0HkmN3U+aG4xdf0i45fjX934WKYG9B5Jjf1Pmstxm5\/pE+P\/efP+ryrGBvQeSY3dT5la\/8auf6TP8A4r\/vVnA3oPJMbup80DjFz\/SZ\/wDGf96mBvQeScx3UrePjdyOc9xn\/wB1\/v3rGBvQeSB7up81sOM3H9IuP8V\/v8VMDeg8lnG7qfNavxi5\/pE\/+M\/7aYG9B5LGN3U+aQuOKTsCrzysp5q0jMDjzBOMdayGNGgWC9xyJTU1ssLVuX8fx\/3osJN+dZWClrBYO+j78P3ecM0eNSg9RlW+zG\/pzrjMXAAsbcqTTNjc4tkfhFj3udh6upXsbdCLiFs6k474KCRjwudGT8DW0wvGR2XOE2kBC9I1Tq4RREUReXuMl5byYxjLvcOVBGckuSBg7HPKrci0OtsteiqWH\/cA4cWenXsteOvIZ372JYpBgOiqEGpVCk6QMAsRqONsnatoRZgF791rUuDpXODcIvp07JPhF5EkumWAS618Gp2VQw33CEE7f1hUSvnkhbdis+CUMFXPy5ifl68VZD2qihwHteHaT9Vrcb\/3slvic1TtrKlxyN17Co4JwyFo5hLb6Ekfsku2VjbCGDiVrGTaSnEsSt\/NuD4lDb4DAHG22PIgVbwVTnRm+o9fReNrKBsU4aDdp3GhHUeP0OSUW4sBy4eD+XdSn\/SFqtPFJvX+F6pvsnTWuZD5W\/KVv7SxuLSWW3jW2uICpaPvmcSI22V1nIYHoPL1GJtFWPldZ6oeM8HjowDG64Pq2pULwORY\/nDFFIfq96utceejIBz65GOlcK3iLg8si23Vpwb2bjkhE1Tf4swB02J8VZ7ZOHcSYJpFpcnwB4dPcs\/QMnNST0GPedqU\/EHtIa8arhX+z7A10tO4Oa3W2o8djbfTwVX4eyQXTxXMCzCMMHTvGQBlcKcFdzybntvyqVXVZha0s3VfwThDa6V7Hm1h9bp72v4dHBevDCCI\/AyAtkgMisd+e2cb56Vu6rwQcx2v5Ual4Y6prfd25Dc9ANf4Uvw28sZAIbq1jiXkJ4CysnkW1M2sdSST7qq4+JSB13r1NZ7LRcv\/AG5NxsdT4EWz8Qo65tILO7mtbiIzsArRMJe7V0IyDgKST6Z6HyzUypr3sALAqPhfBo6p7mSPsRoLa\/UaJwOKwr9Cxth\/7hklP60g\/wAqgO4lOdCvSx+ytG39RcfL8gpe7u7aeyuCYbeG4gHep3XzQlQbOhyTlgDke8Y61JpK2RxOLNU\/GeCQU4a6I2B62vf5W127pql9Y4BFhkYyNd1J13+qFrk7ik17W9eSnR+ylOWhxkOeelv\/ANJa7NlNazyQwLDcW4Endi4YiZAcOAXyQQN8Ac8eZqRT18jyQQqrinA4qXCWPuD6tqddk2g7QRKoeK1tFQjIMqGU4Izu0jH7gKhyV1QXWv5K9p\/Z7h4hEhuRa9yQMtemXmpXhk9rxSOWKKKCK9jQvEYBoWUDmpTOM+R+OwBFTKWrkDrSqh4pwyma3mUjrjcbj7XB67HxVe4Je2pRhLZs8iuVYmdkHmPCqZGxHWlVXyRPwtHryXThPs\/DWQ81zyM9Lfypvhtzw2SRYprNYVc6e9W5kJQnYEhjgjJ68s5rjHxKYuF\/X0U2r9maeKIuY+5Gdjlf6qN4ZxhYtdvJaWUkkDlJGKMxYgnxhu8xhueQKxPWztd0Czw3glBUxHM4h4fI2tv463Uzb2lhffNonyK5OyEMXiduikHdSeQxjn1Ox60\/EiTZ6icR9mjEwyQm4GvUfLp4eSpvEbCSGV4pV0yIcMD57H4gjceYNXLXBwuF5JzS02KQtw4dDHguHGAyhgTkADS2x+I8q0mBcwgOt3Xalc1kzXOZjF\/09fJPOKO8d07vGIXWTUYgNIQ51YA8vL0xWzQCwC98tVzcSHk2tnovTYNUyuVmiIoi8ozhGkPePoUyeJ9\/Dlue29WtQWCE4xcdFW0YldVN5TsLr5Em1vml+MKRPIDKJsMR3oJIfGwIJ9K6x2wCwt2Uea\/MOI3N9U0t954vex\/VI\/3qBxU\/6PzV97LtvXg9AfsVcOPW2uysQGQY74sMjV4pMDw88YXmdvXpUGkq2U8BvqdB5q64pwqbiHESBkwWu7pkMh1PopheXIi4Tc2\/SZ41iX1TJdvs0KT6+hrWixOxyHT8rPtAyJhggZrp8srfW6fW1rZzW0kVw4jk7xWR+5MpCgEEDGMb+tcKSaOIlzxdWPHKCqqw1kBy3zAz2UX2k7LRW1tHc28wlilfuiwh7oo22AQSeYyenL1q3bVsfE5zBbJeNl4XNDVMhmOpHrdSPDrTMU0gAJjCJGCQB3kzaE3O3hGphnbIWqihja+W79Bmvae0FU+nphHD+p+Qt03t5gJDhXZWeGcSrcWCHwkq90mzIcgkLn3Hfz3qbVPp5Xg4rWXneGM4hSRPaIXHELaG3Y6Z2z\/dNuL2M8d\/ci50mVlDsVOVPeFnyvpv91cuJPa7Dh0sp\/srG5j5S7XJOvaJcaL6CUnCyWsYJ8iyLg\/q1tLG6SmaRsovD6llLxR4fkDcfX9wnnabst30acQ4bg6Y1W4hH0kKjBJX6ykb5G\/XfJKoWxTRYND6+v3WK2atoa0yuJP2I\/ba2ygOO3IupRIynACpGNROlUUKo1DGeWSepJq2bTMDAw52XmpK2V8zpgbEm+Sf+z+BHngR1DI1wQVbcEaiMHPOvPzge8Wtlde+oJJBwkyXOKxN91EcYtUi+UaUVcaxsuOWrAzV+WtbGSBsvn4e50vxE6\/lWLhVtaPbzw3LBGYRd05iMpXSSXwByyMDmK8\/SzRxyFzxf0V9F4xRVNTAyKA26526W8d03412XhhtDd20qzIHMb4t+6KHTr\/CO3Lf1FXNPUxyg4RbL1svD1\/Dqije1sxvex9ZnonfYhAIphlR\/wCAdVLEKMt3ajckDO5qopntbUYnaC\/3XsuLQyP4ZHFECScIsP8A6lIdmFEV5FNqxpdSz74EaEs\/rjRq9\/Kt5qg1M7cAy2XOn4YzhvDpTMbuLTfoDsB4G2e57JPs\/dxNevPMvzL3TO6kasKcbEDOceQrWsIE9naBZ4KyQ8McYv1OJI26bqQtOxdlcM6206tLpZ0jNqV1YGQoYtsfXHwqwirYXENDfXkvOVnBK2CMyyHLx6+BVc4LgzvnBGtF5bEAD9tROJn\/AFgFe+ywtSSOHX7Apx234ekPEJjCojxOBpTYEMQMYGw55qXPAz3bFbZUXDa2f+oAYibuF+\/W\/X5qf7bS9\/DZXTfzkkbxyH8JoGC6j6kNn3e6uvDZC+LP16suHH6VtPVua3TbwNiPK9lUXCndiVXIyd\/DuMHbfbnUybDyzizCq6bHzm4DY3Fjpbv8k642mmRx3wnGBiQZ8QKqRz5aRhSOmMVmEgsbYWHRKkOErg83Nzc9SvTFqfAv5I\/yqoOqtAlawsooi8rcQHdzyAprCSkFCcZAYgjIIPL1Hvq4cX8r4NbKpjEQnAmvhvnbW3ZY4lJE0rtCrJET4FY5KjyJ671uzFhGLVcZcOM4NE2tmxPF66h+rn\/aq7io\/wBJeh9lnWrgOoP2Kn4pIxKiy6gG8RC4DMucEpq2J2rz4abX2X0R84vy2kY7ZA6fT67pz227LGOIXdtIbi0LKNf1ovGvhkXbG55gDc7gZGbxs8Rpi1mXr7r55LT1X9Sa+ouXXz8B07eGSUtrG3licS3L28gYaCsZcFd9WQBzzjHiHXnVRAYgbyeXoL23ExXOAbSWHU3Fx4XI+yR412YHyCaS3vpLhYnRnjeN49LN4VcBnIztjOPPerankhkaY4229eHZeL4lBXU8jJqpxJ2zv+drp12ZReI2F5aoyrO6xyxgkDxwkll3x05Z889DUKBgjeWP0KuOKzmqgiqYdW6gagm1vsbHwUbwu0maRYZTHqaRUGjceIheYYg7nocVFlYwPwxm46q\/pJ6k0xmqWgGxNhrYC+fc\/Ra3nEDNeT5k7xY1SKJsAZjjLhTtzyN8+tSq6Pl4G9lT+zk\/PfPJ1IPhm5WO+urN5ltr2ItHJw+10yL9OMhWJZPMbjP5I2NdGVLo4mgjL+AoEnDRV1U+BwxhxIHUYjfPy7Z5qJ4b3nD582t0JkXBik0lSVPNJEPPHl7jscYhyyNx4o1e0NHK+lMNWLjbqPA5\/I+I0SvbXuDcrLCoTvoElkQckd8lh8Rpb45616Kje58IcV894lA2CpfEDexI+qa+zo\/P2v8A+z\/\/AFNUM3\/yfmvd0Nv6P\/6u\/Kiu1B3uD\/Wf\/UfWvQSf8XyXz2L\/AJhfqpyxtLeRJRNcPbt4e6ZUL53OvICnoBjcc+teZgMYdeTRfUuJCsdGG0lrnUnbS1rka59Upd9nU+RXUlvfyziNQ8sTRugIOVDYLlTjc8uQq3ppoDdsbbevBeK4pR18ZY+rdfPLO+4voVDWsg7lZD9EIpJxsMgDJ8udUzmkvIHVe7hnYymY9xsMI+wVm4ZwGO7gxbTEXY3aFyoWVeY7tvh16+QwasOHSRRuOIZ\/b15rzHtNHVytBaf9LUW0J79+m3zuq\/2et1EhjudcSid1lwPEoDHO2Dv8DUarLXTkk5K04NzGcOGBvxZ2B6\/T7qc4X2dtmnQRcVmWRmxGe4kXdsqBqDrzzjl1qVDPStcLNz7\/AOFT11FxiSJxlf8ADqQCNBnsdlXbGAxT3EbfSjn0t71Cg\/5Vx4ibzX7BWHswLUbm9z9lNdrXilvJZo3LqzlgdJUcsddz8QPd1pU1uOMRt037pwfgRp5TUzfq2HTue\/28dGvGr0GK2twR80HLH+tM2or\/AHVCg+RLDpva8OiMcN3b5ry\/tDVMnrnYDcDK\/cCx+yhe80kEqGAIOMkZGRkZ9R6ipsmLCcGqpouXjHMvhvnbW3ZOOJSxPIxgRljb6Ks2orsAd98+LOCemKMxBoxarEmDEcGm19V6djXAA8hiqZXK2oiKIvM3baAxX90AdJEzOCOmptY+4irZoxw2vbJVRcYqjEBexvY6JLtIJzKslwVZ5I0YMrKwYAaAcqSM5Qg9cg0piwxjAbgbravbK2d3NbhJztpbtZQ00ZOkq2llOQef3VmeETNwlaUlU+mlEjNQnvFL97iGCKYJ8wGCOgKt42LbnJ5HljFcoqJjGYDmpNVxSaefnaHLTwH7JASyd20TSyFHwGGrAbScjVj6WDvvmsR0MLL2Gq3qOM1c4a17sm6fbXX6rWKWULp70nHXA1fEnOa4\/wBLivc\/spo9pq0RhjT8zmfqlY5nAYd5Jh8agXOG07jK5xsd+VS4qaKLNgVXVcQqar\/meT9k1ltATqU6X\/CHp5jrWJ6ZkozCxSV01M8OjJFvXoaJ\/b8QmXmyg4IyoIO4weZO+CRtUWDhscb8ZN1bV3tJU1MJhsADqRqe2qZhXV9cbAEjBBGQccuorrVUbZzclQ+G8WloCcG6ecbunuWjd8K8caRoYwRgRgAcyc5671v7pHyxGuJ4lMagzg2JN8lpBdyjZ2Q+oUgn78fdUNnCow67jl0Vy\/2qqzFgaBf\/AMrZ\/tf5fJKKcnJOT151aAACwXmSS43OZKzwmeW2mWWF8aX1hWUMNXP4b7+VQn0Eb5MZVrDxmoigMDdCLev82Wtx86GD76sljyznf3VMLQRZVbXEHFutYI5FGnvSRnbYFsflHINVx4ZEXXKv2e0lYyMMafmcz9UvAWXX45DqXSw1nBGQcFQcEZ9KlRUsUebQq2p4lU1OUryft5Jbg1xLAksQKPFLEYiHXJAJU7EEDIxzI+FcI6FjJMakT8XmmpxAdAcu2unmmtramJsxySIAchQeR6FTzB67HNbOoYnOxELEPGauGMxsdke1\/obhYdHEjSCVhrJL6\/FqYnJOSfpVrNQRyG+i6UXHKmlFmm\/jp\/lZ0uCCZZMg5BB0YI3H0cda2ZQQN2utZ+O10wIc+wOwySE6P3jSJIwdzls+IMfNs759fWtp6JkuZ1XOh4tPSG0Zy+\/rz7pYTudmYe5RpH3kk\/bXOHhsUZxHMqXWe0dZUNwAhoPTXz18lmp6oE64XBLJNGsDhJS3zbagm45YJI3PvzkiuFTg5dnmwKmUHN5wdEwOIubEXFhrcdE8sy9xfIJAO8luV1gADdnGrAHvNdDZseWwUcfFJnufyvSVU6uEURFEXBvbLYaOIF8bTRq3pkZQj7FH21Z0hvHZVdY20lwqfKIO5iMbSd54lkRxgLjGkofI5Ixvyz1FbwE5jDhAOXdZq2t+Fwkxki51y7Z9Psm1SFDWKIt4xkj31grIVxPYlPxk\/wCjPUb3g9B5qX7sOp8kfyKX8ZP+ivT3g9B5p7sOp8ln+Ra\/jJ\/0Z6e8HoPNZ93HU+SP5Fr+Mn\/Rnpzz0Hmse7DqfJH8i1\/GT\/oz094PQeae7jqfJB7Fr+Mn\/Rnp7weg8092HU+SP5Fr+Mn\/AEZ6x7weg8093HU+S3\/kav4yf9GenPPQeaz7uOp8kDsav4yf9GenPPQeae7jqfJbHscuP5yb9GenPPQeae7jqfJZHY9fxk+39menPPQeae7jqfJA7Hr+Mn\/Rnpzz0Hmnu46nyWf5ILt85P8Aoz1jnnoPNOQOp8lluyK\/jJx7rZ\/45U556DzWeQOp8kfyRXb5yf8ARnpzz0HmscgdT5JnxXsysUTya5Tp6NAyjcj6x2HPnWzZSTa31Wr4Q0Xv9FWGqQo61xRFnPXf0\/jlRE4se4LMJmdSEJiZRka1GVBPMAnbpzHQGuEpOJrcNwT5KVTtbge\/mYSBkM7uvkRl6srH7K7Qy8Sh6iMNIfgCB+swpUm0Z7rSlbeQdl3+qpWqKIiiLmvtw4XrtorgDeJ9LfkyY3\/OCj41Mo32cW9VDrGXZfouVcISWWOa3jgSUnEgYKO8QJjVpbGogj6uevLNSXXbLjc\/LQDuuLC19Py2R\/EDcu7dLKNFSFDWVGTgbk7D1ogzUrbdmb2T6NrPjzMbKPziAK5mVg1IXUQyHIAp5H2EvmOFgXPl3sWfs7zNc\/eov\/JdjRVAF8JsoCaHQzKy4KkqwIwQQdwfUGpAN9FGNwbFST9mbsIHNrPobdT3bH47DI+POufNZe1wt+U+17FRmjG2Bn3fbmui0zRpHUfdRYS9pYSS57qJ5NO7aELY9TgHHxrBcBqVs1pOiR7sA4I3HMEYxis3WE9t+DSvA9yqaoo30Owx4SQCMjnjBG\/qK58xuLDfNb8t2DHbJZ4ZwiadisETyEDLaFzj3nkPj8Ky54bqVhjC42aFpd2EkRHexPGTy1oy\/wCrFZDgdCsFpGoW9pwyWUZigkk\/IjZ\/9IrBcBqVkNJ0Ckk7HXp\/5Zl2+uUjP67A1zNTENXLsykmeMmlIcV7O3Fvo76HSJCdBUq4blsChO+4GK2ZKx+bStJIXxmz22WYuzV2\/wBG0uD\/APC4H2laGVg\/uHmtRE46NSV\/wae3x30EkerYFkIBPPAY7ffWWva7Qo6Mt\/UFpw\/hskzFYk1EczkKAOW7MQo+JHKsPkawXcbLMUL5XYY2knsleNcDuLXSJ4igb6JyGVvc6krnG\/nWWSNf+kpJG+PJwsow\/D7q3XNAoifSrLFb6JIE0z4khlKjUAux0uNyD1BOBnkOdcGXdKXB2Wlu6lSFrIAwx2de+LqDoLetV0j2G8LwtxckfSIjT+74m+BJX7DXCtdmGrrRNyLl1SoKmooiKImHH+GLc28sDcpEK58j0PwOD8K2Y7C4OWr2hzSCvMTKYZvEXjeNijFM6l30vsCM49\/SrSYMLeYW3tmFXUr5GyGJr8Id8JO1u\/ZK8RgjSRlik7yPbS+NOQQDuuTggnSd8ZBrpG4uaHEWXGZgjeWg3tuNEzl1YyjFXBDKwOMFSCOXurErC9haEgk5cgf0UgnHGmKLMJS7bZc6hkAk4JYnpXmqijkjGJ2i+lcN45S1D2xRts49AAPXyT26MluIZ1jIDsxicFR4oiuTjORhiOYrFNRyTZs2XXinG6ekPKlBdcZjsRv4g7LPFuLC9u2nEQiOlTIFbIL4xqGwxnGceg86sa2Z8EQiBzOvYLzPAKGKsqnVBb8DdAdztfwH1RdcauLQK0byrnxkJIy+E\/W0jY5x15jfkRUCnpJXsMjTYK+4pxejhmED2B7t8hkOl+vbbqFYr2deJ2ckxC\/K7dBL3ijT30I+lqA+so3zjy8zibQVLsfLeqDjvC42MbUQfod9N7eWm+RVDzV2vJpzwTic0Nwe6lkj1p9Riu6HyBwdjyNU3FQ4WcD69WXrPZYxPkfFI0G43A29FWb2hqJDb3owBcxAyY6SxeGT\/b7DUuglxxZ7Ko4xSe71TmDr\/j6WTHgkph4deSEkGRY00\/hNK5fGOpEaEDyzVfTyY6l8p0Cv+JU3I4bT0wHxOP1Nv3+iQskZFyCQUBcsCRp5AkHpuQo6nKjmahOdJVTZanTsF6GOKl4TRWfaw1y\/UfzfYbDspLsz25k1tBdapoT\/ADkUjd5lCca0Y+IMvl\/vuOz2y0jhc3CqYvc+MRuEbAx407+NsvHpkQSMkw7QxzcPuprdXlktnIlhKufouBjK6gDyxn+rUmenkqLSMVfwviUFAXQzt+dhf1+fFJ8KtzcAdzHqYqWC+EHCgk8zjkCedVXKOPANV7P+oRim95cSG2v3+l0ncdpn\/wCHzW3dkeNZoH14aJ0IJK48wMYyMZJq4go5IWuxHLsvC8U4vT1srHRMOLcm3y+f4Ty7e4MJnPeSIrhGJkGzMCRszZ6VVwQSTus1evruIU3D2AvGZ2A\/iy0i7VP8kntpIi6Nh4iZMmN1P1Rg7MNsA+fmauKWklgJc4\/JeL4vxSmrrctmE7nLz+SYW90piQjxZGQPU8\/j0+FV\/Jnq5STtvsPD14r0rK6g4VRs5erhew\/U47k\/PLPTQDZWLsjx2ZMW86pLbSOAYGXIAYgZXOSGyc7begJyNOZyJMMbrgb\/ALes1tJQu4hTGapYGPIuBvYDLF3+o+igOO26RXM0cZzGkjqhzzAJA36+\/wBK9KwktBK+cPADiAmepQRrJCEgMVXJAJA2BI\/zHvrWR+BhcBfsukEQlkDC4NB3OgTi\/gCN3EUjTRoxERw2+T9VSTjJwMeg57ViFjWtuBa+azUyySPs52K2QPYaW7L0V2T4R8ktIYNsquXx1ZvE3w1E49MVWSvxuJVlGzA0NUvXNbooiKIiiLiXtk7P9zci6QeCfZvSRR\/1KM+8NVlSSXbhOyrqyOxxBU6zSS4hEKQxF4dchddKuyYBweRfTgn6x542FbNPLeeY\/wDUcgsvAniHJjtgHxHM3PU9L6fZRZqSoC2txmaL01H9Uj\/eqziptDbuvS+yzb1wPQH7FWntLvYWHo9wP1ozWnCf+M+uq6e1f\/zPkPsFX+ADVJIhOCXUe4MAM\/51C4oCZldeyrw2kfbUG\/ryUp27TTxC5UgAK+lR5KqqFHu0AVe04AiaAvC1TnPmc52pKfezn5v6X0fk02vPRdDtv91eeiOKq+Hqvf1cRj4MGyagA+Z\/YqpivTr5wtJX0yRP0D4+DZWoHEWYoSrngM\/KrWHvbzy\/Kud4yzcLeFj44rlGT1SUMHUfBWb7Kpqao5cbh6zXseLcLNTWROAy3\/8AU\/sR5KO7TTd3ZWsef52czuPJVZYk+GVkPxrvTRn3Z7uqgcXqWnisLDo3D+\/5T+aEjhs0i82uo43\/ACQjsPhrI+wVvwkDGStfa+R1o2ba\/j8Kr2qEzq2Poq2T7yMf7\/Ya7cWIDWjdQ\/ZKNzqh79gPv6+isnbSXIss\/SFlHn3BpNP3f51I4d\/wBVvHgPf5AOp+639mQ+eth5xP98MhqkYf9x8yvZVLbcG\/9W\/cKn3Q+bx54H2kCvSVRtE4r57QtxVDB3Ctttxx7eJwAhjZlLa4hIAwzp2IIB59K8xA6UG0Wq+n8TgongPq9BpcrXi\/HYLq1jIRVuY5SCUhEQaMrkE4UZIbAA99XtCJrHmrwHGfcuaPdDcW7\/nzVesSve6BgYXVjlzOPu\/3rjxOVzGCNuQOqsfZamjmqTLJmWjK\/Xr8tuilOJh4HVTlX0q+3NdQDL7jpIPpkda58PoQQJX\/ACH5Kk8f4867qWnyGjndew7dTvt3idPuq6Xi1IQrLAmt4opIriN1Rm0MQQMalIJKMpZTg6c7cwajk8yQFj8m6hTQBDERLH8TwC0nKw623v8At87N7JuAfKLsTMMx2+GO3N\/qD4fS9NK+dYqpMLbblaUseJ2I7Lu1Vis0URFERREURRfaXgqXltJbvsHHhb8FhurD3H7Rkda3jeWODgtJGB7S0rzTxGzktpnR1ZZYyUYKcE52IHmGHLoQfWrVwa8CQC5GirGOfG4xlxDTkbbj8pTiaQ6tVv3vd6Vz3mCVYjLLqCgHBzg4HurMTnloLxY9FipZGyRwidiaNDa10wEwjljZiAu4J8sjb7xUHibC6LJXHs5UMhrAXmwt+P3srRx27RrGyVHViHnZgrAkAtGFzjlnBx7q14U0iM3C7e1ErJKsFhBFhob7BVVtSP3iDO2l1zjUPT1Fdq2k5zctVD4PxV1DLi239evqrPxPtXDekPJFElwFCySMWDtpAGSpbRnHXBOMbiqmaWpYzlHReo4dS8Kll94a7PUB1hb97bfVN\/8AiwSORYzl5V0FugQkFsHqWwB7tXntK4bRua7mvFuihe0vGIpWimgdfO5I07AHfuoYVdLxaTu4tSMvXG3vG4rSVuJpC6RPwPDlLcLvBMq6SC7YGjO+o7Yx768lJE5jiLL65R10U8IfiF7Z56dUt2xkSWZolOqOJFgRh1EYALD3vqYe+vTU8AbAGHovl9dVmaqdN1JK07P9qzbRS291CssMoVW1FgpKnKtlTqVh9+24xVW+nmpnl8ei9FHxCk4jGyKqJa4b9R3\/AH+ayLqEnwlFB6R+LA9ASSdvM+81E5c9VJnr9AvQip4fwum+Ai2oAIJcflr46DwSPFr8zys+NIwERc50oqhUHwUDPmcmvSRxCOMMGy+aT1Dp5XSv1JupH2b8TiWaDXIqlI5AwYgEYhlHI+uPtrzrInioGW\/4XvZqyF\/CC0OFw1otfPJwVbvSe72BOCpwPQg1f1LS6JwC8LRSCOdjjsVZeG9qFjiZFMDJIwYiVFfdcgYVuoyelebjM0RswG6+k1Y4dWNbJM4WGlzb6apxc9o4Li0mjkjjEwKNA6W4j6kOpYKNtO9W9CKjFeS9l4\/jQ4cGgUhud9e2\/moTg09qZHW5tknKhdIaV4yBvnSUIPp1xWnEZ3NcGhuS6+z\/AA+Kpa5zpC1w0H59aZKV7YwwLNG8DMUlhSUq7mRkJyNJYkk4CjmSd6nUkhkiDrKm4jT+71LoybkFQ9tpVkaRXaLXhymx5HkxUjI8sV0le9rfgFz0XCmjjfIBK7C3c2ulPk2uXuYNbqZSIVPM6mwNuSlgBn\/6rLGtYL2A3KxJI+UgEk2yF+nTsvQ\/ZDgC2VqkIwW+lI34Tnmfd0HoBVXLIXuurKKMMbZTVc10RREURFERREURc89q\/Y75TH8qhXM0a+NRzkQenVl5jqRkb7VLppsJwnRRamHGMQ1XGrXiLokkRlZYJmXvABqAwV8QGRuMDqPeATUmVjWOM2ZIGi4wSOla2k+EAuviO3ieiOJ26RyvGkiyoDs4GAw2OcdPdk7g13Y7E0EiyiSMwPLQb23CbAD0GK2tZaXus0RasAdyBWLBZuUGsrVbCiys0WUmYVJyVBPQ43rUsbe9lnG61rpUCtlhZO+fvrCLCKBywPdSwCze6ziiwsY67Z\/jrSwvdZubWWwb\/wC6LCwqgHYAfCgAWSTugiiwk5YUb6SA\/CtXMa7ULZr3N0KUjZRgMdK7AkDOASBnGRyHqPeKxI7Awutot4Y+bIGEgXOp0HcqTvJ2hEtvFP3tuzKwIGASBnIBzpO+CM8xzxXKOMF3NN7kaHZd5pnNj93yIaTmN\/nuF0\/2T9kO7UXsy4dh8ypH0VI+mfIsOXkCfwto9VNf4B811pocPxFdLqGpiKIiiIoiKIiiIoiKIuP+1LsJ3Za9tV8B3mjA+j1LqPwfwh058s4sKae\/wO+Sr6qC3xt+a5zBxNkheB2XuZJFYkpkpjA1A8+XP0ro9uBxmJJy0WIn81jaYNaCXfqPfqegWOJ26RysiSrKoxpddgwIB5dCM4I6EGu0bsbQ61rqPNHy3ll72yy0TWt1yWBRYWQKLK2AoimIOzdzJBHPDGZUdinzY1FHBxhh0yMEHlgjlXMytDi05LsIXFoc3NN+M8Ma2lMMhXvFA1BTkKSA2nPUgEZxtnI3xWWPxi4Wr2YDYpOfh0qRxyspEcgOh\/qkqSCuejAg7HfryOayHAkhYLCBfZFpw+SRZGRToiXVI\/IKPU8snkBzP20LgLX3RrCb22WeE2BnlSFGCs5wurYFsHAJ\/rHCj30e7CLoxuI2T+bstdJFNLNGYkh2YyDGWJACp+ESTzHhA3zyzoJWEgDO63MLwCTsoQ11XJANERmiLO9EQjrqGttC5AZsZ0gkAnGf2fCucrxGwuOy7U8JmkEYIF9zkPmpG5uGgE9qksc0DOpDBc7rjDIc7ZGxG\/1hk1zYwufzSTpp0XWSUNi5GEZG+Lc9ulldPZr2F+UMt1cL8wDmND\/5hHUj8Afre7nzqJ8Pwt1W1PT4vidou0VXKwRREURFERREURFERREURFEXJPaF7NiNVzYpkc3gUcvMxj\/o+zoKnwVP9r\/NQZ6X+5nkuY2\/EZYo5o1Y93KoDoRkZUhgQOWrIxnmMnzqQ6IGQSXOQ02XFtQRCYMIzN72zHa\/TsnTcOWZkWzEs2YtbKUwykE6hgcxgAj8oDmKxHMSzFIMKzUUzWyFkLsYA1F\/XbxyUeBXdREetEWQN9+WeYGfjjb\/AGosrsPs07R2EUctvCsy6I2nkeUr4tIUMQFYgYGNh0HXnVdURyEhxt0VlTyRgYW+K572v4laXEpnt0njdyWkWTSVJO5ZSGJG\/Tl5Yxgy4mvaMLrKHM5jjdt10b2VcIkexlhu4M28jaow\/wBYMN8DmBkAg+ZJHnUSpeA8FpzUumYTGQ4ZJz7ReCNFw0W9lB80HBlVNzpXfJH0mOoKSdzt8RrTvBkxPOa2nYRHhYFyvsteWkUqzXKzvoIZEi0gEjBBZiwOxHIeXPoZ0rXkWbZQYnMabuXS+3\/aqxltoY5kmZZ4xMndFQ0fRSQWwTnUMHI2PkKhwRSBxLbZZKbPLGWgO3zXHJiMnSSRnYkYOOmRk4Ppk1YBVpSeaysLbNFlSEFiI5IRdiWKKUAh1XJ0nkwz0B5+lR5JiG3jGI3spcFMHPwyuwCxOe\/QfNIm\/kERt+8LQiTvFyMYIDDIydshtx6DPKtmQ4XmS5ufILWSoL4mw4RZt8wMzfr17LoHYD2btKVuLxSsfNITsX9XHRf6vM9cDnwnqbfCzzXSCmJ+J\/kuxooAAAAA2AHSq9WCzREURFERREURFERREURFERREURUntr7O4bzMsWIbjqwHhf8ALA6\/1hv55xipMNS5mRzCjzU7ZM91xnivBbqxnXvVeKRSdDqdj6qw2PQ+Y25VNIinAJztmobJJ6bEGm2IWPcJr8tTuBG8SKyyau+XJYocgqw5HoR5aT51j\/UY5z3G42AW\/wDoyNjjaLOvm4nLM6\/LdOn4QXlaO1b5QFQSBgAhK6Qx8JY+JckFVJ5HFbNnbhDnZX2K0kpXh72s+IN1IzHn9lF6t+ddlGSkM7ISVJGQVOOoYYIPoQcVgi+qA20SlndNFIJE06l3GpVcZ9zAqceorBFxYrLXFpuFeuyntEvWvIFuJ9cTuEZe7jX6fhByqg7MQefSo0tMwMJaM1KiqHl4DjknPbjt\/eR3s0VtNoijIQDQjZYDxbspP0sjnjasQ07CwFwzWZ6h4eQ0rn\/EOIPM5kk0l23Yqipk9SQoAyfPG9SmtDRYKK55cblIyTMwUMxOkaVB6DJOPdkk\/E1kBYJJ1SYrKwncliYxC8+qOKbdZAA+wwCQAw3GRsSOYrg+oaGlzc7bBS4aN75WxvIZizu7IWtceaVMscTXEOmKdD4Y5t1IKts6+hXp1z5UtI54dezbZje6wHQMicwi775G+VvBHB+GXF0UggV5dAwozkICc7k7KM9Tzo1scDcsgsSSzVTwXkk2t8gux9i\/ZvFalZrjTNONwMeCM\/1QeZH4R9MAVDmqS\/JuQUuKmazM5lXyoqkooiKIiiIoiKIiiIoiKIiiIoiKIiiIoib39jFMhjmRZEPNWAI+\/r61lri03CwWgixXNO0fsiU5eyk0H8VLkr\/dfdh8Q3vFTY6w6PChyUYObFzbi\/Z+7s31TRSxkZAkGdPi2PjU6Tnyz8KkgxSkHIkKODPAC0EgHI23TP8A4jN8nNvqDRh+8QEfROGGx8jq39w8qwIS1zng5nroFsakPjZEWgBupGpz3P2T03dtJPG0kDRQkKsqwvyOMF11Bvfp645jNaXnZGNHO3XXDSSzOzLGWNtzfYG3XqmsEcLRy5kZZU0mNCmzqSAfFq2YA5xjHhO+4rpzHczBh2vfZcOQ3kc3GL3th38fD1usyRwqkEq3CkSfznhIMJBUeIZJPPYjHJuWK0FSCxziDYfVdjROEkcYc27rHXIX6na26dz2cbXUsUl3HkhnWYglZGxrx\/VJzvzwdsGhnDQyzTn9FqKQvMl3D4dbnXPbqmIWIwM4kbvlcL3RTAZSCdQbPQjcEAbjetxK4yFmE2G\/VaOgYIWyYxcki24t18UubiBJIJIomkTSDNFMc+LxAgFQuRjSw+I3rned8WzXX+i7kUcVRa5ey22Rvbv0PmsJxN0E6RYWCfYxt4tIDBlwT9YYxqI8+Wa6cm8geSchpsuAqLQuiDRmb33Ha\/RbcG4Fc3IEdvFLIqk4xnQucZ8THSvIbZHL0oOVCNgsOdPUWxEmwsL7Douj9nPZDye9kz\/6UX\/U53+Cj41GkrNmBd46MD9a6bwzhsNugjgjWNB0UY+J6k+p3qG5xcblTWtDRYJ3WqyiiIoiKIiiIoiKIiiIoiKIiiIoiKIiiIoiKIiiLDKCMHcURVrivYHh8+S1uqMfrR\/Nn34XAJ94Ndm1EjdCuLoI3ahVW\/8AY5Ed4bmRfSRA\/wB6la7trTuFwdRN2KhLr2Q3g+hNbuPUup+zSR99dBWM3BXM0b9iExk9lXEB9WE+6T9oFb+9x91p7m\/shPZXxH8GIe+T9gNPe4+6e5ydk8tvZDek+OW3UehZj9mgD761NYzYFbCiduQpux9jcf8A5107ekaBPvYt\/lXI1p2C6iibuVaeF+z3h8G4gEjecpMn6p8P2CuLqiR267tp426BWdEAAAAAHIDauC7LaiIoiKIiiIoiKIiiIoiKIiiIoiKIiiIoiKIiiIoiKIiiIoiKIiiIoiKIiiIoiKIiiIoiKIiiIoiKIiiIoiKIiiIoiKIv\/9k=',width=400,height=400)","2cb04806":"civilandhumanrights.org","4acbbe88":"Kaggle Notebook Runner: Mar\u00edlia Prata   @mpwolke","fc0c1163":"#Codes from Pratik Barua https:\/\/www.kaggle.com\/pratikbarua\/house-pricing-predictions","7494ee5f":"Skew Visualization - Visualize each numerical feature with distplot","53ea5a8c":"Voter registration (or enrollment) is the requirement that a person otherwise eligible to vote register (or enroll) on an electoral roll before they will be entitled or permitted to vote. The rules governing registration vary between jurisdictions. In most jurisdictions voting and registration is optional, while in others (such as Australia) voting and registration are compulsory for those of voting age. In some jurisdictions, enrolment may be automatic. For example, when a person registers a change of residence with a government agency, say, for a driver's license, the government agency may forward the information to the electoral agency to automatically update voter registration. https:\/\/en.wikipedia.org\/wiki\/Voter_registration","f0217923":"Viewing Model Performance - View Model Performance through a DataFrame and a barplot.","41ac1852":"Checking Skew - Create a new variable containing the dataset of only numerical features","bdd57dbf":"Stacking - Predict every model, then combine every prediction into a final predictions used for submission","dbfd04bf":"#Thanks for the script Pratik Barua https:\/\/www.kaggle.com\/pratikbarua\/house-pricing-predictions","ae04e510":"NO BAR AGAIN.","fcc42ce4":"nypl.org","80e722df":"Label Encoding.\nOur dataset cannot run with categorical columns so we must Label Encode these columns in order to make them numerical"}}