{"cell_type":{"0393fcb9":"code","da074007":"code","390f0e3f":"code","8444e388":"code","14ca51de":"code","8dca3310":"code","d43259d6":"code","c8665baf":"code","66592935":"code","3d3b60ba":"code","80fa1160":"code","88eca1c6":"code","347c1d6e":"code","8c6b8ef7":"code","0c3cee56":"code","2115741b":"code","fd3aa7b5":"code","54bb66c3":"code","23361a18":"code","6c9f9b68":"code","4fdb9768":"code","3ea7cf0c":"code","36974523":"code","5c3e8190":"code","f5d1b87f":"code","c8610bfe":"code","1a7333d2":"code","55b0f8c3":"code","1418caaa":"code","b0c4dc24":"code","81e2290b":"code","baf87760":"code","77217edd":"code","d7cf40d4":"code","5a070f78":"code","8dc0b71a":"code","68d87e75":"code","27381b32":"code","4ea7ea0c":"code","aa1d8e07":"code","41b2484a":"markdown","2abb4671":"markdown","3db96ba9":"markdown","a1890b69":"markdown","4c439b1a":"markdown","a870d837":"markdown"},"source":{"0393fcb9":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","da074007":"train = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_train.csv\")\n\ntest = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_test.csv\")","390f0e3f":"train.shape","8444e388":"test.shape","14ca51de":"train.head()","8dca3310":"labels = {0: \"T-shirt\/top\",\n          1: \"Trouser\",\n          2: \"Pullover\",\n          3: \"Dress\",\n          4: \"Coat\",\n          5: \"Sandal\",\n          6: \"Shirt\",\n          7: \"Sneaker\",\n          8: \"Bag\",\n          9: \"Ankle boot\"\n        }","d43259d6":"f, ax = plt.subplots(2,5, figsize=(15,15))\nl = 0\n\n\nfor i in range(2):\n    for j in range(5):\n        img = train.loc[train[\"label\"] == l].iloc[0][1:].values.reshape(28,28)\n        ax[i,j].imshow(img, cmap=\"gray\")\n        label = labels[l]\n        ax[i,j].set_title(label)\n        l += 1\n    plt.tight_layout()","c8665baf":"X = train.drop(\"label\", axis=1).values\ny = train[\"label\"].values","66592935":"from sklearn.model_selection import train_test_split","3d3b60ba":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=1\/6, random_state=10)","80fa1160":"X_test = test.drop(\"label\", axis=1).values\ny_test = test[\"label\"].values","88eca1c6":"y_test.shape","347c1d6e":"from keras.utils import to_categorical","8c6b8ef7":"y_train = to_categorical(y_train)\ny_val = to_categorical(y_val)\ny_test_true = y_test.copy()\ny_test = to_categorical(y_test)","0c3cee56":"y_test.shape","2115741b":"X_train.max()","fd3aa7b5":"X_train.min()","54bb66c3":"X_train = X_train\/255\nX_val = X_val\/255\nX_test = X_test\/255","23361a18":"X_train.shape","6c9f9b68":"X_train = X_train.reshape(50000, 28, 28, 1)\nX_val = X_val.reshape(10000, 28, 28, 1)\nX_test = X_test.reshape(10000, 28, 28, 1)","4fdb9768":"X_train.shape","3ea7cf0c":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Dropout, BatchNormalization","36974523":"model = Sequential()\n\nmodel.add(Conv2D(filters=64, kernel_size=(4,4), input_shape=(28, 28, 1), padding=\"same\", activation=\"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters=64, kernel_size=(4,4), input_shape=(28, 28, 1), padding=\"same\", activation=\"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters=64, kernel_size=(4,4), input_shape=(28, 28, 1), padding=\"same\", activation=\"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(512, activation=\"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(10, activation=\"softmax\"))\n\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=['accuracy'])","5c3e8190":"model.summary()","f5d1b87f":"from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau","c8610bfe":"check_point = ModelCheckpoint(\"best_model.h5\", monitor=\"val_accuracy\", verbose=1, save_best_only=True)","1a7333d2":"#reduce_lr = ReduceLROnPlateau(monitor=\"val_loss\", factor=0.2, patience=5, min_lr=0.001)","55b0f8c3":"model.fit(x=X_train, y=y_train, \n         epochs=200, \n         validation_data=(X_val, y_val), \n         callbacks=[check_point])","1418caaa":"losses = pd.DataFrame(model.history.history)","b0c4dc24":"losses.head()","81e2290b":"losses[[\"accuracy\",\"val_accuracy\"]].plot()","baf87760":"losses[[\"loss\",\"val_loss\"]].plot()","77217edd":"print(\"Accuracy on validation data: {:.4f}\".format(losses[\"val_accuracy\"].max()))","d7cf40d4":"from keras.models import load_model","5a070f78":"saved_model = load_model('best_model.h5')","8dc0b71a":"from sklearn.metrics import classification_report,confusion_matrix","68d87e75":"predictions = saved_model.predict_classes(X_test)","27381b32":"eval = saved_model.evaluate(X_test,y_test,verbose=0)\nprint(\"Accuracy on test data: {:.4f}\".format(eval[1]))\nprint(\"Loss on test data: {:.4f}\".format(eval[0]))","4ea7ea0c":"print(classification_report(y_test_true,predictions))","aa1d8e07":"confusion_matrix(y_test_true,predictions)","41b2484a":"# **Train Validation Test Split**","2abb4671":"# **Model**","3db96ba9":"# **Reshaping the Data**","a1890b69":"# **Training**","4c439b1a":"# **Evaluation**","a870d837":"# **Scaling the Data**"}}