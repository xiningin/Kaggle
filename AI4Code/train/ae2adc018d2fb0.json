{"cell_type":{"7a41b56c":"code","0109591a":"code","e9e1d2cf":"code","91582b9b":"code","0b94e92f":"code","a1d83cd9":"code","1296c1fd":"code","f0e12210":"code","a84fefb5":"code","726de9b4":"code","8634c717":"code","37251a5c":"code","2e6fb0d6":"code","b9adaee0":"code","853e2a24":"code","0209ca5b":"code","667f3d69":"code","f6397558":"code","08e9353c":"code","76a5dc7b":"code","d919bd96":"code","37e81a40":"code","606cf7d8":"code","b6fd0f84":"code","07861cd6":"code","feb0bada":"markdown","6cf756b1":"markdown"},"source":{"7a41b56c":"from sklearn.metrics import make_scorer, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import preprocessing\nimport matplotlib.pylab as pylab\nimport matplotlib.pyplot as plt\nfrom pandas import get_dummies\nimport matplotlib as mpl\nimport xgboost as xgb\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport warnings\nimport sklearn\nimport scipy\nimport numpy\nimport json\nimport sys\nimport csv\nimport os","0109591a":"warnings.filterwarnings('ignore')\n%matplotlib inline","e9e1d2cf":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","91582b9b":"#loading the dataset\ndf_train = pd.read_csv('\/kaggle\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/loan-prediction-problem-dataset\/test_Y3wMUE5_7gLdaTN.csv')","0b94e92f":"#function for missing data\ndef missing_data(df_train):\n    total = df_train.isnull().sum().sort_values(ascending=False)\n    percent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\n    missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    return(missing_data.head(20))","a1d83cd9":"df_train.head()","1296c1fd":"df_train['Gender'] = df_train['Gender'].fillna('Others')\ndf_train['Married'] = df_train['Married'].fillna('Yes')\ndf_train['Dependents'] = df_train['Dependents'].fillna('0')\ndf_train['Self_Employed'] = df_train['Self_Employed'].fillna('No')\ndf_train['Loan_Amount_Term'] = df_train['Loan_Amount_Term'].fillna('360')\ndf_train['Credit_History']=df_train['Credit_History'].fillna('1')\ndf_train['LoanAmount']=df_train['LoanAmount'].fillna('147')","f0e12210":"df_train = df_train.drop(['Loan_ID'],axis=1)","a84fefb5":"df_train.dtypes","726de9b4":"missing_data(df_train)","8634c717":"df_train['ApplicantIncome']=df_train['ApplicantIncome'].astype('int')\ndf_train['LoanAmount']=df_train['LoanAmount'].astype('int')\ndf_train['Loan_Amount_Term']=df_train['Loan_Amount_Term'].astype('int')\ndf_train['CoapplicantIncome']=df_train['CoapplicantIncome'].astype('int')\ndf_train['Credit_History']=df_train['Credit_History'].astype('int')","37251a5c":"df_train.Loan_Status[df_train.Loan_Status == 'Y'] = 1\ndf_train.Loan_Status[df_train.Loan_Status == 'N'] = 0","2e6fb0d6":"df_train['Loan_Status']=df_train['Loan_Status'].astype('int')","b9adaee0":"encoded = pd.get_dummies(df_train)","853e2a24":"encoded.head()","0209ca5b":"dependent_all=encoded['Loan_Status']","667f3d69":"independent_all=encoded.drop(['Loan_Status'],axis=1)","f6397558":"x_train,x_test,y_train,y_test=train_test_split(independent_all,dependent_all,test_size=0.3,random_state=100)","08e9353c":"xgboost = xgb.XGBClassifier(max_depth=3,n_estimators=300,learning_rate=0.05)","76a5dc7b":"xgboost.fit(x_train,y_train)","d919bd96":"#XGBoost modelon the train set\nXGB_prediction = xgboost.predict(x_train)\nXGB_score= accuracy_score(y_train,XGB_prediction)\nprint('accuracy score on train using XGBoost :',XGB_score)","37e81a40":"#XGBoost model on the test\nXGB_prediction = xgboost.predict(x_test)\nXGB_score= accuracy_score(y_test,XGB_prediction)\nprint('accuracy score on test using XGBoost :',XGB_score)","606cf7d8":"rfc2=RandomForestClassifier()\nrfc2.fit(x_train,y_train)\n#model on train using all the independent values in df\nrfc_prediction = rfc2.predict(x_train)\nrfc_score= accuracy_score(y_train,rfc_prediction)\nprint('accuracy score on train using random forest : ',rfc_score)\n#model on test using all the indpendent values in df\nrfc_prediction = rfc2.predict(x_test)\nrfc_score= accuracy_score(y_test,rfc_prediction)\nprint('accuracy score on test using random forest:',rfc_score)","b6fd0f84":"dec=DecisionTreeClassifier()\ndec.fit(x_train,y_train)\n#model on train using all the independent values in df\ndec_prediction = dec.predict(x_train)\ndec_score= accuracy_score(y_train,dec_prediction)\nprint('accuracyscore on train using decision tree: ',dec_score)\n#model on test using all the independent values in df\ndec_prediction = dec.predict(x_test)\ndec_score= accuracy_score(y_test,dec_prediction)\nprint('accuracy score on test using decision tree: ',dec_score)","07861cd6":"log =LogisticRegression()\nlog.fit(x_train,y_train)\n#model on train using all the independent values in df\nlog_prediction = log.predict(x_train)\nlog_score= accuracy_score(y_train,log_prediction)\nprint('Accuracy score using logisitic regression on train :',log_score)\n#model on train using all the independent values in df\nlog_prediction = log.predict(x_test)\nlog_score= accuracy_score(y_test,log_prediction)\nprint('Accuracy score using logisitic regression on test :',log_score)","feb0bada":"**(please upote if you like )**","6cf756b1":"## loan prediction sloved!!!"}}