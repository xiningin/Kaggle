{"cell_type":{"e128371c":"code","5297ded8":"code","e4f340e6":"code","81abd187":"code","2da81f3b":"code","1b736840":"code","aa6f6db1":"code","7109afb2":"code","75f45992":"code","61b2e15b":"code","d88d0fcd":"code","ac376061":"code","fe500912":"code","ee88154b":"code","c66f26db":"code","0b432225":"code","ee16a36d":"code","4a8ed75b":"code","cca3a155":"code","97dbd3b3":"code","6bfb7b4f":"code","b11068a5":"code","7bd9ed91":"code","ae4e2eb3":"code","2920acfc":"code","ae10cb58":"code","74ac3fa1":"code","f331d49c":"markdown","19119a81":"markdown"},"source":{"e128371c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5297ded8":"# libraries\nimport os\nimport numpy as np \nimport pandas as pd \npd.options.mode.chained_assignment = None\nfrom tqdm.notebook import tqdm\ntqdm.pandas()\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# sklearn\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import metrics\n\n# nltk\nimport nltk\nfrom nltk import word_tokenize\nfrom nltk.stem import WordNetLemmatizer, PorterStemmer, LancasterStemmer","e4f340e6":"# files\nos.listdir(\"..\/input\/feedback-prize-2021\")","81abd187":"submission = pd.read_csv(\"..\/input\/feedback-prize-2021\/sample_submission.csv\")\nsubmission.head()","2da81f3b":"train_df = pd.read_csv('..\/input\/feedback-prize-2021\/train.csv')\ntrain_df.head()","1b736840":"train_df.discourse_type.value_counts(normalize=False)","aa6f6db1":"train_dir = \"..\/input\/feedback-prize-2021\/train\"\ntest_dir = \"..\/input\/feedback-prize-2021\/test\"","7109afb2":"def create_full_text_dataframe(train=True) -> pd.DataFrame:\n    id_list = []\n    text_list = []\n    \n    if train:\n        for id in tqdm(train_df.id):\n            filepath = os.path.join(train_dir, f\"{id}.txt\")\n            text = open(filepath, 'r').read()\n\n            id_list.append(id)\n            text_list.append(text)\n    else:\n        for filename in tqdm(os.listdir(test_dir)):\n            filepath = os.path.join(test_dir, filename)\n            id = str(filename).strip()[:-4]\n            text = open(filepath, 'r').read()\n            \n            id_list.append(id)\n            text_list.append(text)\n            \n    return pd.DataFrame(data={\"id\": id_list, \"text\": text_list})","75f45992":"df_train = create_full_text_dataframe()","61b2e15b":"df_test = create_full_text_dataframe(train=False)","d88d0fcd":"df_train = df_train.merge(train_df, on=\"id\", how=\"inner\")","ac376061":"df = df_train[[\"id\", \"discourse_text\", \"discourse_type\"]]","fe500912":"# lemmatize (or stem?)\n\n#lemmatizer = WordNetLemmatizer()\n#df['discourse_text'] = df['discourse_text'].progress_apply(lambda text: ' '.join([lemmatizer.lemmatize(word) for word in word_tokenize(text)]))","ee88154b":"# Target label encoding\nencoder = LabelEncoder()\nlabels = encoder.fit_transform(df.discourse_type)\n\n# encoded target labels\ndf.loc[:, \"label\"] = labels","c66f26db":"# train\/test splitting\nX_train, X_test, y_train, y_test = train_test_split(df.discourse_text, df.label, test_size=0.02)","0b432225":"# Model Pipeline and training\n\nmultinomialNB = Pipeline([\n        ('vect', CountVectorizer(stop_words='english', ngram_range=(1, 2), binary=True)),\n        ('tfidf', TfidfTransformer(norm='l2', use_idf=True)),\n        ('clf', MultinomialNB(alpha=0.1)),    \n])\n\n# training\nmultinomialNB.fit(X_train, y_train)","ee16a36d":"# prediction on test data\ny_test_pred = multinomialNB.predict(X_test)","4a8ed75b":"# Results on test set\nprint(\"\\nTest Precision:\", metrics.precision_score(y_test, y_test_pred, average='micro'))\nprint(\"\\nTest Recall:\", metrics.recall_score(y_test, y_test_pred, average='micro'))\nprint(\"\\nClassification Report:\\n\", metrics.classification_report(y_test, y_test_pred))","cca3a155":"def plot_confusion_matrix(y_test, y_scores, class_names):\n    num_class = len(class_names)\n    cm = metrics.confusion_matrix(y_test, y_scores)\n\n    # normalize\n    con = np.zeros((num_class, num_class))\n    for x in range(num_class):\n        for y in range(num_class):\n            con[x,y] = cm[x,y]\/np.sum(cm[x,:])\n\n    plt.figure(figsize=(10,8))\n    sns.set(font_scale=1.0) # for label size\n    sns.heatmap(con, annot=True, fmt=\".2\", cmap='Blues',xticklabels= class_names , yticklabels= class_names)\n    plt.show()","97dbd3b3":"plot_confusion_matrix(y_test, y_test_pred, encoder.inverse_transform(np.unique(labels)))","6bfb7b4f":"# create df_test: a record from each discourse within test text docs\ndef expand_df_test(df: pd.DataFrame=df_test) -> pd.DataFrame:\n    \n    ids = []; data = []\n    for id, text in zip(df.id, df.text):\n        sentences = nltk.sent_tokenize(text)\n        \n        id_sentences = []; idx = 0 \n        for sentence in sentences:\n            id_sentence = []\n            words = sentence.split()\n            for w in words:\n                id_sentence.append(idx)\n                idx += 1\n            id_sentences.append(id_sentence)\n        data += list(zip([id] * len(sentences), sentences, id_sentences))\n        \n    tmp = pd.DataFrame(data, columns=['id', 'text', 'predictionstring'])\n    return tmp","b11068a5":"test = expand_df_test()","7bd9ed91":"# prediction on test data\n\ntest[\"class\"] = multinomialNB.predict(test.text)","ae4e2eb3":"test.loc[:, \"class\"] = encoder.inverse_transform(test[\"class\"].values)","2920acfc":"# submission\nresult = test[[\"id\", \"class\", \"predictionstring\"]]\nresult['predictionstring'] = result['predictionstring'].apply(lambda x: ' '.join([str(i) for i in x]))","ae10cb58":"result.head()","74ac3fa1":"result.to_csv(\"submission.csv\", index=False)","f331d49c":"#### Did it work?\nI'll make it easier for students to receive feedback on their writing and increase opportunities to improve writing outcomes. Virtual writing tutors and automated writing systems can leverage these algorithms while teachers may use them to reduce grading time. The open-sourced algorithms you come up with will allow any educational organization to better help young writers develop.\n\n#### What did you not understand about this process?\nWell, everything provides in the competition data page. I've no problem while working on it. If you guys don't understand the thing that I'll do in this notebook then please comment on this notebook.\n\n#### What else do you think you can try as part of this approach?\nWriting is a critical skill for success. However, less than a third of high school seniors are proficient writers, according to the National Assessment of Educational Progress. Unfortunately, low-income, Black, and Hispanic students fare even worse, with less than 15 percent demonstrating writing proficiency. One way to help students improve their writing is via automated feedback tools, which evaluate student writing and provide personalized feedback.","19119a81":"#### What are you trying to do in this notebook?\nIn this competition, I\u2019ll identify elements in student writing. More specifically, I will automatically segment texts and classify argumentative and rhetorical elements in essays written by 6th-12th grade students. I'll access to the largest dataset of student writing ever released in order to test your skills in natural language processing, a fast-growing area of data science.\n\n#### Why are you trying it?\nI'll make it easier for students to receive feedback on their writing and increase opportunities to improve writing outcomes. Virtual writing tutors and automated writing systems can leverage these algorithms while teachers may use them to reduce grading time. The open-sourced algorithms you come up with will allow any educational organization to better help young writers develop.\n\nMy task is to predict the human annotations. I will first need to segment each essay into discrete rhetorical and argumentative elements (i.e., discourse elements) and then classify each element as one of the following:\n\n- Lead - an introduction that begins with a statistic, a quotation, a description, or some other device to grab the reader\u2019s attention and point toward the thesis\n\n- Position - an opinion or conclusion on the main question\n\n- Claim - a claim that supports the position\n\n- Counterclaim - a claim that refutes another claim or gives an opposing reason to the position\n\n- Rebuttal - a claim that refutes a counterclaim\n\n- Evidence - ideas or examples that support claims, counterclaims, or rebuttals.\n\n- Concluding Statement - a concluding statement that restates the claims"}}