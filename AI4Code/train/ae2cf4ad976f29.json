{"cell_type":{"06a4b102":"code","4aac0c77":"code","64992112":"code","43206047":"code","f93fe2ec":"code","a19548b7":"code","1bc0819e":"code","6235d581":"code","84b8e72e":"code","313e2ba2":"code","be940059":"code","f4526579":"code","1bed125e":"markdown","db670b04":"markdown","a712bd7d":"markdown"},"source":{"06a4b102":"import pandas as pd\nimport numpy as np\ndf = pd.read_csv(\"..\/input\/groceries\/groceries - groceries.csv\") #imported data","4aac0c77":"df.fillna(0,inplace=True) #preprocessing - - replacing Nan values with 'zero'\ndf","64992112":"trans = []\nfor i in range(0,len(df)):\n    trans.append([str(df.values[i,j]) for j in range(0,32) if str(df.values[i,j])!='0'])","43206047":"from mlxtend.preprocessing import TransactionEncoder #imported trasactionencoder from mlxtend\nencode = TransactionEncoder()\ndf = encode.fit_transform(trans)\ndf = pd.DataFrame(df, columns = encode.columns_)","f93fe2ec":"df.columns","a19548b7":"df.head()","1bc0819e":"from mlxtend.frequent_patterns import apriori\nitemsets=apriori(df, min_support = 0.02, use_colnames = True)\nitemsets           #support values for frequent itemsets","6235d581":"frequent_itemsets=itemsets.sort_values(by=['support'], ascending=False) #sorting to get top 10 frequent itemsets\nTop_ten=frequent_itemsets[:10]\nTop_ten","84b8e72e":"from mlxtend.frequent_patterns import association_rules\nrules_mlxtend = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1)\nrules_mlxtend.head()","313e2ba2":"#rules=rules_mlxtend[(rules_mlxtend['lift'] >= 1)]","be940059":"Top_rules=rules_mlxtend.sort_values(by=['lift'], ascending=False) #sorting to get top 10 rules based on lift\nTop_rules[:10]","f4526579":"#Top_rules[Top_rules['antecedents'] == frozenset(['whole milk'])]\n#Top_rules[Top_rules['antecedents'] == frozenset(['other vegetables'])]\n#Top_rules[Top_rules['antecedents'] == frozenset(['root vegetables'])]\n#Top_rules[Top_rules['antecedents'] == frozenset(['(pip fruit'])]\n#Top_rules[Top_rules['antecedents'] == frozenset(['tropical fruit'])]\n#Top_rules[Top_rules['antecedents'] == frozenset(['yogurt'])]","1bed125e":"- TOP 10 ITEMSETS:","db670b04":"- Top 10 Rules based on Lift","a712bd7d":" - Check for frozensets\n - This is different data set i worked on so below might be different names"}}