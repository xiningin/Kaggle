{"cell_type":{"5663e524":"code","4fdcbbc2":"code","ffd7eb61":"code","daa2ecf0":"code","b2c88b63":"markdown"},"source":{"5663e524":"import glob\nimport os\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4fdcbbc2":"df = pd.read_csv('\/kaggle\/input\/omicron-covid19-variant-daily-cases\/covid-variants.csv')\ndf['date'] = pd.to_datetime(df['date'])\ndf['fraction'] = (df['num_sequences'] + 1) \/ (df['num_sequences_total'] + 2)\ndf['odds'] = df['fraction'] \/ (1.0 - df['fraction'])\no = df[(df['variant'] == 'Omicron') & df['location'].isin({'United States', 'United Kingdom', 'Denmark'}) & (df['num_sequences'] > 0)].sort_values('date')","ffd7eb61":"plt.figure(figsize=(17, 10))\n\nseries = []\n\nfor location, location_df in sorted(o.groupby('location'), key=lambda df: df[1]['perc_sequences'].max(), reverse=True):\n    if len(location_df) < 2:\n        continue\n\n    plt.plot(location_df['date'], location_df['odds'], label=location)\n    \n    series.append(location_df)\n\n    all_df = pd.concat(series, ignore_index=True)\n\nall_df = all_df.groupby('date')[['num_sequences', 'num_sequences_total']].sum().reset_index()\nall_df['ratio'] = all_df['num_sequences'] \/ all_df['num_sequences_total']\nall_df['odds'] = all_df['ratio'] \/ (1.0 - all_df['ratio'])\nall_df['log_odds'] = all_df['odds'].apply(np.log)\nall_df['daily_growth'] = ((all_df['log_odds'] - all_df['log_odds'].shift(1)) \/ ((all_df['date'] - all_df['date'].shift(1)).dt.total_seconds() \/ 86400))\nall_df['99pct'] = all_df['date'] + pd.to_timedelta(((np.log(0.99 \/ 0.01) - all_df['log_odds']) \/ all_df['daily_growth']).apply(np.round), unit='D')\n\nplt.plot(all_df['date'], all_df['odds'], label='all', color='black', linestyle=':')\nplt.scatter(x=all_df['99pct'].iloc[-1], y=0.99 \/ 0.01, marker='x', color='black')\n\nplt.yscale('log')\nplt.axhline(0.99 \/ 0.01, label='99%', color='black')\nplt.legend()\nplt.grid()\nplt.show()","daa2ecf0":"all_df","b2c88b63":"###### "}}