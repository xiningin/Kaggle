{"cell_type":{"a8d14938":"code","a5840e98":"code","84d420a6":"code","d4e5bb81":"code","1d582b41":"code","a5a6c17b":"code","4bd35bbe":"code","a02013bb":"code","953120e8":"code","94e7168c":"code","72302014":"code","ef10a3d5":"code","6b454fbd":"code","261dbe5e":"code","0c1bd10d":"code","6954f2f4":"code","f9bcc843":"code","2129cc40":"code","0e204388":"code","3c8d9922":"code","adcbbb23":"markdown","37cd3df4":"markdown","3f02427a":"markdown","ce77bfd0":"markdown","e32ee0c2":"markdown","19374dfd":"markdown","21d6c245":"markdown","fc9fbb73":"markdown","e8cca134":"markdown","b547e4d1":"markdown","890212f6":"markdown","c15f3a0d":"markdown","7c14e4b8":"markdown","32f3c565":"markdown","20837c1d":"markdown","f2bdec3a":"markdown","052fde19":"markdown","44de6ada":"markdown"},"source":{"a8d14938":"pip install pycaret","a5840e98":"import numpy as np\nimport pandas as pd","84d420a6":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data  = pd.read_csv('..\/input\/titanic\/test.csv')\nsub_data   = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","d4e5bb81":"from pycaret.classification import *\n\n#PyCaret\u2019s Classification Module is a supervised machine learning module \n#which is used for classifying elements into groups","1d582b41":"train_data.head()","a5a6c17b":"train_data.info()","4bd35bbe":"exp_clf = setup(data = train_data, target = 'Survived', train_size = 0.7, \n                numeric_imputation = 'mean', ignore_features = ['Name', 'Ticket', 'Cabin'], silent = True, \n                profile = True)\n\n#If profile set to true, a data profile for Exploratory Data Analysis will be displayed \n#in an interactive HTML report. You can see it below. It's amazing! You can easily browse through to find the \n#correlations, missing data, variables and more. ","a02013bb":"compare_models()\n\n#The models are sorted by accuracy","953120e8":"xgb_model = create_model('xgboost')","94e7168c":"xgb_model_tuned = tune_model('xgboost')","72302014":"#creating Random Forest Model\nrf_model = create_model('rf')\n\n#Ensemble trained RF model\n","ef10a3d5":"plot_model(xgb_model_tuned, plot= 'learning')","6b454fbd":"plot_model(rf_model)","261dbe5e":"evaluate_model(xgb_model_tuned)\n\n#This function displays a user interface for all of the available plots for a given estimator.\n#Guys this is really an amazing feature - again another interactive display:","0c1bd10d":"evaluate_model(rf_model)","6954f2f4":"interpret_model(rf_model)\n\n#Interpret Model can only be used for tree based models","f9bcc843":"predict_model(xgb_model_tuned)\n","2129cc40":"predict_model(rf_model)\n","0e204388":"prediction = predict_model(xgb_model_tuned, data=test_data)\nprediction.head()","3c8d9922":"sub_data['Survived'] = round(prediction['Score']).astype(int)\nsub_data.to_csv('my_submission.csv',index=False)\nsub_data.head()","adcbbb23":"**compare_models** function uses all models in the model library and scores them using Stratified Cross Validation. The output prints a score grid that shows Accuracy, AUC, Recall, Precision, F1 and Kappa by fold (default CV = 10 Folds) of all the available models in the model library.","37cd3df4":"# Interpret Model","3f02427a":"This function initializes the environment in pycaret and creates the transformation pipeline to prepare the data for modeling and deployment. setup() must called before executing any other function in pycaret. It takes two mandatory parameters: dataframe {array-like, sparse matrix} and name of the target column. All other parameters are optional.","ce77bfd0":"Find abbreviations for all models [here](http:\/\/https:\/\/pycaret.org\/classification\/)","e32ee0c2":"Predict new data using a trained estimator. ","19374dfd":"As we can see Extreme Gradient Boosting Classifier has the highest accuracy. Now lets create a model","21d6c245":"# Ensemble Model","fc9fbb73":"**PyCaret is an open source low-code machine learning library in Python that aims to reduce the hypothesis to insights cycle time in a ML experiment**\n\nFor more details on Pycaret please refer to : https:\/\/pycaret.org\/. They have excellent documentation. I refered to the same while preparing this Kernel. ","e8cca134":"# Tuning the Model","b547e4d1":"# Plotting Model","890212f6":"# [](http:\/\/)Compare Models","c15f3a0d":"# Predict Model","7c14e4b8":"# Model Evaluation","32f3c565":"Returns interpretation plot based on the test \/ hold-out set.","20837c1d":"*Trying our Random Forest because I know it works for Titanic dataset - I have tried it before*","f2bdec3a":"As we can see there are some missing vaues above. The setup() function - below will do numeric imputation with mean value for all the missing data","052fde19":"# Creating Model","44de6ada":"# setup()"}}