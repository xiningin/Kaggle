{"cell_type":{"c6b1dd1f":"code","319ac72b":"code","c3bc9964":"code","ae41a86a":"code","a405eaa9":"code","35554bba":"code","7f7d12c0":"code","2b365e3c":"code","fe54010c":"code","b12a04eb":"code","4d18677a":"code","fc34a20b":"code","83a0532d":"code","e98a4b46":"code","41942b94":"code","26952817":"code","d3c1de85":"code","bd28f33e":"code","b7ee51c2":"code","fa0c19fd":"code","efa6df41":"code","fa7cde64":"code","141a475f":"code","f05bdfdf":"code","5acd29ec":"code","3a7bd966":"code","9f623aaa":"code","eab35f44":"code","121c68be":"markdown","fc1d6078":"markdown","e2bcd4fd":"markdown","d0236826":"markdown","6f00befd":"markdown","c0738272":"markdown","c3e0e624":"markdown","4f354b33":"markdown","dce11c29":"markdown","fffb38f1":"markdown","dfb51bde":"markdown","55d3f307":"markdown","155e431a":"markdown","a9734822":"markdown"},"source":{"c6b1dd1f":"import sys\nsys.path.insert(0, \"..\/src\/\")\n%load_ext autoreload\n%autoreload 2","319ac72b":"import numpy as np\nimport altair as alt\nimport pandas as pd\nfrom PIL import Image\nfrom glob import glob\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom debug import generate_plot_from_csv","c3bc9964":"# We've already saved the predictions, so just load them back\nbaseline_shha_train_224 = generate_plot_from_csv(\n    name=\"vgg16baseline\", dataset=\"SHHA\", ds_type=\"train\",\n    cropsize=224\n)\n\nbaseline_shha_train_300 = generate_plot_from_csv(\n    name=\"vgg16baseline\", dataset=\"SHHA\", ds_type=\"train\",\n    cropsize=300\n)\n\nbaseline_shha_train_448 = generate_plot_from_csv(\n    name=\"vgg16baseline\", dataset=\"SHHA\", ds_type=\"train\",\n    cropsize=448\n)\n\nbaseline_shha_train_600 = generate_plot_from_csv(\n    name=\"vgg16baseline\", dataset=\"SHHA\", ds_type=\"train\",\n    cropsize=600\n)","ae41a86a":"ah = alt.hconcat(baseline_shha_train_224, baseline_shha_train_300)\nav = alt.hconcat(baseline_shha_train_448 | baseline_shha_train_600)\nchart = alt.vconcat(ah, av)\nchart","a405eaa9":"baseline_shha_test_224 = generate_plot_from_csv(\n    name=\"vgg16baseline\", dataset=\"SHHA\", ds_type=\"test\",\n    cropsize=224\n)\n\nbaseline_shha_test_300 = generate_plot_from_csv(\n    name=\"vgg16baseline\", dataset=\"SHHA\", ds_type=\"test\",\n    cropsize=300\n)\n\nbaseline_shha_test_448 = generate_plot_from_csv(\n    name=\"vgg16baseline\", dataset=\"SHHA\", ds_type=\"test\",\n    cropsize=448\n)\n\nbaseline_shha_test_600 = generate_plot_from_csv(\n    name=\"vgg16baseline\", dataset=\"SHHA\", ds_type=\"test\",\n    cropsize=600\n)","35554bba":"ah = alt.hconcat(baseline_shha_test_224, baseline_shha_test_300)\nav = alt.hconcat(baseline_shha_test_448 | baseline_shha_test_600)\nchart = alt.vconcat(ah, av)\nchart","7f7d12c0":"baseline_shhb_train_224 = generate_plot_from_csv(\n    name=\"vgg16baseline\", dataset=\"SHHB\", ds_type=\"train\",\n    cropsize=224\n)\n\nbaseline_shhb_train_300 = generate_plot_from_csv(\n    name=\"vgg16baseline\", dataset=\"SHHB\", ds_type=\"train\",\n    cropsize=300\n)\n\nbaseline_shhb_train_448 = generate_plot_from_csv(\n    name=\"vgg16baseline\", dataset=\"SHHB\", ds_type=\"train\",\n    cropsize=448\n)\n\nbaseline_shhb_train_600 = generate_plot_from_csv(\n    name=\"vgg16baseline\", dataset=\"SHHB\", ds_type=\"test\",\n    cropsize=600\n)\n\n\nah = alt.hconcat(baseline_shhb_train_224, baseline_shhb_train_300)\nav = alt.hconcat(baseline_shhb_train_448 | baseline_shhb_train_600)\nchart = alt.vconcat(ah, av)\nchart","2b365e3c":"\nbaseline_shhb_test_224 = generate_plot_from_csv(\n    name=\"vgg16baseline\", dataset=\"SHHB\", ds_type=\"test\",\n    cropsize=224\n)\n\nbaseline_shhb_test_300 = generate_plot_from_csv(\n    name=\"vgg16baseline\", dataset=\"SHHB\", ds_type=\"test\",\n    cropsize=300\n)\n\nbaseline_shhb_test_448 = generate_plot_from_csv(\n    name=\"vgg16baseline\", dataset=\"SHHB\", ds_type=\"test\",\n    cropsize=448\n)\n\nbaseline_shhb_test_600 = generate_plot_from_csv(\n    name=\"vgg16baseline\", dataset=\"SHHB\", ds_type=\"test\",\n    cropsize=600\n)\n\nah = alt.hconcat(baseline_shhb_test_224, baseline_shhb_test_300)\nav = alt.hconcat(baseline_shhb_test_448 | baseline_shhb_test_600)\nchart = alt.vconcat(ah, av)\nchart","fe54010c":"crop_sizes = [224, 300, 448, 600]\n\ndef layout_plots(plots):\n    assert len(plots) == 4\n    \n    ah = alt.hconcat(plots[0], plots[1])\n    av = alt.hconcat(plots[2], plots[3])\n    chart = alt.vconcat(ah, av)\n    return chart    ","b12a04eb":"plots = []\nfor cropsize in crop_sizes:\n    plot = generate_plot_from_csv(\n        name=\"vgg16decoder\", dataset=\"SHHA\", ds_type=\"train\",\n        cropsize=cropsize\n    )\n    plots.append(plot)\n    \n\nlayout_plots(plots)","4d18677a":"plots = []\nfor cropsize in crop_sizes:\n    plot = generate_plot_from_csv(\n        name=\"vgg16decoder\", dataset=\"SHHA\", ds_type=\"test\",\n        cropsize=cropsize\n    )\n    plots.append(plot)\n    \n\nlayout_plots(plots)","fc34a20b":"plots = []\nfor cropsize in crop_sizes:\n    plot = generate_plot_from_csv(\n        name=\"vgg16decoder\", dataset=\"SHHB\", ds_type=\"train\",\n        cropsize=cropsize\n    )\n    plots.append(plot)\n    \n\nlayout_plots(plots)","83a0532d":"plots = []\nfor cropsize in crop_sizes:\n    plot = generate_plot_from_csv(\n        name=\"vgg16decoder\", dataset=\"SHHB\", ds_type=\"test\",\n        cropsize=cropsize\n    )\n    plots.append(plot)\n    \n\nlayout_plots(plots)","e98a4b46":"from glob import glob\nimport pandas as pd","41942b94":"from sklearn.metrics import mean_squared_error,mean_absolute_error\n# Load CSV Files\nfnames = glob(\"..\/input\/dataset-for-crowd\/predictions\/debug-448\/*.csv\")\n\n# Initialise Dataframe\ndf_metrics = pd.DataFrame(columns=[\"model\", \"input_size\",\"dataset\", \"ds_type\", \"mse\", \"mae\"])\nfor fname in fnames:\n    splits = fname.split(\"\/\")[-1].split(\"_\")\n    df = pd.read_csv(fname)\n    mse = mean_squared_error(df.true_labels.values, df.predicted_labels.values)\n    mae = mean_absolute_error(df.true_labels.values, df.predicted_labels.values)    \n    name = splits[0]\n    size = splits[4][:-4]\n    dataset = splits[1]\n    ds_type = splits[2]\n    name = name.replace(\"vgg16\",\"\").upper()\n    df_metrics = df_metrics.append(\n        {\"model\": name,\n         \"input_size\": size,\n         \"dataset\": dataset, \n         \"ds_type\": ds_type.upper(), \n         \"mse\": mse, \n         \"mae\": mae,\n#          \"group\": f\"{dataset}-{ds_type}\".upper()\n         \"group\": f\"{name}-{dataset}-{ds_type}\".upper()         \n        },\n        ignore_index=True\n    )","26952817":"import seaborn as sns\ncm = sns.light_palette(\"salmon\", as_cmap=True, reverse=False)\n# cm = sns.diverging_palette(150, 10, as_cmap=True)","d3c1de85":"# Review the list of unique groups\ndf_metrics.group.unique()","bd28f33e":"def plot_df(groupname):\n    return df_metrics[df_metrics.group == groupname] \\\n        .sort_values(['model','dataset','ds_type', 'input_size']) \\\n        .style.background_gradient(cmap=cm)","b7ee51c2":"plot_df('BASELINE-SHHA-TRAIN')","fa0c19fd":"plot_df('BASELINE-SHHA-TEST')","efa6df41":"# Display All\ndf_metrics \\\n        .sort_values(['model','dataset','ds_type', 'input_size']) \\\n        .style.background_gradient(cmap=cm)","fa7cde64":"mse_plot = alt.Chart(df_metrics[df_metrics.dataset == 'SHHA']).mark_bar().encode(\n    alt.X('input_size', title=\"\"),\n    alt.Y('mse', title=\"MSE\"),\n    alt.Color('ds_type', legend=alt.Legend(orient='bottom'), title=\"Model\"),\n    alt.Column('group', title=\"\"),\n)\n\nmse_plot","141a475f":"mae_plot = alt.Chart(df_metrics[df_metrics.dataset == 'SHHA']).mark_bar().encode(\n    alt.X('input_size', title=\"\"),\n    alt.Y('mae', title=\"MAE\"),\n    alt.Color('model', legend=alt.Legend(orient='bottom')),\n    alt.Column('group', title=\"\")\n)\n\nmae_plot","f05bdfdf":"def plot_histogram(fname=\"predictions\/debug-448\/vgg16baseline_SHHA_train_predictions_224.csv\", step=50):\n    df = pd.read_csv(fname)\n    df['diff'] = (df['true_labels'] - df['predicted_labels'])\n    max_count = max(df.true_labels.values)\n    step = int(max_count \/ 10.)\n#     print(step)\n#     df.head()\n    heatmap = alt.Chart(df).mark_rect().encode(\n        alt.X('true_labels:Q', bin=alt.Bin(extent=[0, max_count], step=step), title=\"True\"),\n        alt.Y('predicted_labels:Q', bin=alt.Bin(extent=[0, max_count], step=step), title=\"Predicted\"),\n        alt.Color('sum(diff)', title=\"Difference\")\n    )\n\n    points = alt.Chart(df).mark_circle(\n        color='black',\n        size=5\n    ).encode(\n        alt.X('true_labels:Q'),\n        alt.Y('predicted_labels:Q'),\n    )\n\n    return (heatmap + points).properties(\n        width=500,\n        height=400\n    ).properties(\n        title=\"Heatmap: True vs. Predicted\"\n    ).interactive()","5acd29ec":"plot_histogram(\"predictions\/debug-448\/vgg16baseline_SHHA_train_predictions_224.csv\")","3a7bd966":"plot_histogram(\"predictions\/debug-448\/vgg16baseline_SHHA_train_predictions_448.csv\")","9f623aaa":"plot_histogram(\"predictions\/debug-448\/vgg16baseline_SHHA_test_predictions_448.csv\")","eab35f44":"plot_histogram(\"predictions\/debug-448\/vgg16baseline_SHHA_train_predictions_600.csv\")","121c68be":"# Baseline Model","fc1d6078":"# Heatmap\n\nCan we identify the sizes where it misses the most?","e2bcd4fd":"# Conclusion\n\nThe model was trained using 448 x 448PX input images that were center cropped. We observe that:\n1. model is able to overfit the training data when input size is kept to 448px\n2. model performance start to degrade, even on training data, as we increase the input size\n3. model is also able to perform quite well on unseen data as long as we keep the input size to 448px\n4. model performs well when crowd count is small, evident in SHHB dataset\n\nWhy does model perform better for smaller crowds?\n\nBecause when we resize and center-crop, the max amount to crowd it sees is limited to < 1000\n","d0236826":"# Dataset: SHHB\n\nNow, let's see how does the model generalises to unseen dataset. \nWe will plot baseline model performance on both train and test set.\n\nTrain set","6f00befd":"# Model Metrics\n\nNext, we review the model metrics on each dataset","c0738272":"## Dataset: SHHA \n\nNext, We plot the baseline model performance on the test set","c3e0e624":"### MAE\n\nPlot Baseline and VGG+Decoder MAE on SHHA dataset","4f354b33":"## SHHA TEST","dce11c29":"And, then on test set","fffb38f1":"# Plot Metrics\n\nThe table is fine for individual group but it gets difficult to compare so we instead plot the metrics.\n\n### MSE\n\nPlot Baseline and VGG+Decoder MSE on SHHA dataset","dfb51bde":"Plot baseline model performance on the test set","55d3f307":"## Model Evaluation","155e431a":"## Dataet: SHHB","a9734822":"# VGG16 With Decoder\n\nNext, we evaluate the VGG16WithDecoder model and plot its performance against the same set of datasets"}}