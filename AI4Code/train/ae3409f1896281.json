{"cell_type":{"b4f4b51b":"code","75288ffd":"code","d21c9d08":"code","8e064891":"code","1c07e469":"code","d5a60969":"code","ac92494a":"code","7f33463d":"code","87eae066":"code","f0ddd50b":"code","62da814e":"code","247d89fa":"markdown","7d818f4e":"markdown","7602b6b7":"markdown","b964922c":"markdown","f915df44":"markdown","785f962f":"markdown","f541d888":"markdown","0a5b4056":"markdown","c9042b2d":"markdown","6377e1d8":"markdown","21cc4df4":"markdown","b9eea493":"markdown"},"source":{"b4f4b51b":"import pandas as pd\npd.set_option('max_rows', 5)\nfrom learntools.advanced_pandas.method_chaining import *\n\nchess_games = pd.read_csv(\"..\/input\/chess\/games.csv\")","75288ffd":"check_q1(pd.DataFrame())","d21c9d08":"chess_games.head()","8e064891":"# Your code here\nchess= pd.Series([0.48, 0.44, 0.08], index=['white', 'black', 'draw'], name='winner')\nprint(chess)","1c07e469":"# Your code here\nchess_games.opening_name.map(lambda n: n.split(\":\")[0].split(\"|\")[0].split(\"#\")[0].strip()).value_counts() #counts how many times each opening_name occurs","d5a60969":"# Your code here\nchess_games.assign(\n    victory_staus=chess_games.apply(lambda srs: srs.victory_status if pd.notnull(srs.victory_status) else srs.white_id, \n                        axis='columns')\n)\n\n","ac92494a":"chess_games.victory_status.value_counts() #counts how many times each piece of data occurs in the column","7f33463d":"# Your code here\nchessG=chess_games.assign(\n    victory_staus=chess_games.apply(lambda srs: srs.victory_status if pd.notnull(srs.victory_status) else srs.white_id, \n                        axis='columns')\n)\nchessG.iloc[:20].pipe  #applies method chaing technique to the top 20 users","87eae066":"kepler = pd.read_csv(\"..\/input\/kepler-exoplanet-search-results\/cumulative.csv\")\nkepler","f0ddd50b":"# Your code here\nKep=kepler.groupby(['koi_pdisposition', 'koi_disposition']).kepler_name.agg([len])\nKep.sort_index()","62da814e":"wine_reviews = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data-130k-v2.csv\", index_col=0)\nramen_reviews = pd.read_csv(\"..\/input\/ramen-ratings\/ramen-ratings.csv\", index_col=0)\nprint(wine_reviews.head())\nprint(ramen_reviews.head())","247d89fa":"# Congratulations\n\nYou've finished the Pandas track.  Many data scientist feel efficiency with Pandas is the most useful and practical skill they have, because it allows you to progress quickly in any project you have.\n\nYou can take advantage of your Pandas skills by entering a [Kaggle Competition](https:\/\/www.kaggle.com\/competitions) or answering a question you find interesting using [Kaggle Datasets](https:\/\/www.kaggle.com\/datasets).","7d818f4e":"**Exercise 5**: The Kepler space observatory is in the business of finding potential exoplanets (planets orbiting stars other suns) and, after collecting the evidence, generating whether or not to confirm, decline to confirm, or deny that a given space body is, in fact, an exoplanet. In the dataset above, the \"before\" status of the body is `koi_pdisposition`, and the \"after\" status is `koi_disposition`. \n\nUsing the dataset above, generate a `Series` counting all of the possible transitions between pre-disposition and post-disposition. In other words, generate a `Series` whose index is a `MultiIndex` based on the `{koi_pdisposition, koi_disposition}` fields, and whose values is a count of how many times each possible combination occurred.","7602b6b7":"# Checking Answers\n\n**Check your answers in each exercise using the  `check_qN` function** (replacing `N` with the number of the exercise). For example here's how you would check an incorrect answer to exercise 1:","b964922c":"# Method chaining workbook\n\n## Introduction\n\nThis is the workbook component of the \"Method chaining\" section of the tutorial. For the reference component, click [here](https:\/\/www.kaggle.com\/residentmario\/method-chaining-reference).\n\nThis is the last workbook in the tutorial. Congratulations! In this section we will put all of the things that we learned together to do some truly interesting things with some datasets. The exercises in this section are therefore also quite difficult! Try using method chaning syntax while working through the examples that follow, and make studious use of the hints that we provide.","f915df44":"**Exercise 4**: There are a lot of players in the dataset who have only played one or a small handful of games. Create a `DataFrame` like the one in the previous exercise, but only include users who are in the top 20 users by number of games played. See if you can do this using method chaining alone! Hint: reuse the code from the previous example. Then, use `pipe`.","785f962f":"Next, let's do some visual exercises.\n\nThe next exercise uses the following dataset:","f541d888":"**Exercise 1**: It's well-known that in the game of chess, white has a slight first-mover advantage against black. Can you measure this effect in this dataset? Use the `winner` column to create a `pandas` `Series` showing how often white wins, how often black wins, and how often the result is a tie, as a ratio of total games played. In other words, a `Series` that looks something like this:\n\n    white    0.48\n    black    0.44\n    draw     0.08\n    Name: winner, dtype: float64\n    \nHint: use `len` to get the length of the initial `DataFrame`, e.g. the count of all games played.","0a5b4056":"## Exercises\n\nView your data by running the cell below","c9042b2d":"The next few exercises use the following datasets:","6377e1d8":"**Exercise 2**: The `opening_name` field of the `chess_games` dataset provides interesting data on what the most commonly used chess openings are.  However, it gives a bit _too_ much detail, including information on the variation used for the most common opening types. For example, rather than giving `Queen's Pawn Game`, the dataset often includes `Queen's Pawn Game: Zukertort Variation`.\n\nThis makes it a bit difficult to use for categorical purposes. Here's a function that can be used to separate out the \"opening archetype\":\n\n ```python\n lambda n: n.split(\":\")[0].split(\"|\")[0].split(\"#\")[0].strip()\n ```\n\nUse this function to parse the `opening_name` field and generate a `pandas` `Series` counting how many times each of the \"opening archetypes\" gets used. Hint: use a map.","21cc4df4":"**Exercise 3**: In this dataset various players play variably number of games. Group the games by `{white_id, victory_status}` and count how many times each white player ended the game in `mate` , `draw`, `resign`, etcetera. The name of the column counting how many times each outcome occurred should be `n` (hint: `rename` or `assign` may help).","b9eea493":"If you get stuck, **use the `answer_qN` function to see the code with the correct answer.**\n\nFor the first set of questions, running the `check_qN` on the correct answer returns `True`.\n\nFor the second set of questions, using this function to check a correct answer will present an informative graph."}}