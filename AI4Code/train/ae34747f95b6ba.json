{"cell_type":{"2688bd57":"code","66216c59":"code","6a0dd2c8":"code","22caceea":"code","fadd505d":"code","701ae836":"code","c6d2af90":"code","31a0f780":"code","a7a085de":"code","a55a4c14":"code","7bd3e66d":"code","f30647bc":"code","a770dbde":"code","1015cb5d":"code","08eb005e":"code","c1d61311":"code","03e0f84d":"code","7fb0f2ba":"code","0eec5403":"code","a3a07c23":"code","0a2b9327":"code","63265f6f":"code","83cc367b":"code","5de48343":"code","0540c9e4":"code","a2c121a5":"code","d4589a01":"code","a2ecc69a":"code","7fdfe3ec":"code","e8cbdf47":"code","7b5e7a1d":"code","624bfb52":"code","d1c817de":"code","5c151e24":"code","684d4597":"code","e5e0521d":"code","d42dc835":"code","4f46f9b8":"code","eb89032f":"code","7148f712":"code","a73d5568":"code","c62a407b":"code","8373c7fd":"code","c52b65f0":"code","6fd7392a":"code","3336ef6c":"code","679395be":"code","bd56d489":"code","1619eace":"code","9f89a919":"code","8c045439":"code","d00a2954":"code","3ed82aa6":"code","3293f122":"code","5c58520c":"code","7dce7772":"code","6764f5a1":"code","07b34fa7":"code","aa42c91f":"code","5ad19b70":"code","1102c48c":"code","9341f2b4":"code","366b004c":"code","9af7eb63":"code","e576f0f7":"code","93ac1a14":"code","4e115cf6":"code","5521d46a":"code","1e2d3e90":"code","e21fe3de":"code","52cbec40":"code","6a7564b9":"code","9833bf72":"code","93d6a8a7":"code","ecea5e19":"markdown","84b5bbda":"markdown","d69a5434":"markdown","4958adc6":"markdown","9d54d981":"markdown","bef05de4":"markdown","950f7db6":"markdown","ca1eda75":"markdown","5f7184b2":"markdown","f25a4d8c":"markdown","5a9e29d9":"markdown","cd2c42cd":"markdown","e8db2927":"markdown","40c91d14":"markdown","13b61086":"markdown","37e37c56":"markdown"},"source":{"2688bd57":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","66216c59":"import numpy as np\nimport pandas as pf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport warnings\nwarnings.filterwarnings(\"ignore\")","6a0dd2c8":"main_df = pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\ndf = main_df.copy()\ndf.head()","22caceea":"# Dimension of dataset\n\ndf.shape","fadd505d":"# List of all columns\n\ndf.columns","701ae836":"# Basic Information about the dataframe\n\ndf.info()","c6d2af90":"# List of all features with number of unique values present in them\n\ndf.nunique()","31a0f780":"# Statistical measure of dataset\n\ndf.describe()","a7a085de":"# Checking for null values\n\ndf.isna().sum()","a55a4c14":"plt.figure(figsize=(7,5))\nsns.heatmap(df.isnull())","7bd3e66d":"plt.figure(figsize=(10,8))\nsns.heatmap(df.corr(), annot=True)","f30647bc":"sns.pairplot(df)","a770dbde":"px.scatter(df, x='free sulfur dioxide',y='total sulfur dioxide', color=df['quality'])","1015cb5d":"diag = px.density_heatmap(df, x=\"alcohol\", y=\"quality\", nbinsx=25, nbinsy=10, color_continuous_scale=\"thermal\")\ndiag.show()","08eb005e":"diag = px.pie(df, values='quality', names='quality', hole=0.5)\ndiag.show()","c1d61311":"labels = df['quality'].unique()\nvalues = df['quality'].value_counts()\n\n# pull is given as a fraction of the pie radius\ndiag = go.Figure(data=[go.Pie(labels=labels, values=values, pull=[0, 0.1, 0.2, 0.2, 0.2])])\ndiag.show()","03e0f84d":"diag = px.histogram(df, x=\"citric acid\", color=\"quality\",marginal=\"violin\")\ndiag.update_traces(opacity=.90)\ndiag.show()","7fb0f2ba":"diag = px.histogram(df, x=\"sulphates\", color=\"quality\",marginal=\"violin\")\ndiag.update_traces(opacity=.90)\ndiag.show()","0eec5403":"diag = px.histogram(df, x=\"pH\", color=\"quality\",marginal=\"violin\")\ndiag.update_traces(opacity=.90)\ndiag.show()","a3a07c23":"diag = px.density_contour(df, x=\"pH\", color=\"quality\")\ndiag.update_traces(opacity=0.90)\ndiag.show()","0a2b9327":"diag = px.histogram(df, x=\"volatile acidity\", color=\"quality\")\ndiag.update_traces(opacity=0.90)\ndiag.show()","63265f6f":"sns.factorplot(data=df, kind='box', size=10, aspect=1.5)","83cc367b":"sns.factorplot(x=df['fixed acidity'], y=df['quality'], data=df,\n                   kind='bar', size=12, aspect=1.5)","5de48343":"diag = px.violin(df, x=\"volatile acidity\",  color=\"quality\")\ndiag.update_traces(opacity=0.90)\ndiag.show()","0540c9e4":"bins = (2, 6.5, 8)\ngroup_names = ['not good', 'good']\ndf['quality'] = pd.cut(df['quality'], bins=bins, labels=group_names)","a2c121a5":"from sklearn.preprocessing import LabelEncoder\n\nlabel_encod = LabelEncoder()","d4589a01":"df.quality = label_encod.fit_transform(df.quality)","a2ecc69a":"X = df.drop('quality', axis=1)\ny = df.quality","7fdfe3ec":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.33, random_state=42)","e8cbdf47":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report","7b5e7a1d":"from sklearn.tree import DecisionTreeClassifier","624bfb52":"# Creating object of the model\n\nmodel_dt = DecisionTreeClassifier(max_depth=4, random_state=42)","d1c817de":"model_dt.fit(X_train, y_train)","5c151e24":"pred_dt = model_dt.predict(X_test)","684d4597":"dt  = round(accuracy_score(y_test, pred_dt)*100, 2)\nprint(dt) ","e5e0521d":"print(classification_report(y_test, pred_dt))","d42dc835":"print(classification_report(y_test, pred_dt))","4f46f9b8":"# confusion Maxtrix\ncm2 = confusion_matrix(y_test, pred_dt)\nsns.heatmap(cm2\/np.sum(cm2), annot = True, fmt=  '0.2%', cmap = 'Reds')\nplt.title(\"Decision Tree Classifier Confusion Matrix\",fontsize=12)\nplt.show()","eb89032f":"from sklearn.ensemble import RandomForestClassifier","7148f712":"# Creating model object\nmodel_rf = RandomForestClassifier(n_estimators=300,min_samples_leaf=0.16, random_state=42)","a73d5568":"# Training Model\nmodel_rf.fit(X_train, y_train)","c62a407b":"# Making Prediction\npred_rf = model_rf.predict(X_test)","8373c7fd":"# Calculating Accuracy Score\nrf = round(accuracy_score(y_test, pred_rf)*100, 2)\nprint(rf)","c52b65f0":"print(classification_report(y_test,pred_rf))","6fd7392a":"# confusion Maxtrix\ncm3 = confusion_matrix(y_test, pred_rf)\nsns.heatmap(cm3\/np.sum(cm3), annot = True, fmt=  '0.2%', cmap = 'Reds')\nplt.title(\"RandomForest Classifier Confusion Matrix\",fontsize=12)\nplt.show()","3336ef6c":"from xgboost import XGBClassifier","679395be":"# Creating model object\n\nmodel_xgb = XGBClassifier(max_depth= 8, n_estimators= 125, random_state= 0,  learning_rate= 0.03, n_jobs=5)","bd56d489":"# Training Model\n\nmodel_xgb.fit(X_train, y_train)","1619eace":"# Making Prediction\n\npred_xgb = model_xgb.predict(X_test)","9f89a919":"# Calculating Accuracy Score\n\nxgb = round(accuracy_score(y_test, pred_xgb)*100, 2)\nprint(xgb)","8c045439":"print(classification_report(y_test,pred_xgb))","d00a2954":"# confusion Maxtrix\ncm4 = confusion_matrix(y_test, pred_xgb)\nsns.heatmap(cm4\/np.sum(cm4), annot = True, fmt=  '0.2%', cmap = 'Reds')\nplt.title(\"XGBoost Classifier Confusion Matrix\",fontsize=12)\nplt.show()","3ed82aa6":"from sklearn.neighbors import KNeighborsClassifier","3293f122":"# Creating model object\nmodel_kn = KNeighborsClassifier(n_neighbors=9, leaf_size=20)","5c58520c":"# Training Model\nmodel_kn.fit(X_train, y_train)","7dce7772":"# Making Prediction\npred_kn = model_kn.predict(X_test)","6764f5a1":"# Calculating Accuracy Score\nkn = round(accuracy_score(y_test, pred_kn)*100, 2)\nprint(kn)","07b34fa7":"print(classification_report(y_test,pred_kn))","aa42c91f":"# confusion Maxtrix\ncm5 = confusion_matrix(y_test, pred_kn)\nsns.heatmap(cm5\/np.sum(cm5), annot = True, fmt=  '0.2%', cmap = 'Reds')\nplt.title(\"KN Classifier Confusion Matrix\",fontsize=12)\nplt.show()","5ad19b70":"from sklearn.svm import SVC, LinearSVC","1102c48c":"model_svm = SVC(kernel='rbf', random_state = 42)","9341f2b4":"model_svm.fit(X_train, y_train)","366b004c":"# Making Prediction\n\npred_svm = model_svm.predict(X_test)","9af7eb63":"# Calculating Accuracy Score\nsv = round(accuracy_score(y_test, pred_svm)*100, 2)\nprint(sv)","e576f0f7":"print(classification_report(y_test,pred_kn))","93ac1a14":"# confusion Maxtrix\ncm6 = confusion_matrix(y_test, pred_svm)\nsns.heatmap(cm6\/np.sum(cm6), annot = True, fmt=  '0.2%', cmap = 'Reds')\nplt.title(\"SVM Classifier Confusion Matrix\",fontsize=12)\nplt.show()","4e115cf6":"from sklearn.ensemble import AdaBoostClassifier","5521d46a":"model_ada = AdaBoostClassifier(learning_rate= 0.002,n_estimators= 205,random_state=42)","1e2d3e90":"model_ada.fit(X_train, y_train)","e21fe3de":"# Making Prediction\n\npred_ada = model_ada.predict(X_test)","52cbec40":"# Calculating Accuracy Score\n\nada = round(accuracy_score(y_test, pred_ada)*100, 2)\nprint(ada)","6a7564b9":"print(classification_report(y_test,pred_ada))","9833bf72":"# confusion Maxtrix\ncm7 = confusion_matrix(y_test, pred_ada)\nsns.heatmap(cm7\/np.sum(cm7), annot = True, fmt=  '0.2%', cmap = 'Reds')\nplt.title(\"Adaboost Classifier Confusion Matrix\",fontsize=12)\nplt.show()","93d6a8a7":"models = pd.DataFrame({\n    'Model':[ 'Decision Tree', 'Random Forest', 'XGBoost', 'KNeighbours', 'SVM', 'AdaBoost'],\n    'Accuracy_score' :[dt, rf, xgb, kn, sv, ada]\n})\nmodels\nsns.barplot(x='Accuracy_score', y='Model', data=models)\n\nmodels.sort_values(by='Accuracy_score', ascending=False)","ecea5e19":"### XGBoost Classifier","84b5bbda":"## Model Building ","d69a5434":"* Importing all the libraries required for this notebook","4958adc6":"<center> <img src=\"https:\/\/user-images.githubusercontent.com\/47216809\/86511259-ef33e380-be14-11ea-8ea3-3a3cc4ff5ce8.jpg\" width=50%> <\/center>","9d54d981":"### Preprocessing data","bef05de4":"####  Conclusion :- Above graph shows the performance and comparsion of different models used in this notebook","950f7db6":"Following are the list of all algorithms used in this notebook.\n\n| Algorithms      | \n| ----------- | \n| Decision Tree      | \n| Random Forest   | \n| XGBoost     | \n| KNeighbours  | \n| SVM    | \n| AdaBoost   | ","ca1eda75":"### SVM","5f7184b2":"### Decision Tree Classifer","f25a4d8c":"###  Random Forest","5a9e29d9":"**Dataset attribute Information:**\n\nInput variables (based on physicochemical tests):\n*  fixed acidity\n*  volatile acidity\n*  citric acid\n*  residual sugar\n*  chlorides\n*  free sulfur dioxide\n*  total sulfur dioxide\n*  density\n*  pH\n*  sulphates\n*  alcohol\n* Output variable (based on sensory data): quality (score between 0 and 10)","cd2c42cd":"### KNeighbours","e8db2927":"### AdaBoost Classifier","40c91d14":"* It is considered as a good practice to work on a copy of original dataset.","13b61086":"## Visualization ","37e37c56":"### Exploring dataset"}}