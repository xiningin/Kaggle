{"cell_type":{"5ed98aaa":"code","1107be9f":"code","9fb02d55":"code","68700341":"code","492f1647":"code","d11bc716":"code","ed745c0b":"code","61934b2a":"code","5ed287c9":"code","fa133833":"code","538fe699":"code","214b8b07":"code","4dd54275":"code","6051eb62":"code","ea596ec4":"code","ff3b9627":"code","86e1ea45":"code","4e5e1e68":"code","656eaf51":"code","085598d0":"code","ba4992cb":"code","8a49d03e":"code","492481fb":"code","79b200d1":"code","35a0a035":"code","50090885":"code","d3e5479f":"code","fb59aeb8":"code","57496718":"code","12c31d83":"code","49056305":"code","bf5a1846":"code","53590ef2":"code","a8f2abad":"code","85775ef6":"code","c6c12147":"code","4409cf2d":"code","2eab43bb":"code","47283393":"code","dbfa6914":"code","f1d02f2c":"code","0b0ad760":"code","107b6c82":"code","f0162f13":"code","8d63319b":"code","a34ef77f":"code","7914e245":"code","faa8baa5":"code","dbb1b874":"code","bff12860":"code","ab6bfdf9":"code","64c3eb37":"code","3ce57ee1":"code","d31512da":"code","13b75eb0":"code","db405087":"code","91d4a646":"code","965fe473":"code","de9500a4":"code","f99aab3b":"code","fb6aa36d":"code","25fb51a9":"code","14b50bd4":"code","a95b89cd":"code","a06e2faa":"code","6cc9a6c7":"code","5ff8cea4":"code","534e26d4":"code","04adaa03":"code","0a5eed3b":"code","c4c92950":"code","1f047708":"code","6dc235ba":"code","bde53661":"code","0067ace2":"code","33ffb546":"code","cf138abe":"code","8c4de037":"code","f3593070":"code","39c641f6":"code","d3711d29":"code","cd324e86":"code","006d30d1":"code","1c72d67d":"code","1314a246":"code","01039860":"code","a4dc8632":"code","283dddf0":"code","e65d1b87":"code","7df4e7a5":"code","09b961ee":"code","25da4b7b":"code","1d4976ac":"code","5526c441":"code","153d7c2c":"code","db6b0645":"code","5b2d43c5":"code","47494301":"code","df188138":"code","465c6aac":"code","41822da5":"code","47e695c3":"code","76d7fb49":"code","456e0f35":"code","9421cd58":"code","0dd461f4":"code","fcb73d4d":"code","4ded8ad6":"code","dfe53a98":"code","f89cc705":"code","f242703b":"code","b4326f03":"code","267d8177":"code","7f08900b":"code","3d6f3c71":"code","29e05b81":"code","f3f58942":"code","d2822954":"code","d670626e":"code","255b7763":"code","36a8f656":"code","1194b035":"code","f5e06bce":"code","ab70f20d":"code","2fdadb98":"code","db446b14":"code","77d5b640":"markdown","f0bd1eb2":"markdown","5b2d968c":"markdown","22db0d47":"markdown","81866d51":"markdown","94b282cc":"markdown","3c3b6c39":"markdown","2a59d239":"markdown","49699d44":"markdown","5bd5384e":"markdown","1a80cd0f":"markdown","f75cff62":"markdown","06f2d7ce":"markdown","a496b3a2":"markdown","adcffb18":"markdown","2c5a39c4":"markdown","22c7ae81":"markdown","4412a546":"markdown","7ea8981f":"markdown","f300ac4d":"markdown","a6bea96d":"markdown","089e1d66":"markdown","7cea6962":"markdown","4e674c04":"markdown","9f2550ba":"markdown","ef2f77dd":"markdown","cf5894f2":"markdown","0c49ff7e":"markdown","3e9d5744":"markdown","50329b50":"markdown","930400c7":"markdown","0f36ebd2":"markdown","9fb2c615":"markdown","d57594e9":"markdown","19c887d9":"markdown","f525083f":"markdown","06a0bae4":"markdown","62a409ed":"markdown","c4c8e4d1":"markdown","1b5e5964":"markdown","9520c226":"markdown","9bbeefb3":"markdown","28f6ab78":"markdown","660806fe":"markdown","1e1ce453":"markdown","dafe5a1c":"markdown","ad3741a6":"markdown","7ce1a657":"markdown","48cba732":"markdown","a90d61e6":"markdown","a73e7e3f":"markdown","3a55394d":"markdown","31fff523":"markdown","e74eee89":"markdown","e6de7a85":"markdown","218eba3d":"markdown","2907b7fb":"markdown","95d6c2c3":"markdown","8364d90d":"markdown","53734797":"markdown","e8188c79":"markdown","ac241f6a":"markdown","e884d388":"markdown","961f158a":"markdown","6245aaf2":"markdown","30c112d6":"markdown","206c013a":"markdown","9f01da5f":"markdown","c099e14d":"markdown","89392210":"markdown","329ff36c":"markdown","fd1179da":"markdown","5230d775":"markdown","e8ce1df4":"markdown","f7011e8e":"markdown","7f0bed38":"markdown","75f22450":"markdown","965a1708":"markdown","8d29abf4":"markdown","1745d361":"markdown","d9f20695":"markdown"},"source":{"5ed98aaa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns #visualization tools\nimport matplotlib.pyplot as plt #visualization tools\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1107be9f":"data = pd.read_csv(\"..\/input\/diamonds.csv\")","9fb02d55":"data.head() #Retrieves the first 5 data in the diamonds.csv","68700341":"#How to use comparison operators\nprint(0 > 1)  #False because 0 not greater than 1\nprint(0 >= 1) #False because 0 is not equal to 1 or 0 is not greater than 1\nprint(0 == 1) #False because 0 is not equal to 1\nprint(0 != 1) #True != = is not equal   and 0 is not equal to one therefore result True\nprint(0 <= 1) #True because 1 greater than 0\n\n#how to use boolean operators\n\nprint(True and True) #True because Everything must be true if a 'and' operator is used If one of the values is false return False\nprint(True or False) #True because Not everything must be true if a one of the value is a true return True\n\n# We use 'not' operators in list section","492f1647":"a = 5\nb = 2\n# whichever is greater, print it\n\nif a > b: #is true because 5 greater than 2\n    \n    print(a)\n","d11bc716":"#we say a greater than b what if it wasn't\na = 3\nb = 6\nif a > b: #is false because 3 not greater than 6\n    \n    print(a)\nelse: #If 'if' is not true programs enters else statement\n    print(b)","ed745c0b":"#what if the two variables are equal\n\na = 3\nb = 3\n\nif a > b: #is false because are equal\n    print(a)\n    \nelif a == b: #is true\n    print(\"Are Equals\",a,b)\n    \nelse:#programs not enters this statement because first enter if second enter elif \n    print(b)","61934b2a":"capital = {\"England\":\"London\" ,\"Germany\":\"Berlin\"} #We create dictionary \n#keys (England,Germany)\n#values (London,Berlin)\nprint(capital.keys()) #Get keys\nprint(capital.values()) #Get values","5ed287c9":"capital[\"England\"] = \"Istanbul\" #update existing entry\nprint(capital)","fa133833":"#Istanbul is not the capital of England\n\n#We should update keys\ncapital[\"Turkey\"] = capital.pop(\"England\")\n        #new_key                #old_key\nprint(capital)","538fe699":"#How to add new entry\n\ncapital[\"Brazil\"] = \"Bras\u00edlia\"\nprint(capital)\n","214b8b07":"if (\"London\" in capital.values()): #false because London not in capital dictionary but if true print(capital[\"England\"]) return KeyError\n    print(capital[\"England\"])\nelif(\"Istanbul\" in capital.values()):\n    print(capital[\"Turkey\"])","4dd54275":"#capital[\"England\"] return error","6051eb62":"print(capital)\ndel capital[\"Brazil\"] #remove entry\nprint(capital)","ea596ec4":"v = capital.get(\"Germany\")\nprint(a)","ff3b9627":"capital.clear() #clear all dictionary","86e1ea45":"print(capital)","4e5e1e68":"del capital #delete entire dictionary \n#there is no dictionary named 'capital' because it deleted","656eaf51":"list1 = [1,2,3,4] #iterable object\n\n\nfor i in list1:\n    print(i) #iterator\n","085598d0":"dictionary = {\"LeBron James\":\"Los Angeles Lakers\",\"Stephen Curry\":\"Golden State Warriors\"}\n\nfor k,v in dictionary.items(): #we use two iterators because the dictionary consists of two values\n    \n    print(\"Key:{} \\nValue:{}\".format(k,v))\n    \n\n     \n    ","ba4992cb":"#def functionname( parameters    (optionals) ):\n   #\"function_docstring\" (optionals)\n   #function_suite\n   #return [expression]  (optionals)","8a49d03e":"x = 5\ndef function1():\n    \"\"\"\n    This function takes x's square\n    \"\"\"\n    return x ** 2 #get square\nprint(function1())","492481fb":"a = 5\nc = 4\n\ndef function2(x,y): #Function Parameters\n    \"\"\"This function x  plus y\"\"\"\n    return x + y\n\nprint(function2(a,c))","79b200d1":"b = [1,2,3,4] #list\n\ndef function(x):\n    \n    print(\"incoming values\",x)\n    outlist = [i ** 2 for i in x] #list comprehension\n    return print(\"Outgoing values\", outlist)\n\nfunction(b)","35a0a035":"def sayhello(helloword):\n    \n    print(helloword)\n    \nsayhello(\"Merhaba\")\n    ","50090885":"#sayhello() #return error","d3e5479f":"def function(x,y = 1):\n    \n    return x * y\n\nprint(function(12)) #we give one parameters but y parameter define default = 2 therefore no errors occurred","fb59aeb8":"#what happens we give two parameter\nprint(function(12,2)) #y value change to 2","57496718":"def function(*args):\n    print(\"\u0130nput parameter\",args)\n    \n    for i in args:\n        print(\"Output parameter\",i + 10)\n        \n    \nfunction(1,2,3,4,5)","12c31d83":"def f(**kwargs): #**kwargs it's dictionary\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():\n        print(key, \" \", value)\nf(country = 'Germany', capital = 'Berlin', population = 123456)","49056305":"list1 = [1,2,3,4]\n\nlist2 = [i+1 for i in list1] #i+1 = expression list1 = oldlist list2 = newlist\n\nprint(list2)","bf5a1846":"list1 = [5,11,12,13]\n\nlist2 = [i**2 for i in list1 if i > 10] #i**2 = expression if i > 10 condition\n\nprint(list2)","53590ef2":"list1 = [5,6,7,19,18]\n\nlist2 = [i**2  for i in list1 if i < 20 if i > 10]\n                              #if block #elif\nprint(list2)","a8f2abad":"list1 = [5,6,7,19,18,-2,-5]\n                #\u0130f condition       #Elif Expression#Elif Condition    Else Expression\nlist2 =  [i if i < 18 and 0 < i       else i+2    if i > 17          else i**2                         for i in list1]\n            #*****if block****       #*****Elif Block*****          #Else Block\n\n#if condition if i < 18 and 0 < i\n#if expression i\n\n#elif condition i > 17\n#elif expression i+2\n\n#else expression i**2 \n\n\nprint(list2)","85775ef6":"# Example 1\n\ndictionary = {\"USA\":327,\"Russia\":144,\"China\":1386}\n\nmaxpopulation = int()\nmaxpopulationcountry = str()\nfor iterator,j in dictionary.items():\n    \n    if j > maxpopulation:\n        maxpopulation = j\n        maxpopulationcountry = iterator\nprint(\"Country {}\\nPopulation(Million): {}\".format(maxpopulationcountry,maxpopulation))\n\n#But this too long way\n\n#let's learn some trick for take dictionary higher value\n#first we need another library\n\nimport operator\nmyTuple = max(dictionary.items() ,key = operator.itemgetter(1))[:] #this line return Max Population and Country ('China',1386)\nprint(myTuple[0],myTuple[1]) \n\n\n","c6c12147":"# Example 2\n\nevennumbers = [i for i in range(0,100) if i % 2 == 0]\nprint(evennumbers)\n","4409cf2d":"# Example 3\ndef factorial(x):   \n    factorial = 1\n    \n    for i in range(2,x+1):\n        factorial *= i\n    return factorial\n\n\nprint(factorial(5))","2eab43bb":"array1 = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) #1*15 vector\nprint(array1.shape) #learn array shape\narray1 = array1.reshape(5,3) #array reshape \nprint(array1.shape)\nprint(array1)\n\n","47283393":"print(array1.ndim)#learn array dimension\nprint(array1.size) #array length","dbfa6914":"array3 = np.empty((2,2)) #Creates an array with a value less than 0\n#this 'array.empty' the equivalent null in python\nprint(\"Less than 0 array\\n\",array3)\nprint(\"---------------------------------------------------------------------------------\")\n\n\narray2 = np.zeros((2,2))# Creates  array of zeros    (3,4) shape (x,x) \n#list.append()  it consumes too much memory. therefore we use this method\nprint(array2)\n\n#how to update array variables\narray2[0][0] = 1      #columns 1 line 1\narray2[1][1] = 4      #columns 2 line 2\nprint(\"Update Version\\n\",array2)","f1d02f2c":"rangearray = np.arange(10,50,5)#10 to 50 step 5 \n#10 inclusive   #50 not included\nprint(rangearray)","0b0ad760":"linespace = np.linspace(10,50,20000) #Compresses 20000 numbers between 10 and 50\nprint(linespace)","107b6c82":"array1 = np.array([1,2,3])\narray2 = np.array([4,5,6])\n\nprint(array1+array2) #return new array. collects columns\nprint(array1.sum())\nprint(np.square(array1)) # take square","f0162f13":"print(np.add(array1,array2)) #other way collects columns","8d63319b":"array1 = ([1,2,3,4,5,6,7])\n\nprint(array1[0]) #get 0 index\nprint(array1[0:4]) #Retrieve data from 0 to 4(not included)\n\nreverse_array = array1[::-1]\nprint(reverse_array) #reverse array","a34ef77f":"array1 = np.array([1,2,3,4,5,6,7,8,9,10]) \narray1 = array1.reshape(2,5) #two dimensional array\nprint(array1)\nprint(array1[1][1]) #column 2 but index number = 1 ,  line 1 \nprint(array1[0][4])  #column 1 but index number = 0 ,  line 4","7914e245":"print(array1[0][4],array1[1][4]) #It's hard to get the last column with this path.\n\nprint(array1[:,-1]) #Therefore we use this way because it's very simple and we may not always know the size of the array\n\n\n#We can do it the same way take last line. we just need to replace ':' and '-1'\nprint(array1)\nprint(array1[-1,:]) #last line","faa8baa5":"array1 = np.array([1,2,3])\narray2 = np.array([4,5,6])\n\narray3 = np.hstack((array1,array2))  #horizontal stack\nprint(array3)\narray3 = np.vstack((array1,array2)) #vertical stack\nprint(array3)","dbb1b874":"array1 = np.random.randint(1,100,10) #create random 10 values between 1 and 100\nprint(array1)","bff12860":"array1 = np.random.rand(5) #create random 5 values between 0 and 1 \nprint(array1)\n\narray1 = np.random.randn(5) #create Gaussian Distribution values\nprint(array1)","ab6bfdf9":"array1 = np.arange(1,101)\n# Take even numbers\nfilter1 = array1 % 2 == 0\narray1[filter1]\n\n#another way\narray1[array1 % 2 == 0]\n\n#trick\n#array2 = np.arange(0,101,2)\n#print(array2)","64c3eb37":"array1 = np.array([10,20,30,40,50,60,70,71,72,73,74,80,90,100])\n\n#Let's take the numbers between 70 and 80\narray1 = array1[(array1 >= 70) & (array1 <= 80 )]\nprint(array1)","3ce57ee1":"array1 = np.array([1,2,3,4,5,6,7,8,9])\n\n#how to learn max and its index\nprint(\"Max:{} Index{}\".format(array1.max(),array1.argmax()))\n\n#same way learn min\nprint(\"Min:{} Index:{}\".format(array1.min(),array1.argmin()))\n\n#collects array1\nprint(array1.sum())\n\n#Unit Matrix 4x4\nprint(\"\\n\",np.eye(4,4))\n\n","d31512da":"dictionary = {\"NAME\":[\"James\",\"John\",\"Robert\",\"Michael\",\"Matthew\",\"Mary\"],\n              \"AGE\":[15,16,17,33,45,66],\n              \"Salary\":[100,150,240,350,110,220]}\n\n\ndataframe = pd.DataFrame(dictionary)","13b75eb0":"dataframe.info()","db405087":"dataframe.dtypes #Object = string ","91d4a646":"print(dataframe.columns)\n\n#we get any column name that way\nprint(dataframe.columns[0])","965fe473":"print(dataframe.head(2)) #Retrieves the first n(default = 5) data in the dataframe(dictionary)\nprint(\"-------------------------------------------------\")\nprint(dataframe.tail(2)) #Retrieves last n(default = 5) data in the dataframe(dictionary)","de9500a4":"#to retrieve information for a single column\nprint(dataframe.AGE)\n#or\nprint(dataframe[\"NAME\"])","f99aab3b":"print(dataframe.loc[0:3,\"NAME\"]) #get first four  line and \"NAME\" column\n\nprint(dataframe.loc[0:2,[\"NAME\",\"AGE\"]]) #get first three line  and \"NAME\" and \"AGE \" column","fb6aa36d":"reverse = dataframe.loc[::-1,:] #inverts data\nreverse","25fb51a9":"#what difference between iloc and loc\n\n#loc needs column name but iloc index number\nprint(dataframe)\nprint(dataframe.iloc[0,1]) #get first line and second column value\n","14b50bd4":"dataframe","a95b89cd":"condition = dataframe.AGE > 30\ndataframe[condition]","a06e2faa":"#or\ndataframe[dataframe.AGE > 30]","6cc9a6c7":"#how to use two condition\ncondition1 = dataframe.AGE > 30\ncondition2 = dataframe.Salary > 300\ndataframe[condition1 & condition2]","5ff8cea4":"dataframe","534e26d4":"print(dataframe.AGE.max())\nprint(dataframe.Salary.min())\nprint(dataframe.AGE.mean())\n","04adaa03":"#How to get the name of the oldest man\n\ndataframe[dataframe[\"AGE\"].max() == dataframe[\"AGE\"]][\"NAME\"]\n\n#marry age = 66","0a5eed3b":"#How to get the age of the lowest salary\n\ndataframe[dataframe[\"Salary\"].min() == dataframe[\"Salary\"]][\"AGE\"]\n\n#Name     Age  Salary\n#Matthew   45  110","c4c92950":"dataframe","1f047708":"#let's create a new column\n#column name is Salary level\naverage_salary = dataframe.Salary.mean()\nprint(average_salary)\ndataframe[\"salary_level\"] = [\"High\"if each > average_salary else \"Lower\" for  each in dataframe.Salary]\ndataframe","6dc235ba":"dataframe","bde53661":"dataframe.drop([\"salary_level\"] , axis = 1,inplace = True) #we destroy salary_level\n\n#inplace = dataframe = dataframe.drop([\"....\"],...)\ndataframe","0067ace2":"dataframe = dataframe.drop(dataframe[dataframe.NAME == \"James\"].index) \ndataframe","33ffb546":"df1 = pd.DataFrame([\"Toyota\",\"Honda\",\"Nissan\"],index = [0,1,2],columns=[\"Japan\"])\ndf2 = pd.DataFrame([\"BMW\",\"Mercedes\",\"Audi\"], index = [0,1,2],columns=[\"German\"])\nprint(df1)\nprint(df2)","cf138abe":"dataconcat = pd.concat([df1,df2],axis = 1) \ndataconcat","8c4de037":"data = pd.read_csv(\"..\/input\/diamonds.csv\") ","f3593070":"data.info()","39c641f6":"data.head()","d3711d29":"data.drop([\"Unnamed: 0\"],axis  = 1 , inplace = True)\ndata.head()\n#\u0130t's gone ","cd324e86":"data.describe() #numeric ","006d30d1":"data.loc[(data[\"x\"] == 0) | (data[\"y\"] == 0) | (data[\"z\"] == 0)]\n#Notice that instead of using '&' in the code above, '|' because if we used 'and (&)' it would show data where all are 0","1c72d67d":"#just use len()\n\nlen(data.loc[(data[\"x\"] == 0) | (data[\"y\"] == 0) | (data[\"z\"] == 0)])","1314a246":"#drop with three condition\n#we use NumPy Logical_and method\n\ndata = data[np.logical_and(np.logical_and((data[\"x\"] != 0) , (data[\"y\"] != 0))  , (data[\"z\"] != 0))] \ndata.info()","01039860":"data.describe()","a4dc8632":"data.head()","283dddf0":"data.groupby(\"cut\").mean()","e65d1b87":"data.groupby(\"cut\").mean()[\"price\"] #just price and cut","7df4e7a5":"data[\"cut\"].value_counts(ascending=True)","09b961ee":"data.head()","25da4b7b":"def seperator(clarity):\n    \n    if clarity in [\"I1\",\"SI2\",\"SI1\",\"VS2\"]:\n        \n        return \"Bad Clarity\"\n    \n    elif clarity in [\"VS1\",\"VVS2\",\"VVS1\"]:\n        \n        return \"Good Clarity\"\n    \n    else:\n        \n        return \"Best Clarity\"    \n    \ndata[\"Clarity_level\"] = data[\"clarity\"].apply(seperator)    \n    ","1d4976ac":"data.head()","5526c441":"data[\"Clarity_level\"].value_counts()","153d7c2c":"def seperator2(color):\n    \n    if color in [\"E\",\"F\",\"G\",\"H\"]:\n        return \"Good Color\"\n    elif color in [\"H\",\"I\",\"J\"]:\n        return \"Bad Color\"\n    else:\n        return \"Best Color\"\n    \n\ndata[\"Color_level\"] = data.color.apply(seperator2)","db6b0645":"data.head()","5b2d43c5":"data[\"Color_level\"].value_counts()","47494301":"condition1  = data.Color_level == \"Best Color\"\ncondition2 = data.Clarity_level == \"Best Clarity\"\n\nbestdiamonds = pd.DataFrame(data[condition1 & condition2])","df188138":"len(bestdiamonds.index) #Only 73 diamonds have the best clarity and best color","465c6aac":"print(int(bestdiamonds[\"price\"].mean()))\nprint(int(data[\"price\"].mean()))\n\n#Look at the difference between these two.\n","41822da5":"arr = np.array([[10,20,np.nan],[5,np.nan,np.nan],[21,np.nan,10]]) #np.nan = NaN Values\n\ndf = pd.DataFrame(arr,index = [\"\u0130ndex1\",\"\u0130ndex2\",\"\u0130ndex3\"], columns = [\"column1\",\"column2\",\"column3\"])\n","47e695c3":"df.head()","76d7fb49":"df.info()","456e0f35":"#first solution\n#drop them with dropna()\nprint(df.head())\nprint(\"--------------------\\nAfter Solution\\n--------------------\")\nprint(df.dropna(axis = 1)) #if column have ONE NaN Values destroyed all column. but is not so healthy for our data\n","9421cd58":"print(df.head())\n\nprint(\"--------------------\\nAfter Solution\\n--------------------\")\nprint(df.dropna(axis = 0)) #Healthier than previous solution. Because we will not deal with data with 3 values.\n#Line destroy meaning just one object destory. but the collumn destory meaning all data may be corrupted\n","0dd461f4":"#second solution\n#fill missing value with fillna()\nprint(df.head())\nprint(\"--------------------\\nAfter Solution\\n--------------------\")\nprint(df.fillna(\"Empty\"))","fcb73d4d":"#third solution\n#fill missing values with test statistics like mean\n#we write a function for this problem\nprint(df.head())\nprint(\"--------------------\\nAfter Solution\\n--------------------\")\n\n#we use lambda and list comprehension one line \nanonymousfunction = lambda dataframe: [dataframe[cNAME].fillna(value = dataframe[cNAME].fillna(0).mean(),inplace = True) for cNAME in dataframe.columns]\nanonymousfunction(df)\nprint(df.head())\n","4ded8ad6":"edaanalys\u0131s = pd.read_csv(\"..\/input\/diamonds.csv\")\nedaanalys\u0131s.describe()\n\n#example X,Y,Z min = 0 this is a outlier values","dfe53a98":"#bestdiamonds #diamonds have the best clarity and best color\n#data.head #normal data\n\n\n#                                    Define Figure 1(Normal Diamonds) \n\n\nfig, axes = plt.subplots(nrows=1, ncols=2 ,figsize=(15,6)) #we create figure; one rows, two collumn\nfigure1 = data.boxplot(ax=axes[0],column=\"price\",by=[\"cut\",\"Clarity_level\"],vert=False,fontsize=13,grid=False) #left figure\nfigure1.set_xlabel(\"PR\u0130CE\")\nfigure1.set_title(\"Normal Diamonds\")\n\n#                                   Define Figure 1 (Normal Diamonds)\n\n#                                     Define Figure 2 (Best Clarity and Color Diamonds)\n\nfigure2 = bestdiamonds.boxplot(ax=axes[1],column=\"price\",by=[\"cut\",\"Clarity_level\"],vert=False,fontsize=13,grid=False) #right figure\nfigure2.set_xlabel(\"PR\u0130CE\") \nfigure2.set_title(\"Best Diamonds\")\n\n#                                     Define Figure 2 (Best Clarity and Color Diamons)\n\n\n#                                    Plot Settings\n\n\nplt.tight_layout() #To prevent intertwining\nplt.suptitle('Cut and Clarity Level Effect on Price') \n\n#                                   Plot Settings\n\n\nplt.show()","f89cc705":"#learn  which data types how much are in the dataset\ndata.dtypes","f242703b":"#we can object to category\n#and we can int to float\ndata[\"Clarity_level\"] = data[\"Clarity_level\"].astype(\"category\")\ndata[\"price\"]= data[\"price\"].astype(\"float\")","b4326f03":"#As you can see Clarity_level is converted from object to categorical\n# And price converted from int to float\ndata.dtypes","267d8177":"data.head()","7f08900b":"#Let's add time series to our data\ndata2 = data.head()\n\n\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\n\n\ndata2","3d6f3c71":"data2.loc[\"1992-01-10\":\"1993-03-16\"] #indexing","29e05b81":"figure1 = data2.price.plot(kind=\"line\")\nfigure1.set_xlabel(\"DATE\")\nfigure1.set_ylabel(\"PR\u0130CE\")\nfigure1.set_title(\"diamond price chart by time\")\nplt.show()","f3f58942":"data2.resample(\"A\").mean()\n\n# 'A' = year\n# 'M' = month","d2822954":"data2.resample(\"M\").mean()","d670626e":"#first way\ndata2.resample(\"M\").mean().interpolate(\"linear\")        #depending on the average\n\n#second way\n\n#data2.resample(\"M\").first().interpolate(\"linear\")       #depending on the first value","255b7763":"x = np.arange(1,6)\ny = np.arange(2,11,2)\nprint(x)\nprint(y)","36a8f656":"fig = plt.figure()\n\naxes = fig.add_axes([0.1,0.1,0.8,0.7])\naxes.plot(x,y,\"red\")\naxes.set_xlabel(\"X Values\")\naxes.set_ylabel(\"Y Values\")\nplt.show()\n","1194b035":"fig , axes = plt.subplots(ncols=2,nrows=1,figsize = (10,5))   \naxes[0].plot(x,y,\"red\",linewidth=5,marker=\"o\",markersize=19,markerfacecolor=\"black\",markeredgewidth=7,markeredgecolor=\"yellow\")\n                                                                                \naxes[0].set_title(\"X vs Y Graph\")\naxes[0].set_xlabel(\"Y Values\")\naxes[0].set_ylabel(\"X Values\")\n\n#marker = \"o\" (add marker any type) \n#https:\/\/matplotlib.org\/3.1.1\/api\/markers_api.html#module-matplotlib.markers can you see all  markers type\n\n\naxes[1].plot(x**2,y**2,linewidth=5,linestyle=\"-.\")\naxes[1].set_title(\"X Square vs Y Square\")\naxes[1].set_xlabel(\"Y Square\")\naxes[1].set_ylabel(\"X Square\")\nplt.tight_layout()\n","f5e06bce":"data.head()","ab70f20d":"plt.scatter(data.price,data.carat,color=\"red\")         #First X (price) , Second Y (carat) , and other properties\nplt.xlabel(\"Price\") #X Label\nplt.ylabel(\"Carat\") #Y Label\nplt.title(\"scatter plot\") #Figure Title\nplt.show()","2fdadb98":"plt.scatter(data.carat,data.price,color=\"blue\")         #First X (carat) , Second Y (price) , and other properties\nplt.xlabel(\"Carat\") #X Label\nplt.ylabel(\"Price\") #Y Label\nplt.title(\"scatter plot\") #Figure Title\nplt.show()","db446b14":"data.carat.plot(kind=\"hist\",bins=5,figsize=(10,10),color=\"red\",label=\"frequency\")\nplt.legend()\nplt.xlabel(\"CARAT\")\nplt.show()","77d5b640":"**'Scatter is better when there is correlation between two variables'**","f0bd1eb2":"**We don't have empty values, but we have wrong values**\n\n**How do I know how many corrupt values there are**","5b2d968c":"<a id = \"92\"><\/a> <br>\n## Filtering","22db0d47":"**Same thing use on 'color' columns**\n\n**D being the best and J the worst.**\n\n**We create new column Color_level**\n\n**D = Best Color**\n**E,F,G,H = Good Color**\n**H,I,J = Bad Color**","81866d51":"\nIf we encounter with missing data, what we can do:\n\nleave as is\n\n**1-)drop them with dropna()**\n\n**2-)fill missing value with fillna()**\n\n**3-)fill missing values with test statistics like mean**\n\nAssert statement: check that you can turn on or turn off when you are done with your testing of the program","94b282cc":"<a id = \"7\"><\/a> <br>\n## Python Basics Example\n","3c3b6c39":"**Fair, Good, Ideal , Premium , Very Good**\n\nWe grouped according to cut quality\n","2a59d239":"### Histogram \n\n**'better when we need to see distribution of numerical data.'**","49699d44":"<a id = \"86\"><\/a> <br>\n### NumPy ArgMin,ArgMax, Unit Matrix","5bd5384e":"### Flexible Argument\n\n\n**You may need to process a function for more arguments than you specified while defining the function. These arguments are called flexible-variable-length  arguments and are not named in the function definition, unlike required and default arguments.**\n\n\n","1a80cd0f":"**visualization**","f75cff62":"<a id=\"41\"><\/a> <br>\n### How to define rules and optionals\nYou can define functions to provide the required functionality. Here are simple rules to define a function in Python.\n\nFunction blocks begin with the keyword def followed by the function name and parentheses ( ( ) ).\n\nAny input parameters or arguments should be placed within these parentheses. You can also define parameters inside these parentheses.\n\nThe first statement of a function can be an optional statement - the documentation string of the function or docstring.\n\nThe code block within every function starts with a colon (:) and is indented.\n\nThe statement return [expression] exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as return None.","06f2d7ce":"<a id = \"83\"><\/a> <br>\n### Stacking Arrays","a496b3a2":"<a id = \"3\"><\/a> <br>\n# Dictionaries","adcffb18":"<a id = \"1\"><\/a> <br>\n# 1. PYTHON BASICS\n","2c5a39c4":"<a id =\"11\"><\/a> <br>\n# Cleaning Data\n\n\n","22c7ae81":"Logical Operators this much \n\nnow we use Logical Operators with if else statement","4412a546":"**A list comprehension is a syntactic construct available in some programming languages for creating a list based on existing lists**\n\n**[expression for item in list]**\n\nThis is equivalent to:\nfor item in oldlist:\n    newlist.append(expression)\n\n**[expression for item in list if conditional]**\n\n\nThis is equivalent to:\nfor item in oldlist:\n    if conditional:\n        newlist.append(expression)\n","7ea8981f":"**Finish Python Basics**\n","f300ac4d":"<a id = \"123\"><\/a> <br>\n### Apply Function\n\n         Diamond Clarity refers to the absence of the Inclusions and Blemishes.\n**clarity** a measurement of how clear the diamond is (I1 (worst), SI2, SI1, VS2, VS1, VVS2, VVS1, IF (best))\n\n**we create new column Color_Level**\n\n**I1,SI2,SI1,VS2 = Bad Clarity**\n\n**VS1,VVS2,VVS1 = Good Clarity**\n\n**IF = Best Clarity**\n\nand use pandas apply method","a6bea96d":"<a id = \"12\"><\/a> <br>\n# Let's deal with real data\n\n**We use diamonds dataset in this kernel**\n","089e1d66":"<a id = \"114\"><\/a><br>\n#### 3-) Fill Missing Values With Test Statistics Like Mean","7cea6962":"**Let's look dataset properties**","4e674c04":"**first create example data**","9f2550ba":"## Concatenating","ef2f77dd":"**How to create dataframe from dictionary**","cf5894f2":"<a id = \"2\"><\/a> <br>\n## 1.1 Logical Operators and \u0130f Else Statement\n\nLogical Operators:\n\ncomparison operators: ==, < , > , >= , <= , !=\n\nboolean operators: and , or , not\n","0c49ff7e":"<a id = \"82\"><\/a> <br>\n## Indexing and Slicing","3e9d5744":" **We understand the main logic of this section**\n \n \nAnd if else statement finishes.We will use a lot in the examples","50329b50":"### Scatter Plot","930400c7":"**empty data frame because all line have NaN value and  function destroyed them all**","0f36ebd2":"**We will use head, tail, columns, shape and info methods to diagnose data**","9fb2c615":"**20 values are corrupt**\n\n**Keep in mind, dataset  have 53940 lines**\n\n**after drop process dataset must have 53920 lines**\n","d57594e9":"**What do we understand from this output**\n\n1. 6 columns of data type 'float'\n\n2. 2 columns of data type 'int'\n\n3. 3 columns of data type 'object'(string)\n\n4. Each column has 10 rows and not have NaN(empty) value\n\nThese are the first details. Let's continue","19c887d9":"# Welcome to the data scientist's notebook.\n\n\n\n### what's inside this notebook\n\n1. [Python Basics:](#1)\n    1.  [Logical operators and if else statement](#2)        \n    1.  [Dictionaries](#3)     \n    1.  [Loops](#4)       \n    1.  [Functions](#5)\n        1. [How to define function and optionals](#41)  \n        1. [Arguments](#42) \n    1.  [List Comprehension](#6)\n    1.  [First Section Examples](#7)\n2. [Numpy](#8)\n    1. [NumPy Basic Mathematical Operators](#81)\n    1. [Indexing And Slicing](#82)\n    1. [Stacking Arrays](#83) \n    1. [Random Randint , Randn](#84)   \n    1. [Filtering Arrays](#85)\n    1. [NumPy Argmin,Argmax,Unit Matrix ](#86)     \n3. [Pandas](#9)\n    1. [Indexing And Slicing](#91)\n    1. [Filtering](#92)\n    1. [List Comprehension with Pandas](#93)\n    1. [Drop and Concatenating](#94)\n4. [Pandas use with real data](#12)\n    1. [Description of the Dataset we use](#121)\n    1. [GroupBy Operation](#122)\n    1. [Apply Function](#123)\n5. [Data Cleaning](#11)\n    1. [Missing Data](#111)        \n        1. [Dropna Method](#112)\n        1. [Fillna Method](#113)\n        1. [Fill Missing Values With Test Statistics Like MEAN(lambda & list comprehension)](#114)\n    1. [Exploratory data analysis (EDA)](#115)\n       1. [Visual  Exoloratory Data Analysis](#116)\n    1. [Data Types and Convert](#117)\n    \n1. [Pandas Time Series](#22)\n    \n7. [Matplotlib](#10)\n\n\n\n\n\n\n\n\n","f525083f":"As you can see, we have nan data\n\ncolumn1 = 0 NaN Values\n\ncolumn2 = 2 NaN Values\n\ncolumn3 = 2 NaN Values\n\n**what should we do**","06a0bae4":"<a id=\"22\"> <\/a> <br> \n### Pandas Time Series","62a409ed":"<a id = \"111\"><\/a> <br>\n## 1-)MISSING DATA F\u0130LL METHOD","c4c8e4d1":"## 2-)EXPLORATORY DATA ANALYSIS\n\n### EXPLORATORY DATA ANALYSIS","1b5e5964":"<a id = \"81\"><\/a> <br>\n### NumPy Basics Mathematical operators","9520c226":"<a id = 5><\/a><br>\n# Functions","9bbeefb3":"<a id = \"117\"><\/a> <br>\n## 3-) Data Types and Convert","28f6ab78":"<a id = \"91\"><\/a> <br>\n## Indexing and Slicing","660806fe":"**Yeah, something caught my eye.**\n\n       Do you see the Min. Values of X, Y and Z. It can't be possible..!!\n       It doesn't make any sense to have either of Length or Width or Height to be zero..\n       \n**Let's have look at them.**","1e1ce453":"<a id=\"4\"> <\/a> <br>\n\n## Loop\n\n**We'll only learn the 'for' loop**\n\n**What is iterable object and iterator**\n\n","dafe5a1c":"**1609 diamonds of cut type 'fair'**                                \n\n**4902 diamonds of cut type 'Good'**                                \n\n**12081 diamonds of cut type 'Very Good'**\n\n**13700 diamonds of cut type 'Premium'**\n\n**21548 diamonds of cut type 'Ideal'**","ad3741a6":"<a id = \"112\"><\/a> <br>\n#### 1-) DROP THEM W\u0130TH dropna()","7ce1a657":"<a id = \"6\"><\/a> <br> \n## List Comprehension\n","48cba732":"**and one more thing. NaN type  == object(string).  this method is useless**","a90d61e6":"<a id = \"84\"><\/a> <br>\n### Random Randint Randn\n","a73e7e3f":"successfully added time series.","3a55394d":"<a id = \"93\"><\/a> <br>\n## List Comprehension with pandas","31fff523":"<a id = \"8\"><\/a> <br>\n# NumPy\n\n","e74eee89":"**Example**","e6de7a85":"**there is no more corrupt data**\n<a id = \"122\"><\/a> <br>\n\n### GroupBy Operation","218eba3d":"value_counts(): Frequency counts\n<br>outliers: the value that is considerably higher or lower from rest of the data\n* Lets say value at 75% is Q3 and value at 25% is Q1. \n* Outlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR\n<br>We will use describe() method. Describe method includes:\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry\n\n<br> What is quantile?\n\n* 1,4,5,6,8,9,11,12,13,14,15,16,17\n* The median is the number that is in **middle** of the sequence. In this case it would be 11.\n\n* The lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n* The upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above.","2907b7fb":"**Resampling pandas data time series**","95d6c2c3":"**Unnamed: 0** Column is  Unnecessary\n","8364d90d":"<a id = \"85\"><\/a> <br>\n## Filtering Arrays","53734797":"**Problems occur when we do this.**\n**let's solve it**","e8188c79":"<a id = \"94\"><\/a> <br>\n## Drop and Concatenating","ac241f6a":"### F\u0130GURE ","e884d388":"<a id = \"113\"><\/a> <br>\n#### 2-) Fill Missing Value With fillna()","961f158a":"<a id =\"10\"><\/a><br>\n## MATPLOTL\u0130B\n","6245aaf2":"* Example = cut,clarity_level and price\n* Black line at left is max\n* Blue line at left is 75%\n* Green line is median (50%)\n* Blue line at right is 25%\n* Black line at right is min\n* There are no outliers (at least it does not have a very effective outlier value)","30c112d6":"### Required arguments\n\n**Required arguments are the arguments passed to a function in correct positional order. Here, the number of arguments in the function call should match exactly with the function definition.**","206c013a":"<a id=\"42\"><\/a> <br>\n# Function Arguments\n\n**You can call a function by using the following types of formal arguments:**\n\n**Required arguments**\n\n**Default arguments**\n\n**Variable-length arguments**\n\n\n","9f01da5f":"#### **From now on we are only deal with dataset**","c099e14d":"<a id =\"116\"><\/a><br>\n\n### VISUAL EXPLORATORY DATA ANALYSIS\n","89392210":"**Dictionary finishes. We use a lot in examples and projects.**","329ff36c":"**The data we will use throughout this notebook = diamonds.csv**\n","fd1179da":"**To call the function sayhello(), you definitely need to pass one argument, otherwise it gives a syntax error as follows**","5230d775":"**General informations for dataframe**","e8ce1df4":"**it's look good.**\n**no NaN or corrupt values**\n","f7011e8e":"### Default arguments\n\n**A default argument is an argument that assumes a default value if a value is not provided in the function call for that argument. The following example gives an idea on default arguments, it prints default age if it is not passed**","7f0bed38":"**numpy is over**","75f22450":"There are 5 basic data types: \n\n**object(string)**\n\n**boolean**\n\n**integer**\n\n**float **\n\n**category**\n\n**We can make conversion data types like from str to category or from int to float **","965a1708":"**We see that there is a linear ratio between carat and price**\n\n**Just change carat and price and now we have better visual**","8d29abf4":"\n<a id = \"121\"><\/a> <br>\n### Description\n\nContext\nThis classic dataset contains the prices and other attributes of almost 54,000 diamonds. It's a great dataset for beginners learning to work with data analysis and visualization.\n\n#### Content\n**price** price in US dollars (\\$326--\\$18,823)\n\n**carat** weight of the diamond (0.2--5.01)\n\n**cut** quality of the cut (Fair, Good, Very Good, Premium, Ideal)\n\n**color** diamond colour, from J (worst) to D (best)\n\n**clarity** a measurement of how clear the diamond is (I1 (worst), SI2, SI1, VS2, VS1, VVS2, VVS1, IF (best))\n\n**x** length in mm (0--10.74)\n\n**y** width in mm (0--58.9)\n\n**z** depth in mm (0--31.8)\n\n**depth** total depth percentage = z \/ mean(x, y) = 2 * z \/ (x + y) (43--79)\n\n**table** width of top of diamond relative to widest point (43--95)","1745d361":"<a id = \"9\"><\/a> <br>\n# Pandas basics","d9f20695":"### Sub Plots"}}