{"cell_type":{"ba36be3b":"code","029a22b8":"code","afd58a5e":"code","c4560858":"code","0b5f8116":"code","548e6b81":"code","873f68fb":"code","2b937f19":"code","f2511684":"code","3c883e27":"code","2d497b38":"code","9edf4598":"code","d5f30782":"code","9ae46b89":"code","ecc02148":"code","c61c0211":"code","c6712129":"code","ef5c6ec0":"code","fa1a4e39":"code","2fda08dc":"code","cda867ba":"code","772a30ba":"code","ca7cabc8":"code","717c9b39":"code","acc359e2":"code","740ccbd4":"code","732067eb":"code","b080da1a":"code","d55e5eb0":"code","0772f298":"code","1ef26dbc":"code","9f3a3570":"code","3da4ea86":"code","247ab72e":"code","5244fd9e":"code","cf97fb03":"code","9990171c":"code","9f40d6c1":"code","e1e39e95":"code","617d1744":"code","38f78e1f":"code","1fdaf8bd":"code","5a039783":"code","bc7c78f1":"code","cf9449cc":"code","4bc4a0d1":"code","5e122ddc":"code","0ec6b678":"code","e232ba1a":"code","784f1b6d":"code","e9badf33":"code","ece4d01a":"code","562018dc":"code","e772e8ff":"code","a08de75d":"code","65319a13":"code","40407fe0":"code","a5702d64":"code","a777e8bd":"code","0826323e":"code","34ddc448":"code","c6caad4e":"code","38d9ffcb":"code","ad8af5d1":"code","1e9e2144":"code","57bf4e33":"code","36ce33d3":"code","402574c3":"code","91abfdb9":"code","0590f2c9":"code","d9f0dd5f":"code","f6ca77bc":"code","c3c1c5da":"code","fcd5d447":"code","f270db94":"code","1ae6eece":"code","f8efa00f":"code","4a29b209":"code","fb3a106a":"code","401faa9a":"code","7620fbd7":"code","d0a43140":"code","34b01ed7":"code","42c957c4":"code","6671a4f1":"code","767c9f96":"code","43417641":"code","2ef35c41":"markdown","5930dd30":"markdown","2c28302e":"markdown","c1a29eac":"markdown","9b071dde":"markdown","b9d7daa1":"markdown","1cc4f951":"markdown","37de3288":"markdown","9ac8d28e":"markdown","82a9973a":"markdown","cd9f88bb":"markdown","dcfbaa06":"markdown","18933cd9":"markdown","bd73dc7f":"markdown","7ed56795":"markdown","a32e8c7d":"markdown","dcdeab51":"markdown","d0619fdd":"markdown","03e44319":"markdown","53e80770":"markdown","dccf90f3":"markdown","59d84601":"markdown","71cb46c0":"markdown"},"source":{"ba36be3b":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","029a22b8":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom xgboost import XGBRegressor","afd58a5e":"train=pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/train.csv')\ntest=pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/test.csv')\nsubmission=pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/submission.csv')","c4560858":"train.head()","0b5f8116":"len(train.Province_State.value_counts())","548e6b81":"test.head()","873f68fb":"submission.head()","2b937f19":"all_data=pd.concat([train.drop(['ConfirmedCases','Fatalities'], axis =1), test])","f2511684":"all_data.drop(['ForecastId'], axis=1, inplace=True)\nall_data.head()\n","3c883e27":"print(\"there are \", str(len(train)),' for training, and total with test there are ', str(len(all_data)),\" test only are: \", str(len(test)))","2d497b38":"all_data.isnull().sum()","9edf4598":"all_data['Province_State'].value_counts()","d5f30782":"fig=px.histogram(all_data,'Province_State')\nfig.show()","9ae46b89":"fig=px.histogram(all_data,'Country_Region')\nfig.show()","ecc02148":"all_data['Province_State'].fillna(\" \", inplace=True)","c61c0211":"all_data['Country_prov']=all_data['Country_Region']+\" \"+all_data['Province_State']\ndel all_data['Country_Region']\ndel all_data['Province_State']","c6712129":"all_data.head()","ef5c6ec0":"all_data['Country_prov'].value_counts()","fa1a4e39":"all_data_date=all_data.copy(deep=True)\nall_data_unix=all_data.copy(deep=True)","2fda08dc":"def split_date(date):\n    date = date.split('-')\n    date[0] = int(date[0])\n    if(date[1][0] == '0'):\n        date[1] = int(date[1][1])\n    else:\n        date[1] = int(date[1])\n    if(date[2][0] == '0'):\n        date[2] = int(date[2][1])\n    else:\n        date[2] = int(date[2])    \n    return date\nall_data_date.Date=all_data.Date.apply(split_date)","cda867ba":"all_data.head()","772a30ba":"all_data_date['year']=all_data_date['Date'].apply(lambda x: x[0])\nall_data_date['month']=all_data_date['Date'].apply(lambda x: x[1])\nall_data_date['day']=all_data_date['Date'].apply(lambda x: x[2])\nall_data_date.drop(['Date'], axis=1, inplace=True)","ca7cabc8":"all_data_date.head()","717c9b39":"import time\nimport datetime\ndef date_to_unix(time_given):\n  return int(time.mktime(datetime.datetime.strptime(time_given, \"%Y-%m-%d\").timetuple()))\n","acc359e2":"all_data_unix['Date_unix']=all_data_unix['Date'].apply(lambda x: date_to_unix(x))\nall_data_unix.drop(['Date'],axis=1, inplace=True)","740ccbd4":"all_data_unix.drop(['Id'], axis=1, inplace=True)\nall_data_date.drop(['Id'], axis=1, inplace=True)","732067eb":"all_data_unix.head()","b080da1a":"all_data_date.head()","d55e5eb0":"all_data_date.isnull().sum()\n","0772f298":"all_data_unix.isnull().sum()","1ef26dbc":"train_date=all_data_date.head(len(train))\ntrain_unix=all_data_unix.head(len(train))\n#train_date['Fatalities']=train['Fatalities']\n#train_unix['Fatalities']=train['Fatalities']\ntrain_date['ConfirmedCases']=train['ConfirmedCases']\ntrain_unix['ConfirmedCases']=train['ConfirmedCases']","9f3a3570":"train_date.head()","3da4ea86":"train_unix.head()","247ab72e":"all_data['Country_prov'].value_counts()","5244fd9e":"sns.heatmap( train_unix.corr(), annot=True, fmt='0.2f')","cf97fb03":"sns.heatmap( train_date.corr(), annot=True, fmt='0.2f')","9990171c":"train_date.info()","9f40d6c1":"train_unix.head()","e1e39e95":"train_date_num=train_date[['year','month','day']]\ntrain_unix_num=train_unix[['Date_unix']]\n\nscaler_date=MinMaxScaler().fit(train_date[['year','month','day']])\nscaler_unix=MinMaxScaler().fit(train_unix[['Date_unix']])\n\ntrain_date_num=scaler_date.transform(train_date_num)\ntrain_unix_num=scaler_unix.transform(train_unix_num)","617d1744":"#train_date[['year','month','day','Fatalities']]=train_date_num\n#train_unix[['Date_unix','Fatalities']]=train_unix_num\ntrain_date[['year','month','day']]=train_date_num\ntrain_unix[['Date_unix']]=train_unix_num","38f78e1f":"train_date.head()","1fdaf8bd":"train_unix.head()","5a039783":"train_date['Country_prov'].value_counts()","bc7c78f1":"train_date_cat=train_date[['Country_prov']]\ntrain_unix_cat=train_unix[['Country_prov']]\nle_date = preprocessing.OneHotEncoder()\nle_unix = preprocessing.OneHotEncoder()\ntrain_date_hot=le_date.fit_transform(train_date_cat)\ntrain_unix_hot=le_unix.fit_transform(train_unix_cat)\ntrain_date_hot.toarray()\n\n","cf9449cc":"train_date_hot","4bc4a0d1":"type(le_date.categories_[0])","5e122ddc":"train_date.shape","0ec6b678":"train_date[le_date.categories_[0]]=train_date_hot.toarray()","e232ba1a":"train_unix[le_unix.categories_[0]]=train_unix_hot.toarray()","784f1b6d":"train_date.drop(['Country_prov'], axis=1, inplace=True)\ntrain_unix.drop(['Country_prov'], axis=1, inplace=True)","e9badf33":"train_date.head()","ece4d01a":"x_train_date, x_test_date, y_train_date,y_test_date=train_test_split(train_date.drop(['ConfirmedCases'], axis=1), train_date['ConfirmedCases'],test_size=0.4 )\nx_val_date,x_test_date,y_val_date, y_test_date =train_test_split(x_test_date,y_test_date, test_size=0.5)\n\nx_train_unix, x_test_unix, y_train_unix,y_test_unix=train_test_split(train_unix.drop(['ConfirmedCases'], axis=1), train_unix['ConfirmedCases'],test_size=0.4 )\nx_val_unix,x_test_unix,y_val_unix, y_test_unix =train_test_split(x_test_unix,y_test_unix, test_size=0.5)\n\n","562018dc":"ridge_date=ElasticNet(alpha=0.1,l1_ratio = 0.9)\nridge_unix=ElasticNet(alpha=0.1,l1_ratio = 0.9)","e772e8ff":"ridge_date.fit(x_train_date,y_train_date)\nridge_unix.fit(x_train_unix, y_train_unix)","a08de75d":"ridge_date.score(x_val_date, y_val_date)\n","65319a13":"ridge_unix.score(x_val_unix, y_val_unix)\n","40407fe0":"lasso = Lasso()\n\nprint(cross_val_score(lasso,x_val_date, y_val_date,cv=10))\n","a5702d64":"lasso_date=Lasso()\nlasso_unix=Lasso()","a777e8bd":"lasso_date.fit(x_train_date,y_train_date)\nlasso_unix.fit(x_train_unix, y_train_unix)","0826323e":"lasso_date.score(x_val_date, y_val_date)\n","34ddc448":"lasso_unix.score(x_val_unix, y_val_unix)\n","c6caad4e":"lasso_date.score(x_test_date, y_test_date)\n","38d9ffcb":"lasso_unix.fit(train_unix.drop(['ConfirmedCases'], axis=1), train_unix['ConfirmedCases'])","ad8af5d1":"test.head()","1e9e2144":"test_date=test.copy(deep=True)\ntest_date.fillna(\" \", inplace=True)\ntest_date['Country_prov']=test_date['Country_Region']+\" \"+test_date['Province_State']\ndel test_date['Country_Region']\ndel test_date['Province_State']\n\ntest_date.Date=test_date.Date.apply(split_date)\ntest_date['year']=test_date['Date'].apply(lambda x: x[0])\ntest_date['month']=test_date['Date'].apply(lambda x: x[1])\ntest_date['day']=test_date['Date'].apply(lambda x: x[2])\ntest_date.drop(['Date'], axis=1, inplace=True)","57bf4e33":"test_date.head()","36ce33d3":"test_date_num=test_date[['year','month','day']]\n\ntest_date_num=scaler_date.transform(test_date_num)\ntest_date[['year','month','day']]=test_date_num\n","402574c3":"test_date.head()","91abfdb9":"\ntest_date.isnull().sum()","0590f2c9":"test_date_cat=test_date[['Country_prov']]\ntest_date_hot=le_date.transform(test_date_cat)\ntest_date[le_date.categories_[0]]=test_date_hot.toarray()\ntest_date.drop(['Country_prov'], axis=1, inplace=True)\ntest_date.drop(['ForecastId'], axis=1, inplace=True)\n\n","d9f0dd5f":"test_date.head()","f6ca77bc":"y_pred_confirmed=lasso_date.predict(test_date.values)","c3c1c5da":"all_data_date.head()","fcd5d447":"train_date_fac=all_data_date.head(len(train))\ntrain_date_fac['Fatalities']=train['Fatalities']\n","f270db94":"train_date_fac.head()","1ae6eece":"train_date_fac_num=train_date_fac[['year','month','day']]\n\nscaler_date_fac=MinMaxScaler().fit(train_date_fac[['year','month','day']])\n\ntrain_date_fac_num=scaler_date_fac.transform(train_date_fac_num)\ntrain_date_fac[['year','month','day']]=train_date_fac_num\n","f8efa00f":"train_date_fac.head()","4a29b209":"train_date_fac_cat=train_date_fac[['Country_prov']]\n\nle_date_cat = preprocessing.OneHotEncoder()\n\ntrain_date_hot_cat=le_date_cat.fit_transform(train_date_fac_cat)\n","fb3a106a":"train_date_fac[le_date_cat.categories_[0]]=train_date_hot_cat.toarray()","401faa9a":"train_date_fac.drop(['Country_prov'], axis=1, inplace=True)\ntrain_date_fac.head()\n","7620fbd7":"x_train_date, x_test_date, y_train_date,y_test_date=train_test_split(train_date_fac.drop(['Fatalities'], axis=1), train_date_fac['Fatalities'],test_size=0.4 )\nx_val_date,x_test_date,y_val_date, y_test_date =train_test_split(x_test_date,y_test_date, test_size=0.5)","d0a43140":"lasso_date_fac=Lasso()\nlasso_date_fac.fit(x_train_date,y_train_date)\n","34b01ed7":"lasso_date_fac.score(x_val_date, y_val_date)\n","42c957c4":"y_pred_fac=lasso_date_fac.predict(test_date.values)","6671a4f1":"submission['ConfirmedCases'] = y_pred_confirmed\nsubmission['Fatalities'] = y_pred_fac","767c9f96":"submission.to_csv(\"submission.csv\" , index = False)","43417641":"submission.head()","2ef35c41":"**all_data unix** <\/br>","5930dd30":"## Date <\/br>\n for the date, there are two options, one is to extract day, month, and year second is to get the unix value for that date.<\/br>\n i have no prefrenece i will try both and see which gives better performace             \n","2c28302e":"We will use to Province_State,Country_Region,Date, and Fatalities predict ConfirmedCases\nand will use Province_State,Country_Region,Date,and ConfirmedCases to predict  Fatalities","c1a29eac":"There is no obvious way to fill all missing values in Province_State","9b071dde":"**get the test look like train**","b9d7daa1":"## LAsso\n","1cc4f951":"Trying corss validation with LinearRegression","37de3288":"**Province_State** <\/br>\nThere are 133 different Province_State","9ac8d28e":"Id wouldn't matter for our analysis, ","82a9973a":"# OneHotEncoder","cd9f88bb":"I find lasso gives better estimes so i will use lasso","dcfbaa06":"**all_data date** <\/br>\nsample 2020-04-02 --> Day :2 , month : 4 , year **2020**\n","18933cd9":"# Scalling\n","bd73dc7f":"# Splitting\n","7ed56795":"## predicting Fatalities","a32e8c7d":"Seems that lasso performs better, and unix is also better","dcdeab51":"The Province_State, they have equal count for each, making the mode not making sense.<\/br>\nwe can assume that for each country that provinence state is in capital","d0619fdd":"Both","03e44319":"## ConfirmedCases","53e80770":"**ElasticNet Regression**","dccf90f3":"# predicting confirmed case ","59d84601":"it seems date is performing better, so i will go with it.","71cb46c0":"We see that there are big correlation nearly 1, with confirmedCases adn Fatalities"}}