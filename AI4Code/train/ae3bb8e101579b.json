{"cell_type":{"1b578cba":"code","83229305":"code","37e8349f":"code","9eefb16c":"code","855b4ae2":"code","32f0969f":"code","c583f77e":"code","1ef20f09":"code","4dfcc483":"code","0777d36f":"code","52b2f716":"code","2550fdb3":"code","e858b2e4":"code","93e97408":"code","dda0f007":"code","c7781366":"code","519663e0":"code","92868f78":"code","5680f2f5":"markdown","1fd8619a":"markdown","2721e45c":"markdown","8dc388a3":"markdown","ef4b6711":"markdown","fcd639a4":"markdown","bf5b04ae":"markdown","ffcb7777":"markdown","a4e8964d":"markdown","e648dc25":"markdown","dc6389f9":"markdown","9831fbfb":"markdown","421365b7":"markdown","dd041ca7":"markdown","435fb1a9":"markdown","531150b7":"markdown","917b3e25":"markdown","9e61a983":"markdown","64e18297":"markdown","d7f110db":"markdown"},"source":{"1b578cba":"import pandas as pd\nimport numpy as np\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nmatplotlib.rcParams['figure.dpi'] = 100\n%matplotlib inline","83229305":"data_path = '..\/input\/ashrae-energy-prediction\/'\n\nbuilding_path = data_path + 'building_metadata.csv'\nweather_train_path = data_path + 'weather_train.csv'\ntrain_path = data_path + 'train.csv'\ntest_path = data_path + 'test.csv'\nweather_test_path = data_path + 'weather_test.csv'\nsample_path = data_path + 'sample_submission.csv'","37e8349f":"building_df = pd.read_csv(building_path)\nweather_train_df = pd.read_csv(weather_train_path)\n# train_df = pd.read_csv(train_path)\n# test_df = pd.read_csv(test_path)\n# weather_test_df = pd.read_csv(weather_test_path)\n# sample_df = pd.read_csv(sample_path)","9eefb16c":"# check and print if there are empty values in a dataset\ndef check_for_nulls(dataset, name):\n    print('There are {} {}'.format(len(dataset), name))\n    for idx, key in enumerate(dataset.count()):\n        if len(dataset) > key:\n            print(\"There are {0:.2f}% ({1}) missing values in colum '{2}'\".format((len(dataset)-key)\/len(dataset)*100, len(dataset)-key, dataset.columns[idx]))\n\n# plot using boxplot and scatterplot\ndef plot_moxes(x, y, title, dataframe):\n    plt.subplots(figsize=[20,6])\n    sns.boxplot(x=x, y=y, data=building_df)\n    sns.stripplot(x=x, y=y, data=dataframe)\n    plt.title(title)\n\n# calculate humidity\ndef calc_humidity(temperature, dew_point):\n    Es = 6.11 * 10**((7.5*temperature) \/ (237.3+temperature))\n    E = 6.11 * 10**((7.5*dew_point) \/ (237.3+dew_point))\n    \n    return (E\/Es) * 100","855b4ae2":"building_df.head()","32f0969f":"check_for_nulls(building_df, 'buildings')","c583f77e":"building_df['building_volume'] = building_df['square_feet'] * building_df['floor_count']","1ef20f09":"building_count = building_df.groupby('primary_use')['primary_use'].count()\n\nkeys = building_count.keys()\nvalues = building_count.values\nidxs = np.flip(np.argsort(values))\nkeys = keys[idxs]\nvalues = values[idxs]\n\nbuildings_n = len(building_df)\n\n# print number of building types\nfor key, value in zip(keys, values):\n    print(\"There are {0:.2f}% ({1}) buildings of type '{2}'\".format(100-(buildings_n-value)\/buildings_n*100, value, key))\n\n# plot\nfig, ax = plt.subplots(figsize=[20,12])\nsns.barplot(ax=ax, x=values, y=keys)\nplt.title('Number of building types');","4dfcc483":"plot_moxes('square_feet', 'primary_use', 'Building area distrebution for each building type', building_df)","0777d36f":"plt.subplots(figsize=[20,6])\nsns.distplot(building_df['square_feet'], bins=50, kde=False)\nplt.title('Building area distrebution');","52b2f716":"plot_moxes('building_volume', 'primary_use', 'Building volume distrebution for each building type', building_df)","2550fdb3":"plot_moxes('year_built', 'primary_use', 'Building building year distrebution for each building type', building_df)","e858b2e4":"weather_train_df.head()","93e97408":"check_for_nulls(weather_train_df, 'weather timestamps')","dda0f007":"weather_train_df['humidity'] = calc_humidity(weather_train_df['air_temperature'], weather_train_df['dew_temperature'])\nweather_train_df.head()","c7781366":"def time2num(time_s):\n    time = time_s.split(':')\n    return int(time[0]) * 60 * 60 + int(time[1]) * 60 + int(time[0])","519663e0":"timestamp_df = pd.DataFrame()\ntimestamp_df['site_id'] = weather_train_df['site_id']\ntimestamp_df['date'] = weather_train_df['timestamp'].apply(lambda x: x.split(' ')[0])\ntimestamp_df['year'] = timestamp_df['date'].apply(lambda x: int(x.split('-')[0]))\ntimestamp_df['month'] = timestamp_df['date'].apply(lambda x: int(x.split('-')[1]))\ntimestamp_df['day'] = timestamp_df['date'].apply(lambda x: int(x.split('-')[2]))\ntimestamp_df['time'] = weather_train_df['timestamp'].apply(lambda x: time2num(x.split(' ')[1]))\n\ntimestamp_df.head()","92868f78":"site_n = weather_train_df['site_id'].unique()\n\nfor site_id in site_n:\n    times = timestamp_df[timestamp_df['site_id'] == site_id]['time'].to_numpy()\n\n    print('Site number {} has unique time jumps: {}'.format(site_id, np.unique(times[1:] - times[:-1])))","5680f2f5":"### Building type distribution","1fd8619a":"### Check sampling time consistency","2721e45c":"# References:\n\n[1] Calculating Relative Humidity with Dew Point and Temperature: https:\/\/www.wikihow.com\/Calculate-Humidity","8dc388a3":"Just by looking on it we see that the data is distributed fairly uniformly. I guess that there will be a linear correlation between 'built_year' and the energy consumption.","ef4b6711":"# Conclutions\n\n","fcd639a4":"In this competition the goal is to predict building power consumption separated by meter types. There are four types of meters (electricity, chilledwater, steam, hotwater). Not every building has all meter types.\n\nThe data we get describes several locations with at least several buildings in them. As mentioned above, every building has at least one meter type. The data also decribes every building parameters and location weather parameters at different times.\nThe train dataset contains the samples of meter power consumption on different times. In the train dataset we cat tie the 'building_id' to the 'building_metadata' dataset and the 'timestamp' to the 'weather_train' dataset. The test dataset is similar to the train dataset but for future dates and excludes power consumption (of course). There is an additional weather dataset for test.\n\nWe get four files as a database:\n* train.csv: describes every meter power consumption at different times.\n* weather_train.csv: weather parameters for every location at different times.\n* test.csv: same as train_csv but for future dates.\n* weather_test.csv: same as weather_train.csv but for future dates.\n* building_metadata.csv: parameters of all the buildings\n* sample_submission.csv: sample submission file\n\nThere are many possible approaches to this competition. Here we will explore the data hopefully it will help you to decide on how to approach this.\n\n** This EDA is not finished and will be updated later. I will be glad to hear ideas to what else is interesting to analyze **\n","bf5b04ae":"## Building metadata\n\nWe will start by exploring the buildings and sites.\n\nColumn description:\n* site_id - Foreign key for the weather files.\n* building_id - Foreign key for training.csv\n* primary_use - Indicator of the primary category of activities for the building based on EnergyStar property type definitions\n* square_feet - Gross floor area of the building\n* year_built - Year building was opened\n* floor_count - Number of floors of the building","ffcb7777":"### Volume vs. building type","a4e8964d":"Let\u2019s add another parameter for humidity. We can calculate the humidity using the following equation [1]:\n\n\nEs = 6.11 x 10***[(7.5*T) \/ (237.3+T)]\n\nE = 6.11 x 10***[(7.5*Td) \/ (237.3+Td)]\n\nRH = (E\/Es) x 100%\n\nT is temperature (in Celsius), and Td is dew point temperature (also in Celsius).","e648dc25":"### Building type vs. square feet","dc6389f9":"The absence of more than 75% of 'floor_count' has its impact. There is way less data here than in the previous graph and some of the building types don\u2019t even have any data.","9831fbfb":"We would like to add another column describing building volume by multiplying building area by number of floors.","421365b7":"So, I won\u2019t go into more details but you can clearly see that some sites are missing data at some times.\n\nNotice: 3601 and -82823 are one-hour jumps so sites 0, 4, and 8 have only one-hour jumps (they still can miss an entire day).","dd041ca7":"## Helper functions","435fb1a9":"The situation here is much better than in buildings dataset. On top of that, we can interpolate the missing values.","531150b7":"## Weather dataset\n\nNext let\u2019s explore weather_train dataset. This dataset is time dependent and we will use some interesting techniques to analyze it.\n\nColumn description:\n* site_id\n* air_temperature - Degrees Celsius\n* cloud_coverage - Portion of the sky covered in clouds, in oktas\n* dew_temperature - Degrees Celsius\n* precip_depth_1_hr - Millimeters\n* sea_level_pressure - Millibar\/hectopascals\n* wind_direction - Compass direction (0-360)\n* wind_speed - Meters per second\n\nOk so lets first understand the parameters here as they are not so obvious:\n* cloud_coverage: from 0 to 9 where 0 means clear sky and 9 is sky obstructed from view\n* dew_temperature: temperature at which air must be cooled to become saturated with water vapor.\n* precip_depth_1_hr: measurement for amount of rain in 1 hour\n* sea_level_pressure: air pressure at sea level\n\n\n","917b3e25":"Education and offices are the majority of the buildings. Half of the building types are less than 1% each, probably the key to winning will be on those buildings.","9e61a983":"It seems that the columns 'year_built' and 'floor_count' have lots of missing values. Moreover, where there is no value in 'floor_count', the value at 'square_feet' might not be useful as we don\u2019t have an indication regarding the volume of the building (only the area).","64e18297":"### Building type vs. year built","d7f110db":"Most of the buildings have similar distribution for their area with some having anomalies, such as Healthcare."}}