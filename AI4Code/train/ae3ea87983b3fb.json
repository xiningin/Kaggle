{"cell_type":{"028a66db":"code","23533668":"code","2777e6bd":"code","cc87676a":"code","5ef4ef77":"code","dcb00443":"code","d9cbe4ca":"markdown","e5421840":"markdown","b902b04e":"markdown"},"source":{"028a66db":"import numpy as np\nimport pandas as pd \nimport os\nprint(os.listdir(\"..\/input\"))\nimport matplotlib.pyplot as plt\n%matplotlib inline","23533668":"train_data_dir = '..\/input\/train\/images\/'\ntrain_label_dir = '..\/input\/train\/masks\/'\ntest_data_dir = '..\/input\/test\/images\/'","2777e6bd":"ls_tr = os.listdir(train_data_dir)\nls_te = os.listdir(test_data_dir)","cc87676a":"for i in ls_tr:\n    x = plt.imread(os.path.join(train_data_dir,i)).reshape(1,101,101,3)\n    y = plt.imread(os.path.join(train_label_dir,i)).reshape(1,101*101,1)\n    if i == ls_tr[0]:\n        train_X = x\n        train_Y = y\n    else:\n        train_X = np.append(train_X, x, axis=0)\n        train_Y = np.append(train_Y, y, axis=0)\nprint('Shape of training datas is {}, shape of training labels is {}.'.format(train_X.shape, train_Y.shape))","5ef4ef77":"for i in ls_te:\n    x = plt.imread(os.path.join(test_data_dir,i)).reshape(1,101,101,3)\n    if i == ls_te[0]:\n        test_X = x\n    else:\n        test_X = np.append(test_X, x, axis=0)\nprint('Shape of test datas is {}.'.format(test_X.shape))","dcb00443":"np.save('X_train.npy', train_X)\nnp.save('Y_train.npy', train_Y)\nnp.save('X_test.npy', test_X)","d9cbe4ca":"## If you do like this kernel or find this kernel useful, please UPVOTE. Thanks","e5421840":"## Save Datas to .npy files for later use","b902b04e":"# Images to arrays"}}