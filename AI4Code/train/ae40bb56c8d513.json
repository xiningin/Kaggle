{"cell_type":{"a848ba95":"code","834b4d60":"code","63a82bea":"code","24d27214":"code","ad4e5057":"code","b68bf6e1":"code","212e08c4":"code","c5d56f73":"code","9ecc0f4d":"code","5e5880ba":"code","023d5db0":"code","feb5fe19":"code","ffde4947":"code","9b834f4b":"markdown","a4215542":"markdown","43cecaf2":"markdown","a934963b":"markdown","fbd0f109":"markdown"},"source":{"a848ba95":"import pandas as pd\nimport numpy as np\nfrom lightgbm import LGBMRegressor\nimport gresearch_crypto\n\n\nTRAIN_CSV = '\/kaggle\/input\/g-research-crypto-forecasting\/train.csv'\nASSET_DETAILS_CSV = '\/kaggle\/input\/g-research-crypto-forecasting\/asset_details.csv'","834b4d60":"df_train = pd.read_csv(TRAIN_CSV)\ndf_train.head()","63a82bea":"df_asset_details = pd.read_csv(ASSET_DETAILS_CSV).sort_values(\"Asset_ID\")\ndf_asset_details","24d27214":"def upper_shadow(df):\n    return df['High'] - np.maximum(df['Close'], df['Open'])\n\ndef lower_shadow(df):\n    return np.minimum(df['Close'], df['Open']) - df['Low']\n\ndef add_features(dataframe):\n    try:\n        dataframe=dataframe[['Count', 'Open', 'High', 'Low', 'Close', 'Volume', 'VWAP','timestamp','Target']]\n    except:\n        dataframe=dataframe[['Count', 'Open', 'High', 'Low', 'Close', 'Volume', 'VWAP','timestamp']]\n        \n        \n    \n    dataframe['dat']=pd.to_datetime(dataframe['timestamp'],unit='s')\n    dataframe['date']=dataframe['dat'].dt.date\n    dataframe[\"Day of Week\"] = dataframe['dat'].dt.dayofweek\n    dataframe['weekend']=np.where(dataframe['Day of Week']>4,1,0)\n    date_of_elon_musk_tweet='2018-6-04'\n    dataframe['after']=(dataframe['dat']>date_of_elon_musk_tweet).astype(int)\n    date_of_elon_musk_tweet='2021-03-29'\n    dataframe['afterdoge']=(dataframe['dat']>date_of_elon_musk_tweet).astype(int)\n    dataframe['Month']=dataframe['dat'].dt.month\n    dataframe['upper_Shadow'] = upper_shadow(dataframe)\n    dataframe['lower_Shadow'] = lower_shadow(dataframe)\n    dataframe[\"high_div_low\"] = dataframe[\"High\"] \/ dataframe[\"Low\"]\n    #dataframe[\"open_sub_close\"] = dataframe[\"Open\"] - dataframe[\"Close\"]\n    dataframe['trade']=dataframe['Close']-dataframe['Open']\n    dataframe['gtrade']=dataframe['trade']\/dataframe['Count']\n    dataframe['shadow1']=dataframe['trade']\/dataframe['Volume']\n    #dataframe['shadow2']=dataframe['upper_Shadow']\/df['Low']\n    dataframe['shadow3']=dataframe['upper_Shadow']\/dataframe['Volume']\n    #dataframe['shadow4']=dataframe['lower_Shadow']\/dataframe['High']\n    dataframe['shadow5']=dataframe['lower_Shadow']\/dataframe['Volume']\n    \n \n    return dataframe.drop(columns=['dat','date','timestamp'])","ad4e5057":"import lightgbm","b68bf6e1":"from scipy.stats import pearsonr\nfrom sklearn.model_selection import train_test_split\n\ndef log(model,X_train, X_valid, y_train, y_valid,train_split=1.0):\n    if train_split > 0:\n        X_train=X_train[:int(train_split*X_train.shape[0])]\n        y_train=y_train[:int(train_split*y_train.shape[0])]\n    \n        pred=model.predict(X_train)\n        print('Training :- ')\n        print(f'MSE : {np.mean((y_train-pred)**2)}')\n        print(f'CV : {pearsonr(pred,y_train)[0]}')\n    pred=model.predict(X_valid)\n    print('Validation :- ')\n    print(f'MSE : {np.mean((y_valid-pred)**2)}')\n    print(f'CV : {pearsonr(pred,y_valid)[0]}')\n\n\ndef get_Xy_and_model_for_asset(df_train, asset_id):\n    df_proc = add_features(df_train[df_train[\"Asset_ID\"] == asset_id])\n   \n    # TODO: Try different features here!\n\n    df_proc = df_proc.dropna(how=\"any\")\n    \n    X = df_proc.drop(\"Target\", axis=1)\n    y = df_proc[\"Target\"]\n    X_train=X[:int(0.7*X.shape[0])]\n    y_train=y[:int(0.7*y.shape[0])]#\n    X_test=X[int(X.shape[0]*0.7):]\n    y_test=y[int(y.shape[0]*0.7):]\n    # TODO: Try different models here!\n    model = LGBMRegressor(n_estimators=200,num_leaves=300,learning_rate=0.09)\n    model.fit(X_train, y_train)\n    print('[Finished Training] evaluating')\n    log(model,X_train, X_test, y_train, y_test,0.3)\n    \n    print(X_train.columns)\n    \n    ax=lightgbm.plot_importance(model)\n    plt.savefig(f'{asset_id}.png')\n    \n    \n    return model","212e08c4":"import matplotlib.pyplot as plt\n","c5d56f73":"Xs = {}\nys = {}\nmodels = {}\n\nfor asset_id, asset_name in zip(df_asset_details['Asset_ID'], df_asset_details['Asset_Name']):\n    print(f\"Training model for {asset_name:<16} (ID={asset_id:<2})\")\n    model = get_Xy_and_model_for_asset(df_train, asset_id)    \n    models[asset_id] = model","9ecc0f4d":"asset_details=pd.read_csv('..\/input\/g-research-crypto-forecasting\/asset_details.csv')\nasset_details.head()","5e5880ba":"dic=dict(zip(asset_details['Asset_ID'],asset_details['Asset_Name']))","023d5db0":"import cv2\nsubplots=plt.subplots(14,1,figsize=(100,100))[1]\nfor asset in range(14):\n    img=cv2.imread(f'{asset}.png')\n    subplots[asset].imshow(img)\n    subplots[asset].text(150,15,dic[asset])\n    \n    ","feb5fe19":"# Check the model interface\nx = add_features(df_train.iloc[[1,2]]).drop(columns=['Target']\n                                        )\ny_pred = models[0].predict(x)\ny_pred[0]","ffde4947":"''' \nenv = gresearch_crypto.make_env()\niter_test = env.iter_test()\n\nfor i, (df_test, df_pred) in enumerate(iter_test):\n    df_test=add_features(df_test)\n    for j , row in df_test.iterrows():\n        \n        model = models[row['Asset_ID']]\n        x_test = row\n        y_pred = model.predict([x_test])[0]\n        \n        df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = y_pred\n        \n        \n        # Print just one sample row to get a feeling of what it looks like\n        if i == 0 and j == 0:\n            display(x_test)\n\n    # Display the first prediction dataframe\n    if i == 0:\n        display(df_pred)\n\n    # Send submissions\n    env.predict(df_pred)\n''' ","9b834f4b":"# Features","a4215542":"# Import","43cecaf2":"Eda on these features :- https:\/\/www.kaggle.com\/swaralipibose\/new-features-eda-using-elon-musk-and-crypto-trends","a934963b":"# Training and feature importance","fbd0f109":"# Load Data"}}