{"cell_type":{"c9cb7a74":"code","d5dd524c":"code","6ad0b0de":"code","7dfd9f22":"code","5664d739":"code","15bc7aaa":"code","60f6e076":"code","9deee4db":"code","065727a4":"code","e770e084":"code","0bf225fe":"code","c3c25e4e":"code","4029b943":"code","a4c6b8de":"code","1b7bd799":"code","4a32de0d":"code","7cf2e2c3":"code","7dc5ba96":"code","e3269e8f":"code","db24b803":"code","9331659a":"code","6e83ae5f":"code","78b525e6":"code","214a3348":"code","6a047f81":"code","3d3e53f4":"code","6cbc2fbc":"code","8881f291":"code","32c7c5f5":"code","f0a859e4":"code","71fad4c4":"code","8b4a7af6":"code","790b94a3":"markdown","4a206145":"markdown","501dd543":"markdown","31e54c3c":"markdown","b8212333":"markdown","815f4fed":"markdown","6f91a3bc":"markdown","6f774571":"markdown","642b2dcc":"markdown","89752cd7":"markdown","7e7547f5":"markdown","8e9ee9ca":"markdown","17366f5c":"markdown","13fe7c50":"markdown","5317efea":"markdown","e248f7fa":"markdown","15100770":"markdown","14df4576":"markdown","d9576e95":"markdown","2767090c":"markdown","269381ca":"markdown","1d7620dc":"markdown","0a266123":"markdown","c5d8205d":"markdown","dd0d5bcf":"markdown","9635ac79":"markdown","fe6f60b7":"markdown","7353fc08":"markdown","b0a88662":"markdown"},"source":{"c9cb7a74":"import numpy as np\nimport pandas as pd\nfrom pandas import DataFrame\n\nimport missingno\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nsns.set_theme(style=\"darkgrid\")","d5dd524c":"data = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\ndata.head()","6ad0b0de":"data.info()","7dfd9f22":"data.isna().sum()","5664d739":"color= ['dimgrey','dimgrey','dimgrey','red','maroon','maroon','dimgrey','dimgrey','dimgrey','dimgrey','dimgrey','dimgrey']\nmissingno.bar(data,fontsize=10,color=color,figsize=(10,5))\nplt.title('MISSING VALUES',fontsize=20)","15bc7aaa":"data['country'] = data['country'].fillna(data['country'].mode()[0])\ndata['date_added'] = data['date_added'].fillna(data['date_added'].mode()[0])\ndata['rating'] = data['rating'].fillna(data['country'].mode()[0])","60f6e076":"data.drop(['cast','director'],axis='columns',inplace=True)","9deee4db":"data.isna().sum()","065727a4":"data.duplicated().sum()","e770e084":"data['y_add'] = data['date_added'].apply(lambda x: x.split(\" \")[-1])\ndata['y_add'].head()","0bf225fe":"data['m_add'] = data['date_added'].apply(lambda x: x.split(\" \")[0])\ndata['m_add'].head()","c3c25e4e":"ratings_ages = {\n    'TV-PG': 'Older Kids',\n    'TV-MA': 'Adults',\n    'TV-Y7-FV': 'Older Kids',\n    'TV-Y7': 'Older Kids',\n    'TV-14': 'Teens',\n    'R': 'Adults',\n    'TV-Y': 'Kids',\n    'NR': 'Adults',\n    'PG-13': 'Teens',\n    'TV-G': 'Kids',\n    'PG': 'Older Kids',\n    'G': 'Kids',\n    'UR': 'Adults',\n    'NC-17': 'Adults'\n}\ndata['target_age'] = data['rating'].replace(ratings_ages)","4029b943":"data['country_main'] = data['country'].apply(lambda x: x.split(\",\")[0])\ndata['country_main'].head()","a4c6b8de":"movie_df = data[data['type'] == 'Movie']\ntv_df = data[data['type'] == 'TV Show']","1b7bd799":"movie_df.head()","4a32de0d":"x = data['type'].value_counts().reset_index()\nfig = px.pie(x,values='type',names='index',color_discrete_sequence=px.colors.sequential.RdBu)\nfig.update_traces(textposition='inside', textinfo='percent+label',\n                  marker = dict(line = dict(color = 'white', width = 1)))","7cf2e2c3":"country_df = data['country_main'].value_counts().reset_index()\ncountry_df = country_df[country_df['country_main'] \/  country_df['country_main'].sum() > 0.01]\n\nfig = px.pie(country_df, values='country_main', names='index',color_discrete_sequence=px.colors.sequential.RdBu)\nfig.update_traces(textposition='inside', textinfo='percent+label',\n                  marker = dict(line = dict(color = 'white', width = 1)))\nfig.show()","7dc5ba96":"def generate_df(df):\n    new_df = df.groupby(['y_add', 'm_add']).agg({'show_id': 'count'}).reset_index()\n    new_df = new_df[new_df['show_id'] != 0]\n    new_df.columns = ['y_add', 'm_add', 'counts']\n    new_df = new_df.sort_values('y_add')\n    return new_df","e3269e8f":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nmovie_new_df = generate_df(movie_df)\ntv_new_df = generate_df(tv_df)\n\nfig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}]])\nfig.add_trace(\n    go.Pie(labels=movie_new_df['y_add'], values=movie_new_df['counts']),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(labels=tv_new_df['y_add'], values=tv_new_df['counts']),\n    row=1, col=2\n)\n\nfig.update_traces(textposition='inside', hole=.4, hoverinfo=\"label+percent+name\",\n                  marker = dict(line = dict(color = 'white', width = 2)))\n\nfig.update_layout(\n    title_text=\"Content distribution by Year of Adding\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Movies', x=0.18, y=0.5, font_size=17, showarrow=False, font_color='black'),\n                 dict(text='TV Shows', x=0.83, y=0.5, font_size=17, showarrow=False, font_color='black')])\nfig.show()","db24b803":"def generate_year_df(df,year):\n    new_df = df.groupby(['target_age', 'y_add']).agg({'show_id': 'count'}).reset_index()\n    new_df = new_df[new_df['show_id'] != 0]\n    new_df.columns = ['target_age', 'y_add', 'counts']\n    new_df = new_df.sort_values('y_add')\n    new_df= new_df[new_df['y_add']==year]\n    return new_df","9331659a":"group_2012 = generate_year_df(data,'2012')\ngroup_2015 = generate_year_df(data,'2015')\ngroup_2020 = generate_year_df(data,'2020')\n\nfig = make_subplots(1, 3, specs=[[{'type':'pie'}, {'type':'pie'}, {'type':'pie'}]],\n                    subplot_titles=['2012', '2015','2020'])\nfig.add_trace(go.Pie(labels=group_2012['target_age'], values=group_2012['counts'],scalegroup='one', \n                     name=\"Target audience 2012\"), 1, 1)\n\nfig.add_trace(go.Pie(labels=group_2015['target_age'], values=group_2015['counts'],scalegroup='one', \n                     name=\"Target audience 2015\"), 1, 2)\nfig.add_trace(go.Pie(labels=group_2020['target_age'], values=group_2020['counts'],scalegroup='one', \n                     name=\"Target audience 2020\"), 1, 3)\n\nfig.update_traces(textposition='inside',  hoverinfo=\"label+percent+name\",\n                  marker = dict(line = dict(color = 'white', width = 1),\n                                colors = ['#3D0C02', '#800000' , '#C11B17','#C0C0C0'],))\n\nfig.update_layout(title_text='Content distribution by target audience 2012 vs 2015 vs 2020')\nfig.show()","6e83ae5f":"fig = px.histogram(data, x='country_main',color_discrete_sequence=['indianred'])\nfig.update_xaxes(categoryorder='total ascending')\nfig.show()","78b525e6":"def generate_age_df(df):\n    new_df = df.groupby(['target_age']).agg({'show_id': 'count'}).reset_index()\n    new_df = new_df[new_df['show_id'] != 0]\n    new_df.columns = ['target_age', 'counts']\n    new_df = new_df.sort_values('target_age')\n    \n    return new_df","214a3348":"movie_age_df = generate_age_df(movie_df)\nfig = px.pie(labels = movie_age_df['target_age'], values = movie_age_df['counts'], names = movie_age_df['target_age'], width = 550, height = 550)\n\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.75, \n                  marker = dict(colors = ['#3D0C02', '#800000'  , '#C11B17','#C0C0C0'], \n                                line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = 'Movies', \n                                      x = 0.5, y = 0.5, font_size = 40, showarrow = False,                                       \n                                      font_color = 'black')],\n                  showlegend = False)\n\nfig.show()","6a047f81":"tv_age_df = generate_age_df(tv_df)\nfig = px.pie(labels = tv_age_df['target_age'], values = tv_age_df['counts'], names = tv_age_df['target_age'], width = 550, height = 550)\n\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.75, \n                  marker = dict(colors = ['#3D0C02', '#800000'  , '#C11B17','#C0C0C0'], \n                                line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = 'TV Series', \n                                      x = 0.5, y = 0.5, font_size = 36, showarrow = False,                                       \n                                      font_color = 'black')],\n                  showlegend = False)\n\nfig.show()","3d3e53f4":"from scipy.stats import norm\n\nsns.distplot(data.loc[data['release_year'] > 2000, 'release_year'],fit= norm, kde=False,\n             color='#827839')","6cbc2fbc":"def generate_duration_df(df):\n    new_df = df.groupby(['duration']).agg({'show_id': 'count'}).reset_index()\n    new_df = new_df[new_df['show_id'] != 0]\n    new_df.columns = ['duration', 'counts']\n    new_df = new_df.sort_values('duration')\n    return new_df","8881f291":"new_movie_df = generate_duration_df(movie_df)\nfig = px.bar(x=new_movie_df['duration'], y = new_movie_df['counts'])\nfig.update_traces(marker = dict(color= '#FFA62F'))\n\nfig.update_xaxes(type='category',categoryorder='total ascending')\n\nfig.show()\n","32c7c5f5":"new_tv_df = generate_duration_df(tv_df)\nfig = px.bar(x=new_tv_df['duration'], y = new_tv_df['counts'])\nfig.update_traces(marker = dict(color= '#E55451'))\nfig.update_xaxes(type='category',categoryorder='total ascending')\nfig.show()\n","f0a859e4":"def generate_country_df(df):\n    new_df = df.groupby(['country_main']).agg({'show_id': 'count'}).reset_index()\n    new_df = new_df[new_df['show_id'] != 0]\n    new_df.columns = ['country_main', 'counts']\n    new_df = new_df.sort_values('country_main')\n    return new_df","71fad4c4":"tv_country_df = generate_country_df(tv_df)\nfig = px.pie(labels = tv_country_df['country_main'], values = tv_country_df['counts'], names = tv_country_df['country_main'], width = 550, height = 550)\n\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.75, \n                  marker = dict(line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = 'TV Series', \n                                      x = 0.5, y = 0.5, font_size = 40, showarrow = False,                                       \n                                      font_color = 'black')],\n                  showlegend = False)\n\nfig.show()","8b4a7af6":"movie_country_df = generate_country_df(movie_df)\nfig = px.pie(labels = movie_country_df['country_main'], values = movie_country_df['counts'], names = movie_country_df['country_main'], width = 550, height = 550)\n\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.75, \n                  marker = dict(line = dict(color = 'white', width = 2)))\n                                \n\nfig.update_layout(annotations = [dict(text = 'Movies', \n                                      x = 0.5, y = 0.5, font_size = 32, showarrow = False,                                       \n                                      font_color = 'black')],\n                  showlegend = False)\n\nfig.show()","790b94a3":"Conclusion: All the missing values in the dataset have either been removed or filled. There are no missing values left.","4a206145":"Conclusion: The above distplot is based upon the release_year of the movies\/shows.","501dd543":"Conclusion: The above plot is based upon the seasons of TV series. As we can see, only 1 season records the highest number of Tv series. Discontinuation of shows due to less popularity or pending release of next season might be a contributing factor.|","31e54c3c":"Adding some new columns:\n* Year Added - y_add\n* Month Added - m_add\n* Princial Country - country_main \n* Target Age Groups - target_age","b8212333":"Conclusion: The above plot is based upon the duration of Movies. As we can see, the duration of 90 minutes records the highest number of movies.","815f4fed":"Conclusion: The above histogram represents the content added with respect to the country_main column.","6f91a3bc":"Conclusion: Here is another pie plot depicting the percentage of Movies originating from a country. As noticed from the above, United States holds the highest percentage, i.e approx.43.3%.","6f774571":"## ENDING NOTE:","642b2dcc":"## DATA CLEANING AND MANIPULATION","89752cd7":"Conclusion: As we can see, the content on Netflix dataset has 30.9% TV shows and 69.1% Movies. \n\nNow let's look into categorization based upon other factors.","7e7547f5":"Conclusion: The above plot shows the distribution of Movies and TV Shows separately based upon the year of adding. There is a noticable increase in the number of shows added throughout the years. For movies 2019 records the maximum number while for TV shows the year 2020 records the maximum number of addition of shows. ","8e9ee9ca":"As we can see, there are a lot of missing values in the director, cast and country columns. I will drop the director column as filling up the values will not be practically possible. Same for the cast column. For the country column, I am going to take the mode of available countries and assign it to the missing values. I will be doing the same for the date added and ratings column.","17366f5c":"Conclusion: After dividing the dataset on the basis of country of production, we see that United States holds the highest percentage, of about half of the total content. India comes second in the list with about 14 percentage share.\n(Note: We have filled the NaN values in the country_main column with the mean() method. That can be counted as a factor of the dominance of United States)","13fe7c50":"## MISSING VALUES","5317efea":"This notebook is a compilation of my learnings from various articles\/notebooks\/tutorials. You might notice a slight resemblace in the way of creating function\/plots as they have been inspired by the work of other more experienced people. However, I have tried to change and input my own ideations and variations. Constructive criticism is always welcome.\n\nAttaching some of the inspiring works:\nhttps:\/\/www.kaggle.com\/dmitryuarov\/netflix-eda-with-plotly#Distribution-of-main-genres-in-US,-India-and-Japan","e248f7fa":"data.head()","15100770":"## Importing libraries","14df4576":"Conclusion: The above plot shows the percentage of TV series added based upon the target age. As one can see, the Adults section scores the highest number with 42.5%.","d9576e95":"## 1. Data Overview","2767090c":"Conclusion: Here is another pie plot depicting the percentage of TV series originating from a country. As noticed from the above, United States holds the highest percentage, i.e approx.44%.","269381ca":"## Data Visualization","1d7620dc":"Making two new dataframes, one with movies collection and other with TV shows collection:\n* movie_df\n* tv_df","0a266123":"![](https:\/\/i2.wp.com\/tvrev.com\/wp-content\/uploads\/2020\/02\/thibault-penin-AWOl7qqsffM-unsplash-scaled.jpg?fit=2560%2C1709&ssl=1)","c5d8205d":"## Netflix EDA ","dd0d5bcf":"In these uniquely challenging times, Netfilx has proven to be a great source of entertainment. The platform has recorded an increase of 23 percent in the number of paid members during the final quarters of 2020 when compared with the same period an year earlier.\n\nHere is an exploratory data analysis done on the 'netflix-shows' dataset.","9635ac79":"Conclusion: The above plot shows content distribution by target age. The sizes of te plot is relative to the number of content added in the mentioned years. As it is clear from the plot, there was a huge increase in the number of content from the year 2012 to 2015 to 2020.","fe6f60b7":"## Importing Data","7353fc08":"Conclusion: The above plot shows the percentage of movies added based upon the target age. As one can see, the Adults section scores the highest number with 43.8%.","b0a88662":"Conclusion: The dataset has 0 duplicated values."}}