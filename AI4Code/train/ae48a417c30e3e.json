{"cell_type":{"8ac0e7d9":"code","0d409fe5":"code","7b7cb13a":"code","c3fd682a":"code","7a482b04":"code","5e2e3973":"code","07e6ff6c":"code","3097fea1":"code","d15f512c":"code","2634f031":"code","91dde889":"code","ca711ed0":"code","23072fde":"code","a9b78c06":"code","5e3d48f8":"code","ef884417":"code","197d359c":"code","b0edf3d9":"code","c9f986ca":"code","a0c74e12":"code","648764a3":"code","10208766":"code","f6e2b9bc":"code","009dfdf9":"code","f6884378":"code","b6553878":"code","5b044617":"code","eb080b5f":"code","a6c7a157":"code","5542254f":"code","25ea80ed":"code","02e17e4c":"code","42f3fd35":"code","704ea828":"code","a525a3f9":"code","bd99e410":"code","d5f36093":"code","828f89a3":"code","2b4ebf8c":"code","01f9bfe3":"code","870bbe27":"code","8dccc0cd":"code","c31e10af":"code","d81416f1":"code","564ca14a":"code","4d30f5a7":"code","043aa956":"code","313079fe":"code","8b66c4d1":"code","4dfdf8c6":"code","d7ed1b0f":"code","7e1d53b8":"code","da4f6252":"code","4d89e99d":"code","0d07ea96":"code","52be3ccf":"code","31e7695b":"code","9ca5363e":"code","a94f0e76":"code","3b95d5ae":"code","378c9246":"code","5413f752":"code","ec547767":"code","89083afe":"code","e7088d85":"code","64823c86":"code","0a3e24b6":"code","f316f828":"code","5663045e":"code","86936a08":"code","584782ef":"code","a073ef33":"code","4e8a4285":"code","80a89598":"code","ba121fe6":"code","b413f0f0":"code","26eef1af":"code","09cc840a":"code","d7eb374c":"code","57335e6a":"code","001dac99":"code","58de86e2":"code","1e1fcf85":"code","461ab4a9":"code","63769fb8":"code","f34037b0":"code","571c62f7":"code","e0830b5e":"code","36cc7aa4":"code","1ee33c45":"code","9a5b3ea0":"code","f232bd81":"code","5189b4ba":"code","b4ba7443":"code","b73eb201":"code","080579cf":"code","6a883a17":"code","42a4fa2f":"code","abf3b526":"code","c9cca859":"code","961823ec":"code","0590e2ac":"code","7dabef5b":"code","22822d77":"code","1a58312c":"code","8342b05b":"code","e7725d0a":"code","8c285657":"code","e50ee800":"code","f2d6d216":"code","494853fe":"code","6abf86b5":"code","002cc23b":"code","ae9d7e0a":"code","e6973462":"code","11fa8b79":"code","293bf550":"code","1b56ff99":"code","0779f032":"code","0f66a91c":"code","71a50c79":"code","34b02599":"code","a6461af2":"code","1d582bd1":"code","923edf9d":"code","09a0cd36":"code","341eac44":"code","5952cd11":"code","0b2186f4":"code","2539434e":"code","3ac5cb5c":"code","04aefc5e":"code","f8ac05be":"code","68503893":"code","72a8b57e":"code","b6ff6262":"code","95d39821":"code","dcf107c6":"code","d44723ed":"code","23871597":"code","c12c1264":"code","9e09df38":"code","bcfefd1e":"code","fa41588d":"code","64497549":"code","60beae19":"code","a1e29ca1":"code","2123c38f":"code","01c4c53e":"code","3497007e":"code","75db14be":"code","209737de":"code","e26420e2":"code","a55e9d25":"code","e37e3358":"code","5043a61c":"code","ff0b183a":"code","89d8e9a2":"code","3c453887":"code","037ee423":"code","aa7d3e47":"code","8537cb3a":"code","60f69f6a":"code","d013a4c4":"code","a690659f":"code","2aa98be5":"code","14d02079":"code","a27355ca":"code","ded1d355":"code","67521cf5":"code","93a08171":"code","9a6ed175":"code","ed8cdbef":"code","4717eb34":"code","58c08b22":"code","2ceeee1b":"code","a976d2cb":"code","04be3e80":"code","6b17af09":"markdown","42d5cf21":"markdown","3f271493":"markdown","513b7bb9":"markdown","eccfdec5":"markdown","152b10db":"markdown","2b010a97":"markdown","c5054254":"markdown","70d43960":"markdown","394e4d5a":"markdown","b58cc3e7":"markdown","847c1940":"markdown","4f1a005f":"markdown","0f805fd9":"markdown","737a51e6":"markdown","1ba40d11":"markdown","7d03944c":"markdown","7f53a028":"markdown","a1eb5431":"markdown","cfadbad9":"markdown","e452b475":"markdown","6ba6e7ab":"markdown","4e26385e":"markdown","066d5de4":"markdown","e16523ed":"markdown","48daa485":"markdown","93caca57":"markdown","c6ad4d67":"markdown","051b9227":"markdown","8810a009":"markdown","cff5112b":"markdown","2b444ec6":"markdown","8336dce8":"markdown","abf1f29e":"markdown","5b0f7f1f":"markdown","cf89792a":"markdown","8319e6aa":"markdown","2fb652ef":"markdown","0818592e":"markdown","24ca5afe":"markdown","8b176047":"markdown","dd434624":"markdown","161d37dc":"markdown","a706d36e":"markdown","dce6ed36":"markdown","4cc569a8":"markdown","11d3c7da":"markdown","2125fac9":"markdown","a9984ec7":"markdown","7c3ce75b":"markdown","9e25f72c":"markdown","80890c40":"markdown","cf24aae2":"markdown","273ae849":"markdown","3c5de134":"markdown","55dbdb35":"markdown","c1d605d2":"markdown","e9f0dc00":"markdown","1e89ce26":"markdown","73ac2ba7":"markdown","9cc8a966":"markdown","2a55fd5f":"markdown","565266ef":"markdown","cece1be0":"markdown","380e4c5b":"markdown","a4147edf":"markdown","0b078645":"markdown","1a23bd59":"markdown","5322c93a":"markdown","1137076a":"markdown","fca44a49":"markdown","1622bfc3":"markdown","1d8b6f89":"markdown","33ee1bb3":"markdown","82b5bbaf":"markdown","4e563538":"markdown","a3db0afa":"markdown","c79dfdfb":"markdown","e990fde0":"markdown","ad601d16":"markdown","852dd934":"markdown","f187e024":"markdown","a0239e81":"markdown","34ba9157":"markdown","fa0f95a4":"markdown","b21edd02":"markdown","91260351":"markdown","f372235e":"markdown","73d75718":"markdown","24378984":"markdown","9b88f6d6":"markdown","90792ec1":"markdown","63367362":"markdown","3f2dc0b6":"markdown","e9333546":"markdown","f3346ac3":"markdown","de0b98dc":"markdown","ce73dec9":"markdown","7e5dcdde":"markdown","adf3f143":"markdown","548e5cc8":"markdown","8f23ce7d":"markdown","92365263":"markdown","07a44eae":"markdown","8277b0a9":"markdown","8a4dc73d":"markdown","658ed29f":"markdown","e2eb023e":"markdown","0c41f205":"markdown","b2ebeadf":"markdown","5054ca96":"markdown"},"source":{"8ac0e7d9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sys\nimport seaborn as sns\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nfrom wordcloud import WordCloud, STOPWORDS \nimport string\nfrom nltk.util import ngrams\nfrom collections import Counter\nfrom sklearn.preprocessing import PolynomialFeatures\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom tqdm.notebook import tqdm\nfrom catboost import CatBoostRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import GradientBoostingRegressor, ExtraTreesRegressor, RandomForestRegressor\nfrom sklearn.linear_model import LogisticRegression","0d409fe5":"print('Python       :', sys.version.split('\\n')[0])\nprint('Numpy        :', np.__version__)","7b7cb13a":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","c3fd682a":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","7a482b04":"def mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred-y_true)\/y_true))","5e2e3973":"VERSION    = 16\nDIR_TRAIN  = '..\/input\/my-auto-set\/' # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b \u043a \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\nDIR_TEST   = '..\/input\/sf-dst-car-price-prediction\/'\nVAL_SIZE   = 0.20   # 20%","07e6ff6c":"!ls '..\/input'","3097fea1":"train = pd.read_csv(DIR_TRAIN+'auto_df3.csv', low_memory=False) # \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\ntest = pd.read_csv(DIR_TEST+'test.csv')\nsample_submission = pd.read_csv(DIR_TEST+'sample_submission.csv')","d15f512c":"train.head(3).T","2634f031":"train.info()","91dde889":"train.isna().sum()","ca711ed0":"train.dropna(subset=['price', '\u041f\u0440\u0438\u0432\u043e\u0434', '\u0420\u0443\u043b\u044c'], inplace=True)","23072fde":"test.head(3).T","a9b78c06":"test.info()","5e3d48f8":"test.isna().sum()","ef884417":"#\u0443\u0431\u0435\u0440\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0443 \u041f\u0422\u0421 \u0437\u0430\u043c\u0435\u043d\u0438\u0432 \u043d\u0430 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0435\u0441\u044f\ntest['\u041f\u0422\u0421'] = test['\u041f\u0422\u0421'].fillna('\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b')\ntrain['\u041f\u0422\u0421'] = train['\u041f\u0422\u0421'].fillna('\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b')","197d359c":"train['vendor'] = train['vendor'].apply(lambda x: x if x == 'EUROPEAN' else( x if x == 'JAPANESE' else 'other'))","b0edf3d9":"columns_drop = ['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435', '\u0422\u0430\u043c\u043e\u0436\u043d\u044f', 'priceCurrency']\ntrain.drop(columns_drop, axis=1, inplace=True)\ntest.drop(columns_drop, axis=1, inplace=True)","c9f986ca":"# \u041f\u043e\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c\ntrain['productionDate'] = train['productionDate'].values.astype('int64')\ntrain['sell_id'] = train['sell_id'].values.astype('int64')\ntrain['modelDate'] = train['modelDate'].values.astype('int64')\ntrain['numberOfDoors'] = train['numberOfDoors'].values.astype('int64')\ntrain['parsing_unixtime'] = train['parsing_unixtime'].apply(lambda x: x.replace('.0', ''))\ntrain['parsing_unixtime'] = train['parsing_unixtime'].values.astype('int64')","a0c74e12":"train.info()","648764a3":"train['enginePower'] = train['enginePower'].apply(lambda x: x.replace(' N12', ''))\ntest['enginePower'] = test['enginePower'].apply(lambda x: x.replace(' N12', ''))\n\ntrain['enginePower'] = train['enginePower'].values.astype('int64')\ntest['enginePower'] = test['enginePower'].values.astype('int64')","10208766":"train.mileage.describe()","f6e2b9bc":"#train['mileageNAN'] = pd.isna(train['mileage']).astype('int64')\ntrain['mileage'] = train['mileage'].fillna('0')\ntrain['mileage'] = train['mileage'].apply(lambda x: str(x).replace(':', '') if ':' in x else x)\ntrain['mileage'] = train['mileage'].values.astype('int64')\n# \u0438 \u043f\u043e\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u0438\u043f price\ntrain.price = train.price.values.astype('float32')","009dfdf9":"train['mileageNAN'] = train['mileage'].apply(lambda x: 1 if x == 0 else 0)","f6884378":"train.bodyType.value_counts()","b6553878":"train['bodyType2'] = train.bodyType\nbodyType = train.bodyType2.value_counts()[:9]\nbodyType","5b044617":"test['bodyType2'] = test.bodyType","eb080b5f":"train['bodyType2'] = train['bodyType2'].apply(lambda x: x if x in bodyType else '\u0434\u0440\u0443\u0433\u043e\u0439')\ntest['bodyType2'] = test['bodyType2'].apply(lambda x: x if x in bodyType else '\u0434\u0440\u0443\u0433\u043e\u0439')","a6c7a157":"test['bodyType2'].value_counts()","5542254f":"train['log_price'] = np.log(train.price)","25ea80ed":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='bodyType2', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of bodyTypes\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","02e17e4c":"#\u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446\ntrain = train.assign(bT_length = train['bodyType'].apply(len))\ntest = test.assign(bT_length = test['bodyType'].apply(len))","42f3fd35":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='bT_length', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of bT_length\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","704ea828":"len(train.brand.value_counts())","a525a3f9":"len(test.brand.value_counts())","bd99e410":"brand = test.brand.value_counts()\nbrand","d5f36093":"train.brand.value_counts().head(12)","828f89a3":"train['brand'] = train['brand'].apply(lambda x: x if x in brand else 'other')","2b4ebf8c":"train.groupby('brand').price.describe()","01f9bfe3":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='brand', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of brands\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","870bbe27":"#\u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446\ntrain = train.assign(brand_length = train['brand'].apply(len))\ntest = test.assign(brand_length = test['brand'].apply(len))","8dccc0cd":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='brand_length', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of brand_length\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","c31e10af":"len(test.model_name.value_counts())","d81416f1":"len(train.model_name.value_counts())","564ca14a":"test.model_name.value_counts().head(15)","4d30f5a7":"train.model_info[4]","043aa956":"test.model_info[2]","313079fe":"model_info \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u0442 model_name. \u041c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a","8b66c4d1":"train.car_url[2]","4dfdf8c6":"test.complectation_dict.isna().sum()","d7ed1b0f":"train.complectation_dict.value_counts().head(3)","7e1d53b8":"test.complectation_dict.value_counts().head(3)","da4f6252":"test.equipment_dict.value_counts().head(10)","4d89e99d":"train.equipment_dict.value_counts().head(10)","0d07ea96":"test.name[3]","52be3ccf":"train['enginePower'].hist(bins=77)","31e7695b":"train.enginePower.describe()","9ca5363e":"train[train.enginePower < 30]","a94f0e76":"train[train.enginePower > 600]","3b95d5ae":"train['log_power'] = np.log(train.enginePower)","378c9246":"train['log_power'].hist(bins=77)","5413f752":"test['log_power'] = np.log(test.enginePower)","ec547767":"# \u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b\nbins = [10, 35, 100, 125, 150, 175, 200, 225, 250, 801]\nnumbers = ['5000','12','25','35', '45', '50', '65', '75', '150']","89083afe":"#\u043d\u0430\u043b\u043e\u0433\u043e\u0432\u0430\u044f \u0431\u0430\u0437\u0430\ntrain['Nalog_base']=pd.cut(train['enginePower'],bins,labels=numbers)\ntest['Nalog_base']=pd.cut(test['enginePower'],bins,labels=numbers)\ntrain['Nalog_base'] = train['Nalog_base'].values.astype('int64')\ntest['Nalog_base'] = test['Nalog_base'].values.astype('int64')","e7088d85":"train['Nalog'] = train['enginePower'] * train['Nalog_base']\ntest['Nalog'] = test['enginePower'] * test['Nalog_base']","64823c86":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='Nalog_base', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of Nalog\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","0a3e24b6":"train.groupby('Nalog').price.mean().plot()","f316f828":"train.engineDisplacement.value_counts()\n","5663045e":"train['engineDisplacement'] = train['engineDisplacement'].apply(lambda x: x[:3])\ntest['engineDisplacement'] = test['engineDisplacement'].apply(lambda x: x[:3])","86936a08":"train[train['engineDisplacement'] == ' LT']","584782ef":"len(test[test['engineDisplacement'] == ' LT'])","a073ef33":"train.groupby('engineDisplacement').enginePower.describe().head(20)","4e8a4285":"train['engineDisplacement'] = train['engineDisplacement'].apply(lambda x: 1.6 if x == ' LT' else x)\ntest['engineDisplacement'] = test['engineDisplacement'].apply(lambda x: 1.6 if x == ' LT' else x)","80a89598":"train['engineDisplacement'] = train['engineDisplacement'].values.astype('float32')\ntest['engineDisplacement'] = test['engineDisplacement'].values.astype('float32')","ba121fe6":"test.vehicleTransmission.value_counts()","b413f0f0":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='vehicleTransmission', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of vehicleTransmission\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","26eef1af":"train.vehicleConfiguration[334]","09cc840a":"test[test.numberOfDoors == 0] #.value_counts()","d7eb374c":"train[train.numberOfDoors == 0]","57335e6a":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='numberOfDoors', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of numberOfDoors\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()\n","001dac99":"display(pd.DataFrame(train.color.value_counts()))","58de86e2":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='color', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of colors\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()\n","1e1fcf85":"train['years_old'] = 2020 - train['productionDate']\ntest['years_old'] = 2020 - test['productionDate']","461ab4a9":"train.boxplot(column=['productionDate'])","63769fb8":"train[train.productionDate < 1940]","f34037b0":"train.years_old.value_counts().head(10)","571c62f7":"test[test.productionDate <=1980].productionDate","e0830b5e":"train.years_old.describe()","36cc7aa4":"test.years_old.describe()","1ee33c45":"train[train.years_old == 116]","9a5b3ea0":"# \u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b\nbins = [-1, 3, 6, 13, 20, 35, 116]\nnumbers = ['3', '6','13','20','35', '116']\n\ntrain['age_intervals']=pd.cut(train['years_old'],bins,labels=numbers)\ntest['age_intervals']=pd.cut(test['years_old'],bins,labels=numbers)","f232bd81":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='age_intervals', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of age_intervals\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","5189b4ba":"train.modelDate.describe()","b4ba7443":"test.modelDate.describe()","b73eb201":"train.modelDate.value_counts().head(15)","080579cf":"#\u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\ntrain.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.isna().sum()","6a883a17":"train.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.value_counts()","42a4fa2f":"train.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b = train.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.fillna('3')","abf3b526":"train.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b = train.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.apply(lambda x: x[0])\ntest.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b = test.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.apply(lambda x: x[0])","c9cca859":"train.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b = train.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.values.astype('int64')\ntest.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b = test.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.values.astype('int64')","961823ec":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","0590e2ac":"# \u0414\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\ntrain.\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435.isna().sum()","7dabef5b":"test.\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435.isna().sum()","22822d77":"train.\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435","1a58312c":"train.groupby('\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b').\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435.describe()","8342b05b":"train.\u0420\u0443\u043b\u044c.value_counts()","e7725d0a":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='\u0420\u0443\u043b\u044c', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of \u0420\u0443\u043b\u044c\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","8c285657":"train.\u041f\u0422\u0421.value_counts()","e50ee800":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='\u041f\u0422\u0421', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of \u041f\u0422\u0421\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","f2d6d216":"train.sell_id.nunique()","494853fe":"train['sell_id'].plot()","6abf86b5":"train.image[1]","002cc23b":"train.description[2]","ae9d7e0a":"train.description = train.description.apply(lambda x: x.lower())\ntest.description = test.description.apply(lambda x: x.lower())","e6973462":"text = ' '.join(train['description'].values)\ntext_trigrams = [i for i in ngrams(text.split(' '), 5)]\ntext_trigrams\nmy_list = Counter(text_trigrams).most_common(30)\nmy_list","11fa8b79":"comment_words = '' \nstopwords = set(STOPWORDS) \n\nnewStopWords = ['\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c', '\u043f\u0440\u043e\u0434\u0430\u044e', '\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439', '\u043f\u0440\u043e\u0431\u0435\u0433']\n\nstopwords.update(newStopWords)\n\n  \n# iterate through the csv file \nfor val in train.description: \n      \n    # typecaste each val to string \n    val = str(val) \n  \n    # split the value \n    tokens = val.split() \n      \n    # Converts each token into lowercase \n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n      \n    comment_words += \" \".join(tokens)+\" \"\n  \n#wordcloud = WordCloud(width = 800, height = 800, \n#                background_color ='white', \n#                stopwords = stopwords, \n#                min_font_size = 10).generate(comment_words) \nwordcloud = WordCloud(\n    background_color='white',\n    stopwords=stopwords,\n    max_words=300,\n    max_font_size=200, \n    width=1000, height=800,\n    random_state=42,\n).generate(\" \".join(train['description'].astype(str)))\n\n# plot the WordCloud image                        \nplt.figure(figsize = (12, 14), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show()","293bf550":"text = ' '.join(test['description'].values)\ntext_trigrams = [i for i in ngrams(text.split(' '), 5)]\ntext_trigrams\nmy_list = Counter(text_trigrams).most_common(30)\nmy_list","1b56ff99":"comment_words = '' \nstopwords = set(STOPWORDS) \n\nnewStopWords = ['\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c', '\u043f\u0440\u043e\u0434\u0430\u044e', '\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439', '\u043f\u0440\u043e\u0431\u0435\u0433']\n\nstopwords.update(newStopWords)\n\n  \n# iterate through the csv file \nfor val in test.description: \n      \n    # typecaste each val to string \n    val = str(val) \n  \n    # split the value \n    tokens = val.split() \n      \n    # Converts each token into lowercase \n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n      \n    comment_words += \" \".join(tokens)+\" \"\n  \n#wordcloud = WordCloud(width = 800, height = 800, \n#                background_color ='white', \n#                stopwords = stopwords, \n#                min_font_size = 10).generate(comment_words) \nwordcloud = WordCloud(\n    background_color='white',\n    stopwords=stopwords,\n    max_words=300,\n    max_font_size=200, \n    width=1000, height=800,\n    random_state=42,\n).generate(\" \".join(test['description'].astype(str)))\n\n# plot the WordCloud image                        \nplt.figure(figsize = (12, 14), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show()","0779f032":"train['\u043f\u043e\u0434\u0411\u0435\u0437'] = train.description.apply(lambda x: 1 if '\u043f\u043e\u0434\u0443\u0448\u043a\u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438' in x else 0)\ntest['\u043f\u043e\u0434\u0411\u0435\u0437'] = test.description.apply(lambda x: 1 if '\u043f\u043e\u0434\u0443\u0448\u043a\u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438' in x else 0)\ntrain['\u0443\u0441\u0438\u043b\u0420\u0443\u043b\u044f'] = train.description.apply(lambda x: 1 if '\u0443\u0441\u0438\u043b\u0438\u0442\u0435\u043b\u044c \u0440\u0443\u043b\u044f' in x else 0)\ntest['\u0443\u0441\u0438\u043b\u0420\u0443\u043b\u044f'] = test.description.apply(lambda x: 1 if '\u0443\u0441\u0438\u043b\u0438\u0442\u0435\u043b\u044c \u0440\u0443\u043b\u044f' in x else 0)\ntrain['\u043e\u0442\u043b'] = train.description.apply(lambda x: 1 if '\u043e\u0442\u043b\u0438\u0447\u043d\u043e\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438' in x else 0)\ntest['\u043e\u0442\u043b'] = test.description.apply(lambda x: 1 if '\u043e\u0442\u043b\u0438\u0447\u043d\u043e\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438' in x else 0)\ntrain['\u0445\u043e\u0440'] = train.description.apply(lambda x: 1 if '\u0445\u043e\u0440\u043e\u0448\u0435\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438' in x else 0)\ntest['\u0445\u043e\u0440'] = test.description.apply(lambda x: 1 if '\u0445\u043e\u0440\u043e\u0448\u0435\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438' in x else 0)\ntrain['\u0446\u0417\u0430\u043c\u043e\u043a'] = train.description.apply(lambda x: 1 if '\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u043c\u043e\u043a' in x else 0)\ntest['\u0446\u0417\u0430\u043c\u043e\u043a'] = test.description.apply(lambda x: 1 if '\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u043c\u043e\u043a' in x else 0)\ntrain['\u044d\u041f\u043e\u0434\u044a\u043c'] = train.description.apply(lambda x: 1 if '\u044d\u043b\u0435\u043a\u0442\u0440\u043e\u0441\u0442\u0435\u043a\u043b\u043e\u043f\u043e\u0434\u044a\u0435\u043c\u043d\u0438\u043a\u0438' in x else 0)\ntest['\u044d\u041f\u043e\u0434\u044a\u043c'] = test.description.apply(lambda x: 1 if '\u044d\u043b\u0435\u043a\u0442\u0440\u043e\u0441\u0442\u0435\u043a\u043b\u043e\u043f\u043e\u0434\u044a\u0435\u043c\u043d\u0438\u043a\u0438' in x else 0)\ntrain['\u0431\u041a\u043e\u043c\u043f'] = train.description.apply(lambda x: 1 if '\u0431\u043e\u0440\u0442\u043e\u0432\u043e\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440' in x else 0)\ntest['\u0431\u041a\u043e\u043c\u043f'] = test.description.apply(lambda x: 1 if '\u0431\u043e\u0440\u0442\u043e\u0432\u043e\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440' in x else 0)","0f66a91c":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='\u043f\u043e\u0434\u0411\u0435\u0437', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of \u043f\u043e\u0434\u0443\u0448\u043a\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","71a50c79":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='\u043e\u0442\u043b', \n                  data=train, color='darkgreen')\ng1.set_title(\"price \u0432 \u043e\u0442\u043b\u0438\u0447\u043d\u043e\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","34b02599":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='\u0445\u043e\u0440', \n                  data=train, color='darkgreen')\ng1.set_title(\"price \u0432 \u0445\u043e\u0440\u043e\u0448\u0435\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","a6461af2":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='\u0446\u0417\u0430\u043c\u043e\u043a', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of \u0446\u0435\u043d\u0442\u0440\u0417\u0430\u043c\u043a\u0430\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","1d582bd1":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='\u0443\u0441\u0438\u043b\u0420\u0443\u043b\u044f', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of \u0443\u0441\u0438\u043b\u0438\u0442\u0435\u043b\u044f \u0440\u0443\u043b\u044f\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","923edf9d":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='\u0431\u041a\u043e\u043c\u043f', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of \u0431\u043e\u0440\u0442.\u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0430\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","09a0cd36":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='\u044d\u041f\u043e\u0434\u044a\u043c', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043f\u043e\u0434\u044a\u0435\u043c\u043d\u0438\u043a\u0438\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","341eac44":"train.fuelType.value_counts()","5952cd11":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='fuelType', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of fuelType\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\n\n\nplt.show()","0b2186f4":"train.parsing_unixtime[2]","2539434e":"train.super_gen[2]","3ac5cb5c":"test.super_gen[2]","04aefc5e":"test.vendor.value_counts()","f8ac05be":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='vendor', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of vendor\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\n\n\nplt.show()","68503893":"train.mileage.describe()","72a8b57e":"train[train.mileage == 0].groupby('years_old').price.describe()","b6ff6262":"train.groupby('years_old').mileage.mean().head(10)","95d39821":"train['mileageNAN'] = train.mileageNAN * (train.years_old * 20000 + 10000)","dcf107c6":"train.mileage = train.mileage + train.mileageNAN","d44723ed":"train.mileage.describe()","23871597":"train[train.mileage == 1].productionDate","c12c1264":"\u0414\u0430\u0436\u0435 \u0443 \u043d\u043e\u0432\u044b\u0445 \u043c\u0430\u0448\u0438\u043d 1 \u043a\u043c \u044d\u0442\u043e \u043c\u0430\u043b\u043e. \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 10000","9e09df38":"train['mileage'] = train['mileage'].apply(lambda x: 1000 if x <100 else x)\ntest['mileage'] = test['mileage'].apply(lambda x: 1000 if x < 100 else x)","bcfefd1e":"train.mileage.describe()","fa41588d":"test.\u041f\u0440\u0438\u0432\u043e\u0434.value_counts()","64497549":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y='log_price', x='\u041f\u0440\u0438\u0432\u043e\u0434', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of \u041f\u0440\u0438\u0432\u043e\u0434\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\n\n\nplt.show()","60beae19":"train.price.describe()","a1e29ca1":"train[train.price > 30000000]","2123c38f":"train['price'].hist(bins=77)","01c4c53e":"train['log_price'].hist(bins=77)","3497007e":"columns_drop = ['model_info', 'name', 'car_url', 'sell_id', 'complectation_dict', 'equipment_dict',\n                'vehicleConfiguration','\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', 'image', 'parsing_unixtime', 'super_gen',\n                'description', 'bodyType', 'log_power']\ntrain.drop(columns_drop, axis=1, inplace=True)\ntest.drop(columns_drop, axis=1, inplace=True)","75db14be":"train.drop(columns = ['mileageNAN'], axis=1, inplace=True)","209737de":"pf = PolynomialFeatures(2)\npoly_df = pf.fit_transform(train[['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b','engineDisplacement', 'enginePower',\n       'modelDate', 'numberOfDoors', 'productionDate', \n       'bT_length', 'brand_length', 'Nalog_base', 'Nalog', 'years_old',\n       'age_intervals', '\u043f\u043e\u0434\u0411\u0435\u0437', '\u0443\u0441\u0438\u043b\u0420\u0443\u043b\u044f', '\u043e\u0442\u043b', '\u0445\u043e\u0440', '\u0446\u0417\u0430\u043c\u043e\u043a', '\u044d\u041f\u043e\u0434\u044a\u043c', '\u0431\u041a\u043e\u043c\u043f']])\npoly_df1 = pd.DataFrame(poly_df)\npoly_df1 = poly_df1.drop(0, axis=1)","e26420e2":"poly_df1['log_price'] = np.log(train.price)\npoly_df1","a55e9d25":"poly_df2 = pf.fit_transform(test[['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b','engineDisplacement', 'enginePower',\n       'modelDate', 'numberOfDoors', 'productionDate', \n       'bT_length', 'brand_length', 'Nalog_base', 'Nalog', 'years_old',\n       'age_intervals', '\u043f\u043e\u0434\u0411\u0435\u0437', '\u0443\u0441\u0438\u043b\u0420\u0443\u043b\u044f', '\u043e\u0442\u043b', '\u0445\u043e\u0440', '\u0446\u0417\u0430\u043c\u043e\u043a', '\u044d\u041f\u043e\u0434\u044a\u043c', '\u0431\u041a\u043e\u043c\u043f']])\npoly_df21 = pd.DataFrame(poly_df2)\npoly_df21 = poly_df21.drop(0, axis=1)","e37e3358":"poly_df1.corr()['log_price'].sort_values().tail(10)","5043a61c":"poly_df1.corr()['log_price'].sort_values().head(10)","ff0b183a":"train.describe()","89d8e9a2":"num_cols = ['engineDisplacement', 'enginePower', 'mileage', 'bT_length', 'Nalog_base',\n       'brand_length', 'Nalog', 'years_old', 'log_price']","3c453887":"correlation = train[num_cols].corr()\ncorrelation","037ee423":"plt.figure(figsize=(20, 12))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","aa7d3e47":"columns_d = ['brand_length']\ntrain.drop(columns_d, axis=1, inplace=True)\ntest.drop(columns_d, axis=1, inplace=True)","8537cb3a":"train[['numberOfDoors', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b']].corr(method='spearman')","60f69f6a":"columns = ['brand', 'color', 'engineDisplacement', 'enginePower', 'fuelType',\n       'mileage', 'modelDate', 'model_name', 'numberOfDoors',\n       'productionDate', 'vehicleTransmission', 'vendor',\n       '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', '\u041f\u0422\u0421', '\u041f\u0440\u0438\u0432\u043e\u0434', '\u0420\u0443\u043b\u044c', 'bodyType2', 'bT_length',\n       'Nalog', 'years_old', 'age_intervals', '\u043f\u043e\u0434\u0411\u0435\u0437', '\u0443\u0441\u0438\u043b\u0420\u0443\u043b\u044f', \n       '\u043e\u0442\u043b', '\u0445\u043e\u0440', '\u0446\u0417\u0430\u043c\u043e\u043a', '\u044d\u041f\u043e\u0434\u044a\u043c', '\u0431\u041a\u043e\u043c\u043f']","d013a4c4":"df_train = train[columns]\ndf_test = test[columns]","a690659f":"df_train.info()","2aa98be5":"train.sample(3).T","14d02079":"df_test.info()","a27355ca":"y = train['price']","ded1d355":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","67521cf5":"for column in ['bodyType2', 'brand', 'color', 'fuelType', 'model_name', 'vendor', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', 'vehicleTransmission', '\u041f\u0440\u0438\u0432\u043e\u0434', 'age_intervals']:\n    data[column] = data[column].astype('category').cat.codes","93a08171":"bin_cols = ['\u041f\u0422\u0421', '\u0420\u0443\u043b\u044c', '\u043f\u043e\u0434\u0411\u0435\u0437', '\u0443\u0441\u0438\u043b\u0420\u0443\u043b\u044f', '\u043e\u0442\u043b', '\u0445\u043e\u0440', '\u0446\u0417\u0430\u043c\u043e\u043a', '\u044d\u041f\u043e\u0434\u044a\u043c','\u0431\u041a\u043e\u043c\u043f']\nlabel_encoder = LabelEncoder()\nfor column in bin_cols:\n    data[column] = label_encoder.fit_transform(data[column])\ndata.head()","9a6ed175":"X = data.query('sample == 1').drop(['sample'], axis=1)\nX_sub = data.query('sample == 0').drop(['sample'], axis=1)","ed8cdbef":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)","4717eb34":"np.log(y_train)","58c08b22":"gb = GradientBoostingRegressor(min_samples_split=2, learning_rate=0.03, max_depth=10, n_estimators=1000)\ngb.fit(X_train, np.log(y_train))","2ceeee1b":"predict_test = np.exp(gb.predict(X_test))\npredict_submission = np.exp(gb.predict(X_sub))","a976d2cb":"print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_test))*100:0.2f}%\")","04be3e80":"sample_submission['price'] = predict_submission\nsample_submission.to_csv(f'submission_2_v{VERSION}.csv', index=False)\nsample_submission.head(10)","6b17af09":"\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u044f \u043d\u0435 \u0443\u043c\u0435\u044e. \u0423\u0434\u0430\u043b\u044f\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a","42d5cf21":"\u0421\u0443\u0434\u044f \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c - \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u043f\u0446\u0438\u044f\u0445 \u043c\u0430\u0448\u0438\u043d\u044b. \u041d\u043e \u0441\u043b\u043e\u0436\u043d\u043e \u043f\u043e\u043d\u044f\u0442\u044c -\u0432\u0441\u0435 \u043b\u0438 \u043e\u043f\u0446\u0438\u0438 \u0435\u0441\u0442\u044c \u0432 \u043c\u0430\u0448\u0438\u043d\u0430\u0445 \u0438 \u043a\u0430\u043a \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c id. \u0417\u0430 \u043d\u0435\u0438\u043c\u0435\u043d\u0438\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \u0438  \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 - \u0443\u0434\u0430\u043b\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a","3f271493":"544 \u043c\u043e\u0434\u0435\u043b\u0438 \u043c\u0430\u0448\u0438\u043d \u0432 \u0442\u0435\u0441\u0442\u0435 \u0438 1333 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435. ","513b7bb9":"### 28. mileage","eccfdec5":"\u0412\u044b\u0434\u0435\u043b\u0438\u043c 9 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043e\u0431\u0449\u0438\u043c \u0442\u0438\u043f\u043e\u043c \"\u0434\u0440\u0443\u0433\u043e\u0439\"","152b10db":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c \u043d\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u0432 \u0446\u0435\u043b\u043e\u043c, \u0445\u043e\u0442\u044f \u0435\u0432\u0440\u043e\u043f\u0435\u0439\u0441\u043a\u0438\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u0431\u043e\u043b\u0435\u0435 \u0434\u043e\u0440\u043e\u0433\u0438\u0435","2b010a97":"\u0420\u0430\u0440\u0438\u0442\u0435\u0442\u043d\u044b\u0435 \u043c\u0430\u0448\u0438\u043d\u044b, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0438\u0436\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443","c5054254":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043a \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","70d43960":"### 3. model_name","394e4d5a":"\u041e\u0434\u043d\u0438 \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u0434\u043e\u0440\u043e\u0433\u0438\u0445 \u043c\u0430\u0448\u0438\u043d - lexus, infiniti \u0438 mersedes, bmw, \u0447\u0442\u043e \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e. \u0427\u0430\u0441\u0442\u044c \u043c\u0430\u0448\u0438\u043d \u0432 \u043e\u0431\u0449\u0435\u0439 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e (vw, nissan, mitsubishi \u0438 honda, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u043c\u0443\u0436\u043e\u0442\u043e\u0447\u043d\u044b\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d","b58cc3e7":"### 4. model_info","847c1940":"### 5. car_url","4f1a005f":"\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f. \u043d\u0435\u043f\u043b\u043e\u0445\u0430\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f - \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435. \u043d\u043e \u0435\u0433\u043e \u043d\u0435\u0442 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435. \u0420\u0430\u0441\u0445\u043e\u0434 \u0442\u043e\u043f\u043b\u0438\u0432\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 - \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435. \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a","0f805fd9":"### 8. name","737a51e6":"### 20. \u041f\u0422\u0421","1ba40d11":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0447\u0442\u043e \u0432\u0441\u0435 \u0432\u0435\u0440\u043d\u043e","7d03944c":"MAPE 15.01","7f53a028":"predict_test = np.exp(model.predict(X_test))\npredict_submission = np.exp(model.predict(X_sub))","a1eb5431":"## \u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 14.32 \u043d\u0430 Kaggle","cfadbad9":"\u041f\u043e\u043b\u043d\u044b\u0439 \u0441\u0430\u043c\u044b\u0439 \u0434\u043e\u0440\u043e\u0433\u043e\u0439, \u0430 \u043f\u0435\u0440\u0435\u0434\u043d\u0438\u0439 - \u0441\u0430\u043c\u044b\u0439 \u0434\u0435\u0448\u0435\u0432\u044b\u0439.","e452b475":"\u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u0442\u0435\u043d\u0434\u0435\u043d\u0446\u0438\u044f \u043d\u0430 \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0441 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432. \u0427\u0435\u043c \u043d\u043e\u0432\u0435\u0435 \u043c\u0430\u0448\u0438\u043d\u0430, \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u0443 \u043d\u0435\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0432","6ba6e7ab":"\u041f\u043e\u0436\u0430\u043b\u0443\u0439 \u0442\u043e\u0436\u0435 \u0443\u0434\u0430\u043b\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a","4e26385e":"\u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435  \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e. \u0423\u0434\u0430\u043b\u044f\u0435\u043c","066d5de4":"\u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0443 \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u043e.\u041f\u043e\u043f\u0440\u043e\u0431\u0435\u0443\u043c \u0432\u0432\u0435\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043d\u0430\u043b\u043e\u0433\u0443 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438","e16523ed":"## \u0423\u0434\u0430\u043b\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u044b","48daa485":"### 16. modelDate","93caca57":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u0440\u0435\u0434\u043d\u044b \u043c\u0430\u0448\u0438\u043d \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442. \u041e\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u0435, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0432 \u0442\u0435\u0441\u0442\u0435, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u043e\u0431\u0449\u0435\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0435\u0439","c6ad4d67":"\u0441\u0430\u043c\u044b\u0435 \u0434\u0435\u0448\u0432\u044b\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043d\u0430 \u043c\u0435\u0445\u0430\u043d\u0438\u043a\u0435, \u0440\u043e\u0431\u043e\u0442 \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432, \u0432\u0430\u0440\u0438\u0430\u0442\u043e\u0440\u043e\u0432 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438 \u043e\u043d\u0438 \u0447\u0443\u0442\u044c \u0434\u0435\u0448\u0435\u0432\u043b\u0435","051b9227":"\u0412 \u0438\u0442\u043e\u0433\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 **MAPE 27%** \u043d\u0430 \u041b\u0411!\n\n\u0411\u043e\u043b\u044c\u0448\u0430\u044f \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0432 \u043e\u0448\u0438\u0431\u043a\u0435 \u043c\u043e\u0436\u0435\u0442 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430 \u0442\u043e \u0447\u0442\u043e \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043f\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0438\u043b\u0438 \u0442\u043e \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u043c\u043e\u0433\u043b\u0438 \u0443\u0436\u0435 \u0443\u0441\u0442\u0430\u0440\u0435\u0442\u044c \u0438 \u0438\u0445 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c.","8810a009":"C \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u043f\u0430\u0434\u0430\u0435\u0442 \u0446\u0435\u043d\u0430 \u043c\u0430\u0448\u0438\u043d\u044b, \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0440\u0438\u0442\u0435\u0442\u043d\u044b\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","cff5112b":"### 19. \u0420\u0443\u043b\u044c","2b444ec6":"## \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430","8336dce8":"### 12. vehileConfiguration","abf1f29e":"\u0420\u0430\u0440\u0438\u0442\u0435\u0442\u043d\u044b\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u0438\u043c\u0435\u044e\u0442 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0443\u044e \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c, \u044d\u0442\u043e \u0432\u043f\u043e\u043b\u043d\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e","5b0f7f1f":"### 24. fuelType","cf89792a":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0442\u043e \u0447\u0430\u0441\u0442\u043e \u043f\u0438\u0448\u0443\u0442 \u0432 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\u0445 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043e\u0431\u043b\u0430\u043a\u043e \u0441\u043b\u043e\u0432","8319e6aa":"### 18. \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435","2fb652ef":"## \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0421\u043f\u0438\u0440\u043c\u0435\u043d\u0430 \u0434\u043b\u044f \u0440\u0430\u043d\u0433\u043e\u0432\u044b\u0445","0818592e":"### 14. color","24ca5afe":"\u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0432\u0435\u043b\u043e \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e","8b176047":"\u0411\u043e\u043b\u044c\u0448\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043c\u0430\u0448\u0438\u043d \u0441 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0442\u0441 \u0438 \u0441\u0442\u043e\u044f\u0442 \u043e\u043d\u0438 \u0434\u043e\u0440\u043e\u0436\u0435","dd434624":"## EDA\n \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438","161d37dc":"car_url \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043c\u0430\u0440\u043a\u0435 \u043c\u0430\u0448\u0438\u043d\u044b - \u043d\u043e\u0432\u0430\u044f \u0438\u043b\u0438 \u043d\u0435\u0442 - \u043c\u043e\u0434\u0435\u043b\u044c.\u041d\u043e\u0432\u0430\u044f \u043c\u0430\u0448\u0438\u043d\u0430 \u0438\u043b\u0438 \u043d\u0435\u0442 - \u043c\u043e\u0436\u043d\u043e \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u043f\u043e \u0433\u043e\u0434\u0443 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0438 \u043f\u0440\u043e\u0431\u0435\u0433\u0443. \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443\u0436\u0435 \u0435\u0441\u0442\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c","a706d36e":"\u0414\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0431\u0440\u0430\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043c\u0430\u0440\u043e\u043a \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430. \u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0445 \u043e\u0442 \u0415\u0432\u0440\u043e\u043f\u044b \u0438 \u042f\u043f\u043e\u043d\u0438\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u043d\u0430 other","dce6ed36":"model = CatBoostRegressor(iterations = 5000,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE'],\n                          silent=True,\n                         )\nmodel.fit(X_train, np.log(y_train),\n         #cat_features=cat_features_ids,\n         eval_set=(X_test, np.log(y_test)),\n         verbose_eval=0,\n         use_best_model=True,\n         #plot=True\n         )\n\nmodel.save_model('catboost_single_model_2_baseline.model')","4cc569a8":"### 13. numberOfDoors","11d3c7da":"\u0420\u0430\u0440\u0438\u0442\u0435\u0442\u043d\u044b\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u0431\u0435\u0437 \u0434\u0432\u0435\u0440\u0435\u0439 \u043e\u0447\u043d\u044c \u0434\u043e\u0440\u043e\u0433\u0438\u0435. \u0414\u0432\u0443\u0445\u0434\u0432\u0435\u0440\u043d\u044b\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u0438\u0434\u0443\u0442 \u0441\u043b\u0435\u0434\u043e\u043c.3 \u0434\u0432\u0435\u0440\u043d\u044b \u0441\u0430\u043c\u044b\u0435 \u0434\u0435\u0448\u0435\u0432\u044b\u0435 \u0438 \u0434\u0430\u043b\u0435\u0435 \u0438\u0434\u0442 \u0440\u043e\u0441\u0442 \u0446\u0435\u043d\u044b \u0441 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0432\u0435\u0440\u0435\u0439\n","2125fac9":"### 29. \u041f\u0440\u0438\u0432\u043e\u0434","a9984ec7":"### 23. description","7c3ce75b":"# Submission","9e25f72c":" \u041d\u0435 \u0431\u0443\u0434\u0435\u043c \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","80890c40":"9 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u043c\u0430\u0448\u0438\u043d \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 \u0442\u0435\u0441\u0442\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442","cf24aae2":"rfr = RandomForestRegressor(n_estimators=1000, max_depth = 15, max_features = 'log2', random_state = 42, oob_score=True,) \nrfr.fit(X_train, np.log(y_train))","273ae849":"\u041c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 0.735* \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c. \u041b\u0438\u0431\u043e \u043d\u0430 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e\u0435: 1.6","3c5de134":"print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_test))*100:0.2f}%\")","55dbdb35":"\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0438\u043c\u0435\u0435\u0442 32 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 (\u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e) \u0438 34686 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439. \u0422\u0440\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e\u0447\u0442\u0438 10000 - 29000 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. 6 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442.\n\u0412\u0430\u043b\u044e\u0442\u0430 \u0432\u0441\u0435\u0445 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 - \u0440\u0443\u0431\u043b\u0438. \u0412\u0441\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u0440\u0435\u043c\u043e\u043d\u0442\u0430(\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435). \u0418 \u0432\u0441\u0435 \u0440\u0430\u0441\u0442\u043e\u043c\u043e\u0436\u0435\u043d\u044b(\u0422\u0430\u043c\u043e\u0436\u043d\u044f). \n##### \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n\u0440\u0443\u043b\u044c: \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043b\u0435\u0432\u044b\u0439 \u0440\u0443\u043b\u044c \u043f\u043e\u0447\u0442\u0438 \u0443 \u0432\u0441\u0435\u0445(33287)\n\n\u041f\u0422\u0421: \u043f\u043e\u0447\u0442\u0438 \u0443 \u0432\u0441\u0435\u0445 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b(30098), \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 - \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\n\nvendor: \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u044b \u0435\u0432\u0440\u043e\u043f\u0435\u0439\u0441\u043a\u0438\u0445 \u043c\u0430\u0448\u0438\u043d (20682), \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 - \u044f\u043f\u043e\u043d\u0441\u043a\u0438\u0435","c1d605d2":"### 22. image","e9f0dc00":"predict_test = np.exp(rfr.predict(X_test))\npredict_submission = np.exp(rfr.predict(X_sub))","1e89ce26":"\u0421 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435\u043c \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442\u0441\u044f. \u0415\u0441\u0442\u044c \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b \u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430. \u041d\u043e \u043f\u043e\u043a\u0430 \u0443\u0434\u0430\u043b\u0438\u043c \u0435\u0433\u043e, \u0442\u0430\u043a \u043a\u0430\u043a \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u044b \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u043e\u0431\u043e\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.","73ac2ba7":"# # Model 3 : RandomForestRegressor","9cc8a966":"\u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 - \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0435\u0441\u0442\u044c \u043e\u0447\u0435\u043d\u044c \u043d\u0435\u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u043c\u0430\u0448\u0438\u043d\u044b","2a55fd5f":"\u0423\u0434\u0430\u043b\u0438\u043c \u0441\u0440\u0430\u0437\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 1 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435, \u0422\u0430\u043c\u043e\u0436\u043d\u044f \u0438 priceCurrency","565266ef":"\u041b\u043e\u0433\u0438\u0447\u043d\u043e, \u0447\u0442\u043e \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0430\u0440\u044b\u0445 \u043c\u0430\u0448\u0438\u043d \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435","cece1be0":"### 6. complectation_dict","380e4c5b":"### 27. vendor","a4147edf":"# Setup","0b078645":"# # Model 1 : CatBoost","1a23bd59":"\u041c\u0430\u0448\u0438\u043d\u044b \u043d\u0430 \u0431\u0435\u043d\u0437\u0438\u043d\u0435 \u0441\u0430\u043c\u044b\u0435 \u0434\u0435\u0448\u0435\u0432\u044b\u0435. \u041d\u0430 \u0433\u0430\u0437\u0443 \u043e\u0447\u0435\u043d\u044c \u043c\u0430\u043b\u043e. ","5322c93a":"### 7. equipment_dict","1137076a":"\u0411\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043c\u0430\u0448\u0438\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u043c 6-13 \u043b\u0435\u0442","fca44a49":"id \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439. \u041c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c.","1622bfc3":"\u0414\u0430\u043d\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0440\u0430\u043d\u0441\u043c\u0438\u0441\u0441\u0438\u044f. \u0423\u0434\u0430\u043b\u044f\u0435\u043c.","1d8b6f89":"### 26. super_gen","33ee1bb3":"### 21. sell_id","82b5bbaf":"print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_test))*100:0.2f}%\")","4e563538":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 10 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 28268 \u0432 \u0442\u0435\u0441\u0442\u0435","a3db0afa":"### 11. vehileTransmission","c79dfdfb":"\u041f\u043e\u0447\u0442\u0438 20000 \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442. \u0427\u0430\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043c\u0435\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0430\u043a \u043a\u0430\u043a \u0443 \u043c\u0430\u0448\u0438\u043d \u0441 \u043a\u043e\u0436\u0430\u043d\u044b\u043c \u0441\u0430\u043b\u043e\u043d\u043e\u043c \u043d\u0430\u0432\u0435\u0440\u043d\u044f\u043a\u0430 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043d\u043e\u0432\u0448\u0435\u0441\u0442\u0432\u0430 \u0438 \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u0422\u043e\u0436\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c","e990fde0":"\u042f \u0440\u0435\u0448\u0438\u043b\u0430 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e test \u0438 train \u0442\u0430\u043a \u043a\u0430\u043a \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u043b\u0438\u0441\u044c \u0432 \u0440\u0430\u0437\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f, \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043b\u044e\u0434\u044c\u043c\u0438 \u0438 \u0447\u0442\u043e\u0431\u044b \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442 \u043b\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f - \u043f\u043b\u044e\u0441 \u043c\u043e\u0436\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0442\u043e\u0433\u043e \u0447\u0442\u043e \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","ad601d16":"### 17. \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b","852dd934":"\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u0435\u0433\u0430 1 - \u0447\u0442\u043e \u043d\u0435 \u043b\u043e\u0433\u0438\u0447\u043d\u043e. \u0414\u0430\u0436\u0435 \u0443 \u043d\u043e\u0432\u044b\u0445 \u043c\u0430\u0448\u0438\u043d \u0438\u0437 \u0441\u0430\u043b\u043e\u043d\u0430 \u043f\u0440\u043e\u0431\u0435\u0433 10-30 \u043a\u043c. \u041f\u043e\u043c\u0435\u0442\u0438\u043c \u0433\u0434\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 0 \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0449\u0435 \u0431\u044b\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u043e\u0442\u043e\u043c \u0438 \u043f\u043e\u043c\u0435\u043d\u044f\u0435\u043c \u0444\u043e\u0440\u043c\u0430\u0442 \u0441 float64 \u043d\u0430 int64","f187e024":"### 1. bodyType","a0239e81":"71 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0431\u0440\u0435\u043d\u0434 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 12 \u0432 \u0442\u0435\u0441\u0442\u0435","34ba9157":"## Label Encoding","fa0f95a4":"## **MAPE 13.62 \u043d\u0430 Kaggle","b21edd02":"### 10. engineDisplacement","91260351":"\u0412 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0437\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0433\u043e\u0434 \u043c\u0430\u0448\u0438\u043d\u0430 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u0434\u043e 10 000 \u043a\u043c, \u0430 \u043f\u043e\u0441\u043b\u0435 \u043f\u043e 20000","f372235e":"\u0422\u0430\u043a \u043a\u0430\u043a \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0440\u0430\u0437\u0431\u0435\u0433 \u043f\u043e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438, \u0442\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0442 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0430 \u0446\u0435\u043d\u044b","73d75718":"## Train Split","24378984":"55 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0431\u044a\u0435\u043c\u0430 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e \u0432 \u0442\u0435\u0441\u0442\u0435 \u0438 119 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0441\u0432\u044f\u0437\u044c \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0438 \u043e\u0431\u044a\u0435\u043c\u0430","9b88f6d6":"### \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f price","90792ec1":"### 9. enginePower ","63367362":"### 2. brand","3f2dc0b6":"\u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 33 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0438 78466 \u0434\u0430\u043d\u043d\u044b\u0445. \u0427\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0442\u0438\u043f \u0438\u043c\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439 \u0438 \u0434\u0430\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438. \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0442\u0438\u043f\u0430 object. \u041c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435. \u0418\u043c\u0435\u0442\u0441\u044f \u043f\u043e 1-3 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 \u043f\u043e \u0432\u0441\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c - \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c \u0447\u0442\u043e \u044d\u0442\u043e \u043f\u0430\u0440\u0430 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u0431\u0435\u0437 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438\n\n\u0423 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 price \u0442\u0430\u043a\u0436\u0435 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0421\u0440\u0430\u0437\u0443 \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u0445 \u0438 \u043f\u043e\u0447\u0438\u0441\u0442\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","e9333546":"\u0418 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","f3346ac3":"\u0412 \u0446\u0435\u043b\u043e\u043c \u0447\u0443\u0442\u044c \u0434\u043e\u0440\u043e\u0436\u0435 \u043c\u0430\u0448\u0438\u043d\u044b, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0435\u0441\u0442\u044c \u043f\u043e\u0434\u0443\u0448\u043a\u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438, \u0443\u0441\u0438\u043b\u0438\u0442\u0435\u043b\u044c \u0440\u0443\u043b\u044f, \u0431\u043e\u0440\u0442\u043e\u0432\u043e\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440, \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u0441\u0442\u0435\u043a\u043b\u043e\u043f\u043e\u0434\u044a\u0435\u043c\u043d\u0438\u043a\u0438 \u0438 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u043c\u043e\u043a. \u0422\u0435, \u043a\u0442\u043e \u043f\u0438\u0448\u0443\u0442 \u0432 \u0445\u043e\u0440\u043e\u0448\u0435\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 - \u043c\u0430\u0448\u0438\u043d\u044b \u0434\u0435\u0448\u0435\u0432\u043b\u0435 \u0447\u0435\u043c \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e. \u0410 \u0432\u043e\u0442 \u0432 \u043e\u0442\u043b\u0438\u0447\u043d\u043e\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u0432\u0438\u0434\u043d\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u043e\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f.","de0b98dc":"### 25. parsing_unixtime","ce73dec9":"## \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","7e5dcdde":"# Data","adf3f143":"\u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u0446\u0435\u043d\u044b \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u0435\u0442 \u0441 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u043c \u043c\u0430\u0448\u0438\u043d\u044b \u0438 \u043f\u0440\u043e\u0431\u0435\u0433\u043e\u043c, \u0438 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u0435\u0442 \u0441 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c\u044e, \u043e\u0431\u044a\u0435\u043c\u043e\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0438 \u043d\u0430\u043b\u043e\u0433\u043e\u043c.\n\u0414\u043b\u0438\u043d\u0443 \u0431\u0440\u0435\u043d\u0434\u0430 \u0443\u0434\u0430\u043b\u0438\u043c - \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a","548e5cc8":"# What's next?\n\u0418\u043b\u0438 \u0447\u0442\u043e \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u0447\u0442\u043e\u0431 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n\n* \u0421\u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0441\u0432\u0435\u0436\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \n* \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u043b\u0438 \u043a\u0430\u043a \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* \u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438\n* \u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 ML\n* \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0410\u043d\u0441\u0430\u043c\u0431\u043b\u044c \u043c\u043e\u0434\u0435\u043b\u0435\u0439, Blending, Stacking","8f23ce7d":"### 15. productionDate ","92365263":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u0447\u0435\u043a \u043b\u0438\u0441\u0442: https:\/\/docs.google.com\/spreadsheets\/d\/1I_ErM3U0Cs7Rs1obyZbIEGtVn-H47pHNCi4xdDgUmXY\/edit?usp=sharing","07a44eae":"\u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0446\u0432\u0435\u0442\u0430 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b. \u0425\u043e\u0442\u044f \u0438 \u0447\u0435\u0440\u043d\u044b\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u0435\u0441\u0442\u044c \u043a\u0430\u043a \u0434\u043e\u0440\u043e\u0433\u0438\u0435, \u0442\u0430\u043a \u0438 \u0434\u0435\u0448\u0435\u0432\u044b\u0435","8277b0a9":"## \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f","8a4dc73d":"\u0412 \u0446\u0435\u043b\u043e\u043c \u0435\u0441\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0442\u0438\u043f\u0430 \u043c\u0430\u0448\u0438\u043d \u043e\u0442 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438. ","658ed29f":"# # Model 2 : GradientBoostingRegressor","e2eb023e":"\u0412\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0442\u043e\u0436\u0435 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432\u043f\u043e\u043b\u043d\u0435 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439","0c41f205":"\u0421\u043e\u0437\u0434\u0430\u0432 \u0432 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \u0434\u043b\u044f \u0440\u0430\u0440\u0438\u0442\u0435\u0442\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d","b2ebeadf":"\u041d\u0430\u043b\u043e\u0433\u043e\u0432\u0430\u044f \u0431\u0430\u0437\u0430 \u0438 \u043d\u0430\u043b\u043e\u0433 \u0432\u044b\u0440\u0430\u0441\u0442\u0430\u044e\u0442 \u0441 \u0440\u043e\u0441\u0442\u043e\u043c \u0446\u0435\u043d\u044b \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f","5054ca96":"\u043f\u0440\u0430\u0432\u043e\u0440\u0443\u043a\u0438\u0445 \u043c\u0430\u0448\u0438\u043d \u043c\u0435\u043d\u044c\u0448\u0435 \u0438 \u0441\u0442\u043e\u044f\u0442 \u043e\u043d\u0438 \u0434\u0435\u0448\u0435\u0432\u043b\u0435"}}