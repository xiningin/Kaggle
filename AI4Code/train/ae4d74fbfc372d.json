{"cell_type":{"20bd84fd":"code","eaa80f0a":"code","505b61f9":"code","b58ac65d":"code","e75cd1ad":"code","7653ff09":"code","98a7c575":"code","72013189":"code","1da8fd3c":"code","179f61c2":"code","3034fef5":"code","19f4071f":"code","77f2c54a":"code","c0dc2788":"code","0fc10a9c":"code","061a2b06":"code","90d91055":"code","87671c6f":"code","a8ff9011":"code","13d2a9a9":"code","605c4f8e":"code","68457bfd":"code","02f587f2":"code","d2fc83e7":"code","b38d295a":"code","1751ddc0":"code","5f83081c":"code","d44e766f":"code","b72a5925":"code","aefba707":"markdown","6fc1643f":"markdown","35790e23":"markdown","34787e52":"markdown","2dc34648":"markdown","d2ddb9b0":"markdown","bff12eb6":"markdown","de4b4008":"markdown","efa48972":"markdown","a0896e48":"markdown","70be2da4":"markdown","6f0a372a":"markdown","4119c766":"markdown","575744f1":"markdown","3bdd351b":"markdown"},"source":{"20bd84fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eaa80f0a":"!unzip \/kaggle\/input\/dogs-vs-cats\/train.zip -d \/kaggle\/working\/","505b61f9":"!unzip \/kaggle\/input\/dogs-vs-cats\/test1.zip -d \/kaggle\/working\/","b58ac65d":"import tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom matplotlib import pyplot as plt\nfrom tensorflow.keras.applications import VGG16\n","e75cd1ad":"Dtrain = os.listdir('.\/train')\ncategories = []\nfor filename in Dtrain:\n    category = filename.split(\".\")[0]\n    if category == \"dog\":\n        categories.append(\"dog\")\n    else:\n        categories.append(\"cat\")\ndf = pd.DataFrame({\n    \"filename\" : Dtrain,\n    \"category\" : categories\n})","7653ff09":"print(df.head())","98a7c575":"train_df, validate_df = train_test_split(df, test_size = 0.2, random_state = 42)\ntrain_df = train_df.reset_index(drop=True)\nvalidate_df = validate_df.reset_index(drop=True)","72013189":"image_width, image_height = 128, 128\n","1da8fd3c":"vgg_conv = VGG16(weights='imagenet', include_top=False, input_shape=(image_width, image_height, 3))","179f61c2":"vgg_conv.summary()","3034fef5":"for layer in (vgg_conv.layers):\n    layer.trainable = False","19f4071f":"vgg_conv.summary()","77f2c54a":"model = Sequential()\n\n# Add the vgg convolutional base model\nmodel.add(vgg_conv)\n\n# Add new layers\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(2, activation='sigmoid'))\n\nmodel.summary()","c0dc2788":"model.compile(loss='binary_crossentropy', optimizer=Adam(lr = 0.0001,decay=1e-6), metrics=['accuracy'])","0fc10a9c":"earlystop = EarlyStopping(patience=10)\n\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\n\ncallbacks = [earlystop, learning_rate_reduction]","061a2b06":"\n\ntrain_datagen = ImageDataGenerator(\n    rotation_range=20,\n    rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \".\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=(image_width, image_height),\n    class_mode='categorical',\n    batch_size=64,\n    color_mode=\"rgb\",\n    shuffle=True\n)","90d91055":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\n\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    validate_df, \n    \".\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=(image_width, image_height),\n    class_mode='categorical',\n    batch_size=64,\n    color_mode=\"rgb\",\n    shuffle=True\n)","87671c6f":"example_df = train_df.sample(n=1).reset_index(drop=True)\nexample_generator = train_datagen.flow_from_dataframe(\n    example_df, \n    \".\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=(image_width, image_height),\n    class_mode='categorical',\n    color_mode=\"rgb\",\n    shuffle=True\n)\nplt.figure(figsize=(12,12))\nfor i in range(0,8):\n    plt.subplot(2, 4, i+1)\n    for x_batch, y_batch in example_generator:\n        img = x_batch[0]\n        plt.imshow(img)\n        break\nplt.tight_layout()\nplt.show()","a8ff9011":"history = model.fit_generator(\n    train_generator,\n    steps_per_epoch=len(train_df)\/\/64,\n    epochs=30,\n    validation_data=validation_generator,\n    validation_steps=len(validate_df)\/\/64,\n    callbacks=callbacks\n)\n","13d2a9a9":"model.save_weights(\"CatsVsDogs.h5\")\n","605c4f8e":"accuracy      = history.history['accuracy']\nval_accuracy  = history.history['val_accuracy']\nloss     = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs   = range(len(accuracy))\n\nplt.plot(epochs, accuracy)\nplt.plot(epochs, val_accuracy)\nplt.title('Training and validation accuracy')\nplt.figure()\n\n# Plot training and validation loss per epoch\nplt.plot(epochs, loss)\nplt.plot(epochs, val_loss)\nplt.title('Training and validation loss')","68457bfd":"Dtest = os.listdir('.\/test1')\ndf_test = pd.DataFrame({\n    \"filename\" : Dtest\n})","02f587f2":"test_dataGen = ImageDataGenerator(1.\/255)\n\ntest_gen = test_dataGen.flow_from_dataframe(\n    df_test,\n    '.\/test1',\n    target_size = (image_width, image_height),\n    x_col = \"filename\",\n    y_col = None,\n    batch_size = 64,\n    class_mode = None,\n    shuffle = True,\n    color_mode=\"rgb\",\n\n)","d2fc83e7":"predict = model.predict_generator(test_gen)","b38d295a":"df_test['category'] = np.argmax(predict, axis=-1)\n","1751ddc0":"df_test[\"category\"] = df_test[\"category\"].replace({1 : \"cat\", 0 : \"dog\"})\ndf_test['category'].value_counts().plot.bar()\nplt.ylabel(len(df_test), fontsize = 14)\nplt.title(str(len(df_test[df_test['category'] == 'dog']))+\" Dogs  |  \"+str((len(df_test[df_test['category'] == 'cat'])))+\" Cats\", fontsize=18)\nplt.show()","5f83081c":"from keras.preprocessing.image import ImageDataGenerator, load_img\n","d44e766f":"sample_test = df_test.head(25)\nsample_test.head()\nplt.figure(figsize=(12, 24))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(\"\/kaggle\/working\/test1\/\"+filename, target_size=(image_width, image_height))\n    plt.subplot(5, 5, index+1)\n    plt.imshow(img)\n    plt.xlabel(filename + '(' + \"{}\".format(category) + ')' )\nplt.tight_layout()\nplt.show()","b72a5925":"submission_df = df_test.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename', 'category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)","aefba707":"## show example","6fc1643f":"## Create Testing Generator","35790e23":"## prepare test data","34787e52":"## Build Model","2dc34648":"## Visualize Training\n","d2ddb9b0":"## submission","bff12eb6":"## Import Libraries\n","de4b4008":"## Validation Generator","efa48972":"## predict","a0896e48":"### Save model weights","70be2da4":"## Split data to train and validation set \n","6f0a372a":"## Prepare Data\n","4119c766":"### Callbacks","575744f1":"## Traning Generator\n","3bdd351b":"## Fit model"}}