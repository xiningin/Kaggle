{"cell_type":{"75453518":"code","0c743ffa":"code","fb0519a5":"code","1b817aa7":"code","76d53fb6":"code","bdeb4402":"code","c4851c72":"code","30743301":"code","1e6fb62b":"code","ac3e148c":"code","e1c5fa25":"code","024972ab":"code","2c667220":"code","8d066a3b":"code","4eb49fd1":"code","e7f230ad":"markdown","c35b2dda":"markdown","8fa25079":"markdown","85af8817":"markdown","5db4146d":"markdown","13d983b2":"markdown","003a6f58":"markdown","d75749c9":"markdown","15db51b6":"markdown","0f897ab3":"markdown","a391b33a":"markdown","cdc8f3fe":"markdown","49647550":"markdown"},"source":{"75453518":"import numpy as np\n\nimport pandas as pd \n\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\n# _______________________________\n\ndfk = pd.DataFrame({ \n    \n    'Kernel ID'   : ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K'],  \n    \n    'Public Score': [ 0.89224, 0.89225, 0.89230, 0.89253, 0.89257, 0.89268, 0.89280, 0.89291, 0.89295, 0.89335, 0.89399],   \n    \n    'File Path'   : ['..\/input\/tps-mar-part-1-kernels\/b89224.csv', '..\/input\/tps-mar-part-1-kernels\/c89225.csv', '..\/input\/tps-mar-part-1-kernels\/d89230.csv', '..\/input\/tps-mar-part-1-kernels\/e89253.csv', '..\/input\/tps-mar-part-1-kernels\/f89257.csv', '..\/input\/tps-mar-part-1-kernels\/g89268.csv', '..\/input\/tps-mar2021-lightgbm-optuna-opt-data-prep\/submission.csv','..\/input\/tps-mar-lgbm-optuna\/submission.csv', '..\/input\/tps-mar-part-1-kernels\/h89295.csv', '..\/input\/tps-mar-part-1-kernels\/i89335.csv', '..\/input\/tps-mar-part-1-kernels\/j89399.csv']  \n    \n})    \n\ndfk ","0c743ffa":"def generate(main, support, coeff):\n    \n    g = main.copy()    \n    for i in main.columns[1:]:\n        \n        res = []\n        lm, Is = [], []        \n        lm = main[i].tolist()\n        ls = support[i].tolist()  \n        \n        for j in range(len(main)):\n            res.append((lm[j] * coeff) + (ls[j] * (1.- coeff)))            \n        g[i] = res\n        \n    return g\n","fb0519a5":"def drawing(main, support, generated):\n    \n    X  = main.iloc[:, 1]\n    Y1 = support.iloc[:, 1]\n    Y2 = generated.iloc[:, 1]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nBlue | X axis >> main | Y axis >> support\\n\\nOrange | X axis >> main | Y axis >> generated\\n') \n    \n    plt.scatter(X, Y1, s=0.1)    \n    plt.scatter(X, Y2, s=0.1)\n    \n    plt.show() \n    ","1b817aa7":"def drawing2(pxy, mxy):\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nComparative Method\\n\\nBlue | X(main) | Y(average - smaller result)\\n\\nOrange | X(main) | Y(generated)\\n') \n    plt.scatter(pxy[0], pxy[1], s=0.1)\n    plt.scatter(pxy[0], pxy[2], s=0.1)\n    plt.show() \n\n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nComparative Method\\n\\nBlue | X(main) | Y(average - bigger results)\\n\\nOrange | X(main) | Y(generated)\\n') \n    plt.scatter(mxy[0], mxy[1], s=0.1)\n    plt.scatter(mxy[0], mxy[2], s=0.1)\n    plt.show()\n    ","76d53fb6":"def comparison(main, majority, pcoeff, mcoeff):\n\n    comp = main.copy()\n    for i in main.columns[1:]:\n        res = []\n        pxy = [[],[],[]]\n        mxy = [[],[],[]]        \n        lm  = main[i].tolist() \n        ls  = [[],[],[],[],[],[],[],[],[],[],[]]\n        for n in range (11):       \n            csv   = pd.read_csv(dfk.iloc[n, 2])  \n            ls[n] = csv[i].tolist() \n            \n        for j in range(len(main)):\n            pcount = 0\n            pvalue = 0.0        \n            mcount = 0\n            mvalue = 0.0 \n    \n            for k in range (11):            \n                if lm[j] > ls[k][j]:\n                    pcount += 1\n                    pvalue += ls[k][j]                 \n                else: \n                    mcount += 1\n                    mvalue += ls[k][j] \n                    \n            if (pcount > majority): \n                res.append(lm[j] * pcoeff)\n                pxy[2].append(lm[j] * pcoeff)                \n                pxy[1].append(pvalue \/ pcount)\n                pxy[0].append(lm[j])\n                        \n            elif (mcount > majority): \n                res.append(lm[j] * mcoeff)\n                mxy[2].append(lm[j] * mcoeff)                \n                mxy[1].append(mvalue \/ mcount)\n                mxy[0].append(lm[j])\n                        \n            else: \n                res.append(lm[j])       \n    \n        comp[i] = res    \n\n    drawing2(pxy, mxy)    \n    return comp\n    ","bdeb4402":"support = pd.read_csv(dfk.iloc[0, 2])\n    \nfor k in range (1, 4):\n    main = pd.read_csv(dfk.iloc[k, 2])\n    support = generate(main, support, 0.50)\n   \nsub1 = support ","c4851c72":"d89253 = pd.read_csv(dfk.iloc[3, 2])\nc89230 = pd.read_csv(dfk.iloc[2, 2])\n\ndrawing(d89253, c89230, sub1)\n# sub1: (Public Score = 0.89----) ","30743301":"support = sub1\n    \nfor k in range (4, 9):\n    main = pd.read_csv(dfk.iloc[k, 2])\n    support = generate(main, support, 0.70)\n    \nsub2 = support ","1e6fb62b":"i89295 = pd.read_csv(dfk.iloc[8, 2])\nh89291 = pd.read_csv(dfk.iloc[7, 2])\n\ndrawing(i89295, h89291, sub2)\n# sub2: (Public Score = 0.89------) ","ac3e148c":"l89298 = pd.read_csv('..\/input\/kerasembeddings\/blend.csv')\n\nsub2 = generate(l89298, sub2, 0.60)","e1c5fa25":"j89335 = pd.read_csv(dfk.iloc[9, 2])\n\nsub3 = generate(j89335, sub2, 0.70)","024972ab":"drawing(j89335, sub2, sub3)\n\n# sub3: (Public Score = 0.89----) ","2c667220":"k89399 = pd.read_csv(dfk.iloc[10, 2])\n\nsub4 = generate(k89399, sub3, 0.35)","8d066a3b":"drawing(k89399, sub3, sub4)\n\n# sub4: (Public Score = 0.89472) ","4eb49fd1":"sub = sub4\nsub.to_csv(\"submission.csv\", index=False)\n\nsub1.to_csv(\"submission1.csv\", index=False)\nsub2.to_csv(\"submission2.csv\", index=False)\nsub3.to_csv(\"submission3.csv\", index=False)\nsub4.to_csv(\"submission4.csv\", index=False)\n\n!ls","e7f230ad":"<div class=\"alert alert-success\">  \n<\/div>","c35b2dda":"<div class=\"alert alert-success\">  \n<\/div>","8fa25079":"<div>\n    <h1 align=\"center\">Ensembling & Comparative Method<\/h1><\/h1>\n    <h2 align=\"center\">Tabular Playground Series - Mar 2021<\/h2>\n<\/div>","85af8817":"<div class=\"alert alert-success\">  \n<\/div>","5db4146d":"<div class=\"alert alert-success\">  \n<\/div>","13d983b2":"<div class=\"alert alert-success\">  \n<\/div>","003a6f58":"# If you find this work useful, please don't forget upvoting :)","d75749c9":"<div class=\"alert alert-success\">  \n<\/div>","15db51b6":"<div class=\"alert alert-success\">  \n<\/div>","0f897ab3":"<div class=\"alert alert-success\">  \n<\/div>","a391b33a":"<div class=\"alert alert-success\">  \n<\/div>","cdc8f3fe":"# Description:\n\n### - I have used the results of \"12 public notebooks\" in this notebook. These results have been used for \"Ensembling\" and \"Comparative Method\". Thanks to everyone who shared their notebook, the addresses of some of the used notebooks are as follows:\n\nhttps:\/\/www.kaggle.com\/hiro5299834\/tps-mar-2021-rank-averaging-and-stacking\n\nhttps:\/\/www.kaggle.com\/davidedwards1\/tabularmarch21-dae-starter-cv-inference\n\nhttps:\/\/www.kaggle.com\/vitnam\/mar-2021-single-lgbm\n\nhttps:\/\/www.kaggle.com\/craigmthomas\/tps-mar-2021-stacked-starter\n\nhttps:\/\/www.kaggle.com\/svyatoslavsokolov\/tps-mar-2021-lgbm\n\n### - More information about the \"Comparative Method\" can be found at the following addresses:\n\nhttps:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2021\/discussion\/213093\n\nhttps:\/\/www.kaggle.com\/somayyehgholami\/0-69470-results-driven-january-tabular-301\n\nhttps:\/\/www.kaggle.com\/somayyehgholami\/results-driven-tabular-playground-series-201\n\n### - You can mix your notebook results with the results of this notebook and get better results. You can also get a better score by changing the coefficients of this notebook.\n\n\n# >>> Good Luck <<<\n","49647550":"<div class=\"alert alert-success\">  \n<\/div>"}}