{"cell_type":{"77c4c767":"code","47470d6d":"code","168201b0":"code","9ff4daf7":"code","db5765cc":"code","eda31b77":"code","4bd119d3":"code","8f245ca1":"code","55c0116a":"code","a9e6be59":"code","127c28dd":"code","9977a48e":"code","57ff098e":"code","ee2a4ace":"code","c125c17e":"code","7e968b33":"code","59887acc":"code","bf7fdd69":"code","ea0326ae":"code","572db6ef":"code","0f9f7836":"code","8b4c24bc":"code","569d16b2":"code","34f098aa":"markdown","fba69a50":"markdown","e7e7e750":"markdown","3a19d0ff":"markdown","1ac29dfe":"markdown","594cc7c9":"markdown","b3763371":"markdown","7e9977e2":"markdown","68363b38":"markdown"},"source":{"77c4c767":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","47470d6d":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom mlxtend.feature_selection import SequentialFeatureSelector as SFS\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import LabelEncoder, RobustScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score","168201b0":"df=pd.read_csv(\"\/kaggle\/input\/hitters\/Hitters.csv\")\ndf.head()","9ff4daf7":"df.shape","db5765cc":"df.info()","eda31b77":"df.isnull().sum()","4bd119d3":"df.describe([0, 0.05, 0.25,0.50, 0.75,0.95, 0.99, 1]).T","8f245ca1":"# Numerik ve kategorik de\u011fi\u015fkenler (Numeric and categorical variables)\n\ndef grab_col_names(dataframe, cat_th=10, car_th=20):\n\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    return cat_cols, num_cols, cat_but_car\n\ncat_cols, num_cols, cat_but_car = grab_col_names(df)","55c0116a":"#1-E\u015fik de\u011feri belirleme (Setting a threshold)\n\ndef outlier_thresholds(dataframe, col_name, q1=0.05, q3=0.95):\n    quartile1 = dataframe[col_name].quantile(q1)\n    quartile3 = dataframe[col_name].quantile(q3)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n","a9e6be59":"#2-Ayk\u0131r\u0131 de\u011fer var m\u0131 diye kontrol etme (Checking for outliers)\n\ndef check_outlier(dataframe, col_name):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n        return True\n    else:\n        return False\n\nfor col in num_cols:\n    print(col, check_outlier(df,col))","127c28dd":"# Eksik g\u00f6zlem analizi (Missing observation analysis)\n\ndf.isnull().sum()","9977a48e":"# Eksik verileri median ile doldurma (Filling missing data with median)\n\ndf[~df[\"Salary\"].isnull()].groupby(\"Division\").agg({\"Salary\":\"median\"})\ndf[(df[\"Salary\"].isnull())& (df[\"Division\"]==\"W\")]=df[(df[\"Salary\"].isnull())& (df[\"Division\"]==\"W\")].fillna(375.000)\ndf[(df[\"Salary\"].isnull())& (df[\"Division\"]==\"E\")]=df[(df[\"Salary\"].isnull())& (df[\"Division\"]==\"E\")].fillna(517.143)\n\ndf.isnull().sum()\n","57ff098e":"# Korelasyon analizi (Correlation analysis)\n\ndf.corrwith(df[\"Salary\"]).sort_values(ascending=False)\ncorr_df = df.corr()\n\nf, ax = plt.subplots(figsize=[18, 13])\nsns.heatmap(df.corr(), annot=True, fmt=\".2f\", ax=ax, cmap=\"RdBu\",vmin=-1)\nax.set_title(\"Correlation Matrix\", fontsize=20)\nplt.show()\n","ee2a4ace":"# Kategorik de\u011fi\u015fkenleri say\u0131salla\u015ft\u0131rma (Digitizing categorical variables)\n#label Encoding\ndef label_encoder(dataframe, binary_col):\n    labelencoder = LabelEncoder()\n    dataframe[binary_col] = labelencoder.fit_transform(dataframe[binary_col])\n    return dataframe\n\nbinary_cols = [col for col in df.columns if df[col].dtype not in [int, float]\n               and df[col].nunique() == 2]\n\nfor col in binary_cols:\n    df=label_encoder(df, col)\n\ndf.head()","c125c17e":"#S\u0131ral\u0131 \u0130leri Se\u00e7imi Tan\u0131mlama (Define Sequential Forward Selection(sfs))\n\nX = df.drop('Salary', axis=1)\ny = df[[\"Salary\"]]\n\nsfs = SFS(LinearRegression(),\n           k_features=5,\n           forward=True,\n           floating=False,\n           scoring = 'r2',\n           cv = 0)\n\n#En iyi 5 \u00f6zelli\u011fi se\u00e7mek i\u00e7in SFS kullanma (Using SFS for top 5 features)\n\nsfs.fit(X, y)\n\n#SFS sonu\u00e7lar\u0131 i\u00e7in bir veri \u00e7er\u00e7evesi olu\u015fturma (Creating a dataframe for SFS)\n\ndf_SFS_results = pd.DataFrame(sfs.subsets_).transpose()\ndf_SFS_results","7e968b33":"df[\"New_best\"]=df[\"Hits\"]*df[\"CRuns\"]*df[\"Division\"]\ndf[\"New_hit_success\"]=df[\"CHits\"]\/df[\"CAtBat\"]\ndf[\"New_Put-Div\"]=df[\"Division\"]*df[\"PutOuts\"]\ndf[\"New_CRun-AtBt\"]=df[\"CRuns\"]*df[\"AtBat\"]\n","59887acc":"#RobustScaler\n\ncat_cols, num_cols, cat_but_car = grab_col_names(df)\n\nnum_cols = [col for col in num_cols if col not in [\"Salary\"]]\n\nrs = RobustScaler()\ndf[num_cols] = rs.fit_transform(df[num_cols])\ndf.head()","bf7fdd69":"X = df.drop('Salary', axis=1)\ny = df[[\"Salary\"]]\n\n# Test\/Train\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)\n\nreg_model = LinearRegression()\nreg_model.fit(X_train, y_train)","ea0326ae":"# TRAIN RKARE\nreg_model.score(X_train, y_train)","572db6ef":"# Test RKARE\nreg_model.score(X_test, y_test)","0f9f7836":"# 10 Katl\u0131 CV RMSE\nnp.mean(np.sqrt(-cross_val_score(reg_model, X, y, cv=10, scoring=\"neg_mean_squared_error\")))","8b4c24bc":"#Ger\u00e7ek maa\u015f (Real salary)\nrandom=df.sample(n=1, random_state=34)\nrandom","569d16b2":"#Tahmini (Prediction)\nrandom=df.sample(n=1, random_state=34)\nrandom=random.drop([\"Salary\"],axis=1)\ny_pred=reg_model.predict(random)\ny_pred","34f098aa":"**Tahmin Ba\u015far\u0131s\u0131n\u0131 De\u011ferlendirme (Evaluating Forecast Success)**","fba69a50":"![](https:\/\/www.lawinsport.com\/media\/zoo\/images\/Baseball_on_Desk_with_Pen_Glasses_and_Books_d1d1ee89671efc93f33fb794cc07be22.jpg)","e7e7e750":"**Ayk\u0131r\u0131 g\u00f6zlem analizi (Outlier analysis)**","3a19d0ff":"# Multiple Linear Regression","1ac29dfe":"\nModelimiz maa\u015f de\u011fi\u015fkenini -314 ve +314 de\u011ferleri aras\u0131nda hatal\u0131 tahmin etmektedir.(Our model incorrectly estimates the salary variable between +314 and -314 values.)","594cc7c9":"# \u00d6zellik \u00c7\u0131kar\u0131m\u0131 (Feature Engineering)","b3763371":"**Comment**","7e9977e2":"# Ke\u015fif\u00e7i Veri Analizi (Discoverer Data Analysis)","68363b38":"Modelimiz tahminen %53 ba\u015far\u0131l\u0131 (Our model is estimated to be 53% successful)"}}