{"cell_type":{"32b096af":"code","8c87bcba":"code","1dcdbd10":"code","8a1df910":"code","6f7b2eed":"code","36ce1eeb":"code","2a7354bb":"code","591971f9":"code","5275bb5d":"code","093a7a84":"code","80b4be53":"code","48d2e8cb":"code","556fb081":"code","d3d6c2af":"code","81605c51":"code","4cf56f50":"code","4c634d2d":"code","6131724a":"code","2a31e6d1":"code","f947b1ee":"code","883eb6a1":"code","0a0f2333":"code","f91e1f01":"code","a6ac20a3":"code","b829ba89":"code","5ff35778":"code","7265b6f4":"code","844fc0ce":"code","af80e35f":"markdown","3e1677d1":"markdown","fa95f04a":"markdown","e9351e55":"markdown","7ef317f4":"markdown","039e0f6d":"markdown","1631bca2":"markdown","2622d8ae":"markdown","281e508c":"markdown","beb263e1":"markdown","dfbbb193":"markdown","81c5deb8":"markdown","e1c1cefd":"markdown","53a7c476":"markdown","7390c0be":"markdown","812b3143":"markdown","aa19cedf":"markdown","40f73763":"markdown","11feb033":"markdown","32e3a4ae":"markdown","e5efe1f0":"markdown","eb3ef72a":"markdown","291a664c":"markdown","8a86722a":"markdown","c068c318":"markdown","e31aaf5d":"markdown","fdb98501":"markdown","27d2b241":"markdown","1514b13b":"markdown","9b99cf74":"markdown","1921faa6":"markdown","214e2ecc":"markdown","08d7c739":"markdown","1b42aa32":"markdown","65b16693":"markdown"},"source":{"32b096af":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom matplotlib.colors import ListedColormap\nimport matplotlib\nfrom sklearn.cluster import MiniBatchKMeans, KMeans\n#% matplotlib inline\nimport os\nimport time\nimport calendar\n\nprint(os.listdir(\"..\/input\"))\nprint(os.listdir(\"..\/input\/nyc-taxi-fare-osrm\"))","8c87bcba":"train_df =  pd.read_csv('..\/input\/nyc-taxi-fare-osrm\/train_osrm_50M.csv')","1dcdbd10":"#excludes rows outside of bounding box latitudes and longitudes\n#from https:\/\/www.kaggle.com\/breemen\/nyc-taxi-fare-data-exploration\n\n#long_min, long_max, lat_min, lat_max = (-74.5, -72.8, 40.5, 41.8) #loose constraints\n#map_img = mpimg.imread('https:\/\/aiblog.nl\/download\/nyc_-74.5_-72.8_40.5_41.8.png')\nlong_min, long_max, lat_min, lat_max = (-74.3, -73.7, 40.5, 40.9) #tight constraints\n#map_img = mpimg.imread('https:\/\/aiblog.nl\/download\/nyc_-74.3_-73.7_40.5_40.9.png')\n#from https:\/\/imgur.com\/a\/nMkieh6\nmap_img = mpimg.imread('https:\/\/i.imgur.com\/hXaTTqp.png')\n\ndef bounding_box(df):\n    return df[(df.pickup_longitude >= long_min) & (df.pickup_longitude <= long_max) & \\\n           (df.pickup_latitude >= lat_min) & (df.pickup_latitude <= lat_max) & \\\n           (df.dropoff_longitude >= long_min) & (df.dropoff_longitude <= long_max) & \\\n           (df.dropoff_latitude >= lat_min) & (df.dropoff_latitude <= lat_max)]\n\nmin_distance, max_distance, min_duration, max_duration = (100.,60000.,30.,4000.)\ndef distance_duration_box(df):\n    return df[(df.distance >= min_distance) & (df.distance <= max_distance) & \\\n           (df.duration >= min_duration) & (df.duration <= max_duration)]\n\nmin_fare, max_fare = (3.,200.)\ndef fare_box(df):\n    return df[(df.fare_amount >= min_fare) & (df.fare_amount <= max_fare)]\n\n#runs all data cleaning methods\ndef clean_data(df):\n    df = bounding_box(df)\n    df = distance_duration_box(df)\n    return df\n\n\"\"\"\n#This is what a function that uses OSRM to calculate distance looks like interacting with a local server.\n#See here to install the backend: https:\/\/github.com\/Project-OSRM\/osrm-backend\/wiki\n#Here to install frontend: https:\/\/pypi.org\/project\/osrm-py\/\n\nimport osrm\nclient = osrm.Client(host='http:\/\/localhost:5000')\ndef osrm_calc(long_in,lat_in,long_out,lat_out):\n    coordinates = [[long_in,lat_in],[long_out,lat_out]]\n    response = client.route(coordinates=coords_nest)\n    return response['routes'][0]['distance'],response['routes'][0]['duration']\n\"\"\"\n\n#bins the latitude and longitude variables to make it possible to create heatmaps\ndef latitude_longitude_binning(df):\n    df['dropoff_longitude_bin'] = pd.cut(df.dropoff_longitude, bins=50)\n    df['dropoff_latitude_bin'] = pd.cut(df.dropoff_latitude, bins=50)\n    df['pickup_longitude_bin'] = pd.cut(df.pickup_longitude, bins=50)\n    df['pickup_latitude_bin'] = pd.cut(df.pickup_latitude, bins=50)\n    return df\n\ndef distance_duration_binning(df):\n    df['distance_bin'] = pd.cut(df.distance, bins=50)\n    df['duration_bin'] = pd.cut(df.duration, bins=50)\n    return df\n\nfare_bins = [3.,5.,7.,9.,11.,13.,15.,17.,19.,21.,23.,25.,27.,29.,31.,33.,35.,37.,39.,41.,43.,45.,47.,49.,51.,53.,55.,60.,65.,70.,75.,80.,90.,100.,125.,150.,200.]\ndef fare_binning(df):\n    df['fare_amount_bin'] = pd.cut(df.fare_amount, bins = fare_bins)\n    return df\n\ndef apply_clusters(df):\n    df['pickup_cluster'] = clusters.predict(df[['pickup_longitude','pickup_latitude']])\n    df['dropoff_cluster'] = clusters.predict(train_df[['dropoff_longitude','dropoff_latitude']])\n    return df\n\n#largely from https:\/\/www.kaggle.com\/aiswaryaramachandran\/eda-and-feature-engineering\ndef time_columns(df):\n    df['pickup_datetime']=pd.to_datetime(df['pickup_datetime'],format='%Y-%m-%d %H:%M:%S UTC')\n    df['pickup_date']= df['pickup_datetime'].dt.date\n    df['pickup_day']=df['pickup_datetime'].apply(lambda x:x.day)\n    df['pickup_hour']=df['pickup_datetime'].apply(lambda x:x.hour)\n    df['pickup_day_of_week']=df['pickup_datetime'].apply(lambda x:x.weekday())\n    df['pickup_month']=df['pickup_datetime'].apply(lambda x:x.month)\n    df['pickup_year']=df['pickup_datetime'].apply(lambda x:x.year)\n    return df\n\n#runs all data creating methods (do not add training only columns)\ndef create_columns(df):\n    df = latitude_longitude_binning(df)\n    df = apply_clusters(df)\n    df = distance_duration_binning(df)\n    df = time_columns(df)\n    return df\n\ndef heatmap_on_pic(pv,vmax=None, cmap=matplotlib.cm.YlGn):\n    fig, ax = plt.subplots(figsize=(18,14))\n    #optional kwargs\n    kwargs = {}\n    if vmax is not None: kwargs['vmax'] = vmax\n    kwargs['cmap'] = cmap\n    \n    ax = sns.heatmap(pv, ax=ax, alpha = 0.8, zorder = 2, **kwargs)\n    ax.invert_yaxis()\n    ax.set_yticklabels([])\n    ax.set_xticklabels([])\n    _ = ax.imshow(map_img,\n                   aspect = ax.get_aspect(),\n                   extent = ax.get_xlim() + ax.get_ylim(),\n                   zorder = 1)\n    return fig,ax","8a1df910":"fig1, ax1 = plt.subplots()\ntrain_df.pickup_longitude.hist(ax=ax1, bins=100, bottom=0.1, figsize=(14,3))\nax1.set_yscale('log')\n_ = ax1.set_xlabel('longitude')\n\nfig2, ax2 = plt.subplots()\ntrain_df.pickup_latitude.hist(ax=ax2, bins=100, bottom=0.1, figsize=(14,3))\nax2.set_yscale('log')\n_ = ax2.set_xlabel('latitude')","6f7b2eed":"train_df = bounding_box(train_df)\ntrain_df = latitude_longitude_binning(train_df)\ntrain_df.head()","36ce1eeb":"fig1, ax1 = plt.subplots()\ntrain_df.pickup_longitude.hist(ax=ax1, bins=100, bottom=0.1, figsize=(14,3))\n#ax1.set_yscale('log')\n_ = ax1.set_xlabel('longitude')\n\nfig2, ax2 = plt.subplots()\ntrain_df.pickup_latitude.hist(ax=ax2, bins=100, bottom=0.1, figsize=(14,3))\n#ax2.set_yscale('log')\n_ = ax2.set_xlabel('latitude')","2a7354bb":"fig1, ax1 = plt.subplots()\ntrain_df.distance.hist(ax=ax1, bins=100, bottom=0.1, figsize=(14,3))\nax1.set_xlim(0.,60000.)\nax1.set_yscale('log')\n_ = ax1.set_xlabel('distance (meters)')\n\nfig2, ax2 = plt.subplots()\ntrain_df.duration.hist(ax=ax2, bins=100, bottom=0.1, figsize=(14,3))\nax2.set_xlim(0.,4000.)\nax2.set_yscale('log')\n_ = ax2.set_xlabel('duration (seconds)')\n\nfig3, ax3 = plt.subplots()\ntrain_df.fare_amount.hist(ax=ax3, bins=100, bottom=0.1, figsize=(14,3))\nax3.set_xlim(-10.,200.)\nax3.set_yscale('log')\n_ = ax3.set_xlabel('fare (dollars)')","591971f9":"train_df = distance_duration_box(train_df)\ntrain_df = fare_box(train_df)\ntrain_df = distance_duration_binning(train_df)\ntrain_df = fare_binning(train_df)\ntrain_df.head()","5275bb5d":"pv1 = pd.pivot_table(train_df,aggfunc='size',columns='pickup_longitude_bin',index='pickup_latitude_bin',fill_value=0.0,dropna=False)\nfig1,ax1 = heatmap_on_pic(pv1,vmax=5000.,cmap=matplotlib.cm.Reds)\nplt.title('Pickup',fontsize=20)\nplt.show()\npv2 = pd.pivot_table(train_df,aggfunc='size',columns='dropoff_longitude_bin',index='dropoff_latitude_bin',fill_value=0.0,dropna=False)\nfig2,ax2 = heatmap_on_pic(pv2,vmax=5000.,cmap=matplotlib.cm.Blues)\nplt.title('Dropoff',fontsize=20)\nplt.show()","093a7a84":"clusters = KMeans(n_clusters=15, random_state=0).fit(train_df[:100000][['pickup_longitude','pickup_latitude']])","80b4be53":"train_df = apply_clusters(train_df)\ntrain_df.head()","48d2e8cb":"h = .0005\nxx, yy = np.meshgrid(np.arange(long_min,long_max,h),np.arange(lat_min,lat_max,h))\nZ = clusters.predict(np.c_[xx.ravel(), yy.ravel()])\nZ = Z.reshape(xx.shape)\nfig, ax = plt.subplots(figsize=(18,14))\nplt.imshow(Z, interpolation='nearest',\n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap=ListedColormap(sns.diverging_palette(220, 70, n=15).as_hex()),#plt.cm.tab20b,\n           aspect='auto', origin='lower', alpha=0.7, zorder=2)\ncentroids = clusters.cluster_centers_\nlabels = clusters.predict(centroids)\nfor label, x, y in zip(labels,centroids[:,0],centroids[:,1]):\n    plt.annotate(label,xy=(x,y),fontsize='15')\nplt.ylim(lat_min,lat_max)\nplt.xlim(long_min,long_max)\n_ = ax.imshow(map_img,\n          aspect = ax.get_aspect(),\n          extent = ax.get_xlim() + ax.get_ylim(),\n          zorder = 1)\nplt.show()","556fb081":"for i,district in zip([2,3,4,12],['JFK','Lower Manhatten','LaGuardia','Upper Manhatten']):\n    pv = pd.pivot_table(train_df[(train_df.pickup_cluster==i)],values='fare_amount',columns='dropoff_longitude_bin',index='dropoff_latitude_bin',fill_value=0.0,dropna=False)\n    fig,ax = heatmap_on_pic(pv,vmax=70.)\n    plt.title(\"Pickup from {0} (cluster {1})\".format(district,i), fontsize=20)\n    plt.show()","d3d6c2af":"    pv = pd.pivot_table(train_df[(train_df.distance>1000.) & (train_df.distance<20000.)],columns='distance_bin',index='duration_bin',values='fare_amount')\n    fig, ax = plt.subplots(figsize=(18,14))\n    ax = sns.heatmap(pv, ax=ax, vmax=40, cmap=matplotlib.cm.Wistia)\n    ax.invert_yaxis()\n    plt.show()","81605c51":"    pv = pd.pivot_table(train_df,aggfunc='size',columns='distance_bin',index='fare_amount_bin',fill_value=0.0)\n    fig, ax = plt.subplots(figsize=(18,14))\n    ax = sns.heatmap(pv, ax=ax, vmax=20000., cmap=matplotlib.cm.YlOrRd)\n    ax.invert_yaxis()\n    plt.show()","4cf56f50":"    pv = pd.pivot_table(train_df[(train_df.pickup_cluster==2) & (train_df.dropoff_cluster==3)],aggfunc='size',columns='distance_bin',index='fare_amount_bin',fill_value=0.0)\n    fig, ax = plt.subplots(figsize=(18,14))\n    ax = sns.heatmap(pv, ax=ax, alpha = 0.8, vmax= 200, cmap=matplotlib.cm.Blues)\n    ax.invert_yaxis()\n    plt.show()","4c634d2d":"train_df = time_columns(train_df)\ntrain_df.head()\ntrain_df.describe()","6131724a":"fig1, ax1 = plt.subplots()\nbins = range(2009,2017)\ntrain_df.pickup_year.hist(ax=ax1, bins=bins, bottom=0.1, figsize=(14,3), align='left')\n_ = ax1.set_xlabel('Year (AD)')\n\nfig2, ax2 = plt.subplots()\nbins = range(8)\ntrain_df.pickup_day_of_week.hist(ax=ax2, bins=bins, bottom=0.1, figsize=(14,3), align='left')\n_ = ax2.set_xlabel('Days since Midnight on Sunday')\n\nfig3, ax3 = plt.subplots()\nbins = range(0,25)\ntrain_df.pickup_hour.hist(ax=ax3, bins=bins, bottom=0.1, figsize=(14,3),align='left')\n_ = ax3.set_xlabel('Hour since Midnight')","2a31e6d1":"fig, ax = plt.subplots(figsize=(14,10))\nax = sns.boxplot(data = train_df[(train_df.pickup_cluster==2) & (train_df.dropoff_cluster==3) & (train_df.pickup_hour>5)], x='pickup_year',y='fare_amount', ax=ax, showfliers=False)","f947b1ee":"fig1, ax1 = plt.subplots()\ntrain_df[(train_df.pickup_cluster==12) & (train_df.dropoff_cluster==3) & (train_df.pickup_year<2013)].distance.hist(ax=ax1, bins=20, figsize=(14,3))\n_ = ax1.set_xlabel('Distance (meters)')\n\nfig2, ax2 = plt.subplots()\ntrain_df[(train_df.pickup_cluster==12) & (train_df.dropoff_cluster==3) & (train_df.pickup_year<2013) & (train_df.distance >7000.) & (train_df.distance < 9000.)].duration.hist(ax=ax2, bins=20, figsize=(14,3))\n_ = ax.set_xlabel('Durations (seconds)')\nt = plt.title('7km < distance < 9km', fontsize=12)","883eb6a1":"fig, ax = plt.subplots(figsize=(14,10))\nax = sns.boxplot(\n    data = train_df[(train_df.pickup_cluster==12) & (train_df.dropoff_cluster==3) & (train_df.duration >450.) & (train_df.duration < 650.) & (train_df.distance >6000.) & (train_df.distance < 9000.)], \n    x='pickup_year',y='fare_amount', ax=ax, showfliers=False)","0a0f2333":"fig, ax = plt.subplots(figsize=(14,10))\nax = sns.boxplot(\n    data = train_df[(train_df.pickup_cluster==12) & (train_df.dropoff_cluster==3) & (train_df.pickup_year<2013) & (train_df.duration >450.) & (train_df.duration < 650.) & (train_df.distance >6000.) & (train_df.distance < 9000.)], \n    x='pickup_hour',y='fare_amount', ax=ax, showfliers=False)","f91e1f01":"fig, ax = plt.subplots(figsize=(14,10))\nax = sns.boxplot(\n    data = train_df[(train_df.pickup_cluster==12) & (train_df.dropoff_cluster==3) & (train_df.pickup_year<2013) & (train_df.duration >450.) & (train_df.duration < 650.) & (train_df.distance >6000.) & (train_df.distance < 9000.) & (train_df.pickup_hour>8) & (train_df.pickup_hour<20)], \n    x='pickup_day_of_week',y='fare_amount', ax=ax, showfliers=False)","a6ac20a3":"fig, ax = plt.subplots(figsize=(14,10))\nax = sns.boxplot(data = train_df[(train_df.pickup_cluster==12) & (train_df.dropoff_cluster==3)& (train_df.pickup_year<2013) & (train_df.duration >450.) & (train_df.duration < 650.) & (train_df.distance >6000.) & (train_df.distance < 9000.)], x='passenger_count',y='fare_amount', ax=ax, showfliers=False)","b829ba89":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport lightgbm as lgb\nfrom math import sqrt\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nimport tensorflow as tf","5ff35778":"drop = ['key','passenger_count','dropoff_longitude_bin', 'dropoff_latitude_bin', 'pickup_longitude_bin', 'pickup_latitude_bin', 'distance_bin', 'duration_bin', 'fare_amount_bin', 'pickup_date', 'pickup_datetime']\ny = train_df['fare_amount']\nX = train_df.drop(columns=['fare_amount'])\nX = X.drop(columns=drop)\nX = pd.get_dummies(X, columns=['pickup_cluster','dropoff_cluster'])\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.3, random_state=42)\ntrain_X.head()","7265b6f4":"params = {\n        'learning_rate': 0.75,\n        'application': 'regression',\n        'max_depth': 3,\n        'num_leaves': 100,\n        'verbosity': -1,\n        'metric': 'RMSE',\n    }\ntrain_lgb = lgb.Dataset(train_X, train_y)\ntrained_lgb = lgb.train(params, train_set = train_lgb, num_boost_round=300)\npredicted_y = trained_lgb.predict(test_X, num_iteration = trained_lgb.best_iteration)\nprint('LGBM RMSE: {0}'.format(sqrt(mean_squared_error(test_y,predicted_y))))","844fc0ce":"def baseline_model():\n    model = Sequential()\n    model.add(Dense(12, input_dim=41, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(1, kernel_initializer='normal'))\n    model.compile(loss='mean_squared_error', optimizer='adam')\n    return model\n\"\"\"\nseed = 7\nnp.random.seed(seed)\ntrained_snn = KerasRegressor(build_fn=baseline_model, nb_epoch=100, batch_size=5, verbose=0)\nwith tf.device('\/gpu:0'):\n    trained_snn.fit(train_X.values,train_y.values, epochs=100, batch_size=5, verbose =2)\npredicted_y = trained_snn.predict(test_X)\nprint('SNN RMSE: {0}'.format(sqrt(mean_squared_error(test_y,predicted_y))))\n\"\"\"","af80e35f":"## So fares change with year, what about with hour?\n* We will look at trips from upper to lower Manhatten.\n* We will control for distance and duration. (Remember duration was estimated without any thought given to time of day or day in week)","3e1677d1":"## Summary\n* So we've looked at a number of obvious things that might affect fare:\n1. Distance\n2. Duration\n3. Year\n4. Hour\n5. Day of Week\n6. Number of passengers\n\n### What else might be interesting to look at?","fa95f04a":"## Determining distance\/duration\n\n1. Manhatten distance: As the cab drives, not aware of actual streets, how to correct for different street orientations?\n2. Euclidean distance: As the crow flies, not the actual path a street dwelling cab would take.\n3. **OSRM** (Open Source Routing Machine): Uses open source maps and routing engine to determine shortest path and estimate typical duration\n\n### Data used in this notebook is ammended with OSRM estimated distance and duration values.  \n### It would take quite some time to do this in notebook!!\n\n* Estimated distance is in meters\n* Estimated duration is in seconds.  \n\n### Duration is largely correlated to the distance estimate, but some paths which have the same distance can have different durations, so this does provide some value.\n### Important to note is that this is only a duration estimate and is not correlated with other time variables (e.g. day of week, hour of day)\n","e9351e55":"## Longitude and Latitude Histograms (Note: NYC is at around -74, 40)","7ef317f4":"## Apply constraints on distance, duration, and fare, then bin these quantities\n* We apply constraints to make it simpler to bin these values, I could also keep these data and put them into a \"last\" bin\n* Distance must be greater than 100 meters and less than 60 kilometers.\n* Time must be greater than 30 seconds and less than 4000 seconds.\n* Training fares must be more than 3 dollars and less than 200 dollars.  There were a handful of rows with more than 200 dollar fare. Negative fares and those less than 3 dollars are too low to be \"real\".\n\n### I think about this in the context of a phone app trying to make these predictions.  Who takes 1 min to plug coordinates into an app to figure out the cost of a 30 second cab ride?","039e0f6d":"## Imports","1631bca2":"## Density Heatmap Fare vs Distance from JFK to Lower Manhatten\n* I guessed that the artifacts in the previous plot were the flat rate fares from JFK to Manhatten, but what is with striping?\n* Perhaps there is a rate change dependent on time?","2622d8ae":"## Boxplot Fare from upper to lower Manhatten vs Passenger Count (outliers not shown)\n* We do not see any dependence of fare on number of passengers in these trips\n* We apply the same constraints as above but exclude daylight travel constraint","281e508c":"# **Goal?**\n Predict taxi fares in NYC.\n\n# **Training Data?**\n\n * Datetime of pickup\n * Longitude and Latitude of pickup and dropoff points\n * Number of passengers\n * Fare\n\n# **How do taxi meters work in NYC?**\n\nAccording to www.nyc.gov\/html\/tlc\/html\/passenger\/taxicab_rate.shtml, in 2018 the fare will vary with:\n* Distance (50 cents \/ 0.2 miles)\n* Duration (50 cents \/ min while moving < 12 mph)\n* Zone based charges dependent on time of day\/day of week\n* Tolls when crossing certain bridges or tunnels\n* Flat rates to\/from certain airports\n* Two cases of flat per passenger charges between districts during certain hours\n\n# **Ideas before we look at the data?**\n\nBased on the data we are given and our understanding of the way meters work in NYC, we probably want to:\n* Estimate travel distance.\n* Estimate duration of travel.  How to do this without it being a linear function of distance?\n* Cluster the map into zones.\n* Split the datetime data into several measures.\n\n# Gameplan:\n* We will briefly look at distance and duration measures and decide on one.\n* Look at some density maps for pickup and dropoff points\n* We will cluster our data into zones to aid in EDA, rather than specifying 4 numbers we can specify 1 with a marginal loss of clarity.\n* Make some fare heatmaps when traveling from a couple of different clusters\n* Look at dependence of fare on distance\n* Make some time variables\n* Look at dependence of fare on different time variables","beb263e1":"## Fare heatmap from selected clusters\n* Each bin shows the average fare when traveling from the selected cluster.\n* To condense the color map we peg the max visible value of fare to 70 dollars.","dfbbb193":"## Fare Heatmap Duration vs Distance\n* Looking at trip distances between 1 km and 20 km\n* Bins show mean fare for that distance\/duration bin\n* Fare is capped at 40 dollars to conserve color map\n* Clearly OSRM estimated duration is largely correlated to distance estimate.\n* It does look like the fare generally increase as duration increases in a distance bin\n","81c5deb8":"# Do some Models","e1c1cefd":"## Apply bounding box and bin latitude and longitude variables\n* Longitude in (-74.3, -73.7)\n* Latitude in (40.5, 40.9)\n* This does exclude some data\n* We also bin these variables to make it quicker to plot and make pivot tables","53a7c476":"## Lets look at some histograms in time\n* Looks like we started collecting data in 2009 and stopped sometime in 2015\n* The days count up from Monday.  Looks like peak travel is on Friday.\n* Taxis start picking up around 6-7 am, flattening then peaking up at 7 pm and rapidly dropping after 11 pm.","7390c0be":"## Cluster with KMeans on 100000 rows of pickup coordinates","812b3143":"<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/4e\/North_American_taximeter_%28cropped%29.png\">\n","aa19cedf":"## Show Clusters on map\n* We will focus on clusters 12 (Upper Manhatten), 3 (lower Manhatten), 2 (JFK) and 4 (LaGuardia) in the coming plots.","40f73763":"## Longitude and Latitude Histograms after bounding box","11feb033":"## Train test split\n* We also drop binned columns that were just for plotting heatmaps and datetime column since we've expanded it\n* We keep clusters, it may allow us to do less deep trees. Have to one hot encode to convert from categorical to something useable by MLA\n* Drop passenger count because it did not seem to have affect in small area we looked","32e3a4ae":"## Boxplot Fare from Upper to Lower Manhatten vs year (outliers not shown)\n* Distance and duration is constrained as described\n* Again we see a change in fare happened sometime end of 2012..\n* We will look at fare vs hour applying additional that the year is earlier than 2013 to avoid the fare change.","e5efe1f0":"## Imports","eb3ef72a":"## Read Training Data","291a664c":"## Some histograms","8a86722a":"## LightGBM (Gradient boosted decision trees)\n* Adapted from https:\/\/github.com\/susanli2016\/Machine-Learning-with-Python\/blob\/master\/NYC%20taxi%20fare.ipynb","c068c318":"## Create time columns (year, month, day, day of week, hour of day etc..)","e31aaf5d":"## Boxplot Fare from Upper to lower Manhatten vs hour  (outliers not shown)\n* Constraints as described above\n* Looks like there is some dependence on time of day.  We will use this to control further.","fdb98501":"## Boxplot Fare from upper to lower Manhatten vs Day of Week (outliers not shown)\n* Using constraints from previous plot and requiring travel during \"daylight\" hours \n* Only slight dependence on day of week.\n* We are running low on data after all these constraints!","27d2b241":"## Helper Functions","1514b13b":"## Density Heatmap Fare vs Distance\n* Plot shows number of trips in a given distance\/fare range\n* Max visible density per bin is 20000 to conserve colormap. I really need to log plot this..\n* We have a pretty linear trend here with an intercept of maybe 3-5 dollars.\n* What are those artifacts around 50 dollars?  Flat rates?","9b99cf74":"## Keras Sequential Neural Network\n* Adapted from the same as above.\n* Did not get a chance to run this.","1921faa6":"## Pickup\/Dropoff Heatmaps\n* Each bin shows the number of pickups\/dropoffs from that area in our training data\n* Max counts per bin = 5000 to condense color map, log plot would be ideal but I didn't have a great solution\n","214e2ecc":"## Boxplot Fare from JFK to lower Manhatten vs year (outliers not shown)\n* This looks like an explanation for the striping in the fare vs distance plot.\n* The flat rate changed sometime in 2012.\n* So year is definitely of some use to a machine learning algorithm.","08d7c739":"# Why Clustering\nDoing clustering not to help with prediction, just as a plotting aid.  We can say what do the fares look like from cluster 1 to cluster 20 etc.","1b42aa32":"## Apply clustering to label pickup and dropoff clusters","65b16693":"## Distance and constrained duration from Upper to Lower Manhatten\n* We will constrain the following plots to: distance in (7km, 9km) and duration in (450s, 650s)"}}