{"cell_type":{"31dfd684":"code","2979821f":"code","5d24c3d9":"code","95d4c27d":"code","6d740a32":"code","2afabcb1":"code","5ad30fac":"code","b9a28854":"code","7cdb6114":"code","4f081d8c":"code","0fa9f484":"markdown","b5564a84":"markdown","e8886e7a":"markdown","95800385":"markdown","2e8e79c4":"markdown","193d28ee":"markdown"},"source":{"31dfd684":"# Importing neccessary packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# Ignore the warning\nimport warnings\nwarnings.filterwarnings('ignore')","2979821f":"# data path\ndata_path = Path(r\"..\/input\/animals10\/raw-img\")\n\n# image size\nIMG_SIZE = (256, 256)","5d24c3d9":"datagen = ImageDataGenerator(rotation_range=45,\n                                       shear_range=0.2,\n                                       zoom_range=0.2,\n                                       horizontal_flip=True,\n                                       vertical_flip=True,\n                                       rescale=1\/255.0,\n                                       validation_split=0.2)\n\n# training data\ntrain_data = datagen.flow_from_directory(data_path, target_size=(IMG_SIZE), color_mode=\"rgb\",\n                                        batch_size=250, shuffle=True, subset=\"training\",\n                                        class_mode=\"categorical\")\n\n# testing data\ntest_data = datagen.flow_from_directory(data_path, target_size=(IMG_SIZE), color_mode=\"rgb\",\n                                        batch_size=100, shuffle=True, subset=\"validation\",\n\n                                        class_mode=\"categorical\")","95d4c27d":"# labels\nlabels = {'cane': 'dog', \n          'cavallo': 'horse', \n          'elefante': 'elephant', \n          'farfalla': 'butterfly', \n          'gallina': 'chicken', \n          'gatto': 'cat', \n          'mucca': 'cow', \n          'pecora': 'sheep', \n          'ragno': 'spider', \n          'scoiattolo': 'squirrel'}\n\n# print training and testing classes\nprint(train_data.class_indices)\nprint(test_data.class_indices)","6d740a32":"# initializing the model\nmodel = tf.keras.models.Sequential()\n\n\n# Adding 1st Conv2D Filters layers\nmodel.add(Conv2D(32, (5, 5), (1,1), activation=\"relu\",\n                 kernel_initializer='he_uniform',\n                  input_shape =(256, 256, 3)))\n\n# Adding 2nd Conv2D Filters layers\nmodel.add(Conv2D(64, (5, 5), (1,1), activation=\"relu\",\n                 kernel_initializer='he_uniform'))\n\n# Adding pooling layers\nmodel.add(MaxPooling2D((2,2)))\n\n\n\n# Adding 1st Conv2D Filters layers\nmodel.add(Conv2D(32, (5, 5), (1,1), activation=\"relu\",\n                 kernel_initializer='he_uniform'))\n\n# Adding 2nd Conv2D Filters layers\nmodel.add(Conv2D(64, (5, 5), (1,1), activation=\"relu\",\n                 kernel_initializer='he_uniform'))\n\n# Adding pooling layers\nmodel.add(MaxPooling2D((2,2)))\n\n\n\n# Adding 1st Conv2D Filters layers\nmodel.add(Conv2D(32, (5, 5), (1,1), activation=\"relu\",\n                 kernel_initializer='he_uniform'))\n\n# Adding 2nd Conv2D Filters layers\nmodel.add(Conv2D(64, (5, 5), (1,1), activation=\"relu\",\n                 kernel_initializer='he_uniform'))\n\n# Adding 3rd Conv2D Filters layers\nmodel.add(Conv2D(128, (5, 5), (1,1), activation=\"relu\",\n                 kernel_initializer='he_uniform'))\n\n# Adding pooling layers\nmodel.add(MaxPooling2D((2,2)))\n\n\n\n# Adding 1st Conv2D Filters layers\nmodel.add(Conv2D(32, (5, 5), (1,1), activation=\"relu\",\n                 kernel_initializer='he_uniform'))\n\n# Adding 2nd Conv2D Filters layers\nmodel.add(Conv2D(64, (3, 3), (1,1), activation=\"relu\",\n                 kernel_initializer='he_uniform'))\n\n# Adding 4th Conv2D Filters layers\nmodel.add(Conv2D(128, (3, 3), (1,1), activation=\"relu\",\n                 kernel_initializer='he_uniform'))\n\n# Adding pooling layers\nmodel.add(MaxPooling2D((2,2)))\n\n\n\n# Adding Flatten layer to our model\nmodel.add(Flatten())\n\n\n\n# Adding 1st Dense layers\nmodel.add(Dense(64, activation=\"relu\", kernel_initializer=\"he_uniform\"))\n\n# Adding 2nd Dense layers\nmodel.add(Dense(128, activation=\"relu\", kernel_initializer=\"he_uniform\"))\n\n# Adding 3rd Dense layers\nmodel.add(Dense(256, activation=\"relu\", kernel_initializer=\"he_uniform\"))\n\n# Adding 4th Dense layers\nmodel.add(Dense(512, activation=\"relu\", kernel_initializer=\"he_uniform\"))\n\n\n\n# Adding the output layers\nmodel.add(Dense(10, activation=\"softmax\", kernel_initializer=\"glorot_uniform\"))\n\n\n\n# Finaly compile the model...\nmodel.compile(optimizer=tf.keras.optimizers.Adam(0.001),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])","2afabcb1":"model.summary()","5ad30fac":"Model = model.fit(train_data, validation_data=(test_data), epochs=70)","b9a28854":"# accuracy of our model\nplt.figure(figsize=(12, 6))\nplt.plot(Model.history[\"accuracy\"])\nplt.plot(Model.history[\"val_accuracy\"])\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"ACCURACY OF MODEL\")\nplt.legend(['training_accuracy', 'validation_accuracy'])\nplt.show()","7cdb6114":"# loss of our model\nplt.figure(figsize=(12, 6))\nplt.plot(Model.history[\"loss\"])\nplt.plot(Model.history[\"val_loss\"])\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.title(\"LOSS OF MODEL\")\nplt.legend(['training_loss', 'validation_loss'])\nplt.show()","4f081d8c":"model.save('IMG_CLASSIFY_CNN.h5')","0fa9f484":"### **SUMMARY OF OUR MODEL:**","b5564a84":"### **SAVE THE MODEL:**","e8886e7a":"### **GENERATE TRAIN & TEST DATA:**","95800385":"### **ACCURACY & LOSS:**","2e8e79c4":"## **IMAGE RECOMMENDATION SYSTEM:**","193d28ee":"### **MODEL BUILDING:**"}}