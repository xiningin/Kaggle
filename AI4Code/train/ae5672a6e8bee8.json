{"cell_type":{"10628c04":"code","cf586ed7":"code","2e4a177b":"code","125e5153":"code","6c9448fd":"code","9d7e9d88":"code","80652304":"code","b3856ac0":"code","d37bcc5c":"code","7ed0ae2f":"code","2a1562cd":"code","64eff2dd":"code","48a88767":"code","7e8c55f9":"code","aee9281c":"code","4ad15372":"code","5d10500a":"code","3207f8d8":"code","5a6debff":"code","ccef345b":"code","5c670c2b":"code","5594172e":"code","c42a0411":"code","40250b92":"code","f7282410":"code","84f93db7":"code","4fd55caa":"code","dd392bbc":"code","8492cb93":"code","fc15dded":"code","aa33f0f9":"markdown","034fe692":"markdown","ac895fd1":"markdown","4351ea49":"markdown","f2ee3e62":"markdown","a673bc9d":"markdown","be99bf2f":"markdown","d11c40df":"markdown","132cc1f0":"markdown","ee2e7460":"markdown","557992be":"markdown","69ebbbc9":"markdown","bc6623dc":"markdown","678194e9":"markdown"},"source":{"10628c04":"import pandas as pd\nimport numpy as np\nfrom math import pi\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom IPython.display import display, Markdown","cf586ed7":"games_details = pd.read_csv('\/kaggle\/input\/nba-games\/games_details.csv')\nplayers = pd.read_csv('\/kaggle\/input\/nba-games\/players.csv')\nteams = pd.read_csv('\/kaggle\/input\/nba-games\/teams.csv')\nranking = pd.read_csv('\/kaggle\/input\/nba-games\/ranking.csv')\ngames  = pd.read_csv('\/kaggle\/input\/nba-games\/games.csv')","2e4a177b":"def print_missing_values(df):\n    df_null = pd.DataFrame(len(df) - df.notnull().sum(), columns = ['Count'])\n    df_null = df_null[df_null['Count'] > 0].sort_values(by='Count', ascending=False)\n    df_null = df_null\/len(df)*100\n    \n    if len(df_null) == 0:\n        display(Markdown('No missing value.'))\n        return\n    \n    x = df_null.index.values\n    height = [e[0] for e in df_null.values]\n    \n    fig, ax = plt.subplots(figsize=(20, 5))\n    ax.bar(x, height, width=0.8)\n    plt.xticks(x, x, rotation=60)\n    plt.xlabel('Columns')\n    plt.ylabel('Percentage')\n    plt.title('Percentage of missing values in columns')\n    plt.show()\n    \ndef dataset_overview(df, df_name):\n    display(Markdown(f'### {df_name} dataset overview'))\n    display(Markdown(f'dataset shape : {df.shape}'))\n    display(Markdown(f'#### Display 5 first rows'))\n    display(df.head())\n    display(Markdown('*****'))\n    display(Markdown(f'#### Describe dataset'))\n    display(df.describe().T)\n    display(Markdown('*****'))\n    display(Markdown(f'#### Missing values'))\n    print_missing_values(df)","125e5153":"dataset_overview(games_details, 'games_details')","6c9448fd":"dataset_overview(players, 'players')","9d7e9d88":"dataset_overview(teams, 'teams')","80652304":"dataset_overview(ranking, 'ranking')","b3856ac0":"dataset_overview(games, 'games')","d37bcc5c":"def plot_top(df, column, label_col=None, max_plot=5):\n    top_df = df.sort_values(column, ascending=False).head(max_plot)\n    \n    height = top_df[column]\n    x = top_df.index if label_col == None else top_df[label_col]\n    \n    gold, silver, bronze, other = ('#FFA400', '#bdc3c7', '#cd7f32', '#3498db')\n    colors = [gold if i == 0 else silver if i == 1 else bronze if i == 2 else other for i in range(0, len(top_df))]\n    \n    fig, ax = plt.subplots(figsize=(18, 7))\n    ax.bar(x, height, color=colors)\n    plt.xticks(x, x, rotation=60)\n    plt.xlabel(label_col)\n    plt.ylabel(column)\n    plt.title(f'Top {max_plot} of {column}')\n    plt.show()","7ed0ae2f":"players_name = games_details['PLAYER_NAME']\nval_cnt = players_name.value_counts().to_frame().reset_index()\nval_cnt.columns = ['PLAYER_NAME', 'Number of games']","2a1562cd":"plot_top(val_cnt, column='Number of games', label_col='PLAYER_NAME', max_plot=10)","64eff2dd":"def convert_min(x):\n    if pd.isna(x):\n        return 0\n    x = str(x).split(':')\n    if len(x) < 2:\n        return int(x[0])\n    else: \n        return int(x[0])*60+int(x[1])","48a88767":"df_tmp = games_details[['PLAYER_NAME', 'MIN']]\ndf_tmp.loc[:,'MIN'] = df_tmp['MIN'].apply(convert_min)\nagg = df_tmp.groupby('PLAYER_NAME').agg('sum').reset_index()\nagg.columns = ['PLAYER_NAME', 'Number of seconds played']","7e8c55f9":"plot_top(agg, column='Number of seconds played', label_col='PLAYER_NAME', max_plot=10)","aee9281c":"stats_cols = {\n    'FGM':'Field Goals Made',\n    'FGA':'Field Goals Attempted',\n    'FG_PCT':'Field Goal Percentage',\n    'FG3M':'Three Pointers Made',\n    'FG3A':'Three Pointers Attempted',\n    'FG3_PCT':'Three Point Percentage',\n    'FTM':'Free Throws Made',\n    'FTA':'Free Throws Attempted',\n    'FT_PCT':'Free Throw Percentage',\n    'OREB':'Offensive Rebounds',\n    'DREB':'Defensive Rebounds',\n    'REB':'Rebounds',\n    'AST':'Assists',\n    'TO':'Turnovers',\n    'STL':'Steals',\n    'BLK':'Blocked Shots',\n    'PF':'Personal Foul',\n    'PTS':'Points',\n    'PLUS_MINUS':'Plus-Minus'\n}","4ad15372":"def agg_on_columns(df, agg_var, operation=['mean']):\n    return df[agg_var].agg(operation)\n\n# Remove players that didn't played at a game\ndf_tmp = games_details[~games_details['MIN'].isna()]\ndel df_tmp['MIN']\n\n# Define key statistics columns, one for percentage variable and one for other important statistics\nprct_var = ['FG_PCT', 'FG3_PCT', 'FT_PCT']\nother_var = ['REB', 'AST', 'STL', 'PF', 'BLK'] \n\n# Create a specific dataset for LeBron James\nlebron_james_df = df_tmp[df_tmp['PLAYER_NAME'] == 'LeBron James']\n\noverall_agg_prct = agg_on_columns(df=df_tmp, agg_var=prct_var, operation=['mean'])\noverall_agg_other = agg_on_columns(df=df_tmp, agg_var=other_var, operation=['mean'])\n\nlebron_james_stats_prct = agg_on_columns(df=lebron_james_df, agg_var=prct_var, operation=['mean'])\nlebron_james_stats_other = agg_on_columns(df=lebron_james_df, agg_var=other_var, operation=['mean'])","5d10500a":"stats_prct = pd.concat([lebron_james_stats_prct, overall_agg_prct]) \nstats_other = pd.concat([lebron_james_stats_other, overall_agg_other]) \n\nstats_prct.index = ['Lebron James', 'overall stats']\nstats_other.index = ['Lebron James', 'overall stats']","3207f8d8":"def rename_df(df, col_dict):\n    cols = df.columns\n    new_cols = [(col_dict[c] if c in col_dict else c) for c in cols]\n    df.columns = new_cols\n    return df\n\nstats_prct = rename_df(stats_prct, col_dict=stats_cols)\nstats_other = rename_df(stats_other, col_dict=stats_cols)","5a6debff":"def radar_plot(ax, df, max_val=1):\n    # number of variable\n    categories=list(df)\n    N = len(categories)\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='black', size=12)\n\n    # Draw ylabels\n    ax.set_rlabel_position(0)\n    yticks = [max_val*i\/4 for i in range(1,4)]\n    plt.yticks(yticks, [str(e) for e in yticks], color=\"grey\", size=10)\n    plt.ylim(0,max_val)\n\n    # We are going to plot the first line of the data frame.\n    # But we need to repeat the first value to close the circular graph:\n    colors = ['b','r','g']\n    for i in range(len(df)):\n        values = df.values[i].flatten().tolist()\n        values += values[:1]\n        color = colors[i]\n\n        # Plot data\n        ax.plot(angles, values, linewidth=1, linestyle='solid', color=color, label=df.index[i])\n\n        # Fill area\n        ax.fill(angles, values, color, alpha=0.1)\n     \n    # Add legend\n    plt.legend(loc=0, bbox_to_anchor=(0.1, 0.1), prop={'size': 13})\n    ","ccef345b":"display(Markdown('#### Stats comparison between Lebron James and overall statistics'))\nfig, ax = plt.subplots(figsize=(18, 9))\n\nax = plt.subplot(121, polar=True)\nax.set_title('Percentage statistics')\nradar_plot(ax=ax, df=stats_prct, max_val=1)\n\nax = plt.subplot(122, polar=True)\nax.set_title('Others statistics')\nradar_plot(ax=ax, df=stats_other, max_val=10)\n\nplt.show()","5c670c2b":"def get_players_stats(player_one, player_two):\n    # Remove players that didn't played at a game\n    df_tmp = games_details[~games_details['MIN'].isna()]\n    del df_tmp['MIN']\n\n    # Define key statistics columns, one for percentage variable and one for other important statistics\n    prct_var = ['FG_PCT', 'FG3_PCT', 'FT_PCT']\n    other_var = ['REB', 'AST', 'STL', 'PF', 'BLK'] \n\n    # Create a specific dataset for LeBron James\n    player_one_df = df_tmp[df_tmp['PLAYER_NAME'] == player_one]\n    player_two_df = df_tmp[df_tmp['PLAYER_NAME'] == player_two]\n\n    player_one_agg_prct = agg_on_columns(df=player_one_df, agg_var=prct_var, operation=['mean'])\n    player_one_agg_other = agg_on_columns(df=player_one_df, agg_var=other_var, operation=['mean'])\n\n    player_two_agg_prct = agg_on_columns(df=player_two_df, agg_var=prct_var, operation=['mean'])\n    player_two_agg_other = agg_on_columns(df=player_two_df, agg_var=other_var, operation=['mean'])\n    \n    stats_prct = pd.concat([player_one_agg_prct, player_two_agg_prct]) \n    stats_other = pd.concat([player_one_agg_other, player_two_agg_other]) \n\n    stats_prct.index = [player_one, player_two]\n    stats_other.index = [player_one, player_two]\n    \n    stats_prct = rename_df(stats_prct, col_dict=stats_cols)\n    stats_other = rename_df(stats_other, col_dict=stats_cols)\n    \n    return stats_prct, stats_other\n\ndef show_player_stats_comparison(stats_prct, stats_other):\n    fig, ax = plt.subplots(figsize=(18, 9))\n\n    ax = plt.subplot(121, polar=True)\n    ax.set_title('Percentage statistics')\n    radar_plot(ax=ax, df=stats_prct, max_val=1)\n\n    ax = plt.subplot(122, polar=True)\n    ax.set_title('Others statistics')\n    radar_plot(ax=ax, df=stats_other, max_val=10)\n\n    plt.show()","5594172e":"player_one = 'Stephen Curry'\nplayer_two = 'James Harden'\n# Function code just hide above because it's a repeat from previous part\nstats_prct, stats_other = get_players_stats(player_one=player_one, player_two=player_two)","c42a0411":"display(Markdown(f'#### Stats comparison between {player_one} and {player_two}'))\nshow_player_stats_comparison(stats_prct, stats_other)","40250b92":"winning_teams = np.where(games['HOME_TEAM_WINS'] == 1, games['HOME_TEAM_ID'], games['VISITOR_TEAM_ID'])\nwinning_teams = pd.DataFrame(winning_teams, columns=['TEAM_ID'])\nwinning_teams = winning_teams.merge(teams[['TEAM_ID', 'NICKNAME']], on='TEAM_ID')['NICKNAME'].value_counts().to_frame().reset_index()\nwinning_teams.columns = ['TEAM NAME', 'Number of wins']","f7282410":"plot_top(winning_teams, column='Number of wins', label_col='TEAM NAME', max_plot=10)","84f93db7":"bryant_games = games_details[games_details['PLAYER_NAME'] == 'Kobe Bryant']","4fd55caa":"display(Markdown(f'He played **{len(bryant_games)}** games !'))","dd392bbc":"player_one = 'Kobe Bryant'\nplayer_two = 'LeBron James'\n# Function code just hide above because it's a repeat from previous part\nstats_prct, stats_other = get_players_stats(player_one=player_one, player_two=player_two)","8492cb93":"display(Markdown(f'#### Stats comparison between {player_one} and {player_two}'))\nshow_player_stats_comparison(stats_prct, stats_other)","fc15dded":"teams_id = bryant_games['TEAM_ID'].unique()\nbryant_teams = teams[teams['TEAM_ID'].isin(teams_id)]['NICKNAME'].values.tolist()\ndisplay(Markdown(f\"He played on the following teams : **{' '.join(bryant_teams)}**.\"))","aa33f0f9":"# Load data","034fe692":"# Quick datasets overview ","ac895fd1":"As we can see Lebron James is above average ! ;)","4351ea49":"# NBA games data : EDA \ud83c\udfc0\n\nHello everyone !\n\nI just added this dataset in Kaggle, so I think it can be good to have a quick overview about it.\n\nWant I want to do here is the next steps :\n1. Load the data\n2. Quick look on the datasets\n3. Advanced EDA : anwser some questions with data visualisation !\n\nSo enjoy this notebook !\n\n# Load packages","f2ee3e62":"# Which team has the most winning since 2004 season ?","a673bc9d":"And the answer is yes ! LeBron James is truly a living legend ! ;) \n\n# What are the Lebron James average stats compare to overall stats ?","be99bf2f":"## Where did he played ?","d11c40df":"Thanks for reading,\n*Nathan*.","132cc1f0":"# Kobe Bryant NBA story\n\n## How many games he played ?","ee2e7460":"# Advanced EDA : let's answer some questions\n\nTo start I want to know who is the player with the most games played and for some keys statistics who are the best players ?\n\n# Who are the players with most games played ?","557992be":"# Is most game played means most time played ?","69ebbbc9":"This visualisation is inspired by the following (main code is from the source code, I just adapt it for my purpose) [radar graph source code](https:\/\/python-graph-gallery.com\/391-radar-chart-with-several-individuals\/).","bc6623dc":"# Compare players statistics (example: Curry vs Harden)","678194e9":"## What's his overall statistics and is it better than LeBron James ?"}}