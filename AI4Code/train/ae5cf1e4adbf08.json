{"cell_type":{"f63da3cf":"code","cc0789bf":"code","ff4c01dd":"code","4b0a876e":"code","8cd354ff":"code","02b19da0":"code","964fff58":"code","4a34e9a2":"code","211c2eff":"code","ff959040":"code","11e433d3":"code","c4aa66bc":"code","b8384b5a":"code","ffae1267":"code","d10fc5d7":"code","86ef1672":"code","455a372d":"code","0954c27f":"code","300b3d25":"code","98f6eb15":"code","35980067":"code","5ad7e84d":"code","bfdb0d18":"code","cecb9216":"code","395cf4a7":"code","d000c619":"code","54218511":"code","6e7d857c":"code","fcfc148e":"code","41bb4045":"code","b71dcf57":"code","35737dd5":"code","d936aa79":"code","39c1a343":"code","0add592f":"code","50e58b3c":"code","4a7097f6":"code","6eb9a2fe":"code","e46b0f50":"code","1dc3ddb3":"code","7cd42ad7":"code","441f2a5c":"code","8eec1393":"code","09c331ba":"code","89a319c9":"code","511bf169":"code","fd64ff9c":"code","68235bd2":"code","76aaa545":"code","8aa7b955":"code","c37d0cf8":"code","ac5c088a":"code","c75deadf":"code","4bdd4690":"code","ec31e0e6":"code","4e160699":"code","5393c6f2":"code","feaa5714":"code","8f02a30e":"code","96dbf5fc":"code","44788ad8":"code","807cca78":"code","16ae2b08":"code","0e5d6fd4":"code","b84856c8":"code","3ceea834":"code","e9bfa0a9":"code","fa971a2b":"code","983f12a9":"code","411708f6":"code","98098224":"code","0bbad505":"code","9ebb0ada":"code","a8244706":"code","21d0866a":"code","bdd2e7c5":"code","d1d17278":"code","2362bb47":"code","5f80468e":"code","58a1e4f2":"code","c1e84e2d":"code","75d8ad56":"code","3f77f1bf":"code","4f447f2f":"code","f6ad75f1":"code","3d5a037d":"code","3e6bb88d":"code","83a98d27":"code","5c845576":"code","8a9aba4c":"code","b26ab172":"code","5679f0e4":"code","03143d4e":"code","56e2df57":"code","35214519":"code","4710ceec":"code","57f367c4":"code","3d564f32":"code","da30c250":"code","5a71479b":"code","477a843a":"code","5302f621":"code","30f7c79f":"code","a232703f":"code","83ef6387":"code","9897aed0":"code","c9edf64d":"code","962daefe":"code","ca3b2d59":"code","33cc53ac":"code","dc3943cc":"code","c6c6fd05":"code","f21ef38a":"code","f33b052a":"code","af0ae444":"code","6c31e27e":"code","e491d4f4":"code","217e4874":"markdown","903fc2a6":"markdown","46506d0f":"markdown","08274c98":"markdown","f284667a":"markdown","6af96652":"markdown","bb470477":"markdown","86153f08":"markdown","70038dd2":"markdown","dd5cf735":"markdown","90ceaf65":"markdown","54df0a84":"markdown","fc07da96":"markdown","c1313709":"markdown","d56ce844":"markdown","227af626":"markdown","74b6d38e":"markdown","982eef9d":"markdown","b7335d59":"markdown","0a031cef":"markdown","48cdab28":"markdown","4ffd3964":"markdown","82f056d0":"markdown","ff1a278f":"markdown","3bcd114e":"markdown","13a28f22":"markdown","66b0af43":"markdown","c05a6754":"markdown","2a87aaf2":"markdown","2d288b71":"markdown","554eb573":"markdown","d586a4d4":"markdown","69623cbe":"markdown","e74b9aac":"markdown","520975eb":"markdown","550866bd":"markdown","3118350e":"markdown","2c25ccdd":"markdown","716b3e5e":"markdown","f28dbf7c":"markdown","3023ec58":"markdown","90a9b88d":"markdown","79ecc4a6":"markdown","64b362d8":"markdown","eabec666":"markdown","bdf158cf":"markdown","a232ff5c":"markdown","158905fd":"markdown","b3e5488f":"markdown","bc174b48":"markdown","8b3da02c":"markdown","65de1c08":"markdown","91a3e7c3":"markdown","f2b4daa9":"markdown","878fca30":"markdown","b8511856":"markdown","e9e856a6":"markdown","c09c349d":"markdown","9cf95734":"markdown","727bc2fb":"markdown","9d9562b3":"markdown","c1908fdd":"markdown","65418f48":"markdown","34a8b772":"markdown","a0573ec7":"markdown","e98cfdbb":"markdown","86f1800e":"markdown","bcb587f6":"markdown","bc8a7ac4":"markdown","30d80278":"markdown","2e3bc67d":"markdown","f47cad61":"markdown","b4a17376":"markdown","60bd441a":"markdown","c7264d8b":"markdown","0b314760":"markdown","943a7e65":"markdown","e2070052":"markdown","0d962f25":"markdown","620b377f":"markdown","63a5cfda":"markdown","e5ad9a2d":"markdown","5e5598e8":"markdown","65caf4c0":"markdown","debcfeb6":"markdown","c31bb49c":"markdown","b28f1653":"markdown","415ea15c":"markdown","0b055a53":"markdown","dd0c56e6":"markdown","9e7612ff":"markdown","6b932798":"markdown","bf049b48":"markdown","adb7aa36":"markdown","4bb4f65a":"markdown","192e728b":"markdown","77392d9a":"markdown","208b64c9":"markdown","4a630638":"markdown","aaa38c4d":"markdown","47cbbc10":"markdown","0815bc01":"markdown","beae9948":"markdown","afedc7ae":"markdown","969b3415":"markdown","3f7c5fa9":"markdown","27e1241d":"markdown","3ff3eeb7":"markdown","221f9c06":"markdown","2ceab4ec":"markdown","93c69ead":"markdown","32d1c93c":"markdown","132b23c9":"markdown","01c8311a":"markdown","4385d5f3":"markdown","52a0f6bd":"markdown","b54764d4":"markdown","e60bedeb":"markdown","2c84cebb":"markdown","3a8dae74":"markdown","d045faef":"markdown","38401f9a":"markdown","dfafb5df":"markdown","1194a536":"markdown","e414501f":"markdown","1a067bc3":"markdown","dfc01154":"markdown","39452a8f":"markdown","12f696fa":"markdown","c581e99a":"markdown","8654e935":"markdown","2f1397b0":"markdown","30fa3c71":"markdown","c2e217c3":"markdown","8d8c9b58":"markdown","91bef093":"markdown","aa257201":"markdown","71251f2a":"markdown","26f62abb":"markdown","24abf1bc":"markdown","92bb9481":"markdown","afaf0794":"markdown","b3a2b6bd":"markdown","c9f779aa":"markdown","13cd2eea":"markdown","638ce507":"markdown","970a3e38":"markdown","437aa558":"markdown","aeafcc43":"markdown","46c061ba":"markdown","07077486":"markdown","a9ab36c2":"markdown","0751d7e4":"markdown","be0cd1f1":"markdown","a84d970e":"markdown","45d22a99":"markdown","e28131c0":"markdown","c5cc3591":"markdown","66ef0281":"markdown","5cedba56":"markdown","916e6467":"markdown","54a8e149":"markdown","3b21ddf4":"markdown","3c97b09c":"markdown","ad40f6b4":"markdown","daf512d5":"markdown","88e64fbb":"markdown","0172a463":"markdown","75a26bd9":"markdown","3cae9703":"markdown","4a20f5bc":"markdown","ad820c25":"markdown","b7e5b76a":"markdown","5edc7a6b":"markdown","ee83eb2b":"markdown","57ce73c1":"markdown","a000f114":"markdown","f3664403":"markdown","3c046715":"markdown","ec571d37":"markdown","90acfe8e":"markdown","64733bb8":"markdown","fb712047":"markdown","1289a4ea":"markdown","1a234421":"markdown","643fdd11":"markdown","efaae0a9":"markdown","c811df1c":"markdown"},"source":{"f63da3cf":"# this will help in making the Python code more structured automatically (good coding practice)\n#!pip install black\n\n#%load_ext nb_black\n\n# library to suppress warnings or deprecation notes\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\n# libraries to help with reading and manipulating data\nimport pandas as pd\nimport numpy as np\n\n# library to split data\nfrom sklearn.model_selection import train_test_split\n\n# libaries to help with data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# remove the limit for the number of displayed columns\npd.set_option(\"display.max_columns\", None)\n\n# set the limit for the number of displayed rows\npd.set_option(\"display.max_rows\", 200)\n\nfrom sklearn import metrics\n\n# libraries to build Linear Regression Model\nfrom sklearn.linear_model import LogisticRegression\n\n# libraries to build decision tree classifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree\n\n# libraries to build ensemble models\nfrom sklearn.ensemble import (\n    BaggingClassifier,\n    RandomForestClassifier,\n    AdaBoostClassifier, \n    GradientBoostingClassifier,\n    StackingClassifier,\n)\n\n# libraries to build xgboost model\nfrom xgboost import XGBClassifier\n\n# library for stacking classifier\nfrom sklearn.ensemble import StackingClassifier\n\n# to tune different models\nfrom sklearn.model_selection import GridSearchCV, train_test_split\n\n# to get diferent metric scores\nfrom sklearn.metrics import (\n    f1_score,\n    accuracy_score,\n    recall_score,\n    precision_score,\n    confusion_matrix,\n    plot_confusion_matrix,\n    make_scorer,\n    roc_auc_score,\n    precision_recall_curve,\n    roc_curve,\n    classification_report,\n)\n ","cc0789bf":"# histogram and boxplot for the feature\ndef histogram_boxplot(data, feature, figsize=(12, 7), kde=False, bins=None):\n    \"\"\"\n    Boxplot and histogram combined\n\n    data: dataframe\n    feature: dataframe column\n    figsize: size of figure (default (12,7))\n    kde: whether to the show density curve (default False)\n    bins: number of bins for histogram (default None)\n    \"\"\"\n    f2, (ax_box2, ax_hist2) = plt.subplots(\n        nrows=2,  # Number of rows of the subplot grid= 2\n        sharex=True,  # x-axis will be shared among all subplots\n        gridspec_kw={\"height_ratios\": (0.25, 0.75)},\n        figsize=figsize,\n    )  # creating the 2 subplots\n    sns.boxplot(\n        data=data, x=feature, ax=ax_box2, showmeans=True, color=\"orange\"\n    )  # boxplot will be created and a star will indicate the mean value of the column\n    sns.histplot(\n        data=data, x=feature, kde=kde, ax=ax_hist2, bins=bins, palette=\"Winter\"\n    ) if bins else sns.histplot(\n        data=data, x=feature, kde=kde, ax=ax_hist2\n    )  # For histogram\n    ax_hist2.axvline(\n        data[feature].mean(), color=\"green\", linestyle=\"--\"\n    )  # Add mean to the histogram\n    ax_hist2.axvline(data[feature].median(), color=\"blue\", linestyle=\"-\")\n    plt.show()  # show the plot\n\n# labeled_barplot\ndef labeled_barplot(data, feature, perc=False, v_ticks=True, n=None):\n    \"\"\"\n    Barplot with percentage at the top\n\n    data: dataframe\n    feature: dataframe column\n    perc: whether to display percentages instead of count (default is False)\n    n: displays the top n category levels (default is None, i.e., display all levels)\n    \"\"\"\n\n    total = len(data[feature])  # length of the column\n    count = data[feature].nunique()\n    if n is None:\n        plt.figure(figsize=(count + 1, 5))\n    else:\n        plt.figure(figsize=(n + 1, 5))\n\n    if v_ticks is True:\n        plt.xticks(rotation=90)\n        \n    ax = sns.countplot(\n        data=data,\n        x=feature,\n        palette=\"Paired\",\n        order=data[feature].value_counts().index[:n].sort_values(),\n    )\n\n    for p in ax.patches:\n        if perc == True:\n            label = \"{:.1f}%\".format(\n                100 * p.get_height() \/ total\n            )  # percentage of each class of the category\n        else:\n            label = p.get_height()  # count of each level of the category\n\n        x = p.get_x() + p.get_width() \/ 2  # width of the plot\n        y = p.get_height()  # height of the plot\n\n        ax.annotate(\n            label,\n            (x, y),\n            ha=\"center\",\n            va=\"center\",\n            size=12,\n            xytext=(0, 5),\n            textcoords=\"offset points\",\n        )  # annotate the percentage\n    plt.show()  # show the plot\n\n# function to plot stacked bar chart\ndef stacked_barplot(data, predictor, target):\n    \"\"\"\n    Print the category counts and plot a stacked bar chart\n\n    data: dataframe\n    predictor: independent variable\n    target: target variable\n    \"\"\"\n    count = data[predictor].nunique()\n    sorter = data[target].value_counts().index[-1]\n    tab1 = pd.crosstab(data[predictor], data[target], margins=True).sort_values(\n        by=sorter, ascending=False\n    )\n    print(tab1)\n    print(\"-\" * 120)\n    tab = pd.crosstab(data[predictor], data[target], normalize=\"index\").sort_values(\n        by=sorter, ascending=False\n    )\n    tab.plot(kind=\"bar\", stacked=True, figsize=(count + 5, 6))\n    plt.legend(\n        loc=\"lower left\", frameon=False,\n    )\n    plt.legend(loc=\"upper left\", bbox_to_anchor=(1, 1))\n    plt.show()\n    \n# to plot confusion matrix\ndef draw_matrix(model, predictors, target):\n    \"\"\"\n    To plot the confusion_matrix with percentages\n\n    model: classifier\n    predictors: independent variables\n    target: dependent variable\n    \"\"\"\n    y_pred = model.predict(predictors)\n    cm = confusion_matrix(target, y_pred)\n    labels = np.asarray(\n        [\n            [\"{0:0.0f}\".format(item) + \"\\n{0:.2%}\".format(item \/ cm.flatten().sum())]\n            for item in cm.flatten()\n        ]\n    ).reshape(2, 2)\n\n    plt.figure(figsize=(6, 4))\n    sns.heatmap(cm, annot=labels, fmt=\"\")\n    plt.ylabel(\"True label\")\n    plt.xlabel(\"Predicted label\")\n    plt.show()\n\n# calculate different metric scores of the model - Accuracy, Recall, F1 and Precision\ndef get_metrics_score(model,flag=True):\n    \"\"\"\n    model : classifier to predict values of X\n\n    \"\"\"\n    # defining an empty list to store train and test results\n    score_list=[] \n    \n    # predicting on train and tests\n    pred_train = model.predict(X_train)\n    pred_test = model.predict(X_test)\n    \n    # accuracy of the model\n    train_acc = model.score(X_train,y_train)\n    test_acc = model.score(X_test,y_test)\n    \n    # recall of the model\n    train_recall = metrics.recall_score(y_train,pred_train)\n    test_recall = metrics.recall_score(y_test,pred_test)\n    \n    # precision of the model\n    train_precision = metrics.precision_score(y_train,pred_train)\n    test_precision = metrics.precision_score(y_test,pred_test)\n    \n    # f1_score of the model\n    train_f1 = metrics.f1_score(y_train,pred_train)\n    test_f1 = metrics.f1_score(y_test,pred_test)\n\n    # populate the score_list \n    score_list.extend((train_acc,test_acc,train_recall,test_recall,train_precision,test_precision,train_f1,test_f1))\n        \n    # If the flag is set to True then only the following print statements will be dispayed. The default value is set to True.\n    if flag == True: \n        print(\"Accuracy on training set : \",train_acc)\n        print(\"Accuracy on test set : \",test_acc)\n        print(\"Recall on training set : \",train_recall)\n        print(\"Recall on test set : \",test_recall)\n        print(\"Precision on training set : \",train_precision)\n        print(\"Precision on test set : \",test_precision)\n        print(\"F1 on training set : \",train_f1)\n        print(\"F1 on test set : \",test_f1)\n    return score_list # returning the list with train and test scores\n    ","ff4c01dd":"# load the file using excel. There are two sheets in the excel. Load the Tourism sheet\ndf = pd.read_csv(\"..\/input\/d\/riteshvsharma\/tourism\/Tourism.csv\")\n\n# back up data to preserve the initial version for reference\ndf_back = df.copy()","4b0a876e":"# print the data set information as number of rows and columns\nprint(f\"There are {df.shape[0]} rows and {df.shape[1]} columns.\")  # f-string","8cd354ff":"# check the dataset information\ndf.info()","02b19da0":"# setting the random seed via np.random.seed to get the same random results every time\nnp.random.seed(1)\n\n# also look at random 10 sample rows\ndf.sample(n=10)","964fff58":"# creating list of category columns that are not object type\ncat_cols = [\"CityTier\",\"ProdTaken\",\"NumberOfPersonVisiting\",\"NumberOfChildrenVisiting\",\"PreferredPropertyStar\",\"Passport\",\"PitchSatisfactionScore\",\"OwnCar\"]\ndf[cat_cols] = df[cat_cols].astype(\"category\")\n\n# selecting all object datatypes and converting to category\ncols = df.select_dtypes([\"object\"])\nfor i in cols.columns:\n    df[i] = df[i].astype(\"category\")\n\n# check the dataset for updated datatypes\ndf.info()","4a34e9a2":"# check number of null records\ndf.isna().sum()","211c2eff":"# replace the missing values with median income w.r.t the customer\"s designation\ndf[\"MonthlyIncome\"] = df.groupby([\"Designation\"])[\"MonthlyIncome\"].transform(lambda x: x.fillna(x.median()))\ndf[\"Age\"] = df.groupby([\"Designation\"])[\"Age\"].transform(lambda x: x.fillna(x.median()))","ff959040":"# create list of numerical columns\nmissing_numerical = df.select_dtypes(include=np.number).columns.tolist()\n\n# remove Age and MonthlyIncome as we have already treated these columns\nmissing_numerical.remove(\"MonthlyIncome\")\nmissing_numerical.remove(\"Age\")\n\n# function for replacing with the Median value of the attributes\nmedianFiller = lambda x: x.fillna(x.median()) \n\n# apply the function\ndf[missing_numerical] = df[missing_numerical].apply(medianFiller,axis=0)","11e433d3":"#create a list of categorical columns\ncat_cols =  df.select_dtypes([\"category\"])\n\n#get the valuecounts\nfor i in cat_cols.columns:\n    print(cat_cols[i].value_counts())\n    print(\"-\"*50)\n    print(\"\\n\")","c4aa66bc":"# treating missing values in remaining categorical variables\ndf[\"TypeofContact\"] = df[\"TypeofContact\"].fillna(\"Self Enquiry\")\ndf[\"NumberOfChildrenVisiting\"] = df[\"NumberOfChildrenVisiting\"].fillna(1.0)\ndf[\"PreferredPropertyStar\"] = df[\"PreferredPropertyStar\"].fillna(3.0)","b8384b5a":"# treating error\ndf.Gender = df.Gender.replace(\"Fe Male\",\"Female\")\n\n# verify the update\ndf.Gender.value_counts()","ffae1267":"# count of null records\ndf.isna().sum()","d10fc5d7":"# summary of numerical columns\ndf.describe().T","86ef1672":"# summary of categorical columns\ndf.describe(include=\"category\").T","455a372d":"# use the defined function histogram_boxplot to plot the graphs\nhistogram_boxplot(df,\"CustomerID\")   ","0954c27f":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"ProdTaken\", True, False) ","300b3d25":"# use the defined function histogram_boxplot to plot the graphs\nhistogram_boxplot(df,\"Age\") ","98f6eb15":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"TypeofContact\",True,False) ","35980067":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"CityTier\",True,False) ","5ad7e84d":"# use the defined function histogram_boxplot to plot the graphs\nhistogram_boxplot(df,\"DurationOfPitch\") ","bfdb0d18":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"Occupation\",True, False) ","cecb9216":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"Gender\",True, False) ","395cf4a7":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"NumberOfPersonVisiting\",True, False) ","d000c619":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"NumberOfFollowups\",True, False) ","54218511":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"ProductPitched\",True, False) ","6e7d857c":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"PreferredPropertyStar\",True, False) ","fcfc148e":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"MaritalStatus\",True, False) ","41bb4045":"# use the defined function histogram_boxplot to plot the graphs\nhistogram_boxplot(df,\"NumberOfTrips\") \n\n# use label_barplot function to plot the graph\nlabeled_barplot(df,\"NumberOfTrips\",True, False) ","b71dcf57":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"Passport\",True, False) ","35737dd5":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"PitchSatisfactionScore\",True, False) ","d936aa79":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"OwnCar\",True, False) ","39c1a343":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"NumberOfChildrenVisiting\",True, False) ","0add592f":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"Designation\",True, True) ","50e58b3c":"# use the defined function histogram_boxplot to plot the graphs\nhistogram_boxplot(df,\"MonthlyIncome\") ","4a7097f6":"# for all numerical variables with Personal_Loan draw box plots\nnum_cols = df.select_dtypes(include=np.number).columns.tolist()\n\nplt.figure(figsize=(15,10))\nfor i, variable in enumerate(num_cols):\n                     plt.subplot(3,2,i+1)\n                     sns.boxplot(df[\"ProdTaken\"],df[variable],palette=\"Set1\")\n                     plt.tight_layout()\n                     plt.title(variable)\nplt.show()","6eb9a2fe":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"TypeofContact\", \"ProdTaken\")","e46b0f50":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"CityTier\", \"ProdTaken\")","1dc3ddb3":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"Occupation\", \"ProdTaken\")","7cd42ad7":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"Gender\", \"ProdTaken\")","441f2a5c":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"NumberOfPersonVisiting\", \"ProdTaken\")","8eec1393":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"ProductPitched\", \"ProdTaken\")","09c331ba":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"PreferredPropertyStar\", \"ProdTaken\")","89a319c9":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"MaritalStatus\", \"ProdTaken\")","511bf169":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"Passport\", \"ProdTaken\")","fd64ff9c":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"PitchSatisfactionScore\", \"ProdTaken\")","68235bd2":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"OwnCar\", \"ProdTaken\")","76aaa545":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"NumberOfChildrenVisiting\", \"ProdTaken\")","8aa7b955":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"Designation\", \"ProdTaken\")","c37d0cf8":"# heatmap for correlation\nplt.figure(figsize=(15, 7))\nsns.heatmap(df.corr(), annot=True, vmin=-1, vmax=1, fmt=\".2f\", cmap=\"Spectral\")\nplt.show()","ac5c088a":"# check the outliers before treating\nplt.figure(figsize=(20, 30))\n\nfor i, variable in enumerate(num_cols):\n    plt.subplot(5, 4, i + 1)\n    plt.boxplot(df[variable], whis=1.5)\n    plt.tight_layout()\n    plt.title(variable)\n\nplt.show()","c75deadf":"outlier_num = df.select_dtypes(include=np.number)\n \n# find the 25th percentile and 75th percentile.\nQ1 = df.quantile(0.25)            \nQ3 = df.quantile(0.75)\n\n# Inter Quantile Range (75th percentile - 25th percentile)\nIQR = Q3 - Q1                           \n\n# find lower and upper bounds for all values. All values outside these bounds are outliers\nlower=Q1-1.5*IQR                        \nupper=Q3+1.5*IQR\n\n((outlier_num<lower)|(outlier_num>upper)).sum()\/len(df)*100","4bdd4690":"# split the columns in Dependent and Independent Set\nX= df.drop([\"CustomerID\",\"ProdTaken\",\"PitchSatisfactionScore\",\"ProductPitched\",\"NumberOfFollowups\",\"DurationOfPitch\"],axis=1)\ny= df[\"ProdTaken\"]","ec31e0e6":"# use get_dummies function to convert the categorical columns\nX = pd.get_dummies(X, drop_first=True)","4e160699":"# splitting data into training and test set, use stratify to maintain the original distribution of Dependent variable as of original set\nX_train,X_test, y_train, y_test =train_test_split(X,y, test_size=0.3, random_state=25,stratify=y)\n\n# creating a list of column names\nfeature_names = X_train.columns.to_list()","5393c6f2":"print(\"Original ProdTaken True Values    : {0} ({1:0.2f}%)\".format(len(df.loc[df[\"ProdTaken\"] == 1]), (len(df.loc[df[\"ProdTaken\"] == 1])\/len(df.index)) * 100))\nprint(\"Original ProdTaken False Values   : {0} ({1:0.2f}%)\".format(len(df.loc[df[\"ProdTaken\"] == 0]), (len(df.loc[df[\"ProdTaken\"] == 0])\/len(df.index)) * 100))\nprint(\"\")\nprint(\"Training ProdTaken True Values    : {0} ({1:0.2f}%)\".format(len(y_train[y_train[:] == 1]), (len(y_train[y_train[:] == 1])\/len(y_train)) * 100))\nprint(\"Training ProdTaken False Values   : {0} ({1:0.2f}%)\".format(len(y_train[y_train[:] == 0]), (len(y_train[y_train[:] == 0])\/len(y_train)) * 100))\nprint(\"\")\nprint(\"Test ProdTaken True Values        : {0} ({1:0.2f}%)\".format(len(y_test[y_test[:] == 1]), (len(y_test[y_test[:] == 1])\/len(y_test)) * 100))\nprint(\"Test ProdTaken False Values       : {0} ({1:0.2f}%)\".format(len(y_test[y_test[:] == 0]), (len(y_test[y_test[:] == 0])\/len(y_test)) * 100))","feaa5714":"# DecistionTreeClassifier with gini and class_weight for appropriate importance\ndtc = DecisionTreeClassifier(criterion=\"gini\",class_weight={0:0.15,1:0.85},random_state=1)\n\n# fit the model on training dataset\ndtc.fit(X_train, y_train)","8f02a30e":"# check the scores on Training and Testing Datasets\ndtc_score = get_metrics_score(dtc)","96dbf5fc":"# plot the decision tree\nplt.figure(figsize=(20, 30))\nout = tree.plot_tree(\n    dtc,\n    feature_names=feature_names,\n    filled=True,\n    fontsize=9,\n    node_ids=False,\n    class_names=None,\n)\n# below code will add arrows to the decision tree split if they are missing\nfor o in out:\n    arrow = o.arrow_patch\n    if arrow is not None:\n        arrow.set_edgecolor(\"black\")\n        arrow.set_linewidth(1)\n\nplt.show()","44788ad8":"# use draw_matrix function\ndraw_matrix(dtc, X_test, y_test)","807cca78":"# plot a horizontal bar graph\nimportances = dtc.feature_importances_\nindices = np.argsort(importances)\n\nplt.figure(figsize=(12, 12))\nplt.title(\"Feature Importances\")\nplt.barh(range(len(indices)), importances[indices], color=\"violet\", align=\"center\")\nplt.yticks(range(len(indices)), [feature_names[i] for i in indices])\nplt.xlabel(\"Relative Importance\")\nplt.show()","16ae2b08":"# choose the type of classifier. \ndtc1 = DecisionTreeClassifier(random_state=1,class_weight = {0:.15,1:.85}) #adding classweights \n\n# defining the Hyperparameters\nparameters = {\"max_depth\": np.arange(10,60,10), \n            \"criterion\": [\"gini\",\"entropy\"],\n            \"min_samples_leaf\": [ 2, 5, 7, 10],\n            \"max_leaf_nodes\" : [3, 5, 10,15],}\n\n# type of scoring used to compare parameter combinations\nscorer = metrics.make_scorer(metrics.f1_score)\n\n# run the grid search with the above parameters\ngrid_obj = GridSearchCV(dtc1, parameters, scoring=scorer,cv=5)\ngrid_obj = grid_obj.fit(X_train, y_train)\n\n# set to the best combination of parameters\ndtcht = grid_obj.best_estimator_\n\n# fit the best algorithm to the data. \ndtcht.fit(X_train, y_train)","0e5d6fd4":"# plot the decision tree\nplt.figure(figsize=(20, 30))\nout = tree.plot_tree(\n    dtcht,\n    feature_names=feature_names,\n    filled=True,\n    fontsize=9,\n    node_ids=False,\n    class_names=None,\n)\n# below code will add arrows to the decision tree split if they are missing\nfor o in out:\n    arrow = o.arrow_patch\n    if arrow is not None:\n        arrow.set_edgecolor(\"black\")\n        arrow.set_linewidth(1)\n\nplt.show()","b84856c8":"# check the scores on Training and Testing Datasets\ndtcht_scores = get_metrics_score(dtcht)","3ceea834":"# use draw_matrix function\ndraw_matrix(dtcht, X_test, y_test)","e9bfa0a9":"# plot a horizontal bar graph\nimportances = dtcht.feature_importances_\nindices = np.argsort(importances)\n\nplt.figure(figsize=(12, 12))\nplt.title(\"Feature Importances\")\nplt.barh(range(len(indices)), importances[indices], color=\"violet\", align=\"center\")\nplt.yticks(range(len(indices)), [feature_names[i] for i in indices])\nplt.xlabel(\"Relative Importance\")\nplt.show()","fa971a2b":"# baggingClassifier\nbgc = BaggingClassifier(random_state=1)\n\n# fit the model on training dataset\nbgc.fit(X_train, y_train)","983f12a9":"# check the scores on Training and Testing Datasets\nbgc_score = get_metrics_score(bgc)","411708f6":"# use draw_matrix function\ndraw_matrix(bgc, X_test, y_test)","98098224":"# BaggingClassifier with gini and class_weight for appropriate importance\nbgclr = BaggingClassifier(base_estimator=LogisticRegression(solver=\"liblinear\", random_state=1),random_state=1) \n\n# fit the model on training set\nbgclr.fit(X_train,y_train)","0bbad505":"# check the scores on Training and Testing Datasets\nbgclr_score = get_metrics_score(bgclr)","9ebb0ada":"# use draw_matrix function\ndraw_matrix(bgclr, X_test, y_test)","a8244706":"# BaggingClassifier with gini and class_weight for appropriate importance\nbgcdt = BaggingClassifier(base_estimator=DecisionTreeClassifier(criterion=\"gini\",class_weight={0:0.15,1:0.85},random_state=1),random_state=1)\n\n# fit the model on training set\nbgcdt.fit(X_train,y_train)","21d0866a":"# check the scores on Training and Testing Datasets\nbgcdt_score = get_metrics_score(bgcdt)","bdd2e7c5":"# use draw_matrix function\ndraw_matrix(bgcdt, X_test, y_test)","d1d17278":"# set the parameters\nparameters = {\n              \"n_estimators\":np.arange(10,60,10),\n              \"max_features\": [0.7,0.8,0.9],\n              \"max_samples\": [0.7,0.8,0.9], \n             }\n\n# assigning Bootstrap = True to select features with Replacement\nbgc1 = BaggingClassifier(random_state=1,bootstrap=True)\n\n# type of scoring used to compare parameter combinations\nscorer = metrics.make_scorer(metrics.f1_score)\n\n# run the grid search\ngrid_obj = GridSearchCV(bgc1, parameters, scoring=scorer,cv=5)\ngrid_obj = grid_obj.fit(X_train, y_train)\n\n# set the clf to the best combination of parameters\nbgcht = grid_obj.best_estimator_\n\n# fit the best algorithm to the data.\nbgcht.fit(X_train, y_train)","2362bb47":"# check the scores on Training and Testing Datasets\nbgcht_score = get_metrics_score(bgcht)","5f80468e":"# use draw_matrix function\ndraw_matrix(bgcht, X_test, y_test)","58a1e4f2":"# random forest classifier\nrfc = RandomForestClassifier(random_state=1)\n\n# fit the model on training set\nrfc.fit(X_train,y_train)","c1e84e2d":"# check the scores on Training and Testing Datasets\nrfc_score = get_metrics_score(rfc)","75d8ad56":"# use draw_matrix function\ndraw_matrix(rfc, X_test, y_test)","3f77f1bf":"# plot a horizontal bar graph\nimportances = rfc.feature_importances_\nindices = np.argsort(importances)\n\nplt.figure(figsize=(12, 12))\nplt.title(\"Feature Importances\")\nplt.barh(range(len(indices)), importances[indices], color=\"violet\", align=\"center\")\nplt.yticks(range(len(indices)), [feature_names[i] for i in indices])\nplt.xlabel(\"Relative Importance\")\nplt.show()","4f447f2f":"# random forest classifier \nrfcwt = RandomForestClassifier(class_weight={0:0.15,1:0.85},random_state=1)\n\n# fit the model on training set\nrfcwt.fit(X_train,y_train)","f6ad75f1":"# check the scores on Training and Testing Datasets\nrfcwt_score = get_metrics_score(rfcwt)","3d5a037d":"# use data_matrix function\ndraw_matrix(rfcwt, X_test, y_test)","3e6bb88d":"# plot a horizontal bar graph\nimportances = rfcwt.feature_importances_\nindices = np.argsort(importances)\n\nplt.figure(figsize=(12, 12))\nplt.title(\"Feature Importances\")\nplt.barh(range(len(indices)), importances[indices], color=\"violet\", align=\"center\")\nplt.yticks(range(len(indices)), [feature_names[i] for i in indices])\nplt.xlabel(\"Relative Importance\")\nplt.show()","83a98d27":"# random forest classifier with weights\nrfc1 = RandomForestClassifier(class_weight={0:0.15,1:0.85},random_state=1)\n\n# grid of parameters to choose from\nparameters = {\"n_estimators\": np.arange(110,251,501),\n              \"min_samples_leaf\": np.arange(1,6,1),\n              \"max_features\":[\"log2\",0.7,0.9,\"auto\"],\n              \"max_samples\": np.arange(0.3, 0.7, None),\n             }\n\n# type of scoring used to compare parameter combinations\nscorer = metrics.make_scorer(metrics.f1_score)\n\n# run the grid search\ngrid_obj = GridSearchCV(rfc1, parameters, scoring=scorer,cv=5)\ngrid_obj = grid_obj.fit(X_train, y_train)\n\n# set the clf to the best combination of parameters\nrfcht = grid_obj.best_estimator_\n\n# fit the best algorithm to the data.\nrfcht.fit(X_train, y_train)","5c845576":"# check the scores on Training and Testing Datasets\nrfcht_score = get_metrics_score(rfcht)","8a9aba4c":"# use draw_matrix function\ndraw_matrix(rfcht, X_test, y_test)","b26ab172":"# plot a horizontal bar graph\nimportances = rfcht.feature_importances_\nindices = np.argsort(importances)\n\nplt.figure(figsize=(12, 12))\nplt.title(\"Feature Importances\")\nplt.barh(range(len(indices)), importances[indices], color=\"violet\", align=\"center\")\nplt.yticks(range(len(indices)), [feature_names[i] for i in indices])\nplt.xlabel(\"Relative Importance\")\nplt.show()","5679f0e4":"# adaboost classifier\nabc = AdaBoostClassifier(random_state=1)\n\n# fit the model on training set\nabc.fit(X_train,y_train)","03143d4e":"# check the scores on Training and Testing Datasets\nabc_score = get_metrics_score(abc)","56e2df57":"# use draw_matrix function\ndraw_matrix(abc, X_test, y_test)","35214519":"# choose the type of classifier. \nabc1 = AdaBoostClassifier(random_state=1)\n\n# grid of parameters to choose from\nparameters = {\n    #let\"s try different max_depth for base_estimator\n    \"base_estimator\":[DecisionTreeClassifier(max_depth=1,random_state=1),DecisionTreeClassifier(max_depth=2,random_state=1),\n                      DecisionTreeClassifier(max_depth=3,random_state=1)],\n    \"n_estimators\": np.arange(10,60,10),\n    \"learning_rate\": [0.05,0.15,0.45,0.75]\n}\n\n# type of scoring used to compare parameter  combinations\nscorer = metrics.make_scorer(metrics.f1_score)\n\n# run the grid search\ngrid_obj = GridSearchCV(abc1, parameters, scoring=scorer,cv=5)\ngrid_obj = grid_obj.fit(X_train, y_train)\n\n# set the clf to the best combination of parameters\nabcht = grid_obj.best_estimator_\n\n# fit the best algorithm to the data.\nabcht.fit(X_train, y_train)","4710ceec":"# check the scores on Training and Testing Datasets\nabcht_score = get_metrics_score(abcht)","57f367c4":"# use draw_matrix function\ndraw_matrix(abcht, X_test, y_test)","3d564f32":"# gradient boost classifier\ngbc = GradientBoostingClassifier(random_state=1)\n\n# fit the model on training set\ngbc.fit(X_train,y_train)","da30c250":"# check the scores on Training and Testing Datasets\ngbc_score = get_metrics_score(gbc)","5a71479b":"# use draw_matrix function\ndraw_matrix(gbc, X_test, y_test)","477a843a":"# gradientboostclassifier with adaboost as init model\ngbcab = GradientBoostingClassifier(init=AdaBoostClassifier(random_state=1),random_state=1)\n\n# fit the model on training set\ngbcab.fit(X_train,y_train)","5302f621":"# check the scores on Training and Testing Datasets\ngbcab_score = get_metrics_score(gbcab)","30f7c79f":"# use draw_matrix function\ndraw_matrix(gbcab, X_test, y_test)","a232703f":"# Choose the type of classifier. \ngbcab1 = GradientBoostingClassifier(init=AdaBoostClassifier(random_state=1),random_state=1)\n\n# Grid of parameters to choose from\nparameters = {\n    \"n_estimators\": np.arange(10,60,5),\n    \"subsample\":[0.6,0.7,0.8],\n    \"max_features\":[0.6,0.7,0.8],\n    \"learning_rate\": [0.05,0.15,0.5]\n}\n\n# Type of scoring used to compare parameter combinations\nscorer = metrics.make_scorer(metrics.f1_score)\n\n# Run the grid search\ngrid_obj = GridSearchCV(gbcab1, parameters, scoring=scorer,cv=5)\ngrid_obj = grid_obj.fit(X_train, y_train)\n\n# Set the clf to the best combination of parameters\ngbcht = grid_obj.best_estimator_\n\n# Fit the best algorithm to the data.\ngbcht.fit(X_train, y_train)","83ef6387":"# check the scores on Training and Testing Datasets\ngbcht_score = get_metrics_score(gbcht)","9897aed0":"# use draw_matrix function\ndraw_matrix(gbcht, X_test, y_test)","c9edf64d":"# xgbclassifier with eval_metric=\"logloss\"\nxgbc = XGBClassifier(random_state=1, eval_metric=\"logloss\")\n\n# fit the model on training set\nxgbc.fit(X_train,y_train)","962daefe":"# check the scores on Training and Testing Datasets\nxgbc_score = get_metrics_score(xgbc)","ca3b2d59":"# use draw_matrix function\ndraw_matrix(xgbc, X_test, y_test)","33cc53ac":"# choose the classifier\nxgbc1 = XGBClassifier(random_state=1, eval_metric=\"logloss\")\n\n# Grid of parameters to choose from\nparameters = {\n    \"n_estimators\": np.arange(10,60,10),\n    \"subsample\":[0.6,0.7,0.8],\n    \"learning_rate\":[0.1,0.3,0.55],\n    \"colsample_bytree\":[0.5,0.7,0.9],\n    \"colsample_bylevel\":[0.5,0.7,0.9]\n}\n\n# Type of scoring used to compare parameter combinations\nscorer = metrics.make_scorer(metrics.f1_score)\n\n# Run the grid search\ngrid_obj = GridSearchCV(xgbc1, parameters,scoring=scorer,cv=5)\ngrid_obj = grid_obj.fit(X_train, y_train)\n\n# Set the clf to the best combination of parameters\nxgbcht = grid_obj.best_estimator_\n\n# Fit the best algorithm to the data.\nxgbcht.fit(X_train, y_train)","dc3943cc":"# check the scores on Training and Testing Datasets\nxgbcht_score = get_metrics_score(xgbcht)","c6c6fd05":"# use draw_matrix function\ndraw_matrix(xgbcht, X_test, y_test)","f21ef38a":"# define the estimators for the model\nestimators = [(\"Random Forest\",rfcht),(\"ADA Boosting\",abcht),(\"Decision Tree\",dtc)]\n\n# define the final estimator\nfinal_estimator = xgbcht\n\n# choose the classifier\nsc= StackingClassifier(estimators=estimators,final_estimator=final_estimator)\n\n# train the model on training set\nsc.fit(X_train,y_train)","f33b052a":"# check the scores on Training and Testing Datasets\nsc_score = get_metrics_score(sc)","af0ae444":"# use draw_matrix function\ndraw_matrix(sc, X_test, y_test)","6c31e27e":"# defining list of models\nmodels = [dtc, dtcht, bgc, bgclr, bgcdt, bgcht, rfc, rfcwt, rfcht, abc, abcht, gbc, gbcab, gbcht, xgbc, xgbcht, sc]\n\n# defining empty lists to add train and test results\nacc_train = []\nacc_test = []\nrecall_train = []\nrecall_test = []\nprecision_train = []\nprecision_test = []\nf1_train = []\nf1_test = []\n\n# looping through all the models to get the accuracy, f1, recall and precision scores\nfor model in models:\n    j = get_metrics_score(model,False)\n    acc_train.append(np.round(j[0],2))\n    acc_test.append(np.round(j[1],2))\n    recall_train.append(np.round(j[2],2))\n    recall_test.append(np.round(j[3],2))\n    precision_train.append(np.round(j[4],2))\n    precision_test.append(np.round(j[5],2))\n    f1_train.append(np.round(j[6],2))\n    f1_test.append(np.round(j[7],2))\n\n# create dataframe\ncomparison_frame = pd.DataFrame({\"Model\":[\"Decision Tree\", \"Decision Tree - Tuned\", \"Bagging\", \"Bagging - Tuned\", \"Bagging - Linear Regression\",\n                                          \"Bagging - Decision Tree\", \"Random Forest\", \"Random Forest - Weights\",\n                                          \"Random Forest - Tuned\", \"ADA Boost\", \"ADA Boost - Tuned\", \"Gradient Boost\", \n                                          \"Gradient Boost - ADA Boost\", \"Gradient Boost - Tuned\", \"XG boost\", \"XG Boost - Tuned\", \"Stacking\"], \n                                          \"Accuracy - Train\": acc_train, \"Accuracy - Test\": acc_test,\n                                          \"Recall - Train\": recall_train,\"Recall - Test\": recall_test,\n                                          \"Precision - Train\": precision_train,\"Precision - Test\" :precision_test,\n                                          \"F1 - Train\": f1_train,\"F1 - Test\": f1_test}) \ncomparison_frame","e491d4f4":"# Module : Ensemble Techniques\n# Project: travel package predictions\n# Submitted by : Ritesh Sharma\n# Submission Date : 01 Oct 2021","217e4874":"**Observations:**\n\n1. F1 Score has reduced.\n2. The results are still comparable between training and testing sets.","903fc2a6":"#### Draw the confusion matrix","46506d0f":"#### Draw the confusion matrix","08274c98":"#### Check the scores","f284667a":"## Compare all models","6af96652":"**Observations:**\n\nWe see that only 18.8% of the total customers purchased any of the travel package.The plot shows heavy imbalance in the dataset.","bb470477":"**Observations:**\n\n1. Customers who plan to take between 2-4 persons with them during travel, close to 20%  have bought a travel package product.\n2. We see that all Customers with one companion and five companions, did not purchase any product. \n3. This suggests that the products don\"t seem either appealing or beneficial to the customers of the above two categories. \n4. Business should focus on this area.","86153f08":"### Passport VS ProdTaken","70038dd2":"#### Draw the confusion matrix","dd5cf735":"### Designation","90ceaf65":"## Define all required functions","54df0a84":"#### Draw the confusion matrix","fc07da96":"#### Check the important variables","c1313709":"### CityTier VS ProdTaken","d56ce844":"**Observations:**\n\n1. The model is over fitting.\n2. The Bagging classifier has a better accuracy metric and the F1 score is also higher.\n3. But model only predicts 10.09% of the total 13% of True positives.","227af626":"**Observations:**\n\nThere is hardly any difference in the percentage of customers with or without cars, purchasing the product.","74b6d38e":"#### Check the scores","982eef9d":"### Passport","b7335d59":"### Hypertuned Decision Tree Classifier","0a031cef":"### Bagging Classifier with Decision Tree","48cdab28":"**Observations:**\n\n1. Around 30% of all Single customers have bought a product and about 25% of Unmarried customers have also purchased a product.\n2. Almost 50% of the total customers belong to the married category, but we see that only approx 15% of them have actually purchased any product.","4ffd3964":"#### Check the scores","82f056d0":"#### Draw the confusion matrix","ff1a278f":"### NumberOfPersonVisiting VS ProdtTaken","3bcd114e":"**Observations:**\n\n1. Around 30% Customers with Executive Designation have purchased a product.\n2. Sr. Manager - 16% and Manager - 11% Designation customers have purchased a product. \n3. Very few customers of VP and AVP Designation have purchased a product. ","13a28f22":"**Observations:**\n\n1. The metrics have dropped after hypertuning.\n2. The model is not overfitting.\n2. F1 Score has reduced, but the score is comparable between training and testing sets.\n3. The most importance features for this model are:\n     - MonthlyIncome\n     - Age\n     - Passport_1(Customers with Passport)    \n4. This model gives 85% accuracy rate, which is quite good despite the imbalance in data.","66b0af43":"### Random Forest Classifier with weights","c05a6754":"**Observations:**\n\n1. The Basic Package is the most preferred \n2. Standard and Deluxe are following.\n3. Very few customers purchased Super Deluxe products.","2a87aaf2":"**Observations:**\n\nMore Customers from Tier 2 and 3 cities have purchased Travel Packages.","2d288b71":"**Observations:**\n\n1. Majority of customers have given a score of 3.0 to the Sale pitch for the products.\n2. But we observe that the number of customers who purchased any product is almost equal across all pitch scores. ","554eb573":"### MaritalStatus VS ProdTaken","d586a4d4":"#### Check the scores","69623cbe":"#### Draw the confusion matrix","e74b9aac":"#### Check the split of target variable ProdTaken","520975eb":"### Treat other numerical columns for missing values","550866bd":"## Outliers Treatment","3118350e":"**Observations:**\n\nCustomers with passport tend to purchase products than those who don\"t.","2c25ccdd":"#### Draw the confusion matrix","716b3e5e":"**Observations:**\n\nNumber of Male customers are higher than Female customers, however we dont see a lot of difference in the percentage of each Gender select the Product.","f28dbf7c":"#### Check the scores","3023ec58":"### Hypertuned Random Forest Classifier","90a9b88d":"**Observations:**\n\nSelf-Enquiry is the most preferred contact method by the customers at 71%.","79ecc4a6":"### Correlation Matrix","64b362d8":"**Observations:**\n\n62% Customers have their own cars","eabec666":"**Observations:**\n\n1. In the Gender column, we have an error value Fe Male. We will treat this as an data entry issue and replace it to Female.\n2. Self Inquiry is the most preffered in TypeofContact feature.\n3. 3.0 is the highest property rating\n4. And 1.0 is the highest value for the NumberOfChildrenVisiting column.\n5. Hence we will replace the missing values in the above columns accordingly","bdf158cf":"**Observations:**\n\n1. F1Score has decreased to 0.51 for Train set and 0.49 for test set. \n2. The performance values for F1Score are close and comparable on the tuned Decision Tree.\n3. Passport_1 and Designation_Executive are the new important variables that are considering by the tuned Decision Tree.\n4. The tree is readable when drawn.","a232ff5c":"#### Visualise the Tree","158905fd":"### Split the data in Train and Test Sets\n\n**Customer Interaction data is not relevant for our analysis and we will ignore. Also CustomerID column is not required**","b3e5488f":"**Observations:**\n\n1. Married customers form the bulk of the data at 47.9%.\n2. Divorced (19.4%) and Single (18.7%) coming in close at second and third place. \n3. Unmarried customers with partners form 14% of the data.","bc174b48":"#### Check the scores","8b3da02c":"### Occupation","65de1c08":"**Observations:**\n\n1. There are 7 columns with null values.\n2. Age and MonthlyIncome are usually linked to Designation and since there are no missing values in Designation we can use it as a basis to update the missing values in Age and MonthlyIncome.\n3. NumberOfChildrenVisiting, NumberOfTrips, PreferredPropertyStar, NumberOfFollowups, DurationOfPitch can be populated with Median values of the column.\n4. For TypeofContact we will have to impute values based on available data in the column","91a3e7c3":"#### Draw the confusion matrix","f2b4daa9":"### Gradient Boost Classifier","878fca30":"#### Check the scores","b8511856":"**Observations:**\n\n1. NumberofTrips is right-skewed a little and majority of the customers seem to take at least 2 trips per year. \n2. We also see very few outliers in the higher end.","e9e856a6":"### Hypertuned Bagging Classifier","c09c349d":"#### Visualise the tree","9cf95734":"**Observations:**\n\n1. MonthlyIncome and NumberOfFollowups have high outliers.\n2. DurationOfPitch and NumberOfTrips also have few outliers.\n3. Since we are building DecisionTree Based models and they are not influenced by Outliers, we can choose not to treat these outliers.","727bc2fb":"**Observations:**\n\n61.8% customers prefer a three star hotel rating compared to four (18.7%) and five (19.6%) star rating hotels","9d9562b3":"**Observations:**\n\n1. Hypertuning has reduced the metrics.\n2. Model is able to identify 9.34% true positive.\n3. Model still tends to overfit.","c1908fdd":"### XG Boost Classifier (Extreme Gradient Boost Classifier)","65418f48":"**Observations:**\n\n1. The mean Age for customers who purchased any Product is slightly less than those who didn\"t. \n2. The mean DurationofPitch for both classed of ProdTaken is almost equal. We see there are many outliers in Class \"0\" of ProdTaken,\nsuggesting that longer pitch durations doesn\"t lead to product purchase.\n3. Customers who purchased the packages had an average of at least four followups, compared to customers who didnt.\n4. The Averages for NumberofTrips and MonthlyIncome;for both Classes of ProdTaken is almost equal. \n5. MonthlyIncome variable has several outliers in the higher end for both ProdTaken classes and very few in low end of Class \"0\".\n6. We also see that Age variable doesn\"t have any outliers.\n7. CustomerID Column is not relevant for analysis, we will exclude the same from model building.","34a8b772":"#### Check the scores","a0573ec7":"### OwnCar VS ProdTaken","e98cfdbb":"### Convert the Categorical columns to Category Datatype","86f1800e":"#### Check the scores","bcb587f6":"### Treat the other columns for missing values","bc8a7ac4":"**Observations:**\n\n65.3% of customers are from Tier 1 cities and Tier3 cities comes second at 30.7%.","30d80278":"**Observations:**\n\n1. 48.4% of customers are Salaried.\n2. Customers with Small Business are the next highest in Occupation at 42.6%. \n3. There are very few Free Lancers as well.","2e3bc67d":"## Univariate Analysis","f47cad61":"**Observations:**\n\n1. Use the Logistic_Regression as base estimator does not fit for our analysis as it has reduced the f1_score to zero.\n2. The model is not able to identify any true positives.\n3. However the model is not over fitting, it also gives us the comparable accuracy on both training and testing sets.\n4. Let us try Bagging Classifier with base_estimator as DecisionTreeClassifier.","b4a17376":"#### Check the important variables","60bd441a":"**Observations:**\n\nNumber of Male customers(59.7%) are higher than Female customers (40.3%).","c7264d8b":"**Observations:**\n\n1. Bagging with Decision Tree has the highest F1 Score but it is overfitting the data.\n2. Despite having lower F1 Score, the Hypertuned Random Forest has more generalized metrics and does not seem to be over-fitting the data. Making it the best suited for future analysis.\n3. Most of the models show comparable scores between training and testing sets.","0b314760":"### CustomerID","943a7e65":"### Gender VS ProdTaken","e2070052":"**Observations:**\n\n1. There is no improvement by adding weights to the Random Forest classifier.\n2. MonthlyIncome and Age are still the most important variables.","0d962f25":"### Hypertuned ADA Boost Classifier","620b377f":"### OwnCar","63a5cfda":"### Split the data in Training and Testing Sets","e5ad9a2d":"## Conclusion\n\n1. A Key missing variable is if the Product pitched was the same product that was bought. \n2. Basic and Deluxe are the most popular packages.\n3. There was imbalance in data, as only 18% of customers bought any product. This must be fixed for future analysis.\n4. NumberofChilden and NumberofPeoplevisiting does not seem to impact the performance of model a lot.\n5. The company can run the model to achieve desired performance levels for new data, also to offer better packages to customers.\n6. Young and single people are more likely to buy the offered packages. \n7. Age and Income have a correlation and we see that higher age groups and higher Monthly Income groups lean towards the expensive packages.\n","5e5598e8":"#### Check the scores","65caf4c0":"### NumberOfChildrenVisiting VS ProdTaken","debcfeb6":"### Hypertuned XG Boost Classifier","c31bb49c":"**Observations:**\n\nMore Customers with \"Company Invited\" contact have bought Travel Package when compared to Customers with \"Self Enquiry\".","b28f1653":"**Observations:**\n\n1. F1 Score has improved on both training and testing sets.\n2. Model is able to identify 7.84% of true positives. ","415ea15c":"### NumberOfFollowups","0b055a53":"#### Check the important variables","dd0c56e6":"**Observations:**\n1. DurationofPitch is slightly right-skewed.\n2. We see that most customer\"s pitch duration was under 20 mins. \n3. We also see few outliers at 40 mins and at 120+ mins. ","9e7612ff":"**Observations:**\n\n1. Though majority of customers prefer a 3.0 star rated Property, the percentage of customers purchasing the products is comparatively less than customers who prefer a 4.0 and 5.0 star rated property.\n2. The higher the property star rating, higher the number of customers who purchased a product.","6b932798":"#### Draw the confusion matrix","bf049b48":"### Designation","adb7aa36":"#### Check the important variables","4bb4f65a":"**Observations:**\n\n1. CustomerID shows balanced data as it is sequential tracking number.\n2. CutomerID is only for identifying the customer record.\n3. We will not use this column in model building.","192e728b":"**Observations:**\n\n1. The correlation values are quite low between all the variables.\n2. Only Age and DurationofPitch have a very low negative correlation.\n3. MonthlyIncome and Age have the highest positive correlation at 0.47; i.e as Age increases, so does MontlyIncome\n4. NumberofFollowups and NumberofTrips have a  moderate positive correlation between them and also individually with Monthly Income.","77392d9a":"### ADA Boost Classifier","208b64c9":"### TypeofContact","4a630638":"#### Check the important variables","aaa38c4d":"## Data pre-processing","47cbbc10":"**Observations:**\n1. Self Inquiry is the most preffered Type of Contact\n2. ProdTaken : There is heavy imbalance in this column where atleast 80% customers did not purchase any product\n3. CityTier : Most customers are from Tier 1\n4. Occupation : Most customers earn a salary\n5. Gender : Male customers are slightly higher than Female Customers\n6. NoOfPersonsVisting: Most customers plan to take atleast 3 additional persons with them in the trip\n7. ProductPitched : Basic is the popular product\n8. MaritalStatus : Most customers are married\n9. Passport : Most customers dont have a passport\n10. PitchSatisfactionScore : Most customers have rated 3.0 \n11. OwnCar: Most customers own a car\n12. NumberofChildrenVisting : Most customers plan to take atleast 1 child under five with them for the trip.\n13. Designation : Most customers belong to Executive designation","0815bc01":"**Observations:**\n\n1. Customers who are  Freelancers by Occupation have bought travel packages. However the sample size is only two. \n2. Of the 434 Large Business owning customers, almost 30% bought travel packages. \n3. Among Salaried and Small Business owning customers,close to 20% have bought travel packages.","beae9948":"## Recommendations\n\n1. The marketing team can curate the individual packages to the specific business designation\n2. The marketing team can create product and customer segment specific sale pitch to reduce the DurationOfPitch.\n3. The **WELLNESS TOURISM PACKAGE**  should be curated considering the features of existing packages that customers have purchased.\n4. The company can run various campaigns and offers for customers with family to increase sales.\n5. The data shows customers with passport has higher buying ratio and business can curate international packages for such customers.\n6. Specific packages can be created for different income groups.\n7. The data collection process can be enhanced to capture additional information like customer satisfaction post tour and data to correlate the product pitched to the product actually purchased by customers.","afedc7ae":"<img alt=\"\" src=\"data:image\/jpeg;base64,\/9j\/2wCEAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRQBAwQEBQQFCQUFCRQNCw0UFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFP\/AABEIArwHgAMBIgACEQEDEQH\/xAGiAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgsQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29\/j5+gEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoLEQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8\/T19vf4+fr\/2gAMAwEAAhEDEQA\/APskZ7frQOQKUCnAZr5w9saBS4NO7UUAGBS+lLj2paAE20tKFz0pQMUAIq5pQMUpBB5p2w+1K4hoXIpyrup9G0f5NIVwApdtC06gQmPSgjNKB+FKBQAnWjjFLgUlOwDsZpvWlXrS4FMBMY560vQUUUALjil20uKUDNACY560daXBpeMUANHvTv1pdv0pfwoASl20uPb9KMCgAwKMClx6g0uD60ANx604cdBRjv3paBXDHvQB6Uu3\/OaUDH1oFcMDGMUAHHPSlAp207aAG4x2oxkU\/HPI4oIHamAm35cUu09M07HvRgetIQUd6UDHHegDJNMYgAIpcD0pcGnJgYOaLAJ5Z9P1pVTPbinbxQpHpTsAiBeopH+8aMf\/AF6FXNMdg+X+7RtNL160UDEVc0oHGadjPNABoAMnGaXJ9aAKMc4oAVhnJ6UlOIFH4UAJgdxRjHWjHtTqAExxS7fm5pce9LjjFADQKdRwaCKBNCngfSkx1opwGTQtQ2G49BSj0o74pQOooGGOc+tJg4+lO2GinYBuDj2pQuaPl96XB9RigBBz0FKQT3o49KOPSnYVxP46Np9P1pw5FB69KAETrRxnHaijNK4xOPU0gGadSbqQC8AYFGB2FJux0o8wegp3EG2jb82KN59aTd9Km6GSY4zTePSjcuOppMj\/ABqriH5zwaTGfxo+lJnFMLhS\/lR70ckY7UxB196SlwaMcnPNIe4lLk\/jS8ntRgVIwxzzSZI7YqSjAqxWGY5xTadjAz0+lGOc1NwsNwPanDJ6U\/r9KOv0qgGYOOlJn2FSUbeMUARU7qMdKfjNGBQFiKl6dRTsdeetJ0HtikLYb\/CaUjj0xQRil2980wuN2Gj8BTse1OIz0pDIwBjJowCOOKXP1pOPSgLifh+tB+Xg0baQjFSMO\/OaOlP+lNK4p2AaQTSEYqSmnIFFgGUbe1PFIwJpANwM4xSEdhTttAHrQAzHOKCO5p2M03bQAlIQe1PxxSYNADdo7Um3nNOI7Un8VADMD1pKeRzik9qAHMPWo\/LPp+tK30xSUhWGYozTtvFJjjNFhjW4BrOu2wOtaT8Vl3Z+VqkqKOY1mU7TXmPiy52xv9K9H1s8EfhXkvjSUqj8V10FeR9JgafNJI4e51BVcnIq\/oV6HlHPSuH1fUzHPgHGOlXtC1gCYfMOe1fQSoe5dH2lOlpY9q02RZo1Pc\/pWxEg74+tcLoeuqsSAt0rpU16JUzvVvp2rxZ05Hm1qE07JFzWNgtmLHoK8L+IdzGFkAxnn6Z7V6D4p8XIkEihgeMYzXz\/AOPvFKSM4Dg8evWvSwNBt3KhB0ablI8u8X3G+4P8642RsNWzrN41xO5z3rEkPzcGvqlFI+Exs+aVyvKM7qgappAfrULda0R8xV7kbZph6U9huph6UM8+Q3pQD82abTwKnYwR33gK+YGNeOuOT719H+B7za8ZUqMj73t16V8t+DJSlxgevXHSvo\/wLOS0OQM\/3gK4MZHmjc9vCXPpPwxKTEhz1r0PR5DtB615h4TlJiXmvSdGbkc8Cvhaqsz2mjqYcFB2p2DTbflakxxisEYibaQinY5ox7UwE202n45zQR6UAMx7UY9aeR0xSetADMY9KUjApSKaR3oAXHrSY9qCPSjbSsAmKQjv\/OnYJPSgikAzHpSEflTyM0mOc0ARsu3kcGmsuKlI9KSgdyIjjBFJgVJsFJt9KBjMCl2j2oo79PxoAiI70gGKlYZqMiqGNIxTSKfQRmgCMj0oI708jFNI9aAG0m2nt0ppGKAGY70hHengdQKQj3\/OgCMjPBprL6CpcCmsOf8A69AETAetNK96kIHf71IQRQRaxHTMH0zUxGeBUbD2xQIY3pxTGXFSEY+lIe\/H4UDInGT0ppHrUnG5qQgZ9aoBmKj2e1TEc0zAoGREYHvTamI2\/wCzUe35c0rDG47Um3\/OacQRSYpDImUDpTWXJ461ORTGTpgU1oBARgkUmMc1Iy7vakZO2asCLH0\/Ok2+9SstMIxx2oVgIyOw6UjY7U8j0pB1wKRRGy96j\/iqc9OtR49hQRYYx5NRkHtzU7LioynQU7kjSpFNYZOKkPu1NJ6jgVQEWz56aw9fmqVlH92o\/LNADMZf8aYwqUkHtTCM\/jQBXYH8KZIMgDFWCOtBzV3ApsueRTCuTirJHBBqHG7iqGRNwP8AapjLnPNTFRjP8qYRj6UC5SIrx0phX1FSt164ppH3eKCWrERGKaVzjp1qR\/p1ppXAoEQNGOajdO351ZKDNRMnvwO1O7AhZaYT8ualK9cD9aYwC9fzNabjICAR\/eyOKay7elTkDn8qYVO7FCIehAyn03VHjdx6VYZfm6UxlJX1qrge\/wCBmloxntSge1eadAu2jHNOx2xSjPegBdo9qTFLSp96pEIBmlGPr7UoUt1pVXbQA1PvU7bz92nUu2gVxAPrS49qXHpSgYFAhNv1pwFGPrS44oATH1pR9KTbSgdBTsAuOMY5pMcYpRgUuPamAntilAJ5oxzSketACD09KWlwaB60AGDS44zigD1pQKADGKKKcoNABgUYFOIzRg+tACbecYpf880tA4OaBXDHGBS44zRj0pQPSgQc\/rQOlKBxSgUCEop+OMUoGeO1AABxikA2+5pdtLg07FWEAxTgMcd6XO4jnFJgnuaLBYAPQc07A+WlyM8jmnKRwM0EieX7mkxz\/s05uR1puPpTKQhGTyMUuOKU4PalwaExjcHPSnbVoAFKBTATBNJTh0paAEHPWlxzmlwaXbQAm2lx+VGKXHakAm2lowaUD1ouAbc9aXFKfSjHPHSmA3Gee1KM96KKQCn0pSOMmkzk04AY9aoBuDn3oPWjBpQPakAmOcUoUmlpQMGgBOPSlA49c0lLtNWTcMn0pKdgelLtFINRuT6UYHrTtopwIPQGgZHj0o5HFSHAppxii4WA8dqbjnrTyPekxmpb7j3GkAHmhjtHQ4ob61GzYriqYmES4wuIW21G0xGaikmxxnFUprnbXmTzCC6nRGky49wfSoTdVlzXe3vVWTUB61h\/aMO5fsWbpu\/9qm\/bOa52TUwo69KrvrKq1UsfFj9g+x1f9o9hTl1DJ65rjjro7nFNHiAAdc\/jXZDFJ9TOVGx3Ud6D3q0k4auEg15T\/FWtZawrgYau+FW\/UwlBo6gHJ6\/jRVG1vlkxzgmrsb7gCDXSnczsTDpTT1pwINOB9BVvUBm2jHHSlA9KUD86kBfwox7c0fnS9PxqgI8elG2nFTTlBxUgJjHNGM80uKcBirAZjPNGO9GeM0tIBnbmk+p\/SnbaMGpAbj2pMY6ipM8Zo3DPSnYBAOcUfQUlJjHINFwHY4pDwOhpAvNPxn1pgNwKMfjTmptMCPBpNuaeQaQj261ACY4pMfSnEd6QjFWTcOvak2GnMO9NpDuGPu0hHOKXjtSkAmiwxmTS4P4UmPyoqQEIzSEYp+72pO9ADCKCKdRgUrgMIzSYNPIxTSKLgNI9qQj0pxFIRRcBpFNIp+O9IPvUXATH4U3FOx83NGPlzxTAjkrLufutWtIPkJ9ayrtcIak0hucdrudrda8n8aJmNv5165rS7sj1ry\/xhb5ibA612Yf4j6vLbc8T578VF4ZX5xzzWLYaybdxzXU+MbTc8nHA7V59PE0bnHrX2dO0oH3ig462PRNP8XeSmdwHbrVq58e+WhzKPQc15Q88idzmqlzfSbCCT0pSw8bkTdlqjrfEHjp5w4WQ4INeYa3q73spJYgVPfPJNnJ4rInizziuqnCMNj5jG1Jz0Mqf5ic1TkTnrWnJCc1VkiPzcA1sfG16b3ZnOuQeKgdTzV6SI5NQSIeaq9jwa1MpumfpTQmO9TyLjk\/WmbDjkUzzJRI9vsKAtS7M9acsdFjNQN3wmuLsA9OvSvonwCvMeeDivAPCkB+1qByM4r6H8AxEvDx05wa4cW7QPawsbWPoPwnnykNel6P1GfrXm\/hOPCLjPQda9L0cZxXwVXWR6kjqLX7npU2OahtQcL2qxjmsEYMbj1FGOKXHFGDQIbg0flT8e1GPegBu2kwadjiigBhHtRTsc0mD60AN203Ap+OcUYxQAzAoIzTsHpSdKAE4z70hyaUj3pNtKwCYpMc5pxxtwaD09aQDMY5pKeR6EU0g0ARP96hlxUhFIy5GPSgdyPNIAO9OZcUlAxhX5qbj8akYZHFNK96oYygDFOwKQigBu2m\/hT8e1BGaAIuvakIBNPI7Gkxj0oAbtpMGnEYpNtADNtMYcmpCPTpTWG7igT1I2XFIy8dKlIHJzTdvGKCeVkTCmMO9SHNIc0GlhjdaYdvepT97HSo2z2\/WgzIyKQj2qQr6CmYPoaq4DSMGmbPen49hSEUwGMvY01+gqQ\/TNIw9qW47kNGM09l9qQgenFIojZe4pGXC0+k2\/wCc0gI2HoOKjK4HNTFc8ZpjdBT2AippB4qbbk4HFR4OcVSdwGP0H40xl21IR+tIw9BQO5CV60hFSum2mbfrQMjZcUzbgYPWpCM0hTnnmgh6DWHbHakI29+tBXmkPT0zTuSN8selRkYb1xUx\/u0x03VSAifp0xUZHtUzLtNMdfl6U0Ih2fT6Uhjz1qTZSGndjKzA7vXFMIyMVYdO3\/oQqAjA6VadykROAePSmkbgDUxHqBTD+tAmrkOBuUUzH1NT4xx1phXAyKRD0ISuexNNPXvUpH5\/ypoGCaYiDZuY44qNkABHFWWH1qMrnk\/+PU07AV3ULnGOmaYfm6YqZx8vGOfyphFWncbIWAYrUJJarSgdPbn2qIqA3X\/4qqA9\/VfWnbR7Uv4UleYaCAYpaKeP9k\/nQMb\/ABf3akpqrtp1BLCl\/GkP1pfagQ6jBooHpQAdqUClx70gGaYAvWlAxSge1ABpgHtRjnFLj6YpaAEx7UtFFABj2p22m07HNAB+NLRj1pdtABg+tKBigDFFADiMmkpwFC88YoFcQdTS0uDjHGaBjvQIFXNKBj60uMc0UCCilAp2PagBoGR1p20rS8bcUv0FAAPrT6aM0AClcYYx1oAzTwOOmKOnAp3KE6minYGaT8Pei9wDH0pQO1G0UoFSTYTHFKq4pdtLj6VRQmPUUoH50YoAzQgEI\/Clx3xS4+tL+FACAUYPrTqBz06UAAHagA0uPSl\/SncAwKUCkootcAoopcGiwCUuaSnY9KoBMc4pKdgUtACY9zS0u2gDNACY2mlxS4FAGKADAoAxTsZ60baAGg8UuadRjjFACbaNtLRjmgBNtLjJBNLjNGDQAmMnNKBTivpQBk0pOyAbtPrRjjmn4xzSFeO9fP4zHKHU6adNsgfpntVWVvzq3KpYcCqc0ZIPFfD4zNnF2TPRp0kULmTrWXczA5w1aVwpwfesm6HLZr5eeYVJvc7Y01YoXU5FZk90y55q9cHGayrojJ960hjKj6m6gitPeFON2KzbnU2QEg8U+7fA\/lWDqFwQCN2K9KlXm9bg4oS819oj944+tZ0njJIjhpOe1YWtXuwE88V5vr+stE7kMRxX1uBUqhw1mons9t47TfjzOh9a6fRvFyTEDzMH618gy+MJ7SViJDXQeHfig0Uy75vb5q+zo4WVjx5V47M+0tL8QCQIN3WussNSDgZP6180+DviCl6IwZB+deveH9dEgUhsrWrjKDsyWk1dHqUUgcDmpsH1rB0y\/wDMCjcK20bcoOa1TuZbDwPagj0qT+H+7SKBupk3G4\/zmjHOKl+mKKAuRY7UvHY07HsKNoz7UBcKKdj1FJgen6U7hcjoqWjGDg9KQXIqd5fuKd\/nrRjIoFcjIxSbafz92kVc0FDMGlx6il6ilxxmgBgHNPIxSH73ApcHOapAGDQR2pe3FIV9KYEeM96THOamx+VIRmpsA3bSY4NLkYxRupgMIphHNPx7UmMZpXENIxSd6fj8aTGOKQxmOKNtOxzRtoAjpcGnEH8+9JtoAbQR0pe3SjHApAJj8aQjFLRSsAhGKaRT8U0g0gGEYoI79qcR2pMY60wG7aMe1LjjNFO4DHHHNZd4vytitYgH61n3KYDcUrmkHqchq0e4kc1514ng3pJjFeoavFgk+1cJ4gtd6n5c10UnZ3PpMBO0kfP3i+05bj36V5ze2vPT6V7H4xs\/9YdpryrUots2PevrsNNOB+oYeSqU02c1cWp5421nXEBroJox3H1rNuUAIzXdcVWmrHPXFvzjGBWZcRbT2roJoh1NZdynzdOfpWiZ8xi6aS0MWaP5lBxVV4uOlacyjpn36VWdR1rQ+SrxRlSwjsKqyIM4rVmjC8AYqnInIH5CrPCrwRnSQ+lN8urbJmk2Z7U9jypU\/IqrHzUscXQ1KE5x0qaCAsRx8pp3EqaR0PhK1LXIOK+jPANmw8nI6e1eKeBtKaadDt6kY5r6P8B6WVMZZdp9cV4+PqcsbHo0IWVz1nw1BgLXoejxkAVxnh+22RrhcZHSu80qLCAEV8TU1ZvJm5ar8vrU+BUcC4AwKmwfWszBjcCkI9Kfjv3pcZoENxjtSdqdg+tLQK5H6UEd6fg+tNoGIRij+GnY3e9IR7UANpME9Rmn0jdaAGY96Sn4pCM0AM20hFPIxTcCgBuBSfjT8elJt7DmgBp6YoIpSPam0rAFNOaeRk59KQj8qQDKYy4FSEe9IRQMiIwaP60\/b82aYRg0DEwKRxhacaKBjGT3o27ec5p2O3Wl2jfmgRCRgYphFPpCvpVDEphGKkwetNI5oAYRmkIyalqMj8KAGY5zSYNPK\/hSYFAEewe9Nx8uakI9eabsHvQO5ERgfSkIx71IRimEYPQ0GauRnrTWB2ipaYyj0oAj2468CkI21IRjpSc\/3hTAhpCvXmpCMim5A6CqAjxk4NNI6mpDzx3pNo780h3IyNvuKbT2XNIRjvzSKGH5e1NZcU+jHNICEj0HWkK7uv4VJtyPY9aY3QUbARFcDOKQ8cGpWWo2GOnSrTuBGOuBSEZ+tPI\/H1pG44+7igojZTmmEc5qVlyvALU0g\/SgTGFc7jUbL8v1qSmsu6gjYjIwMg0YPPanYzzTCAO\/5U7iDaF6DmomUg4PNT4FJj86oCuefaoyABVgJ\/eqMjAzTQER5HHIqN4sjp1qcr0OKaRz6Gi4FVlzzxTNtWWT5eDUbL6CtE7jIGBphHYipSoHU9OKYVHcZoG1cixx0GKYwC56VOVHcdaZgrSMiEoMGmEfzqRhyc00j5evHemBFz2NRFc1YNRY+8fvULQCE+1NIz71K429RzUbr68\/jWidwPe6VVzSEEHmnY\/2f1rzjUPmp9FLtoJGr92nfSlA70dKAE20oBpcGjHagAA9qXH1pePypBmnYAAzTgDSD1peQaYCgUoFAFKBmgAAzS7aMCloAKbg+tO6ml20AJSg9qWl6c0AN5NLRTueufmoAMc0oB70dqXsKCbi9+9LTR9cU7aKBCD6YpaMcfpTtnvQADp6fhS8deelAGOlLjJzQMTNA9acBS7aVygC+wpQvtS0UgDHsBQBn3pe+aUDAxyaAEHrS0Ug+tMAAxTgM0lO4pgG2lAx9aKMdMUAAHFGPWnduKXHtQA0U6lAzSUAABNGR6U7AooAAMUUYooAKKWkqkAuDRj8aUDFLTAT86Me1O\/Cjt1zQAlAH5U7ApcdhQA3bS4FLjtS7aAGkZpaXbS0AJtpcH0op2PagBMc96MGlxnrR\/WgAAxRtpadsNADaMe9O2GlyP7tAEe2lp+PYU7v3oFcYBnNOC4oA3cVKFBOcYry8ZW5IM2pxuNA4Pr9KQr7Ypx5NSQpkivzLH4yU5cqZ6C91EX2bd2pjWWQa1IoakaHjFeSsJ7RXZn7ZpnL3lgNvSud1C22ZJA4rvLuHg5rlNYiA3cV5tfD+ydz0aNTmOPuvlJrHvD1rX1BgpPqKw72Tk8+9ZU1qegkZV8e\/wCVcrqlz5e4Fq6C\/mwDXJazMFVyT09693DJtoU9Eclrt9t37vlH615Z4huGz\/Ou18SXmFb\/AGq831yXdnnoK\/SMspWseJipHKapITu9a5x9Se2fKt36VtapMMnGcDtXL3hyTxX6JhYqx8vWd3c9K8C+PZbWZE80jBHevqT4eeNf7Qgj3Pk4HGa+CrS6ktbhXUnrXu\/wo8Xsk0O+TavQ1WLoKUbo0w1Zp8rPuvw9qnmovORXd6dc70XnPrXh\/gvWvtEURz1Ar1jRLzcq\/N1r574XY9KSOoXPanjoKZbnfGDUuO3StDFgBjmjGeaMcelOzQA0jrRj9KXjHtS5oEJjmkPHanZpD0oGIASeaMD8TTs0h5FAhMblFJjjin5pPTigY0jHBoYDHNO5pH6UCGY9hS4HoPyp2PejZQMiCmjHrzUmCKMD0FNaAM\/GkxzzUmO1Nx7Ci4DMe9Lg+tOxxik2Gi40Mx+tIRipGXb0pvakMaRmgjr607HOKKAGYHNIRzwRT8e9JjPagBnSjHoadRjigBhGe9BHtTiO9J9KAGH3pDT8CkI9aAGEYo9+9OoOB\/DSsAyilPFJSYBgU3H09adRgUgGEUhFP20mKAG44qndpwTir1Qyx7hj1oBaHNanDlDnriuN1m13Rtnn04r0G9g3BhiuW1W06nFOLPVw9TlseKeLdMID4XIPFeL+JLAwzvkHdk19La\/phlR8qa8e8XeHiHb5BmvoMHWS0bPvsvxq5bNnkMrnBzkGsu4fJz61uaxZNbyMAp21zdySu7nGK+iTvqj1amJsitcuPcgVk3JDNx\/jVy5l55JArMuJMjPGBWiPn8TiFIrStjdVc\/TkU6ZwW5yfWoWfac5zWyPl6k1cinPrVSQZOMHmrEsmeh61XZv0ovY8qq0Qbec424pGHfrUnQ4pgBY8VZwSFVcHpWrpenvcSKMcd+KgsLNppAFBLe1em+DfCxcoWTHTJ71nUmoK7CFPndkdJ4A8PEeWdh2jHy46V9A+D9KEMaY6kY965Dwd4bMSxgAgjnb6V694f0sRxpxmvkcbX5nuehy8mh0Oj2pAA9Pau0sINijjisXSbTADY\/SuktocY4rwXqYSdy3EuFzT8e4pQuBik2\/N0oMnqGCaO1KBj60uM80EDdv+c0Y\/yadTdvuaCrBgd6SnYFGPagQ0jPNBAApdv+c0bf8AOaAuJgmk\/OlppXJPNBS1EI9qQjFPwfWj60AM203Ap+OMU0jFADexpMYGaeRk+lIRmgCKg\/TNPpCKAGEcdKMfWlIz37U3oaADBpuO1SEYFNx2qQGU1lz0qQqM9KTHtQA3b8uKjxUuM9Ka\/bjNA0xh560mOtOf71IRg0hibeOODTe3T5afRQwIaMc5qTyj61HSuxjCuRyKQipMCm1XMBGR3NIR7\/nTyPSkwfSquBGR7UEYqSmEe1AEbdMZpr\/eNSEdhTWXPIoBERXrTGGfrUhFDD3oCxEetIRng09gPrTSOtBBGV+Xg0lPZc01\/vGgCPBPtSNx3waefzpjfdNVcBtMOe9Pb71NfoKGUNx1BpKc\/Wm1IxMD0FN256U+kZc0ARN0ppGetSsuKYVPXFLYCI\/5xSEY+lPK+tJyelbXQEZAx700rz1p+AKR859vapGhjLimhfmp7AN2puOc0AyMjdSY9qkY5xTCN1BNmRsvPvTTmpWHvTGxRcQ0rlcGo2U4zUo4696CPQ1QiueaQ9OvWpZBxnFRv06YpgR57dqidT\/DU5B6A0zr7EU0wKwXd3pCAOhNSkDHI6fxU1l9Tya0Hchx60zafWpSO1Rkbfw9KAauREdDUbj+H0qcjHXpUbKc9M0iGrEWPSkPSpGAJ9eaiK7fUUxETD7oqPYOoNWDUZ+6MY\/GhaAe74\/vdTTgKKfXEWM60+kx6UvTrQAAetGDSgUlAC49aXFNpw6\/SnYBF60tAGKcBTAAKUA0AetOH0oAQdacO2KQDmnD6UAAzS96AOKcBigBuOMUe1LTgM0ANxtpcjpRjnH40tArgOe1LtNIBS8e9Ari4yaReop2Bnmj360CEwfenYx9BRx\/epydKAGqe1OwDTqQDHJoGIetSDpSGgYpMaDr3p1FGMGkMAMClAoApKACnU0HFOHSqAQAingUnvTqAEA5604daTntSgUAKBxilpAOaXHpQAvFJ92nYxRQAmM96WiimgCilx6UoX1pgNpR14pfanAYNMBuBS49RS7aXHHWgBMe1LjHWjApf5UAGOMiilAzSjkYNACAUuMigDpS44zQAlKBml20oGaAG4pdtP2\/L70uPYUCuNwR60u31pcewp2MUBcPb2poG2nYPrRjmgkTA9P0pQM9TS+1L24xQMaBngUoH6U6kAxQITZS7f8AOaAaAMmlcdhUUgZpxGOMU5RhaUJmvkMzqOzO6mrEeM1agTp71EFwPWrERAxivzvl56t2bTd0XI14pz9OKiWSmy3AA617kLRicfK2ypesAprkdblUb+RW\/qV2EVju57CuH1m\/LMwHOK+dxs03Y9nDQdjA1GTLk1z19N15rV1CUnJOK5+\/lwCSa4qUbs9ZIx9RuNueea4rX7\/YhwQP9rNdJqs\/y5rz\/wAQXQw67sivqsDSuzCrojjNeui7N83AP415\/rVxnd0yfeut1ufG8muD1aUPISB1r9NwFOyR83ipGBeyEk\/xVjXQ5OBxWtc\/MzCqUsJb72etfX0mkrHgzTMkp83Suu8Cam9nqCKX4zwPesF7cMavaMhhu4iR3rplJSjYzhGz0PtX4Waybm1gOdxVcHnOK998N3JZFGTx618rfBy9LxQjPoM556V9LeF5sohJ9K+TraVD6G3upnpti+Rj2q8TisrS3zGM1qHNUndHK1qGcdaP5Uc5pfL96oBpBBp3vRtDdKcPrQIj3UlTUmOMUDuM5ptSgYpNgoC4mOM0nWl28Zo8v3oEJ\/KlzzimUoBJoHYdmkwKO1NoCw+m4GKUg9qAc0CExxxxS4zQelLigBv0PvSEZ+lOx+NGB6CgQ0g5puPYU\/Axih+lAyPbu59aNvuKkxjmkoC43aKZUvt7UjLmgLkRHpQR6U8L8v1oZfagdyPGKQj2p2O3akI\/\/XQMbg+2KQgdT0p\/U0hXvQAwgjrSY4p\/8NNINADNtB44xTiMUlADKKdtpMGlYBKMcYpcUlIA+lNZeKdSY9+KQFC7gyCRWHqFoHUmuokj3Cs26tsg8ZzRY0hKx57q+nB1JC1594k0JZkfKjv2r2TULLcD1rkNX07cpwK1pz5Xoevh67g7o+aPF3hnaXIAzXk+t6c1tIcrx9K+o\/FWh7g52V4n4t0TCsQMegr6jCYjmWp9bCftqd0eR3ZKkA4FZUx46nPtXR6rZtGTxgdc1z13GVYmvZi7o8bEKUXZmbK\/rVcyEf8A1jU03B645qjKx7GtU+h4NVtO4rSb\/QLUZfmmE8g0isc073PPnLUcASeTV2xs3uHAUZyar26FnAx7V2\/hTSDPKvyZ3EDpQ3ZXZnCDmzb8F+EPOdGaPOa918KeD1RUwowMY4rM8EeHRGkbBPmx97pk17R4f0ZY0jbb8vpXzGMxT2R6cYeziP0LQVjRPkFdvpVhjHHWk03Tc44rp7GxEYHFfOzlzO5hKV2S2VrtUCtaKLavSmQQhB0xVoLjioRg2JtPtRtI9KXAJ5owaLeYhqk54oIOelOwKMGmIb39KMfN\/WnYNJt9OtACbaSpMCmheSKm4Dabg+tPxSv1pkjdvPFMI45NSEYIowODQPYaee1MwfWn7R70mDQGohHHFMxzmn0mOM\/jQMaRmkK9akxmmEZoAaRTCPWpNtNxzmgBpGc4ptSbabQAwjsaCMClIxQR6UANIpMGjBp2MAGlYBp600inkUhH\/wBakAym7BUhBppHNAEbYzxSflT3+7TWXacUFCUUHOeaKQERG40hHpTm9c02k1YY2kbpQXAPFRtOB3FILCkZpCMVC1yA30qJ7wDnNaXHYtUh6CqZvQCOd1N+3c9eKdwsWmXjgUyoPty+tKLoHjNJNMCUr3pCMe9MEyk8GlyvtTJYlNb\/AMepxGPpTX+7QSRNSU8gUxuaAGke+aQ+maeRkU1s9DVDIaKeBzydtMpFCkds03B6kU4jFJSAQ57Uxlxz3qSmnqfpQBGw\/SkKk8U9gc9ab35xSYEe0YHHtSYFSHPemkcU7gREc8UjZzzUhUgdKjK45NWNEfWkI2mpGXbyKTgrQMiI3U2TqKkK7jnNMZfX+dAEZGaQNipCMVGy4o2M2rCOdo6VGVP5U8jtTSPWncQw46CoqlPNMI9qtAN7e2KaRmnkdaMUMCqy7aY1W9nvTGz3p8w7lQqSeajYbRipmXOee1RlcNVg1ciYHjtTWX2\/KpGXPAFNK7jSuZsiZcH8aY6fhUpGfamFc\/T60wPdVp1FAH61xFhjnNO79zSY+tJTsAUo60o6UYFMBQOaSin0AIB6UvvRjinDHSgBaKKUdDQAbaXoKPXiigAHSil6j2pcH1oAPzo9\/wBKdgen6UlAriquaFXNGPWnUEkfNPX7tH8PzUi96DQdRQPSg8\/Sgmw4f7tKOvSkXNPqRhSfxGgdTSg96dxWENO96dTVpDFGaUYz2oz704EGgBtHpRTh0qgAdKKKUHt0oAUe\/wCtKBRSjrQAAU6mj0p4GaAEpwx2o59qKACil70DrVbgJS4NOooAUDBpMUoz1FKPpimAn4YpQMUAYp22gBAPSl9xS49KMcYoAMe1HPWlANLzQAnelwKMc0tACAZ7UoGafj\/Z\/WlVQKBXEx\/s\/rS42\/8A6qWl2UCEwTS42qaAPbmnUCGgYNAHvTs0n40DFpBwKbTv4qAsGAKXNIB81L7UABOKToKbT\/L96BjcYpyDrQB+FPiBLVE9ENajwOBUgFIi8mpD90V8PmTvc7Y6Ij4pVbBzmgnAqMuF96+O0UrmlrkpmwOtUrq82qSaSacAHJrJvbjg8\/rWk6tlZM6KdJNlDVr4kHB5rk9Ql3Fj15rav5c5ya53UX2qwrxakeZ3PWpqxj3UuARkVgag\/wAp\/lWrdy\/M35VgajJjOK6KMNTpOd1efAPJPrzXnmuy\/MSSGxXa61Ifn6V59rsoG\/Py9ea+yy+nqjhrP3Th9amySCc9q4u\/Bd8Gur1ZyXYmuYuI\/n6Yr9Fwi5Ynzdb3jJkhLHgdaiNr12j61p\/Z29BinfZcr0yK9ZTscPIY5s+fTNWbS3ImBGAQRV9rb86kt7fDAkcCn7W44w1PdPg45UQgema+oPCp\/drg9a+Y\/hHHtVCBivpzwoNsYz7V4ld\/vD1Le4melaQf3a5zxW2B0rE0cfu1xW4BwMVcNjhluGBS4zS4xzS1oSNo+lOox+dADcY60nannkUfn6UANwOaXGeaXAzRjjFADetN9\/4akIzRQAzqKMetKBj60u2gCPy\/ej+Lmn4GOaXGO9AyMnHaj\/4qn0UBcYAeucUc9KfRQBEQQaUdM09VxRgUAM59KMcUvPtTKBjuM+9GB6CjmlzQITA9BSbKXmgjNADccU1gT3p5HtzQf5UCIyMLTcVKefakOO2KB3I6aetOpOKChtJtpxGKSgBtNx608ikoAaRim49KeR60n3qAG7StIRinUm2gBMUlKR+dGOM0rAJUUsQYVNjjNLtJpWAw762wCAOtcrqtpkHiu6vUG08da5nUYsqwqdtTros8y8Q6dvRxtGR6ivG\/GGmBQ5IG7mvf9ci5Lcd68h8bQBfO+X869HCyakfb5WrtRPnbxFYbZzx3rj9QtgDxj1r0rxJFidwFC9a4nUYACxwOOnpX1dOTsetjcHeN0cXdwbW4P4VmTrj6V0OoR5JAUVhXCYc9q7EfB4ujysoswx7U2Nh2pZh1BqME59K0R89PRmppq75lGK9j8BaZ5pjIH4ivHdFz9rjz+H1r6D+GlsHMeADkjFcmJk4QujtwyTke0eDdLAERwc8HpXq+jWQwvGK4rwhahYgdvXpXpukW4VVAFfEVndm9WTZsadZhVHFbdvbgAZ6VBp8IwPpWtjFctzibGBAOKXb6U6ildkibaTHtS44pcelACY5pMelOwaPXmgBAM5pDzyRTsd6Q49KAG4pGHINPpNtADfvDnvRsHpTsfrSUgE\/iFNYDHvT+B9KPequKxFSNjHNK306UhGeDRcuw3leaMDpmnqD9aQ5pktjSAe9IeopxxxijH60EkZGaQj0p\/daT2FBQzB5pODzT8H8aaRQAzb7YpMetSU0jmgCOjAp9I1ADCMUfypcY7Uh\/lQAmDSEU4mg1IEZHamsvtUhFNI\/WgCKigijaT2pSfKWtRjHb04qF3+WpXGB61RuXwCc4rinXUTqhSchss6jvis+4vFG7mobuc4PNZN5d4U5ri+tI74Ya5dn1ILn5qoT6uE\/irGur0ljyaxby9fB5qo4m5t9VOpl11VJ+YUw69GR97H4159d6lIp+8fWsa78QyxDrXdTlzGMqCR6u3iJB1bHfrS\/8JPGo5b868Tu\/GbxAkudvWsi4+IzRswMm013wpSnscs4xjufRdv4kiJA3itS21pWwNw5r5jtvieqnBYbfc11Oi\/EtCV3OF57muj6tNLY43OF7XPoaK6WQZz1qZmyprzTQ\/GUU6qN4\/Ou0sNWS4QAMK53Fp2ZDj2NR\/vGmkfr0pVcOBg0nvUkCcZpp6U5qaRmquA37w9absFPZR\/8AWprfLQUIR6mmU9+gpMDp3pMY30opTzzSH6UgGMvtTak+7SY6igBlMp56dKaV44GKTAbgetNwKfj0+akINAET4z7+1NPIFSNzyaaRggE1d7juRUmNvNSEZ+tMIz7Uxkbdcmm8f\/rqQimnPagHqQkZ601gDxUjdKaRtoM2rDWTPfmm7cf7NOI7mm8FOtUtRDSDTCe\/AqTt04pCvP8A9emBER3NRlBjrzUp5FMIzQBVZfXNNYEj\/wCtVph94cc1XdcHOMVoncq5ER1PpTCO4qQqOeKYynPFBLVyMr7fhTCPepWX68UxkPXtTIPdO3FAFAFJXEWOHrmkGaOaWqAMClA\/Sl4xS44xQAn3qdg0D1pV6UAHpS0ADpQRigAoGKO3I\/CnD65oAKKKXvigBKfR36\/hS\/8AoVAmJTsdcdabin+woEN606kNIvWkncBcgn6UAjHTGaTB9KSmFxd496ep3dMUg7EUhPrUXL3FqQdKjp65PegGLjk4xRz9aQc\/\/rp2fypiHD6cUtMBNL6UAOpRSZNL2oAQDNO7U2lBzVASU0c5zSU+gApwxSDrSjHTNADl60Y9KP4jSjpQAAYoooqkAoHYdKUYo7c0tAAPpS+uDQBj+dL3pgLRjiilA7UAA560oxQBSgZoAMGlxxS0HnrQAYzRUg6ClA7d6BXI2XFPVaNoB5p2BjmgQgGeBSjjrSgAUd6BABilzRmmUDsOzxmgnFKBnrR5fvQAynD0pzfdpcCgCKn7ecUu3n7tL29qB3G4H96n0D60Y5xQIRVxS0uAD1o20CGDtT4x14pAMgetPTqaiezKW5Kv3jTm9qap5oY5FfCZjo2juiRscDNVpHIGQc1Yc4FU5m7GvhKs7M6oIpTSms68cFST3q7P0asy+bCkVnGbe53xRjXb5yD0rn9UYgnmtu8Yc1zmovnI9K0VmdkTEuZNxJzWBqUhwfUVtXZ+Q81zuoP8revevQow1NWcvq8m4Nz7e1cDrchO\/sO2K7fVXIjOOn96uI1hA5cH+WK+uwUUmjgrbHC6pFktjFY72gY7uma6e8tWY8rlqpizYnG3rzX2FOpyo8KUW9TDFo3TB5pWs2XnpjnpW4tkQv3c8YphtD8wwfy710KrcXIYckJXkg4qWztd7qMbfwrSa13d6t2ViTKoK+1aKohclmesfCq0McSNjmvo\/wALx4ReD0rxT4bab5cEYxivefDkO1VwO1efKXNUudE1aCR3OkKfLH0rcA+XNZOmR7UHFbCcAcV2Q+E82W4YNAAp2OKNv86skaBmlwd1B6U3HeqSuA7H1ox9aTbSjpQ1YAx60EZpxHqaaRz0pJXAZj9fekx+VTMAKT+lO4DMYpce4pwBox6VIDMUuDTsUUANwaMelJjvQRzV8oDSPWjJpSM0oXt3oYCY7YpCOKdjFFQAzB96MCnYOaMY5oAbgU3y\/epMdqQjBoGQ072p+PSm+X70DuIDml60m09PWigQf54pv8Hen0hGaBDMD0H5U3YakIP0pCMcGgdyPHPzCmHPpUhUjijYaBkfPvSEVIRimEe1AxrUlOpGoASmU\/Ge1JgUANpG6U771JigBCM0YI\/GnY5pCMCgCpeY2HNc7qXG4YrortsKRXNak33uahnVROP1ogA\/jXkPjaT92\/Y+\/avWdblwh9q8b8bTAKxyMV34ZXkfoGTRvNXPHfEOTMc9646\/jPzY9a67WpMzOOvPSuXvnzuJB9eK+opqx9viaacTk9Qi9B16Vztwu1sCum1Lq1c3e8E5P1rtjc\/M8yglJmXL171XFT3Bwx9utVi4U+9bI+HraOxqaMSL2P649q+i\/hi4PlAd8fyr5q02Xbdxn0PWvoj4ZSYePHb0NcuLV4G2Fl7x9OeEWGxTn05r0zRyOO1eV+DnzGAO2K9O0ZsFRmvhKvxHTU1Ow09ulaB6dKzNPOcZrTHtWJyMTj3o74zRS4+tKwhKKdx6UmPeqAP59KSnU3HNACkZHekwM0uPWj+XSkAlFFFFgCkI9adjnNIaQDfu0EU4j24pCO9ADSvSkPSnYzzSUAR5+lJkelS0h6UtQIt\/z9sU1yd1PK\/xGmOm2mULt\/zmmnqKdg0hA\/KmnciwyjBUZp9N9s0wQzHrSEe9PIzQR2oGR49uKQ9aeRzTcepoAaRSEU8jFNIoAYRikpxOOaRutACYNJgk+v4UDtkYp8cW45x1rNySVykrjBFkj3pTHjtV1ICB05o8jB6V5FevY76dPqzLlQ4zWXeAgHAremhx0BrPubVn7H6Yrw51XI9KCSZyl2rL2GKxrmNvSuru7MrnNY11b8nisVI9CEkcvdW+7tWNeQNg8nmusurf5WyKxru2y39a6qcrGjdzi9SgZQTiuO1fKbiQeT2r0nUbUYYHtXF61aomSM5r2sNOzOSqrI851aZ1yM1xmq3Lc5OcV2+uRbdxPbNcFrCfMxx\/31X12F1PncSc3eavNbv8rEDr1qxpnjWW1cDfjn1rK1IcnHSsC5YqOK+jpxT0Z85Uk4vQ988JfEso8Y389Ote5+EfHqXYjw\/618IWGtS2coIc4Feq+BvHjxyRgy8emc1zV8FGcbpGlHFNOzPvHRtaS5RMtnIrcVgRnNeC+A\/Gi3KRr5nP1r2PR9TW6iT5utfLVabpuzPWTUldGwfpTT70vUCg9ayTENPSk7mnY4xTW600MSkbGOaWmv0FDKGUUUvT3qQGnoaU8UHjNIc9qAGv0FM2j1qaoqAGUjZ59Pan9uKaRS2AZSE7u1PYd6YR6mmgI6Ruv5U8j0pp\/nVlDCM+1RsvcVIRn2pOOlAkREFeMUwjH0qSTqKayj1oJkRkACjbkY6U4\/cFMI5x1oJIzzSEZ6U8jctIwDHNWmIib0o696kKkd6YeP8A69FxjaqFeM9qt7dvSo2GD6fhTTsMrFeMflTMdx2qeSM5wBUeNp7mrTTGQMD09aaR6VKV3d8UwrikyGrHt9KB60uMcUuBmuYYY4p1J70tABQOKX60oGKAFHsKX8KSnHqMVL0ATHvRtp2KUYbpiquA36070o460u33o3AZT6Mc80UCYUY7UD60h4NAJC4b0p9FN\/5af59KixY7rUeSemafj8KWhBYbkelOU8dKYu2l+91FGpNgPQ806mcMPSlT7opbFbDqFf8AiNFIPr+NUAtS\/Smbfmp9IQg6Uq\/MM0mfcUZ9xTESUtNHU0o60AA\/lTsikFJVAOH0p9MHBpV6ZoAkHtQBSCnYzxQAA9qd2oHSigAoooqkA\/r0ooHXrSr1pgOoHNFLxQAAYpcdelFLg0AGDTgM0UUAOABpf60764oAzwKCQH0pdvrRspeg460CDHFLikJo7e3tQOwuaT8aTdTl\/wB2gYv8dIq7qdgUoFAhPrigDFLS44oEJjijpSgAilx3xQAmBjijp0NLS49uaAEwKMc0uOcUoFACYNGDTqMdKAI\/SnKMDrSgcYoXj+dKWzQx4OBmkdsU3ORSOR6V8fmVG9zupsikOM81TkcHPpU87AKeaz55dufavzTFxdOVmejTjcincAmsm9kGD7VaubjPNZF5MeRXFGTeh2xVjMvpRyM4rnL+TJJravpevNc7eP1rvp3OqJk3r\/K3O2ud1Ighq3r18jArA1IZU8dq9mhvcpnKaopbPr2rk9RgMjEAZrsr+Gufu7MPng4+lfT4aaRxVI3ORls+TjOPWgafvYLt+auj+wnk\/d9\/rSrYAjoPxr1fbJI5PZ3OcOnjkgdDiqrWWcHrnvXWvaBegJ7VSmsuOP8AvnNawrCdNM5p7Ld\/B06N2rX0HR2mvIwB1OetXI9M3SYAbr0ruPCHh0mRGKEZrV1vMlUtdTu\/A+lCCFMDbXsOhWvyoMdK5DwxpXlKnHFei6Ta7QMitaOpx1pG\/YxYUCr+BUNsgC9KsfhXsxVkecxCM+tGKdx1pMe1UK4hHHfrSY5zTttHT3oATGKUKKBzRj0pNXAXj2puME0+m9fpUJ2AUZ70fTFLRSATHOaMUe1NPWmlcB20elJgHn1pKX8vSq5QG49RSYyOM06nA03oAhXIpuPwp+RScVKbQEYwR15oxzmlx7fSg47VYAfakPNOyKOMYrOzAbSEU8imkZpANoxxTse1FADMCmsu3kVJ6mkxzQMiIINKc5p7Lmk2igBvb0pNlBBBpeaAGkY4NJt+bmn7f85oIzQIZtGMVGRmpSMcGmN97NBSGEe9NPXpUmz2prdKBjMZ5oIpzAUhFADcc0ECnEe1J+dACUjdKfgUyQBaAKF792uW1R8Z+tdLfNnIzXI6tJhj39qjc7qCuzjtfm2K+TXiXjS627hnpmvXfE0+yKTnGa8J8b3ZO8E+2M17GCheR+k5LDW551qk2XY57nmuZvpR8xPatfUZsueeB2rnryfqc19Oon1GLqe6Y2py7s85rnrx93OMYrYv5vlxnNYNy4ZuuK3ij80zKd5Mo3Bqkzc5JqxM3QVVblsVukfA4mfvXLenylblDnvX0B8MpxtjP0r54tHIlU9817t8MbkGOIrxwPlFc+JV4MeEl7x9U+CX\/dqfu9K9V0V87K8c8DXAaNCT1r1zRG5Svg66tM9SZ22nnOAea1R2rJ09sEc1r9ua5TmYmMcYxSdadgUDmmSB\/wAijAoApce9ADce9BGaXocYp2OaAG+tNI5qT8P1puMe1ABgU2nUYFABSDHvS4FBGaLAJj14owaWk46nmkAlIQaWilYBpHpSHFPpp9Mc0ANPSm\/8Bp9Jt46baQEZxnikwKeyegptC0C1xjZHem5NObdSYx0zTKG0M3rigj0oxwPSi4Cf5FIetPxwaa3WqWpIw\/hSU\/HtTcGgBp56UhFOx6YppQ0m7DSuIq5OavW8O3FQ20WW+hrThjyc4rzcTU5VY6acbixwjAPXigW+44HJ6VaVBjH61btbfJBIr5qcnOVjvvyopR6RuGSOtOfQlZT8orpLe2BA4qybMFelddPC8yOSWJszzjUtD2A4Xj6Vx+q6cIyeMV7JqNmrKwwK8\/8AEVqI9xHcd656tLkO+hWcjzm7iC54rEvlHIArodRO1jiudvyKiB6id1cwNQ53VxmtY+f0rr9RbhuK4rX5OH5xXtYaN2ZT2OB137zck9q871pgMnPTvXdeILrar8EVwGtS53YzxxX2eDiz5vEs5LUjya567PBFbuouCSARWBddDX0tLU+bqu5mz8Emrekao1nOpDHGaryLkk1XwVNd61VjgejufQnw48XmN4wX696+pfA\/iH7TDEd3X3r4I8E6s1vPGhOCDxX1X8LdfMiRox6fw5r57MaN48yPbwdS65WfTFrMJogRVmsDw\/d+ZAnP51u\/yr5g9JoQnNIRt9adtpjdT+m6i5Iv8NRv0FPbrSUyhj9abTyMthab\/u5pDDnrgikxThjPekIx9aAEP+eKZ\/yzp9J\/B+FICOmnrUj9RTTz1oAYRz\/SmVIxzTT3ouBFjjn60P8AMelP2\/pTSC3rTuBGabUjKevamkZ47VRRCQAdtNbOP51I4Pf8aQ9KCGRleOvWmN171Ice9MIx9KCSM9KHXnaKcR68UY3R00BC3PFNI4qVvm+bFMOR71aENIxx6U1h7VIcdMCoyOnOKQyJvmzUTgk9AtWqikXNCdgKxXPr+FMbGf1qyybuvX2qAj3xWidx7nto+tKBxR\/FSgVyiDGKUdaXafWlGfWi4BQM0nOOtKPrSuOwuPalPYind+etM\/Ok9QJAKBnPFRAZqVeppBYTb37Uo+7TuvAppwOMZpIW43JoyaVADwakqihvHvQ65NOoC7uKkAoQHB9aKKoAo27eKXqeaXaMc0gG0U2WdIxk8Gsm98QRWwPzAY96LlxjKTskbBdAOaja6iQ81weq+P7e0U7pQv41xurfFy0tyf34yPemoyeyO+nl9eorqJ7O+pwoOv61CdahH8a4HvXzpffHG1QkCXdj3rIm+OEbfdZjmtVRqPWx2xyiu9LH1CNet+m9PzqRdZiP8Q\/CvlRPjeGbktz6dqvRfGuNepcfhmh0Ki6Gn9jV7aI+ol1aFv4qnS+jfgkV8zW3xutPlJlwv1rZ07412UjAC5GT2Jo9jU7HHVyytS3R9DJIrDgg\/SpK8n0j4m291giZGU9812Wm+KobkAbw341m04vVHmzpSg9TpugzS9eRVa3u0nGVYVYDZ9qlMwFGKetR04GrAkGOKdTKcOlADxjtRSDHaloAUU4f99U3+E06qQBTl+lIPUU6mAU7HrRSjHegAwOtPAzTQKen3qAEVc04Z7072pcUEhsp1IB+tHNAB0+lBOOlITTlXdyaAGU72p\/TigjNAXG9uO9PA96KAPyoAXHqKWj9KAM0CCiilxxj2oAMGjHHSnUmOc0AJg0o9BijApQO5oAAKXHNOpAMUALSAYoyKTHvTAXApOKX2paEAwkCo3O0+1SmoZORjNefiaPOmbQZTnbPU1lXL9ecVq3CZ71lXUfWvz7MMA3qkerRmZV1cYJwc+tZF3ORkZFX71SGNY125GfWvknRcZWsepF6Gbey8nk89axLpjzk1o3khbPYVk3B3ZFddONjpSM67PBBNY10m855Na143Tis+YDkkcV6NN2BmBPBkE4\/GsuayDH\/ANlrp5kHoGNUZLfPavThVsZuJzpscMMD+lNa2x6bq2XiHoMVC8YPoeM10xq3IaMWa3BBHI\/pUQsy\/wAvO3txWwLbfz2HFael6MZWB2\/LmuqNQxcTO0bQnlkCkZH931r1Dw3oWzYNtN0Dw\/godhz716FoukeWo+Wu+hFzepy1qijoi5oumCMKAMZ9q7CwtdgFVNOsQm3it6CERqM9a+iowsjxakrj412rin0UV3LY57BRRRTEFJjjFLRQA3bTqKTqKAFpM80YpOc5FQUHelJo6fSloATJpaKbTWgmOpuMU6iqEN47UHvSjrS1KZQzHtRS44p1UK4zrSYFOPWl7cVNxjMe1B71JTSPU0cwCYOcUmPSnYHrRtqAGkGkx7inUhGRigBtJj2pcUEdqAG0EU7oKTbQBGy7eRR5fvTyKRlzQO4zg8UHml4IpBx1oAWmEH1yKfnjNIenNAiIjjApcf7P604D1pCODQMjpP8APFSbf+BUzFBQmOaTBp+z2ppHFABg9hUc\/AqWoLg8NmgaVzG1GTaG5rj9XmAz+NdPqj43c1xOs3GFbJ5qIq7PTw0btHB+LrrZE+CPqTXgXja6wSue9ew+Nr35XBPbNeBeMr3fKec8V9PgIa3P1HKoclO5x17cbiTkj8aw7yUHknvV25lLHPO4VlXTnaQCOOMV9AlY0xU20ZF6x9eaxrhs5yK1Ls\/lmsi4bcxHSrSsfnWYSuyjKeSaqueeKsTdKrP944rZHw1d3Y6J9kg4\/KvY\/hldgJFywxjkV4ypww5r0z4cahtZRnoe3JxWdWN4tBhp2kfX\/wAP7gNFEd3cHbXsmjSjjj2rwT4dXipHH8xyeu6vcNAmLRp6V8Di42mz33qrnoenNgAVtp9yuc05yVQ10ULZjUmvPRzsk20baU4oqiQo7cUUUAAzQRn60uO2aTH6UABFFGOOaMcigBD6Cm08gUHpnFACe9NP09qcRj60n0oATAowKVhjmkII6mgBMe9JTsCm45oAKKKMZqWA0\/Wkp9NIoASkwKceOlIRQBFTdrL6fSpNvy5o8v3pDuQ7D6Uo6Cl\/h4NNZRnr0oGKOuM0zHGKfuz\/AA0jYJz600SMI4pCOacVpp681QxP85pu3JIp\/JJpFUE1LdkNIuWkeACBWnDH0NVrdcgVoxJivnsXJnfTEKADir9riqUgwOlTQTBeM8V4sXaVzaaujet3FWzKqr+FYMd5sHWnSakNpy3H1r2aWIUUedKhJsl1GZRurzzxVdKAw6muh1XWVVGGcdq868Qal57kA8Vw1aim7nqYak0c1fy5LHPy5rnb+T5iK1rqXknNYN9J8rc471EFrY9fyMTVJMIf7oFcB4gvAuVzXZazPiN8GvN\/Edx8zkV9Bg43ZzVnZHDa\/dBSx6GuJ1KYEHFdJrs5LH261x99IC3TivtsNHQ+UxDuzC1BwSRWRcDP41q3gyaoSoSeeK9unoeLU1M1161C0VaDwnnvUTQ47fnXQmcrQ\/SJWgvI2z39a+jPhdqpEkOTnp3+lfOUCFZQQMc17f8ACych4+vAGeetcmJV4M68NpI+w\/B915kEZyTxyfWu3jOUBzzXmngabfDGM16VbHMQPtXxU1Zn0D2F20EU\/YfSkrMzGEZpjcVKfpTDkjnincY2mgAU7aP7wptK5Qn9KbUp9cU3YPWnYBvfjikOacRt9xTce9ADTkdBTKlpmOeTSAbTKfSfw8UmBExx0o6CnkUwjHvTAYfpUfINSke1MIOKsYymYzwaewyM\/pTSKBkbd80jfzpzZprLmghqwylb7tKR92mEc00SNPC1G5wKkI5prLjFAhlIQQKf\/BUR46mr3GIR2BxzmmkHb0z7U8jpzikYe9ICJl9DioW9QKsMu2oXHb+LrTjvYaPaVpaKUda57hYUDFA6dKQCnr1pFCfUUv8ADSgYooABmin45o2+9IVxoHY8UrHqAeKUFe1GfekIUkjoM01PvCk5Y09V2cmnsPYRVxSx\/dNOooAKcq7uTTP60\/Iz1+agTG1J3pe\/tTWIUZ9KYbhgKvNZ+oapHao2WAAqHV9XjtImJcDFeJfEP4oR6ekirLhuec0opydkepgsBUxcrQR2Hiz4iwaZG+6Ubh6GvE\/FXxjd3kWF\/wBa8t8VePp9TndjKQPY1xF3rLzE4Y\/nXfChZXZ+nYHJKGGjerqzu9Y+It3d7iZ2\/wC+q43UPFU0jkmRm+prEku2k7mqzguea6oWie5UoU1G1NGlJr8jtyxNCa83O44rNMeB1IqJ4+K359NDklh3HU3I\/EmzrwelSSeKTzyRXKy7lJ5NV3LDjNXGCOGdeUNLHTXXi0oOGP1rMPiyQtkFl56g1gXpIBrIklYE5Oa7qdNNXPlcwx0lOzPUtG+KGoaZIDFcnaD9016z4M\/aJMbxxXh2HPUdK+Ulv2BOc81IurPGRtYrj3rR4aFTRo+crYuE1qfpd4M+K9rqscZSdXB969X0fxBFexj5uDX5TeD\/AIpah4cuE8u5YRgj5M8V9b\/CD43w67DGGnCyjHy7q8XFZdOn70NUeW5Qlsz69Vt2CDS\/WuZ8M+Ik1CBfmByK6VSW5FeN3IasSD0NOFNWnA0yR69aWgdKKYCjHenDtTR+FPH0qgFHSnDp7UlOGD2oAXBpV6UDFP2GgAGOm2nYPSkA20\/r0FBIbKUDFJgdRSk4oACcUmeacq7uTT6AGf8AAafRjtS7aAG446UuPlpdtLQIaBj604DFHJpR1oAUfSjH1pcZpQM0AJQBR35p9ADAPSlxjFKRmjHGKAE20AZ5NL0o\/CmAUdaMmlpgN5pelLRQAUUU0cUwDAFIwzTvzpOc5FS1cNirNGMEmsy4hxmtx13LVO4gB7V4+KwylqdNOZyeoW+ATiudvoSARzmu4vLbcK5zULTbkYr4LHYblbaPaoVL6M4u7QqTxWTMD0rpb60PPy8VhXkJFeOlY9NPQxp+tZ0p7E1o3S7ax7mXYc12U1cvcjnIC5qnK45NNuLoDcdwOKzpb4dzwK7Y02JtInmPHWqzSDd1FUrjU1wRnB\/kaqPqK7xkjp61206LZjJo6CyiFxIBiu80HSgSmV61xHhk\/aDHx1NeueGrQMFbGa9GjQcjkq1LI6HRNIA2kL1rsbDTxGBxVTR7T7uRXT29sEUfpX0dCieHVqC29sEA4qxgAUvTjFJXqJWRyhjNFFFWhBRRRQAUUUUCsFFFFAWE5paTFLUjCk70UtACc0tIOppaACiikPUUALRRRQAn50ZFLTec0CYveloopWGIOlLRRUgFFJ0ooAbRTqT+KgBKTHtS0UANPWkp+P0pvvQA0ikI606igCM9B60mP92nccU1l20DQnb396XNMp3B4oGwxxikI604dKKBDMfXmmsCfwp+OOlOoAh2Glx\/s\/rTiPUUc9aAuMZcKao3j4VuelX5Dhayb6T5TzUsuOrOf1iTg1wmvXGM+ldhrEuFPNeeeJboKj5PrV01dnvYOF2jyjxxfkhxnnkn614R4oujLcMMnI969Z8b3oxIc89q8X1eTzZWOSfr1r7PBU7QufqeHjyUEjDm+vPQ1m3LcMPXitWZQF7\/AP1qzLpSB0+teoebidjDu+VyO1Y9zWxdg9\/0rJuDyeMUH59j9yhN0P8ASqr1Zm6VWfr7Vsj4qvuN712PgS88m7UF9g6fWuNra8L3PkahHkn5jiiSujmpO0j7B+Gt0PKgPPHQete9+HLjKD6cV8wfDG+3JASRtwflavovwteb405HI7V8PmEOWbZ9PF80T1XRZMovsK6mzbdGOc1xOhzdBXX6e2V4rxeplI0D1o9jThn\/APVSAUyBMH1owfWnY4o780AFFGM4pdtACHOaafSnfeox6UAN\/Cjv606mkUAJRjmjFKQetACE4+tIfb9Kdt3daQ\/eoAZRz7Uu2koADxTaXoKMf99UbAJg0hOKceeDSVIDTk9qD9adTfrQAhxSdqU5BpvH9KAEk6io24UfMak\/4FSP93rSGiJ\/vGlBz1pWTL7c\/wDfVNf7xpjeovbmo26mnEcUw8dadwSE+lOiHzAUmTnNSQ8tis5bDNW1GQB2rRjAx0qhbfMB7VoJ0r5vFbnfT2GSfdqs0hQ1Zl6VRnPB9q8d7nTEbJfeWvU1RudTJBpLjABrNnY4qkzRRRR1W+cq3X865LUZ8qeea39WY4x1rlNTc4YHNXG7OymrIybqblueKw9RnAB5q7dTlSzd8Vg38\/B\/Ku+nG7ubmHrExKN7E15t4hk+Z\/b1rudZueHPHI5rzrXZwxbrzX0mDhrc83EPSxw2uvkk8\/jXLXfQV0ussJN4H1rmLrv0r7GirI+XrPW5k3CbulUynPNaUq\/NxmoVi9RmvQUjzmrlHYD2qNouc4zWm1up7fhUMkGG6VopGbiU4oNz9K9c+GIIkj5xXmdtb\/OOPlFer\/DOImePGOawrv3GbUY+8fVHgUn7PDkdq9MtceTjPYYrzTwSNsUWMdK9Ls\/9UeccV8bP4j3XsT5pn4VJsPtTT6VAtBhFIRTsGg4\/GgzasM60m0fNSkc0EUCGUY705l28ih\/umncq4zaMYprdfanEfLzTSMHmgY2kI+opxpKQEfH92mkYxkVK31xTWxQBFSMO9Sf1ppG7mlsBERkc00jmpWXdUec8U9wImHrimtUpHPtTD1qk7juMZR9aa3X8Kew70wqPpTC1xjA00jHWnFTjp0pGXP0oFykZGKXO1aP1pD060EEdDZ60Up\/LFWJEPegj0xUh79xTSOxoGRt\/k1FIvA561Owwaay7hTTswPYlH40+mgU4ZrlLHgelMpV60tMQmPWloPSkwR1\/WkA\/hT60Z\/2aZ70cUrBYPu0tFFUMKl8tfU0z+D8akpAFOxt+am0UxDvM9qPuUL\/vU77w9qRIAfWs3VNQW0iLE44q7PII4ixPSvKPih4wXSrOU7gGwe9G+iO\/B4aWKqqnFbnKfFH4krp8UiJJ83PevlzxX4rmv52ZpCSTxz0rR8Y+KJdWvZW3nGTjmsXQPCt14k1GONFJ3HrjOK9ClFQ3P3DBZdDAYdJL3u5j2OlXuuzbIULc8muiX4X6msG\/yWNfVvwl+A1vY2cTzwB3IGSwr1+X4WWS2uzyRwOwFc9TGJO0Fc8mrnWFw0+TfzPzZ1Lw3c6cSJY2AHXisuS22Egivsz4ufC2C2t5ZI4VG0E9K+U9e0\/7FdyxgfdY1rSq86ufVYSrQxtH2lI5iYBRiq7nAORVyeM7jVSZMJ+tdkbHJXi1dlKXvx14qFk5btUkh+bOajdhtwK7UfM1LNu5n35GCAePasWf5iSDWlfv6fSsaaX5vxr0qK0Pz\/NKqc2RySbRwarvIfWnO+TzUDnA613xR8dVqtsd5pU9cV0HhPxfdeHdRimilKqCM4PauYdiRgUKSp9a0cU1ZnA6jufoh8DfivHrtjb\/AL4eYOq5r6g0PU1vrdTuycV+Tvwc8eTeF9dhUyFYHODk8Cv0X+F3i5NStIWVuGAxzXx2Y4b2M+eOzPdpT9rDU9hHWng1FBIJYww5yKlFeQMeOlOA3Gmj1NLTQDlp46U1eaePSqAUCnYyeKQDvTgMUALUtN\/75pQAKBMWndetJj0peMe1BIc02lAJNOVd3JoKHKuKQDApw60UEh3pwOaAMUo555oAMcdKXHpSAelOoAMY4oA5pcc0oz3oAOOlLSd6OlABjnpS0mTR+dOwC0mTS0U7AFFFFMBM0Y\/Kj86M0gFooopgJ+dH4UUYoAWik70tACYproGpxFKBnFZVfhKitTPuLfI4H6Vh39nnIAxXUSIDnis+6gDDpxXwGZSSuetRdjgr+yxkYrmtQsiM16Jf2g2nA4rl9StRzla+JjV949qEtDz7UYCoOB7Vy+qfID049a7vU7bAPHWuI1yPCPgV7OGkm7G72ucle3xUHHGPeubv9Z2vw\/A\/iq1r07IH6jFcJql+VJBJ496+yw2GU1c4K1XlNmXXcZ+Yn1XNVX15dwGe\/OTXIzX5I6n86gXUjvHzfLX0EMFG1zzJYhs+gvh9epOU\/hA\/hr3zwsMqp+lfL\/wqvjI8eSUJPpX034RcMkf+6KwlSVOdkOcuanc9O0iMbVNdAhCgYrB0Y5jU1vA8CvRpbHlT3Ciil21uQJRRRQAUUvWkoAKCMU7AptABRQTS45xTASilH1o5FQAlFFFO4BSYpaKQCHpRSikxQAtFFJzQAtFFIeooAWk\/xpOc5FLzSAWkyaWkoAOKT8qdTakBefagjNGBS0AMoopW60AJRRSGgBtFFFACNTT0p9NoAYfWmVKfWm4\/75oGhMZ60fjTaKB2H9abj1\/WnUygQ7A9BQODilplAWGXHCE1halJhDWxdOVyK5zVJhls1En0N6auczrE4AYk15j4uvNqSfN0Fd5rtxhW57GvJPG1+QjAEr+NdmGjzSsfV5ZT5po8j8bXoPmYI6ngdq8wujvkbmu08U3BmnK54zXIzx\/P719vQjyxR+i9EjLljIz7VmXibccZNblwCBisa8U8Z7V0Hl4r4TnLvjIxyO9ZFwcnnp0rXvs46msic55oPz3H7mfNjFV3GDViX7pqs3WtkfF1tyNTj8Kt6fMYrpGXqCKqt96nRnawNO2hwJ2dz6W+F+q5+z7W3PwdvoMdq+kfCl6JFUj7ygdvSvj74ZattEQVsOMe+a+n\/A+o+akeWDcA7j\/OvmMyhZ3PpaE1KKPdtDk3KhzngfjXaaZJytecaDckqmTzXeaXLuCnNfKM0kjpVwVFGPcU2Igrj0qSgyDApNtLRigAowPyoxxiigAyKMCijFADev40mPSnZHrQOhoASkOad\/FSUAIfam9uadxnpSZ74oAYRz060MMc06gjk4FADTimc9Kk20hHNADfzoxjvSEYopWAMUhAIwadx3pD1pAN\/KkpxxmkagBp6U1s96fzzTGXbyKQDXHf0qPvjPFSMmOopsn3RQUM+nWmEU6kPXpTGAOGzSx9c9KQ+9LHwwxUtaAatq3APNaEbYHSsyB+BngVdic5xXzeLO+nsTSEEGqMvU1cc5XFU5Bw1eR1OqJn3PRvpWXNnnNatzzurMuiEBoRrEwtUAxjvXJ6n1Yj0rqNSlyTg1y2puCDmtYHXA5q65JHtXNak42nmulvud3oK5fUz8r5z\/WvVorWxbdjj9alZQ+MZ7Zrz\/WmLMRk13ms5YPjg5ridUttzOSOvFfUYRJHk4h3OJ1FC26uduEKn3rsL+3yTkc1zl3b4djivpKUtD5+omYkiE9qRIMdavtbHdwKWO3PYe9dfMcfIUzBntTDD82CK0zamo3gwSMc01ITiUooTvXHU1618NbQ+fGK86tLbc69OteyfDLTPmhypHf9K58RNKDN6Effse\/+EY8Rx8V6LZjC1xXha32RLx+ldxaDCgV8q9z03oSFdzU1lxUmO2Kbg9+aRBGBzSMuKWgdPu0BIYRSHI609l2803HHFBAYJqPutS4NN20ARsuORSEYyDT3+6aa\/WjYpDDjHFIfvd6cy44NNPWlcYmD6UjLmlPFFMCNuOTSEetO+Wm4z2oAZUZ\/GpvY0xqSAiI7Z6U1uvXNSEY7U0jjmmtAIyM0xl+X61Mw46UwjNUNMi2D0phz1zipWXuB1pjZpjGMvcUwg56VITjpTCPUUGb0I265qNifmqY9OlM+hppiG7Rj3pGBHB59qkY++M9Kix6Ve4CHqaYyhhTuvsRRSYHsOT680oJpaQZrmLH0\/kGmZFKhHrQSKfuE96YM0tL6cUDEpcfKTSUUxgPanLz7UfTNHrzQAfx\/jTo\/ummcsalpAFFFO+bpxQIbUtIOlB4XNMRja\/ei2tXbPQV8ifG7xg0tw8Kvxz3r6U+I2qfY9MnI7KTXw58SNUa81aTDFhkitqKvK5+mcKYNPmryWxzUdwbm4G45ya+l\/wBnbwpDeXKTuoJ4Oa+Y9OA80H0PrX1P+zv4ht7cRo7gMpA5PetcRfkfKffZlGbwMpQ3PsDRNNjs7VVRccVbuZBGjE8ACsey8RQNaKxdc49a5Dxn8Q7bTIZCZlQDIJzXl82lo7n4vDC1sRWtbU5r4zaxEmmT8joQK+IPFEyXOozMOmT0r1P4r\/FE6000UUmU5Xg968Rv7\/zSTuJau\/D03COp+0ZNg3gcN7+5l3RCZrMuZODzk1au5ck1j3c\/PFerShc48fiFC42U\/N15qvK+FJxx2qOS57dP61Slu8NivRjTbPisTjIRT1Ib7p7VjTnrWheT7x0rLlbdXp0otI\/P8wqqU3YjbrjPSmEk0MT3pOAOa64nzU3dkZGw+tCKTyak2e1KFOaoz5SxZytBMjqeVOeOtfa37M\/jR7u0it5JMlABuz+VfFEK8g177+zzrpsdZt1ZgoJ8s88kV5eOjz0ZKx7uBhfQ\/Sjw7efabVST1HFbI6muE8BXxls4wT2Fd2PmANfELsazVmPGfWlpF60tUQPX3p9MHIzUi1QDhj1p3tSAfrT1XNADgP8A61KM\/lRS9\/aggX1o\/iFHUU2gpD1+\/Tx+NJwKUZoEKtLQMUDp0oEJxmn\/AMNNp4xnnrQAAUuB60nJNPoAKKKTtQAtFFFUA3GfrTqb7CnUwEzS0g6mgdKQC0U3mnUwCiiigBMUtGKKACiiigAox1oooAUUqigbaVa5q7tFlR3GSDjNVJxkGrj9Kq3ByDX5rms7XZ6dPoY16mQelc1qcQ5J9etdVdEYPPaue1TnOa\/Ped81z2aT0OG1iHaCSO1cD4iiJRzivSNYArgvEKBg2K9\/CVHdHYtjyHxJERuOe\/G6vNNcJWUnP4ivVvFEIUSZHb+KvKdeXEre38VfqOWz5kjx8WrHNSPtbGaqm4IkXnipZgQfwqkzc5Pavr4PQ8KTsex\/CW9AnjG7vX1d4Qm3pFnsBXx18KLjF5GOPvV9ceC5wY4gCD0rzcSrVLnXF3gex6KwKLxxiujB965TQpPlHSupQ5WqpPQ457j+lJRQM9q3uZhRTqKYCdaWg8dqMc5oAMY5owKUmimAlAGKKKgAppGKdgUdqAE20lOxR+dACfhSU7qKbQAUUUUAJ1oxS0UAJilopOtAAf0paTmloAKKKTPFIA5paKQ+lJgLRRScAUgG0rdaU9KRutACEjNNzke1OP1ooAZRS8+9JQAhzS0UUANpDntS0UAFM56U7FHHtQMbt+WnY4xS0UAGOcGmvwtSKMVBcvtWgDOvnCg1ymrzYB966DUpRsbmuL1m56rmp6ndRjc5XxHdBUcD+deM+MrwuznJ4FeleJ73ar8g9eK8e8VXQff78CvYwUHe7Pu8rpNNM871aJprhjnjJ+XFY8toVJ4+v1rpntxJIzYB59KhuLDj7u0H9a+ojK1j7BK6OLu4SBnBIrC1EYJ\/gGP1rstTtCoIwxBrkdTjK5\/wrdO55eLVlZnLX2CTx7GsW4zkmtzUE+Y8dOaxbjvx+daLU\/O8fuzOlzjjpVZutWZf6VWb5hWsT4utuMbrSDnmlb71Ju\/ziqPOZ3vw51Iw3Kpv24I\/KvqH4eaku1OQPQ+lfHPhq+NpfxncFJOOa+mPhvrG7yzxz0we9eTjqfNC57ODktmfU\/hq68xEwef5V6HpMwKrzXkHhC+81IyHPpj0xXp+iXHyjn9a+FqqzPUaO8tZA6CrHWsvTpsqBn3rVByM9OKhamLEooooEGKKKKYBRRRTYB1owKKKkBvPSl20tIeBxQAlIQfSlxR92gBuPrRj3FOKntTTQAhFNwc089aSgBpGfemmnkYOKbQA3FLjjFLjnNIeeDSYCUUuBSEZOcUgGkd8U0jNPxjk03AoAYU9KbT\/AJvamN\/tUhojf7xpGG3FPb5nqM\/SmUNpRnNKRj0ppFIC7BJxxV2OTpzWTE+w1bjlxXj4qlc66TLxkyMVFIcA1G0ox1qvPP8AjxXz7jY7VqQ3TgHBrIvpgFY96s3NwBnHArE1C7BBGe9SkdMUZWoXH3sGua1GUMT7Vq6jcZJ5rmr6fLHniumC1sdkVYo3cnDGuU1aYbTnHHWty9uOTiuV1ufapwevrXq0Y3ZEtDn9SYMJM8iuZvYVZTn\/AMeNbl3NhcCsadxsIwa+ho6Hm1Fc5nULcANwOK567swG61192gaPjtWLc2+457D8q9elOx5VSBz\/ANjBXBpRZ44wK3BbLt6dP4qZ9mGPpXV7U5+QxWtiBnGSKhMGT3rZlhHbFRpamQYAznitVJNXMXBDNI08zXKADIzXvfw60UxJGSOcV574N8NvNMGK9cV9BeENE8mGNdv5V5uLracqOqjTtqzstBtdiLxXTIuEqhplrsULj8q1WXbXkItjaaRTtuBjNI1MREy4oZeOTTuFFR0C3BjkUuadtHXFMoGJ5fFIxPWlIzQV20ENWGHjrTdvGDTvvUjD3oER4PcGkPPP86kZfamN7UmUMOO1J09qcRt9xTe9UMQjIqMjsakIx0ApGBH4UgI26Cmn64p5HY009aTAjIx70jDnNPPemMuaYEbDApDkfUU84\/8A10z+GmgGEep\/SmN1\/wBqpKQjsTxVFER54xUZBx0qUqScmmY7iglojIwPamHrUh4XFMP6mhEAUb0zTMN6il\/i9xSMuaq4DSOxprD2pTz0pD71VgPYeaUUvbrSD2rlLFH60vsRSUq0wDbS980D3ooAKdtA+9xTakj+6aQDR9M0qrin0n\/oVACBc9eadSAY4FPXNAhtFFSDpTATaf71JN8kR+lOxkiors4ipbAldpHkHxduiNLn5r4w8XwFryRjnqa+w\/i2Q9lIOeRXy34msNzvgcn+dbUHofu3CtKP1Np9Tg7XIaup8N+LLnw9dLJEzD1wa597YxPUUjkf\/XrsWtz7KMVGm4yVz3yx\/aFnhsxGxfpXFeLfipea9u\/euFP8OetedQy8YzUdw\/4VKpU4u6RyQwmGo\/vIw1LF5qDzsWdtxJrNnmyDk\/jQ0oP0qrcSg5x2rZJtmGIxHu7mfe3RDYzWTPIHPSpbpjvNUJT0Oa9enBJXR+YY\/FSlJ3EaYbcVSlbnJNOdtx68DpUUmcdPwrsirHyeIrOdyGTJqlL19quNzVaWPJrrifO4hX1K5GaAuBTiM8Ypyqcc9K1ueYo3eomPagKc9KkCE8dKkSPcfWpubRpDYhz0r0r4TX5s9ctiCQfMAz\/n61wcNuSeBXY+B0NrqMTL1DAj865qzvGx7eDpuErs\/ST4XXvm2Fvz1QEV6yvKg+1eIfCGfdplmecGMV7XbNuiU+1fCvSTDELlmycDNLTVNOpHMPTtUimo07U9fpVgSLUi\/wC11qMcfjUo6CgTHAAd6dRSe9BIE4peetIc0oGO9Ax3anLSU6gQY5zSgZpKd24oAMc0oFGPajHOKAF206kwKOtAB70HrS0h600AZNLRRTAKSj86PzpgFLTf4qdQAUUUUAFFLxQvWgA20lHU0UAKvWkoo\/WgBfxo4pKXdQAg709uM0wU9ua4sVK0GawWpHJ0qpcN8pq1KcDNZ9wa\/J84q2TPTpoo3Lda57VGyM+xrbumO01z2ptwwHvXwcZXkevTWhy2rnk81xWugOhI4rs9VxziuL1o4B557V9BhXsdi2PLvFEYIkPXivLNdj3SkknqRXq\/ifLBgv3Twa8w12MrIfzFfp+VyskeTi1ocVertYnt71mPgnPpWxfoRIP4fwrIlHPXoa+4pO6Pn5qzsdv8NbnydTTv8wzX194Hk3QR9jxmvjDwLMI9TQfjtxX2B8PrgPaQ+4H8q48X8Vzpo6wZ7h4ekyqjFdfCcoO9cVoEuQuDXZ2pzEKmk9DmmtSalXrSUvPWugyFo\/CjAo+tNAFL70e1H1pgJRRRUgFKKSigBaSiigA96KKKACiiigBG60baX8KbQAUUdTS7aAEopdtJQAUUUUAIeopaTmloAKKKKlgFFFFIBMCmnrT6b\/FQAlNPtinUh9qAG0v4UlBGaACikWloAbRStSfWgAIoopfrQAe1AHSlAxSqPagBGwBWfeTYDEmrkzhVPNYuoXG0HnFJmkFdmTqlxgtXC63d4Vua6LV7rCPzXAa1dZYnIHHWqgnJns4WndnJ+JbpnD469K8y1iI3EpwK7zV5DOZAO2a58aaZ3J25r3cO+Ran32CXs4nILphXjkk\/rTZNNbBG3p6iu6j0BiB+7wKjvNEMSElSCPaur26vZM9eNeOx5Pq9jtUkrz3rgNat8EnoR3r2LX7Hy1kAXvXk\/iKJt7HHcnHqa9KhPmVzPGWlTucHf8k5rEugQTxW\/fIckHpWJcoTn3rvR+bY6N7+ZlTd6rMDt96tyjknoKrsOPTitL2Pi661ZA33qKVhSVZ5bH20pilVgeQcivb\/AIaa2rCIGQgnjp14rwtMba7v4e6x9nn8knjIODWNRc0Tqw8+WR9ueCdTLJCD\/dGdxzXr2iXOQh3V83+AtYV1jXoRjC5zivd\/D16rwpg18Di6bhKx9InzHqGm3GQpzXQxNuArjNKudwHNdTYz7lHIrzo6GLLpGKSl6jNKR71puSNopfrQcdqAEpe\/pS9aT1pgFJS59hRnjFKwCUd6KKLAFH0ooqQE203j8KfRgUAMIppHtUn8NJt\/zigBh9qT73tTjx\/9akIoAaRSYFL7GkIoAbS9uaU9KQ9BQA0gUtL70lSAymSdRUhyRTT0pARHP\/66Y\/3jUlFBZCcnvTT1px+lIfypgJ1Oc8elPSQkEU1m3U3vWNSHMiouzJmmKjpzVOe4Azk9Kc7YHSqF0x2nFeHXoW1SPRpTRSvrzGecGsO9vMZ55qbUJWUmsG8uCcivO5LOx60I3K1\/d8ttaufvpsKeavXUpJPNYF7PgMc9a6YR1udDRQu5yDzWBqrl4zg1rXEgbPpWLfMCByK9aktbmE31OdvI8kkdqynTIbNbt1+8PHFZc0WAenSvWhJHBONzFuU5NZcqfMT0U+9bd0u8NWXcLkkV3wkcU42KhXAxjPeomUZ45qyVLc+lC25dunWulHNJXKP2cyHGK6DQPDz3kqZXgH0q9ofhuS7lUlPlr1Xwp4SEQQ+Xj8KyqV1BaCjT6sl8H+GPs+wMnzV6xommCJF+WqujaKsCL8vSussrcRIvpXlSk5O7KnLoiSGERoBjBqQ9Kdj2pKm5iRv9400+1SN7daa3HHarTuMjx7GkP31px700\/SmGxFRUg46mmtjPFA7jab3px9aQ4oC1wZcU04JpP8adQTykewelMZdpqUdOlNf7poFsRMM0jHJpzLhqQjNK4xpBORRS\/wAIpp+tFwBv4qjAwMU9ueKQjG4UwI2GKYQCM4qRugptIBjD1qNhz1qSmtgVQER6fhSMuVzUjc8VHTTuNEZG3kdaj25NTEUwrge9MbIgO3WmnjnmpW6nOaYR2oMhntmmH6\/jTyM01s55oAQ\/IcGoyMU8LtpDjJ6dKtMD2Bvu0n0oAzS1zlhTqbSgZFAD9h9KO2Mc02igCamqoHOaI\/umnUhBTl+9Tacq7uTQJhg7qbTvv07AoAWigDtRTEOPUVXvP9TU69u1RXgzAfftSexcd0eIfFQYgkYe4r551uIPI+RwTX0h8Uoi9tIcDvXzprAImP1qqD0P3fhqVsKjjrzTw7E4HWsi50wrwR29K66QBwTkVRuYQVrqVz7dtcupx5haI1BOCM1u3FmHY4xWdc2ZjbpWsXc4arXIYkrEAiqEkpx159K2pbU4zj9Kzbq0OTjNdlOyPlsXzWujCu\/vdeaoTVf1CFlboazCxHWvVprQ\/OcbP940yBupz0prjCmnkfN1pAuK6UeBNXuRGMEdOlQvFk1eWMsM4\/WmtEc4xVKVnYwnRujO+z88DNAiIqy0ZzQUwM4Oa15jg9ikytsIOPzqxbplgTSiPJxirlpASQMdaJOyNaVL3i3awbSCQa6Lw+wiv4wO9ZcVvtUHHQelaWlQkX0WSMZHNcrd0euouJ97fBO4Emi2Enqo7e1e\/wBnzboeOlfO\/wACVP8AY2n5B3FQx\/KvoixUi3TuMV8dVVqjODFfGyfbS0mPSlqDjHr05qQflUa5qQcjFUA9alHC1EvSpAcigTHU+m\/pTj0oEMqUcHpUVSBj3oGx4+tLUW49aXcc0Ekg6ZFPqDeRUofNADh1o5Bop9ABSGlopoApvOcmnU3GfrVAOopKB0oAWiiigAooowaACilI9KPwoAF60lOooAKMCjqKMCgAo+lH1ooAb1NFOpy0gEPY5zjNNIAp\/wDhUb9+1eJj52gzopLUhl4FULknmrsh4qhcHJNfj+cVOZtHq0jMuWO01z+pnqO1dDc96wNSGQQa+Vhvc9aByOpueQelcbq+SrDPFdlqf3j9K47Vhw1fRYR7HStjzrxFHlX\/AMO9eaa7Gd75H416j4gUfOMdQfevNtbh3dv85r9Iy6WiPMxK0OC1FMOCB+FYU+c8mul1FAAx6YNc5cJ857195h3dHzlXR3NTwrOYdTiI7HNfW3wxvd9nb4Y9OlfHmmTmC7jb0I619SfCfUg1nAme\/wDnissWtLmmHd7o+lfDc+FQH0Fd5YNlAM15r4ZnUxoM8ivQ9LkygGawpu+hNRammvWk6GlH1pa7DnCij8aKACiiincAooopAFFLjNOoC4UUgFLVEjKfSY9aWgbGUU+m4qR3Eo96KKADAooowKAE5pKX+GhutACUUAZooATmlopOaAClpvOaUdaTAOtLRRUgFNJ7UlFABRRSE4oAaaKU9aT9KACiiigBPxpaKKAE9KWilAzQAo60MdooAxUFxIAKBla7kwDmuZ1S74NamoXGM81yWsXgGeaXWx2Uo3Zh6zf4ViT+NcFrFyWZvmOc1ta5qXzHaa5KeRpZeBnd6V2Uo9WfTYSlbVmdJEZ5sAd62NP0ndtJWlsrHzGUgHmuu06wKRDIzWtSpyrQ9mdbkjZGXHo6hANvSs7VNOUROCAP6V2rWwCYI96w9bhAiY8e4rnjNtmFKs3I8S8V2m2OQYzg4GOa8Z8TwFJm7MSevXNe5+KotwkUj5Tk1494otw0zkqC1fT4SV1Y+mn71I8wv48sWIrCul46mur1lcE4PI7CuXugNxOK9qGp8Hjo2djHnU5JAqlIOtX5V52\/hVSRc1ofE4iOpWIyabUpFRMPmzVnjzWtgq\/ot59kvY3JwM81QpUYqwIpERdnc+ofhpr4dIcsMkDpX0h4Q1UPCg3fN0r4i+GXiExuqtJtwQDX1D4E10NHGWbrjvXzGZUNbo+ioVOaJ9EaRecrzya7DTbjBU15foWo+YiEfhXd6Zd7gGr5Npp2Olo7OJgVqSqNjOHUc9OKvA5qkzEKTHH0paAKoBOn+9Rtpen4UUAJt96PvdqN1LQAUynEZpCMUAJRTuB15pKTAQjNGKKKVgEPf0o20tFIBtMPFSN1ppGaAG03bTjRQAw9qTHWnN1pv9aAEpSKXFIaTAafemninnoc01qQEO3b0pCM8GpT0qNvm4pFEW05xTSKmKbh70x\/vGgBnT0puM05qQ+tMZE6jniqlzHleOtXmGSaY8Oc1y1oq1zWD1OV1G0LKTjjrXL6haMhJANei3NlvzxWFqGk7gcDrXg1rJnu0Kmmp5vdhlLcGue1B9pru9U0sqW+X2rjtXsyobANFKSZ33OYvZ\/LDEEVh312PmB4rQ1fIV8GuQ1G4YOwz8o\/SvaoQ5jkqSsTz3g3Nz\/9eqc16Nuc7VrGutSx1IYCs2bU1DZzlf5168KDPOnVS6mtPeA55+Ws+WdeeayptVwueBVN9SJbk\/rXfCkcU6tzdRwxxxXU+HdEN66EjO6uF0m4M90idz7V7f4D08Sxx\/LntUVvciKElJ2Op8MeE1jRDs9Oe1ejaToqxKPlH5Umg6aqKMCuvtrIQoOAa8h+89RzkiC0shEBxV3A6dqdgdqD6UjnGn2plOpDx70AMb8qa3HHapKiY7quOwISm0v\/AI9SVQ2N\/wB3FIy+lP71GVI4oENpPzpaKChDx6UlO46Uw+9ADSPm5oPy04jNIc0CZHyhprKQKlb3pnLmkSMbpTafTKQwPPI\/CmkZ69KceetBFUBEfemVKV9TUZGPpSYDRhj1zUZ4PFS1Gy5oQDW6Uwnr3xUrU0\/SquBF1ppHPSpCvtUZU81QyJgQKYy85zUrLimGgLDD\/MU08n609hnrTSMUENEdIcbeKeRt9aYV+96U07CPX6B1xR1pOtYli0v50lOoAPpUvlr6moqfz\/dFIQv\/AC0\/z6U6iimA77lH+y1HzdeKfSJCjjFFFMApfSj3xTqAGnrTbhcoe4p4NKRlSKVrjvrc8o+I9kJLOU4xgGvmTxDGY55Bjoa+uPG1kJrWQeor5W8bWbW1\/KpG3k06O5+x8LYhSpcjZx7NkVUnbHJ\/HFWH5JHpVW4JAIA7V2I\/RZSvEg2hiSaqXkI29Oe1W0Yfl\/Oo7o7k+vpTWjOJ6wMRoAeevPNVp7Pd0Hzcdq1WQA46fWoSA3JIxXSmeVOF9Di9cs9p6VgfZ88YzXca5ag+4rn0gXd0Ptur1aM3y3Pz3M8P\/tDRkixPYU5rAAZIrditQT93ipja8ZI9uK1dRnDHBpoxINP3sFxwPapLjStiZKjpxW5bxKhzUlzgoc44rJ1Hc74YODhqcVPbbC1V\/KC9Oc1vX9tuLEDj6VQFmS3Oea7Yyuj5uvhXGVkipDDk8jNa1jaj2\/8Ar0QWmeQK0beIKeopSloaUcPy7kiW+Pwq9pVszX9sq4JZhiktYTJnHFdj8P8Aw2+r6\/bYQ7QwJK9hXNKfJFtnRUhpdH2F8GtO+zaVZKB91BXu1uu2FV6DFea\/DbSfs1pCNvAAr08AAADoOlfJN80nI+axD5piY5pw60gp5wQOab0OYVOvFPWmL1p49KsB46U5cjpTR1NSovFAmOH1xRSgYpScUCE+tHQcUv8AFxTTwKADnv0px6UntSnpQAnNOjOKjqRPu0DZPTh0pq9OlPoJE70d6Tk\/SjnNUA6kAzRj8qWmAg6UtFFABRSjFLQAn8VKOlHUUUANp1FFAB3ooooAMe1FFFABR25oooAMCnLSUEZGKluyAOmfao26U7PXHSmt0r5TMp7o7aSIJf6VRnHBq7I3HtVOU9fevyPMGpTaPRpmZdd\/rXPalxu+ldFdEYNc7qZHTqK8aMbM9SmzktW+UtXHascqw\/Cuv1fqf7tchqrHaQRXu4bRo6uhwev\/ADMea8511Art+P516Prh2s+P8mvO9cypPHtX6Blz0R5+I2OE1T+IA+9c9dDOeK6LU+Sf55rBnUcmv0HDPQ+crLUqRkxygj5a98+D2rZMaltvqteAsfnBPavTvhVqbQ3yAMcqR9a3rx5qbIou0z7T8K3W9F+YnpXpujTZVe3rXjHgm9823hIIYYzxXrGhTHC5\/nXl0nqb1UdaDwDzS+1RxMGQVJ9K9A4gooopgFFFFAAPpT6KKokKToKPXNL70AFFLj60gHvzQAUvej+VJtNABRRRQAnBFIRTqT\/9VJjQhHNJT6ZSGgptOooAbR0pW60cUANPSg9RS0UANp1NP50vX6UgFpOOeKWmck1ICk5pCe2aKQmgBaaetGTQTmgBKKCTSNQAtITnvS02gBf4aOKZvFOoGOp9Rg04H6ZoEK7BVzWXey7QecVcnkIUj0rF1C52K3NBrBGRqt2Rk5riNb1DaHOeK3dau9oYE157r1+WcjdVwjzM9rDU7sxtRut8jNnK1QtIWlmAIyc96Life20HLVueHdNZ3UkV3v3In0sUqcLs2NH0zIXK5\/rXU29lhclefpS6XYbQMCtxLMKucYrz5Suzy6lW7MC4gCjkdq5fWxtjcHPFdzqEIVTivP8AxE+A+enWnDWR0YfWR5b4qj83eQD6Yrx3xXsjLMQefevV\/FF4EVySM9ea8V8U3jTuz5xz3r6jBpn19+WlqcFrLZJA55\/CubuV+bIG410WpYLMD\/KufuMgt25Ne\/BWR8XjdWZcyjcMDiqUqkd60pkyO1Upuas+SxEdCk4xnFRN0qdzgnioTzzVI+fqrUZ+dFBxRTOZ9zZ8NambG9Q5wCRmvo\/4feJsxRneMcHr1FfLEcmCCODXpfw88TmDbE0hVgeOa5cRTVSFjtw1Xlep9w+EdZWcJhvwr07Rr4ZX5q+avAHiPesZ317l4f1ESqgDZYelfB4mk4Sse\/G0lc9W026+6c\/St6JwyVxek3W5QM5PSuq0+bcBk1wx3sZtF6huOlKACOKD9K0JEx70UvFG2gBP60UuOlBGTQAlGKUc5ox+lACf+O0yn0hGaAG0tHHvSUAH9aKM0ZFQA2jv1ooPFADSKQjFLxSUAI1NpT9Kbn15oAX09M0hozznvQTSAQnbScmlJ96aTzSASk696CcU1m3cCkAzt15pjevbrTmYH3qMnPUmgsU49elMo3Y60mePemAfh+tSxID1FQ555qeAYxXNWfumtPVkhtgR0qldaeME4FayL8v1qK4xjpXyVeep6tPQ4TV9MUb8AVwes2GA4xXq+qqrg9K4PWYMluKmlOx6dPU8h17T+TgbcV51q8TIXGCrV7HrtoGB47+leaeIrIJ5oHFfTYKqr2ZhWjpc8x1JmTnJ\/wCA1gyXLFsk9OOtdFr0Wxnb7tcjdSBCQMV9nRXNE+ZrOzGXN6SvBqibxg2c025l5JyaoGX5utehGCR5spu9jsfCtz5l5ECe9fTnw3hX7ND9B92vlXwjN\/pqdzX1f8NpN0ERz1Ary8fG0Tuwzume2aDENi5GcVu7qxNEf5B7\/wAq2SfWvBe5tLcD7U1utKW98UhP51JIhOKaeKCc00tzxTswBunPQ1H1oZufrQe59atKwxN2FyaaW9aRmzwDTM85phuKzDrSb+MU3dSZNA7D+N2O1JTcmgnNADj196bRn1ooAKa3Wjd940lApbCP901HUtNd8UmQhhPemnrS7qT+EUihKDgUUUAIy5qMDsKecd+1NPU1QDMGmn+dPOKY1IBhOKbt9v0px+uKb07UwEP0php+7mmFsnvSYER470xl+YehqRvbp3qKrTuVuIwpr9afn2\/SmN2piY05zxTGz60rYzxSUGZ66D2NL+lIOlLWRYvXtTl+Y8UlAFADk+8Kf7D+KmKuaeOv\/wARSAWiinR9TQII+ppy8Dmm\/wDoFPoRI3+M\/SnAZ+lFL070wBadRTfyoAX6inA00fWnUAYmv2X2iE8flXzb8VfDxhmeZR1znjpX1RcRedERjtXmvj7wut9ayDZnIPap+GVz6nI8f9UrK70Pje5UxSkEd6o3UnB\/Ouy8Z+HpdLvnyvy\/3jXE3YO3bjB716MVzao\/bKeJjVpXiyssuH606SUEYziqUsoRiMnNJ5u4H\/GrcHcxhX0sOkkAJHFR78HORUE02w8Hmommx15rRRdjmnUSZW1Vt4IHpWEkQVzk9K3LrLdPugVlmPD49P7td1LSJ8vjqfPVciWJNoyefSpWZe\/aogTtpjMT0OO1W02ciVloTrgc\/wCfpUcmcYPf8aYrk4NSOpx9KLGyWmhSmi81hnjIqE2i7vT2q3KxQioZZ+Oa1TdrHnVIxvqR7FTjinwtvkA9e1VGkMj4Bx2rV0nT2mlHHX2rU89u7sjb0HTzdMBtPPt2r6U+C3gP7PHHcyRkO5BGR2rz34V+CZNVvYmaPcikE7q+u\/BHhlbK3j+TpXiY6ve8YnHiqqpQ5Udb4Y00WtsnGMCt5sCmQRiKML6VJg9K8haHyrd3cbSqOaSl781oiR6+tPH1xTR0qQCqAVelS\/lUaing8UroTJAc0c496B1oPSmITPNOHShV3cmjGenNIGJgClApvTjqKU8DFMBM81IoweKaFYmp0XHJoBjlFOpM8cUtNCENHNJ34p1MApB0oHSlpgFFFFAC45paKPwoAKKKKACl60lO20ANp22lop2FcZRT+1FFguJtptPpGoaBMQc0pOBmjrSEVhUlZFJXY0nPbionORUjHiq8jV8Dmlbc9GmiGU4WqkhyasO+arTNX5dXnzTO+CM+8fCn2Nc3qLjJx2reu24IzXO6gCQTWEGmz0YKxzGqfMWFchrA4Jxmuv1Btu44rldUQFTmvYodDr8jz7Xf48\/jXnuudM8e\/pXpWuQ5BHPPIrzjX0xkZ2kYA5zX3mXSvZHBiFocFqR+9+uawZ\/vY\/Dbmui1Fc5ABFc7crxnjiv0LDPQ+brblCRiDmuj8Daj9l1SLk9fu1zkxDFs1Z0WcxXsLglQCOlely3i0cidmfbfw61Jbmziw27IDDnpXtvh+43bTnr618x\/CLVfNtEUOXx\/gK+h\/Dd1lVIPpXgWcJtHoz1Vz0q0fdEKsnpWbpk3mIK0QSOa9GOqOBi0U3qaKoQ6iiigBy0tFFUSFFFFAC8fnR\/DSe9L19qAHUU3FOoAaaSn03H1oASigjFHOfegA4pD0pab7UmMSin03FIYnbikbrS0HpQA2kPSnN1ppoAWkFLRSYCHpSbqU9KbUgIDmgmjgim4oGFHHSl28VX1C+tNKhM19dQ2cWM7riQJn6A9fwp2FdLcm5oIrz7Wfjz4Q0jPlXU+pkf8+kPy5\/3jj9K43Uv2pbaEMbHRIiF73l7t\/RVNbww9Wfwo46mMw9J2nNHue00mDXzpcftM+LHVGsfClleo548gyFVHcs7YUD3Jqtd\/tH+PoPmXwvpBU9FjaWY\/+Omun6hXfT8V\/mcss1wsd5P7n\/kfSTAntSdetfPum\/tF+KwUbVPDuj2sRXcVNxIsrfRRkg\/UVtWv7T2lq4Go6NcQxn\/lrayeYPwDhSR9KxnhasN0vvR0U8fh6nwv700e0KStL5nFeeaT8efAesSeX\/ba2MuM7b6Noh\/31jFd1aXcGo2oubK5hvbcjiW3dZFP4qT+tc8oSjujtjKM9mNupcA8mub1OXOVzW3eSfKcHmua1OTCHJrG93ZHfSjc5HX7rajHPWvNte1DazNkYrufEkhCP\/OvJfE11iXaM9cV6OHhd3PsMuw\/Oy5o8v2y55PXpXqPhuzXC8AivKPCjYlDEnPYZr2Lw+wCAj8qrE6Ox2Y+PJojrtOtlCgVp+SNvQYrLtJ9qjt3q3Ld7FHNefbufNyi2zM1hOCOv9a8q8YymNXP5V6Zqd0rI3Oa8t8cTKYJOR0NbUVeR6mCi+dJniviy9ZkkI9T2ryXWZiSeeMfw16H4nuctLg7e2SeleY6xccEbua+xw0bRPqcQ0oHM32GfI9eKw7sANkdfrWvduGJwMA1kXDgMef1r1InxuK2KEmBmqEvP4elX5m3d6oyHFUfM4m2xVcdCKh3etTOByfSoSMD6VSPnau4w0lK3WmZ9KZxsUDFX9IvjaXaMDgZ5qieBQuQQaVhRdmfSnw38RF\/IJfPAAxX0v4M1ISxxjPcCvib4Yay0c8cZbkcD3r6y+Hl8ZIkBJwFHIP518zmVJX5kfR4aXNCx79oc+dvI612Wmy7sD6V57oNx9znGOvNdzpcnK4618lLc6pHSRHcv0qQrmobd\/3YyanyParWqMRu3nmjHOaXI9aMimAUyl3n8qMj0oAO\/TmlPtRvUHimFjmkA78qQ+1N3HrSE+tFwFz+VJSFgKYZB+VJgSU1iDTDJzTTJ2pASFh1ppwO9MMmPSmGQL1NFwJdwpCeahM2OpphuR60rjsWCfemlh0qubgDJFMefsDSuFi0WpCw9aqG4b1phmPrQFi4XA96jeXtVUy+ppploHYsmQD\/AGqY0hPWq5nwO1IZl96Qyct2ppYCoGmpplPTNMCwWNMLgelQeZ+NNMuOTSAtqxLcGrUPUCs2F9z9a1bePLZrgxLsjopLUs5I4qpcuSSeKvmP5RWdc8Eg18fXfvHrUzE1JtwPNcfq6lw\/Haus1DkEGuX1ReDShc9CmcFrUXL9MfSvNPEyfO\/8q9T1qPl8V5p4oTaXyM17+Beoq3wnkniMBcnHzY9OlcFfyYcjNd54k\/i\/unptrz3U3\/et+dfoeF2PkcVuZ93J2rPd8tVmZ8nmqhU5HPSvXitDx27s6jwg5F\/H6Z719X\/DSULaQ8j1FfJPhZyLxMetfUvwyuMwp+FeVmCvG56GEe59CaJJlUA9K2tw6ZrmtDlHlpz2rdD47V820dctyYvmkzUDTBqa0pxSsySRn5pC3+TUJl9KPMPrWgx7Nj601n9KjLcc03f8poCw\/dSZNMaT05pjPzwaAbJc4pN1Rbz60gPpSuTqSFzu+lODlhxUW80K\/pRcq5JRn35qLeNuKbuouTqS7hmk3fNUe6jfRcdxxYnkmgn15ppb0pM0gFzjoabj3NJv4pN9FgH+mKCajz+NIT3NUA7efSmk+o4pG6CkJz9KAAnmms22gno1MY46GkAjHnFNOfzp1MJz7UMBT0\/CmEn06UfXtTSeCKW4CSfdNQ1IzZ7Y+lMY8461olYob\/FSH170pamE5pktjT0pm4ZxTm60z\/gQoIPYKBikHSlA9qyLF4p6feFIOopKAJGz26Uvln3pGUHnNOpCCgLuHSnIe1PoFcKPpSj2o20xDqb\/AEo57dKPpQAAc5FOoooAT3pwpvWl49KAHKeao6ppy3UR43E1d68inDryM5pvVWGnyu6Pn\/4neAhewyOiYcZ+bFfN+v6JJYXDI6kYPPFffGuaMl5Ew25yOa8O+Ifw0W68x0j+fntV0qvI7SPv8nzjk\/d1GfJ13bbecYqiQQcZ4rvvEfhiXS53jdMAdDiuSudPYZwO9eummrn26qKVpRZjzgt16Uzac45\/+tVuWBkznioGIj4xTvZWHvqyCRMk+uOlVHh7\/dqzNcAc\/rVJ7gdsccVrG9jlrJdRy2\/qf++aVoMDHFNF2o6CmPejPB4rRNs53GCVx+wA9Av40ksyhDxVNtQz\/FVaW83dKtK5yznCK0FurgBjjFU2kaRsLndmjynnbrjJrb0vQmkIYittInjSUqktitpOlPPJjbuya9T8CeBptVuoo0jO0kZbHapfh\/8AD65127jWJAI8gl8V9WfD\/wCG0WkQxCOIA4HzEV5+JxKp6Lc5a9Wnh426knw28BR6VawosYGAM8V7JpmnraxJgYOKg0fSUtYlyo49q1PavCT5ndnx9eq6srsD0ooNApnMFO\/GlTvSnqKL2AAOfrT1pgp60m7kjxnNPFMHU08UIQ4de1HNJTqYEgOe9JThjtQBz6VQwwKXjHpRQOtIRIBinL1pKKoB9FFIetNAA6mgdKWk7+9UAtFFFAB0NO+lJ6UuBQAUfjRRQAtJRT6AGU+k20tNCYcUcUUUxCAUtFFACH2paKb70AGOxpM4U04nJxUbda8rGVOWJ0U1cY7cVVmfrU8jcc1TlbJr8nzjEWVkz06cSN34qrKxOeasH7tV5BkV8DKTbO2G5mXnCn86wNQOSa373gH3rn7\/APi7e4rak9bnbE5jURuziub1FRtf19a6i\/AyRXOagowTXtUJHScXrMK+Wcfe\/SvM\/EkBVn4DentXp2tMdjZ964DXVBD47jnAr7TLZNNHNWWljzDUFwzVz18NrnFdfq0RBYY4P865XUI8k+g5r9Jwk7o+ZrxsYkvJIz1ptu3kyD61NKAW6f8A6qrcIOM17cXdWPNd0z6C+DuvIhRTJjIA+lfU3hS+3xREn71fB\/w315tO1FAW7jv0r7B8Ba2txbxMrZyB1NeTiocs+Y9Km+eCse9aJdFlUZFdEpyOtcJoV7wpz6V2lpMrxjmlTl0OaSLHPSkopV610GYtLSUUAL1pVptOWgBaBjvRScEVRI7pRxSUvpQAY9qdRRQAU3+GnUUAMop9Jx0oAbRQ33qQmgBab0o\/CkqbjQUHpRQfpmgYm6mnpS9TSHpQAnenU3nNKOtJgBx3pNtJ1o5NKwDSueKz9e8Rab4Xs\/tep3SW0R4VTyzn0Vep\/lXK\/En4n2\/g63e1s2juNXOBtI3iH6jPzN6L+fpXyt44+IV34hu57vUrrdKWy0UjlSiY5y3Reo4HToOc16OGwVTEO6Wh4OZZxQy+NpO8ux6t48\/ahmEdxFoka2USnYJXZWmb1Jzwn06\/Svn3xr8VbzU2NzcXTzruDCad1Zzz1+Y\/KPc5\/GvPPFXijyzcS2z\/AGaKNfLwdxG05yckdcc8D0rg5YLi5lN5dySzTL80NtIqEAk53vj77cDkjjgdq+1wmUQp7q5+Y43iWrXTXPZHqb+J3jj+3anqr6bBIDJGLfJurjnOdh4Ax3JAA5rCvPjVp+lSR\/YGmtjkHzFtkurgj1aWTAU9xtAx715rfrM1\/JJelrm4lOXneXcVc9evP9arLo8t6pjijaS7f7+CTj0HsOf1r1\/qsVpY8uni3f2lWb181b\/hv66neaj8d5juxPe3D7gQZ58tn\/ayWH5AnjtVW5+KvixYjcT3g0yGU4V3lYu3PRYgCzfXgVyky2XhxxHpyC91Bfv3fBEJ77FJwT71iTJJfOZZpHlLscyPJncc8gkdPp2yPpTVCkl8KOmlXdVqcNI93u\/RdF66+R1svxe1BGMX2i9vB0LXNybdG56+XENx\/wCBSVHL8WdWEbGQRwrjAjWBHAx7y7ifrmsOy0aaeN5yqW8AbJupXyq9+M8k\/rUcosLSYm3tPtjjGZ7gnbn2XqfqcUvYxWyO+GKpuSitbb6\/n0Xpv5HSW\/xWluC26FSSPuR20RyexJVBXXeEf2hpPDlyjxXU2jTKeLmymlt3T2JHykexGK8fvdUv5efO+zKTkeQoRf8AGqkuvaqrqBrGoDHA\/wBIfA\/Wuarh6MlaUbnt4etVT5k7fP8A4B9\/fDb9tGSYpa+KBDrVmxwuqWflx3KD1dQRHJ9RsPsTXv8AYeItJ8YaQNS0a+jv7InaZI8ho2\/uup+ZG9iB7Zr8g4fFuoQyfvJUuP8AbmhXcM9fmAB\/M16f8LfjrqngnVre4s9RfTp1xG3mtut5UP8AA47L9Qw+lfOYvJ6dS8qGj7H2WAzWdKShitU+qPv3xV8qNivGPEk+brk5GcV3Xhf4n6d8TtCaZI0stTRR59ruyDn+JDzwfT8ia898WAxXLgghcnNeRhYOE3Cas0fuuQqFeHNDVF\/w7fiKVMnNev8AhvUR5ac9q+erC\/8AIcYbv0zXoXh3xOIwq+Zg1WKoN6nq5jgJTWiPbY78cEHimzajnjP61xEPiZXAw2f900658Sxqp3MBXk+zdz5L6nO+xtavqgjiPz\/rXk\/jfWwYmAfp6Vd17xSqhyJOPU15P4s1\/wA+Nvn75r08Lh23c9zBYFw96Ry\/iTUd8smPvDNed6rceZIRjA\/lXRareFt2W+vNcjeSZLGvp6cbKxeMsZtye\/p3rKnGDxWpMMjoTWfPETk88V0p2PlMRG5lyDdnmqzgg9PetGaIDP8AP1qq8OcjBI9Ko+Zr0mzOdTvIqEqcYq68ZyOtRNBke1UjwKtF3KjLTdnfFWzEaYY8Hk0zilSZBtpVQkiphHinrH7daYKkzqvAszQ6imOOlfWPwyvhLDGWJGec5yc9uK+R\/CreTdox6A96+kvh1qhhMaOeCfbNePmEOaGh7eDjY+oPD10PLj5rvNPushGzjNeP+GtW+RAxPzY4r0DStRGB83tXw9SPKztkj0WyuAVBBq354PeuVtdQBUENVz+0P9rArJO2hi0bwmGOtIZRjrWF\/aJ\/vGlOpnHWnzCsbfmgUnngdTxWE2oc9TTTqWepFO4WN03A9RTXnHcgVhf2gPUU1tRBPWlcLG4bldud1NN2vXJrD+3r2Jpn2\/P8X6VPMOxum6XnmmNeelYh1Ff79R\/2gP7wouKxtm9PY003hHQ1iNqKjq9MOopn71A7I2zdn+9UX2ketYraov8Aepp1RefmoHY3GuRTftI+tYTaoO3NRtqoHpVahY3muR0zTfPNYB1UDt+tNOp++fxpaiN83QH\/AOumG6GBzWAdSPrUR1PtuosB0Ru8Cmm6HNc4dS4+9SHUu+6nysdjojdelIbrNc4dRA7im\/2h70uVhY6I3i9M4pGu896537cPWj7cP7xp2HY6A3anjPFN+1jHJrA+3e5pwvckc\/iKVhWOqsn3Se1dFZrvyRiuS0mTcAa63Txlc968XGT3R2Uo9S\/s3LnHFZl9HgEVskBY6yr4ZzjvXzFTVnoQZzN+MZrmNUHysRXUakcbmrltRbGcUoaHfA4\/WlGTXmnikDL9q9L1lh8+TmvMvFB4cZ6V7+C0kh1djyDxMu1nx92vPdUT5jz+teh+Js73PFcBqOckkcV+h4XY+SxKvIwp128VWZcHFWrnqarMc17ETxWbPh59l2nvX0x8L7seTH7flXy9ozhLpOe9fRHwxuTiPBIINcGMjeJ2YV2lY+l9Dn3QgkgfjW951cloNzuhTnNdEshZRmvmPI9JlrzqQy1W8z0o3570ElhpCO9J5nHWoDIKTzMNjOPpQMnZznGaaZB3HFRGSk3+9AEpakz2zTA3H+FNzzmlYgl3f8BozUW7bzmk30wJqCQKh3Z5NLu\/WloBJu75FGeM54qPzAxpN9FgJA2eDS7hUbPxmms\/emBJ5ntSF81Hn5sUzefakBKxPf0pC49etMyaTNMB+\/3NIWqPPBpNx9aQEpJz702mFuDSbxTAeSPrTT7Uh9iKYxx160rgOJ75phb1pueabnnr81PlHYezdBUbHnGaC2OP500n1qkrDsOP5gVGW4oZs0lMBCx6+lITnijjrSf+hUGYymHHanMe+fmqNvagR7FingU0elKtZFijNFLyxpf4\/wAaAHbhuxTh9\/dRTFbNIRLH1NPGah4AqUEdBQiRw5606m9scU6mAUUnXmjgUALRSdOO1LQAUDrSe1KOtAAOtO79KTjFID7VQEoAbgjNZuq6NHdxEhQa0V4PNTNjY2emKlpMqMnF3R81fFfwhH9nkcJhhn5vSvnDUsRTOpGNuc19kfFSJWsZjgZ2kV8geIbLfdTEDHzGurDVNLM\/WsjjUxOHvfY5O\/nXnGPzrEubkHgfzrT1G1kicgjpWDMp3Hqa9aKiz1akp03aSILic+vFZ8s7g4zxVuUkgjNVGXJOTmuiKPIrzk9mNWdvcZ701pSw5NIwwR61DI42+9aJI82dWUdLjZJcHJNETAtxVGeXlgKkhkGQeldHIjyfrTcrG\/puNwJOK6\/SJopZoYkOGJAxXnS3LLxmun8DTs+u2QJOd45qZQ0uy3jGvdR9yfCHwjDbaXbBUA4HavedK0pLaFW2jnpivNfhZGq6dbgD+EV64D8gGe1fHzfNPmZ8zi6kp1NRm7npjtSZz+VOOKT+OoOATtR1xmn0VVwESnGmhD9KWnoIUU9R3pAM0o7VJI9elPH1pg9cU8dKaAUetOpop1MCUdKctR0q1VwHUoGKQdaVelSBJSr1pKOetWA4HNHX6UidKU9aaAWkHU0tIPaqAB0pelIOlLQAv8NLTacOlAB9aWkooAfRTcZFAp3FYVaO9LxRTAXj3pKXj3o5oEJRRRQAUvQUp4FNbrWcnpcFqNJxk1C7fhUjt2FVZHr5LMq9kz0KUSOV+KrueadI2aaBX5HmFT2s9D0krEZbjFQyA4q6sJI6VDLERnNeR7CT1NIyVzEveVY1zt7xuFdHqCFcj1rmb8kZohFo9CLuYV+Rz9K5y+wASOtdBfsSTzWBf\/MDmvWobnQjjtZXKP6V57r5zuyDtzzXousL+7OecV59rke1mAPf86+0y\/Ro56pwerxllJOTgZ4FcnqEJ3Fj9fl9O1dpqKZc8fTd3rldSiLH5T3\/AIq\/QcJLRHz9dHOzR7egqjN93FadyME4x9PWs24NfRUtTyZqxLpV41rdo4bpX1L8IfFIuIIkMnIA718lF9jA9K9T+FXidrW+jV36YoxFPngaUZ8srH3Z4bvwVXnFeiaRch0HOa8L8F64LiCN85yK9Z0C8yF5zXixdmdFSJ2oORTl61BbS70FTjoa7jmFoHpSA80o6UxBTlptPoQMKKF+9RVEinoKOKSncdKAE59RTqQCjt6UALRRRQA0j9KdRTcH1oARvvUUppG+9QAUUnAFNoCwUdBRQelSUI3WmnpS0UAIeopaT86O1ACEc5rzr4ofFGHwrHNp1jMDqQUefKo3fZw33VGOsjdh\/COT2rd+I\/jZfBOgNLAFl1S4zHZwvyC+OXYf3Vzn3OB3r40+I3iwWlt5DzzzySOZJ5VceZMxOXfOR8xOeemPYV6OBwn1mdraHy+d5vHLaTUX735Gb4t+IcwN5qJVJ0KGOHzHCgsSMsSee\/ty3evItc8ZTakA8ccS8KTKqkKG2nnIBwQWOBnPc1U8RapP4l1yRlK3FlBIFfNuigKq5Az1JJ\/DgdcVp+EdMn1\/xJa6Tbx3Es9wGWC0sIBcSO4VjEuzIypIG5yQFUM3QV+i4fDQw0PabaXPwvGY2tjZxjbmb2Xqc5qAjlu4Sk4vJWAeBsSKFByBnOc9GC7j0BJ61XjtIJYfNW7VCDjlifJTBJbBxuGD6fz59JvPgN4klszPf2L20jhSZEkEhijG8RmZIBJsjdlKCQ\/Lv27mRTWHqPgNdPtku7W7tDbDzLaSOXzY5ftcWf3UsUnIJJQjyyU2bWwORW0MVRlaMZahUwGJp0ueUZRt3\/r9P1ORSa0LXEJiZJnJZQ8ZUAEqS7HHC7cZ9zjjpUbRf2bbyNYzMfNLRiQY+ZicbV9BuwN3tirV5I6nLlftAQiURqXAYngKpJ2hfp\/Oqd5iZ0k8uSJrjckcjEkIEPIC49T1xwQa6Yycrs5Y00ml0e\/Xb\/ga\/f1slnw6ZBZr5bwx+aABI6MCd2Ccrj24zjj071Jc29taYmEZEzLjaGIJ7hBjoM8+pqvNEAREAxufuxg7ePcZGD39AKj1GzGjRIEYy3c42iUrkqp7Dngnnn0z61pdfM9BRcqivN3fTv8AjoihfxS6ziWaNI8NwRjaAeoHbOTyfzqlNsgcBIVHAAZG4U9T1PJq4928SmON1RQBtYr8oA6E\/wCf8DnmVIIwzKWGwBi\/8ZycFh\/Qc1Mj6DD89rLZbL+v8xX0+4vJHJQp2LSEEKPwqje2tpASXuN3PRBnP5ZpL\/VZ79sM7BBj5Oij04\/\/AF1mswU9GbPJ5wP8a5ZNdj6DD0qqtzO3khZ5Ldxwj8d6gWRF4G7jpuoc8nCgZqM9a5HJuWp7cIpKyO18AfE7V\/AWq211Z3TGKE8RScrt7rj+6e46d+vNfXVp4q0\/4keG017SiPK+VLiHOTbykEhT3wcEg98EdQa+D8mvQPhD8T7r4b+IxOEF1pl1H9nvrNmwJ4ic9ezKcMrdj7E152Jw6qLniveifacOZ7UyXFRc3ek37y7ea8z6Oug8TEqfpS22vSW5wWz9KuX8UE8MV1aTC6srhBLBOoxvU9PocggjsQawruLaCQO\/UVxJKejP6ng6eJpxqQd4ys0\/XY6u28amNfv\/AOIp0\/jIOvL9fyrgJsjpn6VTmmdf4sdxmksPF9Dinh6ad7HUav4pMgJDHiuK1PVWm3EseOlNuLhyTmse7lJHWumFNRWh59dqKtHYq39yZSenesabLFjmtCYEnBzVKQEHHP510RR8xiLsoSoScnDE1WeMnt1rQePd1JqCSPcOB+VM8apG5myRbTxjH61WeEYI7VqyxZ6iq7xZAx+lM8SvAypIPaoGhIbjOK1DFuz0wfWomhB68+1UtDxqlLqZhix1GKXyDjoa0DCBTDAByOT9KtHHKkikYscY60nl88CrRQKGAz+NQSHDE9TQcs4qJe0mXypwc8da9m8Fa2IlQBvQ\/wCfavDLe4EUgJJJGOfSuv0LWzAyDdjB45rGrDniKnV5D6y8L+IlXZ8y4wMYP+f8mvTNH8RKVHz\/APAa+SdB8YiIoDJkdDjtXoWj+PjHgmQc8nnpXy2IwUk7pHb7eEj6ZtNfXAO6rJ18HjcDXg9r8RU+UmQHPNTt8SY253r6cHpXlvCT7E+0j3PcD4hH97H40jeIVz9\/8M14f\/wsVHGPNz6cig\/EJWGN+38aX1afYXtY9z21vEP+1TW8QhRnf+teLDxwXGPM5HFSjxmT1k469af1aRSnFnsX\/CQBv4h+dIPEK92\/WvIh4vJb7\/8AwFqePFODxJ\/3zS+rMOdHrP8AbwYfe\/WmjXlPRs\/jXlf\/AAkxY4DlSP73Wnf8JCzH75Bo9gx8yPUW10f3vz7U3+3FLfeHPvXmS6+5bhh+NPGtuepPNJ0GRzHpH9trj7wpn9tLjO6vPRrDt\/ESO9L\/AGu3979KXsB8yO\/Ot7W+9TDrXq1cINVLDqd1J\/ajbupPtmn7EfMju\/7YDcbsfhSNq4znf+NcL\/abcc9B2oOpN0DFf60exYrrudodZz\/Fz60xtZ55b\/69ca1+2eD7bc01r9\/XjrT9k+wcx2R1kNwGIqM6z07D61yH2+T5cHnPXNMN8+cbitP2Y+ZHYf2vnvn8aP7X2n71cgLxzz09KVb1lY80OkLmOu\/tb\/apw1X15rklu3xz3p4vW6g5pezDmOrXVAccmhdSz0PWuY+2tj\/2ValS6zjkbulS4W6FXOnGpAt71Zs7zzJR\/jXLrMfX6Vs6KGlmU\/e5rGeibKj0PRdFyVXBrtNMjwq+9cfoUYKqcYrtrCM7RgcCvkMXI9OCsi4xO2su+bCn1rSl4XFZV\/1NeL5nRA5vU2+Vq5S\/flhXV6kuVIrkdUOScVcEehTOR1k8Nz2rzPxQcB\/fmvR9aPysR+IrzfxQu4P7Ka9\/B25kKrseS+InJ3gdc1wOo55\/u16B4iQlpM9K4HVeG4Fff4V6HymJ0dzBuTk1UYmrExyW96qS8ng17UTxZMs6TJtnXjjNe6\/DS92PGB8uMV4JYnZKD71698O7vbLDk8VjiFeJpQdpH1h4Xut8SZIrrElO3ivOfBt15kCEHIIFegQNmMdea+RmrM9tlnfQX7GoSSKXPGagjmJN\/wBKN+O1RMeooBOfaloK5L5ntSb8d6YDnr\/OgnuaYXHq\/anK+etR5oz7Ciwh+73pM\/X86Z2x3paAHeZz7UZFMzxmloAdQGwKZu46UZB6GgB2+lz+tMPtSHP50APByTSZ9abuyM0m40XAdnP4UjNjvTScfWkJ289Km4Ds8YpM8EU3caTPcg0ASUhGaZjjgUhYAdaAF3Z560lMDFV4oJ6GtErFAxA5zzTS3ajPOM0hpgG7nmkbqaPb3pjdaAFJpu75sf1oJpCR0oIbDvxTdwzzSdOc\/wDAaTcf7poJEdufpTaM4FO7de1NK4HsPvSrSDilWsSxaXlTSUvLGgBKkj+6ajopAPXbUqtj6VFt\/wBn9aeud3FBLJAc077tQ1LTAcDmg\/nTQO1PoEN\/GnUyio5gH0UUDrVgL7UDIHNJSntxTsA5amb\/AFbVHH1NK3+rcn0qb3Gtzyr4oZOnzfSvlPVV866lDcZr6n+Kb40+Xngqf5V8sal897Jg9zTo6XP3HhGN8Ozl9TtVOSMdMVx2oW3lydOlejXkKsGOOorktZsuSQvfmvSo1LPU+lzLDc0bpHITR4ycVQkTBOQfSugltsZLD9KxdQUIT9OlenCV9D4rFUHTjzsy7qYJ\/CeO9UHvtx4GMU+\/PBxWQzZc54r06cEz4DG4iUJ2ReL7yWJpyvtORVSOUAVKjfN\/WrtpY4I1L6l+I72rr\/BSCPVrV84w4rjLI47d66rw3dC3uoWJxhh93vWM9jvhZ7n6LfCictp1sW\/u17Ch\/dL9K8F+DuofaNKs23DlBxXu1sd0CHPavi5fE0ePifjJSOOaKV+lMwPU0jkFUAD0pwHOaaMU4cCgAH0oFL2pAKBMeoz604DNIBTgMUEi05f1pMc06mgF\/hpaQZzz0paYD6fTKePrQAUq9KQdadQAUq9aSnD1oActLmm0o9\/WqTAdSDpS4NOqrgNoooqgHDpRTadQAvSl202n0IGNHXil\/ipaKdhXChfvUnAFLTEC\/ep3HSm0uPrQAY\/Wjn3p1IFFK4CN1pkhyacxz7VHIQK8\/E1eSJvTiQu3aq0zbehqaRhg1Skbca\/M81xS1SPVpxEAJarcUINQ26Z7Vowx47V8lRpe0ldjqTsNEXtVe4jGK0DFgVUukwMGvQnRtHYxhK7Oa1Ncg1yGptt3DpXaauAIia4TVyWZhXiyjZnuUdUYVy+4EViXv3XxWrctycHtWTeHKn+ddlJWO1I5fUwcHnoa4fxDHgE4xk9K7fVz8grkNYXIIwSTx719Xg3ZpmNRXPO9Sj2sTg7q5q+QMG6etdRrMW0n0\/nXMXp25AOc\/wB6vu8M7pNHg146nMXxwTnFZMzDdWxfsSz8DIrFnPDZPHavq6Gx4lTQpTOQeDzmtLw3qzWN8j7uM+tY8z7WzjrUaSbHDDqK9LkvGxyc1nc+zvhL4qW5tY1L5bg4r6H8NaluVSW6etfB3wj8Wm1njRnOQRX1\/wCCddS4ghYPu6Zr53EUvZTuexCXtIXPdNJuhIi5rYBGM1xOh3+dvNdhbTB0\/Wppyvoc0lYsce1FNp1bkBS+xoH406gGFG00Uvb0qiQ2\/wCc0oHelooAKKKKACiiigApO1LRQA3H1oI9KdRQAw\/lRSmmkUANop9MqShtFOIzSbaAGmjhQSxCqASWPAUDkk\/QU7v04ri\/i3riaP4SmtjJ5cuoBocg8iIDMh\/LA\/4FTinJpIzqVFSg5voeC\/GT4im8vb\/VnmjS0j\/0eyWR9qBMEhmPvyx+o9K+RPE+sJ4lnybzzC87MXKmMRp06kZ3HB46AYrsPjZ4uuJrqwt0nARIBLcbU3DaxZjgdMYXAx2H0rzqzt765F1avPb6YjS+at1eHZ5LRxyNtzyOhKgY5faPSv03LcL9XpJtavU\/nPPMfLH4qTUrf59TZ8M+Hb3UbXUbO2jZ7iZrcRwqWl8+QzxRMsIwPmPmrkEfKCCelfoF8E\/2cNO8LeC9AbWLK11DUZvMvb55bh5oVD\/MlumwqskfKFi+9Ts6HK7fDP2UPAuqa7Ha2uvW8ttpsd5HrNrEJV8ySd\/3I3oRuVFWGYl+CWUAYGd33paMk8FuV4RUwqqhVdvI6du2Pb614maYqVWo6UXp1Pu+GMqhTpfXKsLzaSXl3av6K3pdbmXZaelja7fs0EajcGFunlLgHsFAODgHH86+Zv2ydIjfwNHOJJvtE+rW1tEiyOZLhmjJkIBBD\/JCuE5243HqFr6b1GaKyi\/ehWiRAWMjfOACBkk4zwcnJzkgAcmviX9q34lSH4p31l562UnhSIrpVpJ8oudRmELrMMcFYg6s5PBETKODk+Tg4SliI8vQ+mzqdOOBqKrs9P69LP7vM+WotQurfS7i6hdbdb64ZyCqt5iRKCSeAygNJtxnBx9DXOTRxx2rrtzDCCzyBwVldvXGcE+2cDNdjrBs28LJB+6hs5VkigWbDTxqpAO9kA3tuDNkADkdRivO55U3MsEkRtpW8wLCgUHtjHbpxX6VBWTbPwijFValoaa\/1r99vvNO38nSIZrhwrSqw+d+OvRc9uea5+6uJNSljaZi6M7fOMfL2+n4elPuL554pIy\/ybd0fJ3SOCo4\/Pr9aouUgH2YSoQ2SyY\/izx+mauK0Vz3aVJwk3L4v+AI87Iohtx5xO5i0XyDGDkD1\/Ksy83QuPMdRIeCExhB16eucVeinNvbNEAySBseYq847457\/SqXCJ5kuGkIOBjpWU10Pfwys3p\/wf8AIrS\/dAIPHOM849fzqq45zk9cgVK7Fhk9Sai3Ej0Hf3rmlZHu0k0rkEi9ctio91SPnsOT3NRkECuR9z1IaLUXk04DcuO9MxgVNGuV56ChXuNy6n0n+zR4wi8R6TdeD9SkzcwZu9OkY84A\/fRfiuGHuh9a9S1XwdLCzbAa+bP2c9ROnfE7T449oupuLUPJsV5VOfLY+jJvXHcsB3FfoWfD8Gq6fBPGPMSRAQ2OSMcV8xmFX6tXcV1R+z8H5\/Uo4L6rOV1Fu3o+nyPl690G4jBAU49hWNd2EsQIKEfhX0vqPgZXBzGD+FctqXw+STPyd\/rWMMfBn6XHOac92fPF1G6Fgy1lXIxx2+le3an8Ojl\/3Z49q5a++HjKzYX\/AICa9GGJhLqZVMRCp8LPKZlA6VSkxubkc16Pd+AJkPCH0rIufA06Luxxj0rpVWHRni1m3scPIfm45xUZwfXrXWT+CbnshP4VUl8HXiHGxgR7c1anHuePPm7HLsvHHIxVdgMnPH1rqX8H3eM7DzUTeCbvoFaq5l3PKq8z6HLEAjr+OagbDHg\/NXWN4KucH5Tj6VG\/ge5VfuEnFPnj3PKnGXY5NiMnI4qJ5gBxXWt4JuMkFTx2preB5+6849OlNTS6nDU5uxxcjAciq0jHPQ813LeBJzk7D+Xao28BzEcxnP0q+eL6nm1FI4Qbs8A1dtZ5ExgHjqa7BfAkvUxH8RVqPwLIRjY340Oce5wSjLsc9Z6pLEwIJyK6Gy8QzJgBiCKuw+BJgMeWOuK07XwNNuHyc57dKylUp9WYcsytb+IbkgfOdvrV6PxBcn+I8+laFt4ElfohbHPT\/PrWxa+A5yR+6PX8q5XVpI0VOqzFg1W4ZsFia07a8m4O44966Gx8BSsFPlnP0rcs\/ALnAK9uuM1xyr0kbxoz6nKQXUwOTk1pQSzsMHdXZ2ngXaPud+WxWpa+CiqrmMdveuKWIpnTGlI4qAS9u\/tWjHFKfXbXbW\/gvA5T9K0IfB+wL+7yRXLLERNo0nc4WC1kOCAewqdLORhwpH4V38XhgMuNv6VbTwuuPu\/pXM8QjXkOASwfg4q1FZyHjGa7tPDYP8GB9KnXw4Hbp+lR7dByHApZN1bPJqX+zpPeu7Xw9tXAU9akGgbV+6ev3qn26HynBfYZMEkH609bB9vpzXdjw+B\/BuP96lPh8DkJto9r5i5Tg00+Tbnb+nSnLYP6da7o6EDnMdL\/AGGMf6v9Kn2w7I4b7A+73+lJ9hfdyoruf7DH\/PKlbRB\/zz\/Sj2wWOENjJ6H3pG09tuMcV3f9iDps\/WmHRM\/w80e2Hyo4ZbFieFp6WLdRnmu0\/sUf3aX+xgOiH\/dpurcXKcb9hkUcipPsLlen\/fVdf\/ZKr0QULpQGDs\/Kp9qx8pyaWJVs881Mlnz0\/Sup\/ssDGE4oXTv9kUvaXHY51LZuuMV1Hhyxw4OPSmR6Wd3Kiuo0PTfL6DiuLE1PcsbUl7x0ui2+0Jxiuvs49qc1iaVbBVX3Fb8I2x88CvjcRK8j0kRzjGfSsi9I5Na1wTzWLfSdea5LGkTn9RYqDXI6mc7ziup1VvlbHFcnqDZBFXFHoU9rnHa0Thvyrz\/XYfNDGvQ9YG8muH1tfkIHpXsYZ2sOpseQeJICN\/oK841cfOQfevTvE\/zbj\/6DXmetHBP5V99g3dHyuLRzkoG8kVWlJBqzLyWqnN8p\/wBqvfieExIiUfPvXovgS82TR+2K84J56113g+6xMoJHXFKaurCpu0rn1l4Dvd1vGFO7t1r1WxO6Pp0rxH4b3RdE547c17ZpJ3wj39a+Rr+7Kx70XeNy3t3UmPpU\/l+2aTy8cmuUkiwcZpcVJspPLz1FMBu2m7etTbPY0m33pAR4OelFS7PY0mz0p3AjOe38qT6d6k2H0pNpxzQAmPpTcfrTwm6l2+1LQBlFO2H2o2HGKdwG0n4Zp+32o284NAEZHFIeelPKjrTdvakA05xn0ppX25p5XHNJ1GOtICPOPp+VIpxzjj2p+0bsgUuOMdqq67DI9u7saXlc56U4gZyKMDPT5qkRB3+lJUgjI6ijaf7la3RRH+e6kP1zSkZoNADP8\/LR7fw0u0468Uw89qBCvzxTTmnEbj9KjfrQS9Rrfwim\/wC171Jg+maRlycigljD6ml6H8KCfm7UhbPY1a0A9iH0pfbNJRXOWOo53UgHvS0AOPV\/896bTv4\/xptAEvmL6GkXn5jTqaozz60hEkfU0o\/VqT+LinDpQSLS5HXpSUv0pgN9zSj3pAfelrEAoopc+lAC8daWkXpSg4qwJE6GifIgbntSL1GaS7bbE2aL2KjqzyH4qtnT5QOmCtfMWo4W6Yn1NfTHxUuFFjIDg8GvmTXT+9fB75p0dUz974RhbDX7mZczjjrWPfRrMrAjjnin3Ep3EZqFm457V1Lc\/QZ01JanPainlg4XFctd5m4xXXawRtPTmuVnTLZP6V6mHeh+f5zTtPlWxi3lm2zOKxJrVlY8fNXWXhCrx6VjXAAycV61Kb2PzPMcFTuYvKnpU8Roljycg0iHYcV13ufMqLhKzLtu+G5rb0li0yc9655HzwPlPrW9pB2yx57kVlJdD0acrn3d8Abx5fD9gDnOwZz619Laa2+1U+1fLn7PlyDodnjstfUGktm2Br4qt\/FZxYxe8XW+9R9aKKg88UYp1Mp2eM0AI3WgGigUEsePb9aeB3pgxT1oEPHSlpB0paoBwGfrRSL1FPHWgBR9KcPam0q0AO7806mgZp1ABThjtQOlLQAo60L1p1KM9KqwC0D6UUUwCiilVc8mgBAPail296XbVXATrR9ak5\/Oj60riuLRRRSEN20badRTuwGfSl\/Kn7aXGKrmAaBSnt9aQdBQTjmolK2o1qRkHqaglPNTSemKqynFfIZjiLJnoUoled+tQDk4p8ppYE5FfluLre1q2R6K0Ratk4rRiT5aht4qvxxYGa9jB0Lo86rPUjZcCqV3gA1oyfzrMve9deIVok0ndnMa25CFQeua4XU+5ruNYGFNcRqY5cV8lP4j6Shsc3eEbiKxbtsA+prXvPvEelYl45yfauyktjvtYwNUGQK5PUhvkOfrzXWagQFOTjNctqqsHOPlxX0uF6GczjNZgDE89z+dcPfxlT9f7pr0LVU3h+u7Oa4rWbYqzY745z\/n2r7TBT0seNiYnHX4GX\/pWFeAj1P4V099ENzbc9\/wrmr5TtIPevscPK589VVjHnbbxVXzD3HT+9VidcE8\/NVNwPXNe5DY81nQ+HNUbT7yNgSpyPwr63+EviwXVvEpbc2B3618VwyFXB7V7J8JfFrWN7HG7bRkCuHF0eeFzsw1Tldj738OakGCc16Jpd3vRcHrXgvgfXhdW8bB93FeuaFfbgozXzavFnfNdjtlwwBp1V7ScOo96sDpXanc5R9IOfrQBS1ZADg0+mL96l+b2oAdRRSDpQAUtFFABR0oo6UAFIDS0UAFFFFABTDxxSmjP1oAYcUfjTqaevFSMSjApSKSgYpUZNfPn7SOvxgakjy7ILK0NvnH3Xdd7fzQfhX0MibmVfcCvk\/4xXw1y31liw8t7qd5H6hUVmAB\/AD9K78FHmrwTPnc+qulgJ23aPjjXES61KfVJJZNkkhAVwd0RjwEz7lVBGOATjtUni27k1HWZbp4LaNJJGu3jOXjV3YN5Yw3zYZn78hOcZNWPEmjyaHNawNK11NcyNGWkPIBUZOB3xuP5VqW3hS1120tZbS+C2\/yy3r3JIjtTGsmQcAnnOVA+9nvjj9Vc6cYK73P5pp+0lVT3e\/9f108j6b\/AGTfHOiRXWp2ks0c+v6kY2j1PyXh+0NOTK9sxfIE8LvMSFYK0b5ByjV9L3HxV0B9FsdU1I31jZXW3y7ee1bfFlyY2dEyQSUAUgkZOCAc1+d3w\/8Ai9deCdV\/tLR4mMySW7ph2WJljEUggdOAyhowN+Ax3Ma988aftfWGtR2T6Wt8s9xHJJeWCOkM8UbgqEdijBtpyQVfBH905FfIY3Lasq\/NTjo7\/gfquTcR4WjgXCvNRlDpZ9Xp\/wAH7z2X4g\/HbT\/A+lxwRQQXOpG3kubiz83c8AXLMG2FhnOI9pOSz56K1fBuua\/qmpadHea1ds11e3Nxr11ezyZkMjRXCQxlRk4LlyeMYkjAx1rqNa8Y3Wt2lxY6dpd3aaVYW6tBCkiyGW5yWCsAOpMpZiTworybxNrN7PdxQvfpPE0QO2ObKbo1wozgDJwMY6ZP1r1MswPsHeS1Pns7zqpmFqaa5bXt6rW\/fQxvElzZNeQ+TFLmGGLz7eeQN+8IXcwKgD7xYhB7ZJOa5nUGU3Bghc7iWIm4yuec++CTj8BWpqF07TtLtjJj+YMe5C4Un8SayrvN3cXV4DyoyPywTX0zhp6nh4VOFm+34\/0\/uK08rTyM8YEWfuqv8OOignnj355qnLvSN2kyPbjofWp55\/tMqJklyMMQcdOn6VVdmViW5Dckd6drfI9ummlqQs2H3E9M1RkmM5K52qoO0Hue1Pu5DPORyFB59TUB6nnnNcEpXlY+qoU+SCb3aIzknJ\/Oo2JJ5H0qRuTjGR3pFGT06c1hJNnpwdkR+WOueaaQPTFSct2pCm0jg1k0dCk+o0hSMYxU0YyabgtxyccVNGvQdaqMdSJzLukahNomo2upQZ+0WkqXEe04IKMG4PY8cH1xX6mfBHWk8V+C4sYLxokg45KtyCQOB1HSvyxhAWUbhnknmv0D\/Yr1x5bPStLlDB5tLliLP1LRSOF\/8dFfOZ\/RTpQqLdM9\/IMS4VpRb3R79Po4PUZrKu\/DyEfc\/Su\/ksT9aqT6fjORXw3NJH6DHEyXU80u\/DavnMYrDvPCCP8A8s\/0r1qXTRn7tUZNLU54q1UktjojjZx2Z41deBVIOIyeueKy5\/ASn70Ne2TaRu\/hGQOuKqyaNuOStarETWx0LManc8Ql8AIf+WQFVj8PVyMovTHSvcW0Rf7tRPoY\/wCeY\/rWixVTuT9fm9zwqT4fISR5Q5zzg03\/AIV4BjMefwr3JtBX+7+lI2gJ\/cz+FP65PuZvGNnhzeAcniMD14qM\/D0MOY\/y56V7kNBXuuPrQdBU\/wAFP63Puc8sS2eEv8OAvSME89hTf+Fdr82Yx16Yr3ZtDUqRspr+H1JyUP5Uvrc+5g6tzwpvh5u6xDt\/DimN8OUbpEFB\/WveB4fUcbP0pR4dXP3AcU\/rk0csnHseEp8NwefJH5c1PD8OE3ZMQ\/Kvc18Pqx+6P+Aipk8PYXG3H4UfXZvqZ2j2PFofhyqDPlZBx\/DWjb\/DtAAdg9Oma9fj0L0QYqePQcdgKyeJm+pHLHseVQeA4go\/dc\/3sVp2\/gqFP4ORXpSaGvUD9KspooB6Vk60n1GrI87g8Ix4UeX71dg8LRj\/AJZjA9q9Aj0hFxhc49qsppf+zWXO2F0cJB4ZReBH+lWI\/DinkJXcppmOApqVdPAP3cUuZiucZH4eC\/wip10AZ+7XYrpoPalGmgVPMLmOSXQRgAjHpUg0VR1FdaNN46Uv9nD0pMOY5MaKn9008aMg6qa6sWI7ik+xD0p3HzHLf2Sn90fnR\/ZKf3f1rqTY55xSHTxz8tIXMcv\/AGSg\/gx+NH9lJ6frXT\/Yl7Cj7H\/s0rsfMcudJXrTf7IT0zXTmy9ulJ9iAp3FdHN\/2Qnp+lR\/2SNvT9K6f7DTTYnuKeo7nMHSV3cgGmnSMZ4HFdMbPtimm0HAxzS1Ecz\/AGV60jaTxyK6U2nOAtNNoo7e9O7Gcy2ln0pv9lnsK6U2\/T5RTfsoz92i7A5w6Ye\/FN\/sz8\/Wuj+ze36002\/OCtFwMOLTAzAbf0re0+y2lVxUtvaZbO3p6Vr2drg5ArzMVLSx00l1LVjAFUCtAHaMVFBHtU+9Oz3r5ebvK52ohnbP4Vh3zZz1rZmHJrDvyMmhGkTnNVf5PeuVv22h8mum1UnHTtXK6geWpx3PRp7HNav908c1wmvsFDr32mu01mYqjY4xXnevXBZ3+avZwseawqnwnmviRtzt1Feca2uScHvXoXiM5L8\/rXAashyfrX3mD0R8vitXY5eXqRj9KpTk\/hWhdJtbPrVCf\/WD6V9BE8GXYiQnFb3hefy7ocVgZ7Vf0eYx3Yxjk96tq6Mr6n1J8MboSGMd+DjP+fevoLQDvhFfL\/wwvdxh5Jr6Z8MS7oVGa+RxkeWZ71F3hc6Py8dsUnk1cijzGDStBzyK4dDTQpBMdqTy6ueSduPWjyeenWkGhT8ugxgVcMWWpPK+X7tMNCn5foKPL9KteTSCPnkUWAr7Oc0wp0FWvL56cU3yxRqBB5QB9qPKHrU\/lijyx370aisQBOeRTfLGasFMUnlk9RSCxXK4HApGUVYKY7U3ZQFiDYMU3b6irBQYqMrxmi4iAj3puOcYqwy+1N2+9MCELn3pQpX3p+3pTmHejQCHb70mO3FTbPTmm7aNwIiAT0ppUcipSO1NI9v1pWArsp+tIy9xmpyvNMKZ4\/hquYdyEjP1ppHYVKUPpzTKsYwqAOBikPBp+3\/Oaa3agVhrcc4pmPepcD1NMx\/hQJoYRtH05phXb6VKQcU11ABoIPX6KKX8ayLFpy88dqYtP+9yaAG1JH9003YfSnf8tP8APpSEL5a+ppaNx+7Tl+9QA7p2paTtxQTQSH1oaj3payAKKTP6UtABSjPTrTfpS0ALxTgfak20tUBIvJ9Krak2IMdOKtIOQay9el8uBucYpPY1pK81Y8O+LmoERvHnk+9eA6uwdmyOteq\/FzVA10VB7mvGdSu87snmtaatFM\/pDhug4YSJmTqDIceuaimAUZB7VVmucyn60faQwxmug+y5WZeopuU5Fc3cKFJ9a6i6cSA5HFc9qMflg9hXVRlrY+VzWgnFzsY12fvA1jXPWtO7fk1k3TZAzzXuUkfkmYtXZUdvm5FQydqkZ8c9qiBzXdE+Oqu7sPgkwfrWxp85yvPIrBUbSefyrQtZ8MuOcGiSFSnbRn23+zfqPm6TApbpwa+udCl32Y+gr4T\/AGYtWBbyAxwCMDP0r7d8K3Qlthg9q+MxceWuzTF6pSOhJ5+lIpIpTk9xTd3Oa5DyyT2qSoRnccVInSmAvY0g5p1RjqtMRKG+tPXGajWnjrTsMkGKctMWnjPamKwtFFFAx9KtNHSnLQA4dadTacM0CsOHSlpB0FA4560CHL1pw60Ud6oQ6ij7tFMAp4O4VFUg+6KB2F2noKUDNKAaTbQTcdRRk0UCsH1pf5U3FGO3XvTHYdtpaYq5ptFgsS0m6gAetKeaAsIFpGwKUimsM1y4idos1gtSGQ8VVmOKtSjj2qnNmvzTN6tos9GmiuRuNWraOq4XcavWwGBXxFH3qhtUeho2yYxVvGRVWBhxVoNk19thbcp5M9xsoG2sm8HWtO4kAWsW9nC5Fc+MqRSsb0Its5rW5MAgVxWokZYk11OsylsmuR1FxzXx7ld3Pp6Ksjm777zVgXz4zzXQ3mct\/Oufvo8scGvQotHamYF6+VK8\/SsDUkDA5H610d1EcEn071h3i7Qc88Z4r38PKxEjjtRtyMjP\/wBeuV1KESbwc9DXaatGyxsBhlxzmuV1BSHJxgV9VhJHmVkcVfW6jJOOuflrldQXBcA5rtNVjODgD1rlNRgbfk5PtX2eEkfP4hdjmbgbieOncVRJ55\/GtW6gKlqz5YucZ5719JSd0eLMrhjn6VueHtQazvI33dDWKYyG\/wBqpYTtcdf++q2lqhRdj7M+DvisXlvGpf5sV9H+F77ei89K+Efgz4ga1uo4mYhc4Iz719meDb7zYoick8V8rioezqHt037SFz2bTJ96LzxWynOK5bRJcovvxXUQNuUVNOWhhJD6KKO1dBkC\/epRSL96lFADqKKM8e9AAOtFFFABRRSE0ALRTS3pQW9KAHUnamZ7UFj60DsOz9aTcaYWHpSF6VwsPzSZpu40m6kMdRTc+9H40DJYzsZWPY5\/LmvkXxsgbR5I0Vv9JifBPO5iC2Tjr1yfwr62LZUjPUEfpXyV44zFpNnKzPGyiROP4T8qgn8h+dell9vbo+R4lTWE0Plv4kK1xq2n3O9kKXlxkEEkjywo+nCuar3UqaVo93HtMxfjcoI2sF4PPqc\/memK6C+hk1PxDYpKip5hv5w0XHzpujzzwPlAP411C6BazTQiRVRoDbukkaj94RxlsdflXH44r9Mp1+WDT1P52xVGUvZ22t\/7c2eP2JVGiSOJjE8e8OCDkE\/4\/wAvemwazHO0d3GixwiNVeb5uSGwTwOg4yMdK9Ll8Kx3eltNZPFA0iKuYwGZME9eOp\/qK8l0a3caPcMqK0Vur7wW7PtUfyPT3rqhV5pR8v1CFNezqSmusV99\/wDgF69kkj1O7iS4YF52EYVmyAVAJ68A8Z9eK5e8sy0mGJdlPy4bnOc49uARW7qNwWuVYRhpkVWkGflwrEt791Bpl9YTppelzJGCpSSRXA4OCVYH3yTXSopbbl0ZOmot9dPuRz81r9os12NtfYTKpbr3xT9SS0s5fItS4ikg3OWb7xLc\/hx09qXUnNpHYIVADq+CTweSOlVL27CSvckeYWjXd69+P5VhNLmunoj6LDwlOmtNHdr5Oxm3CATusQ+bcRnHcHvUVwcBuCalilBuIpc8NIwz3B2k1BeN5Tuc8FuvuapS3Z68Kd3BPczZ\/luXAJ4\/wqApwetSStvunPYgfoKGG12GeO9ef9ps+ni7QjbsiHZzz9ad5XYdKl4AwfwpcdhnHGKuw+ZkQhAAwc1YEapjgHI9ajUljk\/nVoSRdScfhnI9a5pt9Dqpu+rK\/lYI4x1\/GmooWUc8dc1ZTa+8IpPUA4JNLBYPPMgBDHOKqF+pM3Et6fZi8uoFC5zKMj1Ffav7IqeX8UtJUH5fLuFjPqnljP5lj+Rr5L0TS\/skqEZZ9xyf5Yr6x\/ZIR\/8AhbOmysDzabsZ\/wBlsnH12jFeRnTvhpWO\/KP95XkfcbQgioZIPUZqUy44\/OkMma\/ObH6FdlOS0Vh0qrLYA8gYrTLg004PUZosPmZkPp2eMCoX07npW3gegppVeeBWbQ+YwW07\/ZqM6Zx0\/Sug8pc0hiU9qdg5znv7Mz\/DSf2Yc10PlJ70nlLU8ouc546Z7E0g0oHjH6V0RiTnpR5S1XKJzOd\/ssen6UHTAfeuiMKdKTyV6UcouY5\/+y19D+VKmlgdATW+Yh6UeUoHSiwcxiLpS915p66WBzsraCAdqUIOwo5ULmMhdOGelSrp4XtWqIgKAgHtStfqFzNXTwO1Trp+OoFXgOtKTSshXKi2gHXAqVLdVxipcelOzV2Ai+zqO360C3HrxU+BjvRj60tAIhB\/s9aeI8c4FPAA65pcfWgCMR46UeW3pThwM0tBNyPH0o2dqf1NJkelArjdv+zQVH\/6qdSHv0oC4xkB9KTyhmnk80flSHcj8kelIYiKlBpePagZB5Q9vzppgB7GrBx36UhHPSiwFYwe30qNoQO1Wz\/KoyPapaArGL2pjQdqtEZ5FIyE+4pWApGAdTTTb+9XGAphUelO7HcqGEdwab5X+zVsjHalSPJBxSbsUtRtvbBQOK0bePbimxJz0q3CuBXz+Kmd9NCgYQCgITyKlRS1WFiwOBXkKLk7mzkkY90hAY96wNQ4Jrr7m3LKcCuX1iIoG9arlaNISucfqrdc1ymotgtnNdNqRyx5rl9TYkHFET1KbOQ1mT5TXneuuXZ\/Q+leh6qu4GuD1+Ph2x+te3hHZoVXY841uLruxzXCaqo+Yfer0DWslGziuC1U5dxX2uFPmMStTkrxME4FZlx2b1rYvB3rIm4Pavfg9Dwqm5XzzUts5WVTnvUPfvSbsHPSunocrPdPhfqIEsK7uBj73NfVfg+8EsUYHXFfE3w61TyriNdxzng5\/wA4r60+HmrLNbQ\/NngZ+tfOZjDW57OFleFj2yyG+ED1qcxZqjo84liX3FaZANeAdLIPL5zSbD8uanKgUmBQBWKcCjyvlFWNtJs9qAKuwUpix1qwAc0mDTuwK+zHXim7BmrGzvx+VDJ8tFwKZU0jKTVo4HSmkY7VXMO5X27uBSbMcVPt\/wAaa0fpVDIPK9TSbPWpcUhGRwKAKxWmkc1O4J6CmH2qbCsR7Ru96aUzUmPU0lAiKhfrT2XdRsFFwIyo7U0gZqUIaRvwpgRFaYVx7VKfWmlQODQBEU70mz3p59KTBxxTsBCVyaYyjP8AtVOV68VGV9vpSuwIAPSm7f8AOamIB4JNR7TirTuO4wjrSEZ5FOIztpMGmAw8CkPQU9l3UwLjp2oItY9co9qB6U6sigp3P3qWio5ibir82BnbS8ZpCOenNOppjCpB0pqnb1ptMW5JnAo4ptKM+lZt3EL+NG2m0UgH0Ui0tAABSgZpKdjApgH4U4fnSU4dKoCVDxnNcn4wvBFayHPauqdtqE9681+JGpC302Y55APepn0SPSy+n7SvFLqz5l+JurmTU5cNkA15pe3u\/vmtrxnqTXGoykHjca5OQs\/412Wskj+pctpexw8Y9iKSUluKQvt6U3aVPNNcnvUnrIbJJ19Kyr8b1P8ASr8jYBxzVC4G71HFdFPc+fx\/vQcTmb9fmrJuujCt\/UE5PFYdzxmvoKLuj8XzWHLNozpflGahVs1JOTjFQ55zXpR2ufB1ZWloO35PA496sQMFOR0FVc\/r7VIkhWhoiMtT3v8AZ4137BryRMyrvxjn3r788A6gs9smDkV+X\/w11c6Z4hs5c8BwDzX6HfCXWxeWNu28NuUV8tmdPlmpI7qnv00+x7cx703JpIpPMgBHpSjrXjHljgTjpipMDFRL0p+R\/dqkBICAOtNByfalpoPNUgJB61N3qFcVJTAeDinU1fyp34igB1FAIAweKKL3AcOlOWkA+UYpRmgB1OoX71PpXAKQDNAFOC4NO5IoxQOlJzTuo6YpoEGMcU5V3cmm0U7jHKu7k08CmDJ6dKBkUXQiQClyKZuPtQuaLoQ8dKbQoxyaXvzTuAfhTs\/L0oBOelL\/AMBoAZ+FP\/4DS0uwUagJgUUuwU6gBu2mt0xT8YU0hGBXnYt+6awK0gyDVOZeKvyVTkFfl2bapnfBkCjb71YhbaahIoDba+Vh7rN2rmnHLg81MZ8DrWak4A60klxgHmvchieSJyuldlm4ueDzWJf3GAxzT7i8xkk1h6hf4BGa8zE4hz6noUKNjM1e5GSB1FczeElfUCtS8mLk881k3jAjOa82N3qetFWMe7UbCKxbhNwPGQK2rsnBz1rKmAxXpUze9jCvYgT\/ALNc\/qCbcgZ611F4N4JrndRABbt64r2sPdOwpM5bUV3K4wN38q5DUIQhOO\/fFdlfjazcVyl9EXc5r63CSsefV1OTvYdwzwvXmuZ1K3CsTgjNdte242tnOOawry03sRgbecrX1GGq2PFqxucVdWxZuRWbLZndwORXW3OnEbsLVRtM3L92voKdflWjPNlRv0OXFp0AGKVbHPUV0p0sfeKjmnxacDgAdK6ViF0M1RNf4dRtbajFjjkdq+0fh9cGS0hb2FfIHhG18jUInx0IO6vrD4eXG21iwQRgd68fGT5mmejRjaLPdNDl4UV11s\/7sH2rgdHugNpB4NdfY3alMZrGmzCaNjdRuqp54\/yKDOO9dFzGxbwPWjoetVBcjrmjzx7flT5hWLmfelz\/ALRql549f0oNz\/nFHMFi9n2oLgVn\/agOlDXQ9aVw5S55lNL+9UzdjHX9aZ9rA7inzDsXS496QvVD7YO5FMN4B3FLmY7Gl52O9MMoFZrXozwf1prXgHJNTcLGmZl7UhuFrKN2OzdaY14v96nzDsjUM1J530rJa+X1NMN8PU1N0Oxsef70n2j35rGOoj+9R9vHqKLhY3EnzIOe4r5q8cWi+QISRuKShVx1IcjP5gV74t9yDn6V4Z8S7eSynim2grbXd4xdj\/yyLCQfoD+Vd+Cl+\/Pms\/hfBSfa35nyF4X1CTWPFaRbgiC3mlSPJyjyckE8Zy2PwFemXgU2MYTJH7sBuoB8xV\/z+FeeabaWJ1KyexQCQ3m2QltzMIzjaPwwc\/8A167m4ATKs6xx741ZtvAZSH\/UgV+oVdLn85ymqiiuy\/ULMJaPDaY3KyH5NvLbBkZ9x81ec6f4ZtTJdWQi8t5VeMpuxvGSU68HkAZx1Irspr9YtfCq6k294H3Ox+aFlA\/q2fwrPv2e21aC\/wAIZInD9P8AWGN2BH6Y\/OrpW92SMU3GMod7P7jyS+W5s9d1aNo3jkikZfKOAVVzyDj+nqa39Fgm1DwRLCQxltbxwgI\/hYxl1Hthifwp\/iKBH+IWrJtHmMY5lx\/tIrce3zAVb0+ZraxvYXdQDOrDb6yKoJ\/Nc16dKXNTcup0YmlblUV0i\/wX53OR8dae+n29kmcxiU446kg4J\/A+tcrc\/NpxVwCx+ckD26fnXpnihF1KO0iI83bIFbdyMAggj07\/AK1yMNhDI0jooVXBwAOozz\/OuSDUm7+R9FgpcuFgn0v+bZzSkRQwSuBtX5vT5iMVQ1iVXxsOeFz7V1N\/oYS3dmOI22uuOhHTGO3euQNlNJkbc5yQB1pSenqe\/hIqT5n9kaUDKknrximTJ86t\/fHP1q5Bplw\/BULtAOT39qnn0qRiCxwFGQAKGtjvUlF2uZD53EA9MYq9bQb7c8E4q9\/ZAZg+4jIzzjBq1brEishXAIOTUpClVTWhSgs45F2ndnPygf41ZTSEG0uG3E5CjmtO2tY1kOwNk4yM9aW5VVm3DGFPboR61LSuYe1bejM46WHyqKFJ7g4\/SrlnbNFbbY1yckgkZPfv7UO4kXgYw3JHFXoCEhDFSp7A8f8A6qUtEaKTb1Ne1tNkshyN2Qw2duM5r6g\/ZBt31D4iWF4uFjtNNuCcdyxQAfhgn8q+ddPthcb5HHyyj+9jjgV9WfsPeHDaaTrmrHPllxbxsxzk\/wAYz6Z6V81nM0sNL1S+Z9Tk0G8Rd9j6pMmOpxSGQnpzVdpBnrSeaPU18Bc+61LBkpDIfWq3md8UvmZ7Ci49ScyUnmVD5h\/Ck8w56UXDUn3Gl8z3qDzPal800XFYl3Y4ozmowwHGMUeb9aLhYfk\/jS5zUe\/3o3UxEm73oyfemA5pwNADt3Wkpo5zmnUAOA6ZNOHfNMzSjpSbsBNRTdx9KP4z9KkBxp3FMHWnbvSmAflSgc5NHFGOMUCsJ27UE5HSjIHWlIzQFgDc0mfeiigVhcijP50A0CgLBn0oye\/SjmjjrjmgLCZNFLxS0DsNpeKTfRnigYdBS4xSb6dQAh6U0t+NFISPWgBDz0qPdTmbmm7qlgIcCkOKKRqQDSfSmtjHFOJxTaAGY5xU8MeAOOT05qNFyeKtxJk49K4q8+XQ6KcSWNOKsKMDimoPl9qkUZr5yrLmkd6VkWLVM4OK0kt844qvYw8itdIwB6V1YaldXOGtUs9DLuLfA5rkfEafKeOTXc3aYSuI8S8A5NGIhyqxvh5NnnOq4VjXL6hyDXTau+9yB9a5q9HB4rgjoz34bXOU1QHmuF15N28j6Gu81UZB71xWuAeU9ezhfiRNXY8y1pPlbIPFcDqn32HBzXoutLlDjvxXAatH8xz3r7XCs+bxW9jj70ckEVmTLuXk81r34LbuKyJh8vNe\/T2PBqblIn0FMbk1K2M1C5x9a6oo5Wb\/AITvvs94mXwuR396+pvhbrglSEZyxHRhXx9YT\/Z7lGHY1738LvEGx4wZOOu3vXDjKfPA68NPllY+z\/DV2JESupByAcV5j4O1RZYYyGzn1r0azlEkS+1fHSVnqezJE9Jtp3vSZ9KgkZRwacR2pP4f8aAG7aQ9acfpmk5oASmjrTjycUUAR7RjFJsHvT8GkbAHIoAjxhc0z+dSfxdKRuTyKAIKTbUoGaRl4rRO47kRGKiZfapiM00jNMZARimkYqw6fWoyo7mlYHqQkc0tOPPam0iRMdaay4pxpH+7TuBGRn60hGPpTyDjmmH8PpTsA0gZ6Uw57VJTT14oAjIGaaVB71IeRTCfSkwGYx3pjDp\/DTm9TTX6UkBCR6AZptSHt3pueM4rRajRGQBSAfLgduKey7l60jfN6UxHrNLxnFC0tZAPpRntUa9e1Owf7n86jlJsSDHWnAD0ptL39alOwhKVetJS\/wA6QCg5pQaTOaPrQAvtijrk0lFAD6KT7tA6UAPH1oHTGKA3NIOpqgHr1+tOGM0wdakWmBHeS7ICe+K8I+M2rmCxlGccGvatbuPKgbnoK+ZPjdq3mGSMP1Hr3oWs0facM4b22Ljppc+etVuGuL1+\/Jpi2pZAdtLMBJeMPer8ahY9vFd1j+jIXilYxLiMDtVZ+Oh\/Or15jJxWfI2G6cVDR23UYalafr7VTkGBnOFq479s\/wDfNVZSQGxzWsD5\/ENS1MHU2wT2rnrs5zkfWug1Xo1c9e9GxXv4fY\/HM6f7xmZOSWyah3jPTpU0w55qEfKOa9aK0PzarfnFzxT0OODUTNnmlQ9RnpVMyUtTb0O7NreROP4Wr7v\/AGe9fF3o1r82W2rmvz+gkMcgOemK+tP2ZPEGbUQlyCGHyntXh5lT5qV+x6tCfNHlPu7SpvNtV5zV37ornvC9151nHznjNb7fe9DXyaOCas7Cg96cPam5zSg1SBE4GKTpyKRW5xSnpVEj16VIpqJaepqgJ6UdOKZ1qSpAVSCaXae1ICT14o6HmhASKMAUAdsUtKBj60AKv3qfSClH0oAUA0oFNp4oJCiiimhoBmiiimJkmw0bDQEIpQpoEKAc5NH50uTzS9utCYC9+aMetJjnFLtqrjEAApwAoApwFK47CDmnfWjFPC0risMApQvOKeq89M04IT7UXAj28U1xjFTleOlRMtebi\/hNIFaQcZqq474q244qo\/Oa\/M8z1O2BEVz0pjDAzUr8CozXzWlzoRExIqrcSlRk1aYVSuR8tE9FY6ILUzrqYkHk1j3bkg5PNatwRtIrFuuM1xNXPQjoZ1yeSTWTdHgDtWrcHOeaxrw47V1Uoam6Mq6kHNZ878kelW7knJrOuCdvvXpRposz7p89c1iag2c\/TPNatwck1k3zZB9q9WjCzIkzlNURmLZ69qxLqANu\/iX3rpb+PcxrNlts8lTgGvoqTtE5Zq5y13a\/OTt5I4z2rLuLLJIC\/L1x3rq57Qk9PlqrJYkNyuOTXrUqtjilA46TTMydPypv9lsykCunexyuMcDj1OaY9mqjBGfqK9CNZvS5h7I5h9OAHzKBUJtdu3I\/KujuYRGpx1\/vZrHuGAXkgf7td1KbkYygkLpDLDdIcY57V9AeANbURoA59wTXzW1+sEgYY\/Oux8KeNvscyHf9T3rsnQdWKsYxqKDa7n2No2sqFUZ211tlq+1Rlq+cfDPxBjlCZkHtzXeWPjKLyx+9HqOa5lSlDdEys9j2Ea2D\/FR\/bQ67\/wBa8t\/4TJG6Sj6ZpV8ZI3Il\/Wq5ZGVkep\/2yCc5pRrCkZz+teWr4wRufMH508+MEP8Ay0BP1p2kHKeof2wvAz+tNOrjH3q8xHi5B0cc+9H\/AAl6kf6wYoSkxch6YdZB\/ipp1jI4PWvNv+EuUL\/rMj1zSf8ACWq3HmVVmHLY9IOsDH3sU06wAOTg\/WvNv+EqG37\/AMv1preKR08z8M0crCyPR21fJxmojq5PevPD4nGeGz+NI3iQH+Pn60cr7BZHoTaqfX9ajbVSByR1rgG8Q543U3+31OMNT5GFkd8dTPXdn8aYdU7lua4JteC8Z60HXd3IJOaOVgd2dTH96m\/2oufv81wy63g9aP7Y3DqKOQeh3P8AaZJ+9SLqX+1XEjVx13GpF1bnJalysLXO3XUv9quS+KNsb7wnfXCbXMW12BH8J+Vjn\/dJpkeq5bg\/rV621CC6WS2uwHtZ0aKVT\/dbjP4VrSk6VRT7HFjMOsTh50n1TPjvw9pqT2ciGMRXdurPGAMbiGG7GOecVqX10wnndcugaGcBR1+Ug4\/HJ\/Cup8U+En8K67qkbqyFJT05GTjOPYjaw+prmLqVYiZMLHmNUJH1Iz+AP6V+oxre3SnHY\/mXE4OeGqSpVFqjmdUvRc69OjlI\/sbeQ5x1GQy5\/M\/rVbXNQiVtoOWjm8wbRzsaUlj9AWb9KyNbkLeIriVNsj3MW4jIHzrwSePQn8qbfMqASMxkdYmt2+YcZPb82\/SuuMbQSMp0feT8v6\/HQytZkceKZLstzJbom8nOSm1cc+2PyqQOVsrgnczMsMmDzkkqf8\/Sl1G6a4uhLIGCkCMEnjO4\/wCOPwqNWWAIjKoAXauFALHc2SxHJOGAHso9K6YNxVkdXxxhzbpL8AvblrZoJQnmcvCCWxnIP\/1q5yykjhtokK52SOoGMn\/PNTa5d\/aLWPy24j688tg8n9azrchFY4woYnOPpz\/Ko+1c9mhTtRV\/63\/zLN5elrK3R24iB3jHp0zXPogD7snjJHbrV67kLruGPQZI6+\/61XMO6Pb8qnjIBpNWSsevRXIn5jIifNG0qRjAzzk1akZQ25kGOB14+v6VVltJI5PMiYgkcDA698UpRpNrTJtyoZWLDBz2PvzTvc2kkTpMJIY\/LIAC5OOMU6OzLRtt4ZQct0z9KcqMgwpUHOCCcHGKIycMVDnJ5znI49PTpUmTa6DllKElkbOQDkc5x6U6QQllaSMkY+Yrx\/nr+lBYxBQ4MhPQhsH9e1KBCQXKy8ADJZcH9aYJWGGeKNgkaKjdchskHHvVu0je4YGThiMhB1Yep9KprcR+aPJjRSOFL\/MR9B610PhnT5Xn+0TfvG3fxc8+uaio7K7OynFtnT2dm4mit403Mu3Pfn0H+e9fffwV8FxeAvh9Z2CJslmZrmfPd2+9+vH4V8v\/AAK+HE3iTxZZ3E0JeC3dZMn7u\/rk+yj5j64A719ony4UWOPIRFCqPYV+f5ziFUnClHpdv1Z9\/k1Bwpuo+uw8zH0ppk565qLd2oDd6+bPpCZW780vmn0qDIpQcdKQE\/mD86N\/y57VDup6tigCbNOFRA55FLQIlB9qXdTRnHFLTJHA46ilpoHenUAO4zSA5oFKPu0wF9qU9eTTacevJpgOHWlXpTR6U8etJq4AOtP+X2pAAVptTsNjxwtLntimjnoacFx0oEO306mUUwF5oBAFJRQAue+KdTeaATmgB1J+tLTf4eaAHU0nHPWjfTTye9ACk59qCSDRTT90UgHUUe9FMBORwelLTcj0NJu\/2v0pABO6m0E008VIATzTcntxS0gGOTQAH1oLfXikPWkbigBG603G6lPehFycmolJR3KirsmhXCircC4FV4k6VdjTAHFeDiKh6EI2HhAB6VYt4txHpUKjNadlHnFeZBOcrFTlyovWkGMcVfCYU0y1TAqdz8rV9RQpKMLniTlzSMu\/bahrz\/xRP1UV3WpvhT9K848TTKWYZyea8jFPU9fCx0OI1FhuP41z99zkVt3rcmsK+ceW3TmvPSPfi7I5jVPunpxXEa2SytknrXa6pJjpXF6uhKvg\/d\/SvYw26ZM3dHA6xGGV+h\/CuD1mFVDHB4r0DVU4kIFcNrSDDj+tfX4Vnz+JRw2op8xwKw7oYDGui1JPmPFYN6hz0xX0dPseBVRmsMVEx6c1MRxUL5rricbI9xDZ4r0DwBrX2e4jG4cHmvPDjJzWnod+1peIc4GaqcbxsZxlZ3Pt\/wCG\/iETxxrn0717joV4HiHNfHXwu8T7DGA4B4r6c8I6x50Kc89a+MxlLkqeR9HSnzwPRuvvmkxxmo7aQOgI61Kf515xQlNPanUjUANPTk00in45xSUANpv3uMU9utJQAmPek\/CnUzB\/GgBG+majYbTUtM+WgBh9KjPWpju2+1JTTsBFjjmkIx2qQr6VG3B61adxpjGz1phGWBp5yO1NfofpVDIyp70wjFSMvtTG6VDFYaaQ9DSnqaQ0CGse+etNIOKcSdv86aTz0p3AZSHjtT9oppHHFADD0qN+lPKjtTWHqabAbUZGfpTz14pmPf8A+vUgMKgd\/wDvqozwKlYkCo8GtFoPYb7e9IRUnWmMMmi4bnq9OptL7msxC05PvCmDjrT1UntQBIMUu6mg9qWsSBenvSUUv8VACU4dOwpB060A0AKOlFFA6UAPoBpB6f0oHv0oAcOtKDjoKbTup\/8ArU0A5ee9SDAGajTqOaWZtiE03oPd2OU8Y6j9mtZGzjivkH4p68LrUpVDfKDX0d8VdXFrp02T2Ir418Wag1zqMh3HBarorXmP2ng7BPllVaMiSQmbcDVpLv5fwqmuWOak2nP+ea7on69GIkr7sk1QnOM1clOO9Z1y+d3NJq7Iru1MquwHpmq8smaWVsVTkkzlfyreMT5CtWtoUNR5XOa5+6\/nXQagPl4rnLz5WIr2cPsfmOdP3jOn+\/8AjUBOSanmbL1Wbpwa9aOp+bV3qIXGfepImw4NQE80I4Dg+tWcilZmgnP0r2X9n\/xF\/Z3iFIWfakn868XiYEda6Hwbrcmka3bzoxXa3b0\/zmuatBTptHpUaiU0fqb4A1YTWkXOMgfyzXoSkHBFfPXwd8UJf2Vqwfgqvy+npXvlnMJrZWz1r4OcXCTT6FVlaRZJ6GlBzTaVOagxJRn\/APVUh5FR07vVbAPTtUi8+1RKcdDUoOehqm7EkvpTxyeKjRsCnp0qQJab39aQHHIpfpTQD8+\/8qenSo0p4PvQwJBS00H1p1ABSrSUq0EDqKP5UCmih4UY6U5VHpSDpTgPQUiR1Ie1LTqACm0o6D6UY700OwoGKUDFJT4+lMoUClApAKcBUiYu31p6gZpoz2p\/rU7iEU0\/BNNHWpQKQ2NK1GyVPimkZFcVdOSBOxSlXIqjIMk1pyJwapypnk18FmOHcjrpyKLHJqNuCKmlQgHFU5HKnpXxc4SpvU7oa7BI+aoztnIqw8nWqM0mR1rCU29DspxKV03BPase4P61o3TjJANZdw3B7CpjFnajOn4Wsi9\/iNas5wD3xWTdtuBxXfSWpqjGuOCxrMuOVIxWpc1mXKkA9M16cEizJuD3\/h71k3jjNas+MsaybznPXNetSjrYykZU6bic8\/7NVHjHAGP5VclGOf4fpVeRVTOe1enEy0RRlgDdqrtGFbjvx+FXXdCOf171UnnEY5NdUb9DJ2KFzCAO3Oaz7lgmT0471NfagilcsG54+lc3f6yg3fNhv7pr1qNOc+hyTmoiajdBVyT\/AMCrmL\/UeOvOMHmotT1tTuG7d2z7Vyupav5mcnvX02Gw7avY8itiEWNQ1MJJjP61Xt\/ELQNuUniudu79i+Ac9c1UadvU19RQw6R4lSs27o9R0vx69uFHmfrXVWXxWmjH+sJPPf8AKvCoZ3LYBNXoHlJOQc9K7Pq1OW6MFXqLZnuqfFiX5f33155NWF+LMp+9Jvz+teHw\/aD1zV22guWOBmpeEpLoP6xNnta\/FWaUgiYj36\/561Zh+KE8nAmPPI5ryC10+5ZvlVq2LPSLo4+QkfTrWUsLRNFXqPY9Wh+JMr4zKf8Ad9Ktw\/EKR25f5uu3sPwrzq10S7YgbGrctPD9wV27W6DpXJOlRR0RqVWdnF44lkODJzVxPF8sh5Yjn8q5e28OTjBKHdxn0rVg8NXBAG07eRXM4Ukbxc2bqeJpGx8x\/OrMXiGUrnJ\/A1lweHJ1C\/KfStKHw5LnJBbnHSuZqBqrlhNedu\/NTDWJCuOd1JD4dkKryfXkdKtR+HpTzkn6is3yFakQ1ZyO6\/WpF1VyOTnnNWV8Puv8P6VMmhP6Gs7x7DsyBdQf\/d7Hmnpeu3XOM1aTQ2QcKV7VOmjt1AOfapApi7lAB5GKlS7k2\/TirkejN0\/pU40jGcIealyQygLh8rzU0VwwOQcVbGkOp6VOultnGKnmiAyGckDk8dOKuwzs2M02PTXParsNiQNp4qG0O25jeM\/DsXiTS\/tQiLXMQEcvJ+ZcHax9uSD6ZFeA63pr21xPHJIrxsCFjzlgAMMPz5\/Wvqi0tijnIJVgUYZxkHqP89wK8o+LXgFdMLX0IIs2xMkiDBiYdx6A9GHbivocqxnI1Smz8+4iyeNX\/aacdep806+09vqsclzEogJKbgOGTGGDH36\/jntWZqVvCbgxySC33ptzggggdR2IIwa7fVtPjvYJQyvvJJG4\/dYck\/jnp7muXk0cywXMJBWaJeARuGwg4wO+OnHbFfcU6l0fnDoxWi6Kxzl089valXdWU4XMfJznIGO3IqKe\/DxkFXIDK28dieMGnXNqFDtFCzlVAdj1zxkYzyepqFrQC5YssiSozEpLGQGHTg9x0rrVgVGKs2UICS8g++xIbluvTJx371UDGK7+UqikkjLYAB5x6Hp+latw80mVU7GI3qnGQOoBrOO54\/KldY3UdmwR\/sZ9fwp6HbDqVxsE5jeJSRwTycjgDP6U0rJFIpnjbJYBNoG0gdMH6dakcAO5UDy9pwygkn5c9T+f51NZxpqHlxkGOZDlY9+0k\/8A6qz0udN7K5JZGG6R45VD\/wAJ7lcjjBqvdaa9tMUOzDn73bA9+3AqN7ZkCqUI2bjtDbGzzg5HfmrUU80sXlSsHcEFSThueOT059DU2s\/ItvsRkEFI18snJK4OR781MUGBEC\/ngAKWOOR7jnFRsywhtgHlN8xDfwn1GOnbj6VTubuT5SgaNRgqwXIz65znpj6VdjNK5YvILiFm3p5u7P3Rkn16e\/tVAWlzNJvEccWCOZMDH51mmabOxGZdzZOI2Of0+ta+geG7rX71IwryFmLHAKhFHUktjHHsahyitzthTa3NfRdMSe4jErtOzEHbHwAD0JP+H516l4N8KXmu3yQxwFccYxkAD\/E4HrUPhrw1Y2U4hgCOw4Yx5JH1Y+3\/AOqvqz4FfC9IoI9Y1G2RFifdBER\/F2z\/ALor53MMfGlDzex72X4F15rt1PQvhn4Lh8GeHYh5Sx3U6AkL\/wAs14OPqTyfwHauod806QlmJPeoyCa\/PZyc25S3Z+iQhGnFRitEJk55p26gL60bBSLDqaUexpQMCjb3xQAU8duPrThGc9KesdIQ1UbPSplXbSCIdaeFoExAOKdjmlC+1Lt4piG468UvGKdjjpRtP\/1qdgAcdqBz0p4Sjb7VNwE\/D9acOnal205UPencBgFOA7U8IPrS4zxincBAD170EYOaXqOKXFIApc+wpm2pNvOKAG5pM8YpdntSbT1qrAOxjmgD2ppWgLSsA7b1pcelGCRSEegpCF4paQgepo2\/lQFxCM8dKdTCKaRinYY\/+KkAP0pc+wo596QCEdqQjBqSm4zzQAw\/dFNLc04\/yob7wpMCNulJ\/CKcRSEZqQGg7qaTuNOpP4aAG0HpS9+Kb95v60noNK41VLHip44yO9CR9KsxJk15mIqHXTiLFGB6ipx+VIox1HWngc4r5+cnJnYkSwplh9a27KPAFZlpHyK3LVMAV24WF3c4cRLSxdiHHSmTthTjvUifKKguXxnPWvpJPkpnlRV5GDrEhVGOexrzHX5t0rk16Hq8n7thnqK8z118ORXzOId5XPosNGxy985yTWFfEleta94eDmsO9PpmuVbHsrY5\/Uuh\/wAK5TVUADYH1rrL8ZJ6CuZ1NODnmvWoOzsTLQ891uPBYH1Irh9XUHI7Cu+1tOgGOK4TVQd7V9ZhWeFiFqcbqUY5IFc\/erjk11d\/ETu64rnL5Mg+9fR0pXPBqowHAGarS55q5cLtlNUpehr0EedLQiJzSK5jYEHvSEdqZ2Nbs52en\/D7xB5E0YLc5xX1d8N\/EfmQxEvyK+F\/D+oNZXikHGTX0d8MPFOPLy3oOteNj6HNG6PUwlWzsz7G0O+82NBnORW3nivOvCWsCaKP5ucYrvraXzo+tfIy0dj12Tt+FFHTpSbakkbRTv4abQAm2hutKelNoAD7Uyn0hPagBtMYerfpT+gpr9KAGsADim5zRkUvX+dADKY+c1IcdqjcZNVEaG03Hf8AGnU3\/ZqxjCBt61G3SpCvqaRvlOaTAjPrTSP504n3pKRNmNZc\/Wkk6ilHWmkdxQA38qQrxTqQjj60wIqacnmpHUYpjLmmAwjNMNSH2H50wjHSkwI36U1vrn2p5UenFMK7uRQgGscZ9qY304pzfd4phAIq0B6xn0pRjuKaPSlrMBRzinr1T\/PemA0tAEo6UtNPWlHPasSBaKKTjpQAufaim596X2NADuMUo4pAcUA+tAC07+Gmg5p9ABTh+dM5pw60wJFA96p6tOIYDz0FXAdoJ9K5bxfqS21rI27GB60SdkdOGg6lRRR4X8a9fHkyRbh3r5k1FvNuSSM\/WvTvirrxvL+UBuhz14ryuRt75HJrrpRtE\/pbI8KsJg4Lqx0SZNWCo2023Qkc5qeQ7UPPTrW1rH1sWuUzLohc81nTk4JPertyx3Y96pyfcqrannVqnMmZt13HNZ8rAMRWlc9Ky5m+bv6V10z4bHPlehVvJdwzxj0rBujluMcVsXZ+WsW5NetR0PzvNZuT1KEv3uP1qs+CasyHJY1Uc46V6cT8\/r6Maoz1owFJpu6hqs4nqizERyDVmCYwyBgeQc1SRtvWpDIFOaT6msZWsz7F\/Zq8Xrc2kETSAtHgYz29a+0PDF8Lm0TLA5FfmJ8CfFT6P4hiTflHPTPT8K\/Qb4ca8LmziO8YOMV8bmVJwq3XU9b+JT50eqZ+bFOB9ahicSorDvUq\/eryjmJ0bA5pW+9USnNPzmmKxIH68U9TUWSDT1agLE4IqQHNQLUyntVCY\/d6UvX60g56804c0CBWx9KkqGpFbNNgSL96n1GDn608UgFHWlH3uKSgdaBMfSA0oODRTQIkHSnA0xTS9akRIOtA6HFNBpwpiFHQfSg9TS0mM5p3KFHrTwaizinA0wRNQDTAc04GpCw8HbTs+tMzTlbHU1KEOFSg1AG\/KngUhskpM0ganA1lKNySN0zVWRM1dIyeeaidc\/WvIr4WM+hrGVjOljzVKSAc8Vrume1V5IsnpXztfLFPdHZCpYxZrfKk1mXFsecdPrXSvBntmqktnuPNePUylvZHbCtY4+6t2BJyay7iJ8nANdrNp4PbFZ1xpW7nFc\/9ktdDqjiEcPcRykjisu6R8H5a7ufRiSflrOuND4J2ZrVZdJdDZYhHATRt3BrKvN4XBU16HPoBYkbaz7jw2X\/hyPpXRDByRoq8TzO63Z5U1k3js+flJr06bwrlv9X+GKoXHhEkcpgelejToSWonVizye5klD8KdveqEssoUgD5jXrkngctwYuDVeTwEsgLeXyB6c16EKfkc7qJHjVzPMN2F9+KyLua5OThl+le5zfDwO2Hixk4zjpVeT4aqSR5Yz6cf5xXpU4xXQwlJvqfOV+Ll1ySeTXN3ltdPuwrL65FfU7\/AAoicNmLaeg96h\/4U5bsfuE+5H+favZo14Q6HBOnKW7PkG90q5kJVUfdj0rKn8PXcg5ibmvs\/wD4UtaEZ8oMeuSKlj+Cdmq\/6gBey4r2KePpw0SPOnhXLqfEg8HXcrZEZWrdt4CvZCoMTc9OK+3Ivg3YDH+jq3vtGa07X4UWaYxbqMe1dizSK0SMHgvM+LrD4X3kgB8l\/wAQa6fTvhNc\/wDPE4zzxX2Fa\/Di3jB\/cgfQYrTt\/A0MfHlbfpSlm0+g1g6aPk\/TvgzM5wYmX\/gPtXSaf8GBlN8eQfX6V9Ow+EU4AjA\/Cr0PhZV\/h6+1ck8xrPqbKhTXQ+d7H4Oxx9YSWHtW\/Z\/CiCLGY8Y\/hr3eLwyg42Z+oq1H4cVf4K5ni6supooQWyPFrX4bwx4BTt6Vow+AYl+7Hg\/TpXsMeghf4MfhUq6GAfucVk6031K91Hk0XgeLp5W78KtJ4LVesX6V6ouiAc7af\/Yq\/wB2o55dQueYx+DlH\/LPmp08JBRwm2vTBowH8P6Uo0cf3f0pc0hcx5uvhUA8qB+FSnw1j+AV6L\/ZA7KOvpSf2SB0Wi7DmPPB4axzTv8AhHv9kD8K9BOkj6fhQNJA6indjucAPDwA5UAd6UaDjoBXff2QvUqKadIUdqLsnmOH\/sMD+H9KQ6JhuAK7k6SPTn603+yx0NF2PmRxY0MA8CnjRVHSuyGlD0o\/soDtSuw5jjxo4zUyaWFP3R+VdX\/ZuOi9O1H9mgY+Wi7FzHNpp4AwBT7jRotRtTbzIShzg4+6Txkf55ro1sB6VItlt7U02nzLcmVpJxezPlP4jfB+fQJitrAEtmBaB0GUY+i+hA7f4V4vqPh26gd5liMrRkjKg5x3BA6fSv0Tu9FttXspbO7iE9vIPmQ\/oQexHY189\/EnwRp2i6ldWxkdbiEqFlYASSxsMqDn5TkfgSMcGvrcuzKbfJI+CzTJqcb1adkj5C1LSLjT0jkEcj2bj5XwRhv7ufXj8axbjeYSHLMwXEm\/5QOuCP8APavbdcsHtmuPsdqt9ZSriS3jkGTjqAJCCD+fQDPNeceKdP014NtrGXcMEWZ1MbqhBO1lPQg45+nJr66jX5krnw1Wm4bnDXFwIz8p5QttYYJUnqM9xn9azJ7uOa4IaBVYYJYttAJ6nnHTHatS4sFVmQwguCVyQQM4A9cEVRl0y0eMx+UWlQEf3dw9s8dK9GNrGUZxIUvrRo3W7OAWITI+97j2zmqVxqCRf60xsBgKwYg9ff6mp00eCWQ+cGYnDAq4AAPQHA5FMe1hR3R0+0W7MeVYllJPp3HWk4nRCUbjZNRS4PytnIDFQRvwOn+8OvvST3iqqmMF42OcBgRkevvz+lNufC9tOWNrLsdSQYw43A\/0xWRc6HcwF2lQBhkBnfaT7nb1qbtdDqgqc\/hZcbVIDtEbLGyvx7Z6\/wD1uKqtqEmT5iLKDwAQCx\/EHg1IdK+0XQXHmrgDBUgBccnJ55NehfD\/AOFNh4gaGK5vLJZWJbYCWYKOAGO4bSfbPbHqIq1FTV56HRCMXotzg9LWS5n2R24Zzwhw2T+bfrXtPgbwXq95axQrbvGsp5ZYwgP97JwMgY6817N4J+DHhfw3DEkr2kUoPMcSqZW75ZjkgHHr+Ne8\/Dz4Z6Xq0NxdXGn250tZAm0\/M12w6q5\/uKeMdCe1fK43OI2tBdT6bB5U5tSmeV\/A\/wCCh8Q+Rqd1GbfwzA2Y227TfODz5Y\/55gjlz1PTgV9OrDFBCsUKLHCg2oijAUelXigChQoVVUKqqMKoHQAdAPaoWjPpmvi6+InXnzSPsqGHhh4csSl5TZ6Uvkk9qumHj7tJ5JHauc6blTyG9BThBVryzjGKBEfSlcLkHk87qcIwO2Ks+VzjBoEJ9KoCsEPFOC+1WBDjtThCB3qdQK4Til2VYWL0pxjFFhEAi9KesfpUqpjt1pQjdcU7ARhPajb9KkEeaUR+2afKhjNo\/wAmlEfrT9hz\/wDWo8v3pE3G7RRt9OlSBOKXaSOBzTC5EBQE71KAeaXb7fpTGRBKXZnipQpFKF9RTAhC4zS7am25pNtAEWyjbUu2k28ZoAiKnHSjb3zUuKMe3BoAjANOK8U\/bSbfYfnQBHto21IQfSkx9KAI9vSk2+1TYxTduBxQBDt9qNpqYqaaVNAEZFJtp5Wk20AIeaTrS45HNB4xSsA38DTDnHTFSH\/PNGPlxSaGRkZ7UmD1xT\/L96YRUgNI496VIyaRRk9KnRMdq5qsrI0irsWNdx6VaRcAZHNJFHhcVJjivnMRNt2PQihrEYpYRvamH5mFWLOPJFcEfekaS0VzTsohkVsQLjBqlZphRWlEuBX02Dp9TxK07sdnqaoXj8GrsnCVkX02Aa6sROysZ0Y3Zz2uTCOJq8y1uX96RXc+JrnAIzXnmoyZkbNfMVZczPpcPHS5i3nIPrWJe4UGtu7frj8a5++fPWpirnpJaGLfEKTiuZ1R8qea6HUDuL9Peud1L7p5zXq0d7kzOF1vGXH8NcVqfzk\/3T+tdxrILFj26CuM1WLLEjivqMMzxcQupyd8PvEiudvU4YYrpb\/GXGa52+Abd29q+gos8Gqc1cgq2aozdK1L0HB6VmTLjvXrxZ5c0VWbFNzjNPcbT9KaelbnM0IkhjYEHGK9L+H3iJoJowW6GvMiO1aug3zWt0ozwTUyjzKzKhLlZ9y\/DvxL9oiiG70\/Gvb9DvvNiBz2r4++FOvF3gUN6d+lfT3hW9L28fOQRXxWMpeznY+kpP2kLnfjn6UYzzUUD+ZH1qXbXnFh9abT6acUAITim9+acelIfSgBKQ\/Slz2ooAbx71HJ2qUionXuKAG03+GnH7tMoAD8tMen0xhk1URoYRmjtnP40p4pDxzVjGNgjPtSH7g6UrNzgmmc\/doAa3SmkZ60+mn8qkBh9qRxnmnEd6a5wuRQJjevFI3ShulNoEB45\/hph6U4\/L0phOfrTQDT6Ypp9qecdqjZs\/WhgNqNsAYp0hFRFtvehIBCflz70wkk00mmtJ8rVoB67SDpQMf\/AK6UHFZAKPpS0mSTnvR1pASfypc85pBjrQPesiBQcUvt2pO1Lzg0AG2jtxSn2pv8VADhnFLupKUYxigBaA3NGaXHpQAoNPXOPemAYp6kLg+lNAMu5RFETXjfxV8SraWUqhsceteleJNSFtbvzjivlT4xeLTNNJEr9c55qornlofbcN5e8ViU2tEeReJ9TN5dsSepJxWTboZWGBnNMmm8+4znvW1pWnmQBuMV3xP6DS5Y2WxJa2RA5GBUGoRmIkAcYroJI1htyRjisDU5PkPqelaWBTZz82Gf86r3A+XjpVtosnocVUuVKx88+9LqY1NINmXcuOR3rKkYMxNXLyXYSOMmqcUZlYkmvQpx0ufA42rzz5FuVZx8vPGaxLwgMfauhu1wprnrxvn+navRonw2bLlRmStndVduh4zUz96glzXprY\/Par1E2jtRgdTTTwc44ppNXY427Dw2TTulRg56UA4p2IUjf8M6o2nXiOrbXB65r7m+BXjsanpduxky2Bnnv3r8\/wCCUpKDzxXufwJ8ZvperJavI3lyEFcnge1eTmFD2lPQ9TC1Hblex+l3h+\/F3apz2rYAxXmPw911bi1iAbPAr0yNw8YYdxXxdraM2krMlBOKeG55qMNjrTx9Ke5I8HjinqcUzp1pQe9LYRMD3qRCemagXNSKaoCcHNOB96apA+tKDjntTJHL\/FSp96mg45FO6GhASCpBUSNx6U+gBwNLmm\/dFOoAUdadTQe2adQSGdvNPXk0ykp7jJqcDUFKDiiwiccUufpTA4NLuFIQ78qTOKM47UdjTuFx4ODTt\/1qPpRup2KuShs04HFQ596UN+NKwEyn3p4kPpUIelDUrBYmBDd6X8ahD9utO3\/WlYNSYODSNhhxTA+3rRvB61LQgK5qNoqfk+ppcn3rF0osu9iu0IOfWontwTVzI9qQnFZPDwZXO0Zr24I9ageyVuK2CgNMMIPes\/qsC1UMN9PB6DpVd9NVgeBXQ+RmmeR9Kl4SBXtTmn0ledo5+lV5NFUtyprrDbA9v5VG1tntR9USH7VnJPoYAwBjtUL6ApHTH4V2H2TPYU02Qp\/VkHtmccNAQDAX9KZJoKsMBR+VdkbJcdKabBT1FX9XF7VnFnQQeqZxTRoK4wV+X0rtv7PHoDR\/Zy\/3BV+wF7U4g6AD\/APzpP8AhHQeNgruPsSUn2JBWqpWF7Q4seHxn7g\/KnDw8P7tdoLSMUfZk9BVezJczjl8PAds\/hUq6Avdf0rrhbIO1O+zKvRatQFzHKpoIz0NTx6Go\/hzXSCAD+GgRe1NUyeYw00dVP3anXSlB+7itcQjsKeIwKvkQuZmWNNUfw08aemOlaewHFO2Cnyk8xnCyVeoxSizUfw1obfejYKfKhcxRW1HpR9lHYfzq9tpNvtTsg5in9nA7Uv2ZfT9KubaTb7UWQcxU+zL6fpSeQvotXCBSYFFkFymbUelIbYelXcCgqDRYfMUfsy80024zVzA9KUoDxQ1YLlA2ue2aQ21XWQZ4o20rBcp\/ZxTTb+wq9j6U0qB3osO5TNvSfZ\/areKTbSC5V8jHX86DDg9KtYFG2gLkUcG3gCvE\/2ldOjhTTbsj5nCxsuOJFDcg+44Ne6KvPpXlf7QMaanpcWnq6R3KwNNG7dFbOBn2yK9DAyca8WeHnS5sBUufLWp6ZFdSTJHnzJC4YYBw5+bH4g151rdndabtIjNxA2VaKXPABIyCeQR+fHWvRtFCX97ch1WGX5LoqCcKxXaf0A\/AVga7p93czrExJPBJOCCWJwQfwIr9FpX0itz8IlimnzX91nkOqW0EduwCTbxMWD5B6jOAD26de9YV5ZRNbnyrlo33dZY+o54PP613niHw\/cKwjCCPbcq4aTOCArBhkD8cY6VharYz21kfNtyWYsxePDY4wBkY68V3q+3Q9GjXjaLi9zkpIg8aBbiBnZcj90QQM\/XnvVMJKS7pIpUbcndjtT5rOU2+Pm245wMfN\/9alitJoAwbLlvlPToR1rRb2R68bWdmUZ7aUlidiEdD15zn+tWLaKXjfdt0Pyr2z04PcUj2VzPMQu5QF52cDd\/+qmR6VdRlmLkZ7scnilaRv7kla5ZW5urNI8TJKY8lMQqdpznPIx+ea3NG8ca3Fdh579Yo1BLPHGkeB6DaBXNGKRLdQVyz9Oa1tE0yOd9t5KINzAlkGSqgdeRyegArKUU1Zo2j7mq3PUtI8eapfabNKXwiqXjjTqCM\/MfoB1NfoJ8F9IuNE+EfhSzu2L3YsVklLAglnJY59+a+DvD93pi6UdK0i3W2a+mt7XzJDueZDOowzep5yBgdsV+lDxrBtiQYWMBF+gAFfA5zPWMUrav9D77KI2i5X6L9SqyY60FKlIGadXzTPoSERmjyyOlSgUu3jpRYCDYfxpfL4qbb7D86Ng9BRYCDY3tR5VT7KXbTAg8oUeVU+39aCuOpoAh8sUBPWpdvHJpVUEdKAGhBTttP2+tLgUAM2GjZjrUmDRgYoEM20uynYNLgetAxmPrRj2p5Xj6Uu3cKAIwuaMfWpdv0pNoxmgBmOaAPxqTb9KTHPTmgBmBxx0owD1p23Bo20AM20YGKeRz0pMUAN20baWlA\/KgBoTA6UbfcUtKOTSAaykmjafSnbRmjb\/tUtQGhfwpuKkxil9v0oAi2gCkxjjpUhHrSFaAI+R1FJz6VJtpCM9aQERHtTdvqKmI56U3bRqBX2mm9s1YKk0mz2oGQHik5qbZTdv1NIoYi5NWooulMRAcVajTJFcOI2sa09x4XA9aay8YqYAACmsufwr5msm2dqZU5Jq\/aAKBmqmMNmpY5AMc1hT0dyp6o3raQbavLOMVz8Nztqx\/aA9a92jiFA8ydFtmjPc4U1iajchFYk9KLnUVCn5hXOapqm5TtPFYVsRzHRRotGJ4juyxbJ6GuJu3yc1tavdGVznpmueu3yTxXmt3dz3aUbKxRuG+U1g3rgmtS7lGCB3rDvXzuycVrBXOpaGRqEnLd65vU3BDEGtvUJRjqN1c7fzZViBtr1KSsZz1OX1UFlJAH\/1q43VBgH5vWut1eQcjOf8AZNcdqkgY8HPevpcOjyK7OZ1FuT05rnb8fM3vW5fP8xAyB6Vj3Sl3bivoqSPBqq5ztyh7VnyR\/XFblxBlsgfLVCW2LDjmvSjI82UWZLRkjgVH5B5xWibdie340fZXz0rfmRi4XM1oDjOKntYCsitngGr4sjnn+dSxWpDjijnJ5D1X4V3JWaNTn\/gJ5r618FXG63j+bB4+WvkX4ZRbbtAO1fWvgpSttHn2xXzWY25rnuYXSmeqWDEoBV3vzVHTcbefSr3GfavBNxKQ5zS0hIJ4oAb2pvU08kdOlNJC0AIfekXpS0nfrQAHNMYfjTiwUU0sOtADZO1MKjpTmbNMLc0ADdajbGSKcWFNZweKpaDQztzTWz3oZwvSozJ9Ksocze9IzZqIyHtxTTIPWlcCTP0pCcZqIy0hlApBYkJx9ajc84zTHn96iacHvQTclLetN3jPXdVdrjvmomus9KYi00hbnOaYX96qG6Df\/WqJrrkc09wLpmHPNRtJ+dUzecdfaoXvAe9PlHYuGYE+9RmbFUnusjrUT3Y9f0qlYkvGUdc1G0lUjfqveopL4MKpK4Hun8VLz7UAUH2rAYtOX71M56U4dKhgSUvAPFNH+RT16VBAAYpaRelJyaAHUUUUAFOA9qTHtR1PFACjPenAUg9KcOe9ACr1qK6mEUZycVLkKM1zXifVltbeQlhjFNuyN6NN1JpI4H4m+KlsrWUbufrXyB4z11tS1GRy5Ir1H4veMDcXMkSSdc5+leEX8xmnY5Jya7KUOWJ+88PYFYPDqbWrJrYl5MkZOa9C8K6eLmMK\/wAvf6157p67mAAOc17N4DsPNgXzVOeK2bsj6\/EVfZ0bsz9Y0EJEWjLcjmuNutHlkchhj1z6V9IjwfA9j5n3y65C4rg\/FehRWcfmKFJHHArKFZSdjxsPmMKj5EeOXFj5QyRx6ViaiFzgY9DXUeIblIThSNwri7qcu3r710pdT06tVclmzE1DPm9ajjIjU9x\/Ord0u7\/69UHOMgYrvpvSx8JiYctVz7lK+m+Qgd6wrgkliSK1rw+\/FY8uQcV6lFaHwWZzcnqUWHBNQSdKsyruPP6VWfhia9BbHxFbRjMZGKQdaVetDjnpVrscUlcYD608Yz1qE59aMVfKc+xKGPWuj8M6q+n31vMrFWRh09M1zJ\/lVq1m8p1IqJRvE6KNTlkfoj8EfGI1Kxtm3clV\/KvpbSLpbi3Xacmvzt\/Z78dCyuY7eSQYzwGP5ivuPwL4gS8tozvyelfCYyl7Oq9D3ZWlFSR3+dwzUi8cVHGwdAQetSAe9cNjAcD3pwPFJUp6U7XEIpPSpFNRgU8dKEMlGKep7VFUnFMlki045Hem0fSgRIuelOB96jU449akoAcDinA02nfxUAKOtPBqMU5aCWOpv+FOozTQ0FAoopgwH0zTwc9KZTgfegkdvNO\/Oo6XoaAJMilA4pinPBpVbNMBcj1pwx60lKKdgFpcmkHSlVs9aVhi7zRvNM3UbqQ7km73pw5qIHNLk0WDQk3e9Lu+lRZNLn60rILEm4+1GeaYW54pu7nNKwaDzxS\/nUefrRkelFhj92e9J5gpuR6UbvWiwBuPrQTk5NJSZ\/WqFcCfUUH2pKKBXD8cUpPNJ05oJpNCGbhT6YvSl28Yq0AhNMJNOJzTakBtFLjij+KgB8Zz1qTHHvSDFPqwG0pXNLj3NJtoELnHFFFFAgooooAKKTbS0AFI3SlpG6UAJmlz7UlBP40AHHvRSE0ZJPFADM9qWik21pdDsBoDUbaac1LaGO3\/AC5ptJupMmpAdSN0oz60lADSaQmikyKkBaUdeaaDmlpASIM18+\/tF6hJJc3Uds\/+kOqWURzwr49PXJNfQqDc6joM8mvkb43amst1dXe+Vv8ASBKBGeRL5hx\/QV7GWU+fExv0PkuJ6zo5dO3U8o8O6xBDrNzHK67p44li8tSAX2s3JHbjr7jNUrrxWqRho4\/9Ej00eQkgI3XHm7gM98DhvrWb\/Y9zawWt1bSKqQTE3HzfOqAEcdyOcH2rFmC2yCeM+ZFJbNLH5nGBu+YgA8c59OgNfqMaUE+dbn81VsXXaUFbQu+NryHUNMs1nuotMiefzBcSLvVF2Pt4XkgtwP8AeFecR+KIJLa3SdpCXJV0xx29+n49q0fiXufS9iBiYgrYdsgIw3nGewyPzriliEFhbSOcnacev+eldVKlHnknse1gqkpYSE29btE+r6tb22WjkebnCjB\/Oudi8QNBOrpEZACGMe7ggHn8xRqEhIWUf7o\/D\/IrOvpFjRljIKkhwAMYOSMEEcHk+1Zy0Z9xhVzwipLVmpceKPOeSTy\/K3HO0chQegzQdcQrhHzz79zXOzOXcs3Bbnp\/SkifaABjqM1zSm7nrxoRSudH\/ayxrvznkgAdaWLVbiWYEIVjLDkMKyrGP7VPtDoHLcFmC49z7VcgkWOTaMkIcE57\/wAqi9yuVJnqfwqlkuPH2iRsXljgu7WUqT289Qf1Ir9YLjmWT\/eOfzr8h\/hxrB0jUbbUZwwaK6gbgZOBKuP1r9c3lWU+Yv3XAYfQjP8AWvgs9jatF+v6H3WTNOk12t+oq9emaUY\/\/VUamnDNfL3PeuPXrSUvfmlyKooMcUtIKfQAm2jHtS\/eooAKT7xpaQigA20tIBiloAKKKKAH0n40tFAmFL04NJSrQMUDFAGKX8aDg9qADBowaXr3paAG4NFLntiloAZzRtHrTsfWkxigBuOOlBFOHWnYzSuBFjHanAYpxGaWlcBhGOtIwJp+yjZQBFsNLj\/Z\/WnYweaWi4ENFSbR6Cl8v2p3Aj5z7+lLg+lSUmz2ouBHgGkIFTbT6Ck2UgI9vy\/1pNnFO20uz2pDsR7B6U3y6m2UuzHakMrbT6Gk8s1Y2etO8v2oGQxx8\/WrEa4PpTo4sE1II8CvPr6o1psaRgU1lpzLigjI5r5+pqzqRXcYbFVppCtWpOtVLgZBrkRuiu99JGcDJFVn1WQLjJ\/OlnHNZ10MCndmkUmLc6q79z+dY17eu2cnmp5z71kXjhnpm8Yq5Su5OSc1j3kmTjkVp3TcE1iXj4yK0gjpiZt5OCDzxWHezEk4JrQu5c5ArHuRgsM9K7acTW5h6pITkDv1rn7uUBTg+2K2dSYFq5m8clG5r1qMLnNN2MDU2yMVxuqNtBya669bcWxxXL6jAfmz6V9Dh1Y8mu7nNXYLNz3qk8Abtmte5t8ngcVELfeeletF2VzypK5gS2pAziqc1mc4Py\/hXTva+gqtPZgufl+WuqM9TnlA54WWAfcU5bMenWtb7LtxkGmiIZx0HStOYxsjKe2CjpTVjCkcfpV2cKoyKoyygHca2i2YySR6J8OCiXSbue231r6o8F3SmGHDbmwK+PPCGpiCZecH\/OK+hPAvitBFGrOe2MmvJx1Jy1SPQw01blPo\/TboCMEHNaH2pfWvP9L8Ro0Wd9aI8RL0Dg\/jXzzg0dnKdYblR3pftS1yP9vruwWp39vJzz+tCixWOsNwMdRTGuRnrXLDXFx96nf2yvXdS5WFkdKbgAdaa1wa51dbVv4qT+21Y43UcrJOja4yPSmmcdjXPHV029elRnWFz94U+VlWRv8A2qmNdVhvqqjvUT6sozyKvlYro3GuAvemtcgcZrn21peuahbWVIOWxQotjudGboDuKja6Dd65w60P7w\/GoX1lR\/H8p96fI2F2dG1yAOtRtegH72a5iTWl2n5vzqvJrij+L9apQbFc6o6gq8A1G2ogdTXItr4Bxv24qCTX0bkyDP1qlSbFc7BtQVhw3WoXvufvDjrXGyeIAjN8w2+magk8RKP4gtWqTJv5nZPqIU\/eGKhOoADmuNl8Rr\/fA\/Wqr+JFO4mWtfZN9Bc6O2bUgvfj61C+qj1rh38RKrZ35NVpPEKrwCPzqlQfYnnid2+rrjlv\/Hqgk1YD+KuGPiEBWG\/5qhbxCWOM4HtVrDsXOjuH1cdmz3qI6qOuflrhW1\/\/AGifxqF\/EAxkt\/49Wn1droT7RHdnVue2KibV8fxY9q4Ntex1bGai\/t\/kZYVaw7XQn2qPt+m\/SgH9KP4q8M6hcU8deRSZ5xS1D1AVO9PA70xfvU4HNQSx9FIDkdKWgQUUg+7zSg0AKvSloH1zTloAQjFOBxSHNMZtoJoHYivrpYYm+leJfFfxctlayqH5wa9F8XaslnaSEvjAJr5E+Lni83dy6B8r9a2pQ55an2mQYH21VTktEcB4l1ptQvZHYnkmueCmR+RTDMZpyxOav2dq0sqrjrXpuPY\/acPJOKj0Oj8H6Ib+6XKn8q+j\/h94TyqL5YIA546V558IdAW7v4\/l6DAr6u8KeHo7K2Vii5xzXmYmpZ8qPm8+zL2X7lbnO3Glx21jsKjp+Irwr4mzCDzIlXJJ7dq+g\/Gc0OnWkzsdqL2r5Z8bayl3dysfuqSBWOGi27nm5JzVJ8\/Q8l8SkhiRnnv0rmFfJ5Oa2vFN+J7gqowijAHrXPQsS+fWvdUfdufT1qt6tkSTplazZlOa05nGPw71nzY5Ga1pnl41J7GTdpuQnNY84wxrZvWAB\/vViy\/MxAr1qWx+bZnbmKcnPHeqzA44q5KuDuqrJ8pPNehFnxldakH8XrQw707v+FMbpzWqPPlsRY557U4DtinOODTOOMda0vc45AHHanKxHeoV+8KlFPYhM6zwTr0mk6lFIHK7WBBzX3h8EfGq6jp9u\/mbjgZ5r86baUwuCO1fRPwE8fNYXcVu8h2Mw2814eY4f2kLroe9hKvMuVn6QaLfLc264bPFa4615r4E10XVrEA+7gdK9HiYSxhh0r4xaXRvOPKyQCpSaiHFSn61SM2InB6VIDjtTV\/nT+lOwXHgn0pV4poNPU9+KoQ8c9KcKROtLjHFSAVNUQ6cUqntT3AlB6ECnA+tRg9+9KOtFgJaUGowacOgosJjx7mlpi0+qFcSlpM0tFig7e9KDikqX3p2JZFS76koosIbkGkqQHFKDmiwDV6VIKaelJ6UwJB0ozTaXP0oAWijtRnFACbh60ufajIopAJ9aN1JT8GpGJnNJup2DRg0xDd1LTafg0hjc+oo3VJTelVYBNrUnFLSN1oELRQelJz1pgL9KbS54xSUAFFFFAEbdaacU5utNPb+lSA2ndaf1p9OwCDpTv4hTRmnfxCqQmKTiik\/ipaQgopF6UtABRQTijOelABSbqPwo3Y60AG6jdSHrRQAZNFFJnNACfSgmgmkoKDNG7nHNMooAKRvmOOtG6jPPrQAh60UUw9aQCnrSUU1utSAE0hOKQt6UE9qAAHNPB4qNTzipFoAbdzm2srmbODHC7g+4Bx+tfF3xTuEeIQu+NzGVgSM\/KvX86+v\/GN4NP8ACWqT5xiAgH3NfF\/xUEWqaxBC2SPsjbxGuWGcj68jIr6PJl+\/5j8441qpYWMP61OF8RXDva\/aI4zI+2VfKBwGxCTwT06k8+tYjG3bSVA2ysZDCUY52hkV8j6jcParnj+G5s76BId0MQgnDRN13eWqD36gg+lcxJcFbSFWyB5pdyoGMKMHA7cCv0jDuMqaP58xkeWaUexU+JkiN4N01iQ0pvEt2ccbVCyADPuP6V5zeTMJGUZIXAOK7nx\/O174bO3a2LmOTg8Ky8D9GOa4W8cPO4XjIx1xk10Q5lKfmfS5dKE8LSSWq5k\/W6\/zMa\/PTngc4xWTK+9Mk5yf65rVu3y7LnqM\/gTWc0Y+xnnkZzWUtbn3OFfKlcpOPl5PTmj7uVx6fzpZTk4HOBz9aWKPeBnnPFcnQ91aLUngMcTRvIpZVcFgpwSPSpkvmaQsvAYk4Jz3qCcqiiNSfU80WbCMsWBORgexrNXB2aud74TmkubcnGY02r5n+0MN3\/A1+t3hDUU1fwhol5G25Z7OJ93fO3B\/lX5AeG7tI9MuLcfu2kcbjnGM8Ej9K\/VH9n\/XF8Q\/CXRJ\/M8ySAPbycYwyn\/Ag\/jXx3EENacvX9P8j6nI5L34+n6nogOaeCOtQr0qQZr5Cx9RYlo56c0g6U7I9KYxcU5aZ+Ipc8daAHd\/mpaaDTqACiiigAooooAX71GfSjdTvpQAUd6QA0tAgx2peDSU+gYU6mjrR1oAD1o496O3Io9qAF6UtIF9aUCgApOppaXHNACAc07FIOOKdSYDcH1oIzTqQikAnFNxz\/SpKKAGbTS4p1FADPwNFPoHSgBmMUu3FO24owc0gGY9qNvtTse1GBRYsZtGaXZ7VLge1Ie1ArjcUbfelpwAxUiGhM09Y\/XrTlAPWpUWpuUMWKl2bRUoXmkZSK5Kyui4srMmetR9qsScLVU189VVmdcdSKSq04zxViRxiq8vPSuRHREoTLxzWbdj5RitWbqazbpcqaLGsTGuDisa6OGyTxWvddDzisW7PztVI6YlS5fCZFc9ftz9K3Ll9ydawdQwCe9bxR0RMa7cBm9qyrh9xY5zmr14+CcVkTy4\/Cu+ER7GJqmNx5\/SuVvD13V1GpYbp9etcpqHCsfevaoK5yVGYc5zurFvowWrYmyXZcdKyr3gjB9ce1ezT3PLmzGmjwxxjHaoREOmAc81Ylx3+n0qJWBYjGBXoI4WMMJzkndVS5jCs23mtB2w3XGapXDjd0rSLdzKVig6joeAKpSEA1YuJBgn2rLuJfnOD79a6oo5Z2IruXC9cVi3M\/XnpVu8ueGOaw7ubBODXfTRw1ZI19O1Q28md31rv\/DfjRrcj5+g6V439rKk4\/nVq31d4uM10OmpaM5lV5dUfU2m\/E\/yYlBfd+P+fetNfiordZK+WofE0iLjeT+NWV8UyL\/y0PPvXI8vpvodEcZM+pY\/imh48wn8atw\/EtS2TN+tfK0fiqRcYkPsc1PH4tlHIkwfY1H9mQLWNmz6oHxLQ\/x7fxqYfEmLvIOP7xxXyuPGEvPz9f7tSr4zl3ffNZ\/2ZAr69I+px8RY2C5YdfWpF+IcWP8AW\/8AAa+WB40mVcbz+dSr42mzkStS\/syBX15n1KPiHGW\/1g596T\/hP41Jy449x+VfL6eOJlbIkYnjrUg8cSjneeO9T\/ZkA+uH03J48iVf9btb0zUbePI2b79fNS+OJgf9YSPrQPGcrtkvR\/ZsR\/XWfR7+O0w2Zcdc81E\/jpW6P19a+eV8Yy7eX780q+LpDtAeqWWxXQn62e\/nxujcBvmxxz1qvL404+\/u59a8MHiuXs5pR4ok7s2frTWAiuhP1pntj+Mcfx81Wk8YDH3mX05rx1vE8mzhzn1zTD4kfu5\/3c1awSQfWj18+MPR9oqu\/ixmY\/Nj8a8nOut\/e\/I0n9ts2cPgcd6pYNIz+sM9UfxU3djUbeJSW+98vrmvMRrLg\/e\/Wgay56t1PBq1hUugfWJdz0mXxJu\/5aVBJ4kI4Mnr94154dYI4z+NMbVW2\/eJq\/qyJ9sd+\/iTJ+8P+A1C\/iTKnD1wZ1Nznn3prakzdz+NV9XXYXtjuD4hO7hv1ph8Qtxlz+dcR\/aD8+9J\/aDdAcVSoJE+1O0Ovk\/xEf8AAqa2un+90rjDfOTnsaPtrMfWr9kifaHYHXScc0xtaPQc1yS3jdu9PW63UvYoftD9SRQOtNBx9KeDz9K\/PD6Qe30xSd6WjG3tWVhCrj8fenUAAUA5agW4U5elJx70u2kIUe1LtoA4pKB2HDpRQOlAPegdh45qpfyeVGTmrYOTWH4guPKtnOduBQa0480keM\/GHxQLK0lG\/GQc18eeK9de\/vJCWyST1r2r47a4z3Ese7joa+cLqYy3DntmvZwlP3U2frWApPC4aKW7NPSB9omwR3xXo3h\/w47yRttznnpXAeGSqXkW4dW\/Ovqj4YeD01O0t5GUEtyTilXmqaufRxxKw1Bzkb3wn8PHT7lGK43Y\/Cvoa0UR2fPAxXLaF4PFm8bBQNvB4612gsAtthjwBXgTl7SVz82zDFrE1edng\/xf16Y7reFTyT83oK+avEkj7JBzk9zX1n8TNHjSCVowGlYk7vQV8w+ObaKyjlck4GePVq9DCNWsj7nIqkHRtE8Z1RW8xhjPUVQj4IFaN5maVmH15qgU2Pjqa9hdjuqfxOZCTHArOlfBwK0JjhOe46GsuQjc3StaaPNxs9dCjet15rHkI3etal5yTisog5PFepT0R+d5g\/fIpV3LVOUckgVdflfrVSUZ7V2QPlsStCuvSmt14p3RhTT1roR5Uhr\/AMVROeAPSpn7VAVyatHHNgpGalqJV9acnORTaIQ\/p7V0fg7WX03VIWV9vzAiuc2j8amtJCk6lc5BzxWc48yOijJxmmfov8D\/ABl\/aWn2uHO4AArX0zpFyJ7ZSD2r8\/v2bfEbrdrbu\/XHy+9fdPhC68y1jGewr4HGU\/ZVWu59LVV0pI6odakJxTVXdyaeOlciOQQH0pwOKYM9qeD6VYh4NSDiowPQinDrQBItSZqMdKePxoAKfk7jTAKcOlADh2pw601adQA6imjrSg0APBxz1qSox0FAOPrQSPzxjvRk+gptKDk0wHA85FSfN7VEDilpjJB90UZHrTN59f0pKYWJaVaj8z2p2R60CsSCm+lAanE+tAgopCflpmT60gJKb24puT60ZPrSuA4Fc1IDmocn1pVOeDTuBLRSZ+lNDle9AD6X3qHzPajzPai4FimVF5ntS7xii4EmRRkVEW98UbhRcCUnFJn6VFuNG40XAlz9KSod31p2T60XAkpm4U0tSbqVwHbqMjvTd1NpAT7RSbBTd\/uadvFVoA6kA5NJuo3djTAcOKd1qPdSg++aAH0U3OKbuoFYkyKaTmmbvenBqBWFyaKKKADtQSKKQmgBN1LnNNpQfSgdg3UHntTcijIoHYXj0pjLt6UrNngUjEfdpABIpDnvQTmmE0wHUUykzzilcB2eKSkyKQn0qQFJxTScGkJ96Q+lABSE0E0m2gBQe4FPX5qYBUyds0AcX8Yr37L4KnhQ\/vbhgij15A\/rXxt47S21HWnlt7x7O6+0eZC2cZ8uInaexGS35V9RfH7WEtLDaXVfs0SucnozNgf0r458WSRyvdksrOkTbWLbSvDbcE+w59cmvtsio88XL+uh+L8cYtRqxgtbf5lLUdWe70ey\/di5kkidGmLEld03BI9SMcn+dcd4tum0u0s8HLPMVC9irN82fwwK1bM3EdzdCX935ESxqsb5Xeqcex5OfxFcx4+Z5tN08ux378MQe4XOAfrzX3MIKnGx+N0n9YxkFP8ArQZqtqYtKNudwBdypPQ4OfzwRXCzr5bFHIMyHJ9cnmuzvNRnns1hLsII8MFB+Vn27d2OmeSM1y0l1JcXjq4QmFFiBwB8uP55JOTz+lbarRnv4Dminf1f9fMw7mNftT7mHyAKCfof\/wBVZzNkMB3H\/wBatm8t1eWcEcnBye3FYxUr2\/iI\/I1kz7vDvmin5Iotwx9+opythhzjgH8qU8knmmEEHPWuBqx9HurMlJGWyQc84FCnjpjHNMJLJn09Kcr8ngnik2O1ka+i3BhugQAQ5UbT6ZFfpN+xTrLXfgXXLBz81verMiZ6K8ajj8Vr8yoHICsuVwQdwPSvuT9hDxdv8T6hp0kmRfWKMhLfeZOen45r5\/PKfPheZdGj2sonyYhLvofay9KlWmLkZ+tKDmvz659u9CTPOaAfakB9qXJouK46n0zNHahCHe1L+VNyc06mUKtLTaAcGgQ6lplO\/SgBaQGgUCgY8e1FJketGRQAtOGKaD2pfwoAdRnnNJnnFLQAZNKPpSD1p1ABSj2pKdQJh35paKQ+tAhOtO\/WkzmlyO1IewUnelopAIRQTS0hoGIT2FOplLn2oAdQOlNB9adQA3cKMinUgOaQ7iZHWlyKYTijP1plElKT0qPd707P1pCHDrTgcfSow1O3iouBKjYqVTiqwepFkxUsZYUgUH5ahElSFs47Gspq6KQyQYBqq45zVpzz71BIOteZWoX1OiMjPmJAOOtUpXPOa0pV5xiqksf4V5ksO0dcZozpp6p3MgZOKvTxEj1qhcQYXuDWPJJdDZNGRd8g1g3pGcjtW\/eQNzj71c5qEDqD15qVF9jqhbuZ1zNyeaxL587jmrF28qE7QayrqSTDblOK6oJnWlYzNQOMjP4Vi3D\/ADf7NX72ZgTlTn6Vg3V0QcbTXo0o3MpaIrXrBlYGuX1I7RjPXNbF9fbB0+bmudu7tGU9scbWFexQi0cdWSW5lTk7+nSsy\/I5JHFWbq7Tefesq9vl9a9enF3PKnNLcoytg+uKqiQJ0+9UNzqCrnnn0rLm1NU9TzXpwgzhlKxryXI4H\/oJrPurnBPPasm41nGcE7vSsq61Y++feuqFJo5ZVYmndXv3jmse6vlBxms651EsDjIHpWZPeOQetd0aRwTqou3V+PXNZNzdZ3c1BNcMSM5qqQS2Mcmu2FOxwzqXH+cS3WnJJnpUQRj2qVIXboK6FY59yZZCB1qTzDRHaOBT47JyOFNIEhonPqaUTn1qZbB2\/hqdNLc4+Q80wVyqLhh3NKJ27E1ej0eQ4+SrUegyNztoukVYyxO56k1Ikr+praj8NyMv+rNXIvC0zdIz+R4o5kPkZzqSP6mpFkY+tdNH4RmbH7o8+1WY\/CE39zn6VPPFdR8j7HLq0rLgk1IruODmutTwXOx4TH4Zq1H4Hn6eW35Vm6se5apyfQ5CMvnjNTKXP412KeCJPlG08+1WI\/BMrHIiOMenNHtYdx+yb6HFrvqTYzDoa7iLwTIQAIjzntUsfgt8cRkZ56dqz9tDuX7JnCqjqp4xUgWRugYrXbJ4Octna3+6eDT18ISbSRGSKPbR7j9lI4pYpOc\/d\/2alKPt+6a7JfCDFmATj6Z4p6+EpAcbD78dqn2sO4eykcaEbHAPFAQnj1rsj4WYNkqpx69qRvDEo3Apn6jFHtYi9lI48q1G0nBxXYf8I0+7Hl7uf1pP+EbLYZVKsar2iBU5HIeW3pigxkd+5xXWHw5Jk5jIB9uKd\/wjxDfczn2pOpEPZyOS8thkkUGJugFdX\/YDH+HaP8\/4Uj6A7fwml7VFezZyvlN0waGiYDnNdQdCcHBQ\/Sg6Cxb7vJPUU\/aoXIzl1jLdBUogb0roTojDB296BozbR8rY+lCqIORn6W\/x04GkxQRX5tzH1Fh6setOx64oVh24pw\/nSsOw0\/71LnnrxTqaBk0wsOxu4pwGOtNUfN9KkGOtSyWJyKcDmiikAoHtSjA70mTT9rUAMY9a5TxbNttZef4a6thgE1xfjBv9Fkx6elD2O3CK9RHx18Xw91qMuD3x+NeKzWLRSng17x8Q4VlvpgfXNeaXWnKzE4zXs058sUfuFHCxq0onP6dKbeZW5yCCK+tfgh44tjZxRSSJwBx3r5YnsTGMBauaNrt3osuYJGj7kZpVYKtGxrWwiq0nSmfpTZeK7EwofNXcAMc1Hf8Ajq0ghJadOnOSK+CIvjFrFrAIxISPY81Svvi5q92CplYKevNeesHLufMLh1KXvT\/A+oPiH8SrIwODOuOeO5r5e8deKTrVwQrfICcAGuY1HxRd37ZeVsEeprJkuS3U89a76VFUz6TD4elhIclPUfNKMEDrWdNKE6nLVNNLlT9aouCW613RVzkrzaegk85I61SkfIJ9almbnHOcVTkf\/IrojE8DE1Xe5XnwwNZrgh2P61oSkkVVkh3t1612w0Vj5LFr2j0KsucHqaqydjirzxlev\/66qTJ711QZ89iIOxSb71Mqdo8H3pGiNdCZ40oMgfnn1pCOeKn8n1pvl+tWmjnlSkVzH3zUiLkYxUgjNTQWzM65HehyCFGTewxId3Tn3q3Y2DSzrxx1rQtbEkdPrW1p1kElXI56Vzupc9ulgdmz1L4Eq9pr1r\/ACcV98+BZSbeMH2r4U+FarD4gs8YyHAzX3P4EI8iMe1fJ5nrNM76kOWCXY9HTBUGl70J9z\/gNJ+FeWkeYKfWnL1pq9KkBBK0bAKPendaaCKkz60wFXrT1qP1qQMBSuA4E04YxTAwPtRkdiKdwJB9aUnFM3fT86N2aAHkg0A5pgYCgy+\/60XAm6UvHvUPmeh6UnmipuBPu96Bg1B5v0\/KguR3phYsBqM+9Qef9Pzp3nD+9RcVibfTg4PtVbzh6ilEvFFwLGRRuHvVczZ70vm0+YCcPt70oeqwlpwmpXYFkuOmabUHmnPWl86i4WJs+1BNQ+b70gmouFifd+NLn3qLf70eb\/tCi4WJc+9Bc1Fv96Qy0XCxNuPrSZ96i8yjzR6UXAlz70A1CJPelElFwJc+1HPSo9\/vRv96LhYkDYoJ5qPfRv9aLhYkoqPePWjeD3ouA85zS1HupQ2ehpXAfQf0qMPigtRcB+4Uo\/So9w9RRmi4Em8+ppWb14qInFG76VdxEvmfWlDk9MVDuNG80XAn3ims3rxUYbpmjPvTuBKr4pRIR1qIHJpcn0FFw0Jt2KRXzURYYpMj3oETb\/lpGcDpUWaM4PFFwJdwpKjyaTPei4Em6jdTMmjPpRcCQtTCx6U0mkPIpXAWmkmkJ5pM+9IBc+9Juo3UlACk4o3UzdTqAAn1opv8ADRnigAakJzQT70nX8KAJKki5IFQo3PSi5uls7WedjgRxs+foKaA+Yf2ivEEc981uJl\/0vUI42548uPJP\/oGK+bPEdwBJqFzchbj7UkEEALnMZ2gu20enI\/GvRPjzrMmoeNNN09GPkxW8lzJtPUswA\/8AZq8v1ARLd2cqq26RvNfzOQMhuP0r9TymgqeGi2t9fU\/mXivGfWMbU1vb9L\/5jtIaKea7ac4Uxs\/PIHb+WK5O9\/4n+n2K9zdfdJ5weOP6mt+SVtNsbyRTlViYEnHODkj9K5HSpGj0C44JY\/MuPd8fyP617qd58r23PjcLT92VeL1Ukl80wu3S1iWIsZElbK49Ov5Vzk6eZqFy46GXDHPbA\/wNbt0zXWpWm9WACupBAzjGf5GsfUFZdVmKfdPzY7EliM1ve8j3cKuXS+rX6\/8AAMWVt1+xJ4Awc9qxioZQAcDJJ4rRGY05b5snOPWqBAVMZPIzwelcx97QSirLoZ7KR6elN3HA7dqluSNxIOfm\/Oouox1rklHWx9BB8yuCpk7s\/lUixEnqMemaYFCjdjikLvuznjPrWdrGq1LNsBHJtc4H8Xr9a+hP2WPEyeF\/iT4WmOEtzeGLjurgqSfp\/WvnePcSefm\/Wu\/+GN7Lpup2c8Mzq9uzuf8AZGAw\/DIrkxdP2tCpDumdGGn7OtGfZn7CMAG44545oHHeszw7qDar4d0q9LAm4tY5CV6ElRmtAN+FflB+kD8inBh3pmBQOO9BNh+cd6cH+WogcU4HbQBJ09acMnqajB7U4GqKJKUEflUeSKXd7igQ\/d\/nFLUeW9KcCcc0APPWkoxiigYUuaOaSgBd1Ln0pKUDFAElIOlItOoAOtKKOKUGgBw6ClplPoJYU2nUygEPpvHrSUmfrQOw7dzRnNN5pD1oGPJ9KXmm7vrQHzU2AfTMeppeKQkUWAQnH1pcn1o7c4puf9mgBd31o5pabu9KAHUUVGeD1zQMN1O3D3qM+1Jk0hk27HWk3D2qGl3UrgTK9LvqHdRuo0GWPM96eJfequ+jzOeKiwFsSg9TRwfaqokpfMqLXHckkj3HOc1Xkhyal8+gzj0rF00zRSZQkh68VVltsg4HNazMpPSo2UGsnQRaqM564si2eOaxL3Ts5yK7N4VOcAVWns1kPT34rN4fyNY1rHnF5oe4n5f0rIufD5fOF6+xr1KTTVLE4\/Sqb6RznFSqJssSzyO78NMw+78uM9KxrvwiSpOw+vA7V7ZLo69CB6dKpzaFG3WMN74rRU2tiliTwW88EPPvwo2gfXNYt18PSzlQqqRxX0U+gpnIUevHr61BJ4dQ\/wAPGMHk10RcobEuspbo+Ybr4ZPJgqgIIJDZxz1x\/n2rI1D4Vy5IEZ2jH8JP4+tfV0nhqN25XPbJFVZvDCFt3l84xuxXXHE1UzFuEt0fHGofCu4VuIzg\/Q579P8APasC++Ft1GWxGcjtjGfevteXworfw855J6mqE\/gaBicwKR2yoNd8MfURyyo05HxDcfDS9y22F8AelZt18M71eTC3U9jX3M\/gKBjkwDjvjmopPh\/avwYF5z\/DzXbHM5Loc0sLGXU+CZvhzeA8xN7nFU2+Hd0f+WTD6ivvSX4a2rjBgTP0qk\/wtsd3NurZ4we9dMc2it0c0sCu58IN8OrgtgxnP93FNX4c3OeY\/bpX3c3wqsXx\/o649gaavwsss5W2Rc9V281ss2iuhn\/Z\/mfDsXw3nIz5Rx9K0bf4X3b9YD\/kV9sp8L7NcD7OGAOR8uKsw\/Dq2VcfZ1\/Kk84v0F9Qh3PiqL4WXfBEDEeuKvW3wrvXx\/o7H8K+0YvAECcCABR1CjjFWF8C26nPkAn\/AGhWX9sSK+owPje3+Edy3JiIx2xWlb\/B6crloT\/wEV9dr4LiXP7vj6VInhGIHOwCs3mtR9DVYGkj5Tt\/g3KCv7rOMZ9gfrWta\/BwjG6PnnNfTi+GIwv3KkHhqMcBAM9fespZlWZosNTXQ+dLX4Pqr4aNfXaB\/WtaH4SxonMYP4cV74NBXGNtSroa\/wBz9K53jqj6l+wgjweH4UQx7cRhOc8d\/wDP9KuxfDOBT\/qgf1r21dGC8bR+VB0cddorN4uo+poqVPseML8OIBx5Z57VJH8O4d3EI9OlexDSAP4B+VH9kg9BUPFVO41TgeRD4fRfKDCrDvxSt4Bi6eQrZ68Yr13+yR\/cH5UNpS\/3aPrM+4uSK6HkreAoTgGMHBpP+EFjBzs3D+7ivWW0sH+DpTTpKnjbS+sz7hyLseTt4DRsDZu\/3qibwHGGyI8Y9q9d\/soYHyUxtKBHAp\/WZdxckex5EfA6\/wDPP\/gVMPgldv8Aqxz04z+NettpS+n6VE+kj+7+lV9Yl3HyR7HkZ8FqoysOMf3TUEvgtG4MXHp6V7C+k53fL+lQPo6luVqliZPqTyR7HkD+DB2jwc5qOTwdtPSvXm0gKT8i1A2jqW+5uq\/rUu4vZx7HkZ8HnP3Bj6VFJ4Q24G1Tj+8M168+jq3RMZqJ9Gz\/AA1SxUu4vZI8fbwjhvuVE3hTb\/Cf516+dDTnKjn2qB9EDH7oJNWsUyfZI8iHhY9DGMD2NMbwqx\/gwK9ak0Ec\/IKibQRj7rD6VX1pi9lHseTP4WwMmP3+lRN4aI\/g2\/7Ir1htCBOMc1A2gr3GOP7tWsUyfYxPpEe9S0zafanbBXz6O0P4flp60mOM0oHpTAWinZpc88UrhqIqgU\/ApVUt2qXyR\/k0rCsQjuaMZ6U\/bgU5RzyTQMFXcKeBSjHelGKYERjypOa4fxkp+yS8djXdsuQ3Fch4vtzJZvjnj0qJPQ78GrVUfIXjwE385PrXCOoZjxjmvRPiLFt1GbnHNeck8kV6cFeKP3rASvTTK88IY9Kz3sgWrUcdTVVj81UnbY9SST3Myay4PHWqMtmQxNdAxB4xVaeMbTnpWibuZ1KcXqYDWrA5pv2Y961GRSc9qjkiBxxWl77nmyilqZj2\/JzzVSa2IGcVseWHximSQ5XpmqUmjlqU1NXOemiPOKpywnBraktsdRx3qtLAM9K7YSufK16TZimAnrmlFsR1HH0rXS2B9aWSEYxitudt2PP+qrc5+eA5qm8HTIroZbbrhaoy25FdEJnjYnCq5iNbEnOM0+O03D1rT+yhjk5q5bWQJxjrWrqO255dPAxlLVGGbFgORUJtOeByK686eCo42\/Ws+ayCMwI4J60o1bs1r5aoK9jIg08t2J\/Cr9vpwXtWha24ReV5omxEpx+FNybHTw0Iq9iNMQg9u2BUsV2FkBx3qjPOw45FZzXZV8g8VcY3ObEV1DY9t+F2or\/wkFpuOBvyeMV93+CLkC2jOcZFfmr4C19bLU4JWfG1hX278OPiDBd2EOJhvAHevDzKi7qSWhz+0VWG59Hx6ivljkVJ\/aCk8EV5qnjSLA\/er09alTxlGzf6xT9DXz9mjk5T0db5TR9rUnqK4FPFqMcbv1qwviaM\/wAYqXcXKdx9rGPWpBeAf\/qriF8SRN1cj8akXxChHD\/rRqHKdqbsY6im\/bB2OK5Ia\/H3anDW1\/v09Rcp1i3fvT1u1HeuRGtof4v1pw1kdA9Dug5TrPtpHSj7cPUVyw1cH+OlGsD+9Suw5TqGvRjrSG7Hc81y\/wDbC\/3\/ANKP7WH98UXDlOm+2nqDzQt2BzkVzQ1UD+LmnDU8fx0rhY6U3Yx1pBe+9c8NR96T+0sfxCndisdF9sHtTvtq1zg1Ol\/tIEZBo1HY6BrvI60n2r1NYQ1DOOacL\/3pXYrG+LrAo+11hi9z\/wDqp\/2wUXYWNoXQpRc+9Yf24etL9u9zTuwsbi3WT940puc9zWKLwHvinC6U96LisbH2mlF0M9ayBd+9OW8\/2qdx2NgT+tOFxn\/9dY4uM96d9opcwWNUzc8Yo845rNFxSi4z3o5hWNETA+lL5n0rPE27vTlmPQGnzBYveZ9KPNHtVMSkUeYadwsXi4PUUvme+KpebSiSi4FwSZo8w+oqsJD6U4S57U7iLG8\/3hSeZ71B5nalElK4FjzPpS+bVcNjoKUH3xVWAnElBfNQhqcDnpTAl3mje3rUeTRk0ASlhjrS7qi3UA9s0AS7qN1R596KBEoNLn61FupwegRJuoLYqPfSE+9Ah+\/3oDVFTg3PWgCQMKMmmBhRk0AOo3e9NyabuoAm3U3f71Hup1ADiaQk00tSFqAFJpaj3Z5oBPOKAH7vTmkLU0nrTTigB26l3d6izmnZoAf0pN1NJzzTaAH7hzSA7jTelKpPr+dAEgBzXO\/EbUxp3hW6+YAz4jHuOp\/QV0YPPTHtXkX7QPiAafojIpyLe3lnYZ4BCEj+VdOGh7WrGJ5+YV1hsLUqPoj4v8ZXN94j8e6v9klTdE628ZduPKRdxJPpl\/0rOupIZWt7eG2ECozEysxLTHoWPYD5uAO3XmsfS9XnuDd36v5c13K8mQcYQuNv8h+VXSzzG1kcn7uFDDGMtkn8z+gr9pp0lThGPbY\/kbH15Va02+rZBrF15uk3mExuhdst6cgce\/Nc7Z7ntEAUMuMN0xu3Zxj8q3NUcPG1qASrW7KNpzjOR\/WqNtex7ShXYQXZPZVABJ981SSbJoScaDjFdbmJfXCX7\/uxgpIoznnkj8xxWbrUYgvLlzwFGF9xnP5VqWqCy\/tKZlykbgAY44HH6Vg6hMbu1k3f6x2yMdAvGK2slE9\/DRXtFGPw6fjZmLcDbhSD8xwM9vaqUgyzZHY8GtG\/mIXaFyTxnHc\/Ws+R2aF8\/wAPFY2SPs6DbimzOnBDHPrUQzk54zU8jBlz1Y9sVAWzn8q4p7n0lK\/KIWzwB0p23ABIApIwd2fwNWcFkPfgHn8Kysat2IcfODuH8zXQ+HbtLa2vvNGBIq4I68dR7\/8A1qwJcDgZA96s2spjRhgHcCB+INNJPcL9T9aP2afEUfiL4M+HmRstbW6W+MdFUYX+Rr03PzV8ufsOeLI7rw3\/AGO8jGVrXzEVjxiNgOP+AsCfrX1C55OK\/JMVTdKvOHmfpmGn7SjGXkTE+hoBzz0qJXA4qVenSuQ3AZoFLk7abTJH04Go+1PXH0p3Hcd1peopAM07gCi4XA9acppm7nrS7\/ei4XJFbFA570zdS0yR9LmmingdBigq42pBz1puBTs+lAXD8KP50lKF9RQFx1KM0mDTk7UBcKf9aTI9KTd70EjqYeOlGc0nbmgpCZ46UopMGjj3oGLj60n1pc+tITmgAoHWiigBc\/WkJzRk0HBoAMmkwfWlppNADj8tOqPijdxU2Adj9ab9OlC8n1p1AEbcHrQRjmjn71IR3p2HcD1pKXHFGODUjuJnmmk04mkzx\/WlYVwzxSdO1IeKTdSGPzxzQW9Kj3e9G\/3oGOLetNL+lITTSe1ADt5zSFjimE8U0nNLQB7P+VMLU1j70wmoY9hS\/Wmls00t6mm7setIBWA6dqhKgdRSljim5NFguMKLn7oqNo06ECpG7VEW7g0BdkTRJ2pjQqe1SM3NNII5xTWgyBrZO4FRtax56CrFIwzTGiqbRPQc0jWSY4HFWSMUE4oJuUWsk7rUTWMZGOPfir7A1ERk00F2UTp8f90Uh06PstXqMD0NVqO5QawRiDsFPWwT+6BVwLx7UYH4UtQuVPsSf3RR9jT+6Kt0wjHvRdhcrfZl2\/w4+lIbYHjFWtpoKfjSuBT+yCg2\/HK1b2e1Ltp7gVBAvpT\/AChUzJSYFSSQ+UO2KaYRu6VYpCOaAK32cUn2cemas7PagiquBW8gelBhFTkYppHamBWMAYU37ON3SrJGRikK96AKv2cN2oa39DVgg008dqAKzQc+9RmEelXJB8tR0BcpGEdhUTRD0q63PbNRkA1a2GUWtw3bNN+zDsBVwpuppQ5wadiil9mX+7TWtR6cVf8AL9qYwA6YpE2M5rUFsFRUL2i+laTLgUxlB7UXsIy2sh0xmmGyGelapjppjHzHmruGhkPYjGcbqgeyHpWw8YHUcVGYxmknYR6jt+XFOwTS4+alrIsTmlHXnpQFP0oYHPWluG48vjhelPRQOlQ9KsLj\/wDVTKY5F4qUDI9cVHgKDzQDnnmpbsKwuKUD0FIM\/WpVUAelQikhu3FOGePSlx1p4XJGRVFJDNvGCM1z3iS1D28n0rqRjis3V7XzoSAOopS2Oii7SR8bfFjT2ivZGIxkmvIpflkIxxnvX0x8ZPDjyGVwuevavm7UoTFcMrHBBr0aEuaB+1ZVVVShFoq+lVWHzZFWA5PTtSMgPNVsfSq0iBhxVW6k2Ie1X2TA44rN1IbEIGeO9aQd5Gdf3abZn+cXYAmpmG5fXHSs7fiTHT2q2rcZNdMlY8GnU5k0xy\/KTT5FymCOoqLd83+c09myvUVJspaWM+UctVKU4PPftV6WTByf\/wBVVLhcrnNdUD5+u73ZBG3tTmf25zmoGO1gaejdq6LdTyufpcJYwAKpSJknIq3KcL\/Kq+3d0OTVxOOtZuxCIyW5FW7cDKjH4VGAAwNSxMQVxn+dW9jKEeVmhEQ65wKoXsHVuvPXFWonBGO396kuyNv07HvUR0Z0VYqdMzA5UkcVWupeOevXHpUs7BTjPP8AerMuZx3PvXVFdT5yrUUIkU7gqTnnpWRcTEMR6VZuLkDIz+tZM0m5jzXdTifKY2uuhqabqBgnUhsYNet+EfiPcaXGoEh2\/WvDYXIkB6V0ul3JIAzke5rSdKM9JbHm08RJbM9\/T41XSqoM7ce56VctfjnOuw+aP+BV4O82RjtUDTY5BPSub6nRf2RvFT7n0zbfHdx1cNzWza\/HRGbBkH8q+SxfOhyG9qmTWJo+kjfnWTy6g+g1i6iPsm2+NELtzNt64rUtfjBZuozP8tfFcXiS5j+7IR+lW4vF90pBEjcHPWud5VTexp9el1PtuD4q2zrgXCsavQ\/FC0dRi4Vv9018QR+MrpVz5jYx61oQ+O7zvK56fxVjLKYvY0WOifa8fxFtnAxMv51aT4gwHaPNXJOPWvi228eXiAbpjjPRSQcVsWvj26kGPMYt1LKx55rF5SWsZFn2BH47il58wH\/dNTL42jOMPnPQg18nQ+PLo\/8ALTrjK5PTNaEXjacMD5j5Ge\/XNc7yyS6m31qJ9UJ4wjfjeDk+tTJ4tQr98V8zw+N7kKFMr5A7HH4E96ux+Mp25Mjn3xjH1z0rH6hIv28GfRy+Lo84D8\/Wpo\/FSt0k\/M189w+LppTgM2zH3ie2a0bfxdI5xuK9CVbBxWLwckWqkWe8p4mB5En61KniIP8A8tPzrxSLxdLuzvYjOMen5e9aMHiSaXkk\/erJ4droVzI9fXXw3R6mj131fmvJI\/EDg4Zyc5G1T147dKvRa6xdVJyW5wv+eaz9g0VzJnqsetA45HNSjWlFebRa0QvL4J56k\/56Vai1v5wuS2Sec+g\/Ws\/ZsrQ9ETWUIznpUi6qvc7a4GHWGkAbIHfg1dh1R2GQRgd81m6bQaHbDUFbof8A69PW+3dGrjo9Q+YZYqxIHPf\/ADzVyK8Y4+Y7eg4qeUSOqS796kF1yP8AGuaS8YAc1ajvSe9FgN5br1NPFzz+lZMdxx059KnSVqmwrGotxjoakSc+tZ6MamSSpsKxfSWpVk96oo\/OKlVjQIurJ71IHqmrFSvNTIxoGWA5pwYGoFanbjVCJwxNO3ZqEEk08HtTSGSBvSlD0itt4NPzRYm47d7Uu72qGlBxWlhEobBxTg1M\/KgE0riuTZxShvWogacDii4XJaXdUdOyKLhcXNOzTaKZI\/FFMoGc0FXHfiKdk+1NHTikyfSgkk60UynDNABkUZ5oJpCaAHhqAajp9AD6ZT6ZQAUZxRSHrQAMffmms2aRuppDnNAC5+lGTmkpMkUAPz3pDSUpNACUZxRRQAu7\/OKTGKKMnFACHpSg8+9FAoAlQ574A5PtXyT+1F4z\/wCJNqwBIW5BgUr1x0VR9QtfTvi3WE0Lw9d3LNtO3y09dzcV8GftF6yt\/eGwjLMbPEy91Y9FA9xkfrX0+RYd1cSpW0R8FxhjlhsC6adnKy\/E8qtIpIFFuiEIiqhPGX4GT+ea22spJbYyeYpVSUADYKkDPP51SSMJcjYMlumeoGB\/9erSXAijYKzJKZWBBAIKlVxjn\/ezx3FfqTvex\/MtSTm7ofaWcAgnNxE08rIscbBtoQhsklcZbgYxkdc+1c5PdRrYXd+qBd4YAE9AcjP14\/nXT27GGEM3XcX69Oa43xFCU8MzRJn5djHPH3pB\/n8ac1yrQ3wf7yryye7S+XX9CpIfNsSASnnqWkIyecVjXShLmbaQwiCc44ztBPX3JH4GtmS4WygCkb2kBK47ADr+JrFvpsyzMFwWQEZOMnAH6YqT6bC35nbb\/gr9NDDvtzLE5+6WyTjqeazZpPkYHIzzWxORGIo25DA5rEkTZPICeV59655PdH3GGs0vv\/EZKuwA8+57ZqqMZOD15q27Da3IwcY9jVcpkj9K55rU9qlLSw5VJxjpmpY1B468VDFIRjp6VdQKPmGM4zXO5JI6VByEuF\/dK3QcfpUcLDCknjv\/AJ\/GrEkivHt++vP4VTzsO0HGD3q1JPYSi4qzPpn9kXx+vhv4n6NbSSoltdAx5J\/jyAw\/FGH\/AHzX6PyHa2D64r8aPBeqPo+v2d3GGaW0kM0QA\/5aAcfyzX6++D\/EcPi\/whomuW7BodRs4rlcc8soJH55r4HP6Hs68ai+0faZLV5qLpvdM2dx9Kcj4Pt7VBnBpwOf618tc+hLQbinA89KgV6lX60yR3vSg5oxSYPrTE0PBpd240zp9KUe9Ah+TS9e9NANSdOBQAY4pwFIOlKPWqEKPrinjrTF6inA0APGaSkwfal5NABS80LTqAAY707NNoyaAF3U0tzR1oxz0oAASafTMY5pQcUFi4+tJRk0HJoAKKKKACk7c0tFACdKU9aTpSNQAZGaQn2oooAKKZS7qAHE+tGQfSm7qSgBx\/3cUnT60lLjuPypMAyfUU6iipAZtpr9KUrikbpQAmTTTSnmnUwIaTdTz0qOpsUO79aRqbkUhagALBelNL+n600nJzRyTSAN2etNI3e1OopWGREHFMIAqZ+lRtj2pARnPSmEGnMMUhFICNhUZUmpmBphGe9JARlTt600rxjpUuPWmkZX3qrgQsMIKYTjqKlfrTSM0Be5GRmmlakK560hU49aQERUdaQrjtUu3NJt+lMCHb7UhHtUhGKaQfrTKGkACmHFTYppWmBFRUhB6UbKVhWI+lFSbKZgimJiEetJjmn0nFKw7DCuaTb7Gn7RnP60UrCGUjCpCKaRigCIjvQegp7CmfxGgBP1puPbFSYz+NNx607gN200j2qQrSEDvTAiIFNIqUj6U0igCFgcfWo2X2qcrTSMUAQEZpjLnn0qwyZqN129KFoBCVwfWmMo+n41MR2NREDP9apajRD\/ABCmOPxqVh2601xzVMZER3xTdgp5GKQikSRsuKjf2qYjK\/Som60AV2z+FMOKlYHvxmo2XFAHqIH4CnAYFMR81IMEEVkxsUHsaAc0wjngUIfmoHYmxn5u9Gz5twpq7u9Sg5qhjFyM08ZP40qL37mpB0qWrhcT1p\/eo6cG\/wA4pFJkg\/OpVwBUCkHp2p2aZRPx3pksQkjCmlVs96eGxii10WnY898ceF11S2kAHJzg18qfEj4d3VhdSSQxHr6cGvuWe3SdSprjvEfgmDU0YPErA+1OE3Teh9Ll2azwj5XsfnxPBLZuVkRl9jTDOB1zX1Z4n+BkF0XaOEKT2xXk\/iH4FXtqC8MbDrjb\/hXcqtOfWx+h4XPKUo6s8qMu4c1l6pINnUGuq1LwHrGnOQYWOO2K5fU9MvoUYPbPgZ7V0wh72h6NbHU6tJq5h52yVZ83jPtVCRjCcOCv1FN+3RkD5s\/jXbKDZ8\/DEQhe7X3lxpeTzzS+bxiqaXWe\/WnrPhDg0uRmyxCfUZM\/P40Kd4wTUEkgB4pUlGOa3toea6t5NMguU+ZTSRAjGePwp8k6s3XH0qNZlH1rRXtY4JW5rk0ibhjnpUKxlW5NSfaVGfmIqu92gk5Iz7U1czqOG7Y6T5OB\/KohNjpxVWe9RR1qhLqYQnB710Rptnk1sXCDvc3kuQoyD81V7vUQBgnr3Fc9LrPvmqE2q7yTnOelawou92eXXzenGPLFmvc6gAeCDWTc32cDPFUZLt2boaruWJya74UrbnyeJzKU9iWW43Cot245oCse2akjtJHPCMfwrpUeU8SVSU9xsZzya17CTy1z1qO10adiPkP5VrW3h65cACNvyobtuERFuNw680ofIrYtPB17Of8AVMPX2rfsvhrfTsFaFuR6Vm5xjuzdQk9kcSsRfoDUyafI54Br1vSvgxqMrqWgbb2LLXY6T8DLhwPMjI6ZBXt6VyyxtGHU3jh6kuh8+R6NMf4Dn0xVyLwxdSEDYc9+K+ptO+BygDfGCec8Hk10Fl8F7eMHMQ\/KuOWaU47HQsDJ7nyRB4LvJvuwuxPXAzWlB4AvH4VCGPTg19fWvwmtYwN0Ct35HStGH4YWkfItxnnHHrXLLNorY1WAR8g2nw7u2\/gbjk8dq17b4f3KFD5fXmvrSD4d2yjiFV+g6VZi8AQR5IiH1xWDzW5awcUfLFv4BucBdoY+i9fpxVtfA1yBnD7e3HJPqPrX1AngKENu8gFj7VZj8FxL\/AT7YrCWZs1WGgfNNv4OuUOQjIxA7e9XoPBl1uVhHgDHLDqB2zX0WvguFZN3lDPc471LH4NiHIX\/AMdxWbx8mX9XijwS18G3CJ9zL55z\/Q4+taEfhGVFUHdyOOenHtXt48JxKP8AVjnjkdvrUg8MIcHZ0rF4uTNPZxWx4wnh6dFwQVQfxIcnHpzV1PD0iECNNh\/IV66PCyFvlUDn+EUo8NAfwVi8Q2UoI8ui0OVlxyQRkc8\/jVyPQpNnCvjjOeM+3416SnhtRkhT+dTDw8oJOwDNZ+3bHZI89t9JkU7SCMKMrk9PT9Kvx6Y24Dlh0FdsNGCfwfpUi6UEGAvTpUe1bHZHGRafIuNy849OatR2rBd4UmTORk85H8q6gaXgcLinf2Yc5CYNRzsLIwYLRhyFIPuf8+tXkiKngn2rRTTW\/unFSppzelTcpOxnqrelWEyatf2cw\/8A1VKlgwPFTdMVxsJz0q\/GRtGKZFa4PSrSQbakSFTjkdKlQnnFIkJHbNTLCDS3GOjbIqdO1NSP0qdI8UMlsEU1MtNCnNPVT3qCBwPanA0gU+lOA71SKuOU84p4y3ekVSKeFzVWGAqYdKRU204DFUSIelNp3NCg5poQ6lXpQFpQM0iRVpw9qSlHWgQZIp\/XkU3bTgKBgvWlHSloqhBRS4+lCrmgBKXJ9aT8KdigAGaKUCkoAKdg+1A60tACfWlHBopO1AElMpRnpRjigBpHpTakxxmkoAY2aQ08jNNIz9aAG0h\/OnY4zQRigBnIoB9\/anUnANAC0lIKTce1K4Ds0ZFNpdtFwFzSig+tJJKkELyyHaiKWY+wpjPJvj14mXTLG3txKAYyZXXPBJGFB\/HH518NeLZzqfi2UyzM65QSsOQpVACB68817d8ffHY1TXNRmS6BtoQ0JTpggE4\/MgfhXzfYO0yTXUp3MjgEMepJ6Y\/DFfqmQ4V0aCm92fzrxhmKxmLlCD0joa8U0dxczyKNggKyIrEgyDIXHHoCT\/jUtyo8+2l8ryxLJJKNzbiVyQFP049PpR4eVEuZUePezxbACC5QhSwOB9APxNXdX0xtLuCZEljcwx3DvJHgYk478bcjAPevo5SSlyvdn5rKFlzLbb+v6ZUvJytuqDrIcKT6Vy2rztfJNDuJiBjTlugXOP8ACtfVrmOS6sISZN67nbLZAUH5cDHHvz+VZGqmKO0GxT5hcZ542\/Trmt5a2N8LDkce7\/zMye28+Ukv8mcHJ6LxWbeLvdH9QRn\/AGelbTOkrPEEO3g8dCcf\/XrJuV2wuDy2MZFZNatnv0JNOxy+pSFLgkZ9vSqchDsrf3jx9MVJcZmkbAODgAUhG0KMgYbnPOPWuePvH6DGKpxjHqVJhhu+PQ1DLyDt6e9TyglVI6YqtIu5s84rnmepR1EzyCR0q15gyDknjjGBVU+uKUt2zyBXDJXZ6cXZFhpwvBGefxqJyCxAPvUHmEnH9ackoByaqCtoKV2aul3f2W+WXPTn6n3r9Kv2KvFr698HLfSp5fMu9HleFg3URsxdB+RFfmKku1geq19gfsEeOPsXiqbR5p2VZUeMox+VkflW+odQPo1eNn1L2mDc\/wCV3PUyifJiHF9Ufe3PFKp2nNIykN0pNwr81vofakyvhsVIrcCq6kelSJTAnDYOKcOTmoQS1TLVAL2pV+XqaaeuKAcGmSyUHFOqNT2FPDds80CDPrT80zv0p\/Y00MXOKkHWoqcCfWmIfk+1A6U3NP60AKtL9aRaUmgBaKATRx1oAKKKKACm+1OooGFFAGadQIT8KQ9aDjtQetACdaWk6\/jS0ANPtSUu6koAAM0mBS0UAGPSkOaD0oIoAbRRRQWFFFIT2FAAWyMYxSE560U3BOaBDsgdqZt\/2qKKVhj6KSm9KQA\/Tmo2p\/PrTDz\/ABUhjGqM08mkbpSKG0UEY60UhDX6UdBzSk+xxUZOPrUjFJpjE9qGam5JpAJ+VIelOz60hxVWAZx3ph68VIWzUZGaQrjepope\/FDdaRIxh81M2e9S03BoAZs9aaRj0NSduaY2M0DRERiilYUHrQUMPPSmlPxqSk2GtEgG7cnrSFeeBTiPfmjvzmkUMIBNJsp9BAoAjZcUu3Ip\/HtScehoAj2+1LtwOKkwKQ4oAjplTUz8BQBHz3ppB\/KpSBTOKQrDCMUm32NPNJj5cY4pWEN2\/LTSMYzTwpB5pCMY74pANP5VG3SpmXvURFUAygjingHNBXimBERTTmpCAOtMIzQAw9e1RSdqkYYpGGetAEBGeajK89alI7U0j3\/KmnYCBl70xx+lTFTmkwD2rQorMPSmGpnGeahIqWJiM22oyoNSfN0puw+lAiEqPWmEA4FSt8vSoieuetNAel4NKGK0ZOPaheetZlDgc8GnqOaaBjrTwc1JI\/GOaPam5zSjBNO47iiT86kV91AAJFO496YwB+tP2j0oxxQRntmiwDAR3qYCo6XPPFJIdx+ccUbzUeW6Z4p+8+goK5iTzCegpSM9ajz3FKTtFKyY7jZbKKUfMo\/Ks668O2844QHj0rS8zPel8z1xSsjRVHHZnGan8O7O8QhrdGT\/AHRXI6x8E9MvFbdZoM9wK9j3Gml+ecVSbjszphjK0NmfMOv\/ALMOl3u8rEYyx52ivP8AVv2R4TI5imZQeg219uvFHJ94A1XfTbdhyg5rohia8PhkbLH1H8R8Kt+yXKmNs+7noQTVSb9lO\/Cnbc4x9a+8W0W2PWMUxtAtT\/yzH5Vp9crdzRZg10Pz8uP2WdYAwkucc43VlX37MfieAYj2t7b6\/RT\/AIR22\/uD8qil8L20gPyr+VaLHVk+gPH3PzPn\/Z58XxE\/6KeDjdkVCP2ffFy8\/ZWz7EV+lUvgy2JJCjn2qL\/hCbYfwL+VdH9pVf5Uc\/1iN73f3n5vf8M9+LGHMBzUTfs6+Km\/5d2b8DzX6Tf8IXajjYKX\/hDLUdVFH9p1F0RnOtCSPzPm\/Zy8U43fZn\/AA1Qk\/Zv8UMc\/ZZMfTpX6gN4KtSfuDNM\/4Qe1b\/ln0rZZrWjtFHDUp0p7n5h\/8M1eJScfZXz\/ALpqSL9mfxE7AG1b\/PrX6bf8IPa\/88x+VIfBNv8A3BT\/ALZq9kcrwlBn5u2n7LusSFfMtnUH2rctv2VL0pkwBT7DNfoSPBtug\/1YqRfCluP+WYx9KTzfEMPqlA+DbH9lWdmy0Kp2GDnP+FdDp\/7LUcb\/ALxA3PZa+2I\/DMC8CFfyqVfDkK9Il\/KsHmeJfUFh6K6HyFY\/szWiEBk+UHPA\/wAa6PTv2etMgCq9vux7c19PR6BEv\/LMD8KnGhIOij8qwljcRLeRqoU47I+fbD4I6Zb7T9kGR3bmuksvhja24G23VeP7texLosfoKkGkonYflXPKrUluy00jzKDwNEn\/ACxX8q0IfCEakYQD6CvQBpqAdKkSxUHpWXvPcOY4dPDCL\/DVhPDyjHy12gsVxyBThZD+6KeonI43+wI158o0HRAONvt0rtPsg9B+VJ9iX0H5UrMVzjxoqg42fpUq6L1+Suq+xL6U77KB0FOzDmOT\/sj\/AGRThpIH8OK6r7KB\/wDqpPsw\/wAik0wuct\/ZI\/uCl\/ssYxg105tVz0pv2Rfep5BXZzJ0v0X9KQ6Zj+HpXTC1HpQbQY+7T5WO5zH2EjgCmmxHTFdK1mKYbPHagLnO\/YB\/doNiCeVrofsftSfYweuKVh3OdNj\/ALP6UGw46V0P2AegpGsfaizFc58WHqKUWHsa3\/sY\/uik+yj0pahcwhZD0o+xgdq3vsn+x+tJ9kGfu1VkFzC+x+1PWzHpW4LPPanCyFKwXMZbMipFsSO1bItlHahbcetFmK5lJZ47VILfHatIQClEAU9KOUVyituB\/DT\/ACSO1XVhHpT\/ACznpVNXC5Q8r2p6QVcEftThGAM0coFdYOad5a8cVYWMUu32\/SmkBX2Z6DNLtI6CpwntTvKp2Ar7D6UgQg1ZEfNAjoFcgCe1PCfjUmylAosSMCe1G2pKXbmiwDNvpS49zUm32o2+1MYwClA4p+2jB9qBDdooxTttKEzQA3b7UoGKlCYGc0vl+9OwEQWl2\/SpdtG2nYCIjFJUjCkC57UgGAe1Lt+lP2e1G2kAwijHNOI9aKAEwR0pPu0ozS4NABgkYppFSAUpXPvQBCR7UYyM1JtpuzPagCKg\/TNSMmKjK0ANpOtP2n8qTb70AR7KXBp+2jGMUWAZtpelLRQAuOK4T4weM4\/CfhmZsFpGRnKj0HQfi2K7iSRYkZ3YLGoLMT0AFfI37Q3jlNVuXLzPHAZVKIDjMa5OPxAr08vw\/wBarxh0PDzrHLAYOVS9m9D598e6yL8x2wKmRhvuccneTuYH6k\/liuetIQbaOVHNwhX7ZOq8HaMBcfiefpVa61WK4W4muQJ5nLSSHd3JyefzrpNE0Sxv9OvIZI7gCyik1G8kV0QPbxiM4RiOuHb5QT\/Dx1r9jvGhBdEfzFP2mIm3Ldsv+CNMkL3cbwRm8l\/0eIXMnlxxu6\/eY5BxhTjJC8Ek06Vrvwbr8lxePE2s2tx9qSWPUY2YzAAwuChYsFb5sDGQCMrk10vgbwY9tr17oWr3s2ky30UKX1wbqKF9PcSsGVnbK4wwGCycPntVX4gfDqXwRHcXEMcmtwXEEMI1rOzMs0rj\/VHLKJI43CiTa3yuecDPJ9apyrOm5br8\/M6ngK6o+2UX7r1fZrut9LLXZbM881O9j1DxFqFwkkb5fOLeLyo0ZgHZFT+FVJIAHpxxWXqhZyyPC0II4Hbb2P8AKtm206HSrfVNZvIVNm12lrChch55tmWQY52qnLHHHygHLVnXEG6G6cy+ZExXy2YkFlJB4B7Dp+FehfSx5iXJJO2llYggt0gM0LhRLGg+XrjPyjn8BXO6u4tLRwrgFkCn1J5rdsbz7XHLMW8qS5GEA6ttYHPtycfhXM60DFC8ZbLSsDnvjr\/WiWkD1cDByxCUu6\/4P6mAIAseMbsD171FMDJIY8Hnnir20fMQwwOoPfjpVMpli5J5OAo69OK50uVXPulPmldlOYbRxyOtVTyR2xVmTbkgjBIyR6e1VxzlgQQeOCDzXNM9mjoiJjgAAZPWkUAtnP1pWTOSenf3poBU9jxkY\/lXFseondDeM+1Gec0gyWpfqKVy9x4OGzivRfgx4rm8M+KI72B2jmgXepQ5JXILDHcgDOPY150nyjnketXdOvZNOvI7iElJoiHjYeoOf8\/U0qkFWpyhLZ7jpzdOoprdH7O+GfEEPirw5p+rW7K0V1EJPl7N3H55rQ3fhXzp+x98T7fxNpN9oPmk7ES+s0Y8iJuHT6q4IP096+imB9K\/Jq1J0ajhLdH6DTmqsVKOzJF+apFqFPWpM8ZrA0JAcVMrVVz82c1IsnvTQFnbSEU1Wz0p3UZqhCgZ9afTB0p4x1oJHDHenAj1o6cCkoGPFFIDxS5xVCFXqKeM460wcmpQM9aAAGgmnY9qZQAmRS7h6UhHNNoGS5zxQBTQTTh9KBC0u2kozigAPWignNFABk03ijdTqAGj0p1FMoAU+1J0pd1DdaAAmkpD0oHSgBaZTsim0AFBOPrRTc4+lABnNITmlpB9KAFpMClooHcbtpKcTUZOaVx3Hbz6UnbpTaXrTsMa1NIzTj9KQ8cUAMopx6UxulQWI3WkPHNOAoPSixNyCmketOob7tZFDMY6U0nP0qT71Rt9KpCA0xuKc3SmNn60MkaTigdKaetKDzUgOx6U0in\/AHqawoAbSH8KD0ppOKACoz0p2e34U3bVJXKQlNwadSE4rQYwgCl+WkPWjovpQA1vu0Uj9aUnnmpY0HPtRS47UykMKdkU2gmgBSRikyKazZpKAFbqaSlHrTsAUANPXpUWBjOak+tJnrQAz+EU2nE0lJkhSEUtFSAzbntQE9afTSc0AJtFNdaeCaa\/agCFqQipCc00jNWBERmmlamIxTStAEBQCo3xnirDComXNAFZj6imspPSpnHcD5qjcfL049Kadh3ImX5fWonUVOT0FM+7welabjICnPSmkZ+lPb0zTGzg1JJA+AKrt16VPIagbqKAPSwCXyKlCnHWmIuDU2eMY5rIbEByKdgetKF9KWkIbtPWlGR1pQcUuRQA4NzUymoAD2p44NWgJGPNICT0poBNPUCgBwxjIo69KUAZpzsQvy1QNjSCOaQmjf2pwUmgYgJHajdk0u3jrSbD6daVh3DYc\/Wl2E0qnaKC2exo5UK48n5ecZph+ZuMUAk0qj1osFxApXvSbz0qTHFRsuDjFCVguKHzxS9R9aaFH4VIFxTsBGfWgse9SEZqNh3FKyEOHNNIx06igEjoDSsGNMBvP+TTlPangADFBz6U9SbibcCn470088UdODQIQmjd6GnUmB7UXYC4GeKTYOwFL60o+8tADNmOwpwTNOABH1p2wGnYBqAVJ2pR14ox\/nFMABHHFP4NR4NPHWgBdo9KNnsKfRQAgFOAoHWigBxIFJkUhNIG9aCBSc0D6UlKuc0FXHlARTdgz0pwalGCeaCRgTNIUB7CpOBTaB3G7BnFNK08daXGaBEXl+1KY+KmCcdKNuKBlcx0nlCrBFIFBoHcg8oYppi56ZFXNg7CmFfUUBcqeVzThHz0qxtz2p4jpWEVfK9qDCMVa8vGaaV9RTsBXWIUvle1WRH3xS7PSgRWEOKTyvarBSlCe1AEAi9qNhFWVSmtHQMriMU7y\/apwlLtHpQO5BsxSbasbM0CKgVyHy\/l60bKn2Y7UbPagREIvalCVKFx7U4CgZBtxSbe1TkU3y\/SgRFt9qXYfepdgpduDmgZDsPvTglTFD3FJjjFAEe0U3b9amIFGz3qrMRBtoC1Ltp232qQIgtKq+1SFAeaUDA71VmAEfnQcGl5pOc1dgDH1ox9aO9LilYBjrmgDin4pcUuUBuDTSKeRikIxRygMK596SpMUuTRyhcj2CnBaXilHPNFgEzgUp6UtMZeKbAOpp2BSYNLz7UgImzioiPWpSKAMVAEe0belBTjNSLg9qUqKAIMcUxupqV1weKjK+tADaMe1PC4IxzUeo38GladPe3DBIYULs39Pqaa1G9NTzv4veMBounf2dFJtmkXdMQcbU6AfiR+Qr4X+L\/iObVdXVQqiFHwXJ+VV46+544r2L4o+NpNf1XVLuST\/VMf3O7gtj5VPsqg\/wCTXzbd23\/CS6ndQo7iWKGW52DONiDc7Z9lGfSv0nIsEqMfay3PwnivNfrlZUofCv6uT+GotFOu2UWsM9tpdxMIp541yyqc\/MB7HH4V7v8As\/6Gvh4Xl5rNpCtlqDWvhyW2uWXzJYps3czxbhtcbFTJOFMbHJyoFfP88EN7q9vFa2+93hRbeBYnla4kRQShCc5kbI9getfb\/wAM\/hdNpvhPTdJ1zW4NNvNMid2sdPtyZQ4tLdnyTuLYgCo2F+UzuBnINehm9ZQgo33\/AEX9J\/8AAPG4cwcq9f2sdXHr0u9LO+m12vNHfeEfA2leL01tbqAa7LJHbtK16ySYuo42YSp8pCl9y5B4Iz6mvPv2j\/CcPhPwPYPaXf8AYk19fiO6muJXbzX8lzLMxUFUjVFIBVckNjgA57\/4WaHPpkxv4Lm6e0k8qGdZnkKfKzOHB3Hds8ryyvpyBgkHxX9pvxU0Hxe8LaLqWotq2g+H0m1i9s4g00wg2xyRm5UlVLO+8bAAqoUzksRXy2EvLERindL9D9FzCEKeXS9pBRb06dZd1r1vp0R8v+I9Lt9KeO1lS9g1EXEThZYsJbWrQxyAkE7jK28MVIXaqp3YhcOSeBLiO4jkeSGaQMolUE7RuwcZ7BR3AzW5c2F0wthqkl1JdTGO5nMkryS3V1Oqs7ojYGMlVYgfwgAt25eSSJfNZEZ1jdo1BYfKgYgH3OPwr9GpK0Y9fNH4hUhHnairLYgtkeO0jlbmeEBMhxlmJ3E47jg9OMkVzurO0kqkEkxqQuT0OSefzrXN4Rp8sRgJ3qoznOOc5H5frWVfhpmkIU7iQfQfj9KupdrQ9vALlquc\/wCtv82ZwzkhcYGBn14qpJIANxAOPug960Zohv3NgIBnI5wemKzrjEk+1cFVPX1ArOfuo+hw0vaTKNwchcjLkAk9Kbc3Mt7KJJXDthF4UDhVCgYUAcKAOmT1OTk1NdcY45P8qq7doGPpXJJH0FJpq43hg3IBC7gD356D\/PaoOh9s1I20ABRyc7qYy7Wz2\/nXI0elAYOnrS49DRuBxxSGszdDgAvPSpUOeemKgUnA71IT3q4smSPdv2YfiNN4P8ZW0McpSVXNxbfLkyEL+8hPfDLkj3QV+nlhqNvrWnW+oWcizW1xGJI3U5BBr8XNE1abRNUtb6CQxTQSLIki\/wAJByD+n5Zr9LP2UviZb+IfD\/8AY5xCDm4tIS2dqt8zIPbnI9iK+Kz7DWlGuup9RlNZODpPc9+yQakDA1AwOcU9ARwDXyV7n0A9Sc1InQ01QOARtqRFB6iptYCSJeOalqNWAbFPyMVQDtw5pobByKAacASeKZNiVKdj3NNQYHvT\/wBaaATpS9KKCc0xDhUgPfNRCjJ9KAJS2aaSDTaKAHDpT9v1ptOzigBCKSnE02gA6UpJxSUUAG7mnDmm0v3aAHUU3+GkoAcTTD1paQ9aADrRg+tNpwJ+tAC0yn0UAJmkJoJprdTQAM2aSiigApBig9KB0oAWmt1pSaTpyaTGNbpTakFN20hDaKUjFJQAn8VIT3pd1IT2qihhHak208jB60hUjv8AnWdirjR0pfpR2pABVCGMmOaaUI7U9l2jIqPnd7UrDA9ajPSpCfmNNZdzVINkdIRmnEd6CAKBERWmc1PUZAxUgNzjNITmlI9KTbSAQjIphGafSdaAIqKecUzpWiKEamkdxTmpKoYwjPSmkZqWmkUgI9tJsqUimkYosAzZS0+iiwDCM00gmnMM5NG0VJQzbnijZT6TH0oAQCginYxSE+tADG69Kjp5560bRQBHg9KTaak28Yx+lIQMUEkZpN1PamHpxUgG6kJwMnrRQw3CkA+oaKDxVpAFIRilB9aM8ZoAj6Gg47U480ygBGHbFRlTk1NjNNIzQBVZOmBTCPQVbZR6VE6DrigCqy5qJ+Pxqy4x05qN09qadgRTY8YphGfpVhohUe3b2qrDZWkQdagZMVdIzTHTdQI9FOBUfmc8U9xQqZ7ViSOBxUgYNTAMdqetAXAp3pFUinbyBT4wGphcE6UZ9qkKBRnFMwKoocPmHWn7RTAwXinqSTimgHYwKbg+tSlT60KCOppk3Idm0045Hapu1BosFyMNup5AFR0\/dnoKY2LgGoyMHipaTqOKAuMUY6jpTwM0BeKF4p2C4u00jLmn7uKRutDC40ACgDFHfGKUHbSC4H6U3APXmn5WmnBPFOwrigZpSpFNAxS07CADNLj6YoxxTWJzQA7HvSFeKEz0qwB0z0oAgC89KUJntUrcf\/XqPJoATyhQVApwPvTW56UAKOKf0qPBxT0BxQAuaXPNGP8AOKWgBBmpFxSdvSk3UASUm6k30g5HNAC55zSr1FNx+VLigkUZpQCaACKGNAhQKXApqDJzUhAxQA3IpC5HFL0NIQCaAF3U4c00DFO2mgBwjB70FMUKStKzZHSgABHShj70wHtUgANAEOSakUcc0vFKBQAUbARSEZpynHvQAhSgfSlJ9aO\/FADgc0hGaAMUtACbaNtKDS4yeKYCbc0uFoK459aTNABRS\/jQq7jQAhXNL5Z9Key7aAdtADApXtUgGKKKoBNtRmpT0ptIBoFSAYpAN1LQgEI20nl+1SAcUvCj2osBH5XvSlNvIoyKMiqsAOGPWo8D3qbdScen60rARgZoIzTtoo21YDCKdSGlXrQAu2kxTqCM0AM60YFKRRQAmBTgOKXj2pGoAb0o60EnNHrQAtFOHSgjNADcZ6UYp2QKQtxQA09KOlLTeo9aAHUh6UDjNBGaQC0mBR0zSZo2AMUjHBpGf3qMvRoBIBijIpvJ6UgUjmpAUjdTSMU8kAVG+M9aAGjr0rwj49\/EhIll0u1mGy1y0mG4kkA+7\/nvXpnxH8Xf8InoMjwsov5\/3duD2J\/ix7f4V8VeM\/E8dzfzBpftMcCs8ztyGkJwB75IJ+gNe7lOC+sVOeS0R8dxJmiwNB0ou0n+BxPjLxIsdm0BucXDu7TpF13cFgT2\/hH51ythPMt5cXD2DR2UkMhVzE0f2hUwWQNnI3HbuwehHqKgme5ngv7twpCIFaKRcFieQR9TyfY+9dt44laOz8NCG4WW60uBkuYros3naiAtxOypjO4ySRwBf4jEvbmv1BJUkopd\/wAFf8dj8Dqfv1Ocpa6Jeb8vx\/Lct+EfB9poWqaVNrcUOqaOYbi41WKzmlt2iZbR5VtzcR5KI26NmI5AjYkrivvjRPBGiQXvhu+u0SbVYYZo4jbStLGLeWOESb85ZgixRorsc465JIHzl+y74e\/4SrS7+0vbCW406Zl0\/UNxDtcXU1wJppzxjyxDGik9AG2nPOfrWytL06YZZJYbYvbRQvfyRr5rBpC78gfdCHjIGTzXxGa13Urct9v6\/wCAfrfDGDVPCuo0mp2a06rpd9rJrom20kUr7UV\/slYp5bmC512ZIoriBA5RjFliqvwuI05AUE7jhSc18zfGjQbrwdD45vFS5F5r13p2i3VzcXsctzeWflsvkwheYhNdyxQyYwMRyYPykj691KWa\/UNaW7NbIyskkUxjf+9uHyk9ABgZJDEcAGvAfiF4Wsk0+58VatryWGgeH7iKXUotORIklm0+5kubWGKSVdzu003ll1bG8MqruO5fOw83ComvL8D6LH0Pa0nFPo9fk1+r2Pjvx7LqMnifxEl1LFqlrbl7a9urJowbaKK+2OPLGPL\/ANIeMADbuAGOGJrhPKtJ5La008+W5gxcTTxqnl4Z3ZmILZVYwpJXH3SAD39q8X+F7fwubnUJ7VodS05bKeGe0tsKs8DSvJHP53LyzSF7n94M48snCBA3hHh1re+fUZ1iaa0n8y3tZZcRneyny3IBxkKS5XO3JAJwef0TBVVVgrf1pa36\/wDA1PxDH4b2M5Sle3m77t2\/Dpa\/z0K8s7yosAKpBFGS+IwrHGTnjqcDvz0Hasu6CRg53sM\/ezzj1rRU3lxZXlxb2jTQtjzWKMwTIYjJ6KdqN17BvwqXEyTW9rbxKf8AWSblPBwOhz34zzXqaJa9DkpqUWv66XM2MRJEzTBxvzthU4zxwT9OtYrRBFD4MefzrV1C9md5IVneOCYgOkRKh9p6MB1IPrmq11Btjizj95nb\/ug4J\/MY5rks5t+R9Rh37KKb+1+RkTAMxDYwAM\/Wq7FTuYe5\/D0q7cja2AoJIqm6jYAemMdKxkuh9BRldFcqDjH41E5LHBOKsNgqQOvY+9VWGCQa5Kmh61LUNmORSHj8KUtnpzj9Kaw9jmudnUtdxRwAaepyOe1RFj0pQccc0J2G46EjfKeM17d+zh8Rrzw14msLI3Gw7w9k7nBDKc+WT6EZAH+0a8PPY1a069NjdRzq7ROjqySjrGwIIb8KyxFFYik4S6m1Co6NRSR+0nh3XrXxTo1tqlocwzrnHdT3BrSVcEV8rfspfGW1vWg0i5ucrqLEn5srDcjggf7LYyK+q2Tnmvy2tSlQm4S3R91TmqkVJbBnA4qSPk1GVK85zT42C9RXN1NBzErx2pwAzTT9c1Inf8aAFCgCnoacigikIwaokl68inVEDipCSDTQC0Un0qRV9aoQ1VzRt\/zmnFRigcCkAgyKKdkelI3NADutFR7v84pQT+VADs0DpRg+1KOKAHZ\/zmlpu\/0o3e1VcBKOlJkUAZqRhkUtMpeg60CFwKbTt1NJx9aAH0hGKZn6UpagBc4ppbNBJNB68UAGSaSlBIpOtAACO9FIaTdQAppF60uRR+FIYjdaSjNKaQhKN3FJkU0kUAKSKaTg0tNoAKKN9MJpopCt1prdKN1ITmmMdjFI3KmlFFSBGV5pKdJ1FNqWA3GCabt+tPbpTS1IBCKaRmn71ppx2oAYeBTKey9qbjnFSwG4A60hAqTbTD9aAGN1pcCjvwKTPtSAaw4zUP41OeaTGO1UnYZEBRTmGAKNh9KtDGbaQ4pzmmMaBhmgDNJ\/nrSjnimA0jPSinEUhoAbsNJjn3pwx+NI\/WkAzZS0+mbD60rAFJjj3p38qO1IobjjkUn4CnU2gAdc1Gw9etTcGmOOc0AQ\/wCelIR+NPwM0bR70EDMGkIzUm2mlaVhjCMU3Znp+tPIzSEYpARkZppzUjAk+tM21QEZ96U9ak2cdMU1lA6UAMoyaRqQmgBWNMIB4p2eMUmBQBC69eKYUPcVYwPWmlQaAKjoMVA65NXZR3qrIMN0qkJldhzjNMZetSM27pTCMGmB6CVOelLF15qUqcULwcmsiR2BS7QT0pCwqVVUpmmBGQPSpIwFIqJjyacuSKAJS+eM0hQdc0CFm5zSiNgOaYDRGTUkalG709D8op+RjpVWGGeKaTtpc5zUb7j\/ALIoEPVtwpe1IgwooHHFMBvG\/HenjpSbP9mgDAoAXOaQ9KA24UbqaAAcCkJzSjFOII60XAaCfWlAApSMU1cbqNwHFaAMmlZhjpTcmiwDih9aZto3E8U9kOOKNgGDFG4g9KVVIHNJnnFMBwOe1BbaaCwFNJBoAcpyeKl6VAhxUu4460ADU3cO9L1HWk256UAGCTwKdgmhV20pPpQAhGKcpOPxpufUdqXjPANK4EiEelBPPSogxWl5JouK4pI+tAI+lOCgjml2j0phcBzSgY+lGMUtAgAyaeDgc0yjn3oESFgKjYk9KQ5zSjmgBFY55zUoakwtAGe9ADgM0UYJ6UhBzQA4HFO3g8U0DNLsxQAo55FIQTSZ208OO9ACKp706nZGMimnJPFADsZ7UHApq5FKOaAE60AYpwGKRutACc\/WlWgn0pu4g0ASCpOKjzmnjk1SAYcA0oPNLs\/KkGcYxSACeaTGaU9aB05oATFOQ7etLTR1p7APZ9wxijbS8daj3HGKAH7qVsmo80qtt+lFwHrjv196Rgvande9Jj3oAKVWxwaRgRQuTTAVnA6VGTzxQxxxTwQKW4EeTT1oBFJWgEgAxTScUgJx3obrQAgOKXdSUnSgBxGaAKQk0ZzQA7PrQPemk5pw6UAI2KbSnrQDigBRnFIeTSluKQ89KACikPvQOpoAcDikLGiigBueaWjNA96QC0n8qWk96GAE4GKTdTQ3vQfalcB340HmkU8U7pQBEUI9qYy1PjIqMjtSsA1H705pBk0bBtpCOMUAMB3Uy6njtLaSeVtkUalmY9gKkHBNeUfH7xi+jeGpbGCQxvNGZJXU8hR0X8T\/ACrWlTdWapx3Zz4mvHDUZVpbI8L+OHxJvPFFxdtpzHaSIYTniFAcb2PavnbWdSR9JuCZSgZtkS\/xFlXGf++cn\/gVdD4h8QxSW95PJM8duw8lMsQCe\/A6jp+NcbFJYCaeSWA3RjtmxFK20NvVlyuf4xw3PoK\/Xsvwaw1NRij+bs2x88fXdSb3Oh8GW82pwrfRmOS3so1nmt4WMkssgcR28KBvvPNOYlAUHAxxgGul8FeBBaeJ7S\/aPUr6603W9Pys3yyXV0mZ7y3gi4zgoxLMRhYwc\/Nin\/Dzw7qHgbwp4g8ZXd\/FBp32V9MtZbdllum1GZQE2KBtJRZGYsGyu3AwTkdz8J9Nk8aeI7LNydTk0BdQv7e+uJFdbjiHzlMQVSzI0kK+axC5hwNyrzyYzEOPO76L87f8G3p6Hbl+AhUlTjyvnlZr5uyfddXqtbeaR9A\/s4eHp\/DFlf6TJJM+rQwWguHdPMjM1zD5u9ivBVWwmARgQpnG859R0y8fxVdzi6tBb22jaw9pAskpBujHCAsjKR0JZiByMAHmo\/B\/h\/yLj+29OuZmXUJ4p7jc6lZEitvIWNePlGURiRycHnk11kEb22pFGZ3gdN21tvlxFSQecbizBu\/GEHTBz8JObqTc5bs\/Z8JQWHoQpQ2V7enT9CrothLYQrAWcu4jla2eXzI7bcADHG2AdgIJBb3PtXyH8ZNb+3WWp3Ftc2Ol6Zqd5Z+LIZtUha4d5lkeNGtY87WYR2isibQu4uzbt6k\/QLme18W6ze3Fm9to2oQlb6O4PmTPCmYkuJHPyxxFWnbaCdqxoSAZCq\/I3xM8Y3HimPUtR060vBb3uo6VEok0+WKSOCJbiS3kQkgtI0B8xY8JHGEkYqOHPbgqanU1eiPJzmv7LD26u+39fl+R598ddZvdO0S3spZLy6vr+VNTvrq8jCNNfXkLXBDJuYqYIHEe0nllyQMDHmNzapH4XtdLby0ljvmmUqGLpujjVt38O35FwAMk7s8KBWz8S9cPjTxv5n2x7pliee6kSYyxtds0hcxE4OwRJAgB5GGOOeY\/F8baX4s1e2WBHUXkqfZ7R\/s4gbLBYtrgkbCAD14H3snNfoWCiqVNKf8AX9X\/AKWh+O4+t7SfPSem717\/AA736LXz9TG0+9eYBnYCCF0MjMuVCkleFJAbPIwfU54JrMi1K90+xv3iea0nu7Vrad4XMeY3GGjJH8JwNw7hcdCasC7L2t1BJIluZwqyKQCzKpV8cdPuLnn+tYV9J50jAyA4YqQQcjgc+ncj8DXbJaHNhoJztsUC4lkDuAC2BgegHb8KrzzPGDJNtG7Awo5C9gPXtU9vEWZWb5dvQEDj6\/WorstMuw7iFOfmHIGeB+H+FZpNI+oVudLojN3MXL4wM8jv0qOdSXOB0xjPYGrduqSzYABwSBu6HHrnim3SKHP8QA24znP51i46XPXpzXPypGfKojwcfM3vVfbk88CpSDJ1zkD8qaRuGQenX6VyS1PZhoRlSF3McHOBUbuFJAFSeUG79OM0wqARgda55HVBojYkc80ZJXNOMgpnm9s1jodJIvenqxXtkHgimK4zwKdWibRkz1f4Ja5f22tLBp80SXlsrahGjkh7hYwGaNP9vAJGfev07+EvxFs\/iV4LsNWtZNzsgWXPUHHWvx70fVJtG1S01CCRo5rWVZUZeowa+xv2WfjQdA8WXNpPtj02+mV3ij4VRJ1kUdOCUyPfPrXy2dYNyXt4o+gy3EJWpSPvEZboKOc05WVlDKdysAQR3FIxA5r4c+jFAHpUoOKgyd1SJkn2oQEgY9qeT6mmAeuKUc1QiRalAqHkdKkGc0EkqL3p4OOtRU5WzWiGFIc96cxpM0hDehpc++KQE0vvikAcUtKwz3pvSmAtBOPrQG9aARSAbnNOB9KMUg+tABzTwfSkGDSbqABjzTaUnmkzigYqtigmmg0tAgopfxpvegYveikzQTQAbqCfemkHrmm8g0riHt1pKQOPWlzikMKO3NNyaQttoEKetJu+tIWApMj\/ACaAFz3pCc0m4UbsdKAHgU1uaaWNKc0DEbrQx4x0NLmm5JoGhc54pKAe9NZs9KQx1IDmk3D0pN3uPzpjFdttRk4oJz3pvHqKkAJ+XimEZp+7OKQg5pCGAd6XP+1QTim7uaAHYFMJxTs+9NLD1oARvmFR04sTSde1SAylXrS4FJj3pAJRRTS+KAHY71Gy4p4cYpCQTVXHchwaXbjrU23NNK+1PmC4wID3o2+1P2juKazY4HWldhcjPSg0tMOfwrQofTQKUCjmgBpGelPpAKWgCPYaQjPHenE46UmcmkAzZQy1KKa2PaiwDAPWgj0pScUVJQ3GO1BFPxzxTSPSgCMn25opSOBSUEjMZoK0+mklqBDKQinEZ5FJUjGMM96jINTEZpjY\/H2pAQlaYRipzzTCp6CrAiyRQSacU9aawxQAnPWkpcj0pHODQAyQ7aqyqanMnqKaBupp2EVPL+bNRsMdDVxl6EGq7j1qk7hseh7wBgfjTSwIpoBanAqoweTWRIqgN2qRExTUwRUiKS2BVIBqxDvT\/L29Key46imO\/wA3HNADxnOM07cegBqJQcU9pwCBimAhzTW3etSsOOOtN8tu5osAolCD5jTklV+hqOS2DnJzQkAToSc09QJM496PwpBGw5zTwx9KYAGpAKbhv7opVPJ3CgBxXH1pmOM0uRnvUgAxiqAYDg8Uu7inEDBpmM9KQBj1pdg28Gl4NC5DcUXAbjFOCZ6c0m0noacAVFFgFChaaSe1JuJOTTg49KYEe405QDyaViD0701SfSgB5C9xQIxnrQVJHHahY88k0AMKgHFKDzjNTbR3NN8sZOKAGqhxmpAhApyABfWkZscYqSCP+GnKR3p2QR0pAc0AKygjpzSIo60\/aDSFAaYAcZxSheaQDB5NOzg0DDGKTGadnNIDimAYOKDxRn0pSeKBDQeacDk0mOlPXA4oAXaMU0pinA80jZJoAXjFN6d+KXGQaNuTyaAHb8CjO6jZjmlBxQMaCc07dSUoJzQIeFBFAQCm5angg8UAKpA4oA5zRgY5NHHagBDk9KUAgUAjFKGxQApGaOBTSaQg0AOyDSlaaOtOzTAOgoHFDMKQOM0gJKQjH0pASaXB+taPXUBv1pwKj1ppFCqcVAC55oPWgHFBbJoATOaUCgcnFOPWhAIFBGc04oB3FJnFB607AIHIFPBzTaaCAPejYB5z3\/WmqxFIWxSdaHowHU7aMdKbuPoPyoLlqd0Ao4ozSce9LtBGc1VwAc0HIoHFLncMUwG+tO4o3U2kA\/ApG603JxSjHcUwEJxRuOKU4pKADGaWjNIaAEJz0pytgU0jselH9KQC9aTv7e1H+eaWgBM04NSZzRjFMBxximUuc9aRulJgNLUvXrS8Uox2qQGKme1BSn5296azZH4U+gADilz71GVJpy8daQAXx3phYmnEim7hkUAL8xp+Bjk0gbIpuCeM0AI2Nma+PP2mfEzXt1f7GKRwoeVbqFzgfpX17eEx2U8hx8qM36GvhL4vwNrOk3rRuRI4dz6ne2Mfka9vKYp4mMn0PjuJ6rjguRdWfP2s+Izd3FpDHFjyIwQCM8sN2cetZZZrm7MrykDkPk4AA5Nb914cjkN1LG+2O1VLdn7lgMt+OMCsEW8lqrSyW8kiFiAOMsMHPseK\/S5YhXlGLPxqng1NXa1eh9F6xpySN8JvAenWbXWtWejQ3F5G8JKae95cw3cjMuMmXywCfTeoyTmvYfhPoNhofgrxnc6JbmbxBOLiSGWYpHcuZIGbyA20BjyMgnPJK8Livm74J\/EG5s\/jNp2valqLRx3UksN4Sv8Ar1kTZtbGAgLFDvyNhAboK+vfC8l1o+s6FBfQ3cOj3enz2sWm2saSJJOLgFJ0kVv3boo3A9CHbn5MV8hmMpUpRo7pq\/q3qz7fJqUK8pYhqz+G29laKjrffu+r2PTNHvrXwb8P9MubyCcSJbRWb\/YoWZmYvgmJIx9wsxfcMDH0qRLGbSNN1C\/gs5rK7n\/e\/Y7aJUZrliskvlj5sK5zuDAndvweRi5YaTZ6nYRXeJ7IyNO6xea0YjDbhwobaw4DAg453DGQK4Pxt4w1rSrtZLC\/1TVZWuRCNOsLO1vmWPzCTKII18xl2qV3eaCA24oMAH5yDc9Ez9Bk1Ss5bWsja8bTSyaEtiL6CKN4otR1241Ayyr9jikiWeMIo2qZIkkBXIHDDHzZHxL8aPHnjDSfDsDeILEnVtUvpbiM3+oPLeuZYSjL9nUKsUPlfIRhWbzVXkBser\/FL9rfQPFOjXuh\/wBlatCBfG1mtZUa2ufISE+aXA5j3u+wKrb9iSDKFg1fJHjXxZq2ueObPW7iGS7vLq5S8EbSSPNc7G2YLKdwLlWAC7do4TaAK+vyvBVYSc6sbLpf+up+e55meHxE1Qw9S71vZ6fPTy6a69tCxpXhzUYIF1KzgN3FHIEiurTBjIDwRIwbIJYzTxp05JzkgEilqlsVuZvPEG6zkezkEU\/m7pVkIaZ2JI+Zm4OcHYcdzWr4h8VraJpujpcWOpafpZSf5LYPaGYQwKCgYAugKBMvkNs77jnjrjXVvYIGmjiSGJEBMIKGVkTahZd23O1QMjHBY4JNfY051G05\/wBbf5H5zUpQbbp3b01\/y\/4f89M6WRJ5Zp4IxFbkFUBG7Znv7\/X3qq87uclVHylfvDkHjj\/Papo7tfKCJv3cncDkZ6kfTr+lVZJRLPCu4DGI1zxyTn+v4Vvc7Kaae2wk1z9njK+SoyCCzcn+EjA\/A\/nVXz1DbiuAcflT7qWN22ITkAZwON2OeabFiQCRgEUbuR1zjj69qzbvLQ9iklGnzNbj7UhZd+C2MnH4Yyf51kXNy73Z2xbUzkKw\/wA8nNbF\/cJ9pl2kiMngDpjHf3rGWVfKkJwOMj61lV2ST2PRwmrdRx3t+JTUMpwCcdT6mkAO4kjjp0pxlKA9cnv7VFK+SBggV58nY+igm2I0nBAGAOKjwepbmnnOCc80xsd6wbOyAzjHT8abtwO1PIyTSMvqeaxsdCYisDUo9e1MxjnNCE5A9apEyVyTkGu5+Hvi3+ydSsEuEZ44WZGPUeUw649VPT2OK4dU5FdL4R0e4v7uUxxMwZCisB3NKrCM4WlsKnNxmnE\/WT4KeLW8XfDnSruYKLiOPyZdjZBx91h7EYI+tdyXx1r55\/Y7uzB4Y1LRmbetm0LxnvtZeR+BBx9a+iPJypzX5XXh7KrKKPvKUueCl3Ghge30qaPBIpVhHQ07YF5rmSNRQmeacAQMGkRj68U7cCeKoTHZFSAgVHsY9DS7WAoESA5pQjZ56VHkp1\/nTxJgdKpMB5GepoAHekDfjQPm70xC4A7U3PGKUjApufypAOZs45pOtJ0NHpQAo68044ApAM0hJ696AFzxig8803cPpSGUY60AL0oz7GmM+e9MLZpXGT0HFQh8HBpxbjrRcBxb3oDZqMyA00kjvSuBKze9M3fN70xnz3pM\/WgLE26mmQetRcUGQetA7EhftmkLFhUDyAd6XzxSCxLto8z3qEv7VE03bNFxlwSAimsyk5qssi07zQaVxExYDpSf56VC0u2o\/POaLjLWBR5gHeoFkLVGze9FwLRmFRmTcarh6d5gFK4Fnfx05pnmdqgacdqTfmi4FotzUZaod56Uu8dzRcCQyYoVyajMg+tHmH3pXAcWPSkJ9TUZfFNLk9KLgTLJjvSmQEVWDMTyadnvmlcCUnNNyab5gHFNZ80XAVmpu6mljmgZpASAilJGKi3Yo8ygBzOe1IGqJpRnpSCQ1VmOxK3PeoqTeT3pKqw7DqVO9N4Hel39sUrMGSA4oyahJNGTRyisBNGc96YWyafVlDS2D0pCcdKeMY5prEdulADlxSnFRFjjNKGPap1AU5x60nPqPypCc0DJqgB+tCdaU4\/GjcAKAF6Uw89aN3vTd9IBdvrSHA71JTDntSYC9DzzSH1FMwPSl4x0pFCY4FNI9KfnPek4WgVhoA6UHB7UdelIwoEITg0w1IRn60wjNAhu3PWkMftUgGKRqVgIxEM80jrt7U9uB0qJ85xTQxjHNROTipdtIVFAEAPPNBGRipSnfFMZSO1AEDJ6UisV7VKRzTOPvUARSfMvSq0oJOc1cb5e9V5fm6U07Ad5b2rAYJJxSmIA4HFSRygAgNSHIORzxUkAEKjNSLIBwDTQG8vkdaYo3E57UwJvMYHpkU1hsp0bDGB19+9LLyORgUwGxPj6VIEV+SaiUjqqmlDfNjbj1NAE2zup\/Kjds5JpwUMOopCm8Y460wEWXeOtOVPQ80CMAUZJ7c0AKeOBSAHPvQAe9KGAHIIpgLxwCOlKGCnOM05SmOTSOFP3SMUCuNY5ycYpF9TTs+hp2wleByKAG7R605UBFGzABIpADnrVDFaIE9cCmgBenNPDA9qMDOBQA0k9u9NLs3HWnEc4x70m4DgCgBDGetKFYH1p4cZ64NOCZNLcBOB1Heg9OBT9nynPNMwB1FDFcbuA\/rTxyOKQjIHFAXHakSKF3DJ4pGBPQZp3ze+KUggZplXGIGGRTgB3oDjGDwacFz2oEAK9xTQB+dP2gUmBTEJtOO9HbmjOf8aXYx75FAxPalCAc0bcY4penUUCEDYopwCmk2UALkjrSgDrSdOpo3Z4FADhyKTAHpSKe2KNpbkUAOJHUCl47ijYQtKQaAGnJPHFKEx3pVfAwwBpGYduKAClGKYXI4pQSRg0AOyvtTiRnjikEYbGeKVkA6GgAIJ6YoA46UhNPUnHWgBvPenAA0hb8KTbuGQaAH8djSUioVOTk04EfjQA0tg9KUNn2p+QKMr6CgBACe9Ky0gORxTS+D6UAKRSYBGaU88ihUoAcjYFK2cdaMYODRwBV9LAIM0ZJ60oIzTSwzUgP2gimk4pC+B0zQpDc0AHmD1NKDkUuAKUiq5QEwT0oKkdqUnijzDSaAb0605WGOaazEmkCnHWkA84pucUHNKmM80XuAg5PNLj0pxKUAbc0AMxRSkYNAOPwoAMEH0pcgUhzR9RV6gBcDtSBs8inde9KAPWizAQdKCM0vA6UlUAFcUYPrRQcmkAtGc0bTSA0wA8Gkx60\/PGTTT0pAKMUhwKQk0mfei4C55oz70cUYpCuA5oYZwBQeOlLnjNAXGeXnqafjFMZ+cClRixoFcU4HbOaDg+1B4yabndyDSARjg\/Wl3ClyO4pCV6AUAGwHpS+WCOabkjpSEMwoACoHANNOVOetKIznOadtoAztZnb+y7wdP3L\/8AoJr4o8U7munj6ksEAx1IavtjXBjSLxgOViY\/pXxnrrLJfl0cFxJIyk8ZIJNe3ljs5M+L4lipQpp7a\/ocZpNtBeeE0juYEkM0jXDNjl\/mIH8hXCa94etJdIjlt0kguJGKLsP3DjnI755Fd3o10ttFDbCPPlYbk8YDdBXE6VfvqOk2kkkB8ppA58p8kHzCGyCPTPT0r6ClTnFt9z8+nWTftV9lq3zv\/kcfDp99pE7mWPAiIIO4YbAzkHtwOfrXU3vxV1DX7HR7K7ubm+trCMJa20t35Ytgp2gxmNRtGNwJyckk1Xv7WKztbsRqSyrKwbJzxyTz+NZuj+HYbvTDejcZoztBBwdpOTn1OTXqzUJzTmr6fc32OOE\/9lqPq5K\/3ept6f8AE\/VYmvdPutSur3RryBbO5s57hzvQbWC7icqMkjHTDEYrDuDNciMpLJHhGdRBcyBUBwvyqDheABgYGAOMYFZEdi1xe30kcjOJImJBxzsAz\/6CK3v7Ia3tVufMkCqsarwPnUn1\/GrtClL3UOblOEeaT8vI5bXri8uGSSS8u7mWLbGXnneRsDgDc3OABxWPJq8Ueo3Mlv5ke2DClWG5iyrk7ucHBb\/GtrXbFm13WLWM\/J5QALDpjBBz+NctbWTLd4mDAp8jBcYznj\/CvSw81UXLJbPr+BhVowopT7x\/F2ZZv7oXeYo4grMqb+SS7gk7j6Z446cVFOnmPLujSFZWBSFASFB+v0pg2JGZAXBbc2T6bj0qrdyPmVI+TGAmRxnA6\/zrpc07f15k08O03FdLfmv8iKF8Rgc4JJJz3pBEwmUbQQ3zBiM4z2+lJLs2KUVlfo4JHLbsce2COvfPbFXHRpBJ8oyhXn\/gNVznT7HW5nyo1sils4IDEVXSUzbecdsfjVjVMrbDI6EKQfWssA5yCenFc06jjOy7XPcw9Hnpc73L93dHPy4AIBAHb0\/lWfJKxBHYntVyNRIoYgE8DB+lQ+VtncYJVOMjv71E6jlrc7KNONNWKXJAHajaQcgZartxbEpuACqRkd8flTFhO0YB6+lYWbOxTSKbKxbt9aRYyzZHHrk8Ctm0sDIZMjHHBxxnFLHYbThseo4rKempvTnzXSM1LJ25YhRnHTmla0jSVQTkEZJrX+xEjC7QWIAz0qK5sJIrkJ5WccHnjFY3OhvS5Qa0jOcAcf570JpfnnEeeMHgVstpTCAvJ8i7eMc5Iq7pZgtNxIy+3I38807PoS520M3T\/DM9xOm\/ckROdxGOnOK9I8MwW+lvbJG6uY0OUB65+vfiuPutRMksbBhwc\/LV\/StRKXoYkPjse9XJNwsZwdpo+2v2ONTe78ReIUeMqps4fnHKnDMAM+vWvqgtnOO9fKn7HM8SXWrYkRm+yRk+oBLcf1r6cXUEHQivzLHu2Kkrf1Y+8wf8CJpFSRkdaRo2bvzVEaogwMn8qlXVowM1w2udtmWQu3qKeoINUJNRDcggUq6gvrU3QjSExAxSeYWNU0v41PJzQbxCchqOYVi7sZh0pyKVPNVUv8cUpvg1O6FYvZFMZwOlUpLwDoajF8Bw1PmCxfEu84p\/41Q+3xqRyM\/Wl+156UXHYtkgdxSFwOhqkbnJ61E90F6tSCxoifHtR5pOKyjegdDR9vx0JouOxpk+9Nx71mi9z3oN4PWi4WNEyYPJpPNA71mG7B5yaab0A0ahY02nC0z7Tms03gPami6FLUdjTNwaPPJ61ltO2M0wXLZ5ouwszWMwAqJrjms77T70guR9BU3YWNLz89DR5vy1nfaxnimteEDANGo7M0Gl96b5uO9ZrTk0om96dgsaH2vAqIz7uaqeaMcmjzwKLBYvJJnqakMoUdayxcU7ziaVgsaJuAe9R+aM1QM5zThce9IVi\/5pxiohKc8mq\/2kYxmmmfPaiw7F0yDbR5uOtUfNPaneZjqadgsXd4pvnYqkZiOlCyk0WCxe87io\/OOahDjFIzAc5qrILFnzWo+0N61V80ev6UCTFO47FzeD3prSgDrVYSZpOTyamwrFgTUhlPSq+SOTTw+adkFh+7PSl3YqPdigv70xkxlBNNMx\/Kot1JuwelKyFYeGJNKD2NNBBpcgc1Qx1NLAU0sDxmmMvvSuBJvHrThk1CMDtT1cj6UXAfgjrRmmNLkU1XOORRcCQMDSlhTFPFDMOlABuBNBOfpSDA5zQWB6Ci4C5z3p22otvvS5I4NADiMUtIpyKaSAaLgLnHNG70puPanKOKVwE5PNG4elBbNG3cOlACMRxS0hGKUHikUFFNJwOtG4kUCuB5NNfpTiD1NJjJoENwvoaNpNOCDFB4zQITb\/AJzSFgMilLdqYT35oGB56U1eKUknige\/6UCFJx0phJJp3B9KTApMBhGRz3pGTjpTs018mqtcY3GKY4HT1p2fWk4bikAwuBUTPnipmj96iKCgCJgQuaj5z71M7gVXdw3NAAxHemMAevak3Fz1oKsetAHdEKoyATS\/aGDAAAL6mnqynAJ5pXEZ64B9qRAfaDxjJ+goB85skYJ\/ChVCruI+TtgU3zF3gDOO9MCwI1BJJ6U8uvtiq6kk52kjt71JHEJVwRjPOaaAkjKjpnHSlKhsgdM0oi2L8rDPpSIrdWb8qYDCpHI\/WlUuzcDAqZTjPQnHekZfmGCOnHegVwA9+afHtHBBB+lMIOM9KUKwOSwyR3NMBX+TqeOuaYQGqUMo4YZNAEa5IGM0WEMCbugp6wlh707AxkdKGzxjIHrTQDNmDjHNAJBwDinkcjv60OgzkZ9M0gEMgwORTSx3AdfSjC8DH40hHOQenTFAAykHP60u1uoPA65pwLYwV496PMxjKkg96YgVO\/NPO0dgTTcl+hx68U2VljI3Y2ngt6HtmmVcflGGcU3jOQahSYtNtHzJjnac8\/5FSh0Ujkg9KVwuP53UNEX5BIoyTzxnt2pdrH2FBIm3GAKVcg84pCCF7kUgXjIz+NAEwfHamtIHPH8qaASOOvekWMKT81MBQo9OaNzL\/DxTgxXoTigsT1oAUNwMjFAVTnk03IOMk4p6R56GgBpA4xzSrmgoVPpz3pmSOhxQA4lvehiV69DSjOOTTt24Y2g0AM3EDjnFOXLGkwOe1HBAI7elACjb36fWlUL65HtSCPIz2oVMZK9KAF2Y5BpNxHUU9G7Ck3MpJyGHWgBNxIzS5INN3OR0\/SlKtgZHPtQAm0sTzigpgdc1IO2eKVtp7\/pQAxSM8ingZ7UwkL1GaAQehoAlKn3ptNGSetG0k8nNADjgcHik6CmFCepyPSpEOBgg4oAYQQc9aeDgAjNO3KRwuPwpvGSQKAF81hwBmhMscsAM00sSeRSl27jI+lAEgUCmlAOc00MGOCMVKihuCQKAGq+3oRStlhyBTmiVRkHn2pCQv0pgM3EYAFKSe1IeOvGelK2frSAQKxOSalPT8KhDnP3etKWNVcBWdVHFNDbjgUoAIwcU4YUYqQFxnikwQcCkzuPfFOG1T2zQAvPOaUGmnJz3FMyRnmr5gJWximZGetICcc80Ahu3IqW7gKQevWkLHsKmXaR6UjBVUYOc0WAYoJNPePaeOaibIPSjdxnBoAccd6BwKapBPU1J5WR1x+NADeO5oU4GOtIYwevNGQucA1YDs9zSZ\/8A10mT7YpwJJ5FK4BjPQ4pcZ4pN2OpFIzgnGKoBT+BoGfwo5J9qQHOf8aLgKR7UoOKTgn3pSPzoQBuPY0e9A6daCcd6AFBGKbmg8d6TaR05oAUH2oK+hxTfnJ5pxOOtIkX6VGyux64FSAgjikY4HJNADVOBjNP7cZqLzFLdc\/hUgyw4NIAIGKaMDmhlOMZwaF4XB5PrQAM6nqM+9IMAZFLuwcYyD2pflAwEAoANuR1ppiz\/FQzbeDwBSqxY9OKAE2Ec5qTj2oK5GM0jW4\/v1fKK4BtxwBimkPnpTlXaODTuc9M0corlLUk3WFyuM5jOfyr4l8R272U1rcureTNdvAGwcMQxBx9CR+dfcd1ultpBt5KkDHriviP4pwPa3F1GzEpa3ahUzwuZMnHYdea9jLl77R8lxCk6MZPp\/wDztiI72RgQqqGGfTFcp4OBPh+MbvuPMWwMnhzgYrp74NbXTbWPXdyeDXPeGLZo7C7hYDa1zOFX2LV9tBqyPyab\/dTj5r9f8yHUUVrS5DMT5sbqoHHJJ\/+tWf4aglutBhMbqIo8ySlmC4QNjv1JJAAHJJpftishD5EURZXHOFwemPrxWfZB4LeE4yke1CPQ5bn8sV0Om5JNGdOpyQlTfdP8H\/mNv2j0m6s2ZjHHNI8Zc88YOf\/AEIVoxyxnTktQ7BGZUIB6Y6D6ZrmPGdw01nESuNrs69jk4zWsZhFEiE7AGycjt6fyodLmbfXQ65P9xS76\/g\/+CUtYR01aVxkCUCI+5ye\/wCVY3keZqkylVAIB9M45x+lad\/uu7WBhgBX35\/nUDQGOcXBwN+Rx24I\/wAK3guRpopSbp8r\/qxl21gJbBopA7YkYgD03cVjSKIZdQZVB+clcjjHFdA3lwW2niGeR7h45fOQx7VQgrtw2fmyMk8DGO9Z80ahLoNyXJ9sgHj+QrpUbpfP8UbU3yybfX\/MryQRxySyFF+fBweB2yKS5s3YErkKF+cA45+tWLpTIowS\/JYnOfTikXKREScCRjnPrW1g5tLmRqtq0enyF2LMGXIIqnbWgZY8g4I5PrWvd75bSaLGWY7W+nf+QqGNjGoTBztzyf8APrXNKF538rHr0ZuNLl8yKSBE8seWQGYLz1AzVe4tzK79sA\/l1rRuUMkceCchvz5qPaGkAIOAecVk10OmEtCva2bSW6\/uywCkH2qaGxRJNxGR6mrzybLcIPlXjp6CoUcyOc8n+hrSCIlJvUcqIoAVcZ9DUSFWGc5A9KkJOfQnoQKYzY3qOPTmorRVjfDyaY+NSJVyQMHnd2rVuI4p1BZT5p5CleM+lZkIMjFunzEDHbiryytHGQeVboM1xcp2ynpYqXzEIo4GBjnrWOzHJOcAmtG9nMjckDvxz0rKklGRx9a6FFIhNsLi6CupJqe2vxHPC27OMg+4xWXesPNBHb2qmbvaQATwc9aHZaHRCF9j7H\/Zk+Jul+F5L97u4FvJPCELdm2n\/CvoOL4y6Rcf6u\/iJJ\/vjmvzY8KXUl08qOxEaDAxW49xc2\/MdzKP90mvlcVlVOvVlU5ndn1GGxs6VNRaufo7afEOzu2O2+iHrtetWLxrbY4uEf8AGvzXtvGGrWJO27kP\/Auf1rorH4vavZD5ryXOeQDwT9BXnTyVr4Zf1952xzCPVH6Hx+MYGGQ\/FWF8V25H3\/1r4H079oK7g2KZJMKf6V0unftDXMzZ3gYPI\/H\/AOvXHLKK0dkbrG0n1PthPEsLMP3lSx+II84GPzr5B0z4\/oOGljibO7anI9T1xXR23x4gYoftDA4z83H44\/lXPLL60fsmyxFN9T6kXXwcDdTv7eVOS4r5ptfjzakOJM5OCoQ5YL79uvpWvafGWC4bzELPGCOUII+mOTWDwVWP2TRVab6n0GNaDnl6c2oCUcOB+NeK2nxFjuXkEbgsrbSS33emM49eeuK1o\/HcCAGWRIwzYUscBzjPHr0Nc\/sJ9jRW7np32xfMyZOlTf2pGBjd+teYxeMLedTtmTIxkbhkZ6ZHanr4tiZMJISNwXhe56UvZS7Bddz0htT\/ALppv9oZ6mvOH8VhBjnk4HFTReIklGTJg9hxQ6cluF0ehLeg\/wAVPN8o781wUGvox\/1yu3I+Qg8jrVn+3AUB3AA84NTyMd7nZfbh2P60g1DeevFcguspvIHUDO70FSNrUSjl8c4yPWnyMR2BulIzuOKia6HXJNcg2vpHjL9QSOfT2py615nIDY+mMfWjkYXOrN6AOtM+3ba5c6xg8sOvAqVdRDEZyc9xScR6nSfbwByf1pBehjwa52S7Izj0pF1EoccAfWlyiOj+1tnqaPte7vXPnUtwzmmnUD1HOaqyGjo\/tietIb1DwTXOi8YrmpRdA87hup2Ebv2oEcUfa9vesIXfGAaf9pJFTZAbH2zLdeaPtOeKyUm3Din5Pr+tHKhmoswU5zTvtPoKzQ47GniX5smlYDRE5btS+ZmqImGOO1KJse1HKBdVueTUiOO9VA+acspqbAXDNgdMUnmh\/wD9dQKVK8ml8xQelAE\/GMijcPU1XWYdxinK29vamIm8wf5NKCD3qOnouaAHBuaXk\/hUQO09Kfuz1WpKuPztFCyY60xhk4zTfm96dhXuSmTNO3dcUwA5pQoANFgTHbiaN9NZwOlIWB5FDVh3Hg+tO4HfJqLcBxTN3NIkmZ6DJx60xSrdacVGOBQUC5PNPP3aYuF\/hoLZ7UDHEnrikDjHI5phenbieRQLcc5x0FRFznpRn14p+F60CYKSfan4HrSAgmj7tADuMYxUZXaaUOoNIWDN0pjF34FIxyc9KKOvQUiQ9gaNjdetID7Yp4Ygc0DDkHkUhyM8UrOTUZc8igB+frSF8U0UmBnmgB+7nrTgeOtN8vPSjGODQO4mzOMGlwRzmmnP4UhY4wTQIcX45pAwNMBINPJB56UADHjIpuSOtL+dGOOtACZ4zRkdDQTjgU3vQA9lHY0wj3p2PrTScmgBpyDzSE0rEk0YzUgNwPWkK8epp5FHHvTQCEgLzUBIJ4qR37VFx1p3uIdy1RPhaduz0pm0tQMiZN3SoGj3dOlW2TaOTURcJQBB06Coy+eDViV1I4qjJIVOBzTSuB6EbkNwF+gzTgnJ3puPXDUzzQzZ2EHB68Cpo0yuMAZ4+92qSCRYwo4YdM9cZpVhUHdgEfhxStAQMkgAdDx+VNMZVsg8AdD\/AI1YFgYUfLjpySaYcleATnsOKaCwHKkDsf8A61SK4JAGAByOaYEeCedu09NxHQU4KFBBJxjqTUmwc8EnPPH86Z0kI2fTJ4P5UAOUbuh4607JUZ25waFQcDdg9SB0FBiLDhgM9DQSPyHXBAwevb9aYwCnHLcdfSkCFeWcEVKpCjlSfQgj+VAERBPABxnrUixkjBIyRS5XIA4J6AkUhYgnINMBNgXgEjPfNKJAiYzupOpAIIXHrxmniMLzkZJ9TQA0yAnOelKoLkAHvzRwS2V4x1zS8AcEtn0oEBXaTnj8aQr3B4I64zS9j\/SkALNjPBHAI4oAerEdvrTNxYZwF+lBJBxkE57mlLfLj5VOc0AN3svGw+uaAVfkj6jGaeuRg53DvnPNKSjZGAuevOKYxgZeNpYDtgYH0p\/lI3cbsd6aHAYgcY6e9KxbaTgZz0oEII8ZOc05ZMFvmxjGc9BTEPcgjHcin456CgBpbHf\/AOtQVLL1P4dKNib8HIIGBTiCoABxxj2oAarFeNpI96ccDGQQfY5FOGc5wT\/n1pCSRnGPoKAEV+h\/pTs855FC7SRliB7jFDIAPvDHrigBpkVupGKci7jgHGaZtBPOD9adgrk4z1HB5oAXBBPU00k4xgA+9BLDuGx65pcBzzgCgAVVyCcg9MA045U8DgetCqg4HB9wTStlWAB47nP+FACbue2T60nTqQp\/LNOLDJHPTuKaSBxxz3xkUAKFORg5BHY8UCNh\/s\/Wkyw6dB6etKrO3XOKAFVdvDEt70hwBkZOeMGngAHJyeO9KcbQAQeehGaAEDkHpn2x0pHLYBxjPNOyg6nH04pmUY4BGfrzQAmWJ\/wpcqOAf0pQr7eBjHHHNNVsnBwPcDpQBIqBuvA64pfLXGFI+mKVmzxhh2zimDOMBR9c0ALt5wTg+lABLYGQfenKqnuVPT1NJwufmH4nmgBFdWGP1xjmhgw4z+maXCsp4+b25pM7u4yexoAER92Tz9TipHyF4wPeonBOTkqcYOelADKD3I460APwGHJ5pASowACe1IN3fAz2zyacCvUg579aAGpuzl8D2FODqxwDz9OKQzAngD8aeoDkYB5\/CgBw29eAaY\/vxSsCvGCKQDdkEHAH0oAYyAcKfoc0quy4Dcnt60bB1AA9j1pCpHc59qAFJZvu5IPtQoI+9nFCsyDGM+9IZ29\/YHpQBKm0daCRk01SGxknPp2pSAMfMMd6ADgEE8D1xSbgD1DDscUpwcHjHvSAAg4wwxmgAVuTkHnvTwu\/jpTDhsAnH6UDKjgZGcUAP8oqCdw46U3kMOOtGSe2foaT5qAHqSW6AfWnAgZPWoy4wBzmnbhjtz2JqkrgIW546UmSeq8U0ldxC4B9qcMnnNSAgNKQDxmg5xjqD0pojIBz+FAD9pBzuzjpTgcdeajUE9SaTcQRwD71VwJCQRwQKZnHFO3lVORxnpinEj0P1qmrgN5HQd+c0oYADr75oLZ6Dp6HrSMx6BePejYBxwe+BS4HrTeTkEAUm0nOTx7UwHZAOOaN4ZsZpAAB1JxSYC8sefXFIB278vWmlQ3OTzSblJxuBOakVNnDYPHUGnoAzaFyR1pVcqOcAfSlDDnnpQXxjnAz60tguKXyOg+tNzznsKARnr17YoIJ6Yx6GgkQuDwCKcQG\/wAKNoJzgA+opMEHnikAwKu4rgjjj3qQfKMDr70oIxTZNpwSCR9KYAWL9eKORgHqelNEgGSMgeho3719vUdqQCuAMHOKCQACT3pCuMEg896PKXOc4HTFADgB6596XIHTANJhlOOcH8qAxJ5HeruhWABs85FHQd\/xpGcgHCg0gd\/4hk00ySTBPfFKWwOgOKiRnfOVK896eGB9zjFMTRIZFbsB618t\/tKeDm02fVL63iZre6i+0IVGcOpBYfXqfoa+ohENvJ\/OsvXNDs9ZsJLS4gSaGQEFW7cY\/rW9GtKjNTXQ4cZhY4ui6b6n53eId63CqWGQeo6njisGwfM6sg\/jJB9ckZr3L45fBzUfBTTanbW8l9pBG4zQruaIjHDgdB156fSvC7Rvs+pQoAwaRTtPTJz\/AFwK+3wdeFanzRf9eZ+MZhgquEqShUjb+vxOa044OpRSEcTv8\/pkmiCdhAina0YUKAfqCfxxR5Ji1PUEUlQ7NjnOR9apsrJCrE4UEng9x\/8Aqr26MueCktjz8VTUazj3s\/wuZ3iyMjRGbeHYybckdvX+VW5Wd1dSBhkJz9Bn\/P0qvroN14ZmRE3GE7iQOgVsH9MU6S4KWgbA+bCk44zitY2d7MvX2ME+8v0I7q6WLSg687YRnjk\/KD+Bpt9dAWFugAKvhiB245qGBftenSISQQhRuM88g\/jio7tfK0eJnI3AAAZ7cDpQormN4pLTrco3y7rq0AbaiK6478gc\/pSaoBCCuBlsAHPqcGpbQxNrKTXcMtxYRzB5I4XCO8fGVVjkAkZAJ4ziuj+J9ho8XixIvD3kNoCWts+nzxzebLdxlTmWfpsuC4cSR4Gxl2gFQGbX2qVRUktX16HXCl+79o2vdtp11OSnmWERxk4O3Lcdz0qJmD45AUkYHXg9aR386e4cjP71sj1ApYISMD05wenet1qiXHlWpXQbricEYIZj78moZE23g4zxjipQpjZiHPJzkmo3BaU9uPXHrUPVXO+G5I0pR0UH1NNRRE7FhnOSDTlG91bnheRTtoeGRQQCT3\/lWDte50J20IHLOyAYIxngdDSxqEOcjJPrQq4lK+2KS4TIHIznHTpWkNFcp66EoZdvyjpTWAIJHPNRDBXqetSqQQcHDGs59i4Xi7jLZ9pI4OfxFTyTHBByO\/8An9aqhdpPPHqKbJL83A49z71z2R32uNnfLZyD1OAKy53KuMHvVmeXg4Yf4Vm3FyoByQCffmlzJbm0YX2Ir2XcSSeOlUgQKJZDIcnimg5PSuacrnoU4cqOm8K3aWUE7MQC+B0rYk1CCYYDrj0PauX0yVowAFBHoRWtEyfxIufoajdtnVHYuSyRv0kJ9CKgaEOMhyefSmq0an5U30jXSrwOMdqSsh6jGiGeXYfSoyzD7rHP1pXm3j5WUex5qBmmx8vk59QxFNsW2w83tyn3WOPrThrl4gwD3z1PWkisbu4PGzPsc1oW3hy7lHzKp9gp6UnZbglJ7FeDxZfWmCC\/B6Z4rTsviBq1qoWK4lh2\/wBw4FTR+CrmQgGJt3p\/9fpWra\/Di8nXCwlvfsOcYz61m5U+poo1OhSt\/iTrCSqz3k7OBsBMhxjuOuCPrVuH4m6u7OzXDb3bcZCOQQuBg9uMelaVv8JdRuFGyL\/WcjeuCPcDP6nGa0Lf4Ha88xUwRFGfCspzu6kBc4H8J+mOawdTD9TZRrdCC1+J+sSFHa9kZgu7YGJB68DgEDj6ZrT0zx9dItwsV09vcyqEHkriN8gDc2BknPbPAz61r6T8CNTiEBvreJGYlWQHfjg8HtnjqDitnTPgFG8ZKSss+4DfGykL8ueRg8txwegPeuWdfCdzpjTxI2w8aG\/dIjqbqkiYMcUziWQjd90cMck9Ccdh046bQfG4vZFt5r5wInJaW5WRPMUg7lyeD1+Untj2NTWnwejhikgiicRyXAcDCjykHGcEnn5cjHHPIzWlb\/C+9eZ4Z\/L+wsM4hkaOVm2vlsryeWxng44wcA15s6mGZ2QhWW5rWPiOHEIHmJ5u\/wAmOQfMyxkAsPY7k4759c1rReKZXYLFbyFFO0vswBwD1OCcdsAjP0qLTPB15GSZCr\/MQ5Ee3oSVwBxkcD8OOtasPhV4Dkg46biMH8P84ry5Sp9DtSbKQ12SO4jhCy\/O3DtkjI+Y5AHy8Dv1\/IHYjvruRIyAyjqRwWP0zx65z61EthG0z\/u5FdzgvEpO4ZIAOPT0rVg0YyMCSwXoARwQepOfesJOJaTRELs+UjyZO0b94O\/B9vU\/0zV43uNhz5jBd2F6HrT49GKsh8sn5uSnGe2f6\/hUr6FHOCpiAyCpCqBx\/wDXFZXRVmQJfXDSEeSoHYmQfN71binmZ2ORjdlSB2yP8Klg0yO32oFZioA+c847VPHCwGFVUXGAmOlZyaAZ57nbuYnueO3+e1D3Kjk85Xdx1PtU8cBGGOc4xSfZC5GSfUZFLQLEbTAHA5p3mndgDDelSCxJ45\/GpVtSvJWpukMrhn6\/nUi88ZNT\/Zjs4+U9iO1QLZXCrgzKfcrgmldDJVyBUwfPWmxQSAfMyn6U+OBjyRwPSpAcH2cmpUmB7UgjBOMH8qcYCvIO40CJ1+YUeW1QpuOcKRipgO\/NArskj4GCc1LuA5GaiQHIyRUqx7qRYom5xipA465qNIwOe\/SlABbgjNAiYEnAFPCn0FRK3oaUKzfxEUnZgTDA609XXtUSofrS7MHkYP1rMCXeT0pQWRuM0zJX\/ZBqRSwOMimAp5NP\/gqLc2enFKCfpTEPUAHJo8zDdKBIB96nfIcYNMAWTHamlznmpSAOSQaaJFI4wfcUhD8Ar1pgTjg0m0hs07k9M0WDYQrxTTxRsOMg0pBC5qRjhhTgCkCHJ5IoV+cYFPDDHNUhbDdpHU5p4K45xTSwB5HFJxngUwuK2D0NJgDvQvTrijGcVAxV56UojI560ojwMijeRxnFAxCCKYzEds0pJHfNKScZxmgBqgNyRinbV9KYpb04pwbjnNADiADiguFyMUoK+4NAAJ5ODQAjSbhwKBnHpQSoPAqMuM9aAJGUt0IpANvWmF9x4ytPVgzcZ4p2EB5PA4pMgClZT1pDn60hihjyQabkmnIQOvFIzAdjQALx1OaX5TUeR2zRyckCgB2R6CmHryaVT1yDSFcnmgQ4SY4AzRksO1OCKOjUwttyAcUAGGzzTlA9aaWJGSeKbyTxQMc45603HNKUYjpSIrKcGgQ7OOozTd4B6VISuOlRgg9aAGnqDS4\/KlcA9KSpGMYL61EeKlZN5zkio3UhsdapICPac8UxmIPSpj+VIduACaAK0jOVzUYUd6ssVU96YVHYA0AQmBX5J4qCWGMH3qWaTaM7SecYqBlMpBKkL7007CZ6CsSuQBke5ANPWMRv8vOep6ZpjfJgZznr605CzckBMfiaRJL5pGcdfTH+eKC4VwGUDPfdTVCdzk5qSMx5IGBnoAKoASUkgY6dO+Kfgk9Np7k5pyISQcgCleIr1yfx6UxXGouMAMM85461KsLYyMDjPUGo8cZyDTcgcB8e2OtAiYhlbg5J5Ge1RkOX647etCZfgnHHY9akChT0PpyaAGlGJJMmB6KAacmO4DEerY5+lJkAkYxk+poPzEcE4PAFMBx25GFIz\/dPBph5yANp6ewo2ng8\/XvTozjjGKQCAFSGHX1Pf86HGXBPyn34p7liBzn1pBn6+9MAUkHBAKj1FOMvONmM85U009AcZPsaC4DYGc+1MAY55wefQUEMMYHQ5NOBHr1pW9OGHSkIj8sBgdxX1zT2UYHPAHVaCpOBgfzoKZAzxTARQVJG4kYx7U4lhxtJ75NN5QcUbiTkgY75NAAWxkDg9cdqRXOPun8OaN2TjgkUmQ2OMYPr3pASKwJPGB7Cnkxhe5Y9hUAOM5OPfHApwBLfK2fxoAcemex7UgCjoPrSmPC9OnXPSkx17Z54pgOwyn5R0HrilYEdVP1zTQNoxyMd85\/OkVmBPzZ\/DGaAA55+bj3pM5wSePY08ncmAACeQe4pNhHIBPtigBQoBPGCepIpdzD3\/CkDbuo59KYrLycEZ60ASlyx6+3TNIWB44GPSmfZ8fxtg9s8Y\/Cnrgds80AAGQBzj2FGD35x0GKcW4wMA0AknBPvzigAVTgnPHfjNLGQqkAY\/T8abkFuaTG7Izx1xnrQBISB1HOPTmk3j1wPelWUquM8dvamtKM9GyORxQA5ge+SDg+tNEhVxyB26Zz7cUBtx3cKc8cdaf5YfkLyeTjGDQAzzVbAAyfpn+dPEe7ooGO5GM03aEPBIH6Cl8zOeQPSgBXjccDBGcEjpSFcbQRk8kcYNKS2MggA+oppGG5+mQcn8qAFCrjGD+HIpQqhQQwYfTrUbZ4HpQM9weOnGBQBIZMg4yfTNMIc5DEccgDrT1JxyowOmetOZgeMigBi4U4yeexHJpw2sTyCevIwfyqI7QckkDt0qRXwDxweOtADwcHgZHp0NNklUeg+vNNDbh94\/j2pUGQTjd260AN35HTPvTiokXnGAep6g0m0qBhQR79TSlFbk9egGc0ALGmABtH50rAjJBIHp6UmcABcrxj1prs5PzDBzjIoAXzHB4ckZ49aTdIckuevfoKUN8oUg8egzigyKw6ZPqeCKYCZORk5p0YTGefwNPREbjcB9Kb5KqP7wBz16UgHeaq8nqPWmearnGelGBnOR17ikGOcFQfoMGgCUIWxtUk9KaykZJ7cYzTdzYAJOKHyw4yp6YPf3oAZ5ZLnGPzp+xQOd3X2xS7WK9cUgLA4+8AewoAMnA5x2FCEq3c8\/rUgdFG1lHPTNMYjdkKQT6UAS5Z+Nv4Y5\/Gmklex6c+1RtKVP0+vPtQ5BPowHI9aq6AcCDz17ZGaQJkcAYB4BpFBxx0+uKUA5+YDH0pJ2AAu3nA57in7z3OBjH0poSMj5FKn\/Zb9aem5f9sLnqOlAEYZyewpxLEZ3HHcUPLnoFHHYUxiSc49KAFAJOWPHUYGKDIASCDtI4JwRTNzgkbMA9Pan7fmJIH88\/nSAeH56YPYnjihgCchjntzxSrGJOrAYHamnaM8kke1aXuAjBmBGQM9ccUiow5YHH1zSccZOD70obnHB+hpASbgOqn0BBFHmDpg00Hgc8\/Wk2seh29ehp3AcSQSR6Z5HFAdWwRn65pEBUZJP0pc55yPYkdKAEYGQYCgjqSQKaE25GAB7ZI\/WnbsA8bh0Jphc4ztyAccdqNAHknADDIz3pQqKT8pBHHHWmqwbkcAfhQzDbyD9P8A69AClwvcnn0pwdiCVJA4xntTEIfAAHbJJ4FOaFc9QD2oJDJGMt81L8zHj\/JpNpUgD5hj8KQuCTgYOee1ACncM\/KeO55pQQQdx\/I00ueckA\/maYxdT82DxjOKQWHkjgAgjFJ84PTd7k4NM2LcRlSA6EENgAhh7g02O2S3CqirHGBwvAA+gFAyQ7s8DGOn0p24cAkhvbpStIoUEbhxxgE45pQTj5s4PUnrTEN25JIY+5pNuTyxJ9M0OxjTjJx2z70zO84OB3pDB1DZwc\/Q8Gk+0RRFVDLkjGDzTn2qm7kZ6gkY\/So1RXGQQPxxTTsFrlgXIzjA5HHHNAkL\/wAWMjJ96Zu2ADK4\/M\/nTSTkj1756U+YmxNs3A4BHHXGaQK0fUgnHbioT79u9BcjoQAOMYouKzFlgt5kaKaJZkf5WRgGyK8T+If7JvhPxVIbvSJJfDWpeY0omhQzREn\/AGCRgZ54Iwe1e1rg85xQSwHDkdOvOaqFSVJ3g7GFWhSrrlqRT9T89viH+y18S\/DWoPd2Xh9PFdmVO+bw\/cKZCM9TbSlHz67C1eSeItNv\/B8gh1zSdV8Pl8lV1exls8nuAZFCn8DX6uXpu44wbZLaR88rOzIMcdGUNyOf4efUU+3mZ7fy7pImLLteJHLxk+wYcj6ivdoZ1XpWU4p\/g\/v\/AOAfOYrhzCYl3Ta\/I\/JLTb5TZXiq6yxXEbjdEwdSSB12k9x+VXNF0xRcGAyKGKpKO5C5\/wD1flX6R+KPgB8MfGzO+r+A9BuZnOTcQ2SQTfUyRBG\/HNec61+wn8PNQfzNGvvE\/heRBhBp2q+fGOP7tysn5bq9KGeU2vei19z\/AMjx6vC89VCon6pr\/M+FLeyaG+voM7hG\/mKwOd4I4P8AOsa5aKaOaMsRGcopHb8\/cV9d63\/wTz1FJZX0X4qyoT92PVNDikOM93ikQ\/T5a8+1H9gX4r2c0gste8GapGejTSXVs7fUCNgD+Nelh83wn25\/g\/8AI5KvD+LVnFL7zwC1kNvbtGGy+05wP8+lWNuBLIpXLnKgepr03Vf2P\/jdpUhP\/CL6Tqp6F9O1yIbsd8SBa5q7+Bnxf0MhZ\/hTrz46G1kjnHHpsY56ivSjmODloqsdrbr+rnmVMkx8W37J6+n+Z56o8q6mUqSN7HOOxJq4Qq27MAxZgQT+lWda8P8AizRizan8PfE2n7OrS6fKAvY87emawbnxZaW+IrizvbYgklZrd1PPXtXTTxFK3xIK2BxV4t02TqokduCQQMeozThYsT5gHGeSayR4x0tSWWchvRlK0q+PLGJcJJGWBHJIxgdOKt1YtblRw1f+R\/cbNnABcc4xvwDnP5Ul1EF52kAtkfSsBPGlmjKUkQlQAApHam3PjeKXhWXHbkcf41lzx7\/ijoWGrc3ws3EtlLlgQHXnnqahv4\/Ll2E4xzkj1Fc4\/i3GfmHPXJFQS+Iprxsj5z\/sjP8AKplVSjozqpYSrzXkjoHuPKG3KgDB5OKgkvFiP3gQewrGji1PUjiGyuZv+ucLH+Qq9F4H8TXEQdNDvxGeQ7Qso\/Wsvbo61gm3cWTVTtxwo9RVGTV33fLg+5rZi+FHi+cgDRLkZOMHGf51ab4O+KImUS6ZOhIyAE7Vk66fVfedkMJbocjNfSSDlsD0HFQFyzc5NemWH7Pviu8Ct\/ZtwA3T5OP0rpbD9lXxTcIjG2KZ55GcD354rmniKUfimvvOyOHn0i\/uPD1iZ+gqzDaEckZ9q+hI\/wBkPXkCGS+AUjJ8qHfitXT\/ANkiYnE9\/dMAvI8ny+fxHNYPG4ZfbN1hK7+yfOsMeB0YZ4q2IlwMSyZPZsEV9WaZ+x\/YSKjNeytxkpIBz+tdVY\/sgaLEBvurnn\/nmijH41g81wsftG6wFd7o+Lo7KaQjZFI+f9gkVp2fhXVL87YrCbHQkx4H619x6f8AstaXZOjx3t0FBz5flq2P613GmfCmzsERCvmbR96YYyf1riqZ3S\/5d6m8Muk\/iZ8I6N8INXuyhksZgp9IweK7HR\/glPcsn+ihh0JkUcYPIxj619wWvgu1iACwp+A5H\/1q0k8Jwkfcifb2ZQK86pnE5bI7I4GnHfU+RtF+AM4cbY4LYMM4Ee78\/wDPrXb6b8B4I1b7SscxJ6BCnHHpyDjuP\/rV9FReGFzlYenQZOP0q0PD0af8sz\/3z\/WuCeYVp9TojQpx6Hhlj8HNPgXcsIjzyVUAgnnnnvk5rRh+EthFGwSFIyduHTnGO\/Yg8nv3zXsyaFE5IKnB5IIIqzH4XhDfIq5P+e9czxNWW8jdJLoeUQ\/DeAwuhYYY5O0YJA45\/Dir0fgaFJAQ8pAbeF3cZ\/znivTf7EWEY8sZHpTzpJCgbSfYVl7Wb3Y7JbHnMfhNUAKqHK9C4yRU8egDGDCuF4z0xXfNpm75ABk9gQDSLpOTgFRx0IJqfaO24JJHEJ4eQD5IQeOoFKuhFORCOufrXcCxUnGGPvnH6U86WCQcEnPoDS5pBocONKKnaYmJPHpxU6aOMZKD3rsDZlSVMZIHoKQ2qbfukDryKOYZzCaJGO2fqKX+xYxwFHA9O1dOung9Bj0xSixLDuM+opc3mFzlho5B69umO1K+mbAcLjiulOnv25\/Gn\/ZdnysAT70rgcyul5ABQgHoO1POkJ1x+Heuga1IPKAe6nimiA4GQKLgc8dLUdCRSfYyvGCfwroPs5LdP8\/hThZrjn16U7iZgJaDqV\/E042e4cgE1u\/YkK5waaYUi4OB\/Ok2Bi\/Yck8AY6U19PbPDZ+grcWNJehyfSh7Vc89u1O4GItgByzf\/WqT7KMYHetIWYYnC4+lL9kZDwzYH+zS5ijL+xEDihrN8nn9K2fs4XikMQIHy9aVxGQtpnvT\/s4VcAVpvbMeg6dsYqPyGU8cDvTuwRSWFV6jn1FO8jjIUkHpVz7Mx6n8MUq26rk5P5UtQuUfKVfYnsaFgUntWkI17Yx700Qg\/eX8RR8wuVvsr9l4FH2fHXt2q4E+XAPFLsOMjn+VGgrlIxkHIH407B6ZyRzVhYmB4U8+1N8jDbhn0xilcZDjjpjvSKXx021b8vAyBgUu0evWgZXAz1GKkEanvT2cA\/dOKQKSQw44piGNGAflIoUbetTBd3Pf0NII19MUCInHmL3NKkeB6Y9qlEQIypGfc00oFPJpXGN2E85\/SlUsvUU7aQeBxSvnOAePakMTeCpyvPtTcnPApQpPBfg\/zo2MnU\/SgQZA9j1pDluqk0+PaCQc5pMgngY9\/WmMZgnggVJsUjOaTazYHpRIpODxg9vSkAAop9fwo3A5OBigR+owPU0vlkD5SB+FADQ5PAoOTwc5pdgIyQc+1LsI46\/WgCMxkZPJp+CAODSsSvNAySCScGgBM4PJpd4HOBSshbvn6VGIgBghuT6dqBD9xJ5xTGYqc4yPalC7Twcj3NG\/ggBcUDGqxYcjApwRX6kD3pA21QCevanbTt5xg8YoEKyKB1zTQQvQimhR6Fc9MUpQDrnJ56daBjiSfU0xpMcZxTuduaasgXOFDEdulADBuccZOPalAbrmlDHPIwKN\/HGeKAFyCPmH60nyg4xSjBYjIFSeQfLyGBX6UAQnFA5OMdKeQpGcZOO1RjKtxwaAHFTtpuM44pdxxkucetKwyv8AXFAhNnGQSaQYHUZNN+bPUAU4Y7k80AO8zH0qN5G\/uk1NhOh6e9MZ8HA6D1FAxi5OM8U\/ap6HH1pjSqoIBoxu5\/GkAjqAcBjx6UvXpzSKuT708IQMkjpQA0qQOeKYULHk1JscqeRioyjLyTuHsaYgZyvAXFV2yRkYqwzKeoPtiomYOSMUXGVzFKR8xGOxAowFHzMT+lStgDIJIqBo1lYEjINACGRD8oY+tQMQDjt9KsNAnOFJx19qrMAxYBsEfw5piZ3yOXI3rj3qcRL2bnrUJ3nqKkjzk5zihEjig7NzTgqjoM\/hQjDpUgTgmmA0cfdJHuKUFiTlie1A+XGOKXODkcGmIVSQoAH4mkI7nGfQUmSepNAUk5ycUCHKCRmkY4PXrzTlBpTnuRxQBGoOck5qUYHzAcmlVk28ikLBm68CgB24k5I\/GkLKBk8Gm5O7GCRSMcHOCDRcQ4kE8kD1puQQaFUMOKds4xjj60DE5bneMD2oGCR8p49qXA6DGKVSw6sTQA8x7kyQMfWmhQOg4HftScg9SRS5PTHFMBQSMnv+dIZS2STk0DAByTmk3gcdaBCAHdnt70\/KkduKbvB4Ip4U9cj6UwGKoJyMgnrUirnvikxmmHKmlsBMYRj5mBHvURUITycUo5pG6nPb2pgGS2CP5UhBHQc08NxzzSE5zQMbufOCDUg2\/wAXB9hTVyeo5pNoJyeQOlAhSQGAx1pePU0DilP3fT60AJsyfb9aGTJyckjtnFIJFU8kU\/OegxQAgznHTNBRQSS2D1Oe9G1ieOfcmo8OT14HtQBIh2MSpAz6ClLE5yBn1x1pgOMd6fuHpQAbuMAce1KuOucHvxTAfQnJ9KeDwOKAF+Ungn344pXAUYBpmfmwTgUN8pxgt9BQAuAOd3PtQTg8E59qTaB07+tCjr1P0oAVVbkglueuKNu3IIOT6cUZA6GlDsCCDnNACEDjH\/16fEibgCvT8qa0hz0yO9A9\/loAkLYHJwOgHao2bAPqR2FI4LHjB\/lQvyuCSPwoARH3cAHI4ORinrkZzg56jOcU47WyP1pmccDn1oAdtyMgjj260bcMOpPt2oy2OCQKOg60AIyhDgHj3NJvxgL07UHGfu89aBwMHg\/SgB25gSC2aUliRgjP1ppBHI5\/ClWQjgDGKAE8tt2WYY9hzUiLgHPA9xTPMPUDketKpPUY9KAHMw4HH5UhPJxTyrHAOKYcDjjJoAbuwM4xjvikD+h70uwE8k5pMAnigB3yE8jnpnNO8kMQduSOvPSm8+nH0pwLAkZzigAKkEn7uOBxQp6A449aRpSPQUmc80APJycD9B0prEE4OOOfrSFDwetN3H0oAUMy44GfXGacDxz064FOBU\/X3qORQeQ2PrQA5WwOh+tPKoEB3DPuKiG1QMde9O809xmgBScnp054NIB3P69KYI954Y\/jUqrtGDyO1ACM+3gDd644pCd3QFevU9Kb1BIIGTj6U+Mgdx9aYCAE4JP4mn5wOopHlCjBpgYv06fSkA7dtAHX3z1pSyuTzg9uuDTSMYyMnNK6k9Bke\/WgBwYjvmg45yMZ6HIpm0e+frQoBJ6jtk007ALkk9cfWkCHBzu\/AcCgjtuVu\/I708sQRjpVIBMLgk5NIuWyQCP96gMQxJz7YpQ3BBJ\/GgBcMAfmBxx6fyoGQ2SQB+ZpgIByOv16U9cEHjGf1oAaSSSQ3HeheRjHJ704xqcdOPfpSKTnAPHY9aAAock5HsKiEQMm4xqWHG7HOKlOecgD1OOtG7GSDyaAFOGODnpj1P1ppDD5VbHbkY\/+tSNljnr60MxPcH2xQKw\/bgjI3e7Hj9KR2HOF5pi8dTT0ZVBxkmmFhFYjJZRz2x1pwKsMcDvTWx1Awc\/hQV3DGCFzkkdaQWJMKRyBnvgUwqm\/pkdsE0MzYAwCB1460pXcOAPcHj+VAhpYDowBHqc5oyXxg56Z56Uvlp6c0wgdcZPrQMHUnAzgeuOlNVMA5csfQjijcVP09aUSMOByPfmgYjJyDtUE8bumaB8rFguG+mP0pwkJUjgd+BjmkwT3yT680CFLqR159KYWHYfpQwx3ph7jNAxrS8daZ52Tjj0oIzTStBViXfgY3YpQHYEByAO3tUBI68BvpS5lI+9tz2BpE2LilQPmUlvUH+eaYXQDJTIHYmoBGxP3x9MVKpVOWBIOeBxTCxC8yo3yRgN1xjn6Co2lmYqTGNvXBHzf5\/Cp5RE7hgG29gcEj6cVFJ8xIBJ98\/5OaQWGfaGYnIw30pFlUthlCt04x1+hpGJIwcjHXLZ\/EZ5qIiZH2gZQ+nYUrhZFh1ibpIVHYAYA9SfWo\/KSM743DZ5O3IBPrzTQEAPGMdzn\/JqMoGUgEgkk85HbvQ9QsTmZtvG4kkfxAf8A66gnfeWBAyehKg4\/+vSI5j6EsBxlf8aY8u9vmXaB6YyRU6LZDK7WVtOS08UMx6fNEu0D06Gs7UPBnh\/VpEa70XSLhj0aWzhc4+pB9e1a6kKGJBTBOCTnI9abNt3k48wHB28YOPrQPU5K6+EHhSVsT+GdJmQdAdMgwPyQUsXwg8FwIPK8NaTGT1AsIQT+O2usWRhgh9vOSp4x9MU5xFJubzdjnGAWHH0FXzy7isuxyqfDzwxCcpodhE+Oq2sYP48VLD4H0ZXZY7SAZAAG1QQPyrclRmZjvLqRxuJ6\/rUeFJ\/eQBecBtx5rO7KMz\/hBLBBkRokfIG0Dr6kCo5fB1qgXdbkIe7rgH0471sIEjmyibWODheePU1LLIGGWZ26FuGXJpXuGxyF98ONFuFdZrC2l3jlXixkf596fbfDbR7Bf3cHAwNqk4x+ORXWFIyAQ5GegPTP5YqCYhhjeXUercVXNJdWBjReFbJHwkCoDxvVc4Hv\/wDWp\/8Awh65BdSV6hkXAH5it6NsSGQEE4xgjIqXdcynBIKnuoFSO7WzMO38MWqx7f3yKG6SYx9RjrUp8P2sezEZbHIkKfpnFaUkUofOWZc\/eAA\/\/XUTwlSzM8gJ5CkYOPYUJJDTuVE0mLenmRIy44ZVBOPf0qb+ybdMsFMYwOAOpq7EzJyGQgjgsD1PapxKzHLxxHHBBHH6U7CM9NJhlByScn1xj0qyuioFIVi3GQpwcVYcrKuAMHPQdqbskygUcAdzkn3p77gNaxi27Qq4A7KcUv2OM4xhieO3P+Bp3m7AVIYAngHpn8BSxqswBGNx6jvT0FqH2NSQFw3X2P8A9aporTCEscp22j+R6\/pT1iMSgA4BPQ4PNG5+gYkDqVH86iyAY9qg6sdvUYGQD9O1N+xKV5k9yQKninMbjCjPP4f0pVmUnJHB7gH+lVyoCstqRtOAxHTcQOtThAnDIBxgj\/PFG4ZAA7emKa28khWAHXDUgJDtCfMAMdwc0wxLk8Zx7cU4nBAbPbPXH5VKpTBzuHYbaBFV40VgAgPqAMAfjUTW6Ox2lo8c5wQD\/jViXb16KDnGetCSBgdqkj2GP0oGQGwDKCWHHrg5pP7NRUK\/M\/1YZq4oxwq4PGc8CkZQGHOc9M9qA1KiW\/ljKgADpxnFDKW6gnHWrM0R2kEg57Z6fWq5t0bG5Q2OoJ4zVcqAi+y+YMqVA+mTSCwAfduZvbFWl+U8IBx1HfmpDkjliAfyFRYLlNoQOAufcc0htgvQZU\/nVwAd+T0BAxilEank4U+uKLAZ5gAB2xgkevFRiFurKoGPXNaBjCjAbkn160mFG0Y5\/wBnimBnrGCwyp+XHXpmnC3G05zk\/wCelW2ic5JAwemetJ5J\/vEn6U7DKgt0xjlfbbio5LIbuvy\/jV3yvqO\/FP2DB459zzRYLmYsBGQVHoMUxsgng49a0zGoyBxnkgd6btwc87qVguUPJMg4GB61G1l3DY9Rn\/GtB8j7qZ7cUxYUJOUAJ9RRYdyrFblScEk+9K0bLyRj8KviPcOW\/MmlePjO4EH3osK5mlSrZxtJ7gUwHcejE+9X\/JXIBGRnPXvTXjG8\/NgnggUhlNbcmnG2ZMnAB+tW\/JDjBLDHt1pr24LDdn2GeKEFyqsZX2GefamGHB4BP41eNvgfLmmEbQwT5xkZOKAKqMyf3R7ilcNKQDvb2AzV8gFScL7gjg1BIgQfdx6cmgCusJxkHAHr3pTHsO4kHjsMVKCu7JkBPpjNL8p\/gPfoOKLAV2ROhxg+vFKEO0Ecc8VOtsTzhSPrwKcbRgMjjPYGiwFYwtydpP05NN8s8Egj61Y8uSP+PH4U4byu0qr80rAUyCfX8BQsPcAnHc1adSXwUCg+vNRtFtU425\/Ac07DE2rt2kq\/qB2+tBYICQtC7j1XPTkc07YeAcpkUAQ7uSSpB9CKcF6YYEHk+1SiEKTyMd6HCbcnBf6dqLAReWP4SOvQ0GIgYAP0UZFJgcHOMc\/WpN5Pr6fWiwDdqgkHrTSmOMt+fFPVS2T+GaQRspxnfntilYSQbS+QXFN2spHPPvT9vOdo4PUHpTi+FwQceuOlIRDz3APp2oxk8ggd9tSkgkYHbIycUyV8HGwk+wp2KHLsKYIK++KYy5PA3D6U0bgR8rc+3FPVdzYY9e1IRFkBgu1vc4pSxPIDfSrXkYAywHHUHNRSCPHTn1HegLkRUvwVz+OKcIQMBBk+n\/16cUwf8aaVYDnBx68UAJ5RVgW\/HvSFj7cmnAgEAHnrjFIwVmJBJ9eaBiYJ4DADuR2\/CkK\/LkfN9adgq20YU9uaFABJYAdsAdKAuRgt\/c4\/WkCg9QRzn2FTLJkABcjqCab6kLyDzg0CGBRnIIz0pwGRkkUMoOOD14z3oK7QchcfXNAxhUBcHt09acWRucZPfFIYwPQ96CABwMmgBpQMcZP8qT7OQemT2yaeDk8AfSnFieFGR09PxoERDd6DHenZI645\/DFITsA4NKMheRuHXGOlAACSOzZ7U1iF4Awfc8U8Fc4BIFDRjaTuUj2POfpQBCS\/UAH6GlKyEYZcA0gfaQgyc+3FSlW6gfQetIYiovOSB\/Sk2gcg0hRsHtkUhBBBDY9jQITGB0xnvRnd3Jpu0DK79x7HPSnrwDkZP86BjTxxn61GJCDwGJ\/lUrZAOYyM+namhQ2N2crxnFO4DTgjJAB64JoEfmDgfiTSnYWyASR3zTW2k8nk9s80k7AMMYLYUfkaa0Hpgn19qcW64YZx360xg6rhY959dx59+lICFiYmyoC44JIyBVeYiYljiTngqBnPuKmuYvk5XjOc571Dhvvbsnj7tUJnoIkRm96kHsOKhRRmpVOKpEjiMexoGcYINKWNIGJpgOxxijAXvzQTikJoEOBPXGacCV60kY5p78MKBCFziml89OaQnNOwAKAEKgjmlSPPfFNPApQM0ASjKjA5pGLY5UVGGINOVzmgQbjtHy4pcZGScVJnjpVdmINNgS7BnINO3bBjbnHeo88CnDmi4wLgn+lAkJ7UoUU4qBRqIaRnvS7cZ9KiYmnoSV55oQxxAA6\/hTTgd6Yy+5pVpCHbvQ0YJANIVBpu4g0APKE9DSYZeh4qSI9KKdgG8EAEDNKAqngYptGcUXAduIORSFsZNMJINSYyKAEBJOCKcQMe9IvSlIBApjECgHPf1oBy2M00txTh0oELmlHPT9aVVG2kUZNABsbg4xSMvr2pQcUFjigYi8GnHK1G5Ip0Z3deaBDjISOgpuST7+lO7ZoXk9KAECknninfU5pWpM80AAwOPWnZUDOajbg0lADi4PU04N2HembRijOKAHhTjgcGgJ3xikVjil3kUAIV5p2Pems5xSKTQA\/zDkZyaNx64oA609RzQMiywPPFKoB609vpTAcmgCQIB3zTGByMCjPSkB60CHc9M0Dg59aZk7zTjwM0ALjbzmmkEdCaFY5xUnU0AIshUcijIY88fSlYYFNI5FADhIoGAP1pCO2aaACelKetABhfqfrSjsB0pNgzSEc0ASFjnINIcnOOpoHFBYimAwKQec04oT1\/Kmkkk0BzjrSAdkr2FODBuSPyqEEk9TUiigAJ54FG8gc8+lTbRtzSMARyKqwFcqWOQakSMjrwaUKAeKRmJOKQBkLk4yfeg8Y96YxNPHFIBpO0cGgsSOKR0BY8mlUbScUAKcjnmgAkelKG+lGSM0AOQgKA1OyvQjjqDUBc7aXJppgSNKM4P4UhfA9hQsalhTyoPUVQDFbdzjn6UhRjjn3604cHik3HdigAZSxGOP60mNvUnI9KUudo5pNxGaAHeYMY6HvUbToST0ozk81GsCMdxXmgZOvzj\/GlZcnsPeougp460CHGMsMEimlCmc96ex2jIppcmgVxNhbHc+9HzJxk\/hSMxJphzu6mgZMZcdBmky2c8DPamxoGPcfSlxzigVhCzckk\/gKTJzyDUh6VGW\/eEdqAuOAU8Nj64ppC7sDOKHc8Uo6UANL46mk3ZNDfMeaO9Axr885FQ45qwegpp4FAxmw0mCOakbqajY\/JQO5E4z25qMMe4FOYkinRKGYg80mDFV3Zclfxp4\/ecq+3HqOKmCKqcCmOoQ4HSmSRtEwwC2QOQQetNKKw\/eKDjuOD+dJM7KSAaaWJYZpANkjjdMnPtzg\/nTFnEC7Rz3\/eHJFP+8xB7UyWNZGIYZGe9ICOe4aUDDgjtkdR+FRZLHCqx46etWRCqgkDkCmZ25x2pAR\/NHHgM6DpheMf40x1P97jpkjmny3UhXG7Ax2qMsSpzzSYxDKuORk+valRgTnaCOnHU0CFXVc5we2aTaIPljG0Z7UhiSJuYgKVJHQdqqtauh++2D61ajldlOWJ+tV7iZ1fAPGaTsNEkMmFIkVSp4GeCaSQqij5Cx6nmoUJduSelSookmcsOnAx6UrgQ7jksUYBuD\/kU1Lku24AxY4w44NWigUMRwaernavA5oC42MRQnJIweeDkH8KR4Y2HykIDzwABipkhjkwSgz7UNGqtgDgdM1QiulnscbGKqerA8flUu5ohjzDIcYBC0FFY8gUwuVPXoe9K9h3JfO8vDMQMjJ+XvQSkoDld4J474qmwMm8sxJAyDnpUsIH7v60x2sPeGdWJQqFPGcZP1+tEau20l2LDsRjP+NTiRhznJ+lNds7jgZHTimFyRCVUklSP7vU1Is690II5B6VVgmYyMOwNT53Lk9jTQiV5ywOQB14GOfrUJkjJwxAJOBnigrhM5NEqLnOMGgCxuEfTA3dAT3pRuK8qR3BPeqqnnoKlDs+3JNKwC7DtxnBznIFSISuO+OKRCducmnAkkg81YCSzrESdrEjqB3p3mB+eATTZGO8L2J6UpQAVkIUPu5BGfal2AjPfvyBTM4ce9AO5iD0pjFYBiNwyB05pytnhVKY6HsaiEYx1P509eFFAD8+hP0\/z1pjZB4BFO6CnIx\/KgRCF3knkMec5pUGM5Ix345qZ\/lAI6nrUEsjKygHgincCX5Rk7tpI6imEhScng96Yp39ealGMDgVIbDBKrcDk46jpS44OBk+9DoAFPPNKsYK1dhjgDjnr9OtIwwcDilA5HJqIkk5pJXAAvOR1zQ8hxgnPsKQE880g5Td39O1NuwBkkdMcUjZIGOD15GaQHk9qkTkUX0AYY5ODu4PtTRGX4ZvyqcsQajMhPGBioAdhVUKTn2zTSQOAoPsRShQDnuajcZOfajcBh246fjmgYx1\/ClY4apAoZeQKtagRCEk\/KRzzTPsvlsGKHd7CppFATjinHKdCaLARgHrgrj8aQHaDzkntTmYlfxpjtgEjgijYAYnOMc+tNfoGB6dMd6eSQM5NKpyTkA0gITtyCR19B0p3B68j0NOAyaCoNFgGCAEdcAnp1pTCy8BTSliF4prscgZPPWp5QE8sK\/TGefamylUHI4pEdt7c8CozIQ5pjsPBaRRtwD79qjlRg\/LZOauAAcYp7IB2osFygqKOd3J\/u06FE56Gp3GF4qN5D5QbjJ70AK86qcEZHfFQ7lByqnHWpcAtuwM4prgDt160DQ3y2ZRgZA\/z1pDE4bcUByOmM1JByM9PpQ\/J25IHtQBXMW48bRyeKCi8ZP61LJCu\/qT9TUWAOlAxVBPyqT7CkWNidpB68U9BuwT1z1qRh5cuATjPQmgQwyMmF2hiKYGOfnXGOcjtU4+c5NREnLVLJDavXcBj1P60x9uwBXL9s0v8Ge+etAgVnOc9PWqLG7SoOMkHjPSmkcZzSsSdq9s9KQHpSATyz1JH4UbNzZJ\/Op4hvJU9KJlAAIGM0iSJg2Rt5x1pwl7GMHnuc1EPm6mn8BDwOKY2hJWD9Bg9hURIY4IqdUDBe30oaNdvTH0qREe0K2dxAPHSmFQvLPkdtwqTcQPxqN2MbYB4PXNA7CcMTt4Yc8d6XB3ZBJ\/GhuhOBnFCrsfgnnrQMbIrSEnbwevFAUR8kHPfPSpNxGfcc0zcSW9qBIUvsUY7cHHJpvmbuqqcnvzTh\/EfSkxQMayfMCRt\/pSrgA8fjUixA8HJ\/Go2OQD09qAARc4Pyn+dDKQoyAMj8qTaCuOn0qLYJCwbnigB64IJAJ9WI\/rTZDjGVOfQGm5IAFPJI2\/SgQgUlQygAn+9QGwcEnnsOTQvLcjvU0qCMqF4oGMIDAYbp60w43YAVvyNAPzn8ab0AoAUIhyXAI7ZHJNN3hSeRk9qa0hOOlOT5zk8mkAOcEZ3Hd0PXFNEbk5IOO5\/rT9oDgdjTpQI8Ac896AI3hHoOOQc5qPYM7iB07VI58piq9PeoXco5x2HeiwBsVFyBgD65pjTMikA8Y445pglYz4JyMd6JVCDgdy340kBBKJ3UncuBkbcdahRmGQ6AMePkHWr+MqOTxTGUKOOKoR\/9k=\" \/>","969b3415":"**Observations:**\n\n1. Random Forest classifier is also overfitting on the training set.\n2. The F1 score metric has also reduced.\n3. Monthly_Income and Age are the most important variables.","3f7c5fa9":"**Observations:**\n\n1. The metrics for ADA boost model is close and comparable for train and test set.\n2. F1 Score is too loa.\n3. The model identifies 5.25% out of 13% true positives.","27e1241d":"### PreferredPropertyStar","3ff3eeb7":"### DurationOfPitch","221f9c06":"#### Check the scores","2ceab4ec":"### Random Forest Classifier","93c69ead":"**Observations:**\n\nThe datatype of Categorical columns is fixed now","32d1c93c":"# \"visit with us\" - travel package purchase prediction - ensemble techniques","132b23c9":"### Summary of numerical columns","01c8311a":"#### Check the scores","4385d5f3":"### Check the dataset information","52a0f6bd":"**Observations:**\n\nThe highest number of followups is 4.0 followed by 3.0. ","b54764d4":"### ProductPitched","e60bedeb":"**Observation:**\n\n1. MonthlyIncome is right-skewd. \n2. However, we see that the majority of customers are between income bracket 20K dollars and 30K dollars. \n3. We also see two outliers in the low end and on the highest end. \n4. There are several outliers after the approx 35K dollars income level.","2c84cebb":"### Bagging Classifier with Logistic_Regression","3a8dae74":"**Observations:**\n\nOnly 29.1% of customers have a passport","d045faef":"#### Draw the confusion matrix","38401f9a":"**Observations:**\n\n1. The model with weighted decision tree hasn\"t improved the metrics.\n2. The true positive\"s identified are even lesser.","dfafb5df":"## Bivariate Analysis","1194a536":"#### Check the scores","e414501f":"### PreferredPropertyStar","1a067bc3":"### Hypertuned Gradient Boost Classifier","dfc01154":"### PitchSatisfactionScore VS ProdTaken","39452a8f":"**Observations:**\n\n1. The metric are comparable between training and testing set.\n2. F1 Score is better than default ADA Boost.\n3. Model is able to identify 6.95% out of 13% true positives.","12f696fa":"#### Draw the confusion matrix","c581e99a":"## Understand the data","8654e935":"## Import required libraries","2f1397b0":"#### Draw the confusion matrix","30fa3c71":"## Context:\n\n* **Visit with us** a tourism company, wants to build a viable business model that helps you to understand the existing ways of doing the business and how to change the ways for the benefit of the tourism sector. \n\n* One of the ways to expand the customer base is to introduce a new offering of packages.\n\n* Currently, there are 5 types of packages the company is offering - Basic, Standard, Deluxe, Super Deluxe and King. Looking at the data of the last year, we observed that 18% of the customers purchased the packages.\n\n* However, the marketing cost was quite high because customers were contacted at random without looking at the available information.\n\n* The company is now planning to launch a new product i.e. **Wellness Tourism Package**. Wellness Tourism is defined as Travel that allows the traveler to maintain, enhance or kick-start a healthy lifestyle, and support or increase one's sense of well-being.\n\n## Objective:\n\nTo harness the available data of existing and potential customers to make the marketing expenditure more efficient and to predict which customer is more likely to purchase the newly introduced travel package.\n\n## Key questions to be answered:\n\n1. What are the key variables in identifying potential customers for the travel packages?\n2. What are the different characteristics of the existing customers?\n3. What is the most important metric for the model and possible improvements using tuning?\n\n## Data Dictionary\n\n### Customer details:\n1. CustomerID: Unique customer ID\n2. ProdTaken: Whether the customer has purchased a package or not (0: No, 1: Yes)\n3. Age: Age of customer\n4. TypeofContact: How customer was contacted (Company Invited or Self Inquiry)\n5. CityTier: City tier depends on the development of a city, population, facilities, and living standards. The categories are ordered i.e. Tier 1 > Tier 2 > Tier 3\n6. Occupation: Occupation of customer\n7. Gender: Gender of customer\n8. NumberOfPersonVisiting: Total number of persons planning to take the trip with the customer\n9. PreferredPropertyStar: Preferred hotel property rating by customer\n10. MaritalStatus: Marital status of customer\n11. NumberOfTrips: Average number of trips in a year by customer\n12. Passport: The customer has a passport or not (0: No, 1: Yes)\n13. OwnCar: Whether the customers own a car or not (0: No, 1: Yes)\n14. NumberOfChildrenVisiting: Total number of children with age less than 5 planning to take the trip with the customer\n15. Designation: Designation of the customer in the current organization\n16. MonthlyIncome: Gross monthly income of the customer\n\n### Customer interaction data: \n1. PitchSatisfactionScore: Sales pitch satisfaction score\n2. ProductPitched: Product pitched by the salesperson\n3. NumberOfFollowups: Total number of follow-ups has been done by the salesperson after the sales pitch\n4. DurationOfPitch: Duration of the pitch by a salesperson to the customer","c2e217c3":"#### Draw the confusion matrix","8d8c9b58":"### Treat Age and MonthlyIncome for missing values","91bef093":"### Check the shape of data","aa257201":"**Observations:**\n\nThe error in data is resolved now","71251f2a":"## Data verification","26f62abb":"### Treat the error in Gender column","24abf1bc":"### NumberOfPersonVisiting","92bb9481":"#### Create dummy variables for the categorical columns","afaf0794":"**Observations:**\n\n1. Only 30.2% of customers rated the Sales Pitch with a score of 3. \n2. Even though 18.7% customers rated at 4.\n3. 19.8% rated a pitch score of 5.\n4. we also see that 19.3% rated the Sales pitch score at 1. \n5. This shows a need for improvement in this area.","b3a2b6bd":"### MaritalStatus","c9f779aa":"### ProductPitched VS ProdTaken","13cd2eea":"### Verify the missing value treatment","638ce507":"### Check the sample data","970a3e38":"**Observations:**\n\n1. We see that the Train and Test Accuracy and F1Score Performance has increased after tuning compared to the previous models.\n2. The Model is over-fitting as the difference between  Train and Test scores are very high.\n3. The Model seems to identify all non-buyers better as the False Positive value is low.","437aa558":"**Observations:**\n\n1. TypeofContact, Occupation, Gender, ProductPitched, MaritalStatus, Designation are object type columns but contain categorical information. We will convert these columns to Category type.\n2. PreferredPropertyStar, NumberOfChildrenVisiting, NumberOfPersonVisiting, PitchSatisfactionScore, NumberOfFollowups, OwnCar, Passport, CityTier and ProdTaken are numerical columns but contain categorical information. We will covert these columns to Category type.","aeafcc43":"### NumberOfChildrenVisiting","46c061ba":"### Gradient Boost with ADA Boost Classifier","07077486":"#### Draw the confusion matrix","a9ab36c2":"### MonthlyIncome","0751d7e4":"#### Check the scores","be0cd1f1":"**Observations:**\n\n1. Basic(37.7%) and Deluxe(35.4%) are the most popular travel packages. \n2. The next slightly popular one is the Standard Travel package at 15.2%.","a84d970e":"#### Draw the confusion matrix","45d22a99":"### Summary of categorical columns","e28131c0":"## Load the dataset","c5cc3591":"### Occupation VS ProdTaken","66ef0281":"#### Check the scores","5cedba56":"**Observations:**\n\nAround 43.9% of customers have at least one child under age Five are planning to accompany them in the travels.","916e6467":"#### Draw the confusion matrix","54a8e149":"## Model Building\n\n### Model Evaluation Criterion\n\n**Model can make two kinds of wrong predictions:**\n1. Predicting that the customer will purchase a Travel Package when they don\"t. - False Positive.\n2. Predicting that the customer will not purchase a Travel Package when they do. - False Negative.\n\n**The Travel company\"s objectives are:**\n1. Make Marketing Expenditure more efficient and focused on the customers that would actually purchase the product.\n2. Predict and Identify all potential customers who will purchase the newly introduced travel package.\n\n**Metric for Optimization:**\n\nFor the above objectives, its important that both False positive and False negative values are low. Hence we would want the F1-Score to be maximized. The greater the F1-Score, greater the chances of predicting both classes correctly.\n\n**We will build following models, tune them and compare the outcome of all the models:**\n1. Decision Tree model.\n2. Bagging Classifier.\n3. Random Forest Classifier.\n4. ADABoost.\n5. GradientBoost.\n6. XG Boost.\n7. Stacking Classifier.","3b21ddf4":"**Observations:**\n\nExecutive (37.7%) and Manager(35.4%) are the highest Designations of the customers in the dataset.","3c97b09c":"### ProdTaken - Target Variable","ad40f6b4":"### CityTier","daf512d5":"### TypeofContact VS ProdTaken","88e64fbb":"### Gender","0172a463":"**Observations:**\n\nAll the null values are treated now","75a26bd9":"**Observations:**\n\n1. 49.1% of customers plan to take at least 3 persons with them during trip. \n2. Around 29% customers want to take 2 people.\n3. 21% customers want to take 4 additional persons with them during their travel.","3cae9703":"#### Check the scores","4a20f5bc":"#### Draw the confusion matrix","ad820c25":"**Observations:**\n\n1. The hypertuning has improved the scores on ADA Boost.\n2. Model is able to identify 8.59% of true positives.","b7e5b76a":"**Observations:**\n\nAge variable is almost normally distributed with no outliers. we see that most customers are in the age brackets 30- 45 yrs.","5edc7a6b":"### Stacking Classifier\n\nWe can Random forest classifier, Gradient boost classifier and Decision Tree. These three models have least comparable overfitting issue and are good performance metrics.","ee83eb2b":"### Comparision of Numerical Variables with ProdTaken to understand the relation","57ce73c1":"### Decision Tree Classifier","a000f114":"### NumberOfTrips","f3664403":"**Observations:**\n\nWe see that the percentage of customers who purchased a product is fairly same across all categories of variable NumberOfChildrenVisiting.","3c046715":"#### Check the scores","ec571d37":"**Observations:**\n\n1. The model is over fitting on training set.\n2. F1 Score has improved over earlier models.\n3. The model is able to identify 10.70% true positives.","90acfe8e":"### Age","64733bb8":"### Bagging Classifier","fb712047":"### PitchSatisfactionScore","1289a4ea":"**Observations:**\n\n1. The model tends to over fit the training set.\n2. F1 Score for testing set is 0.60.\n3. Age and MonthlyIncome are most important variables.\n4. It is difficult to read and understand the tree when drawn.\n5. Since the model over fits the training set, we will use GridSearchCV to find the optimum parameters values and hypertine the Decistion Tree Classifier","1a234421":"### Check the missing values","643fdd11":"**Observations:**\n\n1. F1 score is reduced to 0.54.\n2. The model is not overfitting on testing set.\n3. Accuracy of the model is 0.85.","efaae0a9":"### Lets check the percentage of Outliers with IQR","c811df1c":"### Check the data for category columns"}}