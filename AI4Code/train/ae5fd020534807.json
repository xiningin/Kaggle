{"cell_type":{"6e6ec0f2":"code","b337016a":"code","a1188f3f":"code","539800a4":"code","ee12cd93":"code","371ba457":"code","e1b95b30":"code","ccb9d121":"code","f43deee7":"code","2870cfc4":"code","25573f6d":"code","31a93d90":"code","83dc76c7":"code","31555041":"code","60ee8c3f":"code","a9e2ad69":"code","bc76c41d":"code","8114c60b":"code","7a788c93":"code","a31ac5ac":"code","622eae4e":"code","6118ac56":"code","d5779348":"code","c8deedac":"code","a2278818":"code","7672ef58":"code","673043e5":"code","724b21e3":"code","5bbf17f3":"code","ce9f7bba":"code","b631ff31":"code","0f9bf6c3":"code","14d30ee7":"code","4521efd7":"code","8dbcdfea":"markdown","c963bdf5":"markdown","2b9d566a":"markdown","f51681fc":"markdown","b27a7dad":"markdown","fe08c0bd":"markdown","c4819259":"markdown","fa3d6f0f":"markdown","78ad49a0":"markdown","79fb1a53":"markdown","c2845851":"markdown","89d6b06b":"markdown","ba7a0df2":"markdown","5e1c32c4":"markdown","af6100a1":"markdown","834f636b":"markdown","a1a5e3c3":"markdown"},"source":{"6e6ec0f2":"## \u5bfc\u5165\u5e93 \nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nimport sklearn.metrics as metrics\nimport math\nfrom scipy.stats import norm, skew\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n","b337016a":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\n","a1188f3f":"train.shape , test.shape ","539800a4":"train.head()","ee12cd93":"train.info()","371ba457":"print(train['SalePrice'].describe())","e1b95b30":" sns.distplot(train['SalePrice'])\n","ccb9d121":"print(\"Skewness: %f\" % train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % train['SalePrice'].kurt())\n","f43deee7":"train['SalePrice'] = np.log1p(train['SalePrice'])\nsns.distplot(train['SalePrice'], fit=norm);\n\n","2870cfc4":"corrmat = train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);\n","25573f6d":"corr = train.corr()\nhighest_corr_features = corr.index[abs(corr[\"SalePrice\"])>0.5]\nplt.figure(figsize=(10,10))\ng = sns.heatmap(train[highest_corr_features].corr(),annot=True,cmap=\"RdBu_r\")\n","31a93d90":"corr[\"SalePrice\"].sort_values(ascending=False)\n","83dc76c7":"cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train[cols])\n","31555041":"train = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)\ntrain = train.drop(train[(train['TotalBsmtSF']>4000)&(train['SalePrice']<300000)].index)\n","60ee8c3f":"y_train = train['SalePrice']\ntest_id = test['Id']\nall_data = pd.concat([train, test], axis=0, sort=False)\nall_data = all_data.drop(['Id', 'SalePrice'], axis=1)\n","a9e2ad69":"Total = all_data.isnull().sum().sort_values(ascending=False)\npercent = (all_data.isnull().sum() \/ all_data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([Total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(25)\n","bc76c41d":"all_data.drop((missing_data[missing_data['Total'] > 5]).index, axis=1, inplace=True)","8114c60b":"total = all_data.isnull().sum().sort_values(ascending=False)\ntotal.head(19)","7a788c93":"# \u6570\u503c\u578b\u6570\u636e\nnumeric_missed = ['BsmtFinSF1',\n                  'BsmtFinSF2',\n                  'BsmtUnfSF',\n                  'TotalBsmtSF',\n                  'BsmtFullBath',\n                  'BsmtHalfBath',\n                  'GarageArea',\n                  'GarageCars']\n\nfor feature in numeric_missed:\n    all_data[feature] = all_data[feature].fillna(0)\n","a31ac5ac":"#\u7c7b\u522b\u578b\u6570\u636e\ncategorical_missed = ['Exterior1st',\n                  'Exterior2nd',\n                  'SaleType',\n                  'MSZoning',\n                   'Electrical',\n                     'KitchenQual']\n\nfor feature in categorical_missed:\n    all_data[feature] = all_data[feature].fillna(all_data[feature].mode()[0])\n","622eae4e":"all_data['Functional'] = all_data['Functional'].fillna('Typ')\n","6118ac56":"all_data.drop(['Utilities','Street'], axis=1, inplace=True\uff09","d5779348":"all_data.isnull().sum().max() #\u518d\u6b21\u786e\u8ba4\n","c8deedac":"\nnumeric_feats = all_data.dtypes[all_data.dtypes != 'object'].index\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x)).sort_values(ascending=False)\nhigh_skew = skewed_feats[abs(skewed_feats) > 0.5]\nhigh_skew\n","a2278818":"for feature in high_skew.index:\n    all_data[feature] = np.log1p(all_data[feature])\n","7672ef58":"all_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\n","673043e5":"all_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","724b21e3":"from sklearn.preprocessing import LabelEncoder\ncols = ( 'ExterQual', 'ExterCond','HeatingQC', 'KitchenQual', 'Functional', 'LandSlope',\n        'LotShape', 'PavedDrive', 'CentralAir', 'MSSubClass', 'OverallCond', 'YrSold', 'MoSold')\n# process columns, apply LabelEncoder to categorical features\nfor col in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[col].values)) \n    all_data[col] = lbl.transform(list(all_data[col].values))\n\n# shape        \nprint('Shape all_data: {}'.format(all_data.shape))","5bbf17f3":"all_data = pd.get_dummies(all_data)\nall_data.head()","ce9f7bba":"x_train =all_data[:len(y_train)]\nx_test = all_data[len(y_train):]\n","b631ff31":"x_test.shape , x_train.shape","0f9bf6c3":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(x_train,y_train)\ny_pred = model.predict(x_test)","14d30ee7":"y_predict = np.floor(np.expm1(model.predict(x_test)))\ny_predict","4521efd7":"sub = pd.DataFrame()\nsub['Id'] = test_id\nsub['SalePrice'] = y_predict\nsub.to_csv('mysubmission.csv',index=False)","8dbcdfea":"## 3.\u4fee\u6b63\u504f\u5ea6","c963bdf5":"## 6.\u67e5\u627e\u7f3a\u5931\u503c","2b9d566a":"#### \u52a0\u5165\u65b0\u7684\u7279\u5f81","f51681fc":"#### \u53d6\u76f8\u5173\u6027\u8f83\u9ad8\u7684\u7ed8\u56fe","b27a7dad":"#### \u8c03\u6574\u5176\u4ed6\u7279\u5f81\u4e2d\u7684\u504f\u5ea6\n","fe08c0bd":"#### \u53d1\u73b0\u5b58\u5728\u4e00\u4e9b\u7f3a\u5931\u503c ","c4819259":"## 5.\u5220\u53bb\u79bb\u7fa4\u503c","fa3d6f0f":"## 8.\u7279\u5f81\u5de5\u7a0b","78ad49a0":"#### \u89c2\u5bdfSalePrice\u8fd9\u4e00\u5217\u7684\u7279\u6027","79fb1a53":"## 2.\u67e5\u770b\u6570\u636e","c2845851":"## 4.\u7ed8\u5236heatmap\u5e76\u89c2\u5bdf","89d6b06b":"## 9.\u8f6c\u6362\u7c7b\u522b\u578b\u6570\u636e","ba7a0df2":"## 7.\u586b\u5145\u7f3a\u5931\u503c","5e1c32c4":"## 1.\u5bfc\u5165\u6570\u636e","af6100a1":"## 12.\u4fdd\u5b58\u8f93\u51fa\u7ed3\u679c","834f636b":"## 10.\u5206\u5272\u6570\u636e\u96c6","a1a5e3c3":"## 11.\u5efa\u7acb\u6a21\u578b"}}