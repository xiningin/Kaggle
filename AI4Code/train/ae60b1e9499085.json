{"cell_type":{"b318d9a8":"code","bafaf299":"code","ab94eb5c":"code","c0e68d37":"code","5512c8d3":"code","7c2892cd":"code","39798c6f":"code","620c2d27":"code","2bdb82f4":"code","b673e871":"code","5b3e4518":"code","f3c949a3":"code","d2e0d5b7":"code","37b93f7c":"code","584cebd0":"code","4bf7f407":"markdown","f7454678":"markdown","6c3f7dc0":"markdown","fbee7e6c":"markdown","4d196d93":"markdown","5a115d25":"markdown","1696f17d":"markdown","bb3de57f":"markdown","9ef58d28":"markdown","a0585ee0":"markdown","a054d438":"markdown","2b698bb7":"markdown","b4defc29":"markdown","943ba29c":"markdown","e0c9b2c6":"markdown","04bc35fc":"markdown","07afc5b6":"markdown","8c72bd85":"markdown","30945390":"markdown"},"source":{"b318d9a8":"import pandas as pd\nimport numpy as np\nimport ipywidgets\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.io as pio\n\nfrom plotly.subplots import make_subplots\nfrom ipywidgets import widgets\nfrom ipywidgets import interact\nfrom plotly.offline import init_notebook_mode, iplot\nfrom IPython.display import display\ninit_notebook_mode(connected=True)\n\nhousing_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\n\nmedian_price = 250000 #median price of a home in the US\nnum_features = ['LotArea', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'GrLivArea', 'GarageArea', 'SalePrice']\ncat_features = ['OverallQual', 'OverallCond', 'Neighborhood', 'TotRmsAbvGrd', 'BedroomAbvGr']\n\nhousing_df = housing_data.loc[:, num_features + cat_features]\n\nhousing_df = housing_df.loc[~((housing_df['GrLivArea'] > 4000) & (housing_df['SalePrice'] < median_price))]\nhousing_df = housing_df.loc[~((housing_df['LotArea'] > 150000) & (housing_df['SalePrice'] < median_price))]","bafaf299":"fig = go.Figure()\n\nfig.add_trace(\n    go.Histogram(\n        x= housing_df['SalePrice'].values\n    )\n)\n\nfig.update_layout(\n    title=dict(\n        text='Distribution of Sales Price',\n        x=0.5,\n        yanchor='top',\n        xanchor='center'),\n    xaxis_title='Sale Price'\n)\n\niplot(fig)","ab94eb5c":"housing_df['SalePrice'].describe()","c0e68d37":"bins = [0, 100000, 200000, 300000, 400000, 500000, 600000, 700000, np.inf]\nbin_labels = ['<100k', '100-200k', '200-300k', '300-400k', '400-500k', '500-600k', '600-700k', '>700k']\n\nbins_u250 = [0, median_price, np.inf]\nbin_labels_u250 = ['<250k', '>250k']\n\nbin_df = pd.cut(housing_df['SalePrice'], bins, labels=bin_labels).value_counts().sort_index().reset_index()\nbin_df.columns = ['SalePrice', 'Count']\n\nbin_df_u250 = pd.cut(housing_df['SalePrice'], bins_u250, labels=bin_labels_u250).value_counts().sort_index().reset_index()\nbin_df_u250.columns = ['SalePrice', 'Count']\n\nfig = make_subplots(1, 2, subplot_titles=['Sale Price', '<250k or >250k'])\n\nfig.add_trace(\n    go.Bar(\n        x=bin_df['Count'],\n        y=bin_df['SalePrice'],\n        orientation='h',\n        marker=dict(\n            color='rgba(100, 172, 232, 0.6)',\n            line=dict(\n                color='rgba(0, 76, 138, 1.0)',\n                width=1\n            )\n        )\n    ),\n    col=1,\n    row=1\n)\n\nfig.add_trace(\n    go.Bar(\n        x=bin_df_u250['Count'],\n        y=bin_df_u250['SalePrice'],\n        orientation='h',\n        marker=dict(\n            color=['rgba(165, 236, 113, 0.6)', 'rgba(243, 119, 114, 0.6)'],\n            line=dict(\n                color=['rgba(77, 181, 0, 1.0)', 'rgba(156, 7, 0, 1.0)'],\n                width=1\n            )\n        )\n    ),\n    col=2,\n    row=1\n)\n\nfig.update_layout(showlegend=False)\n\niplot(fig)","5512c8d3":"qual_df = housing_df[['OverallQual', 'SalePrice']]\nqual_df.loc[qual_df['OverallQual'] < 5, 'OverallQual'] = '<5'\n\nx_box = ['<5', 5, 6, 7, 8, 9, 10]\nyqual_box = []\n\nbox_colors = [px.colors.diverging.RdYlBu[0], px.colors.diverging.RdYlBu[2], px.colors.diverging.RdYlBu[4], px.colors.diverging.RdYlGn[7], px.colors.diverging.curl[3], px.colors.diverging.RdYlBu[8], px.colors.diverging.RdYlBu[10]]\n\nrating_color_mapping = dict(zip(x_box, box_colors))\n\nfor qual_rating in x_box:\n    y_values = qual_df.loc[qual_df['OverallQual'] == qual_rating, 'SalePrice'].values\n    yqual_box.append(y_values)\n\nfig = go.Figure()\n\nfor xd, yd, col in zip(x_box, yqual_box, box_colors):\n    fig.add_trace(\n        go.Box(\n            y=yd,\n            name=xd,\n            marker=dict(\n                color=col\n            )\n        )\n    )\n\narrow_annotation=dict(\n        x=1,\n        y=250000,\n        xref=\"paper\",\n        yref=\"y\",\n        text=\"Median US House Price\",\n        showarrow=True,\n        font=dict(\n            size=10,\n            color=\"black\"\n            ),\n        align=\"center\",\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax=0,\n        ay=35,\n        bordercolor=\"black\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"#ffffff\",\n        opacity=0.8\n        )\n\nfig.update_layout(\n    title=dict(\n        text='Distribution of Sales Price by Quality',\n        x=0.5,\n        yanchor='top',\n        xanchor='center'\n        ),\n    xaxis=dict(\n        title='House Quality Rating', \n        type='category'\n        ),\n    yaxis=dict(\n        tick0=0,\n        dtick=100000\n        ),\n        shapes=[dict(\n            xref= 'paper', \n            x0= 0, \n            x1= 1, \n            yref= 'y', \n            y0= 250000, \n            y1= 250000, \n            line=dict(\n                color=\"Red\", \n                width=1, \n                dash=\"dot\")\n            )\n        ],\n    annotations=[arrow_annotation]\n)\n\niplot(fig)","7c2892cd":"qual_u250_group = qual_df.loc[qual_df['SalePrice'] <= median_price, 'OverallQual'].value_counts().reindex(x_box).reset_index().fillna(0)\nqual_o250_group = qual_df.loc[qual_df['SalePrice'] > median_price, 'OverallQual'].value_counts().reindex(x_box).reset_index().fillna(0)\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Bar(\n        x=qual_u250_group['index'],\n        y=qual_u250_group['OverallQual'],\n        name='<250k',\n        marker=dict(\n            color='rgba(165, 236, 113, 0.6)', \n            line=dict(\n                color='rgba(77, 181, 0, 1.0)',\n                width=1\n            )\n        )\n    )\n)\n\nfig.add_trace(\n    go.Bar(\n        x=qual_o250_group['index'],\n        y=qual_o250_group['OverallQual'],\n        name='>250k',\n        marker=dict(\n            color='rgba(243, 119, 114, 0.6)', \n            line=dict(\n                color='rgba(156, 7, 0, 1.0)', \n                width=1\n            )\n        )\n    )\n)\n\nfig.update_layout(title=dict(\n    text='Overall Quality Above \/ Below Median US House Price',\n    x=0.5),\n    xaxis_title='Overall Quality',\n    barmode='group')\n\nfig.update_xaxes(type='category')\n\niplot(fig)\n","39798c6f":"cond_df = housing_df[['OverallCond', 'SalePrice']]\ncond_df.loc[cond_df['OverallCond'] < 5, 'OverallCond'] = '<5'\n\nx_box = ['<5', 5, 6, 7, 8, 9, 10]\nycond_box = []\n\nfor qual_rating in x_box:\n    y_values = cond_df.loc[cond_df['OverallCond'] == qual_rating, 'SalePrice'].values\n    ycond_box.append(y_values)\n\nfig = go.Figure()\n\nfor xd, yd, col in zip(x_box, ycond_box, box_colors):\n    fig.add_trace(\n        go.Box(\n            y=yd,\n            name=xd,\n            marker=dict(\n                color=col\n            )\n        )\n    )\n\narrow_annotation=dict(\n        x=1,\n        y=250000,\n        xref=\"paper\",\n        yref=\"y\",\n        text=\"Median US House Price\",\n        showarrow=True,\n        font=dict(\n            size=10,\n            color=\"black\"\n            ),\n        align=\"center\",\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax=0,\n        ay=-35,\n        bordercolor=\"black\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"#ffffff\",\n        opacity=0.8\n        )\n\nfig.update_layout(\n    title=dict(\n        text='Distribution of Sales Price by Condition',\n        x=0.5,\n        yanchor='top',\n        xanchor='center'\n        ),\n    xaxis=dict(\n        title='House Condition Rating', \n        type='category'\n        ),\n    yaxis=dict(\n        tick0=0,\n        dtick=100000\n        ),\n        shapes=[dict(\n            xref= 'paper', \n            x0= 0, \n            x1= 1, \n            yref= 'y', \n            y0= 250000, \n            y1= 250000, \n            line=dict(\n                color=\"Red\", \n                width=1, \n                dash=\"dot\")\n            )\n        ],\n    annotations=[arrow_annotation]\n)\n\niplot(fig)","620c2d27":"cond_u250_group = cond_df.loc[cond_df['SalePrice'] <= median_price, 'OverallCond'].value_counts().reindex(x_box).reset_index().fillna(0)\ncond_o250_group = cond_df.loc[cond_df['SalePrice'] > median_price, 'OverallCond'].value_counts().reindex(x_box).reset_index().fillna(0)\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Bar(\n        x=cond_u250_group['index'],\n        y=cond_u250_group['OverallCond'],\n        name='<250k',\n        marker=dict(\n            color='rgba(165, 236, 113, 0.6)', \n            line=dict(\n                color='rgba(77, 181, 0, 1.0)', \n                width=1\n            )\n        )\n    )\n)\n\nfig.add_trace(\n    go.Bar(\n        x=cond_o250_group['index'],\n        y=cond_o250_group['OverallCond'],\n        name='>250k',\n        marker=dict(\n            color='rgba(243, 119, 114, 0.6)', \n            line=dict(\n                color='rgba(156, 7, 0, 1.0)', \n                width=1\n            )\n        )\n    )\n)\n\nfig.update_layout(title=dict(\n    text='Overall Condition Above \/ Below Median US House Price',\n    x=0.5),\n    xaxis_title='Overall Condition',\n    barmode='group')\n\nfig.update_xaxes(type='category')\n\niplot(fig)","2bdb82f4":"house_size_df = housing_df[['TotRmsAbvGrd', 'BedroomAbvGr', 'SalePrice']]\nhouse_size_df = house_size_df.loc[house_size_df['SalePrice'] <= median_price]\nhouse_size_df['Counter'] = 1\n\ntotal_bedrooms = [x for x in range(0, 7)]\ntotal_rooms = [x for x in range(1, 13)]\n\nheatmap_df = pd.DataFrame(index=total_bedrooms, columns=total_rooms)\n\nfor i in range(len(total_bedrooms)):\n    for j in range(len(total_rooms)):\n        heatmap_df.loc[heatmap_df.index==i, j + 1] = len(house_size_df.loc[(house_size_df['BedroomAbvGr'] == i) & (house_size_df['TotRmsAbvGrd'] == j)])\n\nheatmap_df = heatmap_df.fillna(0)\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Heatmap(\n        z=heatmap_df.values, \n        x=list(heatmap_df.columns), \n        y=list(heatmap_df.index), \n        colorscale='Burg', \n        showscale=True,\n        xgap=1,\n        ygap=1\n    )\n)\n\nfig.update_xaxes(title='Total Rooms', type='category')\nfig.update_yaxes(title='Total Bedrooms', type='category')\nfig.update_layout(title=dict(\n    text='Bedrooms to Rooms Ratio for Houses <250k',\n    x=0.5)\n    )\n\niplot(fig)","b673e871":"neighborhood_df = housing_df[['Neighborhood', 'OverallQual', 'SalePrice']]\navg_quality = neighborhood_df.groupby(['Neighborhood'])['OverallQual'].mean().sort_values(ascending=False).reset_index()\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Bar(\n        x=avg_quality['Neighborhood'],\n        y=avg_quality['OverallQual']\n    )\n)\n\nfig.update_layout(\n    title=dict(\n        text='Average Quality by Neighborhood',\n        x=0.5),\n        xaxis_title='Neighborhood',\n        yaxis_title='Average Quality'\n)\n\niplot(fig)","5b3e4518":"top_10_neighborhoods = list(avg_quality['Neighborhood'][:10])\nneighborhood_top10 = neighborhood_df.loc[neighborhood_df['Neighborhood'].isin(top_10_neighborhoods)]\n\nbullet_df = neighborhood_top10.groupby(['Neighborhood'])['OverallQual'].mean().sort_values(ascending=False).reset_index()\n\nbullet_y = bullet_df['Neighborhood'].values\nbullet_x = bullet_df['OverallQual'].values\n\n#pos_y was coded manually after lots of fiddling around with the positions of the indicators on the graph\npos_y = [[0.84, 0.90], [0.75, 0.82], [0.66, 0.72], [0.57, 0.63], [0.48, 0.54], [0.39, 0.45], [0.30, 0.36], [0.21, 0.27], [0.12, 0.18], [0.03, 0.09]]\n\nstep_names = ['Poor', 'Average', 'Good', 'Excellent']\n\nsteps = [{'range': [0, 4], 'color': px.colors.sequential.Burg[0]},\n        {'range': [4, 6], 'color': px.colors.sequential.Burg[1]},\n        {'range': [6, 8], 'color': px.colors.sequential.Burg[2]},\n        {'range': [8, 10], 'color': px.colors.sequential.Burg[3]}]\n\n#remove ticklabels from the graphs\ngauge = {'shape' : 'bullet',\n        'axis' : {'range' : [None, 10], 'ticks' : \"\", 'showticklabels' : False},\n        'steps' : steps,\n        'bar' : {'color' : px.colors.sequential.Burg[5]}\n        }\n\nfig = go.Figure()\n\nfor i in range(len(top_10_neighborhoods)):\n    fig.add_trace(\n        go.Indicator(\n            value = bullet_x[i],\n            domain = {'x': [0.1, 1], 'y': pos_y[i]},\n            title = {'text' : bullet_y[i], 'font' : {'size' : 10}},\n            mode = 'gauge',\n            gauge = gauge\n            )\n)\n\n#update the tick labels for the last trace so it shows the xaxis labels 1-10\nfig.update_traces(gauge = {\n            'shape' : 'bullet',\n            'axis' : {'range' : [None, 10], 'dtick' : 1, 'showticklabels' : True},\n            'steps' : steps,\n            'bar' : {'color' : px.colors.sequential.Burg[5]}},\n            selector=dict(value = bullet_x[-1])\n)\n\nfig.update_layout(title= {'text' : 'Quality Rating for Top 10 Neighborhoods',\n                            'x' : 0.5,\n                            'y' : 0.8}, \n                            xaxis_title='Quality Rating 1-10', \n                            yaxis_title='Neighborhood')\n\n#custom legend\nfor i in range(len(steps)):\n    fig.add_trace(go.Scatter(x=[None], y=[None], mode='lines',\n                            marker=dict(size=0, color=px.colors.sequential.Burg[i]), \n                            showlegend=True, name=step_names[i]\n                        )\n    )\n\nfig.update_layout(plot_bgcolor='white', xaxis = {'showticklabels' : False}, yaxis = {'showticklabels' : False}, legend_title='<b>Quality Rating<\/b>')\n\niplot(fig)","f3c949a3":"neighborhoods_dist = top_10_neighborhoods[::-1]\ndistplot_df = neighborhood_df[['Neighborhood', 'SalePrice']]\n\ncolours = px.colors.qualitative.Pastel[:10]\nneighborhood_colour_mapping = dict(zip(neighborhoods_dist, colours))\n\nannotations = []\n#these are the neighborhoods and their ratings on the left of the distplot\nannotation_pos = [0.97, 0.88, 0.78, 0.66, 0.56, 0.45, 0.32, 0.22, 0.12, 0.02]\n\nfig = make_subplots(10, 1, shared_xaxes=True)\n\nfor i in range(len(neighborhoods_dist)):\n    #plot distplot\n    x = [distplot_df.loc[distplot_df['Neighborhood'].isin([neighborhoods_dist[i]]), 'SalePrice'].values]\n    fig_ff = ff.create_distplot(x, [neighborhoods_dist[i]], show_hist=False, show_rug=False)\n    \n    fig.add_trace(\n        go.Scatter(\n            fig_ff['data'][0], \n            marker_color=neighborhood_colour_mapping[neighborhoods_dist[i]]\n        ),\n        col=1,\n        row=i+1\n    )\n\n    #create yaxis labels as annotation\n    rating = str(round(avg_quality.loc[avg_quality['Neighborhood'] == neighborhoods_dist[i], 'OverallQual'].item(), 2))\n    text = neighborhoods_dist[i] + ' - <b>' + rating + '<\/b>'\n\n    annotation=dict(\n                x=0.1,\n                y=annotation_pos[i],\n                showarrow=False,\n                text=text,\n                xref=\"paper\",\n                yref=\"paper\"\n            )\n    annotations.append(annotation)\n\n#add arrow annotation\narrow_annotaion =dict(\n        x=250000,\n        y=1,\n        xref=\"x\",\n        yref=\"paper\",\n        text=\"Median US House Price\",\n        showarrow=True,\n        font=dict(\n            size=10,\n            color=\"black\"\n            ),\n        align=\"center\",\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax=100,\n        ay=5,\n        bordercolor=\"black\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"#ffffff\",\n        opacity=0.8\n        )\nannotations.append(arrow_annotaion)\n\nfig.update_yaxes(showticklabels=False)\nfig.update_xaxes(domain=[0.3, 1], tick0=0, dtick=100000)\nfig.update_layout(title={'text' : 'Distribution of House Prices by Neighborhood ranked by OverallQual',\n                        'x' : 0.5},\n                  showlegend=False, plot_bgcolor='white',\n                  annotations=annotations, \n                  #add red line at 250k\n                  shapes=[dict(yref= 'paper', y0= 0, y1= 1, xref= 'x', x0= 250000, x1= 250000, line=dict(\n                    color=\"Red\",\n                    width=4,\n                    dash=\"dot\"))])\n\niplot(fig)","d2e0d5b7":"interactive_df = housing_df[['Neighborhood', 'GrLivArea', 'GarageArea', 'LotArea', 'TotalBsmtSF', 'TotRmsAbvGrd', 'BedroomAbvGr', 'OverallQual', 'SalePrice']]\ninteractive_df.loc[interactive_df['OverallQual'] < 5, 'OverallQual'] = '<5'\ninteractive_u250 = interactive_df.loc[interactive_df['SalePrice'] <= median_price]\n\nplot_df = interactive_u250.loc[interactive_u250['Neighborhood'].isin([top_10_neighborhoods[0]])]\nhouse_num_df = interactive_u250.groupby(['Neighborhood'])['SalePrice'].count().reset_index()\n\nint_bins = [0, 50000, 100000, 150000, 200000, np.inf]\nint_bin_labels = ['<50k', '50-100k', '100-150k', '150-200k', '200-250k']\n\nsubplot_titles = ['House Prices', 'GrLivArea', 'TotalBsmtSF', 'Bedrooms',  'GarageArea', 'LotArea']\narea_plots = ['GrLivArea', 'TotalBsmtSF', 'GarageArea', 'LotArea']\narea_plot_cols = [2, 3, 2, 3]\narea_plot_rows = [1, 1, 2, 2]\n\n#create base chart\nint_fig = go.FigureWidget(\n   make_subplots(2, 3, subplot_titles=subplot_titles)\n)\n\n#barchart - house prices\nint_bar_price = pd.cut(plot_df['SalePrice'], bins=int_bins, labels=int_bin_labels).value_counts().sort_index().reset_index()\nint_bar_price.columns = ['SalePrice', 'Count']\n\nint_fig.add_trace(\n    go.Bar(\n        x=int_bar_price['Count'],\n        y=int_bar_price['SalePrice'],\n        orientation='h',\n        marker=dict(\n            color=neighborhood_colour_mapping[top_10_neighborhoods[0]],\n        ),\n        showlegend=False\n    ),\n    col=1,\n    row=1\n)\n\n#barchart - bedrooms \nint_bar_bedrooms = plot_df['BedroomAbvGr'].value_counts().sort_index().reset_index()\nint_bar_bedrooms.columns = ['Bedrooms', 'Count']\n\nint_fig.add_trace(\n    go.Bar(\n        x=int_bar_bedrooms['Count'],\n        y=int_bar_bedrooms['Bedrooms'],\n        orientation='h',\n        marker=dict(\n            color=neighborhood_colour_mapping[top_10_neighborhoods[0]]\n        ),\n        showlegend=False\n    ),\n    col=1,\n    row=2\n)\n\n#scatter plots\nfor plot, row, col in zip(area_plots, area_plot_rows, area_plot_cols):\n\n    int_fig.add_trace(\n        go.Scatter(\n            x=plot_df[plot].values,\n            y=plot_df['SalePrice'].values,\n            marker=dict(\n                color=plot_df['OverallQual'].map(rating_color_mapping).values,\n                ),\n            mode='markers',\n            showlegend=False\n        ),\n        col=col,\n        row=row\n    )\n\n#custom legend\nfor i in range(len(box_colors)):\n    int_fig.add_trace(go.Scatter(x=[None], y=[None], mode='markers',\n                            marker=dict(size=8, color=box_colors[i]), \n                            showlegend=True, name=x_box[i]\n                        )\n    )\n\nint_rating = str(round(avg_quality.loc[avg_quality['Neighborhood'] == top_10_neighborhoods[0], 'OverallQual'].item(), 2))\nnum_houses = str(house_num_df.loc[house_num_df['Neighborhood'] == top_10_neighborhoods[0], 'SalePrice'].item())\n\nint_fig.update_layout(\n    title=dict(\n        text='<b>Review of ' + top_10_neighborhoods[0] + ' (' + str(int_rating) + ')<br>Number of Houses: ' + str(num_houses),\n        x=0.5),\n    showlegend=True,\n    legend_title_text='<b>Quality Rating:<\/b>'\n)\n\n\n#create interactive element\n\nneighborhood_widget = widgets.Dropdown(\n    options=top_10_neighborhoods,\n    value=top_10_neighborhoods[0],\n    description='Neighborhood:'\n)\n\ndef validate():\n    if neighborhood_widget.value in top_10_neighborhoods:\n        return True\n    else: \n        return False\n\ndef response(change):\n    if validate():\n         \n        df = interactive_u250.loc[interactive_u250['Neighborhood'].isin([neighborhood_widget.value])]\n         \n        int_bar_price = pd.cut(df['SalePrice'], bins=int_bins, labels=int_bin_labels).value_counts().sort_index().reset_index()\n        int_bar_price.columns = ['SalePrice', 'Count']\n\n        int_bar_bedrooms = df['BedroomAbvGr'].value_counts().sort_index().reset_index()\n        int_bar_bedrooms.columns = ['Bedrooms', 'Count']\n\n            \n        with int_fig.batch_update():\n            \n            #house prices\n            int_fig.data[0]['y'] = int_bar_price['SalePrice']\n            int_fig.data[0]['x'] = int_bar_price['Count']\n            int_fig.data[0]['marker']['color'] = neighborhood_colour_mapping[neighborhood_widget.value]\n\n            #bedrooms prices\n            int_fig.data[1]['y'] = int_bar_bedrooms['Bedrooms']\n            int_fig.data[1]['x'] = int_bar_bedrooms['Count']\n            int_fig.data[1]['marker']['color'] = neighborhood_colour_mapping[neighborhood_widget.value]           \n\n            #scatter plots\n            scatterplots_ix = [2, 3, 4, 5]\n            for plot, row, col, ix in zip(area_plots, area_plot_rows, area_plot_cols, scatterplots_ix):\n                int_fig.data[ix]['x'] = df[plot].values\n                int_fig.data[ix]['y'] = df['SalePrice'].values\n                int_fig.data[ix]['marker']['color'] = df['OverallQual'].map(rating_color_mapping).values\n\n\n            int_rating = str(round(avg_quality.loc[avg_quality['Neighborhood'] == neighborhood_widget.value, 'OverallQual'].item(), 2))\n            num_houses = str(house_num_df.loc[house_num_df['Neighborhood'] == neighborhood_widget.value, 'SalePrice'].item())\n\n            int_fig.update_layout(\n                title=dict(\n                    text='<b>Review of ' + neighborhood_widget.value + ' (' + str(int_rating) + ')<br>Number of Houses: ' + str(num_houses),\n                    x=0.5,\n                    y=0.9\n                ),\n            )\n\nneighborhood_widget.observe(response, names='value')\n\ncontainer = widgets.HBox([neighborhood_widget])\nwidgets.VBox([container, int_fig])","37b93f7c":"bedrooms = [1, 2, 3, 4, 5]\nsubplot_titles = ['GrLivArea', 'TotalBsmtSF', 'GarageArea', 'LotArea']\narea_plots = ['GrLivArea', 'TotalBsmtSF', 'GarageArea', 'LotArea']\narea_plot_cols = [1, 2, 1, 2]\narea_plot_rows = [1, 1, 2, 2]\n\nsymbols = ['circle', 'square', 'diamond', 'cross', 'triangle-up', 'pentagon', 'square', 'diamond-wide', 'hourglass', 'bowtie']\n\nsymbol_mapping = dict(zip(top_10_neighborhoods, symbols))\n\nhouse_widget = widgets.SelectMultiple(\n    options=top_10_neighborhoods,\n    value=[top_10_neighborhoods[0]],\n    description='Neighborhood:'\n)\n\nrating_widget = widgets.SelectMultiple(\n    options=x_box,\n    value=[x_box[3]],\n    description='Rating:'\n)\n\nbedroom_widget = widgets.SelectMultiple(\n    options=bedrooms,\n    value=[bedrooms[2]],\n    description='Bedrooms:'\n)\n\n#create base chart\nint_fig2 = go.FigureWidget(\n   make_subplots(2, 2, subplot_titles=subplot_titles)\n)\n\nhouse_df = interactive_u250.loc[(interactive_u250['Neighborhood'].isin(list(house_widget.value))) & \\\n                                 (interactive_u250['OverallQual'].isin(list(rating_widget.value))) & \\\n                                 (interactive_u250['BedroomAbvGr'].isin(list(bedroom_widget.value)))]\n\n#scatter plots\nfor plot, row, col in zip(area_plots, area_plot_rows, area_plot_cols):\n\n    int_fig2.add_trace(\n        go.Scatter(\n            x=house_df[plot].values,\n            y=house_df['SalePrice'].values,\n            marker=dict(\n                color=house_df['OverallQual'].map(rating_color_mapping).values,\n                size=12\n                ),\n            marker_symbol=house_df['Neighborhood'].map(symbol_mapping).values,\n            mode='markers',\n            showlegend=False,\n            customdata = np.stack([house_df['Neighborhood'].values, house_df['OverallQual'].values, house_df['BedroomAbvGr'].values, house_df.index.values]).T,\n            hovertemplate=\n            \"<b>%{customdata[0]}<\/b><br>\" +\n            \"Price: %{y:$,.0f}<br>\" +\n            plot + \": %{x:.0f}<br>\" +\n            \"OverallQuality: %{customdata[1]}<br>\" +\n            \"Bedrooms: %{customdata[2]}<br>\" +\n            \"House Index: %{customdata[3]}<extra><\/extra>\"\n        ),\n        col=col,\n        row=row\n    )\n\nint_fig2.update_layout(title=dict(text=\"House Features by Neighborhood \/ Rating \/ Bedrooms\", x=0.5))\nint_fig2.add_annotation(text=\"<b>Chart Interpretation: <\/b>Select options from dropdown. Hover on data point to view more more information\",\n                  xref=\"paper\", yref=\"paper\",\n                  x=0, y=-0.2, showarrow=False)\n\ndef response(change):\n        \n    df = interactive_u250.loc[(interactive_u250['Neighborhood'].isin(list(house_widget.value))) & \\\n                                (interactive_u250['OverallQual'].isin(list(rating_widget.value))) & \\\n                                (interactive_u250['BedroomAbvGr'].isin(list(bedroom_widget.value)))]\n        \n    with int_fig2.batch_update():          \n\n        #scatter plots\n        scatterplots_ix = [0, 1, 2, 3]\n        for plot, row, col, ix in zip(area_plots, area_plot_rows, area_plot_cols, scatterplots_ix):\n            int_fig2.data[ix]['x'] = df[plot].values\n            int_fig2.data[ix]['y'] = df['SalePrice'].values\n            int_fig2.data[ix]['marker']['color'] = df['OverallQual'].map(rating_color_mapping).values\n            int_fig2.data[ix]['marker']['symbol'] = df['Neighborhood'].map(symbol_mapping).values\n            int_fig2.data[ix]['customdata'] = np.stack([df['Neighborhood'].values, df['OverallQual'].values, df['BedroomAbvGr'].values, df.index.values]).T\n\n\n\n        int_rating = str(round(avg_quality.loc[avg_quality['Neighborhood'] == neighborhood_widget.value, 'OverallQual'].item(), 2))\n        num_houses = str(house_num_df.loc[house_num_df['Neighborhood'] == neighborhood_widget.value, 'SalePrice'].item())\n\nhouse_widget.observe(response, names='value')\nrating_widget.observe(response, names='value')\nbedroom_widget.observe(response, names='value')\n\ncontainer = widgets.HBox([house_widget, rating_widget, bedroom_widget])\ndisplay(widgets.VBox([container, int_fig2]))","584cebd0":"comparison_cols = ['1stFlrSF', '2ndFlrSF', 'GrLivArea', 'TotalBsmtSF', 'GarageArea', 'LotArea', 'BedroomAbvGr', 'TotRmsAbvGrd', 'OverallQual', 'SalePrice']\n\n#start index\nindex1 = 1\nindex2 = 2\n\ncomparison_df_all = housing_df[comparison_cols]\ncomparison_df_u250 = comparison_df_all.loc[comparison_df_all['SalePrice'] <= median_price]\n\ny_pos = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0]\ny_annotation_pos = [0.84, 0.56, 0.26, 0]\n\n\nindex_widget1 = widgets.Text(\n    description='House 1: ',\n    value=str(index1),\n    options=list(comparison_df_all.index)\n)\n\nindex_widget2 = widgets.Text(\n    description='House 2: ',\n    value=str(index2),\n    options=list(comparison_df_all.index)\n)\n\ndata_widget = widgets.Dropdown(\n    description='Data',\n    value='Houses <250k',\n    options=['Houses <250k', 'All Houses']\n)\n\nhouse_ix1 = comparison_df_u250.loc[comparison_df_u250.index == int(index_widget1.value)]\nhouse_ix2 = comparison_df_u250.loc[comparison_df_u250.index == int(index_widget2.value)]\nneighborhood_ix1 = housing_df.loc[housing_df.index == int(index_widget1.value), 'Neighborhood'].item()\nneighborhood_ix2 = housing_df.loc[housing_df.index == int(index_widget2.value), 'Neighborhood'].item()\nrating_ix1 = str(round(avg_quality.loc[avg_quality['Neighborhood'] == neighborhood_ix1, 'OverallQual'].item(), 2))\nrating_ix2 = str(round(avg_quality.loc[avg_quality['Neighborhood'] == neighborhood_ix2, 'OverallQual'].item(), 2))\n\nint_fig3 = go.FigureWidget(make_subplots(4, 2), layout=dict(width=500))\n\nfor i in range(len(comparison_cols)):\n    int_fig3.add_trace(go.Indicator(\n        mode=\"number\",\n        value=house_ix1.loc[:, comparison_cols[i]].item(),\n        domain={'x': [0, 0.2], 'y': [y_pos[i+1], y_pos[i]]},\n        number={'font' : {'size' : 16}}))\n\n    int_fig3.add_trace(go.Indicator(\n        mode=\"number\",\n        value=0,\n        title=dict(text=' - ' + comparison_cols[i] + ' - ', font=dict(size=16)),\n        domain={'x': [0, 0.45], 'y': [y_pos[i+1], y_pos[i] - 0.075]},\n        number={'font' : {'size' : 1, 'color' : 'white'}}))\n\n    int_fig3.add_trace(go.Indicator(\n        mode=\"number+delta\",\n        value=house_ix2.loc[:, comparison_cols[i]].item(),\n        domain={'x': [0, 0.75], 'y': [y_pos[i+1], y_pos[i]]},\n        delta={'reference': house_ix1.loc[:, comparison_cols[i]].item(), 'relative': True, 'position' : \"right\", 'font' : {'size' : 14}},\n        number={'font' : {'size' : 16}}))\n\nfor i in range(len(area_plots)):\n    int_fig3.add_trace(\n        go.Scatter(\n            x=comparison_df_u250[area_plots[i]],\n            y=comparison_df_u250['SalePrice'],\n            marker=dict(\n               color='rgba(100, 172, 232, 0.6)'),\n            mode='markers',\n            showlegend=False\n        ),\n    row=i+1,\n    col=2\n    )\n\n    int_fig3.add_trace(\n        go.Scatter(\n            x=[house_ix1.loc[:, area_plots[i]].item()],\n            y=[house_ix1.loc[:, 'SalePrice'].item()],\n            marker=dict(\n                color=neighborhood_colour_mapping[neighborhood_ix1], \n                line=dict(\n                    color='black', \n                    width=1)),\n            mode='markers',\n            showlegend=False\n        ),\n    row=i+1,\n    col=2\n    )\n\n    int_fig3.add_trace(\n        go.Scatter(\n            x=[house_ix2.loc[:, area_plots[i]].item()],\n            y=[house_ix2.loc[:, 'SalePrice'].item()],\n            marker=dict(\n                color=neighborhood_colour_mapping[neighborhood_ix2],  \n                line=dict(\n                    color='black', \n                    width=1)),\n            mode='markers',\n            showlegend=False\n        ),\n    row=i+1,\n    col=2\n    )\n\n    int_fig3.add_annotation(\n        x=1.0,\n        y=y_annotation_pos[i],\n        xref='paper',\n        yref='paper',\n        text='<b>' + area_plots[i] + ' vs SalePrice <\/b>',\n        showarrow=False\n    )\n\nint_fig3.add_annotation(\n    x=0.08,\n    y=1.035,\n    xref='paper',\n    yref='paper',\n    text='<b>' + index_widget1.value + ' in ' + neighborhood_ix1 + ' (' + rating_ix1 + ')',\n    font=dict(\n        size=16,\n        color=neighborhood_colour_mapping[neighborhood_ix1]),\n    showarrow=False\n)\n\nint_fig3.add_annotation(\n    x=0.42,\n    y=1.035,\n    xref='paper',\n    yref='paper',\n    text='<b>' + index_widget2.value + ' in ' + neighborhood_ix2 + ' (' + rating_ix2 + ')',\n    font=dict(\n        size=16,\n        color=neighborhood_colour_mapping[neighborhood_ix2]),\n    showarrow=False\n)\n\nint_fig3.add_annotation(text=\"<b>Note: <\/b>If you enter in an index value for a property not in the top 10 neighborhoods the graph will not update\",\n                  xref=\"paper\", yref=\"paper\",\n                  x=0, y=-0.07, showarrow=False)\n\n#Add interactive element\n\ndef validate():\n    \n    if index_widget1.value == '' or index_widget2.value == '':\n        return False\n    \n    if int(index_widget1.value) in comparison_df_u250.index and int(index_widget2.value) in comparison_df_u250.index:\n        \n        neighborhood_val1 = housing_df.loc[housing_df.index == int(index_widget1.value), 'Neighborhood'].item()\n        neighborhood_val2 = housing_df.loc[housing_df.index == int(index_widget2.value), 'Neighborhood'].item()\n\n        if neighborhood_val1 in top_10_neighborhoods and neighborhood_val2 in top_10_neighborhoods:\n            return True\n        \n        else: return False\n    else: \n        return False\n\ndef response(change):\n    if validate():\n        \n        if data_widget.value == 'Houses <250k':\n            house_ix1_int = comparison_df_u250.loc[comparison_df_u250.index == int(index_widget1.value)]\n            house_ix2_int = comparison_df_u250.loc[comparison_df_u250.index == int(index_widget2.value)]\n            data_df = comparison_df_u250.copy()\n        else: \n            house_ix1_int = comparison_df_all.loc[comparison_df_all.index == int(index_widget1.value)]\n            house_ix2_int = comparison_df_all.loc[comparison_df_all.index == int(index_widget2.value)]\n            data_df = comparison_df_all.copy()\n          \n        with int_fig3.batch_update():\n            neighborhood_ix1_int = housing_df.loc[housing_df.index == int(index_widget1.value), 'Neighborhood'].item()\n            neighborhood_ix2_int = housing_df.loc[housing_df.index == int(index_widget2.value), 'Neighborhood'].item()\n            rating_ix1_int = str(round(avg_quality.loc[avg_quality['Neighborhood'] == neighborhood_ix1_int, 'OverallQual'].item(), 2))\n            rating_ix2_int = str(round(avg_quality.loc[avg_quality['Neighborhood'] == neighborhood_ix2_int, 'OverallQual'].item(), 2))\n            \n            \n            for i in range(len(comparison_cols)):\n                #update left hand indicator\n                int_fig3['data'][3*i]['value'] = house_ix1_int.loc[:, comparison_cols[i]].item()\n                #update right hand indicator\n                int_fig3['data'][2 + 3*i]['value'] = house_ix2_int.loc[:, comparison_cols[i]].item()\n                int_fig3['data'][2 + 3*i]['delta']['reference'] = house_ix1_int.loc[:, comparison_cols[i]].item()\n            \n            for i in range(len(area_plots)):\n                #update scatter plots\n                int_fig3['data'][30 + 3*i]['x'] = data_df[area_plots[i]]\n                int_fig3['data'][30 + 3*i]['y'] = data_df['SalePrice']\n               \n                #update markers for left hand indicator\n                int_fig3['data'][31 + 3*i]['x'] = [house_ix1_int.loc[:, area_plots[i]].item()]\n                int_fig3['data'][31 + 3*i]['y'] = [house_ix1_int.loc[:, 'SalePrice'].item()]\n                int_fig3['data'][31 + 3*i]['marker']['color'] = neighborhood_colour_mapping[neighborhood_ix1_int]\n\n                #update markers for right hand indicator\n                int_fig3['data'][32 + 3*i]['x'] = [house_ix2_int.loc[:, area_plots[i]].item()]\n                int_fig3['data'][32 + 3*i]['y'] = [house_ix2_int.loc[:, 'SalePrice'].item()]\n                int_fig3['data'][32 + 3*i]['marker']['color'] = neighborhood_colour_mapping[neighborhood_ix2_int]\n\n            #update title of left hand indicator\n            int_fig3['layout']['annotations'][4]['text'] = '<b>' + index_widget1.value + ' in ' + neighborhood_ix1_int + ' (' + rating_ix1_int + ')'\n            int_fig3['layout']['annotations'][4]['font']['color'] = neighborhood_colour_mapping[neighborhood_ix1_int]\n            \n            #update title of right hand indicator\n            int_fig3['layout']['annotations'][5]['text'] = '<b>' + index_widget2.value + ' in ' + neighborhood_ix2_int + ' (' + rating_ix2_int + ')'\n            int_fig3['layout']['annotations'][5]['font']['color'] = neighborhood_colour_mapping[neighborhood_ix2_int]\n\nint_fig3.update_layout(margin=dict(t=10, b=10))\nindex_widget1.observe(response, names='value')\nindex_widget2.observe(response, names='value')\ndata_widget.observe(response, names='value')\n\ncontainer1 = widgets.HBox([index_widget1, index_widget2, data_widget])\nwidgets.VBox([container1, int_fig3])","4bf7f407":"The bar chart above is an alternative way of reading the boxplot where all the houses below the red dashed line are in green and all the houses above the line are in red.\n\n<a id=\"3-2\"><\/a>\n### 3.2 Condition\nThe graphs below are similar to 3.1 above except for the condition of the house rather than quality.","f7454678":"> - As the number of rooms increase the number of bedrooms generally increase\n> - There were not many 1 bed flats sold in Ames\n> - You are more likely to get a 3 bed property, followed by a 2 bed and there is a chance you may find a 4 bed property\n> - There were some properties sold for under &#36;250k with 11 rooms and 6 bedrooms and one with 12 rooms and 5 bedrooms\n\n<a id=\"5\"><\/a>\n## 5. Neighborhoods\n<a id=\"5-1\"><\/a>\n### 5.1 Average Quality\nThe bar chart below shows the average quality rating in each of the neighborhoods.","6c3f7dc0":"> - As the average rating of the houses in the neighborhoods increase, so do the prices of houses in that neighborhood\n> - For 7 out of the 10 neighborhoods *roughly* half of the distribution lies below <&#36;250k\n> - As we get to the neighborhoods with a quality rating close to 8 the number of houses <&#36;250k reduce and more houses are above that amount\n\n<a id=\"6\"><\/a>\n## 6. Interactive Graphs\n\nHere's where the fun starts. Use the interactive graphs below to find your perfect neighborhood and property then use the final graph to compare that property to the others <&#36;250k or all properties in the dataset.\n\nThe purpose of these graphs is for you to draw your own conclusions using the data.\n\n<a id=\"6-1\"><\/a>\n### 6.1 Neighborhoods\nThe interactive graph below allows you to dive into a neighborhood by choosing one from the dropdown menu. The title tells you the average rating of that neighborhood and how many houses are <&#36;250k. The points on the scatter graph vary by color depending on the rating of the property.","fbee7e6c":"> - 75% of the houses in Ames are &#36;214k and below\n> - the median of the distribution is &#36;163k, and\n> - the mean is &#36;180k. \n\nThe mean is not a robust estimate meaning it is influenced by outliers (in this case the very expensive houses). This is why it is a good idea to use the median as the 'average' house price as it is not sensitive to outliers.\n\n<a id=\"2-1\"><\/a>\n### 2.2 What can we afford?\n<p>The chart below segments SalePrice into buckets of &#36;100k and specifies the count of houses in each bucket.<\/p> <p>The chart on the right shows us the count of houses above and below our &#36;250k budget.<\/p>","4d196d93":"<div class=\"alert alert-danger\" role=\"alert\">\n  The chart below contains an interactive element which is not avaiable in the static notebook, however it works perfectly when the notebook is ran. To use the interactive graph select copy->edit in the top right corner and run the code from the start\n<\/div>","5a115d25":"<html>\n<head>\n  <script src=\"https:\/\/cdn.plot.ly\/plotly-latest.min.js\"><\/script>\n<\/head>\n<body>\n  <!-- Output from the Python script above: -->\n  <div id=\"722c1aca-3ab7-43a8-b84a-d9a36a20c942\" class=\"plotly-graph-div\" style=\"height:100%; width:100%;\"><\/div>           \n<\/body>\n<\/html>","1696f17d":"# &#36;250k Challenge - Which house would you choose?\n\nAccording to Zillow the median house price in the US is c. &#36;250k ([Zillow](https:\/\/www.zillow.com\/home-values\/)). \n\nIn my first notebook I have used static and interactive graphs to review the housing dataset. By analysing features such as living area, basement area, garage area and lot area along with the number of rooms \/ bedrooms I have selected a property which I might have purchased if I was searching for a house in Ames, Iowa.\n\nHowever, my preferences for a house might be different to your preference for a house. The challenge for you kagglers is to use the interactive graphs below to select the house you might have purchased and tell me why in the comments below.\n\n<div class=\"alert alert-danger\" role=\"alert\">\n  The notebook contains interactive elements which is not avaiable in the static notebook, however they work perfectly when the notebook is ran. To use the interactive graph select copy->edit in the top right corner and run the code from the start\n<\/div>\n\n## Contents\n\n[1. Data Preparation](#1)  \n[2. Distribution of SalePrice](#2)  \n&nbsp; &nbsp;&nbsp; &nbsp; [2.1. Histogram of SalePrice](#2-1)    \n&nbsp; &nbsp;&nbsp; &nbsp; [2.2 What can we afford?](#2-2)  \n[3. What is the quality \/ condition of the houses?](#3)  \n&nbsp; &nbsp;&nbsp; &nbsp; [3.1. Quality](#3-1)  \n&nbsp; &nbsp;&nbsp; &nbsp; [3.2. Condition](#3-2)  \n[4. Rooms vs Bedrooms](#4)  \n[5. Neighborhoods](#5)  \n&nbsp; &nbsp;&nbsp; &nbsp; [5.1. Average Quality](#5-1)  \n&nbsp; &nbsp;&nbsp; &nbsp; [5.2. SalePrice Distribution](#5-2)  \n[6. Interactive Graphs](#6)  \n&nbsp; &nbsp;&nbsp; &nbsp; [6.1. Neighborhoods](#6-1)  \n&nbsp; &nbsp;&nbsp; &nbsp; [6.2. Find Properties](#6-2)  \n&nbsp; &nbsp;&nbsp; &nbsp; [6.3. Comparing Properties](#6-3)\n\n\n<a id=\"1\"><\/a>\n## 1. Data Preparation\n\nIn this section I have imported the libraries and data used for the analysis. From other notebooks you can see that the dataset contains outliers. These are also handled below.","bb3de57f":"What is the difference between house quality and house condition? My interpretation is that the quality of the house is determined by physical attributes such as the brickwork whereas the condition can vary depending on the type of person living in the property. A quality house could soon deteriorate because the owner does not keep it in a good condition.\n\nGoing forward I am going to use house quality rather than condition as I think that it provides a clearer distinction between house values.\n\n<a id=\"4\"><\/a>\n## 4. Rooms vs Bedrooms\nThe heatmap below looks at house size and the number of bedrooms that you might expect for houses under &#36;250k.","9ef58d28":"> - The distribution is positively skewed with the majority of houses costing up to &#36;200k\n> - There are some very expensive houses in Ames but also some very cheap houses\n\nThe describe method provides us with some more information about the SalePrice distribution:","a0585ee0":"I have made the assumption here on that we would like to choose a house in the top 10 neighborhoods.\n\n<a id=\"5-2\"><\/a>\n### 5.2 SalePrice Distribution\nThe dist plot below shows the distribution of SalePrice in each of the top 10 neighborhoods.","a054d438":"<div class=\"alert alert-danger\" role=\"alert\">\n  The chart below contains an interactive element which is not avaiable in the static notebook, however it works perfectly when the notebook is ran. To use the interactive graph select copy->edit in the top right corner and run the code from the start\n<\/div>","2b698bb7":"> - As you might expect as the quality of the house increases the median SalePrice increases\n> - With our budget we can afford:\n        - almost all of the houses rated 6 and below, \n        - over 75% of houses rated 7, \n        - just under half of the houses rated 8, and\n        - a couple of houses rated 9\n> - We would need at least &#36;300k to afford a house with a quality rating of 10\n\nThe number of houses for each rating split by we can \/ cannot afford is shown below:","b4defc29":"<a id=\"6-2\"><\/a>\n### 6.2 Find Properties\nThe interactive graph below allows you to find properties which fit your personal requirements. You can select multiple neighborhoods \/ ratings \/ number of bedrooms from the dropdowns. The color of the points in this graph vary by rating as before, the symbol of the points vary by neighborhood. \n\n***Use the hovertext to get more information about a particular datapoint. You will need the index value for the next graph.***","943ba29c":"<a id=\"2\"><\/a>\n## 2. Distribution of SalesPrice\n<a id=\"2-1\"><\/a>\n### 2.1 Histogram of SalePrice\nThe chart below shows a simple histogram of SalePrice for all houses in the dataset.","e0c9b2c6":"> - There are almost 3 times as many houses in the 100-200k bucket than any other bucket.\n> - Our budget covers 1240 out of the possible 1457 houses in the dataset\n\n<a id=\"3\"><\/a>\n## 3. What is the quality \/ condition of the houses\n<a id=\"3-1\"><\/a>\n### 3.1 Quality\nThe boxplot below shows the distribution of SalePrice for different levels of house quality. ","04bc35fc":"To save any bias creeping into your choices you can find my choice in the comments below. \n\n> - Which house would you have bought? Why?\n> - Is there anything else you would like to see?\n\nThis is my first kaggle notebook. I do not work in the data science industry and I am self taught, so if you have any comments \/ feedback on my methods above I would love to hear them (I always like to know if there is a better way of doing things). \n\nAlso, in the final graph where we can compare two properties, if you know of a better way to get just text in an Indicator without having to use a number, set the color to white, add the text in the title then shift the Indicator down a bit I would be all ears.\n\nThanks for reading and I look forward to hearing about your selection","07afc5b6":"<a id=\"6-3\"><\/a>\n### 6.3 Comparing two properties\nThe interactive graph below allows you to use the index values of properties to compare one house against the other. You can find the index value of a property by hovering over a datapoint on the graph above. \n\nThe second dropdown allows you to select the dataset in which to compare the two selected points. You can see how those properties compare to either the properties <&#36;250k or all the properties in the dataset. \n\nThe indicator compares the property on the right with the property on the left. \n\nThe scatter plots on the right show where that property lies in the chosen dataset. The marker color of each point on the scattergraph corresponds with the neighborhood the point is in. This is also shown by the color of the column titles.\n","8c72bd85":"> - The abbreviations of the top 10 neighborhoods are NridgHt, StoneBr, NoRidge, Somerst, Timber, Blmngtn, Veenker, CollgCr, Gilbert and NWAmes\n\nThe bullet chart below shows how the neighborhoods rate against (my own) scale.","30945390":"<div class=\"alert alert-danger\" role=\"alert\">\n  The chart below contains an interactive element which is not avaiable in the static notebook, however it works perfectly when the notebook is ran. To use the interactive graph select copy->edit in the top right corner and run the code from the start\n<\/div>"}}