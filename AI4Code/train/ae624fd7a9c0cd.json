{"cell_type":{"4725bebc":"code","61649a86":"code","34b07291":"code","4a341e61":"code","98574365":"code","f5161aa1":"code","f8d8d2a0":"code","eda9b838":"code","fd62709d":"code","2c69f687":"code","7b4c8482":"code","d6d8fabf":"code","55bb21b3":"code","6a6b2f91":"code","40124b02":"code","e8e7d708":"code","9e312e3b":"code","8a437921":"code","06a25652":"code","f627784d":"code","bf0b875d":"code","e4171e4b":"code","5e090c66":"code","b3dc0045":"code","60b9e6dc":"code","8c6824c9":"code","5548d685":"code","c09029b7":"code","2e0c9b1c":"code","c9ca2a08":"code","77110446":"code","1a224f26":"code","288b2193":"code","97dceb3c":"code","aaeb89eb":"code","94a38bdd":"code","2cce0525":"code","6f6bb94c":"code","5dcbbc71":"code","fa2f5a5f":"markdown","bfac9435":"markdown","fe66f658":"markdown","4ce22946":"markdown","c894582a":"markdown"},"source":{"4725bebc":"#Installing libraries\n!pip install regressors\n\nimport numpy as np \nimport pandas as pd \nimport os\nimport statsmodels.formula.api as sm\nimport statsmodels.sandbox.tools.cross_val as cross_val\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn import linear_model as lm\nfrom regressors import stats\nfrom sklearn import metrics\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import KFold, cross_val_score,cross_val_predict, LeaveOneOut\n\nprint(os.listdir(\"..\/input\"))","61649a86":"d = pd.read_csv(\"..\/input\/train.csv\")\nd['space'] = ' '\nd['Time2'] = d['Date'] + d['space'] + d['Time']\nd.head()","34b07291":"d = d.drop(columns=['Id','Date','Time'])\nd.head()","4a341e61":"print(d.dtypes)","98574365":"d['Time3'] = pd.to_datetime(d['Time2'])\nd['Time4'] = pd.to_timedelta(d.Time3).dt.total_seconds().astype(int)\nprint(d.dtypes)\nd.head()","f5161aa1":"d = d.drop(columns=['Time2','Time3','space'])\nd.head()","f8d8d2a0":"#checking for null\/NaN values\nprint(\"Check for NaN\/null values:\\n\", d.isnull().values.any())\nprint(\"Number of NaN\/null values:\\n\", d.isnull().sum())","eda9b838":"weather = d[\"Weather\"]\nprint(\"Value Count:\\n\",d[\"Weather\"].value_counts())\nprint(\"-------------------\")\nseason = d[\"Season\"]\nprint(\"Value Count:\\n\",season.value_counts())\nprint(\"-------------------\")","fd62709d":"#d = pd.get_dummies(d, prefix=['Weather'], columns=['Weather'])\n#d.head()","2c69f687":"d['Weather'] = d['Weather'].map({'Clear': 0, 'Cloudy': 1, 'Light Rain':2, 'Heavy Rain':3})\nd['Season'] = d['Season'].map({'Spring': 0, 'Summer': 1, 'Winter':2, 'Fall':3})\nd.head()","7b4c8482":"# d = d.drop(columns=['Weather','Season'])\n# d.head()\nd=d.dropna()\nprint(d.dtypes)\n","d6d8fabf":"corr = d.corr().abs().unstack().sort_values()\npd.set_option('display.max_rows', None)  \nprint (corr)","55bb21b3":"#checking for null\/NaN values\nprint(\"Check for NaN\/null values:\\n\", d.isnull().values.any())\nprint(\"Number of NaN\/null values:\\n\", d.isnull().sum())","6a6b2f91":"from mlxtend.feature_selection import SequentialFeatureSelector as sfs","40124b02":"inputDF = d.loc[:, d.columns != 'Demand']\noutputDF = d[[\"Demand\"]]\n\nmodel = sfs(LinearRegression(),k_features=5,forward=True,verbose=2,cv=5,n_jobs=-1,scoring='r2')\nmodel.fit(inputDF,outputDF)\n#this is only showing main effects","e8e7d708":"#Selected feature index.\nmodel.k_feature_idx_","9e312e3b":"#Column names for the selected feature.\nmodel.k_feature_names_","8a437921":"inputDF = d.loc[:, d.columns != 'Demand']\noutputDF = d[[\"Demand\"]]\n\nbackwardmodel = sfs(LinearRegression(),k_features=5,forward=False,verbose=2,cv=5,n_jobs=-1,scoring='r2')\n#forward changed to false\nbackwardmodel.fit(inputDF,outputDF)\n#this is only showing main effects","06a25652":"#Selected feature index.\nbackwardmodel.k_feature_idx_","f627784d":"#Column names for the selected feature.\nbackwardmodel.k_feature_names_","bf0b875d":"print(d.columns.values)","e4171e4b":"#kFCV: Scikit-Learn\ninputDF = d.loc[:, d.columns != 'Demand']\noutputDF = d[[\"Demand\"]]\nmodel = LinearRegression()\nkf = KFold(5, shuffle=True, random_state=42).get_n_splits(inputDF)\nrmse = np.sqrt(-cross_val_score(model, inputDF, outputDF, scoring=\"neg_mean_squared_error\", cv = kf))\nprint(rmse.mean())\nresults = model.fit(inputDF,outputDF)","5e090c66":"select=list(d.columns.values)\nmax_rsq = 0.1\nfor primary in range(0,10):\n    if primary==8:\n        continue\n    for secondary in range(1,5):\n        string = \"Demand ~ np.power(\" + select[primary] +\", \"+ str(secondary) +\")\"   # np.power(Temp,4)\n        res_trial = sm.ols(formula=string,data=d).fit()\n        if res_trial.rsquared>max_rsq:\n            max_rsq= res_trial.rsquared\n            print('\\n\\n',string,'----->' ,res_trial.summary())","b3dc0045":"select=list(d.columns.values)\nmax_rsq = 0.1\nfor primary in range(0,10):\n    if primary==8:\n        continue\n    for secondary in range(primary,10):\n        if secondary==8:\n            continue\n        for tertiary in range(secondary,10):\n            if tertiary==8:\n                continue\n            for quaternary in range(tertiary,10):\n                if quaternary==8:\n                    continue\n                string = \"Demand ~ \" + select[primary] + \"*\" +select[secondary]+\"*\"+select[tertiary]+\"*\"+select[quaternary]\n                res_trial = sm.ols(formula=string,data=d).fit()\n                if res_trial.rsquared>max_rsq:\n                    max_rsq = res_trial.rsquared\n                    print('\\n\\n',string,'----->' ,res_trial.summary())","60b9e6dc":"res = sm.ols(formula=\"Demand ~  Season*AdoptedTemperature*Humidity*Time4 + Temperature*AdoptedTemperature*Humidity*Time4 +Temperature*Season*Humidity*Time4+  Temperature*WindSpeed*Humidity*Time4 +Weather*AdoptedTemperature*Humidity*Time4 +  Weather*Temperature*Humidity*Time4 + Weather*Temperature*Season*Humidity + IsWorkingDay*WindSpeed*AdoptedTemperature*Humidity + IsWorkingDay*Temperature*Humidity*Time4 + IsWorkingDay*Temperature*AdoptedTemperature*Humidity + IsWorkingDay*Temperature*Season*Humidity + IsWorkingDay*Weather*AdoptedTemperature*Humidity + IsHoliday*Temperature*Humidity*Time4 + np.power(AdoptedTemperature,2) +AdoptedTemperature*Humidity*Time4+Temperature*Humidity*Time4+WindSpeed*AdoptedTemperature*Temperature +Humidity*Time4+IsHoliday+I(Weather*Weather) +Temperature + IsWorkingDay*Temperature  + Season + Temperature + Time4 * Season*Temperature + Weather*Humidity + np.power(Temperature,9)+ np.power(Temperature,8)\",data=d).fit()\nprint(res.summary())\n","8c6824c9":"# import itertools\n\n# stuff = ['IsHoliday', 'IsWorkingDay' ,'Weather','Temperature', 'WindSpeed' ,'Season',\n#          'AdoptedTemperature', 'Humidity' ,'Time4']\n# max_rsq = 0.3\n# b=d[[\"Demand\"]].values\n# rmse_min=200\n# for L in range(4, len(stuff)+1):\n#     print(L)\n#     a0=('+','*')\n#     operationer=np.matlib.repmat(a0,1,L)\n#     operationer=list(chain.from_iterable(operationer))\n#     for subset in itertools.combinations(stuff, L):\n#             for microset in itertools.combinations(operationer, L-1):\n#                 result = [None]*(len(subset)+len(microset))\n#                 result[::2] = subset\n#                 result[1::2] = microset\n# #                 print(''.join(result))\n#                 tempo = ''.join(result)\n#                 string = \"Demand ~ \" + tempo\n#                 res_trial = sm.ols(formula=string,data=d).fit()\n#                 a=res_trial.predict(d).values\n#                 rmse = np.sqrt(((a-b) ** 2).mean())\n#                 if rmse<rmse_min:\n#                     rmse_min = rmse\n# #                     max_rsq = res_trial.rsquared\n#                     print('\\n\\n',string,'----->' ,rmse)\n\n        \n# # ('IsHoliday', 'IsWorkingDay', 'Weather')","5548d685":"import itertools\n\n# stuff = ['IsHoliday', 'IsWorkingDay' ,'Weather','Temperature', 'WindSpeed' ,'Season',\n#          'AdoptedTemperature', 'Humidity' ,'Time4']\n# max_rsq = 0.3\n# for L in range(2, len(stuff)+1):\n#     print(L)\n#     for subset in itertools.combinations(stuff, L):\n#             testing = subset[0]\n#             for i in range(1, len(subset)):\n#                 testing = testing + \"*\" + subset[i]\n#             string = \"Demand ~ \" + testing\n#             res_trial = sm.ols(formula=string,data=d).fit()\n#             if res_trial.rsquared>max_rsq:\n#                 max_rsq = res_trial.rsquared\n#                 print('\\n\\n',string,'----->' ,res_trial.summary())\n        \n        \n# ('IsHoliday', 'IsWorkingDay', 'Weather')","c09029b7":"\nstuff = ['IsHoliday', 'IsWorkingDay' ,'Weather','Temperature', 'WindSpeed' ,'Season']\nfor L in range(4, 6):\n    for subset in itertools.permutations(stuff, L):\n        print(subset)\n    ","2e0c9b1c":"\nres = sm.ols(formula=\"Demand ~  IsHoliday+IsWorkingDay+WindSpeed \",data=d).fit()\n# print(res_trial.predict(d))\n# print(d[[\"Demand\"]])\na=res.predict(d).values\nb=d[[\"Demand\"]].values\nprint(np.sqrt(((a-b) ** 2).mean()))","c9ca2a08":"# res = sm.ols(formula=\"Demand~IsHoliday*IsWorkingDay*Time4 +  Weather*Temperature*WindSpeed*Season*AdoptedTemperature*Humidity+np.power(Temperature,5) \",data=d).fit()\n# print(res.summary())","77110446":"d2 = pd.read_csv(\"..\/input\/test.csv\")\nd2['space'] = ' '\nd2['Time2'] = d2['Date'] + d2['space'] + d2['Time']\nd2 = d2.drop(columns=['Id','Date','Time'])\nd2['Time3'] = pd.to_datetime(d2['Time2'])\nd2['Time4'] = pd.to_timedelta(d2.Time3).dt.total_seconds().astype(int)\nd2 = d2.drop(columns=['Time2','Time3','space'])\nd2['Weather'] = d2['Weather'].map({'Clear': 0, 'Cloudy': 1, 'Light Rain':2, 'Heavy Rain':3})\nd2['Season'] = d2['Season'].map({'Spring': 0, 'Summer': 1, 'Winter':2, 'Fall':3})\n# print(d.dtypes)\n# print(d.head())\n# print(d2.head())\nd2.head()\n","1a224f26":"ypred = res.predict(d2)\nprint(ypred.astype(int))","288b2193":"\nsubmissionDF = pd.DataFrame({\"Id\": range(0,3000),\"Demand\":ypred.astype(int)})\nsubmissionDF.to_csv('Submissionv1.csv',index=False)\n","97dceb3c":"print(submissionDF)","aaeb89eb":"yp2 = model.predict(d2.loc[:, :])\nprint(yp2)","94a38bdd":"print(yp2.shape)","2cce0525":"yp2_sk=pd.DataFrame({'Id':range(0,3000),'Demand':yp2[:,0]})","6f6bb94c":"# submissionDF_sk = pd.DataFrame({'Id':range(0,3000),'Demand':yp2[:,0].astype(int)})\n# submissionDF_sk.to_csv('Submissionv_sk.csv',index=False)\n","5dcbbc71":"# print(submissionDF_sk)","fa2f5a5f":"# Backward Selection - main effects ","bfac9435":"# Forward Selection - Main effects ","fe66f658":"## Trial 2","4ce22946":"# Predictions","c894582a":"## Prediction using sklearn"}}