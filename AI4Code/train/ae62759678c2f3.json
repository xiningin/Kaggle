{"cell_type":{"28303d75":"code","517bb639":"code","43d3d909":"code","6e6f8e7e":"code","8b04b611":"code","c5c935b4":"code","7932863d":"code","271db097":"code","792d61fc":"code","72ef72f7":"code","2af2b292":"code","b775dd54":"code","39a35645":"code","f2f92d5e":"code","0e0e63a0":"code","3662be77":"code","1aaac1f1":"code","ad581b8d":"markdown","286c84a0":"markdown","c3b3d328":"markdown","95c41463":"markdown","22f482bb":"markdown","c7b91c52":"markdown","69b6847f":"markdown","36ac5175":"markdown","ed95aaee":"markdown","c74d605b":"markdown"},"source":{"28303d75":"%matplotlib notebook\n\nimport gc\n\n# Linear Algebra\nimport numpy as np\n\n# Data Processing\nimport pandas as pd\n\n# Data Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Stats\nfrom scipy import stats\n\n# Algorithms\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import mean_absolute_error, classification_report, roc_auc_score, roc_curve\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\n\n# Classifiers\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Set random seed for reproducibility\nnp.random.seed(0)\n\n# Stop unnecessary Seaborn warnings\nimport warnings\nwarnings.filterwarnings('ignore')\nsns.set()  # Stylises graphs","517bb639":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","43d3d909":"train_identity = pd.read_csv(f'..\/input\/ieee-fraud-detection\/train_identity.csv')\ntrain_transaction = pd.read_csv(f'..\/input\/ieee-fraud-detection\/train_transaction.csv')\n# test_identity = pd.read_csv(f'..\/input\/ieee-fraud-detection\/test_identity.csv')\n# test_transaction = pd.read_csv(f'..\/input\/ieee-fraud-detection\/test_transaction.csv')\n# sub = pd.read_csv(f'..\/input\/ieee-fraud-detection\/sample_submission.csv')\n\n# let's combine the data and work with the whole dataset\ntrain = pd.merge(train_transaction, train_identity, on='TransactionID', how='left')\n# test = pd.merge(test_transaction, test_identity, on='TransactionID', how='left')","6e6f8e7e":"train = reduce_mem_usage(train)","8b04b611":"train.head()","c5c935b4":"train.info()","7932863d":"# test.head()","271db097":"# test.info()","792d61fc":"qual_cols = (\n    ['ProductCD', 'addr1', 'addr2', 'P_emaildomain', 'R_emaildomain'] +\n    [f'card{n}' for n in range(1, 7)] +\n    [f'M{n}' for n in range(1, 10)] +\n    ['DeviceType' ,'DeviceInfo'] +\n    [f'id_{n}' for n in range(12, 39)]\n)\nprint(f'Qualitative Variables: {qual_cols}')","72ef72f7":"missing_vals = pd.DataFrame(train[train.columns].isnull().sum() * 100 \/ train.shape[0])\nmissing_vals[missing_vals[0] > 80]","2af2b292":"train = train.drop(missing_vals[missing_vals[0] > 80].index, axis=1)","b775dd54":"print(f'Duplicate Rows: {train.duplicated().sum()}')","39a35645":"qual_cols = set(qual_cols) - set(['id_14','id_18','id_21','id_22','id_23','id_24','id_25','id_26','id_27','id_30','id_32','id_33','id_34'])","f2f92d5e":"int_cols = (\n    train.loc[:, train.dtypes == np.int8] +\n    train.loc[:, train.dtypes == np.int16] +\n    train.loc[:, train.dtypes == np.int32] +\n    train.loc[:, train.dtypes == np.int32]\n)\nint_cols = int_cols.columns","0e0e63a0":"# int_cols","3662be77":"# numeric_cols = (\n#     train.drop(list(qual_cols) + list(int_cols), axis=1).columns\n# )\n\n# scaler = StandardScaler()\n# train_numeric = scaler.fit_transform(numeric_cols)\n# train = train_numeric + train[qual_cols]","1aaac1f1":"#RANDOM FOREST\nn_trees = 1000\nmax_depth = 5\nsplit_pct_features = 0.5\nclf = RandomForestClassifier(n_estimators = n_trees, max_depth = max_depth, max_features = split_pct_features, random_state=42)\n\nclf.fit(train.drop('isFraud', axis = 1), train['isFraud'])\nresults = clf.predict(test_df)\n\n# FEATURE IMPORTANCE\nimportance = clf.feature_importance_\nimportance = pd.DataFrame(importance, index = train.columns.values, columns =[\"importance\"])\nx = range(importance.shape[0])\ny = importance.iloc[:,0]\nyerr = importance.iloc[:,1]\nplt.bar(x, y, yerr = yerr, align = \"center\")\nplt.xlabel('features')\nplt.ylabel('Feature Importance')\nplt.title('Importance of Different Features')\nplt.show()","ad581b8d":"## Train Data","286c84a0":"Drop 80%, come back later if we need to.","c3b3d328":"# Imports","95c41463":"# Missing Values","22f482bb":"# Standarizing","c7b91c52":"# Importing the Data","69b6847f":"# Duplicate Rows","36ac5175":"# Helper Functions","ed95aaee":"# Categorical Variables","c74d605b":"## Testing Data"}}