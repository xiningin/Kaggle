{"cell_type":{"fa776575":"code","769ee845":"code","16c43884":"code","67830d71":"code","ff43a6c7":"code","812eae1f":"code","f74c8bfb":"code","2fa53e35":"code","5ec7fa24":"code","e98a2387":"code","932dbd8b":"code","e1ce02cf":"code","99543d54":"code","f77b95ad":"code","6c5494a4":"code","b7ba272d":"code","071acda5":"code","c3a617ad":"code","295ee046":"code","d601d5e1":"code","3ef16bf3":"code","07a5507b":"code","93c06c10":"code","501415f1":"code","24ec3995":"code","368644e6":"code","6dc0a2ff":"code","727f8a0f":"code","f1ce3163":"code","ca1cc780":"code","397a5c8c":"code","94fb16da":"code","a0d576e7":"code","ecbcbcd8":"code","1ffc5cf3":"code","43e441aa":"code","a62144fc":"code","f8875d80":"code","a443a7e3":"code","933af178":"code","a8a24458":"code","45025b04":"code","ca325a34":"code","683a6dc7":"code","d80e23e3":"code","d0cceb74":"code","3e9aff48":"code","dea0ce27":"code","bb14e0ee":"code","f2c3147c":"code","071c8e1f":"code","5c6bfca6":"code","9a2a1f28":"code","5db0eace":"code","746dbc26":"code","ec858c72":"code","f164303b":"code","77174038":"code","53b4a3f3":"code","3f7e80a4":"code","64161011":"code","e519cb8f":"code","77a6f387":"code","842de780":"code","0d32e545":"code","6938b404":"code","7df5446b":"code","98616bb2":"code","58439c89":"code","bf427dc8":"code","673ab441":"code","77a773eb":"code","20cb91c3":"code","cb3a75ac":"code","07556d10":"code","34bdd6dd":"code","310fa092":"code","23f41c2b":"markdown","6d728da1":"markdown","39312525":"markdown","36146d7f":"markdown","4548309b":"markdown","0137058a":"markdown","b75ff739":"markdown","c9d44e1d":"markdown","05034b8f":"markdown","a126a604":"markdown","5890a920":"markdown","92ace032":"markdown","9f6972ad":"markdown","5225e96a":"markdown","82381f6c":"markdown","95cc6ff5":"markdown","61662fb9":"markdown","d62e0102":"markdown","99b71ba2":"markdown","01173a28":"markdown","292e0b97":"markdown","971ecd37":"markdown"},"source":{"fa776575":"import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline","769ee845":"sns.set(style = 'darkgrid')","16c43884":"tips = sns.load_dataset('tips')\ntips.head()","67830d71":"# relplot() displays a scatterplot by default\nsns.relplot(x = 'total_bill', y = 'tip', data=tips)","ff43a6c7":"# Changes the style\/symbol of the points acc. to column 'time'\nsns.relplot(x = 'total_bill', y= 'tip', data=tips, hue = 'smoker', style='time' )","812eae1f":"# Changes color of points acc. to column 'size'\nsns.relplot(x = 'total_bill', y = 'tip', hue = 'size', data=tips) ","f74c8bfb":"# Changing color of circles\nsns.relplot(x = 'total_bill', y = 'tip', hue = 'size', data=tips, palette= 'ch:r=-0.8, l=0.95') ","2fa53e35":"# Changes size of points acc. to column 'size'\nsns.relplot(x = 'total_bill', y = 'tip', size = 'size', data=tips) ","5ec7fa24":"#sizes parameter to set (lowest_size, highest_size)\nsns.relplot(x = 'total_bill', y = 'tip', data = tips, size = 'size', sizes = (15, 200))","e98a2387":"# Random Data\nfrom numpy.random import randn\ndf = pd.DataFrame(dict(time = np.arange(500), value = randn(500).cumsum()))\ndf.head()","932dbd8b":"sns.relplot(x = 'time', y = 'value', kind = 'line', data=df)","e1ce02cf":"# Random Data\ndf = pd.DataFrame(randn(500,2).cumsum(axis = 0), columns = ['time', 'value'])\ndf.head()","99543d54":"fmri = sns.load_dataset('fmri')\nfmri.head()","f77b95ad":"# Parameter ci (Confidence Interval) set as Standard Deviation\nsns.relplot(x = 'timepoint', y = 'signal', kind = 'line', data=fmri, ci = 'sd')","6c5494a4":"#This will plot the real points, won't smoothen it\nsns.relplot(x = 'timepoint', y = 'signal', kind = 'line', data=fmri, estimator = None)","b7ba272d":"# Parameter hue changes the color of the line acc. to uniuqe column value\nsns.relplot(x = 'timepoint', y = 'signal',hue = 'event', kind = 'line', data=fmri)","071acda5":"# Parameter style changes the type\/symbol of line acc. to the unique column value\nsns.relplot(x = 'timepoint', y = 'signal',hue = 'region', style = 'event', kind = 'line', data=fmri)","c3a617ad":"# Markers =True will set the display the data points marked.\nsns.relplot(x = 'timepoint', y = 'signal',hue = 'region', style = 'event', kind = 'line', markers = True, data=fmri)","295ee046":"# Setting dashes to False will use solid lines for all subsets.\nsns.relplot(x = 'timepoint', y = 'signal',hue = 'region', style = 'event', kind = 'line', markers = True, dashes = False,data=fmri)","d601d5e1":"# When you are working with repeated measures data (that is, you have units that were sampled multiple times),\n# you can also plot each sampling unit separately without distinguishing them through semantics.\n# This avoids cluttering the legend\n\nsns.relplot(x = 'timepoint', y = 'signal',hue = 'region', units = 'subject',estimator = None, kind = 'line',data=fmri.query(\"event == 'stim'\"))","3ef16bf3":"dots = sns.load_dataset('dots').query(\"align == 'dots'\")\ndots.head()","07a5507b":"# The default colormap and handling of the legend in lineplot() also depends on \n# whether the hue semantic is categorical or numeric:\nsns.relplot(x = 'time', y='firing_rate', kind = 'line',data=dots, hue = 'coherence', style = 'choice')","93c06c10":"# It may happen that, even though the hue variable is numeric, it is poorly represented by a linear color scale.\n# That\u2019s the case here, where the levels of the hue variable are logarithmically scaled. \n# You can provide specific color values for each line by passing a list or dictionary\n\n# cubehelix_palette produces a colormap with linearly-decreasing (or increasing) brightness.\npalette = sns.cubehelix_palette(light=0.5, n_colors=6)\nsns.relplot(x = 'time', y='firing_rate', kind = 'line',data=dots, hue = 'coherence', style = 'choice', palette=palette)","501415f1":"# sizes parameter will adjust the line width\nsns.relplot(x = 'time', y = 'firing_rate', size = 'coherence',hue = 'coherence', style = 'choice', kind = 'line', data = dots, sizes = (1,5))","24ec3995":"df = pd.DataFrame(dict(time = pd.date_range('2019-06-02', periods = 500), value = randn(500).cumsum()))\ndf.head()","368644e6":"g = sns.relplot(x='time', y = 'value', kind='line', data=df)\ng.fig.autofmt_xdate()","6dc0a2ff":"tips.head()","727f8a0f":"# Creates different subplots acc. to col='time' unique values\nsns.relplot(x='total_bill', y = 'tip',hue = 'smoker', col = 'time', data=tips)","f1ce3163":"# Creates different subplots acc. to col='size' unique values\nsns.relplot(x='total_bill', y = 'tip',hue = 'smoker', col = 'size', data=tips)","ca1cc780":"sns.relplot(x='timepoint', y = 'signal' ,hue = 'subject', col = 'region',row ='event',height = 3, estimator=None,kind ='line', data=fmri)","397a5c8c":" # Acts as subplot, this shows us that for each value of size, how many datapoints do we have and also how they are scattered\n sns.relplot(x='total_bill', y = 'tip',hue = 'smoker', col = 'size', data=tips, col_wrap = 3, height=3)","94fb16da":"sns.lineplot(x= 'total_bill',y = 'tip', data = tips)\nsns.scatterplot(x= 'total_bill',y = 'tip', data = tips)","a0d576e7":"fmri.head()","ecbcbcd8":"sns.lineplot(x= 'timepoint', y = 'signal', hue = 'region',style = 'event' ,markers = True, ci=68,err_style = 'bars',data = fmri)","1ffc5cf3":"sns.lineplot(x= 'timepoint', y = 'signal', hue = 'event',units = 'subject' ,lw = 1,estimator = None, data = fmri.query(\"region == 'frontal'\"))","43e441aa":"f, ax = plt.subplots(figsize = (9,6))\nsns.heatmap(tips.corr(), annot=True, linewidths=.5, ax = ax, cmap = 'Greens')","a62144fc":"titanic  =sns.load_dataset('titanic')\ntitanic.head()","f8875d80":"# Stripplot: Shows varation of 'total_bill' for different days. Also points are jittered\/scattered.\n# This jitternig is small amount used in the plot,\n# can be useful when you have many points and they overlap, so that it is easier to see the distribution.\nsns.catplot(x = 'day', y = 'total_bill', data = tips)","a443a7e3":"# When jitter is off\nsns.catplot(x = 'day', y = 'total_bill', data = tips, jitter=False)","933af178":"# Swarm Plot, greatly jitterned points\nsns.catplot(x = 'day', y = 'total_bill', data = tips, kind = 'swarm')","a8a24458":"# Swarm Plot with hue='sex'\n# Helpful for inference and insights\nsns.catplot(x = 'day', y = 'total_bill', data = tips, kind = 'swarm', hue = 'size')","45025b04":"sns.catplot( x='smoker', y = 'tip', data=tips)","ca325a34":"sns.catplot(x = 'day', y = 'total_bill', kind  ='box', data = tips)","683a6dc7":"# Seaborn itself shifted the box plot, by a behaviour called dodging\nsns.catplot(x = 'day', y = 'total_bill', kind  ='box', data = tips, hue = 'sex')","d80e23e3":"diamonds = sns.load_dataset('diamonds')","d0cceb74":"sns.catplot(x = 'color', y = 'price', kind = 'boxen', data = diamonds.sort_values('color'), scale = 'linear')","3e9aff48":"# split=True for the violins when the hue parameter has only two levels, which can allow for a more efficient use of space:\n\nsns.catplot(x = 'total_bill', y = 'day', kind  ='violin', data = tips, hue = 'sex', split = True)","dea0ce27":"sns.catplot(x = 'total_bill', y = 'day', kind  ='violin', data = tips, hue = 'sex', split = True, inner = 'stick', height=10)","bb14e0ee":"g = sns.catplot(x = 'day', y = 'total_bill', kind = 'violin', inner = None, data = tips, height = 7)\nsns.swarmplot(x = 'day', y = 'total_bill',color = 'k', size = 3,  data = tips, ax = g.ax)","f2c3147c":"# Very insightful plot\nsns.catplot(x = 'sex', y = 'survived', hue = 'class', kind = 'bar', data = titanic )","071c8e1f":"sns.catplot(x = 'sex', y = 'survived', hue = 'class', kind = 'point', data = titanic)","5c6bfca6":"x = randn(100)","9a2a1f28":"# distplot = Distribution Plot\nsns.distplot(x)","5db0eace":"# Rug Plot\nsns.distplot(x, rug = False, bins = 30)\n","746dbc26":"sns.kdeplot(x, shade = True)","ec858c72":"# bw parameter is a smoothening parameter\nsns.kdeplot(x, shade = True, bw = 0.6)","f164303b":"tips.head()","77174038":"x = tips['total_bill']\ny = tips['tip']","53b4a3f3":"sns.jointplot(x = x, y=y)","3f7e80a4":"sns.set()\nsns.jointplot(x = x, y=y, kind  ='hex')","64161011":"sns.jointplot(x = x, y=y, kind  ='kde')","e519cb8f":"f, ax = plt.subplots(figsize = (6,6))\ncmap = sns.cubehelix_palette(as_cmap = True, dark = 0, light = 1, reverse = True)\nsns.kdeplot(x, y, cmap=cmap, n_levels = 60, shade = True)","77a6f387":"g = sns.jointplot(x, y, kind = 'kde', color = 'm')\ng.plot_joint(plt.scatter, c = 'w', s = 30, linewidth = 1, marker = '+')\ng.ax_joint.collections[0].set_alpha(0)","842de780":"df = sns.load_dataset('iris')\ndf.head()","0d32e545":"sns.pairplot(df)","6938b404":"g = sns.PairGrid(df)\ng.map_diag(sns.kdeplot)\ng.map_offdiag(sns.kdeplot,n_levels = 10)","7df5446b":"tips.head()","98616bb2":"sns.regplot(x = 'total_bill', y = 'tip', data = tips)","58439c89":"sns.lmplot(x = 'total_bill', y='tip', data=tips)","bf427dc8":"sns.lmplot(x = 'size', y='tip', data=tips, x_jitter = 0.1)","673ab441":"sns.lmplot(x = 'size', y = 'tip', data = tips, x_estimator= np.mean)","77a773eb":"data = sns.load_dataset('anscombe')\ndata.head()","20cb91c3":"data['dataset'].value_counts()","cb3a75ac":"sns.lmplot(x = 'x', y = 'y', data= data.query(\"dataset == 'I'\"), ci = None, scatter_kws={'s':80})","07556d10":"sns.lmplot(x = 'x', y = 'y', data= data.query(\"dataset == 'II'\"), ci = None, scatter_kws={'s':80}, order = 2)\nsns.lmplot(x = 'x', y = 'y', data= data.query(\"dataset == 'II'\"), ci = None, scatter_kws={'s':80}, order = 1)","34bdd6dd":"f, ax = plt.subplots( figsize = (8,4))\nsns.regplot(x = 'total_bill', y = 'tip', data = tips, ax = ax)","310fa092":" sns.lmplot(x = 'total_bill', y = 'tip', data = tips, col = 'day', col_wrap = 2, height=3)","23f41c2b":"## <font color='green'>Point Plot<\/plot>","6d728da1":"## **Categorical Data Plotting**\n\n* catplot()\n* boxplot()\n* stripplot()\n* swarmplot()\n* etc","39312525":"# Loading tips dataset","36146d7f":"## Correlation Heatmap","4548309b":"![alt text](https:\/\/miro.medium.com\/max\/1338\/0*aEuzoUtlD3mbJlei)","0137058a":"## <font color='blue'>**Visualizaing Distribution of data**<\/font>\n\n* distplot()\n* kdeplot()\n* jointplot()\n* rugplot()","b75ff739":"inner = {\u201cbox\u201d, \u201cquartile\u201d, \u201cpoint\u201d, \u201cstick\u201d, None}, optional\n\n> Representation of the datapoints in the violin interior.\n* If box, draw a miniature boxplot.\n* If quartiles, draw the quartiles of the distribution.\n* If point or stick, show each underlying datapoint.\n* Using None will draw unadorned violins.","c9d44e1d":"### <font color='green'>Categorical vs Categorical Plot","05034b8f":"## <font color='blue'>**Linear Regresion and Relationship**\n\n* regplot()\n* lmplot()\n","a126a604":"# Box Plots\n![Image](https:\/\/miro.medium.com\/max\/1400\/1*2c21SkzJMf3frPXPAR_gZA.png)","5890a920":"## Boxen Plot\n* The Boxen plot is very similar to box plot, except for the fact that it plots different quartile values.\n* By plotting different quartile values, we are able to understand the shape of the distribution particularly in the head end and tail end.","92ace032":"## Importing Titanic Dataset\n","9f6972ad":"## Importing Diamonds Dataset","5225e96a":"#  **Numerical Plot**\n\n\n*   relplot()\n*   scatterplot()\n*   lineplot()","82381f6c":"# Acknowledgements\n\n* [Seaborn Documentation](https:\/\/seaborn.pydata.org\/)","95cc6ff5":"### <font color='green'>Violin Plot<\/font>","61662fb9":"This function provides access to several axes-level functions that show the relationship between a numerical and one or more categorical variables using one of several visual representations. The kind parameter selects the underlying axes-level function to use:\n\n**Categorical scatterplots:**\n\n1.   `stripplot() (with kind=\"strip\"; the default)`\n\n2.   `swarmplot() (with kind=\"swarm\")`\n\n\n**Categorical distribution plots:**\n\n\n1.   `boxplot() (with kind=\"box\")`\n\n2.   `violinplot() (with kind=\"violin\")`\n\n3.   `boxenplot() (with kind=\"boxen\")`\n\n**Categorical estimate plots:**\n\n1.   `pointplot() (with kind=\"point\")`\n\n2.   `barplot() (with kind=\"bar\")`\n\n3.   `countplot() (with kind=\"count\")`","d62e0102":"### <font color='green'>*Combining swarmplot and violinplot*","99b71ba2":"## <font color='green'>**Jointplot**<\/font>\n**Joint distribution plots combine information from scatter plots and histograms to give you detailed information for bi-variate distributions.**","01173a28":"![Image](https:\/\/miro.medium.com\/max\/1400\/1*3VgCwcZraA0u5hMHpRhJcw.png)","292e0b97":"# ***Seaborn Plotting***\n---\n<font color='red'>***Suggestions are most welcome***<\/font>\n\n##  **Numerical Plot**\n\n\n*   relplot()\n*   scatterplot()\n*   lineplot()\n*   heatmap()\n\n## **Categorical Data Plotting**\n\n* catplot()\n* boxplot()\n* stripplot()\n* swarmplot()\n* pointplot()\n\n## **Visualizaing Distribution of data**\n\n* distplot()\n* kdeplot()\n* jointplot()\n* rugplot()\n\n## **Linear Regresion and Relationship**\n\n* regplot()\n* implot()\n","971ecd37":"## <font color='green'>Pair Plot<\/font>\n* Plot pairwise relationships in a dataset. By default, this function will create a grid of Axes such that each numeric variable in data will by shared in the y-axis across a single row and in the x-axis across a single column.\n"}}