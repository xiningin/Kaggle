{"cell_type":{"fc46fd6e":"code","b38fb13a":"code","57a81f4a":"code","cee169e3":"code","d37baf0e":"code","aa2a3172":"code","131a0d0b":"code","3bece6c5":"code","dbe0b670":"code","12052678":"code","92bd43de":"code","6c9fbbc8":"code","de698fec":"code","10ed2ceb":"code","9bf02111":"code","6513a586":"code","feea01b9":"code","e939265e":"code","c8bdacb7":"code","b617bb86":"code","ef05c20e":"code","69eae5c4":"code","3d508be2":"code","991db8fd":"code","0847783c":"code","e714a08f":"code","57833dec":"code","049b8e13":"code","822059e1":"code","19845ba1":"code","3d8a8aef":"code","cf84681e":"code","58c31dc8":"code","60358522":"code","85d1bfd3":"code","34dd3cc4":"code","09945328":"code","39691943":"code","6d4d0ae2":"code","ea3de7f6":"code","4ea45342":"code","8c63e9af":"code","484b8da6":"code","9f9af715":"code","9acc2206":"code","2efe42ba":"code","9456fab3":"code","3d50a2b9":"code","37a30515":"code","255b7c94":"code","4396c563":"code","c8427d96":"code","0cc2d7d8":"code","17b5a437":"code","596c20e7":"code","599445db":"markdown","78d5ce13":"markdown","c2acf65e":"markdown","8e984f98":"markdown","f18fd9db":"markdown","d0a99a1c":"markdown","7b412430":"markdown","66d9fdb5":"markdown","6c2bab56":"markdown","a106cafe":"markdown","a1b20cb1":"markdown","b848b92d":"markdown","a1cefa21":"markdown","0f132bcc":"markdown","34cf7a59":"markdown","a15e20e7":"markdown","f2100587":"markdown","a199680b":"markdown","4f883762":"markdown","ba74668e":"markdown","2f19ec32":"markdown"},"source":{"fc46fd6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b38fb13a":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\nimport seaborn as sns\n\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, roc_auc_score, confusion_matrix, classification_report, plot_roc_curve\nfrom sklearn.model_selection import train_test_split, cross_validate","57a81f4a":"df = pd.read_csv(\"..\/input\/diabetesdataset\/diabetes.csv\")\ndf.head()","cee169e3":"q1 = df[\"Age\"].quantile(0.25)\nq3 = df[\"Age\"].quantile(0.75)\niqr = q3 - q1\nup = q3 + 1.5 * iqr\nlow = q1 - 1.5 * iqr","d37baf0e":"# alt s\u0131n\u0131rdan k\u00fc\u00e7\u00fck ya da \u00fcst s\u0131n\u0131rdan b\u00fcy\u00fck olanlar\ndf[(df[\"Age\"] < low) | (df[\"Age\"] > up)]","aa2a3172":"# ayk\u0131r\u0131 de\u011fere sahip g\u00f6zlem birimlerinin index'leri nedir\ndf[(df[\"Age\"] < low) | (df[\"Age\"] > up)].index","131a0d0b":"def outlier_thresholds(dataframe, col_name, q1=0.25, q3=0.75):\n    quartile1 = dataframe[col_name].quantile(q1)\n    quartile3 = dataframe[col_name].quantile(q3)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit","3bece6c5":"# Ya\u015f de\u011fi\u015fkeninin alt ve \u00fcst s\u0131n\u0131r\u0131 geldi\noutlier_thresholds(df, \"Age\")","dbe0b670":"def check_outlier(dataframe, col_name):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n        return True\n    else:\n        return False","12052678":"check_outlier(df, \"Age\")","92bd43de":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    \"\"\"\n\n    Veri setindeki kategorik, numerik ve kategorik fakat kardinal de\u011fi\u015fkenlerin isimlerini verir.\n    Not: Kategorik de\u011fi\u015fkenlerin i\u00e7erisine numerik g\u00f6r\u00fcn\u00fcml\u00fc kategorik de\u011fi\u015fkenler de dahildir.\n\n    Parameters\n    ------\n        dataframe: dataframe\n                De\u011fi\u015fken isimleri al\u0131nmak istenilen dataframe\n        cat_th: int, optional\n                numerik fakat kategorik olan de\u011fi\u015fkenler i\u00e7in s\u0131n\u0131f e\u015fik de\u011feri\n        car_th: int, optional\n                kategorik fakat kardinal de\u011fi\u015fkenler i\u00e7in s\u0131n\u0131f e\u015fik de\u011feri\n\n    Returns\n    ------\n        cat_cols: list\n                Kategorik de\u011fi\u015fken listesi\n        num_cols: list\n                Numerik de\u011fi\u015fken listesi\n        cat_but_car: list\n                Kategorik g\u00f6r\u00fcn\u00fcml\u00fc kardinal de\u011fi\u015fken listesi\n\n    Examples\n    ------\n        import seaborn as sns\n        df = sns.load_dataset(\"iris\")\n        print(grab_col_names(df))\n\n\n    Notes\n    ------\n        cat_cols + num_cols + cat_but_car = toplam de\u011fi\u015fken say\u0131s\u0131\n        num_but_cat cat_cols'un i\u00e7erisinde.\n\n    \"\"\"\n\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n\n    cat_cols = cat_cols + num_but_cat\n\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n\n    return cat_cols, num_cols, cat_but_car\n\n\n","6c9fbbc8":"cat_cols, num_cols, cat_but_car = grab_col_names(df)\n\nfor col in num_cols:\n    print(col, check_outlier(df, col))","de698fec":"def grab_outliers(dataframe, col_name, index=False):\n    low, up = outlier_thresholds(dataframe, col_name)\n    if dataframe[((dataframe[col_name] < low) | (dataframe[col_name] > up))].shape[0] > 10:\n        print(dataframe[((dataframe[col_name] < low) | (dataframe[col_name] > up))].head())\n    else:\n        print(dataframe[((dataframe[col_name] < low) | (dataframe[col_name] > up))])\n\n    if index:\n        outlier_index = dataframe[((dataframe[col_name] < low) | (dataframe[col_name] > up))].index\n        return outlier_index\n    \ngrab_outliers(df, \"Age\")","10ed2ceb":"grab_outliers(df, \"Age\", True)","9bf02111":"low, up = outlier_thresholds(df, \"Age\")\n\ndf[((df[\"Age\"] < low) | (df[\"Age\"] > up))][\"Age\"]\n\n\ndf.loc[((df[\"Age\"] < low) | (df[\"Age\"] > up)), \"Age\"]\n\ndf.loc[(df[\"Age\"] > up), \"Age\"] = up\ndf.loc[(df[\"Age\"] < low), \"Age\"] = low","6513a586":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n\ndf.shape\n","feea01b9":"for col in [\"Age\"]:\n    print(col, check_outlier(df, col))","e939265e":"df.head()","c8bdacb7":"df.isnull().values.any()","b617bb86":"df.apply(lambda x: x.fillna(x.mean()) if x.dtype != \"O\" else x, axis=0).head()\ndff = df.apply(lambda x: x.fillna(x.mean()) if x.dtype != \"O\" else x, axis=0)","ef05c20e":"df.head()","69eae5c4":"df[\"Pregnancies\"].value_counts()","3d508be2":"df.groupby(\"Pregnancies\")[\"Outcome\"].mean()","991db8fd":"rs = RobustScaler()\ndf[\"Age_robuts_scaler\"] = rs.fit_transform(df[[\"Age\"]])\ndf.describe().T","0847783c":"df.columns = [col.upper() for col in df.columns]\ndf.columns","e714a08f":"df.head(8)","57833dec":"df.loc[((df['GLUCOSE']) < 140), \"IGT\"] = \"NORMAL\"\ndf.loc[(df['GLUCOSE'] >= 140) & (df['GLUCOSE'] <=199), \"IGT\"] = \"OBSERVE\"\ndf.loc[((df['GLUCOSE']) > 200), \"IGT\"] = \"DANGEROUS\"\ndf.head()","049b8e13":"df.loc[((df['INSULIN']) < 120), \"NEW_INSULIN\"] = \"NORMAL\"\ndf.loc[(df['INSULIN'] >= 120) & (df['INSULIN'] <=199), \"NEW_INSULIN\"] = \"HIDDEN\"\ndf.loc[((df['INSULIN']) > 200), \"NEW_INSULIN\"] = \"DIABETES\"\ndf.head()","822059e1":"df.describe().T","19845ba1":"# Hedef de\u011fi\u015fkenin s\u0131n\u0131flar\u0131 ve frekanslar\u0131:\ndf[\"OUTCOME\"].value_counts()","3d8a8aef":"# Hedef de\u011fi\u015fkenin s\u0131n\u0131f oranlar\u0131:\n100 * df[\"OUTCOME\"].value_counts() \/ len(df)","cf84681e":"df[\"BLOODPRESSURE\"].hist(bins=20)\nplt.xlabel(\"BLOODPRESSURE\")\nplt.show()","58c31dc8":"def plot_numerical_col(dataframe, numerical_col):\n    dataframe[numerical_col].hist(bins=20)\n    plt.xlabel(numerical_col)\n    plt.show()","60358522":"# Outcome'\u0131 d\u0131\u015far\u0131da b\u0131rakmak istersek:\ncols = [col for col in df.columns if \"OUTCOME\" not in col]\n\nfor col in cols:\n    plot_numerical_col(df, col)","85d1bfd3":"df.groupby(\"OUTCOME\").agg({\"PREGNANCIES\": \"mean\"})","34dd3cc4":"# Eksik de\u011fer incelemesi:\ndf.isnull().sum()","09945328":"def ohe_cols(dataframe):\n    ohe_cols = [col for col in dataframe.columns if (dataframe[col].dtype == \"O\" and 10 >= dataframe[col].nunique() >= 2)]\n    return ohe_cols\n\n\ndef one_hot_encoder(dataframe, ohe_col_names, drop_first=True):\n    dms = pd.get_dummies(dataframe[ohe_col_names], drop_first=drop_first)    # dummy de\u011fi\u015fken \u00fcretilecek kategorik de\u011fi\u015fkenler (ohe cols)\n    df_ = dataframe.drop(columns=ohe_col_names, axis=1)              # dummy de\u011fi\u015fkene \u00e7evirdi\u011fimiz de\u011fi\u015fkeni d\u0131\u015far\u0131da tutacak yeni df'i olu\u015ftural\u0131m\n    dataframe = pd.concat([df_, dms],axis=1)                      # 1.ve 2.ad\u0131mdaki dataframe'i birle\u015ftirelim\n    return dataframe\n\nohe_col_names = ohe_cols(df)\n\nohe_col_names\n\ndf = one_hot_encoder(df, ohe_col_names)\n\ndf.dtypes\n\nunint = [col for col in df.columns if df[col].dtypes == \"uint8\"]\n\ndf[unint] = df[unint].astype(\"int\")\n\ndf.dtypes","39691943":"# Ba\u011f\u0131ml\u0131 ve ba\u011f\u0131ms\u0131z de\u011fi\u015fkelerin se\u00e7ilmesi:\ny = df[\"OUTCOME\"]\nX = df.drop([\"OUTCOME\"], axis=1)\n","6d4d0ae2":"log_model = LogisticRegression().fit(X, y)\n\nlog_model.intercept_\nlog_model.coef_","ea3de7f6":"# Tahmin\ny_pred = log_model.predict(X)\n\ny_pred[0:10]\ny[0:10]","4ea45342":"# Ba\u015far\u0131 skorlar\u0131:\nprint(classification_report(y, y_pred))","8c63e9af":"# ROC AUC\ny_prob = log_model.predict_proba(X)[:, 1]\nroc_auc_score(y, y_prob)","484b8da6":"# Veri setinin train-test olarak ayr\u0131lmas\u0131:\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.20, random_state=17)","9f9af715":"# Modelin train setine kurulmas\u0131:\nlog_model = LogisticRegression().fit(X_train, y_train)","9acc2206":"# Test setinin modele sorulmas\u0131:\ny_pred = log_model.predict(X_test)","2efe42ba":"# AUC Score i\u00e7in y_prob (1. s\u0131n\u0131fa ait olma olas\u0131l\u0131klar\u0131)\ny_prob = log_model.predict_proba(X_test)[:, 1]","9456fab3":"# Classification report\nprint(classification_report(y_test, y_pred))","3d50a2b9":"# ROC Curve\nplot_roc_curve(log_model, X_test, y_test)\nplt.title('ROC Curve')\nplt.plot([0, 1], [0, 1], 'r--')\nplt.show()\n\nroc_auc_score(y_test, y_prob)","37a30515":"y = df[\"OUTCOME\"]\nX = df.drop([\"OUTCOME\"], axis=1)\n\nlog_model = LogisticRegression().fit(X, y)\n\n\ncv_results = cross_validate(log_model,\n                            X, y,\n                            cv=5,\n                            scoring=[\"accuracy\", \"precision\", \"recall\", \"f1\", \"roc_auc\"])\n\n","255b7c94":"cv_results['test_accuracy'].mean()","4396c563":"cv_results['test_precision'].mean()","c8427d96":"cv_results['test_recall'].mean()","0cc2d7d8":"cv_results['test_f1'].mean()","17b5a437":"cv_results['test_roc_auc'].mean()","596c20e7":"X.columns\n\nrandom_user = X.sample(1, random_state=14)\n\nlog_model.predict(random_user)\n","599445db":"# 10.Model Validation: Holdout","78d5ce13":"# 1. Outliers (Ayk\u0131r\u0131 De\u011ferler)","c2acf65e":"**De\u011fi\u015fkenler**\n* Pregnancies \u2013 Hamilelik say\u0131s\u0131\n* Glucose \u2013 Glukoz\nOral glikoz tolerans testinde 2 saatlik plazma glikoz konsantrasyonu\n* Blood Pressure \u2013 Kan Bas\u0131nc\u0131 (K\u00fc\u00e7\u00fck tansiyon) (mm Hg)\n* SkinThickness \u2013 Cilt Kal\u0131nl\u0131\u011f\u0131\n* Insulin \u2013 2 saatlik serum ins\u00fclini (mu U\/ml)\n* DiabetesPedigreeFunction: \u2013 Fonksiyon\nOral glikoz tolerans testinde 2 saatlik plazma glikoz konsantrasyonu\n* Age \u2013 Ya\u015f (y\u0131l)\n* Outcome: Hastal\u0131\u011fa sahip (1) ya da de\u011fil (0)","8e984f98":"# 4. Feature Scaling (\u00d6zellik \u00d6l\u00e7eklendirme)","f18fd9db":"# 7.Target vs Features","d0a99a1c":"> Normal glikoz de\u011fer aral\u0131\u011f\u0131 140 mg\/ dl dir. Bu bilgilere g\u00f6re IGT(Bozulmu\u015f Glikoz De\u011feri) hesaplad\u0131k.","7b412430":"# 8.Data Preprocessing (Veri \u00d6n \u0130\u015fleme)","66d9fdb5":"# 9.Model & Prediction","6c2bab56":"> T\u00fcm say\u0131sal de\u011fi\u015fkenlerin \u00f6zet istatistikleri:","a106cafe":"# 6.Feature'lar\u0131n Analizi","a1b20cb1":"# 11.Model Validation: 10-Fold Cross Validation","b848b92d":"**Ya\u015f de\u011fi\u015fkenin ayk\u0131r\u0131 de\u011ferlerine ait bilgiler geldi**","a1cefa21":"# 5. Feature Extraction (\u00d6zellik \u00c7\u0131kar\u0131m\u0131)","0f132bcc":"# 3.Rare Encoding","34cf7a59":"> Ayk\u0131r\u0131 De\u011fer Problemini \u00c7\u00f6zme","a15e20e7":"Rastgele hastan\u0131n diyabet olma yada olmama durumu","f2100587":"> Eksik de\u011fer var m\u0131 yok mu sorgusu","a199680b":"# 2. Missing Values (Eksik De\u011ferler)","4f883762":"# Prediction for A New Observation","ba74668e":"> Diyabet hastal\u0131\u011f\u0131na sahip ki\u015filerin hamile olma oranlar\u0131","2f19ec32":"> B\u00fct\u00fcn kolon isimlerini b\u00fcy\u00fctelim"}}