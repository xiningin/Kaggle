{"cell_type":{"139562c0":"code","2425685d":"code","c8beaef6":"code","56d75e6a":"code","a5b09256":"code","fb8852a7":"code","c42dc4e3":"code","a4f73ae3":"code","167ddfc2":"code","2e405aac":"code","f0399b84":"code","ea47f7fb":"code","2edd9874":"code","6b01274d":"code","983433e4":"markdown","cfc72564":"markdown","6b21f46d":"markdown","75214718":"markdown"},"source":{"139562c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2425685d":"df = pd.read_csv(\"..\/input\/data.csv\")\nprint(df.info())","c8beaef6":"df[\"Video Uploads\"] = pd.to_numeric(df[\"Video Uploads\"],errors='coerce')\ndf[\"Subscribers\"] = pd.to_numeric(df[\"Subscribers\"],errors='coerce')","56d75e6a":"df.info()","a5b09256":"df.corr()","fb8852a7":"# correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(df.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","c42dc4e3":"df1 = df.drop(df.loc[:,:\"Channel name\"],axis = 1)","a4f73ae3":"normalize_df1 = (df1-df1.min())\/(df1.max()-df1.min())","167ddfc2":"video_Uploads = normalize_df1[\"Video Uploads\"]\nvideo_Views = normalize_df1[\"Video views\"]\n","2e405aac":"video_Views.plot(kind = \"line\", color = \"g\",label = \"Video Views\",linewidth = 1,grid = True,linestyle = \"--\")\nnormalize_df1.Subscribers.plot(kind = \"line\", color = \"r\",label = \"Subscribers\",linewidth = 1,grid = True,linestyle = \":\")\nplt.legend()\nplt.title(\"Line Plot\")\nplt.xlabel(\"x axis\")\nplt.ylabel(\"y axis\")\nplt.show()\n","f0399b84":"normalize_df1.plot(kind='scatter', x='Subscribers', y='Video views',alpha = 0.5,color = 'red')\nplt.title(\"Scatter Plot\")\nplt.show()","ea47f7fb":"top500 = normalize_df1.head(500)\ntop500.corr()","2edd9874":"\nvideo_Views1 = top500[\"Video views\"]\n\ntop500.Subscribers.plot(kind = \"line\",label = \"Subscribers\", color = \"r\", linewidth = 1,grid = True,alpha =0.5 )\nvideo_Views1.plot(kind = \"line\",label = \"Video Views\", color = \"g\", linewidth = 1,grid = True,alpha =0.5 )\nplt.legend()\nplt.title(\"Line Plot\")\nplt.xlabel(\"x axis\")\nplt.ylabel(\"y axis\")\nplt.show()","6b01274d":"top500.plot(kind='scatter', x='Subscribers', y='Video views',alpha = 0.5,color = 'red')\nplt.title(\"Scatter Plot\")\nplt.show()","983433e4":"We can say there is a strong relationship between Subcribers and Video Views by looking at the correlation table","cfc72564":"We make for top 500 data","6b21f46d":"Now we can check correlations between the numeric columns","75214718":"We looked the data frame information and we saw Video Uploads and Subscribers columns is object. We must convert object to numeric for this columns and relate the between numeric columns."}}