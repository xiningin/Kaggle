{"cell_type":{"91d086a4":"code","bbcc8368":"code","a2d990b0":"code","88f5d3aa":"code","e95dc1c9":"code","73f7e0b6":"code","005e8c55":"code","8e8dade5":"code","48b72ccf":"code","2fe49f77":"code","8eea78b6":"code","f915c2fd":"code","276e2399":"code","2f5788da":"code","8d9cebe7":"code","1e21e45a":"code","65f7f69d":"code","e9be5ff4":"code","1e84e0d8":"code","e1baa61e":"code","847a614a":"code","8e7e3e8b":"code","7c802bd6":"code","d849728f":"code","bf629f98":"code","99d85de7":"code","77778e9c":"code","3eafeb00":"code","b8b9f02c":"markdown","8f9e4a81":"markdown","b449bfd8":"markdown","9d694f59":"markdown","1b3af58c":"markdown","83f16d00":"markdown","fa63e2ca":"markdown","c8c0c18b":"markdown","063ab54a":"markdown","e6fa213c":"markdown","d183f2be":"markdown","e25f9190":"markdown","499edf34":"markdown","fde374df":"markdown","1f47e5a0":"markdown","08705edd":"markdown","1ff155ab":"markdown","5b37270f":"markdown","ca5ee992":"markdown","976df13e":"markdown","084f9bdb":"markdown","847128d3":"markdown","299f9136":"markdown","a2dc6f84":"markdown"},"source":{"91d086a4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nsns.set_palette('pastel')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","bbcc8368":"pd.set_option('display.max_columns',None)\npd.set_option('display.width',None)\ndf = pd.read_csv('\/kaggle\/input\/marketing-data\/marketing_data.csv')\ndf.head()","a2d990b0":"df.info()","88f5d3aa":"df.columns = df.columns.str.replace(' ','')\ndf.columns","e95dc1c9":"df.loc[df.Income.isna()]","73f7e0b6":"df=df.dropna()\ndf.duplicated().sum()","005e8c55":"df['Income'] = df['Income'].str.replace('[$,]','').astype('float')\ndf['Dt_Customer'] = pd.to_datetime(df['Dt_Customer'],infer_datetime_format=True,errors='raise')","8e8dade5":"df['MntTotal'] = df.loc[:,'MntWines':'MntGoldProds'].sum(axis=1)\ndf['Age'] = 2021 - df['Year_Birth']\ndf['Year_Enroll'] = 2021 - df['Dt_Customer'].dt.year\ndf['Dependents'] = df['Kidhome'] + df['Teenhome']","48b72ccf":"df.head(10)","2fe49f77":"df_to_plot=df.loc[:,'MntWines':'NumWebVisitsMonth'].join(df.loc[:,'MntTotal':'Dependents']).join(df['Income'])\nfor col in df_to_plot.columns:\n    fig,(ax0,ax1) = plt.subplots(1,2)\n    fig.set_size_inches(16,4)\n    sns.histplot(df_to_plot[col],ax=ax0,kde=True)\n    sns.boxplot(df_to_plot[col],ax=ax1)\n    ax0.axvline(x=np.mean(df_to_plot[col]),label='Avg',linestyle='--')\n    ax0.legend()\n    plt.show()\n    print(df_to_plot[col].describe())","8eea78b6":"df = df[df.Age <=100]\ndf.shape","f915c2fd":"purchase = df.loc[:,'NumDealsPurchases':'NumWebVisitsMonth']\nproducts = df.loc[:,'MntWines':'MntGoldProds']\ncampaign = df.loc[:,'AcceptedCmp3':'AcceptedCmp2']","276e2399":"plt.figure(figsize=(16,12))\nsns.heatmap(df.corr(method='spearman'),annot=True,mask=(df.corr()**2<0.25))","2f5788da":"sns.catplot(data=df,x='Education',col='Country',col_wrap=2,kind='count',hue='Marital_Status',legend=True,height=5,aspect=1.4)","8d9cebe7":"sns.catplot(data=df,x='Education',y='MntTotal',estimator=sum\n            ,col='Country',col_wrap=2,kind='point',hue='Marital_Status',ci=None,legend=True,height=5,aspect=1.4)","1e21e45a":"sns.catplot(data=df,x='Education',y='MntTotal'\n            ,col='Country',col_wrap=2,kind='point',hue='Marital_Status',ci=None,legend=True,height=5,aspect=1.4)","65f7f69d":"fig,(ax0,ax1) = plt.subplots(1,2)\nfig.set_size_inches(16,12)\nax0.pie(np.sum(campaign),autopct='%1.1f%%',labels=['Campaign 3','Campaign 4','Campaign 5','Campaign 1','Campaign 2'])\nax0.set_title('Campaign accepted rate')\nax1.pie(np.sum(products),autopct='%1.1f%%',labels=['Wines','Fruits','Meat','Fish','Sweet','Gold'])\nax1.set_title('Product amount rate')","e9be5ff4":"fig,ax = plt.subplots(2,4)\nfig.set_size_inches(16,12)\nax[0,0].pie(np.sum(df.query(\"Country=='SP'\").loc[:,'AcceptedCmp3':'AcceptedCmp2'])\n            ,autopct='%1.1f%%',labels=['Campaign 3','Campaign 4','Campaign 5','Campaign 1','Campaign 2'])\nax[0,0].set_title('SP')\nax[0,1].pie(np.sum(df.query(\"Country=='CA'\").loc[:,'AcceptedCmp3':'AcceptedCmp2'])\n            ,autopct='%1.1f%%',labels=['Campaign 3','Campaign 4','Campaign 5','Campaign 1','Campaign 2'])\nax[0,1].set_title('CA')\nax[0,2].pie(np.sum(df.query(\"Country=='US'\").loc[:,'AcceptedCmp3':'AcceptedCmp2'])\n            ,autopct='%1.1f%%',labels=['Campaign 3','Campaign 4','Campaign 5','Campaign 1','Campaign 2'])\nax[0,2].set_title('US')\nax[0,3].pie(np.sum(df.query(\"Country=='AUS'\").loc[:,'AcceptedCmp3':'AcceptedCmp2'])\n            ,autopct='%1.1f%%',labels=['Campaign 3','Campaign 4','Campaign 5','Campaign 1','Campaign 2'])\nax[0,3].set_title('AUS')\nax[1,0].pie(np.sum(df.query(\"Country=='GER'\").loc[:,'AcceptedCmp3':'AcceptedCmp2'])\n            ,autopct='%1.1f%%',labels=['Campaign 3','Campaign 4','Campaign 5','Campaign 1','Campaign 2'])\nax[1,0].set_title('GER')\nax[1,1].pie(np.sum(df.query(\"Country=='IND'\").loc[:,'AcceptedCmp3':'AcceptedCmp2'])\n            ,autopct='%1.1f%%',labels=['Campaign 3','Campaign 4','Campaign 5','Campaign 1','Campaign 2'])\nax[1,1].set_title('IND')\nax[1,2].pie(np.sum(df.query(\"Country=='SA'\").loc[:,'AcceptedCmp3':'AcceptedCmp2'])\n            ,autopct='%1.1f%%',labels=['Campaign 3','Campaign 4','Campaign 5','Campaign 1','Campaign 2'])\nax[1,2].set_title('SA')\nax[1,3].pie(np.sum(df.query(\"Country=='ME'\").loc[:,'AcceptedCmp3':'AcceptedCmp2'])\n            ,autopct='%1.1f%%',labels=['Campaign 3','Campaign 4','Campaign 5','Campaign 1','Campaign 2'])\nax[1,3].set_title('ME')","1e84e0d8":"fig,ax = plt.subplots(2,4)\nfig.set_size_inches(16,12)\nax[0,0].pie(np.sum(df.query(\"Country=='SP'\").loc[:,'MntWines':'MntGoldProds'])\n            ,autopct='%1.1f%%',labels=['Wines','Fruits','Meat','Fish','Sweet','Gold'])\nax[0,0].set_title('SP')\nax[0,1].pie(np.sum(df.query(\"Country=='CA'\").loc[:,'MntWines':'MntGoldProds'])\n            ,autopct='%1.1f%%',labels=['Wines','Fruits','Meat','Fish','Sweet','Gold'])\nax[0,1].set_title('CA')\nax[0,2].pie(np.sum(df.query(\"Country=='US'\").loc[:,'MntWines':'MntGoldProds'])\n            ,autopct='%1.1f%%',labels=['Wines','Fruits','Meat','Fish','Sweet','Gold'])\nax[0,2].set_title('US')\nax[0,3].pie(np.sum(df.query(\"Country=='AUS'\").loc[:,'MntWines':'MntGoldProds'])\n            ,autopct='%1.1f%%',labels=['Wines','Fruits','Meat','Fish','Sweet','Gold'])\nax[0,3].set_title('AUS')\nax[1,0].pie(np.sum(df.query(\"Country=='GER'\").loc[:,'MntWines':'MntGoldProds'])\n            ,autopct='%1.1f%%',labels=['Wines','Fruits','Meat','Fish','Sweet','Gold'])\nax[1,0].set_title('GER')\nax[1,1].pie(np.sum(df.query(\"Country=='IND'\").loc[:,'MntWines':'MntGoldProds'])\n            ,autopct='%1.1f%%',labels=['Wines','Fruits','Meat','Fish','Sweet','Gold'])\nax[1,1].set_title('IND')\nax[1,2].pie(np.sum(df.query(\"Country=='SA'\").loc[:,'MntWines':'MntGoldProds'])\n            ,autopct='%1.1f%%',labels=['Wines','Fruits','Meat','Fish','Sweet','Gold'])\nax[1,2].set_title('SA')\nax[1,3].pie(np.sum(df.query(\"Country=='ME'\").loc[:,'MntWines':'MntGoldProds'])\n            ,autopct='%1.1f%%',labels=['Wines','Fruits','Meat','Fish','Sweet','Gold'])\nax[1,3].set_title('ME')","e1baa61e":"df['WinesRate']=df['MntWines']\/df['MntTotal']\ndf['FruitsRate']=df['MntFruits']\/df['MntTotal']\ndf['MeatRate']=df['MntMeatProducts']\/df['MntTotal']\ndf['FishRate']=df['MntFishProducts']\/df['MntTotal']\ndf['SweetRate']=df['MntSweetProducts']\/df['MntTotal']\ndf['GoldRate']=df['MntGoldProds']\/df['MntTotal']\ndf.head()","847a614a":"sns.pairplot(data=df,x_vars=['WinesRate','FruitsRate','MeatRate','FishRate','SweetRate','GoldRate']\n            ,y_vars=['NumDealsPurchases','NumWebPurchases','NumCatalogPurchases','NumStorePurchases'],kind='reg'\n            ,plot_kws=dict(x_jitter=0.1,y_jitter=0.1,scatter_kws=dict(s=10,alpha=0.2),line_kws=dict(color='orange')))","8e7e3e8b":"sns.pairplot(data=df,x_vars=['WinesRate','FruitsRate','MeatRate','FishRate','SweetRate','GoldRate']\n            ,y_vars=['AcceptedCmp1','AcceptedCmp2','AcceptedCmp3','AcceptedCmp4','AcceptedCmp5','Complain'],kind='reg'\n            ,plot_kws=dict(x_jitter=0.1,y_jitter=0.1,logistic=True,ci=None\n                           ,scatter_kws=dict(s=10,alpha=0.3)\n                           ,line_kws=dict(color='orange')))","7c802bd6":"# preprocessing\n\ndf['Education'] = df['Education'].astype('category')\ndf['Marital_Status'] = df['Marital_Status'].astype('category')\ndf['AcceptedCmp1'] = df['AcceptedCmp1'].astype('category')\ndf['AcceptedCmp2'] = df['AcceptedCmp2'].astype('category')\ndf['AcceptedCmp3'] = df['AcceptedCmp3'].astype('category')\ndf['AcceptedCmp4'] = df['AcceptedCmp4'].astype('category')\ndf['AcceptedCmp5'] = df['AcceptedCmp5'].astype('category')\ndf['Response'] = df['Response'].astype('category')\ndf['Complain'] = df['Complain'].astype('category')\ndf['Country'] = df['Country'].astype('category')\ndf.info()","d849728f":"# feature & target split\n\nX = df.loc[:,'Education':'Income'].join(df.loc[:,'Recency':'Country']).join(df.loc[:,'Age':'Dependents'])\ny = df['MntTotal']\nX.head()","bf629f98":"from sklearn.feature_extraction import DictVectorizer\nfrom sklearn.pipeline import Pipeline\nimport xgboost as xgb\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import train_test_split\n\n# convert X to dict for DictVectorizer\nX_dict = X.to_dict('records')\nX_train, X_test, y_train, y_test = train_test_split(X_dict, y, test_size=0.2, random_state=2)\n\n# encode categorical variables\nsteps = Pipeline([\n                    ('encoder', DictVectorizer(sparse=False)),\n                    ('xgbreg', xgb.XGBRegressor(seed=2))\n                ])\n\n#  XGBOOST regressor hyperparameters turning by Random Search\nparams = {\n            'xgbreg__n_estimators' : np.arange(10,200,5),\n            'xgbreg__learning_rate' : np.arange(0.1,1,0.02),\n            'xgbreg__max_depth' : np.arange(3,20,1),\n            'xgbreg__colsample_bytree' : np.arange(0.2,1,0.05)\n         }\n\nrandomized_mse = RandomizedSearchCV(steps,cv=10,param_distributions=params,n_iter=2\n                                    ,scoring='neg_mean_squared_error',verbose=1,random_state=2)\n\n# fit model and print best hyperparameters\nrandomized_mse.fit(X_train, y_train)\nprint(\"Best estimator found: \", randomized_mse.best_estimator_)\nprint(\"Lowest RMSE found: \", np.sqrt(np.abs(randomized_mse.best_score_)))","99d85de7":"print('MntTotal Mean: ',y.mean())\nprint('MntTotal Median: ',y.median())","77778e9c":"# fine model\n\nregpipeline = Pipeline([\n                            ('encoder', DictVectorizer(sparse=False)),\n                            ('xgbreg', xgb.XGBRegressor(base_score=0.5, booster='gbtree',\n                                                      colsample_bylevel=1, colsample_bynode=1,\n                                                      colsample_bytree=0.7999999999999998, gamma=0,\n                                                      gpu_id=-1, importance_type='gain',\n                                                      interaction_constraints='',\n                                                      learning_rate=0.16000000000000003,\n                                                      max_delta_step=0, max_depth=19,\n                                                      min_child_weight=1, missing=np.nan,\n                                                      monotone_constraints='()', n_estimators=80,\n                                                      n_jobs=8, num_parallel_tree=1, random_state=2,\n                                                      reg_alpha=0, reg_lambda=1, scale_pos_weight=1,\n                                                      seed=2, subsample=1, tree_method='exact',\n                                                      validate_parameters=1, verbosity=None))\n                        ])\n\nregpipeline.fit(X_train, y_train)\nR2_score = regpipeline.score(X_test, y_test)\nprint('XGBOOST Model R2-Score: {:.2%}'.format(R2_score))","3eafeb00":"# plot Test - Predict comparison curve\n\ny_pred = regpipeline.predict(X_test)\nplt.plot(range(len(y_test)),sorted(y_test),c='black',label='Test')\nplt.plot(range(len(y_pred)),sorted(y_pred),c='red',label='Predict')\nplt.legend()","b8b9f02c":"\u7ed3\u5408\u5404\u56fd\u7528\u6237\u6d3b\u52a8\u53c2\u4e0e\u7387\u4ee5\u53ca\u5546\u54c1\u79cd\u7c7b\u8d2d\u4e70\u7387\u53ef\u4ee5\u770b\u51fa\uff1a\n- \u5370\u5ea6\u548c\u7f8e\u56fd\u8089\u7c7b\u9500\u91cf\u5360\u6bd4\u8f83\u5176\u4ed6\u56fd\u5bb6\u7a0d\u9ad8\uff0c\u5206\u522b\u4e3a30.5%\u548c29.9%\n- \u897f\u73ed\u7259\u7684\u9152\u7c7b\u9500\u91cf\u5360\u6bd4\u6700\u9ad8\uff0c\u4e3a51%\uff1b\u6fb3\u5927\u5229\u4e9a\u548c\u5fb7\u56fd\u9ec4\u91d1\u9500\u91cf\u5360\u6bd4\u8f83\u5176\u4ed6\u56fd\u5bb6\u66f4\u9ad8\uff0c\u5206\u522b\u4e3a8.3%\u548c7.9%","8f9e4a81":"- \u5404\u7c7b\u5546\u54c1\u8d2d\u4e70\u91cf\u7684\u6570\u636e\u4e2d\u5b58\u5728\u8f83\u591a\u79bb\u7fa4\u503c\n- \u5728'Age'\u5b57\u6bb5\u4e2d\u5b58\u5728\u4e24\u4e2a\u8d85\u8fc7120\u7684\u79bb\u7fa4\u503c\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u6545\u5f53\u4f5c\u5f02\u5e38\u5220\u9664\u3002","b449bfd8":"- \u9152\u7c7b\u8d2d\u4e70\u91cf\u5360\u6bd4\u8d8a\u9ad8\u7684\u7528\u6237\u66f4\u503e\u5411\u4e8e\u53c2\u4e0e\u6d3b\u52a84\n- \u8089\u7c7b\u8d2d\u4e70\u91cf\u5360\u6bd4\u8d8a\u9ad8\u7684\u7528\u6237\u66f4\u503e\u5411\u4e8e\u53c2\u4e0e\u6d3b\u52a81\u548c\u6d3b\u52a85\n- \u9ec4\u91d1\u8d2d\u4e70\u91cf\u5360\u6bd4\u8d8a\u9ad8\u7684\u7528\u6237\u66f4\u503e\u5411\u4e8e\u53c2\u4e0e\u6d3b\u52a83","9d694f59":"# Marketing Analytics EDA & XGBOOST Regression\n**\u6570\u636e\u5904\u7406**\n\n- \u7a7a\u503c\u3001\u5f02\u5e38\u503c\n- \u6dfb\u52a0\u4e86\u5e74\u9f84\u3001\u603b\u8d2d\u4e70\u91cf\u4ee5\u53ca\u5404\u54c1\u7c7b\u8d2d\u4e70\u5360\u6bd4\u5b57\u6bb5\n\n**\u6570\u636e\u53ef\u89c6\u5316**\n\n- \u901a\u8fc7\u53ef\u89c6\u5316\u7ed3\u679c\u5bf9\u5730\u533a\u3001\u5b66\u5386\u3001\u5a5a\u59fb\u72b6\u51b5\u7684\u5206\u5e03\u4ee5\u53ca\u4e0e\u8d2d\u4e70\u529b\u4e4b\u95f4\u7684\u5173\u7cfb\u8fdb\u884c\u7c97\u7565\u5206\u6790\n- \u901a\u8fc7\u53ef\u89c6\u5316\u7ed3\u679c\u5bf9\u5546\u54c1\u79cd\u7c7b\u4e0e\u8d2d\u4e70\u65b9\u5f0f\u3001\u6d3b\u52a8\u54cd\u5e94\u4e4b\u95f4\u7684\u5173\u7cfb\u8fdb\u884c\u7c97\u7565\u5206\u6790\n\n**XGBOOST\u56de\u5f52\u9884\u6d4b**\n- Pipeline\u7f16\u7801\u3001\u5efa\u6a21\n- RandomSearh\u8c03\u53c2\n- \u4ea4\u53c9\u9a8c\u8bc1\n- R2-Score = 99.44%","1b3af58c":"## \u6570\u636e\u6e05\u6d17","83f16d00":"## XGBOOST\u56de\u5f52","fa63e2ca":"- \u6d3b\u52a82\u7684\u53c2\u4e0e\u7387\u6781\u4f4e\n- \u51fa\u552e\u7684\u5546\u54c1\u4e3b\u8981\u4ee5\u9152\u7c7b(50.3%)\u3001\u8089\u7c7b(27.5%)\u4e3a\u4e3b","c8c0c18b":"\u7531\u4e8e\u6570\u636e\u4e0d\u662f\u8fde\u7eed\u5206\u5e03\u7684\uff0c\u6240\u4ee5\u5173\u7cfb\u56fe\u91c7\u7528spearman\u76f8\u5173\u7cfb\u6570\u66f4\u5408\u9002","063ab54a":"\u521b\u5efa\u4e09\u5f20\u65b0\u8868","e6fa213c":"\u901a\u8fc7\u4e0a\u8868\u53ef\u4ee5\u53d1\u73b0Income\u5b57\u6bb5\u4e2d\u768424\u4e2a\u7a7a\u503c\u662f\u968f\u673a\u5206\u5e03\u7684\uff0c\u8fd9\u4e9b\u6570\u636e\u5927\u7ea6\u5360\u603b\u4f53\u6837\u672c\u76841%\uff0c\u53ef\u4ee5\u76f4\u63a5\u5220\u9664\u3002","d183f2be":"\u53d1\u73b0Income\u5b57\u6bb5\u4e2d\u5b58\u572824\u4e2a\u7a7a\u503c\uff0c\u4e14\u5b57\u6bb5\u540d\u4e0d\u89c4\u8303\u3002","e25f9190":"\u4eba\u5747\u8d2d\u4e70\u91cf\uff1a\n- \u4e27\u5076\u4eba\u58eb\u5728\u5404\u56fd\u5bb6\u7684\u4eba\u5747\u8d2d\u4e70\u91cf\u90fd\u6bd4\u8f83\u9ad8\uff0c\u5c24\u5176\u662f\u897f\u73ed\u7259\uff08\u4e3b\u8981\u5e02\u573a\uff09\u3002\n- \u5728\u897f\u73ed\u7259\u5e02\u573a\u4e2d\uff0c\u7855\u58eb\u5b66\u5386\u7684\u7528\u6237\u4eba\u5747\u8d2d\u4e70\u91cf\u7565\u9ad8\u4e8e\u5176\u4ed6\u5b66\u5386\u7528\u6237\uff1b\u5df2\u5a5a\u4eba\u58eb\u4e2d\u535a\u58eb\u7684\u8d2d\u4e70\u529b\u6700\u5f3a\u3002","499edf34":"\u603b\u8d2d\u4e70\u91cf\uff1a\n- \u672c\u79d1\u7528\u6237\u7684\u603b\u8d2d\u4e70\u91cf\u6700\u591a\uff0c\u535a\u58eb\u7528\u6237\u8d2d\u4e70\u91cf\u7565\u591a\u4e8e\u7855\u58eb\u7528\u6237\u3002\n- \u5df2\u5a5a\u7528\u6237\u7684\u603b\u8d2d\u4e70\u91cf\u6700\u591a\uff0c\u604b\u7231\u7528\u6237\u8d2d\u4e70\u91cf\u7565\u591a\u4e8e\u5355\u8eab\u7528\u6237\u3002","fde374df":"\u7531\u4e8e\u8868\u4e2d\u5b58\u5728\u591a\u4e2a\u5546\u54c1\u79cd\u7c7b\uff0c\u5728\u63a2\u7a76\u5355\u4e00\u54c1\u7c7b\u4e0e\u8d2d\u4e70\u9014\u5f84\u7684\u5173\u7cfb\u65f6\uff0c\u4e3a\u4e86\u4e00\u5b9a\u7a0b\u5ea6\u964d\u4f4e\u5176\u4ed6\u53d8\u91cf\u7684\u5f71\u54cd\uff0c\u5bf9\u5404\u5546\u54c1\u79cd\u7c7b\u8d2d\u4e70\u91cf\u505a\u5f52\u4e00\u5316\u5904\u7406\uff0c\u53d8\u4e3a\u5404\u54c1\u7c7b\u5360\u603b\u4f53\u8d2d\u4e70\u7387\u3002\n- ***\u8fd9\u5f20\u8868\u662f\u7528\u6237\u8868,\u5305\u542b\u4e86\u7528\u6237\u4e24\u5e74\u5185\u8d2d\u4e70\u7684\u6240\u6709\u5546\u54c1\uff0c\u51c6\u786e\u6709\u6548\u7684\u7ed3\u679c\u5e94\u5f53\u5bf9\u8ba2\u5355\u8868\u6570\u636e\u8fdb\u884c\u5206\u6790\u540e\u5f97\u51fa***","1f47e5a0":"\u53ef\u4ee5\u770b\u51fa\uff1a\n- \u7528\u6237\u4e3b\u8981\u6765\u81ea\u4e8e\u897f\u73ed\u7259,\u52a0\u62ff\u5927\u548c\u6c99\u7279\u963f\u62c9\u4f2f\u6b21\u4e4b\uff1b\u7f8e\u56fd\u3001\u6fb3\u5927\u5229\u4e9a\u3001\u5fb7\u56fd\u3001\u5370\u5ea6\u6709\u5c11\u91cf\u7528\u6237\uff1b\u9ed1\u5c71\u53ea\u67093\u4f4d\u7528\u6237\n- \u7528\u6237\u7684\u5b66\u5386\u4ee5\u672c\u79d1\u3001\u535a\u58eb\u3001\u7855\u58eb\u5c45\u591a\uff08\u6309\u6570\u91cf\u6392\u540d\uff09\n- \u5df2\u5a5a\u3001\u5355\u8eab\u3001\u604b\u7231\u4eba\u58eb\u5360\u7528\u6237\u7684\u4e3b\u4f53\uff0c\u540c\u65f6\u8fd8\u5b58\u5728\u5c11\u91cf\u79bb\u5a5a\u548c\u4e27\u5076\u4eba\u58eb","08705edd":"- \u6d3b\u52a8\u4e8c\u7684\u54cd\u5e94\u7a0b\u5ea6\u975e\u5e38\u4f4e\uff0c\u5728\u7f8e\u56fd\u548c\u6fb3\u5927\u5229\u4e9a\u751a\u81f3\u65e0\u4eba\u53c2\u4e0e\u3002","1ff155ab":"\u4e3a\u4fbf\u4e8e\u5206\u6790\uff0c\u6dfb\u52a0'Age'\u3001'MntTotal'\u3001'Year_Enroll'\u3001'Dependents'\u5b57\u6bb5","5b37270f":"## \u5b57\u6bb5\u542b\u4e49\n- **ID\uff1a** Customer's unique identifier\n- **Year_Birth\uff1a** Customer's birth year\n- **Education\uff1a** Customer's education level\n- **Marital_Status\uff1a** Customer's marital status\n- **Income\uff1a** Customer's yearly household income\n- **Kidhome\uff1a** Number of children in customer's household\n- **Teenhome\uff1a** Number of teenagers in customer's household\n- **Dt_Customer\uff1a** Date of customer's enrollment with the company\n- **Recency\uff1a** Number of days since customer's last purchase\n- **MntWines\uff1a** Amount spent on wine in the last 2 years\n- **MntFruits\uff1a** Amount spent on fruits in the last 2 years\n- **MntMeatProducts\uff1a** Amount spent on meat in the last 2 years\n- **MntFishProducts\uff1a** Amount spent on fish in the last 2 years\n- **MntSweetProducts\uff1a** Amount spent on sweets in the last 2 years\n- **MntGoldProds\uff1a** Amount spent on gold in the last 2 years\n- **NumDealsPurchases\uff1a** Number of purchases made with a discount\n- **NumWebPurchases\uff1a** Number of purchases made through the company's web site\n- **NumCatalogPurchases\uff1a** Number of purchases made using a catalogue\n- **NumStorePurchases\uff1a** Number of purchases made directly in stores\n- **NumWebVisitsMonth\uff1a** Number of visits to company's web site in the last month\n- **AcceptedCmp3\uff1a** 1 if customer accepted the offer in the 3rd campaign, 0 otherwise\n- **AcceptedCmp4\uff1a** 1 if customer accepted the offer in the 4th campaign, 0 otherwise\n- **AcceptedCmp5\uff1a** 1 if customer accepted the offer in the 5th campaign, 0 otherwise\n- **AcceptedCmp1\uff1a** 1 if customer accepted the offer in the 1st campaign, 0 otherwise\n- **AcceptedCmp2\uff1a** 1 if customer accepted the offer in the 2nd campaign, 0 otherwise\n- **Response\uff1a** 1 if customer accepted the offer in the last campaign, 0 otherwise\n- **Complain\uff1a** 1 if customer complained in the last 2 years, 0 otherwise\n- **Country\uff1a** Customer's location","ca5ee992":"\u4ece\u4ee5\u4e0a\u5173\u7cfb\u56fe\u53ef\u4ee5\u7c97\u7565\u5730\u770b\u51fa\uff1a\n- \u7528\u6237\u6536\u5165\u4e0e\u8d2d\u4e70\u91cf\u3001\u76ee\u5f55\u8d2d\u4e70\u6b21\u6570\u4e4b\u95f4\u7684\u76f8\u5173\u7cfb\u6570\u57280.79 - 0.85\u4e4b\u95f4\uff0c\u5177\u6709\u8f83\u5f3a\u6b63\u76f8\u5173\u6027\uff1b\u800c\u7528\u6237\u6536\u5165\u4e0e\u7f51\u9875\u6d4f\u89c8\u6b21\u6570\u5219\u5b58\u5728\u4e00\u5b9a\u7684\u8d1f\u76f8\u5173\u6027\u3002\n- \u5bb6\u5ead\u513f\u7ae5\u6570\u91cf\u4e0e\u603b\u8d2d\u4e70\u91cf\u76f8\u5173\u7cfb\u6570\u4e3a-0.62\uff0c\u4e0e\u7ebf\u4e0b\u8d2d\u4e70\u91cf\u76f8\u5173\u7cfb\u6570\u4e3a-0.6\uff0c\u8bf4\u660e\u5bb6\u4e2d\u6709\u513f\u7ae5\u7684\u7528\u6237\u7684\u7ebf\u4e0b\u8d2d\u4e70\u91cf\u548c\u603b\u8d2d\u4e70\u91cf\u53ef\u80fd\u76f8\u5bf9\u8f83\u5c11\u3002\n- \u5206\u6790\u5355\u4e00\u5546\u54c1\u79cd\u7c7b\u4e0e\u8d2d\u4e70\u65b9\u5f0f\u3001\u6d3b\u52a8\u54cd\u5e94\u4e4b\u95f4\u7684\u5173\u7cfb\u5e94\u8be5\u6392\u9664\u5176\u4ed6\u53d8\u91cf\u7684\u5f71\u54cd\uff0c\u5728\u4e4b\u540e\u8fdb\u884c\u3002","976df13e":"- \u9152\u7c7b\u5546\u54c1\u8d2d\u4e70\u5360\u6bd4\u8d8a\u9ad8\u7684\u7528\u6237\u901a\u8fc7\u95e8\u5e97\u3001\u7f51\u7ad9\u3001\u6298\u6263\u8d2d\u4e70\u7684\u6b21\u6570\u8d8a\u591a\u3002\n- \u8089\u7c7b\u5546\u54c1\u8d2d\u4e70\u5360\u6bd4\u9ad8\u7684\u7528\u6237\u6bd4\u8f83\u503e\u5411\u4e8e\u9009\u62e9\u7ebf\u4e0b\u95e8\u5e97\u548c\u76ee\u5f55\u8d2d\u4e70\u3002","084f9bdb":"\u8bef\u5dee\u5927\u7ea6\u57288% - 15%\u4e4b\u95f4\uff0c\u7ed3\u679c\u6bd4\u8f83\u4e00\u822c\uff0c\u4f46\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u5f02\u5e38\u503c\u5bfc\u81f4\u7684\uff0c\u518d\u67e5\u770b\u4e00\u4e0bR2-Score","847128d3":"\u4e3a\u5404\u54c1\u7c7b\u9500\u91cf\u3001\u5404\u9014\u5f84\u4ed8\u6b3e\u6570\u3001\u7528\u6237\u5e74\u9f84\u53ca\u6536\u5165\u7ed8\u5236\u5206\u5e03\u56fe\u3001\u7bb1\u7ebf\u56fe\u5e76\u8f93\u51fa\u63cf\u8ff0\u7edf\u8ba1\u7ed3\u679c\u3002","299f9136":"R2-Score\u8fbe\u5230\u4e8699.44%\uff0c\u770b\u4e00\u4e0b\u56de\u5f52\u66f2\u7ebf\u7684\u62df\u5408\u6548\u679c","a2dc6f84":"## \u6570\u636e\u53ef\u89c6\u5316"}}