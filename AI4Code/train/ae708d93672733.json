{"cell_type":{"26b943c5":"code","b887d3e8":"code","9755eb78":"code","641e8706":"code","a656f355":"code","cfc4fcee":"code","f722e9ba":"code","75e7fac3":"code","648eeb85":"code","3076aa34":"markdown","9ae658a5":"markdown","e73c4070":"markdown","f2978bb9":"markdown","6f853aa6":"markdown"},"source":{"26b943c5":"from pathlib import Path\n\nimport random\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader, Dataset\n\nimport os\nimport cv2\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import r2_score, mean_squared_error\n\nfrom albumentations import (\n    HorizontalFlip, VerticalFlip, IAAPerspective, ShiftScaleRotate, CLAHE, RandomRotate90,\n    Transpose, ShiftScaleRotate, Blur, OpticalDistortion, GridDistortion, HueSaturationValue,\n    IAAAdditiveGaussianNoise, GaussNoise, MotionBlur, MedianBlur, IAAPiecewiseAffine, RandomResizedCrop,\n    IAASharpen, IAAEmboss, RandomBrightnessContrast, Flip, OneOf, Compose, Normalize, Cutout, CoarseDropout, ShiftScaleRotate, CenterCrop, Resize\n)\nfrom albumentations.pytorch import ToTensorV2\n\nimport warnings\nwarnings.simplefilter('ignore')","b887d3e8":"DATA_DIR = Path(\"..\/input\/petfinder-pawpularity-score\/\")\nNB_DIR = Path(\"..\/input\/petfinder-pretrained-efficientnet\")\nTRAIN_DIR = DATA_DIR \/ \"train\"\nTEST_DIR = DATA_DIR \/ \"test\"\nDEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nconfig = dict(\n    SEED =  42,\n    NFOLDS = 5,\n    EPOCHS = 5,\n    LR = 2e-4,\n    IMG_SIZE = (224, 224),\n    MODEL_NAME = 'tf_efficientnet_b6_ns',\n    DR_RATE = 0.35,\n    NUM_LABELS = 1,\n    TRAIN_BS = 32,\n    VALID_BS = 4,\n    min_lr = 1e-6,\n    T_max = 20,\n    T_0 = 25,\n    NUM_WORKERS = 0,\n    infra = \"Kaggle\",\n    competition = 'petfinder',\n    _wandb_kernel = 'tanaym',\n    wandb = False\n)","9755eb78":"class PetfinderData(Dataset):\n    def __init__(self, df, is_test=False, augments=None):\n        self.df = df\n        self.is_test = is_test\n        self.augments = augments\n        \n        self.images, self.meta_features, self.targets = self._process_df(self.df)\n    \n    def __getitem__(self, index):\n        img = self.images[index]\n        meta_feats = self.meta_features[index]\n        meta_feats = torch.tensor(meta_feats, dtype=torch.float32)\n        \n        img = cv2.imread(img)\n#         print(f\"img shape 1 {img.shape}\")\n        img = img[:, :, ::-1]\n#         print(f\"img shape 2 {img.shape}\")\n        img = cv2.resize(img, config['IMG_SIZE'])\n        \n        if self.augments:\n            img = self.augments(image=img)['image']\n        \n        if not self.is_test:\n            target = torch.tensor(self.targets[index], dtype=torch.float32)\n            return img, meta_feats, target\n        else:\n            return img, meta_feats\n    \n    def __len__(self):\n        return len(self.df)\n    \n    def _process_df(self, df):\n        \n        if not self.is_test:\n            df['Id'] = df['Id'].apply(lambda x: str(TRAIN_DIR \/ f\"{x}.jpg\"))\n            \n            meta_features = df.drop(['Id', 'Pawpularity'], axis=1).values\n\n            return df['Id'].tolist(), meta_features, df['Pawpularity'].tolist()            \n        else:\n            df['Id'] = df['Id'].apply(lambda x: str(TEST_DIR \/ f\"{x}.jpg\"))\n            \n            meta_features = df.drop(['Id'], axis=1).values\n\n            return df['Id'].tolist(), meta_features, None","641e8706":"class Augments:\n    \"\"\"\n    Contains Train, Validation Augments\n    \"\"\"\n    train_augments = Compose([\n        Resize(*config['IMG_SIZE'], p=1.0),\n        HorizontalFlip(p=0.5),\n        VerticalFlip(p=0.5),\n        Normalize(\n            mean=[0.485, 0.456, 0.406], \n            std=[0.229, 0.224, 0.225], \n            max_pixel_value=255.0, \n            p=1.0\n        ),\n        ToTensorV2(p=1.0),\n    ],p=1.)\n    \n    valid_augments = Compose([\n        Resize(*config['IMG_SIZE'], p=1.0),\n        Normalize(\n            mean=[0.485, 0.456, 0.406], \n            std=[0.229, 0.224, 0.225], \n            max_pixel_value=255.0, \n            p=1.0\n        ),\n        ToTensorV2(p=1.0),\n    ], p=1.)","a656f355":"test_df = pd.read_csv(DATA_DIR \/ \"test.csv\")\n\ntest_set = PetfinderData(\n    test_df,\n    is_test=True,\n    augments=Augments.valid_augments\n)\n\ntest = DataLoader(\n    test_set,\n    batch_size=config['VALID_BS'],\n    shuffle=False,\n    num_workers=config['NUM_WORKERS']\n)\n\ny_pred = []\nfinal_test_predictions = []\nfinal_valid_predictions = {}\nscores = []\n\n# test predictions\nfor path in NB_DIR.glob(\"**\/*_jit*\"):\n    model = torch.jit.load(path).to(DEVICE)\n    test_preds = []\n    _test_preds = []\n    for idx, batch in enumerate(test):\n        model.eval()\n        with torch.no_grad():\n            imgs, meta = batch[0].to(DEVICE), batch[1].to(DEVICE)\n\n            tmp_pred = model(imgs, meta).cpu().numpy().squeeze()\n            test_preds.extend(tmp_pred)\n    y_pred.append(test_preds)\n\n#     final_test_predictions.append(test_preds)\n#     final_valid_predictions.update(dict(zip(valid_ids, valid_preds)))\n#     print(f\"fold rmse -> fold: {fold_}, rmse: {rmse}\")\n#     scores.append(rmse)\n\n# print(f\"scores -> mean: {np.mean(scores)}, std: {np.std(scores)}\")\n# final_valid_predictions = pd.DataFrame.from_dict(final_valid_predictions, orient=\"index\").reset_index()\n# final_valid_predictions.columns = [\"id\", \"pred_1\"]\n# final_valid_predictions.to_csv(\"train_pred_1.csv\", index=False)","cfc4fcee":"submission = pd.read_csv(f\"{DATA_DIR}\/sample_submission.csv\")\ntest_df = pd.read_csv(DATA_DIR \/ \"test.csv\")","f722e9ba":"y_pred_df = pd.DataFrame(np.stack(y_pred, axis=1))\ny_pred_df[\"mean\"] = y_pred_df.mean(axis=1)","75e7fac3":"y_pred_df.to_csv(\"y_pred.csv\", index=False)","648eeb85":"submission[\"Id\"] = test_df[\"Id\"]\nsubmission[\"Pawpularity\"] = y_pred_df[\"mean\"]\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission","3076aa34":"## Submission","9ae658a5":"## Model inference","e73c4070":"## Augmentation","f2978bb9":"## Dataset class","6f853aa6":"# PetFinder Competition PyTorch Lightning Submission\n\n## Based on the PetFinder Competition PyTorch Lightning Training Notebook.\nThis adds the training notebook as data and imports\/use the trained models for inference and submissions."}}