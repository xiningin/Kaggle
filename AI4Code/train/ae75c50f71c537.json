{"cell_type":{"8b89d255":"code","2bc753e9":"code","5391cf6c":"code","53f4fd1e":"code","e54f7c3c":"code","a2a80f36":"code","45ceb7da":"code","3bd24f14":"code","98d15a61":"code","bfa49cb3":"code","5eb46c29":"code","fee437e2":"code","c8c22e41":"markdown","0b60bda6":"markdown","9ef6b470":"markdown"},"source":{"8b89d255":"# keras module for building LSTM \nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Embedding, LSTM, Dense, Dropout\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.callbacks import EarlyStopping\nfrom keras.models import Sequential\nimport keras.utils as ku \n\n# set seeds for reproducability\nfrom tensorflow import set_random_seed\nfrom numpy.random import seed\nset_random_seed(2)\nseed(1)\n\nimport pandas as pd\nimport numpy as np\nimport string, os \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nwarnings.simplefilter(action='ignore', category=FutureWarning)","2bc753e9":"curr_dir = '..\/input\/'\nall_headlines = []\nfor filename in os.listdir(curr_dir):\n    if 'Articles' in filename:\n        article_df = pd.read_csv(curr_dir + filename)\n        all_headlines.extend(list(article_df.headline.values))\n        break\n\nall_headlines = [h for h in all_headlines if h != \"Unknown\"]\nlen(all_headlines)","5391cf6c":"all_headlines[0:10]","53f4fd1e":"def clean_text(txt):\n    \n    txt=\"\".join(v for v in txt if v not in string.punctuation).lower()\n    txt=txt.encode(\"utf8\").decode(\"ascii\",\"ignore\")\n    \n    return txt\n\ncorpus=[clean_text(x) for x in all_headlines]\ncorpus[0:10]\n","e54f7c3c":"tokenizer = Tokenizer()","a2a80f36":"def get_sequence_of_tokens(corpus):\n    ## tokenization\n    tokenizer.fit_on_texts(corpus)\n    total_words = len(tokenizer.word_index) + 1\n    \n    ## convert data to sequence of tokens \n    input_sequences = []\n    for line in corpus:\n        token_list = tokenizer.texts_to_sequences([line])[0]\n        for i in range(1, len(token_list)):\n            n_gram_sequence = token_list[:i+1]\n            input_sequences.append(n_gram_sequence)\n    return input_sequences, total_words\n\ninp_sequences, total_words = get_sequence_of_tokens(corpus)\ninp_sequences[:10]","45ceb7da":"def generate_padded_sequences(input_sequences):\n    max_sequence_len = max([len(x) for x in input_sequences])\n    input_sequences = np.array(pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre'))\n    \n    predictors, label = input_sequences[:,:-1],input_sequences[:,-1]\n    label = ku.to_categorical(label, num_classes=total_words)\n    return predictors, label, max_sequence_len\n\npredictors, label, max_sequence_len = generate_padded_sequences(inp_sequences)","3bd24f14":"print(predictors[0].shape)\nprint(label[0].shape)\nprint(max_sequence_len)","98d15a61":"def create_model(max_sequence_len, total_words):\n    input_len = max_sequence_len - 1\n    model = Sequential()\n    \n    # Add Input Embedding Layer\n    model.add(Embedding(total_words, 10, input_length=input_len))\n    \n    # Add Hidden Layer 1 - LSTM Layer\n    model.add(LSTM(100))\n    model.add(Dropout(0.1))\n    \n    # Add Output Layer\n    model.add(Dense(total_words, activation='softmax'))\n\n    model.compile(loss='categorical_crossentropy', optimizer='adam')\n    \n    return model\n\nmodel = create_model(max_sequence_len, total_words)\nmodel.summary()","bfa49cb3":"model.fit(predictors, label, epochs=100, verbose=5)","5eb46c29":"def generate_text(seed_text, next_words, model, max_sequence_len):\n    for _ in range(next_words):\n        token_list = tokenizer.texts_to_sequences([seed_text])[0]\n        token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\n        predicted = model.predict_classes(token_list, verbose=0)\n        \n        output_word = \"\"\n        for word,index in tokenizer.word_index.items():\n            if index == predicted:\n                output_word = word\n                break\n        seed_text += \" \"+output_word\n    return seed_text.title()","fee437e2":"print(generate_padded_sequences)","c8c22e41":"## 2. Load the dataset\n\nLoad the dataset of news headlines","0b60bda6":"# Beginners Guide to Text Generation using LSTMs\n\nText Generation is a type of Language Modelling problem. Language Modelling is the core problem for a number of of natural language processing tasks such as speech to text, conversational system, and text summarization. A trained language model learns the likelihood of occurrence of a word based on the previous sequence of words used in the text. Language models can be operated at character level, n-gram level, sentence level or even paragraph level. In this notebook, I will explain how to create a language model for generating natural language text by implement and training state-of-the-art Recurrent Neural Network. \n\n### Generating News headlines \n\nIn this kernel, I will be using the dataset of [New York Times Comments and Headlines](https:\/\/www.kaggle.com\/aashita\/nyt-comments) to train a text generation language model which can be used to generate News Headlines\n\n\n## 1. Import the libraries\n\nAs the first step, we need to import the required libraries:","9ef6b470":"#tokenizer "}}