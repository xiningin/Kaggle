{"cell_type":{"29baf6cd":"code","645cd728":"code","b4ff70df":"code","2a242208":"code","090cd1dd":"code","19858e4f":"code","2eaba8e0":"code","91903fa2":"code","7d41a94e":"code","392f3b38":"code","abac45f6":"code","9b4765b2":"code","9550e217":"code","654a86e0":"code","aaccee29":"markdown","14bedfb9":"markdown","a3aa2544":"markdown","7580bb06":"markdown","d2bc4c3d":"markdown"},"source":{"29baf6cd":"import numpy as np \nimport pandas as pd ","645cd728":"train = pd.read_csv(\"..\/input\/30-days-of-ml\/train.csv\")\ntest = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\")\ntrain.head()","b4ff70df":"train.drop(\"id\", axis=1, inplace=True)\ntest.drop(\"id\", axis=1, inplace=True)","2a242208":"feature_cols = [col for col in train.columns if col != \"target\"]\ncategory_cols = [col for col in train.columns if \"cat\" in col]\ncont_cols = [col for col in train.columns if \"cont\" in col]","090cd1dd":"X = train[feature_cols]\ny = train[\"target\"]\n\nX_final = test[feature_cols]","19858e4f":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OrdinalEncoder, StandardScaler\n\ntransformers = ColumnTransformer(\n    [(\"ordinary_encoder\", OrdinalEncoder(), category_cols),\n     (\"standardize\", StandardScaler(), cont_cols)],\n    remainder=\"passthrough\"\n)\n\nX = transformers.fit_transform(X)\nX_final = transformers.transform(X_final)","2eaba8e0":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=42, test_size=0.1)","91903fa2":"X_train.shape, X_valid.shape","7d41a94e":"from sklearn.metrics import mean_squared_error\n\ny_base = np.array([y_train.mean()]*y_valid.shape[0])\nmean_squared_error(y_valid, y_base, squared=False)","392f3b38":"from xgboost import XGBRegressor\n\nxgb_reg = XGBRegressor(tree_method='gpu_hist', gpu_id=0)\nxgb_reg.fit(X_train, y_train)\ny_hat = xgb_reg.predict(X_valid)\n\nmean_squared_error(y_valid, y_hat, squared=False)","abac45f6":"import optuna\nfrom sklearn.model_selection import cross_val_score\n\ndef objective(trial):\n    \n    params = {\n        \"n_estimators\": trial.suggest_int(\"n_estimators\", 1000, 12000, step=100),\n        \"max_depth\":trial.suggest_int(\"max_depth\", 1, 5),\n        \"learning_rate\": trial.suggest_float(\"learning_rate\", 1e-4, 1e-1, log=True),\n        \"gamma\": trial.suggest_float(\"gamma\", 0.1, 1.0, step=0.1),\n        \"min_child_weight\": trial.suggest_int(\"min_child_weight\", 1, 7),\n        \"subsample\": trial.suggest_float(\"subsample\", 0.2, 1.0),\n        \"colsample_bytree\": trial.suggest_float(\"colsample_bytree\", 0.1, 1.0),\n        \"reg_alpha\": trial.suggest_float(\"reg_alpha\", 1e-6, 100.),\n        \"reg_lambda\": trial.suggest_float(\"reg_lambda\", 1e-6, 100.),\n    }\n    \n    \n    model = XGBRegressor(\n        **params,\n        n_jobs=-1, \n        tree_method='gpu_hist', \n        gpu_id=0\n    )\n    \n    model.fit(X_train, y_train, \n              early_stopping_rounds=300, \n              eval_set=[(X_valid, y_valid)],\n              verbose=0)\n    \n    y_hat = model.predict(X_valid)\n    \n    return mean_squared_error(y_valid, y_hat, squared=False)\n\nstudy = optuna.create_study()\nstudy.optimize(objective, n_trials=100)","9b4765b2":"study.best_params","9550e217":"from sklearn.model_selection import KFold\n\nbest_params = study.best_params\nfinal_predictions = []\nkfold = KFold(n_splits=5, shuffle=True, random_state=42)\n\nfor i, j in kfold.split(X, y):\n    xgb_reg_final = XGBRegressor(\n        **best_params,\n        n_jobs=-1, \n        tree_method='gpu_hist', \n        gpu_id=0\n    )\n    \n    xgb_reg_final.fit(\n        X[i], y[i], \n        early_stopping_rounds=300, \n        eval_set=[(X[j], y[j])],\n        verbose=0\n    )\n    \n    final_predictions.append(xgb_reg_final.predict(X_final))\n\npreds = np.mean(np.column_stack(final_predictions), axis=1)","654a86e0":"sub = pd.read_csv(\"..\/input\/30-days-of-ml\/sample_submission.csv\")\nsub[\"target\"] = preds\nsub.to_csv(\"submissions.csv\", index=False)","aaccee29":"## Predict with mean","14bedfb9":"# Tuning model with Optuna","a3aa2544":"# XGBoost without tuning","7580bb06":"# Make prediction","d2bc4c3d":"# Baseline"}}