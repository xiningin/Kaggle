{"cell_type":{"225c3bf0":"code","19ad8cd4":"code","2d78faab":"code","da1c69ce":"code","45451c22":"code","1db4763b":"code","ac1728d0":"code","31cda2fe":"code","9290c7b2":"code","a87ae188":"code","1a7e0579":"code","e29033e3":"code","e1df503e":"code","20723e29":"code","bc8059df":"code","4f2a1d25":"code","70eaa9de":"code","58d870ad":"code","bb7309d5":"code","d8a14007":"code","74fb0c6d":"code","fe90ef3e":"code","958dbcd6":"code","10a72bef":"code","702e4b40":"code","46b47de4":"code","6d0bae5d":"code","9c520a50":"code","3698efeb":"code","9a228bc4":"code","591aa012":"code","e0f4c148":"code","a133a734":"code","74e1a378":"code","e6005f86":"code","4f7774d4":"code","d0d00bef":"code","8b0641bd":"code","37334ea7":"code","0066c87c":"code","3ea9bfdf":"code","b7c09a7d":"code","5ac2b9d1":"markdown"},"source":{"225c3bf0":"#importing all the modules\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","19ad8cd4":"#importing the data\ndata = pd.read_csv(\"..\/input\/wine-quality\/winequalityN.csv\")","2d78faab":"data.head()","da1c69ce":"data.info()","45451c22":"data.describe()","1db4763b":"#to check if there is null values\ndata.isnull().sum()","ac1728d0":"#filling null value using mean\nmean = data['fixed acidity'].mean()\ndata['fixed acidity'].fillna(mean,inplace=True)\n","31cda2fe":"mean = data['volatile acidity'].mean()\ndata['volatile acidity'].fillna(mean,inplace=True)\n\n","9290c7b2":"mean = data['citric acid'].mean()\ndata['citric acid'].fillna(mean,inplace=True)","a87ae188":"mean = data['residual sugar'].mean()\ndata['residual sugar'].fillna(mean, inplace=True)","1a7e0579":"mean = data['chlorides'].mean()\ndata['chlorides'].fillna(mean,inplace=True)","e29033e3":"mean = data['pH'].mean()\ndata['pH'].fillna(mean,inplace=True)","e1df503e":"mean = data['sulphates'].mean()\ndata['sulphates'].fillna(mean,inplace=True)","20723e29":"data.isnull().sum()","bc8059df":"#let's start visualizing\nplt.figure(figsize=(20,10))\nsns.boxplot(data=data, palette=\"Set3\")\nplt.show()\n","4f2a1d25":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'fixed acidity', data = data)","70eaa9de":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'volatile acidity', data = data)","58d870ad":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'citric acid', data = data)\n","bb7309d5":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'residual sugar', data = data)","d8a14007":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'chlorides', data = data)","74fb0c6d":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'free sulfur dioxide', data = data)","fe90ef3e":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'total sulfur dioxide', data = data)","958dbcd6":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'sulphates', data = data)","10a72bef":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'alcohol', data = data)","702e4b40":"sns.pairplot(data, hue=  'type')","46b47de4":"#since some variables needs to be encoded\nfrom sklearn.preprocessing import LabelEncoder,StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC","6d0bae5d":"data1= data.drop('quality', axis =1).copy()","9c520a50":"data1= data1.apply(LabelEncoder().fit_transform)","3698efeb":"sclr = StandardScaler().fit(data1)\nX=sclr.transform(data1)\ny= data['quality']","9a228bc4":"#splitting the data set\nX_train,X_test, y_train, y_test= train_test_split(X,y, test_size=0.3, random_state=1)","591aa012":"svc = SVC().fit(X,y)","e0f4c148":"print(\"Accuracy on training set: {:.4f}\".format(svc.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.4f}\".format(svc.score(X_test, y_test)))","a133a734":"y_pred =svc.predict(X_test)","74e1a378":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred ))","e6005f86":"#now finding best parameter using Grid Search CV\nfrom sklearn.model_selection import GridSearchCV\nparam = {\n    'C': [0.1,0.8,0.9,1,1.1,1.2,1.3,1.4],\n    'kernel':['linear', 'rbf'],\n    'gamma' :[0.1,0.8,0.9,1,1.1,1.2,1.3,1.4]\n}\ngrid_svc = GridSearchCV(svc, param_grid=param, scoring='accuracy', cv=10)","4f7774d4":"grid_svc.fit(X_train, y_train)","d0d00bef":"#now let's try with best params\nsvc = SVC(C=1.3, gamma= 1.1, kernel ='rbf')\nsvc.fit(X, y)","8b0641bd":"print(\"Accuracy on training set: {:.4f}\".format(svc.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.4f}\".format(svc.score(X_test, y_test)))","37334ea7":"y_pred =svc.predict(X_test)","0066c87c":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred ))","3ea9bfdf":"#however i found that \nsvc = SVC(kernel='rbf',C=10,gamma=1)\nsvc.fit(X, y)","b7c09a7d":"print(\"Accuracy on training set: {:.4f}\".format(svc.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.4f}\".format(svc.score(X_test, y_test)))","5ac2b9d1":"nothing has null values"}}