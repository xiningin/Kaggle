{"cell_type":{"aac97409":"code","44646194":"code","6111755c":"code","30979322":"code","bcaf51c9":"code","52181913":"code","74e2a92e":"code","50546953":"code","9c25aa26":"code","4e7175b0":"code","4cb2838d":"code","f8794823":"code","da9a5b39":"code","27a19d91":"code","3fd32dd4":"code","a200d142":"code","8ccb6b9f":"code","3bbeb6b4":"code","1c3369ce":"code","46b5642e":"code","7ab97105":"code","976346a6":"code","821e9b93":"code","b987ecda":"code","6c76f306":"code","213146b7":"code","5727276c":"code","ebe4c47d":"code","e4d7ce01":"code","0653b04e":"code","3a0cc342":"code","b2293e8f":"code","d6f878a8":"code","6b71e8b2":"code","47be8ac8":"code","c1a8bf02":"code","1fbc79b9":"markdown","3f1e57be":"markdown","2ecfc5f4":"markdown","61f081ea":"markdown","b8adc234":"markdown","114aeaba":"markdown","51d79400":"markdown","de9ff43d":"markdown","e2a6dc57":"markdown","bd009b2a":"markdown","50c4aa08":"markdown","c6ea091c":"markdown","ff100b71":"markdown","cae986d7":"markdown","af8ff690":"markdown","b4b8dd7c":"markdown","0f68494d":"markdown","4eb498ed":"markdown","89c73be9":"markdown","dd6ebc1c":"markdown","e9aa13a9":"markdown","0c9e56f6":"markdown","9de9188f":"markdown","27475985":"markdown","7352fe0d":"markdown","99c88f0d":"markdown","22d09d00":"markdown","4ea356f8":"markdown"},"source":{"aac97409":"# L\u00f6sung 1\nfrom random import randint\n\nzufallszahlen = []\nfor i in range(100): \n    zufallszahlen.append(randint(1,5))\n    \nprint(zufallszahlen)","44646194":"# L\u00f6sung 2\n\n# List-Comprehension\nzufallszahlen = [randint(1,5) for i in range(100)]\n\nprint(zufallszahlen)","6111755c":"# Summe aller Werte der Liste:\nsumme = sum(zufallszahlen)\nprint(summe)\n\n# Die L\u00e4nge der Liste:\nlaenge = len(zufallszahlen)\nprint(laenge)\n\n# Das arithmetische Mittel:\nmean = summe \/ laenge\nprint(mean)","30979322":"liste = [randint(1,5) for i in range(100)]\n\nliste.sort()\nlaenge = len(liste)\nif laenge % 2 == 0 and laenge != 0:\n    median = (liste[laenge \/\/ 2 - 1] + liste[laenge \/\/ 2]) \/ 2\nelif laenge % 2 == 1:\n    median = liste[laenge \/\/ 2]\n    \nprint(median)","bcaf51c9":"# Hier werden zwei Listen der L\u00e4nge 10 erzeugt. Die Elemente der Liste sind Zufallszahlen zwischen 1 und 5\n\nliste1 = [randint(1,5) for i in range(10)]\nliste2 = [randint(1,5) for i in range(10)]\n\n# Beim Versuch die beiden Listen miteinander zu verrechnen (hier mit Addition), \n# gestalltet sich als aufwendiger\n# Der +-Operator f\u00fcgt die beiden Listen nur zusammen:\nliste_add = liste1 + liste2\nprint(liste_add)","52181913":"# Beispiel einer Liste mit unterschiedlichen Datentypen\nliste3 = [1, 2, \"3\", 4]\nprint(liste3)","74e2a92e":"# importiere Numpy\nimport numpy as np","50546953":"# Unsere Liste mit unterschiedlichen Datentypen k\u00f6nnen wir an eine Funktion in Numpy weitergeben:\nliste3 = [1, 2, \"3\", 4]\n\n# np.array wandelt die Liste in einen Array um. Dabei k\u00f6nnen wir beim erstellen des Arrays definieren,\n# welchen Datentyp die Elemente haben sollen (hier z.B. \"int\" f\u00fcr Integer)\narray = np.array(liste3, dtype = \"int\")\n\nprint(array)","9c25aa26":"array = np.array([1,2,3,4,99])\n\nprint(\"Mittelwert: \", np.mean(array))\nprint(\"Median: \", np.median(array))\nprint(\"Standardabweichung\", np.std(array))","4e7175b0":"# Erzeuge zwei Arrays mit 1000 Zufallszahen zwischen 1 und 5\nzfz1 = np.random.randint(1,5, size = 1000)\nzfz2 = np.random.randint(1,5, size = 1000)\n\n# Addiere beide Arrays (Analog zur Addition zweier Vektoren)\nzfz_ges = zfz1 + zfz2\n","4cb2838d":"# Kleiner Spoiler:\n# Um das ganze zu Visualisieren\nimport matplotlib.pyplot as plt\n\nplt.hist(zfz_ges, bins=7)\nplt.show()","f8794823":"# Wir erkennen eine sogenannte Normalverteilung (erkennbar an der Glockenform)\n# Das spiegelt sich auch in den statistischen Werten wieder\n\n# Mean bildet ungef\u00e4hr den Bereich ab, der den h\u00f6chsten Punkt der Glocke abbildet\nprint(np.mean(zfz_ges))\n\n# Die Standardabweicung verr\u00e4t, wie schmal oder breit die Glocke ist.\n# Zudem hilft sie uns, eine Vorhersage f\u00fcr weitere Daten zu geben.\nprint(np.std(zfz_ges))","da9a5b39":"# Im Vergleich eine uniforme Verteilung (Jeder Wert hat die gleiche Wahrscheinlichkeit aufzutreten)\nplt.hist(zfz1, bins = 4)\nplt.show()","27a19d91":"# Importierung von pandas\nimport pandas as pd","3fd32dd4":"a = [\"a\", \"b\", \"c\"]\n\nser = pd.Series(a)\n\nser","a200d142":"a = [\"a\", \"b\", \"c\"]\nb = [42, 33, 55]\n\ndf = pd.DataFrame([a, b])\ndf","8ccb6b9f":"datenbank = [\n    {\"age\":33, \"salary\": 35000, \"sex\":\"w\"},\n    {\"age\":25, \"salary\": 26000, \"sex\":\"m\"},\n    {\"age\":21, \"salary\": None, \"sex\":\"w\"},\n    {\"age\":35, \"salary\": 34000, \"sex\":\"m\"},\n    {\"age\":41, \"salary\": 43000, \"sex\":\"w\"}\n]\n\ndata = pd.DataFrame(datenbank)\ndata","3bbeb6b4":"data.info()","1c3369ce":"data.describe()","46b5642e":"data","7ab97105":"data[\"salary\"]","976346a6":"data[[\"age\", \"salary\"]]","821e9b93":"data[data[\"age\"] > 25]","b987ecda":"data","6c76f306":"data[data[\"salary\"].isnull()]","213146b7":"data.iloc[2, 1]","5727276c":"data.iloc[2, 1] = data[\"salary\"].mean()","ebe4c47d":"data","e4d7ce01":"data.groupby(\"sex\").describe()","0653b04e":"import os\nfor dirname, _ , filenames in os.walk(\"\/kaggle\/input\"):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3a0cc342":"df = pd.read_csv(\"\/kaggle\/input\/sleepstudypilot\/SleepStudyData.csv\")\ndf","b2293e8f":"df.info()","d6f878a8":"# L\u00f6sung Nr 1\ndf.describe()","6b71e8b2":"#L\u00f6sung Nr 2\ndf[df[\"Hours\"] == 2]","47be8ac8":"# L\u00f6sung Nr 3\ndf[df[\"Hours\"] < 5]","c1a8bf02":"sleep = df[[\"Enough\", \"Hours\", \"Tired\", \"Breakfast\"]]\nsleep","1fbc79b9":"# Aufgabe\n\n1. Findet den Mittelwert f\u00fcr das Feature \"Hours\"\n2. Findet den Minimalwert im Feature \"Hours\" und findet heraus wie m\u00fcde sich der Proband f\u00fchlte\n3. Wie viele der Probanden schlafen weniger als 5 Stunden?","3f1e57be":"## Experimentieren mit Listen","2ecfc5f4":"Mit der Funktion **iloc[]** k\u00f6nnen wir auch auf einzelne Werte zugreifen. In die eckigen klammern geben wir die Numerischen \"Koordinaten\" in der Tabelle an.","61f081ea":"# Zusatzaufgabe\n\nBestimme den Mittelwert deiner Liste","b8adc234":"Schauen wir uns den DataFrame erneut an, so sehen wir, dass der fehlende Wert durch den Mittelwert f\u00fcr das Feature \"salary\" erg\u00e4nzt wurde","114aeaba":"Mit einem DataFrame, k\u00f6nnen wir einen Datensatz (wie unten) ein wenig attraktiver darstellen lassen.\n\nEs lohnt sich immer - f\u00fcr eine grobe Inspektion - sich den DataFrame mal ausgeben zu lassen\n\nWICHTIG: ich spare mir hier im Notebook immer die **print**-Funktion. Hier in Kaggle oder bei Jupyter Notebook ist das legitim, jedoch sollte man sich bewusst sein, dass in anderen Entwicklungsumgebungen dann nichts ausgegeben wird, wenn man das nicht eindeutig sagt!!","51d79400":"Wir k\u00f6nnen auch Daten nach gewissen Kriterien filtern. Zum Beispiel filtern wir nur diejenigen Eintr\u00e4ge, die unter dem Feature \"age\" die Bedinungung erf\u00fcllen gr\u00f6\u00dfer als 25 zu sein","de9ff43d":"Arrays lassen sich auch mit anderen Arrays verrechnen (eventuell ist hier wichtig auf die Form der Arrays zu achten)","e2a6dc57":"\u00c4hnlich wie bei den **Dictionaries** k\u00f6nnen wir auf einzelne Spalten zugreifen:","bd009b2a":"## arithmetisches Mittel\n\n*$\\bar x = \\frac{x_1 + x_2 + ... + x_n}{n}$*","50c4aa08":"# Hausaufgabe\n\nSchreibe ein Programm, dass dir eine Liste erstellt mit 100 zuf\u00e4lligen Zahlen (zwischen 1 und 5).\n\nDaf\u00fcr brauchst du\n* Eine leere Liste\n* Eine **for**-Schleife\n* Die Funktion **randint()** von der Bibliothek **random**\n* Die Methode **append()** um die Werte in die Liste zu schreiben","c6ea091c":"Die Funktion **info()** ist besonders n\u00fctzlich. Sie gibt uns einige n\u00fctzliche Informationen \u00fcber die Daten:\n* Wie gro\u00df ist der Datensatz?\n* Gibt es fehlende Werte (null)?\n* Welche Features gibt es?\n* Welche Datentypen liegen vor?","ff100b71":"Mit **info()** haben wir gesehen, dass in der Spalte \"salary\" ein Wert fehlt. Mit der Funktion **isnull()** k\u00f6nnen wir diese herausfiltern","cae986d7":"Die Funktion **describe()** gibt uns viele statistische Werte","af8ff690":"# Numpy\n\nEhe man an anf\u00e4ngt das Rad neu zu erfinden, kann man auch gleich auf Programme zur\u00fcckgreifen, die eine L\u00f6sung parat haben. Numpy ist eine Bibliothek, die eine f\u00fcr uns sehr n\u00fctzliche Datenstruktur bereitstellt: der **array**.","b4b8dd7c":"Zum Einlesen des Datensatzes brauchen wir eine **read**-Funktion. **pandas** bietet f\u00fcr unterschiedliche Dateiformate unterschiedliche Funktionen. So l\u00e4sst sich beispielsweise eine csv-Datei mit **pd.read_csv()** einlesen und in einem DataFrame- (oder Series-)Format \u00fcbersetzen:","0f68494d":"Wie wenden wir das gelerente nun auf komplexere Datens\u00e4tze an?\n\nDie Bibliothek **pandas** erweitert den Grundansatz von Numpy, Sequenzen uniform hinsichtlich des Datentyps zu erhalten, als auch diese mathematisch verarbeiten zu k\u00f6nnen,\nkombiniert aber auch Aspekte die wir bereits von **Dictionaries** kennen, das \"Labeling\" unter einem Schl\u00fcsselbegriff.\n\nZudem formatiert **pandas** die Datens\u00e4tze in ein otisch reizvolleres Tabellenformat und bietet einige n\u00fctzliche Funktionen zum Verarbeiten und Analysieren der Daten","4eb498ed":"Daten lassen sich auch nach gewissen Attributen gruppieren. In Kombination mit Methoden, wie zum Beispiel **describe()** k\u00f6nnen wir Informationen einholen, ob f\u00fcr gewisse Gruppen einige Features typisch sind. ","89c73be9":"## Series\n\nSeries sind einfache Tabellen die nur eine Spalte haben. Zum erzeugen einer Serie benutzen wir die Funktion **pd.Series()** und \u00fcbergeben dieser eine eindimensionale Datenstruktur (z.B. eine Liste)","dd6ebc1c":"Folgender Code gibt uns die Adressen unserer Daten. Dieser Teil wird komfortablerweise beim erstellen eines neuen Notebooks von kaggle automatisch erzeugt","e9aa13a9":"## DataFrame\n\nEin DataFrame ist eine klassische Tabelle mit mehreren Spalten","0c9e56f6":"# Hausaufgabe\n\n1. Finde heraus wieviele der Probanden regelm\u00e4\u00dfig fr\u00fchst\u00fccken\n2. Wie M\u00fcde f\u00fchlen sich die Probanden im Schnitt die fr\u00fchst\u00fccken?\n3. Was glaubst du: Welche Faktoren sind entscheidend, dass du dich tags\u00fcber fit f\u00fchlst? Versuche das mit den gegebenen Informationen zu begr\u00fcnden! Reduziert die Problemstellung auf die Features \"Hours\" und \"Breakfast\"","9de9188f":"**pandas** f\u00fchrt zwei weitere Datenstrukturen ein:\n* Series\n* DataFrames","27475985":"## Eine andere Datenstruktur muss her\nEs zeigt sich also,dass die herk\u00f6mmlichen Datenstrukturen zwei wichtige Aspekte zum Arbeiten mit Daten vernachl\u00e4ssigen:\n* In einer Liste k\u00f6nnen unterschiedliche Datentypen liegen\n* Listen lassen sich schwieriger mit anderen Listen mathematisch verarbeiten","7352fe0d":"Ebenfalls sehr komfortable an Numpy: Es vereinfacht die mathematische Verarbeitung von numerischen Wwerten in Datenstrukturen.\n\nSo lassen sich mit den entsprechenden Funktionen z.B.:\n* Mittelwert (mean)\n* Standardabweichung (std)\n* oder der Median (median)\n\nbestimmen","99c88f0d":"## Median\n\nDer Median ist der Zentralwert einer sortierten Liste\n\n* Sortiere die Liste\n* Bestimme die L\u00e4nge\n* Ist die Anzahl der Elemente der Liste ungerade so bildet der Wert an Position [L\u00e4nge \/\/ 2] den Zentralwert\n* Ist die Anzahl gerade so liegt der Zentralwert zwischen den Werten an den Positionen [L\u00e4nge \/\/ 2 -1] und [L\u00e4nge \/\/ 2]. Aus den Werten an diesen Positionen wird der Mittelwert gebildet","22d09d00":"Ebenfalls k\u00f6nnen wir mehrere Spalten aus dem Datensatz filtern. Hierf\u00fcr \u00fcbergibt man eine Liste mit allen Spaltennamen die hearusgezogen werden sollen:","4ea356f8":"Wir k\u00f6nnen den fehlenden Wert durch einen anderen ersetzen:"}}