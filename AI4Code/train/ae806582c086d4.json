{"cell_type":{"6b94632c":"code","34a8c72b":"code","c485b5e9":"code","d0f2ddf4":"code","ad9f655d":"code","3da0af68":"code","807576d1":"code","4db65065":"code","19b02896":"code","8623ff9e":"code","d7c16df4":"code","aebe6528":"code","fe457c0e":"code","41d0ba42":"code","1623200e":"code","9e96b1a5":"code","660d2478":"code","951814e2":"code","2cbe0fd4":"code","d2709755":"code","69d37953":"code","4ddf8a07":"code","601ca52a":"code","ec4aa213":"code","816b8f02":"code","515dd1f1":"code","7ee7bf5d":"code","43f8f484":"code","aab3ae31":"markdown","901138ba":"markdown","d70e0ec0":"markdown"},"source":{"6b94632c":"import lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error","34a8c72b":"train0 = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/test.csv\")","c485b5e9":"train0[0:3].T","d0f2ddf4":"print(train0.columns)","ad9f655d":"Name0=train0['Cover_Type'].unique()\nName=sorted(Name0)\nprint(Name)","3da0af68":"train0['Cover_Type'].value_counts()","807576d1":"train_add1=train0[train0['Cover_Type']==4]\ntrain_add0=train0[train0['Cover_Type']==5]\ntrain_add0","4db65065":"concatlist=[train0]\nfor i in range(1000):\n    concatlist+=[train_add0]\nfor i in range(2):\n    concatlist+=[train_add1]","19b02896":"train1=pd.concat(concatlist)\ntrain1","8623ff9e":"M=list(range(len(train1)))\nrandom.seed(2021)\nrandom.shuffle(M)\ntrain=train1.iloc[M]","d7c16df4":"N=list(range(len(Name)))\nnormal_mapping=dict(zip(Name,N)) \nreverse_mapping=dict(zip(N,Name)) ","aebe6528":"target = train['Cover_Type'].map(normal_mapping)\ndata = train.drop(['Cover_Type','Id'],axis=1)","fe457c0e":"columns=data.columns.to_list()\nprint(columns)","41d0ba42":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param =   {\n        'num_leaves': trial.suggest_int('num_leaves', 128, 256),\n        'objective': trial.suggest_categorical('objective',['regression','rmse']),  \n        'max_depth': trial.suggest_int('max_depth', 5, 12),\n        'learning_rate': trial.suggest_uniform('learning_rate', 0.04, 0.2),\n        \"boosting\": \"gbdt\",\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 10.0),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-8, 10.0),\n        \"bagging_freq\": trial.suggest_int('bagging_freq', 1, 10),\n        \"bagging_fraction\": trial.suggest_uniform('bagging_fraction', 0.1, 1.0),\n        \"feature_fraction\": trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        \"verbosity\": trial.suggest_int('verbosity', 1, 10),\n    }\n    model = lgb.LGBMClassifier(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","1623200e":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=32)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","9e96b1a5":"study.trials_dataframe()","660d2478":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","951814e2":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","2cbe0fd4":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","d2709755":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['num_leaves','objective'])","69d37953":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","4ddf8a07":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","601ca52a":"Best_trial=study.best_trial.params\nprint(Best_trial)","ec4aa213":"sample = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv\")\nprint(sample.shape)","816b8f02":"preds = np.zeros((sample.shape[0],len(Name)))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(train[columns],target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target.iloc[trn_idx],target.iloc[test_idx]\n    \n    model = lgb.LGBMClassifier(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    \n    preds+=model.predict_proba(test[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","515dd1f1":"print(preds.shape)\nprint(preds[0])","7ee7bf5d":"preds2=[]\nfor item in preds:\n    value=np.argmax(item)\n    preds2+=[reverse_mapping[value]]\nprint(preds2[0:5])\npd.Series(preds2).value_counts()","43f8f484":"subm = sample\nsubm['Cover_Type'] = preds2\nsubm.to_csv('submission.csv',index=False)\nsubm","aab3ae31":"# Tabular Playground Series - Dec 2021 \n### LightGBM for multi-class target\n### Add duplicate data for the class of few number\nhttps:\/\/www.kaggle.com\/stpeteishii\/tps0521-lightgbm-optuna","901138ba":"### Add duplicate data for Cover_Type 4 and 5","d70e0ec0":"![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/28007\/logos\/header.png?t=2021-06-30-01-10-51)"}}