{"cell_type":{"0f016499":"code","99528b64":"code","44759d8f":"code","ee6c961d":"code","e2cf798c":"code","e5d6afb0":"code","317f09dc":"code","a490ece3":"code","cf73a72c":"code","7464e5e0":"code","40859534":"code","22f207c4":"code","79c306be":"code","e10eacbf":"code","8bdc78de":"code","6f122919":"code","c6a19dfc":"code","90fe1cc1":"code","b3d0bdcb":"code","d6ba80d8":"code","1a715d13":"code","84e5529f":"code","ecde7dc5":"code","9b5c90a6":"code","fce48d27":"markdown","5efc0235":"markdown","2259b41c":"markdown","154cb278":"markdown","3670ab56":"markdown","560f9699":"markdown","4a144602":"markdown","00292710":"markdown"},"source":{"0f016499":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","99528b64":"import numpy as np # linear algebra\nimport pandas as pd\ntrain=pd.read_csv('\/kaggle\/input\/corona-virus-report\/covid_19_clean_complete.csv')\ntest=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv')\ntrain_old=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv')","44759d8f":"train.head()","ee6c961d":"pd.DataFrame(train[train['Country\/Region']=='China']['Date'].groupby(train['Province\/State']))\npd.DataFrame(train[train['Country\/Region']=='China']['Confirmed'].groupby(train['Date']).sum()).reset_index()\npd.DataFrame(train[train['Country\/Region']=='China']['Deaths'].groupby(train['Date']).sum()).reset_index()","e2cf798c":"data=pd.DataFrame(train[train['Country\/Region']=='China'].groupby(train['Date'])['Confirmed','Deaths','Recovered'].sum().sort_values(by='Confirmed')).reset_index()","e5d6afb0":"data.head()    ","317f09dc":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n%matplotlib inline","a490ece3":"fig1_1=go.Figure()\nfig1_1.add_trace(go.Scatter(x=data['Date'],y=data['Confirmed'],mode='lines+markers',marker=dict(size=10,color=1)))","cf73a72c":"arr=[]\nfor i in range(0,data.shape[0]):\n    if i==0:\n        arr.append(data.iloc[0]['Confirmed'])\n    else:\n        arr.append(data.iloc[i]['Confirmed']-data.iloc[i-1]['Confirmed'])\ndata['daily_cases']=arr","7464e5e0":"fig2_1=go.Figure()\nfig2_1.add_trace(go.Bar(x=data['Date'],y=data['daily_cases']))","40859534":"fig3_1=go.Figure()\nfig3_1.add_trace(go.Scatter(x=data['Date'],y=data['Deaths'],mode='lines+markers',marker=dict(size=10),marker_color='rgba(152, 0, 0, .8)'))","22f207c4":"mortality=[]\nfor i in range(0,data.shape[0]):\n    if i==0:\n        mortality.append(data.iloc[0]['Deaths'])\n    else:\n        mortality.append(data.iloc[i]['Deaths']-data.iloc[i-1]['Deaths'])\ndata['daily_deaths']=mortality","79c306be":"fig4_1=px.bar(data,x='Date',y='daily_deaths',hover_data=['Date','daily_deaths'])\n\nfig4_1.show()","e10eacbf":"data['Active']=data['Confirmed']-(data['Deaths'] + data['Recovered'])","8bdc78de":"fig5_1=go.Figure()\nfig5_1.add_trace(go.Scatter(x=data['Date'],y=data['Active'],mode='lines+markers',marker=dict(size=10)))","6f122919":"daily_recovered=[]\nfor i in range(0,data.shape[0]):\n    if i==0:\n        daily_recovered.append(data.iloc[0]['Recovered'])\n    else:\n        daily_recovered.append(data.iloc[i]['Recovered']-data.iloc[i-1]['Recovered'])\ndata['daily_recovered']=daily_recovered","c6a19dfc":"fig7_1=go.Figure()\nfig7_1.add_trace(go.Scatter(x=data['Date'],y=data['daily_cases'],mode='lines+markers',marker=dict(size=10),name='Daily cases'))\nfig7_1.add_trace(go.Scatter(x=data['Date'],y=data['daily_recovered'],mode='lines+markers',marker=dict(size=10),name='Daily recovered'))","90fe1cc1":"fig6_1=go.Figure()\nfig6_1.add_trace(go.Scatter(x=data['Date'],y=data['Deaths'],mode='lines+markers',marker=dict(size=10,color=1),name='Deaths'))\nfig6_1.add_trace(go.Scatter(x=data['Date'],y=data['Recovered'],mode='lines+markers',marker=dict(size=10,color=2),name='Recovered'))","b3d0bdcb":"# Outcome of Cases (Recovery rate or Death rate) in China\ndeath_rate=(data['Deaths']\/(data['Confirmed']-data['Active']))*100\nrecover_rate=(data['Recovered']\/(data['Confirmed']-data['Active']))*100","d6ba80d8":"fig6_2=go.Figure()\nfig6_2.add_trace(go.Scatter(x=data['Date'],y=death_rate,mode='lines+markers',marker=dict(size=10,color=1),name='Deaths'))\nfig6_2.add_trace(go.Scatter(x=data['Date'],y=recover_rate,mode='lines+markers',marker=dict(size=10,color=2),name='Recovered'))","1a715d13":"# fig, ax = plt.subplots(figsize=(30,10))\n# ax.set_yticks([0, 25000,50000, 75000, 100000])\n# sns.scatterplot(data['Date'],data['ConfirmedCases'])\n\n# fig2, ax2 = plt.subplots(figsize=(30,10))\n# ax2.bar(data['Date'],data['ConfirmedCases'], align=\"center\", width=0.5, alpha=0.5)","84e5529f":"# arr=[]\n# for i in range(0,data.shape[0]):\n#     if i==0:\n#         arr.append(data.iloc[0]['ConfirmedCases'])\n#     else:\n#         arr.append(data.iloc[i]['ConfirmedCases']-data.iloc[i-1]['ConfirmedCases'])\n# data['daily_cases']=arr\n\n# fig3, ax3 = plt.subplots(figsize=(30,10))\n# ax3.set_yticks([0, 25000,50000, 75000, 100000])\n# sns.scatterplot(data['Date'],data['daily_cases'])\n\n# fig4, ax4 = plt.subplots(figsize=(30,10))\n# ax4.bar(data['Date'],data['daily_cases'], align=\"center\", width=0.5, alpha=0.5)","ecde7dc5":"# fig6, ax6 = plt.subplots(figsize=(30,10))\n# ax6.set_yticks([0,1000,2000,3000,4000])\n# ax6.set_title(\"Fatalities\")\n# # ax6.set_xticks()\n# sns.scatterplot(data['Date'],data['Fatalities'])\n\n# fig8, ax8 = plt.subplots(figsize=(30,10))\n# ax8.bar(data['Date'],data['Fatalities'], align=\"center\", width=0.5, alpha=0.5)","9b5c90a6":"# mortality=[]\n# for i in range(0,data.shape[0]):\n#     if i==0:\n#         mortality.append(data.iloc[0]['Fatalities'])\n#     else:\n#         mortality.append(data.iloc[i]['Fatalities']-data.iloc[i-1]['Fatalities'])\n# data['daily_fatalities']=mortality\n\n# fig5, ax5 = plt.subplots(figsize=(30,10))\n# sns.barplot(x='Date',y='daily_fatalities',data=data)","fce48d27":"# ** # Active Cases in China** ","5efc0235":"# **Daily Deaths in China**","2259b41c":"# ----------------------------------------------------------------------------","154cb278":"# *# Total Fatalities in China* ","3670ab56":"#  **Daily Cases in China**","560f9699":"# **Newly Infected vs. Newly Recovered in China**","4a144602":"#   *# Total Cases in China* ","00292710":"# **Outcome of Cases (Recovery or Death) in China**\n"}}