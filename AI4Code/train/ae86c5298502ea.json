{"cell_type":{"d1af3173":"code","261401a3":"code","d58c28f2":"code","910fab35":"code","5b01e6b0":"code","5498a1fa":"code","f00b1bda":"code","db47171a":"code","78bffd72":"code","755549fe":"code","33ceecb8":"code","b9746cef":"code","20646957":"code","a6be3d76":"code","e5fe7aaa":"code","a77d00a8":"code","65008ad6":"code","998fcf1b":"code","1352907b":"code","895e6aeb":"code","0edfe70a":"code","1040cd73":"code","ebec01c5":"code","195be01c":"code","d7f1078b":"code","0e07c59d":"code","a662edf5":"code","cccb4b80":"code","872d61d8":"code","9868b5b4":"code","f0dc3298":"code","8c8afed9":"code","067a4ee1":"code","ba6df9ee":"code","6884913a":"code","4d53c09d":"code","6ed1e219":"code","e9e1cc33":"markdown","1262ddb6":"markdown","bb86b49d":"markdown","dbdf7dac":"markdown","17cb7bef":"markdown","ede352d2":"markdown","cbfdcc4e":"markdown","136845c1":"markdown","87c31dbd":"markdown","a07609ed":"markdown"},"source":{"d1af3173":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","261401a3":"import warnings                                            \nwarnings.filterwarnings('ignore') ","d58c28f2":"#Function that will help to know the percentage of null values per column\n\ndef porc_null_col(dataframe):\n    n = dataframe.shape[0]\n    l = []\n    for i in dataframe:\n        l.append([i,((dataframe[i].isnull().sum())\/n)*100])\n    return l","910fab35":"df = pd.read_csv(\"..\/input\/water-potability\/water_potability.csv\")","5b01e6b0":"df.head()","5498a1fa":"df.describe()","f00b1bda":"df.info()","db47171a":"df.isnull().sum(axis=0)","78bffd72":"df.shape","755549fe":"porc_null_col(df)","33ceecb8":"df.dropna(subset = [\"Trihalomethanes\"], inplace=True)","b9746cef":"porc_null_col(df)","20646957":"df.shape","a6be3d76":"df.hist(column='ph')","e5fe7aaa":"df.boxplot(column='ph', return_type='axes');","a77d00a8":"df['ph'].fillna((df['ph'].mean()), inplace=True)","65008ad6":"porc_null_col(df)","998fcf1b":"df.hist(column='Sulfate')","1352907b":"df.boxplot(column='Sulfate', return_type='axes');","895e6aeb":"df['Sulfate'].fillna((df['Sulfate'].median()), inplace=True)","0edfe70a":"porc_null_col(df)","1040cd73":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\ndf['Potability'] = le.fit_transform(df['Potability'])","ebec01c5":"y = df['Potability']\nX = df.drop(['Potability'], axis =1)","195be01c":"y\n","d7f1078b":"from sklearn.model_selection import train_test_split","0e07c59d":"print(X.shape)\nprint(len(y))","a662edf5":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, shuffle=True)","cccb4b80":"from sklearn.preprocessing import StandardScaler\nScaler_X = StandardScaler()\nX_train = Scaler_X.fit_transform(X_train)\nX_test = Scaler_X.transform(X_test)","872d61d8":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.model_selection import cross_val_score\n\nrfc_clf = RandomForestClassifier()\nparams = {'n_estimators':[25,50,100,150,200,500],'max_depth':[0.5,1,5,10],'random_state':[1,10,20,42],\n          'n_jobs':[1,2]}\ngrid_search_cv = GridSearchCV(rfc_clf, params, scoring='precision')\ngrid_search_cv.fit(X_train, y_train)","9868b5b4":"print(grid_search_cv.best_estimator_)\nprint(grid_search_cv.best_params_)","f0dc3298":"rfc_clf = grid_search_cv.best_estimator_\nrfc_clf.fit(X_train,y_train)\nrfc_clf_pred = rfc_clf.predict(X_test)\n\nprint('Classification report:')\nprint(classification_report(rfc_clf_pred,y_test))\nscore_rfc = cross_val_score(rfc_clf,X_train,y_train,cv = 10).mean()\n\nprint('Accuracy:',accuracy_score(rfc_clf_pred,y_test) )\nprint('cross val score:', score_rfc)","8c8afed9":"from sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\n# Implement gridsearchcv to see which are our best p\n\nparams = {'C': [0.75, 0.85, 0.95, 1], 'kernel': ['linear', 'poly', 'rbf', 'sigmoid'], \n          'degree': [3, 4, 5]}\n\nsvc_clf = SVC(random_state=42)\ngrid_search_cv = GridSearchCV(svc_clf, params)\ngrid_search_cv.fit(X_train, y_train)","067a4ee1":"print(grid_search_cv.best_estimator_)\nprint(grid_search_cv.best_params_)","ba6df9ee":"svc_clf = grid_search_cv.best_estimator_\nsvc_clf.fit(X_train,y_train)\nsvc_pred = svc_clf.predict(X_test)\n\n\nprint('Classification report:')\nprint(classification_report(svc_pred,y_test))\n\n\nscore_svc = cross_val_score(svc_clf,X_train,y_train, cv = 10).mean()\nprint('Accuracy:',accuracy_score(svc_pred,y_test) )\nprint('cross val score:', score_svc)","6884913a":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_train,y_train)\nlr_pred = lr.predict(X_test)\n\n\nprint('Classification report:')\nprint(classification_report(lr_pred,y_test))\n\n\nscore_lr = cross_val_score(lr,X_train,y_train,cv=10).mean()\nprint('cross val score:', score_lr)\nprint('Accuracy:',accuracy_score(lr_pred,y_test) )","4d53c09d":"from sklearn.ensemble import GradientBoostingClassifier\ngbc = GradientBoostingClassifier()\ngbc.fit(X_train,y_train)\ngbc_pred = gbc.predict(X_test)\n\n\n\nprint('Classification report:')\nprint(classification_report(gbc_pred,y_test))\n\n\nscore_gbc = cross_val_score(gbc,X_train,y_train, scoring='accuracy', cv = 10).mean()\nprint('Accuracy:',accuracy_score(gbc_pred,y_test) )\nprint('cross val score:', score_gbc)","6ed1e219":"models = pd.DataFrame({'Models':['Random Forest Classifier','Logistic Regression', \n                                 'Gradient Boost Classifier', 'Support Vector Classifier'],\n                      'Score':[score_rfc,score_lr,score_gbc,score_svc]})\nmodels.sort_values(by='Score', ascending = False)","e9e1cc33":"Importamos el dataset","1262ddb6":"Tratamiento para la columna de \"Sulfate\"","bb86b49d":"# Support Vector Machine","dbdf7dac":"# Feature Engineering","17cb7bef":"Tratamiento para la columna ph","ede352d2":"# Random Forest","cbfdcc4e":"# Gradient Boosting","136845c1":"# Logistic Regression","87c31dbd":"Vemos cuantos datos faltantes (en porcentaje con relaci\u00f3n al total) tenemos en las columnas que presentan datos nulos.","a07609ed":"Al no ser muy elevado el porcentaje podemos ver de aplicar algun tratamiento de \"parchado\". \n<br>\nYa que la columna de 'Trihalomethanes' tiene porcentaje de valores nulos menor al 5% podemos eliminar estos datos.\n"}}