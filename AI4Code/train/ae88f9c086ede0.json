{"cell_type":{"6d620460":"code","6eb98502":"code","6e9e2dd5":"code","87dc9764":"code","1f5a8bc0":"code","a56d5113":"code","c8bb5ec9":"code","34f51a8c":"code","ed0413d7":"code","696ceff8":"code","2b66e011":"code","0b0e0dda":"code","cbf21268":"code","12d2d4ce":"code","7c7c1b6d":"markdown","21d0406e":"markdown","cf42cbbb":"markdown","6e482801":"markdown","099bcbfd":"markdown","3d7dd29c":"markdown","2b31bbba":"markdown","87289453":"markdown","041488e1":"markdown","01b8a1aa":"markdown","89f9d907":"markdown","8677ca0c":"markdown","3a81062f":"markdown","ec0560bb":"markdown","02b0a4bf":"markdown"},"source":{"6d620460":"import numpy as np\nimport datetime","6eb98502":"names = ['v2.2.4', 'v3.0.3', 'v3.0.2', 'v3.0.1', 'v3.0.0', 'v2.2.3',\n         'v2.2.2', 'v2.2.1', 'v2.2.0', 'v2.1.2', 'v2.1.1', 'v2.1.0',\n         'v2.0.2', 'v2.0.1', 'v2.0.0', 'v1.5.3', 'v1.5.2', 'v1.5.1',\n         'v1.5.0', 'v1.4.3', 'v1.4.2', 'v1.4.1', 'v1.4.0']\nnames","6e9e2dd5":"dates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.datetime.strptime(d, \"%Y-%m-%d\") for d in dates]\ndates","87dc9764":"levels = np.tile(\n    [-5, 5, -3, 3, -1, 1],\n    int(np.ceil(len(dates)\/6)),\n)[:len(dates)]\nlevels","1f5a8bc0":"arg0 = [-5, 5, -3, 3, -1, 1]\narg0","a56d5113":"length_dates = len(dates)\nlength_dates","c8bb5ec9":"divisor = 6\ndivisor","34f51a8c":"divisor == len(arg0)","ed0413d7":"nceil_arg = length_dates \/ divisor\nnceil_arg","696ceff8":"nciel_obj = np.ceil(nceil_arg)\nnciel_obj","2b66e011":"arg1 = int(nciel_obj)\narg1","0b0e0dda":"ntile_obj = np.tile(arg0, arg1)\nntile_obj","cbf21268":"levels = ntile_obj[:len(dates)]\nlevels","12d2d4ce":"len(levels) == len(dates)","7c7c1b6d":"# numpy.tile argument 0\nThe first postional arument is a simple list ****","21d0406e":"## numpy.tile arg1: part 5: convert to int\nThus to make our whole number `float` object into and `int` object we use `int()` func on it.","cf42cbbb":"## numpy.tile arg1: part 3: numpy.ceil arg\nThe next part of the second argument is the agrument for the `numpy.ceil` function wich is a `float` value returned by dividing the length of the `dates` list by the divisor which is the lengh of our `arg0` list.","6e482801":"## numpy.tile arg1: part 2: Divisor\nNext lets put that six in a varibale called divisor since that is what we will use it as in the forumla.","099bcbfd":"# Load the test data","3d7dd29c":"Thus we have exatly one level value for each date that we want to plot.","2b31bbba":"# Trimming the return obj\nFinnally, the accessor `[:len(dates)]` trims that list down so that it has the same number items as our `dates` list. Thus we have exatly one level value for each date that we want to plot.","87289453":"# numpy.tile return object\nFinnaly we can see that our `np.tile` call basicly the same as this: `np.tile([-5, 5, -3, 3, -1, 1], 4)` which will give us a numpy array that has those list items repeated four times.","041488e1":"## numpy.tile arg1: part 4: numpy.ceil returned object\nWe can see that `numpy.ceil` is just rounding that value up to the nearist whole number. but it is still a `float` at this point.","01b8a1aa":" A less hardcoady way of writing this is by using `len(arg0)`. But in the matplotlib example, they just hard code `6` sicne they don't want to assign `[-5, 5, -3, 3, -1, 1]` to a variable or write it a second time in the fuction call.","89f9d907":"# Looking at the object assigned to levels\n\nLets make the levels function a bit easier to read:\n\nWe see that it is calling [numpy.tile()](https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.tile.html) with two positional arugments:\n\nPO) `[-5, 5, -3, 3, -1, 1]`: \nIs a list of ints. We can see from the source example output that these are the varius heights the markers are placed at on the timeline. \n    \nP1) `int(np.ceil(len(dates)\/6))`: \nis a `int` value calulated by dividing the number of items in the `dates`(`len(dates)`) by int `6` and feeding that into the [numpy.ceil](https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.ceil.html) func. int `6` is basicly just hard coading `len([-5, 5, -3, 3, -1, 1])` into the function.\n\n\n\nAt the end we can see that it is actully using an accessor `[:len(dates)]` on the object returned by the `numpy.tile` call. The `:len(dates)` part is like saying trim the number of items in the irrtible object down so that it has the same number of items as the dates list.\n\n\n","8677ca0c":"# numpy.tile argument 1\nThe second arg is a bit more complicated, so we'll break it down into mutiple parts.\n\n## numpy.tile arg1: part 1: length of dates list\nThe first being the length of the dates list. ","3a81062f":"# A closer look at the object\nNow lets split each of these parts up into variables and take a look them:","ec0560bb":"# Dependacies\n* numpy\n* datetime (part of standard lib)","02b0a4bf":"[ME](https:\/\/www.reddit.com\/r\/learnpython\/comments\/kbyy3w\/trying_to_display_a_timeline_for_certain_cases\/gfmk72j?utm_source=share&utm_medium=web2x&context=3)\n\n>I made a [Kaggle](https:\/\/www.kaggle.com\/philipalexanderlees\/trying-to-display-a-timeline-for-certain-cases) notebook that should show how to do this. Let me know if you have any questions.\n\n[OP](https:\/\/www.reddit.com\/r\/learnpython\/comments\/kbyy3w\/trying_to_display_a_timeline_for_certain_cases\/gfn4c6r?utm_source=share&utm_medium=web2x&context=3)\n\n>>Wow, this is a really neat way to demonstrate, thanks for taking the time to make it! There's actually a key distinction that I now realized I failed to make: the values for each date are various strings, not number values. My apologies for not explaining properly - I'm still pretty new so I forgot there are important differences in descriptions. My (hopeful) end goal is to be able to choose\/enter a person from my dataset and display a personalized timeline as a visual aide that shows each event and the date it happened.\n>>\n>>This is a quick drawing of what I'm after using the example df from your notebook: https:\/\/imgur.com\/ohsIW97\n>>\n>>So I realize it's probably more difficult because I can't just use dates and number values as the two axes. Is there a way I can modify the chart like this?\n\n[Me](https:\/\/www.reddit.com\/r\/learnpython\/comments\/kbyy3w\/trying_to_display_a_timeline_for_certain_cases\/gfq2kc4?utm_source=share&utm_medium=web2x&context=3)\n\n>>>Oh interesting. I personally have not made a chart like that before so don't have any good solutions at the top of my head. A quick google search and this matplotlib example looks promising: https:\/\/matplotlib.org\/3.1.1\/gallery\/lines_bars_and_markers\/timeline.html ...\n\n[OP](https:\/\/www.reddit.com\/r\/learnpython\/comments\/kbyy3w\/trying_to_display_a_timeline_for_certain_cases\/gfqkije?utm_source=share&utm_medium=web2x&context=3)\n\n>>>>That first link you sent is perfect for what I'm working with right now! I'm still pretty new so the Dash UI stuff you sent might be useful to me later on.\n>>>>\n>>>>I was able to use the code from the first link with my dataset and I'm playing around with the inputs to make it fit better. One part I'm having trouble with is this code snippet:\n>>>>\n>>>>levels = np.tile([-5, 5, -3, 3, -1, 1],\n>>>>\n>>>>int(np.ceil(len(dates)\/6)))[:len(dates)]\n>>>>\n>>>>I got that the first part dictates the length of the stems, but I can't figure out the function of the second half. I'm having a problem where some dates have a lot of values so they don't display well (the values are all clustered on one stem), could modifying this part help me with that?\n"}}