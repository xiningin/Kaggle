{"cell_type":{"6a490db3":"code","74ca4e54":"code","b08aacfb":"code","b42741f6":"code","419e867a":"code","6f3aca2e":"code","6bed59cb":"code","7ee597ef":"code","50dc0a84":"code","2db7c2df":"code","99dceda3":"code","59ae9dbb":"code","60b2d188":"code","1bf82ce0":"code","918422a0":"code","2d03d08b":"code","34cc0cbc":"code","e8be694d":"code","1306d39e":"code","e45c6596":"code","012bc106":"code","4afc01c9":"code","e7991f51":"code","1c73f725":"code","7deb50fb":"code","ae58c15d":"code","122b153e":"code","7ccb9362":"markdown","8093d9e5":"markdown","bfa4c253":"markdown","200979ad":"markdown","8c38cbb1":"markdown","a12cfc22":"markdown","7dfcd6e4":"markdown","8c316f3c":"markdown","f6e5f801":"markdown","eb590619":"markdown","2361e311":"markdown","c7fb5d2a":"markdown","3046c953":"markdown"},"source":{"6a490db3":"!pip install -q efficientnet","74ca4e54":"import os\nimport re\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport math\n\nfrom matplotlib import pyplot as plt\n\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nimport tensorflow.keras.layers as L\n\nimport efficientnet.tfkeras as efn\n\nfrom kaggle_datasets import KaggleDatasets","b08aacfb":"try:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","b42741f6":"# For tf.dataset\nAUTO = tf.data.experimental.AUTOTUNE\n\n# Data access\nGCS_PATH = KaggleDatasets().get_gcs_path('siim-isic-melanoma-classification')\n\n# Configuration\nEPOCHS = 12\nBATCH_SIZE = 8 * strategy.num_replicas_in_sync\nIMAGE_SIZE = [1024, 1024]","419e867a":"def append_path(pre):\n    return np.vectorize(lambda file: os.path.join(GCS_DS_PATH, pre, file))","6f3aca2e":"sub = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/sample_submission.csv')","6bed59cb":"train = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')","7ee597ef":"sns.countplot(train['target'])","50dc0a84":"TRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/tfrecords\/train*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/tfrecords\/test*.tfrec')\n\nCLASSES = [0,1]   ","2db7c2df":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        #\"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n        \"target\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    #label = tf.cast(example['class'], tf.int32)\n    label = tf.cast(example['target'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"image_name\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['image_name']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef data_augment(image, label):\n    # data augmentation. Thanks to the dataset.prefetch(AUTO) statement in the next function (below),\n    # this happens essentially for free on TPU. Data pipeline code is executed on the \"CPU\" part\n    # of the TPU while the TPU itself is computing gradients.\n    image = tf.image.random_flip_left_right(image)\n    #image = tf.image.random_saturation(image, 0, 2)\n    return image, label   \n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nprint('Dataset: {} training images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_TEST_IMAGES))","99dceda3":"def build_lrfn(lr_start=0.00001, lr_max=0.0001, \n               lr_min=0.000001, lr_rampup_epochs=20, \n               lr_sustain_epochs=0, lr_exp_decay=.8):\n    lr_max = lr_max * strategy.num_replicas_in_sync\n\n    def lrfn(epoch):\n        if epoch < lr_rampup_epochs:\n            lr = (lr_max - lr_start) \/ lr_rampup_epochs * epoch + lr_start\n        elif epoch < lr_rampup_epochs + lr_sustain_epochs:\n            lr = lr_max\n        else:\n            lr = (lr_max - lr_min) * lr_exp_decay**(epoch - lr_rampup_epochs - lr_sustain_epochs) + lr_min\n        return lr\n    \n    return lrfn","59ae9dbb":"with strategy.scope():\n    model = tf.keras.Sequential([\n        efn.EfficientNetB7(\n            input_shape=(*IMAGE_SIZE, 3),\n            #weights='imagenet',\n            weights='imagenet',\n            include_top=False\n        ),\n        L.GlobalAveragePooling2D(),\n        L.Dense(1024, activation = 'relu'), \n        L.Dropout(0.3), \n        L.Dense(512, activation= 'relu'), \n        L.Dropout(0.2), \n        L.Dense(256, activation='relu'), \n        L.Dropout(0.2), \n        L.Dense(128, activation='relu'), \n        L.Dropout(0.1), \n        L.Dense(1, activation='sigmoid')\n    ])\n    \nmodel.compile(\n    optimizer='adam',\n    #loss = 'binary_crossentropy',\n    loss = tf.keras.losses.BinaryCrossentropy(label_smoothing = 0.1),\n    metrics=['binary_crossentropy']\n)\nmodel.summary()\n","60b2d188":"lrfn = build_lrfn()\nlr_schedule = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=1)\n\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE","1bf82ce0":"history = model.fit(\n    get_training_dataset(), \n    epochs=6, \n    callbacks=[lr_schedule],\n    steps_per_epoch=STEPS_PER_EPOCH\n    #validation_data=valid_dataset\n)","918422a0":"model.save(\"efficientnetb7.h5\")","2d03d08b":"#history = model.fit(get_training_dataset(), steps_per_epoch=STEPS_PER_EPOCH, epochs=EPOCHS)","34cc0cbc":"test_ds = get_test_dataset(ordered=True)\n\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds)","e8be694d":"print('Generating submission.csv file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch","1306d39e":"pred_df = pd.DataFrame({'image_name': test_ids, 'target': np.concatenate(probabilities)})\npred_df.head()","e45c6596":"sub.head()\n","012bc106":"del sub['target']\nsub = sub.merge(pred_df, on='image_name')\n#sub.to_csv('submission_label_smoothing.csv', index=False)\nsub.to_csv('submission_b7.csv', index=False)\nsub.head()","4afc01c9":"dfs = []\ndfs.append(sub)\ni = 0\nfor df_loc in os.listdir('..\/input\/efficientnets\/'):\n    print('..\/input\/efficientnets\/{}'.format(df_loc))\n    df = pd.read_csv('..\/input\/efficientnets\/{}'.format(df_loc))\n#     df.head()\n    dfs.append(df)\n# dfs    ","e7991f51":"from scipy.stats import rankdata","1c73f725":"for i in range(4) :\n    dfs[i]['target'] = rankdata(dfs[i]['target'], method='min')\n# dfs[0]","7deb50fb":"dfs[0]['target'] = (dfs[0]['target'] + dfs[1]['target'] + dfs[2]['target'] + dfs[3]['target'])\/4","ae58c15d":"dfs[0]","122b153e":"dfs[0].to_csv('sol.csv' , index = False)","7ccb9362":"### ========================\n## Model fitting \n### ========================\n","8093d9e5":"### Giving input to TPUs is not as straightforwards as GPU\n* Required slightly more preprocessing\n* Visit https:\/\/www.kaggle.com\/docs\/tpu if you have'nt done this before ","bfa4c253":"# Blending from scores by efficientb0 , b2 , b5 and b7 ","200979ad":"## Part 1 of notebook over. We can also submit results generated here.\n* But, we will improve our score further","8c38cbb1":"## Different funcitons for TPU read","a12cfc22":"## Please leave an upvote if you found it helpful \ud83c\udf89\ud83c\udf89","7dfcd6e4":"### Preparing to read data for TPUs","8c316f3c":"## 1. Installing efficient for use later","f6e5f801":"# ================================================\n# 2. PREPROCESSING FOR RUNNING MODEL ON TPU     \n# ================================================","eb590619":"## Using TPU for such notebooks. A TPU helps you train efficiently without owning a 2000 $ GPU\n#### *  TPU improve the training times drastically(Upto  27x faster in some cases), especially for neural networks\n#### * If first time user : Read more about TPUs https:\/\/cloud.google.com\/tpu\/\n","2361e311":"## Next steps :\n1. Use both image and metadata(data about the images i.e. , metadata)\n2. Increase training data using external data\n3. Different size inputs are able to capture more information.(Bigger is not better).Use different image sizes.\n4. Advanced preprocessing techniques.","c7fb5d2a":"## ===========================================\n## MODEL CREATION\n## ===========================================","3046c953":"## Function to use variable learning rate :\n* Keep reducing learning rate as model gets more trained"}}