{"cell_type":{"07fbaf99":"code","dc5e1eec":"code","2473357b":"code","5cd8c79b":"code","cdb7b10b":"code","760e4ca5":"code","88491cfa":"code","d6e3c78c":"code","a9a25101":"code","862f80c9":"code","51fee68d":"code","65d2b593":"code","af7f9fe9":"code","37dc10ec":"code","cee9b6b8":"code","2365bde6":"code","4fa3c07b":"code","7dd7d1a0":"code","6029429a":"code","c6b18dfa":"code","5598d2e5":"markdown","ec6f0650":"markdown","4659c522":"markdown","7789b841":"markdown","a806404e":"markdown","7cdc20b5":"markdown","80b7dc48":"markdown"},"source":{"07fbaf99":"##########################################################################################################\n#   For the task of segmentation we will be using only malignant and benign classes as the mask for      #\n#   normal ultrasound will be zero always (probably!!)                                                   #\n#                                                                                                        #\n#   Model Used: U-Net                                                                                    #\n##########################################################################################################","dc5e1eec":"## Making essential imports\nimport os\nimport numpy as np\nimport pandas as pd\nimport re\nimport matplotlib.pyplot as plt\nimport cv2\nimport tensorflow as tf","2473357b":"## defining a frame for image and mask storage\nframObjTrain = {'img' : [],\n           'mask' : []\n          }\n\n## defining data Loader function\ndef LoadData( frameObj = None, imgPath = None, maskPath = None, shape = 256):\n    imgNames = os.listdir(imgPath)\n    \n    names = []\n    maskNames = []\n    unames = []\n    \n    for i in range(len(imgNames)):\n        unames.append(imgNames[i].split(')')[0])\n    \n    unames = list(set(unames))\n    \n    for i in range(len(unames)):\n        names.append(unames[i]+').png')\n        maskNames.append(unames[i]+')_mask.png')\n    \n    imgAddr = imgPath + '\/'\n    maskAddr = maskPath + '\/'\n    \n    for i in range (len(names)):\n        img = plt.imread(imgAddr + names[i])\n        mask = plt.imread(maskAddr + maskNames[i])\n        \n        img = cv2.resize(img, (shape, shape)) \n        mask = cv2.resize(mask, (shape, shape))\n        \n        frameObj['img'].append(img)\n        frameObj['mask'].append(mask)\n        \n    return frameObj","5cd8c79b":"# loading benign samples\n\nframObjTrain = LoadData( framObjTrain, imgPath = '\/kaggle\/input\/breast-ultrasound-images-dataset\/Dataset_BUSI_with_GT\/benign'\n                        , maskPath = '\/kaggle\/input\/breast-ultrasound-images-dataset\/Dataset_BUSI_with_GT\/benign'\n                         , shape = 256)","cdb7b10b":"# loading malignant samples\n\nframObjTrain = LoadData( framObjTrain, imgPath = '\/kaggle\/input\/breast-ultrasound-images-dataset\/Dataset_BUSI_with_GT\/malignant'\n                        , maskPath = '\/kaggle\/input\/breast-ultrasound-images-dataset\/Dataset_BUSI_with_GT\/malignant'\n                         , shape = 256)","760e4ca5":"## displaying data loaded by our function\nplt.figure(figsize = (10, 7))\nplt.subplot(1,2,1)\nplt.imshow(framObjTrain['img'][1])\nplt.title('Ultra Sound Image')\nplt.subplot(1,2,2)\nplt.imshow(framObjTrain['mask'][1])\nplt.title('Mask for Cancer')\nplt.show()","88491cfa":"###########################################################################\n#                                Model   Defination                       #\n###########################################################################\n\n\n# this block essentially performs 2 convolution\n\ndef Conv2dBlock(inputTensor, numFilters, kernelSize = 3, doBatchNorm = True):\n    #first Conv\n    x = tf.keras.layers.Conv2D(filters = numFilters, kernel_size = (kernelSize, kernelSize),\n                              kernel_initializer = 'he_normal', padding = 'same') (inputTensor)\n    \n    if doBatchNorm:\n        x = tf.keras.layers.BatchNormalization()(x)\n        \n    x =tf.keras.layers.Activation('relu')(x)\n    \n    #Second Conv\n    x = tf.keras.layers.Conv2D(filters = numFilters, kernel_size = (kernelSize, kernelSize),\n                              kernel_initializer = 'he_normal', padding = 'same') (x)\n    if doBatchNorm:\n        x = tf.keras.layers.BatchNormalization()(x)\n        \n    x = tf.keras.layers.Activation('relu')(x)\n    \n    return x\n\n\n# Now defining Unet \ndef GiveMeUnet(inputImage, numFilters = 16, droupouts = 0.1, doBatchNorm = True):\n    # defining encoder Path\n    c1 = Conv2dBlock(inputImage, numFilters * 1, kernelSize = 3, doBatchNorm = doBatchNorm)\n    p1 = tf.keras.layers.MaxPooling2D((2,2))(c1)\n    p1 = tf.keras.layers.Dropout(droupouts)(p1)\n    \n    c2 = Conv2dBlock(p1, numFilters * 2, kernelSize = 3, doBatchNorm = doBatchNorm)\n    p2 = tf.keras.layers.MaxPooling2D((2,2))(c2)\n    p2 = tf.keras.layers.Dropout(droupouts)(p2)\n    \n    c3 = Conv2dBlock(p2, numFilters * 4, kernelSize = 3, doBatchNorm = doBatchNorm)\n    p3 = tf.keras.layers.MaxPooling2D((2,2))(c3)\n    p3 = tf.keras.layers.Dropout(droupouts)(p3)\n    \n    c4 = Conv2dBlock(p3, numFilters * 8, kernelSize = 3, doBatchNorm = doBatchNorm)\n    p4 = tf.keras.layers.MaxPooling2D((2,2))(c4)\n    p4 = tf.keras.layers.Dropout(droupouts)(p4)\n    \n    c5 = Conv2dBlock(p4, numFilters * 16, kernelSize = 3, doBatchNorm = doBatchNorm)\n    \n    # defining decoder path\n    u6 = tf.keras.layers.Conv2DTranspose(numFilters*8, (3, 3), strides = (2, 2), padding = 'same')(c5)\n    u6 = tf.keras.layers.concatenate([u6, c4])\n    u6 = tf.keras.layers.Dropout(droupouts)(u6)\n    c6 = Conv2dBlock(u6, numFilters * 8, kernelSize = 3, doBatchNorm = doBatchNorm)\n    \n    u7 = tf.keras.layers.Conv2DTranspose(numFilters*4, (3, 3), strides = (2, 2), padding = 'same')(c6)\n    \n    u7 = tf.keras.layers.concatenate([u7, c3])\n    u7 = tf.keras.layers.Dropout(droupouts)(u7)\n    c7 = Conv2dBlock(u7, numFilters * 4, kernelSize = 3, doBatchNorm = doBatchNorm)\n    \n    u8 = tf.keras.layers.Conv2DTranspose(numFilters*2, (3, 3), strides = (2, 2), padding = 'same')(c7)\n    u8 = tf.keras.layers.concatenate([u8, c2])\n    u8 = tf.keras.layers.Dropout(droupouts)(u8)\n    c8 = Conv2dBlock(u8, numFilters * 2, kernelSize = 3, doBatchNorm = doBatchNorm)\n    \n    u9 = tf.keras.layers.Conv2DTranspose(numFilters*1, (3, 3), strides = (2, 2), padding = 'same')(c8)\n    u9 = tf.keras.layers.concatenate([u9, c1])\n    u9 = tf.keras.layers.Dropout(droupouts)(u9)\n    c9 = Conv2dBlock(u9, numFilters * 1, kernelSize = 3, doBatchNorm = doBatchNorm)\n    \n    output = tf.keras.layers.Conv2D(1, (1, 1), activation = 'sigmoid')(c9)\n    model = tf.keras.Model(inputs = [inputImage], outputs = [output])\n    return model","d6e3c78c":"## instanctiating model\ninputs = tf.keras.layers.Input((256, 256, 3))\nmyTransformer = GiveMeUnet(inputs, droupouts= 0.07)\nmyTransformer.compile(optimizer = 'Adam', loss = 'binary_crossentropy', metrics = ['accuracy'] )","a9a25101":"retVal = myTransformer.fit(np.array(framObjTrain['img']), np.array(framObjTrain['mask']), epochs = 50, verbose = 0)","862f80c9":"plt.plot(retVal.history['loss'], label = 'training_loss')\nplt.plot(retVal.history['accuracy'], label = 'training_accuracy')\nplt.legend()\nplt.grid(True)","51fee68d":"def predict16 (valMap, model, shape = 256):\n    ## getting and proccessing val data\n    img = valMap['img'][0:16]\n    mask = valMap['mask'][0:16]\n    #mask = mask[0:16]\n    \n    imgProc = img [0:16]\n    imgProc = np.array(img)\n    \n    predictions = model.predict(imgProc)\n  \n\n    return predictions, imgProc, mask\n\n\ndef Plotter(img, predMask, groundTruth):\n    plt.figure(figsize=(9,9))\n    \n    plt.subplot(1,3,1)\n    plt.imshow(img)\n    plt.title(' image')\n    \n    plt.subplot(1,3,2)\n    plt.imshow(predMask)\n    plt.title('Predicted mask')\n    \n    plt.subplot(1,3,3)\n    plt.imshow(groundTruth)\n    plt.title('Actual mask')","65d2b593":"sixteenPrediction, actuals, masks = predict16(framObjTrain, myTransformer)\nPlotter(actuals[1], sixteenPrediction[1][:,:,0], masks[1])","af7f9fe9":"Plotter(actuals[2], sixteenPrediction[2][:,:,0], masks[2])","37dc10ec":"Plotter(actuals[3], sixteenPrediction[3][:,:,0], masks[3])","cee9b6b8":"Plotter(actuals[5], sixteenPrediction[5][:,:,0], masks[5])","2365bde6":"Plotter(actuals[7], sixteenPrediction[7][:,:,0], masks[7])","4fa3c07b":"Plotter(actuals[8], sixteenPrediction[8][:,:,0], masks[8])","7dd7d1a0":"Plotter(actuals[9], sixteenPrediction[9][:,:,0], masks[9])","6029429a":"Plotter(actuals[10], sixteenPrediction[10][:,:,0], masks[10])","c6b18dfa":"myTransformer.save('BreastCancerSegmentor.h5')","5598d2e5":"# Data Loader","ec6f0650":"# Model Instantiation","4659c522":"# Training For 50 Epochs","7789b841":"# Testing","a806404e":"# Saving Model","7cdc20b5":"# Model Defination","80b7dc48":"# Dependencies"}}