{"cell_type":{"14359e78":"code","c79e792d":"code","ac74b8f7":"code","795b6e50":"code","ae52500e":"code","f3c2439f":"code","5cbe60e6":"code","94b2e783":"code","75b6578d":"code","b7dc3882":"code","06cd30f3":"code","3180a127":"code","ce6ac221":"code","07e8ca98":"code","b0a9451d":"code","091e08ec":"code","f29c8a07":"code","6cbdc1ba":"code","47736ee7":"code","90ae5747":"code","b9a4639b":"code","1f128df3":"code","2cb7f9de":"code","6e042bda":"markdown","9ad48f73":"markdown","448bf26c":"markdown","0bc7226a":"markdown","cf244217":"markdown","08248722":"markdown","892de85a":"markdown","b44ed837":"markdown","0c27f3c8":"markdown","2a5332bc":"markdown","eca97753":"markdown","c36deb8d":"markdown"},"source":{"14359e78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c79e792d":"# Import useful libraries\n\nimport time\nimport re\nimport string\nfrom numpy import mean\n\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, HashingVectorizer\nfrom sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import mean_squared_log_error, make_scorer, mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.naive_bayes import MultinomialNB\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\n\nimport warnings\nwarnings.filterwarnings('ignore')","ac74b8f7":"# Read dataset\n\ntrain_data = pd.read_excel('\/kaggle\/input\/predict-book-prices\/train.xlsx')\ntest_data = pd.read_excel('\/kaggle\/input\/predict-book-prices\/test.xlsx')\nsample_submission = pd.read_excel('\/kaggle\/input\/predict-book-prices\/sample_submission.xlsx')\ntrain_data.columns = train_data.columns.str.lower().str.strip().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')\ntest_data.columns = test_data.columns.str.lower().str.strip().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')","795b6e50":"print('Train Data Shape: ', train_data.shape)\nprint('Test Data Shape: ', test_data.shape)\ntrain_data.head()","ae52500e":"train_data.nunique()","f3c2439f":"# Merge the training set and test set\n\npd.set_option('display.max_rows', 200)\ntrain_data['type'] = 'train'\ntest_data['type'] = 'test'\nmaster_data = pd.concat([train_data, test_data])\nunique_titles = pd.DataFrame(master_data.title.unique()).reset_index()\nunique_titles.columns = ['id', 'title']\nmaster_data = master_data.merge(unique_titles, on = 'title', how = 'left')\n#master_data = master_data.sort_values(by = ['id'], ascending = [True])\nmaster_data.head()","5cbe60e6":"# Reviews handling\n\nmaster_data['reviews'] = master_data['reviews'].apply(lambda x: x.split(' ')[0])\nmaster_data['reviews'] = master_data['reviews'].astype(np.float16)","94b2e783":"# Ratings handling\n\nmaster_data['ratings'] = master_data['ratings'].apply(lambda x: x.split(' ')[0])\nmaster_data['ratings'] = master_data['ratings'].apply(lambda x: int(x.replace(',', '')))","75b6578d":"# Publication year and age of editions\n\nmaster_data['year'] = master_data['edition'].str[-4:]\n\n# Random publication year for some books\nmaster_data['year'] = master_data['year'].apply(lambda x: re.sub(\"[^0-9]\", 'NA', x))\nmaster_data['year'] = master_data['year'].apply(lambda x: x.replace('NA', '0'))\nmaster_data['year'] = master_data['year'].astype(np.int16)\n\nmaster_data['age'] = 2019 - master_data['year']\n\nmaster_data.loc[(master_data['year'] == 0), 'year'] = np.NaN\navg_age = master_data['age'].mean()\nmaster_data.loc[(master_data['year'].isnull()), 'age'] = avg_age\n\nmaster_data.head()","b7dc3882":"# loading stop words from nltk library\n\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nstop_words = set(stopwords.words('english'))\n\ndef nlp_preprocessing(total_text):\n    if type(total_text) is not int:\n        string = \"\"\n        for word in total_text.split():\n        # if the word is a not a stop word then retain that word from the data\n            if not word in stop_words:\n                string += word + \" \"\n        \n    return string","06cd30f3":"# text processing - remove stop words\n\nstart_time = time.process_time()\nfor column in ['title', 'author', 'edition', 'synopsis', 'genre', 'bookcategory']:\n    master_data[column] = master_data[column].apply(lambda x: nlp_preprocessing(x))\n    master_data[column] = master_data[column].str.lower()\n    master_data[column] = master_data[column].astype(str).apply(lambda x : re.sub(\"[^A-Za-z]\",\" \",x))\n    master_data[column] = master_data[column].apply(lambda x:''.join([i for i in x if i not in string.punctuation]))\nprint('Time took for preprocessing the text :',time.process_time() - start_time, \"seconds\")","3180a127":"# Both genre and bookcategory columns have categorized structure\n\nmaster_data['genre'] = master_data['genre'].map(master_data['genre'].value_counts())\nmaster_data['bookcategory'] = master_data['bookcategory'].map(master_data['bookcategory'].value_counts())","ce6ac221":"# Create features for Binding and Imported versions \n\nmaster_data['binding'] = master_data['edition'].apply(lambda x: np.where('paperback' in x, -1, 1))\nmaster_data['imported'] = master_data['edition'].apply(lambda x: np.where('import' in x, 1, -1))\nmaster_data['synopsis'] = master_data['synopsis'] + \" \" + master_data['title']\nmaster_data = master_data.drop(['title'], axis = 1)","07e8ca98":"# Separate train and test data\n\ntrain_data = master_data.loc[master_data['type'] == 'train']\ntest_data = master_data.loc[master_data['type'] == 'test']\n\ntrain_data = train_data.drop(['id', 'type', 'author', 'edition'], axis = 1)\ntest_data = test_data.drop(['id', 'price', 'type', 'author', 'edition'], axis = 1)\ntrain_data.head()","b0a9451d":"X = train_data.drop(['price'],axis = 1)\ny = train_data['price']\ny = np.log1p(y)\n\n# Split the data\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 22)","091e08ec":"get_numeric_data = FunctionTransformer(lambda x: x[['reviews','ratings','genre', 'bookcategory','binding','year']], validate = False)\nget_text_data = FunctionTransformer(lambda x: x['synopsis'],validate = False)","f29c8a07":"numeric_pipeline = Pipeline([('selector', get_numeric_data),])\ntext_pipeline = Pipeline([('selector', get_text_data), ('vectorizer', CountVectorizer()),])","6cbdc1ba":"params = {\n    'clf__n_estimators' : [100, 200],\n    #'clf__max_depth' : [3,4,5,6,7],\n    'clf__learning_rate': [0.01, 0.1, 0.01],\n    'clf__reg_lambda': list(np.arange(0.1, 0.9, 0.1)),\n    #'clf__colsample_bytree' : list(np.arange(0.1,0.8,0.1)),\n    'clf__importance_type': ['gain', 'weight', 'cover', 'total_gain', 'total_cover'],\n    'clf__booster': ['gbtree', 'gblinear', 'dart']\n}","47736ee7":"pipeline = Pipeline([('union', FeatureUnion([('numeric', numeric_pipeline), ('text', text_pipeline)])),\n               ('clf', LGBMRegressor(verbosity = 1, objective = 'regression'))])","90ae5747":"def get_score(y_val, y_pred):\n    return np.sqrt(mean_squared_log_error(y_pred, y_val))\n    \ncriteria = make_scorer(get_score, greater_is_better = False)\ngrid = RandomizedSearchCV(pipeline, param_distributions = params, n_iter = 15, cv = 5, scoring = criteria)\ngrid.fit(X_train, y_train)\nprint(grid.best_params_)\nprint('Best Score: ', grid.best_score_)","b9a4639b":"y_preds = grid.predict(X_test)\nprint('Mean Squared Error: ', mean_squared_error(y_preds, y_test))\n\nprint('Validation set score: ', 1 - np.sqrt(np.square(np.log10(y_preds +1) - np.log10(y_test +1)).mean()))","1f128df3":"grid.fit(X, y)\nPreds = np.expm1(grid.predict(test_data))\nsubmission = pd.DataFrame({'Price': Preds})\nsubmission['Price'] = Preds\nsubmission.head(10)","2cb7f9de":"submission.to_excel('submission_v2.xlsx', index = False)","6e042bda":"### NLTK library to remove stopwords","9ad48f73":"## Data cleaning and feature creation","448bf26c":"# Machine Hack\n\n## Overview\n\nThe so-called paradoxes of an author, to which a reader takes exception, often exist not in the author's book at all, but rather in the reader's head. - Friedrich Nietzsche Books are open doors to the unimagined worlds which is unique to every person. It is more than just a hobby for many. There are many among us who prefer to spend more time with books than anything else. Here we explore a big database of books. Books of different genres, from thousands of authors. In this challenge, participants are required to use the dataset to build a Machine Learning model to predict the price of books based on a given set of features. Size of training set: 6237 records Size of test set: 1560 records FEATURES: Title: The title of the book Author: The author(s) of the book. Edition: The edition of the book eg (Paperback,\u2013 Import, 26 Apr 2018) Reviews: The customer reviews about the book Ratings: The customer ratings of the book Synopsis: The synopsis of the book Genre: The genre the book belongs to BookCategory: The department the book is usually available at. Price: The price of the book (Target variable)","0bc7226a":"![](https:\/\/machinehack-be.s3.amazonaws.com\/predict_the_price_of_books\/gregory-culmer-e8ThqioFqgs-unsplash-460x307.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAI2O7AQTB6JBT4VSA%2F20200803%2Fap-south-1%2Fs3%2Faws4_request&X-Amz-Date=20200803T180002Z&X-Amz-Expires=172800&X-Amz-SignedHeaders=host&X-Amz-Signature=b74ba1b23c8423c775855c08f56f642f068f6d4f61a247963efa77afdea41bf6)","cf244217":"### Model training","08248722":"#### Pipeline for linear sequence of data transforms to be chained together","892de85a":"### Model fitting and submission","b44ed837":"#### Create features for Binding and Imported versions","0c27f3c8":"#### Custom scoring method","2a5332bc":"### LGBM Regressor: Model parameters for gridsearch","eca97753":"### make predictions on validation data","c36deb8d":"#### Function Transformer for handling numerical and categorical features saparately"}}