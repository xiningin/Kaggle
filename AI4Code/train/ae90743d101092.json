{"cell_type":{"d67986c7":"code","f320d109":"code","f299307f":"code","d111f601":"code","32a2336e":"code","22cd6320":"code","4f8ab252":"code","143a6d42":"code","09cf8eca":"code","6bff1bfd":"code","e6bbca91":"code","f1168603":"code","27370444":"code","fafec00a":"code","816d2a50":"code","c215aa4b":"code","12f1143a":"code","f5d1ded8":"code","a049f630":"code","59217ae1":"code","689d5600":"code","6a3d39d5":"code","31ebaa33":"code","9783ed6c":"code","15909784":"code","478e701c":"code","b7ac11f3":"markdown","fc03c350":"markdown","309862bd":"markdown","88257d47":"markdown","7a4a1997":"markdown","620d3091":"markdown","d4034e8c":"markdown","97280302":"markdown","1622bf9e":"markdown","b3a84048":"markdown"},"source":{"d67986c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.cluster import DBSCAN\nfrom scipy.stats import zscore\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f320d109":"df_train= pd.read_csv('..\/input\/onlinedatasciencechallenge\/train.csv')\ndf_test_input=pd.read_csv('..\/input\/onlinedatasciencechallenge\/test_input.csv')\ncust=df_test_input['CUSTNBR']\n","f299307f":"df_train.drop(columns=['TRAN_DATE','CONTPAIDAMNT07'],inplace=True)\n","d111f601":"import numpy as np\nimport pandas as pd\noutliers=[]\ndef detect_outlier(data_1):\n    \n    threshold=3\n    mean_1 = np.mean(data_1)\n    std_1 =np.std(data_1)\n    \n    \n    for y in data_1:\n        z_score= (y - mean_1)\/std_1 \n        if np.abs(z_score) > threshold:\n            outliers.append(y)\n    return outliers","32a2336e":"df_train =df_train[df_train['ADDCONTAMNT']<24520]","22cd6320":"df_train.sort_values(by='ADDCONTAMNT',ascending=False)","4f8ab252":"max()","143a6d42":"detect_outlier(df_train['ACCMVMTAVG']\n)","09cf8eca":"max(outliers)","6bff1bfd":"df_test_input['ACCMVMTAVG'].max()","e6bbca91":"len(outliers)","f1168603":"filt=[df_train['ADDCONTAMNT']==outliers","27370444":"df_train.max()","fafec00a":"df_test_input.max()","816d2a50":"df_train.mean()-df_test_input.mean()","c215aa4b":"for each in df_train.columns:\n    filt=df_train[each].between( df_train[each].quantile(0), df_train[each].quantile(0.85))\n    df_train[each]=df_train[each][filt]","12f1143a":"#df_train.sort_values(by='ADDCONTAMNT')\n#df_train.fillna(method='ffill',inplace=True)\n#df_train.fillna(method='bfill',inplace=True)","f5d1ded8":"for each in df_train.columns:\n    df_train.fillna(df_train[each].value_counts().index[0],inplace=True)","a049f630":"#df_train.fillna(df_train.mean(),inplace=True)\n","59217ae1":"df_test_input.fillna(df_test_input.mean(),inplace=True)\ndf_test_input.fillna(df_test_input.median(),inplace=True)","689d5600":"df_test_input=df_test_input.iloc[:,2:]","6a3d39d5":"x=df_train.iloc[:,2:]","31ebaa33":"y=df_train['ADDCONTAMNT']","9783ed6c":"\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\npoly_reg=PolynomialFeatures(degree=2)\nxpol=poly_reg.fit_transform(x)\nxpoltest=poly_reg.fit_transform(df_test_input)\nlin_reg=LinearRegression(normalize=True)\nlin_reg.fit(xpol,y)\ny2=lin_reg.predict(xpol)\ny3=lin_reg.predict(xpoltest)","15909784":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nrms = sqrt(mean_squared_error(y, y2))\nrms","478e701c":"result=pd.DataFrame(cust)\nresult['Predicted']=y3\nresult.sort_index(inplace=True)\nresult.rename(columns={'CUSTNBR':'Id'},inplace=True)\nresult.set_index(['Id'],inplace=True)\na =result\nd=pd.DataFrame(a)\nd.to_csv('deneme.csv')\nfrom IPython.display import FileLink\nFileLink(r'deneme.csv')\n","b7ac11f3":"**Drop Outliers**","fc03c350":"### Drop","309862bd":"**F\u0130LL NA \u0130N TEST**","88257d47":"### Most Value Counts","7a4a1997":"**Pre-Processing**","620d3091":"## BY MEAN","d4034e8c":"**Regression**","97280302":"**DATA Read**","1622bf9e":"### BFill\/Fill\n","b3a84048":"**Prepare New Data**"}}