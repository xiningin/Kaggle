{"cell_type":{"1890c37a":"code","6fcd902b":"code","9413626b":"code","c9b96b74":"code","44f045c4":"code","b5475757":"code","6085dd7d":"code","10742d47":"code","a7665c29":"code","b9dd3176":"code","039e73bd":"code","b8e7d8b8":"code","814e208b":"code","3e0ec76c":"code","8e133be9":"code","ea6a41c0":"code","599da977":"code","3859a9e3":"code","e0684752":"code","31414443":"code","19c71e6c":"code","3b742f98":"code","8eee2db5":"code","48cc43ef":"code","403c0521":"code","f691846a":"code","a5cc5e8d":"code","be0f3e86":"code","32c5c04a":"code","f3d7a447":"code","00376bb1":"code","5716a6ff":"code","a3fceb63":"code","aa30fdf8":"code","925d504b":"code","3d96e1de":"markdown","eab5a23c":"markdown","3890a2f5":"markdown","0fa552aa":"markdown","ac40a215":"markdown","eae2d0d6":"markdown","c4d46e15":"markdown","67902f99":"markdown","9de80ee6":"markdown","a9f300db":"markdown","3bf6de23":"markdown","193905e7":"markdown","f098e74f":"markdown","9ee289fb":"markdown"},"source":{"1890c37a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler , MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import classification_report, r2_score","6fcd902b":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9413626b":"#Cargamos los datos dados en un csv\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\ny_test = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","c9b96b74":"#Visualizamos datos para comprobar que se ha cargado correctamente\ndf_train.head()","44f045c4":"df_test.head()","b5475757":"var_categorical = [var for var in df_train.columns if df_train[var].dtype=='O']\n\nprint('Hay {} variables categ\u00f3ricas\\n'.format(len(var_categorical)))\nprint(var_categorical)","6085dd7d":"var_numerical = df_train._get_numeric_data().columns\nprint('Hay {} variables n\u00famericas\\n'.format(len(var_numerical)))\nprint(var_numerical)","10742d47":"#Quitamos las variables n\u00famericas que no es necesario analizar los at\u00edpicos\nvar_numerical = var_numerical.drop(['Survived','PassengerId','Pclass'])","a7665c29":"#--- Visualizaci\u00f3n de los datos en forma de cajas---\ndef boxPlot(dataset, variables_numericas):\n  rows = 2\n  cols = 2\n  fig, ax = plt.subplots(rows, cols, figsize=(15,15))\n  print(variables_numericas)\n  i=0;j=0;k=0;\n  while i<rows:\n      while j<cols:\n          sns.boxplot(dataset[variables_numericas[k]], ax=ax[i, j])\n          k+=1;j+=1\n      j=0;i+=1\n  #plt.savefig(texto)\n  plt.show()\n    \n#--- Visualizaci\u00f3n de las variables elegidas---\n\ndef MostrarVariable(dataset,var,title):\n  fig = plt.figure(figsize = (8,5))\n  dataset[var].value_counts(normalize = True).plot(kind='bar', color= ['skyblue','navy','blue'], alpha = 0.9, rot=0)\n  plt.title(title)\n  plt.show()\n\n","b9dd3176":"boxPlot(df_train, var_numerical)","039e73bd":"MostrarVariable(df_train,'Survived', 'Survival 0 = No, 1 = Yes')","b8e7d8b8":"MostrarVariable(df_train,'Embarked', 'Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton')","814e208b":"MostrarVariable(df_train,'Pclass','Ticket class 1 = 1st, 2 = 2nd, 3 = 3rd')","3e0ec76c":"df_train[var_numerical].describe().T","8e133be9":"sns.heatmap(df_train.drop(columns=['PassengerId']).corr(),annot=True)","ea6a41c0":"#Comprobamos el n\u00famero de valores perdidos\ndf_train.isnull().sum() \/ len(df_train) * 100","599da977":"# Identificamos los missing values visualmente\nsns.heatmap(df_train.isnull(), cbar=False)","3859a9e3":"df_test.isnull().sum() \/ len(df_test) * 100","e0684752":"# Identificamos los missing values visualmente\nsns.heatmap(df_test.isnull(), cbar=False)","31414443":"#Eliminamos de la parte train\ndf_train = df_train.drop('Cabin', axis = 1)\n\n#Eliminamos de la parte test\ndf_test = df_test.drop('Cabin', axis = 1)","19c71e6c":"#--- Se encarga de eliminar los nulos que encuentre en cada variable---\ndef eliminarNulos(columns, dataset):\n    for var in columns:\n        dataset[var].fillna(dataset[var].mean(), inplace=True)\n    return dataset","3b742f98":"df_train = eliminarNulos(['Age'], df_train)\ndf_test = eliminarNulos(['Age','Fare'], df_test)","8eee2db5":"df_train = df_train[df_train['Embarked'].notna()]","48cc43ef":"#Eliminamos de la parte train\ndf_train = df_train.drop('Name', axis = 1)\n\n#Eliminamos de la parte test\ndf_test = df_test.drop('Name', axis = 1)","403c0521":"df_train.head()","f691846a":"#--- Sacamos los valores categoricos del dataset --\ndef VarCategorical(dataset):\n    var_categorical = [var for var in dataset.columns if dataset[var].dtype=='O']\n    print('Hay {} variables categ\u00f3ricas\\n'.format(len(var_categorical)))\n    print(var_categorical)\n    return var_categorical\n\n#--- Estandarizamos los datos, tanto test como train ---\ndef EstandarizacionDatos(dataset,var_categorical):\n    label = LabelEncoder()\n    for var in var_categorical:\n        dataset[var]= label.fit_transform(dataset[var].astype(str))\n    return dataset\n\n","a5cc5e8d":"var_train = VarCategorical(df_train)\nvar_test = VarCategorical(df_test)\n\ndf_train = EstandarizacionDatos(df_train,var_train)\ndf_test = EstandarizacionDatos(df_test,var_test)","be0f3e86":"df_train","32c5c04a":"def VaraiblesKaggle(dataframe_train, dataframe_test):\n  x_train_kaggle = dataframe_train.drop(['Survived','PassengerId'],1)\n  y_train_kaggle = dataframe_train['Survived']\n  x_test_kaggle = dataframe_test.drop('PassengerId',1)\n  id_kaggle = dataframe_test['PassengerId']\n  return x_train_kaggle, y_train_kaggle, x_test_kaggle, id_kaggle","f3d7a447":"x_train_kaggle, y_train_kaggle, x_test_kaggle, id_kaggle = VaraiblesKaggle(df_train,df_test)","00376bb1":"x_train_kaggle.head()","5716a6ff":"df_test.info()","a3fceb63":"lg_model = LogisticRegression(solver='liblinear')\nlg_model.fit(x_train_kaggle, y_train_kaggle)\ny_pred_lg = lg_model.predict(x_test_kaggle)\n\nprint(r2_score(y_test.drop('PassengerId',1), y_pred_lg))","aa30fdf8":"def SubirKaggle(predict, id):\n  #Es necesario subirlo en categorico asi que lo transformo\n  #predict_new = np.array([\"Yes\" if e == 1 else \"No\" for e in predict])\n  # Creamos el dataframe para mandarlo despues al CSV\n  submission = pd.DataFrame({'PassengerId': id, 'Survived': predict})\n  # Pasamos el dataframe a CSV\n  submission.to_csv('submission.csv', index=False)","925d504b":"SubirKaggle(y_pred_lg, id_kaggle)","3d96e1de":"## Descripci\u00f3n de las variables","eab5a23c":"Despu\u00e9s de esto, vamos a analizar las variables numericas.","3890a2f5":"* **Survival** \tSurvival \t0 = No, 1 = Yes\n* **Pclass** \tTicket class \t1 = 1st, 2 = 2nd, 3 = 3rd\n* **Sex** \tSex \t male, female\n* **Age** \tAge in years \t Age is fractional if less than 1.\n* **Sibsp** \t# of siblings \/ spouses aboard the Titanic \t\n* **Parch** \t# of parents \/ children aboard the Titanic \t\n* **Ticket** \tTicket number \t\n* **Fare** \tPassenger fare \t\n* **Cabin** \tCabin number \t\n* **Embarked** \tPort of Embarkation \tC = Cherbourg, Q = Queenstown, S = Southampton","0fa552aa":"## Paso 1. Comprobar nulos y tratarlos","ac40a215":"# Cargamos el dataset","eae2d0d6":"# Preprocesamiento de los datos","c4d46e15":"Vemos que existen varios problemas con los datos nulos, primero un 77% de valores perdidos en la variable **Cabin**, que eliminaremos ya que recuperar tantos datos empeoraremos el modelo casi seguro.\n\nDespu\u00e9s la variable **Age** que tiene casi un 20%, esta variable podremos aplicar alg\u00fan m\u00e9todo de inserci\u00f3n de datos.\n\nY en **Embarked**, que tenemos muy poquitos, veremos si afecta al modelo antes de actuar.","67902f99":"## Paso 2. Tratamiento de variables categoricas","9de80ee6":"Vemos por ejemplo que el ticket con la clase, tiene una correlaci\u00f3n positiva, como es logico.\n\nTambien vemos que Sibsp y Parch tienen una correlaci\u00f3n positiva, ya que representa el n\u00famero de hijos y padres, que normalmente suelen ir juntos.\n","a9f300db":"Vemos la correlaci\u00f3n de las variables","3bf6de23":"Adem\u00e1s, consideramos que la variable 'Name' no tiene informaci\u00f3n por lo tanto, la eliminamos.","193905e7":"# Importamos librerias","f098e74f":"# Visualizacion de los datos","9ee289fb":"Nos quedar\u00eda el dataset tal que as\u00ed:"}}