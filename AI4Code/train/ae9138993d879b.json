{"cell_type":{"cdc1733d":"code","9c79f852":"code","c7ad2763":"code","da67c124":"code","40fc4312":"code","6248f22c":"code","8bd45f53":"code","86c49d4a":"code","a172a74f":"code","e204bb39":"code","8d445bfc":"code","de08bc67":"markdown","6e1d6aca":"markdown","186b688c":"markdown","f29e3695":"markdown","94cb0cf5":"markdown","abca1a39":"markdown","5fd942a5":"markdown","3a7fa734":"markdown","4f0cdb35":"markdown","05d7171a":"markdown","88484520":"markdown","1199b24d":"markdown","13902050":"markdown","27fa1d3c":"markdown","2359b4ce":"markdown","766f6aed":"markdown","256c6305":"markdown","7a758589":"markdown","1771e99a":"markdown","934749a3":"markdown"},"source":{"cdc1733d":"# Python3 program to \n# demonstrate defining \n# a class\n\nclass Dog:\n    \n    pass\n","9c79f852":"# Declaring an object:\n\n# Python3 program to\n# demonstrate instantiating\n# a class\n\n\nclass Dog(object):\n    # A simple class\n    # attribute\n    # Attribute can be data or functions\n    attr1 = \"mammal\"\n    attr2 = \"dog\"\n    \n    # A sample method  \n    def fun(self): \n        print(\"I'm a\", self.attr1)\n        print(\"I'm a\", self.attr2)\n        \n# Driver code\n# Object instantiation\nRodger = Dog() \n\n# Accessing class attributes(functions, datas) through objects\n\nprint(Rodger.attr1)\n\n# We're calling a method \nRodger.fun()\n\nprint(Rodger.attr2)\n\nprint(Rodger.fun)","c7ad2763":"class person():\n    \"This is a person class\"\n    age = 10\n\n    def greet(self):\n        print('Hello')\n        \nprint(person.age)    \n        \nprint(person.greet)\n\nprint(person.__doc__)","da67c124":"## Creating a new object instances of the class person\n\n# Object instantiation\nLily = person()\nLily.greet()\nLily.age","40fc4312":"# A Sample class with init method \nclass Person: \n   \n    # init method or constructor  \n    \n    def __init__(self, name = \"kiro\", Age = 9): # Default name and age\n        self.name = name \n        self.Age  = Age\n    # Sample Method  \n    def say_hi(self): \n        print(\"            \")\n        print('Hello, my name is', self.name) \n        print(\"I'm \",self.Age, \"years old\")\np = Person('Kibria',25) \np.say_hi() \n\nP2 = Person(\"June\",45)\nP2.say_hi()\n\nP3 = Person()\nP3.say_hi()","6248f22c":"#Python3 program to show that the variables with a value  \n# assigned in the class declaration, are class variables and \n# variables inside methods and constructors are instance \n# variables. \n    \n# Class for Dog \nclass Dog: \n   \n    # Class Variable \n    animal = 'dog'            \n   \n    # The init method or constructor \n    def __init__(self, breed, color): \n     \n        # Instance Variable     \n        self.breed = breed\n        self.color = color        \n    \n# Objects of Dog class \nRodger = Dog(\"Pug\", \"brown\") \nBuzo = Dog(\"Bulldog\", \"black\") \n \nprint('Rodger details:')   \nprint('Rodger is a', Rodger.animal) \nprint('Breed: ', Rodger.breed)\nprint('Color: ', Rodger.color)\n \nprint('\\nBuzo details:')   \nprint('Buzo is a', Buzo.animal) \nprint('Breed: ', Buzo.breed)\nprint('Color: ', Buzo.color)\n \n# Class variables can be accessed using class \n# name also \nprint(\"\\nAccessing class variable using class name\")\nprint(Dog.animal) ","8bd45f53":"# Python3 program to show that we can create  \n# instance variables inside methods \n    \n# Class for Dog \nclass Dog: \n       \n    # Class Variable \n    animal = 'dog'     \n       \n    # The init method or constructor \n    def __init__(self, breed): \n           \n        # Instance Variable \n        self.breed = breed             \n   \n    # Adds an instance variable  \n    def setColor(self, color): \n        self.color = color \n       \n    # Retrieves instance variable     \n    def getColor(self):     \n        return self.color    \n   \n# Driver Code \nRodger = Dog(\"pug\") \nRodger.setColor(\"brown\") \nprint(Rodger.getColor())  ","86c49d4a":"class ComplexNumber:\n    def __init__(self, r=0, i=0):\n        self.real = r\n        self.imag = i\n\n    def get_data(self):\n        print(f'{self.real}+{self.imag}j')\n\n\n# Create a new ComplexNumber object\nnum1 = ComplexNumber(2, 3)\n\n# Call get_data() method\n# Output: 2+3j\nnum1.get_data()\n\n# Create another ComplexNumber object\n# and create a new attribute 'attr'\nnum2 = ComplexNumber(5)\nnum2.attr = 10\nnum2.get_data()\n\n# Output: (5, 0, 10)\nprint((num2.real, num2.imag, num2.attr))\n\n# but c1 object doesn't have attribute 'attr'\n# AttributeError: 'ComplexNumber' object has no attribute 'attr'\nprint(num1.attr)","a172a74f":"num1 = ComplexNumber(2,3)\ndel num1.imag\nnum1.get_data()","e204bb39":"del ComplexNumber.get_data\nnum1.get_data()","8d445bfc":"c1 = ComplexNumber(1,3)\ndel c1\nc1","de08bc67":"![image.png](attachment:image.png)","6e1d6aca":"Let's create a class, \"person\" ","186b688c":"Actually, it is more complicated than that. When we do c1 = ComplexNumber(1,3), a new instance object is created in memory and the name c1 binds with it.\n\nOn the command del c1, this binding is removed and the name c1 is deleted from the corresponding namespace. The object however continues to exist in memory and if no other name is bound to it, it is later automatically destroyed.\n\nThis automatic destruction of unreferenced objects in Python is also called garbage collection.","f29e3695":"An object is an instance of a class. A Class is like a blueprint while an instance is it's actual value.\n\nSay a Ruby is a dog who is seven years old and it's breed is pug, so it falls under the class Dog and the dog itself(it's identity, state, behaviors)is an object.\nAn object consists of : \n\nState: It is represented by the attributes of an object. It also reflects the properties of an object.\n\nBehavior: It is represented by the methods of an object. It also reflects the response of an object to other objects.\n\nIdentity: It gives a unique name to an object and enables one object to interact with other objects.\n","94cb0cf5":"When an object of a class is created, the class is said to be instantiated. All the instances share the attributes and the behavior of the class. But the values of those attributes, i.e. the state are unique for each object. A single class may have any number of instances.\n\nExample:\n![image.png](attachment:image.png)","abca1a39":"This creates a new Dog class with no attributes or methods. The class keyword indicates that a class has been creating followed by the name of the class(Dog).","5fd942a5":"Defining instance variable using the normal method.","3a7fa734":"# Python Classes ","4f0cdb35":"# Class Objects","05d7171a":"Primitive data structures\u2014like numbers, strings, and lists\u2014are designed to represent simple pieces of information, such as the cost of an apple, the name of a poem, or your favorite colors, respectively. What if you want to represent something more complex?","88484520":"Deleting Attributes and Objects\nAny attribute of an object can be deleted anytime, using the del statement. Try the following on the Python shell to see the output.","1199b24d":"Class functions that begin with double underscore __ are called special functions as they have special meaning.\n\nOf one particular interest is the __ init __() function. This special function gets called whenever a new object of that class is instantiated.\n\nThis type of function is also called constructors in Object Oriented Programming (OOP). We normally use it to initialize all the variables.","13902050":"\nClass and Instance Variables\nInstance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class. Instance variables are variables whose value is assigned inside a constructor or method with self whereas class variables are variables whose value is assigned in the class.\n\nDefining instance variable using a constructor. ","27fa1d3c":"#  __ init __ method:","2359b4ce":"Anyone can notice the *self* parameter of the greet funcion inside the class person, but when the greet method is called simply as Lily.greet() without any arguements, it still worked.\nThis is because, whenever an object calls its method, the object itself is passed as the first argument. So, harry.greet() translates into Person.greet(harry).\n\nIn general, calling a method with a list of n arguments is equivalent to calling the corresponding function with an argument list that is created by inserting the method's object before the first argument.\n\nFor these reasons, the first argument of the function in class must be the object itself. This is conventionally called self. It can be named otherwise but we highly recommend to follow the convention.","766f6aed":"# Instantiating a class(Declaring Objects) ","256c6305":"# PLEASE UPVOTE IF YOU LIKE THIS \ud83e\udd73\ud83e\udd73","7a758589":"![image.png](attachment:image.png)","1771e99a":"For example, let\u2019s say you wanted to track the number of dogs that may have different attributes like breed, age. If a list is used, the first element could be the dog\u2019s breed while the second element could represent its age. Let\u2019s suppose there are 100 different dogs, then how would you know which element is supposed to be which? What if you wanted to add other properties to these dogs? This lacks organization and it\u2019s the exact need for classes. \n\nClass creates a user-defined data structure, which holds its own data members and member functions, which can be accessed and used by creating an instance of that class. A class is like a blueprint for an object.","934749a3":"****This notebook is for beginners who want to know about Pyhton classes and objects****"}}