{"cell_type":{"239cd51d":"code","472e4d2a":"code","aba43d02":"code","9ea613f5":"code","f64c9f69":"code","755d0fad":"code","e7a0a989":"code","4157dfde":"code","21fc599a":"code","c6a47d11":"code","e70fd043":"code","6d49cc02":"code","586e23b4":"code","7af81795":"code","71bfb874":"code","fcee8dde":"code","cde8fa7e":"code","619563c2":"code","2d3d30de":"code","1ffe757d":"code","b5347abe":"code","078f5e08":"code","8eb9deaf":"code","b4999282":"code","2483dc3f":"code","e8807d12":"code","cd73b7b6":"code","c7855209":"markdown","dcfd13de":"markdown","d4729d53":"markdown","07c758e4":"markdown","c3b2c7c9":"markdown","5104bb85":"markdown","391ad746":"markdown","5aebf49a":"markdown","e06698a0":"markdown","56f79b72":"markdown","d1b368ba":"markdown","4a91a502":"markdown","13ac922f":"markdown","5b26cadf":"markdown","f4d8db5a":"markdown","7d88cca7":"markdown","cf78561b":"markdown","c3569bcf":"markdown","e516b07a":"markdown","be5f8137":"markdown","722cae25":"markdown","bb6d9b9a":"markdown","e0a55350":"markdown"},"source":{"239cd51d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","472e4d2a":"from os import listdir\nimport matplotlib.pyplot as plt\n%matplotlib inline  \n# To store resultimg plots\/graphs in the notebook document below the respective code cells\n\n!pip install chart_studio\nimport plotly.express as px\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport cufflinks\n#Required to apply plotly\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n\nimport seaborn as sns\nsns.set(style='whitegrid')\n\nimport pydicom\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use('fivethirtyeight')\nplt.show()\n","aba43d02":"orange_black = [\n    '#fdc029', '#df861d', '#FF6347', '#aa3d01', '#a30e15', '#800000', '#171820'\n]","9ea613f5":"print(os.listdir('..\/input\/siim-isic-melanoma-classification\/'))","f64c9f69":"IMAGE_PATH = '..\/input\/siim-isic-melanoma-classification\/'\n\ntrain_df = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/train.csv')\ntest_df = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/test.csv')\n\n#Training data\nprint('Number of Training examples', train_df.shape[0])\nprint('Number of Test examples', test_df.shape[0])\ntrain_df.head()","755d0fad":"z = train_df.groupby(['benign_malignant'])['target'].count().to_frame()\nz.style.background_gradient(cmap='Oranges')\n","e7a0a989":"#missing values\n\nprint('----train_df-----')\nprint(train_df.info());\n\nprint('\\n')\nprint('----test_df-----')\nprint(test_df.info());","4157dfde":"print('Total images in training set ',train_df['image_name'].count())\nprint('Total images in test set ',test_df['image_name'].count())","21fc599a":"print(f\"There are total {train_df['patient_id'].count()} patient ids, out of which {train_df['patient_id'].value_counts().count()} are unique\")","c6a47d11":"columns = train_df.columns.tolist()\ncolumns","e70fd043":"z = train_df['target'].value_counts().to_frame()\nz.style.background_gradient(cmap='Oranges')","6d49cc02":"#interactive plots\ntrain_df['target'].value_counts(normalize=True).iplot(kind='bar',\n                                                     yTitle='Percentage',\n                                                     linecolor='black',\n                                                     opacity=0.7,\n                                                     color='orange',\n                                                     bargap=0.8,\n                                                     gridcolor='white',\n                                                     title='[INTERACTIVE] Target value distribution from training set')","586e23b4":"z = train_df['sex'].value_counts().to_frame()\nz.style.background_gradient(cmap='Oranges')","7af81795":"#interactive plots\ntrain_df['sex'].value_counts(normalize=True).iplot(kind='bar',\n                                                     yTitle='Percentage',\n                                                     linecolor='black',\n                                                     opacity=0.7,\n                                                     color='purple',\n                                                     bargap=0.8,\n                                                     gridcolor='white',\n                                                     title='[INTERACTIVE] Sex column distribution from training set')","71bfb874":"z = train_df.groupby(['target','sex'])['benign_malignant'].count().to_frame().reset_index()\nz.style.background_gradient(cmap='Oranges')\n","fcee8dde":"sns.catplot(x='target', y='benign_malignant',hue='sex', data=z, kind='bar',palette=orange_black);\nplt.xlabel('Benign:0   Malignant:1')\nplt.ylabel('Count')","cde8fa7e":"z = train_df['anatom_site_general_challenge'].value_counts(normalize=True).sort_values(ascending=True).to_frame()\nz.style.background_gradient(cmap='Oranges')","619563c2":"train_df['anatom_site_general_challenge'].value_counts(normalize=True).sort_values().iplot(kind='barh',\n                                                                                          xTitle='Percentage',\n                                                                                          linecolor='black',\n                                                                                          opacity=0.7,\n                                                                                          color='orange',\n                                                                                          theme='pearl',\n                                                                                          bargap=0.2,\n                                                                                          gridcolor='white',\n                                                                                          title='[INTERACTIVE] Distribution of imaged site of intrerest from training set')","2d3d30de":"z = train_df.groupby(['sex', 'anatom_site_general_challenge'])['benign_malignant'].count().to_frame().reset_index()\nz.style.background_gradient(cmap='Oranges')","1ffe757d":"sns.catplot(x='anatom_site_general_challenge', y='benign_malignant', hue='sex', data=z, kind='bar', palette=orange_black)\nplt.gcf().set_size_inches(12,8)\nplt.xlabel('Location of imaged site')\nplt.xticks(rotation=45, fontsize=15)\nplt.ylabel('# of Melanoma cases')","b5347abe":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15,8))\n\nsns.distplot(train_df.age_approx,ax=axes[0], label='Train', color='#fdc029')\nsns.distplot(test_df.age_approx,ax=axes[0], label='Test', color='#171820')\naxes[0].set_title('Age distribution in train\/test sets')\naxes[0].legend()\n\n\nsns.distplot(train_df[train_df.sex=='female'].age_approx,ax=axes[1], label='Female', color='#fdc029')\nsns.distplot(train_df[train_df.sex=='male'].age_approx,ax=axes[1], label='Female', color='#171820')\naxes[1].set_title('Age distribution w.r.t gender')\naxes[1].legend()\n\n\nplt.tight_layout()\nplt.show()","078f5e08":"z = train_df['diagnosis'].value_counts().sort_values().to_frame()\nz.style.background_gradient(cmap='Oranges')","8eb9deaf":"train_df['diagnosis'].value_counts(normalize=True).sort_values().iplot(kind='barh',\n                                                          xTitle='Percentage',\n                                                          linecolor='black',\n                                                          opacity=0.7,\n                                                          color='orange',\n                                                          theme='pearl',\n                                                          bargap=0.2,\n                                                          gridcolor='white',\n                                                          title='[INTERACTIVE] Distribution of Diagnosis column from training set')","b4999282":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16,8))\n# kdeplot of age_approx for benign target\nsns.kdeplot(train_df.loc[train_df['target'] == 0, 'age_approx'],ax=axes[0], label='Benign',color='g', shade=True)\n\n# kdeplot of age_approx for Malignant target\nsns.kdeplot(train_df.loc[train_df['target'] == 1, 'age_approx'],ax=axes[0], label='Malignant',color='b', shade=True)\n\naxes[0].set_xlabel('Age in years')\naxes[0].set_ylabel('Density')\naxes[0].set_title('Age Distribution [Benign\/Malignant]')\n\n# kdeplot of age_approx for male gender\nsns.kdeplot(train_df.loc[train_df['sex'] == 'male', 'age_approx'],ax=axes[1], label='male',color='g', shade=True)\n\n# kdeplot of age_approx for female gender\nsns.kdeplot(train_df.loc[train_df['sex'] == 'female', 'age_approx'],ax=axes[1], label='female',color='b', shade=True)\n\naxes[1].set_xlabel('Gender')\naxes[1].set_ylabel('Density')\naxes[1].set_title('Age Distribution [Male\/Female]')","2483dc3f":"# Location of the image dir\nimg_dir = IMAGE_PATH+'jpeg\/train'","e8807d12":"# Benign\nbenign = train_df[train_df['benign_malignant']=='benign']\n\nf = plt.figure(figsize=(16,8))\nf.add_subplot(1,2,1)\n\nsample_img = benign['image_name'][0]+'.jpg'\nimage = plt.imread(os.path.join(img_dir, sample_img))\nplt.imshow(image, cmap='gray')\nplt.colorbar()\nplt.title('Benign Image')\nprint(f\"Image dimensions {image.shape}\")\nprint(f\"Maximum pixel value {image.max():.2f}; Minimum pixel value {image.min():.2f}\")\nprint(f\"Mean value of the pixels : {image.mean():.2f} ; Standard deviation : {image.std():.2f}\")\n\nf.add_subplot(1,2,2)\n\n_ = plt.hist(image[:,:,0].ravel(), bins = 256, color = 'red', alpha = 0.5)\n_ = plt.hist(image[:,:,1].ravel(), bins = 256, color = 'green', alpha = 0.5)\n_ = plt.hist(image[:,:,2].ravel(), bins = 256, color = 'blue', alpha = 0.5)\n_ = plt.xlabel('Intensity Values')\n_ = plt.ylabel('Count')\n_ = plt.legend(['red_channel','green_channel','blue_channel'])\nplt.show()\n\n","cd73b7b6":"#Malignant\nmalignant = train_df[train_df['benign_malignant']=='malignant']\n\nf = plt.figure(figsize=(16,8))\nf.add_subplot(1,2,1)\n\nsample_img = malignant['image_name'][91]+'.jpg'\nimage = plt.imread(os.path.join(img_dir, sample_img))\nplt.imshow(image, cmap='gray')\nplt.colorbar()\nplt.title('Malignant Image')\nprint(f\"Image dimensions {image.shape}\")\nprint(f\"Maximum pixel value {image.max():.2f}; Minimum pixel value {image.min():.2f}\")\nprint(f\"Mean value of the pixels : {image.mean():.2f}; Standard deviation : {image.std():.2f}\")\n\nf.add_subplot(1,2,2)\n\n_ = plt.hist(image[:,:,0].ravel(), bins = 256, color = 'red', alpha = 0.5) \n_ = plt.hist(image[:,:,1].ravel(), bins = 256, color = 'green', alpha = 0.5)\n_ = plt.hist(image[:,:,2].ravel(), bins = 256, color = 'blue', alpha = 0.5)\n_ = plt.xlabel('Intensity Values')\n_ = plt.ylabel('Count')\n_ = plt.legend(['red_channel','green_channel','blue_channel'])\nplt.show()\n\n","c7855209":"### Age distributions","dcfd13de":"### Data Content:","d4729d53":"### Count value for male\/female for each target category","07c758e4":"### About the Data\nThe dataset was generated by the International Skin Imaging Collaboration (ISIC) and images are from the following sources: Hospital Cl\u00ednic de Barcelona, Medical University of Vienna, Memorial Sloan Kettering Cancer Center, Melanoma Institute Australia, The University of Queensland, and the University of Athens Medical School.\n\n### Columns\n* image_name - unique identifier, points to filename of related DICOM image\n* patient_id - unique patient identifier\n* sex - the sex of the patient (when unknown, will be blank)\n* age_approx - approximate patient age at time of imaging\n* anatom_site_general_challenge - location of imaged site\n* diagnosis - detailed diagnosis information (train only)\n* benign_malignant - indicator of malignancy of imaged lesion\n* target - binarized version of the target variable","c3b2c7c9":"### Distribution of Diagnosis column in train","5104bb85":"Clearly we have somemissing values","391ad746":"### Location of imaged site of interest w.r.t gender","5aebf49a":"#### Color_Palette for beautiful visualizations","e06698a0":"# If you like my kernel, do upvote :)","56f79b72":"This is my very first exploratory data analysis for a featured competition. I took help extensively from the following two amazying kernels. Do check them out for even better insights.\n\n[Parul Pandey's kernel](https:\/\/www.kaggle.com\/parulpandey\/melanoma-classification-eda-starter)\n\n[Ertu\u011frul Demir's kernel](https:\/\/www.kaggle.com\/datafan07\/starter-analysis-of-melanoma-metadata-and-images)","d1b368ba":"### Gender distribution","4a91a502":"### Malignant category","13ac922f":"### Histogram distribution of RBG colors in random images\nIn a RGB color space, pixel values range from 0 to 255 where 0 stands for black and 255 stands for white. We will look at histogram of each target category","5b26cadf":"# Visualizing Distributions","f4d8db5a":"### Tabular Dataframes","7d88cca7":"=> we have multiple images for unique patients","cf78561b":"### Location of imaged site on body","c3569bcf":"### Importing necessary libraries for visualizations","e516b07a":"## Analysing Missing values","be5f8137":"# Let's go Exploring\n![](https:\/\/img.freepik.com\/free-vector\/explorer-with-backpack-background_23-2148159527.jpg?size=626&ext=jpg)","722cae25":"### Benign category","bb6d9b9a":"### Target Distributions","e0a55350":"### **Kernel Density Estimation plots** : \nGives the normal\/gaussian distribution of data points conditioning on required features.[seaborn-kdeplots](https:\/\/www.journaldev.com\/40204\/seaborn-kdeplot)"}}