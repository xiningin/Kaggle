{"cell_type":{"cab2d94a":"code","79fb7a49":"code","1365bf81":"code","ffecfe67":"code","8b6c5c27":"code","24f9adfa":"code","41652b90":"code","ef96e50a":"code","b539987e":"code","b9a834a1":"code","2e513abc":"code","9bb04b3a":"code","2329d04f":"code","3795d98a":"code","b08dbc88":"code","543bd867":"code","05eeef9d":"code","f5df1d11":"code","bb037321":"code","2fb2280c":"code","b43e7e0a":"code","cd0f6e69":"code","f6425abc":"code","2b76decf":"code","d1a30f40":"code","893996ee":"code","ef631d5f":"code","7cecdd9a":"markdown","a7d763c3":"markdown","e014a711":"markdown","0a513b93":"markdown","7a123aea":"markdown","97b74896":"markdown"},"source":{"cab2d94a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","79fb7a49":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    count = 0\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        count += 1\n        if count == 2:\n            break","1365bf81":"path = '\/kaggle\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/README.md.txt'\n\nwith open(os.path.join(os.path.dirname('README.md.txt'), path), 'r') as input_file:\n    content = input_file.read()\n    print(content)","ffecfe67":"import cv2\nimage1 = cv2.imread(\"\/kaggle\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Normal\/Normal-10121.png\")\n\nimage2 = cv2.imread(\"\/kaggle\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Lung_Opacity\/Lung_Opacity-35.png\")\n\nimage3 = cv2.imread(\"\/kaggle\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Viral Pneumonia\/Viral Pneumonia-1022.png\")\n\nimage4 = cv2.imread(\"\/kaggle\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/COVID\/COVID-532.png\")\n","8b6c5c27":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,8))\nplt.imshow(image1)\nplt.title('Normal')\nplt.show()\n\nplt.figure(figsize=(10,8))\nplt.imshow(image2)\nplt.title('Lung-Opacity')\nplt.show()\n\nplt.figure(figsize=(10,8))\nplt.imshow(image3)\nplt.title('Pneumonia')\nplt.show()\n\nplt.figure(figsize=(10,8))\nplt.imshow(image4)\nplt.title('Covid-19')\nplt.show()","24f9adfa":"print(image1.shape)\nprint(image2.shape)\nprint(image3.shape)\nprint(image4.shape)","41652b90":"normal_set = []\nlungOPC_set = []\ncovid19_set = []\n\nupper_path = '\/kaggle\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/'\n\ncount = 0\nfor i in os.listdir('\/kaggle\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Normal'):\n    s = cv2.imread(upper_path + 'Normal\/' + i)\n    s = cv2.cvtColor(s,cv2.COLOR_BGR2RGB)\n    s = cv2.resize(s, (256,256), interpolation= cv2.INTER_AREA)\n    normal_set.append(s)\n    count = count + 1\n    if count > 3616:\n        break\n\ncount = 0\nfor i in os.listdir('\/kaggle\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Lung_Opacity'):\n    s = cv2.imread(upper_path + 'Lung_Opacity\/' + i)\n    s = cv2.cvtColor(s,cv2.COLOR_BGR2RGB)\n    s = cv2.resize(s, (256,256), interpolation= cv2.INTER_AREA)\n    count = count + 1\n    lungOPC_set.append(s)\n    if count > 3616:\n        break\n\ncount = 0\nfor i in os.listdir('\/kaggle\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/COVID'):\n    s = cv2.imread(upper_path + 'COVID\/' + i)\n    s = cv2.cvtColor(s,cv2.COLOR_BGR2RGB)\n    s = cv2.resize(s, (256,256), interpolation= cv2.INTER_AREA)\n    covid19_set.append(s)\n    if count > 3616:\n        break","ef96e50a":"import matplotlib.pyplot as plt\nfile_dist = {'normal':3616, 'lung Opacity':3616, 'COVID':3616}\ncourses = list(file_dist.keys())\nvalues = list(file_dist.values())\n  \nfig = plt.figure(figsize = (10, 5))\n \n# creating the bar plot\nplt.bar(courses, values, color = ['purple', 'green', 'orange'],\n        width = 0.4)\n \nplt.xlabel(\"Image Type\")\nplt.ylabel(\"Number of Images\")\nplt.title(\"Number of Images Sorted from Each Type of CXR\")\nplt.show()","b539987e":"y_normal = [0 for i in normal_set]\ny_lungOPC = [1 for i in lungOPC_set]\ny_covid19 = [2 for i in covid19_set]","b9a834a1":"from tensorflow.keras.utils import to_categorical\nclass_labels =to_categorical(y_normal + y_lungOPC + y_covid19)\nclass_labels.shape","2e513abc":"data_value = np.array(normal_set + lungOPC_set + covid19_set)\ndata_value.shape","9bb04b3a":"from sklearn.model_selection import train_test_split","2329d04f":"X_train, X_rem, y_train, y_rem = train_test_split(data_value, class_labels, test_size=0.1, shuffle = True)\nX_valid, X_test, y_valid, y_test = train_test_split(X_rem,y_rem, test_size=0.1)","3795d98a":"from keras.models import Sequential, Model,load_model\nfrom keras.layers import Conv2D, MaxPooling2D,GlobalAveragePooling2D, Conv3D, MaxPooling3D,GlobalAveragePooling3D\nfrom tensorflow.keras.layers import BatchNormalization\nfrom keras import optimizers","b08dbc88":"print(X_train.shape), print(y_train.shape)\nprint(X_valid.shape), print(y_valid.shape)\nprint(X_test.shape), print(y_test.shape)","543bd867":"from keras.layers import Dropout, Flatten, Dense\nfrom keras import callbacks\n# CNN Model\nmodel = Sequential()\n\nmodel.add(Conv2D(32, kernel_size=3, activation='relu', input_shape=(256,256,3)))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\n\n\nmodel.add(Conv2D(64, kernel_size=3, activation=\"relu\",padding =\"same\"))\nmodel.add(Conv2D(64, kernel_size=3, activation=\"relu\",padding =\"same\"))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\n\n\nmodel.add(Conv2D(128, kernel_size=3, activation=\"relu\",padding =\"same\"))\nmodel.add(Conv2D(128, kernel_size=3, activation=\"relu\",padding =\"same\"))\nmodel.add(Conv2D(128, kernel_size=3, activation=\"relu\",padding =\"same\"))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\n\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(3, activation='softmax'))\n","05eeef9d":"print(model.summary())","f5df1d11":"import tensorflow as tf\ncallback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=5)","bb037321":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","2fb2280c":"history = model.fit(X_train, y_train, validation_data=(X_valid, y_valid), epochs=15, batch_size = 13)","b43e7e0a":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","cd0f6e69":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.ylim(0,1.2)\nplt.legend(['train', 'val'], loc='upper right')\nplt.show()","f6425abc":"predictions = model.predict(X_test)\nclasses = np.argmax(predictions,axis=1)\nprint(classes)","2b76decf":"actual_classes = np.argmax(y_test,axis=1)\nprint(actual_classes)","d1a30f40":"true_count = 0\nindx = 0\n\nfor i in classes:\n    if i == actual_classes[indx]:\n        true_count = true_count + 1\n    indx = indx + 1\n\ntest_accuracy = true_count \/ len(actual_classes)\nprint('Final Testing Accuracy: ',test_accuracy)","893996ee":"for layer in model.layers:\n    weights = layer.get_weights()","ef631d5f":"weights[0]","7cecdd9a":"### Sample Image Display","a7d763c3":"### Weights","e014a711":"## Training Process","0a513b93":"## Results","7a123aea":"## Model Building","97b74896":"### Data File Description"}}