{"cell_type":{"82bf5d9a":"code","81d7ee99":"code","d2201d45":"code","625d9e21":"code","061251d2":"code","2e5f3602":"code","afb4867d":"code","51290075":"code","105032c3":"code","2fd89c59":"code","98723d1b":"code","71679757":"code","1424e956":"code","3397664b":"code","895ecfc7":"code","b35131e0":"code","3c30292e":"code","bb439936":"code","fe68af34":"code","e976b6f9":"code","ef923edf":"code","c748542d":"markdown","24c9cf53":"markdown","c8d4ea15":"markdown","0bcce7c0":"markdown","9aabad5d":"markdown","61e4f7cc":"markdown"},"source":{"82bf5d9a":"# data analysis, wrangling and visualization\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix,classification_report\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\n# Machine_Learning\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","81d7ee99":"train_data = pd.read_csv('..\/input\/mobile-price-classification\/train.csv') \ntest_data = pd.read_csv('..\/input\/mobile-price-classification\/test.csv')","d2201d45":"train_data.info()\ntrain_data.describe()","625d9e21":"train_data.head()","061251d2":"train_data.shape","2e5f3602":"test_data.shape","afb4867d":"train_data.isnull().sum()\n\n# No NULL values","51290075":"x_train = train_data.drop('price_range',axis=1)\ny_train = train_data['price_range']\ntest_data = test_data.drop('id', axis=1) \n#x_train.head()\n#Y_train.head()","105032c3":"X_train, X_val, Y_train, Y_val = train_test_split(x_train,y_train, test_size= 0.2, random_state= 5)","2fd89c59":"X_train.shape, Y_train.shape, X_val.shape, Y_val.shape","98723d1b":"# LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(test_data)\nacc_log = round(logreg.score(X_val, Y_val) * 100, 2)\nacc_log","71679757":"coeff_df = pd.DataFrame(train_data.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","1424e956":"# SVC\n\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(test_data)\nacc_svc = round(svc.score(X_val, Y_val) * 100, 2)\nacc_svc","3397664b":"# KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(test_data)\nacc_knn = round(knn.score(X_val, Y_val) * 100, 2)\nacc_knn","895ecfc7":"# Gaussian Naive Bayes\n\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(test_data)\nacc_gaussian = round(gaussian.score(X_val, Y_val) * 100, 2)\nacc_gaussian","b35131e0":"# Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred = perceptron.predict(test_data)\nacc_perceptron = round(perceptron.score(X_val, Y_val) * 100, 2)\nacc_perceptron","3c30292e":"# LinearSVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(test_data)\nacc_linear_svc = round(linear_svc.score(X_val, Y_val) * 100, 2)\nacc_linear_svc","bb439936":"# Stochastic Gradient Descent\n\nsgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(test_data)\nacc_sgd = round(sgd.score(X_val, Y_val) * 100, 2)\nacc_sgd","fe68af34":"# DecisionTreeClassifier\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(test_data)\nacc_decision_tree = round(decision_tree.score(X_val, Y_val) * 100, 2)\nacc_decision_tree","e976b6f9":"# RandomForestClassifier\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(test_data)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_val, Y_val) * 100, 2)\nacc_random_forest","ef923edf":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_linear_svc, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","c748542d":"# ***Analyzing the data***","24c9cf53":"# ***Importing the dataset***","c8d4ea15":"# ***Splitting the dataset into the Training set and Test set***","0bcce7c0":"# ***Import libraries***","9aabad5d":"# ***Models evaluation***","61e4f7cc":"# ***Build Classification models***"}}