{"cell_type":{"037d9b85":"code","63b69331":"code","b0909def":"code","a06054bd":"code","5fde9980":"code","0ffc619f":"code","7d661d6b":"code","f6c1ff3a":"code","21846ac0":"code","a43da32d":"code","da3a9916":"code","d539cc6c":"code","e0e5ef68":"code","f8570850":"code","deab81d5":"code","cfa1bca7":"code","f2e8f6c6":"code","875a4232":"code","42cdc11a":"code","c4760c6f":"code","6de1d71f":"code","77a27716":"code","e8ce32c0":"code","1ac3ba65":"code","d7b1e65b":"code","e0e2810f":"code","6f031855":"code","437a7d11":"code","4b888fb7":"code","333d7504":"code","9a768d2e":"code","093eeaa7":"code","dd914b5a":"code","2e45470a":"code","9a055de7":"code","c1b0497b":"code","69114ca1":"code","d5d33e2b":"code","e9761a2e":"code","4e28c5f7":"code","87f1f55e":"code","6c7f6f65":"code","ef4ba077":"markdown","9f565a27":"markdown","b3f1a67d":"markdown","a50e0321":"markdown","9f58a343":"markdown","d543010f":"markdown","e23f2ef6":"markdown","e384a8e4":"markdown","4b49dc26":"markdown","02c29a7f":"markdown","9e44b12e":"markdown","95b51abc":"markdown"},"source":{"037d9b85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","63b69331":"import numpy as np\nimport pandas as pd","b0909def":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","a06054bd":"train=pd.read_csv('\/kaggle\/input\/house-price-prediction-challenge\/train.csv')\ntrain.head()","5fde9980":"train.shape","0ffc619f":"train.info()","7d661d6b":"train.isnull().sum()","f6c1ff3a":"train['price'] = train['TARGET(PRICE_IN_LACS)']\ntrain = train.drop('TARGET(PRICE_IN_LACS)', axis=1)","21846ac0":"train.describe()","a43da32d":"sns.countplot(train['POSTED_BY'])","da3a9916":"plt.figure(figsize=(12,10))\nplt.subplot(2,2,1)\nsns.countplot(train['UNDER_CONSTRUCTION'])\nplt.subplot(2,2,2)\nsns.countplot(train['RERA'])\nplt.subplot(2,2,3)\nsns.countplot(train['READY_TO_MOVE'])\nplt.subplot(2,2,4)\nsns.countplot(train['RESALE'])\nplt.show()","d539cc6c":"plt.figure(figsize=(15,6))\nplt.subplot(1,2,1)\nplt.title('Ready to move against unapproved RERA')\nsns.countplot('READY_TO_MOVE', data=train[train['RERA']==0])\nplt.subplot(1,2,2)\nplt.title('Resale against unapproved RERA')\nsns.countplot('RESALE', data=train[train['RERA']==0])\nplt.show()","e0e5ef68":"sns.countplot(train['BHK_NO.'])","f8570850":"train = train[(train['BHK_NO.']<7)&(train['price']<15000)&(train['SQUARE_FT']<300000)]","deab81d5":"train.shape","cfa1bca7":"train['city'] = train['ADDRESS'].apply(lambda x: x.split(',')[1])\ntrain = train.drop('ADDRESS', axis=1)\ntrain.head()","f2e8f6c6":"train['city'].value_counts()[:10]","875a4232":"top_cities = train['city'].value_counts()[:10].keys().tolist()","42cdc11a":"cost_per_sqft = []\nfor city in top_cities:\n    a = train['SQUARE_FT'][train['city']==city].mean()\n    b = train['price'][train['city']==city].mean()\n    cost_per_sqft.append(int((b\/a)*100000))\ncost_per_sqft","c4760c6f":"plt.figure(figsize=(12,6))\nplt.title('Cost per sqft in top cities in India')\nsns.barplot(x=top_cities, y=cost_per_sqft)\nplt.show()","6de1d71f":"city_df = train[train['city'].isin(top_cities)]","77a27716":"plt.figure(figsize=(12,14))\nplt.title('Average price of BHK based on city')\nsns.barplot(x='price', y='city', data=city_df, hue='BHK_NO.')","e8ce32c0":"posted_by = pd.get_dummies(train['POSTED_BY'], drop_first=True)\ntypes = pd.get_dummies(train['BHK_OR_RK'], drop_first=True, prefix='type')\ntrain = pd.concat([train, posted_by], axis=1)\ntrain = pd.concat([train, types], axis=1)\ntrain = train.drop(['POSTED_BY', 'BHK_OR_RK', 'city', 'LONGITUDE', 'LATITUDE'], axis=1)\ntrain.head()","1ac3ba65":"train.shape","d7b1e65b":"X = train.drop('price', axis=1)\ny = train['price']","e0e2810f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","6f031855":"from sklearn.preprocessing import MinMaxScaler\nscale = MinMaxScaler()\nX_train = scale.fit_transform(X_train)\nX_test = scale.transform(X_test)","437a7d11":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, y_train)\npred_train_lr = lr.predict(X_train)\npred_test_lr = lr.predict(X_test)\n\n# Check score\nfrom sklearn.metrics import r2_score\nprint('Linear regression prediction score')\nprint('Train prediction score:', r2_score(y_train,pred_train_lr))\nprint('Test prediction score:', r2_score(y_test, pred_test_lr))","4b888fb7":"plt.figure(figsize=(12,6))\nax = sns.distplot(y_train,hist=False,color='b',label='actual price')\nsns.distplot(pred_train_lr,hist=False,color='r',label='predicted price',ax=ax)\nplt.show()","333d7504":"plt.figure(figsize=(12,6))\nax = sns.distplot(y_test,hist=False,color='b',label='actual price')\nsns.distplot(pred_test_lr,hist=False,color='r',label='predicted price',ax=ax)\nplt.show()","9a768d2e":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(max_depth=10,random_state=42)\nrf.fit(X_train,y_train)\npred_train_rf = rf.predict(X_train)\npred_test_rf = rf.predict(X_test)\n\n# check score\nprint('Random Forest regressor prediction score')\nprint('Train prediction score:', r2_score(y_train,pred_train_rf))\nprint('Test prediction score:', r2_score(y_test, pred_test_rf))","093eeaa7":"plt.figure(figsize=(12,6))\nax = sns.distplot(y_train,hist=False,color='b',label='actual price')\nsns.distplot(pred_train_rf,hist=False,color='r',label='predicted price',ax=ax)\nplt.show()","dd914b5a":"plt.figure(figsize=(12,6))\nax = sns.distplot(y_test,hist=False,color='b',label='actual price')\nsns.distplot(pred_test_rf,hist=False,color='r',label='predicted price',ax=ax)\nplt.show()","2e45470a":"from sklearn.ensemble import GradientBoostingRegressor\ngbr = GradientBoostingRegressor(n_estimators=300,learning_rate=0.02,n_iter_no_change=5)\ngbr.fit(X_train,y_train)\npred_train_gbr = gbr.predict(X_train)\npred_test_gbr = gbr.predict(X_test)\n\n# check score\nprint('Gradient Boosting regressor prediction score')\nprint('Train prediction score:', r2_score(y_train,pred_train_gbr))\nprint('Test prediction score:', r2_score(y_test, pred_test_gbr))","9a055de7":"plt.figure(figsize=(12,6))\nax = sns.distplot(y_train,hist=False,color='b',label='actual price')\nsns.distplot(pred_train_gbr,hist=False,color='r',label='predicted price',ax=ax)\nplt.show()","c1b0497b":"plt.figure(figsize=(12,6))\nax = sns.distplot(y_test,hist=False,color='b',label='actual price')\nsns.distplot(pred_test_gbr,hist=False,color='r',label='predicted price',ax=ax)\nplt.show()","69114ca1":"test = pd.read_csv('\/kaggle\/input\/house-price-prediction-challenge\/test.csv')\ntest.head()","d5d33e2b":"print(test.shape)\ntest.info()","e9761a2e":"test['city'] = test['ADDRESS'].apply(lambda x: x.split(',')[1])\ntest = test.drop('ADDRESS', axis=1)","4e28c5f7":"posted_by_test = pd.get_dummies(test['POSTED_BY'], drop_first=True)\ntypes_test = pd.get_dummies(test['BHK_OR_RK'], drop_first=True, prefix='type')\ntest = pd.concat([test,posted_by_test], axis=1)\ntest = pd.concat([test,types_test], axis=1)\ntest = test.drop(['POSTED_BY', 'BHK_OR_RK', 'city', 'LONGITUDE', 'LATITUDE'], axis=1)\ntest.head()","87f1f55e":"test = scale.transform(test)\nfinal_pred = gbr.predict(test)","6c7f6f65":"submission = pd.DataFrame()\nsubmission[\"TARGET(PRICE_IN_LACS)\"] = final_pred\nsubmission.to_csv('target price of house.csv', index=False)\nsubmission","ef4ba077":"Reading data","9f565a27":"Splitting data into train and test","b3f1a67d":"Predition on Given data","a50e0321":"Gradient Boosting Regressor Model","9f58a343":"**EDA**","d543010f":"Linear Regression model","e23f2ef6":"Understanding data","e384a8e4":"Random Forest Regressor Model","4b49dc26":"Data Pre-processing","02c29a7f":"Separating data into X and y","9e44b12e":"### Model Development","95b51abc":"Scaling data using MinMaxScaler"}}