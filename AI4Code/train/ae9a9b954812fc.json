{"cell_type":{"a56ebef7":"code","f9def355":"code","948344c4":"code","8e0f567b":"code","5b2a9f9a":"code","28e8ae4f":"code","14df6b2c":"code","26ea1c71":"code","ccbe19e9":"code","84bce0b8":"code","be0dfc06":"code","77c6d537":"code","2ef7120f":"code","ed2b5759":"code","1c958497":"code","6b128ceb":"code","e329030f":"code","b7cc0dbd":"code","705c4ee1":"code","8ec1081b":"code","967288ab":"code","42b2bb07":"code","0df64438":"code","300f8925":"code","a51c333a":"code","fda313f4":"code","ecb14ee1":"code","9368e842":"code","85069e64":"code","c7ad27e0":"code","97e5db98":"code","79dcce33":"code","47b7b733":"code","15978b02":"code","cad5bb27":"code","ab93fdad":"code","7f98159b":"code","d0b03897":"code","31d2cebb":"code","1ca208b1":"markdown","ae311b0e":"markdown","d8a1bce6":"markdown","d14bd61b":"markdown","02ea1a16":"markdown","08d470d6":"markdown","e1665ff6":"markdown","687dc19e":"markdown","a69d0085":"markdown","16f3ab68":"markdown","2be295a2":"markdown","6c651a71":"markdown","26e474a4":"markdown","532edef7":"markdown","0c408fa5":"markdown","b833129a":"markdown"},"source":{"a56ebef7":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\npio.templates.default = \"none\"\n# import plotly.offline as py\n# py.offline.init_notebook_mode()\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f9def355":"df17= pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2017\/multipleChoiceResponses.csv\", encoding=\"ISO-8859-1\")\ndf18= pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv\", )\ndf19= pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2019\/multiple_choice_responses.csv\", )\ndf20= pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\", )\ndf21= pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\", )","948344c4":"### Helper functions\n\npaper_color = None# '#F5F5F5'\nplot_color = None# '#F5F5F5'\n\n\n## horizontal bar graphs \ndef plotly_hBar(df, q, title, height=400,l=250,r=50,b=50,t=100,):   \n    fig = px.histogram(df.iloc[1:], \n                       y=q,\n                       orientation='h',\n                       width=700,\n                       height=height,\n                       histnorm='percent',\n                       color='region',\n                       color_discrete_map={\n                           \"Africa\": \"gold\", \"World\": \"salmon\"\n                       },\n                       opacity=0.6\n                       )\n\n    fig.update_layout(title=title, \n                      font_family=\"San Serif\",\n                      bargap=0.2,\n                      barmode='group',\n                      titlefont={'size': 24},\n                      template= 'simple_white',\n                      paper_bgcolor=paper_color,\n                      plot_bgcolor=plot_color,                       \n                      legend=dict(\n                      orientation=\"v\", \n                          y=1, \n                          yanchor=\"top\", \n                          x=1.250, \n                          xanchor=\"right\",)                 \n                      ).update_yaxes(categoryorder='total ascending')\n    fig.update_traces(marker_line_color='black',\n                  marker_line_width=1.5)\n    fig.update_layout(yaxis_title=None,yaxis_linewidth=2.5,\n    autosize=False,\n    margin=dict(\n        l=l,\n        r=r,\n        b=b,\n        t=t,\n    ),\n    )\n    fig.update_xaxes(showgrid=False, linecolor='white')\n    fig.update_yaxes(showgrid=False)\n    fig.show()   \n    \n\n    \n\n###################\n## vertical bar graphs##########################\ndef plotly_vBar(df, q, title, l=50,r=50,b=50,t=100):   \n    fig = px.histogram(df.iloc[1:],\n                       x=q,\n                       orientation='v',\n                       width=700,\n                       height=450,\n                       histnorm='percent',\n                       color='region',\n                       color_discrete_map={\n                           \"Africa\": \"gold\", \"World\": \"salmon\"\n                       },\n                       opacity=0.6\n                       )\n\n    fig.update_layout(title=title, \n                      font_family=\"San Serif\",\n                      bargap=0.2,\n                      barmode='group',\n                      titlefont={'size': 24},\n                      paper_bgcolor=paper_color,\n                      plot_bgcolor=plot_color,\n                      legend=dict(\n                      orientation=\"v\", \n                          y=1, \n                          yanchor=\"top\", \n                          x=1.250, \n                          xanchor=\"right\",)                 \n                      ).update_xaxes(categoryorder='total descending')\n    fig.update_traces(marker_line_color='black',\n                  marker_line_width=1.5)\n    fig.update_layout(xaxis_title=None,xaxis_linewidth=2.5,\n    autosize=False,\n    margin=dict(\n        l=l,\n        r=r,\n        b=b,\n        t=t,\n    ),\n    )\n    fig.update_xaxes(showgrid=False)\n    fig.update_yaxes(showgrid=False)\n    fig.show()   \n\n## head_count function copied from https:\/\/www.kaggle.com\/ruchi798\/kaggle-ml-ds-survey-analysis\ndef head_count(df, question_num, parts):\n    questions = []\n    questions = ['Q'+ str(question_num) +'_Part_'+ str(j) for j in range(1, parts)]\n    questions.append('Q'+ str(question_num) + '_OTHER')\n    \n    categories = []\n    values = []\n    for i in questions:\n        category = df[i].value_counts().index[0]\n        val = df[i].value_counts()[0]\n        \n        categories.append(category)\n        values.append(val)\n       \n    combined_df = pd.DataFrame()\n    combined_df['Category'] = categories\n    combined_df['Value'] = values\n    \n    #combined_df = combined_df.sort_values(['Value'],ascending=False)\n    \n    return combined_df\n\n###########################################\n## make a dataframe with percentages included \ndef df_with_percentages(df, q, n, region):\n    \n    dff = head_count(df, q, n)\n    perc = []\n\n    for item  in dff.Value:          \n        \n        perc.append(np.round(item\/len(df)*100, 2))\n\n    data = pd.DataFrame()\n    data['Percentage'] = perc\n    df_perc = pd.concat([dff, data], axis=1)\n    df_perc['Region'] = region\n    \n    return df_perc\n    \n\n###############################################################\n## bargraphs for multipart questions \ndef plot_barH_percent(df1, df2, title, l=150, r=50, b=50, t=100):\n    fig = go.Figure()\n    fig.add_trace(go.Bar(y=df1['Category'],\n                         x=df1['Percentage'],\n                         orientation= 'h',\n                         name=\"World\",\n                         marker_color='salmon',\n                         opacity =0.6\n                        ),\n                 )\n    fig.add_trace(go.Bar(y=df2['Category'],\n                         x=df2['Percentage'],\n                         orientation= 'h',\n                         name=\"Africa\",\n                         marker_color='gold',\n                         opacity =0.6\n                        ),\n                 )\n    fig.update_traces(marker_line_color='black',\n                  marker_line_width=1.5)\n    fig.update_layout(title=title, \n                  font_family=\"San Serif\",\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 24},\n                  paper_bgcolor=paper_color,\n                  plot_bgcolor=plot_color,\n                  legend=dict(\n                  orientation=\"v\", \n                      y=1, \n                      yanchor=\"top\", \n                      x=1.250, \n                      xanchor=\"right\",)                 \n                  ).update_yaxes(categoryorder='total ascending')\n\n    fig.update_layout(xaxis_title='percentage',yaxis_linewidth=2.5,\n    autosize=False,\n    margin=dict(\n        l=l, r=r, b=b, t=t,\n    ),\n    )\n    fig.update_xaxes(showgrid=False)\n    fig.update_yaxes(showgrid=False)\n    fig.show()     \n    \n    \n###################################################   \ndef annotated_heatmap(df_w, df_a, title, width=850):\n    x =list(df_w['Category'])\n\n    y = ['World', 'Africa']\n\n    z= [list(df_w['Percentage']),list(df_a['Percentage'])]\n\n    fig = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z, colorscale='orrd', xgap=3, ygap=3)\n\n    fig.update_layout(title_text=title,\n                      title_x=0.5,\n                      titlefont={'size': 24, 'family':'San Serif'},\n                      width=width, height=350,\n                      xaxis_showgrid=False,\n                      xaxis={'side': 'bottom'},\n                      yaxis_showgrid=False,\n                      yaxis_autorange='reversed',                   \n                      paper_bgcolor=paper_color,\n                      )\n    fig.show()\n    \n    \n###################################################################    \ndef lollypop_plots(df1, df2, title, l=150, r=50, b=50, t=100):\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(y=df1['Category'],\n                         x=df1['Percentage'],\n                         orientation= 'h',\n                         name=\"World\",\n                         mode='markers',\n                         marker_color='salmon',\n                         marker=dict(\n                             size=16,\n                             ),\n                        ),\n                 )\n    for i in range(0, len(df1)):\n               fig.add_shape(type='line',\n                              x0 = 0, y0 = i,\n                              x1 = df1[\"Percentage\"][i],\n                              y1 = i,\n                              line=dict(color='lightgray', width = 3))\n    \n    fig.add_trace(go.Scatter(y=df2['Category'],\n                         x=df2['Percentage'],\n                         orientation= 'h',\n                         name=\"Africa\",\n                         mode='markers',\n                         marker_color='gold',\n                         marker=dict(\n                             size=16,\n                             ),\n                        ),\n                 )\n    for i in range(0, len(df2)):\n               fig.add_shape(type='line',\n                              x0 = 0, y0 = i,\n                              x1 = df2[\"Percentage\"][i],\n                              y1 = i,\n                              line=dict(color='lightgray', width = 3))\n             \n    \n    fig.update_traces(marker_line_color='black',\n                  marker_line_width=1.5)\n    fig.update_layout(title=title, \n                  font_family=\"San Serif\",\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 24},\n                  paper_bgcolor=paper_color,\n                  plot_bgcolor=plot_color,\n                  legend=dict(\n                  orientation=\"v\", \n                      y=1, \n                      yanchor=\"top\", \n                      x=1.250, \n                      xanchor=\"right\",)                 \n                  ).update_yaxes(categoryorder='total ascending')\n\n    fig.update_layout(xaxis_title='percentage', yaxis_linewidth=0,\n    autosize=False,\n    margin=dict(\n        l=l, r=r, b=b, t=t,\n    ),\n    )\n    fig.update_xaxes(showgrid=False)\n    fig.update_yaxes(showgrid=False)\n    fig.show() \n    \n####################################################################   \ndef dumbbel_plots(df1, df2, title, l=150, r=50, b=50, t=100):\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(y=df1['Category'],\n                         x=df1['Percentage'],\n                         orientation= 'h',\n                         name=\"World\",\n                         mode='markers',\n                         marker_color='salmon',\n                         marker=dict(\n                             size=16,\n                             ),\n                        ),\n                 )\n    fig.add_trace(go.Scatter(y=df2['Category'],\n                         x=df2['Percentage'],\n                         orientation= 'h',\n                         name=\"Africa\",\n                         mode='markers',\n                         marker_color='gold',\n                         marker=dict(\n                             size=16,\n                             ),\n                        ),\n                 )\n\n    for i in range(0, len(df1)):\n               fig.add_shape(type='line',\n                              x0 = df1[\"Percentage\"][i],\n                              y0 = i,\n                              x1 = df2[\"Percentage\"][i],\n                              y1 = i,\n                              line=dict(color='lightgray', width = 3))         \n    \n    fig.update_traces(marker_line_color='black',\n                  marker_line_width=1.5)\n    fig.update_layout(title=title, \n                  font_family=\"San Serif\",\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 24},\n                  paper_bgcolor=paper_color,\n                  plot_bgcolor=plot_color,\n                  legend=dict(\n                  orientation=\"v\", \n                      y=1, \n                      yanchor=\"top\", \n                      x=1.250, \n                      xanchor=\"right\",)                 \n                  ).update_yaxes(categoryorder='total ascending')\n\n    fig.update_layout(xaxis_title='percentage', yaxis_linewidth=0,\n    autosize=False,\n    margin=dict(\n        l=l, r=r, b=b, t=t,\n    ),\n    )\n    fig.update_xaxes(showgrid=False)\n    fig.update_yaxes(showgrid=False)\n    fig.show() \n    \n    \n##############################################################################\ndef annotated_heatmap_Trans(df_w, df_a, title, width=850, height=750, l=150):\n    x =list(df_w['Category'])\n    #x = (np.array(x)).T\n\n    y = ['World', 'Africa']\n    #y = (np.array(y)).T\n\n    z= [list(df_w['Percentage']),list(df_a['Percentage'])]\n    z = (np.array(z)).T\n\n    fig = ff.create_annotated_heatmap(z, x=y, y=x, annotation_text=z, colorscale='orrd', xgap=3, ygap=3)\n\n    fig.update_layout(title_text=title,\n                      title_x=0.5,\n                      titlefont={'size': 24, 'family':'San Serif'},\n                      width=width, height=height,\n                      xaxis_showgrid=False,\n                      xaxis={'side': 'top'},\n                      yaxis_showgrid=False,\n                      yaxis_autorange='reversed',                   \n                      paper_bgcolor=paper_color,\n                      )\n    fig.update_layout(xaxis_title=None,\n    autosize=False,\n    margin=dict(\n        l=l,\n        r=50,\n        b=50,\n        t=75,\n    ),\n    )\n    fig.update_xaxes(showgrid=False)\n    fig.update_yaxes(showgrid=False)\n    fig.show()\n    \n    \n###############################################    \ndef head_count_suf(df, question_num, part, n):\n    questions = []\n    questions = ['Q'+ str(question_num)+str(part) +'_Part_'+ str(j) for j in range(1, n)]\n    questions.append('Q'+ str(question_num) +str(part)+ '_OTHER')\n    \n    categories = []\n    values = []\n    for i in questions:\n        category = df[i].value_counts().index[0]\n        val = df[i].value_counts()[0]\n        \n        categories.append(category)\n        values.append(val)\n       \n    combined_df = pd.DataFrame()\n    combined_df['Category'] = categories\n    combined_df['Value'] = values\n    \n    #combined_df = combined_df.sort_values(['Value'],ascending=False)\n    \n    return combined_df\n\ndef df_with_percentages_suf(df, q, part, n, region):\n    \n    dff = head_count_suf(df, q, part, n)\n    perc = []\n\n    for item  in dff.Value:          \n        \n        perc.append(np.round(item\/len(df)*100, 2))\n\n    data = pd.DataFrame()\n    data['Percentage'] = perc\n    df_perc = pd.concat([dff, data], axis=1)\n    df_perc['Region'] = region\n    \n    return df_perc","8e0f567b":"# grouping african countries\nafrica17 = ['Nigeria','Kenya', 'South Africa', 'Egypt']\nafrica18 = ['Nigeria','Kenya', 'South Africa', 'Egypt', 'Tunisia', 'Morocco'] \nafrica19 = ['Nigeria','Kenya', 'South Africa', 'Egypt', 'Tunisia', 'Morocco', 'Algeria']\nafrica20 = ['Nigeria','Kenya', 'South Africa', 'Egypt', 'Tunisia', 'Morocco', 'Ghana']\nafrica21 = ['Nigeria','Kenya', 'South Africa', 'Egypt', 'Tunisia', 'Morocco', 'Algeria', 'Ghana', 'Uganda', 'Ethiopia']\n\nafrica = ['Nigeria', 'Egypt', 'South Africa', 'Algeria', 'Tunisia', 'Morocco', 'Kenya', 'Uganda', 'Ghana', 'Ethiopia']\ndf21_africa = df21[df21['Q3'].isin(africa)]\ndf21_world = df21[~df21['Q3'].isin(africa )]\ndf21['region']=[\"Africa\" if x in africa else \"World\" for x in df21['Q3']]\n\ndf20_africa = df20[df20['Q3'].isin(africa)]\ndf20_world = df20[~df20['Q3'].isin(africa )]\ndf20['region']=[\"Africa\" if x in africa else \"World\" for x in df20['Q3']]\n\ndf19_africa = df19[df19['Q3'].isin(africa)]\ndf19_world = df19[~df19['Q3'].isin(africa)]\ndf19['region']=[\"Africa\" if x in africa else \"World\" for x in df19['Q3']]\n\ndf18_africa = df18[df18['Q3'].isin(africa)]\ndf18_world = df18[~df18['Q3'].isin(africa)]\ndf18['region']=[\"Africa\" if x in africa else \"World\" for x in df18['Q3']]\n\ndf17_africa = df17[df17['Country'].isin(africa)]\ndf17_world = df17[~df17['Country'].isin(africa )]\ndf17['region']=[\"Africa\" if x in africa else \"World\" for x in df17['Country']]       ","5b2a9f9a":"afro21 = len(df21_africa)\nrow21 = len(df21) - afro21\n\nafro20 = len(df20_africa)\nrow20 = len(df20) - afro20\n\nafro19 = len(df19_africa)\nrow19 = len(df19) - afro19\n\nafro18 = len(df18_africa)\nrow18 = len(df18) - afro18\n\nafro17 = len(df17_africa)\nrow17 = len(df17) - afro17\n\n\nregion = ['Africa', 'Rest of the World']\nvalue = [afro21, row21]\npercent =[afro21\/(afro21 +row21)*100, row21\/(afro21+row21)*100]\n\nfig = go.Figure(data=[go.Bar(\n            x=value, y=region,\n            text=(np.round(percent,1)),\n            textposition=['outside', 'inside'],\n            texttemplate = [\"<b style='color: #f'>%{text}%<\/b>\"]*2,\n            textfont=dict(  family=\"sans serif\",\n                            size=16,\n                            color=\"black\"),\n            orientation='h',\n            marker_color=['gold', 'salmon'],\n            opacity=0.6,\n                    )])\nfig.update_traces(marker_line_color='black',\n                  marker_line_width=2.5)\nfig.update_layout(title='<b>Number of respondents: Africa vs Rest of the world (2021)<b>', \n                  font_family=\"San Serif\",\n                  yaxis_linewidth=2.5,\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 24},\n                  paper_bgcolor=paper_color,\n                  plot_bgcolor=plot_color,                  \n              \n                  )\nfig.update_layout(\n    autosize=False,\n    margin=dict(\n        l=150,\n        r=50,\n        b=50,\n        t=100,\n    ),\n    )\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()\n\n","28e8ae4f":"## historical data, all gender\nyear = ['2017', '2018', '2019', '2020', '2021']\nvalue = [afro17, afro18, afro19, afro20, afro21]\n\npercent =[\n    afro17\/(afro17 +row17)*100,\n    afro18\/(afro18 +row18)*100,\n    afro19\/(afro19 +row19)*100,\n    afro20\/(afro20 +row20)*100,\n    afro21\/(afro21 +row21)*100]  \n   \n\ncolor = 5* ['salmon'] \ncolor[4] = 'gold'\nfig = go.Figure(data=[go.Bar(\n            y=value, x=year,\n            text=np.round(percent, 1), \n            textposition='outside',\n            texttemplate = [\"<b style='color: #f'>%{text}%<\/b>\"]*5,\n            textfont=dict(  family=\"sans serif\",\n                            size=16,\n                            color=\"black\"),\n            orientation='v',\n            marker_color= color, \n            opacity=0.6\n                    )])\nfig.update_traces(marker_line_color='black',\n                  marker_line_width=2.5)\nfig.update_layout(title='<b>The rise of African kagglers<b>', \n                  font_family=\"San Serif\",\n                  xaxis_linewidth=2.5,\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 28},\n                  template='simple_white',\n#                   paper_bgcolor='#F5F5F5',\n#                   plot_bgcolor='#F5F5F5',                  \n                  )\nfig.update_layout(yaxis_title='Number of Respondents',xaxis_title='Year',\n    autosize=False,\n    margin=dict(\n        l=100,\n        r=50,\n        b=50,\n        t=70,\n        pad=0,\n    ),\n    )\n\nfig.show()","14df6b2c":"# code copied and adapted from: https:\/\/www.kaggle.com\/datafan07\/kaggle-survey-a-general-picture\/notebook\ndef plotly_choroplethMap(locations,counts,title):\n    data = [ dict(\n            type = 'choropleth',\n            locations = locations,\n            z = counts,\n            locationmode = 'country names',\n            autocolorscale = True,\n            marker = dict(\n                line = dict(color = '#999000', width = 1.5)),\n                colorbar = dict(autotick = True, legth = 3, len=0.75, title = 'Nr. of Participants')\n                )\n           ]\n    layout = dict(\n        title = title,\n        titlefont={'size': 28, 'family': 'san serif'},\n        width=750, \n        height=475,\n        paper_bgcolor=paper_color,\n        geo = dict(\n            showframe = True,\n            showcoastlines = True,\n            #scope=\"africa\",\n            fitbounds=\"locations\",\n            ),\n        \n        annotations = [dict(\n        x=0.55,\n        y=1.1,\n        xref='paper',\n        yref='paper',\n        text='<b> Central Africa - kaggle is missing you!',\n            font=dict(family='san serif', size=20, color='#cc5500'),            \n        showarrow = False\n    )]\n    )\n    \n    fig = dict(data=data, layout=layout)\n    iplot(fig, validate=False, filename='world-map')\n    \nz = df21_africa['Q3'].value_counts()\nplotly_choroplethMap(locations=z.index, counts=z.values,title= '<b> African Countries (2021 survey) <b>')","26ea1c71":"#### Heatmap\nfig = go.Figure(data=go.Heatmap(\n                   z=[[73, 59, 127, 66, 0 ,0, 0, 0, 0, 0, 0],\n                    [208, 85, 147, 96, 74, 71, 0, 0, 0, 0],\n                    [395, 114, 120, 122, 68, 123, 58, 0, 0, 0],\n                    [476, 153, 141, 179, 99, 133, 0, 52, 0, 0],\n                    [702, 248, 146, 482, 109, 140, 44, 99, 47, 43],                      \n                     ],\n                   x=['Nigeria','Kenya', 'South Africa', 'Egypt', 'Tunisia', 'Morocco', 'Algeria', 'Ghana', 'Uganda', 'Ethiopia'],\n                   y=['2017', '2018', '2019', '2020', '2021'],\n                   hoverongaps = False,\n                   opacity=1.0, xgap=2.5, ygap=2.5, colorscale='orrd'),\n                   )\nfig.update_layout(title='<b> More countries appearing on the picture <b>',\n                  titlefont={'size': 24, 'family': \"San Serif\"},\n                  height=400, width=700,\n                  template='simple_white',\n                  paper_bgcolor=paper_color,\n                  plot_bgcolor=plot_color,\n                  autosize=False,\n                  margin=dict(l=50,r=50,b=50, t=150,\n                             ),\n                 )\nannotations = []\nannotations.append(dict(xref='paper', yref='paper',\n                        x=-0.01, y=1.3,\n                        text='o <b>Nigeria and Egypt are rising quickly. Nigerian kagglers grew almost 10 folds since 2017!',\n                             font=dict(family='Arial', size=14, color='darkgray'),\n                        showarrow=False))\nannotations.append(dict(xref='paper', yref='paper',\n                        x=-0.01, y=1.2,\n                        text=\"o <b>Algeria<b> had a <em>gap-year<\/em> in 2020.\",\n                             font=dict(family='Arial', size=14, color='darkgray'),\n                        showarrow=False))\n\nfig.update_layout(annotations=annotations)\nfig.show()\n","ccbe19e9":"africa21 = ['Kenya','Nigeria', 'Morocco', 'Tunisia', 'South Africa', 'Algeria', 'Egypt',  'Ghana', 'Uganda', 'Ethiopia']\ninternet = [85.5, 73, 68.5, 68.4, 57.3, 57, 52.5, 46.6, 39.3, 17.9 ]\n\nfig = go.Figure()\n\nfig.add_trace(go.Barpolar(r=internet,\n                          theta=africa21,\n                          name='Internet Acceces',\n                          marker_color=['#C49702','#DEB11B','#F7CA35','#F8D14E','#F9D767','#FADE81','#FBE59A','#FCEBB3','#FDF2CC','#FEF8E6'],\n                          marker_line_color=\"black\",\n                          marker_line_width=2,\n                          opacity=0.8\n                          ),\n              )\nfig.update_layout(polar=dict(radialaxis=dict(visible=False,\n                                             )\n                             ),\n                  showlegend=False,\n                  title= '<b><span style=\"font-size:24px; color: black\"> Internet penetration 2021 (% population) <b>',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  width=600, height=500,\n                 )\n\nannotations = []\n\nannotations.append(dict(xref='paper', yref='paper',\n                        x=-0.01, y=-0.2,\n                        text=\"<b>Data source: Internet world stats [ref. 7] \",\n                             font=dict(family='Arial', size=12, color='darkgray'),\n                        showarrow=False))\n\nfig.update_layout(annotations=annotations)\nfig.show()","84bce0b8":"#def plotly_vBar(df, q, title, l=50,r=50,b=50,t=100):   \ntitle= \"<b> Age Distribution <b>\"\\\n'<br><span style=\"font-size:16px; color: darkgray\"> Around 64% of African kagglers are under 30 years of age!'\n\n\ndf = df21\nq = 'Q1'\norder  = ['18-21', '22-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54', '55-59', '60-69', '70+']\n\nfig = px.histogram(df.iloc[1:],\n                   x=q,\n                   orientation='v',\n                   width=700,\n                   height=450,\n                   histnorm='percent',\n                   color='region',                   \n                   category_orders = {q: ['18-21', '22-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54', '55-59', '60-69', '70+']},\n                   color_discrete_map={\n                       \"Africa\": \"gold\", \"World\": \"salmon\"\n                   },\n                   opacity=0.6\n                   )\n\nfig.add_vrect(\n    x0=-0.5, x1=2.5,\n    fillcolor=\"lightgray\", opacity=0.2,\n    layer=\"below\", line_width=0,\n),\n\nfig.update_layout(title=title, \n                  font_family=\"San Serif\",\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 24},\n                  template='simple_white',\n                  paper_bgcolor=paper_color,\n                  plot_bgcolor=plot_color,\n                  legend=dict(\n                  orientation=\"v\", \n                      y=1, \n                      yanchor=\"top\", \n                      x=1.250, \n                      xanchor=\"right\",)                 \n                  )\nfig.update_traces(marker_line_color='black',\n              marker_line_width=1.5)\n\nfig.update_layout(xaxis_title=None,xaxis_linewidth=2.5,\nautosize=False,\nmargin=dict(\n    l=50,\n    r=50,\n    b=50,\n    t=125,\n),\n)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()   ","be0dfc06":"#gender\ntitle= '<b><span style=\"font-size:24px; color: black\"> Gender Distribution <b>'\\\n '<br><span style=\"font-size:16px; color: darkgray\">  Kaggle is a male dominated platform! Sadly so is the work place in general' \nplotly_hBar(df21, \"Q2\", title=title, l=150)","77c6d537":"DF = df21_africa\nDF['all'] = 'Africa 2021'\n\nfig = px.treemap(DF, path=['all','Q3', 'Q2'], color='Q3',\n                 \n                 color_discrete_map={'(?)': 'lightgray','Nigeria':'#802300','Kenya': '#FF6A33', 'South Africa': \"#FF7D4D\", 'Egypt': '#CC3700', 'Tunisia': \"#FFA280\",\n                                     'Morocco': '#FF8F66', 'Algeria': '#FFDACC', 'Ghana': '#FFB599', 'Uganda': '#FFC7B3', 'Ethiopia': '#FFECE6'},\n                )\n\nfig.update_layout(title=\"<b> Gender distribution: Africa - 2021<b>\",\n                  titlefont={'size': 24, 'family': \"San Serif\"},\n                  height=500, width=700,\n                  template='simple_white',\n                  paper_bgcolor=paper_color,\n                  plot_bgcolor=plot_color,\n                  autosize=False,\n                  margin=dict(l=50,r=50,b=50, t=250,\n                             ),\n                 )\nfig.update_layout(margin = dict(t=50, l=50, r=50, b=100))\n\nannotations = []\nannotations.append(dict(xref='paper', yref='paper',\n                        x=-0.01, y=-0.1,\n                        text='<b>1. Tunisia has the highest female respondents (38.5%)',\n                             font=dict(family='Arial', size=16, color='darkgray'),\n                        showarrow=False))\nannotations.append(dict(xref='paper', yref='paper',\n                        x=-0.01, y=-0.175,\n                        text=\"<b>2. Ethiopia has the lowest female reppondents (2 out of 43)\",\n                             font=dict(family='Arial', size=15, color='darkgray'),\n                        showarrow=False))\n\nfig.update_layout(annotations=annotations)\nfig.show()\n","2ef7120f":"## historical data, women\n\ndf21_afrowomen = df21_africa[df21_africa['Q2'] == 'Woman']\ndf20_afrowomen = df20_africa[df20_africa['Q2'] == 'Woman']\n\ndf19_afrowomen = df19_africa[df19_africa['Q2'] == 'Female']\ndf18_afrowomen = df18_africa[df18_africa['Q1'] == 'Female']\ndf17_afrowomen = df17_africa[df17_africa['GenderSelect'] == 'Female']\n\nafrowomen21 = len(df21_afrowomen)\nafrowomen20 = len(df20_afrowomen)\nafrowomen19 = len(df19_afrowomen)\nafrowomen18 = len(df18_afrowomen)\nafrowomen17 = len(df17_afrowomen)\n\n    \nyear = ['2017', '2018', '2019', '2020', '2021']\nvalue = [afrowomen17, afrowomen18, afrowomen19, afrowomen20, afrowomen21]\n\npercent =[\n    afrowomen17\/len(df17_africa)*100,\n    afrowomen18\/len(df18_africa)*100,\n    afrowomen19\/len(df19_africa)*100,\n    afrowomen20\/len(df20_africa)*100,\n    afrowomen21\/len(df21_africa)*100,\n    ]  \n\ncolor = 5* ['#fa8072'] \ncolor[0] = 'gray'\nfig = go.Figure(data=[go.Bar(\n            y=value, x=year,\n            text=np.round(percent, 1), \n            textposition='outside',\n            texttemplate = [\"<b style='color: #f'>%{text}%<\/b>\"]*5,\n            textfont=dict(  family=\"sans serif\",\n                            size=16,\n                            color=\"black\"),\n            orientation='v',\n            marker_color= color, \n            opacity=0.6\n                    )])\nfig.update_traces(marker_line_color='black',\n                  marker_line_width=2.5)\n\nfig.update_layout(title='<b>African women kagglers (2017-2021)<b>', \n                  font_family=\"San Serif\",\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 24},\n                  template='simple_white',\n#                   paper_bgcolor='#F5F5F5',\n#                   plot_bgcolor='#F5F5F5',                  \n                  )\nfig.update_layout(yaxis_title='Number of Respondents',xaxis_title='Year',xaxis_linewidth=2.5,\n    autosize=False,\n    margin=dict(\n        l=100,\n        r=50,\n        b=50,\n        t=50,\n        ),\n    )\n\nannotations = []\nannotations.append(dict(xref='paper', yref='paper',\n                        x=0.01, y=0.97,\n                        text='<b>  <b>',\n                             font=dict(family='Arial', size=12, color='#cc5500'),\n                        showarrow=False))\nannotations.append(dict(xref='paper', yref='paper',\n                        x=0.01, y=.93,\n                        text=\"<b> <b> \",\n                             font=dict(family='Arial', size=12, color='#cc5500'),\n                        showarrow=False))\n\nfig.update_layout(annotations=annotations)\nfig.show()","ed2b5759":"title= '<b><span style=\"font-size:24px; color: black\"> Highest level of formal education <b>'\nplotly_hBar(df21, \"Q4\", title=title, l=350)\n\n\ntitle= \"<b><span style='font-size:24px'> Current role\/Job title <b>\"\nplotly_hBar(df21, \"Q5\", title=title, l=200)\n\ntitle= \"<b><span style='font-size:24px'> Coding Experience <b>\"\\\n'<br><span style=\"font-size:16px; color: darkgray\"> Africa is light on coding experience.'\nplotly_hBar(df21, \"Q6\", title=title, l=200)","1c958497":"# Q7, \ndf_w = df_with_percentages(df21_world, 7, 13, 'World').sort_values(['Value'],ascending=False)\ndf_a = df_with_percentages(df21_africa, 7, 13, 'Africa').sort_values(['Value'],ascending=False)\n\ntitle = '<b> Programing Language Preference <b>'\n#plot_barH_percent(df_w, df_a, title)\nannotated_heatmap(df_w, df_a, title)","6b128ceb":"# # Q9, \n\ndf_w = df_with_percentages(df21_world, 9, 13, 'World').sort_values(['Value'],ascending=False)\ndf_a = df_with_percentages(df21_africa, 9, 13, 'Africa').sort_values(['Value'],ascending=False)\n\n# merge Jupyter's together\ndf_w.loc[10] += df_w.loc[0]\ndf_a.loc[10] += df_a.loc[0]\n\n# drop the duplicate\ndf_w.drop([0], inplace=True)\ndf_a.drop([0], inplace=True)\n\ntitle = \"<b> Integrated Developments Environment (IDE's) Usage <b>\"\nplot_barH_percent(df_w, df_a, title, l=350)\n","e329030f":"title= \"<b>Programming Language Recommendation <b>\"\nplotly_hBar(df21, \"Q8\", title=title, l=150)","b7cc0dbd":"title= \"<b>Machine Learning Experience <b>\"\nplotly_hBar(df21, \"Q15\", title=title)","705c4ee1":"# Q16, \ndf_w = df_with_percentages(df21_world, 16, 18, 'World').sort_values(['Value'],ascending=False)\ndf_a = df_with_percentages(df21_africa, 16, 18, 'Africa').sort_values(['Value'],ascending=False)\ntitle = \"<b> Machine Learning Platform Usage <b>\"\nplot_barH_percent(df_w, df_a, title, l=150)","8ec1081b":"# Q17, \ndf_w = df_with_percentages(df21_world, 17, 12, 'World').sort_values(['Value'],ascending=False)\ndf_a = df_with_percentages(df21_africa, 17, 12, 'Africa').sort_values(['Value'],ascending=False)\n\ntitle = \"<b> Machine Learning Algorithms Usage <b>\"\nplot_barH_percent(df_w, df_a, title, l=300)","967288ab":"# Q18, \ndf_w = df_with_percentages(df21_world, 18, 7, 'World')\ndf_a = df_with_percentages(df21_africa, 18, 7, 'Africa')\n\ntitle= \"<b> Computer Vision Methods Used <b>\"\n\nannotated_heatmap_Trans(df_w, df_a, title, width=950, height=550, l=700)\n\n\n# Q19, \ndf_w = df_with_percentages(df21_world, 19, 6, 'World')\ndf_a = df_with_percentages(df21_africa, 19, 6, 'Africa')\n\ntitle= \"<b> Natural Language Processing Methods Used <b>\"\n\nannotated_heatmap_Trans(df_w, df_a, title, width=700, height=550, l=400)","42b2bb07":"# Q14, 12\ndf_w = df_with_percentages(df21_world, 14, 12, 'World')#.sort_values(['Value'],ascending=False)\ndf_a = df_with_percentages(df21_africa, 14, 12, 'Africa')#.sort_values(['Value'],ascending=False)\n\ntitle = '<b> Data Visualizations Library<b>'\nannotated_heatmap(df_w, df_a, title)","0df64438":"title= \"<b> Computing platform usage <b>\"\nplotly_hBar(df21, \"Q11\", title=title, l=350)","300f8925":"title= \"<b> Frequency of TPU Usage <b>\"\nplotly_hBar(df21, \"Q13\", title=title, l=150)","a51c333a":"# Q12,\n\ndf_w = df_with_percentages(df21_world, 12, 6, 'World')\ndf_a = df_with_percentages(df21_africa, 12, 6, 'Africa')\n\ntitle = \"<b> Specialized Hardware <b>\"\n\nannotated_heatmap(df_w, df_a, title)","fda313f4":"title= \"<b> Preferred Cloud Platform <b>\"\n#plotly_hBar(df21, \"Q27\", title=title, l=300)\n\n#27_A, 12\ndf_w = df_with_percentages_suf(df21_world, 27, '_A', 12, 'World').sort_values(['Value'],ascending=False)\ndf_a = df_with_percentages_suf(df21_africa, 27, '_A', 12, 'Africa').sort_values(['Value'],ascending=False)\n\ntitle = \"<b> Frequently Used Cloud Computing Platforms<b>\"\nplot_barH_percent(df_w, df_a, title, l=250)","ecb14ee1":"title= \"<b> Preferred Cloud Platform <b>\"\nplotly_hBar(df21, \"Q28\", title=title, l=300)","9368e842":"#29_A, 5\ndf_w = df_with_percentages_suf(df21_world, 29, '_A', 5, 'World').sort_values(['Value'],ascending=False)\ndf_a = df_with_percentages_suf(df21_africa, 29, '_A', 5, 'Africa').sort_values(['Value'],ascending=False)\n\ntitle = \"<b>Cloud computing products used on a regular basis<b>\"\nplot_barH_percent(df_w, df_a, title, l=250)","85069e64":"#32_A, 12\ndf_w = df_with_percentages_suf(df21_world, 32, '_A', 21, 'World').sort_values(['Value'],ascending=False)\ndf_a = df_with_percentages_suf(df21_africa, 32, '_A', 21, 'Africa').sort_values(['Value'],ascending=False)\n\ntitle = \"<b> Big Data Product Used <b>\"\nplot_barH_percent(df_w, df_a, title, l=250)","c7ad27e0":"# Q33\ntitle= \"<b> Most Often Used Big Data Product <b>\"\nplotly_hBar(df21, \"Q33\", title=title, height=500, l=200)","97e5db98":"#34_A, 17\ndf_w = df_with_percentages_suf(df21_world, 34, '_A', 17, 'World').sort_values(['Value'],ascending=False)\ndf_a = df_with_percentages_suf(df21_africa, 34, '_A', 17, 'Africa').sort_values(['Value'],ascending=False)\n\ntitle = \"<b> Business Intelligence (BI) Tools <b>\"\nplot_barH_percent(df_w, df_a, title, l=200)","79dcce33":"# Q10, 17\ndf_w = df_with_percentages(df21_world, 10, 17, 'World').sort_values(['Value'],ascending=False)\ndf_a = df_with_percentages(df21_africa, 10, 17, 'Africa').sort_values(['Value'],ascending=False)\ntitle = \"<b> Hosted notebook products <b>\"\nplot_barH_percent(df_w, df_a, title, l=300)","47b7b733":"# Q20\ntitle= \"<b> Current Employer <b>\"\nplotly_hBar(df21, \"Q20\", title=title, height=600, l=200)","15978b02":"# Q24, \n\ndf_w = df_with_percentages(df21_world, 24, 8, 'World')\ndf_a = df_with_percentages(df21_africa, 24, 8, 'Africa')\n\ntitle= \"<b> Important Activity As Part of Job\/Role At Work <b>\"\n\nannotated_heatmap_Trans(df_w, df_a, title, width=950, height=550, l=650)","cad5bb27":"## Company size\n\ndfa = pd.DataFrame(df21_africa.iloc[1:]['Q21'].value_counts()).rename(columns={\"Q21\": \"Africa\"})\ndfw = pd.DataFrame(df21_world.iloc[1:]['Q21'].value_counts()).rename(columns={\"Q21\": \"World\"})\n\nDF = pd.concat([dfa, dfw], axis=1)\naf_sum = DF['Africa'].sum()\nrw_sum = DF['World'].sum()\n\nDF['per_af'] = DF['Africa']\/af_sum*100\nDF['per_rw'] = DF['World']\/rw_sum*100\n\n#print(DF.index)\n\norder = ['0-49 employees', '50-249 employees', '250-999 employees', '1000-9,999 employees', '10,000 or more employees']\n\nnew_index = ['0-49', '50-249', '250-999', '1000-9,999', '> 10,000']\n\ntitle = '<b> Company Size <b>'\\\n'<br><span style=\"font-size:16px; color: darkgray\"> Almost half of the Africans work for small companies!'\n\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=new_index,\n                     y=DF['per_rw'],\n                     orientation= 'v',\n                     name=\"World\",\n                     marker_color='salmon',\n                     opacity =0.6\n                    ),\n             )\nfig.add_trace(go.Bar(x=new_index,\n                     y=DF['per_af'],\n                     orientation= 'v',\n                     name=\"Africa\",\n                     marker_color='gold',\n                     opacity =0.6\n                    ),\n             )\nfig.update_traces(marker_line_color='black',\n              marker_line_width=1.5)\nfig.update_layout(title=title,\n                  height=400,\n                  width=700,\n              font_family=\"San Serif\",\n              bargap=0.2,\n              barmode='group',\n              titlefont={'size': 28},\n              template='simple_white',\n              paper_bgcolor=paper_color,\n              plot_bgcolor=plot_color,\n              legend=dict(\n              orientation=\"v\", \n                  y=1, \n                  yanchor=\"top\", \n                  x=1.250, \n                  xanchor=\"right\",)                 \n              )\n\n\nfig.update_yaxes(categoryarray= new_index)\nfig.update_layout(yaxis_title='percentage',xaxis_title='Nr. of Employees',\nautosize=False,\nmargin=dict(\nl=150, r=50, b=50, t=100,\n))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()     ","ab93fdad":"dfa = pd.DataFrame(df21_africa.iloc[1:]['Q25'].value_counts()).rename(columns={\"Q25\": \"Africa\"})\ndfw = pd.DataFrame(df21_world.iloc[1:]['Q25'].value_counts()).rename(columns={\"Q25\": \"World\"})\n\nDF = pd.concat([dfa, dfw], axis=1)\naf_sum = DF['Africa'].sum()\nrw_sum = DF['World'].sum()\n\nDF['per_af'] = DF['Africa']\/af_sum*100\nDF['per_rw'] = DF['World']\/rw_sum*100\n\norder = ['$0-999', '1,000-1,999', '2,000-2,999',  '3,000-3,999','4,000-4,999','5,000-7,499',\n         '7,500-9,999','10,000-14,999', '15,000-19,999','20,000-24,999', '25,000-29,999',\n         '30,000-39,999', '40,000-49,999', '50,000-59,999','60,000-69,999','70,000-79,999', '80,000-89,999', '90,000-99,999',\n       '100,000-124,999', '125,000-149,999','150,000-199,999', '200,000-249,999', '250,000-299,999', '300,000-499,999', \n       '$500,000-999,999','>$1,000,000',]\n\ntitle = '<b> The Payment Pyramid <b>'\n\nnew_index = ['0-999', '1,000-1,999', '2,000-2,999',  '3,000-3,999','4,000-4,999','5,000-7,499',\n         '7,500-9,999','10,000-14,999', '15,000-19,999','20,000-24,999', '25,000-29,999',\n         '30,000-39,999', '40,000-49,999', '50,000-59,999','60,000-69,999','70,000-79,999', '80,000-89,999', '90,000-99,999',\n       '100,000-124,999', '125,000-149,999','150,000-199,999', '200,000-249,999', '250,000-299,999', '300,000-499,999', \n       '500,000-999,999','>1,000,000',]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(y=new_index,\n                     x=-DF['per_rw'],\n                     orientation= 'h',\n                     name=\"World\",\n                     marker_color='salmon',\n                     opacity = 0.6,\n                    ),\n             )\nfig.add_trace(go.Bar(y=new_index,\n                     x=DF['per_af'],\n                     orientation= 'h',\n                     name=\"Africa\",\n                     marker_color='gold',\n                     opacity =0.6,\n                    ),\n             )\nfig.update_traces(marker_line_color='black',\n              marker_line_width=1.5)\nfig.update_layout(title=title,\n                  height=700,\n                  width=700,\n              font_family=\"San Serif\",\n              bargap=0.2,\n              barmode='group',\n              titlefont={'size': 28},\n              template='simple_white',\n              paper_bgcolor=paper_color,\n              plot_bgcolor=plot_color,\n              legend=dict(\n              orientation=\"v\", \n                  y=1, \n                  yanchor=\"top\", \n                  x=1.250, \n                  xanchor=\"right\",)                 \n              )\nfig.add_shape(type=\"rect\",\n              xref=\"paper\", yref=\"y\",\n              x0=0, x1=6, y0=-0.5, y1=6.5,\n              fillcolor=\"lightgray\",    \n              opacity=0.2\n              )  \n\nfig.update_yaxes(categoryarray= new_index)\nfig.update_layout(xaxis_title='percentage',\n                  xaxis= dict(\n                      tickvals = [-20, 0, 20, 40],\n                      ticktext = [20, 0, 20, 40],\n                  ),\nautosize=False,\nmargin=dict(\nl=150, r=50, b=150, t=50,\n))\n\n                 \nannotations = []\nannotations.append(dict(xref='paper', yref='paper',\n                        x=0.1, y=0.15,\n                        text='<b> 42.7%',\n                             font=dict(family='Arial', size=20, color='black'),\n                        showarrow=False))\nannotations.append(dict(xref='paper', yref='paper',\n                        x=0.6, y=0.15,\n                        text=\"<b> 77.5%\",\n                             font=dict(family='Arial', size=20, color='black'),\n                        showarrow=False))\n\nannotations.append(dict(xref='paper', yref='paper',\n                        x=-0.2, y=-0.2,\n                        text=\"<i>Note: This payment scale is not adjusted for local purchasing power!\",\n                             font=dict(family='Arial', size=16, color='black'),\n                        showarrow=False))\n\nfig.update_layout(annotations=annotations)\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()     ","7f98159b":"# Q40, 12\ndf_w = df_with_percentages(df21_world, 40, 12, 'World').sort_values(['Value'],ascending=False)\ndf_a = df_with_percentages(df21_africa, 40, 12, 'Africa').sort_values(['Value'],ascending=False)\ntitle = \"<b> Data Science Learning Platform<b>\"\nplot_barH_percent(df_w, df_a, title, l=360)","d0b03897":"# Q42, 12, \ndf_w = df_with_percentages(df21_world, 42, 12, 'World')\ndf_a = df_with_percentages(df21_africa, 42, 12, 'Africa')\n    \ntitle= \"<b> Favourite Media Source for DS Topics  <b>\"\n\nannotated_heatmap_Trans(df_w, df_a, title, width=850, height=550, l=500)","31d2cebb":"# Q39, 10\ndf_w = df_with_percentages(df21_world, 39, 10, 'World').sort_values(['Value'],ascending=False)\ndf_a = df_with_percentages(df21_africa, 39, 10, 'Africa').sort_values(['Value'],ascending=False)\ntitle = \"<b> Preferred Content Sharing\/Deploying Platfrom for DS\/ML<b>\"\nplot_barH_percent(df_w, df_a, title, l=250)","1ca208b1":"## **11. References** <a class=\"anchor\" id=\"11\"><\/a>\n\n[1]. https:\/\/en.wikipedia.org\/wiki\/Kaggle\n\n[2]. https:\/\/www.worldometers.info\/world-population\/africa-population\/\n\n[3]. https:\/\/www.statista.com\/statistics\/1218173\/life-expectancy-in-african-countries\/\n\n[4]. https:\/\/www.kaggle.com\/\n\n[5]. https:\/\/www.kaggle.com\/mhajabri\/africai\n\n[6]. https:\/\/qz.com\/africa\/1683977\/why-data-science-is-crucial-to-africa-development\/\n\n[7]. https:\/\/www.internetworldstats.com\/stats1.htm\n\n[8]. https:\/\/qz.com\/africa\/1683977\/why-data-science-is-crucial-to-africa-development\/\n\n[9]. https:\/\/tribunecontentagency.com\/article\/why-ai-needs-input-from-africans\/\n\n\n","ae311b0e":"## **8. Employment, role at work and payment** <a class=\"anchor\" id=\"8\"><\/a>\n\n### Employment\n\n* **Computer\/technology** and **Academics\/Education** are the standout employment sectors across all respondents. While Africa leads the in Academics\/Education, the rest of the world is ahead in Computer\/Technology. \n* **Non-prifit\/Services** is another sector where african kagglers have slight percentage lead. Whereas in **Manufacturing\/Fabrication** sector rest of the world leads.om\n* In terms of compay size we see a noticable difference at both ends of the scale. Almost half of the respondents (49%) from Africa work for relatively small companies (< 50 employes), about 30% of the respondents from the rest of the world work in a similar company size. At the other end of the scale (> 10, 000 employees), we observe quite the opposite world ~22% vs Africa ~8%. \n\n### Role at work\n* More that a third of the responents have described their important role at work as \"*analyse and understand data to influence product or business decisions*\". The difference between Africa and the rest of the world in this categoty is mariginal. Africa trails in the rest of the categories. Considering that **data scientist** and **data analyst** are the top two job titles (excuding students), this response seems to be consistent with previous findings.\n\n### Payment\n* With the large majority of the respondents being students, this category is biased towards the lower end of the pay scale. Around 43% of the African respondents and 20% of the rest of the world reported less \\$1000 USD as their annual compensation. \n* The stark difference between Africa and the rest of the world when it comes to compensation is quite clear! Around 78% of the respondents in Africa earn less than \\$10,000 UDS per year. Whereas around 43% from the rest of the world are in the same category.","d8a1bce6":"## **5. Programming Languages & IDE's** <a class=\"anchor\" id=\"5\"><\/a>\n### Programming Languages\n\n* Like in the rest of the world **Python** is the most popular programming language in Africa as well. Around 82% of African respondents prefer python. The rest of the world is ahead by 2%.\n* **SQL** is a distant second, but is best of the rest with +\/-40%.\n* **Swift** is the at bottom of the list. \n* We also see that in *all* programming language preferences the **rest of the world is mariginally ahead of Africa**. Programming language comfort-zone for African kagglers is a little narrower.\n* **Python** is by far the most recommended programming language for aspiring data scientists to learn first. \n\n### IDE's \n* With the huge majority of the respondents chosing for python as a preferred programming language, seeing **Jupyter labs** leads by a signifcant marigin is not a surprise. **Visual Studio Codes** comes in second followed by Pycharm.","d14bd61b":"## **7. Computing Resources** <a class=\"anchor\" id=\"7\"><\/a>\n\n#### Computing Platform\n\n* **Laptops** are by far the most used computing machines among all respondents, albeit more popular in Africa. 79.4% of the African respondents use them compared to 64.5% of the rest of the world. \n* **Deep learning workstations** such as **NVIDIA GTX**, **LambdaLabs** are the least used among all respondents. Africa's usage is very low at less than 1%. \n\n#### TPU\n* Both groups aren't a heavy TPU users; more than **two-third** of the respondents have **never** used a **TPU**.\n\n#### Specialized Hardware\n* The use of specialized hardware is not a common thing. More that half the repondents reported that they do not use sepcialized hardware. Having already seen that student kagglers are the large portion of the respondents, it is likely that most do not have the previllage of having an access to specialized hardware. Even a laptop\/personal computer is a luxury for many. \n* However, of those whos do have access to some, **NVIDIA GPUs** are the used more frequently than any other hardware. **Google Cloud TPUs** comes in second. Here Africa trails the rest of the world by more than 10%. \n\n#### Cloud\n* For African **Google Cloud Platform (GCP)** is the most frequently used cloud computing platform. Whereas the rest of the world uses **Amazon Web Service (AWS)** than others. \n* However, there is a distinct difference in the preferred cloud platform between the groups. Around **27.7% (the highest) of African** respondents could not differentiate among the cloud platforms; they enjoyed all of them. Whereas the rest of the world preferred **Amazon Web Service (AWS)**. The second choice for both groups is **Google Cloud Platform (GCP)**. \n* **IBM Cloud\/Red Hat** is more popular in Africa than the rest of the world. Around 6.7% of African respondents preferred IMB Cloud\/Red Hat.\n\n#### Big Data\n\n* MySQL and PostgreSQL are the top two used big data products globally.\n* Respondent who do not used any big data products at all is also high in the ranks; 4th for Africa and 2nd in the rest. ","02ea1a16":"<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #f8f8ff; padding: 1em; margin:24px;\">\n<strong>Note:<\/strong><br>\nMany factors can be cited as reasons why the African participation is low compared to the rest of the world. One prominent factor could be <strong>access to internet<\/strong> without which this very survey would not have been possible. According to [7], only <strong>43% <\/strong> of Africa's population has access to the internet in comparision to <strong>68.6%<\/strong> to the rest of the world. The chart below shows the internet coverage of the 10 African countries appeared in the survey. It is <em>fair<\/em> to say there seem to be a relation between internet access and survey participation.\n<\/blockquote>","08d470d6":"## **How popular is kaggle in Africa?**\n![](https:\/\/tse1.mm.bing.net\/th?id=OIP.oiEMOXFTdUOCzjSN9xEpmgHaDp&pid=Api&P=0&w=315&h=156)\n\n[Image source :: https:\/\/theconversation.com](https:\/\/theconversation.com\/how-data-science-in-and-for-africa-can-blaze-new-trails-120920)","e1665ff6":"## **2. Which African countries are** *kaggle-aware*? <a class=\"anchor\" id=\"2\"><\/a>\n\n* **Four** countries participated in the inaugural kaggle survey in 2017. That number grew to **ten** in 2021. Slowly but surely more African countries are coming to kaggle.\n* **Nigeria**, **Kenya**, **Egypt** and **South Africa** have appeared in all survey since the first survey year in 2017. \n* This year's survey saw two debutant countries in **Ethiopia** and **Uganda**.\n* **Nigeria** (the most populous country in Africa) has the highest participants with 34.1% of the 2021 survey data; on the contrary **Ethiopia**, the second most populous country in the continent, has the lowest participants with a meager 2.1%.\n* Not surprisingly, the top four countries in terms of participation are those four countries who got to *know* kaggle first. \n* **More than 57%** of African kagglers are either from **Nigeria** or **Egypt**. \n* So far no country from **central Africa region** entered the kaggle world. If there are any, they are not responding to the kaggle survey. May be **kaggle's BIPOC initiatives** needs to scout central African region. ","687dc19e":"## **9. Learning Platform and Media** <a class=\"anchor\" id=\"9\"><\/a>\n\n### Learning platform\n\n* With around 4% lead over Kaggle Learn Courses, **Coursera** is the most favoured data science learning platform for the rest of the world. Perhaps much to the delight of kaggle.com, **kaggle learn courses are top of the pile among African kagglers**, albiet mariginally (+1.5% advantage over Coursera). Udemy comes in third for both groups.\n* It is quite surprizing to see that Udacity (not a cheap learning platform) is more popular in Africa than the rest of the world; 23% of Africa's repondents use Udacity compared to 9.7% of the world's.  \n\n### Media\n* **Kaggle** is happy here as well! It is the favourite media for both African respondents (48%) and the rest of the world (43%)\n* **YouTube**, blogs such as **Towards Data Science** and **Analytic Vidhya** comes in second and third. \n* African kagglers' use of **Twitter** for DS information is higher than their peers in the rest of the world. \n\n<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #f8f8ff; padding: 1em; margin:24px;\">\n<strong>Note:<\/strong><br>\n    <strong>Kaggle<\/strong> featured in the top two prefered platforms in all categories it appeared as choice option! For African respondents it was choosen as preferred platform in <strong>two<\/strong> instances.\n<\/blockquote>","a69d0085":"<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #f8f8ff; padding: 1em; margin:24px;\">\n<strong>Note:<\/strong><br>\nNo African country whose official language is <strong>French<\/strong> appears in the survey. Could language barrier have played a role in preventing people from the Western and Central African region (most of them speak French as official language) from enjoying the kaggle platform? I would not bet against it.\n\n<\/blockquote>\n\n[List of countries where French is an official language](https:\/\/en.wikipedia.org\/wiki\/List_of_countries_and_territories_where_French_is_an_official_language)","16f3ab68":"## **10. Summary** <a class=\"anchor\" id=\"10\"><\/a>\n\nAs I mentioned in the introduction part, the aim of this notebook was to do a descriptive analysis of the the African kagglers in comparision with thier peers from the rest of the world. We did so by looking at the majority of question contained in the survey. As a summary, I have highlighted few of the points where African kagglers have different statistics than the rest of the world.  \n\n- Africa's participation in the kaggle data science\/ML community is **steadily increasing** although its disproportionate to the size of the continent. Only eleven out of 54 countries have so far appeared in the survey with two debutant countries this year. Following the global trend African women's involvement on the survey is disappointingly low. On a positive note, they are **slightly more than the global average**. \n\n- The majority of African kagglers are young with **~65% under the age of 30** with **no respondents aged 70 and above**. However, at the young end of the age spectrum, Africa is behind the rest of the world by about 4%. \n\n- Almost **half** of the African respondents have a **Bachelor's degree** unlike their peers from the rest of world where Master's degree holder edges the Bachelor's slightly. Similar to the global average, students are the majority of the respondents in Africa as well. Data scientists being the second. **Data analysts** and **unemployed kagglers** from Africa appeared in more number (%) than the rest of the world. \n\n- Coding experience is one of the categories where African respondents lag hugely in comparison to the rest of the world. Nearly **three-quarter (73.3%) of them have less than three year coding experience or have never coded before**. We also see the same trend when it comes to machine learing experience. \n\n- Python is the most common programming language, Jupyter labs\/notebooks as favourite IDEs. Scikit-learn as ML platform and the more traditional ML algorithms such as the linear\/logistic regression are widely used in Africa; just like the rest of the world.\n\n- Unlike the rest of the world whose majority work in the computer\/technology sector, Africa's kagglers work in the **research \/education**. Another sector where Africans have more presence relative to the rest is the **Non-profit\/service**.  \n\n- MySQL is the most used big data prroduct not only in Africa but also globally. However, **Google's cloud platform and products** are more popular than other alterantive in Africa. Whereas AWS is the most chosen in the rest of the world.\n\n- The **payment** disparity between African kagglers and the rest of the world is huge. Around **77% of the Africans earn an annual salary of 10,000 USD** or compared to **~43%** of the rest. This salary comparison is as is without adjusting for purchasing power. \n\n- **Kaggle learn** is the choice for Africans as a data science learning platform. Coursera, the first choice for everyone else, comes in second for Africans. **Kaggle forums and notebooks** are favourite **media** sources data science topics. Interestingly, **Twitter** is the fouth choice for both Africa and the rest of the world after YouTube and blogs. However, more Africans use Twitter than kagglers from the rest of the world.\n\n\nFinally, I sincerly hope that this notebook gave you an overview of the African kaggler within the scope of the survey question; where they lag behind and in some instances where they have the edges compared to the rest of the kaggling world. Although some stats are dissapointigly low, the future looks bright for Africa. We have seen the steady growth in overall participation and the consistent presence of African women kagglers. With better internet access, drafting data science\/AI curriculum in higher educations and training, the field of DS and AI will surely catch up with pace. I am sure we will see that in future kaggle surveys. \n    ","2be295a2":"## **1. How does Africa compares with rest of the world?** <a class=\"anchor\" id=\"1\"><\/a>\n* In the 2021 kaggle survey, only **7.9%** of the respondents are from Africa.\n* Compared to the population share, this number appears to be low. Africa's population amounts to **17.5%** of the world's population according to the latest census [2]\n* The good news is that this number is only likely to increase in the future (hopefully). This year's (2021) survey has seen the African participants increase by a whopping **633%** compared to the inaugural survey in 2017.","6c651a71":"#### End of Notebook. \n\n#### Thank you for reading!\n","26e474a4":" \n## **3. Demography** : *Age and Gender* <a class=\"anchor\" id=\"3\"><\/a>\n### Age\n\n* Generally both groups (Africa & rest of the world) of participants are dominated by younger kagglers. **Africa's 64.6%** and **worlds's 52.2%** of the respondents are made up of kagglers who are 30 or under. Except for the age range 18-21, Africa's proportion of kagglers under 40 is higher than the rest of the world. \n* However,Africa falls short when it comes to older kagglers with *no respondent aged* **70** or **older**. For a continent whose average life expectancy is just 64years [3], this figure may not be a surprise at all. \n\n### Gender\n* General trend is the same as the as rest of the world; men dominate the survey. However, comparatively **Africa beats the rest of the world in women's representation percentage wise**. Africa has 20% vs 18.7% (rest of the world). Well done Africa!\n* **Tunisia**  has the highest proportion of women respondents with 38.5%. \n* The participation of African women has been steady (around 20% of the African repondents) since 2018 with a slight increase in 2019. In the inuagural survey year, that figure was 17.8%.\n* Another subtle difference is that Africa has only **one** respondent who identified themselves as \"**nonbinary**\". \n    ","532edef7":"## **6. Machine Learning**: *Experience, Framework and Algorithms* <a class=\"anchor\" id=\"6\"><\/a>\n### Experience:\n* **Africa** has less ML experience than the rest of the worlds with **66.5%** of the total respondents having **2 years** or **less** in ML. The rest of the world isn't that far ahead either - over half of the kagglers have two or less years of ML exposure.\n* People who do not use machine learning methods at all constitute a significant portion of the survey population - almost 20% of African respondents and 16% of the rest do not use ML methods.\n* ML veterans (20+years experience) are almost non-existent with only **0.05%** of the respondents in Africa and <1% of the rest of the world.\n\n### Framework\n\n* **Scikit-learn** is well ahead of the others globally followed by **Tensor Flow** and **Keras**. In all of the ML plateform usage, Africa's average is behind the rest of the world.\n\n### Algorithms\n\n* Overall **Linear\/Logistic Regressions** and **Decision Trees\/Random Forest** are the most used machine learning algorithms. Although the usage of all the algorithms listed is less common among African kagglers, the diffrerence even more visible for the Gradient boosting machine, CNNs and DNN. This might suggest that the African kagglers could be less experienced that their peers from other continents. \n* **GAN**, and **Evolutionary Approaches** are the least used algorithms.\n\n### Advanced Methods (CV, NLP)\n\n* Advanced methods need experience and experities to apply them on a regulary basis. We already saw that the magority of the respondents are short of experience and this exactly what is manifiested here; only a small percentage of the respondents said they use Computer Vision and Natural Language Processing methods in a regular basis. The story is the same for both groups although Africa trials in each of the categories.\n* While *general purpose image\/video tools (PIL, cv2, skimage, etc)* is the highest in CV methods with 17.2% and 13.1% for rest of the world and Africa respectively; *Word embeddings\/vectors (GLoVe, fastT ext, word2vec)* is mariginally best of the rest in NLP methods. \n","0c408fa5":"## **4. Education, Jobs and Experience** <a class=\"anchor\" id=\"4\"><\/a>\n\n### Education:\n* Perhaps not surprisingly, the majority of the respondents (both groups) are Bachelor's degree or Masters degree holders. PhD's are a rare breed to find in any field and DS is no different. What is more surprising (at least for me) however is that, the rest of the world has more Masters than Bachelors. \n\n### Jobs:\n\n* Anybody who kaggled for sometime knows that there is a lot of students engagement in our platform. To see a large contingent of students is perhaps not a surprise. Nearly a  quarter (**23.1% of Africa's and 26.5% of the world's**) of the respondents are students.\n* People who said they are **not currenly employed** in Africa are higher than that of the world by about 3.5%. Another job title where **Africa** has more relative percentage are **Data Analyst** and **Statisticians**. \n\n### Code Experience:\n* Over half (51.8%) of the world and more that two-third (66.9%) of African kagglers have a coding experience of 3 years of less. Africa lags behind when it comes to experience with the largest % difference coming from the 20+years experience group.\n* In terms of kagglers who have never coded before, Africa leads the world.","b833129a":"\n## **Introduction**\n\nKaggle is arguabily the most popular online platform for data scientists and machine learning engineers and up todate has over 8 million registered users around the globe. The platform caters people from around 194 countries. On its platform kaggle offers four main services to its users i.e, machine learning competitions, Notebooks(kernels), Public datasets and Kaggle Learn [1]. \n\nSince 2017 kaggle hosts an industry-wide survey in a attempt to get a comprehensive view of the state of data science and machine learning community. Kagglers from African countries have also been participating since then. Using this notebook I would like to explore the participation of African kagglers using the 2021 kaggle survey dataset. I will also use previous year's datasets for historical overview.\n\n#### **AI\/Data Science in Africa**\n\nThe excerpts below give us a glimpse on the state of AI\/DS in the continent, the range of problems\/challenges AI\/DS can help solve for the continent, the role Africans can play in the industry. Let's briefly look at them and will proceed to the data exploration part. \n\n<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #f8f8ff; padding: 1em; margin:24px;\">\n    \n\"Over the past decade, virtually every university in Europe and North America has responded to the challenges and opportunities of data science by establishing new institutes, departments and degree programs in the field. Academic institutions in Africa have only recently begun to catch up. Some are creating structures, networks and training programs to stimulate research and capacity development in the subject. Examples include the African Center of Excellence in Data Science in Rwanda, the AI & Data Science Research Group at Makerere University in Uganda, Data Science Africa, and the Deep Learning Indaba. But with a time lag of at least half a decade, the question is whether Africa is bound to be trailing behind.\"   \n<\/blockquote>\n\n[Data science institutions focused on Africa are being built across the continent](https:\/\/qz.com\/africa\/1683977\/why-data-science-is-crucial-to-africa-development\/)\n\n<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #f8f8ff; padding: 1em; margin:24px;\">\n    \n\"The rapidly developing set of artificial intelligence (AI) technologies has the potential to solve some of the most pressing challenges that impact Sub-Saharan Africa and drive growth and development in core sectors such as agriculture, healthcare, public services and more. Forward thinking policy-makers, innovative startups, and others are already mobilizing to promote the growth of a vibrant AI ecosystem in Africa.\"    \n\n<\/blockquote>    \n    \n[AI In Africa](https:\/\/info.microsoft.com\/ME-DIGTRNS-WBNR-FY19-11Nov-02-AIinAfrica-MGC0003244_01Registration-ForminBody.htm)\n\n\n<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #f8f8ff; padding: 1em; margin:24px;\">\n    \n\"Research and development of AI and machine learning technologies is growing in African countries. Programmes such as Data Science Africa, Data Science Nigeria, and the Deep Learning Indaba with its satellite IndabaX events, which have so far been held in 27 different African countries, illustrate the interest and human investment in the fields. The potential of AI and related technologies to promote opportunities for growth, development, and democratization in Africa is a key driver of this research. Yet very few African voices have so far been involved in the international ethical frameworks that aim to guide the research. This might not be a problem if the principles and values in those frameworks have universal application. But it\u2019s not clear that they do.\"\n    \n<\/blockquote>\n\n[Why AI needs input from Africans](https:\/\/tribunecontentagency.com\/article\/why-ai-needs-input-from-africans\/)\n\n\n<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #f8f8ff; padding: 1em; margin:24px;\">\n    \n\"In Africa, AI can help with some of the region\u2019s most pervasive problems: from reducing poverty and improving education, to delivering healthcare and eradicating diseases, addressing sustainability challenges \u2014 and from meeting the growing demand for food from fast-growing population to advancing inclusion in societies. AI democratises access to innovative and productivity-boosting technology to fuel the growth the continent needs.\"\n\n<\/blockquote>\n\n[Artificial Intelligence for Africa: An Opportunity for Growth, Development, and Democratisation](https:\/\/www.up.ac.za\/media\/shared\/7\/ZP_Files\/ai-for-africa.zp165664.pdf)\n\n\n\n\nNow let's see what the kaggle DS survey of this year tell us about the African respondents. We will see, among others, the demographic composition, education, jobs\/sectors and experience; technologies and DS\/AI tools they use to tackle the problems the continent is facing which can be solved by data analytics ans AI. The **analysis** by and large will be **descriptive** and will focus on comparing African kagglers (*Africa*) with the rest of the world (*referred as world in the legends of the charts*). \n\n\n\n## **Table of Contents**\n\n1. [How does Africa compares with rest of the world?](#1)\n2. [Which African countries are kaggle-aware?](#2)\n3. [Demography : Age and Gender](#3)\n4. [Education, Jobs and Experience](#4)\n5. [Programming Languages & IDE's](#5)\n6. [Machine Learning: Experience, Framework and Algorithms](#6)\n7. [Computing Resources](#7)\n8. [Employment and role at work](#8)\n9. [Learning Platform and Media](#9)\n10. [Summary](#10)\n11. [Reference](#11)\n\n\n"}}