{"cell_type":{"ada4c89c":"code","37272a1c":"code","5a4afb39":"code","c6695745":"code","a58caf3f":"code","34f5f71a":"code","0dc91aaf":"code","718cc5bb":"code","66559e04":"code","4e9b0159":"code","72009825":"code","a8a9562e":"code","0e8f256f":"code","5840bbfe":"code","1fa65226":"code","fc1f488f":"code","16c287c4":"code","bf932d6c":"code","939da3c7":"code","b32e0d14":"code","987f7675":"code","878bd5bb":"code","fdefaa8b":"code","c7c01379":"code","c0f09354":"code","3dd2d057":"code","e73131ea":"markdown","dd5c837e":"markdown","56d63f16":"markdown","8a559134":"markdown","aa33158c":"markdown","ce8f7c13":"markdown","5930fd91":"markdown","5c08094a":"markdown","20bcb839":"markdown","3e7f7473":"markdown","f4f5bf05":"markdown","cddacfe5":"markdown","61f9e53f":"markdown","deed6c85":"markdown","50d4ed8d":"markdown","99116d25":"markdown"},"source":{"ada4c89c":"# Just as you don't like typing too much, I am also lazy af :), \"as np\" would allow me to use np instead of numpy everytime in rest of the code\n# I recommend you to do so... Its so fun believe me xD\nimport numpy as np","37272a1c":"# Lets initialize an array, keeping it simple\narr = np.array([1,2,3,4])\nprint(arr)\nprint(type(arr))  # type() is an inbuilt function to check type\nprint(\"See I don't lie xD\")\nprint(\"Array initialized, type checked, its numpy's ndarray\")","5a4afb39":"arr2d = np.array([[1.1,2.2,3.3,4.4],[5.5,6.6,7.7,8.8]])\nprint(arr2d)\nprint(type(arr2d))\nprint(\"This one is a 2d array, using float types, saw those extra brackets? Don't forget!!!\")","c6695745":"# Okay let's find out how fare is python and numpy... I wanna know dimension and data types of arrays\nprint(arr.ndim)\nprint(arr2d.ndim)\nprint(arr.dtype)\nprint(arr2d.dtype)\nprint(arr.itemsize)\nprint(arr2d.itemsize) # Bonus - itemsize - size of each time in bytes","a58caf3f":"# Finally lets check size of arr and arr2d and shapes\nprint(arr.size)\nprint(arr2d.size) #count of elements\nprint(arr.shape)\nprint(arr2d.shape) #shape of array in form (n,m)","34f5f71a":"# Lets see something fascinating\n# It is called slicing ;p\n\nprint(arr[2:3])\nprint(arr2d[0:1,2:4])\nprint(\"Well! Well! Can't exlplain all of it.. Refer to documentations! Sorry! :( \")","0dc91aaf":"# Initializing all zeros array\narr01d = np.zeros(5) # you can pass (5,1) if you don't want a rank-1 matrix\narr02d = np.zeros((5,2)) # 5-rows, 2-columns\nprint(arr01d)\nprint(arr02d)","718cc5bb":"# Initializing all ones array\n# So simple, Huh?\narr11d = np.ones(5) # you can pass (5,1) if you don't want a rank-1 matrix\narr12d = np.ones((5,2)) # 5-rows, 2-columns\nprint(arr11d)\nprint(arr12d)","66559e04":"# Okay enough with 1s and 0s, I want my lucky number 7\narr01d = np.full((5,1),7) #5x1 is fine I guess\nprint(arr01d)\nprint(\"Please tell me you can do for 2d and other dimensions yourself!:)\")","4e9b0159":"# Okay here is some fun stuff finally\n# I wanna go random\narr_rand = np.random.rand(4,2)\nprint(arr_rand)\narr_rand = np.random.random_sample(arr12d.shape) # Shape as arr12d\nprint(\"Sampled from previous array\")\nprint(arr_rand)\nprint(\"So fun!!!\")","72009825":"#check It out - Its an identity\nnp.identity(3)","a8a9562e":"# Okay let's see how much you can grasp yourself, tell me what this function does\nnp.repeat(arr_rand, 2, axis=1) # axis=1 is for coulumns and axis=0 is for rows","0e8f256f":"# simply puuting arr1 = arr2 makes arr1 point to arr2 which means all changes are reflected in both\n# Got it? If yes: congratulations, if no, don;t worry we are heer to help\n\narr_copy = arr12d.copy()\nprint(\"This is indeed simple,right?\")\nprint(arr_copy)\nprint(\"And it doesn't have the problem mentioned above\")","5840bbfe":"# Lets define a new array first\narr_bd = np.array([[1,2,3,4],[5,6,7,8]])\nprint(arr_bd)","1fa65226":"# Let's say we want to add 5 to all numbers of array, its way too simple than you would have thought\narr_bd = arr_bd+5\nprint(arr_bd)\nprint(\"Done so quickly with so much ease or as in hindi 'Bade aaram se'!!!xD\")","fc1f488f":"# Same is the case for subtraction, multiply and divide\n# a**2 is exponentiation in python\narr_bd = np.array([[1,2,1,2],[2,3,2,3]])\narr_bd = arr_bd**2\nprint(arr_bd)\nprint(\"Raised to power 2 so proudly :)\")","16c287c4":"# Matrix Multiplication\n\n# Danger Zone again - Beware with matrix dimensions\n\n# I'll d it for 2x2 matrices... I am lazy xD\nmat1 = np.array([[1,2],[3,4]])\nmat2 = np.array([[2,1],[4,3]])\nprint(np.matmul(mat1,mat2))\nprint(\"Yup its correct! I checked it... I am not that lazy too!;)\")","bf932d6c":"# lets find determinant\nprint(np.linalg.det(mat1))","939da3c7":"# Mean, median, sum, min ,max\n# Small things, small space, just python rule :)\nprint(\"Max =\", np.max(mat1))\nprint(\"Min =\", np.min(mat1))\nprint(\"Sum =\",np.sum(mat1))\nprint(\"Mean =\",np.mean(mat1))\nprint(\"This is just a demo you can do all sorts of stuff...Numpy is so powerful\")","b32e0d14":"# Lets define a new array first\narr_new = np.array([[1,2,3,4],[1,2,3,4]])\n# Lets see its dimensions\nprint(arr_new.shape)","987f7675":"# But I want it to be of (4,2)...Numpy says its easy\narr_new.reshape((4,2))","878bd5bb":"# Lets define a new array\narr_cond = np.array([[1,2,3,4,5,6,7,8,9,10]])\nprint(arr_cond)\nprint(arr_cond.shape)","fdefaa8b":"# lets see what we get when we do these things\nprint(arr_cond>=5)\nprint(\"We actually get the boolean mask\")","c7c01379":"# Some more stuff\nprint(arr_cond[arr_cond>5])\nprint(\"Shows elements greater than 5\")","c0f09354":"print(np.any(arr_cond>10,axis=1))\nprint(np.any(arr_cond>8,axis=0)) \n# If any of the element matches the condition, true is returned","3dd2d057":"print(np.all(arr_cond>5,axis=1)) # still produces false because not all elements in the row are greater than 5\nprint(np.all(arr_cond>8,axis=0))\n# If all of the element matches the condition, true is returned","e73131ea":"# Numpy Basics\n\n#### Here is the most fun stuff to learn Numpy!\n#### Believe me as I say, its mostly fun\n###### Documentation:\nhttps:\/\/numpy.org\/doc\/stable\/\n\n#### If you like the notebook please don't forget to hit the upvote button","dd5c837e":"##### Reshaping\n","56d63f16":"##### Me: How do you think an array can be copied to another\n##### You: Simple ,arr1 = arr2\n##### *Results into random garbage*","8a559134":"##### There is so much more to be checked in Linear Algebra... Not all can be explained in such a small notebook, so check it out in documentation","aa33158c":"##### What is this (n,)? Where the hell is m?\nWell, if m=1, numpy doesn't show it. Maybe I don't like it, Numpy do something please :( . It is called rank-1 array","ce8f7c13":"##### If you are planning to learn ML, first step is Numpy, so grab a coffee we are here together to learn this awesome library\n###### Lets start with very basic definitions, don't worry I am bored too, just hang with me we'll get through this together. xD\n* Numpy stands for Numerical Python\n* Numpy is most widely used library for numeric computations\n* Numpy arrays are used to store the data of same type \n* Numpy is highly efficient and fast in computations\n* *ndarray*: n-dimensional array of same type element.\n","5930fd91":"###### Danger Zone Ahead\n","5c08094a":"#### Oh God, I am forgetting something! What? What? What?\n#### Warning: Danger ahead!!! Import Numpy library or else be ready to be blown away","20bcb839":"## Broadcasting","3e7f7473":"##### Bonus = np.hstack(), np.vstack() are some cool functions, check it out in documentation\n\n### Conditions of numpy arrays ","f4f5bf05":"#### Okay, lets begin the fun\n### Initialization, dimensions, shape, etc...","cddacfe5":"## Miscelleneous\n###### I hope I spelled it correct xD!!! I am getting bad at spelling, any advice?","61f9e53f":"#### Broadcasting is one of the most important concept to be understood\nPyhton is so cool in the way it provides broadcasting\nLet's see how?","deed6c85":"### Initialization\n##### What? Again?\n##### No! Not that boring stuff again!","50d4ed8d":"I won't do it but if you are maths lover or more spacifically trignometriy love (like meh :D), there are lot of functions waiting for you!!!\nSee documentaion (link provided at the beginning)","99116d25":"#### So I hope it was fun learning the Numpy.\n#### This is just the basic introduction of most important functions needed in daily practice\n#### If anyone wants to suggest anything please comment\n#### If you like it please hit the upvote button"}}