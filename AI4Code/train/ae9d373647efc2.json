{"cell_type":{"4f640cfb":"code","c103dd0d":"code","f967522e":"code","81e81f54":"code","90dc9005":"code","99cfe62c":"code","7d368a79":"code","a2957aed":"code","a195f186":"code","f63802bd":"code","b3c7ee23":"code","b10928a5":"code","b962c630":"code","7d3f9a1f":"code","ce85d463":"code","27d29439":"code","2dbb3060":"code","776706ed":"code","124001ae":"code","ad9dbb4d":"code","1d89ea4e":"code","b658ce18":"markdown","2afb5b2a":"markdown","d8c0dec6":"markdown","f2dfc428":"markdown","cad09336":"markdown","79913412":"markdown","2bdc812f":"markdown","1ded1021":"markdown"},"source":{"4f640cfb":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\nplt.style.use(\"fivethirtyeight\")\n%matplotlib inline\n\nfrom datetime import datetime\n\nfrom matplotlib import rc,rcParams\n\nrc('text', usetex=False)\nrc('axes', linewidth=2)\nrc('font', weight='bold')\n\nimport json\nimport pickle\nimport warnings\nwarnings.filterwarnings('ignore')","c103dd0d":"from pandas.plotting import lag_plot\nfrom pandas import datetime\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nfrom scipy.stats import norm\nimport statsmodels.api as sm","f967522e":"file = '..\/input\/nifty-filterred\/data_filtered.pkl'\nwith open(file, 'rb') as handle:\n    data_dict = pickle.load(handle)","81e81f54":"data_dict.keys()","90dc9005":"stocks_under_cosideration = ['BAJAJHLDNG', 'CHOLAFIN']","99cfe62c":"data_filtered = {}\nfor stocks in stocks_under_cosideration:\n    data_filtered[stocks] = data_dict[stocks]","7d368a79":"period_start = '2009-01-06'\nperiod_end = '2017-12-31'\nfinal_data = {}\nplt.figure(figsize=(15, 10))\n#plt.subplots_adjust(top=14, bottom=13) \nfor i, company in enumerate(data_filtered.keys(), 1):\n    plt.subplot(2,1, i)\n    plt.tight_layout()\n    data_filtered[company]['nse_closing_price'].loc[period_start:period_end].plot()\n    final_data[company] = data_filtered[company].loc[period_start:period_end]\n    plt.ylabel('Closing price')\n    plt.xlabel(None)\n    plt.xticks(rotation = '45')\n    plt.title(f\"{company}\")\nplt.show()","a2957aed":"bajaj = final_data['BAJAJHLDNG']\ntrain_ratio = 0.9\nbajaj_train, bajaj_test = bajaj[0:int(len(bajaj)*train_ratio)], bajaj[int(len(bajaj)*train_ratio):]","a195f186":"bajaj.head()","f63802bd":"bajaj_test.head()","b3c7ee23":"plt.figure(figsize=(18,10))\nplt.title('BAJAJHLDING')\nplt.xlabel('Dates')\nplt.ylabel('Closing Prices')\nplt.plot(bajaj_train['nse_closing_price'], 'blue', label='Initial Training Data')\nplt.plot(bajaj_test['nse_closing_price'], 'green', label='Inititial Testing Data')\nplt.xticks(np.arange(0,len(bajaj), 300), rotation = 45)\nplt.xlabel(None)\nplt.legend()\nplt.show()","b10928a5":"def smape_kun(y_true, y_pred):\n    return np.mean((np.abs(y_pred - y_true) * 200\/ (np.abs(y_pred) + np.abs(y_true))))","b962c630":"train_ar = bajaj_train['nse_closing_price'].values\ntest_ar = bajaj_test['nse_closing_price'].values\n\nhistory = [x for x in train_ar]\nprint(type(history))\nbajaj_predictions = list()\n\nfor t in range(len(test_ar)):\n    model = ARIMA(history, order=(5,1,0))\n    model_fit = model.fit(disp=0)\n    output = model_fit.forecast()\n    yhat = output[0]\n    bajaj_predictions.append(yhat)\n    obs = test_ar[t]\n    history.append(obs)\n    #print('predicted=%f, expected=%f' % (yhat, obs))\nerror = mean_squared_error(test_ar, bajaj_predictions)\nprint('Testing Mean Squared Error: %.3f' % error)\nerror2 = smape_kun(test_ar, bajaj_predictions)\nprint('Symmetric mean absolute percentage error: %.3f' % error2)","7d3f9a1f":"plt.figure(figsize=(18,10))\nplt.plot(bajaj['nse_closing_price'], 'green', color='blue', label='Training Data')\nplt.plot(bajaj_test.index, bajaj_predictions, color='green', marker='o', linestyle='dashed', \n         label='Predicted Price')\nplt.plot(bajaj_test.index, bajaj_test['nse_closing_price'], color='pink', label='Actual Price')\nplt.title('BAJAJHLDING Prices Prediction')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.xticks(np.arange(0,len(bajaj), 300), rotation = 45)\nplt.legend()","ce85d463":"plt.title('BAJAJHLDING prediction for first 100 days')\nplt.plot(bajaj_test.index[:100], bajaj_predictions[:100], color='green', marker='o', linestyle='dashed', \n         label='Predicted Price')\nplt.plot(bajaj_test.index[:100], bajaj_test['nse_closing_price'].iloc[:100], color='pink', label='Actual Price')\nplt.xticks(np.arange(0,len(bajaj_test.iloc[:100]), 20), rotation = 45)\nplt.legend()\nplt.show()","27d29439":"chola = final_data['CHOLAFIN']\ntrain_ratio = 0.9\nchola_train, chola_test = chola[0:int(len(chola)*train_ratio)], chola[int(len(chola)*train_ratio):]","2dbb3060":"plt.figure(figsize=(18,10))\nplt.title('CHOLAFINA')\nplt.xlabel('Dates')\nplt.ylabel('Closing Prices')\nplt.plot(chola_train['nse_closing_price'], 'blue', label='Initial Training Data')\nplt.plot(chola_test['nse_closing_price'], 'green', label='Initial Testing Data')\nplt.xticks(np.arange(0,len(bajaj), 300), rotation = 45)\nplt.xlabel(None)\nplt.legend()\nplt.show()","776706ed":"chola_train.fillna(method='ffill', inplace = True)","124001ae":"train_ar = chola_train['nse_closing_price'].values\ntest_ar = chola_test['nse_closing_price'].values\n\nhistory = [x for x in train_ar]\nprint(type(history))\nchola_predictions = list()\n\nfor t in range(len(test_ar)):\n    model = ARIMA(history, order=(5,1,0))\n    model_fit = model.fit(disp=0)\n    output = model_fit.forecast()\n    yhat = output[0]\n    chola_predictions.append(yhat)\n    obs = test_ar[t]\n    history.append(obs)\n    #print('predicted=%f, expected=%f' % (yhat, obs))\nerror = mean_squared_error(test_ar, chola_predictions)\nprint('Testing Mean Squared Error: %.3f' % error)\nerror2 = smape_kun(test_ar, chola_predictions)\nprint('Symmetric mean absolute percentage error: %.3f' % error2)\n","ad9dbb4d":"plt.figure(figsize=(18,10))\nplt.plot(chola['nse_closing_price'], 'green', color='blue', label='Training Data')\nplt.plot(chola_test.index, chola_predictions, color='green', marker='o', linestyle='dashed', \n         label='Predicted Price')\nplt.plot(chola_test.index, chola_test['nse_closing_price'], color='pink', label='Actual Price')\nplt.title('CHOLAFIN Prices Prediction')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.xticks(np.arange(0,len(chola), 300), rotation = 45)\nplt.legend()","1d89ea4e":"plt.title('CHOLA prediction for first 100 days')\nplt.plot(chola_test.index[:100], chola_predictions[:100], color='green', marker='o', linestyle='dashed', \n         label='Predicted Price')\nplt.plot(chola_test.index[:100], chola_test['nse_closing_price'].iloc[:100], color='pink', label='Actual Price')\nplt.xticks(np.arange(0,len(chola_test.iloc[:100]), 20), rotation = 45)\nplt.legend()\nplt.show()","b658ce18":"## ARIMA (AutoRegressive Integrated Moving Average) MODEL \n\nThis acronym is descriptive, capturing the key aspects of the model itself. Briefly, they are - \n\n- AR: Autoregression. A model that uses the dependent relationship between an observation and some number of lagged observations.\n- I: Integrated. The use of differencing of raw observations (e.g. subtracting an observation from an observation at the previous time step) in order to make the time series stationary.\n- MA: Moving Average. A model that uses the dependency between an observation and a residual error from a moving average model applied to lagged observations.\n\nThe parameters of the ARIMA model are defined as follows:\n\n- p: The number of lag observations included in the model, also called the lag order.\n- d: The number of times that the raw observations are differenced, also called the degree of differencing.\n- q: The size of the moving average window, also called the order of moving average\n\nWe are using p = 5, d = 1, q = 0","2afb5b2a":"### BAJAJHLDING","d8c0dec6":"**Mean Squared Error for BAJAJHLDNG = 1236.905** <br>\n**Mean Squared Error for CHOLAFIN  = 377.405** <br>\nLet's see if we can improve this by using deep learning techniques like LSTM in the next notebook here - https:\/\/www.kaggle.com\/ashishsinha5\/lstm-model-for-nifty-indices","f2dfc428":"Zero value for any parameter indicates we are not using the parameter. For our model we are using p = 5, d = 1, q = 0. The general formula for ARIMA is as follows -\n$$\n Y_{t} = c + \\phi_{1}Y_{t-1} + ... + \\phi_{p}Y_{t-p} + \\theta_{1}e_{t-1} + ... + \\theta_{q}e_{t-q} + e_{t}\n$$\nWhere -\n- $Y_{t}$ = the variable that will be explained in time $t$.\n- $c$ = constant or intercept.\n- $\\phi$ = coefficient of each parameter $p$.\n- $\\theta$ = coefficient of each parameter $q$.\n- $e_{t}$ = Residuals or error in time $t$.","cad09336":"### CHOLAFIN","79913412":"Since ARIMA is used for short term forecasting, we\u2019ll use rolling forecast method. A rolling forecast is requiredgiven the dependence on observations in prior time steps for differencing and the AR model. A crude way to performthis rolling forecast is to re-create the ARIMA model after each new observation is received. We manually keep track of all observations in a list that is seeded with the training data and to which new observations are appended eachiteration. The visual representation of the method is shown below - ","2bdc812f":"Second notebook in the analysis for Nifty Finantial Services Indices, check out the first notebook here - https:\/\/www.kaggle.com\/ashishsinha5\/eda-of-nifty-financial-services-indices <br>\nTill now we have done some EDA on the Nifty Finantial Services Indices and looked at a case of how stock market prices are affected by the external factors. We now turn towards building a predictive model that will predict the closing price of a particular stock on the nextday given the previous values of stock.<br>\nThe entire code base can be found on my [github](https:\/\/github.com\/AshishSinha5\/nifty_financial_services_eda)","1ded1021":"![arima_method.png](attachment:arima_method.png)"}}