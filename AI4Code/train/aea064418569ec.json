{"cell_type":{"5dc91e1f":"code","d222f9ab":"code","e71eb95c":"code","0ce2ae24":"code","568982e3":"code","2f0b63f5":"code","c12e7439":"code","9510335a":"code","e65185bc":"code","f0835bbe":"code","5025c6be":"code","35b1d5d8":"code","a4ec6e88":"code","ad6fd267":"code","366e51e4":"code","f4c193d8":"code","2c047bfe":"code","405eaaaa":"code","60648265":"code","a4010567":"code","9124fa25":"code","6adb9cef":"code","14c3972b":"code","53c54e1c":"code","0344bb04":"code","adbfd9d0":"code","7a7de62b":"code","1d15a30e":"code","141a52cd":"code","f05bc9e9":"markdown","3f41f176":"markdown","5c4a698f":"markdown","ac6bd5dc":"markdown","1399cc4d":"markdown","6969df20":"markdown","360b39a5":"markdown","ef3f5ac7":"markdown","8fd8f7f8":"markdown"},"source":{"5dc91e1f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","d222f9ab":"df = pd.read_csv('..\/input\/nlp-in-python-1\/04\/spam.tsv', sep='\\t')\ndf.shape","e71eb95c":"df.head()","0ce2ae24":"df['label'].value_counts() # check how many ham\/spam we have","568982e3":"spam = df[df['label'] == 'spam']\nspam.shape","2f0b63f5":"ham = df[df['label'] == 'ham']\nham = ham.sample(spam.shape[0])\nham.shape","c12e7439":"data = ham.append(spam, ignore_index=True) # ignore_index to regenerate indices\ndata.sample(5)","9510335a":"data['label'].value_counts()","e65185bc":"plt.hist(ham['length'], bins=100, alpha=0.75, label=\"Ham\")\nplt.hist(spam['length'], bins=100, alpha=0.75, label=\"Spam\")\n\nplt.legend()\nplt.show()","f0835bbe":"plt.hist(ham['punct'], bins=100, alpha=0.75, label=\"Ham\")\nplt.hist(spam['punct'], bins=100, alpha=0.75, label=\"Spam\")\n\nplt.legend()\nplt.show()","5025c6be":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import accuracy_score, classification_report, plot_confusion_matrix\nfrom sklearn.pipeline import Pipeline","35b1d5d8":"from sklearn.feature_extraction.text import TfidfVectorizer","a4ec6e88":"messages = data['message']\nmessages","ad6fd267":"tfidf = TfidfVectorizer()\nX = tfidf.fit_transform(messages)","366e51e4":"X.shape","f4c193d8":"# random_state - sets the random-seed so it's reproducable\n# stratify - makes sure that the number of labels will be preserved (example 500 spam and 500 ham)\ny = data['label']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0, stratify=y)","2c047bfe":"rf = RandomForestClassifier()","405eaaaa":"rf.fit(X_train, y_train)","60648265":"y_pred = rf.predict(X_test)","a4010567":"plot_confusion_matrix(rf, X_test, y_test)","9124fa25":"print(classification_report(y_test, y_pred))","6adb9cef":"sv = SVC(C=1000, gamma='auto')","14c3972b":"sv.fit(X_train, y_train)","53c54e1c":"y_pred = sv.predict(X_test)","0344bb04":"plot_confusion_matrix(sv, X_test, y_test)","adbfd9d0":"print(classification_report(y_test, y_pred))","7a7de62b":"def predict(x):\n    return sv.predict(tfidf.transform([x]).toarray())","1d15a30e":"predict('Hello there!')","141a52cd":"predict('you have got free tickets to the usa this summer')","f05bc9e9":"# 3 - Exploratory Data Analysis","3f41f176":"# 5 - Creating the first classifier - RF","5c4a698f":"# 2 - Balance the dataset\n\nThe dataset in unbalanced, because we have a lot more 'ham' cases than 'spam'","ac6bd5dc":"# 6 - Testing the classifier","1399cc4d":"# 4 - Prepare Data for Training","6969df20":"If we plot a histogram of the character length, it looks like spam messages have longer character counts.","360b39a5":"That does not seem to be the case with punctuation","ef3f5ac7":"# 1 - Load and Inspect Dataset","8fd8f7f8":"# 5 - Creating the second classifier - SVM"}}