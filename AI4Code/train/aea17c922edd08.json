{"cell_type":{"a6bb3f07":"code","ebcd89a2":"code","6d8cbff1":"code","25990af4":"code","6992a937":"code","1f18263d":"code","214d32a1":"code","22612a07":"code","9e82d628":"code","5cb74d28":"code","de730956":"code","bf5a8be1":"code","96f48f09":"code","93a3d20c":"markdown"},"source":{"a6bb3f07":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import plot_confusion_matrix\n\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ebcd89a2":"# load the dataset\ndf = pd.read_csv('..\/input\/comprehensive-database-of-minerals\/Minerals_Database.csv')\ndf.head()","6d8cbff1":"# filter the dataset for Refractive Index != 0\ndf = df[df['Refractive Index'] != 0]","25990af4":"# size of final dataset\nlen(df)","6992a937":"# check for columns containing all zeros (they will be removed later)\nfeatures_with_all_zeroes = []\n\nfor feature in df.columns:\n    if len(df[feature].unique()) == 1 and df[feature].unique()[0] == 0:\n        features_with_all_zeroes.append(feature)\nprint(features_with_all_zeroes)","1f18263d":"# define selected features for training\nselected_features = np.asarray(df.columns)\n# Remove Unnamed: 0 and Name\nselected_features = selected_features[2:]\n# Remove features with all zeroes previously computed\nfor feature_with_all_zeroes in features_with_all_zeroes:\n    selected_features = np.delete(selected_features, np.argwhere(selected_features==feature_with_all_zeroes), None)\n# now selected features contains only meaningful columns\n    \n# Remove target column\nselected_features = np.delete(selected_features, np.argwhere(selected_features=='Refractive Index'), None)","214d32a1":"# search and remove feature each other correlated\n\ndf_corr = df.corr()\n\ncorrelated_features = set()\n\nfor row_feature in df_corr.index:\n    #skip non meaningfull columns\n    if 'Unnamed' in row_feature or 'Density' in row_feature:\n        continue\n    for col_feature in df_corr.columns:\n        #skip non meaningfull columns\n        if 'Unnamed' in col_feature or 'Density' in col_feature:\n            continue\n        #skip columns against itself\n        if col_feature == row_feature:\n            continue\n        if df_corr[row_feature][col_feature] > 0.85:\n            correlated_features.add(row_feature)\n            #correlated_features.add(col_feature)\nprint(correlated_features)\n\n# remove them from selected features\nfor correlated_feature in correlated_features:\n    selected_features = np.delete(selected_features, np.argwhere(selected_features==correlated_feature), None)\n","22612a07":"# target preparation:\n# create a new category column by dividing the refractive index in several classes: this will be the target of the classifier\n\ndef compute_refr_index_category(ri):\n    if ri >= 0 and ri < 0.5:\n        return 0\n    elif ri >= 0.5 and ri < 1:\n        return 1\n    elif ri >= 1 and ri < 1.5:\n        return 2\n    elif ri >= 1.5 and ri < 2:\n        return 3\n    elif ri >= 2 and ri < 2.5:\n        return 4\n    elif ri >= 2.5 and ri < 3:\n        return 5\n    elif ri >= 3 and ri < 3.5:\n        return 6    \n    \ndf['refractive_index_category'] = df.apply(lambda row : compute_refr_index_category(row['Refractive Index']), axis=1)","9e82d628":"# check how the dataset is distributed vs refractive_index_category\n# see how for classes 1,5,6 the number of samples is very low: the related rows will be removed\n# also, the resulting dataset will be highly unbalanced (2 and 4 categories have much less samples than 3)\n\n# The classification will be done only for categories 2,3,4\ndf.groupby(['refractive_index_category']).count()","5cb74d28":"# remove classes that have only few samples\ndf = df[(df['refractive_index_category'] > 1) & (df['refractive_index_category'] < 5)]","de730956":"# train and classify \n\nX = df[selected_features]\nY = df['refractive_index_category']\n\nX_train, X_test,y_train, y_test = train_test_split(X,Y, test_size=0.3, random_state=0, stratify=Y)\n\nscaler = StandardScaler()\nscaler.fit_transform(X_train)\nscaler.transform(X_test);\n\nclassifier = RandomForestClassifier(n_estimators=20, min_samples_split=9, max_depth=5, class_weight='balanced', random_state=0)\nclassifier.fit(X_train,y_train)\nclassifier.score(X_train,y_train), classifier.score(X_test,y_test)","bf5a8be1":"# confusion matrix on train\nplot_confusion_matrix(classifier, X_train, y_train, cmap=plt.cm.Blues,normalize='true')","96f48f09":"# confusion matrix on test\n\n# see how the classifier has some problems in distinguish between classes 2 and 3\n\nplot_confusion_matrix(classifier, X_test, y_test, cmap=plt.cm.Blues, normalize='true');","93a3d20c":"# Conclusions\n\nThis is just a starting point to evaluate feasibility\n\nPerformances may have been affected by the small size of the dataset (only 588 rows with a valid \"refractive index\" value).\n\nAdding more data on \"refractive index\" column could lead to more interesting results"}}