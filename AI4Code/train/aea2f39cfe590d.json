{"cell_type":{"aa21d8e5":"code","a48e3feb":"code","f82a6dad":"code","0ab1d61b":"code","523de883":"code","d0f83ae3":"code","a83a6702":"code","20ab5773":"code","a35c19c2":"code","26555b1a":"code","76a770ab":"code","a68139b9":"code","74fcba72":"code","42cb4e41":"code","2408c49d":"code","6e3a0aae":"code","bfb46213":"code","51d6555c":"code","b6230819":"code","decb3833":"code","ad75e7af":"code","0b2dedad":"code","2d4eaa31":"code","ddf74372":"code","da7511d9":"code","ffd5e7f4":"code","6e3932af":"code","3176274e":"code","c459ecf5":"code","01ec029d":"code","5a1a8bbd":"code","6a2a3fb5":"code","310227f3":"code","f32651a3":"code","d7dd2d2c":"code","d8c2458c":"code","ac61c2b3":"code","8b6933ba":"markdown","d992bdcf":"markdown","08da6cc2":"markdown","b5479990":"markdown","b57c87f5":"markdown","82ed1281":"markdown","9ced6d1c":"markdown","0eb19ddf":"markdown","ecc2a7ba":"markdown","824f6dc5":"markdown","87c1f5b4":"markdown","e8f79394":"markdown","c79841b8":"markdown"},"source":{"aa21d8e5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error","a48e3feb":"cars = pd.read_csv('..\/input\/vehicle-dataset-from-cardekho\/car data.csv')\ncars","f82a6dad":"sns.pairplot(cars)\nplt.show()","0ab1d61b":"plt.figure(figsize = (20,12))\n\nplt.subplot(2,2,1)\nsns.boxplot(x = 'Fuel_Type', y = 'Selling_Price', data = cars)\n\nplt.subplot(2,2,2)\nsns.boxplot(x = 'Seller_Type', y = 'Selling_Price', data = cars)\n\nplt.subplot(2,2,3)\nsns.boxplot(x = 'Transmission', y = 'Selling_Price', data = cars)\n\nplt.subplot(2,2,4)\nsns.boxplot(x = 'Car_Name', y = 'Selling_Price', data = cars)\nplt.show()","523de883":"cars.info()","d0f83ae3":"cars.describe()","a83a6702":"cars['Car_Name'].value_counts()","20ab5773":"# drop car_name column\ncars_processed = cars.drop('Car_Name',axis = 1)\ncars_processed","a35c19c2":"cars_processed['Year'].value_counts()","26555b1a":"cars_processed['Transmission'].value_counts()","76a770ab":"cars_processed['Fuel_Type'].value_counts()","a68139b9":"cars_processed['Seller_Type'].value_counts()","74fcba72":"#create dummy vars\ndum_vars = ['Fuel_Type','Seller_Type','Transmission']\n\nstatus = pd.get_dummies(cars_processed[dum_vars])\nstatus","42cb4e41":"# removed redundant vars\nstatus = pd.get_dummies(cars_processed[dum_vars], drop_first = True)\nstatus","2408c49d":"# concate dummy vars to dataset\ncars_encoded = pd.concat([cars_processed, status], axis = 1)\ncars_encoded","6e3a0aae":"# remove unnecessary columns\nrm_vars = ['Fuel_Type','Seller_Type','Transmission']\ncars_encoded = cars_encoded.drop(rm_vars, axis = 1)\ncars_encoded","bfb46213":"df_train, df_test = train_test_split(cars_encoded, train_size = 0.7, random_state = 100)\nprint(df_train.shape)\nprint(df_test.shape)","51d6555c":"scaler = MinMaxScaler()\n\n# numeric vars\nnum_vars = ['Year', 'Selling_Price', 'Present_Price', 'Kms_Driven']\n\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])\ndf_train","b6230819":"df_train.describe()","decb3833":"plt.figure(figsize = (20,10))\nsns.heatmap(df_train.corr(), annot = True)\nplt.show()","ad75e7af":"# create X and y\ny_train = df_train.pop('Selling_Price')\nX_train = df_train","0b2dedad":"# adding the constant\nX_train_sm = sm.add_constant(X_train)\n\n# model object\nlr = sm.OLS(y_train, X_train_sm)\n\n# fit the model\nlr_model = lr.fit()\n\n# show summary\nlr_model.summary()","2d4eaa31":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = 'VIF', ascending = False)\nvif","ddf74372":"# rebuild removing fuel_type_petrol\nX = X_train.drop('Fuel_Type_Petrol', axis = 1)\n# adding the constant\nX_train_sm = sm.add_constant(X)\n\n# model object\nlr = sm.OLS(y_train, X_train_sm)\n\n# fit the model\nlr_model = lr.fit()\n\n# show summary\nlr_model.summary()","da7511d9":"vif = pd.DataFrame()\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = 'VIF', ascending = False)\nvif","ffd5e7f4":"# rebuild removing year\nX = X_train.drop('Fuel_Type_Petrol', axis = 1)\n# adding the constant\nX_train_sm = sm.add_constant(X)\n\n# model object\nlr = sm.OLS(y_train, X_train_sm)\n\n# fit the model\nlr_model = lr.fit()\n\n# show summary\nlr_model.summary()","6e3932af":"vif = pd.DataFrame()\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = 'VIF', ascending = False)\nvif","3176274e":"# get predicted values\ny_train_pred = lr_model.predict(X_train_sm)\nres = y_train - y_train_pred\n\nsns.distplot(res)","c459ecf5":"df_test","01ec029d":"# list of numeric vars\nnum_vars = ['Year','Selling_Price','Present_Price','Kms_Driven']\n\n# Rescale data based on train data scaler\ndf_test[num_vars] = scaler.transform(df_test[num_vars])\ndf_test","5a1a8bbd":"df_test.describe()","6a2a3fb5":"# X , y\ny_test = df_test.pop('Selling_Price')\nX_test = df_test","310227f3":"X_test = X_test.drop('Fuel_Type_Petrol', axis = 1)\nX_test_sm = sm.add_constant(X_test)\nX_test_sm","f32651a3":"# predict based on model\ny_test_pred = lr_model.predict(X_test_sm)","d7dd2d2c":"# Check R-Squared\nprint(r2_score(y_true = y_train, y_pred = y_train_pred))\nprint(r2_score(y_true = y_test, y_pred = y_test_pred))","d8c2458c":"# Compute and print RMSE\nrmse = np.sqrt(mean_squared_error(y_test, y_test_pred))","ac61c2b3":"rmse","8b6933ba":"# Import Libraries","d992bdcf":"# Training the Model","08da6cc2":"# Pre Process Data","b5479990":"# Evaluate","b57c87f5":"# Prediction and Evaluation\n- Pre Process Test Set","82ed1281":"# Visualize","9ced6d1c":"Encoding\n1. Fuel_Type: Dummy vars - Petrol, Diesel, CNG\n2. Seller_Type: Dummy vars - Dealer, Individual\n3. Transmission: Dummy vars - Manual, Automatic","0eb19ddf":"\n# Residual Analysis","ecc2a7ba":"# Rescaling the train set","824f6dc5":"# Reading the Data","87c1f5b4":"# Splitting into train and test","e8f79394":"VIF > 10\n - Definitely Remove\n     1. Fuel_Type_Petrol\n     2. Year","c79841b8":"### VIF Calc."}}