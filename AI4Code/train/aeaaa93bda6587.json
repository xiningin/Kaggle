{"cell_type":{"12341d24":"code","28dea4ab":"code","c336d15d":"code","4937d03d":"code","c06720d6":"code","b8a03d8a":"code","c11dbec3":"code","fa1d9231":"code","4b2fe95f":"markdown","4d587bfe":"markdown"},"source":{"12341d24":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport os,glob\nimport matplotlib.pyplot as plt\nfrom joblib import Parallel, delayed","28dea4ab":"paths = glob.glob(\"..\/input\/petfinder-pawpularity-score\/train\/*.jpg\")\nprint(len(paths))\nsize_array = [224,384]\n\nfor size in size_array:\n    os.makedirs(f\"image_size{size}\", exist_ok=True)\n    \ndef make_img(path):\n    id = path.split(\"\/\")[-1].replace(\".jpg\",\"\")\n    img = cv2.imread(path)\n    h,w,c = img.shape\n    \n    for size in size_array:\n        r = size\/max(h,w)\n        saveimg = cv2.resize(img,(int(w*r),int(h*r)))\n        cv2.imwrite(f\"image_size{size}\/{id}.jpg\",saveimg)\n    \nParallel(n_jobs = -1, verbose = 1)(delayed(make_img)(path) for path in paths)       \nfor size in size_array:\n    !zip -qr image_size{size}.zip image_size{size}\n    !rm -r image_size{size}","c336d15d":"# check image information\nmeanl = []\nstdl = []\nhl = []\nwl = []\nsl = []\nrl = []\n\nfor path in paths:\n    img = cv2.imread(path)\n    h,w,c = img.shape\n    hl.append(h)\n    wl.append(w)\n    sl.append(384\/max(h,w))\n    rl.append(min(h,w)\/max(h,w))\n    meanl.append(img.mean())\n    stdl.append(img.std())","4937d03d":"train = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/train.csv\")\ntrain[\"height\"] = hl\ntrain[\"width\"] = wl\ntrain[\"mean\"] = meanl\ntrain[\"std\"] = stdl\ntrain[\"rr\"] = sl\ntrain[\"rhw\"] = rl\ntrain[\"ratio_hw\"] = train[\"height\"]\/train[\"width\"]\ntrain[\"diff_hw\"] = abs(train[\"height\"] - train[\"width\"])\n\ntrain","c06720d6":"train.to_csv(\"train.csv\")","b8a03d8a":"df = pd.read_csv(\"..\/input\/yolopred\/objectdetection.csv\",index_col=0)\ndf2 = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/train.csv\")\ndf[\"area\"] = df[\"h\"]*df[\"w\"]\ndf = df[df.score > 0.8].drop(\"score\",axis=1)\ndf = df[df.Index == 1].drop(\"Index\",axis=1)\ndf = df[df.area > 0.81]\n\ndf[\"xmin\"] = df[\"x\"] - df[\"w\"]\/2\ndf[\"xmax\"] = df[\"x\"] + df[\"w\"]\/2\ndf[\"ymin\"] = df[\"y\"] - df[\"h\"]\/2\ndf[\"ymax\"] = df[\"y\"] + df[\"h\"]\/2\n\ndf = df[df.xmin >=0]\ndf = df[df.ymin >=0]\ndf = df[df.xmax <=1.0]\ndf = df[df.ymax <=1.0]\n\ndf = pd.merge(df,df2[[\"Id\",\"Group\",\"Info\"]],on=[\"Id\"])\ndf = df[df.Info == 0].drop(\"Info\",axis=1)\ndf = df[df.Group == 0].drop(\"Group\",axis=1)\ndf = df[df.label.isin([15,16])].drop(\"label\",axis=1).reset_index(drop=True)\n\ndf","c11dbec3":"train = pd.merge(df2,df[[\"Id\"]],on=[\"Id\"])\ntrain.to_csv(\"train_crop.csv\")","fa1d9231":"size_array = [224,384]\nfor size in size_array:\n    os.makedirs(f\"image_size{size}_crop\", exist_ok=True)\n    \ndef make_cropimg(row):\n    path = f\"..\/input\/petfinder-pawpularity-score\/train\/{row.Id}.jpg\"\n    img = cv2.imread(path)\n    h,w,c = img.shape\n    xmin,xmax,ymin,ymax = int(row.xmin*w),int(row.xmax*w),int(row.ymin*h),int(row.ymax*h)\n    img = img[ymin:ymax,xmin:xmax]\n    h,w,c = img.shape\n    \n    for size in size_array:\n        r = size\/max(h,w)\n        saveimg = cv2.resize(img,(int(w*r),int(h*r)))\n        cv2.imwrite(f\"image_size{size}_crop\/{row.Id}.jpg\",saveimg)\n        \nParallel(n_jobs = -1, verbose = 1)(delayed(make_cropimg)(row) for index,row in df.iterrows())\n\nfor size in size_array:\n    !zip -qr image_size{size}_crop.zip image_size{size}_crop\n    !rm -r image_size{size}_crop","4b2fe95f":"# Cropped dataset","4d587bfe":"# Base"}}