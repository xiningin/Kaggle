{"cell_type":{"ba7d0056":"code","cf1cc3c7":"code","839955c9":"code","80db10bd":"code","a379fbc7":"code","d730a17d":"code","5df19eaf":"code","66a44d95":"code","64a7c744":"code","9f316eb6":"code","6b02f9ea":"code","6fefd9a7":"code","20e0711f":"code","665ba96a":"code","859cac50":"code","d1c291e3":"code","a7e5f1c6":"code","0e8cccc3":"code","2e50a631":"code","0e8dcb74":"code","99bc1a75":"code","a2deeab0":"code","f27570a0":"code","3f42066c":"code","be0bbac3":"code","bd5d2c5b":"code","6a2895f6":"code","80167e2f":"code","ab4eb241":"code","7dede415":"code","aa224bb0":"code","f71aa043":"code","0919c79b":"code","5208a64d":"code","4675c6b7":"code","37ccbacf":"code","830c8f74":"code","8e8d2d1d":"code","54418984":"code","e785bad1":"code","783c905e":"code","b2d5f40e":"code","9e1ed7f4":"code","bfaceb3d":"code","a0aa4d9e":"code","f97a5bb7":"code","8171cbb2":"code","cebd40ea":"code","f35c50ce":"code","ff88cf39":"code","3391743d":"code","d277443e":"code","bd7800a5":"code","1718cbc3":"code","8ed9caf9":"code","136b85bb":"code","970240b6":"code","24d2e740":"code","d62d041b":"code","b5f1e8fb":"code","43e6ec1a":"code","2d09393b":"code","6f8e1401":"code","55c53967":"code","54b818ab":"code","e192dbbc":"code","f3d89ac3":"code","26521040":"code","148b6ca3":"code","ccfca47c":"code","ea9af971":"code","7bb4018f":"code","9552b84a":"code","e976af28":"code","011c5ff9":"code","b215d80e":"code","3fcae4ba":"code","bf3556de":"markdown","1fe1e8dc":"markdown","3bb9b5e3":"markdown","c40f8a10":"markdown","bd27c591":"markdown","ea099277":"markdown","d1c2334f":"markdown","852eac4b":"markdown","2f76abc9":"markdown","bb3f8b22":"markdown","93704771":"markdown","a1726e0a":"markdown","273779fc":"markdown","8eac4eec":"markdown","a9ff9cef":"markdown","9e06d75b":"markdown","4c61ff19":"markdown","25ad1bbd":"markdown","0798706d":"markdown","77784a5b":"markdown","b695e0a2":"markdown","d54dc917":"markdown","ce34b352":"markdown","4577ab67":"markdown","e0a44ef9":"markdown","2efcd6af":"markdown","cb6d64af":"markdown","41122141":"markdown","8de2c3cb":"markdown","e5beb92c":"markdown","36c7b88e":"markdown","e2d8fa50":"markdown","cebd45d3":"markdown","aa066f84":"markdown","82df39c5":"markdown","52c3ddde":"markdown","cad11883":"markdown","653e8e4d":"markdown","d8826cdc":"markdown","95371656":"markdown","001fef54":"markdown","cd180d61":"markdown","56931588":"markdown","a56ba5ee":"markdown","af0bd34d":"markdown","0814ca90":"markdown","6b13be92":"markdown","e505233c":"markdown","49fb66df":"markdown","65100442":"markdown","76d365d6":"markdown","30b34afe":"markdown","76cdc153":"markdown","b78ab4e4":"markdown","b96f7792":"markdown","712c5834":"markdown","8b028acc":"markdown","9350331a":"markdown","6cdbd9a1":"markdown","80cb2b73":"markdown","a0d39f64":"markdown","2a6640cf":"markdown","16434d19":"markdown","52321d9b":"markdown","4533b5a8":"markdown","653dacc7":"markdown","45484251":"markdown","abd361c3":"markdown","171341c7":"markdown","4be5c9eb":"markdown","0ba8257d":"markdown","c3955ea7":"markdown","316bda61":"markdown","f5b7d053":"markdown","268b3ffa":"markdown","bf603bbe":"markdown","9e402fda":"markdown","da96d40b":"markdown","18b851cc":"markdown","a35578a6":"markdown","f7467650":"markdown","c38ecba6":"markdown","12517ac9":"markdown","4e4176d3":"markdown","a5fe5b36":"markdown","04b6c18b":"markdown","e567d1ac":"markdown","0551dcca":"markdown","80083d7e":"markdown","353ce355":"markdown","5cf77d8a":"markdown","47c6ec30":"markdown","d8680150":"markdown","b7ef5d40":"markdown","e20d0446":"markdown","30bd0266":"markdown","7b408692":"markdown","2d65f91d":"markdown","53a074bc":"markdown","7f6da3d6":"markdown","04222754":"markdown","56801bcf":"markdown","3a284446":"markdown","1acc2e0b":"markdown","b4c3091b":"markdown","0e68c3ee":"markdown","5dc9a1eb":"markdown","ac75c9cc":"markdown","7ff30833":"markdown","68e64994":"markdown","ce98b912":"markdown","582f4433":"markdown","3934a4ab":"markdown","c60adfbb":"markdown","fd484476":"markdown","26a0e78d":"markdown","e506f9fc":"markdown"},"source":{"ba7d0056":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n\nfrom sklearn.model_selection import cross_val_score,cross_val_predict, train_test_split\nfrom sklearn.preprocessing import OneHotEncoder,StandardScaler,PowerTransformer,LabelEncoder\n\nfrom sklearn.metrics import accuracy_score,classification_report, recall_score,confusion_matrix, roc_auc_score, precision_score, f1_score, roc_curve, auc, plot_confusion_matrix,plot_roc_curve\n\n\nimport optuna\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\n\n\n\n\n#importing plotly and cufflinks in offline mode\nimport cufflinks as cf\nimport plotly.offline\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\n\n\nimport plotly \nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly.offline import iplot\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\n\nimport shap \n\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","cf1cc3c7":"pd.set_option('max_columns',100)\npd.set_option('max_rows',900)\n\npd.set_option('max_colwidth',200)\n\ndf = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndf.head()","839955c9":"df.duplicated().sum()","80db10bd":"def missing (df):\n    missing_number = df.isnull().sum().sort_values(ascending=False)\n    missing_percent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\n    missing_values = pd.concat([missing_number, missing_percent], axis=1, keys=['Missing_Number', 'Missing_Percent'])\n    return missing_values\n\nmissing(df)","a379fbc7":"df.info()","d730a17d":"df1 = df.drop('customerID',axis=1).copy()","5df19eaf":"df1['TotalCharges'][3826]","66a44d95":"df1.iloc[3826]","64a7c744":"df1['TotalCharges']= df1['TotalCharges'].apply(lambda x: x if x!= ' ' else np.nan).astype(float)","9f316eb6":"def missing (df):\n    missing_number = df.isnull().sum().sort_values(ascending=False)\n    missing_percent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\n    missing_values = pd.concat([missing_number, missing_percent], axis=1, keys=['Missing_Number', 'Missing_Percent'])\n    return missing_values\n\nmissing(df1)","6b02f9ea":"y = df1['Churn']\nprint(f'Percentage of Churn:  {round(y.value_counts(normalize=True)[1]*100,2)} %  --> ({y.value_counts()[1]} customer)\\nPercentage of customer did not churn: {round(y.value_counts(normalize=True)[0]*100,2)}  %  --> ({y.value_counts()[0]} customer)')\n","6fefd9a7":"y.iplot(kind='hist', title= 'Churn')","20e0711f":"le = LabelEncoder()\ndf1['Churn']=le.fit_transform(df1['Churn'])","665ba96a":"numerical= df1.select_dtypes('number').columns\n\ncategorical = df1.select_dtypes('object').columns\n\nprint(f'Numerical Columns:  {df1[numerical].columns}')\nprint('\\n')\nprint(f'Categorical Columns: {df1[categorical].columns}')","859cac50":"df1['tenure']= df1['tenure'].astype(float)\nnumerical= df1.select_dtypes('number').columns\n\ndf1[numerical].describe()","d1c291e3":"df1[['tenure', 'MonthlyCharges', 'TotalCharges']].iplot(kind='histogram',subplots=True,bins=50)","a7e5f1c6":"\nmatrix = np.triu(df1[numerical].corr())\nfig, ax = plt.subplots(figsize=(14,10)) \nsns.heatmap (df1[numerical].corr(), annot=True, fmt= '.2f', vmin=-1, vmax=1, center=0, cmap='coolwarm',mask=matrix, ax=ax);","0e8cccc3":"df1[categorical].nunique()","2e50a631":"for feature in df1[categorical]:\n        print(f'{feature}: {df[feature].unique()}')","0e8dcb74":"print (f'A female customer has a probability of {round(df1[df1[\"gender\"]==\"Female\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A male customer has a probability of {round(df1[df1[\"gender\"]==\"Male\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()","99bc1a75":"fig = px.histogram(df1, x=\"gender\", color=\"Churn\",width=400, height=400)\nfig.show()","a2deeab0":"print (f'A customer with a partner has a probability of {round(df1[df1[\"Partner\"]==\"Yes\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer without any partner has a probability of {round(df1[df1[\"Partner\"]==\"No\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n","f27570a0":"fig = px.histogram(df1, x=\"Partner\", color=\"Churn\",width=400, height=400)\nfig.show()","3f42066c":"print (f'A customer with dependents has a probability of {round(df1[df1[\"Dependents\"]==\"Yes\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer without any dependents has a probability of {round(df1[df1[\"Dependents\"]==\"No\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n","be0bbac3":"fig = px.histogram(df1, x=\"Dependents\", color=\"Churn\",width=400, height=400)\nfig.show()","bd5d2c5b":"print (f'A customer with a phone service has a probability of {round(df1[df1[\"PhoneService\"]==\"Yes\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer without any phone service has a probability of {round(df1[df1[\"PhoneService\"]==\"No\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n","6a2895f6":"fig = px.histogram(df1, x=\"PhoneService\", color=\"Churn\",width=400, height=400)\nfig.show()","80167e2f":"df1['MultipleLines']= df1['MultipleLines'].replace('No phone service','No')","ab4eb241":"print (f'A customer with a multiple lines has a probability of {round(df1[df1[\"MultipleLines\"]==\"Yes\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer without multiple lines has a probability of {round(df1[df1[\"MultipleLines\"]==\"No\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n","7dede415":"fig = px.histogram(df1, x=\"MultipleLines\", color=\"Churn\",width=400, height=400)\nfig.show()","aa224bb0":"print (f'A customer with a Fiber Optic internet service has a probability of {round(df1[df1[\"InternetService\"]==\"Fiber optic\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer with a DSL internet service has a probability of {round(df1[df1[\"InternetService\"]==\"DSL\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer without any internet service has a probability of {round(df1[df1[\"InternetService\"]==\"No\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n","f71aa043":"fig = px.histogram(df1, x=\"InternetService\", color=\"Churn\",width=400, height=400)\nfig.show()","0919c79b":"df1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']]= df1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']].replace('No internet service','No')","5208a64d":"print (f'A customer with a online security has a probability of {round(df1[df1[\"OnlineSecurity\"]==\"Yes\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer without any online security has a probability of {round(df1[df1[\"OnlineSecurity\"]==\"No\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n","4675c6b7":"fig = px.histogram(df1, x=\"OnlineSecurity\", color=\"Churn\",width=400, height=400)\nfig.show()","37ccbacf":"print (f'A customer with a online backup has a probability of {round(df1[df1[\"OnlineBackup\"]==\"Yes\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer without any online backup has a probability of {round(df1[df1[\"OnlineBackup\"]==\"No\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n","830c8f74":"fig = px.histogram(df1, x=\"OnlineBackup\", color=\"Churn\",width=400, height=400)\nfig.show()","8e8d2d1d":"print (f'A customer with a device protection has a probability of {round(df1[df1[\"DeviceProtection\"]==\"Yes\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer without any device protection has a probability of {round(df1[df1[\"DeviceProtection\"]==\"No\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n","54418984":"fig = px.histogram(df1, x=\"DeviceProtection\", color=\"Churn\",width=400, height=400)\nfig.show()","e785bad1":"print (f'A customer with a Tech Support has a probability of {round(df1[df1[\"TechSupport\"]==\"Yes\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer without any Tech Support has a probability of {round(df1[df1[\"TechSupport\"]==\"No\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n","783c905e":"fig = px.histogram(df1, x=\"TechSupport\", color=\"Churn\",width=400, height=400)\nfig.show()","b2d5f40e":"print (f'A customer with a Streaming TV service with the company has a probability of {round(df1[df1[\"StreamingTV\"]==\"Yes\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer without any Streaming TV service with the company has a probability of {round(df1[df1[\"StreamingTV\"]==\"No\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n","9e1ed7f4":"fig = px.histogram(df1, x=\"StreamingTV\", color=\"Churn\",width=400, height=400)\nfig.show()","bfaceb3d":"\nprint (f'A customer with a Streaming movies service with the company has a probability of {round(df1[df1[\"StreamingMovies\"]==\"Yes\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer without any Streaming movies service with the company has a probability of {round(df1[df1[\"StreamingMovies\"]==\"No\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()","a0aa4d9e":"fig = px.histogram(df1, x=\"StreamingMovies\", color=\"Churn\",width=400, height=400)\nfig.show()","f97a5bb7":"\nprint (f'A customer with a Month to month contract has a probability of {round(df1[df1[\"Contract\"]==\"Month-to-month\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer with a Two year contract has a probability of {round(df1[df1[\"Contract\"]==\"Two year\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer with a One year contract has a probability of {round(df1[df1[\"Contract\"]==\"One year\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()","8171cbb2":"fig = px.histogram(df1, x=\"Contract\", color=\"Churn\",width=400, height=400)\nfig.show()","cebd40ea":"\nprint (f'A customer with a Paperless billing  has a probability of {round(df1[df1[\"PaperlessBilling\"]==\"Yes\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer without a Paperless billing has a probability of {round(df1[df1[\"PaperlessBilling\"]==\"No\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n","f35c50ce":"fig = px.histogram(df1, x='PaperlessBilling', color=\"Churn\",width=400, height=400)\nfig.show()","ff88cf39":"\nprint (f'A customer with a Payment method as a Electornic Check has a probability of {round(df1[df1[\"PaymentMethod\"]==\"Electronic check\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer with a Payment method as a Mailed Check has a probability of {round(df1[df1[\"PaymentMethod\"]==\"Mailed check\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer with a Payment method as a Bank transfer (automatic) has a probability of {round(df1[df1[\"PaymentMethod\"]==\"Bank transfer (automatic)\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n\nprint (f'A customer with a Payment method as a Credit card (automatic) has a probability of {round(df1[df1[\"PaymentMethod\"]==\"Credit card (automatic)\"][\"Churn\"].mean()*100,2)} % churn')\n\nprint()\n","3391743d":"fig = px.histogram(df1, x='PaymentMethod', color=\"Churn\",width=400, height=400)\nfig.show()","d277443e":"accuracy= []\nrecall =[]\nroc_auc= []\nprecision = []\n\nmodel_names =[]\n\ndf = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndf1 = df.drop(['customerID','gender','PhoneService'],axis=1).copy()\nle = LabelEncoder()\ndf1['Churn']=le.fit_transform(df1['Churn'])\n\n\ndf1['tenure']= df1['tenure'].astype(float)\ndf1['TotalCharges']= df1['TotalCharges'].apply(lambda x: x if x!= ' ' else np.nan).astype(float)\n\ndf1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']]= df1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']].replace('No internet service','No')\n\n\nX= df1.drop('Churn', axis=1)\ny= df1['Churn']\n\ncategorical_features_indices = np.where(X.dtypes != np.float)[0]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\ncatboost_base = CatBoostClassifier(verbose=False,random_state=0)\n\ncatboost_base.fit(X_train, y_train,cat_features=categorical_features_indices,eval_set=(X_test, y_test))\ny_pred = catboost_base.predict(X_test)\n\naccuracy.append(round(accuracy_score(y_test, y_pred),4))\nrecall.append(round(recall_score(y_test, y_pred),4))\nroc_auc.append(round(roc_auc_score(y_test, y_pred),4))\nprecision.append(round(precision_score(y_test, y_pred),4))\n\nmodel_names = ['Catboost_default']\nresult_df1 = pd.DataFrame({'Accuracy':accuracy,'Recall':recall, 'Roc_Auc':roc_auc, 'Precision':precision}, index=model_names)\nresult_df1","bd7800a5":"fig, ax = plt.subplots(figsize=(8, 8))\nplot_confusion_matrix(catboost_base, X_test, y_test, cmap=plt.cm.Blues, ax=ax);","1718cbc3":"accuracy= []\nrecall =[]\nroc_auc= []\nprecision = []\n\n\ndf = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndf1 = df.drop(['customerID','gender','PhoneService'],axis=1).copy()\nle = LabelEncoder()\ndf1['Churn']=le.fit_transform(df1['Churn'])\n\ndf1['tenure']= df1['tenure'].astype(float)\ndf1['TotalCharges']= df1['TotalCharges'].apply(lambda x: x if x!= ' ' else np.nan).astype(float)\n\ndf1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']]= df1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']].replace('No internet service','No')\n\n\nX= df1.drop('Churn', axis=1)\ny= df1['Churn']\n\ncategorical_features_indices = np.where(X.dtypes != np.float)[0]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\ncatboost = CatBoostClassifier(verbose=False,random_state=0,scale_pos_weight=3)\n\ncatboost.fit(X_train, y_train,cat_features=categorical_features_indices,eval_set=(X_test, y_test))\ny_pred = catboost.predict(X_test)\n\naccuracy.append(round(accuracy_score(y_test, y_pred),4))\nrecall.append(round(recall_score(y_test, y_pred),4))\nroc_auc.append(round(roc_auc_score(y_test, y_pred),4))\nprecision.append(round(precision_score(y_test, y_pred),4))\n\nmodel_names = ['Catboost_adjusted_weight_3']\nresult_df2 = pd.DataFrame({'Accuracy':accuracy,'Recall':recall, 'Roc_Auc':roc_auc, 'Precision':precision}, index=model_names)\nresult_df2","8ed9caf9":"fig, ax = plt.subplots(figsize=(8, 8))\nplot_confusion_matrix(catboost, X_test, y_test, cmap=plt.cm.Blues, ax=ax);","136b85bb":"accuracy= []\nrecall =[]\nroc_auc= []\nprecision = []\n\n\ndf = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndf1 = df.drop(['customerID','gender','PhoneService'],axis=1).copy()\nle = LabelEncoder()\ndf1['Churn']=le.fit_transform(df1['Churn'])\n\ndf1['tenure']= df1['tenure'].astype(float)\ndf1['TotalCharges']= df1['TotalCharges'].apply(lambda x: x if x!= ' ' else np.nan).astype(float)\n\ndf1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']]= df1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']].replace('No internet service','No')\n\n\nX= df1.drop('Churn', axis=1)\ny= df1['Churn']\n\ncategorical_features_indices = np.where(X.dtypes != np.float)[0]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\ncatboost_5 = CatBoostClassifier(verbose=False,random_state=0,scale_pos_weight=5)\n\ncatboost_5.fit(X_train, y_train,cat_features=categorical_features_indices,eval_set=(X_test, y_test))\ny_pred = catboost_5.predict(X_test)\n\naccuracy.append(round(accuracy_score(y_test, y_pred),4))\nrecall.append(round(recall_score(y_test, y_pred),4))\nroc_auc.append(round(roc_auc_score(y_test, y_pred),4))\nprecision.append(round(precision_score(y_test, y_pred),4))\n\nmodel_names = ['Catboost_adjusted_weight_5']\nresult_df3 = pd.DataFrame({'Accuracy':accuracy,'Recall':recall, 'Roc_Auc':roc_auc, 'Precision':precision}, index=model_names)\nresult_df3","970240b6":"fig, ax = plt.subplots(figsize=(8, 8))\nplot_confusion_matrix(catboost_5, X_test, y_test, cmap=plt.cm.Blues, ax=ax);","24d2e740":"explainercat = shap.TreeExplainer(catboost_5)\nshap_values_cat_test = explainercat.shap_values(X_test)\nshap_values_cat_train = explainercat.shap_values(X_train)","d62d041b":"shap.summary_plot(shap_values_cat_train, X_train, plot_type=\"bar\")","b5f1e8fb":"accuracy= []\nrecall =[]\nroc_auc= []\nprecision = []\n\n\ndf = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndf1 = df.drop(['customerID','gender','PhoneService'],axis=1).copy()\nle = LabelEncoder()\ndf1['Churn']=le.fit_transform(df1['Churn'])\n\ndf1['TotalCharges']= df1['TotalCharges'].apply(lambda x: x if x!= ' ' else np.nan).astype(float)\n\ndf1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']]= df1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']].replace('No internet service','No')\n\ndf1= pd.get_dummies(df1)\nX= df1.drop('Churn', axis=1)\ny= df1['Churn']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nxgbc_base = XGBClassifier(random_state=0)\n\nxgbc_base.fit(X_train, y_train)\ny_pred = xgbc_base.predict(X_test)\n\naccuracy.append(round(accuracy_score(y_test, y_pred),4))\nrecall.append(round(recall_score(y_test, y_pred),4))\nroc_auc.append(round(roc_auc_score(y_test, y_pred),4))\nprecision.append(round(precision_score(y_test, y_pred),4))\n\nmodel_names = ['XGBoost_Default']\nresult_df4 = pd.DataFrame({'Accuracy':accuracy,'Recall':recall, 'Roc_Auc':roc_auc, 'Precision':precision}, index=model_names)\nresult_df4","43e6ec1a":"fig, ax = plt.subplots(figsize=(8, 8))\nplot_confusion_matrix(xgbc_base, X_test, y_test, cmap=plt.cm.Blues, ax=ax);","2d09393b":"accuracy= []\nrecall =[]\nroc_auc= []\nprecision = []\n\n\ndf = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndf1 = df.drop(['customerID','gender','PhoneService'],axis=1).copy()\nle = LabelEncoder()\ndf1['Churn']=le.fit_transform(df1['Churn'])\n\ndf1['TotalCharges']= df1['TotalCharges'].apply(lambda x: x if x!= ' ' else np.nan).astype(float)\n\ndf1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']]= df1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']].replace('No internet service','No')\n\ndf1= pd.get_dummies(df1)\nX= df1.drop('Churn', axis=1)\ny= df1['Churn']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nxgbc_3 = XGBClassifier(random_state=0,scale_pos_weight=3)\n\nxgbc_3.fit(X_train, y_train)\ny_pred = xgbc_3.predict(X_test)\n\naccuracy.append(round(accuracy_score(y_test, y_pred),4))\nrecall.append(round(recall_score(y_test, y_pred),4))\nroc_auc.append(round(roc_auc_score(y_test, y_pred),4))\nprecision.append(round(precision_score(y_test, y_pred),4))\n\nmodel_names = ['XGBoost_adjusted_weight_3']\nresult_df5 = pd.DataFrame({'Accuracy':accuracy,'Recall':recall, 'Roc_Auc':roc_auc, 'Precision':precision}, index=model_names)\nresult_df5","6f8e1401":"fig, ax = plt.subplots(figsize=(8, 8))\nplot_confusion_matrix(xgbc_3, X_test, y_test, cmap=plt.cm.Blues, ax=ax);","55c53967":"accuracy= []\nrecall =[]\nroc_auc= []\nprecision = []\n\n\ndf = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndf1 = df.drop(['customerID','gender','PhoneService'],axis=1).copy()\nle = LabelEncoder()\ndf1['Churn']=le.fit_transform(df1['Churn'])\n\ndf1['TotalCharges']= df1['TotalCharges'].apply(lambda x: x if x!= ' ' else np.nan).astype(float)\n\ndf1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']]= df1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']].replace('No internet service','No')\n\ndf1= pd.get_dummies(df1)\nX= df1.drop('Churn', axis=1)\ny= df1['Churn']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nxgbc_5 = XGBClassifier(random_state=0,scale_pos_weight=5)\n\nxgbc_5.fit(X_train, y_train)\ny_pred = xgbc_5.predict(X_test)\n\naccuracy.append(round(accuracy_score(y_test, y_pred),4))\nrecall.append(round(recall_score(y_test, y_pred),4))\nroc_auc.append(round(roc_auc_score(y_test, y_pred),4))\nprecision.append(round(precision_score(y_test, y_pred),4))\n\nmodel_names = ['XGBoost_adjusted_weight_5']\nresult_df6 = pd.DataFrame({'Accuracy':accuracy,'Recall':recall, 'Roc_Auc':roc_auc, 'Precision':precision}, index=model_names)\nresult_df6","54b818ab":"fig, ax = plt.subplots(figsize=(8, 8))\nplot_confusion_matrix(xgbc_5, X_test, y_test, cmap=plt.cm.Blues, ax=ax);","e192dbbc":"explainerxgbc = shap.TreeExplainer(xgbc_5)\nshap_values_XGBoost_test = explainerxgbc.shap_values(X_test)\nshap_values_XGBoost_train = explainerxgbc.shap_values(X_train)","f3d89ac3":"shap.summary_plot(shap_values_XGBoost_train, X_train, plot_type=\"bar\")","26521040":"accuracy= []\nrecall =[]\nroc_auc= []\nprecision = []\n\n\ndf = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndf1 = df.drop(['customerID','gender','PhoneService'],axis=1).copy()\nle = LabelEncoder()\ndf1['Churn']=le.fit_transform(df1['Churn'])\n\ndf1['TotalCharges']= df1['TotalCharges'].apply(lambda x: x if x!= ' ' else np.nan).astype(float)\n\ndf1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']]= df1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']].replace('No internet service','No')\n\ndf1= pd.get_dummies(df1)\nX= df1.drop('Churn', axis=1)\ny= df1['Churn']\n\nfor col in X.columns:\n    col_type = X[col].dtype\n    if col_type == 'object' or col_type.name == 'category':\n        X[col] = X[col].astype('category')\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nlgbmc_base=LGBMClassifier(random_state=0)\n\nlgbmc_base.fit(X_train, y_train,categorical_feature = 'auto',eval_set=(X_test, y_test),feature_name='auto', verbose=0)\n\ny_pred = lgbmc_base.predict(X_test)\n\naccuracy.append(round(accuracy_score(y_test, y_pred),4))\nrecall.append(round(recall_score(y_test, y_pred),4))\nroc_auc.append(round(roc_auc_score(y_test, y_pred),4))\nprecision.append(round(precision_score(y_test, y_pred),4))\n\nmodel_names = ['LightGBM_default']\nresult_df7 = pd.DataFrame({'Accuracy':accuracy,'Recall':recall, 'Roc_Auc':roc_auc, 'Precision':precision}, index=model_names)\nresult_df7","148b6ca3":"fig, ax = plt.subplots(figsize=(8, 8))\nplot_confusion_matrix(lgbmc_base, X_test, y_test, cmap=plt.cm.Blues, ax=ax);","ccfca47c":"accuracy= []\nrecall =[]\nroc_auc= []\nprecision = []\n\n\ndf = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndf1 = df.drop(['customerID','gender','PhoneService'],axis=1).copy()\nle = LabelEncoder()\ndf1['Churn']=le.fit_transform(df1['Churn'])\n\ndf1['TotalCharges']= df1['TotalCharges'].apply(lambda x: x if x!= ' ' else np.nan).astype(float)\n\ndf1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']]= df1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']].replace('No internet service','No')\n\ndf1= pd.get_dummies(df1)\nX= df1.drop('Churn', axis=1)\ny= df1['Churn']\n\nfor col in X.columns:\n    col_type = X[col].dtype\n    if col_type == 'object' or col_type.name == 'category':\n        X[col] = X[col].astype('category')\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nlgbmc_3=LGBMClassifier(random_state=0,scale_pos_weight=3)\n\nlgbmc_3.fit(X_train, y_train,categorical_feature = 'auto',eval_set=(X_test, y_test),feature_name='auto', verbose=0)\n\ny_pred = lgbmc_3.predict(X_test)\n\naccuracy.append(round(accuracy_score(y_test, y_pred),4))\nrecall.append(round(recall_score(y_test, y_pred),4))\nroc_auc.append(round(roc_auc_score(y_test, y_pred),4))\nprecision.append(round(precision_score(y_test, y_pred),4))\n\nmodel_names = ['LightGBM_adjusted_weight_3']\nresult_df8 = pd.DataFrame({'Accuracy':accuracy,'Recall':recall, 'Roc_Auc':roc_auc, 'Precision':precision}, index=model_names)\nresult_df8","ea9af971":"fig, ax = plt.subplots(figsize=(8, 8))\nplot_confusion_matrix(lgbmc_3, X_test, y_test, cmap=plt.cm.Blues, ax=ax);","7bb4018f":"accuracy= []\nrecall =[]\nroc_auc= []\nprecision = []\n\n\ndf = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndf1 = df.drop(['customerID','gender','PhoneService'],axis=1).copy()\nle = LabelEncoder()\ndf1['Churn']=le.fit_transform(df1['Churn'])\n\ndf1['TotalCharges']= df1['TotalCharges'].apply(lambda x: x if x!= ' ' else np.nan).astype(float)\n\ndf1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']]= df1[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']].replace('No internet service','No')\n\ndf1= pd.get_dummies(df1)\nX= df1.drop('Churn', axis=1)\ny= df1['Churn']\n\nfor col in X.columns:\n    col_type = X[col].dtype\n    if col_type == 'object' or col_type.name == 'category':\n        X[col] = X[col].astype('category')\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nlgbmc_5=LGBMClassifier(random_state=0,scale_pos_weight=5)\n\nlgbmc_5.fit(X_train, y_train,categorical_feature = 'auto',eval_set=(X_test, y_test),feature_name='auto', verbose=0)\n\ny_pred = lgbmc_5.predict(X_test)\n\naccuracy.append(round(accuracy_score(y_test, y_pred),4))\nrecall.append(round(recall_score(y_test, y_pred),4))\nroc_auc.append(round(roc_auc_score(y_test, y_pred),4))\nprecision.append(round(precision_score(y_test, y_pred),4))\n\nmodel_names = ['LightGBM_adjusted_weight_5']\nresult_df9 = pd.DataFrame({'Accuracy':accuracy,'Recall':recall, 'Roc_Auc':roc_auc, 'Precision':precision}, index=model_names)\nresult_df9","9552b84a":"fig, ax = plt.subplots(figsize=(8, 8))\nplot_confusion_matrix(lgbmc_5, X_test, y_test, cmap=plt.cm.Blues, ax=ax);","e976af28":"explainerlgbmc = shap.TreeExplainer(lgbmc_5)\nshap_values_LightGBM_test = explainerlgbmc.shap_values(X_test)\nshap_values_LightGBM_train = explainerlgbmc.shap_values(X_train)","011c5ff9":"shap.summary_plot(shap_values_LightGBM_train, X_train, plot_type=\"bar\")","b215d80e":"result_final= pd.concat([result_df1,result_df2,result_df3,result_df4,result_df5,result_df6, result_df7,result_df8,result_df9],axis=0)\nresult_final","3fcae4ba":"result_final.sort_values(by=['Recall'], ascending=True,inplace=True)\nfig = px.bar(result_final, x='Recall', y=result_final.index,title='Model Comparison',height=600,labels={'index':'MODELS'})\nfig.show()","bf3556de":"- By using deafult value of **`scale_pos_weight`**, **CatBoost** correctly predicted **almost half of the churned customer**\n- But model couldn't be able to correctly predict the other half.","1fe1e8dc":"### **Paperless Billing & Churn**","3bb9b5e3":"<a id=\"19\"><\/a>\n<font color=\"Darkblue\" size=+1.5><b>LightGBM (with adjusted Scale_Pos_Weight =5) Deals With Imbalanced Data<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","c40f8a10":"### **Streaming Movies Service and Churn**","bd27c591":"- A customer with a paperless billing with the company almost **2.06 times** more likely to leave the company than a customer without a paperless billing with the company.","ea099277":"- A customer with an online backup service with the company almost **1.35 times** less likely to leave the company than a customer without any online backup service with the company.","d1c2334f":"![](https:\/\/avatars.mds.yandex.net\/get-bunker\/56833\/dba868860690e7fe8b68223bb3b749ed8a36fbce\/orig)","852eac4b":"- With the adjusted **`scale_pos_weight = 5`**, **XGBoost** got **.74 Recall and .75 Roc_Auc**","2f76abc9":"- With the adjusted **`scale_pos_weight = 5`**, **LightGBM** got **.83 Recall and almost .76 Roc_Auc**","bb3f8b22":"<a id=\"5\"><\/a>\n<font color=\"Darkblue\" size=+1.5><b>Categorical Features<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","93704771":"### **Device Protection and Churn**","a1726e0a":"- A customer with an online security service with the company almost **2.14 times** less likely to leave the company than a customer without any online security service with the company.","273779fc":"<a id=\"12\"><\/a>\n<font color=\"Darkblue\" size=+2.5><b>XGBoost<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","8eac4eec":"- By using recommended formula for **`scale_pos_weight`**, **CatBoost** correctly predicted **84% of the churned customers**.\n- As you have seen that, we didn't change any other parameter and get almost 32% lift in our recall score.","a9ff9cef":"- By using recommended formula for **`scale_pos_weight`**, **LightGBM** correctly predicted almost 77% of the churned customer.\n- As you have observed that, we didn't change any other parameter and get almost 23% lift in our recall score without overfitting.\n- We can improve this score without destroying the Roc_Auc.","9e06d75b":"<a id=\"13\"><\/a>\n<font color=\"Darkblue\" size=+1.5><b>XGBoost (with default Parameters) Deals With Imbalanced Data<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","4c61ff19":"### **Streaming TV Service and Churn**","25ad1bbd":"- A customer with a Streaming Movies service with the company almost **1.23 times** more likely to leave the company than a customer without any a Streaming movies service with the company.","0798706d":"- **`Gender`** : There is not much difference between gender on the churn rate. We won't include gender into our model.\n- **`Partner`** :  Customer without any relationship, single customer almost 1.7 times more likely churn than cutomer with a partner.\n- **`Dependents`** : Customer without any dependents, almost 2.03 times more likely churn than cutomer with a dependent.\n- **`Phone Service`**: Churn rate difference between customer has a phone service with the company and customer does not have a home phone service with the company is very small. We won't include phone service into our model.\n- **`Multiple Lines`** : Churn rate difference between customer has a multiple lines phone service with the company and customer does not have a multiple line phone service with the company is very small.\n- **`\u00ecnternet Service`** : Customer with fiber optic internet with the company compare to customer without any internet service with the company 5.66 times more likely to churn.\n- **`Online Security`**: A customer with an online security service with the company almost 2.14 times less likely to leave the company than a customer without any online security service with the company.\n- **`Online Backup`** A customer with an online backup service with the company almost 1.35 times less likely to leave the company than a customer without any online backup service with the company.\n- **`Device Protection`** : A customer with a device protection service with the company almost 1.27 times less likely to leave the company than a customer without any a device protection service with the company.\n- **`Tech Support`** : A customer with a Tech Support service with the company almost 2.06 times less likely to leave the company than a customer without any a Tech Support service with the company.\n- **`Streaming TV Service`** : A customer with a Streaming TV service with the company almost 1.24 times more likely to leave the company than a customer without any a Streaming TV service with the company.\n- **`Streaming Movies Service`** : A customer with a Streaming Movies service with the company almost 1.23 times more likely to leave the company than a customer without any a Streaming movies service with the company.\n- **`Contract Type`** : Great differences based on the contract were seen in the histogram and mean differences.\n    - Customer with the 2 year contract almost 15.1 times less likely to churn compare to customer with a monthly contract.\n    - On the other hand customer with the 1 year contract almost 3.79 times less likely to churn compare to customer with a monthly contract.\n- **`Paperless Billing`** : A customer with a paperless billing with the company almost 2.06 times more likely to leave the company than a customer without a paperless billing with the company.\n- **`Payment Method`** : Almost half of the customers with a payment method as a Electornic Check churn, which is a quite big percentage.\n","77784a5b":"<a id=\"0\"><\/a>\n<font color=\"Darkblue\" size=+2.5><b>Data<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","b695e0a2":"<a id=\"7\"><\/a>\n<font color=\"Darkblue\" size=+2.5><b>How Famous Trio (XGBoost & LightGBM & Catboost) Deal Imbalanced Data?<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","d54dc917":"In this notebook, we have looked in detail at how famous trio (XGBoost & LightGBM & Catboost) handle the imbalanced data.\n\n- We looked at the CatBoost, XGBoost and LightGBM  and showed how they deal with imbalanced data internally.\n- In general, boosting algorithms do good job even on imbalanced data.\n- They produce good results on the imbalanced daata by giving an opportunity to focus more on the minority class and accordingly tune the training algorithm.\n\n- CatBoost, XGBoost and LightGBM use **`scale_pos_weight`** hyperparameter to tune the training algrotih for the imbalanced data.\n\n- **`scale_pos_weight`** is **1** by default. Both major class and minority class get the same weight.\n- When dealing with imbalanced daya, story changes a bit.\n- **`scale_pos_weight`** gets the number of ( total number of examples in the majority class divided by the total number of examples in the minority class.)     \n- By adjusting the weight, minority class got 3 times more impact and 3 times more correction than errors made on the majority class. \n- We also observed that when we changed **`scale_pos_weight`** from **3** to **5** , we have observed significant increase on the **`recall`** score.\n- Two important point, \n    - by changing **`scale_pos_weight`** we observed changes on the **`recall, accuracy, roc-auc, precision score`**\n    - If we use extreme values for the **`scale_pos_weight`**, we can overfit the minority class and model could make worse predictions.\n\n\n- I have to emphasize that it is important to get deep knowledge on the data and problem on the hand. Based on the stakeholder's \/ customer's demand and domain knowledge we can make changes accordingly.","ce34b352":"- By using weight a little bit higher than recommended formula for **`scale_pos_weight = 5`**, **CatBoost** correctly predict almost **92% of the churned customers**.\n- On the other hand we have lost 7% for the precision and 3 points for the Roc_Auc score.","4577ab67":"![](https:\/\/miro.medium.com\/max\/1400\/1*1kjLMDQMufaQoS-nNJfg1Q.png)","e0a44ef9":"<a id=\"15\"><\/a>\n<font color=\"Darkblue\" size=+1.5><b>XGBoost (with adjusted Scale_Pos_Weight = 5) Deals With Imbalanced Data<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","2efcd6af":"![](https:\/\/media.giphy.com\/media\/Q9v2RwHugTfz39afpy\/giphy.gif)","cb6d64af":"- There is not much difference between gender on the churn rate.","41122141":"### **Multiple Lines and Churn**","8de2c3cb":"### **Payment Method & Churn**","e5beb92c":"<a id=\"toc\"><\/a>\n\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" role=\"tab\" aria-controls=\"home\">Table of Contents<\/h3>\n    \n* [Data](#0)\n* [What Problem We Have and Which Metric to Use?](#1)\n\n* [Exploratory Data Analysis](#2)\n    * [Target Variable](#3)\n    * [Numerical Features](#4)\n    * [Categorical Features](#5)\n    * [Overall Insights](#6)\n      \n      \n* [How Famous Trio (XGBoost & LightGBM & Catboost) Deal With Imbalanced Data?](#7) \n\n\n* [CATBOOST](#8)\n    * [CatBoost (with default Parameters) Deals With Imbalanced Data](#9)\n    * [CatBoost (with adjusted Scale_Pos_Weight = 3) Deals With Imbalanced Data](#10)\n    * [CatBoost (with adjusted Scale_Pos_Weight = 5) Deals With Imbalanced Data](#11)\n\n\n* [XGBOOST](#12)    \n    * [XGBoost (with default Parameters) Deals With Imbalanced Data](#13)    \n    * [XGBoost (with adjusted Scale_Pos_Weight) Deals With Imbalanced Data](#14)\n    * [XGBoost (with adjusted Scale_Pos_Weight = 5) Deals With Imbalanced Data](#15)\n\n\n* [LightGBM](#16)\n    * [LightGBM (with default Parameters) Deals With Imbalanced Data](#17)    \n    * [LightGBM (with adjusted Scale_Pos_Weight) Deals With Imbalanced Data](#18)\n    * [LightGBM (with adjusted Scale_Pos_Weight = 5) Deals With Imbalanced Data](#19)\n \n \n* [Final Result Table and Model Comparison](#20)\n\n* [Conclusion](#21)\n\n* [Further Reading](#22)","36c7b88e":"- With the **default parameters, XGBoost** get **.47 Recall and .68 Roc_Auc**.","e2d8fa50":"- Even thoguh data has missing values, models which we will use in this study can handle the missing values internally.","cebd45d3":"<a id=\"20\"><\/a>\n<font color=\"Darkblue\" size=+1.5><b>Final Result Table and Model Comparison<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","aa066f84":"### **Online Backup and Churn**","82df39c5":"- For the sake of showing the power of model with a small increase on the weight, let's see the differences on the Recall score and Roc_Auc.\n- We will increase **`scale_pos_weight`**  from **3** to **5**.\n- Minority class gets 5 times more impact and 5 times more correction than errors made on the majority class. ","52c3ddde":"<a id=\"21\"><\/a>\n<font color=\"Darkblue\" size=+2.5><b>Conclusion<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","cad11883":"<a id=\"1\"><\/a>\n<font color=\"Darkblue\" size=+1.5><b>What Problem We Have and Which Metric to Use?<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","653e8e4d":"<a id=\"22\"><\/a>\n<font color=\"darkblue\" size=+1.5><b>Further Reading<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>\n\n\n[Machine Learning - Beginner &Intermediate-Friendly BOOKS](https:\/\/www.kaggle.com\/general\/255972)\n","d8826cdc":"#### Hi all.  \ud83d\ude4b\n\n#### We continue our **Beginner-Intermediate Friendly Machine Learning series**, which would help anyone who wants to learn or refresh the basics of ML.\n\n#### What we have covered: \n\n#### [Beginner Friendly Detailed Explained EDAs \u2013 For anyone at the beginnings of DS\/ML journey](https:\/\/www.kaggle.com\/general\/253911#1393015) \u2714\ufe0f\n\n#### [BIAS & VARIANCE TRADEOFF](https:\/\/www.kaggle.com\/kaanboke\/ml-basics-bias-variance-tradeoff) \u2714\ufe0f\n\n#### [LINEAR ALGORITHMS](https:\/\/www.kaggle.com\/kaanboke\/ml-basics-linear-algorithms)  \u2714\ufe0f\n\n#### [NONLINEAR ALGORITHMS](https:\/\/www.kaggle.com\/kaanboke\/nonlinear-algorithms)  \u2714\ufe0f\n\n#### [The Most Used Methods to Deal with MISSING VALUES](https:\/\/www.kaggle.com\/kaanboke\/the-most-used-methods-to-deal-with-missing-values)  \u2714\ufe0f\n\n#### [Beginner Friendly End to End ML Project- Classification with Imbalanced Data](https:\/\/www.kaggle.com\/kaanboke\/beginner-friendly-end-to-end-ml-project-enjoy)  \u2714\ufe0f\n\n#### [How to Prevent the Data Leakage ?](https:\/\/www.kaggle.com\/kaanboke\/how-to-prevent-the-data-leakage) \u2714\ufe0f\n\n#### [The Most Common EVALUATION METRICS- A Gentle Intro](https:\/\/www.kaggle.com\/kaanboke\/the-most-common-evaluation-metrics-a-gentle-intro) \u2714\ufe0f\n\n#### [Feature Selection-The Most Common Methods to Know](https:\/\/www.kaggle.com\/kaanboke\/feature-selection-the-most-common-methods-to-know) \u2714\ufe0f\n\n#### [Beginner Friendly End to End ML Project- Car Price Prediction](https:\/\/www.kaggle.com\/kaanboke\/car-price-prediction-beginner-friendly-94-3)  \u2714\ufe0f\n\n#### [Beginner Friendly CATBOOST with OPTUNA](https:\/\/www.kaggle.com\/kaanboke\/beginner-friendly-catboost-with-optuna)  \u2714\ufe0f\n\n#### [A Gentle Intro to PYCARET-Beginner Friendly](https:\/\/www.kaggle.com\/kaanboke\/a-gentle-intro-to-pycaret-beginner-friendly)  \u2714\ufe0f\n\n\n#### In this notebook, we will look in detail at how the famous trio (**XGBoost & LightGBM & Catboost**) handle the imbalanced data.\n\n\n#### **Enjoy** \ud83e\udd18","95371656":"- Almost half of the customers with a payment method as a Electornic Check churn, which is a quite big percentage.","001fef54":"- A customer with a Tech Support service with the company almost **2.06 times** less likely to leave the company than a customer without any a Tech Support service with the company.","cd180d61":"Image Credit: https:\/\/www.questionpro.com","56931588":"- With the adjusted **`scale_pos_weight`**, **LightGBM** got **.77 Recall and .76 Roc_Auc**","a56ba5ee":"<a id=\"2\"><\/a>\n<font color=\"Darkblue\" size=+2.5><b>Exploratory Data Analysis<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","af0bd34d":"## After first sight, what we will do next?\n-  We won't use **`customerID`**, so we will drop it.\n- **`Total charges`** has object type we will change it to float type.\n- **`Tenure`** has integer type we will change it to float type, for catboost model.\n-  We will look at the cardinality of the categorical variables.\n-  We will encode target variable (**`churn`**) to numeric type by using label encoding. ","0814ca90":"- Data does not have a high cardinality or zero variance issues. ","6b13be92":"![](https:\/\/www.questionpro.com\/blog\/wp-content\/uploads\/2018\/02\/Customer-Churn.jpg)","e505233c":"### **Internet Service and Churn**","49fb66df":"<a id=\"6\"><\/a>\n<font color=\"Darkblue\" size=+1.5><b>Overall Insights<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","65100442":"<a id=\"10\"><\/a>\n<font color=\"Darkblue\" size=+1.5><b>CatBoost (with adjusted Scale_Pos_Weight = 3) Deals With Imbalanced Data<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","76d365d6":"![](https:\/\/e7.pngegg.com\/pngimages\/301\/649\/png-clipart-snake-scale-measuring-scales-measurement-scale-light-fixture-measuring-scales-thumbnail.png)","30b34afe":"- Churn rate difference between customer has a multiple lines phone service with the company and customer does not have a multiple line phone service with the company is very small.","76cdc153":"* Based on the matrix, we can observe weak level correlation between the numerical features and the target variable\n* There is strong correlation between tenure and total charges.\n* Being senior citizen and increasing monthly charges have a positive correlation with the churn.\n* Senior citizen more likely churn than younger customers.\n* Customer with higher monthly charges also more likely churn than lesser monthly charges customers.\n* Being long term with the company, customer less likely churn than customer  with lesser time with the company.\n* Total charges has negative correlation with the churn.","b78ab4e4":"- Let's import the libraries","b96f7792":"- Even though we don't see any missing values, when we look at the data, `total charges` feature has missing values.","712c5834":"Image Credit: https:\/\/miro.medium.com\/","8b028acc":"- Bu using deafult value of **`scale_pos_weight`**, **LightGBM** correctly predicted alittle bit more than half of the churned customers. ","9350331a":"- Bu using deafult value of **`scale_pos_weight`**, **XGBoost** correctly predicted **less than half of the churned customers**. ","6cdbd9a1":"Gif Credit: https:\/\/media.giphy.com\/","80cb2b73":"# **Telco Customer Churn**","a0d39f64":"- Customer with fiber optic internet with the company compare to customer without any internet service with the company **5.66 times** more likely to churn.\n- Customer with fiber optic internet with the company compare to customer with DSL internet service with the company almost **2.21 times** more likely to churn.\n- Customer with DSL internet service with the company compare to customer without any internet service with the company **2.56 times** more likley to churn.","2a6640cf":"- Great differences based on the contract were seen in the histogram and mean differences.\n- Customer with the 2 year contract almost **15.1 times** less likely to churn compare to customer with a monthly contract.\n- On the other hand customer with the 1 year contract almost **3.79 times** less likely to churn compare to customer with a monthly contract.","16434d19":"<a id=\"3\"><\/a>\n<font color=\"Darkblue\" size=+1.5><b>Target Variable<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","52321d9b":"### **Data Dictionary**\n\n1. **`CustomerID`**: A unique ID that identifies each customer.\n\n2. **`Gender`**: The customer\u2019s gender: Male, Female\n\n3. **`Age`**: The customer\u2019s current age, in years, at the time the fiscal quarter ended.\n\n4. **`Senior Citizen`**: Indicates if the customer is 65 or older: Yes, No\n\n5. **`Married (Partner)`**: Indicates if the customer is married: Yes, No\n\n6. **`Dependents`**: Indicates if the customer lives with any dependents: Yes, No. Dependents could be children, parents, grandparents, etc.\n\n7. **`Number of Dependents`**: Indicates the number of dependents that live with the customer.\n\n8. **`Phone Service`**: Indicates if the customer subscribes to home phone service with the company: Yes, No\n\n9. **`Multiple Lines`**: Indicates if the customer subscribes to multiple telephone lines with the company: Yes, No\n\n10. **`Internet Service`**: Indicates if the customer subscribes to Internet service with the company: No, DSL, Fiber Optic, Cable.\n\n11. **`Online Security`**: Indicates if the customer subscribes to an additional online security service provided by the company: Yes, No\n\n12. **`Online Backup`**: Indicates if the customer subscribes to an additional online backup service provided by the company: Yes, No\n\n13. **`Device Protection Plan`**: Indicates if the customer subscribes to an additional device protection plan for their Internet equipment provided by the company: Yes, No\n\n14. **`Premium Tech Support`**: Indicates if the customer subscribes to an additional technical support plan from the company with reduced wait times: Yes, No\n\n15. **`Streaming TV`**: Indicates if the customer uses their Internet service to stream television programing from a third party provider: Yes, No. The company does not charge an additional fee for this service.\n\n16. **`Streaming Movies`**: Indicates if the customer uses their Internet service to stream movies from a third party provider: Yes, No. The company does not charge an additional fee for this service.\n\n17. **`Contract`**: Indicates the customer\u2019s current contract type: Month-to-Month, One Year, Two Year.\n\n18. **`Paperless Billing`**: Indicates if the customer has chosen paperless billing: Yes, No\n\n19. **`Payment Method`**: Indicates how the customer pays their bill: Bank Withdrawal, Credit Card, Mailed Check\n\n20. **`Monthly Charge`**: Indicates the customer\u2019s current total monthly charge for all their services from the company.\n\n21. **`Total Charges`**: Indicates the customer\u2019s total charges, calculated to the end of the quarter specified above.\n\n22. **`Tenure`**: Indicates the total amount of months that the customer has been with the company.\n\n23. **`Churn`**: Yes = the customer left the company this quarter. No = the customer remained with the company. Directly related to Churn Value.\n\nReference:\nhttps:\/\/www.kaggle.com\/blastchar\/telco-customer-churn\n\nhttps:\/\/community.ibm.com\/community\/user\/businessanalytics\/blogs\/steven-macko\/2019\/07\/11\/telco-customer-churn-1113\n\n","4533b5a8":"- We have imbalanced data.\n- Almost 27% of the customers didn't continue with the company and churned.\n- 1869 customer churned.\n- Almost 73% of the customers continue with the company and didn't churn.\n- 5174 customer didn't churn.\n","653dacc7":"<a id=\"17\"><\/a>\n<font color=\"Darkblue\" size=+1.5><b>LightGBM (with default Parameters) Deals With Imbalanced Data<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","45484251":"- With the adjusted **`scale_pos_weight=5`**, **CatBoost** got  almost **.92 Recall and .75 Roc_Auc**","abd361c3":"- A customer with a device protection service with the company almost **1.27 times** less likely to leave the company than a customer without any a device protection service with the company.","171341c7":"<a id=\"14\"><\/a>\n<font color=\"Darkblue\" size=+1.5><b>XGBoost (with adjusted Scale_Pos_Weight = 3) Deals With Imbalanced Data<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","4be5c9eb":"<a id=\"4\"><\/a>\n<font color=\"Darkblue\" size=+1.5><b>Numerical Features<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","0ba8257d":"- For further usage, let's get the list of the numerical and categorical features.","c3955ea7":"- Let's see cardinality of the categorical features.","316bda61":"![](https:\/\/media.giphy.com\/media\/EMvZor0TLYdACIug6S\/giphy-downsized-large.gif)","f5b7d053":"Image Credit: https:\/\/e7.pngegg.com","268b3ffa":"- Dataset does not have any duplicated and mising values. But don't be sure, always look deeper.","bf603bbe":"- We can see that **`No internet service`** is repeating several times in the features and in this problem at hand, it gives same meaning as **No**\n- So we can change them to **No** and then features will have two unique values, \n- Also **`MultipleLines`** has **`No phone service`** option, which in this problem gives same meaning as **No** so we can change it to **No** and do the same thing for this feature.\n- Lets'start with the bivariate analysis and on the way we will make the relevant changes.","9e402fda":"- For the sake of showing the power of model with a small increase on the weight, let's see the differences on the Recall score and Roc_Auc.\n- We will increase **`scale_pos_weight`**  from **3** to **5**.\n- Minority class gets 5 times more impact and 5 times more correction than errors made on the majority class. ","da96d40b":"### **Tech Support and Churn**","18b851cc":"Gif Credit: https:\/\/media.giphy.com","a35578a6":"<a id=\"18\"><\/a>\n<font color=\"Darkblue\" size=+1.5><b>LightGBM (with adjusted Scale_Pos_Weight =3) Deals With Imbalanced Data<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","f7467650":"- When we play around a little bit with the value of  **`scale_pos_weight`**, **XGBoost** correctly predicted almost **74% of the churned customers** by using **scale_pos_weight=5** (Roc_Auc = .75)\n","c38ecba6":"<a id=\"11\"><\/a>\n<font color=\"Darkblue\" size=+1.5><b>CatBoost (with adjusted Scale_Pos_Weight = 5) Deals With Imbalanced Data<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","12517ac9":"#### By the way, when you like the topic, you can show it by supporting \ud83d\udc4d\n\n####  **Feel free to leave a comment**. \n\n#### All the best \ud83e\udd18","4e4176d3":"- Churn rate difference between customer has a phone service with the company and customer does not have a home phone service with the company is very small.","a5fe5b36":"Image Credit: https:\/\/repository-images.githubusercontent.com\/64991887\/","04b6c18b":"- For the sake of showing the power of model with a small increase on the weight, let's see the differences on the Recall score and Roc_Auc.\n- We will increase **`scale_pos_weight`**  from **3** to **5**.\n- Minority class gets 5 times more impact and 5 times more correction than errors made on the majority class. ","e567d1ac":"### **Having Partner and Churn**","0551dcca":"- We will make the correct coding to define misisng values.","80083d7e":"- Data coding is always to be examined carefully.\n- When we try to change the datatype of the `Total charges` from object type to float type, we will get error.\n- Let's see what is the reason?","353ce355":"![](https:\/\/repository-images.githubusercontent.com\/64991887\/dc855780-e34b-11ea-9ab8-e08ca33288b0)","5cf77d8a":"- Let's see the unique values of the categorical features.","47c6ec30":"- Bu using recommended adjusted value of **`scale_pos_weight`**, **XGBoost** correctly predicted almost **67% of the churned customers**.","d8680150":"<a id=\"16\"><\/a>\n<font color=\"Darkblue\" size=+2.5><b>LightGBM<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","b7ef5d40":"<a id=\"8\"><\/a>\n<font color=\"Darkblue\" size=+2.5><b>CatBoost<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","e20d0446":"<a id=\"9\"><\/a>\n<font color=\"Darkblue\" size=+1.5><b>CatBoost (with default Parameters) Deals With Imbalanced Data<\/b><\/font>\n\n<a href=\"#toc\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Table of Contents<\/a>","30bd0266":"- With the adjusted **`scale_pos_weight`**, **LightGBM** got almost **.54 Recall and .72 Roc_Auc**","7b408692":"- With the adjusted **`scale_pos_weight=3`**, **CatBoost** got  **.84 Recall and .78 Roc_Auc**","2d65f91d":"## **SHAP Summary Plot - CatBoost (with adjusted Scale_Pos_Weight = 5 )**","53a074bc":"- A customer with a Streaming TV service with the company almost **1.24 times** more likely to leave the company than a customer without any a Streaming TV service with the company.","7f6da3d6":"- Based on the data and data dictionary, We have a classification problem.\n- We wil make classification on the target variable **`Churn`**\n- And we will build a model to get best classification possible on the target variable.\n- For that we will look at the balance of the target variable.\n- As we will see later, our target variable has imblanced data\n- For that reason we are not going to use Accuracy score, \n- Based on the problem on the hand, we will use **`Recall score`**.\n- [For the detailed info about the evaluation metrics](https:\/\/www.kaggle.com\/kaanboke\/the-most-common-evaluation-metrics-a-gentle-intro)","04222754":"- Customer without any relationship, single customer almost 1.7 times more likely churn than cutomer with a partner.","56801bcf":"## **SHAP Summary Plot- LightGBM (with adjusted Scale_Pos_Weight = 5)**","3a284446":"### **Having Dependents and Churn**","1acc2e0b":"### **Gender and Churn**","b4c3091b":"## **SHAP Summary Plot- XGBoost (with adjusted Scale_Pos_Weight = 5)**","0e68c3ee":"### **Contract Type & Churn**","5dc9a1eb":"- By using **`scale_pos_weight =5`**, **LightGBM** correctly predicted **83% of the churned customer**.","ac75c9cc":"- Duplicated and Missing Value check","7ff30833":"### **Phone Service and Churn**","68e64994":"- With the **default parameters, Catboost** get almost**.52 Recall and .72 Roc_Auc**","ce98b912":"- With the adjusted **`scale_pos_weight`**, **XGBoost** got almost **.67 Recall and .73 Roc_Auc**","582f4433":"- In this part, we will look at the CatBoost, XGBoost and LightGBM and will see how they deal imbalanced data internally.\n- In general, boosting algorithms do good job even on imbalanced data.\n- They produce good results on the imbalanced daata by giving an opportunity to focus more on the minority class and accordingly tune the training algorithm.","3934a4ab":"Image Credit: https:\/\/avatars.mds.yandex.net","c60adfbb":"### **Online Security and Churn**","fd484476":"\n- CatBoost, XGBoost and LightGBM use **`scale_pos_weight`** hyperparameter to tune the training algorithm for the imbalanced data.\n\n- **`scale_pos_weight`** is **1** by default.\n\n- Both major class and minority class get the same weight.\n\n- When dealing with imbalanced data, story changes a bit.\n- **`scale_pos_weight`** gets the number of ( total number of examples in the majority class divided by the total number of examples in the minority class.)\n\n- For example, in our data;\n     - Number of Non-churned customer:  5174\n     - Number of Churned customer: 1869\n     -  **`scale_pos_weight`** should get 5174 \/ 1869  which is almost **3**\n     \n- By adjusting the weight, minority class gets 3 times more impact and 3 times more correction than errors made on the majority class. \n\n- Two important point, \n    - by changing **`scale_pos_weight`** we can also see changes on the **`recall, accuracy, roc-auc, precision score`**\n    - If we use extreme values for the **`scale_pos_weight`**, we can overfit the minority class and model could make worse predictions.\n\n","26a0e78d":"- Customer without any dependents, almost 2.03 times more likely churn than cutomer with a dependent.","e506f9fc":"- Let's look at the data."}}