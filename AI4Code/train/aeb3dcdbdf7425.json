{"cell_type":{"75811bf5":"code","775ced16":"code","c4706b11":"code","4f0091a4":"code","3d8fa80c":"code","5667bad0":"code","a5e301c9":"code","708958b4":"code","ef73e350":"code","c64299fe":"code","42bd342e":"markdown","e4b3fcd4":"markdown","e159abed":"markdown","345cdc42":"markdown","4279c4aa":"markdown","c82078c0":"markdown","e128dfc3":"markdown","50d91f70":"markdown","8d6ef6ef":"markdown","d1f47fe4":"markdown","1430bc2e":"markdown"},"source":{"75811bf5":"import os\nimport gc\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn import metrics, preprocessing\nfrom sklearn.preprocessing import OneHotEncoder\n\nimport tensorflow as tf\nfrom keras.layers import Dense, Input\nfrom collections import Counter\nfrom keras.layers import BatchNormalization\nfrom keras.optimizers import Adam\nfrom keras.models import Model, load_model\nfrom keras import callbacks\nfrom keras import backend as K\nfrom keras.layers import Dropout\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","775ced16":"def submit(predictions):\n    submit = pd.read_csv('..\/input\/sample_submission.csv')\n    submit[\"target\"] = predictions\n    submit.to_csv(\"submission.csv\", index=False)\n\ndef fallback_auc(y_true, y_pred):\n    try:\n        return metrics.roc_auc_score(y_true, y_pred)\n    except:\n        return 0.5\n\ndef auc(y_true, y_pred):\n    return tf.py_function(fallback_auc, (y_true, y_pred), tf.double)","c4706b11":"df_tr = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")","4f0091a4":"NFOLDS = 5\nRANDOM_STATE = 42\nnumeric = [c for c in df_tr.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]","3d8fa80c":"len_train = df_tr.shape[0]\ndf_test['target'] = -1\ndata = pd.concat([df_tr, df_test])\ndata['magic_count'] = data.groupby(['wheezy-copper-turtle-magic'])['id'].transform('count')\ndata = pd.concat([data, pd.get_dummies(data['wheezy-copper-turtle-magic'])], axis=1, sort=False)\n\ndf_tr = data[:len_train]\ndf_test = data[len_train:]","5667bad0":"folds = StratifiedKFold(n_splits=NFOLDS, shuffle=True, random_state=RANDOM_STATE)","a5e301c9":"gc.collect()","708958b4":"y = df_tr.target\nids = df_tr.id.values\ntrain = df_tr.drop(['id', 'target'], axis=1)\ntest_ids = df_test.id.values\ntest = df_test[train.columns]\n\noof_preds = np.zeros((len(train)))\ntest_preds = np.zeros((len(test)))\n\nscl = preprocessing.StandardScaler()\nscl.fit(pd.concat([train, test]))\ntrain = scl.transform(train)\ntest = scl.transform(test)","ef73e350":"for fold_, (trn_, val_) in enumerate(folds.split(y, y)):\n    print(\"Current Fold: {}\".format(fold_))\n    trn_x, trn_y = train[trn_, :], y.iloc[trn_]\n    val_x, val_y = train[val_, :], y.iloc[val_]\n\n    inp = Input(shape=(trn_x.shape[1],))\n    x = Dense(2000, activation=\"relu\")(inp)\n    x = BatchNormalization()(x)\n    x = Dropout(0.3)(x)\n    x = Dense(1000, activation=\"relu\")(x)\n    x = BatchNormalization()(x)\n    x = Dropout(0.3)(x)\n    x = Dense(500, activation=\"relu\")(x)\n    x = BatchNormalization()(x)\n    x = Dropout(0.2)(x)\n    x = Dense(100, activation=\"relu\")(x)\n    x = BatchNormalization()(x)\n    x = Dropout(0.2)(x)\n    out = Dense(1, activation=\"sigmoid\")(x)\n    clf = Model(inputs=inp, outputs=out)\n    clf.compile(loss='binary_crossentropy', optimizer='adam', metrics=[auc])\n\n    es = callbacks.EarlyStopping(monitor='val_auc', min_delta=0.001, patience=10,\n                                 verbose=1, mode='max', baseline=None, restore_best_weights=True)\n\n    rlr = callbacks.ReduceLROnPlateau(monitor='val_auc', factor=0.5,\n                                      patience=3, min_lr=1e-6, mode='max', verbose=1)\n\n    clf.fit(trn_x, trn_y, validation_data=(val_x, val_y), callbacks=[es, rlr], epochs=100, batch_size=1024)\n    \n    val_preds = clf.predict(val_x)\n    test_fold_preds = clf.predict(test)\n    \n    print(\"AUC = {}\".format(metrics.roc_auc_score(val_y, val_preds)))\n    oof_preds[val_] = val_preds.ravel()\n    test_preds += test_fold_preds.ravel() \/ NFOLDS\n    \n    K.clear_session()\n    gc.collect()","c64299fe":"submit(test_preds)","42bd342e":"## Thanks @abhishek for his kernel https:\/\/www.kaggle.com\/abhishek\/beating-the-benchmark-neural-network\n## Due to 'wheezy-copper-turtle-magic' is categorical feature, I decided to add one-hot encoding. ","e4b3fcd4":"### Decalare variables","e159abed":"### Preparing data for Neural Network","345cdc42":"#### Clear garbage","4279c4aa":"### One-hot encodings and basic statistic based on categorical column 'wheezy-copper-turtle-magic'","c82078c0":"### Load data","e128dfc3":"### We all waited this moment! Training","50d91f70":"### Make submition","8d6ef6ef":"### Some functions to make life easier","d1f47fe4":"### If you found it usefull, upvote please :) ","1430bc2e":"### Let's make KFold validation with 5 folds"}}