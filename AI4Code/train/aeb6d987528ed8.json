{"cell_type":{"bbd5dd84":"code","bffb09f8":"code","bf41065c":"code","030e60dd":"code","ac00d4e9":"code","ec6830a4":"code","42fd2b2d":"code","f4935dd0":"code","c8aabfea":"code","01feceda":"code","14b4aad7":"code","6f81b8ca":"code","ec3d6e7c":"code","d339e47f":"code","6e73b4bd":"code","41be6e74":"code","06a1d178":"code","9b2225b9":"code","165d68b8":"code","82774931":"markdown","01f724b3":"markdown","4631ced0":"markdown","ca269dca":"markdown","a9655297":"markdown","087332e0":"markdown","30845ffe":"markdown","e051ad3b":"markdown","661d32e6":"markdown","a2a14b34":"markdown","9b172a34":"markdown"},"source":{"bbd5dd84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bffb09f8":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')","bf41065c":"df = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')","030e60dd":"df.head()","ac00d4e9":"df.shape","ec6830a4":"df.isna().sum()","42fd2b2d":"df.duplicated().sum()","f4935dd0":"df.info()","c8aabfea":"df.describe()","01feceda":"class FE:\n    def __init__(self, df):\n        self.df = df\n        \n    def rename_columns(self):\n        self.df.columns = ['Id','Gender', 'Age', 'Income', 'SpendingScore']\n        return self.df\n\n    def convert_income(self):\n        self.df.Income = self.df.Income.apply(lambda x: float(x * 1000))\n        return self.df\n        \n    def convert_gender(self):\n        self.df.Gender.replace({'Male':0, 'Female':1}, inplace=True)\n        return self.df\n        \n    def run_all(self):\n        self.rename_columns()\n        self.convert_income()\n        self.convert_gender()\n        \n        return self.df\n    \nfe = FE(df.copy())\ncleaned_df = fe.run_all()","14b4aad7":"cleaned_df.head()","6f81b8ca":"fig = px.imshow(cleaned_df.drop('Id', axis=1).corr())\nfig.show()","ec3d6e7c":"fig = make_subplots(cols=2, rows=2, subplot_titles=('Gender Distribution', 'Age Distribution', 'Income Distribution', 'SpendingScore Distribution'))\nfig.update_layout(height=800)\n\nfig.add_trace(go.Histogram(x=cleaned_df.Gender), row=1, col=1)\nfig.add_trace(go.Histogram(x=cleaned_df.Age), row=1, col=2)\nfig.add_trace(go.Histogram(x=cleaned_df.Income), row=2, col=1)\nfig.add_trace(go.Histogram(x=cleaned_df.SpendingScore), row=2, col=2)","d339e47f":"fig, axes = plt.subplots(ncols=2, nrows=2, figsize=(23,11))\n\naxes[0,0].pie(cleaned_df.Gender.value_counts().values, labels=cleaned_df.Gender.value_counts().index,\n              startangle=90, shadow=True, explode=(0.1, 0.0), autopct='%1.1f%%')\naxes[0,0].set_title('Gender', fontsize=20)\n\nsns.histplot(ax=axes[0,1], data=cleaned_df, x='Age', hue='Gender', element='step')\naxes[0,1].set_title('Age', fontsize=20)\n\nsns.histplot(ax=axes[1,0], data=cleaned_df, x='Income', hue='Gender', element='step')\naxes[1,0].set_title('Income', fontsize=20)\n\nsns.histplot(ax=axes[1,1], data=cleaned_df, x='SpendingScore', hue='Gender', element='step')\naxes[1,1].set_title('SpendingScore', fontsize=20)\n\n\nplt.tight_layout()","6e73b4bd":"fig, (ax1, ax2) = plt.subplots(ncols=2, nrows=1, figsize=(20, 6))\n\nsns.scatterplot(ax=ax1, data=cleaned_df, x='Age', y='Income', hue='Gender')\nax1.set_title('Age and Income', fontsize=20)\n\nsns.scatterplot(ax=ax2, data=cleaned_df, x='Age', y='SpendingScore', hue='Gender')\nax2.set_title('Age and SpendingScore', fontsize=20)\n\nplt.tight_layout()","41be6e74":"fig = make_subplots(cols=3, rows=1, subplot_titles=('Average Age', 'Average Income', 'Average SpendingScore'))\ngroup_gender = cleaned_df.groupby('Gender')\n\nfig.add_trace(go.Bar(x=group_gender.Age.mean().index, y=group_gender.Age.mean().values), col=1, row=1)\nfig.add_trace(go.Bar(x=group_gender.Income.mean().index, y=group_gender.Income.mean().values), col=2, row=1)\nfig.add_trace(go.Bar(x=group_gender.SpendingScore.mean().index, y=group_gender.SpendingScore.mean().values), col=3, row=1)","06a1d178":"from sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler","9b2225b9":"X1 = cleaned_df[['Age', 'SpendingScore']]\n\ninertia = list()\nfor n in range(1, 11):\n    km = KMeans(n_clusters=n)\n    km.fit(X1)\n    inertia.append(km.inertia_)\n    \n# Clustering -----------------------------\nkm = KMeans(n_clusters=4)\ncluster = km.fit_predict(X1)\n\ncluster_df = X1.copy()\ncluster_df['Cluster'] = ['Cluster ' + str(x) for x in cluster]\n    \n# Plotting -------------------------------\nfig, (ax1, ax2) = plt.subplots(ncols=2, nrows=1, figsize=(14,5))    \n\nsns.lineplot(ax=ax1, x=[i for i in range(1, 11)], y=inertia)\nsns.scatterplot(ax=ax2, data=cluster_df, x='Age', y='SpendingScore', hue='Cluster')\n\nplt.tight_layout()","165d68b8":"X2 = cleaned_df[['Income', 'SpendingScore']]\n\ninertia = list()\nfor n in range(1, 11):\n    km = KMeans(n_clusters=n)\n    km.fit(X2)\n    inertia.append(km.inertia_)\n    \n# Clustering -----------------------------\nkm = KMeans(n_clusters=3)\ncluster = km.fit_predict(X2)\n\ncluster_df = X2.copy()\ncluster_df['Cluster'] = ['Cluster ' + str(x) for x in cluster]\n    \n# Plotting -------------------------------\nfig, (ax1, ax2) = plt.subplots(ncols=2, nrows=1, figsize=(14,5))    \n\nsns.lineplot(ax=ax1, x=[i for i in range(1, 11)], y=inertia)\nsns.scatterplot(ax=ax2, data=cluster_df, x='Income', y='SpendingScore', hue='Cluster')\n\nplt.tight_layout()","82774931":"# **Visualization**","01f724b3":"# **Exploratory Data Analysis**","4631ced0":"# **K-Means Clustering**","ca269dca":"# **Feature Engineering**","a9655297":"### Data Distribution","087332e0":"### Age Relationship with Income and SpendingScore","30845ffe":"### Average Based on Gender","e051ad3b":"### Correlation","661d32e6":"### Data Distribution Based on Gender","a2a14b34":"### Age and SpendingScore Clusters","9b172a34":"### Income and SpendingScore Clusters"}}