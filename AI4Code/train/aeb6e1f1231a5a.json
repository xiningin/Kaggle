{"cell_type":{"d55811c7":"code","3eea8ad8":"code","0152fd69":"code","ce8725b3":"code","4ac3cd80":"code","c45a2d4f":"code","f4108210":"code","b76751f2":"code","5d3cf03a":"code","e4c174f3":"code","319533ba":"code","a0eaff7c":"code","6087d87b":"code","f73ea95f":"code","c8bb26e8":"code","bb79e528":"code","42644de1":"code","21174bdd":"code","8f191467":"code","1b75cb42":"code","4472617f":"code","f8ba8b3a":"code","de4f555e":"code","b5272aa4":"code","7875c2b7":"code","cb5780ba":"code","c7bb3a19":"code","52c60ac1":"code","291a8f51":"code","429c106d":"code","3e4e058e":"code","2debb83a":"code","06a6acbd":"code","75077ae8":"code","e40301ee":"code","81998bf0":"code","4c468472":"code","3eaa63f0":"code","98d0297a":"code","40922b52":"code","832a4b22":"code","75425303":"code","aabd3ff7":"code","b2bfd4ff":"code","b0179358":"code","95972d34":"code","16d331ed":"code","c057c359":"code","4f41fa5e":"code","7925866c":"code","0d611999":"code","6f307e02":"code","1f0e041c":"code","c09ab7a5":"code","7ef8bd35":"code","5a085e19":"code","1160d6f1":"code","c98f1272":"code","c7f15a37":"code","4166d0c7":"code","8ff6bd08":"code","7d2bb875":"code","0cd0ad70":"code","bbcfe936":"code","70126062":"code","6dcd10e2":"code","52ddb73b":"code","7f7e5ac8":"code","af629237":"code","c5369e14":"code","f4de6fc2":"code","f0aa5a36":"code","34fd28a7":"code","b563fe73":"code","6965cc02":"code","da39b931":"code","f65c57af":"code","41425dbf":"code","50d0e435":"code","ed211d51":"code","3c273e71":"code","9c23b346":"code","375b346c":"code","de89fcb7":"code","8faaaeea":"code","d2c7959a":"code","a5964250":"code","89fc22d0":"code","9b059e9d":"code","7df0069e":"code","555a78b5":"code","f7fcd3da":"code","1e0b2cc9":"code","44b380c4":"code","c83befa8":"code","6291bdab":"code","85c71620":"code","1972ee75":"code","9a1753ef":"code","a16a0846":"code","689f47f0":"code","2d7bb9a1":"code","91adba9a":"code","84619668":"code","ec43d9cc":"code","3591db92":"code","583ef763":"code","bf0c1853":"code","f7741f5b":"code","61fdbdd5":"code","3b9e538d":"code","6680e66b":"code","1221f859":"code","918fe47c":"code","1a4f814f":"code","cb6221ed":"code","5e48d0b5":"code","95a9ae9f":"code","65ac1927":"code","e3dd5e7b":"code","1f723eef":"code","3404ac32":"code","a25f3735":"code","d6cbbae5":"code","b802163a":"code","98a348ce":"code","fb85b11c":"code","3790b7d6":"code","61be5be7":"code","d824921d":"code","99681b93":"code","07dfb60d":"code","6541b066":"code","5b850cca":"code","0b039b32":"code","222d4688":"code","225d8bb9":"code","8ccd5254":"code","ced418e6":"code","3a710e5e":"code","41bb7049":"code","73fe1354":"code","1d3a7d7f":"code","3c6c7295":"code","65a314ae":"code","af2f0110":"code","096bdac7":"code","5651bc5c":"code","c9deaa27":"code","550a296f":"code","da446301":"code","af3fa0db":"code","bcb533a9":"code","15996114":"code","7933d771":"code","c7bf419a":"code","607d3062":"code","6017280f":"code","96dcce4b":"code","298f9d3c":"code","786432a8":"code","af252445":"code","606ec5c4":"code","58cd73ca":"code","583ab92e":"code","c224ddff":"code","229a9535":"code","b7fccd3e":"code","d38f7383":"code","4c904abf":"code","502fd83f":"code","0b13b4cf":"code","9d87f8b5":"code","2be8aa4d":"code","d80df265":"code","b0415c15":"code","5de96f44":"code","0cbf3e66":"code","b4e78a8e":"code","bc4f0f98":"code","514ba76f":"code","18b2bc44":"code","91d06366":"code","c42280ca":"code","cf1bb334":"code","fc0e309d":"code","29f411c2":"code","dc18214c":"code","c47b8f97":"code","986a0e06":"code","547221aa":"code","c6bec867":"code","4664b612":"code","5b24ddb8":"code","2699a72d":"code","c3505b34":"code","9d082703":"code","2be3c19c":"code","a811e82e":"code","4c3eba2a":"code","48ea6f67":"markdown","78ec7bef":"markdown","11bf488b":"markdown","52f8d15a":"markdown","f9f4d415":"markdown","2939cade":"markdown","486c8789":"markdown","1b6d2e59":"markdown","a2e98780":"markdown","205b8978":"markdown","a457e15f":"markdown","598bc020":"markdown","b1c020e3":"markdown","c006f375":"markdown","4531cc56":"markdown","1de67569":"markdown","6c3a734b":"markdown","aa95316a":"markdown","289011bc":"markdown","d5ade1a0":"markdown","21e57bfd":"markdown","a7c9027d":"markdown","aed9e75d":"markdown","de6c3e3e":"markdown","a06b030f":"markdown","c9d7b9b8":"markdown","9abc94c7":"markdown","b7c94ac1":"markdown","62f4bb2e":"markdown","ba2054d3":"markdown","9b46af09":"markdown","5b006887":"markdown","17f6323b":"markdown","3fde7972":"markdown","2c49f0bb":"markdown","cd4712c2":"markdown","9f22712b":"markdown","bc27877e":"markdown","e014c89b":"markdown","41af3871":"markdown","2afb4b7c":"markdown","2bb08451":"markdown","3528d118":"markdown","8082312b":"markdown","cae7d756":"markdown","86beaf85":"markdown","e691b8c7":"markdown","85ed9786":"markdown","9f900112":"markdown","1c99fb6d":"markdown","c13252da":"markdown","6a0f3c04":"markdown","556a25af":"markdown","cb416adc":"markdown","ae9b5e87":"markdown","ede7dfc3":"markdown","f28414da":"markdown","a4b8da3f":"markdown","b0f3b9a8":"markdown","65af3d15":"markdown"},"source":{"d55811c7":"# For downloading static plotly graphs\n# import sys\n# !conda install --yes --prefix {sys.prefix} -c plotly plotly-orca \n\n\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nfrom scipy.stats import norm\nimport plotly.express as px\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\nfrom bs4 import BeautifulSoup\nimport requests \nimport folium \nfrom folium import plugins\nimport datetime\nfrom sklearn.preprocessing import OrdinalEncoder\n\n# Predictions\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import ElasticNetCV\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.linear_model import LinearRegression\n\n\nsns.set_style('whitegrid')\n%matplotlib inline\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3eea8ad8":"age_data = pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\nhospital_data = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\nlabs_data = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingLabs.csv')\ncovid_data = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nworld_data = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv')","0152fd69":"locations = {\n    \"Kerala\" : [10.8505,76.2711],\n    \"Maharashtra\" : [19.7515,75.7139],\n    \"Karnataka\": [15.3173,75.7139],\n    \"Telangana\": [18.1124,79.0193],\n    \"Uttar Pradesh\": [26.8467,80.9462],\n    \"Rajasthan\": [27.0238,74.2179],\n    \"Gujarat\":[22.2587,71.1924],\n    \"Delhi\" : [28.7041,77.1025],\n    \"Punjab\":[31.1471,75.3412],\n    \"Tamil Nadu\": [11.1271,78.6569],\n    \"Haryana\": [29.0588,76.0856],\n    \"Madhya Pradesh\":[22.9734,78.6569],\n    \"Jammu and Kashmir\":[33.7782,76.5762],\n    \"Ladakh\": [34.1526,77.5770],\n    \"Andhra Pradesh\":[15.9129,79.7400],\n    \"West Bengal\": [22.9868,87.8550],\n    \"Bihar\": [25.0961,85.3131],\n    \"Chhattisgarh\":[21.2787,81.8661],\n    \"Chandigarh\":[30.7333,76.7794],\n    \"Uttarakhand\":[30.0668,79.0193],\n    \"Himachal Pradesh\":[31.1048,77.1734],\n    \"Goa\": [15.2993,74.1240],\n    \"Odisha\":[20.9517,85.0985],\n    \"Andaman and Nicobar Islands\": [11.7401,92.6586],\n    \"Puducherry\":[11.9416,79.8083],\n    \"Manipur\":[24.6637,93.9063],\n    \"Mizoram\":[23.1645,92.9376],\n    \"Assam\":[26.2006,92.9376],\n    \"Meghalaya\":[25.4670,91.3662],\n    \"Tripura\":[23.9408,91.9882],\n    \"Arunachal Pradesh\":[28.2180,94.7278],\n    \"Jharkhand\" : [23.6102,85.2799],\n    \"Nagaland\": [26.1584,94.5624],\n    \"Sikkim\": [27.5330,88.5122],\n    \"Dadra and Nagar Haveli and Daman and Diu\":[20.1809,73.0169],\n    \"Lakshadweep\":[10.5667,72.6417],\n    \"Daman and Diu\":[20.4283,72.8397] , \n    'State Unassigned':[0,0]\n}","ce8725b3":"india_json = requests.get('https:\/\/api.rootnet.in\/covid19-in\/unofficial\/covid19india.org\/statewise').json()\nloc_india = pd.io.json.json_normalize(india_json['data']['statewise'])\nloc_india = loc_india.set_index(\"state\")\n\nloc_india[\"Lat\"] = \"\"\nloc_india[\"Long\"] = \"\"\nfor index in loc_india.index :\n    loc_india.loc[loc_india.index == index,\"Lat\"] = locations[index][0]\n    loc_india.loc[loc_india.index == index,\"Long\"] = locations[index][1]","4ac3cd80":"# age_data.head(15)","c45a2d4f":"fig = go.Figure(data=[go.Table(\n    header=dict(values=list(age_data.columns),\n                fill_color='lightpink',\n                align='left'),\n    cells=dict(values=[age_data.Sno, age_data.AgeGroup, age_data.TotalCases, age_data.Percentage],\n               fill_color='lightblue',\n               align='left'))\n])\n\nfig.show()","f4108210":"age_data.info()","b76751f2":"# plt.subplots(figsize=(10, 7))\n# ax = sns.barplot(age_data['AgeGroup'], age_data['TotalCases'], palette='spring')\n# ax.set(xlabel='AgeGroup', ylabel='Total Cases')","5d3cf03a":"figure = px.bar(age_data, x=age_data['AgeGroup'], y=age_data['TotalCases'], color='AgeGroup')\nfigure.update_layout(plot_bgcolor='rgb(275, 275, 275)',\n                     showlegend=False)\n# figure.layout.template = 'plotly_dark'\n\nfigure.data[2].marker.line.width = 3\nfigure.data[2].marker.line.color = \"black\"\n\nfigure.show()","e4c174f3":"percent = age_data['Percentage']","319533ba":"percent","a0eaff7c":"for i in range(len(percent)):\n    percent[i] = percent[i][:-1]","6087d87b":"percent","f73ea95f":"percent = percent.astype(float)","c8bb26e8":"percent","bb79e528":"percent = percent.astype(int)","42644de1":"percent","21174bdd":"age_data['Percentage'] = percent","8f191467":"age_data.head(3)","1b75cb42":"fig = go.Figure()\nfig.add_trace(go.Pie(values=age_data['Percentage'], labels=age_data['AgeGroup'], hole=.3, pull=[0, 0, 0.1, 0, 0]))\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(height=700)\n\nfig.data[0].marker.line.width = 3\nfig.data[0].marker.line.color = \"black\"\n\nfig.show()","4472617f":"age_data.info()","f8ba8b3a":"age_data['AgeGroup']","de4f555e":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x=age_data['AgeGroup'],y=age_data['TotalCases'], \n                         line_shape='spline',fill='tonexty')) \n\nfig.update_layout(title=\"Age wise Confirmed Cases in India\",yaxis_title=\"Total Number of cases\",xaxis_title=\"Age Group\")\n\nfig.update_layout(plot_bgcolor='rgb(275, 275, 275)',height=600)\n\nfig.show()","b5272aa4":"age_group = age_data['AgeGroup']","7875c2b7":"k = 1\nfor i in range(len(age_group)):\n    age_group[i] = k\n    k += 1","cb5780ba":"age_group","c7bb3a19":"age_data['AgeGroup'] = age_group.astype(int)","52c60ac1":"age_data.info()","291a8f51":"plt.subplots(figsize=(18,7))\nsns.pointplot(x=age_data['AgeGroup'], y=age_data['Percentage'], color='#EC2566')","429c106d":"my_pic = px.scatter(age_data, x='AgeGroup', y='Percentage', color='AgeGroup', size='Percentage')\nmy_pic","3e4e058e":"# my_pic.write_image('hello.png')","2debb83a":"hospital_data.head(3)","06a6acbd":"hospital_data.columns","75077ae8":"hospital_data.describe()","e40301ee":"hospital_data.info()","81998bf0":"hospital_data.isnull().sum()","4c468472":"hospital_data['NumSubDistrictHospitals_HMIS'].describe()","3eaa63f0":"hospital_data['NumSubDistrictHospitals_HMIS'] = hospital_data['NumSubDistrictHospitals_HMIS'].fillna(0)","98d0297a":"hospital_data['NumSubDistrictHospitals_HMIS'].head(10)","40922b52":"hospital_data['NumSubDistrictHospitals_HMIS'] = hospital_data['NumSubDistrictHospitals_HMIS'].astype(int)","832a4b22":"hospital_data['NumSubDistrictHospitals_HMIS'].head()","75425303":"hospital_data['NumPrimaryHealthCenters_HMIS']","aabd3ff7":"hospital_data['NumPrimaryHealthCenters_HMIS'].iloc[36]","b2bfd4ff":"hospital_data['NumPrimaryHealthCenters_HMIS'].iloc[36] = '29899'","b0179358":"hospital_data['NumPrimaryHealthCenters_HMIS'] = hospital_data['NumPrimaryHealthCenters_HMIS'].astype(int)","95972d34":"hospital_data['NumPrimaryHealthCenters_HMIS']","16d331ed":"hospital_data.info()","c057c359":"num_cols = [col for col in hospital_data.columns\n           if hospital_data[col].dtype!='object' and col != 'Sno']","4f41fa5e":"num_cols","7925866c":"fig = plt.figure(figsize=(20, 50))\nfor i in range(len(num_cols)):\n    fig.add_subplot(9, 2, i+1)\n    sns.barplot(x=hospital_data['State\/UT'], y=hospital_data[num_cols[i]], palette='spring')\n    plt.xticks(rotation=90)\n\nplt.tight_layout()\nplt.show()","0d611999":"hospital_data['State\/UT'].iloc[36]","6f307e02":"# plt.subplots(figsize=(15, 7))\n# fig = sns.barplot(x=hospital_data['State\/UT'].iloc[:36], \n#                       y=hospital_data['NumPublicBeds_HMIS'].iloc[:36], \n#                       palette='spring')\n# plt.xticks(rotation=90)\n# fig","1f0e041c":"fig = px.bar(hospital_data, \n             x=hospital_data['State\/UT'].iloc[:36], \n             y=hospital_data['NumPublicBeds_HMIS'].iloc[:36], \n             color=hospital_data['NumPublicBeds_HMIS'].iloc[:36])\n\nfig.update_layout(title={\n        'text': \"Num of Public Beds in Each State\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n        xaxis_title=\"State\/UT\",\n        yaxis_title=\"Number of Public Beds\",\n        plot_bgcolor='white')","c09ab7a5":"hospital_data[['State\/UT', 'NumPublicBeds_HMIS']].groupby(['State\/UT']).mean().sort_values(by='NumPublicBeds_HMIS', ascending=False)","7ef8bd35":"fig = px.bar(hospital_data, \n             x=hospital_data['State\/UT'].iloc[:36], \n             y=hospital_data['TotalPublicHealthFacilities_HMIS'].iloc[:36], \n             color=hospital_data['TotalPublicHealthFacilities_HMIS'].iloc[:36])\n\nfig.update_layout(title={\n        'text': \"Num of Public Health Facilities in Each State\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n        xaxis_title=\"State\/UT\",\n        yaxis_title=\"Number of Public Health Facilities\",\n        plot_bgcolor='white')","5a085e19":"hs_public = hospital_data[['State\/UT', 'TotalPublicHealthFacilities_HMIS']].groupby(['State\/UT']).mean().sort_values(by='TotalPublicHealthFacilities_HMIS', ascending=False)\nhs_public","1160d6f1":"fig = px.scatter_3d(hospital_data, x=hospital_data['State\/UT'], \n                    y=hospital_data['NumPublicBeds_HMIS'], \n                    z=hospital_data['NumPrimaryHealthCenters_HMIS'],\n                    color='State\/UT')\nfig.update_layout(scene_zaxis_type=\"log\", showlegend=False, height=600)\nfig.show()","c98f1272":"labs_data.head(3)","c7f15a37":"labs_data.info()","4166d0c7":"labs_data['state'].value_counts()\n","8ff6bd08":"# Uncomment for side-by-side view (plotly subplots)\n\n# fig = make_subplots(rows=1, cols=2,\n#                specs=[[{\"type\": \"pie\"},{\"type\": \"bar\"}]])\n# fig.add_trace(\n#     go.Pie(labels=labs_data['state'].sort_values().unique(), values=labs_data['state'].value_counts().sort_index()),\n#     row=1, col=1\n# )\n# fig.add_trace(\n#     go.Bar(x=labs_data['state'].sort_values().unique(), y=labs_data['state'].value_counts().sort_index()),\n#     row=1, col=2\n# )\n# fig.update_layout(height=800, width=1400, title_text=\"Number of Labs in Each State\")\n# fig.show()","7d2bb875":"fig1 = px.bar(labs_data,x=labs_data['state'].sort_values().unique(), \n              y=labs_data['state'].value_counts().sort_index(),\n              text=labs_data['state'].value_counts().sort_index(),\n              color=labs_data['state'].sort_values().unique())\nfig1.update_layout(title={\n        'text': \"Number of Labs in Each State\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n        xaxis_title=\"\",\n        yaxis_title=\"Number of Labs\",\n        showlegend=False,\n        plot_bgcolor='white'\n        )\nfig1.data[19].marker.line.width = 3\nfig1.data[19].marker.line.color = \"black\"\n\n# -----------------------------------------------------------\n\nfig2 = px.pie(labs_data, \n              'state',\n              hole=.5\n             )\nfig2.update_traces(textposition='inside', textinfo='percent+label')\nfig2.update_layout(title={\n                        'text': \"Percentage of Labs in Each State of India\",\n                        'y':0.95,\n                        'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'},\n                         showlegend=False,\n                         height=600\n                        )\n\nfig2.data[0].marker.line.width = 2\nfig2.data[0].marker.line.color = \"black\"\n\n\nfig1.show()\nfig2.show()","0cd0ad70":"labs_data['type'].unique()","bbcfe936":"lab_type = labs_data[['type', 'state']].groupby(['type', 'state']).sum()\ndisplay(lab_type)","70126062":"# state_list = list(labs_data['state'].unique())\n# lab_type = list(labs_data['type'].unique())","6dcd10e2":"fig = px.sunburst(labs_data, path=['type', 'state'], height=700)\nfig.update_layout(title={\n        'text': \"Classification based on Type of Labs\",\n        'y':0.98,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n         showlegend=False         \n                  )\nfig.show()","52ddb73b":"covid_data.head(3)","7f7e5ac8":"covid_data.info()","af629237":"date_data = covid_data[['State\/UnionTerritory',\"Date\",\"Confirmed\",\"Deaths\",\"Cured\"]]\ndate_data['Date'] = date_data['Date'].apply(pd.to_datetime, dayfirst=True)\n\ndate_data = date_data.groupby(['Date']).sum().reset_index()","c5369e14":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x=date_data['Date'], \n                         y=date_data['Confirmed'], mode='lines+markers', \n                          marker_color='mediumslateblue', name='Confirmed Cases'))\n\nfig.add_trace(go.Scatter(x=date_data['Date'], \n                         y=date_data['Cured'], mode='lines+markers', \n                          marker_color='green', name='Recovered'))\n\nfig.add_trace(go.Scatter(x=date_data['Date'], \n                         y=date_data['Deaths'], mode='lines+markers', \n                          marker_color='red', name='Deaths'))\nfig.update_layout(title={\n                  'text': \"Total Confirmed, Recovered and Deaths in India\",\n                  'y':0.98,\n                  'x':0.5,\n                  'xanchor': 'center',\n                  'yanchor': 'top'},\n                  plot_bgcolor='rgb(275, 275, 275)', \n                  height=650)\n\nfig.show()","f4de6fc2":"state_cases = covid_data.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\n\n# Creating new columns 'Active', 'Death rate per 100' and 'Cure rate per 100'\nstate_cases['Active'] = state_cases['Confirmed'] - (state_cases['Cured'] + state_cases['Deaths'])\nstate_cases['Death rate per 100'] = np.round((100*state_cases[\"Deaths\"]\/state_cases[\"Confirmed\"]), 2)\nstate_cases['Cure rate per 100'] = np.round((100*state_cases[\"Cured\"]\/state_cases[\"Confirmed\"]), 2)","f0aa5a36":"state_cases = state_cases.sort_values(by='Confirmed', ascending=False)\nstate_cases.style.bar(color='#FDD017',subset=[\"Confirmed\"])\\\n                        .bar(color='red',subset=[\"Deaths\"])\\\n                        .bar(color='lime',subset=[\"Cured\"])\\\n                        .bar(color='mediumslateblue', subset=[\"Active\"])\\\n                        .bar(color='pink', subset=[\"Death rate per 100\"])\\\n                        .bar(color='lightgreen', subset=[\"Cure rate per 100\"])","34fd28a7":"state_cases.to_csv('State_Cases.csv')","b563fe73":"state_cases = state_cases.sort_values(by='Confirmed', ascending=True)\n\nfig = go.Figure(data=[go.Bar(name='Confirmed', x = state_cases['Confirmed'], \n                             y = state_cases['State\/UnionTerritory'],\n                             orientation='h',marker_color='#5642C5'),\n                      go.Bar(name='Cured', x=state_cases['Cured'], \n                             y=state_cases['State\/UnionTerritory'],\n                             orientation='h', marker_color='#00974E'),\n                      go.Bar(name='Deaths', x=state_cases['Deaths'],\n                             y=state_cases['State\/UnionTerritory'],\n                             orientation='h', marker_color='#EC2566')\n                     ])\n\nfig.update_layout(plot_bgcolor='white', \n                  barmode='stack', height=900)\nfig.show()","6965cc02":"fig = px.scatter(state_cases, y='State\/UnionTerritory', x='Death rate per 100', color='State\/UnionTerritory', size='Death rate per 100')\nfig.update_layout(title={\n                  'text': \"Death rate per 100 in each state\",\n                  'y':0.98,\n                  'x':0.5,\n                  'xanchor': 'center',\n                  'yanchor': 'top'},\n                  plot_bgcolor='rgb(275, 275, 275)', \n                  height=650,\n                  showlegend=False)","da39b931":"fig = px.scatter(state_cases, y='State\/UnionTerritory', x='Cure rate per 100', color='State\/UnionTerritory', size='Cure rate per 100')\nfig.update_layout(title={\n                  'text': \"Cure rate per 100 in each state\",\n                  'y':0.98,\n                  'x':0.5,\n                  'xanchor': 'center',\n                  'yanchor': 'top'},\n                  plot_bgcolor='rgb(275, 275, 275)', \n                  height=650,\n                  showlegend=False)","f65c57af":"from folium.plugins import HeatMap, HeatMapWithTime\n\ncovid_area = folium.Map(location=[20.5937, 78.9629], zoom_start=15,max_zoom=4,min_zoom=3,\n                          tiles='CartoDB positron',height = 500,width = '70%')\n\nHeatMap(data=loc_india[['Lat','Long','confirmed']].groupby(['Lat','Long']).sum().reset_index().values.tolist(),\n        radius=18, max_zoom=14).add_to(covid_area)\n\ncovid_area","41425dbf":"world_data.head()","50d0e435":"world_data['Date'] = world_data['Date'].apply(pd.to_datetime, dayfirst=True)","ed211d51":"world_data['Date'] = world_data['Date'].dt.strftime('%Y\/%m\/%d')","3c273e71":"country_cases = world_data.groupby('Country\/Region')['Confirmed','Deaths','Recovered', 'Active'].max().reset_index()\ncountry_cases = country_cases.sort_values(by='Confirmed', ascending=False)\ncountry_cases = country_cases.iloc[:40]\ncountry_cases.style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Blues', subset=[\"Active\"])\\","9c23b346":"country_cases.to_csv('Country_Cases.csv')","375b346c":"fig = px.scatter(world_data, 'Confirmed', 'Country\/Region', color='Country\/Region', size='Confirmed')\nfig.update_layout(showlegend=False, plot_bgcolor='white')\nfig.show()","de89fcb7":"fig = px.scatter_3d(world_data, 'Country\/Region', 'Date', 'Confirmed', size='Confirmed', color='Country\/Region')\nfig.update_layout(showlegend=False,\n                  height=800)\nfig.show()","8faaaeea":"df_country = world_data\nanime_graph_data = df_country[(df_country['Country\/Region']=='India') | (df_country['Country\/Region']=='US') | (df_country['Country\/Region']=='Brazil')| (df_country['Country\/Region']=='Russia') | (df_country['Country\/Region']=='United Kingdom') | (df_country['Country\/Region']=='Spain') | (df_country['Country\/Region']=='Italy') | (df_country['Country\/Region']=='Peru') | (df_country['Country\/Region']=='Iran') | (df_country['Country\/Region']=='Germany')]\n","d2c7959a":"fig = px.bar(anime_graph_data, x=\"Country\/Region\", y=\"Confirmed\",color='Country\/Region',animation_frame = 'Date')\nfig.update_layout(xaxis={'categoryorder':'total descending'})\nfig.update_layout(title='Top 10 countries Confirmed cases')\nfig.update_layout(showlegend=False, height=600, plot_bgcolor='white')\n\nfig.show()","a5964250":"india_data = world_data[world_data[\"Country\/Region\"]==\"India\"]\nindia_data.head()","89fc22d0":"pred_data = india_data.groupby('Date')[['Confirmed', 'Recovered', 'Deaths']].sum().reset_index()\n\npred_data['Date'] = pred_data['Date'].apply(pd.to_datetime, dayfirst=True)","9b059e9d":"pred_confirm = pred_data.loc[:, ['Date', 'Confirmed']]\npred_confirm.tail()","7df0069e":"model = Prophet()","555a78b5":"# Dataframe must have columns \"ds\" and \"y\" with the dates and values respectively for prophet prediction\npred_confirm.columns = ['ds', 'y']\nmodel.fit(pred_confirm)","f7fcd3da":"future = model.make_future_dataframe(periods=90)\nfuture.tail()","1e0b2cc9":"forecast_india_conf = model.predict(future)\n\nforecast_india_conf","44b380c4":"forecast_india_conf[['ds', 'trend']].to_csv('forecast_confirm_india.csv')","c83befa8":"fig = plot_plotly(model, forecast_india_conf)\n\nfig.update_layout(template='plotly_white', title=\"Confirmed Cases India Prediction\")\n\niplot(fig) ","6291bdab":"fig = model.plot(forecast_india_conf)","85c71620":"fig = model.plot_components(forecast_india_conf)","1972ee75":"cnfrm = forecast_india_conf.loc[:,['ds','trend']]\ncnfrm = cnfrm[cnfrm['trend']>0]\ncnfrm.columns = ['Date','Confirm']\ncnfrm.tail(15)","9a1753ef":"pred_recover = pred_data.loc[:, ['Date', 'Recovered']]","a16a0846":"pred_recover.tail()","689f47f0":"model = Prophet()\n\n# Dataframe must have columns \"ds\" and \"y\" with the dates and values respectively for prophet prediction\npred_recover.columns = ['ds', 'y']\nmodel.fit(pred_recover)","2d7bb9a1":"future = model.make_future_dataframe(periods=90)\nfuture.tail()","91adba9a":"forecast_india_recover = model.predict(future)\n\nforecast_india_recover","84619668":"forecast_india_recover.to_csv('forecast_recovered_india.csv')","ec43d9cc":"fig = plot_plotly(model, forecast_india_recover)\n\nfig.update_layout(template='plotly_white', title=\"Total Recovered Cases India Prediction\")\n\niplot(fig) ","3591db92":"# fig = px.scatter(forecast_india_recover, forecast.ds, forecast.trend)\n# fig.show()","583ef763":"fig = model.plot_components(forecast_india_recover)","bf0c1853":"pred_deaths = pred_data.loc[:, ['Date', 'Deaths']]\npred_deaths.tail(3)","f7741f5b":"model = Prophet()\n\n# Dataframe must have columns \"ds\" and \"y\" with the dates and values respectively for prophet prediction\npred_deaths.columns = ['ds', 'y']\nmodel.fit(pred_deaths)","61fdbdd5":"future = model.make_future_dataframe(periods=90)\nfuture.tail()","3b9e538d":"forecast_india_death = model.predict(future)\n\nforecast_india_death","6680e66b":"forecast_india_death.to_csv('forecast_deaths_india.csv')","1221f859":"fig = plot_plotly(model, forecast_india_death)\n\nfig.update_layout(template='plotly_white', title=\"Total Deaths in India Prediction\")\n\niplot(fig) ","918fe47c":"fig = model.plot_components(forecast_india_death)","1a4f814f":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x=forecast_india_conf['ds'], \n                         y=forecast_india_conf['trend'], mode='lines+markers', \n                          marker_color='mediumslateblue', name='Predicted Confirm'))\n\nfig.add_trace(go.Scatter(x=forecast_india_recover['ds'], \n                         y=forecast_india_recover['trend'], mode='lines+markers', \n                          marker_color='green', name='Predicted Recovered'))\n\nfig.add_trace(go.Scatter(x=forecast_india_death['ds'], \n                         y=forecast_india_death['trend'], mode='lines+markers', \n                          marker_color='red', name='Predicted Deaths'))\nfig.update_layout(title={\n                  'text': \"Predicted Confirmed, Recovered and Deaths in India\",\n                  'y':0.98,\n                  'x':0.5,\n                  'xanchor': 'center',\n                  'yanchor': 'top'},\n                  plot_bgcolor='rgb(275, 275, 275)', \n                  height=650,\n                  template='plotly_white')\n\nfig.show()","cb6221ed":"world_data.head(3)","5e48d0b5":"world_pred = world_data.groupby('Date')[['Confirmed', 'Deaths', 'Recovered', 'Active']].sum().reset_index()\n\ndisplay(world_pred.head(3))\ndisplay(world_pred.tail(3))","95a9ae9f":"world_pred_conf = world_pred.loc[:, ['Date', 'Confirmed']]\nworld_pred_conf.tail(3)","65ac1927":"model = Prophet()\n\n# Dataframe must have columns \"ds\" and \"y\" with the dates and values respectively for prophet prediction\nworld_pred_conf.columns = ['ds', 'y']\nmodel.fit(world_pred_conf)","e3dd5e7b":"future = model.make_future_dataframe(periods=90)\nfuture.tail()","1f723eef":"forecast_world_conf = model.predict(future)\n\nforecast_world_conf","3404ac32":"forecast_world_conf[['ds', 'trend']].to_csv('forecast_world_conf.csv')","a25f3735":"fig = plot_plotly(model, forecast_world_conf)\n\nfig.update_layout(template='plotly_white')\n\niplot(fig) ","d6cbbae5":"fig = model.plot_components(forecast_world_conf)","b802163a":"world_pred_recover = world_pred.loc[:, ['Date', 'Recovered']]\nworld_pred_recover.tail(3)","98a348ce":"model = Prophet()\n\n# Dataframe must have columns \"ds\" and \"y\" with the dates and values respectively for prophet prediction\nworld_pred_recover.columns = ['ds', 'y']\nmodel.fit(world_pred_recover)","fb85b11c":"future = model.make_future_dataframe(periods=90)\nfuture.tail()","3790b7d6":"forecast_world_recover = model.predict(future)\n\nforecast_world_recover","61be5be7":"fig = plot_plotly(model, forecast_world_recover)\n\nfig.update_layout(template='plotly_white')\n\niplot(fig) ","d824921d":"fig = model.plot_components(forecast_world_recover)","99681b93":"world_pred_death = world_pred.loc[:, ['Date', 'Deaths']]\nworld_pred_death.tail(3)","07dfb60d":"model = Prophet()\n\n# Dataframe must have columns \"ds\" and \"y\" with the dates and values respectively for prophet prediction\nworld_pred_death.columns = ['ds', 'y']\nmodel.fit(world_pred_death)","6541b066":"future = model.make_future_dataframe(periods=90)\nfuture.tail()","5b850cca":"forecast_world_death = model.predict(future)\n\nforecast_world_death","0b039b32":"fig = plot_plotly(model, forecast_world_death)\n\nfig.update_layout(template='plotly_white')\n\niplot(fig) ","222d4688":"fig = model.plot_components(forecast_world_death)","225d8bb9":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x=forecast_world_conf['ds'], \n                         y=forecast_world_conf['trend'], mode='lines+markers', \n                          marker_color='mediumslateblue', name='Predicted Confirm'))\n\nfig.add_trace(go.Scatter(x=forecast_world_recover['ds'], \n                         y=forecast_world_recover['trend'], mode='lines+markers', \n                          marker_color='green', name='Predicted Recovered'))\n\nfig.add_trace(go.Scatter(x=forecast_world_death['ds'], \n                         y=forecast_world_death['trend'], mode='lines+markers', \n                          marker_color='red', name='Predicted Deaths'))\nfig.update_layout(title={\n                  'text': \"Predicted Confirmed, Recovered and Deaths in World\",\n                  'y':0.98,\n                  'x':0.5,\n                  'xanchor': 'center',\n                  'yanchor': 'top'},\n                  plot_bgcolor='rgb(275, 275, 275)', \n                  height=650,\n                  template='plotly_white')\n\nfig.show()","8ccd5254":"pred_data = india_data.groupby('Date')[['Confirmed', 'Recovered', 'Deaths']].sum().reset_index()\n\npred_data['Active'] = pred_data['Confirmed'] - (pred_data['Deaths'] + pred_data['Recovered'])\n\npred_data['Date'] = pred_data['Date'].apply(pd.to_datetime, dayfirst=True)","ced418e6":"pred_data.sample(frac=0.1)","3a710e5e":"pred_data.tail()","41bb7049":"india_conf = pred_data[['Date', 'Confirmed']].copy()","73fe1354":"india_conf.info()","1d3a7d7f":"arima = ARIMA(india_conf['Confirmed'], order=(5, 1, 0))\narima = arima.fit(trend='c', full_output=True, disp=True)\nforecast = arima.forecast(steps= 90)\npred_ar_conf = list(forecast[0])","3c6c7295":"arima.plot_predict(1,200)","65a314ae":"start_date = india_conf['Date'].max()\nprediction_dates = []\n\nfor i in range(90):\n    date = start_date + datetime.timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date","af2f0110":"arima_conf_pred = pd.DataFrame({'Date':prediction_dates, 'Trend':pred_ar_conf})\narima_conf_pred.to_csv('arima_confirm_pred.csv')","096bdac7":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(y= pred_ar_conf, \n                         x= prediction_dates, \n                         mode='lines+markers', \n                         marker_color='red', name='Predicted Confirmed'))\n\nfig.add_trace(go.Scatter(y=india_conf['Confirmed'],x=india_conf['Date'], mode='lines+markers', \n                          marker_color='mediumslateblue', name='Actual Confirmed'))\n\n\nfig.update_layout(title={\n                  'text': \"Actual Confirmed vs Predicted Confirmed in India (ARIMA)\",\n                  'y':0.98,\n                  'x':0.5,\n                  'xanchor': 'center',\n                  'yanchor': 'top'},\n                  plot_bgcolor='rgb(275, 275, 275)', \n                  template='plotly_white')\n\nfig.show()","5651bc5c":"india_rec = pred_data[['Date', 'Recovered']].copy()","c9deaa27":"arima = ARIMA(india_rec['Recovered'], order=(5, 1, 0))\narima = arima.fit(trend='c', full_output=True, disp=True)\nforecast = arima.forecast(steps= 90)\npred = list(forecast[0])","550a296f":"arima.plot_predict(1,200)","da446301":"start_date = india_rec['Date'].max()\nprediction_dates = []\n\nfor i in range(90):\n    date = start_date + datetime.timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date","af3fa0db":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(y= pred, \n                         x= prediction_dates, \n                         mode='lines+markers', \n                         marker_color='mediumslateblue', name='Predicted Recovered'))\n\nfig.add_trace(go.Scatter(y=india_rec['Recovered'],x=india_rec['Date'], mode='lines+markers', \n                          marker_color='green', name='Actual Recovered'))\n\n\nfig.update_layout(title={\n                  'text': \"Actual Recovered vs Predicted Recovered in India (ARIMA)\",\n                  'y':0.98,\n                  'x':0.5,\n                  'xanchor': 'center',\n                  'yanchor': 'top'},\n                  plot_bgcolor='rgb(275, 275, 275)', \n                  template='plotly_white')\n\nfig.show()","bcb533a9":"india_deaths = pred_data[['Date', 'Deaths']].copy()","15996114":"arima = ARIMA(india_deaths['Deaths'], order=(5, 1, 0))\narima = arima.fit(trend='c', full_output=True, disp=True)\nforecast = arima.forecast(steps= 90)\npred = list(forecast[0])","7933d771":"arima.plot_predict(1,200)","c7bf419a":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(y= pred, \n                         x= prediction_dates, \n                         mode='lines+markers', \n                         marker_color='red', name='Predicted Deaths'))\n\nfig.add_trace(go.Scatter(y=india_deaths['Deaths'],x=india_deaths['Date'], mode='lines+markers', \n                          marker_color='mediumslateblue', name='Actual Deaths'))\n\n\nfig.update_layout(title={\n                  'text': \"Actual Deaths vs Predicted Deaths in India (ARIMA)\",\n                  'y':0.98,\n                  'x':0.5,\n                  'xanchor': 'center',\n                  'yanchor': 'top'},\n                  plot_bgcolor='rgb(275, 275, 275)', \n                  template='plotly_white')\n\nfig.show()","607d3062":"india_active = pred_data[['Date', 'Active']].copy()","6017280f":"arima = ARIMA(india_active['Active'], order=(5, 1, 0))\narima = arima.fit(trend='c', full_output=True, disp=True)\nforecast = arima.forecast(steps= 90)\npred = list(forecast[0])","96dcce4b":"arima.plot_predict(1,200)","298f9d3c":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(y= pred, \n                         x= prediction_dates, \n                         mode='lines+markers', \n                         marker_color='red', name='Predicted Active Cases'))\n\nfig.add_trace(go.Scatter(y=india_active['Active'],x=india_active['Date'], mode='lines+markers', \n                          marker_color='mediumslateblue', name='Actual Active Cases'))\n\n\nfig.update_layout(title={\n                  'text': \"Actual Active Cases vs Predicted Active Cases in India (ARIMA)\",\n                  'y':0.98,\n                  'x':0.5,\n                  'xanchor': 'center',\n                  'yanchor': 'top'},\n                  plot_bgcolor='rgb(275, 275, 275)', \n                  template='plotly_white')\n\nfig.show()","786432a8":"pred_data['day'] = pred_data['Date'].dt.day\npred_data['month'] = pred_data['Date'].dt.month\npred_data['dayofyear'] = pred_data['Date'].dt.dayofyear\npred_data['dayofweek'] = pred_data['Date'].dt.dayofweek\npred_data['weekofyear'] = pred_data['Date'].dt.weekofyear","af252445":"pred_data.tail()","606ec5c4":"pred_data['Date'].tail()","58cd73ca":"my_pred = pred_data.copy()","583ab92e":"my_pred.tail()","c224ddff":"del my_pred['Date']","229a9535":"my_pred.columns","b7fccd3e":"train_my_pred = my_pred[['day', 'month',\n       'dayofyear', 'dayofweek', 'weekofyear']]\ntarget_conf = my_pred['Confirmed']","d38f7383":"future = future[future['ds'] > '2020-07-18']\n\nfuture.ds","4c904abf":"future['day'] = future['ds'].dt.day\nfuture['month'] = future['ds'].dt.month\nfuture['dayofyear'] = future['ds'].dt.dayofyear\nfuture['dayofweek'] = future['ds'].dt.dayofweek\nfuture['weekofyear'] = future['ds'].dt.weekofyear","502fd83f":"future.head()","0b13b4cf":"future_dates =  future['ds']\ndel future['ds']","9d87f8b5":"lr = LinearRegression()","2be8aa4d":"lr.fit(train_my_pred, target_conf)","d80df265":"lr_preds = lr.predict(future)","b0415c15":"lr_csv = pd.DataFrame({'Date':future_dates, 'Trend':lr_preds + (target_conf.max() - lr_preds.min())})\nlr_csv.to_csv('linear_reg_pred.csv')","5de96f44":"display(target_conf.max())\ndisplay(lr_preds.min())\ndisplay(target_conf.max() - lr_preds.min())","0cbf3e66":"fig = px.line(x=future_dates , y=lr_preds + (target_conf.max() - lr_preds.min()), color_discrete_sequence=[\"red\"])\n\nfig.update_traces(mode='lines+markers', line_shape='linear')\nfig.update_layout(title='Linear Regression Prediction',\n                 yaxis_title='Total Cases',\n                 xaxis_title='Progression Over Time',\n                 template='ggplot2',\n                 )\nfig.show()","b4e78a8e":"train_my_pred","bc4f0f98":"target_conf","514ba76f":"future","18b2bc44":"lasso = Lasso()\nlasso.fit(train_my_pred, target_conf)\nlasso_preds = lasso.predict(future)","91d06366":"lasso_csv = pd.DataFrame({'Date':future_dates, 'Trend':lasso_preds + (target_conf.max() - lasso_preds.min())})\nlasso_csv.to_csv('lasso_reg_pred.csv')","c42280ca":"fig = px.line(x=future_dates , y=lasso_preds + (target_conf.max() - lasso_preds.min()), color_discrete_sequence=[\"blue\"])\n\nfig.update_traces(mode='lines+markers', line_shape='linear')\nfig.update_layout(title='Lasso Prediction',\n                 yaxis_title='Total Cases',\n                 xaxis_title='Progression Over Time',\n                 template='ggplot2',\n                 )\nfig.show()","cf1bb334":"ridge = Ridge()\nridge.fit(train_my_pred, target_conf)\nridge_preds = ridge.predict(future)","fc0e309d":"ridge_csv = pd.DataFrame({'Date':future_dates, 'Trend':ridge_preds + (target_conf.max() - ridge_preds.min())})\nridge_csv.to_csv('ridge_reg_pred.csv')","29f411c2":"fig = px.line(x=future_dates , y=ridge_preds + (target_conf.max() - ridge_preds.min()), color_discrete_sequence=[\"green\"], log_y=True)\n\nfig.update_traces(mode='lines+markers', line_shape='linear')\nfig.update_layout(title='Ridge Prediction',\n                 yaxis_title='Total Cases',\n                 xaxis_title='Progression Over Time',\n                 template='ggplot2',\n                 )\nfig.show()","dc18214c":"# forecast_india_conf = forecast_india_conf[forecast_india_conf['ds'] > '2020-07-18']\n# forecast_india_conf","c47b8f97":"forecast_india_conf = forecast_india_conf[forecast_india_conf['ds'] > '2020-07-18']\nforecast_india_conf['trend'].iloc[179:]","986a0e06":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(y= lr_preds + (target_conf.max() - lr_preds.min()), \n                         x= future_dates, \n                         mode='lines+markers', \n                         marker_color='red', name='Linear Regression'))\n\nfig.add_trace(go.Scatter(y= lasso_preds + (target_conf.max() - lasso_preds.min()), \n                         x= future_dates, \n                         mode='lines+markers', \n                         marker_color='blue', name='Lasso Regression'))\n\nfig.add_trace(go.Scatter(y= ridge_preds + (target_conf.max() - ridge_preds.min()), \n                         x= future_dates, \n                         mode='lines+markers', \n                         marker_color='green', name='Ridge Regression'))\n\n\nfig.add_trace(go.Scatter(y= pred_ar_conf, \n                         x= prediction_dates, \n                         mode='lines+markers', \n                         marker_color='Orange', name='ARIMA'))\n\nfig.add_trace(go.Scatter(x=forecast_india_conf['ds'], \n                         y=forecast_india_conf['trend'], mode='lines+markers', \n                          marker_color='purple', name='Prophet'))\n\nfig.update_layout(template='ggplot2', title='Comparing All Models (Confirmed Cases)', \n                  height=900,\n                 xaxis=dict(\n                            autorange=True,\n                            range=[\"2020-07-05\", \"2020-10-04\"],\n                            rangeslider=dict(\n                                autorange=True,\n                                range=[\"2020-07-05\", \"2020-10-04\"]\n                            ),\n                            type=\"date\"\n                        ))\nfig.update_traces(textposition='top center')","547221aa":"def blended_predictions(X):\n    return ((0.33 * lr.predict(X)) + \\\n            (0.34 * lasso.predict(X)) + \\\n            (0.33 * ridge.predict(X)))","c6bec867":"blended_csv = pd.DataFrame({'Date':future_dates, 'Trend':blended_predictions(future) + (target_conf.max() - blended_predictions(future).min())})\nblended_csv.to_csv('blended_pred.csv')","4664b612":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(y= blended_predictions(future) + (target_conf.max() - blended_predictions(future).min()), \n                         x= future_dates,\n                         mode='lines+markers', \n                         marker_color='#F64B50', name='Blended Prediction'))\n\nfig.update_layout(template='ggplot2', title='Combining all the models (Blended Prediction)', showlegend=True,\n                  height=700,\n                 xaxis=dict(\n                            autorange=True,\n                            range=[\"2020-07-05\", \"2020-10-04\"],\n                            rangeslider=dict(\n                                autorange=True,\n                                range=[\"2020-07-05\", \"2020-10-04\"]\n                            ),\n                            type=\"date\"\n                        ))\nfig.update_traces(textposition='top center')","5b24ddb8":"from statsmodels.tsa.ar_model import AutoReg\n\nmodel_autor = AutoReg(india_conf['Confirmed'], lags=1)\nmodel_autor_fit = model_autor.fit()\n\nautor_preds = model_autor_fit.predict(start=len(india_conf['Confirmed']), end=len(india_conf['Confirmed']) + 90)\nautor_preds","2699a72d":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(y= autor_preds, \n                         x= prediction_dates, \n                         mode='lines+markers', \n                         marker_color='red', name='Predicted Confirmed'))\n\nfig.add_trace(go.Scatter(y=india_conf['Confirmed'],x=india_conf['Date'], mode='lines+markers', \n                          marker_color='mediumslateblue', name='Actual Confirmed'))\n\n\nfig.update_layout(title={\n                  'text': \"Predicted Confirmed in India (Auto Regressive)\",\n                  'y':0.98,\n                  'x':0.5,\n                  'xanchor': 'center',\n                  'yanchor': 'top'},\n                  plot_bgcolor='rgb(275, 275, 275)', \n                  template='plotly_white')\n\nfig.show()","c3505b34":"# train_my_pred target_conf\n\n# X_train, X_valid, y_train, y_valid = train_test_split(train_my_pred, target_conf, test_size=0.2, train_size=0.8)","9d082703":"# lr = LinearRegression()","2be3c19c":"# lr.fit(X_train, y_train)","a811e82e":"# pred = lr.predict(X_valid)","4c3eba2a":"# mae = mean_absolute_error(pred, y_valid)\n# mae","48ea6f67":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#EC2566;\n           font-size:90%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>Conclusion (World)<\/h1>\n<\/div>","78ec7bef":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:110%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>ARIMA<\/h1>\n<\/div>","11bf488b":"Lets analyze the above output for a second. We see that the standard deviation is huge!! The maximum number is 1255 and the minimum is 1. Filling the missing values with mean won't be a good choice here.\n\n**We take a look at the entire table, it may be that missing value represents that there are no 'SubDistrictHospitals' in that State. This seems more reliable and we will fill all the missing values with 0.**","52f8d15a":"We must convert this to <code><i>int<\/i><\/code>","f9f4d415":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#EC2566;\n           font-size:90%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>Deaths In India<\/h1>\n<\/div>","2939cade":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#5E7B81;\n           font-size:90%;\n           font-family:Verdana\">\n    <h1 style='color:#ffffff;'>6.1.2. Making Predictions<\/h1>\n<\/div>","486c8789":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:110%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>3. Testing Labs<\/h1>\n<\/div>","1b6d2e59":"**From the data above it is quite clear that Tamil Nadu has the most number of public beds in India followed by Maharashtra.**","a2e98780":"**From the data above it is quite clear that Uttar Pradesh has the most number of public health facilities in India followed by Maharashtra.**","205b8978":"From this data, we can find out the total number of labs present in each state.\n\nIt is clear from above output that we do not have to deal with missing values in this dataset. So lets keep moving forward","a457e15f":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           background-color:#5642C5;\n           border-radius:5px;\n           font-size:110%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>2. Hospital Data<\/h1>\n<\/div>","598bc020":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:4px;\n           background-color:#5642C5;\n           font-size:110%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>Loading Data<\/h1>\n<\/div>","b1c020e3":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#EC2566;\n           font-size:90%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>Recovered Cases India<\/h1>\n<\/div>","c006f375":"We will perform data forecasting using Prophet library. We will predict the coronavirus cases till **December 2020**.","4531cc56":"We can clearly see the prediction of our model that on **'26 December, 2020'** there will be a total of **'~2M (2 million)'** confirmed cases in India if the number of confirmed cases goes on increasing like this.","1de67569":"# Blending Models","6c3a734b":"There are a total of 3 types of laboratories:\n1. Government Laboratory\n2. Collection Site\n3. Private Laboratory","aa95316a":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#EC2566;\n           font-size:90%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>6.2. Recovered Cases in India<\/h1>\n<\/div>","289011bc":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n    <p style=\"padding: 10px;\n              color:white;\">\nI tried to make this Kernel simple and easy to understand. In my previous kernels I have only used matplotlib and seaborn for data visualizations but in this kernel I am also including plotly. You can see seaborn graphs here and there too.<br\/><br\/>\n\n        If you like this notebook, please give it an <span style=\"color:#F28835;\"><b><i>upvote<\/i><\/b><\/span> as it keeps me motivated to create more quality kernels.<br\/> I hope you like this kernel.\n    <\/p>\n<\/div>","d5ade1a0":"# Bigger Picture","21e57bfd":"### Number of Public Beds in Each State","a7c9027d":"Lets closely look at some features.","aed9e75d":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#EC2566;\n           font-size:90%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>Conclusion (India)<\/h1>\n<\/div>","de6c3e3e":"A fancy table:","a06b030f":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#EC2566;\n           font-size:90%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>7.2. Recovered Cases in World<\/h1>\n<\/div>","c9d7b9b8":"Before we simply go and apply the <code>astype(int)<\/code> magic on this column, **there is an anomaly in this data in the last row**. The last row contains comma in the data. We must update this row.","9abc94c7":"![](attachment:Covid-19-curves-graphic-social-v3.gif)","b7c94ac1":"We can get a suitable dataframe that extends into the future a specified number of days using the helper method <code>Prophet.make_future_dataframe<\/code>. By default it will also include the dates from the history, so we will see the model fit as well.","62f4bb2e":"### Number of Labs in Each State\nFirst, lets find out the frequency of state in this dataset and so we will know the total number of labs in that particular state.","ba2054d3":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#EC2566;\n           font-size:90%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>Active In India<\/h1>\n<\/div>","9b46af09":"### Something in disguise\nPay attention to the DataTypes above. We see that <code>'NumSubDistrictHospitals_HMIS'<\/code> is of <code><i>float64<\/i><\/code> data type which doesn't seem right. Lets investigate further.","5b006887":"Here:\n* 0-9 means 1\n* 10-19 means 2\n* 20-29 means 3\n* 30-39 means 4\n\nand so on...","17f6323b":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:110%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>7. Making Predictions (World)<\/h1>\n<\/div>","3fde7972":"### Type of Labs\nSecond, we will find out how many types of labs are present in each state.","2c49f0bb":"Defining our Prophet() model.","cd4712c2":"# Ridge Prediction (India)","9f22712b":"Alright, now we only have one categorical value. Lets take care of it quickly.","bc27877e":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#EC2566;\n           font-size:90%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>6.1. Confirmed Cases in India<\/h1>\n<\/div>","e014c89b":"## AutoRegressive","41af3871":"Alright, our data has only one column which is missing values. We must take care of it before moving forward.","2afb4b7c":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#EC2566;\n           font-size:90%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>7.1. Confirmed Cases in World<\/h1>\n<\/div>","2bb08451":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#EC2566;\n           font-size:90%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>7.3. Deaths in World<\/h1>\n<\/div>","3528d118":"Converting 'Date' from object to Datetime datatype.","8082312b":"# Linear Regression Prediction (India)","cae7d756":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:110%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>5. World Data<\/h1>\n<\/div>","86beaf85":"Using hierarchical chart like **Sunburst** is the best way to describe the relationship between 'Type of Labs' and 'State'.\n\nYou can click on the 'lab type' in the chart below to expand or contract it.","e691b8c7":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#EC2566;\n           font-size:90%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>2.1. Handling Missing Data<\/h1>\n<\/div>","85ed9786":"### Total Public Health Facilities in Each State","9f900112":"Alright, we have less problems to worry for as we have taken care of missing data values. **But wait... there is something else** we seeeee\n\nThe column 'NumPrimaryHealthCenters_HMIS' is of <code><i>Categorical Data<\/i><\/code> type but instead it should be of <code><i>int<\/i><\/code> datatype.","1c99fb6d":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#EC2566;\n           font-size:90%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>Confirmed Cases India<\/h1>\n<\/div>","c13252da":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:110%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>4. Covid Data<\/h1>\n<\/div>","6a0f3c04":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:110%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>1. Age Data<\/h1>\n<\/div>","556a25af":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#5E7B81;\n           font-size:90%;\n           font-family:Verdana\">\n    <h1 style='color:#ffffff;'>6.1.1. Creating Model<\/h1>\n<\/div>","cb416adc":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:110%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>6. Making Predictions (India)<\/h1>\n<\/div>","ae9b5e87":"> Note: HMIS - Health Management Information System\n\nLet's see what we are working with here with our three solid pillars: <code>df.columns<\/code>, <code>df.info()<\/code>, and <code>df.describe()<\/code>","ede7dfc3":"A really cool looking 3d Graph... because why not?","f28414da":"<div style=\"color:white;\n           padding:8px 10px 0 10px;\n           display:inline-block;\n           border-radius:5px;\n           background-color:#EC2566;\n           font-size:90%;\n           font-family:Verdana\">\n    <h1 style='color:white;'>6.3. Deaths in India<\/h1>\n<\/div>","a4b8da3f":"# Lasso Prediction (India)","b0f3b9a8":"I have done State wise analysis in another kernel. It is a quick look at the coronavirus situation in India.\n\nPlease take a look:\nhttps:\/\/www.kaggle.com\/shubhamksingh\/covid19-india-quicklook","65af3d15":"> This Sunburst Chart gives a clear picture of different tyepes of labs present in all the states.\n\nFrom above Sunburst Chart and table we can find out the presence of three labs in different states:\n* Collection Site - 3 states\n* Government Laboratory - 182 states\n* Private Laboratory - 82 states"}}