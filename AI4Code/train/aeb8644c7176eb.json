{"cell_type":{"3b3ace1d":"code","e69e79db":"code","4b2f70b2":"code","635e542e":"code","ea335b26":"code","4d095c64":"code","f4a5ba1b":"code","49c11f31":"code","32f87f18":"code","4e73c44a":"code","83bdefa7":"code","9a6fac3c":"code","f1b3166c":"code","601bccf6":"code","00fd8f58":"code","4bc8f17e":"code","b88edad6":"code","9c4a4cf7":"code","5e7098fa":"code","affb284d":"code","e0efedd3":"code","952d9a5a":"code","1215e2dd":"code","e2c4fd38":"code","d0875a41":"code","d6e723e6":"code","9c0dc16b":"code","a0c74c55":"code","93efc4df":"code","50693b8a":"code","f1dd290a":"markdown","d44a6ba5":"markdown","4839f234":"markdown","89f376c8":"markdown","dd280de6":"markdown","2220cdf0":"markdown","0513a533":"markdown"},"source":{"3b3ace1d":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport cv2\nimport matplotlib.patches as patches\nimport tensorflow as tf\nfrom keras.layers import Flatten, Dense, Conv2D, MaxPooling2D, Dropout\nfrom keras.models import Sequential","e69e79db":"pip install mtcnn","4b2f70b2":"from mtcnn.mtcnn import MTCNN","635e542e":"images=os.path.join(\"\/kaggle\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images\")\nannotations=os.path.join(\"\/kaggle\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/annotations\")\ntrain=pd.read_csv(os.path.join(\"\/kaggle\/input\/face-mask-detection-dataset\/train.csv\"))\nsubmission=pd.read_csv(os.path.join(\"\/kaggle\/input\/face-mask-detection-dataset\/submission.csv\"))","ea335b26":"print(len(train))\ntrain.head()","4d095c64":"print(len(submission))\nsubmission.head()","f4a5ba1b":"len(os.listdir(images))","49c11f31":"a=os.listdir(images)\nb=os.listdir(annotations)\na.sort()\nb.sort()","32f87f18":"print(len(b),len(a))","4e73c44a":"train_images=a[1698:]\ntest_images=a[:1698]","83bdefa7":"test_images[0]","9a6fac3c":"img=plt.imread(os.path.join(images,test_images[0]))\nplt.imshow(img)\nplt.show()","f1b3166c":"img=plt.imread(os.path.join(images,train_images[1]))\nplt.imshow(img)\nplt.show()","601bccf6":"options=['face_with_mask','face_no_mask']\ntrain= train[train['classname'].isin(options)]\ntrain.sort_values('name',axis=0,inplace=True)","00fd8f58":"bbox=[]\nfor i in range(len(train)):\n    arr=[]\n    for j in train.iloc[i][[\"x1\",'x2','y1','y2']]:\n        arr.append(j)\n    bbox.append(arr)\ntrain[\"bbox\"]=bbox  \ndef get_boxes(id):\n    boxes=[]\n    for i in train[train[\"name\"]==str(id)][\"bbox\"]:\n        boxes.append(i)\n    return boxes\nprint(get_boxes(train_images[3]))\nimage=train_images[3]\n\nimg=plt.imread(os.path.join(images,image))\n\nfig,ax = plt.subplots(1)\nax.imshow(img)\nboxes=get_boxes(image)\nfor box in boxes:\n    rect = patches.Rectangle((box[0],box[1]),box[2]-box[0],box[3]-box[1],linewidth=2,edgecolor='r',facecolor='none')\n    ax.add_patch(rect)\nplt.show()","4bc8f17e":"image=train_images[5]\n\nimg=plt.imread(os.path.join(images,image))\n\nfig,ax = plt.subplots(1)\nax.imshow(img)\nboxes=get_boxes(image)\nfor box in boxes:\n    rect = patches.Rectangle((box[0],box[1]),box[2]-box[0],box[3]-box[1],linewidth=2,edgecolor='r',facecolor='none')\n    ax.add_patch(rect)\nplt.show()","b88edad6":"plt.bar(['face_with_mask','face_no_mask'],train.classname.value_counts())","9c4a4cf7":"img_size=50\ndata=[]\npath='\/kaggle\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images\/'\ndef create_data():\n       for i in range(len(train)):\n            arr=[]\n            for j in train.iloc[i]:\n                   arr.append(j)\n            img_array=cv2.imread(os.path.join(images,arr[0]),cv2.IMREAD_GRAYSCALE)\n            crop_image = img_array[arr[2]:arr[4],arr[1]:arr[3]]\n            new_img_array=cv2.resize(crop_image,(img_size,img_size))\n            data.append([new_img_array,arr[5]])\ncreate_data()      ","5e7098fa":"data[0][0]\nplt.imshow(data[0][0])","affb284d":"x=[]\ny=[]\nfor features, labels in data:\n    x.append(features)\n    y.append(labels)\nfrom sklearn.preprocessing import LabelEncoder\nlbl=LabelEncoder()\ny=lbl.fit_transform(y)","e0efedd3":"x=np.array(x).reshape(-1,50,50,1)\nx=tf.keras.utils.normalize(x,axis=1)\nfrom keras.utils import to_categorical\ny = to_categorical(y)","952d9a5a":"from keras.layers import LSTM\nmodel=Sequential()\nmodel.add(Conv2D(100,(3,3),input_shape=x.shape[1:],activation='relu',strides=2))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(64,(3,3),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(2, activation='softmax'))\n","1215e2dd":"\nopt = tf.keras.optimizers.Adam(lr=1e-3, decay=1e-5)\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy']) \nmodel.fit(x,y,epochs=30,batch_size=5)","e2c4fd38":"detector=MTCNN()\nimg=plt.imread(os.path.join(images,test_images[0]))\nface=detector.detect_faces(img)\nfor face in face:\n        bounding_box=face['box']\n        x=cv2.rectangle(img,\n              (bounding_box[0], bounding_box[1]),\n              (bounding_box[0]+bounding_box[2], bounding_box[1] + bounding_box[3]),\n              (0,155,255),\n              10)\n        plt.imshow(x)","d0875a41":"img=plt.imread(os.path.join(images,test_images[3]))\nface=detector.detect_faces(img)\nfor face in face:\n        bounding_box=face['box']\n        x=cv2.rectangle(img,\n              (bounding_box[0], bounding_box[1]),\n              (bounding_box[0]+bounding_box[2], bounding_box[1] + bounding_box[3]),\n              (0,155,255),\n              10)\n        plt.imshow(x)","d6e723e6":"detector=MTCNN()\ntest_df=[]\nfor image in test_images:\n    img=plt.imread(os.path.join(images,image))\n    faces=detector.detect_faces(img)\n    test=[]\n    for face in faces:\n        bounding_box=face['box']\n        test.append([image,bounding_box])\n    test_df.append(test)\ntest=[]\nfor i in test_df:\n    if len(i)>0:\n        if len(i)==1:\n            test.append(i[0])\n        else:\n            for j in i:\n                test.append(j)  \nsub=[]\nrest_image=[]\nfor i in test:\n    sub.append(i[0])\nfor image in test_images:\n    if image not in sub:\n        rest_image.append(image) \ndetector=MTCNN()\ntest_df_=[]\nfor image in rest_image:\n    img=cv2.imread(os.path.join(images,image))\n    faces=detector.detect_faces(img)\n    test_=[]\n    for face in faces:\n        bounding_box=face['box']\n        test_.append([image,bounding_box])\n    test_df_.append(test_) \nfor i in test_df_:\n    if len(i)>0:\n        if len(i)==1:\n            test.append(i[0])\n        else:\n            for j in i:\n                test.append(j)      ","9c0dc16b":"negative=[]\nfor i in test:\n    for j in i[1]:\n        if j<0:\n            negative.append(i)\n    ","a0c74c55":"test_data=[]\ndef create_test_data():\n            for j in test:\n                if j not in negative:\n                    img=cv2.imread(os.path.join(images,j[0]),cv2.IMREAD_GRAYSCALE)\n                    img=img[j[1][1]:j[1][1]+j[1][3],j[1][0]:j[1][0]+j[1][2]]\n                    new_img=cv2.resize(img,(50,50))\n                    new_img=new_img.reshape(-1,50,50,1)\n                    predict=model.predict(new_img)\n                    test_data.append([j,predict])\n\ncreate_test_data()      ","93efc4df":"image=[]\nclassname=[]\nfor i,j in test_data:\n    classname.append(np.argmax(j))\n    image.append(i)\ndf=pd.DataFrame(columns=['image','classname'])\ndf['image']=image\ndf['classname']=classname\ndf['classname']=lbl.inverse_transform(df['classname'])\nimage=[]\nx1=[]\nx2=[]\ny1=[]\ny2=[]\nfor i in df['image']:\n    image.append(i[0])\n    x1.append(i[1][0])\n    x2.append(i[1][1])\n    y1.append(i[1][2])\n    y2.append(i[1][3])\ndf['name']=image\ndf['x1']=x1\ndf['x2']=x2\ndf['y1']=y1\ndf['y2']=y2    \ndf.drop(['image'],axis=1,inplace=True)","50693b8a":"df.sort_values('name',axis=0,inplace=True,ascending=False)\ndf.to_csv('submission_1.csv')","f1dd290a":"# Face mask detection\n\nHere I am going to detect whether a person is wearing mask or not. I am focussing on only two classes that are 'face_with_mask' and face_no_mask'.","d44a6ba5":"## We are having 6024 images.","4839f234":"## Importing Libraries","89f376c8":"# Model Fitting","dd280de6":"Let's see some of the images.","2220cdf0":"# Creating training data","0513a533":"# Loading datasets"}}