{"cell_type":{"a762ab0b":"code","dfa3ad34":"code","70263094":"code","2879d5b1":"code","77669024":"code","e29b69d6":"code","6d745e9a":"code","eece4b5f":"code","b6a40ec3":"code","d626524e":"code","f1ffe117":"code","7ea7adda":"code","ee35acfe":"code","80e7755c":"code","a4bdc64a":"code","83b16257":"code","e8628013":"code","83ce2c1a":"code","575d34f5":"code","11a8779f":"code","dcfeb3af":"code","aede2fbf":"code","c0c826db":"markdown"},"source":{"a762ab0b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","dfa3ad34":"train_data = pd.read_csv('\/kaggle\/input\/data-without-drift\/train_clean.csv')","70263094":"test_data = pd.read_csv('\/kaggle\/input\/data-without-drift\/test_clean.csv')","2879d5b1":"test_data[700000:800000]['signal']=test_data[700000:800000]['signal'].values - train_data[4000000:4100000]['signal'].values","77669024":"train_oofs = pd.read_csv('\/kaggle\/input\/liverpool-lgbm-oofs\/oofs_train.csv')","e29b69d6":"test_oofs = pd.read_csv('\/kaggle\/input\/liverpool-lgbm-oofs\/oofs_test.csv')","6d745e9a":"test_data[200000:300000]['signal']=test_data[200000:300000]['signal'].values + 0.017","eece4b5f":"test_data[500000:600000]['signal']=test_data[500000:600000]['signal'].values + 0.05","b6a40ec3":"train_data[2500000:3000000]['signal']=train_data[2500000:3000000]['signal'].values - 0.015","d626524e":"train = pd.DataFrame()\ntrain['signal'] = train_data['signal'].values\ntrain['open_channels'] = train_oofs.oofs2.values\ntest = pd.DataFrame()\ntest['signal'] = test_data['signal'].values\ntest['open_channels'] = test_oofs.oofs2.values","f1ffe117":"train['meanp']=train.groupby('open_channels').signal.transform('mean')\ntrain['noisep']=-(train.meanp-train.signal)\ntest['meanp']=test.groupby('open_channels').signal.transform('mean')\ntest['noisep']=-(test.meanp-test.signal)","7ea7adda":"train['phase']=train.index\ntrain['phase']=train.phase%200\ntest['phase']=test.index\ntest['phase']=test.phase%200","ee35acfe":"for i in range(0, 200):\n    train.loc[train.phase==i,'ave_mod200']=train.loc[train.phase==i].noisep.rolling(window=10, min_periods=1, center=True).mean()\n    test.loc[test.phase==i,'ave_mod200']=test.loc[test.phase==i].noisep.rolling(window=10, min_periods=1, center=True).mean()","80e7755c":"train['noise_intrabatch_with200ave']=train['ave_mod200'].rolling(window=3, min_periods=1, center=True).mean()\ntest['noise_intrabatch_with200ave']=test['ave_mod200'].rolling(window=3, min_periods=1, center=True).mean()","a4bdc64a":"train['clean_s']=train['signal'].values - train['noise_intrabatch_with200ave'].values\ntest['clean_s']=test['signal'].values - test['noise_intrabatch_with200ave'].values","83b16257":"clean_train = pd.DataFrame()\nclean_test = pd.DataFrame()\nclean_train['signal']=train['clean_s'].values\nclean_test['signal']=test['clean_s'].values\nclean_train.to_csv('clean_train_signal.csv', index = False)\nclean_test.to_csv('clean_test_signal.csv', index = False)","e8628013":"import matplotlib.pyplot as plt\nplt.plot(test_data['time'], clean_test['signal'], linewidth=.1)","83ce2c1a":"import matplotlib.pyplot as plt\nplt.plot(test_data['time'], test_data['signal'], linewidth=.1)","575d34f5":"import matplotlib.pyplot as plt\nplt.plot(test_data['time'], test_data['signal'] - clean_test['signal'], linewidth=.1)","11a8779f":"plt.plot(train_data['time'], clean_train['signal'], linewidth=.1)","dcfeb3af":"plt.plot(train_data['time'], train_data['signal'], linewidth=.1)","aede2fbf":"import matplotlib.pyplot as plt\nplt.plot(train_data['time'], train_data['signal'] - clean_train['signal'], linewidth=.1)","c0c826db":"This is a streamlined solution without any data augmentation. The model has two layers, which build upon each other and one layer uses CPU platform while the other uses GPU platform. We decided that the easiest will be to split this into three kernels, which will be three steps. Please run these three kernels in sequence one after the other as described below.\n \n\n(1) Liverppol_LGBM_oofs\n\n(1.a) This kernal has to be run first.\n\n(1.b) This kernal uses competition data and the public dataset Data Without Drift as input.\n\n(1.c) This kernal uses an LGBM based model to make baseline predictions. \n\n(1.d) This kernal runs on a CPU platform.\n\n(1.e) The runtime for this kernal is approximately 1.7 hrs (it took us 6133.8 sec).\n\n(2) Liverpool_NoiseRemoval\n\n(2.a) This kernal has to be run second.\n\n(2.b) This kernal takes output from the previous kernal as input.\n\n(2.c) This kernal removes 50Hz noise from the signal and we use that clean signal in the next step.\n\n(2.d) This kernal runs on a CPU platform.\n\n(2.d) This runtime for this kernal is approximately 1.2 min (it took us 72.9 sec).\n\n(3) Liverpool_Wavenet\n\n(3.a) This last kernal outputs two csv files, the one named final_submission_wavenet.csv can be submitted to the competition to get a score close to our final private score.\n\n(3.b) This kernal uses a Wavenet based model, which is trained on clean signal\nand makes the final predictions.\n\n(3.c) This kernal runs on a GPU platform.\n\n(3.d) The runtime for this kernal is approximately 2.5 hrs (it took us 8908.9 sec)\n\nDoing this iteratively, i.e generate better predictions and then generate cleaner \nsignal and then use that cleaner signal to make even better prediction captures \nthe basic strategy of our work."}}