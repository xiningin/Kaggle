{"cell_type":{"81042ad2":"code","6538bf16":"code","825ede4d":"code","f27ed1d7":"code","6cfbf2a4":"code","d287a77a":"code","32ffde8d":"code","2c83eb2d":"code","2e61b7c2":"code","91c1b132":"code","e49ef346":"code","db32b6a1":"code","071cbc53":"code","639f86b8":"code","babd1237":"code","dcd471e1":"code","0df50f75":"code","185fa0be":"code","b391e6c4":"code","dc876ed3":"code","b0e57c1b":"code","3d78ba85":"code","5d57e2df":"code","fb1a2430":"code","85a88ef3":"code","f094d66c":"code","76b041df":"code","f9f3ca5d":"code","79157b10":"code","ba9088ad":"code","9daceb31":"code","a3c85845":"code","7f9d54a2":"code","237739f8":"code","079b77c6":"code","de3c5c0c":"code","1069958f":"code","36c5a476":"code","db1965fb":"code","2559d576":"code","8cf079eb":"code","2e7c1e36":"code","a645fef4":"code","ebf1274f":"code","af1bbe08":"code","6a88b62d":"code","af84d527":"code","a3cff2dd":"code","4e90ef93":"code","4d722723":"code","065b389c":"code","c70782fd":"code","c7fcf5f6":"code","db636e0b":"code","b86ba779":"code","980efa5a":"code","a08e27d3":"code","5e851f5f":"code","3329e319":"code","014dea60":"code","549e1557":"code","5b054b60":"code","ba768712":"code","73f4fd25":"code","64b29701":"code","d13d53a7":"code","d027eb47":"code","49762485":"code","f07d725a":"code","95607b7f":"code","8e06e6d2":"code","e4f965db":"code","40c3caa6":"code","670d0a5f":"code","6ba16fc8":"code","153d0905":"code","b8e7e418":"code","bc896eda":"code","8f1be23b":"code","8897c04e":"code","ccfb1474":"code","d69d829e":"code","dfd0beff":"code","ab03371f":"code","5f2caa52":"code","1d90e4e3":"code","809c7e3e":"code","6d3f9002":"code","ef558bb7":"code","f564f19b":"code","a009329e":"code","e1de412a":"code","0054bd6e":"code","0221132a":"code","1d63e828":"code","3bd37a20":"code","3ac2c2a8":"code","8bafaeab":"code","6ee1d7ac":"code","cedc4acb":"code","10378f7d":"code","b555ca49":"code","29383048":"code","2d9f55d1":"code","ba5df722":"code","059de8dd":"code","8c5049cb":"code","2e18911c":"code","b2640792":"code","f4912dac":"code","2ea1274a":"code","e1f34f65":"code","8f0c5abf":"markdown","8ddcd49f":"markdown","9620ae98":"markdown","5cf429fc":"markdown","c9435e23":"markdown","9206919d":"markdown","40d3e6a3":"markdown","e06fcdc5":"markdown","a8c1cb9d":"markdown","6cfc5f61":"markdown"},"source":{"81042ad2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6538bf16":"from sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import scatter_matrix","825ede4d":"df = pd.read_csv('\/kaggle\/input\/california-housing-prices\/housing.csv')","f27ed1d7":"df.info() #target is median_house_value","6cfbf2a4":"df['ocean_proximity'].value_counts()","d287a77a":"df['total_bedrooms'].isna().sum()","32ffde8d":"df[df['total_bedrooms'].isna()]","2c83eb2d":"df[df['total_bedrooms'].notna()]","2e61b7c2":"bins = np.linspace(min(df['total_bedrooms']), max(df['total_bedrooms']), num=20)\nax1 = sns.distplot(df['total_bedrooms'], bins=bins, color='gold', kde=True, hist_kws=dict(edgecolor='k', lw=1)) \nax2 = sns.distplot(df['total_bedrooms'].fillna(value=df['total_bedrooms'].mean()), bins=bins, color='green', kde=True, hist_kws=dict(edgecolor='k', lw=1))","91c1b132":"bins = np.linspace(min(df['total_bedrooms']), max(df['total_bedrooms']), num=20)\nax1 = sns.distplot(df['total_bedrooms'], bins=bins, color='gold', kde=True, hist_kws=dict(edgecolor='k', lw=1)) \nax2 = sns.distplot(df['total_bedrooms'].fillna(value=df['total_bedrooms'].median()), bins=bins, color='red', kde=True, hist_kws=dict(edgecolor='k', lw=1)) ","e49ef346":"x = df.drop(columns='median_house_value')\ny = df['median_house_value']","db32b6a1":"xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.3)","071cbc53":"trainset = pd.concat([xtrain, ytrain], axis=1)\ntestset = pd.concat([xtest, ytest], axis=1)","639f86b8":"trainset['median_house_value'].describe()","babd1237":"trainset['median_house_value'].hist(bins=20)","dcd471e1":"trainset[trainset['median_house_value']>=475000]","0df50f75":"sns.distplot(trainset['median_house_value'])","185fa0be":"print(\"Skewness: %f\" % trainset['median_house_value'].skew()) # normal distribution: 0\nprint(\"Kurtosis: %f\" % trainset['median_house_value'].kurt()) # normal distribution: 3","b391e6c4":"attributes = [\"median_house_value\", \"median_income\", \"total_rooms\", \"total_bedrooms\",\n              \"housing_median_age\", \"population\"]\nscatter_matrix(trainset[attributes], figsize=(20, 15))","dc876ed3":"plt.figure(figsize=(12, 10))\nsns.scatterplot(data=trainset, x=\"longitude\", y=\"latitude\", hue=\"median_house_value\", alpha=0.1, s=80)","b0e57c1b":"plt.figure(figsize=(12, 10))\nsns.scatterplot(data=trainset, x=\"longitude\", y=\"latitude\", hue=\"median_income\", alpha=0.1, s=80)","3d78ba85":"trainset['housing_median_age'].describe()","5d57e2df":"sns.scatterplot(data=trainset, x=\"housing_median_age\", y=\"median_income\", alpha=0.5, s=80)","fb1a2430":"sns.scatterplot(data=trainset, x=\"housing_median_age\", y=\"median_house_value\", alpha=0.5, s=80)","85a88ef3":"trainset['housing_median_age'].hist(bins=20)","f094d66c":"plt.figure(figsize=(12, 10))\nsns.scatterplot(data=trainset[trainset['housing_median_age']>=52], x=\"longitude\", y=\"latitude\", hue=\"median_house_value\", alpha=0.5, s=80)  # two main clusters (San Francisco & Los Angeles)","76b041df":"median = trainset['total_bedrooms'].median()","f9f3ca5d":"trainset['total_bedrooms'].fillna(value=median, inplace=True)\ntestset['total_bedrooms'].fillna(value=median, inplace=True)","79157b10":"trainset['bedrooms_per_household'] = trainset['total_bedrooms']\/trainset['households']\ntrainset['bedrooms_per_room'] = trainset['total_bedrooms']\/trainset['total_rooms']\n\ntestset['bedrooms_per_household'] = testset['total_bedrooms']\/testset['households']\ntestset['bedrooms_per_room'] = testset['total_bedrooms']\/testset['total_rooms']","ba9088ad":"trainset.drop(trainset[trainset['ocean_proximity']=='ISLAND'].index, inplace=True)\ntestset.drop(testset[testset['ocean_proximity']=='ISLAND'].index, inplace=True)","9daceb31":"trainset.info()","a3c85845":"trainset = pd.get_dummies(trainset, columns=['ocean_proximity'], sparse=False, \n                              drop_first=True)\ntestset = pd.get_dummies(testset, columns=['ocean_proximity'], sparse=False, \n                              drop_first=True)","7f9d54a2":"trainset.info()","237739f8":"trainset['population_per_households'] = trainset['population'] \/ trainset['households']    #new feature\ntestset['population_per_households'] = testset['population'] \/ testset['households']   ","079b77c6":"import seaborn as sns\nsns.heatmap(trainset.corr(), annot=True)","de3c5c0c":"corr_matrix = trainset.corr().abs()\nhigh_corr_var=np.where(corr_matrix>0.5)\nhigh_corr_var=[(corr_matrix.columns[x],corr_matrix.columns[y]) for x,y in zip(*high_corr_var) if x!=y and x<y]","1069958f":"high_corr_var","36c5a476":"high_corr_var = ['total_rooms', 'total_bedrooms', 'population', 'median_income', 'households',  'median_house_value', 'bedrooms_per_room',\n                'bedrooms_per_household']","db1965fb":"plt.figure(figsize=(14,14))\nsns.heatmap(trainset[high_corr_var].corr(), annot=True)","2559d576":"trainset.drop(columns=['total_bedrooms', 'population', 'bedrooms_per_household', 'households'], inplace=True)\ntestset.drop(columns=['total_bedrooms', 'population', 'bedrooms_per_household', 'households'], inplace=True)","8cf079eb":"trainset.info()","2e7c1e36":"from pandas.plotting import scatter_matrix\n\nattributes = [\"median_house_value\", \"median_income\", \"total_rooms\",\n              \"housing_median_age\", \"bedrooms_per_room\", \"population_per_households\"]\nscatter_matrix(trainset[attributes], figsize=(20, 15))","a645fef4":"trainset.describe()","ebf1274f":"def get_iqr_results(num_series, k=1.5):\n    # calculate percentiles and IQR\n    q25 = np.percentile(num_series, 25)\n    q75 = np.percentile(num_series, 75)\n    iqr = q75 - q25\n    \n    # calculate normal and extreme upper and lower cut off\n    cutoff = iqr * k\n    lower = q25 - cutoff \n    upper = q75 + cutoff\n    \n    result = {\n        'lower': lower,\n        'upper': upper}\n    \n    return result","af1bbe08":"trainset.info()","6a88b62d":"numerical_columns = ['housing_median_age', 'total_rooms', 'median_income', 'bedrooms_per_room', 'population_per_households']","af84d527":"column_limits = {}","a3cff2dd":"for column in numerical_columns:\n    column_limits[column] = get_iqr_results(trainset[column])","4e90ef93":"column_limits","4d722723":"trainset.shape","065b389c":"for column in numerical_columns:\n    trainset.loc[trainset[column]<column_limits[column]['lower'], column] = column_limits[column]['lower']\n    trainset.loc[trainset[column]>column_limits[column]['upper'], column] = column_limits[column]['upper']\n    testset.loc[testset[column]<column_limits[column]['lower'], column] = column_limits[column]['lower']\n    testset.loc[testset[column]>column_limits[column]['upper'], column] = column_limits[column]['upper']","c70782fd":"trainset.describe()","c7fcf5f6":"attributes = [\"median_house_value\", \"median_income\", \"total_rooms\",\n              \"housing_median_age\", \"bedrooms_per_room\", \"population_per_households\"]\nscatter_matrix(trainset[attributes], figsize=(20, 15))","db636e0b":"xtrain = trainset.drop(columns=[\"median_house_value\"])\nytrain = trainset[\"median_house_value\"]\n\nxtest = testset.drop(columns=[\"median_house_value\"])\nytest = testset[\"median_house_value\"]","b86ba779":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","980efa5a":"scaler.fit(xtrain)\nxtrain_scaled = scaler.transform(xtrain)\nxtest_scaled = scaler.transform(xtest)","a08e27d3":"xtrain_scaled = pd.DataFrame(xtrain_scaled, index=xtrain.index, columns=xtrain.columns)\nxtest_scaled = pd.DataFrame(xtest_scaled, index=xtest.index, columns=xtest.columns)","5e851f5f":"from sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR","3329e319":"lin_reg=LinearRegression()\nlin_reg.fit(xtrain_scaled,ytrain)","014dea60":"ypred = lin_reg.predict(xtest_scaled)","549e1557":"mse_test = mean_squared_error(ytest,ypred)\nrmse_test  = np.sqrt(mse_test)","5b054b60":"rmse_test","ba768712":"ytpred = lin_reg.predict(xtrain_scaled)","73f4fd25":"mse_train = mean_squared_error(ytrain,ytpred)\nrmse_train = np.sqrt(mse_train)","64b29701":"rmse_train","d13d53a7":"forest_reg = RandomForestRegressor()\nforest_reg.fit(xtrain_scaled, ytrain)","d027eb47":"ypred = forest_reg.predict(xtest_scaled)\nytpred = forest_reg.predict(xtrain_scaled)","49762485":"rf_rmse_train = np.sqrt(mean_squared_error(ytrain,ytpred))\nrf_rmse_test = np.sqrt(mean_squared_error(ytest,ypred))","f07d725a":"rf_rmse_train","95607b7f":"rf_rmse_test #overfitting","8e06e6d2":"svm_reg = SVR(kernel=\"linear\")\nsvm_reg.fit(xtrain_scaled, ytrain)\nytpred = svm_reg.predict(xtrain_scaled)\nypred = svm_reg.predict(xtest_scaled)","e4f965db":"svm_mse_train = mean_squared_error(ytrain, ytpred)\nsvm_mse_test = mean_squared_error(ytest, ypred)\nsvm_rmse_train = np.sqrt(svm_mse_train)\nsvm_rmse_test = np.sqrt(svm_mse_test)","40c3caa6":"svm_rmse_train","670d0a5f":"svm_rmse_test","6ba16fc8":"xtrain_scaled.shape","153d0905":"forest_reg = RandomForestRegressor(n_estimators=15, max_features=4, max_depth=8, random_state=42)\nforest_reg.fit(xtrain_scaled, ytrain)\nypred = forest_reg.predict(xtest_scaled)\nytpred = forest_reg.predict(xtrain_scaled)\nrf_rmse_train = np.sqrt(mean_squared_error(ytrain,ytpred))\nrf_rmse_test = np.sqrt(mean_squared_error(ytest,ypred))","b8e7e418":"rf_rmse_train","bc896eda":"rf_rmse_test","8f1be23b":"params = [\n    {'n_estimators': [10, 15, 20, 30], 'max_features': [2, 4, 6, 8], 'min_samples_split':[2,4],\n     'min_samples_leaf':[1,2,3], 'bootstrap':[True, False]}\n  ]\n\nforest_reg = RandomForestRegressor(random_state=42)\ngrid_search = GridSearchCV(forest_reg, params, cv=5, scoring='neg_root_mean_squared_error', return_train_score=True)\ngrid_search.fit(xtrain_scaled, ytrain)","8897c04e":"grid_search.best_params_","ccfb1474":"grid_search.cv_results_","d69d829e":"forest_reg = RandomForestRegressor(n_estimators=30, max_features=2, bootstrap=False, min_samples_leaf=1, \n                                   min_samples_split=2, random_state=42)\nforest_reg.fit(xtrain_scaled, ytrain)\nypred = forest_reg.predict(xtest_scaled)\nytpred = forest_reg.predict(xtrain_scaled)\nrf_rmse_train = np.sqrt(mean_squared_error(ytrain,ytpred))\nrf_rmse_test = np.sqrt(mean_squared_error(ytest,ypred))","dfd0beff":"rf_rmse_train #overfitting a lot","ab03371f":"rf_rmse_test","5f2caa52":"list(zip(xtrain_scaled.columns, list(forest_reg.feature_importances_)))","1d90e4e3":"params = [\n    {'n_estimators': [15, 20, 30], 'max_features': [2, 4], 'min_samples_split':[3,4],\n     'min_samples_leaf':[2,3], 'bootstrap':[True, False], 'max_depth': [3, 4, 6]}\n  ]\n\nforest_reg = RandomForestRegressor(random_state=42)\ngrid_search = GridSearchCV(forest_reg, params, cv=5, scoring='neg_root_mean_squared_error', return_train_score=True)\ngrid_search.fit(xtrain_scaled, ytrain)","809c7e3e":"grid_search.best_params_","6d3f9002":"forest_reg = RandomForestRegressor(n_estimators=10, max_features=4, max_depth=14, bootstrap=True, random_state=42, max_samples=0.7,  max_leaf_nodes=35)\n# min_samples_split=10, min_samples_leaf=14, \nforest_reg.fit(xtrain_scaled, ytrain)\nypred = forest_reg.predict(xtest_scaled)\nytpred = forest_reg.predict(xtrain_scaled)\nrf_rmse_train = np.sqrt(mean_squared_error(ytrain,ytpred))\nrf_rmse_test = np.sqrt(mean_squared_error(ytest,ypred))","ef558bb7":"rf_rmse_train","f564f19b":"rf_rmse_test","a009329e":"params = [\n    {'n_estimators': [10, 15, 20], 'max_features': [4, 6], 'min_samples_split':[8, 10, 12],\n     'min_samples_leaf':[2, 4, 8], 'bootstrap':[True, False], 'max_depth': [10, 12, 14], 'max_leaf_nodes':[20, 25, 30, 35]}\n  ]\n\nforest_reg = RandomForestRegressor(random_state=42)\ngrid_search = GridSearchCV(forest_reg, params, cv=3, scoring='neg_root_mean_squared_error', return_train_score=True)\ngrid_search.fit(xtrain_scaled, ytrain)","e1de412a":"grid_search.best_params_","0054bd6e":"forest_reg = RandomForestRegressor(n_estimators=20, max_features=6, max_depth=12, min_samples_leaf=8, min_samples_split=8,\n                                   bootstrap=True, random_state=42, max_leaf_nodes=35)\n# min_samples_split=10, min_samples_leaf=14, \nforest_reg.fit(xtrain_scaled, ytrain)\nypred = forest_reg.predict(xtest_scaled)\nytpred = forest_reg.predict(xtrain_scaled)\nrf_rmse_train = np.sqrt(mean_squared_error(ytrain,ytpred))\nrf_rmse_test = np.sqrt(mean_squared_error(ytest,ypred))","0221132a":"rf_rmse_train","1d63e828":"rf_rmse_test","3bd37a20":"from sklearn.metrics import r2_score","3ac2c2a8":"r2_score(ytrain,ytpred)","8bafaeab":"r2_score(ytest,ypred)","6ee1d7ac":"forest_reg_basic = RandomForestRegressor(random_state=42)\nforest_reg_basic.fit(xtrain_scaled, ytrain)\nypredb = forest_reg_basic.predict(xtest_scaled)\nytpredb = forest_reg_basic.predict(xtrain_scaled)\nrf_rmse_trainb = np.sqrt(mean_squared_error(ytrain,ytpredb))\nrf_rmse_testb = np.sqrt(mean_squared_error(ytest,ypredb))","cedc4acb":"rf_rmse_trainb","10378f7d":"rf_rmse_testb","b555ca49":"r2_score(ytrain,ytpredb)","29383048":"r2_score(ytest,ypredb)","2d9f55d1":"from sklearn.linear_model import Ridge","ba5df722":"rr = Ridge(alpha=0.1) ","059de8dd":"rr.fit(xtrain_scaled, ytrain)","8c5049cb":"ypred_ridge = rr.predict(xtest_scaled)\nypredt_ridge = rr.predict(xtrain_scaled)","2e18911c":"rr_rmse_trainb = np.sqrt(mean_squared_error(ytrain,ypredt_ridge))\nrr_rmse_testb = np.sqrt(mean_squared_error(ytest, ypred_ridge))","b2640792":"rr_rmse_trainb","f4912dac":"rr_rmse_testb","2ea1274a":"r2_score(ytrain,ypredt_ridge)","e1f34f65":"r2_score(ytest,ypred_ridge)","8f0c5abf":"Impute Nulls","8ddcd49f":"New feature","9620ae98":"Model development","5cf429fc":"!['california_map](https:\/\/i.pinimg.com\/originals\/35\/63\/9a\/35639a247a078b89f72d848c305f7efe.jpg)","c9435e23":"EDA","9206919d":"\nOptimization methods - find the parameters for the prediction function:\n    OLS:\n    https:\/\/towardsdatascience.com\/understanding-the-ols-method-for-simple-linear-regression-e0a4e8f692cc\n\n    Gradient Descent:\n    https:\/\/towardsdatascience.com\/linear-regression-using-gradient-descent-97a6c8700931\n    https:\/\/medium.com\/@shuklapratik22\/linear-regression-with-gradient-descent-from-scratch-d03dfa90d04c\n\nWith regularization:\nhttps:\/\/medium.com\/@vigneshmadanan\/linear-regression-basics-and-regularization-methods-b40359b0aea5\n\nA complete guide:\nhttps:\/\/www.analyticsvidhya.com\/blog\/2017\/06\/a-comprehensive-guide-for-linear-ridge-and-lasso-regression\/\nhttps:\/\/www.keboola.com\/blog\/linear-regression-machine-learning\n\nLinear regression examples:\nhttps:\/\/medium.com\/datadriveninvestor\/simple-linear-regression-with-python-1b028386e5cd\nhttps:\/\/jakevdp.github.io\/PythonDataScienceHandbook\/05.06-linear-regression.html\nhttps:\/\/stackabuse.com\/linear-regression-in-python-with-scikit-learn\/","40d3e6a3":"Target variable","e06fcdc5":"Remove multicollinearity","a8c1cb9d":"Encode categorical variables","6cfc5f61":"New features"}}