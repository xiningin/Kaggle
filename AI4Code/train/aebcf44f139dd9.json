{"cell_type":{"7f8b6486":"code","956d9ad1":"code","a538618e":"code","816e115d":"code","13ed1a75":"code","33f65056":"code","0e111580":"code","538c2745":"code","f3d5aaa0":"code","27d5b211":"code","43c70398":"code","dc31fac0":"code","bf6aa000":"code","54428589":"code","b645caf9":"code","2962f263":"code","585936ea":"code","e56baa10":"code","a538caf9":"code","2b515c3e":"code","1b97a6d7":"markdown","2b04dc17":"markdown","30eaa830":"markdown"},"source":{"7f8b6486":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","956d9ad1":"# Setup notebook\nfrom pathlib import Path\nfrom learntools.time_series.style import *  # plot style settings\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression","a538618e":"#\u8bfb\u53d6\u8bad\u7ec3\u6570\u636e\nfolder_path='..\/input\/store-sales-time-series-forecasting'       #\u6587\u4ef6\u5939\u5730\u5740\n\ndtype = {\n    'store_nbr': 'category',\n    'family': 'category',\n    'sales': 'float32',\n    'onpromotion': 'uint64',\n} #\u8bbe\u7f6e\u6570\u636e\u7c7b\u578b\n\ntrain_data=pd.read_csv(folder_path+'\/train.csv',\n                       dtype=dtype,\n                       parse_dates=['date'],\n                       infer_datetime_format=True) #\u8bfb\u53d6\u8bad\u7ec3\u6570\u636e\n\nsales_data=train_data.copy() # \u590d\u5236\u4e00\u904d\u6570\u636e\nsales_data=sales_data.set_index('date').to_period('D') #\u5c06\u65e5\u671f\u8bbe\u7f6e\u4e3aindex\uff0c\u8f6c\u4e3a\u65e5\u671f\u7c7b\u578b\nsales_data #\u6253\u5370\u8f93\u51fa","816e115d":"# \u67e5\u770b\u6709\u65e0\u7f3a\u5931\u503c\nsales_data.isnull().sum()\n# \u65e0\u7f3a\u5931\u503c","13ed1a75":"# \u9500\u552e\u989d\u4e0e\u4fc3\u9500\u54c1\u79cd\u7684\u6570\u91cf\u7684\u76f8\u5173\u6027\u8f83\u9ad8\nsales_data.corr()","33f65056":"# \u6240\u6709\u5e97\u4e00\u5171\u670933\u4e2a\u54c1\u7c7b\u7684\u5546\u54c1\nsales_data.family.unique()","0e111580":"# \u6bcf\u5bb6\u5e97\u90fd\u670933\u79cd\u5546\u54c1\u7684\u9500\u91cf\u6570\u636e\nnumber_of_products_of_each_store=[]\nfor i in sales_data.groupby('store_nbr').family.unique():\n    number_of_products_of_each_store.append(len(i))\nnumber_of_products_of_each_store","538c2745":"# \u8ba1\u7b97\u6bcf\u5929\u6240\u6709\u5e97\u7684\u9500\u552e\u603b\u989d\ntotal_sales=sales_data.groupby('date').sum()['sales']\nax = total_sales.plot(**plot_params)\nax.set(title=\"Total Sales of all stores\", ylabel=\"Sales\") ","f3d5aaa0":"# \u5e73\u7a33\u6027\u68c0\u9a8c\nfrom statsmodels.graphics.tsaplots import plot_acf\nplot_acf(total_sales).show()\n# \u81ea\u76f8\u5173\u7cfb\u6570\u957f\u671f\u5927\u4e8e\u96f6\uff0c\u5177\u6709\u5f88\u5f3a\u7684\u957f\u671f\u76f8\u5173\u6027","27d5b211":"# \u5e73\u6ed1\u6309\u716730\u5929\u6ed1\u7a97\u5904\u7406\n\ntrend = total_sales.rolling(window=30,center=True,min_periods=15).mean()\n\nax = total_sales.plot(**plot_params, alpha=0.5)\nax = trend.plot(ax=ax, linewidth=3)","43c70398":"# \u63a5\u4e0b\u6765\u770b\u4e00\u4e0b transaction.csv\n# \u8bfb\u53d6\u4ea4\u6613\u6570\u636e\ntransaction=pd.read_csv(folder_path+'\/transactions.csv',\n                       parse_dates=['date'],\n                       infer_datetime_format=True) #\u8bfb\u53d6\u8bad\u7ec3\u6570\u636e\ntransaction=transaction.set_index('date').to_period('D') #\u8bbe\u7f6eindex\uff0c\u8f6c\u5316\u4e3aday\u7c7b\u578b","dc31fac0":"# \u8ba1\u7b97\u6bcf\u5929\u6240\u6709\u5e97\u7684\u4ea4\u6613\u603b\u7b14\u6570\ntotal_transactions=transaction.groupby('date').sum()['transactions']\nax = total_transactions.plot(**plot_params)\nax.set(title=\"Total Transactions of all stores\", ylabel=\"Transactions\") \n# \u6309\u5e74\u4e3a\u5355\u4f4d\u5448\u73b0\u660e\u663e\u7684\u5468\u671f\u6027","bf6aa000":"# \u8ba1\u7b97\u5355\u7b14\u4ea4\u6613\u7684\u9500\u552e\u989d ARPT = average sales per transaction\nsales_and_transaction = pd.concat([total_sales,total_transactions], axis=1)\nsales_and_transaction['ASPT']=sales_and_transaction.sales\/sales_and_transaction.transactions\nsales_and_transaction.ASPT.plot(**plot_params)\n\n# 2017\u5e74\u4e4b\u540e\u9010\u6b65\u7a33\u5b9a\uff0c\u4e00\u79cd\u601d\u8def\uff1a\u6216\u8bb8\u53ef\u4ee5\u4ece\u9884\u6d4b\u4ea4\u6613\u6570+\u9884\u6d4bASPT\u51fa\u53d1\uff0c\u4e24\u8005\u76f8\u4e58\u5373\u5f97Sales","54428589":"# \u63a5\u4e0b\u6765\u770b\u4e00\u4e0b stores.csv\n# \u8bfb\u53d6\u95e8\u5e97\u6570\u636e\ndtype = {'store_nbr': 'category'} \nstore=pd.read_csv(folder_path+'\/stores.csv',dtype=dtype) #\u8bfb\u53d6\u8bad\u7ec3\u6570\u636e\nstores=store.copy()\nstores=stores.set_index('store_nbr') #\u8bbe\u7f6e\u7d22\u5f15\nstores\n# \u4e00\u517154\u5bb6\u5e97 \u4e94\u79cdtype\u7684\u5e97 \u53ef\u80fd\u548c\u9500\u552e\u989d\u4f1a\u6709\u76f8\u5173\u6027 \u4e0b\u9762\u505a\u4e00\u4e2a\u5206\u6790\n# \u6240\u5728city\u4f1a\u53d7\u5230\u4e0d\u540c\u7684local holidays\u7684\u5f71\u54cd","b645caf9":"# \u901a\u8fc7store_nbr\u5217\u5c06\u8bad\u7ec3\u96c6sales\u7684\u6570\u636e\u548cstores\u7684type\u6570\u636e\u7ed3\u5408\nsales_data['type']=sales_data.store_nbr.map(stores.type)\nsales_data","2962f263":"# \u8ba1\u7b97\u6bcf\u5929\u4e0d\u540ctype\u7684\u5e97\u7684\u9500\u552e\u603b\u989d\nsales_data_type=sales_data.groupby(['date',sales_data['type']])['sales'].sum().reset_index()\nsales_data_type=sales_data_type.set_index('date')\nsales_data_type","585936ea":"# \u753b\u51fa\u4e0d\u540ctype\u5546\u5e97\u7684\u9500\u552e\u989d\u60c5\u51b5\nfor i in sales_data_type.type.unique():\n    sales_data_type.loc[sales_data_type.type==i].plot(label='type'+i)\nplt.legend()\nplt.show()\n\n# \u4e0d\u77e5\u9053\u600e\u4e48\u53e0\u52a0\u5728\u4e00\u5f20\u56fe\u4e0a sorry\n# \u53ef\u4ee5\u770b\u5230\u867d\u7136\u7eb5\u5750\u6807\u786e\u5b9e\u6709\u533a\u522b\uff0c\u4f46\u662f\u6574\u4f53\u7684\u8d70\u52bf\u57fa\u672c\u4e00\u81f4\uff0c\u56e0\u6b64\u540e\u7eed\u7684\u9884\u6d4b\u4e0d\u9700\u8981\u6839\u636etype\u8fdb\u884c\u7ec6\u5206\n# \u7531\u4e8e\u4e0d\u540c\u5730\u533a\u6709\u4e0d\u540c\u7684\u8282\u65e5\uff0c\u56e0\u6b64\u6839\u636e\u4e0d\u540c\u7684\u5730\u533a\u5206\u522b\u8fdb\u884c\u9884\u6d4b\uff0c\u6700\u540e\u518d\u52a0\u548c\uff0c\u6216\u8bb8\u4f1a\u597d\u4e00\u4e9b","e56baa10":"# \u8bfb\u53d6holidays_events.csv\u6570\u636e\nholiday=pd.read_csv(folder_path+'\/holidays_events.csv')\nholiday","a538caf9":"# \u6700\u540e\u770b\u4e00\u4e0b oil.csv\n# \u8bfb\u53d6\u4ea4\u6613\u6570\u636e\noil=pd.read_csv(folder_path+'\/oil.csv',\n                       parse_dates=['date'],\n                       infer_datetime_format=True) #\u8bfb\u53d6\u8bad\u7ec3\u6570\u636e\noil=oil.set_index('date').to_period('D') #\u8bbe\u7f6eindex\uff0c\u8f6c\u5316\u4e3aday\u7c7b\u578b\noil.plot(**plot_params) #\u6cb9\u4ef7\u8d70\u52bf","2b515c3e":"# \u5bf9\u6bd4\u4e0b\u4fbf\u5229\u5e97\u9500\u552e\u989d\u8d70\u52bf\ntrend.plot(linewidth=1)\n# \u5c31\u7b97\u8003\u8651\u5230\u6709\u4e00\u5b9a\u6ede\u540e\u6027\uff0c\u8c8c\u4f3c\u6cb9\u4ef7\u8dcc\u5f97\u8d8a\u591a\uff0c\u9500\u552e\u989d\u8d8a\u9ad8\n# \u53ef\u80fd\u662f\u7ecf\u6d4e\u4e0b\u884c\u5bfc\u81f4\u56fd\u6c11\u66f4\u591a\u5730\u53bb\u4fbf\u5229\u5e97\u8d2d\u4e70\u4fbf\u5b9c\u7684\u65e5\u7528\u54c1\uff0c\u800c\u6d88\u8d39\u4e0d\u8d77\u66f4\u8d35\u7684\u4ea7\u54c1\uff1f\n# \u5efa\u8bae\u4f5c\u4e3a\u5b8f\u89c2\u53d8\u91cf\u653e\u8fdb\u6a21\u578b","1b97a6d7":"**\u628a\u6570\u636e\u7684\u89e3\u91ca\u8bf4\u660e\u590d\u5236\u8fc7\u6765\u4f9bxdm\u53c2\u8003**\n\n**File Descriptions and Data Field Information**\n\n**train.csv**\nThe training data, comprising time series of features store_nbr, family, and onpromotion as well as the target sales.\n\nstore_nbr identifies the store at which the products are sold.\n\nfamily identifies the type of product sold.\n\nsales gives the total sales for a product family at a particular store at a given date. Fractional values are possible since products can be sold in fractional units (1.5 kg of cheese, for instance, as opposed to 1 bag of chips).\n\nonpromotion gives the total number of items in a product family that were being promoted at a store at a given date.\n\n**test.csv**\nThe test data, having the same features as the training data. You will predict the target sales for the dates in this file.The dates in the test data are for the 15 days after the last date in the training data.\n\n**sample_submission.csv**\nA sample submission file in the correct format.\n\n**stores.csv**\nStore metadata, including city, state, type, and cluster.\ncluster is a grouping of similar stores.\n\n**oil.csv**\nDaily oil price. Includes values during both the train and test data timeframes. (Ecuador is an oil-dependent country and it's economical health is highly vulnerable to shocks in oil prices.)\n\n**holidays_events.csv**\nHolidays and Events, with metadata\n\nNOTE: Pay special attention to the transferred column. A holiday that is transferred officially falls on that calendar day, but was moved to another date by the government. A transferred day is more like a normal day than a holiday. To find the day that it was actually celebrated, look for the corresponding row where type is Transfer. For example, the holiday Independencia de Guayaquil was transferred from 2012-10-09 to 2012-10-12, which means it was celebrated on 2012-10-12. Days that are type Bridge are extra days that are added to a holiday (e.g., to extend the break across a long weekend). These are frequently made up by the type Work Day which is a day not normally scheduled for work (e.g., Saturday) that is meant to payback the Bridge.\nAdditional holidays are days added a regular calendar holiday, for example, as typically happens around Christmas (making Christmas Eve a holiday).\n\n**Additional Notes**\nWages in the public sector are paid every two weeks on the 15 th and on the last day of the month. Supermarket sales could be affected by this.\nA magnitude 7.8 earthquake struck Ecuador on April 16, 2016. People rallied in relief efforts donating water and other first need products which greatly affected supermarket sales for several weeks after the earthquake.","2b04dc17":"\u7531\u4e8e\u4e0d\u540c\u5730\u533a\u6709\u4e0d\u540c\u7684\u8282\u65e5\uff0c\u56e0\u6b64\u6839\u636e\u4e0d\u540c\u7684\u5730\u533a\u5206\u522b\u8fdb\u884c\u9884\u6d4b\uff0c\u6700\u540e\u518d\u52a0\u548c\uff0c\u6216\u8bb8\u4f1a\u597d\u4e00\u4e9b\n\n\u4ece2016-4-16\u53f7\u5f00\u59cb\u4fbf\u662fTerremoto Manabi\u5730\u9707\uff0c\u53ef\u80fd\u5bf9\u540e\u7eed\u4e00\u4e2a\u6708\u7684\u9500\u552e\u989d\u90fd\u4f1a\u4ea7\u751f\u5f71\u54cd\uff0c\u56e0\u6b64\u8bad\u7ec3\u65f6\u5efa\u8bae\u53bb\u9664\u8fd9\u90e8\u5206\u6570\u636e\uff0c\u901a\u8fc7\u4e4b\u524d\u7684\u6570\u636e\u91cd\u65b0\u62df\u5408\u4e00\u4e2a\u6b63\u5e38\u60c5\u51b5\u4e0b\u7684\u7ed3\u679c\u518d\u7528\u6765\u9884\u6d4b","30eaa830":"\u5143\u65e6\uff0c\u51e0\u4e4e\u6240\u6709\u5e97\u5173\u95e8\uff0c\u6240\u4ee5\u63a5\u8fd10\n\n\u6570\u636e\u770b\u4e0a\u53bb\u5177\u5907\u5b63\u8282\u6027\uff0c\u6574\u4f53\u8d8b\u52bf\u662f\u4e0a\u5347\u7684\uff0c\u53ef\u80fd\u548c\u7ecf\u6d4e\u8d70\u52bf\u6302\u94a9\uff08\u540e\u7eed\u8ddf\u6cb9\u4ef7\u8d70\u52bf\u5bf9\u6bd4\u4e00\u4e0b\uff09"}}