{"cell_type":{"ada0daa4":"code","6307671f":"code","4515ac5a":"code","47781962":"code","14b22b9f":"code","e29b48fe":"code","4d3b77d4":"code","e46aeac9":"code","aa974950":"code","ef137d17":"code","b5c00c9c":"code","6e45de71":"code","8ef2d037":"code","844922ab":"code","caff2e9a":"markdown","4d5ac526":"markdown","17e79dd6":"markdown","00aeeaed":"markdown","f15daffd":"markdown","eeac7180":"markdown","18ec3566":"markdown","288034fd":"markdown","912fea6d":"markdown","d2810e27":"markdown","910839b2":"markdown"},"source":{"ada0daa4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6307671f":"# install vader if not already available\n!pip install vaderSentiment","4515ac5a":"from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\nanalyser = SentimentIntensityAnalyzer()","47781962":"def sentiment_analyzer_scores(sentence):\n    score = analyser.polarity_scores(sentence)\n    print(\"{:-<40} {}\".format(sentence, str(score)))","14b22b9f":"sentiment_analyzer_scores(\"The phone is super cool.\")","e29b48fe":"sentiment_analyzer_scores(\"The phone is super cool!\")\nsentiment_analyzer_scores(\"The phone is super cool!!\")\nsentiment_analyzer_scores(\"The phone is super cool!!!\")","4d3b77d4":"sentiment_analyzer_scores(\"The phone is super COOL!\")","e46aeac9":"sentiment_analyzer_scores(\"Food here is good.\")\nsentiment_analyzer_scores(\"Food here is moderately good.\")\nsentiment_analyzer_scores(\"Food here is extremely good.\")","aa974950":"sentiment_analyzer_scores(\"Food here is extremely good but service is horrible.\")","ef137d17":"sentiment_analyzer_scores(\"The food here isn\u2019t really all that great\")\nsentiment_analyzer_scores(\"The food here isn\u2019t that great\")\n\nsentiment_analyzer_scores(\"The food here is not really all that great\")\nsentiment_analyzer_scores(\"The food here is not that great\")\n","b5c00c9c":"print(sentiment_analyzer_scores('I am \ud83d\ude04 today'))\nprint(sentiment_analyzer_scores('\ud83d\ude0a'))\nprint(sentiment_analyzer_scores('\ud83d\ude25'))\nprint(sentiment_analyzer_scores('\u2639\ufe0f'))","6e45de71":"print(sentiment_analyzer_scores(\"Today SUX!\"))\nprint(sentiment_analyzer_scores(\"Today only kinda sux! But I'll get by, lol\"))","8ef2d037":"print(sentiment_analyzer_scores(\"Make sure you :) or :D today!\"))","844922ab":"import pandas as pd\n\nscores =[]\nsentences = [\"A really bad, horrible book.\",\"A good, awesome, wonderful, cool book !!!  :)\"]\n\nfor sentence in sentences:\n    score = analyser.polarity_scores(sentence)\n    scores.append(score)\n    \n#Converting List of Dictionaries into Dataframe\ndataFrame= pd.DataFrame(scores)\n\nprint(dataFrame)\n\nprint(\"Overall Sentiment Score for the multiple sentences :- \",dataFrame.mean())","caff2e9a":"# Emoticons","4d5ac526":"# Punctuation\nThe use of an exclamation mark(!), increases the magnitude of the intensity without modifying the semantic orientation. \nFor example, \u201cThe food here is good!\u201d is more intense than \u201cThe food here is good.\u201d and an increase in the number of (!), increases the magnitude accordingly.","17e79dd6":"# Slangs","00aeeaed":"# Degree Modifiers\n\nAlso called intensifiers, they impact the sentiment intensity by either increasing or decreasing the intensity. For example, \u201cThe service here is extremely good\u201d is more intense than \u201cThe service here is good\u201d, whereas \u201cThe service here is marginally good\u201d reduces the intensity.","f15daffd":"# Processing Multiple Sentences","eeac7180":"# Preceding Tri-gram\n\nBy examining the tri-gram preceding a sentiment-laden lexical feature, we catch nearly 90% of cases where negation flips the polarity of the text. A negated sentence would be \u201cThe food here isn\u2019t really all that great\u201d.","18ec3566":"# Capitalization\n\nUsing upper case letters to emphasize a sentiment-relevant word in the presence of other non-capitalized words, increases the magnitude of the sentiment intensity. \nFor example, \u201cThe food here is GREAT!\u201d conveys more intensity than \u201cThe food here is great!\u201d","288034fd":"## Note\n\nPlease share, upvote and comment to help me create and share more content for the community.\nThank you all.","912fea6d":"# Handling Emojis, Slangs and Emoticons\n\nVADER performs very well with emojis, slangs and acronyms in sentences. \n\nLet us see each with an example.","d2810e27":"# Conjunctions\n\nUse of conjunctions like \u201cbut\u201d signals a shift in sentiment polarity, with the sentiment of the text following the conjunction being dominant. \u201cThe food here is great, but the service is horrible\u201d has mixed sentiment, with the latter half dictating the overall rating.","910839b2":"# Introduction\n\nSentiment analysis refers to the use of natural language processing, text analysis, computational linguistics, and many more to identify and quantify the sentiment of some kind of text or audio.\n\n\nThere are two major techniques for sentiment analysis :-\n\n\u2022 Supervised machine learning\n\n\u2022 Unsupervised lexicon-based \n\n\nOften, you may not have the convenience of a well-labeled training dataset. \nIn those situations, you need to use unsupervised techniques for predicting the sentiment by using knowledgebases, ontologies, databases, and lexicons that have detailed information specially curated and prepared just for sentiment analysis.\n\n\nHere we use unsupervised lexicon based approach based on Vader lexicon for sentiment analysis."}}