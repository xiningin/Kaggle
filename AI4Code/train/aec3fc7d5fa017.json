{"cell_type":{"49632a90":"code","db709e16":"code","7506cd18":"code","a8e0ae9c":"code","c4c036c7":"code","e737f02d":"code","028fd08b":"code","e6196104":"markdown","1742021a":"markdown","cc7e33d2":"markdown","18ad2918":"markdown","ad31c4d8":"markdown","7d6a21d7":"markdown","4ba9e26d":"markdown","039c34ed":"markdown","9ec5e328":"markdown","eef1b20a":"markdown","539b221c":"markdown","41d83e3e":"markdown"},"source":{"49632a90":"import itertools\nimport numpy as np\nimport pandas as pd\nsymbols = \"\ud83c\udf85\ud83e\udd36\ud83e\udd8c\ud83e\udddd\ud83c\udf84\ud83c\udf81\ud83c\udf80\"\nschedule = pd.read_csv(\"..\/input\/best2440\/submission-10.csv\").schedule.tolist()\nwords = [s.translate(str.maketrans(symbols, \"1234567\")) for s in schedule]\nwords_f = words.copy()\nlist(map(len, words))","db709e16":"block = [[],[],[]]\nprev = 0\nfor j in range(3):\n    for i in range(len(words[j])-6):\n        sub = words[j][i:i+7]\n        if  ''.join(sorted(sub)) == '1234567' and sub[0:2] == '12':\n            if i != 0:\n                block[j].append(words[j][prev:i])\n            prev = i\nblock[j].append(words[j][prev:i+7])\nfor i,e in enumerate(block):\n    print(f'block[{i}]:\\n{e}')","7506cd18":"for i in range(len(words[0])-13):\n    if words[1][i:i+7]=='1325467':\n        words[1] = words[1].replace(words[1][i:i+14],'1*254637')\n    if words[0][i:i+7]=='1523746':\n        words[0] = words[0].replace(words[0][i:i+14],'1*237456')\n    if words[1][i:i+7]=='1623745':\n        words[1] = words[1].replace(words[1][i:i+14],'1*237465')\n    if words[0][i:i+7]=='1627543':\n        words[0] = words[0].replace(words[0][i:i+14],'1*275463')\n    if words[2][i:i+7]=='1327546':\n        words[2] = words[2].replace(words[2][i:i+14],'1*275436')\n    if words[2][i:i+7]=='1725463':\n        words[2] = words[2].replace(words[2][i:i+14],'1*254673')\nprint('After exchaning:',[len(x) for x in words])\n        ","a8e0ae9c":"best_words1 = words[0].replace('*','\ud83c\udf1f')\nbest_words2 = words[1].replace('*','\ud83c\udf1f')\nbest_words3 = words[2].replace('*','\ud83c\udf1f')\nbest_words = [best_words1,best_words2,best_words3]\nprint([len(x) for x in best_words])\nfor i,e in enumerate(best_words):\n    print(f'string{i+1}:\\n{e}')","c4c036c7":"mandatory = ['12'+''.join(x) for x in itertools.permutations(['3','4','5','6','7'], 5)]\nnum1=0\nfor p1 in mandatory:\n    if p1 not in words[0] or p1 not in words[1] or p1 not in words[2]:\n        num1+=1\n        print(p1)\nprint('count1:',num1)\n\nall_permutations = [''.join(x) for x in itertools.permutations(['1','2','3','4','5','6','7'], 7)]\nnum2=0\nfor p2 in all_permutations:\n    if p2 not in words[0] and p2 not in words[1] and p2 not in words[2]:\n        num2+=1\n        print(p2)\nprint('count2:',num2)","e737f02d":"submission = pd.Series([a.translate(str.maketrans(\"1234567*\", symbols+\"\ud83c\udf1f\")) for a in words], name='schedule')\nsubmission.to_csv('submission.csv', index=False)","028fd08b":"mandatory = [''.join(x) for x in itertools.permutations(['1','2','3','4','5','6','7'], 7)]\ndicf = {} #count every permutation\na1,b1,c1=words_f #2440 solution\nfor s in mandatory:\n    dicf[s] = 0\n    for i in range(len(a1)-6):\n        if a1[i:i+7]==s:\n            dicf[s]+=1\n    for j in range(len(b1)-6):\n        if b1[j:j+7]==s:\n            dicf[s]+=1\n    for k in range(len(c1)-6):\n        if c1[k:k+7]==s:\n            dicf[s]+=1\nprint('*******1*******lose:')\n##split point1: 423765','123754 (from block[0])\nx = '423765123754'\nfor i in range(len(x)-6):\n    xt = x[i:i+7]\n    if ''.join(sorted(xt))=='1234567':\n        if dicf[xt]==1:\n            print(xt)\nprint('*******2*******lose:')\n##split point2: 273654','123764 (from block[0])\nx = '273654123764'\nfor i in range(len(x)-6):\n    xt = x[i:i+7]\n    if ''.join(sorted(xt))=='1234567':\n        if dicf[xt]==1:\n            print(xt)\nprint('*******3*******lose:')\n##split point3: 273654','126374(from blcok[1])\nx = '2736541263745'\nfor i in range(len(x)-6):\n    xt = x[i:i+7]\n    if ''.join(sorted(xt))=='1234567':\n        if dicf[xt]==1:\n            print(xt)\n##split point4: 263745', '123764(from block[1])\nprint('*******4*******lose:')\nx = '263745123764'\nfor i in range(len(x)-6):\n    xt = x[i:i+7]\n    if ''.join(sorted(xt))=='1234567':\n        if dicf[xt]==1:\n            print(xt)\n##when it's done, we lose '1423765' and add '1523764'\n\n\nprint('********match********') \n##find out where is the other part of '2376' Exchaning Pair. \nfor i in range(len(a1)-6):\n    if a1[i:i+7]=='1523764':\n        print('block[0]',i,a1[i:i+7])\n    if b1[i:i+7]=='1523764':\n        print('block[1]',i,b1[i:i+7])\n    if c1[i:i+7]=='1523764':\n        print('block[2]',i,c1[i:i+7])","e6196104":"**If you are quite good at coding, maybe you can make it an end-end way.**","1742021a":"If you wanna do it completely:\n* From the result we know it's in block[1],then continue regrouping to get a complete '2376'Exching Pair.\n* When you get 3, congrats, you've just found the 2428 treasure!!!","cc7e33d2":"## Visualize where to use \ud83c\udf1f","18ad2918":"**Check out if we had lost any permutation after doing exchaning.**\n**if didn't: count1=6    count2=36**","ad31c4d8":"**Split all permutations begin with '12' (visualizing)**(This cell is a slightly update version of **SeshuRajuP**'s notebook for analyzing.)","7d6a21d7":"# Example:\nTo get half part of '2376' Exchaning Pair in block[0]\n* find the ...2376.' in block[0], find the split point, regroup:\n* ...'12376542137654231765423716542376154237651423765'...'1237645'... -->\n...'12376542137654231765423716542376154237651423765','1237645'...,...\n* after regrouping block[0], we lose '5412376', then try to regroup block[1] or block[2] to get the lost one back,here we can regroup block[1]:","4ba9e26d":"# End \ud83d\ude42\ud83d\ude43\ud83d\ude14\ud83d\ude29\ud83d\ude2d\ud83d\ude33\ud83d\ude00\ud83d\ude03\ud83d\ude04\ud83d\ude01\ud83d\ude0b","039c34ed":"## We get to 2428 finally but easily!","9ec5e328":"# This a quit easy understanding but efficient way to get a 2428 solution.","eef1b20a":"# If you wanna try this way, please read this:\n* If you meet problems as below, regroup the block or blocks:\n1. Sometimes those Exchanging Pair doesn't show up directly.\n2. you've get half part of one, to get a complete Exchaing Pair.\n3. After exchaning, some permutations has lost.","539b221c":"1. Split words\n2. Rebalence to find out Exchaning Pair\n3. Do Exchaning\n4. Check permutations\n5. -->2428 solution","41d83e3e":"# Find out 3 Exchaning Pair from above\n1. **block[0]<->block[1]**\n2. **block[1]<->block[2]**\n3. **block[0]<->block[2]**\n**What is Exchaning Pair?**\nfor example:\n* **'...|1523746', '1237456|...' in block[0] with '...|1623745', '1237465|...' in block[1]** (must in deferent blocks)is Called an **Exchaning Pair**, also, you can call it anything you want.\n* When we doing **|1523746', '1237456|-->|1\ud83c\udf1f237456|, block[0] lose '1523746' and add '1623745'** for certain. Same, doing **|1623745', '1237465|-->|1\ud83c\udf1f237465|, block[1] lose '1623745' and add '1523746'**.block[0].add->block[1].lose,block[1].add->block[0].lose\n* Finally, we shorten the total distance for 12 by doing exchaning like this for one time, In most case,except the **lose** and **add**, this will just lose duplicate permutations,So we won't lose any permutation actually*(But sometimes one block or more will lose one and the Exchaning Pair may won't show up directly, then we need to rebalance the block by regrouping strings were split above to get the lost permutation back, this can be fixed easily or toughly, I'll show you guys how to do this in the last part)*. If we do this 3 times, we shorten the total distance for 36, every block benefit 12.\n* So, all we need to is to find out 3 Exchaning Pair. Actually there are more than just one Exchaning Pair included in every block of a 2440 solution, so if we find one is hard to get, then we can pass it and turn to another.\n* Then, do exchaning, as below:"}}