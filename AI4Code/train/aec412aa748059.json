{"cell_type":{"e7a7e36b":"code","7d8fdacd":"code","d59b06e5":"code","61276125":"code","00c405c6":"code","7e982e5e":"code","8a5e7c9a":"code","69b4b7ff":"code","ff1c42ae":"code","bec09715":"code","56be9429":"code","07674eeb":"code","efc9f2ff":"code","3dfa56b4":"code","be86a76f":"code","d250d8bc":"code","59519c31":"markdown","c5fe7723":"markdown","b3a6fea9":"markdown","05d62239":"markdown","f8a2d01d":"markdown","c080af8d":"markdown","f63eb282":"markdown","f4b8a3fb":"markdown"},"source":{"e7a7e36b":"#!pip install fastai --upgrade","7d8fdacd":"from fastai import *\nfrom fastai.tabular import *","d59b06e5":"input_path = '\/kaggle\/input\/'\ntrain_df = pd.read_csv(f'{input_path}train.csv')\ntest_df = pd.read_csv(f'{input_path}test.csv')","61276125":"for df in [train_df, test_df]:\n    df['Title'] = df['Name'].str.split(',').str[1].str.split(' ').str[1]\n    df['Deck'] = df['Cabin'].str[0]\n\n# find mean age for each Title across train and test data sets\nall_df = pd.concat([train_df, test_df], sort=False)\nmean_age_by_title = all_df.groupby('Title').mean()['Age']\n# update missing ages\nfor df in [train_df, test_df]:\n    for title, age in mean_age_by_title.iteritems():\n        df.loc[df['Age'].isnull() & (df['Title'] == title), 'Age'] = age","00c405c6":"test_df.Fare.fillna(0,inplace=True)","7e982e5e":"dep_var = 'Survived'\ncat_names = ['Pclass', 'Sex', 'Embarked', 'Title', 'Deck']\ncont_names = ['Age', 'Fare', 'SibSp', 'Parch']\nprocs = [FillMissing, Categorify, Normalize]\n\ntest = TabularList.from_df(test_df, cat_names=cat_names, cont_names=cont_names, procs=procs)\ndata = (TabularList.from_df(train_df, path='.', cat_names=cat_names, cont_names=cont_names, procs=procs)\n                           .split_by_idx(list(range(0,200)))\n                           #.split_by_idx(valid_idx=range(200,400))\n                           .label_from_df(cols=dep_var)\n                           .add_test(test, label=0)\n                           .databunch())","8a5e7c9a":"np.random.seed(101)","69b4b7ff":"#??tabular_learner","ff1c42ae":"#learn = tabular_learner(data, layers=[60, 20], metrics=accuracy)\nlearn = tabular_learner(data, layers=[600,200], metrics=accuracy, emb_drop=0.1)\n#learn.fit(10)","bec09715":"learn.lr_find()","56be9429":"learn.recorder.plot()","07674eeb":"learn.fit(15, 1e-2)","efc9f2ff":"# get predictions\npreds, targets = learn.get_preds()\n\npredictions = np.argmax(preds, axis = 1)\npd.crosstab(predictions, targets)","3dfa56b4":"predictions, *_ = learn.get_preds(DatasetType.Test)\nlabels = np.argmax(predictions, 1)","be86a76f":"sub_df = pd.DataFrame({'PassengerId': test_df['PassengerId'], 'Survived': labels})\nsub_df.to_csv('submission.csv', index=False)","d250d8bc":"sub_df.tail()","59519c31":"# Predicting survival of Titanic passengers","c5fe7723":"\n## Fastai setup","b3a6fea9":"## Inference\nPredictions come as an array of probabilities of death or survival  for each passenger in the test set. Use `argmax` to convert each to`1` or `0` then construct the submission dataframe and save to CSV.","05d62239":"## Feature engineering\n- Extract *Title* from the name colum. \n- Extract *Deck* from the first character of the cabin number.\n- Fill in missing *Age* values with the mean age for passengers with the same title.","f8a2d01d":"Need at least v1.0.25 of `fastai` so update default Kaggle version.","c080af8d":"Check that what we are submitting looks sensible.","f63eb282":"## Training","f4b8a3fb":"## Load data"}}