{"cell_type":{"33ae37b9":"code","92110713":"code","82b2db65":"code","ddce1b90":"code","165b4733":"code","28a0fc6f":"code","54443621":"code","e1c1fe08":"code","80acfe0c":"code","0025f9d0":"code","f4033875":"code","aca8486e":"code","212c6213":"code","00c8dac2":"code","2970c0c2":"code","96e56a25":"code","b846c0a7":"code","b54eacba":"code","4517f71d":"code","73d43656":"code","6d995430":"code","2f04dcf9":"code","4bd81a78":"code","a858d14c":"code","f0fb5a73":"code","813593bb":"code","bd48aad1":"code","31bf9bd5":"code","08596ce9":"code","bb09c04e":"code","76e341e7":"code","230fe972":"code","6a71be3f":"code","c27fb7bb":"code","57f01eaa":"code","0011a99a":"code","ee915ecc":"code","3beb5edc":"code","e5f7a1e1":"code","f3b0e867":"code","b91cc979":"code","65338dd8":"code","bf964ef2":"code","18d49564":"code","ae06f280":"code","b8ef3fba":"code","8bdcbd2a":"code","c2a137c4":"code","8915f415":"code","5d1dc1e1":"code","81cbe31a":"code","51d06ac2":"code","f94e250b":"code","c7d1b035":"code","18e23fd6":"code","9f082a4e":"code","7543b240":"code","341e16f8":"code","8174f12c":"code","787a082f":"code","0a0310b0":"code","cee6a3ab":"code","61205db2":"code","0b3e7f2d":"code","5b853242":"code","8c30fc20":"code","fbc456d8":"code","534dbd3d":"code","ef3be437":"code","a40e3efb":"code","894321b3":"code","6d1a7de5":"code","cfdcb85c":"code","8b89049e":"code","cc060e3e":"code","feb847cc":"code","87645afb":"code","43349bdb":"code","61750485":"code","397ca62e":"code","d8505fbe":"code","07e0ef98":"code","20ec4e65":"code","384e4358":"code","282f834c":"code","c3c1b6c4":"code","7b5ae513":"code","b895389a":"code","1d216df4":"code","a956c623":"code","6695b58c":"code","6e299b21":"code","c58adff6":"code","2a592515":"code","54e82d78":"code","77ae96f7":"code","049316b5":"code","1deebddb":"markdown","10dfa3e6":"markdown","17bfa756":"markdown","b373a45a":"markdown","008852a3":"markdown","1f901f2b":"markdown","162ba781":"markdown","19013e65":"markdown","a806bd07":"markdown","e10aa468":"markdown","291230b8":"markdown","221d40e3":"markdown","a88b9c5a":"markdown","8252b983":"markdown","adcd00ac":"markdown","3b28f008":"markdown","dedd7e7a":"markdown","35298798":"markdown","920dea28":"markdown","6d573703":"markdown","50edd0f0":"markdown","f82303fd":"markdown","2e345e18":"markdown","e833eb68":"markdown"},"source":{"33ae37b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","92110713":"import warnings\nwarnings.filterwarnings('ignore')","82b2db65":"# Read the data\ntrain_d = pd.read_csv('..\/input\/cat-in-the-dat\/train.csv') \ntest_d = pd.read_csv('..\/input\/cat-in-the-dat\/test.csv')","ddce1b90":"train_d.shape ","165b4733":"test_d.shape","28a0fc6f":"train_d.head()","54443621":"train_d.tail()","e1c1fe08":"test_d.columns","80acfe0c":"train_d.columns","0025f9d0":"train_d.info()","f4033875":"train_d.describe()","aca8486e":"train_d.isnull().sum()","212c6213":"for col in train_d.columns[1:]:\n    print(col, train_d[col].nunique())","00c8dac2":"binary_col = ['bin_0', 'bin_1', 'bin_2', 'bin_3', 'bin_4']","2970c0c2":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfor n, col in enumerate(train_d[binary_col]): \n    plt.figure(n)\n    sns.countplot(x=col, data=train_d, hue='target', palette='husl')","96e56a25":"train_d['target'].value_counts()","b846c0a7":"sns.swarmplot(x=train_d.head(250)['bin_0'], y=train_d.head(250)['target'])","b54eacba":"sns.swarmplot(x=train_d.head(250)['target'], y=train_d.head(250)['month'])","4517f71d":"sns.swarmplot(x=train_d.head(250)['target'], y=train_d.head(250)['day'])","73d43656":"sns.swarmplot(x=train_d.head(250)['day'], y=train_d.head(250)['target'])","6d995430":"# Histogram \nsns.distplot(a=train_d['target'], kde=False)","2f04dcf9":"sns.kdeplot(data=train_d['target'], shade=True)\n","4bd81a78":" bin_d = train_d[['bin_0','bin_1','bin_2','bin_3', 'bin_4']]","a858d14c":"bin_d.head()","f0fb5a73":"from sklearn.preprocessing import LabelEncoder\ntrain_df=pd.DataFrame()\nlabel=LabelEncoder()\nfor col in  train_d.columns:\n    if 'bin' in col:\n        train_df[col]=label.fit_transform(train_d[col])\n    else:\n        train_df[col]=train_d[col]\n        \n\n","813593bb":"train_df.head(3)","bd48aad1":"test_d.head(4)","31bf9bd5":"from sklearn.preprocessing import LabelEncoder\ntest_df=pd.DataFrame()\nlabel=LabelEncoder()\nfor col in  test_d.columns:\n    if 'bin' in col:\n        test_df[col]=label.fit_transform(test_d[col])\n    else:\n        test_df[col]=test_d[col]\n    ","08596ce9":"test_df.head(4) ","bb09c04e":"binary_cols = ['bin_0', 'bin_1', 'bin_2', 'bin_3', 'bin_4']","76e341e7":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfor n, col in enumerate(train_df[binary_cols]): \n    plt.figure(n)\n    sns.countplot(x=col, data=train_df, hue='target', palette='husl')","230fe972":"train_df.shape  ,  test_df.shape","6a71be3f":"nominal_cols = ['nom_0', 'nom_1', 'nom_2', 'nom_3', 'nom_4', 'nom_5', 'nom_6', 'nom_7', 'nom_8', 'nom_9']","c27fb7bb":"for n, col in enumerate(train_df[nominal_cols]): \n    plt.figure(n)\n    sns.countplot(x=col, data=train_df, hue='target', palette='husl')","57f01eaa":"low_cardinality_nom_cols = []\nhigh_cardinality_nom_cols = []\n\n\nfor nom_col in range(10):\n    nom_col_name = \"nom_\"+str(nom_col)\n    if train_df[nom_col_name].nunique() < 10:\n        low_cardinality_nom_cols.append(nom_col_name)\n    else:\n        high_cardinality_nom_cols.append(nom_col_name)\n\nprint(\"Nominal columns low cardinality (<=10):\", low_cardinality_nom_cols)\nprint(\"Nominal columns with high cardinality (>10):\", high_cardinality_nom_cols)\n","0011a99a":"col_nom = train_df.columns[6:11]","ee915ecc":"col_nom","3beb5edc":"from sklearn.preprocessing import OneHotEncoder\n\n# Apply one-hot encoder to each column with categorical data\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\n\nOH_cols_train = pd.DataFrame(OH_encoder.fit_transform(train_df[low_cardinality_nom_cols]))\nOH_cols_test = pd.DataFrame(OH_encoder.transform(test_df[low_cardinality_nom_cols]))\n\n# One-hot encoding removed index; put it back\nOH_cols_train.index = train_df.index\nOH_cols_test.index = test_df.index\n\n# Remove categorical columns (will replace with one-hot encoding)\nnum_X_train = train_df.drop(low_cardinality_nom_cols, axis=1)\nnum_X_valid = test_df.drop(low_cardinality_nom_cols, axis=1)\n\n# Add one-hot encoded columns to numerical features\nOH_X_train = pd.concat([num_X_train, OH_cols_train], axis=1)\nOH_X_tset = pd.concat([num_X_valid, OH_cols_test], axis=1)","e5f7a1e1":"OH_X_train.head()","f3b0e867":"OH_X_tset.head()","b91cc979":"ord_col = ['ord_0', 'ord_1', 'ord_2', 'ord_3', 'ord_4', 'ord_5']","65338dd8":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfor n, col in enumerate(train_df[ord_col]): \n    plt.figure(n)\n    sns.countplot(x=col, data=train_df, hue='target', palette='husl')","bf964ef2":"from sklearn.preprocessing import LabelEncoder\ntrain_n=pd.DataFrame()\nlabel=LabelEncoder()\nfor col in  ['ord_0', 'ord_1', 'ord_2', 'ord_3', 'ord_4', 'ord_5']:\n   \n        train_n[col]=label.fit_transform(OH_X_train[col])\n    \n","18d49564":"    \ndata_t = OH_X_train.drop(['ord_0', 'ord_1', 'ord_2', 'ord_3', 'ord_4', 'ord_5'], axis=1) \ntrain_dd = pd.concat([data_t,train_n], axis = 1)","ae06f280":"train_dd.head()","b8ef3fba":"from sklearn.preprocessing import LabelEncoder\ntest_n=pd.DataFrame()\nlabel=LabelEncoder()\nfor col in  ['ord_0', 'ord_1', 'ord_2', 'ord_3', 'ord_4', 'ord_5']:\n   \n        test_n[col]=label.fit_transform(OH_X_tset[col])\n    \n    \ndata_t = OH_X_tset.drop(['ord_0', 'ord_1', 'ord_2', 'ord_3', 'ord_4', 'ord_5'], axis=1) \ntest_dd = pd.concat([data_t,test_n], axis = 1)","8bdcbd2a":"test_dd.head(4)","c2a137c4":"for col in high_cardinality_nom_cols:\n    train_dd[f'hash_{col}'] = train_dd[col].apply( lambda x: hash(str(x)) % 5000 )\n    test_dd[f'hash_{col}'] = test_dd[col].apply( lambda x: hash(str(x)) % 5000 )","8915f415":"for col in high_cardinality_nom_cols:\n    enc_nom_1 = (train_dd.groupby(col).size()) \/ len(train_dd)\n    train_dd[f'freq_{col}'] = train_dd[col].apply(lambda x : enc_nom_1[x])\n    #test_dd[f'enc_{col}'] = test_dd[col].apply(lambda x : enc_nom_1[x])","5d1dc1e1":"from sklearn.preprocessing import LabelEncoder\n\n# Label Encoding\nfor f in ['nom_5', 'nom_6', 'nom_7', 'nom_8', 'nom_9']:\n    if train_dd[f].dtype=='object' or test_dd[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(train_dd[f].values) + list(test_dd[f].values))\n        train_dd[f'le_{f}'] = lbl.transform(list(train_dd[f].values))\n        test_dd[f'le_{f}'] = lbl.transform(list(test_dd[f].values))","81cbe31a":"new_feat = ['hash_nom_5', 'hash_nom_6', 'hash_nom_7', 'hash_nom_8',\n            'hash_nom_9',  'freq_nom_5', 'freq_nom_6', 'freq_nom_7', \n            'freq_nom_8', 'freq_nom_9', 'le_nom_5', 'le_nom_6',\n            'le_nom_7', 'le_nom_8', 'le_nom_9']\n\nnew_da = (train_dd[high_cardinality_nom_cols + new_feat])","51d06ac2":"new_da.describe()","f94e250b":"train_dd[['nom_5', 'hash_nom_5', 'freq_nom_5', 'le_nom_5']].head()","c7d1b035":"train_dd.head(4)","18e23fd6":"test_dd.head(4)","9f082a4e":"train_dd.head(4)","7543b240":"train_dd.drop([ \n                #'hash_nom_6', 'hash_nom_7', 'hash_nom_8', 'hash_nom_9',\n               'le_nom_5', 'le_nom_6', 'le_nom_7', 'le_nom_8', 'le_nom_9',\n                'freq_nom_5','freq_nom_6', 'freq_nom_7', 'freq_nom_8', 'freq_nom_9',\n              'nom_5', 'nom_6', 'nom_7', 'nom_8', 'nom_9'\n         ], axis=1, inplace=True)\n\n#test_dd.drop([\n              #'hash_nom_6', 'hash_nom_7', 'hash_nom_8', 'hash_nom_9', \n #             'le_nom_5', 'le_nom_6', 'le_nom_7', 'le_nom_8', 'le_nom_9',\n  #            'freq_nom_5', 'freq_nom_6', 'freq_nom_7', 'freq_nom_8', 'freq_nom_9',\n   #           'nom_5', 'nom_6', 'nom_7', 'nom_8', 'nom_9',\n    #          ], axis=1, inplace=True)\n\n","341e16f8":"train_dd.head(4)","8174f12c":"test_dd.drop([\n              #'hash_nom_6', 'hash_nom_7', 'hash_nom_8', 'hash_nom_9', \n            'le_nom_5', 'le_nom_6', 'le_nom_7', 'le_nom_8', 'le_nom_9',\n  #          'freq_nom_5', 'freq_nom_6', 'freq_nom_7', 'freq_nom_8', 'freq_nom_9',\n            'nom_5', 'nom_6', 'nom_7', 'nom_8', 'nom_9'\n            ], axis=1, inplace=True)","787a082f":"test_dd.head(4)","0a0310b0":"date_cols = ['day', 'month']\n\nfor n, col in enumerate(train_df[date_cols]): \n    plt.figure(n)\n    sns.countplot(x=col, data=train_df, hue='target', palette='husl')","cee6a3ab":"sns.scatterplot(x=train_df['bin_0'], y=train_df['ord_3'], hue=train_df['target'])","61205db2":"sns.swarmplot(x=train_dd.head(10)['hash_nom_5'],\n              y=train_dd.head(10)['day'])","0b3e7f2d":"# Set the width and height of the figure\nplt.figure(figsize=(10,6))\n\n# Add title\nplt.title(\"ord 3 , by Month\")\n\n# Bar chart showing average arrival delay for Spirit Airlines flights by month\nsns.barplot(x=train_dd.head(20)['month'], y=train_dd.head(20)['ord_3'])\n\n# Add label for vertical axis\nplt.ylabel(\"in \")","5b853242":"# Set the width and height of the figure\nplt.figure(figsize=(10,6))\n\n# Add title\nplt.title(\"hash_nom_6  , by day\")\n\n# Bar chart showing average arrival delay for Spirit Airlines flights by month\nsns.barplot(x=train_dd.head(20)['day'], y=train_dd.head(20)['hash_nom_6'])\n\n# Add label for vertical axis\nplt.ylabel(\"in \")","8c30fc20":"# Set the width and height of the figure\nplt.figure(figsize=(14,7))\n\n# Add title\nplt.title(\"Heatmap\")\n\n# Heatmap showing average arrival delay for each airline by month\nsns.heatmap(data=train_dd.head(15), annot=False)\n\n# Add label for horizontal axis\nplt.xlabel('data')","fbc456d8":"cyclic_cols = ['day','month']\n\nfig, axs = plt.subplots(1, len(cyclic_cols), figsize=(8, 4))\n\nfor i in range(len(cyclic_cols)):\n    col = cyclic_cols[i]\n    ax = axs[i]\n    sns.barplot(x=col, y='target', data=train_dd, ax=ax)\n    ax.set_title(col, fontsize=14, fontweight='bold')\n    ax.legend(title=\"target\", loc='upper center')","534dbd3d":"train_dd.shape\n","ef3be437":"test_dd.shape","a40e3efb":"\ntrain_dd = train_dd.drop([\"id\"],axis=1)\n\n\ntrain_dd.shape","894321b3":"# Select  predictors\ncols_to_use = [     'bin_0',      'bin_1',      'bin_2',      'bin_3',      'bin_4',\n              'day',      'month',            0,            1,            2,\n                  3,            4,            5,            6,            7,\n                  8,            9,           10,           11,           12,\n                 13,           14,           15,           16,           17,\n                 18,           19,           20,           21,           22,\n                 23,           24,      'ord_0',      'ord_1',      'ord_2',\n            'ord_3',      'ord_4',      'ord_5', 'hash_nom_5', 'hash_nom_6',\n       'hash_nom_7', 'hash_nom_8', 'hash_nom_9']\n\nX = train_dd[cols_to_use]\n\n# Select target\ny = train_dd.target\n\n# Separate data into training and validation sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y)","6d1a7de5":"X_train.shape","cfdcb85c":"X_valid.shape","8b89049e":"test_dd.head()","cc060e3e":"#from sklearn.ensemble import RandomForestRegressor","feb847cc":"#from xgboost import XGBRegressor\n\n \n#my_model = XGBRegressor(n_estimators=1000, learning_rate=0.05, n_jobs=4)\n#my_model.fit(X_train, y_train, \n #            early_stopping_rounds=5, \n  #           eval_set=[(X_valid, y_valid)], \n   #          verbose=False)","87645afb":"#from sklearn.metrics import mean_absolute_error\n\n#predictions = my_model.predict(X_valid)\n\n# Calculate MAE\n#mae_1 = mean_absolute_error(y_valid, predictions) \n\n\n#print(\"Mean Absolute Error:\" , mae_1)","43349bdb":"#from sklearn.metrics import accuracy_score\n#acc = accuracy_score(y_valid, predictions)\n\n#print(\"accuracy_score:\" , acc)","61750485":"\ntest_X = test_dd[cols_to_use]\n\n# Use the model to make predictions\n#predicted_target = my_model.predict(test_X)\n# We will look at the predicted prices to ensure we have something sensible.\n#print(predicted_target)","397ca62e":"#my_submission = pd.DataFrame({'Id': test_X.index, 'target': predicted_target})\n# you could use any filename. We choose submission here\n#my_submission.to_csv('submission.csv', index=False)","d8505fbe":"#from sklearn.linear_model import LogisticRegression\n\n#lr_m = LogisticRegression( solver=\"lbfgs\",max_iter=500,n_jobs=4)\n\n#lr_m.fit(X_train, y_train)","07e0ef98":"#from sklearn.metrics import mean_absolute_error\n\n#predictions = lr_m.predict(test_X)\n\n# Calculate MAE\n#mae_1 = mean_absolute_error(y_valid, predictions) \n\n\n#print(\"Mean Absolute Error:\" , mae_1)","20ec4e65":"#from sklearn.metrics import accuracy_score\n#acc = accuracy_score(y_valid, predictions)\n\n#print(\"accuracy_score:\" , acc)","384e4358":"#rf_model = RandomForestRegressor(n_estimators= 280,max_depth=40,max_features=11,max_leaf_nodes=350,random_state=1)\n#rf_model.fit(X_train, y_train)\n","282f834c":"#rf_val_predictions = rf_model.predict(test_X)\n","c3c1b6c4":"from xgboost import XGBRegressor\nmy_model_2 = XGBRegressor(n_estimators=700, learning_rate=0.2, n_jobs=4)\nmy_model_2.fit(X_train,y_train)\n\ntest_preds = my_model_2.predict(test_X)\n","7b5ae513":"# generating one row  \n#X_rows = X_train.sample(frac =.03) \n  \n# checking if sample is 0.25 times data or not \n  \n#if (0.03*(len(X_train))== len(X_rows)): \n #   print( \"Cool\") \n  #  print(len(X_train))\n   # print('\\n')      \n    #print(len(X_rows))       \n ","b895389a":"# generating one row  \n#y_rows = y_train.sample(frac =.03) \n  \n# checking if sample is 0.25 times data or not \n  \n#if (0.03*(len(y_train))== len(y_rows)): \n #   print( \"Cool\") \n  #  print(len(y_train))\n   # print('\\n')      \n   # print(len(y_rows))   ","1d216df4":"#parameters = [{'n_estimators': [ 800, 900, 1000], \n #                    'learning_rate': [0.05, 0.1, 0.15, 0.2]\n  #                  }]","a956c623":"#from sklearn.model_selection import GridSearchCV\n#from xgboost import XGBRegressor\n#gsearch = GridSearchCV(estimator=XGBRegressor(),\n #                      param_grid = parameters, \n  #                     scoring='neg_mean_absolute_error',\n   #                    n_jobs=4,cv=3)\n\n","6695b58c":"#gsearch.fit(X_rows,y_rows)","6e299b21":"#gsearch.best_params_.get('n_estimators'), gsearch.best_params_.get('learning_rate')","c58adff6":"\n#final_model = XGBRegressor(n_estimators=gsearch.best_params_.get('n_estimators'), \n                          # learning_rate=gsearch.best_params_.get('learning_rate'), \n                           #n_jobs=4)","2a592515":"#final_model.fit(X_rows,y_rows)","54e82d78":"#test_preds = final_model.predict(test_X)","77ae96f7":"\n#submission = pd.read_csv('\/kaggle\/input\/cat-in-the-dat\/sample_submission.csv', index_col='id')\nsamplesubmission = pd.read_csv('\/kaggle\/input\/cat-in-the-dat\/sample_submission.csv', index_col='id')\n\noutput = pd.DataFrame({'Id': samplesubmission.index, 'target': test_preds})\noutput.to_csv('submission.csv', index=False)","049316b5":"output.head()","1deebddb":"Trying some different ways to preprocessing high nominal like: hash, frequent, label encoder","10dfa3e6":"# Hash","17bfa756":"# split data using : model_selection","b373a45a":"As we see, we have a different range of nominal features and we know that is not good way to make OneHotencoder for variables taking more than 15 different values. so, we will separate them","008852a3":"# Using XGBRegressor model with tuning parameter\n\n\ntrying some models but, I found the XGBRegressor the best until now","1f901f2b":"# back to high nominal : ","162ba781":"# Visualization and preprocessing of nominal Features :","19013e65":"# Exploring and understanding our Data","a806bd07":"# Is there a cat in your dat?\n\nA common task in machine learning pipelines is encoding categorical variables for a given algorithm in a format that allows as much useful signal as possible to be captured.\n\nBecause this is such a common task and important skill to master, we've put together a dataset that contains only categorical features, and includes:\n\nbinary features\nlow- and high-cardinality nominal features\nlow- and high-cardinality ordinal features\n(potentially) cyclical features","e10aa468":"# Label Encoder","291230b8":"# Visualization and preprocessing of ordinal Features :","221d40e3":"# separating nominal Features","a88b9c5a":"# Preparing Submission File","8252b983":"# Reading Data","adcd00ac":"# choosing just one type and Dropping other:","3b28f008":"NOW OUR DATA IS NUMERIC ^_^","dedd7e7a":"# Let's make some visualizations:","35298798":"# Visualization and preprocessing of Binary Features :","920dea28":"# For (low) nominal features : using OneHotEencoder to encoding variables","6d573703":"great, our data don't have any missing values","50edd0f0":"# Frequent ","f82303fd":"# Separate data into training and validation sets","2e345e18":"# The number of unique values??","e833eb68":"#  Is there any missing values?"}}