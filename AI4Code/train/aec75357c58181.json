{"cell_type":{"92497c48":"code","8bb7fb83":"code","5cde3d16":"code","bc78f524":"code","af7c0ec2":"code","63bbc2b1":"code","64a130e3":"code","904735a7":"code","a593c6ca":"code","5e141bb5":"code","4974d067":"code","91c70bd8":"code","919822bc":"code","792970c8":"code","abea9f23":"code","caa08c3b":"code","96363fdb":"code","b8f23103":"code","621ec1b1":"code","ff073568":"code","ad3da12d":"code","a45eadce":"code","111fe36c":"code","881a268d":"code","8fb14303":"code","213280b5":"code","e12702ba":"code","ccfa029a":"code","42de964a":"code","c8110f93":"code","585d5fd8":"code","7fd536af":"code","6f922af8":"code","e3cedec4":"code","ae9bd315":"code","77cf19b5":"code","dad875ec":"code","fb9c6eba":"code","42dfff63":"markdown","d02ba02c":"markdown","64be6ab8":"markdown","dfefae59":"markdown","24905b54":"markdown","aecf2b1b":"markdown"},"source":{"92497c48":"import os\nimport cv2\nimport math \nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\n\nfrom tqdm import tqdm\nfrom skimage import feature\nfrom skimage import measure\nfrom sklearn.model_selection import train_test_split\n\nfrom matplotlib import pyplot as plt","8bb7fb83":"os.listdir('\/kaggle\/input\/thai-mnist-classification')","5cde3d16":"train_img_path = '\/kaggle\/input\/thai-mnist-classification\/train'\ntrain_label_path = '\/kaggle\/input\/thai-mnist-classification\/mnist.train.map.csv'","bc78f524":"# THAI-MNIST Labelling\ntrain_mnist_df = pd.read_csv('\/kaggle\/input\/thai-mnist-classification\/mnist.train.map.csv')\n\n# prepare droplist\ndrop_df = pd.read_csv('\/kaggle\/input\/thaimnistdroplist\/drop_lists.csv')\ndrop_lists = drop_df['id'].values\n\n# Remove droplist from label sets\nfilter_df = train_mnist_df[~train_mnist_df['id'].isin(drop_lists)]\nfilter_df","af7c0ec2":"# Prepare Validation set\ntest_folder_path = \"\/kaggle\/input\/thai-mnist-classification\/test\"\ntest_images = [f for f in os.listdir(test_folder_path) if os.path.isfile(os.path.join(test_folder_path, f))]\nvalid_array = {'id': [], 'category': []}\n\nfor i in range(len(test_images)):\n    valid_array['id'].append(test_images[i])\n    valid_array['category'].append(0)\n    # print(test_images[1])\n\nvalid_df = pd.DataFrame(valid_array , columns=['id','category'])\nvalid_df","63bbc2b1":"class getdata():\n    def __init__(self,df, group='train'):\n        self.label_df = df \n        self.group = group\n        self.dataFile = self.label_df['id'].values\n        self.label = self.label_df['category'].values\n        self.n_index = len(self.dataFile)\n        \n    def getImageByIndex(self,index):\n        return self.label_df.iloc[index]['id']\n    \n    def getLabelByIndex(self,index):\n        return self.label_df.iloc[index]['category']\n        \n    def getImage(self,index,mode='rgb',label = False ):\n        image_id = self.label_df.iloc[index]['id']\n        path = f\"..\/input\/thai-mnist-classification\/{self.group}\/{image_id}\"\n        img  = cv2.imread(path)\n        if mode == 'rgb':\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        elif mode == 'gray':\n            img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n        if label:\n            return img,self.label_df.iloc[img_index]['category']\n        return img\n        \n        \n    \n    def get1img(self,index,mode='rgb',label = False):\n        image_id = self.label_df.iloc[index]['id']\n        path = f\"..\/input\/thai-mnist-classification\/{self.group}\/{image_id}\"\n        img = cv2.imread(path)\n        if mode == 'rgb':\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        elif mode == 'gray':\n            img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n        if label:\n            return img,self.label_df.iloc[index]['category']\n        return img","64a130e3":"gdt = getdata(filter_df,group='train')\ngdt.dataFile.shape","904735a7":"gvalid = getdata(valid_df, group='test')\ngvalid.dataFile.shape","a593c6ca":"from skimage.morphology import convex_hull_image\nfrom skimage.util import invert","5e141bb5":"temp_img = invert(gdt.get1img(232,'gray'))\n# \nfig, [ax1,ax2] = plt.subplots(1, 2)\nax1.imshow(temp_img)\ncvh =  convex_hull_image(temp_img)\nax2.imshow(cvh)","4974d067":"def convex_crop(img,pad=20):\n    convex = convex_hull_image(img)\n    r,c = np.where(convex)\n    while (min(r)-pad < 0) or (max(r)+pad > img.shape[0]) or (min(c)-pad < 0) or (max(c)+pad > img.shape[1]):\n        pad = pad - 1\n    return img[min(r)-pad:max(r)+pad,min(c)-pad:max(c)+pad]","91c70bd8":"crop_img = convex_crop(temp_img,pad=10)\nplt.imshow(crop_img)","919822bc":"def convex_resize(img):\n    img = invert(img)\n    img = convex_crop(img,pad=20)\n    img = cv2.resize(img,(32,32))\n    return img","792970c8":"def thes_resize(img,thes=40):\n    img = invert(img)\n    img = convex_crop(img,pad=20)\n    img = ((img > thes)*255).astype(np.uint8)\n    if(min(img.shape) > 300):\n        img = cv2.resize(img,(300,300))\n        img = ((img > thes)*255).astype(np.uint8)\n    if(min(img.shape) > 150):\n        img = cv2.resize(img,(150,150))\n        img = ((img > thes)*255).astype(np.uint8)\n    img = cv2.resize(img,(80,80))\n    img = ((img > thes)*255).astype(np.uint8)\n    img = cv2.resize(img,(50,50))\n    img = ((img > thes)*255).astype(np.uint8)\n    img = cv2.resize(img,(32,32))\n    img = ((img > thes)*255).astype(np.uint8)\n    return img","abea9f23":"# Thesholding Train Data\ntemp_img = gdt.get1img(64,'gray')\nfig, [ax1,ax2] = plt.subplots(1, 2,figsize=(10,7))\nax1.imshow(convex_resize(temp_img))\nax1.set_title('Without thresholding')\nax2.imshow(thes_resize(temp_img))\nax2.set_title('Thresholding')","caa08c3b":"# Thesholding Valid Data\ntemp_valid_img = gvalid.get1img(4,'gray')\nfig, [ax1,ax2] = plt.subplots(1, 2,figsize=(10,7))\nax1.imshow(convex_resize(temp_valid_img))\nax1.set_title('Without thresholding')\nax2.imshow(thes_resize(temp_valid_img))\nax2.set_title('Thresholding')","96363fdb":"fig, ax = plt.subplots(5, 5, figsize=(15,15))\nfor i in range(5):\n    for j in range(5):\n        img_index = np.random.randint(0,gdt.n_index)\n        ax[i][j].imshow(thes_resize(gdt.get1img(img_index,'gray')))\n        ax[i][j].set_title('Class: '+str(gdt.label[img_index]))\n        ax[i][j].set_axis_off()","b8f23103":"### Apply training set image\nX = []\n\nfor i , image_path in enumerate(tqdm(gdt.dataFile)):\n    X.append(thes_resize(gdt.get1img(i,'gray')))\n\nX = np.array(X)   \ny = gdt.label\nX = X.reshape((-1,32,32,1))\nX.shape,y.shape","621ec1b1":"### Apply validation set image\nX_valid = []\n\nfor i , image_path in enumerate(tqdm(gvalid.dataFile)):\n    image = gvalid.get1img(i,'gray')\n    X_valid.append(thes_resize(image))\n\nX_valid = np.array(X_valid)    \nX_valid = X_valid.reshape((-1,32,32,1))\nX_valid.shape","ff073568":"y_cat = tf.keras.utils.to_categorical(y)\ny_cat.shape","ad3da12d":"X_train, X_test, y_train, y_test = train_test_split(X, y_cat, test_size=0.25, random_state=1234)","a45eadce":"X_train = X_train \/ 255.\nX_test = X_test \/ 255.","111fe36c":"model = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Conv2D(6, (5,5), input_shape=(32, 32, 1), activation='relu'))\nmodel.add(tf.keras.layers.MaxPool2D()) \nmodel.add(tf.keras.layers.Conv2D(16, (5,5), activation='relu')) \nmodel.add(tf.keras.layers.MaxPool2D()) \nmodel.add(tf.keras.layers.Flatten()) \nmodel.add(tf.keras.layers.Dense(120, activation='relu'))\nmodel.add(tf.keras.layers.Dense(84, activation='relu'))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['acc'])","881a268d":"model.summary()","8fb14303":"learning_rate_reduction = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.0000001)\n\nearly_stop = tf.keras.callbacks.EarlyStopping(monitor='val_acc', patience=10,verbose=1)","213280b5":"history = model.fit(X_train, y_train, batch_size=64,validation_data=(X_test,y_test), epochs=200, callbacks=[learning_rate_reduction,early_stop])","e12702ba":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])","ccfa029a":"plt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])","42de964a":"# Prepare validation set\nprint(len(X_valid))\n\nprediction = model.predict(X_valid)\nlabel_df = valid_df\n\nprint(len(prediction))\n\n# Prepare blank object\npredict_array = {'id': [], 'category': []}\ncount_error   = 0\n\nid_val = label_df['id'].values\n\n# Prediction\nfor index in range(len(prediction)):\n    result = np.where(prediction[index] == np.amax(prediction[index]))\n    try:\n        predict_label = result[0][0]\n        predict_id    = id_val[index] # label_df['id'].values\n        predict_array['id'].append(predict_id)\n        predict_array['category'].append(predict_label)\n    except:\n        count_error += 1\n\nprint(f\"found ... {count_error} errors\")","c8110f93":"### Download predict CSV\npredict_df = pd.DataFrame(predict_array , columns=['id','category'])\npredict_df.to_csv('val.csv')","585d5fd8":"# Rule controlling\ntest_rule_df = pd.read_csv('\/kaggle\/input\/thai-mnist-classification\/test.rules.csv')\ntest_rule_df.head(5)\n\ntest_rule_df['feature2'][2]","7fd536af":"def translate(val):\n    lock = predict_df.iloc[0]['category']\n    return lock    ","6f922af8":"def translate(x):\n    try:\n        n = predict_df[predict_df['id']==x]\n        return n['category'].values[0]\n    except:\n        return 11","e3cedec4":"test_rule_df['feauture1_trans'] = test_rule_df.apply(lambda x:  translate(x['feature1']) , axis=1)\ntest_rule_df['feauture2_trans'] = test_rule_df.apply(lambda x:  translate(x['feature2']) , axis=1)\ntest_rule_df['feauture3_trans'] = test_rule_df.apply(lambda x:  translate(x['feature3']) , axis=1)\ntest_rule_df","ae9bd315":"def calculate(f1,f2,f3):\n    if(f1 == 0):\n        return f2*f3\n    elif(f1 == 1):\n        return abs(f2-f3)\n    elif(f1 == 2):\n        return (f2 + f3)*abs(f2 - f3)\n    elif(f1 == 3):\n        return ((f2**2)+1)*(f2) +(f3)*(f3+1)\n    elif(f1 == 4):\n        return 50 + (f2 - f3)\n    elif(f1 == 5):\n        return min([f2 , f3])\n    elif(f1 == 6):\n        return max([f2 , f3])\n    elif(f1 == 7):\n        return math.floor(((f2*f3)\/9)*11)\n    elif(f1 == 8):\n        return math.floor((f3*(f3 +1) - f2*(f2-1))\/2)\n    elif(f1 == 9):\n        return 50 + f2\n    else:\n        return f2 + f3","77cf19b5":"test_rule_df['predict'] = test_rule_df.apply(lambda x: calculate(x['feauture1_trans'] , x['feauture2_trans'] , x['feauture3_trans']) , axis=1)\ntest_rule_df","dad875ec":"result = test_rule_df[['id', 'predict']]\nresult.head(10)","fb9c6eba":"result.to_csv('predict_submit.csv', index=False)","42dfff63":"# Lenet5","d02ba02c":"# Score prediction","64be6ab8":"# Image convex hull","dfefae59":"## Apply to all images","24905b54":"## Crop image","aecf2b1b":"# Prediction"}}