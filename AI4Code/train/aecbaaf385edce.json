{"cell_type":{"ae64682d":"code","f7e57586":"code","e15c3db4":"code","cf3cf7e3":"code","5fbd1a13":"code","9640c8e6":"code","e801ffa7":"code","6e8af8c5":"code","53abb4e6":"code","2bec5889":"code","6dd845aa":"code","0d74cc82":"code","38b4e56d":"code","96e232b5":"code","81d6164b":"code","3317e7f9":"code","c7e3fc25":"code","0d287b3c":"markdown","93d5e5dd":"markdown","99f4978e":"markdown","4e179e22":"markdown","3bd8f4b6":"markdown","7bf049dc":"markdown","a2f2682e":"markdown","8b2f10a7":"markdown","f82acf2e":"markdown","d678b2cd":"markdown","cd2758d2":"markdown","9c1b4dff":"markdown","4e6973c8":"markdown","fd8321b4":"markdown","da1db44c":"markdown","7e281c5b":"markdown","a8464676":"markdown","cecc628a":"markdown","23585657":"markdown","403789f6":"markdown"},"source":{"ae64682d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f7e57586":"# Load train data and show head\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","e15c3db4":"# Load test data and show head\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","cf3cf7e3":"# Check for missing data\nmissingDataTrain = train_data.isna().sum()\nprint(missingDataTrain)","5fbd1a13":"# Fill Missing Data\ntrain_data['Age'].fillna(method = 'pad', inplace = True)","9640c8e6":"# Check for missing data\nmissingDataTest = test_data.isna().sum()\nprint(missingDataTest)","e801ffa7":"# Fill Missing Data\ntest_data['Age'].fillna(method = 'pad', inplace = True)\ntest_data['Fare'].fillna(method = 'pad', inplace = True)","6e8af8c5":"# Calculate rate of women who survived\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nwomen_rate = sum(women)\/len(women)\n\n# Calculate rate of men who survived\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nmen_rate = sum(men)\/len(men)\n\n# Print results\nprint(\"% of women who survived: \", women_rate)\nprint(\"% of men who survived: \", men_rate)\n","53abb4e6":"features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\ny = train_data[\"Survived\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.30, random_state = 1) \n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5)\nmodel.fit(X_train, y_train)\n\npredictions = model.predict(X_test)","2bec5889":"print(classification_report(y_test, predictions)) #Show precision, recall, and accuracy\nprint(model.score(X_test, y_test))","6dd845aa":"from sklearn import neighbors\n\nfeatures = [\"Sex\", \"Parch\", \"Fare\"]\nX = pd.get_dummies(train_data[features])\ny = train_data[\"Survived\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.30, random_state = 1) \n\nknn = neighbors.KNeighborsClassifier(n_neighbors=6)\nknn.fit(X_train, y_train)\n\npredictions = knn.predict(X_test)","0d74cc82":"print(classification_report(y_test, predictions)) #Show precision, recall, and accuracy\nprint(knn.score(X_test, y_test))","38b4e56d":"from sklearn.linear_model import SGDClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nfeatures = [\"Sex\", \"Parch\", \"Fare\"]\nX = pd.get_dummies(train_data[features])\ny = train_data[\"Survived\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.30, random_state = 1) \n\nparameters = {'alpha':[0.00001, 0.0001, 0.001, 0.01, 0.1, 1], 'loss':['hinge', 'log'], 'penalty':['l1','l2']}\n\nlinear_classifier = SGDClassifier(random_state=1)\n\nmodel = GridSearchCV(linear_classifier, parameters, cv=10)\nmodel.fit(X_train, y_train)\n\npredicitions = model.predict(X_test)\n","96e232b5":"print(classification_report(y_test, predictions)) #Show precision, recall, and accuracy\nprint(model.score(X_test, y_test))","81d6164b":"from sklearn.tree import DecisionTreeClassifier\n\nfeatures = [\"Sex\", \"Parch\", \"Fare\"]\nX = pd.get_dummies(train_data[features])\ny = train_data[\"Survived\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.30, random_state = 1) \n\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\npredictions = model.predict(X_test)","3317e7f9":"print(classification_report(y_test, predictions)) #Show precision, recall, and accuracy\nprint(model.score(X_test, y_test))","c7e3fc25":"from sklearn.tree import DecisionTreeClassifier\n\nfeatures = [\"Sex\", \"Parch\", \"Fare\"]\n\nX = pd.get_dummies(train_data[features])\ny = train_data[\"Survived\"]\n\nX_test = pd.get_dummies(test_data[features])\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\n\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","0d287b3c":"# **SGDClassifier**","93d5e5dd":"**Evaluating Model**","99f4978e":"# Summary","4e179e22":"Overall all models performed reasonably well however decision trees performed the most optimally","3bd8f4b6":"(Not included for final model efficiency comparisons)","7bf049dc":"# **Generate Submission Data using Decision Trees**","a2f2682e":"**Fill Missing Data**","8b2f10a7":"**Building Model**","f82acf2e":"# **Nearest Neighbor Classfier**","d678b2cd":"**Building Model**","cd2758d2":"**Evaluating Model**","9c1b4dff":"# **Decision Trees**","4e6973c8":"**Building Model**","fd8321b4":"# **Load Test Data (test.csv)**","da1db44c":"#  **Load Training Data (train.csv)**","7e281c5b":"**Evaluating Model**","a8464676":"# **Exploratory Data Anaylsis**","cecc628a":"# **Random Forest (Tutorial)**","23585657":"**Building Model**","403789f6":"**Evaluating Model**"}}