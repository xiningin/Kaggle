{"cell_type":{"77ec2593":"code","f5931ec1":"code","6cc08552":"code","5183b64f":"code","1e84aa99":"code","97b5d928":"code","dcd8aa95":"code","74cb993a":"code","b6ce77aa":"code","1d8d2b72":"code","9e575e77":"code","5a4ec612":"code","e9d06dc2":"code","6a06d75c":"code","0daa6333":"code","532fcaf0":"code","7a7fa648":"code","8b1f404d":"code","d6a28b31":"code","5dbca6a4":"code","8ec6c5b0":"code","a0867f51":"code","0c8a1982":"markdown","4201a5cb":"markdown","244615ca":"markdown","d93e3b5f":"markdown","517bca04":"markdown","e57b6953":"markdown","b7cf1ac9":"markdown","aef02f9d":"markdown","119e2867":"markdown","ec5e3f6b":"markdown","714c0f21":"markdown","2a005dec":"markdown","42bc7f72":"markdown","bd8e5f82":"markdown","6168a451":"markdown","a0243f41":"markdown","69a28f77":"markdown","bdc982ed":"markdown","d4e2b310":"markdown","8f2f41d6":"markdown"},"source":{"77ec2593":"from IPython.core.display import HTML\nstyles = '''@import url('https:\/\/fonts.googleapis.com\/css?family=Quicksand&display=swap');\n * {\n\t margin: 0;\n\t padding: 0;\n\t box-sizing: border-box;\n}\n h3 {\n\t font-family: Comic Sans MS;\n}\n .alert {\n\t width: 80%;\n\t margin: 20px auto;\n\t padding: 30px;\n\t position: relative;\n\t border-radius: 5px;\n\t box-shadow: 0 0 15px 5px #ccc;\n}\n .close {\n\t position: absolute;\n\t width: 30px;\n\t height: 30px;\n\t opacity: 0.5;\n\t border-width: 1px;\n\t border-style: solid;\n\t border-radius: 50%;\n\t right: 15px;\n\t top: 25px;\n\t text-align: center;\n\t font-size: 1.6em;\n\t cursor: pointer;\n}\n .simple-alert {\n\t background-color: #aed6e5;\n\t border-left: 5px solid #245b70;\n}\n .simple-alert .close {\n\t border-color: #245b70;\n\t color: #245b70;\n}\n .success-alert {\n\t background-color: #aee5c0;\n\t border-left: 5px solid #24703d;\n}\n .success-alert .close {\n\t border-color: #24703d;\n\t color: #24703d;\n}\n .danger-alert {\n\t background-color: #e5aeae;\n\t border-left: 5px solid #702424;\n}\n .danger-alert .close {\n\t border-color: #702424;\n\t color: #702424;\n}\n .warning-alert {\n\t background-color: #ffe6a9;\n\t border-left: 5px solid #a97800;\n}\n .warning-alert .close {\n\t border-color: #a97800;\n\t color: #a97800;\n}\n'''\nHTML(\"<style>\"+styles+\"<\/style>\")\n!pip install rich\nimport numpy as np\nimport pandas as pd\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom rich.console import Console\nfrom rich import print\nfrom rich.theme import Theme\n\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\ndef custom_palette(custom_colors):\n    customPalette = sns.set_palette(sns.color_palette(custom_colors))\n    sns.palplot(sns.color_palette(custom_colors),size=0.8)\n    plt.tick_params(axis='both', labelsize=0, length = 0)\n\npalette = [\"#7209B7\",\"#3F88C5\",\"#136F63\",\"#F72585\",\"#FFBA08\"]\npalette2 = sns.diverging_palette(120, 220, n=20)\ncustom_palette(palette)\n\ncustom_theme = Theme({\n    \"info\" : \"italic bold cyan\",\n    \"warning\": \"italic bold magenta\",\n    \"danger\": \"bold blue\"\n})\n\nconsole = Console(theme=custom_theme)","f5931ec1":"df = pd.read_csv('..\/input\/chesscom-user-games-60000-games\/club_games_data.csv')\ndf.head(2)","6cc08552":"df.pgn[0].split('\\n')","5183b64f":"feature_names = ['Event', 'Site', 'Start_Date', 'End_Date', 'Start_Time',\n                 'End_Time', 'Eco', 'EcoName', 'Round', 'Result']\nfeature_positions = [0, 1, 2, -6, -7, -5, -15, -14, 3, 6]\n\n#Takes in the name you want to give the feature, and the position of the feature in \n#the pgn.split('\\n') and creates the feature with feature name in the dataframe\n\nfor feature_name, position in zip(feature_names, feature_positions):\n    df[feature_name] = df['pgn'].apply(\n        lambda x: x.split('\\n')[position].split('\"')[1])","1e84aa99":"df.iloc[0]['EcoName']","97b5d928":"df['EcoName'] = df['EcoName'].apply(lambda x: x.split('\/')[-1])","dcd8aa95":"def is_tournament(x):\n    if (x.split('\\n')[7].split('\"')[0][1:-1] == 'Tournament'):\n        return True\n    else:\n        return False\n    \ndf['Is_tournament'] = df['pgn'].apply(is_tournament)","74cb993a":"df.pgn.iloc[0].split(\"\\n\")[-2]","b6ce77aa":"df.pgn.iloc[-1].split(\"\\n\")[-2]","1d8d2b72":"def extract_move(pgn):\n    if(pgn.find('{[') == -1):\n        original_list = pgn.split(\"\\n\")[-2].split()\n        toberemoved_list = pgn.split(\"\\n\")[-2].split()[::3]\n        new_list = [x for x in original_list if x not in toberemoved_list]\n        return new_list\n    else:\n        return pgn.split(\"\\n\")[-2].split()[1::4]","9e575e77":"df['Moves'] = df['pgn'].apply(extract_move)","5a4ec612":"print(f\"Number of unique values in 'Site': {df['Site'].nunique()}\")\nprint(f\"Number of unique values in 'Round': {df['Round'].nunique()}\")","e9d06dc2":"df.drop(columns=['Site','Round'],axis=1,inplace=True)","6a06d75c":"df[['white_result','black_result','Result']]","0daa6333":"df['result_type'] = df['white_result'].apply(lambda x: x if x != 'win' else 0)\nidx = df[df['result_type']==0].index\ndf['result_type'][idx] = df['black_result'][idx]\ndf.drop(columns=['white_result','black_result'],axis=1,inplace=True)","532fcaf0":"df['Result'] = df['Result'].apply(lambda x: 'Black' if x == '0-1' else ('White' if x=='1-0' else 'Draw') )","7a7fa648":"df['rating_difference'] = df['white_rating'] - df['black_rating']","8b1f404d":"sns.countplot(y=df.rules)","d6a28b31":"df = df[df['rules']=='chess']\ndf.drop('rules',axis=1,inplace=True)","5dbca6a4":"df.drop(columns=['fen','pgn'],inplace=True)","8ec6c5b0":"df.head(2)","a0867f51":"# Creating the new and better csv\ndf.to_csv('..\/working\/df_clean.csv',index=False)","0c8a1982":"## Extracting Features","4201a5cb":"In this notebook I am just extracting the moves and not the time taken, although it might be interesting to do an analysis on it.<br>","244615ca":"#### Extracting the Moves","d93e3b5f":"## Filtering the data, and creating basic features","517bca04":"As we can see, Result already tells us who won (or wether it was a draw). <br> So we don't have to keep both these columns around as they are kind of redundant. We can drop the column value whenever it says win, and keep the other column's value, thus creating result_type","e57b6953":"#### Extracting Is_Tournament Feature","b7cf1ac9":"The additional features we can extract from the pgn are :-<br>\n'Event', 'Site', 'Start_Date', 'End_Date', 'Start_time', <br>'End_time', 'Round', 'Result', 'Tournament', 'ECO',<br> 'First_Move', 'Second_Move', 'Third_Move', 'Fourth_Move'.","aef02f9d":"#### Creating Eco_Name feature ","119e2867":"![](https:\/\/kgcorner.com\/wp-content\/uploads\/2021\/05\/fq4cqqdmz4jv9agitg72.jpeg)\n<center><h1>Extracting Features from Portable Game Notation (PGN)<\/h1><\/center>\n<center>The objective of this notebook is to extract features from the PGN features.<\/center>\n<h3>What is a PGN<\/h3>\nPortable Game Notation (PGN) is a standard plain text format for recording chess games (both the moves and related data), which can be read by humans and is also supported by most chess software.","ec5e3f6b":"The final csv created by us looks like this:-","714c0f21":"I have already extracted all the features I wanted from PGN column in this [notebook](https:\/\/www.kaggle.com\/adityajha1504\/extracting-features-from-pgn\/edit\/run\/69682662), so I will be dropping it.<br> I will also be dropping the FEN column. FEN is a standard notation for describing a particular board position of a chess game. The purpose of FEN is to provide all the necessary information to restart a game from a particular position.","2a005dec":"The ECO Codes is a classification system for the chess openings moves.<br>\nThere are five main categories, \"A\" to \"E\", corresponding to the five volumes of the earlier editions, each of which is further subdivided into 100 subcategories, for a total of 500 codes. The term \"ECO\" is often used as a shorthand for this coding system.<br>\nWe can also extract the Eco_Name using the EcoName feature we extracted from the pgn","42bc7f72":"## Saving the new csv","bd8e5f82":"#### Extracting Features Event, Site, Start_Date, End_Date, Start_Time, End_Time, Eco, EcoName, Round, Result, Game_Type","6168a451":"Now, lets extract the moves played from the PGN. <br>\nIn the case of moves we see two schemas:-<br>","a0243f41":"People got bored playing Chess, so they created variants like chess960, threecheck, crazyhouse and kingofthehill. As fun as these variants are, we will train our model for predicting plain old chess.<br>\nAfter filtering the data, the rules column will only have one unique value, so we can drop that too.","69a28f77":"If the game being played is part of a Chess.com Tournament, then the 7th position feature will have Tournament key.<br>\n**Using this Information we can create another feature** :- Is_Tournament","bdc982ed":"Both of these columns have only one unique value making them kind of redundant, so we can drop these features","d4e2b310":"### Example PGN\n","8f2f41d6":"<div class=\"alert success-alert\">\n    \n\ud83d\udccc <b>What we are doing in this notebook<\/b>:<br> We have 14 features, the last one is the **PGN**.<br>\n    We can extract many more features from it.<br>\n    These features may be essential in improving your model accuracy. <br>\n    \n<\/div>\n\n"}}