{"cell_type":{"bd2a0399":"code","d85f45a6":"code","6f540a7e":"code","ddb50db8":"code","ab184ec0":"code","9d7559be":"code","78e0eb3c":"code","9e48e7af":"code","8cac6c83":"code","5b0ea715":"markdown","4056ead6":"markdown","b8786d01":"markdown","7932b95e":"markdown","03434294":"markdown","381afb04":"markdown","2ddacd21":"markdown","01e084f9":"markdown","0f99bcf9":"markdown","73fffc0f":"markdown","c85625b8":"markdown","fc722714":"markdown","38d69aa7":"markdown","83400313":"markdown","f95b1ffe":"markdown","e637967c":"markdown","76b3e48e":"markdown","9e3069c7":"markdown","1a33552a":"markdown","b74dff9d":"markdown","072ef19c":"markdown","8f2a76df":"markdown","72e0b1e7":"markdown"},"source":{"bd2a0399":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Importing the dataset\ndataset = pd.read_csv(\"..\/input\/salary_data.csv\")\nX = dataset.iloc[:, :-1].values #get a copy of dataset exclude last column\ny = dataset.iloc[:, 1].values #get array of dataset in column 1st","d85f45a6":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1\/3, random_state=0)","6f540a7e":"# Fitting Simple Linear Regression to the Training set\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","ddb50db8":"# Visualizing the Training set results\n\nplt.scatter(X_train, y_train, color='red')\nplt.plot(X_train, regressor.predict(X_train), color='blue')\nplt.title('Salary VS Experience (Training set)')\nplt.xlabel('Year of Experience')\nplt.ylabel('Salary')\nplt.show()\n\n# Visualizing the Test set results\n\nplt.scatter(X_test, y_test, color='red')\nplt.plot(X_train, regressor.predict(X_train), color='blue')\nplt.title('Salary VS Experience (Test set)')\nplt.xlabel('Year of Experience')\nplt.ylabel('Salary')\nplt.show()","ab184ec0":"# Predicting the result of 5 Years Experience\n\ny_pred = regressor.predict([[5.0]])\ny_pred","9d7559be":"# Predicting the Test set results\n# type(X_test)\ny_pred = regressor.predict(X_test)\ny_pred","78e0eb3c":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Importing the dataset\ndataset = pd.read_csv(\"..\/input\/salary_data.csv\")\nX = dataset.iloc[:,1:].values #get a copy of dataset exclude last column\ny = dataset.iloc[:, 0].values #get array of dataset in column 1st\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1\/3, random_state=0)\n\n# Fitting Simple Linear Regression to the Training set\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = regressor.predict(X_test)\n\n# Visualizing the Training set results\n\nplt.scatter(X_train, y_train, color='red')\nplt.plot(X_train, regressor.predict(X_train), color='blue')\nplt.title('Salary VS Experience (Training set)')\nplt.ylabel('Year of Experience')\nplt.xlabel('Salary')\nplt.show()\n\n# Visualizing the Test set results\n\nplt.scatter(X_test, y_test, color='red')\nplt.plot(X_train, regressor.predict(X_train), color='blue')\nplt.title('Salary VS Experience (Test set)')\nplt.ylabel('Year of Experience')\nplt.xlabel('Salary')\nplt.show()","9e48e7af":"\ny_pred = regressor.predict(X_test)\ny_pred","8cac6c83":"# Predicting the result for 5 Years Experience by given privious result \n\ny_pred = regressor.predict([[73545.90445964]])\ny_pred","5b0ea715":"![](https:\/\/miro.medium.com\/max\/979\/1*uYDswmQMj-YbxAVLJ2RtGA.png)","4056ead6":"### Linear Regression with Python\n\nBefore moving on, we summarize 2 basic steps of Machine Learning as per below:\n\n    Training\n    Predict\n\nOkay, we will use 4 libraries such as numpy and pandas to work with data set, sklearn to implement machine learning functions, and matplotlib to visualize our plots for viewing:","b8786d01":"The value of y_pred with X = 5 (5 Years Experience) is 73545.90\n\nYou can offer to your candidate the salary of 73,545.90 and this is the best salary for him!\n\nWe can also pass an array of X instead of single value of X:","7932b95e":"We take one simple problem and try to understand Linear Regression:\n\nFirst, let\u2019s say that you are shopping at Walmart. Whether you buy goods or not, you have to pay 2.00 for parking ticket. Each apple price 1.5, and you have to buy an (x) item of apple. Then we can populate a price list as below:","03434294":"Based on our observation, we can guess that the salary range of 5 Years Experience should be in the red range. Of course, we can offer to our candidate any number in that red range. But how to pick the best number for him? It\u2019s time to use Machine Learning to predict the best salary for our candidate.\n\nIn this section, we will use Python on Spyder IDE to find the best salary for our candidate. Okay, let\u2019s do it!","381afb04":"After plotting all value of the shopping cost (in blue line), you can see, they all are in one line, that\u2019s why we call it linear. With the equation of linear (y=a+bx), the a is an independent variable. Even if a=0 (you have no need to pay for the parking ticket), the Shopping Cost line will shift down and they are still in a line (orange line).","2ddacd21":"Code explanation:\n\n*     regressor = LinearRegression(): our training model which will implement the Linear Regression.\n*     regressor.fit: in this line, we pass the X_train which contains value of Year Experience and y_train which contains values of particular Salary to form up the model. This is the training process.\n\nLet\u2019s visualize our training model and testing model:","01e084f9":"\n## Conclusion:\nwith Simple Linear Regression, we have to do 5 steps as per below:\n\n*     Importing the dataset.\n*     Splitting dataset into training set and testing set (2 dimensions of X and y per each set). Normally, the testing set should be 5% to 30% of dataset.\n*     Visualize the training set and testing set to double check (you can bypass this step if you want).\n*     Initializing the regression model and fitting it using training set (both X and y).\n*     Let\u2019s predict!!","0f99bcf9":"with:\n\n    a = 2\n    b = 1.5\n\nA linear function has one independent variable and one dependent variable. The independent variable is x and the dependent variable is y.\n\n    a is the constant term or the y intercept. It is the value of the dependent variable when x = 0.\n    b is the coefficient of the independent variable. It is also known as the slope and gives the rate of change of the dependent variable.\n\nWhy we call it linear? Alright, let\u2019s visualize the data set we got above!","73fffc0f":"### But in real life, things are not that simple!\n\nLet\u2019s take another example, in AB Company, there is a salary distribution table based on Year of Experience as per below:","c85625b8":"\u201cThe scenario is you are a HR officer, you got a candidate with 5 years of experience. Then what is the best salary you should offer to him?\u201d\n\nBefore deep dive into this problem, let\u2019s plot the data set into the plot first:","fc722714":"It\u2019s easy to predict (or calculate) the Price based on Value and vice versa using the equation of y=2+1.5x for this example or:","38d69aa7":"Code explanation:\n\n*     dataset: the table contains all values in our csv file\n*     X: the first column which contains Years Experience array\n*     y: the last column which contains Salary array\n\nNext, we have to split our dataset (total 30 observations) into 2 sets: training set which used for training and test set which used for testing:","83400313":"![](https:\/\/miro.medium.com\/max\/1094\/1*5ZOxDGtFsewBEve9FG5DQQ.png)","f95b1ffe":"After running above code, you will see 2 plots in the console window:","e637967c":"![](https:\/\/miro.medium.com\/max\/1295\/1*lJAUpLSlcReLEkAwSXbG1A.png)","76b3e48e":"There are two types of supervised machine learning algorithms: Regression and classification. The former predicts continuous value outputs while the latter predicts discrete outputs. For instance, predicting the price of a house in dollars is a regression problem whereas predicting whether a tumor is malignant or benign is a classification problem.\n\nIn this notebook, we will briefly study what linear regression is and how it can be implemented for both two variables and multiple variables using Scikit-Learn, which is one of the most popular machine learning libraries for Python.\n\nLinear Regression Theory\nThe term \u201clinearity\u201d in algebra refers to a linear relationship between two or more variables. If we draw this relationship in a two-dimensional space (between two variables), we get a straight line.\n\nLinear regression performs the task to predict a dependent variable value (y) based on a given independent variable (x). So, this regression technique finds out a linear relationship between x (input) and y(output). Hence, the name is Linear Regression. If we plot the independent variable (x) on the x-axis and dependent variable (y) on the y-axis, linear regression gives us a straight line that best fits the data points, as shown in the figure below.\n\nWe know that the equation of a straight line is basically:\n\nThe equation of the above line is :\n\n**Y= mx + b**\n\nWhere b is the intercept and m is the slope of the line. So basically, the linear regression algorithm gives us the most optimal value for the intercept and the slope (in two dimensions). The y and x variables remain the same, since they are the data features and cannot be changed. The values that we can control are the intercept(b) and slope(m). There can be multiple straight lines depending upon the values of intercept and slope. Basically what the linear regression algorithm does is it fits multiple lines on the data points and returns the line that results in the least error.\n\nThis same concept can be extended to cases where there are more than two variables. This is called multiple linear regression. For instance, consider a scenario where you have to predict the price of the house based upon its area, number of bedrooms, the average income of the people in the area, the age of the house, and so on. In this case, the dependent variable(target variable) is dependent upon several independent variables. A regression model involving multiple variables can be represented as:\n\n**y = b0 + m1b1 + m2b2 + m3b3 + \u2026 \u2026 mnbn**\n\nThis is the equation of a hyperplane. Remember, a linear regression model in two dimensions is a straight line; in three dimensions it is a plane, and in more than three dimensions, a hyperplane.\n\nIn this section, we will see how Python\u2019s Scikit-Learn library for machine learning can be used to implement regression functions. We will start with simple linear regression involving two variables and then we will move towards linear regression involving multiple variables.","9e3069c7":"![](https:\/\/miro.medium.com\/max\/1049\/1*BU2zrxl3E1o3_xiVNU-fdw.png)","1a33552a":"![](https:\/\/miro.medium.com\/max\/263\/1*g5JCA1qiprxNhAyA9IhO7A.png)","b74dff9d":"Please look at this chart carefully. Now we have a bad news: all the observations are not in a line. It means we cannot find out the equation to calculate the (y) value.\n\nSo what now? Don\u2019t worry, we have a good news for you!\n\nLook at the Scatter Plot again before scrolling down. Do you see it?\n\nAll the points is not in a line BUT they are in a line-shape! It\u2019s linear!","072ef19c":"Code explanation:\n*     test_size=1\/3: we will split our dataset (30 observations) into 2 parts (training set, test set) and the ratio of test set compare to dataset is 1\/3 (10 observations will be put into the test set. You can put it 1\/2 to get 50% or 0.5, they are the same. We should not let the test set too big; if it\u2019s too big, we will lack of data to train. Normally, we should pick around 5% to 30%.\n*     train_size: if we use the test_size already, the rest of data will automatically be assigned to train_size.\n*     random_state: this is the seed for the random number generator. We can put an instance of the RandomState class as well. If we leave it blank or 0, the RandomState instance used by np.random will be used instead.\n\nWe already have the train set and test set, now we have to build the Regression Model:","8f2a76df":"Compare two plots, we can see 2 blue lines are the same direction. Our model is good to use now.\n\nAlright! We already have the model, now we can use it to calculate (predict) any values of X depends on y or any values of y depends on X. This is how we do it:","72e0b1e7":"And we can predict X using y as well. Let\u2019s try it yourself!\n"}}