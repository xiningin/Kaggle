{"cell_type":{"1b37e980":"code","d72dbb31":"code","2b9db917":"code","29f0b5e2":"code","5cef3a29":"code","d8e34573":"code","088fc959":"code","ac64ca44":"code","252bb30f":"code","fda42e69":"code","7827a8ab":"code","7fd21b74":"code","f3b0b721":"code","b46dd8ca":"code","effde9df":"code","dc533380":"code","791027e0":"code","0375ebda":"code","2a732040":"code","e0c27184":"code","5c32cccf":"code","36edc822":"code","44c97317":"code","218edaae":"code","e65ebe33":"code","2354481b":"markdown","c3a362c1":"markdown","9df743c4":"markdown","d8d6de5e":"markdown","2fdfdb79":"markdown","64b24492":"markdown","5e9811d4":"markdown","a9205bc3":"markdown","ed0715b0":"markdown","c662feee":"markdown","33833004":"markdown","02d32b00":"markdown","0d411572":"markdown","fc7fc44b":"markdown","8b5ffc3f":"markdown","b249aa41":"markdown","a307490b":"markdown","3534e10d":"markdown","a23819bd":"markdown"},"source":{"1b37e980":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns #visualization\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap #create map\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d72dbb31":"df = pd.read_csv('\/kaggle\/input\/craigslist-carstrucks-data\/craigslistVehiclesFull.csv')","2b9db917":"df.shape","29f0b5e2":"df.head()","5cef3a29":"df.tail()","d8e34573":"df.info()","088fc959":"df.describe()","ac64ca44":"df.isnull().sum()","252bb30f":"more_than_50 = df.columns.where((df.isnull().sum()\/len(df) * 100) >= 50).dropna()\ndf = df.drop(columns = more_than_50)\ndf.shape","fda42e69":"numerical = ['odometer','weather']\ncategorical = ['year','manufacturer','make','condition','cylinders',\n               'fuel','title_status','transmission','drive','type','paint_color',\n              'county_fips','county_name', 'state_fips','state_code']\nunused = ['image_url']","7827a8ab":"for num in numerical:\n    df[num] = df[num].fillna(df[num].mean())","7fd21b74":"for cat in categorical:\n    df[cat] = df[cat].fillna(df[cat].mode().values[0])","f3b0b721":"df = df.drop(columns = unused)","b46dd8ca":"df.isnull().sum()","effde9df":"df = df.where(df['year']>1885)\ndf = df.dropna()","dc533380":"df.shape","791027e0":"df = df.drop(columns = 'state_fips')\ndf.shape","0375ebda":"#create correlation\ncorr = df.corr(method = 'pearson')\n\n#convert correlation to numpy array\nmask = np.array(corr)\n\n#to mask the repetitive value for each pair\nmask[np.tril_indices_from(mask)] = False\nfig, ax = plt.subplots(figsize = (15,12))\nfig.set_size_inches(15,15)\nsns.heatmap(corr, mask = mask, vmax = 0.9, square = True, annot = True)","2a732040":"numerical = ['lat', 'long','odometer','weather', 'price']\ncategorical = ['year','manufacturer','make','condition','cylinders',\n               'fuel','title_status','transmission','drive','type','paint_color',\n              'county_fips','county_name','state_code', 'state_name', 'city']","e0c27184":"fig = plt.figure(figsize = (20,20))\naxes = 320\nfor num in numerical:\n    axes += 1\n    fig.add_subplot(axes)\n    sns.boxplot(data = df, x = num)\nplt.show()","5c32cccf":"plt.figure(figsize=(20,15))\nax = sns.countplot(x='year',data=df);\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\",fontsize=6);","36edc822":"years_top10 = df['year'].value_counts().iloc[:10]\nyears = pd.DataFrame({'year': years_top10.index, 'count': years_top10.values})\nplt.figure(figsize=(15,10))\nax = sns.barplot(x='year',y='count',data=years, order=years['year']);\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\",fontsize=6);","44c97317":"df_shuffled = df.sample(frac=1)\nfig = plt.figure(figsize=(10, 10))\nm = Basemap(projection='lcc', resolution=None,\n            width=8E6, height=8E6, \n            lat_0=45, lon_0=-100,)\nm.etopo(scale=0.5, alpha=0.5)\ni = 0\nfor index, row in df_shuffled.iterrows():\n    lat = row['lat']\n    lon = row['long']\n    xpt, ypt = m(lon, lat)\n    m.plot(xpt,ypt,'.',markersize=0.2,c=\"red\")\n    # stopping criteria\n    i = i + 1\n    if (i == 10000): break","218edaae":"manufacturers_top10 = df['manufacturer'].value_counts().iloc[:10]\nmanufacturers = pd.DataFrame({'manufacturer': manufacturers_top10.index, 'count': manufacturers_top10.values})\nplt.figure(figsize=(15,10))\nax = sns.barplot(y='manufacturer',x='count',data=manufacturers, order=manufacturers['manufacturer']);\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\",fontsize=6);","e65ebe33":"pie = ['transmission','fuel','condition','cylinders']\n\nfig = plt.figure(figsize = (15,15))\naxes = 220\nfor p in pie:\n    axes += 1\n    fig.add_subplot(axes)\n    plt.pie(df[p].value_counts(), labels=df[p].unique(),autopct='%1.1f%%', shadow=True, startangle=45);\n    plt.title(p.upper())\nplt.show()\n","2354481b":"### 1.2. Quick Look","c3a362c1":"### 2.1. Find the missing values percentage. If more than 50%, then drop it.","9df743c4":"## 1. Load the data & quick look","d8d6de5e":"#### 3.3.4. Visualize top 10 manufacturers","2fdfdb79":"## 2. Missing values identification and handling\n##### We have to fill the missing values based on the column's data type (numerical or categorical)","64b24492":"### 3.3. Visualize the categorical data","5e9811d4":"### 3.2. Visualize the numerical data with boxplot","a9205bc3":"##### Company History Benz Patent Motor Car: The first stationary gasoline engine developed by Carl Benz was a one-cylinder two-stroke unit which ran for the first time on 1885.","ed0715b0":"#### 3.3.1. Visualize yearly production with countplot","c662feee":"##### fill the nan value with the data mean","33833004":"### 3.1. Visualize the Pearson Correlation of the numerical data","02d32b00":"#### 3.3.2. Visualize top 10 highest years of production","0d411572":"### 2.3. Drop irrelevan values","fc7fc44b":"### 1.1. Load Data","8b5ffc3f":"## 3. Visualization","b249aa41":"#### 3.3.3. Visualize the most data point on the map with Basemap","a307490b":"#### 3.3.5. Visualize transmission, fuel, condition, and cylinders with pyplot","3534e10d":"### 2.2. group the columns based on the data type. We fill the nan of 'numerical' with the mean, and 'categorical' with mode","a23819bd":"##### county-level FIPS codes have five digits of which the first two are the FIPS code of the state to which the county belongs. Hence, we can drop the state FIPS."}}