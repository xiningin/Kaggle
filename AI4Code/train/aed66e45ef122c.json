{"cell_type":{"d233b3ff":"code","bcc96ee0":"code","3eabf9c5":"code","483459d5":"code","14602fd8":"code","fffcd474":"code","99f6a6f9":"code","36121246":"code","0d942f8b":"code","b08d5c0c":"code","3d83827a":"code","9eaf8ca8":"code","a78096bf":"code","57b48730":"code","940c8924":"code","eb9399b0":"code","4c822a75":"code","7c228859":"code","d5eb69d9":"code","19c2d3a0":"code","8a2ba081":"code","bfd9f0a3":"markdown","fe2dc733":"markdown","8e5ae2b7":"markdown","645299fa":"markdown"},"source":{"d233b3ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bcc96ee0":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport statistics\nimport sklearn\nimport sklearn.metrics as sm\nimport lightgbm as lgb\n\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nimport catboost as cb\nfrom catboost import CatBoostClassifier\npd.options.display.max_rows = 1500\npd.options.display.max_columns = 130","3eabf9c5":"train_set = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\ntest_set = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")\ntrain_set.head()","483459d5":"train_set.shape","14602fd8":"target_category = train_set[\"claim\"].unique()\ntarget_category=list(map(str,target_category))\nprint(target_category)","fffcd474":"train_set.isnull().sum().sort_values(ascending =False)","99f6a6f9":"y= train_set['claim']\ntrain_set= train_set.drop(columns=['claim','id'])\nprint(len(train_set.columns))","36121246":"train_set['missing'] = train_set.isnull().sum(axis=1)\ntrain_set['std'] = train_set.std(axis=1)\ntrain_set['var'] = train_set.var(axis=1)\ntrain_set['min'] = train_set.min(axis=1)\ntrain_set['max'] = train_set.max(axis=1)\ntrain_set.head()\n","0d942f8b":"x=train_set","b08d5c0c":"X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size = 0.3, random_state = 60,shuffle=True)\nprint(len(X_train))\nprint(len(X_test))","3d83827a":"from sklearn.impute import SimpleImputer\n\n# Imputation\nmy_imputer = SimpleImputer()\nimputed_X_train = pd.DataFrame(my_imputer.fit_transform(X_train))\nimputed_X_test = pd.DataFrame(my_imputer.transform(X_test))\n\n# Imputation removed columns\nimputed_X_train.columns = X_train.columns\nimputed_X_test.columns = X_test.columns","9eaf8ca8":"cat_params = {\n    'iterations': 15585, \n    'objective': 'CrossEntropy', \n    'bootstrap_type': 'Bernoulli',\n    'learning_rate': 0.023575206684596582, \n    'reg_lambda': 36.30433203563295, \n    'random_strength': 43.75597655616195, \n    'depth': 8, \n    'min_data_in_leaf': 11, \n    'leaf_estimation_iterations': 1, \n    'subsample': 0.8227911142845009,\n    'task_type' : 'GPU',\n    'eval_metric' : 'AUC',\n    'verbose' : 1000,\n    'early_stopping_rounds' : 500,\n}","a78096bf":"cat = CatBoostClassifier(**cat_params )\n\ncat.fit(X_train, Y_train)\n\ntest_predict = cat.predict(X_test)","57b48730":"y_pred_proba = cat.predict_proba(X_test)[::,1]\nfpr, tpr, _ = metrics.roc_curve(Y_test,  y_pred_proba)\nauc = metrics.roc_auc_score(Y_test, y_pred_proba)\nprint(auc)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","940c8924":"test_set.isnull().sum().sort_values(ascending = False)","eb9399b0":"test_id = test_set['id']\ntest_x= test_set.drop(columns=['id'])\nprint(len(test_x.columns))","4c822a75":"test_x['missing'] = test_x.isnull().sum(axis=1)\ntest_x['std'] = test_x.std(axis=1)\ntest_x['var'] = test_x.var(axis=1)\ntest_x['min'] = test_x.min(axis=1)\ntest_x['max'] = test_x.max(axis=1)","7c228859":"# Imputation\nmy_imputer = SimpleImputer()\nimputed_X_train = pd.DataFrame(my_imputer.fit_transform(test_x))\n\n# Imputation removed columns\nimputed_X_train.columns = X_test.columns","d5eb69d9":"y_prdict =cat.predict_proba(test_x)[:, 1]","19c2d3a0":"submission = pd.DataFrame(list(zip(test_id, y_prdict)),\n               columns =['id', 'claim'])\nsubmission.head(20)","8a2ba081":"submission.to_csv('submission.csv', index=False)","bfd9f0a3":"# Test Set","fe2dc733":"# Use SimpleImputer to replace missing values with the mean value of each column","8e5ae2b7":"# Add extra features","645299fa":"# CatBoost Classifier"}}