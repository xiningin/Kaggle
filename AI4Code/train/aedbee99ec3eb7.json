{"cell_type":{"1156de5e":"code","22a823fa":"code","34169105":"code","6a202df4":"code","31200db6":"code","71f8853d":"code","6dde5823":"code","d3572798":"code","6155baff":"markdown","a85a448d":"markdown","2dcd98ca":"markdown","b84a87a0":"markdown"},"source":{"1156de5e":"from string import Template\n\nimport IPython.display as dp\nimport pandas as pd","22a823fa":"df = pd.read_csv(\"..\/input\/students-performance-in-exams\/StudentsPerformance.csv\")","34169105":"cols = [\"math score\", \"reading score\", \"writing score\"]\ndf[cols] = df[cols].astype(int)\n\ncols = [\n    \"gender\",\n    \"race\/ethnicity\",\n    \"parental level of education\",\n    \"test preparation course\",\n    \"lunch\",\n]\ndf[cols] = df[cols].astype(pd.StringDtype(storage=\"pyarrow\"))\ndf[cols] = df[cols].astype(\"category\")","6a202df4":"df.dtypes","31200db6":"df","71f8853d":"s = Template(\n    r\"\"\"\n<style>\n  @import url('https:\/\/fonts.googleapis.com\/css2?family=IBM+Plex+Mono&family=IBM+Plex+Sans&display=swap');\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n\n  #$id {\n    text-align: center;\n  }\n\n  #$id .axis.x line {\n    display: none;\n  }\n\n  #$id .axis text {\n    font-weight: bold;\n    font-family: 'IBM Plex Mono', monospace;\n    text-transform: capitalize;\n  }\n<\/style>\n\n<div id=\"$id\"><\/div>\n\n<script type=\"module\">\n  'use strict';\n  import * as d3 from 'https:\/\/cdn.skypack.dev\/d3';\n  (async () => {\n    const data = d3.csvParse(`$df`, d3.autoType);\n\n    const margin = { top: 40, right: 40, bottom: 40, left: 40 };\n    const [w, h] = [500, 500];\n\n    const svg = d3\n      .select('#$id')\n      .append('svg')\n      .attr('width', w)\n      .attr('height', h);\n\n    const g = d3.flatRollup(\n      data,\n      v => d3.mean(v, d => d['math score']),\n      d => d['gender']\n    );\n\n    const xScale = d3.scaleBand(\n      g.map(i => i[0]),\n      [margin.left, w - margin.right]\n    );\n    const yMax = Math.ceil(d3.max(g, i => i[1]) \/ 10) * 10;\n    const yScale = d3.scaleLinear([0, yMax], [h - margin.bottom, margin.top]);\n\n    svg\n      .append('g')\n      .attr('class', 'axis x')\n      .attr('transform', `translate(0, ${h - margin.top})`)\n      .call(d3.axisBottom(xScale));\n    svg\n      .append('g')\n      .attr('class', 'axis y')\n      .attr('transform', `translate(${margin.left}, 0)`)\n      .call(d3.axisLeft(yScale).ticks(7));\n\n    const barWidth = 80;\n    svg\n      .selectAll('rect')\n      .data(g)\n      .enter()\n      .append('rect')\n      .attr('width', barWidth)\n      .attr('height', d => h - margin.top - yScale(d[1]))\n      .attr('x', d => xScale(d[0]) + xScale.bandwidth() \/ 2 - barWidth \/ 2)\n      .attr('y', d => yScale(d[1]))\n      .attr('fill', '#3182bd')\n      .exit()\n      .remove();\n    svg\n      .selectAll('rect')\n      .on('mouseenter', function () {\n        d3.select(this).transition().duration(300).attr('fill', '#08519c');\n      })\n      .on('mouseleave', function () {\n        d3.select(this).transition().duration(300).attr('fill', '#3182bd');\n      });\n\n    svg\n      .append('text')\n      .text('Average `math score` grouped by `gender`')\n      .style('font-family', 'IBM Plex Sans')\n      .style('font-weight', 'bold')\n      .style('font-size', '1.5rem')\n      .attr('x', margin.left \/ 2)\n      .attr('y', margin.top \/ 2);\n    svg\n      .append('text')\n      .text('Gender')\n      .style('font-family', 'IBM Plex Sans')\n      .style('font-weight', 'bold')\n      .style('font-size', '1.2rem')\n      .style('text-anchor', 'middle')\n      .attr('x', w \/ 2)\n      .attr('y', h);\n    svg\n      .append('text')\n      .text('Score')\n      .style('font-family', 'IBM Plex Sans')\n      .style('font-weight', 'bold')\n      .style('font-size', '1.2rem')\n      .style('text-anchor', 'middle')\n      .attr('x', margin.left \/ 2 - 5)\n      .attr('transform', `rotate(-90, ${margin.left \/ 2 - 5}, ${h \/ 2})`)\n      .attr('y', h \/ 2);\n  })();\n<\/script>\n    \"\"\"\n)\n\ndp.HTML(s.safe_substitute({\"df\": df.to_csv(index=False), \"id\": \"g0\"}))","6dde5823":"s = Template(\n    r\"\"\"\n<style>\n  @import url('https:\/\/fonts.googleapis.com\/css2?family=IBM+Plex+Mono&family=IBM+Plex+Sans&display=swap');\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n\n  #$id {\n    text-align: center;\n  }\n\n  #$id .axis.x line {\n    display: none;\n  }\n\n  #$id .axis text {\n    font-weight: bold;\n    font-family: 'IBM Plex Mono', monospace;\n    text-transform: capitalize;\n  }\n<\/style>\n\n<div id=\"$id\"><\/div>\n\n<script type=\"module\">\n  'use strict';\n  import * as d3 from 'https:\/\/cdn.skypack.dev\/d3';\n  (async () => {\n    const data = d3.csvParse(`$df`, d3.autoType);\n\n    const margin = { top: 40, right: 40, bottom: 40, left: 40 };\n    const [w, h] = [500, 500];\n\n    const svg = d3\n      .select('#$id')\n      .append('svg')\n      .attr('width', w)\n      .attr('height', h);\n\n    const g = d3.flatRollup(\n      data,\n      v => d3.mean(v, d => d['reading score']),\n      d => d['gender']\n    );\n\n    const xScale = d3.scaleBand(\n      g.map(i => i[0]),\n      [margin.left, w - margin.right]\n    );\n    const yMax = Math.ceil(d3.max(g, i => i[1]) \/ 10) * 10;\n    const yScale = d3.scaleLinear([0, yMax], [h - margin.bottom, margin.top]);\n\n    svg\n      .append('g')\n      .attr('class', 'axis x')\n      .attr('transform', `translate(0, ${h - margin.top})`)\n      .call(d3.axisBottom(xScale));\n    svg\n      .append('g')\n      .attr('class', 'axis y')\n      .attr('transform', `translate(${margin.left}, 0)`)\n      .call(d3.axisLeft(yScale).ticks(7));\n\n    const barWidth = 80;\n    svg\n      .selectAll('rect')\n      .data(g)\n      .enter()\n      .append('rect')\n      .attr('width', barWidth)\n      .attr('height', d => h - margin.top - yScale(d[1]))\n      .attr('x', d => xScale(d[0]) + xScale.bandwidth() \/ 2 - barWidth \/ 2)\n      .attr('y', d => yScale(d[1]))\n      .attr('fill', '#c51b8a')\n      .exit()\n      .remove();\n    svg\n      .selectAll('rect')\n      .on('mouseenter', function () {\n        d3.select(this).transition().duration(300).attr('fill', '#7a0177');\n      })\n      .on('mouseleave', function () {\n        d3.select(this).transition().duration(300).attr('fill', '#c51b8a');\n      });\n\n    svg\n      .append('text')\n      .text('Average `reading score` grouped by `gender`')\n      .style('font-family', 'IBM Plex Sans')\n      .style('font-weight', 'bold')\n      .style('font-size', '1.5rem')\n      .attr('x', margin.left \/ 2)\n      .attr('y', margin.top \/ 2);\n    svg\n      .append('text')\n      .text('Gender')\n      .style('font-family', 'IBM Plex Sans')\n      .style('font-weight', 'bold')\n      .style('font-size', '1.2rem')\n      .style('text-anchor', 'middle')\n      .attr('x', w \/ 2)\n      .attr('y', h);\n    svg\n      .append('text')\n      .text('Score')\n      .style('font-family', 'IBM Plex Sans')\n      .style('font-weight', 'bold')\n      .style('font-size', '1.2rem')\n      .style('text-anchor', 'middle')\n      .attr('x', margin.left \/ 2 - 5)\n      .attr('transform', `rotate(-90, ${margin.left \/ 2 - 5}, ${h \/ 2})`)\n      .attr('y', h \/ 2);\n  })();\n<\/script>\n    \"\"\"\n)\n\ndp.HTML(s.safe_substitute({\"df\": df.to_csv(index=False), \"id\": \"g1\"}))","d3572798":"s = Template(\n    r\"\"\"\n<style>\n  @import url('https:\/\/fonts.googleapis.com\/css2?family=IBM+Plex+Mono&family=IBM+Plex+Sans&display=swap');\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n\n  #$id {\n    text-align: center;\n  }\n\n  #$id .axis.x line {\n    display: none;\n  }\n\n  #$id .axis text {\n    font-weight: bold;\n    font-family: 'IBM Plex Mono', monospace;\n    text-transform: capitalize;\n  }\n<\/style>\n\n<div id=\"$id\"><\/div>\n\n<script type=\"module\">\n  'use strict';\n  import * as d3 from 'https:\/\/cdn.skypack.dev\/d3';\n  (async () => {\n    const data = d3.csvParse(`$df`, d3.autoType);\n\n    const margin = { top: 40, right: 40, bottom: 40, left: 40 };\n    const [w, h] = [500, 500];\n\n    const svg = d3\n      .select('#$id')\n      .append('svg')\n      .attr('width', w)\n      .attr('height', h);\n\n    const g = d3.flatRollup(\n      data,\n      v => d3.mean(v, d => d['writing score']),\n      d => d['gender']\n    );\n\n    const xScale = d3.scaleBand(\n      g.map(i => i[0]),\n      [margin.left, w - margin.right]\n    );\n    const yMax = Math.ceil(d3.max(g, i => i[1]) \/ 10) * 10;\n    const yScale = d3.scaleLinear([0, yMax], [h - margin.bottom, margin.top]);\n\n    svg\n      .append('g')\n      .attr('class', 'axis x')\n      .attr('transform', `translate(0, ${h - margin.top})`)\n      .call(d3.axisBottom(xScale));\n    svg\n      .append('g')\n      .attr('class', 'axis y')\n      .attr('transform', `translate(${margin.left}, 0)`)\n      .call(d3.axisLeft(yScale).ticks(7));\n\n    const barWidth = 80;\n    svg\n      .selectAll('rect')\n      .data(g)\n      .enter()\n      .append('rect')\n      .attr('width', barWidth)\n      .attr('height', d => h - margin.top - yScale(d[1]))\n      .attr('x', d => xScale(d[0]) + xScale.bandwidth() \/ 2 - barWidth \/ 2)\n      .attr('y', d => yScale(d[1]))\n      .attr('fill', '#e6550d')\n      .exit()\n      .remove();\n    svg\n      .selectAll('rect')\n      .on('mouseenter', function () {\n        d3.select(this).transition().duration(300).attr('fill', '#a63603');\n      })\n      .on('mouseleave', function () {\n        d3.select(this).transition().duration(300).attr('fill', '#e6550d');\n      });\n\n    svg\n      .append('text')\n      .text('Average `writing score` grouped by `gender`')\n      .style('font-family', 'IBM Plex Sans')\n      .style('font-weight', 'bold')\n      .style('font-size', '1.5rem')\n      .attr('x', margin.left \/ 2)\n      .attr('y', margin.top \/ 2);\n    svg\n      .append('text')\n      .text('Gender')\n      .style('font-family', 'IBM Plex Sans')\n      .style('font-weight', 'bold')\n      .style('font-size', '1.2rem')\n      .style('text-anchor', 'middle')\n      .attr('x', w \/ 2)\n      .attr('y', h);\n    svg\n      .append('text')\n      .text('Score')\n      .style('font-family', 'IBM Plex Sans')\n      .style('font-weight', 'bold')\n      .style('font-size', '1.2rem')\n      .style('text-anchor', 'middle')\n      .attr('x', margin.left \/ 2 - 5)\n      .attr('transform', `rotate(-90, ${margin.left \/ 2 - 5}, ${h \/ 2})`)\n      .attr('y', h \/ 2);\n  })();\n<\/script>\n    \"\"\"\n)\n\ndp.HTML(s.safe_substitute({\"df\": df.to_csv(index=False), \"id\": \"g2\"}))","6155baff":"Here, we could create a function if the logic is repetitive but this was just for illutrative purposes. I hope you find this notebook helpful! \ud83d\ude01","a85a448d":"# D3.js \ud83d\udda4 Jupyter\n\nThis notebook illustrates how to easily use [D3.js](https:\/\/d3js.org\/) in [Jupyter](https:\/\/jupyter.org\/) environments like Kaggle, JupyterLab, Colab, and Binder.","2dcd98ca":"## Why D3?\n\nBut first of all, why would you want to use D3 instead of your favorite plotting library?\n\nLibraries like [ggplot2](https:\/\/ggplot2.tidyverse.org\/) and [Matplotlib](https:\/\/matplotlib.org\/) allows one to customize the plots till heart's content. So to begin with, you don't really need to use D3. D3 lets you create plots that would be extremely difficult or impossible in standard graphing libraries. So if you simply need to create a static plot and you love your life, just continue using whatever you did. But if you want to explore the land of dynamic interactive plots where you want to add animations, transitions, and interactivity, D3 is the way to go. [Plotly](https:\/\/plotly.com\/graphing-libraries\/), which internally uses D3, is a good middle ground as it can create amazing interactive plots and is a full-blown charting library for multiple languages. [Vega](https:\/\/vega.github.io\/vega\/) is also another popular alternative to D3.\n\nTo get an example of what one can build with D3, I would recommend you to check out the [D3.js Gallery](https:\/\/observablehq.com\/@d3\/gallery) and this amazing notebook [How are the \ud83d\udc83Ladies and the \ud83c\udfa9Gents doing?](https:\/\/www.kaggle.com\/andradaolteanu\/how-are-the-ladies-and-the-gents-doing) by Kaggle Grandmaster [Andrada Olteranu](https:\/\/www.kaggle.com\/andradaolteanu) which is an excellent use of D3 in notebooks.","b84a87a0":"## D3 in Jupyter\n\nThe easy way to use D3 directly is to utilize the functionality in Jupyter Notebooks where they can directly run HTML, CSS, and JavaScript code directly in the notebook with the help of `IPython.display` package.\n\nCreate a `Template` instance from `string` package in Python standard library. The string should be passed as a raw-string and it should contain the code in the format as illustrated in the below code samples. Then use the `safe_substitute` method and pass its output to the `IPython.display.HTML` to render the plot.\n\nOne thing to be taken care is to pass a unique ID in the HTML element because one document can have only one unique ID otherwise it will replace the existing plots.\n\nIn the `safe_substitute` method, we have to pass two values:\n\n- Data\n- ID of the HTML element where the plot will be bound to\n\nI prefer using the following structure for the code\n\n```html\n<style>\n  \/* Enter your styles here *\/\n<\/style>\n\n<div id=\"enter-your-id-here\"><\/div>\n\n<script type=\"module\">\n  import * as d3 from 'https:\/\/cdn.skypack.dev\/d3';\n\n  \/\/ Enter your code here\n<\/script>\n```\n\nOne thing to be noted here is that D3 must be imported from a CDN and it should be compulsorily wrapped in script tag with `type=\"module\"` parameter otherwise your code will throw an error."}}