{"cell_type":{"1100dfa2":"code","04977dd8":"code","607ab2cd":"code","ebd95a41":"code","d4c0e154":"code","1dacf806":"code","9454864e":"code","d5f2b308":"code","60d2d93e":"code","aa8107ef":"code","83240f73":"code","c87f564b":"code","a83ae501":"code","44566e86":"code","fc5a21c8":"code","ed606bcf":"code","bf0e529a":"code","c00fd94f":"markdown","958e7e68":"markdown","6357fb97":"markdown","e814e7a3":"markdown","178fa49d":"markdown","ff6df849":"markdown","b263f8a3":"markdown"},"source":{"1100dfa2":"import os, gc\nimport numpy as np\nfrom numba import njit\nimport datatable as dtable\nimport pandas as pd\nimport janestreet\nimport xgboost as xgb\nfrom hyperopt import hp, fmin, tpe, Trials\nfrom hyperopt.pyll.base import scope\nfrom sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.model_selection import GroupKFold\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nfrom tqdm.notebook import tqdm\nfrom joblib import dump, load","04977dd8":"# this is code slightly modified from the sklearn docs here:\n# https:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_cv_indices.html#sphx-glr-auto-examples-model-selection-plot-cv-indices-py\ndef plot_cv_indices(cv, X, y, group, ax, n_splits, lw=10):\n    \"\"\"Create a sample plot for indices of a cross-validation object.\"\"\"\n    \n    cmap_cv = plt.cm.coolwarm\n\n    jet = plt.cm.get_cmap('jet', 256)\n    seq = np.linspace(0, 1, 256)\n    _ = np.random.shuffle(seq)   # inplace\n    cmap_data = ListedColormap(jet(seq))\n\n    # Generate the training\/testing visualizations for each CV split\n    for ii, (tr, tt) in enumerate(cv.split(X=X, y=y, groups=group)):\n        # Fill in indices with the training\/test groups\n        indices = np.array([np.nan] * len(X))\n        indices[tt] = 1\n        indices[tr] = 0\n\n        # Visualize the results\n        ax.scatter(range(len(indices)), [ii + .5] * len(indices),\n                   c=indices, marker='_', lw=lw, cmap=cmap_cv,\n                   vmin=-.2, vmax=1.2)\n\n    # Plot the data classes and groups at the end\n    ax.scatter(range(len(X)), [ii + 1.5] * len(X),\n               c=y, marker='_', lw=lw, cmap=plt.cm.Set3)\n\n    ax.scatter(range(len(X)), [ii + 2.5] * len(X),\n               c=group, marker='_', lw=lw, cmap=cmap_data)\n\n    # Formatting\n    yticklabels = list(range(n_splits)) + ['target', 'day']\n    ax.set(yticks=np.arange(n_splits+2) + .5, yticklabels=yticklabels,\n           xlabel='Sample index', ylabel=\"CV iteration\",\n           ylim=[n_splits+2.2, -.2], xlim=[0, len(y)])\n    ax.set_title('{}'.format(type(cv).__name__), fontsize=15)\n    return ax","607ab2cd":"# weighted average as per Donate et al.'s formula\n# https:\/\/doi.org\/10.1016\/j.neucom.2012.02.053\ndef weighted_average(a):\n    w = []\n    n = len(a)\n    for j in range(1, n + 1):\n        j = 2 if j == 1 else j\n        w.append(1 \/ (2**(n + 1 - j)))\n    return np.average(a, weights = w)","ebd95a41":"%%time\n\nprint('Loading...')\ntrain = dtable.fread('\/kaggle\/input\/jane-street-market-prediction\/train.csv').to_pandas()\nfeatures = [c for c in train.columns if 'feature' in c]\n\nprint('Filling...')\ntrain = train.query('weight > 0').reset_index(drop = True)\ntrain[features] = train[features].fillna(method = 'ffill').fillna(0)\ntrain['action'] = (train['resp'] > 0).astype('int')\n\nprint('Finish.')","d4c0e154":"train[features].head(10)","1dacf806":"n_splits = 5\ngroup_gap = 31","9454864e":"from sklearn.model_selection._split import _BaseKFold, indexable, _num_samples\nfrom sklearn.utils.validation import _deprecate_positional_args\n\n# https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\nclass GroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_size : int, default=None\n        Maximum size for a single training set.\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.model_selection import GroupTimeSeriesSplit\n    >>> groups = np.array(['a', 'a', 'a', 'a', 'a', 'a',\\\n                           'b', 'b', 'b', 'b', 'b',\\\n                           'c', 'c', 'c', 'c',\\\n                           'd', 'd', 'd'])\n    >>> gtss = GroupTimeSeriesSplit(n_splits=3)\n    >>> for train_idx, test_idx in gtss.split(groups, groups=groups):\n    ...     print(\"TRAIN:\", train_idx, \"TEST:\", test_idx)\n    ...     print(\"TRAIN GROUP:\", groups[train_idx],\\\n                  \"TEST GROUP:\", groups[test_idx])\n    TRAIN: [0, 1, 2, 3, 4, 5] TEST: [6, 7, 8, 9, 10]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a']\\\n    TEST GROUP: ['b' 'b' 'b' 'b' 'b']\n    TRAIN: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] TEST: [11, 12, 13, 14]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a' 'b' 'b' 'b' 'b' 'b']\\\n    TEST GROUP: ['c' 'c' 'c' 'c']\n    TRAIN: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\\\n    TEST: [15, 16, 17]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a' 'b' 'b' 'b' 'b' 'b' 'c' 'c' 'c' 'c']\\\n    TEST GROUP: ['d' 'd' 'd']\n    \"\"\"\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_size=None\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_size = max_train_size\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n        group_test_size = n_groups \/\/ n_folds\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n            for train_group_idx in unique_groups[:group_test_start]:\n                train_array_tmp = group_dict[train_group_idx]\n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n            train_end = train_array.size\n            if self.max_train_size and self.max_train_size < train_end:\n                train_array = train_array[train_end -\n                                          self.max_train_size:train_end]\n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n            yield [int(i) for i in train_array], [int(i) for i in test_array]","d5f2b308":"import numpy as np\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection._split import _BaseKFold, indexable, _num_samples\nfrom sklearn.utils.validation import _deprecate_positional_args\n\n# modified code for group gaps; source\n# https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\nclass PurgedGroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Allows for a gap in groups to avoid potentially leaking info from\n    train into test if the model has windowed or lag features.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_group_size : int, default=Inf\n        Maximum group size for a single training set.\n    group_gap : int, default=None\n        Gap between train and test\n    max_test_group_size : int, default=Inf\n        We discard this number of groups from the end of each train split\n    \"\"\"\n\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_group_size=np.inf,\n                 max_test_group_size=np.inf,\n                 group_gap=None,\n                 verbose=False\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_group_size = max_train_group_size\n        self.group_gap = group_gap\n        self.max_test_group_size = max_test_group_size\n        self.verbose = verbose\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        group_gap = self.group_gap\n        max_test_group_size = self.max_test_group_size\n        max_train_group_size = self.max_train_group_size\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n\n        group_test_size = min(n_groups \/\/ n_folds, max_test_group_size)\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n\n            group_st = max(0, group_test_start - group_gap - max_train_group_size)\n            for train_group_idx in unique_groups[group_st:(group_test_start - group_gap)]:\n                train_array_tmp = group_dict[train_group_idx]\n                \n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n\n            train_end = train_array.size\n \n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n\n            test_array  = test_array[group_gap:]\n            \n            \n            if self.verbose > 0:\n                    pass\n                    \n            yield [int(i) for i in train_array], [int(i) for i in test_array]","60d2d93e":"%%time\n\nfig, ax = plt.subplots()\ncv = PurgedGroupTimeSeriesSplit(n_splits = n_splits, group_gap = group_gap)\nplot_cv_indices(cv, train[features].values, train['action'].values, train['date'].values, ax, 5, lw = 20)\nplt.show()","aa8107ef":"def optimise(params):\n    \n    print(params)\n    p = {'learning_rate': params['learning_rate'],\n         'max_depth': params['max_depth'], \n         'gamma': params['gamma'], \n         'min_child_weight': params['min_child_weight'], \n         'subsample': params['subsample'], \n         'colsample_bytree': params['colsample_bytree'], \n         'verbosity': 0, \n         'objective': 'binary:logistic',\n         'eval_metric': 'auc', \n         'tree_method': 'gpu_hist', \n         'random_state': 42,\n        }\n    \n    scores = []\n    gkf = PurgedGroupTimeSeriesSplit(n_splits = n_splits, group_gap = group_gap)\n    for fold, (tr, te) in enumerate(gkf.split(train['action'].values, train['action'].values, train['date'].values)):\n        X_tr, X_val = train.loc[tr, features].values, train.loc[te, features].values\n        y_tr, y_val = train.loc[tr, 'action'].values, train.loc[te, 'action'].values\n        d_tr = xgb.DMatrix(X_tr, y_tr)\n        d_val = xgb.DMatrix(X_val, y_val)\n        clf = xgb.train(p, d_tr, params['n_round'], [(d_val, 'eval')], verbose_eval = False)\n        val_pred = clf.predict(d_val)\n        score = roc_auc_score(y_val, val_pred)\n#         print(f'Fold {fold} ROC AUC:\\t', score)\n        scores.append(score)\n        \n        del clf, val_pred, d_tr, d_val, X_tr, X_val, y_tr, y_val, score\n        rubbish = gc.collect()\n        \n    score_avg = weighted_average(scores)\n    print(score_avg)\n    return - score_avg","83240f73":"# param_space = {'learning_rate': hp.uniform('learning_rate', 0.01, 0.3), \n#                'max_depth': scope.int(hp.quniform('max_depth', 3, 11, 1)), \n#                'gamma': hp.uniform('gamma', 0, 10), \n#                'min_child_weight': hp.uniform('min_child_weight', 0, 10),\n#                'subsample': hp.uniform('subsample', 0.1, 1), \n#                'colsample_bytree': hp.uniform('colsample_bytree', 0.1, 1), \n#                'n_round': scope.int(hp.quniform('n_round', 50, 1000, 25)), \n#               }\n\n# trials = Trials()\n\n# hopt = fmin(fn = optimise, \n#             space = param_space, \n#             algo = tpe.suggest, \n#             max_evals = 50, \n#             trials = trials, \n#            )","c87f564b":"# print(hopt)\n# dump(trials, 'XGB_HyperOpt_Trials', compress = True)","a83ae501":"%%time\n\np_best = {'learning_rate': 0.014106988708201764,\n          'max_depth': 8, \n          'gamma': 9.800749651802157, \n          'min_child_weight': 0.3032862674190433, \n          'subsample': 0.4648851101943981, \n          'colsample_bytree': 0.994909039539885, \n          'objective': 'binary:logistic',\n          'eval_metric': 'auc', \n          'tree_method': 'gpu_hist', \n         }\n\nX_tr, y_tr = train.loc[train['date'] > 85, features].values, train.loc[train['date'] > 85, 'action'].values\nd_tr = xgb.DMatrix(X_tr, y_tr)\n\n# Seed Blending\nmodels = []\nfor seed in range(5):\n    p_best['random_state'] = seed\n    clf = xgb.train(p_best, d_tr, 950)\n    models.append(clf)\n    \n    rubbish = gc.collect()","44566e86":"example_test = pd.read_csv('..\/input\/jane-street-market-prediction\/example_test.csv')\nexample_test = example_test.query('weight > 0').reset_index(drop = True)\nexample_test[features] = example_test[features].fillna(method = 'ffill').fillna(0)\nd_tt = xgb.DMatrix(example_test[features].values)\ntest_preds = np.zeros(example_test.shape[0])\nfor clf in models:\n    test_preds += clf.predict(d_tt) \/ len(models)\nprint(test_preds.min())\nprint(test_preds.max())\nprint(test_preds.mean())\nprint(test_preds.std())\nplt.hist(test_preds, bins = 100)\nplt.show()","fc5a21c8":"@njit\ndef fast_fillna(array, values):\n    if np.isnan(array.sum()):\n        array = np.where(np.isnan(array), values, array)\n    return array\n\ntrain.loc[0, features[1:]] = fast_fillna(train.loc[0, features[1:]].values, 0)","ed606bcf":"env = janestreet.make_env()\nenv_iter = env.iter_test()","bf0e529a":"opt_th = 0.505\ntmp = np.zeros(len(features))\nfor (test_df, pred_df) in tqdm(env_iter):\n    if test_df['weight'].item() > 0:\n        x_tt = test_df.loc[:, features].values\n        x_tt[0, :] = fast_fillna(x_tt[0, :], tmp)\n        tmp = x_tt[0, :]\n        d_tt = xgb.DMatrix(x_tt)\n        pred = 0.\n        for clf in models:\n            pred += clf.predict(d_tt) \/ len(models)\n        pred_df.action = np.where(pred >= opt_th, 1, 0).astype(int)\n    else:\n        pred_df.action = 0\n    env.predict(pred_df)","c00fd94f":"# Jane Street: XGBoost HyperOpt + GroupKFold\n\nI've made a notebook for hyperparameter tuning for XGBoost\/LightGBM\/CatBoost models. I use the Purged Rolling Time Series CV Split and GroupTimesSeriesSplit methods. I also try the forward-fillna method.\n\n**References:**\n\nhttps:\/\/www.kaggle.com\/hamditarek\/market-prediction-xgboost-with-gpu-fit-in-1min\n\nhttps:\/\/www.kaggle.com\/xhlulu\/jane-street-cudf-xgboost-with-gpu\n\nhttps:\/\/www.kaggle.com\/jorijnsmit\/found-the-holy-grail-grouptimeseriessplit\n\nhttps:\/\/www.kaggle.com\/marketneutral\/purged-rolling-time-series-cv-split\n\nhttps:\/\/www.kaggle.com\/jorijnsmit\/validating-cross-validators","958e7e68":"# Training","6357fb97":"# HyperOpt","e814e7a3":"# Preprocessing","178fa49d":"# Submitting","ff6df849":"# Example Test Prediction Analysis","b263f8a3":"# PurgedTimeSeriesKFold & GroupTimeSplitKFold"}}