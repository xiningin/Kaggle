{"cell_type":{"de2186e0":"code","63fc6abc":"code","9d9181cb":"code","8e5e9827":"code","b00c8498":"code","69c30fc6":"code","27c2aea7":"code","d9b746f9":"code","f88029bf":"code","7ff9e741":"code","98bd5d2c":"code","06cdf5fc":"code","d12edcbf":"code","9af538f4":"code","62ac3cb4":"code","59731112":"code","37bfa8be":"code","09a5c3af":"code","0055d5b2":"code","a5b63698":"code","3428d8cf":"code","515ae1b5":"code","07e6e5ae":"code","9c76caa1":"code","3cd22aba":"markdown","7091a3dd":"markdown","f09c2512":"markdown","9e94e9f7":"markdown","866f29db":"markdown","d5833865":"markdown","91e0c09c":"markdown","b92899d2":"markdown","25d774e4":"markdown","6e9c5399":"markdown","b8d15d73":"markdown","b2b494ca":"markdown","40600bc2":"markdown","885d1cef":"markdown","9f0f94f1":"markdown"},"source":{"de2186e0":"from bs4 import BeautifulSoup","63fc6abc":"\ninfile = open(str(\"..\/input\/utmb.kml\"),\"r\")\ncontents = infile.read()\n\n","9d9181cb":"soup = BeautifulSoup(contents,'xml')\ntitles = soup.find_all(str(\"LineString\"))","8e5e9827":"coor=[]\nfor title in titles:\n            coor.append(title.get_text())","b00c8498":"coor[0][0:1000]","69c30fc6":"import shlex","27c2aea7":"liste_0 =[]\nfor i in range(len(coor)):\n    a = shlex.split(coor[i], posix=False)\n    liste_0.append(a)","d9b746f9":"liste_0[0][0:10]\n\n","f88029bf":"import pandas as pd","7ff9e741":"df_0 = pd.DataFrame(liste_0).transpose()","98bd5d2c":"df_0.head(10)","06cdf5fc":"df_0.columns = [\"column\"]\ndf_0[['Lat', 'Long', 'Alt']] = df_0.column.str.split(\",\",expand=True)","d12edcbf":"df_0.head(10)","9af538f4":"df_0 = df_0[['Lat', 'Long', 'Alt']].astype({\"Lat\": float , \"Long\": float,\"Alt\":float})","62ac3cb4":"df_0.head(10)","59731112":"if df_0.Alt.sum() < 15:\n    df_0 = df_0.dropna()\n    df_0 = df_0.reset_index(drop=True)\nelse:\n    df_0 = df_0.dropna()\n    df_0 = df_0[~(df_0 == 0).any(axis=1)]\n    df_0 = df_0.reset_index(drop=True)","37bfa8be":"df_0.head(10)","09a5c3af":"from math import sin, cos, sqrt, atan2, radians","0055d5b2":"        distances = []\n        for i in range(len(df_0)):\n            if i == 0:\n                distances.append(0)\n            else:\n                lat1 = radians(df_0.Lat[i])\n                lon1 = radians(df_0.Long[i])\n                lat2 = radians(df_0.Lat[i-1])\n                lon2 = radians(df_0.Long[i-1])\n\n                dlon = lon1 - lon2\n                dlat = lat1 - lat2\n        #to calculate distace between two points on the earth\n                a = sin(dlat \/ 2)**2 + cos(lat1) * cos(lat2) * sin(dlon \/ 2)**2\n                c = 2 * atan2(sqrt(a), sqrt(1 - a))\n                radius_of_world = 6371 #kms\n                distance = radius_of_world * c\n\n                distances.append(distance*1000)\n        distances = pd.DataFrame(distances)\n        c_distances = distances.cumsum()\n        distances.columns = [\"Dist\"]\n        c_distances.columns = [\"Cdist\"]\n        dframe=pd.concat([df_0, distances,c_distances], axis=1)","a5b63698":"dframe.head(10)","3428d8cf":"import matplotlib.pyplot as plt","515ae1b5":"%matplotlib inline","07e6e5ae":"plt.xlabel('Distance meters')\nplt.ylabel('Altitude meters')\nplt.title('Route Topo')\nplt.plot(dframe.Cdist, dframe.Alt, \"r-\" )","9c76caa1":"plt.scatter(dframe.Lat,dframe.Long)","3cd22aba":"Make it Pandas dataframe and transpose it for next steps.","7091a3dd":"\nTo split Values by \",\"","f09c2512":"To be able to read and parse .kml file, i will use beautifulsoup lib","9e94e9f7":"To drop first column and change the other columns' data type to float from string","866f29db":"To eliminate singular 0 values from altitude data. But, if our dataset doesn't include altitude values, it means we have whole column with 0 values for that case i don't want to drop zeros.","d5833865":"Let's see our splited data in list","91e0c09c":"There could be more than one LineString tag in .kml file. Therefore, we need to merge data ","b92899d2":"In this notebook i will read Gps file which comes as .kml ( xml ) and convert the  data to pandas Dataframe. Additionally, i will calculate distances between  gps point to point(Lat, Long)  and accumulated distance for whole dataset. \n\nLet's Begin !","25d774e4":"Now, we have dataframe with one column. each row has a string data. actually \",\" in this string is a sperator first part is represents Lat second represents Long and Last one represent Alt. (see  Lat Long Alt https:\/\/en.wikipedia.org\/wiki\/Geographic_coordinate_system )","6e9c5399":"To get coordinates from  .xml file between releated tag  \n\n\n","b8d15d73":"Let's import matplotlib and plot the values in line plot as a topo of gps data","b2b494ca":"At the moment, our data is just one string in corr list","40600bc2":"Now, we have distance datas","885d1cef":"To split text values by  space. If we look at our data we have three value seperated by \",\" and those sets separated eachother by space. To split text by space we will use shlex lib.","9f0f94f1":"Now, our dataset ready to add it distances"}}