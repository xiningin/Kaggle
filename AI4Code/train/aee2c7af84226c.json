{"cell_type":{"a0344159":"code","80918f17":"code","9418a7fc":"code","0605b6bf":"code","fa16e99e":"code","1b972d3e":"code","db27f0b7":"code","b673333a":"code","dc1c43ba":"code","bd87029b":"code","d366fc3c":"code","af7077a7":"code","0bfadd1e":"code","4a433665":"code","fed2bc03":"code","8d4fa6f2":"code","38ea7d2a":"code","43f51d7b":"code","463cb7f5":"code","a725e066":"code","ffdd29c7":"markdown","ec57f1d8":"markdown","953cc693":"markdown","2451aefc":"markdown","424f70d5":"markdown","063d93d7":"markdown","2284e00f":"markdown","d0b1f62f":"markdown","e23b737a":"markdown","22a6957f":"markdown","54f98a71":"markdown"},"source":{"a0344159":"# Hyperparameters\nbatch_size = 16 # batch size\nlr = 5e-5 # learning rate\nepochs = 2 # number of epochs\nmax_seq_len = 128 # max sequence length\ndoc_stride = 64 # document stride\n\n# Options\ncross_validation = True # whether to use cross-validation\nK = 2 # number of CV splits\npost_processing = True # whether to use post-processing","80918f17":"import numpy as np\nimport pandas as pd\nimport json\nimport os","9418a7fc":"pd_train = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/train.csv')\npd_test = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/test.csv')","0605b6bf":"np_train = np.array(pd_train)\nnp_test = np.array(pd_test)","fa16e99e":"# Given a data size, return the train\/valid indicies for K splits.\ndef split_data(num_examples, K):\n    np.random.seed(0)\n    idx = np.arange(num_examples)\n    np.random.shuffle(idx)\n    \n    boundary = num_examples \/\/ K\n    splits = [{} for _ in range(K)]\n    for i in range(K):\n        splits[i]['valid_idx'] = idx[i*boundary:(i+1)*boundary]\n        splits[i]['train_idx'] = np.concatenate((idx[:i*boundary], idx[(i+1)*boundary:]))\n\n        valid = np_train[splits[i]['valid_idx']]\n        d = {'neutral':0, 'positive':0, 'negative':0}\n        for line in valid:\n            d[line[-1]] += 1\n        print(d)\n        \n    return splits","1b972d3e":"splits = split_data(len(np_train), K)","db27f0b7":"# Convert data to SQuAD-style\ndef convert_data(data, directory, filename):\n    def find_all(input_str, search_str):\n        l1 = []\n        length = len(input_str)\n        index = 0\n        while index < length:\n            i = input_str.find(search_str, index)\n            if i == -1:\n                return l1\n            l1.append(i)\n            index = i + 1\n        return l1\n    \n    output = {}\n    output['version'] = 'v1.0'\n    output['data'] = []\n    \n    for line in data:\n        paragraphs = []\n        context = line[1]\n        qas = []\n        question = line[-1]\n        qid = line[0]\n        answers = []\n        answer = line[2]\n        if type(context) != str:\n            print(context, type(context))\n            continue\n        answer_starts = find_all(context, answer)\n        for answer_start in answer_starts:\n            answers.append({'answer_start': answer_start, 'text': answer})\n        qas.append({'question': '[MASK]', 'id': qid, 'is_impossible': False, 'answers': answers})\n\n        paragraphs.append({'context': context, 'qas': qas})\n        output['data'].append({'title': 'None', 'paragraphs': paragraphs})\n\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    with open(os.path.join(directory, filename), 'w') as outfile:\n        json.dump(output, outfile)","b673333a":"# convert k-fold train data\nfor i, split in enumerate(splits):\n    data = np_train[split['train_idx']]\n    directory = 'split_' + str(i+1)\n    filename = 'train.json'\n    convert_data(data, directory, filename)","dc1c43ba":"# convert original train\/test data\ndata = np_train\ndirectory = 'original'\nfilename = 'train.json'\nconvert_data(data, directory, filename)\n\ndata = np_test\nfilename = 'test.json'\nconvert_data(data, directory, filename)","bd87029b":"!cd \/kaggle\/input\/pytorchtransformers\/transformers-2.5.1; pip install .","d366fc3c":"def run_script(train_file, predict_file, batch_size=16, lr=5e-5, epochs=2, max_seq_len=128, doc_stride=64):\n    !python \/kaggle\/input\/pytorchtransformers\/transformers-2.5.1\/examples\/run_squad.py \\\n    --model_type distilbert \\\n    --model_name_or_path distilbert-base-uncased \\\n    --cache_dir \/kaggle\/input\/cached-distilbert-base-uncased\/cache \\\n    --do_lower_case \\\n    --do_train \\\n    --do_eval \\\n    --train_file=$train_file \\\n    --predict_file=$predict_file \\\n    --overwrite_cache \\\n    --learning_rate=$lr \\\n    --num_train_epochs=$epochs \\\n    --max_seq_length=$max_seq_len \\\n    --doc_stride=$doc_stride \\\n    --output_dir .\/results \\\n    --overwrite_output_dir \\\n    --per_gpu_eval_batch_size=$batch_size \\\n    --per_gpu_train_batch_size=$batch_size \\\n    --save_steps=100000","af7077a7":"!mkdir results","0bfadd1e":"if cross_validation:\n    for i in range(1, K+1):\n        train_file = \"split_\" + str(i) + \"\/train.json\"\n        predict_file = \"original\/train.json\"\n        run_script(train_file, predict_file, batch_size, lr, epochs, max_seq_len, doc_stride)\n        !mv \"results\/predictions_.json\" \"results\/predictions_\"$i\".json\"","4a433665":"def jaccard(str1, str2): \n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","fed2bc03":"def evaluate(splits, np_train, post_processing=False):\n    K = len(splits)\n    predictions = [json.load(open('results\/predictions_' + str(i+1) + '.json', 'r')) for i in range(K)]\n\n    train_score = [{'neutral':[], 'positive':[], 'negative':[], 'total':[]} for _ in range(K+1)]\n    valid_score = [{'neutral':[], 'positive':[], 'negative':[], 'total':[]} for _ in range(K+1)]\n\n    for train_idx, line in enumerate(np_train):\n        text_id = line[0]\n        text = line[1]\n        answer = line[2]\n        sentiment = line[-1]\n\n        if type(text) != str:\n            continue\n\n        for i, prediction in enumerate(predictions):\n            if text_id not in prediction:\n                print('key error:', text_id)\n                continue\n            else:\n                if post_processing and (sentiment == 'neutral' or len(text.split()) <= 0): # post-processing\n                    score = jaccard(answer, text)\n                else:\n                    score = jaccard(answer, prediction[text_id])\n\n                if train_idx in splits[i]['valid_idx']:\n                    valid_score[i][sentiment].append(score)\n                    valid_score[i]['total'].append(score)\n                    valid_score[K][sentiment].append(score)\n                    valid_score[K]['total'].append(score)\n\n                else:\n                    train_score[i][sentiment].append(score)\n                    train_score[i]['total'].append(score)\n                    train_score[K][sentiment].append(score)\n                    train_score[K]['total'].append(score)\n\n    for i, score_dict in enumerate([train_score, valid_score]):\n        if i == 0:\n            print('train score \\n')\n        else:\n            print('valid score \\n')\n        for j in range(K+1):\n            for sentiment in ['neutral', 'positive', 'negative', 'total']:\n                score = np.array(score_dict[j][sentiment])\n                if j < K:\n                    print('split', j+1)\n                else:\n                    print('all data')\n                print(sentiment + ' - ' + str(len(score)) + ' examples, average score: ' + str(score.mean()))\n            print()","8d4fa6f2":"if cross_validation:\n    evaluate(splits, np_train, post_processing)","38ea7d2a":"train_file = \"original\/train.json\"\npredict_file = \"original\/test.json\"\nrun_script(train_file, predict_file, batch_size, lr, epochs, max_seq_len, doc_stride)\n!mv results\/predictions_.json results\/test_predictions.json","43f51d7b":"# Copy predictions to submission file.\npredictions = json.load(open('results\/test_predictions.json', 'r'))\nsubmission = pd.read_csv(open('\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv', 'r'))\nfor i in range(len(submission)):\n    id_ = submission['textID'][i]\n    if post_processing and (pd_test['sentiment'][i] == 'neutral' or len(pd_test['text'][i].split()) <= 0): # post-processing\n        submission.loc[i, 'selected_text'] = pd_test['text'][i]\n    else:\n        submission.loc[i, 'selected_text'] = predictions[id_]","463cb7f5":"submission.head()","a725e066":"# Save the submission file.\nsubmission.to_csv('submission.csv', index=False)","ffdd29c7":"### Cross-Validation\nFinetune QA models for cross-validation.","ec57f1d8":"### Convert Data to SQuAD-style\nIn this part, I convert the data into SQuAD-style.  \nSince I think most of the errors in the dataset are irreducible, I do not use additional preprocessing methods to handle them.","953cc693":"## Submission","2451aefc":"## Finetuning\nInstall the pytorch-transformers package (v2.5.1) of [huggingface](https:\/\/github.com\/huggingface\/transformers).","424f70d5":"## Problem Formulation\nI formulate this task as an extractive question answering problem, such as SQuAD.  \nGiven a question and context, the model is trained to find the answer spans in the context.\n\nTherefore, I use sentiment as question, text as context, selected_text as answer.\n- Question: sentiment\n- Context: text\n- Answer: selected_text","063d93d7":"## Data Preprocessing\n### Load Data","2284e00f":"## Hyperparameters & Options ","d0b1f62f":"### K-fold Split\nSplit the data into K folds for cross validation. Use the fixed random seed for reproducibility.","e23b737a":"### Test\nFinetune a model for the test.","22a6957f":"### Evaluation\nCalculate train\/valid scores.","54f98a71":"## Import Packages"}}