{"cell_type":{"e49dc7b2":"code","f20f6320":"code","5574211b":"code","aaaed9e0":"code","d97a08dd":"code","b4594d44":"code","a5252ba8":"code","d94718f3":"code","7baf0fd8":"code","0e1dea16":"code","f028efb6":"code","a8ce381a":"code","5ba72056":"code","c1846f9b":"code","b2b554a1":"code","2076c415":"code","5a4b4c39":"code","c24e4eea":"code","b73c3513":"code","08e0a3d8":"code","0f1e61aa":"code","ca398234":"code","cd2d3f82":"code","7e3426f3":"code","d427015f":"code","0eab04c5":"code","94f94b88":"code","ca1648ec":"code","8b473016":"code","00f7de82":"code","d60d3b3f":"code","1592dc12":"code","5082cd40":"code","714d6dcb":"code","ce97173f":"code","36565c50":"code","96fde91b":"code","15084f7a":"code","95d36314":"markdown","1a8b81df":"markdown","2148dd9d":"markdown","552aa547":"markdown","bbd43d86":"markdown","c931a90f":"markdown","e0b43fd0":"markdown","fbc5bb7f":"markdown","751c8e50":"markdown","1f4c8c0a":"markdown","9acacf72":"markdown","831d80eb":"markdown","c2312552":"markdown","9d29afa6":"markdown","057e50d0":"markdown","05af3609":"markdown","cd6e6df4":"markdown","018aa0fc":"markdown"},"source":{"e49dc7b2":"import numpy as np   #Linear algera Library\nimport pandas as pd\nimport matplotlib.pyplot as plt  #to plot graphs\nimport seaborn as sns  #to plot graphs\nsns.set()  #setting seaborn as default \n\nimport warnings\nwarnings.filterwarnings('ignore')","f20f6320":"data = pd.read_csv('..\/input\/predict-if-people-prefer-wfh-verses-wfo-data\/WFH_WFO_dataset.csv')\ndata.head()","5574211b":"data.dtypes","aaaed9e0":"data.columns","d97a08dd":"#WFH\/remote work for sure -1\n#I'd rather go back to office -0\nax=sns.countplot(x='Target',data=data)\nplt.title('WFH vs WFO')\nfor p in ax.patches:\n        ax.annotate('{:}'.format(p.get_height()), (p.get_x()+0.25, p.get_height()+3)) ","b4594d44":"ax=sns.countplot(x='Gender',data=data)\nplt.title('Male vs Female')\nfor p in ax.patches:\n        ax.annotate('{:}'.format(p.get_height()), (p.get_x()+0.25, p.get_height()+3)) ","a5252ba8":"data.head(3)","d94718f3":"ax=sns.countplot(x='kids',data=data)\nplt.title('kids vs no kids')\nfor p in ax.patches:\n        ax.annotate('{:}'.format(p.get_height()), (p.get_x()+0.25, p.get_height()+3)) ","7baf0fd8":"sns.catplot(x='Age',y='Target',data=data,hue='kids')","0e1dea16":"ax=sns.countplot(x='calmer_stressed',data=data)\nplt.title('calmer vs stressed')\nfor p in ax.patches:\n        ax.annotate('{:}'.format(p.get_height()), (p.get_x()+0.25, p.get_height()+3)) ","f028efb6":"data.head(1)","a8ce381a":"ax=data.groupby([\"RM_productive\"]).count().plot.bar(figsize=(18,5))","5ba72056":"ax=sns.countplot(x='Occupation',data=data)\nplt.title(\"Occupation count\")\nfor p in ax.patches:\n        ax.annotate('{:}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+1)) ","c1846f9b":"data.describe()","b2b554a1":"# Method 1\ndata.info() # no null","2076c415":"#Method 2\ndata.isnull().sum()","5a4b4c39":"data.nunique()","c24e4eea":"data.head(5)","b73c3513":"data.dtypes","08e0a3d8":"#1. Gender\ngender=pd.get_dummies(data['Gender'],drop_first=True)\ngender.head()\n#FEMALE=0,MALE=1","0f1e61aa":"calm_stress=pd.get_dummies(data['calmer_stressed'],drop_first=True)\ncalm_stress.head()","ca398234":"data=pd.concat([data,gender,calm_stress],axis=1)\ndata.drop(['Gender','calmer_stressed'],axis=1,inplace=True)","cd2d3f82":"data.head(5)","7e3426f3":"\ndata.dtypes","d427015f":"#first fetch all the categorical columns with Yes and NO\ncategorical =  ['Same_ofiice_home_location', 'kids', 'RM_save_money', 'RM_quality_time', 'RM_better_sleep', 'digital_connect_sufficient','RM_job_opportunities']\n#write a function to change yes to 1 and no to 0\ndef binary_map(x):\n    return x.map({'Yes': 1, \"No\": 0})\n\n# now replace yes and no with 1 and 0 in our dataset\ndata[categorical] = data[categorical].apply(binary_map)\n\n","0eab04c5":"data.head()","94f94b88":"data = data.dropna(subset=['Same_ofiice_home_location','RM_job_opportunities'])\ndata['Same_ofiice_home_location'] = data['Same_ofiice_home_location'].astype(int)  # this column was coming as float\ndata['RM_job_opportunities'] = data['RM_job_opportunities'].astype(int) # this column was coming as float\n\n\ndata.dtypes","ca1648ec":"x=data[['Age','Same_ofiice_home_location','kids','RM_save_money','RM_quality_time','RM_better_sleep','RM_professional_growth','RM_lazy','RM_productive','digital_connect_sufficient','RM_better_work_life_balance','RM_improved_skillset','RM_job_opportunities','Male','STRESSED']]\ny=data['Target']\n\n","8b473016":"x.head()","00f7de82":"from sklearn.model_selection import train_test_split\nnp.random.seed(0) #so data can have same values\nx_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.8,test_size=0.2,random_state=5)\n","d60d3b3f":"data.head(3)","1592dc12":"from sklearn.linear_model import LogisticRegression\n","5082cd40":"logm=LogisticRegression()\nlogm.fit(x_train,y_train)","714d6dcb":"predictions=logm.predict(x_test)","ce97173f":"from sklearn.metrics import classification_report,confusion_matrix\nprint(classification_report(y_test,predictions))\nprint(\"\\n\")\nprint(confusion_matrix(y_test,predictions))","36565c50":"import math\nfrom sklearn import metrics\n\n#metrics to find accuracy of continous variables\nprint('Mean Abs value:' ,metrics.mean_absolute_error(y_test,predictions))\nprint('Mean squared value:',metrics.mean_squared_error(y_test,predictions))\nprint('root mean squared error value:',math.sqrt(metrics.mean_squared_error(y_test,predictions)))","96fde91b":"\ny_test.shape\ny_test_matrix = y_test.values.reshape(-1,1)\n","15084f7a":"dframe=pd.DataFrame({'actual':y_test,'Predicted':predictions})\ndframe.head(20)","95d36314":"#### This shows an accuracy of 88%. 21 values we predicted correctly and 3 values were incorrect","1a8b81df":"#### Majority of the people in our data set does not have kids","2148dd9d":"#### Most people have said that WFH has made them more productive (Rank:4)","552aa547":"### I took a survey and asked multiple people a serious of questions and then checked if they prefer WFH or WFO. Using these same features I have tried to see how much my model can predict. The target column has the right output with which we will train our model. We then test the model and compare the actual and predicted values ","bbd43d86":"## Step 5: Check for categorical data","c931a90f":"## Step 8: Predict WFH or WFO using test data","e0b43fd0":"## Step 4: Check for null values","fbc5bb7f":"## Step 9: Check the accuracy","751c8e50":"## Step 2. Fetch your dataset","1f4c8c0a":"## Step 3: Understand your data set","9acacf72":"#### Here we can see that 123 people wants to go back to office and 84 people would like work from home to continue","831d80eb":"## Step 7: Train the model","c2312552":"#### The below graphs gives the count of people in each occupation ","9d29afa6":"#### We can see that remote working has caused stress levels to increase for most people ","057e50d0":"### for the YES and NO columns, map yes to 1 and No to 0","05af3609":"#### We have a count of 107 Females and 100 Males ","cd6e6df4":"## Step 6: Split data into train and split data","018aa0fc":"#### Get dummy values for Gender and calmer_stressed column"}}