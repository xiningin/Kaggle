{"cell_type":{"7211ec96":"code","db28314f":"code","8bb2941b":"code","10d8fffa":"code","05f85b35":"code","d8021e01":"code","e1b666f3":"code","963ed80c":"code","8213ad8a":"code","264c1d54":"code","f3f058f4":"code","0d82a080":"code","a235f735":"code","097b127b":"code","21d21911":"code","362da7d9":"code","37374263":"code","28915888":"code","66311fc1":"code","4e89a7ac":"code","448565ef":"code","2609d8a5":"code","e3514d29":"code","39c38817":"code","ef734b97":"code","1db24fa2":"code","5de14bb7":"markdown"},"source":{"7211ec96":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","db28314f":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt \n%matplotlib inline \nimport pickle\nfrom scipy.spatial import *\nimport os ","8bb2941b":"data_path = '..\/input\/champsscalarold\/'\nstructures_path = data_path + 'structures.csv'","10d8fffa":"structures_df = pd.read_csv(structures_path)","05f85b35":"structures_df.head()","d8021e01":"structures_df.describe()","e1b666f3":"eigen_value_distances_matrix_dict = {}\n","963ed80c":"from tqdm import *","8213ad8a":"eigen_columns = list([f'eigen_value_{x+1}' for x in range(29)])","264c1d54":"eigen_value_coulomb_matrix_columns = list([f'eigen_value_coulomb_matrix_{x+1}' for x in range(29)])","f3f058f4":"eigen_columns","0d82a080":"eigen_value_coulomb_matrix_columns","a235f735":"eigen_value = pd.DataFrame(structures_df['molecule_name'].nunique(), index=np.arange(structures_df['molecule_name'].nunique()), columns=eigen_columns + ['molecule_name'], dtype=float)\n","097b127b":"atom_Z_dict = {'C': 6, 'O': 8, 'H': 1, 'N': 7, 'F': 9}","21d21911":"eigen_values = []\neigen_values_coulomb_matrix = []\neigen_value_coulomb_matrix_dict = {}\nwith tqdm(total=len(structures_df['molecule_name'].unique())) as pbar:\n    for i, (name, df) in enumerate(structures_df.groupby('molecule_name')):\n        xyz = df[['x', 'y', 'z']]\n        matrix = distance_matrix(xyz, xyz)\n        inverse_matrix = np.where(matrix != 0, 1\/ matrix, 0)\n        atom_type = df['atom'].values\n        atom_Z = np.array([atom_Z_dict[type_] for type_ in atom_type])\n        Z_ij = np.repeat(atom_Z, len(atom_Z)).reshape(-1, len(atom_Z), order='F')\n        for i in range(len(atom_Z)):\n            Z_ij[i] = Z_ij[i] * atom_Z[i]\n        coulomb_matrix = np.multiply(Z_ij, inverse_matrix) + 1\/2 * (np.multiply((np.eye(len(atom_Z))), Z_ij) ** 2.4)\n        v_coulomb_matrix, _ = np.linalg.eig(coulomb_matrix)\n        v_coulomb_matrix_pad = np.zeros(29)\n        v_coulomb_matrix_pad[:v_coulomb_matrix.shape[0]] = v_coulomb_matrix\n        \n        v,_ = np.linalg.eig(matrix)\n        v_pad = np.zeros(29)\n        v_pad[:v.shape[0]] = v\n        eigen_value_distances_matrix_dict[name] = v_pad\n        eigen_values.append(v_pad)\n        eigen_values_coulomb_matrix.append(v_coulomb_matrix_pad)\n        eigen_value_coulomb_matrix_dict[name] = v_coulomb_matrix_pad\n        \n        pbar.update()","362da7d9":"eigen_value = pd.DataFrame(eigen_values, columns = eigen_columns, dtype=float)\neigen_value['molecule_name'] = structures_df['molecule_name'].unique()\neigen_value","37374263":"eigen_values_coulomb_matrix = pd.DataFrame(eigen_values_coulomb_matrix, columns = eigen_value_coulomb_matrix_columns, dtype=float)\neigen_values_coulomb_matrix['molecule_name'] = structures_df['molecule_name'].unique()\neigen_values_coulomb_matrix","28915888":"with open('eigen_value_coulomb_matrix.pkl', 'wb') as f:\n    pickle.dump(eigen_value_coulomb_matrix_dict, f)","66311fc1":"with open('eigen_value_distance_matrix.pkl', 'wb') as f:\n    pickle.dump(eigen_value_distances_matrix_dict, f)","4e89a7ac":"eigen_value.to_csv('eigen_values.csv')","448565ef":"eigen_values_coulomb_matrix.to_csv('eigen_values_coulomb_matrix.csv')","2609d8a5":"atom_weight = {'C' : 12, 'F' : 19, 'O': 16, 'H': 1, 'N': 14}","e3514d29":"molecule_weight_avg ={}","39c38817":"with tqdm(total=len(structures_df['molecule_name'].unique())) as pbar:\n    for name, df in structures_df.groupby('molecule_name'):\n        atom_type = df['atom']\n        n_atoms = len(atom_type)\n        atom_weights = np.array(list(map(lambda x: atom_weight[x], atom_type)))\n#         print(atom_weights)\n        molecule_weight_avg[name] = atom_weights.mean()\n#         print(molecule_weight_avg)\n        pbar.update()","ef734b97":"with open('molecule_avg_weight.pkl', 'wb') as f:\n    pickle.dump(molecule_weight_avg, f)","1db24fa2":"# with tqdm(total=len(structures_df['molecule_name']))","5de14bb7":"This code gen data for the old version data of chams scalar coupling"}}