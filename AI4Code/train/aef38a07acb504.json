{"cell_type":{"5b355658":"code","96324525":"code","38a3fdab":"code","25d124b8":"code","368bf8ce":"code","bae5c8c6":"code","9c84c7a8":"code","81c83eb7":"code","ca7dbbba":"code","64f06b06":"code","1bb0d57b":"code","3f5e2ae5":"code","eeb95e2d":"code","ff8e14f7":"code","48418e88":"code","3aef80a0":"code","654feeab":"code","839d244d":"code","332a1d4e":"code","ff8d0691":"code","ee7d9875":"code","584e9754":"code","84a2d7fa":"code","dd49a0aa":"code","900f0662":"code","2db4d854":"code","66574aba":"code","74fba889":"code","fb1fcd1f":"code","e3139986":"code","245c95f7":"code","5343f037":"code","e7ee4a66":"code","9387654b":"code","038a52a4":"code","d25013bb":"code","c32eb925":"code","33ddbbee":"code","5194b7e9":"code","a2904613":"code","52a25f01":"code","ebc30f08":"code","08cce0a4":"code","9e550170":"code","0b3f68ed":"code","153eb880":"code","e2d8d68d":"code","41d858b7":"code","19b7dc5a":"code","50edeab6":"code","3b891d92":"code","2a08b9f2":"code","83c1d917":"code","79e79e9f":"code","25f475ab":"code","ed3267a3":"code","449ef76a":"code","cfbcf39b":"code","01bda76c":"code","bae0635a":"code","b67044ab":"code","f61294c5":"code","2770ca0e":"code","205c2c6e":"code","cbb87777":"code","c959a9db":"code","fab8ebb3":"code","0b63da1c":"code","2c57e179":"code","618b21b7":"code","747be9ee":"code","ae7696c1":"code","cfaebf18":"code","81f992ce":"code","0ce4bf80":"code","f3053d1b":"code","5775f142":"code","2ea58ede":"code","c5496953":"code","ddcfc0c5":"code","e16ef79e":"code","6234d86b":"code","976afc63":"code","3507adbb":"code","bd608f24":"code","daa1d659":"code","545e72d4":"code","5a0da6bf":"code","cc3647e6":"code","91c6bcb2":"code","682fd85c":"code","6bd00257":"code","5b96a1ac":"code","99359d4a":"code","e7307aae":"markdown","3e4ac9e0":"markdown","2e0616f4":"markdown","36ab25d3":"markdown","8240ee24":"markdown","9ff4f192":"markdown","4459bdc6":"markdown","4d707e95":"markdown","0c00890d":"markdown","4585171d":"markdown","5f261401":"markdown","cc6bea8d":"markdown","0bf3b515":"markdown","74548998":"markdown","e6135235":"markdown","c52bb9b3":"markdown","8997d96e":"markdown","5c9f418e":"markdown","bb3c46b3":"markdown","e5147b6e":"markdown","d1239cf0":"markdown","3036ab21":"markdown","5a2ed232":"markdown","50c34b7f":"markdown","6a163e59":"markdown","1deac809":"markdown","8d1cfb6d":"markdown","c9faa958":"markdown","2f7733a6":"markdown","aca2c1f2":"markdown","b1fce8f3":"markdown","a9770d68":"markdown","b3518dae":"markdown","a97a42ae":"markdown","bf0378ab":"markdown","5bd4337a":"markdown","a8bd60c6":"markdown","9c910bec":"markdown","25043cc1":"markdown","8f655b1d":"markdown","2b1b3230":"markdown","8cf82c95":"markdown","23e2cc22":"markdown","d71550cc":"markdown","f35b0756":"markdown","bd0e8a52":"markdown"},"source":{"5b355658":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot\nimport seaborn as sns\n%matplotlib inline","96324525":"df = pd.read_csv('..\/input\/pubg-weapon-stats\/pubg-weapon-stats.csv')\ndf","38a3fdab":"\n# Exploratory Data Analysis\ndef libraries():\n    global pd,np\n    import pandas as pd\n    import numpy as np\ndef load():\n    global df\n    df=pd.read_csv('..\/input\/pubg-weapon-stats\/pubg-weapon-stats.csv')\n    \ndef top_rows(value):\n    print('\\033[1m'+ 'displaying the', value, 'rows from top'+'\\033[0m')\n    a=df.head(value)\n    print(a,'\\n')\n    \ndef bottom_rows(value):\n    print('\\033[1m'+'displaying the', value, 'rows from bottom'+'\\033[0m')\n    b=df.tail(value)\n    print(b,'\\n')\n    \ndef rows_columns():\n    print('\\033[1m'+'Shape of the Data set'+'\\033[0m')\n    c=df.shape\n    print(c,'\\n')\n    \ndef col_names():\n    print('\\033[1m'+'Column Names in the Data set'+'\\033[0m')\n    d=df.columns\n    print(d,'\\n')\n    \ndef information():\n    print('\\033[1m'+'Quick Overview of DataSet(info)'+'\\033[0m')\n    e = df.info()\n    print(e,'\\n')\n\ndef sizee():\n    print('\\033[1m'+'No.of Elements in the DataSet'+'\\033[0m')\n    f = df.size\n    print(f,'\\n')\n\ndef ndimension():\n    print('\\033[1m'+'Dimensions in your dataframe'+'\\033[0m')\n    g = df.ndim\n    print(g,'\\n')\n    \ndef stats_summary():\n    print('\\033[1m'+'Staistical Summary of DataSet'+'\\033[0m')\n    h = df.describe()\n    print(h,'\\n')\n    \ndef null_values():\n    print('\\033[1m'+'Number of Missing values in each column'+'\\033[0m')\n    i = df.isnull().sum()\n    print(i,'\\n')\n    \ndef n_unique():\n    print('\\033[1m'+'Number of unique elements'+'\\033[0m')\n    j = df.nunique()\n    print(j,'\\n')\n    \ndef memory_use():\n    print('\\033[1m'+'Memory used by all colomns in bytes'+'\\033[0m')\n    k = df.memory_usage()\n    print(k,'\\n')\n    \ndef is_na(value):\n    print('\\033[1m'+'Dataframe filled with boolean values with true indicating missing values'+'\\033[0m')\n    l = df.isna().head(value)\n    print(l,'\\n')\n    \ndef duplicate():\n    print('\\033[1m'+'Boolean Series denoting duplicate rows'+'\\033[0m')\n    m = df.duplicated().sum()\n    print(m,'\\n')\n    \ndef valuecounts():\n    print('\\033[1m'+'Series containing count of unique values'+'\\033[0m')\n    n = df.value_counts()\n    print(n,'\\n')\n\ndef datatypes():\n    print('\\033[1m'+'Datatype of each column'+'\\033[0m')\n    o = df.dtypes\n    print(o,'\\n')\n    \ndef correlation():\n    print('\\033[1m'+'Correalation between all columns in DataFrame'+'\\033[0m')\n    p = df.corr()\n    print(p,'\\n')\n    \ndef nonnull_count():\n    print('\\033[1m'+'Count of non-null values'+'\\033[0m')\n    q = df.count()\n    print(q,'\\n')\n    \ndef eda():\n    load()\n    value= 5 \n    datatypes()\n    top_rows(value)\n    bottom_rows(value)\n    rows_columns()\n    col_names()\n    information()\n    sizee()\n    ndimension()\n    stats_summary()\n    null_values()\n    n_unique()\n    memory_use()\n    is_na(value)\n    nonnull_count()\n    duplicate()\n    valuecounts()\n    correlation()\n    \n    \n    \n        \ndef stats_u(data,col):\n    if data[col].dtype == \"float64\":\n        print(col,\"has Quantitative data\")\n        mean_value=data[col].mean()\n        print('mean of',col,'column',mean_value)\n        max_value = data[col].max()\n        print('Maximum value of',col,'column',max_value)\n        min_value = data[col].min()\n        print('Minimum value of',col,'column',min_value)\n        median_value = data[col].median(skipna = True)\n        print('median of',col,'column',median_value)\n        std_value = data[col].std()\n        print('standard deviation of',col,'column',std_value)\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        print('quartile 1 of',col,'column is',q1)\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        print('quartile 2 of',col,'column is',q2)\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        print('quartile 3 of',col,'column is',q3)\n        q4 = data[col].quantile(1,interpolation='nearest')\n        print('quartile 4 of',col,'column is',q4)\n        IQR = q3 -q1\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        print('Lower Limit Point:',LLP)\n        print('Upper Limit Point:',ULP)\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers\")\n        else:\n            print(\"There are outliers\")\n            print(data[data[col]<LLP][col])\n            print(data[data[col]>ULP][col])\n            \n    elif data[col].dtype == \"int64\":\n        print(col,\"has Quantitative data\")\n        mean_value=data[col].mean()\n        print('mean of',col,'column',mean_value)\n        median_value = data[col].median(skipna = True)\n        print('median of',col,'column',median_value)\n        std_value = data[col].std()\n        print('standard deviation of',col,'column',std_value)\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        print('quartile 1 of',col,'column is',q1)\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        print('quartile 2 of',col,'column is',q2)\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        print('quartile 3 of',col,'column is',q3)\n        q4 = data[col].quantile(1,interpolation='nearest')\n        print('quartile 4 of',col,'column is',q4)\n        IQR = q3 -q1\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        print('Lower Limit Point:',LLP)\n        print('Upper Limit Point:',ULP)\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers\")\n        else:\n            print(\"There are outliers\")\n            print(\"Outliers are:\")\n            print(data[data[col]<LLP][col])\n            print(data[data[col]>ULP][col])\n    else:\n        print(col,'has Qualitative Data')\n        z = df[col].mode()\n        print('mode of',col,'column:\\n',z)\n        print('Count of mode is:\\n',df[col].value_counts())\n        print('Unique strings in',col,'are',data[col].nunique())\n        if(data[col].nunique() == 1):\n            print(col,'has same string')\n        elif(data[col].nunique() == 2):\n            print(col,'has binary strings')\n        else:\n            print(col,'has multi stings')\n\n\nlibraries()\neda()\n\nprint(\"----------------------------------------------------------------------------------------------------------------------\")\nprint('\\033[1m'+'Summary Of DataSet'+'\\033[0m')\nprint('\\033[1m'+'DataTypes in the DataSet:\\n'+'\\033[0m',df.dtypes)\nprint('\\033[1m'+'Columns in DataSet:'+'\\033[0m',df.columns)\nprint('\\033[1m'+'Shape of DataSet:'+'\\033[0m',df.shape)\nprint('\\033[1m'+'Size of DataSet:'+'\\033[0m',df.size)\nprint('\\033[1m'+'Dimension of DataSet:'+'\\033[0m',df.ndim)\nprint('\\033[1m'+'Total Memory used in DataSet:'+'\\033[0m',df.memory_usage().sum())\nprint('\\033[1m'+'Total Number of missing values in DataSet:'+'\\033[0m',df.isnull().sum().sum())\nprint('\\033[1m'+'Total Number of Unique values in DataSet:'+'\\033[0m',df.nunique().sum())\nprint('\\033[1m'+'Total Number of non null values in DataSet:'+'\\033[0m',df.count().sum())\nprint('\\033[1m'+'Total Number of duplicate rows in DataSet:'+'\\033[0m',df.duplicated().sum())\nprint(\"----------------------------------------------------------------------------------------------------------------------\")\nprint('\\033[1m'+'Summary Of Each Colomn'+'\\033[0m')\nprint(\"\\n\")\ncols=df.columns\ncols\nfor i in cols:\n    print('\\033[1m'+i+'\\033[0m')\n    stats_u(df,i)\n    print(\"\\n\")","25d124b8":"df.head()","368bf8ce":"df.tail()","bae5c8c6":"df.dtypes","9c84c7a8":"df.columns","81c83eb7":"df.shape","ca7dbbba":"df.size","64f06b06":"df.info()","1bb0d57b":"df.describe()","3f5e2ae5":"df.isnull().sum()","eeb95e2d":"df.duplicated().sum()","ff8e14f7":"df.skew()","48418e88":"df.corr()","3aef80a0":"! pip install Autoviz","654feeab":"! pip install xlrd","839d244d":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\ndf_av = AV.AutoViz(\"..\/input\/pubg-weapon-stats\/pubg-weapon-stats.csv\")","332a1d4e":"df.dropna(inplace = True)","ff8d0691":"df","ee7d9875":"df.isnull().sum()","584e9754":"df['Weapon Name'].value_counts() # all are unique values","84a2d7fa":"df['Weapon Type'].value_counts()","dd49a0aa":"sns.set(rc={'figure.figsize':(12,12)})\nsns.countplot(x = 'Weapon Type',data = df)\nplt.show()","900f0662":"df['Fire Mode'].value_counts()","2db4d854":"sns.countplot(x = 'Fire Mode',data = df)\nplt.show()","66574aba":"sns.set(rc={'figure.figsize':(6,6)})\ndata=df.copy()\ndata.groupby('Weapon Type')['Damage'].mean().plot.bar()\nplt.xlabel('Weapon Type')\nplt.ylabel('Damage')\nplt.title('Weapon Type')\nplt.show()","74fba889":"data=df.copy()\ndata.groupby('Weapon Type')['Magazine Capacity'].mean().plot.bar()\nplt.xlabel('Weapon Type')\nplt.ylabel('Magazine Capacity')\nplt.title('Weapon Type')\nplt.show()","fb1fcd1f":"data=df.copy()\ndata.groupby('Weapon Type')['Range'].mean().plot.bar()\nplt.xlabel('Weapon Type')\nplt.ylabel('Range')\nplt.title('Weapon Type')\nplt.show()","e3139986":"data=df.copy()\ndata.groupby('Weapon Type')['Bullet Speed'].mean().plot.bar()\nplt.xlabel('Weapon Type')\nplt.ylabel('Bullet Speed')\nplt.title('Weapon Type')\nplt.show()","245c95f7":"data=df.copy()\ndata.groupby('Weapon Type')['Rate of Fire'].mean().plot.bar()\nplt.xlabel('Weapon Type')\nplt.ylabel('Rate of Fire')\nplt.title('Weapon Type')\nplt.show()","5343f037":"data=df.copy()\ndata.groupby('Weapon Type')['Shots to Kill (Chest)'].mean().plot.bar()\nplt.xlabel('Weapon Type')\nplt.ylabel('Shots to Kill (Chest)')\nplt.title('Weapon Type')\nplt.show()","e7ee4a66":"data=df.copy()\ndata.groupby('Weapon Type')['Shots to Kill (Head)'].mean().plot.bar()\nplt.xlabel('Weapon Type')\nplt.ylabel('Shots to Kill (Head)')\nplt.title('Weapon Type')\nplt.show()","9387654b":"data=df.copy()\ndata.groupby('Weapon Type')['Damage Per Second'].mean().plot.bar()\nplt.xlabel('Weapon Type')\nplt.ylabel('Damage Per Second')\nplt.title('Weapon Type')\nplt.show()","038a52a4":"data=df.copy()\ndata.groupby('Weapon Type')['BDMG_0'].mean().plot.bar()\nplt.xlabel('Weapon Type')\nplt.ylabel('BDMG_0')\nplt.title('Weapon Type')\nplt.show()","d25013bb":"data=df.copy()\ndata.groupby('Weapon Type')['BDMG_1'].mean().plot.bar()\nplt.xlabel('Weapon Type')\nplt.ylabel('BDMG_1')\nplt.title('Weapon Type')\nplt.show()","c32eb925":"data=df.copy()\ndata.groupby('Weapon Type')['BDMG_2'].mean().plot.bar()\nplt.xlabel('Weapon Type')\nplt.ylabel('BDMG_2')\nplt.title('Weapon Type')\nplt.show()","33ddbbee":"data=df.copy()\ndata.groupby('Weapon Type')['BDMG_3'].mean().plot.bar()\nplt.xlabel('Weapon Type')\nplt.ylabel('BDMG_3')\nplt.title('Weapon Type')\nplt.show()","5194b7e9":"data=df.copy()\ndata.groupby('Weapon Type')['HDMG_0'].mean().plot.bar()\nplt.xlabel('Weapon Type')\nplt.ylabel('HDMG_0')\nplt.title('Weapon Type')\nplt.show()","a2904613":"data=df.copy()\ndata.groupby('Weapon Type')['HDMG_1'].mean().plot.bar()\nplt.xlabel('Weapon Type')\nplt.ylabel('HDMG_1')\nplt.title('Weapon Type')\nplt.show()","52a25f01":"data=df.copy()\ndata.groupby('Weapon Type')['HDMG_2'].mean().plot.bar()\nplt.xlabel('Weapon Type')\nplt.ylabel('HDMG_2')\nplt.title('Weapon Type')\nplt.show()","ebc30f08":"data=df.copy()\ndata.groupby('Weapon Type')['HDMG_3'].mean().plot.bar()\nplt.xlabel('Weapon Type')\nplt.ylabel('HDMG_3')\nplt.title('Weapon Type')\nplt.show()","08cce0a4":"num = ['Bullet Type', 'Damage',\n       'Magazine Capacity', 'Range', 'Bullet Speed', 'Rate of Fire',\n       'Shots to Kill (Chest)', 'Shots to Kill (Head)', 'Damage Per Second',\n        'BDMG_0', 'BDMG_1', 'BDMG_2', 'BDMG_3', 'HDMG_0', 'HDMG_1',\n       'HDMG_2', 'HDMG_3']","9e550170":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != 'Bullet Type':\n        sns.scatterplot(x= 'Bullet Type',y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","0b3f68ed":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != num[1]:\n        sns.scatterplot(x= num[1],y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","153eb880":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != num[2]:\n        sns.scatterplot(x= num[2],y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","e2d8d68d":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != num[3]:\n        sns.scatterplot(x= num[3],y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","41d858b7":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != num[4]:\n        sns.scatterplot(x= num[4],y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","19b7dc5a":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != num[5]:\n        sns.scatterplot(x= num[5],y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","50edeab6":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != num[6]:\n        sns.scatterplot(x= num[6],y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","3b891d92":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != num[7]:\n        sns.scatterplot(x= num[7],y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","2a08b9f2":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != num[8]:\n        sns.scatterplot(x= num[8],y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","83c1d917":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != num[9]:\n        sns.scatterplot(x= num[9],y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","79e79e9f":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != num[10]:\n        sns.scatterplot(x= num[10],y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","25f475ab":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != num[11]:\n        sns.scatterplot(x= num[11],y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","ed3267a3":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != num[12]:\n        sns.scatterplot(x= num[12],y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","449ef76a":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != num[13]:\n        sns.scatterplot(x= num[13],y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","cfbcf39b":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != num[14]:\n        sns.scatterplot(x= num[14],y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","01bda76c":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != num[15]:\n        sns.scatterplot(x= num[15],y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","bae0635a":"sns.set(rc={'figure.figsize':(10,8)})\nfor j in range(len(num)):\n    if num[j] != num[16]:\n        sns.scatterplot(x= num[16],y=num[j],hue='Weapon Type',data=df)\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","b67044ab":"from IPython.core.display import HTML\n\ndef multi_table(table_list):\n    ''' Acceps a list of IpyTable objects and returns a table which contains each IpyTable in a cell\n    '''\n    return HTML(\n        '<table><tr style=\"background-color:white;\">' + \n        ''.join(['<td>' + table._repr_html_() + '<\/td>' for table in table_list]) +\n        '<\/tr><\/table>')","f61294c5":"df_groupby = {var: pd.DataFrame(df.groupby([var, 'Bullet Type']).size()) \n              for var in {'Weapon Type','Fire Mode'}}\nmulti_table([df_groupby['Weapon Type'], df_groupby['Fire Mode']])","2770ca0e":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in{'Weapon Type','Fire Mode'}}\nmulti_table([df_nunique['Weapon Type'], df_nunique['Fire Mode']])","205c2c6e":"df.dtypes","cbb87777":"df1 = df.groupby('Weapon Type').agg({ 'Bullet Type' : 'max', 'Damage' : 'mean',\n       'Magazine Capacity' : 'mean', 'Range' : 'mean', 'Bullet Speed' : 'mean', 'Rate of Fire' : 'mean',\n       'Shots to Kill (Chest)' : 'mean', 'Shots to Kill (Head)' : 'mean', 'Damage Per Second' : 'mean',\n        'BDMG_0' : 'mean', 'BDMG_1' : 'mean', 'BDMG_2' : 'mean', 'BDMG_3' : 'mean', 'HDMG_0' : 'mean', 'HDMG_1' : 'mean',\n       'HDMG_2' : 'mean', 'HDMG_3' : 'mean'})\ndf1","c959a9db":"px.bar(data_frame=df1.drop(['Range','Bullet Speed','Damage Per Second'],axis = 1), barmode='group',\n       title = \"<b>Weapon Type wise Analyzing<\/b>\",template=\"plotly_dark\")","fab8ebb3":"px.bar(data_frame=df1[['Range','Bullet Speed','Damage Per Second']], barmode='group',\n       title = \"<b>Weapon Type wise Analyzing<\/b>\",template=\"plotly_dark\")","0b63da1c":"df2 = df.groupby('Fire Mode').agg({  'Damage' : 'mean',\n       'Magazine Capacity' : 'mean', 'Range' : 'mean', 'Bullet Speed' : 'mean', 'Rate of Fire' : 'mean',\n       'Shots to Kill (Chest)' : 'mean', 'Shots to Kill (Head)' : 'mean', 'Damage Per Second' : 'mean',\n        'BDMG_0' : 'mean', 'BDMG_1' : 'mean', 'BDMG_2' : 'mean', 'BDMG_3' : 'mean', 'HDMG_0' : 'mean', 'HDMG_1' : 'mean',\n       'HDMG_2' : 'mean', 'HDMG_3' : 'mean'})\ndf2# max value in respective type in each column","2c57e179":"px.bar(data_frame=df2.drop(['Range','Bullet Speed','Damage Per Second'],axis = 1), barmode='group',\n       title = \"<b>Weapon Type wise Analyzing<\/b>\",template=\"plotly_dark\")","618b21b7":"px.bar(data_frame=df2[['Range','Bullet Speed','Damage Per Second']], barmode='group',\n       title = \"<b>Weapon Type wise Analyzing<\/b>\",template=\"plotly_dark\")","747be9ee":"df_assault = df[df['Weapon Type'] == 'Assault Rifle']\ndf_assault\n## Data frame with assault rifle as weapon type","ae7696c1":"df_assault.describe()","cfaebf18":"df[df['Weapon Type'] == 'Light Machine Gun']","81f992ce":"df[df['Weapon Type'] == 'Submachine Gun']","0ce4bf80":"df[df['Weapon Type'] == 'Designed Marksman Rifle']","f3053d1b":"df[df['Weapon Type'] == 'Shotgun']","5775f142":"df[df['Weapon Type'] == 'Pistol']","2ea58ede":"df[df['Weapon Type'] == 'Sniper Rifle']","c5496953":"df[df['Fire Mode'] == 'Automatic']\n# no assualt rifles in automatic ","ddcfc0c5":"df[df['Fire Mode'] =='Single, Automatic, Burst']","e16ef79e":"df[df['Fire Mode'] == 'Single, Automatic']","6234d86b":"df[df['Fire Mode'] == 'Single, Burst']","976afc63":"df[df['Fire Mode'] == 'Single']","3507adbb":"max_assault = df[df['Weapon Type'] == 'Assault Rifle']['Damage'].max()\nmax_assault\n## max value of damage in assualt rifles is 49","bd608f24":"df_assault[df[df['Weapon Type'] == 'Assault Rifle']['Damage'] == max_assault]\n## three guns has max damage of 49 in assualt rifles","daa1d659":"df_LightMachineGun = df[df['Weapon Type'] == 'Light Machine Gun']\nmax_LightMachineGun = df_LightMachineGun['Damage'].max()\nmax_LightMachineGun\n## max value of damage in light machine gun is 51","545e72d4":"df_LightMachineGun[df[df['Weapon Type'] == 'Light Machine Gun']['Damage'] == max_LightMachineGun]\n## dp-28 has highest damage","5a0da6bf":"plt.figure(figsize=(16,9))\nax = sns.heatmap(df.corr(),annot = True,cmap = 'viridis')\nplt.show()","cc3647e6":"''' Plot a Shifted Correlation Matrix '''\n# Diagonal correlation is always unity & less relevant, shifted variant shows only relevant cases\ndef corrMat(df,id=False):\n    \n    corr_mat = df.corr().round(2)\n    f, ax = plt.subplots(figsize=(12,7))\n    mask = np.triu(np.ones_like(corr_mat, dtype=bool))\n    mask = mask[1:,:-1]\n    corr = corr_mat.iloc[1:,:-1].copy()\n    sns.heatmap(corr,mask=mask,vmin=-0.3,vmax=0.3,center=0, \n                cmap='RdPu_r',square=False,lw=2,annot=True,cbar=False)\n#     bottom, top = ax.get_ylim() \n#     ax.set_ylim(bottom + 0.5, top - 0.5) \n    ax.set_title('Shifted Linear Correlation Matrix')\n    \ncorrMat(df.drop(['Weapon Type','Weapon Name','Fire Mode'],axis = 1))","91c6bcb2":"train_no_NA = df.dropna()\ntrain_no_NA.drop(['Weapon Name'],axis = 1)\ntrain_cat_visual_0 = train_no_NA[['Weapon Type','Fire Mode']].columns.tolist()","682fd85c":"sns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#f0eee9', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#e8e6e1'}, font_scale = 0.35)\n\nfig, ax = plt.subplots(3, 2, figsize = (6.5, 7.5))\n\nfor indx, (column, axes) in list(enumerate(list(zip(train_cat_visual_0, ax.flatten())))):\n    \n    sns.violinplot(ax = axes, x = train_no_NA[column], \n                   y = train_no_NA['Damage'],\n                   scale = 'width', linewidth = 0.5, \n                   palette = 'crest', inner = None)\n    \n    plt.setp(axes.collections, alpha = 0.3)\n    \n    sns.stripplot(ax = axes, x = train_no_NA[column], \n                  y = train_no_NA['Damage'],\n                  palette = 'crest', alpha = 0.9, \n                  s = 1.5, jitter = 0.07)\n    sns.pointplot(ax = axes, x = train_no_NA[column],\n                  y = train_no_NA['Damage'],\n                  color = '#ff5736', scale = 0.25,\n                  estimator = np.mean, ci = 'sd',\n                  errwidth = 0.5, capsize = 0.15, join = True)\n    \n    plt.setp(axes.lines, zorder = 100)\n    plt.setp(axes.collections, zorder = 100)\n    \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]\n    \nplt.tight_layout()\nplt.show()","6bd00257":"sns.set_theme(rc = {'figure.dpi': 100, 'axes.labelsize': 10, \n                    'axes.facecolor': '#f0eee9', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#e8e6e1'}, font_scale = 0.5)\n\nfig, ax = plt.subplots(1, 1, figsize = (6, 4))\n\nsns.barplot(data = df, x = 'Fire Mode', y = 'Damage', hue = 'Weapon Type', \n            palette = 'crest', alpha = 0.8);\n\nplt.show()","5b96a1ac":"sns.set_theme(rc = {'figure.dpi': 100, 'axes.labelsize': 10, \n                    'axes.facecolor': '#f0eee9', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#e8e6e1'}, font_scale = 0.5)\n\nfig, ax = plt.subplots(1, 1, figsize = (6, 4))\n\nsns.barplot(data = df, x = 'Fire Mode', y = 'Range', hue = 'Weapon Type', \n            palette = 'crest', alpha = 0.8);\n\nplt.show()","99359d4a":"sns.set_theme(rc = {'figure.dpi': 100, 'axes.labelsize': 10, \n                    'axes.facecolor': '#f0eee9', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#e8e6e1'}, font_scale = 0.5)\n\nfig, ax = plt.subplots(1, 1, figsize = (6, 4))\n\nsns.barplot(data = df, x = 'Fire Mode', y = 'Bullet Speed', hue = 'Weapon Type', \n            palette = 'crest', alpha = 0.8);\n\nplt.show()","e7307aae":"# Query 3 find all submachine guns","3e4ac9e0":"## Assault Rifle","2e0616f4":"# Query 1 Find all assualt rifles","36ab25d3":"## For multi tables getting unique values of each category","8240ee24":"# Exploratory Data Analysis","9ff4f192":"#### When enemy with level 3 vest average damage done by shoutgun is more(in close range) and less for submachine gun","4459bdc6":"#### When enemy with level 2 vest average damage done by shoutgun is more(in close range) and less for submachine gun","4d707e95":"## grouped tables for categorical variables","0c00890d":"# Exploratory data analysis using user defined function","4585171d":"# Query 2 find all Light machine guns","5f261401":"# Query 9 find the guns with highest damage in Assualt and light Machine guns","cc6bea8d":"#### we can observe that if bullet speed is high then damage given is low\n#### if damage is high then damage given with or without helmet or vest to body or head is also high\n#### We can see range of shotgun is very less that is the reason it gives more damage if enemy is very close(they have bullet drop cant use in long range) and damage per second is also high, bullet speed is low \n#### The usage of snipers is different we can see they have long range(because they are meant to use to long distances for accuracy) and gives heavy damage if hits on head,bullet speed is also high and damage per second is less since it is not automatic\n#### Pistols are used  only in close range it \n#### we can use assualt rifles from near-medium range and its damage per second is decent and damage given is also good with respect to other guns,bullet speed is also very high(not considering shotgun since it is different from others)\n#### In assault rifles we have 3 types automatic,single and burst and they are of bullet type 7.62 and .45 ammo and 9.00\n#### We can use burst in close range if we have better accuracy,burst means they fire 3 bullets at a time and deals good damage, but generally we swith burst to single and use for mid-long range and its bullet speed is god,damage per second is also high\n#### It takes less bullets to kills when hit to head rather than chest, if bullet hit to chest then damage dealth is also high\n#### Designed Marksmen Rifles fire mode is single but wrongly given as automatic in dataset and they have good bullet speed, damage given is also pretty high\n#### Machine guns and light machine guns have high magzine capacity and high bullet speed\n#### Sub machine gun range is less and it is poor in all attributes\n## These are my observations","0bf3b515":"# Query 4 find all Designed Marksman Rifle","74548998":"# Query 5 find all shotguns","e6135235":"#### If you are firing on head then average number bullets of bullets which takes enemy down is greather for sub machine gun and less for shotgun(but in close range)","c52bb9b3":"#### Average bullet speed is more for sniper rifle and light machine gun and less for submachine gun","8997d96e":"# Importing Libraries","5c9f418e":"## Now I will plot scatter plots between numerical columns with weapon Type as hue","bb3c46b3":"#### Average range of bullet travel is more for sniper rifle and less for shotgun and pistol","e5147b6e":"#### When enemy with no vest average damage done by shoutgun is more(in close range) and less for pistol","d1239cf0":"#### There are more guns which are automatic and less number whih are single,burst","3036ab21":"#### In automatic every bullet type occurs and every weapon type except assault rifle\n#### single fire mode is nothing but sniper rifle\n#### single,automatic fire mode contains assault rifles and sub machine guns\n#### single,automatic,burst contains submachine, assault rifle\n#### single,burst contains only light machine guns","5a2ed232":"#### In shotgun only one bullet type 12\n#### 9.00 doesnot belong to sniper,assualt,light machine gun\n#### 0.45 doesnot belong to assault , desinged marksman rifle,light machine gun\n#### only one sniper rifle of bullet type 0.45\n#### 7.62 doesnot belong to submachine gun\n#### 5.56 doesnot belong to pistol,sniper rifle,submachine gun\n#### 0.3 belong to sniper rifle and has only one gun","50c34b7f":"#### From above graph we can say that shotguns has more avereage damage and pistol has less average damage","6a163e59":"# Basic data cleaning","1deac809":"# Loading DataSet","8d1cfb6d":"#### When enemy with level 2 helmet average damage done by shoutgun is more(in close range) and less for submachine gun","c9faa958":"#### There are more number of Assault Rifle and less number of light machine gun","2f7733a6":"# Advanced Data Visualisation","aca2c1f2":"# Query 6 find all pistols","b1fce8f3":"# Query 8 find all fire mode types","a9770d68":"#### Average magzine capacity of light machine gun is more and average magazine capacity of shotgun is less","b3518dae":"#### When enemy with level 3 helmet average damage done by shoutgun is more(in close range) and less for submachine gun","a97a42ae":"#### When enemy with no helmet average damage done by shoutgun is more(in close range) and less for submachine gun","bf0378ab":"#### Rate of fire is more for sniper rifle and less for Designed Marksman Rifle","5bd4337a":"#### When enemy with level 1 vest average damage done by shoutgun is more(in close range) and less for pistol","a8bd60c6":"#### only 5.56 and 7.62 belong to assault rifles\n#### magazine capacity is fixed 30\n#### range is medium-long,rate of fire is good,bullet speed is high, average damage is around 45+\n#### shots to kill chest = 4, shots to kill head = 2\n#### fire mode is single,automatic,burst and single,burst and single automatic","9c910bec":"# Query 7 find all sniper rifles","25043cc1":"#### Average Damage per second is more for shotgun and less for sniper rifle","8f655b1d":"# Exploratory Data Analysis Using Autoviz","2b1b3230":"## Upvote If u like","8cf82c95":"# Advanced Data Visualisation","23e2cc22":"## Light Machine gun","d71550cc":"#### When enemy with level 1 helmet average damage done by shoutgun is more(in close range) and less for submachine gun","f35b0756":"#### If you are firing on chest then average number bullets of bullets which takes enemy down is greather for pistol and less for shotgun(but in close range)","bd0e8a52":"#### when level of helmet or vest is increasing damage dealth is decreasing"}}