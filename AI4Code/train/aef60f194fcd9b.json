{"cell_type":{"45fa99cd":"code","d3bf82ff":"code","a697dadc":"code","861ff05e":"code","6c80f175":"code","1407bdff":"code","b9ad91ca":"code","7fe9027e":"code","34081262":"code","60da763f":"code","391a6806":"code","ca8a3ba6":"code","3e071d7b":"code","1aceba53":"code","f680dd2d":"code","999a8ef8":"code","d8ec96c3":"code","f51d7481":"code","7b3afc82":"code","93a2630a":"code","3706e9b5":"code","9655ea9b":"code","89b4e0ab":"code","4a340d0e":"code","ec38de75":"code","0963ff19":"code","37371098":"code","cd107a5c":"code","36de2d3c":"code","970bec79":"code","365caba5":"code","b07e5497":"code","8e7c1024":"markdown","828c0401":"markdown","c17fa12b":"markdown","6ac085fb":"markdown"},"source":{"45fa99cd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport shap\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import SGDClassifier, LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay, roc_auc_score, classification_report","d3bf82ff":"pd.options.display.max_columns = None","a697dadc":"sns.set(font_scale=1.4)\nsns.set_style({'font.family': 'serif',\n               'fontname': 'Times New Roman'})","861ff05e":"titanic_df = sns.load_dataset('titanic')\ntitanic_df.head()","6c80f175":"titanic_df.dropna(subset=['pclass', 'sex', 'age', 'fare'], inplace=True)\ntitanic_df.shape","1407bdff":"titanic_df.drop(columns=['who', 'deck', 'embark_town'], inplace=True)","b9ad91ca":"titanic_df['sex'] = pd.Categorical(titanic_df['sex'])\ntitanic_df['sex'] = titanic_df['sex'].cat.codes\n\ntitanic_df['embarked'] = pd.Categorical(titanic_df['embarked'])\ntitanic_df['embarked'] = titanic_df['embarked'].cat.codes\n\ntitanic_df['class'] = pd.Categorical(titanic_df['class'])\ntitanic_df['class'] = titanic_df['class'].cat.codes\n\ntitanic_df['adult_male'] = pd.Categorical(titanic_df['adult_male'])\ntitanic_df['adult_male'] = titanic_df['adult_male'].cat.codes\n\ntitanic_df['alive'] = pd.Categorical(titanic_df['alive'])\ntitanic_df['alive'] = titanic_df['alive'].cat.codes\n\ntitanic_df['alone'] = pd.Categorical(titanic_df['alone'])\ntitanic_df['alone'] = titanic_df['alone'].cat.codes","7fe9027e":"titanic_df.head()","34081262":"X = titanic_df.loc[:,'pclass':'alone'].to_numpy()\ny = titanic_df['survived'].to_numpy()","60da763f":"X","391a6806":"y","ca8a3ba6":"reglog_model = SGDClassifier(loss='log', \n                             learning_rate='constant', \n                             max_iter=10,\n                             eta0=0.01, \n                             verbose=1, \n                             tol=None, \n                             random_state=0)","3e071d7b":"X_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.25, \n                                                    random_state=0)","1aceba53":"print('Amostras de treino:')\nprint(f' * X_train: {X_train.shape}')\nprint(f' * y_train: {y_train.shape}')\n\nprint('Amostras de teste:')\nprint(f' * X_test: {X_test.shape}')\nprint(f' * y_test: {y_test.shape}')","f680dd2d":"reglog_model.fit(X_train, y_train)","999a8ef8":"for f, c in zip(titanic_df.columns[1:], reglog_model.coef_[0].tolist()):\n    print(f'{f} = {c}')\n\nprint(f'CONST = {float(reglog_model.intercept_)}')","d8ec96c3":"print(f'Acur\u00e1cia (Treino): {round(accuracy_score(y_train, reglog_model.predict(X_train)), 2)}')","f51d7481":"print(f'Acur\u00e1cia (Teste): {round(roc_auc_score(y_test, reglog_model.predict(X_test)), 4)}')","7b3afc82":"print(f'Acur\u00e1cia (Teste): {round(roc_auc_score(y_test, reglog_model.predict_proba(X_test)[:, 1]), 4)}')","93a2630a":"print(classification_report(y_test, reglog_model.predict(X_test)))","3706e9b5":"explainer = shap.Explainer(reglog_model.predict, X_test)\nshap_values = explainer(X_train)","9655ea9b":"plt.figure(figsize = (15,8))\nax = shap.summary_plot(shap_values, \n                       titanic_df.columns,\n                       plot_type='bar')\nplt.show()","89b4e0ab":"iris_data = load_iris()","4a340d0e":"print(iris_data.DESCR)","ec38de75":"iris_df = pd.DataFrame(iris_data['data'], \n                       columns=iris_data['feature_names'])","0963ff19":"iris_df.head()","37371098":"iris_df['TYPE'] =  iris_data['target']\niris_df.head()","cd107a5c":"iris_df['SPC'] = iris_df['TYPE'].map({0: 'Iris-Setosa', \n                                      1: 'Iris-Versicolour',\n                                      2: 'Iris-Virginica'})\niris_df.head()","36de2d3c":"sns.pairplot(iris_df.drop(['TYPE'], axis=1), hue='SPC', height=3)","970bec79":"X = iris_df.loc[:,'sepal length (cm)':'petal width (cm)'].to_numpy()\ny = iris_df['TYPE'].to_numpy()","365caba5":"X_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.25, \n                                                    random_state=0)","b07e5497":"print('Amostras de treino:')\nprint(f' * X_train: {X_train.shape}')\nprint(f' * y_train: {y_train.shape}')\n\nprint('Amostras de teste:')\nprint(f' * X_test: {X_test.shape}')\nprint(f' * y_test: {y_test.shape}')","8e7c1024":"### 1.1) Atividade pr\u00e1tica:\n\n* Melhore a acur\u00e1cia de treino e teste do modelo por meio dos par\u00e2metros `max_iter` e `eta0`.\n    * Quais foram seus melhores resultados?\n    * Quais foram as features de maior import\u00e2ncia para o modelo?","828c0401":"# Regress\u00e3o Log\u00edstica\n\n* T\u00f3picos abordados:\n    * Problemas de classifica\u00e7\u00e3o em aprendizagem de m\u00e1quina;\n    * Regress\u00e3o log\u00edstica;\n    * Acur\u00e1cia.","c17fa12b":"## 1. Classifica\u00e7\u00e3o bin\u00e1ria","6ac085fb":"## 2. Desafio: classifica\u00e7\u00e3o multiclasse"}}