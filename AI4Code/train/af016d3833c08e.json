{"cell_type":{"e4366d43":"code","dd3f8765":"code","1bc67d0d":"code","8443b116":"code","669a289f":"code","a82c091c":"code","76d12a60":"code","4cc57d82":"code","e09822bc":"code","5b48ef63":"code","b0465179":"code","6323ac65":"code","e7e1adad":"code","c1f3e822":"code","d2fc913c":"code","45701be6":"code","b32a28cf":"code","bd61b425":"code","dd255286":"code","6a72d16c":"code","b166fdcf":"code","059a8237":"code","1e6207b2":"code","4088b72a":"code","f33095df":"code","54b18b4d":"code","99ec2efa":"code","f7438b6f":"code","0788e1d0":"code","901c88ce":"code","e84ebc8d":"code","c99f44d2":"code","1874702c":"code","00caf71a":"code","966afa32":"code","50163207":"code","f1cb0be2":"code","7869501e":"code","a63766ae":"code","8cd358f2":"code","f59743a0":"code","ec984c35":"code","27ec3f09":"code","b5816601":"code","dbc23569":"code","5f8c590c":"code","a00425fa":"code","06f1bfc9":"code","265c0f9a":"code","de04687a":"code","3e967d00":"code","a2922267":"code","83d07a07":"code","f3369aaa":"code","7764730c":"code","be0fcec1":"code","fbc5ca15":"code","2ab8d536":"code","7814d579":"code","0bda18ff":"code","4269fe69":"code","d0ce3087":"code","2b5514fd":"code","ec4c3b98":"code","bee0c5f5":"code","7ca1f815":"code","e5901e5d":"code","50e0c116":"code","c8eca4f3":"code","5d7b4620":"code","4b0e8eab":"code","355efc9d":"code","ffb584e4":"code","c6e3a627":"code","41acaff5":"code","dbdff0e9":"code","faba6e7f":"code","5c97a769":"code","2841c88a":"code","c6f6487f":"code","238d36fd":"code","7205fbe0":"code","cf746fa8":"code","a79dd896":"code","2e2c30cd":"code","5d5ce93a":"code","3fba9f97":"code","097cb7e9":"code","82c868dd":"code","846a5c1d":"code","5af9ccee":"code","28681aab":"code","96adf0e0":"code","f83ac963":"code","f886f9d9":"code","7088fab0":"code","4049a889":"code","aaeca18c":"code","402bde24":"code","f6a1ffba":"code","ce24267b":"code","2c29deb6":"code","01a6b9dc":"code","d99bfef3":"code","70c4ce58":"code","8495cd48":"code","d771f0cb":"code","f0a1b746":"code","43d6d64c":"code","c4b68b58":"code","489ecfb1":"code","1a5b42c3":"code","dd014910":"code","d60cd35c":"code","375fd4fe":"code","e5d38f1a":"code","cd8d307b":"code","91aab055":"code","9da8bfc8":"code","48960c9d":"code","ad79e094":"code","cd4cbfec":"code","58dec327":"code","54ef5bb4":"code","1f332aca":"code","28e643b3":"code","a3cd0fdc":"code","0d5f9c4b":"code","165f16d3":"code","ff442216":"code","cd3f1ef8":"code","1599a343":"code","57ceefbe":"code","d71aa347":"code","c6f22b6a":"code","00581ec7":"code","09955713":"code","989780b7":"code","04e22b45":"code","a02549c2":"code","eb9487a1":"code","178f4e62":"code","d5333970":"code","47015b09":"code","68586c82":"code","4f6fee8e":"code","0e5e1536":"code","b266d97c":"code","151c3473":"code","862e3dda":"code","3c508527":"code","4b692d33":"code","e2920f09":"code","27c9d50e":"code","4fbe77e6":"code","c114d1ef":"code","aeb1479b":"code","5d9f97d2":"code","ed2245b1":"code","6494bbef":"code","2495805a":"code","5a55b54b":"code","3ccb1abf":"code","d18d1a05":"code","45d25408":"code","6906041c":"code","8c45a8c5":"code","483fab7f":"code","fa5dc6ee":"code","bf6c3c91":"code","8c87ace1":"code","1af6705f":"code","dd05513c":"code","f189f38a":"code","b58fd82a":"markdown","357f1053":"markdown","8b399d7b":"markdown","ebf37456":"markdown","e59996f2":"markdown","716be6cc":"markdown","f9191441":"markdown","32dc2092":"markdown","3fcdada2":"markdown","025243da":"markdown","bbfe39cc":"markdown","2f9a45f3":"markdown","07ea617d":"markdown","5605e1d3":"markdown","5061245f":"markdown","dbf368c8":"markdown","b8774d48":"markdown","50365ba1":"markdown","4c76aed9":"markdown","c450d1c3":"markdown","a4654d37":"markdown","f34d9498":"markdown","ff383cdc":"markdown","f2162d28":"markdown","29a05484":"markdown","b64e5e5a":"markdown","c8264cb1":"markdown","3be7bddf":"markdown","83b648b4":"markdown","1e9eb0ec":"markdown","04b23e5b":"markdown","7c789c6f":"markdown","de011e51":"markdown","30990d11":"markdown","6d019041":"markdown","8f9f5d18":"markdown","761eaf67":"markdown","d679ab08":"markdown","920dab18":"markdown","e191b8ff":"markdown","10d0ed26":"markdown","081292de":"markdown","74390623":"markdown","8b29fca1":"markdown"},"source":{"e4366d43":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport datetime as dt\nimport seaborn as sns","dd3f8765":"df = pd.read_csv('\/kaggle\/input\/pet-food-customer-orders-online\/pet_food_customer_orders.csv')\ndf.head()","1bc67d0d":"df.shape","8443b116":"df['order_payment_date'].min()","669a289f":"df['order_payment_date'].max()","a82c091c":"df.describe()","76d12a60":"sns.set(rc={'figure.figsize':(12,9)})","4cc57d82":"sns.distplot(df['kibble_kcal'])\n# might need to do scaling for such variables","e09822bc":"df.describe(include=np.object)","5b48ef63":"df['customer_id'].nunique()","b0465179":"df['pet_id'].nunique()","6323ac65":"df.columns","e7e1adad":"# selected some variables for aggregation of data around them\n\nshortlisted_vars = ['wet_food_order_number', 'pet_has_active_subscription', 'pet_food_tier', 'neutered', \n                    'gender', 'pet_breed_size', 'ate_wet_food_pre_tails', 'pet_life_stage_at_order', 'wet_tray_size', \n                    'wet_food_textures_in_order', 'customer_support_ticket_category']","c1f3e822":"for var in shortlisted_vars:\n    print(df.groupby(var).size())","d2fc913c":"df.isnull().sum()","45701be6":"# Shows how many pets each customer has. Some have multiple pets. \n# Pet population in a household may impact the nature of orders placed for each pet. Hence potentially an important explanatory variable\n\ndf.groupby('customer_id')['pet_id'].nunique().reset_index()","b32a28cf":"pet_population = pd.DataFrame(df.groupby('customer_id')['pet_id'].nunique().reset_index())","bd61b425":"pet_population.shape","dd255286":"pet_population.columns=['customer_id', 'number_of_pets_in_house']","6a72d16c":"pet_population.sample(5)","b166fdcf":"# update the df with the new attribute\ndf_updated = pd.merge(df,pet_population, on='customer_id')","059a8237":"df_updated.head().T","1e6207b2":"df_updated['last_customer_support_ticket_date']= df_updated['last_customer_support_ticket_date'].astype('datetime64[ns]')\ndf_updated['order_payment_date']= df_updated['order_payment_date'].astype('datetime64[ns]')","4088b72a":"df_updated['communication_gap'] = ((df_updated['order_payment_date'].dt.date -  df_updated['last_customer_support_ticket_date'].dt.date)\/np.timedelta64(1, 'D'))","f33095df":"df_updated.head().T","54b18b4d":"df_updated['last_customer_support_ticket_date'].isnull().sum()","99ec2efa":"df_updated['communication_gap'].describe()","f7438b6f":"# Marking those orders with 1 where some communication had taken place (regardless of subject)\n\ndf_updated['communication'] = np.where(df_updated['communication_gap'] > 0, 1, 0)","0788e1d0":"df_updated['communication'].isnull().sum()","901c88ce":"df_updated.groupby('communication').size()    ","e84ebc8d":"df_updated.groupby('customer_support_ticket_category')['communication_gap'].mean().sort_values()","c99f44d2":"del df_updated['communication_gap']\n\n# since we will not be needing it from here on. we have kept the 'communication' market in the dataframe though","1874702c":"df_updated['days_before_closing'] = ((df_updated['order_payment_date'].max() -  df_updated['order_payment_date'])\/np.timedelta64(1, 'D'))","00caf71a":"df_updated['days_before_closing'].describe()","966afa32":"df_updated['wet_dry_cal_ratio'] = df_updated['wet_kcal']\/df_updated['kibble_kcal']","50163207":"df_updated['wet_dry_cal_ratio'] = df_updated['wet_dry_cal_ratio'].round(2)\n\n# rounding the result to 2 decimal places","f1cb0be2":"df_updated.head().T","7869501e":"df_updated['wet_dry_cal_ratio'].describe()","a63766ae":"df_updated.columns","8cd358f2":"# this is selected transactional data to be aggregated for each pet \n\nnumbers_df = df_updated.groupby('pet_id').agg({'pet_order_number':['max'],                    # number of dry orders can be related to number of wet food orders\n                                             'kibble_kcal':['mean'],                          # high dry kcal could lead to ordering more food like wet food\n                                             'wet_food_discount_percent':['mean'],            # discount given can determine whether client buys wet food or not\n                                             'total_minutes_on_website_since_last_order':['mean'],  # time spent on web can determine whether client buys wet or not\n                                               'number_of_pets_in_house':['mean'],            # this variable could have a bearing\n                                               'communication':['max'],                       # whether there has been customer communication\n                                               'days_before_closing':['max'],                 # this column could be used for specifying cut off date for churn analysis\n                                               'wet_dry_cal_ratio':['mean'],                  # a mix\/ratio like this could determine how important wet food is for the pet\n                                               'wet_food_order_number':['max']})               # this column will be used for labelling later on, and then dropped","f59743a0":"numbers_df.head()","ec984c35":"numbers_df.shape","27ec3f09":"df['pet_id'].nunique()","b5816601":"numbers_df.columns.ravel()","dbc23569":"#Join the field names to the newly aggregate fields names\nnumbers_df.columns = [\"_\".join(numbers_df) for numbers_df in numbers_df.columns.ravel()]","5f8c590c":"numbers_df.head()","a00425fa":"#Reset the index\nnumbers_df = numbers_df.reset_index()","06f1bfc9":"numbers_df.head()","265c0f9a":"numbers_df.shape","de04687a":"numbers_df.isnull().sum()","3e967d00":"df.columns","a2922267":"# Category variables which will be used to create a dataframe for visualisation of pets who place wet orders versus those who dont\n# These category variables will later be dummified for modelling purposes\n\n\ncategory_columns = ['pet_has_active_subscription', 'pet_food_tier', 'pet_allergen_list', 'pet_fav_flavour_list', \n                    'pet_health_issue_list', 'neutered', 'gender','pet_breed_size', 'signup_promo', 'ate_wet_food_pre_tails',\n                    'dry_food_brand_pre_tails', 'pet_life_stage_at_order']","83d07a07":"category_df = df.groupby('pet_id')[category_columns].max().reset_index()\n\n# This is to extract pet profile (of categorical variables) from the transactional data df\n# Here perhaps we can use median. does not matter. mean, median, max or min values will all be the same","f3369aaa":"category_df.head()","7764730c":"category_df.shape","be0fcec1":"# Merging two tables (no dummification done yet)\nvisual_df = pd.merge(numbers_df, category_df, on='pet_id')\nvisual_df.head()","fbc5ca15":"# Data labelling depicting whether a pet\/customer has ever placed a wet food order\nvisual_df['Label'] = np.where(visual_df['wet_food_order_number_max'] > 0, 1, 0)","2ab8d536":"# Data labelling depicting whether a pet\/customer has placed one wet food order or multiple wet food orders over the months\n\nvisual_oneormore_df = visual_df[visual_df['Label']==1]","7814d579":"del visual_oneormore_df['Label']","0bda18ff":"visual_oneormore_df['Label'] = np.where(visual_oneormore_df['wet_food_order_number_max'] > 1, 2, 1)","4269fe69":"visual_oneormore_df.shape","d0ce3087":"# visual_df.to_csv('visual_df.csv')    \n# for visualisation in tableau","2b5514fd":"# visual_oneormore_df.to_csv('visual_oneormore_df.csv')  \n# for visualisation in tableau","ec4c3b98":"# insert another label column LabelB for 3 class labelling. '2' to mark those who have placed multiple wet food orders\n\nvisual_df['LabelB'] = 0\nvisual_df.loc[visual_df.wet_food_order_number_max>0,'LabelB'] = 1\nvisual_df.loc[visual_df.wet_food_order_number_max>1,'LabelB'] = 2","bee0c5f5":"visual_df.head().T","7ca1f815":"visual_df.groupby('Label').size()\n\n# of 13087 pets 4263 have purchased wet food at least once\n# see cell 14 above. why does the number (4263) not tie in with the number 4181\n# because imagine a pet whose wet_food_order_number_max is eg 4 but order number 1 was missing in the original transactional dataset, our data labelling \n# will still assign '1' to such users. \n# This also means that wet_food_order_number 1 is missing in case of 4263-4181 (=82) pets in the original transactional dataset","e5901e5d":"visual_df.groupby('LabelB').size()\n\n# of the 4263 pets who have purchased wet food at least once, 3132 went on to buy the wet food again","50e0c116":"visual_df.isnull().sum()\n# keep missing values as they are right now. try the visualization first","c8eca4f3":"chart=sns.countplot(x='Label', data = visual_df, palette = 'hls')\nfor p in chart.patches:\n    height = p.get_height()\n    chart.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.0f}'.format(height),\n            ha=\"center\") \n\nplt.show()","5d7b4620":"chart=sns.countplot(x='Label', data = visual_oneormore_df, palette = 'hls')\nfor p in chart.patches:\n    height = p.get_height()\n    chart.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.0f}'.format(height),\n            ha=\"center\") \n\nplt.show()","4b0e8eab":"chart=sns.countplot(x='LabelB', data = visual_df, palette = 'hls')\nfor p in chart.patches:\n    height = p.get_height()\n    chart.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.0f}'.format(height),\n            ha=\"center\") \n\nplt.show()","355efc9d":"visual_df.groupby('Label').mean().transpose()","ffb584e4":"pd.crosstab(visual_df.gender,visual_df.Label).plot(kind='bar')\nplt.title('gender vs Label')\nplt.xlabel('gender')\nplt.ylabel('Number of Pets')\n\n\npd.crosstab(visual_df.gender,visual_oneormore_df.Label).plot(kind='bar')\nplt.title('gender vs Label')\nplt.xlabel('gender')\nplt.ylabel('Number of Pets')\n\n\n\npd.crosstab(visual_df.gender,visual_df.LabelB).plot(kind='bar')\nplt.title('gender vs LabelB')\nplt.xlabel('gender')\nplt.ylabel('Number of Pets')","c6e3a627":"pd.crosstab(visual_df.number_of_pets_in_house_mean,visual_df.Label).plot(kind='bar')\nplt.title('number_of_pets_in_house_mean vs LabelB')\nplt.xlabel('number_of_pets_in_house_mean')\nplt.ylabel('Number of Pets')\n\n\npd.crosstab(visual_oneormore_df.number_of_pets_in_house_mean,visual_oneormore_df.Label).plot(kind='bar')\nplt.title('number_of_pets_in_house_mean vs Label')\nplt.xlabel('number_of_pets_in_house_mean')\nplt.ylabel('Number of Pets')\n\n\npd.crosstab(visual_df.number_of_pets_in_house_mean,visual_df.LabelB).plot(kind='bar')\nplt.title('number_of_pets_in_house_mean vs LabelB')\nplt.xlabel('number_of_pets_in_house_mean')\nplt.ylabel('Number of Pets')","41acaff5":"pd.crosstab(visual_df.ate_wet_food_pre_tails,visual_df.Label).plot(kind='bar')\nplt.title('ate_wet_food_pre_tails vs Label')\nplt.xlabel('ate_wet_food_pre_tails')\nplt.ylabel('Number of Pets')\n\n\n\npd.crosstab(visual_oneormore_df.ate_wet_food_pre_tails,visual_oneormore_df.Label).plot(kind='bar')\nplt.title('ate_wet_food_pre_tails vs Label')\nplt.xlabel('ate_wet_food_pre_tails')\nplt.ylabel('Number of Pets')\n\n\n\npd.crosstab(visual_df.ate_wet_food_pre_tails,visual_df.LabelB).plot(kind='bar')\nplt.title('ate_wet_food_pre_tails vs LabelB')\nplt.xlabel('ate_wet_food_pre_tails')\nplt.ylabel('Number of Pets')","dbdff0e9":"pd.crosstab(visual_df.ate_wet_food_pre_tails,visual_df.Label).plot(kind='bar')\nplt.title('ate_wet_food_pre_tails vs Label')\nplt.xlabel('ate_wet_food_pre_tails')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_oneormore_df.ate_wet_food_pre_tails,visual_oneormore_df.Label).plot(kind='bar')\nplt.title('ate_wet_food_pre_tails vs Label')\nplt.xlabel('ate_wet_food_pre_tails')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_df.ate_wet_food_pre_tails,visual_df.LabelB).plot(kind='bar')\nplt.title('ate_wet_food_pre_tails vs LabelB')\nplt.xlabel('ate_wet_food_pre_tails')\nplt.ylabel('Number of Pets')","faba6e7f":"pd.crosstab(visual_df.number_of_pets_in_house_mean,visual_df.Label).plot(kind='bar')\nplt.title('number_of_pets_in_house_mean vs Label')\nplt.xlabel('number_of_pets_in_house_mean')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_oneormore_df.number_of_pets_in_house_mean,visual_oneormore_df.Label).plot(kind='bar')\nplt.title('number_of_pets_in_house_mean vs Label')\nplt.xlabel('number_of_pets_in_house_mean')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_df.number_of_pets_in_house_mean,visual_df.LabelB).plot(kind='bar')\nplt.title('number_of_pets_in_house_mean vs LabelB')\nplt.xlabel('number_of_pets_in_house_mean')\nplt.ylabel('Number of Pets')","5c97a769":"visual_df.columns","2841c88a":"pd.crosstab(visual_df.communication_max,visual_df.Label).plot(kind='bar')\nplt.title('communication_max vs Label')\nplt.xlabel('communication_max')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_oneormore_df.communication_max,visual_oneormore_df.Label).plot(kind='bar')\nplt.title('communication_max vs Label')\nplt.xlabel('communication_max')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_df.communication_max,visual_df.LabelB).plot(kind='bar')\nplt.title('communication_max vs LabelB')\nplt.xlabel('communication_max')\nplt.ylabel('Number of Pets')","c6f6487f":"visual_df.columns","238d36fd":"pd.crosstab(visual_df.pet_has_active_subscription,visual_df.Label).plot(kind='bar')\nplt.title('pet_has_active_subscription vs Label')\nplt.xlabel('pet_has_active_subscription')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_oneormore_df.pet_has_active_subscription,visual_oneormore_df.Label).plot(kind='bar')\nplt.title('pet_has_active_subscription vs Label')\nplt.xlabel('pet_has_active_subscription')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_df.pet_has_active_subscription,visual_df.LabelB).plot(kind='bar')\nplt.title('pet_has_active_subscription vs LabelB')\nplt.xlabel('pet_has_active_subscription')\nplt.ylabel('Number of Pets')","7205fbe0":"visual_df.columns","cf746fa8":"pd.crosstab(visual_df.pet_food_tier,visual_df.Label).plot(kind='bar')\nplt.title('pet_food_tier vs Label')\nplt.xlabel('pet_food_tier')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_oneormore_df.pet_food_tier,visual_oneormore_df.Label).plot(kind='bar')\nplt.title('pet_food_tier vs Label')\nplt.xlabel('pet_food_tier')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_df.pet_food_tier,visual_df.LabelB).plot(kind='bar')\nplt.title('pet_food_tier vs LabelB')\nplt.xlabel('pet_food_tier')\nplt.ylabel('Number of Pets')","a79dd896":"visual_df.columns","2e2c30cd":"pd.crosstab(visual_df.pet_fav_flavour_list,visual_df.Label).plot(kind='bar')\nplt.title('pet_fav_flavour_list vs Label')\nplt.xlabel('pet_fav_flavour_list')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_oneormore_df.pet_fav_flavour_list,visual_oneormore_df.Label).plot(kind='bar')\nplt.title('pet_fav_flavour_list vs Label')\nplt.xlabel('pet_fav_flavour_list')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_df.pet_fav_flavour_list,visual_df.LabelB).plot(kind='bar')\nplt.title('pet_fav_flavour_list vs LabelB')\nplt.xlabel('pet_fav_flavour_list')\nplt.ylabel('Number of Pets')","5d5ce93a":"visual_df.columns","3fba9f97":"pd.crosstab(visual_df.neutered,visual_df.Label).plot(kind='bar')\nplt.title('neutered vs Label')\nplt.xlabel('neutered')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_oneormore_df.neutered,visual_oneormore_df.Label).plot(kind='bar')\nplt.title('neutered vs Label')\nplt.xlabel('neutered')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_df.neutered,visual_df.LabelB).plot(kind='bar')\nplt.title('neutered vs LabelB')\nplt.xlabel('neutered')\nplt.ylabel('Number of Pets')","097cb7e9":"visual_df.columns","82c868dd":"pd.crosstab(visual_df.pet_breed_size,visual_df.Label).plot(kind='bar')\nplt.title('pet_breed_size vs Label')\nplt.xlabel('pet_breed_size')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_oneormore_df.pet_breed_size,visual_oneormore_df.Label).plot(kind='bar')\nplt.title('pet_breed_size vs Label')\nplt.xlabel('pet_breed_size')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_df.pet_breed_size,visual_df.LabelB).plot(kind='bar')\nplt.title('pet_breed_size vs LabelB')\nplt.xlabel('pet_breed_size')\nplt.ylabel('Number of Pets')","846a5c1d":"visual_df.columns","5af9ccee":"pd.crosstab(visual_df.signup_promo,visual_df.Label).plot(kind='bar')\nplt.title('signup_promo vs Label')\nplt.xlabel('signup_promo')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_oneormore_df.signup_promo,visual_oneormore_df.Label).plot(kind='bar')\nplt.title('signup_promo vs Label')\nplt.xlabel('signup_promo')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_df.signup_promo,visual_df.LabelB).plot(kind='bar')\nplt.title('signup_promo vs LabelB')\nplt.xlabel('signup_promo')\nplt.ylabel('Number of Pets')","28681aab":"visual_df.columns","96adf0e0":"pd.crosstab(visual_df.ate_wet_food_pre_tails,visual_df.Label).plot(kind='bar')\nplt.title('ate_wet_food_pre_tails vs Label')\nplt.xlabel('ate_wet_food_pre_tails')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_oneormore_df.ate_wet_food_pre_tails,visual_oneormore_df.Label).plot(kind='bar')\nplt.title('ate_wet_food_pre_tails vs Label')\nplt.xlabel('ate_wet_food_pre_tails')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_df.ate_wet_food_pre_tails,visual_df.LabelB).plot(kind='bar')\nplt.title('ate_wet_food_pre_tails vs LabelB')\nplt.xlabel('ate_wet_food_pre_tails')\nplt.ylabel('Number of Pets')","f83ac963":"visual_df.columns","f886f9d9":"pd.crosstab(visual_df.pet_life_stage_at_order,visual_df.Label).plot(kind='bar')\nplt.title('pet_life_stage_at_order vs Label')\nplt.xlabel('pet_life_stage_at_order')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_oneormore_df.pet_life_stage_at_order,visual_oneormore_df.Label).plot(kind='bar')\nplt.title('pet_life_stage_at_order vs Label')\nplt.xlabel('pet_life_stage_at_order')\nplt.ylabel('Number of Pets')\n\npd.crosstab(visual_df.pet_life_stage_at_order,visual_df.LabelB).plot(kind='bar')\nplt.title('pet_life_stage_at_order vs LabelB')\nplt.xlabel('pet_life_stage_at_order')\nplt.ylabel('Number of Pets')","7088fab0":"visual_df.columns","4049a889":"# interpretation: the longer the clinet stays with the company (higher number of orders, the higher the probability of buying wet food)\n\nplt.figure(figsize=(10,6))\nvisual_df[visual_df['Label']==1]['pet_order_number_max'].hist(alpha=0.5,color='blue',\n                                              bins=10,label='Label=1')\nvisual_df[visual_df['Label']==0]['pet_order_number_max'].hist(alpha=0.2,color='green',\n                                              bins=10,label='Label=0')\nplt.legend()\nplt.xlabel('pet_order_number_max')\nplt.ylabel('Frequency')\n\n\n\n\nplt.figure(figsize=(10,6))\nvisual_oneormore_df[visual_oneormore_df['Label']==2]['pet_order_number_max'].hist(alpha=0.5,color='brown',\n                                              bins=10,label='Label=2')\nvisual_oneormore_df[visual_oneormore_df['Label']==1]['pet_order_number_max'].hist(alpha=0.5,color='blue',\n                                              bins=10,label='Label=1')\nplt.legend()\nplt.xlabel('pet_order_number_max')\nplt.ylabel('Frequency')\n\n\n\n\nplt.figure(figsize=(10,6))\nvisual_df[visual_df['LabelB']==2]['pet_order_number_max'].hist(alpha=0.5,color='brown',\n                                              bins=20,label='Label=2')\nvisual_df[visual_df['LabelB']==1]['pet_order_number_max'].hist(alpha=0.5,color='blue',\n                                              bins=20,label='Label=1')\nvisual_df[visual_df['LabelB']==0]['pet_order_number_max'].hist(alpha=0.2,color='green',\n                                              bins=20,label='Label=0')\nplt.legend()\nplt.xlabel('pet_order_number_max')\nplt.ylabel('Frequency')","aaeca18c":"visual_df.columns","402bde24":"plt.figure(figsize=(10,6))\nvisual_df[visual_df['Label']==1]['kibble_kcal_mean'].hist(alpha=0.5,color='blue',\n                                              bins=10,label='Buyers')\nvisual_df[visual_df['Label']==0]['kibble_kcal_mean'].hist(alpha=0.2,color='green',\n                                              bins=13,label='Non-Buyers')\nplt.legend()\nplt.xlabel('kibble_kcal_mean')\nplt.ylabel('Number of Pets')\n\n\n\n\nplt.figure(figsize=(10,6))\nvisual_oneormore_df[visual_oneormore_df['Label']==2]['kibble_kcal_mean'].hist(alpha=0.5,color='brown',\n                                              bins=8,label='Buyers (1+ orders)')\nvisual_oneormore_df[visual_oneormore_df['Label']==1]['kibble_kcal_mean'].hist(alpha=0.5,color='blue',\n                                              bins=10,label='Buyers (1 order)')\nplt.legend()\nplt.xlabel('kibble_kcal_mean')\nplt.ylabel('Number of Pets')\n\n\n\n\nplt.figure(figsize=(10,6))\nvisual_df[visual_df['LabelB']==2]['kibble_kcal_mean'].hist(alpha=0.5,color='brown',\n                                              bins=20,label='Label=2')\nvisual_df[visual_df['LabelB']==1]['kibble_kcal_mean'].hist(alpha=0.5,color='blue',\n                                              bins=20,label='Label=1')\nvisual_df[visual_df['LabelB']==0]['kibble_kcal_mean'].hist(alpha=0.2,color='green',\n                                              bins=20,label='Label=0')\nplt.legend()\nplt.xlabel('kibble_kcal_mean')\nplt.ylabel('Frequency')","f6a1ffba":"visual_df.columns","ce24267b":"plt.figure(figsize=(10,6))\nvisual_df[visual_df['Label']==1]['days_before_closing_max'].hist(alpha=0.5,color='blue',\n                                              bins=10,label='Label=1')\nvisual_df[visual_df['Label']==0]['days_before_closing_max'].hist(alpha=0.2,color='green',\n                                              bins=10,label='Label=0')\nplt.legend()\nplt.xlabel('days_before_closing_max')\nplt.ylabel('Frequency')\n\n\n\n\nplt.figure(figsize=(10,6))\nvisual_oneormore_df[visual_oneormore_df['Label']==2]['days_before_closing_max'].hist(alpha=0.5,color='brown',\n                                              bins=10,label='Label=2')\nvisual_oneormore_df[visual_oneormore_df['Label']==1]['days_before_closing_max'].hist(alpha=0.5,color='blue',\n                                              bins=10,label='Label=1')\nplt.legend()\nplt.xlabel('days_before_closing_max')\nplt.ylabel('Frequency')\n\n\n\n\nplt.figure(figsize=(10,6))\nvisual_df[visual_df['LabelB']==2]['days_before_closing_max'].hist(alpha=0.5,color='brown',\n                                              bins=20,label='Label=2')\nvisual_df[visual_df['LabelB']==1]['days_before_closing_max'].hist(alpha=0.5,color='blue',\n                                              bins=20,label='Label=1')\nvisual_df[visual_df['LabelB']==0]['days_before_closing_max'].hist(alpha=0.2,color='green',\n                                              bins=20,label='Label=0')\nplt.legend()\nplt.xlabel('days_before_closing_max')\nplt.ylabel('Frequency')","2c29deb6":"numbers_df.head()","01a6b9dc":"category_df.head()","d99bfef3":"#dummify categorical variables\ndummy_df = pd.get_dummies(category_df, \n                             columns=['pet_has_active_subscription', 'pet_food_tier', 'pet_allergen_list', 'pet_fav_flavour_list', \n                    'pet_health_issue_list', 'neutered', 'gender','pet_breed_size', 'signup_promo', 'ate_wet_food_pre_tails',\n                    'dry_food_brand_pre_tails', 'pet_life_stage_at_order'], \n                             drop_first = False)","70c4ce58":"dummy_df.head()","8495cd48":"transformed_df = pd.merge(numbers_df, dummy_df, on='pet_id')\ntransformed_df.head().T","d771f0cb":"transformed_df.shape","f0a1b746":"# (Table 1) pet orders table no-wet-food-orders\/at-least-one-wet-food-order\ntransformed_df['Label'] = np.where(transformed_df['wet_food_order_number_max'] > 0, 1, 0)","43d6d64c":"# (Table 2) pet orders table one-wet-food-order\/multiple-wet_food_orders\nwet_food_df = transformed_df[transformed_df['Label']==1]","c4b68b58":"del wet_food_df['Label']","489ecfb1":"wet_food_df['Label'] = np.where(wet_food_df['wet_food_order_number_max'] > 1, 2, 1)\n# Label '2' meaning 2 or more wet food orders","1a5b42c3":"transformed_df.corr()['wet_food_order_number_max'].sort_values(ascending=False)","dd014910":"transformed_df.corr()['wet_food_order_number_max'].sort_values(ascending=True)","d60cd35c":"wet_food_df.corr()['wet_food_order_number_max'].sort_values(ascending=False)","375fd4fe":"wet_food_df.corr()['wet_food_order_number_max'].sort_values(ascending=True)","e5d38f1a":"# now we can delete the column that lets us decide data labels\ndel transformed_df['wet_food_order_number_max']\ndel wet_food_df['wet_food_order_number_max']","cd8d307b":"numbers_df.columns","91aab055":"# furthermore we delete a couple more columns from transformed_df because these variables are not appropriate as explanatory variables for zero-wet-orders\/some-wet-orders classification\ndel transformed_df['wet_food_discount_percent_mean']\ndel transformed_df['wet_dry_cal_ratio_mean']\n\n# The above two explanatory variables are kept in wet_food_df table since they are relevant variables in one-wet-order\/more-wet-orders classification","9da8bfc8":"transformed_df.sample(9).T","48960c9d":"wet_food_df.head()","ad79e094":"transformed_df.groupby('Label').size()\n# Figures consistent with earlier analysis","cd4cbfec":"wet_food_df.groupby('Label').size()\n# Figures consistent with earlier analysis","58dec327":"transformed_df.columns[transformed_df.isnull().any()].tolist()","54ef5bb4":"wet_food_df.columns[wet_food_df.isnull().any()].tolist()\n\n# Discount does not show any missing values because all wet-order-numbers either show a discount value or a 0. not a NaN. It shows NaN only when the wet-order-number shows NaN ","1f332aca":"transformed_df.groupby('Label').size()\n# imbalanced data. we need to take out half of examples labelled with 0. otherwise the algorithm will train itself more on '0' examples and then \n# the algorithm will be able to predict 0s more easily than the 1s. That will impact Recall. If time permits balance the data","28e643b3":"numbers_df['kibble_kcal_mean'].describe()","a3cd0fdc":"sns.distplot(numbers_df['kibble_kcal_mean'])","0d5f9c4b":"numbers_df.columns","165f16d3":"sns.distplot(numbers_df['days_before_closing_max'])","ff442216":"features = transformed_df[transformed_df.columns.difference(['Label','pet_id'])]\n\nlabels = transformed_df['Label']","cd3f1ef8":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier()\n\nclf.fit(features,labels)\n\npreds = clf.predict(features)\n\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(preds,labels)\nprint(accuracy)","1599a343":"VI = pd.DataFrame(clf.feature_importances_, columns = [\"RF\"], index=features.columns)\nVI = VI.reset_index()\nVI","57ceefbe":"VI.sort_values(['RF'],ascending=0)[0:20]\n# Get the top features from this list below","d71aa347":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\nmodel = SelectKBest(score_func=chi2, k=5)\nfit = model.fit(features.abs(), labels)","c6f22b6a":"pd.options.display.float_format = '{:.2f}'.format\nchi_sq = pd.DataFrame(fit.scores_, columns = [\"Chi_Square\"], index=features.columns)","00581ec7":"chi_sq = chi_sq.reset_index()","09955713":"chi_sq.sort_values('Chi_Square',ascending=0)[0:20]","989780b7":"transformed_df.corr()['Label'].sort_values(ascending=False)","04e22b45":"transformed_df.corr()['Label'].sort_values(ascending=True)","a02549c2":"classification_df = transformed_df[transformed_df.columns.difference(['pet_id'])]","eb9487a1":"classification_df.head().T","178f4e62":"features = transformed_df[transformed_df.columns.difference(['Label','pet_id'])]\n\nlabels = transformed_df['Label']","d5333970":"Class_Features = transformed_df.columns.difference(['Label','pet_id'])","47015b09":"Selected_Features = ['kibble_kcal_mean', 'total_minutes_on_website_since_last_order_mean', 'ate_wet_food_pre_tails_True', \n                     'pet_life_stage_at_order_mature', 'pet_order_number_max',\n                     'number_of_pets_in_house_mean', 'days_before_closing_max']","68586c82":"from sklearn import model_selection\nfrom sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(classification_df, test_size = 0.4, random_state=21)\ntrain = train.reset_index(drop=True)\ntest = test.reset_index(drop=True)","4f6fee8e":"features_train = train[Class_Features]\nlabel_train = train['Label']\nfeatures_test = test[Class_Features]\nlabel_test = test['Label']","0e5e1536":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier()\n\nclf.fit(features_train,label_train)\n\npred_train = clf.predict(features_train)\npred_test = clf.predict(features_test)\n\nfrom sklearn.metrics import accuracy_score\naccuracy_train = accuracy_score(pred_train,label_train)\naccuracy_test = accuracy_score(pred_test,label_test)\n\nfrom sklearn import metrics\nfpr, tpr, _ = metrics.roc_curve(np.array(label_train), clf.predict_proba(features_train)[:,1])\nauc_train = metrics.auc(fpr,tpr)\n\nfpr, tpr, _ = metrics.roc_curve(np.array(label_test), clf.predict_proba(features_test)[:,1])\nauc_test = metrics.auc(fpr,tpr)\n\nprint(\"{:.2f}\".format(accuracy_train),\"{:.2f}\".format(accuracy_test),\"{:.2f}\".format(auc_train),\"{:.2f}\".format(auc_test))","b266d97c":"features.shape","151c3473":"pd.crosstab(label_train,pd.Series(pred_train),rownames=['ACTUAL'],colnames=['PRED'])","862e3dda":"pd.crosstab(label_test,pd.Series(pred_test),rownames=['ACTUAL'],colnames=['PRED'])","3c508527":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\n\nprint('Accuracy Score')\nprint(accuracy_score(label_test, pred_test),'\\n')\n\nprint('Precision Score')\nprint(precision_score(label_test, pred_test,average = None),'\\n')\n\nprint('Confusion Matrix')\narray = confusion_matrix(label_test, pred_test)\ncolumns = ['Buyer','Not Buyer']  #to adapt to your classification problem\nprint(pd.DataFrame(array,columns = columns, index = columns),'\\n')\n\nprint('Classification Report')\nprint(classification_report(label_test, pred_test),'\\n')","4b692d33":"from sklearn import model_selection\nfrom sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(classification_df, test_size = 0.3, random_state=21)\ntrain = train.reset_index(drop=True)\ntest = test.reset_index(drop=True)","e2920f09":"features_train = train[Selected_Features]\nlabel_train = train['Label']\nfeatures_test = test[Selected_Features]\nlabel_test = test['Label']","27c9d50e":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier()\n\nclf.fit(features_train,label_train)\n\npred_train = clf.predict(features_train)\npred_test = clf.predict(features_test)\n\nfrom sklearn.metrics import accuracy_score\naccuracy_train = accuracy_score(pred_train,label_train)\naccuracy_test = accuracy_score(pred_test,label_test)\n\nfrom sklearn import metrics\nfpr, tpr, _ = metrics.roc_curve(np.array(label_train), clf.predict_proba(features_train)[:,1])\nauc_train = metrics.auc(fpr,tpr)\n\nfpr, tpr, _ = metrics.roc_curve(np.array(label_test), clf.predict_proba(features_test)[:,1])\nauc_test = metrics.auc(fpr,tpr)\n\nprint(\"{:.2f}\".format(accuracy_train),\"{:.2f}\".format(accuracy_test),\"{:.2f}\".format(auc_train),\"{:.2f}\".format(auc_test))","4fbe77e6":"from sklearn.linear_model import LogisticRegression\nlrclf = LogisticRegression()\n\nlrclf.fit(features_train,label_train)\n\npred_train = lrclf.predict(features_train)\npred_test = lrclf.predict(features_test)\n\nfrom sklearn.metrics import accuracy_score\naccuracy_train = accuracy_score(pred_train,label_train)\naccuracy_test = accuracy_score(pred_test,label_test)\n\nfrom sklearn import metrics\nfpr, tpr, _ = metrics.roc_curve(np.array(label_train), lrclf.predict_proba(features_train)[:,1])\nauc_train = metrics.auc(fpr,tpr)\n\nfpr, tpr, _ = metrics.roc_curve(np.array(label_test), lrclf.predict_proba(features_test)[:,1])\nauc_test = metrics.auc(fpr,tpr)\n\nprint(\"{:.2f}\".format(accuracy_train),\"{:.2f}\".format(accuracy_test),\"{:.2f}\".format(auc_train),\"{:.2f}\".format(auc_test))","c114d1ef":"from sklearn.tree import DecisionTreeClassifier\n\ntree = DecisionTreeClassifier(random_state=0)\ntree.fit(features_train, label_train)\n# predict train set\npred_train=tree.predict(features_train)\n# predict test set\npred_test=tree.predict(features_test)\n\nfrom sklearn.metrics import accuracy_score\naccuracy_train = accuracy_score(pred_train,label_train)\naccuracy_test = accuracy_score(pred_test,label_test)\n\nfrom sklearn import metrics\nfpr, tpr, _ = metrics.roc_curve(np.array(label_train), tree.predict_proba(features_train)[:,1])\nauc_train = metrics.auc(fpr,tpr)\n\nfpr, tpr, _ = metrics.roc_curve(np.array(label_test), tree.predict_proba(features_test)[:,1])\nauc_test = metrics.auc(fpr,tpr)\n\nprint(\"{:.2f}\".format(accuracy_train),\"{:.2f}\".format(accuracy_test),\"{:.2f}\".format(auc_train),\"{:.2f}\".format(auc_test))","aeb1479b":"features = wet_food_df[wet_food_df.columns.difference(['Label','pet_id'])]\n\n\nlabels = wet_food_df['Label']","5d9f97d2":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier()\n\nclf.fit(features,labels)\n\npreds = clf.predict(features)\n\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(preds,labels)\nprint(accuracy)","ed2245b1":"VII = pd.DataFrame(clf.feature_importances_, columns = [\"RF\"], index=features.columns)\nVII = VII.reset_index()\nVII","6494bbef":"VII.sort_values(['RF'],ascending=0)[0:30]\n# Get the top 10 features from this list below","2495805a":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\nmodel = SelectKBest(score_func=chi2, k=5)\nfit = model.fit(features.abs(), labels)","5a55b54b":"pd.options.display.float_format = '{:.2f}'.format\nchi_sq = pd.DataFrame(fit.scores_, columns = [\"Chi_Square\"], index=features.columns)","3ccb1abf":"chi_sq = chi_sq.reset_index()","d18d1a05":"chi_sq.sort_values('Chi_Square',ascending=0)[0:20]","45d25408":"wet_food_df.corr()['Label'].sort_values(ascending=False)","6906041c":"wet_food_df.corr()['Label'].sort_values(ascending=True)","8c45a8c5":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier()\n\nclf.fit(features_train,label_train)\n\npred_train = clf.predict(features_train)\npred_test = clf.predict(features_test)\n\nfrom sklearn.metrics import accuracy_score\naccuracy_train = accuracy_score(pred_train,label_train)\naccuracy_test = accuracy_score(pred_test,label_test)\n\nfrom sklearn import metrics\nfpr, tpr, _ = metrics.roc_curve(np.array(label_train), clf.predict_proba(features_train)[:,1])\nauc_train = metrics.auc(fpr,tpr)\n\nfpr, tpr, _ = metrics.roc_curve(np.array(label_test), clf.predict_proba(features_test)[:,1])\nauc_test = metrics.auc(fpr,tpr)\n\nprint(\"{:.2f}\".format(accuracy_train),\"{:.2f}\".format(accuracy_test),\"{:.2f}\".format(auc_train),\"{:.2f}\".format(auc_test))","483fab7f":"pd.crosstab(label_train,pd.Series(pred_train),rownames=['ACTUAL'],colnames=['PRED'])","fa5dc6ee":"pd.crosstab(label_test,pd.Series(pred_test),rownames=['ACTUAL'],colnames=['PRED'])","bf6c3c91":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\n\nprint('Accuracy Score')\nprint(accuracy_score(label_test, pred_test),'\\n')\n\nprint('Precision Score')\nprint(precision_score(label_test, pred_test,average = None),'\\n')\n\nprint('Confusion Matrix')\narray = confusion_matrix(label_test, pred_test)\ncolumns = ['Buyer1','Buyer1+']  #to adapt to your classification problem\nprint(pd.DataFrame(array,columns = columns, index = columns),'\\n')\n\nprint('Classification Report')\nprint(classification_report(label_test, pred_test),'\\n')","8c87ace1":"Selected_Features2 = ['wet_food_discount_percent_mean','pet_order_number_max','wet_dry_cal_ratio_mean','total_minutes_on_website_since_last_order_mean',\n                      'kibble_kcal_mean','communication_max','days_before_closing_max']","1af6705f":"from sklearn import model_selection\nfrom sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(wet_food_df, test_size = 0.3, random_state=21)\ntrain = train.reset_index(drop=True)\ntest = test.reset_index(drop=True)","dd05513c":"features_train = train[Selected_Features2]\nlabel_train = train['Label']\nfeatures_test = test[Selected_Features2]\nlabel_test = test['Label']","f189f38a":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier()\n\nclf.fit(features_train,label_train)\n\npred_train = clf.predict(features_train)\npred_test = clf.predict(features_test)\n\nfrom sklearn.metrics import accuracy_score\naccuracy_train = accuracy_score(pred_train,label_train)\naccuracy_test = accuracy_score(pred_test,label_test)\n\n\nprint(\"{:.2f}\".format(accuracy_train),\"{:.2f}\".format(accuracy_test))","b58fd82a":"<a id='visualisation'><\/a>\n# Visualisation","357f1053":"#### This below will take about 30 seconds depending upon how fast the machine is","8b399d7b":"## Running the algorithm using seleted features that emerged through the feature selection methods above","ebf37456":"### Further attributes that might help\n- 'wet_trays_in_first_wet_order' presuming that the number of wet trays ordered will determine how many are ordered subsequently and when. and that this could be a variable for one\/more classification\n- some derived variable from 'orders since first wet order varialble' at the top","e59996f2":"### Data Preparation: Aggregated transactional data table","716be6cc":"### Attribute : 'Ratio of wet and dry calories in an order'\n- To examine how the ratio\/mix of wet and dry food drives the wet food orders\n- This attribute may be used in one-order\/more-orders classification. will be more appropriate there\n","f9191441":"- The dataset contains 11168 unique customers and 13087 unique pets\n- Average number of web sessiosis approx 8 with the average amount of time spent before last order being around 90 minutes\n- Most common pet_food_tier in the dataset is superpremium\n- pet_signup_datetime is set an an arbitrary demo number not indicative of the actual datetime\n- There are 136 brands pre-tails in the dataset. Harrightons gets the most mention\n- Most pets are at mature stage","32dc2092":"## Data Labelling of final dataframes prior to modelling \n### (above data labelling was for the visual_df, the dataframe used for visualisations)\n- Create 2 tables: \n- (1) pet orders table no-wet-food-orders\/at-least-one-wet-food-order\n- (2) pet orders table one-wet-food-order\/multiple-wet_food_orders","3fcdada2":"- of the 49 thousand transactions almost 39 thousand have no last_customer_support_ticket_date\n- when aggregated against each pet, of the 13087 unique pets the mean of comm_gap is absent for 10178\n- Suggest we still use a marker for whether there was some communication because there is at least customer_suppot_ticket data on 3000 pets which is like 25% of the pets","025243da":"<a id='dataprepmodel'><\/a>\n# MODELLING\n## Prepare Data before Implementing Feature Selection Methods\n- We aggregated transactional\/numerical data for each pet into numbers_df earlier and catetegorical data of pets in category_df\n- We will now dummify categorical data in category_df, then aggregate that for each pet\n- Then we will merge the categorical and numerical data","bbfe39cc":"<a id='featureselectionmethods'><\/a>\n# Feature Selection Methods","2f9a45f3":"# feature importances for second classification","07ea617d":"- We can skip customer_id column since, except the derived variable 'number_of_pets_in_house', there is no customer specific information\/variable that could explain whether a customer buys wet food or not. All the profile variables and even order dates and web session relate to pets \n- We can skip customer_id column therefore and aggregate transactional data around pet_id and conduct analysis around pet_id. We will include this column 'number_of_pets_in_house' as it relates to pets as well. It can be an explanatory variable indicating the nature of in-house pet company each pet has","5605e1d3":"### Merge the two tables (agrregated transactional data and dummified profile\/categorical data)","5061245f":"## checking for multicollinearity uisng variance inflation factor (time permitting)","dbf368c8":"<a id='exploration'><\/a>\n## Basic exploration of data","b8774d48":"## pearson correlation","50365ba1":"### Some correlation analysis below which can sometimes be used for feature selection as well","4c76aed9":"## Balancing labelled data (time permitting)","c450d1c3":"# Decision tree classifier","a4654d37":"# Get Pet profile data","f34d9498":"<a id='datalabel'><\/a>\n# Data Labelling\n- We will create two label columns in visual_df: one column depicting whether a pet has ever placed a wet food order, and the other column depicting three different categories (no wet order, 1 wet order, multiple wet orders)","ff383cdc":"- Keeping all data because we are not doing classification model yet. only getting feature importances","f2162d28":"## Random Forest","29a05484":"# Pet Food Customer Orders Data Insights\n\n* [Basic exploration of data](#exploration)\n* [Attribute construction](#attributecon)\n* [Data preparation](#dataprep)\n* [Data labelling](#datalabel)\n* [Visualisation](#visualisation)\n\n## Modelling\n* [Prepare Data before Implementing Feature Selection Methods](#dataprepmodel)\n* [Feature selection methods](#featureselectionmethods)\n* [Models](#models)\n* [Models for 1order\/ 1+orders classification](#secondmodel)\n\n\n","b64e5e5a":"<a id='models'><\/a>\n# Models","c8264cb1":"#### Attribute: 'number_of_pets_in_house' \n- since some customers have multiple pets","3be7bddf":"# Models for 1order\/1+orders classification","83b648b4":"### Attribute 'communication_gap' (time between last_customer_support_ticket_date and the order_payment_date)\n- With the assumption that a communication gap may impact the freqency or other nature of orders placed","1e9eb0ec":"- Dataset contains order details of customers and profile data of their pets \n- There are 49042 transactions in the dataset covering the 15 month period from 2018-12-30 to 2020-03-30\n- Data is available on approx 36 transactional and profile features ","04b23e5b":"# feature importances","7c789c6f":"# Logistic Regression","de011e51":"### Features that emarge after the above feature selection methods\n- 'wet_food_discount_percent_mean','pet_order_number_max','wet_dry_cal_ratio_mean','total_minutes_on_website_since_last_order_mean',\n                      'kibble_kcal_mean','communication_max','days_before_closing_max'","30990d11":"#### Some insights from above data manipulation\n\n- Wet order number 1 appears 4181 times in the dataset. Effectively means that 4181 pets have ordered wet food at least once (customers ordering for their pets)\n- Wet order number 2 appears 3035 times in dataset. Effectively means that 3035 have made a follow on second order for wet food\n- Of the 49042 transactions, approx 33 thousand concern pets who have active subscription\n- Of the 49042 transactions, approx 31 thousand concern pets who did not eat wet food prior to Tails\n- Of the 49042 transactions, approx 28 thousand concern pets who come under food tier 'superpremium'\n- Most popular wet food texture is 'gravy jelly pate'\n- In terms of tray size, 150g has a slight edge over 300g in terms of number of orders","6d019041":"#### Lets us now include variables that make sense (non categorical first) - variables that can be explanatory i.e. variables that can possibely explain whether a customer\/pet would try wet food and also among those who do, explain variance in the number and nature of wet food orders","8f9f5d18":"- Of the 49 thousand transactions approximately 9 thousand had a precedent of customer communication\n- (SEE BELOW Interpretation: on average there is an average gap of 162 days from the time company communicates proactively with client till the time client orders\n- call_back, product, website are good 'categories' of communication in terms of leading to an order from the client\n- communication on things like promotion, blend, yodel, packaging does not seem to elicit a quick response in terms of materializing into an order","761eaf67":"### Doing classification with limited feature columns now","d679ab08":"<a id='dataprep'><\/a>\n# Data Preparation","920dab18":"## Scaling of columns like kibble_kcal and days_before_closing_max (time permitting)","e191b8ff":"## Important Features: \n\nThese below seem to be the important features\n\n- Random Forest (Ate Wet Food Pre Tails, Kibble_kcal, Days before closing, Total minutes on website since last order, Pet order number)\n- SelectKbest (Kibble_kcal, Total minutes on website since last order, Ate Wet Food Pre Tails, Pet Life Stage at Order, Breed Size)","10d0ed26":"### Attribute ''days_before_closing' \n- This attribute will give day difference between order_payment_date and last order date in the dataset.\n- This variable can play anchor for use cases where we need something like a cut-off date (e.g. churn analysis in non-subscription scenarios)\n- An attribute that gives customer tenure would have been more helpful but for that we need an accurate customer sign-up date which is not available\n- Hopefully 'days_before_closing' would be a good substitute to 'tenure' and will be helpful in modelling","081292de":"#### We can fill missing values of wet_food_discount_percent_mean and wet_food_order_number_max with 0 without affecting anything because those are the appropriate values for missing values of these two variables. The imputing is fulfilled below. ","74390623":"<a id='secondmodel'><\/a>\n# Model for 1order\/1+orders classification","8b29fca1":"<a id='attributecon'><\/a>\n# Further Feature Extraction \/ Attribute construction"}}