{"cell_type":{"06649a9f":"code","9dd3551d":"code","90ff8d86":"code","838ef366":"code","2e4c3952":"code","e6ffa324":"code","41c89dc2":"code","7f94f034":"code","64720b2a":"code","bf662363":"code","61942d64":"code","7e76b1e9":"code","69febb49":"code","8d13cf68":"code","39d72780":"code","1511ef95":"code","02a72bcd":"code","830784a4":"markdown","767f4f56":"markdown","ef96a27c":"markdown","2654544c":"markdown","753fdcdb":"markdown","7cc62cd5":"markdown","938cc7e7":"markdown","b1a7f79c":"markdown","eca04c61":"markdown","294516fb":"markdown","860aa7ac":"markdown","016a1c9f":"markdown","584144eb":"markdown","9bc8c422":"markdown","ad46ed86":"markdown","559b59c2":"markdown"},"source":{"06649a9f":"!pip install plot_metric\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport missingno\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\n# import the usual stuff\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\n# import TPOT and sklearn stuff\nfrom tpot import TPOTClassifier\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\nimport sklearn.metrics\n\n%matplotlib inline","9dd3551d":"df= pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')","90ff8d86":"df.shape","838ef366":"df.head()","2e4c3952":"missingno.matrix(df,sparkline=False, figsize=(10,5), fontsize=12);","e6ffa324":"df.info()","41c89dc2":"fig = make_subplots(rows=4, cols=4)\n\nfig.add_trace(go.Box(\n    y=df.age,\n    name=\"Age of the patient\",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        color='rgb(8,81,156)',\n        outliercolor='rgba(219, 64, 82, 0.6)',\n        line=dict(\n            outliercolor='rgba(219, 64, 82, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(8,81,156)'\n), row = 1, col = 1)\n\nfig.add_trace(go.Box(\n    y=df.sex,\n    name=\"Sex of the patient\",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        color='rgb(8,81,156)',\n        outliercolor='rgba(219, 64, 82, 0.6)',\n        line=dict(\n            outliercolor='rgba(219, 64, 82, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(8,81,156)'\n), row = 1, col = 2)\n\nfig.add_trace(go.Box(\n    y=df.cp,\n    name=\"Chest Pain type\",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        color='rgb(8,81,156)',\n        outliercolor='rgba(219, 64, 82, 0.6)',\n        line=dict(\n            outliercolor='rgba(219, 64, 82, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(8,81,156)'\n), row = 1, col = 3)\n\nfig.add_trace(go.Box(\n    y=df.trtbps,\n    name=\"Resting blood pressure\",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        color='rgb(8,81,156)',\n        outliercolor='rgba(219, 64, 82, 0.6)',\n        line=dict(\n            outliercolor='rgba(219, 64, 82, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(8,81,156)'\n), row = 1, col = 4)\n\n\nfig.add_trace(go.Box(\n    y=df.chol,\n    name=\"Cholestoral in mg\/dl\",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        color='rgb(8,81,156)',\n        outliercolor='rgba(219, 64, 82, 0.6)',\n        line=dict(\n            outliercolor='rgba(219, 64, 82, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(8,81,156)'\n), row = 2, col = 1)\n\nfig.add_trace(go.Box(\n    y=df.fbs,\n    name=\"Fasting blood sugar\",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        color='rgb(8,81,156)',\n        outliercolor='rgba(219, 64, 82, 0.6)',\n        line=dict(\n            outliercolor='rgba(219, 64, 82, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(8,81,156)'\n), row = 2, col = 2)\n\nfig.add_trace(go.Box(\n    y=df.restecg,\n    name=\"Resting electrocardiographic\",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        color='rgb(8,81,156)',\n        outliercolor='rgba(219, 64, 82, 0.6)',\n        line=dict(\n            outliercolor='rgba(219, 64, 82, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(8,81,156)'\n), row = 2, col = 3)\n\nfig.add_trace(go.Box(\n    y=df.thalachh,\n    name=\"Max heart rate\",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        color='rgb(8,81,156)',\n        outliercolor='rgba(219, 64, 82, 0.6)',\n        line=dict(\n            outliercolor='rgba(219, 64, 82, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(8,81,156)'\n), row = 2, col = 4)\n\nfig.add_trace(go.Box(\n    y=df.exng,\n    name=\"Exercise induced angina\",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        color='rgb(8,81,156)',\n        outliercolor='rgba(219, 64, 82, 0.6)',\n        line=dict(\n            outliercolor='rgba(219, 64, 82, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(8,81,156)'\n), row = 3, col = 1)\n\nfig.add_trace(go.Box(\n    y=df.oldpeak,\n    name=\"ST depression\",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        color='rgb(8,81,156)',\n        outliercolor='rgba(219, 64, 82, 0.6)',\n        line=dict(\n            outliercolor='rgba(219, 64, 82, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(8,81,156)'\n), row = 3, col = 2)\n\nfig.add_trace(go.Box(\n    y=df.slp,\n    name=\"Slope of the peak\",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        color='rgb(8,81,156)',\n        outliercolor='rgba(219, 64, 82, 0.6)',\n        line=dict(\n            outliercolor='rgba(219, 64, 82, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(8,81,156)'\n), row = 3, col = 3)\n\nfig.add_trace(go.Box(\n    y=df.caa,\n    name=\"No of major vessels \",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        color='rgb(8,81,156)',\n        outliercolor='rgba(219, 64, 82, 0.6)',\n        line=dict(\n            outliercolor='rgba(219, 64, 82, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(8,81,156)'\n), row = 3, col = 4)\n\nfig.add_trace(go.Box(\n    y=df.thall,\n    name=\"Thal Rate\",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        color='rgb(8,81,156)',\n        outliercolor='rgba(219, 64, 82, 0.6)',\n        line=dict(\n            outliercolor='rgba(219, 64, 82, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(8,81,156)'\n), row = 4, col = 1)\n\nfig.add_trace(go.Box(\n    y=df.output,\n    name=\"Chance of heart attack\",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        color='rgb(8,81,156)',\n        outliercolor='rgba(219, 64, 82, 0.6)',\n        line=dict(\n            outliercolor='rgba(219, 64, 82, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(8,81,156)'\n), row = 4, col = 2)\n\nfig.update_layout(height=1200, width=1200, title_text=\"Boxplots of all the columns\")\nfig.show()","7f94f034":"%%time\n\ntarget = df.output\ndata = df.drop('output', axis = 1)\n\n# create train and test sets\nX_train, X_test, y_train, y_test = train_test_split(data, target, train_size=0.75, test_size=0.25, random_state=34)\n\nscores = []\n_pipes = []\n\ntpot = TPOTClassifier(verbosity=3, \n                      scoring='accuracy', \n                      random_state=23, \n                      periodic_checkpoint_folder=\"tpot.txt\", \n                      n_jobs=-1, \n                      generations=10, \n                      population_size=30)\n\n# run three iterations and time them\nfor x in range(3):\n\n    tpot.fit(X_train, y_train)\n    _pipes.append(tpot.fitted_pipeline_)\n    scores.append(tpot.score(X_test, y_test))\n    tpot.export('tpot_pipeline.py')\n\nprint('Scores:', scores)   \nprint('Best pipelines:', _pipes)","64720b2a":"print(scores)","bf662363":"import plotly.graph_objects as go\n\ncolors = ['skyblue',] * 3\n\nfig = go.Figure(data=[go.Bar(\n    x=list(range(len(scores))),\n    y=scores,\n    marker_color=colors # marker color can be a single color value or an iterable\n)])\nfig.update_layout(title_text='Recall scores of the Models', width = 500, height = 500)","61942d64":"print(tpot.export())","7e76b1e9":"import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.feature_selection import RFE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.pipeline import make_pipeline, make_union\nfrom sklearn.preprocessing import StandardScaler\nfrom tpot.builtins import StackingEstimator\nfrom tpot.export_utils import set_param_recursive\n\n\nmodel = make_pipeline(\n    StackingEstimator(estimator=ExtraTreesClassifier(bootstrap=True, criterion=\"gini\", max_features=0.2, min_samples_leaf=1, min_samples_split=10, n_estimators=100)),\n    StackingEstimator(estimator=BernoulliNB(alpha=1.0, fit_prior=False)),\n    RFE(estimator=ExtraTreesClassifier(criterion=\"gini\", max_features=0.15000000000000002, n_estimators=100), step=0.1),\n    StandardScaler(),\n    ExtraTreesClassifier(bootstrap=True, criterion=\"gini\", max_features=0.6000000000000001, min_samples_leaf=6, min_samples_split=18, n_estimators=100)\n)\n# Fix random state for all the steps in exported pipeline\nset_param_recursive(model.steps, 'random_state', 23)\n\nmodel.fit(X_train, y_train)","69febb49":"from sklearn.tree import plot_tree\nfrom sklearn.metrics import recall_score, accuracy_score, classification_report, confusion_matrix, f1_score, precision_score\n\npred=model.predict(X_test)\ntrain_pred = model.predict(X_train)\n\nprint(\"Accuracy score of the test set: {}\".format(accuracy_score(y_test, pred)))\nprint(\"Accuracy score of the train set: {}\".format(accuracy_score(y_train, train_pred)))","8d13cf68":"model = make_pipeline(\n \n    RFE(estimator=ExtraTreesClassifier(criterion=\"gini\", max_features=0.15000000000000002, n_estimators=100), step=0.1),\n    StandardScaler(),\n    ExtraTreesClassifier(bootstrap=True, criterion=\"gini\", max_features=0.6000000000000001, min_samples_leaf=6, min_samples_split=18, n_estimators=100)\n)\n# Fix random state for all the steps in exported pipeline\nset_param_recursive(model.steps, 'random_state', 23)\n\nmodel.fit(X_train, y_train)","39d72780":"from sklearn.tree import plot_tree\nfrom sklearn.metrics import recall_score, accuracy_score, classification_report, confusion_matrix, f1_score, precision_score\n\npred=model.predict(X_test)\ntrain_pred = model.predict(X_train)\n\nprint(\"Macro Avg F1 score of the test set: {}\".format(f1_score(y_test, pred, average='macro')))\nprint(\"Macro Avg F1 score of the train set: {}\".format(f1_score(y_train, train_pred, average='macro')))\nprint('.')\nprint(\"Macro Avg Precision score of the test set: {}\".format(precision_score(y_test, pred, average=\"macro\")))\nprint(\"Macro Avg Precision score of the train set: {}\".format(precision_score(y_train, train_pred, average=\"macro\")))\nprint('.')\nprint(\"Macro Avg Recall score of the test set: {}\".format(recall_score(y_test, pred, average=\"macro\")))\nprint(\"Macro Avg Recall score of the train set: {}\".format(recall_score(y_train, train_pred, average=\"macro\")))\nprint('.')\nprint(\"Accuracy score of the test set: {}\".format(accuracy_score(y_test, pred)))\nprint(\"Accuracy score of the train set: {}\".format(accuracy_score(y_train, train_pred)))","1511ef95":"from pandas import DataFrame\nfrom plot_metric.functions import BinaryClassification\n\n# Use predict_proba to predict probability of the class\ny_pred = model.predict_proba(X_test)[:,1]\n\n# Visualisation with plot_metric\nbc = BinaryClassification(y_test, y_pred, labels=[\"Class 1\", \"Class 2\"])\n\n# Figures\nfrom matplotlib import rcParams\nrcParams['figure.figsize'] = 8, 6\nbc.plot_roc_curve()\nplt.show()\nbc.plot_precision_recall_curve()\nplt.show()\nbc.plot_class_distribution()\nplt.show()\nbc.plot_confusion_matrix()\nplt.show()\nbc.plot_confusion_matrix(normalize=True)\nplt.show()","02a72bcd":"bc.print_report()","830784a4":"## Score from the TPOT Stacked Models","767f4f56":"### Let's try the following and see if that helps us get rid of over-fitting--","ef96a27c":"<img src= \"https:\/\/raw.githubusercontent.com\/EpistasisLab\/tpot\/master\/images\/tpot-logo.jpg\" alt =\"Titanic\" style='width: 200px;'>","2654544c":"## Dataset","753fdcdb":"**Note: The total number of pipelines is equal to POPULATION_SIZE + GENERATIONS x OFFSPRING_SIZE.**","7cc62cd5":"## Binary Classification using TPOT Optimized Model","938cc7e7":"### We will not take care of the outliers in this version. That will come soon--stay tuned!","b1a7f79c":"<img src= \"https:\/\/i.pinimg.com\/originals\/67\/fb\/22\/67fb22aa0142b62effc23870f80cf39d.jpg\" alt =\"Titanic\" style='width: 250px;'>","eca04c61":"#### Looks much, much better!","294516fb":"## Little bit of EDA","860aa7ac":"### Lemme know what you think about this one!","016a1c9f":"## About this dataset\n\n**Age : Age of the patient****\n\n**Sex : Sex of the patient****\n\n**exang: exercise induced angina (1 = yes; 0 = no)****\n\n**ca: number of major vessels (0-3)****\n\n**cp : Chest Pain type chest pain type****\n\n    * Value 1: typical angina\n    * Value 2: atypical angina\n    * Value 3: non-anginal pain\n    * Value 4: asymptomatic\n\n**trtbps : resting blood pressure (in mm Hg)****\n\n**chol : cholestoral in mg\/dl fetched via BMI sensor****\n\n**fbs : (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)****\n\n**rest_ecg : resting electrocardiographic results****\n\n    * Value 0: normal\n    * Value 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\n    * Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria\n\n**thalach : maximum heart rate achieved**\n\n**target : 0= less chance of heart attack 1= more chance of heart attack**","584144eb":"## Hightlights!\n\n**1. Classification metric visualization using plot_metric**\n\n**2. TPOT's stacking estimator**","9bc8c422":"# Model Creation with [TPOT](http:\/\/epistasislab.github.io\/tpot\/)","ad46ed86":"## Creating the Stacking Architecture from the Pipeline","559b59c2":"## Missing Values"}}