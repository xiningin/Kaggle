{"cell_type":{"f5efe6eb":"code","bb16f89b":"code","5a1a2cdd":"code","60174466":"code","252cb1eb":"code","29fe084e":"code","76a50e1f":"code","04e6162d":"code","1fcdb88f":"code","31f3bd2d":"code","990901a5":"code","867842a1":"code","576caa8c":"code","3ad91c61":"code","11c496a2":"code","9239da60":"code","48b65175":"code","b5cf8faf":"code","8ba8b22b":"code","868836c1":"code","1f6ed8f2":"code","5cb3c55f":"code","d1f975cb":"code","21b28131":"code","09fe9022":"code","9939b4e5":"code","9a4b20d5":"code","f03136f3":"code","d83122be":"code","dc98825d":"code","b2a65fd4":"code","0d967d67":"code","bb19a95c":"code","58612197":"code","15c2cc3e":"code","c6313f97":"code","d6fde13a":"code","5fe6608c":"code","4b2f2088":"code","46a44431":"markdown","d7550a8f":"markdown","4c5b236c":"markdown","177fd874":"markdown","0d58b0a7":"markdown","41c82b82":"markdown","67b679ca":"markdown","73a187ad":"markdown"},"source":{"f5efe6eb":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","bb16f89b":"df = pd.read_csv('..\/input\/city-development-index-cdi-and-components\/City Development Index.csv')\ndf.head()","5a1a2cdd":"df.info()","60174466":"df.dropna(axis=1, inplace=True)\ndf=df.iloc[:,1:]","252cb1eb":"df.describe().T","29fe084e":"df.head()","76a50e1f":"df.corr().sort_values('CDI')","04e6162d":"plt.figure(figsize=[10,5])\nsns.heatmap(df.corr(),annot=True);","1fcdb88f":"plt.figure(figsize=[7,7])\ndf.Region.value_counts().plot(kind='pie', autopct='%.f%%');","31f3bd2d":"plt.figure(figsize=[12,5])\ndf.boxplot();","990901a5":"sns.pairplot(df);","867842a1":"plt.figure(figsize=[16,12])\npnum=1\nfor i in df.columns:\n    if pnum>=4:\n        plt.subplot(3,3,pnum)\n        sns.scatterplot(x=df[i],y='CDI',data=df)\n        plt.xticks(size=12)\n        plt.ylabel('CDI',fontsize=12)\n        plt.title('Explanation of CDI by other variables', size=14)\n    pnum+=1\n    plt.tight_layout()","576caa8c":"plt.figure(figsize=[16,12])\npnum=1\nfor i in df.columns:\n    if pnum>=4:\n        plt.subplot(3,3,pnum)\n        sns.barplot(x='Region',y=i,data=df)\n        plt.xticks(rotation=45,size=12)\n        plt.ylabel(i,fontsize=12)\n        plt.title('Values by Region',size=14)\n    pnum+=1\n    plt.tight_layout()","3ad91c61":"plt.figure(figsize=[16,12])\npnum=1\nfor i in df.columns:\n    if pnum>=4:\n        plt.subplot(3,3,pnum)\n        sns.boxplot(x='Region',y=i,data=df)\n        plt.xticks(rotation=45,size=12)\n        plt.ylabel(i,fontsize=12)\n        plt.title('Distribution of Values by Regions' ,size=14)\n    pnum+=1\n    plt.tight_layout()","11c496a2":"plt.figure(figsize=[16,12])\npnum=1\nfor i in df.columns:\n    if pnum>=4:\n        plt.subplot(3,3,pnum)\n        df.groupby('Country')[i].mean().sort_values(ascending=False)[:10].plot(kind='bar');        \n        plt.xticks(rotation=45,size=10)\n        plt.ylabel(i,fontsize=12)\n        plt.title('Countries with the highest values' ,size=14)\n    pnum+=1\n    plt.tight_layout()","9239da60":"plt.figure(figsize=[16,12])\npnum=1\nfor i in df.columns:\n    if pnum>=4:\n        plt.subplot(3,3,pnum)\n        df.groupby('Country')[i].mean().sort_values(ascending=False)[-10:].plot(kind='bar');        \n        plt.xticks(rotation=45,size=10)\n        plt.ylabel(i,fontsize=12)\n        plt.title('Countries with the lowest values' ,size=14)\n    pnum+=1\n    plt.tight_layout()","48b65175":"plt.figure(figsize=[16,12])\npnum=1\nfor i in df.columns:\n    if pnum>=4:\n        plt.subplot(3,3,pnum)\n        df.groupby('City')[i].mean().sort_values(ascending=False)[:10].plot(kind='bar');        \n        plt.xticks(rotation=45,size=10)\n        plt.ylabel(i,fontsize=12)\n        plt.title('Cities with the highest values' ,size=14)\n    pnum+=1\n    plt.tight_layout()","b5cf8faf":"plt.figure(figsize=[16,12])\npnum=1\nfor i in df.columns:\n    if pnum>=4:\n        plt.subplot(3,3,pnum)\n        df.groupby('City')[i].mean().sort_values(ascending=False)[-10:].plot(kind='bar');        \n        plt.xticks(rotation=45,size=10)\n        plt.ylabel(i,fontsize=12)\n        plt.title('Cities with the lowest values' ,size=14)\n    pnum+=1\n    plt.tight_layout()","8ba8b22b":"df=df._get_numeric_data()","868836c1":"X=df.drop('CDI', axis=1)\ny=df['CDI']","1f6ed8f2":"!pip install xgboost","5cb3c55f":"!pip install lightgbm","d1f975cb":"!pip install catboost","21b28131":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import model_selection\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn import neighbors\nfrom sklearn.svm import SVR","09fe9022":"RMSE = []\nModelName = []\n\ndef ML(Algorithm):\n    X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)\n    model = Algorithm().fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n    RMSE.append(rmse)\n    ModelName.append(Algorithm.__name__)\n    print(Algorithm.__name__,'RMSE score:',rmse)","9939b4e5":"models=[LinearRegression,\n         MLPRegressor,\n         DecisionTreeRegressor,\n         KNeighborsRegressor,\n         RandomForestRegressor,\n         GradientBoostingRegressor,\n         XGBRegressor,\n         LGBMRegressor,\n         CatBoostRegressor,\n         SVR]","9a4b20d5":"for i in models:\n    ML(i)","f03136f3":"ModelName","d83122be":"RMSE","dc98825d":"model_visual=pd.DataFrame({'ModelName':ModelName,'RMSE':RMSE})","b2a65fd4":"plt.figure(figsize=[10,5])\nsns.barplot(x='RMSE',y='ModelName',data=model_visual.sort_values('RMSE'));","0d967d67":"df=df._get_numeric_data()","bb19a95c":"X=df.drop('CDI', axis=1)\ny=df['CDI']","58612197":"sc = StandardScaler()\nX = sc.fit_transform(X)\nX = pd.DataFrame(X, columns=['City Product','Infrastructure','Waste','Health','Education'])\nX.head()","15c2cc3e":"RMSE = []\nModelName = []\n\ndef ML(Algorithm):\n    X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)\n    model = Algorithm().fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n    RMSE.append(rmse)\n    ModelName.append(Algorithm.__name__)\n    print(Algorithm.__name__,'RMSE score:',rmse)","c6313f97":"for i in models:\n    ML(i)","d6fde13a":"RMSE","5fe6608c":"model_visual=pd.DataFrame({'ModelName':ModelName,'RMSE':RMSE})","4b2f2088":"plt.figure(figsize=[10,5])\nsns.barplot(x='RMSE',y='ModelName',data=model_visual.sort_values('RMSE'));","46a44431":"### Values by Regions","d7550a8f":"## Data Visualization","4c5b236c":"### Ranking of Countries","177fd874":"### Ranking of Cities","0d58b0a7":"# City Development Index","41c82b82":"## Model Selection","67b679ca":"## Data Importing","73a187ad":"## Normalising the Data"}}