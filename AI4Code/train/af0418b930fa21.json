{"cell_type":{"76fabade":"code","96d312b5":"code","ef1c9d07":"code","1c9e1b07":"code","243d9073":"code","e9a41bf1":"code","aeb64312":"code","49b461cb":"code","26f079bf":"code","d602f78a":"code","0908a010":"code","8f58821c":"code","569ba141":"code","f065b156":"code","62edfe21":"code","816d6360":"code","4410de89":"code","02191744":"code","59d957de":"code","8473ca68":"code","e2f839de":"code","5dfb8a94":"code","9bb3ef15":"code","a4d0a906":"code","bcbb0e04":"markdown","1a50ede5":"markdown","aa6e50d0":"markdown","d52e78ec":"markdown","8a27b8c7":"markdown"},"source":{"76fabade":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n #   for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n# Clear any logs from previous runs\n!rm -rf .\/logs\/ \n!mkdir .\/logs\/\n\n","96d312b5":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nuser_credential = user_secrets.get_gcloud_credential()\nuser_secrets.set_tensorflow_credential(user_credential)","ef1c9d07":"!cp ..\/input\/legobrickimages\/Brick_List.csv \/kaggle\/working\/","1c9e1b07":"import math, re, os\nimport tensorflow as tf\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D,MaxPooling2D,Dense,Flatten,Dropout\nfrom keras.layers.normalization import BatchNormalization\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\nprint(\"Tensorflow version \" + tf.__version__)\nAUTO = tf.data.experimental.AUTOTUNE\ntf.test.gpu_device_name()","243d9073":"try: # detect TPUs\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver() # TPU detection\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n    print(\"TPU\")\nexcept ValueError: # no TPU found, detect GPUs\n    strategy = tf.distribute.MirroredStrategy() # for GPU or multi-GPU machines\n    #strategy = tf.distribute.get_strategy() # default strategy that works on CPU and single GPU\n    #strategy = tf.distribute.experimental.MultiWorkerMirroredStrategy() # for clusters of multi-GPU machines\n\nprint(\"Number of accelerators: \", strategy.num_replicas_in_sync)","e9a41bf1":"!ls \/kaggle\/input\/ \nGCS_DS_PATH = KaggleDatasets().get_gcs_path(\"6000-lego-bricks-tfrec\") # you can list the bucket with \"!gsutil ls $GCS_DS_PATH\"\n!gsutil ls $GCS_DS_PATH\n","aeb64312":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n#IMAGE_SIZE = [512, 512] # At this size, a GPU will run out of memory. Use the TPU.\nIMAGE_SIZE = [224, 224] # For GPU training, please select 224 x 224 px image size.\n\nBATCH_SIZE = 512 * strategy.num_replicas_in_sync\n\nGCS_PATH = '\/kaggle\/input\/build-lego-dataset'\n\nGCS_PATH = GCS_DS_PATH \n\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/tfrec\/kaggle\/working\/training\/*.tfrec')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/tfrec\/kaggle\/working\/valid\/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_DS_PATH + '\/tfrec\/kaggle\/working\/test\/*.tfrec') # predictions on this dataset should be submitted for the competition\n\n\ndataset_path =  GCS_PATH+'\/Brick_List.csv'\ndf = pd.read_csv(dataset_path, skipinitialspace=True, skip_blank_lines=True,encoding='utf-8', index_col='PART ID')\n\nprint(dataset_path)\nBricks =  [( str(f)) for f in df.index]\n\nprint (Bricks[0])\n\n\n\nprint(len(Bricks))\n!ls","49b461cb":"# numpy and matplotlib defaults\nnp.set_printoptions(threshold=15, linewidth=80)\n\ndef batch_to_numpy_images_and_labels(data):\n    images, labels = data\n    numpy_images = images.numpy()\n    numpy_labels = labels.numpy()\n    \n    # If no labels, only image IDs, return None for labels (this is the case for test data)\n    return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n    if correct_label is None:\n        return Bricks[label], True\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(Bricks[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n                                Bricks[correct_label] if not correct else ''), correct\n\ndef display_one_brick(image, title, subplot, red=False, titlesize=16):\n    plt.subplot(*subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    if len(title) > 0:\n        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize\/1.2), color='red' if red else 'black', fontdict={'verticalalignment':'center'}, pad=int(titlesize\/1.5))\n    return (subplot[0], subplot[1], subplot[2]+1)\n    \ndef display_batch_of_images(databatch, predictions=None):\n    \"\"\"This will work with:\n    display_batch_of_images(images)\n    display_batch_of_images(images, predictions)\n    display_batch_of_images((images, labels))\n    display_batch_of_images((images, labels), predictions)\n    \"\"\"\n    # data\n    images, labels = batch_to_numpy_images_and_labels(databatch)\n    if labels is None:\n        labels = [None for _ in enumerate(images)]\n        \n    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n    rows = int(math.sqrt(len(images)))\n    cols = len(images)\/\/rows\n        \n    # size and spacing\n    FIGSIZE = 13.0\n    SPACING = 0.1\n    subplot=(rows,cols,1)\n    if rows < cols:\n        plt.figure(figsize=(FIGSIZE,FIGSIZE\/cols*rows))\n    else:\n        plt.figure(figsize=(FIGSIZE\/rows*cols,FIGSIZE))\n    \n    # display\n    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        title  =str(Bricks[label])\n        correct = True\n        if predictions is not None:\n            title, correct = title_from_label_and_target(predictions[i], label)\n        dynamic_titlesize = FIGSIZE*SPACING\/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n        subplot = display_one_brick(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n    \n    #layout\n    plt.tight_layout()\n    if label is None and predictions is None:\n        plt.subplots_adjust(wspace=0, hspace=0)\n    else:\n        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n    plt.show()\n\ndef display_confusion_matrix(cmat, score, precision, recall):\n    plt.figure(figsize=(15,15))\n    ax = plt.gca()\n    ax.matshow(cmat, cmap='Reds')\n    ax.set_xticks(range(len(Bricks)))\n    ax.set_xticklabels(Bricks, fontdict={'fontsize': 7})\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n    ax.set_yticks(range(len(Bricks)))\n    ax.set_yticklabels(Bricks, fontdict={'fontsize': 7})\n    plt.setp(ax.get_yticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n    titlestring = \"\"\n    if score is not None:\n        titlestring += 'f1 = {:.3f} '.format(score)\n    if precision is not None:\n        titlestring += '\\nprecision = {:.3f} '.format(precision)\n    if recall is not None:\n        titlestring += '\\nrecall = {:.3f} '.format(recall)\n    if len(titlestring) > 0:\n        ax.text(101, 1, titlestring, fontdict={'fontsize': 18, 'horizontalalignment':'right', 'verticalalignment':'top', 'color':'#804040'})\n    plt.show()\n    \ndef display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","26f079bf":"def to_float32(image, label):\n    return tf.cast(image, tf.float32), label\n\ndef decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    #image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE,3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(parse):\n    LABELED_TFREC_FORMAT = {\n    'label': tf.io.FixedLenFeature([], tf.int64),\n    'image_raw': tf.io.FixedLenFeature([], tf.string),\n}\n  \n    parse = tf.io.parse_single_example(parse, LABELED_TFREC_FORMAT)\n    image = decode_image(parse['image_raw'])\n    label = tf.cast(parse['label'], tf.int32)\n    return image, label  \n\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n    #print(filenames)\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef data_augment(image, label):\n    # data augmentation. Thanks to the dataset.prefetch(AUTO) statement in the next function (below),\n    # this happens essentially for free on TPU. Data pipeline code is executed on the \"CPU\" part\n    # of the TPU while the TPU itself is computing gradients.\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    image = tf.image.random_saturation(image, 0, 2)\n    image = tf.image.random_brightness(image, 0.4)\n    #image = tf.image.random_contrast(image,1, 1.5)\n    #image = tf.image.random_hue(image, 0.01)\n    ##image = tf.image.random_jpeg_quality(image, 90 , 100)\n\n    return image, label   \n\ndef get_training_dataset():\n    BUFFLE_SIZE=311852\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(buffer_size=BUFFLE_SIZE, reshuffle_each_iteration=True)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    \n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    #dataset = dataset.shuffle(BUFFLE_SIZE)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    #dataset = dataset.shuffle(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\nRATIO = 1\n\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nBUFFLE_SIZE = int(RATIO* NUM_TRAINING_IMAGES)\nprint('Dataset: {} training images, {} validation images, {} unlabeled test images {} Buffle Size'.format(NUM_TRAINING_IMAGES, NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES,BUFFLE_SIZE))","d602f78a":"training_dataset = get_training_dataset()\ntraining_dataset = training_dataset.unbatch().batch(10)\ntrain_batch = iter(training_dataset)\n\nlabels_list =[]\ni=NUM_TRAINING_IMAGES\ndf = pd.DataFrame(labels_list, columns=['Labels'])\n","0908a010":"# Peek at training data\n\ntraining_dataset = get_training_dataset()\nBUFFLE_SIZE=311852\ntraining_dataset = training_dataset.unbatch().batch(20)\ntrain_batch = iter(training_dataset)","8f58821c":"# run this cell again for next set of images\ndisplay_batch_of_images(next(train_batch))","569ba141":"# run this cell again for next set of images\nvalidation_dataset = get_validation_dataset()\nvalidation_dataset = validation_dataset.unbatch().batch(20)\nvalidation_batch = iter(validation_dataset)\ndisplay_batch_of_images(next(validation_batch))","f065b156":"dataset  = get_training_dataset()\nprint(\"Type dataset{} with dtype {}\".format(type(dataset), dataset))\nrows=4\ncols = 4\ntf.print(dataset)\nfor images, labels in dataset.take(1):\n     #image_jpeg = images\n     #print(\"Type {} with dtype {}\".format(type(image_jpeg), image_jpeg.dtype))\n     #print(\"Sample: {}\".format(image_jpeg.numpy()[:25]))\n     for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        image_jpeg = image\n\n        print(\"Type {} with dtype {}\".format(type(image_jpeg), image_jpeg.dtype))\n        print(\"Sample: {}\".format(image_jpeg.numpy()[:25]))\n        plt.imshow(image)\n        avg = np.average(image)\n        title =\"Label {} Avg {}\".format(label,avg)\n        plt.title(title)\n        plt.show()","62edfe21":"with strategy.scope():\n    #img_adjust_layer = tf.keras.layers.Lambda(tf.keras.applications.xception.preprocess_input, input_shape=[*IMAGE_SIZE, 3])\n    #pretrained_model = tf.keras.applications.Xception(weights='imagenet', include_top=False)\n    \n    img_adjust_layer = tf.keras.layers.Lambda(tf.keras.applications.vgg16.preprocess_input, input_shape=[*IMAGE_SIZE, 3])\n    #pretrained_model = tf.keras.applications.EfficientNetB0(weights=\"imagenet\", include_top=False)\n    pretrained_model = tf.keras.applications.VGG16(weights=\"imagenet\", include_top=False)\n    pretrained_model.trainable = False # False = transfer learning, True = fine-tuning\n    \n    model = tf.keras.Sequential([\n        img_adjust_layer,\n        pretrained_model,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        #tf.keras.layers.Dropout(rate=0.2),\n        tf.keras.layers.Dense(len(Bricks), activation='softmax')\n    ])\nopt = keras.optimizers.Adam(learning_rate=1e-4)       \nmodel.compile(\n    optimizer=opt,\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)\nmodel.summary()","816d6360":"def plot_hist(hist):\n    plt.plot(hist.history[\"sparse_categorical_accuracy\"])\n    plt.plot(hist.history[\"val_sparse_categorical_accuracy\"])\n    plt.title(\"model accuracy\")\n    plt.ylabel(\"accuracy\")\n    plt.xlabel(\"epoch\")\n    plt.legend([\"train\", \"validation\"], loc=\"upper left\")\n    plt.show()","4410de89":"# TPUs need images in float format\nEPOCHS = 10\ntraining_dataset = get_training_dataset().map(to_float32)\nvalidation_dataset = get_validation_dataset().map(to_float32)\n\nhistory = model.fit(training_dataset, steps_per_epoch=STEPS_PER_EPOCH, epochs=EPOCHS, validation_data=validation_dataset,)","02191744":"plot_hist(history)","59d957de":"display_training_curves(history.history['loss'], history.history['val_loss'], 'loss', 211)\ndisplay_training_curves(history.history['sparse_categorical_accuracy'], history.history['val_sparse_categorical_accuracy'], 'accuracy', 212)","8473ca68":"model.save_weights('.\/tpu_model.h5', overwrite=True)\n","e2f839de":"cmdataset = get_validation_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and labels, order matters.\ncmdataset = cmdataset.map(to_float32)\nimages_ds = cmdataset.map(lambda image, label: image)\nlabels_ds = cmdataset.map(lambda image, label: label).unbatch()\ncm_correct_labels = next(iter(labels_ds.batch(NUM_VALIDATION_IMAGES))).numpy() # get everything as one batch\ncm_probabilities = model.predict(images_ds)\ncm_predictions = np.argmax(cm_probabilities, axis=-1)\nprint(\"Correct   labels: \", cm_correct_labels.shape, cm_correct_labels)\nprint(\"Predicted labels: \", cm_predictions.shape, cm_predictions)","5dfb8a94":"cmat = confusion_matrix(cm_correct_labels, cm_predictions, labels=range(len(Bricks)))\nscore = f1_score(cm_correct_labels, cm_predictions, labels=range(len(Bricks)), average='macro')\nprecision = precision_score(cm_correct_labels, cm_predictions, labels=range(len(Bricks)), average='macro')\nrecall = recall_score(cm_correct_labels, cm_predictions, labels=range(len(Bricks)), average='macro')\ncmat = (cmat.T \/ cmat.sum(axis=1)).T # normalized\ndisplay_confusion_matrix(cmat, score, precision, recall)\nprint('f1 score: {:.3f}, precision: {:.3f}, recall: {:.3f}'.format(score, precision, recall))","9bb3ef15":"#dataset = get_test_dataset()\ndataset = get_validation_dataset()\ndataset = dataset.unbatch().batch(20)\nbatch = iter(dataset)","a4d0a906":"images, labels = next(batch)\nprobabilities = model.predict(tf.cast(images, tf.float32))\npredictions = np.argmax(probabilities, axis=-1)\ndisplay_batch_of_images((images, labels), predictions)","bcbb0e04":"from tensorflow.keras.applications import EfficientNetB0\nwith strategy.scope():\n    model = build_model(num_classes=len(Bricks))\nmodel.summary()","1a50ede5":"from tensorflow.keras import layers\ndef unfreeze_model(model):\n    # We unfreeze the top 20 layers while leaving BatchNorm layers frozen\n    for layer in model.layers:\n        if not isinstance(layer, layers.BatchNormalization):\n            layer.trainable = True\n\n    opt = keras.optimizers.Adam(learning_rate=1e-4)\n    model.compile(\n    optimizer=opt,\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy'])\n   \n    \nSTEPS_PER_EPOCH = STEPS_PER_EPOCH \/\/ 16\ntraining_dataset = get_training_dataset().map(to_float32)\nvalidation_dataset = get_validation_dataset().map(to_float32)\nunfreeze_model(model)\nmodel.summary()\nepochs = 10  # @param {type: \"slider\", min:8, max:50}\ntraining_dataset = get_training_dataset().map(to_float32)\nvalidation_dataset = get_validation_dataset().map(to_float32)\nhistory = model.fit(training_dataset, \n                    steps_per_epoch=STEPS_PER_EPOCH, \n                    epochs=epochs, \n                    validation_data=validation_dataset,)\n                   \n\nplot_hist(history)","aa6e50d0":"\n\n\ndef build_model(num_classes):\n    inputs = layers.Input(shape=(IMAGE_SIZE[0], IMAGE_SIZE[1], 3))\n    x = img_augmentation(inputs)\n    model = EfficientNetB0(include_top=False, input_tensor=x, weights=\"imagenet\")\n\n    # Freeze the pretrained weights\n    model.trainable = False\n\n    # Rebuild top\n    x = layers.GlobalAveragePooling2D(name=\"avg_pool\")(model.output)\n    x = layers.BatchNormalization()(x)\n\n    top_dropout_rate = 0.2\n    x = layers.Dropout(top_dropout_rate, name=\"top_dropout\")(x)\n    outputs = layers.Dense(num_classes, activation=\"softmax\", name=\"pred\")(x)\n\n    # Compile\n    model = tf.keras.Model(inputs, outputs, name=\"EfficientNet\")\n    optimizer = tf.keras.optimizers.Adam(learning_rate=1e-2)\n    model.compile(\n        optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"]\n    )\n    return model","d52e78ec":"from tensorflow.keras.layers.experimental import preprocessing\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras import layers\n\nimg_augmentation = Sequential(\n    [\n        preprocessing.RandomRotation(factor=0.15),\n        preprocessing.RandomTranslation(height_factor=0.1, width_factor=0.1),\n        preprocessing.RandomFlip(),\n        preprocessing.RandomContrast(factor=0.1),\n    ],\n    name=\"img_augmentation\",\n)","8a27b8c7":"model.save_weights('.\/lego_model_fine.h5', overwrite=True)"}}