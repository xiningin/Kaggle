{"cell_type":{"960edc08":"code","5e512bbf":"code","323a1653":"code","add00b49":"code","8edb2dce":"code","0a05ce6f":"code","3fccd248":"code","7018f61c":"code","81eb3f01":"markdown","24a6ff5c":"markdown","8a8845b2":"markdown","8d517770":"markdown","53d807c5":"markdown","37648e8f":"markdown","fbf0f914":"markdown","4d16c1a5":"markdown"},"source":{"960edc08":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom PIL import Image\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout\n\ndata = []\nlabels = []\nsize = (30,30)\nclasses = 43\nfor i in range(classes):\n    path = \"..\/input\/gtsrb-german-traffic-sign\/Train\/\" +str(i)\n    images = os.listdir(path)\n    for a in images:\n        try:\n            image = Image.open(path + '\/'+ a)\n            image = image.resize(size)\n            image = np.array(image) \/255.0\n            data.append(image)\n            labels.append(i)\n        except:\n            print(\"Error loading image\")","5e512bbf":"data = np.array(data)\nlabels = np.array(labels)","323a1653":"X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.1, random_state=42)\ny_train = to_categorical(y_train, 43)\ny_test = to_categorical(y_test, 43)","add00b49":"model = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(5,5), activation='relu', input_shape=X_train.shape[1:]))\nmodel.add(Conv2D(filters=32, kernel_size=(5,5), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(rate=0.25))\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(rate=0.25))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(rate=0.5))\nmodel.add(Dense(43, activation='softmax'))\n\n#Compilation of the model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","8edb2dce":"epochs = 15\nhistory = model.fit(X_train, y_train, batch_size=32, epochs=epochs, validation_data=(X_test, y_test))","0a05ce6f":"plt.figure(0)\nplt.plot(history.history['accuracy'], label='training accuracy')\nplt.plot(history.history['val_accuracy'], label='val accuracy')\nplt.title('Accuracy')\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.legend()\nplt.show()\n\nplt.figure(1)\nplt.plot(history.history['loss'], label='training loss')\nplt.plot(history.history['val_loss'], label='val loss')\nplt.title('Loss')\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.legend()\nplt.show()","3fccd248":"from sklearn.metrics import accuracy_score\ny_test = pd.read_csv('\/kaggle\/input\/gtsrb-german-traffic-sign\/Test.csv')\nlabels = y_test[\"ClassId\"].values\nimgs = y_test[\"Path\"].values\n\ndata=[]\nfor img in imgs:\n    image = Image.open('\/kaggle\/input\/gtsrb-german-traffic-sign\/'+img)\n    image = image.resize((30,30))\n    data.append(np.array(image))\nX_test=np.array(data)\npred = model.predict_classes(X_test)\n#Accuracy with the test data\nfrom sklearn.metrics import accuracy_score\nprint(accuracy_score(labels, pred))","7018f61c":"model.save(\"traffic_classifier.h5\")","81eb3f01":"Plotting the graph for accuracy and the loss","24a6ff5c":"  **To have a fully self-driving car, it is necessary for vehicules to understand and follow traffic signs.**","8a8845b2":"In a test.csv file, we have the details related to the image path and their respective class labels. we extract images ane their labels and do the same prepocessing as before","8d517770":"# This project classify traffic signs present in an image.","53d807c5":"**building and compiling the model + training**","37648e8f":"convert the list into numpy to feed to the model.\nthe shape of our data now is (39209, 30, 30, 3)","fbf0f914":"We **iterate** over all the classes, **open** image content into an **array** with The PIL library . and append **resized** images and their respective labels in the data and labels list","4d16c1a5":"we split data to training and validation"}}