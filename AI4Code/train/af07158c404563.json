{"cell_type":{"b630bf87":"code","65a271bc":"code","ce789ab0":"code","c73b4db5":"code","9c489961":"code","653d193a":"code","238413f1":"code","31fcba28":"code","45024fbe":"code","9b66d0da":"code","c82a7912":"code","fd51e7f5":"code","70739c40":"code","d9926c58":"code","ef8c8812":"code","3a40d79c":"code","ff57455d":"code","8e64e0b6":"code","a43ffff8":"code","38d7f47c":"code","4fa26e46":"code","a3537ff4":"code","2ecaecb1":"code","a6fa8f8e":"code","c483d8e3":"code","4f595a11":"code","d2a68fd8":"code","e891cf4c":"code","9bd29561":"code","d25e0ca4":"code","f108c502":"code","e5925868":"code","c6872cd6":"code","16acd523":"code","6a88bce9":"code","83193296":"code","3f5b6e19":"code","742d56fb":"code","aed14a6e":"code","6c224612":"code","1614b712":"code","ce05031b":"code","4b3d12ad":"code","f02cc043":"code","70d5f3b9":"code","8846fde9":"code","b2e5a80d":"code","60e84866":"code","c3816f19":"code","0531c953":"code","2a9295ad":"code","2396092d":"code","82d3e221":"markdown","7762226e":"markdown","e370d8b9":"markdown","5a85702a":"markdown","d2827c9e":"markdown","6715d9b8":"markdown","511ca34e":"markdown","ffa01dee":"markdown","eeb00c17":"markdown","ecc4d900":"markdown","a69366fd":"markdown","ff2db73e":"markdown","15e446c0":"markdown","6bb22369":"markdown","2b53361a":"markdown","580a2a61":"markdown","93f67ca3":"markdown","503968bc":"markdown","2ba32772":"markdown","0217b1ed":"markdown","22736ba0":"markdown","8d926102":"markdown","b5a902b4":"markdown","09d2ce9f":"markdown","7058eaed":"markdown"},"source":{"b630bf87":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"white\")\nimport warnings\nwarnings.filterwarnings(\"ignore\")","65a271bc":"df = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","ce789ab0":"df.head()","c73b4db5":"df.shape","9c489961":"df.columns","653d193a":"df.dtypes","238413f1":"df.describe","31fcba28":"df['TotalCharges']","45024fbe":"df.isnull().sum().sum()","9b66d0da":"sns.countplot(df.Churn);\nprint ('Churn Percentages are\\n',df.Churn.value_counts() \/ df.Churn.count())","c82a7912":"sns.countplot(x='gender', hue='Churn', data=df);","fd51e7f5":"plt.figure(figsize=(8,6))\n\nsns.kdeplot(df[df['gender'] == 'Male'][\"tenure\"], color='red', shade=True)\nsns.kdeplot(df[df['gender'] == 'Female'][\"tenure\"], color='blue', shade=True) \n\nplt.title('Tenure VS Gender', fontsize=15)\nplt.legend([\"Not Churn\",\"Churn\"],loc='upper right');\nplt.xlim([10,100])\nplt.show()","70739c40":"plt.figure(figsize=(8,6))\n\nsns.kdeplot(df[df['gender'] == 'Male'][\"MonthlyCharges\"], color='red', shade=True)\nsns.kdeplot(df[df['gender'] == 'Female'][\"MonthlyCharges\"], color='blue', shade=True) \n\nplt.title('Tenure VS Gender', fontsize=15)\nplt.legend([\"Not Churn\",\"Churn\"],loc='upper right');\nplt.xlim([10,100])\nplt.show()","d9926c58":"plt.figure(figsize=(8,6))\nsizes = df.SeniorCitizen.value_counts()\nlabels = [\"No\", \"Yes\"]\nexplode = (0, 0.1,)\n\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.show() ","ef8c8812":"sns.countplot(x='SeniorCitizen', hue='Churn', data=df);","3a40d79c":"sns.countplot(x='Partner', hue='Churn', data=df);","ff57455d":"plt.figure(figsize=(12,5))\nsns.histplot(x='tenure', hue='Churn', data=df, bins=50)","8e64e0b6":"plt.figure(figsize=(8, 6))\nsns.kdeplot(x='tenure', hue='Churn', data=df, shade=True);","a43ffff8":"plt.figure(figsize=(8,6))\nsns.boxplot(x='tenure', y='Churn',data=df);","38d7f47c":"plt.figure(figsize=(20,42))\n\nplt.subplot(6, 3, 1)\nsizes = df.PhoneService.value_counts()\nlabels = [\"Yes\", \"No\"]\nplt.pie(sizes, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Phone Service', loc='left')\n\nplt.subplot(6, 3, 2)\nsizes = df.MultipleLines.value_counts()\nlabels = [\"No\", \"Yes\", 'No Phone Service']\nplt.pie(sizes, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Multiple Lines', loc='left')\n\nplt.subplot(6, 3, 3)\nsizes = df.InternetService.value_counts()\nlabels = [\"Fiber optic\", \"DSL\", 'No']\nplt.pie(sizes, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Internet Service', loc='left')\n\nplt.subplot(6, 3, 4)\nsizes = df.OnlineSecurity.value_counts()\nlabels = [\"No\", \"Yes\", 'No Internet Service']\nplt.pie(sizes, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Online Security', loc='left')\n\nplt.subplot(6, 3, 5)\nsizes = df.OnlineBackup.value_counts()\nlabels = [\"No\", \"Yes\", 'No Internet Service']\nplt.pie(sizes, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Online Backup', loc='left')\n\nplt.subplot(6, 3, 6)\nsizes = df.DeviceProtection.value_counts()\nlabels = [\"No\", \"Yes\", 'No Internet Service']\nplt.pie(sizes, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Device Protection', loc='left')\n\nplt.subplot(6, 3, 7)\nsizes = df.TechSupport.value_counts()\nlabels = [\"No\", \"Yes\", 'No Internet Service']\nplt.pie(sizes, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Tech Support', loc='left')\n\nplt.subplot(6, 3, 8)\nsizes = df.StreamingTV.value_counts()\nlabels = [\"No\", \"Yes\", 'No Internet Service']\nplt.pie(sizes, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Streaming TV', loc='left')\n\nplt.subplot(6, 3, 9)\nsizes = df.StreamingMovies.value_counts()\nlabels = [\"No\", \"Yes\", 'No Internet Service']\nplt.pie(sizes, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Streaming Movies', loc='left')\n\nplt.subplot(6, 3, 10)\nsizes = df.Contract.value_counts()\nlabels = [\"Month-to-month\", \"Two year\", 'One year']\nplt.pie(sizes, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Contract', loc='left')\n\nplt.subplot(6, 3, 11)\nsizes = df.PaperlessBilling.value_counts()\nlabels = [\"Yes\", \"No\"]\nplt.pie(sizes, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Paperless Billing', loc='left')\n\nplt.subplot(6, 3, 12)\nsizes = df.PaymentMethod.value_counts()\nlabels = [\"Electronic check \", \"Mailed check \", 'Bank transfer (automatic)', 'Credit card (automatic)']\nplt.pie(sizes, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Payment Method', loc='left');","4fa26e46":"columns = {'PhoneService':1, 'MultipleLines':2, 'InternetService':3, 'OnlineSecurity':4, 'OnlineBackup':5, 'DeviceProtection':6,\n          'TechSupport':7, 'StreamingTV':8, 'StreamingMovies':9, 'Contract':10, 'PaperlessBilling':11, 'PaymentMethod':12}","a3537ff4":"plt.figure(figsize=(20, 42))\n\nfor key, value in columns.items():\n    plt.subplot(6, 3, value)\n    sns.countplot(x=key, hue='Churn', data=df)","2ecaecb1":"plt.figure(figsize=(8, 6))\nsns.kdeplot(df[df['Churn'] == 'Yes'][\"MonthlyCharges\"], color='red', shade=True)\nsns.kdeplot(df[df['Churn'] == 'No'][\"MonthlyCharges\"], color='blue', shade=True)\nplt.legend([\"Not Churn\",\"Churn\"],loc='upper right');","a6fa8f8e":"df.TotalCharges.dtype","c483d8e3":"df.TotalCharges = pd.to_numeric(df.TotalCharges, errors='coerce')","4f595a11":"plt.figure(figsize=(8, 6))\nsns.kdeplot(df[df['Churn'] == 'Yes'][\"TotalCharges\"], color='red', shade=True)\nsns.kdeplot(df[df['Churn'] == 'No'][\"TotalCharges\"], color='blue', shade=True)\nplt.legend([\"Not Churn\",\"Churn\"],loc='upper right');","d2a68fd8":"plt.figure(figsize=(8, 6))\nsns.scatterplot(x='MonthlyCharges', y='TotalCharges',hue='Churn', data=df);","e891cf4c":"plt.figure(figsize=(20, 42))\n\nfor key, value in columns.items():\n    plt.subplot(6, 3, value)\n    sns.boxplot(x=key, y='MonthlyCharges',hue='Churn', data=df);","9bd29561":"df.drop('customerID', axis=1, inplace=True)\ndf['Churn'].replace(to_replace ='Yes', value=1, inplace=True)\ndf['Churn'].replace(to_replace = 'No', value=0, inplace=True)\ndf = pd.get_dummies(df)","d25e0ca4":"df.head()","f108c502":"df.shape","e5925868":"df.isnull().sum().sum()","c6872cd6":"df = df.dropna()","16acd523":"df.isnull().sum().sum()","6a88bce9":"plt.figure(figsize=(10,13))\ndf.corr()['Churn'].sort_values(ascending = False).plot(kind='barh')","83193296":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, roc_auc_score, ConfusionMatrixDisplay, precision_score, recall_score, f1_score, classification_report, roc_curve, plot_roc_curve, auc, precision_recall_curve, plot_precision_recall_curve, average_precision_score\nfrom sklearn.model_selection import cross_val_score","3f5b6e19":"X = df.drop(columns = ['Churn'])\ny = df['Churn'].values","742d56fb":"y","aed14a6e":"Scaler = StandardScaler()\nX = Scaler.fit_transform(X)","6c224612":"X","1614b712":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","ce05031b":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","4b3d12ad":"def apply_model(model1):\n    model = model1\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    score = cross_val_score(model, X_train, y_train, cv = 6)\n    precision = precision_score(y_test, y_pred)\n    roc = roc_auc_score(y_test, y_pred)\n    recall = recall_score(y_test, y_pred)\n    cm = confusion_matrix(y_test, y_pred)\n    \n    print ('Train score of '+str(model1)[:-2]+' is', score.mean(),'%')\n    print ('--')\n    print ('Precision score is ', precision)\n    print ('--')\n    print ('ROC Score is', roc)\n    print ('--')\n    print ('Recall Score is ', recall)\n    print ('--')\n    print ('Confusion Matrix\\n\\n', cm)","f02cc043":"apply_model(LogisticRegression())","70d5f3b9":"apply_model(SVC())","8846fde9":"apply_model(KNeighborsClassifier())","b2e5a80d":"apply_model(RandomForestClassifier())","60e84866":"apply_model(AdaBoostClassifier())","c3816f19":"from sklearn.model_selection import GridSearchCV","0531c953":"log_reg_params = {\"penalty\": ['l1', 'l2'], 'C': [0.001, 0.01, 0.025,0.05, 0.055, 0.07, 0.08],\n                  'solver' : ['newton-cg', 'lbfgs', 'liblinear']}\ngrid_log_reg = GridSearchCV(LogisticRegression(), log_reg_params, scoring = 'accuracy',cv = 6)\ngrid_log_reg.fit(X_train, y_train)\ny_pred = grid_log_reg.predict(X_test)\nbest_score = grid_log_reg.best_score_\nbest_params = grid_log_reg.best_params_\nprecision = precision_score(y_test, y_pred)\nroc = roc_auc_score(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)\ncm = confusion_matrix(y_test, y_pred)\n\nprint ('Best Score is',best_score * 100)\nprint ('--')\nprint ('Best Parameters is', best_params)\nprint ('--')\nprint ('ROC Score is', roc)\nprint ('--')\nprint ('Recall Score is ', recall)\nprint ('--')\nprint ('Confusion Matrix\\n\\n', cm)","2a9295ad":"y_pred_prob = grid_log_reg.predict_proba(X_test)[:,1]\n\n# instantiating the roc_cruve\nfpr,tpr,threshols=roc_curve(y_test,y_pred_prob)\n\n# plotting the curve\nplt.figure(figsize = (8, 8))\nplt.plot([0,1],[0,1],\"k--\",'r+')\nfigsize=(16,12)\nplt.plot(fpr,tpr,color = '#b01717', label = 'AUC = %0.3f' % roc)\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\" Logistic Regression ROC Curve\")\nplt.legend()\nplt.show()","2396092d":"plt.figure(figsize = (8, 5))\nsns.heatmap(cm, cmap = 'Oranges', annot = True, fmt = 'd', linewidths = 5, cbar = False, annot_kws = {'fontsize': 15}, \n            yticklabels = ['No Churn', 'Churn'], xticklabels = ['Predicted No Churn', 'Predicted Churn'])\nplt.yticks(rotation = 0)\nplt.show()","82d3e221":"# Explatory Data Analysis","7762226e":"### 4- Random Forest","e370d8b9":"### 3- KNeighbors","5a85702a":"**Churn** is a measurement of the percentage of accounts that cancel or choose not to renew their subscriptions. A high churn rate can negatively impact Monthly Recurring Revenue (MRR) and can also indicate dissatisfaction with a product or service.\n\nChurn is the measure of how many customers stop using a product. This can be measured based on actual usage or failure to renew (when the product is sold using a subscription model). Often evaluated for a specific period of time, there can be a monthly, quarterly, or annual churn rate.\n\nWhen new customers begin buying and\/or using a product, each new user contributes to a product\u2019s growth rate. Inevitably some of those customers will eventually discontinue their usage or cancel their subscription; either because they switched to a competitor or alternative solution, no longer need to product\u2019s functions, they\u2019re unhappy with their user experience, or they can no longer afford or justify the cost. The customers that stop using\/paying are the \u201cchurn\u201d for a given period of time.","d2827c9e":"**Please Consider Upvoting if you find this kernal useful**","6715d9b8":"### 5- Ada Boost ","511ca34e":"### 2- Support Vector Machine","ffa01dee":"ok Logistic Regression gave me the highest accuracy, let's tune it with hyper-paramters and see if we will get higher accuracy","eeb00c17":"### 1- Logistic Regression","ecc4d900":"We can tell that customers with higher tenure are less in Churn","a69366fd":"### Correlation between features","ff2db73e":"**customerID**: Customer ID\n<br>\n**gender**: gender (female, male)\n<br>\n**SeniorCitizen**: Whether the customer is a senior citizen or not (1, 0)\n<br>\n**PartnerWhether**: the customer has a partner or not (Yes, No)\n<br>\n**Dependents**: Whether the customer has dependents or not (Yes, No)\n<br>\n**tenure**: Number of months the customer has stayed with the company\n<br>\n**PhoneService**: Whether the customer has a phone service or not (Yes, No)\n<br>\n**MultipleLines**: Whether the customer has multiple lines or not (Yes, No, No phone service)\n<br>\n**InternetService**: Customer\u2019s internet service provider (DSL, Fiber optic, No)\n<br>\n**OnlineSecurity**: Whether the customer has online security or not (Yes, No, No internet service)\n<br>\n**OnlineBackup**: Whether the customer has online backup or not (Yes, No, No internet service)\n<br>\n**DeviceProtection**: Whether the customer has device protection or not (Yes, No, No internet service)\n<br>\n**TechSupport**: Whether the customer has tech support or not (Yes, No, No internet service)\n<br>\n**StreamingTV**: Whether the customer has streaming TV or not (Yes, No, No internet service)\n<br>\n**StreamingMovies**: Whether the customer has streaming movies or not (Yes, No, No internet service)\n<br>\n**Contract**: The contract term of the customer (Month-to-month, One year, Two year)\n<br>\n**PaperlessBilling**: Whether the customer has paperless billing or not (Yes, No)\n<br>\n**PaymentMethod**: The customer\u2019s payment method (Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic))\n<br>\n**MonthlyCharges**: The amount charged to the customer monthly\n<br>\n**TotalCharges**: The total amount charged to the customer\n<br>\n**Churn**: Whether the customer churned or not (Yes or No)","15e446c0":"The total percentage of chrun isn't much but we will explore it more ","6bb22369":"**Please Consider Upvoting if you find this kernal useful**","2b53361a":"I will use **GridSearchCV** to find the best hyperparameters\n<br>\nSo what is it ?\n<br>\ncv: number of cross-validation you have to try for each selected set of hyperparameters. verbose: you can set it to 1 to get the detailed print out while you fit the data to GridSearchCV\nin the end, you can select the best parameters from the listed hyperparameters","580a2a61":"I changed the values of Chrun values of churn manually so We can plot the coreelation plot as if we let it with dummies we will have 2 columns of churn","93f67ca3":"Great no null values","503968bc":"\nNormalization is a technique often applied as part of data preparation for machine learning. The goal of normalization is to change the values of numeric columns in the dataset to use a common scale, without distorting differences in the ranges of values or losing information, the output will range from 0 to 1","2ba32772":"We can confirm that higher charges leads to churn","0217b1ed":"## So what is Churn ?","22736ba0":"It seems that total charges is an abject type, We need to change it to mueric before we plot it ","8d926102":"### What columns Do we have ?","b5a902b4":"### Scaling The Data","09d2ce9f":"## Hyperparameters Tuning","7058eaed":"# Mahine Learning Models"}}