{"cell_type":{"dd53c11e":"code","3533090d":"code","705b06ef":"code","335c6474":"code","3e622fa0":"code","8d4f325d":"code","93fee2cf":"code","62286e6b":"code","4f1b209e":"code","68b89e00":"code","eff999cd":"code","7988e115":"code","508e7c44":"code","9e779685":"code","c66af2ff":"code","9c176690":"code","a5d3fee1":"code","3cc50ba8":"code","e006a4fd":"code","3a10a90d":"code","2e06ab0d":"code","b082a954":"code","9e3c0b57":"code","296653ec":"code","a8a66e06":"markdown","c086874e":"markdown","4425365d":"markdown","e179f068":"markdown","1d62b7d6":"markdown","be5fa4eb":"markdown","66dc3773":"markdown","4126b9f8":"markdown","b938f838":"markdown","43e4b607":"markdown","1e7cc33c":"markdown","5342f7ad":"markdown","077eddd6":"markdown","ba83e55e":"markdown","c7fdf25e":"markdown","fa79a1ae":"markdown","a3d7d8df":"markdown","ba1e8ca4":"markdown"},"source":{"dd53c11e":"# Importing libraries\n\nimport numpy as np\nfrom numpy import array\n\nimport pandas as pd\nimport ta # for technical analysis\n#import pandas_ta\n\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error","3533090d":"import warnings\n\nwarnings.filterwarnings(\"ignore\")","705b06ef":"# Importing data for the desired cryptocurrency\n\n#List of cryptocurrency options in the dataset\ncrypto_opt = ['Aave', 'Algorand', 'Avalanche', 'Axie_Infinity', 'Binance_Coin', 'Binance_USD', \n              'BitTorrent', 'Bitcoin', 'Bitcoin_BEP2', 'Bitcoin_Cash', 'Bitcoin_SV', 'Cardano', 'Chainlink', \n              'Cosmos', 'Crypto.com_Coin', 'Dai', 'Dash', 'Dogecoin', 'EOS', 'Elrond', 'Ethereum', \n              'Ethereum_Classic', 'FTX_Token', 'Filecoin', 'GRT', 'ICP', 'IOTA', 'Klaytn', 'Kusama', 'LEO', \n              'Litecoin', 'Maker', 'Monero', 'Neo', 'PancakeSwap', 'Polkadot', 'Polygon', 'SHIBA_INU', 'Solana', \n              'Stellar', 'THETA', 'Tether', 'Tezos', 'Tron', 'USD_Coin', 'Uniswap', 'VeChain', 'WBTC', 'Waves', \n              'XPR', 'All_combined']\n\n# Desired cryptocurrency\ncc = 'Ethereum' # or cc = crypto_opt[i]\n\n# Reading corresponding file from dataset\ndf = pd.read_csv('TOP_50_Cryptocurrencies\/' + cc + '.csv', index_col = ['SNo'])\n\n#url = 'https:\/\/www.kaggle.com\/odins0n\/top-50-cryptocurrency-historical-prices?select=' + cc + '.csv'\n#df = pd.read_csv(url, index_col =['SNo'])\n\ndf.sample(15)","335c6474":"# Dataframe dimensions\n\ndf.info()","3e622fa0":"# Making sure all data is sorted by date\n\ndf.Date = pd.to_datetime(df['Date'])\ndf = df.sort_values(by=\"Date\")\ndf.set_index(pd.DatetimeIndex(df['Date']), inplace = True)\ndf.drop('Date', axis='columns', inplace = True)","8d4f325d":"# Plotting candlestick chart with trading volume and moving average indicator\n\ndf.loc[df['Change %'] >= 0, 'Color'] = 'green' # adding 'Color' column for trading volume plotting\ndf.loc[df['Change %'] < 0, 'Color'] = 'red'\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]]) # secondary y-axis for trading volume chart\n\nfig.add_trace(go.Candlestick(x = df.index,\n                             open = df['Open'],\n                             high = df['High'],\n                             low = df['Low'],\n                             close = df['Price'],\n                             name = 'Price'))\n\nfig.add_trace(go.Scatter(x = df.index, \n                         y = df['Price'].rolling(window = 14).mean(),\n                         marker_color = 'blue',\n                         name = '14 Day MA')) # 14 day moving average indicator\n\nfig.add_trace(go.Bar(x = df.index,\n                     y = df['Vol.'],\n                     name = 'Volume',\n                     marker = {'color': df['Color']}, \n                     opacity=0.2), secondary_y = True)\n\nfig.update_yaxes(visible = False, secondary_y = True)\nfig.update_layout(xaxis_rangeslider_visible = False)  # hiding range slider\nfig.update_layout(title = {'text': 'Historical Price of ' + cc, 'x': 0.5})\nfig.update_layout(yaxis_title = 'Price in USD')\n\nfig.show()","93fee2cf":"# Plotting candlestick chart alone\n\nfig = go.Figure(data = go.Candlestick(x = df.index,\n                                     open = df['Open'],\n                                     high = df['High'],\n                                     low = df['Low'],\n                                     close = df['Price'],\n                                     name = 'Price'))\n\nfig.update_layout(title = {'text': 'Historical Price of ' + cc, 'x': 0.5})\nfig.update_layout(yaxis_title = 'Price in USD')\n\nfig.show()","62286e6b":"# Keeping only the data that will be used for the model\n\ndf_ml = df[['Price']] # closing price\n\ndf_ml.head(10)","4f1b209e":"# Adding an exponential moving average (EMA) as a technical indicator to use as independent variable\n\ndf_ml['EMA_14'] = ta.trend.ema_indicator(close = df_ml['Price'], window = 14) # 14 day EMA\n\ndf_ml.head(15)","68b89e00":"# Eliminating rows with NaN values\n\ndf_ml = df_ml.dropna(axis=0)\n\ndf_ml.head(15)","eff999cd":"# Plotting both the closing price and the EMA\n\nfig = go.Figure(data=go.Scatter(x = df_ml.index, y = df_ml['Price'], name = 'Price'))\nfig.add_trace(go.Scatter(x=df_ml.index, y = df_ml['EMA_14'], name = 'EMA 14 days'))\n\nfig.show()","7988e115":"# Creating independent and dependent variables\n\nX = df_ml[['EMA_14']][:-1]\ny = df_ml[['Price']][1:]","508e7c44":"# Splitting the data into test and train sets\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 100)","9e779685":"# Training the model\n\nmodel = LinearRegression()\nmodel.fit(X_train,y_train)","c66af2ff":"# Making predictions\n\ny_pred = model.predict(X_test)","9c176690":"# Plotting the close price value prediction against the actual closing price\n\nplt.scatter(y_pred, y_test)\nplt.xlabel('Model Closing Price Prediction')\nplt.ylabel('True Closing Price')\nplt.plot([0, df_ml['Price'].max()], [0, df_ml['Price'].max()], 'k-', color = 'r')\nplt.show()","a5d3fee1":"# Printing relevant metrics\n\nprint(\"Model Coefficients:\", model.coef_)\nprint(\"Mean Absolute Error:\", mean_absolute_error(y_test, y_pred))\nprint(\"Coefficient of Determination:\", r2_score(y_test, y_pred))","3cc50ba8":"# Adding columns to dataframe for further analysis of the model\n\ndf_ml['Open'] = df['Open']\ndf_ml['Predicted_Price'] = model.predict(df_ml[['Price']])\n\ndf_ml","e006a4fd":"# If the opening price is lower than the predicted price, trading should occur in order to have capital gains\n\ndf_ml['Make_Trade'] = np.where(df_ml['Predicted_Price'] >= df_ml['Open'], True, False)\n\ndf_ml","3a10a90d":"# Adding capital gains column \n\ndf_ml['Gains_USD'] = np.where(df_ml['Make_Trade'] == True, df_ml['Price'] - df_ml['Open'], 0)\n\ndf_ml","2e06ab0d":"# Renaming and reorganizing columns for easier analysis\n\ndf_ml.rename(columns = {'Price': 'Close', 'Predicted_Price': 'Predicted_Close'}, inplace = True)\n\ndf_ml = df_ml[['EMA_14', 'Open', 'Predicted_Close', 'Close', 'Make_Trade', 'Gains_USD']]\n\ndf_ml.sample(20)","b082a954":"# Amount of money obtained from using the model to trade with the selected cryptocurrency\n\ntotal_gains = df_ml['Gains_USD'].sum()\n\nprint ('USD', total_gains)","9e3c0b57":"cc = 'All_combined'\n\ndf = pd.read_csv('TOP_50_Cryptocurrencies\/' + cc + '.csv')\ndf.Date = pd.to_datetime(df['Date'])\ndf = df.sort_values(by=\"Date\")\ndf.set_index(pd.DatetimeIndex(df['Date']), inplace = True)\ndf.drop('Date', axis='columns', inplace = True)\n\ndf.sample(20)","296653ec":"# Visualizing the fitting of every model and the gains generated by these\n\ndf_results = pd.DataFrame(columns = ['Cryptocurrency', 'Model_r2_Score', 'Total_Gains_USD'])\n\nfor cc in crypto_opt[:-1]:\n    df_ml = df[df.Currency_Name == cc]\n    df_ml['EMA_14'] = ta.trend.ema_indicator(close = df_ml['Price'], window = 14);\n    df_ml = df_ml.dropna(axis=0);\n    \n    X_train, X_test, y_train, y_test = train_test_split(df_ml[['EMA_14']][:-1], df_ml[['Price']][1:], \n                                                        test_size = 0.2, random_state = 100)\n    model = LinearRegression()\n    model.fit(X_train,y_train)\n    y_pred = model.predict(X_test)\n    \n    df_ml['Predicted_Price'] = model.predict(df_ml[['Price']])\n    df_ml['Make_Trade'] = np.where(df_ml['Predicted_Price'] >= df_ml['Open'], True, False)\n    df_ml['Gains_USD'] = np.where(df_ml['Make_Trade'] == True, df_ml['Price'] - df_ml['Open'], 0)\n\n    df_results = df_results.append({'Cryptocurrency': cc, 'Model_r2_Score': r2_score(y_test, y_pred), \n                       'Total_Gains_USD': df_ml['Gains_USD'].sum()}, ignore_index = True)\n\ndf_results.sort_values(['Total_Gains_USD'], ascending = False)","a8a66e06":"Adapted from https:\/\/www.alpharithms.com\/predicting-stock-prices-with-linear-regression-214618\/","c086874e":"No null values were found in the dataset.","4425365d":"The previous figure looked a little crowded, so the candlestick chart is plotted alone next for better visualization.","e179f068":"Extra: Another model for price time series forecasting using Deep Convolutional Networks could be later explored and later compare the use of ML and DL for the task at hand.\n\nhttps:\/\/www.analyticsvidhya.com\/blog\/2021\/08\/hands-on-stock-price-time-series-forecasting-using-deep-convolutional-networks\/","1d62b7d6":"More detailed info on candlestick charts at https:\/\/pythoninoffice.com\/draw-stock-chart-with-python\/ and https:\/\/plotly.com\/python\/candlestick-charts\/.","be5fa4eb":"Further analysis of the data for each cryptocurrency could give insight into why some models have a poor r2 score. This could be due, for example, to the amount of data used to train each model or to abrupt changes in the price of some of the currencies.","66dc3773":"The MAE is a little high but the coefficient of the correlation is close to 1, which suggests a good fit.","4126b9f8":"The dataset includes a csv file with the data of all the cryptocurrencies. This can be used to compare the total gains for each currency using a linear regression model.","b938f838":"Note: the 'Price' column refers to the closing price.","43e4b607":"# Cryptocurrency Price Time Series Forecasting: Using Machine Learning (Linear Regression) vs. Deep Learning (CNN)","1e7cc33c":"Technical analysis library documentation found at https:\/\/technical-analysis-library-in-python.readthedocs.io\/en\/latest\/ta.html?highlight=ema#ta.trend.EMAIndicator.ema_indicator.","5342f7ad":"As it can be seen, the model is not perfect. Sometimes it recommends trading when trading was not really favorable, which leads to loses, and other times it doesn't recommend trading when gains could have actually been made.\n\nHowever, if this model was used over the course of all the days included in the dataset, the data suggests that considerable profits could be generated depending on the cryptocurrency being traded.","077eddd6":"A similar graph was produced earlier using the pandas.DataFrame.rolling() method.","ba83e55e":"Crypto day trading is a high-risk strategy involving the frequent purchase and sale of cryptocurrencies in the pursuit of short-term profits. With the increasing popularity of Web3, a new iteration of the Internet that is based on public blockchains, more and more people are looking towards this market.\n\nIn this project, the power of AI is employed to help with smarter trading. The objective is to develop a model that can be used to predict a crypto's closing price based on its financial history in order to decide wether a transaction is recommended on any given day.\n\nA machine learning (ML) model will be used for this task with the help of data from the top 50 cryptocurrencies' historical prices obtained from https:\/\/www.kaggle.com\/odins0n\/top-50-cryptocurrency-historical-prices?select=Aave.csv","c7fdf25e":"Since the EMA of any given day is dependent on the closing price of that same day, in order to actually make a prediction for closing price values we would have to find the correlation between the closing price of a day (x) and the EMA of the previous day (x-1). \n\nFor this, the first closing price value is ignored, which displaces all the EMA values as needed. After this, the last EMA value is also ignored since it can't be paired with a closing price value.","fa79a1ae":"Adding a moving average solves the autocorrelation problem found when dealing with time series data, which is necessary to have an independent variable for the model.\n\nThe EMA places a greater weight and significance on the most recent data points, which is appropriate when dealing with crypto or stock prices.","a3d7d8df":"### Linear Regression Model","ba1e8ca4":"Although in reality there are many aspects that need to be considered before and when day trading crypto, the previous model shows how AI can be used to make smarter trading and reduce the risks of what is normally a volatile and uncertain market.\n\nMany more robust models have been or are being developed for stock and crypto trading, which have shaped the way trading is carried out today and how it will be in the future."}}