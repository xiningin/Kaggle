{"cell_type":{"7ad98b53":"code","48f1ef0c":"code","0c2d0390":"code","3279ed0b":"code","79b35247":"code","92c0ecab":"code","8e0dab4c":"code","17e6cd58":"code","d99a9464":"code","abdf1c7c":"code","86aa1312":"code","9101b971":"code","c47ac670":"code","d62db836":"code","8788c11b":"code","f415b2d6":"code","0dd75351":"code","9f5830ed":"code","b5efacd4":"code","5e90a736":"code","85ccf056":"code","37e20d7f":"code","ae8e7204":"code","3a813374":"code","95e7c962":"code","4d3f22e7":"code","6e3ad67f":"code","551c5ae9":"code","27f88024":"code","5a840fe1":"code","dcd07479":"code","c2ad658f":"code","635c4b65":"code","10e00c7b":"code","02e613a3":"code","fe2c64fd":"code","bbb433b0":"code","99344d60":"code","d3ce351a":"code","2d8f2ca7":"code","448a8471":"code","0bc7e558":"code","f8c74db2":"code","463a254d":"code","e078f0f2":"code","d72968a9":"markdown","632fc286":"markdown","bfa9fed7":"markdown","678472e4":"markdown","81e6ee9b":"markdown","f62a2c10":"markdown","fd10361e":"markdown","963acd40":"markdown","65c23dc3":"markdown","cdfe6dfa":"markdown","a5fbe762":"markdown"},"source":{"7ad98b53":"import re\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom imblearn.over_sampling import RandomOverSampler\nfrom scipy.cluster.vq import kmeans,vq\nfrom scipy.cluster.hierarchy import fcluster,linkage\nfrom scipy.stats.mstats import winsorize\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.manifold import TSNE\nfrom sklearn.metrics import *\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import LabelEncoder,StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier","48f1ef0c":"df=pd.read_csv('..\/input\/anomaly-detection\/Participants_Data_WH18\/Train.csv')\ndf_test=pd.read_csv('..\/input\/anomaly-detection\/Participants_Data_WH18\/Test.csv')\ndf_pred=pd.DataFrame()\ndf_both=pd.concat([df,df_test], ignore_index=True)\ndf_both","0c2d0390":"df.shape,df_test.shape,df_both.shape","3279ed0b":"df_both.info()","79b35247":"fig, axs =  plt.subplots(1,3,figsize = (16,7))\nfor i in range(3):\n    axs[i].set_title(f'feature {i+1}')\n    axs[i].boxplot(df_both[f'feature_{i+1}'])","92c0ecab":"for col in df_both.columns[:3]:\n    l=0.1 if col=='feature_2' else 0.05\n    df_both[col]=winsorize(df_both[col],limits=l)\ndf_both","8e0dab4c":"fig, axs =  plt.subplots(1,3,figsize = (16,7))\nfor i in range(3):\n    axs[i].set_title(f'feature {i+1}')\n    axs[i].boxplot(df_both[f'feature_{i+1}'])","17e6cd58":"df2=pd.DataFrame(StandardScaler().fit_transform(df_both.iloc[:,:3]),columns=df_both.columns[:3])\ndf_both=pd.concat([df2,df_both.iloc[:,3:]],axis=1)\ndf_both","d99a9464":"df=df_both[:df.shape[0]]\ndf","abdf1c7c":"df_test=df_both[df.shape[0]+1:].iloc[:,:-1].reset_index(drop=True)\ndf_test","86aa1312":"df.Class.value_counts()","9101b971":"def over_sample_train_test(x,y):\n    ros=RandomOverSampler(random_state=0)\n    ros.fit(x,y)\n    x_res,y_res=ros.fit_resample(x,y)\n    x_train,x_test,y_train,y_test=train_test_split(x_res,y_res,test_size=0.2,random_state = 1)\n    return x_train,x_test,y_train,y_test\n\nx=df.drop('Class',axis=1)\ny=df.Class\nx_train,x_test,y_train,y_test=over_sample_train_test(x,y)","c47ac670":"x_train.shape,x_test.shape,y_train.shape,y_test.shape","d62db836":"lr=LogisticRegression(solver='liblinear')    \nsvm=SVC(probability=True)\ndt=DecisionTreeClassifier(max_depth=10,max_features=8,random_state=100)\nrf=RandomForestClassifier(max_depth=4, max_features=3)\nknn=KNeighborsClassifier(n_neighbors=94)\ngnb=GaussianNB()\nxgb=xgb=XGBClassifier(use_label_encoder=False,random_state=42,eval_metric='mlogloss')","8788c11b":"def apply_model(model,x_train,x_test,y_train,y_test):\n    print(' '*20+re.search(r'(.*)\\(',f'''{model}''',re.M).group(1))\n    model.fit(x_train,y_train)\n    y_pred = model.predict(x_test)\n    print('')\n    print('Train Score:  ',model.score(x_train,y_train))\n    print('Test Score:   ',model.score(x_test,y_test))\n    print('')\n    plot_confusion_matrix(model, x_test, y_test)\n    print(classification_report(y_test,y_pred))\n\nd={}\ndef predict_test(model):\n    col=re.search(r'(.*)\\(',f'''{model}''',re.M).group(1)\n    if col not in d:\n        d[col]=1\n    else:\n        d[col]+=1\n    col+=f'{d[col]}'\n    df_pred[col]=model.predict(df_test)\n    df_pred","f415b2d6":"apply_model(lr,x_train,x_test,y_train,y_test)\npredict_test(lr)","0dd75351":"apply_model(svm,x_train,x_test,y_train,y_test)\npredict_test(svm)","9f5830ed":"apply_model(knn,x_train,x_test,y_train,y_test)\npredict_test(knn)","b5efacd4":"apply_model(gnb,x_train,x_test,y_train,y_test)\npredict_test(gnb)","5e90a736":"apply_model(dt,x_train,x_test,y_train,y_test) \npredict_test(dt)","85ccf056":"apply_model(rf,x_train,x_test,y_train,y_test) \npredict_test(rf)","37e20d7f":"apply_model(xgb,x_train,x_test,y_train,y_test)\npredict_test(xgb)","ae8e7204":"df_pred","3a813374":"ts=TSNE(learning_rate=50)\nfeatures=ts.fit_transform(df_both.drop('Class',axis=1))\ntsne_x,tsne_y='tsne_x','tsne_y'\ndf_both[tsne_x]=features[:,0]\ndf_both[tsne_y]=features[:,1]\ndf_both","95e7c962":"df=df_both[:df.shape[0]]\ndf_test=df_both[df.shape[0]+1:].iloc[:,-2:].reset_index(drop=True)\ndf_test","4d3f22e7":"x=df[[tsne_x,tsne_y]]\ny=df[['Class']].values\nx_train,x_test,y_train,y_test=over_sample_train_test(x,y)","6e3ad67f":"apply_model(lr,x_train,x_test,y_train,y_test)\npredict_test(lr)","551c5ae9":"apply_model(svm,x_train,x_test,y_train,y_test)\npredict_test(svm)","27f88024":"apply_model(knn,x_train,x_test,y_train,y_test)\npredict_test(knn)","5a840fe1":"apply_model(gnb,x_train,x_test,y_train,y_test) \npredict_test(gnb)","dcd07479":"apply_model(xgb,x_train,x_test,y_train,y_test)\npredict_test(xgb)","c2ad658f":"def kmeans_clus(df,not_x,not_y,k,cluster_label):\n    df=df.copy()\n    centroids,distortions=kmeans(df[[not_x,not_y]],k_or_guess=k)\n    labels,_=vq(df[[not_x,not_y]],centroids)\n    df[cluster_label]=labels\n    sns.scatterplot(x=not_x,y=not_y,data=df,hue=cluster_label)\n    for i in range(k):\n        plt.scatter(x=centroids[i,0],y=centroids[i,1],s=500,cmap='Cyan')","635c4b65":"kmeans_clus(df,tsne_x,tsne_y,2,'tsne_label')","10e00c7b":"pca=PCA(random_state=44)\npc=pca.fit_transform(df_both.drop('Class',axis=1))\nlen(pc[0])\npc_x,pc_y='pc_x','pc_y'\ndf_both[pc_x]=pc[:,0]\ndf_both[pc_y]=pc[:,1]","02e613a3":"df=df_both[:df.shape[0]]\ndf_test=df_both[df.shape[0]+1:].iloc[:,-2:].reset_index(drop=True)","fe2c64fd":"x=df[[pc_x,pc_y]]\ny=df[['Class']].values\nx_train,x_test,y_train,y_test=over_sample_train_test(x,y)","bbb433b0":"kmeans_clus(df,pc_x,pc_y,2,'pc_label')","99344d60":"apply_model(lr,x_train,x_test,y_train,y_test)\npredict_test(lr)","d3ce351a":"apply_model(svm,x_train,x_test,y_train,y_test)\npredict_test(svm)","2d8f2ca7":"apply_model(knn,x_train,x_test,y_train,y_test)\npredict_test(knn)","448a8471":"apply_model(gnb,x_train,x_test,y_train,y_test) \npredict_test(gnb)","0bc7e558":"apply_model(xgb,x_train,x_test,y_train,y_test)\npredict_test(xgb)","f8c74db2":"kmeans_clus(df,pc_x,pc_y,2,'pc_label')","463a254d":"df_pred","e078f0f2":"df","d72968a9":"### OverSampling","632fc286":"### PCA","bfa9fed7":"### Standard scale first 3 features","678472e4":"### Outliers Resample","81e6ee9b":"### Apply Models","f62a2c10":"- solve again same sequence ","fd10361e":"### Imbalanced :)","963acd40":"### Final Predictions For Test","65c23dc3":"### TSNE ","cdfe6dfa":"### Merge train and test to apply feature engineering\n- As test doesn't have a target column","a5fbe762":"### Separate Them again"}}