{"cell_type":{"d4f38d36":"code","ca6fbab1":"code","ab6a4dba":"code","d976b16c":"code","38e29714":"code","79d0bc05":"code","d408e87f":"code","6be0b461":"code","10fb19c1":"code","3b9dbe14":"code","45102955":"code","af2810fb":"code","350f22d8":"code","ea81cfc8":"code","0bf013a2":"code","f62ec1e8":"code","4913a2a6":"code","ec9b79ee":"code","40c14746":"code","b504ee13":"code","19fc9058":"code","d596ac4c":"code","42a36c2e":"code","c11595a6":"code","cc842618":"code","ed2c65fc":"code","a603a7d3":"code","4f5ddab7":"code","dc7e33ba":"code","04584d11":"code","2a6b9655":"code","b9e78b14":"code","9b16b45a":"code","8a071e39":"code","f1d7271b":"code","73301366":"code","6abaee72":"code","b3ee5b07":"code","44a389f7":"code","2f071aa1":"code","7078bae4":"code","2d022936":"code","3c6874ee":"code","2a7af422":"code","8f1407e9":"code","ac537900":"code","ce6d4589":"code","9ec2f521":"code","6ce1aec9":"code","df6a6cfb":"code","2b09ea41":"code","16010e2c":"code","aa7b0201":"code","3a4e89ff":"code","fab51630":"markdown","934b7cbf":"markdown","ef1d7936":"markdown","644162d5":"markdown","05aee461":"markdown","b2e264a6":"markdown","583851d5":"markdown","7b58b9c1":"markdown","d6c39a0b":"markdown","1e1816b2":"markdown","8222c1a1":"markdown","7c5064c6":"markdown","1d5de4aa":"markdown","c76fa103":"markdown","8e871587":"markdown","395c3a5f":"markdown","4b4d27ff":"markdown","a709c418":"markdown","aea58a42":"markdown"},"source":{"d4f38d36":"import numpy as np\nimport pandas as pd\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# We dont Probably need the Gridlines. Do we? If yes comment this line\nsns.set(style=\"ticks\")\n\nflatui = [\"#9b59b6\", \"#3498db\", \"#95a5a6\", \"#e74c3c\", \"#34495e\", \"#2ecc71\"] # defining the colour palette\nflatui = sns.color_palette(flatui)\n\n# importing the worldcloud module. Wordcloud uses the text sizes to represent the frequency of the text\nfrom wordcloud import WordCloud  ","ca6fbab1":"# To get the correct path of the input file in the Kaggle folder structure.\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ab6a4dba":"df=pd.read_csv(\"\/kaggle\/input\/fifa-2019-world-cup-dataset\/FIFA_data.csv\") # reading the dataset","d976b16c":"df.head(10) # having a look at the dataset, first 10 rows","38e29714":"df.shape # checking the number of rows and columns in the dataset","79d0bc05":"df.info() #Printing a concise summary of the DataFrame.","d408e87f":"df.isnull().sum() # checking the count of the missing values in each column","6be0b461":"df.columns # listing the columns","10fb19c1":"# Plotting the Heatmap of the columns using correlation matrix\nf,ax = plt.subplots(figsize=(25, 15))\nsns.heatmap(df.corr(), annot=True, linewidths=0.5, linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","3b9dbe14":"# Plotiing the wordcloud for the Nationalit column\nplt.subplots(figsize=(25,15))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=1920,\n                          height=1080\n                         ).generate(\" \".join(df.Nationality))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\nplt.show()","45102955":"#Imputing the missing values for the columns Club and Position\ndf['Club'].fillna('No Club', inplace = True)\ndf['Position'].fillna('ST', inplace = True)","af2810fb":"# selecting columns to impute the missing values by mean\nto_impute_by_mean = df.loc[:, ['Crossing', 'Finishing', 'HeadingAccuracy',\n                                 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy',\n                                 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed',\n                                 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping',\n                                 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions',\n                                 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking',\n                                 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n                                 'GKKicking', 'GKPositioning', 'GKReflexes']]","350f22d8":"# replacing the missing values with mean\nfor i in to_impute_by_mean.columns:\n    df[i].fillna(df[i].mean(), inplace = True)","ea81cfc8":"to_impute_by_mode = df.loc[:, ['Body Type','International Reputation', 'Height', 'Weight', 'Preferred Foot','Jersey Number']]\nfor i in to_impute_by_mode.columns:\n    df[i].fillna(df[i].mode()[0], inplace = True)","0bf013a2":"to_impute_by_median = df.loc[:, ['Weak Foot', 'Skill Moves', ]]\nfor i in to_impute_by_median.columns:\n    df[i].fillna(df[i].median(), inplace = True)","f62ec1e8":"df.head(20)","4913a2a6":"# Columns remaining to be imputed\ndf.columns[df.isna().any()]","ec9b79ee":"# Filling the remaining  missing values with zero\ndf.fillna(0, inplace = True) \ndf.head(10)","40c14746":"def defending(data):\n    return int(round((data[['Marking', 'StandingTackle', \n                               'SlidingTackle']].mean()).mean()))\n\ndef general(data):\n    return int(round((data[['HeadingAccuracy', 'Dribbling', 'Curve', \n                               'BallControl']].mean()).mean()))\n\ndef mental(data):\n    return int(round((data[['Aggression', 'Interceptions', 'Positioning', \n                               'Vision','Composure']].mean()).mean()))\n\ndef passing(data):\n    return int(round((data[['Crossing', 'ShortPassing', \n                               'LongPassing']].mean()).mean()))\n\ndef mobility(data):\n    return int(round((data[['Acceleration', 'SprintSpeed', \n                               'Agility','Reactions']].mean()).mean()))\ndef power(data):\n    return int(round((data[['Balance', 'Jumping', 'Stamina', \n                               'Strength']].mean()).mean()))\n\ndef rating(data):\n    return int(round((data[['Potential', 'Overall']].mean()).mean()))\n\ndef shooting(data):\n    return int(round((data[['Finishing', 'Volleys', 'FKAccuracy', \n                               'ShotPower','LongShots', 'Penalties']].mean()).mean()))","b504ee13":"# renaming a column\ndf.rename(columns={'Club Logo':'Club_Logo'}, inplace=True)","19fc9058":"df.columns","d596ac4c":"df['Defending'] = df.apply(defending, axis = 1)\ndf['General'] = df.apply(general, axis = 1)\ndf['Mental'] = df.apply(mental, axis = 1)\ndf['Passing'] = df.apply(passing, axis = 1)\ndf['Mobility'] = df.apply(mobility, axis = 1)\ndf['Power'] = df.apply(power, axis = 1)\ndf['Rating'] = df.apply(rating, axis = 1)\ndf['Shooting'] = df.apply(shooting, axis = 1)","42a36c2e":"df.head(10)","c11595a6":"# creating the players dataset\nplayers = df[['Name','Defending','General','Mental','Passing',\n                'Mobility','Power','Rating','Shooting','Flag','Age',\n                'Nationality', 'Photo', 'Club_Logo', 'Club']]\n\nplayers.head(20)","cc842618":"plt.figure(figsize = (18, 8))\nplt.style.use('fivethirtyeight')\nax = sns.countplot('Position', data = df, palette = 'dark')\nax.set_xlabel(xlabel = 'Different Positions in Football', fontsize = 16)\nax.set_ylabel(ylabel = 'Count of Players', fontsize = 16)\nax.set_title(label = 'Comparison of Positions and Players', fontsize = 20)\nplt.show()","ed2c65fc":"plt.figure(figsize = (13, 8))\nax = sns.countplot(x = 'Height', data = df, palette = 'bone')\nax.set_title(label = 'Count of players on Basis of Height', fontsize = 20)\nax.set_xlabel(xlabel = 'Height in Foot per inch', fontsize = 16)\nax.set_ylabel(ylabel = 'Count', fontsize = 16)\nplt.show()\n","a603a7d3":"plt.figure(figsize = (15, 7))\n\nsns.countplot(x = 'Work Rate', data = df, palette = 'hls')\nplt.title('Different work rates of the Players Participating in the FIFA 2019', fontsize = 20)\nplt.xlabel('Work rates associated with the players', fontsize = 16)\nplt.ylabel('count of Players', fontsize = 16)\nplt.show()","4f5ddab7":"x = df.Special\nplt.figure(figsize = (12, 8))\nplt.style.use('tableau-colorblind10')\n\nax = sns.distplot(x, bins = 58, kde = False, color = 'cyan')\nax.set_xlabel(xlabel = 'Special score range', fontsize = 16)\nax.set_ylabel(ylabel = 'Count of the Players',fontsize = 16)\nax.set_title(label = 'Histogram for the Speciality Scores of the Players', fontsize = 20)\nplt.show()","dc7e33ba":"some_countries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Columbia') # defining a tuple consisting of country names\ndata_countries = df.loc[df['Nationality'].isin(some_countries) & df['Overall']] # extracting the overall data of the countries selected in the line above\ndata_countries.head()","04584d11":"plt.rcParams['figure.figsize'] = (15, 7)\nax = sns.barplot(x = data_countries['Nationality'], y = data_countries['Overall'], palette = 'spring') # creating a bargraph\nax.set_xlabel(xlabel = 'Countries', fontsize = 9)\nax.set_ylabel(ylabel = 'Overall Scores', fontsize = 9)\nax.set_title(label = 'Distribution of overall scores of players from different countries', fontsize = 20)\nplt.show()","2a6b9655":"# finding the number of players in each club\ndf['Club'].value_counts().head(10) ","b9e78b14":"# creating a copy dataset\ndata = df.copy() ","9b16b45a":"# for visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nsns.set(style=\"ticks\")","8a071e39":"some_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid') # creating a tuple of club names\n\ndata_clubs = data.loc[data['Club'].isin(some_clubs) & data['Overall']] # extracting the overall data of the clubs selected in the line above\n\ndata_clubs.head()","f1d7271b":"plt.rcParams['figure.figsize'] = (15, 8)\nax = sns.boxplot(x = data_clubs['Club'], y = data_clubs['Overall'], palette = 'inferno') # creating a boxplot\nax.set_xlabel(xlabel = 'Some Popular Clubs', fontsize = 9)\nax.set_ylabel(ylabel = 'Overall Score', fontsize = 9)\nax.set_title(label = 'Distribution of Overall Score in Different popular Clubs', fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()","73301366":"# finding out the top 10 left footed footballers\nleft = data[data['Preferred Foot'] == 'Left'][['Name', 'Age', 'Club', 'Nationality']].head(10)\nleft","6abaee72":"# finding out the top 10 Right footed footballers\nright = data[data['Preferred Foot'] == 'Right'][['Name', 'Age', 'Club', 'Nationality']].head(10)\nright","b3ee5b07":"# comparing the performance of left-footed and right-footed footballers\n# ballcontrol vs dribbing\nsns.lmplot(x = 'BallControl', y = 'Dribbling', data = data, col = 'Preferred Foot')\nplt.show()","44a389f7":"data.groupby(data['Club'])['Nationality'].nunique().sort_values(ascending = False).head(10) # checking the clubs where players from the most number of nations play","2f071aa1":"data.groupby(data['Club'])['Nationality'].nunique().sort_values(ascending = True).head(10) # checking the clubs where players from the least number of nations play","7078bae4":"df.head()","2d022936":"df.drop(['Unnamed: 0'],axis=1,inplace=True) # dropping the unnamed column","3c6874ee":"df.head() # dataset after dropping column","2a7af422":"#Player with maximum Potential and Overall Performance\nplayer = str(df.loc[df['Potential'].idxmax()][1])\nprint('Maximum Potential : '+str(df.loc[df['Potential'].idxmax()][1]))\nprint('Maximum Overall Perforamnce : '+str(df.loc[df['Overall'].idxmax()][1]))","8f1407e9":"pr_cols=['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys',\n       'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl',\n       'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance',\n       'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n       'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties',\n       'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving',\n       'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\ni=0\nwhile i < len(pr_cols):\n    print('Best Player {0} : {1}'.format(pr_cols[i],df.loc[df[pr_cols[i]].idxmax()][1]))\n    i += 1","ac537900":"# creating a list of best players in each of the pr_cols criteria\ni=0\nbest_players = []\nwhile i < len(pr_cols):\n    best_players.append(df.loc[df[pr_cols[i]].idxmax()][1])\n    i +=1\n    \nbest_players","ce6d4589":"# Plot to show the preferred foot choice of different players\nf, ax = plt.subplots(figsize=(8, 6))\nsns.countplot(x=\"Preferred Foot\", hue=\"Real Face\", data=df)\nplt.show()","9ec2f521":"df.loc[df['Potential'].idxmax()][1] # Finding the player with the maximum potential","6ce1aec9":"# showing the name of the players which occurs the most number of times from the first 20 names\nplt.subplots(figsize=(25,15))\nwordcloud = WordCloud(\n                          background_color='black',\n                          width=1920,\n                          height=1080\n                         ).generate(\" \".join(df.Name[0:20]))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('players.png')\nplt.show()","df6a6cfb":"df.columns # all the columns in the dataset","2b09ea41":"# checking which clubs have been mentioned the most\nplt.subplots(figsize=(25,15))\nwordcloud = WordCloud(\n                          background_color='black',\n                          width=1920,\n                          height=1080\n                         ).generate(\" \".join(df.Club))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('players.png')\nplt.show()","16010e2c":"# showing the name of the players which occurs the most number of times(left join)\nplt.subplots(figsize=(25,15))\nwordcloud = WordCloud(\n                          background_color='black',\n                          width=1920,\n                          height=1080\n                         ).generate(\" \".join(left.Name))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('players.png')\nplt.show()","aa7b0201":"# showing the name of the players which occurs the most number of times(right join)\nplt.subplots(figsize=(25,15))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=1920,\n                          height=1080\n                         ).generate(\" \".join(right.Name))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('players.png')\nplt.show()","3a4e89ff":"# Checking which player has been mentioned the most in the 'best_players' list that we have prepared\nplt.subplots(figsize=(25,15))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=1920,\n                          height=1080\n                         ).generate(\" \".join(best_players))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('players.png')\nplt.show()","fab51630":"### Consider upvoting if it was helpful! \ud83d\ude03","934b7cbf":"### Finding the best players for each performance criteria.","ef1d7936":"> To show Different Work rate of the players participating in the FIFA 2019\n","644162d5":"### Every Nations' Player and their overall scores","05aee461":"> In the next few steps I'll be imputing the missing values from the dataset. As the dataset containes a lot of rows, I won't repeatedly show all the imputations. Instead, I will show the final dataset after all the imputations to establish that we have achived a dataset which doesn't have any missing values.","b2e264a6":"# FIFA World Cup Player's Analysis: Guide to EDA\n### A Comprehensive EDA, Feature Engineering, Data Manipulation with a Beginner Friendly Notebook Approach on Football Worldcup Dataset.\n\n\n#### Topics covered in this Notebook:\n> This notebook is focused on giving a good understanding of the Exploratory Data Analysis to the reader based on the FIFA worldcup dataset.<br>\n> The notebook focuses on understanding the football world cup data and build beautiful insights on that.<br>\n> Stay tuned, you would see a lot of stuff right in here!!","583851d5":"## Importing Librarires","7b58b9c1":"> These are categorical variables and will be imputed by mode.","d6c39a0b":"### Plotting Word Clouds","1e1816b2":"> And then we plot the coun of players based on their heights.","8222c1a1":"> Following functions are used to get the rounded values from different columns.","7c5064c6":"> The following variables are either discrete numerical or continuous numerical variables.So the will be imputed by median.","1d5de4aa":"> So, we get the dataset after transformation.","c76fa103":"> Now we plot the different positions acquired by the players. \n","8e871587":"* Read my other notebooks at:\nhttps:\/\/www.kaggle.com\/blurredmachine\/notebooks<br>\n* Dataset: \nhttps:\/\/www.kaggle.com\/blurredmachine\/fifa-2019-world-cup-dataset\n\nI hope you like it.\nI am continuously working on this notebook to keep it updated with new features and easy approaches for beginners to understand the concepts easily.","395c3a5f":"![FIFA Image](https:\/\/img.fifa.com\/image\/upload\/t_tc1\/ypyogg4btgrfms5z4vhp.jpg)","4b4d27ff":"### Important Points:\n\n* Dataset: [Fifa World Cup Dataset](https:\/\/www.kaggle.com\/blurredmachine\/fifa-2019-world-cup-dataset)\n* Other Notebooks: [Notebooks](https:\/\/www.kaggle.com\/blurredmachine\/notebooks)\n* You can use the same dataset and build your own kernels and can share with me in the comments below! \n* I would love to review your work on this dataset.","a709c418":"> Distribution of Overall Score in Different popular Clubs","aea58a42":"> Adding these following categories to the data using the functions we created above.\n"}}