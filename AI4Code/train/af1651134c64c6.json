{"cell_type":{"2e00ff09":"code","cbce8855":"code","94681383":"code","be5a5d4e":"code","82949639":"code","2cff738c":"code","55443dd0":"code","4bafedfd":"code","09b684bd":"code","e67d1aa5":"code","f7084624":"code","3da2dbb8":"code","fb7b9c5d":"code","f82f15af":"code","432d8125":"code","1ab5e850":"code","d52d2108":"code","7b23790d":"code","9fbc0983":"code","31e49204":"code","472c1c08":"code","c925fbc9":"code","f56e9a97":"code","5dec6d90":"code","06fe5099":"code","1972d7f1":"code","0a41b51b":"code","62df3a0a":"code","f9b761e9":"code","01c1fa18":"code","dfba2fbf":"code","d133c9e9":"code","aa6b8c4c":"code","bef0ae81":"code","fd0d45c3":"code","d4b04640":"code","7de136d7":"code","ebfc77e9":"code","c85bc9ac":"code","0a56195f":"code","488f8fe5":"code","e80de209":"code","b478142e":"code","2307fbd8":"markdown"},"source":{"2e00ff09":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cbce8855":"import numpy as np\nimport pandas as pd\n\nimport tensorflow as tf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder","94681383":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","be5a5d4e":"train.head()\ntrain.describe()","82949639":"test.head()\ntrain.describe()","2cff738c":"train.isna().sum()\n","55443dd0":"test.isna().sum()","4bafedfd":"corr = train.corr(method='pearson')\nsns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns, cmap='RdBu_r', annot=True, linewidth=0.2)","09b684bd":"train['Family_size'] = train['SibSp'] + train['Parch']\ntest['Family_size'] = test['SibSp'] + test['Parch']","e67d1aa5":"#train['Fare'] = train['Fare'].fillna(train['Fare'].mean())\ntest['Fare'] = test['Fare'].fillna(test['Fare'].mean())","f7084624":"sns.distplot(train['Fare'], bins=40, kde=False)\nplt.figure()\nsns.distplot(test['Fare'], bins=40, kde=False)","3da2dbb8":"#Fare is Left Skew\ntrain['Fare'] = pd.qcut(train['Fare'], 4)\nlbl_train = LabelEncoder()\ntrain['Fare'] = lbl_train.fit_transform(train['Fare'])","fb7b9c5d":"test.isna().sum()","f82f15af":"test['Fare'] = pd.qcut(test['Fare'], 4)\nlbl_test = LabelEncoder()\ntest['Fare'] = lbl_test.fit_transform(test['Fare'])","432d8125":"test.head()","1ab5e850":"train['Embarked'].fillna('S', inplace=True)\ntrain['Cabin'].fillna('N', inplace=True)\ntrain['Age'] = train['Age'].fillna(train['Age'].mean())\n\ntest['Embarked'].fillna('S', inplace=True)\ntest['Cabin'].fillna('N', inplace=True)\ntest['Age'] = train['Age'].fillna(train['Age'].mean())","d52d2108":"sns.distplot(train['Age'], bins=40, kde=False)\nplt.figure()\nsns.distplot(test['Age'], bins=40, kde=False)","7b23790d":"train['Age'] = pd.qcut(train['Age'], 4)\nlbl_train = LabelEncoder()\ntrain['Age'] = lbl_train.fit_transform(train['Age'])","9fbc0983":"test['Age'] = pd.qcut(test['Age'], 4)\nlbl_test = LabelEncoder()\ntest['Age'] = lbl_test.fit_transform(test['Age'])","31e49204":"sns.countplot(train['Age'])","472c1c08":"train['Sex'] = train['Sex'].map({'female':0, 'male':1}).astype(int)\ntest['Sex'] = test['Sex'].map({'female':0, 'male':1}).astype(int)","c925fbc9":"train['Embarked'] = train['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)\ntest['Embarked'] = test['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)","f56e9a97":"train.head()","5dec6d90":"train['Cabin'] = train['Cabin'].apply(lambda x:x[0])","06fe5099":"test['Cabin'] = test['Cabin'].apply(lambda x:x[0])","1972d7f1":"train.head()","0a41b51b":"lbl_train = LabelEncoder()\ntrain['Cabin'] = lbl_train.fit_transform(train['Cabin'])","62df3a0a":"lbl_test = LabelEncoder()\ntest['Cabin'] = lbl_test.fit_transform(test['Cabin'])","f9b761e9":"test.head()","01c1fa18":"x_train = train.drop(['PassengerId', 'Survived', 'Name', 'SibSp', 'Parch', 'Ticket'], axis=1)\ny_train = train['Survived']\n\nx_test = test.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket'], axis=1)","dfba2fbf":"x_train.head()","d133c9e9":"print(type(x_train))\nx_train = np.asarray(x_train)\nprint(type(x_train))","aa6b8c4c":"y_train = np.asarray(y_train)\nx_test = np.asarray(x_test)","bef0ae81":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)","fd0d45c3":"validation_size = 200\n\nx_val = x_train[:validation_size]\nx_train = x_train[validation_size:]\n\ny_val = y_train[:validation_size]\ny_train = y_train[validation_size:]","d4b04640":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(32, activation='relu', input_shape=(7,)),\n    tf.keras.layers.Dense(32, activation='relu'),\n    tf.keras.layers.Dense(32, activation='relu'),\n    #tf.keras.layers.Dropout(0.10),\n    tf.keras.layers.Dense(16, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])","7de136d7":"model.compile(optimizer=tf.keras.optimizers.RMSprop(lr=0.001), loss='binary_crossentropy', metrics=['acc'])","ebfc77e9":"history = model.fit(x_train, y_train, epochs=30, validation_data=(x_val, y_val))","c85bc9ac":"acc = history.history['acc']\nval_acc = history.history['val_acc']\n\nepochs = range(1, len(acc)+1)\n\nplt.plot(epochs, acc, 'r')\nplt.plot(epochs, val_acc, 'b')\n","0a56195f":"plt.figure()\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc)+1)\n\nplt.plot(epochs, loss, 'r')\nplt.plot(epochs, val_loss, 'b')","488f8fe5":"predictions = model.predict_classes(x_test)\nids = test['PassengerId'].copy()\nnew_output = ids.to_frame()\nnew_output[\"Survived\"]=predictions\n","e80de209":"new_output.head(20)","b478142e":"new_output.to_csv(\"my_submission.csv\",index=False)","2307fbd8":"**Fare**"}}