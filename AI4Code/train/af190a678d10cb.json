{"cell_type":{"86d8903f":"code","8bc04f24":"code","51bf82a2":"code","0f95ca8e":"code","a1e88bcf":"code","c09ffb4b":"code","3d2b04d5":"code","69d1faf0":"code","21c427a7":"code","a6ff4d0d":"code","2bb584e7":"code","d9002504":"code","cd36efbb":"code","d965fc4b":"code","bcbd4614":"code","20eb96c4":"code","a03abee8":"code","63b2adee":"code","8f65b9b8":"code","6a19df19":"code","bec71f63":"code","b241cc87":"code","b51fce35":"code","b52f7570":"code","1752c481":"code","bc305dc7":"code","4664bef7":"code","3adc7788":"code","d5716238":"code","de1f10a0":"code","34d3442b":"code","a4a4a616":"code","b778e6d4":"code","d885ffa6":"code","79a77cf8":"code","ad56ad8a":"code","c4fc54e3":"code","d6208d10":"code","11434ea9":"code","5d6b9c7d":"code","5ff77850":"code","a05b3350":"code","9606bacd":"code","79590fe4":"code","3e7902e5":"code","522ff398":"code","9445df9d":"code","74a18928":"code","328a7850":"code","01c5ac81":"markdown","ecfb5046":"markdown","ad29dd6e":"markdown","1d100733":"markdown","62689ef6":"markdown","3be0cdef":"markdown","4f0222ca":"markdown"},"source":{"86d8903f":"import numpy as np\nimport os\nimport cv2\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom numpy import expand_dims\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom matplotlib import pyplot\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Input, Dense, Dropout, Conv2D, BatchNormalization\nfrom tensorflow.keras.optimizers import Nadam, Adam, SGD, Adadelta, Adamax\n\n%matplotlib inline","8bc04f24":"path = '..\/input\/brain-mri-images-for-brain-tumor-detection\/'","51bf82a2":"list_dir = os.listdir(path)","0f95ca8e":"print(list_dir)","a1e88bcf":"yes = cv2.imread('..\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/Y1.jpg')\nno = cv2.imread('..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/19 no.jpg')","c09ffb4b":"plt.imshow(yes)","3d2b04d5":"plt.imshow(no)","69d1faf0":"    name_path = []\n    shape1=[]\n    shape2=[]\n    shape3=[]\n\n    for i in os.listdir(path+'yes\/'):\n        item = cv2.imread(path + 'yes\/' + i)\n        item.shape\n        name_path.append(path + 'yes\/' + i)\n        shape1.append(item.shape[0])\n        shape2.append(item.shape[1])\n        shape3.append(item.shape[2])","21c427a7":"train_df = pd.DataFrame(columns=['name', 'width', 'height', 'ch', 'class'])\ntrain_df['name'], train_df['width'], train_df['height'], train_df['ch'], train_df['class'] = name_path, shape1, shape2, shape3, 'yes'\ntrain_df.tail()","a6ff4d0d":"name_path = []\nshape1=[]\nshape2=[]\nshape3=[]\n\nfor i in os.listdir(path+'no\/'):\n    item = cv2.imread(path + 'no\/' + i)\n    item.shape\n    name_path.append(path + 'no\/' + i)\n    shape1.append(item.shape[0])\n    shape2.append(item.shape[1])\n    shape3.append(item.shape[2])","2bb584e7":"no_df = pd.DataFrame(columns=['name', 'width', 'height', 'ch', 'class'])\nno_df['name'], no_df['width'], no_df['height'], no_df['ch'], no_df['class'] = name_path, shape1, shape2, shape3, 'no'\nno_df.head()","d9002504":"no_df.width.unique()","cd36efbb":"no_df.height.unique()","d965fc4b":"no_df.ch.unique()","bcbd4614":"print(no_df.width.min(), no_df.height.min())","20eb96c4":"test_df = train_df.iloc[-10:-1, :]","a03abee8":"test_df","63b2adee":"train_df.drop(train_df.index[145:154], inplace=True)","8f65b9b8":"len(train_df.index)","6a19df19":"test_df_no = no_df.iloc[-10:-1, :]","bec71f63":"test_df_no","b241cc87":"no_df.drop(no_df.index[88:97], inplace=True)","b51fce35":"len(no_df.index)","b52f7570":"test = test_df.append(test_df_no, ignore_index = True) ","1752c481":"len(test.index)","bc305dc7":"train = train_df.append(no_df, ignore_index = True) ","4664bef7":"len(train.index)","3adc7788":"train.head()","d5716238":"test.head()","de1f10a0":"shape = 112\nbatch_size = 32\nlearn_r = 0.001","34d3442b":"train_datagen = ImageDataGenerator(rescale=1.0\/255, rotation_range=30, width_shift_range=0.2, \n                                   height_shift_range=0.2, zoom_range=0.1, vertical_flip=True, horizontal_flip=True, validation_split=0.2)","a4a4a616":"train_generator = train_datagen.flow_from_dataframe(train, target_size=(shape, shape),batch_size=batch_size,class_mode='binary',subset='training', \n                                                   x_col='name',y_col=\"class\", color_mode=\"rgb\", shuffle=True)\n\nvalidation_generator = train_datagen.flow_from_dataframe(train, target_size=(shape, shape),batch_size=batch_size,class_mode='binary',subset='validation', \n                                                   x_col='name',y_col=\"class\", color_mode=\"rgb\", shuffle=True)","b778e6d4":"img = load_img('..\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/Y107.jpg')\n\ndata = img_to_array(img)\nsamples = expand_dims(data, 0)\ndatagen = ImageDataGenerator(height_shift_range=0.2)\nit = datagen.flow(samples, batch_size=1)\nfor i in range(9):\n\tpyplot.subplot(330 + 1 + i)\n\tbatch = it.next()\n\timage = batch[0].astype('uint8')\n\tpyplot.imshow(image)\npyplot.show()","d885ffa6":"from tensorflow.keras.applications import VGG16, VGG19, EfficientNetB7, Xception, InceptionV3\nopt_1 = SGD(learning_rate=learn_r, momentum=0.9)\nopt_2 = Adam(learning_rate= learn_r)\nopt_3 = Nadam(learning_rate= learn_r)\nopt_4 = Adamax(learning_rate= learn_r, beta_1=0.9, beta_2=0.999, epsilon=1e-07)","79a77cf8":"apps = [VGG16, VGG19, EfficientNetB7, Xception, InceptionV3]","ad56ad8a":"def get_model():    \n    base_model =  apps[4](input_shape=(shape,shape,3), weights='imagenet', include_top=False, pooling='avg')\n    x = base_model.output\n    x = Dropout(0.1)(x)\n    predictions = Dense(1, activation=\"sigmoid\")(x)\n    return Model(inputs=base_model.input, outputs=predictions)","c4fc54e3":"model = get_model()\n    \nmodel.compile(optimizer=opt_1, loss='binary_crossentropy', metrics= 'accuracy')","d6208d10":"history = model.fit_generator(train_generator, epochs=30, validation_data=validation_generator)","11434ea9":"pd.DataFrame(history.history).plot(figsize=(18, 5))\nplt.grid(True)\nplt.gca().set_ylim(0,1)\nplt.show()","5d6b9c7d":"test_datagen = ImageDataGenerator(rescale=1.0\/255)\ntest_generator = test_datagen.flow_from_dataframe(test, x_col='name', y_col='class', batch_size= 1, shuffle=False, target_size=(shape,shape))","5ff77850":"test_generator.reset()\npred=model.predict_generator(test_generator,verbose=1)","a05b3350":"test_generator.class_indices","9606bacd":"test_generator.filenames","79590fe4":"predict = []\nfor i in pred:\n    if i < 0.5:\n        print('no')\n        predict.append('no')\n    else:\n        print('yes')\n        predict.append('yes')\n    ","3e7902e5":"results = pd.DataFrame(columns=['Filename', 'Predictions'])","522ff398":"results.head()","9445df9d":"results['Filename']= test_generator.filenames","74a18928":"results['Predictions']=predict","328a7850":"for pic, name in zip(results['Filename'], results['Predictions']): \n    img = load_img(pic)\n    plt.imshow(img)\n    print(name)   \n    plt.show()","01c5ac81":"# Testing","ecfb5046":"# Data generators","ad29dd6e":"# Make test set","1d100733":"# The Dataframes","62689ef6":"# Make train set","3be0cdef":"# Making dataframes","4f0222ca":"# Create the Model"}}