{"cell_type":{"9ff373db":"code","d2de7055":"code","b687c846":"code","0a8039cb":"code","874232e8":"code","52023627":"code","1a510481":"code","1ca038f7":"code","f2fe4efe":"code","1eb9271e":"code","4c23ac00":"code","650878c6":"code","2e984dfb":"code","83354acb":"code","39a5897d":"code","bf70d377":"code","01f1fe01":"code","3797d152":"code","9b5fdb06":"code","2f9606d9":"code","d33a449c":"code","0088213f":"code","06a88ad5":"code","99379e4a":"code","d42bb758":"code","fa4ef530":"code","383d5f30":"code","01640420":"code","c723bb2b":"code","84a7f61b":"code","7dac874a":"code","6c6207cc":"code","192e2d2a":"code","5d8faf3d":"code","6574b3b7":"code","3b0dbba0":"code","bc2cf571":"code","7eff1861":"code","d879060e":"code","9107ca46":"code","f8e05cde":"code","f8eba3cf":"code","4cb0fb8e":"code","d769146e":"code","02e18f71":"code","4f7ca911":"code","017a9530":"markdown","9df84687":"markdown","41b50b83":"markdown","db7ba825":"markdown","86c3cb87":"markdown","f1ccf648":"markdown"},"source":{"9ff373db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d2de7055":"!pip install dataprep","b687c846":"from dataprep.eda import plot, plot_correlation, create_report, plot_missing\nimport pandas as pd","0a8039cb":"financial= pd.read_csv('..\/input\/sp-500-companies-with-financial-information\/financials.csv')\nfinancial.head(5)","874232e8":"financial.shape","52023627":"financial.info()","1a510481":"financial.describe().T","1ca038f7":"import datetime as dt\nstart_time = dt.datetime.now()\nprint(\"Started at \", start_time)","f2fe4efe":"plot(financial)","1eb9271e":"create_report(financial)","4c23ac00":"plot(financial,'Price')","650878c6":"plot(financial,'Sector','Price')","2e984dfb":"plot(financial,'Sector','Price\/Earnings')","83354acb":"financial.columns","39a5897d":"print('Dataprep finished!!')\nfinish_time = dt.datetime.now()\nprint(\"Finished at \", finish_time)\nelapsed = finish_time - start_time\nprint(\"Elapsed time: \", elapsed)","bf70d377":"!pip install git+git:\/\/github.com\/AutoViML\/AutoViz.git","01f1fe01":"!pip install xlrd","3797d152":"start_time = dt.datetime.now()\nprint(\"Started at \", start_time)","9b5fdb06":"financial1 = pd.read_csv('..\/input\/sp-500-companies-with-financial-information\/financials.csv')\nfinancial1.head(3)","2f9606d9":"from autoviz.AutoViz_Class import AutoViz_Class\n\nAV = AutoViz_Class()","d33a449c":"filename = \"..\/input\/sp-500-companies-with-financial-information\/financials.csv\"\nsep = \",\"\ndft = AV.AutoViz(\n    filename,\n    sep=\",\",\n    depVar=\"\",\n    dfte=None,\n    header=0,\n    verbose=0,\n    lowess=False,\n    chart_format=\"svg\",\n    max_rows_analyzed=150000,\n    max_cols_analyzed=30,\n    save_plot_dir=None\n)","0088213f":"print('AutoViz finished!!')\nfinish_time = dt.datetime.now()\nprint(\"Finished at \", finish_time)\nelapsed = finish_time - start_time\nprint(\"Elapsed time: \", elapsed)","06a88ad5":"from pandas_profiling import ProfileReport","99379e4a":"financial2 = pd.read_csv('..\/input\/sp-500-companies-with-financial-information\/financials.csv')\nfinancial2.head(3)","d42bb758":"# Start of Pandas Profiling process\nstart_time = dt.datetime.now()\nprint(\"Started at \", start_time)","fa4ef530":"report = ProfileReport(financial2)\nreport","383d5f30":"print('Pandas Profling finished!!')\nfinish_time = dt.datetime.now()\nprint(\"Finished at \", finish_time)\nelapsed = finish_time - start_time\nprint(\"Elapsed time: \", elapsed)","01640420":"!pip install sweetviz","c723bb2b":"import sweetviz as sv","84a7f61b":"# Start of Sweetviz process\nstart_time = dt.datetime.now()\nprint(\"Started at \", start_time)","7dac874a":"financial3=pd.read_csv('..\/input\/sp-500-companies-with-financial-information\/financials.csv')","6c6207cc":"my_report = sv.analyze(financial3)","192e2d2a":"my_report.show_html('report.html')","5d8faf3d":"# Some examples!\nmy_report.show_notebook()","6574b3b7":"!pip install lux-api","3b0dbba0":"import lux\nimport pandas as pd","bc2cf571":"financial4=pd.read_csv('..\/input\/sp-500-companies-with-financial-information\/financials.csv')","7eff1861":"financial4","d879060e":"financial4.intent = [\"Price\",\"EBITDA\"]\nfinancial4","9107ca46":"! pip install dtale","f8e05cde":"import dtale","f8eba3cf":"financial5=pd.read_csv('..\/input\/sp-500-companies-with-financial-information\/financials.csv')\nfinancial5","4cb0fb8e":"pip install dtale","d769146e":"import dtale","02e18f71":"financial5=pd.read_csv('..\/input\/sp-500-companies-with-financial-information\/financials.csv')\nfinancial5","4f7ca911":"dtale.show(financial5)","017a9530":"* # LUX","9df84687":"* # DATAPREP","41b50b83":"* # AUTOVIZ","db7ba825":"* # SWEETVIZ","86c3cb87":"* # D-Tale","f1ccf648":"* # PANDAS PROFILING"}}