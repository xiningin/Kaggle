{"cell_type":{"0947dd17":"code","7f0aa72c":"code","e4c0ccfd":"code","166bf73e":"code","9cc27d43":"code","2d365b3c":"code","be4858ac":"code","0a3023ca":"code","74c2ad08":"code","34af37e7":"code","373a0d13":"code","55e88aad":"code","c92a7d43":"code","d82468a4":"code","53cfd491":"code","fab4f308":"code","81e286af":"code","f4c43b47":"markdown","83cb54fb":"markdown"},"source":{"0947dd17":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f0aa72c":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly as py\nimport plotly.graph_objects as go\nimport ipywidgets as widgets\nimport plotly.express as px\nimport numpy as np\nfrom datetime import timedelta\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot","e4c0ccfd":"df = pd.read_excel('..\/input\/poker7292020\/PokerNow Data Clean 2020-07-29.xlsx', sheet_name='Clean Log')\n\n\ndf.drop(columns=['Unnamed: 0'], inplace=True)\ndf = df.set_index(('Timestamp'))\n","166bf73e":"tbh = pd.pivot_table(df, index=[\"Player's Name\"], values=['Hands'],aggfunc=[pd.Series.nunique], fill_value=0)\ntbl = pd.pivot_table(df, index=[\"Player's Name\"], values=['Winning Hand','Played?','Winning Amount'],aggfunc=['count',pd.Series.nunique,'sum','max','mean','last'], fill_value=0)\ntbl =tbl[[  (      'count',        'Played?'),\n            (      'count',   'Winning Hand'),\n            (        'sum', 'Winning Amount'),\n            (        'max', 'Winning Amount'),\n            (       'mean', 'Winning Amount')]]\n\n\ntbl.columns = ['No. Hands Played','Total Wins','Total Amount Won','Highest Amt Won','Avg Amt Won']\ntbl['Total Amount Won'] = tbl['Total Amount Won'].map('${:,.2f}'.format)\ntbl['Highest Amt Won'] = tbl['Highest Amt Won'].map('${:,.2f}'.format)\ntbl['Avg Amt Won'] = tbl['Avg Amt Won'].map('${:,.2f}'.format)\ntbl[\"Player's Winning %\"] = tbl['Total Wins']\/tbl['No. Hands Played']\ntbl[\"Player's Winning %\"] = tbl[\"Player's Winning %\"].astype(float).map(\"{:.2%}\".format)\n\ntbl = tbl.reset_index()\n\ntbh = tbh.reset_index()\n\ntbh.columns = [\"Player's Name\", \"Total Hands\"]\ntbl = pd.merge(tbl,tbh[[\"Player's Name\",\"Total Hands\"]],on=\"Player's Name\")\ntbl['Hands Played %'] = (tbl['No. Hands Played']\/tbl['Total Hands']).astype(float).map(\"{:.2%}\".format)\ntbl = tbl.reindex(columns=[\"Player's Name\",'No. Hands Played','Total Hands','Hands Played %','Total Wins',\"Player's Winning %\",'Total Amount Won','Highest Amt Won','Avg Amt Won'])\ntbl","9cc27d43":"dfavgamt = df[(df[\"Action\"].notnull()) & (df[\"Action\"]!=\"collected\")&(df[\"Action\"]!=\"posts\")&(df[\"Action\"]!=\"folds\")&(df[\"Action\"]!=\"checks\")]\ndfavgamt = pd.pivot_table(dfavgamt, index=[\"Player's Name\",\"Action\"], values=['Amount'],aggfunc=['count',pd.Series.nunique,'max','mean'], fill_value=0)\ndfavgamt=dfavgamt.reset_index()\ndfavgamt.columns = [\"Player's Name\", \"Action\", \"HandsC\", \"Action Count\",\"Max Amount \",\"Avg Amt\"]\n\ndfavgamt['Avg Amt']=dfavgamt['Avg Amt'].map('{:,.2f}'.format)\ndfavgamt.drop(columns=['HandsC'], inplace=True)\ndfavgamt","2d365b3c":"tblpcount = pd.pivot_table(df, index=[\"Position\",\"Player's Name\"],values=['Played?','Hands'],aggfunc=['count',pd.Series.nunique] ,fill_value=0)\ntblpcount.reset_index(inplace=True)\ntblposition = pd.pivot_table(df, index=[\"Position\",\"Player's Name\"],values= ['Hands'],columns=['Action'],aggfunc=['count'] ,fill_value=0)\ntblposition.reset_index(inplace=True)\ntblpcount= tblpcount[[(     'Position',        ''),\n            (\"Player's Name\",        ''),\n            (        'count', 'Played?'),\n            (      'nunique',   'Hands')]]\n\n\ntblposition.columns = ['Position',\"Player's Name\", 'bets','calls','checks','wins','folds','posts','raises']\ntblpcount.columns = ['Position',\"Player's Name\", \"No. Hands Played\",\"Total Hands\"]\n\ntblposition = pd.merge(tblposition, tblpcount[[\"Player's Name\",'Position',\"No. Hands Played\",'Total Hands']], on=[\"Position\",\"Player's Name\"])\ntblposition.drop(columns=['posts'],inplace=True)\n\n\ntblposition['Total']= tblposition['checks'] +  tblposition['calls'] + tblposition['bets'] + tblposition['raises'] + tblposition['folds']\ntblposition[['bets','calls','checks','folds','raises']] = tblposition[['bets','calls','checks','folds','raises']].div(tblposition['Total'].values,axis=0)\ntblposition[\"Player's Winning %\"] = (tblposition['wins']\/tblposition['No. Hands Played']).astype(float).map(\"{:.2%}\".format)\nformat_dict = {'bets': '{:.2%}','calls': '{:.2%}','checks': '{:.2%}','folds': '{:.2%}','raises': '{:.2%}'}\ntblposition  = tblposition.reindex(columns=[\"Player's Name\",'Position','checks','calls','bets',\"raises\",'folds','wins',\"Player's Winning %\",'No. Hands Played','Total Hands'])\ntblposition.style.format(format_dict)","be4858ac":"dfchipcount = pd.read_excel('..\/input\/poker7292020\/PokerNow Data Clean 2020-07-29.xlsx', sheet_name='Chip Count')\ndfchipcount.drop(columns=['Unnamed: 0'], inplace=True)\n\nfig =px.line(dfchipcount, x=\"Timestamp\", y=\"Amount\", color =\"Player's Name\", title ='''Chip Stack by Hand''', \n        labels={'Timestamp':'Time','Amount':'Chip Amount'}, hover_name='Hands', hover_data=['Amount'], width=1000, height=600)\nfig.update_layout(\n    title={\n        'y':0.9,\n        'x':0.5,\n         'xanchor': 'center',\n        })\nfig.update_traces(mode='markers+lines')\nfig.show()","0a3023ca":"dfWH = df[df['WH Rank'].notnull()]\ndfWH = dfWH[[\"Player's Name\", \"Hands\", \"Amount\",\"WH Rank\",\"Winning Hand\"]]\ndfWH = dfWH.copy()\ndfWH.columns = [\"PName\",\"Hands\",\"Amount\",\"WHRank\",\"WHHand\"]\nfig = go.Figure(data=[go.Table(\n    columnwidth = [400,800],\n    header=dict(values=[\"<b>Player's Name<\/b>\",\"<b>Hands<\/b>\", \"<b>Amount<\/b>\",\"<b>WH Rank<\/b>\",\"<b>Winning Hand<\/b>\"],\n                fill_color='forestgreen',\n                align='center',\n                font=dict(color='white', size=12)),\n    cells=dict(values= [dfWH.PName, dfWH.Hands, dfWH.Amount, dfWH.WHRank, dfWH.WHHand],\n               fill_color='lavender',\n               align='center',\n               font_size=14))\n])\n\nfig.show()","74c2ad08":"dfduration = dfchipcount.drop_duplicates([\"Player's Name\",\"Hands\"],keep= 'last')\ntbl2 = pd.pivot_table(dfduration, index=[\"Player's Name\"],values=['Hands','Amount','Duration'],aggfunc=[\"last\",\"count\",\"sum\"], fill_value=0)\ntbl2 = tbl2.copy()\ntbl2 = tbl2[[( 'last', 'Amount'), ('count',  'Hands'), (  'sum', 'Duration')]]\ntbl2.columns = ['Ending Chips','Hands','Duration']\ntbl2 = tbl2.reset_index(level=\"Player's Name\")\n\n\n","34af37e7":"buyinlog = pd.read_excel('..\/input\/poker7292020\/PokerNow Data Clean 2020-07-29.xlsx', sheet_name='Buy in Log')\ntbl2 = pd.merge(tbl2, buyinlog[[\"Player's Name\",'Buy in Chips']], on=\"Player's Name\")\ntbl2['BB per 100'] = (((tbl2['Ending Chips']-tbl2['Buy in Chips'])\/2)\/((tbl2['Hands'])\/100))\ntbl2['$ Per Hr'] = (((tbl2['Ending Chips']-tbl2['Buy in Chips'])\/4)\/((tbl2['Duration'])\/60))\ntbl2 = tbl2.reindex(columns=[\"Player's Name\",'Hands','Buy in Chips','Ending Chips','Duration','BB per 100','$ Per Hr'])\ntbl2.sort_values(by='BB per 100', ascending=False, inplace=True)\ntbl2['Duration'] = tbl2['Duration'].map('{:,.2f}'.format)\ntbl2['BB per 100'] = tbl2['BB per 100'].map('{:,.2f}'.format)\ntbl2['$ Per Hr'] = tbl2['$ Per Hr'].map('{:,.2f}'.format)\ntbl2","373a0d13":"HvsH = pd.read_excel('..\/input\/poker7292020\/PokerNow Data Clean 2020-07-29.xlsx', sheet_name='HvsH', index_col=0)\n\nHvsH","55e88aad":"HvsHvar = pd.read_excel('..\/input\/poker7292020\/PokerNow Data Clean 2020-07-29.xlsx', sheet_name='HvsH Var', index_col = 0)\n\ndef color_n(number):\n    color='red' if number < 0 else 'black'\n    return f'color: {color}'\ndef df_style(val):\n    return 'font-weight: bold'\n\nHvsHvar.style.set_properties(**{'background-color':'lightcyan',\n                               'border-color':'black',\n                               'border-width':'1px',\n                               'border-style':'solid',\n                               'text-align': 'center'}).applymap(color_n).applymap(df_style,\n                  subset=pd.IndexSlice[['Total']])\n","c92a7d43":"dfwhrank = df[df[\"WH Rank\"].str.contains(\"collected\")==False]\ndfwhrank = dfwhrank.copy()\n\n\n\ntbl4 = pd.pivot_table(dfwhrank, index=[\"Player's Name\"],columns=['WH Rank'],values=[\"Log#\"],aggfunc=[\"count\"], fill_value=0)\n\ntbl4.columns = tbl4.columns.droplevel(0)\ntbl4.columns = tbl4.columns.droplevel(0)\n\ntbl4 = tbl4.reindex(columns=[\"High Card\",\"Pair\",'Two Pair','Three of a Kind','Straight','Flush','Full House','Four of a Kind'])\ntbl4 = tbl4.fillna(0)\n\ntbl4.loc['Total',:]= tbl4.sum(axis=0)\n\n\n\ntbl4.astype(int)\n","d82468a4":"dfAction = df[(df[\"Action\"].notnull()) & (df[\"Action\"]!=\"collected\")&(df[\"Action\"]!=\"posts\")]\n\n\ntbl5 = pd.pivot_table(dfAction, index=[\"Player's Name\",'Street'], columns=[\"Action\"],values=['Log#',\"3 bet\"],aggfunc=[\"count\"], fill_value=0)\n\ntbl5 = tbl5[[('count', '3 bet', 'raises'),\n            ('count',  'Log#',  'folds'),\n            ('count',  'Log#',   'bets'),\n            ('count',  'Log#',  'calls'),\n            ('count',  'Log#', 'checks'),\n            ('count',  'Log#', 'raises')]]\ntbl5.reset_index(inplace=True)\ntbl5.columns = [\"Player's Name\",\"Street\",\"3 Bet\",\"folds\",\"bets\",\"calls\",\"checks\",\"raises\"]\ndfact = tbl5[[\"Player's Name\",\"Street\",\"folds\",\"bets\",\"calls\",\"checks\",\"raises\"]]\ntbl5.sort_values(by='Street',ascending=True,inplace=True)\ndf3bet = df[df['3 bet']==True]\ndf3bet = pd.pivot_table(df3bet, index=[\"Player's Name\",'Street'], values=[\"3 bet\"],aggfunc=[\"count\"], fill_value=0)\ndf3bet.reset_index(inplace=True)\ndf3bet.columns = [\"Player's Name\",\"Street\",\"3 Bet\"]\ndfact = pd.merge(dfact, df3bet[[\"Player's Name\",\"Street\",\"3 Bet\"]], on=[\"Player's Name\",\"Street\"], how='left')\ndfact['3 Bet'] =dfact['3 Bet'].fillna(0).astype(int)\ndfact.sort_values(by=['Street',\"Player's Name\"],inplace=True)\n\n","53cfd491":"dfact= dfact.copy()\ndfact['Total'] = dfact.iloc[:,2:7].sum(axis=1)\n\ndfact[['folds','bets','calls','checks','raises']] = (dfact[['folds','bets','calls','checks','raises']].div(dfact['Total'].values,axis=0)*100).round(2)\ndfact = dfact[[\"Player's Name\",'Street','folds','bets','calls','checks','raises']]\n","fab4f308":"dfactall = df[(df[\"Action\"].notnull()) & (df[\"Action\"]!=\"collected\")&(df[\"Action\"]!=\"posts\")]\n\n\ntbl6 = pd.pivot_table(dfactall, index=[\"Player's Name\"], columns=[\"Action\"],values=['Log#'],aggfunc=[\"count\"], fill_value=0)\n\ntbl6 = tbl6[[('count', 'Log#', 'folds'),\n            ('count',  'Log#',   'bets'),\n            ('count',  'Log#',  'calls'),\n            ('count',  'Log#', 'checks'),\n            ('count',  'Log#', 'raises')]]\ntbl6.reset_index(inplace=True)\ntbl6.columns = [\"Player's Name\",\"folds\",\"bets\",\"calls\",\"checks\",\"raises\"]\n\ndfacttotal = tbl6\ndfacttotal['Total'] = dfacttotal.iloc[:,1:6].sum(axis=1)\ndfacttotal[['folds','bets','calls','checks','raises']] = (dfacttotal[['folds','bets','calls','checks','raises']].div(dfacttotal['Total'].values,axis=0)*100).round(2)\ndfacttotal = dfacttotal[[\"Player's Name\",'folds','bets','calls','checks','raises']]\n\n","81e286af":"df1 = dfact.loc[(dfact[\"Street\"] == \"Preflop\")]\ndf2 = dfact.loc[(dfact[\"Street\"] == \"flop\")]\ndf3 = dfact.loc[(dfact[\"Street\"] == \"turn\")]\ndf4 = dfact.loc[(dfact[\"Street\"] == \"river\")]\ndft = dfacttotal\n\nfig = go.Figure()\n\ntrace1 = go.Bar(text=(dft[\"folds\"].astype(str) + \"%\"),textposition='auto',name='Folds', x=dft[\"Player's Name\"], y=dft[\"folds\"])\ntrace2 = go.Bar(text=(dft[\"checks\"].astype(str) + \"%\"),textposition='auto',name='Checks', x=dft[\"Player's Name\"], y=dft[\"checks\"])\ntrace3=go.Bar(text=(dft[\"bets\"].astype(str) + \"%\"),textposition='auto',name='Bets', x=dft[\"Player's Name\"], y=dft[\"bets\"])\ntrace4=go.Bar(text=(dft[\"calls\"].astype(str) + \"%\"),textposition='auto',name='Calls', x=dft[\"Player's Name\"], y=dft[\"calls\"])\ntrace5= go.Bar(text=(dft[\"raises\"].astype(str) + \"%\"),textposition='auto',name='Raises', x=dft[\"Player's Name\"], y=dft[\"raises\"])\n\ntrace6 = go.Bar(text=(df1[\"folds\"].astype(str) + \"%\"),textposition='auto',name='Folds', x=df1[\"Player's Name\"], y=df1[\"folds\"])\ntrace7 = go.Bar(text=(df1[\"checks\"].astype(str) + \"%\"),textposition='auto',name='Checks', x=df1[\"Player's Name\"], y=df1[\"checks\"])\ntrace8=go.Bar(text=(df1[\"bets\"].astype(str) + \"%\"),textposition='auto',name='Bets', x=df1[\"Player's Name\"], y=df1[\"bets\"])\ntrace9=go.Bar(text=(df1[\"calls\"].astype(str) + \"%\"),textposition='auto',name='Calls', x=df1[\"Player's Name\"], y=df1[\"calls\"])\ntrace10= go.Bar(text=(df1[\"raises\"].astype(str) + \"%\"),textposition='auto',name='Raises', x=df1[\"Player's Name\"], y=df1[\"raises\"])\n\ntrace11 = go.Bar(text=(df2[\"folds\"].astype(str) + \"%\"),textposition='auto',name='Folds', x=df2[\"Player's Name\"], y=df2[\"folds\"])\ntrace12= go.Bar(text=(df2[\"checks\"].astype(str) + \"%\"),textposition='auto',name='Checks', x=df2[\"Player's Name\"], y=df2[\"checks\"])\ntrace13=go.Bar(text=(df2[\"bets\"].astype(str) + \"%\"),textposition='auto',name='Bets', x=df2[\"Player's Name\"], y=df2[\"bets\"])\ntrace14=go.Bar(text=(df2[\"calls\"].astype(str) + \"%\"),textposition='auto',name='Calls', x=df2[\"Player's Name\"], y=df2[\"calls\"])\ntrace15= go.Bar(text=(df2[\"raises\"].astype(str) + \"%\"),textposition='auto',name='Raises', x=df2[\"Player's Name\"], y=df2[\"raises\"])\n\ntrace16 = go.Bar(text=(df3[\"folds\"].astype(str) + \"%\"),textposition='auto',name='Folds', x=df3[\"Player's Name\"], y=df3[\"folds\"])\ntrace17= go.Bar(text=(df3[\"checks\"].astype(str) + \"%\"),textposition='auto',name='Checks', x=df3[\"Player's Name\"], y=df3[\"checks\"])\ntrace18=go.Bar(text=(df3[\"bets\"].astype(str) + \"%\"),textposition='auto',name='Bets', x=df3[\"Player's Name\"], y=df3[\"bets\"])\ntrace19=go.Bar(text=(df3[\"calls\"].astype(str) + \"%\"),textposition='auto',name='Calls', x=df3[\"Player's Name\"], y=df3[\"calls\"])\ntrace20= go.Bar(text=(df3[\"raises\"].astype(str) + \"%\"),textposition='auto',name='Raises', x=df3[\"Player's Name\"], y=df3[\"raises\"])\n\ntrace21 = go.Bar(text=(df4[\"folds\"].astype(str) + \"%\"),textposition='auto',name='Folds', x=df4[\"Player's Name\"], y=df4[\"folds\"])\ntrace22= go.Bar(text=(df4[\"checks\"].astype(str) + \"%\"),textposition='auto',name='Checks', x=df4[\"Player's Name\"], y=df4[\"checks\"])\ntrace23=go.Bar(text=(df4[\"bets\"].astype(str) + \"%\"),textposition='auto',name='Bets', x=df4[\"Player's Name\"], y=df4[\"bets\"])\ntrace24=go.Bar(text=(df4[\"calls\"].astype(str) + \"%\"),textposition='auto',name='Calls', x=df4[\"Player's Name\"], y=df4[\"calls\"])\ntrace25= go.Bar(text=(df4[\"raises\"].astype(str) + \"%\"),textposition='auto',name='Raises', x=df4[\"Player's Name\"], y=df4[\"raises\"])\n\n\n\nlist_updatemenus = [\n    {'label': 'Total',\n  'method': 'update',\n  'args': [{'visible': [True, True, True, True, True,False, False, False, False, False,False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]}, {'title': 'Action Type Total'}]},\n {'label': 'Preflop',\n  'method': 'update',\n  'args': [{'visible': [False, False, False, False,False,True,True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False,False, False, False]}, {'title': 'Action Type by Preflop'}]},\n {'label': 'Flop',\n  'method': 'update',\n  'args': [{'visible': [False, False,False, False, False, False, False, False, False, False,True, True,True, True, True,False, False, False, False, False, False, False, False, False, False]}, {'title': 'Action Type by Flop'}]},\n {'label': 'Turn',\n  'method': 'update',\n  'args': [{'visible': [False, False, False, False, False, False, False,False, False, False, False,False, False, False, False,True,True, True, True, True, False, False, False, False, False]}, {'title': 'Action Type by Turn'}]},\n {'label': 'River',\n  'method': 'update',\n  'args': [{'visible': [False, False, False, False, False, False, False, False,False, False, False, False,False, False, False, False,False, False, False, False,True, True, True, True, True]}, {'title': 'Action Type by River'}]}]\n\n\n\ndata = [trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12,trace13,trace14,trace15,trace16,\\\n        trace17,trace18,trace19,trace20,trace21,trace22,trace23,trace24,trace25]\n\nlayout=go.Layout(title='Poker Action Type Breakdown',updatemenus=list([dict(buttons= list_updatemenus),]),\\\n                 width=1000,height=800,barmode='stack',xaxis=dict(title = \"Player's Name\"), yaxis=dict(title = \"% of Player's Total Action\"))\n\n\n\nfig = go.Figure(data,layout)\n\nfig.show()","f4c43b47":"## Difference of Chips Gained or Lossed by Player","83cb54fb":"## Chips Gained from Each Player"}}