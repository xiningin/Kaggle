{"cell_type":{"69c01c1c":"code","fc34f55a":"code","a0cce217":"code","70097670":"code","4ad7a824":"code","e7edb462":"code","169b0497":"code","99aa601a":"code","25082458":"code","a243eaf8":"code","ff026ad7":"code","5d945e97":"code","38ec8064":"markdown","48d30ee4":"markdown","2d7305cd":"markdown","ef27958f":"markdown","62849bef":"markdown","70e6abff":"markdown","b68da9e2":"markdown","e340331d":"markdown","a6d3e66a":"markdown","645e9dc7":"markdown"},"source":{"69c01c1c":"import numpy as np # Linear algebra\nimport pandas as pd # Data processing.\nimport matplotlib.pyplot as plt # Visualize cost function","fc34f55a":"df = pd.read_csv(\"..\/input\/data.csv\") # Import data\nprint(df.columns)\ndf.drop([\"id\",\"Unnamed: 32\"],axis = 1,inplace = True) # We delete Id and Unnamed 32 because they have nothing to do with machine learning","a0cce217":"df.diagnosis = [1 if each == \"M\" else 0 for each in df.diagnosis] # We convert B and M to 1 and 0 because our data must be binary numeric\ny = df.diagnosis.values # We take diagnosis values\nx_data = df.drop([\"diagnosis\"], axis = 1) # We take all features outside diagnosis\nx = (x_data -np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values # Normalization","70097670":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42) # 80% train, 20% test\n\nprint(x_train.shape)\nx_train = x_train.T # Transpose\nx_test = x_test.T # Transpose\nprint(x_train.shape)\n# We didn't transpose y_train and y_test because they are vectorial","4ad7a824":"def initalize_weight_bias(dimension):\n    # dimension -> Number of Feature\n    w = np.full((dimension,1),0.1)\n    b = 0.0\n    return w,b","e7edb462":"def sigmoid(z):\n    y_head = 1\/(1+np.exp(-z)) # y_head -> predicted value\n    return y_head","169b0497":"def forward_backward_propagation(w,b,x_train,y_train):\n    # Forward Propagation\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z) # y_head -> predicted value\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1] # Our purpose is minimizing cost\n    \n    # Backward Propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] # derivative of weight\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1] # derivative of bias\n    gradients = {\"derivative_weight\": derivative_weight,\"derivative_bias\": derivative_bias}\n    return cost,gradients","99aa601a":"def update(w, b, x_train, y_train, learning_rate, num_of_iteration):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    for i in range(num_of_iteration):\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        \n        w = w - learning_rate * gradients[\"derivative_weight\"] # Update weight against to learning_rate and derivative\n        b = b - learning_rate * gradients[\"derivative_bias\"] # Update bias against to learning_rate and derivative\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n        \n    parameters = {\"weight\": w,\"bias\": b}\n        \n    # Visualize cost_list\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","25082458":"def predict(w,b, x_test):\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    y_prediction = np.zeros((1,x_test.shape[1])) # We've created an array equal to the number of feature\n    for i in range(z.shape[1]):\n        if z[0,i] <= 0.5:\n            y_prediction[0,i] = 0\n        else:\n            y_prediction[0,i] = 1\n    return y_prediction","a243eaf8":"def logistic_regression(x_train,x_test,y_train,y_test,learning_rate,num_of_iterations):\n    dimension = x_train.shape[0] # Number of feature\n    w,b = initalize_weight_bias(dimension)\n    parameters, gradients, cost_list = update(w,b,x_train, y_train, learning_rate, num_of_iteration)\n    \n    test_prediction = predict(parameters[\"weight\"],parameters[\"bias\"], x_test) # We predict against to x_test\n    train_prediction = predict(parameters[\"weight\"],parameters[\"bias\"], x_train) # We predict against to x_train\n    \n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(train_prediction - y_train)) * 100))\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(test_prediction - y_test)) * 100))\n    print(\"cost: {}\".format(min(cost_list)))\n    return test_prediction","ff026ad7":"learning_rate = 5\nnum_of_iteration = 300\ntest_prediction = logistic_regression(x_train,x_test,y_train,y_test,learning_rate,num_of_iteration).tolist()[0]","5d945e97":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ny_predict = test_prediction # test_prediction -> predicted values\ny_true = y_test\n\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true,y_predict) # We use confusion matrix for comparison\n\nf, ax = plt.subplots(figsize = (5,5))\nsns.heatmap(cm,annot = True, linewidths = 0.5, linecolor = \"red\", fmt = \".0f\",ax = ax)\nplt.xlabel(\"predicted\")\nplt.ylabel(\"real\")\nplt.show()\n# As you can see, our model has estimated 3 values wrong","38ec8064":"<font color='blue'>\n### **Initalize**\n<font color='green'>\n- We need to Initial values for start learning, that's why we use this function","48d30ee4":"<font color='blue'>\n### Sigmoid","2d7305cd":"<font color='blue'>\n### Forward - Backward Propagation\n<font color='green'>\n- We will calculate the cost function and update our weight and bias values","ef27958f":"<font color='red'>\n# Functions","62849bef":"<font color='red'>\n## Compare Predicted Values with Real Values","70e6abff":"<font color='blue'>\n### Prediction","b68da9e2":"<font color='blue'>\n### Update Weight and Bias","e340331d":"<font color='blue'>\n### Train - Test Split","a6d3e66a":"<font color='red'>\n### Start Training","645e9dc7":"<font color='blue'>\n### Assemble"}}