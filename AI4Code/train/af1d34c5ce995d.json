{"cell_type":{"68a24bfb":"code","ec01fa41":"code","d62a0754":"code","d7d1b1c4":"code","5eecc94f":"code","92659745":"code","21a24c65":"code","7afaef9e":"code","d7a19f3d":"code","e112b238":"code","c708b65c":"code","3bb59123":"code","6e684005":"code","ac337c28":"code","c59a278d":"code","759573c5":"code","69f1d6a2":"code","bac36428":"code","6beecb45":"code","ddefa4d5":"code","d33a5dcd":"code","376001f2":"code","02040ade":"code","13b1fff7":"code","e03c5b40":"code","e033ce24":"code","4db1c35b":"code","a7fb02db":"code","6b54f2d2":"code","cbfaeaa0":"code","0c0dc577":"code","40798a34":"code","9f5a9ccb":"code","9ddca7e4":"code","7d670c13":"code","69fb8e4d":"markdown","f0558010":"markdown","f33ea9a5":"markdown","5419e192":"markdown","0b9556f5":"markdown","9a83bd8c":"markdown","5ac01aaf":"markdown","7d5481f1":"markdown","4e429434":"markdown","ffcf816d":"markdown","7a70790f":"markdown","f351c761":"markdown","3cf45dd5":"markdown","fe213b3e":"markdown","ec2645fb":"markdown","c9cc4f79":"markdown","63bcff84":"markdown","a674fd41":"markdown","42935a04":"markdown","d70d4e1c":"markdown","7ce19bde":"markdown","3052ed8d":"markdown","f8d162af":"markdown","2060ceb9":"markdown","84303400":"markdown","9f1989ab":"markdown","36260879":"markdown","efe1ade4":"markdown","3d737b55":"markdown","02de6cc0":"markdown"},"source":{"68a24bfb":"import numpy as np","ec01fa41":"a = np.array([1, 4, 8])\nb = np.array([[1, 2, 3], [4, 5, 6]])\n\nprint(f'A 1D array is like :\\n {a}\\n \\n And a 2D one is like : \\n {b}')","d62a0754":"type(a), type(b)","d7d1b1c4":"full_with = np.full((2,2), 3)\nprint(f'An array full with 3 :\\n {full_with}\\n')\n      \nzeros = np.zeros((2,2))\nprint(f'An array full with zeros :\\n {zeros}\\n')\n\nones = np.ones((2,2))\nprint(f'An array full with ones :\\n {ones}\\n')\n      \neye = np.eye(2)\nprint(f'An identity matrix :\\n {eye}\\n')\n      \nrandom = np.random.randn(2,2)\nprint(f'An array full with random values :\\n {random}\\n')\n      \nrandom_2d = np.random.randint(2,7, [2,2])\nprint(f'An array with two rows and two columns full of random values between 2 and 7 : \\n {random_2d}\\n')\n\nsep = np.linspace(1, 3, 5)\nprint(f'An array full with 5 values between 1 and 3 :\\n {sep}\\n')\n","5eecc94f":"a = np.array([2.3411, 5.666],  np.float16)\na","92659745":"a = np.array([[2, 6, 6, 4, 5, 3],\n       [4, 0, 1, 9, 7, 1]])","21a24c65":"a[1,3]","7afaef9e":"a[1:2]","d7a19f3d":"a[:, 2:5]","e112b238":"a[::2, ::2]","c708b65c":"import matplotlib.pyplot as plt\nfrom scipy import misc","3bb59123":"face = misc.face(gray = True)\nplt.imshow(face, cmap = plt.cm.gray)","6e684005":"plt.imshow(face[::2, ::2])","ac337c28":"a","c59a278d":"a < 6","759573c5":"a[a < 6]","69f1d6a2":"a[(a < 6) & (a > 2)]","bac36428":"a[a % 2 == 0]","6beecb45":"print(\"Mean height:                         \", a.mean())\nprint(\"Standard deviation:                  \", a.std())\nprint(\"Minimum height:                      \", a.min())\nprint(\"Maximum height:                      \", a.max())\nprint(\"Minimum over rows then over columns: \", a.min(axis=0), a.min(axis=1))","ddefa4d5":"print(\"25th percentile:   \", np.percentile(a, 25))\nprint(\"Median:            \", np.median(a))\nprint(\"75th percentile:   \", np.percentile(a, 75))","d33a5dcd":"a = np.array([[1,1], [1,1], [1,1]])\nb = np.array([[2,2], [2,2], [2,2]])","376001f2":"np.hstack((a, b)) # np.concatenate((a, b), axis = 1) do the same ","02040ade":"np.vstack((a, b)) # np.concatenate((a, b), axis = 0) do the same ","13b1fff7":"a = np.random.randint(0,10, [2,6])\na","e03c5b40":"a.reshape((3,4))","e033ce24":"a.ravel()","4db1c35b":"a = np.array([1, np.nan, 4, 10])","a7fb02db":"a.mean()","6b54f2d2":"a[np.isnan(a)] = 0\na","cbfaeaa0":"a = np.array([[1,2,3], [4,5,6]])\na","0c0dc577":"a.T","40798a34":"b = np.array([[1,2,3], [4,5,6], [7, 8, 9]])\na.dot(b)","9f5a9ccb":"np.linalg.eig(b)","9ddca7e4":"a + 3 # broadcasting on 3","7d670c13":"np.array([[2,2,1], [4,2,5]]) + np.array([[2], [3]])","69fb8e4d":"With slicing we get a subset of all elements from the array based on their indexes. Here, we extract the portion of a particular array :","f0558010":"## 1. Array \nWe used to work with lists in Python to perform operations, but these operations are always limited by the fact that they consum more CPU time and they are slow to process, especially when it is about scientific calculations for example! That's why we move to use another powerful data structure for efficient computation of arrays and matrices which is Array Object.","f33ea9a5":"Or just even numbers :","5419e192":"## 4. Aggregate Functions\n Aggregate functions are often used to derive descriptive statistics as we will see in the following examples :","0b9556f5":"Or even get the eigenvectors and eigenvalues :","9a83bd8c":"## 3. Boolean indexing with example\n\nIt is a method for selecting contents from an array based on logical conditions.","5ac01aaf":"## 6. Nan Correction","7d5481f1":"## 5. Manipulations \nWe can also generate some new data structures based on the existing arrays by changing the shape or merging it.","4e429434":"We get numbers which are small than 6 :","ffcf816d":"Using boolean indexing and replace nan values with 0","7a70790f":"we can also reshape our array from (a, b) shape to (na, nb) if a x b = na x nb","f351c761":"Or even vertically :","3cf45dd5":"Let;s create a mask for our boolean indexing :","fe213b3e":"We can change the type of our array values :\nPS : the type may be too important when it comes to deal with big dataset where data types take more memory space!","ec2645fb":"# Intro :\n\nNumPy is a Python library used to perform numerical computations with large datasets. Numpy stands for Numerical Python and it is a popular library used by data scientists, especially for machine learning problems. NumPy is useful during pre-processing the data before you train it using a machine learning algorithm.\n\n**Numpy serves to do many great things :**\n\n![image.png](attachment:3ec35957-cd40-410f-a690-32e147c0d598.png)\n\nAnd especially in this brief notebook, you will see the more important ones as a begineer :\n\n1. **Array**\n\n2. **Indexing and Slicing**\n\n3. **Boolean indexing with example**\n\n4. **Aggregate Functions**\n\n5. **Manipulations**\n\n6. **Nan Correction**\n\n7. **Linear Algebra**\n\n8. **Broadcasting**","c9cc4f79":"as u see we got the result because 3 x 4 = 6 x 2\n\nWe can also turn our array into 1D array :","63bcff84":"## 2. Indexing and Slicing\nWith indexing we create a reference to an array by its particular position within the iterable :","a674fd41":"### If you like this notebook, please don't forget to upvote it!","42935a04":"We can stack the sequence of input arrays horizontally (i.e. column wise) to make a single array.","d70d4e1c":"We can use this technique to do some kind of compression of images :\n ","7ce19bde":"In actual project engineering, we often need some specific data, and some helper functions are provided in NumPy to create\/initialize an array, here are someones :\n\n- **zeros:** used to create an array whose elements are all 0\n- **ones:** used to create an array whose elements are all 1\n- **full:** used to create an array whose elements are all equal to the number in parameter\n- **eye:** to create an identity matrix\n- **linespace:** used to create an array by specifying the range and the number of elements\n- **random:** used to generate random numbers","3052ed8d":"## 8. Broadcasting","f8d162af":"When doing Data Science you may encouter many nan values in your data, and you want to check its mean before doing anaything else, that's why we find nanmean function for that purpose :","2060ceb9":"We can calculate the transpose by :","84303400":"Broadcasting is how numpy treats arrays with different shapes during arithmetic operations.\n\nIt consists in extending the dimensions of an array.\n \nPS1 : a and b should have same dimension (a:(2,3) and b:(2,3)) or equal to 1 (a:(2,3) and b:(2,1))\nPS2 : There are, cases where broadcasting is a bad idea because it leads to inefficient use of memory that slows computation.\n\n![image.png](attachment:image.png)","9f1989ab":"Let's see now the compressed image :","36260879":"With nan values we can;t calculate any statistical property :","efe1ade4":"Or the ones which are small than 6 and greater than 2 :","3d737b55":"## 7. Linear Algebra","02de6cc0":"Or the product between two arrays with :"}}