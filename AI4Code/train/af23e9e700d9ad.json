{"cell_type":{"df571cf6":"code","6b1e1625":"code","4cbe8d32":"code","e331fc27":"code","13097a43":"code","a5cafdd1":"code","67c20776":"code","99424186":"code","e7297739":"code","3b39873b":"code","da69f301":"code","3ff0dbb3":"code","2e4207ea":"code","02b810f3":"code","376982af":"code","15604645":"code","12dfc164":"code","eb4753e8":"code","9b2908de":"code","e9f6e480":"code","f41fa471":"code","96678d64":"code","1690daa6":"code","aa5af114":"code","307e736e":"code","e2e3f347":"code","8302fae6":"code","8ccbd310":"code","e77efdb1":"code","90159745":"code","a4a5ccc7":"code","3ef9521b":"code","30057428":"code","72c4d39c":"code","94176705":"code","42526e2d":"code","f4d4962a":"code","01924fdf":"code","263c9c54":"code","83e131d1":"code","ac11a76a":"code","205564dd":"code","6dee4ab4":"code","ec3c5098":"code","2d0a137e":"code","682a9127":"code","ec33e3ca":"code","990114b2":"markdown","e3461a2b":"markdown","4f97ee31":"markdown","85b49838":"markdown","a6c3c2cc":"markdown","daa8dafe":"markdown","246417a7":"markdown","e66d9ace":"markdown","520a626e":"markdown","9538d5f1":"markdown","0d9377ca":"markdown","2673a452":"markdown","c8d60a77":"markdown","a137699e":"markdown","f2af6ea3":"markdown","9c263b61":"markdown","7b471ee4":"markdown","d9a27f4a":"markdown","7b5cf6ea":"markdown","29e66abb":"markdown","ed37f991":"markdown","5fed4edd":"markdown","c854a4ba":"markdown","b8bab647":"markdown","2fcc5ad8":"markdown"},"source":{"df571cf6":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6b1e1625":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\n\ndf_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","4cbe8d32":"df_train.head()","e331fc27":"df_test.head()","13097a43":"df_train.shape","a5cafdd1":"df_test.shape","67c20776":"df_train.describe()","99424186":"df_test.describe()","e7297739":"df_train.columns , df_test.columns","3b39873b":"#correlation matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncorrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(15, 12))\nsns.heatmap(corrmat, vmax=.8, square=True)","da69f301":"#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.set(font_scale=1.25)\nplt.figure(figsize=(10,10))\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","3ff0dbb3":"'''#before log transformation\nsns.distplot(df_train['SalePrice']);\nfig_saleprice = plt.figure(figsize=(12,5))\nresult1 = stats.probplot(df_train['SalePrice'],plot = plt)'''","2e4207ea":"'''#applying log transformation\ndf_train['SalePrice'] = np.log(df_train['SalePrice'])'''","02b810f3":"'''#after log transformation\nsns.distplot(df_train['SalePrice']);\nfig_saleprice2 = plt.figure(figsize=(12,5))\nresult3 = stats.probplot(df_train['SalePrice'],plot = plt)'''","376982af":"#below code is used to see which column is more correlated to dependent varibale so first ten columns are more correlated compare to other columns\ncorr = df_train.corr()[\"SalePrice\"]\ncorr[np.argsort(corr, axis=0)[::-1]]","15604645":"fig = plt.subplots()\nplt.scatter(x = df_train['GrLivArea'], y = df_train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()\n","12dfc164":"fig1= plt.subplots()\nplt.scatter(x = df_train['OverallQual'], y = df_train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('OverallQual', fontsize=13)\nplt.show()","eb4753e8":"fig2= plt.subplots()\nplt.scatter(x = df_train['GarageCars'], y = df_train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GarageCars', fontsize=13)\nplt.show()","9b2908de":"fig3= plt.subplots()\nplt.scatter(x = df_train['GarageArea'], y = df_train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GarageArea', fontsize=13)\nplt.show()","e9f6e480":"fig4= plt.subplots()\nplt.scatter(x = df_train['TotalBsmtSF'], y = df_train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('TotalBsmtSF', fontsize=13)\nplt.show()","f41fa471":"fig5= plt.subplots()\nplt.scatter(x = df_train['1stFlrSF'], y = df_train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('1stFlrSF', fontsize=13)\nplt.show()","96678d64":"fig6= plt.subplots()\nplt.scatter(x = df_train['FullBath'], y = df_train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('FullBath', fontsize=13)\nplt.show()","1690daa6":"fig7= plt.subplots()\nplt.scatter(x = df_train['TotRmsAbvGrd'], y = df_train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('TotRmsAbvGrd', fontsize=13)\nplt.show()","aa5af114":"fig8= plt.subplots()\nplt.scatter(x = df_train['YearBuilt'], y = df_train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('YearBuilt', fontsize=13)\nplt.show()","307e736e":"'''#deleting outliers\ndf = df.drop(df[(df['GrLivArea']>4000) & (df['SalePrice']<300000)].index)\ndf = df.drop(df[(df['GarageArea']>1200) & (df['SalePrice']<500000)].index)\ndf = df.drop(df[(df['TotalBsmtSF']>3000) & (df['SalePrice']<700000)].index)\ndf = df.drop(df[(df['1stFlrSF']>2700) & (df['1stFlrSF']<700000)].index)'''","e2e3f347":"#scatterplot\nsns.set()\ncolumns = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', '1stFlrSF']\nsns.pairplot(df_train[columns], size = 3)\nplt.show();","8302fae6":"#feature engineering\ndf_train['TotalSF'] = df_train['TotalBsmtSF']+df_train['1stFlrSF']+df_train['2ndFlrSF']\ndf_train=df_train.drop(columns={'1stFlrSF', '2ndFlrSF','TotalBsmtSF'})\ndf_train['wholeExterior'] = df_train['Exterior1st']+df_train['Exterior2nd']\ndf_train=df_train.drop(columns={'Exterior1st','Exterior2nd'})\ndf_train['Bsmt'] = df_train['BsmtFinSF1']+ df_train['BsmtFinSF2']\ndf_train = df_train.drop(columns={'BsmtFinSF1','BsmtFinSF2'})\ndf_train['TotalBathroom'] = df_train['FullBath'] + df_train['HalfBath']\ndf_train = df_train.drop(columns={'FullBath','HalfBath'})\n\n\ndf_test['TotalSF'] = df_test['TotalBsmtSF']+df_test['1stFlrSF']+df_test['2ndFlrSF']\ndf_test=df_test.drop(columns={'1stFlrSF', '2ndFlrSF','TotalBsmtSF'})\ndf_test['wholeExterior'] = df_test['Exterior1st']+df_test['Exterior2nd']\ndf_test=df_test.drop(columns={'Exterior1st','Exterior2nd'})\ndf_test['Bsmt'] = df_test['BsmtFinSF1']+ df_test['BsmtFinSF2']\ndf_test = df_test.drop(columns={'BsmtFinSF1','BsmtFinSF2'})\ndf_test['TotalBathroom'] = df_test['FullBath'] + df_test['HalfBath']\ndf_test = df_test.drop(columns={'FullBath','HalfBath'})","8ccbd310":"frames = [df_train,df_test]\ndf = pd.concat(frames,keys=['train','test'])","e77efdb1":"df","90159745":"df_missing=df.isnull().sum().sort_values(ascending=False)","a4a5ccc7":"df_missing","3ef9521b":"cat_col = df.select_dtypes(include=['object'])\ncat_col.isnull().sum()\ncat_col.columns","30057428":"num_col = df.select_dtypes(include=['int64', 'float64'])\nnum_col.isnull().sum()\nnum_col.columns","72c4d39c":"# handling missing values of numerical columns\ndf['LotFrontage'] = df['LotFrontage'].fillna(value=0)\ndf['GarageYrBlt'] = df['GarageYrBlt'].fillna(value=0)\ndf['MasVnrArea'] = df['MasVnrArea'].fillna(value=0)\ndf['BsmtFullBath'] = df['BsmtFullBath'].fillna(value=0)\ndf['BsmtHalfBath'] = df['BsmtHalfBath'].fillna(value=0)\ndf['GarageArea'] = df['GarageArea'].fillna(value=0)\ndf['GarageCars'] = df['GarageCars'].fillna(value=0)\ndf['BsmtUnfSF'] = df['BsmtUnfSF'].fillna(value=0)\ndf['Bsmt'] = df['Bsmt'].fillna(value=0)\ndf['TotalSF'] = df['TotalSF'].fillna(value=0)","94176705":"# handling missing values of categorical columns\ndf['MSZoning'] = df['MSZoning'].fillna(value='None')\ndf['GarageQual'] = df['GarageQual'].fillna(value='None')\ndf['GarageCond'] = df['GarageCond'].fillna(value='None')\ndf['GarageFinish'] = df['GarageFinish'].fillna(value='None')\ndf['GarageType'] = df['GarageType'].fillna(value='None')\ndf['BsmtExposure'] = df['BsmtExposure'].fillna(value='None')\ndf['BsmtCond'] = df['BsmtCond'].fillna(value='None')\ndf['BsmtQual'] = df['BsmtQual'].fillna(value='None')\ndf['BsmtFinType2'] = df['BsmtFinType2'].fillna(value='None')\ndf['BsmtFinType1'] = df['BsmtFinType1'].fillna(value='None')\ndf['MasVnrType'] = df['MasVnrType'].fillna(value='None')\ndf['Utilities'] = df['Utilities'].fillna(value='None')\ndf['Functional'] = df['Functional'].fillna(value='None')\ndf['Electrical'] = df['Electrical'].fillna(value='None')\ndf['KitchenQual'] = df['KitchenQual'].fillna(value='None')\ndf['SaleType'] = df['SaleType'].fillna(value='None')\ndf['wholeExterior'] = df['wholeExterior'].fillna(value='None')","42526e2d":"df = df.drop(columns={'PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu'})","f4d4962a":"df.columns","01924fdf":"df_main = pd.get_dummies(df)\ndf_main","263c9c54":"df_main.shape","83e131d1":"#correlation matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncorrmat = df_main.corr()\nf, ax = plt.subplots(figsize=(15, 12))\nsns.heatmap(corrmat, vmax=.8, square=True)","ac11a76a":"#saleprice correlation matrix\nk = 40 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(df_main[cols].values.T)\nsns.set(font_scale=1.25)\nplt.figure(figsize=(10,10))\nhm = sns.heatmap(cm, cbar=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","205564dd":"EID = df_main.loc['test']\ndf_test = df_main.loc['test']\ndf_train = df_main.loc['train']\nEID = EID.Id","6dee4ab4":"df_test.drop(['SalePrice','Id'], axis =1, inplace=True)","ec3c5098":"X_train = df_train.drop(['SalePrice','Id'], axis = 1)\ny_train = df_train['SalePrice']","2d0a137e":"import xgboost\nxgboost = xgboost.XGBRegressor(learning_rate=0.05,\n                      colsample_bytree = 0.5,\n                      subsample = 0.8,\n                      n_estimators=1000,\n                      max_depth=5,\n                      gamma=5)\n\nxgboost.fit(X_train, y_train)\ny_pred = xgboost.predict(df_test)","682a9127":"y_pred ","ec33e3ca":"#making main csv file\nmain_submission = pd.DataFrame({'Id': EID, 'SalePrice': y_pred})\n\nmain_submission.to_csv(\"submission.csv\", index=False)\nmain_submission.head()","990114b2":"My main objectives on this project are:\n\n* Applying exploratory data analysis and trying to get some insights about our dataset\n* Getting data in better shape by transforming and feature engineering to help us in building better models\n* Building and tuning couple models to get some stable results on predicting housing prices","e3461a2b":"i am going to plot a heatmap for just fun so if you don't understand it go ahead even i don't understand this below heatmap.LOL","4f97ee31":"# Meeting the data\nWe're going to start by loading the data and taking first look on it as usual. For the column names we have great dictionary file in our dataset location so we can get familiar with them in no time. I highly recommend looking at that before you start working on the dataset.","85b49838":"we are going to plot first 10 highly correlated columns to see how many outliers we have in our dataset","a6c3c2cc":"now we are saperating categorical columns and numerical columns for filling missing values","daa8dafe":"# some feature engineering","246417a7":"as we can see that in train there are 1460 rows with 81 columns and in test dataset 1459 rows with 80 columns. our dependent varibale is **'SalePrice'**","e66d9ace":"below code is used to see top 10 highly correlated columns with saleprice in which OverallQual,GrLiveArea,Garagecars,GarageArea,TotalBsmtSF and 1stFlrSF are highly correlated      ","520a626e":"i have applied same technique as i applied in numerical columns where i put 0 and here i have replaced all the NaN values with None.That means if the original dataset have nan values , it means that the particular house is doesn't have that thing.for example, if id no = 220 do not have garage then why we put values that id no = 220 has a garage.\n\nso i replaced them with None.","9538d5f1":"# **OUTLIERS**","0d9377ca":"**so what is log transformation:-log transformation is used to transform skewed data to approximately conform to normality.**","2673a452":"# categorical columns","c8d60a77":"here i have merged some columns to just reduce complexity i have tried with all the columns but i didn't get this much accuracy which i am getting right now","a137699e":"We have 1460 observations of 80 variables in the training dataframe. The variables are described below:\n\nSalePrice - This is the target variable\/dependent variable that you're trying to predict.\n\n* MSSubClass: The building class\n* MSZoning: The general zoning classification\n* LotFrontage: Linear feet of street connected to property\n* LotArea: Lot size in square feet\n* Street: Type of road access\n* Alley: Type of alley access\n* LotShape: General shape of property\n* LandContour: Flatness of the property\n* Utilities: Type of utilities available\n* LotConfig: Lot configuration\n* LandSlope: Slope of property\n* Neighborhood: Physical locations within Ames city limits\n* Condition1: Proximity to main road or railroad\n* Condition2: Proximity to main road or railroad (if a second is present)\n* BldgType: Type of dwelling\n* HouseStyle: Style of dwelling\n* OverallQual: Overall material and finish quality\n* OverallCond: Overall condition rating\n* YearBuilt: Original construction date\n* YearRemodAdd: Remodel date\n* RoofStyle: Type of roof\n* RoofMatl: Roof material\n* Exterior1st: Exterior covering on house\n* Exterior2nd: Exterior covering on house (if more than one material)\n* MasVnrType: Masonry veneer type\n* MasVnrArea: Masonry veneer area in square feet\n* ExterQual: Exterior material quality\n* ExterCond: Present condition of the material on the exterior\n* Foundation: Type of foundation\n* BsmtQual: Height of the basement\n* BsmtCond: General condition of the basement\n* BsmtExposure: Walkout or garden level basement walls\n* BsmtFinType1: Quality of basement finished area\n* BsmtFinSF1: Type 1 finished square feet\n* BsmtFinType2: Quality of second finished area (if present)\n* BsmtFinSF2: Type 2 finished square feet\n* BsmtUnfSF: Unfinished square feet of basement area\n* TotalBsmtSF: Total square feet of basement area\n* Heating: Type of heating\n* HeatingQC: Heating quality and condition\n* CentralAir: Central air conditioning\n* Electrical: Electrical system\n* 1stFlrSF: First Floor square feet\n* 2ndFlrSF: Second floor square feet\n* LowQualFinSF: Low quality finished square feet (all floors)\n* GrLivArea: Above grade (ground) living area square feet\n* BsmtFullBath: Basement full bathrooms\n* BsmtHalfBath: Basement half bathrooms\n* FullBath: Full bathrooms above grade\n* HalfBath: Half baths above grade\n* Bedroom: Number of bedrooms above basement level\n* Kitchen: Number of kitchens\n* KitchenQual: Kitchen quality\n* TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n* Functional: Home functionality rating Fireplaces: Number of fireplaces\n* FireplaceQu: Fireplace quality\n* GarageType: Garage location\n* GarageYrBlt: Year garage was built\n* GarageFinish: Interior finish of the garage\n* GarageCars: Size of garage in car capacity\n* GarageArea: Size of garage in square feet\n* GarageQual: Garage quality\n* GarageCond: Garage condition\n* PavedDrive: Paved driveway\n* WoodDeckSF: Wood deck area in square feet\n* OpenPorchSF: Open porch area in square feet\n* EnclosedPorch: Enclosed porch area in square feet\n* 3SsnPorch: Three season porch area in square feet\n* ScreenPorch: Screen porch area in square feet\n* PoolArea: Pool area in square feet\n* PoolQC: Pool quality\n* Fence: Fence quality\n* MiscFeature: Miscellaneous feature not covered in other categories\n* MiscVal: $Value of miscellaneous feature\n* MoSold: Month Sold\n* YrSold: Year Sold\n* SaleType: Type of sale\n* SaleCondition: Condition of sale","f2af6ea3":"There are 2919 observations with 76 columns. including the target variable SalePrice and Id.The train set has 1460 observations while the test set has 1459 observations, the target variable SalePrice is absent in test. The aim of this study is to train a model on the train set and use it to predict the target SalePrice of the test set.","9c263b61":"# I hope everyone is safe\n\n\n# A FRIENDLY MESSAGE\n\n\nHi Below is my first submission to the ever famous house price regression competition.The dataset for beginners into kaggle, I realized a lot of kernels to be full of long codes that intimidated me as a beginner. I landed up at top 22% in my 17th submission. Learned a lot in the process and looking forward to keep going on with other submissions.\n\nI know it is a very common problem set for anyone to submit and upload a kernel but I thought of sharing it anyway to share my approach hoping to get feedbacks from the community on how I can improve.\n\nHere I've tried to optimize my code and still providing the best results which I believe will not be intimidating for beginners and learners who are trying to get their first submission.\n\nI have taken a very basic approach and I hope you find it useful. If you do, please upvote, it'll just motivate me more to keep trying more and more problems.\n\nHOPING TO HEAR FROM YOU ALL. THANK YOU IN ADVANCE :)\n","7b471ee4":"# please do *upvote* if you like","d9a27f4a":"In below cell you have your numerical columns so i just replace NaN by 0. I have also tried mode,median and mean but i got best result in 0.if you want to do it then just fork my notebook and apply that functions.if you want that other function's code then just comment below i will give you the code in comment section.","7b5cf6ea":"**most missing values columns**\n\n\n**PoolQC**           2909\n\n\n**MiscFeature**      2814\n\n\n**Alley**            2721\n\n\n**Fence**            2348\n\n\n**FireplaceQu**      1420  ","29e66abb":"# numerical columns","ed37f991":"# Handling Missing Data","5fed4edd":"as you can see above this five columns has more missing values arounf 90% + so i decided to drop them.","c854a4ba":"**We're going to merge the datasets here before we start editing it so we don't have to do these operations twice. Let's call it features since it has features only. So our data has 2919 observations and 79 features to begin with...**","b8bab647":"i have seen lots of notebooks in which they delete outliers but i am not going to do it because if i do my accuracy will be decrease. i don't know why if you know then just tell me in comment box.it will be appreciated.\n\nbut below i am adding that code incase someone want it.","2fcc5ad8":"top 40 correlated columns after data preprocessing"}}