{"cell_type":{"bb106213":"code","0ad1c8b1":"code","e391f32d":"code","6f4fc6a2":"code","1a3ecb00":"code","26d07fc7":"code","ed2553e9":"code","68c080cc":"code","9414a5c6":"code","4845a67f":"code","3d0b2f5e":"code","767a6d9c":"code","6e74bcf6":"markdown","1872b725":"markdown","517ddfb0":"markdown","67515b6f":"markdown","9036e719":"markdown","cb921a9f":"markdown","1e560cc7":"markdown","8cbb148c":"markdown","839dda59":"markdown","0841963f":"markdown","d3ad484f":"markdown","a8654dcf":"markdown","d7c02822":"markdown","cd754c3b":"markdown","e9b86ebe":"markdown"},"source":{"bb106213":"!conda install gdcm -c conda-forge -y","0ad1c8b1":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport pydicom as dicom\nimport cv2\nimport ast\nimport warnings\nfrom collections import Counter\nimport seaborn as sns\nimport pydicom\nwarnings.filterwarnings('ignore')","e391f32d":"path = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/'\ntrain_path = os.path.join(path, 'train')\ntest_path = os.path.join(path, 'test')\n\nflair_dir = 'FLAIR'\nt1w_dir = 'T1w'\nt1wce_dir = 'T1wCE'\nt2w_dir = 'T2w'\n\nos.listdir(path)","6f4fc6a2":"ldf = pd.read_csv(path + 'train_labels.csv')\nldf.head(5)","1a3ecb00":"ldf.groupby('MGMT_value').count()","26d07fc7":"def getFullId(id):\n    return str(id).zfill(5)\n    \ndef getFlairPath(id):\n    flair_path = os.path.join(train_path, getFullId(id), flair_dir)\n    return flair_path if os.path.isdir(flair_path) else False\n\ndef getT1wPath(id):\n    t1w_path = os.path.join(train_path, getFullId(id), t1w_dir)\n    return t1w_path if os.path.isdir(t1w_path) else False\n\ndef getT1wcePath(id):\n    t1wce_path = os.path.join(train_path, getFullId(id), t1wce_dir)\n    return t1wce_path if os.path.isdir(t1wce_path) else False\n\ndef getT2wPath(id):\n    t2w_path = os.path.join(train_path, getFullId(id), t2w_dir)\n    return t2w_path if os.path.isdir(t2w_path) else False\n\nprint('Missing FLAIR directories number = ', ldf['BraTS21ID'].apply(lambda x: getFlairPath(x)).tolist().count(False))\nprint('Missing T1w directories number = ', ldf['BraTS21ID'].apply(lambda x: getT1wPath(x)).tolist().count(False))\nprint('Missing T1wCE directories number = ', ldf['BraTS21ID'].apply(lambda x: getT1wcePath(x)).tolist().count(False))\nprint('Missing T2w directories number = ', ldf['BraTS21ID'].apply(lambda x: getT2wPath(x)).tolist().count(False))","ed2553e9":"def countFlairFiles(id):\n    path = getFlairPath(id)\n    return len([file for file in os.listdir(path)])\n\ndef countT1wFiles(id):\n    path = getT1wPath(id)\n    return len([file for file in os.listdir(path)])\n\ndef countT1wceFiles(id):\n    path = getT1wcePath(id)\n    return len([file for file in os.listdir(path)])\n\ndef countT2wFiles(id):\n    path = getT2wPath(id)\n    return len([file for file in os.listdir(path)])\n\nldf['FLAIR'] = ldf['BraTS21ID'].apply(lambda x: countFlairFiles(x))\nldf['T1w'] = ldf['BraTS21ID'].apply(lambda x: countT1wFiles(x))\nldf['T1wCE'] = ldf['BraTS21ID'].apply(lambda x: countT1wceFiles(x))\nldf['T2w'] = ldf['BraTS21ID'].apply(lambda x: countT2wFiles(x))","68c080cc":"sns.boxplot(x=\"variable\", y=\"value\", data=pd.melt(ldf[['FLAIR', 'T1w', 'T1wCE', 'T2w']]))\nplt.title('Number of images files by structural multi-parametric MRI')\nplt.show()","9414a5c6":"def get3ScaledImage(path):\n\n    dicom = pydicom.read_file(path)\n    img = dicom.pixel_array\n\n    r, c = img.shape\n    img_conv = np.empty((c, r, 3), dtype=img.dtype)\n    img_conv[:,:,2] = img_conv[:,:,1] = img_conv[:,:,0] = img\n\n    ## Step 1. Convert to float to avoid overflow or underflow losses.\n    img_2d = img_conv.astype(float)\n\n    ## Step 2. Rescaling grey scale between 0-255\n    img_2d_scaled = (np.maximum(img_2d,0) \/ img_2d.max()) * 255.0\n\n    ## Step 3. Convert to uint\n    img_2d_scaled = np.uint8(img_2d_scaled)\n    img_2d_scaled.reshape([img_2d_scaled.shape[0], img_2d_scaled.shape[1], 3])\n    \n    return img_2d_scaled, (c, r)\n\n","4845a67f":"id = 0\n\nnb = countFlairFiles(id)\npath = getFlairPath(id)\nframes =[]\n\nfor i in range(nb):\n    file_name = 'Image-' + str(i+1) + '.dcm'\n    img_path = os.path.join(path, file_name)\n    img_2d_scaled, size = get3ScaledImage(img_path)\n    frames.append(img_2d_scaled)\n\n\nout = cv2.VideoWriter('\/kaggle\/working\/video.mp4', 0x7634706d, 15, size)\nfor i in range(len(frames)):\n    out.write(frames[i])\n    \nout.release()\n\n","3d0b2f5e":"import matplotlib.animation as animation\n\nfrom matplotlib import animation, rc\n\nrc('animation', html='jshtml')\n\ndef create_animation(ims):\n    ims = ims\n    fps = 1\n    nSeconds = 10\n\n    fig = plt.figure( figsize=(9,9) )\n\n    a = ims[0]\n    im = plt.imshow(a)\n\n    def animate_func(i):\n        im.set_array(ims[i])\n        return [im]\n\n    anim = animation.FuncAnimation(fig, animate_func, frames = len(ims), interval = 1000\/\/24)\n    \n    return anim\n\nvideo = create_animation(frames)\nvideo","767a6d9c":"def plot_slices(num_rows, num_columns, size, data):\n\n    fig_width = 20\n    fig_height = (fig_width \/ num_columns) \/ (size[1] \/ size[0]) * num_rows\n    \n    fig, ax = plt.subplots(nrows=num_rows, ncols=num_columns, figsize=(fig_width, fig_height))\n    for i in range(num_rows):\n        for j in range(num_columns):\n            ax[i, j].imshow(data[i*num_columns+j], cmap=\"gray\")\n            ax[i, j].axis(\"off\")\n    plt.subplots_adjust(wspace=0, hspace=0, left=0, right=1, bottom=0, top=1)\n    plt.show()\n\nid = 5\n\nnb_flair = countFlairFiles(id)\npath_flair = getFlairPath(id)\nframes_flair = []\n\nfor i in range(nb_flair):\n    file_name = 'Image-' + str(i+1) + '.dcm'\n    img_path = os.path.join(path_flair, file_name)\n    img_2d_scaled, size = get3ScaledImage(img_path)\n    frames_flair.append(img_2d_scaled)\n    \nplot_slices(5, 6, size, frames[90:131])","6e74bcf6":"You can also visualize the sequence as below :","1872b725":"First of all, we define the path variable and check files and folders :","517ddfb0":"## **2. IMAGES \/ VIDEO**","67515b6f":"Let's plot somme slices :","9036e719":"Then we generate a video clip by reading file in sequence.\nHere is an example for the first Id (=0) and FLAIR structure.\n\nGenerated video is saved as mp4 file in th working directory. Feel free to download it to visualize the sequence in action.","cb921a9f":"It seems that there is some disparity between the Ids, it is perhaps on this point that we will have problems inherent to unbalanced datasets.","1e560cc7":"We can see that the data set is relatively well balanced.","8cbb148c":"## **1. DATA PROCESSING**","839dda59":"It's time to import data :","0841963f":"Feel free to test this notebook, and upvote ...","d3ad484f":"Let's define some functions to retreive full path from Id.<br>\nWe take this opportunity to check is subdirectories are created for all Id : ","a8654dcf":"# **RSNA-MICCAI Brain Tumor Radiogenomic Classification**\n# DATA EXPLORATION","d7c02822":"Let's display some stats :","cd754c3b":"We first create a function to convert dicom file to 3 channel image","e9b86ebe":"Everything seems to be ok, let's count files for each subdirectory :"}}