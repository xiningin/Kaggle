{"cell_type":{"455ccb63":"code","2a4ecf9d":"code","d8c4cebe":"code","c25d8485":"code","d12cf31e":"code","41420d32":"code","5ddf12de":"code","71f53502":"code","f3f9b2df":"code","9990cabc":"code","111a61cf":"code","84fddea6":"code","7ba1652e":"code","d7e35eff":"code","7cdda09b":"code","f11cf274":"code","8c5d1965":"code","0fd85de2":"code","b09ffdcb":"code","2e6728df":"code","bd5bbb19":"code","d75d8dde":"code","342a0ce4":"code","9d136df4":"code","d1b636c2":"code","5fcf8a38":"code","d1c14593":"code","745e55b4":"code","255a2517":"code","b71e9448":"code","4995aca9":"code","5a3de0a0":"code","4ac1594c":"code","70122778":"code","8409ecea":"code","6fbb96ae":"code","1234ab71":"code","84ef9db9":"code","013c4c80":"code","b688d3be":"code","ba2ed50c":"code","2e42a045":"code","e47f8de9":"code","005f7f54":"code","4a547bf7":"code","c34c610b":"code","43769b7a":"code","f8dd46f4":"code","39efb9b7":"code","3ae5188f":"code","8cd5538e":"code","2da6f33b":"code","a5576528":"code","b6b5fc35":"code","b9481b6d":"code","866fa52e":"code","a3990b4b":"code","d4ae7ada":"code","0d7fe0f1":"code","a621119d":"code","90350323":"code","975a7977":"code","e4f9e2e3":"code","f9b3d7aa":"code","7066c6b2":"code","de97bd61":"code","74f679eb":"markdown","ec932692":"markdown","9f36ce1a":"markdown","557793d0":"markdown","0441a763":"markdown","55030869":"markdown","979cf4d4":"markdown","03667463":"markdown","3322a437":"markdown","633dcea8":"markdown","f123954b":"markdown","50457f3d":"markdown","7b60c050":"markdown","3d48657c":"markdown","bb26b549":"markdown","806c4e15":"markdown","2b66a2cf":"markdown","5e3d16b3":"markdown","a1fff5e8":"markdown","5bf5352f":"markdown","b24bee18":"markdown","60ccb6ef":"markdown","db5eda8b":"markdown","8485171a":"markdown","61e5ec32":"markdown","78840648":"markdown","e6b484c0":"markdown","de71950d":"markdown","65a6c6a4":"markdown","6a889f46":"markdown","7631a2d5":"markdown","bb80ae2d":"markdown","19e10cb4":"markdown","1e472296":"markdown","2f7d991d":"markdown","a718c451":"markdown","a9041645":"markdown","2045a565":"markdown","d98331c5":"markdown","b09ff88c":"markdown","fbdc4371":"markdown","e5097b3a":"markdown","55e78d76":"markdown","1e38ec5c":"markdown","09efdbcd":"markdown","8fefbe2d":"markdown","418f6713":"markdown","8ab562e7":"markdown","59e40509":"markdown","b1cc6e8c":"markdown","4427feb9":"markdown","4015dca2":"markdown","3de99d4f":"markdown","80ef9ede":"markdown","2b787201":"markdown","292b0c59":"markdown","4f2e3429":"markdown","4d268bbe":"markdown","a10eae1d":"markdown","735cea2d":"markdown","25383682":"markdown","d4676f82":"markdown","03444237":"markdown","a1945a92":"markdown","79b3cc1e":"markdown","776424ab":"markdown","5f35bcf1":"markdown","d0caab34":"markdown","3731bba1":"markdown","1e1362b4":"markdown","f8f7ad46":"markdown","4d0fcb29":"markdown","37c70a29":"markdown","6a7e7953":"markdown","780579a5":"markdown","c776dcfa":"markdown","b019f682":"markdown","f864814c":"markdown","2c3e582a":"markdown","a226e0bd":"markdown","b88bbab9":"markdown","816986cc":"markdown","baba598d":"markdown","73e927d2":"markdown","dfe37eaa":"markdown","a01d52d8":"markdown","6162b612":"markdown","5441f08b":"markdown","d484ce09":"markdown","aab8d523":"markdown","e164e5c5":"markdown","1b8bf711":"markdown","cff2e66d":"markdown","9dab4922":"markdown","bb2704ae":"markdown","ac17b152":"markdown","4745a946":"markdown","b372bd4f":"markdown","34e0b9fe":"markdown","f1228a3a":"markdown","95c6eaf5":"markdown","68d9c13a":"markdown","2b8db953":"markdown","6355e9e9":"markdown","e5a46134":"markdown","92f28f90":"markdown","5f91de66":"markdown","f65e8ec1":"markdown","4f48c4a5":"markdown","25997c9b":"markdown","3c8fe3ee":"markdown","dc5932b3":"markdown","a04747ab":"markdown","923a0bcf":"markdown"},"source":{"455ccb63":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport spacy\nfrom wordcloud import WordCloud","2a4ecf9d":"data = pd.read_csv('..\/input\/netflix-rotten-tomatoes-metacritic-imdb\/netflix-rotten-tomatoes-metacritic-imdb.csv')\ndf = data.copy()\ndf.head()","d8c4cebe":"df.info()","c25d8485":"df.isnull().sum()","d12cf31e":"df = df.drop(columns = [ 'Metacritic Score', 'Boxoffice', 'Production House', 'Netflix Link', 'IMDb Link',\n        'Poster', 'TMDb Trailer', 'Trailer Site'], axis = 1)","41420d32":"df['Release Date']= pd.to_datetime(df['Release Date'])\ndf['Netflix Release Date']= pd.to_datetime(df['Netflix Release Date'])","5ddf12de":"df['Released_Year'] = pd.DatetimeIndex(df['Release Date']).year\ndf['Released_Year_Net'] = pd.DatetimeIndex(df['Netflix Release Date']).year","71f53502":"df.head(1)","f3f9b2df":"colors = ['black',] * 2\ncolors[0] = 'crimson'\n\ncount = df['Series or Movie'].value_counts()\n\nfig = go.Figure(data=[go.Bar(\n    x = df[\"Series or Movie\"],\n    y = count,\n    text = count,\n    textposition='auto',\n    marker_color=colors # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'More Movie \ud83d\udcfd\u200d\ufe0f or Tv Series \ud83d\udcfa?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  barmode='group', xaxis_tickangle=-45,\n                  yaxis=dict(\n                  title='Quantity',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Category',\n                  titlefont_size=14))","9990cabc":"df_movie = df[df['Series or Movie']=='Movie']\ndf_movie.head(1)","111a61cf":"df_series = df[df[\"Series or Movie\"] == \"Series\"]\ndf_series.head(1)","84fddea6":"df_series_gen = df_series.dropna(subset=['Genre'])","7ba1652e":"colors_10 = ['DarkRed', 'FireBrick','Red', 'Crimson', 'IndianRed', 'slategray', 'gray', 'dimgrey', 'DarkSlateGrey', 'black']\nseries_gen_list = df_series_gen.Genre.str.split(',') #split the list into names\ns_gen_list = {} #create an empty list\nfor genres in series_gen_list: # for any names in series_gen_list\n    for genre in genres: # for any genre in genres\n        if (genre in s_gen_list): #if this genre is already present in the s_gen_list\n            s_gen_list[genre]+=1 # increase his value\n        else:  # else\n            s_gen_list[genre]=1 # Create his index in the list\ns_gen_df = pd.DataFrame(s_gen_list.values(),index = s_gen_list.keys(),\n                        columns = {'Counts of Genres in Tv Series'}) #Create a s_gen_df\ns_gen_df.sort_values(by = 'Counts of Genres in Tv Series',ascending = False,inplace = True) #Sort the dataframe in ascending order\ntop_10_s_gen = s_gen_df[0:10] ","d7e35eff":"fig = go.Figure(data=[go.Bar(\n    x = top_10_s_gen.index,\n    y = top_10_s_gen['Counts of Genres in Tv Series'],\n    text = top_10_s_gen['Counts of Genres in Tv Series'],\n    textposition='auto',\n    marker_color=colors_10 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'Which are the most popular genres in Tv Series?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='Quantity',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Genres',\n                  titlefont_size=14))","7cdda09b":"df_movie_gen = df_movie.dropna(subset=['Genre'])","f11cf274":"movie_gen_list = df_movie_gen.Genre.str.split(', ') #split the list into names\nm_gen_list = {} #create an empty list\nfor genres in movie_gen_list: # for any genres in movie_gen_list\n    for genre in genres: # for any genre in genres\n        if (genre in m_gen_list): #if this name is already present in the m_gen_list\n            m_gen_list[genre]+=1 # increase his value\n        else:  # else\n            m_gen_list[genre]=1 # Create his index in the list\nm_gen_df = pd.DataFrame(m_gen_list.values(),index = m_gen_list.keys(),\n                        columns = {'Counts of Genres in Movies'}) #Create a m_gen_df\nm_gen_df.sort_values(by = 'Counts of Genres in Movies',ascending = False,inplace = True) #Sort the dataframe in ascending order\ntop_10_m_gen = m_gen_df[0:10] ","8c5d1965":"fig = go.Figure(data=[go.Bar(\n    x = top_10_m_gen.index,\n    y = top_10_m_gen['Counts of Genres in Movies'],\n    text = top_10_m_gen['Counts of Genres in Movies'],\n    textposition='auto',\n    marker_color=colors_10 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'Which are the most popular genres in Movies?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='Quantity',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Genres',\n                  titlefont_size=14))","0fd85de2":"df_series_tag = df_series.dropna(subset=['Tags'])","b09ffdcb":"nlp = spacy.load('en')\nseries_tags = df_series_tag['Tags']\nfor tag in series_tags:\n    doc = nlp(tag)\nwords = [token.text\n         for token in doc\n         if not token.is_stop and not token.is_punct]\nrest_string = ' '\nfor i in words:\n   rest_string = rest_string+i+' '\n    \nwordcloud = WordCloud(width = 1400, height = 1400, \n                background_color ='lavenderblush',  \n                min_font_size = 5).generate(rest_string) \n  \n# plot the WordCloud image                        \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show() ","2e6728df":"df_movie_tag = df_movie.dropna(subset=['Tags'])","bd5bbb19":"nlp = spacy.load('en')\nmovie_tags = df_movie_tag['Tags']\nfor tag in movie_tags:\n    doc = nlp(tag)\nwords = [token.text\n         for token in doc\n         if not token.is_stop and not token.is_punct]\nrest_string = ' '\nfor i in words:\n   rest_string = rest_string+i+' '\n    \nwordcloud = WordCloud(width = 1400, height = 1400, \n                background_color ='lavenderblush',  \n                min_font_size = 5).generate(rest_string) \n  \n# plot the WordCloud image                        \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show()","d75d8dde":"df_series_lan = df_series.dropna(subset=['Languages'])","342a0ce4":"ax= px.treemap(df_series_lan,path=[\"Languages\"])\nax.show()","9d136df4":"df_movie_lan = df_movie.dropna(subset=['Languages'])","d1b636c2":"ax= px.treemap(df_movie_lan,path=[\"Languages\"])\nax.show()","5fcf8a38":"df_series_hdg = df_series.dropna(subset=['Hidden Gem Score'])\ndf_series_hdg = df_series_hdg.sort_values(by = 'Hidden Gem Score', ascending = False)\ntop_s_10_list = df_series_hdg[:10]\ntop_s_10_list.reset_index(drop=True, inplace=True)\nprint('The 10 Best Hidden Gems on Tv Series are:\\n',top_s_10_list['Title'])","d1c14593":"df_movie_hdg = df_movie.dropna(subset=['Hidden Gem Score'])\ndf_movie_hdg = df_movie_hdg.sort_values(by = 'Hidden Gem Score', ascending = False)\ntop_m_10_list = df_movie_hdg[:10]\ntop_m_10_list.reset_index(drop=True, inplace=True)\nprint('The 10 Best Hidden Gems in Movies are:\\n',top_m_10_list['Title'])","745e55b4":"df_series_ctr = df_series.dropna(subset=['Country Availability'])","255a2517":"series_ctr_list = df_series_ctr['Country Availability'].str.split(', ') #split the list into names\ns_ctr_list = {} #create an empty list\nfor countries in series_ctr_list: # for any countries in series_ctr_list\n    for country in countries: # for any country in countries\n        if (country in s_ctr_list): #if this country is already present in the s_ctr_list\n            s_ctr_list[country]+=1 # increase his value\n        else:  # else\n            s_ctr_list[country]=1 # Create his index in the list\ns_ctr_df = pd.DataFrame(s_ctr_list.values(),index = s_ctr_list.keys(),\n                        columns = {'Counts of Country Availability'}) #Create a s_ctr_df\ns_ctr_df.sort_values(by = 'Counts of Country Availability',ascending = False,inplace = True) #Sort the dataframe in ascending order\ntop_10_s_ctr = s_ctr_df[0:10] ","b71e9448":"fig = go.Figure(data=[go.Bar(\n    x = top_10_s_ctr.index,\n    y = top_10_s_ctr['Counts of Country Availability'],\n    text = top_10_s_ctr['Counts of Country Availability'],\n    textposition='auto',\n    marker_color=colors_10 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'Which countries have a larger Series Availability?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='Quantity',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Countries',\n                  titlefont_size=14))","4995aca9":"df_movie_ctr = df_movie.dropna(subset=['Country Availability'])","5a3de0a0":"movie_ctr_list = df_movie_ctr['Country Availability'].str.split(', ') #split the list into names\nm_ctr_list = {} #create an empty list\nfor countries in movie_ctr_list: # for any countries in movie_ctr_list\n    for country in countries: # for any country in countries\n        if (country in m_ctr_list): #if this country is already present in the m_ctr_list\n            m_ctr_list[country]+=1 # increase his value\n        else:  # else\n            m_ctr_list[country]=1 # Create his index in the list\nm_ctr_df = pd.DataFrame(m_ctr_list.values(),index = m_ctr_list.keys(),\n                        columns = {'Counts of Country Availability'}) #Create a m_ctr_df\nm_ctr_df.sort_values(by = 'Counts of Country Availability',ascending = False,inplace = True) #Sort the dataframe in ascending order\ntop_10_m_ctr = m_ctr_df[0:10] ","4ac1594c":"fig = go.Figure(data=[go.Bar(\n    x = top_10_m_ctr.index,\n    y = top_10_m_ctr['Counts of Country Availability'],\n    text = top_10_m_ctr['Counts of Country Availability'],\n    textposition='auto',\n    marker_color=colors_10 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'Which countries have a larger Movie Availability?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='Quantity',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Countries',\n                  titlefont_size=14))","70122778":"df_series_drt = df_series.dropna(subset=['Runtime'])\ndf_series_drt['Runtime'].value_counts()","8409ecea":"df_movie_drt = df_movie.dropna(subset=['Runtime'])","6fbb96ae":"count_d = df_movie_drt['Runtime'].value_counts()\nfig = go.Figure(data=[go.Bar(\n    x = count_d.index,\n    y = count_d,\n    text = count_d,\n    textposition='auto',\n    marker_color=colors_10 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'What is the average duration of a movie on Netflix?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='Quantity',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Duration',\n                  titlefont_size=14))","1234ab71":"df_series_dir = df_series.dropna(subset=['Director'])","84ef9db9":"series_dir_list = df_series_dir['Director'].str.split(', ') #split the list into names\ns_dir_list = {} #create an empty list\nfor directors in series_dir_list: # for any countries in series_ctr_list\n    for director in directors: # for any country in countries\n        if (director in s_dir_list): #if this country is already present in the s_ctr_list\n            s_dir_list[director]+=1 # increase his value\n        else:  # else\n            s_dir_list[director]=1 # Create his index in the list\ns_dir_df = pd.DataFrame(s_dir_list.values(),index = s_dir_list.keys(),\n                        columns = {'Director Counts'}) #Create a s_ctr_df\ns_dir_df.sort_values(by = 'Director Counts',ascending = False,inplace = True) #Sort the dataframe in ascending order\ntop_10_s_dir = s_dir_df[0:10] ","013c4c80":"fig = go.Figure(data=[go.Bar(\n    x = top_10_s_dir.index,\n    y = top_10_s_dir['Director Counts'],\n    text = top_10_s_dir['Director Counts'],\n    textposition='auto',\n    marker_color=colors_10 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'Which are the directors that have directed more Tv Series?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='N\u00b0 of Tv Series he\/she directed',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Directors',\n                  titlefont_size=14))","b688d3be":"df_movie_dir = df_movie.dropna(subset=['Director'])","ba2ed50c":"movie_dir_list = df_movie_dir['Director'].str.split(', ') #split the list into names\nm_dir_list = {} #create an empty list\nfor directors in movie_dir_list: # for any countries in series_ctr_list\n    for director in directors: # for any country in countries\n        if (director in m_dir_list): #if this country is already present in the s_ctr_list\n            m_dir_list[director]+=1 # increase his value\n        else:  # else\n            m_dir_list[director]=1 # Create his index in the list\nm_dir_df = pd.DataFrame(m_dir_list.values(),index = m_dir_list.keys(),\n                        columns = {'Director Counts'}) #Create a s_ctr_df\nm_dir_df.sort_values(by = 'Director Counts',ascending = False,inplace = True) #Sort the dataframe in ascending order\ntop_10_m_dir = m_dir_df[0:10] ","2e42a045":"fig = go.Figure(data=[go.Bar(\n    x = top_10_m_dir.index,\n    y = top_10_m_dir['Director Counts'],\n    text = top_10_m_dir['Director Counts'],\n    textposition='auto',\n    marker_color=colors_10 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'Which are the directors that have directed more Movies?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='N\u00b0 of Movies he\/she directed',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Directors',\n                  titlefont_size=14))","e47f8de9":"df_series_act = df_series.dropna(subset=['Actors'])","005f7f54":"series_act_list = df_series_act['Actors'].str.split(', ') #split the list into names\ns_act_list = {} #create an empty list\nfor actors in series_act_list: # for any countries in series_ctr_list\n    for actor in actors: # for any country in countries\n        if (actor in s_act_list): #if this country is already present in the s_ctr_list\n            s_act_list[actor]+=1 # increase his value\n        else:  # else\n            s_act_list[actor]=1 # Create his index in the list\ns_act_df = pd.DataFrame(s_act_list.values(),index = s_act_list.keys(),\n                        columns = {'Actor Counts'}) #Create a s_ctr_df\ns_act_df.sort_values(by = 'Actor Counts',ascending = False,inplace = True) #Sort the dataframe in ascending order\ntop_10_s_act = s_act_df[0:10] ","4a547bf7":"fig = go.Figure(data=[go.Bar(\n    x = top_10_s_act.index,\n    y = top_10_s_act['Actor Counts'],\n    text = top_10_s_act['Actor Counts'],\n    textposition='auto',\n    marker_color=colors_10 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'Which are the actors that have played more Tv Series?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='N\u00b0 of Tv Series he\/she played',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Actors',\n                  titlefont_size=14))","c34c610b":"df_movie_act = df_movie.dropna(subset=['Actors'])","43769b7a":"movie_act_list = df_movie_act['Actors'].str.split(', ') #split the list into names\nm_act_list = {} #create an empty list\nfor actors in movie_act_list: # for any countries in series_ctr_list\n    for actor in actors: # for any country in countries\n        if (actor in m_act_list): #if this country is already present in the s_ctr_list\n            m_act_list[actor]+=1 # increase his value\n        else:  # else\n            m_act_list[actor]=1 # Create his index in the list\nm_act_df = pd.DataFrame(m_act_list.values(),index = m_act_list.keys(),\n                        columns = {'Actor Counts'}) #Create a s_ctr_df\nm_act_df.sort_values(by = 'Actor Counts',ascending = False,inplace = True) #Sort the dataframe in ascending order\ntop_10_m_act = m_act_df[0:10] ","f8dd46f4":"fig = go.Figure(data=[go.Bar(\n    x = top_10_m_act.index,\n    y = top_10_m_act['Actor Counts'],\n    text = top_10_m_act['Actor Counts'],\n    textposition='auto',\n    marker_color=colors_10 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'Which are the actors that have played more Movies?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='N\u00b0 of Movies he\/she played',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Actors',\n                  titlefont_size=14))","39efb9b7":"df_series_imdb = df_series.dropna(subset=['IMDb Score'])\ndf_series_imdb = df_series_imdb.sort_values(by = 'IMDb Score', ascending = False)\ntop_s_imdb_10_list = df_series_imdb[:10]","3ae5188f":"fig = go.Figure(data=[go.Bar(\n    x = top_s_imdb_10_list['Title'],\n    y = top_s_imdb_10_list['IMDb Score'],\n    text = top_s_imdb_10_list['IMDb Score'],\n    textposition='auto',\n    marker_color=colors_10 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'Which are the most rated Tv Series for IMDb?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='IMDb Score',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Titles',\n                  titlefont_size=14))","8cd5538e":"df_series_rt = df_series.dropna(subset=['Rotten Tomatoes Score'])\ndf_series_rt = df_series_rt.sort_values(by = 'Rotten Tomatoes Score', ascending = False)\ntop_s_rt_10_list = df_series_rt[:10]","2da6f33b":"fig = go.Figure(data=[go.Bar(\n    x = top_s_rt_10_list['Title'],\n    y = top_s_rt_10_list['Rotten Tomatoes Score'],\n    text = top_s_rt_10_list['Rotten Tomatoes Score'],\n    textposition='auto',\n    marker_color=colors_10 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'Which are the most rated Tv Series for Rotten Tomatoes?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='Rotten Tomatoes Score',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Titles',\n                  titlefont_size=14))","a5576528":"df_movie_imdb = df_movie.dropna(subset=['IMDb Score'])\ndf_movie_imdb = df_movie_imdb.sort_values(by = 'IMDb Score', ascending = False)\ntop_m_imdb_10_list = df_movie_imdb[:10]","b6b5fc35":"fig = go.Figure(data=[go.Bar(\n    x = top_m_imdb_10_list['Title'],\n    y = top_m_imdb_10_list['IMDb Score'],\n    text = top_m_imdb_10_list['IMDb Score'],\n    textposition='auto',\n    marker_color=colors_10 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'Which are the most rated Movies for IMDb?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='IMDb Score',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Titles',\n                  titlefont_size=14))","b9481b6d":"df_movie_rt = df_movie.dropna(subset=['Rotten Tomatoes Score'])\ndf_movie_rt = df_movie_rt.sort_values(by = 'Rotten Tomatoes Score', ascending = False)\ntop_m_rt_10_list = df_movie_rt[:10]","866fa52e":"fig = go.Figure(data=[go.Bar(\n    x = top_m_rt_10_list['Title'],\n    y = top_m_rt_10_list['Rotten Tomatoes Score'],\n    text = top_m_rt_10_list['Rotten Tomatoes Score'],\n    textposition='auto',\n    marker_color=colors_10 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'Which are the most rated Movies for Rotten Tomatoes?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='Rotten Tomatoes Score',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Titles',\n                  titlefont_size=14))","a3990b4b":"df_series_awr = df_series.dropna(subset=['Awards Received'])\ndf_series_awr = df_series_awr.sort_values(by = 'Awards Received', ascending = False)\ntop_s_awr_15_list = df_series_awr[:15]","d4ae7ada":"colors_15 = ['DarkRed', 'FireBrick', 'FireBrick' ,'Red', 'Crimson', 'Crimson', 'IndianRed' , 'slategray', 'slategray' , 'gray' , 'gray', 'dimgrey', 'dimgrey', 'DarkSlateGrey', 'black']\nfig = go.Figure(data=[go.Bar(\n    x = top_s_awr_15_list['Title'],\n    y = top_s_awr_15_list['Awards Received'],\n    text = top_s_awr_15_list['Awards Received'],\n    textposition='auto',\n    marker_color=colors_15 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'Which are the 15 TV series \ud83d\udcfa that have received the most awards?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='Awards Received',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Titles',\n                  titlefont_size=14))","0d7fe0f1":"df_movie_awr = df_movie.dropna(subset=['Awards Received'])\ndf_movie_awr = df_movie_awr.sort_values(by = 'Awards Received', ascending = False)\ntop_m_awr_15_list = df_movie_awr[:15]","a621119d":"fig = go.Figure(data=[go.Bar(\n    x = top_m_awr_15_list['Title'],\n    y = top_m_awr_15_list['Awards Received'],\n    text = top_m_awr_15_list['Awards Received'],\n    textposition='auto',\n    marker_color=colors_15 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'Which are the 15 Movies \ud83d\udcfd\u200d\ufe0f that have received the most awards?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='Awards Received',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Titles',\n                  titlefont_size=14))","90350323":"df_series_rel = df_series.dropna(subset=['Released_Year_Net'])","975a7977":"series_rel_list = df_series_act['Released_Year_Net']\ns_rel_list = {} #create an empty list\nfor year in series_rel_list: # for any year in series_rel_list\n    if (year in s_rel_list): #if this year is already present in the s_rel_list\n        s_rel_list[year]+=1 # increase his value\n    else:  # else\n        s_rel_list[year]=1 # Create his index in the list\ns_rel_df = pd.DataFrame(s_rel_list.values(),index = s_rel_list.keys(),\n                        columns = {'Year Counts'}) #Create a s_ctr_df\ns_rel_df.sort_values(by = 'Year Counts',ascending = False,inplace = True) #Sort the dataframe in ascending order\ntop_10_s_rel = s_rel_df[0:10] ","e4f9e2e3":"fig = go.Figure(data=[go.Bar(\n    x = top_10_s_rel.index,\n    y = top_10_s_rel['Year Counts'],\n    text = top_10_s_rel['Year Counts'],\n    textposition='auto',\n    marker_color=colors_10 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'In which year there have been more Tv Series released ?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='N\u00b0 of release',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Titles',\n                  titlefont_size=14))","f9b3d7aa":"df_movie_rel = df_movie.dropna(subset=['Released_Year_Net'])","7066c6b2":"movie_rel_list = df_movie_act['Released_Year_Net']\nm_rel_list = {} #create an empty list\nfor year in movie_rel_list: # for any year in movie_rel_list\n    if (year in m_rel_list): #if this year is already present in the m_rel_list\n        m_rel_list[year]+=1 # increase his value\n    else:  # else\n        m_rel_list[year]=1 # Create his index in the list\nm_rel_df = pd.DataFrame(m_rel_list.values(),index = m_rel_list.keys(),\n                        columns = {'Year Counts'}) #Create a s_ctr_df\nm_rel_df.sort_values(by = 'Year Counts',ascending = False,inplace = True) #Sort the dataframe in ascending order\ntop_10_m_rel = m_rel_df[0:10] ","de97bd61":"fig = go.Figure(data=[go.Bar(\n    x = top_10_m_rel.index,\n    y = top_10_m_rel['Year Counts'],\n    text = top_10_m_rel['Year Counts'],\n    textposition='auto',\n    marker_color=colors_10 # marker color can be a single color value or an iterable\n)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text= 'In which year there have been more Movies released ?',\n                  uniformtext_minsize=8, uniformtext_mode='hide',\n                  yaxis=dict(\n                  title='N\u00b0 of release',\n                  titlefont_size=14),\n                  xaxis=dict(\n                  title='Titles',\n                  titlefont_size=14))","74f679eb":"**2.9.1 Tv Series \ud83d\udcfa Charts**","ec932692":"> Netflix is a streaming service that offers a wide variety of award-winning TV shows, movies, anime, documentaries, and more on thousands of internet-connected devices. You can watch as much as you want, whenever you want without a single commercial \u2013 all for one low monthly price.","9f36ce1a":"As we can see the directors that have directed more Movies are **Steven Spielberg**, **Johnnie To** and **Jing Wong**.","557793d0":"> \ud83d\udccc Note:\n> As we all know the world of cinema and TV series is very wide and boundless, this breadth in addition to the myriad of topics to be dealt with is also given by **the multitude of [film genres](https:\/\/www.masterclass.com\/articles\/how-to-identify-film-genres#:~:text=Some%20basic%20movie%20genres%20include%3A%201%20Action%3A%20Movies,pursuing%20an%20outlaw%20in%20the%20Wild%20West.%20)** that have been created over time by following a little also what was happening \/ happened in the literary field some time before. But **which of these is the most frequent and consequently the most requested by the spectators?** Will it be horror or action movies? Comedy or sentimental films? \n\nLet's find out right away with another bar chart.","0441a763":"> - Secondly, I draw a **Wordcloud** with the most named tags in the list","55030869":"As we can see the directors that have directed more Series Tv are **George Lucas**, **Hideki Takeuchi** and **Arcie Baron**.","979cf4d4":"> \ud83d\udccc Note: Every time you finish watching a very fascinating TV series or movie, you are immediately looking for another similar or equally beautiful one to see. Keep it up for a while, until you run out of all the famous products and then what? How you do it? it is always difficult to understand if a film with few reviews really deserves but luckily for us in this dataset there is a feature called \"**Hidden Gem Score**\" which indicates a score that indicates **the films with fewer reviews but with very high ratings**.\n\nSo let's go immediately to find out which are these hidden gems in our 2 big categories so that if you need a help when you don't know what to choose you can come back from here \ud83d\ude09","03667463":" # \ud83d\udcfd\u200d\ufe0f Netflix EDA for beginners \ud83d\udcfa","3322a437":"**Meanwhile in the Movie \ud83d\udcfd\u200d\ufe0f universe ...**","633dcea8":"As we can see the actors that have played more Series are **Johnny Yong Bosch**, **Kana Hanazawa** and **Ai Kayano**.","f123954b":"# **1. Introduction**","50457f3d":"- **In the Movies** \ud83d\udcfd\u200d\ufe0f","7b60c050":"> Code: \n> - First of all I create a new series dataframe **dropping the missing values contained in the \"Languages\" column**.","3d48657c":"> Code:\n\n> - First of all I create a new series dataframe **dropping the missing values contained in the \"Runtime\" column**.","bb26b549":"> - Secondly **I create a list** that contains all the genres in the column and their quantity. So **I create a new dataframe** with this datas.","806c4e15":"**... we can see this dataframe telling us that Netflix series episodes are always 30 minutes or less.**","2b66a2cf":"> \ud83d\udcdd Let's take a look at our dataframe so we can open a few things:\n> - let's start by observing what [**types of data**](https:\/\/realpython.com\/python-data-types\/) we have inside it with the **.info ()** function;","5e3d16b3":"> \ud83d\udccc Note: As we said with regard to languages, it also applies to countries as there are **[195](https:\/\/www.worldometers.info\/geography\/how-many-countries-are-there-in-the-world\/) countries around the world**. But how many of them have the opportunity to produce products such as films or TV series? Which are the most productive? And which countries have the most movies or TV series available on Netflix?\n\nLet's go to discover it","a1fff5e8":"> \ud83d\udccc Note:\n> The **2 large macro categories** of products that we can find in the Netflix catalog are Movies and TV Series.\n> - A **[movie](https:\/\/simple.wikipedia.org\/wiki\/Movie#:~:text=A%20movie%2C%20or%20film%2C%20is%20a%20type%20of,of%20entertainment%20or%20a%20way%20to%20have%20fun.)**, or film, is a type of visual communication which uses moving pictures and sound to tell stories or teach people something. Most people watch (view) movies as a type of entertainment or a way to have fun;\n> - A television show is also called a television program (British English: programme), especially if it lacks a narrative structure. A **[television series](https:\/\/en.wikipedia.org\/wiki\/Television_show)** is usually released in episodes that follow a narrative, and are usually divided into seasons (US and Canada) or series (UK) \u2013 yearly or semiannual sets of new episodes.\n\nSo, knowing the presence of these 2 macro categories, now **let's figure out which of the 2 is more present** in the Netflix product catalog.","5bf5352f":"- **IMDb**","b24bee18":"----------------------------","60ccb6ef":"# 2.6 Countries \ud83c\udf0d \ud83d\uddfa","db5eda8b":"> - Thirdly, **I draw a bar chart** to better understand which countries have a larger availability about the Netflix Movies.","8485171a":"> - Now since we have 2 features (**'Release Date'** and **'Netflix Release Date'**) indicating a date as object datatype, I 'transform' them into **datetime features** so that we can use them as real dates;","61e5ec32":"**While in the Movie \ud83d\udcfd\u200d\ufe0f world ..**.","78840648":"> - Let's continue our analysis by checking if and how many [**missing values**](https:\/\/en.wikipedia.org\/wiki\/Missing_data) there are; ","e6b484c0":"**In the Tv Series \ud83d\udcfa...**","de71950d":"# 2.10 Top 15 Tv Series and Movie for awards received  \ud83c\udfc6 \ud83e\udd47","65a6c6a4":"- **While in the movie \ud83d\udcfd\u200d\ufe0f catalog**","6a889f46":"# 2.2 Genres \ud83d\ude0d\ud83d\ude31\ud83d\ude02","7631a2d5":"> - Secondly, **I draw a bar chart** to better understand what is the average duration of the Movies.","bb80ae2d":"**In Tv Series \ud83d\udcfa...**","19e10cb4":"> - Secondly plot a treemap that contains squares of different shapes that illustrate the languages spoken in the Tv Series","1e472296":"----------------------------------------","2f7d991d":"> \ud83d\udccc Note: There are hundreds of states in the world that rightfully have their own traditions, their own culture and their own languages. This is why there are, According to Ethnologue, **currently [7,117 languages ](https:\/\/www.theintrepidguide.com\/how-many-languages-are-there-in-the-world\/)spoken around the world.**. But what does this have to do with our argument? It really hits the spot because this being the situation, every film shot in a different country will be shot in the original language of that country. Fortunately, nowadays there are voice actors who translate them into various languages so as to give as many people as possible the opportunity to enjoy and watch the various films. \n\nBut unfortunately not all films are so famous that they are translated for everyone, so let's go to the discovery of the languages most present in the cinema scene","a718c451":"- **In Series planet**","a9041645":"**2.8.2 Actors**","2045a565":"---------------------------","d98331c5":"> - Secondly **I create a list** that contains all the genres in the column and their quantity. So **I create a new dataframe** with this datas.","b09ff88c":"**... We can see that like with the Tv Series the Genre most rappresented is Drama \ud83d\ude1f followed by Comedy \ud83d\ude02 (that was third in the previous chart) and Thriller\ud83d\udd75\ud83e\udddf.**","fbdc4371":"> ","e5097b3a":"- Movie \ud83d\udcfd\u200d\ufe0f","55e78d76":"> Code: \n> - First of all I create a new series dataframe **dropping the missing values contained in the \"Languages\" column**.","1e38ec5c":"... As we can see the great majority of the movies are **1-2 hour**","09efdbcd":"**For the movie \ud83d\udcfd\u200d\ufe0f:**","8fefbe2d":"> \ud83d\udccc Note: As we are used to seeing on social networks, there are also **tags** in other fields. They can be considered as keywords that help to identify a certain thing in a simple and concise way. In our case they recall a little film genres but with slight nuances as maybe a film, or a TV series, can be considered as a set of different genres or in the tags the nationality of production or other small things that help the viewers in their search. \n\nSo let's find out, even in this case, which are the most frequent and if there are close links with the quantity of products of the various genres that we have analyzed earlier.","418f6713":"- **Meanwhile in the Movies world**","8ab562e7":"--------------","59e40509":"> - Thirdly, **I draw a bar chart** to better understand the distribution of the quantities of the various genres contained in the Netflix catalog.","b1cc6e8c":"**In the Series \ud83d\udcfa world ...**","4427feb9":"# 2.5 Best Hidden Gems \ud83e\udd20\ud83d\udc8e","4015dca2":"> - After having ascertained this great difference between the 2 categories, we can **divide our dataframe into 2** so as to be able to work and analyze the TV Series and Movies in a distinct way.","3de99d4f":"---------------","80ef9ede":"**In the Series Universe \ud83d\udcfa...**","2b787201":"As we had seen for the Series, even in the world of films **the rankings of the top 10 are very different** and therefore it is better to look at both sites to have a comparison and a better view on the product","292b0c59":"# 2.9 Tv Series \ud83d\udcfa and Movie \ud83d\udcfd\u200d\ufe0f Charts by Rotten Tomatoes and IMBd","4f2e3429":"> \ud83d\udccc Note: We are not human if we do not judge things, it is in our nature. As happens in all things, even in the film world there are those who give votes, for this reason we are going to analyze 2 of the major websites where you can find reliable reviews and votes that could help us, or advise us, in the search for a Film \/ TV series to see:\n> * **Rotten Tomatoes** is an American review-aggregation website for film and television. The company was launched in August 1998 by three undergraduate students at the University of California, Berkeley: Senh Duong, Patrick Y. Lee, and Stephen Wang. Although the name \"Rotten Tomatoes\" connects to the practice of audiences throwing rotten tomatoes when disapproving of a poor stage performance, the original inspiration comes from a scene featuring tomatoes in the Canadian film L\u00e9olo (1992).\n> * **IMDb (an acronym for Internet Movie Database)** is an online database of information related to films, television programs, home videos, video games, and streaming content online \u2013 including cast, production crew and personal biographies, plot summaries, trivia, ratings, and fan and critical reviews.  Originally a fan-operated website, the database is now owned and operated by IMDb.com, Inc., a subsidiary of Amazon.","4d268bbe":"> \ud83d\udccc Note: Nowadays we are so busy during the day that you have to try to fit everything together if you want to do all the things to do. This also applies to extras such as seeing a movie or a TV series. However, they have a substantial difference that the film is one and therefore normally lasts an hour or more while the TV series that are episodic, which therefore they can be seen a little at a time or all in one go, they are easier as the average episodes last about 30\/40 minutes. What do you prefer? Are you from #TeamMovie\ud83d\udcfd\u200d\ufe0f or #TeamSerie\ud83d\udcfa ?\n\nBut let's find out what this dataframe teaches us about the duration of the various TV series or films","a10eae1d":"> Code: \n> - First of all I create a new series dataframe **dropping the missing values contained in the \"Hidden Gem Score\" column**.\n> - Secondly, I have sorted it by discending so the first values have the most high scores\n> - Thirdly, I have create a list with the first 10 elements\n> - And Finally I have plot the list","735cea2d":"# 2.8 Directors \ud83c\udfac and actors \ud83e\udd35 ","25383682":"**Division in 2 dataframes \ud83d\udcc4 \ud83d\udcc4**","d4676f82":"> - Secondly **I create a [list](https:\/\/www.w3schools.com\/python\/python_lists.asp#:~:text=%20Python%20Lists%20%201%20List.%20Lists%20are,Duplicates.%20%205%20List%20Length.%20%20More%20)** that contains all the genres in the column and their quantity. So **I create a new dataframe** with this datas.","03444237":"- **Rotten Tomatoes**","a1945a92":"> - Thirdly, **I draw a bar chart** to better understand the distribution of the quantities of the various genres contained in the Netflix catalog.","79b3cc1e":"# Read the .csv files \ud83d\udcc1 and create a copy of the dataframe \ud83d\udcc3 ","776424ab":"**Meanwhile in the Movie \ud83d\udcfd\u200d\ufe0f world ...**","5f35bcf1":"# 2.11 Productivity per year (on Netflix) \ud83d\udcc6 ","d0caab34":"**And in the Movie world \ud83d\udcfd\u200d\ufe0f**","3731bba1":"- **In Series \ud83d\udcfa**","1e1362b4":"> \ud83d\udccc Note:\n> - The [**file.csv**](https:\/\/it.wikipedia.org\/wiki\/Comma-separated_values) contains all the information we need to analyze a bit of everything we know about Netflix and the products within it. It contains 29 unique columns and 15480 rows\n> - I create a **copy of the [dataframe](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.html)** so that I can use and modify it without touching the original file which could always serve as a backup  ","f8f7ad46":"**In Tv Series \ud83d\udcfa...**","4d0fcb29":"> - Secondly **I create a list** that contains all the genres in the column and their quantity. So **I create a new dataframe** with this datas.","37c70a29":"> Code: \n> - First of all I create a new series dataframe **dropping the missing values contained in the \"Genre\" column**.","6a7e7953":"# 2.7 Duration  \u23f2\u23f3","780579a5":"> Code: \n> - First of all I create a new series dataframe **dropping the missing values contained in the \"Tags\" column**.","c776dcfa":"> Obviously, in addition to the votes, there are also prizes up for grabs in the film world and among the most famous are the Golden Globes, the Hollywood Film Awards and the Oscars.\n\nSo let's go see which are the most awarded films and series","b019f682":"> - Thirdly, **I draw a bar chart** to better understand which countries have a larger availability about the Netflix Series.","f864814c":"> \ud83d\udccc Note: Obviously, behind the creation of a film or a TV series there are many people who also work in the rearguards, but let's say that those who put their face on it and influence the success of the product in the foreground are the actors and the director. What is the role that fascinates you the most? Are you from #TeamDirector or #TeamActor?\n\nSo let's analyze and observe which are the most frequent directors and actors in the Netflix catalog","2c3e582a":"> - Secondly, I draw a **Wordcloud** with the most named tags in the list","a226e0bd":"> Code:\n\n> - First of all I create a new series dataframe **dropping the missing values contained in the \"Runtime\" column** and then I counts the values with the function [.value_counts()](https:\/\/medium.com\/swlh\/python-data-analysis-value-counts-115c7ad4ffec#:~:text=General%20usage.%20The%20value_counts%20%28%29%20function%20can%20be,or%20descending%20order%20%2C%20use%20sort%20as%20argument.).","b88bbab9":"![](https:\/\/logos-download.com\/wp-content\/uploads\/2016\/03\/Netflix_logo.png)","816986cc":"- **In the Tv Series  \ud83d\udcfa Universe**","baba598d":"> And finally, as a last topic, let's analyze which was the year in which the most series were released and which was the most films released. What do you think they were?","73e927d2":"> As we can see from this [bar graph](https:\/\/plotly.com\/python\/bar-charts\/) there is a big difference between the 2 categories as there are almost 12 thousand TV series against only 3.8 films. ","dfe37eaa":"> - Secondly **I create a list** that contains the **top 10 languages** that are spoken in the Tv Series.\n\n","a01d52d8":"**For the Tv Series \ud83d\udcfa:**","6162b612":"# **2. Easy Data Analysis \ud83d\udd2c\ud83e\uddd0**","5441f08b":"--------------------","d484ce09":"**2.9.2 Movie \ud83d\udcfd\u200d\ufe0f Charts**","aab8d523":"- **2.11.1 Tv Series \ud83d\udcfa**","e164e5c5":"**2.8.1 Directors** \ud83c\udfac","1b8bf711":"> Code:\n\n> - First of all I create a new series dataframe **dropping the missing values contained in the \"Country Availability\" column**.","cff2e66d":"- **Rotten Tomatoes**","9dab4922":"> Code: \n> - First of all I create a new series dataframe **dropping the missing values contained in the \"Genre\" column**.","bb2704ae":"# 2.3 Tags \ud83d\udcdd\ud83d\udcce ","ac17b152":"> Code:\n\n> - First of all I create a new series dataframe **dropping the missing values contained in the \"Country Availability\" column**.","4745a946":"-------------------------","b372bd4f":"- **IMDb**","34e0b9fe":"> - After this transformation of datatype for these 2 features, I create **2 new features** (one for the released year and one for the released year on Netflix) happy only for the year so as to be able to subsequently emerge an analysis on the productivity of the TV Series and Movie based on the various years;","f1228a3a":"**While in the Movie \ud83d\udcfd\u200d\ufe0f universe...**","95c6eaf5":"# 2.1 Movie \ud83d\udcfd\u200d\ufe0f vs Tv Series \ud83d\udcfa","68d9c13a":"As we can see, **the rankings of the top 10 for the series are completely different**, so before choosing a movie to watch it is best to take a look at both sites so that you can have a comparison and have a wider view","2b8db953":"# 2.4 Languages \ud83d\udde3\ud83c\udfa4","6355e9e9":"**Libraries** \ud83d\udcda\u2b07","e5a46134":"-------------","92f28f90":"------------------------","5f91de66":"> Code: \n> - First of all I create a new series dataframe **dropping the missing values contained in the \"Tags\" column**.","f65e8ec1":"A **little description** of the features:\n> * **Title**: Tells us the name of the movie \/ series\n> * **Genre**: Describes the genre of the movie \/ series\n> * **Tag**: is a list of tags on the movie \/ series\n> * **Language**: Indicates in which language the film \/ series is available\n> * **Series or Movie**: Indicates whether this product is a TV series or a movie\n> * **Hidden Gem Score**: This is a score that suggests if this movie \/ series is a hidden gem (i.e. something that is not mainstream but is a great product and may deserve more attention)\n> * **Country Availability**: Please indicate in which country this film \/ series is available\n> * **Runtime**: Indicates the duration of the movie or an episode of the series\n> * **Director**: Tells us how is the director of this product\n> * **Writer**: Tells us how is the writer of this product,\n> * **Actors**: Tells us how are the main actors of this product,\n> * **View Rating**: Indicates the rating of the product,\n> * **IMDb Score**: This is the score given to the product by IMDb,\n> * **Rotten Tomatoes Score**: This is the score given to the product by Rotten Tomatoes,\n> * **Awards Received**: It tells us how much awards this film\/serie has received ,\n> * **Awards Nominated For**: It tells us for which awards this film\/movie has been nominated,\n> * **Release Date**: It indicates when this product has been released,\n> * **Netflix Release Date**: It indicates when this product has been released on Netflix,\n> * **Summary**: It tells us a little summary of the plot of the product,\n> * **IMDb Votes**: It indicates the scores given by IMDb,\n> * **Image**: An Image\n> * **Released_Year**: It indicates the year the product was released\n> * **Released_Year_Net**: It indicates the year the product was released on Netflix","4f48c4a5":"> - As we can see there are many missing values in the various features so I decide to keep the most important columns in my opinion, even if they have different missing values that we will then remove, and to **drop** other **columns** that I consider superfluous for the analysis also for the large number of missing values they have;","25997c9b":"As we can see the actors that have played more Movies are **Bruce Willis**, **Jackie Chan** and **Nicolas Cage**.","3c8fe3ee":"**... We can see that the most present genres, and I think also most requested by viewers, are Drama \ud83d\ude1f, Animation \ud83e\uddda and Comedies \ud83d\ude02.**","dc5932b3":"**Thank you so much for looking at this notebook, I hope you enjoyed it and if so I would invite you to put an upvote. If you have found any errors, please write them to me in the comments or even if you have any suggestions for improving the notebook. thank you very much again and good Kaggling!**","a04747ab":"> - Finally, let's take a **look at our dataframe** after the various changes we've made to it.","923a0bcf":"-----------"}}