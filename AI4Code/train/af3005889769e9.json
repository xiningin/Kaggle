{"cell_type":{"52899f9f":"code","c73a5cfc":"code","55997e03":"code","3a1b9fd9":"code","03ec0eab":"code","3df7d4d2":"code","78425830":"code","1bbc1fac":"code","d20af766":"code","377c759b":"code","8c85c539":"code","c742ba7f":"code","3263d30b":"code","402b5750":"code","ad1ed1b6":"code","db4536ff":"code","fc4e06cd":"code","c42b66cb":"code","3ccca839":"code","cb23a6e3":"code","a10424b8":"code","2891920f":"code","d48ed2e6":"code","e6981ce3":"code","c5c3a027":"code","0e3fc7d8":"code","0db6229d":"code","0c14707b":"code","c315e5a8":"code","6f01ffeb":"code","354c8097":"code","e985388e":"code","d1f4087c":"code","19851fd7":"code","a4560dc9":"code","c9cab06e":"code","b99cf572":"code","b642941c":"code","9f786b94":"code","6d8314ac":"code","dd1e80f3":"code","4048c6ce":"markdown","84e762c8":"markdown","6adeb1c0":"markdown","c2b5d0b9":"markdown","cd3c1e8c":"markdown","2a30ac09":"markdown","c69e44eb":"markdown"},"source":{"52899f9f":"import pandas as pd\nimport numpy as np\nimport json\nimport tensorflow.keras.layers as L","c73a5cfc":"train = pd.read_json(\"..\/input\/stanford-covid-vaccine\/train.json\", lines=True)\ntest = pd.read_json(\"..\/input\/stanford-covid-vaccine\/test.json\", lines=True)\nsample_df = pd.read_csv(\"..\/input\/stanford-covid-vaccine\/sample_submission.csv\")","55997e03":"train.head()","3a1b9fd9":"!pip install datasist","03ec0eab":"import datasist as ds\nds.structdata.check_train_test_set(train, test, index=None, col=None)","3df7d4d2":"# ds.structdata.describe(train)","78425830":"train.info()","1bbc1fac":"train.describe()","d20af766":"import missingno as msno\nmsno.matrix(train)","377c759b":"msno.bar(train)","8c85c539":"pd.set_option('max_columns', 100)\ntrain","c742ba7f":"len(train['structure'][1])","3263d30b":"length = []\nfor struct in train['structure']:\n    length.append(len(struct))","402b5750":"length","ad1ed1b6":"train[\"flag\"] = \"train\"\ntest[\"flag\"] = \"test\"","db4536ff":"# !pip install datasist\nimport datasist as ds","fc4e06cd":"all_data, ntrain, ntest = ds.structdata.join_train_and_test(train, test)\n# #later splitting after transformations\n# train_new = all_data[:ntrain]\n# test_new = all_data[ntrain:]","c42b66cb":"all_data","3ccca839":"count = 0\nlistof = []\nfor data in all_data['predicted_loop_type']:\n    for letter in str(data):\n        if letter == \"S\":\n            count += 1\n#     listof.append(count)","cb23a6e3":"all_data[\"S\"] = all_data['predicted_loop_type'].str.count(\"S\")\nall_data[\"M\"] = all_data['predicted_loop_type'].str.count(\"M\")\nall_data[\"I\"] = all_data['predicted_loop_type'].str.count(\"I\")\nall_data[\"B\"] = all_data['predicted_loop_type'].str.count(\"B\")\nall_data[\"H\"] = all_data['predicted_loop_type'].str.count(\"H\")\nall_data[\"X\"] = all_data['predicted_loop_type'].str.count(\"X\")","a10424b8":"all_data","2891920f":"train = all_data[:ntrain]\ntest = all_data[ntrain:]","d48ed2e6":"# train['S'] = \ntrain['predicted_loop_type']","e6981ce3":"pred_cols = ['reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']\ntrain[pred_cols]","c5c3a027":"y = train[pred_cols]","0e3fc7d8":"y = np.array(train[train.signal_to_noise > 1][pred_cols].values.tolist()).transpose((0, 2, 1))","0db6229d":"token2int = {x:i for i, x in enumerate('().ACGUBEHIMSX')}\ndef preprocess_inputs(df, cols=['sequence', 'structure', 'predicted_loop_type']):\n    return np.transpose(\n        np.array(\n            df[cols]\n            .applymap(lambda seq: [token2int[x] for x in seq])\n            .values\n            .tolist()\n        ),\n        (0, 2, 1)\n    )","0c14707b":"X = preprocess_inputs(train[train.signal_to_noise > 1])","c315e5a8":"X","6f01ffeb":"from sklearn.metrics import log_loss\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport tensorflow as tf\nfrom tensorflow.keras import layers as L\nfrom tensorflow.keras.callbacks import *\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.models import Sequential","354c8097":"test.shape","e985388e":"def gru_layer(hidden_dim, dropout):\n    return L.Bidirectional(L.GRU(hidden_dim, dropout=dropout, return_sequences=True))\n\ndef build_model(seq_len=107, pred_len=68, dropout=0.5, embed_dim=100, hidden_dim=128):\n    inputs = L.Input(shape=(seq_len, 3))\n\n    embed = L.Embedding(input_dim=len(token2int), output_dim=embed_dim)(inputs)\n    reshaped = tf.reshape(\n        embed, shape=(-1, embed.shape[1],  embed.shape[2] * embed.shape[3]))\n\n    hidden = gru_layer(hidden_dim, dropout)(reshaped)\n    hidden = gru_layer(hidden_dim, dropout)(hidden)\n    \n    # Since we are only making predictions on the first part of each sequence, we have\n    # to truncate it\n    truncated = hidden[:, :pred_len]\n    out1 = L.BatchNormalization()(truncated)\n    out = L.Dense(5, activation='linear')(out1)\n\n    model = tf.keras.Model(inputs=inputs, outputs=out)\n\n    model.compile(tf.keras.optimizers.Adam(), loss='mse')\n    \n    return model\nmodel = build_model()","d1f4087c":"model.summary()","19851fd7":"history = model.fit(\n    X, y, \n    batch_size=64,\n    epochs=150,\n    callbacks=[\n        tf.keras.callbacks.ReduceLROnPlateau(),\n        tf.keras.callbacks.ModelCheckpoint('model.h5')\n    ],\n    validation_split=0.25\n)","a4560dc9":"# import pandas as pd\n# loss = pd.DataFrame({loss: model.history.history[\"loss\"], acc: model.history.history[\"val_loss\"] })","c9cab06e":"public_df = test.query(\"seq_length == 107\").copy()\nprivate_df = test.query(\"seq_length == 130\").copy()\n\npublic_inputs = preprocess_inputs(public_df)\nprivate_inputs = preprocess_inputs(private_df)","b99cf572":"# although it's not the case for the training data.\nmodel_short = build_model(seq_len=107, pred_len=107)\nmodel_long = build_model(seq_len=130, pred_len=130)\n\nmodel_short.load_weights('model.h5')\nmodel_long.load_weights('model.h5')\n\npublic_preds = model_short.predict(public_inputs)\nprivate_preds = model_long.predict(private_inputs)","b642941c":"preds_ls = []\n\nfor df, preds in [(public_df, public_preds), (private_df, private_preds)]:\n    for i, uid in enumerate(df.id):\n        single_pred = preds[i]\n\n        single_df = pd.DataFrame(single_pred, columns=pred_cols)\n        single_df['id_seqpos'] = [f'{uid}_{x}' for x in range(single_df.shape[0])]\n\n        preds_ls.append(single_df)\n\npreds_df = pd.concat(preds_ls)","9f786b94":"sample_df = pd.read_csv('\/kaggle\/input\/stanford-covid-vaccine\/sample_submission.csv')","6d8314ac":"submission = sample_df[['id_seqpos']].merge(preds_df, on=['id_seqpos'])\nsubmission.to_csv('submission1234.csv', index=False)","dd1e80f3":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize = (20, 10))\n\nax[0].plot(history.history['loss'])\nax[0].plot(history.history['val_loss'])\n\n\nax[0].set_title('GRU')\n\nax[0].legend(['train', 'validation'], loc = 'upper right')\n\nax[0].set_ylabel('Loss')\nax[0].set_xlabel('Epoch')","4048c6ce":"## Missingno - Automated ML library for some feature engineering (can also be used in EDA)","84e762c8":"Competition Overview\nIn this new competition we are helping to fight against the worldwide pandemic COVID-19. mRNA vaccines are the fastest vaccine candidates to treat COVID-19 but they currently facing several limitations. In particular, it is a challenge to design stable messenger RNA molecules. Typical vaccines are packaged in syringes and shipped under refrigeration around the world, but that is not possible for mRNA vaccines (currently).\n\nResearches have noticed that RNA molecules tend to spontaneously degrade, which is highly problematic because a single cut can render mRNA vaccines useless. Not much is known about which part of the backbone of a particular RNA is most susceptible to being damaged.\n\nWithout this knowledge, the current mRNA vaccines are shopped under intense refrigeration and are unlikely to reach enough humans unless they can be stabilized. This is our task as Kagglers: we must create a model to predict the most likely degradation rates at each base of an RNA molecule.\n\nWe are given a subset of an Eterna dataset comprised of over 3000 RNA molecules and their degradation rates at each position. Our models are then tested on the new generation of RNA sequences that were just created by Eterna players for COVID-19 mRNA vaccines\n\nBefore we get started, please check out other's notebook here as this one is based on other: I just added comments, made minor code changes, an LSTM, and fold training:","6adeb1c0":"## Merge Train and Test for Feature Engineering","c2b5d0b9":"### Unmerge","cd3c1e8c":"## Adding S, M, I, B, H, X columns based off of the number of corresponding letters in predicted_loop_type column","2a30ac09":"# Basic EDA","c69e44eb":"# Model"}}