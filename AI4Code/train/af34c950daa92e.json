{"cell_type":{"1ddf10a8":"code","6c3db7cb":"code","1773a665":"code","6309bde4":"code","b540cd8a":"code","828b453f":"code","52f0719c":"code","d3eafa07":"code","15afdedc":"code","e52c910f":"code","a54e8c52":"code","85315dc1":"code","c6232c02":"code","c4683047":"code","f341478d":"code","78c092a7":"code","aed189cb":"code","a84c6c14":"code","367f1141":"code","f9f610d9":"code","9bf61e82":"code","7c1e535d":"code","f3f50777":"code","a2d2f2e2":"code","34175a35":"code","433fb339":"code","2c68fbef":"code","1c1bf812":"code","f201a414":"code","d3fe1dc1":"code","35e457e8":"code","b7a28829":"code","10f098ee":"code","4ea899c2":"markdown"},"source":{"1ddf10a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6c3db7cb":"digits_csv = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_digits_csv = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","1773a665":"digit_column_names = list(digits_csv.columns)","6309bde4":"print('digit csv COLUMNS:\\n',digits_csv.columns)","b540cd8a":"print('there are', len(digit_column_names),'columns in the train csv and',len(digits_csv),'lines')","828b453f":"image_size = (28, 28)\nimage_target_shape = image_size + (1,)","52f0719c":"from random import shuffle","d3eafa07":"valid_part = 0.15\ndivide_index = int(len(digits_csv) * valid_part)\nis_train_line = [False for _ in range(divide_index)] + [True for _ in range(divide_index, len(digits_csv))]\nshuffle(is_train_line)\nassert len(is_train_line) == len(digits_csv)","15afdedc":"pixel_headers = digit_column_names[1:] ","e52c910f":"def get_pixels_from_digit_csv(row_id, data_csv):\n    pixels = []\n    for pix_col in pixel_headers:\n        pixels.append(data_csv[pix_col][row_id])\n    return np.array(pixels)","a54e8c52":"x_train = digits_csv.drop(labels = ['label'], axis = 1) \/ 255.\ny_train = digits_csv['label']\nx_train = [val.reshape(28, 28, 1) for val in np.array(x_train)]\ny_train = tf.keras.utils.to_categorical(np.array(y_train))","85315dc1":"print('there are',len(x_train),'images for test (will be seperated for valid)')","c6232c02":"import tensorflow as tf","c4683047":"num_of_classes = len(np.unique(y_train))\nprint('number of classes=', num_of_classes)","f341478d":"import matplotlib.pyplot as plt","78c092a7":"random_images = x_train\nnp.random.shuffle(random_images)\npopularity_map = np.zeros(image_size)\nfor rand_img in random_images:\n    popularity_map += rand_img\nplt.grid(True)    \nplt.imshow(popularity_map, label='popularity_map')\nplt.show()","aed189cb":"digit_classification_cnn_model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(32, (3, 3), activation='relu', \n                                                                                    input_shape=(28, 28, 1)),\n                                                             tf.keras.layers.MaxPooling2D(2, 2),\n                                                             tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n                                                             tf.keras.layers.MaxPooling2D(2, 2),\n                                                             tf.keras.layers.Dropout(0.5),\n                                                             tf.keras.layers.Flatten(),\n                                                             tf.keras.layers.Dense(64, activation='relu'),\n                                                             tf.keras.layers.Dense(num_of_classes, activation='softmax')\n                                                                ])\n\ndigit_classification_cnn_model.compile(optimizer=tf.keras.optimizers.Adam(), loss='categorical_crossentropy', metrics=['acc'])\n\ndigit_classification_cnn_model.summary()\n","a84c6c14":"x_train = np.array(x_train)\ny_train = np.array(y_train)","367f1141":"fit_history = digit_classification_cnn_model.fit(x_train, y_train, validation_split=0.25,\n                                                epochs=50, verbose=1)","f9f610d9":"import matplotlib.pyplot as plt","9bf61e82":"plt.plot(range(len(fit_history.history['accuracy'])), fit_history.history['accuracy'])\nplt.plot(range(len(fit_history.history['val_accuracy'])), fit_history.history['val_accuracy'], '--')\nplt.grid(True)\nplt.show()","7c1e535d":"test_images = np.array(test_digits_csv \/ .255).reshape(len(test_digits_csv), 28, 28, 1)","f3f50777":"print('there are', len(test_images),'images for test')","a2d2f2e2":"print('images for test shape', test_images.shape[0])","34175a35":"predictions = digit_classification_cnn_model.predict(test_images)","433fb339":"print(predictions)","2c68fbef":"def get_class_label(prediction):\n    max_val = -1\n    id_max = 0\n    for i, possibility in enumerate(prediction):\n        if possibility > max_val:\n            max_val = possibility\n            id_max = i\n    return id_max","1c1bf812":"prediction_classes = [get_class_label(pred) for pred in predictions]","f201a414":"#zero - 9\n#one - ","d3fe1dc1":"print(prediction_classes)","35e457e8":"my_prediction_dict = {'ImageId' : range(1, len(prediction_classes) + 1),\n                 'Label' : prediction_classes}\n\nmy_prediction_dataframe = pd.DataFrame(my_prediction_dict)\nmy_prediction_dataframe.to_csv('mydigitprediction.csv',index=False)","b7a28829":"num_of_examples = 15\nexample_figure = plt.figure(figsize=(10, 10))\nfor i in range(num_of_examples):\n    plt.subplot(5, 5, i + 1)\n    plt.imshow(test_images[i].reshape(28,28))\n    plt.title('prediction={}'.format(prediction_classes[i]))\nplt.tight_layout()","10f098ee":"my_prediction_dataframe.head()","4ea899c2":"Saving the pixels to the numpy matrixes data (for feature fitting) and scaling the values (to [0..1])"}}