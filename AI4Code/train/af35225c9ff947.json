{"cell_type":{"c9de756e":"code","0540b4fa":"code","35b344c4":"code","524a80be":"code","0fe25ea8":"code","454e1cdc":"code","6353c202":"code","44c98bd9":"code","98f1ca34":"code","d4f98388":"code","d7b89ce1":"code","18dc0694":"markdown","3ab96126":"markdown","eea8e623":"markdown","0c796ca2":"markdown"},"source":{"c9de756e":"#Loading the relevant libraries into the worksheet\n\n\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nfrom sklearn import datasets, svm, metrics\nfrom sklearn.model_selection import train_test_split\nsns.set()","0540b4fa":"#loading the dataset\ndigits = datasets.load_digits()","35b344c4":"print(digits.keys())","524a80be":"digits.target_names\n","0fe25ea8":"#Showing examples from the dataset\n\n_,axes=plt.subplots(nrows=1, ncols=10, figsize=(20, 6))\nfor ax, image, label in zip(axes, digits.images, digits.target):\n    ax.set_axis_off()\n    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')\n    ax.set_title('Training: %i' % label)\nplt.show()","454e1cdc":"x= digits.data\ny=digits.target\nveri= pd.DataFrame(x,columns= digits.feature_names)\nveri.head()","6353c202":"z= digits.target\n\nveri[\"target digits\"]=pd.DataFrame(z)\n\n#veri[\"target digit\"]= veri[\"target digit\"].replace({0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9})\nveri[\"target digits\"]= veri[\"target digits\"].replace({0:\"zero\",1:\"one\",2:\"two\",3:\"three\",4:\"four\",5:\"five\",6:\"six\",7:\"seven\",8:\"eight\",9:\"nine\"})\nprint(veri)","44c98bd9":"from sklearn.neighbors import KNeighborsClassifier\n\nknn=KNeighborsClassifier(n_neighbors =5)\nknn.fit(digits[\"data\"], digits[\"target\"])","98f1ca34":"from sklearn.model_selection import train_test_split\n\nx= digits.data\ny= digits.target\n\nx_train, x_test, y_train, y_test = train_test_split( x, y, test_size=0.30, random_state=999, stratify=y)\nknn.fit(x_train, y_train)\naccuracy = knn.predict(x_test)\nprint(accuracy)\nknn.score(x_test, y_test)","d4f98388":"neighbors = np.arange(1,11)\ntrain_accuracy= np.empty(len(neighbors))\ntest_accuracy= np.empty(len(neighbors))\n\nfor i, k in enumerate (neighbors):\n    knn= KNeighborsClassifier(n_neighbors =k)\n    knn.fit(x_train, y_train)\n    train_accuracy[i]= knn.score(x_train, y_train)\n    test_accuracy[i] = knn.score(x_test, y_test)\n    \n","d7b89ce1":"#A graph was created to determine the most suitable number of neighbors.\n\nplt.plot(neighbors, train_accuracy, label=\" Train data accuracy\")\nplt.plot(neighbors, test_accuracy, label =\"Test data accuracy\")\nplt.legend()\n\nplt.xlabel(\"Neighbors\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Performance\")\nplt.show","18dc0694":"**analysis of exploratory dataset**","3ab96126":"# Classification of figures with KNN\n\n","eea8e623":"# ACCURACY","0c796ca2":"# K-Nearest Neighbors"}}