{"cell_type":{"3d670dbe":"code","5dea94f3":"code","42cd32a5":"code","949511ea":"code","31d010f7":"code","cbe586a1":"code","74f9f4fd":"code","d8d0e3eb":"markdown","c25646cd":"markdown","de81692e":"markdown","90335024":"markdown","ee8f3482":"markdown","de7e6c0f":"markdown","0d3df6a5":"markdown"},"source":{"3d670dbe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import keras\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimg_rows, img_cols = 28, 28\nnum_classes = 10\n\ndef prep_data(raw):\n    y = raw[:, 0]\n    out_y = keras.utils.to_categorical(y, num_classes)\n    \n    x = raw[:,1:]\n    num_images = raw.shape[0]\n    out_x = x.reshape(num_images, img_rows, img_cols, 1)\n    out_x = out_x \/ 255\n    return out_x, out_y\n\nfile = \"\/kaggle\/input\/digit-recognizer\/train.csv\"\ndata = np.loadtxt(file, skiprows=1, delimiter=',')\nx, y = prep_data(data)","5dea94f3":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, Dropout\n\nmodel = Sequential()\nmodel.add(Conv2D(12, kernel_size=(3,3), activation='relu', input_shape=(img_rows, img_cols, 1)))\nmodel.add(Conv2D(12, kernel_size=(3,3), activation='relu'))\nmodel.add(Conv2D(12, kernel_size=(3,3), activation='relu'))\nmodel.add(Conv2D(12, kernel_size=(3,3), activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))","42cd32a5":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","949511ea":"model.fit(x, y, batch_size=100, epochs=25, validation_split=0.2)","31d010f7":"score = model.evaluate(x, y, verbose=0)\nprint(f'Test loss: {score[0]} \/ Test accuracy: {score[1]}')","cbe586a1":"def prep_test_data(raw):\n    x = raw[:,0:]\n    num_images = raw.shape[0]\n    out_x = x.reshape(num_images, img_rows, img_cols, 1)\n    out_x = out_x \/ 255\n    return out_x\n\nval_file = \"\/kaggle\/input\/digit-recognizer\/test.csv\"\nval_data = np.loadtxt(val_file, skiprows=1, delimiter=',')\nx_test = prep_test_data(val_data)","74f9f4fd":"predictions = model.predict_classes(x_test)\n\nindexes = [i for i in range(1,len(val_data)+1)]\noutput = pd.DataFrame({'ImageId': indexes,'Label': predictions})\noutput.to_csv('submission.csv', index=False)","d8d0e3eb":"# Compiling","c25646cd":"# Building The Model","de81692e":"# Hello World! \nThis is my very first machine learning project. So I expect a lot of warnings, errors and absolute-piece-of-shit validation scores. Here we go.","90335024":"# Validation Score","ee8f3482":"# Preparing Test Data","de7e6c0f":"# Predicting & Saving","0d3df6a5":"# Fitting"}}