{"cell_type":{"bb860353":"code","ef5796db":"code","2cf4efc5":"code","c7155a90":"code","1e33fd66":"code","d50422cb":"code","c32c0c32":"code","40f1e36d":"code","e3725f78":"code","3c1fda11":"code","a88f68e0":"code","bedd34dc":"code","d2ced0ba":"code","f6debc3e":"code","5ba9b598":"code","738aced1":"code","294931ac":"code","d49e32e3":"code","eda21f92":"code","0c56078d":"code","da7e90c2":"code","5473bb22":"code","03983b52":"code","9c64d6ac":"code","33ae42b8":"code","abe8fa6e":"code","28d9faa9":"code","f4d3bad8":"code","4533651b":"code","468df816":"code","526c7a93":"code","ff0ed431":"markdown","ff4b8834":"markdown","e619cfb0":"markdown","e0c2d8c8":"markdown","928623a0":"markdown","89fee3fc":"markdown","3e104dbd":"markdown","bc4fefa8":"markdown","86e0336b":"markdown","d87fbd1a":"markdown","4277a0cc":"markdown","c2b9c1e3":"markdown","f308be7e":"markdown","20d51577":"markdown","9c564f90":"markdown","e97fbce4":"markdown","5d018ca7":"markdown","3ec759e6":"markdown","bf8eb0c8":"markdown"},"source":{"bb860353":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ef5796db":"import seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score, accuracy_score, confusion_matrix\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom warnings import filterwarnings\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.preprocessing import LabelEncoder \nfilterwarnings(\"ignore\")\n\n","2cf4efc5":"data = pd.read_csv(\"..\/input\/vehicle-dataset-from-cardekho\/car data.csv\")\n","c7155a90":"data.head()","1e33fd66":"data.shape","d50422cb":"data.info()","c32c0c32":"data.describe().T","40f1e36d":"corr_matrix =data.corr()\nsns.clustermap(corr_matrix,annot=True,fmt=\".2f\")\nplt.show()","e3725f78":"sns.pairplot(data)","3c1fda11":"data.corrwith(data[\"Selling_Price\"])","a88f68e0":"plt.plot(data[\"Present_Price\"],data[\"Selling_Price\"], 'o')\nplt.xlabel(\"Present_Price\")\nplt.ylabel(\"Selling_Price\")\nplt.show()\n","bedd34dc":"plt.plot(data[\"Year\"],data[\"Selling_Price\"], 'o',color ='red')\nplt.xlabel(\"Year\")\nplt.ylabel(\"Selling_Price\")\nplt.show()","d2ced0ba":"plt.plot(data[\"Kms_Driven\"],data[\"Selling_Price\"], 'o',color ='green')\nplt.xlabel(\"Kms_Driven\")\nplt.ylabel(\"Selling_Price\")\n\n\nplt.show()","f6debc3e":"plt.plot(data[\"Owner\"],data[\"Selling_Price\"], 'o',color ='black')\nplt.xlabel(\"Owner\")\nplt.ylabel(\"Selling_Price\")\nplt.show()","5ba9b598":"plt.figure(figsize=[14,10])\nplt.subplot(2,2,1)\nsns.boxplot(x='Selling_Price',data=data,color=\"blue\")\nplt.subplot(2,2,2)\nsns.boxplot(x='Year',data=data,color=\"red\")\nplt.subplot(2,2,3)\nsns.boxplot(x='Present_Price',data=data,color=\"pink\")\nplt.subplot(2,2,4)\nsns.boxplot(x='Kms_Driven',data=data,color=\"green\")\n\nplt.show()","738aced1":"sp_out=data[\"Selling_Price\"]\nsns.boxplot(y=data[\"Selling_Price\"] )\nplt.show()\n\n\n\nq1_sp_out=sp_out.quantile(0.25) #Creatine phosphokinase  0.25 th value\nq3_sp_out =sp_out.quantile(0.70)#Creatine phosphokinase  0.75 th value\n\nprint(q1_sp_out)\nprint(q3_sp_out)","294931ac":"igr_sp_out = q3_sp_out - q1_sp_out\nlow_lim_sp_out = q1_sp_out - 1.5 * igr_sp_out #lower limit\nup_lim_sp_out = q3_sp_out + 1.5 * igr_sp_out #upper limit\n\n\nprint(igr_sp_out)\nprint(low_lim_sp_out)\nprint(up_lim_sp_out)","d49e32e3":"sp_out_mean=4.661296\nsp_out[((sp_out>(up_lim_sp_out)) | (sp_out<(low_lim_sp_out)))]=sp_out_mean\n\n\nprint(data[\"Selling_Price\"])\nsns.boxplot(y=data[\"Selling_Price\"] )\nplt.show()","eda21f92":"y_out=data[\"Year\"]\nsns.boxplot(y=data[\"Year\"] )\nplt.show()\n\n\n\nq1_y_out=y_out.quantile(0.25) #Creatine phosphokinase  0.25 th value\nq3_y_out =y_out.quantile(0.72)#Creatine phosphokinase  0.75 th value\n\nprint(q1_y_out)\nprint(q3_y_out)","0c56078d":"igr_y_out =q3_y_out-q1_y_out\nlow_lim_y_out = q1_y_out - 1.5 * igr_y_out #lower limit\nup_lim_y_out = q3_y_out + 1.5 * igr_y_out #upper limit\n\n\nprint(igr_y_out)\nprint(low_lim_y_out)\nprint(up_lim_y_out)","da7e90c2":"y_out_mean=2013.627907\ny_out[((y_out>(up_lim_y_out)) | (y_out<(low_lim_y_out)))]=y_out_mean\n\n\nprint(data[\"Year\"])\nsns.boxplot(y=data[\"Year\"] )\nplt.show()","5473bb22":"pc_out=data[\"Present_Price\"]\nsns.boxplot(y=data[\"Present_Price\"] )\nplt.show()\n\n\n\nq1_pc_out=pc_out.quantile(0.25) #Creatine phosphokinase  0.25 th value\nq3_pc_out =pc_out.quantile(0.72)#Creatine phosphokinase  0.75 th value\n\nprint(q1_pc_out)\nprint(q3_pc_out)","03983b52":"igr_pc_out = q3_pc_out - q1_pc_out\nlow_lim_pc_out = q1_pc_out - 1.5 * igr_pc_out #lower limit\nup_lim_pc_out = q3_pc_out + 1.5 * igr_pc_out #upper limit\n\n\nprint(igr_pc_out)\nprint(low_lim_pc_out)\nprint(up_lim_pc_out)","9c64d6ac":"pc_out_mean=7.628472\npc_out[((pc_out>(up_lim_pc_out)) | (pc_out<(low_lim_pc_out)))]=pc_out_mean\n\n\nprint(data[\"Year\"])\nsns.boxplot(y=data[\"Year\"] )\nplt.show()","33ae42b8":"kd_out=data[\"Kms_Driven\"]\nsns.boxplot(y=data[\"Kms_Driven\"] )\nplt.show()\n\n\n\nq1_kd_out=kd_out.quantile(0.25) #Creatine phosphokinase  0.25 th value\nq3_kd_out =kd_out.quantile(0.72)#Creatine phosphokinase  0.75 th value\n\nprint(q1_kd_out)\nprint(q3_kd_out)","abe8fa6e":"igr_kd_out = q3_kd_out - q1_kd_out\nlow_lim_kd_out = q1_kd_out - 1.5 * igr_kd_out #lower limit\nup_lim_kd_out = q3_kd_out + 1.5 * igr_kd_out #upper limit\n\n\nprint(igr_kd_out)\nprint(low_lim_kd_out)\nprint(up_lim_kd_out)","28d9faa9":"kd_out_mean=36947.205980\nkd_out[((kd_out>(up_lim_kd_out)) | (kd_out<(low_lim_kd_out)))]=kd_out_mean\n\n\nprint(data[\"Kms_Driven\"])\nsns.boxplot(y=data[\"Kms_Driven\"] )\nplt.show()","f4d3bad8":"\nlbe=LabelEncoder()\ndata[\"Seller_Type\"]=lbe.fit_transform(data[\"Seller_Type\"])\ndata[\"Fuel_Type\"]=lbe.fit_transform(data[\"Fuel_Type\"])\ndata[\"Transmission\"]=lbe.fit_transform(data[\"Transmission\"])\ndata =data.drop([\"Car_Name\"],axis=1)\n\n\ndata[\"Seller_Type\"] =data[\"Seller_Type\"].astype(str)\ndata[\"Fuel_Type\"] =data[\"Fuel_Type\"].astype(str)\ndata[\"Transmission\"] =data[\"Transmission\"].astype(str)\ndata=pd.get_dummies(data)\nprint(data)","4533651b":"\n\ny = data[\"Selling_Price\"]\nx=data.drop([\"Selling_Price\"],axis=1)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)\n\n\n\nprint(\"x train: \",x_train.shape)\nprint(\"x test: \",x_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)\n","468df816":"from sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n\nmodel = LinearRegression().fit(x_train,y_train)\nprint(model.score(x_train,y_train))\n\n\ny_pred =model.predict(x_test)\n\n\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\n\n\npred=pd.DataFrame(y_pred)\n\nplt.figure(figsize = (18, 6))\nindex=y_test.reset_index()[\"Selling_Price\"]\nax=index.plot(label=\"original values\")\nax=pred[0].plot(label = \"predicted values\")\nplt.legend(loc='upper right')\nplt.title(\"Test vs Pred\")\nplt.xlabel(\"indexes\")\nplt.ylabel(\"values\")\nplt.show()\n","526c7a93":"from sklearn.ensemble import RandomForestRegressor\n\nmodel2=RandomForestRegressor().fit(x_train,y_train)\nprint(model2.score(x_train,y_train))\n\ny_pred2=model2.predict(x_test)\n\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred2))\nprint('MSE:', metrics.mean_squared_error(y_test, y_pred2))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred2)))\n\n\npred2=pd.DataFrame(y_pred2)\n\n\nplt.figure(figsize = (18, 6))\nindex=y_test.reset_index()[\"Selling_Price\"]\nax=index.plot(label=\"original values\")\nax=pred2[0].plot(label = \"predicted values\")\nplt.legend(loc='upper right')\nplt.title(\"Test vs Pred\")\nplt.xlabel(\"indexes\")\nplt.ylabel(\"values\")\nplt.show()","ff0ed431":"![buying-renting-new-used-speedy-sports-car_3446-651.jpg](attachment:buying-renting-new-used-speedy-sports-car_3446-651.jpg)","ff4b8834":"* Selling_Price","e619cfb0":"We haven't got null value.","e0c2d8c8":"# Predict the Selling Price of the Car","928623a0":"* Year","89fee3fc":"# 6-) Build Model And Accurcy Value\u00b6","3e104dbd":"# 4-)One Hot Encoding","bc4fefa8":"RandomForestRegressor","86e0336b":"I will examine the data set and estimate the price of the car using Linear Regression and Random Forest Regressor algorithms.","d87fbd1a":"# 5-)Split Data","4277a0cc":"# 2-)Exploratory Data Analysis\u00b6","c2b9c1e3":"* Kms_Driven","f308be7e":"TABLE OF CONTENTS\n\n1-)Importing Libraries And Importing Data\n\n2-)Exploratory Data Analysis\n\n3-)Outlier Detection\n\n4-)One Hot Encoding\n\n5-)Split Data\n\n6-)Build Model And Accurcy Value","20d51577":"LinearRegression","9c564f90":"* Present_Price","e97fbce4":"# 3-)Outlier Detection","5d018ca7":"****Eliminate Outliers****","3ec759e6":"Columns in data set:\n\n* name = Name of the car\n* year = Year of manufacture of the car\n* selling_price = Sale price\n* km_driven = The kilometer traveled by the car\n* fuel = Fuel type\n* seller_type = Seller type\n* transmission =Gear type of car\n*  Owner =Owner","bf8eb0c8":"# 1-)Import Library and Data"}}