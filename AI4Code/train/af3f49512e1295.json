{"cell_type":{"79df5a2d":"code","b30e1117":"code","b642e827":"code","a441d3f7":"code","2c3576ae":"code","320f2432":"code","6b5ce883":"code","6f8b7280":"code","803b1f8d":"code","ea26960d":"code","c3ad6058":"code","e4841adb":"code","fcd84cd3":"code","ecd36401":"code","ff1c470b":"code","4e09d3b1":"code","352c2cc1":"code","c83e602c":"code","d9074e45":"code","2a148910":"code","10b0b3c1":"code","a0bf0f0b":"markdown","49d5a874":"markdown"},"source":{"79df5a2d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b30e1117":"df = pd.read_csv(\"\/kaggle\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-09-14.csv\")\ndf.head()","b642e827":"df.info() ## info about types of columns","a441d3f7":"t_df = df.isna().sum() ## number of missing values\nt_df","2c3576ae":"df.shape ## total number of rows and columns","320f2432":"df[df.isna().any(axis=1)] ## row with missing values","6b5ce883":"## percentage of missing values\nt_df = (t_df\/df.shape[0])*100\nt_df\n","6f8b7280":"## convert unix to normal time format\ndf[\"Timestamp\"] = pd.to_datetime(df[\"Timestamp\"],unit=\"s\")\ndf.head()","803b1f8d":"df.Open.sample(20)","ea26960d":"#fill NaN values with median values \n# first need to find median values of columns\ntemp = df[pd.notna(df[\"Open\"])]\ntemp.info()","c3ad6058":"temp.shape","e4841adb":"med_temp = np.median(temp[\"Open\"])\nmed_temp","fcd84cd3":"df[\"Open\"].plot(kind=\"hist\")","ecd36401":"# as seen above median values are applicable\n# fill NaN values in Open, High, Low and Close\ndf[\"Open\"].fillna(med_temp, inplace=True)\ndf[\"High\"].fillna(med_temp, inplace=True)\ndf[\"Low\"].fillna(med_temp, inplace=True)\ndf[\"Close\"].fillna(med_temp, inplace=True)","ff1c470b":"# fill other NaN values with 0\ndf[\"Volume_(BTC)\"].fillna(0, inplace=True)\ndf[\"Volume_(Currency)\"].fillna(0, inplace=True)\ndf[\"Weighted_Price\"].fillna(0, inplace=True)","4e09d3b1":"df.isna().sum()","352c2cc1":"df.corr()","c83e602c":"## Correlation graph\nf,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(df.corr(), annot=True, linewidth=1, fmt=\".2f\", center=0, ax=ax, cmap=\"YlGnBu\")\nplt.show()","d9074e45":"## lineplot\ndf[\"Open\"].plot(kind=\"line\", label=\"Open\", alpha=0.5, color=\"red\", linestyle=\":\", grid=True, linewidth=1)\ndf[\"Close\"].plot(label=\"Close\", alpha=0.5, color=\"blue\", linestyle=\"-.\", grid=True, linewidth=1)\nplt.legend(loc=\"upper left\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.title(\"PRICE\")","2a148910":"## Scatter plot\ndf.plot(kind=\"scatter\", x=\"High\", y=\"Low\", alpha=0.5, color=\"orange\")\nplt.xlabel(\"High\")\nplt.ylabel(\"Low\")\nplt.title(\"PRICE\")","10b0b3c1":"## Histogram\ndf[\"Open\"].plot(kind=\"hist\", bins=45, figsize=(14,14), color = \"green\")","a0bf0f0b":"- Open and Close have the same distribution ","49d5a874":"* ### This is my first kernel that i have been trying to implement everything i learned so far from the tutorials. Therefore the results or plots may have been wrong. Every suggestion will be appricated**\n"}}