{"cell_type":{"7e3c8c7a":"code","752f6f7c":"code","0d561e3c":"code","77807f6d":"code","2377f01f":"code","9dcbce77":"code","350c9d56":"code","7b0126a8":"code","d45cb2c7":"code","d67d6170":"code","7e03b3bf":"code","e8a594ec":"code","9da71913":"code","94cb568c":"code","b3f1b3ae":"code","fb521477":"code","becadb3e":"code","f5f48279":"markdown","c5fe73df":"markdown","50b9be14":"markdown","b03e9950":"markdown","96a49b26":"markdown","5f6aafe9":"markdown","6beeb3e4":"markdown"},"source":{"7e3c8c7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","752f6f7c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_auc_score","0d561e3c":"# load Data\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\", index_col=\"PassengerId\")\nX_test = pd.read_csv(\"..\/input\/titanic\/test.csv\", index_col=\"PassengerId\")\nprint(train.info())\nprint(X_test.info())","77807f6d":"train.head(5)","2377f01f":"# Find na\nprint(\"TrainData\")\nprint(\"---------------\")\nprint(train.isna().sum())\n\nprint(\"TestData\")\nprint(\"---------------\")\nprint(X_test.isna().sum(),\"\\n\")","9dcbce77":"# Fill nan and replace of Cabin\ntrain.loc[~train.isna().Cabin, \"Cabin\"] = 1\ntrain.Cabin.fillna(0, inplace=True)\nX_test.loc[~X_test.isna().Cabin, \"Cabin\"] = 1\nX_test.Cabin.fillna(0, inplace=True)","350c9d56":"# Fill nan: Age\ntrain.Age = train.groupby([\"Pclass\",pd.cut(train.Fare, np.arange(0, 300, 2))],group_keys=False).Age.apply(lambda g: g.fillna(g.mean()))\ntrain.Age.fillna(train.Age.mean(), inplace=True)\ntrain = train.astype({\"Age\":\"int64\"})\n\nX_test.Age = X_test.groupby([\"Pclass\",pd.cut(X_test.Fare, np.arange(0, 300, 2))],group_keys=False).Age.apply(lambda g: g.fillna(g.mean()))\nX_test.Age.fillna(X_test.Age.mean(), inplace=True)\nX_test = X_test.astype({\"Age\":\"int64\"})\n\nprint(train.Age.isna().sum(), X_test.Age.isna().sum())","7b0126a8":"# Fill nan: Embarked\nprint(train[train.Embarked.isna()])\nprint(train[(train.Pclass==1) & (train.Sex==\"female\") & (train.Embarked==\"C\")].Fare.mean())\nprint(train[(train.Pclass==1) & (train.Sex==\"female\") & (train.Embarked==\"S\")].Fare.mean())\nprint(train[(train.Pclass==1) & (train.Sex==\"female\") & (train.Embarked==\"Q\")].Fare.mean())\nprint(train.Embarked.value_counts())\ntrain.Embarked.fillna(\"S\", inplace=True)","d45cb2c7":"# Fill nan: Fare\nX_test.Fare.fillna(X_test[X_test.Pclass==3].Fare.mean(), inplace=True)","d67d6170":"# Dummy encoding\ntrain = pd.get_dummies(train, columns=[\"Sex\",\"Embarked\"])\nX_test = pd.get_dummies(X_test, columns=[\"Sex\",\"Embarked\"])","7e03b3bf":"#split data\nX = train.drop(columns=[\"Survived\",\"Name\",\"Ticket\"])\ny = train[\"Survived\"]\nX_test.drop(columns=[\"Name\",\"Ticket\"], inplace=True)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.5)\n\nprint(y_train.value_counts())\nprint(y_valid.value_counts())","e8a594ec":"X_train.head(6)","9da71913":"pd.plotting.scatter_matrix(X, c=y, figsize=(25,25))\nplt.show()","94cb568c":"plt.figure(figsize=(20,10))\nfor num, col in enumerate([\"Age\",\"SibSp\",\"Parch\",\"Fare\"]):\n    plt.subplot(1,4, num+1)\n    plt.boxplot(X[col])\n    plt.title(col)\nplt.show()","b3f1b3ae":"X.corrwith(y)","fb521477":"randomforest = RandomForestClassifier(n_estimators=200, max_depth=5)\nmodel1 = randomforest.fit(X_train, y_train)\npred_valid = model1.predict(X_valid)\npred_valid_prob = model1.predict_proba(X_valid)\nprint(classification_report(y_valid, pred_valid))\nprint(model1.score(X_valid, y_valid))\nprint(roc_auc_score(y_valid,pred_valid_prob[:,1]))","becadb3e":"model = randomforest.fit(X, y)\npred = model.predict(X_test)\nresult = pd.DataFrame(pred, index=X_test.index, columns=[\"Survived\"])\nresult.to_csv(\"submission.csv\")\nresult.head()","f5f48279":"# **Random Forest**","c5fe73df":"## Metadata\n|Variable | Definition | Key |\n|---------|------------|-----|\n|survival | Survival   |0 = No, 1 = Yes|\n|pclass|Ticket class|1 = 1st, 2 = 2nd, 3 = 3rd|\n|sex|Sex||\n|Age|Age in years||\n|sibsp|# of siblings \/ spouses aboard the Titanic||\n|parch|# of parents \/ children aboard the Titanic||\n|ticket|Ticket number||\n|fare|Passenger fare||\n|cabin|Cabin number||\n|embarked|Port of Embarkation|C = Cherbourg, Q = Queenstown, S = Southampton|\n","50b9be14":"# **Libraries**","b03e9950":"# **Load Data**","96a49b26":"# **EDA**","5f6aafe9":"# **Result**","6beeb3e4":"# **Preprocessing**"}}