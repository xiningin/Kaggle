{"cell_type":{"8861e690":"code","a44ac2fc":"code","10ec9808":"code","82cdb47b":"code","3dcc39e4":"code","13504cf3":"code","bae33f12":"code","dc4a91e6":"code","d30cbf0c":"code","1d672843":"code","955d0cdf":"code","b4275fd5":"code","f93ca180":"code","a22156df":"code","310a7f02":"code","23acde93":"code","39722845":"code","cdc0a5b5":"code","d430fc10":"code","c03bb321":"code","781b0e91":"code","f421d808":"code","9886a713":"code","b0a997c1":"code","9b42a460":"code","07eaf4b5":"code","d036e49d":"code","c139b378":"code","7fbcacbf":"code","bafcb514":"code","f3589ffd":"code","9744192c":"code","97495882":"code","e2725eb3":"code","07e34f2c":"code","fd6ffa32":"code","fe802e3a":"code","a0e0698c":"code","4087db10":"code","22c34359":"code","03d839da":"code","b8b92570":"code","5b87ba52":"code","250e9ca7":"code","68b77770":"code","adefee1a":"code","124d13e5":"code","9a98ca91":"code","f015e1b7":"code","f804aca9":"code","70b771aa":"code","363746e3":"code","93354f74":"code","70ce4ed6":"markdown","1ec93b32":"markdown","92d07ad2":"markdown","e1d83d8a":"markdown","700d16e5":"markdown","5f30c5c0":"markdown","2ec4404b":"markdown","b1019031":"markdown","92667324":"markdown","8248a84e":"markdown","39963f80":"markdown","7fb1b886":"markdown","f1192f90":"markdown","b8e0bf7b":"markdown","a11b60cd":"markdown","8007ef08":"markdown","d33e1fe0":"markdown","d494359d":"markdown","561fc5cc":"markdown"},"source":{"8861e690":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os","a44ac2fc":"# Load .csv to variables\nbreeds = pd.read_csv('..\/input\/breed_labels.csv')\ncolors = pd.read_csv('..\/input\/color_labels.csv')\n\ntrain = pd.read_csv('..\/input\/train\/train.csv')\ntest = pd.read_csv('..\/input\/test\/test.csv')\n\ntrain['dstype']='train'\ntest['dstype']='test'\nall=pd.concat([train,test])\nall=all.reset_index(drop=True)\ntrain.drop('Description',axis=1,inplace=True)\ntest.drop('Description',axis=1,inplace=True)\nall.drop('Description',axis=1,inplace=True)","10ec9808":"# Fetch train dataset's infomation\nall.info()","82cdb47b":"train.head()","3dcc39e4":"%matplotlib inline\ndata = train['AdoptionSpeed'].value_counts()\ndata.plot('barh')\nfor i,v in enumerate(data.values):\n    plt.gca().text(v+50,i-0.1,str(v),color='teal',fontweight='bold')","13504cf3":"# Change type 1 to dog, 2 to cat\nall['Type']=all['Type'].apply(lambda x:'Dog' if x==1 else 'Cat')\nall[all.Name==\"Brisco\"]","bae33f12":"plt.figure(figsize=(5,3))\nsns.countplot(x='dstype',data=all,hue='Type')\nplt.title('Amount of cats and dogs in test set and train set')","dc4a91e6":"# See the age of dogs & cats\ntrain.Age.value_counts().head(10)","d30cbf0c":"plt.figure(figsize=(10, 6))\nsns.violinplot(x=\"AdoptionSpeed\", y=\"Age\", hue=\"Type\", data=train)\nplt.title('AdoptionSpeed by Type and age')","1d672843":"\n# Set all cells in column 'Name' to 1 if there is 'no name' or blank (null)\nfor i,value in enumerate(all.Name):\n    if(str(value).lower().find('no name')==0 ):\n        all.at[i,'Name']=1\nfor i in all[all['Name'].isnull()].index:\n    all.at[i,'Name']=1\n# Set the remaining cells to 0\nfor i,value in enumerate(all.Name):\n    if(str(value)!= '1' ):\n        all.at[i,'Name']=0\n# Rename Name to No-Name\nall.rename(columns={'Name':'NoName'},inplace=True)\n\n","955d0cdf":"ax = sns.barplot(x=\"AdoptionSpeed\", y=\"AdoptionSpeed\", data=all[all.NoName==1], estimator=lambda x: len(x) \/ len(all[all.NoName==1]) * 100)\nax.set(ylabel=\"Percent\")\nax.set_title('Adoption Speed for no names')","b4275fd5":"ax = sns.barplot(x=\"AdoptionSpeed\", y=\"AdoptionSpeed\", data=all[all.NoName==0], estimator=lambda x: len(x) \/ len(all[all.NoName==0]) * 100)\nax.set(ylabel=\"Percent\")\nax.set_title('Adoption Speed for named pets')","f93ca180":"all.groupby('Quantity').agg(['count','mean'])['AdoptionSpeed']","a22156df":"breeds[breeds.BreedName=='Mixed Breed']","310a7f02":"train['Pure']=0\ntrain.loc[train['Breed2']==0,'Pure']=1\ntrain.loc[train['Breed1']==307,'Pure']=0\ntest['Pure']=0\ntest.loc[test['Breed2']==0,'Pure']=1\ntest.loc[test['Breed1']==307,'Pure']=0\nprint('-Train:')\nprint('There are',len(train[train.Pure==1]), 'Pure Breed',len(train[train.Pure==1])\/len(train)*100,\"%\")\nprint('There are',len(train[train.Pure==0]), 'Mixed Breed',len(train[train.Pure==0])\/len(train)*100,\"%\")\nprint('-Test:')\nprint('There are',len(test[test.Pure==1]), 'Pure Breed',len(test[test.Pure==1])\/len(test)*100,\"%\")\nprint('There are',len(test[test.Pure==0]), 'Mixed Breed',len(test[test.Pure==0])\/len(test)*100,\"%\")\nall['Pure']=0\nall.loc[all['Breed2']==0,'Pure']=1\nall.loc[all['Breed1']==307,'Pure']=0\nall","23acde93":"train[train.Pure==1]['AdoptionSpeed'].mean()","39722845":"train[train.Pure==0]['AdoptionSpeed'].mean()","cdc0a5b5":"sns.factorplot('Type', col='Gender', data=all, kind='count', hue='dstype');\nplt.subplots_adjust(top=0.8)\nplt.suptitle('Count of cats and dogs in train and test set by gender');","d430fc10":"sns.countplot(x='AdoptionSpeed',data=all,hue='Gender')","c03bb321":"#One Hot Encoder\nfrom sklearn.preprocessing import LabelBinarizer\n\nLaBi = LabelBinarizer()\n\nBreed1_lb=LaBi.fit_transform(all.Breed1)\nBreed2_lb=LaBi.fit_transform(all.Breed2)\nType_lb=LaBi.fit_transform(all.Type)\nGender_lb=LaBi.fit_transform(all.Gender)\nVaccinated_lb=LaBi.fit_transform(all.Vaccinated)\nDewormed_lb = LaBi.fit_transform(all.Dewormed)\nFurLength_lb = LaBi.fit_transform(all.FurLength)\nSterilized_lb = LaBi.fit_transform(all.Sterilized)\nHealth_lb = LaBi.fit_transform(all.Health)\nColor1_lb = LaBi.fit_transform(all.Color1)\nColor2_lb = LaBi.fit_transform(all.Color2)\nColor3_lb = LaBi.fit_transform(all.Color3)\nallLB=np.append(Breed1_lb,Breed2_lb,axis=1)\nallLB=np.append(allLB,Type_lb,axis=1)\nallLB=np.append(allLB,Gender_lb,axis=1)\nallLB=np.append(allLB,Vaccinated_lb,axis=1)\nallLB=np.append(allLB,Dewormed_lb,axis=1)\n#allLB=np.append(allLB,FurLength_lb,axis=1)\nallLB=np.append(allLB,Sterilized_lb,axis=1)\nallLB=np.append(allLB,Health_lb,axis=1)\nallLB=np.append(allLB,Color1_lb,axis=1)\nallLB=np.append(allLB,Color2_lb,axis=1)\n#allLB=np.append(allLB,Color3_lb,axis=1)\nallLB.shape","781b0e91":"all_mat=np.append(allLB,all[['Age','NoName','Pure','Quantity']].values.reshape(18941,4),axis=1)\nall_mat=np.append(all_mat,all['AdoptionSpeed'].values.reshape(18941,1),axis=1)\ntrain_x=all_mat[:14993,:-1]\ntrain_y=all_mat[:14993,-1]\ntest_x=all_mat[14993:,:-1]\ntest_y=all_mat[14993:,-1]\nall_mat.shape","f421d808":"submission=pd.read_csv('..\/input\/test\/sample_submission.csv')\nsubmission.head()","9886a713":"from sklearn.model_selection import train_test_split\ntrain_x,cv_x,train_y,cv_y=train_test_split(train_x,train_y,test_size=0.2)\n","b0a997c1":"import sklearn\nfrom sklearn.preprocessing import scale \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn import preprocessing","9b42a460":"train.values[:,:-2]","07eaf4b5":"train.columns","d036e49d":"LogReg = LogisticRegression()\nLogReg.fit(train_x, list(train_y))\n","c139b378":"y_pred = LogReg.predict(cv_x)","7fbcacbf":"y_pred","bafcb514":"# Metrics\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(list(cv_y),y_pred)\naccuracy","f3589ffd":"#y_test_pred=LogReg.predict(test_x)\n","9744192c":"# Get predicted array into dataframe\n#for i,value in enumerate(y_test_pred):\n#    submission.set_value(i,'AdoptionSpeed',value)\n#submission.tail()","97495882":"# Import into CSV\n#submission.to_csv('submission.csv', index=False)","e2725eb3":"from xgboost import XGBClassifier","07e34f2c":"xgb_model = XGBClassifier()\nxgb_model.fit(train_x, train_y)","fd6ffa32":"# Predict\nprediction = xgb_model.predict(cv_x)","fe802e3a":"# Evaluate\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(list(cv_y),list(prediction))\naccuracy","a0e0698c":"#y_pred = xgb_model.predict(test_x)","4087db10":"#for i,value in enumerate(y_pred):\n#    submission.set_value(i,'AdoptionSpeed',value)\n#submission.to_csv('submission.csv', index=False)\n#y_pred[-1]","22c34359":"#y_pred","03d839da":"#submission.head()","b8b92570":"from keras.models import Sequential\nfrom keras.layers import Dense\nimport keras\nfrom keras.layers import Dropout","5b87ba52":"model = Sequential()\nmodel.add(Dense(600, activation='relu',  kernel_initializer='normal',input_dim=train_x.shape[1]))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(5, activation='softmax'))\nmcp = keras.callbacks.ModelCheckpoint(\"model.h5\", monitor=\"val_acc\",  save_best_only=True, save_weights_only=False)","250e9ca7":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","68b77770":"train_y_lb = LaBi.fit_transform(list(train_y))\ncv_y_lb = LaBi.fit_transform(list(cv_y))","adefee1a":"model.fit(train_x, train_y_lb, epochs=10, validation_data=(cv_x,cv_y_lb), callbacks=[mcp], batch_size=16)","124d13e5":"from keras.models import load_model\nbest_model = load_model(\"model.h5\")\n","9a98ca91":"#Evaluate\nscore = best_model.evaluate(cv_x, cv_y_lb, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","f015e1b7":"y_pred=best_model.predict(test_x)\ny_pred[0:20]\nimport operator\n# Y_list: from one-hot y_pred to choosing output based index. e.g : if [0 0 1] then 2 or if [0 1 0] then 1\ny_list=[]\nfor i in y_pred:\n    index, value = max(enumerate(i), key=operator.itemgetter(1))\n    y_list.append(index)\ny_pred=best_model.predict(test_x)\ny_list","f804aca9":"for i,value in enumerate(y_list):\n        submission.set_value(i,'AdoptionSpeed',value)\n    \nsubmission.to_csv('submission.csv', index=False)","70b771aa":"submission.head()","363746e3":"train_x.shape","93354f74":"train_y_lb.shape","70ce4ed6":"# Deep Learning","1ec93b32":"# Cat or dog","92d07ad2":"As we can see, we have a dataset with 14993 data points, over a thousand name & description are missing but those should be trivial :D ","e1d83d8a":"The more young the pets are, the more likely they are getting adopted","700d16e5":"# Age","5f30c5c0":"# Adoption Speed","2ec4404b":"Looks like I was right! Not-named pets are less likely to get adopted compared to named pets by 5% :D","b1019031":"# Name","92667324":"# Gender","8248a84e":" Mostly pets are young, there are pet with the age equal to multiples of 12. Maybe the owners didn't really bother with ages\n","39963f80":"# Breed","7fb1b886":"Maybe pets with no names are less likely to get adopted because they haven't received loves from the owner (by the appearance maybe). Lets find out if it's true","f1192f90":"# XGBoost","b8e0bf7b":"Pure Breed are likely to get adopted quicker than mixed breed","a11b60cd":"There are more Female in the data","8007ef08":"The greater amount of pets in a group (an advertisement) the less likely of them to get adopted. Maybe they come in a group and are not treated as valuable as a single one","d33e1fe0":"# Logistic Regression","d494359d":"# Quantity","561fc5cc":"Sometimes they write in Breed2 to indicate Mixed Breed, sometimes they just straight up write BreedID=307 for indicating Mixed Breed"}}