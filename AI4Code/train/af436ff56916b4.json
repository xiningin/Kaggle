{"cell_type":{"7902f1a3":"code","6c6fc826":"code","0f7df115":"code","ac5447ad":"code","ac9ea2d3":"code","facb37cc":"code","da0fbdaa":"code","3abfd026":"code","38fa6b03":"code","1cec9810":"code","513b43e1":"code","300a9231":"code","3d622013":"code","0a7403a5":"code","1087adbe":"code","dd6e2b0f":"code","ce69bcaf":"code","435fb865":"code","79eb48d7":"code","08db9993":"code","f9eff788":"code","ddda610e":"code","92f9233c":"code","ea2c8345":"code","a87d49f4":"code","8d063c56":"code","888d3118":"code","10ca60f6":"code","3470c2ce":"code","9ff5a088":"code","88b4bf4c":"code","f7827335":"code","84964d55":"code","301719eb":"code","7eb7712b":"code","a8ab738a":"code","e2b248ba":"code","7ad345f0":"code","a12dbbea":"code","fdb029ba":"code","c0f1087a":"code","358dbacf":"code","d17807d5":"code","a959aafe":"code","ba025483":"code","9ca1d17c":"code","3ebf40b7":"code","50a864db":"code","3fb223b0":"code","506ac86f":"code","9fc0c4d1":"code","efbc4774":"code","6a7f0b28":"code","2968dab0":"code","f10c5d91":"code","53e8d5e0":"code","b6b8e956":"code","b3134fab":"code","7cdd322c":"code","9a882d82":"code","b1cec371":"code","af0bbcb5":"code","e9aba32a":"code","e4c8448d":"code","d3d98db5":"code","2c7a49e4":"code","2a5cddb0":"code","5869afed":"code","14de8188":"code","b576f915":"code","3d8481c7":"code","bdf221a0":"code","5e32eb91":"code","a38eb95a":"code","de49bb6d":"code","a2a1159b":"code","23cd154c":"code","3b871057":"code","6b6e3463":"code","b9c2a121":"code","6ca27838":"code","64884286":"code","d6c0eb70":"code","1b309a14":"code","2a5d3617":"code","fddb1328":"code","3ca2381a":"code","87943855":"code","db656683":"code","e693d6fb":"code","7ad8702a":"code","19d4a773":"code","fb0a6383":"code","2c39b8f8":"code","9b7e214a":"code","fe299590":"code","d04f9afd":"code","5aa85c70":"code","902a20b2":"code","aa5bc768":"code","e1ab288b":"code","c36b0a41":"code","506d6f0c":"code","a3038ef7":"code","4ac1bc2c":"code","fa1111ec":"code","4b8600b7":"code","46ead097":"code","e0245668":"code","9084e5bc":"code","88a74399":"code","5f64f9c6":"code","6bf6160a":"code","95ce7732":"code","9c456898":"code","553fcc78":"code","ef0cc20e":"code","ad034014":"code","288dac47":"code","954bfd1b":"code","e331b42d":"code","f6333b2a":"code","72fb14ad":"code","4d547767":"code","cacb1012":"code","a31d15f5":"code","f11f8d0a":"code","2007d685":"code","a83d896a":"code","4cf531c6":"code","1fb8e72e":"code","ad234180":"code","03dd9ce1":"code","f31fb9d2":"code","459cf862":"code","85ef5f71":"code","bc236ed1":"code","c2f17787":"code","a50d92cc":"code","a7c7a6c8":"code","336b3ee9":"code","d65e2d5b":"code","959682b9":"code","826ecb60":"code","ac4a9f1d":"code","92d62529":"code","d3835e9f":"code","24ffedad":"code","598815b8":"code","54ad0cbc":"code","43cd26a3":"code","491b74f0":"code","6a9280b5":"code","493df4f4":"code","f63c1fb9":"code","cd6216da":"code","573fdb6e":"code","bce1fdb2":"code","ce8268f1":"code","ff4393a6":"code","c4e5ffc5":"code","7aa947be":"code","83b92da1":"code","dcf2f117":"code","81ba6d7d":"code","acfaac4d":"code","a16d1658":"code","7ffb2fc9":"code","902a5ad5":"code","3621b7bf":"code","c4567bc8":"code","816a78ed":"code","43214d3f":"code","628f4bc6":"code","a4094330":"code","372f3e04":"code","63a42bca":"code","2795e134":"code","5ffa7f30":"code","93db3fbe":"code","6ca9aebf":"code","13f8da7d":"code","fb34f778":"code","1d2f36b5":"markdown","2b2c0dd2":"markdown","d77c107a":"markdown","cfd9210b":"markdown","cff5a598":"markdown","110c0103":"markdown","3c797be0":"markdown","c5d72c7d":"markdown","942db6a4":"markdown","4c1625b0":"markdown","072173f0":"markdown","1599470b":"markdown","e4f40cb4":"markdown","a93e4e5c":"markdown","b61d4c11":"markdown","b7241fb2":"markdown","839f69f4":"markdown","5189734f":"markdown","a7ffa76b":"markdown","64e24f4e":"markdown","791fe279":"markdown","47cf017e":"markdown","6da2ef9e":"markdown","a18baf62":"markdown","a61f9ca0":"markdown","26815471":"markdown","fbdf4ff8":"markdown","c6da6722":"markdown","096da4dd":"markdown","c20c70c4":"markdown","13c604d2":"markdown","f50015ed":"markdown","db1b59da":"markdown","43bd49ad":"markdown","17b1540c":"markdown","9ee401b2":"markdown","fcf26d71":"markdown","dadf3020":"markdown","46302476":"markdown","ccea4c41":"markdown","a5d4c8b3":"markdown","81b5770a":"markdown","30d49784":"markdown","323a45da":"markdown","a79d2b37":"markdown","4d323ab1":"markdown","8390d31b":"markdown","4d9e3e32":"markdown","cec8ffc6":"markdown","49a7d8e6":"markdown","a28b8db3":"markdown","6ad0f8c2":"markdown","2f62e7f1":"markdown","13b46519":"markdown","765b343c":"markdown","3656d71c":"markdown","48d87af3":"markdown"},"source":{"7902f1a3":"import numpy as np\nimport pandas as pd","6c6fc826":"# visualization\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom mpl_toolkits.basemap import Basemap\nimport folium\nfrom folium import plugins","0f7df115":"from sklearn.cross_validation import train_test_split","ac5447ad":"from sklearn import linear_model\nimport statsmodels.api as sm","ac9ea2d3":"df = pd.read_csv('..\/input\/crime.csv', encoding='latin-1')","facb37cc":"def print_five_rows(name_column):\n    return df[name_column][0:5]","da0fbdaa":"def describe_column(name_column):\n    return df[name_column].describe()","3abfd026":"def create_list_number_crime(name_column, list_unique):\n    # list_unique = df[name_column].unique()\n    \n    i = 0\n    \n    list_number = list()\n    \n    while i < len(list_unique):\n        list_number.append(len(df.loc[df[name_column] == list_unique[i]]))\n        i += 1\n    \n    return list_unique, list_number","38fa6b03":"def pie_plot(list_number, list_unique):\n    plt.figure(figsize=(20,10))\n    plt.pie(list_unique, \n        labels=list_number,\n        autopct='%1.1f%%', \n        shadow=True, \n        startangle=140)\n \n    plt.axis('equal')\n    plt.show()\n    return 0","1cec9810":"def bar_chart(list_number, list_unique):\n    objects = list_unique\n    y_pos = np.arange(len(objects))\n    performance = list_number\n \n    plt.figure(figsize=(20,10))    \n    plt.bar(y_pos, performance, align='center', alpha=0.5)\n    plt.xticks(y_pos, objects)\n    plt.ylabel('Number') \n    plt.show()\n    \n    return 0","513b43e1":"def drop_NaN_two_var(x, y):\n\n    df1 = df[[x, y]].dropna()\n    print(df1.shape)\n\n    x_value = df1[x]\n    y_value = df1[y]\n\n    del df1\n        \n    print(x + ': ' + str(x_value.shape))\n    print(y + ': ' + str(y_value.shape))\n        \n    return x_value, y_value","300a9231":"def function_OLS_Regression(x, y):\n    \n    model = sm.OLS(y, x)\n    res = model.fit()\n    return res.summary()","3d622013":"df.shape","0a7403a5":"df.columns","1087adbe":"df.isnull().sum()","dd6e2b0f":"print_five_rows('INCIDENT_NUMBER')","ce69bcaf":"describe_column('INCIDENT_NUMBER')","435fb865":"df = df.drop('INCIDENT_NUMBER', 1)","79eb48d7":"print_five_rows('OFFENSE_CODE')","08db9993":"len(df['OFFENSE_CODE'].unique())","f9eff788":"print_five_rows('OFFENSE_CODE_GROUP')","ddda610e":"describe_column('OFFENSE_CODE_GROUP')","92f9233c":"print_five_rows('OFFENSE_DESCRIPTION')","ea2c8345":"describe_column('OFFENSE_DESCRIPTION')","a87d49f4":"print_five_rows('DISTRICT')","8d063c56":"describe_column('DISTRICT')","888d3118":"df['DISTRICT'].unique()","10ca60f6":"print_five_rows('REPORTING_AREA')","3470c2ce":"describe_column('REPORTING_AREA')","9ff5a088":"print_five_rows('SHOOTING')","88b4bf4c":"df['SHOOTING'].unique()","f7827335":"print_five_rows('OCCURRED_ON_DATE')","84964d55":"df['OCCURRED_ON_DATE'] = pd.to_datetime(df['OCCURRED_ON_DATE'])","301719eb":"describe_column('OCCURRED_ON_DATE')","7eb7712b":"print_five_rows('YEAR')","a8ab738a":"df['MONTH'].unique()","e2b248ba":"df['DAY_OF_WEEK'].unique()","7ad345f0":"df['HOUR'].unique()","a12dbbea":"df['UCR_PART'].unique()","fdb029ba":"print_five_rows('STREET')","c0f1087a":"describe_column('STREET')","358dbacf":"df[['Lat', 'Long']].head()","d17807d5":"describe_column('Lat')","a959aafe":"describe_column('Long')","ba025483":"df['Location'].head()","9ca1d17c":"plt.figure(figsize=(16,8))\ndf['DISTRICT'].value_counts().plot.bar()\nplt.show()","3ebf40b7":"# 2015\nplt.figure(figsize=(8,4))\ndf['DISTRICT'].loc[df['YEAR']==2015].value_counts().plot.bar()\nplt.show()\n\n# 2016\nplt.figure(figsize=(8,4))\ndf['DISTRICT'].loc[df['YEAR']==2016].value_counts().plot.bar()\nplt.show()\n\n# 2017\nplt.figure(figsize=(8,4))\ndf['DISTRICT'].loc[df['YEAR']==2017].value_counts().plot.bar()\nplt.show()\n\n# 2018\nplt.figure(figsize=(8,4))\ndf['DISTRICT'].loc[df['YEAR']==2018].value_counts().plot.bar()\nplt.show()","50a864db":"i = 1\n\nwhile i < 13:\n    print('== ' + str(i) + ' ==')\n    print(df['DISTRICT'].loc[df['MONTH']==i].value_counts())\n    i +=1","3fb223b0":"list_unique_year, list_number_year = create_list_number_crime('YEAR',df['YEAR'].unique())","506ac86f":"pie_plot(list_unique_year, list_number_year)","9fc0c4d1":"bar_chart(list_number_year,list_unique_year)","efbc4774":"list_unique_month, list_number_month = create_list_number_crime('MONTH',list(range(1,13)))","6a7f0b28":"# pie_plot(list_unique_month,list_number_month)","2968dab0":"bar_chart(list_number_month,list_unique_month)","f10c5d91":"day_of_week = ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')","53e8d5e0":"list_unique_day, list_number_day = create_list_number_crime('DAY_OF_WEEK',day_of_week)","b6b8e956":"#pie_plot(list_unique_day,list_number_day)","b3134fab":"bar_chart(list_number_day,list_unique_day)","7cdd322c":"list_unique_hour, list_number_hour = create_list_number_crime('HOUR',list(range(0,24)))","9a882d82":"# pie_plot(list_unique_hour, list_number_hour)","b1cec371":"bar_chart(list_number_hour,list_unique_hour)","af0bbcb5":"df['SHOOTING'].fillna(0, inplace = True)\n\ndf['SHOOTING'] = df['SHOOTING'].map({\n    0: 0,\n    'Y':1\n})","e9aba32a":"shoot_true = len(df.loc[df['SHOOTING'] == 1])\nshoot_false = len(df.loc[df['SHOOTING'] == 0])","e4c8448d":"print('With shooting(num): ' + str(shoot_true))\nprint('With shooting(%):   ' + str(round(shoot_true*100\/len(df),2))+'%')\nprint()\nprint('Without shooting(num): ' + str(shoot_false))\nprint('Without shooting(%):   ' + str(round(shoot_false*100\/len(df),2))+'%')","d3d98db5":"df_shoot = df.loc[df['SHOOTING'] == 1]\ndf_shoot.shape","2c7a49e4":"shoot_y_2015 = len(df_shoot.loc[df_shoot['YEAR'] == 2015])\nshoot_y_2016 = len(df_shoot.loc[df_shoot['YEAR'] == 2016])\nshoot_y_2017 = len(df_shoot.loc[df_shoot['YEAR'] == 2017])\nshoot_y_2018 = len(df_shoot.loc[df_shoot['YEAR'] == 2018])\n\nunique_shoot_year = '2015', '2016', '2017', '2018'\nnumber_shoot_year = [shoot_y_2015, shoot_y_2016, shoot_y_2017, shoot_y_2018]","2a5cddb0":"# pie_plot(unique_shoot_year,number_shoot_year)","5869afed":"bar_chart(number_shoot_year,unique_shoot_year)","14de8188":"i = 1\nlist_month = list()\n\nwhile i <= 12:\n    list_month.append(len(df_shoot.loc[df_shoot['MONTH'] == i]))\n    i+=1","b576f915":"# pie_plot(list(range(1,13)), list_month)","3d8481c7":"bar_chart(list_month,list(range(1,13)))","bdf221a0":"day_of_week = ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')\n\ni = 0\nday_number = list()\n\nwhile i < 7:\n    day_number.append(len(df_shoot.loc[df_shoot['DAY_OF_WEEK'] == day_of_week[i]]))\n    \n    i +=1","5e32eb91":"# pie_plot(day_of_week, day_number)","a38eb95a":"bar_chart(day_number,day_of_week)","de49bb6d":"i = 0\nhour_number = list()\n\nwhile i < 24:\n    hour_number.append(len(df_shoot.loc[df_shoot['HOUR'] == i]))\n    i +=1","a2a1159b":"# pie_plot(list(range(0,24)), hour_number)","23cd154c":"bar_chart(hour_number,list(range(0,24)))","3b871057":"plt.figure(figsize=(20,10))\ndf_shoot['DISTRICT'].value_counts().plot.bar()\nplt.show()","6b6e3463":"location_shoot = df_shoot[['Lat','Long']]\nlocation_shoot = location_shoot.dropna()\n\nlocation_shoot = location_shoot.loc[(location_shoot['Lat']>40) & (location_shoot['Long'] < -60)]  \n\nx_shoot = location_shoot['Long']\ny_shoot = location_shoot['Lat']\n\n# Custom the inside plot: options are: \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d\nsns.jointplot(x_shoot, y_shoot, kind='scatter')\nsns.jointplot(x_shoot, y_shoot, kind='hex')\nsns.jointplot(x_shoot, y_shoot, kind='kde')","b9c2a121":"plt.figure(figsize=(20,10))\ndf['UCR_PART'].value_counts().plot.bar()\nplt.show()","6ca27838":"df[['Lat','Long']].describe()","64884286":"location = df[['Lat','Long']]\nlocation = location.dropna()\n\nlocation = location.loc[(location['Lat']>40) & (location['Long'] < -60)]  ","d6c0eb70":"x = location['Long']\ny = location['Lat']\n\n\ncolors = np.random.rand(len(x))\n\nplt.figure(figsize=(20,20))\nplt.scatter(x, y,c=colors, alpha=0.5)\nplt.show()","1b309a14":"m = folium.Map([42.348624, -71.062492], zoom_start=11)\nm","2a5d3617":"#x = location['Long']\n#y = location['Lat']\n\n\n# Custom the inside plot: options are: \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d\n#sns.jointplot(x, y, kind='scatter')\n#sns.jointplot(x, y, kind='hex')\n#sns.jointplot(x, y, kind='kde')","fddb1328":"#plt.figure(figsize=(20,20))\n\n#map = Basemap(\n#    projection='merc', \n#    lat_0 = 42.2, \n#    lon_0 = -70.9,\n#    resolution = 'h', \n#    area_thresh = 0.1,\n#    llcrnrlon=-70.8, \n#    llcrnrlat=42.2,\n#    urcrnrlon=-71.5, \n#    urcrnrlat=42.5\n#)\n \n#map.drawcoastlines()\n#map.drawcountries()\n#map.fillcontinents(color = 'coral')\n#map.drawmapboundary()\n\n#lons = list(long[0:1000])\n#lats = list(lat[0:1000])\n#x,y = map(lons, lats)\n#map.plot(x, y, 'bo', markersize=3)\n\n#plt.show()","3ca2381a":"df.isnull().sum()","87943855":"df['Day'] = 0","db656683":"df['Night'] = 0","e693d6fb":"# Day or night for 1st month\ndf['Day'].loc[(df['MONTH'] == 1) & (df['HOUR'] >= 6) & (df['HOUR'] <= 18)] = 1\n\n# Day or night for 2st month\ndf['Day'].loc[(df['MONTH'] == 2) & (df['HOUR'] >= 6) & (df['HOUR'] <= 19)] = 1\n\n# for 3st month\ndf['Day'].loc[(df['MONTH'] == 3) & (df['HOUR'] >= 6) & (df['HOUR'] <= 20)] = 1\n\n# Day or night for 4st month\ndf['Day'].loc[(df['MONTH'] == 4) & (df['HOUR'] >= 5) & (df['HOUR'] <= 20)] = 1\n\n# Day or night for 5st month\ndf['Day'].loc[(df['MONTH'] == 5) & (df['HOUR'] >= 5) & (df['HOUR'] <= 21)] = 1\n\n# Day or night for 6st month\ndf['Day'].loc[(df['MONTH'] == 6) & (df['HOUR'] >= 4) & (df['HOUR'] <= 21)] = 1\n\n# Day or night for 7st month\ndf['Day'].loc[(df['MONTH'] == 7) & (df['HOUR'] >= 5) & (df['HOUR'] <= 21)] = 1\n\n# Day or night for 8st month\ndf['Day'].loc[(df['MONTH'] == 8) & (df['HOUR'] >= 5) & (df['HOUR'] <= 21)] = 1\n\n# Day or night for 9st month\ndf['Day'].loc[(df['MONTH'] == 9) & (df['HOUR'] >= 6) & (df['HOUR'] <= 20)] = 1\n\n# Day or night for 10st month\ndf['Day'].loc[(df['MONTH'] == 10) & (df['HOUR'] >= 6) & (df['HOUR'] <= 19)] = 1\n\n# Day or night for 11st month\ndf['Day'].loc[(df['MONTH'] == 11) & (df['HOUR'] >= 6) & (df['HOUR'] <= 17)] = 1\n\n# Day or night for 12st month\ndf['Day'].loc[(df['MONTH'] == 12) & (df['HOUR'] >= 7) & (df['HOUR'] <= 17)] = 1","7ad8702a":"df['Night'].loc[df['Day']==0]=1","19d4a773":"plt.figure(figsize=(16,8))\ndf['Night'].value_counts().plot.bar()\nplt.show()","fb0a6383":"df['OFFENSE_CODE_GROUP'].value_counts().head(15)","2c39b8f8":"list_offense_code_group = ('Motor Vehicle Accident Response',\n                           'Larceny',\n                           'Medical Assistance',\n                           'Investigate Person',\n                           'Other',\n                           'Drug Violation',\n                           'Simple Assault',\n                           'Vandalism',\n                           'Verbal Disputes',\n                           'Towed',\n                           'Investigate Property',\n                           'Larceny From Motor Vehicle')","9b7e214a":"df_model = pd.DataFrame()","fe299590":"i = 0\n\nwhile i < len(list_offense_code_group):\n\n    df_model = df_model.append(df.loc[df['OFFENSE_CODE_GROUP'] == list_offense_code_group[i]])\n    \n    i+=1","d04f9afd":"list_column = ['DISTRICT','REPORTING_AREA','MONTH','DAY_OF_WEEK',\n               'HOUR','Lat','Long', 'OFFENSE_CODE_GROUP','Day','Night']","5aa85c70":"df_model = df_model[list_column]","902a20b2":"# DISTRICT\n\ndf_model['DISTRICT'] = df_model['DISTRICT'].map({\n    'B3':1, \n    'E18':2, \n    'B2':3, \n    'E5':4, \n    'C6':5, \n    'D14':6, \n    'E13':7, \n    'C11':8, \n    'D4':9, \n    'A7':10, \n    'A1':11, \n    'A15':12\n})\n\ndf_model['DISTRICT'].unique()","aa5bc768":"# REPORTING_AREA\n\ndf_model['REPORTING_AREA'] = pd.to_numeric(df_model['REPORTING_AREA'], errors='coerce')","e1ab288b":"# MONTH\n\ndf_model['MONTH'].unique()","c36b0a41":"# DAY_OF_WEEK\n\ndf_model['DAY_OF_WEEK'] = df_model['DAY_OF_WEEK'].map({\n    'Tuesday':2, \n    'Saturday':6, \n    'Monday':1, \n    'Sunday':7, \n    'Thursday':4, \n    'Wednesday':3,\n    'Friday':5\n})\n\ndf_model['DAY_OF_WEEK'].unique()","506d6f0c":"# HOUR\n\ndf_model['HOUR'].unique()","a3038ef7":"# Lat, Long\n\ndf_model[['Lat', 'Long']].head()","4ac1bc2c":"df_model.fillna(0, inplace = True)","fa1111ec":"x = df_model[['DISTRICT','REPORTING_AREA','MONTH','DAY_OF_WEEK','HOUR','Lat','Long','Day','Night']]","4b8600b7":"y = df_model['OFFENSE_CODE_GROUP']","46ead097":"y.unique()","e0245668":"y = y.map({\n    'Motor Vehicle Accident Response':1, \n    'Larceny':2, \n    'Medical Assistance':3,\n    'Investigate Person':4, \n    'Other':5, \n    'Drug Violation':6, \n    'Simple Assault':7,\n    'Vandalism':8, \n    'Verbal Disputes':9, \n    'Towed':10, \n    'Investigate Property':11,\n    'Larceny From Motor Vehicle':12\n})","9084e5bc":"# Split dataframe into random train and test subsets\n\nX_train, X_test, Y_train, Y_test = train_test_split(\n    x,\n    y, \n    test_size = 0.1,\n    random_state=42\n)\n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape, Y_test.shape)","88a74399":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.tree import ExtraTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.semi_supervised import LabelSpreading\nfrom sklearn.svm import LinearSVC\nfrom sklearn.neighbors.nearest_centroid import NearestCentroid\nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier","5f64f9c6":"from sklearn.metrics import f1_score","6bf6160a":"def fun_results(result):\n    print('mean: ' + str(result.mean()))\n    print('max: ' + str(result.max()))\n    print('min: ' + str(result.min()))\n    return result","95ce7732":"# DecisionTreeClassifier\n\ndef fun_DecisionTreeClassifier(X_train, Y_train):\n    dec_tree = DecisionTreeClassifier()\n    dec_tree = dec_tree.fit(X_train, Y_train)\n\n    dec_tree_pred = dec_tree.predict(X_test)\n\n    dec_tree_score = f1_score(Y_test, dec_tree_pred, average=None)\n    return fun_results(dec_tree_score)\n\nfun_DecisionTreeClassifier(X_train, Y_train)","9c456898":"# BernoulliNB\n\ndef fun_BernoulliNB(X_train, Y_train):\n    bernoulli = BernoulliNB()\n    bernoulli = bernoulli.fit(X_train, Y_train)\n\n    bernoulli_pred = bernoulli.predict(X_test)\n\n    bernoulli_score = f1_score(Y_test, bernoulli_pred, average=None)\n    return fun_results(bernoulli_score)\n\nfun_BernoulliNB(X_train, Y_train)","553fcc78":"# ExtraTreeClassifier\n\ndef fun_ExtraTreeClassifier(X_train, Y_train):\n    ext_tree = ExtraTreeClassifier()\n    ext_tree = ext_tree.fit(X_train, Y_train)\n\n    ext_tree_pred = ext_tree.predict(X_test)\n\n    ext_tree_score = f1_score(Y_test, ext_tree_pred, average=None)\n    return fun_results(ext_tree_score)\n\nfun_ExtraTreeClassifier(X_train, Y_train)","ef0cc20e":"# KNeighborsClassifier\n\ndef fun_KNeighborsClassifier(X_train, Y_train):\n    neigh = KNeighborsClassifier()\n    neigh.fit(X_train, Y_train) \n\n    neigh_pred = neigh.predict(X_test)\n\n    neigh_score = f1_score(Y_test, neigh_pred, average=None)\n    return fun_results(neigh_score)\n\nfun_KNeighborsClassifier(X_train, Y_train)","ad034014":"# GaussianNB\n\ndef fun_GaussianNB(X_train, Y_train):\n    gauss = GaussianNB()\n    gauss = gauss.fit(X_train, Y_train)\n\n    gauss_pred = gauss.predict(X_test)\n\n    gauss_score = f1_score(Y_test, gauss_pred, average=None)\n    return fun_results(gauss_score)\n\nfun_GaussianNB(X_train, Y_train)","288dac47":"# RandomForestClassifier\n\ndef fun_RandomForestClassifier(X_train, Y_train):\n    rfc = RandomForestClassifier()\n    rfc = rfc.fit(X_train, Y_train)\n\n    rfc_pred = rfc.predict(X_test)\n\n    rfc_score = f1_score(Y_test, rfc_pred, average=None)\n    return fun_results(rfc_score)\n\nfun_RandomForestClassifier(X_train, Y_train)","954bfd1b":"# LGBMClassifier\n\ndef fun_LGBMClassifier(X_train, Y_train):\n    clf = LGBMClassifier()\n    clf.fit(X_train, Y_train)\n\n    clf_pred = clf.predict(X_test)\n\n    clf_score = f1_score(Y_test, clf_pred, average=None)\n    return fun_results(clf_score)\n\nfun_LGBMClassifier(X_train, Y_train)","e331b42d":"df_model_2 = df[['OFFENSE_CODE', 'DISTRICT','MONTH','DAY_OF_WEEK','HOUR','Day','Night']]","f6333b2a":"df_model_2['OFFENSE_CODE'] = pd.to_numeric(df_model_2['OFFENSE_CODE'], errors='coerce')","72fb14ad":"# DISTRICT\n\ndf_model_2['DISTRICT'] = df_model_2['DISTRICT'].map({\n    'B3':1, \n    'E18':2, \n    'B2':3, \n    'E5':4, \n    'C6':5, \n    'D14':6, \n    'E13':7, \n    'C11':8, \n    'D4':9, \n    'A7':10, \n    'A1':11, \n    'A15':12\n})\n\ndf_model_2['DISTRICT'].unique()","4d547767":"# DAY_OF_WEEK\n\ndf_model_2['DAY_OF_WEEK'] = df_model_2['DAY_OF_WEEK'].map({\n    'Tuesday':2, \n    'Saturday':6, \n    'Monday':1, \n    'Sunday':7, \n    'Thursday':4, \n    'Wednesday':3,\n    'Friday':5\n})\n\ndf_model_2['DAY_OF_WEEK'].unique()","cacb1012":"df_model_2.isnull().sum()","a31d15f5":"df_model_2 = df_model_2.dropna()","f11f8d0a":"df_model_2['DISTRICT'].unique()","2007d685":"df_model_2.shape","a83d896a":"x = df_model_2[['OFFENSE_CODE','MONTH','DAY_OF_WEEK','HOUR','Day','Night']]\ny = df_model_2['DISTRICT']","4cf531c6":"# Split dataframe into random train and test subsets\n\nX_train, X_test, Y_train, Y_test = train_test_split(\n    x,\n    y, \n    test_size = 0.1,\n    random_state=42\n)\n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape, Y_test.shape)","1fb8e72e":"fun_DecisionTreeClassifier(X_train, Y_train)\n","ad234180":"fun_BernoulliNB(X_train, Y_train)","03dd9ce1":"fun_ExtraTreeClassifier(X_train, Y_train)","f31fb9d2":"fun_KNeighborsClassifier(X_train, Y_train)","459cf862":"fun_GaussianNB(X_train, Y_train)","85ef5f71":"fun_RandomForestClassifier(X_train, Y_train)","bc236ed1":"fun_LGBMClassifier(X_train, Y_train)","c2f17787":"df_model3 = df[['DISTRICT','REPORTING_AREA', 'MONTH','DAY_OF_WEEK','HOUR','UCR_PART','Lat','Long']]","a50d92cc":"df_model3['DISTRICT'] = df_model3['DISTRICT'].map({\n    'B3':1, \n    'E18':2, \n    'B2':3, \n    'E5':4, \n    'C6':5, \n    'D14':6, \n    'E13':7, \n    'C11':8, \n    'D4':9, \n    'A7':10, \n    'A1':11, \n    'A15':12\n})","a7c7a6c8":"# REPORTING_AREA\n\ndf_model3['REPORTING_AREA'] = pd.to_numeric(df_model3['REPORTING_AREA'], errors='coerce')","336b3ee9":"# DAY_OF_WEEK\n\ndf_model3['DAY_OF_WEEK'] = df_model3['DAY_OF_WEEK'].map({\n    'Tuesday':2, \n    'Saturday':6, \n    'Monday':1, \n    'Sunday':7, \n    'Thursday':4, \n    'Wednesday':3,\n    'Friday':5\n})","d65e2d5b":"df_model3['UCR_PART'].unique()","959682b9":"df_model3['UCR_PART'] = df_model3['UCR_PART'].map({\n    'Part Three':3, \n    'Part One':1, \n    'Part Two':2, \n#    'Other':4\n})","826ecb60":"df_model3 = df_model3.dropna()\nprint(df_model3.shape)\ndf_model3.isnull().sum()","ac4a9f1d":"x = df_model3[['DISTRICT','REPORTING_AREA', 'MONTH','DAY_OF_WEEK','HOUR','Lat','Long']]\ny = df_model3['UCR_PART']","92d62529":"# Split dataframe into random train and test subsets\n\nX_train, X_test, Y_train, Y_test = train_test_split(\n    x,\n    y, \n    test_size = 0.1,\n    random_state=42\n)\n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape, Y_test.shape)","d3835e9f":"fun_DecisionTreeClassifier(X_train, Y_train)","24ffedad":"fun_BernoulliNB(X_train, Y_train)","598815b8":"fun_ExtraTreeClassifier(X_train, Y_train)","54ad0cbc":"fun_KNeighborsClassifier(X_train, Y_train)","43cd26a3":"fun_GaussianNB(X_train, Y_train)","491b74f0":"fun_RandomForestClassifier(X_train, Y_train)","6a9280b5":"fun_LGBMClassifier(X_train, Y_train)","493df4f4":"location.isnull().sum()","f63c1fb9":"location.shape","cd6216da":"x = location['Long']\ny = location['Lat']\n\ncolors = np.random.rand(len(location))\n\nplt.figure(figsize=(20,20))\nplt.scatter(x, y,c=colors, alpha=0.5)\nplt.show()","573fdb6e":"from sklearn.cluster import KMeans","bce1fdb2":"X = location\nX = X[~np.isnan(X)]","ce8268f1":"#K means Clustering #K means  \ndef doKmeans(X, nclust):\n    model = KMeans(nclust)\n    model.fit(X)\n    clust_labels = model.predict(X)\n    cent = model.cluster_centers_\n    return (clust_labels, cent)\n\nclust_labels, cent = doKmeans(X, 2)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","ff4393a6":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=50)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","c4e5ffc5":"X = location\nX = X[~np.isnan(X)]","7aa947be":"clust_labels, cent = doKmeans(X, 3)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","83b92da1":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=50)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","dcf2f117":"X = location\nX = X[~np.isnan(X)]","81ba6d7d":"clust_labels, cent = doKmeans(X, 5)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","acfaac4d":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=50)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","a16d1658":"X = location\nX = X[~np.isnan(X)]","7ffb2fc9":"clust_labels, cent = doKmeans(X, 20)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","902a5ad5":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=50)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","3621b7bf":"df_clus = df[['OFFENSE_CODE','Long','Lat']]","c4567bc8":"df_clus = df_clus.loc[(df_clus['Lat'] > 40) & (df_clus['Long'] < -60)]","816a78ed":"#df_clus['REPORTING_AREA'] = pd.to_numeric(df_model['REPORTING_AREA'], errors='coerce')","43214d3f":"df_clus = df_clus.dropna()","628f4bc6":"df_clus.describe()","a4094330":"X = df_clus\nX = X[~np.isnan(X)]","372f3e04":"clust_labels, cent = doKmeans(X, 2)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","63a42bca":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=5)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","2795e134":"df_clus = df[['MONTH','Long','Lat']]","5ffa7f30":"df_clus = df_clus.loc[(df_clus['Lat'] > 40) & (df_clus['Long'] < -60)]","93db3fbe":"df_clus = df_clus.dropna()","6ca9aebf":"X = df_clus\nX = X[~np.isnan(X)]","13f8da7d":"clust_labels, cent = doKmeans(X, 2)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","fb34f778":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=5)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","1d2f36b5":"### 4.10. MONTH","2b2c0dd2":"#### 6.1.3. Models","d77c107a":"### 10 clusters","cfd9210b":"### 4.7. SHOOTING","cff5a598":"## 3.1. Function for research","110c0103":"### 5 clusters","3c797be0":"### 2 clusters","c5d72c7d":"### 5.4. Total number crime for each day of week","942db6a4":"### 4.12. HOUR","4c1625b0":"#### KMeans","072173f0":"# 4. First data research","1599470b":"![](https:\/\/www.techemergence.com\/wp-content\/uploads\/2017\/11\/ai-for-crime-prevention-and-detection-5-current-applications.png)","e4f40cb4":"### 4.11. DAY_OF_WEEK","a93e4e5c":"## 3.3. Function for modeling and cleaning","b61d4c11":"### 4.5. DISTRICT\n\nDistrict. I will use it for reaearch, modeling and visualization.","b7241fb2":"### 5.3.  Total number crime for each month","839f69f4":"#### 5.6.2. Shooting & month","5189734f":"**Data**:  https:\/\/www.kaggle.com\/ankkur13\/boston-crime-data\n","a7ffa76b":"# 6. Modeling","64e24f4e":"#### 5.6.3. Shooting & day of week","791fe279":"## 3.2. Function for visualization","47cf017e":"# 3. Function","6da2ef9e":"### 6.5. Clustering with location and OFFENSE_CODE","a18baf62":"### 6.1. Multi classification\nY - OFFENSE_CODE_GROUP\n\nX - 'DISTRICT','REPORTING_AREA','MONTH','DAY_OF_WEEK',\n               'HOUR','Lat','Long', 'OFFENSE_CODE_GROUP','Day','Night'","a61f9ca0":"### 4.8. OCCURRED_ON_DATE","26815471":"### 4.1. INCIDENT_NUMBER (*will delete*)\n\nNumber for incident. This indicator is **difficult** for visualization, modeling and other research. I will **not** use it.","fbdf4ff8":"### 4.16. Location","c6da6722":"### 4.4. OFFENSE_DESCRIPTION\n\nDescription for offence. Maybe, i will use for statistics research and modeling.","096da4dd":"### 5.2. Total number crime for each year","c20c70c4":"### 4.15. Lat \/ Long","13c604d2":"## 6.2. Multi classification\nY - DISTRICT\n\nX - OFFENSE_CODE_GROUP, Month, Day of week, Hour, Day, Night\n","f50015ed":"#### 5.6.1. Shooting & year","db1b59da":"### 4.3. OFFENSE_CODE_GROUP\n\nCode for offence`s group. Maybe, i will use for statistics research and modeling.","43bd49ad":"### 4.6. REPORTING_AREA","17b1540c":"### 6.3. Multi classification - > UCR_PART\n\nY - UCR_PART\n\nX - DISTRICT, REPORTING_AREA, MONTH, DAY_OF_WEEK, HOUR, LATITUDE, LONGITUDE","9ee401b2":"### 5.5. Total number crime for each hour","fcf26d71":"### 5.6. SHOOTING","dadf3020":"#### Day or Night\n\n###### Link\n\nhttps:\/\/www.timeanddate.com\/sun\/usa\/boston","46302476":"#### 5.6.5. Shooting & District","ccea4c41":"#### 6.1.2. Split data for *sklearn.multiclass*","a5d4c8b3":"# 1. Import","81b5770a":"#### 5.7. UCR_PART","30d49784":"### 2 clus","323a45da":"#### 5.6.4. Shooting & hour","a79d2b37":"# Create new var","4d323ab1":"### 3 clusters","8390d31b":"### 5.1. District","4d9e3e32":"## 6.4. Clustering location","cec8ffc6":"# 5. Visualization","49a7d8e6":"### 4.2. OFFENSE_CODE\n\nCode for offence. Maybe, i will use for statistics research and modeling.","a28b8db3":"#### 5.6.6. Shooting and location","6ad0f8c2":"### 4.13. UCR_PART","2f62e7f1":"# 2. Read data","13b46519":"\n#### 5.8. Lat, Long","765b343c":"### 4.14. STREET","3656d71c":" ### 6.6. Clustering with location and month","48d87af3":"### 4.9. YEAR"}}