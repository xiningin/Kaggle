{"cell_type":{"6b7cdd05":"code","0fa54941":"code","c77bb2f0":"code","87d6a022":"code","b9143bf0":"code","6afe7692":"code","5e3f749a":"code","f3844adc":"code","f2e811e8":"code","e47edd42":"code","cae80c79":"code","9138098a":"code","05428b7d":"code","b2732c1e":"code","d02204c9":"code","1063b2aa":"code","979d7be3":"code","af6cf720":"code","fe7a6540":"code","403dd3a9":"code","7a6178fb":"code","39f40e8e":"code","8a001cd4":"code","dc547225":"code","2100c9a7":"code","e9ee9d23":"code","955a1ff9":"code","c62775b8":"code","9071594a":"code","2e7c53e4":"code","8550f5f4":"code","2c819a71":"code","0e9d54b0":"code","086b1da4":"code","7c2368be":"code","cd208b21":"code","4e847218":"code","0e7668e8":"code","0736428d":"code","5ab3b73f":"code","6ec8f5ed":"code","4977c521":"code","0769a6ba":"code","db94865e":"code","a388100f":"code","17dab971":"code","f8b98333":"code","8ecd97cf":"code","166bc033":"code","92b50939":"code","adff96c0":"code","11f5897c":"code","32ffe3f1":"code","4ffead85":"code","8b0f75f9":"code","0543c49d":"markdown","8578be85":"markdown","9710cd45":"markdown","d75bb410":"markdown","8b552d9a":"markdown","16c6c4c1":"markdown","3ea058f1":"markdown","1efa8532":"markdown","326206c5":"markdown","409a0d24":"markdown","e26a90db":"markdown","7a83ad23":"markdown","a9439994":"markdown"},"source":{"6b7cdd05":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# preprocessing\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, StratifiedKFold\nimport pandas_profiling as pp\n\n# models\nfrom sklearn.linear_model import LinearRegression, SGDRegressor, RidgeCV\nfrom sklearn.svm import SVR, LinearSVR\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, ExtraTreesRegressor \nfrom sklearn.ensemble import BaggingRegressor, AdaBoostRegressor, VotingRegressor \nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nimport sklearn.model_selection\nfrom sklearn.model_selection import cross_val_predict as cvp\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom sklearn.linear_model import Ridge, RidgeCV, Lasso, LassoCV, LinearRegression, ElasticNet,  HuberRegressor\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, KFold, StratifiedKFold, RandomizedSearchCV\n\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nmatplotlib.rcParams['font.family'] = \"Arial\"\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly as py\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\n\ninit_notebook_mode(connected=True)\n\nimport collections\nimport itertools\n\nimport scipy.stats as stats\nfrom scipy.stats import norm\nfrom scipy.special import boxcox1p\n\nimport statsmodels\nimport statsmodels.api as sm\n#print(statsmodels.__version__)\n\nfrom sklearn.preprocessing import scale, StandardScaler, RobustScaler, OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, KFold, StratifiedKFold, RandomizedSearchCV\nfrom sklearn.linear_model import Ridge, RidgeCV, Lasso, LassoCV, LinearRegression, ElasticNet,  HuberRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom xgboost import XGBRegressor\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.utils import resample\n\nfrom xgboost import XGBRegressor\n\n#Model interpretation modules\nimport eli5\nimport lime\nimport lime.lime_tabular\nimport shap\nshap.initjs()\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n# model tuning\nfrom hyperopt import STATUS_OK, Trials, fmin, hp, tpe, space_eval\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0fa54941":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","c77bb2f0":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","87d6a022":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","b9143bf0":"valid_part = 0.4","6afe7692":"train0 = pd.read_csv('\/kaggle\/input\/ammonium-prediction-in-river-water\/train.csv')","5e3f749a":"train0.head(8)","f3844adc":"train0.info()","f2e811e8":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# test.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/ammonium-prediction-in-river-water\/test.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'test.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","e47edd42":"df1.head()","cae80c79":"plotPerColumnDistribution(df1, 10, 5)","9138098a":"plotCorrelationMatrix(df1, 8)","05428b7d":"plotScatterMatrix(df1, 20, 10)","b2732c1e":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# train.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/ammonium-prediction-in-river-water\/train.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'train.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","d02204c9":"df2.head(5)","1063b2aa":"plotPerColumnDistribution(df2, 10, 5)","979d7be3":"plotCorrelationMatrix(df2, 8)","af6cf720":"plotScatterMatrix(df2, 20, 10)","fe7a6540":"pp.ProfileReport(train0)","403dd3a9":"train0 = train0.drop(['Id','3','4','5','6','7'], axis = 1)\ntrain0 = train0.dropna()\ntrain0.info()","7a6178fb":"train0.head(3)","39f40e8e":"target_name = 'target'","8a001cd4":"# For boosting model\ntrain0b = train0\ntrain_target0b = train0b[target_name]\ntrain0b = train0b.drop([target_name], axis=1)\n# Synthesis valid as test for selection models\ntrainb, testb, targetb, target_testb = train_test_split(train0b, train_target0b, test_size=valid_part, random_state=0)","dc547225":"train_target0 = train0[target_name]\ntrain0 = train0.drop([target_name], axis=1)","2100c9a7":"#For models from Sklearn\nscaler = StandardScaler()\ntrain0 = pd.DataFrame(scaler.fit_transform(train0), columns = train0.columns)","e9ee9d23":"train0.head(3)","955a1ff9":"len(train0)","c62775b8":"# Synthesis valid as test for selection models\ntrain, test, target, target_test = train_test_split(train0, train_target0, test_size=valid_part, random_state=0)","9071594a":"train.head(3)","2e7c53e4":"test.head(3)","8550f5f4":"train.info()","2c819a71":"test.info()","0e9d54b0":"acc_train_r2 = []\nacc_test_r2 = []\nacc_train_d = []\nacc_test_d = []\nacc_train_rmse = []\nacc_test_rmse = []","086b1da4":"def acc_d(y_meas, y_pred):\n    # Relative error between predicted y_pred and measured y_meas values\n    return mean_absolute_error(y_meas, y_pred)*len(y_meas)\/sum(abs(y_meas))\n\ndef acc_rmse(y_meas, y_pred):\n    # RMSE between predicted y_pred and measured y_meas values\n    return (mean_squared_error(y_meas, y_pred))**0.5","7c2368be":"def acc_boosting_model(num,model,train,test,num_iteration=0):\n    # Calculation of accuracy of boosting model by different metrics\n    \n    global acc_train_r2, acc_test_r2, acc_train_d, acc_test_d, acc_train_rmse, acc_test_rmse\n    \n    if num_iteration > 0:\n        ytrain = model.predict(train, num_iteration = num_iteration)  \n        ytest = model.predict(test, num_iteration = num_iteration)\n    else:\n        ytrain = model.predict(train)  \n        ytest = model.predict(test)\n\n    print('target = ', targetb[:5].values)\n    print('ytrain = ', ytrain[:5])\n\n    acc_train_r2_num = round(r2_score(targetb, ytrain) * 100, 2)\n    print('acc(r2_score) for train =', acc_train_r2_num)   \n    acc_train_r2.insert(num, acc_train_r2_num)\n\n    acc_train_d_num = round(acc_d(targetb, ytrain) * 100, 2)\n    print('acc(relative error) for train =', acc_train_d_num)   \n    acc_train_d.insert(num, acc_train_d_num)\n\n    acc_train_rmse_num = round(acc_rmse(targetb, ytrain) * 100, 2)\n    print('acc(rmse) for train =', acc_train_rmse_num)   \n    acc_train_rmse.insert(num, acc_train_rmse_num)\n\n    print('target_test =', target_testb[:5].values)\n    print('ytest =', ytest[:5])\n    \n    acc_test_r2_num = round(r2_score(target_testb, ytest) * 100, 2)\n    print('acc(r2_score) for test =', acc_test_r2_num)\n    acc_test_r2.insert(num, acc_test_r2_num)\n    \n    acc_test_d_num = round(acc_d(target_testb, ytest) * 100, 2)\n    print('acc(relative error) for test =', acc_test_d_num)\n    acc_test_d.insert(num, acc_test_d_num)\n    \n    acc_test_rmse_num = round(acc_rmse(target_testb, ytest) * 100, 2)\n    print('acc(rmse) for test =', acc_test_rmse_num)\n    acc_test_rmse.insert(num, acc_test_rmse_num)","cd208b21":"def acc_model(num,model,train,test):\n    # Calculation of accuracy of model \u0430\u043a\u0449\u044c Sklearn by different metrics   \n  \n    global acc_train_r2, acc_test_r2, acc_train_d, acc_test_d, acc_train_rmse, acc_test_rmse\n    \n    ytrain = model.predict(train)  \n    ytest = model.predict(test)\n\n    print('target = ', target[:5].values)\n    print('ytrain = ', ytrain[:5])\n\n    acc_train_r2_num = round(r2_score(target, ytrain) * 100, 2)\n    print('acc(r2_score) for train =', acc_train_r2_num)   \n    acc_train_r2.insert(num, acc_train_r2_num)\n\n    acc_train_d_num = round(acc_d(target, ytrain) * 100, 2)\n    print('acc(relative error) for train =', acc_train_d_num)   \n    acc_train_d.insert(num, acc_train_d_num)\n\n    acc_train_rmse_num = round(acc_rmse(target, ytrain) * 100, 2)\n    print('acc(rmse) for train =', acc_train_rmse_num)   \n    acc_train_rmse.insert(num, acc_train_rmse_num)\n\n    print('target_test =', target_test[:5].values)\n    print('ytest =', ytest[:5])\n    \n    acc_test_r2_num = round(r2_score(target_test, ytest) * 100, 2)\n    print('acc(r2_score) for test =', acc_test_r2_num)\n    acc_test_r2.insert(num, acc_test_r2_num)\n    \n    acc_test_d_num = round(acc_d(target_test, ytest) * 100, 2)\n    print('acc(relative error) for test =', acc_test_d_num)\n    acc_test_d.insert(num, acc_test_d_num)\n    \n    acc_test_rmse_num = round(acc_rmse(target_test, ytest) * 100, 2)\n    print('acc(rmse) for test =', acc_test_rmse_num)\n    acc_test_rmse.insert(num, acc_test_rmse_num)","4e847218":"random_forest = GridSearchCV(estimator=RandomForestRegressor(), param_grid={'n_estimators': [100, 1000]}, cv=5)\nrandom_forest.fit(train, target)\nprint(random_forest.best_params_)\nacc_model(2,random_forest,train,test)","0e7668e8":"# Extra Trees Regressor\n\netr = ExtraTreesRegressor()\netr.fit(train, target)\nacc_model(12,etr,train,test)","0736428d":"# AdaBoost Regression\n\nAda_Boost = AdaBoostRegressor()\nAda_Boost.fit(train, target)\nacc_model(13,Ada_Boost,train,test)","5ab3b73f":"# LinearRegression\n\nlin = LinearRegression()\nlin.fit(train, target)\nacc_model(4,lin,train,test)","6ec8f5ed":"models = pd.DataFrame({\n    'Model': ['Random Forest','ExtraTreesRegressor', \n              'AdaBoostRegressor', 'LinearRegression'],\n    \n    'r2_train': acc_train_r2,\n    'r2_test': acc_test_r2,\n    'd_train': acc_train_d,\n    'd_test': acc_test_d,\n    'rmse_train': acc_train_rmse,\n    'rmse_test': acc_test_rmse\n                     })","4977c521":"pd.options.display.float_format = '{:,.2f}'.format","0769a6ba":"print('Prediction accuracy for models by R2 criterion - r2_test')\nmodels.sort_values(by=['r2_test', 'r2_train'], ascending=False)","db94865e":"print('Prediction accuracy for models by relative error - d_test')\nmodels.sort_values(by=['d_test', 'd_train'], ascending=True)","a388100f":"print('Prediction accuracy for models by RMSE - rmse_test')\nmodels.sort_values(by=['rmse_test', 'rmse_train'], ascending=True)","17dab971":"# Plot\nplt.figure(figsize=[25,6])\nxx = models['Model']\nplt.tick_params(labelsize=14)\nplt.plot(xx, models['r2_train'], label = 'r2_train')\nplt.plot(xx, models['r2_test'], label = 'r2_test')\nplt.legend()\nplt.title('R2-criterion for 3 popular models for train and test datasets')\nplt.xlabel('Models')\nplt.ylabel('R2-criterion, %')\nplt.xticks(xx, rotation='vertical')\nplt.savefig('graph.png')\nplt.show()","f8b98333":"# Plot\nplt.figure(figsize=[25,6])\nxx = models['Model']\nplt.tick_params(labelsize=14)\nplt.plot(xx, models['d_train'], label = 'd_train')\nplt.plot(xx, models['d_test'], label = 'd_test')\nplt.legend()\nplt.title('Relative errors for 3 popular models for train and test datasets')\nplt.xlabel('Models')\nplt.ylabel('Relative error, %')\nplt.xticks(xx, rotation='vertical')\nplt.savefig('graph.png')\nplt.show()","8ecd97cf":"# Plot\nplt.figure(figsize=[25,6])\nxx = models['Model']\nplt.tick_params(labelsize=14)\nplt.plot(xx, models['rmse_train'], label = 'rmse_train')\nplt.plot(xx, models['rmse_test'], label = 'rmse_test')\nplt.legend()\nplt.title('RMSE for 3 popular models for train and test datasets')\nplt.xlabel('Models')\nplt.ylabel('RMSE, %')\nplt.xticks(xx, rotation='vertical')\nplt.savefig('graph.png')\nplt.show()","166bc033":"testn = pd.read_csv('\/kaggle\/input\/ammonium-prediction-in-river-water\/test.csv')\ntestn.info()","92b50939":"testn = testn.drop(['Id','3','4','5','6','7'], axis = 1)\ntestn.head(3)","adff96c0":"#For models from Sklearn\ntestn = pd.DataFrame(scaler.transform(testn), columns = testn.columns)","11f5897c":"random_forest.fit(train0, train_target0)\nrandom_forest.predict(testn)[:3]","32ffe3f1":"etr.fit(train0, train_target0)\netr.predict(testn)[:3]","4ffead85":"Ada_Boost.fit(train0, train_target0)\nAda_Boost.predict(testn)[:3]","8b0f75f9":"lin.fit(train0, train_target0)\nlin.predict(testn)[:3]","0543c49d":" ##  Prediction <a class=\"anchor\" id=\"7\"><\/a>\n\n","8578be85":"##  EDA <a class=\"anchor\" id=\"3\"><\/a>\n\n","9710cd45":" ## Ammonium prediction in river water for best regression models + Starter code + LinearRegression <a class=\"anchor\" id=\"4\"><\/a>","d75bb410":"##  Preparing to modeling <a class=\"anchor\" id=\"4\"><\/a>\n\n","8b552d9a":" ###  AdaBoost Regressor <a class=\"anchor\" id=\"5.13\"><\/a>\n\n\n","16c6c4c1":"##  Download datasets <a class=\"anchor\" id=\"2\"><\/a>\n\n","3ea058f1":" ###  ExtraTreesRegressor <a class=\"anchor\" id=\"5.13\"><\/a>\n\n","1efa8532":"## Starter code <a class=\"anchor\" id=\"2\"><\/a>","326206c5":"###  Random Forest <a class=\"anchor\" id=\"5.7\"><\/a>\n\n","409a0d24":"Thanks for helping in this work to [Vitalii Mokin](https:\/\/www.kaggle.com\/vbmokin)\nand his kernels:\n* [BOD prediction in river - 15 regression models](https:\/\/www.kaggle.com\/vbmokin\/bod-prediction-in-river-15-regression-models)\n* [Code starter: Ammonium prediction in river](https:\/\/www.kaggle.com\/vbmokin\/code-starter-ammonium-prediction-in-river)","e26a90db":"##  Models comparison <a class=\"anchor\" id=\"6\"><\/a>\n\n","7a83ad23":"  ## Import libraries <a class=\"anchor\" id=\"2\"><\/a>","a9439994":" ###  LinearRegression <a class=\"anchor\" id=\"5.13\"><\/a>"}}