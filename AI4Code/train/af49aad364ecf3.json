{"cell_type":{"76b87b50":"code","861bc645":"code","d4c5337d":"code","60f72b05":"code","c7d062fc":"code","b716577e":"code","299e6161":"code","101d7ad6":"code","ba0cef53":"code","1fe1853c":"code","66b19cdd":"code","c2fbc004":"code","32c99a59":"code","4e0c9a01":"code","5b500234":"code","91d49666":"code","519a51d9":"code","95da906a":"code","0b58c8da":"code","770b4949":"code","7ab34625":"code","eb58f918":"code","6bfcd219":"code","02bd4931":"code","777884dc":"code","980c29e7":"code","3bb5318c":"code","6278163b":"code","e94cf21f":"markdown","22c0cd8e":"markdown","d5fb5bfa":"markdown","7ef8e47a":"markdown","9ca32dd8":"markdown","bf859fad":"markdown","5cc69b85":"markdown","2b52c80c":"markdown","497dc24d":"markdown","3b410e0b":"markdown","b7325586":"markdown","ceb486bc":"markdown","85c49aed":"markdown","4c263e70":"markdown","183d50d8":"markdown","0f76da79":"markdown","6b6d3bd5":"markdown","7b849448":"markdown","44560fb7":"markdown","2f0b2570":"markdown","d381b757":"markdown"},"source":{"76b87b50":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","861bc645":"df = pd.read_csv('..\/input\/montcoalert\/911.csv')\ndf.head()","d4c5337d":"df.info()","60f72b05":"df = df.drop(['e'], axis='columns')\ndf.head()","c7d062fc":"df.isnull().sum()","b716577e":"df['reason'] = df['title'].apply(lambda title: title.split(':')[0])\ndf.head()","299e6161":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(12,6))\nsns.countplot(x='zip',data=df,palette='pastel', order=df['zip'].value_counts().iloc[:5].index)","101d7ad6":"plt.figure(figsize=(12,6))\nsns.countplot(x='twp',data=df,palette='pastel', order=df['twp'].value_counts().iloc[:5].index)","ba0cef53":"plt.figure(figsize=(12,6))\nsns.countplot(x='reason',data=df,palette='pastel')","1fe1853c":"df['timeStamp'] = pd.to_datetime(df['timeStamp'])","66b19cdd":"df['hour'] = df['timeStamp'].apply(lambda time: time.hour)\ndf['month'] = df['timeStamp'].apply(lambda time: time.month)\ndf['day'] = df['timeStamp'].apply(lambda time: time.dayofweek)\ndf['year'] = df['timeStamp'].apply(lambda time: time.year)\ndf.head()","c2fbc004":"dayMap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\ndf['day'] = df['day'].map(dayMap)","32c99a59":"plt.figure(figsize=(12,6))\nsns.countplot(x='day',data=df,hue='reason',palette='pastel')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","4e0c9a01":"monthMap = {0:'Jan',1:'Feb',2:'Mar',3:'Apr',4:'Mei',5:'Jun',6:'Jul', 7:'Aug', 8:'Sep', 9:'Okt', 10:'Nov', 11:'Des'}\ndf['month'] = df['month'].map(monthMap)","5b500234":"plt.figure(figsize=(12,6))\nsns.countplot(x='month',data=df,hue='reason',palette='pastel')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","91d49666":"plt.figure(figsize=(12,6))\nsns.countplot(x='year',data=df,hue='reason',palette='pastel')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","519a51d9":"figure, axes = plt.subplots(1, 2, sharex=True, figsize=(16,6))\nfigure.suptitle('911 Call by Year Graph')\nsns.countplot(x='year',data=df,hue='reason',palette='pastel', ax=axes[0])\nsns.countplot(x='year',data=df,palette='pastel', ax=axes[1])","95da906a":"figure, axes = plt.subplots(1, 2, sharex=True, figsize=(16,6))\nfigure.suptitle('911 Call by Month Graph')\nsns.countplot(x='month',data=df,hue='reason',palette='pastel', ax=axes[0])\nsns.countplot(x='month',data=df,palette='pastel', ax=axes[1])","0b58c8da":"figure, axes = plt.subplots(1, 2, sharex=True, figsize=(16,6))\nfigure.suptitle('911 Call by Days Graph')\nsns.countplot(x='day',data=df,hue='reason',palette='pastel', ax=axes[0])\nsns.countplot(x='day',data=df,palette='pastel', ax=axes[1])","770b4949":"df['date']=df['timeStamp'].apply(lambda t: t.date())","7ab34625":"df.head()","eb58f918":"plt.figure(figsize=(12,6))\ndf[df['reason']=='Traffic'].groupby('date').count()['twp'].plot()\nplt.title('Traffic')\nplt.tight_layout()","6bfcd219":"plt.figure(figsize=(12,6))\ndf[df['reason']=='Fire'].groupby('date').count()['twp'].plot()\nplt.title('Fire')\nplt.tight_layout()","02bd4931":"plt.figure(figsize=(12,6))\ndf[df['reason']=='EMS'].groupby('date').count()['twp'].plot()\nplt.title('EMS')\nplt.tight_layout()","777884dc":"dayHour = df.groupby(by=['day','hour']).count()['reason'].unstack()","980c29e7":"plt.figure(figsize=(12,6))\nsns.heatmap(dayHour,cmap='coolwarm')","3bb5318c":"dayMonth = df.groupby(by=['day','month']).count()['reason'].unstack()\ndayMonth.head()","6278163b":"plt.figure(figsize=(12,6))\nsns.heatmap(dayMonth,cmap='coolwarm')","e94cf21f":"## Import dataset with pandas","22c0cd8e":"# Visualize reason 911 call by date","d5fb5bfa":"# Prepare the data","7ef8e47a":"## Visualize 911 call by Hour","9ca32dd8":"# Visualize some graph to make easily understand the data","bf859fad":"# Convert the 'timeStamp' column into DateTime Object","5cc69b85":"# Visualze 911 call ratio with and without the reason by time","2b52c80c":"# Explonatory Data Analaysis - 911 Call Dataset","497dc24d":"## Dataset column explanation\n* lat : Latitude\n* lng: Longitude\n* desc: Description of the Emergency Call\n* zip: Zipcode\n* title: Title\n* timeStamp: YYYY-MM-DD HH:MM:SS\n* twp: Township\n* addr: Address\n* e: Dummy variable (always 1)","3b410e0b":"## Visualize 'Traffic' reason for 911 call","b7325586":"# Visualize 911 Call ratio by days, month and year","ceb486bc":"## Visualize 'EMS' reason for 911 call","85c49aed":"## Visualize Top 5 Township that making 911 calls","4c263e70":"## Check the type of each column of datasets","183d50d8":"## drop the dummy 'e' column","0f76da79":"## Visualize 911 call by Month","6b6d3bd5":"## Visualize Top 5 areas with zip codes that call 911","7b849448":"## Visualze the highest reason to call 911","44560fb7":"## Check each column if have null value","2f0b2570":"# Visualze what time do the most 911 calls occur","d381b757":"## Visualize 'Fire' reason for 911 call"}}