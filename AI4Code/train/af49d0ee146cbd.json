{"cell_type":{"5d73cac0":"code","e307e90f":"code","9ccac52a":"code","4625b5c9":"code","7b15aff0":"code","0fe40c58":"code","2aea8fc0":"code","344ce588":"code","88dd6d4f":"markdown","85df2912":"markdown","6082e7ac":"markdown","44665d7e":"markdown","6eb6cff5":"markdown","47d67399":"markdown","20b186a4":"markdown"},"source":{"5d73cac0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/working\/'):\n    for filename in filenames:\n        name = os.path.join(dirname, filename)\n        print(os.path.join(dirname, filename))\n#         ind = name.index(\"__\")\n#         print(name[ind+2])\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e307e90f":"\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom tensorflow.keras.models import load_model\n# from imutils import paths\nimport numpy as np\nimport random\nimport cv2\nimport os\nfrom keras.layers import Input, Conv2D, MaxPooling2D, Dense, Flatten,Activation,  Dropout, BatchNormalization\nfrom keras.callbacks import EarlyStopping\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom keras.optimizers import Adam\nimport matplotlib.pyplot as plt\n# from imutils import paths\nimport random\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\n","9ccac52a":"training_data =  []\n\n\n# path = \"C:\/Users\/uni tech\/Desktop\/spyderr\/datasets\/SOCOFing\/Real\"\npath = \"\/kaggle\/input\/socofing\/socofing\/SOCOFing\/Real\"\n\n\nfor img in os.listdir(path):\n    list_of_strings=[]\n    img_path = os.path.join(path,img)\n    img_array = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)\n    new_array = cv2.resize(img_array, (80, 80))\n\n    \n    new_name=os.path.split(img_path)[-1]\n    new_name2 = new_name[:-4]\n   \n    for x in new_name2:\n        list_of_strings.append(x)\n \n    \n    if \"M\" in list_of_strings:\n        training_data.append([new_array, 0])\n        \n    elif \"F\" in list_of_strings:\n        training_data.append([new_array, 1])\n   \n        \n\n        \nrandom.shuffle(training_data)\n\n\nfor sample in training_data:\n    print(sample[1])\n    \n\nX=[]\ny=[]\n\nfor features, labels in training_data:\n    X.append(features)\n    y.append(labels)\n    \n\nX = np.array(X).reshape(-1, 80, 80, 1)\nX = X \/ 255","4625b5c9":"# Defining callbacks function    \nearly_stoppings = EarlyStopping(monitor='val_loss',\n                                patience = 3,\n                                verbose = 1,\n                                restore_best_weights = True)   \n\n\n# Defining the model and adding layers to it\nmodel = Sequential()\nmodel.add(Conv2D(64, (3,3), input_shape = X.shape[1:]))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n\nmodel.add(Flatten())\n\nmodel.add(Dense(500))\nmodel.add(Activation(\"relu\"))\n\n\nmodel.add(Dense(128))\nmodel.add(Activation(\"relu\"))\n\nmodel.add(Dense(64))\nmodel.add(Activation(\"relu\"))\n\n\nmodel.add(Dense(1))\nmodel.add(Activation(\"sigmoid\"))\n\n\nprint(model.summary())","7b15aff0":"# model compilation\n# adam = Adam(learning_rate=0.1, beta_1=0.9, beta_2=0.999, amsgrad=False)\nmodel.compile(optimizer = \"adam\", loss=\"binary_crossentropy\",  metrics=['accuracy'])","0fe40c58":"## convert y to np array type\nprint(type(y))\ny = np.array(y)\nprint(type(y))\n","2aea8fc0":"# # Model training\n# model.fit(X, y ,batch_size=100 ,epochs = 10, validation_split=0.1 , callbacks= [early_stoppings])\nmodel.fit(X, y ,batch_size=100 ,epochs = 20, validation_split=0.1 )\n\n# from keras.models import load_model \nmodel.save('fingerprint_recog.h5')","344ce588":"# model = load_model('fingerprint_recog.h5')\nmodel = load_model('\/kaggle\/working\/fingerprint_recog.h5')\n\n\n# path = \"C:\/Users\/uni tech\/Desktop\/spyderr\/datasets\/SOCOFing\/Altered\/Altered-Easy\"\npath = \"\/kaggle\/input\/socofing\/socofing\/SOCOFing\/Altered\/Altered-Easy\"\nn=0\ntesting_data =  []\n\n\nfor img in os.listdir(path):\n    if n<500:\n        list_of_strings=[]\n        img_path = os.path.join(path,img)\n        img_array = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)\n        new_array = cv2.resize(img_array, (80, 80))\n        \n        new_name=os.path.split(img_path)[-1]\n        new_name2 = new_name[:-4]\n   \n        for x in new_name2:\n            list_of_strings.append(x)\n     \n        \n        if \"M\" in list_of_strings:\n            testing_data.append([new_array, 0])\n            \n        elif \"F\" in list_of_strings:\n            testing_data.append([new_array, 1])\n            # X_test.append(new_array)\n        n+=1\n        \n        \n    else:\n        break\n\nrandom.shuffle(testing_data)\n\n\nX_test=[]\ny_test=[]\n\nfor features, labels in testing_data:\n    X_test.append(features)\n    y_test.append(labels)\n    \n\nX_test = np.array(X_test).reshape(-1, 80, 80, 1)\nX_test = X_test \/ 255\n\n\n\n\nresult = model.predict(X_test)\nclasses = np.round(result)\n\n# classes = np.argmax(result, axis = 1)\n# print(classes)\n\naccuracy = r2_score(y_test, result)\nprint(accuracy)","88dd6d4f":"# imports","85df2912":"## preprocessing","6082e7ac":"## loss and optimizer","44665d7e":"## model definition","6eb6cff5":"# training","47d67399":"## model fit","20b186a4":"# testing :\n"}}