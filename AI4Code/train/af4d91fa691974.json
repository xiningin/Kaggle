{"cell_type":{"2dc20643":"code","b9f9b462":"code","fed9e7dc":"code","88641f12":"code","67ca9b90":"code","c95397b7":"code","f5349c04":"code","46f0002f":"code","d89ec4a2":"code","4e26abda":"code","26c42f13":"code","c5712cb9":"code","644a3ee6":"code","9d2a1c99":"code","78e17efa":"markdown","423823f0":"markdown","864058fa":"markdown"},"source":{"2dc20643":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b9f9b462":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.ensemble import RandomForestRegressor\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error","fed9e7dc":"train = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/test.csv')\nsample_sub = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')","88641f12":"train.head()","67ca9b90":"delete_columns = ['id']\ntrain.drop(delete_columns, axis=1, inplace=True)\ntest.drop(delete_columns, axis=1, inplace=True)","c95397b7":"categorical_features = ['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6','cat7', 'cat8', 'cat9']","f5349c04":"\nfor c in train.columns:\n    if train[c].dtype == 'object':\n        lbl = LabelEncoder()\n        lbl.fit(list(train[c].values)+list(test[c].values))\n        train[c] = lbl.transform(train[c].values)\n        test[c] = lbl.transform(test[c].values)\n        \ndisplay(train.head())\n","46f0002f":"#delete_columns = ['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8', 'cat9']\ny_train = train['target']\nX_train = train.drop('target', axis = 1)\nX_test = test","d89ec4a2":"y_train.shape","4e26abda":"preds_list_base = []\npreds_list_final_iteration = []\npreds_list_all = []\ncv = KFold(n_splits=5, shuffle=True, random_state=0)\n\nparams_lgb = {\n    'random_state':42,\n    'metric': 'rmse',\n    'n_jobs': -1,\n    'cat_feature': [x for x in range(len(categorical_features))],\n    'bagging_seed':42,\n    'feature_fraction_seed':42,\n    'learning_rate': 0.0011992715138089741,\n    'max_depth': 101,\n    'num_leaves': 86,\n    'reg_alpha': 7.504329214783163,\n    'reg_lambda': 1.5631184517427836,\n    'colsample_bytree': 0.22354989226986266,\n    'min_child_samples': 149,\n    'subsample_freq': 4,\n    'subsample': 0.5143496951794435,\n    'max_bin': 720,\n    'min_data_per_group': 55,\n    'cat_smooth': 78,\n    'cat_l2': 7,\n    'n_estimators': 20000\n}\n\ny_preds = 0\n\nfor fold_id, (train_index, valid_index) in enumerate(cv.split(X_train, y_train)):\n    X_tr = X_train.loc[train_index, :]\n    X_val = X_train.loc[valid_index, :]\n    y_tr = y_train[train_index]\n    y_val = y_train[valid_index]\n    \n    #lgb_train = lgb.Dataset(X_tr, y_tr, categorical_feature=categorical_features)\n    #lgb_eval = lgb.Dataset(X_val, y_val, reference=lgb_train, categorical_feature=categorical_features)\n    \n    Model = LGBMRegressor(**params_lgb).fit(X_tr, y_tr,\n                                            valid_sets=[(X_val, y_val)],\n                                            eval_metric =['rmse'],\n                                            categorical_feature=['categorical_features'],\n                                            verbose_eval=0,\n                                            early_stopping_rounds=250)\n    \n    preds_list_base.append(Model.predict(X_test))\n    preds_list_all.append(Model.predict(X_test))\n    print(f'RMSE for Base model is {np.sqrt(mean_squared_error(y_val, Model.predict(X_val)))}')\n    first_rmse = np.sqrt(mean_squared_error(y_val, Model.predict(X_val)))\n    params = params_lgb.copy()\n    \n    for i in range(1, 8):\n        if i >2:\n            params['reg_lambda'] *= 0.9\n            params['reg_alpha'] *= 0.9\n            params['num_leaves'] += 40\n    \n        params['learning_rate'] = 0.003\n        Model = LGBMRegressor(**params).fit(X_tr, y_tr, eval_set=[(X_val, y_val)],\n                                            eval_metric=['rmse'],\n                                            early_stopping_rounds=200, \n                                            categorical_feature=['categorical_features'],\n                                            verbose=0,\n                                            init_model=Model)\n                \n        preds_list_all.append(Model.predict(X_test)\n        #print(f'RMSE for Incremental trial {i} model is {np.sqrt(mean_squared_error(y_val, Model.predict(X_val)))}')\n                              \n   #last_rmse = np.sqrt(mean_squared_error(y_val, Model.predict(X_val)))\n   #last_rmse = np.sqrt(mean_squared_error(y_val, Model.predict(X_val)))\n   #print('',end='\\n\\n')\n   #print(f'Improvement of : {first_rmse - last_rmse}')\n   #print('-' * 100)\n   preds_list_final_iteration.append(Model.predict(X_test))\n","26c42f13":"pd.DataFrame(oof_train).to_csv('oof_train_kfold.csv', index=False)","c5712cb9":"y_preds = pd.DataFrame(y_preds)","644a3ee6":"y_subs = y_preds","9d2a1c99":"sample_sub['target'] = y_subs\nsample_sub.to_csv('submission_CV.csv', index=False)","78e17efa":"In version 12, I try to optimize parameters by incremental training.","423823f0":"In this version(version 11) and previous versions,  I used parameters which has been tuned for LightGBM in another notebook.\nIn this version, I applied a small learning rate which is suggested by Optuna. So it takes a while to complete this notebook but I hope score changes.\nLet's see how the score changes!","864058fa":"I used LightGBM as a first attempt to submit.\nNot much EDA or Feature engineering, I only did encode the categoricals.\nI think there are so many things for improvment, as I am just new to Kaggle.\nHope you guys like it, and please upvote it!"}}