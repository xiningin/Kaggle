{"cell_type":{"cbfd80c1":"code","9873d31a":"code","d938cdb8":"code","450f9347":"code","e308f219":"code","69bc0517":"code","6ab43d11":"code","89fb4f1d":"code","3714e91f":"code","67b1ecff":"code","1e967886":"code","1281d83e":"code","389d29ad":"code","4d62694c":"code","15725381":"code","798d3ef1":"code","5f0ffecd":"code","83c4a48b":"code","61f985ee":"code","b8607dfc":"code","9a4e28ba":"code","27fa37f2":"code","8faa1d69":"code","1f8c449f":"code","958c31b4":"code","dcb1deb0":"code","79741411":"code","a6497d72":"code","e86e8c3c":"code","d00a4c1a":"code","3f096fe5":"code","7165ff34":"code","765a08fb":"code","6ad47a2a":"code","78f69c22":"code","c396ec1e":"code","bb8b0dd1":"code","8f0a9352":"code","bc21f626":"code","fdab310c":"code","c25dd04d":"code","615b5465":"code","65f64bc9":"code","c242bd26":"code","f48b4026":"code","074ef632":"code","a820ec63":"code","f13dd2ee":"code","7c74daa8":"code","60f8361e":"code","0e9dcbf2":"code","2ed7ca53":"code","87dafac1":"code","4ef96ab5":"code","f5ad16d1":"code","f97110a0":"code","b511f082":"code","be1c3f87":"code","1d3cd4b4":"code","4ffa4d42":"code","1924397b":"code","ae462c72":"code","6ddc9b40":"code","df41e0ca":"code","8ffdd533":"code","c8f5d5cc":"code","a130dd3a":"code","2c9de975":"code","d593ec5d":"code","01c3164f":"code","5942454d":"code","d9a27769":"code","2ffee799":"code","f17f922d":"code","cbb70b60":"code","6803654e":"code","44a7be39":"code","b51e2ada":"code","db944133":"code","1d2a85c4":"code","0897197f":"code","1800017c":"code","d5d83627":"code","09bfd3bd":"code","570ce931":"code","8f5ffee2":"code","9bf52aa5":"code","2c70fc64":"code","5ceba7bd":"code","44e96e3d":"code","ab2b10b2":"code","79a18ee0":"code","3b0348ea":"code","0f90c4bd":"code","167fd28d":"markdown","c65259d2":"markdown","6f7d54da":"markdown","2678e2aa":"markdown","f6ad91b6":"markdown","e89cafd6":"markdown","7ab96a08":"markdown","d309aed3":"markdown","8344a2fb":"markdown","e885e005":"markdown","e7de40da":"markdown","9a7ef4d8":"markdown","0a3d1df2":"markdown","8c90f471":"markdown","0fc3ee0f":"markdown","da47289d":"markdown","0a81a3a1":"markdown","77c58dbb":"markdown","e3660996":"markdown","4f3a6089":"markdown","b9d5fd1f":"markdown","73bb94ca":"markdown","fecba322":"markdown","411b2a40":"markdown","b37f065c":"markdown","4abfb750":"markdown"},"source":{"cbfd80c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9873d31a":"import numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor\n# from sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\n# 4. \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430\nfrom sklearn.metrics import mean_squared_error as mse, r2_score as r2\n\nfrom datetime import datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# \u041c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor, plot_tree\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.preprocessing import StandardScaler\n\n","d938cdb8":"import warnings\nwarnings.filterwarnings('ignore')","450f9347":"matplotlib.rcParams.update({'font.size': 14})","e308f219":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()\n    \n","69bc0517":"TRAIN_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/test.csv'","6ab43d11":"df_train = pd.read_csv(TRAIN_DATASET_PATH, sep=\",\")\ndf_test = pd.read_csv(TEST_DATASET_PATH, sep=\",\")\ndf_train.sample(7)","89fb4f1d":"df_train.describe()","3714e91f":"df_train.dtypes","67b1ecff":"df_train['Id'] = df_train['Id'].astype(str)\ndf_train['DistrictId'] = df_train['DistrictId'].astype(str)","1e967886":"df_train.select_dtypes(include='object').columns.tolist()","1281d83e":"df_train.isna().sum()","389d29ad":"df_train[\"LifeSquare_nan\"] = 0\ndf_train.head()","4d62694c":"df_train.loc[df_train['LifeSquare'].isna(), 'LifeSquare_nan'] = 1\ndf_train[df_train[\"LifeSquare_nan\"] == 1]","15725381":"df_train[\"LifeSquare\"].where(~(df_train[\"LifeSquare_nan\"] == 1), other=(df_train[\"Square\"]*0.63), inplace=True)","798d3ef1":"df_train[df_train[\"Square\"] < 10]","5f0ffecd":"df_train['Square'].where(~(df_train[\"Square\"] < 10), other=(df_train[\"Square\"]*10), inplace=True)\n","83c4a48b":"df_train[df_train[\"Square\"] < df_train[\"LifeSquare\"]]","61f985ee":"df_train[\"LifeSquare\"].where(~(df_train[\"Square\"] < df_train[\"LifeSquare\"]), other=(df_train[\"Square\"]*0.63), inplace=True)","b8607dfc":"df_train[df_train[\"LifeSquare\"] < 10]","9a4e28ba":"df_train[\"LifeSquare\"].where(~(df_train[\"LifeSquare\"] < 10), other=(df_train[\"Square\"]*0.63), inplace=True)","27fa37f2":"plt.figure(figsize=(16, 8))\n\nsns.boxplot(df_train[\"Square\"], whis=1.5)\nplt.show()","8faa1d69":"df_train[df_train[\"Square\"] > 250]","1f8c449f":"df_train[\"LifeSquare\"].where(~(df_train[\"Square\"] > 250), other=(df_train[\"LifeSquare\"].median()), inplace=True)\ndf_train[\"Square\"].where(~(df_train[\"Square\"] > 250), other=(df_train[\"Square\"].median()), inplace=True)","958c31b4":"df_train[(df_train[\"Square\"] - df_train[\"LifeSquare\"]) < 12]","dcb1deb0":"df_train[\"LifeSquare\"].where(~((df_train[\"Square\"] - df_train[\"LifeSquare\"]) < 12), other=(df_train[\"Square\"]*0.63), inplace=True)","79741411":"df_train[\"Rooms\"].describe()","a6497d72":"plt.figure(figsize=(16, 8))\nsns.boxplot(df_train[\"Rooms\"], whis=1.5)\nplt.show()","e86e8c3c":"df_train[(df_train[\"Rooms\"] >= 5) & (df_train[\"LifeSquare\"] < 80)] ","d00a4c1a":"df_train[\"Rooms\"].where(~((df_train[\"Rooms\"] >= 5) & (df_train[\"LifeSquare\"] < 80)), other=(round(df_train[\"LifeSquare\"] \/ 14)), inplace=True)","3f096fe5":"df_train[(df_train[\"Rooms\"] >= 5)] ","7165ff34":"df_train[df_train[\"Rooms\"] == 0]","765a08fb":"df_train[\"Rooms\"].where(~(df_train[\"Rooms\"] == 0), other=(round(df_train[\"LifeSquare\"] \/ 14)), inplace=True)","6ad47a2a":"df_train['Rooms'].value_counts()","78f69c22":"df_train[\"Rooms\"].where(~(df_train[\"Rooms\"] > 5), other=(df_train[\"Rooms\"].median()), inplace=True)","c396ec1e":"df_train[\"KitchenSquare\"].describe()","bb8b0dd1":"df_train[\"KitchenSquare\"].value_counts()","8f0a9352":"df_train[(df_train[\"KitchenSquare\"] > 40)]","bc21f626":"df_train[\"KitchenSquare\"].where(~(df_train[\"KitchenSquare\"] > 40), other=(round((df_train[\"Square\"]) - (df_train[\"LifeSquare\"]) - 12)), \n                                inplace=True)","fdab310c":"df_train[(df_train[\"KitchenSquare\"] < 3)]","c25dd04d":"df_train[\"KitchenSquare\"].where(~(df_train[\"KitchenSquare\"] < 3), other=(round((df_train[\"Square\"]) - (df_train[\"LifeSquare\"]) - 12)), \n                                inplace=True)","615b5465":"df_train[df_train[\"KitchenSquare\"] < 3]","65f64bc9":"df_train[\"KitchenSquare\"].where(~(df_train[\"KitchenSquare\"] < 3), other=3, inplace=True)","c242bd26":"df_train[\"KitchenSquare\"].describe()","f48b4026":"df_train[\"Floor\"].describe()","074ef632":"plt.figure(figsize=(16, 8))\nsns.boxplot(df_train[\"Floor\"], whis=1.5)\nplt.show","a820ec63":"df_train[df_train[\"Floor\"] > 24]","f13dd2ee":"df_train[\"Floor\"].where(~(df_train[\"Floor\"] > 24), other=(df_train[\"Floor\"].median()), inplace=True)","7c74daa8":"df_train[\"HouseFloor\"].describe()","60f8361e":"df_train[df_train[\"HouseFloor\"] == 0]","0e9dcbf2":"df_train[\"HouseFloor\"].where(~(df_train[\"HouseFloor\"] == 0), other=(df_train[\"Floor\"]), inplace=True)","2ed7ca53":"plt.figure(figsize=(16, 8))\nsns.boxplot(df_train[\"HouseFloor\"], whis=1.5)\nplt.show","87dafac1":"df_train[df_train[\"HouseFloor\"] > 29]","4ef96ab5":"df_train[\"HouseFloor\"].where(~(df_train[\"HouseFloor\"] > 29), other=(df_train[\"Floor\"]), inplace=True)","f5ad16d1":"df_train[(df_train[\"Floor\"]) > (df_train[\"HouseFloor\"])]","f97110a0":"df_train[\"HouseFloor\"].where(~((df_train[\"Floor\"]) > (df_train[\"HouseFloor\"])), other=(df_train[\"Floor\"]), inplace=True)","b511f082":"df_train[\"HouseYear\"].describe()","be1c3f87":"df_train[\"HouseYear\"].value_counts()","1d3cd4b4":"df_train[df_train[\"HouseYear\"] > 2021]","4ffa4d42":"df_train[\"HouseYear\"].where(~(df_train[\"HouseYear\"] > 2021), other=(df_train[\"HouseYear\"].median()), inplace=True)","1924397b":"df_train[\"HouseYear\"].describe()","ae462c72":"df_train.isna().sum()","6ddc9b40":"df_train.drop(\"Healthcare_1\", axis=1, inplace=True)","df41e0ca":"df_train.keys()","8ffdd533":"class DataPreprocessing:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.medians = None\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.medians = X.median()\n    \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n        \n        \n        # Square \u0438 LifeSquare   \n        X[\"LifeSquare_nan\"] = 0\n        X.loc[df_train['LifeSquare'].isna(), 'LifeSquare_nan'] = 1\n        X[\"LifeSquare\"].where(~(X[\"LifeSquare_nan\"] == 1), other=(X[\"Square\"]*0.63), inplace=True)        \n        X['Square'].where(~(X[\"Square\"] < 10), other=(X[\"Square\"]*10), inplace=True)      \n        X[\"LifeSquare\"].where(~(X[\"Square\"] < X[\"LifeSquare\"]), other=(X[\"Square\"]*0.63), inplace=True)    \n        X[\"LifeSquare\"].where(~(X[\"Square\"] > 250), other=(X[\"LifeSquare\"].median()), inplace=True)      \n        X[\"Square\"].where(~(X[\"Square\"] > 250), other=(X[\"Square\"].median()), inplace=True)   \n        X[\"LifeSquare\"].where(~((X[\"Square\"] - X[\"LifeSquare\"]) < 12), other=(X[\"Square\"]*0.63), inplace=True)       \n\n        # Rooms\n        X[\"Rooms\"].where(~((X[\"Rooms\"] >= 5) & (X[\"LifeSquare\"] < 80)), other=(round(X[\"LifeSquare\"] \/ 14)), inplace=True)\n        X[\"Rooms\"].where(~(X[\"Rooms\"] == 0), other=(round(X[\"LifeSquare\"] \/ 14)), inplace=True)\n        X[\"Rooms\"].where(~(X[\"Rooms\"] > 5), other=(self.medians['Rooms']), inplace=True)       \n      \n        # KitchenSquare\n        X[\"KitchenSquare\"].where(~(X[\"KitchenSquare\"] > 40), other=(round((X[\"Square\"]) - (X[\"LifeSquare\"]) - 12)), inplace=True)\n        X[\"KitchenSquare\"].where(~(X[\"KitchenSquare\"] < 3), other=(round((X[\"Square\"]) - (X[\"LifeSquare\"]) - 12)), inplace=True)\n        X[\"KitchenSquare\"].where(~(X[\"KitchenSquare\"] < 3), other=3, inplace=True)\n        \n        # HouseFloor, Floor\n        X[\"Floor\"].where(~(X[\"Floor\"] > 24), other=(self.medians[\"Floor\"]), inplace=True)\n        X[\"HouseFloor\"].where(~(X[\"HouseFloor\"] == 0), other=(X[\"Floor\"]), inplace=True)\n        X[\"HouseFloor\"].where(~(X[\"HouseFloor\"] > 29), other=(X[\"Floor\"]), inplace=True)\n        X[\"HouseFloor\"].where(~((X[\"Floor\"]) > (X[\"HouseFloor\"])), other=(X[\"Floor\"]), inplace=True)\n        \n        # HouseYear\n        current_year = datetime.now().year\n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = current_year\n        \n        # Healthcare_1\n        if 'Healthcare_1' in X.columns:\n            X.drop('Healthcare_1', axis=1, inplace=True)\n        \n        \n        X.fillna(self.medians, inplace=True)\n        \n        return X","c8f5d5cc":"df_train.dtypes","a130dd3a":"category_numbers = {\"A\": 0, \"B\": 1}\ndf_train[\"Ecology_2\"] = df_train[\"Ecology_2\"].replace(category_numbers)\ndf_train[\"Ecology_3\"] = df_train[\"Ecology_3\"].replace(category_numbers)\ndf_train[\"Shops_2\"] = df_train[\"Shops_2\"].replace(category_numbers)","2c9de975":"df_train.insert(5, \"UsefulSquare\", (df_train[\"Square\"] - df_train[\"LifeSquare\"]), True)","d593ec5d":"district_size = df_train['DistrictId'].value_counts().reset_index().rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\ndistrict_size.head()","01c3164f":"df_train = df_train.merge(district_size, on='DistrictId', how='left')\ndf_train.head()","5942454d":"med_price_by_district = df_train.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price': 'mean'}).rename(columns={'Price':'MedPriceByDistrict'})\n\nmed_price_by_district","d9a27769":"df_train = df_train.merge(med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\ndf_train.head()","2ffee799":"def floor_to_cat_pandas(X):\n    bins = [0, 3, 5, 9, 15, X['Floor'].max()]\n    X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n    \n    X['floor_cat'].fillna(-1, inplace=True)\n    return X\n\ndef year_to_cat_pandas(X):\n    bins = [0, 1941, 1945, 1980, 2000, 2010, X['HouseYear'].max()]\n    X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n    \n    X['year_cat'].fillna(-1, inplace=True)\n    return X\n\n    return X","f17f922d":"bins = [0, 3, 5, 9, 15, df_train['Floor'].max()]\npd.cut(df_train['Floor'], bins=bins, labels=False)","cbb70b60":"df_train = floor_to_cat_pandas(df_train)\ndf_train = year_to_cat_pandas(df_train)\ndf_train.head()","6803654e":"med_price_by_floor_year = df_train.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\nmed_price_by_floor_year.head()","44a7be39":"\ndf_train = df_train.merge(med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\ndf_train.head()","b51e2ada":"df_train.head()","db944133":"class FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.med_price_by_district = None\n        self.med_price_by_floor_year = None\n        self.house_year_max = None\n        self.floor_max = None\n        self.district_size = None\n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # Binary features\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictID\n        self.district_size = X['DistrictId'].value_counts().reset_index() \\\n                               .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n                \n        # Target encoding\n        ## District, Rooms\n        df = X.copy()\n        \n        if y is not None:\n            df['Price'] = y.values\n            \n            self.med_price_by_district = df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                                            .rename(columns={'Price':'MedPriceByDistrict'})\n            \n            self.med_price_by_district_median = self.med_price_by_district['MedPriceByDistrict'].median()\n            \n        ## floor, year\n        if y is not None:\n            self.floor_max = df['Floor'].max()\n            self.house_year_max = df['HouseYear'].max()\n            df['Price'] = y.values\n            df = self.floor_to_cat(df)\n            df = self.year_to_cat(df)\n            self.med_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\n            self.med_price_by_floor_year_median = self.med_price_by_floor_year['MedPriceByFloorYear'].median()\n        \n\n        \n    def transform(self, X):\n        \n        # Binary features\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)  # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # DistrictId, IsDistrictLarge\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        \n        X['new_district'] = 0\n        X.loc[X['DistrictSize'].isna(), 'new_district'] = 1\n        \n        X['DistrictSize'].fillna(5, inplace=True)\n        \n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        \n        # \u041d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 UsefulSquare\n        X.insert(5, \"UsefulSquare\", (X[\"Square\"] - X[\"LifeSquare\"]), True)\n        \n        # More categorical features\n        X = self.floor_to_cat(X)  # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 floor_cat\n        X = self.year_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 year_cat\n        \n        # Target encoding\n        if self.med_price_by_district is not None:\n            X = X.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n            X['MedPriceByDistrict'].fillna(self.med_price_by_district_median, inplace=True)\n            \n        if self.med_price_by_floor_year is not None:\n            X = X.merge(self.med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n            X['MedPriceByFloorYear'].fillna(self.med_price_by_floor_year_median, inplace=True)\n        \n        return X\n    \n    def floor_to_cat(self, X):\n        bins = [0, 3, 5, 9, 15, self.floor_max]\n        X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n\n        X['floor_cat'].fillna(-1, inplace=True)\n        return X\n     \n    def year_to_cat(self, X):\n        bins = [0, 1941, 1945, 1980, 2000, 2010, self.house_year_max]\n        X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n\n        X['year_cat'].fillna(-1, inplace=True)\n        return X","1d2a85c4":"df_train.sample(7)","0897197f":"df_train.columns.tolist()","1800017c":"feature_names = [\"Rooms\", \"Square\", \"LifeSquare\", \"KitchenSquare\", \"Floor\", \"HouseFloor\", \"HouseYear\", \"Ecology_1\",\n                 \"Ecology_2\", \"Ecology_3\", \"Social_1\", \"Social_2\", \"Social_3\", \"Helthcare_2\", \"Shops_1\", \"Shops_2\"]\nnew_feature_names = [\"DistrictSize\", \"MedPriceByFloorYear\", \"UsefulSquare\"]\ntarget_name = \"Price\"","d5d83627":"df_train = pd.read_csv(TRAIN_DATASET_PATH)\ndf_test = pd.read_csv(TEST_DATASET_PATH)\n\nX = df_train.drop(columns=target_name)\ny = df_train[target_name]","09bfd3bd":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=21)","570ce931":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ndf_test = preprocessor.transform(df_test)\n\nX_train.shape, X_valid.shape, df_test.shape","8f5ffee2":"features_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ndf_test = features_gen.transform(df_test)\n\nX_train.shape, X_valid.shape, df_test.shape","9bf52aa5":"X_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ndf_test = df_test[feature_names + new_feature_names]","2c70fc64":"X_train.shape, X_valid.shape, df_test.shape","5ceba7bd":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), df_test.isna().sum().sum()","44e96e3d":"gb_model = GradientBoostingRegressor(criterion='mse',\n                                     max_depth=3,\n                                     min_samples_leaf=100,\n                                     random_state=42,  \n                                     n_estimators=400)\ngb_model.fit(X_train, y_train)\n\ny_train_preds = gb_model.predict(X_train)\ny_test_preds = gb_model.predict(X_valid)\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)\n","ab2b10b2":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","79a18ee0":"predictions = gb_model.predict(df_test)\npredictions","3b0348ea":"submit['Price'] = predictions\nsubmit.head()","0f90c4bd":"submit.to_csv('rf_submit1.csv', index=False)","167fd28d":"### **\u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","c65259d2":"### **\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a KitchenSquare**","6f7d54da":"### **\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","2678e2aa":"### **\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a Rooms**","f6ad91b6":"**\u0412 \u043e\u0431\u044c\u0435\u043a\u0442\u0430\u0445 \u0433\u0434\u0435 \u044d\u0442\u0430\u0436 \u0431\u043e\u043b\u044c\u0448\u0435 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043c\u0430, \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u043c\u0430 \u043f\u0440\u0438\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044e \u043a \u044d\u0442\u0430\u0436\u0443 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b**","e89cafd6":"**\u0415\u0441\u0442\u044c 12 \u043e\u0431\u044c\u0435\u043a\u0442\u043e\u0432 \u0433\u0434\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043c\u0435\u043d\u044c\u0448\u0435 10 \u043c\u0435\u0442\u0440\u043e\u0432, \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0438 \u043d\u0435 \u0442\u0430\u043c \u0437\u0430\u043f\u044f\u0442\u0443\u044e. \u0423\u043c\u043d\u043e\u0436\u0430\u044e Square \u0438 LifeSquare \u043d\u0430 10**","7ab96a08":"**\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0432 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 Square \u0438 LifeSquare \u0437\u0430\u043c\u0435\u0442\u0438\u043b \u0447\u0442\u043e \u0432 \u0431\u043e\u043b\u044c\u0448\u0435\u043d\u0441\u0442\u0432\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c(LifeSquare) \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c 63% \u043e\u0442 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438(Square). \u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u044d\u0442\u043e\u0433\u043e NAN \u0432 LifeSquare \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e \u044d\u0442\u0438\u043c \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c**","d309aed3":"## **EDA**","8344a2fb":"### **\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432**","e885e005":"**\u041f\u0443\u0442\u0438 \u043a \u0444\u0430\u0439\u043b\u0430\u043c**","e7de40da":"### **\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438 \u043d\u0435 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 Square, \u0438 Lifesquare**","9a7ef4d8":"**\u0415\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u044c\u0435\u043a\u0442\u0430 \u0431\u043e\u043b\u0435\u0435\u0435 250 \u043c\u0435\u0442\u0440\u043e\u0432. \u041c\u0435\u043d\u044f\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443.**","0a3d1df2":"### **\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e HouseYear**","8c90f471":"**\u0415\u0441\u0442\u044c \u043e\u0431\u044c\u0435\u043a\u0442\u044b \u0433\u0434\u0435 \u0436\u044b\u043b\u0430\u044f \u043f\u043b. \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u043e\u0431\u0449\u0430\u044f \u043f\u043b.. \u041c\u0435\u043d\u044f\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b. \u043f\u043e \u0442\u043e\u043c\u0443 \u0436\u0435 \u043f\u0440\u0438\u043d\u0446\u044b\u043f\u0443(63% \u043e\u0442 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b.).**","0fc3ee0f":"**\u041f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0435 \u0437\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438**","da47289d":"**\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438(\u043e\u0431\u0449\u0430\u044f \u043c\u0438\u043d\u0443\u0441 \u0436\u0438\u043b\u0430\u044f)**","0a81a3a1":"### **\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u044e \u043d\u0430 \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442**","77c58dbb":"### \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\n* **Id** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b<br>\n* **DistrictId** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430<br>\n* **Rooms** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442<br>\n* **Square** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c<br>\n* **LifeSquare** - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c<br>\n* **KitchenSquare** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438<br>\n* **Floor** - \u044d\u0442\u0430\u0436<br>\n* **HouseFloor** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435<br>\n* **HouseYear** - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430<br>\n* **Ecology_1, Ecology_2, Ecology_3** - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438<br>\n* **Social_1, Social_2, Social_3** - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438<br>\n* **Healthcare_1, Helthcare_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f<br>\n* **Shops_1, Shops_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432<br>\n* **Price** - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b<br>","e3660996":"## **\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445** ","4f3a6089":"### **\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435**","b9d5fd1f":"### **\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e Floor \u0438 HouseFloor**","73bb94ca":"**\u041f\u0435\u0440\u0435\u0432\u043e\u0436\u0443 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435**","fecba322":"**MedPriceByFloorYear**","411b2a40":"**\u0415\u0441\u0442\u044c 482 \u043e\u0431\u044c\u0435\u043a\u0442\u0430 \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u0447\u0435\u043c \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c, \u043c\u0435\u043d\u044f\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u043e \u0442\u043e\u043c\u0443 \u0436\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u0447\u0442\u043e \u0438 \u0432\u044b\u0448\u0435**","b37f065c":"# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","4abfb750":"# Gradient Boosting decision trees\n"}}