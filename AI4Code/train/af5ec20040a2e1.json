{"cell_type":{"a827a7d3":"code","c0ae2ffc":"code","359839eb":"code","922eb91f":"code","f94ff8f1":"code","6d0799b8":"code","f6df8be6":"code","f0e7bf1e":"code","f96784d7":"code","f06d7c6b":"code","ff0a3934":"code","34deaacd":"code","c74ce391":"code","513836f1":"code","88461cc2":"code","7aa24cd1":"code","428c0f55":"code","36303105":"code","95ccecb6":"code","01629a64":"code","21b8e8f9":"code","0ffe2fee":"code","e58bdc6f":"code","98d5c4ba":"code","a010c25b":"code","cd72a0ab":"code","fabf1fc3":"code","1654757a":"code","9c66dbe4":"code","bce9e53f":"code","5394355a":"code","16fa287e":"code","ccde2d52":"code","50901d25":"code","22c107f0":"code","a7ee15d4":"code","b6593cbf":"code","b52b2285":"code","cc53c88a":"code","62cacbd9":"markdown"},"source":{"a827a7d3":"!pip install -q efficientnet_pytorch","c0ae2ffc":"import numpy as np\nimport pandas as pd","359839eb":"from fastai import *\nfrom fastai.utils import *\nfrom fastai.vision import *\nfrom fastai.callbacks import *\nfrom pathlib import Path\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport PIL\nfrom torch.utils import model_zoo\n\n%matplotlib inline","922eb91f":"from efficientnet_pytorch import EfficientNet","f94ff8f1":"import warnings\nwarnings.filterwarnings(\"ignore\")","6d0799b8":"import os\nprint(os.listdir('.'))","f6df8be6":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\nseed_everything()","f0e7bf1e":"print('Make sure cuda is installed:', torch.cuda.is_available())\nprint('Make sure cudnn is enabled:', torch.backends.cudnn.enabled)","f96784d7":"print(os.listdir('..\/input'))","f06d7c6b":"hack_path = Path('..\/input')","ff0a3934":"# Load train dataframe\ntrain_df = pd.read_csv(hack_path\/'train\/train.csv')\ntest_df = pd.read_csv(hack_path\/'test_ApKoW4T.csv')\nsample = pd.read_csv(hack_path\/'sample_submission_ns2btKE.csv')","34deaacd":"def get_data(bs, size):\n    data = ImageDataBunch.from_df(df=train_df, path=hack_path\/'train', folder='images',\n                                  bs=bs, size=size, valid_pct=0.1, \n                                  resize_method=ResizeMethod.SQUISH, \n                                  ds_tfms=get_transforms(max_lighting=0.4, max_zoom=1.2, \n                                                         max_warp=0.2, max_rotate=20, \n                                                         xtra_tfms=[flip_lr()]))\n    test_data = ImageList.from_df(test_df, path=hack_path\/'train', folder='images')\n    data.add_test(test_data)\n    data.normalize(imagenet_stats)\n    return data","c74ce391":"data = get_data(bs=48, size=224)","513836f1":"data.show_batch(rows=3, figsize=(10,8))","88461cc2":"model_name = 'efficientnet-b3'","7aa24cd1":"def get_model(pretrained=True, **kwargs):\n    model = EfficientNet.from_pretrained(model_name)\n    model._fc = nn.Linear(model._fc.in_features, data.c)\n    return model","428c0f55":"learn = Learner(data, get_model(), \n                metrics=[FBeta(), accuracy],\n                callback_fns=[partial(SaveModelCallback)],\n                wd=0.1,\n                path = '.').mixup()","36303105":"learn.lr_find()\nlearn.recorder.plot(suggestion=True)","95ccecb6":"min_grad_lr = learn.recorder.min_grad_lr\nmin_grad_lr","01629a64":"learn.fit_one_cycle(20, min_grad_lr)","21b8e8f9":"learn.recorder.plot_losses()","0ffe2fee":"learn.recorder.plot_lr(show_moms=True)","e58bdc6f":"learn.unfreeze()\nlearn.lr_find()\nlearn.recorder.plot(suggestion=True)","98d5c4ba":"min_grad_lr = learn.recorder.min_grad_lr\nmin_grad_lr","a010c25b":"learn.fit_one_cycle(20, slice(min_grad_lr))","cd72a0ab":"unfrozen_validation = learn.validate()\nprint(\"Final model validation loss: {0}\".format(unfrozen_validation[0]))","fabf1fc3":"learn.save('efficientnet-unfrozen', return_path=True)","1654757a":"interp = ClassificationInterpretation.from_learner(learn)\n\nlosses,idxs = interp.top_losses()\n\nlen(data.valid_ds)==len(losses)==len(idxs)","9c66dbe4":"# interp.plot_top_losses(15, figsize=(15,11))","bce9e53f":"interp.plot_confusion_matrix(figsize=(6,6), dpi=60)","5394355a":"interp.most_confused(min_val=2)","16fa287e":"probability, classification = learn.TTA(ds_type=DatasetType.Test)","ccde2d52":"probability.argmax(dim=1)[:10]","50901d25":"(probability.argmax(dim=1) + 1).unique()","22c107f0":"sample.category = probability.argmax(dim=1) + 1","a7ee15d4":"sample.category.value_counts()","b6593cbf":"sample.head()","b52b2285":"sample.to_csv('submission_efficientnetb3_kaggle.csv', index=False)","cc53c88a":"# import the modules we'll need\nfrom IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\n\n# function that takes in a dataframe and creates a text link to  \n# download it (will only work for files < 2MB or so)\ndef create_download_link(df, title = \"Download CSV file\", filename = \"data.csv\"):  \n    csv = df.to_csv()\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\n\n# create a link to download the dataframe\ncreate_download_link(sample)","62cacbd9":"### Efficientnet-B3"}}