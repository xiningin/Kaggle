{"cell_type":{"4f5a0f2e":"code","74bf22f8":"code","1d7eff74":"code","6b61c2d8":"code","6811c4c5":"code","7619faa3":"code","cea521a4":"markdown","c0d903f4":"markdown","572db82b":"markdown"},"source":{"4f5a0f2e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","74bf22f8":"y = train['Survived']\ntrain.drop(labels = ['Survived','PassengerId','Name','Ticket','Cabin','Embarked'], axis = 1, inplace = True)\ntrain['Age'].fillna(train['Age'].mean(), inplace = True)\ncategorical_columns = ['Sex']\ntrain = pd.get_dummies(train,columns = categorical_columns, dtype = int)\ntrain.drop(labels = ['Sex_male'], axis = 1, inplace = True)\n\nX = []\nfor column in train.columns:\n    X.append(column)\n\nX = train[X]","1d7eff74":"X.head()","6b61c2d8":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression().fit(X, y)\ny_pred = model.predict(train)\n\n#Function to convert the prediction to a one (survived) or zero (not survived)\ndef one_or_zero(abc):\n    if (1 - abc) < (abc - 0):\n        return 1\n    else: \n        return 0\n    \n#Converting the predictions to 1 or 0:\n\nlist_of_predictions = []\n\nfor pred in y_pred:\n    list_of_predictions.append(one_or_zero(pred))\n    \ny_pred = np.asarray(list_of_predictions)\n\n#Accuracy of the same model it trained on\nunique, counts = np.unique( np.asarray(y_pred == y), return_counts=True)\ntrue_false_values = dict(zip(unique, counts))\naccuracy = true_false_values[True]\/len(np.asarray(y_pred == y))\naccuracy","6811c4c5":"original_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest.drop(labels = ['PassengerId','Name','Ticket','Cabin','Embarked'], axis = 1, inplace = True)\ntest['Age'].fillna(test['Age'].mean(), inplace = True)\ncategorical_columns = ['Sex']\ntest = pd.get_dummies(test,columns = categorical_columns, dtype = int)\ntest.drop(labels = ['Sex_male'], axis = 1, inplace = True)\ntest['Fare'].fillna(test['Fare'].mean(), inplace = True)\n\ntest_pred = model.predict(test)\nlist_of_predictions_test = []\n\nfor pred in test_pred:\n    list_of_predictions_test.append(one_or_zero(pred))\n    \ntest_pred = np.asarray(list_of_predictions_test)","7619faa3":"submission = pd.DataFrame({\n        \"PassengerId\": original_test[\"PassengerId\"],\n        \"Survived\": test_pred\n    }) \n\nfilename = 'submission.csv'\nsubmission.to_csv(filename,index=False)\nprint('Saved file: ' + filename)","cea521a4":"**Using the model on the test data**","c0d903f4":"(I decided to make a slightly different version to my original as Embarked should note have any effect on whether the person survived or not. I have also dropped sex_male column. I have also removed some code and markdown which I had used in my [original version](https:\/\/www.kaggle.com\/niteshhalai\/titanic-linear-regression-original-version).)","572db82b":"First I will  split the data between variable and targets. I will also remove the columns PassenderId, Name, Ticket (these should not have any effect on whether the passenger survived or not) and Cabin (as these have a lot of missing values). I will also remove the embarked column as where the passenger has left from shouldn't have any effect on whether they survived or not."}}