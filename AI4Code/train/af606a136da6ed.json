{"cell_type":{"02fe4928":"code","229fe6ba":"code","3415d00e":"code","25dc19ac":"code","18c47059":"code","29c39bf2":"code","96b443ce":"code","bc7b3968":"code","26ff3c6c":"code","19245164":"code","5fd6721a":"code","7f27b23f":"code","9e88d004":"code","20b2cffe":"code","1a5e9c54":"code","5d25c42f":"code","1e1759f7":"code","e2c0d61b":"code","13bfd60e":"code","9a0dd249":"code","7cd7829b":"code","7137b03d":"code","50cd4d14":"code","84f5e72e":"code","9dbee02a":"code","dbe0ad97":"code","e7f4761b":"code","29d66c73":"code","b11f9d8b":"code","8554028c":"code","4b5306b9":"code","b700d396":"code","8ab87790":"code","2baa572b":"code","03cb82b0":"code","4a383312":"code","6f79d135":"code","7868d9ad":"code","5c9a937d":"code","458373b2":"code","e842d971":"code","c2f11a33":"code","a1039bcc":"code","c7baaf9a":"code","5ed442fe":"code","5d548ba7":"code","a1be6ef1":"code","eb7e5eaf":"code","bacef15f":"code","851cf5f7":"code","73c5a254":"code","b4b228bf":"code","36e01107":"code","94c95f36":"code","8b195b94":"code","2c048995":"code","5aef638e":"code","be43a715":"markdown","03994789":"markdown","b31c026b":"markdown"},"source":{"02fe4928":"import pandas as pd\ndata=pd.read_csv('..\/input\/student-grade-prediction\/student-mat.csv')\ndata.head()","229fe6ba":"data.shape","3415d00e":"data.columns","25dc19ac":"data.info()","18c47059":"data.describe()","29c39bf2":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(12,4))\nsns.heatmap(data.isnull(),cbar=False,cmap='viridis',yticklabels=False)\nplt.title('Missing value in the dataset');","96b443ce":"import numpy as np\nnumeric_columns=data.loc[:, data.columns != 'G3'].select_dtypes(include=np.number).columns.tolist()","bc7b3968":"data.boxplot(column=numeric_columns,fontsize=10,rot=0,grid=False,figsize=(10,10),vert=False)","26ff3c6c":"# get IQR for each numeric column\nQ1 = data[numeric_columns].quantile(0.25)\nQ3 = data[numeric_columns].quantile(0.75)\nIQR = Q3 - Q1\nboxplot_min = Q1 - 1.5 * IQR\nboxplot_max = Q3 + 1.5 * IQR\nprint('Q1:\\n',Q1)\nprint('\\nQ3:\\n',Q3)\nprint('\\nIQR:\\n',IQR)\nprint('\\nMin:\\n',boxplot_min)\nprint('\\nMax:\\n',boxplot_max)","19245164":"# remove outlier\nnon_outlier_data = data.copy()\nfor x in numeric_columns:\n  filter_min = non_outlier_data[x]<boxplot_min[x]\n  filter_max = non_outlier_data[x]>boxplot_max[x]\n  non_outlier_data = non_outlier_data[~(\n    filter_min|filter_max\n    )]","5fd6721a":"non_outlier_data.head(5)","7f27b23f":"non_outlier_data.shape","9e88d004":"# check correlation between column\n\ncorrelation_between_columns = non_outlier_data[numeric_columns].corr()\nupper_triangle_corr = np.triu(correlation_between_columns)\n\nfig, ax = plt.subplots(figsize=(12,12))\nsns.heatmap(correlation_between_columns, annot = True, cmap=\"YlGnBu\",ax=ax,annot_kws={\"size\":15},mask=upper_triangle_corr)","20b2cffe":"# check linearity between target vs feature\nscatter_plot_between_target_feature = sns.pairplot(\n    data=non_outlier_data,\n    y_vars=['G3'],\n    x_vars=numeric_columns,\n    height=3,\n    kind='scatter'\n    )","1a5e9c54":"final_feature_column = ['G1','G2']\ntarget_column = ['G3']\nfinal_column = final_feature_column+target_column\nfinal_data = non_outlier_data[final_column]","5d25c42f":"final_data.shape","1e1759f7":"final_data.head(10)","e2c0d61b":"# prepare the data to numpy array\nfinal_feature_array = final_data[final_feature_column].to_numpy()\ntarget_array = final_data[target_column].to_numpy()","13bfd60e":"print('shape of final feature:',final_feature_array.shape)\nprint('shape of target:',target_array.shape)","9a0dd249":"import sklearn.model_selection as model_selection\n# split the data into test and train\nX_train, X_test, y_train, y_test = model_selection.train_test_split(\n    final_feature_array,\n    target_array,\n    train_size=0.8,\n    random_state=0\n    )","7cd7829b":"# check the shape data\nprint('Shape Data X Train:')\nprint(X_train.shape)\nprint('\\nShape Data X Test:')\nprint(X_test.shape)\nprint('\\nShape Data y Train:')\nprint(y_train.shape)\nprint('\\nShape Data y Test:')\nprint(y_test.shape)","7137b03d":"import sklearn.linear_model as linear_model\nregression_model = linear_model.LinearRegression()","50cd4d14":"# train the data\nregression_model.fit(X_train, y_train)","84f5e72e":"# model result\nprint('Coefficients:\\n',regression_model.coef_)\n# print('\\n')\nprint('Intercept:',regression_model.intercept_)","9dbee02a":"# predict the X using trained model\ny_train_pred = regression_model.predict(X_train)\ny_test_pred = regression_model.predict(X_test)\ntarget_array_pred = regression_model.predict(final_feature_array)","dbe0ad97":"# check the raw prediction data & compare with real data\nprint('Real Data')\nprint(y_train[:5])\nprint('\\n Predicted Data')\nprint(y_train_pred[:5])","e7f4761b":"# check the data in the form of dataframe\nfinal_with_pred_data = final_data.copy()\nfinal_with_pred_data['G3'] = target_array_pred.reshape(-1,)\nfinal_with_pred_data.head(5)","29d66c73":"# evaluate regression model - RMSE\nfrom sklearn.metrics import mean_squared_error\nrmse_training = mean_squared_error(y_true=y_train,y_pred=y_train_pred,squared=False)\nrmse_test = mean_squared_error(y_true=y_test,y_pred=y_test_pred,squared=False)\n\nprint('RMSE Training Data: {}'.format(rmse_training))\nprint('RMSE Test Data: {}'.format(rmse_test))","b11f9d8b":"# evaluate regression model - R squared\nprint('R^2 score:',regression_model.score(X_train, y_train))","8554028c":"from scipy import stats\nresidual = (abs(target_array) - abs(target_array_pred))\nsw = stats.shapiro(residual)\nks = stats.kstest(residual, 'norm')\n\nprint('Shapiro-Wilk test ---- statistic: {}, p-value: {}'.format(sw[0],sw[1]))\nprint('Kolmogorov-Smirnov test ---- statistic: {}, p-value: {}'.format(ks.statistic,ks.pvalue))","4b5306b9":"import statsmodels.api as sm\nmodel = sm.OLS(y_train,X_train)\nresults = model.fit()\nprint(results.summary())","b700d396":"non_outlier_data.head()\n","8ab87790":"non_outlier_data['avg_score'] = non_outlier_data[['G1', 'G2','G3']].mean(axis=1)\nnon_outlier_data.drop(['G1', 'G2','G3'], axis=1,inplace=True)\nnon_outlier_data.head()","2baa572b":"numeric_columns=non_outlier_data.loc[:, non_outlier_data.columns != 'avg_score'].select_dtypes(include=np.number).columns.tolist()","03cb82b0":"# check correlation between column\ncorrelation_between_column = non_outlier_data[numeric_columns].corr()\nupper_triangle_corr = np.triu(correlation_between_column)\n\nfig, ax = plt.subplots(figsize=(40,40))\nsns.heatmap(correlation_between_column, annot = True, cmap=\"YlGnBu\",ax=ax,annot_kws={\"size\":15},mask=upper_triangle_corr)","4a383312":"from sklearn.preprocessing import LabelEncoder, LabelBinarizer\nbinary_cols = []\n\nfor col in non_outlier_data.columns:\n    if non_outlier_data[col].nunique()==2:\n        binary_cols.append(col)","6f79d135":"for i in binary_cols:\n    non_outlier_data[i] = LabelBinarizer().fit_transform(non_outlier_data[i])","7868d9ad":"non_outlier_data.head().transpose()","5c9a937d":"categorical_cols = [column for column in non_outlier_data.columns if (non_outlier_data[column].nunique()<=30)]\nstr_col = [col for col in categorical_cols if data[col].dtype =='O']\nstr_col","458373b2":"for i in str_col:\n    print(i, ' :', non_outlier_data[i].unique())","e842d971":"non_outlier_data_ = non_outlier_data.copy()","c2f11a33":"for i in str_col:\n    print(i)\n    non_outlier_data = pd.concat([non_outlier_data.drop(i, axis = 1), pd.get_dummies(non_outlier_data[i], prefix=i, drop_first = True)], axis = 1)","a1039bcc":"non_outlier_data['Good_Student'] = non_outlier_data['avg_score'].copy()","c7baaf9a":"def classify(x):\n    if x > 15:\n        return 1\n    else:\n        return 0\n\nnon_outlier_data['Good_Student'] = non_outlier_data['avg_score'].apply(classify)","5ed442fe":"non_outlier_data.head(10).transpose()","5d548ba7":"non_outlier_data.drop(['avg_score'], axis = 1,inplace=True)","a1be6ef1":"# prepare the data to numpy array\nfinal_feature_column=non_outlier_data.loc[:, non_outlier_data.columns != 'Good_Student'].columns.tolist()\nfinal_feature_array = non_outlier_data[final_feature_column].to_numpy()\ntarget_array = non_outlier_data['Good_Student'].to_numpy()","eb7e5eaf":"print('shape of final feature:',final_feature_array.shape)\nprint('shape of target:',target_array.shape)","bacef15f":"# split the data into test and train\nX_train, X_test, y_train, y_test = model_selection.train_test_split(\n    final_feature_array,\n    target_array,\n    train_size=0.8,\n    random_state=0\n    )","851cf5f7":"# check the shape data\nprint('Shape Data X Train:')\nprint(X_train.shape)\nprint('\\nShape Data X Test:')\nprint(X_test.shape)\nprint('\\nShape Data y Train:')\nprint(y_train.shape)\nprint('\\nShape Data y Test:')\nprint(y_test.shape)","73c5a254":"# load the algorithm\nimport sklearn.neighbors as neighbors\nclassification_model = neighbors.KNeighborsClassifier(n_neighbors=10)","b4b228bf":"# train the data\nclassification_model.fit(X_train, y_train)","36e01107":"# predict the X using trained model\ny_train_pred = classification_model.predict(X_train)\ny_test_pred = classification_model.predict(X_test)\ntarget_array_pred = classification_model.predict(final_feature_array)","94c95f36":"# check the raw prediction data & compare with real data\nprint('Real Data')\nprint(y_train[:5])\nprint('\\n Predicted Data')\nprint(y_train_pred[:5])","8b195b94":"# check the data in the form of dataframe\nfinal_with_pred_data = non_outlier_data.copy()\nfinal_with_pred_data['is_Good_Student_predicted'] = target_array_pred.reshape(-1,)\nfinal_with_pred_data.head(5)","2c048995":"# evaluate classification model - accuracy\nimport sklearn.metrics as metrics\naccuracy_training = metrics.accuracy_score(y_train,y_train_pred)\naccuracy_test = metrics.accuracy_score(y_test,y_test_pred)\n\nprint('Accuracy Training Data: {}'.format(accuracy_training))\nprint('Accuracy Test Data: {}'.format(accuracy_test))","5aef638e":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_train,y_train_pred))\nprint(confusion_matrix(y_test,y_test_pred))","be43a715":"# **Read the Data**","03994789":"# **Classification**","b31c026b":"# **Regression**"}}