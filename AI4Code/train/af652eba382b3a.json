{"cell_type":{"b9b24188":"code","4e4bf489":"code","20c93818":"code","e971e0ce":"code","81bc1ddb":"code","7e95c44d":"code","a81582ff":"code","3f72aa98":"code","3927d39b":"markdown"},"source":{"b9b24188":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler \nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import make_pipeline\nfrom lightgbm import LGBMClassifier\nfrom category_encoders import OneHotEncoder\nfrom sklearn.model_selection import cross_val_predict\nfrom warnings import filterwarnings\nfrom sklearn.impute import SimpleImputer\nfilterwarnings('ignore')\nimport os\nprint(os.listdir(\"..\/input\"))","4e4bf489":"train = pd.read_csv(\"..\/input\/train.csv\")\nprint(\"train shape\", train.shape)\ntest = pd.read_csv(\"..\/input\/test.csv\")\nprint(\"test shape\", test.shape)","20c93818":"target_column = \"target\"\nid_column = \"id\"\ncategorical_cols = [c for c in test.columns if test[c].dtype in [np.object]]\nnumerical_cols = [c for c in test.columns if test[c].dtype in [np.float, np.int] and c not in [target_column, id_column]]\nprint(\"Number of features\", len(categorical_cols)+len(numerical_cols))","e971e0ce":"classifier = make_pipeline(\n    ColumnTransformer([\n        ('num', StandardScaler(), numerical_cols),\n        ('cat', OneHotEncoder(), categorical_cols),    \n    ]),\n    LGBMClassifier(n_jobs=-1)\n)","81bc1ddb":"%%time\noof_pred = cross_val_predict(classifier, \n                             train, \n                             train[target_column], \n                             cv=5,\n                             method=\"predict_proba\")","7e95c44d":"print(\"Cross validation AUC {:.4f}\".format(roc_auc_score(train[target_column], oof_pred[:,1])))","a81582ff":"sub = pd.read_csv(\"..\/input\/sample_submission.csv\")\nsub.head()","3f72aa98":"%%time\nclassifier.fit(train, train[target_column])\ntest_preds = classifier.predict_proba(test)[:,1]\nsub[target_column] = test_preds\nsub.to_csv(\"submission.csv\", index=False)","3927d39b":"In recent sklearn they introduced ColumnTransformer which is a very compact way to define end-2-end solution."}}