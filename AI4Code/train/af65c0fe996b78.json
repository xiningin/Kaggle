{"cell_type":{"27370cd4":"code","f45365c6":"code","8284a471":"code","c71d1a54":"code","013b6f19":"code","a73ca3b3":"code","9c0f3ed2":"code","92e0f3ea":"code","f7e14177":"code","6f3fbe9c":"code","b87f7a05":"code","c4ee2539":"code","b112b913":"code","466f2daa":"code","7875240c":"code","5fa1d9bf":"code","02f37e32":"code","a6db2b29":"code","4e58490d":"code","f87a2e72":"code","69733577":"code","cad4c3a1":"markdown","07f48130":"markdown","4aac40fb":"markdown","ab968695":"markdown"},"source":{"27370cd4":"import os\nimport cv2\nimport pandas as pd\nimport numpy as np\nimport tqdm as tqdm\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense,Conv2D,Flatten,MaxPool2D,Dropout,BatchNormalization,Activation,GlobalAveragePooling2D\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau,ModelCheckpoint\nfrom keras.applications import DenseNet121\nfrom sklearn.metrics import confusion_matrix\nimport PIL.Image as Image, PIL.ImageDraw as ImageDraw, PIL.ImageFont as ImageFont\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","f45365c6":"sample_submission = pd.read_csv(\"..\/input\/plant-pathology-2020-fgvc7\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/plant-pathology-2020-fgvc7\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/plant-pathology-2020-fgvc7\/train.csv\")","8284a471":"train.head()","c71d1a54":"x = train['image_id']","013b6f19":"img_size = 100\ntrain_image = []\nfor i,name in enumerate(train['image_id']):\n    path = '\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/'+name+'.jpg'\n    img = cv2.imread(path)\n    image = cv2.resize(img,(img_size,img_size),interpolation = cv2.INTER_AREA)\n    train_image.append(image)\n    if i%200==0:\n        print(i, 'images processed')","a73ca3b3":"fig, ax = plt.subplots(1, 4, figsize=(15, 15))\nfor i in range(4):\n    ax[i].set_axis_off()\n    ax[i].imshow(train_image[i])","9c0f3ed2":"test.head()","92e0f3ea":"img_size = 100\ntest_image = []\nfor i,name in enumerate(test['image_id']):\n    path = '\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/'+name+'.jpg'\n    img = cv2.imread(path)\n    image = cv2.resize(img,(img_size,img_size),interpolation = cv2.INTER_AREA)\n    test_image.append(image)\n    if i%200==0:\n        print(i, 'images processed')","f7e14177":"fig, ax = plt.subplots(1, 4, figsize=(15, 15))\nfor i in range(4):\n    ax[i].set_axis_off()\n    ax[i].imshow(test_image[i])","6f3fbe9c":"X_Train = np.ndarray(shape=(len(train_image), img_size, img_size, 3),dtype = np.float32)\ni=0\nfor image in train_image:\n    #X_Train[i]=img_to_array(image)\n    X_Train[i]=train_image[i]\n    i=i+1\nX_Train=X_Train\/255\nprint('Train Shape: {}'.format(X_Train.shape))","b87f7a05":"X_Test = np.ndarray(shape=(len(test_image), img_size, img_size, 3),dtype = np.float32)\ni=0\nfor image in test_image:\n    #X_Test[i]=img_to_array(image)\n    X_Test[i]=test_image[i]\n    i=i+1\n    \nX_Test=X_Test\/255\nprint('Test Shape: {}'.format(X_Test.shape))","c4ee2539":"y = train.copy()\ndel y['image_id']\ny.head()","b112b913":"y_train = np.array(y.values)\nprint(y_train.shape,y_train[0])","466f2daa":"X_train, X_val, Y_train, Y_val = train_test_split(X_Train, y_train, test_size=0.2, random_state=42)","7875240c":"prior = tf.keras.applications.DenseNet121(\n    include_top = False,\n    weights = 'imagenet',\n    input_shape = (img_size,img_size,3)\n)\n\nmodel = Sequential()\nmodel.add(prior)\nmodel.add(tf.keras.layers.GlobalAveragePooling2D())\nmodel.add(tf.keras.layers.BatchNormalization())\nmodel.add(tf.keras.layers.Dropout(0.5))\nmodel.add(tf.keras.layers.Dense(256, activation='relu'))\nmodel.add(tf.keras.layers.BatchNormalization())\nmodel.add(tf.keras.layers.Dropout(0.5))\n    # multi output\nmodel.add(tf.keras.layers.Dense(4,activation = 'softmax'))\n\n\noptimizer = tf.keras.optimizers.Adam(lr=0.002, beta_1=0.9, beta_2=0.999, epsilon=0.1, decay=0.0)\nmodel.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\nmodel.summary()","5fa1d9bf":"annealer = ReduceLROnPlateau(monitor='val_accuracy', factor=0.5, patience=5, verbose=1, min_lr=1e-3)\ncheckpoint = ModelCheckpoint('model.h5', verbose=1, save_best_only=True)\n# Generates batches of image data with data augmentation\ndatagen = ImageDataGenerator(rotation_range=360, # Degree range for random rotations\n                        width_shift_range=0.2, # Range for random horizontal shifts\n                        height_shift_range=0.2, # Range for random vertical shifts\n                        zoom_range=0.2, # Range for random zoom\n                        horizontal_flip=True, # Randomly flip inputs horizontally\n                        vertical_flip=True) # Randomly flip inputs vertically\n\ndatagen.fit(X_train)\n# Fits the model on batches with real-time data augmentation\nhist = model.fit_generator(datagen.flow(X_train, Y_train, batch_size=32),\n               steps_per_epoch=X_train.shape[0] \/\/ 32,\n               epochs=80,\n               verbose=1,\n               callbacks=[annealer, checkpoint],\n               validation_data=(X_val, Y_val))\n","02f37e32":"predict = model.predict(X_Test)\nall_predict = np.ndarray(shape = (test.shape[0],4),dtype = np.float32)\nfor i in range(0,test.shape[0]):\n    for j in range(0,4):\n        if predict[i][j]==max(predict[i]):\n            all_predict[i][j] = 1\n        else:\n            all_predict[i][j] = 0 ","a6db2b29":"healthy = [y_test[0] for y_test in all_predict]\nmultiple_diseases = [y_test[1] for y_test in all_predict]\nrust = [y_test[2] for y_test in all_predict]\nscab = [y_test[3] for y_test in all_predict]","4e58490d":"df = {'image_id':test.image_id,'healthy':healthy,'multiple_diseases':multiple_diseases,'rust':rust,'scab':scab}","f87a2e72":"data = pd.DataFrame(df)\ndata.tail()","69733577":"data.to_csv('submission.csv',index = False)","cad4c3a1":"# Image Reshaping and Normalisation","07f48130":" # **MultiLabelClassification Problem**","4aac40fb":"# Features","ab968695":"# Model "}}