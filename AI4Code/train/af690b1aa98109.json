{"cell_type":{"fe537bc8":"code","886fa74f":"code","a7ac3142":"code","7a7e415c":"code","134bd358":"code","ffd71b39":"code","2d38676a":"code","a8625214":"code","191d2959":"code","4e7cec6f":"code","86175d23":"code","c315b1d5":"code","359c743a":"code","05514689":"code","ea6c19de":"code","097b47cb":"code","c1c78a2f":"code","611af3e1":"code","77b20cdc":"code","3322c83c":"code","c005a5d2":"code","42ec088b":"code","7c2e734f":"code","15afa052":"code","ab8bfc3f":"code","ee84b6dc":"code","1f767e66":"markdown","c08c9683":"markdown","10452c6c":"markdown","17d3cb38":"markdown","7f1eb979":"markdown","ac93b19c":"markdown","a5aeb909":"markdown","9c2b6369":"markdown","b7e90090":"markdown","3a95789b":"markdown","067bc713":"markdown","90b656d5":"markdown","3c3a28fb":"markdown","7d5833c1":"markdown","19ba8d7e":"markdown","ab354497":"markdown","84ec68e2":"markdown","d871fca9":"markdown","cce037f7":"markdown","373b344a":"markdown","d163c5f4":"markdown"},"source":{"fe537bc8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","886fa74f":"# text processing libraries\nimport re\nimport string\nimport nltk\nfrom nltk.corpus import stopwords\n\n# XGBoost\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\n\n# sklearn \nfrom sklearn import model_selection\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import f1_score\nfrom sklearn import preprocessing, decomposition, model_selection, metrics, pipeline\nfrom sklearn.model_selection import GridSearchCV,StratifiedKFold,RandomizedSearchCV\n\n# matplotlib and seaborn for plotting\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# File system manangement\nimport os\n\n# Suppress warnings \nimport warnings\nwarnings.filterwarnings('ignore')","a7ac3142":"#training Data\ntrain=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv')\nprint('Training Data Shape',train.shape)\ntrain.head()","7a7e415c":"# Testing data \ntest = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\nprint('Testing data shape: ', test.shape)\ntest.head()\n","134bd358":"# Counting Number oF Missing values\ntrain.isnull().sum()","ffd71b39":"#Missing values in test set\ntest.isnull().sum()","2d38676a":"train['target'].value_counts()","a8625214":"sns.barplot(train['target'].value_counts().index,train['target'].value_counts())","191d2959":"# A disaster tweet\ndisaster_tweets = train[train['target']==1]['text']\ndisaster_tweets.values[1]","4e7cec6f":"#not a disaster tweet\nnon_disaster_tweets = train[train['target']==0]['text']\nnon_disaster_tweets.values[1]\n","86175d23":"plt.figure(figsize=(15,10))\nsns.barplot(y=train['keyword'].value_counts()[:20].index,x=train['keyword'].value_counts()[:20],\n            orient='h')\n","c315b1d5":"# glance at training data\ntrain['text'][:5]","359c743a":"# Applying a first round of text cleaning techniques\n\ndef clean_text(text):\n    '''Make text lowercase, remove text in square brackets,remove links,remove punctuation\n    and remove words containing numbers.'''\n    text = text.lower()\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    return text\n\n# Applying the cleaning function to both test and training datasets\ntrain['text'] = train['text'].apply(lambda x: clean_text(x))\ntest['text'] = test['text'].apply(lambda x: clean_text(x))\n\n# Let's take a look at the updated text\ntrain['text'].head()","05514689":"text = \"Are you coming , aren't you\"\ntokenizer1 = nltk.tokenize.WhitespaceTokenizer()\ntokenizer2 = nltk.tokenize.TreebankWordTokenizer()\ntokenizer3 = nltk.tokenize.WordPunctTokenizer()\ntokenizer4 = nltk.tokenize.RegexpTokenizer(r'\\w+')\n\nprint(\"Example Text: \",text)\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"Tokenization by whitespace:- \",tokenizer1.tokenize(text))\nprint(\"Tokenization by words using Treebank Word Tokenizer:- \",tokenizer2.tokenize(text))\nprint(\"Tokenization by punctuation:- \",tokenizer3.tokenize(text))\nprint(\"Tokenization by regular expression:- \",tokenizer4.tokenize(text))","ea6c19de":"# Tokenizing the training and the test set\ntokenizer = nltk.tokenize.RegexpTokenizer(r'\\w+')\ntrain['text'] = train['text'].apply(lambda x: tokenizer.tokenize(x))\ntest['text'] = test['text'].apply(lambda x: tokenizer.tokenize(x))\ntrain['text'].head()","097b47cb":"def remove_stopwords(text):\n    \"\"\"\n    Removing stopwords belonging to english language\n    \n    \"\"\"\n    words = [w for w in text if w not in stopwords.words('english')]\n    return words\n\n\ntrain['text'] = train['text'].apply(lambda x : remove_stopwords(x))\ntest['text'] = test['text'].apply(lambda x : remove_stopwords(x))\ntrain.head()","c1c78a2f":"# Not used\n# # list of list \n# docs=[]\n# for i in range(len(train)):\n#     docs.append(train['text'][i])\n    \n","611af3e1":"# we are not using this step\n# After preprocessing, the text format\n# def combine_text(list_of_text):\n#     '''Takes a list of text and combines them into one large chunk of text.'''\n#     combined_text = ' '.join(list_of_text)\n#     return combined_text\n\n# train['text'] = train['text'].apply(lambda x : combine_text(x))\n# test['text'] = test['text'].apply(lambda x : combine_text(x))\n# train['text']\n# train.head()","77b20cdc":"# Not using here\n# # using dfiffrent tokenizer and TfIdf fro SKlearn\n# # http:\/\/www.davidsbatista.net\/blog\/2018\/02\/28\/TfidfVectorizer\/\n# from sklearn.feature_extraction.text import TfidfVectorizer\n\n# def dummy_fun(doc):\n#     return doc\n\n# tfidf = TfidfVectorizer(\n#     analyzer='word',\n#     tokenizer=dummy_fun,\n#     preprocessor=dummy_fun,\n#     token_pattern=None)  \n\n# # trainsforming training vector\n# train_vectors=tfidf.fit_transform(docs)\n# print(len(tfidf.vocabulary_)) # len of vocublary\n# print(type(train_vectors))\n\n","3322c83c":"# After preprocessing, the text format\ndef combine_text(list_of_text):\n    '''Takes a list of text and combines them into one large chunk of text.'''\n    combined_text = ' '.join(list_of_text)\n    return combined_text\ntrain['text']=train['text'].apply(lambda x: combine_text(x))\ntest['text'] = test['text'].apply(lambda x : combine_text(x))","c005a5d2":"# NOt used Here\n# # transforming test vectors\n# test_vectors = tfidf.transform(test[\"text\"])\n# print(type(test_vectors))\n# print(test_vectors.shape)\n","42ec088b":"# min_df and max_df \n#https:\/\/stackoverflow.com\/questions\/27697766\/understanding-min-df-and-max-df-in-scikit-countvectorizer\n# ngram_range\n#https:\/\/www.kaggle.com\/c\/avito-demand-prediction\/discussion\/58819\ntfidf = TfidfVectorizer(min_df=2, max_df=0.5, ngram_range=(1, 2))\ntrain_vectors = tfidf.fit_transform(train['text'])\ntest_vectors = tfidf.transform(test[\"text\"])","7c2e734f":"clf = LogisticRegression(C=0.90,max_iter=1000,penalty='l2')\n# clf = LogisticRegression(C=1.00)\n# was  also best when min_df=2,max_df=5,ngram_range=(1,2)\nscores = model_selection.cross_val_score(clf, train_vectors, train[\"target\"], cv=7, scoring=\"f1\")\nscores","15afa052":"clf.fit(train_vectors, train[\"target\"])","ab8bfc3f":"sample_submission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")\nsample_submission[\"target\"] = clf.predict(test_vectors)\nsample_submission.to_csv(\"submission.csv\", index=False)","ee84b6dc":"\n# from sklearn.pipeline import Pipeline\n\n# # Create first pipeline for base without reducing features.\n\n# pipe = Pipeline([('classifier' , LogisticRegression())])\n\n\n# # Create param grid.\n\n# param_grid = [\n#     {'classifier' : [LogisticRegression()],\n#      'classifier__penalty' : ['l1', 'l2'],\n#     'classifier__C' : np.logspace(-4, 4, 20),\n#     'classifier__solver' : ['liblinear']},\n    \n# ]\n\n# # Create grid search object\n\n# clf = GridSearchCV(pipe, param_grid = param_grid, cv = 5, verbose=True, n_jobs=-1)\n\n# # Fit on data\n\n# best_clf = clf.fit(train_vectors, train[\"target\"])\n\n\n# sample_submission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")\n# sample_submission[\"target\"] = best_clf.predict(test_vectors)\n# sample_submission.to_csv(\"submission.csv\", index=False)","1f767e66":"## Do we have to Normalize the Tokens here(i.e Stemming or Lemmatiztion ?)\n","c08c9683":"The columns denote the following:\n\n* The text of a tweet\n* A keyword from that tweet\n* The location the tweet was sent from","10452c6c":"### Data Cleaning\nBefore we start with any NLP project we need to pre-process the data to get it all in a consistent format.We need to clean, tokenize and convert our data into a matrix. Some of the basic text pre-processing techniques includes:\n\n* Make text all **lower case** or uppercase so that the algorithm does not treat the same words in different cases as different\n* **Removing Noise** i.e everything that isn\u2019t in a standard number or letter i.e Punctuation, Numerical values, common non-sensical text (\/n)\n* **Tokenization**: Tokenization is just the term used to describe the process of converting the normal text strings into a list of tokens i.e words that we actually want. Sentence tokenizer can be used to find the list of sentences and Word tokenizer can be used to find the list of words in strings.\n* **Stopword Removal**: Sometimes, some extremely common words which would appear to be of little value in helping select documents matching a user need are excluded from the vocabulary entirely. These words are called stop words\n\nMore data cleaning steps after tokenization:\n\n* **Stemming**: Stemming is the process of reducing inflected (or sometimes derived) words to their stem, base or root form\u200a\u2014\u200agenerally a written word form. Example if we were to stem the following words: \u201cStems\u201d, \u201cStemming\u201d, \u201cStemmed\u201d, \u201cand Stemtization\u201d, the result would be a single word \u201cstem\u201d.\n* **Lemmatization**: A slight variant of stemming is lemmatization. The major difference between these is, that, stemming can often create non-existent words, whereas lemmas are actual words. So, your root stem, meaning the word you end up with, is not something you can just look up in a dictionary, but you can look up a lemma. Examples of Lemmatization are that \u201crun\u201d is a base form for words like \u201crunning\u201d or \u201cran\u201d or that the word \u201cbetter\u201d and \u201cgood\u201d are in the same lemma so they are considered the same.\n* Parts of speech tagging\n* Create bi-grams or tri-grams And more...\n* However, it is not necessary that you would need to use all these steps. The usage depends on your problem at hand. Sometimes removal of stop words helps while at other times, this might not help.Here is a nice table taken from the blog titled : [All you need to know about Text Preprocessing ](https:\/\/kavita-ganesan.com\/text-preprocessing-tutorial\/#.Xi2BhhczZTY)for Machine Learning & NLP that summarizes how much preprocessing you should be performing on your text data:","17d3cb38":"# Text Data Preprocessing","7f1eb979":"## Building a Text Classification model\n\nNow the data is ready to be fed into a classification model. Let's create a basic claasification model using commonly used classification algorithms and see how our model performs.","ac93b19c":"## Exploring Target Column","a5aeb909":"Disaster tweets are Less in Number as compared to Non Disaster Tweets","9c2b6369":"## Reading Dataset","b7e90090":"## Will Implement It soon\n","3a95789b":"# MIN_DF and MAX_DF parameter\n**MIN_DF** lets you ignore those terms that appear rarely in a corpus. In other words, if **MIN_df** is 2, it means that a word has to occur at least two documents to be considered useful.\n\n**MAX_DF** on the other hand, ignores terms that have a document frequency strictly higher than the given threshold.These will be words which appear a lot of documents.\n\nThis means we can eliminate those words that are either rare or appear too frequently in a corpus.\n\nWhen mentioned in absolute values i.e 1,2, etc, the value means if the word appears in 1 or 2 documents. However, when given in float, eg 30%, it means it appears in 30% of the documents.","067bc713":"# Grid Search Method","90b656d5":"# Exploring the 'Keyword' Column","3c3a28fb":"![Image](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTERUSExIVFhUXGBcXGBgXFxgaGxoeHhcdHhoVHhgeHSggGholIBcWIzEiJSorLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGi0lICYtLzUtKy0rLS81NS0wLS0tLS0wLy0tLTcvLy8tLS0tMi0vLS0vLSstLS8tLy0tLS0tL\/\/AABEIAJ8BPgMBIgACEQEDEQH\/xAAcAAABBAMBAAAAAAAAAAAAAAAGAwQFBwABAgj\/xABREAACAQIDAwcFDAYJAwIHAAABAgMAEQQSIQUxQQYHEyJRYXEyUoGRoRQVIzM1QlNicoKS0XN0sbKzwTRDVGOUorTS8CSTw9PxJURVg4Sj4f\/EABoBAAMBAQEBAAAAAAAAAAAAAAABAgMEBQb\/xAArEQACAgEDAwMDBQEBAAAAAAAAAQIRAwQSMSFBURMi8GFxkRQyobHRBcH\/2gAMAwEAAhEDEQA\/ALxrKjRtB0+OjKjz0u6enTMvpFh20+gnVwGRgyncVIIPpFJSTKcWhSuXQMCCAQRYg6gjiCOyuq4mlVRmZgo7SQB6zTJIvZjmF\/crkkWLQMTfMg3xE8XTTfvUqdSGt1KfdDFB8Sps5+kI3xj6g+cePk+dTDbWJixHwCTxplIcy5xeNrdUIQw6xvrY+SSPnU62LtiExBS0UbR\/BugdbKQBovahBBB7CNxuKj932NF7OvcmVFtK3TX3yh+mj\/Gv50pBi43NkkRjvsrA\/sqzMWpvj8MJI2Qm2YWB4g8GHeDY+inFZQ1Y06doa7NxJkjViLNqrDsZTZh6CDTfb2wcPjI+ixESyLvF7gqe1WGqnwrnplhnbMwVJRnBJAAdbKwue1chA+q1OvfKH6aP8a\/nUxfQc116APFzP7PD5iZ2XzDIAPC4UN7aMU2Fh1hWBYVWNfJVerlPnKwsyv8AWBv30v75Q\/TR\/jX86z3yh+mj\/Gv51RIxMk+H8vNPD5wHwyD6yAfCjvUBt3VbU0Ory7w0E8kVmaMyZg6gWXMAW0OpGbMbjto3ilVhdWDA8QQR6xQFyh5Co0\/SCUqk0hupW+VmBIN8wOUsALfW31z5\/USTxnbolgcpLNdV0ryH6tcXrdQuH22kbrBiMkEtuqC4KOAN6MbcB5LANodCBepD3yh+mj\/Gv510HEOqymvvlD9NH+NfzrPfKH6aP8a\/nQA6pjidnAsXQmOTzl+d3Mu5x469hFPI3DAEEEHcQbg+muqTSY1JrgjRtBo9MQoUfSLfoz48Yz9rT6xpxiNowxlQ8saFvJDOov4XOtOWFUvyw2VJ7slMcTNGXCoUQldw+DFhYEMSLDjeufPllijaVnbo9NDUz2ye3oWrjp+lzQRqr36sjMM0ag71I+e1vm+u2l2cERwN82aSA2zSnWSOwteQ73i+tvTj1blXPJPBvDg4Y5BZ1XUdlySB4gED0VKu4AJJAA1JOgHfetodUpM5slRbhHjz5+ptGBAIIIOoI3HvrdDjYhMMc0EkbwnV4A63XteLX1x7jvWxuGlMPtnDuqus8RVhcHOv7CbjwqzIc4sMY2CGz5TlJ4G2h9dVlyM2btCPFl2jcCzdJ0rMFfTTrWbMb2IIB3VZPvlD9NH+NfzrXvlD9NH+NfzrHJhU5KV8HVg1LxQnBJPd5Iw45o8QGkhkUSJlJWzgsl2FgpzHqs9+r80VIR7XhJt0iqx+a90b8LWPspntnHxdHnWWMtGRIAHUk5T1gNd5XMPTT1sdAwsZYmB4FlPsvVJNNqzOTi0m0PAa3UamyoDrGMn6F2QepCAfTXXuOZfIxBPdIisP8uRvWTVW\/BFR7P8APxj8msBqr+czaeIDph2YKhXOejLAPcka37Lbrka005tNpyri1gDMY3DXUkkAhSQw7N1vT4VzPVpZfTo9Bf8AMk9P6+5cXX0+5aeJ2fFIQ0kUbkbiyKxHgSNKcaAdgFbqEl\/6xig\/oqmzn6cg6xj+5B8rzjp5IObqo823wZF\/1bBz\/RlN0H0xG6Q\/3QOqj5x62615utAVumIymM+y0LF1vG53vGcpPew8l\/vA1G7F5TpNiJMKVYSxBsx+YcrZWKm97XI3jjRBURlGatGs4TxSp9P8I0yzx+UolXzk6r+lCbHxB8Fqu+WPKMY4tgejHQmRLs18zFHDWK6WUlbEHW191WqRVZc4+wUwkb7RhJz9JHeM6pmkkClu0eUTbtrDURy7axs6tHk06k3nXbp9\/sVJtLDfCuJEQsCVPVFtNLDTRdNB2UlHhEbq5Ftw6o0pWWQsxZjckkk9pO813hnsfGt0qRzSdtsRfZiAXyIfuipzm92iuD2jBKAqo7dBJYAdWQgDd2OIz4A0weQAb6YSJcEdo3j9tMlnq6sqC5D7a92YCCcnrlcsn6RDlk\/zKfQRU7VGZXfPOV6DCo9skmIKNcAgAwSWb7rBW+7VJyYFFJVo0BBIIyjeDYjdV487uCEyYKImwbFG57hh5SfTYVAYrYGHdSDGLn5w8rda+beT41x59THDNJ9zu0+mnmx2uzKr9yR\/Rp+EflWe5I\/o0\/CPyp3i4MkjoTfKzLftsbX9lJV1J2rOZpp0XvzOC2yIAN2fEf6mSirauHLxOq+VbMn2lOZD+IChbme+SIft4j\/UyUaU2rVGadOygOdiVZNpCQDRsLh2FxwLSmg73LGd8aX7co\/Ki7nQw7JtJ1I6oiQIe1S8jW9GfL6BQrUp2jRqnRi7MQ\/MT8IpN8EgNjGn4R+VSEcoI30hiWuaYj0FzbfJOC\/QR\/u0S0Nc23yTgv0Ef7tSuNxLFuhiPXIuzbxGp+d3sdco9O4U26IUbZzipmkcwxki3xrj5gI8hT9IR+EG\/EX52rAqYeygKsZjcAcAjq37FNPsJhVjQIo0HbqSSblieJJuSeJNcbSgzwyJ5yMvrUipcejs0UluSXFjgVA84HyXjv1Wf+E1TGAmzxI\/nKresA\/zqH5wPkvHfqs\/8JqtGbVOjzZ7kj+jT8I\/KlFwqMQCins6o0\/\/AJXVdxm2v\/DUlmzsuK3kL+EflTU4SP6NPwj8qkDiRTYmgBEYVBqEUHgco9e6ne1cJGZM\/RpaQCTyRvPlDdwYMPRSNHmH5JIYUWVmLqDqpAtfUruNwDf1msM2aGJpyOjBhnlTUQBgjCG8d4z2xkofWtjRNsbl5tDDEZcQZUHzJ\/hAfv8AxgP3iO41D7VwBglaIm9tx7QdQaZ1tGSkrRhKLi6ZcmzOUOB2yFgnQwYlblVzC506xiktZxpqpAOl7aXoh2byRjwnwmGLGXtkNw44xmw6oNhqBcEDeND56I3EEgggggkEEG4YEagg6girk5BcrJ8fCMK7ZZ0HwswIBeLQB0UbpDfKTay2LDeoqXig5bmuvktZ8sYbFJ7fHYKfdZxhMSZkiU5Z2vZs3HDqQdD5zjhopuSVnYowqhVACgAAAWAA3ADgKjpdlhArYcKjIoUDcrKP6tu7fZt4JvrcgucDjBIpIBVgbMh8pT5p\/MaEEEaVafZmTSq0OqbYzHxxAGRwt91+NI4vHEN0UQzyWuR81B5znh3DefC5HeCwIQl2JeRvKc7\/ALIHzUHADxNzc0X4BRSVyG+xIFOefKoaV2bMALlQcqa9mVVPpNSlJYaEIioNyqFHgBYUrTiqQpy3Ssygfnl+SpP0uH\/jpRxQPzy\/JUn6XD\/x0pklF10N1aArGNSaGqyspxhrW4XoAsfmO2vZ8Rg2OjWxEfsSQD\/9R+8at2vM\/J3aowmMhxV7LG\/X3\/FsCsnjZSWA7VFehY9v4ckAyiNjuWUNET4CQKT6KaIYJc75YR4NkOXJicxYi4VRBLmJ7raW43txoDn5b9U5IbNwLNcDsNra+FEXPJiGkggkDERHEFEAOjgRSFpD2gsoy9y3+dVZYbDvIwRFLMdwFc+TDjyPdNcHXjzZMS2QfV8nDuSSxNySST2k7zXNOcdgJISBKhUndfcfAjQ0lDCz6IrN9kE\/srZSVWn0MXGV011L05nvkiH7eI\/1MlGlAfNZi+i2ZFEySZw+IuqxubXxEhFzbKNCN5os91zN5GHI\/SyKv7mc+ynvRDxy7\/z0Km52Imkx7oqlmSGBwFBJszSK27vWP21XpFtDVwco9pImOkSd40k6KJt9hlu4AzNa5BDeuqz5T4qOTEu8eq6C\/nEDVv8AnZXNjyyeWUNtLydeTFFYoz3W\/n9EVXS9nqp9sTZTYiTIpsALs3YPDiaJ5+RMdupK4PG+U37eyxqsmpx45bZPqTi0uTJHdFdCxOQ+KZdl4GJADK2HjsDuQWsXbuHZxOnaQUYHCCNbAkkm7MfKZjvY9\/sAAA0FB\/IEe5sLhiwIinRBdjdopNwiZuKNuXsa4+eADmt49erOaTr2oyk55lRWdiFVQSSdwA3k0pTXaeBWaF4WvldSpI3i43jvpu66Exq1fBE8k9twSw5I5ATEMpButlBIVtQNCAKbcutpQvs7GRrNGzth5lCh1JuY2A3HT00hye5GQ4PpJZpFk03uiqqKNSdSddN+m6keWjyTbNxjpeLDrh5mUWyvKRGxBII6kXd5TcbDRssXqbFupM6dR6CyP022vx\/5\/wCFLDZ5HlSRL3GQH2JmNaMEXGe\/2I2P7xWmdZVbX5I3R8fP4HZaAfNlbxZU9gVv21nutB5MEf3i7H94D2U0ok5uMBFPtOGOaKOVCspKSIrrcJocrAi4o2L4weR9q\/BDe+TjycifYRF9tr+2jGLlaixIZVbpGXNZQCDqQDqRa9r27DVl7R5LbNjjZ\/e7BkgdUe54esxNlXyeJIHpqL2pzX4KaEKF6GYKB0sWmoAGsfkMulrW0GgIrHLpoZGk0a4tVkxptPkpfauPM8rSkWvuHYBoBTSl9oYKSCaTDygCSJijW3HQEMPqspVh3MKQreMVFUjCUnJ2xUxEamn3JvbBwmMhxV7BHAk7426sg8AOt4oKYGUnQ0lIlwVPEEGmI9WChzlbsnEyhHwkgjlBszZiuZeAJANwDrYjie03dci8aZtn4SVvKeCIt45Bf23qaonFSVMMWR45KS\/kbYDCCJAo372PFm4sSdST2mnNZWVSVENtu2RXSYuPekc69qExP4BGJVj3518K2u3oRpLmgbsmXIL9gk+LY\/ZY1KVpgCLHUUCMVgRcG4oI55fkqT9Lh\/46U\/SfZ5m6GGcQzXItCxQFuPV+KdvEE1Cc62HnXZrq8ySR9JBqUyyaSqd6nI27gq8d+6pUk+GXKEov3KimeHjXNdEX3VoigZqtg1qsoAyRAbg7j+w1d\/IbbBxuzoYCbuoMWIPEKnVufrSLlt9pj82qWw8BdlUcb3J3ADUse4DX0VYnNDtwLjZMKNI5IwYgfOjJzE\/WdXLH7HdUt29pSVLd+B5z0bOhiw+GaKJELYixyqAD8DIb2Gl9N++gjkhtKOGZuk6oZbBtdDe+vYD\/ACFWDz7f0bC\/rP8A4Jap+jLjU4uL7hhyOElJBnyv2yhCJEylvLzFQwAI0sSDqe0dlCs2KlfRpGYdmY2\/DXWI60MTebnjPoOZf3yPu00rLBhjCNI2z5pTlbL45nvkmEdj4jT\/APIkotXGxmQxCRDIBcoGGYDtK3uBQJzU7Ihk2XC7xjPnxA6RbrJYYiSw6RbN7ag9mc22Ng2n7rWSN0SR5VZpHDyAk9RjlJBIYgsb+m9dJxkLzxfKp\/V4P35aC6LedWcybSLmN4z0EKlXABBDSE6gkMNRqCR6jQ8mHVAHlvrqsY0Zu8n5i+08O2olKjWEWyY5F4sRO7PZY2AXOTYZgdF795vbdxozxe0oo0zvIoHcQSe4Diaq7E4hnNzbTQACyqOwDgKRtXHl0Syy3t0duLWvFDYlZ6J5HBcRsvD51BWWEEqexhe3t30\/2ViWVjhpWvIozI5\/rY72z\/bW4DW4kHQMBUfzbfJOC\/V4\/wB2pfauB6VBlbJIhzRva+VrcRxUgkMOIJ3b67kqVHnN27Y9oL2pzn7PgxDYd3kJQlXdULIrDepINyRuOUHX01KYHlC2IW2HiDSKcshZvgo2G8ZxrJ2jINRa5W9V7tLmcmkxTOMVH0Ujl3OVg4LNmcKuoIuTa7aC1721YiyocI2IKy4gWQENHBcEDiskhGjPxCi6qddSAQhzgfJeO\/VZ\/wCE1Mo8NjsKoUTGeJQAGMSsyqBuMaFGbQDrKzE+ZTPlZteSXZeN+DR19zzqXhlDZPgzcujhGQjiozEdlAFF1ldZT\/7VzUmhlFnNT8rQ\/Ym\/coToq5rXC7UiYmwEc5J7AIzc0Ay8cR8JiEj+bGOlb7RuIx7HbxVakaYbHjOQyMLNKTIQd4uAFXxChR4g04xuLSKNpZHVEQFmZjYADeSaI+RT5rwUbzwIBtVrfOghY+OaRb+pV9VQuw+Tz4lWcOqgHKLgm5tf0DUa13ygx5x2LnxjXSFmCoWGoRRZFC8XOrW4Zze1J7O220TqsfwcVwGGhJB0LlreV4WGlqxzObTWPk3wRgmnk4IqaMqzKd6kqfEGx\/ZWt\/jXWIQq7K2rBiD4g6mkpHygt2An1VsuDJ9GehebH5Jwn6L2Zjb2UUULchy8GHw+EmADCCMxsBYMMgLx24OhPpWxHzrEmKxKRoXdgqjeSdKoyFah32nJKSMKiOFNmlkLCMniiFQS5HEjqi1rk3A56GTFayBosPwj3PKO2TiiH6PefnW1SpiNAoCgAACwAFgANwA4CgBj77Kfi0kl+whC\/jayH10nP7okUqFjiBBFyxdhceatgD941KVlTTfLL3JcL58+hS0XI3GJKA0TBUYEyLYjKDcuoBuxsLgAX7qmudmUYjAySqbxQyYdUIOjyNKmd+8Kpyg9ryDhVgbZxhjj6ljK5EcQPF23EjiqgM5+qjUD85Oxmj2Y0UTZkaSC4dtc\/TKc4PEud66dZrjeb4YsMcN1wzr1Grnq2t1WuKKaroMa0RbQ761W5ynVx2equFZSSAwJG8X1FbqcGGjGBwmIaxKSYuMpbyyZA8YPYoJkvfeCQKTdIcVbob9CY4sm55AC3aq71TxOjHuy99N9n444TEQ4kf1MiyHvUaSDxKFx6a0uKzXLnrEkk9t+NJYiS9rbqUVQ5O+C2efJg2DwjA3BxAsRxBglsaqCjHacyy7CwsmZzJFiRA4aR3UZUkCkIzFVJQxnQC2a1CGbuFWQhzhtYpV7Msg+6cp9jk\/dppTzZbjpVBAs10O\/c4K\/zv6KatpoV1Gh31C6SaNH1in8+dS9uZ75Ih+3iP8AUyUYTTKilmIVQLkk2AHaTVdc20sibKhZZgoZ8QEj6LOzH3RJovWBN9T2DjYC9E42bjJMryTQXXURmB2QG+jaTC7gW1NwCNO2qb7IzUe74Ks5zdoL75NIEbOYIcucAALmktJkOpJN7BgLWvbXQMkbMSSesdSSb39NFfOqrjaZErKz9BDqilFtnlsMpZjffrfsoS076SjXUpytV2NrGTwrTKRvp3D5ItWpxp38KYi7OQW1lTZmCjRWll9zxfBpYkXXQux6sY72IvY2udKnfet5tcUwZfoEv0Xg5NjN6bL9XjTDm1jA2VhLKATCjNYAXYjrE996JqozInaWGaJhiIVuVAWSNR8ZGNwA89Lkr23ZfnAiSw86yIrowZWAZSNxBFwRSlQ39Fl7MPK3oilY+xJCfQ5+voATNC3OLs6Jtn4yUp8IuGmsykqxAjY5GKkFk+qbiimoDnA+S8d+qz\/wmoA86aeFKLGxH560jTiKcAWNSaCJ7x6qf7GxDQs2IQrdFKWdSVYvpkIBGhUNfXcD20xc3JNOcZ1VSLiBnb7TAWHoXKPEmpl4Lh093j+wsfnV2mRoMIO8QyH\/AMxqE2ttfE4oLJjp3dPKjhFkVuxgiiwUee1z2caYCNYdXAaTgh3J3v2n6nr7KbTTszFmOYneTSty44Daoc8\/PlG8TiC5F7ADRVGiqOwD\/hPGka6uOz1Vlu\/11aVdCW23bHW0etkk89Bf7S9VvXlB+9W9h7MOKxUGGAv0siq32B1pP8iv7K0ovA4P9Wwf7rWVvaI\/bVo8zvJRo1OPmUq8i5YVIsVjNiZCOBey27FA84iph48DyPv5+f2POe15lwCGIEIJV6Rl3quVrG41UXsCR223E0Lcx3Sy4iTPmkgiXMuYsUSUkAFQeqHK5+8DsvrdbLcWOoqPx20sLhEHSywwId2ZlQHwHE+FaGJI1DbTnmkkMGGkWNkAaSRlzgE+TFa46xF2OugC+cK03KSCSLPhZYp2ZhHGqODdyDYG2qgAFj2KrHhT\/ZeCEMYW5ZiSzud7sTdnPZc8OAsBoBQA7pjtTbGHw4BxE8UQO7pHVb+FzrXOB2oGbopF6KaxOQm+YDe6NukXdqNRcXCk2rz3znySnauJ6W9wwCX3CPKMmXuIN\/EtQBfezJVxMxxKsGiQGOEggqxv8LKCNCLgID9R+DVAc8vyVJ+lw\/8AHShvmBllK4pTfoQYyvYHIbOB35chPo7aJOeX5Kk\/S4f+OlAFNfHj++A\/7gH\/AJB\/mHfvYXrpASQBvuLeN9KtDAbJjjFyitIQM75RdjbU91+6uPPnWD632O\/Bgeo+lcv53KxgiLsFXUk2H\/OyrE2HsZMTsHGpCt3SVmQ8XaJUkG\/cGOcAdj1xyh2QhikeNVWQIdQLXG9l9IFr99uNT3MW18FiBwGJb2wRGq0+ZZvcu3YjU4Xg9vnuU2jAgEbjqK7Xsp\/yj2V7lxmIw1rLHIcn2G68dvBWC+Kmo6ug5x7Dj8uFnwzHy5cPMg+suZJP8pj\/AAmmVdHXX1\/nXNAC+BwrSyLGnlMdO7jf0Wv6KItucmshecyDJcs4CnMLncutjqeNrXqH2LKYnGI3KhP3yRbIPQdTwHoBmNrcrzJHkjQoTa7Eg+gD+ZrkyvK8i9PjudmFYVifqc9izOaPDx+90cqplJecC5LEAYiQWBO69rm1gSSaN6A+avCdLsyKQvIrF8RfI7KumIkHkDqDd2a0WjAyjycTJ4MsbD2ID7a6laXBySqTu\/4\/yylueL5VP6vB+\/LQXRtzpBRtNhMWZ+gh60YCi2aSwyMTrv1zdmlCnRQndKw+1H\/NWP7KTl5Q1Dp0a+fcbpIRurTuTvpyMEDumiPiWX95QK2NmyHyQrfYdG9gYmjfHyP05eC6ub\/ZI97MHJE7QyNBGWK6q5y6l4z1WJ4sLN9aiD3yki0xEXV+liBZPFk8uP8AzKOLULcmOVGHwey8EkpJfoUUoliykAZswuMtu\/WjbZ+NSaJJYzdHFwd3s4GmpxbpPqRLDkjFSlFpPuQW1OX+zsO6xyYlbsAeoGcAHcSyAgA7\/Cp9hHNFbqyRyL3FWVh7QQapflzzb46THyy4eMSxzPnvnRchO8MGINgb6i+lWRyXvgcNDg8T1SihFlveJzfQByBkbWwVgOABarMyS2XO0bnDSsSwGaJzvkjFhr\/eJcBu26t84gNecD5Lx36rP\/CapPamB6VAAcrqc8b2uUcA2a3EWJBHFWI40P8AKvHdLsjH5lyyJhp1kS98rdEToeKkEMDxBG7dQB5\/pXDQNI6ovlMQB6f5UlTrZeL6KaOS1wrAkd24+mxNRK9rrk2jW5XwGuE5HwKBnLOwsSb2HhbsqA27AcNKbG8j3cSkWsCToo4N2t6rb6OINoROmdZFK9twLePZQntGJtpY6PDYZo75Xs7lgpsMzahSewDTtrytLPLPLU7a7nq6uGLHiuFJ9gUNao+Xmlx\/GTCW+3L\/AOlTfZvNlipWMb4iCKRdWQrIzAX8oeSHQ+cCRw0NwPWPHtATWICWVFBZ2NlRQWZj2BRqfRVubO5m4gQcRi5JPqxIsQPcSc7eoijDZux9n7OX4NIYM2hdmGd+4yMczeF6dC3Ff8lObqWNGxeLFmVcy4YWa4BDESncSQtsg0G8k7hZSbFhsGhLw3Fx0Tsq68ej1jPpWtnbIb4qCaXwTIvjmlKBh9m9Mtk+6ihiUwxCJuj62aVrAAqLAoAcrLrdv5UuJDu4\/YfdBik8maOUdkqZWP8A9yPqj\/t15o5R7ZkxeJkxEpOZibC9wi36sY7gPWbnea9L+82b42eeTuz9GvhaILcdzXqmOVPN1O080mAj6XD5yAAVUq1+ui5iM6KdLjjcfNJqiAS5K7WfCYyGeM6hgGHnISAyHxHtseFeqKozkDzcTtiw+LXolhKSGMkF31JTySQEuhvrc5SLcavOgBhtqOEwsZx1F61xcMpG5kK9YPrYZdbnShLEcn0cdLtPD9OGtaT+sgUeTFIEt1Re7OmmZmuAoBokX\/qZs39RC3V7JJVNi3esZuB9e5+YCZigBnsnBwRRKmHREitdRGBlN9cwtvvvvxoT55fkqT9Lh\/46URSbNeImTCkLcktC2kbk7yLX6Jz2gWNzdSTcCHOrtJJdlSrYpIsmGzxvYOt50sSBoVNjZlJU2NjpQBTUbkEEbwQR4g6Va2BxqyroQGAGZLi6m2qkdtVsB0Gp+OO7+7Hb+k\/d8dzEHW99e2uLPp1n71Xc9DBqHp76XfYsblPtZIYWXMDI4KqvEXFsx7AKm+Yn+iYn9aP8CGqdq4uYn+iYn9aP8CGtNNp1hjSMdVqHmdvoRPPhsjLLBjFGjgwSHvF3jPq6UeharOvRnL7Yxxez54VF3y54\/tocyD0lQPAmvOMThgGG4gEV0Mwidg04w2GzEkm0a6s37FHax3AfyBrjC4cubXAAF2Y7lHFj+XE2FLzSB+ogIjXyb7yeLt2sfYLCobvojSKS9zEcViM5FhlVdEXzR\/MneTxNIUu+H7DekKaSSpEttu2XxzPfJEP28R\/qZKNKC+Z75Ih+3iP9TJRpVmRQ\/PF8qn9Xg\/floLo054vlU\/q8H78tBdItcGVhFZWUhl1cnOS0ON2Ts8uWVkgSzJa9iouDcG+4UU4PZT4ZFTDtmRRbo5D6ysgF1JJJ1BHZamnNt8k4L9Xj\/dokqfTju3JdfJXr5Nig3aXYZYXaSs2RgY5PMfQnvU7nHepNOpIwwKsAQRYgi4I4gjiK4xOGSRcrqGHYRx4Edh76Z9BNF8W3Sp5kh6w+zJx8Hv8AaFVbXJFRfHT58\/0R9wywa4c54\/oHbd+jkOq9yNddwGQUO8upFmwOMlhOSZcNKk0cgKt0ZRtGXfdSWZGFwesAbMTU6OVWH6dcMxdJWsMrIRYncpO654WJBuNaa84+CjfZuLdlBZMPOVbUEfBk2uNcptqu4jQ3ojJS4YTxyhW5VZ57IrVOo4wQCRSMigG2poGJ2on5ssSke04XkdUUJNdmIUDqdp0po\/JfEiPpMi7r5b3f1WtfuqR5qjfasF\/MmP8AkqYZIz\/a7KyY5Q\/cqLr9\/Eb4qOab7CEKfCSTKh9DU02hgsRiQLpFAVN0kzM8qHtAXKFPdmYHcQRpU\/WVoYgs0UiPkxs8rIxskiN0UWp0R+jAaNuHWYq3AgnLU7g9lwxEmOJFY72CjMfFt59Jp1IgYFWAIIsQRcEHeCOIqI9zyYb4oNLBxivd4x\/dE+Uo+jJ0+adAtAEzUcOpie6VP8yH9pVx\/wBunWCxiSoHjYMpuLjgRoVIOqsDoQdQd9RHKnGFQgj+OU9KDa4jQAq8rC46oVmAHE+BImXFlw5rz8\/sX2hO00hw0TEWA6aRdCgI0jU8JWHZqqnNoSt5PDwKiKiKFVQFVQLAACwAHZSWz8GsSBFud5LHVmY6s7HixOpNOaogisb8HioZOEgaBvGxkjJ7hllHjIKlajtvwM2HfILulpEHa0bB1HpKgeBNPcNOrorqbqwDKe0EXB9RoA1hoFjRUQAKoCgDgBuFK1lVtyi5xXWVo8MqZVJGdwTmI3kAEWXv1vWWXNHErkdGm0uTUS240WTVdc62LzYJpo0QrDLEFkZQxLNKqnIeAW983nKLbr0vyb5WtjnGGlyxkgklCR0gH9WPMvqSb7gbW3hTnhQLshwAABJhgANAAJ0sAOyiE1lVx4Hlwz08ts17vnUpA668d5vv8e+uKynEOUjW1++rMhvVxcxP9ExP60f4ENU+QOBq1uZfaUMOFxCyypGWxJIzsFB+BiG86X0Om+mhSLUrzlyw2EYNpT4dB1Wbpo+ACSXYm\/BVYSDuCV6HfFIEMmdcgFy1xa3beqs53sJK0MeNtkXMIWWwDCNrlC533MluruGccb0pPshwXd8Fb4qYAdHGeoDctuLt5x7FHAenea4wrbxTespJUhuVsfs1hc0xrbHQemuaYi+OZ75Ih+3iP9TJRpQXzPfJMP28R\/qZKnptpNIxjwoDEEh5W1ijI3jQjpHHmqQBY3K6A0ZlPc74\/wDix7Pc8F\/xy0JTFbaeyiXnUw5j2kVLu56CFizm5JLSAm25RoNFAAtuoSqS1wdWHb7KzL3iuawCgZYHJvnOkwuEgw3uJX6KNY83ui2awtfL0Rt4XNSJ55JP\/p4\/xB\/9Gqyw8DObIpY79OHeTuA7zTkLHH5TdI3moSEHi+9vBfxUnKug1jvqWRh+d2ZyQuzgbak+6bAd5YxWA8aR2nztyWCx4dAdc5Wa9u5WaK1+8qR2dtVziMc7ixNlG5QLKPR2951pDN3D1Uqk+R+1cL8\/4G6c4EImWc7MDSrudsW7EnzjeOxI4E7vQKPNobb928n8Tiuj6MyYbFdTNmtlEieVYXvlvu41Rlx2UeYHGytsL3MjgR9DipJCqPnROll0LglTchm3Dqrl+cDTSjHgJOc6ttgL0hGgNO4MP0bLJKctiGC2u7WNx1eAPa1u69a90onxIIP0jjrfdGoT2nvpowubk3J3knf66nrL6Ir2x+rLBHK3DZA2Yg+bla49lvbUdzaQsu2Ic1tUmYEeSwKHVTxFB2Q0U8200g2hCisq6SsucdW+Q9W+9c2427jY2rLFp44bcO5rm1DzKp9j0DWU1wONElxYq66Mh3r+angRoadV0p2cbTTpmVlZSOHxUclyjq9jY5WBsew2piAXnbM2HwpxOELxuXVZ3jJB6PKeswHEEIM+8A2vao3mTxWInixRnLSRkoFkkJZm6rB0znVlUZdOBY9pq0iK0qgCwFhQAx2K5MQVjdkvGxPEocub0gBvvU\/qOg6mJkXhIokH2lsj+zovbUjUx4Lnzfkyork\/1Ukg+hkZB9g2eMDuCOi+KmpORwoJO4Ak+ivLvKTlNPjZ3nd2AY9VASAqi+UWG8gHUnXU+FUQeopBcWrz9tLAPBK0MgIZTbxHBh2g769B00x2zIZrdLFHJbdnUNbwuNK5dTp\/WSp9Ueh\/z9d+lk7VplR83+z5ZMWssai0V2Ja4W5UgLcA6m\/son51pJH2a8bxZCZIOtnQx6TKbZiQRu4qKOsLhkjULGioo3KoAHqFCnO1hJJdmSJFG8j9JAcsas7ECZCSFUEmwBNVgwelCkydZrP1OTc49OEUXPg5EF2RgO211\/END66QqUg2Rj0N0weNU\/Vw84\/YtL+9+NPxmzcQ\/f7kmVvxIov6b1pcl8+f2Yex96+fOxCVcHMYR7jxV93uk3vu\/o8NV17wSt\/8lj4z34WWRfWEBHqNHfNngmhw8seIukLzGW5jlUSfBouRmZAFQFDcHfu3Agr1Eg9Jy44+n+BnFsWDEP03QokfzCi5Hk\/vSy2a3mi\/1uy2uUHJX3RhpcOMROFdCMrMJBfepLSKz6MAdGB0qfw8yuLoysvAqQR6xSjMBqd1Wl0MpNt0eVF7GBVhcMu+zA2ZfQQR6K6t30Y84XJadNoSvBhppYprTKYYndQzfGKSoNjmBb79DnvDjP7DjP8ADTf7KChllNvTXIFO02XiMxj9zYjOCBl6CXNcgkDLlvfKrG3YCaWOxMb\/AGHGW\/Vpv9lAFq81mBkl2ZErvlgDz9WMkNJ\/1Elw7aFUBuMq77amxK1YUMSooVVCqoAAAAAA3AAbhQNzabHnXZ0WaSfDvmmJjZEAF53KkxumZbix0Ive\/GijLjF3Nh5e4h4T6WBkB9QqjMpvni+VT+rwfvy0F0ec5mycZNtAyDCTEdBEt40klW4aQnrqlvnDQ2PduoKxmBniIWXDzoTuzQyKD6StqRa4EKnuSG0IYZHMul1AVrE211Gmovp6qj02JiyLrgsUR2jDykesLXXvDjP7DjP8NN\/srPJBTi4vuaY8jxyUl2JDbs4xEh6Bxl+j8gsfPA3OT366bqgHUgkEEEbwdCPRT\/3hxn9hxn+Gm\/2U4fCYtV+HwOKZB854JlZfCQrp4G47qmMPTVLguU1llb5IelsNhme+UaDeSbKveWOgqaxPJ2SJDK2HxTKLHKYJEtfzntZh9j2U1n2ZjnAHuLF5Rqqrhpgo7wAvt1J7aanu\/aJw2fuGytGnk2lbzmHwY8FOr+LWHcatHZFjyXxD26zwY1mPac0qgn0Ko8AKrCPY2KZbrg8UwN9Vw8pGhsRcL2g+qrX2Ns+YcmZYDDIJjh8YBEUYSXZ5Sq5LZrm4sLcRVxjTsznNtV2KZrKkPeHGf2HGf4ab\/ZWe8OM\/sOM\/w03+ymIj6KebCBX2pCjqrKUmurAEHqdh0qG94cZ\/YcZ\/hpv9lFPNhsfEptOJ5MLiI0CS3aSGRFF0sBmZQLmmJlsYvkvhyvwUawvoQ0QybuByFbr2i\/hY60lgcECTH0mIilAuV6d5Bbz06TMGT0abiBRBTDbEcfRmSRsmTrCQeUh7R233ZbHNe1jek1XVApJqpAnzk4DEjZ0wjxUshYopRlizOC4ui9Gikkj5utxccaAeZjZuJXaHSLHIkKo4mJUqp06qa72zWNuAB9Nr7ILyTB8UMsoX4FCLKFI6zgXPwpvZhe6jQaEsxFTTsmUWuTKyspLEzqil3NlGpP8Azee6mLkqnnF25K2LaFWZEisBlJBJZQSSRrbUC27SnfNpt6Y4j3M7s6MrFcxJKka6E62Ivp4VMbf5GnGucRm6GRrAKVzXUbi+uj+G4ADW16ccg+S6YdTOWzytmQ6WCWazKO03Xf3cK82OLL6+7tf8HvT1Om\/RenXuqqrv5sLyLixrz\/yn5r8ZBMww0JmgJJQoVzKOCMpINxuuLg24bq9A1lekeCNNrbRjw8LzytljjUsx3+gDiSbADiTVZw89cRls2EkWK\/lhwXA7THa3oDH00R8vOTE2IwE0aYmWR7K6q\/RBWKMGy9VF1001te1eeoomZgii7MQoGmpJsBc6b6APWmExKSoskbBkdQysNxBFwR6DStRHJHZjYbBYfDuQXjjVWtuvvIHcCbeipegDKyg3nE5SSYVEjhNpJMxz2vlUW3X0zEn0WNV5heVGMRiwxMhvvDMWHqN7eIrky6yGOW1o9PTf8vLnx+oml4suHEuZmMSEiNTaVxoT\/dKe3zjwGg1N1kYowoCgAAAAAaAAbgB2Uz2FKj4eJ41yoyKwHEXF9TxN73PGn9dMfJ58+j2+BlPsuJjmKAMfnLdG\/GpDe2gPnPwkyxxWeV4LtmDWIVtMtyBci17FidasmmW1NorCqlgWZ2CIi2u7HcoJso3HUkCoy4lOLjwbabUyw5FPmuzAbm3xM0OHld43OHuCpLKoWwOdhnZRk8nUHeDRDLtrpjlDthoTYmSRSjyAi9o8wyqNbZjc77AaNT+DZjSMJMSQxBBSJdYoyNx1A6Rx5zCwsMoXUmVIoxY3jgophqM6zZHNxq\/BB43DRRRwGIAKk8ZBBvcyExFi2pZj0puSSTfWp2oDlJsyJcPLKIwrIBJdOqeoQ29bXPVp\/wC4pV8jEHwlVXHrGVvWxq7fgxqL4f5+MkKyo73ROvlQq47Y3F\/wvYD8RrWE25DI5jDEON6kG49I09tG5B6cqtdfsSVaIrdJPiFDBSdTuGtUQM5NhYYkt0KKx3tGOjb8aWb20mdlMvxeJnQDgzLKPSZFZv8AMKXx20QjLGFLyMCVQaXA3ksdAB6+wGkxs5pNcQwYfRLcRjx4yfe0+qKnd2Rah0t9CPjx2LYkQmCddeuVeJAbadbM\/SG\/mi2\/UGsgMisHxGGmkca51Mbov2EDBh4hC1t5NEKi2lbo2+Q39o9CLG38NueTo76WmVoSfRIFv6Kj9ow+TFhJCjTZr5CDGqAdeW3zTcgAra7OCbgGxBiZVRGdvJUFm0voBc6cdKgNk7AhcNiJIVWWazdTqMi26kedCDcDUkHVmbham0mJSa4H2ExiwqsUkfQhQFXW8VgLAK\/DgLMAey9SgNRb7GIFkxM6jzWKyg9x6VWa33hQ\/t8YrAwPLHNHkFlyCNhlzEKCoLsAQSDYZV7qiUnBNvg0hBZJKMejf4CLaHKDDQNllnRW80m59IGop1gcfFMueKRXXtUg+g9hqgGGYk5rkm5JvcniSeJqV5L7RkwuKjcEgMyo4voyk2Nx2i9x4VwQ17cuq6HtZP8AixWNuMvci86ysoS5bcvoNnMsbo8krjMEWwAW9sxY6DUHQXNemfPhXLIFUsxAUAkkmwAG8k8BURhI2xLrPICIlN4YyLEnhO44HzVPkjU9YgIOcluVsW1pTHlaNYgshhbXpDm0YsNOjU26u8k6iw1PKAEMZhFkXKw03gjQgjcwO8EdtNMNimRhFMdToklrCTuPBZO7cd44gSVJYrDq6lGAIO8H\/mnjUtd0XGXZ8G551RSzEBQLkncKYYaFpWEsgIUaxxnh\/eMPP7B83x3BPJBsZJjmjxLs6RXLKzAqrDRCBfUg\/nvtVk1njn6quqN9Rh\/Ty22m65X1MphNs0Zi8bNG51JXyWP1kPVPjoe+n9ZWrSZzKTXBG+7ZI\/jo7j6SIFh4mPVl9GYdprMXt\/DRqrPPGFa+U5gb232t2VJVX3L3khPPOJ4FVrqFZbhSCCetrobg+OlZZZThG4qzq00MWXJtyPavJ\/\/Z)","7d5833c1":"# Sources\n1. https:\/\/www.kaggle.com\/parulpandey\/getting-started-with-nlp-a-general-intro\/notebook","19ba8d7e":"## Tokenisation","ab354497":"## Basic EDA","84ec68e2":"Lot of **location** values are Missing","d871fca9":"# Transforming tokens to a vector","cce037f7":"## Stopwords Removal","373b344a":"After the initial preprocessing phase, we need to transform text into a meaningful vector (or array) of numbers. This can be done by a number of tecniques:\n\n#### Bag of Words\nThe bag-of-words is a representation of text that describes the occurrence of words within a document. It involves two things:\n\n1. A vocabulary of known words.\n1. A measure of the presence of known words.\n\nWhy is it is called a \u201cbag\u201d of words? That is because any information about the order or structure of words in the document is discarded and the model is only concerned with whether the known words occur in the document, not where they occur in the document.\n\n![image.png](attachment:image.png)\n\nsource:[Natural Language Processing course on coursera](https:\/\/www.coursera.org\/learn\/language-processing)\n\nWe can do this using scikit-learn's CountVectorizer, where every row will represent a different tweet and every column will represent a different word.\n\nBag of Words - Countvectorizer Features\n\n**Countvectorizer** converts a collection of text documents to a matrix of token counts. It is important to note here that CountVectorizer comes with a lot of options to automatically do preprocessing, tokenization, and stop word removal.However, i did all the process manually above to just get a better understanding. Let's use a vanilla implementation of the countvectorizer without specifying any parameters.","d163c5f4":"## Importing Necessary Libraries"}}