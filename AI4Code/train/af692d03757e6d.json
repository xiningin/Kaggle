{"cell_type":{"ecaf5887":"code","b0784873":"code","21118a71":"code","868f7e81":"code","c1ad3375":"code","93eff64a":"code","9a3a64be":"code","06c025fc":"code","99e06cea":"code","1464485b":"code","1a4057a3":"code","27005b45":"code","437cab6d":"code","464bbcf0":"code","eb29a73d":"markdown","3824abb1":"markdown","69e3fa06":"markdown","687427dc":"markdown","23c2a983":"markdown","6674bc13":"markdown","bba00d8a":"markdown","f442542e":"markdown","4c2ec7cf":"markdown","0583933a":"markdown","bf5d4160":"markdown","0bf76f85":"markdown","129527a1":"markdown","55618d25":"markdown"},"source":{"ecaf5887":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom collections import Counter\nimport math\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\nfrom collections import Counter\nimport math\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory","b0784873":"print(\"Load the dataset ...\")\nfile_path=\"\/kaggle\/input\/uncover\/UNCOVER\/covid_19_canada_open_data_working_group\/public-covid-19-cases-canada.csv\"\ndf_input=pd.read_csv(file_path)\nprint(\"Looking at the input data ...\")\nprint(df_input.head())","21118a71":"# Iterative replacement of elements in the input df to make it more readable \ndf_input=df_input.replace({'has_travel_history': {'t': 'has_traveled', 'f': 'no_travels'}})\ndf_input=df_input.replace({'locally_acquired': {'Close contact': 'Close Contact'}})\ndf_input=df_input.replace({'age': {'61': '60-69', \n                                   '50': '50-59',\n                                   '10-19': '<20',\n                                   '<1': '<20',\n                                   '<10': '<20',\n                                   '2': '<20',\n                                   '<18': '<20'}}) \n\n# For plotting convenience sorting bt age\ndf_input=df_input.sort_values(by='age')\n\nprint(df_input.head())","868f7e81":"def group_two_columns(dataframe,first_feature,second_feature,manipulated_data,title): \n    grouped_data=dataframe.groupby([first_feature,second_feature])[manipulated_data].count().reset_index(name=title)\n    return grouped_data\n\ndf_age_sex=group_two_columns(df_input,'age','sex','report_week','ValueM')\ndf_age_province=group_two_columns(df_input,'age','province','report_week','ValueM')\ndf_sex_province=group_two_columns(df_input,'sex','province','report_week','ValueM')\ndf_age_has_travel_history=group_two_columns(df_input,'age','has_travel_history','report_week','ValueM')\ndf_sex_has_travel_history=group_two_columns(df_input,'sex','has_travel_history','report_week','ValueM')\n\n# See how it looks \nprint(df_age_sex.head())","c1ad3375":"# Clean-up the datasets, basic manipulation on the input data\ndf_cleaned_base=df_input\ndf_cleaned_age=df_cleaned_base[df_cleaned_base.age != 'Not Reported']\ndf_cleaned_sex=df_cleaned_base[df_cleaned_base.sex != 'Not Reported']\ndf_age_sex=df_age_sex[df_age_sex.age != 'Not Reported'] \ndf_age_sex=df_age_sex[df_age_sex.sex != 'Not Reported'] \ndf_age_province=df_age_province[df_age_province.age != 'Not Reported']\ndf_sex_province=df_sex_province[df_sex_province.sex != 'Not Reported']\ndf_age_has_travel_history=df_age_has_travel_history[df_age_has_travel_history.age != 'Not Reported']\ndf_sex_has_travel_history=df_sex_has_travel_history[df_sex_has_travel_history.sex != 'Not Reported']\n# Check for NaNs\ndf_cleaned_locally_acquired=df_cleaned_base[df_cleaned_base.locally_acquired == df_cleaned_base.locally_acquired]\ndf_cleaned_has_travel_history=df_cleaned_base[df_cleaned_base.has_travel_history == df_cleaned_base.has_travel_history]\n\n# See how it looks \nprint(df_age_sex.head())","93eff64a":"# Split the datasets for projection of scatter plots\ndf_sex_province_male=df_sex_province[df_sex_province.sex == 'Male']\ndf_sex_province_female=df_sex_province[df_sex_province.sex == 'Female']\ndf_sex_has_travel_history_male=df_sex_has_travel_history[df_sex_has_travel_history.sex == 'Male']\ndf_sex_has_travel_history_female=df_sex_has_travel_history[df_sex_has_travel_history.sex == 'Female']\ndf_age_sex_male=df_age_sex[df_age_sex.sex == 'Male'] \ndf_age_sex_female=df_age_sex[df_age_sex.sex == 'Female'] \n\n# Look for two examples of datasets \nprint(df_sex_province_female.head(100))\nprint(df_sex_province_male.head(100))\n","9a3a64be":"def compare_dataframes_and_fillup(dataframe_first, dataframe_second, labeling_feature, default_value, additional_columns):\n    for i, row_first in dataframe_first.iterrows():\n        found_label=False\n        label_first=dataframe_first[labeling_feature].ix[i]\n        for j, row_second in dataframe_second.iterrows():\n            label_second=dataframe_second[labeling_feature].ix[j]\n            # Not checking for unmatching cases, we need at least one label to match, the found_label will be true\n            if label_first == label_second: \n                found_label=True\n        if not found_label: \n            dataframe_second=dataframe_second.append({additional_columns[0] : additional_columns[1], labeling_feature : label_first , 'ValueM' : 0} , ignore_index=True)\n    return dataframe_second","06c025fc":"# Now compare splitted dataframes to ensure they have some data content or fill up missing gaps \ndf_sex_province_female=compare_dataframes_and_fillup(df_sex_province_male, df_sex_province_female, 'province', 0, ['sex','Female'])\ndf_sex_province_male=compare_dataframes_and_fillup(df_sex_province_female, df_sex_province_male, 'province', 0, ['sex','Male'])\n\n# Look for complemented datasets \nprint(df_sex_province_female.head(100))\nprint(df_sex_province_male.head(100))","99e06cea":"def make_text_freq_plot(dataframe_feature,color,plot_title,is_log_y,y_axis_name,is_grid,width,legend,tick_size=0):\n    counter=Counter(dataframe_feature)\n    keys_names=counter.keys()\n    keys_counts=counter.values()\n    # Convert to list and evaluate sqrt for error plotting \n    keys_counts_to_list=list(keys_counts)\n    errors=[]\n    for element in keys_counts_to_list:\n        err=math.sqrt(float(element))\n        errors.append(err)\n    indexes=np.arange(len(keys_names))\n    plt.bar(indexes, keys_counts, width, color=color, linewidth=0.5,edgecolor='black',label=legend,yerr=errors)\n    ax=plt.axes()\n    plt.xticks(indexes, keys_names)\n    if is_log_y:\n        plt.yscale('log')        \n    plt.ylabel(y_axis_name)\n    if tick_size != 0: \n        for tick in ax.xaxis.get_major_ticks():\n            tick.label.set_fontsize(tick_size) \n        for tick in ax.yaxis.get_major_ticks():\n            tick.label.set_fontsize(tick_size) \n    if is_grid: \n        plt.grid(True,axis='y')\n    plt.legend()\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.show()\n    plt.savefig(plot_title)\n    plt.close()","1464485b":"# Plots with plain datasets \nmake_text_freq_plot(df_input.health_region,'lavender','health_region.png',False,'counts',True,0.8,'Cases per health region',5.0)\nmake_text_freq_plot(df_input.province,'lavender','province.png',False,'counts',True,0.8,'Cases per province')\n# Re-order df_input \ndf_input=df_input.sort_values(by='date_report')\nmake_text_freq_plot(df_input.date_report,'lavender','date_report.png',False,'counts',True,0.8,'Date of report',7.0)","1a4057a3":"# Plots with cleaned up datasets\nmake_text_freq_plot(df_cleaned_sex.sex,'lavender','sex_cleaned.png',False,'counts',True,0.8,'Cases per sex')\nmake_text_freq_plot(df_cleaned_age.age,'lavender','age_cleaned.png',False,'counts',True,0.8,'Cases per age group')\nmake_text_freq_plot(df_cleaned_has_travel_history.has_travel_history,'lavender','has_travel_hystory_cleaned.png',False,'counts',True,0.8,'Cases for individuals with\/without travel history')\nmake_text_freq_plot(df_cleaned_locally_acquired.locally_acquired,'lavender','locally_acquired_cleaned.png',False,'counts',True,0.8,'Transmission')","27005b45":"def make_scatter_plot(dataframe,first_feature,second_feature,third_feature,z_value,plot_title,scaling_factor): \n    tick_size=8\n    dataframe[z_value]=scaling_factor*dataframe[z_value].astype(float)\n    ax=plt.axes()\n    for tick in ax.xaxis.get_major_ticks():\n        tick.label.set_fontsize(tick_size) \n    for tick in ax.yaxis.get_major_ticks():\n        tick.label.set_fontsize(tick_size) \n    plt.scatter(first_feature,second_feature,100,dataframe.ValueM,alpha=0.5,lw=0.0,cmap=plt.cm.viridis)\n    plt.xticks(rotation=90)\n    plt.colorbar()\n    plt.show()\n    plt.tight_layout()\n    plt.savefig(plot_title)\n    plt.clf()\n    plt.close()\n\n# Scatter plots\nmake_scatter_plot(df_age_sex,df_age_sex.age,df_age_sex.sex,df_age_sex.ValueM,'ValueM',\"2d_age_sex.png\",1)\nmake_scatter_plot(df_age_province,df_age_province.age,df_age_province.province,df_age_province.ValueM,'ValueM',\"2d_age_province.png\",1)\nmake_scatter_plot(df_sex_province,df_sex_province.sex,df_sex_province.province,df_sex_province.ValueM,'ValueM',\"2d_sex_province.png\",1)\nmake_scatter_plot(df_age_has_travel_history,df_age_has_travel_history.age,df_age_has_travel_history.has_travel_history,df_age_has_travel_history.ValueM,'ValueM',\"2d_age_has_travel_history.png\",1)","437cab6d":"# Similar to the previous but handles the data differently \ndef make_text_freq_plot_splitted(dataframe_feature_first,dataframe_feature_second,labels,color,plot_title,is_log_y,y_axis_name,is_grid,width,legend,title_first,title_second,tick_size=0):\n    labels=labels.to_numpy()\n    indexes=np.arange( len(labels) )\n    feature_first=dataframe_feature_first.to_numpy()\n    feature_second=dataframe_feature_second.to_numpy()\n    errors_first=[]\n    errors_second=[]\n    # The first and second lists have some size, cross check\n    if len(feature_first) != len(feature_second): \n        print('len(feature_first) != len(feature_second) this function should not be used')\n    for i in range(len(feature_first)):\n        element_first=feature_first[i]\n        element_second=feature_second[i]\n        errors_first.append( math.sqrt(float(element_first)) )\n        errors_second.append( math.sqrt(float(element_second)) )\n    fig, ax=plt.subplots()\n    # Distancing the histograms for some bin by 0.015*2\n    rects1=ax.bar(indexes -0.015 - width\/2, feature_first, width, label=title_first, color=color[0], linewidth=0.5,edgecolor='black',yerr=errors_first)\n    rects2=ax.bar(indexes +0.015 + width\/2, feature_second, width, label=title_second, color=color[1], linewidth=0.5,edgecolor='black',yerr=errors_second)\n    ax.set_xticks(np.arange(len(labels)))\n    ax.set_xticklabels(labels=labels)\n    plt.ylabel(y_axis_name)\n    if is_grid: \n        plt.grid(True,axis='y')\n    ax.legend()\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.show()\n    plt.savefig(plot_title)\n    plt.close()","464bbcf0":"# Sex splitted histograms\nmake_text_freq_plot_splitted(df_sex_has_travel_history_male.ValueM,df_sex_has_travel_history_female.ValueM,df_sex_has_travel_history_male.has_travel_history,['palegreen','moccasin'],'1d_sex_has_travel_history.png',False,'counts',True,0.35,'Has travel history split by sex','Male','Female')\nmake_text_freq_plot_splitted(df_age_sex_male.ValueM,df_age_sex_female.ValueM,df_age_sex_male.age,['palegreen','moccasin'],'1d_df_age_sex.png',False,'counts',True,0.35,'Age split by sex','Male','Female')\nmake_text_freq_plot_splitted(df_sex_province_male.ValueM,df_sex_province_female.ValueM,df_sex_province_male.province,['palegreen','moccasin'],'1d_sex_province.png',False,'counts',True,0.35,'Province split by sex','Male','Female')","eb29a73d":"As you see from above it turns out that the splitted dataset might have different numbers of labels, 'province' in the case above. In order to plot simultaneously them we need to ensure that they have the same labels. In this example we want to add 'Saskatchewan' in the 'Male' dataset with ValueM=0 as there are no male cases in Saskatchewan. A simple function that can be used is the following  ","3824abb1":"In the example above, the ValueM series contains the counting of cases for a given age group \/ sex. Now some further clean-up and NaNs removal to be used when necessary. For example we are not interested in looking at the sex of people when the corresponding value is 'Not Reported' but we may still want to keep that data entry when looking at the 'province' of a given case.     ","69e3fa06":"After adding the relevant python modules, let's look at the most interesting dataset for this task, that is covid_19_canada_open_data_working_group\/public-covid-19-cases-canada.csv. This dataset contains basic demographic information of COVID-19 cases in Canada. Let's look at it.    ","687427dc":"Some example of plots are then obtained by passing the relevant dataset as input, in order \n1. Cases per 'health region'\n2. Cases per province\n3. New cases vs time\n\nNote that each bar has an uncertainty drawn from Poissonian statistics. ","23c2a983":"Note that the line \ndf_input=df_input.replace({'locally_acquired': {'Close contact': 'Close Contact'}}) \nseem to not work in this NB (not case senstitive I guess) but might work in your environment.  \n\nNow create datasets by grouping columns of the original data. The grouping is done based on what relevant information might be interesting to correlate with each other and counting how many times a given combination occurs.  ","6674bc13":"Now all the basic operations are done and we are ready to have a look at the data. First we want to plot simple charts with the original data. We are going to use the function below which has just some style setting and nothing much more. ","bba00d8a":"The dataset needs a little cleaning and rearrangements meant to uniform the syntax and data categories (e.g. age groups). ","f442542e":"The first plot shows no significant pattern. Te second distributon hints for some anti-correlation in sex of cases between two age groups, 40-49 and 50-59, but this is likely not statistically significative at this point. Finally the last chart shows again no striking information; the cases in Quebec appearing in the last chart are very few because they usually don't report the sex of their cases.   ","4c2ec7cf":"Now split some data in sets with sex being either female or male. These will be then used for bar charts split by sex towards the end. This specific splitting is meant for illustration only, one can certainly do more.    ","0583933a":"Although the data above is not normalised the the actual age population in Canada, the first chart shows that overall the most affected age group is 50-69. Again would be more informative to normalise this data to actual age distribution in Canada. The second plot above shows that sex is not an impacting factor in likelihood of being infected. Finally the last plot shows that most trasmitted cases happen by close contact with pre-existing one.   \n\nNow prepare scatter plots with the datasets grouped by feature couples. First, define a function collecting the relevant plot style, then use it with the relevant dataset as input.  ","bf5d4160":"And the charts we obtain are: \n1. Cases with people having travel history or not split by sex\n2. Cases vs age split by sex\n3. Cases per province split by sex","0bf76f85":"And the results would look like this ","129527a1":"Finally sex-splitted bar charts. The relevant fucntionalities needed, again mostly a collection of style options, are in the function below. ","55618d25":"The plots above show that Quebec, followed by Ontario, has the most cases in Canada as for the 4th of April, Montreal is the Canadian city with most cases, close to 4000. The number of new cases per day show the typical increase rate observed in other countries, with hints of a possible flattening of the increase rate of cases since a few days.  \n\nNow some additional plots with cleaned up dataset. "}}