{"cell_type":{"4b6d6d8f":"code","791768be":"code","eff9ad50":"code","ad139050":"code","6daf8575":"code","4ad7ae42":"code","b7fb7dbb":"code","0b28df73":"code","bd591a9c":"code","a195b565":"code","a444a87a":"code","de7432cd":"code","ff0a8471":"code","d929e067":"code","5611ab6f":"code","e29a5960":"code","9df5c5ce":"code","add64aa6":"code","fa960cff":"code","5b654966":"code","da902c4c":"code","2c337a1b":"code","11a1f088":"code","eed3b2e8":"markdown","a96d9de6":"markdown","b45f5292":"markdown","d4d85984":"markdown","a82cb71a":"markdown"},"source":{"4b6d6d8f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n","791768be":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","eff9ad50":"df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf","ad139050":"df.info()","6daf8575":"\ndf.groupby('YrSold')['SalePrice'].median().plot()\nplt.xlabel('Year Sold')\nplt.ylabel('Median House Price')\nplt.title(\"House Price Per Year\")","4ad7ae42":"def percent_missing_data(tr):\n    missingcount = df.isna().sum().sort_values(ascending = False)\n    missingpercent = 100 * df.isna().sum().sort_values(ascending = False) \/ len(df)\n    \n    missingcount = pd.DataFrame(missingcount[missingcount > 0])\n    missingpercent = pd.DataFrame(missingpercent[missingpercent > 0])\n    \n    missingtable = pd.concat([missingcount,missingpercent], axis = 1)\n    missingtable.columns = [\"missingcount\", \"missingpercent\"]\n    \n    return missingtable","b7fb7dbb":"missingvalues = percent_missing_data(df)\nmissingvalues","0b28df73":"df = df.drop([\"PoolQC\", \"MiscFeature\", \"Alley\", \"Fence\"], axis = 1)","bd591a9c":"df['MasVnrArea']= df['MasVnrArea'].fillna(0)\ndf['MasVnrType']= df['MasVnrType'].fillna('None')","a195b565":"bsmt_str_cols =  ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']\ndf[bsmt_str_cols] = df[bsmt_str_cols].fillna('None')\n\n# basement numeric features ==> fill with 0\nbsmt_num_cols = ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath']\ndf[bsmt_num_cols] = df[bsmt_num_cols].fillna(0)","a444a87a":"df['GarageType']= df['GarageType'].fillna('Attached')    \ndf['GarageCond']= df['GarageCond'].fillna('NA') \ndf['GarageFinish']= df['GarageFinish'].fillna('INC') \ndf['GarageQual']= df['GarageQual'].fillna('NA') \n","de7432cd":"df['GarageYrBlt']= df['GarageYrBlt'].fillna(df.GarageYrBlt.mean()) ","ff0a8471":"df['Electrical'] = df['Electrical'].fillna('SBrkr')\ndf['Electrical'].isna().sum()","d929e067":"df['FireplaceQu']= df['FireplaceQu'].fillna('None')    \ndf['LotFrontage']= df['LotFrontage'].fillna(df.LotFrontage.median())    ","5611ab6f":"missing_values = percent_missing_data(df)\nmissing_values\n#print(\"No missing values\")","e29a5960":"num_feat=['LotFrontage', 'LotArea', '1stFlrSF', 'GrLivArea', 'SalePrice']\n\nfor i in num_feat:\n    df[i]=np.log(df[i])\n","9df5c5ce":"for j in df.select_dtypes(include = \"object\"):\n    labels_ordered=df.groupby([j])['SalePrice'].mean().sort_values().index\n    labels_ordered={k:i for i,k in enumerate(labels_ordered,0)}\n    df[j] =df[j].map(labels_ordered)","add64aa6":"df.head()","fa960cff":"X = df.drop(['Id','SalePrice'],axis=1)\nY = df['SalePrice']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=101)","5b654966":"from sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\nscale.fit(X_train) \nX_train = scale.transform(X_train)\nX_test = scale.transform(X_test)","da902c4c":"from sklearn.linear_model import Ridge\nrid_reg = Ridge(alpha = 8.01)\nrid_reg.fit(X_train, Y_train)\n\nY_pred_ridge = rid_reg.predict(X_test)\n\n\nfrom sklearn.linear_model import Ridge\nrid_reg = Ridge(alpha = 100)\nrid_reg.fit(X_train, Y_train)\n\nY_pred = rid_reg.predict(X_test)\n\n\n# testing the model\nfrom sklearn.metrics import r2_score,mean_absolute_error\n\nridge_mae = mean_absolute_error(Y_test, Y_pred_ridge)\nridge_r2_score= r2_score(Y_test, Y_pred_ridge)\n\nprint(\"MAE for Ridge : \",ridge_mae)\nprint('R2 for Ridge: ',ridge_r2_score)","2c337a1b":"Y_pred.min()","11a1f088":"plt.figure\nsns.regplot(Y_pred_ridge,Y_test);","eed3b2e8":"### Numerical & categorical features","a96d9de6":"#### In this analysis of yearwise distribution of prices, we see that houseprice is falling per year","b45f5292":"### Missing Values handling","d4d85984":"### Model","a82cb71a":"### Ridge Model"}}