{"cell_type":{"c06dee59":"code","7bcfef6a":"code","713f3bf0":"code","5d73f25b":"code","8ac00c12":"code","3de22b35":"code","a93c1674":"code","bd82014d":"code","f388f86d":"code","08bc6ea1":"code","eaac5319":"code","a329c0fb":"code","1d7c8234":"code","53943f1d":"code","19293f04":"code","76bde921":"code","d37837c6":"code","d3c42081":"code","e9553f5a":"code","82226433":"code","c54d6e98":"code","5ba16d99":"code","0f1fbce7":"code","48f63387":"code","63406ae4":"code","d7b7061f":"code","c1b41f19":"code","7ccab333":"code","927e9f85":"code","83857b89":"code","6698f784":"code","46fd7987":"code","570fea81":"code","9ad61c0b":"code","5e499c15":"code","e4c5f355":"code","a55bf4fe":"code","2c38acf0":"code","32eb2467":"code","04d5737d":"code","519438a5":"code","cb0c8bbf":"code","2c7d5842":"code","729b3be6":"code","4f54ddbc":"code","2f6c68ee":"code","3f968a7c":"markdown","19486371":"markdown","40301451":"markdown","bfc480e2":"markdown","a5f24670":"markdown","83760b32":"markdown","90b277df":"markdown","307035de":"markdown","06696388":"markdown","876713ac":"markdown","4e5bf6e8":"markdown","aa81b745":"markdown","e0c9f067":"markdown","2a0acf8a":"markdown","c134fe0d":"markdown","43ece709":"markdown","8d004b4a":"markdown","70915e22":"markdown","e7254d60":"markdown","d4add8ba":"markdown","bb280e6a":"markdown","eb29c1d5":"markdown","e6c8e017":"markdown","953a6563":"markdown","d2ebc2bf":"markdown","824882f1":"markdown"},"source":{"c06dee59":"import numpy as np \nimport pandas as pd \nimport os\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport missingno as msno\n%matplotlib inline\nimport glob\nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly.subplots import make_subplots\nfrom pandas_profiling import ProfileReport","7bcfef6a":"class Preprocessor:\n    def __init__(self, df):\n        self.df = df.copy(deep=True)\n    def missing_values(self):\n        total = self.df.isnull().sum().sort_values(ascending=False)\n        percent = (self.df.isnull().sum()\/self.df.isnull().count()).sort_values(ascending=False)\n        missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n        return missing_data.head(20)\n    def msno_m(self):\n        print(msno.bar(self.df));\n        print(msno.matrix(self.df));\n        print(msno.heatmap(self.df));\n    def desc_data(self, features = None):\n        if features == None:\n            print(self.df.describe())\n        else:\n            for feat in features:\n                print(\"--\"*28)\n                print(self.df[feat].describe())","713f3bf0":"products_data = pd.read_csv(\"..\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv\")\nproducts_data.head()","5d73f25b":"products_data.info()","8ac00c12":"preprocessor_products = Preprocessor(products_data)","3de22b35":"preprocessor_products.missing_values()","a93c1674":"preprocessor_products.msno_m()","bd82014d":"products_data.apply(lambda x: x.fillna(x.mode()[0], axis = 0,inplace=True))","f388f86d":"products_data.isnull().sum()","08bc6ea1":"report_products = ProfileReport(products_data)\nreport_products","eaac5319":"districts_data = pd.read_csv(\"..\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv\")\ndistricts_data.head()","a329c0fb":"districts_data.info()","1d7c8234":"districts_data.drop_duplicates(inplace = True)","53943f1d":"preprocessor_districts = Preprocessor(districts_data)","19293f04":"preprocessor_districts.missing_values()","76bde921":"preprocessor_districts.msno_m()","d37837c6":"report_products = ProfileReport(districts_data)\nreport_products","d3c42081":"path = '..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data' \npath_ext = glob.glob(path + \"\/*.csv\")\nlist_names = []\nfor i in path_ext:\n    df = pd.read_csv(i, index_col=None, header=0)\n    district_id = i.split(\"\/\")[4].split(\".\")[0]\n    df[\"district_id\"] = district_id\n    list_names.append(df)\n    \nengagement_data = pd.concat(list_names)\nengagement_data = engagement_data.reset_index(drop=True)","e9553f5a":"engagement_data.head()","82226433":"engagement_data.info()","c54d6e98":"engagement_data[\"time\"] = pd.to_datetime(engagement_data[\"time\"], format=\"%Y-%m-%d\")\nengagement_data[\"district_id\"] = engagement_data[\"district_id\"].astype(int)","5ba16d99":"print(\"Engagement data contains {} unique products\".format(engagement_data[\"lp_id\"].nunique()))","0f1fbce7":"preprocessor_engagement = Preprocessor(engagement_data)","48f63387":"preprocessor_engagement.missing_values()","63406ae4":"preprocessor_engagement.msno_m()","d7b7061f":"products_data[\"PES-MC\"] = products_data[\"Primary Essential Function\"].apply(lambda x: x.split(' - ')[0])\nproducts_data[\"PES-SC\"] = products_data[\"Primary Essential Function\"].apply(lambda x: x.split(' - ')[1])","c1b41f19":"plt.figure(figsize=(16, 16))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x=\"Primary Essential Function\", data=products_data, order = products_data[\"Primary Essential Function\"].value_counts().index)\nplt.title(\"Distribution of the basic function of the product\",font=\"Serif\", size=20)\nplt.xticks(rotation=90)","7ccab333":"fig, ax = plt.subplots(5, 1, figsize=(16,16))\nsns.countplot(data=products_data, x='PES-MC', palette ='Blues_d', ax=ax[0])\nax[0].set_title('Main Categories in Primary Essential Function')\n\nfor subs in np.arange(len(products_data[\"PES-MC\"].unique())):\n    sns.countplot(data=products_data[products_data[\"PES-MC\"] == products_data[\"PES-MC\"].unique()[subs]],\n                  x='PES-SC',\n                  palette ='Blues_d', ax=ax[subs+1])\n    ax[subs+1].set_title('Sub-Categories of {}'.format(products_data[\"PES-MC\"].unique()[subs]))\n    ax[subs+1].set_xticklabels(ax[subs+1].get_xticklabels(), rotation=90)\n    ax[subs+1].set(xlabel=None)\n    plt.subplots_adjust(top = 1.99, bottom=0.11, hspace=1.5, wspace=0.9)","927e9f85":"#Sector Distribution\nfig = go.Figure(data=[go.Pie(labels=products_data[\"Sector(s)\"].value_counts().index,\n                             values=products_data[\"Sector(s)\"].value_counts().values, hole=.3)])\nfig.show()","83857b89":"plt.figure(figsize=(16, 16))\nsns.set(style=\"darkgrid\")\nsns.countplot(y=\"state\",data=districts_data,order=districts_data.state.value_counts().index,\n              palette=\"Spectral\",linewidth=1, hue =\"locale\")\nplt.title(\"State and Types of Areas Distribution\", size=18)\nplt.show()","6698f784":"fig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=districts_data.state.value_counts().index, values=districts_data.state.value_counts().values, name=\"States\",\n                    )\n              ,1, 1)\nfig.add_trace(go.Pie(labels=districts_data.locale.value_counts().index, values=districts_data.locale.value_counts().values, name=\"Locale\"),\n              1, 2)\n\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=\"State and Types of Areas Distribution\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='State', x=0.18, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Locale', x=0.82, y=0.5, font_size=20, showarrow=False)])\nfig.show()","46fd7987":"ratio_names = districts_data.drop([\"district_id\", 'state', 'locale'], axis = 1).columns","570fea81":"for ratios in ratio_names:\n    fig = px.bar(districts_data, x= districts_data[ratios].value_counts().index,\n                 y= districts_data[ratios].value_counts().values,\n                 barmode='group', title = ratios)\n    fig.show()","9ad61c0b":"#The df_usa data contains the state and the abbreviation of that state as a variable.\ndf_usa = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2011_us_ag_exports.csv')\nus_states = {key: value for key, value in zip(df_usa[\"state\"], df_usa[\"code\"])}\ndf_copy = districts_data.copy()\n\ndf_copy['state_code'] = df_copy['state'].replace(us_states)\nstate_num = df_copy['state_code'].value_counts().to_frame().reset_index(drop=False)\nstate_num.columns = ['state_code', 'count']\n\nfig = go.Figure(data=go.Choropleth(\n    locations= state_num['state_code'], # Spatial coordinates\n    z = state_num[\"count\"], # Data to be color-coded\n    locationmode = 'USA-states', # set of locations match entries in `locations`\n    colorscale = 'sunset',\n    colorbar_title = \"School Districts\",\n))\n\nfig.update_layout(\n    title_text = 'School Districts Available in each USA States',\n    geo_scope='usa', # limite map scope to USA\n)\n\nfig.show()","5e499c15":"def interval_pct(ratio):\n    if ratio == '[0, 0.2[':\n        return 0.1\n    elif ratio == '[0.2, 0.4[':\n        return 0.3\n    elif ratio == '[0.4, 0.6[':\n        return 0.5\n    elif ratio == '[0.6, 0.8[':\n        return 0.7\n    elif ratio == '[0.8, 1[':\n        return 0.9\n    else:\n        return np.nan\n\ndef interval_total_raw(ratio):\n    if ratio == '[4000, 6000[':\n        return 5000\n    elif ratio == '[6000, 8000[':\n        return 7000\n    elif ratio == '[8000, 10000[':\n        return 9000\n    elif ratio == '[10000, 12000[':\n        return 11000\n    elif ratio ==  '[12000, 14000[':\n        return 13000\n    elif ratio ==  '[14000, 16000[':\n        return 15000\n    elif ratio == '[16000, 18000[':\n        return 17000\n    elif ratio ==  '[18000, 20000[':\n        return 19000\n    elif ratio ==  '[20000, 22000[':\n        return 21000\n    elif ratio ==  '[22000, 24000[':\n        return 21000\n    else: \n        return np.nan\n\ndf_copy['pct_black_hispanic_num'] = df_copy['pct_black\/hispanic'].apply(lambda x: interval_pct(x))\ndf_copy['pct_free_reduced_num'] = df_copy['pct_free\/reduced'].apply(lambda x: interval_pct(x))\ndf_copy['pp_total_raw_num'] = df_copy['pp_total_raw'].apply(lambda x: interval_total_raw(x))","e4c5f355":"mean_black_hispanic = df_copy.groupby('state_code')[\"pct_black_hispanic_num\"].mean().to_frame().reset_index(drop=False)\nmean_free_reduced = df_copy.groupby('state_code')[\"pct_free_reduced_num\"].mean().to_frame().reset_index(drop=False)\nmean_total_raw = df_copy.groupby('state_code')[\"pp_total_raw_num\"].mean().to_frame().reset_index(drop=False)\n\nratio_dataframe = pd.merge(mean_black_hispanic,mean_free_reduced)\nratio_dataframe = pd.merge(ratio_dataframe,mean_total_raw)\n\nfor i in ratio_dataframe.drop(\"state_code\", axis =1):\n    fig = go.Figure(data=go.Choropleth(\n        locations= ratio_dataframe['state_code'], # Spatial coordinates\n        z = ratio_dataframe[i], # Data to be color-coded\n        locationmode = 'USA-states', # set of locations match entries in `locations`\n        colorscale = 'sunset',\n    ))\n\n    fig.update_layout(\n        title_text = f'Mean {i} in each USA States',\n        geo_scope='usa', # limite map scope to USA\n    )\n\n    fig.show()","a55bf4fe":"product_engagement = pd.merge(products_data, engagement_data, left_on='LP ID', right_on='lp_id')\ndistrict_engagement = pd.merge(df_copy, engagement_data, left_on='district_id', right_on='district_id')","2c38acf0":"# Monthly change in access to digital platforms and student engagements.\ndigital_learning = product_engagement[(product_engagement[\"PES-SC\"] == \"Digital Learning Platforms\") | (product_engagement[\"PES-SC\"] == \"Virtual Classroom\") | (product_engagement[\"PES-SC\"] == \"Online Course Providers & Technical Skills Development\")]\ndigital_learning.head()","32eb2467":"pct_acc_time = digital_learning.groupby(['time',\"PES-SC\"])[\"pct_access\"].mean().to_frame().reset_index(drop=False)\neng_time = digital_learning.groupby(['time',\"PES-SC\"])[\"engagement_index\"].mean().to_frame().reset_index(drop=False)","04d5737d":"fig = px.line(pct_acc_time, x= pct_acc_time.time, y=pct_acc_time.pct_access,\n              color=pct_acc_time[\"PES-SC\"])\nfig.show()","519438a5":"fig = px.line(eng_time, x= eng_time.time, y=eng_time.engagement_index,\n              color=eng_time[\"PES-SC\"])\nfig.show()","cb0c8bbf":"mean_pct_access = district_engagement.groupby('state_code')[\"pct_access\"].mean().to_frame().reset_index(drop=False)\n\nfig = go.Figure(data=go.Choropleth(\n        locations= mean_pct_access['state_code'], # Spatial coordinates\n        z = mean_pct_access[\"pct_access\"], # Data to be color-coded\n        locationmode = 'USA-states', # set of locations match entries in `locations`\n        colorscale = 'sunset',\n))\n\nfig.update_layout(\n    title_text = \"Percentage of the students access to learning platforms in each state\",\n    geo_scope='usa', # limite map scope to USA\n)\n\nfig.show()","2c7d5842":"mean_eng_index = district_engagement.groupby('state_code')[\"engagement_index\"].mean().to_frame().reset_index(drop=False)\n\nfig = go.Figure(data=go.Choropleth(\n        locations= mean_eng_index['state_code'], # Spatial coordinates\n        z = mean_eng_index[\"engagement_index\"], # Data to be color-coded\n        locationmode = 'USA-states', # set of locations match entries in `locations`\n        colorscale = 'sunset',\n))\n\nfig.update_layout(\n    title_text = \"Number of the students engage learning platforms in each state\",\n    geo_scope='usa', # limite map scope to USA\n)\n\nfig.show()","729b3be6":"product_id_pct = product_engagement.groupby([\"Product Name\", \"PES-SC\"])[\"pct_access\"].mean().sort_values(ascending=False).to_frame().reset_index(drop=False)\nproduct_id_eng = product_engagement.groupby([\"Product Name\", \"PES-SC\"])[\"engagement_index\"].mean().sort_values(ascending=False).to_frame().reset_index(drop=False)","4f54ddbc":"learning_type = [\"Virtual Classroom\", \"Digital Learning Platforms\", \"Content Creation & Curation\", \n                \"School Management Software\",\"Sites, Resources & Reference\", \"Learning Management Systems (LMS)\",\n                \"Online Course Providers & Technical Skills Development\", \"Classroom Engagement & Instruction\"]","2f6c68ee":"fig = make_subplots(rows=8, cols=2, subplot_titles=(f'Top 4 product type of {learning_type[0]}',\n                                                    f'Top 4 product type of {learning_type[0]}',\n                                                    f'Top 4 product type of {learning_type[1]}',\n                                                    f'Top 4 product type of {learning_type[1]}',\n                                                    f'Top 4 product type of {learning_type[2]}',\n                                                    f'Top 4 product type of {learning_type[2]}',\n                                                    f'Top 4 product type of {learning_type[3]}',\n                                                    f'Top 4 product type of {learning_type[3]}',\n                                                    f'Top 4 product type of {learning_type[4]}',\n                                                    f'Top 4 product type of {learning_type[4]}',\n                                                    f'Top 4 product type of {learning_type[5]}',\n                                                    f'Top 4 product type of {learning_type[5]}',\n                                                    f'Top 4 product type of {learning_type[6]}',\n                                                    f'Top 4 product type of {learning_type[6]}',\n                                                    f'Top 4 product type of {learning_type[7]}',\n                                                    f'Top 4 product type of {learning_type[7]}',\n                                                   ))\nfig.add_trace(go.Bar(\ny=product_id_pct[product_id_pct[\"PES-SC\"] == learning_type[0]][\"Product Name\"][:4].value_counts().index,\nx=product_id_pct[product_id_pct[\"PES-SC\"] == learning_type[0]][\"pct_access\"][:4].values,\nname='pct_access',\norientation='h',\nmarker=dict(\n    color='rgba(63, 172, 235, 0.6)',\n    line=dict(color='rgba(63, 172, 235, 1.0)', width=3)\n    )\n),row = 1, col = 1)\n\n\nfig.add_trace(go.Bar(\ny=product_id_eng[product_id_eng[\"PES-SC\"] == learning_type[0]][\"Product Name\"][:4].value_counts().index,\nx=product_id_eng[product_id_eng[\"PES-SC\"] == learning_type[0]][\"engagement_index\"][:4].values,\nname='engagement_index',\norientation='h',\nmarker=dict(\n    color='rgba(230, 73, 64, 0.6)',\n    line=dict(color='rgba(230, 73, 64, 1.0)', width=3)\n    )\n),row = 1, col = 2)\n\nfig.add_trace(go.Bar(\ny=product_id_pct[product_id_pct[\"PES-SC\"] == learning_type[1]][\"Product Name\"][:4].value_counts().index,\nx=product_id_pct[product_id_pct[\"PES-SC\"] == learning_type[1]][\"pct_access\"][:4].values,\nname='pct_access',\norientation='h',\nmarker=dict(\n    color='rgba(63, 172, 235, 0.6)',\n    line=dict(color='rgba(63, 172, 235, 1.0)', width=3)\n    )\n),row = 2, col = 1)\n\n\nfig.add_trace(go.Bar(\ny=product_id_eng[product_id_eng[\"PES-SC\"] == learning_type[1]][\"Product Name\"][:4].value_counts().index,\nx=product_id_eng[product_id_eng[\"PES-SC\"] == learning_type[1]][\"engagement_index\"][:4].values,\nname='engagement_index',\norientation='h',\nmarker=dict(\n    color='rgba(230, 73, 64, 0.6)',\n    line=dict(color='rgba(230, 73, 64, 1.0)', width=3)\n    )\n),row = 2, col = 2)\n\n\n\n\n\nfig.add_trace(go.Bar(\ny=product_id_pct[product_id_pct[\"PES-SC\"] == learning_type[2]][\"Product Name\"][:4].value_counts().index,\nx=product_id_pct[product_id_pct[\"PES-SC\"] == learning_type[2]][\"pct_access\"][:4].values,\nname='pct_access',\norientation='h',\nmarker=dict(\n    color='rgba(63, 172, 235, 0.6)',\n    line=dict(color='rgba(63, 172, 235, 1.0)', width=3)\n    )\n),row = 3, col = 1)\n\n\nfig.add_trace(go.Bar(\ny=product_id_eng[product_id_eng[\"PES-SC\"] == learning_type[2]][\"Product Name\"][:4].value_counts().index,\nx=product_id_eng[product_id_eng[\"PES-SC\"] == learning_type[2]][\"engagement_index\"][:4].values,\nname='engagement_index',\norientation='h',\nmarker=dict(\n    color='rgba(230, 73, 64, 0.6)',\n    line=dict(color='rgba(230, 73, 64, 1.0)', width=3)\n    )\n),row = 3, col = 2)\n\n\n\nfig.add_trace(go.Bar(\ny=product_id_pct[product_id_pct[\"PES-SC\"] == learning_type[3]][\"Product Name\"][:4].value_counts().index,\nx=product_id_pct[product_id_pct[\"PES-SC\"] == learning_type[3]][\"pct_access\"][:4].values,\nname='pct_access',\norientation='h',\nmarker=dict(\n    color='rgba(63, 172, 235, 0.6)',\n    line=dict(color='rgba(63, 172, 235, 1.0)', width=3)\n    )\n),row = 4, col = 1)\n\n\nfig.add_trace(go.Bar(\ny=product_id_eng[product_id_eng[\"PES-SC\"] == learning_type[3]][\"Product Name\"][:4].value_counts().index,\nx=product_id_eng[product_id_eng[\"PES-SC\"] == learning_type[3]][\"engagement_index\"][:4].values,\nname='engagement_index',\norientation='h',\nmarker=dict(\n    color='rgba(230, 73, 64, 0.6)',\n    line=dict(color='rgba(230, 73, 64, 1.0)', width=3)\n    )\n),row = 4, col = 2)\n\n\nfig.add_trace(go.Bar(\ny=product_id_pct[product_id_pct[\"PES-SC\"] == learning_type[4]][\"Product Name\"][:4].value_counts().index,\nx=product_id_pct[product_id_pct[\"PES-SC\"] == learning_type[4]][\"pct_access\"][:4].values,\nname='pct_access',\norientation='h',\nmarker=dict(\n    color='rgba(63, 172, 235, 0.6)',\n    line=dict(color='rgba(63, 172, 235, 1.0)', width=3)\n    )\n),row = 5, col = 1)\n\n\nfig.add_trace(go.Bar(\ny=product_id_eng[product_id_eng[\"PES-SC\"] == learning_type[4]][\"Product Name\"][:4].value_counts().index,\nx=product_id_eng[product_id_eng[\"PES-SC\"] == learning_type[4]][\"engagement_index\"][:4].values,\nname='engagement_index',\norientation='h',\nmarker=dict(\n    color='rgba(230, 73, 64, 0.6)',\n    line=dict(color='rgba(230, 73, 64, 1.0)', width=3)\n    )\n),row = 5, col = 2)\n\n\nfig.add_trace(go.Bar(\ny=product_id_pct[product_id_pct[\"PES-SC\"] == learning_type[5]][\"Product Name\"][:4].value_counts().index,\nx=product_id_pct[product_id_pct[\"PES-SC\"] == learning_type[5]][\"pct_access\"][:4].values,\nname='pct_access',\norientation='h',\nmarker=dict(\n    color='rgba(63, 172, 235, 0.6)',\n    line=dict(color='rgba(63, 172, 235, 1.0)', width=3)\n    )\n),row = 6, col = 1)\n\n\nfig.add_trace(go.Bar(\ny=product_id_eng[product_id_eng[\"PES-SC\"] == learning_type[5]][\"Product Name\"][:4].value_counts().index,\nx=product_id_eng[product_id_eng[\"PES-SC\"] == learning_type[5]][\"engagement_index\"][:4].values,\nname='engagement_index',\norientation='h',\nmarker=dict(\n    color='rgba(230, 73, 64, 0.6)',\n    line=dict(color='rgba(230, 73, 64, 1.0)', width=3)\n    )\n),row = 6, col = 2)\n\n\nfig.add_trace(go.Bar(\ny=product_id_pct[product_id_pct[\"PES-SC\"] == learning_type[6]][\"Product Name\"][:4].value_counts().index,\nx=product_id_pct[product_id_pct[\"PES-SC\"] == learning_type[6]][\"pct_access\"][:4].values,\nname='pct_access',\norientation='h',\nmarker=dict(\n    color='rgba(63, 172, 235, 0.6)',\n    line=dict(color='rgba(63, 172, 235, 1.0)', width=3)\n    )\n),row = 7, col = 1)\n\n\nfig.add_trace(go.Bar(\ny=product_id_eng[product_id_eng[\"PES-SC\"] == learning_type[6]][\"Product Name\"][:4].value_counts().index,\nx=product_id_eng[product_id_eng[\"PES-SC\"] == learning_type[6]][\"engagement_index\"][:4].values,\nname='engagement_index',\norientation='h',\nmarker=dict(\n    color='rgba(230, 73, 64, 0.6)',\n    line=dict(color='rgba(230, 73, 64, 1.0)', width=3)\n    )\n),row = 7, col = 2)\n\n\nfig.add_trace(go.Bar(\ny=product_id_pct[product_id_pct[\"PES-SC\"] == learning_type[7]][\"Product Name\"][:4].value_counts().index,\nx=product_id_pct[product_id_pct[\"PES-SC\"] == learning_type[7]][\"pct_access\"][:4].values,\nname='pct_access',\norientation='h',\nmarker=dict(\n    color='rgba(63, 172, 235, 0.6)',\n    line=dict(color='rgba(63, 172, 235, 1.0)', width=3)\n    )\n),row = 8, col = 1)\n\n\nfig.add_trace(go.Bar(\ny=product_id_eng[product_id_eng[\"PES-SC\"] == learning_type[7]][\"Product Name\"][:4].value_counts().index,\nx=product_id_eng[product_id_eng[\"PES-SC\"] == learning_type[7]][\"engagement_index\"][:4].values,\nname='engagement_index',\norientation='h',\nmarker=dict(\n    color='rgba(230, 73, 64, 0.6)',\n    line=dict(color='rgba(230, 73, 64, 1.0)', width=3)\n    )\n),row = 8, col = 2)\n\nfig.update_layout(height=1800, width=1800)\nfig.show()","3f968a7c":"### Engagement Data","19486371":"<img src=\"https:\/\/www.uia.no\/var\/uia\/storage\/images\/events\/digital-learning-in-nordic-higher-education-before-and-after-covid-19\/1997143-10-eng-GB\/digital-learning-in-nordic-higher-education-before-and-after-covid-19_fullwidth.jpg\">","40301451":"### Districts Data","bfc480e2":"# Load Data","a5f24670":"## Engagement data","83760b32":"The district file districts_info.csv includes information about the characteristics of school districts, including data from [National Center for Education Statistics (NCES)](https:\/\/nces.ed.gov\/), [The Federal Communications Commission (FCC)](https:\/\/www.fcc.gov\/), and [Edunomics Lab](https:\/\/edunomicslab.org\/).\n\nIn this data set, we removed the identifiable information about the school districts. We also used an open source tool [ARX](https:\/\/arx.deidentifier.org\/) (Prasser et al. 2020) to transform several data fields and reduce the risks of re-identification. For data generalization purposes some data points are released with a range where the actual value falls under. Additionally, there are many missing data marked as 'NaN' indicating that the data was suppressed to maximize anonymization of the dataset.","90b277df":"Before we proceed, we will merge product, district, and engagement data to draw better **insight** from data.","307035de":"Now we will take a look at the mean of the ratios per state. ","06696388":"### Products_data ","876713ac":"> - The product file ```products_info.csv``` includes information about the characteristics of the top 372 products with most users in 2020. The categories listed in this file are part of LearnPlatform's product taxonomy. Some products may not have labels due to being duplicate, lack of accurate url or other reasons.","4e5bf6e8":"# Importing Libraries","aa81b745":"What is the state of digital learning in 2020? And how does the engagement of digital learning relate to factors such as district demographics, broadband access, and state\/national level policies and events?","e0c9f067":"We include three basic sets of files to help you get started. The engagement data are based on LearnPlatform\u2019s Student Chrome Extension. The extension collects page load events of over 10K education technology products in our product library, including websites, apps, web apps, software programs, extensions, ebooks, hardwares, and services used in educational institutions. The engagement data have been aggregated at school district level, and each file represents data from one school district. The product file includes information about the characteristics of the top 372 products with most users in 2020. The district file includes information about the characteristics of school districts, including data from [National Center for Education Statistics (NCES)](https:\/\/nces.ed.gov\/), [The Federal Communications Commission (FCC)](https:\/\/www.fcc.gov\/), and [Edunomics Lab](https:\/\/edunomicslab.org\/).","2a0acf8a":"As we can see from countplot, the most common main category is LC(Learning & Curriculum). In addition, digital platforms, sites, and resources are the most common way of learning among people.","c134fe0d":"## District information data","43ece709":"Since the rate of missing values in our data is not very high **(0.05)** and our variables are categorical, we can replace the missing values with mod values. However, we need to analyze whether the missing values are completely random or not.","8d004b4a":"Deleting missing data (total of 5378409 rows) will cause **information loss** for variables in other rows. Therefore, we will leave it as it is.","70915e22":"The engagement data are aggregated at school district level, and each file in the folder engagement_data represents data from one school district. The 4-digit file name represents district_id which can be used to link to district information in district_info.csv. The lp_id can be used to link to product information in product_info.csv.","e7254d60":"# Data Visualization","d4add8ba":"## Product information data","bb280e6a":"According to the nullity matrix, the correlations between the variables are not **completely random**. Therefore, we will do the analysis together with the missing values.","eb29c1d5":"Those viewing these charts should remember that there are summer holidays in July and August and therefore there are no classes to attend. According to the pct_access graph at least one page-load event of a given product and on a given day by students increases over time. Although students have access, their interaction is not the same for virtual classrooms.  However, online courses for students appear to be in trend. During **Covid-19** , it cannot be ignored that online education has increased over time. The low intensity of engagement in virtual classes may indicate that students physically go to school and attend classes.","e6c8e017":"School Districts in USA","953a6563":"According to the nullity matrix, there is a strong nullity correlation between Sector(s) and Primary Essential Function variables. This means that if Sector variable has a missing value in one row Primary Essential Function variable will %100 has a missing value in the same row. Normally, if the missing value ratio was higher than %20 any procedure would affect our analysis, but in our case replacing with mode values or dropping null values directly would not change the result of our analysis.","d2ebc2bf":"# Data Description","824882f1":"Product names and pct_access of specific products."}}