{"cell_type":{"2d008f4c":"code","1fb19653":"code","5f45f789":"code","d9e81b36":"code","ca3cfae8":"code","219c5716":"code","b93619cd":"code","c5907e85":"code","f3eab6d8":"code","a7878b41":"code","9f464075":"code","eb1175a0":"code","2acb98c8":"code","bd36f8a1":"code","fe95ce15":"code","f159dd09":"code","874bd484":"code","2f7b4246":"code","bfacce20":"code","ec130100":"code","478fb401":"code","52f86cfc":"code","bfd9b565":"code","ccbb2c31":"code","cce0a6d6":"code","1a2ee2bb":"code","6ef758cd":"code","f9b6d03a":"code","d227007d":"code","06327add":"code","0462fe51":"code","72426645":"code","7f9429ea":"code","1fe406c0":"code","bdd9505b":"code","f9cb711e":"code","56e946c9":"code","6acf0917":"code","d6577cc8":"code","b26fb266":"code","918e2a4e":"code","b22e2260":"code","c44b927a":"code","ce4f7846":"code","971e115a":"code","a3c6b8dc":"code","f1100210":"code","4e18746e":"code","c6fb3c04":"code","a8a4ad53":"code","57c90a75":"code","6f297c46":"code","efda0ddb":"code","a020e276":"code","b368b646":"code","ebaa8186":"code","48c9b7fc":"code","df21df88":"code","f621807a":"code","77ad86b2":"code","58fe01a6":"markdown","724f2443":"markdown","6af65e1f":"markdown","b42cfc70":"markdown","398bbb55":"markdown","9b6430ef":"markdown","d5de5590":"markdown","4e140f58":"markdown","7ba197a9":"markdown","ba3b0d59":"markdown","f6b780e8":"markdown","05f45397":"markdown","1a7a0173":"markdown"},"source":{"2d008f4c":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, BatchNormalization\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nSEED = 2\nfrom tensorflow.random import set_seed\nfrom numpy.random import seed\nseed(SEED)\nset_seed(SEED)\n\nprint(f'Tensorflow version: {tf.__version__}')","1fb19653":"titanic_train = pd.read_csv('..\/input\/titanic\/train.csv')\ntitanic_test = pd.read_csv('..\/input\/titanic\/test.csv')\ngender_df = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\n\ntitanic_train.head()","5f45f789":"titanic_train.info()","d9e81b36":"titanic_train.describe()","ca3cfae8":"pd.isna(titanic_train).sum()","219c5716":"fig = plt.figure(figsize = (10,6))\nax=sns.countplot(data=titanic_train, x='Survived', palette = [\"red\",\"green\"])\nax.set_xticklabels(['Dead','Survived'])\nax.set_ylabel('Number of people')\nax.set_xlabel(\"\")\nax.set_title('Survival Rate')","b93619cd":"f,ax=plt.subplots(1,2,figsize=(20,8))\n\nsns.countplot(ax=ax[0], data=titanic_train, x=\"Sex\")\nax[0].set_xticklabels(['Male', 'Female'])\nax[0].set_ylabel('Number of people')\nax[0].set_xlabel(\"\")\nax[0].set_title('Number of Passengers by Sex')\n\nsns.countplot(ax=ax[1], data=titanic_train, x=\"Sex\", hue=\"Survived\", palette = [\"red\",\"green\"])\nax[1].set_xticklabels(['Male', 'Female'])\nax[1].set_ylabel('Number of people')\nax[1].set_xlabel(\"\")\nax[1].legend(['Dead','Survived']) \nax[1].set_title('Survival Rate by Sex')","c5907e85":"fig = plt.figure(figsize = (10,6))\nax=sns.countplot(data=titanic_train, x=\"Parch\", hue=\"Survived\", palette = [\"red\",\"green\"])\nax.set_ylabel('Number of people')\nax.set_xlabel(\"\")\nax.legend(['Dead','Survived'], loc=\"upper right\") \nax.set_title('Survival Rate by Parents \/ Children Aboard')","f3eab6d8":"fig = plt.figure(figsize = (10,6))\nax=sns.countplot(data=titanic_train, x=\"SibSp\", hue=\"Survived\", palette = [\"red\",\"green\"], order=[1, 2, 3, 4, 5, 6, 7, 8])\nax.set_xticklabels(['1 sibling ', '2 siblings ', '3 siblings ', '4 siblings ', '5 siblings ', '6 siblings ', '7 siblings ', '8 siblings '])\nax.set_ylabel('Number of people')\nax.set_xlabel(\"\")\nax.legend(['Dead','Survived'], loc=\"upper right\") \nax.set_title('Survival Rate by Number of Siblings')","a7878b41":"g=sns.displot(data=titanic_train, x=\"Age\", hue='Survived', col=\"Survived\", bins=20, multiple=\"dodge\", aspect=1.5, palette = [\"red\",\"green\"])\n\nfor ax, title in zip(g.axes.flat, ['Dead','Survived']):\n    ax.set_title(title)\n\n# g.set_titles(col_template=\"{col_name} patrons\", row_template=\"{row_name} fgf\")\n\n# g.set(xlim=(0, 60), ylim=(0, 12), xticks=[10, 30, 50], yticks=[2, 6, 10])\ng.set_axis_labels(\"Age\", \"Number of people\")\n\n# g._legend.set_title(\"Survived\")\nfor t, l in zip(g._legend.texts, ['Dead','Survived']): t.set_text(l)","9f464075":"g=sns.displot(data=titanic_train, x=\"Fare\", hue='Survived', col=\"Survived\", bins=20, multiple=\"dodge\", aspect=1.5, palette = [\"red\",\"green\"])\n\nfor ax, title in zip(g.axes.flat, ['Dead','Survived']):\n    ax.set_title(title)\n\ng.set_axis_labels(\"Fare\", \"Number of people\")\n\nfor t, l in zip(g._legend.texts, ['Dead','Survived']): t.set_text(l)","eb1175a0":"f,ax=plt.subplots(1,2,figsize=(20,8))\n\nsns.countplot(ax=ax[0], data=titanic_train, x=\"Pclass\")\nax[0].set_xticklabels(['1st class', '2nd class', '3rd class'])\nax[0].set_ylabel('Number of people')\nax[0].set_xlabel(\"\")\nax[0].set_title('Number of Passengers by Class')\n\nsns.countplot(ax=ax[1], data=titanic_train, x=\"Pclass\", hue=\"Survived\", palette = [\"red\",\"green\"])\nax[1].set_xticklabels(['1st class', '2nd class', '3rd class'])\nax[1].set_ylabel('Number of people')\nax[1].set_xlabel(\"\")\nax[1].legend(['Dead','Survived']) \nax[1].set_title('Survival Rate by Class')","2acb98c8":"g=sns.displot(data=titanic_train, x=\"Age\", hue='Survived', col=\"Survived\", row='Pclass', bins=20, multiple=\"dodge\", palette = [\"red\",\"green\"])\n\naxes = g.axes.flatten()\naxes[0].set_title(\"Class 1 - Dead\")\naxes[1].set_title(\"Class 1 - Survived\")\naxes[2].set_title(\"Class 2 - Dead\")\naxes[3].set_title(\"Class 2 - Survived\")\naxes[4].set_title(\"Class 3 - Dead\")\naxes[5].set_title(\"Class 3 - Survived\")\n\ng.set_axis_labels(\"Age\", \"Number of people\")\n\nfor t, l in zip(g._legend.texts, ['Dead','Survived']): t.set_text(l)","bd36f8a1":"f,ax=plt.subplots(1,2,figsize=(20,8))\n\nsns.countplot(ax=ax[0], data=titanic_train, x=\"Embarked\")\nax[0].set_ylabel('Number of people')\nax[0].set_xlabel(\"\")\nax[0].set_title('Number of Passengers by Embarked')\n\nsns.countplot(ax=ax[1], data=titanic_train, x=\"Embarked\", hue=\"Survived\", palette = [\"red\",\"green\"])\nax[1].set_ylabel('Number of people')\nax[1].set_xlabel(\"\")\nax[1].legend(['Dead','Survived'], loc=\"upper right\") \nax[1].set_title('Survival Rate by Embarked')","fe95ce15":"g=sns.displot(data=titanic_train, x=\"Age\", hue='Survived', col=\"Survived\", row='Embarked', bins=20, multiple=\"dodge\", palette = [\"red\",\"green\"])\n\nax = g.axes.flatten()\nax[0].set_title(\"Embarked S - Dead\")\nax[1].set_title(\"Embarked S - Survived\")\nax[2].set_title(\"Embarked C - Dead\")\nax[3].set_title(\"Embarked C - Survived\")\nax[4].set_title(\"Embarked Q - Dead\")\nax[5].set_title(\"Embarked Q - Survived\")\n\ng.set_axis_labels(\"Age\", \"Number of people\")\n\nfor t, l in zip(g._legend.texts, ['Dead','Survived']): t.set_text(l)","f159dd09":"titanic_train.columns","874bd484":"Y_train = titanic_train[['Survived']].copy()\n\nparams=['Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked']\nX_train = titanic_train[params].copy()\nX_test = titanic_test[params].copy()\n\nX_train['Set']='train'\nX_test['Set']='test'\nX_full = pd.concat([X_train, X_test])\nX_full.info()","2f7b4246":"X_full['FamilySize'] = X_full['SibSp'] + X_full['Parch']\n\nfamily_map = {0:'Alone', \n              1: 'Small', 2: 'Small', 3: 'Small', \n              4: 'Medium', 5: 'Medium', 6: 'Medium', \n              7: 'Large', 8: 'Large', 9: 'Large', 10: 'Large'}\n\nX_full['FamilySizeGrouped'] = X_full['FamilySize'].map(family_map)\n\nX_full.head()","bfacce20":"df_data=X_full[X_full['Set']=='train'].copy()\ndf_data['Survived'] = Y_train\n\n\nf,ax=plt.subplots(1,2,figsize=(20,8))\n\nsns.countplot(ax=ax[0], data=df_data, x=\"FamilySizeGrouped\", hue=\"Survived\", palette = [\"red\",\"green\"])\nax[0].set_ylabel('Number of people')\nax[0].set_xlabel(\"\")\nax[0].legend(['Dead','Survived'], loc=\"upper right\") \nax[0].set_title('Survival Rate by Family Size Grouped')\n\nsns.countplot(ax=ax[1], data=df_data, x=\"FamilySize\", hue=\"Survived\", palette = [\"red\",\"green\"], order=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nax[1].set_ylabel('Number of people')\nax[1].set_xlabel(\"\")\nax[1].legend(['Dead','Survived'], loc=\"upper right\") \nax[1].set_title('Survival Rate by Family Size')","ec130100":"import re\n\nX_full['Title'] = X_full['Name'].apply(lambda x: re.search(' ([A-Z][a-z]+)\\.', x).group(1))\nprint(X_full['Title'].value_counts(),\"\\n\")\n\nstatus_map={'Capt':'Military', 'Col':'Military', 'Major':'Military',\n            'Don':'Noble', 'Dona':'Noble', 'Jonkheer':'Noble', 'Lady':'Noble', 'Sir':'Noble', 'Countess':'Noble',\n            'Dr':'Dr',\n            'Master':'Common', 'Miss':'Common', 'Mlle':'Common', 'Mme':'Common', 'Mr':'Common', 'Mrs':'Common', 'Ms':'Common',\n            'Rev':'Clergy'\n            }\n\nX_full['SocialStatus'] = X_full['Title'].map(status_map)\nprint(X_full['SocialStatus'].value_counts())\n\nX_full['Title'] = X_full['Title'].replace({'Mlle':'Miss', 'Mme':'Mrs', 'Ms':'Miss'})\nX_full['Title'] = X_full['Title'].replace(['Don', 'Dona', 'Rev', 'Dr', 'Major', 'Col', 'Capt', 'Jonkheer','Countess', 'Lady', 'Sir'], 'Special')\n\nX_full.head()","478fb401":"df_data=X_full[X_full['Set']=='train'].copy()\ndf_data['Survived'] = Y_train\n\nf,ax=plt.subplots(1,2,figsize=(20,8))\n\nsns.countplot(ax=ax[0], data=df_data, x=\"Title\", hue=\"Survived\", palette = [\"red\",\"green\"])\nax[0].set_ylabel('Number of people')\nax[0].set_xlabel(\"\")\nax[0].legend(['Dead','Survived'], loc=\"upper right\") \nax[0].set_title('Survival Rate by Title')\n\nsns.countplot(ax=ax[1], data=df_data, x=\"SocialStatus\", hue=\"Survived\", palette = [\"red\",\"green\"])\nax[1].set_ylabel('Number of people')\nax[1].set_xlabel(\"\")\nax[1].legend(['Dead','Survived'], loc=\"upper right\") \nax[1].set_title('Survival Rate by Social Status')","52f86cfc":"X_full['Age'] = X_full['Age'].fillna(X_full['Age'].median())\nX_full['Fare'] = X_full['Fare'].fillna(X_full['Fare'].median())","bfd9b565":"X_full['CatFare'] = pd.qcut(X_full['Fare'], q=13, labels=False)\n\nX_full.head()","ccbb2c31":"df_data=X_full[X_full['Set']=='train'].copy()\ndf_data['Survived'] = Y_train\n\nfig = plt.figure(figsize = (10,6))\nax=sns.countplot(data=df_data, x=\"CatFare\", hue=\"Survived\", palette = [\"red\",\"green\"])\nax.legend(['Dead','Survived'], loc=\"upper right\")\nax.set_ylabel('Number of people')\nax.set_xlabel(\"\")\nax.set_title('Survival Rate by Fare')","cce0a6d6":"X_full.loc[X_full['Age']<=4,'StagesOfLife']=0 # Baby\nX_full.loc[(X_full['Age']>4)&(X_full['Age']<=12),'StagesOfLife']=1 # Child\nX_full.loc[(X_full['Age']>12)&(X_full['Age']<=19),'StagesOfLife']=2 # Teenager\nX_full.loc[(X_full['Age']>19)&(X_full['Age']<=39),'StagesOfLife']=3 # Adult\nX_full.loc[(X_full['Age']>39)&(X_full['Age']<=64),'StagesOfLife']=4 # Middle Age Adult\nX_full.loc[X_full['Age']>64,'StagesOfLife']=5 # Senior\n\nX_full.head()","1a2ee2bb":"df_data=X_full[X_full['Set']=='train'].copy()\ndf_data['Survived'] = Y_train\n\nfig = plt.figure(figsize = (10,6))\nax=sns.countplot(data=df_data, x=\"StagesOfLife\", hue=\"Survived\", palette = [\"red\",\"green\"])\nax.legend(['Dead','Survived'], loc=\"upper right\")\nax.set_ylabel('Number of people')\nax.set_xlabel(\"\")\nax.set_title('Survival Rate by Stages of Life')","6ef758cd":"X_full['Cabin'].unique()","f9b6d03a":"X_full.loc[~X_full['Cabin'].isnull(),'HasCabin'] = 1\n\nX_full['Deck'] = X_full['Cabin'].str.replace('[0-9]','').str.split(' ', expand=True)[0]\nX_full['RoomNumber'] = X_full['Cabin'].str.replace('[A-z ]','').str.split(' ', expand=True)[0]\n\nX_full.head()","d227007d":"df_data=X_full[X_full['Set']=='train'].copy()\ndf_data['Survived'] = Y_train\n\nfig = plt.figure(figsize = (10,6))\nax=sns.countplot(data=df_data, x=\"Deck\", hue=\"Survived\", palette = [\"red\",\"green\"], order=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'T'])\nax.legend(['Dead','Survived'], loc=\"upper right\")\nax.set_ylabel('Number of people')\nax.set_xlabel(\"\")\nax.set_title('Survival Rate by Deck')","06327add":"X_full['TicketFrequency'] = X_full.groupby('Ticket')['Ticket'].transform('count')\nX_full.head()","0462fe51":"df_data=X_full[X_full['Set']=='train'].copy()\ndf_data['Survived'] = Y_train\n\nfig = plt.figure(figsize = (10,6))\nax=sns.countplot(data=df_data, x=\"TicketFrequency\", hue=\"Survived\", palette = [\"red\",\"green\"], order=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\nax.legend(['Dead','Survived'], loc=\"upper right\")\nax.set_ylabel('Number of people')\nax.set_xlabel(\"\")\nax.set_title('Survival Rate by Ticket Frequency')","72426645":"pd.isna(X_full).sum()\n# X_full[X_full['RoomNumber'].isna()]","7f9429ea":"X_full['HasCabin'] = X_full['HasCabin'].fillna(0)\nX_full['Deck'] = X_full['Deck'].fillna(0)\n\nX_full['Embarked'] = X_full['Embarked'].fillna('S')","1fe406c0":"X_full['Embarked'].replace(['S','C','Q'], [0, 1, 2], inplace=True)\nX_full['Deck'].replace(['A','B','C','D','E','F','G','T'], [1, 2, 3, 4, 5, 6, 7, 8], inplace=True)\nX_full['FamilySizeGrouped'].replace(['Alone','Small','Medium','Large'], [0, 1, 2, 3], inplace=True)\nX_full['Title'].replace(['Mr', 'Mrs', 'Miss', 'Master', 'Special'], [0, 1, 2, 3, 4], inplace=True)\nX_full['SocialStatus'].replace(['Common', 'Noble', 'Clergy', 'Dr', 'Military'], [0, 1, 2, 3, 4], inplace=True)\nX_full['Sex'].replace(['male','female'], [1, 0],inplace=True)\n\nX_full['RoomNumber'] = pd.to_numeric(X_full['RoomNumber'])\nX_full['Age'] = X_full['Age'].astype(int)\nX_full['HasCabin'] = X_full['HasCabin'].astype(int)\nX_full['StagesOfLife'] = X_full['StagesOfLife'].astype(int)\nX_full['Deck'] = X_full['Deck'].astype(int)\n\nX_full['RoomNumber'] = X_full['RoomNumber'].fillna(0)","bdd9505b":"# corr = X_full.corr(method = \"pearson\")\n# corr = X_full.corr(method = \"spearman\")\ncorr = X_full.corr(method = \"kendall\")\n\nf, ax = plt.subplots(figsize=(10, 10))\n\nsns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(220, 10, as_cmap=True), square=True, ax=ax, annot=True)","f9cb711e":"X_train=X_full[X_full['Set']=='train'].copy()\nX_test=X_full[X_full['Set']=='test'].copy()\n\nX_train.drop(columns=['Set', 'Name', 'Ticket', 'Cabin'], inplace=True)\nX_test.drop(columns=['Set', 'Name', 'Ticket', 'Cabin'], inplace=True)","56e946c9":"import imblearn\nprint(imblearn.__version__)\n\nfrom collections import Counter\nfrom imblearn.over_sampling import SMOTEN","6acf0917":"oversample = SMOTEN(sampling_strategy = {0: 5000, 1: 5000})\nX_smote, y_smote = oversample.fit_resample(X_train, Y_train)\n\ncounter = Counter(y_smote)\nprint(counter)\nprint(len(y_smote))","d6577cc8":"from sklearn.preprocessing import StandardScaler\n\nscale=StandardScaler().fit(X_smote)\nX_train_sc = scale.transform(X_smote)\nX_test_sc = scale.transform(X_test)","b26fb266":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier, RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import SGDClassifier\n\nfrom sklearn.model_selection import cross_validate, cross_val_score\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_score, balanced_accuracy_score\nfrom sklearn.model_selection import KFold\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","918e2a4e":"models=[(\"Logistic Regression\", LogisticRegression()),\n        (\"Stochastic Gradient Descent\", SGDClassifier()),\n        (\"Linear Discriminant Analysis\", LinearDiscriminantAnalysis()),\n        (\"Decision Tree\", DecisionTreeClassifier()),\n        (\"Random Forest\", RandomForestClassifier()),\n        (\"Extra Trees\", ExtraTreesClassifier()),\n        (\"Gradient Boostin\", GradientBoostingClassifier()),\n        (\"KNeighbors\", KNeighborsClassifier()),\n        (\"SVM\", SVC()),\n        (\"Naive Bayes\", GaussianNB()),\n        (\"Ada Boost\", AdaBoostClassifier())]\n\nfor name, model in models:\n    kfold = KFold(n_splits=10)\n    results = cross_val_score(model, X_train_sc, y_smote, cv=kfold, scoring='accuracy')\n    print(f\"\\x1b[96m{name}\\x1b[0m: \\x1b[95m{results.mean():.4f}\\x1b[0m \u00b1 {results.std():.4f}\")","b22e2260":"from sklearn.model_selection import train_test_split\n\nx_train, x_val, y_train, y_val = train_test_split(X_train_sc, y_smote, test_size=0.2, random_state=0)","c44b927a":"# Logistic Regression\nlr = LogisticRegression(C=0.4, n_jobs=-1)\nlr.fit(x_train, y_train)\n\nprint(lr.score(x_val, y_val))","ce4f7846":"# Linear Discriminant Analysis\nlda = LinearDiscriminantAnalysis()\nlda.fit(x_train, y_train)\n\nprint(lr.score(x_val, y_val))","971e115a":"# Random Forest\nrf = RandomForestClassifier(max_features=5, min_samples_split=5, min_samples_leaf=3, n_estimators=100, random_state=9, n_jobs=-1)\nrf.fit(x_train, y_train)\n\nprint(rf.score(x_val, y_val))","a3c6b8dc":"feature_importance = rf.feature_importances_[:20]\nsorted_idx = np.argsort(feature_importance)\npos = np.arange(sorted_idx.shape[0]) + .5\n\nfig = plt.figure(figsize=(17, 6))\nplt.barh(pos, feature_importance[sorted_idx], align='center')\nplt.yticks(pos, np.array(X_train.columns)[sorted_idx])\nplt.title('Feature Importance')","f1100210":"# Support Vector Machine\nsv = SVC(kernel='rbf', C=0.7, gamma=0.5, probability=True)\nsv.fit(x_train, y_train)\n\nprint(sv.score(x_val, y_val))","4e18746e":"# Gradient Boostin\ngb = GradientBoostingClassifier(max_features=12, min_samples_split=7, min_samples_leaf=7, n_estimators=100, random_state=9)\ngb.fit(x_train, y_train)\n\nprint(gb.score(x_val, y_val))","c6fb3c04":"Y_pred = gb.predict(X_test_sc)\naccuracy_score(Y_pred, gender_df.loc[:, ['Survived']])","a8a4ad53":"feature_importance = gb.feature_importances_[:20]\nsorted_idx = np.argsort(feature_importance)\npos = np.arange(sorted_idx.shape[0]) + .5\n\nfig = plt.figure(figsize=(17, 6))\nplt.barh(pos, feature_importance[sorted_idx], align='center')\nplt.yticks(pos, np.array(X_train.columns)[sorted_idx])\nplt.title('Feature Importance')","57c90a75":"# KNN\nkn = KNeighborsClassifier(n_neighbors=6, n_jobs=-1)\nkn.fit(x_train, y_train)\n\nprint(kn.score(x_val, y_val))","6f297c46":"from xgboost.sklearn import  XGBClassifier\n\nxgboost=XGBClassifier(n_estimators=100, learning_rate=0.1, eval_metric='logloss')\nxgboost.fit(x_train, y_train)\n\nprint(xgboost.score(x_val, y_val))","efda0ddb":"from sklearn.ensemble import VotingClassifier\n\nvote = VotingClassifier(estimators=[('lr', lr),\n                                    ('lda', lda),\n                                    ('rfc', rf),\n                                    ('svc', sv),\n                                    ('xgboost', xgboost),\n                                    ('dtc', gb),\n                                    ('knc', kn)], voting='soft', n_jobs=-1)\n\nvote = vote.fit(X_train_sc, y_smote)\nvote","a020e276":"Y_predict = vote.predict(X_test_sc)\n\noutput = pd.DataFrame({'PassengerId': titanic_test['PassengerId'], 'Survived': Y_predict})\noutput.to_csv('submission.csv', index=False)","b368b646":"model = Sequential()\nmodel.add(Dense(100, input_shape=(x_train.shape[1],), activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dense(20, activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(500, activation = 'tanh'))\nmodel.add(BatchNormalization())\nmodel.add(Dense(500, activation = 'gelu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(100, activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dense(1, activation = 'sigmoid'))\n\nmodel.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\nmodel.summary()","ebaa8186":"hist = model.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=50)","48c9b7fc":"fig, ax = plt.subplots(figsize=(15,5))\n\nplt.plot(hist.history['accuracy'], label='accuracy')\nplt.plot(hist.history['val_accuracy'], label='val_accuracy', linestyle='--')\nplt.plot(hist.history['loss'], label='loss')\nplt.plot(hist.history['val_loss'], label='val_loss', linestyle='--')\nplt.legend()","df21df88":"ModelLoss, ModelAccuracy = model.evaluate(x_val, y_val)\n\nprint(f'Test Loss is {ModelLoss}')\nprint(f'Test Accuracy is {ModelAccuracy}')","f621807a":"y_pred = model.predict(x_val)\ny_test_list = list(y_val['Survived'])\ntotal = len(y_test_list)\ncorrect = 0\nval = 0\nresult = []\ncount = np.arange(0, 1, 0.01)\n\nfor n in count:\n    for i in range(total):\n        if(y_pred[i][0]<n):\n            val=0\n        else:\n            val=1\n\n        if(val==y_test_list[i]):\n            correct+=1\n            \n    result.append(correct\/total)\n    correct=0\n\nprint(f\"Max value: {result[result.index(max(result))]:.5f} at {count[result.index(max(result))]}\")","77ad86b2":"Y_predict = model.predict(X_test_sc)\npred=[]\n\nfor i in range(len(Y_predict)):\n    if Y_predict[i] >= 0.5:\n        pred.append(1)\n    else:\n        pred.append(0)\n\noutput = pd.DataFrame({'PassengerId': titanic_test['PassengerId'], 'Survived': pred})\noutput.to_csv('submission.csv', index=False)","58fe01a6":"<div style=\"color:white; display:fill; border-radius:5px; background-color:#5642C5; font-size:210%; font-family:Verdana; letter-spacing:0.5px\">\n    <p style=\"padding: 10px; color:white;\">Tensorflow<\/p>\n<\/div>","724f2443":"<div style=\"color:white; display:fill; border-radius:5px; background-color:#5642C5; font-size:210%; font-family:Verdana; letter-spacing:0.5px\">\n    <p style=\"padding: 10px; color:white;\">Data Preprocessing<\/p>\n<\/div>","6af65e1f":"## Cabins","b42cfc70":"## Title","398bbb55":"<div style=\"color:white; display:fill; border-radius:5px; background-color:#5642C5; font-size:210%; font-family:Verdana; letter-spacing:0.5px\">\n    <p style=\"padding: 10px; color:white;\">Feature Engineering<\/p>\n<\/div>","9b6430ef":"## Ticket","d5de5590":"<div style=\"color:white; display:fill; border-radius:5px; background-color:#5642C5; font-size:210%; font-family:Verdana; letter-spacing:0.5px\">\n    <p style=\"padding: 10px; color:white;\">Data Analysis<\/p>\n<\/div>","4e140f58":"## Fare","7ba197a9":"## Age","ba3b0d59":"<div style=\"color:white; display:fill; border-radius:5px; background-color:#5642C5; font-size:210%; font-family:Verdana; letter-spacing:0.5px\">\n    <p style=\"padding: 10px; color:white;\">Prediction<\/p>\n<\/div>","f6b780e8":"<div style=\"color:white; display:fill; border-radius:5px; background-color:#5642C5; font-size:210%; font-family:Verdana; letter-spacing:0.5px\">\n    <p style=\"padding: 10px; color:white;\">Prediction<\/p>\n<\/div>","05f45397":"<div style=\"color:white; display:fill; border-radius:5px; background-color:#5642C5; font-size:210%; font-family:Verdana; letter-spacing:0.5px\">\n    <p style=\"padding: 10px; color:white;\">Modelling<\/p>\n<\/div>","1a7a0173":"## Family Size"}}