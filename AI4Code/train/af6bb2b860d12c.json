{"cell_type":{"cd0b277d":"code","66b2e58c":"code","417f1b38":"code","191e234d":"code","2e71c84e":"code","948dcfeb":"code","6e725025":"code","dc6cfd9f":"code","04237ebc":"code","7fd30974":"code","5fd66b9c":"code","b5737794":"code","b2bcaee3":"code","24a8d0c6":"code","eec5d248":"code","cc950548":"code","9915b05a":"code","25c91e1e":"code","d19eb3ca":"code","ed545190":"code","35abdd9a":"code","e76a1aa5":"code","3477bc38":"code","7a2f6b4a":"code","a7321c19":"code","c76c6870":"code","8f3d6bfe":"code","abc89e6f":"code","fa038c1f":"code","5daf5b76":"code","711a55bf":"code","a7c50e94":"code","25c857bb":"code","767987f8":"code","422debb9":"markdown","46241feb":"markdown","1c6c2ef9":"markdown","f12edf44":"markdown","4f1d8fcf":"markdown","5459eca4":"markdown","e9755d07":"markdown","bf71e935":"markdown","4a84815a":"markdown","443f4fca":"markdown","8a7601b3":"markdown","91040dfd":"markdown","8119ca0e":"markdown","0ec87d03":"markdown","db95bcf8":"markdown","708bfb34":"markdown","962850c0":"markdown","14f302e9":"markdown","8585b68b":"markdown","062723ca":"markdown","60a1800e":"markdown","a7552664":"markdown","b59cf681":"markdown","525aebea":"markdown","7e39e0bd":"markdown","55b67fea":"markdown","0df10287":"markdown","54fd571a":"markdown","d86b990b":"markdown","f81c82b5":"markdown","bfa695d1":"markdown","fc0cf5dd":"markdown","0b3a8f7a":"markdown"},"source":{"cd0b277d":"# load the necessary modules\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt \n# configure the seaborn aesthetics\nsns.set_context('notebook')\nsns.set(style=\"whitegrid\")","66b2e58c":"# import our dataframe skipping the row holding the questions\ndf_multiplechoice = pd.read_csv('..\/input\/multipleChoiceResponses.csv', \n                                low_memory=False,\n                                skiprows=[1])\ndf_multiplechoice.head(5)","417f1b38":"fig, ax = plt.subplots(1, 1, figsize=(12, 6))\ng = sns.countplot(y='Q6', \n                  data=df_multiplechoice,\n                  order = df_multiplechoice['Q6'].value_counts().index,\n                  palette= sns.cubehelix_palette(22, start=2, rot=0, dark=.3, light=.8, reverse=True))\ng.set_xlabel('')\ng.set_ylabel('')\ng.tick_params(labelsize=14)\nsns.despine()","191e234d":"df_title_gender = df_multiplechoice.groupby('Q6')['Q1'].value_counts().to_frame().unstack()\ndf_title_gender.columns = df_title_gender.columns.droplevel()\ndf_title_gender = df_title_gender.reset_index()\ndf_title_gender = df_title_gender.fillna(0)\ndf_title_gender","2e71c84e":"g = sns.PairGrid(df_title_gender.sort_values('Prefer not to say', ascending=False),\n                 \n                 x_vars=['Male', 'Female', 'Prefer not to say', 'Prefer to self-describe'], \n                 y_vars=['Q6'],\n                 \n                 )\ng.fig.set_size_inches(16,10)\n\n# Draw a dot plot using the stripplot function\ng.map(sns.stripplot, size=10, orient=\"h\",\n       linewidth=1, palette=sns.cubehelix_palette(22, start=2, rot=0, dark=.3, light=.8, reverse=True), edgecolor=\"w\")\n\n# Use the same x axis limits on all columns and add better labels\ng.set(xlim=(-100, 4300), xlabel=\"\", ylabel=\"\")\n\n# Use semantically meaningful titles for the columns\ntitles = [\"Male\", \"Female\", \"Prefer not to say\", \"Prefer to self-describe\"]\n\nfor ax, title in zip(g.axes.flat, titles):\n\n    # Set a different title for each axes\n    ax.set(title=title)\n\n    # Make the grid horizontal instead of vertical\n    ax.xaxis.grid(False)\n    ax.yaxis.grid(True)\nsns.despine(left=True, bottom=True)","948dcfeb":"sns.set(style=\"whitegrid\")\ndf_title_gender['rest'] = df_title_gender['Female'] + df_title_gender['Prefer not to say'] + df_title_gender['Prefer to self-describe']\ng = sns.PairGrid(df_title_gender.sort_values('rest', ascending=False),\n                 \n                 x_vars=['Male', 'rest'], \n                 y_vars=['Q6'],\n                 \n                 )\ng.fig.set_size_inches(16,8)\n\n# Draw a dot plot using the stripplot function\ng.map(sns.stripplot, size=10, orient=\"h\",\n       linewidth=1, palette=sns.cubehelix_palette(22, start=2, rot=0, dark=.3, light=.8, reverse=True), edgecolor=\"w\")\n\n# Use the same x axis limits on all columns and remove labels\ng.set(xlim=(-100, 4300), xlabel=\"\", ylabel=\"\")\n\n# Use semantically meaningful titles for the columns\ntitles = [\"Male\", \"Female\/Prefer not to say\/Prefer to self-describe\"]\n\nfor ax, title in zip(g.axes.flat, titles):\n\n    # Set a different title for each axes\n    ax.set(title=title)\n\n    # Make the grid horizontal instead of vertical\n    ax.xaxis.grid(False)\n    ax.yaxis.grid(True)\nsns.despine(left=True, bottom=True)","6e725025":"df_multiplechoice['Q3'] = df_multiplechoice['Q3'].replace('United Kingdom of Great Britain and Northern Ireland', 'United Kingdom')\ndf_multiplechoice['Q3'] = df_multiplechoice['Q3'].replace('I do not wish to disclose my location', 'Not disclosed')\ndf_multiplechoice['Q3'] = df_multiplechoice['Q3'].replace('United States of America', 'USA')\ndf_multiplechoice['Q3'] = df_multiplechoice['Q3'].replace('Iran, Islamic Republic of...', 'Iran')\n\ndf_title_country = df_multiplechoice.groupby('Q6')['Q3'].value_counts().to_frame()\ndf_title_country.columns = ['count']\ndf_title_country = df_title_country.reset_index()\ndf_title_country.sort_values(['Q3', 'Q6']).head(20)","dc6cfd9f":"colors =sns.color_palette(\"Paired\", 11)\norder = df_title_country['Q3'].unique()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 15))\nax = sns.stripplot(ax=ax1, x='count', y=\"Q3\", hue='Q6', data=df_title_country[0:498],\n                   palette=colors, jitter=True, size=7, order=order)\nax = sns.stripplot(ax=ax2, x='count', y=\"Q3\", hue='Q6', data=df_title_country[498:],\n                   palette=colors, jitter=True, size=7, order=order)\nax1.set_xlabel('')\nax1.set_ylabel('')\nax2.set_xlabel('')\nax2.set_ylabel('')\nax1.xaxis.grid(True)\nax1.yaxis.grid(True)\nax2.xaxis.grid(True)\nax2.yaxis.grid(True)\nsns.set_style('whitegrid')\nplt.legend()","04237ebc":"df_title_edu = pd.crosstab(df_multiplechoice['Q4'], df_multiplechoice['Q6']).apply(lambda r: r\/r.sum()*100, axis=0)\ndf_title_edu = df_title_edu.unstack().reset_index()\ndf_title_edu = df_title_edu.rename(columns = {0: 'count'})\ndf_title_edu.head(10)","7fd30974":"colors =sns.color_palette(\"Paired\", 7)\nfig, ax = plt.subplots(1, 1, figsize=(16, 10))\n#order = df_title_edu['Q6'].unique()\ndf_title_edu = df_title_edu.sort_values(['Q4', 'count'])\nax = sns.stripplot(x='count', y=\"Q6\", hue='Q4', data=df_title_edu,\n                   palette=colors, jitter=True, size=8)\nax.set_xlabel('Percentage of people on each profession')\nax.set_ylabel('')\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\nplt.legend()","5fd66b9c":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 12), gridspec_kw = {'width_ratios':[10, 1]})\ndf_heatmap = df_multiplechoice.loc[df_multiplechoice['Q6']!='Student']\ndf_heatmap = df_heatmap[['Q6', 'Q9']].pivot_table(index=['Q6'], columns='Q9', aggfunc=np.count_nonzero)\ndf_heatmap['sum'] = df_heatmap.sum(axis=1)\ndf_heatmap.sort_values('0-10,000', inplace=True, ascending=False)\n\n#df_heatmap.drop(columns=['sum'], inplace=True)\ndf_heatmap1 = 100*df_heatmap[['0-10,000', '10-20,000', '20-30,000', '30-40,000', '40-50,000',\n                         '50-60,000', '60-70,000', '70-80,000', '80-90,000', '90-100,000',\n                         '100-125,000', '125-150,000', '150-200,000', '200-250,000', '250-300,000',\n                         '300-400,000', '400-500,000', '500,000+']].div(df_heatmap['sum'], axis=0)\n\n\ndf_heatmap1 = df_heatmap1.rename(columns={\"0-10,000\": \"0-10\", \"10-20,000\": \"10-20\", '20-30,000': '20-30',\n                                        '30-40,000': '30-40', '40-50,000': '40-50', '50-60,000': '50-60',\n                                        '60-70,000': '60-70', '70-80,000': '70-80', '80-90,000': '80-90',\n                                        '90-100,000': '90-100', '100-125,000': '100-125', '125-150,000':'125-150',\n                                        '150-200,000': '150-200', '200-250,000': '200-250', '250-300,000': '250-300',\n                                        '300-400,000': '300-400', '400-500,000': '400-500', '500,000+': '500+'\n                                       })\n\ng = sns.heatmap(df_heatmap1, ax=ax1, annot=True,cmap=sns.cubehelix_palette(200, start=2, rot=0, dark=.05, light=.95, reverse=False))\ng.set_ylabel('')\ng.set_xlabel('Salary in thousands')\ng.tick_params(labelsize=14)\ng.set_title('Salary earned by percentage of people per job title', fontsize=16)\n\ndf_heatmap2 = 100*df_heatmap['I do not wish to disclose my approximate yearly compensation'].to_frame().rename(columns={'I do not wish to disclose my approximate yearly compensation': 'Not disclosed'}).div(df_heatmap['sum'], axis=0)\n\ng = sns.heatmap(df_heatmap2, ax=ax2, annot=True, cmap=sns.cubehelix_palette(200, start=2, rot=0, dark=.05, light=.95, reverse=False))\ng.set_ylabel('')\ng.tick_params(labelsize=14)\ng.set_title('Percentage of people per job title \\n not disclosing their salary', fontsize=16)\n\n","b5737794":"columns_q11 = [column for column in df_multiplechoice.columns if column.startswith('Q11_Part')]\ncolumns_q11.append('Q6')\ndf_role = df_multiplechoice[columns_q11]\ncolumns_q11.remove('Q6')\nfor column in columns_q11:\n    df_temp = df_role[column]\n    value = df_temp.loc[df_temp.first_valid_index()]\n    df_role = df_role.rename(columns = {column: value})\ndf_role.head(5)","b2bcaee3":"groups_role = df_role.groupby('Q6')\ngroups_role_pct = pd.DataFrame()\nfor name, group in groups_role:\n    groups_role_pct[name] = pd.Series(group.notnull().mean()*100)\ngroups_role_pct = groups_role_pct.unstack().to_frame().reset_index()\ngroups_role_pct = groups_role_pct.loc[groups_role_pct['level_1'] !='Q6']\ngroups_role_pct = groups_role_pct.rename(columns = {'level_0': 'Q3', 'level_1': 'role', 0: 'count'})\ngroups_role_pct.head(10)","24a8d0c6":"colors =sns.color_palette(\"Paired\", 14)\ngroups_role_pct = groups_role_pct.sort_values(['count'], ascending=False)\norder = groups_role_pct['Q3'].unique()\nfig, ax = plt.subplots(figsize=(16, 10))\nax = sns.stripplot(ax=ax, x='count', y=\"Q3\", hue='role', data=groups_role_pct,\n                   palette=colors, jitter=False, size=8, alpha=.75, \n                   edgecolor=\"black\", order=order)\nax.set_xlabel('Percentage of people')\nax.set_ylabel('')\nax.xaxis.grid(True)\nax.yaxis.grid(True)\nax.tick_params(labelsize=14)\n\nplt.legend()","eec5d248":"columns_q13 = [column for column in df_multiplechoice.columns if column.startswith('Q13_Part')]\ncolumns_q13.append('Q6')\ndf_ide = df_multiplechoice[columns_q13]\ncolumns_q13.remove('Q6')\nfor column in columns_q13:\n    df_temp = df_ide[column]\n    value = df_temp.loc[df_temp.first_valid_index()]\n    df_ide = df_ide.rename(columns = {column: value})\ndf_ide.head(5)","cc950548":"groups_ide = df_ide.groupby('Q6')\ndf_ide_pct = pd.DataFrame()\nfor name, group in groups_ide:\n    df_ide_pct[name] = pd.Series(group.notnull().mean()*100)\ndf_ide_pct = df_ide_pct.unstack().to_frame().reset_index()\ndf_ide_pct = df_ide_pct.loc[df_ide_pct['level_1'] !='Q6']\ndf_ide_pct = df_ide_pct.rename(columns = {'level_0': 'role', 'level_1': 'ide', 0: 'count'})\ndf_ide_pct.head(10)\n","9915b05a":"colors = sns.color_palette(\"Set2\", 7)\ncolors2 = sns.color_palette(\"Paired\", 8)\ncolors.extend(colors2)\ndf_ide_pct = df_ide_pct.sort_values(['ide', 'count'], ascending=False)\norder = df_ide_pct['role'].unique()\nfig, ax = plt.subplots(figsize=(16, 10))\nax = sns.stripplot(ax=ax, x='count', y=\"role\", hue='ide', data=df_ide_pct,\n                   palette=colors, jitter=False, size=8, alpha=.75, \n                   edgecolor=\"black\")\nax.set_xlabel('Percentage of people')\nax.set_ylabel('')\nax.xaxis.grid(True)\nax.yaxis.grid(True)\nax.tick_params(labelsize=14)\n\nplt.legend()","25c91e1e":"columns_q21 = [column for column in df_multiplechoice.columns if column.startswith('Q21_Part')]\ncolumns_q21.append('Q6')\ndf_datavis = df_multiplechoice[columns_q21]\ncolumns_q21.remove('Q6')\nfor column in columns_q21:\n    df_temp = df_datavis[column]\n    value = df_temp.loc[df_temp.first_valid_index()]\n    df_datavis = df_datavis.rename(columns = {column: value})\ndf_datavis.head(5)","d19eb3ca":"groups_datavis = df_datavis.groupby('Q6')\ndf_datavis_pct = pd.DataFrame()\nfor name, group in groups_datavis:\n    df_datavis_pct[name] = pd.Series(group.notnull().mean()*100)\ndf_datavis_pct = df_datavis_pct.unstack().to_frame().reset_index()\ndf_datavis_pct = df_datavis_pct.loc[df_datavis_pct['level_1'] !='Q6']\ndf_datavis_pct = df_datavis_pct.rename(columns = {'level_0': 'Q3', 'level_1': 'datavis', 0: 'count'})\ndf_datavis_pct.head(10)\n","ed545190":"colors =sns.color_palette(\"Paired\", 10)\ncolors2 = sns.color_palette(\"Set2\", 10)\ncolors.extend(colors2)\ndf_datavis_pct = df_datavis_pct.sort_values(['datavis', 'count'])\norder = df_datavis_pct['Q3'].unique()\nfig, ax = plt.subplots(figsize=(20, 10))\nax = sns.stripplot(ax=ax, x='count', y=\"Q3\", hue='datavis', data=df_datavis_pct,\n                   palette=colors, jitter=False, size=10, alpha=.75, \n                   edgecolor=\"black\", order=order)\nax.set_xlabel('Percentage of people')\nax.set_ylabel('')\nax.xaxis.grid(True)\nax.yaxis.grid(True)\nax.tick_params(labelsize=14)\n\nplt.legend()","35abdd9a":"columns_q16 = [column for column in df_multiplechoice.columns if column.startswith('Q16_Part')]\ncolumns_q16.append('Q6')\ndf_langs = df_multiplechoice[columns_q16]\ncolumns_q16.remove('Q6')\nfor column in columns_q16:\n    df_temp = df_langs[column]\n    value = df_temp.loc[df_temp.first_valid_index()]\n    df_langs = df_langs.rename(columns = {column: value})\ndf_langs.head(5)","e76a1aa5":"groups_langs = df_langs.groupby('Q6')\ndf_langs_pct = pd.DataFrame()\nfor name, group in groups_langs:\n    df_langs_pct[name] = pd.Series(group.notnull().mean()*100)\ndf_langs_pct = df_langs_pct.unstack().to_frame().reset_index()\ndf_langs_pct = df_langs_pct.loc[df_langs_pct['level_1'] !='Q6']\ndf_langs_pct = df_langs_pct.rename(columns = {'level_0': 'Q3', 'level_1': 'langs', 0: 'count'})\ndf_langs_pct.head(10)","3477bc38":"colors =sns.color_palette(\"Paired\", 10)\ncolors2 = sns.color_palette(\"Set2\", 10)\ncolors.extend(colors2)\ndf_langs_pct = df_langs_pct.sort_values(['langs', 'count'])\norder = df_langs_pct['Q3'].unique()\nfig, ax = plt.subplots(figsize=(20, 10))\nax = sns.stripplot(ax=ax, x='count', y=\"Q3\", hue='langs', data=df_langs_pct,\n                   palette=colors, jitter=False, size=10, alpha=.75, \n                   edgecolor=\"black\", order=order)\n\nax.set_xlabel('Percentage of people')\nax.set_ylabel('')\nax.xaxis.grid(True)\nax.yaxis.grid(True)\nax.tick_params(labelsize=14)\n\nplt.legend()","7a2f6b4a":"columns_q19 = [column for column in df_multiplechoice.columns if column.startswith('Q19_Part')]\ncolumns_q19.append('Q6')\ndf_ml_frams = df_multiplechoice[columns_q19]\ncolumns_q19.remove('Q6')\nfor column in columns_q19:\n    df_temp = df_ml_frams[column]\n    value = df_temp.loc[df_temp.first_valid_index()]\n    df_ml_frams = df_ml_frams.rename(columns = {column: value})\ndf_ml_frams.head(5)","a7321c19":"groups_ml_frams = df_ml_frams.groupby('Q6')\ndf_ml_pct = pd.DataFrame()\nfor name, group in groups_ml_frams:\n    df_ml_pct[name] = pd.Series(group.notnull().mean()*100)\ndf_ml_pct = df_ml_pct.unstack().to_frame().reset_index()\ndf_ml_pct = df_ml_pct.loc[df_ml_pct['level_1'] !='Q6']\ndf_ml_pct = df_ml_pct.rename(columns = {'level_0': 'Q3', 'level_1': 'frameworks', 0: 'count'})\ndf_ml_pct.head(10)","c76c6870":"colors =sns.color_palette(\"Paired\", 10)\ncolors2 = sns.color_palette(\"Set2\", 10)\ncolors.extend(colors2)\ndf_ml_pct = df_ml_pct.sort_values(['Q3', 'count'])\norder = df_ml_pct['Q3'].unique()\nfig, ax = plt.subplots(figsize=(20, 10))\nax = sns.stripplot(ax=ax, x='count', y=\"Q3\", hue='frameworks', data=df_ml_pct,\n                   palette=colors, jitter=False, size=10, alpha=.75, \n                   edgecolor=\"black\", order=order)\n\nax.set_xlabel('Percentage of people')\nax.set_ylabel('')\nax.xaxis.grid(True)\nax.yaxis.grid(True)\nax.tick_params(labelsize=14)","8f3d6bfe":"df_title_coding = pd.crosstab(df_multiplechoice['Q23'], df_multiplechoice['Q6']).apply(lambda r: r\/r.sum()*100, axis=0)\ndf_title_coding = df_title_coding.unstack().reset_index()\ndf_title_coding = df_title_coding.rename(columns = {0: 'pct'})\ndf_title_coding.head(10)","abc89e6f":"colors =sns.color_palette(\"Paired\", 5)\ncolors2 = sns.color_palette(\"Set2\", 10)\ncolors3 = sns.color_palette(\"Set1\", 10)\ncolors.extend(colors2)\ncolors.extend(colors3)\nfig, ax = plt.subplots(figsize=(15, 10))\norder = ['0% of my time', '1% to 25% of my time', '25% to 49% of my time', '50% to 74% of my time', '75% to 99% of my time', '100% of my time']\ndf_title_coding.sort_values(['pct'], inplace=True)\nax = sns.stripplot(x='pct', y=\"Q23\", hue='Q6', data=df_title_coding,\n                   palette=colors, jitter=True, size=8, order=order)\n\nax.set_ylabel('')\nax.set_xlabel('Percentage of people')\nax.xaxis.grid(True)\n\nplt.legend()","fa038c1f":"columns_q36 = [column for column in df_multiplechoice.columns if column.startswith('Q36_Part')]\ncolumns_q36.append('Q6')\ndf_platforms = df_multiplechoice[columns_q36]\ncolumns_q36.remove('Q6')\nfor column in columns_q36:\n    df_temp = df_platforms[column]\n    value = df_temp.loc[df_temp.first_valid_index()]\n    df_platforms = df_platforms.rename(columns = {column: value})\ndf_platforms.head(5)","5daf5b76":"groups_platforms = df_platforms.groupby('Q6')\ndf_platforms_pct = pd.DataFrame()\nfor name, group in groups_platforms:\n    df_platforms_pct[name] = pd.Series(group.notnull().mean()*100)\ndf_platforms_pct = df_platforms_pct.unstack().to_frame().reset_index()\ndf_platforms_pct = df_platforms_pct.loc[df_platforms_pct['level_1'] !='Q6']\ndf_platforms_pct = df_platforms_pct.rename(columns = {'level_0': 'role', 'level_1': 'platform', 0: 'pct'})\ndf_platforms_pct.head(10)","711a55bf":"colors = sns.color_palette(\"Set2\", 7)\ncolors2 = sns.color_palette(\"Paired\", 8)\ncolors.extend(colors2)\ndf_platforms_pct = df_platforms_pct.sort_values(['platform', 'pct'], ascending=False)\norder = df_platforms_pct['role'].unique()\nfig, ax = plt.subplots(figsize=(15, 10))\nax = sns.stripplot(ax=ax, x='pct', y=\"role\", hue='platform', data=df_platforms_pct,\n                   palette=colors, jitter=False, size=8, alpha=.75, \n                   edgecolor=\"black\")\nax.set_xlabel('Percentage of people')\nax.set_ylabel('')\nax.xaxis.grid(True)\nax.yaxis.grid(True)\nax.tick_params(labelsize=14)\n\nplt.legend()","a7c50e94":"fig, g = plt.subplots(figsize=(18, 8))\ndf_heatmap_lang = df_multiplechoice[['Q6', 'Q18']].pivot_table(index=['Q18'], columns='Q6', aggfunc=np.count_nonzero)\ndf_heatmap_lang['sum'] = df_heatmap_lang.sum(axis=1)\ndf_heatmap_lang.sort_values('sum', inplace=True, ascending=False)\ndf_heatmap_lang.drop(columns=['sum'], inplace=True)\ng = sns.heatmap(df_heatmap_lang, annot=True, fmt=\".0f\", cmap=sns.cubehelix_palette(200, start=2, rot=0, dark=.05, light=.95, reverse=False))\ng.tick_params(labelsize=14)\ng.set_ylabel('')\ng.set_xlabel('')","25c857bb":"df_title_ach = pd.crosstab(df_multiplechoice['Q40'], df_multiplechoice['Q6']).apply(lambda r: r\/r.sum()*100, axis=0)\ndf_title_ach = df_title_ach.unstack().reset_index()\ndf_title_ach = df_title_ach.rename(columns = {0: 'count'})\ndf_title_ach.head(10)","767987f8":"colors =sns.color_palette(\"Paired\", 7)\nfig, ax = plt.subplots(figsize=(16, 10))\n#order = df_title_edu['Q6'].unique()\ndf_title_edu = df_title_ach.sort_values(['count', 'Q40'])\nax = sns.stripplot(x='count', y=\"Q6\", hue='Q40', data=df_title_ach,\n                   palette=colors, jitter=True, size=8)\nax.set_xlabel('Percentage of people on each profession')\nax.set_ylabel('')\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\nplt.legend()","422debb9":"#### Outcome\nStill, a significant difference in the gender!","46241feb":"### ML frameworks used at work","1c6c2ef9":"#### Outcome\nThis is quite a good breakdown to see what each role is actually doing in their everyday work life. \n* The titles that include 'Analyst' (followed by the Data Scientists) are mainly spending their time analysing data to understand and influence the business decisions. \n* Data Scientists seem to also get involved in doing research for machine learning advancement and also building machine learning services that improces product and workflow. \n* Most of the professionals are taking care of the data infrastructure of their organisation - except for the Research Scientist\/Assistants, who apparently are the ones who drive the research in their organisation.\n* Salepeople, Software\/Database Engineers, and Developer Advocates are the ones who are not massively involved in none of the above activities at work, which makes sense as the nature of their work is mostly the development part.","f12edf44":"### Data visualisation","4f1d8fcf":"### Country","5459eca4":"Next, let's look into how many different job titles participated in the survey.","e9755d07":"### Platforms used to learn Data Science","bf71e935":"#### Outcome\nIt seems that Male is dominating every job title.\n\nLet's actually produce the same graph but this time adding up the Female, the Prefer not to say and the Prefer to self-describe samples in order to see how much difference there is between the two.","4a84815a":"#### Outcome\nMatplotlib, ggplot, seaborn and plotly are, not surprisingly, the most popular Data visualisation libraries. Among them, Marketing Analysts and Statisticians seem to prefer ggplot (and thus R), while Data Scientists\/Engineers, Research Scientists\/Assistants prefer matplotlib and the rest of the python libraries. For Data Analysts, the matplotlib and ggplot percentages of use are quite close. \n\nAlso, Seaborn looks like is more popular than Plotly in all the groups.","443f4fca":"### Percentage of time at work or school spent actively coding","8a7601b3":"#### Outcome\n\nJupyter Notebook and RStudio are apparently the first options that all the professions use. \n","91040dfd":"## Advice to aspiring Data Scientists","8119ca0e":"## Demographics\n### Gender","0ec87d03":"# Which data career should you follow? \n\nData Scientist, Data Engineer or Data Analyst? Or maybe Statistician is what you should do?\n\nWith the variety and fuziness of Data related jobs, several job titles are showing up, making the decision of a certain career path quite complicated for both entry level and experienced professionals.\n\nThe Kaggle Data Science Survey is an excellent dataset that can probably answer common questions like:\n* Does your background matter in order to choose your career?\n* How different are the data-related roles?\n* Are the tools the professionals are using and their day-to-day working life varying much?\n\n## About this kernel\nThis kernel aims to look into different aspects of the various data-related roles and examine how they vary on:\n- Demographics\n- Day to day work life\n- Advice they give to aspiring Data Scientists","db95bcf8":"## About the data\nFirst, a snapshot of the data:","708bfb34":"#### Outcome\n* Scikit-learn seems the most popular ML framework overall\n* Data Scientists have the biggest variation on the frameworks they use, and the Data Journalists the least.","962850c0":"\n## Day to day work life\n\n### Role at work","14f302e9":"## Takeaway\nDeciding what your career path will be is tough, but having an overview on how the different data roles vary is helpful.\n\nSo, go on, check what your dreaming role is doing and achieve your goals without hesitating!\n\n\nNote: Comments and feedback are always welcome for this kernel :) ","8585b68b":"#### Outcome\n* As expected, Python, R and SQL are the top languages used by Data professionals.\n* Statisticians have a preference on Visual Basic\/VBA, while Database Engineers on SQL.\n\nLooking at the title of your dream job, you can now decide what to learn first!","062723ca":"#### Outcome\n* Wow, Coursera is the first educating platform for all the professions.\n* Next comes Udemy for Data Engineers, Product\/Project Managers, Chief Officers and Advocates\/Data Journalists and DataCamp for all the kind of Analyst professions, the Statisticians and the Data Scientists.\n* Udacity and EdX are next in the list for most of the professions.","60a1800e":"### What to chase: Independent projects or academic achievements?","a7552664":"#### Outcome\nLooks like Python, R, and SQL are the top choices recommended to aspiring data scientists.\n","b59cf681":"#### Outcome\n* Software Engineers, Data Scientists & Engineers, and Developer Advocates are the ones spending more than 50% of their time coding.\n* All kinds of Managers, Marketing Analysts and Salespeople spent the least time coding.\n* The rest are somewhere in the middle.","525aebea":"#### Outcome\nAn interesting graph to look into how the roles are varying between the countries - it looks like USA has the biggest variation in the roles. Alternatively, this is a view of how much Kaggle is being followed in different countries and by which professionals.","7e39e0bd":"### IDE used at work\/school last 5 years","55b67fea":"#### Outcome \nMostly students, quite a lot of Data Scientists\/Data Analysts and Software Engineers.","0df10287":"#### Outcome\n* Due to salary differences between the countries, there is still not so much we can infer from the resulted heatmap. \n* On the second heatmap, it is interesting to note the large amount of people decided not to disclose their salary.","54fd571a":"### Programming Language recommended","d86b990b":"### Highest education level","f81c82b5":"### Salary\n\nI decided not to include the Students in this exploration, as I expect most of them not to work and there would be a skewness towards the lower salaries. ","bfa695d1":"#### Outcome\n* Most of the professionals have either a Bachelor's or Master's degree.\n* Quite a lot of people don't even have a Bachelor's degree or formal education and they are actively working on some of the most wanted professions! So, people keep going if this is really what you truly want to do!\n* It seems that only Principal Investigators and Research Scientists are the ones who have higher percentages of people with PhD - for the rest MSc is dominant.","fc0cf5dd":"### Programming Languages used in regular basis\n","0b3a8f7a":"#### Outcome\n* All the professions believe that the independent projects are equally, slightly or more important than the academic achievements.\n* Note that the graph shows that the opinions are quite distinct to each other among the different professions. The percentages of people that say that the projects are less important are quite low on all the different groups, and the ones that say that are equally or more important are higher on all the groups. "}}