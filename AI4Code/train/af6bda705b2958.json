{"cell_type":{"d647fe29":"code","57fdc4ec":"code","b58b0878":"code","fb80c922":"code","605834de":"code","f85e3c79":"code","dace338e":"code","ca67c894":"code","78930896":"code","3426beaf":"code","0c6a5e0c":"code","a854ff43":"code","379d565c":"code","a609b10d":"code","55aa94e2":"code","5f7bc339":"code","a5ecbce7":"code","34f6a3fd":"code","f0a626ef":"code","cb76dafb":"code","007c4fff":"code","9e0a4533":"code","e79ae08d":"code","5175224a":"code","53c97665":"code","2023cc89":"markdown","0f1d4433":"markdown","bc84efd8":"markdown","1b36d8e9":"markdown","050f9aa6":"markdown","1d43619f":"markdown","eba2f9fd":"markdown","a8da70ca":"markdown","0d11eef8":"markdown","014e088f":"markdown","582bfd69":"markdown","58702032":"markdown","86a206d2":"markdown","a9c1ef9e":"markdown","68600a13":"markdown","4aaf50db":"markdown"},"source":{"d647fe29":"import os; print(os.listdir(\"..\/input\/stage2wdatafiles\"))\nimport numpy as np\nimport pandas as pd\nimport warnings; warnings.filterwarnings(\"ignore\")\n\n%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()\n\nfrom sklearn.metrics import log_loss\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","57fdc4ec":"data_dir = '..\/input\/stage2wdatafiles\/'\ndf_seed = pd.read_csv(data_dir + 'WNCAATourneySeeds.csv')\ndf_result = pd.read_csv(data_dir + 'WNCAATourneyCompactResults.csv')\n\ndf_seed.tail(3)\ndf_result.tail(3)","b58b0878":"def seed_to_int(seed):\n    s_int = int(seed[1:3])\n    return s_int\n\ndef clean_df(df_seed, df_result):\n    df_seed['seed_int'] = df_seed['Seed'].apply(seed_to_int)\n    df_seed.drop(['Seed'], axis=1, inplace=True)\n    df_result.drop(['DayNum', 'WLoc', 'NumOT'], axis=1, inplace=True)\n    return df_seed, df_result\n\ndf_seed, df_result = clean_df(df_seed, df_result)\ndf_seed.head(3)\ndf_result.head(3)","fb80c922":"## Merge seed for each team\ndef merge_seed_result(df_seed, df_result):\n    df_win_seed = df_seed.rename(columns={'TeamID':'WTeamID', 'seed_int':'WSeed'})\n    df_loss_seed = df_seed.rename(columns={'TeamID':'LTeamID', 'seed_int':'LSeed'})\n    df_result = df_result.merge(df_win_seed, how='left', on=['Season', 'WTeamID'])\n    df_result = df_result.merge(df_loss_seed, how='left', on=['Season', 'LTeamID'])\n    df_result['SeedDiff'] = np.abs(df_result['WSeed'] - df_result['LSeed'])\n    df_result['ScoreDiff'] = np.abs(df_result['WScore'] - df_result['LScore'])\n    return df_result\n\ndf_result = merge_seed_result(df_seed, df_result)\ndf_result.head(3)","605834de":"df_result = df_result[df_result['ScoreDiff']>3]","f85e3c79":"df_result['upset'] = [1 if ws > ls else 0 for ws, ls, in zip(df_result[\"WSeed\"], df_result[\"LSeed\"])]\n\nprint(\"upset probability\")\ndf_result['upset'].value_counts() \/ len(df_result) * 100","dace338e":"this_season=2019\ntotal_season=10\n\ntrain = df_result[ (df_result[\"Season\"]>=(this_season - total_season)) & (df_result[\"Season\"]<(this_season-1)) ]\nprint(train.shape)","ca67c894":"df_result[\"Seed_combi\"]=[str(ws)+'_'+str(ls) if ws<ls else str(ls)+'_'+str(ws) for ws, ls in zip(df_result[\"WSeed\"], df_result[\"LSeed\"])]\ndf_result.head(3)","78930896":"df_result_aggs = pd.DataFrame()\ndf_result_filter_aggs = pd.DataFrame()\ndf_result_season = df_result[ (df_result[\"Season\"]>=(this_season - total_season)) & (df_result[\"Season\"]<(this_season-1)) ]\nfor value in range(16):\n    df_result_agg = df_result_season[df_result_season[\"SeedDiff\"]==value].groupby(\"SeedDiff\").agg({\"upset\": [\"mean\", \"count\"]})\n    df_result_agg.columns = [col[0]+\"_\"+col[1]+\"_\"+\"all\" for col in df_result_agg.columns]\n    df_result_filter_agg = df_result_season[df_result_season[\"SeedDiff\"]==value].groupby(\"Seed_combi\").agg({\"upset\": [\"mean\", \"count\"]})\n    df_result_filter_agg.columns = [col[0]+\"_\"+col[1] for col in df_result_filter_agg.columns]\n    if value==0:\n        df_result_agg[\"upset_mean_all\"] = 0.5\n        df_result_filter_agg[\"upset_mean\"] = 0.5\n    df_result_aggs = pd.concat([df_result_aggs, df_result_agg])\n    df_result_filter_aggs = pd.concat([df_result_filter_aggs, df_result_filter_agg])\n\ndf_result_aggs\ndf_result_filter_aggs.tail(10)","3426beaf":"sns.barplot(df_result_aggs.index, df_result_aggs.upset_mean_all)\nplt.title('probability of upset based on past result aggretation')\nplt.show()","0c6a5e0c":"df_result = df_result.join(df_result_aggs, how='left', on=\"SeedDiff\").join(df_result_filter_aggs, how='left', on='Seed_combi')\ndf_result[\"upset_prob\"] = [m if c > 20 else a for a, m, c in zip(df_result[\"upset_mean_all\"], df_result[\"upset_mean\"], df_result[\"upset_count\"])]\ndf_result.tail()","a854ff43":"valid = df_result[ (df_result[\"Season\"]==(this_season-1)) ]\nlog_loss(valid['upset'], valid['upset_prob'])","379d565c":"df_result_aggs.loc[0, 'upset_mean_all'] = 0.5\ndf_result_aggs.loc[6, 'upset_mean_all'] = (0.0 + df_result_aggs.loc[7, 'upset_mean_all']) \/ 2\ndf_result_aggs.loc[12, 'upset_mean_all'] = 0.0\ndf_result_aggs.loc[14, 'upset_mean_all'] = 0.0\ndf_result_aggs = df_result_aggs.rename(columns={'upset_mean_all': 'upset_prob_manually'})\n\nsns.barplot(df_result_aggs.index, df_result_aggs.upset_prob_manually)\nplt.title('probability of upset based on past result aggretation')\nplt.show()","a609b10d":"valid.head(3)","55aa94e2":"valid = df_result[ (df_result[\"Season\"]==(this_season-1)) ]\nvalid = valid.join(df_result_aggs.drop(\"upset_count_all\", axis=1), how='left', on='SeedDiff')\nvalid.fillna(0, inplace=True)\nlog_loss(valid['upset'], valid['upset_prob_manually'])","5f7bc339":"log_loss(valid['upset'], np.clip(valid['upset_prob_manually'], 0.05, 0.95))","a5ecbce7":"df_seed_2019 = df_seed[df_seed[\"Season\"]==2019]","34f6a3fd":"this_season=2019\ntotal_season=10\n\ntrain = df_result[ (df_result[\"Season\"]>=(this_season - total_season)) ]\nprint(train.shape)\n\ndf_result[\"Seed_combi\"]=[str(ws)+'_'+str(ls) if ws<ls else str(ls)+'_'+str(ws) for ws, ls in zip(df_result[\"WSeed\"], df_result[\"LSeed\"])]\ndf_result.head()","f0a626ef":"df_result_aggs = pd.DataFrame()\ndf_result_filter_aggs = pd.DataFrame()\nfor value in range(16):\n    df_result_agg = df_result[df_result[\"SeedDiff\"]==value].groupby(\"SeedDiff\").agg({\"upset\": [\"mean\", \"count\"]})\n    df_result_agg.columns = [col[0]+\"_\"+col[1]+\"_\"+\"all\" for col in df_result_agg.columns]\n    df_result_filter_agg = df_result[df_result[\"SeedDiff\"]==value].groupby(\"Seed_combi\").agg({\"upset\": [\"mean\", \"count\"]})\n    df_result_filter_agg.columns = [col[0]+\"_\"+col[1] for col in df_result_filter_agg.columns]\n    if value==0:\n        df_result_agg[\"upset_mean_all\"] = 0.5\n        df_result_filter_agg[\"upset_mean\"] = 0.5\n    df_result_aggs = pd.concat([df_result_aggs, df_result_agg])\n    df_result_filter_aggs = pd.concat([df_result_filter_aggs, df_result_filter_agg])\n\ndf_result_aggs\ndf_result_filter_aggs.tail(10)","cb76dafb":"sns.barplot(df_result_aggs.index, df_result_aggs.upset_mean_all)\nplt.title('probability of upset based on past result aggretation')\nplt.show()","007c4fff":"# manual smoothing\ndf_result_aggs.loc[0, 'upset_mean_all'] = 0.5\ndf_result_aggs.loc[10, 'upset_mean_all'] = (0.0 + df_result_aggs.loc[11, 'upset_mean_all']) \/ 2\ndf_result_aggs.loc[11, 'upset_mean_all'] = (0.0 + df_result_aggs.loc[15, 'upset_mean_all']) \/ 2\ndf_result_aggs.loc[12, 'upset_mean_all'] = (0.0 + df_result_aggs.loc[15, 'upset_mean_all']) \/ 2\ndf_result_aggs.loc[13, 'upset_mean_all'] = (0.0 + df_result_aggs.loc[15, 'upset_mean_all']) \/ 2\ndf_result_aggs.loc[14, 'upset_mean_all'] = (0.0 + df_result_aggs.loc[15, 'upset_mean_all']) \/ 2\ndf_result_aggs = df_result_aggs.fillna(-1)\n\nsns.barplot(df_result_aggs.index, df_result_aggs.upset_mean_all)\nplt.title('probability of upset based on past result aggretation')\nplt.show()","9e0a4533":"test = pd.read_csv(\"..\/input\/WSampleSubmissionStage2.csv\")\ntest = pd.DataFrame(np.array([ID.split(\"_\") for ID in test[\"ID\"]]), columns=[\"Season\", \"TeamA\", \"TeamB\"], dtype=int)\ntest.head(3)\n\ntest = test.merge(df_seed_2019, how='left', left_on=[\"Season\", \"TeamA\"], right_on=[\"Season\", \"TeamID\"])\ntest = test.rename(columns={\"seed_int\": \"TeamA_seed\"}).drop(\"TeamID\", axis=1)\n\ntest = test.merge(df_seed_2019, how='left', left_on=[\"Season\", \"TeamB\"], right_on=[\"Season\", \"TeamID\"])\ntest = test.rename(columns={\"seed_int\": \"TeamB_seed\"}).drop(\"TeamID\", axis=1)\n\ntest['SeedDiff'] = np.abs(test.TeamA_seed - test.TeamB_seed)\ntest.head(3)","e79ae08d":"test[\"Seed_combi\"]=[str(a)+'_'+str(b) if a<b else str(b)+'_'+str(a) for a, b in zip(test[\"TeamA_seed\"], test[\"TeamB_seed\"])]\ntest.head()\n\ntest = test.join(df_result_aggs, how='left', on=\"SeedDiff\").join(df_result_filter_aggs, how='left', on='Seed_combi').fillna(-1)\ntest[\"upset_prob\"] = [m if c > 20 else a for a, m, c in zip(test[\"upset_mean_all\"], test[\"upset_mean\"], test[\"upset_count\"])]\n\n# convert upset_prob to win_prob\ntest[\"win_prob\"] = [(1-upset_prob) if teamA<teamB else upset_prob if teamA>teamB else 0.5 \n                    for teamA, teamB, upset_prob in zip(test['TeamA_seed'], test['TeamB_seed'], test['upset_prob'])]\ntest.tail()","5175224a":"submit = pd.read_csv(\"..\/input\/WSampleSubmissionStage2.csv\")\nsubmit[\"Pred\"] = test['win_prob']\nsubmit.to_csv(\"submission_agg_all_manually_noclip.csv\", index=False)\nsubmit.head()","53c97665":"clipped_sub = np.clip(test['win_prob'], 0.05, 0.95)\n\nsubmit = pd.read_csv(\"..\/input\/WSampleSubmissionStage2.csv\")\nsubmit[\"Pred\"] = clipped_sub\nsubmit.to_csv(\"submission_agg_all_manually_cliped.csv\", index=False)\nsubmit.head()","2023cc89":"**Scoring**","0f1d4433":"### Test\n\n- Train: 2009~2018  \n- Test: 2019","bc84efd8":"### Validation\n\n**We can make use of the last competition for validating score**\n\n- Train: 2009~2017  \n- Test: 2018  ","1b36d8e9":"## Upset Modeling","050f9aa6":"**Scoring**","1d43619f":"**Use only last 10 seasons, since some trends are likely to be changed**","eba2f9fd":"**Remove the games that end within 3 points difference, which are likely to be the other results**","a8da70ca":"**Clipping**\n\n**for making the model conservative**","0d11eef8":"**Aggregation**","014e088f":"**Merge upset probability**","582bfd69":"## Preprocess","58702032":"**Let's show barplot**","86a206d2":"Congraturations on Baylor University and thanks for hosting this exciting competition!  \n\nI ended up in the bronze medal, but want to share my simple solution, based on [starter kernel](https:\/\/www.kaggle.com\/addisonhoward\/basic-starter-kernel-ncaa-women-s-dataset-2019).  \n\nMy solution is not complicated:  \n\n**It predicts the probability of the occurrence of the upset, which means that the low seed rank team beats the high seed rank team, aggregating past game results**  ","a9c1ef9e":"**The probability of the occurrence of the upset is likely to be different between a game 1st seed vs. 6th seed and a game 11th seed vs. 16th seed, so I want to include the information**","68600a13":"**manual smoothing**","4aaf50db":"---"}}