{"cell_type":{"b59a2aaa":"code","12cc1a3f":"code","bdf0eeea":"code","5ac7f284":"code","b5ecd8c1":"code","70835b81":"code","a48f0ad6":"code","44b387a5":"code","a182758a":"code","7b63911f":"code","ccdba7cf":"code","477bbb1e":"code","9b2e5d3e":"code","477f0aa4":"code","1def2075":"code","5541541c":"code","412925c4":"code","11f5701d":"code","b97336ee":"code","41771aa8":"code","c39b58e3":"code","afea123d":"code","0c61d004":"code","a0e9adc5":"code","eb0eb72c":"code","62d297c7":"code","ad3c70ce":"code","7846e40e":"code","5900fb6f":"code","14531a6d":"markdown"},"source":{"b59a2aaa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","12cc1a3f":"data = pd.read_csv('\/kaggle\/input\/population-time-series-data\/POP.csv')\n\ndata.head()","bdf0eeea":"data = data[['date', 'value']]\ndata.head()","5ac7f284":"data.date.tail()","b5ecd8c1":"import matplotlib.pyplot as plt","70835b81":"plt.plot(data.date, data.value)","a48f0ad6":"data.date = pd.to_datetime(data.date)","44b387a5":"from pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nplt.plot(data.date, data.value)","a182758a":"len(data)","7b63911f":"data.describe()","ccdba7cf":"data.info()","477bbb1e":"sigma = data.value.std()\nnu = data.value.mean()\ndef z(x):\n    return (x-nu)\/sigma\ndata.value = data.value.apply(z)","9b2e5d3e":"import seaborn as sns","477f0aa4":"sns.boxplot(data.value)","1def2075":"train_data = data[:720]\ntest_data = data[720:]","5541541c":"# creating training data\nlookback = 11  # creating timestep of 12 months i.e 1trainyear\n\ntrainx = []\ntrainy = []\ntemp = []\nfor i in range(len(train_data.value)-lookback):\n    temp.append(train_data.value[i:i+lookback])\n    trainy.append(train_data.value[i+lookback])\n    trainx.append(temp)\n    temp = []","412925c4":"test_data.head()","11f5701d":"# creating testing data\nlookback = 11 \ntestx = []\ntesty = []\ntemp = []\nfor i in range(len(test_data.value)-lookback):\n    temp.append(test_data.value.iloc[i:i+lookback])\n    testy.append(test_data.value.iloc[i+lookback])\n    testx.append(temp)\n    temp = []\ntdata=test_data.iloc[:i+1]","b97336ee":"trainx = np.array(trainx)\ntrainy = np.array(trainy)\ntestx = np.array(testx)\ntesty = np.array(testy)","41771aa8":"trainx = trainx.reshape(trainx.shape[0], 11,1)\ntestx = testx.reshape(testx.shape[0],11, 1)","c39b58e3":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import *","afea123d":"model = Sequential([\n    Bidirectional(LSTM(32, activation='relu', input_shape=(11, 1), return_sequences=True)),\n#     Dropout(0.5),\n    Bidirectional(LSTM(64, activation='relu',  return_sequences=True)),\n#     Bidirectional(LSTM(128, activation='relu', return_sequences=True)),\n#     Dropout(0.5),\n    Bidirectional(LSTM(256, activation='elu')),\n#     Dropout(0.5),\n    Dense(1028, activation='relu'),\n    Dense(1)\n])","0c61d004":"model.compile(loss='mse', optimizer='adam', metrics=['mse'])","a0e9adc5":"model.summary()","eb0eb72c":"history = model.fit(trainx, trainy, batch_size=64, validation_split=0.2, epochs=100, )","62d297c7":"plt.plot(history.history['val_loss'])\nplt.plot(history.history['loss'])\nplt.legend(['val_loss', 'loss'])","ad3c70ce":"plt.plot(history.history['val_mse'])\nplt.plot(history.history['mse'])\nplt.legend(['val_mse', 'mse'])","7846e40e":"pred = model.predict(testx)\n\ntdata=test_data.iloc[:i+1]\n\n# pred = pred.flatten()\n\ntdata['pred'] = pred","5900fb6f":"plt.figure(figsize=[10, 5])\nplt.plot(train_data.value)\nplt.plot(test_data.value, )\nplt.plot(tdata.pred)","14531a6d":"trainx = data[:500]\ntestx = data[500:]\ntrainy = data[:500]\ntesty = data[500:]"}}