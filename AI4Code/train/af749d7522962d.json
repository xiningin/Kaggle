{"cell_type":{"d9612392":"code","58756d7b":"code","6dc86f30":"code","97f67a31":"code","81b7c429":"code","259df5fe":"code","407c5240":"code","fd9b3053":"code","fd13ac96":"code","90479938":"code","7ed05d0f":"code","5bfc0abc":"code","2f58228a":"code","8fd2094c":"code","74a4f730":"code","2f132b7e":"code","f1e7fe99":"code","8b10456d":"code","dbbcbc2b":"code","0da4d23c":"code","7e00a201":"code","2c02ff68":"code","a658b69a":"code","96622467":"code","fa8117c7":"code","61f9c19a":"code","425d1428":"code","0c0b1c27":"code","c7b354e3":"code","c8daa010":"code","46cf5c2b":"code","810071ab":"code","f39ba957":"code","5f1e9d0b":"code","c09767ed":"code","5607aaec":"code","b74deba4":"code","93555db2":"code","d3cd6c2d":"code","3fe6bfe5":"code","2193f320":"code","38247d2f":"code","69e3e8b7":"code","67512545":"code","342fe34f":"code","fd9db556":"code","e3c69207":"code","8a05d77f":"code","8e8d3ca5":"code","81c7d4cf":"code","2eec5d04":"code","3a06f198":"code","f61d4738":"code","89bae4ce":"code","131e5280":"code","7e060308":"code","2eff7eee":"markdown","6b41dfac":"markdown","a4203c42":"markdown","42e23efa":"markdown","bc5aabcb":"markdown","d3f553aa":"markdown","14a421d5":"markdown","0a6dd721":"markdown","ade0f8cc":"markdown","b8de82db":"markdown","82cfdbad":"markdown","0337baec":"markdown","304af00a":"markdown","ebec0949":"markdown","7948baa7":"markdown","f8d190b3":"markdown","d980197e":"markdown","bf92614d":"markdown","db00a4d4":"markdown","eb1ba1c4":"markdown","b2e893b0":"markdown","6029f600":"markdown","93e41a5b":"markdown","1a7cbe49":"markdown","357d3709":"markdown","7a5d10bc":"markdown","8c521c28":"markdown","0224c416":"markdown","4991c655":"markdown","31dfdf76":"markdown","6c34bb0e":"markdown","eded26b1":"markdown","b81c6561":"markdown","023281a8":"markdown","a138c137":"markdown","02dace30":"markdown","b467a643":"markdown","3a82ab97":"markdown"},"source":{"d9612392":"import json\nimport os\nfrom argparse import ArgumentParser\n\nimport cv2\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom matplotlib.patches import Polygon","58756d7b":"pd.set_option(\"display.max_columns\", 999)\nsns.set_style('white')","6dc86f30":"DATA_PATH = \"..\/input\/made-cv-2021-contest-02-license-plate-recognition\/data\"\n\nGEN_WIDTH = 235\nGEN_HEIGHT = 50\nIMAGE_POINTS = np.float32([\n    [0, 0],\n    [GEN_WIDTH, 0],\n    [0, GEN_HEIGHT],\n    [GEN_WIDTH, GEN_HEIGHT]\n])","97f67a31":"config_filename = os.path.join(DATA_PATH, \"train.json\")\nwith open(config_filename, \"rt\") as fp:\n    config = json.load(fp)","81b7c429":"num_images = len(config)\nnum_boxes = sum([len(item[\"nums\"]) for item in config])","259df5fe":"def plot_image(image, bboxes=None, title=None, annotate=False, ax=None):\n    if ax is None:\n        fig, ax = plt.subplots(figsize=(10, 10))\n    ax.imshow(image)\n    \n    if bboxes is not None:\n        for num in bboxes:\n            bbox = np.asarray(num)\n            imbox = Polygon(bbox, linewidth=3, edgecolor='r', facecolor='none')\n            ax.add_patch(imbox)\n            if annotate:\n                props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)\n                for i in range(len(bbox)):\n                    ax.annotate(f\"Point #{i}\", bbox[i], fontsize=10, bbox=props)\n    \n    if title is not None:\n        ax.set_title(title)\n\ndef plot_images(images, bboxes=None, titles=None, annotate=False, n_cols=2, hw_ratio=1.0):\n    n_rows = np.ceil(len(images) \/ n_cols).astype(int)\n    size = 16 \/\/ n_cols\n    \n    fig, axes = plt.subplots(n_rows, n_cols, figsize=(size * n_cols, size * n_rows * hw_ratio))\n    axes = axes.flatten()\n    for i in range(len(images)):\n        plot_image(\n            images[i], \n            bboxes=None if bboxes is None else bboxes[i], \n            title=None if titles is None else titles[i], \n            annotate=annotate, \n            ax=axes[i]\n        )","407c5240":"def get_image(config, idx=None, data_dir=DATA_PATH):\n    if idx is None:\n        idx = np.random.choice(len(config))\n\n    image_filename = config[idx][\"file\"]\n    nums = config[idx][\"nums\"]\n    bboxes = [num[\"box\"] for num in nums]\n    texts = [num[\"text\"] for num in nums]\n    \n    image = cv2.imread(os.path.join(data_dir, image_filename))\n    return image, bboxes, texts, image_filename\n\ndef get_images(config, count=6, indices=None, data_dir=DATA_PATH):\n    if indices is None:\n        indices = np.random.choice(len(config), count, replace=False)\n    else:\n        count = len(indices)\n\n    image_list, bboxes_list, texts_list, image_filename_list = list(), list(), list(), list()\n    \n    for i in range(count):\n        image, bboxes, texts, image_filename = get_image(config, idx=indices[i], data_dir=data_dir)\n        image_list.append(image)\n        bboxes_list.append(bboxes)\n        texts_list.append(texts)\n        image_filename_list.append(image_filename)\n\n    return image_list, bboxes_list, texts_list, image_filename_list","fd9b3053":"def order_points(points):\n    diff = [points[1][i] - points[0][i] for i in range(2)]\n    if diff[0] > diff[1]:\n        order = [points[0], points[1], points[3], points[2]]\n    else:\n        order = [points[0], points[3], points[1], points[2]]\n    return np.float32(order)\n\ndef get_transform(image, points):\n    transform_matrix = cv2.getPerspectiveTransform(points, IMAGE_POINTS)\n    box = cv2.warpPerspective(image, transform_matrix, (GEN_WIDTH, GEN_HEIGHT))\n    return box\n\ndef get_crop(image, box):\n    x_min = np.clip(min(box[:, 0]), 0, image.shape[1])\n    x_max = np.clip(max(box[:, 0]), 0, image.shape[1])\n    y_min = np.clip(min(box[:, 1]), 0, image.shape[0])\n    y_max = np.clip(max(box[:, 1]), 0, image.shape[0])\n    return image[y_min: y_max, x_min: x_max]\n\ndef get_transformed_plate(image, bbox):\n    points = order_points(bbox)\n    plate = get_transform(image, points)\n    return plate\n\ndef get_cropped_plate(image, bbox):\n    points = np.array(bbox)\n    plate = get_crop(image, points)\n    return plate\n\ndef get_plates(images, bboxes, transform_func):\n    plates = list()\n    plates_names = list()\n    for n_image in range(len(images)):\n        for n_box, bbox in enumerate(bboxes[n_image]):\n            plate = transform_func(images[n_image], bbox)\n            plates.append(plate)\n    return plates","fd13ac96":"image_list, bboxes_list, texts_list, image_filename_list = get_images(config, count=9)\nplot_images(image_list, bboxes_list, image_filename_list, n_cols=3, hw_ratio=0.75)","90479938":"plates = get_plates(image_list, bboxes_list, get_cropped_plate)\nplates_texts = [item for sublist in texts_list for item in sublist]\nplot_images(plates, titles=plates_texts, n_cols=3, hw_ratio=0.5)","7ed05d0f":"plates = get_plates(image_list, bboxes_list, get_transformed_plate)\nplates_texts = [item for sublist in texts_list for item in sublist]\nplot_images(plates, titles=plates_texts, n_cols=3, hw_ratio=0.35)","5bfc0abc":"from collections import defaultdict\n\ndef PolyArea(x,y):\n    return 0.5*np.abs(np.dot(x,np.roll(y,1))-np.dot(y,np.roll(x,1)))\n\ndef get_angle(box):\n    coord_left = (box[0] + box[3]) \/ 2\n    coord_right = (box[1] + box[2]) \/ 2\n    angle = np.arctan2((coord_right[1] - coord_left[1]), (coord_right[0] - coord_left[0]))\n    return np.degrees(angle)\n\ndef get_ratio(min_coord, max_coord):\n    return (max_coord[1] - min_coord[1]) \/ (max_coord[0] - min_coord[0])\n\ndef get_params(config):\n    params_images = defaultdict(list)\n    params = defaultdict(list)\n    item_warnings = []\n\n    for item in tqdm(config):\n        image_filename = item[\"file\"]\n        nums = item[\"nums\"]\n        boxes = [num[\"box\"] for num in nums]\n        texts = [num[\"text\"] for num in nums]\n        image = cv2.imread(os.path.join(DATA_PATH, image_filename))\n        if image is None:\n            item_warnings.append({\"image_name\": image_filename, \"warning\": \"image is None\"})\n            continue\n        shape = np.array(image.shape[:-1][::-1])\n        params_images['image_name'].append(image_filename)\n        params_images['image_shape'].append(shape)\n        params_images['channels'].append(image.mean(axis=(0, 1)))\n        params_images['brightness'].append(image.mean())\n        params_images['num_boxes'].append(len(boxes))\n        params_images['ratio'].append(shape[0] \/ shape[1])\n        params_images['area'].append(shape.prod())\n\n        for i, box in enumerate(boxes):\n            box = np.array(box)\n            plate = get_transformed_plate(image, box)\n            center = box.mean(axis=0)\n            plate_area = PolyArea(box[:, 0], box[:, 1])\n\n            params['image_name'].append(image_filename)\n            params['label'].append(texts[i])\n            params['box_min_coord'].append(box.min(axis=0))\n            params['box_max_coord'].append(box.max(axis=0))\n            params['box_area'].append(plate_area)\n            params['center_coord'].append(center)\n            params['plate_channels'].append(plate.mean(axis=(0, 1)))\n            params['brightness'].append(plate.mean())\n            params['plate_angle'].append(get_angle(box))\n            params['box_ratio'].append(get_ratio(box.min(axis=0), box.max(axis=0)))\n\n            params['rel_box_min_coord'].append(box.min(axis=0) \/ shape)\n            params['rel_box_max_coord'].append(box.max(axis=0) \/ shape)\n            params['rel_box_area'].append(plate_area \/ shape.prod())\n            params['rel_center_coord'].append(center \/ shape)\n            params['rel_plate_channels'].append(plate.mean(axis=(0, 1)) \/ image.mean(axis=(0, 1)))\n\n            if np.any(box.min(axis=0) < 0):\n                item_warnings.append({\"image_name\": image_filename, \"warning\": \"box coord < 0\"})\n\n            if np.any(box.max(axis=0) > shape):\n                item_warnings.append({\"image_name\": image_filename, \"warning\": \"box coord > image shape\"})\n    return params_images, params, item_warnings","2f58228a":"def get_df_cols(cols):\n    df_cols = list()\n    for col in cols:\n        if 'channels' in col:\n            df_cols.extend([f'{col}_r', f'{col}_g', f'{col}_b'])\n        elif 'coord' in col or 'shape' in col:\n            df_cols.extend([f'{col}_x', f'{col}_y'])\n        else:\n            df_cols.append(col)\n    return df_cols\n\ndef get_df(params, text_cols):\n    n_rows = len(params['image_name'])\n    cols = list(params.keys())\n    df = np.concatenate([\n        np.array(params[col]).reshape((n_rows, -1)) for col in params.keys() if col in cols\n    ], axis=1)\n    df = pd.DataFrame(df, columns=get_df_cols(cols))\n    \n    numeric_cols = [col for col in df.columns if col not in text_cols]\n    df[numeric_cols] = df[numeric_cols].astype(float)\n    return df","8fd2094c":"params_images, params, item_warnings = get_params(config)","74a4f730":"text_cols = ['image_name', 'label']\ndf_images = get_df(params_images, text_cols)\ndf_plates = get_df(params, text_cols)\ndf_images.shape, df_plates.shape","2f132b7e":"df_images.to_csv(\"df_images.csv\", index=False)\ndf_plates.to_csv(\"df_plates.csv\", index=False)","f1e7fe99":"df_images.head()","8b10456d":"df_images.describe()","dbbcbc2b":"cols_to_show = ['image_shape_x', 'image_shape_y', 'area', 'ratio', 'brightness', 'num_boxes']\ndf_images[cols_to_show].hist(figsize=(12, 10), bins=25);","0da4d23c":"df_images['num_boxes'].value_counts()","7e00a201":"df_images['ratio'].value_counts().iloc[:5]","2c02ff68":"image_list, bboxes_list, texts_list, image_filename_list = get_images(config, indices=df_images[df_images['num_boxes'] > 3].index)\nplot_images(image_list, bboxes_list, image_filename_list, n_cols=3, hw_ratio=0.75)","a658b69a":"image_list, bboxes_list, texts_list, image_filename_list = get_images(config, indices=df_images[df_images['ratio'] > 3].index)\nplot_images(image_list, bboxes_list, image_filename_list, n_cols=1, hw_ratio=0.2)","96622467":"image_list, bboxes_list, texts_list, image_filename_list = get_images(config, indices=df_images[df_images['ratio'] < 0.6].index)\nplot_images(image_list, bboxes_list, image_filename_list, n_cols=2, hw_ratio=1.5)","fa8117c7":"df_plates.head()","61f9c19a":"df_plates.describe()","425d1428":"df_plates[[\n    'center_coord_x', 'center_coord_y', 'plate_angle',\n    'rel_center_coord_x', 'rel_center_coord_y', \n    'box_area', 'rel_box_area', 'box_ratio', 'brightness'\n]].hist(figsize=(16, 12), bins=25);","0c0b1c27":"print(f\"\u0414\u043e\u043b\u044f box \u0432 \u043b\u0435\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f: {(df_plates['rel_center_coord_x'] < 0.5).mean():.2%}\")\nprint(f\"\u0414\u043e\u043b\u044f box \u0432 \u043d\u0438\u0436\u043d\u0435\u0439 \u0447\u0430\u0441\u0442\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f: {(df_plates['rel_center_coord_y'] > 0.5).mean():.2%}\")\nprint(f\"\u0414\u043e\u043b\u044f box \u0441 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435\u043c \u0441\u0442\u043e\u0440\u043e\u043d \u0431\u043e\u043b\u044c\u0448\u0435 1: {(df_plates['box_ratio'] > 1).mean():.2%}\")\nprint(f\"\u0414\u043e\u043b\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u0441\u0435\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0435 0.03: {(df_plates['rel_box_area'] > 0.03).mean():.2%}\")","c7b354e3":"get_index = lambda x: x.split('\/')[1].split('.')[0]\nindices = df_plates.loc[df_plates['rel_box_area'] > 0.2, 'image_name'].apply(get_index).astype(int).tolist()\n\nimage_list, bboxes_list, texts_list, image_filename_list = get_images(config, indices=indices)\nplot_images(image_list, bboxes_list, image_filename_list, n_cols=2, hw_ratio=0.6)","c8daa010":"indices = df_plates.loc[df_plates['rel_box_area'] < 0.00016, 'image_name'].apply(get_index).astype(int).tolist()\nindices = list(set(indices)) # \u043e\u0434\u043d\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0432\u0430\u0436\u0434\u044b\n\nimage_list, bboxes_list, texts_list, image_filename_list = get_images(config, indices=indices)\nplot_images(image_list, bboxes_list, image_filename_list, n_cols=3, hw_ratio=0.75)\n\nplates = get_plates(image_list, bboxes_list, get_transformed_plate)\nplates_texts = [item for sublist in texts_list for item in sublist]\nplot_images(plates, titles=plates_texts, n_cols=3, hw_ratio=0.35)","46cf5c2b":"indices = df_plates.loc[df_plates['box_area'] < 320, 'image_name'].apply(get_index).astype(int).tolist()\nindices = list(set(indices))\n\nimage_list, bboxes_list, texts_list, image_filename_list = get_images(config, indices=indices)\nplot_images(image_list, bboxes_list, image_filename_list, n_cols=3, hw_ratio=0.75)\n\nplates = get_plates(image_list, bboxes_list, get_transformed_plate)\nplates_texts = [item for sublist in texts_list for item in sublist]\nplot_images(plates, titles=plates_texts, n_cols=3, hw_ratio=0.35)","810071ab":"indices = df_plates.loc[df_plates['box_ratio'] > 1.2, 'image_name'].apply(get_index).astype(int).tolist()\n\nimage_list, bboxes_list, texts_list, image_filename_list = get_images(config, indices=indices)\nplot_images(image_list, bboxes_list, image_filename_list, n_cols=3, hw_ratio=0.75)","f39ba957":"indices = df_plates.loc[df_plates['box_ratio'] < 0.14, 'image_name'].apply(get_index).astype(int).tolist()\n\nimage_list, bboxes_list, texts_list, image_filename_list = get_images(config, indices=indices)\nplot_images(image_list, bboxes_list, image_filename_list, n_cols=3, hw_ratio=0.75)","5f1e9d0b":"df_images[['channels_r', 'channels_g', 'channels_b']].mean()","c09767ed":"df_plates[['plate_channels_r', 'plate_channels_g', 'plate_channels_b']].mean()","5607aaec":"df_plates[['rel_plate_channels_r', 'rel_plate_channels_g', 'rel_plate_channels_b']].mean()","b74deba4":"indices = df_plates.loc[df_plates['brightness'] < 9, 'image_name'].apply(get_index).astype(int).tolist()\n\nimage_list, bboxes_list, texts_list, image_filename_list = get_images(config, indices=indices)\nplot_images(image_list, bboxes_list, image_filename_list, n_cols=3, hw_ratio=0.6)\n\nplates = get_plates(image_list, bboxes_list, get_transformed_plate)\nplates_texts = [item for sublist in texts_list for item in sublist]\nplot_images(plates, titles=plates_texts, n_cols=3, hw_ratio=0.35)","93555db2":"indices = df_plates.loc[df_plates['brightness'] > 245, 'image_name'].apply(get_index).astype(int).tolist()\n\nimage_list, bboxes_list, texts_list, image_filename_list = get_images(config, indices=indices)\nplot_images(image_list, bboxes_list, image_filename_list, n_cols=3, hw_ratio=0.75)\n\nplates = get_plates(image_list, bboxes_list, get_transformed_plate)\nplates_texts = [item for sublist in texts_list for item in sublist]\nplot_images(plates, titles=plates_texts, n_cols=3, hw_ratio=0.35)","d3cd6c2d":"indices = df_plates.loc[\n    ((df_plates['plate_channels_g'] - df_plates[['plate_channels_r', 'plate_channels_b']].mean(axis=1)) > 54) | \n    ((df_plates['plate_channels_r'] - df_plates[['plate_channels_g', 'plate_channels_b']].mean(axis=1)) > 110) |\n    ((df_plates['plate_channels_b'] - df_plates[['plate_channels_g', 'plate_channels_r']].mean(axis=1)) > 76), \n    'image_name'\n].apply(get_index).astype(int).tolist()\n\nimage_list, bboxes_list, texts_list, image_filename_list = get_images(config, indices=indices)\nplot_images(image_list, bboxes_list, image_filename_list, n_cols=3, hw_ratio=0.75)\n\nplates = get_plates(image_list, bboxes_list, get_transformed_plate)\nplates_texts = [item for sublist in texts_list for item in sublist]\nplot_images(plates, titles=plates_texts, n_cols=3, hw_ratio=0.35)","3fe6bfe5":"import re\n\nabc = \"0123456789ABCEHKMOPTXY\"\nnum_order = list(\"0123456789\")\nabc_order = list(\"ABCEHKMOPTXY\")\n\nmapping = {\n    '\u0410': 'A',\n    '\u0412': 'B',\n    '\u0421': 'C',\n    '\u0415': 'E',\n    '\u041d': 'H',\n    '\u041a': 'K',\n    '\u041c': 'M',\n    '\u041e': 'O',\n    '\u0420': 'P',\n    '\u0422': 'T',\n    '\u0425': 'X',\n    '\u0423': 'Y',\n}\n\ndef convert_to_eng(text, mapping=mapping):\n    return ''.join([mapping.get(a, a) for a in text])\n\ndef plot_count(plate_numbers, indices, order=None):\n    num_plots = len(indices)\n    fig, axes = plt.subplots(1, num_plots, figsize=(16, 4))\n\n    for i in range(num_plots):\n        sns.countplot(x=[l[indices[i]] for l in plate_numbers if indices[i] < len(l)], ax=axes[i], order=order)\n        \ndef check_number(num):\n    return re.match('^[ABCEHKMOPTXY][0-9]{3}[ABCEHKMOPTXY]{2}[0-9]{2,3}$', num)","2193f320":"plate_numbers_str = df_plates['label'].str.upper().apply(convert_to_eng)","38247d2f":"mask = plate_numbers_str.apply(check_number).isna()\nprint(f\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043d\u043e\u043c\u0435\u0440\u043e\u0432: {len(plate_numbers_str[mask])}\")","69e3e8b7":"show_first = 6\n\nindices = df_plates.loc[mask, 'image_name'].apply(get_index).astype(int).tolist()[:show_first]\nnames = plate_numbers_str[mask].tolist()[:show_first]\n\nimage_list, bboxes_list, texts_list, image_filename_list = get_images(config, indices=indices)\nplot_images(image_list, bboxes_list, names, n_cols=2, hw_ratio=0.75)","67512545":"plate_numbers_str = plate_numbers_str[~mask]\nplate_numbers = plate_numbers_str.apply(lambda x: list(x)).tolist()\nregions = plate_numbers_str.apply(lambda x: x[6:]).astype(int)","342fe34f":"# A[000]AA000\nplot_count(plate_numbers, [1, 2, 3], order=num_order)","fd9db556":"# [A]000[AA]000\nplot_count(plate_numbers, [0, 4, 5], order=abc_order)","e3c69207":"# A000AA[000]\nplot_count(plate_numbers, [6, 7, 8], order=num_order)","8a05d77f":"plt.figure(figsize=(16, 6))\nsns.countplot(x=regions, order=regions.value_counts().index[:30]);","8e8d3ca5":"len(item_warnings)","81c7d4cf":"item_warnings[0]","2eec5d04":"image, bboxes, texts, image_filename = get_image(config, 11803)\nplot_image(image, bboxes=bboxes, title=image_filename)","3a06f198":"item_warnings[1]","f61d4738":"image, bboxes, texts, image_filename = get_image(config, 17051)\nplot_image(image, bboxes=bboxes, title=image_filename)","89bae4ce":"image_list, bboxes_list, texts_list, image_filename_list = get_images(config, indices=[8258, 8257])\nplot_images(image_list, bboxes_list, image_filename_list, n_cols=2, hw_ratio=0.75, annotate=True)","131e5280":"image, bboxes, texts, image_filename = get_image(config, 14300)\nplot_image(image, bboxes=bboxes, title=image_filename)","7e060308":"image, bboxes, texts, image_filename = get_image(config, 2087)\nplot_image(image, bboxes=bboxes, title=f\"{image_filename}: {texts[0]}\")","2eff7eee":"#### \u041f\u0435\u0440\u0435- \u0438 \u043d\u0435\u0434\u043e\u0441\u0432\u0435\u0447\u0435\u043d\u043d\u044b\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f","6b41dfac":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0446\u0438\u0444\u0440 \u0438 \u0431\u0443\u043a\u0432","a4203c42":"#### \u041e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043b\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043e\u0442 \u0444\u043e\u0442\u043e \u0432 \u0446\u0435\u043b\u043e\u043c","42e23efa":"## \u041b\u0435\u0439\u0431\u043b\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432","bc5aabcb":"\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043e\u043c\u0430\u043d\u043e","d3f553aa":"## Warnings","14a421d5":"#### \u0413\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f (\u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0440\u043e\u043d 4+):","0a6dd721":"\u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e \u043d\u0430 \u0432\u0430\u0448 \u0441\u0443\u0434 EDA \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044e. \u0411\u0443\u0434\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0438 \u043c\u0430\u043b\u043e \u0442\u0435\u043a\u0441\u0442\u0430)\n\n**TLDR:**\n- \u0412 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a\n- \u0415\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u0440\u0430\u0437\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0445 \u0438 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0445 \u043d\u043e\u043c\u0435\u0440\u043e\u0432\n- \u0418\u043d\u043e\u0433\u0434\u0430 \u0432 bounding box \u043f\u0435\u0440\u0435\u043f\u0443\u0442\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0447\u0435\u043a\n- \u0422\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043d\u0435\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0440\u0430\u0437\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0435 bounding box \u0438 \u0441\u0430\u043c\u0438 \u043d\u043e\u043c\u0435\u0440\u0430\n- Bounding box, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u0435\u043d\u0435\u0435 3% \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n- \u0415\u0441\u043b\u0438 \u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u044e, \u0442\u043e \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c anchor \u0441 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435\u043c \u0441\u0442\u043e\u0440\u043e\u043d w\/h \u0431\u043e\u043b\u044c\u0448\u0435 1\n\n\u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438 \u043f\u0440\u0438\u043a\u0438\u043d\u0443\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043d\u0435 \u0441\u0442\u043e\u0438\u0442, vertical flip \u0442\u0430\u043a\u0436\u0435 \u043b\u0443\u0447\u0448\u0435 \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c. \u0410 \u0432\u043e\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u0438\u0435 \u044f\u0440\u043a\u043e\u0441\u0442\u0438, RGBShift, blur, compression \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043c\u043e\u0447\u044c.","ade0f8cc":"## \u041a\u043e\u0441\u044f\u043a\u0438 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438","b8de82db":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043c\u0430\u0448\u0438\u043d. \u0414\u043b\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u043a\u043e\u0434 \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0435\u0433\u043e \u0432 \u0432\u044b\u0440\u043e\u0432\u043d\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a","82cfdbad":"\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0435\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 bounding box:","0337baec":"\u041d\u0430 \u0444\u043e\u0442\u043e 11803 bounding box \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0437\u0430 \u0440\u0430\u043c\u043a\u0438","304af00a":"# Plot","ebec0949":"- \u0432 \u0446\u0438\u0444\u0440\u0430\u0445 \u0447\u0430\u0449\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f 0\n- \u043f\u043e \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435, \u043f\u0435\u0440\u0432\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \"B\", \u043b\u0438\u0431\u043e \"A\" \u0438 \"T\"\n- \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0438\u0437 35 \u0440\u0435\u0433\u0438\u043e\u043d\u0430","7948baa7":"## \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u043f\u043e \u0444\u043e\u0442\u043e","f8d190b3":"## \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u043f\u043e \u043a\u0440\u043e\u043f\u0443 \u043d\u043e\u043c\u0435\u0440\u043e\u0432","d980197e":"#### \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0449\u0438\u0435 \u0441\u0430\u043c\u0443\u044e \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c (\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u0441\u0435\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438 \u0432 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0445 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430\u0445)","bf92614d":"# \u0410\u043d\u0430\u043b\u0438\u0437","db00a4d4":"RGB \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0430 16-17% \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0432 \u0446\u0435\u043b\u043e\u043c \u0432\u0441\u0435\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u044d\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u043d\u043e\u043c\u0435\u0440\u0435 \u043f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442 \u0431\u0435\u043b\u044b\u0439 \u0446\u0432\u0435\u0442 (255, 255, 255).","eb1ba1c4":"\u0412 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u0435\u0440\u0435\u043a\u043e\u0441\u043e\u043c \u0446\u0432\u0435\u0442\u043e\u0432, \u0442\u0430\u043a \u0447\u0442\u043e \u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0435 \u0432 \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438","b2e893b0":"\n- \u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e, \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043d\u0430 \u0444\u043e\u0442\u043e \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0430 \u043c\u0430\u0448\u0438\u043d\u0430 \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c - 5. \n- \u0427\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0440\u043e\u043d \u0444\u043e\u0442\u043e 4:3, \u043d\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435, \u0442\u0430\u043a \u0438 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435.","6029f600":"#### \u0424\u043e\u0442\u043e \u0441 \u043d\u0435\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u043c \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435\u043c \u0441\u0442\u043e\u0440\u043e\u043d bounding box","93e41a5b":"#### \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0449\u0438\u0435 \u0441\u0430\u043c\u0443\u044e \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c","1a7cbe49":"\u041f\u043e \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u044b:\n- \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0430 \u043c\u0430\u0448\u0438\u043d \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043d\u0438\u0436\u043d\u0435\u0439 \u0447\u0430\u0441\u0442\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n- \u0432 \u043b\u0435\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0447\u0435\u043c \u0432 \u043f\u0440\u0430\u0432\u043e\u0439\n- \u0443\u0433\u043e\u043b \u043f\u043e\u0432\u043e\u0440\u043e\u0442\u0430 \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 [-20; 20] \u0433\u0440\u0430\u0434\u0443\u0441\u043e\u0432\n- \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0440\u043e\u043d bounding box \u043c\u0435\u043d\u0435\u0435 1\n- bounding box, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u0435\u043d\u0435\u0435 3% \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n\n\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043f\u0440\u0438 \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 anchor \u043e\u0441\u043e\u0431\u043e\u0433\u043e \u0441\u043c\u044b\u0441\u043b\u0430 \u043d\u0435\u0442, \u0432 \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0442\u043e\u0436\u0435.","357d3709":"\u041a\u043e\u0433\u0434\u0430 \u043f\u044b\u0442\u0430\u043b\u0441\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u043b \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0445 \u043b\u0435\u0439\u0431\u043b\u043e\u0432. \u0415\u0441\u0442\u044c \u043a\u0430\u043a \u043e\u043f\u0435\u0447\u0430\u0442\u043a\u0438, \u0442\u0430\u043a \u0438 \u043d\u0435\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430.","7a5d10bc":"# License Plate Recognition EDA","8c521c28":"\u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0443\u0434\u0430\u043b\u0438\u043c \u044d\u0442\u0438 \u043d\u043e\u043c\u0435\u0440\u0430","0224c416":"#### \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u0432","4991c655":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","31dfdf76":"\u0418\u043d\u043e\u0433\u0434\u0430 \u0432 bounding box \u043f\u0435\u0440\u0435\u043f\u0443\u0442\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0447\u0435\u043a, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0432 8258.jpg (\u043f\u0440\u0438\u0432\u0435\u043b 8257.jpg \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f)","6c34bb0e":"### \u041f\u0440\u0438\u043c\u0435\u0440\u044b","eded26b1":"\u041e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0435\u0441\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0435\u0433\u043e \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0447\u0438\u0441\u0442\u0438\u0442\u044c.","b81c6561":"#### \u0412\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435","023281a8":"\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0435\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u043d\u043e\u043c\u0435\u0440\u0430:","a138c137":"### \u041f\u0440\u0438\u043c\u0435\u0440\u044b","02dace30":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043e\u0442\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0435 \u043e\u0448\u0438\u0431\u043a\u0438","b467a643":"\u0412 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u043d\u0435\u0440\u0430\u0437\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0435 bounding box","3a82ab97":"\u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e, \u043a\u0430\u043a \u043d\u043e\u043c\u0435\u0440\u0430 \u0440\u0430\u0437\u043c\u0435\u0447\u0430\u043b\u0438\u0441\u044c, \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435\u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0435..."}}