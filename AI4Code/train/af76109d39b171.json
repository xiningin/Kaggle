{"cell_type":{"c6c345e8":"code","858af19d":"code","9b00cb09":"code","0a652f2e":"code","cbc286dd":"code","7c9387af":"code","463e240b":"code","c242cc97":"code","d85d6cce":"code","b118f1d5":"code","2b27034d":"code","a71b199d":"code","3db4a8b6":"code","7eeefb24":"code","9c95a361":"code","f8c999e3":"code","639d29fe":"code","dcbefdef":"code","3b0477c5":"code","99c8de80":"code","ea7585bd":"code","acba3f63":"code","5f7e73e1":"code","a737702e":"code","43e30da2":"code","c1c06a89":"code","0894bdb0":"code","b1943f6b":"code","1e7531dd":"code","68bda5f0":"code","67a654a2":"code","6539d7dd":"code","c4ce90cc":"code","41c69141":"code","b388deb0":"code","b389bdb6":"code","01edef16":"markdown","8ba65b49":"markdown","7bb1c402":"markdown","77209c3a":"markdown","79c7451e":"markdown","b3fbed31":"markdown","34852f5a":"markdown","aefc7dac":"markdown"},"source":{"c6c345e8":"# basic library import section\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","858af19d":"# import required datasets\ntrain = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\nsample_sub = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')","9b00cb09":"train.shape, test.shape","0a652f2e":"train.head()","cbc286dd":"#Let's print a concise summary of train Dataset\ntrain.info()","7c9387af":"# now print a concise summary of test Dataset\ntest.info()","463e240b":"# descriptive statistics of train set\ntrain.describe().T.style.bar(subset=['mean'], color='#606ff2').background_gradient(subset=['std'],cmap='YlOrBr').bar(subset=['max'],color='green')","c242cc97":"# descriptive statistics of test set\ntest.describe().T.style.bar(subset=['mean'], color='#606ff2').background_gradient(subset=['std'],cmap='YlOrBr').bar(subset=['max'],color='green')","d85d6cce":"# checking null values\nprint(train.isna().sum())\nprint(\"============================\")\nprint(test.isna().sum())","b118f1d5":"# features to visualize\nnew_train = train.drop(['date_time','target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'], axis = 1)\nnew_test = test.drop('date_time', axis = 1)\nfeatures= ['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']\ntargets = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']","2b27034d":"import matplotlib.ticker as ticker\nfrom matplotlib.ticker import PercentFormatter\n\nplt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(10, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(4, 2)\ngs.update(wspace=0.3, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette('icefire')\n\nrun_no = 0\nfor row in range(0, 4):\n    for col in range(0, 2):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nfeatures = list(new_train.columns) \n\nrun_no = 0\nfor col in features:\n    sns.boxplot(ax=locals()[\"ax\"+str(run_no)],x=col, data = new_train)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel('')\n    locals()[\"ax\"+str(run_no)].set_xlabel(col, fontsize=4, fontweight='bold')\n    locals()[\"ax\"+str(run_no)].tick_params(labelsize=4, width=0.5, length=1.5)\n    locals()[\"ax\"+str(run_no)].yaxis.set_major_formatter(ticker.PercentFormatter())\n    run_no += 1\nfig.text(0.5, 0.9, 'boxplot for every column to detect outliers in train set', fontsize=10, ha='center', va='top', weight='bold')\nplt.show()","a71b199d":"fig = plt.figure(figsize=(10, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(4, 2)\ngs.update(wspace=0.3, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette('icefire')\nrun_no = 0\nfor row in range(0, 4):\n    for col in range(0, 2):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nfeatures = list(new_test.columns) \n\nrun_no = 0\nfor col in features:\n    sns.boxplot(ax=locals()[\"ax\"+str(run_no)],x=col, data = new_test)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel('')\n    locals()[\"ax\"+str(run_no)].set_xlabel(col, fontsize=4, fontweight='bold')\n    locals()[\"ax\"+str(run_no)].tick_params(labelsize=4, width=0.5, length=1.5)\n    locals()[\"ax\"+str(run_no)].yaxis.set_major_formatter(ticker.PercentFormatter())\n    run_no += 1\nfig.text(0.5, 0.9, 'boxplot for every column to detect outliers in test set', fontsize=10, ha='center', va='top', weight='bold')\nplt.show()","3db4a8b6":"plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(10, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(4, 2)\ngs.update(wspace=0.3, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette('icefire')\n\nrun_no = 0\nfor row in range(0, 4):\n    for col in range(0, 2):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nfeatures = list(new_train.columns) \n\nrun_no = 0\nfor col in features:\n    sns.kdeplot(ax=locals()[\"ax\"+str(run_no)],x=col, data = new_train, color = 'palegreen')\n    sns.kdeplot(ax=locals()[\"ax\"+str(run_no)],x=col, data = new_test, color = 'lightcoral')\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel('')\n    locals()[\"ax\"+str(run_no)].set_xlabel(col, fontsize=4, fontweight='bold')\n    locals()[\"ax\"+str(run_no)].tick_params(labelsize=4, width=0.5, length=1.5)\n    locals()[\"ax\"+str(run_no)].yaxis.set_major_formatter(ticker.PercentFormatter())\n    run_no += 1\nfig.text(0.5, 0.9, 'Kernel distribution plot(KDE) for every columns of both datasets', fontsize=10, ha='center', va='top', weight='bold')\nplt.show()","7eeefb24":"plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(10, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(3, 1)\ngs.update(wspace=0.3, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette('icefire')\n\nrun_no = 0\nfor row in range(0, 3):\n    for col in range(0, 1):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\n\nrun_no = 0\nfor target in targets:\n    locals()[\"ax\"+str(run_no)].scatter(x = train.date_time, y = train[target], s = 3, color='salmon', marker = '^', alpha = 0.5)\n    locals()[\"ax\"+str(run_no)].set_ylabel('')\n    locals()[\"ax\"+str(run_no)].set_xlabel(target, fontsize=4, fontweight='bold')\n    locals()[\"ax\"+str(run_no)].xaxis.set_major_locator(plt.MaxNLocator(5))\n    run_no += 1\nfig.text(0.5, 0.9, 'Target distribution over time', fontsize=10, ha='center', va='top', weight='bold')\nplt.show()","9c95a361":"plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(10, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(8, 1)\ngs.update(wspace=0.3, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette('icefire')\n\nrun_no = 0\nfor row in range(0, 8):\n    for col in range(0, 1):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\n\nrun_no = 0\nfor feature in features:\n    locals()[\"ax\"+str(run_no)].scatter(x = train.date_time, y = train[feature], s = 3, color='blue', marker = '^', alpha = 0.5)\n    locals()[\"ax\"+str(run_no)].scatter(x = test.date_time, y = test[feature], s = 3, color='green', marker = '>', alpha = 0.5)\n    locals()[\"ax\"+str(run_no)].set_ylabel('')\n    locals()[\"ax\"+str(run_no)].xaxis.set_major_locator(plt.MaxNLocator(5))\n    run_no += 1\nfig.text(0.5, 0.9, 'features over time', fontsize=10, ha='center', va='top', weight='bold')\nplt.show()","f8c999e3":"fig = plt.figure(figsize=(10, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(3, 1)\ngs.update(wspace=0.3, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette('icefire')\n\nrun_no = 0\nfor row in range(0, 3):\n    for col in range(0, 1):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\n\nrun_no = 0\nfor target in targets:\n    sns.lineplot(ax=locals()[\"ax\"+str(run_no)],x = train.deg_C, y = train[target], color = 'lightcoral')\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel('')\n    locals()[\"ax\"+str(run_no)].set_xlabel(target, fontsize=6, fontweight='bold')\n    locals()[\"ax\"+str(run_no)].tick_params(labelsize=4, width=0.5, length=1.5)\n    locals()[\"ax\"+str(run_no)].xaxis.set_major_locator(plt.MaxNLocator(20))\n    run_no += 1\nfig.text(0.5, 0.9, 'Linear relationship between deg_c and target columns', fontsize=10, ha='center', va='top', weight='bold')\nplt.show()","639d29fe":"fig = plt.figure(figsize=(10, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(3, 1)\ngs.update(wspace=0.3, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette('icefire')\n\nrun_no = 0\nfor row in range(0, 3):\n    for col in range(0, 1):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\n\nrun_no = 0\nfor target in targets:\n    sns.lineplot(ax=locals()[\"ax\"+str(run_no)],x = train.relative_humidity, y = train[target], color = 'lightgreen')\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel('')\n    locals()[\"ax\"+str(run_no)].set_xlabel(target, fontsize=6, fontweight='bold')\n    locals()[\"ax\"+str(run_no)].tick_params(labelsize=4, width=0.5, length=1.5)\n    locals()[\"ax\"+str(run_no)].xaxis.set_major_locator(plt.MaxNLocator(20))\n    run_no += 1\nfig.text(0.5, 0.9, 'Linear relationship between relative_humidity and target columns', fontsize=10, ha='center', va='top', weight='bold')\nplt.show()","dcbefdef":"fig = plt.figure(figsize=(10, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(3, 1)\ngs.update(wspace=0.3, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette('icefire')\n\nrun_no = 0\nfor row in range(0, 3):\n    for col in range(0, 1):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\n\nrun_no = 0\nfor target in targets:\n    sns.lineplot(ax=locals()[\"ax\"+str(run_no)],x = train.sensor_1, y = train[target], color = 'tomato')\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel('')\n    locals()[\"ax\"+str(run_no)].set_xlabel(target, fontsize=6, fontweight='bold')\n    locals()[\"ax\"+str(run_no)].tick_params(labelsize=4, width=0.5, length=1.5)\n    locals()[\"ax\"+str(run_no)].xaxis.set_major_locator(plt.MaxNLocator(20))\n    run_no += 1\nfig.text(0.5, 0.9, 'Linear relationship between sensor_1 and target columns', fontsize=10, ha='center', va='top', weight='bold')\nplt.show()","3b0477c5":"# relation among the targets\nsns.pairplot(train[targets]);","99c8de80":"# relation among the features in train set\nsns.pairplot(train[features]);","ea7585bd":"# relation among the features in test set\nsns.pairplot(test[features]);","acba3f63":"plt.figure(figsize = (12, 8))\ncorr_train = train.corr()\nsns.heatmap(corr_train, annot = True);","5f7e73e1":"plt.figure(figsize = (12, 8))\ncorr_test = test.corr()\nsns.heatmap(corr_test, annot = True);","a737702e":"train['date_time'] = pd.to_datetime(train['date_time'], errors='coerce')\ntrain.loc[:, 'weekofyear'] = train['date_time'].dt.weekofyear\ntrain.loc[:, 'month'] = train['date_time'].dt.month\ntrain.loc[:, 'hour'] = train['date_time'].dt.hour\ntrain['fer_C'] = (train['deg_C']*(9\/5)) + 32\ntrain['kel_C'] = train['deg_C'] + 273.15\ntrain['dew_point'] = train['deg_C'] - ((100 - train['relative_humidity'])\/5)","43e30da2":"test['date_time'] = pd.to_datetime(test['date_time'], errors='coerce')\ntest.loc[:, 'weekofyear'] = test['date_time'].dt.weekofyear\ntest.loc[:, 'month'] = test['date_time'].dt.month\ntest.loc[:, 'hour'] = test['date_time'].dt.hour\ntest['fer_C'] = (test['deg_C']*(9\/5)) + 32\ntest['kel_C'] = test['deg_C'] + 273.15\ntest['dew_point'] = test['deg_C'] - ((100 - test['relative_humidity'])\/5)","c1c06a89":"import h2o\nfrom h2o.automl import H2OAutoML\nh2o.init()","0894bdb0":"h2o_train = h2o.H2OFrame(train)\nh2o_test = h2o.H2OFrame(test)","b1943f6b":"def h2oml(df, x, y, time = 60):\n    df = df.drop(x, axis = 1)\n    \n    splits = df.split_frame(ratios = [0.8], seed = 1)\n    x_train = splits[0]\n    x_test = splits[1]\n    \n    aml = H2OAutoML(max_runtime_secs = time, seed = 1)\n    aml.train(y = y, training_frame = x_train, leaderboard_frame = x_test)\n    return aml\n    ","1e7531dd":"# trainning\naml1 = h2oml(h2o_train, ['target_benzene', 'target_nitrogen_oxides'], 'target_carbon_monoxide', 300)\naml2 = h2oml(h2o_train, ['target_carbon_monoxide', 'target_nitrogen_oxides'], 'target_benzene', 300)\naml3 = h2oml(h2o_train, ['target_carbon_monoxide', 'target_benzene'], 'target_nitrogen_oxides', 600)","68bda5f0":"aml1.leaderboard.head()","67a654a2":"aml2.leaderboard.head()","6539d7dd":"aml3.leaderboard.head()","c4ce90cc":"# predicting\nprediction1 = aml1.predict(h2o_test)\nprediction2 = aml2.predict(h2o_test)\nprediction3 = aml3.predict(h2o_test)","41c69141":"# changing column names\nprediction1.set_names(['target_carbon_monoxide'])\nprediction2.set_names(['target_benzene'])\nprediction3.set_names(['target_nitrogen_oxides']);","b388deb0":"# converting to pandas column\npred1_data = h2o.as_list(prediction1)\npred2_data = h2o.as_list(prediction2)\npred3_data = h2o.as_list(prediction3)","b389bdb6":"submission = pd.concat([pd.DataFrame(sample_sub['date_time']),pred1_data, pred2_data, pred3_data], axis = 1)\nsubmission.to_csv('submission_file.csv', index = False)","01edef16":"# Feature Engineering","8ba65b49":"### Test set heatmap","7bb1c402":"## Heatmap of both datasets.","77209c3a":"### Creating submission file","79c7451e":"#### If you find it useful, don't forget Upvotting. Thanks","b3fbed31":"### Train set heatmap","34852f5a":"# Modeling","aefc7dac":"# Modeling using H2o AutoML"}}