{"cell_type":{"7d476eb9":"code","830c353c":"code","24190939":"code","96252d86":"code","da91d6a2":"code","ca2d33ca":"markdown","c8f6fe76":"markdown","19fef239":"markdown","69de7149":"markdown","b41686ea":"markdown"},"source":{"7d476eb9":"!pip install 'kaggle-environments>=0.1.6'\n","830c353c":"%%writefile loyalist_random_space_marine.py\n# obviously\nfrom random import randint as pathetic_action\n\ndef loyalist_random_space_marine(obs, conf):\n    \"\"\" Adeptus Astartes \"\"\"\n    return pathetic_action(0, 2)\n","24190939":"%%writefile abaddon_the_despoiler.py\nfrom random import randint as pathetic_action\n\n# as pathetic as they can be\npathetic_actions_of_the_loyalist_random_space_marine = [0, 0, 0]\n\ndef abaddon_the_despoiler(obs, conf):\n    \"\"\" Death to the False Emperor! \"\"\"\n    # count pathetic actions of the loyalist random space marine\n    if obs[\"step\"] > 0:\n        pathetic_actions_of_the_loyalist_random_space_marine[obs[\"lastOpponentAction\"]] += 1\n    else:\n        pathetic_actions_of_the_loyalist_random_space_marine[pathetic_action(0, 2)] += 1\n    \n    # using power of the Chaos Gods and python's max function,\n    # figure out current most frequent pathetic action of the loyalist random space marine\n    most_frequent_pathetic_action = pathetic_actions_of_the_loyalist_random_space_marine.index(max(pathetic_actions_of_the_loyalist_random_space_marine))\n    \n    # the cunning plan\n    ferocious_action_of_the_abaddon_the_despoiler = most_frequent_pathetic_action + 1\n    if ferocious_action_of_the_abaddon_the_despoiler > 2:\n        ferocious_action_of_the_abaddon_the_despoiler = 0\n\n    # Chaos Gods will be pleased... otherwise poor old Abaddon is in a big trouble\n    return ferocious_action_of_the_abaddon_the_despoiler\n    ","96252d86":"from kaggle_environments import evaluate, make, utils\nfrom time import gmtime, strftime\n\n\n# total amount of games to play\nGAMES_AMOUNT = 1000\n# amount of games to play before printing current time\nPRINT_TIME_INTERVAL = 50\nresults = []\ngames_to_print_time = PRINT_TIME_INTERVAL\n# total amount of games played\ngames_played = 0\n# how many games most frequent opponent's action in the entire game\n# was as well most frequent opponent's action throughout every step of the game\nmost_frequent_action_same_in_game_and_steps = 0\n\nprint(\"Started at:\", strftime(\"%H:%M:%S\", gmtime()))\nfor i in range(GAMES_AMOUNT):\n    # counter of occurrence of each opponent's action\n    actions_of_opponent = [0, 0, 0]\n    # how many steps each opponent's action was the most frequent of opponent's actions\n    most_frequent_opp_actions = [0, 0, 0]\n    \n    env = make(\"rps\") #, debug=True)\n    env.run([\"abaddon_the_despoiler.py\", \"loyalist_random_space_marine.py\"])\n    my_reward = 0\n    opp_reward = 0\n\n    for j in range(len(env.steps)):\n        my_action = env.steps[j][0][\"action\"]\n        opp_action = env.steps[j][1][\"action\"]\n        \n        if my_action == (opp_action + 1) or (my_action == 0 and opp_action == 2):\n            my_reward += 1\n            opp_reward -= 1\n        elif my_action == (opp_action - 1) or (my_action == 2 and opp_action == 0):\n            my_reward -= 1\n            opp_reward += 1\n            \n        actions_of_opponent[opp_action] += 1\n        max_index = actions_of_opponent.index(max(actions_of_opponent))\n        most_frequent_opp_actions[max_index] += 1\n    \n    index_max_actions_of_opponent = actions_of_opponent.index(max(actions_of_opponent))\n    index_max_most_frequent_opp_actions = most_frequent_opp_actions.index(max(most_frequent_opp_actions))\n    if index_max_actions_of_opponent == index_max_most_frequent_opp_actions:\n        most_frequent_action_same_in_game_and_steps += 1\n\n    results.append([my_reward, opp_reward])\n    \n    games_to_print_time -= 1\n    if games_to_print_time <= 0:\n        games_to_print_time = PRINT_TIME_INTERVAL\n        games_played += PRINT_TIME_INTERVAL\n        print(f'Games played: {games_played}; current time: {strftime(\"%H:%M:%S\", gmtime())}')\n    \nprint(f'\\nOf {GAMES_AMOUNT} games:\\n')\n\nprint(f'index_max_actions_of_opponent == index_max_most_frequent_opp_actions: \\\n{most_frequent_action_same_in_game_and_steps}\\n')\n\nwon = 0\nlost = 0\ntie = 0\nfor result in results:\n    reward = result[0]\n    if reward >= 20:\n        won += 1\n    elif reward <= -20:\n        lost += 1\n    else:\n        tie += 1\n\nprint(f'won: {won}, lost: {lost}, tie: {tie}\\n')\n\n# fate of Abaddon the Despoiler is decided here\nif won > lost:\n    print('Abaddon: \"I am the Arch-fiend, the Despoiler of Worlds, and by my hands shall the false Emperor fall.\"\\n')\nelse:\n    print(\"Abaddon caught COVID-19 at work and became a Chaos Spawn...\\n\")\n\n# print(\"results:\")\n# for result in results:\n#     print(result)\n","da91d6a2":"env = make(\"rps\") #, debug=True)\n# env.run([\"abaddon_the_despoiler.py\", \"abaddon_the_despoiler.py\"])\n# env.run([\"abaddon_the_despoiler.py\", \"copy_opponent\"])\n# env.run([\"abaddon_the_despoiler.py\", \"reactionary\"])\n# env.run([\"abaddon_the_despoiler.py\", \"counter_reactionary\"])\n# env.run([\"abaddon_the_despoiler.py\", \"statistical\"])\nenv.run([\"abaddon_the_despoiler.py\", \"loyalist_random_space_marine.py\"])\nenv.render(mode=\"ipython\", width=500, height=450)\n","ca2d33ca":"# In the Name of [Chaos Undivided](https:\/\/warhammer40k.fandom.com\/wiki\/Chaos_Undivided) install kaggle-environments","c8f6fe76":"# Test the Agent","19fef239":"# Call forth [Abaddon the Despoiler](https:\/\/warhammer40k.fandom.com\/wiki\/Abaddon), Warmaster of Chaos","69de7149":"# Evaluate Abaddon the Despoiler","b41686ea":"# Release Loyalist Random [Space Marine](https:\/\/warhammer40k.fandom.com\/wiki\/Space_Marines)"}}