{"cell_type":{"c8615d07":"code","d00f713c":"code","e4dc11a6":"code","eb5a1617":"code","57916d81":"code","3622e897":"code","a5b9e95f":"code","59c71068":"code","76481428":"code","74fa01bd":"code","07764944":"code","e2b6ff3e":"code","22cd61ce":"code","3acbbce9":"code","5e9b94b5":"code","0da98693":"code","8c7b46bc":"code","3646bd34":"code","178c2023":"code","66e74ce6":"code","e8390149":"code","106f8c47":"code","cb8c1791":"code","b7c5c3ae":"code","a1f6e1a0":"code","dbb858d1":"code","a1db3832":"code","a36b14ff":"code","d26e4a84":"code","b31f7670":"code","1712b02e":"code","6d2baa8e":"markdown","4a551b9c":"markdown","3291d316":"markdown","e1733246":"markdown","ac449a90":"markdown","cab004b1":"markdown"},"source":{"c8615d07":"import numpy as np\nimport pandas as pd\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\nimport tarfile\nimport gzip\nimport re\nimport os\nimport datetime as dt","d00f713c":"init_notebook_mode(connected=True)","e4dc11a6":"#stat_num = 1000 # Number of stations to plot for testing\nyear_num = 20 # Number of past years to consider\nextremes_num = 10 # Number of hottest and coldest places to display","eb5a1617":"yearfiles = os.listdir(\"..\/input\/gsod_all_years\")\nyearfiles.sort()\nyearfiles = yearfiles[-year_num:]\nyears = [int(re.findall('\\d+',yearfile)[0]) for yearfile in yearfiles]","57916d81":"station_loc = pd.read_csv('..\/input\/isd-history.csv')\nstation_loc = station_loc.replace([0.0, -999.0, -999.9],np.nan)\nstation_loc = station_loc[pd.notnull(station_loc['LAT']) & pd.notnull(station_loc['LON'])]\nstation_loc = station_loc[[int(re.findall('^\\d{4}', str(end_year))[0])==max(years) for end_year in station_loc['END']]]\nstation_loc = station_loc[[int(re.findall('^\\d{4}', str(beg_year))[0])<=min(years) for beg_year in station_loc['BEGIN']]]","3622e897":"station_loc['LBL'] = station_loc[['STATION NAME','STATE','CTRY']].apply(lambda x: x.str.cat(sep=', '), axis=1)\nstation_loc['ELEV_LBL'] = station_loc['ELEV(M)'].apply(lambda x: 'Elevation: '+str(x)+' m' if ~np.isnan(x) else np.nan)\nstation_loc['LBL'] = station_loc[['LBL','ELEV_LBL']].apply(lambda x: x.str.cat(sep='<br>'), axis=1)\nstation_loc = station_loc.drop(['STATION NAME','STATE','ELEV_LBL','ICAO','BEGIN','END'], axis=1)\n#station_loc = station_loc.sample(stat_num)","a5b9e95f":"df = pd.DataFrame([])\ndf_day = pd.DataFrame([])\n\ndef preprocess_station_file_content(content):\n    headers=content.pop(0)\n    headers=[headers[ind] for ind in [0,1,2,3,4,8,11,12]]\n    for d in range(len(content)):\n        content[d]=[content[d][ind] for ind in [0,1,2,3,5,13,17,18]]\n    content=pd.DataFrame(content, columns=headers)\n    content.rename(columns={'STN---': 'USAF'}, inplace=True)\n    content['MAX'] = content['MAX'].apply(lambda x: re.sub(\"\\*$\",\"\",x))\n    content['MIN'] = content['MIN'].apply(lambda x: re.sub(\"\\*$\",\"\",x))\n    content[['WBAN','TEMP','DEWP','WDSP','MAX','MIN']] = content[['WBAN','TEMP','DEWP','WDSP','MAX','MIN']].apply(pd.to_numeric)\n    content['YEARMODA']=pd.to_datetime(content['YEARMODA'], format='%Y%m%d', errors='ignore')\n    content['YEAR']=pd.DatetimeIndex(content['YEARMODA']).year\n    content['MONTH']=pd.DatetimeIndex(content['YEARMODA']).month\n    content['DAY']=pd.DatetimeIndex(content['YEARMODA']).day\n    return content","59c71068":"yearfile = yearfiles[-1]\nprint(yearfile)\ni=0\ntar = tarfile.open(\"..\/input\/gsod_all_years\/\"+yearfile, \"r\")\nprint(len(tar.getmembers()[1:]))\n#for member in np.random.choice(tar.getmembers()[1:], size=stat_num, replace=False):\nfor member in tar.getmembers()[1:]:\n    name_parts = re.sub(\"\\.op\\.gz$\",\"\",re.sub(\"^\\.\/\",\"\",member.name)).split(\"-\")\n    usaf = name_parts[0]\n    wban = int(name_parts[1])\n    if station_loc[(station_loc['USAF']==usaf) & (station_loc['WBAN']==wban)].shape[0]!=0:\n        i=i+1\n        #if i%(stat_num\/\/10) == 0: print(i)\n        f=tar.extractfile(member)\n        f=gzip.open(f, 'rb')\n        content=[re.sub(\" +\", \",\", line.decode(\"utf-8\")).split(\",\") for line in f.readlines()]\n        content=preprocess_station_file_content(content)\n        df_day = df_day.append(content[content['YEARMODA']==content['YEARMODA'].max()])\n        content = content.groupby(['USAF','WBAN','YEAR','MONTH']).agg('median').reset_index()\n        df = df.append(content)\ntar.close()","76481428":"day = df_day['YEARMODA'].max()\ndf_day = df_day[df_day['YEARMODA']==day]","74fa01bd":"for yearfile in yearfiles[:-1]:\n    print(yearfile)\n    i=0\n    tar = tarfile.open(\"..\/input\/gsod_all_years\/\"+yearfile, \"r\")\n    print(len(tar.getmembers()[1:]))\n    #for member in np.random.choice(tar.getmembers()[1:], size=stat_num, replace=False):\n    for member in tar.getmembers()[1:]:\n        name_parts = re.sub(\"\\.op\\.gz$\",\"\",re.sub(\"^\\.\/\",\"\",member.name)).split(\"-\")\n        usaf = name_parts[0]\n        wban = int(name_parts[1])\n        if station_loc[(station_loc['USAF']==usaf) & (station_loc['WBAN']==wban)].shape[0]!=0:\n            i=i+1\n            #if i%(stat_num\/\/10) == 0: print(i)\n            f=tar.extractfile(member)\n            f=gzip.open(f, 'rb')\n            content=[re.sub(\" +\", \",\", line.decode(\"utf-8\")).split(\",\") for line in f.readlines()]\n            content=preprocess_station_file_content(content)\n            df_day = df_day.append(content[(content['MONTH']==day.month) & (content['DAY']==day.day)])\n            content = content.groupby(['USAF','WBAN','YEAR','MONTH']).agg('median').reset_index()\n            df = df.append(content)\n    tar.close()","07764944":"df_loc = pd.merge(df, station_loc, how='inner', on=['USAF','WBAN'])\ndf_day_loc = pd.merge(df_day, station_loc, how='inner', on=['USAF','WBAN'])\n\ndf_loc['ADD_LBL'] = df_loc['TEMP']\\\n.apply(lambda x: 'Temperature: '+str(np.round((x-32)*5\/9,1))+' C')\ndf_loc['LBL'] = df_loc[['LBL','ADD_LBL']].apply(lambda x: x.str.cat(sep='<br>'), axis=1)\ndf_loc = df_loc.drop('ADD_LBL', axis=1)\n\ndf_day_loc['ADD_LBL'] = df_day_loc['TEMP']\\\n.apply(lambda x: 'Temperature: '+str(np.round((x-32)*5\/9,1))+' C')\ndf_day_loc['LBL_TRACE'] = df_day_loc['LBL']\ndf_day_loc['LBL'] = df_day_loc[['LBL','ADD_LBL']].apply(lambda x: x.str.cat(sep='<br>'), axis=1)\ndf_day_loc = df_day_loc.drop('ADD_LBL', axis=1)","e2b6ff3e":"extremes = pd.DataFrame([])\nextremes = extremes.append(df_day_loc[df_day_loc['YEARMODA']==day].sort_values(by=\"TEMP\", ascending=False).head(extremes_num))\nextremes = extremes.append(df_day_loc[df_day_loc['YEARMODA']==day].sort_values(by=\"TEMP\", ascending=False).tail(extremes_num))","22cd61ce":"scl = [0,\"rgb(150,0,90)\"],[0.125,\"rgb(0, 0, 200)\"],[0.25,\"rgb(0, 25, 255)\"],\\\n[0.375,\"rgb(0, 152, 255)\"],[0.5,\"rgb(44, 200, 150)\"],\\\n[0.75,\"rgb(255, 234, 0)\"],[0.875,\"rgb(255, 111, 0)\"],[1,\"rgb(255, 0, 0)\"]","3acbbce9":"data = [ dict(\n    type = 'scattergeo',\n    text = extremes['LBL'],\n    lat = extremes['LAT'],\n    lon = extremes['LON'],\n    marker = dict(\n        color = (extremes['TEMP']-32)*5\/9,\n        colorscale = scl,\n        cmin = -50,\n        cmax = 50,\n        size = 5,\n        colorbar = dict(\n            thickness = 10,\n            titleside = \"right\",\n            outlinecolor = \"rgba(68, 68, 68, 0)\",\n            tickvals = [-50,-30,-15,0,15,30,50],\n            ticks = \"outside\",\n            ticklen = 3,\n            ticksuffix = \" C\",\n            showticksuffix = \"all\"\n        )\n    )\n)]\n\nlayout = dict(\n    geo = dict(\n        scope = 'world',\n        showland = True,\n        landcolor = \"rgb(212, 212, 212)\",\n        showlakes = True,\n        lakecolor = \"rgb(255, 255, 255)\",\n        showsubunits = False,\n        #subunitcolor = \"rgb(255, 255, 255)\",\n        showcountries = False,\n        #countrycolor = \"rgb(255, 255, 255)\",\n        showcoastlines=False,\n        resolution = 110\n        ),\n    )\nfig = dict( data=data, layout=layout )","5e9b94b5":"print(dt.date.strftime(day, '%Y-%m-%d'))","0da98693":"iplot(fig)","8c7b46bc":"df_day_loc = df_day_loc[(df_day_loc['USAF'].isin(extremes['USAF'])) & (df_day_loc['WBAN'].isin(extremes['WBAN']))]\ndf_day_loc = df_day_loc.sort_values(by=['LAT','LON','YEAR'])","3646bd34":"data = [ go.Scatter(\n    x = df_day_loc[(df_day_loc['USAF']==stat_code[1][0]) & (df_day_loc['WBAN']==stat_code[1][1])]['YEARMODA'],\n    y = (df_day_loc[(df_day_loc['USAF']==stat_code[1][0]) & (df_day_loc['WBAN']==stat_code[1][1])]['TEMP']-32)*5\/9,\n    mode = 'lines+markers',\n    line=dict(color='rgba(212, 212, 212,1)'),\n    hoverinfo = 'x+y',\n    marker = dict(\n        color = (df_day_loc[(df_day_loc['USAF']==stat_code[1][0]) & (df_day_loc['WBAN']==stat_code[1][1])]['TEMP']-32)*5\/9,\n        colorscale = scl,\n        cmin = -50,\n        cmax = 50\n    ),\n    name = df_day_loc[(df_day_loc['USAF']==stat_code[1][0]) & (df_day_loc['WBAN']==stat_code[1][1])]['LBL_TRACE'].values[0],\n) for stat_code in df_day_loc[['USAF','WBAN']].drop_duplicates().iterrows()]\n\nlayout = go.Layout(\n    autosize=False,\n    width=2300,\n    height=800,\n    xaxis=go.layout.XAxis(\n        tickvals=df_day_loc['YEARMODA'].drop_duplicates(),\n        automargin=True\n    )\n)\n\nfig = go.Figure(data, layout)","178c2023":"iplot(fig)","66e74ce6":"def c_to_f(t):\n    return (t * 9\/5) + 32\n\n\ntemp = df_loc.groupby(['USAF','WBAN','LBL','LAT','LON','ELEV(M)','MONTH']).agg('median').reset_index()\ntemp = temp.groupby(['USAF','WBAN','LBL','LAT','LON','ELEV(M)']).agg({'TEMP':['min','max'],'DEWP':['min','max'],'WDSP':['min','max'],'MAX':'max','MIN':'min'}).reset_index()\ntemp = temp[(temp['TEMP', 'min']>=c_to_f(10))&\\\n            (temp['TEMP', 'max']<=c_to_f(25))&\\\n            (temp['TEMP', 'max']>=c_to_f(20))&\\\n            (temp['MIN', 'min']>=c_to_f(0))&\\\n            (temp['MAX', 'max']<=c_to_f(30))&\\\n            (temp['DEWP', 'min']>=35)&\\\n            (temp['DEWP', 'max']<=45)&\\\n            (temp['WDSP', 'max']<=50)]\n\n# min median monthly temperature in F (not colder this on average in the coldest month)\n# max max median monthly temperature in F (not warmer than this on average in the warmest month)\n# min max median monthly temperature in F (at least this warm on average in the warmest month)\n# min yearly temperature in F (not colder than this ever)\n# max yearly temperature in F (not hotter than this ever)\n# min median monthly dew point in F (not less humid than this)\n# max median monthly dew point in F (not more humid than this)\n# max windspeed in knots","e8390149":"data = [ dict(\n    type = 'scattergeo',\n    text = temp['LBL'],\n    lat = temp['LAT'],\n    lon = temp['LON'],\n    marker = dict(\n        color = 'green', #(temp['TEMP']-32)*5\/9,\n        colorscale = scl,\n        cmin = -50,\n        cmax = 50,\n        size = 5,\n        colorbar = dict(\n            thickness = 10,\n            titleside = \"right\",\n            outlinecolor = \"rgba(68, 68, 68, 0)\",\n            tickvals = [-50,-30,-15,0,15,30,50],\n            ticks = \"outside\",\n            ticklen = 3,\n            ticksuffix = \" C\",\n            showticksuffix = \"all\"\n        )\n    )\n)]\n\nlayout = dict(\n    geo = dict(\n        scope = 'world',\n        showland = True,\n        landcolor = \"rgb(212, 212, 212)\",\n        showlakes = True,\n        lakecolor = \"rgb(255, 255, 255)\",\n        showsubunits = False,\n        #subunitcolor = \"rgb(255, 255, 255)\",\n        showcountries = False,\n        #countrycolor = \"rgb(255, 255, 255)\",\n        showcoastlines=False,\n        resolution = 110\n        ),\n    )\nfig = dict( data=data, layout=layout )","106f8c47":"iplot(fig)","cb8c1791":"data = [ dict(\n    visible = False,\n    name = '',\n    type = 'scattergeo',\n    text = df_loc[(df_loc['MONTH']==month) & (df_loc['YEAR']==year)]['LBL'],\n    lat = df_loc[(df_loc['MONTH']==month) & (df_loc['YEAR']==year)]['LAT'],\n    lon = df_loc[(df_loc['MONTH']==month) & (df_loc['YEAR']==year)]['LON'],\n    marker = dict(\n        color = (df_loc[(df_loc['MONTH']==month) & (df_loc['YEAR']==year)]['TEMP']-32)*5\/9,\n        colorscale = scl,\n        cmin = -50,\n        cmax = 50,\n        opacity = 0.5,\n        size = 5,\n        colorbar = dict(\n            thickness = 10,\n            titleside = \"right\",\n            outlinecolor = \"rgba(68, 68, 68, 0)\",\n            tickvals = [-50,-30,-15,0,15,30,50],\n            ticks = \"outside\",\n            ticklen = 3,\n            ticksuffix = \" C\",\n            showticksuffix = \"all\"\n        )\n    )\n) for year in [years[-1]] for month in range(1,13)]\ndata[-1]['visible'] = True\n\nsteps = []\nfor i in range(len(data)):\n    step = dict(\n        method = 'restyle',  \n        args = ['visible', [False] * len(data)],\n        label = [str(month)+\".\"+str(year) for year in [years[-1]] for month in range(1,13)][i]\n    )\n    step['args'][1][i] = True # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    active = len(steps)-1,\n    currentvalue = {\"prefix\": \"Month and year: \"},\n    #pad = {\"t\": 50},\n    steps = steps\n)]\n\nlayout = dict(\n    sliders=sliders,\n    geo = dict(\n        scope = 'world',\n        showland = True,\n        landcolor = \"rgb(212, 212, 212)\",\n        showlakes = True,\n        lakecolor = \"rgb(255, 255, 255)\",\n        showsubunits = False,\n        #subunitcolor = \"rgb(255, 255, 255)\",\n        showcountries = False,\n        #countrycolor = \"rgb(255, 255, 255)\",\n        showcoastlines=False,\n        resolution = 110\n        ),\n    )\nfig = dict( data=data, layout=layout )","b7c5c3ae":"print(dt.date.strftime(day, '%Y'))","a1f6e1a0":"iplot(fig)","dbb858d1":"month = 2","a1db3832":"data = [ dict(\n    visible = False,\n    name = '',\n    type = 'scattergeo',\n    text = df_loc[(df_loc['MONTH']==month) & (df_loc['YEAR']==year)]['LBL'],\n    lat = df_loc[(df_loc['MONTH']==month) & (df_loc['YEAR']==year)]['LAT'],\n    lon = df_loc[(df_loc['MONTH']==month) & (df_loc['YEAR']==year)]['LON'],\n    marker = dict(\n        color = (df_loc[(df_loc['MONTH']==month) & (df_loc['YEAR']==year)]['TEMP']-32)*5\/9,\n        colorscale = scl,\n        cmin = -50,\n        cmax = 50,\n        opacity = 0.5,\n        size = 5,\n        colorbar = dict(\n            thickness = 10,\n            titleside = \"right\",\n            outlinecolor = \"rgba(68, 68, 68, 0)\",\n            tickvals = [-50,-30,-15,0,15,30,50],\n            ticks = \"outside\",\n            ticklen = 3,\n            ticksuffix = \" C\",\n            showticksuffix = \"all\"\n        )\n    )\n) for year in years]\ndata[-1]['visible'] = True\n\nsteps = []\nfor i in range(len(data)):\n    step = dict(\n        method = 'restyle',  \n        args = ['visible', [False] * len(data)],\n        label = [str(month)+\".\"+str(year) for year in years][i]\n    )\n    step['args'][1][i] = True # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    active = len(steps)-1,\n    currentvalue = {\"prefix\": \"Month and year: \"},\n    #pad = {\"t\": 50},\n    steps = steps\n)]\n\nlayout = dict(\n    sliders=sliders,\n    geo = dict(\n        scope = 'world',\n        showland = True,\n        landcolor = \"rgb(212, 212, 212)\",\n        showlakes = True,\n        lakecolor = \"rgb(255, 255, 255)\",\n        showsubunits = False,\n        #subunitcolor = \"rgb(255, 255, 255)\",\n        showcountries = False,\n        #countrycolor = \"rgb(255, 255, 255)\",\n        showcoastlines=False,\n        resolution = 110\n        ),\n    )\nfig = dict( data=data, layout=layout )","a36b14ff":"iplot(fig)","d26e4a84":"month = 7","b31f7670":"data = [ dict(\n    visible = False,\n    name = '',\n    type = 'scattergeo',\n    text = df_loc[(df_loc['MONTH']==month) & (df_loc['YEAR']==year)]['LBL'],\n    lat = df_loc[(df_loc['MONTH']==month) & (df_loc['YEAR']==year)]['LAT'],\n    lon = df_loc[(df_loc['MONTH']==month) & (df_loc['YEAR']==year)]['LON'],\n    marker = dict(\n        color = (df_loc[(df_loc['MONTH']==month) & (df_loc['YEAR']==year)]['TEMP']-32)*5\/9,\n        colorscale = scl,\n        cmin = -50,\n        cmax = 50,\n        opacity = 0.5,\n        size = 5,\n        colorbar = dict(\n            thickness = 10,\n            titleside = \"right\",\n            outlinecolor = \"rgba(68, 68, 68, 0)\",\n            tickvals = [-50,-30,-15,0,15,30,50],\n            ticks = \"outside\",\n            ticklen = 3,\n            ticksuffix = \" C\",\n            showticksuffix = \"all\"\n        )\n    )\n) for year in years]\ndata[-1]['visible'] = True\n\nsteps = []\nfor i in range(len(data)):\n    step = dict(\n        method = 'restyle',  \n        args = ['visible', [False] * len(data)],\n        label = [str(month)+\".\"+str(year) for year in years][i]\n    )\n    step['args'][1][i] = True # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    active = len(steps)-1,\n    currentvalue = {\"prefix\": \"Month and year: \"},\n    #pad = {\"t\": 50},\n    steps = steps\n)]\n\nlayout = dict(\n    sliders=sliders,\n    geo = dict(\n        scope = 'world',\n        showland = True,\n        landcolor = \"rgb(212, 212, 212)\",\n        showlakes = True,\n        lakecolor = \"rgb(255, 255, 255)\",\n        showsubunits = False,\n        #subunitcolor = \"rgb(255, 255, 255)\",\n        showcountries = False,\n        #countrycolor = \"rgb(255, 255, 255)\",\n        showcoastlines=False,\n        resolution = 110\n        ),\n    )\nfig = dict( data=data, layout=layout )","1712b02e":"iplot(fig)","6d2baa8e":"July temperatures","4a551b9c":"Past years temperatures at the stations displayed above on the same day","3291d316":"Places with climate I prefer:","e1733246":"Average monthly temperatures in:","ac449a90":"Top 10 hottest and top 10 coldest stations in the world on:","cab004b1":"February temperatures"}}