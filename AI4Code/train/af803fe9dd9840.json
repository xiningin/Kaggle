{"cell_type":{"b0a95efa":"code","acb8acbd":"code","e630d918":"code","78cf2fb2":"code","f8cb7858":"code","f160b47f":"code","6a9a7050":"code","ed9dd750":"code","ddc9b999":"code","f624868d":"code","5266882d":"code","5a657365":"code","04b8fb4e":"code","afcc912f":"code","9ebda9b7":"code","a8dc2bb9":"code","324aa8f6":"code","b6abe9ed":"code","9406f5d4":"code","3b87fbea":"code","88364d0b":"code","2712ebc9":"code","04b8064d":"code","a03ae365":"code","2bda5ccb":"code","edf7cc8e":"code","ebe3a237":"markdown","358dbae0":"markdown"},"source":{"b0a95efa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","acb8acbd":"df = pd.read_csv('..\/input\/covid19-tweets\/covid19_tweets.csv')\n\ndf","e630d918":"df.columns","78cf2fb2":"df.dtypes","f8cb7858":"df.describe()","f160b47f":"df.isna().sum()","6a9a7050":"df['user_description'] = df['user_description'].fillna('unknown')\n\ndf['hashtags'] = df['hashtags'].fillna('none')\n\ndf['source'] = df['source'].fillna('none')\n\ndf = df.dropna()\n\ndf.isna().sum()","ed9dd750":"df.isna().sum()","ddc9b999":"df['user_location'].isna().sum()","f624868d":"verified_df = df.query('user_verified == True').reset_index(drop=True)\n\nunverified_df = df.query('user_verified == False').reset_index(drop=True)","5266882d":"top_verified_df = verified_df.loc[:,['user_name','user_location','user_followers','text']]\n\ntop_unverified_df = unverified_df.loc[:,['user_name','user_location','user_followers','text']]","5a657365":"import plotly.express as px\n\ntweet_ct_ver = top_verified_df.groupby('user_name')['user_location'].count().reset_index()\n\ntweet_ct_ver.columns = ['user','count']\n\ntweet_ct_ver = tweet_ct_ver.sort_values(['count'])\n\nfig = px.bar(tweet_ct_ver.tail(20), x='count',y='user',orientation='h')\n\nfig.show()","04b8fb4e":"import plotly.express as px\n\ntweet_ct_unver = top_unverified_df.groupby('user_name')['user_location'].count().reset_index()\n\ntweet_ct_unver.columns = ['user','count']\n\ntweet_ct_unver = tweet_ct_unver.sort_values(['count'])\n\nfig = px.bar(tweet_ct_unver.tail(20), x='count',y='user',orientation='h')\n\nfig.show()","afcc912f":"veri_loc_count = top_verified_df.groupby('user_location')['user_name'].count().reset_index()\n\nveri_loc_count.columns = ['location','count']\n\nveri_loc_count = veri_loc_count.sort_values(['count'])\n\nfig = px.bar(veri_loc_count.tail(20), x='count',y='location',orientation='h')\n\nfig.show()","9ebda9b7":"unveri_loc_count = top_unverified_df.groupby('user_location')['user_name'].count().reset_index()\n\nunveri_loc_count.columns = ['location','count']\n\nunveri_loc_count = unveri_loc_count.sort_values(['count'])\n\nfig = px.bar(unveri_loc_count.tail(20), x='count',y='location',orientation='h')\n\nfig.show()","a8dc2bb9":"top_text_ver = top_verified_df.loc[:,['user_name','text']]\n\ntop_text_unver = top_unverified_df.loc[:,['user_name','text']]","324aa8f6":"top_followed_ver = top_verified_df.loc[:,['user_name','user_followers']]\n\ntop_followed_ver = top_followed_ver.groupby('user_name')['user_followers'].max().reset_index()\n\ntop_followed_unver = top_unverified_df.loc[:,['user_name','user_followers']]\n\ntop_followed_unver = top_followed_unver.groupby('user_name')['user_followers'].max().reset_index()\n\n\ntop_ver_followed_all = top_followed_ver.merge(top_text_ver,on='user_name')\ntop_unver_followed_all = top_followed_unver.merge(top_text_unver,on='user_name')\n\n","b6abe9ed":"top_followed = top_followed.sort_values(['user_followers'])\n\nfig = px.bar(top_followed.tail(20), x='user_followers',y='user_name',orientation='h')\n\nfig.show()","9406f5d4":"ver_text_data = top_ver_followed_all['text']\n\nver_text_data = ver_text_data.str.replace(\"[^\\w\\s]\",\"\").str.lower()\n\nunver_text_data = top_unver_followed_all['text']\n\nunver_text_data = unver_text_data.str.replace(\"[^\\w\\s]\",\"\").str.lower()\n","3b87fbea":"import sklearn\n\nfrom sklearn.feature_extraction.text import CountVectorizer","88364d0b":"def get_top_n_bigram(corpus, n=None):\n    vec = CountVectorizer(ngram_range=(2,2), stop_words='english').fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0)\n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq = sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\n\ncommon_words2 = get_top_n_bigram(ver_text_data, 100)\nfor word, freq in common_words2:\n    print(word, freq)","2712ebc9":"topics_ver = pd.DataFrame(common_words2, columns=['topic','count']).sort_values(['count'])\n\nfig = px.bar(topics_ver.tail(20), x='count',y='topic',width=1000, height=1000)\n\nfig.show()","04b8064d":"def get_top_n_unigram(corpus, n=None):\n    vec = CountVectorizer(ngram_range=(1,1), stop_words='english').fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0)\n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq = sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\n\ncommon_words3 = get_top_n_unigram(ver_text_data, 100)\nfor word, freq in common_words3:\n    print(word, freq)","a03ae365":"topics_ver2 = pd.DataFrame(common_words3, columns=['topic','count']).sort_values(['count'])\n\ntopics_ver2.drop(topics_ver2[topics_ver2['topic'] == 'amp'].index,inplace=True)\n\nfig = px.bar(topics_ver2.tail(20), x='count',y='topic',width=1000, height=1000,orientation = 'h')\n\nfig.show()","2bda5ccb":"def get_top_n_bigram(corpus, n=None):\n    vec = CountVectorizer(ngram_range=(2,2), stop_words='english').fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0)\n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq = sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\n\ncommon_words4 = get_top_n_bigram(unver_text_data, 100)\nfor word, freq in common_words4:\n    print(word, freq)","edf7cc8e":"topics_unver = pd.DataFrame(common_words4, columns=['topic','count']).sort_values(['count'])\n\ntopics_unver.drop(topics_unver[topics_unver['topic'] == 'amp'].index,inplace=True)\n\nfig = px.bar(topics_unver.tail(20), x='count',y='topic',width=1000, height=1000,orientation = 'h')\n\nfig.show()","ebe3a237":"**I am curious about what the verified versus unverified users are tweeting about**","358dbae0":"df['user_location'].dropna(inplace=True)\n\ndf['user_location'].isna().sum()"}}