{"cell_type":{"d5acb997":"code","00053999":"code","97587142":"code","924f095d":"code","c40aa5a9":"code","8030ca70":"code","5308a350":"code","803d8dfb":"code","7811f105":"code","63a91464":"code","0dff299c":"code","be6535b4":"code","d712dfbe":"code","5fd4fcfa":"code","c63a97c3":"code","d2525dba":"markdown"},"source":{"d5acb997":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)\n    \nfrom pathlib import Path\n\n","00053999":"data_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n\ntraining_tasks = sorted(os.listdir(training_path))\nevaluation_tasks = sorted(os.listdir(evaluation_path))\ntest_tasks = sorted(os.listdir(test_path))\nprint(len(training_tasks), len(evaluation_tasks), len(test_tasks))","97587142":"cmap = colors.ListedColormap(\n    ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n# 0:black, 1:blue, 2:red, 3:greed, 4:yellow,\n# 5:gray, 6:magenta, 7:orange, 8:sky, 9:brown\nplt.figure(figsize=(5, 2), dpi=200)\nplt.imshow([list(range(10))], cmap=cmap, norm=norm)\nplt.xticks(list(range(10)))\nplt.yticks([])\nplt.show()\n\ndef plot_task(task):\n    n = len(task[\"train\"]) + len(task[\"test\"])\n    fig, axs = plt.subplots(2, n, figsize=(4*n,8), dpi=50)\n    plt.subplots_adjust(wspace=0, hspace=0)\n    fig_num = 0\n    for i, t in enumerate(task[\"train\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Train-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Train-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    for i, t in enumerate(task[\"test\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Test-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Test-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    \n    plt.tight_layout()\n    plt.show()\n    \n","924f095d":"def get_data(task_filename):\n    with open(task_filename, 'r') as f:\n        task = json.load(f)\n    return task\n\nnum2color = [\"black\", \"blue\", \"red\", \"green\", \"yellow\", \"gray\", \"magenta\", \"orange\", \"sky\", \"brown\"]\ncolor2num = {c: n for n, c in enumerate(num2color)}","c40aa5a9":"def check(task, pred_func):\n    n = len(task[\"train\"]) + len(task[\"test\"])\n    fig, axs = plt.subplots(3, n, figsize=(4*n,12), dpi=50)\n    plt.subplots_adjust(wspace=0.3, hspace=0.3)\n    fig_num = 0\n    for i, t in enumerate(task[\"train\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        t_pred = pred_func(t_in)\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Train-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Train-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        axs[2][fig_num].imshow(t_pred, cmap=cmap, norm=norm)\n        axs[2][fig_num].set_title(f'Train-{i} pred')\n        axs[2][fig_num].set_yticks(list(range(t_pred.shape[0])))\n        axs[2][fig_num].set_xticks(list(range(t_pred.shape[1])))\n        fig_num += 1\n    for i, t in enumerate(task[\"test\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        t_pred = pred_func(t_in)\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Test-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Test-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        axs[2][fig_num].imshow(t_pred, cmap=cmap, norm=norm)\n        axs[2][fig_num].set_title(f'Test-{i} pred')\n        axs[2][fig_num].set_yticks(list(range(t_pred.shape[0])))\n        axs[2][fig_num].set_xticks(list(range(t_pred.shape[1])))\n        fig_num += 1","8030ca70":"def task_train000(x):\n    x_upsampled = x.repeat(3, axis=0).repeat(3, axis=1)\n    x_tiled = np.tile(x, (3, 3))\n    y = x_upsampled & x_tiled\n    return y\n\ntask = get_data(str(training_path \/ training_tasks[0]))\ncheck(task, task_train000)","5308a350":"def task_train001(x):\n    green, yellow = color2num[\"green\"], color2num[\"yellow\"]\n    \n    def get_closed_area(arr):\n        # depth first search\n        H, W = arr.shape\n        Dy = [0, -1, 0, 1]\n        Dx = [1, 0, -1, 0]\n        arr_padded = np.pad(arr, ((1,1),(1,1)), \"constant\", constant_values=0)\n        searched = np.zeros(arr_padded.shape, dtype=bool)\n        searched[0, 0] = True\n        q = [(0, 0)]\n        while q:\n            y, x = q.pop()\n            for dy, dx in zip(Dy, Dx):\n                y_, x_ = y+dy, x+dx\n                if not 0 <= y_ < H+2 or not 0 <= x_ < W+2:\n                    continue\n                if not searched[y_][x_] and arr_padded[y_][x_]==0:\n                    q.append((y_, x_))\n                    searched[y_, x_] = True\n        res = searched[1:-1, 1:-1]\n        res |= arr==green\n        return ~res\n        \n    y = x.copy()\n    y[get_closed_area(x)] = yellow\n    return y\n\ntask = get_data(str(training_path \/ training_tasks[1]))\ncheck(task, task_train001)","803d8dfb":"def task_train002(x):\n    red, blue = color2num[\"red\"], color2num[\"blue\"]\n    \n    def get_period_length(arr):\n        H, W = arr.shape\n        period = 1\n        while True:\n            cycled = np.pad(arr[:period, :], ((0,H-period),(0,0)), 'wrap')\n            if (cycled==arr).all():\n                return period\n            period += 1\n            \n    def change_color(arr, d):\n        res = arr.copy()\n        for k, v in d.items():\n            res[arr==k] = v\n        return res\n            \n    period = get_period_length(x)\n    y = x[:period, :]  # clop one period\n    y = np.pad(y, ((0,9-period),(0,0)), 'wrap')  # cycle\n    y = change_color(y, {blue: red})\n    return y\n    \ntask = get_data(str(training_path \/ training_tasks[2]))\ncheck(task, task_train002)","7811f105":"# I couldn't find out the rule of task Train003.\nplot_task(get_data(str(training_path \/ training_tasks[3])))","63a91464":"def task_train004(x):\n    def get_3x3_base_pattern(arr):\n        # find maximum number of unique color tiles in 3x3 field\n        H, W = arr.shape\n        arr_onehot = 1<<arr\n        arr_bool = arr.astype(bool).astype(np.int32)\n        counts = np.zeros(arr.shape, dtype=np.int32)\n        colors = np.zeros(arr.shape, dtype=np.int32)\n        for y in range(H-2):\n            for x in range(W-2):\n                counts[y, x] = arr_bool[y:y+2, x:x+2].sum()\n                colors[y, x] = np.bitwise_or.reduce(arr_onehot[y:y+2, x:x+2].reshape(-1))\n        n_colors = np.zeros(arr.shape, dtype=np.int32)\n        for c in range(1, 10):\n            n_colors += colors>>c & 1\n        counts[n_colors>=2] = 0\n        res_y, res_x = np.unravel_index(np.argmax(counts), counts.shape)\n        pattern = arr[res_y:res_y+3, res_x:res_x+3].astype(bool).astype(np.int32)\n        return (res_y, res_x), pattern\n    \n    (base_y, base_x), pattern = get_3x3_base_pattern(x)\n    pad_size = 25\n    x_padded = np.pad(x, ((pad_size,pad_size),(pad_size,pad_size)), \"constant\", constant_values=0)\n    base_y += pad_size\n    base_x += pad_size\n    y = x_padded.copy()\n    for dy in [-4, 0, 4]:\n        for dx in [-4, 0, 4]:\n            if dy==dx==0:\n                continue\n            y_, x_ = base_y+dy, base_x+dx\n            count = np.bincount(x_padded[y_:y_+4, x_:x_+4].reshape(-1))\n            if count[0]==9:\n                continue\n            count[0] = 0\n            color = count.argmax()\n            for i in range(1, 6):\n                # repeat pattern\n                y[base_y+dy*i:base_y+dy*i+3, base_x+dx*i:base_x+dx*i+3] = color * pattern\n    y = y[pad_size:-pad_size, pad_size:-pad_size]\n    return y\n\ntask = get_data(str(training_path \/ training_tasks[4]))\ncheck(task, task_train004)","0dff299c":"def task_train005(x):\n    blue, red = color2num[\"blue\"], color2num[\"red\"]\n    \n    def split_by_gray_line(arr):\n        H, W = arr.shape\n        gray = color2num[\"gray\"]\n        Y = [-1]\n        for y in range(H):\n            if (arr[y, :]==gray).all():\n                Y.append(y)\n        Y.append(H)\n        X = [-1]\n        for x in range(W):\n            if (arr[:, x]==gray).all():\n                X.append(x)\n        X.append(W)\n        res = [[arr[y1+1:y2, x1+1:x2] for x1, x2 in zip(X[:-1], X[1:])] for y1, y2 in zip(Y[:-1], Y[1:])]\n        return res\n    \n    def change_color(arr, d):\n        res = arr.copy()\n        for k, v in d.items():\n            res[arr==k] = v\n        return res\n            \n    x_split = split_by_gray_line(x)\n    assert len(x_split)==1\n    assert len(x_split[0])==2\n    x1, x2 = x_split[0]\n    y = x1 & x2\n    y = change_color(y, {blue: red})\n    return y\n\ntask = get_data(str(training_path \/ training_tasks[5]))\ncheck(task, task_train005)\n#plot_task(task)","be6535b4":"def task_train006(x):\n    H, W = x.shape\n    colors = [0, 0, 0]\n    for yy in range(H):\n        for xx in range(W):\n            color = x[yy, xx]\n            if color != 0:\n                colors[(yy+xx)%3] = color\n    y = x.copy()\n    for yy in range(H):\n        for xx in range(W):\n            y[yy, xx] = colors[(yy+xx)%3]\n    return y\n\ntask = get_data(str(training_path \/ training_tasks[6]))\ncheck(task, task_train006)\n#plot_task(task)","d712dfbe":"def task_train007(x):\n    sky, red = color2num[\"sky\"], color2num[\"red\"]\n    square_idx_set = set(tuple(idx) for idx in np.array(np.where(x==sky)).T)\n    object_idx_list = [tuple(idx) for idx in np.array(np.where(x==red)).T]\n    Dy = [0, 1, 0, -1]\n    Dx = [1, 0, -1, 0]\n    for dy, dx in zip(Dy, Dx):\n        for n in range(1, 100):\n            obj_idx = set((idx[0]+dy*n, idx[1]+dx*n) for idx in object_idx_list)\n            if obj_idx & square_idx_set:\n                y = np.zeros(x.shape, dtype=np.int32)\n                for idx in square_idx_set:\n                    y[idx] = sky\n                for idx in obj_idx:\n                    idx = (idx[0]-dy, idx[1]-dx)\n                    y[idx] = red\n                return y\n    assert False\n\ntask = get_data(str(training_path \/ training_tasks[7]))\ncheck(task, task_train007)\n#plot_task(task)","5fd4fcfa":"def task_train008(x):\n    H, W = x.shape\n    y = x.copy()\n    l, r = x.copy(), x.copy()\n    for yy in range(H):\n        for xx in range(3, W):\n            if x[yy, xx] == 0:\n                l[yy, xx] = l[yy, xx-3]\n        for xx in range(W-4, -1, -1):\n            if x[yy, xx] == 0:\n                r[yy, xx] = r[yy, xx+3]\n        for xx in range(W):\n            if l[yy, xx] == r[yy, xx]:\n                y[yy, xx] = l[yy, xx]\n    u, d = x.copy(), x.copy()\n    for xx in range(W):\n        for yy in range(3, H):\n            if x[yy, xx] == 0:\n                u[yy, xx] = u[yy-3, xx]\n        for yy in range(H-4, -1, -1):\n            if x[yy, xx] == 0:\n                d[yy, xx] = d[yy+3, xx]\n        for yy in range(H):\n            if u[yy, xx] == d[yy, xx]:\n                y[yy, xx] |= u[yy, xx]  # ignore black tiles by using '|='\n    return y\n    \ntask = get_data(str(training_path \/ training_tasks[8]))\ncheck(task, task_train008)\n#plot_task(task)","c63a97c3":"def task_train009(x):\n    H, W = x.shape\n    y = x.copy()\n    gray, blue, red, green, yellow = color2num[\"gray\"], color2num[\"blue\"], color2num[\"red\"], color2num[\"green\"], color2num[\"yellow\"]\n    colors = [blue, red, green, yellow]\n    colors_idx = 0\n    for yy in range(H):\n        for xx in range(W):\n            if y[yy, xx]==gray:\n                for y_ in range(yy, H):\n                    y[y_, xx] = colors[colors_idx]\n                colors_idx += 1\n    return y\n\ntask = get_data(str(training_path \/ training_tasks[9]))\ncheck(task, task_train009)\n#plot_task(task)","d2525dba":"ref. https:\/\/www.kaggle.com\/c\/abstraction-and-reasoning-challenge\/discussion\/130360"}}