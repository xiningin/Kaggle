{"cell_type":{"73ad9ea8":"code","50b0d2c0":"code","766746e9":"code","ac656eb5":"code","2b993b50":"code","84002aec":"code","f713d060":"code","95b11159":"code","09509391":"code","c2fdf938":"code","713c0978":"code","43e126f1":"code","c148297f":"code","93e6d4a3":"code","89d37c09":"code","23b10d21":"code","45051eac":"code","c560d9fb":"code","d66543d9":"code","ef39b679":"code","afb11294":"code","641fe375":"code","cee8638c":"code","4da2b4b6":"code","c810489b":"code","e90f620a":"code","be02e0d5":"code","5da07334":"code","a0769d77":"code","8280c857":"code","061c87cd":"code","80e05e05":"code","5dada5c6":"code","a4c74a6d":"code","872aedf4":"code","6cc5d049":"code","2d74e241":"markdown","ccfa8e8b":"markdown","9789821b":"markdown","49b29a9c":"markdown","88d1acc4":"markdown","c2b5c827":"markdown","c45d038e":"markdown","d7de0238":"markdown","26b198e4":"markdown","625b53c9":"markdown","c9f780ec":"markdown","18ab94bd":"markdown","466fc096":"markdown","9116adcf":"markdown","cb1a44da":"markdown","dffb3885":"markdown","a22e1dc2":"markdown","aaa5f10c":"markdown","d3135454":"markdown","7daabfc4":"markdown","09985023":"markdown","a0c4fafd":"markdown"},"source":{"73ad9ea8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","50b0d2c0":"data = pd.read_csv('\/kaggle\/input\/twitch-users-dataset\/Twitch_user_data.csv',index_col='Channel')","766746e9":"data.info()","ac656eb5":"data.head()","2b993b50":"data.describe()","84002aec":"for i in data.columns:\n    if ' ' in i:\n        data = data.rename(columns={i:i.replace(' ','_')})\nfor i in data.columns:\n    if '(' in i:\n        data = data.rename(columns={i:i.replace('(','_')})\nfor i in data.columns:\n    if ')' in i:\n        data = data.rename(columns={i:i.replace(')','_')}) ","f713d060":"data.head()","95b11159":"null_cols = [i for i in data.columns if data[i].isnull().any()]\nnull_cols","09509391":"data['Partnered']=data.Partnered.map(lambda p:int(p))\ndata['Mature']=data.Mature.map(lambda p:int(p))\ndata.head()","c2fdf938":"data.Language.nunique()","713c0978":"plot = data.groupby('Language').Average_viewers.agg(['max','min','mean','count']).sort_values(by='max',ascending=False)\nplot","43e126f1":"plt.figure(figsize=(20,10))\nsns.barplot(x=plot.index,y=plot['max'])\nplt.title('Max Average views Vs Language')\nplt.show()","c148297f":"plot2 = data.groupby('Language').Peak_viewers.agg(['max','min','mean','count']).sort_values(by='max',ascending=False)\nplot2","93e6d4a3":"plt.figure(figsize=(20,10))\nsns.barplot(x=plot2.index,y=plot2['max'])\nplt.title('Peak viewers Vs Language')\nplt.show()","89d37c09":"plt.figure(figsize=(14,6))\nsns.scatterplot(y=data['Language'], x=data['Average_viewers'])","23b10d21":"data.groupby('Channel').Average_viewers.min().sort_values(ascending=False).head(10)","45051eac":"data.groupby('Channel').Stream_time_minutes_.max().sort_values().head(10)","c560d9fb":"plt.figure(figsize=(14,6))\nsns.scatterplot(x=data['Stream_time_minutes_'], y=data['Average_viewers'])","d66543d9":"# Defining function for removing outliers\ndef rem_outliers(data,col,outlier):\n    q1,q2=np.percentile(col,[25,75])\n    iqr = q2-q1\n    lb = q1 - 1.5*iqr\n    ub = q2 + 1.5*iqr\n    for i in range(len(col)):\n        if(col[i]>ub or col[i]<lb):\n            if data.index[i] not in outlier:\n                outlier.append(data.index[i])","ef39b679":"outlier=[]\nfor col in data.columns:\n    if col != 'Language' and col!='Partnered' and col!='Mature':\n        rem_outliers(data,data[col],outlier)","afb11294":"len(outlier)\noutlier","641fe375":"data_cleaned=data.drop(outlier,axis=0,errors='ignore')","cee8638c":"data_cleaned","4da2b4b6":"plt.figure(figsize=(14,6))\nsns.scatterplot(x=data_cleaned['Stream_time_minutes_'], y=data_cleaned['Average_viewers'])","c810489b":"plot3 = data_cleaned.groupby('Language').Average_viewers.agg(['max','min','mean','count']).sort_values(by='max',ascending=False)\nplot3","e90f620a":"plt.figure(figsize=(20,10))\nsns.barplot(x=plot3.index,y=plot3['max'])\nplt.title('Average_viewers Vs Language')\nplt.show()","be02e0d5":"plot4 = data_cleaned.groupby('Language').Peak_viewers.agg(['max','min','mean','count']).sort_values(by='max',ascending=False)\nplot4","5da07334":"plt.figure(figsize=(20,10))\nsns.barplot(x=plot4.index,y=plot4['max'])\nplt.title('Peak viewers Vs Language')\nplt.show()","a0769d77":"'shroud' in data_cleaned.index","8280c857":"data_cleaned.groupby('Channel').Followers.max().sort_values(ascending=False).head(10)","061c87cd":"data_cleaned[data_cleaned['Partnered']==1].mean()","80e05e05":"data_cleaned[data_cleaned['Partnered']==0].mean()","5dada5c6":"data_cleaned[data_cleaned['Mature']==1].mean()","a4c74a6d":"data_cleaned[data_cleaned['Mature']==0].mean()","872aedf4":"data_cleaned[(data_cleaned['Language']=='English')].mean()","6cc5d049":"data_cleaned[(data_cleaned['Language']=='Russian')].mean()","2d74e241":"### Change column names and remove some space","ccfa8e8b":"Okay so dota2ti and dota2ti_ru have like least stream time but alot of average viewers, the might just have fake views!!","9789821b":"## Comparison B\/W English and Russian Langs\n","49b29a9c":"## Alalysis based on Partnered and matured content","88d1acc4":"Let's see for some null values[](http:\/\/)","c2b5c827":"## Language Analysis","c45d038e":"seems like some outliers there lets find out about their owners, they might be big channels","d7de0238":"## Let's see who's topping followers list","26b198e4":"WELL WELL WELL how the turn tables, Koreans overtook english as max average viewers","625b53c9":"There's not much difference but marginally non-mature channels performed well on average","c9f780ec":"now it looks fine ;-)","18ab94bd":"Channel: Name of the channel\n\nWatch Time: No. of minutes watched in minutes\n\nStream Time: No.of minutes live streamed in minutes\n\nPeak viewers: Total number of viewers at the peak time\n\nAverage Viewers: No. of viewers watched on average\n\nFollowers: Totak number of followers on their channe\nl\nFollowers gained: No.of followers gained in this time\n\nViews Gained: No. of views gained\n\nPartenered: was the video partnered or collaborated with someone?\n\nMature: Was the video had mature content?\n\nLanguage: Language in which video was streamed","466fc096":"Seems like we need a lot of data cleaning for out liers","9116adcf":"It's clearly evident that Partnering and collaborating helped gain followers and watch time more, but on average viewers prefered watching non-partenered more.\n\nPartenered channels have more followers on avg\n\n","cb1a44da":"No nan value found","dffb3885":"English speaking world, Okay!! ","a22e1dc2":"English has a definite advantage of being universal language gaining more followers and watch time on avg but russian channels are in the rise getting more no. followers than english","aaa5f10c":"## Label encoding the bool columns","d3135454":"that clearly are outliers, so many average viewers with less streaming time","7daabfc4":"Let's find total no. of languages that our data has","09985023":"English still ahead in peak time viewers!!","a0c4fafd":"* So they are dota2ti and dota2ti_ru lets see their straming time"}}