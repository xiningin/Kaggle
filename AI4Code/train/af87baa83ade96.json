{"cell_type":{"7ad4d4ec":"code","c25d609c":"code","66d5f2ed":"code","b1b94983":"code","aaf2571a":"code","b7d128c1":"code","58be55b8":"code","4713aedc":"code","0054952f":"code","cce8a61e":"code","ee43a8e7":"code","2e371feb":"code","fe1b4ad0":"code","085459a0":"code","79992d38":"code","f000dfd2":"code","c176a5a6":"code","defc628a":"code","7d177129":"code","69daa896":"code","fcab99fc":"code","4c35af79":"markdown","14152b00":"markdown","f4dedd4d":"markdown","f7fd54ec":"markdown","ad80b2ea":"markdown","b45ad20a":"markdown","98ab43e3":"markdown"},"source":{"7ad4d4ec":"import numpy as np \nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c25d609c":"train = pd.read_csv(\"..\/input\/santander-value-prediction-challenge\/train.csv\")\ntest = pd.read_csv(\"..\/input\/santander-value-prediction-challenge\/test.csv\")","66d5f2ed":"print(\"Train rows and columns : \", train.shape)\nprint(\"Test rows and columns : \", test.shape)","b1b94983":"unique_df = train.nunique().reset_index()\nunique_df.columns = [\"col_name\", \"unique_count\"]\nconstant_df = unique_df[unique_df[\"unique_count\"]==1]\nconstant_df.shape","aaf2571a":"str(constant_df.col_name.tolist())","b7d128c1":"X = train.drop(constant_df.col_name.tolist() + [\"ID\", \"target\"], axis=1)\ny = np.log1p(train[\"target\"].values) # Our Evaluation metric for the competition is RMSLE. So let us use log of the target variable to build our models.\n\ntest_2 = test.drop(constant_df.col_name.tolist() + [\"ID\"], axis=1)","58be55b8":"# from scipy.stats import spearmanr\n# import warnings\n# warnings.filterwarnings(\"ignore\")\n\n# labels = []\n# values = []\n# for col in train.columns:\n#     if col not in [\"ID\", \"target\"]:\n#         labels.append(col)\n#         values.append(spearmanr(train[col].values, train[\"target\"].values)[0])\n# corr_df = pd.DataFrame({'col_labels':labels, 'corr_values':values})\n# corr_df = corr_df.sort_values(by='corr_values')\n \n# corr_df = corr_df[(corr_df['corr_values']>0.1) | (corr_df['corr_values']<-0.1)]\n# ind = np.arange(corr_df.shape[0])\n# width = 0.9\n# fig, ax = plt.subplots(figsize=(12,30))\n# rects = ax.barh(ind, np.array(corr_df.corr_values.values), color='b')\n# ax.set_yticks(ind)\n# ax.set_yticklabels(corr_df.col_labels.values, rotation='horizontal')\n# ax.set_xlabel(\"Correlation coefficient\")\n# ax.set_title(\"Correlation coefficient of the variables\")\n# plt.show()","4713aedc":"from sklearn import ensemble\nmodel = ensemble.ExtraTreesRegressor(n_estimators=200, max_depth=20, max_features=0.5, n_jobs=-1, random_state=99)\nmodel.fit(X, y)\n\n## plot the importances ##\nfeat_names = X.columns.values\nimportances = model.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in model.estimators_], axis=0)\nindices = np.argsort(importances)[::-1][:20]\n\nplt.figure(figsize=(12,12))\nplt.title(\"Feature importances\")\nplt.bar(range(len(indices)), importances[indices], color=\"r\", yerr=std[indices], align=\"center\")\nplt.xticks(range(len(indices)), feat_names[indices], rotation='vertical')\nplt.xlim([-1, len(indices)])\nplt.show()","0054952f":"feat_names[indices]","cce8a61e":"X[feat_names[indices]].head()","ee43a8e7":"X_top_20_f = X[feat_names[indices]]","2e371feb":"X_top_20_f.shape","fe1b4ad0":"# Doign the same for test dataset.\ntest_top_20_f = test_2[feat_names[indices]]\ntest_top_20_f.shape","085459a0":"from sklearn.model_selection import train_test_split \n  \nX_train, X_valid, y_train, y_valid = train_test_split(X_top_20_f, y, test_size = 0.2, random_state = 0) ","79992d38":"from xgboost import XGBRegressor","f000dfd2":"clf_xgb = XGBRegressor()\nclf_xgb.fit(X_train, y_train)","c176a5a6":"y_pred = abs(clf_xgb.predict(X_valid))","defc628a":"from sklearn.metrics import mean_squared_log_error\nnp.sqrt(mean_squared_log_error( y_valid, y_pred ))","7d177129":"pred_test_full = abs(clf_xgb.predict(test_top_20_f))\nlen(pred_test_full)","69daa896":"subm_df = pd.DataFrame({\"ID\":test[\"ID\"].values})\nsubm_df[\"target\"] = pred_test_full\nsubm_df.to_csv(\"XGBReg_v2.csv\", index=False)","fcab99fc":"subm_df.head()","4c35af79":"Get top 20 Important features.","14152b00":"# Feature Importance - Extra trees model","f4dedd4d":"Takeing off the COnstant Features","f7fd54ec":"'f190486d6' seems to be the important variable followed by '58e2e02e6'.","ad80b2ea":"I have already done with the EDA and first submission. Now in here i am just improving the model.","b45ad20a":"# Correlation of features with target","98ab43e3":"Considering only the top 20 features.. for training the model."}}