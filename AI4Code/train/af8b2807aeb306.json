{"cell_type":{"63eb8a96":"code","9ed830c2":"code","4c07db1c":"code","1798ab07":"code","82cde2d4":"code","12044a2e":"code","3fb98d20":"code","417e9c4a":"code","3a8dd466":"code","63cba74c":"code","4dc066e3":"code","e19a1bf7":"code","6d226e6b":"code","6dbc6e91":"code","7565fb84":"code","6e936b90":"code","2c991acb":"code","fb55a008":"code","38ecda53":"code","8db91baf":"code","d38371e9":"code","6662260c":"code","e08ec2e6":"code","0b22f442":"code","578a2756":"code","d44ee418":"code","0ad8f730":"code","97745322":"code","1d36f0da":"code","a7fefb61":"code","127a9dda":"code","f0ecd011":"code","39459571":"code","ede5cf93":"code","251be747":"code","5ab7ce3a":"code","6bef00c0":"code","b8f2e2dc":"code","f1c8d2d1":"code","0fa3b51f":"code","ef46c6ae":"code","6db64c0f":"code","4db8cec3":"code","5f4794f9":"code","7a82d51a":"code","8b41241f":"code","a3309048":"code","c9b6d5eb":"code","11b68512":"code","7a7453e7":"code","3e2b7dec":"code","5e14dfc2":"code","1901c756":"code","4c6e800c":"code","de9f37ce":"code","3d985b63":"code","cf2a84ae":"code","46aeacb4":"code","9b37e598":"code","04e49b5f":"code","ca5432a6":"code","33b5ac65":"code","86203a79":"code","6d8903c2":"code","bf0ec054":"code","ca3da33a":"code","6f759255":"code","3c5d0ffa":"code","c24032a9":"code","98926621":"code","4715e8da":"markdown","f53e471f":"markdown","83299cc3":"markdown","dca6ce37":"markdown","7ed44775":"markdown","f813b110":"markdown","23ea892d":"markdown","c3019c96":"markdown","84958147":"markdown","6ebd7fd9":"markdown","0d986823":"markdown"},"source":{"63eb8a96":"#import required packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","9ed830c2":"df=pd.read_csv(\"..\/input\/car-price-prediction\/CarPrice_Assignment.csv\")\n#csv file dowanloaded from (ttps:\/\/www.kaggle.com\/hellbuoy\/car-price-prediction\/download)","4c07db1c":"df.head()","1798ab07":"df.tail()","82cde2d4":"df.shape","12044a2e":"df.describe()","3fb98d20":"df.info()","417e9c4a":"df.isnull().sum()","3a8dd466":"df.CarName.unique()","63cba74c":"df.loc[:,'company'] = df.CarName.str.split(' ').str[0]","4dc066e3":"df.company = df.company.apply(lambda x: str(x).lower())","e19a1bf7":"df.company.unique()","6d226e6b":"df['company'].replace('maxda','mazda',inplace=True)\ndf['company'].replace('porcshce','porsche',inplace=True)\ndf['company'].replace('toyouta','toyota',inplace=True)\ndf['company'].replace(['vokswagen','vw'],'volkswagen',inplace=True)\ndf.company.unique()","6dbc6e91":"df.drop(columns = 'CarName', inplace=True)","7565fb84":"df.fuelsystem.unique()","6e936b90":"df['fuelsystem'].replace('mfi','mpfi',inplace=True)","2c991acb":"df.drivewheel.unique()","fb55a008":"df['drivewheel'].replace('4wd', 'fwd', inplace = True)","38ecda53":"df.head()","8db91baf":"plt.subplot(1,2,1)\nplt.title(\"Car Price Spread\")\nsns.boxplot(y=df.price)\n\nplt.subplot(1,2,2)\nplt.title(\"Car Price Distribution Plot\")\nsns.histplot(df.price)\n","d38371e9":"#outlier Analysis\nfig, axs=plt.subplots(2,4,figsize=(16,8))\nplt1=sns.boxplot(df[\"price\"],ax=axs[0,0])\nplt2=sns.boxplot(df[\"wheelbase\"],ax=axs[0,1])\nplt3=sns.boxplot(df[\"enginesize\"],ax=axs[0,2])\nplt4=sns.boxplot(df[\"carheight\"],ax=axs[0,3])\nplt1=sns.boxplot(df[\"stroke\"],ax=axs[1,0])\nplt2=sns.boxplot(df[\"peakrpm\"],ax=axs[1,1])\nplt3=sns.boxplot(df[\"horsepower\"],ax=axs[1,2])\nplt4=sns.boxplot(df[\"boreratio\"],ax=axs[1,3])\n\n\n\nplt.tight_layout()\n","6662260c":"#outlier treatment\nQ1=df.price.quantile(0.25)\nQ3=df.price.quantile(0.75)\nIQR=Q3-Q1\ndf=df[(df.price >= Q1-1.5*IQR) & (df.price <= Q3+1.5*IQR)]\n","e08ec2e6":"plt.boxplot(df.price)","0b22f442":"fig, axs=plt.subplots(2,4,figsize=(16,8))\nplt1=sns.boxplot(df[\"price\"],ax=axs[0,0])\nplt2=sns.boxplot(df[\"wheelbase\"],ax=axs[0,1])\nplt3=sns.boxplot(df[\"enginesize\"],ax=axs[0,2])\nplt4=sns.boxplot(df[\"carheight\"],ax=axs[0,3])\nplt1=sns.boxplot(df[\"stroke\"],ax=axs[1,0])\nplt2=sns.boxplot(df[\"peakrpm\"],ax=axs[1,1])\nplt3=sns.boxplot(df[\"horsepower\"],ax=axs[1,2])\nplt4=sns.boxplot(df[\"boreratio\"],ax=axs[1,3])\n\nplt.tight_layout()\n","578a2756":"\nQ1 =df.stroke.quantile(0.25)\nQ3 = df.stroke.quantile(0.75)\nIQR = Q3 - Q1\ndf = df[(df.stroke >= Q1 - 1.5*IQR) & (df.stroke <= Q3 + 1.5*IQR)]","d44ee418":"fig, axs=plt.subplots(2,4,figsize=(16,8))\nplt1=sns.boxplot(df[\"price\"],ax=axs[0,0])\nplt2=sns.boxplot(df[\"wheelbase\"],ax=axs[0,1])\nplt3=sns.boxplot(df[\"enginesize\"],ax=axs[0,2])\nplt4=sns.boxplot(df[\"carheight\"],ax=axs[0,3])\nplt1=sns.boxplot(df[\"stroke\"],ax=axs[1,0])\nplt2=sns.boxplot(df[\"peakrpm\"],ax=axs[1,1])\nplt3=sns.boxplot(df[\"horsepower\"],ax=axs[1,2])\nplt4=sns.boxplot(df[\"boreratio\"],ax=axs[1,3])\n\nplt.tight_layout()\n","0ad8f730":"# Visualizing categorical data boxplots\nplt.figure(figsize=(20, 16))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'symboling', y = 'price', data = df)\nplt.subplot(3,3,2)\nsns.boxplot(x = 'fueltype', y = 'price', data = df)\nplt.subplot(3,3,3)\nsns.boxplot(x = 'aspiration', y = 'price', data = df)\nplt.subplot(3,3,4)\nsns.boxplot(x = 'doornumber', y = 'price', data = df)\nplt.subplot(3,3,5)\nsns.boxplot(x = 'carbody', y = 'price', data = df)\nplt.subplot(3,3,6)\nsns.boxplot(x = 'drivewheel', y = 'price', data = df)\nplt.subplot(3,3,7)\nsns.boxplot(x = 'enginelocation', y = 'price', data = df)\nplt.subplot(3,3,8)\nsns.boxplot(x = 'cylindernumber', y = 'price', data = df)\nplt.subplot(3,3,9)\nsns.boxplot(x = 'fuelsystem', y = 'price', data = df)\nplt.show()","97745322":"sns.boxplot(x ='carbody',y='price',data=df)","1d36f0da":"sns.boxplot(x='fuelsystem',y='price',data=df)","a7fefb61":"#convert categorical varables into numerical variables for calculations.\ndoors = {'two': 2, 'four': 4}\nfuel = {'gas': 0, 'diesel': 1 }\naspirat = {'std': 0, 'turbo': 1}\n\ndf.doornumber = df.doornumber.map(doors)\ndf.fueltype = df.fueltype.map(fuel)\ndf.aspiration = df.aspiration.map(aspirat)","127a9dda":"cylinders = {'two': 2,'three':3,'four': 4,'five': 5, 'six': 6,'eight': 8, 'twelve':12}\ndf.cylindernumber = df.cylindernumber.map(cylinders)","f0ecd011":"df =df[[\"curbweight\",\"enginesize\",\"wheelbase\",\"cylindernumber\",\"horsepower\",\"doornumber\",\"fueltype\",\"aspiration\",\"price\",\"carheight\",\"carwidth\",\"carlength\",\"stroke\",\"compressionratio\",\"peakrpm\",\"boreratio\"]].copy()","39459571":"sns.pairplot(df[[\"curbweight\",\"enginesize\",\"wheelbase\",\"horsepower\",\"price\",\"carheight\",\"stroke\",\"compressionratio\",\"peakrpm\",\"boreratio\"]])\nplt.show()","ede5cf93":"plt.figure(figsize = (16, 10))\nsns.heatmap(df.corr(), annot = True, cmap=\"YlGnBu\")\nplt.show()","251be747":"from sklearn.model_selection import train_test_split\nnp.random.seed(0)\ndf_train, df_test = train_test_split(df, train_size = 0.8, test_size = 0.2, random_state = 100)","5ab7ce3a":"from sklearn.preprocessing import MinMaxScaler","6bef00c0":"scaler = MinMaxScaler()","b8f2e2dc":"num_vars = ['wheelbase','carheight','curbweight','carwidth','carlength','boreratio','stroke','fueltype','cylindernumber','doornumber','aspiration','compressionratio','horsepower','peakrpm','horsepower','price']\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])","f1c8d2d1":"df_train.head()","0fa3b51f":"df_train.describe()","ef46c6ae":"y_train=df_train.pop(\"price\")\nX_train=df_train","6db64c0f":"#importing RFE and LinearRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression","4db8cec3":"lr = LinearRegression()\nlr.fit(X_train, y_train)","5f4794f9":"rfe = RFE(lr, 6)             # running RFE\nrfe = rfe.fit(X_train, y_train)","7a82d51a":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","8b41241f":"col = X_train.columns[rfe.support_]\ncol","a3309048":"X_train.columns[~rfe.support_]","c9b6d5eb":"X_train_rfe = X_train[col]","11b68512":"import statsmodels.api as sm  \nX_train_rfe = sm.add_constant(X_train_rfe)","7a7453e7":"lm = sm.OLS(y_train,X_train_rfe).fit()   # Running the linear model","3e2b7dec":"#Let's see the summary of our linear model\nprint(lm.summary())","5e14dfc2":"# Calculate the VIFs for the model\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","1901c756":"vif = pd.DataFrame()\nX = X_train_rfe\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","4c6e800c":"X_train_rfe= X_train_rfe.drop(['curbweight'], axis=1)\nlm = sm.OLS(y_train,X_train_rfe).fit()   ","de9f37ce":"print(lm.summary())","3d985b63":"vif = pd.DataFrame()\nX = X_train_rfe\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","cf2a84ae":"X_train_rfe= X_train_rfe.drop(['carlength'], axis=1)\nlm = sm.OLS(y_train,X_train_rfe).fit()   ","46aeacb4":"print(lm.summary())","9b37e598":"vif = pd.DataFrame()\nX = X_train_rfe\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","04e49b5f":"y_train_price = lm.predict(X_train_rfe)","ca5432a6":"fig = plt.figure()\nsns.distplot((y_train - y_train_price), bins = 20)\nfig.suptitle('Error', fontsize = 16)\nplt.xlabel('Errors', fontsize = 12)    ","33b5ac65":"df_test[num_vars] = scaler.transform(df_test[num_vars])\n\ndf_test.describe()","86203a79":"y_test = df_test.pop('price')\nX_test = df_test","6d8903c2":"X_test = X_test[col]\n","bf0ec054":"X_test= X_test.drop(['curbweight','carlength'], axis=1)","ca3da33a":"X_test_sm = sm.add_constant(X_test)","6f759255":"\ny_pred=lm.predict(X_test_sm)","3c5d0ffa":"\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nplt.xlabel('y_test_price', fontsize=12)\nplt.ylabel('y_pred', fontsize=12)","c24032a9":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\nfrom sklearn.metrics import r2_score","98926621":"rmse = sqrt(mean_squared_error(y_test, y_pred))\nprint('Model RMSE:',rmse)\n\nr2=r2_score(y_test, y_pred)\nprint('Model r2_score:',r2)","4715e8da":"Some coulmns drooped after visualization, as they are less significant.","f53e471f":"# Numerical data visualization","83299cc3":"# Car Price Prediction Multiple Linear Regression","dca6ce37":"Let consider only the company not all models and variants.","7ed44775":"# Conclusion","f813b110":"# DATA CLEANING","23ea892d":"Carwidth,horsepower,stroke,compressionratio are the components of the cars which affects cars price in USA Greatly.\n Geely Auto ,the Chinese company can check and modify above mentioned components accordingly and set their cars price.\n \n Price= -0.1320 + 0.5734(carwidth) +0.5390(horsepower) - 0.1406(stroke) + 0.1897(compressionratio)","c3019c96":"\"Problem Statement\"\n\nA Chinese automobile company Geely Auto aspires to enter the US market by setting up their manufacturing unit there and producing cars locally to give competition to their US and European counterparts.\n\nThey have contracted an automobile consulting company to understand the factors on which the pricing of cars depends. Specifically, they want to understand the factors affecting the pricing of cars in the American market, since those may be very different from the Chinese market. The company wants to know:\n\nWhich variables are significant in predicting the price of a car\nHow well those variables describe the price of a car\nBased on various market surveys, the consulting firm has gathered a large data set of different types of cars across the America market.\n\n\"Business Goal\"\n\nWe are required to model the price of cars with the available independent variables. It will be used by the management to understand how exactly the prices vary with the independent variables. They can accordingly manipulate the design of the cars, the business strategy etc. to meet certain price levels. Further, the model will be a good way for management to understand the pricing dynamics of a new market.","84958147":"Still have some misspelled Name.","6ebd7fd9":"# Testing the Model","0d986823":"# Scaling"}}