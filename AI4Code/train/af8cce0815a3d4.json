{"cell_type":{"03046da2":"code","056e06fe":"code","71a67af2":"code","d71af230":"code","502d2fb5":"code","90aa00a1":"code","5d589565":"code","964ee224":"code","ee6edc77":"code","c6511176":"code","df0539fb":"code","9cb192ea":"code","336b01bb":"code","ce0aff88":"code","9aea4363":"code","0fa47369":"markdown"},"source":{"03046da2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom keras.utils import to_categorical","056e06fe":"!wget https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/molecular-biology\/promoter-gene-sequences\/promoters.data","71a67af2":"!head -n 5 promoters.data","d71af230":"df = pd.read_csv('promoters.data', names=['label', 'read_name', 'read'])","502d2fb5":"df.head()","90aa00a1":"df['read'] = df['read'].apply(lambda x: x.strip('\\t'))","5d589565":"df.head()","964ee224":"def one_hot_encoding(seq):\n    mp = dict(zip('acgt', range(4)))\n    seq_2_number = [mp[nucleotide] for nucleotide in seq]\n    return to_categorical(seq_2_number, num_classes=4, dtype='float32').flatten()","ee6edc77":"one_hot_encoding('gcata')","c6511176":"df['read'] = df['read'].apply(lambda seq: one_hot_encoding(seq))","df0539fb":"df['label'] = df['label'].apply(lambda l: {'-' : 0, '+' : 1}[l])","9cb192ea":"df.head()","336b01bb":"from sklearn import model_selection\nX_train, X_test, y_train, y_test = model_selection.train_test_split(df['read'].tolist(), df['label'].tolist(), test_size=0.2, random_state=42)","ce0aff88":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report, accuracy_score","9aea4363":"names = [\"Nearest Neighbors\", \"Gaussian Process\",\n         \"Decision Tree\", \"Random Forest\", \"Neural Net\", \"AdaBoost\",\n         \"Naive Bayes\", \"SVM Linear\", \"SVM RBF\", \"SVM Sigmoid\"]\n\nclassifiers = [\n    KNeighborsClassifier(n_neighbors = 3),\n    GaussianProcessClassifier(1.0 * RBF(1.0)),\n    DecisionTreeClassifier(max_depth=5),\n    RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1),\n    MLPClassifier(alpha=1),\n    AdaBoostClassifier(),\n    GaussianNB(),\n    SVC(kernel = 'linear'), \n    SVC(kernel = 'rbf'),\n    SVC(kernel = 'sigmoid')\n]\n\n\nfor name, classifier in zip(names, classifiers):\n    classifier.fit(X_train, y_train)\n    predictions = classifier.predict(X_test)\n    print(name, ': ' , accuracy_score(y_test, predictions))\n    print(classification_report(y_test, predictions))","0fa47369":"### References\n\n[1] https:\/\/medium.com\/datadriveninvestor\/machine-learning-in-bioinformatics-d81b1b3eaba2"}}