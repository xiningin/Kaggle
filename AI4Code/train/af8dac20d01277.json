{"cell_type":{"251531ba":"code","e6bff82e":"code","9b34ace1":"code","bf17a657":"code","dafae54c":"code","c2bfc4e7":"code","a6119872":"code","cbebd39d":"code","008ed28a":"code","f6099488":"code","09c95355":"code","3f9b9aed":"code","3d59c55f":"code","d7e5e22d":"code","ca4c97b8":"code","6bcb4fcf":"code","e9e75322":"code","8e5db073":"code","d762746f":"code","68aacb41":"code","c76fd31a":"code","ad1665ce":"code","34c163cb":"code","6542d7c4":"code","14bcdc1e":"code","b5b829e3":"code","9993a03b":"code","ee89b82a":"code","8999e6f6":"code","d3aabaff":"code","623a9419":"code","bbc00388":"code","c0a0785e":"code","60333ae5":"code","7dcabe07":"code","1cebd7f5":"code","16cfc0e7":"code","9b404d27":"code","030aa9cc":"code","433ce991":"code","ca255fe5":"code","56179d0e":"code","2cde176f":"code","df157018":"code","ce88f1bd":"code","ffd5b152":"code","14253cae":"code","2e6178f1":"code","1cfc28f0":"code","51b75736":"code","79832362":"code","f5170b0b":"code","b4e0be30":"code","d21647d4":"code","e4539b9d":"code","6dca79ef":"code","7fa0adb8":"code","7b0f8e3e":"code","a836ceee":"code","ba498e27":"code","78c03118":"code","e4c37456":"code","46aafa7c":"code","b37b9b47":"code","4f60c0ee":"code","7e9593f2":"code","8f37c9b0":"code","d4fc3c7d":"markdown","804036ab":"markdown","6e583d79":"markdown","46f6be5b":"markdown","4aa54ad8":"markdown","b7e6f5d4":"markdown","9102d20b":"markdown","c0eed02b":"markdown","ef89e595":"markdown","92b4e807":"markdown","b9f87d41":"markdown","83d72181":"markdown","26111f3d":"markdown","da16ded3":"markdown","f89de0d2":"markdown","e0d89612":"markdown","a507e652":"markdown","068f17e8":"markdown"},"source":{"251531ba":"import numpy as np\nimport pandas as pd","e6bff82e":"bank=pd.read_excel('..\/input\/loan.xlsx')","9b34ace1":"print(bank.head())\nprint(bank.shape)","bf17a657":"del bank['id']\ndel bank['member_id']\ndel bank['emp_title']\ndel bank['issue_d']\ndel bank['url']\ndel bank['desc']\ndel bank['title']\ndel bank['zip_code']\ndel bank['addr_state']\ndel bank['earliest_cr_line']\ndel bank['last_pymnt_d']\ndel bank['next_pymnt_d']\ndel bank['last_credit_pull_d']\ndel bank['mths_since_last_major_derog']\ndel bank['annual_inc_joint']\ndel bank['dti_joint']\ndel bank['verification_status_joint']\ndel bank['tot_coll_amt']\ndel bank['tot_cur_bal']\ndel bank['open_acc_6m']\ndel bank['open_il_6m']\ndel bank['open_il_12m']\ndel bank['open_il_24m']\ndel bank['mths_since_rcnt_il']\ndel bank['total_bal_il']\ndel bank['il_util']\ndel bank['open_rv_12m']\ndel bank['open_rv_24m']\ndel bank['max_bal_bc']\ndel bank['all_util']\ndel bank['total_rev_hi_lim']\ndel bank['inq_fi']\ndel bank['total_cu_tl']\ndel bank['inq_last_12m']\ndel bank['acc_open_past_24mths']\ndel bank['avg_cur_bal']\ndel bank['bc_open_to_buy']\ndel bank['bc_util']\ndel bank['mo_sin_old_il_acct']\ndel bank['mo_sin_old_rev_tl_op']\ndel bank['mo_sin_rcnt_rev_tl_op']\ndel bank['mo_sin_rcnt_tl']\ndel bank['mort_acc']\ndel bank['mths_since_recent_bc']\ndel bank['mths_since_recent_bc_dlq']\ndel bank['mths_since_recent_inq']\ndel bank['mths_since_recent_revol_delinq']\ndel bank['num_accts_ever_120_pd']\ndel bank['num_actv_bc_tl']\ndel bank['num_actv_rev_tl']\ndel bank['num_bc_sats']\ndel bank['num_bc_tl']\ndel bank['num_il_tl']\ndel bank['num_op_rev_tl']\ndel bank['num_rev_accts']\ndel bank['num_rev_tl_bal_gt_0']\ndel bank['num_sats']\ndel bank['num_tl_120dpd_2m']\ndel bank['num_tl_30dpd']\ndel bank['num_tl_90g_dpd_24m']\ndel bank['num_tl_op_past_12m']\ndel bank['pct_tl_nvr_dlq']\ndel bank['percent_bc_gt_75']\ndel bank['tot_hi_cred_lim']\ndel bank['total_bal_ex_mort']\ndel bank['total_bc_limit']\ndel bank['total_il_high_credit_limit']","dafae54c":"bank.shape","c2bfc4e7":"bank.describe()","a6119872":"del bank['collections_12_mths_ex_med']\ndel bank['acc_now_delinq']\ndel bank['chargeoff_within_12_mths']\ndel bank['delinq_amnt']\ndel bank['tax_liens']","cbebd39d":"bank.shape","008ed28a":"bank.head()","f6099488":"bank.isna().sum()","09c95355":"def classify(s):\n    if(s=='10+ years'):\n        return 10\n    elif(s=='1 year'):\n        return 1\n    elif(s=='2 years'):\n        return 2\n    elif(s=='3 years'):\n        return 3\n    elif(s=='4 years'):\n        return 4\n    elif(s=='5 years'):\n        return 5\n    elif(s=='6 years'):\n        return 6\n    elif(s=='7 years'):\n        return 7\n    elif(s=='8 years'):\n        return 8\n    elif(s=='9 years'):\n        return 9\n    else:\n        return 0","3f9b9aed":"bank['emp_length']=bank.emp_length.apply(classify)","3d59c55f":"bank.mths_since_last_delinq.fillna(0,inplace=True)","d7e5e22d":"del bank['mths_since_last_record']","ca4c97b8":"bank.pub_rec_bankruptcies.fillna(bank.pub_rec_bankruptcies.mean(),inplace=True)","6bcb4fcf":"bank.revol_util.fillna(0,inplace=True)","e9e75322":"bank","8e5db073":"bank.term.unique()","d762746f":"def term(s):\n    if(s=='36 months'):\n        return 36\n    else:\n        return 60","68aacb41":"bank['term']=bank.term.apply(term)","c76fd31a":"bank.grade.unique()","ad1665ce":"def grade(s):\n    if(s=='A'):\n        return 1\n    elif(s=='B'):\n        return 2\n    elif(s=='C'):\n        return 3\n    elif(s=='D'):\n        return 4\n    elif(s=='E'):\n        return 5\n    elif(s=='F'):\n        return 6\n    else:\n        return 7","34c163cb":"bank['grade']=bank.grade.apply(grade)","6542d7c4":"del bank['sub_grade']","14bcdc1e":"bank.home_ownership.unique()","b5b829e3":"def home(s):\n    if(s=='RENT'):\n        return 1\n    elif(s=='OWN'):\n        return 2\n    elif(s=='MORTGAGE'):\n        return 3\n    elif(s=='OTHER'):\n        return 4\n    else:\n        return 5","9993a03b":"bank['home_ownership']=bank.home_ownership.apply(home)","ee89b82a":"bank.application_type.unique()","8999e6f6":"del bank['application_type']","d3aabaff":"bank.columns","623a9419":"bank.verification_status.unique()","bbc00388":"def verification(s):\n    if(s=='Verified'):\n        return 1\n    elif(s=='Source Verified'):\n        return 2\n    else:\n        return 3","c0a0785e":"bank['verification_status']=bank.verification_status.apply(verification)","60333ae5":"y=bank['loan_status']","7dcabe07":"y.unique()","1cebd7f5":"del bank['loan_status']","16cfc0e7":"def loan_status(s):\n    if(s=='Fully Paid'):\n        return 1\n    elif(s=='Charged Off'):\n        return 2\n    else:\n        return 3","9b404d27":"y=y.apply(loan_status)","030aa9cc":"y.describe()","433ce991":"bank.pymnt_plan.unique()","ca255fe5":"del bank['pymnt_plan']","56179d0e":"bank.purpose.unique()","2cde176f":"def purpose(s):\n    if(s=='other'):\n        return 2\n    else:\n        return 1","df157018":"bank['purpose']=bank.purpose.apply(purpose)","ce88f1bd":"bank.initial_list_status.unique()","ffd5b152":"del bank['initial_list_status']","14253cae":"bank.describe()","2e6178f1":"bank.shape","1cfc28f0":"from sklearn import model_selection","51b75736":"x_train,x_test,y_train,y_test=model_selection.train_test_split(bank,y,test_size=0.3)","79832362":"print(x_train.shape)\nprint(x_test.shape)","f5170b0b":"x_dev,x_test1,y_dev,y_test1=model_selection.train_test_split(x_test,y_test,test_size=0.5)","b4e0be30":"print(x_dev.shape)\nprint(x_test1.shape)","d21647d4":"from xgboost.sklearn import XGBClassifier","e4539b9d":"clf=XGBClassifier(random_state=1,n_jobs=8)","6dca79ef":"clf.fit(x_train,y_train)","7fa0adb8":"y_predict=clf.predict(x_test1)","7b0f8e3e":"clf.score(x_test1,y_test1)","a836ceee":"learning=[0.1,0.5,0.01,0.05,0.001]\nfor i in range(0,5):\n    clf1=XGBClassifier(random_state=1,learning_rate=learning[i])\n    clf1.fit(x_train,y_train)\n    print(clf.score(x_dev,y_dev))","ba498e27":"learning=[0.1,0.5,0.01,0.05,0.001]\nfor i in range(0,5):\n    clf1=XGBClassifier(random_state=1,learning_rate=learning[i],booster='gblinear')\n    clf1.fit(x_train,y_train)\n    print(clf.score(x_dev,y_dev))","78c03118":"print('Test accuracy score')\nclf.score(x_test,y_test)","e4c37456":"print('Train_accuracy_score')\nclf.score(x_train,y_train)","46aafa7c":"x_train","b37b9b47":"columns=x_test.columns","4f60c0ee":"import matplotlib.pyplot as plt","7e9593f2":"x=x_test.values\ny=y_test.values","8f37c9b0":"for i in range(0,33):\n    plt.scatter(x[0:1000,i],y[0:1000,])\n    plt.xlabel(columns[i])\n    plt.ylabel(\"y\")\n    plt.show()\n    plt.scatter(x[2000:3000,i],y[2000:3000,])\n    plt.xlabel(columns[i])\n    plt.ylabel(\"y\")\n    plt.show()\n    plt.scatter(x[3000:4000,i],y[3000:4000,])\n    plt.xlabel(columns[i])\n    plt.ylabel(\"y\")\n    plt.show()","d4fc3c7d":"# Without Using development set to optimize my test accuracy is 99.5%","804036ab":"# Seeing the NaN values in bank columns","6e583d79":"# Our XGBClassifier is giving 99.5% accuracy in every case of learning_rate and using both algo of xgtree as well as xglinear","46f6be5b":"# Reading data from xlsx","4aa54ad8":"# Deleting columns of no use and columns having all value as NaN","b7e6f5d4":"# Deleting the columns with 0 mean","9102d20b":"# Using Development Set to see if i can improve my model accuracy","c0eed02b":"# All application type are of type INDIVIDUAL so this feature is not going to have any effect on the preictions hence deleting it is best option","ef89e595":"# Dealing with all NaN Values","92b4e807":"# Dealing wth string type of data which is important for classification but string type of data can't be used in classification","b9f87d41":"# Describing the bank details","83d72181":"# According to me the company has the most danger from the persons who doesn't gives any purpose of loans so i will be classifying it in binary type","26111f3d":"# Dividing Data into training , Development and testing set","da16ded3":"# Again converting string data to int binary data","f89de0d2":"# Applying algorithms to see which one fits best","e0d89612":"# Till now all NaN has been removed and x and y are also there so task of data cleaning is done","a507e652":"# Creating our Y for the data which is loan status","068f17e8":"# Taking a look at data"}}