{"cell_type":{"254acd62":"code","44dc457b":"code","61c39c38":"code","b7767003":"code","26cb71f9":"code","942ceff7":"code","181abb1b":"code","a1602a81":"code","06d4d285":"code","0577ba09":"code","8057949b":"code","ad32c4e4":"code","c0e86611":"code","2374a40e":"code","2c397c4e":"code","0e329bb3":"code","079ca9b8":"code","e2ba77bb":"code","6f9bb1cb":"code","5c3c2d8a":"code","30a61f15":"code","4b887667":"code","32f4019f":"code","0c2314fb":"code","259c8433":"code","3db1b357":"code","2a8eaddd":"code","05a7eb7e":"code","7b14a173":"code","06d93bc0":"code","4af42aaf":"code","d1218977":"code","3469caf8":"code","241a0091":"code","0a7a1e3d":"code","f0007c5e":"code","8ae9a039":"code","48cce489":"code","3b4a6615":"code","5e02477a":"code","234a9122":"code","0cdf5bed":"code","8cba0ca7":"code","f8ef0028":"code","1487ebc6":"code","e84680a4":"code","231edd36":"markdown","317dd67f":"markdown","c1998462":"markdown","9c732ae4":"markdown","6a88fbe6":"markdown","37a1cc66":"markdown","416812d6":"markdown","94f1c1dd":"markdown","7d68905f":"markdown","39db4a5c":"markdown","a779d66f":"markdown","1c890833":"markdown","6683e6af":"markdown","9b97dbb0":"markdown","9ea42241":"markdown","7e2a565c":"markdown","c949808b":"markdown","4cdfbaf4":"markdown","1d7fca02":"markdown","6987fca7":"markdown","6da01e70":"markdown","f20fa864":"markdown","b3189f59":"markdown","6b68bdea":"markdown","ac550eaa":"markdown","5387e4e9":"markdown","c4c809d8":"markdown","0f09e8bc":"markdown","dd61369e":"markdown","ff4171c6":"markdown","70dabaf2":"markdown","1a42e1af":"markdown","03ced987":"markdown","b3d24a24":"markdown","d11dcf0a":"markdown","75c32123":"markdown","7bbbadbe":"markdown","97048809":"markdown","17efd0ce":"markdown","87851e5a":"markdown","67743745":"markdown","3203d91f":"markdown"},"source":{"254acd62":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","44dc457b":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sbn\nimport plotly.express as px\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dropout,BatchNormalization,Dense\nfrom keras.callbacks import EarlyStopping\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score","61c39c38":"data = pd.read_csv(\"\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv\")","b7767003":"data.head()","26cb71f9":"data.info()","942ceff7":"data.describe()","181abb1b":"data.isnull().sum()","a1602a81":"# shows the numbers of unique values\nfor col in data.columns:\n    n_uniq = data[col].nunique()\n    print(f\"Column Name:{col}, Unique Count: {n_uniq}\")","06d4d285":"# Show the values of  RainToday column\ndata[\"RainToday\"].value_counts()","0577ba09":"# Correlation amongst numeric attributes\ncorrmat = data.corr()\nplt.subplots(figsize=(16,16))\nsbn.heatmap(corrmat,annot=True, square=True)","8057949b":"sbn.countplot(data = data,x = \"RainToday\",palette=\"Dark2\")","ad32c4e4":"data[[\"Location\",\"MinTemp\"]].groupby(\"Location\").mean().sort_values(by=\"MinTemp\").iloc[:20]","c0e86611":"fig = px.bar(data[[\"Location\",\"MinTemp\"]].groupby(\"Location\").mean().sort_values(by=\"MinTemp\").iloc[:20],x=\"MinTemp\",\n            labels={\"MinTemp\":\"Minimum Temperature \u00b0C\",\"Location\":\"Location Names\"})\nfig.update_layout(\n    title={\n        \"text\":\"Top 20 Location has minimum temperature\",\n        \"x\":0.5,\n        \"y\":0.95,\n        \"xanchor\":\"center\",\n        \"yanchor\":\"top\"\n})\nfig.show()\n#Top 20 location has minimum temperature","2374a40e":"data[[\"Location\",\"MaxTemp\"]].groupby(\"Location\").mean().sort_values(ascending=False,by=\"MaxTemp\").iloc[:20]","2c397c4e":"fig = px.bar(data[[\"Location\",\"MaxTemp\"]].groupby(\"Location\").mean().sort_values(ascending=False,by=\"MaxTemp\").iloc[:20],x = \"MaxTemp\",\n            labels = {\"MaxTemp\":\"Maximum Temperature \u00b0C\",\"Location\":\"Location Names\"})\nfig.update_layout(\ntitle={\n    \"x\":0.5,\n    \"y\":0.95,\n    \"xanchor\":\"center\",\n    \"yanchor\":\"top\",\n    \"text\": \"Top 20 Location has maximium temperature\"\n})\nfig.show()\n# Top 20 location temp high ","0e329bb3":"# Show of 12 cities with the max temp column by years\ndata[\"year\"] = data[\"Date\"].apply(lambda x: x.split(\"-\")[0])\ndata[\"months\"] = data[\"Date\"].apply(lambda x: x.split(\"-\")[1])\ndata[\"day\"] = data[\"Date\"].apply(lambda x: x.split(\"-\")[2])\n\ndata_location = [\"Katherine\",\"Darwin\",\"Uluru\",\"Cairns\",\"Townsville\",\"AliceSprings\",\"Moree\",\"Brisbane\",\"PearceRAAF\",\"Cobar\",\"GoldCoast\",\"PerthAirport\"]\n\ngrp = data.groupby(\"Location\")\n\nnum_rows, num_cols = 6,2\nf, axes = plt.subplots(nrows=num_rows, ncols=num_cols, figsize=(12, 12))\n#f.suptitle('Distribution of Features', fontsize=16)\n\nfor index, city in enumerate(data_location):\n    i,j = (index \/\/ num_cols, index % num_cols)\n    city_group = grp.get_group(city)\n    df=city_group[[\"MaxTemp\",\"year\"]].groupby(\"year\").mean()\n    sbn.lineplot(x=\"year\",y=\"MaxTemp\", data=df, ax=axes[i,j],marker=\"o\").set_title(city)\n\nplt.tight_layout()\nplt.show()\n","079ca9b8":"data[\"year\"] = data[\"Date\"].apply(lambda x: x.split(\"-\")[0])\ndata[\"months\"] = data[\"Date\"].apply(lambda x: x.split(\"-\")[1])\ndata[\"day\"] = data[\"Date\"].apply(lambda x: x.split(\"-\")[2])\n\ndata_location = [\"MountGinini\",\"Canberra\",\"Tuggeranong\",\"Ballarat\",\"Launceston\",\"Sale\",\"Bendigo\",\"Dartmoor\",\"MountGambier\",\"Nhil\",\"Hobart\",\"SalmonGums\"]\n\ngrp = data.groupby(\"Location\")\n\nnum_rows,num_cols = 6,2\nf ,axes = plt.subplots(nrows = num_rows,ncols=num_cols,figsize=(12,12))\nfor index,city in enumerate(data_location):\n    i,j = (index \/\/ num_cols , index % num_cols)\n    city_group = grp.get_group(city)\n    df = city_group[[\"MinTemp\",\"year\"]].groupby(\"year\").mean()\n    sbn.lineplot(data = df,x = \"year\",y=\"MinTemp\",ax = axes[i,j],marker=\"o\").set_title(city)\n\nplt.tight_layout()\nplt.show()","e2ba77bb":"# mean rainfall all data \ndata[\"Rainfall\"].mean()","6f9bb1cb":"# Top 10 most rainfall on location \ndata[[\"Location\",\"Rainfall\"]].groupby(\"Location\").mean().sort_values(by=\"Rainfall\",ascending=False).iloc[:10]","5c3c2d8a":"fig = px.bar(data[[\"Location\",\"Rainfall\"]].groupby(\"Location\").mean().sort_values(by=\"Rainfall\",ascending=False).iloc[:10],x=\"Rainfall\",labels={\"Location\":\"Location Names\",\"Rainfall\":\"Rainfall Amount in day(mm)\"})\nfig.update_layout(\ntitle={\n    \"x\":0.5,\n    \"y\":0.95,\n    \"xanchor\":\"center\",\n    \"yanchor\":\"top\",\n    \"text\": \"Top 10 Location with maximium rainfall\"\n})\nfig.show()","30a61f15":"data[\"year\"] = data[\"Date\"].apply(lambda x: x.split(\"-\")[0])\ndata[\"months\"] = data[\"Date\"].apply(lambda x: x.split(\"-\")[1])\ndata[\"day\"] = data[\"Date\"].apply(lambda x: x.split(\"-\")[2])\n\ngrp = data.groupby(\"Location\")\ndata_location = [\"Newcastle\",\"Katherine\",\"MountGinini\",\"Sydney\",\"NorahHead\",\"Townsville\",\"Williamtown\",\"Wollongong\",\"GoldCoast\",\"CoffsHarbour\",\"Darwin\",\"Cairns\"]\n\nnum_cols,num_rows = 2,6\nf,axes = plt.subplots(nrows=num_rows,ncols=num_cols,figsize=(12,12))\n\nfor index,city in enumerate(data_location):\n    i,j = (index\/\/num_cols,index % num_cols)\n    city_group = grp.get_group(city)\n    df = city_group[[\"Rainfall\",\"year\"]].groupby(\"year\").mean()\n    sbn.lineplot(data=df,ax = axes[i,j],marker=\"o\").set_title(city)\nplt.tight_layout()\nplt.show()","4b887667":"fig = px.bar(data.groupby(\"Location\").mean().sort_values(ascending = False,by =\"Sunshine\").iloc[:10],x=\"Sunshine\",labels={\"Sunshine\":\"Sunshine (hours)\",\"Location\":\"Location Names\"})\nfig.update_layout(\ntitle={\n    \"x\":0.5,\n    \"y\":0.95,\n    \"xanchor\":\"center\",\n    \"yanchor\":\"top\",\n    \"text\": \"Top 10 Location with maximium Sunlight in a day\"\n})\nfig.show()\n","32f4019f":"data[[\"Location\",\"Sunshine\"]].groupby(\"Location\").mean().sort_values(ascending = False,by =\"Sunshine\").iloc[:12]","0c2314fb":"data[\"year\"] = data[\"Date\"].apply(lambda x: x.split(\"-\")[0])\ndata[\"months\"] = data[\"Date\"].apply(lambda x: x.split(\"-\")[1])\ndata[\"day\"] = data[\"Date\"].apply(lambda x: x.split(\"-\")[2])\ngrp = data.groupby(\"Location\")\ndata_location = [\"AliceSprings\",\"Woomera\",\"Moree\",\"PerthAirport\",\"PearceRAAF\",\"Perth\",\"Cobar\",\"Darwin\",\"Mildura\",\"Townsville\",\"WaggaWagga\",\"Brisbane\"]\n\nnum_cols ,num_rows = 2,6\n\nf,axes = plt.subplots(nrows = num_rows,ncols =num_cols,figsize=(12,12))\n\nfor index,city in enumerate(data_location):\n    i,j = (index\/\/num_cols,index % num_cols)\n    city_group = grp.get_group(city)\n    df = city_group[[\"Sunshine\",\"months\"]].groupby(\"months\").mean()\n    sbn.lineplot(data=df,ax = axes[i,j],marker=\"o\").set_title(city)\nplt.tight_layout()\nplt.show()","259c8433":"data[[\"Location\",\"WindGustSpeed\"]].groupby(\"Location\").mean().sort_values(ascending=False,by=\"WindGustSpeed\").iloc[:10]","3db1b357":"fig = px.bar(data[[\"Location\",\"WindGustSpeed\"]].groupby(\"Location\").mean().sort_values(ascending=False,by=\"WindGustSpeed\").iloc[:10],x=\"WindGustSpeed\",\n                labels={\"Location\":\"Location Names\",\"WindGustSpeed\":\"Wind Speed (km\/h)\"})\nfig.update_layout(\ntitle={\n    \"x\":0.5,\n    \"y\":0.95,\n    \"xanchor\":\"center\",\n    \"yanchor\":\"top\",\n    \"text\": \"Top 10 Location with maximum Windy\"\n})\nfig.show()","2a8eaddd":"data[\"year\"] = data[\"Date\"].apply(lambda x: x.split(\"-\")[0])\ndata[\"months\"] = data[\"Date\"].apply(lambda x: x.split(\"-\")[1])\ndata[\"day\"] = data[\"Date\"].apply(lambda x: x.split(\"-\")[2])\n\ngrp = data.groupby(\"Location\")\ndata_location = [\"Hobart\",\"MelbourneAirport\",\"Wollongong\",\"Ballarat\",\"Woomera\",\"MountGambier\",\"Nhil\",\"GoldCoast\",\"Portland\",\"Williamtown\",\"Nuriootpa\",\"AliceSprings\"]\n\nnum_cols, num_rows = 2,6\nf,axes = plt.subplots(nrows= num_rows,ncols = num_cols,figsize=(12,12))\n\nfor index,city in enumerate(data_location):\n    i,j = (index \/\/ num_cols,index % num_cols)\n    city_group =grp.get_group(city)\n    df=city_group[[\"WindGustSpeed\",\"months\"]].groupby(\"months\").mean()\n    sbn.lineplot(data=df,ax = axes[i,j],marker=\"o\").set_title(city)\nplt.tight_layout()\nplt.show()","05a7eb7e":"data[\"RainTomorrow\"].isnull().sum()","7b14a173":"data = data.drop([\"year\",\"day\",\"months\"],axis=1)\ndata.drop([\"Date\"],axis=1,inplace =True)\ndata = data.dropna(how =\"all\")\ndata = data.dropna(subset = [\"RainToday\",\"RainTomorrow\"],how=\"any\")\ndata = data.dropna(subset= [\"WindDir9am\",\"WindGustDir\",\"WindDir3pm\"],how=\"any\")","06d93bc0":"def fill_mean(column):\n    for col in column:\n        data[col] = data[col].fillna(data[col].mean())\ncolumns_fill = data.columns.drop([\"RainToday\",\"RainTomorrow\",\"WindDir9am\",\"WindDir3pm\",\"WindGustDir\",\"Location\"])\nfill_mean(columns_fill)","4af42aaf":"def preprocessing(column):\n    lbl = LabelEncoder()\n    for col in column:\n        lbl.fit(data[col])\n        data[col] = lbl.transform(data[col].values.reshape(-1,))\ncolumns_process = [\"WindDir3pm\",\"RainToday\",\"WindDir9am\",\"WindGustDir\",\"Location\"]\npreprocessing(columns_process)","d1218977":"feature_col = data.columns.drop(\"RainTomorrow\")\ntrain = data[feature_col]\ntarget = data[\"RainTomorrow\"].map({\"Yes\":1,\"No\":0}) #In here encode(0,1) target because i will use regression. ","3469caf8":"x_tr,x_test,y_tr,y_test = train_test_split(train,target,test_size=0.2,random_state=1)\nx_train,x_val,y_train,y_val = train_test_split(x_tr,y_tr,test_size=0.1,random_state=1)","241a0091":"print(\"X train shape\",x_train.shape)\nprint(\"Y train shape\",y_train.shape)\nprint(\"X Val shape\",x_val.shape)\nprint(\"Y Val shape\",y_val.shape)","0a7a1e3d":"sc = StandardScaler()\nX_train = sc.fit_transform(x_train)\nX_test = sc.transform(x_test)\nX_val = sc.transform(x_val)","f0007c5e":"model = Sequential()\n\nmodel.add(Dense(25,activation=\"relu\",kernel_initializer=\"normal\",input_dim=21))\nmodel.add(Dense(15,activation='relu'))\nmodel.add(Dense(15,activation='relu'))\nmodel.add(Dense(8,activation='relu'))\nmodel.add(Dense(1,activation=\"sigmoid\"))\nmodel.summary()","8ae9a039":"model.compile(optimizer=\"adam\",loss = \"binary_crossentropy\",metrics = [\"accuracy\"])\ncall_backs = EarlyStopping(monitor = \"val_loss\",patience = 10, mode = min,restore_best_weights=True )\nhist = model.fit(X_train,y_train,validation_data=(X_test,y_test),batch_size=32,verbose = 1, epochs = 30,callbacks = [call_backs])","48cce489":"plt.figure(figsize=(14,3))\nplt.subplot(1, 2, 1)\nplt.suptitle('Train', fontsize=10)\nplt.ylabel('Loss', fontsize=16)\nplt.plot(hist.history['loss'], color ='r', label='Training Loss')\nplt.plot(hist.history['val_loss'], color ='b', label='Validation Loss')\nplt.legend(loc='upper right')\n\n\nplt.subplot(1, 2, 2)\nplt.ylabel('Accuracy', fontsize=16)\nplt.plot(hist.history['accuracy'], color ='g', label='Training Accuracy')\nplt.plot(hist.history['val_accuracy'], color ='m', label='Validation Accuracy')\nplt.legend(loc='lower right')\n\nplt.show()","3b4a6615":"#Confusion Matrix\ny_pred = model.predict(X_test)\ny_pred = (y_pred > 0.5)\ncm = confusion_matrix(y_pred,y_test)\nprint(\"Confusion Matrix:\")\nprint(cm)","5e02477a":"# Accuracy Score\nacc = accuracy_score(y_test,y_pred)\nprint(\"Accuracy Score: \",acc)","234a9122":"# Classification Report\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_pred, y_test))","0cdf5bed":"sbn.heatmap(cm, annot=True,fmt='.5g',linewidths=5,cmap=\"Blues\",xticklabels='01',\n    yticklabels='01')","8cba0ca7":"# Confusion Matrix\ny_pred_val = model.predict(X_val)\ny_pred_val = (y_pred_val > 0.5)\ncm_val = confusion_matrix(y_pred_val,y_val)\nprint(cm_val)","f8ef0028":"# Accuracy Score\nacc_val = accuracy_score(y_pred_val,y_val)\nprint(\"Accuracy Validation: \",acc_val)","1487ebc6":"# Classification Report\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_pred_val, y_val))","e84680a4":"sbn.heatmap(cm_val, annot=True,fmt='.5g',linewidths=5,cmap=\"Blues\",xticklabels='01',\n    yticklabels='01')","231edd36":"* Next step, we will look at the amount of rainfall in Location by years. In here we just selected twelve cities but these Locations are the ones with the highest rainfall.","317dd67f":"* Next step the amount of sunlight received in a per months by Location (hours) ","c1998462":"* Next step, we will look relation MinTemp and Location column. MinTemp column is minimum temperature. So our purpose  has find to minimum temperature cities and we can show on the graph.","9c732ae4":"* Next step, we will look Max Temp relation by Location on the year.Thus we will learn which year has  most high temperature  value and most low temperature value.\n* We just will show 12 location other wise they pick  a lot of take up space. For this we take 12 max temperature location.\n","6a88fbe6":"* Firstly, we will look relation MaxTemp and Location column. MaxTemp column is maximum temperature. So our purpose has find to maximum temperature cities and we can show on the graph.","37a1cc66":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">6. Scale Data <\/p>","416812d6":"* Next step, we will show top 12 most windy Location by months mean","94f1c1dd":"* Next step, we will look Min Temp relation by Location on the year.Thus we will learn which year has  most low temperature  value and most low temperature value.\n* We just will show 12 location other wise they pick  a lot of take up space. For this we take 12 min temperature location.\n","7d68905f":"Predict next day rain in Australia...","39db4a5c":"* Show on the graph to confusion matrix","a779d66f":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">0. Introduction<\/p>\n","1c890833":"* Decide train and test data columns","6683e6af":"* The next step is show us the above scenario on the graph.","9b97dbb0":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">8. Evaluate The Model <\/p>","9ea42241":"* Data Cleaning to some NaN values","7e2a565c":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">7. Create Deep Learning Model <\/p>","c949808b":"In this section we will split the dataset into training and testing also we will split the training data set that we reserved for training so we to obtain validation dataset. Thus we can know,  what it's can do for real dataset. ","4cdfbaf4":"* Encode the categorical columns","1d7fca02":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">1. Imports<\/p>\n","6987fca7":"* Next step is show us training loss,validation loss and training accuracy, validation accuracy values for model.","6da01e70":"* Fill NaN values","f20fa864":"Evaluate Validation Data\n* Next step, predict validation  and compare with y_val. For this use X_val data.","b3189f59":"This section we will try to show on graph some of situation. We will create lots of scenario and try to show on the graph so we can understand to dataset clearly.","6b68bdea":"In this section we will scale our training and testing dataset thus deep learning algorithm can be better. This is be happen: standart scaler is standardize features by removing the mean and scaling to unit variance, so deep learning algorithm can calculate easyly and it's can be learn better.","ac550eaa":"* The next step is show us the above scenario on the graph.","5387e4e9":"* Show on the graph to confusion matrix","c4c809d8":"* Firstly we will look RainToday column values count on graph. ","0f09e8bc":"* Read dataset and show first 5 rows.","dd61369e":"In this section, we will create our deep learning model. Firstly we need to know input_dim this is our feature columns(feature_col) count. After we will decide to how much Dense we need time we try for this mostly. In here isn't have special number, like you can start with this number. Mostly people start with input_dim number. They divide input_dim number to 2 and this keep going to 1. For regression last step just can 1 Dense.","ff4171c6":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">5. Train And Test Split <\/p>","70dabaf2":"* Next step the amount of sunlight received in a day by Location (hours)","1a42e1af":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">2. Information About Dataset<\/p>","03ced987":"In this section we will evaluate the model. For this we will use classification report,confusion matrix and accuracy score. All of this will show us succes the model.","b3d24a24":"Evaluate Test Data\n* Next step, predict test  and compare with test. For this use X_test data.","d11dcf0a":"* Next step is will be show us the most windy Location.","75c32123":"* Compile and train the model.","7bbbadbe":"This section we will preprocessing for training. Firstly we will delete some columns, actually we don't need these columns. \nSome of them (year,day,months) we added  we added these for visualation but know we need to delete them. Also we will delete Date column because it's not meaning for the training every row it has different value and it's can effect badly our learning algorithm(deep learning). After all these we need to clean the data, our dataset has lots of NaN value and we need to decide what can we do for these. For RainToday and RainTomorrow columns i decided the delete NaN values because RainTomorrow is our target column and it's can't be NaN. F For the others columns NaN values i decided to fill each with column mean. Some columns had categorical values and our deep learning algorithm can't understand these so we encode these. For this  i used the LabelEncoder these columns (WindDir3pm,RainToday,Windir9am,WindGustDir,Location). After all of them dataset ready for training. ","97048809":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">3. Visualation The Dataset<\/p>","17efd0ce":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">4. Preprocessing<\/p>","87851e5a":"This notebook purpose is clearly understand to whetherAUS(predicition to whether rainy for  AUS ) dataset. In here mostly used visualation for this. For prediction used deep learning. In conclusion our ACC: %85.88 found.\n\nDescription About Columns:\n\n* Date: The date of observation\n* Location: The common name of the location of the weather station\n* MinTemp: The minimum temperature in degrees celsius\n* MaxTemp: The maximum temperature in degrees celsius\n* Rainfall: The amount of rainfall recorded for the day in mm\n* Evaporation: The so-called Class A pan evaporation (mm) in the 24 hours to 9am\n* Sunshine: The number of hours of bright sunshine in the day\n* WindGustDir: The direction of the strongest wind gust in the 24 hours to midnight\n* WindGustSpeed: The speed (km\/h) of the strongest wind gust in the 24 hours to midnight\n* WindDir9am: Direction of the wind at 9am\n* WindDir3pm: Direction of the wind at 3pm\n* WindSpeed9am: Wind speed (km\/hr) averaged over 10 minutes prior to 9am\n* WindSpeed3pm: Wind speed (km\/hr) averaged over 10 minutes prior to 3pm\n* Humadity9am: Humidity (percent) at 9am\n* Humadity3pm: Humidity (percent) at 3pm\n* Pressure9am: Atmospheric pressure (hpa) reduced to mean sea level at 9am\n* Pressure3pm: Atmospheric pressure (hpa) reduced to mean sea level at 3pm\n* Cloud9am: Fraction of sky obscured by cloud at 9am. This is measured in \"oktas\", which are a unit of eigths. It records how many eigths of the sky are obscured by cloud. A 0 measure indicates completely clear sky whilst an 8 indicates that it is completely overcast\n* Cloud3pm: Fraction of sky obscured by cloud (in \"oktas\": eighths) at 3pm\n* Temp9am: Temperature (degrees C) at 9am\n* Temp3pm: Temperature (degrees C) at 3pm\n* RainToday: Boolean: 1 if precipitation (mm) in the 24 hours to 9am exceeds 1mm, otherwise 0\n* RainTomorrow: The amount of next day rain in mm. Used to create response variable RainTomorrow. A kind of measure of the \"risk\".","67743745":"This step is we will learn to some information about dataset.\n* Info is show us non-null(not empty) and dtype(object,float64 etc.)\n* Describe is show us the data description(count,min,max,std,mean etc.)\n* Isnull is show us the null values in data.\n* Unique is show us the each column have how many different values.\n* Corr is show us the each column corelation with target(\"RainTomorrow\") column and we showed on the graph(Only numeric data)","3203d91f":"* Next step, we will look which Location most rainfall take."}}