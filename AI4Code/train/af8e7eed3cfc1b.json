{"cell_type":{"b426283d":"code","4c0efac1":"code","d06c060e":"code","e1abde44":"code","86fa8446":"code","4d543cce":"code","7dcf3bab":"code","8b4e5e82":"code","39a330cc":"code","cbfa2e95":"code","83d5145f":"code","6fb5ed54":"markdown","a26fe5c1":"markdown","458e1607":"markdown","fdd472ad":"markdown","7ce3c7be":"markdown","51762042":"markdown","9e069f7e":"markdown","1fbd495a":"markdown","81698afe":"markdown","bfa5d294":"markdown","5e19e7d8":"markdown","71e631e2":"markdown","df101aa2":"markdown"},"source":{"b426283d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime as dt\nfrom matplotlib.ticker import PercentFormatter\n\npd.options.mode.chained_assignment = None\n\nplt.rcParams[\"axes.facecolor\"] = \"#A2A2A2\"\nplt.rcParams[\"axes.grid\"] = 1","4c0efac1":"df = pd.read_csv(\"..\/input\/online-retail-final\/online_retail_final.csv\")\ndf.head()","d06c060e":"def prepare_pareto_data(df, col, price):\n    \n    df_price = pd.DataFrame(df.groupby(col)[price].sum())\n    df_price = df_price.sort_values(price, ascending = False)\n\n    df_price[\"CumulativePercentage\"] = (df_price[price].cumsum() \/ df_price[price].sum() * 100).round(2)\n    \n    return df_price","e1abde44":"def create_pareto_plot(df, col, price, log = True):\n    \n    plt.rcParams[\"axes.facecolor\"] = \"#A2A2A2\"\n    fig, ax = plt.subplots(figsize = (15, 5), dpi = 150, facecolor = \"#A2A2A2\")\n    plt.rcParams[\"axes.grid\"] = False\n    \n    if log == True:\n        sns.barplot(x = np.arange(len(df)), y = np.log(df[price]),  ax = ax, color = \"#101820\")\n        ax.set_ylabel(\"Total Price (Log - Scale)\")\n    else:\n        sns.barplot(x = np.arange(len(df)), y = df[price],  ax = ax, color = \"#101820\")\n\n    ax2 = ax.twinx()\n    \n    sns.lineplot(x = np.arange(len(df)), y = df.CumulativePercentage, ax = ax2, color = \"#0019AA\")\n    ax2.axhline(80, color = \"#008878\", linestyle = \"dashed\", alpha = 1)\n    ax2.axhline(90, color = \"#008878\", linestyle = \"dashed\", alpha = 0.75)\n\n    vlines = [int(len(df) * x \/ 10) for x in range(1, 10)]\n    for vline in vlines: ax2.axvline(vline, color = \"#008878\", linestyle = \"dashed\", alpha = 0.1)\n        \n    interaction_80 = (df.shape[0] - df[df.CumulativePercentage >= 80].shape[0])\n    ax2.axvline(interaction_80, color = \"#008878\", linestyle = \"dashed\", alpha = 1)\n\n    interaction_80_percentage = round((interaction_80 \/ df.shape[0]) * 100)\n    plt.text(interaction_80 + 25, 95, str(interaction_80_percentage) + \"%\")   \n    \n    prop = dict(arrowstyle= \"-|>\", color = \"#000000\", lw = 1.5, ls = \"--\")\n    plt.annotate(\"\", xy = (interaction_80 - 10, 80),  xytext = (interaction_80 + 120 , 73), arrowprops = prop)\n    \n    interaction_90 = (df.shape[0] - df[df.CumulativePercentage >= 90].shape[0])\n    ax2.axvline(interaction_90, color = \"#008878\", linestyle = \"dashed\", alpha = 0.8)\n    interaction_90_percentage = round((interaction_90 \/ df.shape[0]) * 100)\n    plt.text(interaction_90 + 25, 95, str(interaction_90_percentage) + \"%\")   \n    plt.annotate(\"\", xy = (interaction_90 - 10, 90),  xytext = (interaction_90 + 120 , 83), arrowprops = prop)\n\n    ax2.yaxis.set_major_formatter(PercentFormatter())\n    ax.set_yticks([])\n    plt.xticks([])\n    ax.set_ylabel(\"Revenue\", fontname = \"Times New Roman\")\n    ax2.set_ylabel(\"Cumulative Percentage\", fontname = \"Times New Roman\")\n    subject = \"Customers\" if col == \"CustomerID\" else \"Products\"\n    plt.title(\"Pareto Chart for \" + subject, fontname = \"Times New Roman\")\n    ax.set_xlabel(subject, fontname = \"Times New Roman\")\n    sns.despine(left = True, right = True, bottom = True, top = True)\n    plt.show()","86fa8446":"customer_price = prepare_pareto_data(df, \"CustomerID\", \"TotalPrice\")\n\ncustomer_price.head(10)","4d543cce":"create_pareto_plot(customer_price, \"CustomerID\", \"TotalPrice\", log = False)","7dcf3bab":"create_pareto_plot(customer_price, \"CustomerID\", \"TotalPrice\", log = True)","8b4e5e82":"item_price = prepare_pareto_data(df, \"StockCode\", \"TotalPrice\")\n\nitem_price.head(10)","39a330cc":"create_pareto_plot(item_price, \"StockCode\", \"TotalPrice\", log = False)","cbfa2e95":"create_pareto_plot(item_price, \"StockCode\", \"TotalPrice\")","83d5145f":"top_customers = customer_price[customer_price.CumulativePercentage <= 80].index.tolist()\n\nproducts_for_top_customers = df[df.CustomerID.isin(top_customers)].Description.drop_duplicates().values.tolist()\n\nproducts_for_other_customers = df[~df.CustomerID.isin(top_customers)].Description.drop_duplicates().values.tolist()","6fb5ed54":"Well, lets interpret these two charts. Actually, we don't need to write a lot of things. \n\nWe can see that 80% of company's revenue comes from top 30% of customers.\n\nAlso, 90% of company's revenue comes from top 48% of customers.","a26fe5c1":"**To check these hypothesis, we need only two things.** \n\n1) Individual sale records for customer\/product\n\n2) Calculating cumulative sum for them","458e1607":"**Sample Pareto Chart**\n\n![](https:\/\/www.cec.health.nsw.gov.au\/__data\/assets\/image\/0005\/341285\/Pareto-1.png)\n\n*https:\/\/www.cec.health.nsw.gov.au\/Quality-Improvement-Academy\/quality-improvement-tools\/pareto-charts","fdd472ad":"This is third part of https:\/\/www.kaggle.com\/mustafacicek\/detailed-marketing-cohort-pareto-rfm-forecast\n\nYou can reach this data from here. https:\/\/www.kaggle.com\/mustafacicek\/online-retail-final","7ce3c7be":"I define below functions for calculation and visualization.\n\n**prepare_pareto_data** finds individual revenue per customer\/product and calculates cumulative percentage of them.\n\n**create_pareto_plot** takes output from these data and visualize it.","51762042":"**Lets implement Pareto's 80-20 rule to our dataset**. We have two hypothesis:\n\n    1) 80% of company's revenue comes from 20% of total customers.\n\n    2) 80% of company's revenue comes from 20% of total products.","9e069f7e":"# Pareto Principle","1fbd495a":"The Pareto principle states that for many outcomes, roughly 80% of consequences come from 20% of causes (the \u201cvital few\u201d).\n\nOther names for this principle are the 80\/20 rule, the law of the vital few, or the principle of factor sparsity.\n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/eb\/Pareto_principle.png)\n\n*https:\/\/en.wikipedia.org\/wiki\/Pareto_principle","81698afe":"We can see that 80% of company's revenue comes from top 23% of products that have most revenue.\n\nAlso, 90% of company's revenue comes from 36% of products that have most revenue.\n\nMaybe, if the company reduce by half its variety of items, revenue couldn't decrease significantly.","bfa5d294":"# Next\n\nNext chapters:\n\nhttps:\/\/www.kaggle.com\/mustafacicek\/marketing-analytics-rfm-analysis\n\nhttps:\/\/www.kaggle.com\/mustafacicek\/marketing-analytics-forecasting\n\nFull work: https:\/\/www.kaggle.com\/mustafacicek\/detailed-marketing-analytics-cohort-pareto-rfm","5e19e7d8":"# Pareto Chart for Customers","71e631e2":"We can also plot it in log scale. It helps us for better visualization.","df101aa2":"# Pareto Chart for Products"}}