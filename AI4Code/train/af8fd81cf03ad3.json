{"cell_type":{"ca75ae8c":"code","627cdcc2":"code","68235b8a":"code","dea1af2c":"code","6f8aca63":"code","87c5a26a":"code","e539b81f":"code","a2b19857":"code","26570fff":"code","d346bc59":"code","d636d5a0":"code","aa8b133e":"code","1b15e2c5":"markdown","4ea63810":"markdown","786313f8":"markdown","8b6526c4":"markdown","5fc18bc9":"markdown","3bbd180c":"markdown","3825684c":"markdown"},"source":{"ca75ae8c":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC","627cdcc2":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","68235b8a":"drop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)","dea1af2c":"train.head()","6f8aca63":"train.columns","87c5a26a":"def getColumnsExceptOneColumn(df,col):\n    return train.loc[:, train.columns != col].columns.tolist()","e539b81f":"target_col = \"Survived\"\ny = train[target_col]\n\nfeatures = getColumnsExceptOneColumn(train,target_col)\n\n\nX = train[features]\nX_test = test[features]","a2b19857":"str_list = [] # empty list to contain columns with strings\nnum_list = []\nfor colname, colvalue in X.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)","26570fff":"str_list","d346bc59":"num_list","d636d5a0":"numeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, num_list),\n        ('cat', categorical_transformer, str_list)])\nclf = Pipeline(steps=[('preprocessor', preprocessor),(\"logistic\", SVC())])\nclf.fit(X, y)\n\npredictions = clf.predict(X_test)\n\nsubmission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = predictions\nsubmission.to_csv('submission_titanic.csv', index=False)","aa8b133e":"numeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, num_list),\n        ('cat', categorical_transformer, str_list)])\nclf = Pipeline(steps=[('preprocessor', preprocessor),(\"logistic\", SVC(C=100,max_iter=1000,random_state=2021))])\nclf.fit(X, y)\n\npredictions = clf.predict(X_test)\n\nsubmission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = predictions\nsubmission.to_csv('submission_titanic2.csv', index=False)","1b15e2c5":"# Set Train data and target \/ Set Test data","4ea63810":"# 2.C = 100","786313f8":"# Delete Columns","8b6526c4":"# SVC Pipeline Modeling ,Predict and Submit","5fc18bc9":"# Load Data","3bbd180c":"# 1. C = 1.0 (default)","3825684c":"# Devide Column "}}