{"cell_type":{"dbbe6d4d":"code","faf7035b":"code","196224fe":"code","e8b909c9":"code","d95b490f":"code","3cee2fec":"code","baf0f46e":"code","db141c28":"code","69924925":"code","4b324147":"code","e0bc4c94":"code","f592e0a0":"code","44be2914":"code","be29489b":"code","9706c5dc":"code","ea5fef4d":"code","c7226f5a":"code","9bc52b31":"code","a9aa4965":"code","e3939501":"markdown","df7768cd":"markdown","bf5f1e5f":"markdown","0905b16a":"markdown","ca1245dc":"markdown","265350f8":"markdown","bfff2119":"markdown","f0459b72":"markdown","45bd9a11":"markdown","08dfbd32":"markdown","b16164a9":"markdown","bca72540":"markdown","d68efdba":"markdown","6019f690":"markdown","fcd4e8fb":"markdown","53622610":"markdown","375f9a57":"markdown","3061bc4d":"markdown"},"source":{"dbbe6d4d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","faf7035b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nprint(os.listdir(\"..\/input\"))\nimport warnings\nimport matplotlib\nimport matplotlib.ticker as mtick\nimport seaborn as sns\nimport squarify\nfrom sklearn import preprocessing\nwarnings.filterwarnings(\"ignore\")\n\nplt.rcParams['axes.facecolor'] = \"#fbfbfb\"\nplt.rcParams['figure.facecolor'] =\"#fbfbfb\"\n\ndf = pd.read_csv('\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv')\n","196224fe":"df.isnull().shape #No blanks, we're good to go","e8b909c9":"df['total_score'] = df['math score']+df['reading score']+df['writing score']\n\ndf['mean_score'] = df['total_score']\/3\n\ndf['placing'] = df['mean_score'].apply(lambda x: \"A*\" if x > 90 else \"A\" if x > 80 else \"B\" if x > 70 else \"C\" if x > 60 else \"D or Lower\")\n\nplacing_order = ['A*','A','B','C','D or Lower']\n\n# apply num value to pare ed level\n\ndf['pare_ed_num'] = df['parental level of education'].map({'some high school':0, 'high school':1, 'some college':2,\"associate's degree\":3,\"bachelor's degree\":4,\"master's degree\":5})\n\n# make dummies\n\ndf['lunch_dummy'] = df['lunch'].apply(lambda x: 1 if x == \"free\/reduced\" else 0)\n\ndf['test_prep_dummy'] = df['test preparation course'].apply(lambda x: 1 if x == \"completed\" else 0)\n\ndf['gender_dummy'] = df['gender'].apply(lambda x: 1 if x == \"male\" else 0)\n\n\ndef flag_df(df):\n\n    if (df['lunch'] == 'free\/reduced') and (df['test preparation course'] == 'none'):\n        return 1\n    else:\n        return 0\n    \ndef flag2_df(df):\n\n    if (df['lunch'] == 'free\/reduced') and (df['test preparation course'] == 'none') and (df['pare_ed_num'] == 0):\n        return 1\n    else:\n        return 0\n    \n#variable to show those students on free lunches and have no test prep course\ndf['free_no_course'] = df.apply(flag_df, axis = 1)\n\ndf['pare_ed_free_no_course'] = df.apply(flag2_df, axis = 1)\n\n\ndf_conts = df[['math score','reading score','writing score','lunch_dummy','test_prep_dummy','gender_dummy', 'pare_ed_num','pare_ed_free_no_course','total_score','mean_score']]\n# Since all tests appear to be out of 100, we'll take a simple mean too\n\ndf['mean_score'] = df['total_score']\/3\n","d95b490f":"sns.palplot(['#0f4c81', '#9bb7d4', 'gray','#9b1b30'])\nplt.title(\"My palette for this project\",loc='left',fontfamily='serif',fontsize=15,y=1.2)\nplt.show()","3cee2fec":"# useful data\neth_df = pd.DataFrame(df['race\/ethnicity'].value_counts())\neth_df.columns = ['Count']\neth_df['Percentage'] = eth_df['Count'].apply(lambda x: (x\/sum(eth_df['Count'])*100))\n\neth_df = pd.DataFrame(eth_df.unstack()).reset_index(drop=False)\neth_df = eth_df.iloc[5:11, 1:3]\neth_df.columns = [\"Group\", \"Percentage\"]\neth_df = eth_df.reset_index(drop=True)\neth_df = eth_df.set_index('Group')\neth_df = eth_df.T\n\n## ind groups\n\ndf['Count'] = 1\n\n# splitting data into continents\na_df = df[df[\"race\/ethnicity\"]==\"group A\"]\nb_df = df[df[\"race\/ethnicity\"]==\"group B\"]\nc_df = df[df[\"race\/ethnicity\"]==\"group C\"]\nd_df = df[df[\"race\/ethnicity\"]==\"group D\"]\ne_df = df[df[\"race\/ethnicity\"]==\"group E\"]\n\n# A\na_count_df = pd.DataFrame(a_df[\"race\/ethnicity\"].value_counts())\na_count_df = a_count_df.reset_index(drop=False)\na_count_df.columns = [\"Group\",\"Count\"]\n\n\nb_count_df = pd.DataFrame(b_df[\"race\/ethnicity\"].value_counts())\nb_count_df = b_count_df.reset_index(drop=False)\nb_count_df.columns = [\"Group\",\"Count\"]\n\n\n# Ordering\npar_ed_order = ['some high school','high school','some college',\"associate's degree\",\"bachelor's degree\", \"master's degree\"]\n\n\na_ed = a_df['parental level of education'].value_counts()[par_ed_order]\nb_ed = b_df['parental level of education'].value_counts()[par_ed_order]\nc_ed = c_df['parental level of education'].value_counts()[par_ed_order]\nd_ed = d_df['parental level of education'].value_counts()[par_ed_order]\ne_ed = e_df['parental level of education'].value_counts()[par_ed_order]\n\n# Gender\n\nx=df.groupby(['gender'])['gender'].count()\ny=len(df)\nr=((x\/y)).round(2)\n\nmf_ratio = pd.DataFrame(r).T","baf0f46e":"# Setting up figure and axes\nfig = plt.figure(figsize=(10,16)) # create figure\ngs = fig.add_gridspec(4, 2)\ngs.update(wspace=0, hspace=0.8)\nax0 = fig.add_subplot(gs[0, 0:2])\nax1 = fig.add_subplot(gs[1, 0:2]) # create axes\n\n\n# Color selection\ncolor_map = [\"#bdbdbd\" for _ in range(6)]\ncolor_map[0] = color_map[1] = \"#0f4c81\"\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\n\n\n# Group stacking\nax0.barh(eth_df.index, eth_df['group C'],color=\"#0f4c81\", zorder=3, label=\"Group C\")\nax0.barh(eth_df.index, eth_df['group D'], left=eth_df['group C'],color=\"#4b4b4c\", zorder=3, label=\"Group D\")\nax0.barh(eth_df.index, eth_df['group B'], left=eth_df['group C']+eth_df['group D'],color=\"#676767\", zorder=3, label=\"Group B\")\nax0.barh(eth_df.index, eth_df['group E'], left=eth_df['group C']+eth_df['group D']+eth_df['group B'],color=\"#808080\", zorder=3, label=\"group E\")\nax0.barh(eth_df.index, eth_df['group A'], left=eth_df['group C']+eth_df['group D']+eth_df['group B']+eth_df['group E'],color=\"#989898\", zorder=3, label=\"Group A\")\n\nax0.xaxis.set_major_formatter(mtick.PercentFormatter())    \nax0.legend(loc='lower center', ncol=6, bbox_to_anchor=(0.48, -0.3))\n\n\nax0.text(0, 0.8, \n         'Student Race\/Ethnic Groups', \n         fontsize=30, \n         fontweight='bold', \n         fontfamily='serif')\n\nax0.text(0, 0.7, \n         'we have 5 groups in our dataset', \n         fontsize=18, \n         fontweight='light', \n         fontfamily='serif')\n\nax0.text(0, 0.53, \n         'Group C is the largest ethinc group, while Group A is the smallest.', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\nax0.text(0, 0.45, \n         'We will explore whether Race\/Ethnic grouping plays a role in performance.', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\n\n# Another view\n# Order for plotting categorical vars\n\nethnicity_order = ['group A','group B','group C','group D', 'group E']\n\nethnicity = df['race\/ethnicity'].value_counts()#[ethnicity_order]\n\n# Plot\n\nax1.bar(ethnicity.index, ethnicity, width=0.5, edgecolor='darkgray',linewidth=0.6,color=color_map)\n\n\n# Annotations percentage\n#annotations - on just one plot in this example\nfor x, val in zip(ethnicity.index, ethnicity):\n    ax1.text(x=x, y=val\/2, s=str(val), ha='center', c='white' )\n    \nax1.text(-0.5, 395, \n         'Seen Differently', \n         fontsize=30, \n         fontweight='bold', \n         fontfamily='serif')\n\nax1.text(-0.5, 355, \n         'Group C & Group D account for more than 50% of the students', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\n# Title & Subtitle\n#fig.text(0.125,1.03,'Gender distribution', fontfamily='serif',fontsize=15, fontweight='bold')\n#fig.text(0.125,0.92,'We see roughly equivalent males & females in our dataset.',fontfamily='serif',fontsize=12)  \n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n\n\n\n\nax1.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax1.set_axisbelow(True)\n\nax0.set_yticklabels([])\nax0.tick_params(axis=u'both', which=u'both',length=0)\nax1.tick_params(axis=u'both', which=u'both',length=0)\nplt.show()","db141c28":"# Setting up figure and axes\nfig = plt.figure(figsize=(12,16)) # create figure\ngs = fig.add_gridspec(4, 2)\ngs.update(wspace=0, hspace=0.8)\nax0 = fig.add_subplot(gs[0, 0:2])\nax1 = fig.add_subplot(gs[1:3, 0:2]) # create axes\n#ax2 = fig.add_subplot(gs[1, 1], ylim=(0, 50)) # create axes\n#ax3 = fig.add_subplot(gs[2, 0], ylim=(0, 50)) # create axes\n#ax4 = fig.add_subplot(gs[2, 1], ylim=(0, 50)) # create axes\n#ax5 = fig.add_subplot(gs[3, 0], ylim=(0, 50)) # create axes\n#ax6 = fig.add_subplot(gs[3, 1], ylim=(0, 50)) # create axes\n\n# Color selection\ncolor_map = [\"#bdbdbd\" for _ in range(6)]\ncolor_map[0] = \"#008294\"\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\n\n\nax0.barh(mf_ratio.index, mf_ratio['male'], color='#0f4c81', alpha=0.9, label='Male')\nax0.barh(mf_ratio.index, mf_ratio['female'], left=mf_ratio['male'], color='#9bb7d4', alpha=0.9, label='Female')\n\n# Annotations percentage\nfor i in mf_ratio.index:\n    ax0.annotate(f\"{int(mf_ratio['male'][i]*100)}%\", \n                   xy=(mf_ratio['male'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='serif',\n                   color='white')\n\n    ax0.annotate(\"Male\", \n                   xy=(mf_ratio['male'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=15, fontweight='light', fontfamily='serif',\n                   color='white')\n    \n    \nfor i in mf_ratio.index:\n    ax0.annotate(f\"{int(mf_ratio['female'][i]*100)}%\", \n                   xy=(mf_ratio['male'][i]+mf_ratio['female'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='serif',\n                   color='white')\n    ax0.annotate(\"Female\", \n                   xy=(mf_ratio['male'][i]+mf_ratio['female'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=15, fontweight='light', fontfamily='serif',\n                   color='white')\n\n\n## Data\n\nrace_gen = df.groupby('race\/ethnicity')['gender'].value_counts().unstack().loc[ethnicity_order]\nrace_gen['sum'] = race_gen.sum(axis=1)\nrace_gen_ratio = (race_gen.T \/ race_gen['sum']).T[['male', 'female']][::-1]\n\n## Plot\n\n\nax1.barh(race_gen_ratio.index, race_gen_ratio['male'], \n        color='#0f4c81', alpha=0.9, label='Male')\nax1.barh(race_gen_ratio.index, race_gen_ratio['female'], left=race_gen_ratio['male'], \n        color='#9bb7d4', alpha=0.9, label='Female')\n\n# male percentage\nfor i in race_gen_ratio.index:\n    ax1.annotate(f\"{int(race_gen_ratio['male'][i]*100)}%\",\n                   xy=(race_gen_ratio['male'][i]-0.05, i),\n                   va = 'center', ha='center',fontsize=20, fontweight='light', fontfamily='serif',\n                   color='white')\n\nfor i in race_gen_ratio.index:\n    ax1.annotate(f\"{int(race_gen_ratio['female'][i]*100)}%\", \n                   xy=(race_gen_ratio['male'][i]+race_gen_ratio['female'][i]-0.05, i),\n                   va = 'center', ha='center',fontsize=20, fontweight='light', fontfamily='serif',\n                   color='white')\n    # group name\n    ax1.annotate(i,\n                   xy=(0.09, i),\n                   va = 'center', ha='center',fontsize=20, fontweight='light', fontfamily='serif',\n                   color='white')\n    \n    \n    \nax0.text(0, 0.8, \n         'Gender Distribtuion', \n         fontsize=30, \n         fontweight='bold', \n         fontfamily='serif')\n\nax0.text(0, 0.7, \n         'Is there an even split?', \n         fontsize=18, \n         fontweight='light', \n         fontfamily='serif')\n\nax0.text(0, 0.53, \n         'There is roughly equitable numbers of males & females.', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\nax0.text(0, 0.45, \n         'We will explore whether gender plays a role in performance.', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\n\nax1.text(0, 5.5, \n         'Gender by Ethnic Group', \n         fontsize=30, \n         fontweight='bold', \n         fontfamily='serif')\n\nax1.text(0, 5.25, \n         'Is the distribution eqaul?', \n         fontsize=18, \n         fontweight='light', \n         fontfamily='serif')\n\nax1.text(0, 4.8, \n         'We saw above that Group A is the least represented,', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\nax1.text(0, 4.6, \n         'it also has the highest proportion of Males.', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n\nax0.set_yticklabels([])\nax0.tick_params(axis=u'both', which=u'both',length=0)\nax1.tick_params(axis=u'both', which=u'both',length=0)\n\n\nax0.set_xticks([])\nax0.set_yticks([])\nax1.set_xticks([])\nax1.set_yticks([])\n\nplt.show()","69924925":"conts = ['math score', 'reading score', 'writing score']","4b324147":"fig = plt.figure(figsize=(12, 12), facecolor='#f6f6f6')\ngs = fig.add_gridspec(4, 4)\ngs.update(wspace=0.1, hspace=0.4)\n\nbackground_color = \"#f6f6f6\"\n\n\n\nrun_no = 0\nfor row in range(0, 1):\n    for col in range(0, 3):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        locals()[\"ax\"+str(run_no)].tick_params(axis='y', left=False)\n        locals()[\"ax\"+str(run_no)].get_yaxis().set_visible(False)\n        for s in [\"top\",\"right\",\"left\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nrun_no = 0\nfor variable in conts:\n        sns.kdeplot(df[variable] ,ax=locals()[\"ax\"+str(run_no)], color='#0f4c81', shade=True, linewidth=1.5, alpha=0.9, zorder=3, legend=False)\n        locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n        locals()[\"ax\"+str(run_no)].set_xlabel(variable)\n        run_no += 1\n        \nax0.text(-20, 0.034, 'Score Distribution', fontsize=20, fontweight='bold', fontfamily='serif')\nax0.text(-20, 0.03, 'We see broadly similar shapes across subjects.', fontsize=13, fontweight='light', fontfamily='serif')\n\n\nplt.show()","e0bc4c94":"fig = plt.figure(figsize=(10, 7), facecolor='#f6f6f6')\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0.1, hspace=0.4)\n\nbackground_color = \"#f6f6f6\"\n\n\nx0 = 80\nx1 = 120\n\nax = sns.kdeplot(df['mean_score'],color='#f6f6f6')\nax.set_facecolor(background_color)\nkde_x, kde_y = ax.lines[0].get_data()\n\n#plotting the  lines\np1 = plt.axvline(x=x0,color=background_color)\n#p2 = plt.axvline(x=x1,color='#EF9A9A')\n\n\nax.fill_between(kde_x, kde_y, where=(kde_x>x0) & (kde_x<x1) , \n                interpolate=True, color='#0f4c81')\n\nax.fill_between(kde_x, kde_y, where=(kde_x<x0) & (kde_x>0) , \n                interpolate=True, color='gray')\n\nax.tick_params(axis='y', left=False)\nax.get_yaxis().set_visible(False)\nfor s in [\"top\",\"right\",\"left\"]:\n        ax.spines[s].set_visible(False)\nax.grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n#ax.set_xlabel('Mean Score',fontsize=15,fontfamily='serif',loc='left')\nax.set_xlabel('',fontsize=15,fontfamily='serif',loc='left')\n\nax.text(-20, 0.032, 'Mean Score with grades A and above highlighted', fontsize=20, fontweight='bold', fontfamily='serif')\nax.text(-20, 0.029, 'The distribution of scores looks normal, with only a small fraction\\nof students acheiving an A or above.', fontsize=13, fontweight='light', fontfamily='serif')\n\n\n\nplt.show()","f592e0a0":"fig = plt.figure(figsize=(18,15))\ngs = fig.add_gridspec(3, 3)\ngs.update(wspace=0.2, hspace=0.25)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\nax3 = fig.add_subplot(gs[1, 0])\n\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\nax2.set_facecolor(background_color) # axes background color\nax3.set_facecolor(background_color) # axes background color\n\n\n\nmale_only = df[df['gender'] == 'male']\nfemale_only = df[df['gender'] == 'female']\n\n# gender\nax3.grid(color='gray', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(female_only[\"mean_score\"], ax=ax3,color=\"#9bb7d4\",alpha=0.9, shade=True, label=\"Train\")\nsns.kdeplot(male_only[\"mean_score\"], ax=ax3, color=\"#0f4c81\",alpha=0.9, shade=True, label=\"Test\")\nax3.text(0, 0.03, 'Gender', \n         fontsize=14, fontweight='bold', fontfamily='serif', color=\"#323232\")\nax3.yaxis.set_major_locator(mtick.MultipleLocator(0.01))\n#ax0.legend(ncol=2, bbox_to_anchor=(0.75, 2.95), facecolor=background_color, edgecolor=background_color)\n\n\n\n# lunches\nlunch_only = df[df['lunch'] == 'free\/reduced']\nnolunch_only = df[df['lunch'] == 'standard']\nax1.grid(color='gray', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(lunch_only[\"mean_score\"], ax=ax1,color=\"#9b1b30\",alpha=0.9, shade=True, label=\"Train\")\nsns.kdeplot(nolunch_only[\"mean_score\"], ax=ax1, color=\"#0f4c81\",alpha=0.9, shade=True, label=\"Test\")\nax1.text(0, 0.0315, 'Free Lunches', \n         fontsize=14, fontweight='bold', fontfamily='serif', color=\"#323232\")\nax1.yaxis.set_major_locator(mtick.MultipleLocator(0.01))\n#ax1.legend(ncol=2, bbox_to_anchor=(0.75, 2.95), facecolor=background_color, edgecolor=background_color)\n\n## test prep\ntest_only = df[df['test preparation course'] == 'completed']\nnotest_only = df[df['test preparation course'] == 'none']\n\nax2.grid(color='gray', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(notest_only[\"mean_score\"], ax=ax2, color=\"#9b1b30\",alpha=0.9, shade=True, label=\"Test\")\nsns.kdeplot(test_only[\"mean_score\"], ax=ax2,color=\"#0f4c81\",alpha=0.9, shade=True, label=\"Train\")\nax2.text(0, 0.032, 'Test Preparation Course', \n         fontsize=14, fontweight='bold', fontfamily='serif', color=\"#323232\")\nax2.yaxis.set_major_locator(mtick.MultipleLocator(0.01))\n#ax2.legend(ncol=2, bbox_to_anchor=(0.75, 2.95), facecolor=background_color, edgecolor=background_color)\n\n\n## \n\nspec_only = df[df['pare_ed_free_no_course'] == 1]\nnospec_only = df[df['pare_ed_free_no_course'] == 0]\n\nax0.grid(color='gray', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\n\nsns.kdeplot(spec_only[\"mean_score\"], ax=ax0,color=\"#9b1b30\",alpha=0.9, shade=True, label=\"Train\")\nsns.kdeplot(nospec_only[\"mean_score\"], ax=ax0, color=\"#0f4c81\",alpha=0.9, shade=True, label=\"Test\")\nax0.text(-15, 0.03, 'Special Circumstances', \n         fontsize=14, fontweight='bold', fontfamily='serif', color=\"#323232\")\nax0.yaxis.set_major_locator(mtick.MultipleLocator(0.01))\n#ax3.legend(ncol=2, bbox_to_anchor=(0.75, 2.95), facecolor=background_color, edgecolor=background_color)\n\nax0.set(yticks=[])\nax1.set(yticks=[])\nax2.set(yticks=[])\nax3.set(yticks=[])\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n\nax0.set_ylabel(\"\")\nax1.set_ylabel(\"\")\nax2.set_ylabel(\"\")\nax3.set_ylabel(\"\")\nax0.set_xlabel(\"\")\nax1.set_xlabel(\"\")\nax2.set_xlabel(\"\")\nax3.set_xlabel(\"\")\n\n\nax0.grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\nax1.grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\nax2.grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\nax3.grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n\n\n\nax0.text(-15, 0.035, 'Student Mean Score: What effects it?', \n         fontsize=30, fontweight='bold', fontfamily='serif', color=\"#323232\")\n\nax3.text(155, 0.03, 'Insights', \n         fontsize=14, fontweight='bold', fontfamily='serif', color=\"#323232\")\n\nax3.text(155, 0.003, \n'''\nHere we can quickly see that there are several factors that seem to have an impact\non mean student performance.\n\nSpecial Cirumstances, that is those students with free lunches, \nno test preparation courses, and parents with no education above high school,\nare performing significantly worse than other students,\nthey need extra attention.\n\nGender does not seem to have an impact on performance - which is great to see.\n\nLet's now explore the data more.\n''', \n         fontsize=14, fontfamily='serif', color=\"#323232\")\n\nplt.show()","44be2914":"df.groupby('race\/ethnicity')['mean_score'].mean().reset_index()\ndf.groupby('race\/ethnicity')['mean_score'].mean().reset_index()\n\n\nspec = df[df['pare_ed_free_no_course'] == 1]\nnospec = df[df['pare_ed_free_no_course'] == 0]\n\nspec.groupby('race\/ethnicity')['mean_score'].mean().reset_index()\n\n\nfull = df.groupby('race\/ethnicity')['mean_score'].mean().reset_index()\n","be29489b":"\n# we generate a pd.Serie with the mean score for each group (used later for colors in the FacetGrid plot), and we create a new column\ngroup_mean_serie = df.groupby('race\/ethnicity')['mean_score'].mean()\ndf['grp_mean_score'] = df['race\/ethnicity'].map(group_mean_serie)\n\n# dict\ngroup_dict = {1: 'group A', 2: 'group B', 3: 'group C', 4: 'group D', 5: 'group E'}\n\n##\n\ncolor_map = [\"#bdbdbd\" for _ in range(6)]\ncolor_map[4] = \"#0f4c81\"\ncolor_map[1] = \"#9b1b30\"\n\n\nsns.set_theme(style=\"white\", rc={\"axes.facecolor\": (0, 0, 0, 0)})\n# if you want a different color for each month\n#pal = sns.color_palette(palette='coolwarm', n_colors=12)\n\n# in the sns.FacetGrid class, the 'hue' argument is the one that is the one that will be represented by colors with 'palette'\ng = sns.FacetGrid(df, row='race\/ethnicity', hue='grp_mean_score', aspect=15, height=0.75, palette=color_map)\n\n# then we add the densities kdeplots for each month\ng.map(sns.kdeplot, 'mean_score',\n      bw_adjust=1, clip_on=False,\n      fill=True, alpha=1, linewidth=1.5)\n\n# here we add a white line that represents the contour of each kdeplot\ng.map(sns.kdeplot, 'mean_score', \n      bw_adjust=1, clip_on=False, \n      color=\"w\", lw=2)\n\n# here we add a horizontal line for each plot\ng.map(plt.axhline, y=0,\n      lw=4, clip_on=False)\n\n# we loop over the FacetGrid figure axes (g.axes.flat) and add the month as text with the right color\n# notice how ax.lines[-1].get_color() enables you to access the last line's color in each matplotlib.Axes\nfor i, ax in enumerate(g.axes.flat):\n    ax.text(-11, 0.005, group_dict[i+1], fontsize=15,fontfamily='serif',color=ax.lines[-1].get_color())\n    \n# we use matplotlib.Figure.subplots_adjust() function to get the subplots to overlap\ng.fig.subplots_adjust(hspace=-0.4)\n\n# eventually we remove axes titles, yticks and spines\ng.set_titles(\"\")\ng.set(yticks=[])\ng.despine(bottom=True, left=True)\n\nplt.setp(ax.get_xticklabels(), fontsize=14,fontfamily='serif',)\n#plt.xlabel('Mean Score', fontfamily='serif', fontsize=15)\n\n\nax.text(-11,0.126,'Mean Score by Group',\n               fontsize=30,\n               fontweight='bold',fontfamily='serif',color='#323232')\nax.text(-11,0.117,'The poor performance and negative skew of Group A is also noteworthy, as is the variance in Group C.',\n               fontsize=14,\n               fontweight=20,fontfamily='serif',color='#323232')\nplt.show()","9706c5dc":"test = df.groupby('race\/ethnicity')['placing'].value_counts()\n\n# Order for plotting categorical vars\n\nplacing_order = ['A*','A','B','C','D or Lower']\n\n\ngroup_order = ['group A','group B','group C','group D','group E']\n\n\nrace_place = df.groupby('race\/ethnicity')['placing'].value_counts().unstack().loc[group_order]\nrace_place['sum'] = race_place.sum(axis=1)\n\nrace_place_ratio = (race_place.T \/ race_place['sum']).T[['A*','A','B','C','D or Lower']][::-1]\nrace_place_ratio\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax.set_facecolor(background_color) # axes background color\n\nfig, ax = plt.subplots(1,1,figsize=(12, 6),)\n\nax.barh(race_place_ratio.index, race_place_ratio['A*'], \n        color='#0f4c81', alpha=0.9, label='A*')\nax.barh(race_place_ratio.index, race_place_ratio['A'], left=race_place_ratio['A*'], \n        color='#20639B', alpha=0.9, label='A')\nax.barh(race_place_ratio.index, race_place_ratio['B'], left=race_place_ratio['A*']+race_place_ratio['A'],\n        color='gray', alpha=0.7, label='B')\nax.barh(race_place_ratio.index, race_place_ratio['C'], left=race_place_ratio['A*']+race_place_ratio['A']+race_place_ratio['B'], \n        color='gray', alpha=0.7, label='C')\nax.barh(race_place_ratio.index, race_place_ratio['D or Lower'],left=race_place_ratio['A*']+race_place_ratio['A']+race_place_ratio['B']+race_place_ratio['C'], \n        color='#9b1b30', alpha=0.9, label='D or Lower')\n\n\n\nax.set_xlim(0, 1)\nax.set_xticks([])\nax.set_yticklabels(race_gen_ratio.index, fontfamily='serif', fontsize=11)\n\n# percentage labels for each placing\nfor i in race_place_ratio.index:\n    ax.annotate(f\"{int(race_place_ratio['A*'][i]*100)}%\", \n                   xy=(race_place_ratio['A*'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=9, fontweight='light', fontfamily='serif',\n                   color='white')\n\nfor i in race_place_ratio.index:\n    ax.annotate(f\"{int(race_place_ratio['A'][i]*100)}%\", \n                   xy=(race_place_ratio['A*'][i]+race_place_ratio['A'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=9, fontweight='light', fontfamily='serif',\n                   color='white')\n    \nfor i in race_place_ratio.index:\n    ax.annotate(f\"{int(race_place_ratio['B'][i]*100)}%\", \n                   xy=(race_place_ratio['A*'][i]+race_place_ratio['A'][i]+race_place_ratio['B'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=9, fontweight='light', fontfamily='serif',\n                   color='white')\n    \nfor i in race_place_ratio.index:\n    ax.annotate(f\"{int(race_place_ratio['C'][i]*100)}%\", \n                   xy=(race_place_ratio['A*'][i]+race_place_ratio['A'][i]+race_place_ratio['B'][i]+race_place_ratio['C'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=9, fontweight='light', fontfamily='serif',\n                   color='white')\n    \nfor i in race_place_ratio.index:\n    ax.annotate(f\"{int(race_place_ratio['D or Lower'][i]*100)}%\", \n                   xy=(race_place_ratio['A*'][i]+race_place_ratio['A'][i]+race_place_ratio['B'][i]+race_place_ratio['C'][i]+race_place_ratio['D or Lower'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=9, fontweight='light', fontfamily='serif',\n                   color='white')\n    \n\nfig.text(0.13, 0.95, 'Grade Distribution by Race\/Ethnicity Group', fontsize=27, fontweight='bold', fontfamily='serif')   \nfig.text(0.131, 0.91, 'Noticeable is the alarming amount of D or lower grades in Group A.', fontsize=15,fontfamily='serif')   \n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n    \nax.legend(loc='lower center', ncol=5,facecolor='white',edgecolor='white', bbox_to_anchor=(0.5, -0.1))\n\nplt.show()\n","ea5fef4d":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\n\nplacing_order_2 = ['D or Lower','C','B','A','A*']\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax.set_facecolor(background_color) # axes background color\n\ncolors = [\"lightgray\", \"#4b4b4c\",\"#0f4c81\"]\ncmap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\nhm = pd.crosstab(df['race\/ethnicity'],df['placing'], normalize = \"index\").loc[ethnicity_order,placing_order_2]\n\nsns.heatmap(hm,square=True, linewidth=2.5,cbar=False,cmap=cmap,\n            annot=True,fmt='1.0%',vmax=.3,vmin=0.1,ax=ax,annot_kws={\"fontsize\":14})\n\nax.spines['top'].set_visible(True)\nax.set_yticklabels(ax.get_yticklabels(), fontfamily='serif', rotation = 0, fontsize=11)\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif', rotation=0, fontsize=11)\n\nax.text(0,-0.68,'Grade Distribution',fontsize=30,fontweight='bold',fontfamily='serif')\nax.text(0,-0.2,'The areas of lowest performance\\nare clear.',fontsize=18,fontfamily='serif')\n\nax.set_ylabel('')    \nax.set_xlabel('')\nax.tick_params(axis=u'both', which=u'both',length=0)\n\n### line\n\nfig.text(1.085, 0.85\n         , 'Insight', fontsize=18, fontweight='bold', fontfamily='serif',color='#323232')\n\nfig.text(1.085, 0.22, '''\nWe note that that in group A, \n45% of students acheive a \nD or lower grade - this is concerning. \n\nWe will explore other trends\nrelated to group later.\n\nIn contrast, group E has the\nhighest proportion of\nstudents who score A*, A, and B. \n\nThese students are the \ntop performers, on average, \nin the entire\neducational instituion. \n\nIs the due to parental socio-\neconomic status? \n\nWe will explore this later.\n'''\n         , fontsize=14, fontweight='light', fontfamily='serif',color='#323232')\n\n\n\nimport matplotlib.lines as lines\nl1 = lines.Line2D([1, 1], [0.1, 0.9], transform=fig.transFigure, figure=fig,color='black',lw=0.2)\nfig.lines.extend([l1])\n\n##\nplt.tight_layout()\nplt.show()","c7226f5a":"df['count'] = 1\n# Setting up figure and axes\nfig = plt.figure(figsize=(15,10)) # create figure\ngs = fig.add_gridspec(2, 2)\ngs.update(wspace=0.1, hspace=-0.2)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1]) # create axes\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\n\ncolors = [\"lightgray\", \"#4b4b4c\",\"#0f4c81\"]\ncmap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\nsns.heatmap(pd.pivot_table(df, values='count', index=['race\/ethnicity'], columns=['parental level of education'], aggfunc=np.sum).loc[ethnicity_order,par_ed_order], \n            cmap=cmap,\n            square=True, \n            linewidth=2.5, \n            cbar=False, \n            ax=ax0,\n            annot=True,\n            fmt=\"d\",annot_kws={\"fontsize\":14}\n           )\n\nax0.spines['top'].set_visible(True)\n\nax0.set_yticklabels(ax0.get_yticklabels(), fontfamily='serif', rotation = 0, fontsize=11)\n#ax0.set_xticklabels(ax.get_xticklabels(), fontfamily='serif', rotation=90, fontsize=11)\n\n\n\n\nhm = pd.crosstab(df['race\/ethnicity'],df['parental level of education'], normalize = \"index\").loc[ethnicity_order,par_ed_order]\n\nsns.heatmap(hm,square=True, linewidth=2.5,cbar=False,cmap=cmap,\n            annot=True,fmt='1.0%',vmax=.3,vmin=0.1,ax=ax1,annot_kws={\"fontsize\":14})\n\nax1.spines['top'].set_visible(True)\n#ax1.set_yticklabels(ax.get_yticklabels(), fontfamily='serif', rotation = 0, fontsize=11)\n#ax1.set_xticklabels(ax.get_xticklabels(), fontfamily='serif', rotation=90, fontsize=11)\n\nax0.text(0,-1.4,'Ethnic Group & \\nParental Education Level',fontsize=30,fontweight='bold',fontfamily='serif')\nax0.text(0,-0.4,'We see the Group A & B have lower parental education levels.\\nPerhaps this effects grades for these students?',fontsize=18,fontfamily='serif')\n\n\n\nax0.set_xlabel('')\nax0.set_ylabel('') \nax1.set_xlabel('')\nax1.set_yticklabels(\"\")\nax1.set_ylabel('') \n\n#plt.ylabel(\"Parental Level of Education\", fontsize=12, fontweight='light', fontfamily='serif')\n#plt.xlabel(\"Race\/Ethnicity\", fontsize=12, fontweight='light', fontfamily='serif')\n\nplt.tight_layout()\nplt.show()","9bc52b31":"# Setting up figure and axes\nfig = plt.figure(figsize=(15,10)) # create figure\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.1, hspace=0.8)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1]) # create axes\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\n\ncolors = [\"lightgray\", \"#4b4b4c\",\"#0f4c81\"]\ncmap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\nhm = pd.crosstab(df['race\/ethnicity'],df['parental level of education'], normalize = \"index\").loc[ethnicity_order,par_ed_order]\n\nsns.heatmap(hm.T,square=True, linewidth=2.5,cbar=False,cmap=cmap,\n            annot=True,fmt='1.0%',vmax=.3,vmin=0.1,ax=ax0,annot_kws={\"fontsize\":14})\n\nhm = pd.crosstab(df['placing'],df['parental level of education'], normalize = \"index\").loc[placing_order,par_ed_order]\n\nsns.heatmap(hm.T,square=True, linewidth=2.5,cbar=False,cmap=cmap,\n            annot=True,fmt='1.0%',vmax=.3,vmin=0.1,ax=ax1,annot_kws={\"fontsize\":14})\n#ax1.set_xticklabels(\"\")\nax1.set_yticklabels(\"\")\nax1.set_ylabel('') \nax0.set_ylabel('')\nax0.set_xlabel('')\nax1.set_xlabel('')\nax0.set_yticklabels(ax0.get_yticklabels(), fontfamily='serif', rotation = 0, fontsize=11)\nax0.set_xticklabels(ax0.get_xticklabels(), fontfamily='serif', rotation=0, fontsize=11)\nax1.set_xticklabels(ax1.get_xticklabels(), fontfamily='serif', rotation=0, fontsize=11)\n\nax0.tick_params(axis=u'both', which=u'both',length=0)\nplt.tight_layout()\n\nax0.tick_params(axis='both', which='both', length=0)\nax1.tick_params(axis='both', which='both', length=0)\n\n\nax0.text(0,-0.7,'Parental Education & Student Performance',fontsize=30,fontweight='bold',fontfamily='serif')\nax0.text(0,-0.4,'It does appear that lower scoring students have less educated parents.',fontsize=18,fontfamily='serif')\n\nplt.show()","a9aa4965":"fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n\ncorr = df_conts.corr()\n\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\ncolors = [\"#9b1b30\",\"lightgray\", \"#4b4b4c\",\"#0f4c81\"]\ncmap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\nsns.heatmap(corr, \n            square=True, \n            mask=mask,\n            linewidth=2.5, \n            vmax=0.4, vmin=-0.4, \n            cmap=cmap, \n            cbar=False, \n            ax=ax,annot=True)\n\nax.set_yticklabels(ax.get_xticklabels(), fontfamily='serif', rotation = 0, fontsize=11)\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif', rotation=90, fontsize=11)\n\nax.spines['top'].set_visible(True)\n\nfig.text(0.97, 0.99, 'Numeric Indicators', fontweight='bold', fontfamily='serif', fontsize=30, ha='right')    \nfig.text(0.97, 0.912, 'Dataset : Student Test Performance\\nAuthor : Josh Swords', fontweight='light', fontfamily='serif', fontsize=18, ha='right')    \n\nfig.text(0.97, 0.91, '''\nWe observe here that performance \nin one area is strongly correlated \nto peformance in other areas.\nIt is also interesting how\nnegatively correlated free lunches \nare with performance, \nspeaking to parental \nsocio-economic status.''', \n         fontweight='light', fontfamily='serif', fontsize=18, va='top', ha='right') \n\nplt.tight_layout()\nplt.show()","e3939501":"# Work In Progress...\n\n I will contunue to work on this project exploring different questions and visualizing them","df7768cd":"Let's now take a look at gender","bf5f1e5f":"# We can use a Matrix for a quick overview of our data\n\nThis will allow us to spot high-level areas of interest quickly","0905b16a":"# A search for an explanation\n\nWe know there are performance gaps between groups, but can other features of our dataset explain why this is occuring? ","ca1245dc":"# Overview\n\nHere I show the general composition of our student dataset. \n\nWe see that Group C and D are the most numerous, with Group A being the smallest group. It will be interesting to explore if\/how these groups differ in performance. \n\nNext, I break the overall, and then each group, down by gender. \nOverall there are roughly equal males & females, but groups A, B, & C, are pre-dominated by one gender over the other. Will we notice any performance gaps between the genders?","265350f8":"# Exploratory Data Analysis & Visualization","bfff2119":"So overall, our students seem to be quite uniform - that is, there are no significant skews positive or negative in the data.\n\nDoes this change if we focus on specific groups?","f0459b72":"# Performance differences within & between groups\n\nSo now we know the overall make-up of our dataset we can explore performance differences","45bd9a11":"# Let's try some visualization","08dfbd32":"# To be continued...","b16164a9":"# Exploring performance further\n\nWhen broken down in to grades, we see a concerning picture. Nearly half of all students in Group A obtain a D or Lower as their final grade.","bca72540":"Can we view mean student scores across groups in an interesting way?\n\nSometimes charts don't need to be perfectly clear. Value can be added if a viewer can instantly grasp a general distribution. This adds to the viewer's understanding.","d68efdba":"# Feature Engineering\n\nThis will offer flexibility and also the opportunity to surface previously hidden insights.\n\nView the code-block below if you wish.","6019f690":"# Parental Education and grades\n\nSo we know that parental education is an important factor when looking at student performance.\n\nLet's view side-by-side the distribution of parental education across our student's groups, \nand also our studen't grades.\n\nThis visual paints a clear picture.\n\n","fcd4e8fb":"I begin with some data cleaning, although it wasn't necessary in this case, usually this is an essential step. ","53622610":"The scores seem pretty uniform across subjects. \n\nWhere is A & above in these plots? ","375f9a57":"# Let's look at the student scores \n","3061bc4d":"The purpose of this notebook is to practice Data Visualization, and hopefully learn a few things along the way! \n\nWhilst I won't go on to build a predictive model in this case, the visualizations should help build your intuitions about what could be salient features in a model. Remember, the visualizations have a purpose - they're helping you to discover & understand your data.\n\n**Questions I want to answer**:\n\n- Are there features that seem to lead to poor performance in exams?\n\nWe see that Parental Education, if the student receives Free lunches, and whether or not the student completed a Test Preparation course all have a large impact on Student Performance. \n\nI defined a special group that contains students that have the lowest parent level of education, recieve free lunches, and have not completed a test preparation course - these are by far the worst performing students and should recieve special attention from education providers.\n\n- Are certain groups performing worse than others? If so, can we answer why?\n\nWe see differences between and within groups. But Group A perform worse overall. The answer lies in all the above listed factors, which themselves seem to pertain to parental socio-economic level.\n\n- Which factors seem to lead to success?\n\nSuccess seems to be highly related to, yet again, parental socio-economic status.\n\nHere we assume that parents with a higher socio-economic status **do not** require free lunches for their children, and that they themselves received a good education - often going to university\/college. "}}