{"cell_type":{"9204fbfb":"code","955ca6ac":"code","1e7bbd9f":"code","844f6b9e":"code","27e8a7bb":"code","9a7e9860":"code","9e79e2c5":"code","ba26e108":"code","2ff10206":"code","19157f9d":"code","8b232833":"code","e5553ef4":"code","93e855a1":"code","07cd2055":"code","d4a631e2":"code","ec2797ae":"code","30d094c2":"code","c98f3c89":"code","17de92c4":"code","73950b52":"code","11a6ed03":"code","4e745271":"code","9378641b":"code","c341ee2a":"code","a34760cc":"code","2a1d19e0":"code","e65eee36":"code","fbeae989":"code","6cdc1d6f":"markdown","124bf209":"markdown"},"source":{"9204fbfb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","955ca6ac":"import matplotlib.pyplot as plt, seaborn as sns\n\nfrom kmodes.kprototypes import KPrototypes\nfrom sklearn.preprocessing import StandardScaler","1e7bbd9f":"anime = pd.read_csv('\/kaggle\/input\/top-1000-ranked-mangas-by-myanimelist\/top_1000.csv')\nanime.head()","844f6b9e":"# Removing the unwanted columns\nanime = anime.drop(['Unnamed: 0'], axis=1)\ndf = anime.drop(['Title_Japanese','Title','Title_Synonym','Synopsis'], axis=1)","27e8a7bb":"df.head()","9a7e9860":"# 'Not available' publish period is set to the right date based on internet search\ndf.loc[anime[anime.Publish_period=='Not available'].index,'Publish_period'] = '\tApril 7, 1974 to August 24, 1975'","9e79e2c5":"# Corresponding publish dates are extracted and new features are formed\ndf['Publish_on'] = df.Publish_period.apply(lambda x: x.split(' to ')[0])\ndf['Publish_till'] = df.Publish_period.apply(lambda x: x.split(' to ')[-1])\ndf = df.drop('Publish_period', axis=1)\ndf.head()","ba26e108":"# Sanity check for same dates on publish start and end\nindex = df.loc[df.Publish_on==df.Publish_till].index\ndf.loc[index,'Publish_till'] = 'unknown'\n\ndf.loc[df.Publish_on==df.Publish_till]","2ff10206":"# Corresponding years are extracted from publish dates\n\ndf.Publish_on = df.Publish_on.apply(lambda x: int(x.split(' ')[-1]))\n\nindex = df[~df.Publish_till.isin(['present','unknown'])].index\ndf.loc[index,'Publish_till'] = df.loc[index,'Publish_till'].apply(lambda x: int(x.split(' ')[-1]))","19157f9d":"# No of years show has been running is calculated and made a new feature\nindex = df[~df.Publish_till.isin(['present','unknown'])].index\ndf['Time_period'] = df.loc[index,'Publish_till'] - df.loc[index,'Publish_on']\ndf.Time_period = pd.to_numeric(df.Time_period)\n\n# Column for last date of publish is dropped\ndf = df.drop('Publish_till', axis=1)","8b232833":"# Binning 'Time_period'\ndf['Time_period'] = pd.qcut(df.Time_period, q=[0,0.2,0.4,0.6,0.8,1],\n        labels=['very short','short','moderate','long','very long'])\ndf.Time_period = df.Time_period.astype('object').fillna('unknown')\n\ndf.head()","e5553ef4":"# Appending the new columns in anime dataframe as well\nanime['Publish_on'] = df.Publish_on\nanime['Time_period'] = df.Time_period","93e855a1":"# All the genres of all shows in the dataframe\nlst = (', ').join(df.Genre.value_counts().index).split(', ')\nlst = [i[1:-1] for i in lst]\n\ngenres = []\nfor i in lst:\n    if i not in genres:\n        genres.append(i)\n        \ngenres","07cd2055":"# Dummy columns are made for each genre and the initial 'Genre' column is dropped\n\nfor j in df.index:\n    new = df.loc[j,'Genre'].split(', ')\n    new = [i[1:-1] for i in new]\n    for i in new:\n        df.loc[j,i]=True\n        \ndf[genres] = df[genres].fillna(False)\ndf = df.drop('Genre', axis=1)","d4a631e2":"anime = pd.concat([anime,df[genres]], axis=1)","ec2797ae":"df.head()","30d094c2":"# Numerical and categorical features are selected\n\nnum_vars = df.select_dtypes(include=['float64','int64']).columns\nnum_vars = [i for i in num_vars if i not in genres]\n\ncat_vars = [i for i in df.columns if i not in num_vars]","c98f3c89":"# Scaling of features\nscaler = StandardScaler()\ndf[num_vars] = scaler.fit_transform(df[num_vars])","17de92c4":"# Column indices of all categorical variables\ncategorical = [i[0] for i in enumerate(df.columns) if i[1] in cat_vars]","73950b52":"costs = []\nno_of_clusters = [2,3,4,5,6,7,8,9,10]\n\nfor i in no_of_clusters:\n    kp = KPrototypes(n_clusters=i, n_init=5, random_state=50, n_jobs=-1, verbose=1)\n    kp.fit_predict(np.array(df), categorical=categorical)\n    costs.append(kp.cost_)","11a6ed03":"plt.plot(no_of_clusters, costs)\nplt.show()","4e745271":"kp = KPrototypes(n_clusters=6, n_init=5, random_state=50, n_jobs=-1, verbose=1)\nkp.fit_predict(np.array(df), categorical=categorical)","9378641b":"df['cluster_id'] = kp.labels_\nanime['cluster_id'] = kp.labels_\nanime.head()","c341ee2a":"nums = anime.select_dtypes(include=['int64','float64']).columns\n\nfor i in nums:\n    sns.boxplot(x=anime.cluster_id,y=anime[i])\n    plt.show()","a34760cc":"anime[anime.cluster_id==5].Time_period.value_counts().plot.bar(figsize=(20,8))\nplt.xticks(fontsize=15, rotation=0)\nplt.yticks(fontsize=15)\nplt.title('Time period for Cluster 5', fontsize=30)\nplt.show()\nanime[anime.cluster_id==0].Time_period.value_counts().plot.bar(figsize=(20,8))\nplt.xticks(fontsize=15, rotation=0)\nplt.yticks(fontsize=15)\nplt.title('Time period for Cluster 0', fontsize=30)\nplt.show()","2a1d19e0":"cluster_id = 5\ngenre_plot = round(100*anime[anime.cluster_id==cluster_id]\\\n                   .iloc[:,18:-1].sum()\/anime[anime.cluster_id==cluster_id].iloc[:,18:-1].sum().sum(),2)\nplt.figure(figsize=(20,8))\nplt.bar(genre_plot.index, genre_plot.values)\nplt.xticks(fontsize=15, rotation=90)\nplt.yticks(fontsize=15)\nplt.title('Percentage of genres in Cluster 5', fontsize=30)\nplt.show()\n\ncluster_id = 0\ngenre_plot = round(100*anime[anime.cluster_id==cluster_id]\\\n                   .iloc[:,18:-1].sum()\/anime[anime.cluster_id==cluster_id].iloc[:,18:-1].sum().sum(),2)\nplt.figure(figsize=(20,8))\nplt.bar(genre_plot.index, genre_plot.values)\nplt.xticks(fontsize=15, rotation=90)\nplt.yticks(fontsize=15)\nplt.title('Percentage of genres in Cluster 0', fontsize=30)\nplt.show()","e65eee36":"# Cluster 5 anime list\nanime[anime.cluster_id==5].Title","fbeae989":"# Cluster 0 anime list\nanime[anime.cluster_id==0].Title","6cdc1d6f":"### Cluster 0 contains more 'drama', 'romance' and 'comedy' than cluster 5 whereas cluster 5 is mostly contains more 'super power' and 'adventure' genre.\n### Thus we can say cluster 5 is mostly subjected to kids whereas cluster 0 to adults.","124bf209":"### According to the visualizations, cluster 5 seems to be the best set of anime followed by cluster 0. In terms of popularity, cluster 2 anime are more popular since they ate the most recent one.\n### Therefore, my personal recommendation is cluster 5 anime."}}