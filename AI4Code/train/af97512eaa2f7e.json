{"cell_type":{"3eb803f1":"code","657dad94":"code","239d886b":"code","91c8a621":"code","44865d71":"code","bd183d93":"code","386ee7b3":"code","c17c0168":"code","02496569":"code","0a61e6c3":"code","b6e7aeff":"code","c7c3d7c3":"code","115d9a73":"code","8f8f832f":"code","ee979734":"code","39cd5522":"code","b808b94a":"code","d4e0dbdb":"code","4bd4954b":"code","2aca5b26":"code","adeebb9e":"code","75a36736":"code","ea9c4929":"code","4b44ddbe":"code","514cf8bc":"code","aae0d0e3":"code","65052e26":"code","50c7a20e":"code","fd437855":"code","1c888601":"code","9ac681ca":"code","4d1b83cd":"code","9355b63a":"code","8105efb1":"code","62d41e2c":"code","4cb98bff":"code","4fdb1e67":"code","6adf4199":"code","bf4afe3f":"code","76e16e79":"code","994c50a1":"code","a3a0cdc9":"code","fa39b603":"code","f0a90e15":"code","64b81087":"code","4653e65f":"code","58274264":"code","4e029840":"code","4a8f0ebe":"code","f9385ebe":"code","4a841fa2":"code","a007f6b7":"code","ad1d82d7":"code","f0336996":"code","6db19582":"code","6de3ed52":"code","a88880bb":"code","06e5185c":"code","fe1af211":"code","fe30802c":"code","29e0384e":"code","4eadac5c":"code","36ff093a":"code","dc90d25b":"code","a6c4e2ea":"code","600a6757":"code","48d8995b":"code","43900573":"code","69f02105":"code","6cf55636":"code","803af54b":"code","e5439523":"code","973641e2":"code","a2d51b9e":"code","11d0092b":"code","15a0133e":"code","b05894d9":"code","c7e178d0":"code","2c295700":"code","46113d42":"code","3b52688f":"code","a8394ec2":"code","eabed832":"code","c104e8c7":"code","d9fecea8":"code","644031bf":"code","e855d2de":"code","e57e0d58":"code","786d7f9a":"code","eecebd95":"code","b7d2f45d":"code","d6c73a05":"code","0d348e07":"code","e0378981":"code","812ce62b":"code","218a46b9":"code","cf656e01":"code","9216d6ec":"code","0d7fbe44":"code","2f3220a7":"code","740a8c7b":"code","3a2c6be9":"code","f36f9337":"code","04939243":"code","f6e32055":"code","c558c247":"code","65fcd081":"code","0e6849b8":"code","786a4bdb":"code","3b962cd5":"code","ec0628ed":"code","4a9c88af":"code","65ee3c55":"code","464b1912":"markdown","8e0b331b":"markdown","f030def5":"markdown","e9cde3df":"markdown","638a04d1":"markdown","ca7ad051":"markdown","461bd3f9":"markdown","6a34b971":"markdown","39081809":"markdown","2d604f06":"markdown","f5253261":"markdown","d52e0107":"markdown","13983462":"markdown","957cd327":"markdown","825d809f":"markdown","2e132094":"markdown","2f605300":"markdown","8e5a45fb":"markdown","1b53d84d":"markdown","f84bd8e6":"markdown","fd53943d":"markdown","c2a995fe":"markdown","157482f5":"markdown","e8f9f36b":"markdown","1bdeb95a":"markdown","fbca905e":"markdown","640d3d24":"markdown","04071f27":"markdown","2ccccc68":"markdown","714c269b":"markdown","8d94ac64":"markdown","3ac3610e":"markdown"},"source":{"3eb803f1":"import pandas as pd\nimport numpy as np","657dad94":"data = 'https:\/\/raw.githubusercontent.com\/alexeygrigorev\/mlbookcamp-code\/master\/chapter-02-car-price\/data.csv'","239d886b":"!wget $data ","91c8a621":"df = pd.read_csv('data.csv')","44865d71":"# Making the columns uniform in terms of capitalisation and having no spaces in the columns\ndf.columns = df.columns.str.lower().str.replace(' ', '_')","bd183d93":"# We're doing the same for the 'make' column of the dataset \ndf['make'].str.lower().str.replace(' ', '_')","386ee7b3":"# Finding categorical variables so that we can standardise the inputs. \nstrings = list(df.dtypes[df.dtypes == 'object'].index)\nstrings","c17c0168":"# Standardising the inputs \nfor col in strings:\n    df[col] = df[col].str.lower().str.replace(' ', '_')","02496569":"df.dtypes","0a61e6c3":"# There are a few datatypes here, let's count how many of each datatype there is here! \ndf.dtypes.value_counts()","b6e7aeff":"for col in df.columns:\n    print(col)\n    print(df[col].unique()[:5])\n    print(df[col].nunique())\n    print()","c7c3d7c3":"df","115d9a73":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","8f8f832f":"# Visualisation of MSRP \nsns.histplot(df.msrp, bins=50)","ee979734":"sns.histplot(df.msrp[df.msrp < 100000], bins=50)","39cd5522":"# Transformation of certain numbers using log(1+x)\nnp.log1p([0, 1, 10, 1000, 100000])","b808b94a":"# This is the same as using log1p, except that we are manually adding the one 1 before applying logarithms on it.\nnp.log([0 + 1, 1+ 1, 10 + 1, 1000 + 1, 100000])","d4e0dbdb":"# Transformation of the MSRPs\nprice_logs = np.log1p(df.msrp)","4bd4954b":"# Look at the scale - it has drastically reduced! This is especially wonderful for linear regression since linear regression is rather sensitive to differences :)\nsns.histplot(price_logs, bins=50)","2aca5b26":"# Okay, let's take a look at the dataset and see if there are any missing values! \ndf.isnull().sum()","adeebb9e":"# Splitting of dataset into the train, validation, and the test dataset \nn = len(df)\n\n# Validation dataset\nn_val = int(n * 0.2)\n\n# Test dataset \nn_test = int(n * 0.2)\n\n# Train dataset\nn_train = n - n_val - n_test","75a36736":"n","ea9c4929":"n_val, n_test, n_train","4b44ddbe":"df.iloc[[10, 0, 3, 5]]","514cf8bc":"df_train = df.iloc[n_train:]\ndf_val = df.iloc[n_train:n_train+n_val]\ndf_test = df.iloc[n_train+n_val:]","aae0d0e3":"# Gives an array from 0 to the specified number itself. This will help in what we're trying to do.\nidx = np.arange(n)\nidx","65052e26":"# We're shuffling the indexes so that we are able to get random datapoints out of the dataset \n# This is so that we are able to reduce any biasby any previous points\nnp.random.seed(2)\nnp.random.shuffle(idx)","50c7a20e":"df_train = df.iloc[idx[:n_train]]\ndf_val = df.iloc[idx[n_train:n_train+n_val]]\ndf_test = df.iloc[idx[n_train+n_val:]]","fd437855":"# To visualise above, this is what's above:\nidx[:n_train]","1c888601":"df_train.head()","9ac681ca":"len(df_train), len(df_val), len(df_test)","4d1b83cd":"# As seen above, the index of the train data is mixed up, so let's reset the index back to 0 - 7150.\ndf_train = df_train.reset_index(drop=True)\ndf_val = df_val.reset_index(drop=True)\ndf_test = df_test.reset_index(drop=True)","9355b63a":"# Transformation of the y values\ny_train = np.log1p(df_train.msrp.values)\ny_val = np.log1p(df_val.msrp.values)\ny_test = np.log1p(df_test.msrp.values)","8105efb1":"del df_train['msrp']\ndel df_val['msrp']\ndel df_test['msrp']","62d41e2c":"len(y_train)","4cb98bff":"df_train.iloc[10]","4fdb1e67":"# From index number 10: We choose engine_hp, city_mpg and popularity \nxi = [453, 11, 86]\nw0 = 7.17\nw = [0.01, 0.04, 0.002]\n\n# How did you get the initial bias values and the weights? ","6adf4199":"# Python code for how the linear regression works, but in a more general sense \ndef linear_regression(xi):\n    # number of features in the feature matrix\n    n = len(xi)\n    \n    # We have an initial bias term W0, so that is the starting of our prediction.\n    pred = w0\n    \n    # Recursive feature whereby the feature + the weight\/bias is being added.\n    # Range(n) starts at 0 and ends at n-1 by default\n    for j in range(n):\n        pred = pred + w[j] * xi[j]\n        \n    # End product \n    return pred","bf4afe3f":"xi = [453, 11, 86]\nw0 = 7.17\nw = [0.01, 0.04, 0.002]","76e16e79":"linear_regression(xi)","994c50a1":"# Since we did log1p just now, we have to reverse it so we do a exponential first and then we minus 1.\nnp.expm1(12.312)","a3a0cdc9":"# Let's double check the value! \nnp.log1p(222347.2221101062)","fa39b603":"# Do note that this dot product only starts from weight 1 and feature 1. We have to consider w0, which will be covered.\ndef dot(xi, w):\n    n = len(xi)\n    \n    res = 0.0\n    \n    for j in range(n):\n        res = res + xi[j] * w[j]\n    \n    return res","f0a90e15":"# Inclusion of weight 0 \ndef linear_regression(xi):\n    return w0 + dot(xi, w)","64b81087":"# w is a list in this case, we can join two lists together to get the full matrix. \nw_new = [w0] + w","4653e65f":"w_new","58274264":"# Why do we add [1] here? It is to consider w0. \ndef linear_regression(xi):\n    xi = [1] + xi\n    return dot(xi, w_new)","4e029840":"linear_regression(xi)","4a8f0ebe":"w0 = 7.17\nw = [0.01, 0.04, 0.002]\nw_new = [w0] + w","f9385ebe":"# We always have 1s in the beginning because of w0.\n# If we do 0 instead, it means that there will be no w0 when we do the multiplication, which makes it incorrect.\nx1  = [1, 148, 24, 1385]\nx2  = [1, 132, 25, 2031]\nx10 = [1, 453, 11, 86]\n\nX = [x1, x2, x10]\nX = np.array(X)\nX\n","4a841fa2":"def linear_regression(X):\n    return X.dot(w_new)\n\n# Why is this possible?\n# This is because X is a matrix with size (3,4) while w_new is a matrix with size (4,1)\n# This produces the results in a matrix with size (3,1) from vector multiplication.","a007f6b7":"linear_regression(X)","ad1d82d7":"def train_linear_regression(X, y):\n    pass","f0336996":"X = [\n    [148, 24, 1385],\n    [132, 25, 2031],\n    [453, 11, 86],\n    [158, 24, 185],\n    [172, 25, 201],\n    [413, 11, 86],\n    [38,  54, 185],\n    [142, 25, 431],\n    [453, 31, 86],\n]\n\nX = np.array(X)\nX","6db19582":"# Why do we need this? This is for the initial bias term. \nones = np.ones(X.shape[0])\nones","6de3ed52":"# Joining of the two matrices together to ensure there is an inclusion of the initial bias term \n# X = np.column_stack([ones, X])\n# X","a88880bb":"y = [10000, 20000, 15000, 20050, 10000, 20000, 15000, 25000, 12000]","06e5185c":"# Finding of the weights \nXTX = X.T.dot(X)\nXTX_inv = np.linalg.inv(XTX)\nw_full = XTX_inv.dot(X.T).dot(y)","fe1af211":"w0 = w_full[0]\nw = w_full[1:]","fe30802c":"w0, w","29e0384e":"# Note: We should be using the X without the ones for the linear regression so that the ones will not stack.\ndef train_linear_regression(X, y):\n    ones = np.ones(X.shape[0])\n    X = np.column_stack([ones, X])\n\n    XTX = X.T.dot(X)\n    XTX_inv = np.linalg.inv(XTX)\n    w_full = XTX_inv.dot(X.T).dot(y)\n    \n    return w_full[0], w_full[1:]","4eadac5c":"train_linear_regression(X, y)","36ff093a":"df_train.columns","dc90d25b":"base = ['engine_hp', 'engine_cylinders', 'highway_mpg',\n        'city_mpg', 'popularity']\n\nX_train = df_train[base].fillna(0).values\n\nw0, w = train_linear_regression(X_train, y_train)\n\ny_pred = w0 + X_train.dot(w)","a6c4e2ea":"w0","600a6757":"w","48d8995b":"sns.histplot(y_pred, color='red', alpha=0.5, bins=50)\nsns.histplot(y_train, color='blue', alpha=0.5, bins=50)\n","43900573":"def rmse(y, y_pred):\n    se = (y - y_pred) ** 2\n    mse = se.mean()\n    return np.sqrt(mse)","69f02105":"rmse(y_train, y_pred)","6cf55636":"# This is the same code as the steps taken in 2.8, but applied to X_train and X_val. \ndef prepare_X(df):\n    df_num = df[base]\n    df_num = df_num.fillna(0)\n    X = df_num.values\n    return X","803af54b":"X_train = prepare_X(df_train)\nw0, w = train_linear_regression(X_train, y_train)\n\nX_val = prepare_X(df_val)\ny_pred = w0 + X_val.dot(w)\nrmse(y_val, y_pred)","e5439523":"df['year'].max()","973641e2":"# We're simply just adding an 'age' category\n# As seen above, the max year = 2017, therefore we are able to use '2017' and then derive the age from there.\ndef prepare_X(df):\n    # We use a copy so as to prevent any changes for the old dataframe \n    df = df.copy()\n    \n    df['age'] = 2017 - df['year']\n    features = base + ['age']\n    \n    df_num = df[features]\n    df_num = df_num.fillna(0)\n    X = df_num.values\n\n    return X","a2d51b9e":"X_train = prepare_X(df_train)\nw0, w = train_linear_regression(X_train, y_train)\n\nX_val = prepare_X(df_val)\ny_pred = w0 + X_val.dot(w)\nrmse(y_val, y_pred)","11d0092b":"sns.histplot(y_pred, label='prediction', color='red', alpha=0.5, bins=50)\nsns.histplot(y_val, label='target', color='blue',  alpha=0.5, bins=50)\nplt.legend()","15a0133e":"categorical_columns = [\n    'make', 'model', 'engine_fuel_type', 'driven_wheels', 'market_category',\n    'vehicle_size', 'vehicle_style']\n\ncategorical = {}\n\nfor c in categorical_columns:\n    categorical[c] = list(df_train[c].value_counts().head().index)","b05894d9":"def prepare_X(df):\n    df = df.copy()\n    \n    df['age'] = 2017 - df['year']\n    features = base + ['age']\n    \n    # Refer to footnote 1\n    for v in [2, 3, 4]:\n        df['num_doors_%d' % v] = (df.number_of_doors == v).astype(int)\n        features.append('num_doors_%d' % v)\n        \n    # Refer to footnote 2 \n    for name, values in categorical.items():\n        for value in values:\n            df['%s_%s' % (name, value)] = (df[name] == value).astype(int)\n            features.append('%s_%s' % (name, value))\n\n    df_num = df[features]\n    df_num = df_num.fillna(0)\n    X = df_num.values\n\n    return X","c7e178d0":"# Footnote 2: What's really going on in this for loop? It seems rather confusing. Let's try to dissect it.\ntest = categorical.items()\nprint(test)\nprint('\\n')\n# items() allow a dictionary to be converted into a 2-dimensional list\n\nfor name, values in categorical.items():\n    print(name)\n    print(values)\n# the first element in the list is the name of the column itself, while the second element are the values themselves\n# therefore, we need a second for loop for the list itself to extract the different values \n# ","2c295700":"X_train = prepare_X(df_train)\nw0, w = train_linear_regression(X_train, y_train)\n\nX_val = prepare_X(df_val)\ny_pred = w0 + X_val.dot(w)\nrmse(y_val, y_pred)","46113d42":"w0, w","3b52688f":"# Assume we have a matrix X with two columns of the same values.\n\nX = [\n    [4, 4, 4],\n    [3, 5, 5],\n    [5, 1, 1],\n    [5, 4, 4],\n    [7, 5, 5],\n    [4, 5, 5],\n]\nX = np.array(X)\nX\n\n# IF we have two columns with the same values, the gram matrix cannot be inversed as shown below.\n# This is known as a singular matrix, which is a matrix containing the same rows and\/or columns.\n# Singular matrices are not inversible.","a8394ec2":"XTX = X.T.dot(X)\nXTX","eabed832":"# Let's test if this is inversible or not!\ntry:\n    print(np.linalg.inv(XTX))\nexcept np.linalg.LinAlgError:\n    print('Singular matrix, can\\'t be inversed')","c104e8c7":"# Sometimes, there is noise in the dataset itself like in the last element of the last row. \n# In the original notebook, it is 5.00000001, but I still got a LinAlgError so I decided to make it a little noisier.\nX = [\n    [4, 4, 4],\n    [3, 5, 5],\n    [5, 1, 1],\n    [5, 4, 4],\n    [7, 5, 5],\n    [4, 5, 5.0000001],\n]\nX = np.array(X)\nX","d9fecea8":"y= [1, 2, 3, 1, 2, 3]","644031bf":"# In this case, we can see that the matrix is now different and that there there are no columns with the same values.\nXTX = X.T.dot(X)\nXTX","e855d2de":"# Let's test if this is inversible or not!\ntry:\n    print(np.linalg.inv(XTX))\nexcept np.linalg.LinAlgError:\n    print('Singular matrix, can\\'t be inversed')","e57e0d58":"# Storing the XTX inverse as a variable.\nXTX_inv = np.linalg.inv(XTX)\nXTX","786d7f9a":"# Finding the weights of the metric\nXTX_inv.dot(X.T).dot(y)","eecebd95":"XTX = [\n    [1, 2, 2],\n    [2, 1, 1.0000001],\n    [2, 1.0000001, 1]\n]\n\nXTX = np.array(XTX)","b7d2f45d":"np.linalg.inv(XTX)","d6c73a05":"XTX = [\n    [1.0001, 2, 2],\n    [2, 1.0001, 1],\n    [2, 1, 1.0001]\n]\n\nXTX = np.array(XTX)","0d348e07":"np.linalg.inv(XTX)","e0378981":"# Recall np.eye gives you an identity  matrix with the size n x n with the right parameters\nXTX = XTX + 0.01 * np.eye(3)","812ce62b":"np.linalg.inv(XTX)","218a46b9":"# Let's implement the regularization into our linear regression\ndef train_linear_regression_reg(X, y, r=0.001):\n    ones = np.ones(X.shape[0])\n    X = np.column_stack([ones, X])\n\n    XTX = X.T.dot(X)\n    XTX = XTX + r * np.eye(XTX.shape[0])\n\n    XTX_inv = np.linalg.inv(XTX)\n    w_full = XTX_inv.dot(X.T).dot(y)\n    \n    return w_full[0], w_full[1:]","cf656e01":"X_train = prepare_X(df_train)\nw0, w = train_linear_regression_reg(X_train, y_train, r=0.01)\n\nX_val = prepare_X(df_val)\ny_pred = w0 + X_val.dot(w)\nrmse(y_val, y_pred)","9216d6ec":"# We're tuning the model with regularization, using 7 different values of r.\nfor r in [0.0, 0.00001, 0.0001, 0.001, 0.1, 1, 10]:\n    X_train = prepare_X(df_train)\n    w0, w = train_linear_regression_reg(X_train, y_train, r=r)\n\n    X_val = prepare_X(df_val)\n    y_pred = w0 + X_val.dot(w)\n    score = rmse(y_val, y_pred)\n    \n    print(r, w0, score)","0d7fbe44":"r = 0.001\nX_train = prepare_X(df_train)\nw0, w = train_linear_regression_reg(X_train, y_train, r=r)\n\nX_val = prepare_X(df_val)\ny_pred = w0 + X_val.dot(w)\nscore = rmse(y_val, y_pred)\nscore","2f3220a7":"# Recall that for the Model Selection process, we combine train data and val data after using val data.\ndf_full_train = pd.concat([df_train, df_val])","740a8c7b":"df_full_train = df_full_train.reset_index(drop=True)","3a2c6be9":"X_full_train = prepare_X(df_full_train)","f36f9337":"X_full_train","04939243":"# We have to do that for y too.\ny_full_train = np.concatenate([y_train, y_val])","f6e32055":"w0, w = train_linear_regression_reg(X_full_train, y_full_train, r=0.001)","c558c247":"X_test = prepare_X(df_test)\ny_pred = w0 + X_test.dot(w)\nscore = rmse(y_test, y_pred)\nscore","65fcd081":"# Using the model for one entry\ncar = df_test.iloc[20].to_dict()\ncar","0e6849b8":"df_small = pd.DataFrame([car])\ndf_small","786a4bdb":"X_small = prepare_X(df_small)","3b962cd5":"y_pred = w0 + X_small.dot(w)\ny_pred = y_pred[0]\ny_pred","ec0628ed":"prediction = np.expm1(y_pred)","4a9c88af":"test = np.expm1(y_test[20])","65ee3c55":"print('RMSE: ' + str((prediction - test)** 0.5))","464b1912":"## 2.16 Next steps","8e0b331b":"## 2.15 Using the model","f030def5":"We can tell that there is a very big difference in the 2 by 2 sub matrix at the bottom right corner itself. This shows the effect of regularization itself and how useful it is! \n\nYou might be wondering how to implement regularization in the model itself - here's how! ","e9cde3df":"## 2.17 Summary\n\n* EDA - looking at data, finding missing values\n* Target variable distribution - long tail => bell shaped curve\n* Validation framework: train\/val\/test split (helped us detect problems)\n* Normal equation - not magic, but math\n* Implemented it with numpy\n* RMSE to validate our model\n* Feature engineering: age, categorical features\n* Regularization to fight numerical instability","638a04d1":"We can tell that there is an even further decrease in the RMSE as compared to the previous RMSE, which is great! ","ca7ad051":"## 2.11 Simple feature engineering","461bd3f9":"Why is this so? \n- Recall that both the weights and feature matrices are vectors, with size (n,1) whereby n is the number of features.\n- Since the number of weights = number of features, they both have the same size.\n- However, in order for vector-vector multiplication to occur, the **first vector** needs to have the **same number of columns** as the **number of rows of the second vector**. \n- We can either transpose the weights or we can transpose the feature matrix. \n- In this case, we transpose xi so that we are able to get a matrix with size (1,n).\n- Since we want to get the inner product, we will use xi^T * W so we get a product of (1,1) aka the prediction (instead of W * Xi ^T)\n- Finally, the vector-vector multiplication occurs, and we get the 'prediction'. \n\n(Note: We can transpose either vector, but since we're going with the transpose of xi, we have to make sure that we change the position of the matrices as the position affects the product of matrix-matrix multiplication, or in this case, vector-vector multiplication.) ","6a34b971":"* We included only 5 top features. What happens if we include 10?\n\nOther projects\n\n* Predict the price of a house - e.g. boston dataset\n* https:\/\/archive.ics.uci.edu\/ml\/datasets.php?task=reg\n* https:\/\/archive.ics.uci.edu\/ml\/datasets\/Student+Performance","39081809":"## 2.12 Categorical variables","2d604f06":"However, even though there is an inverse, we can tell that the inverse has very, very big numbers which is a problem. It directly affects the weights matrix.","f5253261":"## 2.14 Tuning the model","d52e0107":"We can tell that 0.00001 has the lowest RMSE, followed by 0.0001, and lastly 0.001. Honestly, we can use either of the regularization values since the RMSE score has been about the same. In the example below, we use r = 0.001. ","13983462":"## 2.2 Data preparation","957cd327":"This is a problem as the gram matrix NEEDS to be inversed so that we can find the weights vector.","825d809f":"## 2.5 Linear regression","2e132094":"## 2.3 Exploratory data analysis","2f605300":"Recall that using the feature matrix (xi), we put it into a model and produce yi. \n\nIn other words, \n\ng(xi) = yi","8e5a45fb":"## 2.6 Linear regression vector form\nThe general formula, as mentioned above, is: \n# g(xi) = W0 + summation(1,n) (w[j] * xi[j]) \n\nHowever, it can be written as another form. Specifically if we look at (w[j] * xi[j]),\n# g(xi) = w0 + xi^T * W \n\nwhereby xi^T is the transpose of xi. ","1b53d84d":"## 2.13 Regularization","f84bd8e6":"## 2. Machine Learning for Regression\n","fd53943d":"Distribution of price","c2a995fe":"## 2.7 Training a linear regression model","157482f5":"## 2.9 RMSE\nRMSE is defined as Root Mean Squared Error.\n\nTo take this step by step:\n1. Find the squared error, aka the square of error between the actual value of y and the predicted values of y.\n2. The mean squared error the mean of the squared errors themselves.\n3. Lastly, root means to square root the MSE. ","e8f9f36b":"Comparing with 2.10 and 2.11, we can tell that there is a slight change to the RMSE itself - 0.76165 vs 0.51721.\nYou can tell that there also is a difference between the previous histogram and the histogram below. \n","1bdeb95a":"For this specific example: \n\n# g(xi) = W0 + W1 * X1 + W2 * X2 + W3 * X3\n\nwhereby X is the value of the feature\nwhereby W is the weight\/bias of the feature.\n\nW0 is the bias term itself without knowing anything about the car. \n\nW1 * X1 + W2 * X2 + W3 * X3 is basically a summation\/sigma (refer to the video to see how the summation looks like)\n\nTherefore, mathematically, it can be simplified to \n# g(xi) = W0 + summation(1,3) (w[j] * xi[j])  \nIf we use python, we have to start from 0 instead, therefore \n# g(xi) = W0 + summation(0,2) (w[j] * xi[j])\n\nDo note that the parameters for the summation are the lower and upper limits.","fbca905e":"There are definitely some outliers out there in the visualisation, if not we will be looking at a smaller scale. Let's delve further! ","640d3d24":"Recall that:\n# g(X) = X * w = y\n\nIf we want to find out the vector w (aka the weights), we can do so by adding an inverse of X to both Xw and y, so that we can find w. \n\nHowever, that's not necessarily possible as X might not have an inverse due to it being rectangular in shape. What we can do, however, is to multiply the transpose of X for both sides, therefore creating:\n# X^T * X * w = X^T * y \n\nX^T * X is also known as a gram matrix with size (n+1, n+1), therefore allowing for an inverse and allowing us to find w as shown below: \n\n# (X^T * X)^-1 * X^T * X * w = (X^T * X)^-1 * X^T * y \nwhich is then simplified to \n# I * w =  (X^T * X)^-1 * X^T * y \n\nand I * w is w. \n\nDo note that w is not the exact solution, but rather the closest solution.\n","04071f27":"## 2.4 Setting up the validation framework","2ccccc68":"## 2.8 Car price baseline model","714c269b":"What we can do is that we can use regularization, which is adding a small number to the diagonal of our matrix. This allows us to counteract the big numbers itself instead. We have an example like that below. ","8d94ac64":"## 2.10 Validating the model","3ac3610e":"Missing values"}}