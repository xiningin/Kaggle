{"cell_type":{"a03f9650":"code","c77538a8":"code","38e9f949":"code","73835545":"code","7adc6005":"code","0db968f7":"code","3522df74":"code","ee33b5d9":"code","98d5af41":"code","ff3553d2":"code","b3613419":"code","5814b89b":"code","208836fc":"code","e1a51445":"code","5c8bd74f":"code","91f839c9":"code","1bdf9850":"markdown","26dc99f0":"markdown","9c6a8dae":"markdown","ee52369c":"markdown","f0159794":"markdown","2526af4b":"markdown","d1a06bcf":"markdown","a32ed5e4":"markdown","e4f3f4ef":"markdown","36fe0da2":"markdown","08269469":"markdown","397e8b9e":"markdown","74d06265":"markdown","63291bab":"markdown","bdd7e55a":"markdown","fd75bb2c":"markdown","a918a829":"markdown","7df10ad0":"markdown","bb8b86db":"markdown","b03ffac0":"markdown","7132e2f5":"markdown","c687794b":"markdown","6206fee2":"markdown","d238fe81":"markdown","d3f462ec":"markdown"},"source":{"a03f9650":"import seaborn as sns\n\n# to change the way of appearance\nimport matplotlib.pyplot as plt\n\n# to open csv files\nimport pandas as pd","c77538a8":"# Path of the file to read\nspotify_filepath = \"..\/input\/data-for-datavis\/spotify.csv\"\n\n# Read the file into a variable spotify_data\nspotify_data = pd.read_csv(spotify_filepath, index_col=\"Date\", parse_dates=True)\n\n# Set the width and height of the figure\nplt.figure(figsize=(14,6))\n\n# Add title\nplt.title(\"Daily Global Streams of Popular Songs in 2017-2018\")\n\n# Line chart showing daily global streams of each song \nsns.lineplot(data=spotify_data)\n\nplt.show()","38e9f949":"# Set the width and height of the figure\nplt.figure(figsize=(14,6))\n\n# Add title\nplt.title(\"Daily Global Streams of Popular Songs in 2017-2018\")\n\n# Line chart showing daily global streams of 'Shape of You'\nsns.lineplot(data=spotify_data['Shape of You'], label=\"Shape of You\")\n\n# Line chart showing daily global streams of 'Despacito'\nsns.lineplot(data=spotify_data['Despacito'], label=\"Despacito\")\n\n# Add label for horizontal axis\nplt.xlabel(\"Date\")\n\nplt.show()","73835545":"# Path of the file to read\nflight_filepath = \"..\/input\/data-for-datavis\/flight_delays.csv\"\n\n# Read the file into a variable flight_data\nflight_data = pd.read_csv(flight_filepath, index_col=\"Month\")\n\n# Set the width and height of the figure\nplt.figure(figsize=(10,6))\n\n# Add title\nplt.title(\"Average Arrival Delay for Spirit Airlines Flights, by Month\")\n\n# Bar chart showing average arrival delay for Spirit Airlines flights by month\nsns.barplot(x=flight_data.index, y=flight_data['NK'])\n\n# Add label for vertical axis\nplt.ylabel(\"Arrival delay (in minutes)\")\n\nplt.show()","7adc6005":"# Set the width and height of the figure\nplt.figure(figsize=(14,7))\n\n# Add title\nplt.title(\"Average Arrival Delay for Each Airline, by Month\")\n\n# Heatmap showing average arrival delay for each airline by month\nsns.heatmap(data=flight_data, annot=True)\n\n# Add label for horizontal axis\nplt.xlabel(\"Airline\")\n\nplt.show()","0db968f7":"# Path of the file to read\ninsurance_filepath = \"..\/input\/data-for-datavis\/insurance.csv\"\n\n# Read the file into a variable insurance_data\ninsurance_data = pd.read_csv(insurance_filepath)\n\nsns.scatterplot(x=insurance_data['bmi'], y=insurance_data['charges'], hue=insurance_data['smoker'])\n\nplt.show()","3522df74":"sns.regplot(x=insurance_data['bmi'], y=insurance_data['charges'])\n\nplt.show()","ee33b5d9":"sns.lmplot(x=\"bmi\", y=\"charges\", hue=\"smoker\", data=insurance_data)\n\nplt.show()","98d5af41":"sns.swarmplot(x=insurance_data['smoker'], y=insurance_data['charges'])\n\nplt.show()","ff3553d2":"# Path of the file to read\niris_filepath = \"..\/input\/data-for-datavis\/iris.csv\"\n\n# Read the file into a variable iris_data\niris_data = pd.read_csv(iris_filepath, index_col=\"Id\")\n\n# Histogram \nsns.distplot(a=iris_data['Petal Length (cm)'], kde=False)\n\nplt.show()","b3613419":"# KDE plot \nsns.kdeplot(data=iris_data['Petal Length (cm)'], shade=True)\n\nplt.show()","5814b89b":"# 2D KDE plot\nsns.jointplot(x=iris_data['Petal Length (cm)'], y=iris_data['Sepal Width (cm)'], kind=\"kde\")\n\nplt.show()","208836fc":"# Paths of the files to read\niris_set_filepath = \"..\/input\/data-for-datavis\/iris_setosa.csv\"\niris_ver_filepath = \"..\/input\/data-for-datavis\/iris_versicolor.csv\"\niris_vir_filepath = \"..\/input\/data-for-datavis\/iris_virginica.csv\"\n\n# Read the files into variables \niris_set_data = pd.read_csv(iris_set_filepath, index_col=\"Id\")\niris_ver_data = pd.read_csv(iris_ver_filepath, index_col=\"Id\")\niris_vir_data = pd.read_csv(iris_vir_filepath, index_col=\"Id\")\n\n# Histograms for each species\nsns.distplot(a=iris_set_data['Petal Length (cm)'], label=\"Iris-setosa\", kde=False)\nsns.distplot(a=iris_ver_data['Petal Length (cm)'], label=\"Iris-versicolor\", kde=False)\nsns.distplot(a=iris_vir_data['Petal Length (cm)'], label=\"Iris-virginica\", kde=False)\n\n# Add title\nplt.title(\"Histogram of Petal Lengths, by Species\")\n\n# Force legend to appear\nplt.legend()\n\nplt.show()","e1a51445":"# KDE plots for each species\nsns.kdeplot(data=iris_set_data['Petal Length (cm)'], label=\"Iris-setosa\", shade=True)\nsns.kdeplot(data=iris_ver_data['Petal Length (cm)'], label=\"Iris-versicolor\", shade=True)\nsns.kdeplot(data=iris_vir_data['Petal Length (cm)'], label=\"Iris-virginica\", shade=True)\n\n# Add title\nplt.title(\"Distribution of Petal Lengths, by Species\")\n\nplt.show()","5c8bd74f":"# Path of the file to read\nspotify_filepath = \"..\/input\/data-for-datavis\/spotify.csv\"\n\n# Read the file into a variable spotify_data\nspotify_data = pd.read_csv(spotify_filepath, index_col=\"Date\", parse_dates=True)\n\n# Line chart \nplt.figure(figsize=(12,6))\nsns.lineplot(data=spotify_data)\n\nplt.show()","91f839c9":"# Change the style of the figure to the \"dark\" theme\n# (1)\"darkgrid\", (2)\"whitegrid\", (3)\"dark\", (4)\"white\", and (5)\"ticks\nsns.set_style(\"darkgrid\")\n\n# Line chart \nplt.figure(figsize=(12,6))\nsns.lineplot(data=spotify_data)\n\nplt.show()","1bdf9850":"Data visualization is the very first step that every data scientist needs to do during his or her project. There are many libraries in python which help data scientists with visualization. Seaborn is one of the most useful of them. It has many modules that can visualize various types of data in different ways.\n\nThere is a great course to learn seaborn on [Kaggle](http:\/\/www.kaggle.com\/learn\/data-visualization). In this notebook, I just summarize information in that course to make a handy source for seaborn users. It can be considered as a seaborn cheatsheet too!","26dc99f0":"# sns.swarmplot()","9c6a8dae":"# sns.jointplot()","ee52369c":"**1. sns.distplot(a=iris_data['Petal Length (cm)'], kde=False)** --> to create a histogram\n\n**Args**:\n\n* **a** --> chooses the column we'd like to plot\n* **kde=False** --> is something we'll always provide when creating a histogram, as leaving it out will create a slightly different plot.\n---\n**2.sns.kdeplot(data=iris_data['Petal Length (cm)'], shade=True)** --> kernel density estimate (KDE) plot. In case you're not familiar with KDE plots, you can think of it as a smoothed histogram.\n\n**Args**:\n\n* **data** --> chooses the column we'd like to plot\n* **shade=True** --> colors the area below the curve\n---\n**3.sns.jointplot(x=iris_data['Petal Length (cm)'], y=iris_data['Sepal Width (cm)'], kind=\"kde\")** --> to create a two-dimensional (2D) KDE plot \n\n**Args**:\n\n* **x** --> the column that we want to have its KDE plot on x-axis\n* **y** --> the column that we want to have its KDE plot on x-axis\n\n","f0159794":"# 3. Changing styles with seaborn","2526af4b":"# sns.heatmap()","d1a06bcf":"**1. sns.barplot(x=flight_data.index, y=flight_data['NK'])** --> to create a bar chart of columns in dataset\n\n**Args:** \n* **x** --> what to use on the horizontal axis. *Note that we always need to use **index** method of dataset*\n* **y** --> This sets the column in the data that will be used to determine the height of each bar.\n---\n**2. sns.heatmap(data=flight_data, annot=True)** --> Each cell is color-coded according to its corresponding value\n\n**Args:** \n* **data** --> the csv dataset in the workspace\n* **annot=True** --> This ensures that the values for each cell appear on the chart. (Leaving this out removes the numbers from each of the cells!)\n---\n**3. sns.scatterplot(x=insurance_data['bmi'], y=insurance_data['charges'], hue=insurance_data['smoker'])** --> to create a scatter plot\n\n**Args:** \n* **x** --> the horizontal x-axis\n* **y** --> the vertical y-axis\n* **hue** --> The data in scatterplot is colored according to this column\n---\n**4.sns.regplot(x=insurance_data['bmi'], y=insurance_data['charges'])** --> to add a regression line, or the line that best fits the data, to the scatter plot (*for scatter plots without **hue** argument*)\n\n**Args:** \n* **x** --> the horizontal x-axis\n* **y** --> the vertical y-axis\n---\n**5. sns.lmplot(x=\"bmi\", y=\"charges\", hue=\"smoker\", data=insurance_data)** --> to add two regression lines, corresponding to each colored group\n\n**Args:** \n* **x** --> the horizontal x-axis\n* **y** --> the vertical y-axis\n* **hue** --> The data in scatterplot is colored according to this column\n* **data** --> the csv dataset in the workspace\n---\n**6. sns.swarmplot(x=insurance_data['smoker'],y=insurance_data['charges'])** --> the default scatter plot shows the relationship between 2 continous variables. with **swarmplot**, we can create a categorical scatter plot\n\n**Args:** \n* **x** --> the horizontal x-axis\n* **y** --> the vertical y-axis","a32ed5e4":"# sns.distplot()","e4f3f4ef":"I hope it helps you to access to the seaborn codes quickly. I will be happy if I read your opinions in comment section.","36fe0da2":"Before diving into command details, it is required to import seaborn to the workspace. Besides, I need to import some auxiliary libraries to work more conveniently. They all can be imported by the following code cell:","08269469":"# sns.lineplot()","397e8b9e":"# 1.2. What do you want to show?","74d06265":"# 1. Introduction","63291bab":"# Colored-coded plots","bdd7e55a":"# sns.scatterplot()","fd75bb2c":"Data visualization can be done for a variety of reasons. Depending on the goal of the data scientist in the project, certain visualizations may be required. All of these visualizations can be divided into the following three main groups:\n\n1. Trends\n2. Relationships\n3. Distributions\n\nseaborn has specific commands for each problem that belongs to one of the above groups. For a general classification of these commands, I have mentioned them below for a brief look. In the following sections, I will provide complete codes with examples and descriptions of each.\n\n1- Trends:\n* sns.lineplot()\n\n\n2- Relationships:\n* sns.barplot()\n* sns.heatmap()\n* sns.scatterplot()\n* sns.regplot()\n* sns.lmplot()\n* sns.swarmplot()\n  \n  \n3- Distributions:\n* sns.distplot()\n* sns.kdeplot()\n* sns.jointplot()","a918a829":"# sns.barplot()","7df10ad0":"# sns.regplot()","bb8b86db":"# 2.3. Distributions","b03ffac0":"# sns.lmplot()","7132e2f5":"**1. sns.lineplot(data=spotify_data)** --> to show the changes in values of all columns in dataset over the time (or any other horizonal units)\n\n**Args:** \n* **data** --> the csv dataset in the workspace\n___\n**2. sns.lineplot(data=spotify_data['Shape of You'], label=\"Shape of You\")** --> to show the changes in values of column 'Shape of You' in dataset over the time (or any other horizonal units)\n\n**Args:** \n* **data** --> the desired column in csv dataset\n* **label** --> label on the plotted chart\n---","c687794b":"# 2.1. Trends","6206fee2":"# 2. Seaborn Commands","d238fe81":"# 2.2. Relationships","d3f462ec":"# sns.kdeplot()"}}