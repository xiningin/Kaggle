{"cell_type":{"04b748af":"code","85b1ab01":"code","15c6f2f5":"code","5b76f282":"markdown","7a165e82":"markdown","c6171ac5":"markdown","d68c3e00":"markdown","da4f0428":"markdown"},"source":{"04b748af":"!pip install https:\/\/github.com\/YBiryukov\/kaggle-environments\/archive\/master.zip\n","85b1ab01":"%%writefile example_agent.py\nimport math\n\n\ndef at_occupied_planting_site(obs, conf, drone):\n    \"\"\" this drone's actions at planting site occupied by this drone \"\"\"\n    if drone[\"occupied_target_index\"] != None:\n        target_x = obs[\"targets\"][drone[\"occupied_target_index\"]][\"x\"]\n        target_y = obs[\"targets\"][drone[\"occupied_target_index\"]][\"y\"]\n        distance_to_target = math.sqrt((drone[\"position\"][\"x\"] - target_x) ** 2 + (drone[\"position\"][\"y\"] - target_y) ** 2)\n        if distance_to_target < obs[\"targets\"][drone[\"occupied_target_index\"]][\"size\"]:\n            return [drone[\"index\"], \"plant_seeds\", []]\n    return None\n\ndef at_recharge_station(obs, conf, drone):\n    \"\"\" this drone's actions at recharge station \"\"\"\n    recharge_station = obs[\"rechargeStation\"]\n    if (drone[\"position\"][\"x\"] > recharge_station[\"x\"] and\n            drone[\"position\"][\"x\"] < (recharge_station[\"x\"] + recharge_station[\"size\"][\"x\"]) and\n            drone[\"position\"][\"y\"] > recharge_station[\"y\"] and\n            drone[\"position\"][\"y\"] < (recharge_station[\"y\"] + recharge_station[\"size\"][\"y\"]) and\n            drone[\"charge\"][\"current\"] < drone[\"charge\"][\"max\"]):\n        return [drone[\"index\"], \"recharge\", []]\n    return None\n\ndef at_seed_storage(obs, conf, drone):\n    \"\"\" this drone's actions at seed storage \"\"\"\n    seed_storage = obs[\"seedStorage\"]\n    if (drone[\"position\"][\"x\"] > seed_storage[\"x\"] and\n            drone[\"position\"][\"x\"] < (seed_storage[\"x\"] + seed_storage[\"size\"][\"x\"]) and\n            drone[\"position\"][\"y\"] > seed_storage[\"y\"] and\n            drone[\"position\"][\"y\"] < (seed_storage[\"y\"] + seed_storage[\"size\"][\"y\"]) and\n            drone[\"cargo\"][\"seeds\"] < drone[\"cargo\"][\"max\"]):\n        return [drone[\"index\"], \"load_seeds\", []]\n    return None\n\ndef check_seeds_load(obs, conf, drone):\n    \"\"\" check if this drone has enough seeds \"\"\"\n    if drone[\"cargo\"][\"seeds\"] <= 0:\n        seed_storage = obs[\"seedStorage\"]\n        return [drone[\"index\"], \"move\", [seed_storage[\"beacon\"][\"x\"], seed_storage[\"beacon\"][\"y\"], seed_storage[\"beacon\"][\"size\"]]]\n    return None\n\ndef find_new_task(obs, conf, drone):\n    \"\"\" find new task for a drone \"\"\"\n    for task in tasks:\n        action = task(obs, conf, drone)\n        if action != None:\n            return action\n    return None\n\ndef occupy_planting_site(obs, conf, drone):\n    \"\"\" get closest to this drone unoccupied planting site \"\"\"\n    the_target = None\n    distance_to_the_target = None\n    # search through unoccupied planting sites with not all seeds planted\n    for target in [t for t in obs[\"targets\"] if t[\"drone_index\"] == None and t[\"seeds_to_plant\"] > 0]:\n        dist = math.sqrt((drone[\"position\"][\"x\"] - target[\"x\"]) ** 2 + (drone[\"position\"][\"y\"] - target[\"y\"]) ** 2)\n        if distance_to_the_target == None or dist < distance_to_the_target:\n            the_target = target\n            distance_to_the_target = dist\n    if the_target != None:\n        return [drone[\"index\"], \"occupy_planting_site\", [the_target[\"index\"]]]\n    return None\n\ndef proceed_to_occupied_planting_site(obs, conf, drone):\n    \"\"\" proceed to previously occupied planting site, if any \"\"\"\n    if drone[\"occupied_target_index\"] != None:\n        the_target = obs[\"targets\"][drone[\"occupied_target_index\"]]\n        return [drone[\"index\"], \"move\", [the_target[\"x\"], the_target[\"y\"], the_target[\"size\"]]]\n    return None\n\ndef seed_planter_basic_drone(obs, conf):\n    \"\"\" self-management of seed_planter_basic_drone \"\"\"\n    # actions of the Drone Swarm\n    actions = []\n    # get active drones\n    drones = [drone for drone in obs.drones if drone[\"active\"]]\n    recharge_station = obs.rechargeStation\n    # consider every drone as seed_planter_basic_drone\n    for drone in drones:\n        # distance to recharge station\n        dist = math.sqrt((drone[\"position\"][\"x\"] - recharge_station[\"beacon\"][\"x\"]) ** 2 + (drone[\"position\"][\"y\"] - recharge_station[\"beacon\"][\"y\"]) ** 2)\n        # check if the drone doesn't have enough charge to continue\n        if ((dist + recharge_station[\"beacon\"][\"size\"]) >= (drone[\"speed\"][\"horizontal\"] * drone[\"charge\"][\"current\"]) and\n                dist > recharge_station[\"beacon\"][\"size\"]):\n            # send the drone to recharge station\n            # append this drone's action to actions of the Swarm\n            actions.append([drone[\"index\"], \"move\", [recharge_station[\"beacon\"][\"x\"], recharge_station[\"beacon\"][\"y\"], recharge_station[\"beacon\"][\"size\"]]])\n        elif drone[\"task\"][\"fun\"] == None:\n            # find new task for the drone\n            # append this drone's action to actions of the Swarm\n            actions.append(find_new_task(obs, conf, drone))\n        else:\n            # continue with current task\n            # append this drone's action to actions of the Swarm\n            actions.append([drone[\"index\"], drone[\"task\"][\"fun\"], drone[\"task\"][\"args\"]])\n    return actions\n\n\ntasks = [\n    at_recharge_station,\n    at_seed_storage,\n    check_seeds_load,\n    at_occupied_planting_site,\n    proceed_to_occupied_planting_site,\n    occupy_planting_site\n]\n","15c6f2f5":"from kaggle_environments import evaluate, make, utils\n\nenv = make(\n    \"sds\",\n    configuration={\n        \"episodeSteps\": 1500,\n        # amount of drones in the simulation\n#         \"dronesAmount\": 15,\n        \"simulationType\": \"seed_planter\",\n        # in simulationConf you can define custom parameters for the chosen simulation\n#         \"simulationConf\": {\n#             # drone's cargo\n#             \"cargo\": {\n#                 \"max\": 100\n#             },\n#             # drone's charge\n#             \"charge\": {\n#                 \"max\": 200,\n#                 \"recharge_speed\": 10\n#             },\n#             # seeds to plant at each planting site\n#             \"seeds_to_plant\": 50,\n#             # drone's speed\n#             \"speed\": {\n#                 \"horizontal\": 10\n#             }\n#         }\n    },\n    debug=True)\n\nenv.run([\"example_agent.py\"])\nenv.render(mode=\"ipython\", width=650, height=520)\n# to change speed of the rendering,\n# click on the canvas and then press one of the numbers on the keyboard,\n# (numbers that are above character buttons, not numbers that are on the right side of the keyboard)\n# recommended speed: 7\n","5b76f282":"# The SDS environment is made for research in swarm behaviour, maybe even robotics, surely for some fun and greater good :)","7a165e82":"# Play the Simulation\n* White circles are drones, black numbers on them are indexes of those drones\n* Yellow rectangle is a seed storage\n* Blue rectangle is a recharge\/refuel station\n* Green circles are planting sites with not enough seeds planted\n* Brown circles are planting sites with enough seeds planted","c6171ac5":"# Example Agent\nExplanation of the architecture:\n* At every step a drone is checking whether its charge is enough to reach the recharge station, if it's barely enough, the drone is moving to the recharge station, regardles of current task\n* If a drone doesn't have any task, it is searching for a new task\n* Drone continues with its current task until the task is completed or cancelled\n* The Agent must return list of actions of every drone of the swarm, action of a drone is `None` or `[drone_id, action_function_name, [action_function_args]]`\n* Possible action functions can be found [here](https:\/\/github.com\/YBiryukov\/kaggle-environments\/blob\/8e75fdf0da0e70410f333b30e4ccb9a34a121694\/kaggle_environments\/envs\/sds\/seed_planter\/drone_actions.py#L83)","d68c3e00":"# Install kaggle-environments from [GitHub](https:\/\/github.com\/YBiryukov\/kaggle-environments)","da4f0428":"# Rules of the Seed Planter simulation:\n* Out of charge (fuel) drone is deactivated\n* A drone must take seeds from the seed storage and plant them at the planting sites\n* To recharge\/refuel a drone can go to recharge station\n* Simulation is finished after all steps were played or enough seeds planted at each planting site"}}