{"cell_type":{"f1648c9a":"code","045396dd":"code","0772d420":"code","ed85fd87":"code","0154e41e":"code","8d83f037":"code","c5f6a8aa":"code","823057eb":"code","be206361":"code","2bb3726f":"code","ecc8e234":"code","54a9cc5f":"code","7706809f":"code","3ca9db1a":"code","c7766761":"code","d574e82e":"code","3e9dfb4d":"code","c3b11ce4":"code","dc0ad345":"code","e5a2449a":"code","480dccf2":"code","e8b62080":"code","fb36dd91":"code","47f40e67":"code","31e5e812":"code","7d397311":"code","bfe6f904":"code","bb09a270":"code","cc173a27":"code","ce9ad8d7":"code","ce49a0e5":"code","37373214":"code","f1095871":"code","3a077513":"code","247527f4":"code","1dcbb560":"code","3fdf08f7":"code","3274a423":"markdown"},"source":{"f1648c9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","045396dd":"train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsample_submission=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","0772d420":"train.head()","ed85fd87":"test.head()","0154e41e":"num_col=train.select_dtypes(exclude='object')\n\nnum_col_corr=num_col.corr()\n\nf, ax=plt.subplots(figsize=(30,30))\nsns.heatmap(num_col_corr, annot=True, ax=ax)","8d83f037":"num_col_corr['SalePrice']","c5f6a8aa":"high_corr_num_col=[]\nfor col in list(num_col_corr['SalePrice'].index):\n    if (num_col_corr['SalePrice'][col]>0.5 or num_col_corr['SalePrice'][col]<-0.5):\n        high_corr_num_col.append(col)","823057eb":"high_corr_num_col","be206361":"object_col=train.select_dtypes('object')","2bb3726f":"object_col","ecc8e234":"f, axes=plt.subplots(9,5, figsize=(30,50))\nax=axes.ravel()\nfor i, col in enumerate(object_col.columns):\n    sns.boxplot(x=object_col[col], y=train['SalePrice'], ax=ax[i])","54a9cc5f":"high_corr_object_col=['SaleCondition','SaleType','MiscFeature','PoolQC','PavedDrive','KitchenQual','Electrical','CentralAir','BsmtQual','ExterQual','RoofMatl',\n'Condition2','Neighborhood','Alley','MSZoning']","7706809f":"print(high_corr_num_col)\nprint(high_corr_object_col)","3ca9db1a":"high_corr_num_col.remove('SalePrice')\ncorr_columns=high_corr_num_col+high_corr_object_col","c7766761":"train[corr_columns].head()","d574e82e":"train[corr_columns].info()","3e9dfb4d":"y_train=train['SalePrice']","c3b11ce4":"train=train[corr_columns]\ntest=test[corr_columns]\n\ntrain.drop(columns=['MiscFeature','PoolQC','Alley'], inplace=True)\ntest.drop(columns=['MiscFeature','PoolQC','Alley'], inplace=True)","dc0ad345":"train.info()","e5a2449a":"test.info()","480dccf2":"train_null_col=[col for col in train.columns if train[col].isnull().any()]\ntest_null_col=[col for col in test.columns if test[col].isnull().any()]","e8b62080":"train_null_col","fb36dd91":"test_null_col","47f40e67":"f, axes=plt.subplots(1,2,figsize=(20,4))\nfor i, col in enumerate(train_null_col):\n    sns.countplot(train[col], ax=axes[i])","31e5e812":"train['Electrical'].fillna('SBrkr', inplace=True)\ntrain['BsmtQual'].fillna('TA', inplace=True)","7d397311":"f, axes=plt.subplots(3,3, figsize=(20,20))\nax=axes.ravel()\nfor i, col in enumerate(test_null_col):\n    if test[col].dtype=='int64' or test[col].dtype=='float64':\n        sns.distplot(test[col].dropna(), ax=ax[i])\n    else:\n        sns.countplot(test[col].dropna(), ax=ax[i])","bfe6f904":"test['TotalBsmtSF'].fillna(test['TotalBsmtSF'].median(), inplace=True)\ntest['GarageCars'].fillna(2, inplace=True)\ntest['GarageArea'].fillna(test['GarageArea'].median(), inplace=True)\nfor col in ['SaleType','KitchenQual','BsmtQual','MSZoning']:\n    test[col].fillna(test[col].value_counts().index[0], inplace=True)","bb09a270":"test.info()","cc173a27":"train.info()","ce9ad8d7":"train.columns","ce49a0e5":"from sklearn.preprocessing import OneHotEncoder, MinMaxScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import KFold, GridSearchCV\n\nct_passthrough=ColumnTransformer([('onehotencoding', OneHotEncoder(handle_unknown='ignore'), ['SaleCondition', 'SaleType', 'PavedDrive', 'KitchenQual', 'Electrical',\n       'CentralAir', 'BsmtQual', 'ExterQual', 'RoofMatl', 'Condition2','Neighborhood', 'MSZoning']),\n                     ('pass', 'passthrough', ['OverallQual', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF', '1stFlrSF',\n       'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'GarageCars', 'GarageArea']),\n                     ], n_jobs=-1)\n\nct_MinMaxScaling=ColumnTransformer([('onehotencoding', OneHotEncoder(handle_unknown='ignore'), ['SaleCondition', 'SaleType', 'PavedDrive', 'KitchenQual', 'Electrical',\n       'CentralAir', 'BsmtQual', 'ExterQual', 'RoofMatl', 'Condition2','Neighborhood', 'MSZoning']),\n                     ('pass', MinMaxScaler(), ['OverallQual', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF', '1stFlrSF',\n       'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'GarageCars', 'GarageArea']),\n                     ], n_jobs=-1)","37373214":"from sklearn.pipeline import Pipeline, make_pipeline\n\npipe=Pipeline([('preprocessing', ct_passthrough),\n              ('Regressor', LinearRegression())])\n\nparam_grid=[{'Regressor':[LinearRegression()], 'preprocessing':[ct_passthrough]},\n           {'Regressor':[SVR()], 'preprocessing':[ct_MinMaxScaling]},\n           {'Regressor':[RandomForestRegressor()], 'preprocessing':[ct_passthrough]}]\n\nGS=GridSearchCV(pipe, param_grid=param_grid, cv=KFold(), n_jobs=-1)","f1095871":"GS.fit(train, np.log(y_train))","3a077513":"predict=GS.predict(test)","247527f4":"predict","1dcbb560":"np.exp(predict)","3fdf08f7":"sub=sample_submission\nsub['SalePrice']=np.exp(predict)\nsub.to_csv('submission.csv', index=False)","3274a423":"'SaleCondition','SaleType','MiscFeature','PoolQC','PavedDrive','KitchenQual','Electrical','CnetralAir','BsmtQual','ExterQual','RoofMatl',\nCondition2','Neighborhood','Alley','MSZoning'"}}