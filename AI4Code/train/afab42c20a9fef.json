{"cell_type":{"b6563fb1":"code","051601c2":"code","4738e5b4":"code","48a7b2ea":"code","a7c7a7e0":"code","9a0a4634":"code","e9875497":"code","dd560371":"code","6ecc1ba8":"code","80f0fe74":"code","58221bc7":"code","b99ef80c":"code","a0fdfaa7":"code","303bcab5":"code","1ffec347":"code","7c282561":"code","b7ed9ddd":"code","356e8c92":"code","e759a37e":"code","1abe05e5":"code","3a12e6ca":"code","665ce92e":"markdown","f97e905f":"markdown","a41c2f1f":"markdown","855e2cc2":"markdown","adb72ba2":"markdown","6dd1fad4":"markdown","2e156675":"markdown","b81661c7":"markdown","b3eb1b85":"markdown","beb68951":"markdown","e654c2e7":"markdown","f584eb03":"markdown"},"source":{"b6563fb1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","051601c2":"import os\nimport gc\nimport json\nimport math\nimport cv2\nimport PIL\nfrom PIL import Image\nimport numpy as np\nfrom keras import layers\nfrom keras.applications import DenseNet121\nfrom keras.callbacks import Callback, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score, accuracy_score\nimport scipy\nimport tensorflow as tf\nfrom tqdm import tqdm\n%matplotlib inline\nfrom keras.preprocessing import image","4738e5b4":"# Detect hardware, return appropriate distribution strategy\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","48a7b2ea":"# class directories\ncover_dir = \"..\/input\/alaska2-image-steganalysis\/Cover\/\"\nJMiPOD_dir = \"..\/input\/alaska2-image-steganalysis\/JMiPOD\/\"\nJUNIWARD_dir = \"..\/input\/alaska2-image-steganalysis\/JUNIWARD\/\"\nUERD_dir = \"..\/input\/alaska2-image-steganalysis\/UERD\/\"\n# add to list\nclass_locs = [cover_dir, JMiPOD_dir, JUNIWARD_dir, UERD_dir]","a7c7a7e0":"BATCH_SIZE = 8\nTRAIN_VAL_SPLIT_RATIO = 0.50\nEPOCHS = 4\n# sample size for each class\ncN = 2000","9a0a4634":"def preprocess_image(image_path, desired_size=224):\n    im = Image.open(image_path)\n    im = im.resize((desired_size, desired_size))\n    im = np.array(im) \/ 255\n    return im","e9875497":"%%time\n\n# total samles \nN = cN * len(class_locs)\n# initialize y_train\ny_train = []\n# initalize x_train\nx_train = np.empty((N, 224, 224, 3), dtype=np.float16)\n# initialize class counter\nimClassNum = 0\n\n# run loop to grab training data\nfor imClass_dir in class_locs:\n    imClassNum += 1\n    print(\"running class\", str(imClassNum), \"...\")\n    for i, filename in enumerate(os.listdir(imClass_dir)):\n        x_train[i, :, :, :] = preprocess_image(imClass_dir+filename)\n        print(str(round(i\/75000,2))+\"% of total images processed, \"+str(i)+\" images in total\", end=\"\\r\")\n        if i == cN:\n            print(\"\")\n            print(\"finished with class \" + str(imClassNum) + \"..\")\n            break\n    y_train.extend([imClassNum] * cN)\n\n# convert y_train to numpy    \ny_train = np.array(y_train)    \n\nprint(\"final training dataset shape..\")\nprint(\"x_train shape: \", x_train.shape)\nprint(\"y_train len: \", len(y_train))\nprint(str(round(N\/(75000*4),2))+\"% of total images being used for training\")","dd560371":"# pre-processing the target (i.e. one-hot encoding the target)\ny_train = pd.get_dummies(y_train).values","6ecc1ba8":"y_train.shape","80f0fe74":"x_train, x_val, y_train, y_val = train_test_split(\n    x_train, y_train, \n    test_size=TRAIN_VAL_SPLIT_RATIO, \n    random_state=2020\n)","58221bc7":"# define gen\nimg_gen = ImageDataGenerator(\n        zoom_range=0.15,  # set range for random zoom\n        # set mode for filling points outside the input boundaries\n        fill_mode='constant',\n        cval=0.,  # value used for fill_mode = \"constant\"\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=True,  # randomly flip images\n    )\n\n# create generator\ndata_generator = img_gen.flow(x_train, y_train, batch_size=BATCH_SIZE, seed=2019)","b99ef80c":"densenet = DenseNet121(\n    weights='..\/input\/densenet-keras\/DenseNet-BC-121-32-no-top.h5',\n    include_top=False,\n    input_shape=(224,224,3)\n)","a0fdfaa7":"def build_model():\n    model = Sequential()\n    model.add(densenet)\n    model.add(layers.GlobalAveragePooling2D())\n    model.add(layers.Dropout(0.80))\n    model.add(layers.Dense(4, activation='sigmoid'))\n    \n    model.compile(\n        loss='binary_crossentropy',\n        optimizer=Adam(lr=0.00010509613402110064),\n        metrics=['accuracy']\n    )\n    \n    return model","303bcab5":"model = build_model()\nmodel.summary()","1ffec347":"history = model.fit_generator(\n    data_generator,\n    steps_per_epoch=x_train.shape[0] \/ BATCH_SIZE,\n    epochs=EPOCHS,\n    validation_data=(x_val, y_val)\n)","7c282561":"history_df = pd.DataFrame(history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['accuracy', 'val_accuracy']].plot()","b7ed9ddd":"sub = pd.read_csv(\"..\/input\/alaska2-image-steganalysis\/sample_submission.csv\")\nsub.head()","356e8c92":"# test data directory\ntest_dir = \"..\/input\/alaska2-image-steganalysis\/Test\/\"\n\n# do similar data loading we did on train but on the test\\holdout set\nN = len([name for name in os.listdir(test_dir)])\nx_test = np.empty((N, 224, 224, 3), dtype=np.uint8)\nfor i, filename in enumerate(tqdm(os.listdir(test_dir))):\n    x_test[i, :, :, :] = preprocess_image(test_dir+filename)\n\nx_test.shape","e759a37e":"y_test = model.predict(x_test)\ny_test = y_test[:,0]\nsub['Label'] = y_test","1abe05e5":"sub.to_csv(\"submission.csv\", index=False)","3a12e6ca":"sub.head()","665ce92e":"# Training Data","f97e905f":"# Train Model","a41c2f1f":"# Resources:\n\nhttps:\/\/www.kaggle.com\/xhlulu\/aptos-2019-densenet-keras-starter\n\nhttps:\/\/www.kaggle.com\/wouterbulten\/getting-started-with-the-panda-dataset\n\nhttps:\/\/www.kaggle.com\/yeayates21\/densenet-keras-starter-fork-v2\n\nhttps:\/\/www.kaggle.com\/xhlulu\/jigsaw-tpu-xlm-roberta\n\nhttps:\/\/medium.com\/@vijayabhaskar96\/tutorial-image-classification-with-keras-flow-from-directory-and-generators-95f75ebe5720\n\nhttps:\/\/stackoverflow.com\/questions\/55328355\/keras-flow-from-directory-read-only-from-selected-sub-directories\n\nhttps:\/\/kylewbanks.com\/blog\/train-validation-split-with-imagedatagenerator-keras\n\nhttps:\/\/medium.com\/@vijayabhaskar96\/tutorial-image-classification-with-keras-flow-from-directory-and-generators-95f75ebe5720","855e2cc2":"# Fixed Constants","adb72ba2":"# Imports","6dd1fad4":"# Submission","2e156675":"# Train Validation Split","b81661c7":"# Image Gen","b3eb1b85":"# Config Settings","beb68951":"# Variable Constants","e654c2e7":"# Create Model","f584eb03":"# Training Plots"}}