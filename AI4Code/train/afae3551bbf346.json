{"cell_type":{"651b501d":"code","4fa0be1b":"code","df352bac":"code","dd190173":"code","883c9646":"code","38bce809":"code","be3d765a":"code","8b8eb18f":"code","cab318ff":"code","b364f00b":"code","5f7e089b":"code","271981be":"code","0fe33dd6":"code","7927d73e":"code","13191040":"code","ca875e94":"code","f0ee928c":"code","a0b52e73":"code","79212006":"code","88f17f83":"code","4631dd71":"code","60b07c5f":"code","96d2bc53":"code","60fc3bad":"code","c455c6cf":"markdown","ea969efe":"markdown","45fd210e":"markdown"},"source":{"651b501d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","4fa0be1b":"data = pd.read_csv(\"..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")\ndata.head()","df352bac":"data.describe()","dd190173":"data.dtypes","883c9646":"corr_data = data.corr()\nplt.figure(figsize=(15,8))\nsns.heatmap(data=corr_data)","38bce809":"features = data.columns\nfeatures = features.drop(\"fbs\")","be3d765a":"print(\"Distplot of all the features are shown below:\")\n\nfor feature in features:\n    plt.figure(figsize=(12,5))\n    sns.histplot(data[feature])  ","8b8eb18f":"print(\"Countplot of all the features are shown below:\")\n    \nfor feature in features:\n    plt.figure(figsize=(12,5))\n    sns.countplot(x = data[feature])","cab318ff":"print(\"Boxplot of all the features are shown below:\")\n    \nfor feature in features:\n    plt.figure(figsize=(12,5))\n    sns.boxplot(x = data[feature])","b364f00b":"plt.figure(figsize=(12,5))\nsns.pairplot(data)","5f7e089b":"data.isnull().sum()","271981be":"numeric_columns = data.select_dtypes(exclude=\"O\")\n\nfor feature in numeric_columns:\n    q1 = data[feature].quantile(0.05)\n    q3 = data[feature].quantile(0.95)\n    iqr = q3-q1\n    Lower_tail = q1 - 1.5 * iqr\n    Upper_tail = q3 + 1.5 * iqr\n    med = np.mean(data[feature])\n    for i in data[feature]:\n        if i > Upper_tail or i < Lower_tail:\n                data[feature] = data[feature].replace(i, med)","0fe33dd6":"feature = data.columns\nfor col in feature:\n    data[\"age_min\"] = np.where(data[\"age\"]<40,1,0)\n    data[\"age_max\"] = np.where(data[\"age\"]>60,1,0)\n    data[\"resting_BP_min\"] = np.where(data[\"trtbps\"]<120,1,0)\n    data[\"resting_BP_max\"] = np.where(data[\"trtbps\"]>140,1,0)\n    data[\"heart_rate_min\"] = np.where(data[\"thalachh\"]<120,1,0)\n    data[\"heart_rate_max\"] = np.where(data[\"thalachh\"]>170,1,0)\n    data[\"cholesterol_min\"] = np.where(data[\"chol\"]<200,1,0)\n    data[\"cholesterol_max\"] = np.where(data[\"chol\"]>=300,1,0)","7927d73e":"data","13191040":"data.isnull().any()","ca875e94":"from xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split","f0ee928c":"model1 = XGBClassifier()\nmodel2 = LogisticRegression()\nmodel3 = RandomForestClassifier()\n\nx_train, x_test, y_train, y_test = train_test_split(data.drop(columns=[\"output\"]), data[\"output\"], test_size=0.3)\n\nmodel1.fit(x_train, y_train)\nmodel2.fit(x_train, y_train)\nmodel3.fit(x_train, y_train)\n\nscore1 = model1.score(x_test, y_test)\nscore2 = model2.score(x_test, y_test)\nscore3 = model2.score(x_test, y_test)\n\nprint(\"accuracy of XGBClassifier is \", score1*100)\nprint(\"accuracy of LogisticRegression is \", score2*100)\nprint(\"accuracy of RandomForestClassifier is \", score3*100)","a0b52e73":"data.columns","79212006":"import eli5\nfrom eli5.sklearn import PermutationImportance\n\nperm = PermutationImportance(model3, random_state=1).fit(x_test, y_test)\neli5.show_weights(perm, feature_names = x_test.columns.tolist())","88f17f83":"features = ['sex', 'cp', 'caa', 'output', \"thall\", \"slp\", \"restecg\", \"age_min\"]\n\ndata = data[features]\n\ntrain_x, test_x, train_y, test_y = train_test_split(data.drop(columns=[\"output\"]), data[\"output\"], test_size=0.2)\n\ntest_model = RandomForestClassifier()\n\ntest_model.fit(train_x, train_y)","4631dd71":"params = {\n    \"max_depth\"         : [3,4,5,6,7,8],\n    \"n_estimators\"      : [50, 70, 80, 90, 100, 200, 400, 600],\n    \"random_state\"      : [1,2,3,4,5,6],\n    \"n_jobs\"            : [1,2,3,4,5]\n    }\n\nfrom sklearn.model_selection import RandomizedSearchCV\n\nrandom_search = RandomizedSearchCV(test_model, param_distributions=params, n_iter=5, cv=5)\n\nrandom_search.fit(train_x, train_y)","60b07c5f":"random_search.best_estimator_","96d2bc53":"random_search.best_params_","60fc3bad":"final_model = RandomForestClassifier(max_depth=4, n_jobs=3, random_state=2)\n\nfinal_model.fit(train_x, train_y)\n\nfinal_score = final_model.score(test_x, test_y)\n\nprint(\"Accuracy of our model is \", final_score*100)","c455c6cf":"Feature Engineering","ea969efe":"# Model Building","45fd210e":"Zoom in to get a better view."}}