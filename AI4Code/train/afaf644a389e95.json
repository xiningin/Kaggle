{"cell_type":{"14d02c3b":"code","8205300c":"code","ac50473e":"code","97545fbc":"code","809dea64":"code","6da137b3":"code","48e14762":"code","61e5d7d3":"code","db977c33":"code","a7dcd218":"code","d4cd8deb":"code","285abdbb":"code","27c0399d":"code","b586eba9":"code","5735b371":"markdown","fab9b3dc":"markdown","e55eb463":"markdown","6e9c3ae3":"markdown","b225c4eb":"markdown","0ef23c44":"markdown","bfabacfd":"markdown","e4d7ea0c":"markdown","c60ed18f":"markdown","2d269751":"markdown","fd593845":"markdown","a6a0a9db":"markdown","3e6a5cad":"markdown","8e0455ee":"markdown","bd0fecf0":"markdown"},"source":{"14d02c3b":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D,Dense,Dropout,Flatten,MaxPool2D\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\nfrom tensorflow.keras.layers.experimental.preprocessing \\\nimport RandomFlip,RandomRotation,Rescaling,RandomContrast","8205300c":"train_df = image_dataset_from_directory('..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train\/',\n                                       labels='inferred',\n                                       label_mode='binary',\n                                       interpolation='nearest',\n                                       image_size=[128,128],\n                                       batch_size=32,\n                                       shuffle=True,\n                                       )","ac50473e":"valid_df = image_dataset_from_directory('..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Validation\/',\n                                       labels='inferred',\n                                       label_mode='binary',\n                                       interpolation='nearest',\n                                       image_size=[128,128],\n                                       batch_size=32,\n                                       shuffle=True,\n                                       )","97545fbc":"test_df = image_dataset_from_directory('..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Test\/',\n                                       labels='inferred',\n                                       label_mode='binary',\n                                       interpolation='nearest',\n                                       image_size=[128,128],\n                                       batch_size=32,\n                                       shuffle=True,\n                                       )","809dea64":"class_name = train_df.class_names","6da137b3":"import matplotlib.pyplot as plt\nplt.style.use('seaborn-dark')\n\nplt.figure(figsize=(15,15))\nfor img, label in train_df.take(1):\n    for i in range(9):\n        ax = plt.subplot(3,3,i+1)\n        plt.imshow(img[i].numpy().astype('uint8'))\n        plt.title(class_name[int(label[i])])\n        plt.axis('off')","48e14762":"AUTOTUNE = tf.data.AUTOTUNE\n\ntrain_df = train_df.cache().prefetch(buffer_size=AUTOTUNE)\nvalid_df = valid_df.cache().prefetch(buffer_size=AUTOTUNE)\ntest_df = test_df.cache().prefetch(buffer_size=AUTOTUNE)","61e5d7d3":"model = Sequential([\n    Rescaling(1.0\/255,input_shape=(128,128,3)),\n    RandomFlip(),\n    RandomRotation(0.4),\n    RandomContrast(0.3),\n    \n    # First Layer\n    layers.Conv2D(filters=64, kernel_size=5, activation='relu',padding='same'),\n    layers.MaxPool2D(),\n    \n    # Second Layer\n    layers.Conv2D(filters=128, kernel_size=5, activation='relu',padding='same'),\n    layers.MaxPool2D(),\n    \n    # Third Layer\n    layers.Conv2D(filters=128, kernel_size=5, activation='relu',padding='same'),\n    layers.MaxPool2D(),\n    \n    # Forth Layer\n    layers.Conv2D(filters=128, kernel_size=5, activation='relu',padding='same'),\n    layers.MaxPool2D(),\n    \n    # Fivth Layer\n    layers.Conv2D(filters=128, kernel_size=5, activation='relu',padding='same'),\n    layers.MaxPool2D(),\n    layers.Dropout(0.2),\n    \n    # Classifier Head\n    layers.Flatten(),\n    layers.Dense(units=6,activation='relu'),\n    layers.Dense(units=1,activation='sigmoid')\n    \n])","db977c33":"model.compile(\n    optimizer=tf.optimizers.Adam(epsilon=0.02),\n    loss='binary_crossentropy',\n    metrics=['binary_accuracy'],\n)","a7dcd218":"history = model.fit(train_df,\n                   validation_data=valid_df,\n                   epochs=50,\n                   batch_size=32,\n                   )","d4cd8deb":"import pandas as pd\nhist_df = pd.DataFrame(history.history)\nhist_df.loc[:,['loss','val_loss']].plot()\nhist_df.loc[:,['binary_accuracy','val_binary_accuracy']].plot()","285abdbb":"model.save('face_detection.h5')","27c0399d":"def get_class(img):\n    img_arr = keras.preprocessing.image.img_to_array(img)\n    img_arr = tf.expand_dims(img_arr, 0)\n    pred = model.predict(img_arr)\n    pred = (pred>0.5).astype(np.int)\n    return class_name[pred[0][0]]","b586eba9":"plt.figure(figsize=(20,20))\nfor img , _ in test_df.take(5):\n    for i in range(30):\n        ax = plt.subplot(6,5,i+1)\n        plt.imshow(img[i])\n        plt.title(get_class(img[i]))\n        plt.axis('off')","5735b371":"#### Storing the Class names in a List","fab9b3dc":"### Lets See the Predicted Results","e55eb463":"#### Autotune the all the dataset","6e9c3ae3":"### Convolutional Neural Network Layers","b225c4eb":"### Fitting the Model","0ef23c44":"### Import Important Libraries","bfabacfd":"### Import Validation Data","e4d7ea0c":"### Import Train Data","c60ed18f":"### Creating a function which return predictions","2d269751":"### Save the Model","fd593845":"## **Thank You for Giving Your Time**","a6a0a9db":"### Import Test Data","3e6a5cad":"# **Face Detection Assignment**\n* Detect face with CNN model.","8e0455ee":"### Lets See Some Train Data Images","bd0fecf0":"### Lets see the Accuracy and Loss"}}