{"cell_type":{"878746a5":"code","90dbf398":"code","400a5d81":"code","8133ba30":"code","eff06f88":"code","647f79bb":"code","75443c29":"code","9a713996":"code","c798906a":"code","e6bf8bda":"code","951046aa":"code","3226345e":"code","fd58371d":"code","ee3563a2":"code","f3b213d5":"code","83172ea4":"code","c8730f93":"code","d3dfaf04":"code","c43ff75e":"code","4fbd98f5":"code","fca328e9":"markdown","295648e4":"markdown","0a78ca29":"markdown","0366355d":"markdown"},"source":{"878746a5":"# Authors:\n# Sunil Choudhary, Rohan Daniel, Ravindra Singh, Shantanu singh","90dbf398":"import os\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Dropout","400a5d81":"train_dir = '..\/input\/asl-alphabet\/asl_alphabet_train\/asl_alphabet_train'","8133ba30":"## Data Directory description   ###################################\n#\n#\n#   29 folders in test are -> A, B, C, D, E, F, G ,H, I ,J ,K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, DEL, SPACE, NOTHING\n#\n#\n#\n#                             -> asl_alphabet_train ->  asl_alphabet_train -> 29 folder, each folder has 3000 images\n#                           \/\n# input ->  asl-alphabet ->  \n#                          \\ \n#                           -> asl_alphabet_test ->  asl_alphabet_test -> 28 test images\n#\n","eff06f88":"categories = os.listdir(train_dir)\nlen(categories)","647f79bb":"categories","75443c29":"count = 0\ntrain_images_names_and_paths = {}\n\nfor i in categories:\n    train_images_names_and_paths[i] = os.listdir(train_dir + '\/' + i)\n    count += len(os.listdir(train_dir + '\/' + i))\n    \nprint('total count of test images is:', count)","9a713996":"for i in categories:\n    print(i)\nprint(\"These are the categories\")","c798906a":"img = plt.imread(train_dir + '\/' + list(train_images_names_and_paths.keys())[0] + '\/' + list(train_images_names_and_paths.values())[0][0])\nplt.imshow(img)","e6bf8bda":"img.shape","951046aa":"#The ImageDataGenerator class has three methods \n#flow(), flow_from_directory() and flow_from_dataframe() \n#to read the images from a big numpy array and folders containing images.","3226345e":"data_generator = ImageDataGenerator(rescale = 1\/255)\n\ntrain_generated = data_generator.flow_from_directory(train_dir,                       # path of images\n                                                     target_size = (200,200),         # size of image\n                                                     class_mode = 'categorical',\n                                                     color_mode = 'grayscale',\n                                                     shuffle = True,\n                                                     batch_size = 32                  # hyperparameter that defines the number of samples\n                                                                                      #to work through before updating the internal model parameters\n                                                    )\n","fd58371d":"x,y = train_generated.next()\nfor i in range(0,2):\n    image = x[i]\n    plt.imshow(image)\n    plt.show()","ee3563a2":"train_generated.class_indices","f3b213d5":"img = plt.imread(train_dir + '\/' + list(train_images_names_and_paths.keys())[1] + '\/' + list(train_images_names_and_paths.values())[1][0])\nplt.imshow(img)\n\nprint(\"following is picture of 'r'\")","83172ea4":"CNN = keras.models.Sequential([\n    keras.layers.Conv2D(filters = 32, kernel_size = (3,3), input_shape = (200,200,1), activation = 'relu'),\n    keras.layers.MaxPool2D(pool_size = (2,2)),\n    \n    keras.layers.Conv2D(filters = 64, kernel_size = (3,3), activation = 'relu'),\n    keras.layers.MaxPool2D(pool_size = (3,3)),\n    \n    keras.layers.Conv2D(filters = 128, kernel_size = (3,3), activation = 'relu'),\n    keras.layers.MaxPool2D(pool_size = (3,3)),\n    \n    \n    keras.layers.Flatten(),\n    keras.layers.Dense(1024, activation = 'relu'),\n    keras.layers.Dropout(0.2),\n    keras.layers.Dense(512, activation = 'relu'),\n    keras.layers.Dropout(0.2),\n    keras.layers.Dense(29, activation = 'softmax')   \n])","c8730f93":"CNN.compile(\n    optimizer = 'adam',\n    loss = 'categorical_crossentropy',\n    metrics = ['accuracy']\n)","d3dfaf04":"CNN.summary()","c43ff75e":"CNN.fit(train_generated, epochs = 5)","4fbd98f5":"from keras.models import load_model\n\nCNN.save('CNN_grayscaled.h5')\n","fca328e9":"# Data Preprocessing","295648e4":"# Importing libraries","0a78ca29":"## Data Description","0366355d":"# CNN Model"}}