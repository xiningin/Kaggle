{"cell_type":{"51ff823c":"code","e1c1c733":"code","70465221":"code","b09e3fa4":"code","8066695b":"code","62db6802":"code","fd9c030b":"code","9e84997e":"code","6ac40159":"code","35014dc5":"code","731ea818":"markdown","6cbb7e1d":"markdown","7576b7b7":"markdown","0a7dcc8c":"markdown","1b6df092":"markdown","e090aa0e":"markdown","3800aaad":"markdown","788cb420":"markdown"},"source":{"51ff823c":"# Code you have previously used to load data\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeRegressor\n\n# Path of the file to read\niowa_file_path = '..\/input\/home-data-for-ml-course\/train.csv'\n\nhome_data = pd.read_csv(iowa_file_path)\ny = home_data.SalePrice\nfeature_columns = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nX = home_data[feature_columns]\n\n# Specify Model\niowa_model = DecisionTreeRegressor()\n# Fit Model\niowa_model.fit(X, y)\n\nprint(\"First in-sample predictions:\", iowa_model.predict(X.head()))\nprint(\"Actual target values for those homes:\", y.head().tolist())\n\n# Set up code checking\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.machine_learning import *\nprint(\"Setup Complete\")","e1c1c733":"# Import the train_test_split function\nfrom sklearn.model_selection import train_test_split\n\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 1)\n\nstep_1.check()","70465221":"# The lines below will show you a hint or the solution.\n# step_1.hint() \n# step_1.solution()\n","b09e3fa4":"# You imported DecisionTreeRegressor in your last exercise\n# and that code has been copied to the setup code above. So, no need to\n# import it again\n\n# Specify the model\niowa_model = DecisionTreeRegressor(random_state=1)\n\n# Fit iowa_model with the training data.\niowa_model.fit(train_X, train_y)\nstep_2.check()","8066695b":"# step_2.hint()\n# step_2.solution()","62db6802":"# Predict with all validation observations\nval_predictions = iowa_model.predict(val_X)\n\nstep_3.check()","fd9c030b":"# step_3.hint()\n# step_3.solution()","9e84997e":"# print the top few validation predictions\nprint(val_predictions)\n# print the top few actual prices from validation data\nprint(val_y)","6ac40159":"from sklearn.metrics import mean_absolute_error\nval_mae = mean_absolute_error(val_y, val_predictions)\n\n# uncomment following line to see the validation_mae\nprint(val_mae)\nstep_4.check()","35014dc5":"# step_4.hint()\n# step_4.solution()","731ea818":"Inspect your predictions and actual values from validation data.","6cbb7e1d":"## Recap\nYou've built a model. In this exercise you will test how good your model is.\n\nRun the cell below to set up your coding environment where the previous exercise left off.","7576b7b7":"## Step 2: Specify and Fit the Model\n\nCreate a `DecisionTreeRegressor` model and fit it to the relevant data.\nSet `random_state` to 1 again when creating the model.","0a7dcc8c":"# Keep Going\n\nNow that you can measure model performance, you are ready to run some experiments comparing different models. The key is to understand **[Underfitting and Overfitting](https:\/\/www.kaggle.com\/dansbecker\/underfitting-and-overfitting)**. It's an especially fun part of machine learning. \n\n---\n**[Course Home Page](https:\/\/www.kaggle.com\/learn\/machine-learning)**\n\n\n","1b6df092":"What do you notice that is different from what you saw with in-sample predictions (which are printed after the top code cell in this page).\n\nDo you remember why validation predictions differ from in-sample (or training) predictions? This is an important idea from the last lesson.\n\n## Step 4: Calculate the Mean Absolute Error in Validation Data\n","e090aa0e":"Is that MAE good?  There isn't a general rule for what values are good that applies across applications. But you'll see how to use this number in the next step.","3800aaad":"# Exercises\n\n## Step 1: Split Your Data\nUse the `train_test_split` function to split up your data.\n\nGive it the argument `random_state=1` so the `check` functions know what to expect when verifying your code.\n\nRecall, your features are loaded in the DataFrame **X** and your target is loaded in **y**.\n","788cb420":"## Step 3: Make Predictions with Validation data\n"}}