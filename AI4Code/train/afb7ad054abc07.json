{"cell_type":{"9f88a25c":"code","8ca5a0fc":"code","74a68f13":"code","be89294a":"code","6604e7c1":"code","b71ebecb":"code","f0cdc706":"code","59e7d72c":"code","c04b6072":"code","2ab8906b":"code","7c89c5f8":"code","5ec11bef":"code","e0517266":"code","9fdf907b":"code","162f9b70":"code","d959914c":"code","6646bf52":"code","4d2fa10a":"code","d38090dc":"code","a125b8a9":"code","dcfe8ae1":"code","4b4e0b20":"code","0caeef75":"code","173203a6":"code","c9f49ecf":"code","1b085e58":"markdown","1a8a336e":"markdown"},"source":{"9f88a25c":"import numpy as np \nimport pandas as pd\nimport os\nimport pydicom\nimport glob\nimport seaborn as sn\nfrom fastai.vision.all import *\nfrom fastai.medical.imaging import *\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\nfrom skimage import exposure\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nimport cv2\nimport warnings\nwarnings.filterwarnings('ignore')","8ca5a0fc":"train_dataset_path = Path('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train')","74a68f13":"train_dataset_path.ls()","be89294a":"def dicom2array(path, voi_lut=True, fix_monochrome=True):\n    dicom = pydicom.read_file(path)\n    # VOI LUT (if available by DICOM device) is used to\n    # transform raw DICOM data to \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n    return data\n        \n    \ndef plot_img(img, size=(10, 10), is_rgb=True, title=\"\", cmap='gray'):\n    plt.figure(figsize=size)\n    plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()\n\n\ndef plot_imgs(imgs, cols=4, size=7, is_rgb=True, title=\"\", cmap='gray', img_size=(500,500)):\n    rows = len(imgs)\/\/cols + 1\n    fig = plt.figure(figsize=(cols*size, rows*size))\n    for i, img in enumerate(imgs):\n        if img_size is not None:\n            img = cv2.resize(img, img_size)\n        fig.add_subplot(rows, cols, i+1)\n        plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()","6604e7c1":"dicom_paths = [i.ls()[10] for i in (train_dataset_path\/'00045').ls()]\nimgs = [dicom2array(path) for path in dicom_paths]\nplot_imgs(imgs)","b71ebecb":"dicom_paths","f0cdc706":"dataset_path = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/'\ntrain_path = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train'\ntest_path = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/test'\n\nflair_dir = 'FLAIR'\nt1w_dir = 'T1w'\nt1wce_dir = 'T1wCE'\nt2w_dir = 'T2w'\n\nos.listdir(dataset_path)","59e7d72c":"train_labels = pd.read_csv(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv\")\nprint(f'There are {len(train_labels)} patients in this dataset')","c04b6072":"train_labels.head()","2ab8906b":"train_labels.groupby('MGMT_value').count()","7c89c5f8":"\nsn.countplot(train_labels.MGMT_value)","5ec11bef":"def getFullId(id):\n    return str(id).zfill(5)\n    \ndef getFlairPath(id):\n    flair_path = os.path.join(train_path, getFullId(id), flair_dir)\n    return flair_path if os.path.isdir(flair_path) else False\n\ndef getT1wPath(id):\n    t1w_path = os.path.join(train_path, getFullId(id), t1w_dir)\n    return t1w_path if os.path.isdir(t1w_path) else False\n\ndef getT1wcePath(id):\n    t1wce_path = os.path.join(train_path, getFullId(id), t1wce_dir)\n    return t1wce_path if os.path.isdir(t1wce_path) else False\n\ndef getT2wPath(id):\n    t2w_path = os.path.join(train_path, getFullId(id), t2w_dir)\n    return t2w_path if os.path.isdir(t2w_path) else False","e0517266":"def countFlairFiles(id):\n    path = getFlairPath(id)\n    return len([file for file in os.listdir(path)])\n\ndef countT1wFiles(id):\n    path = getT1wPath(id)\n    return len([file for file in os.listdir(path)])\n\ndef countT1wceFiles(id):\n    path = getT1wcePath(id)\n    return len([file for file in os.listdir(path)])\n\ndef countT2wFiles(id):\n    path = getT2wPath(id)\n    return len([file for file in os.listdir(path)])\n\ntrain_labels['FLAIR'] = train_labels['BraTS21ID'].apply(lambda x: countFlairFiles(x))\ntrain_labels['T1w'] = train_labels['BraTS21ID'].apply(lambda x: countT1wFiles(x))\ntrain_labels['T1wCE'] = train_labels['BraTS21ID'].apply(lambda x: countT1wceFiles(x))\ntrain_labels['T2w'] = train_labels['BraTS21ID'].apply(lambda x: countT2wFiles(x))","9fdf907b":"sn.boxplot(x=\"variable\", y=\"value\", data=pd.melt(train_labels[['FLAIR', 'T1w', 'T1wCE', 'T2w']]))\nplt.title('Number of images files by structural multi-parametric MRI')\nplt.show()","162f9b70":"def get3ScaledImage(path):\n\n    dicom = pydicom.read_file(path)\n    img = dicom.pixel_array\n\n    r, c = img.shape\n    img_conv = np.empty((c, r, 3), dtype=img.dtype)\n    img_conv[:,:,2] = img_conv[:,:,1] = img_conv[:,:,0] = img\n\n    ## Step 1. Convert to float to avoid overflow or underflow losses.\n    img_2d = img_conv.astype(float)\n\n    ## Step 2. Rescaling grey scale between 0-255\n    img_2d_scaled = (np.maximum(img_2d,0) \/ img_2d.max()) * 255.0\n\n    ## Step 3. Convert to uint\n    img_2d_scaled = np.uint8(img_2d_scaled)\n    img_2d_scaled.reshape([img_2d_scaled.shape[0], img_2d_scaled.shape[1], 3])\n    \n    return img_2d_scaled, (c, r)","d959914c":"id = 0\n\nnb = countFlairFiles(id)\npath = getFlairPath(id)\nframes =[]\n\nfor i in range(nb):\n    file_name = 'Image-' + str(i+1) + '.dcm'\n    img_path = os.path.join(path, file_name)\n    img_2d_scaled, size = get3ScaledImage(img_path)\n    frames.append(img_2d_scaled)\n","6646bf52":"img_2d_scaled.shape","4d2fa10a":"img_2d_scaled","d38090dc":"train_labels","a125b8a9":"label = train_labels.MGMT_value ","dcfe8ae1":"label","4b4e0b20":"X = train_labels.drop(['BraTS21ID', 'MGMT_value'], axis='columns')\ny = label","0caeef75":"X.shape, y.shape","173203a6":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()","c9f49ecf":"model.fit(X, y)","1b085e58":"#### Thanks for reading this far. If you have any suggestions for further tips to add, feel free to comment below.","1a8a336e":"#### Check files and folders"}}