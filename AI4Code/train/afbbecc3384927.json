{"cell_type":{"a0c36be1":"code","ed06570f":"code","d81e6654":"code","2b552e3d":"code","17b0e457":"code","54d74a91":"code","0d0b460b":"code","b2206a47":"code","96817a42":"code","34742e58":"code","70d7526c":"markdown","035c4d51":"markdown"},"source":{"a0c36be1":"import os\nfrom nltk import word_tokenize\nimport itertools\nimport pandas as pd","ed06570f":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d81e6654":"df = pd.read_csv(\"\/kaggle\/input\/smart-home-commands-dataset\/dataset.csv\")\nsentences_df = df[['Sentence']]\nsentences_df.head(10)","2b552e3d":"def get_plain_vocabluary():\n    sentencess = [word_tokenize(sentence['Sentence']) for index, sentence in sentences_df.iterrows()]\n    mergesentences = list(itertools.chain.from_iterable(sentencess))\n    plainvocabulary = list(set(mergesentences))\n    return plainvocabulary","17b0e457":"def levenshtein_distance(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2+1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1]","54d74a91":"def spelling_correction(sentence):\n    splittedsentence = word_tokenize(sentence)\n    vocwords = list(itertools.chain.from_iterable([get_plain_vocabluary()]))\n    for i,word in enumerate(splittedsentence):\n        if (word not in vocwords and not word.isdigit()): # ignore digits\n            levdistances = []\n            for vocword in vocwords:\n                levdistances.append(levenshtein_distance(word,vocword))\n            splittedsentence[i] = vocwords[levdistances.index(min(levdistances))]\n        else:\n            splittedsentence[i] = word\n    return ' '.join(splittedsentence)","0d0b460b":"# 1 word is not spelled correctly \"lihgts\"\nprint(spelling_correction(\"Turn off the lihgts?\"))","b2206a47":"# 1 word is not spelled correctly \"Opn\"\nprint(spelling_correction(\"Opn the garage door.\"))","96817a42":"# 2 words are not spelled correctly \"youu\" \"doorr\"\nprint(spelling_correction(\"Can youu please open the doorr.\"))","34742e58":"# 2 words are not spelled correctly \"lihts\" \"rooom\"\nprint(spelling_correction(\"Turn off the lihts in the dining rooom.\"))","70d7526c":"We are going to use the [Smart Home Commands Dataset](https:\/\/www.kaggle.com\/bouweceunen\/smart-home-commands-dataset) which contains smart home commands. We are going to use the [Levenshtein distance](https:\/\/en.wikipedia.org\/wiki\/Levenshtein_distance) to do spelling correction on faulty sentences.","035c4d51":"# Levenshtein Distance Spelling Correction NLP"}}