{"cell_type":{"a837d786":"code","1e5fa373":"code","00da21f9":"code","f6f310c9":"code","512fa0a9":"code","02fecc5a":"code","15490056":"code","d636e04c":"code","4bf33f3b":"code","9c8998cb":"code","f9250fd5":"code","e2e18f19":"code","c2642cf9":"code","0de43121":"code","a8a29ebf":"code","bb9b9a77":"code","192468a6":"code","9a46e726":"code","f33b39c7":"code","db6d1d2d":"code","4c509426":"code","c836e2d9":"code","e393f2e2":"code","02dd5643":"code","679364b6":"code","10f4694d":"code","989c97e0":"code","6ee0a377":"code","7a8e1af5":"code","1b7a7fa3":"code","db1363c9":"code","b7b6749a":"code","033218f6":"code","2e10bea1":"code","30b7342a":"code","db59cc63":"code","26aa8e31":"code","a248524c":"code","c8867fcc":"code","39ddd3bd":"code","d1275021":"code","c2a8d5de":"code","04c5a247":"code","85a8657a":"code","399b4920":"code","38bdb8c8":"code","8a6c0620":"code","bbd7a017":"code","e573c472":"code","dfbdb890":"code","f847c4b2":"code","af223d36":"code","97cb7cc6":"code","03d67f06":"code","e7260654":"code","32bdbea2":"code","7be9c652":"code","722a3c07":"code","031c1162":"code","cae790f9":"code","6ab807cf":"code","fdd7b207":"code","a333ec8b":"code","e36fca84":"code","7282d7d0":"code","1b90aa10":"code","ee689d44":"code","aedd8329":"code","c593106c":"code","3b76a976":"markdown","5a88f849":"markdown","4587b074":"markdown","4594047c":"markdown","6a3a30e9":"markdown","9937231d":"markdown","e0a046d9":"markdown","ce1f3bd6":"markdown","17907722":"markdown","63309d02":"markdown","bdcfd063":"markdown","c63cc027":"markdown","03a2532d":"markdown","36f15fc7":"markdown","d5fcae17":"markdown","7d2774d9":"markdown","6a59909d":"markdown","2cd667b3":"markdown","f04091bb":"markdown","61e3a36d":"markdown","a803787e":"markdown","5d8899ff":"markdown","d53bbd9a":"markdown","bbfbd600":"markdown","ec18f01f":"markdown","328335e8":"markdown","8c693d5e":"markdown","da1a5b0c":"markdown","bfc32cf8":"markdown","649df5e2":"markdown","746e65cb":"markdown","81a5d6b4":"markdown","611dd46f":"markdown","560038ec":"markdown","c6d249e6":"markdown","7fdd14cc":"markdown","0de3a21c":"markdown","e3a835a4":"markdown","c5b32cd6":"markdown","5af76e4e":"markdown","31140ee4":"markdown","a34128bc":"markdown"},"source":{"a837d786":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics\n\n# library for select kbest feature\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nfrom sklearn.ensemble import ExtraTreesClassifier\n\n#display max row and columns\npd.set_option('display.max_columns', None)\npd.set_option( 'display.max_row',None)\n\n\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","1e5fa373":"train_data=pd.read_csv(\"..\/input\/home-data-for-ml-course\/train.csv\")\ntest_data=pd.read_csv(\"..\/input\/home-data-for-ml-course\/test.csv\")\nprint(\" sucessfuly loaded the data set\")","00da21f9":"train_id=train_data[['Id']]\ntest_id=test_data[['Id']]\n\n# take out the traget variable from data set\n\nsales=train_data[['SalePrice']]\n\n# drop traget variable \n\ntrain_data=train_data.drop(['Id','SalePrice'],axis=1)\ntest_data=test_data.drop(['Id'],axis=1)\n\n# Check the shape of data set\n\nprint('shape of train_data',train_data.shape)\nprint('shape of test_data', test_data.shape)","f6f310c9":"# Check the type of data \n\nplt.subplot(121)\nplt.pie(train_data.dtypes.value_counts(), labels=[ 'object','int', 'float'], autopct='%1.1f%%', shadow=True)\nplt.title('Train_data')\nprint('train_data type',train_data.dtypes.value_counts())\n\n\nprint('test_data type', test_data.dtypes.value_counts())\nplt.subplot(122)\nplt.pie(test_data.dtypes.value_counts(), labels=[ 'object','int', 'float'],autopct='%1.1f%%', shadow=True)\nplt.title('Test_data')","512fa0a9":"# Merge the train and test data set\ndf=pd.concat([train_data, test_data])","02fecc5a":"total = df.isnull().sum().sort_values(ascending=False)\npercent = ((df.isnull().sum() \/ len(df)) * 100).sort_values(ascending=False)\nnull_data = pd.concat([total, percent], axis=1,join='outer', keys=['Null count', 'Percentage %'])\nnull_data.index.name ='Columns'\nnull_data = null_data[null_data['Null count'] > 0].reset_index()\nnull_data","15490056":"# Categorical missing values\nfor col in df:\n    if df[col].dtype == 'object':\n        if df[col].isnull().sum():\n            print(col)","d636e04c":"# Check more then 40 perecentage of categorical missing value\nfor col in df:\n    if df[col].dtype == 'object':\n        if (df[col].isnull().sum()\/df[col].isnull().count()) * 100 >= 40:\n            print(col)","4bf33f3b":"# Drop the missing variables which is have higher then 40 percentage\ndf.drop(columns=['Alley','FireplaceQu','PoolQC','Fence','MiscFeature'], axis=1, inplace=True)","9c8998cb":"#fill the missing categorical varible with most frequent (mode)value\n\nfor col in df:\n    if df[col].dtype == 'object':\n        df[col] = df[col].fillna(df[col].mode()[0])\n","f9250fd5":"# missing value of numarical variable\n\nfor col in df:\n    if df[col].dtype != 'object':\n         if df[col].isnull().sum():\n            print(col)","e2e18f19":"# percentage of missing value for numaric variable\n\nfor num in df:\n    if df[num].dtype != 'object':\n        if (df[num].isnull().sum()\/df[num].isnull().count()) * 100 >= 40:\n            print(num)\n        else:\n            check= True\n            \nif check:\n    print('We do not have missing data more than 40%')            ","c2642cf9":"for num in df:\n    if df[num].dtype != 'object':\n        df[num] = df[num].fillna(df[num].mean())","0de43121":"# After fill the missing values \ndf.isnull().sum()","a8a29ebf":"#split the train and test data =df[0:1460]\n\ntrain=df[0:1460]\ntest=df[1460:]\ndata=pd.concat([train, sales], axis=1)\n","bb9b9a77":"numarical_variable=train.select_dtypes(include=np.number)\ncategorical_variable=train.select_dtypes(include='object')\n\n","192468a6":"print(numarical_variable.shape)\nprint(categorical_variable.shape)","9a46e726":"# Descriptive statistics for numarical variable\ntrain.describe(include=np.number)","f33b39c7":"skew=numarical_variable.skew()\nprint(skew.nlargest(20))\nprint('these variables are vary large skewed variable')","db6d1d2d":"sns.distplot(data['SalePrice'], kde=False)\nplt.xticks(rotation=90)\nplt.title('Traget variable')","4c509426":"sns.distplot(data['LotFrontage'])","c836e2d9":"sns.distplot(data['LotArea'])","e393f2e2":"sns.distplot(data['OverallQual'], kde=False)","02dd5643":"sns.distplot(data['BedroomAbvGr'])","679364b6":"sns.distplot(data['KitchenAbvGr'], kde=False)","10f4694d":"sns.distplot(data['GarageCars'], kde=False)","989c97e0":"sns.distplot(data['TotRmsAbvGrd'])","6ee0a377":"categorical_variable.columns","7a8e1af5":"sns.countplot(data['SaleCondition'])","1b7a7fa3":"sns.countplot(data['KitchenQual'])\nplt.title('Quality `of Kitchen')","db1363c9":"sns.countplot(data['GarageQual'])\nplt.title('Garage Quality')","b7b6749a":"sns.countplot(data['SaleType'])","033218f6":"sns.countplot(data['Heating'])\nplt.title('Type of Heating')","2e10bea1":"sns.countplot(data['HeatingQC'])\nplt.title('Heating Quality')","30b7342a":"sns.countplot(data['BsmtExposure'])\nplt.title('garden level basement walls')","db59cc63":"sns.countplot(data['HouseStyle'])\nplt.title('Residence Style')\n","26aa8e31":"sns.countplot(data['BldgType'])\nplt.title('Type of Residence')","a248524c":"sns.countplot(data['Utilities'])\nplt.title('Type of Utilities')","c8867fcc":"sns.countplot(data['LotShape'])\nplt.title('General shape of property')","39ddd3bd":"sns.countplot(data['Street'])\nplt.title('Type of Street Access')","d1275021":"data.info()","c2a8d5de":"sns.lineplot(data['YearBuilt'], data['SalePrice'])","04c5a247":"# Plot pairwise relationships in a dataset.\nplt.scatter(data['1stFlrSF'],data['SalePrice'])\nplt.title('First Floor square feet  Vs SalePrice')\n\n","85a8657a":"# Plot pairwise relationships in a dataset.\nplt.scatter(data['2ndFlrSF'],data['SalePrice'])\nplt.title('Second Floor square feet  Vs SalePrice')","399b4920":"sns.scatterplot(data['KitchenQual'], data['SalePrice'], hue=data['KitchenAbvGr'])\nplt.title('Kitchen Vs Saleprice')","38bdb8c8":"sns.scatterplot(data['GarageArea'], data['SalePrice'], hue=data['GarageCars'])\nplt.title('GarageArea and cars  Vs SalePrice')","8a6c0620":"sns.scatterplot(data['TotRmsAbvGrd'], data['SalePrice'])\nplt.title('TotalRoom Vs SalePrice')\nplt.xticks(rotation=90)","bbd7a017":"corr=data.corr()\nplt.subplots(figsize=(15,17))\nsns.heatmap(corr, square=True, annot=True, cmap='coolwarm')","e573c472":"corr[corr['SalePrice']>0.4].index","dfbdb890":"corr[corr['SalePrice'] < 0.3].index","f847c4b2":"col=['MSSubClass', 'LotArea', 'OverallCond', 'BsmtFinSF2', 'BsmtUnfSF',\n     'LowQualFinSF', 'BsmtFullBath', 'BsmtHalfBath', 'HalfBath',\n     'BedroomAbvGr', 'KitchenAbvGr', 'EnclosedPorch', '3SsnPorch',\n     'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold']","af223d36":"# Drop uncorrelated variables\ndf=df.drop(col, axis=1)","97cb7cc6":"#convert categorical variable into dummy\nfeature = pd.get_dummies(df).reset_index(drop=True)\nfeature.head()","03d67f06":"X_train=feature[0:1460]\nX_test=feature[1460:]\ny=data[['SalePrice']]","e7260654":"print('x_train shape', X_train.shape)\nX_train","32bdbea2":"print(X_test.shape)\nX_test.head()","7be9c652":"ordered_rank_feature=SelectKBest(score_func=chi2)\nordered_feature=ordered_rank_feature.fit(X_train,y)","722a3c07":"rank_scores=pd.DataFrame(ordered_feature.scores_, columns=['Scores'])\ncolumns=pd.DataFrame(X_train.columns)\nfeature_rank=pd.concat([columns, rank_scores], axis=1)\nfeature_rank.columns=['Feature', 'Scores']","031c1162":"# print the top 25 best feature  \nfeature_rank.nlargest(15, 'Scores')","cae790f9":"feature_rank.nsmallest(20, 'Scores')","6ab807cf":"from sklearn.ensemble import ExtraTreesClassifier","fdd7b207":"Tree_model = ExtraTreesClassifier()\nTree_model.fit(X_train,y)\ntree_feat_importances = pd.Series(Tree_model.feature_importances_, index=X_train.columns)","a333ec8b":"# plot the top 25 important feature\nplt.figure(figsize=(10, 17))\ntree_feat_importances.nlargest(15).plot(kind='barh')\n","e36fca84":"tree_feat_importances.nlargest(30)","7282d7d0":"x_tra,x_tes,y_tra,y_tes=train_test_split(X_train, y, test_size=0.3, random_state=101)","1b90aa10":"lm = LinearRegression()\nlm.fit(x_tra,y_tra)\nprint(lm)\n\npredictions = lm.predict(x_tes)\npredictions= predictions.reshape(-1,1)\nfrom sklearn import metrics\nprint('MAE:', metrics.mean_absolute_error(y_tes, predictions))\nprint('MSE:', metrics.mean_squared_error(y_tes, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_tes, predictions)))","ee689d44":"from xgboost import XGBRegressor\nXGB = XGBRegressor(max_depth=3,learning_rate=0.1,n_estimators=1000,reg_alpha=0.001,reg_lambda=0.000001,n_jobs=-1,min_child_weight=3)\nxgb=XGB.fit(x_tra,y_tra)\nxgb","aedd8329":"print (\"Training score:\",XGB.score(x_tra,y_tra),\"Test Score:\",XGB.score(x_tes,y_tes))","c593106c":"XGB_predict=xgb.predict(X_test)\nprdi=pd.DataFrame({'SalePrice':XGB_predict})\nsubmission=pd.concat([test_id,prdi],axis=1)\nsubmission.to_csv('submission.csv', index=False)\n","3b76a976":"# When GarageArea and Number of GarageCars  is incressing house price also incressing ","5a88f849":"Mostly 50-100 feet distance are there to connect the street from the house. ","4587b074":"House having 2 car parking garage is more ","4594047c":"These variable having a missing values","6a3a30e9":"Skewness is asymmetry in a statistical distribution, in which the curve appears distorted or skewed either to the positive or to the nagative skewness. Skewness can be quantified to define the extent to which a distribution differs from a normal distribution.\n\n    * Perfect normal distribution is mean & mode is equal(mean = mode)\n    * When a distribution is skewed to the right and the mean is greater than the mode. This situation is also   called positive skewness (mean > mode)\n    * When a distribution is skwed to the left and the mean is less than the mode. This situation is also called nagative skewness( mean < mode )","9937231d":"These variable  haveing veryweek relationship with SalesPrice, we gonna remove the variable from the model","e0a046d9":"# Bivariate Analysis","ce1f3bd6":"categorical variables are filled by most frequent values ","17907722":"based on number of rooms house price is incressing ","63309d02":"# Univariate Analysis","bdcfd063":"MiscVal,PoolArea,LotArea,3SsnPorch,LowQualFinSF \nKitchenAbvGr,BsmtFinSF2,ScreenPorch,BsmtHalfBath,EnclosedPorch\nMasVnrArea,LotFrontage,OpenPorchSF \nthese variables are vary large skewed variables.\n ","c63cc027":"The plot showing incressing trend, when the floor square feet incressing also incressing a Saleprice.\n","03a2532d":"#These variables having moderate and strong relationship with SalePrice","36f15fc7":"Here is categorical variables are have more missing value ","d5fcae17":"Here we have 5 categorical variable with more than 40% of missing data so we're going to remove them","7d2774d9":"1Stroy style residence are more the other style residence.","6a59909d":"#Please upvote if you like it!","2cd667b3":"The state of our brains\nOur brains  value visuals over any other type of information.\n\n* 90% of the information transmitted to the brain is visual \n\n* The human brain can process an image in just 13 milliseconds\n\n* 50% of the brain is active in visual processing \n\n* Human brains process visuals 60,000 times faster than they do text \n\n* 93% of communication is nonverbal \n\nSo visuals are both easier to understand.\nIn short, the human brain wasn\u2019t designed to translate binary code or quickly digest written information. Data visualizations play to our brains\u2019 strengths. They allow for more efficient transfer of information within your organization which will serve to make your business more efficient in general\n","f04091bb":"Mostly 2 and 3 bedrooms houses.","61e3a36d":"# Load data set","a803787e":"# Numarical missing values","5d8899ff":" # 1. Import library","d53bbd9a":"Most of the home sold out in 100000 to 200000 dollars","bbfbd600":" # 4. Model Buildling and Prediction","ec18f01f":"# Missing value","328335e8":"# 3. Feature Selection","8c693d5e":"# Feature Importance","da1a5b0c":"On this example, when there is no correlation between 2 variables (when correlation is 0 or near 0) the color is gray. The darkest red means there is a perfect positive correlation, while the darkest blue means there is a perfect negative correlation.","bfc32cf8":"# Univariate Selection","649df5e2":"Every year house price is increasing ","746e65cb":"It is a good practice to understand the data first and try to gather as many insights from it. EDA is all about making sense of data in hand,before getting them dirty with it.\n\n\n**Exploratory Data Analysis refers to the critical process of performing initial investigations on data so as to discover patterns,to spot anomalies,to test hypothesis and to check assumptions with the help of summary statistics and graphical representations.******","81a5d6b4":"1 kitchen very less 2 kitchen house and more bedrooms house","611dd46f":"High number of house having excellent heating quality.","560038ec":"# \u2018A picture tells a thousand words\u2019 said Frederick R. Barnard in 1921.","c6d249e6":"# handling missing value","7fdd14cc":"Some people expect garden with basement walls, some people won't expect. Here is mose of house won't have basement walls.\n\nless number of house having good basement walls.","0de3a21c":"we going to fill the numaric value","e3a835a4":"# 2. EDA","c5b32cd6":"# Skewness","5af76e4e":"\n\n# Descriptive statistics","31140ee4":"then fill out the remaing missing categorical varible","a34128bc":"Statistical tests can be used to select those features that have the strongest relationship with the output variable."}}