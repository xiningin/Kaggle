{"cell_type":{"609291cd":"code","0d93921d":"code","b5d6fd70":"code","e0d70de8":"code","d09f77d7":"code","cb76e03f":"code","8bf7c6be":"code","3d0ebdc3":"code","e84d80c4":"code","e386fdcd":"code","dcaeea11":"code","52dca3cd":"code","6fc3481e":"code","8e6ed0cc":"code","13ead028":"code","38bbf26e":"code","0b8b1b39":"code","a3f40b06":"code","1fbf2850":"code","29c56c76":"code","c80843b3":"code","c7af2cd5":"code","787cdb94":"code","2188f0f5":"code","a8c7c809":"code","bdaa1666":"code","0875cc15":"code","286208e1":"code","1d564c4b":"code","04dc0c69":"code","ae6f0a42":"code","9af29d9f":"markdown","fc6698bd":"markdown"},"source":{"609291cd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras import layers,models\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras import regularizers\nfrom sklearn.utils import shuffle\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.optimizers import Adam,SGD","0d93921d":"cars_data=pd.read_csv('..\/input\/car-price-prediction\/CarPrice_Assignment.csv')\ncars_data.head()\ncars_data = cars_data.sample(frac=1)\ncars_data\n","b5d6fd70":"cars_data.corr()","e0d70de8":"plt.figure(figsize=(20,20))\nimport seaborn as sns\ng=sns.heatmap(cars_data.corr(),annot=True,cmap=\"Accent\")","d09f77d7":"cars_data.describe()","cb76e03f":"\ncars_data.drop(columns='car_ID',inplace=True)\ncars_data.drop(columns='CarName',inplace=True)\n# dataset.drop(columns='car_ID', inplace=True)\n# dataset.drop(columns='CarName', inplace=True)\ncars_data.head(10)\n\n","8bf7c6be":"cars_data = pd.get_dummies(cars_data, prefix=['fueltype','aspiration', 'doornumber','carbody', 'drivewheel',\n                                          'enginelocation', 'enginetype','cylindernumber', \n                                          'fuelsystem'])\n","3d0ebdc3":"cars_data\n","e84d80c4":"cars_data.columns","e386fdcd":"y=cars_data['price']","dcaeea11":"cars_data.drop(columns='price',inplace=True)","52dca3cd":"cars_data","6fc3481e":"cars_data.shape","8e6ed0cc":"X_train = cars_data[:104]\nY_train = y[:104]\nX_test = cars_data[104:165]\nY_test=y[104:165]\nX_val = cars_data[165:]\nY_val = y[165:]\n","13ead028":"X_train","38bbf26e":"mean=X_train.iloc[:,:14].mean(axis=0)\nX_train.iloc[:,:14]=X_train.iloc[:,:14]-mean\nstd=X_train.iloc[:,:14].std(axis=0)\nX_train.iloc[: , 0:14] = X_train.iloc[: , 0:14]\/std\nX_train","0b8b1b39":"val_mean = X_val.iloc[:, 0:14].mean(axis=0)\nval_std = X_val.iloc[:, 0:14].std(axis=0)\nX_val.iloc[:, 0:14] -= val_mean\nX_val.iloc[:, 0:14] \/= val_std","a3f40b06":"test_mean = X_test.iloc[:, 0:14].mean(axis=0)\ntest_std =  X_test.iloc[:, 0:14].std(axis=0)\nX_test.iloc[:, 0:14] -= test_mean\nX_test.iloc[:, 0:14] \/= test_std\nX_test","1fbf2850":"X_train.shape","29c56c76":"X_test.shape","c80843b3":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import regularizers\n","c7af2cd5":"model=Sequential()\n# model.add(layers.Dense(16,activation='relu',input_shape=(X_train.shape[1],)))\n# model.add(layers.Dense(14,activation='relu'))\n# model.add(layers.Dense(8,activation='relu'))\n# model.add(layers.Dense(1))","787cdb94":"# model.compile(optimizer='rmsprop', loss='mse', metrics='mae')","2188f0f5":"# history=model.fit(X_train,Y_train,epochs=300,validation_data=(X_val, Y_val))","a8c7c809":"train_mae=history.history['mae']\nval_mae=history.history['val_mae']\n","bdaa1666":"\n# epochs=range(0,300)\n# plt.plot(epochs,train_mae,'r')\n# plt.plot(epochs,val_mae,'g')\n# plt.xlabel('MAE')\n# plt.ylabel('EPOCHES')\n","0875cc15":"model.add(layers.Dense(16, activation='relu', kernel_regularizer =regularizers.l2(0.02),   input_shape=(X_train.shape[1],)))\nmodel.add(layers.Dense(14, activation='relu', kernel_regularizer =regularizers.l2(0.02)))\nmodel.add(layers.Dense(8, activation='relu', kernel_regularizer =regularizers.l2(0.02)))\nmodel.add(layers.Dense(6, activation='relu', kernel_regularizer =regularizers.l2(0.002)))\nmodel.add(layers.Dense(1))","286208e1":"model.compile(optimizer='adam', loss='mse', metrics='mae')\nhistory = model.fit(X_train,Y_train, batch_size=16, epochs=200, validation_data=(X_val, Y_val))","1d564c4b":"epochs=range(0,200)\nplt.plot(epochs,train_mae,'r')\nplt.plot(epochs,val_mae,'g')\nplt.xlabel('MAE')\nplt.ylabel('EPOCHES')\n","04dc0c69":"epochs=range(0,200)\n\ntrain_loss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.plot(epochs, train_loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'g', label='Validation Loss')\nplt.title('Training and Validation loss ')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","ae6f0a42":"a=model.predict(X_test)\nprint(a[0])\nnp.array(Y_test)[0]","9af29d9f":"\n# Checking for relationships between Features\n","fc6698bd":"# ****importing Libraries****"}}