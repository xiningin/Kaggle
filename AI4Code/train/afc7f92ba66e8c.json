{"cell_type":{"b35dac73":"code","8f73d532":"code","9e318528":"code","237db866":"code","aac52a14":"code","558d4281":"code","a6555770":"code","be233020":"code","b9b1fbef":"code","e36b98c9":"code","f712974f":"code","fe1803e8":"code","89445c46":"code","20d392bf":"code","14d857ab":"code","204cfd4a":"code","f506ea4f":"code","c53660a1":"code","806f4298":"code","1fc5c813":"code","4ea745e5":"code","1f00a6a7":"code","4160703a":"code","6098c165":"code","bc679ecf":"code","0cb91748":"code","fd9eb203":"code","995fab0f":"code","a818ec2b":"code","1aa64e5a":"code","3136b5a4":"code","6ef2f72b":"code","98976f1a":"code","b44e55db":"code","f19b6403":"code","3571ffac":"code","7a27b3db":"code","b02ccb6e":"code","dce53fbf":"code","bb4cb233":"code","2a145a85":"code","3b6cab74":"code","8a1f8ffe":"code","901354f8":"code","3e59dfb5":"code","8e3af1e6":"code","d2d44461":"code","43df6deb":"code","c3b97150":"code","6395dc74":"code","9b68bb79":"code","caa1bc78":"code","90171c0e":"code","5c377784":"code","7b876666":"code","bc4acde0":"code","a753188f":"code","a6bb2256":"code","8eca2a27":"code","7aae6334":"code","6ff30298":"code","3b51c562":"code","d9074241":"code","b44741d2":"code","80b8cc3e":"code","a4fe4ad9":"markdown","2de83194":"markdown","6f78355c":"markdown","7966c82a":"markdown","56630b83":"markdown","174237f0":"markdown","c30b234f":"markdown","495395a2":"markdown","f8dc4c2c":"markdown","6867f746":"markdown","93eb75f3":"markdown","e7257ce0":"markdown"},"source":{"b35dac73":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","8f73d532":"df = pd.read_csv('..\/input\/customer-segmentation\/Train.csv')\ndf.head()","9e318528":"df.info()","237db866":"# Inspect Missing Value\n\nprint('Mising Value Count in Each Category:')\nprint(df.isna().sum())","aac52a14":"plt.subplots(figsize=(10,5))\nsns.heatmap(df.isnull(),cbar=False)\nplt.xlabel('Feature')\nplt.ylabel('Index')\nplt.title('Missing Value Visualization')\n\nplt.show()","558d4281":"# Visualize Target Label Distribution\n\nplt.subplots(figsize=(10,5))\nsns.countplot(df['Segmentation'].sort_values())\nplt.xlabel('Target Label')\nplt.ylabel('Count')\nplt.title('Target Label Comparison')\n\nplt.show()","a6555770":"# Customer Type Based On Gender\n\ngender_based = pd.pivot_table(df,values='ID',index=['Gender'],columns=['Segmentation'],aggfunc=np.count_nonzero)","be233020":"gender_based","b9b1fbef":"x = np.arange(len(gender_based.columns))\nwidth = 0.25\n\nfig,ax = plt.subplots(figsize=(10,5))\nfor i in range(len(gender_based)):\n    ax.bar(x+(i*width),gender_based.loc[gender_based.index[i]],width=width, label=gender_based.index[i])\n\nax.set_xticks(x+((len(gender_based)\/2-0.5)*width))\nax.set_xticklabels(gender_based.columns)\n\nplt.title('Consumer Type Based On Gender')\nax.set_xlabel('Consumer Type')\nax.set_ylabel('Count')\n\nplt.legend(loc='best',frameon=True)\nplt.show()","e36b98c9":"# Customer Type Based On Ever Married or not\n\nmarried_based = pd.pivot_table(df,values='ID',index=['Ever_Married'],columns=['Segmentation'],aggfunc=np.count_nonzero)","f712974f":"married_based","fe1803e8":"x = np.arange(len(married_based.columns))\nwidth = 0.25\n\nfig,ax = plt.subplots(figsize=(10,5))\nfor i in range(len(married_based)):\n    ax.bar(x+(i*width),married_based.loc[married_based.index[i]],width=width, label=married_based.index[i])\n\nax.set_xticks(x+((len(married_based)\/2-0.5)*width))\nax.set_xticklabels(married_based.columns)\n\nplt.title('Consumer Type Based On Ever Married?')\nax.set_xlabel('Consumer Type')\nax.set_ylabel('Count')\n\nplt.legend(loc='best',frameon=True)\nplt.show()","89445c46":"# Customer Type Based On Age\n\nage_based = pd.DataFrame(df.groupby('Segmentation')['Age'].mean())","20d392bf":"age_based","14d857ab":"fig,ax = plt.subplots(figsize=(10,5))\nax.bar(age_based.index,age_based['Age'],width=0.5)\n\nplt.title('Consumer Type Based On Age')\nax.set_xlabel('Consumer Type')\nax.set_ylabel('Age Average')\nplt.show()","204cfd4a":"# Customer Type Based On Have Been Graduated or not\n\ngrad_based = pd.pivot_table(df,values='ID',index=['Graduated'],columns=['Segmentation'],aggfunc=np.count_nonzero)","f506ea4f":"grad_based","c53660a1":"x = np.arange(len(grad_based.columns))\nwidth = 0.25\n\nfig,ax = plt.subplots(figsize=(10,5))\nfor i in range(len(grad_based)):\n    ax.bar(x+(i*width),grad_based.loc[grad_based.index[i]],width=width, label=grad_based.index[i])\n\nax.set_xticks(x+((len(grad_based)\/2-0.5)*width))\nax.set_xticklabels(grad_based.columns)\n\nplt.title('Consumer Type Based On Have Graduated?')\nax.set_xlabel('Consumer Type')\nax.set_ylabel('Count')\n\nplt.legend(loc='best',frameon=True)\nplt.show()","806f4298":"# Customer Type Based On Profession\n\nprof_based = pd.pivot_table(df,values='ID',index=['Profession'],columns=['Segmentation'],aggfunc=np.count_nonzero)","1fc5c813":"prof_based","4ea745e5":"x = np.arange(len(prof_based.columns))\nwidth = 0.1\n\nfig,ax = plt.subplots(figsize=(10,5))\nfor i in range(len(prof_based)):\n    ax.bar(x+(i*width),prof_based.loc[prof_based.index[i]],width=width, label=prof_based.index[i])\n\nax.set_xticks(x+((len(prof_based)\/2-0.5)*width))\nax.set_xticklabels(prof_based.columns)\n\nplt.title('Consumer Type Based On Profession')\nax.set_xlabel('Consumer Type')\nax.set_ylabel('Count')\n\nplt.legend(loc='best',bbox_to_anchor=(0.92,0.40,0.3,0.6),frameon=True)\nplt.show()","1f00a6a7":"# Customer Type Based On Work Experience\n\nworkexp_based = pd.DataFrame(df.groupby('Segmentation')['Work_Experience'].mean())","4160703a":"workexp_based","6098c165":"fig,ax = plt.subplots(figsize=(10,5))\nax.bar(workexp_based.index,workexp_based['Work_Experience'],width=0.5)\n\nplt.title('Consumer Type Based On Work Experience')\nax.set_xlabel('Consumer Type')\nax.set_ylabel('Work Experience Average')\nplt.show()","bc679ecf":"# Customer Type Based On Spending Score\n\nspend_based = pd.pivot_table(df,values='ID',index=['Spending_Score'],columns=['Segmentation'],aggfunc=np.count_nonzero)","0cb91748":"spend_based.sort_values(by='A',ascending=False,inplace=True)","fd9eb203":"spend_based","995fab0f":"x = np.arange(len(spend_based.columns))\nwidth = 0.2\n\nfig,ax = plt.subplots(figsize=(10,5))\nfor i in range(len(spend_based)):\n    ax.bar(x+(i*width),spend_based.loc[spend_based.index[i]],width=width, label=spend_based.index[i])\n\nax.set_xticks(x+((len(spend_based)\/2-0.5)*width))\nax.set_xticklabels(spend_based.columns)\n\nplt.title('Consumer Type Based On Spending Score')\nax.set_xlabel('Consumer Type')\nax.set_ylabel('Count')\n\nplt.legend(loc='best',frameon=True)\nplt.show()","a818ec2b":"# Customer Type Based On Family Size\n\nfamsize_based = pd.DataFrame(df.groupby('Segmentation')['Family_Size'].agg(pd.Series.mode))","1aa64e5a":"famsize_based","3136b5a4":"fig,ax = plt.subplots(figsize=(10,5))\nax.bar(famsize_based.index,famsize_based['Family_Size'],width=0.5)\n\nplt.title('Consumer Type Based On Family Size')\nax.set_xlabel('Consumer Type')\nax.set_ylabel('Family Size Most Frequent')\nplt.show()","6ef2f72b":"# Customer Type Based On Var 1\n\nvar_based = pd.pivot_table(df,values='ID',index=['Var_1'],columns=['Segmentation'],aggfunc=np.count_nonzero)","98976f1a":"var_based","b44e55db":"x = np.arange(len(var_based.columns))\nwidth = 0.1\n\nfig,ax = plt.subplots(figsize=(10,5))\nfor i in range(len(var_based)):\n    ax.bar(x+(i*width),var_based.loc[var_based.index[i]],width=width, label=var_based.index[i])\n\nax.set_xticks(x+((len(var_based)\/2-0.5)*width))\nax.set_xticklabels(var_based.columns)\n\nplt.title('Consumer Type Based On Var 1')\nax.set_xlabel('Consumer Type')\nax.set_ylabel('Count')\n\nplt.legend(loc='best',bbox_to_anchor=(0.84,0.42,0.3,0.6),frameon=True)\nplt.show()","f19b6403":"from sklearn.preprocessing import OrdinalEncoder, OneHotEncoder, StandardScaler, PowerTransformer, PolynomialFeatures\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer","3571ffac":"def var_code(x):\n    y = x.str.split(\"_\",expand=True)[1].astype('float64',errors='ignore')\n    return y","7a27b3db":"df['Var_1'] = var_code(df['Var_1'])","b02ccb6e":"def null_drop(df,null_col_drop):\n    df = df.dropna(subset=null_col_drop).reset_index(drop=True)\n    return df","dce53fbf":"null_col_drop = ['Ever_Married','Graduated','Profession','Var_1']","bb4cb233":"df = null_drop(df,null_col_drop)","2a145a85":"target_enc = OrdinalEncoder([\n        ['A', 'B',  'C', 'D']])","3b6cab74":"def labelencoder(df,target_column):\n    target_enc.fit(df[target_column])\n    df[target_column] = target_enc.transform(df[target_column])\n    return df","8a1f8ffe":"target_column = ['Segmentation']","901354f8":"df = labelencoder(df,target_column)","3e59dfb5":"df.head()","8e3af1e6":"from sklearn.model_selection import train_test_split","d2d44461":"X = df.drop(columns=['ID','Segmentation'])\ny = df.Segmentation\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,stratify=y,random_state=42)\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","43df6deb":"X_train.columns","c3b97150":"cat_ord_pipe = Pipeline([\n    ('encoder',OrdinalEncoder()),\n])\n\ncat_one_pipe = Pipeline([\n    ('encoder',OneHotEncoder())\n])\n\nnum_pipe = Pipeline([\n    ('imputer',SimpleImputer(strategy='median')),\n])","6395dc74":"prepro = ColumnTransformer([\n    ('numeric',num_pipe,['Age','Work_Experience','Family_Size']),\n    ('categoric_ord',cat_ord_pipe,['Gender','Ever_Married','Graduated','Var_1','Profession','Spending_Score']),\n])","9b68bb79":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier","caa1bc78":"pipeline = Pipeline([\n    ('prepro',prepro),\n    ('algo',RandomForestClassifier(n_jobs=-1,random_state=42))\n])","90171c0e":"param_rf = {\n    'algo__n_estimators':[200],\n    'algo__max_depth':[6],\n    'algo__max_features':[0.5],\n    'algo__min_samples_leaf':[63],\n    'algo__class_weight':[{0:0.34,\n                           1:0.48,\n                           2:0.39,\n                           3:0.2}]\n}","5c377784":"model = GridSearchCV(pipeline,param_rf,cv=5,n_jobs=-1,verbose=1)\nmodel.fit(X_train,y_train)\n\nprint(model.best_params_)\nprint(\"Train data accuracy score: \", model.score(X_train,y_train))\nprint(\"Test data accuracy score: \", model.score(X_test,y_test))","7b876666":"df_test = pd.read_csv('..\/input\/customer-segmentation\/Test.csv')\ndf_test.head()","bc4acde0":"df_test['Var_1'] = var_code(df_test['Var_1'])","a753188f":"df_test = null_drop(df_test,null_col_drop)","a6bb2256":"df_test = labelencoder(df_test,target_column)","8eca2a27":"df_test = df.drop(columns=['ID','Segmentation'])\ny_df_test = df.Segmentation","7aae6334":"from sklearn.metrics import plot_confusion_matrix, classification_report","6ff30298":"y_test_pred = model.predict(df_test)","3b51c562":"y_test_proba = model.predict_proba(df_test)\npd.DataFrame(y_test_proba)","d9074241":"print(\"Test data prediction accuracy score: \", model.score(df_test,y_df_test))","b44741d2":"# Classification Report\n\nprint(classification_report(y_test_pred,y_df_test))","80b8cc3e":"# Confusion Matrix\n\nfig,ax = plt.subplots(figsize=(10,5))\nplot_confusion_matrix(model,df_test,y_df_test,cmap=plt.cm.Blues,normalize='true',ax=ax)\nax.set_xlabel('Predicted')\nax.set_ylabel('Actual')\nax.set_title('Confusion Matrix (Normalized)')","a4fe4ad9":"# Modeling","2de83194":"### Missing Value Treatment in Categorical Columns","6f78355c":"## Preprocessing ","7966c82a":"### Extract Var 1 Code Number","56630b83":"### Dataset Splitting ","174237f0":"# Evaluation","c30b234f":"# Prediction","495395a2":"# Import Data","f8dc4c2c":"### Pipeline Building","6867f746":"# Data Preparation","93eb75f3":"## Exploratory Data Analysis ","e7257ce0":"### Target Encoding "}}