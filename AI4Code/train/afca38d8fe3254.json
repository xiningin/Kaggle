{"cell_type":{"75e81595":"code","7f162953":"code","919c1957":"code","2e79703c":"code","3dd91b31":"code","3d45d8e2":"code","df6b03df":"code","3600bb70":"code","2305abc7":"code","2018baa7":"code","999687be":"code","c3c2e4d0":"code","ece88783":"code","f30ada02":"code","40953b90":"code","694ab655":"code","b34c6bc1":"code","a4b15d99":"code","884b922a":"code","3e039040":"code","ace12755":"code","0c712c93":"code","39a5c54c":"code","e13f8053":"code","20f4ffa8":"code","69e9e14f":"code","e7bdccb0":"code","2d4c451d":"code","81b9deb5":"code","049fe3a7":"code","d31a491f":"code","5d88ffc5":"code","35554202":"code","5930fa1d":"markdown","abbd889c":"markdown","6836fcb9":"markdown","ab91f5be":"markdown","e5d365e7":"markdown"},"source":{"75e81595":"import numpy as np\nimport pylab as pl\nimport pandas as pd\nimport matplotlib.pyplot as plt \n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.utils import shuffle\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7f162953":"train = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-3\/train.csv\")\ntest = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-3\/test.csv\")","919c1957":"train.info()\ntrain[0:10]","2e79703c":"fig = plt.figure(figsize=(16,8))\nax = fig.add_subplot(111)\ntrain.groupby('Date').mean().sort_values(by='ConfirmedCases', ascending=False)['ConfirmedCases'].plot('bar', color='r',width=0.3,title='Date Confirmed Cases', fontsize=10)\nplt.xticks(rotation = 90)\nplt.ylabel('Date')\nax.title.set_fontsize(30)\nax.xaxis.label.set_fontsize(10)\nax.yaxis.label.set_fontsize(10)\nprint(train.groupby('Date').mean().sort_values(by='ConfirmedCases', ascending=False)['ConfirmedCases'][[1,2]])\nprint(train.groupby('Date').mean().sort_values(by='ConfirmedCases', ascending=False)['ConfirmedCases'][[4,5,6]])","3dd91b31":"train = train[['Country_Region','Date','ConfirmedCases','Fatalities']]\ntrain.head()","3d45d8e2":"#Country_Region top 30\ntrain.Country_Region.value_counts()[0:30].plot(kind='bar')\nplt.show()","df6b03df":"fig = plt.figure(figsize=(16,8))\nax = fig.add_subplot(111)\ntrain.groupby('Country_Region').mean().sort_values(by='ConfirmedCases', ascending=False)['ConfirmedCases'].plot('bar', color='r',width=0.3,title='Country Region Confirmed Cases', fontsize=10)\nplt.xticks(rotation = 90)\nplt.ylabel('Confirmed Cases')\nax.title.set_fontsize(30)\nax.xaxis.label.set_fontsize(10)\nax.yaxis.label.set_fontsize(10)\nprint(train.groupby('Country_Region').mean().sort_values(by='ConfirmedCases', ascending=False)['ConfirmedCases'][[1,2]])\nprint(train.groupby('Country_Region').mean().sort_values(by='ConfirmedCases', ascending=False)['ConfirmedCases'][[4,5,6]])","3600bb70":"fig = plt.figure(figsize=(16,8))\nax = fig.add_subplot(111)\ntrain.groupby('Country_Region').mean().sort_values(by='Fatalities', ascending=False)['Fatalities'].plot('bar', color='r',width=0.3,title='Country Region Fatalities', fontsize=8)\nplt.xticks(rotation = 90)\nplt.ylabel('Confirmed Cases')\nax.title.set_fontsize(30)\nax.xaxis.label.set_fontsize(10)\nax.yaxis.label.set_fontsize(10)\nprint(train.groupby('Country_Region').mean().sort_values(by='Fatalities', ascending=False)['Fatalities'][[1,2]])\nprint(train.groupby('Country_Region').mean().sort_values(by='Fatalities', ascending=False)['Fatalities'][[4,5,6]])","2305abc7":"print(\"Any missing sample in training set:\",train.isnull().values.any())\nprint(\"Any missing sample in test set:\",test.isnull().values.any(), \"\\n\")","2018baa7":"#US\nConfirmedCases_date_US = train[train['Country_Region']=='US'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_US = train[train['Country_Region']=='US'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_US = ConfirmedCases_date_US.join(fatalities_date_US)\n\n\n#China\nConfirmedCases_date_China = train[train['Country_Region']=='China'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_China = train[train['Country_Region']=='China'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_China = ConfirmedCases_date_China.join(fatalities_date_China)\n\n#Italy\nConfirmedCases_date_Italy = train[train['Country_Region']=='Italy'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_Italy = train[train['Country_Region']=='Italy'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Italy = ConfirmedCases_date_Italy.join(fatalities_date_Italy)\n\n#Australia\nConfirmedCases_date_Australia = train[train['Country_Region']=='Australia'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_Australia = train[train['Country_Region']=='Australia'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Australia = ConfirmedCases_date_Australia.join(fatalities_date_Australia)\n\n\n\nplt.figure(figsize=(15,10))\nplt.subplot(2, 2, 1)\ntotal_date_US.plot(ax=plt.gca(), title='US')\nplt.ylabel(\"Confirmed  cases\", size=13)\n\nplt.subplot(2, 2, 2)\ntotal_date_China.plot(ax=plt.gca(), title='China')\n\nplt.subplot(2, 2, 3)\ntotal_date_Italy.plot(ax=plt.gca(), title='Italy')\nplt.ylabel(\"Confirmed cases\", size=13)\n\nplt.subplot(2, 2, 4)\ntotal_date_Australia.plot(ax=plt.gca(), title='Australia')\n","999687be":"#Indonesia\nConfirmedCases_date_Indonesia = train[train['Country_Region']=='Indonesia'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_Indonesia = train[train['Country_Region']=='Indonesia'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Indonesia = ConfirmedCases_date_Indonesia.join(fatalities_date_Indonesia)\n\n\n#Malaysia\nConfirmedCases_date_Malaysia = train[train['Country_Region']=='Malaysia'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_Malaysia = train[train['Country_Region']=='Malaysia'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Malaysia = ConfirmedCases_date_Malaysia.join(fatalities_date_Malaysia)\n\n#Thailand\nConfirmedCases_date_Thailand = train[train['Country_Region']=='Thailand'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_Thailand = train[train['Country_Region']=='Thailand'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Thailand = ConfirmedCases_date_Thailand.join(fatalities_date_Thailand)\n\n#Singapore\nConfirmedCases_date_Singapore = train[train['Country_Region']=='Singapore'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_Singapore = train[train['Country_Region']=='Singapore'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Singapore = ConfirmedCases_date_Singapore.join(fatalities_date_Singapore)\n\n\n\nplt.figure(figsize=(15,10))\nplt.subplot(2, 2, 1)\ntotal_date_Indonesia.plot(ax=plt.gca(), title='Indonesia')\nplt.ylabel(\"Confirmed  cases\", size=13)\n\nplt.subplot(2, 2, 2)\ntotal_date_Malaysia.plot(ax=plt.gca(), title='Malaysia')\n\nplt.subplot(2, 2, 3)\ntotal_date_Thailand.plot(ax=plt.gca(), title='Thailand')\nplt.ylabel(\"Confirmed cases\", size=13)\n\nplt.subplot(2, 2, 4)\ntotal_date_Singapore.plot(ax=plt.gca(), title='Singapore')\n","c3c2e4d0":"#Vietnam\nConfirmedCases_date_Vietnam = train[train['Country_Region']=='Vietnam'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_Vietnam = train[train['Country_Region']=='Vietnam'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Vietnam = ConfirmedCases_date_Vietnam.join(fatalities_date_Vietnam)\n\n\n#Philippines\nConfirmedCases_date_Philippines = train[train['Country_Region']=='Philippines'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_Philippines = train[train['Country_Region']=='Philippines'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Philippines = ConfirmedCases_date_Philippines.join(fatalities_date_Philippines)\n\n#Cambodia\nConfirmedCases_date_Cambodia = train[train['Country_Region']=='Cambodia'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_Cambodia = train[train['Country_Region']=='Cambodia'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Cambodia = ConfirmedCases_date_Cambodia.join(fatalities_date_Cambodia)\n\n#Laos\nConfirmedCases_date_Laos = train[train['Country_Region']=='Laos'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_Laos = train[train['Country_Region']=='Laos'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Laos = ConfirmedCases_date_Laos.join(fatalities_date_Laos)\n\n\n\nplt.figure(figsize=(15,10))\nplt.subplot(2, 2, 1)\ntotal_date_Vietnam.plot(ax=plt.gca(), title='Vietnam')\nplt.ylabel(\"Confirmed  cases\", size=13)\n\nplt.subplot(2, 2, 2)\ntotal_date_Philippines.plot(ax=plt.gca(), title='Philippines')\n\nplt.subplot(2, 2, 3)\ntotal_date_Cambodia.plot(ax=plt.gca(), title='Cambodia')\nplt.ylabel(\"Confirmed cases\", size=13)\n\nplt.subplot(2, 2, 4)\ntotal_date_Laos.plot(ax=plt.gca(), title='Laos')\n\n","ece88783":"#Brunei\nConfirmedCases_date_Brunei = train[train['Country_Region']=='Brunei'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date_Brunei = train[train['Country_Region']=='Brunei'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Brunei = ConfirmedCases_date_Brunei.join(fatalities_date_Brunei)\n\n\n#Myanmar\n#ConfirmedCases_date_Myanmar = train[train['Country_Region']=='Myanmar'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\n#fatalities_date_Myanmar = train[train['Country_Region']=='Myanmar'].groupby(['Date']).agg({'Fatalities':['sum']})\n#total_date_Myanmar = ConfirmedCases_date_Myanmar.join(fatalities_date_Myanmar)\n\n\n\n\nplt.figure(figsize=(15,10))\nplt.subplot(2, 2, 1)\ntotal_date_Brunei.plot(ax=plt.gca(), title='Brunei')\nplt.ylabel(\"Confirmed  cases\", size=13)\n\n#plt.subplot(2, 2, 2)\n#total_date_Myanmar.plot(ax=plt.gca(), title='Myanmar')\n\n\n","f30ada02":"train['Date'] = pd.to_datetime(train['Date'])\ntest['Date'] = pd.to_datetime(test['Date'])\n","40953b90":"train.info()","694ab655":"train['Date'] = train['Date'].astype('int64')\ntest['Date'] = test['Date'].astype('int64')","b34c6bc1":"train.info()","a4b15d99":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndef FunLabelEncoder(df):\n    for c in df.columns:\n        if df.dtypes[c] == object:\n            le.fit(df[c].astype(str))\n            df[c] = le.transform(df[c].astype(str))\n    return df","884b922a":"train = FunLabelEncoder(train)\ntrain.info()\ntrain.iloc[235:300,:]","3e039040":"test = FunLabelEncoder(test)\ntest.info()\ntest.iloc[235:300,:]","ace12755":"#Frequency distribution of classes\"\ntrain_outcome = pd.crosstab(index=train[\"ConfirmedCases\"],  # Make a crosstab\n                              columns=\"count\")      # Name the count column\n\ntrain_outcome","0c712c93":"#Frequency distribution of classes\"\ntrain_outcome = pd.crosstab(index=train[\"Fatalities\"],  # Make a crosstab\n                              columns=\"count\")      # Name the count column\n\ntrain_outcome","39a5c54c":"#Select feature column names and target variable we are going to use for training\nfeatures= ['Date','Country_Region']\ntarget= 'ConfirmedCases'","e13f8053":"#This is input which our classifier will use as an input.\ntrain[features].head(10)","20f4ffa8":"#Display first 10 target variables\ntrain[target].head(100).values","69e9e14f":"from sklearn.naive_bayes import GaussianNB\n\n# We define the model\nnbcla = GaussianNB()\n\n# We train model\nnbcla.fit(train[features],train[target])","e7bdccb0":"#Make predictions using the features from the test data set\npredictions = nbcla.predict(test[features])\n\npredictions","2d4c451d":"#Select feature column names and target variable we are going to use for training\nfeatures1=['Date','Country_Region']\ntarget1 = 'Fatalities'","81b9deb5":"#This is input which our classifier will use as an input.\ntrain[features1].head(10)","049fe3a7":"from sklearn.naive_bayes import GaussianNB\n\n# We define the model\nnbcla = GaussianNB()\n\n# We train model\nnbcla.fit(train[features1],train[target1])","d31a491f":"#Make predictions using the features from the test data set\npredictions1 = nbcla.predict(test[features1])\n\nprint(predictions1[0:50])","5d88ffc5":"#Create a  DataFrame\nsubmission = pd.DataFrame({'ForecastId':test['ForecastId'],'ConfirmedCases':predictions,'Fatalities':predictions1})\n                        \n\n#Visualize the first 10 rows\nsubmission.head(250)","35554202":"#Convert DataFrame to a csv file that can be uploaded\n#This is saved in the same directory as your notebook\nfilename = 'submission.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","5930fa1d":"COVID-19 cases in US, China, Italy, Australia","abbd889c":"#Fatalities","6836fcb9":"COVID-19 cases  in ASEAN states","ab91f5be":"data transformation","e5d365e7":"#ConfirmedCases"}}