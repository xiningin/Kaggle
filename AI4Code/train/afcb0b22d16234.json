{"cell_type":{"902f740d":"code","f712d668":"code","372aca03":"code","d5e993ab":"code","e1f39667":"code","e9122b52":"code","b98414a7":"code","b394488e":"code","09435271":"code","4d7c6981":"code","2027cfa6":"code","59cf275b":"code","10d455c2":"code","bb035c9e":"code","191d7736":"code","f8e6610f":"code","80947171":"code","efa5cc16":"code","3a44cb93":"code","86f26241":"code","718c8116":"code","d62bc58b":"code","15bd57e1":"code","0192b093":"code","8b1554c1":"code","0edfc811":"code","002b25ae":"code","d85fa10e":"code","45e16241":"code","27d7cea8":"code","de1c3fdf":"code","15d1ef9e":"code","c5fbb339":"code","2a18e355":"code","d789e17b":"code","e8d5f067":"code","23300c7b":"code","186eeddb":"code","d342641e":"code","c92918a7":"code","34426dc2":"code","0867dc1d":"code","c8030f07":"code","e2d2a1ec":"code","439800fb":"code","690c855c":"code","9da1d6f3":"code","3e4b7b44":"code","fa090586":"code","f2643bec":"code","0e9d0681":"code","53dea6ea":"code","61240b20":"code","206d9f87":"code","42526260":"code","e248bc57":"code","582028f6":"code","0df06468":"code","c1d65521":"code","6a3485c1":"code","975f1fc1":"code","841b50ca":"code","6a8d4e64":"code","9ac99591":"code","333163b1":"code","71f8ea32":"code","763126e5":"code","cc8f895a":"code","1502dff6":"code","fda08dd6":"code","2148e650":"code","fdbb16ed":"code","d03f338f":"code","f4f8171b":"code","f85e2d48":"code","eb30db77":"code","16ec9698":"code","7ef9ae18":"code","78627fc5":"code","65b4aaa1":"code","fc8209b3":"code","77163a88":"code","f57dc65c":"code","d1424f5b":"code","283aa324":"code","69f6023a":"code","04589fec":"code","b99c188c":"code","47b71c42":"code","ccc835ef":"markdown","c836fed9":"markdown","4e885976":"markdown","20e913f9":"markdown","3fbdd00d":"markdown","d29f5130":"markdown","4aed0b3e":"markdown","efed2a97":"markdown","f1e26d22":"markdown","5412e147":"markdown","f4d2952f":"markdown","52742d5c":"markdown","0eabf612":"markdown","75f1b098":"markdown","f50d4677":"markdown","9bde6868":"markdown","3ecaed1c":"markdown","fa751dfe":"markdown","1d6f0825":"markdown","3282d837":"markdown","036a9575":"markdown","b75e012b":"markdown","f131e6b3":"markdown","c2eec3b2":"markdown","565fb413":"markdown","70e9a965":"markdown","cee250f8":"markdown","cca75516":"markdown","2aeec654":"markdown","56bac095":"markdown","4a285cc8":"markdown","ed7625b5":"markdown","07778661":"markdown","98c1440d":"markdown","d5a715a8":"markdown","60586387":"markdown","27c457d0":"markdown","298c328a":"markdown","4ea609ec":"markdown","a61ce15a":"markdown","8d0114b3":"markdown","0a4d4359":"markdown","0bddf6bf":"markdown","055ac5e1":"markdown","5f6c1132":"markdown","5aff1011":"markdown","8437e06c":"markdown","746bcd33":"markdown","96c13347":"markdown","3ef56ea7":"markdown","52489d23":"markdown","516ee4ae":"markdown","9d589d9f":"markdown","bc28792d":"markdown","4bcd0e69":"markdown","8e213260":"markdown","4c67b97e":"markdown"},"source":{"902f740d":"import os\nimport numpy as np\nimport pandas as pd\nimport sklearn.metrics as mtr\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.layers import Dense,Input,Flatten,concatenate,Dropout,Lambda,BatchNormalization,LeakyReLU,PReLU,ELU,ThresholdedReLU,Concatenate\nfrom keras.models import Model\nimport keras.backend as K\nfrom keras.callbacks import Callback\nfrom  keras.callbacks import EarlyStopping,ModelCheckpoint\nimport datetime\nimport warnings\nwarnings.filterwarnings('ignore')\n\nTRAIN_OFFLINE = False\n\npd.set_option('display.max_columns', 50)\npd.set_option('display.max_rows', 150)","f712d668":"if TRAIN_OFFLINE:\n    train = pd.read_csv('..\/input\/train.csv', dtype={'WindSpeed': 'object'})\nelse:\n    train = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', dtype={'WindSpeed': 'object'})","372aca03":"outcomes = train[['GameId','PlayId','Yards']].drop_duplicates()","d5e993ab":"def strtoseconds(txt):\n    txt = txt.split(':')\n    ans = int(txt[0])*60 + int(txt[1]) + int(txt[2])\/60\n    return ans\n\ndef strtofloat(x):\n    try:\n        return float(x)\n    except:\n        return -1\n\ndef map_weather(txt):\n    ans = 1\n    if pd.isna(txt):\n        return 0\n    if 'partly' in txt:\n        ans*=0.5\n    if 'climate controlled' in txt or 'indoor' in txt:\n        return ans*3\n    if 'sunny' in txt or 'sun' in txt:\n        return ans*2\n    if 'clear' in txt:\n        return ans\n    if 'cloudy' in txt:\n        return -ans\n    if 'rain' in txt or 'rainy' in txt:\n        return -2*ans\n    if 'snow' in txt:\n        return -3*ans\n    return 0\n\ndef OffensePersonnelSplit(x):\n    dic = {'DB' : 0, 'DL' : 0, 'LB' : 0, 'OL' : 0, 'QB' : 0, 'RB' : 0, 'TE' : 0, 'WR' : 0}\n    for xx in x.split(\",\"):\n        xxs = xx.split(\" \")\n        dic[xxs[-1]] = int(xxs[-2])\n    return dic\n\ndef DefensePersonnelSplit(x):\n    dic = {'DB' : 0, 'DL' : 0, 'LB' : 0, 'OL' : 0}\n    for xx in x.split(\",\"):\n        xxs = xx.split(\" \")\n        dic[xxs[-1]] = int(xxs[-2])\n    return dic\n\ndef orientation_to_cat(x):\n    x = np.clip(x, 0, 360 - 1)\n    try:\n        return str(int(x\/15))\n    except:\n        return \"nan\"\ndef preprocess(train):\n    ## GameClock\n    train['GameClock_sec'] = train['GameClock'].apply(strtoseconds)\n    train[\"GameClock_minute\"] = train[\"GameClock\"].apply(lambda x : x.split(\":\")[0]).astype(\"object\")\n\n    ## Height\n    train['PlayerHeight_dense'] = train['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))\n\n    ## Time\n    train['TimeHandoff'] = train['TimeHandoff'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n    train['TimeSnap'] = train['TimeSnap'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n\n    train['TimeDelta'] = train.apply(lambda row: (row['TimeHandoff'] - row['TimeSnap']).total_seconds(), axis=1)\n    train['PlayerBirthDate'] = train['PlayerBirthDate'].apply(lambda x: datetime.datetime.strptime(x, \"%m\/%d\/%Y\"))\n\n    ## Age\n    seconds_in_year = 60*60*24*365.25\n    train['PlayerAge'] = train.apply(lambda row: (row['TimeHandoff']-row['PlayerBirthDate']).total_seconds()\/seconds_in_year, axis=1)\n    train[\"PlayerAge_ob\"] = train['PlayerAge'].astype(np.int).astype(\"object\")\n\n    ## WindSpeed\n    train['WindSpeed_ob'] = train['WindSpeed'].apply(lambda x: x.lower().replace('mph', '').strip() if not pd.isna(x) else x)\n    train['WindSpeed_ob'] = train['WindSpeed_ob'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1]))\/2 if not pd.isna(x) and '-' in x else x)\n    train['WindSpeed_ob'] = train['WindSpeed_ob'].apply(lambda x: (int(x.split()[0])+int(x.split()[-1]))\/2 if not pd.isna(x) and type(x)!=float and 'gusts up to' in x else x)\n    train['WindSpeed_dense'] = train['WindSpeed_ob'].apply(strtofloat)\n\n    ## Weather\n    train['GameWeather_process'] = train['GameWeather'].str.lower()\n    train['GameWeather_process'] = train['GameWeather_process'].apply(lambda x: \"indoor\" if not pd.isna(x) and \"indoor\" in x else x)\n    train['GameWeather_process'] = train['GameWeather_process'].apply(lambda x: x.replace('coudy', 'cloudy').replace('clouidy', 'cloudy').replace('party', 'partly') if not pd.isna(x) else x)\n    train['GameWeather_process'] = train['GameWeather_process'].apply(lambda x: x.replace('clear and sunny', 'sunny and clear') if not pd.isna(x) else x)\n    train['GameWeather_process'] = train['GameWeather_process'].apply(lambda x: x.replace('skies', '').replace(\"mostly\", \"\").strip() if not pd.isna(x) else x)\n    train['GameWeather_dense'] = train['GameWeather_process'].apply(map_weather)\n\n    ## Rusher\n    train['IsRusher'] = (train['NflId'] == train['NflIdRusher'])\n    train['IsRusher_ob'] = (train['NflId'] == train['NflIdRusher']).astype(\"object\")\n    temp = train[train[\"IsRusher\"]][[\"Team\", \"PlayId\"]].rename(columns={\"Team\":\"RusherTeam\"})\n    train = train.merge(temp, on = \"PlayId\")\n    train[\"IsRusherTeam\"] = train[\"Team\"] == train[\"RusherTeam\"]\n\n    ## dense -> categorical\n    train[\"Quarter_ob\"] = train[\"Quarter\"].astype(\"object\")\n    train[\"Down_ob\"] = train[\"Down\"].astype(\"object\")\n    train[\"JerseyNumber_ob\"] = train[\"JerseyNumber\"].astype(\"object\")\n    train[\"YardLine_ob\"] = train[\"YardLine\"].astype(\"object\")\n    # train[\"DefendersInTheBox_ob\"] = train[\"DefendersInTheBox\"].astype(\"object\")\n    # train[\"Week_ob\"] = train[\"Week\"].astype(\"object\")\n    # train[\"TimeDelta_ob\"] = train[\"TimeDelta\"].astype(\"object\")\n\n\n    ## Orientation and Dir\n    train[\"Orientation_ob\"] = train[\"Orientation\"].apply(lambda x : orientation_to_cat(x)).astype(\"object\")\n    train[\"Dir_ob\"] = train[\"Dir\"].apply(lambda x : orientation_to_cat(x)).astype(\"object\")\n\n    train[\"Orientation_sin\"] = train[\"Orientation\"].apply(lambda x : np.sin(x\/360 * 2 * np.pi))\n    train[\"Orientation_cos\"] = train[\"Orientation\"].apply(lambda x : np.cos(x\/360 * 2 * np.pi))\n    train[\"Dir_sin\"] = train[\"Dir\"].apply(lambda x : np.sin(x\/360 * 2 * np.pi))\n    train[\"Dir_cos\"] = train[\"Dir\"].apply(lambda x : np.cos(x\/360 * 2 * np.pi))\n\n    ## diff Score\n    train[\"diffScoreBeforePlay\"] = train[\"HomeScoreBeforePlay\"] - train[\"VisitorScoreBeforePlay\"]\n    train[\"diffScoreBeforePlay_binary_ob\"] = (train[\"HomeScoreBeforePlay\"] > train[\"VisitorScoreBeforePlay\"]).astype(\"object\")\n\n    ## Turf\n    Turf = {'Field Turf':'Artificial', 'A-Turf Titan':'Artificial', 'Grass':'Natural', 'UBU Sports Speed S5-M':'Artificial', 'Artificial':'Artificial', 'DD GrassMaster':'Artificial', 'Natural Grass':'Natural', 'UBU Speed Series-S5-M':'Artificial', 'FieldTurf':'Artificial', 'FieldTurf 360':'Artificial', 'Natural grass':'Natural', 'grass':'Natural', 'Natural':'Natural', 'Artifical':'Artificial', 'FieldTurf360':'Artificial', 'Naturall Grass':'Natural', 'Field turf':'Artificial', 'SISGrass':'Artificial', 'Twenty-Four\/Seven Turf':'Artificial', 'natural grass':'Natural'} \n    train['Turf'] = train['Turf'].map(Turf)\n\n    ## OffensePersonnel\n    temp = train[\"OffensePersonnel\"].iloc[np.arange(0, len(train), 22)].apply(lambda x : pd.Series(OffensePersonnelSplit(x)))\n    temp.columns = [\"Offense\" + c for c in temp.columns]\n    temp[\"PlayId\"] = train[\"PlayId\"].iloc[np.arange(0, len(train), 22)]\n    train = train.merge(temp, on = \"PlayId\")\n\n    ## DefensePersonnel\n    temp = train[\"DefensePersonnel\"].iloc[np.arange(0, len(train), 22)].apply(lambda x : pd.Series(DefensePersonnelSplit(x)))\n    temp.columns = [\"Defense\" + c for c in temp.columns]\n    temp[\"PlayId\"] = train[\"PlayId\"].iloc[np.arange(0, len(train), 22)]\n    train = train.merge(temp, on = \"PlayId\")\n\n    ## sort\n    #train = train.sort_values(by = ['X']).sort_values(by = ['Dis']).sort_values(by=['PlayId', 'Team', 'IsRusher']).reset_index(drop = True)\n    train = train.sort_values(by = ['X']).sort_values(by = ['Dis']).sort_values(by=['PlayId', 'IsRusherTeam', 'IsRusher']).reset_index(drop = True)\n    return train","e1f39667":"def create_features(df, deploy=False):\n    def new_X(x_coordinate, play_direction):\n        if play_direction == 'left':\n            return 120.0 - x_coordinate\n        else:\n            return x_coordinate\n\n    def new_line(rush_team, field_position, yardline):\n        if rush_team == field_position:\n            # offense starting at X = 0 plus the 10 yard endzone plus the line of scrimmage\n            return 10.0 + yardline\n        else:\n            # half the field plus the yards between midfield and the line of scrimmage\n            return 60.0 + (50 - yardline)\n\n    def new_orientation(angle, play_direction):\n        if play_direction == 'left':\n            new_angle = 360.0 - angle\n            if new_angle == 360.0:\n                new_angle = 0.0\n            return new_angle\n        else:\n            return angle\n\n    def euclidean_distance(x1,y1,x2,y2):\n        x_diff = (x1-x2)**2\n        y_diff = (y1-y2)**2\n\n        return np.sqrt(x_diff + y_diff)\n\n    def back_direction(orientation):\n        if orientation > 180.0:\n            return 1\n        else:\n            return 0\n\n    def update_yardline(df):\n        new_yardline = df[df['NflId'] == df['NflIdRusher']]\n        new_yardline['YardLine'] = new_yardline[['PossessionTeam','FieldPosition','YardLine']].apply(lambda x: new_line(x[0],x[1],x[2]), axis=1)\n        new_yardline = new_yardline[['GameId','PlayId','YardLine']]\n\n        return new_yardline\n\n    def update_orientation(df, yardline):\n        df['X'] = df[['X','PlayDirection']].apply(lambda x: new_X(x[0],x[1]), axis=1)\n        df['Orientation'] = df[['Orientation','PlayDirection']].apply(lambda x: new_orientation(x[0],x[1]), axis=1)\n        df['Dir'] = df[['Dir','PlayDirection']].apply(lambda x: new_orientation(x[0],x[1]), axis=1)\n\n        df = df.drop('YardLine', axis=1)\n        df = pd.merge(df, yardline, on=['GameId','PlayId'], how='inner')\n\n        return df\n\n    def back_features(df):\n        carriers = df[df['NflId'] == df['NflIdRusher']][['GameId','PlayId','NflIdRusher','X','Y','Orientation','Dir','YardLine']]\n        carriers['back_from_scrimmage'] = carriers['YardLine'] - carriers['X']\n        carriers['back_oriented_down_field'] = carriers['Orientation'].apply(lambda x: back_direction(x))\n        carriers['back_moving_down_field'] = carriers['Dir'].apply(lambda x: back_direction(x))\n        carriers = carriers.rename(columns={'X':'back_X',\n                                            'Y':'back_Y'})\n        carriers = carriers[['GameId','PlayId','NflIdRusher','back_X','back_Y','back_from_scrimmage','back_oriented_down_field','back_moving_down_field']]\n\n        return carriers\n\n    def features_relative_to_back(df, carriers):\n        player_distance = df[['GameId','PlayId','NflId','X','Y']]\n        player_distance = pd.merge(player_distance, carriers, on=['GameId','PlayId'], how='inner')\n        player_distance = player_distance[player_distance['NflId'] != player_distance['NflIdRusher']]\n        player_distance['dist_to_back'] = player_distance[['X','Y','back_X','back_Y']].apply(lambda x: euclidean_distance(x[0],x[1],x[2],x[3]), axis=1)\n\n        player_distance = player_distance.groupby(['GameId','PlayId','back_from_scrimmage','back_oriented_down_field','back_moving_down_field'])\\\n                                         .agg({'dist_to_back':['min','max','mean','std']})\\\n                                         .reset_index()\n        player_distance.columns = ['GameId','PlayId','back_from_scrimmage','back_oriented_down_field','back_moving_down_field',\n                                   'min_dist','max_dist','mean_dist','std_dist']\n\n        return player_distance\n\n    def defense_features(df):\n        rusher = df[df['NflId'] == df['NflIdRusher']][['GameId','PlayId','Team','X','Y']]\n        rusher.columns = ['GameId','PlayId','RusherTeam','RusherX','RusherY']\n\n        defense = pd.merge(df,rusher,on=['GameId','PlayId'],how='inner')\n        defense = defense[defense['Team'] != defense['RusherTeam']][['GameId','PlayId','X','Y','RusherX','RusherY']]\n        defense['def_dist_to_back'] = defense[['X','Y','RusherX','RusherY']].apply(lambda x: euclidean_distance(x[0],x[1],x[2],x[3]), axis=1)\n\n        defense = defense.groupby(['GameId','PlayId'])\\\n                         .agg({'def_dist_to_back':['min','max','mean','std']})\\\n                         .reset_index()\n        defense.columns = ['GameId','PlayId','def_min_dist','def_max_dist','def_mean_dist','def_std_dist']\n\n        return defense\n    \n    def rusher_features(df):       \n        rusher = df[df['NflId'] == df['NflIdRusher']][['GameId','PlayId','Dir', 'S', 'A', 'X', 'Y']]\n        rusher.columns = ['GameId','PlayId', 'RusherDir', 'RusherS', 'RusherA', 'RusherX', 'RusherY']\n        \n        radian_angle = (90 - rusher['RusherDir']) * np.pi \/ 180.0\n        v_horizontal = np.abs(rusher['RusherS'] * np.cos(radian_angle))\n        v_vertical = np.abs(rusher['RusherS'] * np.sin(radian_angle)) \n        \n        rusher['v_horizontal'] = v_horizontal\n        rusher['v_vertical'] = v_vertical\n        \n        rusher.columns = ['GameId','PlayId', 'RusherDir', 'RusherS','RusherA','RusherX', 'RusherY','v_horizontal', 'v_vertical']\n        \n        return rusher\n    \n    def static_features(df):           \n        add_new_feas = []\n\n        ## Height\n        df['PlayerHeight_dense'] = df['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))\n        \n        add_new_feas.append('PlayerHeight_dense')\n\n        ## Time\n        df['TimeHandoff'] = df['TimeHandoff'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n        df['TimeSnap'] = df['TimeSnap'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n\n        df['TimeDelta'] = df.apply(lambda row: (row['TimeHandoff'] - row['TimeSnap']).total_seconds(), axis=1)\n        df['PlayerBirthDate'] =df['PlayerBirthDate'].apply(lambda x: datetime.datetime.strptime(x, \"%m\/%d\/%Y\"))\n\n        ## Age\n        seconds_in_year = 60*60*24*365.25\n        df['PlayerAge'] = df.apply(lambda row: (row['TimeHandoff']-row['PlayerBirthDate']).total_seconds()\/seconds_in_year, axis=1)\n        add_new_feas.append('PlayerAge')\n\n        ## WindSpeed\n        df['WindSpeed_ob'] = df['WindSpeed'].apply(lambda x: x.lower().replace('mph', '').strip() if not pd.isna(x) else x)\n        df['WindSpeed_ob'] = df['WindSpeed_ob'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1]))\/2 if not pd.isna(x) and '-' in x else x)\n        df['WindSpeed_ob'] = df['WindSpeed_ob'].apply(lambda x: (int(x.split()[0])+int(x.split()[-1]))\/2 if not pd.isna(x) and type(x)!=float and 'gusts up to' in x else x)\n        df['WindSpeed_dense'] = df['WindSpeed_ob'].apply(strtofloat)\n        add_new_feas.append('WindSpeed_dense')\n\n        ## Weather\n        df['GameWeather_process'] = df['GameWeather'].str.lower()\n        df['GameWeather_process'] = df['GameWeather_process'].apply(lambda x: \"indoor\" if not pd.isna(x) and \"indoor\" in x else x)\n        df['GameWeather_process'] = df['GameWeather_process'].apply(lambda x: x.replace('coudy', 'cloudy').replace('clouidy', 'cloudy').replace('party', 'partly') if not pd.isna(x) else x)\n        df['GameWeather_process'] = df['GameWeather_process'].apply(lambda x: x.replace('clear and sunny', 'sunny and clear') if not pd.isna(x) else x)\n        df['GameWeather_process'] = df['GameWeather_process'].apply(lambda x: x.replace('skies', '').replace(\"mostly\", \"\").strip() if not pd.isna(x) else x)\n        df['GameWeather_dense'] = df['GameWeather_process'].apply(map_weather)\n        add_new_feas.append('GameWeather_dense')\n\n        ## Orientation and Dir\n        df[\"Orientation_ob\"] = df[\"Orientation\"].apply(lambda x : orientation_to_cat(x)).astype(\"object\")\n        df[\"Dir_ob\"] = df[\"Dir\"].apply(lambda x : orientation_to_cat(x)).astype(\"object\")\n\n        df[\"Orientation_sin\"] = df[\"Orientation\"].apply(lambda x : np.sin(x\/360 * 2 * np.pi))\n        df[\"Orientation_cos\"] = df[\"Orientation\"].apply(lambda x : np.cos(x\/360 * 2 * np.pi))\n        df[\"Dir_sin\"] = df[\"Dir\"].apply(lambda x : np.sin(x\/360 * 2 * np.pi))\n        df[\"Dir_cos\"] = df[\"Dir\"].apply(lambda x : np.cos(x\/360 * 2 * np.pi))\n        add_new_feas.append(\"Dir_sin\")\n        add_new_feas.append(\"Dir_cos\")\n\n        ## diff Score\n        df[\"diffScoreBeforePlay\"] = df[\"HomeScoreBeforePlay\"] - df[\"VisitorScoreBeforePlay\"]\n        add_new_feas.append(\"diffScoreBeforePlay\")\n        \n        \n        static_features = df[df['NflId'] == df['NflIdRusher']][add_new_feas+['GameId','PlayId','X','Y','S','A','Dis','Orientation','Dir',\n                                                            'YardLine','Quarter','Down','Distance','DefendersInTheBox']].drop_duplicates()\n        static_features.fillna(-999,inplace=True)\n\n        return static_features\n\n\n    def combine_features(relative_to_back, defense, rushing, static, deploy=deploy):\n        df = pd.merge(relative_to_back,defense,on=['GameId','PlayId'],how='inner')\n        df = pd.merge(df,rushing,on=['GameId','PlayId'],how='inner')\n        df = pd.merge(df,static,on=['GameId','PlayId'],how='inner')\n\n        if not deploy:\n            df = pd.merge(df, outcomes, on=['GameId','PlayId'], how='inner')\n\n        return df\n    \n    yardline = update_yardline(df)\n    df = update_orientation(df, yardline)\n    back_feats = back_features(df)\n    rel_back = features_relative_to_back(df, back_feats)\n    def_feats = defense_features(df)\n    rush_feats = rusher_features(df)\n    static_feats = static_features(df)\n    basetable = combine_features(rel_back, def_feats, rush_feats, static_feats, deploy=deploy)\n    \n    return basetable","e9122b52":"%time train_basetable = create_features(train, False)","b98414a7":"X = train_basetable.copy()\nyards = X.Yards\n\ny = np.zeros((yards.shape[0], 199))\nfor idx, target in enumerate(list(yards)):\n    y[idx][99 + target] = 1\n\nX.drop(['GameId','PlayId','Yards'], axis=1, inplace=True)\nfeature_columns = X.columns.values","b394488e":"scaler = StandardScaler()\nX = scaler.fit_transform(X)\nprint(X.shape)","09435271":"from keras.layers import Dense,Input,Flatten,concatenate,Dropout,Lambda\nfrom keras.models import Model\nfrom keras.optimizers import Adam\nimport keras.backend as K\nimport re\nfrom keras.losses import binary_crossentropy\nfrom  keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau, Callback\nimport codecs\nfrom keras.utils import to_categorical\nfrom sklearn.metrics import f1_score\n\nclass CRPSCallback(Callback):\n    \n    def __init__(self,validation, predict_batch_size=20, include_on_batch=False):\n        super(CRPSCallback, self).__init__()\n        self.validation = validation\n        self.predict_batch_size = predict_batch_size\n        self.include_on_batch = include_on_batch\n        \n        print('validation shape',len(self.validation))\n\n    def on_batch_begin(self, batch, logs={}):\n        pass\n\n    def on_train_begin(self, logs={}):\n        if not ('CRPS_score_val' in self.params['metrics']):\n            self.params['metrics'].append('CRPS_score_val')\n\n    def on_batch_end(self, batch, logs={}):\n        if (self.include_on_batch):\n            logs['CRPS_score_val'] = float('-inf')\n\n    def on_epoch_end(self, epoch, logs={}):\n        logs['CRPS_score_val'] = float('-inf')\n            \n        if (self.validation):\n            X_valid, y_valid = self.validation[0], self.validation[1]\n            y_pred = self.model.predict(X_valid)\n            y_true = np.clip(np.cumsum(y_valid, axis=1), 0, 1)\n            y_pred = np.clip(np.cumsum(y_pred, axis=1), 0, 1)\n            val_s = ((y_true - y_pred) ** 2).sum(axis=1).sum(axis=0) \/ (199 * X_valid.shape[0])\n            val_s = np.round(val_s, 6)\n            logs['CRPS_score_val'] = val_s","4d7c6981":"# Calculate CRPS score\ndef crps_score(y_prediction, y_valid, shape=X.shape[0]):\n    y_true = np.clip(np.cumsum(y_valid, axis=1), 0, 1)\n    y_pred = np.clip(np.cumsum(y_prediction, axis=1), 0, 1)\n    val_s = ((y_true - y_pred) ** 2).sum(axis=1).sum(axis=0) \/ (199 * shape)\n    crps = np.round(val_s, 6)\n    \n    return crps","2027cfa6":"def get_nn(x_tr, y_tr, x_val, y_val, shape):\n    K.clear_session()\n    inp = Input(shape = (x_tr.shape[1],))\n    x = Dense(1277, input_dim=X.shape[1], activation='relu')(inp)\n    x = Dropout(0.33709)(x)\n    x = BatchNormalization()(x)\n    x = Dense(427, activation='relu')(x)\n    x = Dropout(0.85564)(x)\n    x = BatchNormalization()(x)\n    x = Dense(426, activation='relu')(x)\n    x = Dropout(0.65879)(x)\n    x = BatchNormalization()(x)\n    \n    out = Dense(199, activation='softmax')(x)\n    model = Model(inp,out)\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=[])\n    \n    es = EarlyStopping(monitor='CRPS_score_val', \n                       mode='min',\n                       restore_best_weights=True, \n                       verbose=1, \n                       patience=10)\n\n    mc = ModelCheckpoint('best_model.h5',monitor='CRPS_score_val',mode='min',\n                                   save_best_only=True, verbose=1, save_weights_only=True)\n    \n    bsz = 1024\n    steps = x_tr.shape[0]\/bsz\n\n    model.fit(x_tr, y_tr,callbacks=[CRPSCallback(validation = (x_val,y_val)),es,mc], epochs=100, batch_size=bsz,verbose=1)\n    model.load_weights(\"best_model.h5\")\n    \n    y_pred = model.predict(x_val)\n    y_valid = y_val\n    crps = crps_score(y_pred, y_valid, shape=shape)\n\n    return model,crps","59cf275b":"from sklearn.ensemble import RandomForestRegressor\n\ndef get_rf(x_tr, y_tr, x_val, y_val, shape):\n    model = RandomForestRegressor(bootstrap=False, max_features=0.43709, min_samples_leaf=19, \n                                  min_samples_split=11, n_estimators=63, n_jobs=-1, random_state=42)\n    model.fit(x_tr, y_tr)\n    \n    y_pred = model.predict(x_val)\n    y_valid = y_val\n    crps = crps_score(y_pred, y_valid, shape=shape)\n    \n    return model, crps","10d455c2":"from sklearn.model_selection import train_test_split, KFold\nimport time\n\nloop = 2\nfold = 5\n\noof_nn = np.zeros([loop, y.shape[0], y.shape[1]])\noof_rf = np.zeros([loop, y.shape[0], y.shape[1]])\n\nmodels_nn = []\ncrps_csv_nn = []\nmodels_rf = []\ncrps_csv_rf = []\n\nfeature_importance = np.zeros([loop, fold, X.shape[1]])\n\ns_time = time.time()\n\nfor k in range(loop):\n    kfold = KFold(fold, random_state = 42 + k, shuffle = True)\n    for k_fold, (tr_inds, val_inds) in enumerate(kfold.split(yards)):\n        print(\"-----------\")\n        print(f'Loop {k+1}\/{loop}' + f' Fold {k_fold+1}\/{fold}')\n        print(\"-----------\")\n        tr_x, tr_y = X[tr_inds], y[tr_inds]\n        val_x, val_y = X[val_inds], y[val_inds]\n        \n        # Train NN\n        nn, crps_nn = get_nn(tr_x, tr_y, val_x, val_y, shape=val_x.shape[0])\n        models_nn.append(nn)\n        print(\"the %d fold crps (NN) is %f\"%((k_fold+1), crps_nn))\n        crps_csv_nn.append(crps_nn)\n        \n        # Train RF\n        rf, crps_rf = get_rf(tr_x, tr_y, val_x, val_y, shape=val_x.shape[0])\n        models_rf.append(rf)\n        print(\"the %d fold crps (RF) is %f\"%((k_fold+1), crps_rf))\n        crps_csv_rf.append(crps_rf)\n        \n        # Feature Importance\n        feature_importance[k, k_fold, :] = rf.feature_importances_\n        \n        #Predict OOF\n        oof_nn[k, val_inds, :] = nn.predict(val_x)\n        oof_rf[k, val_inds, :] = rf.predict(val_x)","bb035c9e":"crps_oof_nn = []\ncrps_oof_rf = []\n\nfor k in range(loop):\n    crps_oof_nn.append(crps_score(oof_nn[k,...], y))\n    crps_oof_rf.append(crps_score(oof_rf[k,...], y))","191d7736":"print(\"mean crps (NeuralNetwork) is %f\"%np.mean(crps_csv_nn))\nprint(\"mean crps (RandomForest) is %f\"%np.mean(crps_csv_rf))","f8e6610f":"print(\"mean OOF crps (NeuralNetwork) is %f\"%np.mean(crps_oof_nn))\nprint(\"mean OOF crps (RandomForest) is %f\"%np.mean(crps_oof_rf))","80947171":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline\n\nfeature_importances = pd.DataFrame(np.mean(feature_importance, axis=0).T, columns=[[f'fold_{fold_n}' for fold_n in range(fold)]])\nfeature_importances['feature'] = feature_columns\nfeature_importances['average'] = feature_importances[[f'fold_{fold_n}' for fold_n in range(fold)]].mean(axis=1)\nfeature_importances.sort_values(by=('average',), ascending=False).head(10)","efa5cc16":"feature_importance_flatten = pd.DataFrame()\nfor i in range(len(feature_importances.columns)-2):\n    col = ['feature', feature_importances.columns.values[i][0]]\n    feature_importance_flatten = pd.concat([feature_importance_flatten, feature_importances[col].rename(columns={f'fold_{i}': 'importance'})], axis=0)\n\nplt.figure(figsize=(16, 16))\nsns.barplot(data=feature_importance_flatten.sort_values(by=('importance',), ascending=False), x=('importance',), y=('feature',))\nplt.title(f'Feature Importances over {loop} loops and {fold} folds')\nplt.show();","3a44cb93":"def weight_opt(oof_nn, oof_rf, y_true):\n    weight_nn = np.inf\n    best_crps = np.inf\n    \n    for i in np.arange(0, 1.01, 0.05):\n        crps_blend = np.zeros(oof_nn.shape[0])\n        for k in range(oof_nn.shape[0]):\n            crps_blend[k] = crps_score(i * oof_nn[k,...] + ((i-1) * oof_rf[k,...], y_true))\n        if np.mean(crps_blend) < best_crps:\n            best_crps = np.mean(crps_blend)\n            weight_nn = round(i, 2)\n            \n        print(str(round(i, 2)) + ' : mean crps (Blend) is ', round(np.mean(crps_blend), 6))\n        \n    print('-'*36)\n    print('Best weight for NN: ', weight_nn)\n    print('Best weight for RF: ', round(1-weight_nn, 2))\n    print('Best mean crps (Blend): ', round(best_crps, 6))\n    \n    return weight_nn, round(1-weight_nn, 2)","86f26241":"weight_nn, weight_rf = weight_opt(oof_nn, oof_rf, y)","718c8116":"def predict(x_te, models_nn, models_rf, weight_nn, weight_rf):\n    model_num_nn = len(models_nn)\n    model_num_rf = len(models_rf)\n    for k,m in enumerate(models_nn):\n        if k==0:\n            y_pred_nn = m.predict(x_te, batch_size=1024)\n            y_pred_rf = models_rf[k].predict(x_te)\n        else:\n            y_pred_nn += m.predict(x_te, batch_size=1024)\n            y_pred_rf += models_rf[k].predict(x_te)\n            \n    y_pred_nn = y_pred_nn \/ model_num_nn\n    y_pred_rf = y_pred_rf \/ model_num_rf\n    \n    return weight_nn * y_pred_nn + weight_rf * y_pred_rf","d62bc58b":"%%time\nif  TRAIN_OFFLINE==False:\n    from kaggle.competitions import nflrush\n    env = nflrush.make_env()\n    iter_test = env.iter_test()\n\n    for (test_df, sample_prediction_df) in iter_test:\n        basetable = create_features(test_df, deploy=True)\n        basetable.drop(['GameId','PlayId'], axis=1, inplace=True)\n        scaled_basetable = scaler.transform(basetable)\n\n        y_pred = predict(scaled_basetable)\n        y_pred = np.clip(np.cumsum(y_pred, axis=1), 0, 1).tolist()[0]\n\n        preds_df = pd.DataFrame(data=[y_pred], columns=sample_prediction_df.columns)\n        env.predict(preds_df)\n\n    env.write_submission_file()","15bd57e1":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib.patches as patches\nimport seaborn as sns \n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#import sparklines\nimport colorcet as cc\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom IPython.display import HTML\nfrom IPython.display import Image\nfrom IPython.display import display\nfrom IPython.core.display import display\nfrom IPython.core.display import HTML\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nfrom PIL import Image\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nimport scipy \nfrom scipy import constants\nimport math\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nimport colorcet as cc\nplt.style.use('seaborn') \ncolor_pal = [x['color'] for x in plt.rcParams['axes.prop_cycle']]\n##%config InlineBackend.figure_format = 'retina'   < - keep in case \n%config InlineBackend.figure_format = 'svg' \n#USE THIS in some form:\n# th_props = [('font-size', '13px'), ('background-color', 'white'), ('color', '#666666')]\n# td_props = [('font-size', '15px'), ('background-color', 'white')]\n#styles = [dict(selector=\"td\", props=td_props), dict(selector=\"th\", props=th_props)]\n# pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 500)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n###?sns.set_context('paper')  #Everything is smaller, use ? \nSMALL_SIZE = 8\nMEDIUM_SIZE = 10\nBIGGER_SIZE = 12\nplt.rc('font', size=SMALL_SIZE)          # controls default text sizes\nplt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title\nplt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels\nplt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\nplt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\nplt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize\nplt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title\n##This helps set size of all fontssns.set(font_scale=1.5)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~ B O K E H ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom bokeh.io import show\nfrom bokeh.io import push_notebook\nfrom bokeh.io import output_notebook\nfrom bokeh.io import output_file\nfrom bokeh.io import curdoc\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom bokeh.plotting import show                  \nfrom bokeh.plotting import figure                  \nfrom bokeh.plotting import output_notebook \nfrom bokeh.plotting import output_file\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.models import Circle\nfrom bokeh.models import Grid \nfrom bokeh.models import LinearAxis\nfrom bokeh.models import Plot\nfrom bokeh.models import Slider\nfrom bokeh.models import CategoricalColorMapper\nfrom bokeh.models import FactorRange\nfrom bokeh.models.tools import HoverTool\nfrom bokeh.models import FixedTicker\nfrom bokeh.models import PrintfTickFormatter\nfrom bokeh.models.glyphs import HBar\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom bokeh.core.properties import value\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom bokeh.palettes import Blues4\nfrom bokeh.palettes import Spectral5\nfrom bokeh.palettes import Blues8\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom bokeh.layouts import row\nfrom bokeh.layouts import column\nfrom bokeh.layouts import gridplot\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom bokeh.sampledata.perceptions import probly\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom bokeh.transform import factor_cmap\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ M L  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import KFold\nfrom sklearn.feature_selection import SelectFromModel\nimport gc, pickle, tqdm, os, datetime\n\n","0192b093":"#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Import raw data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndf = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\ngold = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\ndontbreak = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\ntrain = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\nfrom kaggle.competitions import nflrush\n\nkilled_columns=['xyz','etc']\ndef drop_these_columns(your_df,your_list):\n    #KILL KOLUMNS\n    your_df.drop(your_list,axis=1,inplace=True)\n    return(your_df)\nYRS = dontbreak[dontbreak.NflId==dontbreak.NflIdRusher].copy()\nYR1 = YRS[YRS.Season==2017]\nYR2 = YRS[YRS.Season==2018]\n","8b1554c1":"from bokeh.transform import factor_cmap\nfrom bokeh.palettes import Blues8\nfrom bokeh.palettes import Blues, Spectral6, Viridis, Viridis256, GnBu, Viridis256\nfrom bokeh.palettes import Category20b,Category20c,Plasma,Inferno,Category20\nfrom bokeh.palettes import cividis, inferno, grey","0edfc811":"print(f\"The total number of games in the training data is {df['GameId'].nunique()}\")\nprint(f\"The total number of plays in the training data is {df['PlayId'].nunique()}\")\nprint(f\"The NFL seasons in the training data are {df['Season'].unique().tolist()}\")","002b25ae":"df.info()","d85fa10e":"df.columns","45e16241":"nullvalues = df.loc[:, df.isnull().any()].isnull().sum().sort_values(ascending=False)\n\nprint(nullvalues)","27d7cea8":"f,ax = plt.subplots(figsize=(12,10))\nsns.heatmap(df.iloc[:,2:].corr(),annot=True, linewidths=.1, fmt='.1f', ax=ax)\n\nplt.show();","de1c3fdf":"from plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\n\ntemp_df = df.query(\"NflIdRusher == NflId\")\nfig = px.histogram(temp_df, x=\"Yards\")\nplt.style.use(\"classic\")\nlayout = go.Layout(title=go.layout.Title(text=\"Distribution of Yards (Target)\", x=0.5), font=dict(size=14), width=800, height=600)\nfig.update_layout(layout)\nfig.show();\n","15d1ef9e":"my_data = df[['PlayerCollegeName','NflId', 'DisplayName']].drop_duplicates().copy()\n\ncollege_attended = my_data[\"PlayerCollegeName\"].value_counts()\n\ndf_cc = pd.DataFrame({'CollegeName':college_attended.index, 'Count':college_attended.values}).sort_values(\"Count\", ascending = False)\n\n#df_cc.Count.astype('int', inplace=True)\n\ndf_cc = df_cc[df_cc.CollegeName != 'Louisiana State']\n\ndf_cc.at[42,'Count']=51","c5fbb339":"# LSU AND Louisiana State is taken as different colleges!!! That\u2019s not the case!\n# LSU has a massive number of players currently in the NFL, and so let's consolidate the values...\n\ndf_cc.sort_values('Count',ascending=False, inplace=True)\n\n#pd.set_option('display.max_rows', 500)\ndf_cc.index = df_cc.index + 1","2a18e355":"mysource = ColumnDataSource(df_cc)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\np = figure(y_range=df_cc.CollegeName[:50],    \n           \n  title = '\\nNFL Player Count by College Attended\\n',\n  x_axis_label ='# of NFL players that attended the college prior\\n',\n  plot_width=800,\n  plot_height=600,\n  tools=\"hover\",\n  toolbar_location=None,   \n \n)\n\np.hbar(y='CollegeName',  # center of your y coordinate launcher, 40 points as def above ... \n    left=0, # or left=20, etc\n    right='Count',    # right is 40 points... \n    height=1,\n    alpha=0.4,\n    #color='orange',    #color=Spectral3  #color=Blues8,   \n    #background_fill_color=\"#efe8e2\", \n    #     fill_color=Blues8,\n    #     fill_alpha=0.4, \n    \n    fill_color=factor_cmap(\n        'CollegeName',\n        palette=inferno(50),  #cividis(50),  #d3['Category20b'][4],  #Category20b(2),  #[2],   #Category20b,   #Viridis256,    #GnBu[8], #,#Spectral6,             #viridis(50),  #[3], #Spectral6,  #|Blues[2],\n        factors=df_cc.CollegeName[:50].tolist()    \n    ),\n\n    source = mysource,\n    fill_alpha=1.0,\n    #line_color='blue'  \n) \n\np.title.text_font_size = '12pt'\n\n# Y TICKS:\np.yaxis.major_tick_line_color = None\np.axis.minor_tick_line_color = None\n\np.yaxis.major_tick_line_color = None  # turn off y-axis major ticks\np.yaxis.minor_tick_line_color = None\n\n# GRID:\n# p.xgrid.grid_line_color = None\np.ygrid.grid_line_color = None   \n\n# HOVER:\nhover = HoverTool()\nhover.tooltips = [\n    (\"College Name:\", \"@CollegeName\"),\n    (\"Ranking by Count\", \"$index\"),\n    (\"Number of gradutes that entered the NFL:\", \"@Count\"),\n]\n\np.add_tools(hover)\n\noutput_notebook(hide_banner=True)\nshow(p);","d789e17b":"refer = pd.DataFrame(df.columns)\nrefer.columns=['Mapper']\nrefer.index.name='Ref:'\nrefer.style.set_properties(**{'text-align': 'left'}).set_table_styles([dict(selector='th', props=[('text-align', 'center')])])","e8d5f067":"df.head(1).T. \\\nstyle.set_properties(**{'text-align': 'left'}).set_table_styles([dict(selector='th', props=[('text-align', 'center')])])","23300c7b":"def create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=50,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(12, 6.33)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='green', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='yellow')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='red')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='red')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n                 color='yellow')\n    return fig, ax\n\ncreate_football_field()\nplt.show();\n","186eeddb":"import math\ndef get_dx_dy(angle, dist):\n    cartesianAngleRadians = (450-angle)*math.pi\/180.0\n    dx = dist * math.cos(cartesianAngleRadians)\n    dy = dist * math.sin(cartesianAngleRadians)\n    return dx, dy\n\nplay_id = 20181007011551\nfig, ax = create_football_field()\ndf.query(\"PlayId == @play_id and Team == 'away'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='orange', s=50, legend='Away')\ndf.query(\"PlayId == @play_id and Team == 'home'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='blue', s=50, legend='Home')\ndf.query(\"PlayId == @play_id and NflIdRusher == NflId\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='red', s=100, legend='Rusher')\nrusher_row = df.query(\"PlayId == @play_id and NflIdRusher == NflId\")\nyards_covered = rusher_row[\"Yards\"].values[0]\n\nx = rusher_row[\"X\"].values[0]\ny = rusher_row[\"Y\"].values[0]\nrusher_dir = rusher_row[\"Dir\"].values[0]\nrusher_speed = rusher_row[\"S\"].values[0]\ndx, dy = get_dx_dy(rusher_dir, rusher_speed)\n\nax.arrow(x, y, dx, dy, length_includes_head=True, width=0.3)\nplt.title(f'Play # {play_id} and yard distance is {yards_covered}', fontsize=15)\nplt.legend()\nplt.show();","d342641e":"fig, ax = create_football_field()\ntrain.query(\"PlayId == 20170907000118 and Team == 'away'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='yellow', s=30, legend='Away')\ntrain.query(\"PlayId == 20170907000118 and Team == 'home'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='red', s=30, legend='Home')\nplt.title('Play # 20170907000118')\nplt.legend()\nplt.show();","c92918a7":"rusher_dir","34426dc2":"def get_plot(play_id):\n    fig, ax = create_football_field()\n    df.query(\"PlayId == @play_id and Team == 'away'\") \\\n        .plot(x='X', y='Y', kind='scatter', ax=ax, color='orange', s=50, legend='Away')\n    df.query(\"PlayId == @play_id and Team == 'home'\") \\\n        .plot(x='X', y='Y', kind='scatter', ax=ax, color='blue', s=50, legend='Home')\n    df.query(\"PlayId == @play_id and NflIdRusher == NflId\") \\\n        .plot(x='X', y='Y', kind='scatter', ax=ax, color='red', s=100, legend='Rusher')\n    rusher_row = df.query(\"PlayId == @play_id and NflIdRusher == NflId\")\n    yards_covered = rusher_row[\"Yards\"].values[0]\n\n    x = rusher_row[\"X\"].values[0]\n    y = rusher_row[\"Y\"].values[0]\n    rusher_dir = rusher_row[\"Dir\"].values[0]\n    rusher_speed = rusher_row[\"S\"].values[0]\n    dx, dy = get_dx_dy(rusher_dir, rusher_speed)\n\n    ax.arrow(x, y, dx, dy, length_includes_head=True, width=0.3)\n    plt.title(f'Play # {play_id} and yard distance is {yards_covered}', fontsize=15)\n    plt.legend()\n    return plt\n\ntemp_df = df.groupby(\"PlayId\").first()\ntemp_df = temp_df.sort_values(by=\"Yards\").reset_index().head()\n\nfor play_id in temp_df[\"PlayId\"].values:\n    plt = get_plot(play_id)\n    plt.show();","0867dc1d":"playid = 20181230154157\ntrain.query(\"PlayId == @playid\").head()","c8030f07":"temp_df = df.groupby(\"PlayId\").first()\ntemp_df = temp_df[temp_df[\"Yards\"]==0].reset_index().head()\n\nfor play_id in temp_df[\"PlayId\"].values:\n    plt = get_plot(play_id)\n    plt.show();","e2d2a1ec":"yl = train.query(\"PlayId == @playid\")['YardLine'].tolist()[0]\nfig, ax = create_football_field(highlight_line=True,\n                                highlight_line_number=yl+54)\ntrain.query(\"PlayId == @playid and Team == 'away'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='yellow', s=30, legend='Away')\ntrain.query(\"PlayId == @playid and Team == 'home'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='red', s=30, legend='Home')\nplt.title(f'Play # {playid}')\nplt.legend()\nplt.show();","439800fb":"temp_df = df.groupby(\"PlayId\").first()\ntemp_df = temp_df[temp_df[\"Yards\"]==0].reset_index().head()\n\nfor play_id in temp_df[\"PlayId\"].values:\n    plt = get_plot(play_id)\n    plt.show();","690c855c":"temp_df = df.groupby(\"PlayId\").first()\ntemp_df = temp_df[temp_df[\"Yards\"]>10].reset_index().head()\n\nfor play_id in temp_df[\"PlayId\"].values:\n    plt = get_plot(play_id)\n    plt.show();","9da1d6f3":"######################################################################### \n#   Creating an example visualization illustrating the core problem     #\n#########################################################################\n\n# #Styling\nsns.set_style(\"white\", {'grid.linestyle': '--'})\n\n#Creating a synthetic dataset\nsynthetic_data   = [12,15,19,21,25,29,35,45,65,90,105,190,305,405,420,430,1700,2300,2450,2855,3105]\nsynthetic_points = ['U','T','S','R','Q','P','O','N','M','L','K','J','I','H','G','F','E','D','C','B','A']\n     \n#Creating core dataframe\nmich24 = pd.DataFrame(synthetic_data,index=synthetic_points)\nmich24.columns =['Count']\nmich24 = mich24.sort_values(['Count'], ascending=False)\nplt.figure(figsize=(15,7))\n\nax = sns.barplot(mich24.index, \n                 mich24.Count, \n                 color='olive', \n                 alpha=1, \n                 linewidth=.1, \n                 edgecolor=\"black\",\n                 saturation=10)\n\nax.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\nax.set(xlabel=\"\\n\\n\\n\", ylabel='Count\\n')\nax.set_xticklabels(mich24.index, color = 'black', alpha=.8)\n\nfor item in ax.get_xticklabels(): \n    item.set_rotation(0)\n    \nfor i, v in enumerate(mich24[\"Count\"].iteritems()):        \n    ax.text(i ,v[1], \"{:,}\".format(v[1]), color='gray', va ='bottom', rotation=0, ha='center')\n    \n\nax.tick_params(axis='x', which='major', pad=9)    \nplt.tick_params(axis='x',which='both',bottom=False,top=False,labelbottom=True)  \n#################################################plt.tight_layout()\n\nplt.axvline(4.5, 0,0.95, linewidth=1.4, color=\"#00274C\", label=\"= 'Charbonnet Cut' proposed\", linestyle=\"--\")\n\nplt.legend(loc='center', fontsize=13)\n\n#  plt.text(3+0.2, 4.5, \"An annotation\", horizontalalignment='left', size='medium', color='black', weight='semibold')\n\nplt.text(0, -425, \"\\nThis is a synthetic dataset I created to illustrate a core problem seen when plotting histograms\/boxplots with highly variable data\", fontsize=12)\n\n#Remove unnecessary chart junk   \nax.spines[\"top\"].set_visible(False)    \nax.spines[\"bottom\"].set_visible(False)    \nax.spines[\"right\"].set_visible(False)    \nax.spines[\"left\"].set_visible(False) \n# #sns.despine()\n\nplt.title('\\n\\n\\n\\nCreating a splitting point for a better visualization, if we also plot the 2nd tier\/level data...''\\n\\n',fontsize=14, loc=\"left\")    \n\nplt.text(4.5,600,\"|--- This region contains a lack of VISUAL INSIGHT so, we should split data based on Charbonnet Cut ---|\", fontsize=12.5)\n\nplt.show();\n\n","3e4b7b44":"sns.set_style(\"white\", {'grid.linestyle': '--'})\n\n#Creating a synthetic dataset\nsynthetic_data   = [12,15,19,21,25,29,35,45,65,90,105,190,305,405,420,430]\nsynthetic_points = ['U','T','S','R','Q','P','O','N','M','L','K','J','I','H','G','F']\n     \n#Creating core dataframe\nmich24 = pd.DataFrame(synthetic_data,index=synthetic_points)\nmich24.columns =['Count']\nmich24 = mich24.sort_values(['Count'], ascending=False)\nplt.figure(figsize=(12,6))\n\nax = sns.barplot(mich24.index, \n                 mich24.Count, \n                 color='olivedrab', \n                 alpha=1, \n                 linewidth=.1, \n                 edgecolor=\"black\",\n                 saturation=10)\n\nax.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\nax.set(xlabel=\"\\n\\n\\n\", ylabel='Count\\n')\nax.set_xticklabels(mich24.index, color = 'black', alpha=.8)\n\nfor item in ax.get_xticklabels(): \n    item.set_rotation(0)\n    \nfor i, v in enumerate(mich24[\"Count\"].iteritems()):        \n    ax.text(i ,v[1], \"{:,}\".format(v[1]), color='black', va ='bottom', rotation=0, ha='center')\n    \n\nax.tick_params(axis='x', which='major', pad=9)    \nplt.tick_params(axis='x',which='both',bottom=False,top=False,labelbottom=True)  \nplt.tight_layout()\n\nplt.legend(loc='center', fontsize=13)\n\nplt.text(0, -65, \"\\n Now we can see the relationship in the heights of the '2nd tier' (East of the Charbonnet Cut) data...\", fontsize=15, color=\"#00274C\")\n\n#Remove unnecessary chart junk   \nax.spines[\"top\"].set_visible(False)    \nax.spines[\"bottom\"].set_visible(False)    \nax.spines[\"right\"].set_visible(False)    \nax.spines[\"left\"].set_visible(False) \n# #sns.despine()\n\nplt.title('2nd Tier data has been plotted, and we can see the relationships without data being drowned out...\\n\\n',fontsize=15, loc=\"left\")    \nplt.show();\n","fa090586":"tf = df.query(\"NflIdRusher == NflId\")\n\nsns.set_style(\"white\", {'grid.linestyle': '--'})\n\nfig, ax = plt.subplots(figsize=(10,5))\nax.set_xlim(-10,26)\n\nc = [ 'r' if i < 0 else 'b' for i in tf.Yards]\n\nsns.distplot(tf.Yards, kde=False, color='turquoise', bins=100, \n            hist_kws={\"linewidth\": 0.5, 'edgecolor':'blue'})\n\n## Remove the x-tick labels:  plt.xticks([])\nplt.yticks([])\n## This method also hides the tick marks\n\nplt.title('\\n Overall distribution of yards gained during an individual running play\\n',fontsize=14)\nplt.xlabel('\\n Yards (yd) Gained -->\\n',fontsize=14)\nsns.despine(top=True, right=True, left=True, bottom=True)\nplt.tight_layout()\n\nplt.tight_layout()\nplt.show();","f2643bec":"plt.style.use('default')\nplt.figure(figsize=(12,10))\ntemp_df = df.query(\"NflIdRusher == NflId\")\nsns.scatterplot(temp_df[\"Dis\"], temp_df[\"Yards\"])\nplt.xlabel('Distance covered', fontsize=10)\nplt.ylabel('Yards (Target)', fontsize=10)\nplt.title(\"Distance covered by Rusher Vs Yards (target)\", fontsize=15)\nplt.show();","0e9d0681":"plt.figure(figsize=(12,10))\ntemp_df = df.query(\"NflIdRusher == NflId\")\nsns.scatterplot(temp_df[\"S\"], temp_df[\"Yards\"])\nplt.xlabel('Rusher Speed', fontsize=10)\nplt.ylabel('Yards (Target)', fontsize=10)\nplt.title(\"Rusher Speed Vs Yards (target)\", fontsize=15)\nplt.show();","53dea6ea":"plt.figure(figsize=(12,10))\ntemp_df = df.query(\"NflIdRusher == NflId\")\nsns.scatterplot(temp_df[\"A\"], temp_df[\"Yards\"])\nplt.xlabel('Rusher Acceleration', fontsize=10)\nplt.ylabel('Yards (Target)', fontsize=10)\nplt.title(\"Rusher Acceleration Vs Yards (target)\", fontsize=15)\nplt.show();","61240b20":"plt.style.use('dark_background')\n#aaa is our temp df\naaa = gold\naaa['IsRunner'] = aaa.NflId == aaa.NflIdRusher\n\n#bbb is now the unique run play runners in the year 2018 only\nbbb = aaa[aaa.IsRunner & (aaa.Season == 2018)]\n\n#ccc is now a specific actual game\nccc=bbb[bbb.GameId==2018121601] # we grab random game #1 \nccc = ccc[['Yards']][:]\nccc['colors'] = ['gold' if x <= 0 else 'limegreen' for x in ccc['Yards']]\n##ccc.sort_values('Yards', inplace=True)\nccc.reset_index(inplace=True)\n\nplt.figure(figsize=(8,10))\nplt.hlines(y=ccc.index, xmin=0, xmax=ccc.Yards, color=ccc.colors, alpha=0.8, linewidth=8)\nplt.gca().set(ylabel='$Play$\\n', xlabel='\\n$Yards$')\nplt.yticks(fontsize=8)\nplt.title('\\n Positive & Negative Yards for random NFL game #1 - (2018 Season)\\n', fontdict={'size':14})\nplt.grid(linestyle='--', alpha=0.5)\nsns.despine(top=True, right=True, left=True, bottom=True)\nplt.gca().invert_yaxis()\nplt.tight_layout()\nplt.show();\n","206d9f87":"plt.style.use('dark_background')\n\nccc=bbb[bbb.GameId==2018121500]\nccc = ccc[['Yards']][:]\nccc['colors'] = ['gold' if x <= 0 else 'limegreen' for x in ccc['Yards']]\n##ccc.sort_values('Yards', inplace=True)\nccc.reset_index(inplace=True)\nplt.figure(figsize=(8,10), dpi= 300)\nplt.hlines(y=ccc.index, xmin=0, xmax=ccc.Yards, color=ccc.colors, alpha=0.8, linewidth=9)\nplt.gca().set(ylabel='$Play$\\n', xlabel='\\n$Yards$')\nplt.yticks(fontsize=6)\nplt.title('\\nPositive and Negative Yards for random NFL game #2 - (2018 Season)\\n', fontdict={'size':14})\nplt.grid(linestyle='--', alpha=0.5)\nsns.despine(top=True, right=True, left=True, bottom=True)\nplt.gca().invert_yaxis()\nplt.tight_layout()\nplt.show();","42526260":"plt.style.use('dark_background')\n\nccc=bbb[bbb.GameId==2018121501]\nccc = ccc[['Yards']][:]\nccc['colors'] = ['gold' if x <= 0 else 'limegreen' for x in ccc['Yards']]\n##ccc.sort_values('Yards', inplace=True)\nccc.reset_index(inplace=True)\nplt.figure(figsize=(8,10), dpi= 300)\nplt.hlines(y=ccc.index, xmin=0, xmax=ccc.Yards, color=ccc.colors, alpha=0.8, linewidth=9)\nplt.gca().set(ylabel='$Play$\\n', xlabel='\\n$Yards$')\nplt.yticks(fontsize=6)\nplt.title('\\nPositive and Negative Yards for random NFL game #3 - (2018 Season)\\n', fontdict={'size':14})\nplt.grid(linestyle='--', alpha=0.5)\nsns.despine(top=True, right=True, left=True, bottom=True)\nplt.gca().invert_yaxis()\nplt.tight_layout()\nplt.show();","e248bc57":"cm = sns.light_palette(\"green\", as_cmap=True)\ntom = df.query(\"NflIdRusher == NflId\")\ntom = tom[tom.Season==2018] \n\nfixup = {\"ARZ\":\"ARI\",\"BLT\":\"BAL\",\"CLV\":\"CLE\",\"HST\":\"HOU\"}\ntom.PossessionTeam.replace(fixup, inplace=True)\n\n\ntom.groupby(['PossessionTeam'], as_index=False)['Yards'].agg(max).set_index('PossessionTeam').sort_values('Yards', ascending=False)[:15].style.set_caption('TOP TEN LONGEST RUNS:').background_gradient(cmap=cm)","582028f6":"tf = df.query(\"NflIdRusher == NflId\")\nsns.set_style(\"ticks\", {'grid.linestyle': '--'})\n\nflierprops = dict(markerfacecolor='0.75', \n                  markersize=1,\n                  linestyle='none')\n\nfig, ax = plt.subplots(figsize=(8,6))\n\nax.set_ylim(-7, 14)\nax.set_title('Yards Gained by Down\\n', fontsize=14)\n\nsns.boxplot(x='Down',\n            y='Yards',\n            data=tf,\n            ax=ax,\n            showfliers=False, \n            #color='blue'\n            )\n\nax.yaxis.grid(True)   # Show the horizontal gridlines\nax.xaxis.grid(False)  # Hide x-axis gridlines \n\nax.yaxis.set_major_locator(plt.MultipleLocator(1))\nax.yaxis.set_minor_locator(plt.MultipleLocator(5))\n\n# Add transparency to colors\nfor patch in ax.artists:\n  r, g, b, a = patch.get_facecolor()\n  patch.set_facecolor((r, g, b, .3))\n\nax.set(xlabel='')\nax.set_xticklabels(['1st Down', '2nd Down', '3rd Down', '4th Down'])\nplt.tight_layout(); plt.show();","0df06468":"# VANILLA SWIRL\nYDS_by_down = tf.groupby(\"Down\")['Yards'].size()\ntotal_run_plays = YDS_by_down.sum()\ndf_ydsbydown = pd.DataFrame( {'Down':YDS_by_down.index, 'Count':YDS_by_down.values}).sort_values('Count', ascending=False)\ndf_ydsbydown.set_index('Down', drop=True, inplace=True)\n\ndf_ydsbydown['Percentage']=round(df_ydsbydown.Count\/total_run_plays*100, 2)\ncm = sns.light_palette(\"green\", as_cmap=True)\ndf_ydsbydown.style.set_caption('PLAY COUNT PER DOWN:').background_gradient(cmap=cm)","c1d65521":"plt.figure(figsize=(12,10))\ntemp_df = df.query(\"NflIdRusher == NflId\")\nsns.boxplot(data=temp_df, x=\"Position\", y=\"Yards\", showfliers=False, whis=3.0)\nplt.xlabel('Rusher position', fontsize=10)\nplt.ylabel('Yards (Target)', fontsize=10)\nplt.title(\"Rusher Position Vs Yards (target)\", fontsize=15)\nplt.show();","6a3485c1":"tf = df.query(\"NflIdRusher == NflId\")\nflierprops = dict(markerfacecolor='0.75', \n                  markersize=1,\n                  linestyle='none')\nfig, ax = plt.subplots(figsize=(9,7))\nax.set_ylim(-7, 17)\nax.set_title('Yards Gained by Game Quarter\\n\\n', fontsize=12)\n\nsns.boxplot(x='Quarter',\n            y='Yards',\n            data=tf,\n            ax=ax,\n            showfliers=False , \n            #color='blue'\n            )\n\nax.yaxis.grid(True)   # Show the horizontal gridlines\nax.xaxis.grid(False)  # Hide x-axis gridlines \n\nax.yaxis.set_major_locator(plt.MultipleLocator(1))\nax.yaxis.set_minor_locator(plt.MultipleLocator(5))\n\n# Add transparency to colors\nfor patch in ax.artists:\n  r, g, b, a = patch.get_facecolor()\n  patch.set_facecolor((r, g, b, .3))\n    \nax.set(xlabel='')\nax.set_xticklabels(['1Q', '2Q', '3Q', '4Q', '5Q'])\nplt.tight_layout(); plt.show();","975f1fc1":"dff = tf[tf.DefendersInTheBox>2]\ndff.DefendersInTheBox = dff.DefendersInTheBox.astype('int')\n\nflierprops = dict(markerfacecolor='0.75', \n                  markersize=1,\n                  linestyle='none')\n\nfig, ax = plt.subplots(figsize=(9,7))\nax.set_ylim(-7, 23)\nax.set_title('Yards Gained vs number of Defenders in the box\\n\\n', fontsize=12)\nsns.boxplot(x='DefendersInTheBox',\n            y='Yards',\n            data=dff,\n            ax=ax,\n            showfliers=False , \n            #color='blue'\n            )\n            #flierprops=flierprops)\n\nax.yaxis.grid(True)   # Show the horizontal gridlines\nax.xaxis.grid(False)  # Hide x-axis gridlines \n\nax.yaxis.set_major_locator(plt.MultipleLocator(1))\nax.yaxis.set_minor_locator(plt.MultipleLocator(5))\n\n# Add transparency to colors\nfor patch in ax.artists:\n  r, g, b, a = patch.get_facecolor()\n  patch.set_facecolor((r, g, b, .3))\n    \n# ax.set(xlabel=''common xlabel', ylabel='common ylabel', title='some title')\nax.set(xlabel=\"\\nNumber of defensive players in the 'Box'\\n\\n\")\n# ax.set_xticklabels(['1Q', '2Q', '3Q', '4Q', '5Q'])\n\nplt.tight_layout()\nplt.show();","841b50ca":"import warnings\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning)\n\nsns.pairplot(train.query(\"NflIdRusher == NflId\").sample(1000)[['S','Dis','A','Yards','DefensePersonnel']],\n            hue='DefensePersonnel')\nplt.suptitle('Speed, Acceleration, Distance traveled, and Yards Gained for Rushers')\nplt.show();","6a8d4e64":"temp101 = pd.DataFrame(tf.DefensePersonnel.value_counts())\ntemp101.index.name = 'DefensePersonnel'\ntemp101.columns=['Play Count']\n\ncm = sns.light_palette(\"green\", as_cmap=True)\n\ntemp101.style.set_caption('Count of plays by Personnel:').background_gradient(cmap=cm)","9ac99591":"top_10_defenses = train.groupby('DefensePersonnel')['GameId'] \\\n    .count() \\\n    .sort_values(ascending=False).index[:10] \\\n    .tolist()\nprint(\"Top 10 Defenses:\")\ntop_10_defenses","333163b1":"plt.style.use('classic')\ntrain_play = train.groupby('PlayId').first()\ntrain_top10_def = train_play.loc[train_play['DefensePersonnel'].isin(top_10_defenses)]\n\nfig, ax = plt.subplots(figsize=(20, 8))\nsns.violinplot(x='DefensePersonnel',\n               y='Yards',\n               data=train_top10_def,\n               ax=ax)\nplt.ylim(-10, 20)\nplt.title('Yards vs Defensive Personnel', fontsize=14)\nplt.show();","71f8ea32":"temp107 = pd.DataFrame(round(tf.DefensePersonnel.value_counts(normalize=True) * 100,2)).head(10)\ntemp107.index.name = 'DefensePersonnel'\ntemp107.columns=['Percentage']\ncm = sns.light_palette(\"green\", as_cmap=True)\n\ntemp107.style.set_caption('Top 10 Percentage of plays by Defensive Personnel Grouping:').background_gradient(cmap=cm)","763126e5":"sns.set_style(\"ticks\", {'grid.linestyle': '--'})\n\npers = tf\ndff = pers \n\nflierprops = dict(markerfacecolor='0.2', \n                  markersize=1,\n                  linestyle='none')\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.set_ylim(-7, 22)\nax.set_title('\\nAverage yards gained by Defensive Personnel Schema\\n', fontsize=14)\n\nsns.boxplot(y=dff['DefensePersonnel'].sort_values(ascending=False),\n            x=dff['Yards'],\n            ax=ax,\n            showfliers=False ,\n            linewidth=.8\n            #color='blue'\n            )\n\nax.yaxis.grid(False)   # Show the horizontal gridlines\nax.xaxis.grid(True)  # Hide x-axis gridlines \n\nax.xaxis.set_major_locator(plt.MultipleLocator(1))\n\n# Add transparency to colors\nfor patch in ax.artists:\n  r, g, b, a = patch.get_facecolor()\n  patch.set_facecolor((r, g, b, .3))\n\nax.set(xlabel=\"\\n Yards Gained\\n\\n\")\n\nsns.despine(top=True, right=True, left=True, bottom=True)\nax.xaxis.set_ticks_position('none') \n\nax.text(15,17.3, '#1',\n        verticalalignment='bottom', horizontalalignment='right',\n        color='green', fontsize=12)\n\nax.text(15,16.3, '#2',\n        verticalalignment='bottom', horizontalalignment='right',\n        color='green', fontsize=11)\n\nax.text(15,21.3, '#3',\n        verticalalignment='bottom', horizontalalignment='right',\n        color='green', fontsize=11)\n\nax.text(15,24.3, '#5',\n        verticalalignment='bottom', horizontalalignment='right',\n        color='green', fontsize=11)\n\nax.text(15,27.3, '#4',\n        verticalalignment='bottom', horizontalalignment='right',\n        color='green', fontsize=11)\n\nax.text(9,2, '6 guys on the line',\n        verticalalignment='bottom', horizontalalignment='right',\n        color='green', fontsize=11)\n\nax.text(0,.2, 'line of scrimmage',\n        verticalalignment='bottom', horizontalalignment='right',\n        color='blue', fontsize=9)\n\n#-----more control-----#\nax.grid(linestyle='--', \n        linewidth='0.3', \n        color='lightgray', \n        alpha=0.8,\n        axis='x'\n       )\n\nplt.axvline(0, 0,1, linewidth=.4, color=\"blue\", linestyle=\"--\")\n\nplt.tight_layout()\nplt.show();","cc8f895a":"plt.figure(figsize=(10,10))\ntemp_df = df.query(\"NflIdRusher == NflId\")\nsns.boxplot(data=temp_df, y=\"PossessionTeam\", x=\"Yards\", showfliers=False, whis=3.0)\nplt.ylabel('PossessionTeam', fontsize=10)\nplt.xlabel('Yards (Target)', fontsize=10)\nplt.title(\"Possession team Vs Yards (target)\", fontsize=15)\nplt.show();","1502dff6":"plt.style.use(\"default\")\nplt.figure(figsize=(15,10))\ntemp_df = df.query(\"NflIdRusher == NflId\")\n#sns.catplot(data=temp_df, x=\"Quarter\", y=\"Yards\", kind=\"violin\")\nsns.catplot(data=temp_df, x=\"Quarter\", y=\"Yards\", kind=\"boxen\")\nplt.xlabel('Quarter', fontsize=10)\nplt.ylabel('Yards (Target)', fontsize=10)\nplt.title(\"Quarter Vs Yards (target)\", fontsize=15)\nplt.show();","fda08dd6":"fig, ax = plt.subplots(figsize=(15, 5))\nax.set_ylim(-10, 60)\nax.set_title('Yards vs Quarter')\nsns.boxenplot(x='Quarter',\n            y='Yards',\n            data=train.sample(5000),\n            ax=ax)\nplt.show();","2148e650":"fig, ax = plt.subplots(figsize=(15, 5))\nax.set_ylim(-10, 60)\nsns.boxenplot(x='DefendersInTheBox',\n               y='Yards',\n               data=train.query('DefendersInTheBox > 2'),\n               ax=ax)\nplt.title('Yards vs Defenders in the Box')\nplt.show();","fdbb16ed":"fig, axes = plt.subplots(3, 2, constrained_layout=True, figsize=(15 , 10))\nax_idx = 0\nax_idx2 = 0\nfor i in range(4, 10):\n    this_ax = axes[ax_idx2][ax_idx]\n    #print(ax_idx, ax_idx2)\n    sns.distplot(train.query('DefendersInTheBox == @i')['Yards'],\n                ax=this_ax,\n                color=color_pal[ax_idx2])\n    this_ax.set_title(f'{i} Defenders in the box')\n    this_ax.set_xlim(-10, 20)\n    ax_idx += 1\n    if ax_idx == 2:\n        ax_idx = 0\n        ax_idx2 += 1\nplt.show();","d03f338f":"train.query(\"NflIdRusher == NflId\") \\\n    .groupby('DisplayName')['Yards'] \\\n    .agg(['count','mean']) \\\n    .query('count > 100') \\\n    .sort_values('mean', ascending=True) \\\n    .tail(10)['mean'] \\\n    .plot(kind='barh',\n          figsize=(15, 5),\n          color=color_pal[5],\n          xlim=(0,6),\n          title='Top 10 Players by Average Yards')\nplt.show()\ntrain.query(\"NflIdRusher == NflId\") \\\n    .groupby('DisplayName')['Yards'] \\\n    .agg(['count','mean']) \\\n    .query('count > 100') \\\n    .sort_values('mean', ascending=True) \\\n    .head(10)['mean'] \\\n    .plot(kind='barh',\n          figsize=(15, 5),\n          color=color_pal[0],\n          xlim=(0,6),\n          title='Bottom 10 Players by Average Yards')\nplt.show();","f4f8171b":"def label_bars(ax, bars, text_format, **kwargs):\n    \"\"\"\n    Attaches a label on every bar of a regular or horizontal bar chart\n    \"\"\"\n    ys = [bar.get_y() for bar in bars]\n    y_is_constant = all(y == ys[0] for y in ys)  # -> regular bar chart, since all all bars start on the same y level (0)\n\n    if y_is_constant:\n        _label_bar(ax, bars, text_format, **kwargs)\n    else:\n        _label_barh(ax, bars, text_format, **kwargs)\n\n\ndef _label_bar(ax, bars, text_format, **kwargs):\n    \"\"\"\n    Attach a text label to each bar displaying its y value\n    \"\"\"\n    max_y_value = ax.get_ylim()[1]\n    inside_distance = max_y_value * 0.05\n    outside_distance = max_y_value * 0.01\n\n    for bar in bars:\n        text = text_format.format(bar.get_height())\n        text_x = bar.get_x() + bar.get_width() \/ 2\n\n        is_inside = bar.get_height() >= max_y_value * 0.15\n        if is_inside:\n            color = \"white\"\n            text_y = bar.get_height() - inside_distance\n        else:\n            color = \"black\"\n            text_y = bar.get_height() + outside_distance\n\n        ax.text(text_x, text_y, text, ha='center', va='bottom', color=color, **kwargs)\n\n\ndef _label_barh(ax, bars, text_format, **kwargs):\n    \"\"\"\n    Attach a text label to each bar displaying its y value\n    Note: label always outside. otherwise it's too hard to control as numbers can be very long\n    \"\"\"\n    max_x_value = ax.get_xlim()[1]\n    distance = max_x_value * 0.0025\n\n    for bar in bars:\n        text = text_format.format(bar.get_width())\n\n        text_x = bar.get_width() + distance\n        text_y = bar.get_y() + bar.get_height() \/ 2\n\n        ax.text(text_x, text_y, text, va='center', **kwargs)","f85e2d48":"# Create the DL-LB combos\nplt.style.use('default')\ntrain['DL_LB'] = train['DefensePersonnel'] \\\n    .str[:10] \\\n    .str.replace(' DL, ','-') \\\n    .str.replace(' LB','') # Clean up and convert to DL-LB combo\ntop_5_dl_lb_combos = train.groupby('DL_LB').count()['GameId'] \\\n    .sort_values() \\\n    .tail(10).index.tolist()\nax = train.loc[train['DL_LB'].isin(top_5_dl_lb_combos)] \\\n    .groupby('DL_LB').mean()['Yards'] \\\n    .sort_values(ascending=True) \\\n    .plot(kind='bar',\n          title='Average Yards Top 5 Defensive DL-LB combos',\n          figsize=(15, 5),\n          color=color_pal[2])\n\nbars = [p for p in ax.patches]\nvalue_format = \"{:0.2f}\"\nlabel_bars(ax, bars, value_format, fontweight='bold')\nplt.show();","eb30db77":"plt.style.use('default')\ntrain['SnapHandoffSeconds'] = (pd.to_datetime(train['TimeHandoff']) - \\\n                               pd.to_datetime(train['TimeSnap'])).dt.total_seconds()\n\n(train.groupby('SnapHandoffSeconds').count() \/ 22 )['GameId'].plot(kind='bar', figsize=(15, 5))\n\nbars = [p for p in ax.patches]\nvalue_format = \"{}\"\nlabel_bars(ax, bars, value_format, fontweight='bold')\nplt.show();","16ec9698":"train.groupby('SnapHandoffSeconds')['Yards'].mean().plot(kind='barh',\n                                                         color=color_pal[1],\n                                                         figsize=(15, 5),\n                                                         title='Average Yards Gained by SnapHandoff Seconds')\nplt.show();","7ef9ae18":"sns.set(style=\"white\", palette=\"muted\", color_codes=True)\n\nt = tf[['Week', \"Yards\"]].groupby('Week').mean().sort_values(by = \"Yards\")\n\nfig, ax = plt.subplots(figsize=(9,5))\n\nspecific_colors=['grey']*17\nspecific_colors[8]='#ffbf00'\nspecific_colors[5]='#169016'\n\n\nsns.set_color_codes('pastel')             \nsns.barplot(x=t.index,\n            y=t.Yards,\n            ax=ax, \n            linewidth=.2, \n            edgecolor=\"black\",\n            palette=specific_colors)\n\nax.set_ylim(0, 5.5)\nax.set_title('\\nOverall Average yards gained per play as the season progresses (week by week)\\n\\n', fontsize=14)\n# ax.set(ylabel='Yards Gained\\n', rotation='horizontal')\nax.set(xlabel='\\nWeek Number (in the season)')\nax.yaxis.grid(True)   # Show the horizontal gridlines\nax.xaxis.grid(False)  # Hide x-axis gridlines \nax.yaxis.set_major_locator(plt.MultipleLocator(1))\nax.yaxis.set_minor_locator(plt.MultipleLocator(5))\n\n#-----more control-----#\nax.grid(linestyle='--', \n        linewidth='0.7', \n        color='lightgray', \n        alpha=0.6,\n        axis='y'\n       )\n\n\nfor patch in ax.artists:\n    r, g, b, a = patch.get_facecolor()\n    patch.set_facecolor((r, g, b, .3))\nax.spines['top'].set_linewidth(0)  \nax.spines['left'].set_linewidth(.3)  \nax.spines['right'].set_linewidth(0)  \nax.spines['bottom'].set_linewidth(.3) \n\nplt.ylabel(\"YDS\\n\", fontsize=11, rotation=90)\n\nplt.tight_layout()\nplt.show();\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nt = tf[['Week', \"Yards\"]].groupby('Week').mean().sort_values(by = \"Yards\")\nt['WeekInSeason']= t.index\nt.reset_index(drop=True, inplace=True)\nstarter= t.loc[0,'Yards']\nt['gain']=t.Yards\/starter\nt['gainpct']=round(100*(t.gain-1), 3)\n\nfig, ax = plt.subplots(figsize=(9.5,5))\n\nsns.lineplot(x=\"WeekInSeason\", y=\"gainpct\", data=t, \n            color='blue', \n            ax=ax,\n            markers=True, marker='o', \n            dashes=True) \n\nax.set_title('\\nPercent Gain in the average running yards gained per play (week by week)\\n\\n', fontsize=14)\n\nax.xaxis.set_major_locator(plt.MultipleLocator(1))\nax.xaxis.set_minor_locator(plt.MultipleLocator(1))\nax.set(ylabel='Gain in average YDS per carry (in %)\\n')\n\nax.set(xlabel='\\nWeek Number (in the season)')\nax.yaxis.grid(True)   # Show the horizontal gridlines\nax.xaxis.grid(False)  # Hide x-axis gridlines \n\nax.spines['top'].set_linewidth(0)  \nax.spines['left'].set_linewidth(.3)  \nax.spines['right'].set_linewidth(0)  \nax.spines['bottom'].set_linewidth(.3); \n\nplt.tight_layout()\nplt.show(); ","78627fc5":"sns.set_style(\"white\", {'grid.linestyle': '--'})\n\nt2 = tf.groupby(['GameId','Team'])['PlayId'].count()\nt2 = pd.DataFrame(t2)\nfig, ax = plt.subplots(figsize=(9,7))\n\nsns.distplot(t2.PlayId, kde=False, color=\"orange\", \n            hist_kws={\"linewidth\": .9, 'edgecolor':'grey'}, bins=24)\n\n## Remove the x-tick labels:  plt.xticks([])\nplt.yticks([])\n## This method also hides the tick marks\nplt.title('\\nDistribution of total number of run plays on a game basis (per team)\\n',fontsize=14, loc=\"left\")\nplt.xlabel('\\nNumber of times the ball was run in the game\\n')\nsns.despine(top=True, right=True, left=True, bottom=True)\nplt.axvline(x=22, color='black', linestyle=\"--\", linewidth=.4)\n\nplt.text(22.8, 114, r'Median: 22 carries', {'color': 'maroon', 'fontsize': 9})\nplt.gca().xaxis.set_major_locator(plt.MultipleLocator(5))\n\nplt.tight_layout()\nplt.show();","65b4aaa1":"number_plays_2018_perteam = bbb.groupby(['GameId', 'Team'], as_index=False).agg({'PlayId': 'nunique'})\n\nsns.set_style(\"white\", {'grid.linestyle': '--'})\nfig, ax = plt.subplots(figsize=(8,8))\n\n#ax.yaxis.grid(True)   # Show the horizontal gridlines\nax.xaxis.grid(True)  # Hide x-axis gridlines \n\nax.xaxis.set_major_locator(plt.MultipleLocator(5))\n\nsns.swarmplot(number_plays_2018_perteam.PlayId, color=\"b\", ax=ax)\nsns.despine(top=True, right=True, left=True, bottom=True)\n\nplt.ylabel('The Number of Teams that ran the x-axis play count value\\n', fontsize=12)\n\nplt.xlabel('\\nTotal Run Plays by a Team in an entire game', fontsize=12)\nplt.title('\\n          2018 Season: Number of Run Plays Distribution by Team\\n',fontsize=14, loc=\"left\")\n\nplt.tight_layout()\nplt.show();","fc8209b3":"df04 = tf.groupby('PossessionTeam')['Yards'].agg(sum).sort_values(ascending=True)\ndf04 = pd.DataFrame(df04)\ndf04['group'] = df04.index\n\nmy_range=range(1,33)\n\nfig, ax = plt.subplots(figsize=(9,9))\n\nmy_color=np.where( (df04.group == 'NE') | (df04.group == 'NO') | (df04.group == 'LA') , 'darkorange', 'skyblue')\n\nmy_size=np.where(df04['group']=='B', 70, 30)\n \nplt.hlines(y=my_range, xmin=0, xmax=df04['Yards'], color=my_color, alpha=0.4)\nplt.scatter(df04.Yards, my_range, color=my_color, s=my_size, alpha=1)\n \n# Add title and exis names\nplt.yticks(my_range, df04.group)\nplt.title(\"\\nTotal Rushing Yards per Team \\n(over the course of two NFL seasons)\\n\\n\", loc='left', fontsize=14)\nplt.xlabel('\\n Total Rushing Yards')\nplt.ylabel('')\n##############plt.ylabel('NFL\\nTeam\\n')\n\nax.spines['top'].set_linewidth(.3)  \nax.spines['left'].set_linewidth(.3)  \nax.spines['right'].set_linewidth(.3)  \nax.spines['bottom'].set_linewidth(.3)  \n\nplt.text(0, 33.3, r'Top Three:  LA Rams, New England Patriots, and New Orleans Saints absolutely dominating the rushing game...', {'color': 'grey', 'fontsize': 8.5})\nsns.despine(top=True, right=True, left=True, bottom=True)\n\nplt.text(4005, 2, '<-- I call these icicles', {'color': 'grey', 'fontsize': 8})\n\nplt.axvline(x=3500, color='lightgrey', ymin = .01, ymax=.82, linestyle=\"--\", linewidth=.4)\nplt.axvline(x=4000, color='lightgrey', ymin = .01, ymax=.9, linestyle=\"--\", linewidth=.4)\nplt.axvline(x=3000, color='lightgrey', ymin = .01, ymax=.43, linestyle=\"--\", linewidth=.4)\nplt.axvline(x=2500, color='lightgrey', ymin = .01, ymax=.07, linestyle=\"--\", linewidth=.4)\n\nplt.tight_layout()\nplt.show();","77163a88":"sns.set_style(\"white\", {'grid.linestyle': '--'})\nspeed = bbb.groupby(['DisplayName'])['S'].agg('max').sort_values(ascending=True)\nspeed = pd.DataFrame(speed)\nfig, ax = plt.subplots(figsize=(8,7))\nsns.distplot(speed, kde=False, color=\"indigo\", hist_kws={\"linewidth\": .9, 'edgecolor':'darkgrey'}, bins=38)\nsns.despine(top=True, right=True, left=True, bottom=True)\nax.xaxis.set_major_locator(plt.MultipleLocator(1))\nax.set_yticklabels([])\nplt.title('\\nDistribution of running speed for all players in the 2017\/2018 seasons\\n', fontsize=12, loc=\"center\")\nax.set(xlabel=\"\\nRunner Speed (yds\/sec)\\n\")\n\nplt.tight_layout()\nplt.show();","f57dc65c":"my_x = bbb.groupby('OffenseFormation')['Yards'].mean().sort_values(ascending=False).values\nmy_y = bbb.groupby('OffenseFormation')['Yards'].mean().index\n\nsns.set(style=\"white\", palette=\"muted\", color_codes=True)\nfig, ax = plt.subplots(figsize=(8,4))\n\nsns.barplot(x=my_y, y=my_x, ax=ax, linewidth=.5, edgecolor=\"black\")\n\nax.set_title('\\n2018: Avg YDS gained per play Offense Formations\\n', fontsize=14)\nax.set(xlabel='\\nOffense Formations')\nax.yaxis.grid(True)   # Show the horizontal gridlines\nax.xaxis.grid(False)  # Hide x-axis gridlines \nax.yaxis.set_major_locator(plt.MultipleLocator(1))\n\n#-----more control-----#\nax.grid(linestyle='--', \n        linewidth='0.9', \n        color='lightgray', \n        alpha=0.9,\n        axis='y'\n       )\n\nplt.ylabel(\"Avg YDS gained per Play\\n\", rotation=90)\nsns.despine(top=True, right=True, left=True, bottom=True)\n\n# Adding transparency to colors\nfor patch in ax.artists:\n  r, g, b, a = patch.get_facecolor()\n  patch.set_facecolor((r, g, b, .3))\n    \nplt.tight_layout()\nplt.show();","d1424f5b":"fig, ax = plt.subplots(1, 2, figsize=(20, 6))\ntrain.groupby('PlayId') \\\n    .first() \\\n    .groupby('OffensePersonnel') \\\n    .count()['GameId'] \\\n    .sort_values(ascending=False) \\\n    .head(20) \\\n    .sort_values() \\\n    .plot(kind='barh',\n         title='Offense Personnel # of Plays',\n         ax=ax[0])\ntrain.groupby('PlayId') \\\n    .first() \\\n    .groupby('DefensePersonnel') \\\n    .count()['GameId'] \\\n    .sort_values(ascending=False) \\\n    .head(20) \\\n    .sort_values() \\\n    .plot(kind='barh',\n         title='Defense Personnel # of Plays',\n         ax=ax[1])\nplt.show();","283aa324":"aaa = gold\naaa['IsRunner'] = aaa.NflId == aaa.NflIdRusher\nbbb = aaa[aaa.IsRunner & (aaa.Season == 2018)]\n\nfig, ax = plt.subplots(figsize=(10,6))\nax.set_xlim(150,380)\nax.set_title('2018 Season: Player Weight distribution (Runners vs Non-Runners)\\n\\n', fontsize=14)\n\nsns.kdeplot(bbb.PlayerWeight, shade=True, color=\"darkorange\", ax=ax)\nsns.kdeplot(aaa[~aaa.IsRunner & (aaa.Season == 2018)].PlayerWeight, shade=True, color='skyblue', ax=ax)\n\nax.xaxis.set_major_locator(plt.MultipleLocator(10))\nax.xaxis.set_minor_locator(plt.MultipleLocator(5))\n\n# Add transparency to colors\nfor patch in ax.artists:\n  r, g, b, a = patch.get_facecolor()\n  patch.set_facecolor((r, g, b, .3))\n\nsns.despine(top=True, right=True, left=True, bottom=True)\n\n# Turn off tick labels\nax.set_yticklabels([])\n#ax.set_xticklabels([])\n\nax.set(xlabel=\"\\nPlayer Weight\\n\\n\")\nplt.legend(title=\"Category:  Ran the ball, or didn't run the ball\", loc='upper right', labels=['Runners', 'Non-Runners'])\nplt.tight_layout()\nplt.show();","69f6023a":"player_profile=aaa.loc[:,['DisplayName','Position','NflId' 'PlayerBirthDate', 'PlayerWeight', 'PlayerCollegeName']].drop_duplicates()\nplayer_profile_2018=aaa[aaa.Season==2018]\nplayer_profile_2018 = player_profile_2018.loc[: ,['DisplayName','Position','NflId' 'PlayerBirthDate', 'PlayerWeight', 'PlayerCollegeName'] ].drop_duplicates()\n\nplayer_profile_2018[\"kg\"] = player_profile_2018[\"PlayerWeight\"] * 0.45359237\n\nz = player_profile_2018.groupby('Position')['PlayerWeight'].agg(['min', 'median', 'mean', 'max']).round(1).sort_values(by=['median'], \n                                                                                                                   ascending=False)\nz['Avg Mass (kg)'] = (z['mean'] * 0.45359237).round(1)\nz","04589fec":"from scipy import constants\nplt.style.use('dark_background')\nfig, ax = plt.subplots(figsize=(12,12))\n\n#Specifically only using runners like RB, HB, and WR...\nttt = bbb[bbb.Position.isin(['RB','WR','HB'])]\n\nttt['kg']=ttt[\"PlayerWeight\"] * 0.45359237 \/ scipy.constants.g\n\n# the momentum is just mass (in kg) X speed in m\/s (so convert from yards\/sec to mps)\nttt['True Momentum']=ttt['kg'] * ttt['S'] * 0.9144 \ntips = ttt[['True Momentum', 'Yards']]\n\nsns.scatterplot(x=\"True Momentum\", y=\"Yards\", data=tips, s=4, ax=ax, color='lime', markers='o', edgecolors='lime')\n\nplt.title('Correlation between Yards Gained and Player Momentum\\n',fontsize=14)\nplt.suptitle('Kinetic Momentum',fontsize=10, x=0, y=1,ha=\"left\")\n\nax.set(xlabel=\"Player Kinetic Momentum $\\Rightarrow$\\n\")\nax.set(ylabel=\"Yards Gained  $\\Rightarrow$\\n\")\n\nsns.despine(top=True, right=True, left=True, bottom=True)\nplt.xticks([])\nplt.tight_layout()\nplt.show();","b99c188c":"plt.style.use('dark_background')\nfig, ax = plt.subplots(figsize=(12,12))\n\n#Specifically only using runners like RB, HB, and WR...\nttt = bbb[bbb.Position.isin(['RB','WR','HB'])]\n\nttt['kg']=ttt[\"PlayerWeight\"] * 0.45359237 \/ scipy.constants.g\n\n# the momentum is just mass (in kg) X speed in m\/s (so convert from yards\/sec to mps)\nttt['True Momentum']=ttt['kg'] * ttt['S'] * 0.9144 \ntips = ttt[['True Momentum', 'Yards']]\n\nsns.scatterplot(x=\"True Momentum\", y=\"Yards\", data=tips, s=4, ax=ax, color='fuchsia', markers='o', edgecolors='fuchsia')\n\nplt.title('Correlation between Yards Gained beyond 6 and Player Momentum\\n',fontsize=14)\nplt.suptitle('Kinetic Momentum',fontsize=10, x=0, y=1,ha=\"left\")\n\nax.set(xlabel=\"Player Kinetic Momentum $\\Rightarrow$\\n\")\nax.set(ylabel=\"Yards Gained  $\\Rightarrow$\\n\")\n\nsns.despine(top=True, right=True, left=True, bottom=True)\nax.set_ylim(6,100)\n\nplt.xticks([])\n\nplt.tight_layout()\nplt.show();","47b71c42":"plt.style.use('dark_background')\nfig, ax = plt.subplots(figsize=(12,12))\n\nttt = bbb[bbb.Position.isin(['RB','WR','HB'])]\n\n\n# true mass in kg \nttt['kg']=ttt[\"PlayerWeight\"] * 0.45359237 \/ scipy.constants.g\n\n# F = ma \nttt['Force_Newtons']=ttt['kg'] * ttt['A'] * 0.9144\ntips = ttt[['Force_Newtons', 'Yards']]\n\nsns.scatterplot(x=\"Force_Newtons\", y=\"Yards\", data=tips, s=4, ax=ax, color='orange', markers='o', edgecolor='orange')\n#sns.lmplot(x=\"Force_Newtons\", y=\"Yards\", data=tips)\n\nplt.title('\\nCorrelation between Yards Gained and Player Kinetic Force\\n',fontsize=14)\nplt.suptitle('Kinetic Force',fontsize=10, x=0, y=1,ha=\"left\")\n##plt.text(x=4.7, y=14.7, s='Sepal Length vs Width', fontsize=10, weight='bold')\n\nax.set(xlabel=\"Player Kinetic Force$\\Rightarrow$\\n\")\nax.set(ylabel=\"Yards Gained $\\Rightarrow$\\n\")\nsns.despine(top=True, right=True, left=True, bottom=True)\n\nplt.xticks([])\n\nplt.tight_layout()\nplt.show();","ccc835ef":"> **INSIGHT**: &nbsp; There appears to be a moderate connection between high momentum and yards gained, i.e. beyond a certain momentum threshold, a marked increase in the number of yards beyond 6 is seen...","c836fed9":"# *Offense Personnel \/ Defense Personnel*\nLets have a look at what the top personnel groupings are for the offense and defense","4e885976":"### *First Plot:* \n  * Barplot of average yards gained per game per week    \n  \n### *Second Plot:*\n  * Our baseline is week 1, and then from there, we compare where the run game is at week by week to that baseline, i.e. if in week 5 the average yards\/carry is 10% more compared to week 1 game, then we graph that value in the plot...\n  * Progress:\n    * It appears in the first month of the season, there is a strong climb in runner performance.  By week 6, the runners are peaking in terms of productivity.  Potential fatigue factor kicks in two months into the season, then strong push for the second half of the season as the teams are getting stronger and stronger, making a run towards the playoffs. ","20e913f9":"### ***The Top Five Formations:***\n\n1. 4 DL, 2 LB, 5 DB\n  * 4 linemen, 2 linebackers, and 5 defensive backs (6 in the 'box')\n2. 4 DL, 3 LB, 4 DB\t\n  * your conventional *4:3* type defense (7 in the 'box')\n3. 3 DL, 4 LB, 4 DB\n  * your conventional *3:4* type defense  (7 in the 'box')\n4. 2 DL, 4 LB, 5 DB\t\n  * four linebackers, with only 2 guys on the line  (6 in the 'box')\n5. 3 DL, 3 LB, 5 DB\n  * a type of formation build to stop the pass (6 in the 'box')\n ","3fbdd00d":"### *Interesting outcomes to look~*\n* This analysis is important to understanding how defense is set up, its critical to understanding how to predict run productivity\n* The `#1` used defensive scheme actually resulted in slightly longer yardage plays, but also slightly higher yards lost for the offense\n* You can see how the first and second scheme is relatively good at containing the run, and as you get lower on the y-axis, you are giving up higher and higher yards\n* The most common is a 4-2-5, which is a good coverage against the pass (you have 5 DB). And since roughly 35-40% of NFL plays are runs, and the other percentage are pass, you can see why this is common. \n* With a median yardage gain allowed of 4 yards, its pretty good against the run, AND you can see that in some cases you can get losses of up to -6 yards. 75% of the runs against this defense are held to 6 yards or less. \n* The next most popular is your typical 4-3 defense, where you can see it holds runs to a bit shorter yardage, obviously since you have an extra linebacker involved in the tackling. But what i find interesting is that the third most common defense (3-4) has almost PRECISELY characteristics based on the data, look at the boxplots.  The 3-4 is run less than the 4-3 and the 4-2, but it seems to hold up pretty well against the run. The 3-4 in a flexible defense, and provides some great advantages when it comes to rushing the quarterback and defending against the pass. The 3-4 can be confusing for opposing quarterbacks, who find that wherever they look downfield there is a linebacker.  IF one could argue that the 3-4 is a better defense than the 4-3 in terms of rushing the QB, AND it holds up relatively well against the run (as it appears it does), then it would appear more teams SHOULD be running the 3-4 !  \n* The `#2` and `#3` most occurring run defense resulted in almost precisely the same running yards allowed distribution\n* Having 6 men on the line may appear to be a great idea against the run (and it does seems to 'squash' the run), you see that although it lowers the potential yards a runner could get, it offers no real ability to gain you negative yards on run plays, and its penetration ability are limited.  It does work well against runs, BUT if the play is a pass, you are devasted as you have very few DB to stop the pass. \n* When there are nine defensive players in the box, 25% of the runs gained LESS than 0 yards, and half the runs were for LESS than 2 yards. \n* It is very rare for defenses to line up with four or less players, but when they do, the Offense seems to gain a fair amount of yards.","d29f5130":"<div class=\"h4\"><i>Yards Gained vs Box Defender Count:<\/i><\/div>\n* Plotting the distribution of yards gained vs number of defenders in the box.  We will call this the defensive 'density' count...\n* A helpful reference image I created is shown below. \n\n<img src=\"https:\/\/raw.githubusercontent.com\/tombresee\/Temp\/master\/ENTER\/thebox.png\" width=\"400px\">","4aed0b3e":"# ***Deep Dive with an extensive EDA***","efed2a97":"* What we find interesting is the peaks are not **that** pronouced though, i.e. there are many teams that will run the ball 17, 18, 19, 20, up to 22 times in a single game, and also a fair amount of teams that will run the ball 24, 25, 26, up to 27 times in a single game...\n* It should be noted that this is an intriguing factor:\n  * In a single game, there are not a tremendous number of run plays either way, meaning our sample size per team per game of run plays is somewhat limited, so deriving a predictive model will contain many factors with a number of samples that is relatively small, offering a challenge...","f1e26d22":"# *Splitting data into Training\/Val*","5412e147":"## *2018 - Top 10 Longest Rushes:*\n### *Let's take a look at the top 10 most spectacular rushes:*","f4d2952f":"* We can see that all of the linemen are just over 300lbs. And they make up a LARGE distribution of the players on the field, i.e. there are some BIG BOYS on that field.  \n* It is suprising that FB (fullbacks) are as heavy as they are.  I would imagine one could argue that two things are pretty critical to determining the performance of a running back: \n  * How big are the offensive linemen ???  (ideally we knew how strong they were as well, but no information contained about that)\n  * How big is the fullback ?  A fullback with some size would really help blocking for the running back and I believe would be directly proportional to the success of the runningback.  \n  * Look at how large the OTs (offensive tackles) are.  One would imagine a run off the OT being a smart play, IF the defensive linebacker at that area was smaller as well...","52742d5c":"* When there are nine defensive players in the box, 25% of the runs gained LESS than 0 yards, and half the runs were for LESS than 2 yards. \n* It is very rare for defenses to line up with four or less players, but when they do, the Offense seems to gain a fair amount of yards.","0eabf612":"### *Analyzing Player Speeds:*\n> The very fastest players on the team are **not** always the ones that run the ball alot, in fact, WR (wide receivers) are generally quite fast, but rushing the ball in the NFL is not a track meet.  It could be if track introduced 300lb guys every 3 yards that were trying to level you. Let's examine the speeds we observed. ","75f1b098":"> **INSIGHT**: &nbsp; For a sample size of all NFL rush plays over the course of <u>two entire years<\/u>, only **7.83%** of the runs were on 3rd down, and less than **1%** were rushes on 4th down. ","f50d4677":"## *Inferences:*\n* We are gathering up the total number of running plays of all of the combined teams over the entire 2018 seasons, and creating a distribution of the weight of the runner who made the play (in orange), and also during those SAME plays, gathering up the weight distribution of those who did NOT run the ball.  I believe this gives us a very good idea of the weights of the players that were **on** the field during the season (broken out by rushing player versus non-rushing player), and starts to paint a picture of being able to predict the expected yards gained during running plays. \n  * I care about **who** is on the playing field here, that is the key for future prediction models. \n  * As long as the weights of the players are updated throughout the season, this also is an extremely granular way of determining kinetic energy on the field as well.\n  * The real point is this - if they aren't on the field, or aren't on the field much, do I really care what their weight is when i figure out my model ? \n* Thus, of those that ran the ball in the 2018 NFL season, they had an average weight of **217 lbs**, and a median weight of 220 lbs. \n* Non-Runners had a pretty wide distribution, obviously depends on position they played...\n  * There is a pronounced peak at 310lbs, which is our linemen...","9bde6868":"Below is a quick way of referring to the pertinent column without having to actually type out the full name.  Just use `df.iloc[:,<the number index of column below>]`. i.e. listing out df.Team you could use `df.iloc[:,2]`.  This helps when trying to list out numerous columns...where you could then enter `df.iloc[:,[2,4,6,7,10]]`.  I find it faster...","3ecaed1c":"### *Total Rushing Yards per NFL Team:*\n* The following shows the total run yards per team, over the course of two individual seasons.  \n* We use the total over two years to show the effect the running game can have on a team's performance.  We will plot the yards on a per game average basiss, but the concern here is to show the vast amount of offensive yards that the top teams had over the others.  \n* The New England Patriots won the 2018 season superbowl (against the LA Rams).  The running offense was a major factor in that. \n* **Note:** I include a new plotting term called **`icicles`** to enhance the visualization of barplots.  Using `icicles`, one can not clutter the plot excessively but still relay x-axis values superimposed onto the chart.  Thus it is not necessary to cover the entire plot with a grid, but rather only the section that specifically needs it and where it is pertinent.  \n  * *This term does not currently exist in mainstream visualization, I'm creating it.*","fa751dfe":"* The median number of times there is a run play per team in a game is 22, i.e. if a single running back was used, he would be running roughly 22 plays per game, but there is a fairly wide variation here from 10 up to about 40 plays in a game.  30 is considered a fair number of plays for a running back, beyond 40 is considered *extreme* for a single player...\n* Distribution appears to be bi-modal, where there is a peak at 20 and a peak at about 28 carries.  One could argue this could even be the difference between teams that run the ball a fair amount (as part of their offensive strategy), and those that choose to prefer the pass with a balance of some running plays to keep the defense off guard...\n* This does bring up the fact that to play in the NFL, as a premier running back you will be getting the ball many times, and **durability** becomes a major factor as the season goes on ! \n* Also, remember that the RB does not run every run play, sometimes there are substitutes made","1d6f0825":"<div class=\"h4\"><i>Yards vs Down:<\/i><\/div>\n* Plotting the distribution of yards by series 'Down'.  Note that we have configured many of the plots to show granular ultra-precise 1-yard increments ! \n* In this case, removed a few outliers so as to see the general trend of the data \n    ","3282d837":"*The above plot shows a big difference in yards gained when looking at the number of defenders in the box. \nIf you've got 8+ defenders in the box you're looking to stop the run big time! And you can see the average rush yardage is lower. \nConversely, having 3 men in the box (maybe because they are in prevent defense for a long yard to gain) allows for a average return of about 10 yards!*","036a9575":"### *Player Profile - Mass:*\n* Let's take a look at the weight distribution now for every player in the 2018 NFL season. This time we will just examine all players who played in the season and were on the roster, to get a ballpark on some differences in weight vs position:","b75e012b":"## *Yards gained average vs season week number:*\n* Plotting average yards gained per play, on a week by week basis as the season transpires","f131e6b3":"* First and second down we see almost an identical distribution of runs (i.e. In the first two quarters, the teams run about the same distribution of runs in the quarters)\n  * What we find suprising is that in the first two quarters, examining the plots we see that 25% of the plays generated **less** than 1 yard total gained.  \n* In the third down, we see a slight drop in the number of yards gained, and the median yards gained has dropped a solid yard.  In a game of inches, this is a big deal. \n* Fourth down performance is relatively poor.  (insert number of n)","c2eec3b2":"# *Neural Network Optimizer*","565fb413":"# *Weight Optimization Blending*","70e9a965":"### *Collisions:*\n* Every runningback should PREFER inelastic collisions ! \n\n* Why ? **Because it creates the separation that is their advantage** \n\n* How ? Ideally with an alpha less than 45 degrees - this way they bounce off and keep going somewhat in the x-axis direction, but ideally it is not an inelastic collision with alpha of 0 or near it, that is going to completely stop runningback momentum \n\n* Effectively a runningback wants to maneuver, and when maeuvering is no longer much of an option, to 'bounce' off the tackler\n\n\n### *Why is it so important to analyze the governing dynamics ?*\n  * Check out this *2016 NFL Combine Report* on Dallas Cowboy runningback Ezekiel Elliott\n  * Source: `http:\/\/www.nfl.com\/player\/ezekielelliott\/2555224\/combine`\n<br>\n<img src=\"https:\/\/github.com\/tombresee\/Temp\/raw\/master\/ENTER\/elliott.png\" width=\"800px\">\n* i.e. the key to running effectively I believe is contained within the specific verbage above, these are some key factors for producing actual yards... \n","cee250f8":"* >Note: &nbsp; Creating a new term called 'unit grid'. When creating plots where the y or x axis, depending on the plot, is in a relatively short magnitiude range (lets say approximately 20 units or below), I find it helps to actually use the grid lines to expand to the plot on a somewhat granular basis.  When that is needed or helpful, spacing the grid at 'unit' levels shall be known as 'unit grid', i.e. the grids are every 1 unit on the scale.  I think it helps the viewer quickly quantify actual values, to the point where it approaches the information transfer of a barplot...","cca75516":"* **Rule of thumb:**  double the yards\/sec value and you will get mph.  Why ?  Because 3,600 is almost 3,520. (i.e. 3 feet per yard, 1,760 yards per mile, 3,600 seconds per hour, and doubleing 1,760 gets you 3,520, which is very close to 3,600)\n* Sometimes the runner is not moving at the time of the handoff to him, and other times, he is running as fast as he can FROM a standstill.  The question then becomes how quickly can a running back accelerate from zero to full speed. The data we have been given is the speed at the time of the handoff.  \n  * Per competition director: &nbsp; *\"in this contest, you're only receiving this tracking information at the moment a handoff is made\"*\n* One of the biggest misconceptions that emerges from the NFL Combine each year is the importance of 40-yard dash times, when in reality the 10-yard split is a **very** important indicator of how well the runningback may do in the NFL.  Explosive speed trumps raw speed...","2aeec654":"## *Distribution of Yards gained vs Defenders in the Box*","56bac095":"# *Defenders In The \"Box\"*\n\nThe number of defenders in the box is an important part of stopping the running game. Typically defenses will add more players to this area of the field when they really want to stop a run, this comes at a cost leaving wide recievers less covered.\n\n![](https:\/\/i0.wp.com\/www.footballzebras.com\/wp-content\/uploads\/2019\/02\/Slide1.jpg?resize=596%2C317)","4a285cc8":"# *3-4 vs 4-3 vs 4-2 (nickel) vs 2-4 Defense - Impact on Yards gained?*\n\nNext we will use the defensive scheme data to see how the difference in down linemen impacts the yards gained.\nWhile there are many defensive packages, commonly defenses will run a 4-3 or 3-4 defense.\n\nYou can read more about them here: https:\/\/bleacherreport.com\/articles\/1289011-showcasing-the-biggest-differences-in-the-4-3-and-3-4-pass-rush\n\nBasically you have \"Down linemen\" and \"Linebackers\" the number of players you put in each of these positions determines the defensive scheme.\n\n_ | _\n- | - \n![](https:\/\/usercontent2.hubstatic.com\/14167861_f496.jpg) | ![](https:\/\/img.bleacherreport.net\/img\/images\/photos\/002\/822\/262\/07d6727c91db0f152422689a0c095c4c_crop_north.jpg?h=533&w=800&q=70&crop_x=center&crop_y=top)\n![](https:\/\/usercontent2.hubstatic.com\/14148753_f496.jpg) | ![](https:\/\/img.bleacherreport.net\/img\/images\/photos\/002\/811\/505\/1f3630fb49f2e47dd3d62f01f6956940_crop_north.png?1395418910&w=630&h=420)","ed7625b5":"### *Correlation between Player's Weight and Jersey Number:*\n*  If you run a correlation between generalized player weight and jersey number and position, you see high correlation, but why ? \n*  We accidentally have a good feature to use, which is on the surface jersey number shouldn't matter in any of this, **but** if we change JerseyNumber into a categorical bin (1-19), (20-29), we see that it can be quite helpful.  Because only certain positions are actually allowed to wear certain ranges of jersey numbers.  Thus during our modelling we will in fact include jersey number into bins.  ","07778661":"## *Insights from the above plots*\n* **Game 1:**\n  * A **high number** of run plays (49 total plays from the two teams), with one run for over 25 yards (a big gain), and a fair amount of long runs.  \n  * Only two runs produced negative yards (one hurt, it was for a loss of 5 yards), so looks like the Offense on both teams is doing pretty good, with only two of the run play for zero-yards gained.  \n  * Good game to watch to see trends in running, we have a lot of sample points here.  \n  * We can also analyze WHY there were so many long run plays, i.e. what defensive formation was being run in this game ?  This game was most likely a battle between two teams with strong runningbacks. \n* **Game 2:**\n  * Longest run was for 14 yards, interestingly:  \n  * **10** runs were zero-yard gain, \n  * **6** were negative gain, and in general we see very little yardage gained even when it was positive.  \n  * There is some **excellent**  defense going on in this game, it must have been a hardcore defensive battle...\n* **Game 3:**\n  * One very long run for **40 yards!**  \n  * Let's think about this for a second:  If the offense runs lets say 20 run plays in a game, and most of them were for 2-4 yards, you can quickly see how devasting one run of 40 yards can be.  \n  * A good NFL rusher can gain 100 total yards in a game, but if one of those alone was for 40 yards, that is a BIG deal.  \n  * And you can also see how a running back is worth his weight in gold, as he can change the outcome of a game with yardage gains.  \n* A good **rule of thumb** is that a pretty good running back is averaging over 4 yards per carry, and below that is 'ok'","98c1440d":"# *The Ball Carriers*\nLet's look at ball carriers (the players who typically are handed off the ball) and see if any individual players stand out. We will only look at players with more than 100 plays. Then we can plot the top and bottom 10 players.","d5a715a8":"Let's now begin: Initial Examination of overall running (rushing) yards per play:\n* Let's take a look at the most important feature, the yards, which we will need to be able to predict going forward after our machine learning model is created","60586387":"Let's examine the same values, but broken out by percentage, i.e. what percentage of the time did the run play go against a particular DefensePersonnel Schema, and lets grab the top 10, since after that there is an extremely small percentage of plays incorporating that style:","27c457d0":"<div class=\"h4\"><i>Yards vs Quarter of the Game:<\/i><\/div>\n* Plotting the distribution of yards by game quarter, where 5Q symbolizes overtime...","298c328a":"### *Number of run plays called per NFL game per team:*\n* Histogram plot of the total number of run plays called per game per season. \n* This takes into consideration every game played, where each team takes turns calling run plays (and contains both 2017 and 2018 data)","4ea609ec":"## *Defensive Personnel's impact on yard gained*\nWe can see that there are about 5 common defensive packages that are used. How does the way the defense is aligned correlate with the offensive production (yards gained)?\n\nWhat stands out at first glance is that the `4DL - 4LB - 3DB` Defense shows a different distribution in yards gained.\n\nPer wikipedia: https:\/\/en.wikipedia.org\/wiki\/4%E2%80%934_defense\n\n*Originally seen as a passing defense against the spread, modern versions of the 4-4 are attacking defenses stocked with multiple blitz packages that can easily be concealed and altered.*","a61ce15a":"### *Stopping a truck:*\n* Converting all the runner's weight values to kilograms\n* THEN we will convert the runner's weight (which is now in kg) to MASS, which is NOT the same thing as weight. \n  * Technically a body's mass is its weight (in kg) divided by the gravitational constant $g$, which is 9.8 m\/s^2, where that $g$ is really the `standard acceleration of gravity`","8d0114b3":"* There is a relatively large difference in the yards gained based on offensive scheme\n* **Wildcat** - doesn't appear to be that effective.  But it should be noted that it is not run very often in the NFL.  But when it is, it performs pretty poorly.\n* **Shotgun** - performs surprisingly low compared to the other offensive schemes.  One could argue it is a kinda pass play, but more offense* **Empty** - is the clear winner. 'Empty' simply means there is no back in the backfield.  All five eligible receivers are assembled at the line of scrimmage in some fashion.\n* The **I-formation** is one of the more tried and true offensive formations seen in football, and you will likely see it used in short-yardage running siturations.  The I-formation places the runningback 6 - 8 yards behind the line of scrimmage with the quarterback under the center and a fullback splitting them in a three-point stance;  which also means that it is highly likely the defense can see where the runningback is going, but then again, he will probably have a fair amount of speed by the time he hits the line of scrimmage.","0a4d4359":"### *Offense Formation Strategies:*\n* We will now examine which offense formation strategies appeared to result in the best yardage gained","0bddf6bf":"### *Diving Deeper:  *\n\nThe below plot is an exact count visualization of the number of run plays that occurred in a game, specifically in the entire 2018 season \n* By using the swarmplot, we see the precise distribution - and this gives a better representation of the distribution of values (where 1:1 viz, i.e. one dot is one game that had a specific count of run plays)\n* We also can **quickly** see the second, third, and fourth most run play count in a random game","055ac5e1":"# *RandomForest Optimizer*","5f6c1132":"# *Building Neural Network and RandomForest Regressor*","5aff1011":"# *Training the Model*","8437e06c":"### *Player Physics*\n*Towards a deeper understanding of the game of football in relation to Newtonian Physics*\n\nWe will focus on the 2018 Season exclusively for this analysis.\n\n### *Weight Distribution:*\n* Let's dive into examining player weight information","746bcd33":"<u>The first was NOT a kickoff return, it was a **handoff**<\/u>.  &nbsp; Now look at HOW far back he is in the endzone !   \nThe guy ran probably 107 yards on that play (but gets credit for 99 yards from line of scrimmage at their own 1 yard line; that day he ran for a total of a staggering 238 yards).  This tied the NFL record for longest rush, set 35 years earlier.   \n<img src=\"https:\/\/raw.githubusercontent.com\/tombresee\/Temp\/master\/ENTER\/unbelievable.png\" width=\"700px\">\n\nDerrick Henry from the Tennessee Titans is a [*beast*](https:\/\/twitter.com\/NFL\/status\/1070863698791550976?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1070863698791550976&ref_url=https%3A%2F%2Fwww.theguardian.com%2Fsport%2F2018%2Fdec%2F06%2Fderrick-henry-touchdown-titans-jaguars-nfl-99-yards).  \nThe best part:  He celebrated by striking the Heisman pose, which is perfectly fine, since he won it in 2015.  \n\n1. Derrick Henry - Tennessee Titans\n1. Lamar Miller\t- Houston Texans \n1. Nick Chubb\t- Cleveland Browns\n1. Adrian Peterson\t- Washington Redskins\t\n","96c13347":"<div class=\"alert alert-block alert-warning\">\n<b>Warning:<\/b> It is important to list the sample size for each of the histograms, because one may draw the erroneous conclusion that the number of times the ball was run was the 'same' for each of the downs, when in fact it wasn't...<\/div>","3ef56ea7":"## *Anchoring offense moving left from {0,0}*","52489d23":"<div class=\"h3\"><i>Summary of our dataset:<\/i><\/div>\n<p style=\"margin-top: 50px\">It is always important to look at our entire dataset and examine the descriptive statistics:<\/p>\n\n&ensp; **Number of football teams in the NFL:** &ensp; 32  \n&ensp; **Number of unique NFL players in our dataset:** &ensp; 2,231  \n&ensp; **Number of 2017 Season players:** &ensp; 1,788  \n&ensp; **Number of 2018 Season players:** &ensp; 1,783   \n&ensp; **Number of players playing both yrs:** &ensp; 1,340    \n&ensp; **Number of players allowed per team:** &ensp; 53    \n&ensp; **Number of games a team plays in a NFL season:** &ensp; 16      \n&ensp; **Number of weeks in a NFL season:** &ensp; 17   \n&ensp; **Total unique NFL games played per season:** &ensp; 256  \n&ensp; **Number of NFL seasons in the dataset:** &ensp; 2  \n&ensp; **Dataset NFL season years:** &ensp; 2017 and 2018 Seasons    \n&ensp; **Dataset total number of unique NFL games:** &ensp; 512  \n&ensp; **Number of unique run plays in our dataset:** &ensp; 23,171  \n&ensp; **Number of 2017 Season run plays:** &ensp; 11,900  \n&ensp; **Number of 2018 Season run plays:** &ensp; 11,271  \n&ensp; **Number of unique NFL jersey numbers:** &ensp; 99  \n&ensp; **Number of players on roster that never played:** &ensp; 11  \n&ensp; **Size of a typical NFL field (in acres):** &ensp; 1.32","516ee4ae":"# *Snap to Handoff Time*\nDifferent types of designed runs develop differently, one way to understand the play design is by looking at the time it takes the quarterback to hand the ball off to the rusher. Lets take a look at the distribution of seconds taken.","9d589d9f":"*Due to lack of percision we don't have much detail about the snap time. Additionally it looks like the sparcity of data for seconds that are not 1 or 2 - cause the average Yards to have large variance.*","bc28792d":"## *Running strategies change as the game goes on...*\nHow are the yards gained impacted by the time in the game? Many times teams run the ball at the end of the game when they are ahead, in order to run out the gameclock and win. In these situations the run is expected more and defenses can scheme against it.\n\nIt doesn't look like the quarter has a huge impact on the running yards gained.","4bcd0e69":"### *Yards Gained vs Defensive Personnel 'Groupings':*\n* Plotting the distribution of yards gained vs Defensive Formation...\n* First lets start by looking at the combined 2017\/2018 dataset formations by play count (i.e. how many times in the two year season data that particular Defensive Schema were run)\n* We will then look exclusively look at 2018 stats","8e213260":"# *Feature Importance*","4c67b97e":"Every game has a unique id, every play has a unique play id, and all single play related data is included such as game venue information, player information, and even the offense and defense formations at the time of the snap. This is really detailed information and its amazing they have this much data available on a play by play basis, the sky is the limit in terms of what you could do from an analysis perspective. I especially think that the score over the course of time may impact the manner and style of run plays.\n\n"}}