{"cell_type":{"2c09a0d0":"code","92551f9c":"code","3d65023b":"code","b08e929c":"code","4b2b3972":"code","68421020":"code","8e758835":"code","1f5b404b":"code","15f28366":"code","31133ee2":"code","43a5296d":"code","fcab96be":"code","25566ee8":"code","cc388f51":"code","7da565e0":"code","b31abf4f":"code","40a1a713":"code","c58e15b9":"code","cdfcb039":"code","3e61b018":"code","3feeb9a3":"code","d5ee7bfe":"code","8a734e62":"code","dc45adcf":"code","e8e66188":"code","8a407c3f":"code","020ad121":"code","93844b2e":"code","6ce1e148":"code","d97a6c92":"code","30abae5a":"code","1affbba8":"code","9ff154b9":"code","fbd82cbf":"code","02df39de":"code","5e628b29":"code","7117296f":"code","4ae05de8":"code","b2607135":"code","d9714442":"code","7c2d8eff":"code","00882d1f":"code","90c9a52b":"code","be8c2f74":"code","1a3565cb":"code","f4c0e4c5":"code","17f74532":"code","337114af":"code","9507ae67":"code","af960715":"code","c7671b69":"code","15a3d74a":"code","5ba32460":"code","6f4d1eb6":"code","f8cb4b69":"code","dcc75397":"code","df4fb5f4":"code","b5ab6c88":"code","d68cba6e":"code","28317e5b":"code","dacd9bd0":"code","0fbd1e1f":"code","757f7f4b":"code","a9eae326":"code","f02be904":"code","649b4608":"code","898acfbd":"code","3c7db85b":"code","539ef716":"code","018ec786":"code","0eed39c1":"code","8225b98d":"code","9d3be38e":"code","435ba11b":"code","25c686aa":"code","65738894":"code","41c20d78":"code","00039a3d":"code","eda21095":"code","a8240b8c":"code","2a4f7503":"code","fb91834a":"code","f00ecb00":"code","81486fc5":"markdown","7841273f":"markdown","5515f90e":"markdown","9890a3d6":"markdown","b7c55795":"markdown","9498fc47":"markdown","7baeb612":"markdown","b3dea934":"markdown","443521be":"markdown","b5b862f6":"markdown","d7c337c5":"markdown","5267c329":"markdown","ad74cd5c":"markdown","72138c09":"markdown","c100bcd1":"markdown","20a2bb52":"markdown","8882914c":"markdown","64b26fc0":"markdown","ddaa4577":"markdown","36a3f1d8":"markdown","690380fb":"markdown","7afbfc27":"markdown","b8541134":"markdown","556ad3c7":"markdown","4f2091c5":"markdown","17d2443a":"markdown","74d00e20":"markdown","d4892df5":"markdown","c57f2329":"markdown"},"source":{"2c09a0d0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","92551f9c":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3d65023b":"train_df = pd.read_csv('\/kaggle\/input\/neolen-house-price-prediction\/train.csv', index_col='Id')\ntrain_df","b08e929c":"test_df = pd.read_csv('\/kaggle\/input\/neolen-house-price-prediction\/test.csv', index_col='Id')\ntest_df","4b2b3972":"train_df.info()","68421020":"# NANs check\ntrain_df.isnull().sum()","8e758835":"# Only Columns with NANs check\ntrain_df.loc[:,train_df.isnull().any()].isnull().sum()","1f5b404b":"train_df[train_df['PoolQC'].notnull()][['PoolQC', 'SalePrice']]","15f28366":"train_df[train_df['MiscFeature'].notnull()].groupby(['MiscFeature'])['SalePrice'].max()","31133ee2":"train_df[train_df['MiscFeature'].notnull()].groupby(['MiscFeature'])['SalePrice'].min()","43a5296d":"train_df[train_df['Fence'].notnull()].groupby(['Fence'])['SalePrice'].max()","fcab96be":"train_df[train_df['Fence'].notnull()].groupby(['Fence'])['SalePrice'].min()","25566ee8":"train_df[train_df['Alley'].notnull()].groupby(['Alley'])['SalePrice'].max()","cc388f51":"train_df[train_df['Alley'].notnull()].groupby(['Alley'])['SalePrice'].min()","7da565e0":"train_df.describe()","b31abf4f":"train_df.corr()","40a1a713":"train_df.describe().loc['min']","c58e15b9":"plt.figure(figsize=(12,12));\nsns.heatmap(train_df.corr());","cdfcb039":"plt.figure(figsize=(8,8));\ntrain_df['SalePrice'].hist(bins=100);\nplt.title('Sale Prices of Houses');","3e61b018":"train_df['SalePrice'].describe()","3feeb9a3":"train_df['MSZoning'].value_counts().plot(kind='barh')\nplt.title('Zoning Classification Of The Sale');","d5ee7bfe":"train_df['Street'].value_counts()","8a734e62":"train_df[train_df['Street'] == 'Grvl']","dc45adcf":"train_df['Utilities'].value_counts()","e8e66188":"train_df[train_df['Utilities'] == 'NoSeWa']","8a407c3f":"plt.figure(figsize=(8,8));\ntrain_df['Neighborhood'].value_counts().plot(kind='barh');\nplt.title('Neighborhood where Houses were Sold');","020ad121":"train_df['BldgType'].value_counts().plot(kind='barh');\nplt.title('Type of Dwelling');","93844b2e":"train_df['OverallQual'].value_counts(sort=False).plot(kind='barh');\nplt.title('Rate of Overall Material and Finish of The Houses');","6ce1e148":"train_df['OverallCond'].value_counts(sort=False).plot(kind='barh');\nplt.title('Rate of Overall Condition of The Houses');","d97a6c92":"train_df['Foundation'].value_counts().plot(kind='barh');\nplt.title('Type of Foundation of The Houses');","30abae5a":"train_df['HeatingQC'].value_counts().plot(kind='barh');\nplt.title('Heating Quality and Condition');","1affbba8":"train_df.groupby(['YearBuilt'])['SalePrice'].mean().plot();\nplt.title('Yeas of Built VS Mean Sale Price');","9ff154b9":"train_df.groupby(['YearBuilt'])['SalePrice'].mean().head(10)","fbd82cbf":"plt.figure(figsize=(10,15));\ntrain_df.groupby(['YrSold'])['MoSold'].value_counts(sort=False).plot(kind='barh');\nplt.title('Time of Sale');","02df39de":"# Drop Almost NaNs and One Catagory columns\ntrain_df = train_df.drop(['Alley','PoolQC', 'Fence', 'MiscFeature', 'Utilities', 'Street'], axis=1)\ntest_df = test_df.drop(['Alley', 'PoolQC', 'Fence', 'MiscFeature', 'Utilities', 'Street'], axis=1)","5e628b29":"print(train_df.shape)\nprint(test_df.shape)","7117296f":"# OneHot Enconding Catagorical columns\nEncoded_train = pd.get_dummies(train_df)\nEncoded_test = pd.get_dummies(test_df)","4ae05de8":"print(Encoded_train.shape)\nprint(Encoded_test.shape)","b2607135":"# Align two dataframes\ntrain1, test1 = Encoded_train.align(Encoded_test, join='right', axis=1)","d9714442":"print(train1.shape)\nprint(test1.shape)","7c2d8eff":"train1.loc[:, train1.isnull().all()].isnull().sum()","00882d1f":"# Drop all NaNs columns\ntrain1 = train1.drop(['RoofMatl_ClyTile', 'RoofMatl_Roll', 'Exterior1st_CBlock', 'Exterior2nd_CBlock', 'Heating_Floor'], axis=1)\ntest1 = test1.drop(['RoofMatl_ClyTile', 'RoofMatl_Roll', 'Exterior1st_CBlock', 'Exterior2nd_CBlock', 'Heating_Floor'], axis=1)","90c9a52b":"print(train1.shape)\nprint(test1.shape)","be8c2f74":"print(train1.columns == test1.columns)","1a3565cb":"# x & y\nx = train1\ny = np.log(train_df['SalePrice'])","f4c0e4c5":"print(x.shape)\nprint(y.shape)","17f74532":"from sklearn.model_selection import train_test_split","337114af":"x_train, x_valid, y_train, y_valid = train_test_split(x, y, test_size = 0.2, random_state = 42)","9507ae67":"# Fill NaNs records with mean values\nx_train.fillna(x_train.mean(), axis=0, inplace=True)\nx_valid.fillna(x_valid.mean(), axis=0, inplace=True)\n# test1.fillna(test1.mean(), axis=0, inplace=True)","af960715":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","c7671b69":"model1 = LinearRegression().fit(x_train, y_train)\nx_valid_predicted = model1.predict(x_valid)\nprint('R2 Score = ', r2_score(y_valid, x_valid_predicted))\nprint('RMSE = ', np.sqrt(mean_squared_error(np.exp(y_valid), np.exp(x_valid_predicted))))","15a3d74a":"print(train_df.shape)\nprint(test_df.shape)","5ba32460":"catagories = list(train_df.select_dtypes(include='object').columns)\ncatagories","6f4d1eb6":"# Label Enconding Catagorical columns\ntrain_df_copy = train_df.copy()\ntest_df_copy = test_df.copy()\n\nfor col in catagories:\n    train_df_copy[col] = pd.factorize(train_df_copy[col])[0].reshape(-1, 1)\n    test_df_copy[col] = pd.factorize(test_df_copy[col])[0].reshape(-1, 1)","f8cb4b69":"print(train_df_copy.shape)\nprint(test_df_copy.shape)","dcc75397":"train_df_copy.loc[:, train_df_copy.isnull().any()].isnull().sum()","df4fb5f4":"test_df_copy.loc[:, test_df_copy.isnull().any()].isnull().sum()","b5ab6c88":"# Filling NaNs Columns\ntrain_df_copy.fillna(train_df_copy.median(), axis=0, inplace=True)\ntest_df_copy.fillna(test_df_copy.median(), axis=0, inplace=True)","d68cba6e":"# x & y\nx = train_df_copy.drop('SalePrice', axis=1)\ny = np.log(train_df_copy['SalePrice'])","28317e5b":"print(x.shape)\nprint(y.shape)","dacd9bd0":"x_train1, x_valid1, y_train1, y_valid1 = train_test_split(x, y, test_size = 0.2, random_state = 42)","0fbd1e1f":"model1 = LinearRegression().fit(x_train1, y_train1)\nx_valid1_predicted = model1.predict(x_valid1)\nprint('R2 Score = ', r2_score(y_valid1, x_valid1_predicted))\nprint('RMSE = ', np.sqrt(mean_squared_error(np.exp(y_valid1), np.exp(x_valid1_predicted))))","757f7f4b":"valuable_features = ['LotArea', 'Neighborhood', 'OverallQual', 'OverallCond', 'YearBuilt', 'Foundation', '1stFlrSF', '2ndFlrSF', 'GarageArea', 'TotRmsAbvGrd', 'MoSold', 'YrSold', 'YearBuilt']\nvaluable_train = train_df[valuable_features]\nvaluable_test = test_df[valuable_features]","a9eae326":"valuable_train.info()","f02be904":"valuable_test.info()","649b4608":"# OneHot Enconding Catagorical columns\nEncoded_train2 = pd.get_dummies(valuable_train)\nEncoded_test2 = pd.get_dummies(valuable_test)\n\nprint(Encoded_train2.shape)\nprint(Encoded_test2.shape)","898acfbd":"# Align two dataframes\ntrain2, test2 = Encoded_train2.align(Encoded_test2, join='right', axis=1)\n\nprint(train2.shape)\nprint(test2.shape)","3c7db85b":"print(train2.isnull().sum().sum())\nprint(test2.isnull().sum().sum())","539ef716":"x2 = train2\ny = np.log(train_df['SalePrice'])","018ec786":"x_train2, x_valid2, y_train2, y_valid2 = train_test_split(x2, y, test_size = 0.2, random_state = 42)","0eed39c1":"model2 = LinearRegression().fit(x_train2, y_train2)\nx_valid2_predicted = model2.predict(x_valid2)\nprint('R2 Score = ', r2_score(y_valid2, x_valid2_predicted))\nprint('RMSE = ', np.sqrt(mean_squared_error(np.exp(y_valid2), np.exp(x_valid2_predicted))))","8225b98d":"new_valuable_features = ['LotArea', 'Neighborhood', 'BsmtFinSF1', 'BsmtFinSF2', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'FullBath', 'TotRmsAbvGrd', 'GrLivArea']\nnew_valuable_train = train_df[new_valuable_features]\nnew_valuable_test = test_df[new_valuable_features]","9d3be38e":"new_valuable_train.info()","435ba11b":"new_valuable_test.info()","25c686aa":"# OneHot Enconding Catagorical columns\nEncoded_train3 = pd.get_dummies(new_valuable_train)\nEncoded_test3 = pd.get_dummies(new_valuable_test)\n\nprint(Encoded_train3.shape)\nprint(Encoded_test3.shape)","65738894":"# Align two dataframes\ntrain3, test3 = Encoded_train3.align(Encoded_test3, join='right', axis=1)\n\nprint(train3.shape)\nprint(test3.shape)","41c20d78":"print(train3.isnull().sum().sum())\nprint(test3.isnull().sum().sum())","00039a3d":"x3 = train3\ny = np.log(train_df['SalePrice'])","eda21095":"x_train3, x_valid3, y_train3, y_valid3 = train_test_split(x3, y, test_size = 0.2, random_state = 42)","a8240b8c":"model3 = LinearRegression().fit(x_train3, y_train3)\nx_valid3_predicted = model3.predict(x_valid3)\nprint('R2 Score = ', r2_score(y_valid3, x_valid3_predicted))\nprint('RMSE = ', np.sqrt(mean_squared_error(np.exp(y_valid3), np.exp(x_valid3_predicted))))","2a4f7503":"test_prediction = model2.predict(test2)\ntest_prediction = np.exp(test_prediction)","fb91834a":"final_Output = pd.DataFrame({'Id': test2.index,'SalePrice': test_prediction})","f00ecb00":"final_Output.to_csv('submission.csv', index=False)","81486fc5":"#### Checking Highly filled NaNs columns","7841273f":"- Most of the homes were sold with rate of Overall Material and Finish from `5 to 7`, Overall Condition of `5 and above 5`.\n- The most sold houses were `Poured Contrete` and `Cinder Block` foundations.\n- Almost `all houses` had `Heating Quality and Condition` and most of them were `Exceelent`\n- This feature will be important in price prediction.","5515f90e":"- Most houses were sold for `Single-family Detached`.","9890a3d6":"### Spliting Train and Validation Data Sets","b7c55795":"### Imports and Data Load","9498fc47":"- Then the `best Model` is the `second one`","7baeb612":"- No strong correlation above 95% between columns, so we must deal with them all without drop any of them.","b3dea934":"### Model 1  Pre-Processing","443521be":"- Columns `Alley`, `PoolQC`, `Fence` and `MiscFeature` almost records are NaNs, we will drop it.\n- The rest will be imputed or dropna recording to nomber of NaNs and dtype.","b5b862f6":"- `Modern houses` are sold with `High Prices` compared with old ones\n- Only houses built in `1892 and 1893` were sold with `High Prices` even more than modrn ones, these houses must worth that.","d7c337c5":"- Both scores and RMSE are somwhow close, but using `OneHotEncoding is better`.","5267c329":"- `Most` Sale Prices in the range from 100K to 200K\n- `Min` Sale Price abount 35K and `Max` Sale Price about 750K\n- `Mean` Sale Price about 180K","ad74cd5c":"- Most of the homes were sold in North Ames Neighborhood.\n- This feature will play a vital role in price prediction.","72138c09":"### Model 2  Pre-Processing\n- Modeling using the valuable features out of EDA\n    - LotArea: Lot size in square feet\n    - Neighborhood: Physical locations within Ames city limits\n    - OverallQual: Rates the overall material and finish of the house\n    - OverallCond: Rates the overall condition of the house\n    - YearBuilt: Original construction date\n    - Foundation: Type of foundation\n    - HeatingQC: Heating quality and condition\n    - 1stFlrSF: First Floor square feet\n    - 2ndFlrSF: Second floor square feet\n    - Fireplaces: Number of fireplaces\n    - GarageArea: Size of garage in square feet\n    - TotRmsAbvGrd: Total rooms above grade\n    - MoSold: Month Sold (MM)\n    - YrSold: Year Sold (YYYY)\n    - YearBuilt: Original construction date","c100bcd1":"### Spliting Train and Validation Data Sets","20a2bb52":"### Re-Model 1 Using Different Catagorize Encoding Method","8882914c":"- we will stop preprocessing tell here and start spliting so that we prevent `Data Leakage` between train and valid data sets.","64b26fc0":"### Model 3  Pre-Processing\n- Modeling using only Areas features, Place and Number of Rooms \n    - LotArea: Lot size in square feet\n    - Neighborhood: Physical locations within Ames city limits\n    - BsmtFinSF1: Type 1 finished square feet\n    - BsmtFinSF2: Type 2 finished square feet\n    - TotalBsmtSF: Total square feet of basement area\n    - GrLivArea: Above grade (ground) living area square feet\n    - 1stFlrSF: First Floor square feet\n    - 2ndFlrSF: Second floor square feet\n    - FullBath: Full bathrooms above grade\n    - TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)","ddaa4577":"### Test Prediction","36a3f1d8":"### Model 2","690380fb":"### Model 1  Pre-Processing","7afbfc27":"- Most `Zoning Classification` of sale is RL [Residential Low Density\n]","b8541134":"### Model 3","556ad3c7":"- `All houses` except just 1 of 1259 houses were sold with `all public utilities`\n- This feature won't be so effective if houses price prediction, we will `drop it`.","4f2091c5":"- Houses sales increase in months `5 to 7` (End of Spring and Beginning of Summer)","17d2443a":"### Spliting Train and Validation Data Sets","74d00e20":"- Almost all the houses are `Paved` access from road\n- This feature won't be so effective if houses price prediction, we will `drop it`.","d4892df5":"### EDA & Extracting Insights","c57f2329":"### Model 1"}}