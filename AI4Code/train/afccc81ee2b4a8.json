{"cell_type":{"65a4448b":"code","028fee66":"code","11e42223":"code","4a7dd2ee":"code","a37e261b":"code","d01d5436":"code","fd04d574":"code","b29b355e":"code","5ad9ef52":"code","4b1c38dd":"code","5a140458":"code","f878adf1":"code","8062dd0c":"code","8d743bdb":"markdown","246d5daf":"markdown","13fbe098":"markdown","7c38d41a":"markdown","12c1c433":"markdown","cd499ae6":"markdown"},"source":{"65a4448b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","028fee66":"#importing modules and functions\nimport pandas as pd\nimport numpy as np\nimport graphviz\nfrom sklearn import tree\n\nfrom sklearn.model_selection import train_test_split # Import train_test_split function\nfrom sklearn import metrics #Import scikit-learn metrics module for accuracy calculation","11e42223":"dff=pd.read_csv(\"..\/input\/adult-census-income\/adult.csv\")","4a7dd2ee":"dff=dff.drop(columns=['fnlwgt', 'capital.gain','capital.loss'])\n","a37e261b":"dff[\"workclass\"]=dff[\"workclass\"].replace(\"?\", \"Private\")\ndff.head(4)\ndff[\"workclass\"].value_counts()","d01d5436":"dff[\"occupation\"]=dff[\"occupation\"].replace(\"?\",\"Not specified\")\ndff.head(4)\ndff.income[dff.occupation==\"Not Specifeid\"]","fd04d574":"a=dff.income[dff.education==\"Some-college\"]\na.value_counts()","b29b355e":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\ndff['age']=le.fit_transform(dff[\"age\"])\ndff['workclass']=le.fit_transform(dff[\"workclass\"])\ndff['education']=le.fit_transform(dff[\"education\"])\ndff['education.num']=le.fit_transform(dff[\"education.num\"])\n\ndff['marital.status']=le.fit_transform(dff[\"marital.status\"])\ndff['occupation']=le.fit_transform(dff[\"occupation\"])\ndff['relationship']=le.fit_transform(dff[\"relationship\"])\ndff['race']=le.fit_transform(dff[\"race\"])\ndff['sex']=le.fit_transform(dff[\"sex\"])\ndff['hours.per.week']=le.fit_transform(dff[\"hours.per.week\"])\ndff['native.country']=le.fit_transform(dff[\"native.country\"])\ndff['income']=le.fit_transform(dff[\"income\"])","5ad9ef52":"dff.head()","4b1c38dd":"feature_cols=[\"age\",\"workclass\",\"education\",\"education.num\",\"martial.status\",\"occupation\",\"relationship\",\"race\",\"sex\",\"hours.per.week\",\"native.country\"]\ntarget=[\"0\",\"1\"]\n","5a140458":"X_train,X_test,y_train, y_test=train_test_split(dff[dff.columns[0:11]], dff[dff.columns[11]], test_size=0.33, random_state=42)","f878adf1":"#Import Random Forest Model\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Create a Gaussian Classifier\nclf=RandomForestClassifier(n_estimators=300,max_depth=5,min_samples_split=3)\n\n#Train the model using the training sets y_pred=clf.predict(X_test)\nclf.fit(X_train,y_train)\n\ny_pred=clf.predict(X_test)","8062dd0c":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","8d743bdb":"# # # # **Creating Random Forset Object**","246d5daf":"# # # # **Changing everything to integers for fitting**","13fbe098":"# # # # **Diving the Data into train and test datasets**","7c38d41a":"# # # # **Importing our Dataset**","12c1c433":"# # # # **Preprocessing**","cd499ae6":"# # # # **Accuracy**"}}