{"cell_type":{"2a62e67b":"code","4e78fa67":"code","7f5ac669":"code","23fbddb0":"code","ecbb12bc":"code","5bc9b734":"code","f8e52216":"code","684780ca":"code","b57ad70c":"code","746c9512":"code","927f234a":"code","4550df14":"code","f87573ca":"code","b7c1bfd3":"code","579b1d6a":"code","1a69dcde":"code","485a918f":"code","22e8289f":"code","4cd8fe70":"code","209ce76b":"code","a9457cd6":"code","2fb3f3a9":"code","dca52063":"markdown","c91b4d65":"markdown","e28ea4bf":"markdown","f0938f74":"markdown","2666229a":"markdown","4965677a":"markdown","dffbe08e":"markdown","a55a4f35":"markdown","b436964f":"markdown","ff2414c3":"markdown","a71af8bd":"markdown","ac774bd5":"markdown"},"source":{"2a62e67b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nprint('Import Complete')\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4e78fa67":"# lets explore movies.csv\nmovies_data= pd.read_csv('..\/input\/movielens\/movies.csv')\nmovies_data.head()","7f5ac669":"movies_data.shape","23fbddb0":"movies_data.info()","ecbb12bc":"movies_data.describe()\n","5bc9b734":"#to count unique movies from the table by using movie id , because movie id is unique\nmovies = movies_data['movieId'].unique().tolist()\nlen(movies)","f8e52216":"#now explore details about ratings_data.csv  \nratings_data = pd.read_csv('..\/input\/movielens\/ratings.csv')\nratings_data.head()","684780ca":"ratings_data.shape","b57ad70c":"ratings_data.info()","746c9512":"ratings_data.describe()","927f234a":"# we have to combine both movies data and ratings data, so we have to delete unwanted from the data\ndel ratings_data['timestamp']\nratings_data","4550df14":"#Lets combine Movies data and ratings data\ncombined_data = movies_data.merge(ratings_data,on = 'movieId',how = 'inner')\ncombined_data.head(2)","f87573ca":"# here no columns to about watched or not \n# so we we take most ranked movies as a most watched movies because no one rank before watching \nmost_watched = combined_data.groupby('title').size().sort_values(ascending=False)\nmost_watched.head(10)","b7c1bfd3":"# Top 20 Most high rated movies\n\nhigh_rated_movies = combined_data[combined_data['rating']>3.9]\nhigh_rated_movies.head(5)\n\n#this shows the movies rated more than 3.9 but not mostly high rated ","579b1d6a":"\n#top 20 most rated movies\ntop_high_rated = high_rated_movies.groupby('title').size().sort_values(ascending=False)\ntop_high_rated.head(20)","1a69dcde":"#movies rated below 1.5\nlow_rated = combined_data[combined_data['rating']<1.5]\nlow_rated.head(5)","485a918f":"#top low rated movies \ntop_low_rated = low_rated.groupby('title').size().sort_values(ascending=False)\ntop_low_rated.head(20)","22e8289f":"# groupby users and count the watch time and sort it out\ntop_usersId = combined_data.groupby('userId').size().sort_values(ascending=False)\ntop_usersId.head(10)","4cd8fe70":"\n#here we  make count of the genres: \n#first convert a series to list\n\ngenre_types = set()\nfor s in movies_data['genres'].str.split('|').values:\n    genre_types = genre_types.union(set(s))","209ce76b":"#define a function that counts the number of times each genre appear:\ndef word_count(df, ref_col, liste):\n    keyword_count = dict()\n    for s in liste: keyword_count[s] = 0\n    for liste_keywords in df[ref_col].str.split('|'):\n        if type(liste_keywords) == float and pd.isnull(liste_keywords): continue\n        for s in liste_keywords: \n            if pd.notnull(s): keyword_count[s] += 1\n    # convert the dictionary in a list to sort the keywords  by frequency\n    keyword_occurences = []\n    for k,v in keyword_count.items():\n        keyword_occurences.append([k,v])\n    keyword_occurences.sort(key = lambda x:x[1], reverse = True)\n    return keyword_occurences, keyword_count","a9457cd6":"#counting how many times each of genres occur:\nkeyword_occurences, num = word_count(movies_data, 'genres', genre_types)\nkeyword_occurences","2fb3f3a9":"fig = plt.figure(1, figsize=(16,10))\nax2 = fig.add_subplot(2,1,2)\ny_axis = [i[1] for i in keyword_occurences]\nx_axis = [k for k,i in enumerate(keyword_occurences)]\nx_label = [i[0] for i in keyword_occurences]\nplt.xticks(rotation=85, fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.xticks(x_axis, x_label)\nplt.ylabel(\"No. of occurences\", fontsize = 24, labelpad = 0)\nax2.bar(x_axis, y_axis, align = 'center', color='b')\nplt.title(\"Popularity of Genres\",bbox={'facecolor':'k', 'pad':5},color='w',fontsize = 30)\nplt.show()","dca52063":"\n    I am a newbie to the field of data science , and will be attempting to work my way through the MovieLens dataset. Please consider upvoting if this is useful to you! :)\n\n    Any feedback is welcome !\n    \n    About Dataset \n    \n    This dataset (ml-20m) describes 5-star rating and free-text tagging activity from [MovieLens](http:\/\/movielens.org), a movie recommendation service. It contains 20000263 ratings and 465564 tag applications across 27278 movies. These data were created by 138493 users between January 09, 1995 and March 31, 2015. This dataset was generated on March 31, 2015, and updated on October 17, 2016 \n     \n     for further information read Readme.txt file attached to this dataset\n     \n    Contents\n\n        1.Importing Libaries\n        2.Reading and Exploring the data\n        3.Data Analysis\n        4.Cleaning of data\n        5.Data Visualization","c91b4d65":"There are no null values in the dataset,no need to any cleaning process","e28ea4bf":"\nHere are 27278 movies released between January 09, 1995 and March 31, 2015 and have different genres like\n* Action,Adventure, Animation, Children's, Comedy, Crime, Documentary, Drama, Fantasy, Film-Noir, Horror, Musical, Mystery, Romance, Sci-Fi, Thriller, War, Western\n\n","f0938f74":"# Problem statement and Analysis from the Data\n","2666229a":"## most genres","4965677a":"## Top users who watched more movies","dffbe08e":"## Data Visualization","a55a4f35":"From this table in ratings column Maximum and Minimum Ratings of the movies are 5 and 0.5 respectively \n","b436964f":"# Top 20 Most watched movies","ff2414c3":"# MovieLens Dataset analysis\n","a71af8bd":"Before doing Analysis we have to clear out our problem statement of how we analyse the Data  \n\n1. Top 20 most Watched movies \n2. Top 20 High rated movies(Equal to 4 and above)\n3. Top 20 Low rated movies(Equalto 1 and below)\n4. Top 20 Users who watch More movies \n5. Which genre is highly occured in high rated movies list","ac774bd5":"# Top 20 Mostly low rated movies"}}