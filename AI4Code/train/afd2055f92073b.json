{"cell_type":{"5c21856f":"code","e6368e4c":"code","ebf26474":"code","9ce7bc4f":"code","fd36102f":"code","de48cdf1":"code","c2ac6903":"code","e5ca28d7":"code","c31d73f4":"code","048dfc22":"code","2f6a87c0":"code","2021a15b":"code","2feb86a7":"code","531c14cd":"code","dc83e2be":"code","2ed8b84f":"code","b82ec395":"code","1287edbc":"code","6088949c":"code","99dc9977":"code","031ee28e":"code","f82165ca":"code","68ab2d19":"code","d34fcbc5":"code","46388782":"code","9f1c5016":"code","8df44262":"code","1e72b727":"code","51a24f1d":"code","e4556ab9":"code","ece03a61":"code","8c21af44":"markdown","aca062a8":"markdown","13bc90ac":"markdown","93af7f77":"markdown","8540a2a8":"markdown","8b91529b":"markdown","1dfa69b7":"markdown","1ccd65dc":"markdown","463f542e":"markdown","a0935beb":"markdown","00f11af8":"markdown"},"source":{"5c21856f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e6368e4c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier\nimport warnings\nwarnings.filterwarnings('ignore')","ebf26474":"train_dt = pd.read_csv('..\/input\/mobile-price-classification\/train.csv')\ntest_dt = pd.read_csv('..\/input\/mobile-price-classification\/test.csv')","9ce7bc4f":"train_dt.head()","fd36102f":"test_dt.head()","de48cdf1":"train_dt.describe()","c2ac6903":"train_dt.info()","e5ca28d7":"print(train_dt.isnull().sum())","c31d73f4":"sns.countplot(data=train_dt, x='n_cores')","048dfc22":"plt.subplots(figsize=(20,8))\nsns.countplot(data=train_dt, x='int_memory')","2f6a87c0":"sns.countplot(data=train_dt, x='dual_sim')","2021a15b":"plt.subplots(figsize=(20,8))\nsns.heatmap(data=train_dt.corr(), annot=True, cbar=True)","2feb86a7":"sns.barplot(data=train_dt, x='price_range', y='ram')","531c14cd":"x= train_dt.drop('price_range', axis=1)\ny = train_dt['price_range']","dc83e2be":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=45)","2ed8b84f":"lr = LogisticRegression()\nlr.fit(x_train, y_train)","b82ec395":"lr.predict(x_test)","1287edbc":"lr.score(x_test, y_test)","6088949c":"confusion_matrix(y_test, lr.predict(x_test))","99dc9977":"rfc = RandomForestClassifier(n_estimators=500, max_depth=11)","031ee28e":"rfc.fit(x_train, y_train)","f82165ca":"rfc_pred = rfc.predict(x_test)","68ab2d19":"accuracy_score(y_test, rfc_pred)","d34fcbc5":"knn = KNeighborsClassifier()\nparams_knn = {'n_neighbors': np.arange(1, 25)}\nknn_gs = GridSearchCV(knn, params_knn, cv=5)\nknn_gs.fit(x_train, y_train)","46388782":"knn_best=knn_gs.best_estimator_\nknn_best","9f1c5016":"params_rf = {'n_estimators': [50, 100, 200]}\nrf_gs = GridSearchCV(rfc, params_rf, cv=5)\nrf_gs.fit(x_train, y_train)","8df44262":"rf_best=rf_gs.best_estimator_\nrf_best","1e72b727":"print('knn score ',knn_best.score(x_test, y_test))\nprint('random forest score ',rf_best.score(x_test, y_test))\nprint('logistic score ',lr.score(x_test, y_test))","51a24f1d":"estimators=[('knn',knn_best), ('rfc', rf_best), ('lr', lr)]","e4556ab9":"ensemble=VotingClassifier(estimators, voting='hard')\nensemble.fit(x_train, y_train)\nensemble.score(x_test, y_test)","ece03a61":"model = pd.Series({'knn':0.925, 'random forest':0.87, 'logistic':0.7, 'ensemble':0.8983})\ntab = pd.DataFrame({'score':model})\ntab","8c21af44":"importing necessary libraries","aca062a8":"moving the target to variable to y","13bc90ac":"checking null values in the dataset","93af7f77":"displaying the read data to check if its imported properly","8540a2a8":"countplot to see number of cores","8b91529b":"summary","1dfa69b7":"heatmap to know the relation between various parameters. But in the plot we can see number of cores if related to price.","1ccd65dc":"comparison to see number of sim's prominent in phone availabel in the market","463f542e":"splitting data ","a0935beb":"countplot to see number of internal memory","00f11af8":"reading the files using pandas"}}