{"cell_type":{"d160dc82":"code","fec43926":"code","28cc6d5f":"code","8d45b157":"code","d5652ddc":"code","c6f256a3":"code","3975a651":"code","157b788c":"code","704783f1":"code","05c79dd4":"code","a55137c1":"code","03642f64":"code","7cf34036":"code","9ddf30ab":"code","17429f90":"code","e35a9ebb":"code","91bc0389":"code","0c94a23e":"code","cb3e340b":"code","7e7ec722":"markdown"},"source":{"d160dc82":"import numpy as np\nfrom sklearn import preprocessing, svm\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd","fec43926":"#Reading Data\ndata = pd.read_csv(\"..\/input\/titanic\/train.csv\") \nfinal_test_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nfinal_test_data_id = np.array(final_test_data['PassengerId']) # we use it for our submission","28cc6d5f":"data.head()","8d45b157":"# we are droppin less relevant columns.\ndata.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'],axis=1, inplace=True)\ndata","d5652ddc":"# We have missing values for the column age, we are going to meke those values outliers so we can still use the data\nprint(data.info(), data.describe())","c6f256a3":"mean_age = np.mean(data['Age'])\ndata['Age'] = data['Age'].fillna(mean_age)\ndata","3975a651":"# We need to transform the 'Sex' data, 'male' = 1 'female' = 0\ndata[\"Sex\"].replace('male', 1, inplace=True)\ndata[\"Sex\"].replace('female', 0, inplace=True)","157b788c":"# C = Cherbourg, Q = Queenstown, S = Southampton, after reading: \"https:\/\/www.kaggle.com\/brendan45774\/titanic-top-solution\/notebook\" we now that this feature is important\n\ndata['Cherbourg'] = data['Embarked'].apply(lambda x: 1 if x == 'C' else 0)\ndata['Queenstown'] = data['Embarked'].apply(lambda x: 1 if x == 'Q' else 0)\ndata['Southampton'] = data['Embarked'].apply(lambda x: 1 if x == 'S' else 0)\ndata.drop('Embarked', axis=1, inplace=True)","704783f1":"X = np.array(data.drop(['Survived'], axis=1))\ny = np.array(data['Survived'])","05c79dd4":"# We create the train, test splits\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","a55137c1":"# We create the model (classifier)\nmodel_clf = svm.SVC(kernel='linear')","03642f64":"# we test the model\nmodel_clf.fit(X_train, y_train)\naccuracy = model_clf.score(X_test, y_test)\nprint(accuracy)","7cf34036":"# we apply everything that we used with the \"train.csv\" dataset to the \"test.csv\" dataset\nfinal_test_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\nfinal_test_data['Age'].fillna(np.mean(final_test_data['Age']), inplace=True)\nfinal_test_data['Fare'].fillna(np.mean(final_test_data['Fare']), inplace=True)\nfinal_test_data[\"Sex\"].replace('male', 1, inplace=True)\nfinal_test_data[\"Sex\"].replace('female', 0, inplace=True)\nfinal_test_data['Cherbourg'] = final_test_data['Embarked'].apply(lambda x: 1 if x == 'C' else 0)\nfinal_test_data['Queenstown'] = final_test_data['Embarked'].apply(lambda x: 1 if x == 'Q' else 0)\nfinal_test_data['Southampton'] = final_test_data['Embarked'].apply(lambda x: 1 if x == 'S' else 0)\nfinal_test_data.drop('Embarked', axis=1, inplace=True)\n\n\nX_final_test = np.array(final_test_data)","9ddf30ab":"final_test_data","17429f90":"X_final_test","e35a9ebb":"prediction = model_clf.predict(X_final_test)","91bc0389":"submit = pd.DataFrame({'PassengerId': final_test_data_id, 'Survived': prediction})","0c94a23e":"submit.to_csv(\"svm_titanic_sandorabad_7.csv\", index=False)","cb3e340b":"# I based this nootebook on the tutorials of the youtuber: sentdex, \n# Specially on this series: \"https:\/\/pythonprogramming.net\/machine-learning-tutorial-python-introduction\/\" if someone is just starting as I am i really recomend it","7e7ec722":"# Submit"}}