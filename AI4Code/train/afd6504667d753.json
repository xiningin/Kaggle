{"cell_type":{"8b22447a":"code","ba0d4ab0":"code","288a7c6d":"code","3f2b0432":"code","20e664e9":"code","d34d65a0":"code","8deaefbc":"code","22494aca":"code","d05a3e80":"code","ddf00902":"code","86559f5a":"code","b421d63d":"code","69f4fd51":"code","5ff227cc":"code","485be70e":"code","2423e0f6":"code","876bcb00":"code","7f0570c8":"code","ff713656":"markdown","510f3688":"markdown","1af92b34":"markdown","d8fb058d":"markdown","9e014e2b":"markdown","a59169c6":"markdown","57d77d3e":"markdown","ebf284cf":"markdown","0331a783":"markdown","e74befe8":"markdown","137689d9":"markdown","128c84a2":"markdown","4f25f112":"markdown","b2dba821":"markdown","44fabf87":"markdown","6d27d0a3":"markdown","d6d7e97e":"markdown","ba77709d":"markdown","afb84597":"markdown","9f98101e":"markdown"},"source":{"8b22447a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport datetime as dt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ba0d4ab0":"# Create URL to JSON file (alternatively this can be a filepath)\nurl = '\/kaggle\/input\/my-spotify-streaming-history\/StreamingHistory0.json'\n\n# Load the first sheet of the JSON file into a data frame\ndf = pd.read_json(url, orient='columns')\n\n# View the first ten rows\ndf.head(10)","288a7c6d":"# It looks like I'd need to get the artist's URI first. THEN I can get the categories of the artist from the Spotify API.\n# https:\/\/developer.spotify.com\/documentation\/web-api\/reference\/artists\/get-artist\/\n# https:\/\/developer.spotify.com\/console\/get-artist\/?id=0OdUWJ0sBjDrqHygGUXeCF\n\n# I'm also going to use this handy Spotify module that I found\n# Spotipy library - https:\/\/spotipy.readthedocs.io\/en\/2.9.0\/","3f2b0432":"# Code help from - https:\/\/medium.com\/@RareLoot\/extracting-spotify-data-on-your-favourite-artist-via-python-d58bc92a4330\n# Note that the following command needs to be run each time this project is opened\n# For console: pip install spotipy --upgrade\n\n# Importing the \"spotipy\" Python module\nimport spotipy\n# This is added to access authorized Spotify data\nfrom spotipy.oauth2 import SpotifyClientCredentials\n\n# Client ID and secret are needed to get information\nclient_id = \"38938e1ee8de47ceb9c3a0b368a70bbf\"\n# client_secret = {spotify secret id}\nfrom kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nclient_secret = user_secrets.get_secret(\"Spotify\")\n\nclient_credentials_manager = SpotifyClientCredentials(client_id=client_id, client_secret=client_secret)\n# Spotify object to access API\nsp = spotipy.Spotify(client_credentials_manager=client_credentials_manager) \n# Chosen artist\nname = \"Depeche Mode\" \n# Search query\nresult = sp.search(name) \n# Code given to use as an example in Medium article\nresult['tracks']['items'][0]['artists']\n","20e664e9":"# Search query\nresult = sp.search(name) \n\n# What happens if I print everything out? I commented this out after the fact.\n# print(result)","d34d65a0":"# Search query\nresult = sp.search(name) \n\n# This is from the example\n# result['tracks']['items'][0]['artists']\nresult['tracks']['items'][0]['artists'][0]['uri']","8deaefbc":"# I want to create a new column, so I'll create a variable with open brackets\n# artistURI = []\n\n# For each entry, I want to loop through and add the URI for each artist in each row\n\n# row=0\n# for artist in df['artistName']:\n#     This will get the relevant info of the artist\n#     result = sp.search(df['artistName'][row])\n#     artistURI.append(result['tracks']['items'][row]['artists'][0]['uri'])\n#     row = row + 1\n\n# # Create a column from the list\n# df['artistURI'] = artistURI ","22494aca":"# Get the unique names of the artists\nunique_names = df['artistName'].head(20).unique()\nprint (unique_names)","d05a3e80":"artistURI = []\n\n# For each entry, I want to loop through and add the URI for each artist in each row\nrow=0\n\nfor artist in unique_names:\n    full_result = sp.search(unique_names[row])\n    artistURI.append(full_result['tracks']['items'][row]['artists'][0]['uri'])\n    row = row + 1\n    \nprint (artistURI)","ddf00902":"# This is the first line of code I tried, but this gave me this info for every artist\n# df.groupby('artistName').size()\n\n# This limits the artists to the top 20 but I can't see the count\n# n = 20\n# top_artists = df['artistName'].value_counts()[:n].index.tolist()\n# top_artists\n\n# Now I'm taking the top-played artists in descending order and only looking at however many I want to!\ntop_artists = df['artistName'].value_counts(ascending=False)\nprint (\"These were the artists I listened to the most in 2019: \")\ntop_artists.head(20)","86559f5a":"plt.style.available","b421d63d":"plt.style.use(\"seaborn-darkgrid\")\ntop_artists.head(20).plot(kind = 'bar', figsize=(30,5), rot = 0)","69f4fd51":"df.head(1)","5ff227cc":"df['endTime'] = pd.to_datetime(df['endTime'])\ndf['endTime'].head(5)","485be70e":"df['day_of_week'] = df['endTime'].dt.day_name()\ndf['day_of_week']","2423e0f6":"week_listening = df['day_of_week'].value_counts(ascending=False)\nweek_listening.head(7)","876bcb00":"plt.style.use(\"dark_background\")\nweek_listening.head(7).plot(kind = 'bar', figsize=(15,5), rot = 0)","7f0570c8":"# This converts endTime to datetime format\ndf['hour'] = pd.to_datetime(df['endTime'])\ndf['hour'].head(5)","ff713656":"Unfortunately, the code I have above makes 4,000 calls to the API... which is just not realistic. So let me try a subset of this data... ","510f3688":"Great. Again - the power of Python! So exciting. Now I want to know the respective occurrences for each day of the week. I can do that pretty easily with what I did earlier with top 20 artists.","1af92b34":"** Conclusions **\n\nI learned a lot from this first mini project. In terms of the data I got, I listen to Drake and Oddisee the most by far. Kim Dong Han, a K-pop artist, is an outlier in the data as that's from my mom. I also listen to music on Saturdays the most often, followed by Tuesdays. \n\nIn terms of actually working with this data, as I had predicted ahead of time, working with the API proved to be difficult. The surprising part was that it wasn't too difficult to wrangle but because it's not another static dataset, I can't make a ton of calls at once.\n\nOnce I was able to manipulate the date (e.g. convert time to datetime format), getting the answers to my questions was not very hard as it generally involved getting the number of occurrences for an entry\/entries. That being said, however, the time example showed that I am limited by the limitations of the dataset and not necessarily my skills, which i=was a bummer.\n\nI will say that I looked up quite a lot of things here, the sources of which I reference throughout this notebook.\n\nI'm lucky that I found a pretty clean dataset to work with, but I felt that certain aspects of the dataset (i.e. 12-hour endTime vs military endTime; lack of artist URI or some \"connector\" to work with API in dataset) definitely constrained what was possible for me to do.","d8fb058d":"At this point, time is not very important to me based on the questions I'm asking, so I'd like to scrub that from the dataframe.","9e014e2b":"That was pretty simple. The next question is much, much harder. In order to answer it, I will first need to map the dates in the dataset to days of the week in 2019. Let me print out just a row from the dataframe to see how the date is formatted.","a59169c6":"So that worked! Unfortunately I'd need to do this again and again and cache the results each time. This makes me question if this is truly the most efficient way of doing this? Or because I'm working with an API that this really is the only way of going about this?\n\n**Update** After talking to Brock (thanks Brock!), I looked to see if there are any existing datasets on Kaggle that already have artist IDs cached. Unfortunately, if they do have those artists, they aren't the artists that aren't in my dataset. But that's a great strategy to keep in my back pocket for the future :)\n\nMoving forward without the artist URIs, at this point, I can answer the following questions...\n\n1.  Which artists did I listen to the most in 2019?\n2.  Was there a certain day of the week in 2019 that I listened to music the most? \n\nTo answer the first question, the following should work...","57d77d3e":"Now let's make a bar chart... and make it snazzy!","ebf284cf":"First things first - let's import ***all the modules***!","0331a783":"That's too much for me to process!\n\nLet me put that code through a JSON formatter. Ah, that's better. Now I can hopefully pull out just the artist URI. \n\n![Image of formatted JSON](https:\/\/drive.google.com\/uc?id=1dShMIiyUD-_Dgo1KlYGpwy04JRcW2rH8)\n","e74befe8":"Because I could not get what I wanted from the API, I'll revise one of my questions from:\n* Which categories of music did I listen to during the night? At what hours specifically?\n\nTo:\n* At what time of the day do I listen to music?","137689d9":"While I've listened to some classical music here and there, I certainly don't listen to Depeche Mode.\n\nWait a minute...\n\nI had forgotten - my mom also uses my Spotify account! Before I try and attempt to scrub out what she listens to, I think it'll help for me to add in a column for categories. Once I do that, I can remove the entries that classify as \"Classical\" or \"80s Synth Pop\". ","128c84a2":"That was easy. Now let's map the endTime to actual days of the week.","4f25f112":"First, let me play around with the Spotify API. ","b2dba821":"So interesting! I surprisingly would never have guessed Saturday. Now let's make a bar chart that looks more like Spotify :)","44fabf87":"Then I realized... how can I tell the difference between the morning (7 am) vs the evening (7 pm)?? Because of this, I don't think I'm able to answer these questions either!","6d27d0a3":"**Data Profile**\n\nPersonal Spotify data\n\n** Note that you will need to run \"pip install spotipy --upgrade\" in the console if you're seeing errors **\n\nThe Spotify data that I requested had a number of JSON files, which were as follows:\n* Follower count and following artists count\n* My Spotify \"identity\"\n* Payment information\n* My playlist information\n* Search queries I've made and where I made them (e.g. iPhone vs Desktop)\n* Streaming history (the data I'm most interested in)\n* User data (e.g. email addresses on file)\n* Queries I've done with voice\n* Albums and artists I've listened to in my library\n\nMy hope for this project was to leverage the Spotify API against my personal spotify data since my personal dataset doesn't provide information that's API-friendly (e.g. no artist ID column to check against artist info via the API). ","d6d7e97e":"**Overview**\n\nFor my first mini project for HCDE 530, I was hoping to play around with my personal Spotify data. I knew for some time that it was not possible for users to download their own data, but I checked back and realized that it was possible again. \n\nI found out how to do this under the [\"Privacy Settings\"](https:\/\/www.spotify.com\/us\/account\/privacy\/) of my Account Overview on Spotify. I was a little surprised to find that it took nearly a week for me to get my data after requesting it. But nevertheless, I finally had it.\n\nI've always been intrigued by Spotify data because of the end-of-year stats that Spotify makes available for users - \"Spotify Wrapped\" - packaged in a very eye-catching way. These stats have always been interesting to me and I'm certainly not alone in this - each year, this marketing campaign garners thousands upon thousands of shares on various social media platforms.\n\nThe file that intrigued me the most out of all the files in the downloaded data was the \"Streaming History\" JSON file which lists 1) when a song is finished playing, 2) the artist name, 3) the track name, and 4) miliseconds played (yes, you read that correctly). And to make things a little more interesting, I'd hope to cross reference the artist name\/track name with the Spotify API, specifically for \"categories\". \n\nWith all this said, with this dataset and the Spotify API, I would like to get answers to the following questions...\n* What are all the categories of music I listened to in 2019?\n* Which categories of music did I listen to the most in 2019? \n* Which artists did I listen to the most in 2019?\n* Which categories of music did I listen to during the night? At what hours specifically?\n\nI will imagine these questions will be the hardest of all to answer:\n* Was there a certain day of the week in 2019 that I listened to music the most? \n* Was there a certain day of the week in 2019 that I listened to a certain category of music the most? ","ba77709d":"This is a good start. I'm able to get some information - including my coveted artist URI - based on the \"name\" alone. But the problem is... I have too much information. I just want the URI. How do I do that?","afb84597":"Now let me put my dataset into a dataframe. Once I do that, I'll take a look at what the data has to offer me...","9f98101e":"Great. Now I want to be able to loop through my dataset, give each row an artist ID and add a column for artist IDs."}}