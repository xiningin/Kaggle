{"cell_type":{"7eb3526c":"code","70517a11":"code","2397523a":"code","f8ade56b":"code","bf6fa355":"code","abd9aeb9":"code","95816618":"code","990fc177":"code","b4eb4fda":"code","534ae8b5":"code","7827ff3d":"code","89888b27":"code","bd8bfa84":"code","687e6902":"code","66c88b9a":"code","9d182f51":"code","17341aad":"code","2bf617ab":"code","4e4d21d2":"code","66fed51e":"code","0d7a1d64":"code","b5b5c47c":"code","ed5c5076":"code","50ededbf":"code","a43b296e":"code","fd3799ec":"code","d6c7fe36":"code","268c1ede":"code","854acaba":"code","3f5df5a8":"code","bfc6ec14":"code","d2a77701":"code","5333477e":"code","6129dd94":"code","f8a3349c":"code","129a6172":"code","51e12945":"code","941ddd59":"code","6a27d176":"code","9eae6b32":"code","0103eae9":"code","99327da6":"code","36446042":"code","f676b77a":"code","e2e28eb8":"code","c2b7c846":"code","9763bde9":"code","d1294497":"code","2bdd7197":"code","368a67db":"code","9a151e49":"code","2890aa46":"markdown","740ab2f2":"markdown","5ff2c339":"markdown","ae098396":"markdown","22f33431":"markdown","e40963f6":"markdown","265c13f2":"markdown","5f701a97":"markdown","5948a8f6":"markdown","772e15af":"markdown","da514e56":"markdown","813e02fe":"markdown","6a61c304":"markdown","0d594a6f":"markdown","7755dceb":"markdown","fca19260":"markdown","956491fe":"markdown","10e879f0":"markdown","6c9b8e09":"markdown","1e428c79":"markdown","1385dead":"markdown","1ef37ad6":"markdown","778175eb":"markdown","5b76b096":"markdown","842919e1":"markdown","c5bf3ea1":"markdown","1df49ca7":"markdown","b94d8a23":"markdown","29ced3c0":"markdown","c5736be3":"markdown","8a42aec0":"markdown","b21fccad":"markdown","319008c2":"markdown","b917ce32":"markdown","47fee0ee":"markdown","e633858c":"markdown","f40dcca1":"markdown","b44541af":"markdown","d0df1599":"markdown","8c5e1e01":"markdown","1e743f0f":"markdown","a03c3a7d":"markdown","770c9c78":"markdown","4615ac1f":"markdown","77011658":"markdown","a51bf51f":"markdown","a65e83b2":"markdown","c6d606b3":"markdown","430853b4":"markdown","d8e13287":"markdown","5ead571b":"markdown","ffab5125":"markdown","66d1fcf3":"markdown","d09a7910":"markdown"},"source":{"7eb3526c":"from IPython.display import HTML\nHTML('<center><iframe width=\"700\" height=\"400\" src=\"https:\/\/www.youtube.com\/embed\/bn8rVBuIcFg?rel=0&amp;controls=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/center>')","70517a11":"import os\nimport gc\nimport time\nimport math\nimport datetime\nfrom math import log, floor\nfrom sklearn.neighbors import KDTree\n\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nfrom sklearn.utils import shuffle\nfrom tqdm.notebook import tqdm as tqdm\n\nimport seaborn as sns\nfrom matplotlib import colors\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nimport pywt\nfrom statsmodels.robust import mad\n\nimport scipy\nimport statsmodels\nfrom scipy import signal\nimport statsmodels.api as sm\nfrom fbprophet import Prophet\nfrom scipy.signal import butter, deconvolve\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.api import ExponentialSmoothing, SimpleExpSmoothing, Holt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","2397523a":"INPUT_DIR = '..\/input\/m5-forecasting-accuracy'\ncalendar = pd.read_csv(f'{INPUT_DIR}\/calendar.csv')\nselling_prices = pd.read_csv(f'{INPUT_DIR}\/sell_prices.csv')\nsample_submission = pd.read_csv(f'{INPUT_DIR}\/sample_submission.csv')\nsales_train_val = pd.read_csv(f'{INPUT_DIR}\/sales_train_validation.csv')","f8ade56b":"ids = sorted(list(set(sales_train_val['id'])))\nd_cols = [c for c in sales_train_val.columns if 'd_' in c]\nx_1 = sales_train_val.loc[sales_train_val['id'] == ids[2]].set_index('id')[d_cols].values[0]\nx_2 = sales_train_val.loc[sales_train_val['id'] == ids[1]].set_index('id')[d_cols].values[0]\nx_3 = sales_train_val.loc[sales_train_val['id'] == ids[17]].set_index('id')[d_cols].values[0]\n\nfig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(go.Scatter(x=np.arange(len(x_1)), y=x_1, showlegend=False,\n                    mode='lines', name=\"First sample\",\n                         marker=dict(color=\"mediumseagreen\")),\n             row=1, col=1)\n\nfig.add_trace(go.Scatter(x=np.arange(len(x_2)), y=x_2, showlegend=False,\n                    mode='lines', name=\"Second sample\",\n                         marker=dict(color=\"violet\")),\n             row=2, col=1)\n\nfig.add_trace(go.Scatter(x=np.arange(len(x_3)), y=x_3, showlegend=False,\n                    mode='lines', name=\"Third sample\",\n                         marker=dict(color=\"dodgerblue\")),\n             row=3, col=1)\n\nfig.update_layout(height=1200, width=800, title_text=\"Sample sales\")\nfig.show()","bf6fa355":"ids = sorted(list(set(sales_train_val['id'])))\nd_cols = [c for c in sales_train_val.columns if 'd_' in c]\nx_1 = sales_train_val.loc[sales_train_val['id'] == ids[0]].set_index('id')[d_cols].values[0][:90]\nx_2 = sales_train_val.loc[sales_train_val['id'] == ids[4]].set_index('id')[d_cols].values[0][1300:1400]\nx_3 = sales_train_val.loc[sales_train_val['id'] == ids[65]].set_index('id')[d_cols].values[0][350:450]\nfig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(go.Scatter(x=np.arange(len(x_1)), y=x_1, showlegend=False,\n                    mode='lines+markers', name=\"First sample\",\n                         marker=dict(color=\"mediumseagreen\")),\n             row=1, col=1)\n\nfig.add_trace(go.Scatter(x=np.arange(len(x_2)), y=x_2, showlegend=False,\n                    mode='lines+markers', name=\"Second sample\",\n                         marker=dict(color=\"violet\")),\n             row=2, col=1)\n\nfig.add_trace(go.Scatter(x=np.arange(len(x_3)), y=x_3, showlegend=False,\n                    mode='lines+markers', name=\"Third sample\",\n                         marker=dict(color=\"dodgerblue\")),\n             row=3, col=1)\n\nfig.update_layout(height=1200, width=800, title_text=\"Sample sales snippets\")\nfig.show()","abd9aeb9":"def maddest(d, axis=None):\n    return np.mean(np.absolute(d - np.mean(d, axis)), axis)\n\ndef denoise_signal(x, wavelet='db4', level=1):\n    coeff = pywt.wavedec(x, wavelet, mode=\"per\")\n    sigma = (1\/0.6745) * maddest(coeff[-level])\n\n    uthresh = sigma * np.sqrt(2*np.log(len(x)))\n    coeff[1:] = (pywt.threshold(i, value=uthresh, mode='hard') for i in coeff[1:])\n\n    return pywt.waverec(coeff, wavelet, mode='per')","95816618":"y_w1 = denoise_signal(x_1)\ny_w2 = denoise_signal(x_2)\ny_w3 = denoise_signal(x_3)\n\n\nfig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_1)), mode='lines+markers', y=x_1, marker=dict(color=\"mediumaquamarine\"), showlegend=False,\n               name=\"Original signal\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_1)), y=y_w1, mode='lines', marker=dict(color=\"darkgreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_2)), mode='lines+markers', y=x_2, marker=dict(color=\"thistle\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_2)), y=y_w2, mode='lines', marker=dict(color=\"purple\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_3)), mode='lines+markers', y=x_3, marker=dict(color=\"lightskyblue\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_3)), y=y_w3, mode='lines', marker=dict(color=\"navy\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.update_layout(height=1200, width=800, title_text=\"Original (pale) vs. Denoised (dark) sales\")\nfig.show()","990fc177":"fig, ax = plt.subplots(nrows=3, ncols=2, figsize=(30, 20))\n\nax[0, 0].plot(x_1, color='seagreen', marker='o') \nax[0, 0].set_title('Original Sales', fontsize=24)\nax[0, 1].plot(y_w1, color='red', marker='.') \nax[0, 1].set_title('After Wavelet Denoising', fontsize=24)\n\nax[1, 0].plot(x_2, color='seagreen', marker='o') \nax[1, 0].set_title('Original Sales', fontsize=24)\nax[1, 1].plot(y_w2, color='red', marker='.') \nax[1, 1].set_title('After Wavelet Denoising', fontsize=24)\n\nax[2, 0].plot(x_3, color='seagreen', marker='o') \nax[2, 0].set_title('Original Sales', fontsize=24)\nax[2, 1].plot(y_w3, color='red', marker='.') \nax[2, 1].set_title('After Wavelet Denoising', fontsize=24)\n\nplt.show()","b4eb4fda":"def average_smoothing(signal, kernel_size=3, stride=1):\n    sample = []\n    start = 0\n    end = kernel_size\n    while end <= len(signal):\n        start = start + stride\n        end = end + stride\n        sample.extend(np.ones(end - start)*np.mean(signal[start:end]))\n    return np.array(sample)","534ae8b5":"y_a1 = average_smoothing(x_1)\ny_a2 = average_smoothing(x_2)\ny_a3 = average_smoothing(x_3)\n\nfig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_1)), mode='lines+markers', y=x_1, marker=dict(color=\"lightskyblue\"), showlegend=False,\n               name=\"Original sales\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_1)), y=y_a1, mode='lines', marker=dict(color=\"navy\"), showlegend=False,\n               name=\"Denoised sales\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_2)), mode='lines+markers', y=x_2, marker=dict(color=\"thistle\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_2)), y=y_a2, mode='lines', marker=dict(color=\"indigo\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_3)), mode='lines+markers', y=x_3, marker=dict(color=\"mediumaquamarine\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_3)), y=y_a3, mode='lines', marker=dict(color=\"darkgreen\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.update_layout(height=1200, width=800, title_text=\"Original (pale) vs. Denoised (dark) signals\")\nfig.show()","7827ff3d":"fig, ax = plt.subplots(nrows=3, ncols=2, figsize=(30, 20))\n\nax[0, 0].plot(x_1, color='seagreen', marker='o') \nax[0, 0].set_title('Original Sales', fontsize=24)\nax[0, 1].plot(y_a1, color='red', marker='.') \nax[0, 1].set_title('After Wavelet Denoising', fontsize=24)\n\nax[1, 0].plot(x_2, color='seagreen', marker='o') \nax[1, 0].set_title('Original Sales', fontsize=24)\nax[1, 1].plot(y_a2, color='red', marker='.') \nax[1, 1].set_title('After Wavelet Denoising', fontsize=24)\n\nax[2, 0].plot(x_3, color='seagreen', marker='o') \nax[2, 0].set_title('Original Sales', fontsize=24)\nax[2, 1].plot(y_a3, color='red', marker='.') \nax[2, 1].set_title('After Wavelet Denoising', fontsize=24)\n\nplt.show()","89888b27":"past_sales = sales_train_val.set_index('id')[d_cols] \\\n    .T \\\n    .merge(calendar.set_index('d')['date'],\n           left_index=True,\n           right_index=True,\n            validate='1:1') \\\n    .set_index('date')\n\nstore_list = selling_prices['store_id'].unique()\nmeans = []\nfig = go.Figure()\nfor s in store_list:\n    store_items = [c for c in past_sales.columns if s in c]\n    data = past_sales[store_items].sum(axis=1).rolling(90).mean()\n    means.append(np.mean(past_sales[store_items].sum(axis=1)))\n    fig.add_trace(go.Scatter(x=np.arange(len(data)), y=data, name=s))\n    \nfig.update_layout(yaxis_title=\"Sales\", xaxis_title=\"Time\", title=\"Rolling Average Sales vs. Time (per store)\")","bd8bfa84":"fig = go.Figure()\n\nfor i, s in enumerate(store_list):\n        store_items = [c for c in past_sales.columns if s in c]\n        data = past_sales[store_items].sum(axis=1).rolling(90).mean()\n        fig.add_trace(go.Box(x=[s]*len(data), y=data, name=s))\n    \nfig.update_layout(yaxis_title=\"Sales\", xaxis_title=\"Time\", title=\"Rolling Average Sales vs. Store name \")","687e6902":"df = pd.DataFrame(np.transpose([means, store_list]))\ndf.columns = [\"Mean sales\", \"Store name\"]\npx.bar(df, y=\"Mean sales\", x=\"Store name\", color=\"Store name\", title=\"Mean sales vs. Store name\")","66c88b9a":"greens = [\"mediumaquamarine\", \"mediumseagreen\", \"seagreen\", \"green\"]\nstore_list = selling_prices['store_id'].unique()\nfig = go.Figure()\nmeans = []\nstores = []\nfor i, s in enumerate(store_list):\n    if \"ca\" in s or \"CA\" in s:\n        store_items = [c for c in past_sales.columns if s in c]\n        data = past_sales[store_items].sum(axis=1).rolling(90).mean()\n        means.append(np.mean(past_sales[store_items].sum(axis=1)))\n        stores.append(s)\n        fig.add_trace(go.Scatter(x=np.arange(len(data)), y=data, name=s, marker=dict(color=greens[i])))\n    \nfig.update_layout(yaxis_title=\"Sales\", xaxis_title=\"Time\", title=\"Rolling Average Sales vs. Time (California)\")","9d182f51":"fig = go.Figure()\n\nfor i, s in enumerate(store_list):\n    if \"ca\" in s or \"CA\" in s:\n        store_items = [c for c in past_sales.columns if s in c]\n        data = past_sales[store_items].sum(axis=1).rolling(90).mean()\n        fig.add_trace(go.Box(x=[s]*len(data), y=data, name=s, marker=dict(color=greens[i])))\n    \nfig.update_layout(yaxis_title=\"Sales\", xaxis_title=\"Time\", title=\"Rolling Average Sales vs. Store name (California)\")","17341aad":"df = pd.DataFrame(np.transpose([means, stores]))\ndf.columns = [\"Mean sales\", \"Store name\"]\npx.bar(df, y=\"Mean sales\", x=\"Store name\", color=\"Store name\", title=\"Mean sales vs. Store name\", color_continuous_scale=greens)\n\n\nfig = go.Figure(data=[\n    go.Bar(name='', x=stores, y=means, marker={'color' : greens})])\n\nfig.update_layout(title=\"Mean sales vs. Store name (California)\", yaxis=dict(title=\"Mean sales\"), xaxis=dict(title=\"Store name\"))\nfig.update_layout(barmode='group')\nfig.show()","2bf617ab":"purples = [\"thistle\", \"violet\", \"purple\", \"indigo\"]\nstore_list = selling_prices['store_id'].unique()\nfig = go.Figure()\nmeans = []\nstores = []\nfor i, s in enumerate(store_list):\n    if \"wi\" in s or \"WI\" in s:\n        store_items = [c for c in past_sales.columns if s in c]\n        data = past_sales[store_items].sum(axis=1).rolling(90).mean()\n        means.append(np.mean(past_sales[store_items].sum(axis=1)))\n        stores.append(s)\n        fig.add_trace(go.Scatter(x=np.arange(len(data)), y=data, name=s, marker=dict(color=purples[i%len(purples)])))\n    \nfig.update_layout(yaxis_title=\"Sales\", xaxis_title=\"Time\", title=\"Rolling Average Sales vs. Time (Wisconsin)\")","4e4d21d2":"fig = go.Figure()\n\nfor i, s in enumerate(store_list):\n    if \"wi\" in s or \"WI\" in s:\n        store_items = [c for c in past_sales.columns if s in c]\n        data = past_sales[store_items].sum(axis=1).rolling(90).mean()\n        fig.add_trace(go.Box(x=[s]*len(data), y=data, name=s, marker=dict(color=purples[i%len(purples)])))\n    \nfig.update_layout(yaxis_title=\"Sales\", xaxis_title=\"Time\", title=\"Rolling Average Sales vs. Store name (Wisconsin)\")","66fed51e":"df = pd.DataFrame(np.transpose([means, stores]))\ndf.columns = [\"Mean sales\", \"Store name\"]\npx.bar(df, y=\"Mean sales\", x=\"Store name\", color=\"Store name\", title=\"Mean sales vs. Store name\", color_continuous_scale=greens)\n\n\nfig = go.Figure(data=[\n    go.Bar(name='', x=stores, y=means, marker={'color' : purples})])\n\nfig.update_layout(title=\"Mean sales vs. Store name (Wisconsin)\", yaxis=dict(title=\"Mean sales\"), xaxis=dict(title=\"Store name\"))\nfig.update_layout(barmode='group')\nfig.show()","0d7a1d64":"blues = [\"skyblue\", \"dodgerblue\", \"darkblue\"]\nstore_list = selling_prices['store_id'].unique()\nfig = go.Figure()\nmeans = []\nstores = []\nfor i, s in enumerate(store_list):\n    if \"tx\" in s or \"TX\" in s:\n        store_items = [c for c in past_sales.columns if s in c]\n        data = past_sales[store_items].sum(axis=1).rolling(90).mean()\n        means.append(np.mean(past_sales[store_items].sum(axis=1)))\n        stores.append(s)\n        fig.add_trace(go.Scatter(x=np.arange(len(data)), y=data, name=s, marker=dict(color=blues[i%len(blues)])))\n    \nfig.update_layout(yaxis_title=\"Sales\", xaxis_title=\"Time\", title=\"Rolling Average Sales vs. Time (Texas)\")","b5b5c47c":"fig = go.Figure()\n\nfor i, s in enumerate(store_list):\n    if \"tx\" in s or \"TX\" in s:\n        store_items = [c for c in past_sales.columns if s in c]\n        data = past_sales[store_items].sum(axis=1).rolling(90).mean()\n        fig.add_trace(go.Box(x=[s]*len(data), y=data, name=s, marker=dict(color=blues[i%len(blues)])))\n    \nfig.update_layout(yaxis_title=\"Sales\", xaxis_title=\"Time\", title=\"Rolling Average Sales vs. Store name (Texas)\")","ed5c5076":"df = pd.DataFrame(np.transpose([means, stores]))\ndf.columns = [\"Mean sales\", \"Store name\"]\npx.bar(df, y=\"Mean sales\", x=\"Store name\", color=\"Store name\", title=\"Mean sales vs. Store name\", color_continuous_scale=greens)\n\n\nfig = go.Figure(data=[\n    go.Bar(name='', x=stores, y=means, marker={'color' : blues})])\n\nfig.update_layout(title=\"Mean sales vs. Store name (Texas)\", yaxis=dict(title=\"Mean sales\"), xaxis=dict(title=\"Store name\"))\nfig.update_layout(barmode='group')\nfig.show()","50ededbf":"train_dataset = sales_train_val[d_cols[-100:-30]]\nval_dataset = sales_train_val[d_cols[-30:]]","a43b296e":"fig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[0].values, marker=dict(color=\"dodgerblue\"), showlegend=False,\n               name=\"Original signal\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[0].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[1].values, marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[1].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[2].values, marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[2].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.update_layout(height=1200, width=800, title_text=\"Train (blue) vs. Validation (orange) sales\")\nfig.show()","fd3799ec":"predictions = []\nfor i in range(len(val_dataset.columns)):\n    if i == 0:\n        predictions.append(train_dataset[train_dataset.columns[-1]].values)\n    else:\n        predictions.append(val_dataset[val_dataset.columns[i-1]].values)\n    \npredictions = np.transpose(np.array([row.tolist() for row in predictions]))\nerror_naive = np.linalg.norm(predictions[:3] - val_dataset.values[:3])\/len(predictions[0])","d6c7fe36":"pred_1 = predictions[0]\npred_2 = predictions[1]\npred_3 = predictions[2]\n\nfig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[0].values, marker=dict(color=\"dodgerblue\"),\n               name=\"Train\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[0].values, mode='lines', marker=dict(color=\"darkorange\"),\n               name=\"Val\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_1, mode='lines', marker=dict(color=\"seagreen\"),\n               name=\"Pred\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[1].values, marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[1].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_2, mode='lines', marker=dict(color=\"seagreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[2].values, marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[2].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_3, mode='lines', marker=dict(color=\"seagreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=3, col=1\n)\n\nfig.update_layout(height=1200, width=800, title_text=\"Naive approach\")\nfig.show()","268c1ede":"predictions = []\nfor i in range(len(val_dataset.columns)):\n    if i == 0:\n        predictions.append(np.mean(train_dataset[train_dataset.columns[-30:]].values, axis=1))\n    if i < 31 and i > 0:\n        predictions.append(0.5 * (np.mean(train_dataset[train_dataset.columns[-30+i:]].values, axis=1) + \\\n                                  np.mean(predictions[:i], axis=0)))\n    if i > 31:\n        predictions.append(np.mean([predictions[:i]], axis=1))\n    \npredictions = np.transpose(np.array([row.tolist() for row in predictions]))\nerror_avg = np.linalg.norm(predictions[:3] - val_dataset.values[:3])\/len(predictions[0])","854acaba":"pred_1 = predictions[0]\npred_2 = predictions[1]\npred_3 = predictions[2]\n\nfig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[0].values, marker=dict(color=\"dodgerblue\"),\n               name=\"Train\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[0].values, mode='lines', marker=dict(color=\"darkorange\"),\n               name=\"Val\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_1, mode='lines', marker=dict(color=\"seagreen\"),\n               name=\"Pred\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[1].values, marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[1].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_2, mode='lines', marker=dict(color=\"seagreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[2].values, marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[2].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_3, mode='lines', marker=dict(color=\"seagreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=3, col=1\n)\n\nfig.update_layout(height=1200, width=800, title_text=\"Moving average\")\nfig.show()","3f5df5a8":"predictions = []\nfor row in tqdm(train_dataset[train_dataset.columns[-30:]].values[:3]):\n    fit = Holt(row).fit(smoothing_level = 0.3, smoothing_slope = 0.01)\n    predictions.append(fit.forecast(30))\npredictions = np.array(predictions).reshape((-1, 30))\nerror_holt = np.linalg.norm(predictions - val_dataset.values[:len(predictions)])\/len(predictions[0])","bfc6ec14":"pred_1 = predictions[0]\npred_2 = predictions[1]\npred_3 = predictions[2]\n\nfig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[0].values, marker=dict(color=\"dodgerblue\"),\n               name=\"Train\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[0].values, mode='lines', marker=dict(color=\"darkorange\"),\n               name=\"Val\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_1, mode='lines', marker=dict(color=\"seagreen\"),\n               name=\"Pred\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[1].values, marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[1].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_2, mode='lines', marker=dict(color=\"seagreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[2].values, marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[2].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_3, mode='lines', marker=dict(color=\"seagreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=3, col=1\n)\n\nfig.update_layout(height=1200, width=800, title_text=\"Holt linear\")\nfig.show()","d2a77701":"predictions = []\nfor row in tqdm(train_dataset[train_dataset.columns[-30:]].values[:3]):\n    fit = ExponentialSmoothing(row, seasonal_periods=3).fit()\n    predictions.append(fit.forecast(30))\npredictions = np.array(predictions).reshape((-1, 30))\nerror_exponential = np.linalg.norm(predictions[:3] - val_dataset.values[:3])\/len(predictions[0])","5333477e":"pred_1 = predictions[0]\npred_2 = predictions[1]\npred_3 = predictions[2]\n\nfig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[0].values, marker=dict(color=\"dodgerblue\"),\n               name=\"Train\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[0].values, mode='lines', marker=dict(color=\"darkorange\"),\n               name=\"Val\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_1, mode='lines', marker=dict(color=\"seagreen\"),\n               name=\"Pred\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[1].values, marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[1].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_2, mode='lines', marker=dict(color=\"seagreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[2].values, marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[2].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_3, mode='lines', marker=dict(color=\"seagreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=3, col=1\n)\n\nfig.update_layout(height=1200, width=800, title_text=\"Exponential smoothing\")\nfig.show()","6129dd94":"HTML('<center><iframe width=\"700\" height=\"400\" src=\"https:\/\/www.youtube.com\/embed\/Y2khrpVo6qI?rel=0&amp;controls=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/center>')","f8a3349c":"predictions = []\nfor row in tqdm(train_dataset[train_dataset.columns[-30:]].values[:3]):\n    fit = sm.tsa.statespace.SARIMAX(row, seasonal_order=(0, 1, 1, 7)).fit()\n    predictions.append(fit.forecast(30))\npredictions = np.array(predictions).reshape((-1, 30))\nerror_arima = np.linalg.norm(predictions[:3] - val_dataset.values[:3])\/len(predictions[0])","129a6172":"pred_1 = predictions[0]\npred_2 = predictions[1]\npred_3 = predictions[2]\n\nfig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[0].values, marker=dict(color=\"dodgerblue\"),\n               name=\"Train\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[0].values, mode='lines', marker=dict(color=\"darkorange\"),\n               name=\"Val\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_1, mode='lines', marker=dict(color=\"seagreen\"),\n               name=\"Pred\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[1].values, marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[1].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_2, mode='lines', marker=dict(color=\"seagreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[2].values, marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[2].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_3, mode='lines', marker=dict(color=\"seagreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=3, col=1\n)\n\nfig.update_layout(height=1200, width=800, title_text=\"ARIMA\")\nfig.show()","51e12945":"HTML('<center><iframe width=\"700\" height=\"400\" src=\"https:\/\/www.youtube.com\/embed\/95-HMzxsghY?rel=0&amp;controls=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/center>')","941ddd59":"dates = [\"2007-12-\" + str(i) for i in range(1, 31)]\npredictions = []\nfor row in tqdm(train_dataset[train_dataset.columns[-30:]].values[:3]):\n    df = pd.DataFrame(np.transpose([dates, row]))\n    df.columns = [\"ds\", \"y\"]\n    model = Prophet(daily_seasonality=True)\n    model.fit(df)\n    future = model.make_future_dataframe(periods=30)\n    forecast = model.predict(future)[\"yhat\"].loc[30:].values\n    predictions.append(forecast)\npredictions = np.array(predictions).reshape((-1, 30))\nerror_prophet = np.linalg.norm(predictions[:3] - val_dataset.values[:3])\/len(predictions[0])","6a27d176":"pred_1 = predictions[0]\npred_2 = predictions[1]\npred_3 = predictions[2]\n\nfig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[0].values, marker=dict(color=\"dodgerblue\"),\n               name=\"Train\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[0].values, mode='lines', marker=dict(color=\"darkorange\"),\n               name=\"Val\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_1, mode='lines', marker=dict(color=\"seagreen\"),\n               name=\"Pred\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[1].values, marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[1].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_2, mode='lines', marker=dict(color=\"seagreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_dataset.loc[2].values, marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_dataset.loc[2].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_3, mode='lines', marker=dict(color=\"seagreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=3, col=1\n)\n\nfig.update_layout(height=1200, width=800, title_text=\"Prophet\")\nfig.show()","9eae6b32":"days = range(1, 1913 + 1)\ntime_series_columns = [f'd_{i}' for i in days]\ntime_series_data = sales_train_val[time_series_columns]\nforecast = pd.DataFrame(time_series_data.iloc[:, -28:].mean(axis=1))\nforecast = pd.concat([forecast] * 28, axis=1)\nforecast.columns = [f'F{i}' for i in range(1, forecast.shape[1] + 1)]\nvalidation_ids = sales_train_val['id'].values\nevaluation_ids = [i.replace('validation', 'evaluation') for i in validation_ids]\nids = np.concatenate([validation_ids, evaluation_ids])\npredictions = pd.DataFrame(ids, columns=['id'])\nforecast = pd.concat([forecast] * 2).reset_index(drop=True)\npredictions = pd.concat([predictions, forecast], axis=1)\npredictions.to_csv('submission.csv', index=False)","0103eae9":"error = [error_naive, error_avg, error_holt, error_exponential, error_arima, error_prophet]\nnames = [\"Naive approach\", \"Moving average\", \"Holt linear\", \"Exponential smoothing\", \"ARIMA\", \"Prophet\"]\ndf = pd.DataFrame(np.transpose([error, names]))\ndf.columns = [\"RMSE Loss\", \"Model\"]\npx.bar(df, y=\"RMSE Loss\", x=\"Model\", color=\"Model\", title=\"RMSE Loss vs. Model\")","99327da6":"# General imports\nimport numpy as np\nimport pandas as pd\nimport os, sys, gc, time, warnings, pickle, psutil, random\n\n# custom imports\nfrom multiprocessing import Pool        # Multiprocess Runs\n\nwarnings.filterwarnings('ignore')","36446042":"########################### Helpers\n#################################################################################\n## Seeder\n# :seed to make all processes deterministic     # type: int\ndef seed_everything(seed=0):\n    random.seed(seed)\n    np.random.seed(seed)\n\n    \n## Multiprocess Runs\ndef df_parallelize_run(func, t_split):\n    num_cores = np.min([N_CORES,len(t_split)])\n    pool = Pool(num_cores)\n    df = pd.concat(pool.map(func, t_split), axis=1)\n    pool.close()\n    pool.join()\n    return df","f676b77a":"########################### Helper to load data by store ID\n#################################################################################\n# Read data\ndef get_data_by_store(store):\n    \n    # Read and contact basic feature\n    df = pd.concat([pd.read_pickle(BASE),\n                    pd.read_pickle(PRICE).iloc[:,2:],\n                    pd.read_pickle(CALENDAR).iloc[:,2:]],\n                    axis=1)\n    \n    # Leave only relevant store\n    df = df[df['store_id']==store]\n\n    # With memory limits we have to read \n    # lags and mean encoding features\n    # separately and drop items that we don't need.\n    # As our Features Grids are aligned \n    # we can use index to keep only necessary rows\n    # Alignment is good for us as concat uses less memory than merge.\n    df2 = pd.read_pickle(MEAN_ENC)[mean_features]\n    df2 = df2[df2.index.isin(df.index)]\n    \n    df3 = pd.read_pickle(LAGS).iloc[:,3:]\n    df3 = df3[df3.index.isin(df.index)]\n    \n    df = pd.concat([df, df2], axis=1)\n    del df2 # to not reach memory limit \n    \n    df = pd.concat([df, df3], axis=1)\n    del df3 # to not reach memory limit \n    \n    # Create features list\n    features = [col for col in list(df) if col not in remove_features]\n    df = df[['id','d',TARGET]+features]\n    \n    # Skipping first n rows\n    df = df[df['d']>=START_TRAIN].reset_index(drop=True)\n    \n    return df, features\n\n# Recombine Test set after training\ndef get_base_test():\n    base_test = pd.DataFrame()\n\n    for store_id in STORES_IDS:\n        temp_df = pd.read_pickle('test_'+store_id+'.pkl')\n        temp_df['store_id'] = store_id\n        base_test = pd.concat([base_test, temp_df]).reset_index(drop=True)\n    \n    return base_test\n\n\n########################### Helper to make dynamic rolling lags\n#################################################################################\ndef make_lag(LAG_DAY):\n    lag_df = base_test[['id','d',TARGET]]\n    col_name = 'sales_lag_'+str(LAG_DAY)\n    lag_df[col_name] = lag_df.groupby(['id'])[TARGET].transform(lambda x: x.shift(LAG_DAY)).astype(np.float16)\n    return lag_df[[col_name]]\n\n\ndef make_lag_roll(LAG_DAY):\n    shift_day = LAG_DAY[0]\n    roll_wind = LAG_DAY[1]\n    lag_df = base_test[['id','d',TARGET]]\n    col_name = 'rolling_mean_tmp_'+str(shift_day)+'_'+str(roll_wind)\n    lag_df[col_name] = lag_df.groupby(['id'])[TARGET].transform(lambda x: x.shift(shift_day).rolling(roll_wind).mean())\n    return lag_df[[col_name]]","e2e28eb8":"########################### Model params\n#################################################################################\nimport lightgbm as lgb\nlgb_params = {\n                    'boosting_type': 'gbdt',\n                    'objective': 'tweedie',\n                    'tweedie_variance_power': 1.1,\n                    'metric': 'rmse',\n                    'subsample': 0.5,\n                    'subsample_freq': 1,\n                    'learning_rate': 0.03,\n                    'num_leaves': 2**11-1,\n                    'min_data_in_leaf': 2**12-1,\n                    'feature_fraction': 0.5,\n                    'max_bin': 100,\n                    'n_estimators': 1400,\n                    'boost_from_average': False,\n                    'verbose': -1,\n                } \n\n# Let's look closer on params\n\n## 'boosting_type': 'gbdt'\n# we have 'goss' option for faster training\n# but it normally leads to underfit.\n# Also there is good 'dart' mode\n# but it takes forever to train\n# and model performance depends \n# a lot on random factor \n# https:\/\/www.kaggle.com\/c\/home-credit-default-risk\/discussion\/60921\n\n## 'objective': 'tweedie'\n# Tweedie Gradient Boosting for Extremely\n# Unbalanced Zero-inflated Data\n# https:\/\/arxiv.org\/pdf\/1811.10192.pdf\n# and many more articles about tweediie\n#\n# Strange (for me) but Tweedie is close in results\n# to my own ugly loss.\n# My advice here - make OWN LOSS function\n# https:\/\/www.kaggle.com\/c\/m5-forecasting-accuracy\/discussion\/140564\n# https:\/\/www.kaggle.com\/c\/m5-forecasting-accuracy\/discussion\/143070\n# I think many of you already using it (after poisson kernel appeared) \n# (kagglers are very good with \"params\" testing and tuning).\n# Try to figure out why Tweedie works.\n# probably it will show you new features options\n# or data transformation (Target transformation?).\n\n## 'tweedie_variance_power': 1.1\n# default = 1.5\n# set this closer to 2 to shift towards a Gamma distribution\n# set this closer to 1 to shift towards a Poisson distribution\n# my CV shows 1.1 is optimal \n# but you can make your own choice\n\n## 'metric': 'rmse'\n# Doesn't mean anything to us\n# as competition metric is different\n# and we don't use early stoppings here.\n# So rmse serves just for general \n# model performance overview.\n# Also we use \"fake\" validation set\n# (as it makes part of the training set)\n# so even general rmse score doesn't mean anything))\n# https:\/\/www.kaggle.com\/c\/m5-forecasting-accuracy\/discussion\/133834\n\n## 'subsample': 0.5\n# Serves to fight with overfit\n# this will randomly select part of data without resampling\n# Chosen by CV (my CV can be wrong!)\n# Next kernel will be about CV\n\n##'subsample_freq': 1\n# frequency for bagging\n# default value - seems ok\n\n## 'learning_rate': 0.03\n# Chosen by CV\n# Smaller - longer training\n# but there is an option to stop \n# in \"local minimum\"\n# Bigger - faster training\n# but there is a chance to\n# not find \"global minimum\" minimum\n\n## 'num_leaves': 2**11-1\n## 'min_data_in_leaf': 2**12-1\n# Force model to use more features\n# We need it to reduce \"recursive\"\n# error impact.\n# Also it leads to overfit\n# that's why we use small \n# 'max_bin': 100\n\n## l1, l2 regularizations\n# https:\/\/towardsdatascience.com\/l1-and-l2-regularization-methods-ce25e7fc831c\n# Good tiny explanation\n# l2 can work with bigger num_leaves\n# but my CV doesn't show boost\n                    \n## 'n_estimators': 1400\n# CV shows that there should be\n# different values for each state\/store.\n# Current value was chosen \n# for general purpose.\n# As we don't use any early stopings\n# careful to not overfit Public LB.\n\n##'feature_fraction': 0.5\n# LightGBM will randomly select \n# part of features on each iteration (tree).\n# We have maaaany features\n# and many of them are \"duplicates\"\n# and many just \"noise\"\n# good values here - 0.5-0.7 (by CV)\n\n## 'boost_from_average': False\n# There is some \"problem\"\n# to code boost_from_average for \n# custom loss\n# 'True' makes training faster\n# BUT carefull use it\n# https:\/\/github.com\/microsoft\/LightGBM\/issues\/1514\n# not our case but good to know cons","c2b7c846":"########################### Vars\n#################################################################################\nVER = 1                          # Our model version\nSEED = 42                        # We want all things\nseed_everything(SEED)            # to be as deterministic \nlgb_params['seed'] = SEED        # as possible\nN_CORES = psutil.cpu_count()     # Available CPU cores\n\n\n#LIMITS and const\nTARGET      = 'sales'            # Our target\nSTART_TRAIN = 0                  # We can skip some rows (Nans\/faster training)\nEND_TRAIN   = 1913               # End day of our train set\nP_HORIZON   = 28                 # Prediction horizon\nUSE_AUX     = True               # Use or not pretrained models\n\n#FEATURES to remove\n## These features lead to overfit\n## or values not present in test set\nremove_features = ['id','state_id','store_id',\n                   'date','wm_yr_wk','d',TARGET]\nmean_features   = ['enc_cat_id_mean','enc_cat_id_std',\n                   'enc_dept_id_mean','enc_dept_id_std',\n                   'enc_item_id_mean','enc_item_id_std'] \n\n#PATHS for Features\nORIGINAL = '..\/input\/m5-forecasting-accuracy\/'\nBASE     = '..\/input\/m5-simple-fe\/grid_part_1.pkl'\nPRICE    = '..\/input\/m5-simple-fe\/grid_part_2.pkl'\nCALENDAR = '..\/input\/m5-simple-fe\/grid_part_3.pkl'\nLAGS     = '..\/input\/m5-lags-features\/lags_df_28.pkl'\nMEAN_ENC = '..\/input\/m5-custom-features\/mean_encoding_df.pkl'\n\n\n# AUX(pretrained) Models paths\nAUX_MODELS = '..\/input\/m5-aux-models\/'\n\n\n#STORES ids\nSTORES_IDS = pd.read_csv(ORIGINAL+'sales_train_validation.csv')['store_id']\nSTORES_IDS = list(STORES_IDS.unique())\n\n\n#SPLITS for lags creation\nSHIFT_DAY  = 28\nN_LAGS     = 15\nLAGS_SPLIT = [col for col in range(SHIFT_DAY,SHIFT_DAY+N_LAGS)]\nROLS_SPLIT = []\nfor i in [1,7,14]:\n    for j in [7,14,30,60]:\n        ROLS_SPLIT.append([i,j])","9763bde9":"########################### Aux Models\n# If you don't want to wait hours and hours\n# to have result you can train each store \n# in separate kernel and then just join result.\n\n# If we want to use pretrained models we can \n## skip training \n## (in our case do dummy training\n##  to show that we are good with memory\n##  and you can safely use this (all kernel) code)\nif USE_AUX:\n    lgb_params['n_estimators'] = 2\n    \n# Here is some 'logs' that can compare\n#Train CA_1\n#[100]\tvalid_0's rmse: 2.02289\n#[200]\tvalid_0's rmse: 2.0017\n#[300]\tvalid_0's rmse: 1.99239\n#[400]\tvalid_0's rmse: 1.98471\n#[500]\tvalid_0's rmse: 1.97923\n#[600]\tvalid_0's rmse: 1.97284\n#[700]\tvalid_0's rmse: 1.96763\n#[800]\tvalid_0's rmse: 1.9624\n#[900]\tvalid_0's rmse: 1.95673\n#[1000]\tvalid_0's rmse: 1.95201\n#[1100]\tvalid_0's rmse: 1.9476\n#[1200]\tvalid_0's rmse: 1.9434\n#[1300]\tvalid_0's rmse: 1.9392\n#[1400]\tvalid_0's rmse: 1.93446\n\n#Train CA_2\n#[100]\tvalid_0's rmse: 1.88949\n#[200]\tvalid_0's rmse: 1.84767\n#[300]\tvalid_0's rmse: 1.83653\n#[400]\tvalid_0's rmse: 1.82909\n#[500]\tvalid_0's rmse: 1.82265\n#[600]\tvalid_0's rmse: 1.81725\n#[700]\tvalid_0's rmse: 1.81252\n#[800]\tvalid_0's rmse: 1.80736\n#[900]\tvalid_0's rmse: 1.80242\n#[1000]\tvalid_0's rmse: 1.79821\n#[1100]\tvalid_0's rmse: 1.794\n#[1200]\tvalid_0's rmse: 1.78973\n#[1300]\tvalid_0's rmse: 1.78552\n#[1400]\tvalid_0's rmse: 1.78158","d1294497":"########################### Train Models\n#################################################################################\nfor store_id in STORES_IDS:\n    print('Train', store_id)\n    \n    # Get grid for current store\n    grid_df, features_columns = get_data_by_store(store_id)\n    \n    # Masks for \n    # Train (All data less than 1913)\n    # \"Validation\" (Last 28 days - not real validatio set)\n    # Test (All data greater than 1913 day, \n    #       with some gap for recursive features)\n    train_mask = grid_df['d']<=END_TRAIN\n    valid_mask = train_mask&(grid_df['d']>(END_TRAIN-P_HORIZON))\n    preds_mask = grid_df['d']>(END_TRAIN-100)\n    \n    # Apply masks and save lgb dataset as bin\n    # to reduce memory spikes during dtype convertations\n    # https:\/\/github.com\/Microsoft\/LightGBM\/issues\/1032\n    # \"To avoid any conversions, you should always use np.float32\"\n    # or save to bin before start training\n    # https:\/\/www.kaggle.com\/c\/talkingdata-adtracking-fraud-detection\/discussion\/53773\n    train_data = lgb.Dataset(grid_df[train_mask][features_columns], \n                       label=grid_df[train_mask][TARGET])\n    train_data.save_binary('train_data.bin')\n    train_data = lgb.Dataset('train_data.bin')\n    \n    valid_data = lgb.Dataset(grid_df[valid_mask][features_columns], \n                       label=grid_df[valid_mask][TARGET])\n    \n    # Saving part of the dataset for later predictions\n    # Removing features that we need to calculate recursively \n    grid_df = grid_df[preds_mask].reset_index(drop=True)\n    keep_cols = [col for col in list(grid_df) if '_tmp_' not in col]\n    grid_df = grid_df[keep_cols]\n    grid_df.to_pickle('test_'+store_id+'.pkl')\n    del grid_df\n    \n    # Launch seeder again to make lgb training 100% deterministic\n    # with each \"code line\" np.random \"evolves\" \n    # so we need (may want) to \"reset\" it\n    seed_everything(SEED)\n    estimator = lgb.train(lgb_params,\n                          train_data,\n                          valid_sets = [valid_data],\n                          verbose_eval = 100,\n                          )\n    \n    # Save model - it's not real '.bin' but a pickle file\n    # estimator = lgb.Booster(model_file='model.txt')\n    # can only predict with the best iteration (or the saving iteration)\n    # pickle.dump gives us more flexibility\n    # like estimator.predict(TEST, num_iteration=100)\n    # num_iteration - number of iteration want to predict with, \n    # NULL or <= 0 means use best iteration\n    model_name = 'lgb_model_'+store_id+'_v'+str(VER)+'.bin'\n    pickle.dump(estimator, open(model_name, 'wb'))\n\n    # Remove temporary files and objects \n    # to free some hdd space and ram memory\n    !rm train_data.bin\n    del train_data, valid_data, estimator\n    gc.collect()\n    \n    # \"Keep\" models features for predictions\n    MODEL_FEATURES = features_columns","2bdd7197":"########################### Predict\n#################################################################################\n\n# Create Dummy DataFrame to store predictions\nall_preds = pd.DataFrame()\n\n# Join back the Test dataset with \n# a small part of the training data \n# to make recursive features\nbase_test = get_base_test()\n\n# Timer to measure predictions time \nmain_time = time.time()\n\n# Loop over each prediction day\n# As rolling lags are the most timeconsuming\n# we will calculate it for whole day\nfor PREDICT_DAY in range(1,29):    \n    print('Predict | Day:', PREDICT_DAY)\n    start_time = time.time()\n\n    # Make temporary grid to calculate rolling lags\n    grid_df = base_test.copy()\n    grid_df = pd.concat([grid_df, df_parallelize_run(make_lag_roll, ROLS_SPLIT)], axis=1)\n        \n    for store_id in STORES_IDS:\n        \n        # Read all our models and make predictions\n        # for each day\/store pairs\n        model_path = 'lgb_model_'+store_id+'_v'+str(VER)+'.bin' \n        if USE_AUX:\n            model_path = AUX_MODELS + model_path\n        \n        estimator = pickle.load(open(model_path, 'rb'))\n        \n        day_mask = base_test['d']==(END_TRAIN+PREDICT_DAY)\n        store_mask = base_test['store_id']==store_id\n        \n        mask = (day_mask)&(store_mask)\n        base_test[TARGET][mask] = estimator.predict(grid_df[mask][MODEL_FEATURES])\n    \n    # Make good column naming and add \n    # to all_preds DataFrame\n    temp_df = base_test[day_mask][['id',TARGET]]\n    temp_df.columns = ['id','F'+str(PREDICT_DAY)]\n    if 'id' in list(all_preds):\n        all_preds = all_preds.merge(temp_df, on=['id'], how='left')\n    else:\n        all_preds = temp_df.copy()\n        \n    print('#'*10, ' %0.2f min round |' % ((time.time() - start_time) \/ 60),\n                  ' %0.2f min total |' % ((time.time() - main_time) \/ 60),\n                  ' %0.2f day sales |' % (temp_df['F'+str(PREDICT_DAY)].sum()))\n    del temp_df\n    \nall_preds = all_preds.reset_index(drop=True)\nall_preds","368a67db":"########################### Export\n#################################################################################\n# Reading competition sample submission and\n# merging our predictions\n# As we have predictions only for \"_validation\" data\n# we need to do fillna() for \"_evaluation\" items\nsubmission = pd.read_csv(ORIGINAL+'sample_submission.csv')[['id']]\nsubmission = submission.merge(all_preds, on=['id'], how='left').fillna(0)\nsubmission.to_csv('submission_v'+str(VER)+'.csv', index=False)","9a151e49":"# Summary\n\n# Of course here is no magic at all.\n# No \"Novel\" features and no brilliant ideas.\n# We just carefully joined all\n# our previous fe work and created a model.\n\n# Also!\n# In my opinion this strategy is a \"dead end\".\n# Overfits a lot LB and with 1 final submission \n# you have no option to risk.\n\n\n# Improvement should come from:\n# Loss function\n# Data representation\n# Stable CV\n# Good features reduction strategy\n# Predictions stabilization with NN\n# Trend prediction\n# Real zero sales detection\/classification\n\n\n# Good kernels references \n## (the order is random and the list is not complete):\n# https:\/\/www.kaggle.com\/ragnar123\/simple-lgbm-groupkfold-cv\n# https:\/\/www.kaggle.com\/jpmiller\/grouping-items-by-stockout-pattern\n# https:\/\/www.kaggle.com\/headsortails\/back-to-predict-the-future-interactive-m5-eda\n# https:\/\/www.kaggle.com\/sibmike\/m5-out-of-stock-feature\n# https:\/\/www.kaggle.com\/mayer79\/m5-forecast-attack-of-the-data-table\n# https:\/\/www.kaggle.com\/yassinealouini\/seq2seq\n# https:\/\/www.kaggle.com\/kailex\/m5-forecaster-v2\n# https:\/\/www.kaggle.com\/aerdem4\/m5-lofo-importance-on-gpu-via-rapids-xgboost\n\n\n# Features were created in these kernels:\n## \n# Mean encodings and PCA options\n# https:\/\/www.kaggle.com\/kyakovlev\/m5-custom-features\n##\n# Lags and rolling lags\n# https:\/\/www.kaggle.com\/kyakovlev\/m5-lags-features\n##\n# Base Grid and base features (calendar\/price\/etc)\n# https:\/\/www.kaggle.com\/kyakovlev\/m5-simple-fe\n\n\n# Personal request\n# Please don't upvote any ensemble and copypaste kernels\n## The worst case is ensemble without any analyse.\n## The best choice - just ignore it.\n## I would like to see more kernels with interesting and original approaches.\n## Don't feed copypasters with upvotes.\n\n## It doesn't mean that you should not fork and improve others kernels\n## but I would like to see params and code tuning based on some CV and analyse\n## and not only on LB probing.\n## Small changes could be shared in comments and authors can improve their kernel.\n\n## Feel free to criticize this kernel as my knowlege is very limited\n## and I can be wrong in code and descriptions. \n## Thank you.","2890aa46":"## ARIMA <a id=\"3.6\"><\/a>\n\n**ARIMA** stands for **A**uto **R**egressive **I**ntegrated **M**oving **A**verage. While exponential smoothing models were based on a description of trend and seasonality in data, ARIMA models aim to describe the correlations in the time series. The video below explains ARIMA very well:","740ab2f2":"<img src=\"https:\/\/i.imgur.com\/MHgcgGo.png\" width=\"180px\">\n<img src=\"https:\/\/i.imgur.com\/3ImRHEO.png\" width=\"300px\">\n<img src=\"https:\/\/i.imgur.com\/XExnvMX.png\" width=\"300px\">\n\n\nIn the above equations, $\\alpha$ and $\\beta$ are constants which can be configured. The values *l<sub>t<\/sub>* and *b<sub>t<\/sub>* represent the **level** and **trend** values repsectively. The trend value is the slope of the linear forecast function and the level value is the *y*-intercept of the linear forecast function. The slope and *y*-intercept values are continuously updated using the second and third update equations. Finally, the slope and *y*-intercept values are used to calculate the forecast, *y<sub>t+h<\/sub>* (in equation 1), which is *h* time steps ahead of the current time step. Now let us see how this model performs on our miniature dataset. The training data is in <font color=\"blue\">blue<\/font>, validation data in <font color=\"darkorange\">orange<\/font>, and predictions in <font color=\"green\">green<\/font>.","5ff2c339":"### Average smoothing\n\nAverage smooting is a relatively simple way to denoise time series data. In this method, we take a \"window\" with a fixed size (like 10). We first place the window at the beginning of the time series (first ten elements) and calculate the mean of that section. We now move the window across the time series in the forward direction by a particular \"stride\", calculate the mean of the new window and repeat the process, until we reach the end of the time series. All the mean values we calculated are then concatenated into a new time series, which forms the denoised sales data.","ae098396":"In the above graph, we can once again see that a very low disparity in sales among Texas stores. The sales curves intersect each other often, albeit not as often as in Wisconsin. This might once again indicate that most parts of Texas have a similar \"development curve\" and that there is a greater equity in development across the state. The variance here is higher than in Wisconsin though, so there might be \"hubs\" of development in Texas as well, but not as pronounced as in California. The average sales in descending order are <code>TX_2, TX_3, TX_1<\/code>. The store <code>TX_2<\/code> has maximum sales while the store <code>TX_1<\/code> has minimum sales.","22f33431":"The below diagram illustrates these graphs side-by-side. Red graphs represent original sales and green graphs represent denoised sales.","e40963f6":"To get started, here is an excellent video about how to approach time series forecasting:","265c13f2":"In the above graphs, the dark lineplots represent the denoised sales and the light lineplots represent the original sales. We can see that Wavelet denoising is able to successfully find the \"general trend\" in the sales data without getting distracted by the noise. Finding these high- trends or patterns in the sales may be useful in generating features to train a model.","5f701a97":"In the above graph, we can see the large disparity in sales among California stores. The sales curves almost never intersect each other. This may indicate that there are certain \"hubs\" of development in California which do not change over time. And other areas always remain behind these \"hubs\". The average sales in descending order are <code>CA_3, CA_1, CA_2, CA_4<\/code>. The store <code>CA_3<\/code> has maximum sales while the store <code>CA_4<\/code> has minimum sales. ","5948a8f6":"# The dataset <a id=\"1\"><\/a>\n\nThe dataset consists of five .csv files.\n\n* <code>calendar.csv<\/code> - Contains the dates on which products are sold. The dates are in a <code>yyyy\/dd\/mm<\/code> format.\n\n* <code>sales_train_validation.csv<\/code> - Contains the historical daily unit sales data per product and store <code>[d_1 - d_1913]<\/code>.\n\n* <code>submission.csv<\/code> - Demonstrates the correct format for submission to the competition.\n\n* <code>sell_prices.csv<\/code> - Contains information about the price of the products sold per store and date.\n\n* <code>sales_train_evaluation.csv<\/code> - Available one month before the competition deadline. It will include sales for <code>[d_1 - d_1941]<\/code>.\n\nIn this competition, we need to forecast the sales for <code>[d_1942 - d_1969]<\/code>. These rows form the evaluation set. The rows <code>[d_1914 - d_1941]<\/code> form the validation set, and the remaining rows form the training set. Now, since we understand the dataset and know what to predict, let us visualize the dataset.","772e15af":"The below diagram illustrates these graphs side-by-side. Red graphs represent original sales and green graphs represent denoised sales.","da514e56":"### Rolling Average Price vs. Time (WI)","813e02fe":"ARIMA is able to find low-level and high-level trends simultaneously, unlike most other models which can only find one of these. It is able to predict a periodic function for each sample, and these functions seem to be pretty accurate (except for the second sample).","6a61c304":"Now let us see how Prophet performs on our miniature dataset. The training data is in <font color=\"blue\">blue<\/font>, validation data in <font color=\"darkorange\">orange<\/font>, and predictions in <font color=\"green\">green<\/font>.","0d594a6f":"# EDA <a id=\"2\"><\/a>\n\nNow, I will try to visualize the sales data and gain some insights from it.","7755dceb":"In the above plots, I simply zoom in to sample snippets in the sales data. As stated earlier, we can clearly see that the sales data is very erratic and volatile. Sometimes, the sales are zero for a few days in a row, and at other times, it remains at its peak value for a few days. Therefore, we need some sort of \"denoising\" techniques to find the underlying trends in the sales data and make forecasts.","fca19260":"## Sales data <a id=\"2.2\"><\/a>\n\n\n### Sample sales data","956491fe":"Now let us see how ARIMA performs on our miniature dataset. The training data is in <font color=\"blue\">blue<\/font>, validation data in <font color=\"darkorange\">orange<\/font>, and predictions in <font color=\"green\">green<\/font>.","10e879f0":"## Stores and states <a id=\"2.4\"><\/a>\n\nNow, I will look at the sales data across different stores and states in order to gain some useful insights.","6c9b8e09":"Below are the sales from three sample data points. I will use these samples to demonstrate the working of the models.","1e428c79":"# Ending note\n\n<font color=\"red\" size=4>This concludes my kernel. Please upvote if you like it. It motivates me to produce more quality content :)<\/font>","1385dead":"### Wavelet denoising\n\nWavelet denoising (usually used with electric signals) is a way to remove the unnecessary noise from a time series. This method calculates coefficients called the \"wavelet coefficients\". These coefficients decide which pieces of information to keep (signal) and which ones to discard (noise).\n\nWe make use of the MAD (mean absolute deviation) value to understand the randomness in the sales and accordingly decide the minimum threshold for the wavelet coefficients in the time series. We filter out the low coefficients from the wavelets and reconstruct the sales data from the remaining coefficients and that's it; we have successfully removed noise from the sales data.","1ef37ad6":"In the above plots, we can see the same relationship. The store <code>W1_2<\/code> has maximum sales while the store <code>W1_1<\/code> has minimum sales. ","778175eb":"## Loss for each model <a id=\"3.8\"><\/a>","5b76b096":"### Rolling Average Price vs. Time (TX)","842919e1":"Welcome to the \"M5 Forecasting - Accuracy\" competition! In this competition, contestants are challenged to forecast future sales at Walmart based on heirarchical sales in the states of California, Texas, and Wisconsin. Forecasting sales, revenue, and stock prices is a classic application of machine learning in economics, and it is important because it allows investors to make guided decisions based on forecasts made by algorithms. \n\nIn this kernel, I will briefly explain the structure of dataset. Then, I will visualize the dataset using Matplotlib and Plotly. And finally, I will demonstrate how this problem can be approached with a variety of forecasting algorithms.\n\n<font size=3 color=\"red\">Please upvote this kernel if you like it. It motivates me to produce more quality content :)<\/font>","c5bf3ea1":"We can see that this model performs better than the naive approach. It is less susceptible to the volatility in day-to-day sales data and manages to pick up trends with slightly higher accuracy. However, it is still unable to find high-level trends in the sales. ","1df49ca7":"<img src=\"https:\/\/i.imgur.com\/YB551eX.png\" width=\"600px\"> ","b94d8a23":"## Denoising <a id=\"2.3\"><\/a>\n\nNow, I will show how these volatile sales prices can be denoised in order to extract underlying trends. This method may lose some information from the original time series, but it may be useful in extracting certain features regarding the trends in the time series.","29ced3c0":"These are sales data from randomly selected stores in the dataset. As expected, the sales data is very erratic, owing to the fact that so many factors affect the sales on a given day. On certain days, the sales quantity is zero, which indicates that a certain product may not be available on that day (as noted by Rob in his kernel).","c5736be3":"We can see that exponential smoothing is generating a horizontal line every time. This is because it gives very low weightage to faraway time steps, causing the predictions to flatten out or remain constant. However, it is able to predict the mean sales with excellent accuracy.","8a42aec0":"# Another Prediction","b21fccad":"The above plot compares the sales distribution for each store in the dataset. The stores in California seem to have the highest variance in sales, which might indicate that some places in California grow significantly faster than others, *i.e.* there is development disparity. On the other hand, the Wisconsin and Texas sales seem to be quite consistent among themselves, without much variance. This indicates that development might be more uniform in these states. Moreover, the California stores also seem to have the highest overall mean sales.","319008c2":"### Rolling Average Price vs. Time (CA)","b917ce32":"In the above graph, I have plotted rolling sales across all stores in the dataset. Almost every sales curve has \"linear oscillation\" trend at the macroscopic level. Basically, the sales oscillate like a sine wave about a certain mean value, but this mean value has an upward linear trend. This implies that the sales are oscillating at a higher and higher level every few months.\n\nThis trend is reminiscent of the **business cycle**, where economies have short-term oscillatory fluctuations but grow linearly in the long run. Maybe, such small-scale trends at the level of stores add up to decide trends we see at the macroeconomic level. Below is an illustration of the macroeconomic business cycle:","47fee0ee":"Prophet appears to output very similar-shaped predictions to ARIMA. But on closer observation, we can see that the there is a macroscopic upward trend which was absent in ARIMA. In the ARIMA predictions, the exact same pattern was repeated. But in the Prophet predictions, the same pattern is shifted vertically at each oscillation. This shows that is able to capture high-level trends better than ARIMA.","e633858c":"In the above graphs, the dark lineplots represent the denoised sales and the light lineplots represent the original sales. We can see that average smoothing is not as effective as Wavelet denoising at finding macroscopic trends and pattersns in the data. A lot of the noise in the original sales persists even after denoising. Therefore, wavelet denoising is clearly more effective at finding trends in the sales data. Nonetheless, average smoothing or \"rolling mean\" can also be used to calculate useful features for modeling.","f40dcca1":"In the above plots, we can see the same relationship. The store <code>TX_2<\/code> has maximum sales while the store <code>TX_1<\/code> has minimum sales. ","b44541af":"We can see that the forecasts made by the naive approach are not accurate and it is to be expected of such a simple algorithm. We need more complex models which use several time stamps to make forecasts.","d0df1599":"## Preparing the ground <a id=\"2.1\"><\/a>","8c5e1e01":"# Introduction","1e743f0f":"# Modeling <a id=\"3\"><\/a>\n\nNow, I will demonstrate how sales can be forecasted using various methods, namely: **naive approach, moving average, Holt linear, exponential smoothing, ARIMA, and Prophet**\n\n## Train\/Val split <a id=\"3.1\"><\/a>\n\nFirst, we need to create miniature training and validation sets to train and validate our models. I will use the last 30 days' sales as the validation data and the sales of the 70 days before that as the training data. We need to predict the sales in the validation data using the sales in the training data.","a03c3a7d":"## Exponential smoothing <a id=\"3.5\"><\/a>\n\nThe **exponential smoothing** method uses a different type of smoothing which differs from average smoothing. The previous time steps are exponentially weighted and added up to generate the forecast. The weights decay as we move further backwards in time. The model can be summarized as follows:\n\n<img src=\"https:\/\/i.imgur.com\/IqqjOFc.png\" width=\"520px\">\n<img src=\"https:\/\/i.imgur.com\/GiyHyZf.png\" width=\"255px\">\n\nIn the above equations, $\\alpha$ is the smoothing parameter. The forecast *y<sub>t+1<\/sub>* is a weighted average of all the observations in the series *y<sub>1<\/sub>, \u2026 ,y<sub>t<\/sub>*. The rate at which the weights decay is controlled by the parameter *\u03b1*. This method gives different weightage to different time steps, instead of giving the same weightage to all time steps (like the moving average method). This ensures that recent sales data is given more importance than old sales data while making the forecast. Now let us see how this new smoothing method performs on our miniature dataset. The training data is in <font color=\"blue\">blue<\/font>, validation data in <font color=\"darkorange\">orange<\/font>, and predictions in <font color=\"green\">green<\/font>.","770c9c78":"### Load the data","4615ac1f":"## Moving average <a id=\"3.3\"><\/a>\n\nThe **moving average** method is more complex than the naive approach. It calculates the mean sales over the previous 30 (or any other number)  days and forecasts that as the next day's sales. This method takes the previous 30 timesteps into consideration, and is therefore less prone to short term fluctuations than the naive approach. The model can be summarized as follows:\n\n<img src=\"https:\/\/i.imgur.com\/5uJvt7H.png\" width=\"200px\">\n\nIn the above equation, *y<sub>t+1<\/sub>* is tomorrow's sales. On the right hand side, all the sales for the previous 30 days are added up and divided by 30 to find the average. This forms the model's prediction, *y<sub>t+1<\/sub>*. Now let us see how this new model performs on our miniature dataset. The training data is in <font color=\"blue\">blue<\/font>, validation data in <font color=\"darkorange\">orange<\/font>, and predictions in <font color=\"green\">green<\/font>.","77011658":"## Prophet <a id=\"3.7\"><\/a>\n\nProphet is an opensource time series forecasting project by <font color=\"darkblue\">Facebook<\/font>. It is based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, including holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. It is also supposed to be more robust to missing data and shifts in trend compared to other models. The video below explains the Prophet algorithm very well:","a51bf51f":"### Rolling Average Price vs. Time for each store","a65e83b2":"In the above plots, we can see the same relationship. The store <code>CA_3<\/code> has maximum sales while the store <code>CA_4<\/code> has minimum sales.","c6d606b3":"## Naive approach <a id=\"3.2\"><\/a>\n\n\nThe first approach is the very simple **naive approach**. It simply forecasts the next day's sales as the current day's sales. The model can be summarized as follows:\n\n<img src=\"https:\/\/i.imgur.com\/r8wjrzk.png\" width=\"110px\">\n\nIn the above equation, *y<sub>t+1<\/sub>* is the predicted value for the next day's sales and *y<sub>t<\/sub>* is today's sales. The model predicts tomorrow's sales as today's sales. Now let us see how this simple model performs on our miniature dataset. The training data is in <font color=\"blue\">blue<\/font>, validation data in <font color=\"darkorange\">orange<\/font>, and predictions in <font color=\"green\">green<\/font>.","430853b4":"From the above graph, we can see the same trends: California stores have the highest variance and mean sales among all the stores in the dataset.","d8e13287":"## Holt linear <a id=\"3.4\"><\/a>\n\nThe **Holt linear** is completely different from the first two methods. Holt linear attempts to capture the high-level trends in time series data using a linear function. The method can be summarized as follows:\n\n### Forecast, level, and trend equations respectively","5ead571b":"In the above graph, we can see a very low disparity in sales among Wisconsin stores. The sales curves intersect each other very often. This may indicate that most parts of Wisconsin have a similar \"development curve\" and that there is a greater equity in development across the state. There are no specific \"hotspots\" or \"hubs\" of development. The average sales in descending order are <code>WI_2, WI_3, WI_1<\/code>. The store <code>WI_2<\/code> has maximum sales while the store <code>WI_1<\/code> has minimum sales. ","ffab5125":"### Sample sales snippets","66d1fcf3":"### Import libraries","d09a7910":"We can see that Holt linear is able to predict high-level trends in the sales very consistently. But, it is not able to capture the short-term volatility in the sales as accurately as other methods. Maybe this method can be combined with other low-level forecasters to produce better results."}}