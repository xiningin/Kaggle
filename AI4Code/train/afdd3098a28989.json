{"cell_type":{"f9d7db74":"code","d7f00503":"code","c74a7131":"code","88afa2a9":"code","b23cd751":"code","6f164bfa":"code","18abb5f2":"code","a834675d":"code","424f510d":"code","563ea701":"code","37c59e6a":"code","5ad96778":"code","6bd6eac9":"code","c8b14174":"code","40d91e65":"code","359fd4f1":"code","0a947bfb":"code","feca9c99":"code","8c9e7253":"code","360bb2c7":"code","801bb4ce":"code","d28f6db2":"code","002016b0":"code","8da7e760":"code","f052c15b":"code","0f8ab244":"code","ca713625":"code","bbd00fcf":"code","3cd74867":"code","2a8e3d26":"code","adc6d06d":"code","6a98c5b8":"code","30e75664":"code","990e4b78":"code","26e3babd":"code","d15add1d":"code","9c0d70bb":"code","536a872e":"code","630a1a3a":"code","046fd05c":"code","7a78fc65":"markdown","9ddd0486":"markdown","d0a460ca":"markdown","91118f59":"markdown","04f5b4da":"markdown","f0a12feb":"markdown","fbd8f16b":"markdown","743086df":"markdown","bf1c076d":"markdown","a3bc8e0b":"markdown","e94f022f":"markdown","2cd3f85a":"markdown","f252738c":"markdown","73f7271f":"markdown","1cf306b3":"markdown","9d7df598":"markdown","57f21543":"markdown","bfc87c16":"markdown","55ec8684":"markdown","797649c4":"markdown","43ceb5e5":"markdown","bc8c5317":"markdown","2b65056e":"markdown","05471b24":"markdown","2cbe8483":"markdown","f6515589":"markdown","4fa31a6f":"markdown","f32a32ef":"markdown","2144a009":"markdown","2aeb576f":"markdown","ac2b3425":"markdown","e39ccbab":"markdown","7a3e239e":"markdown","b5971210":"markdown","ecec1c18":"markdown","8c3d1e28":"markdown","446bafe4":"markdown","2ea3a35f":"markdown"},"source":{"f9d7db74":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('..\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d7f00503":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","c74a7131":"train_x = train.drop(['Survived'], axis=1)\ntrain_y = train['Survived']","88afa2a9":"test_x = test.copy()","b23cd751":"from sklearn.preprocessing import LabelEncoder","6f164bfa":"train_x = train_x.drop(['PassengerId'], axis=1)\ntest_x = test_x.drop(['PassengerId'], axis=1)","18abb5f2":"train_x = train_x.drop(['Name', 'Ticket', 'Cabin'], axis=1)\ntest_x = test_x.drop(['Name', 'Ticket', 'Cabin'], axis=1)","a834675d":"for c in ['Sex', 'Embarked']:\n    le = LabelEncoder()\n    le.fit(train_x[c].fillna('NA'))\n    train_x[c] = le.transform(train_x[c].fillna('NA'))\n    test_x[c] = le.transform(test_x[c].fillna('NA'))","424f510d":"from xgboost import XGBClassifier","563ea701":"model = XGBClassifier(n_estimators=20, random_state=71)\nmodel.fit(train_x, train_y)","37c59e6a":"pred = model.predict_proba(test_x)[:, 1]","5ad96778":"pred_label = np.where(pred > 0.5, 1, 0)","6bd6eac9":"submission = pd.DataFrame({'PassengerId': test['PassengerId'], 'Survived': pred_label})\nsubmission.to_csv('submission_first.csv', index=False)","c8b14174":"from sklearn.metrics import log_loss, accuracy_score\nfrom sklearn.model_selection import KFold","40d91e65":"scores_accuracy = []\nscores_logloss = []","359fd4f1":"kf = KFold(n_splits=4, shuffle=True, random_state=71)\nfor tr_idx, va_idx in kf.split(train_x):\n    tr_x, va_x = train_x.iloc[tr_idx], train_x.iloc[va_idx]\n    tr_y, va_y = train_y.iloc[tr_idx], train_y.iloc[va_idx]\n    model = XGBClassifier(n_estimators=20, random_state=71)\n    model.fit(tr_x, tr_y)\n    va_pred = model.predict_proba(va_x)[:, 1]\n    logloss = log_loss(va_y, va_pred)\n    accuracy = accuracy_score(va_y, va_pred > 0.5)\n    scores_logloss.append(logloss)\n    scores_accuracy.append(accuracy)","0a947bfb":"logloss = np.mean(scores_logloss)\naccuracy = np.mean(scores_accuracy)\nprint(f'logloss: {logloss:.4f}, accuracy: {accuracy:.4f}')","feca9c99":"import itertools","8c9e7253":"param_space = {\n    'max_depth': [3, 5, 7],\n    'min_child_weight': [1.0, 2.0, 4.0]\n}","360bb2c7":"param_combinations = itertools.product(param_space['max_depth'], param_space['min_child_weight'])","801bb4ce":"params = []\nscores = []","d28f6db2":"for max_depth, min_child_weight in param_combinations:\n    score_folds = []\n    kf = KFold(n_splits=4, shuffle=True, random_state=123456)\n    for tr_idx, va_idx in kf.split(train_x):\n        tr_x, va_x = train_x.iloc[tr_idx], train_x.iloc[va_idx]\n        tr_y, va_y = train_y.iloc[tr_idx], train_y.iloc[va_idx]\n        model = XGBClassifier(n_estimators=20, random_state=71, max_depth=max_depth, min_child_weight=min_child_weight)\n        model.fit(tr_x, tr_y)\n        va_pred = model.predict_proba(va_x)[:, 1]\n        logloss = log_loss(va_y, va_pred)\n        score_folds.append(logloss)\n    score_mean = np.mean(score_folds)\n    params.append((max_depth, min_child_weight))\n    scores.append(score_mean)","002016b0":"best_idx = np.argsort(scores)[0]\nbest_param = params[best_idx]\nprint(f'max_depth: {best_param[0]}, min_child_weight: {best_param[1]}')","8da7e760":"from sklearn.preprocessing import OneHotEncoder","f052c15b":"train_x2 = train.drop(['Survived'], axis=1)\ntest_x2 = test.copy()","0f8ab244":"train_x2 = train_x2.drop(['PassengerId'], axis=1)\ntest_x2 = test_x2.drop(['PassengerId'], axis=1)","ca713625":"train_x2 = train_x2.drop(['Name', 'Ticket', 'Cabin'], axis=1)\ntest_x2 = test_x2.drop(['Name', 'Ticket', 'Cabin'], axis=1)","bbd00fcf":"cat_cols = ['Sex', 'Embarked', 'Pclass']\nohe = OneHotEncoder(categories='auto', sparse=False)\nohe.fit(train_x2[cat_cols].fillna('NA'))","3cd74867":"ohe_columns = []\nfor i, c in enumerate(cat_cols):\n    ohe_columns += [f'{c}_{v}' for v in ohe.categories_[i]]","2a8e3d26":"ohe_columns","adc6d06d":"ohe_train_x2 = pd.DataFrame(ohe.transform(train_x2[cat_cols].fillna('NA')), columns=ohe_columns)\nohe_test_x2 = pd.DataFrame(ohe.transform(test_x2[cat_cols].fillna('NA')), columns=ohe_columns)","6a98c5b8":"train_x2 = train_x2.drop(cat_cols, axis=1)\ntest_x2 = test_x2.drop(cat_cols, axis=1)","30e75664":"train_x2 = pd.concat([train_x2, ohe_train_x2], axis=1)\ntest_x2 = pd.concat([test_x2, ohe_test_x2], axis=1)","990e4b78":"num_cols = ['Age', 'SibSp', 'Parch', 'Fare']\nfor col in num_cols:\n    train_x2[col].fillna(train_x2[col].mean(), inplace=True)\n    test_x2[col].fillna(train_x2[col].mean(), inplace=True)","26e3babd":"train_x2['Fare'] = np.log1p(train_x2['Fare'])\ntest_x2['Fare'] = np.log1p(test_x2['Fare'])","d15add1d":"from sklearn.linear_model import LogisticRegression","9c0d70bb":"model_xgb = XGBClassifier(n_estimators=20, random_state=71)\nmodel_xgb.fit(train_x, train_y)\npred_xgb = model_xgb.predict_proba(test_x)[:, 1]","536a872e":"model_lr = LogisticRegression(solver='lbfgs', max_iter=300)\nmodel_lr.fit(train_x2, train_y)\npred_lr = model_lr.predict_proba(test_x2)[:, 1]","630a1a3a":"pred = pred_xgb * 0.8 + pred_lr * 0.2\npred_label = np.where(pred > 0.5, 1, 0)","046fd05c":"submission = pd.DataFrame({'passengerId': test['PassengerId'], 'Survived': pred_label})\nsubmission.to_csv('submission_ensemble.csv', index=False)","7a78fc65":"# \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","9ddd0486":"## \u30e2\u30c7\u30eb\u306e\u4f5c\u6210\u304a\u3088\u3073\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u3066\u306e\u5b66\u7fd2","d0a460ca":"## one-hot encoding\u306e\u30c0\u30df\u30fc\u5909\u6570\u306e\u5217\u540d\u3092\u4f5c\u6210\u3059\u308b","91118f59":"## \u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u3054\u3068\u306b\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u8a55\u4fa1\u3092\u884c\u3046","04f5b4da":"## \u5909\u6570Name, Ticket, Cabin\u3092\u9664\u5916\u3059\u308b","f0a12feb":"## \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u7279\u5fb4\u91cf\u3068\u76ee\u7684\u5909\u6570\u306b\u5206\u3051\u308b","fbd8f16b":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3092\u4e8c\u5024\u306b\u5909\u63db\u3059\u308b","743086df":"## \u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u5019\u88dc\u3068\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e96\u5099\u3059\u308b","bf1c076d":"## \u63a2\u7d22\u3059\u308b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b","a3bc8e0b":"# \u7279\u5fb4\u91cf\u4f5c\u6210","e94f022f":"## \u5909\u6570PassengerId\u3092\u9664\u5916\u3059\u308b","2cd3f85a":"# \u30e2\u30c7\u30eb\u4f5c\u6210","f252738c":"## \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30e2\u30c7\u30eb\nxgboost\u30e2\u30c7\u30eb\u3068\u306f\u7570\u306a\u308b\u7279\u5fb4\u91cf\u3092\u5165\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001\u5225\u9014train_x2, test_x2\u3092\u4f5c\u6210\u3057\u305f","73f7271f":"# \u30a2\u30f3\u30b5\u30f3\u30d6\u30eb","1cf306b3":"## \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\n\u5b66\u7fd2\u30c7\u30fc\u30bf\u30924\u3064\u306b\u5206\u5272\u3057\u3001\u3046\u30611\u3064\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3068\u3059\u308b\u3053\u3068\u3092\u3001\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3092\u5909\u3048\u3066\u7e70\u308a\u8fd4\u3059","9d7df598":"## \u305d\u308c\u305e\u308c\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306blabel encoding\u3092\u9069\u7528\u3059\u308b","57f21543":"## \u5404fold\u306e\u30b9\u30b3\u30a2\u3092\u4fdd\u5b58\u3059\u308b\u30ea\u30b9\u30c8","bfc87c16":"## \u6700\u3082\u30b9\u30b3\u30a2\u304c\u826f\u3044\u3082\u306e\u3092\u30d9\u30b9\u30c8\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3059\u308b","55ec8684":"## \u5909\u6570Name, Ticket, Cabin\u3092\u9664\u5916\u3059\u308b","797649c4":"## \u5404fold\u306e\u30b9\u30b3\u30a2\u306e\u5e73\u5747\u3092\u51fa\u529b\u3059\u308b","43ceb5e5":"## xgboost\u30e2\u30c7\u30eb","bc8c5317":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u7279\u5fb4\u91cf\u306e\u307f\u306a\u306e\u3067\u3001\u305d\u306e\u307e\u307e\u3067\u3088\u3044","2b65056e":"## one-hot encoding\u306b\u3088\u308b\u5909\u63db\u3092\u884c\u3046","05471b24":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","2cbe8483":"## \u6570\u5024\u5909\u6570\u306e\u6b20\u640d\u5024\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5e73\u5747\u3067\u57cb\u3081\u308b","f6515589":"## one-hot encoding\u3092\u884c\u3046","4fa31a6f":"# \u30e2\u30c7\u30eb\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","f32a32ef":"# \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u7528\u306e\u7279\u5fb4\u91cf\u306e\u4f5c\u6210","2144a009":"## \u4e88\u6e2c\u5024\u306e\u52a0\u91cd\u5e73\u5747\u3092\u3068\u308b","2aeb576f":"## one-hot encoding\u3067\u5909\u63db\u3055\u308c\u305f\u5909\u6570\u3092\u7d50\u5408\u3059\u308b","ac2b3425":"## \u5143\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3059\u308b","e39ccbab":"## \u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u3001\u305d\u308c\u306b\u5bfe\u3059\u308b\u30b9\u30b3\u30a2\u3092\u4fdd\u5b58\u3059\u308b\u30ea\u30b9\u30c8","7a3e239e":"## \u5909\u6570Fare\u3092\u5bfe\u6570\u5909\u63db\u3059\u308b","b5971210":"## \u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210","ecec1c18":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3092\u78ba\u7387\u3067\u51fa\u529b\u3059\u308b","8c3d1e28":"## \u5909\u6570PassengerId\u3092\u9664\u5916\u3059\u308b","446bafe4":"## \u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210","2ea3a35f":"## one-hot encoding\u6e08\u307f\u306e\u5909\u6570\u3092\u9664\u5916\u3059\u308b"}}