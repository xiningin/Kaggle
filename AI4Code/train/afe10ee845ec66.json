{"cell_type":{"d88024c0":"code","406cb70a":"code","8dd5c335":"code","b0768b83":"code","a587d61a":"code","2510b68f":"code","b90a9eda":"code","93717138":"code","6d19effd":"code","532ec972":"code","393191c9":"code","3d0b1009":"code","23b6f873":"code","ca8f0056":"code","1210ad0d":"code","57ed63bb":"code","b6b289b8":"code","7a72ea73":"code","a2470541":"code","0984688d":"code","1924a9c7":"code","7a8aa637":"code","48119cc1":"code","3f552866":"code","26d7ddbc":"code","193339e0":"code","8f281f9b":"code","01df4580":"code","21728eab":"code","e96480ae":"code","f35b0b6f":"code","c47c474b":"code","581a529e":"code","71ddbec9":"code","434d6d26":"code","a7f21951":"code","37311df4":"code","db5edcb8":"code","74c1c8ad":"code","9b0b47ae":"code","f64513a4":"code","488f2c9b":"code","c9420731":"code","5f5964c3":"code","f5bfd274":"code","da9f02da":"code","a52eb915":"code","6be2899c":"code","1a40e6c4":"code","29debde3":"code","fee0fbe5":"code","12da141e":"code","42278448":"code","4039953b":"code","7142306f":"code","b6b7692f":"code","84113844":"code","2c89370b":"code","25c7f59e":"code","3e1fd08a":"code","e01789ba":"code","acfff26b":"markdown","02f34868":"markdown","85f106ee":"markdown","0a40494e":"markdown","bb363608":"markdown","34b44e71":"markdown","7469fd70":"markdown","0bd2618b":"markdown","126fc739":"markdown","213616be":"markdown","6c937b9a":"markdown","00a23c8c":"markdown","fa4ad622":"markdown","90fee557":"markdown","ddcaabfc":"markdown","df4bb791":"markdown","5f7d2817":"markdown","2bd920d8":"markdown","d49c12ff":"markdown","99c39849":"markdown","63f258bf":"markdown","a1ac07a1":"markdown","f7b68ded":"markdown","bddef2f0":"markdown","ba0bad6b":"markdown","9df1ed51":"markdown","68f4c658":"markdown","2cfb7cf1":"markdown","5bd97a32":"markdown","d6725871":"markdown"},"source":{"d88024c0":"# Essentials\nimport numpy as np\nimport pandas as pd\nimport datetime\nimport random\n\n# Plots\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Models\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor, BaggingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.linear_model import Ridge, RidgeCV\nfrom sklearn.linear_model import ElasticNet, ElasticNetCV\nfrom sklearn.svm import SVR\nfrom mlxtend.regressor import StackingCVRegressor\nimport lightgbm as lgbm\nfrom lightgbm import LGBMRegressor, LGBMClassifier\nimport xgboost as xgb\n\n# Stats\nfrom scipy.stats import skew, norm\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\n\n# Misc\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error, confusion_matrix\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import scale\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn import metrics\n\npd.set_option('display.max_columns', None)\n\n# Ignore useless warnings\nimport warnings\nwarnings.filterwarnings(action=\"ignore\")\npd.options.display.max_seq_items = 8000\npd.options.display.max_rows = 8000\n\n\n\nimport os\nfrom fuzzywuzzy import fuzz\nfrom fuzzywuzzy import process\n\nfrom collections import defaultdict\n","406cb70a":"df = pd.read_csv('..\/input\/credit-card-customers\/BankChurners.csv')\ndf = df.iloc[:, :-2]\ndf.head()","8dd5c335":"df.Attrition_Flag.value_counts()","b0768b83":"df['churn'] = (df.Attrition_Flag == 'Attrited Customer')*1\n\ndf.head()","a587d61a":"df.churn.sum()\/df.churn.count()","2510b68f":"df.isnull().sum()","b90a9eda":"df.describe()","93717138":"# function takes feature name as input and plots it by churn group\ndef plt_feature_by_churn(feature_name):\n    fig = plt.figure(figsize=(16,10))\n    sns.countplot(feature_name,data=df,hue='churn')\n    if df[feature_name].dtype != 'O':\n        print('correlation between ', feature_name, ' and churn:', df[[feature_name, 'churn']].corr().iloc[0,1])","6d19effd":"# function takes feature name as input and plots churn ratios for each value of the feature\ndef plt_churn_ratio(feature_name):\n    feat = df[[feature_name, 'churn']].groupby(feature_name).sum()\/df[[feature_name, 'churn']].groupby(feature_name).count()\n    sns.lineplot(feat.index, feat['churn'] )","532ec972":"# function takes feature name as input and applies one-hot encoding\ndef one_hot(feature_name):\n    return(pd.get_dummies(df, columns=[feature_name], drop_first=True))","393191c9":"plt_feature_by_churn('Customer_Age')","3d0b1009":"plt_churn_ratio('Customer_Age')","23b6f873":"plt_feature_by_churn('Gender')","ca8f0056":"plt_churn_ratio('Gender')","1210ad0d":"df = one_hot('Gender')\ndf.head()","57ed63bb":"plt_feature_by_churn('Dependent_count')","b6b289b8":"plt_churn_ratio('Dependent_count')","7a72ea73":"plt_feature_by_churn('Education_Level')","a2470541":"plt_churn_ratio('Education_Level')","0984688d":"df = one_hot('Education_Level')","1924a9c7":"plt_feature_by_churn('Marital_Status')","7a8aa637":"plt_churn_ratio('Marital_Status')","48119cc1":"df = one_hot('Marital_Status')","3f552866":"plt_feature_by_churn('Income_Category')","26d7ddbc":"plt_churn_ratio('Income_Category')","193339e0":"df = one_hot('Income_Category')","8f281f9b":"plt_feature_by_churn('Card_Category')","01df4580":"plt_churn_ratio('Card_Category')","21728eab":"df = one_hot('Card_Category')","e96480ae":"plt_feature_by_churn('Months_on_book')","f35b0b6f":"plt_churn_ratio('Months_on_book')","c47c474b":"plt_feature_by_churn('Total_Relationship_Count')","581a529e":"plt_churn_ratio('Total_Relationship_Count')","71ddbec9":"plt_feature_by_churn('Months_Inactive_12_mon')","434d6d26":"plt_churn_ratio('Months_Inactive_12_mon')","a7f21951":"plt_feature_by_churn('Contacts_Count_12_mon')\n","37311df4":"plt_churn_ratio('Contacts_Count_12_mon')","db5edcb8":"df['Credit_Limit_K'] = np.round(df.Credit_Limit\/1000, 0)","74c1c8ad":"plt_feature_by_churn('Credit_Limit_K')\n","9b0b47ae":"plt_churn_ratio('Credit_Limit_K')","f64513a4":"df['Total_Revolving_Bal_500'] = np.round(df.Total_Revolving_Bal\/500, 0)","488f2c9b":"plt_feature_by_churn('Total_Revolving_Bal_500')","c9420731":"plt_churn_ratio('Total_Revolving_Bal_500')","5f5964c3":"df['Avg_Open_To_Buy_K'] = np.round(df.Avg_Open_To_Buy\/1000, 0)\nplt_feature_by_churn('Avg_Open_To_Buy_K')","f5bfd274":"plt_churn_ratio('Avg_Open_To_Buy_K')","da9f02da":"df['Total_Amt_Chng_Q4_Q1_10P'] = np.round(df.Total_Amt_Chng_Q4_Q1*10,0)\nplt_feature_by_churn('Total_Amt_Chng_Q4_Q1_10P')","a52eb915":"plt_churn_ratio('Total_Amt_Chng_Q4_Q1_10P')","6be2899c":"df['Total_Ct_Chng_Q4_Q1_10P'] = np.round(df.Total_Ct_Chng_Q4_Q1*10,0)\nplt_feature_by_churn('Total_Ct_Chng_Q4_Q1_10P')","1a40e6c4":"plt_churn_ratio('Total_Ct_Chng_Q4_Q1_10P')","29debde3":"df['Total_Trans_Amt_K'] = np.round(df.Total_Trans_Amt\/1000,0)\nplt_feature_by_churn('Total_Trans_Amt_K')","fee0fbe5":"plt_churn_ratio('Total_Trans_Amt_K')","12da141e":"df['Total_Trans_Ct_10'] = np.round(df.Total_Trans_Ct\/10,0)\nplt_feature_by_churn('Total_Trans_Ct_10')","42278448":"plt_churn_ratio('Total_Trans_Ct_10')","4039953b":"df['Avg_Utilization_Ratio_10P'] = np.round(df.Avg_Utilization_Ratio*10,0)\nplt_feature_by_churn('Avg_Utilization_Ratio_10P')","7142306f":"plt_churn_ratio('Avg_Utilization_Ratio_10P')","b6b7692f":"df.head()","84113844":"X = df.drop(['CLIENTNUM', 'Attrition_Flag', 'churn', 'Credit_Limit_K', 'Total_Revolving_Bal_500', 'Avg_Open_To_Buy_K', \n            'Total_Amt_Chng_Q4_Q1_10P', 'Total_Trans_Amt_K', 'Total_Trans_Ct_10', 'Total_Ct_Chng_Q4_Q1_10P',\n            'Avg_Utilization_Ratio_10P'],axis=1)\ny = df['churn']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=145)","2c89370b":"lgb = LGBMClassifier(learning_rate=0.01,max_depth=5, min_child_weight=3,\n                     n_estimators=1000,num_leaves=5).fit(X_train,y_train)\ny_pred = pd.DataFrame(lgb.predict(X_test))\ny_predprob = pd.DataFrame(lgb.predict_proba(X_test))\n\nprint('The accuracy of the LGBM is',metrics.accuracy_score(y_pred,y_test))","25c7f59e":"y_predprob.head()","3e1fd08a":"print (\"\\nModel Report\")\nprint (\"Accuracy : %.4g\" % metrics.accuracy_score(y_test, y_pred))\nprint (\"AUC Score (Test): %f\" % metrics.roc_auc_score(y_test, y_predprob[1]))\n\nax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True, ax = ax);","e01789ba":"feature_imp = pd.DataFrame(sorted(zip(lgb.feature_importances_,X.columns)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False))\nplt.title('LightGBM Features (avg over folds)')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')","acfff26b":"Similar to age, even though we see a jump at 3, there is no linear relationship between num of dependents and churn, we still keep it as a feature but no need for binning.","02f34868":"## Utilization ","85f106ee":"## Card Category ","0a40494e":"# Import Churn Data","bb363608":"## Total Relationship Count ","34b44e71":"# LGB Model ","7469fd70":"## Open To Buy ","0bd2618b":"Prediction accuracy is suspiciously high, which might be a result of total transaction amount's period overlapping with churn period. This is still a good start to predicting churn which is a very important subject for not just banks, but all big corporates with large customer base.","126fc739":"## Revolving Balance ","213616be":"Females are slightly more likely to churn with 17% compared to males with 15%, we'll convert this feature to 1-0.","6c937b9a":"## Marital Status ","00a23c8c":"## Total Transaction Count ","fa4ad622":"## Months inactive ","90fee557":"We will define functions that will help us analyze features and their relationships with churn behavior. ","ddcaabfc":"## Months on Book ","df4bb791":"Similar to gender, we will apply one-hot encoding to education level.","5f7d2817":"## Trends","2bd920d8":"## Age ","d49c12ff":"## Gender ","99c39849":"## Dependents ","63f258bf":"Looks like there is no linear relationship between age and churn, we still keep age as a feature but no need for binning.","a1ac07a1":"## Contacts","f7b68ded":"# EDA","bddef2f0":"Target ratio is 16% which is not too bad.","ba0bad6b":"Looks like married people are less likely to churn, we will apply one-hot encoding to this feature too.","9df1ed51":"Define target variable as churn.","68f4c658":"## Total Transaction Amount ","2cfb7cf1":"## Education ","5bd97a32":"## Credit Limit ","d6725871":"## Income "}}