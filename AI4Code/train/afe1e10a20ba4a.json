{"cell_type":{"57a35ba3":"code","d1cf2691":"code","e9166ee6":"code","763f7535":"code","1378e748":"code","8c50e9f0":"code","0786ff80":"code","a6426312":"code","6b106f24":"code","db30f2d7":"code","cf6c5105":"code","b1dceb69":"code","846846a6":"code","ab3640c4":"code","a74b0529":"code","f92c0999":"code","a259da8f":"code","5532f19d":"code","fbd8884d":"code","5b33b024":"code","a0444d65":"code","c16ce62c":"code","09a0a998":"code","c87e8138":"code","542958c5":"code","7affbe75":"code","b612d470":"code","f325cf0a":"code","e44463cf":"code","7d1b9e6d":"code","f7de66ef":"code","b6603825":"code","4d0c0e5c":"code","0d66108a":"code","dd491dcb":"code","c3d715c5":"code","1a8c62d0":"code","b29be1a7":"code","b3fef255":"code","7d83ba71":"code","f2555dcb":"code","a4b3ca26":"code","baef6d1c":"code","12b0e572":"code","3e261cb6":"code","432d10f2":"code","38c40adc":"code","34331cab":"code","6aaeec6a":"code","286b4337":"code","bd36902b":"code","6903d55d":"code","43e40e39":"code","07305fc2":"code","b5c44546":"code","f1616e56":"code","d92ff886":"code","e3f425fc":"code","7bf62077":"code","74871d66":"code","92e7953c":"code","025ea40c":"code","12b229f7":"code","d1bc119f":"markdown","2f0f4b62":"markdown","828e38f8":"markdown","6091c627":"markdown","062a9445":"markdown","3cafa353":"markdown","9d143c32":"markdown","0bcdb95e":"markdown","350b6c13":"markdown","7532fe98":"markdown","25e01969":"markdown","3ebc4cf0":"markdown","fa9af220":"markdown"},"source":{"57a35ba3":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Lasso,Ridge\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nimport warnings\nwarnings.filterwarnings('ignore')","d1cf2691":"df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","e9166ee6":"df","763f7535":"null = {}\ndrop = []\nfor i in range(0,df.shape[1]):\n    if 0 < df.iloc[:,i].isna().sum() <= df.shape[0]*(0.3):\n        null[df.columns[i]] = df.iloc[:,i].isna().sum()\n    elif df.iloc[:,i].isna().sum() > df.shape[0]*(0.3):# If the null percentage is greater than 30% we will drop that columns. \n        drop.append(df.columns[i])","1378e748":"null,drop","8c50e9f0":"nullk = list(null.keys())\nnullv = [float(null[k]) for k in nullk]\nplt.figure(figsize=(28,12))\ngr = sns.barplot(nullk,nullv,palette=\"coolwarm_r\" )\ngr.text(9,200,str('Name of column \\n  vs Nan values'),fontdict = dict(color='#66FF00',fontsize = 40),weight = 'bold')","0786ff80":"df.drop(drop,axis = 1,inplace = True)","a6426312":"df.LotFrontage.plot(kind = 'density')\nplt.show()#For checking the distribution of the curve.","6b106f24":"df.describe()","db30f2d7":"df.LotFrontage.fillna(df.LotFrontage.median(),inplace= True)","cf6c5105":"df.MasVnrType.describe()","b1dceb69":"df.MasVnrType.fillna('None',inplace = True )\ndf.MasVnrArea.fillna(0.0,inplace = True)","846846a6":"for i in (29,30,31,32,34):\n    df.iloc[:,i].fillna(df.iloc[:,i].describe().top,inplace=True)#Filling with most common or the top value.","ab3640c4":"sns.countplot(df.Electrical,palette=\"coolwarm_r\")\n","a74b0529":"df.Electrical.fillna('SBrkr',inplace=True)","f92c0999":"_,ax = plt.subplots(1,4,figsize=(30,10))\nsns.countplot(df.GarageType,ax = ax[0],palette=\"coolwarm_r\")\nsns.countplot(df.GarageFinish,ax = ax[1],palette=\"coolwarm_r\")\nsns.countplot(df.GarageQual,ax = ax[2],palette=\"coolwarm_r\")\nsns.countplot(df.GarageCond,ax = ax[3],palette=\"coolwarm_r\")","a259da8f":"df.columns.get_loc('GarageType')","5532f19d":"for i in (56,57,58,61,62):\n    print(df.iloc[:,i].dtypes)","fbd8884d":"df.iloc[:,56].isna().sum()","5b33b024":"df.GarageType.fillna('Attchd',inplace=True)","a0444d65":"df.GarageYrBlt.fillna(df.groupby('GarageType')['GarageYrBlt'].transform('median'),inplace=True)","c16ce62c":"df.GarageFinish.fillna('UnF',inplace=True)\ndf.GarageQual.fillna('TA',inplace=True)\ndf.GarageCond.fillna('TA',inplace=True)","09a0a998":"null = {}\nfor i in range(0,df.shape[1]):\n    if 0 < df.iloc[:,i].isna().sum():\n        null[df.columns[i]] = df.iloc[:,i].isna().sum()\nnull\n#Checking if any nan value is still remaining","c87e8138":"df = pd.get_dummies(df)","542958c5":"df","7affbe75":"null = []\ndrop = []\nfor i in range(0,test.shape[1]):\n    if 0 < test.iloc[:,i].isna().sum() <= test.shape[0]*(0.3):\n        null.append(test.columns[i]) \n    elif test.iloc[:,i].isna().sum() > test.shape[0]*(0.3):\n        drop.append(test.columns[i])","b612d470":"drop","f325cf0a":"test.drop(drop,axis = 1,inplace = True)","e44463cf":"test.LotFrontage.plot(kind = 'density')\nplt.show()","7d1b9e6d":"test.LotFrontage.fillna(test.LotFrontage.median(),inplace= True)","f7de66ef":"test.MasVnrType.fillna('None',inplace = True )\ntest.MasVnrArea.fillna(0.0,inplace = True)","b6603825":"for i in range(0,len(null)):\n    if test[null[i]].dtype == object:\n        test[null[i]].fillna(test[null[i]].describe().top,inplace = True)\n    else:\n        test[null[i]].fillna(df.groupby('MSSubClass')[null[i]].transform('median'),inplace = True)\n    ","4d0c0e5c":"test = pd.get_dummies(test)","0d66108a":"test","dd491dcb":"a = []\nfor i in list(test):\n    if i not in list(df):\n        a.append(i)","c3d715c5":"iD = test.Id","1a8c62d0":"test.drop(a,axis =1,inplace = True)","b29be1a7":"test.drop(['Id'],axis =1,inplace=True)","b3fef255":"test","7d83ba71":"b = []\nfor i in list(df):\n    if i not in list(test):\n        b.append(i)","f2555dcb":"x = df.drop(b,axis =1)","a4b3ca26":"y = (df.SalePrice)","baef6d1c":"_,ax = plt.subplots(1,2,figsize = (20,5))\na = sns.kdeplot((y),ax = ax[0])\nb = sns.kdeplot(np.log(y),ax = ax[1])\nb.text(13,0.9,str('With log'),fontdict = dict(color = '#02cdfb',fontsize = 20))","12b0e572":"y = np.log(df.SalePrice)","3e261cb6":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state =42)","432d10f2":"rmse_score = {}","38c40adc":"las = Lasso(alpha=0.001)\nlas.fit(x_train,y_train)\nrmse = np.sqrt(mean_squared_error((y_test),(las.predict(x_test))))\nrmse_score['Lasso'] = rmse\nrmse\n","34331cab":"rid = Ridge(alpha=50)\nrid.fit(x_train,y_train)\nrmse = np.sqrt(mean_squared_error((y_test),(rid.predict(x_test))))\nrmse_score['Ridge'] = rmse\nrmse\n","6aaeec6a":"rfr = RandomForestRegressor(random_state=42)\nrfr.fit(x_train,y_train)\nrmse = np.sqrt(mean_squared_error((y_test),(rfr.predict(x_test))))\nrmse_score['Random Forest'] = rmse\nrmse\n","286b4337":"xgb = XGBRegressor(learning_rate = 0.1)\nxgb.fit(x_train,y_train)\nrmse = np.sqrt(mean_squared_error((y_test),(xgb.predict(x_test))))\nrmse_score['XGBoost'] = rmse\nrmse\n\n","bd36902b":"lgb = LGBMRegressor(learning_rate=0.1)\nlgb.fit(x_train,y_train)\nrmse = np.sqrt(mean_squared_error((y_test),(lgb.predict(x_test))))\nrmse_score['LightGBM'] = rmse\nrmse\n","6903d55d":"from sklearn.model_selection import KFold\nfrom catboost import CatBoostRegressor","43e40e39":"cat = CatBoostRegressor(learning_rate=0.01,iterations=4000)\ncat.fit(x_train,y_train,verbose = 0)\nrmse = np.sqrt(mean_squared_error((y_test),(cat.predict(x_test))))\nrmse_score['CatBoost'] = rmse\nrmse","07305fc2":"def cross_val(X, y, model,param, folds=5):\n\n    skf = KFold(n_splits=folds, shuffle=True, random_state=42)\n    for fold, (train_idx, test_idx) in enumerate(skf.split(X, y)):\n        x_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n        x_test, y_test = X.iloc[test_idx], y.iloc[test_idx]\n\n        alg = model(**param)\n        alg.fit(x_train, y_train,\n                eval_set=[(x_test, y_test)],\n                early_stopping_rounds=100,verbose = 0)\n\n        pred = alg.predict(x_test)\n        mse = np.sqrt(mean_squared_error((y_test), pred))\n        print(f\"RMSE: {mse}\")\n    \n    return alg,mse","b5c44546":"paramcat = {'learning_rate':0.01,'iterations':4000}\nparamlgb = {'learning_rate':0.1,'n_estimators':250}","f1616e56":"crosslgb,mse = cross_val(x,y,LGBMRegressor,paramlgb)\nrmse_score['KFold Lightgbm'] = mse\n","d92ff886":"crosscat,mse = cross_val(x,y,CatBoostRegressor,paramcat)\nrmse_score['KFold CatBosst'] = mse","e3f425fc":"key = list(rmse_score.keys())","7bf62077":"vals = [float(rmse_score[k]) for k in key]","74871d66":"col = sns.color_palette('coolwarm',8)","92e7953c":" col = col.as_hex()","025ea40c":"plt.figure(figsize = (16,6))\nscore = sns.barplot(vals,key,palette=\"coolwarm_r\")\nfor i in range(0,len(key)):\n    score.text(vals[i]+0.004,i,str(np.round(vals[i],4)),fontdict = dict(color = col[i],fontsize = 12,ha = 'center',va = 'center'),weight = 'bold')","12b229f7":"pred = np.exp(crosscat.predict(test))\npred = pd.DataFrame(pred)\nsub = pd.concat([iD,pred],axis =1)\nsub.columns = ['Id','SalePrice']\nsub.to_csv('submission.csv',index=False)","d1bc119f":"<h1 id=\"heading3\">\n<span style=\"font-size:25px;color:#800080\"><center>Filling NaN value.<\/center><\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading3\" target ='_self'><\/a>\n<\/h1>","2f0f4b62":"<span style=\"font-size:20px;color:#800080\">**If you have gotten this far, you might have done**  <\/span><span style=\"font-size:20px;color:#66FF00\">***upvote***.<\/span>","828e38f8":"<h1 id=\"heading1\">\n<span style=\"font-size:35px;color:#66FF00;font-weight:bold\"><center>Train Data<\/center><\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading1\" target ='_self'><\/a>\n<\/h1>","6091c627":"<h1 id=\"heading7\">\n<span style=\"font-size:30px;color:#800080\"><center>Score comparison of different models.<\/center><\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading7\" target ='_self'><\/a>\n<\/h1>","062a9445":"<h1 id=\"heading6\">\n<span style=\"font-size:35px;color:#66FF00;font-weight:bold\"><center>Test Data<\/center><\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading6\" target ='_self'><\/a>\n<\/h1>","3cafa353":"<center><img src='https:\/\/i.imgur.com\/SZQXq1q.png' width = '600px'><\/center>","9d143c32":"<h1 id=\"heading7\">\n<span style=\"font-size:30px;color:#800080\"><center>df.SalePrice vs log(df.SalePrice)<\/center><\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading7\" target ='_self'><\/a>\n<\/h1>","0bcdb95e":"<h1 id=\"heading4\">\n<span style=\"font-size:25px;color:#800080\"><center>Dummies for categorical columns.<\/center><\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading4\" target ='_self'><\/a>\n<\/h1>","350b6c13":"<center><img src='https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSqsQO7fHV7LPSk0XzgFhXavflTpp9dumLmjQ&usqp=CAU' width = '800px'><\/center>","7532fe98":"<h1 id=\"heading2\">\n<span style=\"font-size:25px;color:#800080\"><center>Checking for NaN value.<\/center><\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading2\" target ='_self'><\/a>\n<\/h1>\n<span style=\"font-size:15px;\"><center>*We will drop the column if nan values are more than 30%*<\/center><\/span>\n","25e01969":"<center><span style=\"font-size:30px;color:#800080;font-weight:bold\">So, CatBoost with KFold is our Winner!!\ud83c\udf89\ud83c\udf89\ud83c\udf89","3ebc4cf0":"<span>Log(df.SalePrice) is very well distributed having very low skewness whereas df.SalePrice is right skewed.<\/span>","fa9af220":"<h1 id=\"heading5\">\n<span style=\"font-size:25px;color:#800080\"><center>Loading Data<\/center><\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading5\" target ='_self'><\/a>\n<\/h1>"}}