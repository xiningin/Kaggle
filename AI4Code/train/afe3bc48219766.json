{"cell_type":{"9b5e66f0":"code","182e1091":"code","30aacd1a":"code","feea3ae6":"code","acf3f83f":"code","af74fc81":"code","1d68a645":"code","7f3a8ba2":"code","a9447b9a":"code","f5124466":"code","abce5855":"code","949738e6":"code","2c659fb8":"code","903824d3":"code","f6fd0f70":"code","a0070faa":"code","f9c8c542":"code","d118f62e":"code","d6a5d028":"code","4df16022":"markdown","189c801c":"markdown","ac1af054":"markdown","1ffe89ab":"markdown","c1fa8d61":"markdown","1af7e842":"markdown","d4b6105d":"markdown","bc71b59a":"markdown","96eba1d0":"markdown","bf2b3be4":"markdown","bea29959":"markdown","f60a2541":"markdown","52651ac9":"markdown","1f67e7ae":"markdown","7e42bbc6":"markdown","0935a4a2":"markdown","d173222b":"markdown"},"source":{"9b5e66f0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom itertools import cycle, islice\nimport seaborn as sb\nimport matplotlib.dates as dates\nimport datetime as dt\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nfrom plotly import tools, subplots\nimport plotly.figure_factory as ff\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","182e1091":"train_data = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv\")#index_col=0\ndisplay(train_data.head())\ntest_data = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv\")#index_col=0\ndisplay(test_data.head())","30aacd1a":"sum_df = pd.pivot_table(train_data, values=['ConfirmedCases','Fatalities'], index=['Date'],aggfunc=np.sum)\ndisplay(sum_df.max())","feea3ae6":"train_data['NewConfirmedCases'] = train_data['ConfirmedCases'] - train_data['ConfirmedCases'].shift(1)\ntrain_data['NewConfirmedCases'] = train_data['NewConfirmedCases'].fillna(0.0)\ntrain_data['NewFatalities']     = train_data['Fatalities'] - train_data['Fatalities'].shift(1)\ntrain_data['NewFatalities']     = train_data['NewFatalities'].fillna(0.0)#.astype(int)\ntrain_data['MortalityRate']     = train_data['Fatalities'] \/ train_data['ConfirmedCases']\ntrain_data['MortalityRate']     = train_data['MortalityRate'].fillna(0.0)\ntrain_data['GrowthRate']        = train_data['NewConfirmedCases']\/train_data['NewConfirmedCases'].shift(1)\ntrain_data['GrowthRate']        = train_data['GrowthRate'].replace([-np.inf, np.inf],  0.0)\ntrain_data['GrowthRate']        = train_data['GrowthRate'].fillna(0.0) \ndisplay(train_data.head())","acf3f83f":"def getColumnInfo(df):\n    n_province =  df['Province_State'].nunique()\n    n_country  =  df['Country_Region'].nunique()\n    n_days     =  df['Date'].nunique()\n    start_date =  df['Date'].unique()[0]\n    end_date   =  df['Date'].unique()[-1]\n    return n_province, n_country, n_days, start_date, end_date\n\nn_train = train_data.shape[0]\nn_test = test_data.shape[0]\n\nn_prov_train, n_count_train, n_train_days, start_date_train, end_date_train = getColumnInfo(train_data)\nn_prov_test,  n_count_test,  n_test_days,  start_date_test,  end_date_test  = getColumnInfo(test_data)\n\nprint ('<==Train data==> \\n # of Province_State: '+str(n_prov_train),', # of Country_Region:'+str(n_count_train), \n       ', Time Period: '+str(start_date_train)+' to '+str(end_date_train), '==> days:',str(n_train_days))\nprint(\"\\n Countries with Province\/State information:  \", train_data[train_data['Province_State'].isna()==False]['Country_Region'].unique())\nprint ('\\n <==Test  data==> \\n # of Province_State: '+str(n_prov_test),', # of Country_Region:'+str(n_count_test),\n       ', Time Period: '+start_date_test+' to '+end_date_test, '==> days:',n_test_days)\n\ndf_test = test_data.loc[test_data.Date > '2020-04-14']\noverlap_days = n_test_days - df_test.Date.nunique()\nprint('\\n overlap days with training data: ', overlap_days, ', total days: ', n_train_days+n_test_days-overlap_days)","af74fc81":"prob_confirm_check_train = train_data.ConfirmedCases.value_counts(normalize=True)\nprob_fatal_check_train = train_data.Fatalities.value_counts(normalize=True)\n\nn_confirm_train = train_data.ConfirmedCases.value_counts()[1:].sum()\nn_fatal_train = train_data.Fatalities.value_counts()[1:].sum()\n\nprint('Percentage of confirmed case records = {0:<2.0f}\/{1:<2.0f} = {2:<2.1f}%'.format(n_confirm_train, n_train, prob_confirm_check_train[1:].sum()*100))\nprint('Percentage of fatality records = {0:<2.0f}\/{1:<2.0f} = {2:<2.1f}%'.format(n_fatal_train, n_train, prob_fatal_check_train[1:].sum()*100))","1d68a645":"train_data_by_country = train_data.groupby(['Date','Country_Region'],as_index=False).agg({'ConfirmedCases': 'sum', 'Fatalities': 'sum',\n                                                                                         'GrowthRate':'last' })\n#display(train_data_by_country.tail(10))\nmax_train_date = train_data['Date'].max()\ntrain_data_by_country_confirm = train_data_by_country.query('(Date == @max_train_date) & (ConfirmedCases > 100)').sort_values('ConfirmedCases', ascending=False)\ntrain_data_by_country_confirm.set_index('Country_Region', inplace=True)\n\ntrain_data_by_country_confirm.style.background_gradient(cmap='Reds').format({'ConfirmedCases': \"{:.0f}\", 'GrowthRate': \"{:.2f}\"})\n","7f3a8ba2":"from itertools import cycle, islice\ndiscrete_col = list(islice(cycle(['orange', 'r', 'g', 'k', 'b', 'c', 'm']), None, len(train_data_by_country_confirm.head(30))))\nplt.rcParams.update({'font.size': 22})\ntrain_data_by_country_confirm.head(20).plot(figsize=(20,15), kind='barh', color=discrete_col)\nplt.legend([\"Confirmed Cases\", \"Fatalities\"]);\nplt.xlabel(\"Number of Covid-19 Affectees\")\nplt.title(\"First 20 Countries with Highest Confirmed Cases\")\nylocs, ylabs = plt.yticks()\nfor i, v in enumerate(train_data_by_country_confirm.head(20)[\"ConfirmedCases\"][:]):\n    plt.text(v+0.01, ylocs[i]-0.25, str(int(v)), fontsize=12)\nfor i, v in enumerate(train_data_by_country_confirm.head(20)[\"Fatalities\"][:]):\n    if v > 0: #disply for only >300 fatalities\n        plt.text(v+0.01,ylocs[i]+0.1,str(int(v)),fontsize=12)    ","a9447b9a":"def reformat_time(reformat, ax):\n    ax.xaxis.set_major_locator(dates.WeekdayLocator())\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%b %d'))    \n    if reformat: #reformat again if you wish\n        date_list = train_data_by_date.reset_index()[\"Date\"].tolist()\n        x_ticks = [dt.datetime.strftime(t,'%Y-%m-%d') for t in date_list]\n        x_ticks = [tick for i,tick in enumerate(x_ticks) if i%8==0 ]# split labels into same number of ticks as by pandas\n        ax.set_xticklabels(x_ticks, rotation=90)\n    # cosmetics\n    ax.yaxis.grid(linestyle='dotted')\n    ax.spines['right'].set_color('none')\n    ax.spines['top'].set_color('none')\n    ax.spines['left'].set_color('none')\n    ax.spines['bottom'].set_color('none')\n\ntrain_data['Date'] = pd.to_datetime(train_data['Date'])\ntrain_data_by_date = train_data.groupby(['Date'],as_index=True).agg({'ConfirmedCases': 'sum','Fatalities': 'sum', \n                                                                     'NewConfirmedCases':'sum', 'NewFatalities':'sum', 'MortalityRate':'mean'})\nnum0 = train_data_by_date._get_numeric_data() \nnum0[num0 < 0.0] = 0.0\n#display(train_data_by_date.head())\n\n## ======= Sort by countries with fatalities > 600 ========\n\ntrain_data_by_country_max = train_data.groupby(['Country_Region'],as_index=True).agg({'ConfirmedCases': 'max', 'Fatalities': 'max'})\ntrain_data_by_country_fatal = train_data_by_country_max[train_data_by_country_max['Fatalities']>600]\ntrain_data_by_country_fatal = train_data_by_country_fatal.sort_values(by=['Fatalities'],ascending=False).reset_index()\n#display(train_data_by_country_fatal.head(20))\n\ndf_merge_by_country = pd.merge(train_data,train_data_by_country_fatal['Country_Region'],on=['Country_Region'],how='inner')\ndf_max_fatality_country = df_merge_by_country.groupby(['Date','Country_Region'],as_index=False).agg({'ConfirmedCases': 'sum',\n                                                                                                     'Fatalities': 'sum',\n                                                                                                     'NewConfirmedCases':'sum',\n                                                                                                     'NewFatalities':'sum',\n                                                                                                     'MortalityRate':'mean'})\n\nnum1 = df_max_fatality_country._get_numeric_data() \nnum1[num1 < 0.0] = 0.0\ndf_max_fatality_country.set_index('Date',inplace=True)\n#display(df_max_fatality_country.head(20))\n\ncountries = train_data_by_country_fatal['Country_Region'].unique()\n\nplt.rcParams.update({'font.size': 16})\n\nfig,(ax0,ax1) = plt.subplots(1,2,figsize=(15, 8))\nfig,(ax2,ax3) = plt.subplots(1,2,figsize=(15, 8))#,sharey=True)\n\ntrain_data_by_date.ConfirmedCases.plot(ax=ax0, x_compat=True, title='Confirmed Cases Globally', legend='Confirmed Cases',\n                                       color=discrete_col)#, logy=True)\nreformat_time(0,ax0)\ntrain_data_by_date.NewConfirmedCases.plot(ax=ax0, x_compat=True, linestyle='dotted', legend='New Confirmed Cases',\n                                          color=discrete_col)#, logy=True)\nreformat_time(0,ax0)\n\ntrain_data_by_date.Fatalities.plot(ax=ax2, x_compat=True, title='Fatalities Globally', legend='Fatalities', color='r')\nreformat_time(0,ax2)\ntrain_data_by_date.NewFatalities.plot(ax=ax2, x_compat=True, linestyle='dotted', legend='Daily Deaths',color='r')#tell pandas not to use its own datetime format\nreformat_time(0,ax2)\n\nfor country in countries:\n    match = df_max_fatality_country.Country_Region==country\n    df_fatality_by_country = df_max_fatality_country[match] \n    df_fatality_by_country.ConfirmedCases.plot(ax=ax1, x_compat=True, title='Confirmed Cases Nationally')\n    reformat_time(0,ax1)\n    df_fatality_by_country.Fatalities.plot(ax=ax3, x_compat=True, title='Fatalities Nationally')\n    reformat_time(0,ax3)\n    \n#ax1.legend(countries)\n#ax3.legend(countries)\nax1.legend(countries, loc='center left',bbox_to_anchor=(1.0, 0.5))\nax3.legend(countries, loc='center left',bbox_to_anchor=(1.0, 0.5))\n","f5124466":"fig = plt.figure()\nfig,(ax4,ax5) = plt.subplots(1,2,figsize=(20, 8))\n#train_data_by_date.loc[(train_data_by_date.ConfirmedCases > 200)]#useless, its already summed.\ntrain_data_by_date.MortalityRate.plot(ax=ax4, x_compat=True, legend='Mortality Rate',color='r')#tell pandas not to use its own datetime format\nreformat_time(0,ax4)\n\nfor num, country in enumerate(countries):\n    match = df_max_fatality_country.Country_Region==country \n    df_fatality_by_country = df_max_fatality_country[match] \n    df_fatality_by_country.MortalityRate.plot(ax=ax5, x_compat=True, title='Average Mortality Rate Nationally')    \n    reformat_time(0,ax5)\n\nax5.legend(countries, loc='center left',bbox_to_anchor=(1.0, 0.5))","abce5855":"train_data_by_max_date = train_data_by_country.query('(Date == @max_train_date) & (ConfirmedCases > 100)')\ntrain_data_by_max_date.loc[:, 'MortalityRate'] = train_data_by_max_date.loc[:,'Fatalities']\/train_data_by_max_date.loc[:,'ConfirmedCases']\ntrain_data_by_mortality = train_data_by_max_date.sort_values('MortalityRate', ascending=False)\ntrain_data_by_mortality.set_index('Country_Region', inplace=True)\n#display(train_data_by_mortality.head())\n\npalette = plt.get_cmap('OrRd_r')\nrainbow_col = [palette(1.*i\/20.0) for i in range(20)]\n\ntrain_data_by_mortality.MortalityRate.head(20).plot(figsize=(15,10), kind='barh', color=rainbow_col)\nplt.xlabel(\"Mortality Rate\")\nplt.title(\"First 20 Countries with Highest Mortality Rate\")\nylocs, ylabs = plt.yticks()\n\n","949738e6":"#import plotly.io as pio              # to set shahin plot layout\n\nworld_df = train_data_by_country.query('Date == @max_train_date')\nworld_df.loc[:,'Date']           = world_df.loc[:,'Date'].apply(str)\nworld_df.loc[:,'Confirmed_log']  = round(np.log10(world_df.loc[:,'ConfirmedCases'] + 1), 3)\nworld_df.loc[:,'Fatalities_log'] = np.log10(world_df.loc[:,'Fatalities'] + 1)\nworld_df.loc[:,'MortalityRate']  = round(world_df.loc[:, 'Fatalities'] \/ world_df.loc[:,'ConfirmedCases'], 3)\nworld_df.loc[:,'GrowthFactor']  = round(world_df.loc[:,'GrowthRate'], 3)\n#display(world_df.head())\n\nfig1 = px.choropleth(world_df, locations=\"Country_Region\", \n                    locationmode=\"country names\",  \n                    color=\"Confirmed_log\",                     \n                    hover_name=\"Country_Region\",\n                    hover_data=['ConfirmedCases', 'Fatalities', 'MortalityRate', 'GrowthFactor'],\n                    range_color=[world_df['Confirmed_log'].min(), world_df['Confirmed_log'].max()], \n                    color_continuous_scale = px.colors.sequential.Plasma,\n                    title='COVID-19: Confirmed Cases')\nfig1.show()\n","2c659fb8":"fig2 = px.scatter_geo(world_df, \n                     locations=\"Country_Region\", \n                     locationmode=\"country names\", \n                     color=\"ConfirmedCases\", size='ConfirmedCases', \n                     hover_name=\"Country_Region\", \n                     hover_data=['ConfirmedCases', 'Fatalities', 'MortalityRate', 'GrowthFactor'],\n                     range_color= [world_df['Confirmed_log'].min(), world_df['ConfirmedCases'].max()], \n                     projection=\"natural earth\", \n                     animation_frame=\"Date\",\n                     animation_group=\"Country_Region\",\n                     color_continuous_scale=\"portland\",\n                     title='COVID-19: Spread Over Time')\n\n#fig2.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 10\n#fig2.layout.updatemenus[0].buttons[0].args[1][\"transition\"][\"duration\"] = 10\nfig2.layout.coloraxis.showscale = False\n#fig2.layout.sliders[0].pad.t = 10\n#fig2.layout.updatemenus[0].pad.t= 10\nfig2.show()","903824d3":"#world_population = pd.read_csv(\"\/kaggle\/input\/population-by-country-2020\/population_by_country_2020.csv\")\n#display(world_population.head()) #for next round","f6fd0f70":"from sklearn.linear_model import Ridge\nfrom sklearn.preprocessing import PolynomialFeatures \nfrom sklearn.pipeline import make_pipeline\nfrom tqdm import tqdm\n\nplt.rcParams.update({'font.size': 12})\nfig,(ax0,ax1) = plt.subplots(1,2,figsize=(20, 8))\ncountries_europe = ['Italy', 'France', 'Spain', 'Germany', 'United Kingdom']\n\n# Take the 1st day as 2020-02-23\ndf = train_data.loc[train_data.Date >= '2020-02-23']\nn_days_europe = df.Date.nunique()\nrainbow_col= plt.cm.jet(np.linspace(0,1,len(countries)))\n\nfor country, c in tqdm(zip(countries,rainbow_col)): \n    df_country_train = df_max_fatality_country[df_max_fatality_country['Country_Region']==country] \n    df_country_test = test_data[test_data['Country_Region']==country]  \n    df_country_train = df_country_train.reset_index()[df_country_train.reset_index().Date > '2020-02-22']\n    n_days_sans_China = df.Date.nunique() - df_country_train.Date.nunique() \n    \n    x_train = np.arange(1, n_days_europe+1).reshape((-1,1))\n    x_test  = (np.arange(1,n_days_europe+n_test_days+1-overlap_days)).reshape((-1,1)) \n    y_train_f = df_country_train['Fatalities']\n    #print (x_train, y_train_f)\n    model_f = make_pipeline(PolynomialFeatures(degree=3), Ridge(fit_intercept=False)) \n    model_f = model_f.fit(x_train, y_train_f)\n    y_predict_f = model_f.predict(x_test) \n    #print (x_test[-n_test_days:], y_predict_f[-n_test_days:])\n    y_train_c = df_country_train['ConfirmedCases'] \n    model_c = make_pipeline(PolynomialFeatures(degree=3), Ridge(fit_intercept=False)) \n    model_c = model_c.fit(x_train, y_train_c)\n    y_predict_c = model_c.predict(x_test)\n    \n    extend_days_test = [i+len(x_test) for i in range(n_days_sans_China)]\n    x_test      = np.append(x_test, extend_days_test) \n    y_predict_c = np.pad(y_predict_c, (n_days_sans_China, 0), 'constant')\n    y_predict_f = np.pad(y_predict_f, (n_days_sans_China, 0), 'constant')\n    \n    ax0.plot(x_test[-n_test_days:], y_predict_c[-n_test_days:],linewidth=2, label='predict_'+country, color=c)\n    ax0.plot(x_train, y_train_c, linewidth=2, color=c, linestyle='dotted', label='train_'+country)\n    ax0.set_title(\"Prediction vs Training for Confirmed Cases\")\n    ax0.set_xlabel(\"Number of days\")\n    ax0.set_ylabel(\"Confirmed Cases\")\n    #ax0.legend(loc='center left',bbox_to_anchor=(1.0, 0.5))\n    #ax0.set_yscale('log')\n    \n    ax1.plot(x_test[-(n_test_days):], y_predict_f[-(n_test_days):],linewidth=2, label='predict_'+country, color=c)\n    ax1.plot(x_train, y_train_f, linewidth=2, color=c, linestyle='dotted', label='train_'+country)\n    ax1.set_title(\"Prediction vs Training for Fatalities\")\n    ax1.set_xlabel(\"Number of days\")\n    ax1.set_ylabel(\"Fatalities\")\n    ax1.legend(loc='center left',bbox_to_anchor=(1.0, 0.5))\n    #ax1.set_yscale('log')","a0070faa":"from scipy.optimize.minpack import curve_fit\nfrom sklearn.metrics import r2_score\nfrom scipy.special import expit\n\ndef Gompertz(a, c, t, t0):    \n    Q = a * np.exp(-np.exp(-c*(t-t0)))\n    return Q\ndef Boltzman(a, c, t, t0):\n    Q = a \/ (1 + np.exp(-c*(t-t0)))\n    return Q\nemerging_countries = ['Albania', 'Andorra', 'Argentina', 'Armenia', 'Azerbaijan', 'Bahrain', \n                      'Barbados', 'Bhtan', 'Bulgaria', 'Burkina Faso', 'Cambodia', 'Chile', \n                      'Colombia', 'Congo (Kinshasa)', 'Costa Rica', 'Cote d\u2019Ivoire', 'Croatia', \n                      'Cuba', 'Cyprus', 'Czechia', 'Dominican Republic', 'Egypt', 'Estonia', \n                      'Georgia', 'Greece', 'Honduras', 'Iceland', 'Iraq', 'Israel', 'Jamaica', \n                      'Japan', 'Jordan', 'Kuwait', 'Latvia', 'Lebanon', 'Lithuania', \n                      'Luxembourg', 'Malaysia', 'Maldives', 'Malta', 'Mauritania', 'Mauritius', 'Monaco',\n                      'Mongolia', 'Montenegro', 'Morocco', 'Namibia', 'Nigeria', 'North Macedonia', \n                      'Norway', 'Oman', 'Panama','Paraguay', 'Rawanda', 'Saint Lucia', 'San Marino', \n                      'Senegal', 'Seychelles', 'Singapore','Slovakia', 'Slovenia', 'Sri Lanka', 'Thailand', \n                      'Tunisia', 'Uganda', 'Uruguay', 'Venezuela']\ndef get_bounds_fatal (country, isState, y_train):\n    x = ''\n    for c in emerging_countries:\n        if country == c: \n            x = c; break\n    maximum = max(y_train)\n    if maximum == 0.0: maximum = 1.0         \n    if country == 'China':\n        lower = [0, 0.02, 0]\n        upper = [2.0*maximum,0.16, 40]\n    elif country == 'Iran':\n        lower = [0, 0.00, 0]\n        upper = [3.0*maximum,0.11, 68]\n    elif country == 'Italy':\n        lower = [0, 0.00, 0]\n        upper = [3.0*maximum,0.13, 72]       \n    elif country == 'US':\n        lower = [0, 0.02, 0]\n        if maximum <=10:upper = [4.0*maximum, 0.30, 85] \n        else:           upper = [3.5*maximum, 0.20, 90] \n    elif country == 'France':\n        lower = [0, 0.02, 0]\n        if maximum <=10:upper = [4.0*maximum,0.18, 80]\n        else:           upper = [4.0*maximum,0.15, 90] \n    elif country == 'Spain':\n        lower = [0, 0.02, 0]\n        upper = [3.0*maximum,0.15, 78]\n    elif country == 'Germany':\n        lower = [0.0, 0.02, 0]\n        upper = [3.0*maximum,0.20, 85] \n    elif country == 'Belgium':\n        lower = [0.0, 0.02, 0]\n        upper = [3.0*maximum,0.25, 88] \n    elif country == 'Turkey':\n        lower = [0.0, 0.02, 0]\n        upper = [3.5*maximum,0.22, 90]\n    elif country == 'Netherlands':\n        lower = [0.0, 0.02, 0]\n        upper = [4.0*maximum,0.14, 88] \n    elif country == 'Switzerland':\n        lower = [0.0, 0.02, 0]\n        upper = [4.0*maximum,0.12, 90] \n    elif country == 'United Kingdom':\n        lower = [0.0, 0.02, 0]\n        upper = [4.5*maximum,0.16, 95]\n    elif country == 'Portugal':\n        lower = [100, 0.02, 0]\n        upper = [4.5*maximum,0.12, 95]  \n    elif country == 'Sweden':\n        lower = [100, 0.02, 0]\n        upper = [4.0*maximum,0.18, 90] \n    elif country == 'Brazil':\n        lower = [100, 0.02, 0]\n        upper = [3.5*maximum,0.20, 90] \n    elif country == 'Indonesia':\n        lower = [100, 0.02, 0]\n        upper = [4.5*maximum,0.10, 95]  \n    elif country == 'Austria':\n        lower = [0, 0.02, 0]\n        upper = [4.5*maximum,0.10, 95]  \n    elif country == 'Ireland':\n        lower = [0, 0.02, 0]\n        upper = [4.5*maximum,0.15, 95]          \n    elif country == 'Canada':\n        lower = [0, 0.02, 0]\n        if maximum <=10: upper = [2.0*maximum, 0.20, 65] \n        else:            upper = [4.5*maximum, 0.16, 95]     \n    elif country == 'India':\n        lower = [0, 0.02, 0]\n        upper = [4.5*maximum,0.20, 95]  \n    elif country == 'Ecuador':\n        lower = [0, 0.02, 0]\n        upper = [4.5*maximum,0.16, 96]  \n    elif country == 'Romania':\n        lower = [0, 0.02, 0]\n        upper = [4.5*maximum,0.15, 95]  \n    elif country == 'Philippines':\n        lower = [0, 0.02, 0]\n        upper = [4.5*maximum,0.12, 95]    \n    elif country == 'Algeria':\n        lower = [0, 0.02, 0]\n        upper = [4.5*maximum,0.12, 95]     \n    elif country == 'Mexico':\n        lower = [0, 0.02, 0]\n        upper = [4.5*maximum,0.20, 95]       \n    elif country == 'Denmark':\n        lower = [0, 0.02, 0]\n        if maximum <=10:upper = [4.0*maximum, 0.30, 80] \n        else:           upper = [4.5*maximum,0.12, 94]      \n    elif country == 'Poland':\n        lower = [0, 0.02, 0]\n        upper = [4.0*maximum,0.20, 94]  \n    elif country == 'Korea, South':\n        lower = [0, 0.02, 0]\n        upper = [2.5*maximum,0.10, 52] \n    elif country == 'Peru':\n        lower = [0.0, 0.02, 0]\n        upper = [4.5*maximum,0.18, 95] \n    elif country == 'Australia':\n        lower = [0, 0.02, 0]\n        if maximum <=10: upper = [2.0*maximum, 0.20, 45] \n        else:            upper = [2.5*maximum,0.20, 70]\n    elif country == 'Pakistan':\n        lower = [0.0, 0.02, 0] \n        upper = [4.5*maximum,0.12,95]\n    elif country == 'Saudi Arabia':\n        lower = [0.0, 0.02, 0] \n        upper = [4.5*maximum,0.15,95]     \n    elif country == 'Afghanistan':\n        lower = [0.0, 0.02, 0] \n        upper = [4.5*maximum,0.12,95]\n    elif country == 'Diamond Princess':\n        lower = [0.0, 0.02, 0] \n        upper = [1.0*maximum,0.50,2] \n    elif country == 'Hungary':\n        lower = [0.0, 0.02, 0] \n        upper = [4.5*maximum,0.14,94]\n    elif country == 'New Zealand':\n        lower = [0.0, 0.02, 0] \n        upper = [4.0*maximum,0.14,90]\n    elif country == 'Somalia':\n        lower = [0.0, 0.02, 0] \n        upper = [4.5*maximum,0.10,94] \n    elif country == x:\n        lower = [0.0, 0.02, 0] \n        upper = [3.5*maximum,0.15,85]  \n    else:\n        lower = [0.0, 0.02, 0] \n        if isState:\n            if maximum <=10:upper = [4.0*maximum,0.30,80] \n            else:           upper = [4.5*maximum,0.15,80]\n        else: \n            if maximum <=10:upper = [4.0*maximum,0.60,85] \n            else:           upper = [4.5*maximum,0.18,95]  \n                \n    return lower, upper\n\ndef get_bounds_confirm (country, isState, y_train):\n    x = ''\n    for c in emerging_countries:\n        if country == c: \n            x = c; break\n    maximum = max(y_train)\n    if maximum == 0.0: maximum = 1.0        \n    if country == 'China':\n        lower = [0, 0.02, 0]\n        upper = [2.0*maximum,0.20,30]\n    elif country == 'Iran':\n        lower = [0, 0.00, 0]\n        upper = [3.0*maximum,0.12,70]\n    elif country == 'Italy':\n        lower = [0, 0.00, 0]\n        upper = [3.0*maximum,0.12, 70]\n    elif country == 'US':\n        lower = [0, 0.02, 0]\n        if maximum <=10:upper = [4.0*maximum, 0.30, 80] \n        else:           upper = [3.0*maximum, 0.18, 85]     \n    elif country == 'France':\n        lower = [0, 0.02, 0]\n        if maximum <=10:upper = [4.0*maximum, 0.15, 80] \n        else:           upper = [4.5*maximum, 0.10, 90]             \n    elif country == 'Spain':\n        lower = [0, 0.02, 0]\n        upper = [3.0*maximum,0.13, 75] \n    elif country == 'Germany':\n        lower = [0, 0.02, 0]\n        upper = [3.0*maximum,0.13, 75] \n    elif country == 'Belgium':\n        lower = [0, 0.02, 0]\n        upper = [3.0*maximum,0.15, 78]\n    elif country == 'Turkey':\n        lower = [0, 0.02, 0]\n        upper = [3.5*maximum,0.20, 90] \n    elif country == 'Netherlands':\n        lower = [0, 0.02, 0]\n        upper = [4.0*maximum,0.10, 88] \n    elif country == 'Switzerland':\n        lower = [0, 0.02, 0]\n        upper = [3.5*maximum,0.10, 75]  \n    elif country == 'United Kingdom':\n        lower = [0, 0.02, 0]\n        upper = [4.5*maximum,0.12, 95] \n    elif country == 'Portugal':\n        lower = [0, 0.02, 0]\n        upper = [4.0*maximum,0.11, 88]   \n    elif country == 'Sweden':\n        lower = [0, 0.02, 0]\n        upper = [4.0*maximum,0.10, 88]    \n    elif country == 'Brazil':\n        lower = [0, 0.02, 0]\n        upper = [3.5*maximum,0.18, 88]  \n    elif country == 'Indonesia':\n        lower = [0, 0.02, 0]\n        upper = [5.5*maximum,0.09, 100] \n    elif country == 'Austria':\n        lower = [0, 0.02, 0]\n        upper = [3.5*maximum,0.12, 75] \n    elif country == 'Ireland':\n        lower = [0, 0.02, 0]\n        upper = [4.5*maximum,0.12, 95]          \n    elif country == 'Canada':\n        lower = [0, 0.02, 0]\n        if maximum <=10: upper = [3.0*maximum, 0.28, 75] \n        else:            upper = [4.5*maximum, 0.12, 93]            \n    elif country == 'India':\n        lower = [0, 0.02, 0]\n        upper = [4.5*maximum,0.16, 96] \n    elif country == 'Ecuador':\n        lower = [0, 0.02, 0]\n        upper = [4.5*maximum,0.20, 95] \n    elif country == 'Romania':\n        lower = [0, 0.02, 0]\n        upper = [4.5*maximum,0.11, 93]  \n    elif country == 'Philippines':\n        lower = [0, 0.02, 0]\n        upper = [5.5*maximum,0.12, 95]  \n    elif country == 'Algeria':\n        lower = [0, 0.02, 0]\n        upper = [5.5*maximum,0.10, 98] \n    elif country == 'Mexico':\n        lower = [100, 0.02, 0]\n        upper = [4.5*maximum,0.15, 95]        \n    elif country == 'Denmark':\n        lower = [0, 0.02, 0]\n        if isState:\n            if maximum <= 10: upper = [2.0*maximum,0.20,80] \n            else:             upper = [2.5*maximum,0.25, 55]    \n        else:\n            if maximum <=10: upper = [2.0*maximum,0.30, 40] \n            else:            upper = [5.5*maximum,0.06, 100]       \n    elif country == 'Poland':\n        lower = [0, 0.02, 0]\n        upper = [4.5*maximum,0.11, 94]\n    elif country == 'Korea, South':\n        lower = [0, 0.02, 0]\n        upper = [2.0*maximum,0.25, 18] \n    elif country == 'Peru':\n        lower = [0, 0.02, 0]\n        upper = [4.5*maximum,0.20, 96] \n    elif country == 'Australia':\n        lower = [0, 0.02, 0]\n        if maximum <=10: upper = [2.0*maximum, 0.25, 45] \n        else:            upper = [2.5*maximum,0.18, 65] \n    elif country == 'Pakistan':\n        lower = [0.0, 0.02, 0] \n        upper = [4.5*maximum,0.10,94]\n    elif country == 'Saudi Arabia':\n        lower = [0.0, 0.02, 0] \n        upper = [4.5*maximum,0.10,94]    \n    elif country == 'Afghanistan':\n        lower = [0.0, 0.02, 0] \n        upper = [4.5*maximum,0.12,94]\n    elif country == 'Diamond Princess':\n        lower = [0.0, 0.02, 0] \n        upper = [1.0*maximum,1.0,1.0]\n    elif country == 'Hungary':\n        lower = [0.0, 0.02, 0] \n        upper = [4.5*maximum,0.10,94]  \n    elif country == 'New Zealand':\n        lower = [0.0, 0.02, 0] \n        upper = [4.5*maximum,0.15,85] \n    elif country == 'Somalia':\n        lower = [0.0, 0.02, 0] \n        upper = [1.0*maximum,0.08,50] \n    elif country == x:\n        lower = [0.0, 0.02, 0] \n        upper = [3.5*maximum,0.10,80]  \n    else:\n        lower = [0.0, 0.02, 0] \n        if isState:\n            if maximum <= 200: upper = [2.0*maximum,0.20,80] \n            else:              upper = [4.5*maximum,0.20,80]\n        else:  \n            if maximum <= 200: upper = [3.0*maximum,0.20,85]  \n            else:              upper = [4.5*maximum,0.20,96]    \n                \n    return lower, upper \n\nplt.rcParams.update({'font.size': 12})\nfig,(ax0,ax1) = plt.subplots(1,2,figsize=(20, 8))\nfig,(ax2,ax3) = plt.subplots(1,2,figsize=(20, 8))\n\nrainbow_col= plt.cm.jet(np.linspace(0,1,len(countries)))\n\nfor country, c in tqdm(zip(countries,rainbow_col)): \n    #print('\\n\\n\\n\\n country ==>', country)\n    df_country_train = df_max_fatality_country[df_max_fatality_country['Country_Region']==country] \n    df_country_test = test_data[test_data['Country_Region']==country]  \n    if country != 'China':\n        df_country_train = df_country_train.reset_index().loc[df_country_train.reset_index().Date>'2020-02-22'] #17\n        n_days_sans_China =train_data.Date.nunique() - df_country_train.Date.nunique()        \n    else:\n        df_country_train = df_country_train.reset_index()\n        n_days_sans_China = 0\n        \n    n_train_days =df_country_train.Date.nunique()    \n    x_train = range(n_train_days)\n    x_test  = range(n_train_days+n_test_days-overlap_days)#n_test_days+overlap_days)\n    y_train_f = df_country_train['Fatalities']\n    y_train_c = df_country_train['ConfirmedCases'] \n    y_train_cn = (df_country_train['ConfirmedCases'] - df_country_train['ConfirmedCases'].shift(1)).fillna(0.0).replace([-np.inf, np.inf],  0.0)\n    y_train_fn = (df_country_train['Fatalities'] - df_country_train['Fatalities'].shift(1)).fillna(0.0).replace([-np.inf, np.inf],  0.0)\n    \n    ###### Fatalities:   \n    lower, upper = get_bounds_fatal (country, 0, y_train_f)\n    popt_f, pcov_f = curve_fit(Gompertz, x_train, y_train_f, method='trf', bounds=(lower,upper))\n    a_max, estimated_c, estimated_t0 = popt_f\n    y_predict_f = Gompertz(a_max, estimated_c, x_test, estimated_t0)\n    y_predict_f_at_t0 =  Gompertz(a_max, estimated_c, estimated_t0, estimated_t0)\n    #print('\\nfatalities ==>, max: ',a_max, ', slope: %.2f'% estimated_c, ', inflection point: ', \n    #      estimated_t0, ', r2 score: %.2f'% r2_score(y_train_f[:], y_predict_f[0:n_train_days]))\n    y_fn = np.array([])\n    fn = [y_predict_f[i]-y_predict_f[i-1] if i!=0 else y_predict_f[i] for i in range(len(y_predict_f))]    \n    y_predict_fn = np.append(y_fn, fn)\n   \n    ###### Confirmed cases:    \n    lower_c,upper_c = get_bounds_confirm (country, 0, y_train_c)\n    popt_c, pcov_c = curve_fit(Gompertz, x_train, y_train_c, method='trf', bounds=(lower_c,upper_c))\n    a_max_c, estimated_c_c, estimated_t0_c = popt_c\n    y_predict_c = Gompertz(a_max_c, estimated_c_c, x_test, estimated_t0_c)\n    y_predict_c_at_t0 =  Gompertz(a_max_c, estimated_c_c, estimated_t0_c, estimated_t0_c)\n    #print('confirmed ==> max: ',a_max_c, ', slope: %.2f'% estimated_c_c, ', inflection point: ', \n    #      estimated_t0_c, ', r2 score: %.2f'% r2_score(y_train_c[:], y_predict_c[0:n_train_days]))\n    y_cn = np.array([])\n    cn = [y_predict_c[i]-y_predict_c[i-1] if i!=0 else y_predict_c[i] for i in range(len(y_predict_c))]    \n    y_predict_cn = np.append(y_cn, cn)\n       \n    ## ===== Move the x-axis of trained and test datasets to allign with dates in China ======\n    extend_days_test = [i+len(x_test) for i in range(n_days_sans_China)]\n    x_test       = np.append(x_test, extend_days_test) \n    y_predict_c  = np.pad(y_predict_c, (n_days_sans_China, 0), 'constant')\n    y_predict_cn = np.pad(y_predict_cn,(n_days_sans_China, 0), 'constant')\n    y_predict_f  = np.pad(y_predict_f, (n_days_sans_China, 0), 'constant')\n    y_predict_fn = np.pad(y_predict_fn, (n_days_sans_China, 0), 'constant')\n    inflection_c = estimated_t0_c+n_days_sans_China\n\n    extend_days_train = [i+len(x_train) for i in range(n_days_sans_China)]\n    x_train      = np.append(x_train, extend_days_train)\n    y_train_c    = np.pad(y_train_c, (n_days_sans_China, 0), 'constant')\n    y_train_cn   = np.pad(y_train_cn, (n_days_sans_China, 0), 'constant')\n    y_train_f    = np.pad(y_train_f, (n_days_sans_China, 0), 'constant')\n    y_train_fn  = np.pad(y_train_fn, (n_days_sans_China, 0), 'constant')\n    inflection_f = estimated_t0+n_days_sans_China\n    \n    ## ===== Plot =======\n    ax0.plot(x_test, y_predict_c, linewidth=2, label=country, color=c) \n    ax0.plot(inflection_c, y_predict_c_at_t0, marker='o', markersize=6, color='green')#, label='inflection')\n    ax0.plot(x_train, y_train_c, linewidth=2, color=c,linestyle='dotted')#, label='train_'+country)   \n    ax0.set_title(\"Total Confirmed Cases\")\n    ax0.set_xlabel(\"Number of days\")\n    ax0.set_ylabel(\"Confirmed Cases\")\n    ax0.legend()#loc='center left',bbox_to_anchor=(1.0, 0.5))\n    \n    ax1.plot(x_test, y_predict_f, linewidth=2, label=country,color=c) \n    ax1.plot(inflection_f, y_predict_f_at_t0, marker='o', markersize=6, color='green')\n    ax1.plot(x_train, y_train_f, linewidth=2,color=c, linestyle='dotted')#, label='train_'+country)    \n    ax1.set_title(\"Total Fatalities\")\n    ax1.set_xlabel(\"Number of days\")\n    ax1.set_ylabel(\"Fatalities\")\n    ax1.legend()#loc='center left',bbox_to_anchor=(1.0, 0.5))\n    \n    ax2.plot(x_test, y_predict_cn, linewidth=2, label=country, color=c) \n    ax2.scatter(x_train, y_train_cn, linewidth=2, color=c, linestyle='dotted')#, label='train_'+country)   \n    ax2.set_title(\"New Confirmed Cases\")\n    ax2.set_xlabel(\"Number of days\")\n    ax2.set_ylabel(\"New Confirmed Cases\")\n    ax2.legend()#loc='center left',bbox_to_anchor=(1.0, 0.5))\n    \n    ax3.plot(x_test, y_predict_fn, linewidth=2, label=country, color=c) \n    ax3.scatter(x_train, y_train_fn, linewidth=2, color=c, linestyle='dotted')#, label='train_'+country)   \n    ax3.set_title(\"New Fatalities\")\n    ax3.set_xlabel(\"Number of days\")\n    ax3.set_ylabel(\"New Fatalities\")\n    ax3.legend()#loc='center left',bbox_to_anchor=(1.0, 0.5))","f9c8c542":"nCountries= train_data['Country_Region'].unique() \nisState = bool\nx_train = range(n_train_days)\nx_test  = range(n_train_days+n_test_days-overlap_days)\n\nfor country in tqdm(nCountries): \n    fig,(ax0,ax1) = plt.subplots(1,2,figsize=(20,8))\n    fig,(ax2,ax3) = plt.subplots(1,2,figsize=(20,8))\n    #print('\\n\\n\\n\\n country ==>', country) \n    \n    df_country_train = train_data[train_data['Country_Region']==country] \n    df_country_test = test_data[test_data['Country_Region']==country]  \n    \n    if country != 'China':\n        df_country_train = df_country_train.reset_index().loc[df_country_train.reset_index().Date>'2020-02-22'] #17\n        n_days_sans_China =train_data.Date.nunique() - df_country_train.Date.nunique()        \n    else:\n        df_country_train = df_country_train.reset_index()\n        n_days_sans_China = 0\n        \n    n_train_days =df_country_train.Date.nunique()    \n    x_train = range(n_train_days)\n    x_test  = range(n_train_days+n_test_days-overlap_days)   \n    nvalues = df_country_train['Province_State'].isna().nunique() #fix for problem with Denmark data\n    \n    if (df_country_train['Province_State'].isna().unique()==True).any() and nvalues<2: \n        isState = False        \n        y_train_f = df_country_train['Fatalities']\n        y_train_c = df_country_train['ConfirmedCases']  \n        y_train_cn = (df_country_train['ConfirmedCases'] - df_country_train['ConfirmedCases'].shift(1)).fillna(0.0)\n        y_train_fn = (df_country_train['Fatalities'] - df_country_train['Fatalities'].shift(1)).fillna(0.0)\n        \n        if y_train_f.empty == False:\n            lower, upper = get_bounds_fatal (country, isState, y_train_f)\n            #print(lower, upper)\n            popt_f, pcov_f = curve_fit(Gompertz, x_train, y_train_f, method='trf', bounds=(lower,upper))\n            a_max, estimated_c, estimated_t0 = popt_f\n            y_predict_f = Gompertz(a_max, estimated_c, x_test, estimated_t0)            \n            #print('\\nfatalities ==>, max: ',a_max, ', slope: %.2f'% estimated_c, ', inflection point: ', \n             #     estimated_t0, ', r2 score: %.2f'% r2_score(y_train_f[:], y_predict_f[0:n_train_days]))\n            y_fn = np.array([])\n            fn = [y_predict_f[i]-y_predict_f[i-1] if i!=0 else y_predict_f[i] for i in range(len(y_predict_f))]    \n            y_predict_fn = np.append(y_fn, fn)\n   \n            \n        if y_train_c.empty == False:  \n            lower_c, upper_c = get_bounds_confirm (country, isState, y_train_c)\n            #print(lower_c, upper_c)\n            popt_c, pcov_c = curve_fit(Gompertz, x_train, y_train_c, method='trf', bounds=(lower_c,upper_c))\n            a_max_c, estimated_c_c, estimated_t0_c = popt_c\n            y_predict_c = Gompertz(a_max_c, estimated_c_c, x_test, estimated_t0_c)\n            #print('\\nconfirmed ==> max: ',a_max_c, ', slope: %.2f'% estimated_c_c, ', inflection point: ', \n             #     estimated_t0_c, ', r2 score: %.2f'% r2_score(y_train_c[:], y_predict_c[0:n_train_days]))\n            y_cn = np.array([])\n            cn = [y_predict_c[i]-y_predict_c[i-1] if i!=0 else y_predict_c[i] for i in range(len(y_predict_c))]    \n            y_predict_cn = np.append(y_cn, cn)\n            \n        ## ===== Move the x-axis of trained and test datasets to allign with dates in China ======\n        extend_days_test = [i+len(x_test) for i in range(n_days_sans_China)]\n        x_test       = np.append(x_test, extend_days_test)                         \n        y_predict_c  = np.pad(y_predict_c, (n_days_sans_China, 0), 'constant')\n        y_predict_cn = np.pad(y_predict_cn,(n_days_sans_China, 0), 'constant')\n        y_predict_f  = np.pad(y_predict_f, (n_days_sans_China, 0), 'constant')\n        inflection_f = estimated_t0+n_days_sans_China\n        y_predict_fn = np.pad(y_predict_fn, (n_days_sans_China, 0), 'constant')\n            \n        extend_days_train = [i+len(x_train) for i in range(n_days_sans_China)]\n        x_train      = np.append(x_train, extend_days_train)           \n        y_train_c    = np.pad(y_train_c, (n_days_sans_China, 0), 'constant')\n        y_train_cn   = np.pad(y_train_cn, (n_days_sans_China, 0), 'constant')\n        y_train_f    = np.pad(y_train_f, (n_days_sans_China, 0), 'constant')\n        y_train_fn   = np.pad(y_train_fn, (n_days_sans_China, 0), 'constant')\n        inflection_c = estimated_t0_c+n_days_sans_China           \n        \n        ax0.plot(x_test, y_predict_c, linewidth=2, label='predict_'+country) \n        ax0.plot(x_train, y_train_c, linewidth=2, color='r', linestyle='dotted', label='train_'+country)\n        ax0.set_title(\"Prediction vs Training for Confirmed Cases\")\n        ax0.set_xlabel(\"Number of days\")\n        ax0.set_ylabel(\"Confirmed Cases\")\n        ax0.legend()\n        test_data.loc[test_data['Country_Region']==country,'ConfirmedCases'] = y_predict_c[-n_test_days:]\n        \n        ax1.plot(x_test, y_predict_f, linewidth=2, label='predict_'+country) \n        ax1.plot(x_train, y_train_f, linewidth=2, color='r', linestyle='dotted', label='train_'+country)    \n        ax1.set_title(\"Prediction vs Training for Fatalities\")\n        ax1.set_xlabel(\"Number of days\")\n        ax1.set_ylabel(\"Fatalities\")\n        ax1.legend()\n        test_data.loc[test_data['Country_Region']==country,'Fatalities'] = y_predict_f[-n_test_days:] \n                \n        ax2.plot(x_test, y_predict_cn, linewidth=2, label='predict_'+country) \n        ax2.scatter(x_train, y_train_cn, linewidth=2, color='r', linestyle='dotted', label='train_'+country)   \n        ax2.set_title(\"New Confirmed Cases\")\n        ax2.set_xlabel(\"Number of days\")\n        ax2.set_ylabel(\"New Confirmed Cases\")\n        ax2.legend()#loc='center left',bbox_to_anchor=(1.0, 0.5))\n    \n        ax3.plot(x_test, y_predict_fn, linewidth=2, label='predict_'+country) \n        ax3.scatter(x_train, y_train_fn, linewidth=2, color='r', linestyle='dotted', label='train_'+country)   \n        ax3.set_title(\"New Fatalities\")\n        ax3.set_xlabel(\"Number of days\")\n        ax3.set_ylabel(\"New Fatalities\")\n        ax3.legend()#loc='center left',bbox_to_anchor=(1.0, 0.5))\n    \n    else: # use Province\/State data when available\n        isState = True\n        state_list = []\n        y_predict_c_dict = {}; y_train_c_dict = {}\n        y_predict_cn_dict = {}; y_train_cn_dict = {}\n        y_predict_f_dict = {}; y_train_f_dict = {}\n        y_predict_fn_dict = {}; y_train_fn_dict = {}\n        for state in df_country_train['Province_State'].unique():\n            df_state_train = df_country_train[df_country_train['Province_State']==state] #state\n            df_state_test = df_country_test[df_country_test['Province_State']==state]   \n            state_list.append(state)\n            y_train_f = df_state_train['Fatalities']\n            y_train_c = df_state_train['ConfirmedCases']  \n            y_train_cn = (df_state_train['ConfirmedCases'] - df_state_train['ConfirmedCases'].shift(1)).fillna(0.0)\n            y_train_fn = (df_state_train['Fatalities'] - df_state_train['Fatalities'].shift(1)).fillna(0.0)\n            \n            if y_train_f.empty== False:                 \n                lower, upper = get_bounds_fatal (country, isState, y_train_f)\n                popt_f, pcov_f = curve_fit(Gompertz, x_train, y_train_f, method='trf', bounds=(lower,upper))\n                a_max, estimated_c, estimated_t0 = popt_f\n                y_predict_f = Gompertz(a_max, estimated_c, x_test, estimated_t0) \n                y_predict_f_dict[state] =  y_predict_f\n                y_train_f_dict[state]   =  y_train_f                \n                #print('\\nfatalities state ==>, max: ',a_max, ', slope: %.2f'% estimated_c, ', inflection point: ', \n                #    estimated_t0, ', r2 score: %.2f'% r2_score(y_train_f[:], y_predict_f[0:70]))\n                y_fn = np.array([])\n                fn = [y_predict_f[i]-y_predict_f[i-1] if i!=0 else y_predict_f[i] for i in range(len(y_predict_f))]    \n                y_predict_fn = np.append(y_fn, fn)\n                y_predict_fn_dict[state] = y_predict_fn\n                y_train_fn_dict[state]   = y_train_fn\n                                \n            if y_train_c.empty == False:  \n                lower_c, upper_c = get_bounds_confirm (country, isState, y_train_c)\n                popt_c, pcov_c = curve_fit(Gompertz, x_train, y_train_c, method='trf', bounds=(lower_c,upper_c))\n                a_max_c, estimated_c_c, estimated_t0_c = popt_c\n                y_predict_c = Gompertz(a_max_c, estimated_c_c, x_test, estimated_t0_c)\n                y_predict_c_dict[state] =  y_predict_c\n                y_train_c_dict[state]   =  y_train_c\n                #print('\\nconfirmed state ==> max: ',a_max_c, ', slope: %.2f'% estimated_c_c, ', inflection point: ', \n                #  estimated_t0_c, ', r2 score: %.2f'% r2_score(y_train_c[:], y_predict_c[0:70]))                \n                y_cn = np.array([])\n                cn = [y_predict_c[i]-y_predict_c[i-1] if i!=0 else y_predict_c[i] for i in range(len(y_predict_c))]    \n                y_predict_cn = np.append(y_cn, cn)\n                y_predict_cn_dict[state] = y_predict_cn\n                y_train_cn_dict[state]   = y_train_cn\n                            \n        ## ====== Plot and Store the Results: ======\n        ## ====== Move the x-axis of trained and test datasets to allign with dates in China ======       \n        extend_days_test = [i+len(x_test) for i in range(n_days_sans_China)]\n        x_test      = np.append(x_test, extend_days_test) \n        extend_days_train = [i+len(x_train) for i in range(n_days_sans_China)]\n        x_train     = np.append(x_train, extend_days_train)           \n            \n        for state, y_predict in y_predict_f_dict.items():\n            y_predict = np.pad(y_predict, (n_days_sans_China, 0), 'constant') \n            ax1.plot(x_test, y_predict, linewidth=2, label=country+'_'+state) \n            ax1.legend(loc='center left',bbox_to_anchor=(1.0, 0.5)) \n            test_data.loc[(test_data['Country_Region']==country)&(test_data['Province_State']==state),'Fatalities'] = y_predict[-n_test_days:]\n        for state, y_train in y_train_f_dict.items():\n            y_train   = np.pad(y_train, (n_days_sans_China, 0), 'constant')\n            ax1.plot(x_train, y_train, linewidth=2, color='r', linestyle='dotted', label='train_'+state)             \n        ax1.set_title(\"Prediction vs Training for Fatalities\")\n        ax1.set_xlabel(\"Number of days\")\n        ax1.set_ylabel(\"Fatalities\")   \n        \n        \n        for state, y_predict in y_predict_c_dict.items():\n            y_predict = np.pad(y_predict, (n_days_sans_China, 0), 'constant') \n            ax0.plot(x_test, y_predict, linewidth=2, label=country+'_'+state) \n            #ax0.legend(loc='center left',bbox_to_anchor=(1.0, 0.5)) \n            test_data.loc[(test_data['Country_Region']==country)&(test_data['Province_State']==state),'ConfirmedCases'] = y_predict[-n_test_days:]\n        for state, y_train in y_train_c_dict.items():\n            y_train   = np.pad(y_train, (n_days_sans_China, 0), 'constant')\n            ax0.plot(x_train, y_train, linewidth=2, color='r', linestyle='dotted', label='train_'+country+'_'+state)             \n        ax0.set_title(\"Prediction vs Training for ConfirmedCases\")\n        ax0.set_xlabel(\"Number of days\")\n        ax0.set_ylabel(\"Confirmed Cases\") \n        \n        for state, y_predict in y_predict_fn_dict.items():\n            y_predict = np.pad(y_predict, (n_days_sans_China, 0), 'constant') \n            ax3.plot(x_test, y_predict, linewidth=2, label=country+'_'+state) \n            ax3.legend(loc='center left',bbox_to_anchor=(1.0, 0.5)) \n        for state, y_train in y_train_fn_dict.items():\n            y_train   = np.pad(y_train, (n_days_sans_China, 0), 'constant')\n            ax3.scatter(x_train, y_train, linewidth=2, color='r', linestyle='dotted', label='train_'+state)    \n        ax3.set_title(\"New Fatalities\")\n        ax3.set_xlabel(\"Number of days\")\n        ax3.set_ylabel(\"New Fatalities\")\n        \n        \n        for state, y_predict in y_predict_cn_dict.items():\n            y_predict = np.pad(y_predict, (n_days_sans_China, 0), 'constant') \n            ax2.plot(x_test, y_predict, linewidth=2, label=country+'_'+state) \n            #ax2.legend(loc='center left',bbox_to_anchor=(1.0, 0.5)) \n            test_data.loc[(test_data['Country_Region']==country)&(test_data['Province_State']==state),'ConfirmedCases'] = y_predict[-n_test_days:]\n        for state, y_train in y_train_cn_dict.items():\n            y_train   = np.pad(y_train, (n_days_sans_China, 0), 'constant')\n            ax2.scatter(x_train, y_train, linewidth=2, color='r', linestyle='dotted', label='train_'+country+'_'+state)\n        ax2.set_title(\"New Confirmed Cases\")\n        ax2.set_xlabel(\"Number of days\")\n        ax2.set_ylabel(\"New Confirmed Cases\")","d118f62e":"submit_data = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv\")#, index_col=0)\n\ntest_data['Fatalities'] = test_data['Fatalities'].fillna(0.0).astype(int)\ntest_data['ConfirmedCases'] = test_data['ConfirmedCases'].fillna(0.0).astype(int)\n\nsubmit_data['Fatalities'] = test_data['Fatalities'].astype('int')\nsubmit_data['ConfirmedCases'] = test_data['ConfirmedCases'].astype('int')\n\nsubmit_data.to_csv('submission.csv', index=False)\nsubmit_data.head()","d6a5d028":"display(submit_data.describe())","4df16022":"Below are the plots of confirmed cases and fatalities for nations with fatalities > 600. In global case, I am also overlaying the new emerging confirmed cases as well as daily deaths, respectively.","189c801c":"1. **Confirmed Cases: **\nIt can be seen that a raise in maximum number of new cases appears in week of Feb 11-18, after which China reached its saturation point. Then a new sudden rise appears after March 24th, when the total new cases world wide crosses the total affectees in China alone. \n1. **Deaths: **\nAs can be seen, since March 11th, the death toll rises steeply due to extreme rise in European countires, specially Italy, Spain, France and UK, and as well as now in US. The average mortality rate in these countries below can explain the peaks in the global mortality rate. ","ac1af054":"# Forecast: Gompertz Model\nThe model is described in the following [reference](https:\/\/arxiv.org\/ftp\/arxiv\/papers\/2003\/2003.05447.pdf).\n\n$\ud835\udc44_t = ae^{\u2212be^{-c(t\u2212t_0)}}$ \n\n$\ud835\udc44_t$ is the cumulative confirmed cases (deaths). Here $a$, $b$, $c$ and $t_0$ are the fitting parameters, where as $t$ is the number of days since the first case. $a$ is the predicted maximum of confirmed cases (deaths), which is the asyomptotic value of the function $\ud835\udc44_t$, when $t \\to \\inf$, $t_0$ is the cross-over time when new cases will start decreasing after reaching to a maximum peak $a$ for the new cases trend, and $c$ is the rise or growth rate. In the implementation below, I am keeping $b = 1$ for simplicity.","1ffe89ab":"# Final Submission Using Gompertz Model","c1fa8d61":"We need to do the predictions for 43 days, with overlap with of 13 days in training data that we will use to test our forecast model. Lets look at the data records with entries greater than zero.","1af7e842":"# Results","d4b6105d":"# Trend by Country\/Region for the maximum cases","bc71b59a":"Lets create some new features, such as\n* Daily Confirmed cases\n* Daily Fatalities\n* Growth factor (ratio of daily new cases to the previous day)\n* Mortality rate (ratio of fatalities to the confirmed cases)","96eba1d0":"# Trend by Date (Time Series Diagnosis)","bf2b3be4":"# Forecast: Polynomial of degree 3 and Ridge (An Example of bad Choice of Model)","bea29959":"# Understanding the Data","f60a2541":"Excluding China, the model shows the inflection point as 60-65 days since Jan 22nd shown by a green marker, meaning the time when new number of cases should start decreasing. There is one new outlier in US confirmed cases, which is due to sudden rise in Florida. I didn't get chance to see a dip in France data, but it looks awkward.\n\nThrough discussions with physicist colleagues, the confidence interval due to Boltzman vs Gompertz for the daily increase cases has been reported larger than Gompertz, making Gompertz superior. [Reference](http:\/\/github.com\/pfnali\/Covid-19?fbclid=IwAR0MWWHbKc_5V8sbDckA8_bPiDkIdPgZz9tSzkn5S_dw99eMCQsYKCqMpwM). Though, I didn't check explicitly. Since it is difficult to initialize the fit parameters correctly for countries or states with zero or much less statistics, the results for some of them can be ambiguous. I like to compare it with SEIR model sometime. ","52651ac9":"Lets learn the time stamp for the training and test dataset, and the countries with further details by Province or State.","1f67e7ae":"Lets display the confirmed cases and pandamic spread on a world map.","7e42bbc6":"There are peaks in average mortality rate trend due to China, Iran, UK and Netherlands, which drops down in about 15 days. The rise in Iran reached its maximum on Feb 18, however this is the same time when the outbreak started in Iran. **Here, one should be cautioned as these numbers truely depends on the number of confirmed cases, which itself depends on how many tests were performed during that time.** The average mortality rate in Italy and Spain is still rising to 12%. Lets look at the mortality rate by the end of the training data date.","0935a4a2":"## To do: Display Confirmed cases by Population","d173222b":"This is the model, I used in first week submission. Clearly, it is going sky rocket, without reaching at any inflection point. \n"}}