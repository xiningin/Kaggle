{"cell_type":{"ee3231d8":"code","a55d5bab":"code","bc3bfe44":"code","c0ca05a9":"code","18fcea24":"code","d91815da":"code","518dc790":"code","8ab2bfbb":"code","717499ad":"code","60a15085":"code","31698966":"code","3611bc9e":"code","c41b7e57":"code","d10c8e94":"code","8a1fa103":"code","a319aad1":"code","a98f938a":"code","0cd69e9e":"code","b8e8b5e3":"code","34508152":"code","4b565efd":"code","d3629c48":"code","613d7be8":"code","d2d31220":"code","059c32b4":"code","ff26da57":"code","c204b760":"code","090e9448":"code","a8354489":"code","fb22eec1":"code","e45e2e0e":"code","64c46719":"code","8c7064ab":"code","4cdd66d0":"code","4e4a0044":"code","c178d442":"code","158de59e":"code","9c827310":"code","b83b2558":"code","6aa968bd":"code","fab3f057":"code","94e390f5":"code","3595001f":"markdown","b7f4127d":"markdown","f684299b":"markdown","00b249c5":"markdown","2256086c":"markdown","2ab654b3":"markdown"},"source":{"ee3231d8":"# Importing essential libraries\nimport numpy as np\nimport pandas as pd","a55d5bab":"# Loading the dataset\ndf = pd.read_csv('..\/input\/movietr\/kaggle_movie_train.csv')","bc3bfe44":"df.columns","c0ca05a9":"df.shape","18fcea24":"df.head(10)","d91815da":"# Importing essential libraries for visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","518dc790":"# Visualizing the count of 'genre' column from the dataset\nplt.figure(figsize=(12,12))\nsns.countplot(x='genre', data=df)\nplt.xlabel('Movie Genres')\nplt.ylabel('Count')\nplt.title('Genre Plot')\nplt.show()","8ab2bfbb":"# Finding unique genres\nmovie_genre = list(df['genre'].unique())\nmovie_genre.sort()\nmovie_genre","717499ad":"# Mapping the genres to values\ngenre_mapper = {'other': 0, 'action': 1, 'adventure': 2, 'comedy':3, 'drama':4, 'horror':5, 'romance':6, 'sci-fi':7, 'thriller': 8}\ndf['genre'] = df['genre'].map(genre_mapper)\ndf.head(10)","60a15085":"# Finding any NaN values\ndf.isna().any()","31698966":"# Removing the 'id' column\ndf.drop('id', axis=1, inplace=True)\ndf.columns","3611bc9e":"# Importing essential libraries for performing Natural Language Processing on given dataset\nimport nltk\nimport re\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer","c41b7e57":"df.shape","d10c8e94":"# Cleaning the text\ncorpus = []\nps = PorterStemmer()\n\nfor i in range(0, df.shape[0]):\n\n  # Cleaning special character from the dialog\/script\n  dialog = re.sub(pattern='[^a-zA-Z]', repl=' ', string=df['text'][i])\n\n  # Converting the entire dialog\/script into lower case\n  dialog = dialog.lower()\n\n  # Tokenizing the dialog\/script by words\n  words = dialog.split()\n\n  # Removing the stop words\n  dialog_words = [word for word in words if word not in set(stopwords.words('english'))]\n\n  # Stemming the words\n  words = [ps.stem(word) for word in dialog_words]\n\n  # Joining the stemmed words\n  dialog = ' '.join(words)\n\n  # Creating a corpus\n  corpus.append(dialog)","8a1fa103":"corpus[0:10]","a319aad1":"df[df['genre']==4].index","a98f938a":"len(corpus)","0cd69e9e":"drama_words = []\nfor i in list(df[df['genre']==4].index):\n  drama_words.append(corpus[i])\n\naction_words = []\nfor i in list(df[df['genre']==1].index):\n  action_words.append(corpus[i])\n\ncomedy_words = []\nfor i in list(df[df['genre']==3].index):\n  comedy_words.append(corpus[i])\n\ndrama = ''\naction = ''\ncomedy = ''\nfor i in range(0, 3):\n  drama += drama_words[i]\n  action += action_words[i]\n  comedy += comedy_words[i]","b8e8b5e3":"# Creating wordcloud for drama genre\nfrom wordcloud import WordCloud\nwordcloud1 = WordCloud(background_color='white', width=3000, height=2500).generate(drama)\nplt.figure(figsize=(8,8))\nplt.imshow(wordcloud1)\nplt.axis('off')\nplt.title(\"Words which indicate 'DRAMA' genre \")\nplt.show()","34508152":"# Creating wordcloud for action genre\nwordcloud2 = WordCloud(background_color='white', width=3000, height=2500).generate(action)\nplt.figure(figsize=(8,8))\nplt.imshow(wordcloud2)\nplt.axis('off')\nplt.title(\"Words which indicate 'ACTION' genre \")\nplt.show()","4b565efd":"# Creating wordcloud for comedy genre\nwordcloud3 = WordCloud(background_color='white', width=3000, height=2500).generate(comedy)\nplt.figure(figsize=(8,8))\nplt.imshow(wordcloud3)\nplt.axis('off')\nplt.title(\"Words which indicate 'COMEDY' genre \")\nplt.show()","d3629c48":"# Creating the Bag of Words model\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features=10000, ngram_range=(1,2))\nX = cv.fit_transform(corpus).toarray()","613d7be8":"y = df['genre'].values","d2d31220":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)\nprint('X_train size: {}, X_test size: {}'.format(X_train.shape, X_test.shape))","059c32b4":"# Fitting Naive Bayes to the Training set\nfrom sklearn.naive_bayes import MultinomialNB\nnb_classifier = MultinomialNB()\nnb_classifier.fit(X_train, y_train)","ff26da57":"# Predicting the Test set results\nnb_y_pred = nb_classifier.predict(X_test)","c204b760":"# Calculating Accuracy\nfrom sklearn.metrics import accuracy_score\nscore1 = accuracy_score(y_test, nb_y_pred)\nprint(\"---- Score ----\")\nprint(\"Accuracy score is: {}%\".format(round(score1*100,2)))","090e9448":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\nnb_cm = confusion_matrix(y_test, nb_y_pred)","a8354489":"nb_cm","fb22eec1":"# Plotting the confusion matrix\nplt.figure(figsize=(15,12))\naxis_labels = ['other', 'action', 'adventure', 'comedy', 'drama', 'horror', 'romance', 'sci-fi', 'thriller']\nsns.heatmap(data=nb_cm, annot=True, cmap=\"Blues\", xticklabels=axis_labels, yticklabels=axis_labels)\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for Multinomial Naive Bayes Algorithm')\nplt.show()","e45e2e0e":"# Hyperparameter tuning the Naive Bayes Classifier\nbest_accuracy = 0.0\nalpha_val = 0.0\nfor i in np.arange(0.1,1.1,0.1):\n  temp_classifier = MultinomialNB(alpha=i)\n  temp_classifier.fit(X_train, y_train)\n  temp_y_pred = temp_classifier.predict(X_test)\n  score = accuracy_score(y_test, temp_y_pred)\n  print(\"Accuracy score for alpha={} is: {}%\".format(round(i,1), round(score*100,2)))\n  if score>best_accuracy:\n    best_accuracy = score\n    alpha_val = i\nprint('--------------------------------------------')\nprint('The best accuracy is {}% with alpha value as {}'.format(round(best_accuracy*100, 2), round(alpha_val,1)))","64c46719":"classifier = MultinomialNB(alpha=0.1)\nclassifier.fit(X_train, y_train)","8c7064ab":"def genre_prediction(sample_script):\n  sample_script = re.sub(pattern='[^a-zA-Z]',repl=' ', string=sample_script)\n  sample_script = sample_script.lower()\n  sample_script_words = sample_script.split()\n  sample_script_words = [word for word in sample_script_words if not word in set(stopwords.words('english'))]\n  ps = PorterStemmer()\n  final_script = [ps.stem(word) for word in sample_script_words]\n  final_script = ' '.join(final_script)\n\n  temp = cv.transform([final_script]).toarray()\n  return classifier.predict(temp)[0]","4cdd66d0":"# For generating random integer\nfrom random import randint","4e4a0044":"# Loading test dataset\ntest = pd.read_csv('..\/input\/movier\/kaggle_movie_test.csv')\ntest.columns","c178d442":"test.shape","158de59e":"test.drop('id', axis=1, inplace=True)\ntest.head(10)","9c827310":"# Predicting values\nrow = randint(0,test.shape[0]-1)\nsample_script = test.text[row]\n\nprint('Script: {}'.format(sample_script))\nvalue = genre_prediction(sample_script)\nprint('Prediction: {}'.format(list(genre_mapper.keys())[value]))","b83b2558":"# Predicting values\nrow = randint(0,test.shape[0]-1)\nsample_script = test.text[row]\n\nprint('Script: {}'.format(sample_script))\nvalue = genre_prediction(sample_script)\nprint('Prediction: {}'.format(list(genre_mapper.keys())[value]))","6aa968bd":"# Predicting values\nrow = randint(0,test.shape[0]-1)\nsample_script = test.text[row]\n\nprint('Script: {}'.format(sample_script))\nvalue = genre_prediction(sample_script)\nprint('Prediction: {}'.format(list(genre_mapper.keys())[value]))","fab3f057":"# Predicting values\nrow = randint(0,test.shape[0]-1)\nsample_script = test.text[row]\n\nprint('Script: {}'.format(sample_script))\nvalue = genre_prediction(sample_script)\nprint('Prediction: {}'.format(list(genre_mapper.keys())[value]))","94e390f5":"# Predicting values\nrow = randint(0,test.shape[0]-1)\nsample_script = test.text[row]\n\nprint('Script: {}'.format(sample_script))\nvalue = genre_prediction(sample_script)\nprint('Prediction: {}'.format(list(genre_mapper.keys())[value]))","3595001f":"## *Multinomial Naive Bayes*","b7f4127d":"# **Predictions**","f684299b":"# **Movie Genres Classification**","00b249c5":"# **Exploring the dataset**","2256086c":"# **Model Building**","2ab654b3":"# **Data Cleaning and Preprocessing**"}}