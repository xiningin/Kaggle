{"cell_type":{"1b077b85":"code","e5c20c97":"code","a4458d8c":"code","34dd1442":"code","8d813fd7":"code","1a742ccb":"code","9fed5dd6":"code","1a88ee5a":"code","f67a89ed":"code","9f0e9e00":"code","80373a1f":"code","27e16069":"code","cf43802a":"code","45971b40":"code","edd19acb":"code","19dfd0be":"code","76169dc1":"code","28820c76":"code","e473547f":"code","58864708":"code","2cca5472":"code","350e66a4":"code","4db0b9a7":"code","cb7f4178":"code","bb2f98ed":"code","9196c2a4":"code","4388e1e5":"code","97dfc884":"code","9d4a6a86":"code","3d7228ff":"code","2d5e35e6":"code","b299223d":"code","eb1dc224":"code","28b58b44":"code","4fee2e17":"code","d76f260b":"code","610b98bb":"code","fde77e1f":"code","b48525d5":"code","f1aa51c4":"code","b82d19c7":"code","8f9b955c":"code","b79ab0d5":"code","ba1d2c2f":"code","88ab9a66":"code","147553a9":"code","f8f8bf53":"code","fbeda87f":"code","e06f6cae":"code","115d2050":"code","0f41f0c2":"code","194fa9b7":"code","1b5c93fc":"code","3bf7d4e1":"code","5e75327a":"code","fe025d30":"markdown","8de4087f":"markdown","17bb2c21":"markdown","bb12f11f":"markdown","57e2f661":"markdown","359b4d2c":"markdown","df6062e2":"markdown","d1bcb05b":"markdown","368a3c54":"markdown","efb034b2":"markdown","6c7b4a44":"markdown","b4594e48":"markdown","20c1fe5b":"markdown","65f4d7a3":"markdown","58aa1d14":"markdown","0b8edd76":"markdown","0d45b3e8":"markdown","45153e4c":"markdown","56581174":"markdown","226659f9":"markdown","f65395bd":"markdown","64002991":"markdown","902a3019":"markdown","2189e41b":"markdown","887d4151":"markdown","994ba2d4":"markdown","2766ed90":"markdown","3044a9dd":"markdown","f700f393":"markdown","8b261040":"markdown","45cadb8b":"markdown","14838608":"markdown","8556f104":"markdown","208664b2":"markdown","bd4166f1":"markdown","6699681c":"markdown","642a5197":"markdown","1acc484b":"markdown","6c6a87fc":"markdown","0a5c4e2d":"markdown"},"source":{"1b077b85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.io as pio\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport folium\nfrom folium import plugins\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e5c20c97":"df_n = pd.read_csv(\"\/kaggle\/input\/corona-virus-report\/covid_19_clean_complete.csv\",parse_dates=['Date'])\ndf_n.head(10).style.background_gradient(cmap='Reds')","a4458d8c":"df_n.info()","34dd1442":"df_n.isnull().sum()","8d813fd7":"df_n[\"Province\/State\"].fillna(\"\",inplace=True)\ndf_n.tail()","1a742ccb":"df = df_n[df_n[\"Date\"] == '2020-07-27']\ndf.head()","9fed5dd6":"df_group = df.groupby(\"Country\/Region\")['Confirmed','Deaths','Recovered','Active'].sum().reset_index()\ndf_group.head()","1a88ee5a":"confirmed_cases = df_group[['Country\/Region','Confirmed']]\npio.templates.default = 'plotly_dark'\nfig = px.bar(confirmed_cases.sort_values('Confirmed',ascending=False)[:20][::-1],x=\"Confirmed\",y=\"Country\/Region\",\n             title=\"Top 20 Country with Highest Number of Confirmed Cases\",text='Confirmed',color_discrete_sequence=px.colors.qualitative.Light24,height=900,orientation='h')\nfig.show()","f67a89ed":"pio.templates.default = 'plotly_dark'\ndeath_cases = df_group[['Country\/Region','Deaths']]\nfig = px.bar(death_cases.sort_values('Deaths',ascending=False)[:20][::-1],x=\"Deaths\",y=\"Country\/Region\",\n             title=\"Top 20 Country with Highest Number of Death Cases\",text='Deaths',color_discrete_sequence=px.colors.qualitative.Set1,height=900,orientation='h')\nfig.show()","9f0e9e00":"pio.templates.default = 'plotly_dark'\nrecovered_cases = df_group[['Country\/Region','Recovered']]\nfig = px.bar(recovered_cases.sort_values('Recovered',ascending=False)[:20][::-1],x=\"Recovered\",y=\"Country\/Region\",\n             title=\"Top 20 Country with Highest Number of Recovered Cases\",text='Recovered',color_discrete_sequence=px.colors.qualitative.Bold,height=900,orientation='h')\nfig.show()","80373a1f":"pio.templates.default = 'plotly_dark'\nactive_cases = df_group[['Country\/Region','Active']]\nfig = px.bar(active_cases.sort_values('Active',ascending=False)[:20][::-1],x=\"Active\",y=\"Country\/Region\",\n             title=\"Top 20 Country with Highest Number of Active Cases\",text='Active',color_discrete_sequence=px.colors.qualitative.Vivid,height=900,orientation='h')\nfig.show()","27e16069":"df_who = df.groupby(\"WHO Region\")['Confirmed','Deaths','Recovered','Active'].sum().reset_index()\ndf_who.head()","cf43802a":"df_who_confirmed = df_who[['WHO Region','Confirmed']]\nfig = px.bar(df_who_confirmed.sort_values('Confirmed',ascending=False)[::-1],x='Confirmed',y='WHO Region',\n             title=\"WHO Region with Highest number of Confirmed Cases\",text =\"Confirmed\",color_discrete_sequence=px.colors.qualitative.Light24,orientation='h')\nfig.show()\n\ndf_who_deaths = df_who[['WHO Region','Deaths']]\nfig = px.bar(df_who_deaths.sort_values('Deaths',ascending=False)[::-1],x='Deaths',y='WHO Region',\n             title=\"WHO Region with Highest number of Death Cases\",text =\"Deaths\",color_discrete_sequence=px.colors.qualitative.Set1,orientation='h')\nfig.show()\n\ndf_who_recovered = df_who[['WHO Region','Recovered']]\nfig = px.bar(df_who_recovered.sort_values('Recovered',ascending=False)[::-1],x='Recovered',y='WHO Region',\n             title=\"WHO Region with Highest number of Recovered Cases\",text =\"Recovered\",color_discrete_sequence=px.colors.qualitative.Bold,orientation='h')\nfig.show()\n\ndf_who_active= df_who[['WHO Region','Active']]\nfig = px.bar(df_who_active.sort_values('Active',ascending=False)[::-1],x='Active',y='WHO Region',\n             title=\"WHO Region with Highest number of Active Cases\",text =\"Active\",color_discrete_sequence=px.colors.qualitative.Vivid,orientation='h')\nfig.show()\n","45971b40":"#confirmed+cases\ndef plot_treemap_confirmed(dataframe,variable,value):\n    fig = px.treemap(dataframe.sort_values(by=value,ascending=False).reset_index(drop=True),\n                     path=[variable],values=value,title=(\"Number of Confirmed cases according to \" + str(variable) + '<br>'),\n                     color_discrete_sequence = px.colors.qualitative.Set1)\n    fig.data[0].textinfo = 'label+text+value'\n    \n    fig.show()\n#Death Cases\n    \ndef plot_treemap_death(dataframe,variable,value):\n    fig = px.treemap(dataframe.sort_values(by=value,ascending=False).reset_index(drop=True),\n                     path=[variable],values=value,title=(\"Number of Death cases according to \" + str(variable) + '<br>'),\n                     color_discrete_sequence = px.colors.qualitative.Set1)\n    fig.data[0].textinfo = 'label+text+value'\n    \n    fig.show()\n\n#Recover Cases\n    \ndef plot_treemap_recover(dataframe,variable,value):\n    fig = px.treemap(dataframe.sort_values(by=value,ascending=False).reset_index(drop=True),\n                     path=[variable],values=value,title=(\"Number of Recovered cases according to \" + str(variable) + '<br>'),\n                     color_discrete_sequence = px.colors.qualitative.Set1)\n    fig.data[0].textinfo = 'label+text+value'\n    \n    fig.show()\n    \n#Active Cases\n    \ndef plot_treemap_active(dataframe,variable,value):\n    fig = px.treemap(dataframe.sort_values(by=value,ascending=False).reset_index(drop=True),\n                     path=[variable],values=value,title=(\"Number of Active cases according to \" + str(variable) + '<br>'),\n                     color_discrete_sequence = px.colors.qualitative.Set1)\n    fig.data[0].textinfo = 'label+text+value'\n    \n    fig.show()","edd19acb":"#Confirmed Cases\nplot_treemap_confirmed(df_who_confirmed,'WHO Region',\"Confirmed\")\nplot_treemap_confirmed(confirmed_cases,'Country\/Region',\"Confirmed\")","19dfd0be":"# Death Cases\nplot_treemap_death(df_who_deaths,'WHO Region',\"Deaths\")\nplot_treemap_death(death_cases,'Country\/Region',\"Deaths\")","76169dc1":"#Recovery Cases\nplot_treemap_recover(df_who_recovered,'WHO Region',\"Recovered\")\nplot_treemap_recover(recovered_cases,'Country\/Region',\"Recovered\")","28820c76":"#Active Cases\nplot_treemap_active(df_who_active,'WHO Region',\"Active\")\nplot_treemap_active(active_cases,'Country\/Region',\"Active\")","e473547f":"whole = df_n.groupby('Date')['Date','Confirmed','Deaths','Recovered','Active'].sum().reset_index()\nfig = make_subplots(rows=1,cols=4,column_titles = ('Confirmed','Deaths','Recovered','Active'))\n\ntrace_1 = go.Scatter(x=whole['Date'],y=whole['Confirmed'],name='Confirmed',opacity=0.9,mode='lines+markers',line_color='blue')\n\ntrace_2 = go.Scatter(x=whole['Date'],y=whole['Deaths'],name='Deaths',opacity=0.9,mode='lines+markers',line_color='red')\n\ntrace_3 = go.Scatter(x=whole['Date'],y=whole['Recovered'],name='Recovered',opacity=0.9,mode='lines+markers',line_color='gold')\n\ntrace_4 = go.Scatter(x=whole['Date'],y=whole['Active'],name='Active',opacity=0.9,mode='lines+markers',line_color='yellow')\n\n\nfig.append_trace(trace_1,1,1)\nfig.append_trace(trace_2,1,2)\nfig.append_trace(trace_3,1,3)\nfig.append_trace(trace_4,1,4)\n\nfig.update_layout(title_text=\"Spread of Corona Virus Overtime Globally\")\nfig.show()","58864708":"fig = make_subplots(rows=2,cols=2,subplot_titles = ('Confirmed','Deaths','Recovered','Active'))\n\ntrace_1 = go.Scatter(x=whole['Date'],y=whole['Confirmed'],name='Confirmed',text='Confirmed')\n\ntrace_2 = go.Scatter(x=whole['Date'],y=whole['Deaths'],name='Deaths',text='Deaths')\ntrace_3 = go.Scatter(x=whole['Date'],y=whole['Recovered'],name='Recovered',text='Recovered')\n\ntrace_4 = go.Scatter(x=whole['Date'],y=whole['Active'],name='Active',text='Active')\n\nfig.append_trace(trace_1,1,1)\nfig.append_trace(trace_2,1,2)\nfig.append_trace(trace_3,2,1)\nfig.append_trace(trace_4,2,2)\n\nfig.update_layout(title_text=\"Spread of Corona Virus Overtime Globally\")\nfig.show()","2cca5472":"df_grouped = pd.read_csv('\/kaggle\/input\/corona-virus-report\/worldometer_data.csv')\ndf_grouped.head().style.background_gradient(cmap='Reds')","350e66a4":"group = df_grouped.groupby('Country\/Region')['Population','TotalCases','TotalDeaths','TotalRecovered'].sum().reset_index()\ngroup.nlargest(10,'Population').style.background_gradient(cmap='Reds')","4db0b9a7":"group['Affected Rate'] = np.round(((group['TotalCases']) \/( group['Population']))*100,2)\ngroup.nlargest(10,'Affected Rate').style.background_gradient(cmap='Reds')\n","cb7f4178":"pio.templates.default = 'plotly_dark'\ninfection_rate = group[['Country\/Region','Affected Rate']]\nfig = px.bar(infection_rate.sort_values('Affected Rate',ascending=False)[1:21][::-1],x=\"Affected Rate\",y=\"Country\/Region\",\n             title=\"Top 20 Country with Highest infection Rate according to Population\",text='Affected Rate',color_discrete_sequence=px.colors.qualitative.Set1,height=900,orientation='h')\nfig.show()","bb2f98ed":"group['Death Rate'] = np.round(((group['TotalDeaths']) \/( group['TotalCases']))*100,2)\npio.templates.default = 'plotly_dark'\ndeath_rate= group[['Country\/Region','Death Rate']]\nfig = px.bar(death_rate.sort_values('Death Rate',ascending=False)[:21][::-1],x=\"Death Rate\",y=\"Country\/Region\",\n             title=\"Top 20 Country with Highest Death Rate according to total Number of affected People\",text='Death Rate',color_discrete_sequence=px.colors.qualitative.Set1,height=900,orientation='h')\nfig.show()","9196c2a4":"group['Recovery rate'] = np.round(((group['TotalRecovered']) \/( group['TotalCases']))*100,2)\npio.templates.default = 'plotly_dark'\nrecovery_rate= group[['Country\/Region','Recovery rate']]\nfig = px.bar(recovery_rate.sort_values('Recovery rate',ascending=False)[:21][::-1],x=\"Recovery rate\",y=\"Country\/Region\",\n             title=\"Top 20 Country with Highest Recovery Rate according to total Number of affected People\",text='Recovery rate',color_discrete_sequence=px.colors.qualitative.Set1,height=900,orientation='h')\nfig.show()","4388e1e5":"fig = px.choropleth( df_group,  \n    locationmode='country names',\n    locations='Country\/Region',\n    hover_name=\"Country\/Region\",\n    color='Country\/Region',\n    hover_data = ['Confirmed','Recovered','Deaths','Active'],\n    featureidkey= 'Confirmed',\n    labels=\"Confirmed\",\n    title= \"Spread report of 'COVID19' all over the World\"\n)\nfig.show()\n","97dfc884":"grouped_usa = df_n[df_n[\"Country\/Region\"] == 'US'].reset_index()\ngrouped_usa_final = grouped_usa.groupby('Date')['Date', 'Confirmed', 'Deaths','Recovered','Active'].sum().reset_index()\n\n\ngrouped_brazil = df_n[df_n[\"Country\/Region\"] == 'Brazil'].reset_index()\ngrouped_brazil_final = grouped_brazil.groupby('Date')['Date', 'Confirmed', 'Deaths','Recovered','Active'].sum().reset_index()\n\ngrouped_india = df_n[df_n[\"Country\/Region\"] == 'India'].reset_index()\ngrouped_india_final = grouped_india.groupby('Date')['Date', 'Confirmed', 'Deaths','Recovered','Active'].sum().reset_index()\n\ngrouped_bd = df_n[df_n[\"Country\/Region\"] == 'Bangladesh'].reset_index()\ngrouped_bd_final = grouped_bd.groupby('Date')['Date', 'Confirmed', 'Deaths','Recovered','Active'].sum().reset_index()\n\ngrouped_china = df_n[df_n[\"Country\/Region\"] == 'China'].reset_index()\ngrouped_china_final = grouped_china.groupby('Date')['Date', 'Confirmed', 'Deaths','Recovered','Active'].sum().reset_index()\n","9d4a6a86":"whole = grouped_usa.groupby('Date')['Date','Confirmed','Deaths','Recovered','Active'].sum().reset_index()\nfig = make_subplots(rows=1,cols=4,column_titles = ('Confirmed','Deaths','Recovered','Active'))\n\ntrace_1 = go.Scatter(x=whole['Date'],y=whole['Confirmed'],name='Confirmed',opacity=0.9,mode='lines+markers',line_color='blue')\n\ntrace_2 = go.Scatter(x=whole['Date'],y=whole['Deaths'],name='Deaths',opacity=0.9,mode='lines+markers',line_color='red')\n\ntrace_3 = go.Scatter(x=whole['Date'],y=whole['Recovered'],name='Recovered',opacity=0.9,mode='lines+markers',line_color='gold')\n\ntrace_4 = go.Scatter(x=whole['Date'],y=whole['Active'],name='Active',opacity=0.9,mode='lines+markers',line_color='yellow')\n\n\nfig.append_trace(trace_1,1,1)\nfig.append_trace(trace_2,1,2)\nfig.append_trace(trace_3,1,3)\nfig.append_trace(trace_4,1,4)\n\nfig.update_layout(title_text=\"Spread of Corona Virus Overtime in USA\")\nfig.show()","3d7228ff":"whole = grouped_brazil.groupby('Date')['Date','Confirmed','Deaths','Recovered','Active'].sum().reset_index()\nfig = make_subplots(rows=1,cols=4,column_titles = ('Confirmed','Deaths','Recovered','Active'))\n\ntrace_1 = go.Scatter(x=whole['Date'],y=whole['Confirmed'],name='Confirmed',opacity=0.9,mode='lines+markers',line_color='blue')\n\ntrace_2 = go.Scatter(x=whole['Date'],y=whole['Deaths'],name='Deaths',opacity=0.9,mode='lines+markers',line_color='red')\n\ntrace_3 = go.Scatter(x=whole['Date'],y=whole['Recovered'],name='Recovered',opacity=0.9,mode='lines+markers',line_color='gold')\n\ntrace_4 = go.Scatter(x=whole['Date'],y=whole['Active'],name='Active',opacity=0.9,mode='lines+markers',line_color='yellow')\n\n\nfig.append_trace(trace_1,1,1)\nfig.append_trace(trace_2,1,2)\nfig.append_trace(trace_3,1,3)\nfig.append_trace(trace_4,1,4)\n\nfig.update_layout(title_text=\"Spread of Corona Virus Overtime in Brazil\")\nfig.show()\n","2d5e35e6":"whole = grouped_india.groupby('Date')['Date','Confirmed','Deaths','Recovered','Active'].sum().reset_index()\nfig = make_subplots(rows=1,cols=4,column_titles = ('Confirmed','Deaths','Recovered','Active'))\n\ntrace_1 = go.Scatter(x=whole['Date'],y=whole['Confirmed'],name='Confirmed',opacity=0.9,mode='lines+markers',line_color='blue')\n\ntrace_2 = go.Scatter(x=whole['Date'],y=whole['Deaths'],name='Deaths',opacity=0.9,mode='lines+markers',line_color='red')\n\ntrace_3 = go.Scatter(x=whole['Date'],y=whole['Recovered'],name='Recovered',opacity=0.9,mode='lines+markers',line_color='gold')\n\ntrace_4 = go.Scatter(x=whole['Date'],y=whole['Active'],name='Active',opacity=0.9,mode='lines+markers',line_color='yellow')\n\n\nfig.append_trace(trace_1,1,1)\nfig.append_trace(trace_2,1,2)\nfig.append_trace(trace_3,1,3)\nfig.append_trace(trace_4,1,4)\n\nfig.update_layout(title_text=\"Spread of Corona Virus Overtime in India\")\nfig.show()\n\nlatitude =20.593684\nlongitude = 78.96288\nworld_map = folium.Map(location=[latitude,longitude],zoom_start=3.5,tiles = 'Stamen Toner')\nfor lat,lon,Confirmed,Deaths,Recovered,name in zip(grouped_india['Lat'],grouped_india['Long'], grouped_india['Confirmed'],grouped_india['Deaths'],\n                                                   grouped_india['Recovered'], grouped_india['Country\/Region']):\n    folium.CircleMarker([lat,lon],radius=10,popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(Confirmed) + '<br>'\n                                '<strong>Recovered Cases<\/strong>: ' + str(Recovered) +'<br>'\n                                '<strong>Deaths Cases<\/strong>: ' + str(Deaths) +'<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7).add_to(world_map)\n\nworld_map\n    ","b299223d":"whole = grouped_bd.groupby('Date')['Date','Confirmed','Deaths','Recovered','Active'].sum().reset_index()\nfig = make_subplots(rows=1,cols=4,column_titles = ('Confirmed','Deaths','Recovered','Active'))\n\ntrace_1 = go.Scatter(x=whole['Date'],y=whole['Confirmed'],name='Confirmed',opacity=0.9,mode='lines+markers',line_color='blue')\n\ntrace_2 = go.Scatter(x=whole['Date'],y=whole['Deaths'],name='Deaths',opacity=0.9,mode='lines+markers',line_color='red')\n\ntrace_3 = go.Scatter(x=whole['Date'],y=whole['Recovered'],name='Recovered',opacity=0.9,mode='lines+markers',line_color='gold')\n\ntrace_4 = go.Scatter(x=whole['Date'],y=whole['Active'],name='Active',opacity=0.9,mode='lines+markers',line_color='yellow')\n\n\nfig.append_trace(trace_1,1,1)\nfig.append_trace(trace_2,1,2)\nfig.append_trace(trace_3,1,3)\nfig.append_trace(trace_4,1,4)\n\nfig.update_layout(title_text=\"Spread of Corona Virus Overtime in Bangladesh\")\nfig.show()\n","eb1dc224":"whole = grouped_china.groupby('Date')['Date','Confirmed','Deaths','Recovered','Active'].sum().reset_index()\nfig = make_subplots(rows=1,cols=4,column_titles = ('Confirmed','Deaths','Recovered','Active'))\n\ntrace_1 = go.Scatter(x=whole['Date'],y=whole['Confirmed'],name='Confirmed',opacity=0.9,mode='lines+markers',line_color='blue')\n\ntrace_2 = go.Scatter(x=whole['Date'],y=whole['Deaths'],name='Deaths',opacity=0.9,mode='lines+markers',line_color='red')\n\ntrace_3 = go.Scatter(x=whole['Date'],y=whole['Recovered'],name='Recovered',opacity=0.9,mode='lines+markers',line_color='gold')\n\ntrace_4 = go.Scatter(x=whole['Date'],y=whole['Active'],name='Active',opacity=0.9,mode='lines+markers',line_color='yellow')\n\n\nfig.append_trace(trace_1,1,1)\nfig.append_trace(trace_2,1,2)\nfig.append_trace(trace_3,1,3)\nfig.append_trace(trace_4,1,4)\n\nfig.update_layout(title_text=\"Spread of Corona Virus Overtime in China\")\nfig.show()\n\nlatitude =31.8257\nlongitude = 117.2264\nworld_map = folium.Map(location=[latitude,longitude],zoom_start=3.5,tiles = 'Stamen Toner')\nfor lat,lon,Confirmed,Deaths,Recovered,name in zip(grouped_china['Lat'],grouped_china['Long'], grouped_china['Confirmed'],grouped_china['Deaths'],\n                                                   grouped_china['Recovered'], grouped_china['Country\/Region']):\n    folium.CircleMarker([lat,lon],radius=10,popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(Confirmed) + '<br>'\n                                '<strong>Recovered Cases<\/strong>: ' + str(Recovered) +'<br>'\n                                '<strong>Deaths Cases<\/strong>: ' + str(Deaths) +'<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(world_map)\n\nworld_map\n    ","28b58b44":"sars = pd.read_csv(\"..\/input\/pandemic\/sars_2003_complete_dataset_clean.csv\")\nsars_group = sars.groupby('Country')['Number of deaths','Cumulative number of case(s)','Number recovered'].sum().reset_index()\nsars_group.head().style.background_gradient(cmap='Reds')","4fee2e17":"def plot_treemap(dataframe,variable,value):\n    fig = px.treemap(dataframe.sort_values(by=value,ascending=False).reset_index(drop=True),\n                     path=[variable],values=value,title=(\"Number of Death cases by Global Pandemic SARS \" + str(variable) + '<br>'),\n                     color_discrete_sequence = px.colors.qualitative.Set1)\n    fig.data[0].textinfo = 'label+text+value'\n    \n    fig.show()\n    \nplot_treemap(sars_group,'Country','Number of deaths')","d76f260b":"pio.templates.default = 'plotly_dark'\nsars_death_cases = sars_group[['Country','Number of deaths']]\nfig = px.bar(sars_death_cases.sort_values('Number of deaths',ascending=False)[:11][::-1],x=\"Number of deaths\",y=\"Country\",\n             title=\" Number of Death Cases in Global Pandemic SARS\",text='Number of deaths',color_discrete_sequence=px.colors.qualitative.Set1,height=900,orientation='h')\nfig.show()","610b98bb":"pio.templates.default = 'plotly_dark'\nsars_recovered_cases = sars_group[['Country','Number recovered']]\nfig = px.bar(sars_recovered_cases.sort_values('Number recovered',ascending=False)[:11][::-1],x=\"Number recovered\",y=\"Country\",\n             title=\" Number of Recovered Cases in Global Pandemic SARS\",text='Number recovered',color_discrete_sequence=px.colors.qualitative.Set1,height=900,orientation='h')\nfig.show()","fde77e1f":"fig = px.choropleth( sars_group,  \n    locationmode='country names',\n    locations='Country',\n    hover_name=\"Country\",\n    color='Country',\n    hover_data = ['Number of deaths','Cumulative number of case(s)','Number recovered'],\n    featureidkey= 'Number of deaths',\n    labels=\"Number of deaths\",\n    title= \"Spreading of 'SARS' all over the World\"\n)\nfig.show()\n","b48525d5":"ebola = pd.read_csv(\"..\/input\/pandemic\/ebola_2014_2016_clean.csv\")\nebola_group = ebola.groupby('Country')['Cumulative no. of confirmed, probable and suspected cases','Cumulative no. of confirmed, probable and suspected deaths'].sum().reset_index()\nebola_group.head().style.background_gradient(cmap='Reds')","f1aa51c4":"def plot_treemap(dataframe,variable,value):\n    fig = px.treemap(dataframe.sort_values(by=value,ascending=False).reset_index(drop=True),\n                     path=[variable],values=value,title=(\"Number of Death cases by Global Pandemic EBOLA \" + '<br>'),\n                     color_discrete_sequence = px.colors.qualitative.Set1)\n    fig.data[0].textinfo = 'label+text+value'\n    \n    fig.show()\nplot_treemap(ebola_group,'Country','Cumulative no. of confirmed, probable and suspected deaths')\npio.templates.default = 'plotly_dark'\nebola_death_cases = ebola_group[['Country','Cumulative no. of confirmed, probable and suspected deaths']]\nfig = px.bar(ebola_death_cases.sort_values('Cumulative no. of confirmed, probable and suspected deaths',ascending=False)[:7][::-1],x=\"Cumulative no. of confirmed, probable and suspected deaths\",y=\"Country\",\n             title=\" Number of Death Cases in Global Pandemic Ebola\",text='Cumulative no. of confirmed, probable and suspected deaths',color_discrete_sequence=px.colors.qualitative.Set1,height=900,orientation='h')\nfig.show()","b82d19c7":"fig = px.choropleth( ebola_group,  \n    locationmode='country names',\n    locations='Country',\n    hover_name=\"Country\",\n    color='Country',\n    hover_data = ['Cumulative no. of confirmed, probable and suspected cases','Cumulative no. of confirmed, probable and suspected deaths'],\n    featureidkey= 'Cumulative no. of confirmed, probable and suspected deaths',\n    labels=\"Cumulative no. of confirmed, probable and suspected deaths\",\n    title= \"Spread report of 'EBOLA' all over the World\"\n)\nfig.show()\n","8f9b955c":"mers = pd.read_csv(\"..\/input\/pandemic\/MARS_country_count_latest.csv\")\n\ndef plot_treemap(dataframe,variable,value):\n    fig = px.treemap(dataframe.sort_values(by=value,ascending=False).reset_index(drop=True),\n                     path=[variable],values=value,title=(\"Number of Death cases by Global Pandemic MERS \"  '<br>'),\n                     color_discrete_sequence = px.colors.qualitative.Set1)\n    fig.data[0].textinfo = 'label+text+value'\n    \n    fig.show()\nplot_treemap(mers,'Country','Confirmed')\npio.templates.default = 'plotly_dark'\nmars_confirmed_cases = mers[['Country','Confirmed']]\nfig = px.bar(mars_confirmed_cases.sort_values('Confirmed',ascending=False)[:13][::-1],x=\"Confirmed\",y=\"Country\",\n             title=\" Number of Confirmed Cases in Global Pandemic MERS\",text='Confirmed',color_discrete_sequence=px.colors.qualitative.Set1,height=900,orientation='h')\nfig.show()","b79ab0d5":"fig = px.choropleth( mers,  \n    locationmode='country names',\n    locations='Country',\n    hover_name=\"Country\",\n    color='Country',\n    hover_data = ['Confirmed'],\n    featureidkey= 'Confirmed',\n    labels=\"Confirmed\",\n    title= \"Spread report of 'MERS' all over the World\"\n)\nfig.show()\n","ba1d2c2f":"from fbprophet import Prophet\nts = df_n.groupby(\"Date\")['Date','Confirmed','Recovered'].sum().reset_index()\nts.head()","88ab9a66":"ts['ds'] = ts['Date']\nts['y'] = ts['Confirmed']\nts.drop(['Date','Confirmed'],axis=1,inplace=True)","147553a9":"model = Prophet()\nmodel.add_seasonality(name='monthly',period = 30.5,fourier_order = 5)\nmodel.fit(ts)\nfuture = model.make_future_dataframe(periods=60)\nforecast = model.predict(future)\nforecast.head(3)","f8f8bf53":"forecast[['ds','yhat','yhat_lower','yhat_upper']].tail()","fbeda87f":"plot1 = model.plot(forecast)","e06f6cae":"plot2 = model.plot_components(forecast)","115d2050":"ts2 = df_n.groupby(\"Date\")['Date','Recovered'].sum().reset_index()\nts2.head()","0f41f0c2":"ts2['ds'] = ts2['Date']\nts2['y'] = ts2['Recovered']\nts2.drop(['Date','Recovered'],axis=1,inplace=True)","194fa9b7":"model2 = Prophet()\nmodel2.add_seasonality(name='monthly',period = 30.5,fourier_order = 5)\nmodel2.fit(ts2)\nfuture = model2.make_future_dataframe(periods=60)\nforecast_recovered = model2.predict(future)\nforecast_recovered.head(3)","1b5c93fc":"forecast_recovered[['ds','yhat','yhat_lower','yhat_upper']].tail()","3bf7d4e1":"plot3 = model2.plot(forecast_recovered)","5e75327a":"plot4 = model.plot_components(forecast_recovered)","fe025d30":"> <a id='us'><b>United States of America<\/b><\/a>\n","8de4087f":"> Owww!! I think These country's are the Winner in the War of Covid19 \ud83c\udfc6","17bb2c21":"> Let's Find the top 20 Country with Highest number of Active Cases","bb12f11f":">Prophet expects the dataset to have two columns named as ds and y. ds is the date column while y is the column that we are forecasting.","57e2f661":"> <a id='inf'><b>Infection Rate According to Population<\/b><\/a>","359b4d2c":">Now let's plot the Forecast Components","df6062e2":">Now let's plot the Forecast Components","d1bcb05b":"> <b>Spreading of Corona Virus according to Date<\/b>","368a3c54":"> <a id='dr'><b>Death Rate According to total Affected People<\/b><\/a>","efb034b2":"> Let's Find out  the top 20 Country with Highest number of Confirmed Cases","6c7b4a44":"> <a id='eb'><b>EBOLA<\/b><\/a>\n","b4594e48":"> Let's Find the top 20 Country with Highest number of Recovered Cases","20c1fe5b":"> <a id='pd'><b>Other Pandemic of the World<\/b><\/a>\n","65f4d7a3":"><a id='main'><b>Table of Contents<\/b><\/a>\n- [Exploratory Data Analysis(EDA)](#eda)\n    1. [COVID19 cases all over the world](#world)\n    2. [WHO Region](#who)\n    3. [Country Specific growth of COVID19](#country)\n        - [United States of America](#us)\n        - [India](#in)\n        - [Brazil](#br)\n        - [China](#ch)\n        - [Bangladesh](#bd)\n    4. [Infection Rate](#inf)\n    5. [Death Rate](#dr)\n    6. [Recovery Rate](#re)\n    5. [Other  Pandemic](#pd)\n        - [SARS](#sr)\n        - [EBOLA](#eb)\n        - [MERS](#mr)\n","58aa1d14":"> Now Finding the infection Rate accorging to Population","0b8edd76":"> <a id='who'><b>WHO Region<\/b><\/a>","0d45b3e8":">Now let's plot our Forecast","45153e4c":"> <a id='eda'><b>Exploratory Data Analysis(EDA)<\/b><\/a>\n>> [Go back to the main page](#main)","56581174":"><h3>Now let's forecast Recovered Cases<\/h3>","226659f9":"> Spread of Covid19 all over the World","f65395bd":"> Let's Find the top 20 Country with Highest number of Death Cases","64002991":"> The COVID\u201119 pandemic, also known as the coronavirus pandemic, is an ongoing global pandemic of coronavirus disease 2019 (COVID\u201119), caused by severe acute respiratory syndrome coronavirus 2 (SARS\u2011CoV\u20112). The outbreak was first identified in Wuhan, China, in December 2019. The World Health Organization declared the outbreak a Public Health Emergency of International Concern on 30 January 2020 and a pandemic on 11 March. As of 23 July 2020, more than 15.2 million cases of COVID\u201119 have been reported in more than 188 countries and territories, resulting in more than 623,000 deaths; more than 8.66 million people have recovered","902a3019":">The next step is to prepare our model to make future predictions. This is achieved using the Prophet.make_future_dataframe method and passing the number of days we\u2019d like to predict in the future. We use the periods attribute to specify this. This also include the historical dates. We\u2019ll use these historical dates to compare the predictions with the actual values in the ds column.","2189e41b":">The blue line in the graph represents the predicted values while the black dots represents the data in our dataset & the single Blue line is our Forecast for the next two Months.So our model Predicted the Historical data  and if we compare the black dots & blue line we can see that it's almost same.","887d4151":"> <a id='world'><b>Covid19 cases all over the World<\/b><\/a>\n>> Here i'm going to find out  the top 20 country with Highest number of Confirmed ,Deaths,Recovered, Active cases,increasing rate according to population,recovery rate according to number of affected people , death rate according to number of affected people \n","994ba2d4":">The blue line in the graph represents the predicted values while the black dots represents the data in our dataset & the single Blue line is our Forecast for the next two Months.So our model Predicted the Historical data  and if we compare the black dots & blue line we can see that it's almost same.","2766ed90":"> <a id='re'><b>Recovery Rate according to Total number of affected people<\/b><\/a>","3044a9dd":"> <a id='mr'><b>MERS<\/b><\/a>\n","f700f393":"> Tree Map","8b261040":"> <a id='in'><b>India<\/b><\/a>\n","45cadb8b":"> <a id='bd'><b>Bangladesh<\/b><\/a>\n","14838608":">> <a id='sr'><b>SARS<\/b><\/a>\n","8556f104":"---\n\n<h3 style=\"text-align: center;font-size: 20px; color: gold\"; >Thanks for reading this Kernel<\/h3>\n\n---","208664b2":"><h3>Forcasting<\/h3>\n\n>>For forcasting we're gonna use FBProphet.FBProphet Implements a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.\n\n>>We are gonna Forecast the Confirmed & Recovered cases for the next 2 month's ","bd4166f1":">If we check the head for our forecast dataframe we\u2019ll notice that it has very many columns. However, we are mainly interested in ds, yhat, yhat_lower and yhat_upper. yhat is our predicted forecast, yhat_lower is the lower bound for our predictions and yhat_upper is the upper bound for our predictions.","6699681c":"><h3>Let's forcast Confirmed Cases<\/h3>","642a5197":"\n---\n\n<h1 style=\"text-align: center;font-size: 40px;\">Covid19 Analysis & Visualization <\/h1>\n\n---\n\n<center><img src=\"https:\/\/cdn.pixabay.com\/photo\/2020\/05\/15\/18\/46\/corona-5174671_960_720.jpg\"><\/center>\n\n\n\n---","1acc484b":"> <a id='country'><b>Growth of COVID19 according to Specefic country<\/b><\/a>","6c6a87fc":"> <a id='ch'><b>China<\/b><\/a>\n","0a5c4e2d":"> <a id='br'><b>Brazil<\/b><\/a>\n"}}