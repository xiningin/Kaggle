{"cell_type":{"85c1ba44":"code","7434620b":"code","752cdb1d":"code","912c87ff":"code","6a6f630c":"code","6bb45ada":"code","4f8da378":"code","fb5bc0b4":"code","b6703b10":"code","0e8fa47e":"code","e55f802c":"code","568cc3dc":"code","8ffca082":"code","fcd8f7e3":"code","9a0494f0":"code","58bce55d":"code","55b596cb":"code","84ecf3ff":"code","5ab2706d":"code","7eb3c2e8":"code","7203c163":"code","15e4de85":"code","6bbbd07b":"code","df24c9de":"code","9497811c":"code","d73e8a64":"code","08f63632":"code","9d5a5706":"code","aacb29fe":"code","70d86774":"code","ef722218":"code","f5fb83ea":"code","1d610de0":"code","e64bacfb":"code","fa52f784":"code","4495fd9b":"code","49638a2a":"code","bed931d1":"code","091572ca":"code","b932fe24":"code","ab210e45":"code","56d34b73":"code","5f06dcd8":"code","7802588c":"code","0af99522":"code","8e76e6dc":"code","3fe5a38b":"code","4ceaecf7":"code","bd4f1000":"code","0d9fb0fb":"markdown","ff31dd66":"markdown","eec69720":"markdown","de3b2bad":"markdown","f85ac78e":"markdown","ce507a92":"markdown","b772f8b1":"markdown","e5b149bc":"markdown","37cee5ea":"markdown","952594d4":"markdown","510bd4ee":"markdown","c87665b9":"markdown","2156e095":"markdown","f8c89b12":"markdown","cf55d41f":"markdown","3ac03a41":"markdown","583d3db0":"markdown","dd4d6030":"markdown","a67ef873":"markdown","24f72aa8":"markdown","71479cea":"markdown","abf85195":"markdown","c5c3e53f":"markdown","02ee354f":"markdown","77e83691":"markdown","42cc3d95":"markdown","305bb128":"markdown","e6cfb158":"markdown","e6ceff71":"markdown","68f7bd77":"markdown","cdc39fee":"markdown"},"source":{"85c1ba44":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import scatter_matrix\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport sys\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n#Disable the warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#Disabling the plotly errors\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","7434620b":"players = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/players.csv')\ngames = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/games.csv')\nplays = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/plays.csv')\nscouting = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv')","752cdb1d":"print(\"Players dataset\")\nplayers.info()\n\nprint(\"Games dataset\")\ngames.info()","912c87ff":"plays.head(3)","6a6f630c":"#Converting Feet to Inches\ntemp = players[\"height\"].str.split(\"-\", n = 1, expand = True)\ntemp.columns = ['Feet', 'Inch']\nplayers[\"height_feet\"] = pd.to_numeric(temp[\"Feet\"]) #converting string to numeric values\nplayers[\"height_inch\"] = pd.to_numeric(temp[\"Inch\"])\nprint(\"The shape of the dataset after feature engineering is : \", players.shape)\nprint(players.sample(2))","6bb45ada":"# Column - height_feet\nfor i in players[\"height_feet\"]:\n    if i > 7:\n        j = 0.0833333 * i\n        players[\"height_feet\"].replace({i : j}, inplace=True)\n        \n# Column - height_inch\nplayers[\"height_inch\"] = 0.0833333 * players[\"height_inch\"]\n#print(players.tail())\n\n#filling NA with '0'\nfor i in players[\"height_inch\"]:\n    players[\"height_inch\"] = players[\"height_inch\"].fillna(0)\n#print(players[\"height_inch\"])\n\n#bring it all together\nplayers[\"height_feet\"] = players[\"height_feet\"] + players[\"height_inch\"]\n\nprint(players[\"height_feet\"])","4f8da378":"#Replacing the position abbreviations with full format\n\nplayers[\"Position\"].replace({\"WR\": \"Wide Receiver\", \"CB\": \"Corner Back\", \"DE\": \"Defensive End\", \"OLB\": \"Outside Linebacker\",\n                           \"TE\": \"Tight End\", \"T\": \"Tackle\", \"RB\": \"Running Back\", \"G\": \"Guard\", \"DT\": \"Defensive Tackle\",\n                           \"ILB\": \"Inside Linebacker\", \"FS\": \"Free Safety\", \"SS\": \"Strong Safety\", \"C\": \"Center\", \"K\": \"Kicker\",\n                           \"P\": \"Punter\", \"NT\": \"Nose Tackle\", \"LS\": \"Long Snapper\", \"LB\": \"Linebacker\", \"DB\": \"Defensive Back\",\n                           \"MLB\" : \"Middle Linebacker\", \"FB\": \"Full Back\", \"OT\": \"Offensive Tackle\", \"QB\": \"Quarter Back\",\n                           \"OG\": \"Offensive guard\", \"S\": \"Safety\", \"HB\": \"Half Back\"}, inplace=True)\nprint(players[\"Position\"])","fb5bc0b4":"games[\"homeTeamAbbr\"].replace({\"ARI\": \"Arizona Cardinals\", \"KC\": \"Kansas City Chiefs\", \"TEN\": \"Tennessee Titans\", \"TB\": \"Tampa Bay Buccaneers\",\n                           \"SF\": \"San Francisco 49ers\", \"SEA\": \"Seattle Seahawks\", \"PIT\": \"Pittsburgh Steelers\", \"PHI\": \"Philadelphia Eagles\",\n                            \"NYJ\": \"New York Jets\", \"NYG\": \"New York Giants\", \"NO\": \"New Orleans Saints\", \"NE\": \"New England Patriots\", \n                             \"MIA\": \"Miami Dolphins\", \"ATL\": \"Atlanta Falcons\", \"LA\": \"Los Angeles Rams\", \"JAX\": \"Jacksonville Jaguars\", \n                             \"IND\": \"Indianapolis Colts\", \"BAL\": \"Baltimore Ravens\", \"BUF\": \"Buffalo Bills\", \"CAR\": \"Carolina Panthers\", \n                             \"CIN\": \"Cincinnati Bengals\", \"CLE\": \"Cleveland Browns\", \"DAL\": \"Dallas Cowboys\", \"DET\": \"Detroit Lions\", \n                             \"GB\": \"Green Bay Packers\", \"HOU\": \"Houston Texans\", \"WAS\": \"Washington Football Team\", \"DEN\": \"Denver Broncos\", \n                             \"MIN\": \"Minnesota Vikings\", \"CHI\": \"Chicago Bears\", \"LAC\": \"Los Angeles Chargers\", \"OAK\": \"Oakland Raiders\", \n                             \"LV\": \"Las Vegas Raiders\"}, inplace=True)\nprint(games[\"homeTeamAbbr\"])","b6703b10":"submit_table = go.Figure()\nheader = ['Sl_no','Features','Rankings','Remarks']\nsl_no = [1,2,3,4,5,6]\nFeatures = ['Best Team','Best Strategy','Strategies to be adopted','Team Players Ranking',\n            'Special metric','Penalty Losing Team']\nRankings = ['WAS : Washington Football Team','Punting','Return,Touchback and Muffed',\n            'Tress Way','Yet to be finalised','Las Vegas Raiders']\nRemarks = ['Washington Football Team had the best yards gained record in the seasons covered till 2020',\n           'Punting gains the maximum yards, while Kick-off comes close in next best strategy',\n          'Each strategy had multiple results based on the oponents.The most used were Return, Touchback & Muffed',\n          'Tress Way was best ranking player in terms of the yards gained in the games',\n          'More analysis is required by bringing in other NFL related datasets',\n          'Las Vegas Raiders have lost more yards due to penalties']\nsubmit_table.add_trace(go.Table(header_values=header,header_font_color='black',\n                              header_font_size=30,header_height=40,\n                              cells_values=[sl_no,Features,Rankings,Remarks],\n                              cells_font_size=15,cells_height=40,cells_align='center'))\nsubmit_table.update_layout(height = 800,width = 1000,title=\"Results Submission Table\")\nsubmit_table.show()","0e8fa47e":"from plotly.subplots import make_subplots\n\nfig = make_subplots(rows = 1, cols= 2)\n\nfig.add_trace(go.Box(x=players.height,name='Height'),row=1,col=1)\nfig.add_trace(go.Box(x=players.weight,name='Weight'),row=1,col=2)\n\nfig.update_layout(title='Players Height & Weights')","e55f802c":"team_table = go.Figure()\nheader = ['Sl_no','Seasons','Games']\nsl_no = [1,2,3]\nseasons = games.season.unique()\ngame_played = games.groupby('season')['gameId'].count().values\n\nteam_table.add_trace(go.Table(header_values=header,header_font_color='black',\n                              header_font_size=30,header_height=40,\n                              cells_values=[sl_no,seasons,game_played],\n                              cells_font_size=20,cells_height=40))\nteam_table.update_layout(height = 500,width = 800,title=\"Games & Seasons\")\nteam_table.show()","568cc3dc":"#Scores by each team in a game\nplay_result = pd.DataFrame()\nfor gameid in plays.gameId.unique():\n    temp = plays[(plays.gameId == gameid)].groupby('possessionTeam')['playResult'].mean().reset_index()\n    temp['gameId'] = gameid\n    #print(temp.shape[1])\n    play_result = play_result.append(temp)\n    \nplay_result['season'] = play_result.gameId.apply(lambda x: int(x\/1000000))\nplay_result.head()","8ffca082":"#Bar chart of the average \"yards gained\" by each team in the games in multiple seasons till date.\nteam_res = play_result.groupby(['possessionTeam','season'])['playResult'].mean().reset_index()\nteam_res.season = team_res.season.astype('category')\np_res = px.bar(data_frame=team_res,y='possessionTeam',x='playResult',color='season')\np_res.update_layout(barmode = 'stack',height = 800, width = 800, \n                    title = 'Play results of the Teams',\n                   yaxis = {'categoryorder' : 'total ascending'})\np_res.show()","fcd8f7e3":"plays['season'] = plays.gameId.apply(lambda x:int(x\/1000000))\nplay_tidy = plays.groupby(['season','specialTeamsPlayType','specialTeamsResult'])['playResult'].mean().reset_index()\nplay_type = px.bar(data_frame=play_tidy,x='playResult',y='specialTeamsPlayType',\n                   color ='specialTeamsResult',facet_col='season',facet_col_wrap=2)\nplay_type.update_layout(width = 1000,height = 1000,title = 'Play types & its results',\n                        barmode = 'group')\nplay_type.show()","9a0494f0":"play_team = plays.pivot_table(index=['specialTeamsResult','possessionTeam'],columns='specialTeamsPlayType',\n                              values='playResult',aggfunc='mean').reset_index()\nplay_team.fillna(0,inplace=True)\n\nteam_play = px.bar(data_frame=play_team,y='possessionTeam',x='Punt',color='specialTeamsResult')\nteam_play.update_layout(barmode='stack', yaxis={'categoryorder':'total ascending'},height = 1200,\n                       title = 'Yard gain distribution when using the Punt Playtype')\nteam_play.show()","58bce55d":"field_goal = px.bar(data_frame=play_team,y='possessionTeam',x='Field Goal',color='specialTeamsResult')\nfield_goal.update_layout(barmode='stack', yaxis={'categoryorder':'total ascending'},\n                        height = 1200,title = 'Yard gain distribution when using the Field Goals Type')\nfield_goal.show()","55b596cb":"Kickoff = px.bar(data_frame=play_team,y='possessionTeam',x='Kickoff',color='specialTeamsResult')\nKickoff.update_layout(barmode='stack', yaxis={'categoryorder':'total ascending'},\n                        height = 1200,title = 'Yard gain distribution when using the Kickoff Playtype')\nKickoff.show()","84ecf3ff":"player_id = players[['displayName','nflId']] #Just the name\nplays = pd.merge(left=player_id,right=plays,how='right',right_on='kickerId',left_on='nflId') #merging DF\nplays.drop('nflId',axis=1,inplace=True)#dropping duplicate Id\n#plays.info()","5ab2706d":"#Connecting the Players to the results, and selecting the top kickers whose total results were above 10,000\nplay_act = plays.pivot_table(index=['displayName','season'],columns='specialTeamsResult',\n                              values='playResult',aggfunc='mean').reset_index()\nplay_act.fillna(0,inplace=True)\nplay_act['total_result'] = play_act.iloc[:, 2:].sum(axis=1)\nplay_act.sort_values(by='total_result',ascending=False,inplace=True)\nplay_act.head(10)","7eb3c2e8":"kicker = play_act[(play_act.total_result > 200)&\n        (play_act.season == 2020)]['displayName'].values\nplays[plays.displayName.isin(kicker)].head()","7203c163":"kick_act = plays[plays.displayName.isin(kicker)]\nkick_act['season'] = kick_act.season.astype('str')\nkick_act_grp = kick_act.groupby(['displayName','season'])['playResult'].mean().reset_index()\nresult_fig = px.bar(data_frame=kick_act_grp,y='displayName',x='playResult',color='season')\nresult_fig.update_layout(yaxis={'categoryorder':'total descending'},\n                         title='Yard gain distribution by the player')\nresult_fig.show()","15e4de85":"#Lets check the penalties, which team has the most and its impact\n\nplays.penaltyYards.fillna(0,inplace=True)\n\npenalty_imp = plays.groupby('penaltyCodes')['penaltyYards'].mean().reset_index()\npenal = px.bar(data_frame=penalty_imp,x='penaltyCodes',y='penaltyYards')\npenal.update_layout(xaxis={'categoryorder' : 'total ascending'},\n                    title = 'Yard lost\/gained distribution based on penalty types')\npenal.show()","6bbbd07b":"#Seperating penalty jersey numbers by teams\nteam_jer_no = plays.penaltyJerseyNumbers.str.split(';',expand=True)\n#team_jer_no[0]","df24c9de":"#Seperating penalty Jersey number \njer_no = plays.penaltyJerseyNumbers.str.split(' ',expand=True,n=2)\njer_no.drop(2,inplace=True,axis=1)\njer_no.columns = ['Team','Id']\njer_no['penaltyCodes'] = plays.penaltyCodes\njer_no['penaltyYards'] = plays.penaltyYards\njer_no['teamjerseyCodes'] = team_jer_no[0] #taking the 1st penalty jersey code\njer_no.dropna(inplace=True)\njer_no.Id = jer_no.Id.str.split(';',expand=True)[0]\njer_no.head()","9497811c":"#Next to see, which team is being penalised\npenalty_team = jer_no.groupby('Team')['penaltyYards'].mean().reset_index()\npenal_team = px.bar(data_frame=penalty_team,x='Team',y='penaltyYards')\npenal_team.update_layout(xaxis={'categoryorder' : 'total ascending'},\n                        title = 'Yard gain\/lost distribution based on team')\npenal_team.show()","d73e8a64":"penalty_id = jer_no.groupby('teamjerseyCodes')['penaltyYards'].sum().reset_index()\npenal_id = px.bar(data_frame=penalty_id,y='teamjerseyCodes',x='penaltyYards')\npenal_id.update_layout(height = 1000,yaxis={'categoryorder' : 'total ascending'},\n                      title = 'Yard gain\/lost distribution based on player')\npenal_id.show()","08f63632":"scout_snap = scouting[~scouting.snapDetail.isna()]\nplay_snap = pd.DataFrame()\nfor gameid in scout_snap.gameId.unique():\n    play_id = scout_snap[scout_snap.gameId == gameid]['playId']\n    temp = plays[plays.playId.isin(play_id)&(plays.gameId == gameid)]\n    play_snap = play_snap.append(temp)\nscout_snap['displayName'] = play_snap['displayName']\nscout_snap['playResult'] = play_snap['playResult']\nscout_snap['season'] = play_snap['season']\nscout_snap.head()","9d5a5706":"#Recovering memory given to dataframes\nimport gc\ndel play_team,play_act,kick_act_grp,penalty_imp,penalty_team,penalty_id\ngc.collect()","aacb29fe":"snap_time = px.box(data_frame=scout_snap,x='season',y='snapTime')\nsnap_time.update_layout(title='Snap Times over seasons',height = 600)","70d86774":"hang_time = px.box(data_frame=scout_snap,x='season',y='hangTime')\nhang_time.update_layout(title='Hang Times over seasons',height = 600)","ef722218":"oper_time = px.box(data_frame=scout_snap,x='season',y='operationTime')\noper_time.update_layout(title='operation Times over seasons',height = 500)","f5fb83ea":"scout_box = px.box(data_frame=scout_snap,x='playResult',color='snapDetail')\nscout_box.show()","1d610de0":"play_box = scout_snap.groupby(['displayName','season'])['playResult'].mean().reset_index()\nplay_box.season = play_box.season.astype('category')\nscout_bar = px.bar(data_frame=play_box,x='playResult',y='displayName',animation_frame='season',\n                   category_orders={'season':['2018','2019','2020','2021']})\nscout_bar.update_layout(title='Impact of Players on the Snap results',height =1000,\n                       yaxis = {'categoryorder' : 'total ascending'})\nscout_bar.show()","e64bacfb":"gc.collect()\ndel play_box","fa52f784":"play_trac = pd.read_csv('..\/input\/nfl-transformed-data\/play_trac.csv',index_col=False)\nperf_trac = pd.read_csv('..\/input\/nfl-transformed-data\/perf_trac.csv',index_col=False)","4495fd9b":"#The tracking of the player performance with respect each gameID and season. \n#The Distance, Speed and Acceleration is collected.\nplay_trac.head()","49638a2a":"#The performance track of individual player alone is also collected. \nperf_trac.head()","bed931d1":"box_perf = go.Figure()\npx.box(data_frame=perf_trac,x='dis',color='season')","091572ca":"#Accelaration plot\npx.box(data_frame=perf_trac,x='a',color='season')","b932fe24":"#Speed plot\npx.box(data_frame=perf_trac,x='s',color='season')","ab210e45":"#Player Performance data\n#perf_trac.drop('Unnamed: 0',inplace=True,axis=1)\n#perf_trac.head()\n#play_trac.drop('Unnamed: 0',inplace=True,axis=1)\nplay_trac = pd.merge(left = players[['nflId','displayName']],\n                     left_on='nflId',right_on='nflId',right=play_trac,how='right')\nplay_trac.head()","56d34b73":"play_trac.gameId = play_trac.gameId.astype('str')\nplay_trac.season = play_trac.season.astype('category')\nperf_trac.gameId = perf_trac.gameId.astype('str')\nperf_trac.season = perf_trac.season.astype('category')","5f06dcd8":"dis_all = play_trac.groupby(['season','displayName'])['dis'].sum().reset_index()\nacc_all = play_trac.groupby(['season','displayName'])['a'].mean().reset_index()\nspd_all = play_trac.groupby(['season','displayName'])['s'].mean().reset_index()\ndis_all.head()","7802588c":"dis_all.sort_values(by='dis',ascending=False,inplace=True)\ndis_all.loc[:,['displayName','dis']].head(5)","0af99522":"spd_all.sort_values(by='s',ascending=False,inplace=True)\nspd_all.loc[:,['displayName','s']].head(5)","8e76e6dc":"acc_all.sort_values(by='a',ascending=False,inplace=True)\nacc_all.loc[:,['displayName','a']].head(5)","3fe5a38b":"#Distance covered by a particular player in multiple games\nvelo_trac = play_trac[play_trac.nflId == 39470].groupby(['gameId','season'])['s'].mean().reset_index()\nvelo_fig = px.strip(data_frame=velo_trac,x='season',y='s',color='gameId')\nvelo_fig.update_layout(title='Average speed of player',yaxis={'categoryorder':'total ascending'})\nvelo_fig.update_yaxes(type = 'log')\nvelo_fig.show()","4ceaecf7":"#Distance covered by a particular player in multiple games\nacl_trac = play_trac[play_trac.nflId == 39470].groupby(['gameId','season'])['a'].mean().reset_index()\nacl_fig = px.strip(data_frame=acl_trac,x='season',y='a',color='gameId')\nacl_fig.update_layout(title='Average acceleration of player')\nacl_fig.update_yaxes(type = 'log')\nacl_fig.show()","bd4f1000":"#Distance covered by a particular player in multiple games\ndis_trac = play_trac[play_trac.nflId == 39470].groupby(['gameId','season'])['dis'].sum().reset_index()\ndis_fig = px.strip(data_frame=dis_trac,x='season',y='dis',color='gameId')\ndis_fig.update_layout(title='Distance run by NFLId player',yaxis={'categoryorder':'total ascending'})\ndis_fig.update_yaxes(type = 'log')\ndis_fig.show()","0d9fb0fb":"### Which teams are leading in the various play types?\nThis chart shows how the teams were implementing the startegies, and having the overall advantage.","ff31dd66":"### Which player had the best yards gained in the seasons till date. \nThis results include the 2021 season also.","eec69720":"### How did the snap turned out for each play? ","de3b2bad":"### Which type penalty has lead to yards gained or lost","f85ac78e":"\nBefore we start searching the haystack, lets decide what to search for.\n\n* Highest average Distance covered by the player in a Game\n\n* Highest Average speed and acceleration of the player in a Game\n\n* Number of events in a fixed time duration, say 1 minute(not calculated)\n\n* Average distance travelled between events(not calculated)\n\n* Does the Distance, Speed and Acceleration change, depending on being in Home or Away?(not calculated)\n\n* Do the players and their performance remain same across seasons? ","ce507a92":"How the above results have been concluded is shared below. Only the tables, and charts that matter have been kept for viewing. Other charts are hidden to meet the competition guidelines.","b772f8b1":"### Which strategy has the highest yards gained for the teams in average?","e5b149bc":"### How did the players impact the Yards gained per snap in each season","37cee5ea":"trac2018 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2018.csv')\ntrac2019 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2019.csv')\ntrac2020 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2020.csv')","952594d4":"#bringing all the dataset into one variable\nprint(trac2018.shape[0],trac2019.shape[0],trac2020.shape[0])\ntrac = trac2018.append(trac2019)\ntrac = trac.append(trac2020)\nprint(trac.shape)","510bd4ee":"from dateutil import parser\ndef time_parser(session):\n    x = parser.parse(session)\n    return pd.Timestamp(x)\n    ","c87665b9":"### Next to see, who was the reason behind the penalty yards?","2156e095":"#Analyse for a single player across the entire 3 seasons, then use that pipeline to work on the remaing \n#players to get the necessary output from the helper function\n\n#Helper Function to get the NFL_Id related data\ndef performance (ref_id):\n    trac_perf = trac[trac.gameId == ref_id]\n    trac_perf.loc[:,'time'] = trac_perf.time.apply(lambda x: time_parser(x))\n    trac_perf.set_index('time',inplace=True)\n    agg_rules = {'x':'last', 'y':'last', 's':'max', 'a':'max', 'dis':'sum',\n                 'event':'unique', 'nflId':'last','displayName':'last'}\n    grouper = pd.Grouper(freq='60S')\n    trac_min = trac_perf.groupby([grouper,'nflId']).agg(agg_rules)\n    trac_min.drop('nflId',axis=1,inplace=True)\n    trac_min.reset_index(inplace=True)\n    trac_min['event_count'] = trac_min.event.apply(lambda x:len(x))\n    agg_rul2 = {'s':'max', 'a':'max', 'dis':'sum','event_count':'sum'}\n    trac_agg = trac_min.groupby('nflId')['dis','s','a','event_count'].agg(agg_rul2).reset_index()\n    trac_agg['gameId'] = ref_id\n    trac_agg['season'] = int(ref_id\/1000000)\n    return trac_agg","f8c89b12":"* Distance moved the entire game by the player\n* Average speed and speed distribution of the player\n* Time & Distance Interval between the events\n* Yards gained or lost as the play result\n* Variation of the above parameters from one game to other\n* Variation of the above parameters over multiple seasons\n","cf55d41f":"### Lets get some facts about these collosal datasets, before we delve deeper for insights","3ac03a41":"#Helper Function to get the play_Id related data\ndef play_perform(ref_id):\n    trac_perf = trac[trac.gameId == ref_id]\n    trac_perf.loc[:,'time'] = trac_perf.time.apply(lambda x: time_parser(x))\n    trac_perf.set_index('time',inplace=True)\n    agg_rules = {'x':'last', 'y':'last', 's':'max', 'a':'max', 'dis':'sum',\n                 'event':'unique', 'displayName':'last','playId':'unique'}\n    grouper = pd.Grouper(freq='60S')\n    trac_min = trac_perf.groupby([grouper,'playId','nflId']).agg(agg_rules)\n    trac_min.drop('playId',axis=1,inplace=True)\n    trac_min.reset_index(inplace=True)\n    trac_min['event_count'] = trac_min.event.apply(lambda x:len(x))\n    agg_rul2 = {'s':'max', 'a':'max', 'dis':'sum','event_count':'sum'}\n    play_agg = trac_min.groupby(['playId','nflId'])['dis','s','a','event_count','nflId'].agg(agg_rul2).reset_index()\n    play_agg['gameId'] = ref_id\n    play_agg['season'] = int(ref_id\/1000000)\n    return play_agg","583d3db0":"#### The entire code can create condensed version of the tracking file\nperf_trac = pd.DataFrame()\n\nplay_trac = pd.DataFrame()\n\nfor reference in trac.gameId.unique():\n\n    print('Processing {}'.format(reference))\n    \n    temp_id = performance(reference)\n    \n    temp_play = play_perform(reference)\n    \n    print('completed {}'.format(reference))\n    \n    perf_trac = perf_trac.append(temp_id)\n    \n    play_trac = play_trac.append(temp_play)\n    \n#### The above code takes more than 1.5 hours to complete, due to multiple groupby operations on huge data \n\nSo I have ran the code, created the csv file. Below ","dd4d6030":"### Which player has gained most yards in average every season?","a67ef873":"### Couple of insights\n\n* The 2020 season has lesser games covered and even lesser players\n\n* Datapoints in 2020 season is also lesser per player","24f72aa8":"#Thanks to @Sanjay V for the following cleanup codes, and additional data","71479cea":"### Objective of this Competition\n\nDevelopment of these new methods to find the additional stats for special teams plays. \n\nThe effort put into finding the method can be adopted by the NFL for on air distribution, and it will help in improving America's most popular sports league.\n\nWhere to start? Competition evaluation metric is comprehensive, with opening for creativity.\n\n* Quantify special teams strategy. Which strategies yield the best results? What are other strategies that could be adopted?\n\n* Rank special teams players. How do they stack up with respect to one another?\n\n* Create a new special teams metric. \n\nBefore embarking on the new, check what exists already....\nhttps:\/\/nextgenstats.nfl.com\/glossary","abf85195":"### End of the Notebook.... The following markdown cells are helper functions, written for collecting the player tracking datasets","c5c3e53f":"I am loading the same CSV files, to continue the visualisation","02ee354f":"### How did the snapDetail impact the yards gained?\nThe spread of the play result for the \"OK\" Snaps always dont gain yards. There is a probability of yards being lost even with good snap","77e83691":"### Which team has the highest yards gained?","42cc3d95":"#Saving memory from the RAM\ngc.collect()\ndel trac2018,trac2019,trac2020","305bb128":"### How is the track record of the players on the field? \n\nThere are 3 tracking datasets from 2018 to 2020 provided to us for analysis\n\nAll three datasets have the same number of columns, so essentially, all the parameters can be created as \na time-series over the 3 seasons. Even to predict, what to expect from each players in the coming season. \nThe time series data provided was cleaned using the helper functions, and the below datasets were created. ","e6cfb158":"### Which teams had the most Penalty Yard","e6ceff71":"#Attaching seasons to the data\ntrac['season'] = trac.gameId.apply(lambda x: int(x\/1000000))","68f7bd77":"## The players in the game types, and their performance","cdc39fee":"trac_fig = make_subplots(rows=3,cols=1,shared_xaxes=True,vertical_spacing=0.03,\n                         specs=[[{\"type\": \"table\"}],[{\"type\": \"table\"}],[{\"type\": \"table\"}]])\nheader = ['Sl_no','Features','values']\nsl_no = [1,2,3]\nFeatures = ['Games Covered','Players Covered','Data points per player']\n\ndef data_point(season):\n    game_covered = len(trac[trac.season == season].gameId.unique())\n    id_covered = len(trac[trac.season == season].nflId.unique())\n    data_points = int(trac[trac.season == season].shape[0]\/id_covered)\n    return game_covered, id_covered, data_points\n\nvalue_list = []\nfor season in trac.season.unique():\n    value_list.append(data_point(season))\n\ntrac_fig.add_trace(go.Table(header_values=header,header_height=40,header_font_size=24,\n                            cells_values=[sl_no,Features,value_list[0]],cells_font_size=18),row=1,col=1)\ntrac_fig.add_trace(go.Table(header_values=header,header_height=40,header_font_size=24,\n                            cells_values=[sl_no,Features,value_list[1]],cells_font_size=18),row=2,col=1)\ntrac_fig.add_trace(go.Table(header_values=header,header_height=40,header_font_size=24,\n                            cells_values=[sl_no,Features,value_list[2]],cells_font_size=18),row=3,col=1)\ntrac_fig.update_layout(height = 1000,width = 800,title=\"Games, players & data_points\")\ntrac_fig.show()"}}