{"cell_type":{"16ee3d9f":"code","b05de8fc":"code","fc2875d0":"code","656d6e63":"code","b1b66091":"markdown","f8d9d9f5":"markdown","d07dfcf1":"markdown"},"source":{"16ee3d9f":"from sklearn.datasets.samples_generator import make_blobs\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets","b05de8fc":"fig = plt.figure()\nX, y = make_blobs(n_samples=1200, centers=4,\n                  random_state=0, cluster_std=0.60)\n\nplt.scatter(X[:, 0], X[:, 1], s=50)\nplt.show()","fc2875d0":"from sklearn.cluster import KMeans\nest = KMeans(4)  # 4 clusters\nest.fit(X)\ny_kmeans = est.predict(X)\nplt.scatter(X[:, 0], X[:, 1], c=y_kmeans, s=50, cmap='rainbow')\nplt.show()","656d6e63":"x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\ny_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, 0.2), np.arange(y_min, y_max, 0.2))\n\n# Obtain labels for each point in mesh. Use last trained model.\nZ = est.predict(np.c_[xx.ravel(), yy.ravel()])\n\n# Put the result into a color plot\nZ = Z.reshape(xx.shape)\n\nplt.clf()\nplt.imshow(Z, interpolation='nearest',\n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap=plt.cm.Paired,\n           aspect='auto', origin='lower')\n\nplt.scatter(X[:, 0], X[:, 1], c=y_kmeans)\nplt.show()","b1b66091":"## plot decision boundaries","f8d9d9f5":"# Simple clustering","d07dfcf1":"# Issues with data"}}