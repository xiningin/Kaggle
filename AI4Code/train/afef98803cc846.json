{"cell_type":{"1c0954e3":"code","e287ee11":"code","ef6bc8a1":"code","81553eda":"code","d860473c":"code","7761b039":"code","068fd476":"code","ad318c7b":"code","732b5b07":"code","bd9e047b":"code","0e9c1a8c":"code","d9faa86c":"code","a59311b8":"code","85cc1a27":"code","61539a4f":"code","b74e6bf2":"code","fd768024":"code","230bbf44":"code","02c3ecbe":"code","6e2bd09c":"markdown"},"source":{"1c0954e3":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\nfrom dateutil.relativedelta import relativedelta\nfrom sklearn.decomposition import PCA\nfrom mpl_toolkits.mplot3d import Axes3D","e287ee11":"df = pd.read_csv('..\/input\/train_electricity.csv')\ntest_df = pd.read_csv('..\/input\/test_electricity.csv')","ef6bc8a1":"print(\"Dataset has\", len(df), \"entries.\")\n\nprint(f\"\\n\\t{'Column':20s} | {'Type':8s} | {'Min':12s} | {'Max':12s}\\n\")\nfor col_name in df.columns:\n    col = df[col_name]\n    print(f\"\\t{col_name:20s} | {str(col.dtype):8s} | {col.min():12.1f} | {col.max():12.1f}\")","81553eda":"def add_datetime_features(df):\n    features = [\"Year\", \"Week\", \"Day\", \"Dayofyear\", \"Month\", \"Dayofweek\",\n                \"Is_year_end\", \"Is_year_start\", \"Is_month_end\", \"Is_month_start\",\n                \"Hour\", \"Minute\", \"Quarter\"]\n    one_hot_features = [\"Month\", \"Dayofweek\", \"Quarter\"]\n\n    datetime = pd.to_datetime(df.Date * (10 ** 9))\n\n    df['Datetime'] = datetime  # <-- We won't use this for training, but we'll remove it later\n\n    for feature in features:\n        new_column = getattr(datetime.dt, feature.lower())\n        if feature in one_hot_features:\n            df = pd.concat([df, pd.get_dummies(new_column, prefix=feature)], axis=1)\n        else:\n            df[feature] = new_column\n            \n    return df\n\ndf = add_datetime_features(df)\n\nprint(f\"\\n\\t{'Column':20s} | {'Type':8s} | {'Min':12s} | {'Max':12s}\\n\")\nfor col_name in df.columns:\n    col = df[col_name]\n    print(f\"\\t{col_name:20s} | {str(col.dtype):8s} | {col.min():12.1f} | {col.max():12.1f}\")","d860473c":"test_df = add_datetime_features(test_df)\nprint(df.columns)\nprint(test_df.columns)","7761b039":"#first run the notebook without running this cell. Observe the outliers than come back to this cell and re-run the code\n\ndef remove_outliers(df):\n    df = df.loc[np.invert(df['Coal_MW']>4500) | np.invert(df['Coal_MW']<300) , :]\n    df = df.loc[np.invert(df['Gas_MW']<30), :]\n    df = df.loc[np.invert(df['Nuclear_MW']<400), :]\n    df = df.loc[np.invert(df['Biomass_MW']>80), :]\n    df = df.loc[np.invert(df['Production_MW']<3000), :]\n    df = df.loc[np.invert(df['Consumption_MW']>11000) | np.invert(df['Consumption_MW']<2000) , :]\n    return df\n\ndf = remove_outliers(df)","068fd476":"# # plot consumption (no test set consumption available)\nfig, axs = plt.subplots(1, 1, figsize=(15, 5))\naxs.plot(df['Datetime'], df['Consumption_MW'], color='royalblue')\naxs.set_xlabel('Date')\naxs.set_ylabel('Consumption_MW')\nplt.show()","ad318c7b":"# plot consumption (no test set consumption available) - 2017 only \nfig, axs = plt.subplots(1, 1, figsize=(15, 5))\naxs.plot(df.loc[df['Year'] == 2017, 'Datetime'],\n         df.loc[df['Year'] == 2017, 'Consumption_MW'], color='royalblue')\naxs.set_xlabel('Date')\naxs.set_ylabel('Consumption_MW')\nplt.show()","732b5b07":"# plot consumption (no test set consumption available) - 2017 only \nfig, axs = plt.subplots(1, 1, figsize=(15, 5))\naxs.plot(df.loc[(df['Year'] == 2017).values & (df['Month_1'] == 1).values, 'Datetime'],\n         df.loc[(df['Year'] == 2017).values & (df['Month_1'] == 1).values, 'Consumption_MW'], color='royalblue')\naxs.set_xlabel('Date')\naxs.set_ylabel('Consumption_MW')\nplt.show()","bd9e047b":"# plot productions\nproduction_list = ['Coal_MW', 'Gas_MW', 'Hidroelectric_MW', 'Nuclear_MW',\n                   'Wind_MW', 'Solar_MW', 'Biomass_MW', 'Production_MW']\n\ni = 0\nfig, axs = plt.subplots(len(production_list), 1, figsize=(15, 5*len(production_list)))\nfor production in production_list:\n    axs[i].plot(df['Datetime'], df[production], color='royalblue')\n    axs[i].set_xlabel('Date')\n    axs[i].set_ylabel(production)\n    axs[i].plot(test_df['Datetime'], test_df[production], color='orangered')\n    i = i+1\n    \nplt.show()","0e9c1a8c":"# plot sum of all the productions - Production_MW\nfig, axs = plt.subplots(1, 1, figsize=(15, 5))\naxs.plot(df['Datetime'], df['Coal_MW']+df['Gas_MW']+df['Hidroelectric_MW']+df['Nuclear_MW']+df['Wind_MW']+\n         df['Solar_MW']+df['Biomass_MW']-df['Production_MW'], color='royalblue')\naxs.set_xlabel('Date')\naxs.set_ylabel('sum productions - Production_MW')\naxs.plot(test_df['Datetime'], test_df['Coal_MW']+test_df['Gas_MW']+test_df['Hidroelectric_MW']+test_df['Nuclear_MW']+\n         test_df['Wind_MW']+test_df['Solar_MW']+test_df['Biomass_MW']-test_df['Production_MW'], color='orangered')\n\nplt.show()","d9faa86c":"# plot Production_MW vs Consumption_MW (no test set consumption available)\nfig, axs = plt.subplots(1, 1, figsize=(10, 10))\naxs.plot(df['Production_MW'], df['Consumption_MW'], '.', color='royalblue')\naxs.set_xlabel('Production_MW')\naxs.set_ylabel('Consumption_MW')\naxs.set_xlim(3000, 12000)\naxs.set_ylim(3000, 12000)\nplt.show()","a59311b8":"# plot Production_MW vs Consumption_MW (no test set consumption available)\nfig, axs = plt.subplots(1, 1, figsize=(10, 10))\naxs = sns.kdeplot(df['Production_MW'], df['Consumption_MW'], cmap=\"Blues\", shade=True, cbar=True)\naxs.set_xlabel('Production_MW')\naxs.set_ylabel('Consumption_MW')\naxs.set_xlim(3000, 12000)\naxs.set_ylim(3000, 12000)\nplt.show()","85cc1a27":"# check static distribution of each variable (principal diagonal)\n# and eventual correlations between each couple of variables (out of the principal)\n\nsns.pairplot(df[['Consumption_MW', 'Coal_MW', 'Gas_MW', 'Hidroelectric_MW',\n                 'Nuclear_MW', 'Wind_MW', 'Solar_MW', 'Biomass_MW', 'Production_MW']])","61539a4f":"fig, axs = plt.subplots(1, 1, figsize=(15, 5))\n\naxs = sns.violinplot(x=(df[['Month_1']].values[:,0]*1+\n                        df[['Month_2']].values[:,0]*2+\n                        df[['Month_3']].values[:,0]*3+\n                        df[['Month_4']].values[:,0]*4+\n                        df[['Month_5']].values[:,0]*5+\n                        df[['Month_6']].values[:,0]*6+\n                        df[['Month_7']].values[:,0]*7+\n                        df[['Month_8']].values[:,0]*8+\n                        df[['Month_9']].values[:,0]*9+\n                        df[['Month_10']].values[:,0]*10+\n                        df[['Month_11']].values[:,0]*11+\n                        df[['Month_12']].values[:,0]*12),\n                     y=df[['Consumption_MW']].values[:,0], color='royalblue')\naxs.set_xlabel('Month')\naxs.set_ylabel('Consumption_MW')\naxs.set_xticks(range(0,12))\naxs.set_xticklabels(['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'])\n\nplt.show()","b74e6bf2":"fig, axs = plt.subplots(1, 1, figsize=(15, 5))\n\naxs = sns.violinplot(x=(df[['Dayofweek_0']].values[:,0]*1+\n                        df[['Dayofweek_1']].values[:,0]*2+\n                        df[['Dayofweek_2']].values[:,0]*3+\n                        df[['Dayofweek_3']].values[:,0]*4+\n                        df[['Dayofweek_4']].values[:,0]*5+\n                        df[['Dayofweek_5']].values[:,0]*6+\n                        df[['Dayofweek_6']].values[:,0]*7),\n                     y=df[['Consumption_MW']].values[:,0], color='royalblue')\naxs.set_xlabel('Day of the week')\naxs.set_ylabel('Consumption_MW')\naxs.set_xticks(range(0,7))\naxs.set_xticklabels(['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'])\n\nplt.show()","fd768024":"pca = PCA(n_components=10)\nprincipalComponents = pca.fit_transform(df.drop(columns=['Date', 'Consumption_MW', 'Datetime']).values)\n\nfig, axs = plt.subplots(1, 1, figsize=(8, 4))\naxs.bar(np.arange(pca.explained_variance_ratio_.shape[0])+1, np.cumsum(pca.explained_variance_ratio_))\naxs.set_xlabel('principal components')\naxs.set_ylabel('cumulated explained variance ratio')\naxs.set_xticks(list(range(1, pca.explained_variance_ratio_.shape[0]+1)))\nplt.show()","230bbf44":"pca = PCA(n_components=2)\nprincipalComponents = pca.fit_transform(df.drop(columns=['Date', 'Consumption_MW', 'Datetime']).values)\n\nfig, axs = plt.subplots(1, 1, figsize=(9, 7))\ncb = axs.scatter(principalComponents[:, 0], principalComponents[:, 1], c=df[['Consumption_MW']].values[:,0], cmap='jet')\naxs.set_xlabel('pc 1')\naxs.set_ylabel('pc 2')\nplt.colorbar(cb)\nplt.show()","02c3ecbe":"pca = PCA(n_components=3)\nprincipalComponents = pca.fit_transform(df.drop(columns=['Date', 'Consumption_MW', 'Datetime']).values)\n\nfig = plt.figure(figsize=(13, 10))\nax = fig.add_subplot(111, projection='3d')\ncb = ax.scatter(principalComponents[:, 0], principalComponents[:, 1], principalComponents[:, 2],\n                c=df[['Consumption_MW']].values[:,0], cmap='jet', alpha=0.2)\nax.set_xlabel('pc 1')\nax.set_ylabel('pc 2')\nax.set_zlabel('pc 3')\nplt.colorbar(cb)\nplt.show()","6e2bd09c":"# Visualization Task\n\n### Team members: Stefano Barindelli, Matteo Sangiorgio. Task: Prediction"}}