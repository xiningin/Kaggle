{"cell_type":{"923071ef":"code","9cb35158":"code","a67e618c":"code","89cc86af":"code","a4966fc6":"code","19bed525":"code","d6fb375f":"code","bc17335b":"code","147247a5":"markdown","da4f1ddb":"markdown","59a6bc4c":"markdown","54778dd2":"markdown"},"source":{"923071ef":"from bs4 import BeautifulSoup as soup\nimport requests\nimport re\nimport pandas as pd\nimport numpy as np\nimport time, os, gc\n# from textblob import TextBlob","9cb35158":"movie_info = {}\nmovie_info['movie_title'] = []\nmovie_info['genre'] = []\nmovie_info['director'] = []\nmovie_info['cast'] = []\n\ncounter = 0","a67e618c":"def get_movies(url):\n    '''\n    Inputs:\n        url: link to the webpage.\n    \n    Returns:\n        movies: returns list of movies div tags.\n        next_: returns link of the next page to scrape.\n        \n    Credit: @ankitkalauni\n    '''\n    time.sleep(0.01)\n    text = requests.get(url)\n    text = text.text\n    file = soup(text, 'html.parser')\n\n    block = file.find('div', class_ = 'lister-list') #finding the lister-list class\n    movies = block.find_all('div', class_ = 'lister-item-content') #list of all the movies content\n\n    next_ = file.find('div', class_ = 'desc') #refrence for next page\n    try:\n        next_ = \"https:\/\/www.imdb.com\/\" + next_.find('a',class_ = 'lister-page-next next-page')['href'] #next page link\n        if counter == 3000: #notebook runs out of memory\n            print(f\"{url}\\nis the last link that ran successfully.\")\n            next_ = None\n    except:\n        print(url)\n        next_ = None\n    return movies, next_","89cc86af":"import time\nimport os\n\ndef loop_moives(movies, next_page):\n    '''\n    Inputs:\n        movies: list of movies to traverse the child's siblings content.\n        next_page: link to the next page, if None the scraping will stop.\n    \n    Returns:\n        next_page: returns the link to the next page to scrape, if None scrape will stops.\n        \n    Credit: @ankitkalauni\n    '''\n    for movie in movies:\n\n        ##==================================================================\n        try:\n            movie_name = movie.select('a[href^=\"\/title\/\"]')[0].string #movie title\n\n        except:\n            movie_name = np.nan\n\n        ##==================================================================\n        try:\n            genre = movie.find('p', class_ = 'text-muted')\n            genre = genre.find('span', class_ = 'genre').string.strip() #genre list\n        except:\n            genre = np.nan\n\n        #==================================================================\n        try:\n            directors = movie.find('p', class_ = '')\n            directors = str(directors).split('Stars')[0]\n            directors = soup(directors, 'html.parser')\n            directors = directors.select('a[href^=\"\/name\/\"]') \n\n            all_directors = \"\"\n            for director in directors:\n                all_directors += director.string\n                all_directors += ', '\n            \n            all_directors = all_directors[:-2] #director name\n        except:\n            all_directors = np.nan\n\n        ##==================================================================\n        try:\n            casts = movie.find('p', class_ = '')\n            casts = str(casts).split('Stars')[1]\n            casts = soup(casts, 'html.parser')\n            casts = casts.select('a[href^=\"\/name\/\"]') \n            \n            \n            all_cast = \"\"\n            for cast in casts:\n                all_cast += cast.string\n                all_cast += ', '\n            \n            all_cast = all_cast[:-2] #all cast names\n        except:\n            all_cast = np.nan\n\n        ##==================================================================\n\n        movie_info['movie_title'].append(movie_name)\n        movie_info['genre'].append(genre)\n        movie_info['director'].append(all_directors)\n        movie_info['cast'].append(all_cast)\n        \n    print(f'\\r Done with Page {counter}', end = ' ')\n    \n    gc.collect()\n    \n    return next_page","a4966fc6":"%%time\nstart_year = 1990\nend_year = 1998\n\n\n# first_link = \"https:\/\/www.imdb.com\/search\/title\/?year=2021&title_type=feature&\" #top hollywood movies 2021 version 5\n# first_link = \"https:\/\/www.imdb.com\/search\/title\/?country_of_origin=IN\" #140k Indian Movies version 9\n\nmovies_year = [*range(start_year,end_year,1)]\n\nfor year in movies_year:\n    first_link = f\"https:\/\/www.imdb.com\/search\/title\/?year={str(year)}&title_type=feature&lang=EN\" #Featured Movies from range(2010 - 2020) Version 10 and 11\n\n# first_link = f\"https:\/\/www.imdb.com\/search\/title\/?year=1999000&title_type=feature&\" #All Featured Movies list ordered by popularity 3000 movies limit at each run\n    print(f'Started scraping movies of year {year}')\n    while first_link:\n        movies_list, next_page = get_movies(first_link)\n        first_link = loop_moives(movies_list, next_page)\n        if next_page == None:\n            break\n        counter +=1","19bed525":"movies = pd.DataFrame.from_dict(movie_info)\nprint(movies.shape)\n\nmovies.to_csv(f'Movies_{str(start_year)}_{str(end_year - 1)}.csv', index=False)","d6fb375f":"movies.isnull().sum()","bc17335b":"movies","147247a5":"![](https:\/\/miro.medium.com\/max\/1400\/1*1QcqrOoDE1rKa0NTp1iEtw.png)\n\n<a href = \"https:\/\/github.com\/Ankitkalauni\/Movie-Recommendation-System\"><center>IMDB Website Web Scraping for College Project<\/center><\/a>","da4f1ddb":"![](https:\/\/miro.medium.com\/max\/875\/1*VWezDbLoABPoRo1q8_ACrQ.png)","59a6bc4c":"## Version Control:\nv5 -> 2021 HollyWood Movies (2.2k)\n\nv8 -> All Indian\/Bollywood Movies (140k)\n\nv9 -> Featured Movies from range(2010 - 2020)\n\nv10 -> Featured Movies from range(1999 - 2009)\n\nv11 -> All Featured Movies Orderd by Popularity (3000 Movies Memory Limit) - <mark>FAILED<\/mark>\n\nv12 -> Featured Movies from range(1990 - 1998)\n\nv13 -> Featured Movies from range(1980 - 1989)\n\nv14 -> Rerun v12 Chinese language -> Featured Movies from range(1990 - 1998)\n\nv15 -> Rerun v14 Chinese language -> Featured Movies from range(1990 - 1998)","54778dd2":"## to learn webscraping using BS4:\n\n1. [Web Scraping Cheat Sheet (2021), Python for Web Scraping](https:\/\/medium.com\/geekculture\/web-scraping-cheat-sheet-2021-python-for-web-scraping-cad1540ce21c)\n\n2. [Beautiful Soup Documentation](https:\/\/www.crummy.com\/software\/BeautifulSoup\/bs4\/doc\/)\n\n3. [StackOverflow](https:\/\/stackoverflow.com\/)\n\n4. [Beautiful Soup 4 Tutorial - Tech with Tim](https:\/\/www.youtube.com\/watch?v=gRLHr664tXA&list=PLzMcBGfZo4-lSq2IDrA6vpZEV92AmQfJK)"}}