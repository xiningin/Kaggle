{"cell_type":{"f82a2bcd":"code","9216959e":"code","2bc9c527":"code","70cf1749":"code","b55ae0c8":"code","8a5ca15c":"code","56a2a99f":"code","635c9a59":"code","631f7913":"code","cd817772":"code","8a38edd6":"code","28ed69e9":"code","b1f20961":"code","2d02aa22":"markdown","dbfb78e9":"markdown"},"source":{"f82a2bcd":"# warnings\u3092\u7121\u8996\u3059\u308b\nimport warnings\nwarnings.filterwarnings('ignore')","9216959e":"import numpy as np\nimport pandas as pd","2bc9c527":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')","70cf1749":"import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport japanize_matplotlib\n\n# \u6587\u5b57\u306e\u30b5\u30a4\u30ba\nplt.rcParams[\"font.size\"] = 18\n# \u30b5\u30a4\u30ba\u306e\u8a2d\u5b9a\nplt.rcParams['figure.figsize'] = (8.0, 6.0)","b55ae0c8":"sns.boxplot(x='Pclass', y='Age', data=df_train)\nplt.xticks([0.0,1.0,2.0], ['1st','2nd','3rd'])\nplt.title('\u30c1\u30b1\u30c3\u30c8\u30af\u30e9\u30b9\u3054\u3068\u306e\u5e74\u9f62\u306e\u7bb1\u3072\u3052\u56f3')\nplt.xlabel('Pclass(\u30c1\u30b1\u30c3\u30c8\u30af\u30e9\u30b9)')\nplt.ylabel('Age(\u5e74\u9f62)')","8a5ca15c":"# Pclass\u3054\u3068\u306bAge\u306e\u5e73\u5747\u3092\u7b97\u51fa\ndf_train.groupby('Pclass').mean()['Age'] ","56a2a99f":"# Age\u304cnull\u306e\u5834\u5408\u306b\u3001Pclass\u306b\u5fdc\u3058\u3066Age\u306b\u4ee3\u5165\u3059\u308b\u95a2\u6570\ndef impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):        \n        if Pclass == 1:\n            return 39\n        elif Pclass == 2:\n            return 30\n        else:\n            return 25    \n    else:\n        return Age\n\n# Embarked\u306e\u88dc\u5b8c\ndf_train.loc[df_train['PassengerId'].isin([62, 830]), 'Embarked'] = 'C'\n\n# Fare\u306e\u88dc\u5b8c\ndf_test.loc[df_test['PassengerId'] == 1044, 'Fare'] = 13.675550\n\ndata = [df_train, df_test]\nfor df in data:\n    # Age\u306e\u88dc\u5b8c\n    df['Age'] = df[['Age','Pclass']].apply(impute_age, axis = 1) \n\n    # \u6027\u5225\u306e\u5909\u63db\n    df['Sex'] = df['Sex'].map({\"male\": 0, \"female\": 1})\n        \n    # Embarked\n    df['Embarked'] = df['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n    ","635c9a59":"df_train.drop(['Name', 'Cabin', 'Ticket'], axis=1, inplace=True)\ndf_test.drop(['Name', 'Cabin', 'Ticket'], axis=1, inplace=True)","631f7913":"X_train = df_train.drop([\"PassengerId\", \"Survived\"], axis=1) # \u4e0d\u8981\u306a\u5217\u3092\u524a\u9664\nY_train = df_train['Survived'] # Y_train\u306f\u3001df_train\u306eSurvived\u5217\nX_test  = df_test.drop('PassengerId', axis=1).copy()","cd817772":"from sklearn.ensemble import RandomForestClassifier","8a38edd6":"# \u5b66\u7fd2\u3068\u4e88\u6e2c\u3092\u884c\u3046\nforest = RandomForestClassifier(n_estimators=10, random_state=1)\nforest.fit(X_train, Y_train)\nY_prediction = forest.predict(X_test)\nsubmission = pd.DataFrame({\n        'PassengerId': df_test['PassengerId'],\n        'Survived': Y_prediction\n    })\nsubmission.to_csv('submission.csv', index=False)\n","28ed69e9":"forest.feature_importances_","b1f20961":"for i,k in zip(X_train.columns,forest.feature_importances_):\n    print(i,round(k,4))","2d02aa22":"## 5.3.1 \u5e74\u9f62\u306e\u88dc\u5b8c\u65b9\u6cd5\u3092\u5909\u66f4\u3059\u308b","dbfb78e9":"# 5.3 \u30e2\u30c7\u30eb\u306e\u6539\u826f"}}