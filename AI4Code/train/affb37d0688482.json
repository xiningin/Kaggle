{"cell_type":{"8a716e1e":"code","e4505d92":"code","8e6be41a":"code","9717048a":"code","40374acb":"code","820da75c":"code","a3a58347":"code","ccb3d007":"code","4567fe59":"code","efb47e28":"code","cc07be63":"code","0f642ef9":"code","5f273dcf":"code","0b0f6bf2":"code","50b26d40":"code","c75a5d62":"code","beade83d":"code","250cd2c9":"code","0cecbaa9":"code","cabf354d":"code","de07b498":"code","75a54c70":"code","068ccd4d":"code","392eef45":"code","baf04183":"code","5e52d573":"code","6bbf08c9":"code","300579a7":"code","f4313b3d":"code","8fabed7c":"code","8c61305f":"code","6354efb8":"code","e95f7e5b":"code","9c2e66a8":"code","46410222":"code","d12d798c":"code","3016d942":"code","1c034fbd":"markdown","66c5a6e6":"markdown","1dc55dad":"markdown","c6004fe6":"markdown","f929285a":"markdown","a2150b4f":"markdown","356866c8":"markdown"},"source":{"8a716e1e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e4505d92":"pip install auto-ts","8e6be41a":"pip install xlrd","9717048a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nfrom datetime import datetime\nimport pandas as pd\nimport plotly.express as px\nfrom statsmodels.tsa.stattools import grangercausalitytests\nfrom statsmodels.tsa.stattools import adfuller\nimport statsmodels.api as sm\nfrom statsmodels.tsa.api import VAR\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-darkgrid')","40374acb":"df=pd.read_csv('..\/input\/ethereum-usd-ethusd\/ETH-USD.csv')","820da75c":"df.info()","a3a58347":"df['Date']=pd.to_datetime(df['Date'])\ndf.info()","ccb3d007":"print (\"Rows     : \" ,df.shape[0])\nprint (\"Columns  : \" ,df.shape[1])\nprint (\"\\nFeatures : \\n\" ,df.columns.tolist())\nprint (\"\\nMissing values :  \", df.isnull().any())\nprint (\"\\nUnique values :  \\n\",df.nunique())","4567fe59":"def fill_missing(df):\n    ### function to impute missing values using interpolation ###\n    df['Open'] = df['Open'].interpolate()\n    df['Close'] = df['Close'].interpolate()\n    df['Adj Close'] = df['Adj Close'].interpolate()\n    df['Volume'] = df['Volume'].interpolate()\n    df['High'] = df['High'].interpolate()\n    df['Low'] = df['Low'].interpolate()\n    print(df.head())\n    print(df.isnull().sum())\n    \nfill_missing(df)","efb47e28":"print (\"Rows     : \" ,df.shape[0])\nprint (\"Columns  : \" ,df.shape[1])\nprint (\"\\nFeatures : \\n\" ,df.columns.tolist())\nprint (\"\\nMissing values :  \", df.isnull().any())\nprint (\"\\nUnique values :  \\n\",df.nunique())","cc07be63":"fig = px.line(df, x='Date', y='Open', title='Opening price')\n\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n            dict(count=2, label=\"3y\", step=\"year\", stepmode=\"backward\"),\n            dict(count=3, label=\"5y\", step=\"year\", stepmode=\"backward\"),\n            dict(step=\"all\")\n        ])\n    )\n)\nfig.show()","0f642ef9":"fig = px.line(df, x='Date', y='Close', title='Closing price')\n\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n            dict(count=2, label=\"3y\", step=\"year\", stepmode=\"backward\"),\n            dict(count=3, label=\"5y\", step=\"year\", stepmode=\"backward\"),\n            dict(step=\"all\")\n        ])\n    )\n)\nfig.show()","5f273dcf":"\nfig = px.line(df, x='Date', y='Volume', title='Volume')\n\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n            dict(count=2, label=\"3y\", step=\"year\", stepmode=\"backward\"),\n            dict(count=3, label=\"5y\", step=\"year\", stepmode=\"backward\"),\n            dict(step=\"all\")\n        ])\n    )\n)\nfig.show()","0b0f6bf2":"df_indexed=df.set_index('Date')\ndf_indexed","50b26d40":"df_indexed.resample('M').mean().plot(subplots=True)","c75a5d62":"color_list = [\n    \"blue\",\n    \"orange\",\n    \"green\",\n    \"red\",\n    \"purple\",\n    \"brown\",\n    \"pink\",\n    \"gray\",\n    \"olive\",\n    \"cyan\",\n]\n\n\ndef Visualize(data):\n    features= list(df.select_dtypes(include=[np.number]).columns.values)\n    feature_size=len(features)\n    fig, axes = plt.subplots(\n        nrows=int(np.ceil(feature_size\/2)), ncols=2, figsize=(14, feature_size*2), dpi=80, facecolor=\"w\", edgecolor=\"k\"\n    )\n    for i in range(feature_size):\n        key = features[i]\n        c = color_list[i % (len(color_list))]\n        t_data = data[key]\n        t_data.head()\n        ax = t_data.plot(\n            ax=axes[i \/\/ 2, i % 2],\n            color=c,\n            title=\"{}\".format(key),\n            rot=25,\n        )\n        ax.legend([key])\n    plt.tight_layout()\n\n\nVisualize(df_indexed)","beade83d":"for i in range(len(df_indexed.columns)):\n  result = adfuller(df_indexed[df_indexed.columns[i]])\n\n  if result[1] > 0.05 :\n    print('{} - Series is not Stationary'.format(df_indexed.columns[i]))\n  else:\n    print('{} - Series is Stationary'.format(df_indexed.columns[i]))","250cd2c9":"import statsmodels.api as sm\nres = sm.tsa.seasonal_decompose(df_indexed['Open'],\n                                model='multiplicative')\n\nresplot = res.plot()","0cecbaa9":"import statsmodels.api as sm\nres = sm.tsa.seasonal_decompose(df_indexed['Volume'],\n                                model='multiplicative')\n\nresplot = res.plot()","cabf354d":"import statsmodels.api as sm\nres = sm.tsa.seasonal_decompose(df_indexed['Close'],\n                                model='multiplicative')\n\nresplot = res.plot()","de07b498":"daily_data_fb = df.reset_index()[['Date','Close']].rename({'Date':'ds','Close':'y'}, axis=1)\ndaily_data_fb.head()","75a54c70":"test_length = 365\nsplit_date = \"2020-11-01\"\ntrain_filt = daily_data_fb['ds'] <= split_date\ntest_filt = daily_data_fb['ds'] > split_date\n\ntrain_fb = daily_data_fb[train_filt]\ntest_fb = daily_data_fb[test_filt]\n\nprint(\"train data shape :\", train_fb.shape[0] \/ daily_data_fb.shape[0] * 100)\nprint(\"test data shape :\", test_fb.shape[0] \/ daily_data_fb.shape[0] * 100)","068ccd4d":"from auto_ts import auto_timeseries","392eef45":"train_fb = train_fb.reset_index()\ntrain_fb.head()","baf04183":"test_fb = test_fb.reset_index()\ntest_fb.head()","5e52d573":"automl_model = auto_timeseries(score_type='rmse',\n                time_interval='D', forecast_period=30,\n                non_seasonal_pdq=None, seasonality=False, seasonal_period=12,\n                model_type=['best'],\n                verbose=2)","6bbf08c9":"ts_column = 'ds'\ntarget = 'y'\nsep = ','","300579a7":"automl_model.fit(\n    traindata=train_fb,\n    ts_column=ts_column,\n    target=target,\n    cv=5,\n    sep=',')","f4313b3d":"automl_model.get_leaderboard()","8fabed7c":"automl_model.get_cv_scores()","8c61305f":"y_pred = automl_model.predict(test_fb,model='best')\npredf = pd.DataFrame([test_fb[target].values, y_pred['yhat'].values]).T\npredf.columns = ['Actual','Predicted']\npredf.head()","6354efb8":"from auto_ts import print_ts_model_stats\nprint_ts_model_stats(test_fb[target].values, y_pred['yhat'].values,'Best')","e95f7e5b":"# Using Best Model\nfuture_predictions = automl_model.predict(\n    testdata=test_fb\n)  \nfuture_predictions","9c2e66a8":"# Using specific model\nfuture_predictions = automl_model.predict(\n    testdata=test_fb,\n    model='auto_SARIMAX'\n)\nfuture_predictions","46410222":"# Using specific model\nfuture_predictions = automl_model.predict(\n    testdata=test_fb,\n    model='Prophet',\n    simple=False\n\n)\nfuture_predictions","d12d798c":"import copy\nsubm = test_fb[[target]]\nprint(subm.shape)\nsubm.head()","3016d942":"subm['predictions'] = future_predictions['yhat'].values\nsubm[[target,'predictions']].plot(figsize=(15,8))","1c034fbd":"# Installing Auto-ts and other libraries","66c5a6e6":"# Seasonal Decompose","1dc55dad":"# Reading Data","c6004fe6":"# Fitting Data in Model","f929285a":"# Checking that whether data is Stationary or Not using Augmented Dickey-Fuller test","a2150b4f":"# Data Wrangling","356866c8":"# EDA"}}