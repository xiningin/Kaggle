{"cell_type":{"b60ba407":"code","6aa8aed2":"code","da80f17b":"code","12a6897f":"code","acb1d5ad":"code","1402ffa2":"code","db4da9ee":"code","3bb96512":"code","101c719d":"code","5597c17d":"code","425a213d":"code","8d179e9a":"code","ebd83535":"code","4b822761":"code","ac5d241d":"code","19ce7b5e":"code","f0bfdeb3":"markdown","8462c78b":"markdown"},"source":{"b60ba407":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport keras","6aa8aed2":"X_test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\") # chargement des donn\u00e9es\nX_train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\nX_train.head()","da80f17b":"Y_train = X_train.label # s\u00e9paration des donn\u00e9es et des labels\ndel X_train['label']","12a6897f":"for i in range(9): # affichage de quelques images\n    plt.subplot(190 + (i+1))\n    im = X_train.iloc[i].to_numpy().reshape(28, 28)\n    plt.imshow(im, cmap=plt.get_cmap('gray'))\n    plt.title(Y_train[i]);","acb1d5ad":"Y_train.hist() # r\u00e9partition des labels","1402ffa2":"X_train = X_train\/255 - 0.5 # normalisation, utile pour les algorithmes de ML\nX_test = X_test\/255 - 0.5","db4da9ee":"model = keras.models.Sequential([\n        keras.layers.Dense(128, activation='relu'),\n        keras.layers.Dense(10, activation='softmax')\n])\nmodel.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","3bb96512":"model.fit(X_train, keras.utils.to_categorical(Y_train), epochs=5)","101c719d":"Y_pred = model.predict(X_train)\nY_pred_classes = np.argmax(Y_pred,axis = 1) \nerr = np.where(Y_pred_classes != Y_train)[0] # erreurs par le mod\u00e8le\nnp.random.shuffle(err)","5597c17d":"for i in range(9): # affichage d'images mal classifi\u00e9es\n    plt.subplot(190 + (i+1))\n    im = X_train.iloc[err[i]].to_numpy().reshape(28, 28)\n    plt.imshow(im, cmap=plt.get_cmap('gray'))\n    plt.title(Y_pred_classes[err[i]]);","425a213d":"plt.hist(Y_pred_classes)","8d179e9a":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(Y_train, Y_pred_classes)","ebd83535":"model_cnn = keras.models.Sequential([\n  keras.layers.Reshape((28, 28, 1), input_shape=(784,)), # redimensionner pour appliquer un filtre de convolution\n  keras.layers.Conv2D(8, 3, input_shape=(28, 28, 1)),\n  keras.layers.MaxPooling2D(),\n  keras.layers.Flatten(),\n  keras.layers.Dense(10, activation='softmax'),\n])\nmodel_cnn.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","4b822761":"model_cnn.fit(X_train, keras.utils.to_categorical(Y_train), epochs=5)","ac5d241d":"confusion_matrix(Y_train, Y_pred_classes)","19ce7b5e":"results = model_cnn.predict(X_test)\n\nresults = np.argmax(results,axis = 1)\n\nsubmission = pd.DataFrame({\"ImageId\" : range(1, len(results)+1), \"Label\" : results})\n\nsubmission.to_csv(\"cnn_mnist.csv\",index=False)\n","f0bfdeb3":"# R\u00e9seau de neurones simple","8462c78b":"# CNN"}}