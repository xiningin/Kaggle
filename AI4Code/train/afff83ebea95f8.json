{"cell_type":{"3180d88b":"code","1c9d7c29":"code","5638b3dd":"code","05c78ce3":"code","5f81526c":"code","cd2e9601":"code","5a3e28f7":"code","d2919db4":"code","cfa3aa03":"code","9f23d70d":"code","27e966f7":"code","c12e9031":"code","8b93317e":"code","d98cb3f5":"code","b2f1e1d7":"code","a27e2d34":"code","a75a6533":"code","6e2de51e":"code","bf751b4c":"code","5828b941":"code","9930e752":"code","03b42134":"code","6bc91111":"code","d7f49677":"code","57dd28bc":"code","8f165e37":"code","e8a06395":"code","fe176814":"code","9a1784ae":"code","263d10b9":"code","43a89657":"code","7effda20":"code","3bf94d45":"code","a54bba5c":"code","c5ce0a3e":"code","aad06862":"code","467ff46a":"code","9db6c206":"code","8bca70c2":"markdown","1bc29a15":"markdown","ee2c8e31":"markdown","4d5f6dea":"markdown","7095860a":"markdown"},"source":{"3180d88b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1c9d7c29":"data = pd.read_csv(r'..\/input\/heart-disease-uci\/heart.csv')","5638b3dd":"data.head()","05c78ce3":"data.describe()","5f81526c":"data.isnull().sum()\/len(data)*100","cd2e9601":"for col in data.iloc[:, :-1].columns:\n    if data[col].dtype != object:\n        print(\"Feature: \", col)\n        sns.boxplot(data[col])\n        plt.show()\n        print(\"*\"*125)","5a3e28f7":"for col in data.iloc[:, :-1].columns:\n    if data[col].dtype != object:\n        \n        q1, q3 = np.percentile(data[col], [25,75])\n        \n        iqr = q3-q1\n        lower_fence = q1 - (1.5 * iqr)\n        upper_fence = q3 + (1.5 * iqr)\n        \n        data[col] = data[col].apply(lambda x: upper_fence if x > upper_fence else lower_fence if x< lower_fence else x)\n        sns.boxplot(x = data[col], data= data, palette='rainbow', orient='h')\n        plt.show()\n        print('*'*100, '\\n'*2)","d2919db4":"data.target.value_counts()","cfa3aa03":"data.hist(figsize=(14,14))\nplt.show()","9f23d70d":"data.groupby(['sex', 'target']).size().unstack().plot(kind='bar', figsize=(12,6))","27e966f7":"data.groupby(['cp', 'target']).size().unstack().plot(kind='bar', figsize=(12,6))\n","c12e9031":"data.groupby(['fbs', 'target']).size().unstack().plot(kind='bar', figsize=(12,6))","8b93317e":"data.groupby(['restecg', 'target']).size().unstack().plot(kind='bar', figsize=(12,6))","d98cb3f5":"data.groupby(['exang', 'target']).size().unstack().plot(kind='bar', figsize=(12,6))","b2f1e1d7":"data.groupby(['slope', 'target']).size().unstack().plot(kind='bar', figsize=(12,6))","a27e2d34":"data.groupby(['ca', 'target']).size().unstack().plot(kind='bar', figsize=(12,6))","a75a6533":"data.groupby(['thal', 'target']).size().unstack().plot(kind='bar', figsize=(12,6))","6e2de51e":"corr = data.corr()\ncorr.style.background_gradient(cmap = 'coolwarm')","bf751b4c":"X = data.drop('target', axis = 1)\ny = data['target']","5828b941":"from sklearn.preprocessing import StandardScaler, MinMaxScaler\nmin_max = MinMaxScaler()\nX = min_max.fit_transform(X)","9930e752":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y, \n                                                    test_size=0.2,\n                                                    random_state=101)","03b42134":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression() \nlr.fit(X_train, y_train)","6bc91111":"print(lr.coef_)","d7f49677":"lr_pred = lr.predict(X_test)","57dd28bc":"from sklearn.metrics import accuracy_score, classification_report,confusion_matrix\nprint('Accuracy_score Testing Data: ',round(accuracy_score(y_test, lr_pred)*100,2))\nprint('\\n','Classification_report Testing data: ','\\n','\\n',classification_report(y_test, lr_pred))","8f165e37":"confusion_matrix(y_test, lr_pred)","e8a06395":"from sklearn.tree import DecisionTreeClassifier\nDic=DecisionTreeClassifier()\nDic.fit(X_train,y_train)","fe176814":"DT=Dic.predict(X_test)\naccuracy_score(y_test,DT)*100","9a1784ae":"print(\"Accuracy on training set: {:.3f}\".format(Dic.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(Dic.score(X_test, y_test)))","263d10b9":"print('\\n','Classification_report Testing data: ','\\n','\\n',classification_report(y_test, DT))","43a89657":"confusion_matrix(y_test, DT)","7effda20":"from sklearn.neighbors import KNeighborsClassifier","3bf94d45":"k_range=range(1,26)\nscores={}\nh_score = 0       \nbest_k=0          \nscores_list=[]  \n\nfor k in k_range:\n    knn=KNeighborsClassifier(n_neighbors=k)\n    knn.fit(X_train,y_train)\n    knn_pred=knn.predict(X_test)\n    scores[k]=accuracy_score(y_test,knn_pred)\n    if scores[k]>h_score:\n        h_score = scores[k]\n        best_k = k\n\n    scores_list.append(accuracy_score(y_test,knn_pred))\nprint('The best value of k is {} with score : {}'.format(best_k,h_score))","a54bba5c":"knn=KNeighborsClassifier(n_neighbors=best_k)\nknn.fit(X_train,y_train)","c5ce0a3e":"from sklearn.metrics import accuracy_score,mean_squared_error\nknn_pred=knn.predict(X_test)\naccuracy_knn=accuracy_score(y_test,knn_pred)*100\nprint('accuracy_score score     : ',accuracy_score(y_test,knn_pred)*100,'%')\nprint('mean_squared_error score : ',mean_squared_error(y_test,knn_pred)*100,'%')","aad06862":"print(\"Accuracy on training set: {:.3f}\".format(knn.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(knn.score(X_test, y_test)))","467ff46a":"from lightgbm import LGBMClassifier\n\nlg=LGBMClassifier(boosting_type='gbdt',n_estimators=5000,learning_rate=0.05,objective='binary',metric='accuracy',is_unbalance=True,\n                 colsample_bytree=0.7,reg_lambda=3,reg_alpha=3,random_state=500,n_jobs=-1,num_leaves=35)\nlg.fit(X_train,y_train)\nypred = lg.predict(X_test)\nprint('===============================================')\nprint('Accuracy score : ',accuracy_score(y_test,ypred)*100)\nprint('===============================================')","9db6c206":"from sklearn.svm import SVC\nmodel = SVC(C=2.0,kernel='rbf',gamma='auto').fit(X_train,y_train)\nY_predict = model.predict(X_test)\nprint('Accuracy score : {}%'.format(accuracy_score(y_test,Y_predict)*100))","8bca70c2":"# Decision Tree","1bc29a15":"# Logistic Regression","ee2c8e31":"# LGB","4d5f6dea":"# SVM","7095860a":"# KNN"}}