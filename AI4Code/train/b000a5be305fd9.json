{"cell_type":{"1fa6f57c":"code","ddf198a8":"code","e6962eac":"code","d8c76dd9":"code","66a669a9":"code","cbfa4f7f":"code","4f2635d5":"code","54719091":"code","e146dfe9":"code","59c46c72":"code","27bac235":"code","fa8dd778":"code","5839eb61":"code","637fdac8":"code","34e86c4c":"code","c5715c63":"code","770af8f4":"code","25a24ec0":"code","acb7bc6d":"markdown"},"source":{"1fa6f57c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ddf198a8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nimport keras\nfrom keras.optimizers import Adam\nfrom keras.utils.np_utils import to_categorical \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.preprocessing.image import ImageDataGenerator","e6962eac":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')","d8c76dd9":"train.head(5)","66a669a9":"train.describe()","cbfa4f7f":"y_train = train[\"label\"]\n# drop the label column\nx_train = train.drop(labels = \"label\", axis=1)","4f2635d5":"#next we check for missing values\nx_train.isnull().any().value_counts()","54719091":"#next we check for test \ntest.isnull().any().value_counts()","e146dfe9":"#The next step would be to normalize the data\nx_train = x_train\/255.0\ntest = test\/255.0","59c46c72":"#The next step is to reshape the data\nx_train = x_train.values.reshape(-1, 28, 28, 1)\ntest = test.values.reshape(-1, 28,28,1)","27bac235":"#The next step is to factorize the values using one hot encoding\ny_train = to_categorical(y_train, num_classes=10)","fa8dd778":"#Here we split the data into train and test datasets\nx_train, x_test, y_train, y_test = train_test_split(x_train, y_train, test_size=0.5, random_state=42)","5839eb61":"image = plt.imshow(x_train[0][:,:,0])","637fdac8":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (7,7),padding = 'Same',activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (7,7),padding = 'Same',activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(3,3)))\nmodel.add(Dropout(0.50))\n\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu'))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(3,3), strides=(3,3)))\nmodel.add(Dropout(0.50))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","34e86c4c":"model.compile(loss = \"categorical_crossentropy\",optimizer = Adam(0.0015) , metrics=[\"accuracy\"])","c5715c63":"hist = model.fit(x_train, y_train,\n                batch_size=86,\n                epochs=20,\n                validation_data=(x_test,y_test))","770af8f4":"final_loss, final_acc = model.evaluate(x_test, y_test, verbose=0)\nprint(\"loss: {0:.3f},accuracy: {1:.3f}\".format(final_loss, final_acc))","25a24ec0":"pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv').to_csv(\"my_output.csv\")","acb7bc6d":"**Import Libraries**"}}