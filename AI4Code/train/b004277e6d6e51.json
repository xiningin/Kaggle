{"cell_type":{"8bf7ee27":"code","1b0d3dac":"code","2f9f4831":"code","ded57fd4":"code","ca7b86e9":"code","07c4fe7b":"code","db83aede":"code","c0b78c4a":"code","00871ab8":"markdown","247fb91d":"markdown","cb60956f":"markdown"},"source":{"8bf7ee27":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1b0d3dac":"def get_list_of_university_towns():\n    '''This function returns a dataFrame of towns and the states they are in from the \n    university_towns.txt list. The format of the DataFrame is:\n    DataFrame( [ [\"Michigan\", \"Ann Arbor\"], [\"Michigan\", \"Yipsilanti\"] ], \n    columns=[\"State\", \"RegionName\"]  )\n    \n    The following cleaning  will be done:\n\n    1. For \"State\", removing characters from \"[\" to the end.\n    2. For \"RegionName\", when applicable, removing every character from \" (\" to the end. '''\n\n    uni_towns = pd.read_fwf('\/kaggle\/input\/university-towns-of-usa\/university_towns.txt',names=['RegionName']) #it's easy to convert text data to dataframe using read_fwf. It does all the formatting.\n    \n    #uni_towns = pd.read_csv('\/kaggle\/input\/university-towns-of-usa\/university_towns.txt',sep='\\n', header=None, names=['RegionName']) # you can use this format too\n        \n\n    uni_towns['State'] = np.where(uni_towns['RegionName'].str.contains('edit'),uni_towns['RegionName'],np.nan) # In the test file there state names and university town names but they aren't classified. There is a word 'edit' after every state name . So we will create a new column 'State' and separate all the state names using the condition.\n    \n    uni_towns['State'].fillna(method='ffill',inplace=True)\n\n    uni_towns=uni_towns[['State','RegionName']]\n\n    uni_towns=uni_towns[uni_towns['State'] != uni_towns['RegionName']]\n\n    for col in uni_towns:\n        uni_towns[col]= uni_towns[col].str.replace(r\"\\(.*\\)\",\"\").str.replace(r\"\\[.*\\]\",\"\").str.rstrip()\n\n    return uni_towns\nget_list_of_university_towns()","2f9f4831":"def get_recession_start():\n    '''Returns the year and quarter of the recession start time as a \n    string value in a format such as 2005q3'''\n    gdp = pd.read_excel('\/kaggle\/input\/gdp-of-different-towns-in-usa\/gdplev.xls',header=None)\n    gdp=gdp.dropna(how='all')\n    gdp=gdp.dropna(axis=1,how='all')\n    #gdp=gdp.drop(axis=7,columns=7)\n    gdp=(gdp[gdp.index>219].drop(axis=1,columns=[0,1,2])).reset_index().drop(columns=['index',5]).rename(columns={4:'Quarter',6:'GDP'})\n\n    gdp['GDP_dec']=gdp['GDP'].diff()\n    gdp = gdp[gdp['GDP_dec']<0]\n    gdp=gdp.reset_index()\n    recession_start = gdp['Quarter'][(gdp['index'].diff().idxmin())-1]\n    \n    \n    return recession_start\nget_recession_start()","ded57fd4":"def get_recession_end():\n    '''Returns the year and quarter of the recession end time as a \n    string value in a format such as 2005q3'''\n    gdp = pd.read_excel('\/kaggle\/input\/gdp-of-different-towns-in-usa\/gdplev.xls',header=None)\n    gdp=gdp.dropna(how='all')\n    gdp=gdp.dropna(axis=1,how='all')\n    #gdp=gdp.drop(axis=7,columns=7)\n    gdp=(gdp[gdp.index>219].drop(axis=1,columns=[0,1,2])).reset_index().drop(columns=['index',5]).rename(columns={4:'Quarter',6:'GDP'})\n\n    gdp['GDP_dec']=gdp['GDP'].diff()\n    gdp = gdp[gdp['GDP_dec']>0]\n    gdp=gdp.reset_index()\n    recession_end=gdp['Quarter'].values[gdp['index'].diff().idxmax() + 1]\n    return recession_end\nget_recession_end()","ca7b86e9":"def get_recession_bottom():\n    '''Returns the year and quarter of the recession bottom time as a \n    string value in a format such as 2005q3'''\n    gdp = pd.read_excel('\/kaggle\/input\/gdp-of-different-towns-in-usa\/gdplev.xls',header=None)\n    gdp=gdp.dropna(how='all')\n    gdp=gdp.dropna(axis=1,how='all')\n    #gdp=gdp.drop(axis=7,columns=7)\n    gdp=(gdp[gdp.index>219].drop(axis=1,columns=[0,1,2])).reset_index().drop(columns=['index',5]).rename(columns={4:'Quarter',6:'GDP'})\n    rec_st = get_recession_start()\n    rec_end= get_recession_end()\n    gdp = gdp.iloc[(gdp.index[gdp['Quarter']== rec_st].tolist()[0]) : (gdp.index[gdp['Quarter']== rec_end].tolist()[0])]\n    bottom = gdp['Quarter'].values[gdp['GDP'].values.argmin()]\n    return bottom\nget_recession_bottom()","07c4fe7b":"def convert_housing_data_to_quarters():\n    '''Converts the housing data to quarters and returns it as mean \n    values in a dataframe. This dataframe should be a dataframe with\n    columns for 2000q1 through 2016q3, and should have a multi-index\n    in the shape of [\"State\",\"RegionName\"].\n    \n    Note: Quarters are defined in the assignment description, they are\n    not arbitrary three month periods.\n    \n    The resulting dataframe should have 67 columns, and 10,730 rows.\n    '''\n    house_data = pd.read_csv('\/kaggle\/input\/housing-price-in-different-towns-of-usa\/City_Zhvi_AllHomes.csv')\n\n    house_data['State']=house_data['State'].replace({'OH': 'Ohio', 'KY': 'Kentucky', 'AS': 'American Samoa', 'NV': 'Nevada', 'WY': 'Wyoming', 'NA': 'National', 'AL': 'Alabama', 'MD': 'Maryland', 'AK': 'Alaska', 'UT': 'Utah', 'OR': 'Oregon', 'MT': 'Montana', 'IL': 'Illinois', 'TN': 'Tennessee', 'DC': 'District of Columbia', 'VT': 'Vermont', 'ID': 'Idaho', 'AR': 'Arkansas', 'ME': 'Maine', 'WA': 'Washington', 'HI': 'Hawaii', 'WI': 'Wisconsin', 'MI': 'Michigan', 'IN': 'Indiana', 'NJ': 'New Jersey', 'AZ': 'Arizona', 'GU': 'Guam', 'MS': 'Mississippi', 'PR': 'Puerto Rico', 'NC': 'North Carolina', 'TX': 'Texas', 'SD': 'South Dakota', 'MP': 'Northern Mariana Islands', 'IA': 'Iowa', 'MO': 'Missouri', 'CT': 'Connecticut', 'WV': 'West Virginia', 'SC': 'South Carolina', 'LA': 'Louisiana', 'KS': 'Kansas', 'NY': 'New York', 'NE': 'Nebraska', 'OK': 'Oklahoma', 'FL': 'Florida', 'CA': 'California', 'CO': 'Colorado', 'PA': 'Pennsylvania', 'DE': 'Delaware', 'NM': 'New Mexico', 'RI': 'Rhode Island', 'MN': 'Minnesota', 'VI': 'Virgin Islands', 'NH': 'New Hampshire', 'MA': 'Massachusetts', 'GA': 'Georgia', 'ND': 'North Dakota', 'VA': 'Virginia'})\n\n    house_data.drop(['RegionID','Metro','CountyName','SizeRank'],axis=1,inplace=True)\n\n    house_data=house_data.drop(house_data.loc[:,'1996-04':'1999-12'],axis=1)\n\n    house_data=house_data.set_index(['State','RegionName']).sort_values(by=['State','RegionName'])\n\n    def change_to_quarter(date:str):\n        date=date.split('-')\n        month = int(date[1])\n        quart = int((month-1)\/3)+1\n        return date[0]+'q'+str(quart)\n\n    house_data=house_data.groupby(change_to_quarter,axis=1).mean()\n\n    return house_data\nconvert_housing_data_to_quarters()","db83aede":"from scipy.stats import ttest_ind","c0b78c4a":"def run_ttest():\n    '''First creates new data showing the decline or growth of housing prices\n    between the recession start and the recession bottom. Then runs a ttest\n    comparing the university town values to the non-university towns values, \n    return whether the alternative hypothesis (that the two groups are the same)\n    is true or not as well as the p-value of the confidence. \n    \n    Return the tuple (different, p, better) where different=True if the t-test is\n    True at a p<0.01 (we reject the null hypothesis), or different=False if \n    otherwise (we cannot reject the null hypothesis). The variable p should\n    be equal to the exact p value returned from scipy.stats.ttest_ind(). The\n    value for better should be either \"university town\" or \"non-university town\"\n    depending on which has a lower mean price ratio (which is equivilent to a\n    reduced market loss).'''\n     \n    uni_towns = get_list_of_university_towns()\n    house_data = convert_housing_data_to_quarters()\n\n    uni_towns=uni_towns.set_index(['State','RegionName'])\n\n    start = get_recession_start()\n    bottom = get_recession_bottom()\n    bef_start =house_data.columns[house_data.columns.get_loc(start) -1]\n\n\n    house_data=house_data.loc[:,bef_start:bottom]\n    house_data['ratio'] = house_data[bottom]-house_data[bef_start]\n\n\n    unid = pd.merge(house_data,uni_towns,how='inner',left_index=True,right_index=True)\n    nounid= house_data.drop(unid.index)\n\n\n\n\n    t,p = ttest_ind(unid['ratio'].dropna(),nounid['ratio'].dropna())\n\n    different = True if p < 0.01 else False\n\n    better = \"non-university town\" if unid['ratio'].mean() < nounid['ratio'].mean() else \"university town\"\n    return different, p, better\n\nrun_ttest()","00871ab8":"**First Function:**\n\n> The list of university town has been collected from wikipedia which is a txt file. We need to convert it into an ideal dataframe for further use. ","247fb91d":"At first , we will define different functions and implement them to process our data and through these we will see different uses of pandas library. At the end we will test our hypothesis to come to decision whether the housing price in university towns remains less affected during recession.","cb60956f":"**Some definitions before moving forward:**\n1.A quarter is a specific three month period, Q1 is January through March, Q2 is April through June, Q3 is July through September, Q4 is October through December.\n\n2.A recession is defined as starting with two consecutive quarters of GDP decline, and ending with two consecutive quarters of GDP growth.\n\n3.A recession bottom is the quarter within a recession which had the lowest GDP.\n\n4.A university town is a city which has a high percentage of university students compared to the total population of the city.\n\n\n**Hypothesis:** University towns have their mean housing prices less effected by recessions. We will run a t-test to compare the ratio of the mean price of houses in university towns the quarter before the recession starts compared to the recession bottom.\n\n**The following data files will be used in this project:**\n\n1.From the Zillow research data site there is housing data for the United States. In particular the datafile for all homes at a city level, City_Zhvi_AllHomes.csv, has median home sale prices at a fine grained level.\n\n2.From the Wikipedia page on college towns is a list of university towns in the United States which has been copy and pasted into the file university_towns.txt.\n\n3.From Bureau of Economic Analysis, US Department of Commerce, the GDP over time of the United States in current dollars (use the chained value in 2009 dollars), in quarterly intervals, in the file gdplev.xls. For this assignment, only look at GDP data from the first quarter of 2000 onward.\n\n"}}