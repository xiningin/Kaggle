{"cell_type":{"b683a66f":"code","a470e1b2":"code","3ad38da4":"code","b6211978":"code","4c83f890":"code","df92db32":"code","824206dc":"code","5c0637a7":"code","ba103587":"code","2775da70":"code","bc778b73":"code","73d27ebf":"code","79b2a5c6":"code","bf6c34be":"code","10ee5f4f":"code","4be8c9bb":"code","af61c960":"code","6d568dae":"code","9b0d6a24":"code","39c249c1":"code","75097fff":"code","57caffb2":"code","a92376dc":"code","cc89887d":"code","cfc46e72":"code","25e7142c":"code","45967749":"code","59ebd33f":"code","3539e0d8":"code","f6bf42d0":"code","12930b10":"code","68330a14":"code","3be42470":"code","6cf162fe":"code","8874d8a5":"code","e87b4719":"code","f2afad5d":"code","c62f6bd7":"code","2847f87e":"markdown","1f4337f3":"markdown","419f687b":"markdown","0119c3f5":"markdown","c375e794":"markdown","cfd9a0fe":"markdown","8724aa3a":"markdown","8d8af242":"markdown","828ff9cc":"markdown","f28a75f8":"markdown","ae47658d":"markdown","9c6c8d3d":"markdown","f8bef52a":"markdown","04e4262f":"markdown","4f0cc203":"markdown","ae6e5cfd":"markdown","0d672553":"markdown","0d592503":"markdown","47665b08":"markdown","b12a13dd":"markdown","2a5e42d9":"markdown","68e32b1c":"markdown","3ba08ac1":"markdown","d5eda04c":"markdown","111afdce":"markdown","ddf0aa0e":"markdown"},"source":{"b683a66f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a470e1b2":"#We uses pandas library for add the data.\ndata = pd.read_csv('..\/input\/DJIA_table.csv')","3ad38da4":"data.shape","b6211978":"#Lets learn what are the columns names of our data. We call feature \ndata.columns","4c83f890":"#Learn more about our columns\ndata.info()","df92db32":"#Lets do Date column's type Datetime  \ndata.Date= pd.to_datetime(data.Date)  #change of feature type\ndata.dtypes  #show features type","824206dc":"#Show the top five entries in the database\ndata.head() ","5c0637a7":"#Gives the last five entries in the database\ndata.tail()","ba103587":"#We want to reach High column and 0.index\ndata.High[0]\n#We can do that too \n#data[\"High\"][1]\n#data.loc[1,[\"High\"]]","2775da70":"#We can reach High and Low column's line's all\ndata[[\"High\",\"Low\"]]","bc778b73":"#or we can reach the first 5 lines\ndata.loc[:5,[\"High\",\"Low\"]]","73d27ebf":"#Gives all columns between Open and Close\ndata.loc[:3,\"Open\":\"Close\"]","79b2a5c6":"filter1 = data.High > 10190\ndata[filter1]","bf6c34be":"filter2 = data.Low < 10000\ndata[filter2]","10ee5f4f":"## Combining filters\ndata[filter1 & filter2]","4be8c9bb":"#New column is  High and Low column's sum\ndata[\"total\"] = data.High + data.Low\ndata.head()","af61c960":"#Lets see how is it.\ndef operation(x):   #We create a function\n    return x\/10000\ndata.Open.apply(operation)  #We use the function with apply() ","6d568dae":"#Lets see\ndata.Open.apply(lambda x: x\/10000) #of course we use apply() ","9b0d6a24":"#Learn index name\nprint(data.index.name)","39c249c1":"#If you want to change\ndata.index.name = \"index_name\"\nprint(data.index.name)","75097fff":"data.index = range(1,1990,1)\ndata.head()","57caffb2":"#Create a new column. The column write rise for higher values than average else fall\nhigh_mean = data.High.mean()  #calculate average\ndata[\"high_level\"] = [\"rise\" if high_mean < each else \"fall\" for each in data.High]  #values are scanned in high column\ndata.head(1000)","a92376dc":"#Create a new column. The column write rise for higher values than average else fall\nlow_mean = data.Low.mean()  #calculate average\ndata[\"low_level\"] = [\"rise\" if low_mean < each else \"fall\" for each in data.Low]  #values are scanned in low column\ndata.head(1000)","cc89887d":"data1 = data.set_index([\"high_level\",\"low_level\"])\ndata1.head(1000)","cfc46e72":"#Delete the total column\ndata = data.drop([\"total\"],axis=1)\ndata.columns","25e7142c":"#Values in the high_level column\ndata.high_level","45967749":"#Different values in the high_level column\ndata.high_level.unique()","59ebd33f":"dictionary = {\"Sex\":[\"F\",\"F\",\"M\",\"M\"],\n              \"Size\":[\"S\",\"L\",\"S\",\"L\"],\n              \"Age\": [10,48,24,35]}\ndata_1 = pd.DataFrame(dictionary)\ndata_1","3539e0d8":"#We new index sex and  columns size \ndata_1.pivot(index = \"Sex\", columns = \"Size\", values = \"Age\")","f6bf42d0":"#We use sex and size column as index\ndata_2 = data_1.set_index([\"Sex\",\"Size\"])\ndata_2","12930b10":"#Choose size for index\ndata_2.unstack(level=0)","68330a14":"#Choose sex for index\ndata_2.unstack(level=1)","3be42470":"#I chenge size column and sex column location\ndata_3 = data_2.swaplevel(0,1)\ndata_3","6cf162fe":"#Create list of values of size and age of each sex  column\npd.melt(data_1, id_vars = \"Sex\" , value_vars = [\"Size\",\"Age\"])","8874d8a5":"data_1","e87b4719":"#Calculate averange by sex\ndata_1.groupby(\"Sex\").mean()","f2afad5d":"#Max value by size\ndata_1.groupby(\"Size\").max()","c62f6bd7":"#Min value by size\ndata_1.groupby(\"Size\").min()","2847f87e":"* As you see data have 1989 entries and are non-null all of them and we can see columns types.\n","1f4337f3":"* Let's finally group.","419f687b":"* Create list of values of choosed two column of wanted column. This is melt() function.","0119c3f5":"* We can create new column.","c375e794":"* Our index start to zero.  We wanted to star one?","cfd9a0fe":"* We can change index and columns. This is pivoting.","8724aa3a":"* If create function with lambda, the code is written on single line.","8d8af242":"* Firstly we need to add the data we want to examine. We can build data frames from csv .","828ff9cc":"* Date column's type is object but  Datetime would be better.","f28a75f8":"* We need to have information about our data for data analysis.","ae47658d":"* We can use two columns(Sex, Size) as index.","9c6c8d3d":"* We have more than one index. Now we have it down.","f8bef52a":"* We can reach value we want the line in the column. This is indexing.","04e4262f":"* I want to see a column's value.","4f0cc203":"* Now let's examine the data according to the conditions we want. This is filtring","ae6e5cfd":"* Now i want to delete column.","0d672553":"* We can build dataframe from dictionaries.","0d592503":"* Now let's examine the first and last lines of data so that we can better understand.","47665b08":"* Remember we have index. Lets see ","b12a13dd":"Hi. I am working data science and want to share my learning.","2a5e42d9":"* I'm curious about the number of rows and columns.","68e32b1c":"* We can apply a function on columns of data. This is a apply() function","3ba08ac1":"* We change column's location.","d5eda04c":"* We can sort the different columns we want. This is slicing","111afdce":"* I want to show something i love ","ddf0aa0e":"* We can use these two columns(high_level , low_level) as index."}}