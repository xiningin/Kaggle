{"cell_type":{"1a280046":"code","2f147ef8":"code","cd99cdbb":"code","0caaa22b":"code","ef482ebb":"code","08597771":"code","bbf7bfab":"code","ba0f27c9":"code","955dec14":"code","557d2ab2":"code","5e2e72ba":"code","422fb449":"markdown","ffed1ced":"markdown","a723fb5a":"markdown","438835df":"markdown","d6446c85":"markdown"},"source":{"1a280046":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime\nimport time\nimport matplotlib.pyplot as plt\nimport seaborn \nfrom matplotlib import animation\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f147ef8":"data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ndata.head()","cd99cdbb":"data.shape","0caaa22b":"data.info()","ef482ebb":"data['ObservationDate'] = data['ObservationDate'].astype('datetime64')\ndata['Last Update'] = data['Last Update'].astype('datetime64')#\u6539\u53d8\u7279\u5f81\u7684\u6570\u636e\u7c7b\u578b\ndata.info()","08597771":"data.isnull().sum()","bbf7bfab":"data = data.drop('Province\/State',axis=1)\ndata.isnull().sum()","ba0f27c9":"data1 = data.groupby('ObservationDate')\ntype(data1)","955dec14":"Date_list = []\nRegion_list = []\nConfiremd_list = []\nfor ObservationDate ,group in data1:\n    # print(ObservationDate)\n    dt_obj = ObservationDate.to_pydatetime()\n    date_str = dt_obj.strftime(\"%Y-%m-%d %H:%M:%S\")#\u5c06ObservationDate\u7c7b\u578b\u7531timestamp\u8f6c\u6362\u4e3astring\n    Date_list.append(date_str[:10])\n    df= group.groupby('Country\/Region').agg('sum').sort_values(by='Confirmed',ascending=False).reset_index()\n    df_region = df['Country\/Region'].values.tolist()\n    df_confiremd = df['Confirmed'].values.tolist()\n    Region_list.append(df_region)\n    Confiremd_list.append(df_confiremd)","557d2ab2":"def draw_chart(Region_list,Confiremd_list):\n    Color_list = ['red','aquamarine', 'dodgerblue','orange','deepskyblue','seagreen','gold','darkviolet','yellow','black']\n    fig = plt.figure(1,figsize=(12,6))\n    plt.style.use('seaborn')\n    ax = fig.add_subplot(111)\n    def animate(i):\n        ax.cla()\n        ax.grid()\n        barhs = []\n        barhs += ax.barh(Region_list[i],Confiremd_list[i],color=[l for l in Color_list],label=Date_list[i])\n        plt.legend(loc='best')\n        for a,b in zip(Region_list[i],Confiremd_list[i]):\n            plt.text(b+0.5,a,'%.0f'%b,va='center')\n        plt.xlabel('Confiremd',fontsize=14)\n        plt.ylabel('Country\/Region',fontsize=14)\n        plt.title('Confirmed cases of Covid19 by Country\/Region',fontsize=20)\n        return barhs\n    anim = animation.FuncAnimation(fig,animate,frames = len(Region_list),interval=50,repeat=True)\n    return plt,anim","5e2e72ba":"Region_list = np.array(pd.DataFrame(Region_list).iloc[:,:10]).tolist()\nConfiremd_list = np.array(pd.DataFrame(Confiremd_list).iloc[:,:10]).tolist()\nplt,anim = draw_chart(Region_list,Confiremd_list)\nanim.save('Covid-Visualization.gif')\nplt.show()","422fb449":"2.\u6570\u636e\u53ef\u89c6\u5316","ffed1ced":"\u6309ObservationDate\u5206\u7ec4","a723fb5a":"1.\u6570\u636e\u5904\u7406","438835df":"Province\/State\u7684\u7f3a\u5931\u503c\u592a\u591a\uff0c\u4e14\u4e0d\u5f71\u54cd\u5bf9\u56fd\u5bb6\/\u5730\u533a\u7684\u6570\u636e\u53ef\u89c6\u5316\uff0c\u6240\u4ee5\u8003\u8651\u53bb\u6389\u8be5\u7279\u5f81","d6446c85":"\u5904\u7406\u7f3a\u5931\u503c"}}