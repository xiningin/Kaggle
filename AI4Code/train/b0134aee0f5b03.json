{"cell_type":{"a13e2151":"code","908ebc85":"code","cf890e72":"code","245b7a98":"code","b7570482":"code","2270d65d":"code","3aa88506":"code","5e3727b1":"code","1b7808de":"code","abfb8b5f":"code","7b9590f5":"code","5f96892c":"code","38d37797":"code","20cac5d2":"code","391c3c1b":"code","116e2999":"code","186908ff":"code","73db1d19":"code","6275e954":"code","7616856d":"code","c750e8af":"code","6839013b":"code","9f5a891f":"code","6375e88c":"code","c46af893":"code","0c6101bd":"code","873df1d7":"code","9123e55a":"code","d028ad0c":"markdown","d71b6c5e":"markdown","bc77c70a":"markdown","08f25534":"markdown","d4f6080a":"markdown","5dc4a6d2":"markdown","693050c0":"markdown","33b3928a":"markdown","51d87e6d":"markdown"},"source":{"a13e2151":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","908ebc85":"data = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')\ndata.head()","cf890e72":"data.tail()","245b7a98":"data.columns","b7570482":"data.shape","2270d65d":"data.info()","3aa88506":"print(data['age'].value_counts(dropna =False))  # if there are nan values that also be counted","5e3727b1":"print(data['sex'].value_counts())","1b7808de":"data.describe() #ignore null entries\n#564 chol is an outlier in this case for an example.\n#Q3 = 274.5, Q1 = 211, Outlier line = Q3 + 1.5(Q3-Q1) = 369,75","abfb8b5f":"# Black line at top is max\n# Blue line at top is 75%\n# Green line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ndata.boxplot(column = 'chol',by = 'sex')","7b9590f5":"data_new = data.head()    # I only take 5 rows into new data\ndata_new","5f96892c":"melted = pd.melt(frame=data_new,id_vars = 'age', value_vars= ['chol','thalach'])\nmelted \n#melting is bridge between pandas and seaborn\n#named of variable and value are default indexes of melt function.","38d37797":"# Index is age\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'age', columns = 'variable',values='value')","20cac5d2":"data1 = data.head(3)\ndata2 = data.tail(3)\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","391c3c1b":"data1 = data['age'].head()\ndata2 = data['trestbps'].head()\ndata3 = data['thalach'].head()\nconc_data_col = pd.concat([data1, data2, data3],axis =1) # axis = 1 : adds dataframes in column\nconc_data_col","116e2999":"data.dtypes","186908ff":"data['age'] = data['age'].astype('float')\ndata['sex']  = data['sex'].astype('float')\n#The purpose is make the data much cleaner and readable.\ndata.dtypes","73db1d19":"data.info()","6275e954":"new_data = pd.read_csv('\/kaggle\/input\/2020-us-general-election-turnout-rates\/2020 November General Election - Turnout Rates.csv')\nnew_data.head()","7616856d":"new_data.shape","c750e8af":"new_data.info()","6839013b":"new_data['Vote for Highest Office (President)'] = new_data['Vote for Highest Office (President)'].astype('category')","9f5a891f":"new_data[\"Vote for Highest Office (President)\"].value_counts(dropna =False)\n# as you can see there are  28 NaN value","6375e88c":"n_data1=new_data   # also we will use data to fill missing value so I assign it to data1 variable\nn_data1[\"Vote for Highest Office (President)\"].dropna(inplace = True)","c46af893":"new_data[\"Vote for Highest Office (President)\"].value_counts()","0c6101bd":"assert new_data[\"Vote for Highest Office (President)\"].notnull().all()","873df1d7":"new_data['Vote for Highest Office (President)'] = new_data['Vote for Highest Office (President)'].cat.add_categories('Unknown')\nnew_data['Vote for Highest Office (President)'].fillna('Unknown', inplace =True)","9123e55a":"assert  new_data['Vote for Highest Office (President)'].notnull().all() #return nothing because we do not have NaN values","d028ad0c":"**Missing Data and Testing with Assert**\n\nIf we encounter with missing data, what we can do:\n\n1. leave as is\n2. drop them with dropna()\n3. fill missing value with fillna()\n4. fill missing values with test statistics like mean\n5. Assert statement: check that you can turn on or turn off when you are done with your testing of the program","d71b6c5e":"**Diagnose Data for Cleaning**\n\nWe need to diagnose and clean data before exploring.\n\nUnclean data:\n* Column name inconsistency like upper-lower case letter or space between words\n* Missing data\n* Different language\nLet's check how we use head, tail, columns, shape and info methods to diagnose data","bc77c70a":"**Pivoting Data**\n\nReverse of melting.","08f25534":"**VISUAL EXPLORATORY DATA ANALYSIS**\n\nBox plots: visualize basic statistics like outliers, min\/max or quantiles","d4f6080a":"**Tidy Data**\n\nWe tidy data with melt().","5dc4a6d2":"**EXPLORATORY DATA ANALYSIS**\n\nvalue_counts(): Counts frequency of values\n\noutliers: the value that is considerably higher or lower from rest of the data\n\nLets say value at 75% is Q3 and value at 25% is Q1.\n\nOutlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR\n\nWe will use describe() method. Describe method includes:\n\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry","693050c0":"**Concatenating Data**\n\nWe able to concatenate two dataframe.","33b3928a":"**Data Types**\n\nThere are 5 basic data types: object(string),boolean, integer, float and categorical.\n\nWe can make conversion data types like from str to categorical or from int to float\n\nWhy is category important:\n\n* make dataframe smaller in memory\n* can be utilized for anlaysis especially for sklearn","51d87e6d":"We can drop NaN values easily."}}