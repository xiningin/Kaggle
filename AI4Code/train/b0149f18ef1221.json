{"cell_type":{"3dc05b7d":"code","c505f01b":"code","bee7a0b6":"code","60d399c7":"code","a0b2c45c":"code","ced443fe":"code","1b0cc70b":"code","3b8f19a2":"code","40ab774c":"code","9a970c14":"code","7cd20509":"code","2230d76b":"code","5663452f":"code","d3d028d6":"code","0e6bb4bc":"code","3e9252f0":"code","c4e6408b":"code","682cdd83":"markdown","b7bb55ed":"markdown","79fc2959":"markdown","f7c3d519":"markdown","e6755fed":"markdown","d738fecc":"markdown"},"source":{"3dc05b7d":"from nltk.corpus import movie_reviews     # These are movie reviews already separated as positive and negative.\nmovie_reviews.readme().replace('\\n', ' ').replace('\\t', '').replace('``', '\"').replace(\"''\", '\"').replace('`', \"'\")\n","c505f01b":"movie_reviews.fileids()","bee7a0b6":"len(movie_reviews.fileids())","60d399c7":"movie_reviews.raw(\"neg\/cv000_29416.txt\").replace(\"\\n\", \"\").replace(\"'\", '\"').replace('\"', \"'\") # Note here I found a trick to get rid of \\' in text. However it only works if there were no \" used.","a0b2c45c":"from nltk.corpus import stopwords\n\nstops = stopwords.words('english')\nstops.extend('.,[,],(,),;,\/,-,\\',?,\",:,<,>,n\\'t,|,#,\\'s,\\\",\\'re,\\'ve,\\'ll,\\'d,\\'re'.split(','))\nstops.extend(',')\nstops","ced443fe":"from nltk.classify import NaiveBayesClassifier\nimport nltk.classify.util # Utility functions and classes for classifiers. Contains functions such as accuracy(classifier, gold)\n\n# Given a word, returns a dict {word: True}. This will be our feature in the classifier. \ndef word_feats(words):\n    return dict([(word, True) for word in words if word not in stops and word.isalpha()])\n\npos_ids = movie_reviews.fileids('pos')\nneg_ids = movie_reviews.fileids('neg')\n\nlen(pos_ids) + len(neg_ids) ","1b0cc70b":"# We take the positive\/negative words, create the feature for such words, and store it in a positive\/negative features list.\npos_feats = [(word_feats(movie_reviews.words(fileids=[f])), 'pos') for f in pos_ids]\nneg_feats = [(word_feats(movie_reviews.words(fileids=[f])), 'neg') for f in neg_ids]\n\npos_feats","3b8f19a2":"# 3\/4 of the features will be used for training.\npos_len_train = int(len(pos_feats) * 3 \/ 4)\nneg_len_train = int(len(neg_feats) * 3 \/ 4)\n\npos_len_train","40ab774c":"train_feats = neg_feats[:neg_len_train] + pos_feats[:pos_len_train]\ntest_feats = neg_feats[neg_len_train:] + pos_feats[pos_len_train:]\n\n# Training a NaiveBayesClassifier with our training feature words.\nclassifier = NaiveBayesClassifier.train(train_feats)\n\nprint('Accuracy: ', nltk.classify.util.accuracy(classifier, test_feats))","9a970c14":"# We can see which words fit best in each class.\nclassifier.show_most_informative_features()","7cd20509":"from nltk import word_tokenize, pos_tag\n\nsentence = \"I feel so miserable, it makes me amazing\"\ntokens = [word for word in word_tokenize(sentence) if word not in stops]\ntokens","2230d76b":"feats = word_feats(word for word in tokens)\nfeats","5663452f":"classifier.classify(feats)","d3d028d6":"sentence2 = \"You are a pathetic fool, a terrible excuse for a human being.\"\ntokens2 = [word for word in word_tokenize(sentence2) if word not in stops]\ntokens2","0e6bb4bc":"pos_tags2 = [pos for pos in pos_tag(tokens2) if pos[1] == 'JJ']\npos_tags2","3e9252f0":"feats2 = word_feats([word for (word,_) in pos_tags2])\nfeats2","c4e6408b":"classifier.classify(feats2)","682cdd83":"# Sentiment Analysis","b7bb55ed":"In order to improve the classifier, bigram features can be examined using `nltk.util.ngrams`. This is because, for instance, 'not funny' is very different from 'funny'.","79fc2959":"## 3. Classifying new data","f7c3d519":"## 4. Incorporating bigram features","e6755fed":"## 1. Exploring the `movie_reviews` corpus","d738fecc":"## 2. Building and testing the classifier"}}