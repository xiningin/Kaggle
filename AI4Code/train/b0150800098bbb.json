{"cell_type":{"c00d722f":"code","ef370225":"code","735ef120":"code","8e45a93b":"code","1e355766":"code","bfb65bf7":"code","7d1343b8":"code","a34289d9":"code","5f6ee41e":"code","e5ac110a":"code","ee9427cf":"code","07ff7830":"code","ecc3b625":"code","1cee32a3":"code","367dafa9":"code","b7764693":"code","c81f01eb":"markdown","69d575a4":"markdown","51c6b104":"markdown","e8b28957":"markdown","f92df0ca":"markdown","72b4d3c3":"markdown","61357613":"markdown","cf9805d5":"markdown"},"source":{"c00d722f":"# Importing the necessary libraries (Hidden Input\/Output)\n\n# General Modules\nimport gc\nimport numpy as np\nimport pandas as pd\n\n# Plotly Modules\nimport plotly.express as px\nfrom plotly.offline import iplot\nfrom plotly.tools import FigureFactory as FF\nimport plotly.graph_objects as go\nimport cufflinks as cf\ncf.go_offline()\n\n# Sklearn Modules\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport xgboost as xgb\nfrom sklearn.metrics import roc_auc_score, make_scorer, confusion_matrix\n%matplotlib inline\n\n# To ignore any warning messages\nimport warnings\nwarnings.filterwarnings(\"ignore\")","ef370225":"# Importing the dataset (Hidden Input)\n\nwater = pd.read_csv(\"..\/input\/water-potability\/water_potability.csv\")\nwater.head().style.set_properties(**{\"background-color\": \"#71DFE7\",\"color\": \"black\",\n                                     \"border-color\": \"black\",\"font-size\":\"10pt\",'width': 200})","735ef120":"# Checking the number of rows and columns (Hidden Input)\nprint(\"***********************************\")\nprint(\"Number of Rows:\", water.shape[0])\nprint(\"Number of Columns:\", water.shape[1])\n\n# Checking the percentage of null values (Hidden Input)\n\nprint(\"*****Percentage of Null Values*****\")\nprint(round(water.isnull().sum() * 100\/water.shape[0]))\nprint(\"***********************************\")","8e45a93b":"# Cleaning the data... (Imputing the missing values with Mean)\n\nwater['ph'] = water['ph'].fillna(water['ph'].mean())\nwater['Sulfate'] = water['Sulfate'].fillna(water['Sulfate'].mean())\nwater['Trihalomethanes'] = water['Trihalomethanes'].fillna(water['Trihalomethanes'].mean())","1e355766":"# Scatter Matrix (Hidden Input)\n\nfig = px.scatter_matrix(water, dimensions=water.columns[:-1], color=\"Potability\", height=1500, width=1500, color_continuous_scale=['#71DFE7','black'])\n\ngc.collect() # For memory Optimization\n\nfig.show()","bfb65bf7":"# Sulfate and Trihalomethanes (Hidden Input)\n\nfig = px.scatter(water, x=\"Sulfate\", y=\"Trihalomethanes\", color=\"Potability\", marginal_y=\"violin\",\n           marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\", height=500, width=1000, color_continuous_scale=['#71DFE7','black'])\n\ngc.collect() # For memory Optimization\n\nfig.show()","7d1343b8":"# Ph and Sulfate (Hidden Input)\n\nfig = px.scatter(water, x=\"ph\", y=\"Sulfate\", color=\"Potability\", marginal_y=\"violin\",\n           marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\", height=500, width=1000, color_continuous_scale=['#71DFE7','black'])\n\ngc.collect() # For memory Optimization\n\nfig.show()","a34289d9":"# Ph and Trihalomethanes (Hidden Input)\n\nfig = px.scatter(water, x=\"ph\", y=\"Trihalomethanes\", color=\"Potability\", marginal_y=\"violin\",\n           marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\", height=500, width=1000, color_continuous_scale=['#71DFE7','black'])\n\ngc.collect() # For memory Optimization\n\nfig.show()","5f6ee41e":"#Parallel Coordinate Plot to check how each numerical values vary with one another (Hidden Input)\n\nfig = px.parallel_coordinates(water, color=\"ph\",color_continuous_scale=['#71DFE7','black'], color_continuous_midpoint=2, height=800, width=1200)\n\ngc.collect() # For memory Optimization\n\nfig.show()","e5ac110a":"# Dividing the independent and dependent variables\n\ny = water.pop(\"Potability\")\nX = water","ee9427cf":"# Performing the train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.8, random_state = 42)","07ff7830":"# Standardizing our data (not really required for XGBoost)\n\nscaler = StandardScaler()\n\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","ecc3b625":"# Applying SMOTE to handle imbalance in target variable\n\nsm = SMOTE(random_state = 69, sampling_strategy = 1.0)\n\nX_train, y_train = sm.fit_resample(X_train, y_train)","1cee32a3":"# Building the model using XGBoost Classifier (learning_rate=0.1, max_depth=10, min_child_weight=1, n_estimators=50)\n\nxgb_model = xgb.XGBClassifier(random_state=2, learning_rate=0.1, max_depth=10, min_child_weight=1, n_estimators=50)\n\nxgb_model.fit(X_train, y_train)","367dafa9":"# Checking the ROC_AUC score in the test data\n\nprint(\"AUC on test data by XGBoost: \", roc_auc_score(y_true=y_test, y_score=xgb_model.predict_proba(X_test)[:, 1]))","b7764693":"# Calculating Precision, Recall, Accuracy\n\ncm_test = confusion_matrix(y_test, xgb_model.predict(X_test))\n\nprint(\"Confusion Matrix on Train data: \\n\\n\", cm_test)\n\nTP = cm_test[0][0]\nTN = cm_test[1][1]\nFN = cm_test[0][1]\nFP = cm_test[1][0]\n\nprint(\"Precision\", (TP\/(TP+FP)))\nprint(\"Recall\", (TP\/(TP+FN)))\nprint(\"Accuracy\", (TP+TN)\/(TP+TN+FN+FP))","c81f01eb":"<h1 style=\"font-size:20px;color:#71DFE7;text-align:center\"><strong>If you like\/fork my work, do give this an upvote. Appreciate your support and happy learning!<\/strong><\/h1>","69d575a4":"<h1 style=\"font-size:60px;color:#71DFE7;text-align:left\"><strong>Visualizing<\/strong> <strong style=\"color:black\">Our Data<\/strong><\/h1>","51c6b104":"![water](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/e\/e8\/Share_of_the_population_using_safely_managed_drinking_water%2C_OWID.svg\/1280px-Share_of_the_population_using_safely_managed_drinking_water%2C_OWID.svg.png)\n\n![water 2](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/9\/92\/Population_in_survey_regions_living_without_safely_managed_drinking_water.webp)\n\n![image.png](attachment:fd18e5e1-a576-4758-b970-bb2e92563bbb.png)","e8b28957":"<h1 style=\"font-size:60px;color:#71DFE7;text-align:left\"><strong>Cleaning<\/strong> <strong style=\"color:black\">Our Data<\/strong><\/h1>","f92df0ca":"<h1 style=\"font-size:60px;color:#71DFE7;text-align:left\"><strong>The<\/strong> <strong style=\"color:black\">Conclusion<\/strong><\/h1>\n\n<img src=\"https:\/\/i.makeagif.com\/media\/9-16-2017\/WypuGD.gif\" style=\"width:60%\"><\/img>\n\n<p style=\"font-size:120%\"> Here, we can see that after using the <mark>XGBoost Classifier<\/mark>, we get a <strong>recall<\/strong> of <strong>74%<\/strong>. This is not so great if you ask me.<\/p>\n<p style=\"font-size:120%\"> We also have an <strong>accuracy<\/strong> of <strong>0.67<\/strong>, the model is not doing terrible, but it is definitely struggling.<\/p>\n<p style=\"font-size:120%\"> I might have to do some Feature Engineering and work on better imputation of the missing values. Research is required.<\/p>","72b4d3c3":"<h1 style=\"font-size:80px;color:#71DFE7;text-align:center\"><strong>Exploring Water<\/strong> <strong style=\"color:black\">Potability<\/strong><\/h1>\n\n<img src=\"https:\/\/4.bp.blogspot.com\/-9yKJBR8iDzU\/Ww1FmCgSqTI\/AAAAAAAAF5c\/3FAZsrJWdK4WpFuzHfWzv54M4FWPN_AOwCLcBGAs\/s1600\/tumblr_nskogd74Vh1txvrljo2_r1_500.gif\" style=\"width:70%\"><\/img>\n\n<p style=\"font-size:20px;text-align:center\"> <i><strong>\"Because no matter who we are or where we come from, we're all entitled to the basic human rights of clean air to breathe, clean water to drink, and healthy land to call home.\" <\/strong><\/i> - Martin Luther King III<\/p>","61357613":"<h1 style=\"font-size:60px;color:#71DFE7;text-align:left\"><strong>Building<\/strong> <strong style=\"color:black\">Our Model<\/strong><\/h1>\n\n<img src=\"https:\/\/i.pinimg.com\/originals\/b6\/24\/7d\/b6247df5b48692e6e7194511b917769c.gif\" style=\"width:60%\"><\/img>","cf9805d5":"<h1 style=\"font-size:60px;color:#71DFE7;text-align:left\"><strong>First Look At<\/strong> <strong style=\"color:black\">The Data<\/strong><\/h1>"}}