{"cell_type":{"777e5b66":"code","743c66e7":"code","b696471f":"code","9cf9cd4a":"code","799b5dca":"code","0ba5d5a1":"code","5e312cae":"code","44526ba5":"code","f49c33ed":"code","6ba79f0f":"code","b17e9fad":"code","e9074ab2":"code","431bfa94":"code","12630e63":"code","3125bfe4":"code","c5fa1774":"code","aad2e658":"code","cf5af590":"code","2cd49ec1":"code","1b049f68":"code","e83ceeb6":"code","f93a1e02":"code","3ebb2924":"code","634dd93f":"code","a25a6f5b":"markdown","51c91273":"markdown"},"source":{"777e5b66":"# importing necessary libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib # importing library to change the default setting\nimport matplotlib.pyplot as plt # Visualization\nimport seaborn as sns # Visualization on top of matplotlib\n\n# Let's change the default setting\nsns.set_style('darkgrid')\nmatplotlib.rcParams['font.size'] =8\nmatplotlib.rcParams['figure.figsize'] = (10,6)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'","743c66e7":"#import data\ndf = pd.read_csv(\"..\/input\/car-sales\/Car_sales.csv\")\ndf.head(9)","b696471f":"df.info()","9cf9cd4a":"df.shape","799b5dca":"# Drop duplicate rows\ndf.drop_duplicates(keep ='last')\ndf.shape","0ba5d5a1":"# Dropping unnecessary columns\ndrop_cols = ['Vehicle_type']\ndf = df.drop(drop_cols, axis = 1)","5e312cae":"len(df.columns)","44526ba5":"df.describe()","f49c33ed":"# Sorting w.r.t Fuel Efficiency\ndf_sort = df.sort_values(by = 'Fuel_efficiency', ascending = False)\ndf_sort.head(9)","6ba79f0f":"# Replacing space in column names(i apply this in pretty much every problem)\ndf.columns = df.columns.str.replace(' ', '_')","b17e9fad":"# Finding maximum\/minimum values through function\ndef max_min_val(col):\n    '''\n    This function takes the column name as the argument\n    and returns the top and bottom observations in the dataframe\n    '''\n    first = df[col].idxmax()\n    first_obs = pd.DataFrame(df.loc[first])\n    \n    last = df[col].idxmin()\n    last_obs = pd.DataFrame(df.loc[last])\n    \n    min_max_obs = pd.concat([first_obs, last_obs], axis=1)\n    \n    return min_max_obs\n    ","e9074ab2":"max_min_val('Sales_in_thousands')","431bfa94":"# Creating histogram for continuous numerical variable\nplt.hist(df['Horsepower'],10);","12630e63":"# Probability Distribution Functions\nsns.distplot(df['Horsepower'],10);","3125bfe4":"# Counting it by its category\nmake_dist = df.groupby('Manufacturer').size();\nmake_dist","c5fa1774":"make_dist.plot(title = 'Make Distribution');","aad2e658":"df_num = df.select_dtypes(include = ['float64', 'int64']);\ndf_num.head(9)","cf5af590":"matplotlib.rcParams['font.size'] = 8\nmatplotlib.rcParams['figure.figsize'] = (10,6)\ndf_num.hist(bins=15,xlabelsize=7);\n","2cd49ec1":"# Correlation with Price_in_thousands\ndf_corr = df_num.corr()['Price_in_thousands'][:-1]\ndf_corr","1b049f68":"# Correlation using pairplot\nfor i in range(0, len(df_num.columns),5):\n    sns.pairplot(df_num, y_vars ='Price_in_thousands', x_vars = df_num.columns[i:i+5]  )","e83ceeb6":"# Significant correlation in one plot( Customized Heatmap)\ncorr = df_num.drop('Price_in_thousands', axis =1).corr()\nsns.heatmap(corr[(corr >= 0.5) |(corr <= -0.4)],\n           cmap= 'viridis', vmax = 1.0, vmin = -1.0, linewidths = 0.1,\n           annot = True, annot_kws={\"size\":8}, square =True);","f93a1e02":"df.columns","3ebb2924":"# Boxplot for some categorical variables\nbp1 = sns.boxplot(y='Manufacturer', x='Horsepower', data = df )","634dd93f":"sns.regplot(df['Length'],df['Horsepower']);","a25a6f5b":"***To be continued...***","51c91273":"## Since the shape of our dataset didn't change, means our dataset don't have any duplicate value."}}