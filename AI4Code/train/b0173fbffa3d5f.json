{"cell_type":{"83c1d891":"code","c2c2e323":"code","0680de59":"code","0c554cd8":"code","2e6fd66d":"code","31ed1618":"code","78139336":"code","d6b9a3ba":"code","5dd99c78":"code","e44a9a40":"code","eea2cd72":"code","1d02f7ab":"code","f2bcc781":"code","d7d3aa21":"code","7f12ef2a":"code","2a16b727":"code","b6f9be22":"code","5a1094e8":"code","0aaa3d3c":"code","54c55e65":"code","9f2a8b8c":"code","7f0eea8a":"code","8b4cb61c":"code","df1ff4be":"code","9a17d5a5":"code","78499c48":"code","66ae2ebc":"code","033fd30a":"code","59bd8a45":"code","b2d605ad":"code","cd0204de":"code","8ee7022a":"code","f241a8bd":"code","878139fe":"code","5103643c":"code","667a4504":"code","f284ddfb":"code","88c9795c":"code","078dc077":"code","620105c8":"code","70762f01":"code","8077f691":"code","a3e6a471":"code","fa16f5b2":"code","5b01c84c":"code","3051de2f":"code","4bd3eefb":"code","2839dbb5":"code","3d0eb0d5":"code","5caab5ca":"code","bf67f122":"code","9eefb0e8":"code","db099746":"code","c5636e8d":"code","f19673ea":"code","1ccb33fa":"code","7474a6f8":"code","e8d7e276":"code","c3ba8e70":"code","8750626c":"code","e33ae33a":"code","542f8a2d":"code","6f8dac38":"code","f14066fa":"code","70452972":"code","6657ca09":"code","aa0bff57":"code","849a860a":"code","e7c78a10":"code","ca6d4d97":"code","3f95b5cf":"code","ab9e840d":"code","b1b38152":"code","3afc6154":"code","44124085":"code","79111f71":"code","015e073a":"code","0d37950d":"code","d39b9eb2":"code","d523b40f":"code","84b938d3":"code","8d0bf2f7":"code","e7f35f80":"code","0901e910":"code","6f249a63":"code","13e8a7c5":"code","9434452f":"code","726fead2":"code","a80a2acf":"code","65b6cd9e":"code","b775c0a5":"code","70414d21":"code","09e97e6c":"code","0614554a":"code","c8b3a881":"code","2c677535":"code","b2919a91":"code","d9872575":"code","5004e49b":"code","f12041d3":"code","2e09f871":"code","4c5af55a":"code","a1052a57":"code","ef66fc1b":"code","6b8c4594":"code","345556dc":"code","ff4f328f":"markdown","eaa43a60":"markdown","079aab82":"markdown","c240cc12":"markdown","d8b41785":"markdown","5af77954":"markdown","15fea9ed":"markdown","971b5cf3":"markdown","daeeb134":"markdown","d7febcc6":"markdown","25bd1722":"markdown","8050da2f":"markdown","11192253":"markdown","7589dd0c":"markdown","cd0d0f88":"markdown","8a9f8aa5":"markdown","b21413f6":"markdown","86d6b360":"markdown","d37c9353":"markdown","65bc2bd1":"markdown","51fea90f":"markdown","95bc411f":"markdown","baf6bddd":"markdown","21acfaa4":"markdown","15ef207e":"markdown","7d91622c":"markdown","72009e70":"markdown","da933233":"markdown","61f6bcba":"markdown","e85d2be2":"markdown","43a6c0b6":"markdown","2dbc794b":"markdown","2217299b":"markdown","209bf529":"markdown","a8a44c8c":"markdown","a92b8332":"markdown","3d4240e0":"markdown","cc2c9ac6":"markdown","56351224":"markdown"},"source":{"83c1d891":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2c2e323":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 11000)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0680de59":"brand_data_org = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/skoda.csv')","0c554cd8":"# Using a copy to play on the safe side, making sure the inital Dataframe won't be modified","2e6fd66d":"brand_data = brand_data_org.copy()","31ed1618":"brand_data.info()","78139336":"# no nulls with appropriate data types","d6b9a3ba":"brand_data.describe(include='all')","5dd99c78":"# We have 12 unique models but most of the cars are Fabia\n# 4 different transmission types but most of the cars are Manual transmission\n# 4 different fuel types but most of the cars are running on Petrol\n# It is strange to see min mileage is 5 for used cars!!\n# mpg max = 201.8!! It is not logic to have cars with more than 100 miles per gallon\n# It is also strange to see engine size equal to zero but may be this can be true for electric cars only\n# Let us explore the data in more details","e44a9a40":"fig, axes = plt.subplots(figsize=(15,8),nrows=2, ncols=3)\nsns.histplot(brand_data['year'],ax=axes[0,0])\nsns.histplot(brand_data['mileage'],ax=axes[0,1])\nsns.histplot(brand_data['tax'],ax=axes[0,2])\nsns.histplot(brand_data['mpg'],ax=axes[1,0])\nsns.histplot(brand_data['engineSize'],ax=axes[1,1])\nsns.histplot(brand_data['price'],ax=axes[1,2])","eea2cd72":"## year:       Left Skewed, most used cars are between 2017 to 2020\n\n## mileage:    Right Skewed, since most cars are 5 years old. High correlation between mileage and year is clear.\n##             it is also not logic to have mileage of used cars with values very close to zero or even below 50 miles \n##             (as an assumption)\n\n## tax:        Nothing specific can be concluded, however no correlation with any other field can be noticed\n\n## mpg:        Right Skewed, as mentioned above it is strange to have cars with such extremely excessive fuel consumption \n##             (>100 mpg!!) normally, 80 mpg are the max acceptable consumption which can be achieved by Hybrid cars. \n##             Accordingly, anything above 80 will be considered as outliers\n\n## engineSize: Most used cars engine sizes are 1 & 2 (Peak at 1) \n\n## price:      Right Skewed, since most cars are 5 years old. ","1d02f7ab":"fields_correlation = sns.heatmap(brand_data.corr(), cmap=\"YlGnBu\", annot=True)","f2bcc781":"sns.pairplot(brand_data, kind=\"reg\",plot_kws={'line_kws':{'color':'red'}, 'scatter_kws': {'alpha': 0.1}},diag_kind=\"hist\")","d7d3aa21":"## -Year & Price are +vely correlated - Recent cars sold at higher prices. Logic \n##  (refer to below graphs year vs mean mileage & year vs mean price)\n\n## -Year & mileage are -vely correlated - As the cars gets older (Year decrease) the mileage driven by the car increases. Logic \n##  (refer to below graph mean price vs [mileage grouped by year])\n##  As year and mileage are highly correlated (High Multicollinearity Excpeted), accordingly year will be dropped after \n##  finishing the preprocessing of data\n\n## -Tax has no significant correlation with any of the other features except with mpg. Tax feature is likely to be dropped out.\n\n## -mpg has no significant correlation with any othe features. \n##  It makes sense that cars with bigger engine size has lower mpg. Surpisingly, low correlation with engine size.  \n##  This maybe due to the different fuel and transmission types.  \n\n## -mpg feature is likely to be dropped as well. \n\n## -Year, mileage, enginesize are the most relevant features affecting car price.","7f12ef2a":"year_mile_avgprice=pd.DataFrame\nyear_mile_avgprice=year_mile_avgprice({'mean_price' : brand_data.groupby( [\"year\",'mileage'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)","2a16b727":"import itertools\nmarker = itertools.cycle((',', '+', '.', 'o', '*','s','p','X','d','h','v','^','<','>','1','2','3','4','8','|','_','x')) \nyear_set=sorted(set(year_mile_avgprice['year']), reverse=True)\nplt.figure(figsize=(17,8))\nfor year in year_set:\n     selected_data = year_mile_avgprice.loc[year_mile_avgprice['year'] == year]\n     plt.scatter(selected_data['mileage'], selected_data['mean_price'],marker = next(marker), label=year)\nplt.xlabel('mileage')\nplt.ylabel('mean price')\nplt.legend()","b6f9be22":"# Generally, as the the car gets older it is most likely to have been driven more mileages \n# and consequently the mean price gets lower\n# Despite the heatmap above shows that years is a bit higher in relation with price than mileage but \n# it is most likely to drop year column instead, because same year includes wide range of mileages\n# however a specific mileage values covers a narrow range of years\n# we have a very clear outlier in 2019","5a1094e8":"brand_data.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","0aaa3d3c":"## As shown above a large portion of the prices are considered as outliers\n## This could be due to several reasons:\n## 1. Wide range of models\n## 2. Wide range of engine sizes\n## 3. Wide range of years and mileage\n\n## Therefore, it is not wise to drop all these outliers at this stage","54c55e65":"## Lets try to filter the data for prices above 30,000 and apply box plot again.","9f2a8b8c":"brand_data_above45=brand_data[brand_data['price']>30000]\nbrand_data_above45.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","7f0eea8a":"len(brand_data_above45['price'])","8b4cb61c":"# now we have only 111 outliers (above 30,000). Dataset total len=6267","df1ff4be":"## Since the number of outliers are very small compared to the total length of the main dataframe (6267)\n## It is also expected that this number may also reduce further after completing the preprocessing of data\n## The remaining outliers will be eliminated as it will not have much impact on the model.","9a17d5a5":"brand_data.boxplot(column=['mileage'], by=['fuelType'],figsize=(15,5),vert=0)","78499c48":"brand_data.boxplot(column=['mpg'], by=['fuelType'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","66ae2ebc":"## First, I do not know what \"Other\" could be !!\n## As assumed above, hybrid and diesel offers more miles per gallon than petrol\n## And offcourse hybrid cars are more efficeint\n## As I mentioned earlier as well, the raqnge of mpg for petrol and diesel\n## is normally between 20 aprox to 80 and above 100 is considered as an outlier as shown\n## However, for the hybrid cars, the mpg is remarkably high\n## I wont claim to be an expert in cars but I googled it and could not find any car with such performance","033fd30a":"brand_data.boxplot(column=['mpg'], by=['transmission'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","59bd8a45":"## First, I do not know what \"Other\" could be !!\n## it is very obvious that manual transmission provides more efficient performance\n## No great difference between automatic and semi automatic mpg profiles however semi auto is slightly better than automatic","b2d605ad":"brand_data.boxplot(column=['mpg'], by=['engineSize'],figsize=(15,5))","cd0204de":"## it is not logic to see cars with zero engine size (may OTHER cars?!)\n## Generally, it is logic to observe decrease in mpg with respect to increase in engine size however it is not so clear here!!\n## This will be investigated below but let us count the data features to exculde any minorities that could distbure\n## the visualization","8ee7022a":"fig, axes = plt.subplots(figsize=(20,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).count()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).count()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).count()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).count()['price']\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'Count')\nvis_ftyp.plot(ax=axes[0,1],kind='bar',title = 'Count')\nvis_engS.plot(ax=axes[1,0],kind='bar',title = 'Count')\nvis_trans.plot(ax=axes[1,1],kind='bar',rot=360,title = 'Count')","f241a8bd":"## Some engine sizes are very few in records\n## it is also noticeable that most of the cars are of size 1 and 2 as mentioned above.\n## Most users prefer manual and semi-automatic cars rather than the Automatic ones. \\\n## Other is very few (it is most likey to be error entry)\n## There are not enoguh records for hybrid and other cars, accordingly it will be filtered out for better visulaization of features \n## affecting the mpg of a car and will also be dropped later.","878139fe":"## Now let us check the effect of the fuel type and transmission along with engine size on the mpg of the car\n## but in order to have good visualization, I will visualize engine size vs mpg for each specific fuel type and transmission\n## I will also remove engine size = zero and Hybrid + Other casrs as well","5103643c":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Automatic']\ndf=df[df['fuelType']!='Hybrid']\ndf=df[df['fuelType']!='Other']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","667a4504":"## mpg is more clear here to be decreasing as engine size increases\n## As mentioned before also the normal range of mpg is not higher than 80.","f284ddfb":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Semi-Auto']\ndf=df[df['fuelType']!='Hybrid']\ndf=df[df['fuelType']!='Other']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","88c9795c":"## For Semi automatic cars, same comments applies","078dc077":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Manual']\ndf=df[df['fuelType']!='Hybrid']\ndf=df[df['fuelType']!='Other']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","620105c8":"brand_data.boxplot(column=['price'], by=['year'],figsize=(15,5))","70762f01":"## As shown the range of prices is higher for recent cars","8077f691":"brand_data.boxplot(column=['price'], by=['model'],figsize=(15,5),rot=45)","a3e6a471":"fig, axes = plt.subplots(figsize=(15,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).mean()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).mean()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).mean()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).mean()['price'].sort_values(ascending=False)\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'mean price')\nvis_engS.plot(ax=axes[0,1],kind='bar',title = 'mean price')\nvis_trans.plot(ax=axes[1,0],kind='bar',rot=360,title = 'mean price')\nvis_ftyp.plot(ax=axes[1,1],kind='bar',rot=360,title = 'mean price')","fa16f5b2":"# As concluded above that tax and mpg has no correlation with price or any other feature\n# Tax and mpg columns will be dropped","5b01c84c":"brand_notax=brand_data.drop(['tax'], axis=1)","3051de2f":"brand_notaxmpg=brand_notax.drop(['mpg'], axis=1)","4bd3eefb":"brand_notaxmpg.head()","2839dbb5":"## there are some zero entries in the mileage. We are concerned with used cars\n## Accordingly we will delete any car below 50 mileage records","3d0eb0d5":"mile_min = 50\nbrand_mile = brand_notaxmpg[brand_notaxmpg['mileage']>=mile_min]","5caab5ca":"sns.histplot(brand_mile['mileage'])","bf67f122":"## we will try to remove the mileage outliers by keeping the records upto 99% quartile","9eefb0e8":"mile_skewness=brand_mile['mileage'].skew(axis = 0, skipna = True)","db099746":"if mile_skewness>1:\n    q = brand_mile['mileage'].quantile(0.99)\n    brand_mile= brand_mile[brand_mile['mileage']<q]\nelif mile_skewness<-1:\n    q = brand_mile['mileage'].quantile(0.01)\n    brand_mile= brand_mile[brand_data_mile['mileage']>q]","c5636e8d":"sns.histplot(brand_mile['mileage'])","f19673ea":"sns.distplot(brand_mile['year'])","1ccb33fa":"## we will try to remove the year outliers by keeping the records above 1% quartile","7474a6f8":"brand_year=brand_mile.copy()\nyear_skewness=brand_year['year'].skew(axis = 0, skipna = True)","e8d7e276":"if year_skewness>1:\n    q = brand_year['year'].quantile(0.99)\n    brand_year= brand_year[brand_year['year']<q]\nelif year_skewness<-1:\n    q = brand_year['year'].quantile(0.01)\n    brand_year= brand_year[brand_year['year']>q]","c3ba8e70":"sns.histplot(brand_year['year'])","8750626c":"sns.distplot(brand_year['engineSize'])","e33ae33a":"# We can drop Zero enginesizes or any above 5","542f8a2d":"brand_engsZ=brand_year.copy()","6f8dac38":"brand_engsZ = brand_engsZ[brand_engsZ.engineSize != 0]\nbrand_engsZ.drop(brand_engsZ.index[brand_engsZ['engineSize'] > 5], inplace = True)","f14066fa":"sns.histplot(brand_engsZ['engineSize'])","70452972":"brand_fuel=brand_engsZ.copy()\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Hybrid']\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Other']","6657ca09":"vis_ftyp = brand_fuel.groupby(['fuelType']).count()['price'].sort_values(ascending=False)","aa0bff57":"vis_ftyp.plot(kind='bar')\nplt.show()","849a860a":"# Hybrid Cars has been dropped","e7c78a10":"brand_Trans=brand_fuel.copy()\nbrand_Trans = brand_Trans[brand_Trans.transmission != 'Other']","ca6d4d97":"vis_trans = brand_Trans.groupby(['transmission']).count()['price'].sort_values(ascending=False)","3f95b5cf":"vis_trans.plot(kind='bar')\nplt.show()","ab9e840d":"brand_models=brand_Trans.copy()","b1b38152":"vis_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)","3afc6154":"vis_models.plot(kind='bar')\nplt.show()","44124085":"# there are still some models with very few records\n# I will filter those model with only 1 record for now","79111f71":"brand_model_count=pd.DataFrame\n\nbrand_model_count=brand_model_count({'counts' : brand_models.groupby( [ \"model\"] ).size()}).reset_index()\n\nmin_count=1\n\ncounts_sum=brand_model_count['counts'].sum(axis=0)\nbrand_model_count.drop(brand_model_count[brand_model_count.counts >= min_count].index, inplace=True)\n\na=brand_model_count['model'].tolist()\n\nfor i in range (0,len(a)):\n    brand_models.drop(brand_models[brand_models.model == a[i]].index,inplace=True)\n\nvis_audi_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)\n\nvis_audi_models.plot(kind='bar')\nplt.show()","015e073a":"sns.distplot(brand_models['price'])","0d37950d":"brand_models.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","d39b9eb2":"# After these processing no remarkable effect is noticed on the price boxplot compared to the pervious one","d523b40f":"price_skewness=brand_models['price'].skew(axis = 0, skipna = True)\nprice_skewness","84b938d3":"# price is still highly skewed, we will try to visualize price with model and year for more better spotting of outliers","8d0bf2f7":"brand_models.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","e7f35f80":"# we need to remove price outliers based on model type and year (Assuming that those are the most effective features).\n# we are going to calculate filter between 90% & 95% of each model_year price distribution \n# and exclude the rest in case the price variation is high (coefficient of varitaion >0.7)","0901e910":"model_cstat=pd.DataFrame\nmodel_mstat=pd.DataFrame\nmodel_sdstat=pd.DataFrame\nmodel_cstat=model_cstat({'cnt_price' : brand_models.groupby( [ \"model\",\"year\"] ).count()[\"price\"]}).reset_index()\nmodel_mstat=model_mstat({'mean_price' : brand_models.groupby( [ \"model\",\"year\"] ).mean()[\"price\"]}).reset_index()\nmodel_sdstat=model_sdstat({'std_price' : brand_models.groupby( [ \"model\",\"year\"] ).std()[\"price\"]}).reset_index()\nmodel_stats1 = pd.merge(model_cstat, model_mstat, on=[\"model\", \"year\"])\nmodel_stats2 = pd.merge(model_stats1, model_sdstat, on=[\"model\", \"year\"])\n\nmodel_stats2['std_price'] = model_stats2['std_price'].fillna(0)\n\nmodels_prices=brand_models.copy()\n\nmodels_prices = models_prices.merge(model_stats2, how='inner', left_on=[\"model\", \"year\"], right_on=[\"model\",\"year\"])\nx=1.5\ny=0.7\nmodels_prices['var_coeff']=models_prices['std_price']\/models_prices['mean_price']\nmodels_prices['price_L95']=models_prices['mean_price']-x*models_prices['std_price']\nmodels_prices['price_R95']=models_prices['mean_price']+x*models_prices['std_price']\nmodels_prices['price_L95'] =models_prices['price_L95'].astype(int)\nmodels_prices['price_R95'] =models_prices['price_R95'].astype(int)\n\ndef drop_price(models_prices):\n\n    if (models_prices['var_coeff']>y) and (models_prices['cnt_price'] <4):\n        return 'drop'\n    elif (models_prices['price'] > models_prices['price_R95']) or (models_prices['price'] < models_prices['price_L95']):\n        return 'drop'\n    else:\n        return 'keep'\nmodels_prices['drop_price'] = models_prices.apply(drop_price, axis = 1)\nmodels_prices = models_prices[models_prices.drop_price !='drop']","6f249a63":"models_prices.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","13e8a7c5":"price_skewness=models_prices['price'].skew(axis = 0, skipna = True)\nprice_skewness","9434452f":"# Skewness decreased and as you can see only the oultiers of specific model and year has been cleaned.","726fead2":"# Let us calculate the percentage of records removed out of the original dataset","a80a2acf":"data_removed_perct=100*(len(brand_data)-len(models_prices))\/len(brand_data)\ndata_removed_perct","65b6cd9e":"# Data removed is high but accepted","b775c0a5":"Brand_preprocessed=models_prices.copy()","70414d21":"Brand_preprocessed=Brand_preprocessed.reset_index(drop=True)","09e97e6c":"Brand_preprocessed.info()","0614554a":"Brand_preprocessed.columns.values","c8b3a881":"cols=['price','model', 'year', 'transmission', 'mileage', 'fuelType',\n      'engineSize', 'cnt_price', 'mean_price', 'std_price',\n      'var_coeff', 'price_L95', 'price_R95', 'drop_price']","2c677535":"brand_arranged=Brand_preprocessed.copy()\nbrand_arranged=Brand_preprocessed[cols]","b2919a91":"brand_arranged=brand_arranged.drop(['cnt_price', 'mean_price', 'std_price',\n       'var_coeff', 'price_L95', 'price_R95', 'drop_price'], axis=1)","d9872575":"brand_arranged.describe(include='all')","5004e49b":"year_model_mmile=pd.DataFrame\nyear_model_mmile=year_model_mmile({'mean_mileage' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"mileage\"]}).reset_index().sort_values(by='year',ascending=True)","f12041d3":"model_set=sorted(set(year_model_mmile['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mmile.loc[year_model_mmile['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_mileage'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean mileage')\nplt.legend()","2e09f871":"## Generally, mileage is higher for older cars","4c5af55a":"year_model_mprice=pd.DataFrame\nyear_model_mprice=year_model_mprice({'mean_price' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mprice.loc[year_model_mprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean price')\nplt.legend()\nplt.show()","a1052a57":"year_model_mnprice=pd.DataFrame\nyear_model_mnprice=year_model_mnprice({'min_price' : brand_arranged.groupby( [\"year\",'model'] ).min()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mnprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mnprice.loc[year_model_mnprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['min_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('min price')\nplt.legend()\nplt.show()","ef66fc1b":"year_model_mxprice=pd.DataFrame\nyear_model_mxprice=year_model_mxprice({'max_price' : brand_arranged.groupby( [\"year\",'model'] ).max()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mxprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mxprice.loc[year_model_mxprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['max_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('max price')\nplt.legend()\nplt.show()","6b8c4594":"brand_final=brand_arranged.drop(['year'], axis=1)","345556dc":"# The remaining brands has been explored and preproceesed in the same manner and saved as csv\n\n  # https:\/\/www.kaggle.com\/enginsights\/vw-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/vauxhall-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/bmw-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/audi-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/mercedes-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/hyundai-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/toyota-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/ford-preprocessing-and-exploration\n\n# All CSVs of processed data of all brands will be imported to separate notebook where a regression model is applied\n\n# Please refer to 100K UK Used Cars Model\n\n  # https:\/\/www.kaggle.com\/enginsights\/100k-uk-used-cars-model","ff4f328f":"## Re-arranging Columns","eaa43a60":"### mileage vs mean price [grouped by year]","079aab82":"## Finding Correlations","c240cc12":"### Year-Model vs Min Price","d8b41785":"### price and year ","5af77954":"### Year-Model vs Max Price","15fea9ed":"### Tax feature","971b5cf3":"### Fuel Type","daeeb134":"## Data Exploration","d7febcc6":"### Correlogram for additional visulatization of the relation between each two features ","25bd1722":"### Mean Price vs Other Features","8050da2f":"# Packages","11192253":"### Fuel Type and Mileage","7589dd0c":"### Year Feature","cd0d0f88":"### mpg and transmission","8a9f8aa5":"### mpg and engine size","b21413f6":"#### Observations","86d6b360":"## Further Exploration of Data (Categorical Features and Outliers Visulaization)","d37c9353":"# Exploring Dataset","65bc2bd1":"### mpg, fuel type and transmission","51fea90f":"## Brand","95bc411f":"## Additional Graphs after Processing Data","baf6bddd":"### Price and model","21acfaa4":"### Data Fields Distribution Graphs","15ef207e":"### Year-Model Vs Mean Mileage","7d91622c":"### Count of Features","72009e70":"## Dropping Unwanted Fields","da933233":"### Model","61f6bcba":"### Year-Model vs Mean Price","e85d2be2":"### Mileage feature","43a6c0b6":"### Preocessing Checkpoint","2dbc794b":"## Copying Datasets","2217299b":"### Price","209bf529":"### Transmission","a8a44c8c":"### Price","a92b8332":"### Fuel Type and mpg","3d4240e0":"# Loading Data","cc2c9ac6":"## Preprocessing","56351224":"### Engine Size feature"}}