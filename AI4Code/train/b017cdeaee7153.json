{"cell_type":{"73da27d7":"code","73d514e6":"code","6e64946d":"code","03a2f382":"code","73c1a4fd":"code","4e143a1f":"code","d2c6a514":"code","c9e152c5":"code","0b480776":"code","f1aed2b9":"code","be76b122":"code","7f0e032d":"code","746a4261":"code","8ef1863c":"code","7a2c02d1":"code","aa2a4e20":"code","bd441edd":"code","39953b45":"code","312a2841":"code","6289c124":"code","11af7bd0":"code","6402d67f":"code","a77a5d9c":"code","c7aefb65":"code","cf5aa1bf":"code","d3bff4b9":"code","16e723d4":"markdown","fe083508":"markdown","24374798":"markdown","4530b023":"markdown"},"source":{"73da27d7":"        \nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom sklearn.metrics import accuracy_score","73d514e6":"data = pd.read_csv('..\/input\/prostate-cancer\/Prostate_Cancer.csv')\ndata.head()\n","6e64946d":"data.info()","03a2f382":"print(data.shape)  ","73c1a4fd":"data.describe() ","4e143a1f":"plt.figure(figsize=(10,8))   \nplt.bar(list(data['diagnosis_result'].value_counts().index), data['diagnosis_result'].value_counts(), color = ['g','r'])\nplt.title('Diagnosis Result')\nplt.show()  \nprint(data['diagnosis_result'].value_counts())","d2c6a514":"sns.clustermap(data.corr(),annot=True)","c9e152c5":"data['perimeter x area'] = data['perimeter'] * data['area']","0b480776":"data.head()","f1aed2b9":"sns.pairplot(data, hue = 'diagnosis_result') ","be76b122":"target_dict = {'M': 1, 'B':0}\ndata['diagnosis_result'] = data['diagnosis_result'].map(target_dict)\ndata.head()","7f0e032d":"data['id'].nunique()","746a4261":"data = data.drop('id', axis=1)\ndata.head()","8ef1863c":"y = data['diagnosis_result']\nX = data.drop('diagnosis_result',axis=1)","7a2c02d1":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 42)","aa2a4e20":"print('X_train Shape : {} | y_train Shape : {}'.format(X_train.shape, y_train.shape))\nprint('X_test  Shape : {} | y_test  Shape : {}'.format(X_test.shape, y_test.shape))","bd441edd":"scaler = MinMaxScaler()  \nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","39953b45":"pd.DataFrame(X_train, columns= data.columns[:-1]).head()","312a2841":"pd.DataFrame(X_test, columns= data.columns[:-1]).head()","6289c124":"model = Sequential()\nmodel.add(Dense(32,activation = 'relu',input_dim = X_train.shape[1]))\nmodel.add(Dense(64,activation = 'relu'))\nmodel.add(Dense(1,activation = 'sigmoid'))\nmodel.compile(optimizer = 'adam', loss='binary_crossentropy', metrics=['accuracy'])\nhistory = model.fit(X_train, y_train, epochs = 120, validation_data=(X_test,y_test))\n ","11af7bd0":"plt.figure(figsize=(10,8))\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'],color='orange')\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch') \nplt.show() ","6402d67f":"plt.figure(figsize=(10,8))\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')  \nplt.xlabel('epoch')\nplt.show()","a77a5d9c":"y_pred = model.predict_classes(X_test) \ny_pred \n","c7aefb65":"y_test.shape ","cf5aa1bf":"y_pred = np.squeeze(y_pred)\ny_pred.shape       ","d3bff4b9":"print('Test Accuracy : ',accuracy_score(y_test, y_pred))  ","16e723d4":"# Preprocess","fe083508":"# Tarin-Test Split","24374798":"# Create Neural Network","4530b023":"# Scale Data"}}