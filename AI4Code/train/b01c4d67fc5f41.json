{"cell_type":{"0cdd1c0e":"code","66dc02aa":"code","91aab290":"code","09ff8453":"code","87b630b5":"code","b84f5cf3":"code","dc730250":"code","6f708f1c":"code","b747ac94":"code","fc9b4fb4":"code","e34b9b3a":"code","5c6427f9":"code","6ca48099":"code","cd34f2f3":"code","a607f6f6":"code","4bea2344":"code","62a666e3":"code","691b6606":"code","9e2c2491":"code","b11bd21a":"code","aad07688":"code","b15ffe9c":"code","084de5ec":"code","73b18e19":"code","8669bf47":"markdown","94a2e59f":"markdown"},"source":{"0cdd1c0e":"import numpy as np\nimport pylab as pl\nimport pandas as pd\nimport matplotlib.pyplot as plt \n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.utils import shuffle\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","66dc02aa":"train = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-5\/train.csv\")\ntest = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-5\/test.csv\")","91aab290":"train.info()\ntrain[0:10]","09ff8453":"train = train[['County','Province_State','Country_Region','Date','Population','Weight','Target','TargetValue']]\ntrain.head()","87b630b5":"#Country_Region top 50\ntrain.Country_Region.value_counts()[0:50].plot(kind='bar')\nplt.show()","b84f5cf3":"print(\"Any missing sample in training set:\",train.isnull().values.any())\nprint(\"Any missing sample in test set:\",test.isnull().values.any(), \"\\n\")","dc730250":"train['Date'] = pd.to_datetime(train['Date'])\ntest['Date'] = pd.to_datetime(test['Date'])\n","6f708f1c":"train.info()","b747ac94":"train['Date'] = train['Date'].astype('int64')\ntest['Date'] = test['Date'].astype('int64')","fc9b4fb4":"test.info()","e34b9b3a":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndef FunLabelEncoder(df):\n    for c in df.columns:\n        if df.dtypes[c] == object:\n            le.fit(df[c].astype(str))\n            df[c] = le.transform(df[c].astype(str))\n    return df","5c6427f9":"train = FunLabelEncoder(train)\ntrain.info()\ntrain.iloc[235:300,:]","6ca48099":"test = FunLabelEncoder(test)\ntest.info()\ntest.iloc[235:300,:]","cd34f2f3":"#Frequency distribution of classes\"\ntrain_outcome = pd.crosstab(index=train[\"TargetValue\"],  # Make a crosstab\n                              columns=\"count\")      # Name the count column\n\ntrain_outcome","a607f6f6":"#Select feature column names and target variable we are going to use for training\nfeatures=['County','Province_State','Country_Region','Date','Population','Weight','Target']\ntarget = 'TargetValue'","4bea2344":"#This is input which our classifier will use as an input.\ntrain[features].head(10)","62a666e3":"#Display first 10 target variables\ntrain[target].head(10).values","691b6606":"from sklearn.tree import DecisionTreeClassifier\n\n# We define the model\ndtcla = DecisionTreeClassifier(random_state=None)\n\n\n# We train model\ndtcla.fit(train[features],train[target])","9e2c2491":"#Make predictions using the features from the test data set\npredictions = dtcla.predict(test[features])\n\npredictions","b11bd21a":"pred_list = [int(x) for x in predictions]\n\nresult = pd.DataFrame({'Id': test.index, 'TargetValue': pred_list})\nprint(result)","aad07688":"a=result.groupby(['Id'])['TargetValue'].quantile(q=0.05).reset_index()\nb=result.groupby(['Id'])['TargetValue'].quantile(q=0.5).reset_index()\nc=result.groupby(['Id'])['TargetValue'].quantile(q=0.95).reset_index()","b15ffe9c":"a.columns=['Id','q0.05']\nb.columns=['Id','q0.5']\nc.columns=['Id','q0.95']\na=pd.concat([a,b['q0.5'],c['q0.95']],1)\na['q0.05']=a['q0.05'].clip(0,10000)\na['q0.5']=a['q0.5'].clip(0,10000)\na['q0.95']=a['q0.95'].clip(0,10000)\na","084de5ec":"a['Id'] =a['Id']+ 1\na","73b18e19":"submission=pd.melt(a, id_vars=['Id'], value_vars=['q0.05','q0.5','q0.95'])\nsubmission['variable']=submission['variable'].str.replace(\"q\",\"\", regex=False)\nsubmission['ForecastId_Quantile']=submission['Id'].astype(str)+'_'+submission['variable']\nsubmission['TargetValue']=submission['value']\nsubmission=submission[['ForecastId_Quantile','TargetValue']]\nsubmission.reset_index(drop=True,inplace=True)\nsubmission.to_csv(\"submission.csv\",index=False)\nsubmission.head(50)","8669bf47":"data transformation","94a2e59f":"**submission**"}}