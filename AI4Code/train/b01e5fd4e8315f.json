{"cell_type":{"92096c82":"code","ee3c9932":"code","74f4f049":"code","bce07eca":"code","c10ffdd2":"code","30bc1168":"code","34429456":"code","beacd36b":"code","6e234f9b":"code","651073a4":"markdown","7011da58":"markdown","8e5e957a":"markdown","20e329eb":"markdown","add08b97":"markdown","e86772fe":"markdown","18f96ce1":"markdown"},"source":{"92096c82":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os as os\nimport matplotlib.pyplot as plt","ee3c9932":"global_deaths = pd.read_csv(\"\/kaggle\/input\/jhucovid19\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv\")\n# grouping by country at first (laziness)\nglobal_deaths = global_deaths.groupby([\"Country\/Region\"], as_index=False).sum()\n# removing lat and long, the groupby summed the values...\nglobal_deaths = global_deaths.drop([\"Lat\", \"Long\"], axis=1)\n\n# transposing the columns to rows\nglobal_deaths = global_deaths.transpose()\n# making the top row as columns\nnew_header = global_deaths.iloc[0]\nglobal_deaths.columns = new_header.str.lower()\n# removing the first row from dataframe\nglobal_deaths = global_deaths[1:]\n# converting the main time series index to datetime\nglobal_deaths.index = pd.to_datetime(global_deaths.index)\nglobal_deaths.index = global_deaths.index.rename(\"date\")","74f4f049":"brazil_raw_deaths = pd.read_csv(\"\/kaggle\/input\/corona-virus-brazil\/brazil_covid19.csv\")\nbrazilian_states = brazil_raw_deaths.state.unique()\nbrazil_deaths = pd.DataFrame()\ni = 0\nfor state in brazilian_states:\n    state_deaths = brazil_raw_deaths[brazil_raw_deaths.state==state]\n    #grouping by date if any state has more than one death information by day\n    state_deaths = state_deaths.groupby([\"date\"], as_index=False).max()\n    state_deaths = state_deaths.set_index(\"date\")\n    state_deaths.index = pd.to_datetime(state_deaths.index)\n    state_deaths = state_deaths[[\"deaths\"]]\n    state_deaths = state_deaths.rename(columns={\"deaths\": state.lower()})\n    if i == 0:\n        brazil_deaths = state_deaths\n    else:\n        brazil_deaths = brazil_deaths.join(state_deaths)\n    i += 1","bce07eca":"all_deaths = global_deaths.join(brazil_deaths)\nall_deaths.tail()","c10ffdd2":"min_deaths_count = 0 #configuring how many deaths to start the timeline\ndf_first_deaths = pd.DataFrame(columns=[\"place\", \"event_date\"])\n\n#creating a dataframe with the first death case for each place\nfor label in all_deaths.columns:\n    event_date = all_deaths[all_deaths[label] > min_deaths_count].index.min()\n    # print(label,first_case_date)\n    df_first_deaths = df_first_deaths.append(\n        {\"place\": label,\n         \"event_date\": all_deaths[all_deaths[label] > min_deaths_count].index.min()},\n        ignore_index=True\n    )\n\n    \n#creating a dataframe where all places starts COVID-19 deaths at the same time    \nall_deaths_timeless = pd.DataFrame(index=range(0, all_deaths.shape[0]))\nall_deaths_timeless_item = pd.DataFrame()\nall_deaths_timeless.index.values\ncolumn_names = []\nfor index, row in df_first_deaths.iterrows():\n    all_deaths_timeless_item = all_deaths[[row[\"place\"]]][all_deaths.index >= row[\"event_date\"]]\n    all_deaths_timeless_item.index = range(0, all_deaths_timeless_item.shape[0])\n    all_deaths_timeless = pd.concat(\n        [all_deaths_timeless, all_deaths_timeless_item],\n        ignore_index=True, axis=1\n    )\n    column_names.append(row[\"place\"])\n\nall_deaths_timeless.columns = column_names\nall_deaths_timeless.head()","30bc1168":"places = [\"Brazil\", \"Rio de Janeiro\", \"Italy\", \"S\u00e3o Paulo\"]\ndays = 28\nis_logarithmic = True\nplaces = [x.lower() for x in places]","34429456":"filtered_deaths = all_deaths_timeless[places]\nfiltered_deaths = filtered_deaths[filtered_deaths.index <= days]\nif is_logarithmic:\n    title = \"COVID-19 Total Deaths (logarithmic)\"\nelse:\n    title = \"COVID-19 Total Deaths (linear)\"\n    \nfiltered_deaths.plot(logy=is_logarithmic)","beacd36b":"places = [\"Brazil\", \"Rio de Janeiro\", \"Italy\", \"S\u00e3o Paulo\", \"Spain\", \"US\"]\ndays = 25\nis_logarithmic = True\nplaces = [x.lower() for x in places]\n\nfiltered_deaths = all_deaths_timeless[places]\nfiltered_deaths = filtered_deaths[filtered_deaths.index <= days]\nif is_logarithmic:\n    title = \"COVID-19 Total Deaths (logarithmic)\"\nelse:\n    title = \"COVID-19 Total Deaths (linear)\"\n    \nfiltered_deaths.plot(logy=is_logarithmic)","6e234f9b":"all_deaths_timeless.plot(legend=False) #trust me with legend the chart xplodes","651073a4":"# Its time!","7011da58":"# Finally some plot?\nNop!!! First, say to python (and me) what places, how many days would you like to see, please\neg:","8e5e957a":"# Why Compare?\nBrazil has states that can be comparable in population and area to some countries in the World. So I combined [Raphael Fontes data](https:\/\/www.kaggle.com\/unanimad\/corona-virus-brazil) with [University Johns Hopkins COVID-19](https:\/\/www.kaggle.com\/benhamner\/jhucovid19) data to make such comparison more visible.\n\n# Why just deaths?\nI started by deaths because at this time I am trusting more in deaths reported numbers than confirmed cases reported numbers.\n\n# N\u00e3o \u00e9 s\u00f3 uma gripezinha\nThe text above is reference to our president (Brazilians President) who claims COVID-19 is just a small flu.","20e329eb":"# My prefered filter to compare\n","add08b97":"# And now?\nNow we have all world countries adn Brazil states in the same dataframe, but as you know, COVID-19 deaths started in different dates in each place. So I prefered align all timelines at first death. The next code treat this.","e86772fe":"# Freedom\nNow you can adjust to your preferences and make comparisons that makes sense for you. It's just a didatical beginner code to explain my way to see this kind of chart.\n\n# N\u00e3o \u00e9 s\u00f3 uma gripezinha\n","18f96ce1":"# What if\nI just plot all info at the same time?"}}