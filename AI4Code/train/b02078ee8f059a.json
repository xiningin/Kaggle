{"cell_type":{"e4c7e1d5":"code","ca7fd07f":"code","fb80f752":"code","47917d27":"code","3ee29a75":"code","cc0f47cc":"code","5a36e6e8":"code","b64799b4":"code","6659fc9a":"code","64fe31ba":"code","fe7a4d6a":"code","d516bce4":"code","fdc0ea96":"code","2128a49b":"code","7759d457":"code","830359c0":"code","587298ee":"code","8908a275":"code","61937e2a":"code","a2c6d8c2":"code","bedcef49":"code","e09e99f9":"code","eb0cbebb":"code","1f4b2e6b":"code","230972b9":"code","7dd944eb":"code","932d9888":"code","ccdb9161":"code","161f7d0d":"code","bc37ccf4":"code","d52f0d07":"code","5d1d9f28":"code","32592235":"code","3ffd38a0":"code","bfa7d7b6":"code","aaad53e4":"code","3aad525a":"code","22a5b66a":"code","b9c1453f":"code","e89d622a":"code","ca4277e3":"code","5f60eb49":"code","266345eb":"code","52b042b0":"code","ff1bdfba":"code","25150a37":"code","7d9d52a7":"code","2cd2f69f":"code","d2847cee":"code","cf05a074":"code","1d40b6ed":"code","f20f0c9b":"code","90e95dd4":"code","b0117a5e":"code","c9e9b583":"code","df410c3a":"code","6508d096":"code","10240b9e":"code","5fb72da9":"code","7c6a0a71":"code","a64b6b22":"code","e4a827b8":"code","891baf40":"code","aa09bdb2":"code","a6de6d81":"code","e3be8547":"code","c176512f":"code","09d2c502":"code","2f9c86d1":"code","5e9fd244":"code","3e56dcaf":"code","d010104c":"code","756d7597":"code","124c9eb3":"code","78d72d10":"code","8012722f":"code","b52c7aae":"markdown","32acadf2":"markdown","1014200a":"markdown","66e0d3bf":"markdown","9636cf27":"markdown","7707cd27":"markdown","31e28473":"markdown","44587f1d":"markdown","b37d8fca":"markdown","7f1d4078":"markdown","28f0e02c":"markdown","948cb9d9":"markdown","e012b134":"markdown","725493f1":"markdown","fccb9f59":"markdown","58740a1b":"markdown","08c6f86f":"markdown","2ebebed5":"markdown","13d014cd":"markdown","9453cd3c":"markdown","29c15332":"markdown","421680d1":"markdown","b9124c8c":"markdown","cd74274f":"markdown","0fe5ee20":"markdown","3bd186e8":"markdown","62d2237d":"markdown","b7005249":"markdown","2d5ea24d":"markdown","633ec35e":"markdown","162cf3e8":"markdown","863a18d2":"markdown","384fd080":"markdown","2b8ca047":"markdown","a841630b":"markdown","3f2741da":"markdown","803a3566":"markdown","7a9e96c0":"markdown","c7eb8acd":"markdown","49933fe4":"markdown","ef9fcbc2":"markdown","97ef52b4":"markdown"},"source":{"e4c7e1d5":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport re\nfrom scipy import sparse\n\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.model_selection import cross_val_score \nfrom sklearn.model_selection import StratifiedKFold \nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\n\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.cluster import KMeans\n\n\nfrom nltk.corpus import stopwords\nfrom gensim.models.word2vec import Word2Vec\nfrom gensim.models.doc2vec import Doc2Vec, TaggedDocument\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ca7fd07f":"import warnings\nwarnings.filterwarnings('ignore')","fb80f752":"df_train = pd.read_csv('\/kaggle\/input\/ocrv-intent-classification\/train.csv', index_col='id')\ndf_test = pd.read_csv('\/kaggle\/input\/ocrv-intent-classification\/test.csv', index_col='id')","47917d27":"print(df_train.info())\nprint(df_train.head(10))\nprint(df_train.describe())","3ee29a75":"print(df_test.info())\nprint(df_test.head(10))\nprint(df_test.describe())","cc0f47cc":"print('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u0432 \u043e\u0431\u0443\u0447\u0430\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445: {}'.format(df_train['text'].isnull().sum()))\nprint('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445: {}'.format(df_test['text'].isnull().sum()))","5a36e6e8":"df_train['label'].value_counts()","b64799b4":"sns.set()\nplt.figure(figsize = (12,8))\n_=sns.countplot(df_train['label'])\n_.set_xticklabels(_.get_xticklabels(),rotation=45, horizontalalignment='right', fontweight='light', fontsize='large')\nplt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435', fontsize=18)\nplt.xlabel('')\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432')\nplt.show()","6659fc9a":"f, axes = plt.subplots(1, 2, figsize=(12, 6), sharex=True, sharey=True)\nsns.distplot(df_train['text'].apply(lambda x: len(str(x))), hist=True, ax=axes[0])\naxes[0].set_title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u043d \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435')\naxes[0].set_xlabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432')\nsns.distplot(df_test['text'].apply(lambda x: len(str(x))), hist=True, ax=axes[1])\naxes[1].set_title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u043d \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435')\naxes[1].set_xlabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432')\nplt.tight_layout()\nplt.show()","64fe31ba":"plt.figure(figsize = (12,8))\n_=sns.boxplot(y = df_train['text'].apply(lambda x: len(str(x))), x='label', data=df_train)\n_.set_xticklabels(_.get_xticklabels(),rotation=45, horizontalalignment='right', fontweight='light', fontsize='large')\nplt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u043d \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438', fontsize=16)\nplt.xlabel('')\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432')\nplt.show()","fe7a4d6a":"pd.set_option('display.max_colwidth', -1)","d516bce4":"df_train[df_train['text'].isnull()].label.value_counts()","fdc0ea96":"df_train[df_train['text'].duplicated()].count()","2128a49b":"df_test[df_test['text'].duplicated()].count()","7759d457":"f, axes = plt.subplots(1, 2, figsize=(12, 6), sharey=True)\ndf_train.groupby('text')['text'].count().sort_values(ascending=False)[:15].plot(kind='bar', ax=axes[0])\naxes[0].set_title('\u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445')\naxes[0].set_xlabel('')\ndf_test.groupby('text')['text'].count().sort_values(ascending=False)[:15].plot(kind='bar', ax=axes[1])\naxes[1].set_title('\u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445')\naxes[1].set_xlabel('')\nplt.tight_layout()\nplt.show()","830359c0":"(df_train.groupby('text')['label'].nunique()>1).sum()","587298ee":"df_train['text'] = df_train['text'].fillna(' ')\ndf_test['text'] = df_test['text'].fillna(' ')","8908a275":"def clean(string):\n    '''Clean text from special charachters and lowercase string'''\n    string = str(string)\n    clean_text = re.sub(r'[,.!-?_]+', ' ', string)\n    clean_text = ' '.join(re.findall(r\"\\w+\", string.lower()))\n    return clean_text ","61937e2a":"def make_clean(df):\n    '''Create a column with cleaned text'''\n    df['text_clean'] = df['text'].apply(clean)\n    return df","a2c6d8c2":"stop_words = stopwords.words('russian')\nwords_add=['\u043a\u043e\u0442\u043e\u0440\u044b\u0439', '\u043e\u0447\u0435\u043d\u044c', '\u0435\u0449\u0435', '\u044d\u0442\u043e', '\u0437\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c','\u0437\u0434\u0440\u0430\u0441\u0442\u0435','\u0437\u0434\u0440\u0430\u0441\u0442\u0432\u0443\u0439\u0442\u0435']\nfor word in words_add:\n    stop_words.append(word)\nwords_excep = ['\u043d\u0435\u0442', '\u0434\u0440\u0443\u0433\u043e\u0439', '\u043a\u0430\u043a\u043e\u0439', '\u043a\u0430\u043a\u0430\u044f', '\u043c\u043e\u0439', '\u043a\u0430\u043a', '\u0434\u043b\u044f', '\u0431\u0435\u0437', '\u043d\u0430', '\u0433\u0434\u0435', '\u043d\u0438\u0447\u0435\u0433\u043e']\nstop_words = [word for word in stop_words if word not in words_excep]\nprint('\u0427\u0438\u0441\u043b\u043e \u0441\u0442\u043e\u043f-\u0441\u043b\u043e\u0432: {}'.format(len(stop_words)))","bedcef49":"def del_stops(df):\n    '''Create text column in df cleaned from stop words'''    \n    df['text_stop'] = df['text_clean'].apply(lambda string: [word for word in string.split() if word not in stop_words])\n    return df","e09e99f9":"def stem(string):\n    '''Remove some word endings'''\n    words = string.split() \n    res = list()\n    words_stop = ['\u043a\u0430\u043a\u043e\u0439','\u043a\u0430\u043a\u0430\u044f','\u043a\u0430\u043a\u043e\u0435','\u043a\u0430\u043a\u0438\u0435', '\u043a\u0430\u043a\u0443\u044e','\u043a\u0430\u043a\u043e\u0433\u043e','\u043a\u0430\u043a\u0438\u043c','\u043a\u0430\u043a\u043e\u043c','\u043a\u0430\u043a\u043e\u043c\u0443', '\u043a\u0430\u043a\u0438\u0445']  # not to confuse with '\u043a\u0430\u043a' which may be important\n    \n    pattern1 = re.compile(\"(\u0435\u0435|\u0438\u0435|\u044b\u0435|\u043e\u0435|\u0438\u043c\u0438|\u044b\u043c\u0438|\u0435\u0439|\u0438\u0439|\u044b\u0439|\u043e\u0439|\u0435\u043c|\u0438\u043c|\u044b\u043c|\u043e\u043c|\u0435\u0433\u043e|\u043e\u0433\u043e|\u0435\u043c\u0443|\u043e\u043c\u0443|\u0438\u0445|\u044b\u0445|\u0443\u044e|\u044e\u044e|\u0430\u044f|\u044f\u044f|\u043e\u044e|\u0435\u044e)$\")    \n    pattern2 = re.compile(u\"(\u0430|\u0435\u0432|\u043e\u0432|\u0438\u0435|\u044c\u0435|\u0435|\u0438\u044f\u043c\u0438|\u044f\u043c\u0438|\u0430\u043c\u0438|\u0435\u0438|\u0438\u0438|\u0438|\u0438\u0435\u0439|\u0435\u0439|\u043e\u0439|\u0438\u0439|\u0439|\u0438\u044f\u043c|\u044f\u043c|\u0438\u0435\u043c|\u0435\u043c|\u0430\u043c|\u043e\u043c|\u043e|\u0443|\u0430\u0445|\u0438\u044f\u0445|\u044f\u0445|\u044b|\u044c|\u0438\u044e|\u044c\u044e|\u044e|\u0438\u044f|\u044c\u044f|\u044f)$\")   \n    pattern3 = re.compile(u\"((\u0438\u043b\u0430|\u044b\u043b\u0430|\u0435\u043d\u0430|\u0435\u0439\u0442\u0435|\u0443\u0439\u0442\u0435|\u0438\u0442\u0435|\u0438\u043b\u0438|\u044b\u043b\u0438|\u0435\u0439|\u0443\u0439|\u0438\u043b|\u044b\u043b|\u0438\u043c|\u044b\u043c|\u0435\u043d|\u0438\u043b\u043e|\u044b\u043b\u043e|\u0435\u043d\u043e|\u044f\u0442|\u0443\u0435\u0442|\u0443\u044e\u0442|\u0438\u0442|\u044b\u0442|\u0435\u043d\u044b|\u0438\u0442\u044c|\u044b\u0442\u044c|\u0438\u0448\u044c|\u0443\u044e|\u044e)|((?<=[\u0430\u044f])(\u043b\u0430|\u043d\u0430|\u0435\u0442\u0435|\u0439\u0442\u0435|\u043b\u0438|\u0439|\u043b|\u0435\u043c|\u043d|\u043b\u043e|\u043d\u043e|\u0435\u0442|\u044e\u0442|\u043d\u044b|\u0442\u044c|\u0435\u0448\u044c|\u043d\u043d\u043e)))$\")\n    \n    for word in words:   \n        if re.search(pattern1, word):  #adjective\n            if word not in words_stop:\n                res.append(re.sub(pattern1,'', word))\n            else:                 \n                res.append(re.sub(pattern1,'_', word))\n                \n        elif re.search(pattern2, word):  #noun\n            res.append(re.sub(pattern2,'', word))\n            \n        elif re.search(pattern3, word):  #verb\n            res.append(re.sub(pattern3,'', word))\n            \n        else:  #anything else\n            res.append(word)\n            \n    return res","eb0cbebb":"def make_stems(df):\n    '''Create text column in df with list of stemmed words'''\n    df['text_stop'] = df['text_stop'].apply(lambda x: ' '.join(x))\n    df['text_stem'] = df['text_stop'].apply(lambda x: stem(x))\n    return df","1f4b2e6b":"def preprocess(df):\n    '''Preprocess text data in a dataframe'''\n    df_prep = df.copy()\n    df_prep = make_clean(df_prep) \n    df_prep = del_stops(df_prep) \n    df_prep = make_stems(df_prep)                                                                               \n        \n    return df_prep","230972b9":"df_train = preprocess(df_train)\ndf_train.head(5)","7dd944eb":"df_test = preprocess(df_test)\ndf_test.head(5)","932d9888":"def make_split(test_size = 0.2):\n    '''Returns X_train, X_test, y_train, y_test'''    \n    X_train, X_test, y_train, y_test = train_test_split(df_train['text_stem'], df_train['label'], test_size = 0.2, random_state = 42, stratify = df_train['label'])    \n    X_train_joint = X_train.apply(lambda x: ' '.join(x))\n    X_test_joint = X_test.apply(lambda x: ' '.join(x))\n    return X_train_joint, X_test_joint, y_train, y_test","ccdb9161":"X_train, X_test, y_train, y_test = make_split()\nprint(u'\u0420\u0430\u0437\u043c\u0435\u0440 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438: {}'.format(X_train.shape))\nprint(u'\u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438: {}'.format(X_test.shape))","161f7d0d":"def tfidf_vectors(vectorizer, X_train, X_test, printed=True):\n    '''Return tf-idf features'''\n    features_train = vectorizer.fit_transform(X_train)\n    features_test = vectorizer.transform(X_test)\n    if printed:\n        print(u'\u0420\u0430\u0437\u043c\u0435\u0440 \u0441\u043b\u043e\u0432\u0430\u0440\u044f: {} \u0441\u043b\u043e\u0432'.format(features_train.shape[1]))\n    return features_train, features_test","bc37ccf4":"# Word Bigrams\nvectorizer = TfidfVectorizer(analyzer='word', lowercase = False, ngram_range=(1,2), min_df = 1, dtype=np.float32)\nfeatures_train, features_test = tfidf_vectors(vectorizer, X_train, X_test)","d52f0d07":"# Word Trigrams\nvectorizer1 = TfidfVectorizer(max_features=30000,analyzer='word', lowercase = False, ngram_range=(1,3), dtype=np.float32)\nfeatures_train1, features_test1 = tfidf_vectors(vectorizer1, X_train, X_test)","5d1d9f28":"# Word Trigrams + Chars\nvectorizer_word = TfidfVectorizer(max_features=1000, analyzer='word', lowercase = False, ngram_range=(1,3), dtype=np.float32)\nvectorizer_char = TfidfVectorizer(max_features=40000, lowercase=False, analyzer='char', ngram_range=(3,6),dtype=np.float32)\nfeatures_train2, features_test2 = tfidf_vectors(vectorizer_word, X_train, X_test)\ncharfeat_train, charfeat_test = tfidf_vectors(vectorizer_char, X_train, X_test)\nfull_feattrain = sparse.hstack([features_train2, charfeat_train])\nfull_feattest= sparse.hstack([features_test2, charfeat_test])","32592235":"# Just to compare with the baseline:\nvectorizer_word2 = TfidfVectorizer(max_features=1000, analyzer='word', lowercase = True, ngram_range=(1,3), dtype=np.float32)\nvectorizer_char2 = TfidfVectorizer(max_features=40000, lowercase= True, analyzer='char', ngram_range=(3,6),dtype=np.float32)\nfeatures_train3, features_test3 = tfidf_vectors(vectorizer_word2, df_train.loc[X_train.index,'text'], df_train.loc[X_test.index,'text'])\ncharfeat_train3, charfeat_test3 = tfidf_vectors(vectorizer_char2, df_train.loc[X_train.index,'text'], df_train.loc[X_test.index,'text'])\nfull_feattrain3 = sparse.hstack([features_train3, charfeat_train3])\nfull_feattest3= sparse.hstack([features_test3, charfeat_test3])","3ffd38a0":"kf = StratifiedKFold(n_splits = 5, shuffle=True, random_state = 42)","bfa7d7b6":"def cross_val(model, features_train=features_train, features_test=features_test):\n    '''Train ML model and get cross val score'''\n    cv_results = cross_val_score(model, features_train, y_train, scoring='f1_macro', cv=kf)\n    print(cv_results)\n    print('F1-score: {}'.format(cv_results.mean()))","aaad53e4":"naiv_model = MultinomialNB(0.005)\ncross_val(naiv_model, features_train, features_test)","3aad525a":"naiv_model = MultinomialNB(0.005)\ncross_val(naiv_model, features_train1, features_test1)","22a5b66a":"naiv_model = MultinomialNB(0.005)\ncross_val(naiv_model, full_feattrain, full_feattest)","b9c1453f":"naiv_model = MultinomialNB(0.005)\ncross_val(naiv_model, full_feattrain3, full_feattest3)","e89d622a":"lg_model = LogisticRegression(C=5, random_state = 123, solver='lbfgs', multi_class='multinomial')","ca4277e3":"cross_val(lg_model, features_train, features_test)","5f60eb49":"cross_val(lg_model, features_train1, features_test1)","266345eb":"cross_val(lg_model, full_feattrain, full_feattest)","52b042b0":"lg_model = LogisticRegression(C=23, n_jobs = 5, random_state = 123, solver='lbfgs', multi_class='multinomial', warm_start=True)\ncross_val(lg_model, full_feattrain3, full_feattest3)","ff1bdfba":"#rf_model = RandomForestClassifier()\n#cross_val(rf_model, features_train, features_test)\n#cross_val(rf_model, features_train1, features_test1)\n#cross_val(rf_model, full_feattrain, full_feattest)\n#cross_val(rf_model, full_feattrain3, full_feattest3)","25150a37":"sgd_model = SGDClassifier(loss='modified_huber', penalty='l2', random_state =123, alpha=0.0001)","7d9d52a7":"cross_val(sgd_model, features_train, features_test)","2cd2f69f":"cross_val(sgd_model, features_train1, features_test1)","d2847cee":"cross_val(sgd_model, full_feattrain, full_feattest)","cf05a074":"cross_val(sgd_model, full_feattrain3, full_feattest3)","1d40b6ed":"def grid_model(model, parameters, features_train=features_train, features_test=features_test):\n    '''Train ML model, get predictions and score'''\n    cv = GridSearchCV(model, param_grid=parameters)\n    cv.fit(features_train, y_train)\n    y_pred = cv.predict(features_test)\n    print('\u041b\u0443\u0447\u0448\u0438\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: {}'.format(cv.best_params_))\n    print('\u041b\u0443\u0447\u0448\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430: {}'.format(cv.best_score_))\n    score = f1_score(y_test, y_pred, average='macro')\n    print('F1-score of {}: {}'.format(cv, score))\n    print(classification_report(y_test, y_pred))\n    return y_pred","f20f0c9b":"lg_model = LogisticRegression(random_state = 123, solver='lbfgs', multi_class='multinomial')\nlg_parameters = [{'C':[1,5,10,15]}]\ny_pred_lg = grid_model(lg_model, lg_parameters, full_feattrain, full_feattest)","90e95dd4":"lg_model = LogisticRegression(C=20,random_state = 123, n_jobs=5,solver='lbfgs', multi_class='multinomial')\ncross_val(lg_model, full_feattrain, full_feattest)\nlg_model.fit(full_feattrain, y_train)\ny_pred = lg_model.predict(full_feattest)\nf1_score(y_test, y_pred, average='macro')","b0117a5e":"sgd_model = SGDClassifier(loss='modified_huber', penalty='l2', random_state =123)\nsgd_parameters = [{'alpha': np.logspace(-6, 2, 20)}]\ny_pred_sgd = grid_model(sgd_model, sgd_parameters, full_feattrain, full_feattest)","c9e9b583":"sgd_model = SGDClassifier(loss='modified_huber', penalty='l2', random_state =123, alpha = 0.0001)\nsgd_model.fit(full_feattrain, y_train)\ny_pred = sgd_model.predict(full_feattest)\nf1_score(y_test, y_pred, average='macro')","df410c3a":"clf = OneVsRestClassifier(LogisticRegression(C=5, n_jobs=5, random_state = 123, solver='lbfgs', multi_class='multinomial'))\ncross_val(clf, full_feattrain, full_feattest)\nclf.fit(full_feattrain, y_train)\ny_pred = clf.predict(full_feattest)\nf1_score(y_test, y_pred, average='macro')","6508d096":"clf = OneVsRestClassifier(LogisticRegression(C=20,random_state = 123, n_jobs=5,solver='lbfgs', multi_class='multinomial'))\ncross_val(clf, full_feattrain, full_feattest)\nclf.fit(full_feattrain, y_train)\ny_pred = clf.predict(full_feattest)\nf1_score(y_test, y_pred, average='macro')","10240b9e":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0441\u0442\u043e\u043b\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0439 \u0432 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430\u0445 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430.\ncnf_matrix = confusion_matrix(y_test, y_pred)\ndf_cm = pd.DataFrame(cnf_matrix, index = y_test.value_counts().index, columns = y_test.value_counts().index)\ndf_cmr = df_cm.apply(lambda x: x\/np.sum(x), axis=1)\ndf_cmr = df_cmr.apply(lambda x: round(x,2), axis=1)\nplt.figure(figsize = (10,7))\nsns.heatmap(df_cmr, annot=True)\nplt.xlabel('Predicted class')\nplt.ylabel('True class')\nplt.show()","5fb72da9":"clf = OneVsRestClassifier(SGDClassifier(loss='modified_huber', penalty='l2', random_state =123, alpha = 0.0001))\ncross_val(clf, full_feattrain, full_feattest)\nclf.fit(full_feattrain, y_train)\ny_pred = clf.predict(full_feattest)\nf1_score(y_test, y_pred, average='macro')","7c6a0a71":"model_lg = OneVsRestClassifier(LogisticRegression(C=20,random_state = 123, n_jobs=5,solver='lbfgs', multi_class='multinomial'))\nmodel_lg.fit(full_feattrain, y_train)\npred_lg = model_lg.predict(full_feattrain)\npred_lg_test = model_lg.predict(full_feattest)","a64b6b22":"model_sgd = SGDClassifier(loss='modified_huber', penalty='l2', random_state =123, alpha = 0.0001)\nmodel_sgd.fit(full_feattrain, y_train)\npred_sgd = model_sgd.predict(full_feattrain)\npred_sgd_test = model_sgd.predict(full_feattest)","e4a827b8":"model_base = LogisticRegression(C=23, n_jobs = 5, random_state = 123, solver='lbfgs', multi_class='multinomial', warm_start=True)\nmodel_base.fit(full_feattrain3, y_train)\npred_base = model_base.predict(full_feattrain3)\npred_base_test = model_base.predict(full_feattest3)","891baf40":"df_stack2 = pd.DataFrame({'pred_lg': pred_lg, 'pred_sgd': pred_sgd, 'pred_base': pred_base,'label': y_train})\nprint(df_stack2.shape)\nprint(df_stack2.head(5))\ndf_stack2 = pd.get_dummies(df_stack2.drop('label', axis=1))\nprint(df_stack2.shape)","aa09bdb2":"df_stack_test2 = pd.DataFrame({'pred_lg_test': pred_lg_test, 'pred_sgd_test': pred_sgd_test, 'pred_base': pred_base_test, 'label': y_test})\nprint(df_stack_test2.shape)\nprint(df_stack_test2.head(15))\ndf_stack_test2 = pd.get_dummies(df_stack_test2.drop('label', axis=1))\nprint(df_stack_test2.shape)","a6de6d81":"X_train_stack = sparse.hstack([full_feattrain, df_stack2])\nX_test_stack = sparse.hstack([full_feattest, df_stack_test2])\nprint(X_train_stack.shape)\nprint(X_test_stack.shape)","e3be8547":"clf = OneVsRestClassifier(LogisticRegression(C=20,random_state = 123, n_jobs=5,solver='lbfgs', multi_class='multinomial'))\nclf.fit(X_train_stack, y_train)\ny_pred = clf.predict(X_test_stack)\nf1_score(y_test, y_pred, average='macro')","c176512f":"vectorizer_word = TfidfVectorizer(max_features=1000, analyzer='word', lowercase = False, ngram_range=(1,3), dtype=np.float32)\nvectorizer_char = TfidfVectorizer(max_features=40000, lowercase=False, analyzer='char', ngram_range=(3,6),dtype=np.float32)\n\nfeatures_train_all = vectorizer_word.fit_transform(df_train['text_stem'].apply(lambda x: ' '.join(x)))\nfeatures_test_all = vectorizer_word.transform(df_test['text_stem'].apply(lambda x: ' '.join(x)))\n\ncharfeat_train_all = vectorizer_char.fit_transform(df_train['text_stem'].apply(lambda x: ' '.join(x)))\ncharfeat_test_all = vectorizer_char.transform(df_test['text_stem'].apply(lambda x: ' '.join(x)))\n\nfull_feattrain_all = sparse.hstack([features_train_all, charfeat_train_all])\nfull_feattest_all = sparse.hstack([features_test_all, charfeat_test_all])","09d2c502":"vectorizer_word = TfidfVectorizer(max_features=1000, analyzer='word', lowercase = True, ngram_range=(1,3), dtype=np.float32)\nvectorizer_char = TfidfVectorizer(max_features=40000, lowercase=True, analyzer='char', ngram_range=(3,6),dtype=np.float32)\n\nfeatures_train_all3 = vectorizer_word.fit_transform(df_train['text'].apply(lambda x: np.str_(x)))\nfeatures_test_all3 = vectorizer_word.transform(df_test['text'].apply(lambda x: np.str_(x)))\n\ncharfeat_train_all3 = vectorizer_char.fit_transform(df_train['text'].apply(lambda x: np.str_(x)))\ncharfeat_test_all3 = vectorizer_char.transform(df_test['text'].apply(lambda x: np.str_(x)))\n\nfull_feattrain_all3 = sparse.hstack([features_train_all3, charfeat_train_all3])\nfull_feattest_all3 = sparse.hstack([features_test_all3, charfeat_test_all3])","2f9c86d1":"model_lg = OneVsRestClassifier(LogisticRegression(C=20,random_state = 123, n_jobs=5,solver='lbfgs', multi_class='multinomial'))\nmodel_lg.fit(full_feattrain_all, df_train['label'])\npred_lg = model_lg.predict(full_feattrain_all)\npred_lg_test = model_lg.predict(full_feattest_all)","5e9fd244":"model_sgd = SGDClassifier(loss='modified_huber', penalty='l2', random_state =123, alpha = 0.0001)\nmodel_sgd.fit(full_feattrain_all, df_train['label'])\npred_sgd = model_sgd.predict(full_feattrain_all)\npred_sgd_test = model_sgd.predict(full_feattest_all)","3e56dcaf":"model_base = LogisticRegression(C=23, n_jobs = 5, random_state = 123, solver='lbfgs', multi_class='multinomial', warm_start=True)\nmodel_base.fit(full_feattrain_all3, df_train['label'])\npred_base = model_base.predict(full_feattrain_all3)\npred_base_test = model_base.predict(full_feattest_all3)","d010104c":"df_stack = pd.DataFrame({'pred_lg': pred_lg, 'pred_sgd': pred_sgd, 'pred_base': pred_base,'label': df_train['label']})\nprint(df_stack.shape)\nprint(df_stack.head(5))\ndf_stack = pd.get_dummies(df_stack.drop('label', axis=1))\nprint(df_stack.shape)","756d7597":"df_stack_test = pd.DataFrame({'pred_lg_test': pred_lg_test, 'pred_sgd_test': pred_sgd_test, 'pred_base': pred_base_test})\nprint(df_stack_test.shape)\nprint(df_stack_test.head(15))\ndf_stack_test = pd.get_dummies(df_stack_test)\nprint(df_stack_test.shape)","124c9eb3":"X_train_stack = sparse.hstack([full_feattrain_all, df_stack])\nX_test_stack = sparse.hstack([full_feattest_all, df_stack_test])\nprint(X_train_stack.shape)\nprint(X_test_stack.shape)","78d72d10":"clf = OneVsRestClassifier(LogisticRegression(C=20,random_state = 123, n_jobs=5,solver='lbfgs', multi_class='multinomial'))\nclf.fit(X_train_stack, df_train['label'])\ny_pred = clf.predict(X_test_stack)","8012722f":"df_test['label'] = np.array(y_pred)\nprint(df_test.head())\ndf_test[['label']].to_csv('submission9.csv')","b52c7aae":"\u0412\u044b\u0432\u043e\u0434\u044b:\n1. \u0412\u0441\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u043d\u0430\u0438\u0432\u043d\u043e\u0433\u043e \u0431\u0430\u0439\u0435\u0441\u0430, \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u0441\u0432\u043e\u0435 \u043b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e (\u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0442\u043e \u0435\u0441\u0442\u044c \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0438) \u043d\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0442\u0440\u0438\u0433\u0440\u0430\u043c\u043c\u0430\u043c\u0438 \u0438 char.\n2. \u041b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f (0.7866) \u0438 \u0441\u0442\u043e\u0445\u0430\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0441\u043f\u0443\u0441\u043a (0.7860). \n3. \u0421\u0430\u043c\u044b\u0435 \u0431\u044b\u0441\u0442\u0440\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 - \u043d\u0430\u0438\u0432\u043d\u044b\u0439 \u0431\u0430\u0439\u0435\u0441 \u0438 \u0441\u0442\u043e\u0445\u0430\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0441\u043f\u0443\u0441\u043a. \u0421\u0430\u043c\u044b\u0439 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0439 - \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441. ","32acadf2":"### 2.2.1 \u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c:","1014200a":"\u041a\u043b\u0430\u0441\u0441\u044b \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043e\u0447\u0435\u043d\u044c \u043d\u0435\u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e: \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u043e\u043c \u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \"\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0432\u044f\u0437\u044c - \u0442\u0430\u0440\u0438\u0444\u044b\" (\u0441\u0432\u044b\u0448\u0435 12 000 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432), \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u043c \u043c\u0435\u0441\u0442\u0435 - \"\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0443\u0441\u043b\u0443\u0433\u0438\" (4 123 \u0437\u0430\u043f\u0440\u043e\u0441\u0430), \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c \u043c\u0435\u0441\u0442\u0435 - \"\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0432\u044f\u0437\u044c - \u0437\u043e\u043d\u0430 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u044f\" (166 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432). ","66e0d3bf":"# 5. \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f ","9636cf27":"\u0421\u0442\u044d\u043a\u0438\u043d\u0433 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043d\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043f\u0440\u0438\u043d\u0435\u0441 0.7938 vs. 0.7917. ","7707cd27":"### 2.1.3 \u0423\u0431\u0435\u0440\u0435\u043c \u0441\u0442\u043e\u043f-\u0441\u043b\u043e\u0432\u0430:","31e28473":"\u041a\u043b\u0430\u0441\u0441 \"\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0432\u044f\u0437\u044c - \u0437\u043e\u043d\u0430 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u044f\", \u043a\u0430\u043a \u0438 \"\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0432\u044f\u0437\u044c - \u0442\u0430\u0440\u0438\u0444\u044b\", \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u0443\u0442\u0430\u044e\u0442 \u0441 \"\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438\". \u041a\u043b\u0430\u0441\u0441 \"\u0440\u043e\u0443\u043c\u0438\u043d\u0433\" - \u0441 \"\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u043e\u043c\".","44587f1d":"# 3. \u0412\u044b\u0431\u043e\u0440 \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438","b37d8fca":"### \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 (\u0441\u0442\u044d\u043a\u0438\u043d\u0433):","7f1d4078":"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438: \u0421=5 (f1 = 0.8255 \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0438 0.7857 \u043d\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435).\n\n\u041b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0435\u0439 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u043b\u0430\u0441\u0441 \"SIM-\u043a\u0430\u0440\u0442\u0430 \u0438 \u043d\u043e\u043c\u0435\u0440\" (f1 = 0,89), \u0445\u0443\u0436\u0435 \u0432\u0441\u0435\u0433\u043e - \"\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0432\u044f\u0437\u044c - \u0437\u043e\u043d\u0430 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u044f\" (f1 = 0,67), \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u0442\u0440\u0430\u0434\u0430\u0435\u0442 recall.","28f0e02c":"### 2.1.5 \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0442\u0435\u043a\u0441\u0442\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432:","948cb9d9":"### 3.2 \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f","e012b134":"OneVsRestClassifier \u0441 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0435\u0439 \u0434\u0430\u043b \u043e\u0446\u0435\u043d\u043a\u0443 \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 0.7894 vs. 0.7866. \u041d\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 0.7881 vs. 0.7857. \u0422\u043e \u0435\u0441\u0442\u044c \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0438\u0441\u044c.","725493f1":"### \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u043b\u0438\u0434\u0435\u0440\u0431\u043e\u0440\u0434\u0435: 0.90426.","fccb9f59":"## 2.2 \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","58740a1b":"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0442\u043e\u0445\u0430\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0441\u043f\u0443\u0441\u043a\u0430: alpha = 0.0001 (f1 = 0,8244 \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0438 0.7914 \u043d\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435).\n\n\u041b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0441\u044f \u043a\u043b\u0430\u0441\u0441 \"SIM-\u043a\u0430\u0440\u0442\u0430 \u0438 \u043d\u043e\u043c\u0435\u0440\" (f1 = 0,89), \u0445\u0443\u0436\u0435 \u0432\u0441\u0435\u0433\u043e - \"FAQ - \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\" (f1 = 0,67).","08c6f86f":"### \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c OneVsRestClassifier:","2ebebed5":"\u041d\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0441\u0442\u043e\u0445\u0430\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0441\u043f\u0443\u0441\u043a \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 0.793.","13d014cd":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u0438\u043d \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f. \u041d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0430\u044f \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0434\u043b\u0438\u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u043d\u0430 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0430 \"\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0432\u044f\u0437\u044c - \u0437\u043e\u043d\u0430 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u044f\", \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0430\u044f - \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0430 \"\u043e\u043f\u043b\u0430\u0442\u0430\".","9453cd3c":"### 4.1 \u041f\u043e\u0434\u0431\u0435\u0440\u0435\u043c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438","29c15332":"\u041f\u0440\u0438 C=20 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u043d\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 0.787, \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 0.783.","421680d1":"### 2.2.2 \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 TD-IDF:","b9124c8c":"\u041d\u0430\u0438\u0432\u043d\u044b\u0439 \u0431\u0430\u0439\u0435\u0441 \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430 \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0435\u0439\u0437\u043b\u0430\u0439\u043d\u0430 - 0.727 vs. 0.725.","cd74274f":"OneVsRestClassifier \u0441\u043e \u0441\u0442\u043e\u0445\u0430\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u043c \u0441\u043f\u0443\u0441\u043a\u043e\u043c \u0434\u0430\u043b \u043e\u0446\u0435\u043d\u043a\u0443 \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 0.784 vs. 0.786. \u041d\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 - 0.783 vs. 0.793. \u0422\u043e \u0435\u0441\u0442\u044c \u0434\u043b\u044f \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043e\u0433\u043e \u0441\u043f\u0443\u0441\u043a\u0430 OneVsRestClassifier \u0443\u0445\u0443\u0434\u0448\u0438\u043b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","0fe5ee20":"### 2.1.1 \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438:","3bd186e8":"## 2.1 \u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 ","62d2237d":"\u041f\u0440\u0438 \u0421=20 \u043d\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 OneVsRestClassifier \u0441 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0435\u0439 \u0434\u0430\u043b \u043e\u0446\u0435\u043d\u043a\u0443 - 0.7917 vs. 0.787. \u041d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 0.7848 vs. 0.783.","b7005249":"### 2.1.2 \u041e\u0447\u0438\u0441\u0442\u0438\u043c \u0442\u0435\u043a\u0441\u0442 \u043e\u0442 \u043f\u0443\u043d\u043a\u0442\u0443\u0430\u0446\u0438\u0438 \u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432:","2d5ea24d":"# 4. \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438","633ec35e":"### 4.2 \u0423\u043b\u0443\u0447\u0448\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u0438","162cf3e8":"1. \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 32 800 \u0441\u0442\u0440\u043e\u043a, \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 - 29 002 \u0441\u0442\u0440\u043e\u043a\u0438.\n2. \u0412 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 91 \u043f\u0440\u043e\u043f\u0443\u0441 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 (0,3%), \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 - 130 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 (0,4%). \u0414\u043e\u043b\u044f \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f.\n3. \u0418 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439, \u0438 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432: \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e 64% \u0438 68% \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f \u0441\u0432\u044b\u0448\u0435 1 500 \u0440\u0430\u0437. \u0412 \u043e\u0431\u043e\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0441\u0430\u043c\u044b\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \"\u0442\u0430\u0440\u0438\u0444\".\n4. \u0422\u0435\u043a\u0441\u0442\u044b \u0437\u0430\u0448\u0443\u043c\u043b\u0435\u043d\u044b: \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043f\u0443\u043d\u043a\u0442\u0443\u0430\u0446\u0438\u044e, \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u043c\u043d\u043e\u0433\u043e \u043e\u043f\u0435\u0447\u0430\u0442\u043e\u043a \u0438 \u043e\u0448\u0438\u0431\u043e\u043a.","863a18d2":"\u0421\u0440\u0435\u0434\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442 \u043a\u043b\u0430\u0441\u0441 \"\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0432\u044f\u0437\u044c - \u0442\u0430\u0440\u0438\u0444\u044b\", \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b  \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c  \u0438 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.","384fd080":"### 3.4 \u0421\u0442\u043e\u0445\u0430\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0441\u043f\u0443\u0441\u043a","2b8ca047":"\u041f\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u043e\u0445\u043e\u0436\u0438. \u0411\u043e\u043b\u044c\u0448\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0435\u043d\u0435\u0435 80 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0442\u043e \u0435\u0441\u0442\u044c \u044d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u044b. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438\u043c\u0435\u044e\u0442 \u043f\u0438\u043a\u0438 \u0432 \u0440\u0430\u0439\u043e\u043d\u0435 10 \u0438 30 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041d\u043e \u0435\u0441\u0442\u044c \u0438 \u0434\u043b\u0438\u043d\u043d\u044b\u0435 \"\u0445\u0432\u043e\u0441\u0442\u044b\" \u0434\u043e 350 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0434\u043b\u0438\u043d\u043e\u0439.","a841630b":"### 3.1 \u041d\u0430\u0438\u0432\u043d\u044b\u0439 \u0431\u0430\u0439\u0435\u0441","3f2741da":"# 2. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 Feature Engineering","803a3566":"### 2.1.4 \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0441\u0442\u044d\u043c\u043c\u0438\u043d\u0433 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u0442\u044d\u043c\u043c\u0435\u0440\u0430 \u041f\u043e\u0440\u0442\u0435\u0440\u0430:","7a9e96c0":"\u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u043f\u043e 5 \u0444\u043e\u043b\u0434\u0430\u043c.","c7eb8acd":"# 1. EDA","49933fe4":"\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u043b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0442\u0440\u0438\u0433\u0440\u0430\u043c\u043c\u0430\u043c\u0438 \u0438 char: 0.787 vs. 0.780.","ef9fcbc2":"### 3.3 \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441","97ef52b4":"\u0418 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445, \u0438 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0438 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0440\u043e\u0441 \"\u0442\u0430\u0440\u0438\u0444\" \u0432\u043e \u0432\u0441\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u0445 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f. \u0422\u0430\u043a\u0436\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \"\u0443\u0441\u043b\u0443\u0433\u0430\", \"\u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430\", \"\u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0442\u0430\u0440\u0438\u0444\", \"\u043c\u043e\u0439 \u0442\u0430\u0440\u0438\u0444\" \u0438 \u043f\u0440. \n\n\u041d\u043e \u0441\u0442\u043e\u0438\u0442 \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0434\u043b\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442."}}