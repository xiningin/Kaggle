{"cell_type":{"5ec24ff9":"code","826fbfdc":"code","b9833875":"code","f5bfe071":"code","2a5ce98b":"code","c2db9f15":"code","6a85d6b5":"code","cf9642b2":"code","5828c9d9":"code","362e9133":"code","d2d6609b":"code","c34a415c":"code","d6ba400b":"code","709b95b6":"code","54d523ba":"code","3debb5f9":"code","67f61531":"code","27dfc5a1":"code","374a5878":"code","47a35c2a":"code","9fd1f37b":"code","e20a2b19":"code","aac9d3af":"code","973c3018":"code","928dbf4d":"code","1a2d3728":"code","b1322082":"code","3cc3d4eb":"code","5064f657":"code","bf61a693":"code","ab847be5":"code","2597eb6e":"code","4ef60a6e":"code","b1e637c6":"code","53ae8fb3":"code","f21fe60e":"code","2f607842":"code","1d382c85":"code","cd9c79ea":"code","928bd61f":"code","4ebe27b8":"code","4cc92193":"code","a33269ff":"code","d3246b11":"code","4be12299":"code","3086b95e":"code","45681bb4":"code","57435440":"code","493be63c":"code","3127be0d":"code","f348e962":"code","0173e2a9":"code","9c005286":"code","52547667":"code","22317a66":"code","fea00830":"code","c06f72ac":"code","3352ecd5":"code","fc4a69ad":"code","e1525ccc":"code","39f00f0e":"code","4fe5957a":"code","fd97ee64":"code","3f83da14":"code","8efdae1e":"code","e2409b0a":"code","bb949126":"code","edb791ad":"code","b2c4ce5c":"code","f5bf50e1":"markdown","6bbff3c2":"markdown","aad15cd8":"markdown","0a840e0a":"markdown","6df37a27":"markdown","f045bd38":"markdown","7867e070":"markdown","43c075de":"markdown","9c438720":"markdown","d5030568":"markdown"},"source":{"5ec24ff9":"import pandas as pd \nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nimport statsmodels.formula.api as smf\nfrom sklearn import linear_model \nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import preprocessing \n\n","826fbfdc":"house_df_main = pd.read_csv('\/kaggle\/input\/housing\/housing.csv')\nhouse_df = house_df_main.copy()\n\n","b9833875":"house_df.head(10)","f5bfe071":"house_df.describe(include='all')","2a5ce98b":"house_df.info()","c2db9f15":"house_df.isnull().sum()","6a85d6b5":"house_df.fillna(house_df.mean(), inplace=True)","cf9642b2":"house_df.isnull().sum()","5828c9d9":"#initial Correlation\nplt.figure(figsize = (16,10))\nsns.heatmap(house_df.corr(),annot=True,center=0 )","362e9133":"dic = {}","d2d6609b":"wmhouse_df = house_df.copy()\nwmhouse_df.columns","c34a415c":"scaler = MinMaxScaler()\ncolumn_names_to_normalize = ['longitude', 'latitude', 'housing_median_age', 'total_rooms',\n       'total_bedrooms', 'population', 'households', 'median_income',\n       'median_house_value']\nx = wmhouse_df[column_names_to_normalize].values\nx_scaled = scaler.fit_transform(x)\ndf_temp = pd.DataFrame(x_scaled, columns=column_names_to_normalize, index = wmhouse_df.index)\nwmhouse_df[column_names_to_normalize] = df_temp","d6ba400b":"#worst model\nwm_data = wmhouse_df.copy()\nwmY = wm_data['median_house_value']\nwm_data.drop(columns=['ocean_proximity','median_house_value'],inplace=True)\nwmX_train, wmX_test, wmy_train, wmy_test = train_test_split(wm_data, wmY, test_size=0.2, random_state=1)\nwm_data.columns\n","709b95b6":"model = linear_model.LinearRegression()\nmodel.fit(wmX_train, wmy_train)","54d523ba":"wmy_pred = model.predict(wmX_test)","3debb5f9":"MSE = metrics.mean_squared_error(wmy_test, wmy_pred)\nRMSE = np.sqrt(metrics.mean_squared_error(wmy_test, wmy_pred))\nscores = model.score(wmX_train, wmy_train)\ndic['BaseModel'] = (RMSE,scores*100)\nprint(MSE,RMSE,scores*100)","67f61531":"house_df.hist(bins=50, figsize=(15, 15))","27dfc5a1":"sns.pairplot(house_df, x_vars=['housing_median_age', 'population', 'households', 'median_income'],y_vars ='median_house_value',hue = 'ocean_proximity')","374a5878":"house_df.columns","47a35c2a":"house_df['ocean_proximity'].value_counts()","9fd1f37b":"house_df['ocean_proximity'].value_counts().plot(kind='bar')","e20a2b19":"sns.boxplot(x=\"ocean_proximity\", y=\"median_house_value\", data=house_df)","aac9d3af":"sns.boxplot(x=\"ocean_proximity\", y=\"median_income\", data=house_df)","973c3018":"plt.figure(figsize=(15,10))\nsns.distplot(house_df['total_bedrooms'],color='red')\nsns.distplot(house_df['total_rooms'],color='blue')\nplt.show()","928dbf4d":"plt.figure(figsize=(10,6))\nsns.distplot((house_df['total_rooms']\/house_df['total_bedrooms']),color='green')\nplt.show()","1a2d3728":"house_df['room_bed'] = (house_df['total_rooms']\/house_df['total_bedrooms'])","b1322082":"house_df['room_bed']","3cc3d4eb":"house_df1 = house_df.copy()\nhouse_df1 = house_df1.loc[ house_df1['room_bed']<10.0]","5064f657":"plt.figure(figsize=(10,6))\nsns.boxplot(house_df['room_bed'],color='green',)\n\nplt.figure(figsize=(10,6))\nsns.boxplot(house_df1['room_bed'],color='red')\n\nplt.show()","bf61a693":"house_df1.info()","ab847be5":"\nhouse_df1.plot.scatter(x='housing_median_age', y='population')\n","2597eb6e":"house_df1 = house_df1.loc[ house_df['population']<20000]","4ef60a6e":"house_df1.info()","b1e637c6":"house_df1.plot.scatter(x='housing_median_age', y='population')","53ae8fb3":"house_df1.columns","f21fe60e":"house_df1['house_pop'] = house_df1['households'] \/ house_df1['population']","2f607842":"house_df1.hist(bins=50, figsize=(15, 15))","1d382c85":"sns.pairplot(house_df1, x_vars=['housing_median_age', 'population', 'households', 'median_income',\n       'room_bed','house_pop'],y_vars ='median_house_value')","cd9c79ea":"house_df1 = pd.get_dummies(house_df1,columns=['ocean_proximity'])\n","928bd61f":"house_df1.columns\nhouse_df1_norm = house_df1.copy()","4ebe27b8":"scaler = MinMaxScaler()\ncolumn_names_to_normalize = ['longitude', 'latitude', 'housing_median_age', 'total_rooms',\n       'total_bedrooms', 'population', 'households', 'median_income',\n       'median_house_value', 'room_bed', 'house_pop']\nx = house_df1_norm[column_names_to_normalize].values\nx_scaled = scaler.fit_transform(x)\ndf_temp = pd.DataFrame(x_scaled, columns=column_names_to_normalize, index = house_df1_norm.index)\nhouse_df1_norm[column_names_to_normalize] = df_temp","4cc92193":"house_df1_norm.head()","a33269ff":"house_df1_norm.hist(bins=50,figsize=(15, 15))","d3246b11":"#test model 1\nm1_data = house_df1.copy()\nm1Y = m1_data['median_house_value']\nm2_data = house_df1.copy()\nm2_data.drop(columns=['total_rooms',\n       'total_bedrooms','population','households','ocean_proximity_ISLAND'],inplace=True)\nm1_data.drop(columns=['median_house_value','total_rooms',\n       'total_bedrooms','population','households','ocean_proximity_ISLAND'],inplace=True)\nm1_data.columns\n","4be12299":"m1X_train, m1X_test, m1y_train, m1y_test = train_test_split(m1_data, m1Y, test_size=0.2,random_state=1)","3086b95e":"model1 = linear_model.LinearRegression()\nmodel1.fit(m1X_train, m1y_train)","45681bb4":"m1y_pred = model1.predict(m1X_test)\n# m1y_pred_train = model1.predict(m1X_train)","57435440":"print(metrics.mean_squared_error(m1y_test, m1y_pred))\nprint(np.sqrt(metrics.mean_squared_error(m1y_test, m1y_pred)))","493be63c":"pd.DataFrame(zip(m1_data.columns,model1.coef_))","3127be0d":"pd.DataFrame(zip(m1y_test,m1y_pred),columns=['True','Predicted'])","f348e962":"model1.score(m1X_train, m1y_train)","0173e2a9":"m2_data.rename(columns={'ocean_proximity_<1H OCEAN': 'ocean_proximity1', 'ocean_proximity_NEAR BAY': 'ocean_proximity2', 'ocean_proximity_NEAR OCEAN': 'ocean_proximity3'}, inplace=True)","9c005286":"lm2 = smf.ols(formula='median_house_value ~ longitude + latitude + housing_median_age  + median_income + room_bed + house_pop + ocean_proximity1 + ocean_proximity_INLAND + ocean_proximity2 + ocean_proximity3', data=m2_data).fit()","52547667":"lm2.summary()","22317a66":"model_dt = make_pipeline(preprocessing.StandardScaler(),DecisionTreeRegressor(random_state=0))\nscores = cross_val_score(model_dt, m1X_train, m1y_train, cv=10)\nmodel_dt.fit(m1X_train, m1y_train)\npred = model_dt.predict(m1X_test)\n\nMSE = metrics.mean_squared_error(m1y_test, pred)\nRMSE = np.sqrt(metrics.mean_squared_error(m1y_test, pred))\n\ndic['DecisionTree'] = (RMSE,scores.mean() *100)\n\nprint(MSE,RMSE)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean() *100, scores.std() * 2))","fea00830":"model_lr = make_pipeline(preprocessing.StandardScaler(),linear_model.LinearRegression())\nscores = cross_val_score(model_lr, m1X_train, m1y_train, cv=10)\n\nmodel_lr.fit(m1X_train, m1y_train)\npred = model_lr.predict(m1X_test)\n\nMSE = metrics.mean_squared_error(m1y_test, pred)\nRMSE = np.sqrt(metrics.mean_squared_error(m1y_test, pred))\n\ndic['LinearRegression'] = (RMSE,scores.mean() *100)\n\nprint(MSE,RMSE)\n\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean() *100, scores.std() * 2))","c06f72ac":"ridge_reg = linear_model.Ridge()\nparams_Ridge = {'alpha': [1e-15, 1e-10, 1e-8, 1e-4, 1e-3,1e-2, 1, 5, 10, 20] , \"fit_intercept\": [True, False], \"solver\": ['svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga']}\nRidge_GS = GridSearchCV(ridge_reg, param_grid=params_Ridge, n_jobs=-1)\nRidge_GS.fit(m1X_train, m1y_train)\nprint(Ridge_GS.best_params_)\nmodel_rr = make_pipeline(preprocessing.StandardScaler(),linear_model.Ridge(random_state=0, **Ridge_GS.best_params_))\nscores = cross_val_score(model_rr, m1X_train, m1y_train, cv=10)\n\nmodel_rr.fit(m1X_train, m1y_train)\npred = model_rr.predict(m1X_test)\n\nMSE = metrics.mean_squared_error(m1y_test, pred)\nRMSE = np.sqrt(metrics.mean_squared_error(m1y_test, pred))\n\n\ndic['RidgeRegression'] = (RMSE,scores.mean() *100)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean() *100, scores.std() * 2))","3352ecd5":"lasso_reg = linear_model.Lasso()\nparams_Lasso = {'alpha': [1e-15, 1e-10, 1e-8, 1e-4, 1e-3,1e-2, 1, 5, 10, 20] , \"fit_intercept\": [True, False]}\nLasso_GS = GridSearchCV(lasso_reg, param_grid=params_Lasso, n_jobs=-1)\nLasso_GS.fit(m1X_train, m1y_train)\nprint(Lasso_GS.best_params_)\nmodel_lasso = make_pipeline(preprocessing.StandardScaler(),linear_model.Lasso(random_state=0, **Lasso_GS.best_params_, max_iter=1e+5))\nscores = cross_val_score(model_lasso, m1X_train, m1y_train, cv=10)\n\nmodel_lasso.fit(m1X_train, m1y_train)\npred = model_lasso.predict(m1X_test)\n\nMSE = metrics.mean_squared_error(m1y_test, pred)\nRMSE = np.sqrt(metrics.mean_squared_error(m1y_test, pred))\n\n\ndic['LassoRegression'] = (RMSE,scores.mean() *100)\nprint(MSE,RMSE)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean() *100, scores.std() * 2))","fc4a69ad":"model_rf = make_pipeline(preprocessing.StandardScaler(),RandomForestRegressor(max_depth=2, random_state=0))\nscores = cross_val_score(model_rf, m1X_train, m1y_train, cv=10)\nmodel_rf.fit(m1X_train, m1y_train)\npred = model_rf.predict(m1X_test)\n\nMSE = metrics.mean_squared_error(m1y_test, pred)\nRMSE = np.sqrt(metrics.mean_squared_error(m1y_test, pred))\n\ndic['RFD_2'] = (RMSE,scores.mean() *100)\nprint(\"Depth:2 Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean() *100, scores.std() * 2))\n\nmodel_rf = make_pipeline(preprocessing.StandardScaler(),RandomForestRegressor(max_depth=5, random_state=0))\nscores = cross_val_score(model_rf, m1X_train, m1y_train, cv=10)\n\n\nmodel_rf.fit(m1X_train, m1y_train)\npred = model_rf.predict(m1X_test)\n\nMSE = metrics.mean_squared_error(m1y_test, pred)\nRMSE = np.sqrt(metrics.mean_squared_error(m1y_test, pred))\n\ndic['RFD_5'] = (RMSE,scores.mean() *100)\n\nprint(\"Depth:5 Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean() *100, scores.std() * 2))\n\nmodel_rf = make_pipeline(preprocessing.StandardScaler(),RandomForestRegressor(max_depth=10, random_state=0))\nscores = cross_val_score(model_rf, m1X_train, m1y_train, cv=10)\n\nmodel_rf.fit(m1X_train, m1y_train)\npred = model_rf.predict(m1X_test)\n\nMSE = metrics.mean_squared_error(m1y_test, pred)\nRMSE = np.sqrt(metrics.mean_squared_error(m1y_test, pred))\n\ndic['RFD_10'] = (RMSE,scores.mean() *100)\n\nprint(\"Depth:10 Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean() *100, scores.std() * 2))\n\nmodel_rf = make_pipeline(preprocessing.StandardScaler(),RandomForestRegressor(max_depth=20, random_state=0))\nscores = cross_val_score(model_rf, m1X_train, m1y_train, cv=10)\n\nmodel_rf.fit(m1X_train, m1y_train)\npred = model_rf.predict(m1X_test)\n\nMSE = metrics.mean_squared_error(m1y_test, pred)\nRMSE = np.sqrt(metrics.mean_squared_error(m1y_test, pred))\n\ndic['RFD_20'] = (RMSE,scores.mean() *100)\n\nprint(\"Depth:20 Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean() *100, scores.std() * 2))\n\n\nmodel_rf = make_pipeline(preprocessing.StandardScaler(),RandomForestRegressor(max_depth=50, random_state=0))\nscores = cross_val_score(model_rf, m1X_train, m1y_train, cv=10)\n\nmodel_rf.fit(m1X_train, m1y_train)\npred = model_rf.predict(m1X_test)\n\nMSE = metrics.mean_squared_error(m1y_test, pred)\nRMSE = np.sqrt(metrics.mean_squared_error(m1y_test, pred))\n\ndic['RFD_50'] = (RMSE,scores.mean() *100)\n\nprint(\"Depth:50 Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean() *100, scores.std() * 2))\n","e1525ccc":"test = model_rf.fit(m1X_train, m1y_train)","39f00f0e":"pred = test.predict(m1X_test)","4fe5957a":"print(np.sqrt(metrics.mean_squared_error(m1y_test, pred)))","fd97ee64":"result = pd.DataFrame(zip(m1y_test,pred),columns=['True','Predicted'])","3f83da14":"result","8efdae1e":"accuracy_model = pd.DataFrame(dic,index=['RMSE','Training_Accuracy'])\naccuracy_model = accuracy_model.T\naccuracy_model","e2409b0a":"accuracy_model.sort_values(by=['RMSE'],inplace=True)","bb949126":"from matplotlib import pyplot\nfig, ax = pyplot.subplots(figsize=(15,8))\nsns.barplot(x=accuracy_model.index,y='RMSE',data=accuracy_model,ax=ax,palette='Greens')\n\n","edb791ad":"accuracy_model.sort_values(by=['Training_Accuracy'],inplace=True)","b2c4ce5c":"fig1, ax1 = pyplot.subplots(figsize=(15,8))\nsns.barplot(x=accuracy_model.index,y='Training_Accuracy',data=accuracy_model,ax=ax1,palette='Blues')","f5bf50e1":"## Final Output Comparison","6bbff3c2":"## Worst Model","aad15cd8":"#### Lasso Regression","0a840e0a":"#### Ridge Regression","6df37a27":"## Training models","f045bd38":"### Decision Tree","7867e070":"### Random Forest","43c075de":"## Exploring data","9c438720":"### Linear Regression","d5030568":"<a href=\"https:\/\/colab.research.google.com\/github\/deep-son\/California-Housing-Price-Prediction\/blob\/master\/California_Housing_Price_Prediction.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>"}}