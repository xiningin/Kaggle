{"cell_type":{"9d2ba6a2":"code","5a0ff507":"code","fa4f27e1":"code","0d5c9b02":"code","8c3f85a5":"code","030ce570":"code","50824084":"code","a52b0170":"code","40a010c6":"code","9bb2b526":"code","da9a580e":"markdown","a6cdd964":"markdown","4e6242be":"markdown"},"source":{"9d2ba6a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a0ff507":"df = pd.read_excel('\/kaggle\/input\/association-of-sleep-apnea-with-mortality\/jcsm.10.4.355.t01.xlsx')\ndf.head()","fa4f27e1":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","0d5c9b02":"plotPerColumnDistribution(df, 10, 5)","8c3f85a5":"dfcorr=df.corr()\ndfcorr","030ce570":"plt.figure(figsize=(10,4))\nsns.heatmap(df.corr(),annot=False,cmap='summer')\nplt.show()","50824084":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","a52b0170":"plotScatterMatrix(df, 20, 10)","40a010c6":"df = df.rename(columns={'Baseline Confounder':'baseline'})","9bb2b526":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.baseline)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set2', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","da9a580e":"#Dangers of Sleep Apnea \nhttps:\/\/www.clearvuehealth.com\/b\/sleep-apnea-dangers\/\n\n![](https:\/\/www.clearvuehealth.com\/images\/sleep-apnea-dangers.001.jpg)Sleep Apnea and Overall Mortality. Individuals with severe sleep apnea showed a significantly higher risk of overall mortality. After adjusting for age, gender, BMI, smoker status, cholesterol, and diabetes among other factors, individuals with moderate to severe sleep apnea still had a 4.2x risk of all cause mortality. This covers death from any cause. Over the 20 years of the study, just under 60% of individuals with severe sleep apnea died of any cause compared to 16% of those with mild apnea.","a6cdd964":"Das War's kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke","4e6242be":"#Kaggle's Bot codes"}}