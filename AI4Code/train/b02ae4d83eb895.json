{"cell_type":{"579c772f":"code","62b55ab1":"code","a61c2ffa":"code","d6fd0955":"code","ba7f6b92":"code","0148f9ee":"code","f7cfcaa6":"code","3abfb900":"code","8f87c240":"code","f9ee4457":"code","75b9a159":"code","efe7a2d8":"code","a5169cfe":"code","41ab9815":"code","ae476c56":"code","9ae299d6":"code","68be7875":"code","28d7fbec":"code","508e48c9":"code","52460f07":"code","4470f456":"code","59c7df76":"code","373b06d3":"code","67152027":"code","fc47e4a0":"markdown","3f3c9bb8":"markdown"},"source":{"579c772f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","62b55ab1":"TRAIN_DATA_DIR = '\/kaggle\/input\/cat-and-dog\/training_set\/training_set'\nTEST_DATA_DIR = '\/kaggle\/input\/cat-and-dog\/test_set\/test_set'","a61c2ffa":"import tensorflow as tf","d6fd0955":"import numpy as np\nimg_size=224","ba7f6b92":"def normalize_data(img):\n    \n    #Normalize for ResNet50\n    return tf.keras.applications.resnet50.preprocess_input(img)","0148f9ee":"train_datagen=tf.keras.preprocessing.image.ImageDataGenerator(rotation_range=20,\n                                                              width_shift_range=20\n                                                          ,height_shift_range=20,\n                                                          horizontal_flip=True,\n                                                          preprocessing_function=normalize_data)\ntest_datagen=tf.keras.preprocessing.image.ImageDataGenerator(preprocessing_function=normalize_data)","f7cfcaa6":"#Training (from dataframe)\n\ntrain_generator = train_datagen.flow_from_directory(TRAIN_DATA_DIR,\n                                                    target_size=(img_size,\n                                                                 img_size),\n                                                    batch_size=64,\n                                                    shuffle=True,\n                                                    seed=12345,\n                                                    class_mode='categorical')","3abfb900":"test_generator = test_datagen.flow_from_directory(\n    TEST_DATA_DIR,\n    target_size=(img_size, img_size),\n    batch_size=64,\n    shuffle=False,\n    class_mode='categorical')","8f87c240":"tf.keras.backend.clear_session()\nmodel = tf.keras.applications.ResNet50(include_top=False, #Do not include classification layer for imagenet\n                                       input_shape=(img_size,img_size,3),\n                                       weights='imagenet')","f9ee4457":"  model.summary()","75b9a159":"model.output\n","efe7a2d8":"len(model.layers)","a5169cfe":"#Set pre-trained model layers to not trainable\nfor layer in model.layers:\n    layer.trainable = False","41ab9815":"model.summary()","ae476c56":"model.output","9ae299d6":"#get Output layer of Pre0trained model\nx1 = model.output\n\n#Global average pool to reduce number of features and Flatten the output\nx2 = tf.keras.layers.GlobalAveragePooling2D()(x1)","68be7875":"#Output shape of Global Average Pooling\nx2","28d7fbec":"#Add output layer\nprediction = tf.keras.layers.Dense(2,activation='softmax')(x2)","508e48c9":"prediction","52460f07":"#Using Keras Model class\nfinal_model = tf.keras.models.Model(inputs=model.input, #Pre-trained model input as input layer\n                                    outputs=prediction) #Output layer added","4470f456":"#Compile the model\nfinal_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","59c7df76":"#How does our overall model looks\nfinal_model.summary()","373b06d3":"#Saving the best model using model checkpoint callback\nmodel_checkpoint=tf.keras.callbacks.ModelCheckpoint('dog_cat_resnet.h5', \n                                                    save_best_only=True, \n                                                    monitor='val_accuracy', \n                                                    mode='max', \n                                                    verbose=1)","67152027":"final_model.fit(train_generator,\n                epochs=5,\n                steps_per_epoch= 8005\/\/64,\n                validation_data=test_generator,\n                validation_steps = 2023\/\/64, \n                callbacks=[model_checkpoint])","fc47e4a0":"## Adding FC layer","3f3c9bb8":"### Building final model for Classification"}}