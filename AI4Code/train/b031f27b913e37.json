{"cell_type":{"baab5e99":"code","00adb575":"code","33729344":"code","5310c92e":"code","98754669":"code","97c00c4a":"code","cade7ce0":"code","5c265e98":"code","189bac96":"code","27d4170c":"code","fa859d99":"code","794b5052":"code","2be0fae2":"markdown","e4fe1426":"markdown","746231e0":"markdown","abf15e9f":"markdown","92b79c37":"markdown","22fb48a7":"markdown","51693fda":"markdown","dfab5588":"markdown","5de4500c":"markdown","dc25b9bd":"markdown"},"source":{"baab5e99":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'svg' \nplt.style.use('fivethirtyeight')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00adb575":"df = pd.read_csv(\"\/kaggle\/input\/crypto-currency-coint-market-cap-2017\/coinmarketcap_06122017.csv\")\n","33729344":"df.count()","5310c92e":"df.head()","98754669":"market_cap=df\ncap = market_cap.query('market_cap_usd >0')\nprint(cap.count())","97c00c4a":"TOP_CAP_TITLE = 'Top 10 market capitalization'\nTOP_CAP_YLABEL = '% of total cap'\n\ntop10=cap[:10].set_index('id')\ntop10 = top10.assign(market_cap_perc =\n    lambda x: (x.market_cap_usd \/ cap.market_cap_usd.sum()) * 100)\nbarplot= top10.market_cap_perc.plot.bar(title=TOP_CAP_TITLE)\nbarplot.set_ylabel(TOP_CAP_YLABEL);\n\n","cade7ce0":"COLORS = ['orange', 'green', 'orange', 'cyan', 'cyan', 'blue', 'silver', 'orange', 'red', 'green']\nbarplot1 =top10.market_cap_perc.plot.bar(title=TOP_CAP_TITLE,color=COLORS)\n\n# Annotating the y axis with 'USD'\nbarplot1.set_ylabel(\"USD\");\nplt.yscale('log')\nbarplot1.set_xlabel(\"\");","5c265e98":"volatility =df[[\"id\",\"percent_change_24h\",\"percent_change_7d\"]]\nvolatility = volatility.set_index(\"id\").dropna()\nvolatility = volatility.sort_values(by='percent_change_24h', ascending=True)\n\n# Checking the first few rows\nvolatility.head()","189bac96":"\ndef top10_subplot(volatility_series, title):\n\n    fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 6))\n\n    ax = volatility_series[:10].plot.bar(color=\"darkred\", ax=axes[0])\n\n    fig.suptitle(title)\n\n    ax.set_ylabel('% change')\n\n    ax = volatility_series[-10:].plot.bar(color=\"darkblue\", ax=axes[1])\n    \n    return fig, ax\n\nDTITLE = \"24 hours top losers and winners\"\n\n# Calling the function above with the volatility.percent_change_24h series\n# and title DTITLE \nfig, ax = top10_subplot(volatility.percent_change_24h, DTITLE)","27d4170c":"volatility7d = volatility.sort_values(by='percent_change_7d', ascending=True)\n\nWTITLE = \"Weekly top losers and winners\"\n\n# Calling the top10_subplot function\nfig, ax = top10_subplot(volatility7d.percent_change_7d, WTITLE)","fa859d99":"largecaps = market_cap.query('market_cap_usd >10000000000')\n\n# Printing out largecaps\nprint(largecaps)","794b5052":"def capcount(query_string):\n    return cap.query(query_string).count().id\n\nLABELS = [\"bigfish\", \"small\", \"micro\"]\n\nbigfish = capcount(\"market_cap_usd > 3E+8\")\n\nsmall = capcount(\"market_cap_usd >= 5E+7 & market_cap_usd < 3E+8\")\n\n# ... and for nano\nmicro =  capcount(\"market_cap_usd < 5E+7\")\n\n# Making a list with the 3 counts\nvalues = [bigfish, small, micro]\n\n# Plotting them with matplotlib \nplt.bar(range(len(values)), values, tick_label=LABELS);","2be0fae2":"Filtering all coints without capitalization","e4fe1426":"Hello all, this is my first ever Jupiter Analyze and Kaggle notebook please dont be rude ;)","746231e0":"Let's plot the top 10 biggest gainers and top 10 losers in market capitalization but let's focus on the week time","abf15e9f":"Check the market, how many do we have smaller coins and if there are more with micro capitalization.\nWe have used this values to set the coins groups:\n* Big fish: >300 million\n* Small cap: 50 million - 300 million\n* Micro cap: Below 50 million","92b79c37":"Market capitalization for the top 10 coins ","22fb48a7":"Bitcoin and Cryptocurrencies: Full dataset, filtering, and reproducibility","51693fda":"Volatility in cryptocurrencies","dfab5588":"Biggest Coints Capitalization (bigger then 10 billion)","5de4500c":"Making the plot easier to read","dc25b9bd":"Let's plot the top 10 biggest gainers and top 10 losers in market capitalization"}}