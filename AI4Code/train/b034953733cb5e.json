{"cell_type":{"c7785644":"code","416111ec":"code","59f70093":"code","a721a7a0":"code","c51a5738":"code","f29a2517":"code","fd631d7a":"code","344021ee":"code","180a68ff":"code","87d3526f":"code","c1e98a29":"code","d423c88c":"code","ff2c1fa2":"code","eb127ac9":"code","f2dbc0a5":"code","307662c2":"code","1d45eda8":"markdown"},"source":{"c7785644":"import pandas as pd\nimport datetime","416111ec":"train_df = pd.read_csv(\"\/kaggle\/input\/shopee-code-league-2020-week-4-logistics\/delivery_orders_march.csv\")\ntrain_df.head()","59f70093":"#convert time-based columns to datetime objects\ndef dt_converter(x):\n    if x:\n        localTime = datetime.datetime.fromtimestamp(x)\n        return(datetime.datetime(localTime.year, localTime.month, localTime.day))\n    else:\n        localTime = datetime.datetime.fromtimestamp(0)\n        return(datetime.datetime(localTime.year, localTime.month, localTime.day))","a721a7a0":"#fill NaN with zeroes\ntrain_df['2nd_deliver_attempt'] = train_df['2nd_deliver_attempt'].fillna(0)","c51a5738":"#apply converter function\ntrain_df['pick'] = train_df['pick'].apply(dt_converter)\ntrain_df['1st_deliver_attempt'] = train_df['1st_deliver_attempt'].apply(dt_converter)\ntrain_df['2nd_deliver_attempt'] = train_df['2nd_deliver_attempt'].apply(dt_converter)","f29a2517":"#parsing buyer address (only last 1-2 words are relevant)\ndef addressParser(x):\n    x = x.lower()\n    if 'manila' in x.lower().split(\" \")[-2:] and 'metro' in x.lower().split(\" \")[-2:]:\n        return \"metro manila\"\n    elif 'luzon' in x.lower().split(\" \")[-2:]:\n        return \"luzon\"\n    elif 'visayas' in x.lower().split(\" \")[-2:]:\n        return \"visayas\"\n    elif 'mindanao' in x.lower().split(\" \")[-2:]:\n        return \"mindanao\"\n    else:\n        return \"unknown\"","fd631d7a":"#apply parser function\ntrain_df['buyeraddress'] = train_df['buyeraddress'].apply(addressParser)\ntrain_df['selleraddress'] = train_df['selleraddress'].apply(addressParser)","344021ee":"#generate SLA matrix\nsla_matrix = pd.DataFrame({'metro manila':[3,5,7,7], 'luzon':[5,5,7,7], 'visayas':[7,7,7,7], 'mindanao':[7,7,7,7]}, \n                          index=['metro manila', 'luzon', 'visayas', 'mindanao'])","180a68ff":"#uses SLA matrix to determine days allowed for delivery\ndef daysAllowed(x):\n    return sla_matrix.loc[x['selleraddress'], x['buyeraddress']]","87d3526f":"#add new column\ntrain_df['daysAllowed'] = train_df.apply(daysAllowed, axis=1)","c1e98a29":"#check if 1st attempt is not more than daysAllowed days from pick date\ndef first_late_checker(x):\n    NON_WEEKDAYS = [datetime.datetime(2020,3,25), datetime.datetime(2020,3,30), datetime.datetime(2020,3,31)]\n    picked = x['pick']\n    first_atmpt= x['1st_deliver_attempt']\n    \n    counter = 0 \n    while counter < x['daysAllowed']:\n        next_day = picked + datetime.timedelta(days=1)\n        if next_day.weekday() < 6 and next_day not in NON_WEEKDAYS:\n            picked = next_day\n            counter += 1\n        else:\n            picked = next_day\n    if first_atmpt > picked:\n        return 1\n    else:\n        return 0","d423c88c":"#check if 2nd attempt is not more than 3 days from 1st attempt\ndef second_late_checker(x):\n    NON_WEEKDAYS = [datetime.datetime(2020,3,25), datetime.datetime(2020,3,30), datetime.datetime(2020,3,31)]\n    first_atmpt = x['1st_deliver_attempt']\n    sec_atmpt= x['2nd_deliver_attempt']\n    \n    counter = 0\n    if sec_atmpt > datetime.datetime(1990,1,1): \n        while counter < 3:\n            next_day = first_atmpt + datetime.timedelta(days=1)\n            if next_day.weekday() < 6 and next_day not in NON_WEEKDAYS:\n                first_atmpt = next_day\n                counter += 1\n            else:\n                first_atmpt = next_day\n        if sec_atmpt > first_atmpt:\n            return 1\n        else:\n            return 0\n    else:\n        return 0","ff2c1fa2":"train_df['is_late_1'] = train_df.apply(first_late_checker, axis=1)\ntrain_df['is_late_2'] = train_df.apply(second_late_checker, axis=1)","eb127ac9":"#returns true for is late column if at least one of the above late checkers returns 1\ndef final_late_checker(x):\n    if (x['is_late_1'] == 1) | (x['is_late_2'] == 1):\n        return 1\n    else:\n        return 0","f2dbc0a5":"train_df['is_late'] = train_df.apply(final_late_checker, axis=1)","307662c2":"train_df[['orderid', 'is_late']].to_csv(\"mysubmission.csv\", index=False)","1d45eda8":"Score: 1.0 "}}