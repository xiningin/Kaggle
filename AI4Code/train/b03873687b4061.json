{"cell_type":{"268e459d":"code","7e8d48bd":"code","0ca9ff70":"code","53f2e05d":"code","dcc9b3d6":"code","2da59bb4":"code","9a5dd743":"code","6f8e4d42":"code","eac4c096":"code","26b235fa":"code","253b9f57":"code","d399e849":"code","4be3a0e1":"code","54ed0e5c":"code","b2b262ae":"code","6e7aaa92":"code","2eae1b32":"code","329f06f0":"code","5d8c33cf":"code","2eae7a2f":"code","b3da24bb":"code","31d44922":"code","f414d611":"code","d4473daf":"markdown","4d13e40d":"markdown","4c1264d8":"markdown","37b482cb":"markdown","fb4ea5f4":"markdown","1eceb9e8":"markdown","5a94c27d":"markdown","fc13851a":"markdown"},"source":{"268e459d":"import pandas as pd \nimport numpy as np\nimport nltk\n\n# CountVectorizer will help calculate word counts\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Import the string dictionary that we'll use to remove punctuation\nimport string","7e8d48bd":"# Import datasets\n\ntrain = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/test.csv')\nsample = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv')","0ca9ff70":"# The row with index 13133 has NaN text, so remove it from the dataset\n\ntrain[train['text'].isna()]","53f2e05d":"train = train.dropna()\ntrain[train['text'].isna()]","dcc9b3d6":"a=['negative','positive']","2da59bb4":"X_train = train.loc[train['sentiment'].isin(a)]","9a5dd743":"import nltk \nfrom nltk.corpus import stopwords\nimport re\nfrom bs4 import BeautifulSoup\nfrom nltk.tokenize import word_tokenize, sent_tokenize \n\nstop_words = set(stopwords.words('english'))\nREPLACE_BY_SPACE_RE = r'[)\\!#?.:\";-^\/(]'\ntokenized = sent_tokenize(train['text'][2]) \nstop_words = nltk.corpus.stopwords.words('english')\nstop_words.remove('no')\nstop_words.remove('not')              \nprint(stop_words)\n\ndef clean_text(text):\n    wordsList = ''.join([c for c in text.lower() if text.lower().split() not in stop_words])\n    soup = BeautifulSoup(wordsList, \"html.parser\")\n    wordsList = soup.get_text()\n    wordsList = re.sub(REPLACE_BY_SPACE_RE,' ',wordsList)\n    wordsList = ' '.join(word for word in wordsList.split())\n    return wordsList\n    \n\nX_train['selected_text'] = X_train['selected_text'].apply(lambda x: clean_text(x))","6f8e4d42":"# Make training\/test split\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_val = train_test_split(\n    train, train_size = 0.9, random_state = 21)","eac4c096":"X_train[:20]","26b235fa":"pos_train = X_train[X_train['sentiment'] == 'positive']\nneutral_train = X_train[X_train['sentiment'] == 'neutral']\nneg_train = X_train[X_train['sentiment'] == 'negative']","253b9f57":"# Use CountVectorizer to get the word counts within each dataset\n\ncv = CountVectorizer(analyzer='word',max_df=0.95)\n\nX_train_cv = cv.fit_transform(X_train['text'])\n\nX_pos = cv.transform(pos_train['text'])\nX_neutral = cv.transform(neutral_train['text'])\nX_neg = cv.transform(neg_train['text'])\n\n\npos_count_df = pd.DataFrame(X_pos.toarray(), columns=cv.get_feature_names())\nneutral_count_df = pd.DataFrame(X_neutral.toarray(), columns=cv.get_feature_names())\nneg_count_df = pd.DataFrame(X_neg.toarray(), columns=cv.get_feature_names())","d399e849":"X_train_cv","4be3a0e1":"\n# Create dictionaries of the words within each sentiment group, where the values are the proportions of tweets that \n# contain those words\n\npos_words = {}\nneutral_words = {}\nneg_words = {}\n\nfor k in cv.get_feature_names():\n    pos = pos_count_df[k].sum()\n    neutral = neutral_count_df[k].sum()\n    neg = neg_count_df[k].sum()\n    pos_words[k] = pos\/pos_train.shape[0]\n    neutral_words[k] = neutral\/neutral_train.shape[0]\n    neg_words[k] = neg\/neg_train.shape[0]\n    \n# We need to account for the fact that there will be a lot of words used in tweets of every sentiment.  \n# Therefore, we reassign the values in the dictionary by subtracting the proportion of tweets in the other \n# sentiments that use that word.\nneg_words_adj = {}\npos_words_adj = {}\nneutral_words_adj = {}\n\nfor key, value in neg_words.items():\n    neg_words_adj[key] = neg_words[key] - (neutral_words[key] + pos_words[key])\n        \nfor key, value in pos_words.items():\n    pos_words_adj[key] = pos_words[key] - (neutral_words[key] + neg_words[key])\n    \nfor key, value in neutral_words.items():\n    neutral_words_adj[key] = neutral_words[key] - (neg_words[key] + pos_words[key])","54ed0e5c":"def calculate_selected_text(df_row, tol = 0):\n    \n    tweet = df_row['text']\n    sentiment = df_row['sentiment']\n    \n    if(sentiment == 'neutral'):\n        return tweet\n    \n    elif(sentiment == 'positive'):\n        dict_to_use = pos_words_adj # Calculate word weights using the pos_words dictionary\n    elif(sentiment == 'negative'):\n        dict_to_use = neg_words_adj # Calculate word weights using the neg_words dictionary\n        \n    words = tweet.split()\n    words_len = len(words)\n    subsets = [words[i:j+1] for i in range(words_len) for j in range(i,words_len)]\n        \n    score = 0\n    selection_str = '' # This will be our choice\n    lst = sorted(subsets, key = len) # Sort candidates by length\n    \n    \n    for i in range(len(subsets)):\n        \n        new_sum = 0 # Sum for the current substring\n        \n        # Calculate the sum of weights for each word in the substring\n        for p in range(len(lst[i])):\n            if(lst[i][p].translate(str.maketrans('','',string.punctuation)) in dict_to_use.keys()):\n                new_sum += dict_to_use[lst[i][p].translate(str.maketrans('','',string.punctuation))]\n                \n            \n        # If the sum is greater than the score, update our current selection\n        if(new_sum > score + tol):\n            score = new_sum\n            selection_str = lst[i]\n            #tol = tol*5 # Increase the tolerance a bit each time we choose a selection\n\n    # If we didn't find good substrings, return the whole text\n    if(len(selection_str) == 0):\n        selection_str = words                   \n        \n    return ' '.join(selection_str)","b2b262ae":"pd.options.mode.chained_assignment = None","6e7aaa92":"def jaccard(str1, str2): \n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","2eae1b32":"pos_tr = train[train['sentiment'] == 'positive']\nneutral_tr = train[train['sentiment'] == 'neutral']\nneg_tr = train[train['sentiment'] == 'negative']","329f06f0":"cv = CountVectorizer(analyzer='word',max_df=0.95, min_df=2,stop_words='english')\n\nfinal_cv = cv.fit_transform(train['text'])\n\nX_pos = cv.transform(pos_tr['text'])\nX_neutral = cv.transform(neutral_tr['text'])\nX_neg = cv.transform(neg_tr['text'])\n\npos_final_count_df = pd.DataFrame(X_pos.toarray(), columns=cv.get_feature_names())\nneutral_final_count_df = pd.DataFrame(X_neutral.toarray(), columns=cv.get_feature_names())\nneg_final_count_df = pd.DataFrame(X_neg.toarray(), columns=cv.get_feature_names())","5d8c33cf":"pos_words = {}\nneutral_words = {}\nneg_words = {}\n\nfor k in cv.get_feature_names():\n    pos = pos_final_count_df[k].sum()\n    neutral = neutral_final_count_df[k].sum()\n    neg = neg_final_count_df[k].sum()\n    \n    pos_words[k] = pos\/(pos_tr.shape[0])\n    neutral_words[k] = neutral\/(neutral_tr.shape[0])\n    neg_words[k] = neg\/(neg_tr.shape[0])","2eae7a2f":"neg_words_adj = {}\npos_words_adj = {}\nneutral_words_adj = {}\n\nfor key, value in neg_words.items():\n    neg_words_adj[key] = neg_words[key] - (neutral_words[key] + pos_words[key])\n    \nfor key, value in pos_words.items():\n    pos_words_adj[key] = pos_words[key] - (neutral_words[key] + neg_words[key])\n    \nfor key, value in neutral_words.items():\n    neutral_words_adj[key] = neutral_words[key] - (neg_words[key] + pos_words[key])","b3da24bb":"tol = 0.001\n\nfor index, row in test.iterrows():\n    \n    selected_text = calculate_selected_text(row, tol)\n    \n    sample.loc[sample['textID'] == row['textID'], ['selected_text']] = selected_text\n    ","31d44922":"sample.to_csv('submission.csv', index = False)","f414d611":"sample.head()","d4473daf":"### Generate Submission","4d13e40d":"Create and submit the submission file.","4c1264d8":"### Algorithm for finding selected text: \n  \n1. For every tweet:\n\n    a. Let $j$ be the sentiment of the tweet. \n\n    b. If $j ==$ neutral return entire text.\n\n    c. Otherwise, for each subset of words in the tweet, calculate $\\sum\\limits_{i}w_{i, j}$, where $i$ is the set of words in the tweet\n\n   d. Return the subset of words with the largest sum, given that it exceeds some tolerance.","37b482cb":"### Algorithm for weight calculation:\n\n1. For each class $j \\in \\{positive, neutral, negative\\}$\n\n    a. Find all the words $i$ in the tweets belonging to class $j$.\n\n    b. Calculate $n_{i, j} =$ the number of tweets in class $j$ containing word $i$. \n\n    c. Let $d_j$ be the number of tweets in class $j$.  Calculate $p_{i, j} = \\frac{n_{i, j}}{d_j}$, the proportion of tweets in class $j$ that conain word $i$.\n\n    d. Let $w_{i, j} = p_{i, j} - \\sum\\limits_{k \\neq j}p_{i, k}$ be the weights assigned to each word within each class. \n    ","fb4ea5f4":"Create a training set and a validation set.","1eceb9e8":"### This is a simple solution using only word counts with CountVectorizer to make predictions.\n\n#### Here's the idea:\n- Find and weight words that are used most often in only certain kinds of tweets.\n- Search all subsets of the tweet and calculate a score based on these weights.\n- For positive or negative tweets, the selected text is the most highly weighted subset, within some threshold.\n- Always return the entire text for neutral tweets.","5a94c27d":"Recalculate word weights using the entire training set.","fc13851a":"Calculate the selected text and score for the validation set."}}