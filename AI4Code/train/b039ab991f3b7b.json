{"cell_type":{"d931e968":"code","5dfd5cb8":"code","9a1edbd1":"code","14bec171":"code","6cf99349":"code","17285a5e":"code","c7547c64":"code","c7e9772e":"code","356dbc66":"code","a81e92ee":"code","107cd234":"code","eaedf96e":"code","aded1c36":"code","c147a0f5":"code","51066891":"code","9136d0ba":"code","ad13e1dc":"code","3da23cb2":"code","e5bbf33c":"code","c44d46be":"code","e2edf702":"code","fb5f6429":"code","bd2fd6e0":"code","c3807a71":"code","063bed73":"code","f53bdd1f":"code","e754a0f9":"code","be1796ef":"code","d0491b30":"code","23c77ae6":"code","79dbd7f9":"code","d1f28d91":"code","c308f803":"code","8ecec8fd":"code","1dd9fbc2":"code","f4f83f20":"code","577417b6":"code","750840dd":"code","1bc689f9":"code","ca358f12":"code","91fa17e7":"code","c4be498c":"code","b0b03de1":"code","a86b6e80":"code","8b910bf7":"code","90438fa9":"code","9dfda307":"code","b1f2555e":"code","dbfb0999":"code","330b31a5":"code","fc4ad5fa":"code","20e9adf7":"code","e67d5ee0":"code","340ec67f":"code","d8f93856":"code","4fbc3922":"code","09a05785":"code","8de25b02":"code","c64fcacf":"code","3fa62775":"code","75e96c12":"code","fdcc7b92":"code","831eac11":"code","2be63412":"code","d32650ea":"code","0ac57fc6":"code","b5c79105":"code","eeff2e60":"code","9ace2967":"code","bbb96f6a":"code","af05d340":"code","f0f3304f":"code","6dba90b6":"code","455e2c23":"code","3455e30c":"code","b34e3633":"code","b15e5670":"code","ea38184d":"code","8f6be708":"code","c49de459":"code","f91e5457":"markdown","1e6c5d51":"markdown","381cc3dd":"markdown","a0d75fe5":"markdown"},"source":{"d931e968":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nimport os\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\n","5dfd5cb8":"# from bokeh.plotting import figure, show, ColumnDataSource\n# from bokeh.io import ouput_notebook\n# from bokeh.models.glyphs import Text\n# from bokeh.models import ColorBar, LogColorMapper, LinearColorMapper","9a1edbd1":"df=pd.read_csv(r'..\/input\/kasco-dataset-russian\/\u0417\u0430\u0434\u0430\u0447\u0430 1\/\u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u043b\u043e\u043d\u0433\u0430\u0446\u0438\u0438\/\u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438.txt', sep=';')\n               #\u0447\u0442\u043e \u0431\u044b \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e sep \u0433\u0434\u0435 \u0437\u043d\u0430\u043a\u0438=;","14bec171":"df.shape","6cf99349":"df.head()","17285a5e":"df = df.copy()\ndf.reset_index(drop=True)","c7547c64":"df.info() #\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 ","c7e9772e":"df.dropna(axis=0, inplace=True);\nobj_columns = df.select_dtypes(['object']).columns\ndf[obj_columns]=df[obj_columns].apply(lambda x: x.astype('category'))\ndf[obj_columns]=df[obj_columns].apply(lambda x: x.cat.codes); #perevernut object type na categorial","356dbc66":"df.info()","a81e92ee":"df.head(2)","107cd234":"policy_id = df['POLICY_ID']\nY = df['POLICY_IS_RENEWED']\ndf.drop(['POLICY_ID', 'POLICY_IS_RENEWED'], inplace=True, axis=1) #dlya prognoza targetiroval policy_is_renewed","eaedf96e":"X_train, X_test, Y_train, Y_test = train_test_split(df, Y, test_size = 0.20, random_state=0) \n#delil na testovie i na train test 20%","aded1c36":"logmodel = LogisticRegression(fit_intercept=True) #stroil model po logistic\nlogmodel.max_iter = 1000\nlogit_result = logmodel.fit(X_train, Y_train)\nylm_predicted = logit_result.predict(X_test)","c147a0f5":"rf_clf = RandomForestClassifier(bootstrap=False) #stroil slucayniy les model dlya prognoza uznat kakoy model lucwe spravitsya\nresult_clf = rf_clf.fit(X_train,Y_train)\nyrf_predicted = rf_clf.predict(X_test)","51066891":"plot_confusion_matrix(logmodel, X_test, Y_test)  \nplt.show()\n\n\n\n","9136d0ba":"plot_confusion_matrix(rf_clf, X_test, Y_test)  \nplt.show() #kak mi videm random forest lucwe spravilsya prognoz bolee visokiy cem logistic model","ad13e1dc":"imp = pd.DataFrame(rf_clf.feature_importances_, index=X_test.columns, columns=['POLICY_PRICE_CHANGE'])\nimp.sort_values('POLICY_PRICE_CHANGE').plot(kind='barh', figsize=(12, 8)) #\u041a\u043e\u0434 \u0434\u043b\u044f \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0444\u0438\u0447\u0435\u0439","3da23cb2":"X_test","e5bbf33c":"titles_options = [(\"Normalized cm in log regression\", 'true')] #normalized in logisticregression. (\"Confusion matrix, without normalization\", None)  \nfor title, normalize in titles_options:\n    disp = plot_confusion_matrix(logmodel, X_test, Y_test,\n                                 cmap=plt.cm.Blues,\n                                 normalize=normalize)\n    disp.ax_.set_title(title)\n\n    print(title)\n    print(disp.confusion_matrix)\n\nplt.show()\n","c44d46be":"titles_options = [(\"Normalized cm in rf\", 'true')] #normalized in logisticregression. (\"Confusion matrix, without normalization\", None)  \nfor title, normalize in titles_options:\n    disp = plot_confusion_matrix(rf_clf, X_test, Y_test,\n                                 cmap=plt.cm.Blues,\n                                 normalize=normalize)\n    disp.ax_.set_title(title)\n\n    print(title)\n    print(disp.confusion_matrix)\n\nplt.show()","e2edf702":"imp = pd.DataFrame(rf.feature_importances_, index=x_train.columns, columns=['importance'])\nimp.sort_values('importance').plot(kind='barh', figsize=(12, 8))","fb5f6429":"!pip install openpyxl\n","bd2fd6e0":"import openpyxl","c3807a71":"df2 = pd.read_excel('..\/input\/kasco-dataset-russian\/\u0417\u0430\u0434\u0430\u0447\u0430 2\/\u0432\u044b\u0431\u043e\u0440\u043a\u0430.xlsx', engine='openpyxl', index_col=0)","063bed73":"df2.head()","f53bdd1f":"# selected_columns=df.filter(like= ':') target columns ","e754a0f9":"df2 = df2.iloc[:,:2] #delete some columns","be1796ef":"df2.head(2)","d0491b30":"member1 = df2['\u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a 1'] #\u0447\u0442\u043e \u0431\u044b \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u0431\u044b\u043b\u043e \u043a\u0430\u043a\u0438\u0435 \u0438\u0437 \u043d\u0438\u0445 \u0432 \u043e\u0431\u0435\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0435\u0441\u0442\u044c","23c77ae6":"member2 = df2['\u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a 2'] #\u0447\u0442\u043e \u0431\u044b \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u0431\u044b\u043b\u043e \u043a\u0430\u043a\u0438\u0435 \u0438\u0437 \u043d\u0438\u0445 \u0432 \u043e\u0431\u0435\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0435\u0441\u0442\u044c","79dbd7f9":"member1.mode()","d1f28d91":"member2.mode()","c308f803":"for i in member1,member2:\n    print(i.mode()) #\u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0414\u043e\u0440\u043e\u0444\u0435\u0435\u0432\u0430 \u0438 \u0435\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0430","8ecec8fd":"members = df2.columns=['member1','member2']","1dd9fbc2":"df2","f4f83f20":"df2[df2.member1 == '\u0414\u043e\u0440\u043e\u0444\u0435\u0435\u0432\u0430 \u0413\u0443\u043b\u0438\u044f \u041d\u0438\u043a\u043e\u043b\u0430\u0435\u0432\u043d\u0430'].agg({'member1':'count'}) #1-\u0441\u043b\u0443\u0447\u0430\u0435 \u0438\u0437 member 1   3 \u0440\u0430\u0437\u0430","577417b6":"df2[df2.member2 == '\u0414\u043e\u0440\u043e\u0444\u0435\u0435\u0432\u0430 \u0413\u0443\u043b\u0438\u044f \u041d\u0438\u043a\u043e\u043b\u0430\u0435\u0432\u043d\u0430'].agg({'member2':'count'})  #2-\u0441\u043b\u0443\u0447\u0430\u0435 \u0438\u0437 member 2     2 \u0440\u0430\u0437\u0430","750840dd":"podozr = df2[['member1','member2']].mode()","1bc689f9":"podozr.count()","ca358f12":"df2[df2.member2 == '\u041c\u0430\u043c\u043e\u043d\u0442\u043e\u0432 \u041c\u0441\u0442\u0438\u0441\u043b\u0430\u0432 \u0413\u0435\u043e\u0440\u0433\u0438\u0435\u0432\u0438\u0447'].agg({'member2':'count'})","91fa17e7":"df2[df2.member1 == '\u041c\u0430\u043c\u043e\u043d\u0442\u043e\u0432 \u041c\u0441\u0442\u0438\u0441\u043b\u0430\u0432 \u0413\u0435\u043e\u0440\u0433\u0438\u0435\u0432\u0438\u0447'].agg({'member1':'count'})","c4be498c":"df2[df2.member2 == '\u0421\u0435\u043d\u0447\u0443\u043a\u043e\u0432\u0430 \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430 \u0421\u0435\u043c\u0435\u043d\u043e\u0432\u043d\u0430'].agg({'member2':'count'})","b0b03de1":"df2 = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=list(\"ABCD\"))\n\ndf2 = df.cumsum()\n\nplt.figure();\n\ndf2.plot();","a86b6e80":"\n\ndf3 = pd.ExcelFile(r'..\/input\/kasco-dataset-russian\/\u0417\u0430\u0434\u0430\u0447\u0430 3\/\u0417\u0430\u0434\u0430\u0447\u0430.xlsx', engine='openpyxl')","8b910bf7":"df3.head()","90438fa9":"df3.shape","9dfda307":"df3.describe()","b1f2555e":"df3.info()","dbfb0999":"df3.hist()","330b31a5":"del  df3['\u041f\u0435\u0440\u0441\u043e\u043d\u0430'] #udalil nenujniy column","fc4ad5fa":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.cluster import SpectralClustering as sc\nfrom scipy.cluster.hierarchy import linkage, dendrogram\nfrom graphviz import Source\nfrom sklearn import tree\nfrom IPython.display import SVG\nimport graphviz\nfrom IPython.display import display\nfrom IPython.display import HTML\n# style='<style>svg{width:100% !important;height:100% !important;}<\/style>'\n\nimport pylab","20e9adf7":"df3.head(3)","e67d5ee0":"df3.columns=['age','experiencey','lossper', 'incomeforyear']","340ec67f":"df3.head()","d8f93856":"g = sns.PairGrid(df3, hue=\"age\") #vi mojete esho sami nastroit fich dlya grafika tut dlya vozrasta a mojno dobavit ubitocnost\ng.map_diag(sns.histplot)\ng.map_offdiag(sns.scatterplot)\ng.add_legend() #visualizatsiya dlya fichey","4fbc3922":"mean = df3.groupby(['age']).agg(['mean','count']) #srednie statisticeskie dllya vsex modeley po chislo\n#naprimer 20 letniy grajdanin so srednim 2.6 opita i 8 takix 20 no dlya income eto model nne tak uj podoydet ","09a05785":"mean","8de25b02":"df3.shape","c64fcacf":"mean.hist()#tut mojno korelyatsiyu visualisirovat","3fa62775":"Xtr = df3.drop(['lossper'], axis=1) #take predict column","75e96c12":"Ytr = df3.lossper","fdcc7b92":"clfdtree = DecisionTreeClassifier(criterion='entropy', max_depth=3)","831eac11":"clfdtree.fit(Xtr,Ytr)","2be63412":"Xtr=pd.get_dummies(Xtr)","d32650ea":"X_train,X_test, y_train, y_test = train_test_split(Xtr,Ytr, test_size=0.20)","0ac57fc6":"clfdtree.score(Xtr,Ytr)","b5c79105":"clfdtree.fit(X_train, y_train)","eeff2e60":"clfdtree.score(X_train, y_train)","9ace2967":"df3.isnull().sum()","bbb96f6a":"from sklearn.model_selection import cross_val_score","af05d340":"max_depth_values= range(1,100)","f0f3304f":"scores_data=pd.DataFrame()","6dba90b6":"for max_depth in max_depth_values:  #treniruem dannix do max accuracy\n    clfdtree=tree.DecisionTreeClassifier(criterion='entropy', max_depth=max_depth)\n    clfdtree.fit(X_train, y_train)\n    train_score = clfdtree.score(X_train, y_train)\n    test_score = clfdtree.score(X_test, y_test)\n    \n    mean_cross_val_score = cross_val_score(clfdtree, X_train, y_train, cv=5).mean()\n    \n    \n    temp_score_data = pd.DataFrame({'max_depth': [max_depth],\n                                    'train_score' : [train_score],\n                                    'test_score':[test_score],\n                                    'cross_val_score' : [mean_cross_val_score]\n                                   })\n    \n    scores_data = scores_data.append(temp_score_data)","455e2c23":"scores_data.head() # 5 glubina lucwiy pokazivaet na traine i na teste","3455e30c":"scores_data_long = pd.melt(scores_data, id_vars=['max_depth'], value_vars=['train_score', 'test_score','cross_val_score'],\n                           var_name = 'set_type', value_name='score')","b34e3633":"sns.lineplot(x='max_depth', y='score', hue='set_type', data=scores_data_long)#rezultat ne ochen xoroshiy","b15e5670":"samples = df3.values","ea38184d":"mergings = linkage(samples, method='complete')","8f6be708":"varieties = list(df3.pop('lossper'))","c49de459":"# dendrogram(mergings,\n#            labels=varieties,\n#            leaf_rotation=90,\n#            leaf_font_size=6,\n#            )\n# plt.rcParams[\"figure.figsize\"] = (20,20)\n\n# plt.show() #etot plot ne tak cetko opisal ierarxik clasterizatsiyu ","f91e5457":"# 3-\u0417\u0430\u0434\u0430\u0447\u0430","1e6c5d51":"# 2- \u0417\u0430\u0434\u0430\u0447\u0430","381cc3dd":"\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 (\u0414\u0422\u041f \u0441 \u0434\u0432\u0443\u043c\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c\u0438) \u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435 \u043c\u043e\u0448\u0435\u043d\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u043e.\n\u0412\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0435\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u043e\u0434\u043e\u0437\u0440\u0435\u043d\u0438\u0435 \u043d\u0430 \u043c\u043e\u0448\u0435\u043d\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f; \u043e\u0431\u043e\u0441\u043d\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u043e\u0437\u0440\u0435\u043d\u0438\u0435.","a0d75fe5":"# 1- \u0417\u0410\u0414\u0410\u0427\u0410"}}