{"cell_type":{"7161b5a0":"code","1544735c":"code","05adba34":"code","ac82bb3b":"code","866f84f5":"code","3588637e":"code","627a6766":"code","fdd5ab0c":"code","1afd0b96":"code","cfcb533d":"code","74cae16b":"code","996e62f6":"code","00dd0be9":"code","9f1297fe":"code","62f77952":"code","6c3ef438":"code","00e947f7":"code","49b3e7c3":"code","56dd60e3":"code","6f50a453":"code","94d7e51c":"code","cd131801":"code","4220ca8a":"code","24f1102e":"code","053cc078":"code","8f765717":"code","5137b0e4":"code","c231bfb4":"code","e5beb384":"code","35308625":"code","a0488ab5":"code","5c2d735f":"code","dd996cea":"code","84c80135":"code","d74edbfb":"code","e728e160":"code","f2402404":"code","1f39ccd4":"markdown","d73fd736":"markdown","f368af73":"markdown","f985873a":"markdown","d14dda97":"markdown","1d748166":"markdown","726243b5":"markdown","a83e14e1":"markdown","c8213362":"markdown","677824a5":"markdown","68073e05":"markdown","61a7fd4c":"markdown","579d5d5d":"markdown","6cb62f5a":"markdown","853bc4ca":"markdown","65bd5b51":"markdown","394a323f":"markdown","4311e12b":"markdown","3c0176ec":"markdown","31ce54ec":"markdown"},"source":{"7161b5a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1544735c":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain_data=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ngender_submission_data=pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","05adba34":"train_data.columns","ac82bb3b":"train_data.sample(3)","866f84f5":"test_data.sample(3)","3588637e":"train_data.describe()","627a6766":"test_data.describe()","fdd5ab0c":"train_data.info()","1afd0b96":"train_data[train_data['Embarked'].isnull()]","cfcb533d":"train_data['Embarked']=train_data['Embarked'].fillna('S')","74cae16b":"train_data['Age'].describe()","996e62f6":"for name in train_data['Name']:\n    train_data['Title']=train_data['Name'].str.extract('([A-Za-z]+)\\.',expand=True)","00dd0be9":"df=train_data.groupby('Title').mean()\n\ndf.head()","9f1297fe":"train_data[train_data['Age'].isnull()].groupby('Title', as_index=False).count()","62f77952":"titles = ['Dr','Master','Miss','Mr','Mrs']\n\nfor title in titles:\n    train_data.loc[train_data.Age.isnull() & (train_data.Title == title),'Age']=df['Age'][title]\ntrain_data.isnull().sum()","6c3ef438":"for name in test_data['Name']:\n    test_data['Title']=test_data['Name'].str.extract('([A-Za-z]+)\\.', expand=True)","00e947f7":"test_df=test_data.groupby('Title').mean()\n\ntitle = ['Ms','Master','Miss','Mr','Mrs']\n\nfor title in test_data['Title']:\n    test_data.loc[(test_data.Age.isnull()) & (test_data['Title'] == title),'Age']=test_df['Age'][title]\n    \ntest_data.isnull().sum()","49b3e7c3":"test_data.loc[test_data['Title']=='Ms']","56dd60e3":"test_data['Age']=test_data['Age'].fillna(21)\n\ntest_data.isnull().sum()","6f50a453":"test_data[test_data.Fare.isnull()]","94d7e51c":"test_data.groupby('Pclass')['Fare'].median()","cd131801":"test_data['Fare']=test_data['Fare'].fillna(7.9)","4220ca8a":"test_data.isnull().sum()","24f1102e":"train_data.groupby(['Sex', 'Survived'] )['Survived'].count().unstack('Sex').plot(kind='bar')     ","053cc078":"train_data['Sex'] = train_data.Sex.apply(lambda x: 0 if x == \"female\" else 1)\ntest_data['Sex'] = test_data.Sex.apply(lambda x: 0 if x == \"female\" else 1)","8f765717":"train_data.drop('Cabin', axis=1)\n\ntest_data.drop ('Cabin', axis=1)","5137b0e4":"for age in test_data['Age']:\n    \n    test_data.loc[(test_data['Age'] < 18),'Is_child']=1\n    test_data.loc[(test_data['Age'] >= 18),'Is_child']=0\n\ntest_data.loc[test_data['Is_child']==1].sample(5)","c231bfb4":"for age in train_data['Age']:\n    \n    train_data.loc[(train_data['Age']<18),'Is_child']=1\n    train_data.loc[(train_data['Age']>= 18),'Is_child']=0\n\ntrain_data.sample(5)","e5beb384":"Keys = {'Capt': 1, 'Col': 1, 'Countess': 2, 'Don':1, 'Dr':1,'Dona':2, 'Jonkheer':1, 'Lady':2, 'Major':1, 'Mlle':3, 'Mme':2, 'Ms': 3, 'Rev': 1, 'Sir':1,'Mr':1,'Mrs':2,'Miss':3,'Master':4}\n\n# Remap the values of the dataframe \ntrain_data= train_data.replace({'Title':Keys})\ntest_data=test_data.replace({'Title':Keys})","35308625":"#Confirm if remapping worked\n#test_data.head()","a0488ab5":"Emb_Keys={'C':1,'Q':2,'S':3}\n\ntrain_data=train_data.replace({'Embarked':Emb_Keys})\n\ntest_data=test_data.replace({'Embarked':Emb_Keys})","5c2d735f":"train_data['Is_Alone']=train_data['SibSp']+train_data['Parch']\n\ntrain_data['Is_Alone']=train_data.Is_Alone.apply(lambda x:1 if x == 0 else 0)\n\ntest_data['Is_Alone']=test_data['SibSp']+test_data['Parch']\ntest_data['Is_Alone']=test_data.Is_Alone.apply(lambda x:1 if x == 0 else 0)","dd996cea":"train_data['Ind_Fare']=train_data['Fare']\/(train_data['SibSp']+train_data['Parch']+1)\ntest_data['Ind_Fare']=test_data['Fare']\/(test_data['SibSp']+test_data['Parch']+1)","84c80135":"train_data.sample(5)","d74edbfb":"train_data['Fam_Size']=train_data['SibSp']+train_data['Parch']\ntest_data['Fam_Size']=test_data['SibSp']+test_data['Parch']","e728e160":"plt.subplots(figsize = (15,10))\nsns.heatmap(train_data.drop(columns='PassengerId').corr(), annot=True,cmap=\"RdYlGn_r\")\nplt.title(\"Feature Correlations\", fontsize = 18)","f2402404":"from sklearn.ensemble import RandomForestClassifier\n\n#Select features\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\",'Fare','Title','Is_child','Is_Alone']\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=20, max_depth=10, random_state=7)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","1f39ccd4":"Deal with Missing Age","d73fd736":"* Deal With Missing Cabin Data\n\nI dont think the cabin will impact the model as such, since we can use fare and Pclass . To delete or not to delete ?","f368af73":"Embarked contains two missing values","f985873a":"# Correlation Matrix\n\nTo determine which variables affect the survival rate","d14dda97":"Add is_alone feature","1d748166":"# Handling Missing Values","726243b5":"Add Individual Fare feature","a83e14e1":"Convert the categorical Gender values to integers","c8213362":"Deal with missing fare values","677824a5":"Add a new feature Is_child","68073e05":"O'Donoghue, Ms. Bridget's Age wasnt populated because we do not have a mean Value for the Ms tittle\n\nOn googling i found out that she was 21 years old","61a7fd4c":"Family Size Feature","579d5d5d":"Dealing with Mising data in the test file","6cb62f5a":"Convert Embarking points to integers","853bc4ca":"# Feature Generation","65bd5b51":"I decided to use a random forest classifier Algorithm as my first algorithm","394a323f":"Convert tittles to integers","4311e12b":"# Random Forest Classifier","3c0176ec":"Amelie and Martha Boarded in Southampton according to encyclopedia-titanica.org \n*\"Mrs Stone boarded the Titanic in Southampton on 10 April 1912 and was travelling in first class with her maid Amelie Icard. She occupied cabin B-28\"*","31ce54ec":"# **Handling Categorical Data**"}}