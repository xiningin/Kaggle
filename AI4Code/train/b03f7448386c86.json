{"cell_type":{"d05a7d23":"code","cc715558":"code","ae8cc052":"code","e05edf2b":"code","f83b6b19":"code","0778181a":"code","b59cb615":"code","b4aa6540":"code","be542544":"code","900eac81":"code","f2a128fa":"code","5147d96b":"code","7bafbe7a":"code","1d52386b":"code","e0cdb982":"code","d20c15cc":"code","2d570bb0":"code","6cfee62a":"code","d11f3c48":"code","b3f5d252":"code","55111614":"code","828032c5":"code","971865ec":"code","1dabba8c":"code","8460ab87":"code","e9c465f7":"code","03331b99":"code","4d316c5d":"code","063906ad":"code","2d8e236f":"code","f2211217":"markdown","80ce21a9":"markdown","dd6deed4":"markdown","32c4e804":"markdown","c1919c3a":"markdown","71dca31e":"markdown","54d8f4a7":"markdown","0778fb41":"markdown","061f223b":"markdown","983f5fef":"markdown","5f770049":"markdown","5605c2d3":"markdown"},"source":{"d05a7d23":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cc715558":"!wget https:\/\/www.tensorflow.org\/tutorials\/structured_data\/images\/raw_window_1h.png\n!wget https:\/\/www.tensorflow.org\/tutorials\/structured_data\/images\/raw_window_24h.png\n!wget https:\/\/www.tensorflow.org\/tutorials\/structured_data\/images\/split_window.png","ae8cc052":"import pandas as pd \nimport numpy as np\nimport matplotlib as mpl \nimport matplotlib.pyplot as plt\n","e05edf2b":"from keras.preprocessing.sequence import TimeseriesGenerator\nfrom IPython.display import Image,display","f83b6b19":"mpl.rcParams['figure.figsize']=(10,8)\nmpl.rcParams['axes.grid']=False","0778181a":"df=pd.read_csv(\"https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/00374\/energydata_complete.csv\")","b59cb615":"df.head()","b4aa6540":"df.describe()","be542544":"df.info()","900eac81":"df['date']=pd.to_datetime(df['date'],infer_datetime_format=True)","f2a128fa":"df.set_index('date')['T_out'].plot()","5147d96b":"df.set_index('date')[['T_out', 'RH_2', 'Appliances','lights']].plot(subplots=True)","7bafbe7a":"features = df[['Appliances','T_out','RH_2']].to_numpy().tolist()\ntarget=df['Appliances'].tolist()","1d52386b":"features[0:10]","e0cdb982":"target[0:10]","d20c15cc":"display(Image('raw_window_1h.png'))\nprint(\"===========================================================================\")\ndisplay(Image('split_window.png'))\nprint(\"===========================================================================\")\ndisplay(Image('raw_window_24h.png'))","2d570bb0":"ts_generator = TimeseriesGenerator(features,target,length=6,sampling_rate=1,batch_size=1)","6cfee62a":"ts_generator[0]","d11f3c48":"ts_generator[0][0][0].shape","b3f5d252":"features","55111614":"ts_generator[4]","828032c5":"len(ts_generator)","971865ec":"ts_generator=TimeseriesGenerator(features,target,length=6,sampling_rate=1,batch_size=1,stride=2)","1dabba8c":"ts_generator[0]","8460ab87":"ts_generator[1]","e9c465f7":"pd.concat([df['Appliances'],df['Appliances'].shift(-1),df['Appliances'].shift(-2)],axis=1)","03331b99":"multi_target=pd.concat([df['Appliances'],df['Appliances'].shift(-1),df['Appliances'].shift(-2)],axis=1).dropna().to_numpy().tolist()","4d316c5d":"multi_target","063906ad":"ts_generator=TimeseriesGenerator(features[:-2],multi_target,length=6,sampling_rate=1,batch_size=1,stride=6)","2d8e236f":"ts_generator[0]","f2211217":"**In order to feed the time series data to sequence models like rnn, lstm, we have to prepare the data accordingly, Here if we take the total width as 7 we are feeding the first 6 as input and last one as target or label, like the same we do according to the data and domain problem**","80ce21a9":"**The target values takes the 7th row from the multi target variable**","dd6deed4":"**The second generator[1] takes from the third row(50,...) as we give the stride = 2**","32c4e804":"**By setting the date field as index, we can able to visualize the plots**","c1919c3a":"**ts_generator gives the next records appliances as the target to the considered six rows.**","71dca31e":"**Eg: after 70, the row's appliance is 230, so it takes 230 as label to these records**","54d8f4a7":"# Time series data preparation for RNN & LSTM models","0778fb41":"**As the date field is of object type, we are converting it into datetime type**","061f223b":"**The shift(-1) takes the immediate next value and shift(-2) takes the second next value. As the last two rows don't have any values to take, it gives NaN values**","983f5fef":"**Time series generator with stride 2**","5f770049":"Input - 1,2,3,4,5,6,7,8,9\n\nSliding window (window size 3, stride 1) - 1,2,3    2,3,4   4,5,6\n\nSliding window (window size 3, stride 2) - 1,2,3    3,4,5   7,8,9\n\nTumbling window (Window size 3)   - 1,2,3   4,5,6   7,8,9","5605c2d3":"## Time series generator"}}