{"cell_type":{"8519493d":"code","1c90dfd1":"code","2a23b2c5":"code","47483c6a":"code","522366db":"code","798cd633":"code","6d141fe2":"code","55abd899":"code","bbf1a246":"code","8a036b91":"code","297036f4":"code","dba85f6a":"code","6b64393e":"code","1b891891":"code","fc12d4ee":"code","653a198e":"code","3d910455":"markdown","0aadcbc5":"markdown","39d137cc":"markdown","eb0b19ad":"markdown","2ae1eebb":"markdown","d75a79db":"markdown","f2e44385":"markdown","60019d7e":"markdown","ccd90c53":"markdown","595aab5b":"markdown","478258fb":"markdown","854eeaab":"markdown","33571142":"markdown"},"source":{"8519493d":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cross_validation import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.cross_validation import StratifiedKFold\nfrom sklearn.neighbors import KNeighborsClassifier","1c90dfd1":"train_data = pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')\ndata_for_ID = pd.read_csv('..\/input\/test.csv')","2a23b2c5":"train_data.head()","47483c6a":"train_data.drop(['PassengerId','Name','Ticket','Cabin'], axis=1, inplace=True)\ntest_data.drop(['PassengerId','Name','Ticket','Cabin'], axis=1, inplace=True)","522366db":"all_data = pd.concat([test_data, train_data])","798cd633":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a Pclass \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0448\u0430\u043d\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0441\u043f\u0430\u0441\u0442\u0438\u0441\u044c\nprint(train_data[['Pclass', 'Survived']].groupby(['Pclass']).mean())\nsns.catplot(x='Pclass', y='Survived',  kind='bar', data=train_data)","6d141fe2":"### \u0422\u0430\u043a \u0436\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u043f\u043e\u043b \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0448\u0430\u043d\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0441\u043f\u0430\u0441\u0442\u0438\u0441\u044c\nprint(train_data[['Sex', 'Survived']].groupby(['Sex']).mean())\nsns.catplot(x='Sex', y='Survived',  kind='bar', data=train_data)","55abd899":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0437\u0430\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0435\u043d\u044c\u0433\u0438 \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0448\u0430\u043d\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0441\u043f\u0430\u0441\u0442\u0438\u0441\u044c\ng = sns.FacetGrid(train_data, col='Survived')\ng = g.map(sns.distplot, \"Fare\")","bbf1a246":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0448\u0430\u043d\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0441\u043f\u0430\u0441\u0442\u0438\u0441\u044c\ng = sns.FacetGrid(train_data, col='Survived')\ng = g.map(sns.distplot, \"Age\")","8a036b91":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0432\u043e \u0440\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u043e\u0432 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0448\u0430\u043d\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0441\u043f\u0430\u0441\u0442\u0438\u0441\u044c\nsns.catplot(x='SibSp', y='Survived', data=train_data, kind='bar')","297036f4":"def munge_data(data):\n    #\u0417\u0430\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u044b\n    data[\"Age\"] = data.apply(lambda r: data.groupby(\"Sex\")[\"Age\"].median()[r[\"Sex\"]] \n                                      if pd.isnull(r[\"Age\"]) else r[\"Age\"], axis=1)\n    #\u0417\u0430\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u044b\n    data[\"Fare\"] = data.apply(lambda r: all_data.groupby(\"Pclass\")[\"Fare\"].median()[r[\"Pclass\"]] \n                              if pd.isnull(r[\"Fare\"]) else r[\"Fare\"], axis=1)\n    # Gender - \u0437\u0430\u043c\u0435\u043d\u0430\n    genders = {\"male\": 1, \"female\": 0}\n    data[\"Sex\"] = data[\"Sex\"].apply(lambda s: genders.get(s))\n    # Gender - \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\n    gender_dummies = pd.get_dummies(data[\"Sex\"], prefix=\"SexD\", dummy_na=False)\n    data = pd.concat([data, gender_dummies], axis=1)\n    # Embarkment - \u0437\u0430\u043c\u0435\u043d\u0430\n    embarkments = {\"U\": 0, \"S\": 1, \"C\": 2, \"Q\": 3}\n    data[\"Embarked\"] = data[\"Embarked\"].fillna(\"U\").apply(lambda e: embarkments.get(e))\n    # Embarkment - \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\n    embarkment_dummies = pd.get_dummies(data[\"Embarked\"], prefix=\"EmbarkedD\", dummy_na=False)\n    data = pd.concat([data, embarkment_dummies], axis=1)\n    # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u043e\u0432 \u043d\u0430 \u0431\u043e\u0440\u0442\u0443\n    data[\"Relatives\"] = data[\"Parch\"] + data[\"SibSp\"]\n    \n    return(data)","dba85f6a":"train_data_munged = munge_data(train_data).drop(['EmbarkedD_0'],axis=1)\ntest_data_munged = munge_data(test_data)","6b64393e":"cv = StratifiedKFold(train_data[\"Survived\"], n_folds=3, shuffle=True, random_state=1)","1b891891":"alg = RandomForestClassifier(random_state=1, n_estimators=350, min_samples_split=6, min_samples_leaf=2)\nscores = cross_val_score(alg, train_data_munged, train_data_munged[\"Survived\"], cv=cv)\nprint(\"Accuracy (random forest): {}\".format(scores.mean()))","fc12d4ee":"alg_ngbh = KNeighborsClassifier(n_neighbors=3)\nscores = cross_val_score(alg_ngbh, train_data_munged, train_data_munged[\"Survived\"], cv=cv)\nprint(\"Accuracy (k-neighbors): {}\".format(scores.mean()))","653a198e":"alg.fit(train_data_munged.drop([\"Survived\"],axis=1), train_data_munged[\"Survived\"])\n\npredictions = alg.predict(test_data_munged)\n\nsubmission = pd.DataFrame({\n    \"PassengerId\": data_for_ID[\"PassengerId\"],\n    \"Survived\": predictions\n})\n\nsubmission.to_csv(\"titanic-submission.csv\", index=False)","3d910455":"### \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","0aadcbc5":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435","39d137cc":"### \u041c\u044b \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0441\u043f\u0430\u0441\u0448\u0438\u0445\u0441\u044f \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 - \u0436\u0435\u043d\u0449\u0438\u043d\u044b","eb0b19ad":"### \u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043d\u0430 \u0442\u0440\u0438 \u0444\u043e\u043b\u0434\u0430","2ae1eebb":"### \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0447\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u0440\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u043e\u0432 \u0431\u044b\u043b\u043e \u0443 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0431\u044b\u043b \u0435\u0433\u043e \u0448\u0430\u043d\u0441 \u0441\u043f\u0430\u0441\u0442\u0438\u0441\u044c","d75a79db":"### \u0418\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442, \u043a\u0430\u043a \u043a\u0430\u0436\u0435\u0442\u0441\u044f, \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043d\u0435\u0441\u0443\u0442 \u043e\u0441\u043e\u0431\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438","f2e44385":"### \u0427\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u044b \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u043b, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u0432\u043e\u0439 \u0448\u0430\u043d\u0441 \u0441\u043f\u0430\u0441\u0442\u0438\u0441\u044c","60019d7e":"### \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u044b\u0445 \u043d\u0430 \u0441\u043f\u0430\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0448\u043b\u044e\u043f\u043a\u0438 \u0441\u0430\u0436\u0430\u043b\u0438 \u0436\u0435\u043d\u0449\u0438\u043d \u0438 \u0434\u0435\u0442\u0435\u0439","ccd90c53":"### \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","595aab5b":"### \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043c\u044b \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u043b\u044b\u043b \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440, \u043f\u043e-\u0440\u0430\u0437\u043d\u043e\u043c\u0443 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0435\u0433\u043e \u0448\u0430\u043d\u0441 \u0441\u043f\u0430\u0441\u0442\u0438\u0441\u044c","478258fb":"### \u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c RandomForestClassifier","854eeaab":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0432\u0430 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 - Random Forest \u0438 K Nearest Neighbors","33571142":"### \u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c EDA"}}