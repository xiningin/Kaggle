{"cell_type":{"a818bbd2":"code","0534e9bd":"code","324642d2":"code","ee9ef55c":"code","fec28d16":"code","5229d7a6":"code","87300707":"code","54276c66":"code","dce23cc7":"code","3197ab94":"code","6aeb25ba":"code","c5429c1f":"code","92597327":"code","0f80cbfd":"code","8181f153":"code","04642b68":"code","ff86dd30":"code","ba77f632":"code","541b7a63":"code","4edf8890":"code","f2c4ae0f":"code","6d19aa34":"code","4711fb25":"code","9bceeb0c":"code","9cd36565":"code","773753f3":"code","c6421f72":"code","72708b7d":"code","45cb115e":"code","083e329d":"code","eaa159b7":"code","186f255c":"code","2f900c13":"code","08fedb80":"code","32d7adbc":"code","eb820a79":"code","91d2ac85":"code","ef3c1b83":"code","3556d4a6":"code","e291cbbc":"code","d9c4485e":"code","8cf56ebb":"code","38c5764a":"code","58d07c2d":"code","49cc5080":"code","d734a4aa":"code","777ce1e8":"code","6e37c795":"code","bd562249":"code","c3d49145":"code","31d27b1a":"code","cc87db09":"code","d80d8e38":"code","5928614d":"code","13f49085":"code","c305d1f5":"code","b10b7a47":"code","13b23023":"code","7d41a49e":"code","fff39674":"code","b93e3747":"code","42aadd48":"code","ec339c51":"code","619d6917":"code","2d6fd3a0":"code","a9db0559":"code","dd69187f":"code","cd14eedd":"code","341c6c1e":"code","45c61f62":"code","1e09de87":"code","7fb94827":"code","fe14ff34":"code","ce6ef116":"code","bb917df0":"code","de7ef197":"code","789dd61b":"code","d58c8bcb":"code","ab98a6b7":"code","9a07bdec":"code","6d74ae30":"code","e03aaae3":"code","3d041c73":"code","c0c7ffd6":"code","621cd156":"code","d79a27e0":"code","9d8602be":"code","50af9d00":"code","0a0c62c3":"code","f134f9ab":"code","8a07d58e":"code","a2984eaa":"code","c9517c37":"code","1a89dadb":"code","29db2884":"code","6f630201":"markdown","96889df9":"markdown","a8cdbaa0":"markdown","705cd752":"markdown","3db26d93":"markdown","111fb591":"markdown","0eb729c3":"markdown","4c97603f":"markdown","26036e45":"markdown","e3e6de85":"markdown","cd67942d":"markdown"},"source":{"a818bbd2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0534e9bd":"app_df = pd.read_csv(\"\/kaggle\/input\/credit-card-approval-prediction\/application_record.csv\")\napp_df.head()","324642d2":"credit_df = pd.read_csv(\"\/kaggle\/input\/credit-card-approval-prediction\/credit_record.csv\") \ncredit_df.head()","ee9ef55c":"credit_df.shape","fec28d16":"credit_df.info()","5229d7a6":"app_df.describe()","87300707":"app_df.isnull().sum()","54276c66":"# dropping occupation type which has many null values\napp_df.drop('OCCUPATION_TYPE', axis=1, inplace=True)","dce23cc7":"len(app_df['ID']) - len(app_df['ID'].unique())","3197ab94":"# Dropping duplicate entries from ID column\napp_df = app_df.drop_duplicates('ID', keep='last') ","6aeb25ba":"# Checking Non-Numerical Columns\ncat_columns = app_df.columns[(app_df.dtypes =='object').values].tolist()\ncat_columns","c5429c1f":"# Checking Numerical Columns\napp_df.columns[(app_df.dtypes !='object').values].tolist()","92597327":"# Checking unique values from Categorical Columns\n\nfor i in app_df.columns[(app_df.dtypes =='object').values].tolist():\n    print(i,'\\n')\n    print(app_df[i].value_counts())\n    print('-----------------------------------------------')","0f80cbfd":"# Checking unique values from Numerical Columns\napp_df['CNT_CHILDREN'].value_counts()","8181f153":"# Checking Min , Max values from 'DAYS_BIRTH' column\nprint('Min DAYS_BIRTH :', app_df['DAYS_BIRTH'].min(),'\\nMax DAYS_BIRTH :', app_df['DAYS_BIRTH'].max())","04642b68":"# Converting 'DAYS_BIRTH' values from Day to Years\napp_df['DAYS_BIRTH'] = round(app_df['DAYS_BIRTH']\/-365,0)\napp_df.rename(columns={'DAYS_BIRTH':'AGE_YEARS'}, inplace=True)","ff86dd30":"# Checking unique values greater than 0\napp_df[app_df['DAYS_EMPLOYED']>0]['DAYS_EMPLOYED'].unique()","ba77f632":"# As mentioned in document, if 'DAYS_EMPLOYED' is positive no, it means person currently unemployed, hence replacing it with 0\napp_df['DAYS_EMPLOYED'].replace(365243, 0, inplace=True)","541b7a63":"# Converting 'DAYS_EMPLOYED' values from Day to Years\napp_df['DAYS_EMPLOYED'] = abs(round(app_df['DAYS_EMPLOYED']\/-365,0))\napp_df.rename(columns={'DAYS_EMPLOYED':'YEARS_EMPLOYED'}, inplace=True) ","4edf8890":"app_df['FLAG_MOBIL'].value_counts()","f2c4ae0f":"# As all the values in column are 1, hence dropping column\napp_df.drop('FLAG_MOBIL', axis=1, inplace=True)","6d19aa34":"app_df['FLAG_WORK_PHONE'].value_counts()","4711fb25":"# This column only contains 0 & 1 values for Mobile no submitted, hence dropping column\napp_df.drop('FLAG_WORK_PHONE', axis=1, inplace=True)","9bceeb0c":"app_df['FLAG_PHONE'].value_counts()","9cd36565":"# This column only contains 0 & 1 values for Phone no submitted, hence dropping column\napp_df.drop('FLAG_PHONE', axis=1, inplace=True)","773753f3":"app_df['FLAG_EMAIL'].value_counts()","c6421f72":"# This column only contains 0 & 1 values for Email submitted, hence dropping column\napp_df.drop('FLAG_EMAIL', axis=1, inplace=True)","72708b7d":"app_df['CNT_FAM_MEMBERS'].value_counts()","45cb115e":"app_df.head()","083e329d":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","eaa159b7":"#create plot to detect outliers\nsns.boxplot(app_df['CNT_CHILDREN'])","186f255c":"sns.boxplot(app_df['AMT_INCOME_TOTAL'])","2f900c13":"sns.boxplot(app_df['AGE_YEARS'])","08fedb80":"sns.boxplot(app_df['YEARS_EMPLOYED'])","32d7adbc":"sns.boxplot(app_df['CNT_FAM_MEMBERS'])","eb820a79":"high_bound = app_df['CNT_CHILDREN'].quantile(0.999)\nprint('high_bound :', high_bound)\nlow_bound = app_df['CNT_CHILDREN'].quantile(0.001)\nprint('low_bound :', low_bound)","91d2ac85":"app_df = app_df[(app_df['CNT_CHILDREN']>=low_bound) & (app_df['CNT_CHILDREN']<=high_bound)]","ef3c1b83":"high_bound = app_df['AMT_INCOME_TOTAL'].quantile(0.999)\nprint('high_bound :', high_bound)\nlow_bound = app_df['AMT_INCOME_TOTAL'].quantile(0.001)\nprint('low_bound :', low_bound)","3556d4a6":"app_df = app_df[(app_df['AMT_INCOME_TOTAL']>=low_bound) & (app_df['AMT_INCOME_TOTAL']<=high_bound)]","e291cbbc":"high_bound = app_df['YEARS_EMPLOYED'].quantile(0.999)\nprint('high_bound :', high_bound)\nlow_bound = app_df['YEARS_EMPLOYED'].quantile(0.001)\nprint('low_bound :', low_bound)","d9c4485e":"app_df = app_df[(app_df['YEARS_EMPLOYED']>=low_bound) & (app_df['YEARS_EMPLOYED']<=high_bound)]","8cf56ebb":"high_bound = app_df['CNT_FAM_MEMBERS'].quantile(0.999)\nprint('high_bound :', high_bound)\nlow_bound = app_df['CNT_FAM_MEMBERS'].quantile(0.001)\nprint('low_bound :', low_bound)","38c5764a":"app_df = app_df[(app_df['CNT_FAM_MEMBERS']>=low_bound) & (app_df['CNT_FAM_MEMBERS']<=high_bound)]","58d07c2d":"app_df.head()","49cc5080":"credit_df.head()","d734a4aa":"app_df.isnull().sum()","777ce1e8":"credit_df['STATUS'].value_counts()","6e37c795":"# categorizing 'STATUS' column to binary classification   0 : Good Client and 1 : bad client\ncredit_df['STATUS'].replace(['C', 'X'],0, inplace=True)","bd562249":"credit_df['STATUS'].replace(['2','3','4','5'],1, inplace=True)","c3d49145":"credit_df['STATUS'] = credit_df['STATUS'].astype('int')","31d27b1a":"credit_df.info()","cc87db09":"credit_df['STATUS'].value_counts(normalize=True)*100","d80d8e38":"credit_df_trans = credit_df.groupby('ID').agg(max).reset_index()","5928614d":"credit_df_trans.drop('MONTHS_BALANCE', axis=1, inplace=True)\ncredit_df_trans.head()","13f49085":"credit_df_trans['STATUS'].value_counts(normalize=True)*100","c305d1f5":"# merging the two datasets based on 'ID'\nfinal_df = pd.merge(app_df, credit_df_trans, on='ID', how='inner')\nfinal_df.head()","b10b7a47":"final_df.shape","13b23023":"# dropping 'ID' column as it is having only unique values (not required for ML Model)\nfinal_df.drop('ID', axis=1, inplace=True)","7d41a49e":"# checking if there are still duplicate rows in Final Dataframe\nlen(final_df) - len(final_df.drop_duplicates())","fff39674":"# Dropping duplicate records\nfinal_df = final_df.drop_duplicates()\nfinal_df.reset_index(drop=True ,inplace=True)","b93e3747":"final_df.shape","42aadd48":"final_df.isnull().sum()","ec339c51":"final_df['STATUS'].value_counts(normalize=True)*100","619d6917":"final_df.head()","2d6fd3a0":"# This graph shows that, there is no column (Feature) which is highly co-related with 'Status'\nplt.figure(figsize = (8,8))\nsns.heatmap(final_df.corr(), annot=True)\nplt.show()","a9db0559":"# This graph shows that, majority of application are submitted by Female's\nplt.pie(final_df['CODE_GENDER'].value_counts(), labels=['Female', 'Male'], autopct='%1.2f%%')\nplt.title('% of Applications submitted based on Gender')\nplt.show()","dd69187f":"# This graph shows that, majority of application are approved for Female's\nplt.pie(final_df[final_df['STATUS']==0]['CODE_GENDER'].value_counts(), labels=['Female', 'Male'], autopct='%1.2f%%')\nplt.title('% of Applications Approved based on Gender')\nplt.show()","cd14eedd":"# This graph shows that, majority of applicatant's dont own a car\nplt.pie(final_df['FLAG_OWN_CAR'].value_counts(), labels=['No', 'Yes'], autopct='%1.2f%%')\nplt.title('% of Applications submitted based on owning a Car')\nplt.show()","341c6c1e":"# This graph shows that, majority of applicatant's own a Real Estate property \/ House\nplt.pie(final_df['FLAG_OWN_REALTY'].value_counts(), labels=['Yes','No'], autopct='%1.2f%%')\nplt.title('% of Applications submitted based on owning a Real estate property')\nplt.show()","45c61f62":"# This graph shows that, majority of applicatant's don't have any children\nplt.figure(figsize = (8,8))\nplt.pie(final_df['CNT_CHILDREN'].value_counts(), labels=final_df['CNT_CHILDREN'].value_counts().index, autopct='%1.2f%%')\nplt.title('% of Applications submitted based on Children count')\nplt.legend()\nplt.show()","1e09de87":"# This graph shows that, majority of applicatant's income lies between 1 to 3 lakh\nplt.hist(final_df['AMT_INCOME_TOTAL'], bins=20)\nplt.xlabel('Total Annual Income')\nplt.title('Histogram')\nplt.show()","7fb94827":"# This graph shows that, majority of applicatant's are working professional\nplt.figure(figsize = (8,8))\nplt.pie(final_df['NAME_INCOME_TYPE'].value_counts(), labels=final_df['NAME_INCOME_TYPE'].value_counts().index, autopct='%1.2f%%')\nplt.title('% of Applications submitted based on Income Type')\nplt.legend()\nplt.show()","fe14ff34":"# This graph shows that, majority of applicatant's completed the Secondary Education\nplt.figure(figsize=(8,8))\nplt.pie(final_df['NAME_EDUCATION_TYPE'].value_counts(), labels=final_df['NAME_EDUCATION_TYPE'].value_counts().index, autopct='%1.2f%%')\nplt.title('% of Applications submitted based on Education')\nplt.legend()\nplt.show()","ce6ef116":"# This graph shows that, majority of applicatant's are married\nplt.figure(figsize=(8,8))\nsns.barplot(final_df['NAME_FAMILY_STATUS'].value_counts().index, final_df['NAME_FAMILY_STATUS'].value_counts().values)\nplt.title('% of Applications submitted based on Family Status')\nplt.show()","bb917df0":"# This graph shows that, majority of applicatant's lives in House \/ Apartment\nplt.figure(figsize=(12,5))\nsns.barplot(final_df['NAME_HOUSING_TYPE'].value_counts().index, final_df['NAME_HOUSING_TYPE'].value_counts().values)\nplt.title('% of Applications submitted based on Housing Type')\nplt.show()","de7ef197":"# This graph shows that, majority of applicatant's are 25 to 65 years old\nplt.hist(final_df['AGE_YEARS'], bins=20)\nplt.xlabel('Age')\nplt.title('Histogram')\nplt.show()","789dd61b":"# This graph shows that, majority of applicatant's are Employed for 0 to 7 years\nplt.hist(final_df['YEARS_EMPLOYED'], bins=20)\nplt.xlabel('No of Years Employed')\nplt.title('Histogram')\nplt.show()","d58c8bcb":"# This graph shows that, majority of applications are rejected if Total income & years of Employment is less\nsns.scatterplot(final_df['YEARS_EMPLOYED'], final_df['AMT_INCOME_TOTAL'], hue=final_df['STATUS'])\nplt.title('Scatter Plot')\nplt.show()","ab98a6b7":"final_df.head()","9a07bdec":"cat_columns = final_df.columns[(final_df.dtypes =='object').values].tolist()\ncat_columns","6d74ae30":"#Converting all Non-Numerical Columns to Numerical\nfrom sklearn.preprocessing import LabelEncoder\n\nfor col in cat_columns:\n        globals()['LE_{}'.format(col)] = LabelEncoder()\n        final_df[col] = globals()['LE_{}'.format(col)].fit_transform(final_df[col])\nfinal_df.head()    ","e03aaae3":"for col in cat_columns:\n    print(col , \"  : \", globals()['LE_{}'.format(col)].classes_)","3d041c73":"final_df.corr()","c0c7ffd6":"features = final_df.drop(['STATUS'], axis=1)\nlabel = final_df['STATUS']","621cd156":"features.head()","d79a27e0":"label.head()","9d8602be":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(features,\n                                                    label,\n                                                    test_size=0.2,\n                                                    random_state = 10)","50af9d00":"# Decision Tree classification\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\n\ndecision_model = DecisionTreeClassifier(max_depth=12,min_samples_split=8)\n\ndecision_model.fit(x_train, y_train)\n\nprint('Decision Tree Model Accuracy : ', decision_model.score(x_test, y_test)*100, '%')\n\nprediction = decision_model.predict(x_test)\nprint('\\nConfusion matrix :')\nprint(confusion_matrix(y_test, prediction))\n      \nprint('\\nClassification report:')      \nprint(classification_report(y_test, prediction))","0a0c62c3":"# Random Forest classification\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\nRandomForest_model = RandomForestClassifier(n_estimators=250,\n                                            max_depth=12,\n                                            min_samples_leaf=16)\n\nRandomForest_model.fit(x_train, y_train)\n\nprint('Random Forest Model Accuracy : ', RandomForest_model.score(x_test, y_test)*100, '%')\n\nprediction = RandomForest_model.predict(x_test)\nprint('\\nConfusion matrix :')\nprint(confusion_matrix(y_test, prediction))\n      \nprint('\\nClassification report:')      \nprint(classification_report(y_test, prediction))","f134f9ab":"# Support Vector Machine classification\n\nfrom sklearn.svm import SVC\n\nsvc_model = SVC()\n\nsvc_model.fit(x_train, y_train)\n\nprint('Support Vector Classifier Accuracy : ', svc_model.score(x_test, y_test)*100, '%')\n\nprediction = svc_model.predict(x_test)\nprint('\\nConfusion matrix :')\nprint(confusion_matrix(y_test, prediction))\n      \nprint('\\nClassification report:')      \nprint(classification_report(y_test, prediction))","8a07d58e":"DecisionTree Model Accuracy        :  73.64 %\nRandom Forest Model Accuracy       :  78.84 %\nSupport Vector Classifier Accuracy :  78.84 % ","a2984eaa":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nkfold = KFold(5)","c9517c37":"# Decision Tree classification\n\nresults=cross_val_score(decision_model,features,label,cv=kfold)\nprint(results*100,'\\n')\n\nprint(np.mean(results)*100)","1a89dadb":"# Random Forest classification\n\nresults=cross_val_score(RandomForest_model,features,label,cv=kfold)\nprint(results*100,'\\n')\n\nprint(np.mean(results)*100)","29db2884":"# Support Vector Machine classification\n\nresults=cross_val_score(svc_model,features,label,cv=kfold)\nprint(results*100,'\\n')\n\nprint(np.mean(results)*100)","6f630201":"# REMOVING OUTLIER****","96889df9":"# Machine Learning Model****","a8cdbaa0":"# Feature Selection****","705cd752":"**Removing outlier**","3db26d93":"# Validation****","111fb591":"**VISUALIZATION**","0eb729c3":"# Exploratory Data Analysis","4c97603f":"# DATA LOADING","26036e45":"# **VISUALIZATION**","e3e6de85":"# **MERGING DATAFRAMES**","cd67942d":"**on file- Credit Record.csv**"}}