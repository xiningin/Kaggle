{"cell_type":{"5eca8471":"code","daaf1922":"code","d74f9808":"code","a0e25263":"code","198a485b":"code","c6a9dca7":"code","2adcd1b9":"code","3730d9f7":"code","709c6794":"code","362f77f4":"code","0679fce4":"code","a00682e4":"code","69fce804":"code","0154999b":"code","af7ef405":"code","50b2c86f":"code","ca9d48f5":"code","4e26a298":"code","c5bd494c":"code","905c4423":"code","6c904d98":"code","062c8f33":"code","51f2a8c3":"markdown"},"source":{"5eca8471":"!pip install hmmlearn -q","daaf1922":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os, random\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MaxNLocator\nimport seaborn as sns\nsns.set_style('whitegrid')\n\nfrom hmmlearn import hmm","d74f9808":"SEED = 2021\nnp.random.seed(SEED)\nrandom.seed(SEED)","a0e25263":"# load dataset\nset1 = pd.read_csv('..\/input\/nasa-bearing-time-features\/set1_extracted.csv')\nset1.columns = ['date'] + list(set1.columns[1:])\nset1['date'] = pd.to_datetime(set1['date'])\n\nset2 = pd.read_csv('..\/input\/nasa-bearing-time-features\/set2_extracted.csv')\nset2.columns = ['date'] + list(set2.columns[1:])\nset2['date'] = pd.to_datetime(set2['date'])\n\nset3 = pd.read_csv('..\/input\/nasa-bearing-time-features\/set3_extracted.csv')\nset3.columns = ['date'] + list(set3.columns[1:])\nset3['date'] = pd.to_datetime(set3['date'])\n\n# set date as index\nset1 = set1.set_index('date')\nset2 = set2.set_index('date')\nset3 = set3.set_index('date')\n\nset1.head()","198a485b":"# merge a and b from bearing 1-4\nset1['B1_mean'] = (set1['B1_a_mean'] + set1['B1_b_mean'])\/2\nset1['B1_std'] = (set1['B1_a_std'] + set1['B1_b_std'])\/2\nset1['B1_skew'] = (set1['B1_a_skew'] + set1['B1_b_skew'])\/2\nset1['B1_kurtosis'] = (set1['B1_a_kurtosis'] + set1['B1_b_kurtosis'])\/2\nset1['B1_rms'] = (set1['B1_a_rms'] + set1['B1_b_rms'])\/2\nset1['B1_max'] = (set1['B1_a_max'] + set1['B1_b_max'])\/2\n\nset1['B2_mean'] = (set1['B2_a_mean'] + set1['B2_b_mean'])\/2\nset1['B2_std'] = (set1['B2_a_std'] + set1['B2_b_std'])\/2\nset1['B2_skew'] = (set1['B2_a_skew'] + set1['B2_b_skew'])\/2\nset1['B2_kurtosis'] = (set1['B2_a_kurtosis'] + set1['B2_b_kurtosis'])\/2\nset1['B2_rms'] = (set1['B2_a_rms'] + set1['B2_b_rms'])\/2\nset1['B2_max'] = (set1['B2_a_max'] + set1['B2_b_max'])\/2\n\nset1['B3_mean'] = (set1['B3_a_mean'] + set1['B3_b_mean'])\/2\nset1['B3_std'] = (set1['B3_a_std'] + set1['B3_b_std'])\/2\nset1['B3_skew'] = (set1['B3_a_skew'] + set1['B3_b_skew'])\/2\nset1['B3_kurtosis'] = (set1['B3_a_kurtosis'] + set1['B3_b_kurtosis'])\/2\nset1['B3_rms'] = (set1['B3_a_rms'] + set1['B3_b_rms'])\/2\nset1['B3_max'] = (set1['B3_a_max'] + set1['B3_b_max'])\/2\n\nset1['B4_mean'] = (set1['B4_a_mean'] + set1['B4_b_mean'])\/2\nset1['B4_std'] = (set1['B4_a_std'] + set1['B4_b_std'])\/2\nset1['B4_skew'] = (set1['B4_a_skew'] + set1['B4_b_skew'])\/2\nset1['B4_kurtosis'] = (set1['B4_a_kurtosis'] + set1['B4_b_kurtosis'])\/2\nset1['B4_rms'] = (set1['B4_a_rms'] + set1['B4_b_rms'])\/2\nset1['B4_max'] = (set1['B4_a_max'] + set1['B4_b_max'])\/2\n\nset1 = set1[['B1_mean','B1_std','B1_skew','B1_kurtosis','B1_rms','B1_max',\n             'B2_mean','B2_std','B2_skew','B2_kurtosis','B2_rms','B2_max',\n             'B3_mean','B3_std','B3_skew','B3_kurtosis','B3_rms','B3_max',\n             'B4_mean','B4_std','B4_skew','B4_kurtosis','B4_rms','B4_max']]\nset1.head()","c6a9dca7":"# remove max\n# set1 = set1.drop(['B1_kurtosis','B2_kurtosis','B3_kurtosis','B4_kurtosis'],axis=1)\n# set2 = set2.drop(['B1_kurtosis','B2_kurtosis','B3_kurtosis','B4_kurtosis'],axis=1)\n# set3 = set3.drop(['B1_kurtosis','B2_kurtosis','B3_kurtosis','B4_kurtosis'],axis=1)","2adcd1b9":"# statistics\nset1.describe().T","3730d9f7":"# statistics\nset2.describe().T","709c6794":"# statistics\nset3.describe().T","362f77f4":"set1['B1_mean'].plot(figsize=(12,6));\nset1['B2_mean'].plot(figsize=(12,6));\nset1['B3_mean'].plot(figsize=(12,6));\nset1['B4_mean'].plot(figsize=(12,6));","0679fce4":"set1['B1_std'].plot(figsize=(12,6));\nset1['B2_std'].plot(figsize=(12,6));\nset1['B3_std'].plot(figsize=(12,6));\nset1['B4_std'].plot(figsize=(12,6));","a00682e4":"set1['B1_skew'].plot(figsize=(12,6));\nset1['B2_skew'].plot(figsize=(12,6));\nset1['B3_skew'].plot(figsize=(12,6));\nset1['B4_skew'].plot(figsize=(12,6));","69fce804":"set1['B1_kurtosis'].plot(figsize=(12,6));\nset1['B2_kurtosis'].plot(figsize=(12,6));\nset1['B3_kurtosis'].plot(figsize=(12,6));\nset1['B4_kurtosis'].plot(figsize=(12,6));","0154999b":"set1['B1_rms'].plot(figsize=(12,6));\nset1['B2_rms'].plot(figsize=(12,6));\nset1['B3_rms'].plot(figsize=(12,6));\nset1['B4_rms'].plot(figsize=(12,6));","af7ef405":"set1['B1_max'].plot(figsize=(12,6));\nset1['B2_max'].plot(figsize=(12,6));\nset1['B3_max'].plot(figsize=(12,6));\nset1['B4_max'].plot(figsize=(12,6));","50b2c86f":"def slice_columns(columns, target='B1'):\n    if target == 'B1':\n        return columns[0:6]\n    elif target == 'B2':\n        return columns[6:12]\n    elif target == 'B3':\n        return columns[12:18]\n    elif target == 'B4':\n        return columns[18:]\n\ndef slice_columns2(columns, target='B1'):\n    if target == 'B1':\n        return columns[0:5]\n    elif target == 'B2':\n        return columns[5:10]\n    elif target == 'B3':\n        return columns[10:15]\n    elif target == 'B4':\n        return columns[15:]\n    \ndef flip_transmat(tm, ix_sort):\n    tm_ = tm.copy()\n    for i,ix in enumerate(ix_sort):\n        tm_[i, :] = tm[ix[0], :]\n    tm__ = tm_.copy()\n    for i,ix in enumerate(ix_sort):\n        tm__[:, i] = tm_[:,ix[0]]\n    return tm__\n\ndef fit_gmmhmm(data):\n    model = hmm.GMMHMM(n_components=3, \n                       n_mix=2, \n                       covariance_type=\"full\", \n                       n_iter=1000, \n                       random_state=SEED, \n                       tol=1e-4, verbose=False)\n    model.startprob_ = np.array([1., 0., 0.])\n    model.fit(data)\n    \n    # clasify each observation as state (0, 1, 2)\n    # hidden_states = model.predict(data)\n    \n    # find parameters of Gaussian HMM\n    startprob_ = model.startprob_\n    means_ = model.means_\n    transmat_ = model.transmat_\n    covars_ = model.covars_\n    weights_ = model.weights_\n    \n    # logprob\n#     logprob = model.score(data)\n    logprob = None\n    \n    # reorganize means and transmat\n    ix_sort = np.argsort(np.array([[np.mean(m)] for m in means_]), axis=0)\n    startprob = np.array([startprob_[ix][0] for ix in ix_sort])\n    means = np.array([means_[ix][0] for ix in ix_sort])\n    transmat = flip_transmat(transmat_, ix_sort)\n    covars = np.array([covars_[ix][0] for ix in ix_sort])\n    weights = np.array([weights_[ix][0] for ix in ix_sort])\n    \n    model.startprob_ = startprob\n    model.means_ = means\n    model.transmat_ = transmat\n    model.covars_ = covars\n    model.weights_ = weights\n    \n    return ix_sort, logprob, model","ca9d48f5":"col_features = slice_columns2(set1.columns, target='B1')\nix_sort, logprob, model = fit_gmmhmm(set1[col_features])\n\n# print(f'Log probability: {np.around(logprob, decimals=2)}')\nprint(f'Start probability: {np.around(model.startprob_, decimals=2)}')\nprint(f'Means:\\n{np.around(model.means_, decimals=2)}')\nprint(f'Transition Matrix:\\n{np.around(model.transmat_, decimals=2)}')\nprint(f'Covariance matrix:\\n{np.around(model.covars_, decimals=2)}')\nprint(f'Weights:\\n{np.around(model.weights_, decimals=2)}')\nprint(ix_sort)","4e26a298":"%%time\n# model GMMHMM\nbearing = ['B1','B2','B3','B4']\nmodel_gmmhmm = []\n\n# train set test 1\n# for b in ['B1','B2','B4']:\n#     col_features = slice_columns(set1.columns, target=b)\n#     ix_sort, logprob, model = fit_gmmhmm(set1[col_features])\n#     model_gmmhmm.append((ix_sort, logprob, model))\n    \n# train set test 2, except bearing 1\n# for bear in ['B2','B3','B4']:\n#     col_features = slice_columns(set2.columns, target=bear)\n#     ix_sort, logprob, model = fit_gmmhmm(set2[col_features])\n#     model_gmmhmm.append((ix_sort, logprob, model))\n    \n# train set test 3\nfor bear in ['B1','B2','B4']:\n    col_features = slice_columns(set3.columns, target=bear)\n    ix_sort, logprob, model = fit_gmmhmm(set3[col_features])\n    model_gmmhmm.append((ix_sort, logprob, model))","c5bd494c":"## GMMHMM\nmodel_data = ['S3_B1','S3_B2','S3_B4']\nx = set3.index\n\n# plot\nfor (ix,logprob,model),data in zip(model_gmmhmm, model_data):\n    col_features = slice_columns(set3.columns, target='B3')\n    y = model.predict(set3[col_features])\n    ax = plt.figure(figsize=(12,5)).gca()\n    ax.yaxis.set_major_locator(MaxNLocator(integer=True))\n\n    plt.plot(list(x), list(y))\n    plt.title(f\"Viterbi Decoding State GMMHMM from Model {data}\")\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"State\")\n    plt.show()","905c4423":"set3['B3_rms'].plot(figsize=(12,6));","6c904d98":"# function calculate RUL\ndef rul(time_state, conf):\n    # calculate mean and standard deviation\n    mean_std = {0: [], 1: [], 2: []}\n    for data in time_state.items():\n        state, time = data[0], data[1]\n        \n        decrease_time = []\n        if time:\n            for t in time:\n                decrease_time.append(t[1]-t[0])\n            \n        mean_state = np.mean(decrease_time)\n        std_state = np.std(decrease_time)\n        \n        mean_std[state].append((mean_state, std_state))\n    \n    \n    \n    # conver nan to zero\n    mean_std[0][0], mean_std[1][0], mean_std[2][0] = np.nan_to_num(mean_std[0][0]), np.nan_to_num(mean_std[1][0]), np.nan_to_num(mean_std[2][0])\n\n    # rul upper\n    rul_upper = (mean_std[0][0][0] + conf * mean_std[0][0][1]) + \\\n                (mean_std[1][0][0] + conf * mean_std[1][0][1]) + \\\n                (mean_std[2][0][0] + conf * mean_std[2][0][1])\n\n    # RUL Mean\n    rul_mean = (mean_std[0][0][0]) + \\\n               (mean_std[1][0][0]) + \\\n               (mean_std[2][0][0])\n\n    # RUL lower\n    rul_lower = (mean_std[0][0][0] - conf * mean_std[0][0][1]) + \\\n                (mean_std[1][0][0] - conf * mean_std[1][0][1]) + \\\n                (mean_std[2][0][0] - conf * mean_std[2][0][1])\n    # print(mean_std)\n    return rul_upper, rul_mean, rul_lower","062c8f33":"col_features = slice_columns2(set1.columns, target='B1')\nx = range(len(S3_B3))\ny = model_gaussianhmm1.predict(S3_B3)","51f2a8c3":"# GMMHMM"}}