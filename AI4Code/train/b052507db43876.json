{"cell_type":{"329de268":"code","08213099":"code","af077804":"code","83a04c36":"code","6a29de1f":"code","05989a0c":"code","d8e1d4ed":"code","871c2d3c":"code","4e968599":"code","3715551c":"code","77a7a38b":"code","3a700aef":"code","7a0b2cc6":"code","e52f7c07":"code","7ec082d5":"code","629b55c4":"code","967dab31":"code","aa6a6d7f":"code","4835ea95":"code","5b90016d":"code","4cf11b73":"code","23db2c2c":"code","4d29a6a8":"code","3d455fc9":"code","135c9de1":"code","33e6d6c4":"code","223da8fc":"code","6b7a87de":"code","e9a0964a":"code","5d327006":"code","b16b4ef7":"markdown","5141e01c":"markdown"},"source":{"329de268":"!pip install pmdarima\n#--------------------------------------------------------\nimport numpy as np\nimport pandas as pd\n\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_datareader as web\nimport datetime as dt\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)\nfrom plotly import tools\nimport plotly.figure_factory as ff\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\nfrom pmdarima import auto_arima\nfrom statsmodels.tsa.stattools import adfuller\nimport statsmodels.api as sm\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nprint('Completed')","08213099":"#!pip install pmdarima","af077804":"df = pd.read_csv(\"..\/input\/nifty50-stock-market-data\/TITAN.csv\")\ndf.head()","83a04c36":"df.shape","6a29de1f":"df.info()","05989a0c":"fig = go.Figure([go.Scatter(x=df.index, y=df['VWAP'])])\nfig.update_layout(\n    autosize=False,\n    width=1000,\n    height=500,\n    title='VWAP over time',\n    template=\"plotly_white\",)\nfig.update_xaxes(title=\"Date\")\nfig.update_yaxes(title=\"VWAP\")\nfig.show()","d8e1d4ed":"# Simple plotting of Titan Stock Price\n# First Subplot\nf, (ax1, ax2,ax3,ax4) = plt.subplots(1,4,figsize=(25,5))\nax1.plot(df[\"Date\"], df[\"Close\"])\nax1.set_xlabel(\"Date\", fontsize=12)\nax1.set_ylabel(\"Stock Price\")\nax1.set_title(\"Titan Close Price History\")\n\n# Second Subplot\nax2.plot(df[\"Date\"], df[\"High\"], color=\"green\")\nax2.set_xlabel(\"Date\", fontsize=12)\nax2.set_ylabel(\"Stock Price\")\nax2.set_title(\"Titan High Price History\")\n\n# Third Subplot\nax3.plot(df[\"Date\"], df[\"Low\"], color=\"red\")\nax3.set_xlabel(\"Date\", fontsize=12)\nax3.set_ylabel(\"Stock Price\")\nax3.set_title(\"Titan Low Price History\")\n\n# Fourth Subplot\nax4.plot(df[\"Date\"], df[\"Volume\"], color=\"orange\")\nax4.set_xlabel(\"Date\", fontsize=12)\nax4.set_ylabel(\"Stock Price\")\nax4.set_title(\"Titan's Volume History\")\nplt.show()","871c2d3c":"fig = go.Figure([go.Scatter(x=df.Date, y=df['Volume'])])\nfig.update_layout(\n    autosize=False,\n    width=1000,\n    height=500,\n    title='VWAP over time',\n    template=\"plotly_white\",)\nfig.update_xaxes(title=\"Date\")\nfig.update_yaxes(title=\"VWAP\")\nfig.show()","4e968599":"trace0 = go.Candlestick(\n                        x=df.Date\t,\n                        open=df.Open,\n                        high=df.High, \n                        low=df.Low,\n                        close=df.Close,\n    decreasing=dict(line=dict(color= 'indigo'))\n                       )\n\ndata = [trace0]\nlayout =  dict(\n    title = \"Increase vs Decrease Titan\",\n    xaxis = dict(range = ['2016-10-01','2018-01-01']\n                )\n)\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig)","3715551c":"trace0 = go.Box(\n    y=df.VWAP,\n    name = 'VWAP',\n    marker = dict(\n        color = 'red')\n)\ntrace1 = go.Box(\n    y=df.Open,\n    name = 'Titan Open',\n    marker = dict(\n        color = 'navy')\n)\ntrace2 = go.Box(\n    y=df.High,\n    name = 'Titan High',\n    marker = dict(\n        color = 'yellow')\n)\n\ntrace3 = go.Box(\n    y=df.Low,\n    name = 'Titan Low',\n    marker = dict(\n        color = 'Green')\n)\n\ndata = [trace0,trace1,trace2,trace3]\nlayout = dict(title='Box Plot for Major Features')\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig)","77a7a38b":"df['Date']=pd.to_datetime(df['Date'])\ndf.set_index(['Date'],inplace=True)","3a700aef":"df.head()","7a0b2cc6":"fig = go.Figure([go.Scatter(x=df.loc['2018', 'VWAP'].index,y=df.loc['2020', 'VWAP'])])\nfig.update_layout(\n    autosize=False,\n    width=1000,\n    height=500,\n    title='VWAP in 2018',\n    template=\"plotly_white\",\n)\nfig.update_xaxes(title=\"Date\")\nfig.update_yaxes(title=\"VWAP\")\n\nfig.show()","e52f7c07":"fig = go.Figure([go.Scatter(x=df.loc['2019', 'VWAP'].index,y=df.loc['2020', 'VWAP'])])\nfig.update_layout(\n    autosize=False,\n    width=1000,\n    height=500,\n    title='VWAP in 2019',\n    template=\"plotly_white\",\n)\nfig.update_xaxes(title=\"Date\")\nfig.update_yaxes(title=\"VWAP\")\n\nfig.show()","7ec082d5":"fig = go.Figure([go.Scatter(x=df.loc['2020', 'VWAP'].index,y=df.loc['2020', 'VWAP'])])\nfig.update_layout(\n    autosize=False,\n    width=1000,\n    height=500,\n    title='VWAP in 2019',\n    template=\"plotly_white\",\n)\nfig.update_xaxes(title=\"Date\")\nfig.update_yaxes(title=\"VWAP\")\n\nfig.show()","629b55c4":"plot_acf(df.VWAP, lags=50, title=\"VWAP\")\nplt.show()","967dab31":"plot_pacf(df.VWAP, lags=50, title=\"VWAP\")\nplt.show()","aa6a6d7f":"df.head()","4835ea95":"df=df.reset_index()","5b90016d":"df.head()","4cf11b73":"lag_features = [\"High\", \"Low\", \"Volume\", \"Turnover\", \"Trades\"]\nwindow1 = 3\nwindow2 = 7\nwindow3 = 30\n\ndf_rolled_3d = df[lag_features].rolling(window=window1, min_periods=0)\ndf_rolled_7d = df[lag_features].rolling(window=window2, min_periods=0)\ndf_rolled_30d = df[lag_features].rolling(window=window3, min_periods=0)\n\ndf_mean_3d = df_rolled_3d.mean().shift(1).reset_index().astype(np.float32)\ndf_mean_7d = df_rolled_7d.mean().shift(1).reset_index().astype(np.float32)\ndf_mean_30d = df_rolled_30d.mean().shift(1).reset_index().astype(np.float32)\n\ndf_std_3d = df_rolled_3d.std().shift(1).reset_index().astype(np.float32)\ndf_std_7d = df_rolled_7d.std().shift(1).reset_index().astype(np.float32)\ndf_std_30d = df_rolled_30d.std().shift(1).reset_index().astype(np.float32)\n\nfor feature in lag_features:\n    df[f\"{feature}_mean_lag{window1}\"] = df_mean_3d[feature]\n    df[f\"{feature}_mean_lag{window2}\"] = df_mean_7d[feature]\n    df[f\"{feature}_mean_lag{window3}\"] = df_mean_30d[feature]\n    \n    df[f\"{feature}_std_lag{window1}\"] = df_std_3d[feature]\n    df[f\"{feature}_std_lag{window2}\"] = df_std_7d[feature]\n    df[f\"{feature}_std_lag{window3}\"] = df_std_30d[feature]\n\ndf.fillna(df.mean(), inplace=True)\n\ndf.set_index(\"Date\", drop=False, inplace=True)\ndf.head()","23db2c2c":"df.Date = pd.to_datetime(df.Date, format=\"%Y-%m-%d\")\ndf[\"month\"] = df.Date.dt.month\ndf[\"week\"] = df.Date.dt.week\ndf[\"day\"] = df.Date.dt.day\ndf[\"day_of_week\"] = df.Date.dt.dayofweek\ndf.head()","4d29a6a8":"plt.figure(figsize=(25,15))\nsns.heatmap(df.corr(), annot=True,cmap='seismic')\nplt.show()","3d455fc9":"trace = go.Ohlc(x=df['Date'],\n                open=df['Open'],\n                high=df['High'],\n                low=df['Low'],\n                close=df['Close'],\n               increasing=dict(line=dict(color= '#de4337')),\n                decreasing=dict(line=dict(color= '#23c454')))\n\nlayout = {\n    'title': 'Titan Historical Price',\n    'xaxis': {'title': 'Date',\n             'rangeslider': {'visible': False}},\n    'yaxis': {'title': 'Stock Price (INR)'},\n    'shapes': [{\n        'x0': '2011-6-14', 'x1': '2011-6-14',\n        'y0': 0, 'y1': 1, 'xref': 'x', 'yref': 'paper',\n        'line': {'color': 'rgb(30,30,30)', 'width': 1}\n    }],\n        'annotations': [{\n        'x': '2011-06-23', 'y': 0.011, 'xref': 'x', 'yref': 'paper',\n        'showarrow': False, 'xanchor': 'left',\n        'text': 'Fall of Titan Stock Price'\n    }]\n}\ndata = [trace]\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='simple_ohlc')","135c9de1":"df_train = df[df.Date < \"2020\"]\ndf_valid = df[df.Date >= \"2020\"]\n\nfrom fbprophet import Prophet\nmodel = Prophet()\nmodel.fit(df_train[[\"Date\", \"VWAP\"]].rename(columns={\"Date\": \"ds\", \"VWAP\": \"y\"}))\n\nforecast1 = model.predict(df_valid[[\"Date\", \"VWAP\"]].rename(columns={\"Date\": \"ds\", \"VWAP\": \"y\"}))\ndf_valid[\"Forecast_Prophet\"] = forecast1.yhat.values","33e6d6c4":"df_valid[[\"VWAP\", \"Forecast_Prophet\"]].plot(figsize=(14, 7),cmap='RdYlBu')","223da8fc":"model.plot_components(forecast1)","6b7a87de":"exogenous_features = [\"High_mean_lag3\", \"High_std_lag3\", \"Low_mean_lag3\", \"Low_std_lag3\",\n                      \"Volume_mean_lag3\", \"Volume_std_lag3\", \"Turnover_mean_lag3\",\n                      \"Turnover_std_lag3\", \"Trades_mean_lag3\", \"Trades_std_lag3\",\n                      \"High_mean_lag7\", \"High_std_lag7\", \"Low_mean_lag7\", \"Low_std_lag7\",\n                      \"Volume_mean_lag7\", \"Volume_std_lag7\", \"Turnover_mean_lag7\",\n                      \"Turnover_std_lag7\", \"Trades_mean_lag7\", \"Trades_std_lag7\",\n                      \"High_mean_lag30\", \"High_std_lag30\", \"Low_mean_lag30\", \"Low_std_lag30\",\n                      \"Volume_mean_lag30\", \"Volume_std_lag30\", \"Turnover_mean_lag30\",\n                      \"Turnover_std_lag30\", \"Trades_mean_lag30\", \"Trades_std_lag30\",\n                      \"month\", \"week\", \"day\", \"day_of_week\"]","e9a0964a":"model = auto_arima(df_train.VWAP, exogenous=df_train[exogenous_features], trace=True, error_action=\"ignore\", suppress_warnings=True)\nmodel.fit(df_train.VWAP, exogenous=df_train[exogenous_features])\n\nforecast = model.predict(n_periods=len(df_valid), exogenous=df_valid[exogenous_features])\ndf_valid[\"Forecast_ARIMAX\"] = forecast","5d327006":"df_valid[[\"VWAP\", \"Forecast_ARIMAX\"]].plot(figsize=(14, 7),cmap='cividis_r')","b16b4ef7":"## Partial Autocorrelation Function (PACF)\nThe partial autocorrelation function is similar to the ACF except that it displays only the correlation between two observations that the shorter lags between those observations do not explain. For example, the partial autocorrelation for lag 3 is only the correlation that lags 1 and 2 do not explain. In other words, the partial correlation for each lag is the unique correlation between those two observations after partialling out the intervening correlations","5141e01c":"## Autocorrelation Function (ACF)\n\nUse the autocorrelation function (ACF) to identify which lags have significant correlations, understand the patterns and properties of the time series,\nand then use that information to model the time series data. From the ACF, you can assess the randomness and stationarity of a time series.\nYou can also determine whether trends and seasonal patterns are present."}}