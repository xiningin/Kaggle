{"cell_type":{"99b9cd3d":"code","6a68d1c3":"code","176683c6":"code","af185b10":"code","a41e64a7":"code","3ec0e73b":"code","b8346805":"code","0d735df5":"code","9d75cf94":"code","d970aed7":"code","b683bdb3":"code","793c4884":"code","216175fe":"code","9ea354b1":"code","7a33db71":"code","6412a9db":"code","d028fc66":"code","de167199":"code","fb520adf":"code","506a9238":"code","7fcad1a0":"code","b6f10000":"code","de8b506c":"code","dd189397":"code","bf6baf06":"code","557754a6":"code","c8b8531b":"code","eeab08f9":"code","3431fea3":"code","5fa90851":"code","8436a833":"code","46e56f94":"code","7e3b83d9":"code","5e16b6ff":"code","f7a566fc":"code","2e142c34":"code","b319cb85":"code","c3f7ad5c":"code","8f23654c":"code","9a015b58":"code","6f66622c":"code","842ca479":"code","d7fbfc7a":"code","066f932a":"code","15903f8a":"code","d8b2b596":"code","457f2574":"code","10fdfa73":"code","d4ad52d6":"code","5e78e624":"code","cb2804b3":"code","6d1d777c":"code","13655fd0":"code","d0f94e79":"code","b9b92acf":"markdown","e9d9974a":"markdown","e68ec2cc":"markdown","7f080d9c":"markdown","dca234af":"markdown","07f23867":"markdown","39e822c7":"markdown","4dbaa5fb":"markdown","54b80830":"markdown","2de168a8":"markdown","e2ebaa9a":"markdown","5cbaedbc":"markdown","db71e86d":"markdown","3e65df99":"markdown","0b8df5bc":"markdown","22f99860":"markdown","6de7c8ba":"markdown","4bce0612":"markdown","dc11ce1c":"markdown","51faccb9":"markdown","85990b12":"markdown","4b29181e":"markdown","5a5e2023":"markdown","108aeefa":"markdown","679b357a":"markdown","e3b55f37":"markdown","96308843":"markdown","f6843e74":"markdown","4d9537e7":"markdown","8d4ea4ed":"markdown","94a08a45":"markdown","485520f3":"markdown","d34ba21c":"markdown","08b363c3":"markdown","af26e6f0":"markdown","ef720266":"markdown","c1920b3c":"markdown","d1e5d8a7":"markdown","fb8b739d":"markdown","c9ddfa41":"markdown","e31a1cbd":"markdown"},"source":{"99b9cd3d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6a68d1c3":"df=pd.read_csv(\"..\/input\/train.csv\")\ndf.drop(\"ID_code\",axis=1,inplace=True)\nprint(df.head(5))\ndf.describe()","176683c6":"import seaborn as sns\nsns.heatmap(df.corr())","af185b10":"print(\"Total df Values\",str(len(df)))\nfor i in df.columns:\n    print(i,\"\\t\\t\",str(df[i].isnull().sum()))\n    ","a41e64a7":"import matplotlib.pyplot as plt\ntarget_0=len(df[df[\"target\"]==0])\ntarget_1=len(df[df[\"target\"]==1])\n# Data to plot\nlabels = df[\"target\"].unique()\nsizes = (target_0,target_1)\n\n \n# Plot\nplt.pie(sizes, labels=labels, \nautopct='%1.1f%%', shadow=True, startangle=140)\n \nplt.axis('equal')\nplt.show()","3ec0e73b":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfeature_names = df.columns\nfor i in range(len(feature_names)-1):\n    figure = plt.figure()\n    ax = sns.boxplot(x='target', y=feature_names[i], data=df)","b8346805":"# The diamond shaped dots outside the boxplot indicates the outliers \n# There are some extreme cases in K, Ba and Fe. \n# That why it is necessary to rule out the outliers \n\ndf_old = df.copy(deep=True) # Make a copy of original data, just in case\n\n# Create new dataframe for each type\n\ntypes = df['target'].unique()\n# seperating Dataframe by class Labels\nd = {type: df[df['target'] == type] for type in types}\n\nlow = .25\nhigh = .75\n\nbounds = {}\nfor type in types:\n    filt_df = d[type].loc[:, d[type].columns != 'target'] # Remove 'Type' Column\n    quant_df = filt_df.quantile([low, high])\n    IQR = quant_df.iloc[1,:]-  quant_df.iloc[0,:]\n    quant_df.iloc[0,:] = quant_df.iloc[0,:] - 1.5*IQR\n    quant_df.iloc[1,:] = quant_df.iloc[1,:] + 1.5*IQR\n    bounds[type] = quant_df\n    \n","0d735df5":"df_new = {}\n\nfor type in types:\n    filt_df = d[type].loc[:, d[type].columns != 'target'] # Remove 'Type' Column\n    filt_df = filt_df.apply(lambda x: x[(x>bounds[type].loc[low,x.name]) & (x < bounds[type].loc[high,x.name])], axis=0)\n    df_new[type] = pd.concat([filt_df,d[type].loc[:,'target']], axis=1)","9d75cf94":"df_OR=pd.concat(df_new)","d970aed7":"for i in range(len(feature_names)-1):\n    figure = plt.figure()\n    ax = sns.boxplot(x='target', y=feature_names[i], data=df_OR)","b683bdb3":"len(df_old)\n","793c4884":"X=df.drop(\"target\",axis=1)\ny=df[\"target\"]\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nprint(\"Number transactions X_train dataset: \", X_train.shape)\nprint(\"Number transactions y_train dataset: \", y_train.shape)\nprint(\"Number transactions X_test dataset: \", X_test.shape)\nprint(\"Number transactions y_test dataset: \", y_test.shape)\nprint(\"Before OverSampling, counts of label '1': {}\".format(sum(y_train==1)))\nprint(\"Before OverSampling, counts of label '0': {} \\n\".format(sum(y_train==0)))\n\nsm = SMOTE(random_state=2)\nX_train_res, y_train_res = sm.fit_sample(X_train, y_train.ravel())\n\nprint('After OverSampling, the shape of train_X: {}'.format(X_train_res.shape))\nprint('After OverSampling, the shape of train_y: {} \\n'.format(y_train_res.shape))\n\nprint(\"After OverSampling, counts of label '1': {}\".format(sum(y_train_res==1)))\nprint(\"After OverSampling, counts of label '0': {}\".format(sum(y_train_res==0)))\n","216175fe":"\n\n# Data to plot\nlabels = df[\"target\"].unique()\nsizes = ([sum(y_train_res==0),sum(y_train_res==1)])\n\n \n# Plot\nplt.pie(sizes, labels=labels, \nautopct='%1.1f%%', shadow=True, startangle=140)\n \nplt.axis('equal')\nplt.show()","9ea354b1":"#you can choose first 10 coloums to see or 100 or all coloums dynaimic code to chekc importance to\n# fetures with decesion trees\ncoloums=[]\ncoloums_selected=200\nfor i in range (0,coloums_selected):\n    coloums.append(i)\nX_train_res=np.asarray(X_train_res)\nX_test=np.asarray(X_test)\nX_sliced_array_train=X_train_res[:20000,coloums]\nX_sliced_array_test=X_test[:,coloums]\n","7a33db71":"from sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(random_state=0)\n# i am taking 20000 exampling and just taking first 10 coloums\nclf.fit(X_sliced_array_train,y_train_res[:20000])\n","6412a9db":"from sklearn.metrics import confusion_matrix\nX_test=np.asarray(X_test)\ny_pred=clf.predict(X_sliced_array_test)\ntrue_negative,false_positive,false_negative,true_positive=confusion_matrix(y_test,y_pred).ravel()\n\nprint(\"true_negative: \",true_negative)\nprint(\"false_positive: \",false_positive)\nprint(\"false_negative: \",false_negative)\nprint(\"true_positive: \",true_positive)\nprint(\"\\n\\n Accuracy Measures\\n\\n\")\nAccuracy=(true_positive+true_negative)\/(true_positive+false_negative+true_negative+false_positive)\nprint(\"Accuracy: \",Accuracy)\n\nSensitivity=true_positive\/(true_positive+false_negative)\nprint(\"Sensitivity: \",Sensitivity)\n\nFalse_Positive_Rate=false_positive\/(false_positive+true_negative)\nprint(\"False_Positive_Rate: \",False_Positive_Rate)\n\nSpecificity=true_negative\/(false_positive + true_negative)\nprint(\"Specificity: \",Specificity)\n\n#FDR \u00e0 0 means that very few of our predictions are wrong\nFalse_Discovery_Rate=false_positive\/(false_positive+true_positive)\nprint(\"False_Discovery_Rate: \",False_Discovery_Rate)\n\nPositive_Predictive_Value =true_positive\/(true_positive+false_positive)\nprint(\"Positive_Predictive_Value: \",Positive_Predictive_Value)","d028fc66":"from matplotlib.pyplot import figure\n\ncol=X_train.columns\nfeature_names = col[0:coloums_selected]\nimportance_frame = pd.DataFrame()\nimportance_frame['Features'] =  col[0:coloums_selected]\nimportance_frame['Importance'] =clf.feature_importances_\nimportance_frame = importance_frame.sort_values(by=['Importance'], ascending=True)\nfigure(num=None, figsize=(8, 40), dpi=80, facecolor='w', edgecolor='k')\nplt.barh(coloums, importance_frame['Importance'], align='center', alpha=0.5)\nplt.yticks(coloums, importance_frame['Features'])\nplt.xlabel('Importance')\nplt.title('Feature Importances')\nplt.show()","de167199":"#now we have our Important Features\nimportance_frame","fb520adf":"df_selected_coloums=importance_frame[importance_frame['Importance']>0.01]\nprint(\"We have selected\",str(len(df_selected_coloums)),\"Coloums\")\ndf_selected_coloums","506a9238":"Coloum_Names=[\"target\"]\nfor i in df_selected_coloums.Features:\n    Coloum_Names.append(i)\nNew_df=df.loc[ :, Coloum_Names]    \nNew_df.shape","7fcad1a0":"fig = plt.figure(figsize = (20, 25))\nj = 0\n#Droping_Characters and string coloums because graph donot support them\n\nfor i in New_df.columns:\n    plt.subplot(7, 7, j+1)\n    j += 1\n    sns.distplot(New_df[i][New_df['target']==1], color='g', label = 'Positive')\n    sns.distplot(New_df[i][New_df['target']==0], color='r', label = 'Negative')\n    plt.legend(loc='best')\nfig.suptitle('Standard Customer Transaction ')\nfig.tight_layout()\nfig.subplots_adjust(top=0.95)\nplt.show()","b6f10000":"X=New_df.drop(\"target\",axis=1)\ny=New_df[\"target\"]\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(random_state=0)\n# i am taking 20000 exampling and just taking first 10 coloums\nclf.fit(X_train,y_train)","de8b506c":"from sklearn.metrics import confusion_matrix\nX_test=np.asarray(X_test)\ny_pred=clf.predict(X_test)\ntrue_negative,false_positive,false_negative,true_positive=confusion_matrix(y_test,y_pred).ravel()\n\nprint(\"true_negative: \",true_negative)\nprint(\"false_positive: \",false_positive)\nprint(\"false_negative: \",false_negative)\nprint(\"true_positive: \",true_positive)\nprint(\"\\n\\n Accuracy Measures\\n\\n\")\nAccuracy=(true_positive+true_negative)\/(true_positive+false_negative+true_negative+false_positive)\nprint(\"Accuracy: \",Accuracy)\n\nSensitivity=true_positive\/(true_positive+false_negative)\nprint(\"Sensitivity: \",Sensitivity)\n\nFalse_Positive_Rate=false_positive\/(false_positive+true_negative)\nprint(\"False_Positive_Rate: \",False_Positive_Rate)\n\nSpecificity=true_negative\/(false_positive + true_negative)\nprint(\"Specificity: \",Specificity)\n\n#FDR \u00e0 0 means that very few of our predictions are wrong\nFalse_Discovery_Rate=false_positive\/(false_positive+true_positive)\nprint(\"False_Discovery_Rate: \",False_Discovery_Rate)\n\nPositive_Predictive_Value =true_positive\/(true_positive+false_positive)\nprint(\"Positive_Predictive_Value: \",Positive_Predictive_Value)","dd189397":"coloums=[]\ncoloums_selected=len(X.columns)\nfor i in range(0,coloums_selected):\n    coloums.append(i)\nprint(coloums_selected)\nfrom matplotlib.pyplot import figure\n\ncol=New_df.columns\nfeature_names = col[1:coloums_selected+1]\nimportance_frame = pd.DataFrame()\nimportance_frame['Features'] =  col[1:coloums_selected+1]\nimportance_frame['Importance'] =clf.feature_importances_\nimportance_frame = importance_frame.sort_values(by=['Importance'], ascending=True)\nfigure(num=None, figsize=(8, 8), dpi=80, facecolor='w', edgecolor='k')\nplt.barh(coloums, importance_frame['Importance'], align='center', alpha=0.5)\nplt.yticks(coloums, importance_frame['Features'])\nplt.xlabel('Importance')\nplt.title('Feature Importances')\nplt.show()","bf6baf06":"len(clf.feature_importances_)","557754a6":"from imblearn.under_sampling import RandomUnderSampler\nX=New_df.drop(\"target\",axis=1)\ny=New_df[\"target\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nprint(\"Number transactions X_train dataset: \", X_train.shape)\nprint(\"Number transactions y_train dataset: \", y_train.shape)\nprint(\"Number transactions X_test dataset: \", X_test.shape)\nprint(\"Number transactions y_test dataset: \", y_test.shape)\nprint(\"Before UnderSampling, counts of label '1': {}\".format(sum(y_train==1)))\nprint(\"Before UnderSampling, counts of label '0': {} \\n\".format(sum(y_train==0)))\n\n\nrus = RandomUnderSampler(random_state=0,ratio={0: 10000, 1:11000})\nrus.fit(X_train, y_train)\nX_resampled, y_resampled = rus.fit_sample(X_train, y_train.ravel())\n\nprint('After UnderSampling, the shape of train_X: {}'.format(X_resampled.shape))\nprint('After UnderSampling, the shape of train_y: {} \\n'.format( y_resampled.shape))\n\nprint(\"After UnderSampling, counts of label '1': {}\".format(sum(y_resampled==1)))\nprint(\"After UnderSampling, counts of label '0': {}\".format(sum(y_resampled==0)))\n\n\ncolors = ['#05990d' if v == 0 else '#990606' if v == 1 else '#000000' for v in y_resampled]\nplt.scatter(X_resampled[:, 0], X_resampled[:, 1], c=colors, linewidth=0.5, edgecolor='black')\nsns.despine()\nplt.title(\"RandomUnderSampler Output ($n_{class}=4700)$\")\npass\n\n#red is 0 \n#green is 1","c8b8531b":"from sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier()\n\nresults=cross_val_score(clf,X_resampled ,y_resampled , cv=10)\nprint(results)\nAverage=sum(results) \/ len(results) \nprint(\"Average Accuracy :\",Average)","eeab08f9":"from sklearn.metrics import confusion_matrix\nclf.fit(X_resampled ,y_resampled)\nX_test=np.asarray(X_test)\ny_pred=clf.predict(X_test)\ntrue_negative,false_positive,false_negative,true_positive=confusion_matrix(y_test,y_pred).ravel()\n\nprint(\"true_negative: \",true_negative)\nprint(\"false_positive: \",false_positive)\nprint(\"false_negative: \",false_negative)\nprint(\"true_positive: \",true_positive)\nprint(\"\\n\\n Accuracy Measures\\n\\n\")\nAccuracy=(true_positive+true_negative)\/(true_positive+false_negative+true_negative+false_positive)\nprint(\"Accuracy: \",Accuracy)\n\nSensitivity=true_positive\/(true_positive+false_negative)\nprint(\"Sensitivity: \",Sensitivity)\n\nFalse_Positive_Rate=false_positive\/(false_positive+true_negative)\nprint(\"False_Positive_Rate: \",False_Positive_Rate)\n\nSpecificity=true_negative\/(false_positive + true_negative)\nprint(\"Specificity: \",Specificity)\n\n#FDR \u00e0 0 means that very few of our predictions are wrong\nFalse_Discovery_Rate=false_positive\/(false_positive+true_positive)\nprint(\"False_Discovery_Rate: \",False_Discovery_Rate)\n\nPositive_Predictive_Value =true_positive\/(true_positive+false_positive)\nprint(\"Positive_Predictive_Value: \",Positive_Predictive_Value)","3431fea3":"X=New_df.drop(\"target\",axis=1)\ny=New_df[\"target\"]\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nprint(\"Number transactions X_train dataset: \", X_train.shape)\nprint(\"Number transactions y_train dataset: \", y_train.shape)\nprint(\"Number transactions X_test dataset: \", X_test.shape)\nprint(\"Number transactions y_test dataset: \", y_test.shape)\nprint(\"Before OverSampling, counts of label '1': {}\".format(sum(y_train==1)))\nprint(\"Before OverSampling, counts of label '0': {} \\n\".format(sum(y_train==0)))\n\nsm = SMOTE(random_state=2)\nX_train_res, y_train_res = sm.fit_sample(X_train, y_train.ravel())\n\nprint('After OverSampling, the shape of train_X: {}'.format(X_train_res.shape))\nprint('After OverSampling, the shape of train_y: {} \\n'.format(y_train_res.shape))\n\nprint(\"After OverSampling, counts of label '1': {}\".format(sum(y_train_res==1)))\nprint(\"After OverSampling, counts of label '0': {}\".format(sum(y_train_res==0)))\n","5fa90851":"from sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier()\n\nresults=cross_val_score(clf,X_train_res, y_train_res  , cv=10)\nprint(results)\nAverage=sum(results) \/ len(results) \nprint(\"Average Accuracy :\",Average)","8436a833":"from sklearn.metrics import confusion_matrix\nclf.fit(X_train_res, y_train_res)\nX_test=np.asarray(X_test)\ny_pred=clf.predict(X_test)\ntrue_negative,false_positive,false_negative,true_positive=confusion_matrix(y_test,y_pred).ravel()\n\nprint(\"true_negative: \",true_negative)\nprint(\"false_positive: \",false_positive)\nprint(\"false_negative: \",false_negative)\nprint(\"true_positive: \",true_positive)\nprint(\"\\n\\n Accuracy Measures\\n\\n\")\nAccuracy=(true_positive+true_negative)\/(true_positive+false_negative+true_negative+false_positive)\nprint(\"Accuracy: \",Accuracy)\n\nSensitivity=true_positive\/(true_positive+false_negative)\nprint(\"Sensitivity: \",Sensitivity)\n\nFalse_Positive_Rate=false_positive\/(false_positive+true_negative)\nprint(\"False_Positive_Rate: \",False_Positive_Rate)\n\nSpecificity=true_negative\/(false_positive + true_negative)\nprint(\"Specificity: \",Specificity)\n\n#FDR \u00e0 0 means that very few of our predictions are wrong\nFalse_Discovery_Rate=false_positive\/(false_positive+true_positive)\nprint(\"False_Discovery_Rate: \",False_Discovery_Rate)\n\nPositive_Predictive_Value =true_positive\/(true_positive+false_positive)\nprint(\"Positive_Predictive_Value: \",Positive_Predictive_Value)","46e56f94":"from sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier()\n\nresults=cross_val_score(clf,X_train, y_train  , cv=10)\nprint(results)\nAverage=sum(results) \/ len(results) \nprint(\"Average Accuracy :\",Average)","7e3b83d9":"from sklearn.metrics import confusion_matrix\nclf.fit(X_train, y_train)\nX_test=np.asarray(X_test)\ny_pred=clf.predict(X_test)\ntrue_negative,false_positive,false_negative,true_positive=confusion_matrix(y_test,y_pred).ravel()\n\nprint(\"true_negative: \",true_negative)\nprint(\"false_positive: \",false_positive)\nprint(\"false_negative: \",false_negative)\nprint(\"true_positive: \",true_positive)\nprint(\"\\n\\n Accuracy Measures\\n\\n\")\nAccuracy=(true_positive+true_negative)\/(true_positive+false_negative+true_negative+false_positive)\nprint(\"Accuracy: \",Accuracy)\n\nSensitivity=true_positive\/(true_positive+false_negative)\nprint(\"Sensitivity: \",Sensitivity)\n\nFalse_Positive_Rate=false_positive\/(false_positive+true_negative)\nprint(\"False_Positive_Rate: \",False_Positive_Rate)\n\nSpecificity=true_negative\/(false_positive + true_negative)\nprint(\"Specificity: \",Specificity)\n\n#FDR \u00e0 0 means that very few of our predictions are wrong\nFalse_Discovery_Rate=false_positive\/(false_positive+true_positive)\nprint(\"False_Discovery_Rate: \",False_Discovery_Rate)\n\nPositive_Predictive_Value =true_positive\/(true_positive+false_positive)\nprint(\"Positive_Predictive_Value: \",Positive_Predictive_Value)","5e16b6ff":"from sklearn import ensemble\nfrom sklearn import gaussian_process\nfrom sklearn import linear_model\nfrom sklearn import naive_bayes\nfrom sklearn import neighbors\nfrom sklearn import svm\nfrom sklearn import tree\nfrom sklearn import discriminant_analysis\nfrom sklearn import model_selection\nfrom xgboost.sklearn import XGBClassifier \nfrom sklearn import metrics","f7a566fc":"MLA = [\n    #Ensemble Methods\n    ensemble.AdaBoostClassifier(),\n    ensemble.BaggingClassifier(),\n    ensemble.ExtraTreesClassifier(),\n    ensemble.GradientBoostingClassifier(),\n    ensemble.RandomForestClassifier(),\n\n    #Gaussian Processes\n    #gaussian_process.GaussianProcessClassifier(),\n    \n    #GLM\n    \n    linear_model.PassiveAggressiveClassifier(),\n    linear_model.RidgeClassifierCV(),\n    linear_model.SGDClassifier(),\n    linear_model.Perceptron(),\n    \n    #Navies Bayes\n    naive_bayes.BernoulliNB(),\n    naive_bayes.GaussianNB(),\n    \n    #Nearest Neighbor\n    neighbors.KNeighborsClassifier(),\n    \n    \n    \n    #Trees    \n    tree.DecisionTreeClassifier(),\n    tree.ExtraTreeClassifier(),\n    \n    #Discriminant Analysis\n    discriminant_analysis.LinearDiscriminantAnalysis(),\n    discriminant_analysis.QuadraticDiscriminantAnalysis(),\n\n    \n    #xgboost: http:\/\/xgboost.readthedocs.io\/en\/latest\/model.html\n    #XGBClassifier()    \n    ]\n\n\n\n\n#create table to compare MLA metrics\nMLA_columns = ['MLA Name', 'MLA Parameters', 'MLA Test Accuracy(Scoring)',\"Accuracy(Confusion Matrix)\",\"true_positive\",\"false_positive\",\"true_negative\",\"false_negative\" ]\nMLA_compare = pd.DataFrame(columns = MLA_columns)\nrow_index = 0\n#ground Truth\nMLA_compare.loc[row_index, 'MLA Name'] = \"Ground Truth\"\nMLA_compare.loc[row_index, 'MLA Parameters'] = \"NaN\"\nMLA_compare.loc[row_index, 'MLA Test Accuracy'] =0\nMLA_compare.loc[row_index, 'Accuracy(Confusion Matrix)'] =0\nMLA_compare.loc[row_index, 'true_positive'] =sum(y_test==1)\nMLA_compare.loc[row_index, 'true_negative'] =sum(y_test==0)\nMLA_compare.loc[row_index, 'false_positive'] =0\nMLA_compare.loc[row_index, 'false_negative'] =0\nrow_index+=1\n\n\n#index through MLA and save performance to table\n\nfor alg in MLA:\n    print(\"\\n\\nClassifier\",alg)\n    #set name and parameters\n    MLA_name = alg.__class__.__name__\n    MLA_compare.loc[row_index, 'MLA Name'] = MLA_name\n    MLA_compare.loc[row_index, 'MLA Parameters'] = str(alg.get_params())\n    \n    \n    #score model with cross validation: http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.cross_validate.html#sklearn.model_selection.cross_validate\n   # cv_results = model_selection.cross_validate(alg, X_train, y_train)\n    alg.fit(X_train, y_train)\n    y_pred=alg.predict(X_test)\n    score=metrics.accuracy_score(y_test, y_pred)\n    MLA_compare.loc[row_index, 'MLA Test Accuracy'] =score\n    \n    #COnfusion Matrix\n\n    true_negative,false_positive,false_negative,true_positive=confusion_matrix(y_test, y_pred).ravel()\n    Accuracy=(true_positive+true_negative)\/(true_positive+false_positive+true_negative+false_negative)\n    MLA_compare.loc[row_index, 'Accuracy(Confusion Matrix)'] =Accuracy\n    MLA_compare.loc[row_index, 'true_positive'] =true_positive\n    MLA_compare.loc[row_index, 'true_negative'] =true_negative\n    MLA_compare.loc[row_index, 'false_positive'] =false_positive\n    MLA_compare.loc[row_index, 'false_negative'] =false_negative\n    row_index+=1\n\n    \n\n\n","2e142c34":"MLA_compare","b319cb85":"X=New_df.drop(\"target\",axis=1)\ny=New_df[\"target\"]\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nprint(\"Number transactions X_train dataset: \", X_train.shape)\nprint(\"Number transactions y_train dataset: \", y_train.shape)\nprint(\"Number transactions X_test dataset: \", X_test.shape)\nprint(\"Number transactions y_test dataset: \", y_test.shape)\nprint(\"Before OverSampling, counts of label '1': {}\".format(sum(y_train==1)))\nprint(\"Before OverSampling, counts of label '0': {} \\n\".format(sum(y_train==0)))\n\nsm = SMOTE(random_state=2)\nX_train_res, y_train_res = sm.fit_sample(X_train, y_train.ravel())\n\nprint('After OverSampling, the shape of train_X: {}'.format(X_train_res.shape))\nprint('After OverSampling, the shape of train_y: {} \\n'.format(y_train_res.shape))\n\nprint(\"After OverSampling, counts of label '1': {}\".format(sum(y_train_res==1)))\nprint(\"After OverSampling, counts of label '0': {}\".format(sum(y_train_res==0)))","c3f7ad5c":"MLA = [\n    #Ensemble Methods\n    ensemble.AdaBoostClassifier(),\n    ensemble.BaggingClassifier(),\n    ensemble.ExtraTreesClassifier(),\n    ensemble.GradientBoostingClassifier(),\n    ensemble.RandomForestClassifier(),\n\n    #Gaussian Processes\n    #gaussian_process.GaussianProcessClassifier(),\n    \n    #GLM\n    \n    linear_model.PassiveAggressiveClassifier(),\n    linear_model.RidgeClassifierCV(),\n    linear_model.SGDClassifier(),\n    linear_model.Perceptron(),\n    \n    #Navies Bayes\n    naive_bayes.BernoulliNB(),\n    naive_bayes.GaussianNB(),\n    \n    #Nearest Neighbor\n    neighbors.KNeighborsClassifier(),\n    \n    \n    \n    #Trees    \n    tree.DecisionTreeClassifier(),\n    tree.ExtraTreeClassifier(),\n    \n    #Discriminant Analysis\n    discriminant_analysis.LinearDiscriminantAnalysis(),\n    discriminant_analysis.QuadraticDiscriminantAnalysis(),\n\n    \n    #xgboost: http:\/\/xgboost.readthedocs.io\/en\/latest\/model.html\n    #XGBClassifier()    \n    ]\n\n\n\n\n#create table to compare MLA metrics\nMLA_columns = ['MLA Name', 'MLA Parameters', 'MLA Test Accuracy(Scoring)',\"Accuracy(Confusion Matrix)\",\"true_positive\",\"false_positive\",\"true_negative\",\"false_negative\" ]\nMLA_compare = pd.DataFrame(columns = MLA_columns)\nrow_index = 0\n#ground Truth\nMLA_compare.loc[row_index, 'MLA Name'] = \"Ground Truth\"\nMLA_compare.loc[row_index, 'MLA Parameters'] = \"NaN\"\nMLA_compare.loc[row_index, 'MLA Test Accuracy'] =0\nMLA_compare.loc[row_index, 'Accuracy(Confusion Matrix)'] =0\nMLA_compare.loc[row_index, 'true_positive'] =sum(y_test==1)\nMLA_compare.loc[row_index, 'true_negative'] =sum(y_test==0)\nMLA_compare.loc[row_index, 'false_positive'] =0\nMLA_compare.loc[row_index, 'false_negative'] =0\nrow_index+=1\n\n\n#index through MLA and save performance to table\n\nfor alg in MLA:\n    print(\"\\n\\nClassifier\",alg)\n    #set name and parameters\n    MLA_name = alg.__class__.__name__\n    MLA_compare.loc[row_index, 'MLA Name'] = MLA_name\n    MLA_compare.loc[row_index, 'MLA Parameters'] = str(alg.get_params())\n    \n    \n    #score model with cross validation: http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.cross_validate.html#sklearn.model_selection.cross_validate\n   # cv_results = model_selection.cross_validate(alg, X_train, y_train)\n    alg.fit(X_train_res, y_train_res)\n    y_pred=alg.predict(X_test)\n    score=metrics.accuracy_score(y_test, y_pred)\n    MLA_compare.loc[row_index, 'MLA Test Accuracy'] =score\n    \n    #COnfusion Matrix\n\n    true_negative,false_positive,false_negative,true_positive=confusion_matrix(y_test, y_pred).ravel()\n    Accuracy=(true_positive+true_negative)\/(true_positive+false_positive+true_negative+false_negative)\n    MLA_compare.loc[row_index, 'Accuracy(Confusion Matrix)'] =Accuracy\n    MLA_compare.loc[row_index, 'true_positive'] =true_positive\n    MLA_compare.loc[row_index, 'true_negative'] =true_negative\n    MLA_compare.loc[row_index, 'false_positive'] =false_positive\n    MLA_compare.loc[row_index, 'false_negative'] =false_negative\n    row_index+=1\n\n    \n\n\n","8f23654c":"MLA_compare","9a015b58":"from imblearn.under_sampling import RandomUnderSampler\nX=New_df.drop(\"target\",axis=1)\ny=New_df[\"target\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nprint(\"Number transactions X_train dataset: \", X_train.shape)\nprint(\"Number transactions y_train dataset: \", y_train.shape)\nprint(\"Number transactions X_test dataset: \", X_test.shape)\nprint(\"Number transactions y_test dataset: \", y_test.shape)\nprint(\"Before UnderSampling, counts of label '1': {}\".format(sum(y_train==1)))\nprint(\"Before UnderSampling, counts of label '0': {} \\n\".format(sum(y_train==0)))\n\n\nrus = RandomUnderSampler(random_state=0,ratio={0: 9000, 1:13000})\nrus.fit(X_train, y_train)\nX_resampled, y_resampled = rus.fit_sample(X_train, y_train.ravel())\n\nprint('After UnderSampling, the shape of train_X: {}'.format(X_resampled.shape))\nprint('After UnderSampling, the shape of train_y: {} \\n'.format( y_resampled.shape))\n\nprint(\"After UnderSampling, counts of label '1': {}\".format(sum(y_resampled==1)))\nprint(\"After UnderSampling, counts of label '0': {}\".format(sum(y_resampled==0)))\n\n\n\n\n#red is 0 \n#green is 1","6f66622c":"MLA = [\n    #Ensemble Methods\n    ensemble.AdaBoostClassifier(),\n    ensemble.BaggingClassifier(),\n    ensemble.ExtraTreesClassifier(),\n    ensemble.GradientBoostingClassifier(),\n    ensemble.RandomForestClassifier(),\n\n    #Gaussian Processes\n    #gaussian_process.GaussianProcessClassifier(),\n    \n    #GLM\n    \n    linear_model.PassiveAggressiveClassifier(),\n    linear_model.RidgeClassifierCV(),\n    linear_model.SGDClassifier(),\n    linear_model.Perceptron(),\n    \n    #Navies Bayes\n    naive_bayes.BernoulliNB(),\n    naive_bayes.GaussianNB(),\n    \n    #Nearest Neighbor\n    neighbors.KNeighborsClassifier(),\n    \n    \n    \n    #Trees    \n    tree.DecisionTreeClassifier(),\n    tree.ExtraTreeClassifier(),\n    \n    #Discriminant Analysis\n    discriminant_analysis.LinearDiscriminantAnalysis(),\n    discriminant_analysis.QuadraticDiscriminantAnalysis(),\n\n    \n    #xgboost: http:\/\/xgboost.readthedocs.io\/en\/latest\/model.html\n    #XGBClassifier()    \n    ]\n\n\n\n\n#create table to compare MLA metrics\nMLA_columns = ['MLA Name', 'MLA Parameters', 'MLA Test Accuracy(Scoring)',\"Accuracy(Confusion Matrix)\",\"true_positive\",\"false_positive\",\"true_negative\",\"false_negative\" ]\nMLA_compare = pd.DataFrame(columns = MLA_columns)\nrow_index = 0\n#ground Truth\nMLA_compare.loc[row_index, 'MLA Name'] = \"Ground Truth\"\nMLA_compare.loc[row_index, 'MLA Parameters'] = \"NaN\"\nMLA_compare.loc[row_index, 'MLA Test Accuracy'] =0\nMLA_compare.loc[row_index, 'Accuracy(Confusion Matrix)'] =0\nMLA_compare.loc[row_index, 'true_positive'] =sum(y_test==1)\nMLA_compare.loc[row_index, 'true_negative'] =sum(y_test==0)\nMLA_compare.loc[row_index, 'false_positive'] =0\nMLA_compare.loc[row_index, 'false_negative'] =0\nrow_index+=1\n\n\n#index through MLA and save performance to table\n\nfor alg in MLA:\n    print(\"\\n\\nClassifier\",alg)\n    #set name and parameters\n    MLA_name = alg.__class__.__name__\n    MLA_compare.loc[row_index, 'MLA Name'] = MLA_name\n    MLA_compare.loc[row_index, 'MLA Parameters'] = str(alg.get_params())\n    \n    \n    #score model with cross validation: http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.cross_validate.html#sklearn.model_selection.cross_validate\n   # cv_results = model_selection.cross_validate(alg, X_train, y_train)\n    alg.fit(X_resampled, y_resampled )\n    y_pred=alg.predict(X_test)\n    score=metrics.accuracy_score(y_test, y_pred)\n    MLA_compare.loc[row_index, 'MLA Test Accuracy'] =score\n    \n    #COnfusion Matrix\n\n    true_negative,false_positive,false_negative,true_positive=confusion_matrix(y_test, y_pred).ravel()\n    Accuracy=(true_positive+true_negative)\/(true_positive+false_positive+true_negative+false_negative)\n    MLA_compare.loc[row_index, 'Accuracy(Confusion Matrix)'] =Accuracy\n    MLA_compare.loc[row_index, 'true_positive'] =true_positive\n    MLA_compare.loc[row_index, 'true_negative'] =true_negative\n    MLA_compare.loc[row_index, 'false_positive'] =false_positive\n    MLA_compare.loc[row_index, 'false_negative'] =false_negative\n    row_index+=1\n\n    \n\n\n","842ca479":"MLA_compare","d7fbfc7a":"from imblearn.under_sampling import RandomUnderSampler\nfrom keras.utils.np_utils import to_categorical\nX=New_df.drop(\"target\",axis=1)\ny=New_df[\"target\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\nprint(\"Number transactions X_train dataset: \", X_train.shape)\nprint(\"Number transactions y_train dataset: \", y_train.shape)\nprint(\"Number transactions X_test dataset: \", X_test.shape)\nprint(\"Number transactions y_test dataset: \", y_test.shape)\nprint(\"Before UnderSampling, counts of label '1': {}\".format(sum(y_train==1)))\nprint(\"Before UnderSampling, counts of label '0': {} \\n\".format(sum(y_train==0)))\n\n\nrus = RandomUnderSampler(random_state=0,ratio={0: 9000, 1:13000})\nrus.fit(X_train, y_train)\nX_resampled, y_resampled = rus.fit_sample(X_train, y_train)\n\n\nX_resampled=np.asarray(X_resampled)\ny_resampled=np.asarray(y_resampled)\n\ny_resampled =to_categorical(y_resampled)\ny_test=to_categorical(y_test)\n\ny_resampled=y_resampled.astype(\"int64\")\ny_test=y_test.astype(\"int64\")\nprint('After UnderSampling, the shape of train_X: {}'.format(X_resampled.shape))\nprint('After UnderSampling, the shape of train_y: {} \\n'.format( y_resampled.shape))\n\nprint(\"After UnderSampling, counts of label '1': {}\".format(sum(y_resampled==1)))\nprint(\"After UnderSampling, counts of label '0': {}\".format(sum(y_resampled==0)))\n\n\n\n\n#red is 0 \n#green is 1","066f932a":"from imblearn.under_sampling import RandomUnderSampler\nX=New_df.drop(\"target\",axis=1)\ny=New_df[\"target\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nprint(\"Number transactions X_train dataset: \", X_train.shape)\nprint(\"Number transactions y_train dataset: \", y_train.shape)\nprint(\"Number transactions X_test dataset: \", X_test.shape)\nprint(\"Number transactions y_test dataset: \", y_test.shape)\nprint(\"Before UnderSampling, counts of label '1': {}\".format(sum(y_train==1)))\nprint(\"Before UnderSampling, counts of label '0': {} \\n\".format(sum(y_train==0)))\n\n\nrus = RandomUnderSampler(random_state=0,ratio={0: 1000, 1:1100})\nrus.fit(X_train, y_train)\nX_resampled, y_resampled = rus.fit_sample(X_train, y_train.ravel())\n\nprint('After UnderSampling, the shape of train_X: {}'.format(X_resampled.shape))\nprint('After UnderSampling, the shape of train_y: {} \\n'.format( y_resampled.shape))\n\nprint(\"After UnderSampling, counts of label '1': {}\".format(sum(y_resampled==1)))\nprint(\"After UnderSampling, counts of label '0': {}\".format(sum(y_resampled==0)))\n\n\n#red is 0 \n#green is 1","15903f8a":"X=New_df.drop(\"target\",axis=1)\ny=New_df[\"target\"]\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nprint(\"Number transactions X_train dataset: \", X_train.shape)\nprint(\"Number transactions y_train dataset: \", y_train.shape)\nprint(\"Number transactions X_test dataset: \", X_test.shape)\nprint(\"Number transactions y_test dataset: \", y_test.shape)\nprint(\"Before OverSampling, counts of label '1': {}\".format(sum(y_train==1)))\nprint(\"Before OverSampling, counts of label '0': {} \\n\".format(sum(y_train==0)))\n\nsm = SMOTE(random_state=2)\nX_train_res, y_train_res = sm.fit_sample(X_train, y_train.ravel())\n\n#taking small sample for just selecting hyperparatmers\n\n\nprint('After OverSampling, the shape of train_X: {}'.format(X_train_res.shape))\nprint('After OverSampling, the shape of train_y: {} \\n'.format(y_train_res.shape))\n\nprint(\"After OverSampling, counts of label '1': {}\".format(sum(y_train_res==1)))\nprint(\"After OverSampling, counts of label '0': {}\".format(sum(y_train_res==0)))\n","d8b2b596":"import math\nimport keras\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import RandomizedSearchCV, KFold\nfrom sklearn.metrics import make_scorer\nfrom keras.models import Sequential,Model\nfrom keras.layers import Dense,Dropout,Activation,BatchNormalization\nfrom keras import losses\nfrom keras import optimizers\nfrom keras.callbacks import EarlyStopping\nfrom keras import regularizers\n\ndef best_parameter_model(lr=0.01,dropout=0.5,optimizer=\"adam\",loss='mean_squared_error',\n                    last_activation=\"softmax\",activation=\"relu\",clipnorm=0.1,\n                    decay=1e-2,momentum=0.5,l1=0.01,l2=0.001,No_of_CONV_and_Maxpool_layers=3,\n                    No_of_Dense_Layers=3,No_of_Units_in_dense_layers=24,Conv2d_filters=60):\n    momentum=0.2  \n    decay=0\n    lr=0.0001 \n    dropout=0.1\n    optimizer='Adam'\n    loss='mean_squared_error' \n    last_activation='softmax'\n    activation='relu'\n    clipnorm=1 \n    l2=0.01 \n    \n    '''\n    momentum=best[\"momentum\"]\n    decay=best[\"decay\"]\n    lr=best[\"lr\"] \n    dropout=best[\"dropout\"]\n    optimizer=best[\"optimizer\"]\n    loss=best[\"loss\"]\n    last_activation=best[\"last_activation\"]\n    activation=best[\"activation\"]\n    clipnorm=best[\"clipnorm\"]\n    l2=best[\"l2\"]\n    '''\n    #setting up loss fucntions\n    loss=losses.mean_squared_error\n    if(loss=='mean_squared_error'):\n        loss=losses.mean_squared_error\n    if(loss==\"poisson\"):\n        loss=keras.losses.poisson\n    if(loss==\"mean_absolute_error\"):\n        loss=keras.losses.mean_absolute_percentage_error\n    if(loss==\"mean_squared_logarithmic_error\"):\n        loss=keras.losses.mean_squared_logarithmic_error\n    if(loss==\"binary_crossentropy\"):\n        loss=keras.losses.binary_crossentropy\n    if(loss==\"hinge\"):\n        loss=keras.losses.hinge\n        \n    #setting up Optimizers\n    opt=keras.optimizers.Adam(lr=lr, decay=decay, beta_1=0.9, beta_2=0.999)\n    if optimizer==\"Adam\":\n        opt=keras.optimizers.Adam(lr=lr, decay=decay, beta_1=0.9, beta_2=0.999)\n    if optimizer==\"Adagrad\":\n        opt=keras.optimizers.Adagrad(lr=lr, epsilon=None, decay=decay)\n    if optimizer==\"sgd\":\n        opt=keras.optimizers.SGD(lr=lr, momentum=momentum, decay=decay, nesterov=False)\n    if optimizer==\"RMSprop\":\n        opt=keras.optimizers.RMSprop(lr=lr, rho=0.9, epsilon=None, decay=0.0)\n    if optimizer==\"Adamax\":\n        opt=keras.optimizers.Adamax(lr=lr, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0)\n        \n        \n    #last activation layer\n    if last_activation==\"softmax\":\n        last_activation=keras.activations.softmax\n    if last_activation==\"sigmoid\":\n        last_activation=keras.activations.sigmoid\n    \n    \n    \n    \n    \n    model=Sequential()\n    \n    \n    \n    \n\n    model.add(Dense(units=84,activation=activation))\n    model.add(Dropout(dropout))\n    \n\n    model.add(Dense(units=62,activation=activation))\n    model.add(Dropout(dropout))\n    \n\n    model.add(Dense(units=31,activation=activation))\n    model.add(Dropout(dropout))\n    \n\n\n    model.add(Dense(units=16,activation=activation))\n    model.add(Dropout(dropout))\n    \n\n\n    model.add(Dense(units=16,activation=activation))\n    model.add(Dropout(dropout))\n    model.add(Dense(units=2,activation=last_activation))\n\n    model.compile(loss=loss,optimizer=opt,\n                     metrics=['accuracy'])\n    \n    model.compile(loss=loss ,optimizer=opt,\n                 metrics=['accuracy'])\n    \n    \n\n    return model","457f2574":"params = {'lr': (0.0001, 0.01,0.0009,0.001,0.002 ),\n     'epochs': [500,100,1000,1500],\n     'dropout': (0, 0.2,0.4, 0.8),\n     'optimizer': ['Adam','Adagrad','sgd','RMSprop','Adamax'],\n     'loss': [\"binary_crossentropy\",\"mean_squared_error\",\"hinge\",\"mean_absolute_error\",\"mean_squared_logarithmic_error\",\"poisson\"],\n     'last_activation': [\"softmax\",\"sigmoid\"],\n     'activation' :[\"relu\",\"selu\",\"linear\",\"sigmoid\"],\n     'clipnorm':(0.0,0.5,1),\n     'decay':(1e-6,1e-4,1e-8),\n     'momentum':(0.9,0.5,0.2),\n     'l1': (0.01,0.001,0.0001),\n     'l2': (0.01,0.001,0.0001),\n     'No_of_Dense_Layers': [4,6,8,10,12,14]\n     }\n","10fdfa73":"\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import RandomizedSearchCV, KFold\nfrom sklearn.metrics import make_scorer\n# model class to use in the scikit random search CV \n\nmodel = KerasClassifier(build_fn=best_parameter_model, epochs=10, batch_size=500, verbose=1)\nRandomizedSearchfit = RandomizedSearchCV(estimator=model, cv=KFold(3), param_distributions=params, \n                          verbose=1,  n_iter=10, n_jobs=1)\n","d4ad52d6":"#having some problem in this line\nfrom keras.utils import to_categorical\ny_resampled=to_categorical(y_resampled)\nRandomizedSearch_result = RandomizedSearchfit.fit(X_resampled, y_resampled )\n","5e78e624":"\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\n\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n# build a classifier\nclf = RandomForestClassifier(n_estimators=20)\n\n\n\n# specify parameters and distributions to sample from\nparam_dist = {\"max_depth\": [3, None],\n              \"max_features\": [1, 3, 10],\n              \"min_samples_split\": [2, 3, 10],\n              \"bootstrap\": [True, False],\n              \"criterion\": [\"gini\", \"entropy\"],\n             \"n_estimators\":[100,500,1000,2000,5000],\n             }\n\n# run randomized search\nn_iter_search = 20\nrandom_search = RandomizedSearchCV(clf, param_distributions=param_dist,\n                                   n_iter=n_iter_search, cv=5,verbose=1)\n\n#Already Searched Parameters\n#random_search.fit(X_resampled, y_resampled )\n#clf = RandomForestClassifier(max_depth=random_search.best_params_['max_depth'],\n #                            max_features=random_search.best_params_['max_depth'],min_samples_split=random_search.best_params_['min_samples_split'],\n  #                          bootstrap=random_search.best_params_['bootstrap'],\n   #                          criterion=random_search.best_params_['criterion'],\n    #                         n_estimators=random_search.best_params_['n_estimators']\n     #                        ,random_state=0)\n#print(random_search.best_params_)","cb2804b3":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\n\nclf = RandomForestClassifier(n_estimators= 1000, min_samples_split= 2, max_features= 3,\n                             max_depth= None, criterion= 'gini', bootstrap= True\n                             ,random_state=0)\nclf.fit(X_train_res, y_train_res)\nX_test=np.asarray(X_test)\ny_pred=clf.predict(X_test)\ntrue_negative,false_positive,false_negative,true_positive=confusion_matrix(y_test,y_pred).ravel()\n\nprint(\"true_negative: \",true_negative)\nprint(\"false_positive: \",false_positive)\nprint(\"false_negative: \",false_negative)\nprint(\"true_positive: \",true_positive)\nprint(\"\\n\\n Accuracy Measures\\n\\n\")\nAccuracy=(true_positive+true_negative)\/(true_positive+false_negative+true_negative+false_positive)\nprint(\"Accuracy: \",Accuracy)\n\nSensitivity=true_positive\/(true_positive+false_negative)\nprint(\"Sensitivity: \",Sensitivity)\n\nFalse_Positive_Rate=false_positive\/(false_positive+true_negative)\nprint(\"False_Positive_Rate: \",False_Positive_Rate)\n\nSpecificity=true_negative\/(false_positive + true_negative)\nprint(\"Specificity: \",Specificity)\n\n#FDR \u00e0 0 means that very few of our predictions are wrong\nFalse_Discovery_Rate=false_positive\/(false_positive+true_positive)\nprint(\"False_Discovery_Rate: \",False_Discovery_Rate)\n\nPositive_Predictive_Value =true_positive\/(true_positive+false_positive)\nprint(\"Positive_Predictive_Value: \",Positive_Predictive_Value)","6d1d777c":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn import tree\n\n\nclfETC=tree.ExtraTreeClassifier()\n\n\nparam_dist = {\"max_depth\": [3,5,8,13,17,None],\n              \"max_features\": [0.01,0.03,0.07,0.10,0.15,0.20,\"auto\"],\n              \"min_samples_split\": [2, 5, 10,15,20],\n              \n              \"criterion\": [\"gini\", \"entropy\"],\n              \"splitter\" :['best','random'],\n             \n             }\n\nn_iter_search = 20\nrandom_search = RandomizedSearchCV(clfETC, param_distributions=param_dist,\n                                   n_iter=n_iter_search, cv=10,verbose=1)\n\n#Already Searched Parameter\n#random_search.fit(X_resampled, y_resampled)\n#print(random_search.best_params_)","13655fd0":"from sklearn.ensemble import RandomForestClassifier\nclfET = tree.ExtraTreeClassifier( min_samples_split= 2, max_features= 0.01,max_depth= 8,\n                              criterion= 'entropy')\n                            \n\nfrom sklearn.metrics import confusion_matrix\nclfET.fit(X_train_res, y_train_res)\nX_test=np.asarray(X_test)\ny_pred=clf.predict(X_test)\ntrue_negative,false_positive,false_negative,true_positive=confusion_matrix(y_test,y_pred).ravel()\n\nprint(\"true_negative: \",true_negative)\nprint(\"false_positive: \",false_positive)\nprint(\"false_negative: \",false_negative)\nprint(\"true_positive: \",true_positive)\nprint(\"\\n\\n Accuracy Measures\\n\\n\")\nAccuracy=(true_positive+true_negative)\/(true_positive+false_negative+true_negative+false_positive)\nprint(\"Accuracy: \",Accuracy)\n\nSensitivity=true_positive\/(true_positive+false_negative)\nprint(\"Sensitivity: \",Sensitivity)\n\nFalse_Positive_Rate=false_positive\/(false_positive+true_negative)\nprint(\"False_Positive_Rate: \",False_Positive_Rate)\n\nSpecificity=true_negative\/(false_positive + true_negative)\nprint(\"Specificity: \",Specificity)\n\n#FDR \u00e0 0 means that very few of our predictions are wrong\nFalse_Discovery_Rate=false_positive\/(false_positive+true_positive)\nprint(\"False_Discovery_Rate: \",False_Discovery_Rate)\n\nPositive_Predictive_Value =true_positive\/(true_positive+false_positive)\nprint(\"Positive_Predictive_Value: \",Positive_Predictive_Value)","d0f94e79":"from sklearn import ensemble\nfrom sklearn.ensemble import RandomForestClassifier\n\nbstlfy=ensemble.BaggingClassifier(base_estimator=clf,n_estimators=5)\nbstlfy=bstlfy.fit(X_train_res, y_train_res)\nprediction=bstlfy.predict(X_test)\n    \n\ntrue_negative,false_positive,false_negative,true_positive=confusion_matrix(y_test, prediction).ravel()\n\nprint(\"true_negative: \",true_negative)\nprint(\"false_positive: \",false_positive)\nprint(\"false_negative: \",false_negative)\nprint(\"true_positive: \",true_positive)\nprint(\"\\n\\n Accuracy Measures\\n\\n\")\n\nAccuracy=(true_positive+true_negative)\/(true_positive+false_positive+true_negative+false_negative)\nprint(\"Accuracy: \",Accuracy)\n\nSensitivity=true_positive\/(true_positive+false_negative)\nprint(\"Sensitivity: \",Sensitivity)\n\nFalse_Positive_Rate=false_positive\/(false_positive+true_negative)\nprint(\"False_Positive_Rate: \",False_Positive_Rate)\n\nSpecificity=true_negative\/(false_positive + true_negative)\nprint(\"Specificity: \",Specificity)\n\n        #FDR \u00e0 0 means that very few of our predictions are wrong\nFalse_Discovery_Rate=false_positive\/(false_positive+true_positive)\nprint(\"False_Discovery_Rate: \",False_Discovery_Rate)\n\nPositive_Predictive_Value =true_positive\/(true_positive+false_positive)\nprint(\"Positive_Predictive_Value: \",Positive_Predictive_Value)","b9b92acf":"# **Random Search on Random Forest**","e9d9974a":"**In our case Our Raw Data is performing well so we didnt go for Undersampling or Oversampling**\n\n**Lets move forward and see our assumption of getting good scores on raw data is True or not**","e68ec2cc":"We have 90 percent 0 label values and 10 percent 1 label values ","7f080d9c":"# **Lets see now How Undersampling is working On our Data**","dca234af":"Now we have 50 percent positive examples and 50 percent negative examples ","07f23867":"I reapeat this step because at every step I am changing my X and Y. Some where I am putthing Raw data into X and Y and some wehre I am putting Undersampled data. So for confirming I repeat this step that read from data frame and perform the specefic step (over sample -- undersample ) on data","39e822c7":"**From here I just Realized that I can achive better accuracy through neural netwrork(Perceptron, MLP) Classifier If I am able to do fine Tuning**","4dbaa5fb":"Selecting coloums having importance greater than 0.01","54b80830":"# **Outliers Analysis**","2de168a8":"** Having Some problem in random search of MLP if you guys get the solution please let me inform Thank you!**\n\n**Kindly See the hide cells to take my Problem Under Considration**\n\n[Link To Stack OverFlow](https:\/\/stackoverflow.com\/questions\/55145261\/randomized-search-valued-passed-value-passed-to-parameter-shape-has-datatype-f)\n\n","e2ebaa9a":"**Decesion Tree on Raw Data**","5cbaedbc":"# Diminsionality reduction\nWE have alot of diminsions here I am going to reduce some diminsions with the help of D-Trees","db71e86d":" # **Over Sampling**\n\n[Smote oversampling](https:\/\/docs.microsoft.com\/en-us\/azure\/machine-learning\/studio-module-reference\/smote)","3e65df99":"**I am just undersampling data to choose equal number of traning good sample rather than picking up random samples. It take less time to run my model for small example rather than whole dataset to set my hyper parameters this undersampling is only done for seeing the best parameters. Once we get good parameters we take that parameters and than check it on whole dataset.**","0b8df5bc":"# **Justification why Raw data is performing Well**\n**Most of them are givig 89% accuracy **\n\n**Our models are overfitting on negative Examples**\n\n**My Assumption was wrong that Raw data is giving Better accuracy than UnderSampling and OverSampling because Our Models are classifying Negative examples very good. And we have alot of negative Examples in our Dataset Now we Have to do something Different**\n\n**Its better to Experiment than make assumptions in machine Learnig**","22f99860":"**For Fitting our Dataset of Best Parameters**","6de7c8ba":"# **Missing Values**","4bce0612":"> # **UnderStanding Data**","dc11ce1c":"# Introduction\n    * Understanding Data    \n    * Outlier Analysis\n    \n    * Smote Sampling    \n        * OverSampling with Smote\n        * UnderSampling with Smote    \n        \n    * Diminsionality Reduction with Decesion Trees\n    \n    * Machine Learning\n        * Decesion Trees\n        * Neural Networks   \n        * Checking Other 20 Classifiers at the same time\n        * Ensembling Techniques\n            * Bagging\n            * Boasting\n            * Stacking\n            * Votting            \n\n","51faccb9":"**Setting up Dataset**","85990b12":"# **Machine Learning**","4b29181e":"**Accuracy is increased but we can Improve more accuracy lets try some other classifier**","5a5e2023":"**Lets see data Distribution**","108aeefa":"# OverSampling data","679b357a":"# Under Sampling Data Results","e3b55f37":"# **OverSampling**","96308843":"**For Just Taking Best Hyperpatameters**","f6843e74":"**Detecting Outlier **","4d9537e7":"# **Ensembling Methods**","8d4ea4ed":"# OverSampled Data Results","94a08a45":"best params are\nGet through Random Search\n\nclf = RandomForestClassifier(n_estimators= 1000, min_samples_split= 2, max_features= 3,\n                             max_depth= None, criterion= 'gini', bootstrap= True\n                             ,random_state=0)","485520f3":"# **Random Search On Extra Tree Classifier**","d34ba21c":"# **Ramdom Search on MLP**","08b363c3":"**Outliers Removed**","af26e6f0":"**Now I a going to fit my dataset on best parameters thats why Increasing the size of dataset by Oversampling**","ef720266":"# **Raw Data **","c1920b3c":"# **Bagging**\n\nA Bagging classifier is an ensemble meta-estimator that fits base classifiers each on random subsets of the original dataset and then aggregate their individual predictions (either by voting or by averaging) to form a final prediction. Such a meta-estimator can typically be used as a way to reduce the variance of a black-box estimator (e.g., a decision tree), by introducing randomization into its construction procedure and then making an ensemble out of it.","d1e5d8a7":"**Extra trees are not performing well after hyperparameter Optimization**","fb8b739d":"# Neural Networks","c9ddfa41":"# **UnderSampling Data**\n\n[Resource](https:\/\/www.kaggle.com\/residentmario\/undersampling-and-oversampling-imbalanced-data)","e31a1cbd":"# New Dataframe After Reduction"}}