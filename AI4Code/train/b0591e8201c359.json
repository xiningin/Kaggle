{"cell_type":{"14f26c3b":"code","3f820626":"code","2ab95ec6":"code","4dc019ad":"code","13c725b5":"code","dc39e06e":"code","6b3bb51c":"code","3beb2543":"code","4465913d":"markdown","e89cc983":"markdown","e8deb4e7":"markdown","6b25ed68":"markdown","7bf6b65b":"markdown","ec3cc162":"markdown","92018dba":"markdown","c9189ff0":"markdown","b34ba8e4":"markdown"},"source":{"14f26c3b":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\n\nimport os\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport os\nfrom glob import glob\nimport seaborn as sns\nfrom PIL import Image\n","3f820626":"print(os.listdir('..\/input\/data\/'))","2ab95ec6":"folder_benign_train = '..\/input\/data\/train\/benign'\nfolder_malignant_train = '..\/input\/data\/train\/malignant'\n\nfolder_benign_test = '..\/input\/data\/test\/benign'\nfolder_malignant_test = '..\/input\/data\/test\/malignant'\n\nread = lambda imname: np.asarray(Image.open(imname).convert(\"RGB\"))\n\n# Load in training pictures \nims_benign = [read(os.path.join(folder_benign_train, filename)) for filename in os.listdir(folder_benign_train)]\nX_benign = np.array(ims_benign, dtype='uint8')\nims_malignant = [read(os.path.join(folder_malignant_train, filename)) for filename in os.listdir(folder_malignant_train)]\nX_malignant = np.array(ims_malignant, dtype='uint8')\n\n# Load in testing pictures\nims_benign = [read(os.path.join(folder_benign_test, filename)) for filename in os.listdir(folder_benign_test)]\nX_benign_test = np.array(ims_benign, dtype='uint8')\nims_malignant = [read(os.path.join(folder_malignant_test, filename)) for filename in os.listdir(folder_malignant_test)]\nX_malignant_test = np.array(ims_malignant, dtype='uint8')\n\n# Create labels\ny_benign = np.zeros(X_benign.shape[0])\ny_malignant = np.ones(X_malignant.shape[0])\n\ny_benign_test = np.zeros(X_benign_test.shape[0])\ny_malignant_test = np.ones(X_malignant_test.shape[0])\n\n\n# Merge data \nX_train = np.concatenate((X_benign, X_malignant), axis = 0)\ny_train = np.concatenate((y_benign, y_malignant), axis = 0)\n\nX_test = np.concatenate((X_benign_test, X_malignant_test), axis = 0)\ny_test = np.concatenate((y_benign_test, y_malignant_test), axis = 0)\n\n# Shuffle data\ns = np.arange(X_train.shape[0])\nnp.random.shuffle(s)\nX_train = X_train[s]\ny_train = y_train[s]\n\ns = np.arange(X_test.shape[0])\nnp.random.shuffle(s)\nX_test = X_test[s]\ny_test = y_test[s]","4dc019ad":"# Display first 15 images of moles, and how they are classified\nw=40\nh=30\nfig=plt.figure(figsize=(12, 8))\ncolumns = 5\nrows = 3\n\nfor i in range(1, columns*rows +1):\n    ax = fig.add_subplot(rows, columns, i)\n    if y_train[i] == 0:\n        ax.title.set_text('Benign')\n    else:\n        ax.title.set_text('Malignant')\n    plt.imshow(X_train[i], interpolation='nearest')\nplt.show()\n\n","13c725b5":"plt.bar(0, y_train[np.where(y_train == 0)].shape[0], label = 'benign')\nplt.bar(1, y_train[np.where(y_train == 1)].shape[0], label = 'malignant')\nplt.legend()\nplt.title(\"Training Data\")\nplt.show()\n\nplt.bar(0, y_test[np.where(y_test == 0)].shape[0], label = 'benign')\nplt.bar(1, y_test[np.where(y_test == 1)].shape[0], label = 'malignant')\nplt.legend()\nplt.title(\"Test Data\")\nplt.show()\n","dc39e06e":"X_train = X_train\/255.\nX_test = X_test\/255.","6b3bb51c":"# support vector machine classifier\nfrom sklearn.svm import SVC\n\nmodel = SVC()\n\nmodel.fit(X_train.reshape(X_train.shape[0],-1), y_train)","3beb2543":"from sklearn.metrics import accuracy_score\n\ny_pred = model.predict(X_test.reshape(X_test.shape[0],-1))\n\nprint(accuracy_score(y_test, y_pred))","4465913d":"# Training a simple Model","e89cc983":"Sorry for the data being so hidden in folders. I will try to update this soon.\n","e8deb4e7":"# Scale values","6b25ed68":"# Read in the Data","7bf6b65b":"# Testing Model","ec3cc162":"## Introduction\nGreetings from the Kaggle bot! This is an automatically-generated kernel with starter code demonstrating how to read in the data and begin exploring. Click the blue \"Edit Notebook\" or \"Fork Notebook\" button at the top of this kernel to begin editing.","92018dba":"## Exploratory Analysis\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data. Depending on the data, not all plots will be made. (Hey, I'm just a kerneling bot, not a Kaggle Competitions Grandmaster!)","c9189ff0":"# Display Data","b34ba8e4":"# Dataset\nThe dataset is almost balanced. It has 1800 benign samples and 1497 malignant samples"}}