{"cell_type":{"6873c587":"code","38ce792f":"code","acb7e863":"code","ac07307e":"code","8412ff84":"code","1bcda7c3":"code","9bb7af63":"code","9d943b5f":"code","61ff9274":"code","e2854f28":"code","00dcfbae":"code","2e51247b":"code","92d2f8f1":"code","a862febb":"code","ceff24f2":"code","a2d66d9f":"code","f47fa657":"code","3d648660":"code","4fae9c4f":"code","47b5a361":"code","3a9cc784":"code","5440167a":"code","6d4d230d":"code","3968f527":"code","d435577b":"code","bd03b4d2":"code","d5b97e27":"code","9869b6e9":"code","ab0f0493":"code","8a24e2b8":"code","0ae08dd1":"markdown","b6983cd5":"markdown","cd1ecf04":"markdown","21e6e367":"markdown","9983d78c":"markdown","973a7257":"markdown","35c495ef":"markdown","974b48bb":"markdown","c7060d47":"markdown","a8558c43":"markdown"},"source":{"6873c587":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","38ce792f":"#supress warning\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","acb7e863":"#save file path\nreal_estate_file_path = '\/kaggle\/input\/real-estate-price-prediction\/Real estate.csv'\n#read data and store data\nreal_estate = pd.read_csv(real_estate_file_path)\n#summary of real_estate data\nreal_estate.head()","ac07307e":"#inspect various aspect of dataframe\n\nreal_estate.shape","8412ff84":"real_estate.info()","1bcda7c3":"#to check the null values\nreal_estate.isnull().sum()","9bb7af63":"#describe the data\nreal_estate.describe()","9d943b5f":"#There is no need of 'No' column and 'Date' column, hence dropping it.\nreal_estate.drop(['No'], axis=1, inplace=True)\nreal_estate.drop(['X1 transaction date'],axis=1, inplace=True)","61ff9274":"#check dataset after dropping 'No' col\nreal_estate.head()","e2854f28":"#import libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns","00dcfbae":"#Visualising all numeric variable\nplt.figure(figsize=(6,12))\nsns.pairplot(real_estate)\nplt.show()","2e51247b":"#Find correlation\nplt.figure(figsize=(6,6))\nsns.heatmap(real_estate.corr(),annot=True)","92d2f8f1":"#import libraries\nfrom sklearn.model_selection import train_test_split\nnp.random.seed(0)\ndf_train,df_test = train_test_split(real_estate, train_size=0.70, test_size=0.30,random_state=100)\nprint(df_train.head())\nprint(df_test.head())","a862febb":"#Dividing X and y sets for model building\ny_train = df_train.pop('Y house price of unit area')\nX_train = df_train\nprint(y_train.head())\nprint(X_train.head())","ceff24f2":"#import Linear regression\nfrom sklearn.linear_model import LinearRegression","a2d66d9f":"#fit the model\nlm = LinearRegression()\nlm.fit(X_train, y_train)","f47fa657":"lm.coef_","3d648660":"#The coefficient of all independent variable are as follows\ncoeff = pd.DataFrame(lm.coef_, X_train.columns, columns=['coefficient'])\ncoeff","4fae9c4f":"import statsmodels.api as sm\nX_train_new = sm.add_constant(X_train)\nlm_1 = sm.OLS(y_train, X_train).fit()\nprint(lm_1.summary())","47b5a361":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\nvif = pd.DataFrame()\nX = X_train_new\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","3a9cc784":"y_train_price = lm_1.predict(X_train)","5440167a":"from sklearn.metrics import r2_score\nr2_score(y_true=y_train,y_pred=y_train_price)","6d4d230d":"#plot histogram of error terms\nfig = plt.figure()\nsns.distplot((y_train-y_train_price), bins=20)\nfig.suptitle('Error Terms',fontsize = 20)\nplt.xlabel('Error',fontsize=17)","3968f527":"y_test = df_test.pop('Y house price of unit area')\nX_test = df_test","d435577b":"y_test_pred = lm_1.predict(X_test)","bd03b4d2":"#import library\nfrom sklearn.metrics import r2_score","d5b97e27":"#Evaluate r2\nr2_score(y_true=y_test,y_pred=y_test_pred)","9869b6e9":"df = pd.DataFrame({'Actual':y_test,'Predictions':y_test_pred})\ndf['Predictions']= round(df['Predictions'])\ndf.head()","ab0f0493":"sns.regplot('Actual','Predictions',data=df)","8a24e2b8":"from sklearn import metrics\n\n#Mean absolute error(MAE)\nprint('MAE',metrics.mean_absolute_error(y_test,y_test_pred))\n#Mean squared error(MSE)\nprint('MSE',metrics.mean_squared_error(y_test,y_test_pred))\n#Root mean squared error(RMSE)\nprint('RMSE',np.sqrt(metrics.mean_squared_error(y_test,y_test_pred)))","0ae08dd1":"# Evaluating Model performance","b6983cd5":"There is no null value present in dataset.","cd1ecf04":"calculating R2 value","21e6e367":"# ***Data Visualization***","9983d78c":"All features p-value is significant and vif is less than 5. Hence no need to remove any feature.","973a7257":"# Data splitting to Training and Testing model","35c495ef":"# Data Modelling and Evaluation","974b48bb":"# Residual Analysis of train data","c7060d47":"Here error terms has come in normal error distribution","a8558c43":"# Making Prediction on Final model"}}