{"cell_type":{"a8a38263":"code","f6b0ec41":"code","f89e2cfa":"code","8c115335":"code","2a5c06e4":"code","ef2d0ffc":"code","d013fdf5":"code","98f7d563":"code","550099b8":"code","cc453830":"code","e1b4cf58":"code","82272aca":"code","d224f8c5":"code","313cb24d":"code","e126b639":"code","3b56fada":"code","a2fe04dc":"code","e8438cc9":"code","bbfbf3a6":"code","c75f3ace":"code","48c8caac":"code","db03ec44":"code","9e4077fd":"code","f04ad994":"code","1622d4a6":"code","29030676":"markdown","8874fbcd":"markdown","79c6ea0d":"markdown","ccdfeaf1":"markdown","669f52f3":"markdown","5ac57902":"markdown","df459676":"markdown","c86ceb76":"markdown","e093c4e2":"markdown"},"source":{"a8a38263":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f6b0ec41":"import pandas as pd\nimport datetime as dt\nimport numpy as np\nimport matplotlib.pyplot as plt","f89e2cfa":"df = pd.read_csv('..\/input\/retailtransactiondata\/Retail_Data_Transactions.csv', parse_dates=['trans_date'])","8c115335":"df.head(3)","2a5c06e4":"df.info()","ef2d0ffc":"print(df['trans_date'].min(), df['trans_date'].max())","d013fdf5":"sd = dt.datetime(2015,4,1)\ndf['hist']=sd - df['trans_date']\ndf['hist'].astype('timedelta64[D]')\ndf['hist']=df['hist'] \/ np.timedelta64(1, 'D')\ndf.head()","98f7d563":"df=df[df['hist'] < 730]\ndf.info()","550099b8":"rfmTable = df.groupby('customer_id').agg({'hist': lambda x:x.min(), # Recency\n                                        'customer_id': lambda x: len(x),               # Frequency\n                                        'tran_amount': lambda x: x.sum()})          # Monetary Value\n\nrfmTable.rename(columns={'hist': 'recency', \n                         'customer_id': 'frequency', \n                         'tran_amount': 'monetary_value'}, inplace=True)","cc453830":"rfmTable.head()\n","e1b4cf58":"df[df['customer_id']=='CS1112']","82272aca":"quartiles = rfmTable.quantile(q=[0.25,0.50,0.75])\nprint(quartiles, type(quartiles))","d224f8c5":"quartiles=quartiles.to_dict()\nquartiles","313cb24d":"# for Recency \n\ndef RClass(x,p,d):\n    if x <= d[p][0.25]:\n        return 1\n    elif x <= d[p][0.50]:\n        return 2\n    elif x <= d[p][0.75]: \n        return 3\n    else:\n        return 4\n    \n## for Frequency and Monetary value \n\ndef FMClass(x,p,d):\n    if x <= d[p][0.25]:\n        return 4\n    elif x <= d[p][0.50]:\n        return 3\n    elif x <= d[p][0.75]: \n        return 2\n    else:\n        return 1","e126b639":"rfmSeg = rfmTable\nrfmSeg['R_Quartile'] = rfmSeg['recency'].apply(RClass, args=('recency',quartiles,))\nrfmSeg['F_Quartile'] = rfmSeg['frequency'].apply(FMClass, args=('frequency',quartiles,))\nrfmSeg['M_Quartile'] = rfmSeg['monetary_value'].apply(FMClass, args=('monetary_value',quartiles,))","3b56fada":"rfmSeg['RFMClass'] = rfmSeg.R_Quartile.map(str) \\\n                            + rfmSeg.F_Quartile.map(str) \\\n                            + rfmSeg.M_Quartile.map(str)","a2fe04dc":"rfmSeg.head()","e8438cc9":"rfmSeg.sort_values(by=['RFMClass', 'monetary_value'], ascending=[True, False])","bbfbf3a6":"rfmSeg.groupby('RFMClass').agg('monetary_value').mean()","c75f3ace":"rfmSeg['Total Score'] = rfmSeg['R_Quartile'] + rfmSeg['F_Quartile'] +rfmSeg['M_Quartile']\nprint(rfmSeg.head(), rfmSeg.info())","48c8caac":"rfmSeg.groupby('Total Score').agg('monetary_value').mean()","db03ec44":"res = pd.read_csv('..\/input\/retailtransactiondata\/Retail_Data_Response.csv')\nres.sort_values('customer_id', inplace=True)\n\nprint(res.head(), res.info())","9e4077fd":"rfmSeg.reset_index(inplace=True)\nrfmSeg.head()","f04ad994":"rfmSeg.sort_values('customer_id', inplace=True)\nrfm2=pd.merge(rfmSeg, res, on='customer_id')","1622d4a6":"rfm2.info()","29030676":"Analisis RFM melibatkan pengkategorian R, F dan M ke dalam 3 kategori atau lebih. Untuk kenyamanan, mari buat 4 kategori berdasarkan kuartil (kuartil membagi sampel menjadi 4 bagian dengan proporsi yang sama)","8874fbcd":"Jumlah hari dari tanggal studi dihitung sebagai berikut.","79c6ea0d":"mari kita konversi informasi kuartil ke dalam kamus sehingga cutoff dapat diambil.","ccdfeaf1":"Hanya transaksi yang dilakukan dalam 2 tahun terakhir yang dipertimbangkan untuk dianalisis.","669f52f3":"The data will be summarized at customer level by taking *number of days to the latest transaction*, *sum of all transaction amount* and *total number of transaction*.","5ac57902":"Kami akan memeriksa detail pelanggan 'CS1112'. Tampaknya perhitungannya benar (transaksi terakhir adalah 77 hari yang lalu \/ jumlah total transaksi adalah 6 \/ jumlah totalnya adalah 358.","df459676":"Data ini berada pada tingkat transaksi. yaitu satu baris untuk setiap transaksi yang dilakukan oleh pelanggan (perhatikan bahwa tidak pada level item).","c86ceb76":"Untuk analisis, sangat penting untuk menggabungkan skor menjadi satu skor. Ada beberapa metode. Salah satu metode adalah dengan hanya menggabungkan pecahan untuk membentuk angka 3 digit antara 111 dan 444. Kerugiannya di sini adalah terlalu banyak kategori (4x4x4). Demikian pula, tidak mudah untuk memprioritaskan skor seperti 421 dan 412.","e093c4e2":"Kemungkinan lain adalah menggabungkan skor menjadi satu skor (misalnya 4 + 1 + 1). Ini akan membawa skor antara 3 dan 12. Keuntungannya di sini adalah bahwa setiap skor memiliki kepentingan yang sama. Tetapi beberapa skor memiliki komponen sebanyak sgements (misalnya, -413 iklan 431)"}}