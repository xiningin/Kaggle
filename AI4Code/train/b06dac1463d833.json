{"cell_type":{"775b93f5":"code","fff94e1e":"code","ffd69308":"code","ed38734e":"code","669fd473":"code","d524b2ee":"code","d77aaceb":"code","33402576":"code","9f781bf4":"code","e8c3a1a7":"code","3410e4dc":"code","21373a14":"code","8f7746fa":"code","7bc1ec19":"code","b2a49d8e":"code","52943ec6":"code","4113c123":"code","d6da5e99":"code","b9e25c8f":"code","af52ff83":"code","672310d8":"code","d5c4ce82":"code","5a97a60a":"code","91645f4d":"code","0ab9095f":"code","5a8ba610":"code","dfb249a5":"code","60811108":"code","2e6c8096":"code","14c9b94c":"code","b56d40a2":"code","25866fe9":"code","e00c554b":"code","66ea71da":"code","69619aeb":"code","71e7fea3":"code","9059e8b7":"code","72a5577e":"code","7d40ff63":"code","3b9cd624":"code","c0605c85":"code","290c3b58":"code","43814d29":"code","ca6f6a47":"code","400ff896":"code","a59c43cb":"code","830aced7":"code","01c5b38a":"code","a036fd6c":"code","accf9754":"code","42ee27d0":"code","cab79eaa":"code","6cea3bd7":"code","7f329cdc":"code","e6a544d4":"code","e52d5663":"code","abb2fa11":"code","a6609f4a":"code","c23b94ac":"code","ce3cd51d":"code","3ee6650c":"code","d8caecb1":"code","ec900b70":"code","e5ebe18e":"code","b61b66a6":"code","6fb748b0":"code","e530b601":"code","26c43437":"code","2dcf5224":"code","ae2a6ef3":"code","19916d91":"code","451f8ea0":"code","5a8e29dd":"code","fe54552e":"code","05377221":"code","458046fd":"code","edfd8f42":"code","4f08bb92":"code","3ca06e51":"code","f358c565":"code","28179b8e":"code","17ed7969":"code","b24676cc":"code","2f02d4df":"code","121577ba":"code","4e6929b9":"code","6cd88d32":"code","0fe5243e":"code","c5b7852f":"code","fa6db562":"code","8cdf22e9":"code","9e890d61":"code","5c7f9f7f":"code","3a5e0435":"code","737b276e":"code","f17bc1e4":"code","2456b653":"code","ae36b8fa":"code","3d7593c4":"code","0d3bad30":"code","15c863c6":"code","29efc442":"code","27ad724a":"code","26a415d6":"code","e26c4d43":"code","5f83cdab":"code","c516cdf1":"code","589d8483":"code","dafe2b3b":"code","258c93f5":"code","70506d6c":"code","535caeaa":"code","60d14339":"code","6ae5df8c":"markdown","e0b9deea":"markdown","71091ed9":"markdown","ca6abd20":"markdown","2a43e419":"markdown","fb4e7d94":"markdown","829babb6":"markdown","68b490a7":"markdown","19dfa6a8":"markdown","25aa2c45":"markdown","41217089":"markdown","35e8e638":"markdown","49805b28":"markdown","6541ec65":"markdown","4acecf3f":"markdown","7f9664b1":"markdown","9d348eeb":"markdown","f156175e":"markdown","a8551796":"markdown","397e8ade":"markdown","6801bb7e":"markdown","e3a45855":"markdown","9079aeae":"markdown","564dec4a":"markdown","3fe7a418":"markdown","5fd632e8":"markdown","c594ccbd":"markdown","24b20065":"markdown","2ab0b657":"markdown","00d77fb6":"markdown","f74c09e5":"markdown","6062cd39":"markdown","a1c058e7":"markdown","8cdd36f6":"markdown","e4a4bade":"markdown","515cf40e":"markdown","8ace16d5":"markdown","082a11b2":"markdown","3658a6bb":"markdown","9421a9d5":"markdown","ce4ec6a0":"markdown","e5844c8d":"markdown","33873fdf":"markdown","2ee71911":"markdown","73e56a10":"markdown","516925f1":"markdown","5dfb6d09":"markdown"},"source":{"775b93f5":"import numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt \nplt.rc(\"font\", size=14)\nimport seaborn as sns\nsns.set(style=\"white\") #white background style for seaborn plots\nsns.set(style=\"whitegrid\", color_codes=True)\n\nimport warnings\nwarnings.simplefilter(action='ignore')","fff94e1e":"import os\nos.getcwd()","ffd69308":"# Read CSV train data file into DataFrame\ntrain_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\n\n# Read CSV test data file into DataFrame\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\n# preview train data\ntrain_df.head()","ed38734e":"train_df.sample(5)","669fd473":"train_df.columns.values","d524b2ee":"train_df.shape","d77aaceb":"test_df.shape","33402576":"# preview test data\ntest_df.head()","9f781bf4":"column_names=train_df.columns.values\ncolumn_names","e8c3a1a7":"train_df.info()","3410e4dc":"train_df.isnull().sum()","21373a14":"# percent of missing \"Age\" \nprint('Percent of missing \"Age\" records is %.2f%%' %((train_df['Age'].isnull().sum()\/train_df.shape[0])*100))","8f7746fa":"print('Percent of missing \"Cabin\" records is %.2f%%' %((train_df['Cabin'].isnull().sum()\/train_df.shape[0])*100))","7bc1ec19":"print('Percent of missing \"Embarked\" records is %.2f%%' %((train_df['Embarked'].isnull().sum()\/train_df.shape[0])*100))","b2a49d8e":"column_names=train_df.columns.values\ncolumn_names","52943ec6":"train_df['Survived'].value_counts()","4113c123":"train_df['Survived'].value_counts()[0]","d6da5e99":"train_df['Survived'].value_counts(normalize=True)","b9e25c8f":"print(\"{} of the people in the training set died and {} of the people in the training set saved\".format(train_df['Survived'].value_counts()[0] *100\/len(train_df['Survived']),train_df['Survived'].value_counts()[1] *100\/len(train_df['Survived'])))","af52ff83":"sns.countplot(train_df['Survived'])\nplt.show()","672310d8":"train_df['Survived'].value_counts().plot.bar()\nplt.show()","d5c4ce82":"train_df['Pclass'].value_counts()","5a97a60a":"train_df['Pclass'].value_counts().plot.bar()\nplt.show()","91645f4d":"sns.countplot(train_df['Pclass'])\nplt.show()","0ab9095f":"train_df.groupby('Pclass')['Survived'].mean()","5a8ba610":"train_df['Survived'].groupby(train_df['Pclass']).mean()","dfb249a5":"sns.countplot(train_df['Pclass'], hue=train_df['Survived'])\nplt.show()","60811108":"train_df['Name'].head()","2e6c8096":"train_df['Name_Title']=train_df['Name'].apply(lambda x:x.split(\",\")[1]).apply(lambda x:x.split()[0])\ntrain_df['Name_Title'].unique()","14c9b94c":"train_df['Name_Title'].value_counts()","b56d40a2":"train_df['Name_Title'].value_counts().head(10).plot.bar()\nplt.show()","25866fe9":"sns.countplot(train_df['Name_Title'], hue=train_df['Survived'])\nplt.show()","e00c554b":"sns.countplot(data = train_df,y = 'Name_Title', hue=train_df['Survived'])\nplt.show()","66ea71da":" train_df.groupby('Name_Title')['Survived'].sum().sort_values(ascending=False)","69619aeb":"column_names","71e7fea3":"train_df['Sex'].value_counts(normalize=True)","9059e8b7":"train_df.groupby('Sex')['Survived'].mean()","72a5577e":"sns.countplot(train_df['Sex'], hue=train_df['Survived'])\nplt.show()","7d40ff63":"print(\"{}% of females survived and {}% of males survived\".format(train_df.groupby('Sex')['Survived'].mean()[0]*100,train_df.groupby('Sex')['Survived'].mean()[1]*100))","3b9cd624":"column_names","c0605c85":"# percent of missing \"Age\" \nprint('Percent of missing \"Age\" records is %.2f%%' %((train_df['Age'].isnull().sum()\/train_df.shape[0])*100))","290c3b58":"plt.figure(figsize=(10,10))\ntrain_df['Age'].plot(kind='density', color='teal')\nplt.show()\nplt.xlabel('Age')","43814d29":"ax = train_df[\"Age\"].hist(bins=15, density=True, stacked=True, color='teal', alpha=0.6)\nax.set(xlabel='Age')\nplt.xlim(-10,85)\nplt.show()","ca6f6a47":"ax = train_df[\"Age\"].hist(bins=15, density=True, stacked=True, color='teal', alpha=0.6)\ntrain_df[\"Age\"].plot(kind='density', color='teal')\nax.set(xlabel='Age')\nplt.xlim(-10,85)\nplt.show()","400ff896":"# mean age\nprint('The mean of \"Age\" is %.2f' %(train_df[\"Age\"].mean(skipna=True)))\n# median age\nprint('The median of \"Age\" is %.2f' %(train_df[\"Age\"].median(skipna=True)))","a59c43cb":"print('Percent of missing \"Cabin\" records is %.2f%%' %((train_df['Cabin'].isnull().sum()\/train_df.shape[0])*100))","830aced7":"train_df['Cabin'].unique()","01c5b38a":"train_df['Cabin'].value_counts().sort_values(ascending=False).head()","a036fd6c":"train_df['Cabin'].value_counts().plot.bar()\nplt.show()","accf9754":"sns.countplot(train_df['Cabin'])\nplt.show()","42ee27d0":"train_df['Cabin'].value_counts().head(10).plot.bar()\nplt.show()","cab79eaa":"print('The most common Cabin is %s.' %train_df['Cabin'].value_counts().idxmax())","6cea3bd7":"print('Percent of missing \"Cabin\" records is %.2f%%' %((train_df['Cabin'].isnull().sum()\/train_df.shape[0])*100))","7f329cdc":"train_df.groupby('Cabin')['Survived'].mean()","e6a544d4":"train_df.groupby('SibSp')['Survived'].mean()","e52d5663":"train_df['SibSp'].value_counts()","abb2fa11":"train_df.groupby('Parch')['Survived'].mean()","a6609f4a":"train_df['Parch'].value_counts()","c23b94ac":"train_df['Ticket'].head(n=10)","ce3cd51d":"pd.qcut(train_df['Fare'], 3).value_counts()","3ee6650c":"train_df['Survived'].groupby(pd.qcut(train_df['Fare'], 3)).mean()","d8caecb1":"pd.crosstab(pd.qcut(train_df['Fare'], 5), columns=train_df['Pclass'])","ec900b70":"print('Boarded passengers grouped by port of embarkation (C = Cherbourg, Q = Queenstown, S = Southampton):')\nprint(train_df['Embarked'].value_counts())\n#sns.countplot(x='Embarked', data=train_df, palette='Set2')\nsns.countplot(train_df['Embarked'])\nplt.show()","e5ebe18e":"print('Boarded passengers grouped by port of embarkation (C = Cherbourg, Q = Queenstown, S = Southampton):')\nprint(train_df['Embarked'].value_counts())\nsns.countplot(x='Embarked', data=train_df, palette='Set2')\n#sns.countplot(train_df['Embarked'])\nplt.show()","b61b66a6":"train_df['Embarked'].value_counts().plot.bar()\nplt.show()","6fb748b0":"train_df['Embarked'].value_counts()","e530b601":"#https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.idxmax.html\n#https:\/\/www.geeksforgeeks.org\/python-pandas-dataframe-idxmax\/\ntrain_df['Embarked'].value_counts().idxmax()","26c43437":"print('The most common boarding port of embarkation is %s.' %train_df['Embarked'].value_counts().idxmax())","2dcf5224":"\ntrain_df['Embarked'].value_counts(normalize=True)","ae2a6ef3":"train_df.groupby('Embarked')['Survived'].mean()","19916d91":"sns.countplot(train_df['Embarked'], hue=train_df['Survived'])\nplt.show()","451f8ea0":"train_df.columns","5a8e29dd":"train_data = train_df.copy()\ntrain_data.columns","fe54552e":"train_data.isnull().sum()","05377221":"train_data = train_df.copy()\ntrain_data[\"Age\"].fillna(train_df[\"Age\"].median(skipna=True), inplace=True)\ntrain_data[\"Embarked\"].fillna(train_df['Embarked'].value_counts().idxmax(), inplace=True)\ntrain_data.drop('Cabin', axis=1, inplace=True)","458046fd":"train_data.isnull().sum()","edfd8f42":"train_df.head()","4f08bb92":"train_data.head()","3ca06e51":"ax = train_df[\"Age\"].hist(bins=15, density=True, stacked=True, color='teal', alpha=0.6)\ntrain_df[\"Age\"].plot(kind='density', color='teal')\nax = train_data[\"Age\"].hist(bins=15, density=True, stacked=True, color='orange', alpha=0.6)\ntrain_data[\"Age\"].plot(kind='density', color='teal')\nax.set(xlabel='Age')\nplt.xlim(-10,85)\nplt.show()","f358c565":"train_data['TravelAlone']=train_data[\"SibSp\"]+train_data[\"Parch\"]\ntrain_data['TravelAlone'].head()","28179b8e":"## Create categorical variable for traveling alone\ntrain_data['TravelAlone']=np.where((train_data[\"SibSp\"]+train_data[\"Parch\"])>0, 0, 1)\ntrain_data.drop('SibSp', axis=1, inplace=True)\ntrain_data.drop('Parch', axis=1, inplace=True)","17ed7969":"train_data['TravelAlone'].head()","b24676cc":"\ntrain_data.columns.values","2f02d4df":"train_data.shape","121577ba":"train_data[\"Pclass\"].unique()","4e6929b9":"train_data[\"Embarked\"].unique()","6cd88d32":"train_data[\"Sex\"].unique()","0fe5243e":"#create categorical variables and drop some variables\ntraining=pd.get_dummies(train_data, columns=[\"Pclass\",\"Embarked\",\"Sex\",'Name_Title'])\ntraining.head()","c5b7852f":"training.shape","fa6db562":"training.columns","8cdf22e9":"training.drop('Sex_female', axis=1, inplace=True) #we are dropping this as 'Sex_male' is already there and its binary\n#below columns arenot necessary.Sowe will drop them\ntraining.drop('PassengerId', axis=1, inplace=True)\ntraining.drop('Name', axis=1, inplace=True)\ntraining.drop('Ticket', axis=1, inplace=True)\n\nfinal_train = training\nfinal_train.head()","9e890d61":"l=final_train.columns.sort_values()\nfor i in l:\n    #if i.startswith('Cabin'):\n        print(i)","5c7f9f7f":"final_train.shape","3a5e0435":"test_df.isnull().sum()","737b276e":"test_data = test_df.copy()\ntest_data[\"Age\"].fillna(train_df[\"Age\"].median(skipna=True), inplace=True)\ntest_data[\"Fare\"].fillna(train_df[\"Fare\"].median(skipna=True), inplace=True)\ntest_data.drop('Cabin', axis=1, inplace=True)\n\ntest_data['TravelAlone']=np.where((test_data[\"SibSp\"]+test_data[\"Parch\"])>0, 0, 1)\ntest_data['Name_Title']=train_df['Name'].apply(lambda x:x.split(\",\")[1]).apply(lambda x:x.split()[0])\nprint(test_data['Name_Title'].unique())\ntest_data.drop('SibSp', axis=1, inplace=True)\ntest_data.drop('Parch', axis=1, inplace=True)\n\ntesting = pd.get_dummies(test_data, columns=[\"Pclass\",\"Embarked\",\"Sex\",\"Name_Title\"])\ntesting.drop('Sex_female', axis=1, inplace=True)\ntesting.drop('PassengerId', axis=1, inplace=True)\ntesting.drop('Name', axis=1, inplace=True)\ntesting.drop('Ticket', axis=1, inplace=True)\n\nfinal_test = testing\nfinal_test.head()","f17bc1e4":"final_test.shape","2456b653":"l_test=final_test.columns.sort_values()\nfor i in l_test:\n    #if i.startswith('Cabin'):\n        print(i)","ae36b8fa":"final_train.shape","3d7593c4":"final_test.shape","0d3bad30":"final_train.columns","15c863c6":"final_test.columns\n","29efc442":"plt.figure(figsize=(15,8))\nax = sns.kdeplot(final_train[\"Age\"][final_train.Survived == 1], color=\"darkturquoise\", shade=True)\nsns.kdeplot(final_train[\"Age\"][final_train.Survived == 0], color=\"lightcoral\", shade=True)\nplt.legend(['Survived', 'Died'])\nplt.title('Density Plot of Age for Surviving Population and Deceased Population')\nax.set(xlabel='Age')\nplt.xlim(-10,85)\nplt.show()","27ad724a":"final_train['IsMinor']=np.where(final_train['Age']<=16, 1, 0)\n\nfinal_test['IsMinor']=np.where(final_test['Age']<=16, 1, 0)","26a415d6":"final_train.shape","e26c4d43":"final_test.shape","5f83cdab":"final_train.columns","c516cdf1":"final_test.columns","589d8483":"#https:\/\/stackoverflow.com\/questions\/41335718\/keep-same-dummy-variable-in-training-and-testing-data\n\n# Get missing columns in the training test\nmissing_cols = set( final_train.columns ) - set( final_test.columns)\nprint(\"Missing Columns in test dataset: \\n\",missing_cols)\n# Add a missing column in test set with default value equal to 0\nfor c in missing_cols:\n    final_test[c] = 0\n# Ensure the order of column in the test set is in the same order than in train set\nfinal_test = final_test[final_train.columns]","dafe2b3b":"final_train.shape","258c93f5":"final_test.shape","70506d6c":"final_train.columns","535caeaa":" final_test.columns","60d14339":"sns.set(rc={'figure.figsize':(50,50)})\nax = sns.heatmap(final_train.corr(), annot=True)","6ae5df8c":"- The age distribution for survivors and deceased is actually very similar. One notable difference is that, of the survivors, a larger proportion were children. The passengers evidently made an attempt to save children by giving them a place on the life rafts.","e0b9deea":"# Univariate Analysis\n\n- https:\/\/www.analyticsvidhya.com\/blog\/2020\/07\/univariate-analysis-visualization-with-illustrations-in-python\/\n- https:\/\/www.kaggle.com\/residentmario\/univariate-plotting-with-pandas","71091ed9":"**In,Next step,We will design our models.**","ca6abd20":"### Create a model that predicts which passengers survived the Titanic shipwreck","2a43e419":"- The distribution and survival rate between the different categories does not give me much hope.","fb4e7d94":"# 2. Pclass","829babb6":"-There is a clear relationship between Fare and Survived, and I'm guessing that this relationship is similar to that of Class and Survived.","68b490a7":"# SibSp and Parch","19dfa6a8":"Since \"Age\" is (right) skewed, using the mean might give us biased results by filling in ages that are older than desired. To deal with this, we'll use the median to impute the missing values.","25aa2c45":"The Name column as provided cannot be used in the model. However, we might be able to extract some meaningful information from it.","41217089":"# apply the same changes to the test data","35e8e638":"## Objective","49805b28":"# Imputations to Data (Train & Test)","6541ec65":"We dont see much collinearity among the features here . So we can use these features to design our model.","4acecf3f":"- this appears to be useless. Not only do we have 77.10% nulls which will be difficult to impute, but the correlation with Survived is almost zero","7f9664b1":"# 3. Name","9d348eeb":"- If \"Age\" is missing for a given row, I'll impute with 28 (median age).\n- If \"Embarked\" is missing for a given row, I'll impute with \"S\" (the most common boarding port).\n- There are too many missing values for imputation for 'Cabin' .So We will ignore this.","f156175e":"Considering the survival rate of passengers under 16, I'll also include another categorical variable in my dataset: \"Minor\"","a8551796":"# 7. SibSp","397e8ade":"- Class played a critical role in survival, as the survival rate decreased drastically for the lowest class. This variable is both useful and clean, and I will be treating it as a categorical variable.","6801bb7e":"#### When we have two seemingly weak predictors, one thing we can do is combine them to get a stronger predictor. In the case of SibSp and Parch, we can combine the two variables to get a 'family size' metric, which might (and in fact does) prove to be a better predictor than the two original variables.","e3a45855":"## 1. Survived","9079aeae":"# 10. Fare","564dec4a":"- The Ticket column seems to contain unique alphanumeric values, and is thus not very useful on its own.","3fe7a418":"# Exploratory Data Analysis","5fd632e8":"We have 64 % males and 36% females ","c594ccbd":"# 8. Parch","24b20065":"# 4. Sex","2ab0b657":"- \"Women and children first,\" goes the famous saying. Thus, we should expect females to have a higher survival rate than males, and indeed that is the case. We expect this variable to be very useful in our model.","00d77fb6":"-Looking at the relationship between Class and Fare, we do indeed see a clear relationship.","f74c09e5":"According to the Kaggle data dictionary, both SibSp and Parch relate to traveling with family. For simplicity's sake (and to account for possible multicollinearity), I'll combine the effect of these variables into one categorical predictor: whether or not that individual was traveling alone.","6062cd39":"### 6.  'Cabin'","a1c058e7":"- The distribution and survival rate between the different categories does not give me much hope.","8cdd36f6":" ### VISUALIZING UNIVARIATE CONTINUOUS DATA :\n - 1. UNIVARIATE SCATTER PLOT :\n - 2. LINE PLOT (with markers) :\n - 3. STRIP PLOT :\n - 4. SWARM PLOT :\n - 5. HISTOGRAMS :\n - 6. DENSITY PLOTS :\n - 7. RUG PLOTS :\n - 8. BOX PLOTS :\n - 9. distplot() :\n - 10. VIOLIN PLOTS :\n - \n ### VISUALIZING CATEGORICAL VARIABLES :\n - 11. BAR CHART :\n - 12. COUNT PLOT :\n - 13. PIE CHART :\n","e4a4bade":"77% of records are missing, which means that imputing information and using this variable for prediction is probably not wise. We'll ignore this variable in our model.","515cf40e":"- This is a very obvious difference. Clearly being female greatly increased your chances of survival.","8ace16d5":"### here ,if we see,both train and test have difference in number of columns .\n### in final_test, we are missing 'Survived'column ,which is the output column in our train data \n### Along with this ,we have mismatch in columns of Name_Title.\n\n#### We need to sync the columns\n","082a11b2":"### The Challenge\n#####################\n- The sinking of the Titanic is one of the most infamous shipwrecks in history.\n\n- On April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\n- While there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\n- In this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).\n\nhttps:\/\/www.kaggle.com\/c\/titanic","3658a6bb":"## Overview\n- PassengerId is the unique id of the row and it doesn't have any effect on target\n- Survived is the target variable we are trying to predict (0 or 1):\n1 = Survived  \n0 = Not Survived  \n- Pclass (Passenger Class) is the socio-economic status of the passenger and it is a categorical ordinal feature which has 3 unique values (1, 2 or 3):\n1 = Upper Class \n2 = Middle Class  \n3 = Lower Class \n- Name, Sex and Age are self-explanatory\n- SibSp is the total number of the passengers' siblings and spouse\n- Parch is the total number of the passengers' parents and children\n- Ticket is the ticket number of the passenger\n- Fare is the passenger fare\n- Cabin is the cabin number of the passenger\n- Embarked is port of embarkation and it is a categorical feature which has 3 unique values (C, Q or S):\nC = Cherbourg \nQ = Queenstown \nS = Southampton ","9421a9d5":"# categorical variables for Passenger Class (\"Pclass\"), Gender (\"Sex\"), and Port Embarked (\"Embarked\")","ce4ec6a0":"We can see that Death Rate is higher with Mr","e5844c8d":"By far the most passengers boarded in Southhampton, so we'll impute those 2 NaN's with \"S\"","33873fdf":"# 9. Ticket","2ee71911":"#  Missing values","73e56a10":"# 5. Age","516925f1":"### 11. 'Embarked'","5dfb6d09":"# Exploration of Age"}}