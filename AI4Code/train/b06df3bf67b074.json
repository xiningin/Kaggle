{"cell_type":{"0f537f55":"code","8114253c":"code","5e3d497f":"code","62760fec":"code","a0a4c7fa":"code","fde7af4e":"code","d8800cc2":"code","6e2892ea":"code","b3bdceb0":"code","61ce87db":"code","280e9bb9":"code","0bdbd294":"code","a17957c2":"code","7e6ed5b9":"code","85b3e752":"code","b8314287":"code","3daff6b7":"markdown"},"source":{"0f537f55":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport time","8114253c":"data_folder = \"..\/input\/g-research-crypto-forecasting\/\"","5e3d497f":"crypto_df = pd.read_csv(data_folder + 'train.csv')\ncrypto_df.head(10)","62760fec":"crypto_df.describe()","a0a4c7fa":"crypto_df.info(show_counts =True)","fde7af4e":"crypto_df.isna().sum()","d8800cc2":"crypto_df.replace([np.inf, -np.inf], np.nan, inplace=True)\ncrypto_df.dropna(inplace=True)\ncrypto_df.drop_duplicates(inplace=True)","6e2892ea":"display(crypto_df.info(show_counts =True))\ndisplay(crypto_df.isna().sum())\ncrypto_df.describe()","b3bdceb0":"display(crypto_df[crypto_df['VWAP'].isna()])","61ce87db":"asset_details_df = pd.read_csv(data_folder + 'asset_details.csv')\ndisplay(asset_details_df)","280e9bb9":"for i in range (0,14):\n    tmp_df = crypto_df[crypto_df[\"Asset_ID\"]==i].set_index(\"timestamp\") # Asset_ID = 1 for Bitcoin\n    tmp_df_mini = tmp_df.iloc[-200:] # Select recent data rows\n    fig = go.Figure(data=[go.Candlestick(x=tmp_df_mini.index, open=tmp_df_mini['Open'], high=tmp_df_mini['High'], low=tmp_df_mini['Low'], close=tmp_df_mini['Close'])])\n    fig.update_layout(\n        title=asset_details_df[asset_details_df['Asset_ID']==i]['Asset_Name'].values[0]\n    )\n    fig.show()","0bdbd294":"crypto_df[crypto_df[\"Asset_ID\"]==0].head(10)","a17957c2":"crypto_df['date_time'] = crypto_df['timestamp'].map(datetime.fromtimestamp)","7e6ed5b9":"crypto_df[crypto_df[\"Asset_ID\"]==0].head(10)","85b3e752":"for i in range (0,14):\n    tmp_df = crypto_df[crypto_df[\"Asset_ID\"]==i].set_index(\"timestamp\") # Asset_ID = 1 for Bitcoin\n    fig=plt.figure(figsize=(12,8))\n    plt.plot(tmp_df['date_time'], tmp_df['VWAP'])\n    plt.title(asset_details_df[asset_details_df['Asset_ID']==i]['Asset_Name'].values[0])\n    plt.show()\n    plt.figure(figsize=(12,8))\n    plt.plot(tmp_df['date_time'], tmp_df['Target'])\n    plt.show()","b8314287":"# auxiliary function, from datetime to timestamp\ntotimestamp = lambda s: np.int32(time.mktime(datetime.strptime(s, \"%d\/%m\/%Y\").timetuple()))\n\n\n# define function to compute log returns\ndef log_return(series, periods=1):\n    return np.log(series).diff(periods=periods)\n\n\n# create dataframe with returns for all assets\nall_assets_2021 = pd.DataFrame([])\nfor asset_id, asset_name in zip(asset_details_df.Asset_ID, asset_details_df.Asset_Name):\n  asset = crypto_df[crypto_df[\"Asset_ID\"]==asset_id].set_index(\"timestamp\")\n  asset = asset.loc[totimestamp('01\/01\/2021'):totimestamp('01\/05\/2021')]\n  asset = asset.reindex(range(asset.index[0],asset.index[-1]+60,60),method='pad')\n  lret = log_return(asset.Close.fillna(0))[1:]\n  all_assets_2021 = all_assets_2021.join(lret, rsuffix=asset_name, how=\"outer\")\n\nfig=plt.figure(figsize=(12,8))\n\nplt.title(asset_details_df[asset_details_df['Asset_ID']==i]['Asset_Name'].values[0])\nplt.imshow(all_assets_2021.corr());\nplt.yticks(asset_details_df.Asset_ID.values, asset_details_df.Asset_Name.values);\nplt.xticks(asset_details_df.Asset_ID.values, asset_details_df.Asset_Name.values, rotation='vertical');\nplt.colorbar();\nplt.show()\n","3daff6b7":"* **timestamp:** All timestamps are returned as second Unix timestamps (the number of seconds elapsed since 1970-01-01 00:00:00.000 UTC). Timestamps in this dataset are multiple of 60, indicating minute-by-minute data.\n* **Asset_ID:** The asset ID corresponding to one of the crytocurrencies (e.g. Asset_ID = 1 for Bitcoin). The mapping from Asset_ID to crypto asset is contained in asset_details.csv.\n* **Count:** Total number of trades in the time interval (last minute).\n* **Open:** Opening price of the time interval (in USD).\n* **High:** Highest price reached during time interval (in USD).\n* **Low:** Lowest price reached during time interval (in USD).\n* **Close:** Closing price of the time interval (in USD).\n* **Volume:** Quantity of asset bought or sold, displayed in base currency USD.\n* **VWAP:** The average price of the asset over the time interval, weighted by volume. VWAP is an aggregated form of trade data.\n* **Target:** Residual log-returns for the asset over a 15 minute horizon."}}