{"cell_type":{"8b690e8f":"code","d9fdb945":"code","eacf5ff2":"code","d2a109e7":"code","ffa870d4":"code","bc809854":"code","045bb30a":"code","6bb8c2ae":"code","2312ef16":"code","246df72e":"markdown","09363ad2":"markdown","2c73ee12":"markdown","5e40c4ab":"markdown","769613d0":"markdown","38c510e8":"markdown"},"source":{"8b690e8f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import svm","d9fdb945":"data = pd.read_csv('..\/input\/spam-email\/spam.csv')\ndata.head(5)","eacf5ff2":"data.drop_duplicates(inplace = True)\ndata=data.fillna(\" \") # remove null values\ndata.isnull().sum()","d2a109e7":"X = data['Message'].values\ny = data['Category'].values","ffa870d4":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=0)","bc809854":"# Converting String to Integer\ncv = CountVectorizer() \nX_train = cv.fit_transform(X_train)\nX_test = cv.transform(X_test)","045bb30a":"from sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\nprint(\"Training\")\nprint(classifier.score(X_train,y_train))\nprint(\"Test\")\nprint(classifier.score(X_test,y_test))","6bb8c2ae":"#Evaluate the model on the training dataset\n\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\npred = classifier.predict(X_train) # prediction on the training dataset\nprint(classification_report(y_train, pred)) #print out the target variable and predicted values\nprint ()\nprint ('Confusion Matrix: \\n',confusion_matrix(y_train,pred))#\nprint ()\nprint ('Accuracy: ', accuracy_score(y_train, pred))","2312ef16":"#Evaluate the model on the testing dataset\n\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\npred = classifier.predict(X_test) # prediction on the training dataset\nprint(classification_report(y_test, pred)) #print out the target variable and predicted values\nprint ()\nprint ('Confusion Matrix: \\n',confusion_matrix(y_test,pred))# Lets look a the precitcion classes in the classifier\nprint ()\nprint ('Accuracy: ', accuracy_score(y_test, pred))","246df72e":"# Applying SVM algorithm","09363ad2":"# More detail on the test results","2c73ee12":"# Converting text into integer using CountVectorizer()","5e40c4ab":"# Splitting our data into X and y.","769613d0":"# Splitting our data into training and testing.","38c510e8":"# More detail on training the model"}}