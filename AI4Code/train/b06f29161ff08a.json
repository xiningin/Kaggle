{"cell_type":{"7c40b965":"code","ab79127f":"code","5bb86384":"code","5ea0aae6":"code","0a95b0ee":"code","8cf7c12c":"code","d4484820":"code","16f1b64a":"code","904039b5":"code","07299d08":"code","3cb98a87":"code","a9c3333f":"code","091bcb58":"code","e588f0f5":"code","cbf6ce02":"code","d3a74a33":"code","e9a46df1":"code","5c390f96":"code","d70f6ece":"code","18ad1ce7":"code","ec8889cc":"code","55df3757":"code","f0658a8d":"code","3b8b6577":"code","aa69727c":"code","0b8e1f89":"code","0099ebfd":"code","ded4575a":"code","bd311650":"code","1107ff58":"code","13d4eb8b":"code","e3c76177":"code","5bbf1240":"code","149d6bc8":"code","26bb3d8b":"code","e7e3ab16":"markdown","b66720c4":"markdown","6cd0e813":"markdown","603874d9":"markdown","3b295621":"markdown","270e65ee":"markdown","24d279a7":"markdown","4586845c":"markdown"},"source":{"7c40b965":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n%matplotlib inline","ab79127f":"train= pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ndf = pd.concat([train,test])","5bb86384":"df.head()","5ea0aae6":"df.shape","0a95b0ee":"train.isnull()","8cf7c12c":"sb.heatmap(train.isnull(),yticklabels=False,cmap='YlGnBu')","d4484820":"sb.set_style('whitegrid')\nsb.countplot(x='Survived',data=train)","16f1b64a":"sb.set_style('whitegrid')\nsb.countplot(x='Survived',hue='Sex',data=train)","904039b5":"sb.set_style('whitegrid')\nsb.countplot(x='Survived',hue ='Pclass',data=train)","07299d08":"sb.displot(train['Age'].dropna(),kde=0,color='y',bins=40)","3cb98a87":"sb.countplot(x='SibSp',data=train)","a9c3333f":"sb.boxplot(x='Pclass',y='Age',data=train)","091bcb58":"def impute_age_train(cols):\n    Age=cols[0]\n    Pclass=cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else :\n            return 24\n    else:\n        return Age","e588f0f5":"sb.boxplot(x='Pclass',y='Age',data=test)","cbf6ce02":"def impute_age_test(cols):\n    Age=cols[0]\n    Pclass=cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 42\n        elif Pclass == 2:\n            return 27\n        else :\n            return 25\n    else:\n        return Age","d3a74a33":"train['Age']=train[['Age','Pclass']].apply(impute_age_train,axis=1)\ntest['Age']=test[['Age','Pclass']].apply(impute_age_test,axis=1)","e9a46df1":"sb.heatmap(train.isnull(),yticklabels=False,cmap='viridis')","5c390f96":"train.drop('Cabin',axis=1,inplace=True)\ntest.drop('Cabin',axis=1,inplace=True)","d70f6ece":"sb.heatmap(train.isnull(),yticklabels=False,cmap='viridis')","18ad1ce7":"Embarked = pd.get_dummies(train['Embarked'],drop_first=True)\nEmbarked_test = pd.get_dummies(test['Embarked'],drop_first=True)\nEmbarked.head()","ec8889cc":"Sex=pd.get_dummies(train['Sex'],drop_first=True)\nSex_test=pd.get_dummies(test['Sex'],drop_first=True)\nSex.head()","55df3757":"train.head()","f0658a8d":"train.drop(['Sex','Name','Embarked','Ticket'],axis=1,inplace=True)\ntest.drop(['Sex','Name','Embarked','Ticket'],axis=1,inplace=True)","3b8b6577":"train.head()","aa69727c":"test.head()","0b8e1f89":"train = pd.concat([train,Sex,Embarked],axis=1)\ntest = pd.concat([test,Sex_test,Embarked_test],axis=1)\ntrain.head()","0099ebfd":"train.drop('Survived',axis=1).head()","ded4575a":"train['Survived'].head()","bd311650":"x_train = train.drop('Fare',axis=1)\nx_train=x_train.drop('Survived',axis=1)\ny_train = train['Survived']\nx_train","1107ff58":"x_test = test.drop('Fare',axis=1)\nx_test","13d4eb8b":"from sklearn.ensemble import RandomForestClassifier\nrandom_forest = RandomForestClassifier()\nrandom_forest.fit(x_train,y_train)","e3c76177":"prediction = random_forest.predict(x_test)","5bbf1240":"prediction = np.array(prediction)\nprediction","149d6bc8":"random_forest.score(x_train,y_train)","26bb3d8b":"Submission = pd.DataFrame()\nSubmission['PassengerId']= test['PassengerId']\nSubmission['Survived']=prediction\n\nSubmission.to_csv('submit.csv',index = False)","e7e3ab16":"# Import Libraries","b66720c4":"# Cleaning","6cd0e813":"# 18BCE1328","603874d9":"# Dropping categorical features","3b295621":"# Analysis and Visualization","270e65ee":"# **Evaluation**","24d279a7":"# Separating dataset","4586845c":"# **Training and Prediction\u00b6**"}}