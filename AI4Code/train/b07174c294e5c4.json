{"cell_type":{"f65ef1f6":"code","6aba0e13":"code","a8effb54":"code","1a2bebe9":"code","8451bc9b":"code","ae2423ae":"code","657b364a":"code","a16c86c4":"code","16a57c41":"code","841c7f02":"code","34e8435a":"code","81288923":"code","58c282b0":"code","29c7b1ea":"code","d28fc63e":"code","870a39f6":"code","f21f7aeb":"code","32e5ffc3":"code","c5ea0390":"code","fedf76f1":"code","c677da3e":"code","74a6421d":"code","b5264414":"code","0911343c":"code","61e866fe":"code","41b260bb":"code","7e6f5e88":"code","a71d235a":"code","e9bde4ce":"code","87696086":"code","d4643288":"code","4b93e3d8":"code","e3aadae1":"code","2878fff2":"code","0472bc3d":"code","e4fde7cf":"code","d4824bab":"code","2e8885b1":"code","ceea24f3":"code","6fa714b4":"code","fd51f348":"code","4ca3b744":"code","6db09ce3":"code","1e731a5b":"code","ba844268":"code","3d4f95f7":"code","75831544":"code","cd1dbc3f":"code","29a1f477":"markdown","fa9448c3":"markdown","67764f08":"markdown","b3ae1682":"markdown"},"source":{"f65ef1f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom subprocess import check_output\nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.layers.recurrent import LSTM\nfrom keras.models import Sequential\nfrom sklearn.model_selection import  train_test_split\nimport time #helper libraries\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\nfrom numpy import newaxis\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6aba0e13":"train = pd.read_csv('..\/input\/daily-climate-time-series-data\/DailyDelhiClimateTrain.csv')\ntrain.head()","a8effb54":"test = pd.read_csv('..\/input\/daily-climate-time-series-data\/DailyDelhiClimateTest.csv')\ntest.head()","1a2bebe9":"train.isna().sum()","8451bc9b":"test.isna().sum()","ae2423ae":"train.describe()","657b364a":"test.describe()","a16c86c4":"train.dtypes","16a57c41":"test.dtypes","841c7f02":"print(train.shape)\nprint(test.shape)","34e8435a":"sns.boxplot(x=train['meantemp'])","81288923":"sns.boxplot(x=train['humidity'])","58c282b0":"sns.boxplot(x=train['wind_speed'])","29c7b1ea":"sns.boxplot(x=train['meanpressure'])","d28fc63e":"plt.figure(figsize=(100,80))\nfig, axs = plt.subplots(2, 2,figsize=(20,20))\naxs[0, 0].plot(train['date'],train['meantemp'])\naxs[0, 0].set_title('Mean temp')\naxs[0, 1].plot(train['date'],train['humidity'], 'tab:orange')\naxs[0, 1].set_title('Humidity')\naxs[1, 0].plot(train['date'],train['wind_speed'], 'tab:green')\naxs[1, 0].set_title('Wind Speed')\naxs[1, 1].plot(train['date'],train['meanpressure'], 'tab:red')\naxs[1, 1].set_title('MeanPressure')","870a39f6":"# Plotting a scatter plot\nfig, ax = plt.subplots(figsize=(10,6))\nax.scatter(train['date'], train['meantemp'])\nax.set_xlabel('Date')\nax.set_ylabel('Mean Temperature')\nplt.show()","f21f7aeb":"# Plotting a scatter plot\nfig, ax = plt.subplots(figsize=(10,6))\nax.scatter(train['date'], train['humidity'])\nax.set_xlabel('Date')\nax.set_ylabel('Humidity')\nplt.show()","32e5ffc3":"# Plotting a scatter plot\nfig, ax = plt.subplots(figsize=(10,6))\nax.scatter(train['date'], train['wind_speed'])\nax.set_xlabel('Date')\nax.set_ylabel('Wind Speed')\nplt.show()","c5ea0390":"# Plotting a scatter plot\nfig, ax = plt.subplots(figsize=(10,6))\nax.scatter(train['date'], train['meanpressure'])\nax.set_xlabel('Date')\nax.set_ylabel('Mean Pressure')\nplt.show()","fedf76f1":"## MEAN TEMP \ntemp_train = train.iloc[:,1:2]\ntemp_test = test.iloc[:,1:2]","c677da3e":"#Scaling the values between 0 to 1\nfrom sklearn.preprocessing import MinMaxScaler\nss= MinMaxScaler(feature_range=(0,1))\ntemp_train= ss.fit_transform(temp_train)\ntemp_test= ss.fit_transform(temp_test)","74a6421d":"def create_dataset(dataset, look_back=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-look_back-1):\n        a = dataset[i:(i+look_back), 0]\n        dataX.append(a)\n        dataY.append(dataset[i + look_back, 0])\n    return np.array(dataX), np.array(dataY)","b5264414":"look_back = 1\ntrainX, trainY = create_dataset(temp_train, look_back)\ntestX, testY = create_dataset(temp_test, look_back)","0911343c":"# reshape input to be [samples, time steps, features]\ntrainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1],1))\ntestX = np.reshape(testX, (testX.shape[0], testX.shape[1],1))","61e866fe":"# create and fit the LSTM network\nmodel_temp = Sequential()\n#Adding the first LSTM layer and some Dropout regularisation\nmodel_temp.add(LSTM(units = 100, return_sequences = True, input_shape = (trainX.shape[1], 1)))\nmodel_temp.add(Dropout(0.2))\n# Adding a second LSTM layer and some Dropout regularisation\nmodel_temp.add(LSTM(units = 100, return_sequences = True))\nmodel_temp.add(Dropout(0.2))\n# Adding a third LSTM layer and some Dropout regularisation\nmodel_temp.add(LSTM(units = 100, return_sequences = True))\nmodel_temp.add(Dropout(0.2))\n# Adding a fourth LSTM layer and some Dropout regularisation\nmodel_temp.add(LSTM(units = 50))\nmodel_temp.add(Dropout(0.2))\n# Adding the output layer\nmodel_temp.add(Dense(units = 1))\n\n# Compiling the RNN\nmodel_temp.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics=['accuracy'])\n\n# Fitting the RNN to the Training set\nmodel_temp.fit(trainX, trainY, epochs = 100, batch_size = 32)","41b260bb":"# PREDICTION\n\nprediction = model_temp.predict(testX)\nprediction = ss.inverse_transform(prediction)\ntemp_test = ss.inverse_transform(temp_test)","7e6f5e88":"plt.figure(figsize=(20,10))\nplt.plot(temp_test, color = 'black', label = 'Delhi Mean Temperature')\nplt.plot(prediction, color = 'green', label = 'Predicted Delhi Mean Temperature')\nplt.title('Delhi Mean Temp Prediction')\nplt.xlabel('Time')\nplt.ylabel('Mean Temp')\nplt.legend()\nplt.show()","a71d235a":"# Humidity\n\nhumid_train = train.iloc[:,2:3]\nhumid_test = test.iloc[:,2:3]","e9bde4ce":"#Scaling the values between 0 to 1\n\nss= MinMaxScaler(feature_range=(0,1))\nhumid_train= ss.fit_transform(humid_train)\nhumid_test= ss.fit_transform(humid_test)","87696086":"look_back = 1\ntrainX, trainY = create_dataset(humid_train, look_back)\ntestX, testY = create_dataset(humid_test, look_back)","d4643288":"# reshape input to be [samples, time steps, features]\ntrainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1],1))\ntestX = np.reshape(testX, (testX.shape[0], testX.shape[1],1))","4b93e3d8":"# create and fit the LSTM network\nmodel_humid = Sequential()\n#Adding the first LSTM layer and some Dropout regularisation\nmodel_humid.add(LSTM(units = 100, return_sequences = True, input_shape = (trainX.shape[1], 1)))\nmodel_humid.add(Dropout(0.2))\n# Adding a second LSTM layer and some Dropout regularisation\nmodel_humid.add(LSTM(units = 100, return_sequences = True))\nmodel_humid.add(Dropout(0.2))\n# Adding a third LSTM layer and some Dropout regularisation\nmodel_humid.add(LSTM(units = 100, return_sequences = True))\nmodel_humid.add(Dropout(0.2))\n# Adding a fourth LSTM layer and some Dropout regularisation\nmodel_humid.add(LSTM(units = 50))\nmodel_humid.add(Dropout(0.2))\n# Adding the output layer\nmodel_humid.add(Dense(units = 1))\n\n# Compiling the RNN\nmodel_humid.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics=['accuracy'])\n\n# Fitting the RNN to the Training set\nmodel_humid.fit(trainX, trainY, epochs = 100, batch_size = 32)","e3aadae1":"# PREDICTION\n\nprediction = model_temp.predict(testX)\nprediction = ss.inverse_transform(prediction)\nhumid_test = ss.inverse_transform(humid_test)","2878fff2":"plt.figure(figsize=(20,10))\nplt.plot(humid_test, color = 'black', label = 'Delhi Humidity')\nplt.plot(prediction, color = 'green', label = 'Predicted Delhi Humidity')\nplt.title('Delhi Humidity Prediction')\nplt.xlabel('Time')\nplt.ylabel('Humidity')\nplt.legend()\nplt.show()","0472bc3d":"## Wind speed column \nwind_train = train.iloc[:,3:4]\nwind_test = test.iloc[:,3:4]","e4fde7cf":"#Scaling the values between 0 to 1\n\nwind_train= ss.fit_transform(wind_train)\nwind_test= ss.fit_transform(wind_test)","d4824bab":"look_back = 1\ntrainX, trainY = create_dataset(wind_train, look_back)\ntestX, testY = create_dataset(wind_test, look_back)","2e8885b1":"# reshape input to be [samples, time steps, features]\ntrainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1],1))\ntestX = np.reshape(testX, (testX.shape[0], testX.shape[1],1))","ceea24f3":"# create and fit the LSTM network\nmodel_wind = Sequential()\n#Adding the first LSTM layer and some Dropout regularisation\nmodel_wind.add(LSTM(units = 100, return_sequences = True, input_shape = (trainX.shape[1], 1)))\nmodel_wind.add(Dropout(0.2))\n# Adding a second LSTM layer and some Dropout regularisation\nmodel_wind.add(LSTM(units = 100, return_sequences = True))\nmodel_wind.add(Dropout(0.2))\n# Adding a third LSTM layer and some Dropout regularisation\nmodel_wind.add(LSTM(units = 100, return_sequences = True))\nmodel_wind.add(Dropout(0.2))\n# Adding a fourth LSTM layer and some Dropout regularisation\nmodel_wind.add(LSTM(units = 50))\nmodel_wind.add(Dropout(0.2))\n# Adding the output layer\nmodel_wind.add(Dense(units = 1))\n\n# Compiling the RNN\nmodel_wind.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics=['accuracy'])\n\n# Fitting the RNN to the Training set\nmodel_wind.fit(trainX, trainY, epochs = 100, batch_size = 32)","6fa714b4":"# PREDICTION\n\nprediction = model_temp.predict(testX)\nprediction = ss.inverse_transform(prediction)\nwind_test = ss.inverse_transform(wind_test)","fd51f348":"plt.figure(figsize=(20,10))\nplt.plot(wind_test, color = 'black', label = 'Delhi Wind Speed')\nplt.plot(prediction, color = 'green', label = 'Predicted Delhi Wind Speed')\nplt.title('Delhi Wind Speed Prediction')\nplt.xlabel('Time')\nplt.ylabel('Wind Speed')\nplt.legend()\nplt.show()","4ca3b744":"## Mean Pressure column \npressure_train = train.iloc[:,4:]\npressure_test = test.iloc[:,4:]","6db09ce3":"#Scaling the values between 0 to 1\n\npressure_train= ss.fit_transform(pressure_train)\npressure_test= ss.fit_transform(pressure_test)","1e731a5b":"trainX, trainY = create_dataset(pressure_train, look_back)\ntestX, testY = create_dataset(pressure_test, look_back)","ba844268":"# reshape input to be [samples, time steps, features]\ntrainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1],1))\ntestX = np.reshape(testX, (testX.shape[0], testX.shape[1],1))","3d4f95f7":"# create and fit the LSTM network\nmodel_pressure = Sequential()\n#Adding the first LSTM layer and some Dropout regularisation\nmodel_pressure.add(LSTM(units = 100, return_sequences = True, input_shape = (trainX.shape[1], 1)))\nmodel_pressure.add(Dropout(0.2))\n# Adding a second LSTM layer and some Dropout regularisation\nmodel_pressure.add(LSTM(units = 100, return_sequences = True))\nmodel_pressure.add(Dropout(0.2))\n# Adding a third LSTM layer and some Dropout regularisation\nmodel_pressure.add(LSTM(units = 100, return_sequences = True))\nmodel_pressure.add(Dropout(0.2))\n# Adding a fourth LSTM layer and some Dropout regularisation\nmodel_pressure.add(LSTM(units = 50))\nmodel_pressure.add(Dropout(0.2))\n# Adding the output layer\nmodel_pressure.add(Dense(units = 1))\n\n# Compiling the RNN\nmodel_pressure.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics=['accuracy'])\n\n# Fitting the RNN to the Training set\nmodel_pressure.fit(trainX, trainY, epochs = 100, batch_size = 32)","75831544":"# PREDICTION\n\nprediction = model_temp.predict(testX)\nprediction = ss.inverse_transform(prediction)\npressure_test = ss.inverse_transform(pressure_test)","cd1dbc3f":"plt.figure(figsize=(20,10))\nplt.plot(pressure_test, color = 'black', label = 'Delhi Mean Pressure')\nplt.plot(prediction, color = 'green', label = 'Predicted Delhi Mean Pressure')\nplt.title('Delhi Mean Pressure Prediction')\nplt.xlabel('Time')\nplt.ylabel('Mean Pressure')\nplt.legend()\nplt.show()","29a1f477":"**Predicting Humidity of Delhi**","fa9448c3":"**Predicting Mean Pressure of Delhi**","67764f08":"**Predicting Mean Temperature of Delhi**","b3ae1682":"**Predicting Delhi Wind Speed**"}}