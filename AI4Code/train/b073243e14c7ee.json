{"cell_type":{"841cd989":"code","d2010d94":"code","0d894239":"code","09b0849a":"code","e226cf5a":"code","a89ea73a":"code","e104c4f4":"markdown","445708f4":"markdown"},"source":{"841cd989":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n#import sys\n#!{sys.executable} -m pip install csvvalidator\n\n# Number of inspections to show.  By default change the latest 100 inspections\nMAX_RECORDS = 100\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\n\ndata = pd.read_csv(r'..\/input\/restaurant-scores-lives-standard.csv', parse_dates=['inspection_date'])\n\n# Discard rows with blank columns (NaN values)\ndata = data.dropna()\n\n# Sort data by inspection date\ndata = data.sort_values(by=['inspection_date'])\n\n#Troubleshooting lines\n#print(os.listdir(\"..\/input\"))\n#print(\"Fields: \" )\n#print(data.columns.values)\n\n# Use the last 100 inspections\n#data.tail(MAX_RECORDS)\n\n","d2010d94":"import folium\n\nSF_COORDINATES = (37.76, -122.45)\n\n# create empty map zoomed in on San Francisco\nmap = folium.Map(location=SF_COORDINATES, zoom_start=12) \n\n# add a marker for every record in the filtered data, use a clustered view\nfor each in data[0:MAX_RECORDS].iterrows():\n    folium.Marker([each[1][\"business_latitude\"],\n                   each[1][\"business_longitude\"]],\n                  popup=each[1][\"business_name\"] + \" Violation: \" \n                  + each[1][\"violation_description\"]).add_to(map)\n    \ndisplay(map)","0d894239":"#print(sf_restaurants_data['inspection_date'])\ndata = data.tail(MAX_RECORDS)\n\ndata = data.rename(columns={'inspection_date': 'Date'})\ndata.columns\n\ndata['Date'] = pd.to_datetime(data['Date'], format = \"%Y-%m-%d\")\n\n# count of meets per month\nmeets_by_month = data['Date'].groupby([data.Date.dt.year, data.Date.dt.month, data.Date.dt.day]).agg('count') \n\n# convert to dataframe\nmeets_by_month = meets_by_month.to_frame()\n\n# move date month from index to column\nmeets_by_month['date'] = meets_by_month.index\n\n# rename column\nmeets_by_month = meets_by_month.rename(columns={meets_by_month.columns[0]:\"meets\"})\n\n# re-parse dates\nmeets_by_month['date'] = pd.to_datetime(meets_by_month['date'], format=\"(%Y, %m, %d)\")\n\n# remove index\nmeets_by_month = meets_by_month.reset_index(drop=True)\n\n# get month of meet\nmeets_by_month['month'] = meets_by_month.date.dt.month\n\n\n\n","09b0849a":"# import plotly\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# these two lines are what allow your code to show up in a notebook!\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\n\n# sepcify that we want a scatter plot with, with date on the x axis and meet on the y axis\ndata1 = [go.Bar(x=meets_by_month.date, y=meets_by_month.meets)]\n\n# specify the layout of our figure\nlayout = dict(title = \"Number Inspections per Day\",\n              xaxis= dict(title= 'Date',ticklen= 5,zeroline= False))\n\n# create and show our figure\nfig = dict(data = data1, layout = layout)\niplot(fig)","e226cf5a":"data = pd.read_csv(r'..\/input\/restaurant-scores-lives-standard.csv')\n\n# Discard rows with blank columns (NaN values)\ndata = data.dropna()\n#print(type(data))\n\ndata = data.tail(MAX_RECORDS)\n#print(data.columns)\n\n#print(data['risk_category'])\n\nvalues_counts = data['risk_category'].value_counts()\nlabels_risk_categories = list(data['risk_category'].value_counts().index)\n              \n#print(values_counts) \n#print(labels_risk_categories)              \n","a89ea73a":"\n# sepcify that we want a scatter plot with, with date on the x axis and meet on the y axis\ndata1 = [go.Pie(labels=labels_risk_categories, values=values_counts)]\n\n# specify the layout of our figure\nlayout = dict(title = \"Inspections Risk Categories\")\n\n# create and show our figure\nfig = dict(data = data1, layout = layout)\niplot(fig)","e104c4f4":"**San Francisco restaurants violations by location**","445708f4":"This dashboard displays the latest 100 inspections reported by the city of San Francisco, California in this [data set](https:\/\/www.kaggle.com\/san-francisco\/sf-restaurant-scores-lives-standard).  There is a a map with the location of the restaurants with violations, a chart for the inspection per day and pie chart for the violations risk categories.  This work was done during the [December 2018 Kaggle's Dashboard training](https:\/\/www.kaggle.com\/rtatman\/dashboarding-with-notebooks-day-1?utm_medium=email&utm_source=intercom&utm_campaign=dashboarding-event).  It is hosted online by [PythonAnywhere](https:\/\/www.pythonanywhere.com) free cloud service.  The page is updated daily at 00:00:00 UTC time (4:00 PM PST).  The interactive graphs were done with [Plotly](https:\/\/plot.ly\/), while the interactive map was done with [Folium](https:\/\/github.com\/python-visualization\/folium)"}}