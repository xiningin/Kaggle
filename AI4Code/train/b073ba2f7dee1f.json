{"cell_type":{"9d553161":"code","00a94ee8":"code","5686c8c8":"code","cd0108f4":"code","bc1badcd":"code","486b5c9a":"code","3422929b":"code","8dde3a58":"code","3f82cf9d":"code","a45591a4":"code","635c719d":"code","044f8365":"code","74c70df5":"code","f026724b":"code","84f44dc3":"code","5d2c288a":"code","78c8f1ff":"code","85074202":"code","11f33f82":"code","4dff3474":"code","f39d75df":"code","8e0f82a8":"code","3baae195":"code","8c931b26":"markdown","e6cef79a":"markdown","dfc65441":"markdown","2667568a":"markdown","2fd241f6":"markdown","c62e28f0":"markdown","2b0a63a9":"markdown","8f0ef626":"markdown","4587f324":"markdown"},"source":{"9d553161":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nimport keras\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nimport plotly.express as px\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_log_error,mean_squared_error, r2_score,mean_absolute_error\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00a94ee8":"df = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf.head()","5686c8c8":"df.describe()","cd0108f4":"df.info()","bc1badcd":"df.isna().sum()","486b5c9a":"co = df.corr()\nco.sort_values(by=[\"DEATH_EVENT\"],ascending=False).iloc[0].sort_values(ascending=False)","3422929b":"corr = df.corr()\nax, fig = plt.subplots(figsize=(15,15))\nsns.heatmap(corr, vmin=-1, cmap='coolwarm', annot=True)\nplt.show()","8dde3a58":"sns.catplot(x=\"sex\",y=\"age\", hue=\"DEATH_EVENT\", kind=\"bar\", data=df)","3f82cf9d":"sns.catplot(x=\"sex\",y=\"age\", hue=\"smoking\", kind=\"bar\", data=df)","a45591a4":"sns.catplot(x=\"sex\",y=\"age\", hue=\"high_blood_pressure\", kind=\"bar\", data=df)","635c719d":"sns.catplot(x=\"sex\",y=\"age\", hue=\"diabetes\", kind=\"bar\", data=df)","044f8365":"ds = df['anaemia'].value_counts().reset_index()\nds.columns = ['anaemia', 'count']\n\nWIDTH = 500\nHEIGHT = 500\n\nfig = px.pie(\n    ds, \n    values='count', \n    names=\"anaemia\", \n    title='Anaemia bar chart', \n    width=WIDTH, \n    height=HEIGHT\n)\n\nfig.show()","74c70df5":"plt.rcParams['figure.figsize']=20,10 \nsns.set_style(\"darkgrid\")\n\nx = df.iloc[:, :-1]\ny = df.iloc[:,-1]\n\nfrom sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(x,y)\nprint(model.feature_importances_) \nfeat_importances = pd.Series(model.feature_importances_, index=x.columns)\nfeat_importances.nlargest(12).plot(kind='barh')\nplt.show()","f026724b":"X = df[['age','ejection_fraction', 'serum_creatinine', 'serum_sodium', 'time']]\nY = df['DEATH_EVENT']","84f44dc3":"X_train,X_test,Y_train,Y_test=train_test_split(X,Y,random_state=2,test_size=.25)","5d2c288a":"scale=StandardScaler()\nX_train_scale=scale.fit_transform(X_train)\nX_test_scale=scale.transform(X_test)","78c8f1ff":"\nmodel = LogisticRegression()\n\n# fit the model with the training data\nmodel.fit(X_train_scale,Y_train)\n\n# coefficeints of the trained model\nprint('Coefficient of model :', model.coef_)\nprint('                             ')\n\n# intercept of the model\nprint('Intercept of model',model.intercept_)\nprint('                             ')\n# predict the target on the test dataset\npredict_test = model.predict(X_test_scale)\nprint('Target on test data',predict_test) \nprint('                             ')\n# Accuracy Score on test dataset\naccuracy_test = accuracy_score(Y_test,predict_test)\nprint('accuracy_score on test dataset : ', accuracy_test)","85074202":"model = DecisionTreeClassifier(max_depth=3)\n\n# fit the model with the training data\nmodel.fit(X_train_scale,Y_train)\n\n# depth of the decision tree\nprint('Depth of the Decision Tree :', model.get_depth())\nprint('                             ')\n# predict the target on the test dataset\npredict_test = model.predict(X_test_scale)\nprint('Target on test data',predict_test) \nprint('                             ')\n# Accuracy Score on test dataset\naccuracy_test = accuracy_score(Y_test,predict_test)\nprint('accuracy_score on test dataset : ', accuracy_test)","11f33f82":"model = RandomForestClassifier(max_depth=3)\n\n# fit the model with the training data\nmodel.fit(X_train_scale,Y_train)\n\n# predict the target on the test dataset\npredict_test = model.predict(X_test_scale)\nprint('Target on test data',predict_test) \nprint('                             ')\n\n# Accuracy Score on test dataset\naccuracy_test = accuracy_score(Y_test,predict_test)\nprint('accuracy_score on test dataset : ', accuracy_test)","4dff3474":"model = GradientBoostingClassifier(n_estimators=100,max_depth=3)\n\n# fit the model with the training data\nmodel.fit(X_train_scale,Y_train)\n\n# predict the target on the test dataset\npredict_test = model.predict(X_test_scale)\nprint('\\nTarget on test data',predict_test) \n\n# Accuracy Score on test dataset\nprint('                                  ')\naccuracy_test = accuracy_score(Y_test,predict_test)\nprint('\\naccuracy_score on test dataset : ', accuracy_test)","f39d75df":"model = XGBClassifier(max_depth=5)\n\n# fit the model with the training data\nmodel.fit(X_train_scale,Y_train)\n\n# predict the target on the test dataset\npredict_test = model.predict(X_test_scale)\nprint('\\nTarget on test data',predict_test) \n\n# Accuracy Score on test dataset\naccuracy_test = accuracy_score(Y_test,predict_test)\nprint('                                          ')\nprint('\\naccuracy_score on test dataset : ', accuracy_test)","8e0f82a8":"model = SVC(kernel='linear')\n\n# fit the model with the training data\nmodel.fit(X_train_scale,Y_train)\n\n# predict the target on the test dataset\npredict_test = model.predict(X_test_scale)\nprint('Target on test data',predict_test) \n\n# Accuracy Score on test dataset\naccuracy_test = accuracy_score(Y_test,predict_test)\nprint('                            ')\nprint('accuracy_score on test dataset : ', accuracy_test)","3baae195":"model = GaussianNB()\n\n# fit the model with the training data\nmodel.fit(X_train_scale,Y_train)\n\n# predict the target on the test dataset\npredict_test = model.predict(X_test_scale)\nprint('Target on test data',predict_test) \n\n# Accuracy Score on test dataset\nprint('                       ')\naccuracy_test = accuracy_score(Y_test,predict_test)\nprint('accuracy_score on test dataset : ', accuracy_test)","8c931b26":"**LOGISTIC REGRESSION**","e6cef79a":"**DECISION TREE**","dfc65441":"FEATURE SELECTION","2667568a":"**ML ALGOS**","2fd241f6":"**SVM**","c62e28f0":"NAIVE BAYES","2b0a63a9":"**GRADIENT BOOSTING**","8f0ef626":"**RANDOM FOREST**","4587f324":"**XGBOOST**"}}