{"cell_type":{"43895939":"code","369a5c3d":"code","d0245d24":"code","051327a6":"code","dae2c0e5":"code","83154a49":"code","e94ae871":"code","d34fea48":"code","2d8d9337":"code","4b08e556":"code","68cc30b6":"code","b46a5009":"code","27e3dd07":"code","0ec4555e":"code","ed0474a4":"code","60af0b7b":"code","da63d501":"code","b35e9d6f":"code","e63a01c6":"code","5e6fbeec":"code","76e5583c":"code","c0a90740":"code","6d6225e0":"code","0c38bddb":"code","7f57aa1f":"code","60d4adc5":"code","b3ece673":"code","c328b407":"code","f5f97a67":"code","e8619d1b":"code","c8c1fbb6":"code","2c536d5f":"code","a72301bd":"code","51d748f1":"code","d93dabe0":"code","93f81cbe":"code","591255b1":"code","0ee4b651":"code","3e55d089":"code","28baa32a":"code","6d76f070":"code","4ee13c93":"code","b28eccc1":"code","0ff23bf7":"code","ef3b1e09":"code","6481d577":"code","295a580b":"markdown","07f3aa0f":"markdown","041169ab":"markdown","e9ccb359":"markdown","bc49ea80":"markdown","8c21ce4e":"markdown","248deb78":"markdown"},"source":{"43895939":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","369a5c3d":"# READ A COMMA-SEPARETED VALUES (CSV)FILE INTO PANDAS DATA FRAME.\ntrain=pd.read_csv(r\"..\/input\/titanic\/train.csv\")\ntrain.head(10)","d0245d24":"test=pd.read_csv(r\"..\/input\/titanic\/test.csv\")\ntest.head(10)","051327a6":"# COUNT THE NUMBER OF ROWS AND COLUMNS IN THE TRAIN DATASET AND TEST DATASET.\nprint(train.shape)\nprint(test.shape)\n","dae2c0e5":"#LOOK AT THE COLUMNS OF TRAIN DATASET AND TEST DATASET.\nprint(train.columns)\nprint(test.columns)","83154a49":"train.isnull().sum()","e94ae871":"# GET THE COUNT OF THE NUMBER OF SURVIOURS,SEX,EMBARKED,SIBSP,TICKET.\nprint(train[\"Survived\"].value_counts())\nprint(train[\"Sex\"].value_counts())\nprint(train[\"Embarked\"].value_counts())\nprint(train[\"SibSp\"].value_counts())\nprint(train[\"Ticket\"].value_counts())","d34fea48":"test.isnull().sum()","2d8d9337":"sns.countplot(x=\"Survived\",data=train)","4b08e556":"sns.countplot(x=\"Sex\",data=train)","68cc30b6":"#LOOK AT THE SURVIVAL RATE BY SEX.\ntrain.groupby('Sex')[['Survived']].mean()","b46a5009":"#LOOK AT SURVIVAL RATE BY SEX AND PCLASS\ntrain.pivot_table('Survived',index='Sex',columns='Pclass')","27e3dd07":"#LOOK AT SURVIVAL RATE BY SEX AND PCLASS VISUALLY.\ntrain.pivot_table('Survived',index='Sex',columns='Pclass').plot()","0ec4555e":"#PLOT THE SURVIVAL RATE OF EACH CLASS\nsns.barplot(x='Pclass',y='Survived',data=train)","ed0474a4":"#LOOK AT SURVIVAL RATE BY SEX ,AGE AND PCLASS.\nage=pd.cut(train['Age'],[0,18,80])\ntrain.pivot_table('Survived',['Sex','Age'],'Pclass')","60af0b7b":"#COUNT THE EMPTY VALUES IN EACH COLUMN\ntrain.isna().sum()","da63d501":"#LOOK AT ALL OF THE VALUES IN EACH COLUMN AND GET A COUNT.\nfor val in train:\n    print(train[val].value_counts())\n    print()","b35e9d6f":"train.dtypes","e63a01c6":"#PRINT THE UNIQUE VALUES IN THE COLUMNS\nprint(train['Sex'].unique())\nprint(train['Embarked'].unique())","5e6fbeec":"title=set()\nfor name in train[\"Name\"]:\n    title.add(name.split(\",\")[1].split(\".\")[0].strip())\nprint(title)    ","76e5583c":"titles={'Sir':\"officer\",'Mme':\"normald\",'Mr':\"norm\",'Master':\"normald\",'Don':\"officer\",'Miss':\"normald\",'Lady':\"normald\",'Mlle':\"normald\",'Col':\"officer\",'Ms':\"normald\",'the Countess':\"royal\",'Mrs':\"normald\",'Major':\"officer\",'Capt':\"officer\",'Dr':\"officer\",'Rev':\"officer\",'Jonkheer':\"royal\"}\n","c0a90740":"train[\"Name\"]=train[\"Name\"].map(lambda name:name.split(\",\")[1].split(\".\")[0].strip())\ntrain[\"Name\"]=train.Name.map(titles)\ntrain.head(10)","6d6225e0":"#DROP THE UNWANTED FIELDS.\ndf=train.drop([\"Ticket\",\"Cabin\",\"PassengerId\"],axis=1)\ndf.head()","0c38bddb":"#CONVERTING THE STRING VALUES(CATEGORICAL VALUES) TO INTEGER\ndf.Sex=df.Sex.map({\"female\":0,\"male\":\"1\"})\ndf.Embarked=df.Embarked.map({\"S\":0,\"C\":\"1\",\"Q\":2})\ndf.Name=df.Name.map({\"royal\":0,\"normald\":1,\"officer\":2,\"norm\":3})\ndf.head()","7f57aa1f":"df.isnull().sum()","60d4adc5":"#REPLACING ALL THE NULL VALUES.\ndf.fillna(df.Age.mean(),inplace=True)\nround(df[\"Age\"],1)\ndf.head(10)","b3ece673":"df.isnull().sum()","c328b407":"#GET SOME STATISTICS.\ndf.describe()","f5f97a67":"#THE STANDARDSCALER ASSUMES DATA IS NORMALLYDISTRIBUTED WITHIN EACH FEATURE AND SCALES THEM SUCH \n#THAT THE DISTRIBUTION CENTERED AROUND 0, WITH A STANDARD DEVIATION BY 1.\n\nfrom sklearn.preprocessing import StandardScaler\ndf[\"Age\"]=round((df.Age-df.Age.mean()\/df.Age.std()))\ndf[\"Fare\"]=round((df.Fare-df.Fare.mean()\/df.Fare.std()))\n","e8619d1b":"df.head()","c8c1fbb6":"df.head()","2c536d5f":"from sklearn.model_selection import train_test_split","a72301bd":"x_train,x_test,y_train,y_test=train_test_split(\n     df.drop([\"Survived\"],axis=1),\n     df.Survived,test_size=0.2,\n     random_state=0,\n     stratify=df.Survived)","51d748f1":"def models(x_train,y_train):\n    # USE DECISION TREE\n    from sklearn.tree import DecisionTreeClassifier\n    tree= DecisionTreeClassifier(criterion='entropy',random_state=0) \n    tree.fit(x_train,y_train)\n    \n    \n\n    \n    \n    #PRINT THE TRAINING ACCURACY FOR DECISION TREE.\n    print('Decision tree training accuracy:',tree.score(x_train,y_train))\n    \n    return tree","d93dabe0":"#GET AND TRAIN DECISION TREE THE MODELS\nmodel=models(x_train,y_train)","93f81cbe":"title=set()\nfor name in test[\"Name\"]:\n    title.add(name.split(\",\")[1].split(\".\")[0].strip())\nprint(title)    ","591255b1":"\n\ntitles={'Sir':\"officer\",'Mme':\"normald\",'Mr':\"norm\",'Master':\"normald\",'Don':\"officer\",'Miss':\"normald\",'Lady':\"normald\",'Mlle':\"normald\",'Lady':\"normald\",'Mlle':\"normald\",'Col':\"officer\",'Ms':\"normald\",'the Countess':\"royal\",'Mrs':\"normald\",'Major':\"officer\",'Capt':\"officer\",'Dr':\"officer\",'Rev':\"officer\",'Jonkheer':\"royal\"}","0ee4b651":"test[\"Name\"]=test[\"Name\"].map(lambda name:name.split(\",\")[1].split(\".\")[0].strip())\ntest[\"Name\"]=test.Name.map(titles)\ntest.head(10)","3e55d089":"#DROPPING UNWANTED FIELDS.\ndf1=test.drop([\"Ticket\",\"Cabin\",\"PassengerId\"],axis=1)\ndf1.head()","28baa32a":"#CONVERTING THE STRING VALUES(CATEGORICAL VALUES) TO INTEGER\ndf1.Sex=df1.Sex.map({\"female\":0,\"male\":\"1\"})\ndf1.Embarked=df1.Embarked.map({\"S\":0,\"C\":\"1\",\"Q\":2})\ndf1.Name=df1.Name.map({\"royal\":0,\"normald\":1,\"officer\":2,\"norm\":3})\ndf1.head()","6d76f070":"df1.isnull().sum()","4ee13c93":"#REPLACING ALL THE NULL VALUES\ndf1.fillna(df1.Age.mean(),inplace=True)","b28eccc1":"df1.isnull().sum()","0ff23bf7":"df1[\"Age\"]=round((df1.Age-df1.Age.mean()\/df1.Age.std()))\ndf1[\"Fare\"]=round((df1.Fare-df1.Fare.mean())\/df1.Fare.std())\n","ef3b1e09":"df1.head()","6481d577":"#PRINT THE PREDICTION.\npred=model.predict(df1)\npred","295a580b":"# DATA MODELLING","07f3aa0f":"# DATA ANALYSIS.","041169ab":"# IMPORTING PACKAGES.","e9ccb359":"# FEATURE SCALLING.","bc49ea80":"# CREATE A FUNCTION WITH DECISION TREE MODEL","8c21ce4e":"# CLEANING THE DATASET","248deb78":"# PRINT THE PREDICTION ON DECISION TREE  MODEL"}}