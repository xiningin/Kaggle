{"cell_type":{"d58f44cc":"code","34b6ea32":"code","5f9526aa":"code","4936f254":"code","0bee3fae":"code","c3242db9":"code","2dd259b4":"code","b6f2f71f":"code","43dbbf23":"code","ebcb5c83":"code","545ea0e8":"code","68c040d0":"markdown","413d83ed":"markdown","bd709216":"markdown","bdd0fca2":"markdown"},"source":{"d58f44cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport gc \n\nPATH = \"\/kaggle\/input\/kaggle-survey-2021\/\"","34b6ea32":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\n%matplotlib inline","5f9526aa":"df = pd.read_csv(PATH + \"kaggle_survey_2021_responses.csv\")\ndf","4936f254":"df.columns = [(col + \": \" + df.loc[0,col]) for col in df.columns]\ndf = df.iloc[1:]\ndf","0bee3fae":"all_count = len(df)\nall_count","c3242db9":"cols = df.columns[df.columns.str.contains(\"Part_\")]\nmultiple_column_questions=set()\nfor col in cols:\n    c = col.split(\":\")[1].split(\"?\")[0]\n    multiple_column_questions.add(c)\n\nn = 1\nfor question in multiple_column_questions:\n    print(n, \":\", question)\n    n += 1","2dd259b4":"def get_data(question):\n    \n    cols=[]\n    counts=[]\n    dictionary ={}\n\n    n=-1\n    for col in df.columns[df.columns.str.contains(question)]:\n        n+=1\n        if n==0:\n            a = df[col].notna()\n        else:\n            a = a | df[col].notna()\n        \n    all_count = len(a[a==True])\n    \n    for col in df.columns[df.columns.str.contains(question)]:\n        count = len(df[df[col].notna()])\n        coll = \" \".join(col.split(\"- \")[2].split())\n        #print(count,coll)\n        cols.append(col.split(\"-\")[2])\n        counts.append(count)\n        dictionary[coll] = np.round(100 * count\/all_count,2)\n\n    dictionary = dict(sorted(dictionary.items(), key = lambda x: x[1], reverse = True))\n\n    #for d in dictionary.keys():\n    #    print(dictionary[d], \"\\t\", d)\n\n    return dictionary, all_count","b6f2f71f":"def plot_figure(dictionary, title, bar_color, annotation_color, title_color, y_tick_color):\n    \n    y_values = dictionary.keys()\n    \"\"\"\n    y_values = []\n    for y in dictionary.keys():\n        a = y.split(\"(\")\n        if len(a)>1:\n            a = a[0] +\"\\n(\"+ a[1]\n            y_values.append(a)\n        else:\n            y_values.append(y)\n    \"\"\"\n            \n    a = list(dictionary.keys())\n    try:\n        none_rank = a.index(\"No \/ None\")\n    except:\n        try:\n            none_rank = a.index(\"None\")\n        except:\n            try:\n                none_rank = a.index(\"No\")\n            except:\n                try:\n                    none_rank = a.index(\"I do not share my work publicly\")\n                except:\n                    none_rank = a.index(\"None of these activities are an important part of my role at work\")\n\n                \n\n    other_rank =  a.index(\"Other\")\n    \n    \n    fig, ax = plt.subplots(1,1,figsize=(20,int(0.6*len(dictionary))))\n\n    none_color = \"#FF5555\"\n    other_color = \"#229999\"\n    barcolor=[]\n    for c in range(len(dictionary)):\n        if c==none_rank:\n            barcolor.append(none_color)\n        elif c==other_rank:\n            barcolor.append(other_color)            \n        else:\n            barcolor.append(bar_color)\n\n\n    plt.barh(width=list(dictionary.values()), y=list(y_values), height=0.75,color = barcolor)\n\n    a = -1\n    for d in dictionary:\n        a += 1\n        if a == none_rank:\n            plt.text(s = str(str(dictionary[d]) + \"%\"), x= dictionary[d], y=d ,font = 'Comic Sans MS', va='center',ha='left',color=none_color,fontsize=14)\n        elif a==other_rank:\n            plt.text(s = str(str(dictionary[d]) + \"%\"), x= dictionary[d], y=d ,font = 'Comic Sans MS', va='center',ha='left',color=other_color,fontsize=14)            \n        else:\n            plt.text(s = str(str(dictionary[d]) + \"%\"), x= dictionary[d], y=d ,font = 'Comic Sans MS', va='center',ha='left',color=annotation_color,fontsize=14)\n\n\n\n    plt.title(title,font='Comic Sans MS', fontsize=20, color=title_color)\n    plt.gca().invert_yaxis()\n    ax.tick_params(axis='y', colors=y_tick_color,labelsize=14)\n    ax.set_xlim([0, max(dictionary.values())+10])\n    plt.gca().get_yticklabels()[none_rank].set_color(none_color) \n    plt.gca().get_yticklabels()[other_rank].set_color(other_color) \n    ax.get_xaxis().set_visible(False)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n    ax.spines['left'].set_visible(False)\n\n    plt.show()","43dbbf23":"df[df.columns[df.columns.str.contains(\"In the next 2 years, do you hope to become more familiar with any of these specific data storage products\")]].sum()","ebcb5c83":"multiple_column_questions.remove(\" In the next 2 years, do you hope to become more familiar with any of these specific data storage products\")","545ea0e8":"for question in list(multiple_column_questions):\n    dictionary, all_count = get_data(question.replace(\"(\",\"\\(\").replace(\")\",\"\\)\"))\n    plot_figure(dictionary,question+\", total responses: \"+str(all_count),\"#FF925D\",\"#19718C\",\"#19718C\",\"#19718C\")","68c040d0":"I hope, the above work can facilitate your diving into deeper analysis of the responses of this survey.","413d83ed":"Let's have a look at the responses to the multiple-column-questions by using graphs:","bd709216":"**After classifying the questions as in [my previous kernel](https:\/\/www.kaggle.com\/ozoozo\/kaggle-survey-classifying-the-questions), let's dig into the responses of those classified questions. In this kernel, we will explore the responses to the multiple column questions.**","bdd0fca2":"There is no response to the question of \"In the next 2 years, do you hope to become more familiar with any of these specific data storage products\":"}}