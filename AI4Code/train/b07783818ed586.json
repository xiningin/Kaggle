{"cell_type":{"1dd29a07":"code","0c115868":"code","ed206e4d":"code","d7e36ffb":"code","d04feae9":"code","c81b3664":"code","a6264341":"code","9d78fdfb":"code","2c5b6b95":"code","67b6ac71":"code","b5062727":"code","9344f8da":"code","a0303a72":"code","98afe3b5":"code","e302ba01":"code","28c899a3":"code","9b40ce29":"code","ee9e44ea":"code","96a7567f":"code","96119f82":"code","25522f3f":"code","71ff8604":"code","7f725802":"code","5c6dee99":"code","82166af2":"code","806683a6":"code","59545d8d":"code","8b118c8b":"code","bdc86e71":"markdown","c94bf1dd":"markdown","f6947d15":"markdown","7a39e6c2":"markdown","9f7ee953":"markdown","077e1699":"markdown","dc6b00bf":"markdown","b72c946b":"markdown","e1b7b4f5":"markdown","06a500cb":"markdown","674a83a6":"markdown","09219ebc":"markdown"},"source":{"1dd29a07":"#modelos\n\n# classifier models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n# modules to handle data\nimport pandas as pd\nimport numpy as np","0c115868":"# load data \ntrain = pd.read_csv('..\/input\/train.csv') \ntest = pd.read_csv('..\/input\/test.csv')\n# Salvar PassengerId para a submiss\u00e3o final\npassengerId = test.PassengerId\n\ntrain = train.drop('PassengerId', axis = 1)\ntest = test.drop('PassengerId', axis = 1)\n","ed206e4d":"train.describe()","d7e36ffb":"train.head()","d04feae9":"train['Name'].describe()","c81b3664":"train['Title'] = train.Name.apply(lambda name: name.split(',')[1].split('.')[0].strip())\n","a6264341":"train.head()\n","9d78fdfb":"train['Title'].value_counts()","2c5b6b95":"norm_titles = {\n    \"Capt\":       \"Officer\",\n    \"Col\":        \"Officer\",\n    \"Major\":      \"Officer\",\n    \"Jonkheer\":   \"Royalty\",\n    \"Don\":        \"Royalty\",\n    \"Sir\" :       \"Royalty\",\n    \"Dr\":         \"Officer\",\n    \"Rev\":        \"Officer\",\n    \"the Countess\":\"Royalty\",\n    \"Dona\":       \"Royalty\",\n    \"Mme\":        \"Mrs\",\n    \"Mlle\":       \"Miss\",\n    \"Ms\":         \"Mrs\",\n    \"Mr\" :        \"Mr\",\n    \"Mrs\" :       \"Mrs\",\n    \"Miss\" :      \"Miss\",\n    \"Master\" :    \"Master\",\n    \"Lady\" :      \"Royalty\"\n}\n\ntrain.Title = train.Title.map(norm_titles)\n\ntrain.Title.value_counts()","67b6ac71":"#Verificando a M\u00e9dia de Idade Agrupando Sex e Title.\ntrain_grouped = train.groupby(['Sex','Title'])\ntrain_grouped.Age.mean()","b5062727":"#Verificando a Mediana de Idade Agrupando Sex e Title.\ntrain_grouped.Age.median()","9344f8da":"#Aplicando os valores da m\u00e9dia do grupo Sex\/Title nos valores vazios de Age.\ntrain.Age = train_grouped.Age.apply(lambda x: x.fillna(x.mean()))","a0303a72":"#Checando quantos valores nulos existem em Age (Valor Esperado = 0)\ntrain.Age.isnull().sum()","98afe3b5":"test['Title'] = test.Name.apply(lambda name: name.split(',')[1].split('.')[0].strip())\ntest.Title = test.Title.map(norm_titles)\ntest_grouped = test.groupby(['Sex','Title'])\ntest.Age = test_grouped.Age.apply(lambda x: x.fillna(x.mean()))\ntest.Age.isnull().sum()","e302ba01":"# fill Cabin NaN with U for unknown\ntrain.Cabin = train.Cabin.fillna('U')\n# find most frequent Embarked value and store in variable\nmost_embarked = train.Embarked.value_counts().index[0]\n\n# fill NaN with most_embarked value\ntrain.Embarked = train.Embarked.fillna(most_embarked)\n# fill NaN with median fare\ntrain.Fare = train.Fare.fillna(train.Fare.median())\n\n# view changes\ntrain.info()","28c899a3":"#O M\u00e1ximo que d\u00e1 para fazer com a coluna Cabin por hora \u00e9 isolar a primeira letra e agrup\u00e1-la\n#train['Cabin'] = train.Cabin.apply(lambda name: name[0])\ntrain.Cabin = train.Cabin.map(lambda x: x[0])\n#Misteriosamente na coluna train aparece um T e na coluna test n\u00e3o. Isso causa problemas,\n#por isso precisei tirar o T e colocar outras letras.\ntrain['Cabin'] = train.Cabin.replace({'T': 'G'})\ntrain.Cabin.value_counts()","9b40ce29":"#Fazendo o mesmo para o conjunto de test\n\n# fill Cabin NaN with U for unknown\ntest.Cabin = test.Cabin.fillna('U')\n# find most frequent Embarked value and store in variable\nmost_embarked = test.Embarked.value_counts().index[0]\n\n# fill NaN with most_embarked value\ntest.Embarked = test.Embarked.fillna(most_embarked)\n# fill NaN with median fare\ntest.Fare = test.Fare.fillna(train.Fare.median())\n\n#O M\u00e1ximo que d\u00e1 para fazer com a coluna Cabin por hora \u00e9 isolar a primeira letra e agrup\u00e1-la\ntest['Cabin'] = test.Cabin.apply(lambda name: name[0])\ntest.Cabin.value_counts()","ee9e44ea":"train['FamilySize'] = train.Parch + train.SibSp + 1\ntrain['FamilySize'].describe()","96a7567f":"#Same for Test\n\ntest['FamilySize'] = test.Parch + test.SibSp + 1\ntest['FamilySize'].describe()","96119f82":"# TRAIN\ntrain.Sex = train.Sex.map({\"male\": 0, \"female\":1})\n# create dummy variables for categorical features\npclass_dummies = pd.get_dummies(train.Pclass, prefix=\"Pclass\")\ntitle_dummies = pd.get_dummies(train.Title, prefix=\"Title\")\ncabin_dummies = pd.get_dummies(train.Cabin, prefix=\"Cabin\")\nembarked_dummies = pd.get_dummies(train.Embarked, prefix=\"Embarked\")\n# concatenate dummy columns with main dataset\ntrain_dummies = pd.concat([train, pclass_dummies, title_dummies, cabin_dummies, embarked_dummies], axis=1)\n\n# drop categorical fields\ntrain_dummies.drop(['Pclass', 'Title', 'Cabin', 'Embarked', 'Name', 'Ticket'], axis=1, inplace=True)\n\ntrain_dummies.head()","25522f3f":"# TESTE\ntest.Sex = test.Sex.map({\"male\": 0, \"female\":1})\n# create dummy variables for categorical features\npclass_dummies = pd.get_dummies(test.Pclass, prefix=\"Pclass\")\ntitle_dummies = pd.get_dummies(test.Title, prefix=\"Title\")\ncabin_dummies = pd.get_dummies(test.Cabin, prefix=\"Cabin\")\nembarked_dummies = pd.get_dummies(test.Embarked, prefix=\"Embarked\")\n# concatenate dummy columns with main dataset\ntest_dummies = pd.concat([test, pclass_dummies, title_dummies, cabin_dummies, embarked_dummies], axis=1)\n\n# drop categorical fields\ntest_dummies.drop(['Pclass', 'Title', 'Cabin', 'Embarked', 'Name', 'Ticket'], axis=1, inplace=True)\n\ntest_dummies.head()","71ff8604":"X = train_dummies.drop('Survived', axis=1).values \ny = train_dummies.Survived.values\n\n# create param grid object \nforrest_params = dict(     \n    max_depth = [n for n in range(9, 14)],     \n    min_samples_split = [n for n in range(4, 11)], \n    min_samples_leaf = [n for n in range(2, 5)],     \n    n_estimators = [n for n in range(10, 60, 10)],\n)","7f725802":"# instantiate Random Forest model\nforrest = RandomForestClassifier()","5c6dee99":"# build and fit model \nforest_cv = GridSearchCV(estimator=forrest,param_grid=forrest_params, cv=5) \nforest_cv.fit(X, y)","82166af2":"print(\"Best score: {}\".format(forest_cv.best_score_))\nprint(\"Optimal params: {}\".format(forest_cv.best_estimator_))","806683a6":"test_dummies.head()","59545d8d":"# create array for test set\n\nforrest_pred = forest_cv.predict(test_dummies)\n","8b118c8b":"# dataframe with predictions\nkaggle = pd.DataFrame({'PassengerId': passengerId, 'Survived': forrest_pred})\n# save to csv\nkaggle.to_csv('titanic_pred.csv', index=False)","bdc86e71":"<h2> Coluna: Names - Extraindo Informa\u00e7\u00f5es Valiosas<\/h2>\nEm uma primeira an\u00e1lise, podemos achar que a coluna Name n\u00e3o \u00e9 um atributo importante para o modelo. Se analizarmos a variabilidade do atributo isso pode ser cofirmado.","c94bf1dd":"Vamos fazer o mesmo com o conjunto de test","f6947d15":"<h2>Modelo<\/h2>\n\nAgora os dados est\u00e3o preparados para a cria\u00e7\u00e3o do modelo. Para melhor escolha dos par\u00e2metros, iremos fazer testes de valida\u00e7\u00e3o cruzada.\n","7a39e6c2":"O desempenho de um modelo de predi\u00e7\u00e3o est\u00e1 diretamente relacionado ao preprocessamento dos dados. Nesse Kernel, irei utilizar o modelo de \u00c1rvore de Decis\u00e3o para bater os 0.80 de score na competi\u00e7\u00e3o do Titanic.","9f7ee953":"Percebe-se com o comando acima que existem 517 entradas do tipo Mr, 182 do tipo Miss, 125 do tipo Mrs, 40 do tipo Master e alguns poucos de outros tipos. Para que n\u00e3o haja tanta variabilidade vamos substituir alguns nomes por outros. \n\n* \"Capt\":       \"Officer\",\n* \"Col\":        \"Officer\",\n* \"Major\":      \"Officer\",\n* \"Jonkheer\":   \"Royalty\",\n* \"Don\":        \"Royalty\",\n* \"Sir\" :       \"Royalty\",\n* \"Dr\":         \"Officer\",\n* \"Rev\":        \"Officer\",\n* \"the Countess\":\"Royalty\",\n* \"Dona\":       \"Royalty\",\n* \"Mme\":        \"Mrs\",\n* \"Mlle\":       \"Miss\",\n* \"Ms\":         \"Mrs\",\n* \"Mr\" :        \"Mr\",\n* \"Mrs\" :       \"Mrs\",\n* \"Miss\" :      \"Miss\",\n* \"Master\" :    \"Master\",\n* \"Lady\" :      \"Royalty\"","077e1699":"S\u00e3o 891 Registros e todos s\u00e3o \u00fanicos, ou seja, n\u00e3o h\u00e1 como agrupar os valores de \"Name\" em classes de Sobreviventes e N\u00e3o Sobreviventes.\nNo entanto, existe a possibilidade de usarmos os t\u00edtulos dos nomes para criar subgrupos, como Mr, Miss ou Mrs etc...  \n\nPrimeiramente vamos separar os textos da coluna Name usando o separador \",\" de o separador '.'.\nDesse modo, o nome **\"Cumings, Mrs. John Bradley (Florence Briggs Th...\"** ser\u00e1 transformado em **\"Mrs\"**. O resultado \u00e9 colocado em uma nova coluna chamada \"Title\"","dc6b00bf":"<h2> Criando um Caracteristica Nova: Familia <\/h2>\n\nSegundo a descri\u00e7\u00e3o do problema a rela\u00e7\u00e3o familiar \u00e9 descrita da seguinte forma.\nSibSp : Define se a pessoa possuia irm\u00e3o, \n    Sibling = irm\u00e3os, irm\u00e3s, maio irm\u00e3o, meio irm\u00e3\n    Spouse = marido, esposa (amante ou noiva foram ignorados)\n\nParch : \n    Parent = m\u00e3e, pai\n    Child = filha, filho, enteada, enteado\n    algumas crian\u00e7as viajavam com a bab\u00e1, nesse caso, o parch = 0\n\nDeste modo, uma boa maneira ","b72c946b":"<h2> Coluna Age: Preenchendo valores nulos<\/h2>\nAgora, podemos perceber que a coluna Title j\u00e1 come\u00e7a a dizer mais sobre quem sobreviveu. Ainda n\u00e3o fizemos an\u00e1lise matem\u00e1tica de correla\u00e7\u00e3o nem analise gr\u00e1fica. Podemos utilizar esse campo para estimar a idade dos tripulantes que possuem valores vazios ou nulos.","e1b7b4f5":"<h2>Math doens't like Letters<\/h2>\n\nModelos matem\u00e1ticos n\u00e3o se d\u00e3o muito bem com letras. Por isso, precisamos transformar todas as colunas categ\u00f3ricas em colunas num\u00e9ricas. Poderiamos fazer isso com LabelEncoder, mas existe uma t\u00e9cnica mais avan\u00e7ada chamada OneEnconder e ela pode ser aplicada de maneira bem simples com o m\u00e9todo **get_dummies** do **Pandas**.","06a500cb":"Alguns Testes Feitos\n\n","674a83a6":"<h2>Colunas: Cabin, Embarked e Fare<\/h2>\n\nAgora vamos preencher os valores nulos das colunas Cabin, Embarked e Fare.","09219ebc":"Agora vamos substituir todos os valores nulos da coluna Age com valores m\u00e9dios extraidos do agrupamento da coluna Title.\nPor exemplo, todos os valores de **Age** ser\u00e3o 21.8 quando o **Sex** for **Female** e o **Title** for **\"Miss\"**.\nPerceba que isso \u00e9 mais poderoso que apenas mudar o Age para um valor m\u00e9dio da coluna Age."}}