{"cell_type":{"f34d4b1c":"code","7c0dac00":"code","d3824420":"code","ee6eabd2":"code","4ec0fe40":"code","42c73536":"code","ede6c984":"code","25f83aaa":"code","03f24022":"code","d689da95":"code","5cb8a07c":"code","6809795f":"code","17e4e359":"code","0165b721":"code","71de6321":"code","e948e953":"code","513c5088":"markdown"},"source":{"f34d4b1c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7c0dac00":"! nvidia-smi","d3824420":"import matplotlib.pyplot as plt, seaborn as sns\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, GRU, LSTM, Input, Dropout","ee6eabd2":"df = pd.read_csv(os.path.join(dirname, filename))\ndf.head()","4ec0fe40":"df.info()","42c73536":"df = df.dropna(axis=1)\n\ntrain = df.iloc[:2500,:]\ntest = df.iloc[2500:,:]","ede6c984":"def seq_gen(comp, df, seq_len):\n    \n    scaler = MinMaxScaler()\n    df[comp] = scaler.fit_transform(df[[comp]])\n    company = df[comp].values\n\n    data = []\n    target = []\n    a = 0\n    b = seq_len\n    while b != len(company):\n        data.append(np.array(company[a:b]))\n        target.append(company[b])\n        a += 1\n        b += 1\n\n    data = np.array(data)\n    data = data.reshape(-1,seq_len,1)\n    target = np.array(target)\n    target = target.reshape(-1,1)\n    return [data,target]","25f83aaa":"comp = 'RELIANCE'\nX_train, y_train = seq_gen(comp, train,50)\nX_test, y_test = seq_gen(comp, test,50)","03f24022":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","d689da95":"# model = Sequential()\n# model.add(Input(shape=(50,1)))\n# model.add(LSTM(units=50, activation='tanh', return_sequences=True))\n# model.add(Dropout(0.25))\n# model.add(LSTM(150, activation='tanh', return_sequences=True))\n# model.add(Dropout(0.25))\n# model.add(LSTM(50, activation='tanh'))\n# model.add(Dropout(0.25))\n# model.add(Dense(100, activation='relu'))\n# model.add(Dense(1, activation='softmax'))\n\n\n\n\nmodel = Sequential()\nmodel.add(LSTM(units = 50, return_sequences = True, input_shape = (50, 1)))\nmodel.add(Dropout(0.2))             \n\nmodel.add(LSTM(units = 50, return_sequences = True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units = 50))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(units = 1))\nmodel.summary()","5cb8a07c":"model.compile(loss=\"mean_squared_error\", optimizer='sgd', metrics=[\"mean_absolute_error\"])","6809795f":"earlyStopping = keras.callbacks.EarlyStopping(\n    monitor=\"val_loss\",\n    min_delta=0.05,\n    patience=10,\n    verbose=0,\n    mode=\"auto\",\n    baseline=None,\n    restore_best_weights=False,\n)\nmodel.fit(x=X_train, y=y_train, batch_size=32, epochs=100,\n          validation_data=(X_test,y_test), callbacks=[earlyStopping])","17e4e359":"train_predict = model.predict(X_train)\nplt.plot(y_train)\nplt.plot(train_predict)\nplt.show()","0165b721":"test_predict = model.predict(X_test)\nplt.plot(y_test)\nplt.plot(test_predict)\nplt.show()","71de6321":"future_predict = y_test[-50:]\nstart_index = 0\nno_days = 30\nwhile len(future_predict) < 50 + no_days:\n    future = model.predict(future_predict[start_index:].reshape(-1,50,1))\n    future_predict = np.append(future_predict, future, axis=0)\n    start_index += 1\n\nfuture_predict = future_predict[-no_days:]","e948e953":"test_predict = model.predict(X_test)\nplt.plot(y_test)\nplt.plot(test_predict)\nplt.plot(range(len(y_test), len(y_test)+no_days), future_predict)\nplt.show()","513c5088":"### Put any company's name below to find the prediction"}}