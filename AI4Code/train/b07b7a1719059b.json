{"cell_type":{"246aacb5":"code","0fa74d39":"code","98a4b700":"code","4bf9aab1":"code","f4c4d658":"code","5dd4cb72":"code","96d5a79b":"code","96ab4998":"code","00925306":"code","09b9d481":"code","795ecdac":"code","1d67588b":"markdown","b5735526":"markdown","f8ec2162":"markdown","cabf5dae":"markdown","54c45117":"markdown","5d41477c":"markdown","678b7c43":"markdown","8642646e":"markdown"},"source":{"246aacb5":"%%capture\n!pip install census\n!pip install us","0fa74d39":"# standard libraries\nfrom datetime import datetime\nimport json\nimport os\nimport requests\n\n# 3rd party librares\nimport branca.colormap as cm\nfrom census import Census\nfrom IPython.display import display\nimport folium\nimport geopandas as gpd\nimport pandas as pd\nfrom shapely.geometry import Polygon\nfrom us import states\n\n# local\nfrom kaggle_secrets import UserSecretsClient","98a4b700":"# secrets\nuser_secrets = UserSecretsClient()\nCENSUS_KEY = user_secrets.get_secret(\"CENSUS_KEY\")\nRAPID_API_KEY = user_secrets.get_secret(\"RAPID_API_KEY\")\n\n# RapidAPI Request Headers (kevincal unlimited key)\nAPI_URL = \"https:\/\/idealspot-geodata.p.rapidapi.com\"\n\nAPI_REQUEST_HEADERS = {\n    'x-rapidapi-host': \"idealspot-geodata.p.rapidapi.com\",\n    'x-rapidapi-key': RAPID_API_KEY\n    }","4bf9aab1":"# IdealSpot\nurl = API_URL + \"\/api\/v1\/geometries\/geometry\"\n\n# Build `Location` Object to Query API\nlocation = {\n    \"type\":\"region\",\n    \"regiontype\": \"county\",\n    \"region_id\": \"TravisCountyTX\"\n}\n\n# Fetch Geometry Record from IdealSpot API\nparams = { \"location\": json.dumps(location) }\nr = requests.get(url=url, params=params, headers=API_REQUEST_HEADERS)\ndata = r.json().get('data')\ndisplay(data)","f4c4d658":"# looking at the `Feature Collection` above, get FIPS for Travis County, TX\n\n# Get County FIPS code\ntravis_fips = data['features'][0]['properties']['_properties']['COUNTYFP']\n\n# using FIPS, get the list of CENSUS County Tracts \nc = Census(CENSUS_KEY)\ncounty_tracts = c.sf1.state_county_tract('NAME', states.TX.fips, travis_fips, Census.ALL)\n\n# display\nprint(\"%s county tracts in Travis County, TX\" % len(county_tracts))\ndisplay(county_tracts[:2])\n","5dd4cb72":"# get home-value for East Austin\nurl = \"https:\/\/idealspot-geodata.p.rapidapi.com\/api\/v1\/data\/insights\/home-value\"\n\n# fetch API endpoint and display results\nparams = {\n    \"periods\": \"true\",\n    \"parameter_options\": \"true\",\n    \"parameters\": \"true\"\n    }\n\nr = requests.get(url=url, params=params, headers=API_REQUEST_HEADERS)\ndisplay(r.json())","96d5a79b":"# tip: keep a list of processed id's so no need to requery\nprocessed_region_ids = []\n\n# list of county tract data\ncounty_tract_data = []","96ab4998":"# iterate through county tracts to fetch geo and insight data\nfor ct in county_tracts:\n    \n    # debug \n    # print(\"Processing %s\" % ct)\n    \n    # get tract FIPS\n    name = ct.get('NAME')\n    state_fips = ct.get('state')\n    county_fips = ct.get('county')\n    tract_fips = ct.get('tract')\n    \n    # build region_id\n    region_id = \"%s%s%s\" % (state_fips, county_fips, tract_fips)\n    \n    # get duplicate\n    if region_id in processed_region_ids:\n        print(\"Duplicate. Skipping\")\n        continue\n    else:\n        processed_region_ids.append(region_id)\n    \n    # build location parameter for API Query\n    location = {\n        \"type\":\"region\", \n        \"regiontype\": \"tract\", \n        \"region_id\": region_id\n        }\n    \n    # API params, using \n    params = {\n        \"version\": \"v2\",\n        \"location\": json.dumps(location)\n    }\n    \n    # build Insight API URL\n    url = API_URL + \"\/api\/v1\/data\/insights\/home-value\/query\"\n    r = requests.get(url=url, params=params, headers=API_REQUEST_HEADERS)\n    insight_raw_data = r.json()\n    insight_data = insight_raw_data.get('data')[0].get('data')\n    median_home_value = None\n    for (l, v) in insight_data:\n        if l == 'Median Home Value':\n            median_home_value = v\n            \n    # get Geometry API URL\n    url = API_URL + \"\/api\/v1\/geometries\/geometry\"\n    r = requests.get(url=url, params=params, headers=API_REQUEST_HEADERS)    \n    geometry_raw_data = r.json()\n    \n    # get the polygon coordinates\n    geometry = geometry_raw_data.get('data', {})\\\n        .get('features', [])[0].get('geometry')\n    coordinates = geometry['coordinates'][0]\n    poly = Polygon(coordinates)\n    \n    # build list\n    county_tract_data.append({\n        'region_name': name,\n        'region_id': int(region_id),\n        'Median Home Value': median_home_value,\n        'geometry': poly\n    })\n","00925306":"# create GeoDataFrame\ncounty_tracts_gdf = gpd.GeoDataFrame(county_tract_data, crs=\"EPSG:4326\")\ncounty_tracts_gdf.set_index('region_id')\ncounty_tracts_gdf.head()","09b9d481":"# center map based on features\nlng_map = county_tracts_gdf.centroid.x.mean()\nlat_map = county_tracts_gdf.centroid.y.mean()\n\n# create folium map\nmap = folium.Map(\n    location=[lat_map, lng_map],\n    zoom_start=11,\n    tiles=None)\n\n# set tilelayer manually for more control\ntile_layer = folium.TileLayer('CartoDB positron', name=\"Light Map\", control=False).add_to(map)\n\n# build color scale\nthreshold_scale = (county_tracts_gdf['Median Home Value']\n                       .quantile((0, 0.1, 0.75, 0.9, 0.98, 1))).tolist()\n\ncolormap = cm.linear.YlGnBu_09.to_step(\n    data=county_tracts_gdf['Median Home Value'], \n    method='quant', \n    quantiles=[0, 0.1, 0.75, 0.9, 0.98,1 ])\n\n# build choropleth\nfolium.Choropleth(\n     geo_data=county_tracts_gdf,\n     name='Median Home Value',\n     data=county_tracts_gdf,\n     columns=['region_id', 'Median Home Value'],\n     key_on=\"feature.properties.region_id\",\n     fill_color='YlGnBu',\n     threshold_scale=threshold_scale,\n     fill_opacity=0.6,\n     line_opacity=0.2,\n     legend_name='Median Home Value',\n     smooth_factor=0\n    ).add_to(map)\n\n# display the static map\ndisplay(map)\n","795ecdac":"# build interactive tooltip\nstyle_function = lambda x: {\n    'weight': 0.1, \n    'color': 'black',\n    'fillColor': colormap(x['properties']['Median Home Value']), \n    'fillOpacity': 0.01\n    }\n\nhighlight_function = lambda x: {\n    'fillColor': '#000000', \n    'color':'#000000', \n    'fillOpacity': 0.2, \n    'weight': 0.1\n    }\n\ntooltip_overlay=folium.features.GeoJson(\n        county_tracts_gdf,\n        style_function=style_function,\n        control=False,\n        highlight_function=highlight_function,\n        tooltip=folium.features.GeoJsonTooltip(\n            fields=['region_name', 'Median Home Value'],\n            aliases=['County Tract', 'Median Home Value ($)'],\n            style=(\"background-color: white; color: #333333; font-family: arial; font-size: 12px; padding: 10px;\"),\n            sticky=True,\n            localize=True\n        )\n    )\nmap.add_child(tooltip_overlay)\nmap.keep_in_front(tooltip_overlay)\n\n# add layer control\nfolium.LayerControl().add_to(map)\n\n# display map\ndisplay(map)","1d67588b":"## Interactive Tooltip\n\nWe're going to add some interactivity.  \n1. Hover \/ Tooltip\n2. Layer Controller (to show\/hide the Choropleth)","b5735526":"## GeoPandas\n\n[GeoPandas](https:\/\/github.com\/geopandas\/geopandas) is a project to add support for geographic data to pandas objects. It currently implements `GeoSeries` and `GeoDataFrame` types which are subclasses of `pandas.Series` and `pandas.DataFrame` respectively. GeoPandas objects can act on shapely geometry objects and perform geometric operations.\n\nWe load the `country_tracks_data` into a `GeoDataFrame` so we can easily process and plot this data.","f8ec2162":"## Folium\n\n[folium](https:\/\/python-visualization.github.io\/folium\/) makes it easy to visualize data that's been manipulated in Python on an interactive leaflet map. It enables both the binding of data to a map for choropleth visualizations as well as passing rich vector\/raster\/HTML visualizations as markers on the map.\n","cabf5dae":"## Check Home Value API Request\n\nIdealSpot has the ability to fetch request\/response structure metadata for a given Insight. This provides you the periods of data available as well as any other parameters you may want to query the Insight by. Example Insights include population and market data such as: age, daytime population, avg. home. [Describe Insight API End Point](https:\/\/rapidapi.com\/idealspot-inc-idealspot-inc-default\/api\/idealspot-geodata?endpoint=apiendpoint_2d3cd858-6264-40c7-938a-890eded9511d)\n","54c45117":"## Country Geographic Data Lookup\n\nSince we want to query all CENSUS Tracts inside Travis County, TX, we need to get the FIPS number for Travis County. The Federal Information Processing Standard Publication 6-4 (FIPS 6-4) was a five-digit Federal Information Processing Standards code which uniquely identified counties and county equivalents in the United States, certain U.S. possessions, and certain freely associated states. [more](https:\/\/en.wikipedia.org\/wiki\/FIPS_county_code)\n\nWe use IdealSpot's [Geometry lookup API EndPoint](https:\/\/rapidapi.com\/idealspot-inc-idealspot-inc-default\/api\/idealspot-geodata?endpoint=apiendpoint_747b0075-daa3-4d5c-8ebb-7328bbea8cc3)\n\n\n","5d41477c":"## Iterate and Query for each CENSUS County Tracts\n\nFrom the above metadata we know we want to query `version=v2` for `home-value`.\n","678b7c43":"# Visualizing Median Home Values by Mapping Choropleths\n\nThis notebook will demonstrate how to use the [IdealSpot API](https:\/\/developer.idealspot.com\/) to query Median Home Values by CENSUS County Tract and create a Choropleth Map.  A Choropleth Map displays divided geographical areas or regions that are coloured, shaded or patterned in relation to a data variable. This demo also uses [census](https:\/\/github.com\/datamade\/census), a simple API wrapper for US CENSUS data.\n\nFor our example, we will examine CENSUS County Tracts in Travis County, Texas, where Austin, TX is located.\n\n## Requirements\n\nTo run this notebook, you'll need to get two API keys.\n\n1. US CENSUS API Key. You can request one [here](https:\/\/api.census.gov\/data\/key_signup.html).\n2. IdealSpot API Key.  You can get a trial key [here](https:\/\/rapidapi.com\/idealspot-inc-idealspot-inc-default\/api\/idealspot-geodata)\n","8642646e":"# That's a Wrap\n\nSo in this tutorial you learned how to use the [IdealSpot API](http:\/\/developer.idealspot.com) to query for CENSUS County Tract median home values and plot them on an interactive map. Explore the other datasets and geographic areas available in our API to see what more interesting data you can plot!"}}