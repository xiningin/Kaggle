{"cell_type":{"1757f870":"code","107efa3e":"code","cae9a9a1":"code","e0104f6b":"code","7c590eb5":"code","d1d71289":"code","bad4bfe1":"code","24153af7":"code","0f673b44":"code","1b7ecb5e":"code","86f9b0c0":"code","6102befe":"code","ec08882d":"code","a6600389":"code","3ea64712":"code","04a1f5df":"code","04bda3da":"code","2c900e57":"code","0e5af998":"code","6e59370d":"code","49ffcd87":"code","c022d826":"markdown","a688640c":"markdown","1d2b7e9b":"markdown","421c011b":"markdown","2f719be5":"markdown","f97a0082":"markdown","76f64bf0":"markdown","1eafe455":"markdown","48e6a498":"markdown","9a953eda":"markdown"},"source":{"1757f870":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns \nimport matplotlib.pyplot as plt \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","107efa3e":"heart = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\nheart ","cae9a9a1":"heart.describe()","e0104f6b":"heart.info()","7c590eb5":"heart.isnull().sum()","d1d71289":"heart.columns","bad4bfe1":"display(heart[['age', 'anaemia', 'creatinine_phosphokinase', 'diabetes',\n       'ejection_fraction', 'high_blood_pressure', 'platelets',\n       'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time',\n       'DEATH_EVENT']].groupby([ 'sex','smoking', 'smoking','high_blood_pressure', 'diabetes','anaemia']).agg(['max','mean','min']).style.background_gradient('Oranges'))","24153af7":"corr = heart.corr()\nplt.figure(figsize = (30,12))\nsns.heatmap(corr,vmax =1 ,vmin = -1,linewidth = 5, square =True, annot =True ,annot_kws ={'size':8},fmt ='.1f',cmap='BrBG_r')\nplt.title('Correlation')\nplt.show()","0f673b44":"heart.columns[0]","1b7ecb5e":"sns.pairplot(heart, hue = 'DEATH_EVENT')","86f9b0c0":"from sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()\nfeatures = ['age', 'anaemia', 'creatinine_phosphokinase', 'diabetes',\n       'ejection_fraction', 'high_blood_pressure', 'platelets',\n       'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']\nheart = pd.DataFrame(sc.fit_transform(heart),columns = heart.columns)\nheart","6102befe":"X = heart[['age', 'anaemia', 'creatinine_phosphokinase', 'diabetes',\n       'ejection_fraction', 'high_blood_pressure', 'platelets',\n       'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']]\ny = heart['DEATH_EVENT']\ny","ec08882d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y , test_size =0.2,random_state = 2)","a6600389":"X_train.shape","3ea64712":"y_train.shape","04a1f5df":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train)","04bda3da":"from sklearn.metrics import accuracy_score\nyhat = model.predict(X_test)\naccuracy_score(y_test,yhat)","2c900e57":"from sklearn.tree import DecisionTreeClassifier\nmodel1 = DecisionTreeClassifier(criterion = 'gini', random_state= 100, max_depth = 3, min_samples_leaf = 5)\nmodel1.fit(X_train,y_train)","0e5af998":"\ny_hat = model1.predict(X_test)\naccuracy_score(y_test,y_hat)\n","6e59370d":"from sklearn.naive_bayes import GaussianNB\nmodel2 = GaussianNB()\nmodel2.fit(X_train,y_train)\n","49ffcd87":"yhat1 = model2.predict(X_test)\naccuracy_score(y_test,yhat1)","c022d826":"Logistic Regression.","a688640c":"Normalizing data ","1d2b7e9b":"Clearly the logistic Regression does the work quiet perfectly ","421c011b":"# Data Preprossessing","2f719be5":"# Data Representation and Description","f97a0082":"Naive Bayes:","76f64bf0":"# Data Visualization","1eafe455":"# Model Selection","48e6a498":"Decision Tree","9a953eda":"# Spliting The Data"}}