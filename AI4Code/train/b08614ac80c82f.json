{"cell_type":{"88d0a5bd":"code","5b84b661":"code","8c61bfca":"code","f2dc5ce0":"code","b0ad600d":"code","29866dfd":"code","b9e5f029":"code","674b4820":"code","3b1a4c4d":"code","e7813c57":"code","9ed49219":"code","8e9d0f09":"code","388410ec":"code","5082e2e6":"code","f3d60ccb":"code","69a88aa5":"code","8b02c2d0":"code","72278149":"code","1aff26b8":"code","6eadb818":"code","c27327fd":"code","eeb21459":"code","d33c884d":"code","c36ef3ba":"code","46a2dc4e":"code","0f972d1e":"code","9680c848":"code","3530d2fa":"code","af699f48":"code","ae5e0a62":"code","c8d8623c":"code","5cb2b2ea":"code","4aa552ec":"code","15ff8007":"code","b5e8e24b":"code","b04a5831":"markdown","1195c63c":"markdown","8a549780":"markdown","7d08db24":"markdown","11361340":"markdown","a903a068":"markdown","46b71b7d":"markdown","9dc9d942":"markdown","e179dbe9":"markdown","613b8e6a":"markdown","0231c152":"markdown","38de8060":"markdown","60abd157":"markdown","46a47748":"markdown","5f3ac110":"markdown","10dd8540":"markdown","4a005b0c":"markdown","93542713":"markdown","c48c593c":"markdown","7431d3d6":"markdown","c8697d86":"markdown","3c56abba":"markdown","6023a2fd":"markdown","81c9b6a0":"markdown","5bbd6aa9":"markdown","c9807acb":"markdown","47cf3a41":"markdown","07924946":"markdown","0fbf62b3":"markdown","65082b15":"markdown"},"source":{"88d0a5bd":"from mlxtend.plotting import plot_decision_regions\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n#plt.style.use('ggplot')\n#ggplot is R based visualisation package that provides better graphics with higher level of abstraction","5b84b661":"#Loading the dataset\ndiabetes_data = pd.read_csv('..\/input\/diabetes.csv')\n\n#Print the first 5 rows of the dataframe.\ndiabetes_data.head()","8c61bfca":"## gives information about the data types,columns, null value counts, memory usage etc\n## function reference : https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.info.html\ndiabetes_data.info(verbose=True)","f2dc5ce0":"## basic statistic details about the data (note only numerical columns would be displayed here unless parameter include=\"all\")\n## for reference: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.describe.html#pandas.DataFrame.describe\ndiabetes_data.describe()\n\n## Also see :\n##to return columns of a specific dtype: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes","b0ad600d":"diabetes_data.describe().T","29866dfd":"diabetes_data_copy = diabetes_data.copy(deep = True)\ndiabetes_data_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = diabetes_data_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)\n\n## showing the count of Nans\nprint(diabetes_data_copy.isnull().sum())","b9e5f029":"p = diabetes_data.hist(figsize = (20,20))","674b4820":"diabetes_data_copy['Glucose'].fillna(diabetes_data_copy['Glucose'].mean(), inplace = True)\ndiabetes_data_copy['BloodPressure'].fillna(diabetes_data_copy['BloodPressure'].mean(), inplace = True)\ndiabetes_data_copy['SkinThickness'].fillna(diabetes_data_copy['SkinThickness'].median(), inplace = True)\ndiabetes_data_copy['Insulin'].fillna(diabetes_data_copy['Insulin'].median(), inplace = True)\ndiabetes_data_copy['BMI'].fillna(diabetes_data_copy['BMI'].median(), inplace = True)","3b1a4c4d":"p = diabetes_data_copy.hist(figsize = (20,20))","e7813c57":"## observing the shape of the data\ndiabetes_data.shape","9ed49219":"## data type analysis\n#plt.figure(figsize=(5,5))\n#sns.set(font_scale=2)\nsns.countplot(y=diabetes_data.dtypes ,data=diabetes_data)\nplt.xlabel(\"count of each data type\")\nplt.ylabel(\"data types\")\nplt.show()","8e9d0f09":"## null count analysis\nimport missingno as msno\np=msno.bar(diabetes_data)\n","388410ec":"## checking the balance of the data by plotting the count of outcomes by their value\ncolor_wheel = {1: \"#0392cf\", \n               2: \"#7bc043\"}\ncolors = diabetes_data[\"Outcome\"].map(lambda x: color_wheel.get(x + 1))\nprint(diabetes_data.Outcome.value_counts())\np=diabetes_data.Outcome.value_counts().plot(kind=\"bar\")\n","5082e2e6":"from pandas.tools.plotting import scatter_matrix\np=scatter_matrix(diabetes_data,figsize=(25, 25))","f3d60ccb":"p=sns.pairplot(diabetes_data_copy, hue = 'Outcome')","69a88aa5":"plt.figure(figsize=(12,10))  # on this line I just set the size of figure to 12 by 10.\np=sns.heatmap(diabetes_data.corr(), annot=True,cmap ='RdYlGn')  # seaborn has very simple solution for heatmap","8b02c2d0":"plt.figure(figsize=(12,10))  # on this line I just set the size of figure to 12 by 10.\np=sns.heatmap(diabetes_data_copy.corr(), annot=True,cmap ='RdYlGn')  # seaborn has very simple solution for heatmap","72278149":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX =  pd.DataFrame(sc_X.fit_transform(diabetes_data_copy.drop([\"Outcome\"],axis = 1),),\n        columns=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI', 'DiabetesPedigreeFunction', 'Age'])","1aff26b8":"X.head()","6eadb818":"#X = diabetes_data.drop(\"Outcome\",axis = 1)\ny = diabetes_data_copy.Outcome","c27327fd":"#importing train_test_split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=1\/3,random_state=42, stratify=y)","eeb21459":"from sklearn.neighbors import KNeighborsClassifier\n\n\ntest_scores = []\ntrain_scores = []\n\nfor i in range(1,15):\n\n    knn = KNeighborsClassifier(i)\n    knn.fit(X_train,y_train)\n    \n    train_scores.append(knn.score(X_train,y_train))\n    test_scores.append(knn.score(X_test,y_test))","d33c884d":"## score that comes from testing on the same datapoints that were used for training\nmax_train_score = max(train_scores)\ntrain_scores_ind = [i for i, v in enumerate(train_scores) if v == max_train_score]\nprint('Max train score {} % and k = {}'.format(max_train_score*100,list(map(lambda x: x+1, train_scores_ind))))","c36ef3ba":"## score that comes from testing on the datapoints that were split in the beginning to be used for testing solely\nmax_test_score = max(test_scores)\ntest_scores_ind = [i for i, v in enumerate(test_scores) if v == max_test_score]\nprint('Max test score {} % and k = {}'.format(max_test_score*100,list(map(lambda x: x+1, test_scores_ind))))","46a2dc4e":"plt.figure(figsize=(12,5))\np = sns.lineplot(range(1,15),train_scores,marker='*',label='Train Score')\np = sns.lineplot(range(1,15),test_scores,marker='o',label='Test Score')","0f972d1e":"#Setup a knn classifier with k neighbors\nknn = KNeighborsClassifier(11)\n\nknn.fit(X_train,y_train)\nknn.score(X_test,y_test)","9680c848":"## trying to plot decision boundary ","3530d2fa":"value = 20000\nwidth = 20000\nplot_decision_regions(X.values, y.values, clf=knn, legend=2, \n                      filler_feature_values={2: value, 3: value, 4: value, 5: value, 6: value, 7: value},\n                      filler_feature_ranges={2: width, 3: width, 4: width, 5: width, 6: width, 7: width},\n                      X_highlight=X_test.values)\n\n# Adding axes annotations\n#plt.xlabel('sepal length [cm]')\n#plt.ylabel('petal length [cm]')\nplt.title('KNN with Diabetes Data')\nplt.show()","af699f48":"#import confusion_matrix\nfrom sklearn.metrics import confusion_matrix\n#let us get the predictions using the classifier we had fit above\ny_pred = knn.predict(X_test)\nconfusion_matrix(y_test,y_pred)\npd.crosstab(y_test, y_pred, rownames=['True'], colnames=['Predicted'], margins=True)","ae5e0a62":"y_pred = knn.predict(X_test)\nfrom sklearn import metrics\ncnf_matrix = metrics.confusion_matrix(y_test, y_pred)\np = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","c8d8623c":"#import classification_report\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","5cb2b2ea":"from sklearn.metrics import roc_curve\ny_pred_proba = knn.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)","4aa552ec":"plt.plot([0,1],[0,1],'k--')\nplt.plot(fpr,tpr, label='Knn')\nplt.xlabel('fpr')\nplt.ylabel('tpr')\nplt.title('Knn(n_neighbors=11) ROC curve')\nplt.show()","15ff8007":"#Area under ROC curve\nfrom sklearn.metrics import roc_auc_score\nroc_auc_score(y_test,y_pred_proba)","b5e8e24b":"#import GridSearchCV\nfrom sklearn.model_selection import GridSearchCV\n#In case of classifier like knn the parameter to be tuned is n_neighbors\nparam_grid = {'n_neighbors':np.arange(1,50)}\nknn = KNeighborsClassifier()\nknn_cv= GridSearchCV(knn,param_grid,cv=5)\nknn_cv.fit(X,y)\n\nprint(\"Best Score:\" + str(knn_cv.best_score_))\nprint(\"Best Parameters: \" + str(knn_cv.best_params_))","b04a5831":"#### it is always advisable to bring all the features to the same scale for applying distance based algorithms like KNN.\n##### Let's see an example of distance calculation using two features whose magnitudes\/ranges vary greatly.\nEuclidean Distance = [(100000\u201380000)^2 + (30\u201325)^2]^(1\/2)","1195c63c":"### Why Scaling the data for KNN?","8a549780":"#### The best result is captured at k = 11 hence 11 is used for the final model","7d08db24":"## Basic Data Science and ML Pipeline","11361340":"#### We can imagine how the feature with greater range with overshadow or dimenish the smaller feature completely and this will impact the performance of all distance based model as it will give higher weightage to variables which have higher magnitude.","a903a068":"## 1. Confusion Matrix\n\nThe confusion matrix is a technique used for summarizing the performance of a classification algorithm i.e. it has binary outputs.\n![](https:\/\/cdn-images-1.medium.com\/max\/1600\/0*-GAP6jhtJvt7Bqiv.png)\n\n\n\n### ***In the famous cancer example***:\n\n\n###### Cases in which the doctor predicted YES (they have the disease), and they do have the disease will be termed as TRUE POSITIVES (TP). The doctor has correctly predicted that the patient has the disease.\n\n###### Cases in which the doctor predicted NO (they do not have the disease), and they don\u2019t have the disease will be termed as TRUE NEGATIVES (TN). The doctor has correctly predicted that the patient does not have the disease.\n\n###### Cases in which the doctor predicted YES, and they do not have the disease will be termed as FALSE POSITIVES (FP). Also known as \u201cType I error\u201d.\n\n###### Cases in which the doctor predicted NO, and they have the disease will be termed as FALSE NEGATIVES (FN). Also known as \u201cType II error\u201d.\n\n![](https:\/\/cdn-images-1.medium.com\/max\/1600\/0*9r99oJ2PTRi4gYF_.jpg)\n\nFor Reference: https:\/\/medium.com\/@djocz\/confusion-matrix-aint-that-confusing-d29e18403327","46b71b7d":"#### To fill these Nan values the data distribution needs to be understood","9dc9d942":"### Aiming to impute nan values for the columns in accordance with their distribution","e179dbe9":"**DataFrame.describe()** method generates descriptive statistics that summarize the central tendency, dispersion and shape of a dataset\u2019s distribution, excluding NaN values. This method tells us a lot of things about a dataset. One important thing is that the describe() method deals only with numeric values. It doesn't work with any categorical values. So if there are any categorical values in a column the describe() method will ignore it and display summary for the other columns unless parameter include=\"all\" is passed.\n\nNow, let's understand the statistics that are generated by the describe() method:\n* count tells us the number of NoN-empty rows in a feature.\n* mean tells us the mean value of that feature.\n* std tells us the Standard Deviation Value of that feature.\n* min tells us the minimum value of that feature.\n* 25%, 50%, and 75% are the percentile\/quartile of each features. This quartile information helps us to detect Outliers.\n* max tells us the maximum value of that feature.","613b8e6a":"#### Pair plot for clean data","0231c152":"#### Don't forget to share and upvote if you found my notebook of use :)","38de8060":"#### Heatmap for unclean data","60abd157":"## Test Train Split and Cross Validation methods\n\n\n\n***Train Test Split*** : To have unknown datapoints to test the data rather than testing with the same points with which the model was trained. This helps capture the model performance much better.\n\n![](https:\/\/cdn-images-1.medium.com\/max\/1600\/1*-8_kogvwmL1H6ooN1A1tsQ.png)\n\n***Cross Validation***: When model is split into training and testing it can be possible that specific type of data point may go entirely into either training or testing portion. This would lead the model to perform poorly. Hence over-fitting and underfitting problems can be well avoided with cross validation techniques\n\n![](https:\/\/cdn-images-1.medium.com\/max\/1600\/1*4G__SV580CxFj78o9yUXuQ.png)\n\n\n***About Stratify*** : Stratify parameter makes a split so that the proportion of values in the sample produced will be the same as the proportion of values provided to parameter stratify.\n\nFor example, if variable y is a binary categorical variable with values 0 and 1 and there are 25% of zeros and 75% of ones, stratify=y will make sure that your random split has 25% of 0's and 75% of 1's.\n\nFor Reference : https:\/\/towardsdatascience.com\/train-test-split-and-cross-validation-in-python-80b61beca4b6","46a47748":"### The Question creeping out of this summary\n\n#### Can minimum value of below listed columns be zero (0)?\n\nOn these columns, a value of zero does not make sense and thus indicates missing value.\n\nFollowing columns or variables have an invalid zero value:\n1. Glucose\n2. BloodPressure\n3. SkinThickness\n4. Insulin\n5. BMI","5f3ac110":"## Result Visualisation","10dd8540":"###### The pairs plot builds on two basic figures, the histogram and the scatter plot. The histogram on the diagonal allows us to see the distribution of a single variable while the scatter plots on the upper and lower triangles show the relationship (or lack thereof) between two variables.\n\nFor Reference: https:\/\/towardsdatascience.com\/visualizing-data-with-pair-plots-in-python-f228cf529166","4a005b0c":"#### Scatter matrix of uncleaned data","93542713":"# Model Performance Analysis","c48c593c":"## Scaling the data \ndata Z is rescaled such that \u03bc = 0 and \ud835\uded4 = 1, and is done through this formula:\n![](https:\/\/cdn-images-1.medium.com\/max\/800\/0*PXGPVYIxyI_IEHP7.)\n\n\n#### to learn more about scaling techniques\nhttps:\/\/medium.com\/@rrfd\/standardize-or-normalize-examples-in-python-e3f174b65dfc\nhttps:\/\/machinelearningmastery.com\/rescaling-data-for-machine-learning-in-python-with-scikit-learn\/","7431d3d6":"## Basic EDA and statistical analysis\n","c8697d86":"## 3. ROC - AUC\nROC (Receiver Operating Characteristic) Curve tells us about how good the model can distinguish between two things (e.g If a patient has a disease or no). Better models can accurately distinguish between the two. Whereas, a poor model will have difficulties in distinguishing between the two\n\n\nWell Explained in this video: https:\/\/www.youtube.com\/watch?v=OAl6eAyP-yo\n\n","3c56abba":"***Pearson's Correlation Coefficient***: helps you find out the relationship between two quantities. It gives you the measure of the strength of association between two variables. The value of Pearson's Correlation Coefficient can be between -1 to +1. 1 means that they are highly correlated and 0 means no correlation.\n\nA heat map is a two-dimensional representation of information with the help of colors. Heat maps can help the user visualize simple or complex information.","6023a2fd":"## Plotting after Nan removal ","81c9b6a0":"#### The above graph shows that the data is biased towards datapoints having outcome value as 0 where it means that diabetes was not present actually. The number of non-diabetics is almost twice the number of diabetic patients","5bbd6aa9":"# Hyper Parameter optimization\nGrid search is an approach to hyperparameter tuning that will methodically build and evaluate a model for each combination of algorithm parameters specified in a grid. \n\nLet\u2019s consider the following example: \n\nSuppose, a machine learning model X takes hyperparameters a1, a2 and a3. In grid searching, you first define the range of values for each of the hyperparameters a1, a2 and a3. You can think of this as an array of values for each of the hyperparameters. Now the grid search technique will construct many versions of X with all the possible combinations of hyperparameter (a1, a2 and a3) values that you defined in the first place. This range of hyperparameter values is referred to as the grid. \n\nSuppose, you defined the grid as:\na1 = [0,1,2,3,4,5]\na2 = [10,20,30,40,5,60]\na3 = [105,105,110,115,120,125]\n\nNote that, the array of values of that you are defining for the hyperparameters has to be legitimate in a sense that you cannot supply Floating type values to the array if the hyperparameter only takes Integer values.\n\nNow, grid search will begin its process of constructing several versions of X with the grid that you just defined.\n\nIt will start with the combination of [0,10,105], and it will end with [5,60,125]. It will go through all the intermediate combinations between these two which makes grid search computationally very expensive.","c9807acb":"#### It is better to replace zeros with nan since after that counting them would be easier and zeros need to be replaced with suitable values","47cf3a41":"#### Heatmap for clean data","07924946":"## 2. Classification Report\n\nReport which includes Precision, Recall and F1-Score.\n\n\n#### Precision Score\n        TP \u2013 True Positives\n        FP \u2013 False Positives\n\n        Precision \u2013 Accuracy of positive predictions.\n        Precision = TP\/(TP + FP)\n        \n   \n#### Recall Score\n        FN \u2013 False Negatives\n\n        Recall(sensitivity or true positive rate): Fraction of positives that were correctly identified.\n        Recall = TP\/(TP+FN)\n        \n#### F1 Score\n        F1 Score (aka F-Score or F-Measure) \u2013 A helpful metric for comparing two classifiers.\n        F1 Score takes into account precision and the recall. \n        It is created by finding the the harmonic mean of precision and recall.\n\n        F1 = 2 x (precision x recall)\/(precision + recall)\n        \n        \n        \n> > ***Precision*** - Precision is the ratio of correctly predicted positive observations to the total predicted positive observations. The question that this metric answer is of all passengers that labeled as survived, how many actually survived? High precision relates to the low false positive rate. We have got 0.788 precision which is pretty good.\n> > \n> > Precision = TP\/TP+FP\n> > \n> > ***Recall (Sensitivity)*** - Recall is the ratio of correctly predicted positive observations to the all observations in actual class - yes. The question recall answers is: Of all the passengers that truly survived, how many did we label? A recall greater than 0.5 is good.\n> > \n> > Recall = TP\/TP+FN\n> > \n> > ***F1 score*** - F1 Score is the weighted average of Precision and Recall. Therefore, this score takes both false positives and false negatives into account. Intuitively it is not as easy to understand as accuracy, but F1 is usually more useful than accuracy, especially if you have an uneven class distribution. Accuracy works best if false positives and false negatives have similar cost. If the cost of false positives and false negatives are very different, it\u2019s better to look at both Precision and Recall. \n> > \n> > F1 Score = 2*(Recall * Precision) \/ (Recall + Precision)\n        \n        \nFor Reference: http:\/\/joshlawman.com\/metrics-classification-report-breakdown-precision-recall-f1\/\n                        : https:\/\/blog.exsilio.com\/all\/accuracy-precision-recall-f1-score-interpretation-of-performance-measures\/","0fbf62b3":"## Skewness\n\nA ***left-skewed distribution*** has a long left tail. Left-skewed distributions are also called negatively-skewed distributions. That\u2019s because there is a long tail in the negative direction on the number line. The mean is also to the left of the peak.\n\nA ***right-skewed distribution*** has a long right tail. Right-skewed distributions are also called positive-skew distributions. That\u2019s because there is a long tail in the positive direction on the number line. The mean is also to the right of the peak.\n\n\n![](https:\/\/www.statisticshowto.datasciencecentral.com\/wp-content\/uploads\/2014\/02\/pearson-mode-skewness.jpg)\n\n\n#### to learn more about skewness\nhttps:\/\/www.statisticshowto.datasciencecentral.com\/probability-and-statistics\/skewed-distribution\/","65082b15":"## OSEMN Pipeline \n* O - Obtaining our data\n* S - Scrubbing \/ Cleaning our data\n* E - Exploring \/ Visualizing our data will allow us to find patterns and trends\n* M - Modeling our data will give us our predictive power as a wizard\n* N - INterpreting our data\n\n\nFor reference : https:\/\/www.linkedin.com\/pulse\/life-data-science-osemn-randy-lao\/?lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_post_details%3BmDlg5VsdSBCLBps2R0vRZA%3D%3D"}}