{"cell_type":{"eb45f2f6":"code","670bd27d":"code","e3fcac3b":"code","02d0f5bf":"code","fdabfcd2":"code","c8d1a61e":"code","4fbac9fc":"code","53a6bcb3":"code","8a407298":"code","e6e49d22":"code","c0778d2d":"code","78ebcccb":"code","8ab171ed":"code","7e184c46":"code","cf28aca9":"code","c4377549":"markdown","99240db4":"markdown","1550d74e":"markdown","a5991feb":"markdown","7bd7c6a4":"markdown","f21279d4":"markdown","2dad6548":"markdown","898f3790":"markdown","e8af265e":"markdown","a5d6e599":"markdown","57166998":"markdown","0a0d2ff6":"markdown","48d07249":"markdown","ac8c012a":"markdown","1a141e3b":"markdown","6c195a96":"markdown"},"source":{"eb45f2f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","670bd27d":"!pip install jcopml","e3fcac3b":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\n\nfrom jcopml.pipeline import num_pipe, cat_pipe\nfrom jcopml.utils import save_model, load_model\nfrom jcopml.plot import plot_missing_value\nfrom jcopml.feature_importance import mean_score_decrease","02d0f5bf":"df= pd.read_csv('..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\ndf.head()","fdabfcd2":"df.isna().sum()","c8d1a61e":"df.info()","4fbac9fc":"# Check Missing Value\nplot_missing_value(df)","53a6bcb3":"df['quality'].value_counts()","8a407298":"df['quality'] = ['Good' if x>=7 else 'bad' for x in df['quality']]\ndf.head()","e6e49d22":"X = df.drop(columns='quality')\ny = df.quality\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","c0778d2d":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom jcopml.tuning import random_search_params as rsp","78ebcccb":"# Pipeline\npreprocessor = ColumnTransformer([\n    ('numeric', num_pipe(), ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',\n                             'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',\n                             'pH', 'sulphates', 'alcohol']),\n])\n\npipeline = Pipeline([\n    ('prep', preprocessor),\n    ('algo', XGBClassifier(n_jobs=-1, random_state=42))\n])\n\n# Training\nmodel = RandomizedSearchCV(pipeline, rsp.xgb_params, cv=3, n_jobs=-1, verbose=1)\nmodel.fit(X_train, y_train)\n\n# Evaluation\nprint(\"Best Parameter for XGB is {}\".format(model.best_params_))\nprint(\"Score for Data Train is {}\".format(model.score(X_train, y_train)))\nprint(\"Best Score is {}\".format(model.best_score_))\nprint(\"Score for Data Test is {}\".format(model.score(X_test, y_test)))","8ab171ed":"df_imp = mean_score_decrease(X_train, y_train, model, plot=True)","7e184c46":"# Pipeline\npreprocessor = ColumnTransformer([\n    ('numeric', num_pipe(poly=2), ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',\n                             'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',\n                             'pH', 'sulphates', 'alcohol']),\n])\n\npipeline = Pipeline([\n    ('prep', preprocessor),\n    ('algo', XGBClassifier(n_jobs=-1, random_state=42))\n])\n\n# Training\nmodel = RandomizedSearchCV(pipeline, rsp.xgb_poly_params, cv=3, n_jobs=-1, verbose=1)\nmodel.fit(X_train, y_train)\n\n# Evaluation\nprint(\"Best Parameter for XGB is {}\".format(model.best_params_))\nprint(\"Score for Data Train is {}\".format(model.score(X_train, y_train)))\nprint(\"Best Score is {}\".format(model.best_score_))\nprint(\"Score for Data Test is {}\".format(model.score(X_test, y_test)))","cf28aca9":"parameter = {'algo__colsample_bytree': 0.5163168100195784,\n             'algo__gamma': 1,\n             'algo__learning_rate': 0.24410494920734804,\n             'algo__max_depth': 8,\n             'algo__n_estimators': 172,\n             'algo__reg_alpha': 0.015391401698302503,\n             'algo__reg_lambda': 0.025101867367220122,\n             'algo__subsample': 0.7658130344388201}\n\n# Pipeline\npreprocessor = ColumnTransformer([\n    ('numeric', num_pipe(), ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',\n                             'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',\n                             'pH', 'sulphates', 'alcohol']),\n])\n\npipeline = Pipeline([\n    ('prep', preprocessor),\n    ('algo', XGBClassifier(parameter=parameter, n_jobs=-1, random_state=42))\n])\n\n# Training\nmodel = pipeline.fit(X_train, y_train)\n\n# Evaluation\nprint(\"Score for Data Train is {}\".format(model.score(X_train, y_train)))\nprint(\"Score for Data Test is {}\".format(model.score(X_test, y_test)))","c4377549":"Dataset is Clean for NaN Values","99240db4":"Woow our data is not having any null value. So there's no need to clean the data. \ud83d\ude03\ud83d\ude03\n\nNow let's check the information about the features we have.","1550d74e":"# Phase 3 : Polynomial","a5991feb":"See our quality variable have values good and bad.\nNow our data needs just one thing more to be ready for modelling.\n\nI used Pipeline Model for Fast Practice Build a Model","7bd7c6a4":"So we have total 1599 rows each having 12 features.\nLet's explore the data ","f21279d4":"I think all feature is importance to include in model... :)","2dad6548":"# Conclusion Model","898f3790":"**So we can see that Score Highest of XGB Classifier is 91%**\n\n**Conclusion: After 3 Phase, I found Best Parameter and I Fiiting to Model and Get Score 91%**\n\n**PLEASE UPVOTE MY NOTEBOOK IF IT HELPED YOU** \ud83d\ude0a\ud83d\ude0a","e8af265e":"Let's check if there are any null values","a5d6e599":"I found best Parameter and I fitting to model :)","57166998":"# Training Phase 1 : Simple Thinking","0a0d2ff6":"# Import Data & Feature Engineering","48d07249":"So we can see there are only 217 (199+18) records having quality >=7 i.e of good quality\n\nNow let's change our target variable(quality) into good and bad.","ac8c012a":"# Dataset Splitting","1a141e3b":"## Wine-quality-classifier \ud83c\udf77\ud83c\udf7e\n\nJust follow this notebook till the end and you could predict quality of wine is good or bad.\n\n**In this notebook we'll classify the quality of wine into Good or Bad.\nAlltough in the data the target variable have numbers between 0-10 but we can classify it by classifying all obsevations as:**\n        \n* quality >= 7  as  good\n* quality < 7 as bad\n\nLet's firstly import data and analyse it ","6c195a96":"# Phase 2 : Feature Importance"}}