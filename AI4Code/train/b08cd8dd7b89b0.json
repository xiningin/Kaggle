{"cell_type":{"f8a7e473":"code","21ddb736":"code","92ddbb58":"code","007a68a3":"code","11be0d2d":"code","a96fbb55":"code","5d9b399f":"code","bf53c2b6":"code","4f75365b":"code","84030783":"code","da102f5a":"code","d6686ff8":"code","73165f4b":"code","9f55fcab":"code","8fe9e0eb":"code","182c0f26":"code","c3bb94aa":"code","f3bcf1df":"code","b71402c6":"code","5dd96909":"code","eeb729b5":"code","c6864292":"code","d2bb75e2":"code","7bdcd8b3":"code","d26032e1":"code","a3710a5c":"code","f9c6b2a8":"code","b86d6db5":"code","5ec7af81":"markdown","ed1837d6":"markdown","c171f32b":"markdown","48da8255":"markdown","d75111f8":"markdown","cf4a7900":"markdown","17c84114":"markdown","c803152f":"markdown","5f192a2a":"markdown","dcee34d9":"markdown","03b01802":"markdown","a138c9fa":"markdown","a5adfe65":"markdown","7d23df6a":"markdown","56df6340":"markdown","8d733847":"markdown","03b8a896":"markdown","c03cfeff":"markdown","37bb4f8a":"markdown","9b74e6f3":"markdown","16d3cab6":"markdown","80b5bd8b":"markdown","ef229df4":"markdown","3c4c43ae":"markdown","201b072e":"markdown","f77c2e7f":"markdown","91c4b75b":"markdown","c8bbe441":"markdown","c0a54ba7":"markdown","7c97356a":"markdown","2bb33340":"markdown","7ca1b037":"markdown"},"source":{"f8a7e473":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","21ddb736":"dataset = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","92ddbb58":"dataset.head()","007a68a3":"dataset.info()","11be0d2d":"dataset.isnull().sum()","a96fbb55":"dataset.describe()","5d9b399f":"dataset.Outcome.value_counts()","bf53c2b6":"sns.countplot(x='Outcome', data=dataset)","4f75365b":"print(sns.distplot(dataset['Pregnancies']))\n\n_, axes = plt.subplots(1,2, sharey=True, figsize=(10,5))\nsns.boxplot(data=dataset['Pregnancies'], ax=axes[0]);\nsns.violinplot(data=dataset['Pregnancies'], ax=axes[1])\n\nsns.FacetGrid(data=dataset, hue='Outcome', height=5) \\\n .map(sns.distplot, 'Pregnancies') \\\n .add_legend()\nplt.title('PDF with Pregnancies')\nplt.show()\n\nsns.FacetGrid(data=dataset, hue='Outcome', height=5) \\\n .map(plt.scatter, 'Outcome', 'Pregnancies')\\\n .add_legend()\nplt.title('Sebaran Pasien Berdasarkan Pregnancies')\nplt.show()","84030783":"print(sns.distplot(dataset['Glucose']))\n\n_, axes = plt.subplots(1,2, sharey=True, figsize=(10,5))\nsns.boxplot(data=dataset['Glucose'], ax=axes[0]);\nsns.violinplot(data=dataset['Glucose'], ax=axes[1]);\n\nsns.FacetGrid(dataset, hue=\"Outcome\", height=5) \\\n .map(sns.distplot, \"Glucose\") \\\n .add_legend()\nplt.title('PDF with Glucose')\nplt.show()\n\nsns.FacetGrid(dataset, hue = 'Outcome', height = 5)\\\n.map(plt.scatter, 'Outcome', 'Glucose')\\\n.add_legend()\nplt.title('Distribusi Pasien Berdasarkan Glucose')\nplt.show()","da102f5a":"sns.distplot(dataset['BloodPressure'])\n\n_, axes = plt.subplots(1,2, sharey=True, figsize=(10,5))\nsns.boxplot(data=dataset['BloodPressure'], ax=axes[0]);\nsns.violinplot(data=dataset['BloodPressure'], ax=axes[1]);\n\nsns.FacetGrid(dataset, hue=\"Outcome\", height=5) \\\n .map(sns.distplot, \"BloodPressure\") \\\n .add_legend()\nplt.title('PDF with BloodPressure')\nplt.show()\n\nsns.FacetGrid(dataset, hue = 'Outcome', height = 5)\\\n.map(plt.scatter, 'Outcome', 'BloodPressure')\\\n.add_legend()\nplt.title('Distribusi Pasien Berdasarkan BloodPressure')\nplt.show()","d6686ff8":"sns.distplot(dataset['SkinThickness'])\n\n_, axes = plt.subplots(1,2, sharey=True, figsize=(10,5))\nsns.boxplot(data=dataset['SkinThickness'], ax=axes[0]);\nsns.violinplot(data=dataset['SkinThickness'], ax=axes[1]);\n\nsns.FacetGrid(dataset, hue=\"Outcome\", height = 5) \\\n .map(sns.distplot, \"SkinThickness\") \\\n .add_legend()\nplt.title('PDF with SkinThickness')\nplt.show()\n\nsns.FacetGrid(dataset, hue = 'Outcome', height = 5)\\\n.map(plt.scatter, 'Outcome', 'SkinThickness')\\\n.add_legend()\nplt.title('Distribusi Pasien Berdasarkan SkinThickness')\nplt.show()","73165f4b":"sns.distplot(dataset['Insulin'])\n\n_, axes = plt.subplots(1,2, sharey=True, figsize=(10,5))\nsns.boxplot(data=dataset['Insulin'], ax=axes[0]);\nsns.violinplot(data=dataset['Insulin'], ax=axes[1]);\n\nsns.FacetGrid(dataset, hue=\"Outcome\", height=5) \\\n .map(sns.distplot, \"Insulin\") \\\n .add_legend()\nplt.title('PDF with Insulin')\nplt.show()\n\nsns.FacetGrid(dataset, hue = 'Outcome', height = 5)\\\n.map(plt.scatter, 'Outcome', 'Insulin')\\\n.add_legend()\nplt.title('Distribusi Pasien Berdasarkan Insulin')\nplt.show()","9f55fcab":"sns.distplot(dataset['BMI'])\n\n_, axes = plt.subplots(1,2, sharey=True, figsize=(10,5))\nsns.barplot(data=dataset['BMI'], ax=axes[0]);\nsns.violinplot(data=dataset['BMI'], ax=axes[1]);\n\nsns.FacetGrid(dataset, hue='Outcome', height=5) \\\n .map(sns.distplot, 'BMI') \\\n .add_legend()\nplt.title('PDF with BMI')\nplt.show()\n\nsns.FacetGrid(dataset, hue='Outcome', height=5) \\\n .map(plt.scatter, 'Outcome', 'BMI') \\\n .add_legend()\nplt.title('Sebaran pasien berdasarkan BMI')\nplt.show","8fe9e0eb":"sns.distplot(dataset['DiabetesPedigreeFunction'])\n\n_, axes = plt.subplots(1,2, sharey=True, figsize=(10,6))\nsns.boxplot(data=dataset['DiabetesPedigreeFunction'], ax=axes[0]);\nsns.violinplot(data=dataset['DiabetesPedigreeFunction'], ax=axes[1])\n\nsns.FacetGrid(data=dataset, hue='Outcome', height=5) \\\n .map(sns.distplot, 'DiabetesPedigreeFunction') \\\n .add_legend()\nplt.title('PDF with DiabetesPedigreeFunction')\nplt.show\n\nsns.FacetGrid(data=dataset, hue='Outcome', height=5) \\\n .map(plt.scatter, 'Outcome','DiabetesPedigreeFunction') \\\n .add_legend()\nplt.title('Sebaran pasien berdasarkan DiabetesPedigreeFunction')\nplt.show()","182c0f26":"sns.distplot(dataset['Age'])\n\n_, axes = plt.subplots(1,2, sharey=True, figsize=(10,6))\nsns.boxplot(data=dataset['Age'], ax=axes[0]);\nsns.violinplot(data=dataset['Age'], ax=axes[1])\n\nsns.FacetGrid(data=dataset, hue='Outcome', height=5) \\\n .map(sns.distplot, 'Age') \\\n .add_legend()\nplt.title('PDF with Age')\nplt.show\n\nsns.FacetGrid(data=dataset, hue='Outcome', height=5) \\\n .map(plt.scatter, 'Outcome','Age') \\\n .add_legend()\nplt.title('Sebaran pasien berdasarkan Age')\nplt.show()","c3bb94aa":"sns.pairplot(data=dataset)","f3bcf1df":"#Membuat variabel constanta\nfrom statsmodels.tools import add_constant as add_constant\ndataset_df = add_constant(dataset)\ndataset_df.head()","b71402c6":"import statsmodels.api as sm\ncolumn = dataset_df.columns[:-1]\nmodel = sm.Logit(dataset_df.Outcome, dataset_df[column])\nresult=model.fit()\nresult.summary()","5dd96909":"def back_feature_elem (data_frame,dep_var,col_list):\n   \n    while len(col_list)>0 :\n        model=sm.Logit(dep_var,data_frame[col_list])\n        result=model.fit(disp=0)\n        largest_pvalue=round(result.pvalues,3).nlargest(1)\n        if largest_pvalue[0]<(0.05):\n            return result\n            break\n        else:\n            col_list=col_list.drop(largest_pvalue.index)\n\nresult=back_feature_elem(dataset_df,dataset.Outcome,column)\nresult.summary()","eeb729b5":"params = np.exp(result.params)\nconf = np.exp(result.conf_int())\nconf['OR'] = params\npvalue = round(result.pvalues,3)\nconf['Pvalue']=pvalue\nconf.columns = ['CI 95%', 'CI 97%', 'Odds Ratio', 'Pvalue']\nprint((conf))","c6864292":"X = dataset.iloc[:,[0,1,2,5,6]].values\ny = dataset.iloc[:, 8].values\n\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.25 , random_state=0)\n\nfrom sklearn.linear_model import LogisticRegression\nlreg = LogisticRegression(random_state=0)\nlreg.fit(X_train, y_train)\n\ny_pred = lreg.predict(X_test)","d2bb75e2":"from sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\ncm = confusion_matrix(y_test,y_pred)\ncr = classification_report(y_test,y_pred)\nakurasi = metrics.accuracy_score(y_test,y_pred)\nprint(cm)\nprint(cr)\nprint('akurasi yang dimiliki oleh model: %0.2f ' %(akurasi*100),'%')","7bdcd8b3":"from pandas import DataFrame\nconf_matrix = pd.DataFrame(data=cm, columns=['Positif:1', 'Negatif:0'], index=['Positif:1','Negatif:0'])\nplt.figure(figsize=(5,5))\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='YlGnBu')","d26032e1":"TP = cm[1,1]\nTN = cm[0,0]\nFN = cm[1,0]\nFP = cm[0,1]\nsensitivity=TP\/float(TP+FN)\nspecificity=TN\/float(TN+FP)","a3710a5c":"print('The acuuracy of the model = TP+TN\/(TP+TN+FP+FN) = ',(TP+TN)\/float(TP+TN+FP+FN),'\\n',\n\n'The Missclassification = 1-Accuracy = ',1-((TP+TN)\/float(TP+TN+FP+FN)),'\\n',\n\n'Sensitivity or True Positive Rate = TP\/(TP+FN) = ',TP\/float(TP+FN),'\\n',\n\n'Specificity or True Negative Rate = TN\/(TN+FP) = ',TN\/float(TN+FP),'\\n',\n\n'Positive Predictive value = TP\/(TP+FP) = ',TP\/float(TP+FP),'\\n',\n\n'Negative predictive Value = TN\/(TN+FN) = ',TN\/float(TN+FN),'\\n',\n\n'Positive Likelihood Ratio = Sensitivity\/(1-Specificity) = ',sensitivity\/(1-specificity),'\\n',\n      \n'Negative likelihood Ratio = (1-Sensitivity)\/Specificity = ',(1-sensitivity)\/specificity)      ","f9c6b2a8":"y_pred_prob=lreg.predict_proba(X_test)[:,:]\ny_pred_prob_df=pd.DataFrame(data=y_pred_prob, columns=['no Diabetes','Diabetes'])\ny_pred_prob_df.head()","b86d6db5":"from sklearn.metrics import roc_curve\nimport sklearn\n\nlogistik=lreg.predict_proba(X_test)\nAUC = sklearn.metrics.roc_auc_score(y_test,logistik[:,1])\nfpr, tpr, thresholds = roc_curve(y_test, logistik[:,1])\n\n#Plotting AUC=0.5 Red Line\nplt.plot([0,1],[0,1],color='red', linestyle = '--')\n\n#Plotting ROC Graph (Blue)\nplt.plot(fpr,tpr, label='ROC Curve (AUC= %0.2f' % AUC)\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.title('ROC curve for Diabetes')\nplt.xlabel('False positive rate (1-Specificity)')\nplt.ylabel('True positive rate (Sensitivity)')\nplt.legend(loc='lower right')\nplt.grid(True)","5ec7af81":"1. Semua atribut yang dipilih setelah proses eliminasi menunjukkan Pvalues lebih rendah dari 5% dan dengan demikian menunjukkan peran signifikan dalam prediksi penyakit Diabetes.\n\n2. BMI yang tinggi memiliki resiko 2 kali terkena penyakit Diabetes. kehamilan, glukosa, tekanan darah, dan Riwayat Keturunan juga berpengaruh dengan terjadinya penyakit Diabetes.\n\n3. Model diprediksi dengan akurasi 81%. Model ini lebih spesifik daripada sensitif.\n\n4. Area di bawah kurva ROC adalah 87% yang menunjukkan model cukup memuaskan.\n\n5. Model keseluruhan dapat ditingkatkan dengan lebih banyak data.","ed1837d6":"**Interpreting the Results: Odds Ratio, Confidence Interval and Pvalues**","c171f32b":"### Age ","48da8255":"### SkinThickness","d75111f8":"**Logistic Regression**\n\nRegresi Logistik adalah salah satu tipe analisis regresi di statistik yang digunakan untuk memprediksi sebuah keluaran variabel dependen yang menjadi prediktor dari variabel independen. didalam regresi logistik banyak digunakan untuk memprediksi dan juga menghitung kesuksesan probabilitas","cf4a7900":"# 1. Data Background","17c84114":"### DiabetesPedigreeFunction","c803152f":"# 5. Model Testing\/Evaluation","5f192a2a":"**Source:**\n\nDataset ini tersedia di kaggle website: https:\/\/www.kaggle.com\/uciml\/pima-indians-diabetes-database, Dataset ini berasal dari National Institute of Diabetes and Digestive and Ginjal Diseases. Tujuan dari dataset adalah untuk memprediksi secara diagnostik apakah pasien memiliki diabetes, berdasarkan pengukuran diagnostik tertentu yang termasuk dalam dataset. Secara khusus, semua pasien di sini adalah wanita yang berumur 21 tahun dari Prima Indian Heritage.","dcee34d9":"**Confusion Matrix**","03b01802":"**Predicted Probabillities**","a138c9fa":"# Table of Content\n\n1. Data Background\n2. Data Preparation\n3. Data Visualization\n4. Building the Model\n5. Testing Model","a5adfe65":"**Backward Elimination**","7d23df6a":"# 4. Building the Model","56df6340":"### Rekap Visualisasi","8d733847":"# Kesimpulan","03b8a896":"**Spliting Data**","c03cfeff":"### BMI ","37bb4f8a":"**Model Evaluasi**","9b74e6f3":"### Variabel Pregnancies ","16d3cab6":"### Glucose","80b5bd8b":"# 3. Data Exploration","ef229df4":"# Introduction","3c4c43ae":"# Distribusi Variabel Independen","201b072e":"**Kurfa ROC**","f77c2e7f":"### Blood Presure","91c4b75b":"Dari tabel diatas dapat dilihat bahwa variabel yang lebih dari 5% (>0.05) menunjukkan tidak mempengaruhi hubungan yang signifikan dengan diabetes. maka dari itu variabel tersebut harus dikeluarkan dengan variabel yg memiliki Pvalue terbesar (SkinThickness). hal itu dilakukan berulang sampai tidak ada variabel yang melebihi 0.05 ","c8bbe441":"Confusion Matrix menunjukkan 113 + 36 = 149 data prediksi benar dan 26+11 = 37 data prediksi salah\n\nTrue Positive = 113\n\nTrue Negative = 36\n\nFalse Positive = 11\n\nFalse Negative = 26","c0a54ba7":"### Insulin","7c97356a":"**Konteks**\n\nDataset ini berasal dari National Institute of Diabetes and Digestive and Ginjal Diseases. Tujuan dari dataset adalah untuk memprediksi secara diagnostik apakah pasien memiliki diabetes, berdasarkan pengukuran diagnostik tertentu yang termasuk dalam dataset. Beberapa kendala ditempatkan pada pemilihan instance ini dari database yang lebih besar. Secara khusus, semua pasien di sini adalah wanita setidaknya 21 tahun dari warisan India Pima.\n\n**Konten**\n\nKumpulan data terdiri dari beberapa variabel prediktor medis dan satu variabel target, Hasil. Variabel prediktor meliputi jumlah kehamilan yang pernah dialami pasien, BMI mereka, tingkat insulin, usia, dan sebagainya.","2bb33340":"# 2.Data Preparation","7ca1b037":"* Pregnancies = Jumlah kehamilan\n* Glucose = konsentrasi glukosa 2 jam dalam tes toleransi glukosa oral\n* BloodPressure = Tekanan darah diastolik (mm Hg)\n* SkinThickness = Ketebalan lipatan kulit (mm)\n* Insulin = 2-Jam serum insulin (mu U \/ ml)\n* BMI = Indeks massa tubuh (berat dalam kg \/ (tinggi dalam m) ^ 2)\n* DiabetesPedigreeFunction = Riwayat keturunan diabetes\n* Age = Umur (tahun)\n* Variabel Outcome = Class (0 atau 1) 268 dari 768 adalah 1, yang lain adalah 0"}}