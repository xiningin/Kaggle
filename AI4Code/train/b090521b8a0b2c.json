{"cell_type":{"11d8d412":"code","c2420331":"code","10e9bb82":"code","31dd474d":"code","4d4243c1":"code","16ab9dc3":"code","664ea85f":"code","2323ba90":"code","9b1ab79d":"code","db1386b4":"code","8cd37b7c":"code","f2150194":"code","3632eb68":"code","30b311a0":"code","04ca2b66":"code","dc9b6f6c":"code","c51361a9":"code","271febf2":"code","df647077":"code","06bd4521":"code","b7403103":"code","bc6a2faa":"code","cbb7ee81":"code","c3fd7c72":"code","0086a3fa":"code","6ac63021":"code","8fb2d467":"code","cc45a7a5":"code","dc8810a4":"code","f39b5f96":"code","b97ed84d":"code","38d6a8a0":"code","abb760e8":"code","b0e82985":"code","f519dea7":"code","32c85380":"code","a9e2a2d2":"code","9730dd9d":"markdown","c8ace482":"markdown","b5c85c51":"markdown","306dbf39":"markdown","d5a62cb9":"markdown","f825ee17":"markdown","37411817":"markdown","51979101":"markdown","62f6080c":"markdown","861413a3":"markdown","bdbea9c6":"markdown","cf061366":"markdown","a1782549":"markdown","5a1ca793":"markdown","e67f101d":"markdown","e50b3dcd":"markdown","97112bf4":"markdown","a718f0e9":"markdown","beb4c1cc":"markdown","0d756ff2":"markdown","f4e6ad40":"markdown","82cc2bac":"markdown","c0800102":"markdown","21c3fe14":"markdown","3686d6d8":"markdown","33f26d79":"markdown","b3789b47":"markdown","be1a3908":"markdown","e0017eb4":"markdown","c1f23599":"markdown"},"source":{"11d8d412":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error","c2420331":"house_train_df = pd.read_csv('..\/input\/train.csv')\nhouse_test_df = pd.read_csv('..\/input\/test.csv')\nntrain = house_train_df.shape\nntest = house_test_df.shape\nprint ((ntrain), (ntest))","10e9bb82":"n_train = house_train_df.shape[0]\nn_test = house_test_df.shape[0]\nhouse_train_df.head()","31dd474d":"train_ID = house_train_df['Id']\ntest_ID = house_test_df['Id']\nhouse_train_df.drop(\"Id\", axis = 1, inplace = True)\nhouse_test_df.drop(\"Id\", axis = 1, inplace = True)","4d4243c1":"house_train_df.describe()","16ab9dc3":"house_train_df.select_dtypes(exclude=['object']).columns","664ea85f":"house_train_df.select_dtypes(exclude=['object']).isnull().sum().sort_values(ascending=False).head(5)","2323ba90":"house_train_df.select_dtypes(include=['object']).columns","9b1ab79d":"house_train_df.select_dtypes(include=['object']).isnull().sum().sort_values(ascending=False).head(20)","db1386b4":"house_test_df.select_dtypes(exclude=['object']).isnull().sum().sort_values(ascending=False).head(12)","8cd37b7c":"house_test_df.select_dtypes(include=['object']).isnull().sum().sort_values(ascending=False).head(25)","f2150194":"n_train = house_train_df.shape[0]\nn_test = house_test_df.shape[0]\n\ntarget_price = house_train_df.SalePrice.values\n\nhouse_data = pd.concat((house_train_df, house_test_df)).reset_index(drop=True)\n\nhouse_data.drop(['SalePrice'], axis=1, inplace=True)\nhouse_data.shape","3632eb68":"house_data[house_data[\"MasVnrType\"] == 'NaN'].MasVnrArea.mean()","30b311a0":"for col in ('GarageArea', 'GarageCars'):\n    house_data[col] = house_data[col].fillna(0)\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath', 'MasVnrArea'):\n    house_data[col] = house_data[col].fillna(0)\nhouse_data[\"LotFrontage\"] = house_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median())) \nhouse_data[\"GarageYrBlt\"] = house_data['GarageYrBlt'].fillna(house_data['YearBuilt'])","04ca2b66":"for col in ('GarageCond', 'GarageQual', 'GarageFinish', 'GarageType' ):\n    house_data[col] = house_data[col].fillna(\"None\")\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1','MasVnrType', 'BsmtFinType2'):\n    house_data[col] = house_data[col].fillna(\"None\")\nfor col in ('PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu' ):\n    house_data[col] = house_data[col].fillna(\"None\")\nfor col in ('MSZoning', 'Utilities', 'Functional', 'KitchenQual', 'SaleType', 'Exterior2nd','Electrical', 'Exterior1st'):    \n    house_data[col] = house_data[col].fillna(house_data[col].mode()[0])  ","dc9b6f6c":"house_data.isnull().sum().sort_values(ascending=False).head()","c51361a9":"train_df = house_data[:n_train]\ntest_df = house_data[n_train:]\ntrain_df['SalePrice'] = target_price","271febf2":"plt.hist(house_train_df.SalePrice)\nplt.show()\n#sns.distplot(house_train_df['SalePrice'])","df647077":"target = train_df.SalePrice\nplt.figure(figsize=(8,5))\nsns.distplot(target)\nplt.title('Distribution of SalePrice')","06bd4521":"sns.distplot(np.log(target))\nplt.title('Distribution of Log-transformed SalePrice')\nplt.xlabel('log(SalePrice)')","b7403103":"from matplotlib.pyplot import xticks\nplt.figure(figsize=(15,9))\nsns.boxplot(x = train_df['Neighborhood'], y = train_df['SalePrice'])\nxticks(rotation=90)","bc6a2faa":"#fig, (ax1, ax2) = plt.subplots(1, 2)\nplt.figure(figsize=(8,5))\nax1 = train_df.groupby('OverallQual')['SalePrice'].mean().plot.bar()\nplt.figure(figsize=(8,5))\nax2 = sns.boxplot(x = train_df['OverallQual'], y = train_df['SalePrice'])\n","cbb7ee81":"sns.lmplot(x=\"GarageArea\", y=\"SalePrice\", data=train_df)","c3fd7c72":"plt.figure(figsize=(15,9))\nsns.boxplot(x = train_df['Neighborhood'], y = train_df['SalePrice'])","0086a3fa":"house_data['YrSold'] = house_data['YrSold'].astype(str)\nhouse_data['MoSold'] = house_data['MoSold'].astype(str)","6ac63021":"corrmat = train_df.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True)","8fb2d467":"k = 10 \ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train_df[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, annot_kws={'size': 10},  yticklabels=cols.values, xticklabels=cols.values)","cc45a7a5":"low_cardinality_cols = [cname for cname in house_data.columns if \n                                house_data[cname].nunique() < 30 and\n                                house_data[cname].dtype == \"object\"]\nnumeric_cols = [cname for cname in house_data.columns if \n                                house_data[cname].dtype in ['int64', 'float64']]\nmy_cols = low_cardinality_cols + numeric_cols\n#low_cardinality_cols\nhouse_data = house_data[my_cols]","dc8810a4":"house_data_dummy = pd.get_dummies(house_data)","f39b5f96":"train_data = house_data_dummy[:n_train]\ntest_data  = house_data_dummy[n_train:]","b97ed84d":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train, X_test, y_train, y_test = train_test_split(train_data, target_price, test_size = 0.25, random_state = 0)\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\ntest_data = scaler.fit_transform(test_data)","38d6a8a0":"X_train.shape","abb760e8":"X_test.shape","b0e82985":"my_model = XGBRegressor(n_estimators=1000, learning_rate=0.05)\nmy_model.fit(X_train, y_train, early_stopping_rounds=10, eval_set=[(X_test, y_test)], verbose=False)","f519dea7":"predictions = my_model.predict(X_test)\nprint(\"Mean Absolute Error : \" + str(mean_absolute_error(predictions, y_test)))","32c85380":"pred_test = my_model.predict(test_data)\nprint(pred_test)","a9e2a2d2":"sub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = pred_test\nsub.to_csv('submission_price.csv', index=False)","9730dd9d":"*Submissions*","c8ace482":"**Saleprice and relationship with neighbourhood **","b5c85c51":"**Reading in input file**","306dbf39":"*Standardize features *","d5a62cb9":"*removing some variable*","f825ee17":"**SalePrice correlation matrix **","37411817":"*categrical missing values witin train dataset*","51979101":"*numerical missing values witin train dataset*","62f6080c":"Missing Vaneer type and vaneer area","861413a3":"*Categorical columns within the train dataset*","bdbea9c6":"**Saleprice and relationship with Garagearea**","cf061366":"Separating the training and test data set","a1782549":"*categrical missing values witin train dataset*","5a1ca793":"**Handling missing value**\n\n*Numericall columns within the train dataset*","e67f101d":"*target price and combining whole data to fill missing values*","e50b3dcd":"**Review data**\n\nStatistical Description","97112bf4":"**First Thing : Analysing Saleprice**","a718f0e9":"Dropping the ID","beb4c1cc":"*getting Dummy data for categorical variable*","0d756ff2":"Checking for any missing values","f4e6ad40":"**Import modules**","82cc2bac":"filling missing cateorical values","c0800102":"*filling missing numerical values*","21c3fe14":"*mean_absolute_error*","3686d6d8":"*predictions*","33f26d79":"**Saleprice and relationship with Overall quality **","b3789b47":"*numerical missing values witin test dataset*","be1a3908":"**correlation matrix **","e0017eb4":"Look at few rows","c1f23599":"**XGBRegressor**"}}