{"cell_type":{"c560813d":"code","d35a6b22":"code","ade66232":"code","1f008371":"code","cfddff3b":"code","7a923665":"code","97277462":"code","50826405":"code","3183ba42":"markdown","05283f90":"markdown","4bbbee03":"markdown","01cbcf21":"markdown","f2074b70":"markdown","3964b5d1":"markdown","6804de9b":"markdown"},"source":{"c560813d":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport random\nimport cv2\nimport os\nfrom tqdm import tqdm\nimport numpy as np\nfrom sklearn.metrics import roc_auc_score","d35a6b22":"fig, axarr = plt.subplots(3,3)\nfig.set_size_inches((20, 20))\n\nsrc_dir = \"..\/input\/blur_dataset_scaled\"\nimages = os.listdir(os.path.join(src_dir, 'sharp'))\n\nfor row_index in range(3):\n    image = random.choice(images)\n    print(image)\n    for col_index, image_type in enumerate(['S', 'F', 'M']):\n        if image_type == 'S':\n            sub_dir = 'sharp'\n        elif image_type == 'F':\n            sub_dir = 'defocused_blurred'\n        elif image_type == 'M':\n            sub_dir = 'motion_blurred'\n        image = image.split('.')[0][:-1] + image_type + '.' + image.split('.')[1]\n        image_path = os.path.join(src_dir, sub_dir, image)\n        image_data = mpimg.imread(image_path)\n        axarr[row_index,col_index].imshow(image_data, interpolation='nearest')\n        axarr[row_index,col_index].axis('off')\nplt.show()","ade66232":"def variance_of_laplacian(image):\n    return cv2.Laplacian(image, cv2.CV_64F).var()","1f008371":"src_dir = \"..\/input\/blur_dataset_scaled\/sharp\"\nsharp_images = [os.path.join(src_dir, x) for x in os.listdir(src_dir)]\nsharp_values = []\nfor image_path in tqdm(sharp_images):\n    image = cv2.imread(image_path)\n    sharp_values.append(variance_of_laplacian(image))","cfddff3b":"src_dir = \"..\/input\/blur_dataset_scaled\/defocused_blurred\"\ndefocused_images = [os.path.join(src_dir, x) for x in os.listdir(src_dir)]\ndefocused_values = []\nfor image_path in tqdm(defocused_images):\n    image = cv2.imread(image_path)\n    defocused_values.append(variance_of_laplacian(image))","7a923665":"\nsrc_dir = \"..\/input\/blur_dataset_scaled\/motion_blurred\"\nmotion_images = [os.path.join(src_dir, x) for x in os.listdir(src_dir)]\nmotion_values = []\nfor image_path in tqdm(motion_images):\n    image = cv2.imread(image_path)\n    motion_values.append(variance_of_laplacian(image))","97277462":"plt.hist(sharp_values, alpha=0.33, bins=20, color='r', range=(0,500), label='sharp')  # set x limit because in sharp we have values more than 5k\nplt.hist(defocused_values, alpha=0.33, bins=20, color='b', range=(0,500), label='defocused')\nplt.hist(motion_values, alpha=0.33, bins=20, color='g', range=(0,500), label='motion')\nplt.legend()\nplt.show()","50826405":"labels = np.zeros(len(sharp_images)*3)\nall_values = np.zeros(len(sharp_images)*3)\nfor index, v in enumerate(sharp_values):\n    labels[index] = 1\n    all_values[index] = v\nfor index, v in enumerate(defocused_values):\n    all_values[index + len(sharp_images)] = v\nfor index, v in enumerate(motion_values):\n    all_values[index + len(sharp_images)*2] = v\n    \nprint(len(labels), sum(labels))\nprint(len(all_values), max(all_values), min(all_values), np.average(all_values))\n\nprint(f'ROC-AUC Value is {roc_auc_score(labels, all_values):.3f}')","3183ba42":"### Sharp images:","05283f90":"## Samples:","4bbbee03":"### Histogram of results:","01cbcf21":"### Defocused blurred images","f2074b70":"### Calc ROC-AUC","3964b5d1":"## Blur detection based on Variation of the Laplacian\n(from https:\/\/github.com\/priyabagaria\/Image-Blur-Detection)","6804de9b":"### Motion blurred images"}}