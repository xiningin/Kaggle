{"cell_type":{"014cc2a3":"code","52d58279":"code","47a55db8":"code","fc8ef9d5":"code","6af8f64c":"code","d4dfc326":"code","262fe3e7":"code","1ee4fb3b":"code","dbadf9b2":"code","f07e9c58":"code","5093ed7c":"code","bfad2bfc":"code","8d7733fc":"code","21cc9189":"code","6f9c2ae7":"code","bedefe6d":"code","b4da47f3":"markdown","9ac1f5a8":"markdown","257a327a":"markdown","de0a4e15":"markdown","50bfda86":"markdown","06c84dbe":"markdown"},"source":{"014cc2a3":"!pip install fastai --upgrade -q\nfrom fastai.vision.all import *\n# from fastai.callback.cutmix import *\n\n!pip install wwf -q\n!pip install timm -q\nfrom wwf.vision.timm import *\n\n# !pip install efficientnet_pytorch -q\n# from efficientnet_pytorch import EfficientNet","52d58279":"path = Path('..\/input\/planets-dataset\/planet\/planet')","47a55db8":"train_df = pd.read_csv(path\/'train_classes.csv')\ntrain_df","fc8ef9d5":"def get_x(r):\n    return path\/'train-jpg'\/(r['image_name']+'.jpg')\n\ndef get_y(r):\n    return r['tags'].split()\n\ndef get_data(size=224,bs=64,data_df=train_df):\n    dblock = DataBlock(blocks=(ImageBlock, MultiCategoryBlock),\n                       splitter=RandomSplitter(seed=42),\n                       get_x=get_x, \n                       get_y=get_y,\n                       item_tfms = Resize(size),\n                       batch_tfms = [*aug_transforms(flip_vert=True,max_warp=0),\n                                     Normalize.from_stats(*imagenet_stats)]\n                      )\n    return dblock.dataloaders(data_df,bs=bs)","6af8f64c":"dls = get_data(300,40)","d4dfc326":"dls.show_batch(nrows=2, ncols=3)","262fe3e7":"# f2macro = FBetaMulti(beta=2,average='macro')\n# f2micro = FBetaMulti(beta=2,average='micro')\nf2samples = FBetaMulti(beta=2,average='samples',thresh=0.2)\n\n# model = EfficientNet.from_pretrained('efficientnet-b7', get_c(dls))\nmetrics = [partial(accuracy_multi, thresh=0.2), f2samples]\ncbs = [MixUp,\n      # SaveModelCallback(monitor='fbeta_score')\n      ] ","1ee4fb3b":"# learn = cnn_learner(dls, resnet50, metrics=metrics, cbs=cbs)\n# learn = Learner(dls, model, metrics=metrics, f2samples], cbs=cbs)\n\nlearn = timm_learner(dls, 'efficientnet_b3', metrics=metrics, cbs=cbs)\n\n# learn.lr_find()","dbadf9b2":"learn.fine_tune(15, base_lr=3e-2, freeze_epochs=6)","f07e9c58":"# def f2_score(y_pred, y_true, threshold=0.5, beta=2, eps=1e-9):\n#     y_pred = (y_pred > threshold).float()\n\n#     true_positives  = (y_pred * y_true)\n#     true_negatives  = ((y_pred + y_true) == 0.).float()\n#     false_positives = ((y_pred - y_true) == 1.).float()\n#     false_negatives = ((y_true - y_pred) == 1.).float()\n    \n#     precision = true_positives.sum(dim=1) \/ ((true_positives + false_positives).sum(dim=1) + eps)\n#     recall    = true_positives.sum(dim=1) \/ ((true_positives + false_negatives).sum(dim=1) + eps)\n    \n#     score = (1 + beta**2) * (precision * recall) \/ (beta**2 * precision + recall + eps)\n\n#     return torch.mean(score)","5093ed7c":"# preds,targs = learn.get_preds()\n\n# xs = torch.linspace(0.05,0.95,29)\n# accs = [f2_score(preds, targs, threshold=i) for i in xs]\n# plt.plot(xs,accs);","bfad2bfc":"file_path = Path('..\/input\/planets-dataset\/test-jpg-additional\/test-jpg-additional')\ntest_path = Path('..\/input\/planets-dataset\/planet\/planet\/test-jpg')\nsubmission_df = pd.read_csv(path\/'sample_submission.csv')\ntesting_path = (submission_df['image_name'] + '.jpg').apply(lambda x: test_path\/x if x.startswith('test') else file_path\/x)\n\ndef prediction(filename='submission.csv', tta=False):\n    tst_dl = learn.dls.test_dl(testing_path)\n    if tta:\n        predictions = learn.tta(dl = tst_dl)\n    else:\n        predictions = learn.get_preds(dl = tst_dl)\n    predlist = [' '.join(learn.dls.vocab[i]) for i in (predictions[0] > 0.2)]\n\n    df = submission_df\n    df['tags'] = predlist\n\n    df.to_csv(filename, index=False)\n    return df","8d7733fc":"prediction('submission_tta.csv', tta=True)","21cc9189":"# dls = get_data(size=448,bs=32)\n# learn.dls = dls\n# learn.freeze()\n# learn.lr_find()","6f9c2ae7":"# learn.fine_tune(12, base_lr=3e-3, freeze_epochs=4)","bedefe6d":"# prediction('submission_tta_2.csv', tta=True)","b4da47f3":"# Progressive Resizing\nnot getting good result and take a long time to train\n\nTo try: Using a smaller size first then use the 224 size","9ac1f5a8":"# Import data","257a327a":"The method that I have used to improve f2score(public score):\n1. Baseline (ResNet50 0.5 threshold) (0.89731)\n2. Using TTA (0.89752) **+ 0.00021**\n3. With MixUp (0.90129) **+ 0.00377**\n4. With Normalize (0.90296) **+ 0.00167**\n5. Progressive Resizing (0.90148) **- 0.00148** (take a long time to train and not getting improvement, so not applying later)\n6. 0.2 threshold (0.92844) **+ 0.02548** (vs 4th)\n7. using EffNet-b0 (0.92945) **+ 0.00101**\n8. using EffNet-b3 (0.93006) **+ 0.00061**\n\nTo try\n1. using label smoothing\n2. progressive resizing","de0a4e15":"# Prediction using TTA","50bfda86":"# Setup Env\nimporting necessary packages","06c84dbe":"# Training"}}