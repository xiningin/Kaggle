{"cell_type":{"940ef0a1":"code","d376c2cd":"code","9b45fdfc":"code","2c7f5298":"code","e650eca7":"code","38754ecb":"code","dc0bb659":"code","631a9d6a":"code","528d95b8":"markdown","a63f0b18":"markdown","8532169d":"markdown","6e3ed1c4":"markdown","0e7fdcbd":"markdown","11a43962":"markdown","d47c25ee":"markdown","54a88a0e":"markdown"},"source":{"940ef0a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d376c2cd":"# Read csv\ndf = pd.read_csv('\/kaggle\/input\/college-completion\/cc_institution_details.csv',encoding = 'unicode_escape')\n\n# Drop rows with NaN values in these two columns\n# Reference - https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.dropna.html\ndf.dropna(subset=['med_sat_value','grad_100_value'],inplace=True)\n\ndf[['chronname','med_sat_value','grad_100_value']].head(5)\n","9b45fdfc":"df.describe()","2c7f5298":"df.info()","e650eca7":"X = df['med_sat_value'].values.reshape(-1,1)\nX","38754ecb":"Y = df['grad_100_value'].values.reshape(-1,1)\nY","dc0bb659":"# Split the data into training and testing portions\nx_train, x_test, y_train, y_test = train_test_split(X,Y, train_size=.8, test_size=.2, random_state=100)\n\n# Plot the best fit line and scatter-plot of data\nm, b = np.polyfit(df['med_sat_value'], df['grad_100_value'], 1)\nplt.plot(X, m*X + b)\nplt.scatter(x_train, y_train, color='red')\n\n# Assign labels \nplt.xlabel('Median SAT Score')\nplt.ylabel=('Graduation Rate')\nplt.title('Training Data')\n\nplt.show()","631a9d6a":"lm = LinearRegression()\nlm.fit(x_train, y_train)\ny_predict = lm.predict(x_test)\n\n\ntraining_acc = round(lm.score(x_train, y_train)*100, 2)\ntesting_acc = round(lm.score(x_test, y_test)* 100, 2)\nprint(f'Training Accuracy {training_acc}%')\nprint(f'Test Accuracy {testing_acc}%')","528d95b8":"### Load .csv into DataFrame ###","a63f0b18":"### Identify dependent variable ###","8532169d":"### Split Data into Training\/Testing & Plot points ###","6e3ed1c4":"DataFrame description and info ","0e7fdcbd":"# Exploratory Analysis with Linear Regressions #\nObjective: Examine the relationship between median SAT score and the rate of Undergraduate Degree completion at universities across the United States ","11a43962":"### Identify independent variable ###","d47c25ee":"### Fit Linear Model and Make Predictions ###","54a88a0e":"### Conclusions ###\n* Since the accuracy of the model prediction is < 60%, we can make the assumption that there is not a strong relationship between Median SAT Score and Graduation Rate\n* From the scatter plot we can see that the residuals trend closer to the best-fit line as the median SAT score increases\n* There are several outliers in the data, with relatively high graduation rates at low median SAT scores and vice versa"}}