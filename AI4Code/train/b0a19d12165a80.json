{"cell_type":{"372c1de9":"code","cb483f52":"code","4dae00ab":"code","1d0ff890":"code","50e645e1":"code","d5675e01":"code","9f5be516":"code","df3121b8":"code","d342fad8":"code","b6575e7d":"code","1522fb28":"code","bc8398f5":"code","89177478":"code","76e0e49c":"code","54208905":"code","605c6696":"code","26131098":"code","b64db4ad":"code","c199b7bd":"code","70e38435":"code","200f841d":"code","eb280512":"code","f9fbad4b":"code","95a5a5a3":"code","40470fd7":"code","7421fb5d":"code","82ff9981":"code","6b79cd2b":"code","bdc8dd3d":"code","fc7062e1":"code","3a3d9e2e":"code","37f61d3d":"code","8275b6dc":"code","0a8ac972":"code","d293d8e3":"code","9f7a626c":"code","ed788338":"code","debfa5c9":"markdown","717a0e7d":"markdown","4abb6380":"markdown","16622504":"markdown","2bad25fc":"markdown","6eb83901":"markdown","82a6be37":"markdown","fec03600":"markdown","92763ab3":"markdown","5ee70bb8":"markdown","a2aab895":"markdown","5ab9408c":"markdown"},"source":{"372c1de9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))","cb483f52":"# Load train data\ntrain = pd.read_csv('..\/input\/train.csv')","4dae00ab":"# Check original train shape\ntrain.shape","1d0ff890":"# Check train data\ntrain.head()","50e645e1":"# Check fields summary\ntrain.describe()","d5675e01":"# Removing outliers\ntrain = train[train['GrLivArea']<4000]\ntrain.shape","9f5be516":"# Select target values\ny = train['SalePrice']\ny.head()","df3121b8":"y = np.log(y)\ny.head()","d342fad8":"# Drop ID column\ntrain_ids = train['Id']\ntrain.drop(['Id'], axis=1, inplace=True)","b6575e7d":"# Check correlation to SalePrice\ncorr = train.corr()\ncorr.sort_values([\"SalePrice\"], ascending = False, inplace = True)\ncorr.iloc[:,-1:]","1522fb28":"# Get categorical features\ncategorical_features = train.select_dtypes(include = ['object']).columns\ncategorical_features","bc8398f5":"# Get numerical features and drop target column\nnumerical_features = train.select_dtypes(exclude = [\"object\"]).columns\nnumerical_features = numerical_features.drop(\"SalePrice\")\nnumerical_features","89177478":"# Split numerical and categorical features\ntrain_num = train[numerical_features]\ntrain_cat = train[categorical_features]\n(train.shape, train_num.shape, train_cat.shape)","76e0e49c":"# Fill null values with median for numerical features\nfrom sklearn.impute import SimpleImputer\nprint(\"Nulls in numerical features: \" + str(train_num.isnull().values.sum()))\nnum_imputer = SimpleImputer(strategy = 'median')\ntrain_num[numerical_features] = num_imputer.fit_transform(train_num)\ntrain_num.shape","54208905":"# Fill null values with most frequent for categorical features\nprint(\"Nulls in categorical features: \", str(train_cat.isnull().values.sum()))\ncat_imputer = SimpleImputer(strategy = 'most_frequent')\ntrain_cat[categorical_features] = cat_imputer.fit_transform(train_cat)\ntrain_cat.shape","605c6696":"# Ordinal encoding\n#from sklearn.preprocessing import OrdinalEncoder\n#encoder = OrdinalEncoder()\n#train_cat = pd.DataFrame(encoder.fit_transform(train_cat), columns = categorical_features, index = train.index)","26131098":"# One hot encoding (better than Ordinal for Lasso)\nfrom sklearn.preprocessing import OneHotEncoder\nencoder = OneHotEncoder(sparse=False)\ntrain_cat = pd.DataFrame(encoder.fit_transform(train_cat), index = train.index)\ntrain_cat.shape","b64db4ad":"# Merge back categorical and numerical features\ntrain = pd.concat([train_cat, train_num], axis=1)\ntrain.shape","c199b7bd":"# Scale data\nfrom sklearn.preprocessing import RobustScaler\nscaler = RobustScaler()\ntrain = scaler.fit_transform(train)","70e38435":"from sklearn.model_selection import train_test_split\n# Split train and test data\nX = train\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.01, random_state=47)","200f841d":"# Prepare Lasso model\n#from sklearn.linear_model import Lasso\n#model = Lasso(alpha=0.001, random_state=47)\nfrom sklearn.linear_model import LassoCV\nmodel = LassoCV(cv=20, random_state=47, verbose=True, alphas=[1e-4, 5e-4, 1e-3, 5e-3])","eb280512":"# Execute training\nmodel.fit(X_train, y_train)","f9fbad4b":"# Execute prediction with train and test data\ny_predict = model.predict(X_test)\ny_predict_train = model.predict(X_train)","95a5a5a3":"# Check-up real versus predicted data\ntrue_x_pred = pd.DataFrame({'SalePrice': np.exp(y_test), 'Predicted': np.exp(y_predict)})\ntrue_x_pred_train = pd.DataFrame({'SalePrice': np.exp(y_train), 'Predicted': np.exp(y_predict_train)})\ntrue_x_pred.head()","40470fd7":"# Calculates root mean squared log error\nfrom sklearn.metrics import mean_squared_log_error\nfrom math import sqrt\nrmsle = sqrt(mean_squared_log_error(true_x_pred['SalePrice'], true_x_pred['Predicted']))\nrmsle_train = sqrt(mean_squared_log_error(true_x_pred_train['SalePrice'], true_x_pred_train['Predicted']))\nprint(\"RMSLE (test):\", rmsle)\nprint(\"RMSLE (train):\", rmsle_train)","7421fb5d":"# Plot real x predicted\nimport matplotlib.pyplot as plt\nplt.scatter(true_x_pred_train['Predicted'], true_x_pred_train['SalePrice'], c = \"silver\", label = \"Training\")\nplt.scatter(true_x_pred['Predicted'], true_x_pred['SalePrice'], c = \"blue\", label = \"Test\")\nplt.title(\"Lasso\")\nplt.xlabel(\"Predicted values\")\nplt.ylabel(\"Real values\")\nplt.legend(loc = \"upper left\")\nplt.plot([10, 660000], [10, 660000], c = \"red\")\nplt.show()","82ff9981":"test = pd.read_csv('..\/input\/test.csv')\ntest_ids = test['Id']\ntest.shape","6b79cd2b":"# Drop Id column\ntest.drop(['Id'], axis=1, inplace=True)","bdc8dd3d":"# Split numerical and categorical features\ntest_num = test[numerical_features]\ntest_cat = test[categorical_features]","fc7062e1":"# Fill numerical nulls with median\ntest_num[numerical_features] = num_imputer.transform(test_num)\ntest_num.shape","3a3d9e2e":"# Fill categorical nulls with most frequent\ntest_cat[categorical_features] = cat_imputer.transform(test_cat)\ntest_cat.shape","37f61d3d":"# One hot encoding\ntest_cat = pd.DataFrame(encoder.transform(test_cat), index = test.index)\ntest_cat.shape","8275b6dc":"# Merge back categorical and numerical\ntest = pd.concat([test_cat, test_num], axis=1)\n(test.shape)","0a8ac972":"# Scale data\ntest = scaler.transform(test)","d293d8e3":"# Execute prediction\ntest_prediction = np.exp(model.predict(test))\noutput = pd.DataFrame({'Id': test_ids, 'SalePrice': test_prediction})\noutput.head()","9f7a626c":"# Generate file for submission\noutput.to_csv('submission.csv', index=False)","ed788338":"# Generate binaries for models\nfrom sklearn.externals import joblib\njoblib.dump(num_imputer, 'num_imputer.joblib')\njoblib.dump(cat_imputer, 'cat_imputer.joblib')\njoblib.dump(encoder, 'encoder.joblib')\njoblib.dump(scaler, \"scaler.joblib\")\njoblib.dump(model, 'model.joblib')","debfa5c9":"** Data loading **","717a0e7d":"** Load and prepare test data **","4abb6380":"[cat_imputer.joblib](.\/cat_imputer.joblib)","16622504":"** Evaluation **","2bad25fc":"** Data cleansing **","6eb83901":"[scaler.joblib](.\/scaler.joblib)","82a6be37":"[model.joblib](.\/model.joblib)","fec03600":"** Download links **\n\n[submission.csv](.\/submission.csv)","92763ab3":"[encoder.joblib](.\/encoder.joblib)","5ee70bb8":"** Training **","a2aab895":"** Predict test data **","5ab9408c":"[num_imputer.joblib](.\/num_imputer.joblib)"}}