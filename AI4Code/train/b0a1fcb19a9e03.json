{"cell_type":{"e6d34cd4":"code","439adaf7":"code","49d381a6":"code","d45931b5":"code","a631cc36":"code","a42a9842":"code","67d60730":"code","8fb44953":"code","d4e587fa":"code","980d39f5":"code","9d84735d":"code","27548170":"code","df44f41b":"code","4fa08b3c":"code","622e60d5":"code","1a1c8df4":"code","cf013211":"code","abfcb6b4":"code","a7ae5c34":"code","0b1c45a2":"markdown","9c8ae38b":"markdown","d49a8638":"markdown","7a0f890d":"markdown","4f1df62b":"markdown","4b5643d9":"markdown","bbcc7bc4":"markdown","c9060dfd":"markdown","4c57c9ef":"markdown","f78baa7b":"markdown","9849e87d":"markdown","759ae824":"markdown","d2e54794":"markdown","b2fb28d0":"markdown","b50c523e":"markdown"},"source":{"e6d34cd4":"\nimport numpy as np \nimport pandas as pd\nfrom scipy import stats\nfrom sklearn.neighbors import KernelDensity\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nimport seaborn as sns\nfrom pathlib import Path\nfrom tqdm import tqdm_notebook, trange, tqdm\nfrom PIL import Image, ImageDraw\nimport io","439adaf7":"def load_multiple_csv(input_dir, sampling=0.001):\n    input_dir = Path(input_dir)\n    dfs = []\n    for input_path in tqdm_notebook(input_dir.glob('*.csv')):\n        df = pd.read_csv(input_path)\n        df = df.sample(int(len(df)*sampling))\n        dfs.append(df)\n    \n    df = pd.concat(dfs)\n    del dfs\n    return df\n        ","49d381a6":"# agg_df = load_multiple_csv('..\/input\/pubg-match-deaths\/aggregate',)\ndeath_df = load_multiple_csv('..\/input\/pubg-match-deaths\/deaths')","d45931b5":"death_df","a631cc36":"erangel_img = Image.open('..\/input\/pubg-match-deaths\/erangel.jpg')","a42a9842":"erangel_img","67d60730":"zero_coor_df = death_df[((death_df['victim_position_x'] == 0) & (death_df['victim_position_y'] == 0)) \n                        | ((death_df['killer_position_x'] == 0) & (death_df['killer_position_y'] == 0))]\nzero_coor_df","8fb44953":"def filter_outlier_death(death_df):\n    \n    death_df = death_df[(death_df['victim_position_x'] != 0) | (death_df['victim_position_y'] != 0)]\n    death_df = death_df[(death_df['killer_position_x'] != 0) | (death_df['killer_position_y'] != 0)]\n    return death_df\ndeath_df = filter_outlier_death(death_df)","d4e587fa":"\ndef adjust_coordinate_df(death_df):\n    coordinate_columns = ['victim_position_x', 'victim_position_y',\n                          'killer_position_x', 'killer_position_y']\n    death_df[coordinate_columns] = death_df[coordinate_columns] \/ 800000 * 4096\n    return death_df\n\n\ndeath_df = adjust_coordinate_df(death_df)","980d39f5":"reds_color = np.zeros((100, 4))\nreds_color[:, 0] = np.linspace(0, 1, 100)\nreds_color[:, 3] = np.linspace(0.4, 1, 100)\nreds_color[:10] = 0\nalpha_reds_cmap = mcolors.LinearSegmentedColormap.from_list('alpha_reds', colors=reds_color, N=1024, gamma=1)\n\ngreens_color = np.zeros((100, 4))\ngreens_color[:, 1] = np.linspace(0, 1, 100)\ngreens_color[:, 3] = np.linspace(0.4, 1, 100)\ngreens_color[:10] = 0\nalpha_greens_cmap = mcolors.LinearSegmentedColormap.from_list('alpha_greens', colors=greens_color, N=1024, gamma=1)\ndef generate_heatmap(df,\n                     img,\n                     n_grid=100,\n                     bw=200,\n                     kernel='epanechnikov',\n                     cmap=plt.cm.Reds,\n                     alpha=None,\n                     ax=None,\n                    ):\n    x_mesh = np.linspace(0, 4096, n_grid)\n    y_mesh = np.linspace(0, 4096, n_grid)\n    X, Y = np.meshgrid(x_mesh, y_mesh)\n    xy = np.vstack([X.ravel(), Y.ravel()]).T\n\n    kde = KernelDensity(kernel=kernel, bandwidth=bw).fit(df.to_numpy())\n    log_density = kde.score_samples(xy)\n    log_density = log_density.reshape((n_grid, n_grid))\n    density = np.exp(log_density)\n\n    if ax is None:\n        fig, ax = plt.subplots(figsize=(16, 16))\n\n    plt.gca().invert_yaxis()\n    ax.contourf(X, Y, density, alpha=alpha, cmap=cmap)\n    ax.imshow(img)\n    return fig, ax","9d84735d":"erangel_death_df = death_df[death_df['map'] == 'ERANGEL']\nposition_df = erangel_death_df[['victim_position_x', 'victim_position_y']]","27548170":"\nfig, ax = generate_heatmap(position_df, erangel_img, bw=200, cmap=alpha_reds_cmap)","df44f41b":"erangel_death_df = death_df[death_df['map'] == 'ERANGEL']\n","4fa08b3c":"def euclidian_distance(a, b):\n    return np.sqrt(((a - b)**2).sum(axis=1))\nerangel_death_df['distance'] = euclidian_distance(erangel_death_df[['killer_position_x', 'killer_position_y']].to_numpy(),\n                                                 erangel_death_df[['victim_position_x', 'victim_position_y']].to_numpy())","622e60d5":"longrange_death_df = erangel_death_df[erangel_death_df['distance'] > erangel_death_df['distance'].quantile(0.8)]","1a1c8df4":"ax = generate_heatmap(longrange_death_df[['killer_position_x', 'killer_position_y']],\n                     erangel_img,\n                    bw=80,\n                    cmap=alpha_greens_cmap,\n                     )","cf013211":"generate_heatmap(longrange_death_df[['victim_position_x', 'victim_position_y']],\n                 erangel_img,\n                bw=80,\n                cmap=alpha_reds_cmap,\n                )","abfcb6b4":"erangel_death_df = death_df[death_df['map'] == 'ERANGEL']\nworst_victim_df = erangel_death_df[erangel_death_df['victim_placement'] > 50][['victim_position_x', 'victim_position_y']]\ngenerate_heatmap(worst_victim_df, erangel_img, bw=100, cmap=alpha_reds_cmap)","a7ae5c34":"erangel_death_df = death_df[death_df['map'] == 'ERANGEL']\ntop_killer_df = erangel_death_df[erangel_death_df['killer_placement'] < 5][['killer_position_x', 'killer_position_y']]\ngenerate_heatmap(top_killer_df, erangel_img, bw=100, cmap=alpha_reds_cmap)","0b1c45a2":"This dataset is huge. I can't load entire of dataset to kernel. So, I loaded csv file by sampling method (1% of dataset). ","9c8ae38b":"# Data Visualization","d49a8638":"## \"Sniper field\" Which area has crowded of sniper?\n\nFor visualize sniper field, I used killer's position who took down victim with long distance (more than 80% of all deadth distance) to plot as heatmap. We will see which area are risky to being shot by sniper include some area that well-known. In addtion, foot of Military bridge.  ","7a0f890d":"## \"Dead zone\" Which area is crowded?\n\nI used victim postion to plot as heatmap. This graph will describe which area has high population, which area has low population. From this graph, we will see those crowded area Eg. Pochinki, School, Military base. Moreover, we will see the crowded area after those top crowded area Eg. under of Pochinki, both Military bride, shelter and prison. ","4f1df62b":"## How top 4 of game playing? Where are them?\n\nI used position of top 4 of the game to plot as heatmap. We will see the populations are spreaded, not crowded at main area Eg. Pochinki, School like first graph. This graph describe how some top 4 of the game played with ignore main area strategy.","4b5643d9":"## Import library & load data\n","bbcc7bc4":"## Where are half of players?\n\nI can easily answer this question by this graph. Pochinki, School, Military base, half of players died and transform to boxes at these area. \n\nI used position of player who died and end with rank more than 50.","c9060dfd":"# PUBG - Dead zone\nThis notebook will describe some insight of any area in map.\n\nMy english skill isn't strong. If you found wrong grammar, please send comment to me. Thank you. \n","4c57c9ef":"Load erangel image","f78baa7b":"I used Kernel Density Esimation algothm to create heatmap.","9849e87d":"# Data preparation","759ae824":"Select long distance of death by more distance than 80% of all deaths.","d2e54794":"Next, I adjust postion from range (0 - 800,000) to (0 - 4,096) for ease to mapping to PUBG's map image. ","b2fb28d0":"After I look up to death dataset, I found some of wrong data include outlier position of death that had both zero-value of coordinate (x, y). These are around 4% of dataset. These may be error data from position calculation on server or positon from hackers. For this reason, I removed this outlier. ","b50c523e":"Calculate distance with euclidian distance from killer to victim. "}}