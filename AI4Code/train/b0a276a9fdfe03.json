{"cell_type":{"9dc483c0":"code","f13163a0":"code","bfa0dc39":"code","0af0955e":"code","566b6127":"code","6c2696be":"code","7fd7e0a2":"code","237b474b":"code","498686ab":"code","281a1916":"code","35d23bdc":"code","d9201bd6":"code","2200c4f8":"code","5c0f4d6d":"code","adebe3d3":"code","abfe2e6e":"code","121cf282":"code","81b972b5":"code","34fd2481":"code","a6a2c39a":"code","5b64c1f9":"code","0bcecaaf":"code","6ecb2258":"code","1a94dec9":"code","8458ad8c":"code","d3e04126":"code","5a5f9fbc":"code","0bda99de":"code","97e8d201":"code","2e9856f5":"code","8c393b21":"code","778d3f21":"markdown","21744447":"markdown","a28bd819":"markdown","0e644867":"markdown","46432ba1":"markdown","bc54b8a5":"markdown","113b20ec":"markdown","e92bd872":"markdown","9ae23865":"markdown","fe9dbaa2":"markdown","3844899f":"markdown","c070d76b":"markdown","522fcc56":"markdown"},"source":{"9dc483c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport functools\nimport os\n\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f13163a0":"plt.style.use('ggplot')\ntf.get_logger().setLevel('ERROR')","bfa0dc39":"data = pd.read_csv(\"..\/input\/drug-classification\/drug200.csv\")","0af0955e":"data.head()","566b6127":"data.shape[0]","6c2696be":"data.isnull().sum()","7fd7e0a2":"TARGET_COLUMN = \"Drug\"\nBATCH_SIZE = 4","237b474b":"target_labels = data.Drug.unique()","498686ab":"drugs_ind = tf.keras.layers.experimental.preprocessing.StringLookup(\n                        vocabulary=list(target_labels), num_oov_indices=0, mask_token=None)","281a1916":"ds = tf.data.experimental.make_csv_dataset(\n      \"..\/input\/drug-classification\/drug200.csv\",\n      batch_size=BATCH_SIZE,\n      label_name=TARGET_COLUMN,\n      na_value=\"?\",\n      num_epochs=1,\n      ignore_errors=True)","35d23bdc":"def show_batch(dataset):\n    for batch, label in dataset.take(1):\n        for key, value in batch.items():\n            print(\"{:20s}: {}\".format(key,value.numpy()))","d9201bd6":"show_batch(ds)","2200c4f8":"NUMERIC_FEATURES = ['Age','Na_to_K']","5c0f4d6d":"CATEGORIES = {k: data[k].unique().tolist() for k in data if k not in NUMERIC_FEATURES}\nCATEGORIES","adebe3d3":"target_labels = CATEGORIES.pop(\"Drug\")\ntarget_labels","abfe2e6e":"class PreprocessFeatures(object):\n    def __init__(self, names, labels_map):\n        self.names = names\n        self.labels_map = labels_map\n\n    def __call__(self, features, labels):\n        numeric_freatures = [features.pop(name) for name in self.names]\n        numeric_features = [tf.cast(feat, tf.float32) for feat in numeric_freatures]\n        numeric_features = tf.stack(numeric_features, axis=-1)\n        features['numeric'] = numeric_features\n        labels = self.labels_map(labels)\n        return features, labels","121cf282":"ds = ds.map(PreprocessFeatures(NUMERIC_FEATURES,drugs_ind))","81b972b5":"desc = data[NUMERIC_FEATURES].describe()\ndesc","34fd2481":"MEAN = np.array(desc.T['mean'])\nSTD = np.array(desc.T['std'])","a6a2c39a":"def normalize_numeric_data(data, mean, std):\n    return (data-mean)\/std","5b64c1f9":"normalizer = functools.partial(normalize_numeric_data, mean=MEAN, std=STD)","0bcecaaf":"numeric_column = tf.feature_column.numeric_column('numeric', normalizer_fn=normalizer, shape=[len(NUMERIC_FEATURES)])\nnumeric_columns = [numeric_column]","6ecb2258":"categorical_columns = []\nfor feature, vocab in CATEGORIES.items():\n    cat_col = tf.feature_column.categorical_column_with_vocabulary_list(\n        key=feature, vocabulary_list=vocab)\n    categorical_columns.append(tf.feature_column.indicator_column(cat_col))","1a94dec9":"preprocessing_layer = tf.keras.layers.DenseFeatures(categorical_columns + numeric_columns)","8458ad8c":"model = tf.keras.Sequential([\n  preprocessing_layer,\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dense(len(target_labels), activation='sigmoid'),\n])","d3e04126":"model.compile(\n    loss=tf.losses.SparseCategoricalCrossentropy(),\n    optimizer=tf.keras.optimizers.Adam(),\n    metrics=tf.keras.metrics.SparseCategoricalAccuracy())","5a5f9fbc":"N = data.shape[0]\ntrain_size = 0.8\nn_train = int(N*train_size)\ntake_train = n_train \/\/ BATCH_SIZE","0bda99de":"train_ds = ds.take(take_train)\ntest_ds = ds.skip(take_train) ","97e8d201":"history = model.fit(train_ds, \n                    validation_data=test_ds,\n                    epochs=20)","2e9856f5":"rows, cols = 1, 2\nfig, axs = plt.subplots(rows, cols, figsize=(10,5))\n\naxs[0].plot(history.history['loss'])\naxs[0].plot(history.history['val_loss'])\naxs[0].set_title('Loss')\naxs[0].legend(['train_loss','val_loss'])\n\naxs[1].plot(history.history['sparse_categorical_accuracy'])\naxs[1].plot(history.history['val_sparse_categorical_accuracy'])\naxs[1].set_title('Accuracy')\naxs[1].legend(['Train accuracy','Test accuracy'])","8c393b21":"print(\"Pred: \\t   True:\")\nfor X, y in test_ds:\n    pred = model(X)\n    print(f\"{tf.argmax(pred,axis=1)}  {y}\")","778d3f21":"Now, we have to preprocess features","21744447":"### Creating preprocessing layers","a28bd819":"### Handle numerical features","0e644867":"Ok, let's define numerical and categorical features","46432ba1":"### Handle categorical features","bc54b8a5":"### Fit the model","113b20ec":"### Train test split","e92bd872":"### Define model","9ae23865":"### Creating tf dataset","fe9dbaa2":"### Data overview ","3844899f":"On the one hand, we can't just pass strings as features to the model. On the other hand, we don't want to make another csv dataset with encoded target column. So we create mapping function. In tensorflow we use StringLookup for this purposes.","c070d76b":"So, we have:\n* Few observations (200)\n* No missing values\n* Two numerical features\n* Three categorical features\n* Categorical target column","522fcc56":"Original paper of how to deal with structured data and csv data with tensorflow:\nhttps:\/\/www.tensorflow.org\/tutorials\/load_data\/csv  \nThis is just my experiment with drug200 dataset."}}