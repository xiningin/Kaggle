{"cell_type":{"3a02a7a7":"code","5320cb57":"code","33c15b12":"code","9b216a1c":"code","6f8f3f4e":"code","c0d6b758":"code","2b0f47d8":"code","1cf958da":"code","5ecccb7a":"code","cb8af570":"code","01363648":"code","386ce8f0":"code","60bd3c21":"code","17b35d60":"code","48d193fb":"code","921212b9":"code","68182297":"code","be31f118":"code","9d517ba5":"code","4b1cfc53":"code","33961bd6":"code","08de2c41":"code","11c2ae56":"code","8c63297e":"code","73ede97f":"code","aa316e09":"code","3a48f23a":"code","1ae3fd6b":"code","3dbe2c62":"code","b60fd4c9":"code","014a779b":"code","2548cfb9":"code","73fbafa0":"code","732f4a76":"code","7462a6e6":"code","64a10295":"code","4e810fa6":"code","214faf56":"code","93be049d":"code","a910e7be":"code","9b092a8b":"code","dfff3bc7":"code","c97b39c3":"code","2e044ca0":"code","a2f7d1c0":"code","07c79d0d":"code","92e0b41c":"code","7bc65451":"code","708732f3":"code","08abb44d":"code","ad86451b":"code","efd697e8":"markdown","908f6968":"markdown","e1266a4e":"markdown","76d18c0c":"markdown","98135475":"markdown","a51b59d0":"markdown","e204b92b":"markdown","3e3dfb2b":"markdown","a290f645":"markdown","0029bf33":"markdown","ce41e87f":"markdown","70b9005a":"markdown","c7f8748c":"markdown","8ef6b35d":"markdown","6fe77ada":"markdown","a2b5f859":"markdown","828d58f6":"markdown","4a9dbbd7":"markdown","e6f83a59":"markdown","4c1c328a":"markdown"},"source":{"3a02a7a7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","5320cb57":"# LOAD DATA FROM LOCAL DIRECTORY\n#iris_data = pd.read_csv(r'C:\\Users\\Phil\\Sync\\Data Science MSc\\Data\\IRIS.csv')\n\n# LOAD DATA FOR KAGGLE NOTEBOOK\niris_data = pd.read_csv('..\/input\/iris\/Iris.csv')","33c15b12":"# Top 5 rows\niris_data.head()","9b216a1c":"# Top k rows\niris_data.head(2)","6f8f3f4e":"# Last 5 rows\niris_data.tail()","c0d6b758":"# 1. ID column not in original source so we first select only those that match with the original source\niris_data = iris_data[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm','Species']]\n# 2. The names of each column are slightly different so we re-name these to match the original source\niris_data.columns = ['sepal_length', 'sepal_width', 'petal_length','petal_width','species']","2b0f47d8":"iris_data.head()","1cf958da":"iris_data.dtypes","5ecccb7a":"# Top 5 rows of 'sepal length' column\niris_data['sepal_length'].head()","cb8af570":"# Top 5 rows of 'sepal length' column\niris_data.sepal_length.head()","01363648":"# Top 5 rows of 'sepal length' column\niris_data.sepal_length.head()","386ce8f0":"# First row\niris_data.iloc[0]","60bd3c21":"# Rows between 3rd and 7th \niris_data.iloc[2:6]","17b35d60":"# First row and column element\niris_data.iloc[0,0]","48d193fb":"# All rows and columns - top 5 rows only shown\niris_data.iloc[:,:].head()","921212b9":"# Rows between 3rd and 7th and all columns\niris_data.iloc[2:6,:]","68182297":"# All rows and columns between 3rd and 5th - top 5 rows only shown\niris_data.iloc[:,2:5].head()","be31f118":"# 1st and 2nd row and 4th and 5th column\niris_data.iloc[[0,1],[3,4]]","9d517ba5":"# Rows between the 3rd and 7th and the 4th and 5th column\niris_data.iloc[2:6,[3,4]]","4b1cfc53":"# 1st and 2nd rows and the 3rd and 5th\niris_data.iloc[[0,1],2:5]","33961bd6":"# Rows between the 3rd and 7th and columns between the 3rd and 5th\niris_data.iloc[0:5,2:5]","08de2c41":"iris_data['species'].unique()","11c2ae56":"# Select Iris-setosa data - top 5 rows only shown\niris_data[iris_data['species']=='Iris-setosa'].head()","8c63297e":"# Select Iris-versicolor data - top 5 rows only shown\niris_data[iris_data['species']=='Iris-versicolor'].head()","73ede97f":"# Select data with sepal_length EQUAL TO 4.9\niris_data[iris_data['sepal_length']==4.9]","aa316e09":"# Select data with sepal_length LESS THAN 4.5\niris_data[iris_data['sepal_length']<4.5]","3a48f23a":"# Select data with sepal_length LESS THAN OR EQUAL TO 4.5\niris_data[iris_data['sepal_length']<=4.5]","1ae3fd6b":"# Select data with sepal_length GREATER THAN 7.4\niris_data[iris_data['sepal_length']>7.4]","3dbe2c62":"# Select data with sepal_length GREATER THAN OR EQUAL TO 7.5\niris_data[iris_data['sepal_length']>=7.4]","b60fd4c9":"# Select Iris-setosa OR Iris-versicolor data - top 5 rows only shown\niris_data[(iris_data['species']=='Iris-setosa') | (iris_data['species']=='Iris-versicolor')].head()","014a779b":"# Select Iris-setosa AND Iris-versicolor data - no rows have both so none are returned\niris_data[(iris_data['species']=='Iris-setosa') & (iris_data['species']=='Iris-versicolor')].head()","2548cfb9":"# Select Iris-setosa AND Sepal Length EQUAL TO 4.9 \niris_data[(iris_data['species']=='Iris-versicolor') & (iris_data['sepal_length']==4.9)]","73fbafa0":"# Select Sepal Length EQUAL TO 4.8 OR Sepal Length EQUAL TO 4.9 \niris_data[(iris_data['sepal_length']==4.8) | (iris_data['sepal_length']==4.9)]","732f4a76":"# Select Sepal Length EQUAL TO 4.8 OR Sepal Width EQUAL TO 3.0\niris_data[(iris_data['sepal_length']==4.8) & (iris_data['sepal_width']==3.0)]","7462a6e6":"# Select [Sepal Length EQUAL TO 4.8 OR Sepal Length EQUAL TO 4.9] AND Iris-setosa\niris_data[((iris_data['sepal_length']==4.8) | (iris_data['sepal_length']==4.9)) & (iris_data['species']=='Iris-setosa')]","64a10295":"# Select Iris-setosa data - Save to new variable 'iris_data_setosa'\niris_data_setosa = iris_data[iris_data['species']=='Iris-setosa']\niris_data_setosa.head()","4e810fa6":"iris_data.describe()","214faf56":"iris_data['species'].unique()","93be049d":"list(iris_data)","a910e7be":"# Basic Matplotlib plot with manually defined data\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16])\n\n# Visual elements\nplt.title('Basic Plot Example')\nplt.ylabel('y-label')\nplt.xlabel('x-label')\n\nplt.show()","9b092a8b":"# Basic Matplotlib plot with manually defined data\n# Vary the linestyle\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16], '--', linewidth=5)\n\n# Visual elements\nplt.title('Basic Plot Example')\nplt.ylabel('y-label')\nplt.xlabel('x-label')\n\nplt.show()","dfff3bc7":"# Basic Matplotlib plot with manually defined data\n# Vary the colour\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'r--')\n\n# Visual elements\nplt.title('Basic Plot Example')\nplt.ylabel('y-label')\nplt.xlabel('x-label')\n\nplt.show()","c97b39c3":"# Basic Matplotlib plot with manually defined data\n# Vary the marker type\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'r.')\n\n# Visual elements\nplt.title('Basic Plot Example')\nplt.ylabel('y-label')\nplt.xlabel('x-label')\n\nplt.show()","2e044ca0":"# Basic Matplotlib plot with manually defined data\n# Vary the marker type\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'r.', markersize = 20)\n\n# Visual elements\nplt.title('Basic Plot Example')\nplt.ylabel('y-label')\nplt.xlabel('x-label')\n\nplt.show()","a2f7d1c0":"# Remind ourselves of the data with the .head() preview\niris_data.head()","07c79d0d":"# Basic Matplotlib plot for the Iris data\nplt.plot(iris_data['sepal_length'], iris_data['sepal_width'], 'b.', markersize = 10)\n\n# Visual elements\nplt.title('Sepal Length vs Sepal Width')\nplt.xlabel('Sepal Length')\nplt.ylabel('Sepal Width')\n\nplt.show()","92e0b41c":"# Basic Matplotlib plot for the Iris data\nplt.plot(iris_data['petal_length'], iris_data['petal_width'], 'b.', markersize = 10)\n\n# Visual elements\nplt.title('Petal Length vs Petal Width')\nplt.xlabel('Petal Length')\nplt.ylabel('Petal Width')\n\nplt.show()","7bc65451":"import seaborn as sns","708732f3":"# Basic Seaborn scatter plot with markers coloured by the 'Species' feature\nax = sns.scatterplot(x=\"sepal_length\", y=\"sepal_width\", hue=\"species\", data=iris_data)\n\n# Visual elements\nplt.title('Sepal Length vs Sepal Width')\nplt.xlabel('Sepal Length')\nplt.ylabel('Sepal Width')\n\nplt.show()","08abb44d":"sns.set_style(\"white\")","ad86451b":"# Set figure size\nplt.figure(figsize=(12,8))\n\n# Basic Seaborn scatter plot with markers coloured by the 'Species' feature\nax = sns.scatterplot(x=\"sepal_length\", y=\"sepal_width\", hue=\"species\", data=iris_data, s=50)\n\n# Visual elements\nplt.title('Sepal Length vs Sepal Width')\nplt.xlabel('Sepal Length')\nplt.ylabel('Sepal Width')\n\nplt.show()","efd697e8":"Now that we have our basic packages available, we can begin importing and exploring the data. To do this, we first use Panda's read_csv function and name our Iris dataset with a suitable Variable name. \n\nLastly, we can preview the first few rows of the data by calling the '.head()' function.","908f6968":"Another useful summary, particuarly useful for datasets with lots of features is the \"list(data)\" function that returns all of the column names.\n\nThis is also particuarly useful as it returns a list of strings for the column names that can be used later as we will show. ","e1266a4e":"With the data points coloured by species, we note that correlations become clearer in certain groups. In particular, the Setosa group (blue) have a clear and strong correlation.","76d18c0c":"### KAGGLE DATA VARIATIONS\n\nBecause data can be uploaded to Kaggle by anyone, the data are often editied slightly from the original source. This could simply be different column names as with the Iris dataset here but in some cases a significant amount of pre-processing may have been applied before uploading the dataset. Although useful, it is important to know how the original source data has been changed and verified before using the datasets available on Kaggle and elsewhere online. \n\n#### Change column names for consistency with dataset downloaded directly from UCI website.","98135475":"#### Indexing Columns\n\nThe data are in the format of Pandas dataframes, therefore to reference a column we can simply refer to its name.\n\nThis can either be done inside square brackets of by referencing the column as an attribute. The former is typically better as it means we can easily extend this for multiple columns as shown.","a51b59d0":"# 1. Basic Libraries and Importing Data\n\nPython on its own is fairly limited, particularly for Data Science, but instead thrives due to the open source packages available. Many of the main packages are included when you downloaded Anaconda and Jupyter and therefore all we need to do is call the ones we want at the start of each Notebook. \n\n\nFor now, we introduce three main packages:\n\n- Pandas - a library for data analysis [https:\/\/pandas.pydata.org\/pandas-docs\/stable\/](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/)\n- NumPy - a library for improved calculations [https:\/\/numpy.org\/](https:\/\/numpy.org\/)\n- Matplotlib - the primary plotting library for Python [https:\/\/matplotlib.org\/](https:\/\/matplotlib.org\/)\n\nTo call these, we simply include an import cell at the start of the Notebook as follows:","e204b92b":"---\n\n# 4. Conclusion\n\nWe have introduced the basics of importing and exploring data in Python and should enable you to get starting with analysing data in more detail.","3e3dfb2b":"\n![banner](https:\/\/i.imgur.com\/vmCCvUB.png \"https:\/\/www.notion.so\/sterlingdatascience\")\n## Data Science MSc - DATA101: Principles of Data Science\n# DATA101: Basic Data Exploration Lecture Notes\n\n## About\n\nThis is the code notebook for the \"Basic Data Exploration Lecture Notes\" of Sterling Osborne's Data Science MSc online course found here:\n\n\n### Contents:\n1. Basic Libraries and Importing Data\n    - Pandas and Numpy\n    - Importing Data\n2. Selecting Data\n    - Indexing\n    - Conditionally Selecting Data\n3. Summarising and Cleaning Data\n    - Summarising Statistics\n    - Missing values\n    - Null values\n4. Initial Visual Analysis\n    - Matplotlib\n    - Seaborn\n5. Conclusion\n\nCode Notebook by Sterling Osborne\n\nOctober 2019\n\nhttps:\/\/twitter.com\/DataOsborne\n\n---\n","a290f645":"#### Subsetting Data\n\nSo far, each of the operations simply select and show the data based on the given conditions. We have not actually 'saved' any of these selections.\n\nTo do this, we can create a new variable name data based on the conditions to create a subset dataset.\n","0029bf33":"#### Complex Conditional Selections\n\nTo do this, we use the following functions where we use the \"&\" to denote AND and \"|\" to denote OR in subsetting notation.\n","ce41e87f":"#### Indexing Rows\n\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.iloc.html\n\nLikewise, to extract a row we can refer to the row's id where in Pandas where the first row starts at 0\n","70b9005a":"Set the Seaborn aesthetic style and increase the figure size\n\nhttps:\/\/seaborn.pydata.org\/tutorial\/aesthetics.html","c7f8748c":"---\n\n# 3. Initial Visual Analysis with Matplotlib\n\nWe will follow the basic Matplotlib tutorial to create some basic plots to explore the data.\n\nhttps:\/\/matplotlib.org\/3.1.1\/tutorials\/introductory\/pyplot.html#sphx-glr-tutorials-introductory-pyplot-py\n\nThe important features of plots that should alway be included are:\n\n- The title\n- x and y labels\n- Clear colours and symbols\n- Limited number of data points\n\n\nWe can also utilise the formatting options for the marker types:\n\nhttps:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.plot.html\n\n#### Markers\n\ncharacter - description\n\n    '.'\tpoint marker\n    ','\tpixel marker\n    'o'\tcircle marker\n    'v'\ttriangle_down marker\n    '^'\ttriangle_up marker\n    '<'\ttriangle_left marker\n    '>'\ttriangle_right marker\n    '1'\ttri_down marker\n    '2'\ttri_up marker\n    '3'\ttri_left marker\n    '4'\ttri_right marker\n    's'\tsquare marker\n    'p'\tpentagon marker\n    '*'\tstar marker\n    'h'\thexagon1 marker\n    'H'\thexagon2 marker\n    '+'\tplus marker\n    'x'\tx marker\n    'D'\tdiamond marker\n    'd'\tthin_diamond marker\n    '|'\tvline marker\n    '_'\thline marker\n    \n    \n#### Line Styles\n\ncharacter - description\n\n    '-'\tsolid line style\n    '--'\tdashed line style\n    '-.'\tdash-dot line style\n    ':'\tdotted line style\n\n\nExample format strings:\n\n    'b'    # blue markers with default shape\n    'or'   # red circles\n    '-g'   # green solid line\n    '--'   # dashed line with default color\n    '^k:'  # black triangle_up markers connected by a dotted line\n\n#### Colors\n\nThe supported color abbreviations are the single letter codes\n\ncharacter - color\n\n    'b'\tblue\n    'g'\tgreen\n    'r'\tred\n    'c'\tcyan\n    'm'\tmagenta\n    'y'\tyellow\n    'k'\tblack\n    'w'\twhite\n\nand the 'CN' colors that index into the default property cycle.\n\nIf the color is the only part of the format string, you can additionally use any matplotlib.colors spec, e.g. full names ('green') or hex strings ('#008000').","8ef6b35d":"#### Data Types\n\nWe can use the Pandas '.dtypes' function to find the data type of each column. These are specific computer codes that relate to whether the data is a number, string or datetime.\n\nIn our case, we have four 'float64' columns, that are simply floats or decimal values, and one 'object' type which is simply a text column.\n\nMore details on these can be found in the Numpy descriptions:\n\nhttps:\/\/docs.scipy.org\/doc\/numpy\/user\/basics.types.html\n\nIt is important to ensure that the data is in the correct format and the format can be changed for a column using the Pandas '.astype()' function:\n\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.astype.html","6fe77ada":"### The Seaborn Plotting Library\n\nIt appears that there is a strong correlation between the Petal Length and Petal Width though it is less clear in the Sepal Length\/Width comparison.\n\nHowever, there seems to be some cluster groups and it may be worth investigating whether this relates to the species type. Matplotlib does not have an easy way to colour data points by another column. Instead, we may use the Seaborn package which is an extension of the Matplotlib package and has some additional aesthetic features.\n\nhttps:\/\/seaborn.pydata.org\/\n\nhttps:\/\/seaborn.pydata.org\/generated\/seaborn.scatterplot.html","a2b5f859":"--- \n# 2. Summarising and Cleaning Data\n\nWe have already utilised the '.unique()' Pandas function for finding the values in a categorical feature, we can use the '.describe()' function to provide an overview of the other continuous features.\n\nThis returns the summary statistics:\n\n- count: the number of elements\n- mean\n- std: the standard deviation\n- min\n- 25%: lower quartile\n- 50%: median\n- 75%: upper quartile\n- max","828d58f6":"#### We may now plot the features from our Iris dataset","4a9dbbd7":"Alternatively, we can reference columns by their id number, unlike rows this is not clearly shown but they can be easily counted.\n\nTo do this we use the \".iloc[row_index , col_index ]\" function.\n\nIf we want all rows or columns we simply use a colon \":\" instead of a number.","e6f83a59":"### Conditionally Selecting Data Elements and Subsetting\n\n#### Conditionally Selecting Categorical Features (String based)\n\nWe can utilise the column and row reference to subset the data as required. \n\nBefore we are able to subset rows, it helps to know which values can be taken in categorical features. In the Iris dataset we have one categorial feature, the 'species' column and we can find the unique values in this column via Pandas '.unique()' function.\n\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.unique.html\n\n","4c1c328a":"---\n# 2. Selecting Data\n\n\n### Indexing\n\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/indexing.html"}}