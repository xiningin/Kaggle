{"cell_type":{"4485ebb6":"code","0c146c21":"code","9e94b10a":"code","88c014c0":"code","0cdd1e0e":"code","6b2579b3":"code","0743d13e":"code","0b154c9e":"code","b832c3e9":"code","dee91a76":"code","50065381":"code","20c6465a":"code","14b66235":"code","26d09a9e":"code","77e4d6ff":"code","ba05aa06":"code","82452e0c":"code","ec1db94d":"code","9844b714":"code","210e02cb":"code","f603eca4":"code","df600fca":"code","495ac0b5":"code","3a40bc40":"code","8586cb0c":"code","c2b43152":"code","65dd1ade":"code","85877391":"code","93df4d44":"code","0549580c":"code","415f6e1a":"code","e5fffc1b":"code","019b36d8":"code","c093884e":"code","37841189":"code","95cbdf71":"markdown","0c169fd2":"markdown","ac7e2897":"markdown","39467cdb":"markdown","067de3c1":"markdown","90539977":"markdown","c1c65603":"markdown","dabf11e5":"markdown","449c9f4f":"markdown","c0ba0862":"markdown","cf28ee10":"markdown","70334009":"markdown","de85344b":"markdown","1474f20c":"markdown","05405d7a":"markdown"},"source":{"4485ebb6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c146c21":"import matplotlib.pyplot as plt # for ploting purpose","9e94b10a":"# Reading the csv file\ndata = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv')\n\n# Printing first five rows of the DataFrame 'data'\ndata.head()","88c014c0":"# Checking numbers of non null values and data type of every column\ndata.info()","0cdd1e0e":"# Counting null values in every column\ndata.isnull().sum()","6b2579b3":"# Checking for duplicates in the table based on app name\ndata[data.duplicated(subset=['App'], keep='first')]","0743d13e":"data[data['App'] == 'Google My Business']","0b154c9e":"# Droping duplicate rows\ndata.drop_duplicates(subset=['App'],keep='first', inplace=True, ignore_index=True)","b832c3e9":"data['Rating'] = data['Rating'].fillna(data.groupby('Category')['Rating'].transform('mean'))","dee91a76":"# Checking how many null values we still have\ndata.isnull().sum()","50065381":"#droping all the rows with left over null values\ndata.dropna(inplace=True) #droping null values\ndata.reset_index(drop=True, inplace=True) #reseting the index in the data DataFrame","20c6465a":"# CHanging 'Reviews' column datatype to int\ndata['Reviews'] = data['Reviews'].astype('int')","14b66235":"# Changing 'Size' column datatype to float \n# first we will check what all values it contains using DataFrame.unique()\ndata['Size'].unique()","26d09a9e":"# First we will replace 'Varies with device' to 1\ndata['Size'].replace('Varies with device', 1, inplace=True)","77e4d6ff":"# second we will replace M and k with 10^6 and 10^3 and then will convert it into float datatype\ndata['Size']=data['Size'].replace(r'[kM]$', '', regex=True).astype(float)*data['Size'].str.extract(pat=r'([kM]$)', expand=False).fillna(1).replace(['k','M'], [10**3, 10**6]).astype(int)","ba05aa06":"# Third we will replace 1 value with the mean size of the apps category wise\ndata['Size'].replace(1, np.nan, inplace=True)\ndata['Size'] = data['Size'].fillna(data.groupby('Category')['Size'].transform('mean'))","82452e0c":"#Converting \"Installs\" column datatype to int\ndata['Installs'] = data['Installs'].replace(r'[\\,\\+]', '', regex=True).astype(int)","ec1db94d":"#Converting 'Price' column datatype to float\n#First checking all the unique values it contains\ndata['Price'].unique()","9844b714":"#Now replacing '$' with '' and converting it into float\ndata['Price'] = data['Price'].replace(r'^\\$', '', regex=True).astype(float)","210e02cb":"#converting 'Last Updating' column to datetime\ndata['Last Updated'] = pd.to_datetime(data['Last Updated'])","f603eca4":"#Now having a final look at the table\ndata","df600fca":"#First we will look at the most popular category and number of intalls it has\npopular_cat = data.groupby('Category')['Installs'].sum().sort_values(ascending=False)\npopular_cat = popular_cat.reset_index()\npopular_cat\nprint('Most popular category is {} with {} no. of installs'.format(popular_cat['Category'][0], popular_cat['Installs'][0]))","495ac0b5":"#As the figure of number of installs is too big to read easily so converting it to billions\npopular_cat['Installs'] = popular_cat['Installs']\/(10**9)","3a40bc40":"#Now we will plot bar chart showing Top 10 and Bottom 10 categories against number of installs in billions\nfig, ax = plt.subplots(2,1, figsize = [10,12])\nax[0].set_ylabel('No of installs\\nin billions', fontweight='bold', rotation=0, labelpad=50, fontsize=10)\nax[0].set_xlabel('Category', fontweight='bold', fontsize=10)\nax[0].set_title('Top 10 categories', fontweight='bold', fontsize=16)\npopular_cat[:10].plot.bar(x='Category', ax=ax[0])\n\npopular_cat[(len(popular_cat)-10):].plot.bar(x='Category', ax=ax[1])\nax[1].set_ylabel('No of installs\\nin billions', fontweight='bold', rotation=0, labelpad=50, fontsize=10)\nax[1].set_xlabel('Category', fontweight='bold', fontsize=10)\nax[1].set_title('Bottom 10 categories', fontweight='bold', fontsize=16)\nplt.tight_layout()\nplt.show()","8586cb0c":"#Now moving on to the Genre we will plot a bar chart showing Top 10 genres with most number of apps\ngenre_data = data['Genres'].value_counts()[:10]\ngenre_data.plot.bar(figsize=[20,8])\nplt.xlabel('Genres', fontsize=12, fontweight='bold')\nplt.xticks(rotation=75, fontsize=12)\nplt.ylabel('Count', fontsize=12, fontweight='bold')\nplt.title('Top 10 Genres with most no of apps', fontweight='bold', fontsize=16)\nplt.show()","c2b43152":"#Next we will plot a pie chart showing percentage of free and paid apps on Google play store\ntype_data = data['Type'].value_counts()\nplt.pie(type_data, labels=type_data.index, autopct='%1.1f%%', startangle=180)\nplt.title('Types', fontweight='bold', fontsize=16)\nplt.show()","65dd1ade":"#Exact number of free and paid apps based on data we have\nprint('No of free apps: {}\\nNo of paid apps: {}'.format(data['Type'].value_counts()[0], data['Type'].value_counts()[1]))","85877391":"#Rating of the apps based on 'Type' i.e. Free or Paid\nmean_rating_data = data.groupby(['Category', 'Type'])['Rating'].mean().unstack().sort_values('Category')\n\nmean_rating_data.plot.bar(figsize=[20,8])\nplt.xlabel('Category', fontsize=12, fontweight='bold')\nplt.ylabel('Rating', fontsize=12, fontweight='bold')\nplt.title('Avegare rating of paid vs free apps in every category', fontsize=16, fontweight='bold')\nplt.show()","93df4d44":"#Now we will look at the app with most number of reviews and its number of reviews\napp_most_reviews = data[data['Reviews'] == data['Reviews'].max()][['App', 'Reviews']].reset_index(drop=True)\n\nprint('App with most no of reviews is: {}'.format(app_most_reviews['App'][0]))\nprint('And it has {} reviews'.format(app_most_reviews['Reviews'][0]))","0549580c":"#Comparing Top 10 apps based on number of reviews\nreviews_data = data.sort_values('Reviews', ascending=False)[['App', 'Reviews']][:10]\nreviews_data['Reviews'] = reviews_data['Reviews']\/10**6\nreviews_data.plot.bar(x='App', y='Reviews', figsize=[15,5])\nplt.title('Apps with most no of reviews', fontweight='bold', fontsize=16)\nplt.xlabel('App', fontsize=12)\nplt.ylabel('No of reviews in millions', fontsize=12)\nplt.show()","415f6e1a":"#Name and category of apps with maximum size\nprint('Table of apps and there category which have maximum size')\ndata[data['Size'] == data['Size'].max()][['App', 'Category', 'Size']].reset_index(drop=True)","e5fffc1b":"#Name of apps with max size from each category\ndata.sort_values(['Size', 'Rating'], ascending=False).groupby('Category').first()[['App', 'Size']]","019b36d8":"#Apps with maximum number of installs\ndata[data['Installs'] == data['Installs'].max()][['App', 'Installs']].reset_index(drop=True)","c093884e":"#App which has not been updated from long time\ndata['No of days since updated'] = (pd.Timestamp.now() - data['Last Updated']).dt.days\napp_last_updated = data[data['No of days since updated'] == data['No of days since updated'].max()][['App', 'Last Updated']].reset_index(drop=True)\n\nprint('App which has not been updated from long time is: {}'.format(app_last_updated['App'][0]))\nprint('It was last updated on: {}'.format(app_last_updated['Last Updated'][0]))","37841189":"#Ploting bar chart showing count of apps based on content rating they have\ncontent_rating_data = data['Content Rating'].value_counts()\ncontent_rating_data.plot.bar(figsize=[20,8])\nplt.xlabel('Content Rating', fontsize=12, fontweight='bold')\nplt.xticks(rotation=75, fontsize=12)\nplt.ylabel('Count', fontsize=12, fontweight='bold')\nplt.title('No of Apps on the basis of content rating', fontweight='bold', fontsize=16)\nplt.show()","95cbdf71":"# 3. Performing EDA","0c169fd2":"> As we can see Rating column has 1474 null values. So we gave to either fill these null values or drop them. First will look at the duplicate values.","ac7e2897":"> Clearly we can see that most apps are free on Google play store","39467cdb":"# 1. Reading data from CSV file","067de3c1":"> We can see that most of the apps are for everyone","90539977":"> As now we dont have any rows with null values, Now we can change the datatype of columns so that we can extract required information from them","c1c65603":"# 2. Cleaning data","dabf11e5":"> All these apps have size of 100Mb","449c9f4f":"> We can see that in most of the categories Paid apps have higher mean rating as compared to Free apps but its not true for every category","c0ba0862":"> Now we can replace null values in Rating column with mean Rating category wise","cf28ee10":"> **We can clearly see that most popular categories based on total number of downloads of apps in each category are Games, Communications and Tools and least popular are Parenting, Beauty, Events**","70334009":"> All these apps have over a billion downloads.\n**As we can see most of the apps are from Google and facebook because most of these apps are pre-installed.**","de85344b":"**That's it from my side. I am sorry if there are any grammatical or spelling errors.\nAnd do like and share your reviews on this notebook as this is my first attempt.\nThank you**","1474f20c":"> **As it can be seen popular genre on Google play store based on number of apps it has are Tools, Entertainment, Education**","05405d7a":"> So we have 1181 duplicate rows and as we can see that each row contains same values for each app, So we can drop these rows."}}