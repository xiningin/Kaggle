{"cell_type":{"082cc6bd":"code","06237260":"code","66284796":"code","eed3f997":"code","1b7783a9":"code","fbccad19":"code","4f4e7fee":"code","96279773":"code","7a6f8a43":"code","e15fc60d":"code","93bc2e4a":"code","9753042a":"code","428b94d0":"code","e1642933":"code","e046e21a":"code","9aee1d50":"code","bb677a4a":"code","15f52df7":"code","f7886c29":"code","77f1c490":"code","6c99693b":"code","f0a89521":"markdown","1377b9cd":"markdown","30b86cc2":"markdown","322cf9a5":"markdown","5626f54b":"markdown","4ba39c29":"markdown","943c2dda":"markdown","53b48d1e":"markdown","dc0c8bc2":"markdown","b6eb52c9":"markdown","24430ad0":"markdown","ce534f6d":"markdown","a7adc3d3":"markdown","8ffb349b":"markdown","541b2ea2":"markdown","18c29645":"markdown","64cacef7":"markdown","adce3ed5":"markdown","a2776d29":"markdown","d17bb33c":"markdown","4a2f05db":"markdown","48671c99":"markdown","239afb20":"markdown","e430db93":"markdown","f828e720":"markdown","e564c468":"markdown","dddc3631":"markdown","dc5388f5":"markdown","53dfe1c3":"markdown","e8cb8fb0":"markdown","a38fd03c":"markdown","91b83344":"markdown","3fce6ecd":"markdown","66ac269a":"markdown","9767d99a":"markdown","d021be84":"markdown"},"source":{"082cc6bd":"# setting up environment\nimport pandas as pd\nimport numpy as np\nimport requests\nimport time\nimport copy\nfrom datetime import datetime as dt\n\nfrom fbprophet import Prophet\n\nfrom bokeh.plotting import figure, show\nfrom bokeh.models import Span\nfrom bokeh.io import output_notebook\nfrom bokeh.models import Range1d\nfrom bokeh.models import ColumnDataSource as cds\nfrom bokeh.models import HoverTool\nfrom bokeh.models import NumeralTickFormatter\n\n\noutput_notebook()","06237260":"def getHourlyUniTVL():\n    api = 'https:\/\/api.flipsidecrypto.com\/api\/v2\/queries\/22b4048c-6872-4800-88f8-b88dace2efd7\/data\/latest'\n    \n    response = requests.get(api)\n    df = pd.DataFrame(response.json())\n#     df = df[df['BLOCK_HOUR'] < '01-09-2021']\n    df['BLOCK_HOUR'] = pd.to_datetime(df['BLOCK_HOUR']).dt.tz_localize(None)\n    df = df.drop(columns = ['N_POOLS'])\n    return df\n\ndef getDailyUniTVL():\n    api = 'https:\/\/api.flipsidecrypto.com\/api\/v2\/queries\/5af7a9cb-8df7-42db-9691-ba5574f9401b\/data\/latest'\n    \n    response = requests.get(api)\n    df = pd.DataFrame(response.json())\n    df['BLOCK_HOUR'] = pd.to_datetime(df['BLOCK_HOUR']).dt.tz_localize(None)\n    df = df.drop(columns = ['N_POOLS'])\n    return df","66284796":"# getting data as a Pandas DataFrame\nh_tvl_df = getHourlyUniTVL() \nd_tvl_df = getDailyUniTVL() \n# converting Pandas Dataframe to Bokeh ColumnDataSource\nh_tvl_cds = cds(h_tvl_df)\nd_tvl_cds = cds(d_tvl_df)","eed3f997":"h_tvl_df.head()\n# d_tvl_df.head()","1b7783a9":"hover = HoverTool(tooltips = [('Date', '@BLOCK_HOUR{%F | %R}'),\n                             ('Total Value Locked', '@TOTAL_LIQUIDITY_USD{($ 0.00 a)}')],\n                 formatters={'@BLOCK_HOUR': 'datetime'},mode='vline')","fbccad19":"p = figure(title=\"Hourly Total Value Locked - Uniswapv3\",\n           x_axis_type=\"datetime\", x_axis_label='Time', y_axis_label='TVL_USD',\n#           plot_width=1200, plot_height=800\n          )\np.varea(source = h_tvl_cds,x='BLOCK_HOUR',y1='TOTAL_LIQUIDITY_USD',y2=0)\np.line(source = h_tvl_cds,x='BLOCK_HOUR',y='TOTAL_LIQUIDITY_USD',color='red')\n\np.add_tools(hover)\np.yaxis.formatter=NumeralTickFormatter(format=\"$ 0.00 a\")\np.y_range = Range1d(0, 3*10**9)\nshow(p)","4f4e7fee":"p = figure(title=\"Daily Total Value Locked - Uniswapv3\",\n           x_axis_type=\"datetime\", x_axis_label='Time', y_axis_label='TVL_USD',\n#           plot_width=1200, plot_height=800\n          )\np.varea(source = d_tvl_cds,x='BLOCK_HOUR',y1='TOTAL_LIQUIDITY_USD',y2=0)\np.line(source = d_tvl_cds,x='BLOCK_HOUR',y='TOTAL_LIQUIDITY_USD',color='red')\n\np.add_tools(hover)\np.yaxis.formatter=NumeralTickFormatter(format=\"$ 0.00 a\")\np.y_range = Range1d(0, 3*10**9)\nshow(p)","96279773":"model_df = copy.deepcopy(h_tvl_df)\nmodel_df.columns = ['ds','y']\n\nm = Prophet(interval_width=0.95)\nmodel = m.fit(model_df)\n\nfuture = m.make_future_dataframe(periods=120,freq='D')\nforecast = m.predict(future)\n# forecast.head()","7a6f8a43":"fig1 = m.plot(forecast)","e15fc60d":"forecast['tvl'] = h_tvl_df.sort_values(by='BLOCK_HOUR')['TOTAL_LIQUIDITY_USD']\nforecast_cds = cds(forecast)","93bc2e4a":"h_tvl_df","9753042a":"hover = HoverTool(tooltips = [('Date', '@ds{%F | %R}'),\n                             ('Total Value Locked', '@tvl{($ 0.00 a)}'),\n                             ('Upper Bound','@yhat_upper{($ 0.00 a)}'),\n                             ('Prediction','@yhat{($ 0.00 a)}'),\n                             ('Lower Bound','@yhat_lower{($ 0.00 a)}')],\n                 formatters={'@ds': 'datetime'},\n                  names=['ytd_aave'],\n                 mode='vline'\n                 )","428b94d0":"p = figure(title=\"Model 1\",x_axis_type=\"datetime\", x_axis_label='Time', y_axis_label='Price_USD')\np.scatter(source=h_tvl_cds, x='BLOCK_HOUR',y='TOTAL_LIQUIDITY_USD', legend_label='TVL',line_width=0.5,color='red')\np.varea(source= forecast_cds, x='ds',y1 = 'yhat_lower',y2 = 'yhat_upper', legend_label=\"TVL Bounds\", color=\"navy\", alpha=0.2)\np.line(source= forecast_cds, x='ds',y = 'yhat', legend_label=\"Predicted TVL\", line_width=2,color='blue',name='ytd_aave')\np.legend.location = \"top_left\"\n\noct_start_date = time.mktime(dt(2021, 10, 1, 0, 0, 0).timetuple())*1000\noct_start = Span(location=oct_start_date,dimension='height', line_color='magenta',line_dash='dashed', line_width=1)\np.add_layout(oct_start)\n\nnov_start_date = time.mktime(dt(2021, 11, 1, 0, 0, 0).timetuple())*1000\nnov_start = Span(location=nov_start_date,dimension='height', line_color='magenta',line_dash='dashed', line_width=1)\np.add_layout(nov_start)\n\ndec_start_date = time.mktime(dt(2021, 12, 1, 0, 0, 0).timetuple())*1000\ndec_start = Span(location=dec_start_date,dimension='height', line_color='magenta',line_dash='dashed', line_width=1)\np.add_layout(dec_start)\n\np.add_tools(hover)\np.yaxis.formatter=NumeralTickFormatter(format=\"$ 0.00 a\")\nshow(p)","e1642933":"fig2 = m.plot_components(forecast)","e046e21a":"model_df = copy.deepcopy(d_tvl_df)\nmodel_df.columns = ['ds','y']\n\nm = Prophet(interval_width=0.95)\nmodel = m.fit(model_df)\n\nfuture = m.make_future_dataframe(periods=120,freq='D')\nforecast = m.predict(future)\n# forecast.head()","9aee1d50":"fig1 = m.plot(forecast)","bb677a4a":"forecast['tvl'] = d_tvl_df.sort_values(by='BLOCK_HOUR')['TOTAL_LIQUIDITY_USD']\nforecast_cds = cds(forecast)","15f52df7":"forecast.head()","f7886c29":"p = figure(title=\"Model 2\",x_axis_type=\"datetime\", x_axis_label='Time', y_axis_label='Price_USD')\np.line(source=d_tvl_cds, x='BLOCK_HOUR',y='TOTAL_LIQUIDITY_USD', legend_label='TVL',line_width=2,color='red')\np.varea(source= forecast_cds, x='ds',y1 = 'yhat_lower',y2 = 'yhat_upper', legend_label=\"TVL Bounds\", color=\"navy\", alpha=0.2)\np.line(source= forecast_cds, x='ds',y = 'yhat', legend_label=\"Predicted TVL\", line_width=2,color='blue',name='ytd_aave')\np.legend.location = \"top_left\"\n\nprediction_start_date = time.mktime(dt(2021, 9, 1, 0, 0, 0).timetuple())*1000\nprediction_start = Span(location=prediction_start_date,dimension='height', line_color='green',line_dash='dashed', line_width=3)\np.add_layout(prediction_start)\n\noct_start_date = time.mktime(dt(2021, 10, 1, 0, 0, 0).timetuple())*1000\noct_start = Span(location=oct_start_date,dimension='height', line_color='magenta',line_dash='dashed', line_width=1)\np.add_layout(oct_start)\n\nnov_start_date = time.mktime(dt(2021, 11, 1, 0, 0, 0).timetuple())*1000\nnov_start = Span(location=nov_start_date,dimension='height', line_color='magenta',line_dash='dashed', line_width=1)\np.add_layout(nov_start)\n\ndec_start_date = time.mktime(dt(2021, 12, 1, 0, 0, 0).timetuple())*1000\ndec_start = Span(location=dec_start_date,dimension='height', line_color='magenta',line_dash='dashed', line_width=1)\np.add_layout(dec_start)\n\np.add_tools(hover)\np.yaxis.formatter=NumeralTickFormatter(format=\"$ 0.00 a\")\nshow(p)","77f1c490":"out_df = pd.DataFrame({\n    'October' : ['3.44 Billion','3.86 Billion','3.06 Billion'],\n    'November' : ['4.24 Billion','5.04 Billion','3.27 Billion'],\n    'December' : ['4.87 Billion','6.37 Billion','3.35 Billion']\n})\nout_df.index = ['Predicited TVL', 'Upper Bound', 'Lower Bound']\nout_df","6c99693b":"fig2 = m.plot_components(forecast)","f0a89521":"### Helper Functions","1377b9cd":"This is how our the data we are going to use to build the model will look like.","30b86cc2":"We will use \n* `pandas`, `numpy` for data processing\n* `request` to get data using FlipsideCrypto's API \n* `bokeh` for visualization\n* `fbprophet` Facebook Prophet","322cf9a5":"# Methodology \n* For this predicitive analysis, we will assume that the Total Value Locked (TVL) of Uniswap v3 is a Time-series function. \n* This assumption extends that the TVL experiences seasonality within its trends.\n* Facebook's Prophet Library will be used to decompose this TVL function into its constituent functions.\n* These constituents will be then used to analyse the trends and judge the model's prediction.","5626f54b":"### What is Prophet ?\n\n [Prophet](https:\/\/facebook.github.io\/prophet\/) is an open-source library published by Facebook that is based on decomposable (trend+seasonality+holidays) models. Prophet is able to capture daily, weekly and yearly seasonality along with holiday effects, by implementing [additive](https:\/\/en.wikipedia.org\/wiki\/Additive_model) regression models. \n\nThe prophet model assumes that the time series can be decomposed as follows:\n\n$$y(t) = g(t) + s(t) + h(t) + \u03b5(t)$$\n\nThe three terms\u00a0*`g(t)`*,\u00a0*`s(t)`,*\u00a0and *`h(t)`*\u00a0correspond respectively to trend, seasonality and holiday. The last term is the error term.\n\n[ [more on Facebook's Prophet](https:\/\/www.analyticsvidhya.com\/blog\/2018\/05\/generate-accurate-forecasts-facebook-prophet-python-r\/) ]","4ba39c29":"Now, we will use Daily Data that we obtained to fit the model and then try prediciting 3 months into the future.","943c2dda":"# Let's Code","53b48d1e":"### Setting up environment","dc0c8bc2":"For our first model, we will use Hourly Data that we obtained to fit the model and then try prediciting 3 months into the future.","b6eb52c9":"### What is Time Series ? \nTime-series forecast itself is one of the methods to create a model for predicting future values based on current and historical time series data. There are four components of time-series:\n\n1. **Trend**: an increase or decrease of data; could be linear or nonlinear (logistics growth)\n2. **Seasonality**: a characteristic of time-series data when it experiences regular and predictable movement after a fixed period of time\n3. **Cyclic**: a cyclic pattern exists when the data experience rises or falls (regular or periodic fluctuation in data)\n4. **Irregularity**: the residual of time series after the trend-cycle and seasonal component are removed","24430ad0":"______________________________________________________\n","ce534f6d":"However all is not lost with this mode, as this model shows us some key trends in the data.","a7adc3d3":"## PREDICTIONS.\n______________________________________________________\n","8ffb349b":"# References \n\n- Time-Series Forecasting: Predicting Stock Prices Using Facebook\u2019s Prophet Model - Serafeim Loukas - [view Post](https:\/\/towardsdatascience.com\/time-series-forecasting-predicting-stock-prices-using-facebooks-prophet-model-9ee1657132b5)\n- Hacking Time-Series Forecasting Like a Pro with FBProphet - Tokopedia [view Post](https:\/\/medium.com\/tokopedia-data\/hacking-time-series-forecasting-like-a-pro-with-fbprophet-76f276f0a058)","541b2ea2":"If you found the analysis insightful, do upvote ","18c29645":"From the trend decomposition done by the `Prophet` package, we can see two distinct patterns in the data, which are can be explained logically.     \n*point to be noted - The time data is in UTC, assuming most activity occurs during US hours, we should assume a -4 to -5 Hour shift*\n1. **TVL peaks during Monday** - This is because most activity comes in during the week (5 hour shift should put the peak right above Monday. This means during the week, volume is taken out of the protocol for various purposes. Then usually this volume picks up in Sunday cause Sunday's are rest days !!! \n1. **TVL peaks around 12:00 UTC (or around 7:00 AM in US)** - In a similar way, most activity start around morning hours, and keep going until evening. The liquidity starts recovering only after 20:00 UTC (or 15:00 PM in US)","64cacef7":"### Uniswap Bounty 53\n# UNISWAP TVL PROJECTIONS\n","adce3ed5":"______________________________________________________\n","a2776d29":"# Appendix","d17bb33c":"# Model 2 - Daily Model","4a2f05db":"Plotting the Data of TVL vs Time , we get the following two plots.","48671c99":"## SQL used","239afb20":"# Conclusion\n\n## Insights\n\n* The models seperated out the seasonality and cyclic trends in the TVL distribution. By validating these trends logically, we can validate the model and thus suggest its predictions are good\n* The Daily model predicts that the TVL of uniswap could theoretically double by the end of the year. This lines up nicely with the predictions for ETH to hit 10K USD in value by the end of the year.\n* The Daily model also predicts a minimum saturation (i.e. a lower value of long term TVL ) around 3 Billion USD. With the current TVL bring just around 3 Billion USD, the model predicts that TVL growth is certain irrespective of the market condition.\n\n## Closing Thoughts\nThis model however isn't perfect. In future, we can look into ways of improving models by adding extra regressors to help fit the model better. Some regressors that could be added are :\n* ETH price - The volatile nature of the price action of ETH could be a very important metric in how liquidity is moved within UNISWAP\n* GAS price - ETH gas price is a measure of activity in the chain itself. Higher gas fees could theoretically shun away activity, while lower gas fees could increase activity. As gas fees and activity are inter-related and affect each other via feedback, the outcome from such a model could be interesting.\n\nThe reason I didn't add these to the models at the moment is, in the forecasting part, when future values of ETH and GAS are required, we will have to model seperate models for those too.","e430db93":"***Incase the plot don't load properly the first time, reload the page***","f828e720":"Looking at the graph, we can see that the model struggles to predict the TVL reasonably, with a massive range bounds in the prediction.\nThis could be because :\n1. **The data is too-noisy** - This is clearly evident from looking at the TVL graph for hourly data. This can be attributed to the properties of Ethereum network in my opinion. High gas fees means, transactions are usually less, but of high volume. Hence the fluctuations are wild and not seasonal. \n1. **Less amount of data** - We are trying to predict 3 Months from 4 Months of data. Also the much of the data is from the infancy of the protocol, with noise overpowering much of the seasonality and cyclic trends. Plus some of these trends might be long that they might not have completed their full cycles yet. ","e564c468":"Once we get the data in a Pandas DataFrame, we also make a copy of the DataFrame in the form of Bokeh's ColumnDataSource, so we can add interactivity to the plots.","dddc3631":"```sql\nWITH hourly as (\nSELECT\n  DISTINCT date_trunc('hour',pstat.block_timestamp) as block_hour,\n  pstat.pool_address,\n  pool_name,\n  \n  last_value(price_0_1) OVER (partition by block_hour, pool_address, pool_name order by block_timestamp) as price01,\n  last_value(price_1_0) OVER (partition by block_hour, pool_address, pool_name order by block_timestamp) as price10,\n  \n  last_value(tph0.price) OVER (PARTITION BY block_hour, pool_address, pool_name ORDER BY block_timestamp) as price0,\n  last_value(tph1.price) OVER (PARTITION BY block_hour, pool_address, pool_name ORDER BY block_timestamp) as  price1,\n  \n  last_value(token0_balance_adjusted) OVER (PARTITION BY block_hour, pool_address, pool_name ORDER BY block_timestamp) as gross_reserves_token0_adjusted,\n  last_value(token1_balance_adjusted) OVER (PARTITION BY block_hour, pool_address, pool_name ORDER BY block_timestamp) as gross_reserves_token1_adjusted,\n  \n  price0 * gross_reserves_token0_adjusted as token0_gross_usd,\n  price1 * gross_reserves_token1_adjusted as token1_gross_usd,\n\n  CASE WHEN price0 IS NULL and price1 IS NULL THEN 'no prices' \n       WHEN price0 IS NULL and price1 IS NOT NULL THEN 'price1' \n       WHEN price1 IS NULL and price0 IS NOT NULL THEN 'price0' \n       ELSE 'both prices' \n  END AS price_status\n  FROM uniswapv3.pool_stats pstat\n  \n  LEFT JOIN ethereum.token_prices_hourly tph0 \n    ON tph0.hour = date_trunc('hour',pstat.block_timestamp) \n    AND pstat.token0_address = tph0.token_address\n  \n  LEFT JOIN ethereum.token_prices_hourly tph1 \n    ON tph1.hour = date_trunc('hour',pstat.block_timestamp) \n    AND pstat.token1_address = tph1.token_address\n  \n-- WHERE pstat.block_timestamp >= getdate() - interval '7 days' \nORDER BY block_hour DESC, pstat.pool_address\n),\n\ngussied as (\n  SELECT\n    block_hour, \n    pool_address,\n    pool_name, \n    price_status,\n    CASE \n      WHEN price_status = 'both prices' THEN token0_gross_usd + token1_gross_usd\n      when price_status = 'price1' then token1_gross_usd + ((gross_reserves_token0_adjusted * price10) * price1)\n      when price_status = 'price0' then token0_gross_usd + ((gross_reserves_token1_adjusted * price01) * price0)\n      ELSE NULL \n     END AS tvl_usd\n  FROM hourly\n  WHERE price_status <> 'no prices'\n)\nSELECT \n  block_hour, \n  count(1) as n_pools, \n  sum(tvl_usd) as total_liquidity_usd \nFROM gussied \nWHERE tvl_usd <> 'NaN'\n  AND tvl_usd < 500000000 \nGROUP BY 1 \nORDER BY 1 DESC;\n```","dc5388f5":"# Model 1 - Hourly Model","53dfe1c3":"In this analysis, we will assume that the Growth of TVL of Uniswap v3 is a Time-Series function and the use Facebook's opensource Prophet Library to predict future TVL by using additive regression models. The Data for this analysis will be taken from [FlipsideCrypto](https:\/\/www.flipsidecrypto.com\/) - [Uniswap v3 tables](https:\/\/docs.flipsidecrypto.com\/our-data\/tables\/uniswap-v3-tables).   \n\nThey have bounties running for providing analytical insights on Blockchain Protocols like Terra, Uniswap, AAVE, Polygon. Check out the latest bounties for UNISWAP v3 [here](https:\/\/www.notion.so\/teamflipside\/Flipside-Bounties-for-Uniswap-47b88e4d892b4783ba986c117fa48fdf).      \n","e8cb8fb0":"This query was taken from FlipsideCrypto Uniswapv3 Starter Queries by - **xiuyangg** - \"Total Value Locked in Uniswap V3 - Hourly\".    \nChanging the `'hour'`  in lines `3`,`27`,`31` to `'day'` will retrieve TVL in daily time scale","a38fd03c":"### Getting and Prepping Data","91b83344":"If you are new to Flipside's Bounty Hunting, do use my Discord ID in reference - `maybeYonas#7121` while submitting your analytics. It aint much, but gets me coffee for a week .    \n","3fce6ecd":"Looking at this graph, we can see that this model fares much better than our previous model and has much better and more concise prediction range.\nThis could be because :\n1. **The data is less-noisy** - By taking Daily data, we cut much of the hourly noise from the data allowing the trends to take centerstage, which makes it easier for the `prophet` package to fit and predict     \n\nWe can also see a lower saturation minimum, suggesting that in the long run the TVL cannot be lower than 3 Billion USD","66ac269a":"The trend part of the first model gets vindicated again as the TVL peaks around Sunday, as most liquidity removing activity occur during week hours.","9767d99a":"These helper functions will enable the retrival and formatting of the data that is used for the analysis.    \nThis query for these data was taken from [FlipsideCrypto](https:\/\/www.flipsidecrypto.com\/) Uniswapv3 Starter Queries by - **xiuyangg** - \"Total Value Locked in Uniswap V3 - Hourly\".","d021be84":"These trends are significant because, these are normal stock-market hours. Which means, probably most activity seems to be coming from institutions and not hobbyists."}}