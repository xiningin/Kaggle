{"cell_type":{"8997869e":"code","dd78f7fc":"code","ccb65964":"code","099b97d0":"code","675ff5e8":"code","3a83e2e1":"code","ef04d1df":"code","c7f98e37":"code","b7362da8":"code","9560cb61":"code","b84d6499":"code","4274fe1b":"code","8235999e":"code","f3a2b8e4":"code","acf59af7":"code","6975bafe":"code","81a9ee01":"code","e2d59a77":"code","e21cb774":"code","0cb51025":"code","d6d9752a":"code","3a959d72":"code","055c7d72":"code","57a286a5":"code","09ba0947":"code","4539d44e":"code","05021e47":"code","7847fd8c":"code","d710f4f2":"code","b2cccc2c":"code","d2ab9b3f":"code","eb414cf3":"markdown","613e6963":"markdown","d11d048b":"markdown","c271797c":"markdown","1b4d4ce8":"markdown","0ef88899":"markdown"},"source":{"8997869e":"import numpy as np","dd78f7fc":"array=[12,34,12,56,43,67]","ccb65964":"#sorting\nsort=np.sort(array)\nsort","099b97d0":"for i in range(len(array)):\n  if(array[i]==56):\n    print(\"element is present\")\n    break\n \n","675ff5e8":"#Maximum of three numbers\n\ndef maxnum(n1, n2):\n  if(n1>n2):\n    return n1\n  elif(n2>n1):\n    return n2\n  return n2\n\nprint(\"Enter 3 numbers\")\nx = int(input(\"x=\"))\ny = int(input(\"y=\"))\nz = int(input(\"z=\"))\nmaxtwo = maxnum(x,y)\nmaxmax = maxnum(maxtwo,z)\n\nprint(\"The maximum number among the three numbers =\",maxmax)","3a83e2e1":"#Reverse a String\n\ndef reverse_a_string(str1):\n  rev = \"\"\n  length = len(str1)\n  while length>0:\n    rev = rev + str1[length-1]\n    length-=1\n  return rev\n\nstrtorev = str(input(\"Enter a string to be reversed:\"))\nreverseofstr = reverse_a_string(strtorev)\n\nprint(\"Reverse of the string =\", reverseofstr)","ef04d1df":"#Factorial\n\ndef fact(n):\n  fact = 1\n  for i in range(1,n+1):\n    fact = fact*i\n  return fact\n\nnum = int(input(\"Enter the number for factorial:\"))\nprint(\"Factorial of\",num,\"=\",fact(num))","c7f98e37":"#Unique List\n\ndef unique(list1):\n  unique_list = []\n\n  for i in list1:\n      if i not in unique_list:\n        unique_list.append(i)\n\n  print(unique_list)\n\nlst = []\nn = int(input(\"Enter number of elements : \"))\nprint(\"Enter the elements of the list\")\nfor i in range(0, n):\n    ele = int(input())\n    lst.append(ele)\n    \nunique(lst)","b7362da8":"file = open(\"Myfile.txt\",\"a\")","9560cb61":"file","b84d6499":"filea = open(r\"Myfile.txt\",\"w+\")","4274fe1b":"file1 = open(\"Myfile.txt\",\"w\")\nL = [\"This is Delhi \\n\",\"This is Paris \\n\",\"This is London \\n\"]","8235999e":"# \\n is placed to indicate EOL (End of Line)\nfile1.write(\"Hello \\n\")\nfile1.writelines(L)\nfile1.close() #to change file access modes","f3a2b8e4":"file1 = open(\"Myfile.txt\",\"r+\")\n\nprint(\"Output of Read function is \")\nprint(file1.read())","acf59af7":"# seek(n) takes the file handle to the nth\n# bite from the beginning.\nfile1.seek(0)\n\nprint(\"Output of Readline function is \")\nprint(file1.readline())","6975bafe":"file1.seek(0)\n\n# To show difference between read and readline\nprint(\"Output of Read(9) function is \")\nprint(file1.read(9))","81a9ee01":"file1.seek(0)\n\nprint(\"Output of Readline(9) function is \")\nprint(file1.readline(9))","e2d59a77":"file1.seek(0)\n# readlines function\nprint(\"Output of Readlines function is \")\nprint(file1.readlines())\nfile1.close()","e21cb774":"# Python program to illustrate Append vs write mode\nfile2 = open(\"myfile.txt\",\"w\")\nL = [\"This is Delhi \\n\",\"This is Paris \\n\",\"This is London \\n\"]\nfile2.close()","0cb51025":"# Append-adds at last\nfile2 = open(\"myfile.txt\",\"a\")#append mode\nfile2.write(\"Today \\n\")\nfile2.close()","d6d9752a":"file2 = open(\"myfile.txt\",\"r\")\nprint(\"Output of Readlines after appending\")\nprint(file2.readlines())\nfile2.close()","3a959d72":"# Write-Overwrites\nfile2 = open(\"myfile.txt\",\"w\")#write mode\nfile2.write(\"Tomorrow \\n\")\nfile2.close()","055c7d72":"file2 = open(\"myfile.txt\",\"r\")\nprint(\"Output of Readlines after writing\")\nprint(file2.readlines())\nfile2.close()","57a286a5":"#matrix addition and multiplication\nx=[[1,2,3],\n   [4,5,6],\n   [7,8,9]]\n\ny=[[3,4,5],\n   [5,6,9],\n   [3,7,2]]\ncal=[[0,0,0],\n       [0,0,0],\n       [0,0,0]]\ndef matadd():\n  for i in range (len(x)):\n    for j in range (len(x[0])):\n     cal[i][j]=x[i][j]+y[i][j]\n  \n  for s in cal:\n    print(s)\n\nprint(\"Addition:\")\nmatadd()\n\ndef matmul():\n  for i in range(len(x)):\n   \n   for j in range(len(y[0])):\n      \n       for k in range(len(y)):\n           cal[i][j] += x[i][k] * y[k][j]\n\n  for m in cal:\n    print(m)\n\nprint(\"\\nMultiplication: \")\nmatmul()","09ba0947":"#addition and subtraction of complex numbers\nnum1 = complex(2, 1)\nnum2 = complex(1, 2)\n\ndef addComplex( num1, num2):\n    return num1 + num2\n \ndef subComplex(num1, num2):\n  return num1-num2\n\nprint(\"Addition: \", addComplex(num1, num2))\nprint(\"Subtraction: \", subComplex(num1, num2))","4539d44e":"import pandas as pd\n\nurl=\"https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data\"\ndf=pd.read_csv(url, names=['sepal length','sepal width','petal length','petal width','target'])\ndf.head()","05021e47":"df","7847fd8c":"from sklearn.preprocessing import StandardScaler\nfeatures = ['sepal length', 'sepal width', 'petal length', 'petal width']# Separating out the features\nx = df.loc[:, features].values# Separating out the target\ny = df.loc[:,['target']].values# Standardizing the features\nx = StandardScaler().fit_transform(x)\nx","d710f4f2":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\nprincipalComponents = pca.fit_transform(x)\nprincipalDf = pd.DataFrame(data = principalComponents, columns = ['principal component 1', 'principal component 2'])\nprincipalDf","b2cccc2c":"x=[8,10,15,20]\nnew_min=0\nnew_max=1\n\nfor v in x:\n   z=((((v-min(x))\/(max(x)-min(x)))*(new_max-new_min)) + new_min )\n   print(z)\n \n","d2ab9b3f":"import statistics\nimport numpy as np\n\ndata1 = [8,10,15,20]\n  \nx = statistics.mean(data1)\n  \nprint(\"Mean is :\", x)\n\nsd=np.std(data1)\n\n\nprint(\"std of sd : \", np.std(data1))\n\nfor v in data1:\n  \n  z=((v-x)\/sd)\n\n  print(z)\n\n\n","eb414cf3":"#FILEOPERATION","613e6963":"#matrix2","d11d048b":"#factorial,reverse,max,uniquelist\n","c271797c":"#Arraysort_search","1b4d4ce8":"#STANDARD_SCALAR","0ef88899":"#Z_SCORE"}}