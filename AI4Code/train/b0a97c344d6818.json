{"cell_type":{"ee19d396":"code","d33e0de3":"code","2d773996":"code","a5c9bdb0":"code","ad99ccfb":"code","a9a70f9e":"code","3ed61550":"code","9340b955":"code","448029f4":"code","115d920f":"code","cc62756e":"code","f21feb3e":"code","7b98e222":"code","67f5a885":"code","63c3dd9a":"code","c204ad28":"code","90349252":"code","b5d4ee98":"code","7ca7ab47":"code","39664151":"code","21b0a9ad":"code","0c5f17e9":"code","d1be65e0":"code","03a8f676":"code","8c4f6401":"code","5083006b":"code","72d02a79":"code","d05ae110":"code","80818676":"code","56be57a7":"code","ed3037b6":"code","794f162e":"code","05721fae":"code","619d6b12":"code","8cc0f16f":"code","d7ab6dbd":"code","4bb629e1":"code","4cc83dad":"code","a58a9299":"code","274f09ed":"code","24f15175":"code","ecc1b1e4":"code","f8d32a98":"code","3e4a43ab":"code","1800ec2c":"code","a0c94207":"code","7c91cbf7":"code","70d74efa":"code","8c12404f":"code","2a397f80":"code","ced4fc72":"code","99256303":"code","7a897336":"code","de9c6081":"code","58b219d8":"code","4c591004":"code","b1c82799":"code","9ab697aa":"code","7d7fb5c3":"code","da0ecf29":"code","d69dc828":"code","dcf3e14c":"code","15c84efe":"code","1175cc1c":"code","14e150dd":"code","fcc8a7de":"code","f0df7093":"code","46140fd7":"code","ac88d1a0":"markdown","b3f9ae9f":"markdown","8ae036e5":"markdown","50cb1cc9":"markdown","6cfdb26d":"markdown","78e4641a":"markdown","4295cd60":"markdown","02dbbf1d":"markdown","7c2cb573":"markdown","7a468b7a":"markdown","fac70975":"markdown","9a11e21b":"markdown","b570c3fb":"markdown","ac266d7a":"markdown","5d0e151a":"markdown","50cd6241":"markdown","612be492":"markdown","dba757b2":"markdown","136111e9":"markdown","3bf78e48":"markdown","464c3298":"markdown","daa0c6e3":"markdown","7dc1849f":"markdown","e8cfb44a":"markdown","ff6e26a3":"markdown","151e9cfc":"markdown","1edce845":"markdown","f56a2b5d":"markdown","9339918e":"markdown","071a689d":"markdown","89a1e2b1":"markdown","b33aa697":"markdown","4231047a":"markdown","c2d9fa62":"markdown","ea213891":"markdown","16c39efa":"markdown","a7239965":"markdown","c1aa0d7e":"markdown","5a609220":"markdown","d82c921a":"markdown","0a7e03fa":"markdown","aa6d25fd":"markdown","20544f90":"markdown","d1733217":"markdown","82e4c752":"markdown","2269d451":"markdown","54766d98":"markdown","cd7be699":"markdown","3daee4e1":"markdown","5eb9a733":"markdown","50e7cb01":"markdown","ecfc775a":"markdown","bbe8e575":"markdown","873778fa":"markdown","26871c96":"markdown","ac7f004d":"markdown","ee19a3b8":"markdown","4ffdbe44":"markdown","e089c897":"markdown","1dc35b18":"markdown","d21d01f8":"markdown","c04cdd0f":"markdown","23558c52":"markdown","9e797517":"markdown","5081db86":"markdown","098244d3":"markdown","ad373740":"markdown","9e18bd39":"markdown","8e9e54eb":"markdown","a05f1c51":"markdown","e77e2a93":"markdown","15d33de6":"markdown","2aa23725":"markdown","cf911ba4":"markdown","a8637944":"markdown","9606980b":"markdown","2dfeb618":"markdown","7904a592":"markdown","663a5eaa":"markdown","12c976fc":"markdown"},"source":{"ee19d396":"import pandas as pd  # Load data\nimport numpy as np # Scientific Computing\nimport matplotlib.pyplot as plt  # Data Visualization\nimport seaborn as sns  # Data Visualization\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import roc_curve,auc\nfrom sklearn.metrics import confusion_matrix, classification_report\nimport missingno as msno  # showing null values by bar graph\nimport warnings  # Ignore Warnings\nwarnings.filterwarnings(\"ignore\")\nsns.set()   # Set Graphs Background","d33e0de3":"data = pd.read_csv('..\/input\/heartdata1\/heart.csv')\ndata.head()","2d773996":"# shape showing how many data rows & columns have\ndata.shape","a5c9bdb0":"# info() showing rows & columns number column name data type Non-null count\ndata.info()","ad99ccfb":"# isnull() check null value\ndata.isnull()","a9a70f9e":"# any() check null values by columns\ndata.isnull().any()","3ed61550":"# innull().sum() show total null values \ndata.isnull().sum()","9340b955":"# missingno() showing null values by bar graph\nmsno.bar(data, figsize=(12,6))\nplt.show()","448029f4":"# heatmap() showing null values\nsns.heatmap(data.isnull(), yticklabels=False,cbar=False, cmap='viridis')\nplt.show()","115d920f":"# describe() statistical information\ndata.describe()","cc62756e":"# hist() histogram \ndata.hist(figsize = (15,12))\nplt.show()","f21feb3e":"# value_counts() total unique value count\nprint(data.sex.value_counts())\nsns.countplot(x='sex', data=data)\nplt.show()","7b98e222":"# value_counts() total unique value count\nprint(data.ca.value_counts())\nsns.countplot(x='ca', data=data)\nplt.show()","67f5a885":"# value_counts() total unique value count\nprint(data.fbs.value_counts())\nsns.countplot(x='fbs', data=data)\nplt.show()","63c3dd9a":"# value_counts() total unique value count\nprint(data.cp.value_counts())\nsns.countplot(x='cp', data=data)\nplt.show()","c204ad28":"# value_counts() total unique value count\nprint(data.exang.value_counts())\nsns.countplot(x='exang', data=data)\nplt.show()","90349252":"# value_counts() total unique value count\nprint(data.restecg.value_counts())\nsns.countplot(x='restecg', data=data)\nplt.show()","b5d4ee98":"# value_counts() total unique value count\nprint(data.slope.value_counts())\nsns.countplot(x='slope', data=data)\nplt.show()","7ca7ab47":"# value_counts() total unique value count\nprint(data.thal.value_counts())\nsns.countplot(x='thal', data=data)\nplt.show()","39664151":"# value_counts() total unique value count\nprint(data.target.value_counts())\nsns.countplot(x='target', data=data)\nplt.show()","21b0a9ad":"# scatter() relation between two columns\nplt.figure(figsize=(10,8))\nplt.scatter(data['age'],data['chol'])\nplt.title('Age VS Chol', fontsize=20)\nplt.xlabel('Age', fontsize=20)\nplt.ylabel('Chol', fontsize=20)\nplt.show()","0c5f17e9":"# scatter() relation between two columns\nplt.figure(figsize=(10,8))\nplt.scatter(data['age'],data['trestbps'])\nplt.title('Age VS Trestbps', fontsize=20)\nplt.xlabel('Age', fontsize=20)\nplt.ylabel('Trestbps', fontsize=20)\nplt.show()","d1be65e0":"# scatter() relation between two columns\nplt.figure(figsize=(10,8))\nplt.scatter(data['age'],data['thalach'])\nplt.title('Age VS Thalach', fontsize=20)\nplt.xlabel('Age', fontsize=20)\nplt.ylabel('Thalach', fontsize=20)\nplt.show()","03a8f676":"# scatter() relation between two columns\nplt.figure(figsize=(10,8))\nplt.scatter(data['trestbps'],data['chol'])\nplt.title('Trestbps VS Chol', fontsize=20)\nplt.xlabel('Trestbps', fontsize=20)\nplt.ylabel('Chol', fontsize=20)\nplt.show()","8c4f6401":"# scatter() relation between two columns\nplt.figure(figsize=(10,8))\nplt.scatter(data['trestbps'],data['thalach'])\nplt.title('Trestbps VS Thalach', fontsize=20)\nplt.xlabel('Trestbps', fontsize=20)\nplt.ylabel('Thalach', fontsize=20)\nplt.show()","5083006b":"# scatter() relation between two columns\nplt.figure(figsize=(10,8))\nplt.scatter(data['chol'],data['thalach'])\nplt.title('Chol VS Thalach', fontsize=20)\nplt.xlabel('Chol', fontsize=20)\nplt.ylabel('Thalach', fontsize=20)\nplt.show()","72d02a79":"# boxplot() showing outlier\nbox = data[['age','trestbps','chol','thalach']]\nplt.figure(figsize=(12,8))\nsns.boxplot(data=box)\nplt.show()","d05ae110":"data_iqr = box\nQ1 = data_iqr.quantile(0.25)\nQ3 = data_iqr.quantile(0.75)\niqr = Q3 - Q1\n\ndata_iqr_clean = data_iqr[~((data_iqr < (Q1 - 1.5*iqr)) | (data_iqr > (Q3 + 1.5*iqr))).any(axis=1)]","80818676":"# boxplot() showing outlier\nbox = data_iqr_clean[['age','trestbps','chol','thalach']]\nplt.figure(figsize=(12,8))\nsns.boxplot(data=box)\nplt.show()","56be57a7":"# distplot() same as histogram\nfig, ax = plt.subplots(2,2, figsize=(10,8))\nsns.distplot(data_iqr_clean.age, bins = 20, ax=ax[0,0]) \nsns.distplot(data_iqr_clean.trestbps, bins = 20, ax=ax[0,1]) \nsns.distplot(data_iqr_clean.chol, bins = 20, ax=ax[1,0])\nsns.distplot(data_iqr_clean.thalach, bins = 20, ax=ax[1,1])\nplt.show()","ed3037b6":"# corr() relation with data\ncorr=data.corr()\n\nplt.figure(figsize=(14,8))\n\nsns.heatmap(corr, vmax=.8, linewidths=0.01,annot=True,cmap='summer',linecolor=\"black\")\nplt.title('Correlation between features')\nplt.show()","794f162e":"x = data.iloc[:,0:-1].values # All rows & columns present except Target column\ny = data.iloc[:,-1].values # Only target column present","05721fae":"x_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.2, random_state=4)","619d6b12":"print(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","8cc0f16f":"svm = SVC(kernel='rbf',random_state=0)\nsvm.fit(x_train,y_train)","d7ab6dbd":"svm.score(x_test,y_test)","4bb629e1":"sc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","4cc83dad":"svm = SVC(kernel='rbf',random_state=0,probability=True) #probability for predict_proba\nsvm.fit(x_train,y_train)","a58a9299":"svm.score(x_test,y_test)","274f09ed":"param_grid = {'C':[1,10,100,200],\n              'kernel':['rbf','poly','linear','sigmoid'],\n              'degree':[1,2,4,6],\n              'gamma':[0.01,0.1,0.5,1]}\n\ngrid=GridSearchCV(SVC(), param_grid=param_grid, cv=4)\ngrid.fit(x_train,y_train)\n\ny_pred = grid.predict(x_test)\n\nprint(\"Accuracy: {}\".format(grid.score(x_test, y_test)))\nprint(\"Tuned Model Parameters: {}\".format(grid.best_params_))","24f15175":"svm = SVC(C=1,kernel='poly',degree=1,gamma=0.5,probability=True)\nsvm.fit(x_train,y_train)","ecc1b1e4":"svm.score(x_test,y_test)","f8d32a98":"y_pred = svm.predict(x_test)\ncm = confusion_matrix(y_pred,y_test)\nprint('Confusion Matrix \\n',cm)","3e4a43ab":"plt.figure(figsize=(6,4))\nsns.heatmap(cm,annot=True,fmt=\"d\") \nplt.show()","1800ec2c":"cr = classification_report(y_pred,y_test)\nprint('Classification Report\\n',cr)","a0c94207":"y_prob = svm.predict_proba(x_test)[:,1]\nfpr, tpr, threshold = roc_curve(y_test,y_prob)\nAuc = auc(fpr, tpr)\nplt.figure(figsize=(8,6))\nplt.plot(fpr, tpr,linestyle='-',label='(auc=%0.3f)' %Auc)\nplt.plot([0,1],[0,1])\nplt.title('ROC CURVE')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","7c91cbf7":"num = np.arange(1, 30)\ntrain_accuracy = []\ntest_accuracy = []\nfor i, k in enumerate(num):\n    svm = SVC(C=k)\n    svm.fit(x_train,y_train)\n    train_accuracy.append(svm.score(x_train, y_train))\n    test_accuracy.append(svm.score(x_test, y_test))\n\n# Plot\nplt.figure(figsize=(10,6))\nplt.plot(num, test_accuracy, label = 'Testing Accuracy')\nplt.plot(num, train_accuracy, label = 'Training Accuracy')\nplt.legend(loc=10)\nplt.title('value VS Accuracy')\nplt.xlabel('Number of C')\nplt.ylabel('Accuracy')\nplt.xticks(num)\nplt.show()\nprint(\"Best accuracy is {} with C = {}\".format(np.max(test_accuracy),\n                                               1+test_accuracy.index(np.max(test_accuracy))))","70d74efa":"data1 = data.copy() # copy data\ndata1.head()","8c12404f":"data1_thal = pd.get_dummies(data['thal'],prefix='thal')\ndata1_thal.head()","2a397f80":"data1_slope = pd.get_dummies(data['slope'],prefix='slope')\ndata1_slope.head()","ced4fc72":"data1_restecg = pd.get_dummies(data['restecg'],prefix='restecg')\ndata1_restecg.head()","99256303":"data1_cp = pd.get_dummies(data['cp'],prefix='cp')\ndata1_cp.head()","7a897336":"data1_ca = pd.get_dummies(data['ca'],prefix='ca')\ndata1_ca.head()","de9c6081":"data2 = pd.concat([data1_cp,data1_restecg,data1_slope,data1_ca,data1_thal],axis='columns')","58b219d8":"data2.head()","4c591004":"data3 = pd.concat([data1,data2],axis='columns')\ndata3.head()","b1c82799":"data3 = data3.drop(['cp','restecg','slope','thal','ca','target'], axis=1)\ndata3.head()","9ab697aa":"data3 = pd.concat([data3,data.target],axis=1)\ndata3.head()","7d7fb5c3":"x = data3.iloc[:,:-1].values # All rows & columns present except Target column\ny = data3.iloc[:,-1].values # Only target column present","da0ecf29":"xx_train,xx_test,yy_train,yy_test = train_test_split(x,y, test_size=0.2, random_state=4)","d69dc828":"svm = SVC(C=1,kernel='poly',degree=1,gamma=0.5,probability=True)\nsvm.fit(xx_train,yy_train)","dcf3e14c":"param_grid = {'ccp_alpha':[0.0,0.1,0.2,0.3,0.4,1],\n              'criterion':['gini','entropy'],\n              'max_depth':[5,10,50,100,200],\n              'max_leaf_nodes':[5,10,50,100,200],\n              'random_state':[2,5,10,20,42]}\n\ngrid=GridSearchCV(DecisionTreeClassifier(), param_grid=param_grid, cv=4)\ngrid.fit(xx_train,yy_train)\n\nprint(\"Tuned Model Parameters: {}\".format(grid.best_params_))","15c84efe":"dtc = DecisionTreeClassifier(criterion='gini',max_depth=10,max_leaf_nodes=10,\n                            ccp_alpha=0.0,random_state=2)\ndtc.fit(xx_train,yy_train)","1175cc1c":"param_grid = {'C':[1.0,2.0,5.0,10.0,20.0],\n              'penalty':['l1','l2','none','elasticnet'],\n              'max_iter':[50,100,200,300,500],\n              'multi_class':['auto','ovr','multinomial']}\n\ngrid=GridSearchCV(LogisticRegression(), param_grid=param_grid, cv=4)\ngrid.fit(xx_train,yy_train)\n\nprint(\"Tuned Model Parameters: {}\".format(grid.best_params_))","14e150dd":"lg = LogisticRegression(C=5.0,max_iter=50,multi_class='multinomial',penalty='l2')\nlg.fit(xx_train,yy_train)","fcc8a7de":"param_grid = {'n_estimators':[50, 100,150,200,300],\n              'criterion':['gini','entropy'],\n              'max_depth':[5,10,50,100,200]}\n\ngrid=GridSearchCV(RandomForestClassifier(), param_grid=param_grid, cv=4)\ngrid.fit(xx_train,yy_train)\n\nprint(\"Tuned Model Parameters: {}\".format(grid.best_params_))","f0df7093":"rfc = RandomForestClassifier(criterion='gini',max_depth=5,n_estimators=50)\nrfc.fit(xx_train,yy_train)","46140fd7":"print(\"Support Vector Machine Accuracy: {}\".format(svm.score(xx_test, yy_test)))\nprint(\"DecisionTreeClassifier Accuracy: {}\".format(dtc.score(xx_test, yy_test)))\nprint(\"LogisticRegression Accuracy: {}\".format(lg.score(xx_test, yy_test)))\nprint(\"RandomForestClassifier Accuracy: {}\".format(rfc.score(xx_test, yy_test)))","ac88d1a0":"## Confusion Matrix","b3f9ae9f":"## concat target column with data3","8ae036e5":"## Ca column get dummies","50cb1cc9":"## Data3 separate into input columns & output column","6cfdb26d":"- There are some value outlier","78e4641a":"## Get Dummies Use","4295cd60":"## Heatmap","02dbbf1d":"## Trestbps VS Chol Scatter Plot","7c2cb573":"## Statistical Information","7a468b7a":"- There are 207 male\n- There are 96 female","fac70975":"- Yes 165\n- No 138","9a11e21b":"## separate data split 80:20","b570c3fb":"## Confusion Matrix Heatmap","ac266d7a":"- Support Vector Machine Accuracy: 91.80%\n- DecisionTreeClassifier Accuracy: 80.32%\n- LogisticRegression Accuracy: 88.52%\n- RandomForestClassifier Accuracy: 93.44%\n\n- So we can decide that LogisticRegression is the best model for this dataset & its accuracy 93.44%","5d0e151a":"## Chol VS Thalach Scatter Plot","50cd6241":"## Fbs Unique Value Counts & Plot","612be492":"# $$Introduction$$\n\n### Heart Disease data analysis & Machine Learning model implementation\n\n## Objective\nI develop a Machine Learning Model which is predict a person is affected or not by **\"HEART DISEASES\"** based on previous heart disease data.\n\n###  Data Information\n- Number of rows 303\n- Number of columns 14\n\n - Age(int)\n    - The maximum Value is 77 \n    - The minimum Value is 29 \n    - The number of unique Values is 41 \n    \n  - Sex(int)\n    - The maximum Value is 1 \n    - The minimum Value is 0 \n    - The number of unique Values is 2 \n    - The nunique Values is [0 1]\n       - Female\n       - male\n    \n  - Cp(int) = chest pain type\n     - The maximum Value is 3 \n     - The minimum Value is 0 \n     - The number of unique Values is 4 \n     - The nunique Values is [0 1 2 3]\n        - typical angina\n        - atypical angina\n        - non-anginal pain\n        - asymptomatic\n     \n  - trestbps(int) = resting blood pressure (in mm Hg on admission to the hospital)\n    - The maximum Value is 200 \n    - The minimum Value is 94 \n    - The number of unique Values is 49 \n    \n  - Chol(int) = serum cholestoral in mg\/dl\n    - The maximum Value is 564 \n    - The minimum Value is 126 \n    - The number of unique Values is 152 \n    \n  - Fbs(int) = fasting blood sugar > 120 mg\/dl\n    - The maximum Value is 1 \n    - The minimum Value is 0 \n    - The number of unique Values is 2 \n    - The nunique Values is [0 1]\n      - False\n      - True\n    \n  - Restecg(int) = restecg: resting electrocardiographic results\n     - The maximum Value is 2 \n     - The minimum Value is 0 \n     - The number of unique Values is 3 \n     - The nunique Values is [0 1 2]\n       - normal \n       - having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of >0.05  mV      \n       - showing probable or definite left ventricular hypertrophy by Estes' criteria]\n    \n  - thalach(int) = maximum heart rate achieved\n    - The maximum Value is 202 \n    - The minimum Value is 71 \n    - The number of unique Values is 91\n    \n  - exang(int) = exercise induced angina\n    - The maximum Value is 1 \n    - The minimum Value is 0 \n    - The number of unique Values is 2 \n    - The nunique Values is [0 1] \n       - No\n       - Yes\n    \n  - oldpeak(float) = ST depression induced by exercise relative to rest\n    - The maximum Value is 6.2 \n    - The minimum Value is 0.0 \n    - The number of unique Values is 40\n    \n  - slope(int) = the slope of the peak exercise ST segment\n    - The maximum Value is 2 \n    - The minimum Value is 0 \n    - The number of unique Values is 3 \n    - The nunique Values is [0 1 2]\n       - upsloping\n       - flat\n       - downsloping\n     \n  - Ca(int) = number of major vessels (0-3) colored by flourosopy\n    - The maximum Value is 4 \n    - The minimum Value is 0 \n    - The number of unique Values is 5 \n    - The nunique Values is [0 2 1 3 4] \n    \n  - Thal(int)\n    - The maximum Value is 3 \n    - The minimum Value is 0 \n    - The number of unique Values is 4 \n    - The nunique Values is [0 1 2 3]\n       - normal\n       - fixed\n       - defect\n       - reversable\n    \n  - Target(int)\n    - The maximum Value is 1 \n    - The minimum Value is 0 \n    - The number of unique Values is 2 \n    - The nunique Values is [0 1]\n       - Not disease\n       - disease","dba757b2":"- There are some value outlier","136111e9":"- After StandardScaler the score is 86.88%","3bf78e48":"## Original & dummies data concat","464c3298":"## Cp column get dummies","daa0c6e3":"## Target Unique Value Counts & Plot","7dc1849f":"- typical angina 143\n- atypical angina 50\n- non-anginal pain 87\n- asymptomatic 23","e8cfb44a":"## Slope Unique Value Counts & Plot","ff6e26a3":"- normal 2\n- fixed 18\n- defect 166\n- reversable 117","151e9cfc":"## Drop main dummies columns with target column","1edce845":"## After split data shape","f56a2b5d":"## DecisionTreeClassifier","9339918e":"## Hyperparameter Tuning","071a689d":"## Distibution Plot","89a1e2b1":"- All columns return False\n- The dataset no null value present","b33aa697":"- After Hyperparameter Tuning use accuracy is 90.16%","4231047a":"## Machine Learning Model Implementation","c2d9fa62":"## Histogram ","ea213891":"- There are some value outlier","16c39efa":"## Trestbps VS Thalach Scatter Plot","a7239965":"### Outlier Remove","c1aa0d7e":"## Classification Report","5a609220":"## Slope column get dummies","d82c921a":"- False Positive 21\n- False Negative 2\n- True Negative 4\n- True Positive 34","0a7e03fa":"## Apply SVC","aa6d25fd":"- Total rows have 303 & every bar is full\n- There have no null values present","20544f90":"## $$Exploratory$$ $$Data$$ $$Analysis$$","d1733217":"## Restecg column get dummies","82e4c752":"## Thal Unique Value Counts & Plot","2269d451":"- Values should be closer each other.\n- There is no incompatible values","54766d98":"- There are some value outlier","cd7be699":"## Age VS Thalach Scatter Plot","3daee4e1":"- Graph is full clean\n- There have no null values","5eb9a733":"## Use StandardScaler\n- StandardScaler() use for value transform\n- fit_transform() use for train data transform\n- transform() use for test data transform","50e7cb01":"## Cp Unique Value Counts & Plot","ecfc775a":"- upsloping 21\n- flat 140\n- downsloping 142","bbe8e575":"## Restecg Unique Value Counts & Plot","873778fa":"- Now data has no outlier","26871c96":"## Ca Unique Value Counts & Plot","ac7f004d":"- There are some value outlier","ee19a3b8":"## Model complexity","4ffdbe44":"## Mising Value Checking\n- I use five function for mising value checking\n   - insull()\n      - If any value is null return True\n      - Otherewise return False\n      \n   - isnull().any()\n      - If any columns have null value return True\n      - Otherewise return False\n      \n   - isnull().sum()\n      - If any columns have null value return how many null values have\n      - If no null value present return 0\n      \n   - missingno()\n      - Showing values by bar graph\n      \n   - Heatmap()\n      - Showing values by graph","e089c897":"- normal 147\n- having ST-T wave abnormality 152\n- left ventricular hypertrophy by Estes' criteria 4","1dc35b18":"## RandomForestClassifier","d21d01f8":"## Sex Unique Value Counts & Plot","c04cdd0f":"## Age VS Trestbps Scatter Plot","23558c52":"## Box Plot","9e797517":"- All columns return 0\n- The dataset no null value present","5081db86":"## Support vector machine object create\n- fit() tarin the model","098244d3":"## Data Information\n- There are 303 rows\n- There are 14 columns\n- No Null Values Present\n- Only oldpeak is float data type otherwise all is int data type","ad373740":"- Exang No 204\n- Exang Yes 99","9e18bd39":"## Thal column get dummies","8e9e54eb":"## Data Load","a05f1c51":"## Data Split\n- train_test_split() use for data divided\n- test size use for ratio split\n- random_state is random seed","e77e2a93":"## Necessery Liberary Import","15d33de6":"- There are 258 False values\n- There are 45 True values","2aa23725":"## Get dummies data concat ","cf911ba4":"- Now data has outlier\n- Trestbps , Chol ,Thalach Some outlier present","a8637944":"## LogisticRegression","9606980b":"## Exang Unique Value Counts & Plot","2dfeb618":"## ROC Curve with Support Vector Machine","7904a592":"## Age VS Chol Scatter Plot","663a5eaa":"- There are some value outlier","12c976fc":"- svm score 67.21%"}}