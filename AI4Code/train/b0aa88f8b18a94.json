{"cell_type":{"ad2e6e44":"code","07e1ab8d":"code","946e239d":"code","e5918d2d":"code","a97a1d86":"code","ee2913c6":"code","7e02de46":"code","df92db34":"code","797ac319":"code","366d4ab8":"code","d0f8eb48":"code","444b3ece":"code","1b066096":"code","93067e5d":"code","1d3147c0":"code","8a9a7922":"code","bc03fa1b":"code","836629b1":"code","ca099e65":"markdown","015decda":"markdown","9a9a8c11":"markdown"},"source":{"ad2e6e44":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07e1ab8d":"data = pd.read_csv(f'{dirname}\/{filename}')\ndata.head()","946e239d":"data.shape","e5918d2d":"data.drop(['pid','country_code','scraped_date'],axis = 1,inplace = True)","a97a1d86":"data['price'] = data['price'].str.replace(' ','')\ndata['price'] = data['price'].str.replace(',','')","ee2913c6":"for i in range(len(data)):\n    z = data['price'][i].split('or')\n    data['price'][i] = z[0]","7e02de46":"for i in range(len(data)):\n    data['price'][i] = ''.join(j for j in data['price'][i] if j.isdigit())","df92db34":"data['price'] = pd.to_numeric(data['price'], errors='coerce')","797ac319":"d = {'Australia': 1.39, 'Austria':0.89, 'Brazil':5.68, 'Canada':1.27, 'Czech Republic':21.99,\n       'Germany':0.89, 'Denmark':0.89, 'Spain':0.89, 'Finland':0.89, 'France':0.89, 'Hungary':324.85,\n       'India':74.57, 'Ireland':0.89, 'Italy':0.89, 'Luxembourg':0.89, 'Mexico':20.52, 'Netherlands':0.89,\n       'Norway':8.88, 'Philippines':51.37, 'Poland':4.06, 'Portugal':0.89, 'Russia':74.74, 'Sweden':0.89,\n       'Thailand':33.33, 'Turkey':13.26, 'United States':1}","366d4ab8":"data.describe()","d0f8eb48":"data.info()","444b3ece":"data.isnull().sum()","1b066096":"(data.isnull().sum()\/len(data)) * 100","93067e5d":"data.dropna(inplace = True)","1d3147c0":"data['dollar rate'] = data['country'].map(d)","8a9a7922":"data['price'] = data['price']\/data['dollar rate']","bc03fa1b":"data.drop(['dollar rate'], axis = 1, inplace = True)","836629b1":"from scipy import stats\ndef Shapiro(g):\n    t,p = stats.shapiro(g)\n    if p > 0.05:\n        return True\n    else:\n        return False\n\ndef Variance(g1,g2):\n    t,p = stats.levene(g1,g2)\n    if p > 0.05:\n        return True\n    else:\n        return False\nl = list(data['region'].unique())\nfor i in range(len(l)):\n    for j in range(i,len(l)):\n        if i != j:\n            print()\n            print('Price Relation between ',l[i],' and ',l[j])\n            print()\n            g1 = data[data['region'] == l[i]]['price']\n            g2 = data[data['region'] == l[j]]['price']\n            N1 = Shapiro(g1)\n            N2 = Shapiro(g2)\n            V = Variance(g1,g2)\n            if((N1 and N2) or V):\n                t,p = stats.ttest_ind(g1,g2)\n                if p > 0.05:\n                    print('The price between ',l[i],' and ',l[j],' regions is exactly same')\n                else:\n                    print('The price between ',l[i],' and ',l[j],' regions is completely different')\n            else:\n                t,p = stats.mannwhitneyu(g1,g2,alternative = 'two-sided')\n                if p > 0.05:\n                    print('The price between ',l[i],' and ',l[j],' regions is exactly same')\n                else:\n                    print('The price between ',l[i],' and ',l[j],' regions is completely different')\n            print()   \n            print('-----x-----x-----x-----x-----x-----x-----x-----x-----x-----')","ca099e65":"There is less than 3% of data having null values. So I drop those rows.","015decda":"Here there is no use of pid, country code and scrapped date. So I drop those columns.","9a9a8c11":"Cleaning the price data for better understanding."}}