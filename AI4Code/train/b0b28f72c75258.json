{"cell_type":{"9a770c4f":"code","86a362ce":"code","6faf3ef7":"code","e7b6c0d3":"code","5123a600":"code","983d5797":"code","6a4fec02":"code","52595b02":"code","2fae35b7":"code","ec028c17":"code","81544511":"code","5b43ecec":"code","780dfc20":"code","d4fea8f0":"markdown","3199edff":"markdown","323720c2":"markdown","42a56865":"markdown","95539f32":"markdown","87f7e3bc":"markdown","12eb53b0":"markdown","96dea47d":"markdown","1625a408":"markdown"},"source":{"9a770c4f":"import numpy as np\nimport pandas as pd\nfrom glob import glob\nimport matplotlib.pyplot as plt","86a362ce":"zones = pd.read_csv('..\/input\/newyork-yellow-taxi-trip-data-2020-2019\/taxi+_zone_lookup.csv')\nfromID = 236 \ntoID = 237 \nzones.query(f'LocationID == {fromID} | LocationID == {toID}')","6faf3ef7":"total_trips_by_hour = pd.DataFrame({'date': [], 'hour': []})\nfor f in glob('..\/input\/newyork-yellow-taxi-trip-data-2020-2019\/yellow_tripdata_2019*.csv'):\n    print(f)\n    trips = pd.read_csv(f, parse_dates=['tpep_pickup_datetime'])\n    filters_trips = trips.query(f'PULocationID == {fromID} & DOLocationID == {toID}')\n    total_trips_by_hour = total_trips_by_hour.append(pd.DataFrame( {'date': filters_trips.tpep_pickup_datetime.dt.date, 'hour':filters_trips.tpep_pickup_datetime.dt.hour}))\n\ntotal_trips_by_hour['x'] = 1","e7b6c0d3":"X = total_trips_by_hour.groupby(['date','hour']).count().reset_index()[['hour','x']]","5123a600":"values = []\nfor h in range(23):\n    values.append(X.query(f'hour == {h}').x.values)\n\nfig, ax = plt.subplots(figsize=(20, 6))\nax.set_title(f'Trips distribution by hour (from {fromID} to {toID})')\nax.violinplot(values)\nplt.show()","983d5797":"from sklearn.ensemble import IsolationForest\n\noutlier_algorithm = IsolationForest(contamination = 0.002, random_state = np.random.RandomState(42)).fit(X.values)","6a4fec02":"assert outlier_algorithm.predict([[10,100000]]) == [-1]","52595b02":"from scipy import stats\n\nmode = stats.mode(X)\nassert outlier_algorithm.predict(mode.mode) == [1]","2fae35b7":"f = '..\/input\/newyork-yellow-taxi-trip-data-2020-2019\/yellow_tripdata_2020-01.csv'\n\ntrips = pd.read_csv(f, parse_dates=['tpep_pickup_datetime'])\nfilters_trips = trips.query(f'PULocationID == {fromID} & DOLocationID == {toID}')\ntotal_trips_by_hour = total_trips_by_hour.append(pd.DataFrame( {'date': filters_trips.tpep_pickup_datetime.dt.date, 'hour':filters_trips.tpep_pickup_datetime.dt.hour}))","ec028c17":"Y = total_trips_by_hour.groupby(['date','hour']).count().reset_index()\nY['predict'] = outlier_algorithm.predict(Y[['hour','x']].values)","81544511":"outliers = Y.query('predict == -1')","5b43ecec":"fig, ax = plt.subplots(figsize=(20, 6))\nax.set_title(f'Trips distribution by hour (from {fromID} to {toID}) with outliers (red)')\nax.violinplot(values)\nax.scatter(x=outliers.hour,y=outliers.x, color='r')\nplt.show()","780dfc20":"outliers","d4fea8f0":"### Historical Data\n\nBaseline: all 2019 trips between these two zones as pick up location and drop off location.","3199edff":"features: hour and trips","323720c2":"### Result","42a56865":"### Zones\n\nI've selected two popular zone from Manhattan as PULocationID and DOLocationID:\n\n![ddd](https:\/\/www1.nyc.gov\/assets\/tlc\/images\/content\/pages\/about\/taxi_zone_map_manhattan.jpg)","95539f32":"# Data Engineer test\n\n### What should I do?\n\nUsing NYC \u201cYellow Taxi\u201d Trips Data 2019 together with data about the different zones, calculate the hour of the day where trips between any two given zones are outliers. \n\nThe result should be the hours and the zones (by name)","87f7e3bc":"### Test\n100.000 trips at 10 AM **must be** an outlier. ```predict``` returns -1 for outliers and 1 for inliers. ","12eb53b0":"### Outliers\n\nI'm going to use ```IsolationForest``` as algorithm to predict outliers. The quetions is *why?*. \n\nWell, the outlier meaning can be different for different customers because they needs or they objectives. On the other hand, the exercice description no has more information about the outlier meaning.\n\nThere are a few reason to use this algorithm:\n* simple to use\n* low memory consumption\n* fast\n\nAny way, you can see this elemen as a replaceable element in order to find a correct algorithm for the customer.","96dea47d":"... but the mode of training set *must not be* an outlier","1625a408":"Now, I'm goign to select all data from 2020-01 data set in order to test outliers in this set."}}