{"cell_type":{"a3e596c7":"code","bb1657ae":"code","650ae903":"code","686e2c4c":"code","6d27cc39":"code","da6bd21e":"code","db2344d4":"code","3d701c5e":"code","69f5c9ed":"code","2b142043":"code","6edb3d70":"code","c281b730":"code","0ac10afa":"code","40b8e6a5":"code","cdbd518c":"code","bfab7a7d":"code","1cc42a0e":"code","5cc45eb8":"code","21347ae2":"markdown","17308ce9":"markdown","2975eb58":"markdown","5e2f1786":"markdown","d030412a":"markdown","13687c33":"markdown"},"source":{"a3e596c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bb1657ae":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","650ae903":"#Training dataset\ndf_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","686e2c4c":"## look at the columns \n\ndf_train.columns","6d27cc39":"# Overview of the dataset\ndf_train.describe().transpose()\n#df_train.isna().sum()","da6bd21e":"# to display maximum rows\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","db2344d4":"# Checking the missing values\nprint(df_train.isna().sum().transpose())","3d701c5e":"# dropping columns where missing values are more than 20%\n\nlist_drop = ['LotFrontage', 'Alley', 'PoolQC','Fence','MiscFeature', 'FireplaceQu']\n\ndf_train = df_train.drop(list_drop, axis = 1)","69f5c9ed":"imputation_col = ['GarageType','GarageYrBlt','GarageFinish','GarageQual', 'BsmtQual',\n                  'BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2']","2b142043":"# imputation with mode\nfor col in imputation_col:\n    df_train[col] = df_train[col].fillna((df_train[col].mode()), inplace=True)","6edb3d70":"## Checking for the corr plot of the variables\n\n#correlation matrix\ncorrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True)","c281b730":"# Ploting Scatter plot with some imp columns\n\n#scatterplot\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(df_train[cols], size = 2.5)\nplt.show();","0ac10afa":"sns.distplot(df_train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(df_train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n","40b8e6a5":"#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)\nplt.show()","cdbd518c":"# log transformation of the distribution\ndf_train[\"SalePrice1\"] = np.log1p(df_train[\"SalePrice\"])\n\n#Check the new distribution \nsns.distplot(df_train['SalePrice1'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(df_train['SalePrice1'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice1'], plot=plt)\nplt.show()","bfab7a7d":"#bivariate analysis saleprice\/grlivarea\nvar = 'GrLivArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000))\n\n\n","1cc42a0e":"#box plot overallqual\/saleprice\nvar = 'OverallQual'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","5cc45eb8":"\n# Adding total sqfootage feature \ndf_train['TotalSF'] = df_train['TotalBsmtSF'] + df_train['1stFlrSF'] + df_train['2ndFlrSF']","21347ae2":"WE have total of 1460 rows for each column","17308ce9":"### There are many independent variables and salesPrice is the dependent variable","2975eb58":"### List of the transformation and EDA done\n1. Dropped columns with more than 20% missing values\n2. imputation with mode\n3. Corr plot of the values\n4. Distribution of dependent variable\n5. QQ plot of the depenent variable.\n6. Transformation of dependent variable\n7. Pairplot of the independent variables.\n8. Scatter plot of dependent and independent variable\n9. Box plot of dependent and independent variable\n10. Creating new feature\n","5e2f1786":"## Lets look at dependent varible distribution\n","d030412a":"### Log transformation of the Dependent variable ","13687c33":"### Data Transformation "}}