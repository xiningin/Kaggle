{"cell_type":{"6b9458b1":"code","9e43bcc4":"code","683fbd70":"code","dddd5cae":"code","dd30dfd4":"code","2328b2c8":"code","619130cd":"code","a8be3c9f":"code","582a5437":"code","dbc3465e":"code","8f4dd049":"code","f71b71d7":"code","b26f7208":"code","1f468ffb":"code","350c8b44":"code","98212222":"code","d512dba4":"code","2dee4bb6":"code","fbcc8c2b":"code","7c171460":"code","51368b7d":"code","5231bd56":"code","c452a7ba":"code","3caf5605":"code","2792a76c":"code","b0889926":"code","086be233":"code","ba67535e":"code","5ad20a7e":"code","899abc61":"code","c089a866":"code","07a85f3b":"code","61e1dd15":"code","f97ee1bd":"code","19ba718c":"code","75bbfa02":"code","7dbbde17":"code","23f1086d":"code","3fd48012":"code","69b4ba70":"code","9186aa45":"code","07e99db4":"code","3a8a282f":"code","ca2b7595":"code","27627f53":"code","03690371":"markdown","7acb6cec":"markdown","d7dcdeb3":"markdown","12e5988f":"markdown","fe9eecdf":"markdown","5ffed5cd":"markdown","a486d370":"markdown","e955e3b9":"markdown","dca57663":"markdown","659c29b6":"markdown","80c34229":"markdown","772d34e5":"markdown","4e3c7016":"markdown","5c9f82ce":"markdown","fdbb6e86":"markdown","ab07e18d":"markdown","c1e75782":"markdown","e41b85df":"markdown","753717db":"markdown","1d43cff4":"markdown","3f65f444":"markdown","c1de1522":"markdown","60003148":"markdown"},"source":{"6b9458b1":"import os\nimport gc\nimport re\n\nimport cv2\nimport math\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\n\nimport tensorflow as tf\nfrom IPython.display import SVG\nfrom keras.utils import plot_model\nimport tensorflow.keras.layers as L\nfrom keras.utils import model_to_dot\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras.models import Model\nfrom kaggle_datasets import KaggleDatasets\nfrom tensorflow.keras.applications import DenseNet201, InceptionV3, ResNet50V2, InceptionResNetV2\n\nimport seaborn as sns\nfrom tqdm import tqdm\nimport matplotlib.cm as cm\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\n\ntqdm.pandas()\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nnp.random.seed(0)\ntf.random.set_seed(0)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","9e43bcc4":"EPOCHS = 20\nSAMPLE_LEN = 100\nIMAGE_PATH = \"..\/input\/plant-pathology-2020-fgvc7\/images\"\nTEST_PATH = \"..\/input\/plant-pathology-2020-fgvc7\/test.csv\"\nTRAIN_PATH = \"..\/input\/plant-pathology-2020-fgvc7\/train.csv\"\nSUB_PATH = \"..\/input\/plant-pathology-2020-fgvc7\/sample_submission.csv\"\n\nsub = pd.read_csv(SUB_PATH)\ntest_data = pd.read_csv(TEST_PATH)\ntrain_data = pd.read_csv(TRAIN_PATH)","683fbd70":"print(train_data.shape)\nprint(test_data.shape)","dddd5cae":"train_data.head()","dd30dfd4":"test_data.head()","2328b2c8":"fig = go.Figure(data=[\n    go.Pie(labels=train_data.columns[1:],\n           values=train_data.iloc[:, 1:].sum().values)\n])\nfig.show()","619130cd":"#Function for showing image\ndef show_images(image_ids):\n    \n    col = 5\n    row = min(len(image_ids) \/\/ col, 5)\n    \n    fig, ax = plt.subplots(row, col, figsize=(16, 8))\n    ax = ax.flatten()\n\n    for i, image_id in enumerate(image_ids):\n        image = cv2.imread(IMAGE_PATH + '\/{}.jpg'.format(image_id))\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n        ax[i].set_axis_off()\n        ax[i].imshow(image)\n        ax[i].set_title(image_id)","a8be3c9f":"show_images(train_data.sample(n=15)['image_id'].values)","582a5437":"show_images(test_data.sample(n=15)['image_id'].values)","dbc3465e":"show_images(train_data[train_data['healthy'] == 1].sample(n=15)['image_id'].values)","8f4dd049":"show_images(train_data[train_data['rust'] == 1].sample(n=15)['image_id'].values)\n","f71b71d7":"show_images(train_data[train_data['scab'] == 1].sample(n=15)['image_id'].values)","b26f7208":"show_images(train_data[train_data['multiple_diseases'] == 1].sample(n=15)['image_id'].values)","1f468ffb":"AUTO = tf.data.experimental.AUTOTUNE\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\nstrategy = tf.distribute.experimental.TPUStrategy(tpu)\n\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\nGCS_DS_PATH = KaggleDatasets().get_gcs_path()","350c8b44":"def format_path(st):\n    return GCS_DS_PATH + '\/images\/' + st + '.jpg'\n\ntest_paths = test_data.image_id.apply(format_path).values\ntrain_paths = train_data.image_id.apply(format_path).values\n\ntrain_labels = np.float32(train_data.loc[:, 'healthy':'scab'].values)\ntrain_paths, valid_paths, train_labels, valid_labels =\\\ntrain_test_split(train_paths, train_labels, test_size=0.15, random_state=42)","98212222":"def decode_image(filename, label=None, image_size=(512, 512)):\n    bits = tf.io.read_file(filename)\n    image = tf.image.decode_jpeg(bits, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.resize(image, image_size)\n    \n    if label is None:\n        return image\n    else:\n        return image, label\n\ndef data_augment(image, label=None): # Data augmentations\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    image = tf.image.random_saturation(image, 0.7, 1.3)\n    image = tf.image.random_contrast(image, 0.8, 1.2)\n    imgae = tf.image.random_brightness(image, 0.1)\n    \n    if label is None:\n        return image\n    else:\n        return image, label","d512dba4":"train_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((train_paths, train_labels))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .map(data_augment, num_parallel_calls=AUTO)\n    .repeat()\n    .shuffle(512)\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n)\n\nvalid_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((valid_paths, valid_labels))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .batch(BATCH_SIZE)\n    .cache()\n    .prefetch(AUTO)\n)\n\ntest_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices(test_paths)\n    .map(decode_image, num_parallel_calls=AUTO)\n    .batch(BATCH_SIZE)\n)","2dee4bb6":"def build_lrfn(lr_start=0.00001, lr_max=0.00005, \n               lr_min=0.00001, lr_rampup_epochs=5, \n               lr_sustain_epochs=0, lr_exp_decay=.8):\n    lr_max = lr_max * strategy.num_replicas_in_sync\n\n    def lrfn(epoch):\n        if epoch < lr_rampup_epochs:\n            lr = (lr_max - lr_start) \/ lr_rampup_epochs * epoch + lr_start\n        elif epoch < lr_rampup_epochs + lr_sustain_epochs:\n            lr = lr_max\n        else:\n            lr = (lr_max - lr_min) *\\\n                 lr_exp_decay**(epoch - lr_rampup_epochs\\\n                                - lr_sustain_epochs) + lr_min\n        return lr\n    return lrfn","fbcc8c2b":"lrfn = build_lrfn()\nSTEPS_PER_EPOCH = train_labels.shape[0] \/\/ BATCH_SIZE\nlr_schedule = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=1)","7c171460":"def display_training_curves(training, validation, yaxis):\n    if yaxis == \"loss\":\n        ylabel = \"Loss\"\n        title = \"Loss vs. Epochs\"\n    else:\n        ylabel = \"Accuracy\"\n        title = \"Accuracy vs. Epochs\"\n        \n    fig = go.Figure()\n        \n    fig.add_trace(\n        go.Scatter(x=np.arange(1, EPOCHS+1), mode='lines+markers', y=training, marker=dict(color=\"dodgerblue\"),\n               name=\"Train\"))\n    \n    fig.add_trace(\n        go.Scatter(x=np.arange(1, EPOCHS+1), mode='lines+markers', y=validation, marker=dict(color=\"darkorange\"),\n               name=\"Val\"))\n    \n    fig.update_layout(title_text=title, yaxis_title=ylabel, xaxis_title=\"Epochs\", template=\"plotly_white\")\n    fig.show()","51368b7d":"#Setting the model to train in TPU\nwith strategy.scope():\n    model = tf.keras.Sequential([DenseNet201(input_shape=(512, 512, 3),\n                                             weights='imagenet',\n                                             include_top=False),\n                                 L.GlobalAveragePooling2D(),\n                                 L.Dense(train_labels.shape[1],\n                                         activation='softmax')])\n        \n    model.compile(optimizer='adam',\n                  loss = 'categorical_crossentropy',\n                  metrics=['categorical_accuracy'])\n    model.summary()","5231bd56":"#Fundamental Block\nSVG(tf.keras.utils.model_to_dot(Model(model.layers[0].input, model.layers[0].layers[13].output), dpi=70).create(prog='dot', format='svg'))","c452a7ba":"#Model Architecture\nSVG(tf.keras.utils.model_to_dot(model, dpi=70).create(prog='dot', format='svg'))","3caf5605":"#Training\nhistory = model.fit(train_dataset,\n                    epochs=EPOCHS,\n                    callbacks=[lr_schedule],\n                    steps_per_epoch=STEPS_PER_EPOCH,\n                    validation_data=valid_dataset)","2792a76c":"#Visualizing train and valid accuracy\ndisplay_training_curves(\n    history.history['categorical_accuracy'], \n    history.history['val_categorical_accuracy'], \n    'accuracy')","b0889926":"#Prediction\nprobs_dnn = model.predict(test_dataset, verbose=1)\nsub.loc[:, 'healthy':] = probs_dnn\nsub.to_csv('submission_dnn.csv', index=False)\nsub.head()\n\n#LB:0.96792","086be233":"with strategy.scope():\n    model = tf.keras.Sequential([InceptionV3(input_shape=(512, 512, 3),\n                                             weights='imagenet',\n                                             include_top=False),\n                                 L.GlobalAveragePooling2D(),\n                                 L.Dense(train_labels.shape[1],\n                                         activation='softmax')])\n        \n    model.compile(optimizer='adam',\n                  loss = 'categorical_crossentropy',\n                  metrics=['categorical_accuracy'])\n    model.summary()","ba67535e":"SVG(tf.keras.utils.model_to_dot(Model(model.layers[0].input, model.layers[0].layers[11].output), dpi=70).create(prog='dot', format='svg'))","5ad20a7e":"SVG(tf.keras.utils.model_to_dot(model, dpi=70).create(prog='dot', format='svg'))","899abc61":"history = model.fit(train_dataset,\n                    epochs=EPOCHS,\n                    callbacks=[lr_schedule],\n                    steps_per_epoch=STEPS_PER_EPOCH,\n                    validation_data=valid_dataset)","c089a866":"display_training_curves(\n    history.history['categorical_accuracy'], \n    history.history['val_categorical_accuracy'], \n    'accuracy')","07a85f3b":"probs_incepv3 = model.predict(test_dataset, verbose=1)\nsub.loc[:, 'healthy':] = probs_incepv3\nsub.to_csv('submission_incepv3.csv', index=False)\nsub.head()\n\n#LB:-0.95988","61e1dd15":"with strategy.scope():\n    model = tf.keras.Sequential([ResNet50V2(input_shape=(512, 512, 3),\n                                             weights='imagenet',\n                                             include_top=False),\n                                 L.GlobalAveragePooling2D(),\n                                 L.Dense(train_labels.shape[1],\n                                         activation='softmax')])\n        \n    model.compile(optimizer='adam',\n                  loss = 'categorical_crossentropy',\n                  metrics=['categorical_accuracy'])\n    model.summary()","f97ee1bd":"SVG(tf.keras.utils.model_to_dot(Model(model.layers[0].input, model.layers[0].layers[11].output), dpi=70).create(prog='dot', format='svg'))","19ba718c":"SVG(tf.keras.utils.model_to_dot(model, dpi=70).create(prog='dot', format='svg'))","75bbfa02":"history = model.fit(train_dataset,\n                    epochs=EPOCHS,\n                    callbacks=[lr_schedule],\n                    steps_per_epoch=STEPS_PER_EPOCH,\n                    validation_data=valid_dataset)","7dbbde17":"display_training_curves(\n    history.history['categorical_accuracy'], \n    history.history['val_categorical_accuracy'], \n    'accuracy')","23f1086d":"probs_resnet = model.predict(test_dataset, verbose=1)\nsub.loc[:, 'healthy':] = probs_resnet\nsub.to_csv('submission_resnet.csv', index=False)\nsub.head()\n\n#LB:-0.94379","3fd48012":"with strategy.scope():\n    model = tf.keras.Sequential([InceptionResNetV2(input_shape=(512, 512, 3),\n                                             weights='imagenet',\n                                             include_top=False),\n                                 L.GlobalAveragePooling2D(),\n                                 L.Dense(train_labels.shape[1],\n                                         activation='softmax')])\n        \n    model.compile(optimizer='adam',\n                  loss = 'categorical_crossentropy',\n                  metrics=['categorical_accuracy'])\n    model.summary()","69b4ba70":"SVG(tf.keras.utils.model_to_dot(Model(model.layers[0].input, model.layers[0].layers[11].output), dpi=70).create(prog='dot', format='svg'))","9186aa45":"SVG(tf.keras.utils.model_to_dot(model, dpi=70).create(prog='dot', format='svg'))","07e99db4":"history = model.fit(train_dataset,\n                    epochs=EPOCHS,\n                    callbacks=[lr_schedule],\n                    steps_per_epoch=STEPS_PER_EPOCH,\n                    validation_data=valid_dataset)","3a8a282f":"display_training_curves(\n    history.history['categorical_accuracy'], \n    history.history['val_categorical_accuracy'], \n    'accuracy')","ca2b7595":"probs_incepres = model.predict(test_dataset, verbose=1)\nsub.loc[:, 'healthy':] = probs_incepres\nsub.to_csv('submission_incepres.csv', index=False)\nsub.head()\n\n#LB:-0.96181","27627f53":"ensemble_1, ensemble_2, ensemble_3 = [sub]*3\n\n# probs_incepv3\n\nensemble_1.loc[:, 'healthy':] = 0.50*probs_dnn + 0.50*probs_incepres\nensemble_2.loc[:, 'healthy':] = 0.75*probs_dnn + 0.20*probs_incepres + 0.05*probs_incepv3\nensemble_3.loc[:, 'healthy':] = 0.80*probs_dnn + 0.20*probs_incepres\n\nensemble_1.to_csv('submission_ensemble_1.csv', index=False) #LB :-0.96970\nensemble_2.to_csv('submission_ensemble_2.csv', index=False) #LB :-0.96970\nensemble_3.to_csv('submission_ensemble_3.csv', index=False) #LB :-0.96970","03690371":"<h3>Multiple Diseases<\/h3>","7acb6cec":"<h1>EDA<\/h1>","d7dcdeb3":"<h3>Random samples<\/h3>","12e5988f":"<h3>Healthy<\/h3>","fe9eecdf":"<h2>2. InceptionV3<\/h2>","5ffed5cd":"<h1>Loading data<\/h1>","a486d370":"<h1>Load labels and paths<\/h1>","e955e3b9":"<h1>Modelling<\/h1>","dca57663":"<h3>Scab<\/h3>","659c29b6":"<h1>Importing Libraries<\/h1>","80c34229":"<h1>Defining Learning-Rate Scheduler<\/h1>","772d34e5":"<h1>Creating Dataset objects<\/h1>","4e3c7016":"<h2>5. Ensembling<\/h2>","5c9f82ce":"<h1>References<\/h1>\n\n[https:\/\/www.kaggle.com\/tarunpaparaju\/plant-pathology-2020-eda-models\/notebook](http:\/\/)\n\nhttps:\/\/www.kaggle.com\/pestipeti\/eda-plant-pathology-2020","fdbb6e86":"<h2>Class distributions<\/h2>","ab07e18d":"<h2>Image Examples<\/h2>","c1e75782":"<h2>3. ResNet<\/h2>","e41b85df":"<h1>Function for visualizing training and validation accuracy<\/h1>","753717db":"<h3>Rust<\/h3>","1d43cff4":"<h2>4. InceptionResNet<\/h2>","3f65f444":"<h2>1. DenseNet<\/h2>","c1de1522":"<h1>Setup TPU Config<\/h1>","60003148":"<h1>Defining hyperparameters of fit<\/h1>"}}