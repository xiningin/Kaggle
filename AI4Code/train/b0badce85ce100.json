{"cell_type":{"74c07211":"code","d39eb9bb":"code","7c5e585c":"code","ed34fb1b":"code","da7cb2ff":"code","958ae79d":"code","9e9da234":"code","67351e76":"code","d0a4d508":"code","c455713a":"code","6553c466":"code","70a286f6":"code","e1ad4af3":"code","75c3d645":"code","4fc45c24":"code","6092a3a6":"code","90d251dd":"code","d599b936":"markdown","71956ea1":"markdown","6a6a481b":"markdown","94ccff8e":"markdown","8d1cae90":"markdown","9854e7d4":"markdown","b74a0527":"markdown"},"source":{"74c07211":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.utils import to_categorical\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d39eb9bb":"train_df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntrain_df.head()","7c5e585c":"test_df = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest_df.head()","ed34fb1b":"train_df.describe()","da7cb2ff":"X_train = train_df.drop('label', axis = 1).to_numpy()\ny_train = train_df.label.to_numpy()\nX_test = test_df.to_numpy()\ny_test = []","958ae79d":"num_images_train = len(X_train)\nnum_images_test = len(X_test)\n# convert train dataset into (length, width, channels)\nlength, width, channels = 28, 28, 1\nX_train = X_train.reshape(num_images_train, length, width, channels)\nX_test = X_test.reshape(num_images_test, length, width, channels)\n\n# one hot encoding\ny_train = to_categorical(y_train)\n","9e9da234":"plt.imshow(X_train[10])","67351e76":"def data_augmenter():\n    data_augmentation = tf.keras.Sequential([])\n    data_augmentation.add(tf.keras.layers.experimental.preprocessing.RandomFlip('horizontal'))\n    data_augmentation.add(tf.keras.layers.experimental.preprocessing.RandomRotation(0.2))\n    return data_augmentation","d0a4d508":"data_augmentation = data_augmenter()","c455713a":"def my_model():\n    model = tf.keras.Sequential([\n    tf.keras.layers.ZeroPadding2D(input_shape=(length,width,channels),padding=(3, 3), data_format=None),\n    \n    #first convolution layer\n    \n    tf.keras.layers.Conv2D(16,(3,3), strides = (1,1),activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    #second convolution layer\n    \n    tf.keras.layers.Conv2D(32,(3,3), strides = (1,1),activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    #third convolution layer\n    \n    tf.keras.layers.Conv2D(64,(3,3), strides = (1,1),activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    \n    tf.keras.layers.Dense(10, activation = 'softmax')\n    ])\n    \n    return model","6553c466":"model = my_model()","70a286f6":"# compiling my model\nfrom tensorflow.keras.optimizers import Adam\n\nmodel.compile(optimizer=Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, amsgrad=False),\n              loss='categorical_crossentropy',\n              metrics = ['accuracy'])","e1ad4af3":"model.summary()","75c3d645":"model.fit(X_train, y_train, epochs = 20, batch_size = 16)","4fc45c24":"model.history","6092a3a6":"predictions =  np.argmax(model.predict(X_test), axis=-1)\npredictions","90d251dd":"submission = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nsubmission['Label']  = predictions\n\nsubmission.to_csv(\"submission.csv\", index=False)","d599b936":"# Predictions","71956ea1":"# checking the parameters of my model","6a6a481b":"# Data Augumentation","94ccff8e":"# Making submission","8d1cae90":"# Building the Model","9854e7d4":"# Training my model","b74a0527":"# Data Wrangling"}}