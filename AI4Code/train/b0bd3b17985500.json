{"cell_type":{"39710078":"code","c772ee70":"code","3c1b74b6":"code","bdf881e6":"code","e03a1e61":"code","4e60c264":"code","5773ae52":"code","bcc6a61b":"code","d5d71993":"code","804fab27":"code","4eebeb5b":"code","8eb5d607":"code","c475af95":"code","5970c163":"code","55e52e67":"code","2231573b":"code","d9a041da":"code","d9940eaf":"code","028b58d8":"code","69fb5000":"code","0777c998":"code","d43ce1d8":"code","7dc5de60":"code","209abb78":"code","1e273528":"code","412eefa0":"code","8703ed14":"code","fdec58ab":"code","1cef14e5":"code","206795c5":"code","df7a8fbd":"code","e8b27ab5":"code","892f60e2":"code","cdc40a38":"code","9fe39cc9":"code","f495d1e5":"code","9c858f2f":"code","a5cbedd0":"code","7cfff2fb":"code","e3f50269":"markdown","d684d830":"markdown","4eeb5ec6":"markdown","f651b438":"markdown","05e3cff4":"markdown","2aa98a8e":"markdown","38ec783d":"markdown","5c6b74b1":"markdown","88a818ec":"markdown","e1d847fd":"markdown","33ae335a":"markdown","c3393f92":"markdown","7a540846":"markdown","5ff03f81":"markdown","3ce5b10d":"markdown","ac584749":"markdown","7d50958d":"markdown","0f6927ec":"markdown","256c3094":"markdown","286f5f99":"markdown","4732f4bd":"markdown","5ccfcd7f":"markdown","fa5d778d":"markdown","4d01ce42":"markdown","50020a64":"markdown","73deb567":"markdown","12a9c831":"markdown","fee9890e":"markdown","635412b8":"markdown","9b8ae9f6":"markdown","a12d12fe":"markdown","50db2086":"markdown","c381b65f":"markdown","d04804ec":"markdown","e97e9290":"markdown","7dcee322":"markdown","0473edac":"markdown","11163c46":"markdown","76348e3b":"markdown","7aa60344":"markdown","932177d7":"markdown","1104289e":"markdown","61369fb8":"markdown","4bddd26a":"markdown","6d8e5655":"markdown","90349c4b":"markdown","77caefff":"markdown","c74b8e1d":"markdown","9eda811d":"markdown","b666ebfe":"markdown","b1ec74e2":"markdown","e1b8d915":"markdown","a005ee5c":"markdown","2ec4c0e0":"markdown","843bcae7":"markdown"},"source":{"39710078":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c772ee70":"import matplotlib as mpl\nimport matplotlib.pyplot as plt\nplt.style.use('classic')","3c1b74b6":"%matplotlib inline","bdf881e6":"x = np.linspace(0, 10, 100)\nfig = plt.figure()\nplt.plot(x, np.sin(x), '-')\nplt.plot(x, np.cos(x), '--')","e03a1e61":"plt.figure()  # create a plot figure\n\n# create the first of two panels and set current axis\nplt.subplot(2, 1, 1) # (rows, columns, panel number)\nplt.plot(x, np.sin(x))\n\n# create the second panel and set current axis\nplt.subplot(2, 1, 2)\nplt.plot(x, np.cos(x))","4e60c264":"# ax will be an array of two Axes objects\nfig, ax = plt.subplots(2)\n\n# Call plot() method on the appropriate object\nax[0].plot(x, np.sin(x))\nax[1].plot(x, np.cos(x))","5773ae52":"plt.style.use('seaborn-whitegrid')","bcc6a61b":"plt.plot(x, np.sin(x - 0), color='blue')        # specify color by name\nplt.plot(x, np.sin(x - 1), color='g')           # short color code (rgbcmyk)\nplt.plot(x, np.sin(x - 2), color='0.75')        # Grayscale between 0 and 1\nplt.plot(x, np.sin(x - 3), color='#FFDD44')     # Hex code (RRGGBB from 00 to FF)\nplt.plot(x, np.sin(x - 4), color=(1.0,0.2,0.3)) # RGB tuple, values 0 and 1\nplt.plot(x, np.sin(x - 5), color='chartreuse') # all HTML color names supported","d5d71993":"plt.plot(x, x + 0, linestyle='solid')\nplt.plot(x, x + 1, linestyle='dashed')\nplt.plot(x, x + 2, linestyle='dashdot')\nplt.plot(x, x + 3, linestyle='dotted');\n\n# For short, you can use the following codes:\nplt.plot(x, x + 4, linestyle='-')  # solid\nplt.plot(x, x + 5, linestyle='--') # dashed\nplt.plot(x, x + 6, linestyle='-.') # dashdot\nplt.plot(x, x + 7, linestyle=':')  # dotted","804fab27":"plt.plot(x, np.sin(x))\nplt.title(\"A Sine Curve\")\nplt.xlabel(\"x\")\nplt.ylabel(\"sin(x)\")\n","4eebeb5b":"plt.plot(x, np.sin(x), '-g', label='sin(x)')\nplt.plot(x, np.cos(x), ':b', label='cos(x)')\nplt.axis('equal')\n\nplt.legend()","8eb5d607":"x = np.linspace(0, 10, 30)\ny = np.sin(x)\nplt.scatter(x, y, marker='o')","c475af95":"rng = np.random.RandomState(123)\nx = rng.randn(100)\ny = rng.randn(100)\ncolors = rng.rand(100)\nsizes = 1000 * rng.rand(100)\n\nplt.scatter(x, y, c=colors, s=sizes, alpha=0.3,\n           cmap='viridis')\nplt.colorbar()  # show color scale","5970c163":"from sklearn.datasets import load_iris\niris = load_iris()\nfeatures = iris.data.T\n\nplt.scatter(features[0], features[1], alpha=0.2,\n       s=100*features[3], c=iris.target, cmap='viridis')\nplt.xlabel(iris.feature_names[0])\nplt.ylabel(iris.feature_names[1])","55e52e67":"def f(x, y):\n    return np.sin(x) ** 10 + np.cos(10 + y * x) * np.cos(x)","2231573b":"x = np.linspace(0, 5, 50)\ny = np.linspace(0, 5, 40)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)","d9a041da":"plt.contour(X, Y, Z, colors='black')","d9940eaf":"plt.contour(X, Y, Z, 20, cmap='RdGy')","028b58d8":"plt.contourf(X, Y, Z, 20, cmap='RdGy')\nplt.colorbar()","69fb5000":"data = np.random.randn(1000)","0777c998":"plt.hist(data)","d43ce1d8":"plt.hist(data, bins=30, alpha=0.5, histtype='stepfilled', color='pink', edgecolor='none')","7dc5de60":"fig = plt.figure()\nax1 = fig.add_axes([0.1, 0.5, 0.8, 0.4], xticklabels=[], ylim=(-1.2, 1.2))\nax2 = fig.add_axes([0.1, 0.1, 0.8, 0.4], ylim=(-1.2, 1.2))\n\nx = np.linspace(0, 10)\nax1.plot(np.sin(x))\nax2.plot(np.cos(x))","209abb78":"for i in range(1, 7):\n    plt.subplot(2, 3, i)\n    plt.text(0.5, 0.5, str((2, 3, i)), fontsize=18, ha='center')","1e273528":"fig = plt.figure()\nfig.subplots_adjust(hspace=0.4, wspace=0.6)\nfor i in range(1, 7):\n    ax = fig.add_subplot(2, 3, i)\n    ax.text(0.5, 0.5, str((2, 3, i)), fontsize=18, ha='center')","412eefa0":"fig, ax = plt.subplots(2, 3, sharex='col', sharey='row')","8703ed14":"from mpl_toolkits import mplot3d","fdec58ab":"fig = plt.figure()\nax = plt.axes(projection='3d')","1cef14e5":"ax = plt.axes(projection='3d')\n\n# Data for a three-dimensional line\nzline = np.linspace(0, 15, 1000)\nxline = np.sin(zline)\nyline = np.cos(zline)\nax.plot3D(xline, yline, zline, 'gray')\n\n# Data for three-dimensional scattered points\nzdata = 15 * np.random.random(100)\nxdata = np.sin(zdata) + 0.1 * np.random.randn(100)\nydata = np.cos(zdata) + 0.1 * np.random.randn(100)\nax.scatter3D(xdata, ydata, zdata, c=zdata, cmap='Greens')","206795c5":"def f(x, y):\n    return np.sin(np.sqrt(x ** 2 + y ** 2))\n\nx = np.linspace(-6, 6, 30)\ny = np.linspace(-6, 6, 30)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)","df7a8fbd":"fig = plt.figure()\nax = plt.axes(projection='3d')\nax.contour3D(X, Y, Z, 50, cmap='binary')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')","e8b27ab5":"ax.view_init(60, 35)\nfig","892f60e2":"fig = plt.figure()\nax = plt.axes(projection='3d')\nax.plot_wireframe(X, Y, Z, color='black')\nax.set_title('wireframe')","cdc40a38":"ax = plt.axes(projection='3d')\nax.plot_surface(X, Y, Z, rstride=1, cstride=1,\n               cmap='viridis', edgecolor='none')\nax.set_title('surface')","9fe39cc9":"from mpl_toolkits.basemap import Basemap","f495d1e5":"plt.figure(figsize=(8, 8))\nm = Basemap(projection='ortho', resolution=None, lat_0=15, lon_0=80)\nm.bluemarble(scale=0.8)","9c858f2f":"from itertools import chain\n\ndef draw_map(m, scale=0.2):\n    # draw a shaded-relief image\n    m.shadedrelief(scale=scale)\n\n    # lats and longs are returned as a dictionary\n    lats = m.drawparallels(np.linspace(-90, 90, 13))\n    lons = m.drawmeridians(np.linspace(-180, 180, 13))\n\n    # keys contain the plt.Line2D instances\n    lat_lines = chain(*(tup[1][0] for tup in lats.items()))\n    lon_lines = chain(*(tup[1][0] for tup in lons.items()))\n    all_lines = chain(lat_lines, lon_lines)\n\n    # cycle through these lines and set the desired style\n    for line in all_lines:\n        line.set(linestyle='-', alpha=0.3, color='w')","a5cbedd0":"fig = plt.figure(figsize=(8, 6), edgecolor='w')\nm = Basemap(projection='cyl', resolution=None,\n           llcrnrlat=-90, urcrnrlat=90,\n           llcrnrlon=-180, urcrnrlon=180, )\ndraw_map(m)","7cfff2fb":"fig = plt.figure(figsize=(8, 8))\nm = Basemap(projection='ortho', resolution=None,\n           lat_0=50, lon_0=0)\ndraw_map(m)","e3f50269":"Matplotlib is a multiplatform data visualization library built on NumPy arrays. It's most important features is its ability to play well with many operating systems and graphics backends. Matplotlib supports dozens of backends and output types, which means you can count on it to work regardless of which operating system you are using or which output format you wish. This cross-platform, everything-to-everyone approach has been one of the great strengths of Matplotlib. It has led to a large userbase, which in turn has led to an active developer base and Matplotlib\u2019s powerful tools and ubiquity within the scientific Python world.","d684d830":"# 3D Plotting in Matplotlib","4eeb5ec6":"In general we opt for `%matplotlib inline`. It needs to be done only once per kernel\/session, any cell within the notebook that creates a plot will embed a PNG image of the resulting graphic","f651b438":"Histograms are a great first step to understand Dataset","05e3cff4":"# Multiple Subplots","2aa98a8e":"# Scatter Plots","38ec783d":"The colors can be specified in various ways","5c6b74b1":"Sometimes the default viewing angle is not optimal, in which case we can use the view_init method to set the elevation and azimuthal angles.","88a818ec":"In the IPython notebook, we have the option of embedding graphics directly in the notebook, with two possible options:\n\n* `%matplotlib` notebook will lead to interactive plots embedded within the notebook\n\n* `%matplotlib inline` will lead to static images of your plot embedded in the notebook","e1d847fd":"If no color is specified, Matplotlib will automatically cycle through a set of default colors for multiple lines.","33ae335a":"It is important to note that this interface is stateful i.e., it keeps track of the \u201ccurrent\u201d figure and axes, which are where all plt commands are applied. While this stateful interface is fast and convenient for simple plots, it is easy to run into problems. For example, once the second panel is created, how can we go back and add something to the first?","c3393f92":"### Wireframes and Surface Plots","7a540846":"### Matlab Style Interface","5ff03f81":"# Adjusting the Plot","3ce5b10d":"## Multiple subplots in one go","ac584749":"Sometimes it is helpful to compare different views of data side by side. Matplotlib has the concept of subplots: groups of smaller axes that can exist together within a single figure. These subplots might be insets, grids of plots, or other more complicated layouts.","7d50958d":"The color argument is automatically mapped to a color scale (shown here by the colorbar() command), and the size argument is given in pixels. In this way, the color and size of points can be used to convey information in the visualization, in order to illustrate multidimensional data.","0f6927ec":"### Map Projections","256c3094":"Perspective projections are constructed using a particular choice of perspective point, similar to if we photographed the Earth from a particular point in space (a point which, for some projections, technically lies within the Earth!).","286f5f99":"The most basic 3D plot is a line or scatter plot created from sets of (x, y, z) triples. In analogy with the more common 2D plots discussed earlier, we can create these using the `ax.plot3D()` and `ax.scatter3D()` functions.","4732f4bd":"### Cylindrical Projection","5ccfcd7f":"# Histograms","fa5d778d":"The primary difference of `plt.scatter()` from `plt.plot()` is that it can be used to create scatter plots where the properties of each individual point (size, face color, edge color, etc.) can be individually controlled or mapped to data.","4d01ce42":"# Geographical Data with Basemap","50020a64":"# Density and Contours Plot","73deb567":"## Colors","12a9c831":"`plt.subplots()` is the easier method to use. Rather than creating a single subplot, this function creates a full grid of subplots in a single line, returning them in a NumPy array. The arguments are the number of rows and number of columns, along with optional keywords sharex and sharey, which allow you to specify the relationships between different axes.","fee9890e":"### Line Style","635412b8":"Using Iris Dataset we can see that scatter plot has given us the ability to simultaneously explore four different dimensions of the data: the (x, y) coordinates of each point corresponds to the sepal length and width, the size of the point is related to the petal width, and the color is related to the particular species of flower.","9b8ae9f6":"## Two Interfaces:","a12d12fe":"We can use the `hspace` and `wspace` arguments of `plt.subplots_adjust()`, which specify the spacing along the height and width of the figure, in units of the subplot size (in this case, the space is 40% of the subplot width and height).","50db2086":"Analogous to the contour plots we explored in \u201cDensity and Contour Plots\u201d, mplot3d contains tools to create three-dimensional relief plots using the same inputs. Like two-dimensional `ax.contour()` plots, `ax.contour3D()` requires all the input data to be in the form of two-dimensional regular grids, with the Z data evaluated at each point.","c381b65f":"With 3D axes enabled, we can now plot a variety of 3D plot types. 3D plotting is one of the functionalities that benefits immensely from viewing figures interactively rather than statically in the notebook; recall that to use interactive figures, you can use `%matplotlib` notebook rather than `%matplotlib inline` when running this code.","d04804ec":"# Introduction","e97e9290":"Two other types of three-dimensional plots that work on gridded data are wireframes and surface plots. These take a grid of values and project it onto the specified three-dimensional surface, and can make the resulting three-dimensional forms quite easy to visualize.","7dcee322":"We used an elevation of 60 degrees i.e, 60 degrees above the x-y plane and an azimuth of 35 degrees i.e., rotated 35 degrees counter-clockwise about the z-axis","0473edac":"Sometimes it is useful to display three-dimensional data in two dimensions using contours or color-coded regions.","11163c46":"### Object Oriented Interface","76348e3b":"The object-oriented interface is available for more complicated situations like when you want more control over your figure. Rather than depending on some notion of an \u201cactive\u201d figure or axes, in the object-oriented interface the plotting functions are methods of explicit Figure and Axes objects.","7aa60344":"When multiple lines are being shown within a single axes, it can be useful to create a plot legend that labels each line type using `plt.legend()` method. ","932177d7":"The first thing to decide when using maps is which projection to use. These projections have been developed over the course of human history, and there are a lot of choices! Depending on the intended use of the map projection, there are certain map features (e.g., direction, area, distance, shape, or other considerations) that are useful to maintain.","1104289e":"One common type of visualization in data science is that of geographic data. Matplotlib\u2019s main tool for this type of visualization is the Basemap toolkit, which is one of several Matplotlib toolkits that live under the mpl_toolkits namespace.","61369fb8":"The `hist()` function has many options to tune both the calculation and the display","4bddd26a":"# Labeling the Plots","6d8e5655":"Aligned columns or rows of subplots are a common enough need that Matplotlib has several convenience routines that make them easy to create. The lowest level of these is `plt.subplot()`, which creates a single subplot within a grid.","90349c4b":"We can add a `plt.colorbar()` command, which automatically creates an additional axis with labeled color information for the plot","77caefff":"### Perspective projections","c74b8e1d":" Adding a colormap to the filled polygons can aid perception of the topology of the surface being visualized:","9eda811d":"Once this submodule is imported, we can create a three-dimensional axes by passing the keyword projection='3d' to any of the normal axes creation routines","b666ebfe":"### Importing Matplotlib library","b1ec74e2":"We can adjust the position, size, and style of these labels using optional arguments to the function. For more information, see the Matplotlib [documentation](https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.pyplot.xlabel.html#matplotlib.pyplot.xlabel) and the docstrings of each of these functions.","e1b8d915":"By default when a single color is used, negative values are represented by dashed lines, and positive values by solid lines. Alternatively, you can color-code the lines by specifying a colormap with the `cmap` argument. ","a005ee5c":"### 3D Contour Plots","2ec4c0e0":"pyplot is mainly a state-based interface to matplotlib. It provides a MATLAB-like way of plotting. We will use the plt.style directive to choose appropriate aesthetic styles for our figures. Here we will set the **classic** style, which ensures that the plots we create use the classic Matplotlib style:","843bcae7":"A contour plot can be created with the `plt.contour()` function. It takes three arguments: a grid of x values, a grid of y values, and a grid of z values."}}