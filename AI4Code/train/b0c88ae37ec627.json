{"cell_type":{"ca2a631c":"code","69b90a8d":"code","eeee18e8":"code","9f48fe20":"code","1dd41aa9":"code","17c55c5c":"code","1b62a07a":"code","23cb3374":"code","acd69dba":"code","4bb8616f":"code","ee825c14":"code","d170395f":"code","2e0efa14":"code","82ccfe38":"code","838a480b":"code","07d05e7f":"code","06ef9707":"code","9f468c5f":"code","88025472":"code","a2566956":"code","4ba069f3":"code","eecb6282":"code","05012f42":"code","8e45cbdc":"code","7caac277":"code","d4c07ac4":"markdown","7e02185e":"markdown","9670fe65":"markdown","17494a61":"markdown","4cd50762":"markdown","885ec0ab":"markdown","d9e057a6":"markdown","755af156":"markdown","99becf00":"markdown","f7991de4":"markdown"},"source":{"ca2a631c":"# EDA\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Machine Learning\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\n\n# Metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import plot_confusion_matrix\n\n# Evaluation\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve","69b90a8d":"df = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\ndf","eeee18e8":"df.info()","9f48fe20":"df.isnull().sum()","1dd41aa9":"df.hist(figsize=(20,15), bins=30)","17c55c5c":"df['Class'].value_counts()","1b62a07a":"df['Class'].value_counts(normalize=True) * 100","23cb3374":"# Random under-sampleing\n# Random sampling in normal transactions\ndf2 = df.loc[df['Class']==0].sample(n=492).copy()\n# All samples of fraud transactions\ndf3 = df.loc[df['Class']==1].copy()\n\n# Concat all transactions, with new index on raws\ndf4 = pd.concat([df2,df3], ignore_index=True)\n\n# Shuffle raws randomly\ndf4 = df4.sample(frac=1)\n\n# Reset index of every raws\ndf4.reset_index(drop=True, inplace=True)\ndf4","acd69dba":"sns.displot(df4['Class'])","4bb8616f":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr(), annot=True, cmap='Accent')","ee825c14":"plt.figure(figsize=(20,10))\nsns.heatmap(df4.corr(), annot=True, cmap='Accent')","d170395f":"# All high corelation features to class are 'V1', 'V2', 'V3', 'V4', 'V7', 'V9', 'V10', 'V11', 'V14'\n# pair plot will give good intuation about geomentry of data points on all features\nsns.pairplot(df4[['V1', 'V2', 'V3', 'V4', 'V7', 'V9', 'V10', 'V11', 'V14', 'Class']], hue='Class')","2e0efa14":"df4.columns","82ccfe38":"# from sklearn.feature_selection import VarianceThreshold\nX = df4[['Time', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10',\n       'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20',\n       'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Amount']]\n\nsel = VarianceThreshold(threshold=(.8))\nsel.fit_transform(X)","838a480b":"X = sel.fit_transform(X)\nX[0]","07d05e7f":"y = df4['Class']","06ef9707":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","9f468c5f":"rfc = RandomForestClassifier(bootstrap=True, ccp_alpha=0.02, class_weight=None,\n                       criterion='gini', max_depth=None, max_features='auto',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=100,\n                       n_jobs=None, oob_score=False, random_state=None,\n                       verbose=0, warm_start=False)\nrfc.fit(X_train, y_train)","88025472":"print('---Train Data---')\nprint(classification_report(y_train, y_pred=(rfc.predict(X_train))))\nprint(\"---Test Data---\")\nprint(classification_report(y_test, y_pred=(rfc.predict(X_test))))\nplot_confusion_matrix(rfc, X_test, y_test)","a2566956":"lr = LogisticRegression(max_iter=200)\nlr.fit(X_train, y_train)","4ba069f3":"print('---Train Data---')\nprint(classification_report(y_train, y_pred=(lr.predict(X_train))))\nprint(\"---Test Data---\")\nprint(classification_report(y_test, y_pred=(lr.predict(X_test))))\nplot_confusion_matrix(lr, X_test, y_test)","eecb6282":"p1 = rfc.predict_proba(X_test)\np2 = lr.predict_proba(X_test)","05012f42":"auc_score1 = roc_auc_score(y_test, p1[:,1])\nauc_score2 = roc_auc_score(y_test, p2[:,1])\nprint(auc_score1,auc_score2)","8e45cbdc":"# roc curve for models\nfpr1, tpr1, thresh1 = roc_curve(y_test, p1[:,1], pos_label=1)\nfpr2, tpr2, thresh2 = roc_curve(y_test, p2[:,1], pos_label=1)\n\n# roc curve for tpr = fpr \nrandom_probs = [0 for i in range(len(y_test))]\np_fpr, p_tpr, _ = roc_curve(y_test, random_probs, pos_label=1)","7caac277":"plt.plot(fpr1, tpr1, linestyle='--', label='Random Forest')\nplt.plot(fpr2, tpr2, linestyle='--', label='Logistic Regression')\nplt.plot(p_fpr, p_tpr, linestyle='--')\nplt.title('ROC Curve')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive rate')\nplt.legend(loc='best')","d4c07ac4":"Class imbalance treatment will require because it is highly imbalanced.\n\n# Class Balancing (Random Under-Sampleing)","7e02185e":"# Imports","9670fe65":"## Random Forest","17494a61":"# AUC-ROC","4cd50762":"**Problem Statement: Detect Credit Card Fraud from transaction data.**\n* Data Source: https:\/\/www.kaggle.com\/mlg-ulb\/creditcardfraud\n* This is a good example of the shared dataset, which is created from an original dataset that has privacy issues so this dataset has masked, transformed, PCA features or information. \n* As all features are already transformed, any domain-specific thing can not be analyzed through this dataset.\n* It is a highly imbalanced dataset for classification problems that require special class imbalance learning strategies. ","885ec0ab":"**Random Under-Sampling**\n* Pair plot shows clearly two compartments in almost all plots so random under-sampling is going right.\n* All the features are masked for privacy issues, so the pair plot is enough to give the most information.","d9e057a6":"## Logistic Regression","755af156":"# Model","99becf00":"---","f7991de4":"# Feature Selection"}}