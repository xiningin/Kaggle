{"cell_type":{"fd3ec1b6":"code","708a3171":"code","2fba8b2b":"code","4c3dda93":"code","ddbfa4d7":"code","bd0c8c32":"code","73571544":"code","8cae1e2f":"code","c2219e8e":"code","6fa4cc46":"code","209c6083":"code","feb68c04":"code","c7614cbd":"code","c15e2b2e":"code","84effd38":"code","1973886d":"code","fa016ab8":"code","4732552a":"code","0c878820":"code","ea360b29":"code","4793e9d1":"code","8d828827":"code","6c4d3be1":"code","ca8e4719":"code","37e2ba2b":"markdown","bb0373b1":"markdown","f5c02c14":"markdown","37d7f19a":"markdown","6836e2f1":"markdown","67a76cf0":"markdown","9617a711":"markdown","3c6e4ead":"markdown","843f4707":"markdown","c9ea5580":"markdown","2355196d":"markdown","1957ca2c":"markdown","a378e9b6":"markdown","d25f1756":"markdown","d04bc220":"markdown"},"source":{"fd3ec1b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","708a3171":"from PIL import Image","2fba8b2b":"def display_Image(path, save):\n    img1 = Image.open(path)\n    display(img1)\n    if save == True:\n        img1.save('fingerprints.jpg')","4c3dda93":"display_Image('\/kaggle\/input\/fvc2002-fingerprints\/fingerprints\/DB2_B\/105_4.tif', 0)","ddbfa4d7":"display_Image('\/kaggle\/input\/fvc2002-fingerprints\/fingerprints\/DB2_B\/109_3.tif',True)","bd0c8c32":"display_Image('\/kaggle\/input\/fvc2002-fingerprints\/fingerprints\/DB1_B\/102_8.tif', 0)","73571544":"display_Image('\/kaggle\/input\/fvc2002-fingerprints\/fingerprints\/DB4_B\/104_3.tif', 0)","8cae1e2f":"display_Image('\/kaggle\/input\/fvc2002-fingerprints\/fingerprints\/DB3_B\/104_3.tif', 0)","c2219e8e":"display_Image('\/kaggle\/input\/fvc2002-fingerprints\/fingerprints\/DB3_B\/108_4.tif',True)","6fa4cc46":"display_Image('\/kaggle\/input\/fvc2002-fingerprints\/fingerprints\/DB1_B\/106_8.tif', 0)","209c6083":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","feb68c04":"from fastai.vision.all import *\nfrom fastai.imports import *\nfrom fastai.vision.data import *\nfrom fastai import *\nimport numpy as np\nimport fastai\nimport matplotlib.pyplot as plt","c7614cbd":"path = Path(\"\/kaggle\/input\/fvc2002-fingerprints\/fingerprints\")\npath.ls()","c15e2b2e":"np.random.seed(42)\ndata = ImageDataLoaders.from_folder(path, train=\".\", valid_pct=0.2, item_tfms=RandomResizedCrop(512, min_scale=0.75),\n                                    bs=32,batch_tfms=[*aug_transforms(size=256, max_warp=0), Normalize.from_stats(*imagenet_stats)],num_workers=0)","84effd38":"data.show_batch(nrows=3, figsize=(7,8))","1973886d":"data.show_batch(nrows=2, figsize=(7,8))","fa016ab8":"import cv2 as cv\nimport matplotlib.pyplot as plt","4732552a":"IMG_PATH = \"..\/input\/fvc2002-fingerprints\/fingerprints\/DB2_B\/101_7.tif\"\n\nimgArray = cv.imread(IMG_PATH)","0c878820":"plt.imshow(imgArray)\n\nplt.show()","ea360b29":"convertedArray = cv.cvtColor(imgArray, cv.COLOR_BGR2RGB)\n\nplt.subplots(figsize=(15,10))\nplt.imshow(convertedArray);plt.show()","4793e9d1":"fig, ((ax1,ax2), (ax3,ax4)) =plt.subplots(2,2,figsize=(14,10))\n\nax1.imshow(convertedArray[:,:,0], cmap=\"Reds_r\"); ax1.set_title(\"R\", size=20) \nax2.imshow(convertedArray[:,:,1], cmap=\"Greens_r\"); ax2.set_title(\"G\", size=20)\nax3.imshow(convertedArray[:,:,2], cmap=\"Blues_r\"); ax3.set_title(\"B\", size=20)\n\nax4.axis(\"off\"); plt.tight_layout(); plt.show()","8d828827":"fig, (ax1,ax2,ax3) = plt.subplots(1,3,figsize=(15,4))\n\nax1.hist(convertedArray[:,:,0].flatten(), color=\"R\", bins=200); ax1.set_title(\"R\", size=20)\nax2.hist(convertedArray[:,:,1].flatten(), color=\"G\", bins=200); ax1.set_title(\"G\", size=20)\nax3.hist(convertedArray[:,:,2].flatten(), color=\"B\", bins=200); ax1.set_title(\"B\", size=20)\n\nplt.tight_layout();plt.show()","6c4d3be1":"#If you want to extract these two profiles. Proceed this way for the horizontal section at row 600 -Changed to 550\n\nhorSection = convertedArray[550,:,:]\nplt.figure(figsize=(16,5))\nplt.plot(horSection[:,0], label=\"R\", color=\"#e74c3c\")\nplt.plot(horSection[:,1], label=\"G\", color=\"#16a085\")\nplt.plot(horSection[:,2], label=\"B\", color=\"#3498db\")\n\nplt.xlabel(\"X\"); plt.legend(); plt.show()","ca8e4719":"#Extract from the vertical one at column 1000 - Changed to 295\n\nverSection = convertedArray[:,295,:]\nplt.figure(figsize=(16,5))\n\nplt.plot(verSection[:,0], label=\"R\", color=\"#e74c3c\")\nplt.plot(verSection[:,1], label=\"G\", color=\"#16a085\")\nplt.plot(verSection[:,2], label=\"B\", color=\"#3498db\")\n\nplt.xlabel(\"X\"); plt.legend();plt.show()","37e2ba2b":"ULNAR LOOP","bb0373b1":"Automated Biometric Identification Systems provide improved efficiency with specialized workflows, such as the Thales CABIS 7.0 Unknown Latent Workflow.\n\nA latent image is marked up and submitted for a sequential search to both the latent fingerprint database (LFP) and the latent palmprint database (LPP), thereby removing the need to remark and resubmit a second time.\n\n![](https:\/\/www.thalesgroup.com\/sites\/default\/files\/gemalto\/Latent_Print.png)thalesgroup.com\n\nhttps:\/\/www.thalesgroup.com\/en\/markets\/digital-identity-and-security\/government\/biometrics\/afis-history","f5c02c14":"# **<span style=\"color:#346888;\">AFIS - Automated Fingerprint Identification Systems<\/span>**\n\n\nDetect the guilty, protect the innocent\n\nThe basics: biometrics for identification\n\nThe technical challenges of AFIS\n\nThe early stages: proving the value of AFIS\n\nThe building blocks: a comprehensive investigation tool kit\n\nAFIS and the future of law enforcement\n\nAt the same time, new biometric technologies - including iris and facial recognition\u200b \u2013 mean that the AFIS is rapidly transforming into the ABIS (Automated Biometric Identification System), providing law enforcement agencies with an even more powerful tool.\n\nhttps:\/\/www.thalesgroup.com\/en\/markets\/digital-identity-and-security\/government\/biometrics\/afis-history","37d7f19a":"PLAIN WHORL","6836e2f1":"# **<span style=\"color:#346888;\">The Henry Classification System<\/span>**\n\n\nThe Henry Classification System is a long-standing method by which fingerprints are sorted by physiological characteristics for one-to-many searching. Developed by Sir Hem Chandra Bose, Qazi Azizul Haque and Edward Henry in the late 19th century for criminal investigations in British India, it was the basis of modern-day AFIS (Automated Fingerprint Identification System) classification methods up until the 1990s.\n\nIn recent years, the Henry Classification System has generally been replaced by ridge flow classification approaches.\nhttps:\/\/en.wikipedia.org\/wiki\/Henry_Classification_System","67a76cf0":"RADIAL LOOP","9617a711":"PLAIN WHORL","3c6e4ead":"PLAIN WHORL","843f4707":"PLAIN WHORL","c9ea5580":"ULNAR LOOP","2355196d":"<font color=\"#EC7063\"> Loops<\/font>\n\nPrints that\trecurve\tback on\tthemselves to form a loop shape. Divided into radial loops (pointing\ttoward the radius bone, or thumb) and ulnar\tloops (pointing\ttoward the ulna\tbone,or\tpinky),loops\taccount\tfor\tapproximately 60 percent of\tpattern\ttypes.\n\n<font color=\"#EC7063\"> Whorls<\/font> \n\nForm circular or spiral\tpatterns, like tiny\twhirlpools. There are four groups of whorls: plain\t(concentric\tcircles),central pocket\tloop (a loop with a\twhorl at the end), double loop(two loops\tthat create\tan S-like pattern)and accidental loop (irregular shaped). Whorls make up about 35 percent of pattern types.\n\n\n<font color=\"#EC7063\"> Arches<\/font>\n\nCreate a wave-like pattern and include plain arches\tand\ttented arches. Tented arches rise to a sharper point than plain\tarches.\tArches make up about five percent of all pattern types.\n\nhttp:\/\/www.forensicsciencesimplified.org\/prints\/Fingerprints.pdf","1957ca2c":"PLAIN WHORL","a378e9b6":"Below: IndexError: index 1000 is out of bounds for axis 1 with size 296. So change to 295.","d25f1756":"RADIAL LOOP","d04bc220":"Below: IndexError: index 600 is out of bounds for axis 0 with size 560.That's why I wrote 550. "}}