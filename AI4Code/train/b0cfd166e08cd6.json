{"cell_type":{"dda3dd1a":"code","ee558345":"code","909ff956":"code","81c92095":"code","1506b854":"code","7c4943af":"code","8a859700":"code","c12679f4":"code","bf57b7b0":"code","a6cba595":"code","4c6f36a6":"code","90d59e18":"code","6b03091a":"code","1e15ec74":"code","10cd5732":"code","f573d817":"code","e4e66d25":"code","697878ec":"code","03dd8cf6":"code","9998ef5d":"code","ef6ef5e1":"code","dbec8c2b":"code","1a352536":"code","090444a9":"code","990fb538":"code","69bd1ee6":"code","34d24f2d":"code","303f6b76":"code","321801fc":"code","9f2e680a":"code","2a1cbbb6":"code","7e6f4655":"code","68e38f81":"code","486ffb15":"code","d87dbbb1":"code","1828261f":"markdown","ccbe1eb2":"markdown","5e583ff8":"markdown","af6da20c":"markdown","b9d26735":"markdown","0d4d27ad":"markdown","f47d1afb":"markdown","7421a2b2":"markdown","8b0943a9":"markdown","78310352":"markdown","1fb740bf":"markdown","0eeacc62":"markdown","a6cf9148":"markdown","6520aab6":"markdown","047d0ee3":"markdown","a37b0e77":"markdown","54e58249":"markdown","e88f4521":"markdown"},"source":{"dda3dd1a":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nimport matplotlib.patheffects as path_effects\nfrom matplotlib.patches import ConnectionPatch\nimport numpy as np","ee558345":"data = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","909ff956":"data.head(2)","81c92095":"data.tail(2)","1506b854":"data.info()","7c4943af":"data.isna().sum()","8a859700":"data.nunique()","c12679f4":"data_processed= data.copy()","bf57b7b0":"data_processed.loc[data_processed.country.isna(), 'country'] = 'TBD'\ndata_processed.loc[data_processed.cast.isna(), 'cast'] = 'TBD'\ndata_processed.loc[data_processed.director.isna(), 'director'] = 'TBD'\ndata_processed.loc[data_processed.rating.isna(), 'rating'] = 'TBD'\ndata_processed.loc[data_processed.date_added.isna(), 'date_added'] = 'January 1,0000'","a6cba595":"data_processed.info()","4c6f36a6":"data_processed.cast = data_processed.cast.apply(lambda x: x.split(', '))\ndata_processed.country = data_processed.country.apply(lambda x: x.split(', '))\ndata_processed.director = data_processed.director.apply(lambda x: x.split(', '))\ndata_processed.listed_in = data_processed.listed_in.apply(lambda x: x.split(', '))","90d59e18":"data_processed.sample(5)","6b03091a":"data_processed.loc[data_processed.rating == 'TV-Y7-FV', 'rating'] = \"Children\"\ndata_processed.loc[data_processed.rating == 'TV-Y7', 'rating'] = \"Children\"\ndata_processed.loc[data_processed.rating == 'TV-G', 'rating'] = \"Children\"\ndata_processed.loc[data_processed.rating == 'TV-Y', 'rating'] = \"Children\"\ndata_processed.loc[data_processed.rating == 'TV-PG', 'rating'] = \"Older Children\"\ndata_processed.loc[data_processed.rating == 'TV-14', 'rating'] = \"Older Children\"\ndata_processed.loc[data_processed.rating == 'PG-13', 'rating'] = \"Older Children\"\ndata_processed.loc[data_processed.rating == 'PG', 'rating'] = \"Older Children\"\ndata_processed.loc[data_processed.rating == 'G', 'rating'] = \"Children\"\ndata_processed.loc[data_processed.rating == 'TV-MA', 'rating'] = \"Adult\"\ndata_processed.loc[data_processed.rating == 'R', 'rating'] = \"Adult\"\ndata_processed.loc[data_processed.rating == 'NC-17', 'rating'] = \"Adult\"\ndata_processed.loc[data_processed.rating == 'NR', 'rating'] = \"Not Rated\/No Data\"\ndata_processed.loc[data_processed.rating == 'UR', 'rating'] = \"Not Rated\/No Data\"\ndata_processed.loc[data_processed.rating == 'TBD', 'rating'] = \"Not Rated\/No Data\"","1e15ec74":"data_processed.rename(columns={'rating': 'content'},inplace=True)","10cd5732":"data_processed.columns","f573d817":"data_processed.info()","e4e66d25":"data_processed.drop(columns='show_id', inplace=True)","697878ec":"data_processed.type = data_processed.type.astype('category')\ndata_processed.date_added = data_processed.date_added.astype('datetime64')\ndata_processed.release_year = data_processed.release_year.astype('category')\ndata_processed.content = data_processed.content.astype('category')","03dd8cf6":"data_processed.info()","9998ef5d":"eastern_Countries = ['India','Japan', 'South Korea', 'China', 'Hong Kong', 'Turkey', 'Taiwan']\n\nlist_of_countries = data_processed.country.tolist()\nlist_of_countries_flat = [x for s in list_of_countries for x in s if x != 'TBD' and x not in eastern_Countries]\nCounter(list_of_countries_flat).most_common(10)\n\ngraph = pd.DataFrame(Counter(list_of_countries_flat).most_common(10), columns=['Country','Count'])","ef6ef5e1":"fig, ax1 = plt.subplots()\nfig.set_size_inches(12,8)\n\ndict_rc = rc={'axes.labelcolor':'#E50914','figure.facecolor': 'red', 'axes.facecolor': 'red', \n              'text.color': 'white','ytick.color': 'white','xtick.color': 'white','axes.labelcolor': 'white', \n              'axes.spines.left': True,'axes.spines.bottom': False,'axes.spines.right': False,'axes.spines.top': False,\n              'grid.linestyle': '-', 'grid.color': 'white'}\n\ntext = fig.text(0.5, .95, 'Top 10 Western Countries - Most Content on NETFLIX', color='white',\n                          ha='center', va='center', size=35, weight='bold')\ntext.set_path_effects([\n                          path_effects.PathPatchEffect(offset=(2, -2.5),facecolor='black', edgecolor='black'),\n                          path_effects.PathPatchEffect(edgecolor='black',facecolor='white', linewidth=2)\n                      ])\n\nsns.set(font_scale=2, rc=dict_rc)\nax1 = sns.barplot(data=graph, y='Country',x='Count', order=graph.Country ,edgecolor='black',linewidth=3, palette='gray_r')  \nax1.set(xlabel='Content Count', ylabel='')\nfor k in ax1.patches:\n    x = k.get_x()\n    y = k.get_y()\n    width_of_bar = k.get_width()\n    height_of_bar = k.get_height()\n    ax1.annotate(int(width_of_bar), (width_of_bar + 10, y + height_of_bar \/ 2), fontsize=15, va='center',weight='bold')\n    \nplt.show()","dbec8c2b":"def get_labels_data(country = 'ALL'):\n    if country != 'ALL':\n        content = data_processed[data_processed.country.apply(lambda x: country in x)]\n    else:\n        content = data_processed\n    \n    \n    movie_content = content.loc[content.type == 'Movie','content'].value_counts()\n    tv_content = content.loc[content.type == 'TV Show', 'content'].value_counts()\n    \n    movie_tv_counts = content.type.value_counts()\n    movie_tv_label = ['Movie', 'TV Show']\n    \n    movie_rating_data = movie_content.values.tolist()\n    movie_rating_label = movie_content.index.tolist()\n    \n    tv_rating_data = tv_content.values.tolist()\n    tv_rating_label = tv_content.index.tolist()\n    \n    return (movie_rating_label, movie_rating_data,\n            movie_tv_label, movie_tv_counts, \n            tv_rating_label, tv_rating_data)","1a352536":"(movie_rating_label, movie_rating_data,\nmovie_tv_label, movie_tv_counts,\ntv_rating_label, tv_rating_data) = get_labels_data()\n\n(usa_movie_rating_label, usa_movie_rating_data,\n usa_movie_tv_label, usa_movie_tv_counts,\n usa_tv_rating_label, usa_tv_rating_data) = get_labels_data('United States')\n\n(Spain_movie_rating_label, Spain_movie_rating_data,\n Spain_movie_tv_label, Spain_movie_tv_counts,\n Spain_tv_rating_label, Spain_tv_rating_data) = get_labels_data('Spain')\n\n(UK_movie_rating_label, UK_movie_rating_data,\n UK_movie_tv_label, UK_movie_tv_counts,\n UK_tv_rating_label, UK_tv_rating_data) = get_labels_data('United Kingdom')\n\n(Canada_movie_rating_label, Canada_movie_rating_data,\n Canada_movie_tv_label, Canada_movie_tv_counts,\n Canada_tv_rating_label, Canada_tv_rating_data) = get_labels_data('Canada')\n\n(France_movie_rating_label, France_movie_rating_data,\n France_movie_tv_label, France_movie_tv_counts,\n France_tv_rating_label, France_tv_rating_data) = get_labels_data('France')","090444a9":"fig, ax = plt.subplots(6, 3)\nfig.set_facecolor('red')\nfig.set_size_inches(12,21)\n\ntext = fig.text(.5, .92, 'Breakdown of Types of Content by Intended Audience', color='white',\n                          ha='center', va='center', size=32, weight='bold')\n\ntext.set_path_effects([path_effects.PathPatchEffect(offset=(2, -2.5),facecolor='black', edgecolor='black'),\n                    path_effects.PathPatchEffect(edgecolor='black',facecolor='white', linewidth=2)])\n\ntext = fig.text(.5, .88, 'Movie Audience     Content Type     TV Audience', color='white',\n                          ha='center', va='center', size=30, weight='bold')\n\ntext.set_path_effects([path_effects.PathPatchEffect(offset=(2, -2.5),facecolor='black', edgecolor='black'),\n                    path_effects.PathPatchEffect(edgecolor='black',facecolor='white', linewidth=2)])\n\ncircle_rad = 1\nfont_size_labels = 8\n\ndict_labels = { 'All': { 'ax1': [movie_rating_label, tv_rating_data, 280],\n                    'ax2': [movie_tv_label, movie_tv_counts, 70], \n                    'ax3': [tv_rating_label, tv_rating_data, 260]},\n    \n                'USA': { 'ax4': [usa_movie_rating_label, usa_movie_rating_data,100], \n                'ax5': [usa_movie_tv_label, usa_movie_tv_counts, 40], \n                'ax6': [usa_tv_rating_label, usa_tv_rating_data, 280]},\n    \n                'UK' : {'ax10': [UK_movie_rating_label, UK_movie_rating_data, 100], \n                'ax11': [UK_movie_tv_label, UK_movie_tv_counts, 120],\n                'ax12': [UK_tv_rating_label, UK_tv_rating_data, 280]},\n    \n                'CANADA' : {'ax13': [Canada_movie_rating_label, Canada_movie_rating_data, 110],\n                'ax14': [Canada_movie_tv_label, Canada_movie_tv_counts, 50], \n                'ax15': [Canada_tv_rating_label, Canada_tv_rating_data, 280]},\n    \n                'FRANCE' : {'ax16': [France_movie_rating_label, France_movie_rating_data, 100], \n                'ax17': [France_movie_tv_label, France_movie_tv_counts, 90],\n                'ax18': [France_tv_rating_label, France_tv_rating_data, 280]},\n               \n                'SPAIN': {'ax7': [Spain_movie_rating_label, Spain_movie_rating_data, 100],\n                'ax8': [Spain_movie_tv_label, Spain_movie_tv_counts, 40], \n                'ax9': [Spain_tv_rating_label, Spain_tv_rating_data, 280]}}\n\nbbox_props = dict(fc=\"red\", ec=\"red\", lw=5)\nkw = dict(arrowprops=dict(arrowstyle=\"-\", color='black', lw=1),\n          bbox=bbox_props, zorder=0, va=\"center\")\n\nfor x,z in zip(range(0, 6), dict_labels.keys()):\n    text = ax[x,0].text(-2.5, 0, z, color='white',\n                        ha='center', va='center', size=28, weight='bold',rotation=90)\n\n    text.set_path_effects([path_effects.PathPatchEffect(offset=(2, -2.5),facecolor='black', edgecolor='black'),\n                        path_effects.PathPatchEffect(edgecolor='black',facecolor='white', linewidth=2)])\n    \n    for y,w in zip(range(0, 3),dict_labels[z].keys()):\n        patches,texts,autopct = ax[x,y].pie(\n                                dict_labels[z][w][1],\n                                startangle=dict_labels[z][w][2],\n                                autopct='%1.1f%%',\n                                shadow=True, \n                                colors = ['white'],\n                                pctdistance=.7,\n                                labeldistance=1.1, \n                                wedgeprops={'width': .65, 'antialiased': True, 'edgecolor': 'black', 'linewidth':3},\n                                textprops={'color':'black','fontsize':font_size_labels, 'weight': 'bold'},\n                                radius = circle_rad)\n        plt.setp(autopct, color='black', fontsize=10, weight='bold', va='center')\n        ax[x,y].set_aspect('equal')\n        \n        for i, p in enumerate(patches):\n            ang = (p.theta2 - p.theta1)\/2. + p.theta1\n            y2 = np.sin(np.deg2rad(ang))\n            x2 = np.cos(np.deg2rad(ang))\n            horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x2))]\n            connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n            kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n            ax[x,y].annotate(dict_labels[z][w][0][i], xy=(x2, y2), xytext=(1.35*np.sign(x2), 1.4*y2),\n                        horizontalalignment=horizontalalignment,fontsize='15', weight='bold',**kw)\n        \n\n\nplt.subplots_adjust(hspace=0, wspace=.8)\n\nplt.show()","990fb538":"def top_5_actors_country(country):\n    country_cast_list_of_lists_Movie = data_processed.loc[(data_processed.country.apply(lambda x: country in x)) & (data_processed.type == 'Movie'),'cast']\n    flattened_list_Movie_Actors = [x for i in country_cast_list_of_lists_Movie for x in i if x != 'TBD']\n    \n    country_cast_list_of_lists_TV = data_processed.loc[(data_processed.country.apply(lambda x: country in x)) & (data_processed.type == 'TV Show'),'cast']\n    flattened_list_TV_Actors = [x for i in country_cast_list_of_lists_TV for x in i if x != 'TBD']\n    \n    \n    \n    return [pd.DataFrame(Counter(flattened_list_Movie_Actors).most_common(5), columns= ['Actor', 'Count']),\n           pd.DataFrame(Counter(flattened_list_TV_Actors).most_common(5), columns= ['Actor', 'Count'])]","69bd1ee6":"top_5 = { 'USA': top_5_actors_country('United States'), 'UK': top_5_actors_country('United Kingdom'),  \n         'Canada': top_5_actors_country('Canada'),'France' : top_5_actors_country('France'),'Spain': top_5_actors_country('Spain')}\n","34d24f2d":"fig, ax = plt.subplots(5,2,sharex=True)\nfig.set_size_inches(12,14)\n\n\ndict_rc = rc={'axes.labelcolor':'#E50914','figure.facecolor': 'red', 'axes.facecolor': 'red', \n              'text.color': 'white','ytick.color': 'white','xtick.color': 'white','axes.labelcolor': 'white', \n              'axes.spines.left': True,'axes.spines.bottom': False,'axes.spines.right': False,'axes.spines.top': False,\n              'grid.linestyle': '-', 'grid.color': 'white'}\n\nsns.set(font_scale=1.3, rc=dict_rc)\n\ntext = fig.text(0.43, .97, 'Top 5 Actors For Top 5 Countries with the Most Content', color='white',\n                              ha='center', va='center', size=30, weight='bold')\ntext.set_path_effects([\n                              path_effects.PathPatchEffect(offset=(2, -2.5),facecolor='black', edgecolor='black'),\n                              path_effects.PathPatchEffect(edgecolor='black',facecolor='white', linewidth=2)\n                          ])\n\n\ntext = fig.text(0.5, .93, 'Movies                                            TV Shows', color='white',\n                              ha='center', va='center', size=25, weight='bold')\ntext.set_path_effects([\n                        path_effects.PathPatchEffect(offset=(2, -2.5),facecolor='black', edgecolor='black'),\n                        path_effects.PathPatchEffect(edgecolor='black',facecolor='white', linewidth=2)\n                     ])\n        \n\nfor x,i in zip(top_5.keys(), range(0,len(top_5))):\n    for z,w in zip(top_5[x],range(0,2)):\n        \n\n        sns.barplot(data=z, y='Actor',x='Count', order=z.Actor ,edgecolor='black',linewidth=2, palette='gray_r',ax=ax[i,w])  \n        ax[i,w].set(xlabel='Content Count', ylabel='',title=x)\n        ax[i,w].tick_params(labelbottom=True)\n\n        for k in ax[i, w].patches:\n            x2 = k.get_x()\n            y2 = k.get_y()\n            width_of_bar = k.get_width()\n            height_of_bar = k.get_height()\n            ax[i,w].annotate(int(width_of_bar), (width_of_bar+.1, y2 + height_of_bar \/ 2), fontsize=10, va='center',weight='bold')\n\n        \n\nplt.subplots_adjust(wspace=.9,hspace=.8)\nplt.show()","303f6b76":"df_duration_genre = data_processed.loc[data_processed.type == 'Movie',['duration', 'listed_in']]\ndf_duration_genre.duration = df_duration_genre.duration.apply(lambda x: x.replace('min',''))\n\ndf_duration_genre = df_duration_genre.explode('listed_in').reset_index(drop=True)\ndf_duration_genre.duration = df_duration_genre.duration.astype('int64')\n\ndf_duration_genre.drop(df_duration_genre.loc[df_duration_genre.listed_in == 'Movies'].index, inplace=True)\n\norder= df_duration_genre.groupby('listed_in').describe().sort_values(('duration', '75%'), ascending=False).index.tolist()\n\ndf_duration_genre.groupby('listed_in').describe().sort_values(('duration', '75%'), ascending=False)","321801fc":"fig, ax1 = plt.subplots()\nfig.set_size_inches(12,15)\ndict_rc = rc={'axes.labelcolor':'#E50914','figure.facecolor': 'red', 'axes.facecolor': 'red', \n              'text.color': 'white','ytick.color': 'white','xtick.color': 'white','axes.labelcolor': 'white', \n              'axes.spines.left': False,'axes.spines.bottom': False,'axes.spines.right': False,'axes.spines.top': False,\n              'grid.linestyle': '-', 'grid.color': 'white'}\n\nsns.set(font_scale=2, rc=dict_rc)\n\ntext = fig.text(0.35, .93, 'Movie Durations by Genre', color='white',\n                              ha='center', va='center', size=40, weight='bold')\ntext.set_path_effects([\n                              path_effects.PathPatchEffect(offset=(2, -2.5),facecolor='black', edgecolor='black'),\n                              path_effects.PathPatchEffect(edgecolor='black',facecolor='white', linewidth=2)\n                          ])\n\n\nax1 = sns.swarmplot(data = df_duration_genre, y='listed_in', x = 'duration', order=order,zorder=.5, alpha=.9, color='white')\nax2 = sns.boxplot(data = df_duration_genre, y='listed_in', x = 'duration', color='black', linewidth=3,order=order,showfliers=False,boxprops={'facecolor': 'None'})\n\nax1.set(ylabel='',xlabel= 'Duration (mins)')\nax2.set(ylabel='',xlabel= '')\n\nplt.show()","9f2e680a":"df_duration_genre = data_processed.loc[data_processed.type == 'TV Show',['duration', 'listed_in']]\ndf_duration_genre.duration = df_duration_genre.duration.apply(lambda x: x.replace('Seasons',''))\ndf_duration_genre.duration = df_duration_genre.duration.apply(lambda x: x.replace('Season',''))\n\n\n\ndf_duration_genre = df_duration_genre.explode('listed_in').reset_index(drop=True)\ndf_duration_genre.duration = df_duration_genre.duration.astype('int64')\n\n\n\ndf_duration_genre.drop(df_duration_genre.loc[df_duration_genre.listed_in == 'TV Shows'].index, inplace=True)","2a1cbbb6":"fig, ax1 = plt.subplots()\nfig.set_size_inches(12,8)\ndict_rc = rc={'axes.labelcolor':'#E50914','figure.facecolor': 'red', 'axes.facecolor': 'red', \n              'text.color': 'white','ytick.color': 'white','xtick.color': 'white','axes.labelcolor': 'white', \n              'axes.spines.left': False,'axes.spines.bottom': False,'axes.spines.right': False,'axes.spines.top': False,\n              'grid.linestyle': '-', 'grid.color': 'white'}\n\nsns.set(font_scale=1.6, rc=dict_rc)\n\ntext = fig.text(0.5, .95, 'Number of Seasons - TV Shows', color='white',\n                              ha='center', va='center', size=40, weight='bold')\ntext.set_path_effects([\n                              path_effects.PathPatchEffect(offset=(2, -2.5),facecolor='black', edgecolor='black'),\n                              path_effects.PathPatchEffect(edgecolor='black',facecolor='white', linewidth=2)\n                          ])\n\n\nax1 = sns.countplot(y=df_duration_genre.duration, palette='Greys_r')\nax1.set(ylabel='Season #',xlabel= 'Number of shows')\n\n#ax.set(ylabel='',xlabel= 'Season')\n#ax2.set(ylabel='',xlabel= '')\n\nplt.show()","7e6f4655":"df_duration_genre = data_processed.loc[data_processed.type == 'TV Show',['duration', 'listed_in']]\ndf_duration_genre.duration = df_duration_genre.duration.apply(lambda x: x.replace('Seasons',''))\ndf_duration_genre.duration = df_duration_genre.duration.apply(lambda x: x.replace('Season',''))\n\n\n\ndf_duration_genre = df_duration_genre.explode('listed_in').reset_index(drop=True)\ndf_duration_genre.duration = df_duration_genre.duration.astype('int64')\n\n\n\ndf_duration_genre.drop(df_duration_genre.loc[df_duration_genre.listed_in == 'TV Shows'].index, inplace=True)\n\n\ndf_duration_genre.groupby('listed_in').duration.value_counts(normalize=True).unstack().sort_values(list(range(15,0,-1)), ascending=False)\n","68e38f81":"index = df_duration_genre.groupby('listed_in').duration.value_counts(normalize=True).unstack().sort_values(list(range(15,0,-1)), ascending=False).head(5).index.tolist()","486ffb15":"top_5_genres_TV = df_duration_genre.loc[df_duration_genre.listed_in.apply(lambda x: any(g in x for g in index))]\ntop_5_genres_TV = top_5_genres_TV.groupby('listed_in').duration.value_counts(normalize=True).unstack().reset_index().melt(id_vars = 'listed_in')","d87dbbb1":"fig, ax1 = plt.subplots()\nfig.set_size_inches(12,8)\ndict_rc = rc={'axes.labelcolor':'#E50914','figure.facecolor': 'red', 'axes.facecolor': 'red', \n              'text.color': 'white','ytick.color': 'white','xtick.color': 'white','axes.labelcolor': 'white', \n              'axes.spines.left': False,'axes.spines.bottom': False,'axes.spines.right': False,'axes.spines.top': False,\n              'grid.linestyle': '-', 'grid.color': 'white'}\n\nsns.set(font_scale=1.6, rc=dict_rc)\n\ntext = fig.text(0.5, .95, 'Number of Seasons - TV Shows', color='white',\n                              ha='center', va='center', size=40, weight='bold')\ntext.set_path_effects([\n                              path_effects.PathPatchEffect(offset=(2, -2.5),facecolor='black', edgecolor='black'),\n                              path_effects.PathPatchEffect(edgecolor='black',facecolor='white', linewidth=2)\n                          ])\n\n\nax1 = sns.lineplot(data = top_5_genres_TV, x ='duration', y='value',hue='listed_in', palette='Greys_r', lw=3)\n\nax1.set(ylabel='Season #',xlabel= 'Number of shows')\n\nplt.xticks(range(1,15))\n#ax.set(ylabel='',xlabel= 'Season')\n#ax2.set(ylabel='',xlabel= '')\n\nplt.show()","1828261f":"# ** Count of Number of Seasons of TV Shows**","ccbe1eb2":"Shrunk by over 200KB!","5e583ff8":"1. The column director, cast, country, and listed_in contain entries in an entire string separated by commas. If I work with this format directly every time I would need to do something similar to counting the number of times a certain value shows up, I would need to split each entry by commas and start collecting instances of the value. It would be better to skip this step ahead of time and convert the entries in these columns into a list instead.\n\n2. There are quite a few NA values. Since I do not want to drop these rows, because they contain useful information in other columns, I will fill in the NA values with placeholder data, such as 'TBD' (to be decided) and for the dates, I will put in a fake year of '1\/1\/0000'\n\n3. The column show_id is a bit redundant because of the index. The show_id column does not give any more information than the index, so this column can be dropped.\n\n4. The columns type, release_year, and rating can be turned into categorical columns because of the limited amount of unique values they contain.\n\n5. There are a limited number of unique ratings, but these ratings do not say much directly. It would be more useful to relabel these ratings into a label that says something about the intended audience of the content. This would cut down the ratings into just a few categories: Adult, Children, Older Children, and Unrated\/No Data.","af6da20c":"## Making columns easier to search for values","b9d26735":"# **Importing Libraries\/Data**","0d4d27ad":"# ** Breakdown of Types of Content by Intended Audience**","f47d1afb":"## Shrinking Dataframe","7421a2b2":"***","8b0943a9":"# ** Running Time by Movie Genres**","78310352":"## Simplifying Content Rating","1fb740bf":"# **Data Inspection**","0eeacc62":"# Data Tidying","a6cf9148":"# ** Top 10 Countries with the most content on Netflix**","6520aab6":"## Notable Observations","047d0ee3":"# ** Top 5 Actors For Top 5 Countries with the Most Content - TV Shows\/Movies**","a37b0e77":"## Handling N\/A Values","54e58249":"***","e88f4521":"# ** A Closer Look at the most successful TV Genres (Most Seasons)**"}}