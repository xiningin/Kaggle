{"cell_type":{"6d4ad8eb":"code","7566c689":"code","b73d1d8b":"code","55e97be9":"code","76cac3a7":"code","8f649ee0":"code","b0e18852":"code","f7ada95f":"code","7f349dfd":"code","5940b6dc":"code","e7643688":"code","8c39526b":"code","ab1a3f90":"code","9974a7a7":"code","c1ee970e":"code","3dcd7fdf":"code","bbae4e07":"code","7a79b2de":"code","2abe11d2":"code","09abde9f":"code","571c3396":"code","bd75622b":"code","2965e263":"code","0723f24f":"code","dbb4d149":"code","cc1e856d":"code","72122d8d":"code","06f95ca0":"code","671c41f3":"code","a15ea51c":"code","e717c7b4":"code","611301ae":"code","904b38bd":"code","00c22ccc":"code","7fc25fda":"code","a3308cd3":"code","841d28d8":"code","67d4a960":"code","81d9979d":"code","898c9235":"code","07696361":"code","ef9ad59a":"code","fa10e45b":"markdown","2c3bbe7e":"markdown","4f7161e9":"markdown","389fee83":"markdown","f68acbfc":"markdown","bdc7eb48":"markdown","3c2829ea":"markdown","911cba01":"markdown","8a1ed23e":"markdown"},"source":{"6d4ad8eb":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","7566c689":"data00 = pd.read_csv(\"..\/input\/quickest-electric-cars-ev-database\/Quickestelectriccars-EVDatabase.csv\")\ndata00","b73d1d8b":"print(data00.columns.tolist())","55e97be9":"data0=data00.fillna('0')","76cac3a7":"PriceinUK=[]\nfor item in data0['PriceinUK']:\n    PriceinUK+=[int(item.replace('\u00a3','').replace(',',''))]\ndata0['PriceinUK']=PriceinUK","8f649ee0":"PriceinGermany=[]\nfor item in data0['PriceinGermany']:\n    PriceinGermany+=[int(item.replace('\u20ac','').replace(',',''))]\ndata0['PriceinGermany']=PriceinGermany","b0e18852":"FastChargeSpeed=[]\nfor item in data0['FastChargeSpeed']:\n    FastChargeSpeed+=[int(item.replace(' km\/h','').replace('-','0'))]\ndata0['FastChargeSpeed']=FastChargeSpeed","f7ada95f":"Efficiency=[]\nfor item in data0['Efficiency']:\n    Efficiency+=[int(item.replace(' Wh\/km',''))]\ndata0['Efficiency']=Efficiency","7f349dfd":"Range=[]\nfor item in data0['Range']:\n    Range+=[int(item.replace(' km',''))]\ndata0['Range']=Range","5940b6dc":"TopSpeed=[]\nfor item in data0['TopSpeed']:\n    TopSpeed+=[int(item.replace(' km\/h',''))]\ndata0['TopSpeed']=TopSpeed","e7643688":"Acceleration=[]\nfor item in data0['Acceleration']:\n    Acceleration+=[float(item.replace(' sec',''))]\ndata0['Acceleration']=Acceleration","8c39526b":"Subtitle=[]\nfor item in data0['Subtitle']:\n    Subtitle+=[float(item.replace('Battery Electric Vehicle | ','').replace(' kWh','').replace('      ',''))]\ndata0['Subtitle']=Subtitle","ab1a3f90":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","9974a7a7":"data1=df\ndata1","c1ee970e":"data1.columns","3dcd7fdf":"data1.iloc[:,:].hist(figsize=(15,15))\nplt.show()","bbae4e07":"datap=data1[['Acceleration','TopSpeed',]]\nsns.pairplot(datap)\nplt.show()","7a79b2de":"data2a=data00[['Name','TopSpeed']]\ndata2a['TopSpeed(km\/h)']=data1['TopSpeed']\ndata2a=data2a.groupby('Name',as_index=False).max()\ndata2a=data2a.sort_values('TopSpeed(km\/h)',ascending=False)\ndata2a","2abe11d2":"fig = px.bar(data2a[0:40], x='Name', y='TopSpeed(km\/h)',title=\"Top Speed Ranknig of Electric Cars\")\nfig.show()","09abde9f":"data2c=data00[['Name','Acceleration']]\ndata2c['Acceleration(sec)']=data1['Acceleration']\ndata2c=data2c.groupby('Name',as_index=False).max()\ndata2c=data2c.sort_values('Acceleration(sec)',ascending=False)\ndata2c","571c3396":"fig = px.bar(data2c[0:40], x='Name', y='Acceleration(sec)',title=\"Acceleration Ranknig of Electric Cars\")\nfig.show()","bd75622b":"target=['Acceleration']\n\ndrop=[]\nfor i,item in enumerate(data1['Acceleration']):\n    if item ==0:\n        drop+=[i]\nprint(drop)\ndata1=data1.drop(index=data1.index[drop]).reset_index(drop=True)\n\ndataY=data1[target[0]]\ndataX=data1.drop(target,axis=1)","2965e263":"print(dataY[0:5].T)\nprint()\nprint(dataX[0:5].T)","0723f24f":"n=len(dataX)\nprint(n)\nN=[]\nfor i in range(n):\n    N+=[i]\nrandom.seed(2021)\nrandom.shuffle(N)","dbb4d149":"trainX=dataX.loc[N[0:(n\/\/4)*3]]\ntrainY=dataY.loc[N[0:(n\/\/4)*3]]\ntestX=dataX.loc[N[(n\/\/4)*3:]]\ntestY=dataY.loc[N[(n\/\/4)*3:]]","cc1e856d":"df_columns = list(dataX.columns)\nprint(df_columns)","72122d8d":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","06f95ca0":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","671c41f3":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","a15ea51c":"train_feat_df = to_feature(trainX)\ntest_feat_df = to_feature(testX)","e717c7b4":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","611301ae":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","904b38bd":"y = trainY\nprint(y.shape)\nprint(type(y))","00c22ccc":"ydf=pd.DataFrame(y)\nydf","7fc25fda":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_ylabel('Predicted Train '+target[i],fontsize=12)\n    ax.set_xlabel('Actual Train '+target[i],fontsize=12)\n    ax.scatter(y,oof)\n","a3308cd3":"print(target)","841d28d8":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","67d4a960":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n","81d9979d":"pred0 = np.array([model.predict(test_feat_df.values) for model in models])\nPRED = pred0[4]\nPRED[0:5]","898c9235":"ANS=np.array(testY)\nANS[0:5]","07696361":"fig, ax = plt.subplots(figsize=(8,8))\nsns.histplot(PRED, label='Predicted Test '+target[0], ax=ax, color='black',bins=30)\nsns.histplot(oof, label='Predict Train '+target[0], ax=ax, color='C1',bins=30)\nax.legend()\nax.grid()","ef9ad59a":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(target[0],fontsize=20)\nax.set_xlabel('Actual Test '+target[0],fontsize=12)\nax.set_ylabel('Predicted Test '+target[0],fontsize=12)\nax.scatter(ANS,PRED)","fa10e45b":"# Target setting","2c3bbe7e":"![https:\/\/cdn.motor1.com\/images\/mgl\/J0yrA\/s3\/tesla-roadster-live-from-grand-basel.webp](https:\/\/cdn.motor1.com\/images\/mgl\/J0yrA\/s3\/tesla-roadster-live-from-grand-basel.webp)","4f7161e9":"## **Tesla Roadster**","389fee83":"# Data preparation","f68acbfc":"# Model","bdc7eb48":"## **Renault Kangoo Maxi ZE 33**","3c2829ea":"# Visualize Importance","911cba01":"![https:\/\/roadcampers.pt\/wp-content\/uploads\/2019\/11\/renault_kangoo_maxi.png](https:\/\/roadcampers.pt\/wp-content\/uploads\/2019\/11\/renault_kangoo_maxi.png)","8a1ed23e":"# Ranking on Driving Performance"}}