{"cell_type":{"a0ebd30c":"code","41a11522":"code","59a1b96f":"code","8579406d":"code","9965afc7":"code","160c95e6":"code","ed16f765":"code","8e1c2a50":"code","570e4132":"markdown","69ab2f84":"markdown"},"source":{"a0ebd30c":"from kaggle_environments import make, evaluate\n\n# create game environment\n# set debug =True to see error\nenv = make('connectx', debug=True)\n\n# list of available default agents\nprint(list(env.agents))\n","41a11522":"# two random agents play one game round\nenv.run(['random','random'])\n\n# show the game\nenv.render(mode=\"ipython\")","59a1b96f":"import random\nimport numpy as np","8579406d":"# first agent\n# selects random valid column\ndef agent_random(obs, config):\n    valid_moves = [ col for col in range(config.columns) if obs.board[col]==0 ]\n    return random.choice(valid_moves)\n\n# second agent\n# select middle column\ndef agent_middle(obs, config):\n    return config.columns\/\/2\n\n# third agent\n# select leftmost valid column\ndef agent_leftmost(obs, config):\n    valid_moves = [ col for col in range(config.columns) if obs.board[col]==0 ]\n    return valid_moves[0]\n    ","9965afc7":"# agents play one game round\nenv.run([agent_leftmost, agent_random])\n\nenv.render(mode=\"ipython\")","160c95e6":"# To learn more about the evaluate() function, check out the documentation here: (insert link here)\ndef get_win_percentages(agent1, agent2, n_rounds=100):\n    # Use default Connect Four setup\n    config = {'rows': 6, 'columns': 7, 'inarow': 4}\n    # Agent 1 goes first (roughly) half the time          \n    outcomes = evaluate(\"connectx\", [agent1, agent2], config, [], n_rounds\/\/2)\n    # Agent 2 goes first (roughly) half the time      \n    outcomes += [[b,a] for [a,b] in evaluate(\"connectx\", [agent2, agent1], config, [], n_rounds-n_rounds\/\/2)]\n    print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,0])\/len(outcomes), 2))\n    print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([0,1])\/len(outcomes), 2))\n    print(\"Number of Invalid Plays by Agent 1:\", outcomes.count([None, 0.5]))\n    print(\"Number of Invalid Plays by Agent 2:\", outcomes.count([0.5, None]))\n    print(\"Number of Draws (in {} game rounds):\".format(n_rounds), outcomes.count([0.5, 0.5]))","ed16f765":"get_win_percentages(agent1=agent_middle, agent2=agent_random)","8e1c2a50":"get_win_percentages(agent1=agent_leftmost, agent2=agent_random)","570e4132":"Evaluating agent","69ab2f84":"Defining agents"}}