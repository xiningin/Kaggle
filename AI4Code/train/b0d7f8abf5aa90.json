{"cell_type":{"150856a8":"code","c8c14e30":"code","69e317f6":"code","9e93d4d9":"code","bada0a99":"code","112b1aea":"code","bf235052":"code","a333bb00":"code","e0b62a1c":"code","c0e72b19":"code","9d82ec65":"code","a5dac54b":"code","5a74da1e":"code","ef0430b2":"markdown"},"source":{"150856a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c8c14e30":"from sklearn.impute import SimpleImputer\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC","69e317f6":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nt_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","9e93d4d9":"df.head()","bada0a99":"# df['Age'] = df['Age'].apply(lambda x: x\/\/10)\ndf = df.drop(columns=['PassengerId', 'Name', 'SibSp', 'Parch','Ticket', 'Fare', 'Cabin', 'Age'])\ndf.replace('male', 0, inplace=True)\ndf.replace('female', 1, inplace=True)\ndf.replace('C', 0, inplace=True)\ndf.replace('S', 1, inplace=True)\ndf.replace('Q', 2, inplace=True)\ndf.dropna(inplace=True)\ndf.head()","112b1aea":"# my_imputer = SimpleImputer()\n# t_df['Age'] = my_imputer.fit_transform(np.array(t_df['Age']).reshape(-1,1))\n# t_df['Age'] = t_df['Age'].apply(lambda x: x\/\/10)\nffile = t_df['PassengerId']\nt_df = t_df.drop(columns=['PassengerId', 'Name', 'SibSp', 'Parch','Ticket', 'Fare', 'Cabin', 'Age'])\nt_df.replace('male', 0, inplace=True)\nt_df.replace('female', 1, inplace=True)\nt_df.replace('C', 0, inplace=True)\nt_df.replace('S', 1, inplace=True)\nt_df.replace('Q', 2, inplace=True)\nt_df.head()","bf235052":"X = df.drop(columns='Survived')\ny = df['Survived']\ntest_X = t_df\nX_train, X_test, y_train, y_test =  train_test_split(X, y, test_size=0.25, random_state=1)","a333bb00":"rf = RandomForestClassifier(random_state=0, n_estimators=1)\nrf.fit(X_train, y_train.ravel())\npred = rf.predict(X_test)\naccuracy_score(pred, y_test)","e0b62a1c":"knn = KNeighborsClassifier()\nknn.fit(X_train, y_train.ravel())\npred = knn.predict(X_test)\naccuracy_score(pred, y_test)","c0e72b19":"mlp = MLPClassifier(random_state=0)\nmlp.fit(X_train, y_train.ravel())\npred = mlp.predict(X_test)\naccuracy_score(pred, y_test)","9d82ec65":"rf.fit(X,np.array(y).ravel())\nvals = rf.predict(test_X)\nfile = pd.DataFrame({'PassengerId':ffile, 'Survived':vals})\nfile.to_csv('submission_rf.csv', index = False)\nfile.head()","a5dac54b":"mlp.fit(X,np.array(y).ravel())\nvals_m = mlp.predict(test_X)\nfile = pd.DataFrame({'PassengerId':ffile, 'Survived':vals_m})\nfile.to_csv('submission_mlp.csv', index = False)\nfile.head()","5a74da1e":"knn.fit(X,np.array(y).ravel())\nvals_k = knn.predict(test_X)\nfile = pd.DataFrame({'PassengerId':ffile, 'Survived':vals_k})\nfile.to_csv('submission_knn.csv', index = False)\nfile.head()","ef0430b2":"V2 - Added K-Neighbors Classifier\n\nV1 - Using Random Forest and MLP Classifier"}}