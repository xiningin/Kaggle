{"cell_type":{"8e2e7443":"code","98b3afc6":"code","8f8a14b4":"code","1d5e9b45":"code","0e7c6fe7":"code","d8f08bf9":"code","9291970d":"code","4b473dcd":"code","47b17e9d":"code","1ad5cf77":"code","582d80da":"code","99ac9ed5":"code","d1f04cbf":"code","87194291":"markdown","4ec2753d":"markdown","be5ffc50":"markdown","c3521f45":"markdown","523c05d4":"markdown","33f1c8bf":"markdown","1f55bae6":"markdown","b876c56f":"markdown","4927ad89":"markdown","adce7b22":"markdown","892dda17":"markdown","81d2b1ac":"markdown","c0571ea4":"markdown"},"source":{"8e2e7443":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","98b3afc6":"# Importing libraries\nimport keras\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom IPython.display import display, Image # for displaying images\n%matplotlib inline\nimport os","8f8a14b4":"# Getting labels of training data\nlabels = os.listdir('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/dataset\/train')\nlabels","1d5e9b45":"num = []\n\nfor i in labels:\n  path = '\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/dataset\/train\/{0}\/'.format(i)\n  folder_data = os.listdir(path)\n  k=0\n  print('\\n', i.upper())\n  for j in folder_data:\n    if(k<2):\n      display(Image(path+j))\n    k=k+1\n  num.append(k)\n  print('there are ', k,' images in ', i, 'class')","0e7c6fe7":"# Get images from files using ImageDataGenerator\n\nfrom keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(rescale=1.\/255, validation_split=0.2)\n\ntg = datagen.flow_from_directory(directory='\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/dataset\/train', target_size=(20,20), classes=labels, batch_size=25, subset='training')\nvg = datagen.flow_from_directory(directory='\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/dataset\/train', target_size=(20,20), classes=labels, batch_size=25, subset='validation')","d8f08bf9":"# building model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Conv2D(32, kernel_size=(3,3), activation='relu', input_shape = (20,20,3)))\nmodel.add(tf.keras.layers.MaxPool2D((2,2)))\n\nmodel.add(tf.keras.layers.Conv2D(64, kernel_size=(3,3), activation='relu'))\nmodel.add(tf.keras.layers.MaxPool2D((2,2)))\n\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\n\nmodel.add(tf.keras.layers.Dense(6, activation='softmax'))","9291970d":"# Compile model\nmodel.compile(optimizer='adam', loss = 'categorical_crossentropy', metrics=['accuracy'])","4b473dcd":"model.summary(line_length=None, positions=None, print_fn=None)","47b17e9d":"# Train model\nhistory = model.fit_generator(generator=tg, steps_per_epoch=len(tg), epochs=8, validation_data=vg, validation_steps=len(vg))","1ad5cf77":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(['Acc','Val'], loc = 'upper left')","582d80da":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend(['loss','Val'], loc = 'upper left')","99ac9ed5":"test_set = datagen.flow_from_directory(directory='\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test', target_size=(20,20), classes=labels, batch_size=25, subset='validation')","d1f04cbf":"prediction = model.predict(test_set)","87194291":"# STEP 4: SHOW IMPORTANT PLOTS","4ec2753d":"**Plot Loss over epochs plot. (Lower over time is better)**","be5ffc50":"**Import important libraries such as Tensorflow, Keras, Matlab plotting.**","c3521f45":"**Find labels of images.**","523c05d4":"**Get images according to their class (banana, apple, orange).**","33f1c8bf":"**Plot Accuracy over epochs plot. (Higher over time is better)**","1f55bae6":"# STEP 3: Build our Convolutional Neural Network","b876c56f":"**Compile model.**","4927ad89":"# STEP 1: INITIALIZATION","adce7b22":"**Summary of our model**","892dda17":"# STEP 2: Display Sample Images","81d2b1ac":"# STEP 5: Test our model","c0571ea4":"**Train our model.**"}}