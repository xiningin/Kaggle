{"cell_type":{"bcfcd252":"code","9b92a389":"code","3342b273":"code","3e9d06a0":"code","d8b31251":"code","372d4a71":"code","ef90b5b4":"code","9ac9ce75":"code","f5b921fa":"markdown","f2c4a773":"markdown"},"source":{"bcfcd252":"import gc\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom scipy.signal import savgol_filter\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.filterwarnings('ignore')","9b92a389":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')","3342b273":"train_df.head()","3e9d06a0":"test_df.head()","d8b31251":"features = [col for col in train_df.columns if col not in ['target', 'ID_code']]","372d4a71":"for c in features:\n    print(c)\n    train_df.sort_values(by=c,inplace=True)\n    train_df[c] = savgol_filter(train_df.target, window_length=5001,polyorder=1)\n    test_df.sort_values(by=c,inplace=True)\n    test_df[c] = savgol_filter(train_df.target, window_length=5001,polyorder=1)#Yes I am using the train set values!!!!!!","ef90b5b4":"import lightgbm as lgb\nrandom_state = 42\nparams = {\n    \"objective\" : \"binary\", \"metric\" : \"auc\", \"boosting\": 'gbdt', \"max_depth\" : -1, \"num_leaves\" : 13,\n    \"learning_rate\" : 0.01, \"bagging_freq\": 5, \"bagging_fraction\" : 0.4, \"feature_fraction\" : 0.05,\n    \"min_data_in_leaf\": 80, \"min_sum_hessian_in_leaf\": 10, \"tree_learner\": \"serial\", \"boost_from_average\": \"false\",\n    \"bagging_seed\" : random_state, \"verbosity\" : 1, \"seed\": random_state, \"n_jobs\":4\n}\nnoOfFolds = 5\nskf = StratifiedKFold(n_splits=noOfFolds, shuffle=True, random_state=random_state)\noof = np.zeros(train_df.shape[0])\npredictions = np.zeros(test_df.shape[0])\nval_aucs = []\n\n\nX_test = test_df[features].values\n\nfor fold, (trn_idx, val_idx) in enumerate(skf.split(train_df, train_df.target)):\n    X_train, y_train = train_df.iloc[trn_idx][features], train_df.iloc[trn_idx]['target']\n    X_valid, y_valid = train_df.iloc[val_idx][features], train_df.iloc[val_idx]['target']\n    \n      \n    trn_data = lgb.Dataset(X_train, label=y_train)\n    val_data = lgb.Dataset(X_valid, label=y_valid)\n    evals_result = {}\n    lgb_clf = lgb.train(params,trn_data,100000,valid_sets = [trn_data, val_data],early_stopping_rounds=1000,verbose_eval = 5000,evals_result=evals_result)\n    \n    p_valid = lgb_clf.predict(X_valid)\n    oof[val_idx] = p_valid\n    predictions += lgb_clf.predict(X_test)\/noOfFolds\n    val_score = roc_auc_score(y_valid, p_valid)\n    val_aucs.append(val_score)\n    \nroc_auc_score(train_df.target, oof)\n","9ac9ce75":"f = pd.DataFrame()\nf['ID_code'] = test_df.ID_code.values\nf['target'] = predictions\nf.to_csv('rankbadcompetition.csv',index=False)","f5b921fa":"Just trying to find features that drift ","f2c4a773":"Gets .891!! WTF!"}}