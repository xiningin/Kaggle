{"cell_type":{"3861111e":"code","1a1a4585":"code","0c590b58":"code","b88c5be5":"code","27f85a83":"code","095a1eca":"code","379d8d22":"code","12e4a064":"code","dfb5637b":"code","d456f6fe":"code","8f2d677e":"code","31ef05c7":"code","d21c86fb":"code","8f458faf":"code","a4ab7581":"code","56af8429":"code","b0cfa74e":"code","f9eeae0c":"markdown","6ed356df":"markdown","8ae1ed79":"markdown","5e9b7630":"markdown","780516eb":"markdown","a0a3226f":"markdown","06f9d181":"markdown","8cde7ca4":"markdown","ada86899":"markdown","df09d31a":"markdown","5a2504e6":"markdown","f9e5369a":"markdown","840fd02d":"markdown","33929cf4":"markdown","b904f5e4":"markdown","7aaff48e":"markdown","75dee7c6":"markdown","30077078":"markdown","540fef6b":"markdown","27233510":"markdown","e99bd64a":"markdown","40816860":"markdown","f7d68e82":"markdown","5391fef1":"markdown","5ccf097d":"markdown","f1c248e4":"markdown","36337e2c":"markdown","0a313727":"markdown","6bf602a0":"markdown","901a6b6c":"markdown","48ede1f9":"markdown","787aa18d":"markdown","17487179":"markdown","daf5f876":"markdown"},"source":{"3861111e":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\n%matplotlib inline","1a1a4585":"df = pd.read_csv('..\/input\/telecustsclasses\/teleCust1000t.csv')\ndf.head()","0c590b58":"df['custcat'].value_counts()","b88c5be5":"df.hist(column='income', bins=50)","27f85a83":"df.columns","095a1eca":"X = df[['region', 'tenure','age', 'marital', 'address', 'income', 'ed', 'employ','retire', 'gender', 'reside']] .values  #.astype(float)\nX[0:5]\n","379d8d22":"y = df['custcat'].values\ny[0:5]","12e4a064":"X = preprocessing.StandardScaler().fit(X).transform(X.astype(float))\nX[0:5]","dfb5637b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","d456f6fe":"from sklearn.neighbors import KNeighborsClassifier","8f2d677e":"k = 4\n#Train Model and Predict  \nneigh = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)\nneigh","31ef05c7":"yhat = neigh.predict(X_test)\nyhat[0:5]","d21c86fb":"from sklearn import metrics\nprint(\"Train set Accuracy: \", metrics.accuracy_score(y_train, neigh.predict(X_train)))\nprint(\"Test set Accuracy: \", metrics.accuracy_score(y_test, yhat))","8f458faf":"# write your code here\nk = 6\nneigh6 = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)\nyhat6 = neigh6.predict(X_test)\nprint(\"Train set Accuracy: \", metrics.accuracy_score(y_train, neigh6.predict(X_train)))\nprint(\"Test set Accuracy: \", metrics.accuracy_score(y_test, yhat6))","a4ab7581":"Ks = 10\nmean_acc = np.zeros((Ks-1))\nstd_acc = np.zeros((Ks-1))\n\nfor n in range(1,Ks):\n    \n    #Train Model and Predict  \n    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)\n    yhat=neigh.predict(X_test)\n    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)\n\n    \n    std_acc[n-1]=np.std(yhat==y_test)\/np.sqrt(yhat.shape[0])\n\nmean_acc","56af8429":"plt.plot(range(1,Ks),mean_acc,'g')\nplt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)\nplt.fill_between(range(1,Ks),mean_acc - 3 * std_acc,mean_acc + 3 * std_acc, alpha=0.10,color=\"green\")\nplt.legend(('Accuracy ', '+\/- 1xstd','+\/- 3xstd'))\nplt.ylabel('Accuracy ')\nplt.xlabel('Number of Neighbors (K)')\nplt.tight_layout()\nplt.show()","b0cfa74e":"print( \"The best accuracy was with\", mean_acc.max(), \"with k=\", mean_acc.argmax()+1) ","f9eeae0c":"**K-Nearest Neighbors** is an algorithm for supervised learning. Where the data is 'trained' with data points corresponding to their classification. Once a point is to be predicted, it takes into account the 'K' nearest points to it to determine it's classification.\n","6ed356df":"Data Standardization give data zero mean and unit variance, it is good practice, especially for algorithms such as KNN which is based on distance of cases:\n","8ae1ed79":"#### Plot  model accuracy  for Different number of Neighbors\n","5e9b7630":"#### Let\u2019s see how many of each class is in our data set\n","780516eb":"Imagine a telecommunications provider has segmented its customer base by service usage patterns, categorizing the customers into four groups. If demographic data can be used to predict group membership, the company can customize offers for individual prospective customers. It is a classification problem. That is, given the dataset,  with predefined labels, we need to build a model to be used to predict class of a new or unknown case. \n\nThe example focuses on using demographic data, such as region, age, and marital, to predict usage patterns. \n\nThe target field, called\u00a0**custcat**,\u00a0has four possible values that correspond to the four customer groups, as follows:\n  1- Basic Service\n  2- E-Service\n  3- Plus Service\n  4- Total Service\n\nOur objective is to build a classifier, to predict the class of unknown cases. We will use a specific type of classification called K nearest neighbour.\n","a0a3226f":"<div id=\"classification\">\n    <h2>Classification<\/h2>\n<\/div>\n","06f9d181":"<details><summary>Click here for the solution<\/summary>\n\n```python\nk = 6\nneigh6 = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)\nyhat6 = neigh6.predict(X_test)\nprint(\"Train set Accuracy: \", metrics.accuracy_score(y_train, neigh6.predict(X_train)))\nprint(\"Test set Accuracy: \", metrics.accuracy_score(y_test, yhat6))\n\n```\n\n<\/details>\n","8cde7ca4":"Classifier implementing the k-nearest neighbors vote.\n","ada86899":"Lets define feature sets, X:\n","df09d31a":"Lets download the dataset. To download the data, we will use !wget to download it from IBM Object Storage.\n","5a2504e6":"### Feature set\n","f9e5369a":"In this case, we have data points of Class A and B. We want to predict what the star (test data point) is. If we consider a k value of 3 (3 nearest data points) we will obtain a prediction of Class B. Yet if we consider a k value of 6, we will obtain a prediction of Class A.\n","840fd02d":"### Train Test Split\n\nOut of Sample Accuracy is the percentage of correct predictions that the model makes on data that that the model has NOT been trained on. Doing a train and test on the same dataset will most likely have low out-of-sample accuracy, due to the likelihood of being over-fit.\n\nIt is important that our models have a high, out-of-sample accuracy, because the purpose of any model, of course, is to make correct predictions on unknown data. So how can we improve out-of-sample accuracy? One way is to use an evaluation approach called Train\/Test Split.\nTrain\/Test Split involves splitting the dataset into training and testing sets respectively, which are mutually exclusive. After which, you train with the training set and test with the testing set. \n\nThis will provide a more accurate evaluation on out-of-sample accuracy because the testing dataset is not part of the dataset that have been used to train the data. It is more realistic for real world problems.\n","33929cf4":"In this Lab you will load a customer dataset, fit the data, and use K-Nearest Neighbors to predict a data point. But what is **K-Nearest Neighbors**?\n","b904f5e4":"<h3>K nearest neighbor (KNN)<\/h3>\n","7aaff48e":"### Here's an visualization of the K-Nearest Neighbors algorithm.\n\n<img src=\"https:\/\/ibm.box.com\/shared\/static\/mgkn92xck0z05v7yjq8pqziukxvc2461.png\">\n","75dee7c6":"#### What about other K?\n\nK in KNN, is the number of nearest neighbors to examine. It is supposed to be specified by the User. So, how can we choose right value for K?\nThe general solution is to reserve a part of your data for testing the accuracy of the model. Then chose k =1, use the training part for modeling, and calculate the accuracy of prediction using all samples in your test set. Repeat this process, increasing the k, and see which k is the best for your model.\n\nWe can calculate the accuracy of KNN for different Ks.\n","30077078":"To use scikit-learn library, we have to convert the Pandas data frame to a Numpy array:\n","540fef6b":"You can easily explore your data using visualization techniques:\n","27233510":"In this sense, it is important to consider the value of k. But hopefully from this diagram, you should get a sense of what the K-Nearest Neighbors algorithm is. It considers the 'K' Nearest Neighbors (points) when it predicts the classification of the test point.\n","e99bd64a":"## Normalize Data\n","40816860":"<h1>Table of contents<\/h1>\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n    <ol>\n        <li><a href=\"#about_dataset\">About the dataset<\/a><\/li>\n        <li><a href=\"#visualization_analysis\">Data Visualization and Analysis<\/a><\/li>\n        <li><a href=\"#classification\">Classification<\/a><\/li>\n    <\/ol>\n<\/div>\n<br>\n<hr>\n","f7d68e82":"<div id=\"about_dataset\">\n    <h2>About the dataset<\/h2>\n<\/div>\n","5391fef1":"# K-Nearest Neighbors\n\n\n\n## Objectives\n\nAfter completing this lab you will be able to:\n\n-   Use K Nearest neighbors to classify data\n","5ccf097d":"## Practice\n\nCan you build the model again, but this time with k=6?\n","f1c248e4":"What are our labels?\n","36337e2c":"#### 281 Plus Service, 266 Basic-service, 236 Total Service, and 217 E-Service customers\n","0a313727":"### Training\n\nLets start the algorithm with k=4 for now:\n","6bf602a0":"### Predicting\n\nwe can use the model to predict the test set:\n","901a6b6c":"### Accuracy evaluation\n\nIn multilabel classification, **accuracy classification score** is a function that computes subset accuracy. This function is equal to the jaccard_similarity_score function. Essentially, it calculates how closely the actual labels and predicted labels are matched in the test set.\n","48ede1f9":"Lets load required libraries\n","787aa18d":"### Load Data From CSV File\n","17487179":"#### Import library\n","daf5f876":"<div id=\"visualization_analysis\">\n    <h2>Data Visualization and Analysis<\/h2> \n<\/div>\n"}}