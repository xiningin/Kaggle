{"cell_type":{"20181e88":"code","d8c2c4ed":"code","0e6a1f6e":"code","49a5ba0b":"code","ae47fe05":"code","83016897":"code","36d0e2c4":"code","602109a0":"code","712b0724":"code","64901e97":"code","739e192a":"code","b947c90f":"code","3d79e57e":"code","12fa28a3":"code","1b01c9ba":"code","632e3ecb":"code","1beb5cad":"code","d06e062e":"code","a235571f":"code","6c29d41c":"code","c26c21e3":"code","03d8114b":"code","b8ff95c6":"code","b895dcde":"code","7b4d21cf":"code","c8550ab5":"code","ec2097c6":"code","226cf2c0":"code","c75a684c":"code","1939c7eb":"code","c40ca2e4":"code","83cb9eb9":"code","d80e13c3":"code","3f087aca":"code","c56fb47a":"code","42f123a1":"code","90db8008":"code","bb830aff":"code","461935f8":"code","a7148966":"code","6aefa5f6":"code","de7c0c5f":"code","b22b3d40":"code","04e79f9b":"code","f1ee8c17":"code","0824f2ea":"code","37e54523":"code","c0f84f6e":"markdown","3d0b9ff3":"markdown","fad8086c":"markdown","5a6a9387":"markdown","154eb2b4":"markdown","c150cda7":"markdown","3cad6f6f":"markdown","3edc2a5c":"markdown","7ad4ccd8":"markdown","e31fcae1":"markdown","b32c3706":"markdown","1166b4a6":"markdown","d93ace5e":"markdown","7d14e9b8":"markdown","ebae2b9b":"markdown","99dd5426":"markdown","c010b6a9":"markdown","583052b3":"markdown","6ba1f9b5":"markdown","6bcd282d":"markdown"},"source":{"20181e88":"import os\nos.listdir(\"..\/input\/apex-325f5a0\/apex-master\/\")","d8c2c4ed":"!pip install catalyst\n!pip install pretrainedmodels\n!pip install git+https:\/\/github.com\/qubvel\/segmentation_models.pytorch\n!pip install pytorch_toolbelt\n!pip install torchvision==0.4\n!pip install -v --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" ..\/input\/apex-325f5a0\/apex-master\/\nfrom apex import amp","0e6a1f6e":"import os\nimport cv2\nimport collections\nimport time \nimport tqdm\nfrom PIL import Image\nfrom functools import partial\ntrain_on_gpu = True\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\n\nimport torchvision\nimport torchvision.transforms as transforms\nimport torch\nfrom torch.utils.data import TensorDataset, DataLoader,Dataset\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.optim import lr_scheduler\nfrom torch.utils.data.sampler import SubsetRandomSampler\nfrom torch.optim.lr_scheduler import StepLR, ReduceLROnPlateau, CosineAnnealingLR\n\nimport albumentations as albu\nfrom albumentations import pytorch as AT\n\nfrom catalyst.data import Augmentor\nfrom catalyst.dl import utils\nfrom catalyst.data.reader import ImageReader, ScalarReader, ReaderCompose, LambdaReader\nfrom catalyst.dl.runner import SupervisedRunner\nfrom catalyst.contrib.models.segmentation import Unet\nfrom catalyst.dl.callbacks import DiceCallback, EarlyStoppingCallback, InferCallback, CheckpointCallback\n\nimport segmentation_models_pytorch as smp\ndevice=torch.device('cuda')","49a5ba0b":"def get_img(x, folder: str='train_images_525\/train_images_525'):\n    \"\"\"\n    Return image based on image name and folder.\n    \"\"\"\n    data_folder = f\"{img_paths}\/{folder}\"\n    image_path = os.path.join(data_folder, x)\n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    return img\n\n\ndef rle_decode(mask_rle: str = '', shape: tuple = (1400, 2100)):\n    '''\n    Decode rle encoded mask.\n    \n    :param mask_rle: run-length as string formatted (start length)\n    :param shape: (height, width) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0] * shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape, order='F')\n\n\ndef make_mask(df: pd.DataFrame, image_name: str='img.jpg', shape: tuple = (350, 525)):\n    \"\"\"\n    Create mask based on df, image name and shape.\n    \"\"\"\n    masks = np.zeros((shape[0], shape[1], 4), dtype=np.float32)\n    df = df[df[\"im_id\"] == image_name]\n    for idx, im_name in enumerate(df[\"im_id\"].values):\n        for classidx, classid in enumerate([\"Fish\", \"Flower\", \"Gravel\", \"Sugar\"]):\n            mask = cv2.imread(\"..\/input\/understanding-clouds-resized\/train_masks_525\/train_masks_525\/\" + classid + im_name)\n            if mask is None:\n                continue\n            if mask[:,:,0].shape != (350,525):\n                mask = cv2.resize(mask, (525,350))\n            masks[:, :, classidx] = mask[:,:,0]\n    masks = masks\/255\n    return masks\n\n\ndef to_tensor(x, **kwargs):\n    \"\"\"\n    Convert image or mask.\n    \"\"\"\n    return x.transpose(2, 0, 1).astype('float32')\n\n\ndef mask2rle(img):\n    '''\n    Convert mask to rle.\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels= img.T.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)\n\n\ndef visualize(image, mask, original_image=None, original_mask=None):\n    \"\"\"\n    Plot image and masks.\n    If two pairs of images and masks are passes, show both.\n    \"\"\"\n    fontsize = 14\n    class_dict = {0: 'Fish', 1: 'Flower', 2: 'Gravel', 3: 'Sugar'}\n    \n    if original_image is None and original_mask is None:\n        f, ax = plt.subplots(1, 5, figsize=(24, 24))\n\n        ax[0].imshow(image)\n        for i in range(4):\n            ax[i + 1].imshow(mask[:, :, i])\n            ax[i + 1].set_title(f'Mask {class_dict[i]}', fontsize=fontsize)\n    else:\n        f, ax = plt.subplots(2, 5, figsize=(24, 12))\n\n        ax[0, 0].imshow(original_image)\n        ax[0, 0].set_title('Original image', fontsize=fontsize)\n                \n        for i in range(4):\n            ax[0, i + 1].imshow(original_mask[:, :, i])\n            ax[0, i + 1].set_title(f'Original mask {class_dict[i]}', fontsize=fontsize)\n        \n        ax[1, 0].imshow(image)\n        ax[1, 0].set_title('Transformed image', fontsize=fontsize)\n        \n        \n        for i in range(4):\n            ax[1, i + 1].imshow(mask[:, :, i])\n            ax[1, i + 1].set_title(f'Transformed mask {class_dict[i]}', fontsize=fontsize)\n            \n            \ndef visualize_with_raw(image, mask, original_image=None, original_mask=None, raw_image=None, raw_mak=None):\n    \"\"\"\n    Plot image and masks.\n    If two pairs of images and masks are passes, show both.\n    \"\"\"\n    fontsize = 14\n    class_dict = {0: 'Fish', 1: 'Flower', 2: 'Gravel', 3: 'Sugar'}\n\n    f, ax = plt.subplots(3, 5, figsize=(24, 12))\n\n    ax[0, 0].imshow(original_image)\n    ax[0, 0].set_title('Original image', fontsize=fontsize)\n\n    for i in range(4):\n        ax[0, i + 1].imshow(original_mask[:, :, i])\n        ax[0, i + 1].set_title(f'Original mask {class_dict[i]}', fontsize=fontsize)\n\n\n    ax[1, 0].imshow(raw_image)\n    ax[1, 0].set_title('Original image', fontsize=fontsize)\n\n    for i in range(4):\n        ax[1, i + 1].imshow(raw_mak[:, :, i])\n        ax[1, i + 1].set_title(f'Raw predicted mask {class_dict[i]}', fontsize=fontsize)\n        \n    ax[2, 0].imshow(image)\n    ax[2, 0].set_title('Transformed image', fontsize=fontsize)\n\n\n    for i in range(4):\n        ax[2, i + 1].imshow(mask[:, :, i])\n        ax[2, i + 1].set_title(f'Predicted mask with processing {class_dict[i]}', fontsize=fontsize)\n            \n            \ndef plot_with_augmentation(image, mask, augment):\n    \"\"\"\n    Wrapper for `visualize` function.\n    \"\"\"\n    augmented = augment(image=image, mask=mask)\n    image_flipped = augmented['image']\n    mask_flipped = augmented['mask']\n    visualize(image_flipped, mask_flipped, original_image=image, original_mask=mask)\n    \n    \nsigmoid = lambda x: 1 \/ (1 + np.exp(-x))\n\n\ndef post_process(probability, threshold, min_size):\n    \"\"\"\n    Post processing of each predicted mask, components with lesser number of pixels\n    than `min_size` are ignored\n    \"\"\"\n    # don't remember where I saw it\n    mask = cv2.threshold(probability, threshold, 1, cv2.THRESH_BINARY)[1]\n    num_component, component = cv2.connectedComponents(mask.astype(np.uint8))\n    predictions = np.zeros((350, 525), np.float32)\n    num = 0\n    for c in range(1, num_component):\n        p = (component == c)\n        if p.sum() > min_size:\n            predictions[p] = 1\n            num += 1\n    return predictions, num\n\n\ndef get_training_augmentation():\n    train_transform = [\n        albu.Resize(320, 640),\n        albu.HorizontalFlip(p=0.25),\n        albu.VerticalFlip(p=0.25),\n        albu.ShiftScaleRotate(scale_limit=0.5, rotate_limit=0, shift_limit=0.1, p=0.5, border_mode=0)\n#         albu.GridDistortion(p=0.5),\n#         albu.OpticalDistortion(p=0.5, distort_limit=2, shift_limit=0.5),\n\n    ]\n    return albu.Compose(train_transform)\n\n\ndef get_validation_augmentation():\n    \"\"\"Add paddings to make image shape divisible by 32\"\"\"\n    test_transform = [\n        albu.Resize(320, 640)\n    ]\n    return albu.Compose(test_transform)\n\n\ndef get_preprocessing(preprocessing_fn):\n    \"\"\"Construct preprocessing transform\n    \n    Args:\n        preprocessing_fn (callbale): data normalization function \n            (can be specific for each pretrained neural network)\n    Return:\n        transform: albumentations.Compose\n    \n    \"\"\"\n    \n    _transform = [\n        albu.Lambda(image=preprocessing_fn),\n        albu.Lambda(image=to_tensor, mask=to_tensor),\n    ]\n    return albu.Compose(_transform)\n\n\ndef dice(img1, img2):\n    img1 = np.asarray(img1).astype(np.bool)\n    img2 = np.asarray(img2).astype(np.bool)\n\n    intersection = np.logical_and(img1, img2)\n\n    return 2. * intersection.sum() \/ (img1.sum() + img2.sum())","ae47fe05":"path = '..\/input\/understanding_cloud_organization'\nimg_paths = '..\/input\/understanding-clouds-resized'\nos.listdir(path)","83016897":"train = pd.read_csv(f'{path}\/train.csv')\nsub = pd.read_csv(f'{path}\/sample_submission.csv')","36d0e2c4":"train.head()","602109a0":"n_train = len(os.listdir(f'{img_paths}\/train_images_525\/train_images_525'))\nn_test = len(os.listdir(f'{img_paths}\/test_images_525\/test_images_525'))\nprint(f'There are {n_train} images in train dataset')\nprint(f'There are {n_test} images in test dataset')","712b0724":"train['Image_Label'].apply(lambda x: x.split('_')[1]).value_counts()","64901e97":"train.loc[train['EncodedPixels'].isnull() == False, 'Image_Label'].apply(lambda x: x.split('_')[1]).value_counts()","739e192a":"train.loc[train['EncodedPixels'].isnull() == False, 'Image_Label'].apply(lambda x: x.split('_')[0]).value_counts().value_counts()","b947c90f":"train['label'] = train['Image_Label'].apply(lambda x: x.split('_')[1])\ntrain['im_id'] = train['Image_Label'].apply(lambda x: x.split('_')[0])\n\n\nsub['label'] = sub['Image_Label'].apply(lambda x: x.split('_')[1])\nsub['im_id'] = sub['Image_Label'].apply(lambda x: x.split('_')[0])","3d79e57e":"fig = plt.figure(figsize=(25, 16))\nfor j, im_id in enumerate(np.random.choice(train['im_id'].unique(), 4)):\n    for i, (idx, row) in enumerate(train.loc[train['im_id'] == im_id].iterrows()):\n        ax = fig.add_subplot(5, 4, j * 4 + i + 1, xticks=[], yticks=[])\n        im = Image.open(f\"{img_paths}\/train_images_525\/train_images_525\/{row['Image_Label'].split('_')[0]}\")\n        plt.imshow(im)\n        mask = cv2.imread(f\"{img_paths}\/train_masks_525\/train_masks_525\/{row['label']}{row['Image_Label'].split('_')[0]}\", 0)\n        if mask is None:\n            mask = np.zeros((350, 525))\n        plt.imshow(mask, alpha=0.5, cmap='gray')\n        ax.set_title(f\"Image: {row['Image_Label'].split('_')[0]}. Label: {row['label']}\")","12fa28a3":"id_mask_count = train.loc[train['EncodedPixels'].isnull() == False, 'Image_Label'].apply(lambda x: x.split('_')[0]).value_counts().\\\nreset_index().rename(columns={'index': 'img_id', 'Image_Label': 'count'})\ntrain_ids, valid_ids = train_test_split(id_mask_count['img_id'].values, random_state=42, stratify=id_mask_count['count'], test_size=0.1)\ntest_ids = sub['Image_Label'].apply(lambda x: x.split('_')[0]).drop_duplicates().values","1b01c9ba":"image_name = '8242ba0.jpg'\nimage = get_img(image_name)\nmask = make_mask(train, image_name)","632e3ecb":"visualize(image, mask)","1beb5cad":"plot_with_augmentation(image, mask, albu.HorizontalFlip(p=1))","d06e062e":"plot_with_augmentation(image, mask, albu.VerticalFlip(p=1))","a235571f":"plot_with_augmentation(image, mask, albu.RandomRotate90(p=1))","6c29d41c":"plot_with_augmentation(image, mask, albu.ElasticTransform(p=1, alpha=120, sigma=120 * 0.05, alpha_affine=120 * 0.03))","c26c21e3":"plot_with_augmentation(image, mask, albu.GridDistortion(p=1))","03d8114b":"plot_with_augmentation(image, mask, albu.OpticalDistortion(p=1, distort_limit=2, shift_limit=0.5))","b8ff95c6":"class CloudDataset(Dataset):\n    def __init__(self, df: pd.DataFrame = None, datatype: str = 'train', img_ids: np.array = None,\n                 transforms = albu.Compose([albu.HorizontalFlip(),AT.ToTensor()]),\n                preprocessing=None):\n        self.df = df\n        if datatype != 'test':\n            self.data_folder = f\"{img_paths}\/train_images_525\/train_images_525\"\n        else:\n            self.data_folder = f\"{img_paths}\/test_images_525\/test_images_525\"\n        self.img_ids = img_ids\n        self.transforms = transforms\n        self.preprocessing = preprocessing\n\n    def __getitem__(self, idx):\n        image_name = self.img_ids[idx]\n        mask = make_mask(self.df, image_name)\n        image_path = os.path.join(self.data_folder, image_name)\n        img = cv2.imread(image_path)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        augmented = self.transforms(image=img, mask=mask)\n        img = augmented['image']\n        mask = augmented['mask']\n        if self.preprocessing:\n            preprocessed = self.preprocessing(image=img, mask=mask)\n            img = preprocessed['image']\n            mask = preprocessed['mask']\n        return img, mask\n\n    def __len__(self):\n        return len(self.img_ids)","b895dcde":"ENCODER = 'resnet18'\nENCODER_WEIGHTS = 'imagenet'\n\nACTIVATION = None\nmodel = smp.Unet(\n    encoder_name=ENCODER, \n    encoder_weights=ENCODER_WEIGHTS, \n    classes=4, \n    activation=ACTIVATION,\n)\npreprocessing_fn = smp.encoders.get_preprocessing_fn(ENCODER, ENCODER_WEIGHTS)","7b4d21cf":"num_workers = 4\nbs = 32\ntrain_dataset = CloudDataset(df=train, datatype='train', img_ids=train_ids, transforms = get_training_augmentation(), preprocessing=get_preprocessing(preprocessing_fn))\nvalid_dataset = CloudDataset(df=train, datatype='valid', img_ids=valid_ids, transforms = get_validation_augmentation(), preprocessing=get_preprocessing(preprocessing_fn))\n\ntrain_loader = DataLoader(train_dataset, batch_size=bs, shuffle=True, num_workers=num_workers)\nvalid_loader = DataLoader(valid_dataset, batch_size=bs, shuffle=False, num_workers=num_workers)\n\nloaders = {\n    \"train\": train_loader,\n    \"valid\": valid_loader\n}","c8550ab5":"def dice_loss(input, target):\n    input = torch.sigmoid(input)\n    smooth = 1.0\n    iflat = input.view(-1)\n    tflat = target.view(-1)\n    intersection = (iflat * tflat).sum()\n    return ((2.0 * intersection + smooth) \/ (iflat.sum() + tflat.sum() + smooth))\n\n\nclass FocalLoss(nn.Module):\n    def __init__(self, gamma):\n        super().__init__()\n        self.gamma = gamma\n\n    def forward(self, input, target):\n        if not (target.size() == input.size()):\n            raise ValueError(\"Target size ({}) must be the same as input size ({})\"\n                             .format(target.size(), input.size()))\n        max_val = (-input).clamp(min=0)\n        loss = input - input * target + max_val + \\\n            ((-max_val).exp() + (-input - max_val).exp()).log()\n        invprobs = F.logsigmoid(-input * (target * 2.0 - 1.0))\n        loss = (invprobs * self.gamma).exp() * loss\n        return loss.mean()\n\n\nclass MixedLoss(nn.Module):\n    def __init__(self, alpha, gamma):\n        super().__init__()\n        self.alpha = alpha\n        self.focal = FocalLoss(gamma)\n\n    def forward(self, input, target):\n        loss = self.alpha*self.focal(input, target) - torch.log(dice_loss(input, target))\n        return loss.mean()","ec2097c6":"import apex\nnum_epochs = 25\nlogdir = \".\/logs\/segmentation_unet\"\n\n# model, criterion, optimizer\noptimizer = torch.optim.Adam([\n    {'params': model.decoder.parameters(), 'lr': 1e-2}, \n    {'params': model.encoder.parameters(), 'lr': 1e-3},  \n])\nopt_level = 'O1'\nmodel.cuda()\nmodel, optimizer = amp.initialize(model, optimizer, opt_level=opt_level)\nscheduler = ReduceLROnPlateau(optimizer, factor=0.5, patience=2)\n# criterion = MixedLoss(10.0, 2.0)\ncriterion = smp.utils.losses.BCEDiceLoss(eps=1.)\nrunner = SupervisedRunner()","226cf2c0":"runner.train(\n    model=model,\n    criterion=criterion,\n    optimizer=optimizer,\n    scheduler=scheduler,\n    loaders=loaders,\n    callbacks=[DiceCallback(), EarlyStoppingCallback(patience=5, min_delta=0.001)],\n    logdir=logdir,\n    num_epochs=num_epochs,\n    verbose=True\n)","c75a684c":"utils.plot_metrics(\n    logdir=logdir, \n    # specify which metrics we want to plot\n    metrics=[\"loss\", \"dice\", 'lr', '_base\/lr']\n)","1939c7eb":"encoded_pixels = []\nloaders = {\"infer\": valid_loader}\nrunner.infer(\n    model=model,\n    loaders=loaders,\n    callbacks=[\n        CheckpointCallback(\n            resume=f\"{logdir}\/checkpoints\/best.pth\"),\n        InferCallback()\n    ],\n)\nvalid_masks = []\nprobabilities = np.zeros((2220, 350, 525), dtype = np.float32)\nfor i, (batch, output) in enumerate(tqdm.tqdm(zip(\n        valid_dataset, runner.callbacks[0].predictions[\"logits\"]))):\n    image, mask = batch\n    for m in mask:\n        if m.shape != (350, 525):\n            m = cv2.resize(m, dsize=(525, 350), interpolation=cv2.INTER_LINEAR)\n        valid_masks.append(m)\n\n    for j, probability in enumerate(output):\n        if probability.shape != (350, 525):\n            probability = cv2.resize(probability, dsize=(525, 350), interpolation=cv2.INTER_LINEAR)\n        probabilities[i * 4 + j, :, :] = probability","c40ca2e4":"import gc\ntorch.cuda.empty_cache()\ngc.collect()","83cb9eb9":"class_params = {}\nfor class_id in range(4):\n    print(class_id)\n    attempts = []\n    for t in range(0, 100, 5):\n        t \/= 100\n        for ms in [5000, 10000, 15000, 20000, 22500, 25000]:\n            masks = []\n            for i in range(class_id, len(probabilities), 4):\n                probability = probabilities[i]\n                predict, num_predict = post_process(sigmoid(probability), t, ms)\n                masks.append(predict)\n\n            d = []\n            for i, j in zip(masks, valid_masks[class_id::4]):\n                if (i.sum() == 0) & (j.sum() == 0):\n                    d.append(1)\n                else:\n                    d.append(dice(i, j))\n\n            attempts.append((t, ms, np.mean(d)))\n\n    attempts_df = pd.DataFrame(attempts, columns=['threshold', 'size', 'dice'])\n\n\n    attempts_df = attempts_df.sort_values('dice', ascending=False)\n    print(attempts_df.head())\n    best_threshold = attempts_df['threshold'].values[0]\n    best_size = attempts_df['size'].values[0]\n    \n    class_params[class_id] = (best_threshold, best_size)","d80e13c3":"del masks\ndel valid_masks\ndel probabilities\ngc.collect()","3f087aca":"print(class_params)","c56fb47a":"\nattempts_df = pd.DataFrame(attempts, columns=['threshold', 'size', 'dice'])","42f123a1":"attempts_df.groupby(['threshold'])['dice'].max()","90db8008":"attempts_df.groupby(['size'])['dice'].max()","bb830aff":"attempts_df = attempts_df.sort_values('dice', ascending=False)\nattempts_df.head(10)","461935f8":"sns.lineplot(x='threshold', y='dice', hue='size', data=attempts_df);\nplt.title('Threshold and min size vs dice');","a7148966":"best_threshold = attempts_df['threshold'].values[0]\nbest_size = attempts_df['size'].values[0]","6aefa5f6":"for i, (input, output) in enumerate(zip(\n        valid_dataset, runner.callbacks[0].predictions[\"logits\"])):\n    image, mask = input\n        \n    image_vis = image.transpose(1, 2, 0)\n    mask = mask.astype('uint8').transpose(1, 2, 0)\n    pr_mask = np.zeros((350, 525, 4))\n    for j in range(4):\n        probability = cv2.resize(output[:, :, j], dsize=(525, 350), interpolation=cv2.INTER_LINEAR)\n        pr_mask[:, :, j], _ = post_process(sigmoid(probability), class_params[j][0], class_params[j][1])\n    #pr_mask = (sigmoid(output) > best_threshold).astype('uint8').transpose(1, 2, 0)\n    \n        \n    visualize_with_raw(image=image_vis, mask=pr_mask, original_image=image_vis, original_mask=mask, raw_image=image_vis, raw_mask=output.transpose(1, 2, 0))\n    \n    if i >= 2:\n        break","de7c0c5f":"import gc\ntorch.cuda.empty_cache()\ngc.collect()","b22b3d40":"test_dataset = CloudDataset(df=sub, datatype='test', img_ids=test_ids, transforms = get_validation_augmentation(), preprocessing=get_preprocessing(preprocessing_fn))\ntest_loader = DataLoader(test_dataset, batch_size=8, shuffle=False, num_workers=0)\n\nloaders = {\"test\": test_loader}","04e79f9b":"del train_dataset, train_loader","f1ee8c17":"del valid_dataset, valid_loader\ngc.collect()","0824f2ea":"encoded_pixels = []\nimage_id = 0\nfor i, test_batch in enumerate(tqdm.tqdm(loaders['test'])):\n    runner_out = runner.predict_batch({\"features\": test_batch[0].cuda()})['logits']\n    for i, batch in enumerate(runner_out):\n        for probability in batch:\n            \n            probability = probability.cpu().detach().numpy()\n            if probability.shape != (350, 525):\n                probability = cv2.resize(probability, dsize=(525, 350), interpolation=cv2.INTER_LINEAR)\n            predict, num_predict = post_process(sigmoid(probability), class_params[image_id % 4][0], class_params[image_id % 4][1])\n            if num_predict == 0:\n                encoded_pixels.append('')\n            else:\n                r = mask2rle(predict)\n                encoded_pixels.append(r)\n            image_id += 1","37e54523":"sub['EncodedPixels'] = encoded_pixels\nsub.to_csv('submission.csv', columns=['Image_Label', 'EncodedPixels'], index=False)","c0f84f6e":"## Exploring augmentations with albumentations\n\nOne of important things while working with images is choosing good augmentations. There are a lot of them, let's have a look at augmentations from albumentations!","3d0b9ff3":"Find optimal values","fad8086c":"## Importing libraries","5a6a9387":"## Data overview\n\nLet's have a look at the data first.","154eb2b4":"But there are a lot of empty masks. In fact only 266 images have all four masks. It is important to remember this.","c150cda7":"## Exploring predictions\nLet's make predictions on validation dataset.\n\nAt first we need to optimize thresholds ","3cad6f6f":"We can see that masks can overlap. Also we can see that clouds are really similar to fish, flower and so on. Another important point: masks are often quite big and can have seemingly empty areas.","3edc2a5c":"## Preparing data for modelling\n\nAt first, let's create a list of unique image ids and the count of masks for images. This will allow us to make a stratified split based on this count.","7ad4ccd8":"## Setting up data for training in Catalyst","e31fcae1":"## General information\n\nIn this kernel I work with the data from Understanding Clouds from Satellite Images competition.\n```\nShallow clouds play a huge role in determining the Earth's climate. They\u2019re also difficult to understand and to represent in climate models. By classifying different types of cloud organization, researchers at Max Planck hope to improve our physical understanding of these clouds, which in turn will help us build better climate models.\n```\n\nSo in this competition we are tasked with multiclass segmentation task: finding 4 different cloud patterns in the images. On the other hand, we make predictions for each pair of image and label separately, so this could be treated as 4 binary segmentation tasks.\nIt is important to notice that images (and masks) are `1400 x 2100`, but predicted masks should be `350 x 525`.\n\nIn this kernel I'll use (or will use in next versions) the following notable libraries:\n- [albumentations](https:\/\/github.com\/albu\/albumentations): this is a great library for image augmentation which makes it easier and more convenient\n- [catalyst](https:\/\/github.com\/catalyst-team\/catalyst): this is a great library which makes using PyTorch easier, helps with reprodicibility and contains a lot of useful utils\n- [segmentation_models_pytorch](https:\/\/github.com\/qubvel\/segmentation_models.pytorch): this is a great library with convenient wrappers for models, losses and other useful things\n- [pytorch-toolbelt](https:\/\/github.com\/BloodAxe\/pytorch-toolbelt): this is a great library with many useful shortcuts for building pytorch models\n\n![](https:\/\/i.imgur.com\/EOvz5kd.png)","b32c3706":"## Predicting","1166b4a6":"Now let's have a look at our masks.","d93ace5e":"Now we define model and training parameters","7d14e9b8":"We have folders with train and test images, file with train image ids and masks and sample submission.","ebae2b9b":"Let's have a look at the images and the masks.","99dd5426":"This is how original image and its masks look like. Let's try adding some augmentations","c010b6a9":"This kernel is forked from Andrew's Pytorch Kernel https:\/\/www.kaggle.com\/artgor\/segmentation-in-pytorch-using-convenient-tools\n\nI have done a couple things to speed things up and allow for larger models. The first one is that I resized the dataset before hand so that we do not need to do this repetitively for each epoch. This takes our epoch time down from ~23 minutes down to ~7 minutes using the same resnet 50 unet architecture. You can do whatever you like with this additional time, train more models, more epochs, larger backbones, etc. \n\nThe second thing I have done is add in nvidia apex so we can do mixed precision training. This roughly halves memory usage on the GPU and allows us to fit larger models or larger batch sizes. \n\nThis has allowed me to train the larger se_resnext101_32x4d backbone in a shorter amount of time while also getting a better score.  ","583052b3":"## Helper functions and classes","6ba1f9b5":"So we have ~5.5k images in train dataset and they can have up to 4 masks: Fish, Flower, Gravel and Sugar.","6bcd282d":"## Model training"}}