{"cell_type":{"f5c20c54":"code","51e71830":"code","0cbebf24":"code","fec0fae1":"code","86c5f491":"code","a5317b7b":"code","18caed29":"code","33e8083d":"code","978ddd3c":"code","a52df653":"code","68bd4ba5":"markdown"},"source":{"f5c20c54":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","51e71830":"!ls ..\/input\/novel-coronavirus-2019ncov\/","0cbebf24":"# Reading the datasets\ndata_ncov_c= pd.read_csv(\"..\/input\/novel-coronavirus-2019ncov\/coronavirus_conf.csv\")\ndata_ncov_r= pd.read_csv(\"..\/input\/novel-coronavirus-2019ncov\/coronavirus_reco.csv\")\ndata_ncov_d= pd.read_csv(\"..\/input\/novel-coronavirus-2019ncov\/coronavirus_death.csv\")\ndata_ncov_c.head(10)","fec0fae1":"# Confirmed countries and regions affected by virus\nplaces = data_ncov_c['Country\/Region'].unique().tolist()\nprint(places)\n\nprint(\"\\nTotal countries and regions affected by virus: \",len(places))\n\n## Hong Kong, Macau are separated from China","86c5f491":"data_ncov_c.groupby(['Country\/Region','Province\/State']).sum()","a5317b7b":"from shapely.geometry import Point\nimport geopandas as gpd\nfrom geopandas import GeoDataFrame\n\ngeometry_c = [Point(xy) for xy in zip(data_ncov_c['Long'].astype('float'), data_ncov_c['Lat'].astype('float'))]\ngeometry_r = [Point(xy) for xy in zip(data_ncov_r['Long'].astype('float'), data_ncov_r['Lat'].astype('float'))]\ngeometry_d = [Point(xy) for xy in zip(data_ncov_d['Long'].astype('float'), data_ncov_d['Lat'].astype('float'))]\ngdf_c = GeoDataFrame(data_ncov_c, geometry=geometry_c)   \ngdf_r = GeoDataFrame(data_ncov_r, geometry=geometry_r)\ngdf_d = GeoDataFrame(data_ncov_d, geometry=geometry_d)\n\n#this is a simple map that goes with geopandas\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n\ngdf_c.plot(ax=world.plot(figsize=(15, 10)), marker='o', color='red', markersize=15);\ngdf_r.plot(ax=world.plot(figsize=(15, 10)), marker='o', color='green', markersize=15);\ngdf_d.plot(ax=world.plot(figsize=(15, 10)), marker='o', color='black', markersize=15);","18caed29":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n\nfig, ax = plt.subplots(figsize=(15, 10))\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=data_ncov_c['2\/8\/2020 10:04 PM'], y='Province\/State', \n            data=data_ncov_c[data_ncov_c['Country\/Region']=='Mainland China'][1:], label='Number of cases confirmed on Feb 8, 2020', color='b')\n\nsns.barplot(x=data_ncov_r['2\/8\/2020 10:04 PM'], y='Province\/State', \n            data=data_ncov_r[data_ncov_r['Country\/Region']=='Mainland China'][1:], label='Number of cases recovered on Feb 8, 2020', color='g')\n\nsns.barplot(x=data_ncov_d['2\/8\/2020 10:04 PM'], y='Province\/State', \n            data=data_ncov_d[data_ncov_d['Country\/Region']=='Mainland China'][1:], label='Number of cases with deaths on Feb 8, 2020', color='black')\n\n\n# Add a legend and informative axis label\nax.legend(ncol=1, loc='upper right', frameon=True)\nax.set(xlim=(0, 1500), ylabel=\"\", xlabel='Number of cases') # xmax up to ~27000\nsns.despine(left=True, bottom=True)","33e8083d":"data_ncov_c.head(3)","978ddd3c":"sum_21 = data_ncov_c.groupby(['Country\/Region'])['1\/21\/2020 10:00 PM'].sum()\nsum_22 = data_ncov_c.groupby(['Country\/Region'])['1\/22\/2020 12:00 PM'].sum()\nsum_23 = data_ncov_c.groupby(['Country\/Region'])['1\/23\/2020 12:00 PM'].sum()\nsum_24 = data_ncov_c.groupby(['Country\/Region'])['1\/24\/2020 12:00 PM'].sum()\nsum_25 = data_ncov_c.groupby(['Country\/Region'])['1\/25\/2020 12:00 PM'].sum()\nsum_26 = data_ncov_c.groupby(['Country\/Region'])['1\/26\/2020 11:00 PM'].sum() # 11:00 PM !!!\nsum_27 = data_ncov_c.groupby(['Country\/Region'])['1\/27\/2020 8:30 PM'].sum()  #  8:30 PM !!!\nsum_28 = data_ncov_c.groupby(['Country\/Region'])['1\/28\/2020 11:00 PM'].sum() # 11:00 PM !!!\nsum_29 = data_ncov_c.groupby(['Country\/Region'])['1\/29\/2020 9:00 PM'].sum()  #  9:00 PM !!!\nsum_30 = data_ncov_c.groupby(['Country\/Region'])['1\/30\/2020 11:00 AM'].sum() # 11:00 AM !!!\nsum_31 = data_ncov_c.groupby(['Country\/Region'])['1\/31\/2020 7:00 PM'].sum()  #  7:00 PM !!!\n\nsum_01 = data_ncov_c.groupby(['Country\/Region'])['2\/1\/2020 10:00 AM'].sum()  # 10:00 AM !!!\nsum_02 = data_ncov_c.groupby(['Country\/Region'])['2\/2\/2020 9:00 PM'].sum()   #  9:00 PM !!!\nsum_03 = data_ncov_c.groupby(['Country\/Region'])['2\/3\/2020 9:00 PM'].sum()   #  9:00 PM !!!\nsum_04 = data_ncov_c.groupby(['Country\/Region'])['2\/4\/2020 9:40 AM'].sum()   #  9:40 AM !!!\nsum_05 = data_ncov_c.groupby(['Country\/Region'])['2\/5\/2020 11:00 PM'].sum()  # 11:00 PM !!!\nsum_06 = data_ncov_c.groupby(['Country\/Region'])['2\/6\/2020 2:20 PM'].sum()   #  2:20 PM !!!\nsum_07 = data_ncov_c.groupby(['Country\/Region'])['2\/7\/2020 10:50 PM'].sum()  # 10:50 PM !!!\nsum_08 = data_ncov_c.groupby(['Country\/Region'])['2\/8\/20 23:04'].sum()       # 23:04    !!!\n\nsum_21","a52df653":"plt.figure(figsize=(20,6))\n\nccc = ['Australia','Belgium','Cambodia','Canada','Finland','France','Germany','Hong Kong','India','Italy','Japan','Macau',\n       'Mainland China','Malaysia','Nepal','Others','Philippines','Russia','Singapore','South Korea','Spain','Sri Lanka',\n       'Sweden','Taiwan','Thailand','UK','US','United Arab Emirates','Vietnam']\n\nax = plt.gca()\nax.set_yscale('log')\nax.set_xticklabels(ccc)\n\n## Jan\nsum_21.plot(marker='')\nsum_22.plot(marker='')\nsum_23.plot(marker='')\nsum_24.plot(marker='')\nsum_25.plot(marker='')\nsum_26.plot(marker='')\nsum_27.plot(marker='')\nsum_28.plot(marker='')\nsum_29.plot(marker='')\nsum_30.plot(marker='')\nsum_31.plot(marker='')\n\n## Feb\nsum_01.plot(marker='')\nsum_02.plot(marker='')\nsum_03.plot(marker='')\nsum_04.plot(marker='')\nsum_05.plot(marker='')\nsum_06.plot(marker='')\nsum_07.plot(marker='')\nsum_08.plot(marker='')\n\n#for l in ax.get_lines():\n#    l.remove()","68bd4ba5":"## Number of cases (confirmed, recovered, deaths) in China"}}