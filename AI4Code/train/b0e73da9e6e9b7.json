{"cell_type":{"fc9eea0c":"code","a8258d31":"code","805dc1b2":"code","fb0fa060":"code","6e406d14":"code","5fb2dd5d":"code","e7cf1174":"code","b6d2ad2f":"code","9bdd4930":"code","d1cb6149":"code","ec63fd66":"code","d3621d7f":"code","af1cf58b":"code","c00fc431":"code","1d521b60":"code","4239581b":"code","9c4ac580":"code","5286b7cd":"code","410d9961":"code","e87619f8":"code","6c79757e":"code","f4a1c162":"code","3e5a6315":"code","146b8fb6":"code","8e20cc15":"code","cefafb5c":"code","48f6ccc6":"code","508a4b4f":"code","b1382812":"code","cb18013a":"code","b8c3c1b1":"code","bc90d854":"code","78e3a383":"markdown","781f7b0d":"markdown","50649e51":"markdown","b1ed8adc":"markdown","affa0bec":"markdown","8c40c1ec":"markdown"},"source":{"fc9eea0c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a8258d31":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom keras.models import Sequential\nfrom keras.layers import Dense,MaxPool2D,Conv2D,Dropout,Flatten,Activation,Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt","805dc1b2":"train_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","fb0fa060":"train_df.shape","6e406d14":"train_df['label'].unique()","5fb2dd5d":"X = train_df.drop('label',axis=1)\ny = train_df['label']","e7cf1174":"# Scale images to the [0, 1] range\nX = X.astype(\"float32\")\/255.0","b6d2ad2f":"# Reshape images\nX = X.values.reshape(-1, 28, 28, 1)","9bdd4930":"NumClass = 10\nInputShape = (28, 28, 1)","d1cb6149":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=101)","ec63fd66":"# Convert class vectors to binary class matrices\ny_train = keras.utils.to_categorical(y_train, NumClass)\ny_test = keras.utils.to_categorical(y_test, NumClass)","d3621d7f":"model = Sequential()\nmodel.add(Conv2D(input_shape=(InputShape), filters=64, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(units=4080, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(units=4080, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(units=10, activation='softmax'))\nmodel.summary()","af1cf58b":"early_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=25)","c00fc431":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=[\"accuracy\"])","1d521b60":"BatchSize = 64\nEpochs = 100","4239581b":"history = model.fit(X_train, y_train, batch_size=BatchSize, epochs=Epochs,validation_data=(X_test,y_test), callbacks=[early_stop])","9c4ac580":"loss_df = pd.DataFrame(history.history)","5286b7cd":"acuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(6,5))\nplt.plot(acuracy, color='green', label = 'Training Accuracy')\nplt.plot(val_accuracy, color='red', label = 'Validation Accuracy')\nplt.legend()\nplt.show()","410d9961":"loss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(6,5))\nplt.plot(loss, color='green', label = 'Training Loss')\nplt.plot(val_loss, color='red', label = 'Validation Loss')\nplt.legend()\nplt.show()","e87619f8":"model.evaluate(X_train,y_train)","6c79757e":"model.evaluate(X_test,y_test)","f4a1c162":"X_submit = test_df","3e5a6315":"#Scale images in 0,1\nX_submit = X_submit.astype('float32')\/255.0","146b8fb6":"# Reshape images\nX_new = X_submit.values.reshape(-1, 28, 28, 1)","8e20cc15":"predict = model.predict(X_new)","cefafb5c":"test_pred = np.argmax(predict,axis=1)","48f6ccc6":"print(test_pred.shape)","508a4b4f":"predict = keras.utils.to_categorical(predict, NumClass)","b1382812":"sample_submission = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\nsample_submission","cb18013a":"index = sample_submission.ImageId\ndata = {'ImageId':index, 'Label':test_pred}\nfinal_df = pd.DataFrame(data)\nfinal_df.head","b8c3c1b1":"final_df.to_csv('submission.csv', index=False)","bc90d854":"os.listdir('\/kaggle\/working')","78e3a383":"## Model Building","781f7b0d":"### 99% Accuracy On Train Set","50649e51":"### 98% Accuracy On Test Set","b1ed8adc":"## Data Preprocessing","affa0bec":"## Library Imports","8c40c1ec":"### Test code for Submission"}}