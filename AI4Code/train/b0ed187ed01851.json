{"cell_type":{"908931ec":"code","16ad23fd":"code","c4020735":"code","fb979d91":"code","962781fa":"code","2bd85712":"code","f6a8f3cd":"code","b3913680":"code","6cd5be58":"code","6f7ba2d7":"code","5d33bdec":"code","908cc2c2":"code","90ca8107":"code","c5560fde":"code","9f3c397d":"code","eff385c8":"code","303ac59a":"markdown","6446b6d3":"markdown","702b83b9":"markdown","c304a71f":"markdown","d971cb78":"markdown","455b67c7":"markdown","385b65ad":"markdown","a8955761":"markdown","b97ed61c":"markdown","555d33b5":"markdown","684380f2":"markdown","53889a76":"markdown","16540ee3":"markdown","49ceada1":"markdown","a260fc1b":"markdown","22e4684f":"markdown"},"source":{"908931ec":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nchampions = pd.read_csv('..\/input\/championsdata.csv')\nrunnerups = pd.read_csv('..\/input\/runnerupsdata.csv')\n","16ad23fd":"## 1. Correct broken record\n\n# Seems like there's an additional single quote for one record\nchampions.loc[champions['Team']==\"'Heat'\",'Team'] = 'Heat'\nchampions.loc[champions['Team']==\"Warriorrs\",'Team'] = 'Warriors'\n\n# Seems like there is an incorrect entry on the year for index number 186\nchampions[champions['Year'] == 2012]\nchampions[champions['Year'] == 2013]\n\n# let's change the year to 2013\nchampions.loc[186,'Year'] = 2013","c4020735":"\ncombined = champions.merge(runnerups,left_index=True,right_index=True)\n\ncombined['WinAccum_x'] = combined.apply(lambda x: combined.loc[(combined.Year_x==x.Year_x) & (combined.Game_x <= x.Game_x), 'Win_x'], axis='columns').sum(axis=1)\ncombined['WinAccum_y'] = combined.apply(lambda x: combined.loc[(combined.Year_y==x.Year_y) & (combined.Game_y <= x.Game_y), 'Win_y'], axis='columns').sum(axis=1)\ncombined['WinAccum_x'] = combined['WinAccum_x'].astype('int')\ncombined['WinAccum_y'] = combined['WinAccum_y'].astype('int')","fb979d91":"groupByYear = combined.groupby('Year_x')\ngroupByYearWinner = groupByYear.agg({'Team_x':lambda x: x.iloc[0]})\ngroupByYearRunnerup = groupByYear.agg({'Team_y':lambda x: x.iloc[0]})\n\nwon = pd.DataFrame(groupByYearWinner['Team_x'].value_counts().rename('No of times won in the final'))\nwon\n","962781fa":"lost = pd.DataFrame(groupByYearRunnerup['Team_y'].value_counts().rename('No of times lost in the final'))\nlost","2bd85712":"pd.DataFrame(won['No of times won in the final'].add(lost['No of times lost in the final'],fill_value=0),columns=['No of time in the finals']).sort_values(by='No of time in the finals',ascending=False)","f6a8f3cd":"teamsWon = groupByYearWinner['Team_x'].unique()\nteamsLoss = groupByYearRunnerup['Team_y'].unique()\n## Question: Which team has not lost in the NBA final?\n# teamsWon - teamsLoss\npd.DataFrame(np.setdiff1d(teamsWon,teamsLoss),columns=['Not Loss In the final'])\n","b3913680":"# teamsLoss - teamsWon\npd.DataFrame(np.setdiff1d(teamsLoss,teamsWon),columns=['Not Won'])","6cd5be58":"combined[ (combined['WinAccum_x']==0) & (combined['WinAccum_y']==2) ] [['Year_x','Team_x','Team_y']].rename(index=str, columns={\"Year_x\": \"Year\", \"Team_x\": \"Winner\",\"Team_y\": \"Runnerup\"})\n","6f7ba2d7":"## which team come back and win the final from 3-0 deficit?\ncombined[ (combined['WinAccum_x']==0) & (combined['WinAccum_y']==3) ] [['Year_x','Team_x','Team_y']].rename(index=str, columns={\"Year_x\": \"Year\", \"Team_x\": \"Winner\",\"Team_y\": \"Runnerup\"})\n","5d33bdec":"\n## which team come back and win the final from 3-1 deficit? (Yes we are expecting GSW)\ncombined[ (combined['WinAccum_x']==1) & (combined['WinAccum_y']==3) ] [['Year_x','Team_x','Team_y']].rename(index=str, columns={\"Year_x\": \"Year\", \"Team_x\": \"Winner\",\"Team_y\": \"Runnerup\"})\n\n","908cc2c2":"combined[ (combined['WinAccum_x']==4) & (combined['WinAccum_y']==0) ] [['Year_x','Team_x','Team_y']].rename(index=str, columns={\"Year_x\": \"Year\", \"Team_x\": \"Winner\",\"Team_y\": \"Runnerup\"})\n","90ca8107":"pointsByYears = groupByYear.agg({\n    'Team_x':lambda x: x.iloc[0],'Team_y':lambda x:x.iloc[0],\n    'PTS_x':[np.sum,np.mean],'PTS_y':[np.sum,np.mean]\n})\n\npointsByYears.columns.set_levels(['Winner','Runnerup','Winner Points','Runnerup Points'],level=0,inplace=True)\npointsByYears.columns.set_levels(['','per game','total'],level=1,inplace=True)\n\npointsByYears['No of Games'] = groupByYear.count()['Team_x']\n\npointsByYears[('Total Points','total')] = pointsByYears[('Runnerup Points','total')] + pointsByYears[('Winner Points','total')]\npointsByYears[('Total Points','per game')] = pointsByYears[('Total Points','total')] \/ pointsByYears['No of Games']\n\npointsByYears[('Difference In Points','total')] = pointsByYears[('Winner Points','total')] - pointsByYears[('Runnerup Points','total')]\npointsByYears[('Difference In Points','per game')] = pointsByYears[('Difference In Points','total')] \/ pointsByYears['No of Games']\n\npointsByYears.head(5)","c5560fde":"pointsByYears.sort_values(by=('Total Points','per game'),ascending=False).head(5)","9f3c397d":"pointsByYears.sort_values(by=('Difference In Points','per game'),ascending=False).head(5)","eff385c8":"pointsByYears[pointsByYears['Difference In Points','total']<0]","303ac59a":"**Question 8**: Which teams have come back and win the final from a 3-1 deficit?","6446b6d3":"**Question 9**: Which teams swept the series","702b83b9":"**Question 7**: Which teams have come back and win the final from a 3-0 deficit?","c304a71f":"**Question 4**: Which teams have not lost in the NBA final?","d971cb78":"**Question 5**: Which teams have not won in the NBA final?","455b67c7":"**Question 1:** Which teams have won the NBA final and how many times?","385b65ad":"**Question 3**: How many times have a team appears in the final?","a8955761":"**Question 11**: Top 5 highest points margin per game","b97ed61c":"**Question 2:** Which teams have lost in the NBA final and how many times?","555d33b5":"Some records seems to have typo or wrong information. Let's correct them.","684380f2":"**Question 12**: What are the series where the runnerup scores more than the champion","53889a76":"**PART 2: Points**\n\nPrepare the features and data structure to analyse points in the NBA final","16540ee3":"This kernel addresses the questions that NBA fans have on NBA final games.","49ceada1":"Let's combine champion and runnerup and add additional features.","a260fc1b":"**Question 10**: Top 5 Highest scoring series (per game).","22e4684f":"**Question 6**: ## which teams have come back and win the final from a 2-0 deficit?"}}