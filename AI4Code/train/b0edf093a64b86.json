{"cell_type":{"3e7ae17a":"code","25890ff2":"code","29ab9fba":"code","c10f1539":"code","4f4585b0":"code","94413907":"code","28fbca43":"code","00656d1c":"code","8c9ee1c3":"code","d08e3b28":"code","40cc7597":"code","796de2a6":"code","57a01967":"code","b5ce40d0":"code","9c084a13":"code","32becfbb":"code","7200caf7":"code","f7f098cf":"markdown","df41a6fc":"markdown","5d3ac286":"markdown","016f4cb5":"markdown","d2ed2da8":"markdown","87aff144":"markdown","3d8f2387":"markdown","7bc62074":"markdown","e256df3d":"markdown","44c5dc21":"markdown","e8e5b72c":"markdown","98b9ab74":"markdown","63f885e5":"markdown","d1d62bd4":"markdown","5c7d46cb":"markdown","c105e122":"markdown","bd37475d":"markdown","a28a0a0f":"markdown","7ff83c66":"markdown"},"source":{"3e7ae17a":"tr_path = '\/kaggle\/input\/ml2021spring-hw1\/covid.train.csv'  # path to training data\ntt_path = '\/kaggle\/input\/ml2021spring-hw1\/covid.test.csv'   # path to testing data\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","25890ff2":"# PyTorch\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\n\n# For data preprocess\nimport numpy as np\nimport csv\nimport os\n\n# For plotting\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\n\nmyseed = 2020815  # set a random seed for reproducibility\ntorch.backends.cudnn.deterministic = True\ntorch.backends.cudnn.benchmark = False\nnp.random.seed(myseed)\ntorch.manual_seed(myseed)\nif torch.cuda.is_available():\n    torch.cuda.manual_seed_all(myseed)","29ab9fba":"def get_device():\n    ''' Get device (if GPU is available, use GPU) '''\n    return 'cuda' if torch.cuda.is_available() else 'cpu'\n\ndef plot_learning_curve(loss_record, title=''):\n    ''' Plot learning curve of your DNN (train & dev loss) '''\n    total_steps = len(loss_record['train'])\n    x_1 = range(total_steps)\n    x_2 = x_1[::len(loss_record['train']) \/\/ len(loss_record['dev'])]\n    figure(figsize=(6, 4))\n    plt.plot(x_1, loss_record['train'], c='tab:red', label='train')\n    plt.plot(x_2, loss_record['dev'], c='tab:cyan', label='dev')\n    plt.ylim(0.0, 5.)\n    plt.xlabel('Training steps')\n    plt.ylabel('MSE loss')\n    plt.title('Learning curve of {}'.format(title))\n    plt.legend()\n    plt.show()\n\n\ndef plot_pred(dv_set, model, device, lim=35., preds=None, targets=None):\n    ''' Plot prediction of your DNN '''\n    if preds is None or targets is None:\n        model.eval()\n        preds, targets = [], []\n        for x, y in dv_set:\n            x, y = x.to(device), y.to(device)\n            with torch.no_grad():\n                pred = model(x)\n                preds.append(pred.detach().cpu())\n                targets.append(y.detach().cpu())\n        preds = torch.cat(preds, dim=0).numpy()\n        targets = torch.cat(targets, dim=0).numpy()\n\n    figure(figsize=(5, 5))\n    plt.scatter(targets, preds, c='r', alpha=0.5)\n    plt.plot([-0.2, lim], [-0.2, lim], c='b')\n    plt.xlim(-0.2, lim)\n    plt.ylim(-0.2, lim)\n    plt.xlabel('ground truth value')\n    plt.ylabel('predicted value')\n    plt.title('Ground Truth v.s. Prediction')\n    plt.show()","c10f1539":"import pandas as pd\nimport numpy as np\n\ndata = pd.read_csv('\/kaggle\/input\/ml2021spring-hw1\/covid.train.csv')\nx = data[data.columns[1:94]]\ny = data[data.columns[94]]\n\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_regression\n\nfrom sklearn import preprocessing\nx = (x - x.min()) \/ (x.max() - x.min())\n\nbestfeatures = SelectKBest(score_func=f_regression, k=5)\nfit = bestfeatures.fit(x,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(x.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Specs','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(15,'Score'))  #print 15 best features","4f4585b0":"class COVID19Dataset(Dataset):\n    ''' Dataset for loading and preprocessing the COVID19 dataset '''\n    def __init__(self,\n                 path,\n                 mode='train',\n                 target_only=True):\n        self.mode = mode\n\n        # Read data into numpy arrays\n        with open(path, 'r') as fp:\n            data = list(csv.reader(fp))\n            data = np.array(data[1:])[:, 1:].astype(float)\n        \n        if not target_only:\n            feats = list(range(93))\n            # feats = list(range(1, 40)) + [57, 75]\n        else:\n            # TODO: Using 40 states & 2 tested_positive features (indices = 57 & 75)\n            # feats = list(range(1, 41)) + [57, 75]\n            feats = [75, 57, 42, 60, 78, 43, 61, 79, 40, 58, 76, 41, 59, 77] #\u4e0a\u9762\u6311\u9009\u7684\u6700\u4f18\u7279\u5f81\n        if mode == 'test':\n            # Testing data\n            # data: 893 x 93 (40 states + day 1 (18) + day 2 (18) + day 3 (17))\n            data = data[:, feats]\n            self.data = torch.FloatTensor(data)\n        else:\n            # Training data (train\/dev sets)\n            # data: 2700 x 94 (40 states + day 1 (18) + day 2 (18) + day 3 (18))\n            target = data[:, -1]\n            data = data[:, feats]\n            \n            # Splitting training data into train & dev sets\n            # \u5728\u786e\u5b9a\u53c2\u6570\u540e\uff0c\u4f7f\u7528\u6240\u6709\u6570\u636e\u8fdb\u884c\u8bad\u7ec3\uff0c\u5373\u8bad\u7ec3\u96c6=\u9a8c\u8bc1\u96c6\n            if mode == 'train':\n                #indices = [i for i in range(len(data)) if i % 10 != 0]\n                indices = [i for i in range(len(data))]\n            elif mode == 'dev':\n                #indices = [i for i in range(len(data)) if i % 10 == 0]\n                indices = [i for i in range(len(data))]\n            \n            # Convert data into PyTorch tensors\n            self.data = torch.FloatTensor(data[indices])\n            self.target = torch.FloatTensor(target[indices])\n\n        # Normalize features (you may remove this part to see what will happen)\n        self.data[:, 40:] = \\\n            (self.data[:, 40:] - self.data[:, 40:].mean(dim=0, keepdim=True)) \\\n            \/ self.data[:, 40:].std(dim=0, keepdim=True)\n\n        self.dim = self.data.shape[1]\n\n        print('Finished reading the {} set of COVID19 Dataset ({} samples found, each dim = {})'\n              .format(mode, len(self.data), self.dim))\n\n    def __getitem__(self, index):\n        # Returns one sample at a time\n        if self.mode in ['train', 'dev']:\n            # For training\n            return self.data[index], self.target[index]\n        else:\n            # For testing (no target)\n            return self.data[index]\n\n    def __len__(self):\n        # Returns the size of the dataset\n        return len(self.data)","94413907":"def prep_dataloader(path, mode, batch_size, n_jobs=0, target_only=False):\n    ''' Generates a dataset, then is put into a dataloader. '''\n    dataset = COVID19Dataset(path, mode=mode, target_only=target_only)  # Construct dataset\n    dataloader = DataLoader(\n        dataset, batch_size,\n        shuffle=(mode == 'train'), drop_last=False,\n        num_workers=n_jobs, pin_memory=True)                            # Construct dataloader\n    return dataloader","28fbca43":"class NeuralNet(nn.Module):\n    ''' A simple fully-connected deep neural network '''\n    def __init__(self, input_dim):\n        super(NeuralNet, self).__init__()\n\n        # Define your neural network here\n        # TODO: How to modify this model to achieve better performance?\n        self.net = nn.Sequential(\n            nn.Linear(input_dim, 32),\n            nn.BatchNorm1d(32),#\u4f7f\u7528BN\uff0c\u52a0\u901f\u6a21\u578b\u8bad\u7ec3\n            nn.Dropout(p=0.2),#\u4f7f\u7528Dropout\uff0c\u51cf\u5c0f\u8fc7\u62df\u5408\uff0c\u6ce8\u610f\u4e0d\u80fd\u5728BN\u4e4b\u524d\n            nn.LeakyReLU(),#\u66f4\u6362\u6fc0\u6d3b\u51fd\u6570\n            nn.Linear(32, 1)\n        )\n\n        # Mean squared error loss\n        self.criterion = nn.MSELoss(reduction='mean')\n        #self.criterion = nn.SmoothL1Loss(size_average=True)\n\n    def forward(self, x):\n        ''' Given input of size (batch_size x input_dim), compute output of the network '''\n        return self.net(x).squeeze(1)\n\n    def cal_loss(self, pred, target):\n        ''' Calculate loss '''\n        regularization_loss = 0\n        for param in model.parameters():\n        # TODO: you may implement L1\/L2 regularization here\n        # \u4f7f\u7528L2\u6b63\u5219\u9879\n            # regularization_loss += torch.sum(abs(param))\n            regularization_loss += torch.sum(param ** 2)\n        return self.criterion(pred, target) + 0.00075 * regularization_loss","00656d1c":"def train(tr_set, dv_set, model, config, device):\n    ''' DNN training '''\n\n    n_epochs = config['n_epochs']  # Maximum number of epochs\n\n    # Setup optimizer\n    optimizer = getattr(torch.optim, config['optimizer'])(\n        model.parameters(), **config['optim_hparas'])\n\n    min_mse = 1000.\n    loss_record = {'train': [], 'dev': []}      # for recording training loss\n    early_stop_cnt = 0\n    epoch = 0\n    while epoch < n_epochs:\n        model.train()                           # set model to training mode\n        for x, y in tr_set:                     # iterate through the dataloader\n            optimizer.zero_grad()               # set gradient to zero\n            x, y = x.to(device), y.to(device)   # move data to device (cpu\/cuda)\n            pred = model(x)                     # forward pass (compute output)\n            mse_loss = model.cal_loss(pred, y)  # compute loss\n            mse_loss.backward()                 # compute gradient (backpropagation)\n            optimizer.step()                    # update model with optimizer\n            loss_record['train'].append(mse_loss.detach().cpu().item())\n\n        # After each epoch, test your model on the validation (development) set.\n        dev_mse = dev(dv_set, model, device)\n        if dev_mse < min_mse:\n            # Save model if your model improved\n            min_mse = dev_mse\n            print('Saving model (epoch = {:4d}, loss = {:.4f})'\n                .format(epoch + 1, min_mse))\n            torch.save(model.state_dict(), config['save_path'])  # Save model to specified path\n            early_stop_cnt = 0\n        else:\n            early_stop_cnt += 1\n\n        epoch += 1\n        loss_record['dev'].append(dev_mse)\n        if early_stop_cnt > config['early_stop']:\n            # Stop training if your model stops improving for \"config['early_stop']\" epochs.\n            break\n\n    print('Finished training after {} epochs'.format(epoch))\n    return min_mse, loss_record","8c9ee1c3":"def dev(dv_set, model, device):\n    model.eval()                                # set model to evalutation mode\n    total_loss = 0\n    for x, y in dv_set:                         # iterate through the dataloader\n        x, y = x.to(device), y.to(device)       # move data to device (cpu\/cuda)\n        with torch.no_grad():                   # disable gradient calculation\n            pred = model(x)                     # forward pass (compute output)\n            mse_loss = model.cal_loss(pred, y)  # compute loss\n        total_loss += mse_loss.detach().cpu().item() * len(x)  # accumulate loss\n    total_loss = total_loss \/ len(dv_set.dataset)              # compute averaged loss\n\n    return total_loss","d08e3b28":"def test(tt_set, model, device):\n    model.eval()                                # set model to evalutation mode\n    preds = []\n    for x in tt_set:                            # iterate through the dataloader\n        x = x.to(device)                        # move data to device (cpu\/cuda)\n        with torch.no_grad():                   # disable gradient calculation\n            pred = model(x)                     # forward pass (compute output)\n            preds.append(pred.detach().cpu())   # collect prediction\n    preds = torch.cat(preds, dim=0).numpy()     # concatenate all predictions and convert to a numpy array\n    return preds","40cc7597":"device = get_device()\nos.makedirs('models', exist_ok=True) \ntarget_only = True                   # \u4f7f\u7528\u524d\u9762\u8bbe\u7f6e\u7684\u7279\u5f81\n\n# TODO: How to tune these hyper-parameters to improve your model's performance?\nconfig = {\n    'n_epochs': 10000,                # \u56e0\u4e3a\u6709early_stop\uff0c\u6240\u4ee5\u5927\u4e00\u70b9\u6ca1\u6709\u5f71\u54cd\n    'batch_size': 200,               # \u5fae\u8c03batchsize\n    'optimizer': 'Adam',              # \u4f7f\u7528Adam\u4f18\u5316\u5668\n    'optim_hparas': {                # \u5b8c\u5168\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\n        #'lr': 0.0001,                 \n        #'momentum': 0.9,             \n        #'weight_decay': 5e-4,\n    },\n    'early_stop': 500,               # \u7531\u4e8e\u6700\u540e\u8bad\u7ec3\u4f7f\u7528\u4e86\u6240\u6709\u6570\u636e\uff0c\u5927\u4e00\u70b9\u5f71\u54cd\u4e0d\u5927\n    'save_path': 'models\/model.pth'  \n}","796de2a6":"tr_set = prep_dataloader(tr_path, 'train', config['batch_size'], target_only=target_only)\ndv_set = prep_dataloader(tr_path, 'dev', config['batch_size'], target_only=target_only)\ntt_set = prep_dataloader(tt_path, 'test', config['batch_size'], target_only=target_only)","57a01967":"model = NeuralNet(tr_set.dataset.dim).to(device)  # Construct model and move to device","b5ce40d0":"model_loss, model_loss_record = train(tr_set, dv_set, model, config, device)","9c084a13":"plot_learning_curve(model_loss_record, title='deep model')","32becfbb":"del model\nmodel = NeuralNet(tr_set.dataset.dim).to(device)\nckpt = torch.load(config['save_path'], map_location='cpu')  # Load your best model\nmodel.load_state_dict(ckpt)\nplot_pred(dv_set, model, device)  # Show prediction on the validation set","7200caf7":"def save_pred(preds, file):\n    ''' Save predictions to specified file '''\n    print('Saving results to {}'.format(file))\n    with open(file, 'w') as fp:\n        writer = csv.writer(fp)\n        writer.writerow(['id', 'tested_positive'])\n        for i, p in enumerate(preds):\n            writer.writerow([i, p])\n\npreds = test(tt_set, model, device)  # predict COVID-19 cases with your model\nsave_pred(preds, '\/kaggle\/working\/submit.csv')         # save prediction file to pred.csv","f7f098cf":"# **Testing**\nThe predictions of your model on testing set will be stored at `pred.csv`.","df41a6fc":"# **Load data and model**","5d3ac286":"# **Train\/Dev\/Test**","016f4cb5":"# **Reference**\nThis code is completely written by Heng-Jui Chang @ NTUEE.  \nCopying or reusing this code is required to specify the original author. \n\nE.g.  \nSource: Heng-Jui Chang @ NTUEE (https:\/\/github.com\/ga642381\/ML2021-Spring\/blob\/main\/HW01\/HW01.ipynb)\n","d2ed2da8":"### **\u7279\u5f81\u9009\u62e9**","87aff144":"## **Training**","3d8f2387":"# **Import Some Packages**","7bc62074":"# **Deep Neural Network**\n\n`NeuralNet` is an `nn.Module` designed for regression.\nThe DNN consists of 2 fully-connected layers with ReLU activation.\nThis module also included a function `cal_loss` for calculating loss.\n","e256df3d":"# **Download Data**","44c5dc21":"## **DataLoader**\n\nA `DataLoader` loads data from a given `Dataset` into batches.\n","e8e5b72c":"\u672cnotebook\u57fa\u4e8eHeng-Jui Chang @ NTUEE\u63d0\u4f9b\u7684\u539f\u59cb\u4ee3\u7801\uff0c\u611f\u8c22\u52a9\u6559\u7684\u8f9b\u52e4\u5de5\u4f5c\u3002","98b9ab74":"<a href=\"https:\/\/colab.research.google.com\/github\/YClemontree\/ML2021-HW\/blob\/main\/HW1.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","63f885e5":"# **Setup Hyper-parameters**\n\n`config` contains hyper-parameters for training and the path to save your model.","d1d62bd4":"## **Dataset**\n\nThe `COVID19Dataset` below does:\n* read `.csv` files\n* extract features\n* split `covid.train.csv` into train\/dev sets\n* normalize features\n\nFinishing `TODO` below might make you pass medium baseline.","5c7d46cb":"# **Preprocess**\n\nWe have three kinds of datasets:\n* `train`: for training\n* `dev`: for validation\n* `test`: for testing (w\/o target value)","c105e122":"## **Testing**","bd37475d":"## **Validation**","a28a0a0f":"# **Some Utilities**","7ff83c66":"# **Start Training!**"}}