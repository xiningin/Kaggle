{"cell_type":{"a3664efb":"code","573a4f14":"code","65dd62d0":"code","eb65f5e5":"code","e4be3c65":"code","84d08ec0":"code","d7121710":"code","9c7185b4":"code","141cad28":"code","d5b74b10":"code","1a855643":"code","1aaa4147":"code","19ab850f":"code","279d938b":"code","32d0aad5":"code","4501ecae":"code","7df13c84":"code","0720aae1":"code","402e3b71":"code","58f754d7":"code","b03be0c3":"code","6018efdd":"code","f73a2e34":"code","c0462718":"code","f2cd5b13":"code","0048ad71":"code","69e26bf3":"code","c2340035":"code","a394e3e7":"code","f0d657d1":"code","7f5c0586":"code","b8d9d67e":"code","9ea099e3":"code","a443ed86":"code","6a056770":"code","dfe86c2a":"code","233d5f0d":"code","157c2970":"code","118fad1b":"code","f99a4640":"code","a5ce610c":"code","ff66f824":"code","786fcd71":"code","f1fb7241":"code","88806904":"code","5b1ec94c":"markdown","d654edc2":"markdown","3f43412f":"markdown","7da47f09":"markdown","4e6e847c":"markdown","3fbca972":"markdown","102ef7b4":"markdown","ebb9c4fc":"markdown","0432a705":"markdown","409d6ec9":"markdown","52d44cde":"markdown","a6879074":"markdown","00c170bf":"markdown","55cd7460":"markdown","674ff5b8":"markdown","c6a0d374":"markdown","8b27c49d":"markdown","3e992bf8":"markdown","5e532b8d":"markdown","df855ec0":"markdown","239d4842":"markdown","907749ad":"markdown","097334e1":"markdown","69c59730":"markdown","d24f8fe2":"markdown","1e3a0901":"markdown","8420a227":"markdown","9ef0a258":"markdown"},"source":{"a3664efb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","573a4f14":"import matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sb\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.model_selection import cross_val_score","65dd62d0":"df=pd.read_csv(\"\/kaggle\/input\/water-potability\/water_potability.csv\")\ndf.head()","eb65f5e5":"df.shape","e4be3c65":"df[\"Potability\"].unique()","84d08ec0":"df.isnull().sum()","d7121710":"df[\"ph\"]=df[\"ph\"].fillna(0)\ndf[\"Sulfate\"]=df[\"Sulfate\"].fillna(0)\ndf[\"Trihalomethanes\"]=df[\"Trihalomethanes\"].fillna(0)","9c7185b4":"df.isnull().sum()","141cad28":"def lowerupper(col):\n    q1=np.quantile(col,.25)\n    q3=np.quantile(col,.75)\n    inter=q3-q1\n    lowerbound=q1-(inter*1.5)\n    upperbound=q3+(inter*1.5)\n    outlier=[]\n    for x in col:\n        if((x>upperbound)or(x<lowerbound)):\n            outlier.append(x)\n    return outlier","d5b74b10":"col=df.columns\nprint(col)","1a855643":"for i in col:\n    outlier=lowerupper(df[i].values)\n    print(len(outlier),\"outliers are present in\",i)","1aaa4147":"def lowerupper_b(col):\n    q1=np.quantile(col,.25)\n    q3=np.quantile(col,.75)\n    inter=q3-q1\n    lowerbound=q1-(inter*1.5)\n    upperbound=q3+(inter*1.5)\n    return lowerbound,upperbound","19ab850f":"for i in col:\n  outlier=lowerupper(df[i].values)\n  if  outlier == 0:\n    print(\"No Outlier is present\")\n  else:\n    lu,ub =lowerupper_b(df[i])\n    df[i]=np.where(df[i]<lu,lu,df[i])\n    df[i]=np.where(df[i]>ub,ub,df[i])","279d938b":"for i in col:\n    outlier=lowerupper(df[i].values)\n    print(len(outlier),\"outliers are present in\",i)","32d0aad5":"df.describe()","4501ecae":"df.head()","7df13c84":"plt.subplot(1,3,1)\nplt.subplots_adjust(left=0,right=3,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"ph\")\nplt.boxplot(df[\"ph\"])\n\nplt.subplot(1,3,2)\nplt.title(\"Hardness\")\nplt.boxplot(df[\"Hardness\"])\n\nplt.subplot(1,3,3)\nplt.title(\"Solids\")\nplt.boxplot(df[\"Solids\"])\n\nplt.show()","0720aae1":"plt.subplot(1,3,1)\nplt.subplots_adjust(left=0,right=3,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"Chloramines\")\nplt.boxplot(df[\"Chloramines\"])\n\nplt.subplot(1,3,2)\nplt.title(\"Sulfate\")\nplt.boxplot(df[\"Sulfate\"])\n\nplt.subplot(1,3,3)\nplt.title(\"Conductivity\")\nplt.boxplot(df[\"Conductivity\"])\n\nplt.show()","402e3b71":"plt.subplot(1,3,1)\nplt.subplots_adjust(left=0,right=3,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"Organic_carbon\")\nplt.boxplot(df[\"Organic_carbon\"])\n\nplt.subplot(1,3,2)\nplt.title(\"Trihalomethanes\")\nplt.boxplot(df[\"Trihalomethanes\"])\n\nplt.subplot(1,3,3)\nplt.title(\"Turbidity\")\nplt.boxplot(df[\"Turbidity\"])\n\nplt.show()","58f754d7":"plt.subplot(1,3,1)\nplt.subplots_adjust(left=0,right=3,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"ph\")\nplt.hist(df[\"ph\"])\n\nplt.subplot(1,3,2)\nplt.title(\"Hardness\")\nplt.hist(df[\"Hardness\"])\n\nplt.subplot(1,3,3)\nplt.title(\"Solids\")\nplt.hist(df[\"Solids\"])\n\nplt.show()","b03be0c3":"plt.subplot(1,3,1)\nplt.subplots_adjust(left=0,right=3,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"Chloramines\")\nplt.hist(df[\"Chloramines\"])\n\nplt.subplot(1,3,2)\nplt.title(\"Sulfate\")\nplt.hist(df[\"Sulfate\"])\n\nplt.subplot(1,3,3)\nplt.title(\"Conductivity\")\nplt.hist(df[\"Conductivity\"])\n\nplt.show()","6018efdd":"plt.subplot(1,3,1)\nplt.subplots_adjust(left=0,right=3,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"Organic_carbon\")\nplt.hist(df[\"Organic_carbon\"])\n\nplt.subplot(1,3,2)\nplt.title(\"Trihalomethanes\")\nplt.hist(df[\"Trihalomethanes\"])\n\nplt.subplot(1,3,3)\nplt.title(\"Turbidity\")\nplt.hist(df[\"Turbidity\"])\n\nplt.show()","f73a2e34":"plt.figure()\nplt.title(\"Potability\")\nla=[0, 1]\nplt.pie(df.groupby(df[\"Potability\"]).size(),labels=la)\nplt.show()","c0462718":"print(df.groupby(df[\"Potability\"]).size())","f2cd5b13":"corr=df.corr()\nplt.figure(figsize=(10,10))\nsb.heatmap(corr, annot=True)\nplt.show()","0048ad71":"df.columns","69e26bf3":"X=df[['ph', 'Hardness', 'Solids', 'Chloramines', 'Sulfate', 'Conductivity',\n       'Organic_carbon', 'Trihalomethanes', 'Turbidity']]\ny=df['Potability']","c2340035":"from imblearn.over_sampling import RandomOverSampler","a394e3e7":"os=RandomOverSampler(random_state=100)\nX_train_res, Y_train_res =os.fit_resample(X,y)\nX_train_res.shape, Y_train_res.shape","f0d657d1":"train_x, test_x, train_y, test_y=train_test_split(X,y,test_size=0.30, random_state=100)\nprint(train_x.shape)\nprint(test_x.shape)\nprint(train_y.shape)\nprint(test_y.shape)","7f5c0586":"sc=StandardScaler()\ntrain_x=sc.fit_transform(train_x)\ntest_x=sc.fit_transform(test_x)","b8d9d67e":"model_lr2=LogisticRegression().fit(train_x,train_y)\nprd_lr2=model_lr2.predict(test_x)","9ea099e3":"print(\"The Accuracy of the model is : \",accuracy_score(prd_lr2,test_y))","a443ed86":"print(\"Classification report :  \\n\",classification_report(prd_lr2,test_y))","6a056770":"params={\n \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n \"min_child_weight\" : [ 1, 3, 5, 7 ],\n \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n    \n}","dfe86c2a":"from sklearn.model_selection import RandomizedSearchCV\nimport xgboost","233d5f0d":"classifier=xgboost.XGBClassifier()","157c2970":"random_search=RandomizedSearchCV(classifier,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)","118fad1b":"random_search.fit(X_train_res, Y_train_res) #X_train_res, Y_train_res","f99a4640":"random_search.best_estimator_","a5ce610c":"random_search.best_params_","ff66f824":"classifier=xgboost.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.5, gamma=0.3, gpu_id=-1,\n              importance_type='gain',\n              learning_rate=0.1, max_delta_step=0, max_depth=15,\n              min_child_weight=5,\n              n_estimators=100, n_jobs=4, num_parallel_tree=1, random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n              tree_method='exact', validate_parameters=1, verbosity=None)","786fcd71":"score=cross_val_score(classifier,X_train_res, Y_train_res,cv=10)","f1fb7241":"score","88806904":"score.mean()","5b1ec94c":"## Null values check","d654edc2":"## Score","3f43412f":"## Logistic Regression","7da47f09":"## Size of data","4e6e847c":"## Splitting Data","3fbca972":"## Replacing Outlier\n- With Upper limit and lower limit of that particular column.","102ef7b4":"- No outlier present now.","ebb9c4fc":"## Hyperparameter Optimization \n- Randomized search CV","0432a705":"## Histogram\n- ph\n- Hardness\n- Solids","409d6ec9":"## Ramdom Over sampler","52d44cde":"## Water Quality\n- *Predict if water is safe for Human consumption*","a6879074":"## Best Estimator","00c170bf":"## Replace Null values\n- With zeros","55cd7460":"## Reading Data","674ff5b8":"## Classification report","c6a0d374":"## Importing Libraries","8b27c49d":"## Pie Chart\n- Potability","3e992bf8":"## Boxplot","5e532b8d":"- No null present now.","df855ec0":"## Best Parameters","239d4842":"- Organic_carbon\n- Trihalomethanes\n- Turbidity","907749ad":"## Standard Scaler","097334e1":"## Corealtion","69c59730":"- Chloramines\n- Sulfate\n- Conductivity","d24f8fe2":"## Descriptive statistical values","1e3a0901":"## Accuracy","8420a227":"## Target feature","9ef0a258":"## Outlier Check"}}