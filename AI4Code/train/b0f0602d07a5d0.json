{"cell_type":{"f909dbdf":"code","19ce06d7":"code","cbf635a3":"code","2b25da9b":"code","fdf38f4b":"code","a02873ce":"code","adf46ef7":"code","1b7b779c":"code","ea56e0f2":"code","f4aa971d":"code","7bdb0e5d":"code","3ec10adc":"code","f97e798e":"code","c495ae43":"code","a1b92a5b":"code","ced4d12c":"code","8339438c":"code","e638eb9c":"code","aae657ef":"code","e12ccc5e":"code","cb04b241":"code","cce8fbab":"code","a6c8bea3":"code","b9d10338":"code","ac1c929f":"code","38010d0a":"code","0d40366b":"code","8e470762":"code","45c04494":"code","b8268442":"code","149afc68":"code","c7d0261b":"code","94502ae7":"code","1b2822bd":"code","e01b7916":"code","65684182":"code","5697abf9":"code","8e2818af":"code","32e71fb1":"code","73653b6e":"code","5891887f":"code","e8e89731":"code","466d3f13":"code","dbaa7717":"code","f802c992":"code","be08c294":"code","48152af5":"code","7edc9352":"code","bd908a08":"code","d2979cb1":"code","aa063d99":"code","56ce51a6":"code","4fade9f9":"markdown","018d7b1c":"markdown","a0ef63d7":"markdown","234936c5":"markdown","fa08526b":"markdown","a03d3aa2":"markdown","a3ed8c6b":"markdown","926d82d4":"markdown","0b949990":"markdown","b0ca7a06":"markdown","6a1f635c":"markdown","184d3bce":"markdown","67d5dcec":"markdown"},"source":{"f909dbdf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori\n\n\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfile_ls = []\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        file_ls.append(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","19ce06d7":"data = pd.DataFrame()\nfor file in file_ls:\n    temp = pd.read_csv(file)\n    data = pd.concat([data, temp],axis = 0, ignore_index = True)","cbf635a3":"def get_missing_data(df):\n    missing_data = df.isnull().sum().to_frame()\n    missing_data.columns = ['count']\n    missing_data['percent'] = missing_data['count']\/df.shape[0]\n    missing_data.sort_values(by = 'count', ascending = False, inplace = False)\n    return missing_data","2b25da9b":"print(get_missing_data(data))","fdf38f4b":"#drop missing values\ndata.dropna(axis = 0, inplace = True)\nprint(get_missing_data(data))","a02873ce":"data.head()\ndata.dtypes\ndata.describe()","adf46ef7":"Quantity_Ordered_str_idx = data.loc[~data['Quantity Ordered'].str.isdigit(),:].index\ndata.drop(Quantity_Ordered_str_idx, axis = 0, inplace = True)","1b7b779c":"data['Quantity Ordered'] = pd.to_numeric(data['Quantity Ordered']).astype('int8')\ndata['Price Each'] = pd.to_numeric(data['Price Each']).astype('float32')\ndata['Order Date'] = pd.to_datetime(data['Order Date'])","ea56e0f2":"data[['Quantity Ordered', 'Price Each']].describe()","f4aa971d":"#data ","7bdb0e5d":"data.head()","3ec10adc":"#data transform\ndata['Revenue'] = data['Quantity Ordered'] * data['Price Each']\n\ndata['Year'] =  data['Order Date'].dt.year\n\ndata['Month'] = data['Order Date'].dt.month\n\ndata['day']  = data['Order Date'].dt.day\n\ndata['Hour'] = data['Order Date'].dt.hour\n\ndata['MonthName'] = data['Order Date'].dt.month_name()\n\ndata['Addr'] = data['Purchase Address'].str.split(' ').apply(lambda x:x[-2])\n\n#data['Minute'] = data['Order Date'].dt.minute","f97e798e":"#data.drop(['Order Date'], axis = 1, inplace = True)","c495ae43":"data.head()","a1b92a5b":"data['Purchase Address'].str.split(' ').apply(lambda x:x[-2])","ced4d12c":"data['MonthName'] = pd.Categorical(data['MonthName'], categories = ['January', 'February', 'March', 'April', 'May','June','July','August','September','October','November','December'], ordered = True)","8339438c":"data['MonthName']","e638eb9c":"month_count_revenue = data.groupby(by = 'MonthName').agg({'Quantity Ordered':'sum', 'Revenue':'sum'}).reset_index()\nmonth_count_revenue.rename(columns = {'Quantity Ordered':'TotalQuan', 'Revenue':'TotalRevenue'}, inplace = True)","aae657ef":"month_count_revenue.sort_values(by = 'MonthName', ascending  = True, inplace = True)","e12ccc5e":"month_count_revenue['TotalQuanRate'] = month_count_revenue['TotalQuan']*100 \/ month_count_revenue['TotalQuan'].sum()\nmonth_count_revenue['TotalRevenueRate'] = month_count_revenue['TotalRevenue']*100 \/ month_count_revenue['TotalRevenue'].sum()","cb04b241":"month_count_revenue.describe()","cce8fbab":"fig, ax = plt.subplots(figsize = (16,8))\nwidth = 0.35\nx = np.arange(month_count_revenue.shape[0])\nrect1 = ax.bar(x = x-width\/2 , height = month_count_revenue['TotalQuanRate'], width = 0.3, color = '#FFA500',label = 'TotalQuantityRate')\nrect2 = ax.bar(x = x+width\/2, height = month_count_revenue['TotalRevenueRate'], width = 0.3, color = '#FF4500', label = 'TotalRevenueRate')\nax.set_xticks(x)\nax.set_xticklabels(month_count_revenue['MonthName'], fontsize = 12)\nax.set_ylim(0,15)\nax.legend(loc = 'upper left')\nax.bar_label(rect1, padding = 3,fmt = '%.1f' )\nax.bar_label(rect2, padding = 3, fmt = '%.1f')\nax.set_xlabel('Order Count and Revenue', fontsize = 16)\nax.set_ylabel('Order Count and Revenue Rate', fontsize = 16)\nax.set_title('Order Total Count and Total Revenue by Month', fontsize = 18, weight = 'semibold')\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.yaxis.set_ticks_position('none')\nax.xaxis.set_ticks_position('none')\nplt.show()","a6c8bea3":"plt.style.available","b9d10338":"fig, ax = plt.subplots(figsize = (18,6))\nplt.style.use('fivethirtyeight')\nsns.countplot(x = 'Product', data = data, ax = ax)\nplt.setp(ax.get_xticklabels(), rotation = 90, fontsize = 12)\nplt.setp(ax.patches, width = 0.5)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.xaxis.set_ticks_position('none')\nax.set_title('Year 2019 Product Sales')\nplt.show()\n","ac1c929f":"data['Product'].unique()","38010d0a":"fig, axes = plt.subplots(4,3, figsize = (28,32))\nfor i in range(4):\n    for j in range(3):\n        m = i*3+j+1\n        tem_data = data.loc[data['Month'] == m,:]\n        sns.countplot(y = 'Product', data = tem_data, ax = axes[i,j])\n        if (i*3+j) % 3 ==0:\n            axes[i,j].set_yticklabels(axes[i,j].get_yticklabels(),fontsize = 16)\n        else:\n            axes[i,j].set_yticklabels('')\n            axes[i,j].set_ylabel('')\n        \n        axes[i,j].set_title('Month = {}'.format(m))","0d40366b":"data.head()","8e470762":"import warnings\nwarnings.filterwarnings('ignore')\nsns.distplot(data['Revenue'])","45c04494":"data['Day'] = data['day'].map({1:'D1',2:'D2',3:'D3',4:'D4',5:'D5',6:'D6',7:'D7',8:'D8',9:'D9',10:'D10',11:'D11',12:'D12',13:'D13',\\\n                              14:'D14',15:'D15',16:'D16', 17:'D17',18:'D18',19:'D19',20:'D20',21:'D21',22:'D22',23:'D23',24:'D24',\\\n                              25:'D25', 26:'D26',27:'D27', 28:'D28',29:'D29',30:'D30',31:'D31'})\ndayQuanOrder = data.groupby(by = 'Day')['Quantity Ordered'].sum().reset_index()\ndayQuanOrder.columns = ['Day', 'QuanOrder']\ndayQuanOrder.sort_values( by = 'QuanOrder', ascending = False, inplace = True)","b8268442":"fig, ax = plt.subplots(figsize = (10,12))\nplt.style.use('seaborn-white')\nrect = ax.barh(y = dayQuanOrder['Day'], width = dayQuanOrder['QuanOrder'])\nax.invert_yaxis()\nax.bar_label(rect, padding = 3)\nax.set_xlim(0,7500)\nax.xaxis.set_ticks_position('none')\nax.set_title('Order Count on Every day')\nax.set_xlabel('Total Count')\nax.set_ylabel('Day')\nplt.show()","149afc68":"salesByAddr = data.groupby(by = 'Addr').agg({'Quantity Ordered':'sum', 'Revenue':'sum'})\nsalesByAddr.reset_index(inplace = True)\nsalesByAddr.columns = ['Addr', 'Ad_TotalOrder', 'Ad_TotalRevenue']\nsalesByAddr.sort_values(by = 'Ad_TotalOrder', inplace = True, ascending = False)","c7d0261b":"salesByAddr","94502ae7":"labels = salesByAddr['Addr'].to_list()\nx = np.arange(len(labels))\nvalue_1 = salesByAddr['Ad_TotalOrder'].to_list()\nvalue_2 = salesByAddr['Ad_TotalRevenue'].to_list()\nfig, axes = plt.subplots(1,2,figsize = (12,4))\naxes[0].plot(x,value_1, 'o-', linewidth = 3,label = 'Address Total Order',color = 'Aqua')\naxes[1].plot(x,value_2, '*-', linewidth = 2, label = 'Address Total Revenue', color = 'red')\nfor i in range(2):\n    axes[i].legend(loc = 'best')\n    axes[i].set_xticks(x)\n    axes[i].set_xticklabels(labels)\nplt.show()","1b2822bd":"SalesByHour = data.groupby(by = 'Hour').agg({'Quantity Ordered':'sum'}).reset_index()\nSalesByHour.rename(columns = {'Quantity Ordered':'OrderByHour'}, inplace = True)","e01b7916":"SalesByHour","65684182":"fig,ax = plt.subplots(figsize = (10,6))\nfig.patch.set_facecolor('#FDD776')\nax.set_facecolor('#FDD776')\nplt.style.use('fivethirtyeight')\nax.plot(SalesByHour.Hour, SalesByHour.OrderByHour, 'o-', label = 'Order of Day', alpha = 0.8)\nax.set_xticks(SalesByHour.Hour)\nax.legend(loc = 'best')\nax.set_xlabel('Day')\nax.set_ylabel('Sales Count')\nax.set_title('Sales Count By the Day')\nplt.show()","5697abf9":"data.shape\n#185950\ndata['Purchase Address'].nunique()\n#140787","8e2818af":"data[data['Purchase Address']=='359 Spruce St, Seattle, WA 98101']['Product'].tolist()","32e71fb1":"AddrProducts = data.groupby(by = 'Purchase Address')['Product'].apply(lambda x:x.tolist())","73653b6e":"AddrProducts = AddrProducts.reset_index()\nAddrProducts.columns = ['Addr', 'Products']","5891887f":"AddrProducts = AddrProducts.reset_index()","e8e89731":"AddrProducts.rename(columns = {'index':'AddrIdx'})","466d3f13":"AddrProducts['ProductsLen'] = AddrProducts['Products'].apply(lambda x:len(x))","dbaa7717":"AddrProductsG1 = AddrProducts.query('ProductsLen>1')","f802c992":"addrPro = AddrProductsG1['Products']\naddrPro","be08c294":"te = TransactionEncoder()\nte.fit(addrPro)\nte_ary = te.transform(addrPro)\nte_df = pd.DataFrame(te_ary, columns=te.columns_)","48152af5":"def get_frequent_items(te_df, min_support = 0.02):\n    frequent_items = apriori(te_df, min_support=min_support, use_colnames=True)\n    frequent_items['length'] = frequent_items['itemsets'].apply(lambda x: len(x))\n    return frequent_items.query('length>1')","7edc9352":"get_frequent_items(te_df, min_support = 0.03)","bd908a08":"te.fit(AddrProducts['Products'])\nte_full_array = te.transform(AddrProducts['Products'])\nte_full_df = pd.DataFrame(te_full_array, columns=te.columns_)","d2979cb1":"productPercent = te_full_df.sum(axis = 0)\/te_full_df.sum(axis = 0).sum()","aa063d99":"productPercent.sort_values(ascending = False)","56ce51a6":"data.head()","4fade9f9":"No null values","018d7b1c":"Cleary to see, Someone bought eletronics likely to buy batteries.","a0ef63d7":"Change datasets's dtypes;","234936c5":"* Q1: What was the best Year for sales? How much was earned that Year?\n\n* Q2: What was the best month for sales? How much was earned that month?\n\n* Q3: What City had the highest number of sales?\n\n* Q4: What time should we display adverstisement to maximize likelihood of customer's buying product?\n\n* Q5: What products are most often sold together?\n\n* Q5: What product sold the most? Why do you think it sold the most?","fa08526b":"Clearly 185950 is greater than 140787, so, many more family bought more than one product.","a03d3aa2":"Very clearly, Quarter 4 is the best months for sales.","a3ed8c6b":"# How Much Probability?\n\n1. How much probability for next people will ordered USB-C Charging Cable?\n\n2. How much probability for next people will ordered iPhone?\n\n3. How much probability for next people will ordered Google Phone?\n\n4. How much probability other peoples will ordered Wired Headphones?","926d82d4":"We can see that 'Lightning Charging Cable','USB-C Charging Cable','AAA Batteries (4-pack)','AA Batteries (4-pack)' is most 4 popular products.","0b949990":"# Target\n","b0ca7a06":"Q1: What was the best Year for sales? How much was earned that Year?\n\nA1:2019 was the best Year for sales.34492036.0 was earned.\n\nQ2: What was the best month for sales? How much was earned that month?\n\nA2:December 12 was the best month for sales, 4613443.50 was earned this month.\n\nQ3: What City had the highest number of sales?\n\nA3: California(CA) had the highes number of sales and Revenue.\n\nQ4: What time should we display adverstisement to maximize likelihood of customer's buying product?\n\nA4:11,12 and 17,18,19 O'clock display adverstisement is best for customer.\n\nQ5: What products are most often sold together?\n\nA5:Electronics often sold together, for example.USB-C Charging Cable with AA Batteries (4-pack)\n\nQ5: What product sold the most? Why do you think it sold the most?\n\nA5:'USB-C Charging Cable' is the most popular product, every one have one or more than one phone,they need more than one USB-C Charging Cable for convenient. and USB-C Charging Cable consumables.\n\n\n","6a1f635c":"We know that only Day31, the total order count is lower, maybe We don't have some money at the end of month.","184d3bce":"# Conclusion","67d5dcec":"1. How much probability for next people will ordered USB-C Charging Cable\n\n2. How much probability for next people will ordered iPhone?\n\n3. How much probability for next people will ordered Google Phone?\n\n4. How much probability other peoples will ordered Wired Headphones?\n\nFrom above, 0.116524 for next people will ordered USB-C Charging Cable, 0.037356 for iPhone, 0.030143 for Google  Phone,0.100849 for Wired Headphones."}}