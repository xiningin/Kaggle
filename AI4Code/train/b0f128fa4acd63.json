{"cell_type":{"a281f7b6":"code","ef66648d":"code","0e4ac2d5":"code","e83a1f07":"code","0e4b025d":"code","4625eb97":"code","28355bd4":"code","24037fc1":"code","4ebd1358":"code","d120b8a3":"code","3a812569":"code","acb546eb":"code","2a306d7c":"code","8cdf50ee":"code","e3c1ee8f":"code","37ad397b":"code","d7029905":"code","e1a325d9":"code","e51a5ad3":"code","db1e1d3b":"code","73e9698e":"code","716dfd9f":"code","c6eb9821":"code","19386b36":"code","b9dc53ea":"code","378ed1c8":"code","1ea6fa27":"code","5891af7f":"code","e07e9e8f":"code","378007c6":"code","9cb36ff0":"code","f96a37a9":"code","80b85176":"code","9290d529":"code","96dcd2c1":"code","44df83aa":"code","72d7190f":"code","15c0cb31":"code","9c2b305b":"markdown","5cb6477c":"markdown","7c3cc7b0":"markdown","7a4b1e01":"markdown","30250e4f":"markdown","654b3924":"markdown","e925b0f2":"markdown","03c5a6fd":"markdown","2298c620":"markdown","01aa254d":"markdown","23026fa4":"markdown","f77e6a24":"markdown","93c7852a":"markdown"},"source":{"a281f7b6":"!pip install statsmodels>=0.9.0\n!pip install yfinance --upgrade --no-cache-dir\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom IPython.display import display\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\nimport statsmodels.api as sm\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing, SimpleExpSmoothing, Holt\n\nimport pandas_datareader as pdr\nimport datetime \nimport math\nimport yfinance as yf\nfrom statsmodels.tsa.stattools import adfuller\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\n#from sklearn.preprocessing import MinMaxScaler\n#from keras.models import Sequential\n#from keras.layers import Dense, Dropout, LSTM","ef66648d":"#df = pd.DataFrame()\n#data = yf.Ticker(\"BTC\")\n#df = data.history(period=\"max\", interval= '1m', start=\"2021-05-10\", end=\"2021-05-30\")\n#df = yf.download(\"AAPL\", start=\"2021-05-01\", end=\"2021-05-30\")","0e4ac2d5":"# BTC-USD is the bitoin paired with American dollar\n\ndf = pdr.get_data_yahoo('JPM', start=datetime.datetime(2021, 1, 1), end=datetime.datetime(2021, 5, 31))","e83a1f07":"display(df.head())\ndisplay(df.tail())","0e4b025d":"display(df.info())\ndisplay(df.columns)","4625eb97":"df.isnull().any()","28355bd4":"rcParams['figure.figsize'] = 22, 12\n\n#plt.plot(df.Volume)\n#plt.title('Volume')\n\n\nfig, axs = plt.subplots(3, 2)\n\naxs[0, 0].plot( df.index, df.Open, color = 'red')\n#axs[0, 0].xticks(rotation=45)\naxs[0, 0].set_title('Open')\n    \naxs[0, 1].plot( df.index, df.Close, color = 'blue')\naxs[0, 1].set_title('Close')\n    \naxs[1, 0].plot( df.index, df.High, color = 'green')\naxs[1, 0].set_title('High')\n\naxs[1, 1].plot( df.index, df.Low, color = 'grey')\naxs[1, 1].set_title('Low')\n\naxs[2, 0].plot( df.index, df['Adj Close'], color = 'purple')\naxs[2, 0].set_title('Adj Close')\n\naxs[2, 1].plot( df.index, df.Volume, color = 'black')\naxs[2, 1].set_title('Volume')\n\n","24037fc1":"# Testing this function\ndef RSI(prices, n):\n        deltas = np.diff(prices)\n        seed = deltas[:n+1]\n        up = seed[seed >= 0].sum()\/n\n        down = -seed[seed < 0].sum()\/n\n        rs = up\/down\n        rsi = np.zeros_like(prices)\n        rsi[:n] = 100. - 100.\/(1.+rs)\n\n        for i in range(n, len(prices)):\n            delta = deltas[i-1]  # The diff is 1 shorter\n\n            if delta > 0:\n                upval = delta\n                downval = 0.\n            else:\n                upval = 0.\n                downval = -delta\n\n            up = (up*(n-1) + upval)\/n\n            down = (down*(n-1) + downval)\/n\n\n            rs = up\/down\n            rsi[i] = 100. - 100.\/(1.+rs)\n\n        return rsi\n","4ebd1358":"# Moving average\ndf['MA6'] = df['Close'].rolling(window=6).mean()\ndf['MA12'] = df['Close'].rolling(window=12).mean()\ndf['MA26'] = df['Close'].rolling(window=26).mean()\n\n# Moving average convergence divergence\ndf['MACD'] = df['MA12'] - df['MA26']\ndf['MACDSIG'] = df['MACD'].ewm(span = 9).mean()\n\n# Exponential moving average\ndf['EMA6'] = df['Close'].ewm(span = 6).mean()\ndf['EMA12'] = df['Close'].ewm(span = 12).mean()\ndf['EMA24'] = df['Close'].ewm(span = 24).mean()\n","d120b8a3":"# Relative strength index\ndf['RSI6'] = RSI(df['Close'].copy(), 6)\ndf['RSI12'] = RSI(df['Close'].copy(), 12)\ndf['RSI24'] = RSI(df['Close'].copy(), 24)","3a812569":"def ulcer_index(df): \n  max_close = df[\"Close\"].max()\n  df[\"Pct Drawdown\"] = ((df[\"Close\"] - max_close)\/max_close) * 100\n  df[\"Pct Drawdown Sq\"] = df[\"Pct Drawdown\"].map(lambda x: x ** 2.0)\n\n  square_avg = ((df[\"Pct Drawdown Sq\"].sum())\/float(len(df[\"Pct Drawdown Sq\"])))\n  ulcer_index = math.sqrt(square_avg)\n  return ulcer_index","acb546eb":"tmp = ulcer_index(df.copy())\ntmp","2a306d7c":"df.tail()","8cdf50ee":"#Stochastic index\n\ndf['STOCH_14high'] = df['High'].rolling(14).max()\ndf['STOCH_14low'] = df['Low'].rolling(14).min()\ndf['STOCH_%K'] = (df['Close'] - df['STOCH_14low'])*100\/(df['STOCH_14high'] - df['STOCH_14low'])\ndf['STOCH_%D'] = df['STOCH_%K'].rolling(3).mean()\ndf.head()","e3c1ee8f":"#Bollinger Bands\n\ndf['MA20'] = df['Close'].rolling(window=20).mean()\ndf['20STD'] = df['Close'].rolling(window=20).std() \n\ndf['Upper'] = df['MA20'] + (df['20STD'] * 2)\ndf['Lower'] = df['MA20'] - (df['20STD'] * 2)","37ad397b":"df.dropna(inplace=True, axis=0)","d7029905":"#rcParams['figure.figsize'] = 19, 10\n\nplt.figure(figsize=(18, 5), dpi=80)\nplt.plot(df.Close, label = 'Close')\nplt.title('Close')\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.grid()\n#plt.xlim([df.index.min(), df.index.max()])\n\n\nfig, axs = plt.subplots(6, 1)\n\n#Mobing Average\naxs[0].legend()\naxs[0].plot(df.MA6, color = 'red', label = 'MA6')\naxs[0].plot(df.MA12, color = 'green', label = 'MA12')\naxs[0].plot(df.MA26, color = 'blue', label = 'MA26')\naxs[0].legend(loc='center left', bbox_to_anchor=(1, 0.5))\n#axs[0].grid()\n\n#MACD\naxs[1].legend()\naxs[1].plot(df.MACD, color = 'blue', label = 'MACD')\naxs[1].plot(df.MACDSIG, color = 'red', label = 'SIGNAL')\naxs[1].legend(loc='center left', bbox_to_anchor=(1, 0.5))\n#axs[1].grid()\n    \n#EMA\naxs[2].legend()\naxs[2].plot(df.EMA6, color = 'red', label = 'EMA6')\naxs[2].plot(df.EMA12, color = 'green', label = 'EMA12')\naxs[2].plot(df.EMA24, color = 'blue', label = 'EMA24')\naxs[2].legend(loc='center left', bbox_to_anchor=(1, 0.5))\n#axs[2].grid()\n\n#RSI\naxs[3].legend()\naxs[3].plot(df.RSI6, color = 'red', label = 'RSI6')\naxs[3].plot(df.RSI12, color = 'green', label = 'RSI12')\naxs[3].plot(df.RSI24, color = 'blue', label = 'RSI24')\naxs[3].axhline(y=70,linestyle='--',color='gray', label = '70')\naxs[3].axhline(y=30,linestyle='--',color='gray', label = '30')\naxs[3].legend(loc='center left', bbox_to_anchor=(1, 0.5))\n#axs[3].grid()\n\n#Stochastic\naxs[4].legend()\naxs[4].plot(df['STOCH_%K'], color = 'blue', label = '%K')\naxs[4].plot(df['STOCH_%D'], color = 'red', label = '%D')\naxs[4].axhline(y=80,linestyle='--',color='gray', label = '80')\naxs[4].axhline(y=20,linestyle='--',color='gray', label = '20')\naxs[4].legend(loc='center left', bbox_to_anchor=(1, 0.5))\n#axs[4].grid()\n\n#Bollinger Bands\naxs[5].legend()\naxs[5].plot(df['Close'], color = 'blue', label = 'Close')\naxs[5].plot(df['Upper'], color = 'red', label = 'Upper')\naxs[5].plot(df['Lower'], color = 'green', label = 'Lower')\n#axs[5].plot(df['MA20'], color = 'black', label = 'MA20')\naxs[5].legend(loc='center left', bbox_to_anchor=(1, 0.5))\n#axs[5].grid()\n","e1a325d9":"def test_stationarity(timeseries):\n    \n    #Determing rolling statistics\n    rolmean = timeseries.rolling(window=12).mean()\n    rolstd = timeseries.rolling(window=12).std()\n\n    #Plot rolling statistics:\n    orig = plt.plot(timeseries, color='blue',label='Original')\n    mean = plt.plot(rolmean, color='red', label='Rolling Mean')\n    std = plt.plot(rolstd, color='black', label = 'Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)\n    \n    #Perform Dickey-Fuller test:\n    print('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print(dfoutput)","e51a5ad3":"test_stationarity(df.Close)","db1e1d3b":"train=df[0:int(df.shape[0]*0.8)] \ntest=df[int(df.shape[0]*0.8)-1:]","73e9698e":"train.Close.plot(figsize=(15,6), fontsize=14)\ntest.Close.plot(figsize=(15,6), fontsize=14)\nplt.show()","716dfd9f":"rcParams['figure.figsize'] = 15, 6\nts_log = np.log(df.Close)\nplt.plot(ts_log)","c6eb9821":"rcParams['figure.figsize'] = 15, 6\nmoving_avg = ts_log.rolling(12).mean()\nplt.plot(ts_log)\nplt.plot(moving_avg, color='red')","19386b36":"ts_moving_avg_diff = ts_log - moving_avg\nts_moving_avg_diff.head(12)","b9dc53ea":"ts_moving_avg_diff.dropna(inplace=True)\ntest_stationarity(ts_moving_avg_diff)","378ed1c8":"expweighted_mavg = ts_log.ewm(halflife = 12).mean()\nplt.plot(ts_log)\nplt.plot(expweighted_mavg, color='red')","1ea6fa27":"ts_log_ewma_diff = ts_log - expweighted_mavg\ntest_stationarity(ts_log_ewma_diff)","5891af7f":"ts_log_diff = ts_log - ts_log.shift()\nplt.plot(ts_log_diff)","e07e9e8f":"ts_log_diff.dropna(inplace=True)\ntest_stationarity(ts_log_diff)","378007c6":"from statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.tsa.arima_model import ARIMA","9cb36ff0":"lag_acf = acf(ts_log_diff, nlags = 20)\nlag_pacf = pacf(ts_log_diff, nlags=20, method = 'ols')","f96a37a9":"plt.plot(lag_acf, label='acf')\nplt.plot(lag_pacf, label='pacf')\nplt.legend(loc='upper right')\nplt.axhline(y=-1.96\/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')\nplt.xlim([0, 8]) ","80b85176":"model = ARIMA(ts_log, order = (3,1,3))\nresults_ARIMA = model.fit(disp=-1)\nplt.plot(ts_log_diff)\nplt.plot(results_ARIMA.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((results_ARIMA.fittedvalues-ts_log_diff)**2))","9290d529":"predicted_ARIMA_diff = pd.Series(results_ARIMA.fittedvalues, copy = True)\npredicted_ARIMA_diff.head()","96dcd2c1":"predicted_ARIMA_diff_cumsum = predicted_ARIMA_diff.cumsum()\npredicted_ARIMA_diff_cumsum.head()","44df83aa":"predictions_ARIMA_log = pd.Series(ts_log.iloc[0], index=ts_log.index)\npredictions_ARIMA_log = predictions_ARIMA_log.add(predicted_ARIMA_diff_cumsum,fill_value=0)\npredictions_ARIMA_log.head()","72d7190f":"predictions_ARIMA = np.exp(predictions_ARIMA_log)\nplt.plot(df.Close)\nplt.plot(predictions_ARIMA)\nplt.title('RMSE: %.4f'% np.sqrt(sum((predictions_ARIMA-df.Close)**2)\/len(df)))","15c0cb31":"results_ARIMA.plot_predict(1,100)\n#plt.plot(df.Close, color='red')\nplt.legend(loc='upper left')","9c2b305b":"## **Naive prediction**","5cb6477c":"## **Arima**","7c3cc7b0":"***\n### ***What if we create some features?***\n#### I was thinking about creating features like: Relative Strength Index, Moving Average, Money Flow Index, Stochastics, MACD, Bollinger Bands, any other features we can.\n***","7a4b1e01":"## Let's have a look at it.","30250e4f":"### To create the features, we'll use the Close column. Let's create the ***Moving Average, Bollinger Bands, Stochastic index, RSI, MACD and EMA***:","654b3924":"Traditional interpretation and usage of the RSI are that values of 70 or above indicate that a security is becoming overbought or overvalued and may be primed for a trend reversal or corrective pullback in price. An RSI reading of 30 or below indicates an oversold or undervalued condition.\n\n","e925b0f2":"## **Holt-Winters Method**","03c5a6fd":"## **Time to train some models...**","2298c620":"## **LSTM**","01aa254d":"***\n## Now let's visualize some charts!\n***","23026fa4":"## **Making it stationary**","f77e6a24":"## **Forecasting**","93c7852a":"***\n### One of the most important things to do is to check the quality of your data, now we check if there is any missing data from our dataset.\n***"}}