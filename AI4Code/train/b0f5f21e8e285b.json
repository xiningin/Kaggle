{"cell_type":{"25177f29":"code","53ed7f43":"code","9766747f":"code","91bc87f8":"code","19571164":"code","eab03d7c":"code","4616a196":"code","c2e7bc77":"code","9f6c5627":"code","bf155156":"code","8a757560":"code","91dcb586":"code","ec8cae16":"code","0a898a25":"code","9f1c64c3":"code","de0d37d4":"code","daeec142":"code","94c52b8f":"code","818bff33":"code","f1d6a566":"code","3d6083ab":"code","e2a5e2ba":"code","d6d2f289":"code","eb13728c":"code","95d95759":"code","e893369e":"code","98b72bc7":"code","be3b73fc":"code","3afb4494":"code","3e9f8e26":"code","f398db23":"code","ee5378cd":"code","0103a9fd":"code","51079b7f":"code","e68ba596":"code","bf3b6971":"code","818891da":"code","d82c5c6c":"code","b69edea2":"code","0d5656fc":"code","699c7b0e":"code","b0bc0ef9":"code","f500cdc7":"code","df374e6c":"code","1579d2f5":"code","77ef3ccf":"code","730cec4a":"code","60589530":"code","6d3efd38":"code","40dec29b":"code","5eee8d84":"code","beae5e14":"code","74c06b3a":"code","f07affcd":"code","8c12a755":"code","74b1d6b7":"code","fbdd21c4":"code","c39811b7":"code","ec9314dc":"code","e74598cf":"code","ed889202":"code","b77d99aa":"code","91f0d8ba":"code","022841ee":"code","c1df48b3":"code","36cc9789":"code","fe77d2a4":"code","32e52367":"code","612061ac":"code","d457791b":"code","4fc852be":"code","8a607824":"code","6386332f":"code","2813d3d2":"code","c19ce198":"code","8e9d67c2":"code","9299a728":"code","fdc339cd":"code","1097ff61":"code","0e6e1c2b":"code","86704fca":"code","e1aad67a":"code","bbb2d69b":"code","56f133cd":"code","1a061caf":"code","8ec6e914":"code","199a1fae":"code","21213926":"code","ec7efc2e":"markdown","3ce02590":"markdown","e6b80b59":"markdown","0b7af255":"markdown","883fcef7":"markdown","639f74e7":"markdown","b7a85569":"markdown","44a74430":"markdown","cfa9a8e5":"markdown","b7928443":"markdown","1eea3496":"markdown","555c6d4b":"markdown","fdd2b780":"markdown","208a45a2":"markdown","4739bdcf":"markdown","785d50e7":"markdown","65aca1d3":"markdown","13faeb61":"markdown"},"source":{"25177f29":"import numpy as np\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import scale \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import model_selection\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn import neighbors\nfrom sklearn.svm import SVR\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","53ed7f43":"df = pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")\ndf.head()","9766747f":"def check_df(dataframe, head=5):\n    print(\"\u26e4 Shape \u26e4\")\n    print(dataframe.shape)\n    print(\"\u26e4 Types \u26e4\")\n    print(dataframe.dtypes)\n    print(\"\u26e4 Head \u26e4\")\n    print(dataframe.head(head))\n    print(\"\u26e4 Tail \u26e4\")\n    print(dataframe.tail(head))\n    print(\"\u26e4 NA \u26e4\")\n    print(dataframe.isnull().sum())\n    print(\"\u26e4 Quantiles \u26e4\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n    \ncheck_df(df)","91bc87f8":"df.nunique() # Number of unique observations in variables","19571164":"df[\"League\"].value_counts()  #categorical variable","eab03d7c":"df.League.value_counts().plot.barh();","4616a196":"df[\"NewLeague\"].value_counts()","c2e7bc77":"df.NewLeague.value_counts().plot.barh();","9f6c5627":"df[\"Division\"].value_counts()","bf155156":"df.Division.value_counts().plot.barh();","8a757560":"df[\"Salary\"].max()","91dcb586":"df[\"Salary\"].min()","ec8cae16":"import seaborn as sns\nsns.distplot(df.Salary);","0a898a25":"df.corr()","9f1c64c3":"f, ax = plt.subplots(figsize= [15,15])\nsns.heatmap(df.corr(), annot=True, fmt=\".2f\", ax=ax, cmap = \"magma\" )\nax.set_title(\"Correlation Matrix\", fontsize=20)\nplt.show()","de0d37d4":"df.sort_values(\"CHits\",ascending = False)","daeec142":"df.groupby(\"League\").agg({\"Salary\": \"mean\"})","94c52b8f":"df.groupby(\"NewLeague\").agg({\"Salary\": \"mean\"})","818bff33":"df.groupby(\"Division\").agg({\"Salary\": \"mean\"})","f1d6a566":"df.groupby(\"CRBI\").agg({\"Salary\": \"mean\"})","3d6083ab":"df.groupby(\"CRuns\").agg({\"Salary\": \"mean\"})","e2a5e2ba":"df.groupby([\"League\",\"Years\"]).agg({\"Salary\": \"mean\"})","d6d2f289":"df.groupby([\"NewLeague\",\"Years\"]).agg({\"Salary\": \"mean\"})","eb13728c":"df.groupby([\"Division\",\"Years\"]).agg({\"Salary\": \"mean\"})","95d95759":"df.groupby(\"League\").agg({\"Errors\": \"mean\"})","e893369e":"df.groupby(\"League\").agg({\"CAtBat\": \"mean\"})","98b72bc7":"df.groupby(\"League\").agg({\"CHits\": \"max\"})","be3b73fc":"df.groupby(\"Division\").agg({\"CHits\": \"max\"})","3afb4494":"df.groupby(\"League\").agg({\"Hits\": \"max\"})","3e9f8e26":"df.groupby(\"League\").agg({\"AtBat\": \"max\"})","f398db23":"df.groupby(\"League\").agg({\"Years\": \"max\"})","ee5378cd":"df.groupby(\"League\").agg({\"Errors\": \"max\"})","0103a9fd":"df.groupby(\"League\").agg({\"PutOuts\": \"max\"})","51079b7f":"df.groupby(\"League\").agg({\"Assists\": \"max\"})","e68ba596":"df.groupby(\"Years\").agg({\"CAtBat\": \"max\"})","bf3b6971":"df.groupby([\"League\", \"Years\"]).agg({\"CAtBat\": \"max\"})","818891da":"df[\"OrtCAtBat\"] = df[\"CAtBat\"] \/ df[\"Years\"]\ndf[\"OrtCHits\"] = df[\"CHits\"] \/ df[\"Years\"]\ndf[\"OrtCHmRun\"] = df[\"CHmRun\"] \/ df[\"Years\"]\ndf[\"OrtCruns\"] = df[\"CRuns\"] \/ df[\"Years\"]\ndf[\"OrtCRBI\"] = df[\"CRBI\"] \/ df[\"Years\"]\ndf[\"OrtCWalks\"] = cwalks = df[\"CWalks\"] \/ df[\"Years\"]\ndf.head()","d82c5c6c":"df = df.drop(['AtBat','Hits','HmRun','Runs','RBI','Walks','Assists','Errors',\"PutOuts\",'League','NewLeague', 'Division'], axis=1)","b69edea2":"df.head()","0d5656fc":"df.isnull().sum()","699c7b0e":"import missingno as msno\nmsno.bar(df);","b0bc0ef9":"df_missing = df[df[\"Salary\"].isnull()].head()\ndf_missing","f500cdc7":"from sklearn.impute import KNNImputer\nimputer = KNNImputer(n_neighbors = 4)\ndf_filled = imputer.fit_transform(df)\n#We fill in the missing observations with the KNN method.","df374e6c":"df = pd.DataFrame(df_filled,columns = df.columns)\ndf.isnull().sum()","1579d2f5":"import seaborn as sns\nsns.boxplot(x = df[\"Salary\"]);","77ef3ccf":"df[\"Salary\"].describe()","730cec4a":"for feature in df:\n\n    Q1 = df[feature].quantile(0.25)\n    Q3 = df[feature].quantile(0.75)\n    IQR = Q3-Q1\n    upper = Q3 + 1.5*IQR\n    lower = Q1 - 1.5*IQR\n\n    if df[(df[feature] > upper) | (df[feature] < lower)].any(axis=None):\n        print(feature,\"yes\")\n        print(df[(df[feature] > upper) | (df[feature] < lower)].shape[0])\n    else:\n        print(feature, \"no\")","60589530":"Q1 = df.Salary.quantile(0.25)\nQ3 = df.Salary.quantile(0.75)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\ndf.loc[df[\"Salary\"] > upper,\"Salary\"] = upper","6d3efd38":"import seaborn as sns\nsns.boxplot(x = df[\"Salary\"]);","40dec29b":"from sklearn.neighbors import LocalOutlierFactor\nlof =LocalOutlierFactor(n_neighbors= 10)\nlof.fit_predict(df)","5eee8d84":"df_scores = lof.negative_outlier_factor_\nnp.sort(df_scores)[0:30]\n","beae5e14":"threshold = np.sort(df_scores)[7]\nthreshold","74c06b3a":"outlier = df_scores > threshold\ndf = df[outlier]","f07affcd":"df.shape","8c12a755":"y = df[\"Salary\"]\nX = df.drop(\"Salary\",axis=1)","74b1d6b7":"X.head()","fbdd21c4":"import statsmodels.api as sm\nfrom sklearn.feature_selection import RFE\n#Backward Elimination\ncols = list(X.columns)\npmax = 1\nwhile (len(cols)>0):\n    p= []\n    X_1 = X[cols]\n    X_1 = sm.add_constant(X_1)\n    model = sm.OLS(y,X_1).fit()\n    p = pd.Series(model.pvalues.values[1:],index = cols)      \n    pmax = max(p)\n    feature_with_p_max = p.idxmax()\n    if(pmax>0.05):\n        cols.remove(feature_with_p_max)\n    else:\n        break\nselected_features_BE = cols\nprint(selected_features_BE)\n\n#https:\/\/towardsdatascience.com\/feature-selection-with-pandas-e3690ad8504b","c39811b7":"X = df[selected_features_BE]\nX.head()","ec9314dc":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","e74598cf":"knn_model = KNeighborsRegressor().fit(X_train, y_train)","ed889202":"y_pred = knn_model.predict(X_test)\nknn_base = np.sqrt(mean_squared_error(y_test, y_pred))\nknn_base","b77d99aa":"knn_params = {\"n_neighbors\": np.arange(2,30,1)}\n\nknn_model = KNeighborsRegressor()\n\nknn_cv_model = GridSearchCV(knn_model, knn_params, cv = 10).fit(X_train, y_train)","91f0d8ba":"knn_cv_model.best_params_","022841ee":"knn_tuned = KNeighborsRegressor(**knn_cv_model.best_params_).fit(X_train, y_train)","c1df48b3":"y_pred = knn_tuned.predict(X_test)\nknn_final = np.sqrt(mean_squared_error(y_test, y_pred))\nknn_final","36cc9789":"svr_model = SVR().fit(X_train, y_train)","fe77d2a4":"y_pred = svr_model.predict(X_test)\nsvr_base = np.sqrt(mean_squared_error(y_test, y_pred))\nsvr_base","32e52367":"svr_model = SVR() \n\nsvr_params = {\"C\": [0.01,0.001, 0.2, 0.1,0.5,0.8,0.9,1, 10, 100, 500,1000]}\n\nsvr_cv_model = GridSearchCV(svr_model, svr_params, cv = 10, n_jobs = -1, verbose =  2).fit(X_train, y_train)","612061ac":"svr_cv_model.best_params_","d457791b":"svr_tuned = SVR(**svr_cv_model.best_params_).fit(X_train, y_train)","4fc852be":"y_pred = svr_tuned.predict(X_test)\nsvr_final = np.sqrt(mean_squared_error(y_test, y_pred))\nsvr_final","8a607824":"cart_model = DecisionTreeRegressor()\ncart_model.fit(X_train, y_train)","6386332f":"y_pred = cart_model.predict(X_test)\ncart_base = np.sqrt(mean_squared_error(y_test, y_pred))\ncart_base","2813d3d2":"cart_model = DecisionTreeRegressor()","c19ce198":"cart_params = {\"max_depth\": [2,3,4,5,10,20,100, 1000],\n              \"min_samples_split\": [2,10,5,30,50,10]}","8e9d67c2":"cart_cv_model = GridSearchCV(cart_model, cart_params, cv = 10, n_jobs = -1, verbose =  2).fit(X_train, y_train)","9299a728":"cart_cv_model.best_params_","fdc339cd":"cart_tuned = DecisionTreeRegressor(**cart_cv_model.best_params_).fit(X_train, y_train)","1097ff61":"y_pred = cart_tuned.predict(X_test)\ncart_final = np.sqrt(mean_squared_error(y_test, y_pred))\ncart_final","0e6e1c2b":"rf_model = RandomForestRegressor(random_state = 42).fit(X_train, y_train)","86704fca":"y_pred = rf_model.predict(X_test)\nrf_base = np.sqrt(mean_squared_error(y_test, y_pred))\nrf_base","e1aad67a":"rf_params = {\"max_depth\": [5,10,None],\n            \"max_features\": [2,5,10],\n            \"n_estimators\": [100, 500, 900],\n            \"min_samples_split\": [2,10,30]}","bbb2d69b":"rf_cv_model = GridSearchCV(rf_model, rf_params, cv = 10, n_jobs = -1, verbose = 2).fit(X_train , y_train)","56f133cd":"rf_cv_model.best_params_","1a061caf":"rf_tuned = RandomForestRegressor(**rf_cv_model.best_params_).fit(X_train, y_train)","8ec6e914":"y_pred = rf_tuned.predict(X_test)\nrf_final = np.sqrt(mean_squared_error(y_test, y_pred))\nrf_final","199a1fae":"rf_tuned.feature_importances_","21213926":"Importance = pd.DataFrame({'Importance':rf_tuned.feature_importances_*100}, \n                          index = ['CRuns', 'CWalks', 'OrtCAtBat', 'OrtCHits', 'OrtCRBI', 'OrtCWalks'])\n\nImportance.sort_values(by = 'Importance', \n                       axis = 0, \n                       ascending = True).plot(kind = 'barh', \n                                              color = 'r', )\n\nplt.xlabel('Variable Importance')\nplt.gca().legend_ = None","ec7efc2e":"<a id = \"1\"><\/a><h1 id=\"Feature Extraction\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">Feature Extraction<\/span><\/h1>","3ce02590":"<a id = \"1\"><\/a><h1 id=\"Max\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">Max<\/span><\/h1>","e6b80b59":"<a id = \"1\"><\/a><br>\n## 2 . SVR","0b7af255":"# Model Tuning","883fcef7":"<a id = \"1\"><\/a><h1 id=\"Salary Prediction with Machine Learning\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">Salary Prediction with Machine Learning<\/span><\/h1>\n\nThis dataset was originally taken from the StatLib library which is maintained at Carnegie Mellon University. This is part of the data that was used in the 1988 ASA Graphics Section Poster Session. The salary data were originally from Sports Illustrated, April 20, 1987. The 1986 and career statistics were obtained from The 1987 Baseball Encyclopedia Update published by Collier Books, Macmillan Publishing Company, New York.","639f74e7":"<a id = \"1\"><\/a><br>\n## 3 . CART","b7a85569":"# Final Model Tuning","44a74430":"- A data frame with 322 observations of major league players on the following 20 variables.\n- AtBat: Number of times at bat in 1986\n- Hits: Number of hits in 1986\n- HmRun: Number of home runs in 1986\n- Runs: Number of runs in 1986\n- RBI: Number of runs batted in in 1986\n- Walks: Number of walks in 1986\n- Years: Number of years in the major leagues\n- CAtBat: Number of times at bat during his career\n- CHits: Number of hits during his career\n- CHmRun: Number of home runs during his career\n- CRuns: Number of runs during his career\n- CRBI: Number of runs batted in during his career\n- CWalks: Number of walks during his career\n- League: A factor with levels A and N indicating player\u2019s league at the end of 1986\n- Division: A factor with levels E and W indicating player\u2019s division at the end of 1986\n- PutOuts: Number of put outs in 1986\n- Assists: Number of assists in 1986\n- Errors: Number of errors in 1986\n- Salary: 1987 annual salary on opening day in thousands of dollars\n- NewLeague: A factor with levels A and N indicating player\u2019s league at the beginning of 1987\n\n**Number of Observation Units: 322**\n\n**Variable Number: 20**\n\n","cfa9a8e5":"<a id = \"1\"><\/a><br>\n## 4 . Random Forests","b7928443":"<a id = \"1\"><\/a><h1 id=\"Data Preprocessing\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">Data Preprocessing<\/span><\/h1>\n","1eea3496":"<a id = \"1\"><\/a><h1 id=\"Machine Learning Methods\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">Machine Learning Methods<\/span><\/h1>","555c6d4b":"![expected-salary-at-08-31-2016.jpg](attachment:8cb1b7af-96ac-4981-bd24-7586e05c2896.jpg)","fdd2b780":"<a id = \"1\"><\/a><br>\n## 1 . KNN","208a45a2":"<a id = \"1\"><\/a><h1 id=\"Means\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">Means<\/span><\/h1>","4739bdcf":"# Model Tuning","785d50e7":"#  Model Tuning","65aca1d3":"# Model Tuning","13faeb61":"# Final Model Tuning"}}