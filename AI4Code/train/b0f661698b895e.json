{"cell_type":{"c3ff56ac":"code","b7f8f81b":"code","cef2da57":"code","840db5ee":"code","795425a7":"code","3b6935a9":"code","fe12c370":"code","d6830fe5":"code","cbc44ec6":"code","99440c19":"code","d164c74c":"code","4948b43c":"code","3be26b40":"code","350d7b82":"markdown","e77f3e4a":"markdown","16182580":"markdown","a12ddc0c":"markdown","903ea9de":"markdown","d8771c3f":"markdown","d4d465ec":"markdown"},"source":{"c3ff56ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7f8f81b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport csv\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","cef2da57":"# import data\ndf = pd.read_csv('..\/input\/mortgage\/dataset_Fall 2021.csv')","840db5ee":"df.head()","795425a7":"df.describe().transpose()","3b6935a9":"# check missing values\ndf.isnull().sum()","fe12c370":"categorical=[col for col in df.columns if df[col].nunique()<=5]\ncontinous=[col for col in df.columns if df[col].nunique()>5]\nprint(categorical)\nprint(continous)","d6830fe5":"fig=plt.figure(figsize=(20,10))\nfor i,col in enumerate(categorical):\n    ax=fig.add_subplot(2,3,i+1)\n    sns.countplot(df[col])\n    ","cbc44ec6":"channels_perc = df.groupby(['ORIG_CHN']).size()\/df.groupby(['ORIG_CHN']).size().sum()\nchannels_perc\n\n#broker 4.84%\n#correspondent 48.84%\n#retail 46.31%","99440c19":"sns.distplot(df['dti'])","d164c74c":"# overview of correlation between features\n# haven't cleaned df yet\ndf.corr().style.background_gradient(cmap='BuGn')","4948b43c":"df.corr()['NET_LOSS']","3be26b40":"sns.pairplot(df,\n    x_vars=['orig_amt', 'ocltv', 'dti', 'CSCORE_B', 'NET_LOSS'],\n    y_vars=['orig_amt', 'ocltv', 'dti', 'CSCORE_B', 'NET_LOSS'],\n             diag_kind=\"kde\",hue=\"relo_flg\")\nplt.show()","350d7b82":"Missing data:\n* SERVICER       4081\n* LAST_RT           2\n* LAST_UPB       6869\n* num_bo           24\n* dti            3410\n* CSCORE_B        736\n* CSCORE_C     110716\n* FTHB_FLG         65\n\n\n","e77f3e4a":"### dti\nThe ratio obtained by dividing the total monthly debt expense by the total monthly income of the borrower at the time the loan was originated.","16182580":"## EDA\n### Channels\nOnly 4.84% of the loans are delievered by brokers.","a12ddc0c":"## Data Cleaning","903ea9de":"### Correlations\n","d8771c3f":"## Import Data","d4d465ec":"## Overview:\n### 1) Data Cleaning\n### 2) EDA\n### 3) Feature Analysis\n### 4) Modeling \n### 5) Interpretation and Conclusion"}}