{"cell_type":{"5feec60d":"code","07d8e8fe":"code","71ed93fd":"code","742c1866":"code","39e3359f":"code","3b1c0efd":"code","23f1e436":"code","b87dec0f":"code","f0747833":"code","78c92013":"code","75c9b199":"code","6cd750f3":"code","6a101753":"code","41293c08":"code","b2439cc3":"code","5662ef13":"code","45ed6190":"code","c391941c":"markdown"},"source":{"5feec60d":"# Importing libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Supress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Classification\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier , GradientBoostingClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis , QuadraticDiscriminantAnalysis\nfrom xgboost import XGBClassifier\n\n# Regression\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso,RidgeCV, ElasticNet, LogisticRegression\nfrom sklearn.ensemble import RandomForestRegressor,BaggingRegressor,GradientBoostingRegressor,AdaBoostRegressor \nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom xgboost import XGBRegressor\n\n# Modelling Helpers :\nfrom sklearn.preprocessing import Imputer , Normalizer , scale\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.model_selection import GridSearchCV , KFold , cross_val_score, ShuffleSplit, cross_validate\n\n# Preprocessing :\nfrom sklearn.preprocessing import MinMaxScaler , StandardScaler, Imputer, LabelEncoder\n\n# Metrics :\n# Regression\nfrom sklearn.metrics import mean_squared_log_error,mean_squared_error, r2_score,mean_absolute_error \n# Classification\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score, classification_report\n\nprint(\"Setup complete...\")","07d8e8fe":"asd = pd.read_csv(\"..\/input\/Toddler Autism dataset July 2018.csv\")\nprint(\"Dataset loaded...\")","71ed93fd":"asd.describe()","742c1866":"asd.columns","39e3359f":"asd.drop(['Case_No', 'Who completed the test'], axis = 1, inplace = True)\nasd.columns","3b1c0efd":"asd.dtypes","23f1e436":"corr = asd.corr()\nplt.figure(figsize = (15,15))\nsns.heatmap(data = corr, annot = True, square = True, cbar = True)","b87dec0f":"plt.figure(figsize = (16,8))\nsns.countplot(x = 'Ethnicity', data = asd)","f0747833":"sns.countplot(x = 'Jaundice', hue = 'Sex', data = asd)","78c92013":"sns.countplot(x = 'Qchat-10-Score', hue = 'Sex', data = asd)","75c9b199":"asd.columns","6cd750f3":"asd.drop('Qchat-10-Score', axis = 1, inplace = True)","6a101753":"le = LabelEncoder()\ncolumns = ['Ethnicity', 'Family_mem_with_ASD', 'Class\/ASD Traits ', 'Sex', 'Jaundice']\nfor col in columns:\n    asd[col] = le.fit_transform(asd[col])\nasd.dtypes","41293c08":"X = asd.drop(['Class\/ASD Traits '], axis = 1)\nY = asd['Class\/ASD Traits ']\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.20, random_state = 7)","b2439cc3":"models = []\nmodels.append(('LR', LogisticRegression()))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC()))\nmodels.append(('RF', RandomForestRegressor()))\nmodels.append(('XGB', XGBClassifier()))\nmodels.append(('GBR', GradientBoostingRegressor()))\nmodels.append(('ABR', AdaBoostRegressor()))\n\nfor name, model in models:\n    model.fit(x_train, y_train)\n    pred = model.predict(x_test).astype(int)\n    print(name, accuracy_score(y_test, pred))","5662ef13":"svc = SVC()\n\nparams = {\n    'C': [0.1,0.8,0.9,1,1.1,1.2,1.3,1.4],\n    'kernel':['linear', 'rbf'],\n    'gamma' :[0.1,0.8,0.9,1,1.1,1.2,1.3,1.4]\n}\n\nclf = GridSearchCV(svc, param_grid = params, scoring = 'accuracy', cv = 10, verbose = 2)\n\nclf.fit(x_train, y_train)\nclf.best_params_","45ed6190":"# Re-running model with best parametres\nsvc1 = SVC(C = 0.8, gamma = 0.1, kernel = 'linear')\nsvc1.fit(x_train, y_train)\npred = svc1.predict(x_test)\nprint(accuracy_score(y_test, pred))","c391941c":"**Tuning hyperparametres for SVC**"}}