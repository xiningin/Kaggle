{"cell_type":{"40c14549":"code","63d273ce":"code","0a5b0d9d":"code","f11a6163":"code","2e93a1c9":"code","46ac8d40":"code","d47e3513":"code","02d215f8":"code","7c72fa4d":"code","f7202566":"code","b4c7fed4":"code","b59eb84b":"code","b3e5ea7a":"code","4065630f":"code","ab1f1160":"code","8e61b042":"code","99da6aa2":"code","b0628230":"code","1723958c":"code","8a0e5923":"code","8613bd09":"code","53394d54":"code","927971f3":"code","f1892c7e":"code","565790f9":"code","7c1dadeb":"code","50c5423e":"code","e3cf86dc":"code","513a09a0":"code","e836016e":"code","54e7a04e":"code","6a22e917":"code","b4ef0ccc":"code","553a6f4f":"code","1dc642e9":"code","f27e9304":"code","a6f4a445":"code","c10132bf":"code","fc6a359f":"code","fbb95e21":"code","1ae2d48f":"code","46b4cb6f":"code","fe9ea7f1":"code","431d97fc":"code","1202b7b0":"code","23fb64d6":"code","3d3393e5":"code","c280f11c":"markdown","9e2cfc2a":"markdown","c7748ce4":"markdown","fe12a073":"markdown","3f760a70":"markdown"},"source":{"40c14549":"# In Python, 3 environment comes with many helpful analytics libraries installed\n\nimport numpy as np        # linear algebra\nimport os                 # accessing directory structure\nimport pandas as pd       # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Pandas uses the plot() method to create diagrams.\n# Pythons uses Pyplot, a submodule of the Matplotlib library to visualize the diagram on the screen.\n# Matplotlib is a low level graph plotting library in python that serves as a visualization utility\nimport matplotlib.pyplot as plt\n\n# Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.\nimport seaborn as sns\n%matplotlib inline","63d273ce":"df_2015=pd.read_csv(\"..\/input\/sea-building-energy-benchmarking\/2015-building-energy-benchmarking.csv\")\ndf_2015","0a5b0d9d":"# info() - gives you more information about the data set.\n\n# And the name of each column, with the data type\ndf_2015.info()","f11a6163":"# Pandas describe() is used to view some basic statistical details like percentile, mean, std etc. of a data frame or a series of numeric values\ndf_2015.describe()","2e93a1c9":"df_2015.isnull().sum()","46ac8d40":"df_2015.shape","d47e3513":"#  drop_duplicates() method helps in removing duplicates from the data frame.\ndf_2015.drop_duplicates()\ndf_2015.shape","02d215f8":"df_2015.drop(['PropertyName', 'TaxParcelIdentificationNumber', 'CouncilDistrictCode', 'Neighborhood', 'DataYear', 'ListOfAllPropertyUseTypes', 'LargestPropertyUseType','LargestPropertyUseTypeGFA', 'SecondLargestPropertyUseType', 'SecondLargestPropertyUseTypeGFA', 'ThirdLargestPropertyUseType', 'ThirdLargestPropertyUseTypeGFA', 'YearsENERGYSTARCertified', 'Comment', 'Outlier', '2010 Census Tracts', 'City Council Districts', 'DefaultData', 'ComplianceStatus', 'Seattle Police Department Micro Community Policing Plan Areas', 'SPD Beats', 'Zip Codes'], axis=1, inplace=True)\n\n# The head() method returns the headers and a specified number of rows, starting from the top.\ndf_2015.head()","7c72fa4d":"df_2015.set_index(['OSEBuildingID'],inplace=True)","f7202566":"df_2015.columns","b4c7fed4":"print(df_2015['BuildingType'].value_counts())","b59eb84b":"df_2015.dropna(inplace=True)","b3e5ea7a":"df_2015.shape","4065630f":"# Pandas describe() is used to view some basic statistical details like percentile, mean, std etc. of a data frame or a series of numeric values\ndf_2015.describe()","ab1f1160":"# The Result of the corr() method is a table with a lot of numbers that represents how well the relationship is between two columns.\n\n# The number varies from -1 to 1.\n\n# 1 means that there is a 1 to 1 relationship (a perfect correlation), and for this data set, each time a value went up in the first column, the other one went up as well.\ndf_2015.corr().shape","8e61b042":"sns.heatmap(df_2015.corr(), xticklabels=True, yticklabels=True, linewidths=.6, cmap=\"PuRd\")\nplt.title(\"Heat Map 2015\")\nplt.figure(figsize=None)\nplt.show()","99da6aa2":"# pip install pandas-profiling              (we can quickly do an EDA and generate EDA report)\n# pip install U-wbdata                      (information from the World Bank's various databases)\nfrom pandas_profiling import ProfileReport\n\n# Generate Report of 2015-building-energy-benchmarking.csv file\n# profile= ProfileReport(df_2015)\n# profile.to_file(output_file=\"2015.html\")","b0628230":"# Select the columns\n\ncdf = df_2015[['GHGEmissionsIntensity(kgCO2e\/ft2)', 'GHGEmissions(MetricTonsCO2e)', 'ENERGYSTARScore', 'NaturalGas(kBtu)', 'NaturalGas(therms)']]\ncdf.head(9)","1723958c":"# Plot histogram\nviz = cdf[['GHGEmissionsIntensity(kgCO2e\/ft2)', 'GHGEmissions(MetricTonsCO2e)', 'ENERGYSTARScore', 'NaturalGas(kBtu)', 'NaturalGas(therms)']]\nviz.hist()\nplt.show()","8a0e5923":"# Y=AX, Y is dependent, X is independent and A is cofficient   \n\nplt.scatter(x = cdf['GHGEmissions(MetricTonsCO2e)'], y =cdf['GHGEmissionsIntensity(kgCO2e\/ft2)'])\nplt.xlabel(\"GHGEmissions(MetricTonsCO2e)\")\nplt.ylabel(\"GHGEmissionsIntensity(kgCO2e\/ft2)\")\nplt.show()","8613bd09":"plt.figure(figsize=(25,25))\nsns.catplot(x=\"BuildingType\", kind=\"count\",height=6, aspect=2,data=df_2015)","53394d54":"#seaborn Scatterplot\n#(z-score )normalization is applied on \"TotalGHGEmissions\"\n\nplt.figure(figsize=(15,7))\ndf_2015[\"GHGEmissions(MetricTonsCO2e)\"]=(df_2015[\"GHGEmissions(MetricTonsCO2e)\"]-df_2015[\"GHGEmissions(MetricTonsCO2e)\"].mean())\/df_2015[\"GHGEmissions(MetricTonsCO2e)\"].std()\nsns.scatterplot(x=df_2015['BuildingType'], y=df_2015['GHGEmissions(MetricTonsCO2e)'])\n\n#NonResidentials buildings are higher in GHGEmissions(MetricTonsCO2e)","927971f3":"plt.figure(figsize=(10,7))\nsns.scatterplot(x=df_2015['Electricity(kBtu)'], y=df_2015[\"GHGEmissions(MetricTonsCO2e)\"])","f1892c7e":"#line plot \ndf_2015[\"GHGEmissionsIntensity(kgCO2e\/ft2)\"]=(df_2015[\"GHGEmissionsIntensity(kgCO2e\/ft2)\"])\/df_2015[\"GHGEmissionsIntensity(kgCO2e\/ft2)\"].max()\nplt.figure(figsize=(15,8))\nsns.lineplot(x='BuildingType',y='GHGEmissionsIntensity(kgCO2e\/ft2)', data=df_2015)","565790f9":"df_2016=pd.read_csv(\"..\/input\/sea-building-energy-benchmarking\/2016-building-energy-benchmarking.csv\")\ndf_2016","7c1dadeb":"# info() - gives you more information about the data set.\n\n# And the name of each column, with the data type\ndf_2016.info()","50c5423e":"# Pandas describe() is used to view some basic statistical details like percentile, mean, std etc. of a data frame or a series of numeric values\ndf_2016.describe()","e3cf86dc":"#  drop_duplicates() method helps in removing duplicates from the data frame.\ndf_2016.drop_duplicates()\ndf_2016.shape","513a09a0":"df_2016.isnull().sum()","e836016e":"df_2016.drop(['OSEBuildingID', 'DataYear', 'BuildingType', 'PrimaryPropertyType', 'PropertyName', 'Address', 'City', 'State', 'ZipCode', 'TaxParcelIdentificationNumber', 'ListOfAllPropertyUseTypes', 'LargestPropertyUseType', 'LargestPropertyUseTypeGFA', 'ENERGYSTARScore', 'Neighborhood', 'CouncilDistrictCode', 'SecondLargestPropertyUseType', 'SecondLargestPropertyUseTypeGFA', 'ThirdLargestPropertyUseType', 'ThirdLargestPropertyUseTypeGFA', 'YearsENERGYSTARCertified', 'Comments', 'Outlier', 'DefaultData', 'ComplianceStatus'], axis=1, inplace=True)\n\n# The head() method returns the headers and a specified number of rows, starting from the top.\ndf_2016.head()","54e7a04e":"df_2016.columns","6a22e917":"df_2016.dropna(inplace=True)","b4ef0ccc":"df_2016.shape","553a6f4f":"# pip install pandas-profiling          (we can quickly do an EDA and generate EDA report)\n# pip install U-wbdata                  (information from the World Bank's various databases)\nfrom pandas_profiling import ProfileReport\n\n# Generate Report of 2016-building-energy-benchmarking.csv file\n# profile= ProfileReport(df_2016)\n# profile.to_file(output_file=\"2016.html\")","1dc642e9":"set(df_2015)-set(df_2016)","f27e9304":"# The Result of the corr() method is a table with a lot of numbers that represents how well the relationship is between two columns.\n\n# The number varies from -1 to 1.\n\n# 1 means that there is a 1 to 1 relationship (a perfect correlation), and for this data set, each time a value went up in the first column, the other one went up as well.\ndf_2016.corr()","a6f4a445":"sns.heatmap(df_2016.corr(), xticklabels=True, yticklabels=True, linewidths=.5, cmap=None)\nplt.title(\"Heat Map 2016\")\nplt.figure(figsize=None)\nplt.show()","c10132bf":"df_2016.columns","fc6a359f":"set(df_2016)-set(df_2015)","fbb95e21":"df_2015.columns","1ae2d48f":"# Select the columns\n\ncdf = df_2016[['SiteEUI(kBtu\/sf)', 'NaturalGas(kBtu)', 'NaturalGas(therms)', 'SiteEUIWN(kBtu\/sf)']]\ncdf.head(9)","46b4cb6f":"set(df_2016)-set(df_2015)","fe9ea7f1":"#Rename df_2015 data columns as 2016 data columns\n\ndf_2016.rename(columns={'GHGEmissionsIntensity':'GHGEmissionsIntensity(kgCO2e\/ft2)', 'TotalGHGEmissions':'GHGEmissions(MetricTonsCO2e)'}, inplace=True )","431d97fc":"# Plot histogram\nviz = cdf[['SiteEUIWN(kBtu\/sf)', 'NaturalGas(kBtu)', 'NaturalGas(therms)']]\nviz.hist()\nplt.show()","1202b7b0":"# Y=AX, Y is dependent, X is independent and A is cofficient   \n\n# plt.scatter(x = cdf['GHGEmissionsIntensity(kgCO2e\/ft2)'], y =cdf['GHGEmissions(MetricTonsCO2e)'])\n# plt.xlabel(\"GHGEmissionsIntensity(kgCO2e\/ft2)\")\n# plt.ylabel(\"GHGEmissions(MetricTonsCO2e)\")\n# plt.show()","23fb64d6":"plt.scatter(df_2016[\"SiteEnergyUseWN(kBtu)\"],df_2016[\"GHGEmissions(MetricTonsCO2e)\"],  color='blue')\nplt.xlabel(\"SiteEnergyUseWN(kBtu)\")\nplt.ylabel(\"GHGEmissions(MetricTonsCO2e)\")\nplt.show()","3d3393e5":"plt.figure(figsize=(8,5))\nx_data, y_data = (df_2016[\"Electricity(kBtu)\"].values, df_2016[\"GHGEmissions(MetricTonsCO2e)\"].values)\nplt.plot(x_data, y_data, 'ro')\nplt.ylabel('GHGEmissions(MetricTonsCO2e)')\nplt.xlabel('Electricity(kBtu)')\nplt.show()","c280f11c":"## Readind 2015-building-energy-benchmarking.csv file","9e2cfc2a":"### Drop un-necessary columns","c7748ce4":"### Drop un-necessary columns","fe12a073":"## Import Libraries","3f760a70":"## Reading 2016-building-energy-benchmarking.csv file"}}