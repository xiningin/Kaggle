{"cell_type":{"233ac481":"code","db4acaf4":"code","1d6ce9d6":"code","cc544e7e":"code","6fa3b10c":"code","6513ccbd":"code","ec0b4b94":"code","8f9bbed1":"code","e789b90c":"code","82ba4de3":"code","83d35a8c":"code","2b8ff4e5":"code","21e0aff6":"code","3359cbee":"markdown","f651ea28":"markdown","7cc00ca0":"markdown","9ee843a6":"markdown","3fc1212c":"markdown","6a076151":"markdown","fb542ecb":"markdown","3252aacb":"markdown","aad9fcde":"markdown","2a190bda":"markdown"},"source":{"233ac481":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# We run this to suppress various deprecation warnings from plotnine - keeps our notebook cleaner\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nfrom plotnine import *\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n%matplotlib inline","db4acaf4":"df = pd.read_csv('..\/input\/2019-data-analyst-jobcsv\/2019_data_analyst_job.csv')\ndf","1d6ce9d6":"location_wise = df.groupby(['job_title', 'job_location'])['job_title'].count().to_frame()\nlocation_wise.columns = ['Count']\nlocation_wise = location_wise.reset_index()\nlocation_wise.columns = ['Job Title', 'Job Location', 'Count']\n\nfig = px.scatter(location_wise, x=\"Count\", y=\"Job Title\", color=\"Count\",\n                 size='Count', hover_data=['Job Location'])\n\nfig.update_layout(title='Job Openings in Different Locations (Hover over to see the Locations!)', height = 800)\nfig.show()","cc544e7e":"hired = df[df.hired == True]\n\njob_title = hired.job_title.value_counts().to_frame().reset_index()\njob_title.columns = ['Job Title', 'Count']\n\nfig = px.bar(job_title, x=\"Count\", y=\"Job Title\", height=800, orientation='h')\nfig.update_layout(title='Total Hired for each Position in 2019')\n\nfig.update_traces(marker_color='rgb(158,202,225)', marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5, opacity=0.6)\nfig.show()","6fa3b10c":"n_hired = df[df.hired == False]\n\njob_title = n_hired.job_title.value_counts().to_frame().reset_index()\njob_title.columns = ['Job Title', 'Count']\n\nfig = px.bar(job_title, x=\"Count\", y=\"Job Title\", height=800, orientation='h')\nfig.update_layout(title='Total NOT Hired for each Position in 2019')\nfig.update_traces(marker_color='rgb(225,202,225)', marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5, opacity=0.9)\nfig.show()","6513ccbd":"location_wise_2 = df.copy()\n\nfrom numpy import array\nfrom numpy import argmax\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n# define example\ndata = location_wise_2.hired\nvalues = array(data)\n# integer encode\nlabel_encoder = LabelEncoder()\ninteger_encoded = label_encoder.fit_transform(values)\n# binary encode\nonehot_encoder = OneHotEncoder(sparse=False)\ninteger_encoded = integer_encoded.reshape(len(integer_encoded), 1)\nonehot_encoded = onehot_encoder.fit_transform(integer_encoded)\n# invert first example\ninverted = label_encoder.inverse_transform([argmax(onehot_encoded[0, :])])\n\nlocation_wise_2['Hired'] = pd.Series(onehot_encoded[:, 1])\nlocation_wise_2['Not Hired'] = pd.Series(onehot_encoded[:, 0])\n\ndate_wise = location_wise_2.copy()","ec0b4b94":"location_wise_2 = location_wise_2.groupby(['job_location'])['Hired','Not Hired'].sum().reset_index()\nlocation_wise_2 = location_wise_2.sort_values(by = 'job_location', ascending = False)\n\ny = location_wise_2.job_location\n\nfig = go.Figure()\n\ny = location_wise_2.job_location\nfig.add_bar(y=y,x=location_wise_2['Not Hired'], name='Count of Rejection', orientation='h')\nfig.add_bar(y=y,x=location_wise_2['Hired'], name='Count of Hires', orientation='h')\nfig.update_layout(barmode=\"relative\", height = 1000)\nfig.update_layout(title='Count of Hires and Rejections in Different Locations (Hover over to see the count!)')\nfig.show()","8f9bbed1":"location_wise_2 = location_wise_2.groupby(['job_location'])['Hired','Not Hired'].sum().reset_index()\nlocation_wise_2 = location_wise_2.sort_values(by = 'job_location', ascending = False)\nlocation_wise_2 = location_wise_2.sort_values(\"Hired\", ascending = False)\nlocation_wise_3 = location_wise_2.head(20)\nlocation_wise_3","e789b90c":"fig = go.Figure()\n\ny = location_wise_3.job_location\nfig.add_bar(y=y,x=location_wise_3['Not Hired'], name='Count of Rejection', orientation='h')\nfig.add_bar(y=y,x=location_wise_3['Hired'], name='Count of Hires', orientation='h')\nfig.update_layout(barmode=\"relative\", height = 600)\nfig.update_layout(title='Count of Hires and Rejections in Top 20 Hiring Cities')\n\nfig.show()","82ba4de3":"location_wise_4 = location_wise_2.tail(20)\nlocation_wise_4","83d35a8c":"fig = go.Figure()\n\ny = location_wise_4.job_location\nfig.add_bar(y=y,x=location_wise_4['Not Hired'], name='Count of Rejection', orientation='h')\nfig.add_bar(y=y,x=location_wise_4['Hired'], name='Count of Hires', orientation='h')\nfig.update_layout(barmode=\"relative\", height = 600)\nfig.update_layout(title='Count of Hires and Rejections in Top 20 Rejecting Cities')\n\nfig.show()","2b8ff4e5":"date_wise[\"date\"] = pd.to_datetime(date_wise[\"date\"])\n\ndate_wise = date_wise.groupby(['date'])['Hired','Not Hired'].sum().reset_index()\n\ndate_wise = date_wise.sort_values(by = 'date', ascending = False)\n\nyy = date_wise.date\n\nfig = go.Figure()\n\ny = location_wise_2.job_location\nfig.add_bar(y=yy,x=date_wise['Not Hired'], name='Count of Rejection', orientation='h')\nfig.add_bar(y=yy,x=date_wise['Hired'], name='Count of Hires', orientation='h')\nfig.update_layout(barmode=\"relative\", height = 1200)\nfig.update_layout(title='Count of Hires and Rejections over the Dates (Hover over to see the count!)')\nfig.show()","21e0aff6":"import matplotlib.pyplot as plt\n\ntitle = list(df.job_title.unique())\n\nfor t in title:\n    \n        df = pd.read_csv('..\/input\/2019-data-analyst-jobcsv\/2019_data_analyst_job.csv')\n        \n        df_ = df[df.job_title == t]\n        df_ = df_[['hired']]\n        df_ = df_.hired.value_counts().to_frame().reset_index()\n        df_.columns  = ['Hired', 'Count']\n\n\n        import plotly.graph_objects as go\n\n        irises_colors = ['rgb(33, 75, 99)', 'rgb(79, 129, 102)', 'rgb(151, 179, 100)',\n                         'rgb(175, 49, 35)', 'rgb(36, 73, 147)']\n\n        labels = df_.Hired\n        values = df_.Count\n\n        # Use `hole` to create a donut-like pie chart\n        fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3, name='Hired?', marker_colors=irises_colors, opacity=0.7)])\n        fig.update_layout(title='Percentage of Hires of {}'.format(t), width = 700)\n\n        fig.show()","3359cbee":"## Comparison of Hires and Rejections (Count) in Different Cities","f651ea28":"## How Many *Analyst* Jobs were Opened in 2019 in Different Cities of US?","7cc00ca0":"## Which Citis Rejected the Most and What's the Ratio?","9ee843a6":"## When More Hires Took Place during the Year? (Jan, May, September?)","3fc1212c":"## *US*: Insights of Hiring and Rejections of '*Analysts*' Roles in *2019*","6a076151":"## What are the Percentage of Hires and Rejections for each *Analyst* Role?","fb542ecb":"## Which Cities Hired the Most and What's the Ratio?","3252aacb":"**Lemme know what you think about this analysis? Also, which results do you wanna see in the next version? Feedbacks are very uch appreciated!**\n\nAnd a **BIG**, **FAT** *Thank You* for looking at my work! ","aad9fcde":"## How Many People were Rejected? ","2a190bda":"## How Many People were Hired in each *Analyst* Role in 2019?"}}