{"cell_type":{"18989b35":"code","fef0fc7e":"code","bfa815d6":"code","4272a062":"code","d24eae0f":"code","d76b80f3":"code","ad6491c9":"code","f342d718":"code","da50e905":"code","4cf50f99":"code","6d75d75a":"code","df66c786":"code","27d8a26d":"code","2597596d":"code","6aa33efd":"code","07ceee85":"code","eb42e778":"code","492d3b92":"code","7eb2c9f3":"code","c04a3ec7":"code","f935f65e":"code","f22669a6":"code","7b82aced":"code","5dc8d4b3":"code","9fbf7a4b":"code","8689d294":"code","258c1610":"code","e4b31c4b":"code","d78a5e43":"markdown","2794b304":"markdown","b5b6ff07":"markdown","5a2d7cd4":"markdown","6c9716b5":"markdown","53a879e1":"markdown","93fbc4a4":"markdown"},"source":{"18989b35":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets, transforms, models \nfrom torchvision.utils import make_grid\nimport os\nimport random\nfrom sklearn.model_selection import train_test_split\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","fef0fc7e":"train_transform=transforms.Compose([\n        transforms.RandomRotation(10),      # rotate +\/- 10 degrees\n        transforms.RandomHorizontalFlip(),  # reverse 50% of images\n        transforms.Resize(224),             # resize shortest side to 224 pixels\n        transforms.CenterCrop(224),         # crop longest side to 224 pixels at center\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406],\n                             [0.229, 0.224, 0.225])\n])","bfa815d6":"dataset=datasets.ImageFolder(root=(\"..\/input\/dandelionimages\/Images\"),transform=train_transform)\ndataset","4272a062":"class_names=dataset.classes\nprint(class_names)\nprint(len(class_names))","d24eae0f":"train_indices, test_indices = train_test_split(list(range(len(dataset.targets))), test_size=0.2, stratify=dataset.targets)\ntrain_data = torch.utils.data.Subset(dataset, train_indices)\ntest_data = torch.utils.data.Subset(dataset, test_indices)","d76b80f3":"train_loader=DataLoader(train_data,batch_size=10,shuffle=True)\ntest_loader=DataLoader(test_data,batch_size=10)","ad6491c9":"print(len(train_data))\nprint(len(test_data))","f342d718":"for images, labels in train_loader:\n    break\n#print the labels\nprint('Label:', labels.numpy())\nprint('Class:', *np.array([class_names[i] for i in labels]))\n\nim=make_grid(images,nrow=5)","da50e905":"plt.figure(figsize=(10,10))\nplt.imshow(np.transpose(im.numpy(),(1,2,0)))","4cf50f99":"inv_normalize=transforms.Normalize(mean=[-0.485\/0.229,-0.456\/0.224,-0.406\/0.225],\n                                     std=[1\/0.229,1\/0.224,1\/0.225])\nim=inv_normalize(im)","6d75d75a":"plt.figure(figsize=(10,10))\nplt.imshow(np.transpose(im.numpy(),(1,2,0)))","df66c786":"class ConvolutionalNetwork(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1=nn.Conv2d(3,6,3,1)\n        self.conv2=nn.Conv2d(6,16,3,1)\n        self.fc1=nn.Linear(16*54*54,120) \n        self.fc2=nn.Linear(120,84)\n        self.fc3=nn.Linear(84,20)\n        self.fc4=nn.Linear(20,2)\n    def forward(self,X):\n        X=F.relu(self.conv1(X))\n        X=F.max_pool2d(X,2,2)\n        X=F.relu(self.conv2(X))\n        X=F.max_pool2d(X,2,2)\n        X=X.view(-1,16*54*54)\n        X=F.relu(self.fc1(X))\n        X=F.relu(self.fc2(X))\n        X=F.relu(self.fc3(X))\n        X=self.fc4(X)\n        \n        return F.log_softmax(X, dim=1)","27d8a26d":"CNNmodel=ConvolutionalNetwork()\ncriterion=nn.CrossEntropyLoss()\noptimizer=torch.optim.Adam(CNNmodel.parameters(),lr=0.001)","2597596d":"CNNmodel","6aa33efd":"def count_parameters(model):\n    params = [p.numel() for p in model.parameters() if p.requires_grad]\n    for item in params:\n        print(f'{item:>8}')\n    print(f'________\\n{sum(params):>8}')\ncount_parameters(CNNmodel)","07ceee85":"import time\nstart_time=time.time()\ntrain_losses=[]\ntest_losses=[]\ntrain_correct=[]\ntest_correct=[]\nepochs=5\n\nfor i in range(epochs):\n    trn_corr=0\n    tst_corr=0\n    for b, (X_train,y_train) in enumerate(train_loader):\n        b+=1                                            \n        y_pred=CNNmodel(X_train)\n        loss=criterion(y_pred,y_train)\n\n        predicted=torch.max(y_pred.data,1)[1]\n        batch_corr=(predicted==y_train).sum()\n        trn_corr+=batch_corr\n        \n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        \n        if b%200==0:\n            print(f\"epoch: {i} loss: {loss.item} batch: {b} accuracy: {trn_corr.item()*100\/(10*b):7.3f}%\")\n    loss=loss.detach().numpy()\n    train_losses.append(loss)\n    train_correct.append(trn_corr)\n    \n    \n    with torch.no_grad():\n        for b, (X_test,y_test) in enumerate(test_loader):\n            y_val=CNNmodel(X_test)\n            loss=criterion(y_val,y_test)\n            \n            predicted=torch.max(y_val.data,1)[1]\n            btach_corr=(predicted==y_test).sum()\n            tst_corr+=btach_corr\n            \n        loss=loss.detach().numpy()\n        test_losses.append(loss)\n        test_correct.append(tst_corr)\n        \nprint(f'\\nDuration: {time.time() - start_time:.0f} seconds')    ","eb42e778":"plt.plot(train_losses,label=\"train_losses\")\nplt.plot(test_losses,label=\"test_losses\")\nplt.legend()","492d3b92":"alexnetmodel= models.alexnet(pretrained=True)","7eb2c9f3":"alexnetmodel","c04a3ec7":"for param in alexnetmodel.parameters():\n    param.requires_grad=False","f935f65e":"torch.manual_seed(42)\n\nalexnetmodel.classifier=nn.Sequential(nn.Linear(9216,1024),\n                                     nn.ReLU(),\n                                     nn.Dropout(p=0.5),\n                                     nn.Linear(1024,2),\n                                     nn.LogSoftmax(dim=1))\nalexnetmodel","f22669a6":"count_parameters(alexnetmodel)","7b82aced":"criterion=nn.CrossEntropyLoss()\noptimizer=torch.optim.Adam(alexnetmodel.classifier.parameters(),lr=0.001)","5dc8d4b3":"import time\nstart_time=time.time()\ntrain_losses=[]\ntest_losses=[]\ntrn_correct=[]\ntst_correct=[]\nepochs=5\n\nfor i in range(epochs):\n    trn_corr=0\n    tst_corr=0\n    for b, (X_train,y_train) in enumerate(train_loader):\n        b+=1\n        \n        y_pred=alexnetmodel(X_train)\n        loss=criterion(y_pred,y_train)       \n\n        predicted=torch.max(y_pred.data,1)[1]\n        batch_corr=(predicted==y_train).sum()\n        trn_corr+= batch_corr\n        \n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        \n        if b%200==0:\n            print(f'epoch: {i:2}  batch: {b:4} [{10*b:6}\/8000]  loss: {loss.item():10.8f}  \\\naccuracy: {trn_corr.item()*100\/(10*b):7.3f}%')\n    \n    loss=loss.detach().numpy()\n    train_losses.append(loss)\n    train_correct.append(trn_corr)\n                  \n    with torch.no_grad():\n        for b, (X_test,y_test) in enumerate(test_loader):\n            b+=1\n                  \n            y_val=alexnetmodel(X_test)\n            predicted=torch.max(y_val.data,1)[1]\n            btach_corr=(predicted==y_test).sum()\n            tst_corr+=btach_corr\n\n    loss=criterion(y_val,y_test)\n    loss=loss.detach().numpy()\n    test_losses.append(loss)\n    test_correct.append(tst_corr)\n                  \nprint(f'\\nDuration: {time.time() - start_time:.0f} seconds')        ","9fbf7a4b":"x=100\nim = inv_normalize(test_data[x][0])\nplt.imshow(np.transpose(im.numpy(),(1,2,0)))","8689d294":"test_data[x][0].shape","258c1610":"CNNmodel.eval()\nwith torch.no_grad():\n    new_pred=CNNmodel(test_data[x][0].view(1,3,224,224)).argmax()\nprint(f'Predicted value: {new_pred.item()} {class_names[new_pred.item()]}')","e4b31c4b":"alexnetmodel.eval()\nwith torch.no_grad():\n    new_pred_1=alexnetmodel(test_data[x][0].view(1,3,224,224)).argmax()\nprint(f'Predicted value: {new_pred.item()} {class_names[new_pred.item()]}')","d78a5e43":"# Prediction","2794b304":"# Set Train and Test","b5b6ff07":"---\n- **torch**\n - nn\n   - functional\n     - relu\n     - max_pool2d\n   - Conv2d\n   - Linear\n - utils\n   - data\n     - DataLoader\n---\n- **torchvision**\n - datasets\n   - ImageFolder\n - transforms\n   - Compose\n   - Resize\n   - ToTensor\n   - Normalize\n - models\n - utils\n   - make_grid\n---","5a2d7cd4":"# Dandelion Classify Torch AlexNet","6c9716b5":"# Images and Labels","53a879e1":"# AlexNetModel","93fbc4a4":"# CNN Model"}}