{"cell_type":{"45da0c40":"code","f92e4601":"code","f704a9e6":"code","67b62c3c":"code","a80ec1d4":"code","f49837c1":"code","50c80bd9":"code","c02a6c2d":"code","30fe770d":"code","78f9422d":"code","72ba190a":"code","d923bac4":"code","24afe9ea":"code","28d612a3":"code","5e9e935c":"code","0bcc903f":"code","4daf89fa":"code","5376b7e7":"code","ea5bce5f":"code","f7e6a423":"code","72ec48d9":"code","ce66ff63":"code","3b4e0b16":"code","fe41dfb0":"code","2f91542e":"code","64be82f6":"code","d3db89a4":"code","61d6bc4f":"code","677bfaba":"code","72a7f608":"code","570f5f89":"code","2be352b0":"code","69688b33":"code","8cea9786":"code","000f8e1d":"code","f878dbe1":"code","2184e856":"code","2fa7d5d4":"code","66e7a9a8":"code","42b43e3d":"code","98d2e61d":"code","d2a729b1":"code","13f37917":"code","9adcaa80":"code","254782b9":"code","1164d03f":"code","6af31435":"code","d5400018":"code","b01bd948":"code","010ebd4c":"code","72bb0221":"code","35e3408c":"code","5a216528":"code","36bb78f4":"code","fd176952":"code","d9e88662":"code","6b174ac9":"code","6c14b4df":"code","c32f827a":"code","72905c49":"code","3ad7adad":"code","e0787fdf":"code","9bfe6144":"code","ec6e9f01":"code","c79370be":"code","aeedec89":"code","9c137da9":"code","64716be9":"code","1daa7e04":"code","586c9982":"code","349911bd":"code","c7020979":"markdown","fca6d2e3":"markdown","78aea056":"markdown","0b0a3fad":"markdown","cbd7b798":"markdown","3480109a":"markdown","76ce0caa":"markdown","8d96f3d7":"markdown","76f42b52":"markdown","22912559":"markdown","d192e996":"markdown","7c71598e":"markdown","844b527d":"markdown","1cdcc3d5":"markdown","62f0c2dd":"markdown","128e76b2":"markdown","f4023465":"markdown","554d6e60":"markdown","a1e4f9fc":"markdown","cef9e6cb":"markdown","8c5d732e":"markdown","1cf26847":"markdown","5e56c5df":"markdown","11f0275e":"markdown","fc3da80e":"markdown","de6814fe":"markdown","7beb1d26":"markdown","0801ca51":"markdown","8a00d585":"markdown","022156a3":"markdown","8f53c6bc":"markdown","0b6c6521":"markdown","50e038b3":"markdown","1109408a":"markdown","d77d49c7":"markdown"},"source":{"45da0c40":"# \u5bfc\u5165\u5e93\n# \u6570\u636e\u5206\u6790\u548c\u63a2\u7d22\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# \u53ef\u89c6\u5316\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# \u673a\u5668\u5b66\u4e60\u6a21\u578b\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","f92e4601":"# \u83b7\u53d6\u6570\u636e\uff0c\u8bad\u7ec3\u96c6train_df\uff0c\u6d4b\u8bd5\u96c6test_df\uff0c\u5408\u5e76\u96c6\u5408combine\uff08\u4fbf\u4e8e\u5bf9\u7279\u5f81\u8fdb\u884c\u5904\u7406\u65f6\u7edf\u4e00\u5904\u7406\uff1afor df in combine:\uff09\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\ncombine = [train_df, test_df]","f704a9e6":"train_df","67b62c3c":"# \u63a2\u7d22\u6570\u636e\n# \u67e5\u770b\u5b57\u6bb5\u7ed3\u6784\u3001\u7c7b\u578b\u53cahead\u793a\u4f8b\ntrain_df.head(10)","a80ec1d4":"# \u67e5\u770b\u5404\u7279\u5f81\u975e\u7a7a\u6837\u672c\u91cf\u53ca\u5b57\u6bb5\u7c7b\u578b\ntrain_df.info()\nprint(\"_\"*40)\ntest_df.info()","f49837c1":"# \u67e5\u770b\u6570\u503c\u7c7b\uff08int\uff0cfloat\uff09\u7279\u5f81\u7684\u6570\u636e\u5206\u5e03\u60c5\u51b5\ntrain_df.describe()","50c80bd9":"# \u67e5\u770b\u975e\u6570\u503c\u7c7b\uff08object\u7c7b\u578b\uff09\u7279\u5f81\u7684\u6570\u636e\u5206\u5e03\u60c5\u51b5\ntrain_df.describe(include=[\"O\"])","c02a6c2d":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)\n# \u5bcc\u4eba\u548c\u4e2d\u7b49\u9636\u5c42\u6709\u66f4\u9ad8\u7684\u751f\u8fd8\u7387\uff0c\u5e95\u5c42\u751f\u8fd8\u7387\u4f4e","30fe770d":"train_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)\n# \u6027\u522b\u548c\u662f\u5426\u751f\u8fd8\u5f3a\u76f8\u5173\uff0c\u5973\u6027\u7528\u6237\u7684\u751f\u8fd8\u7387\u660e\u663e\u9ad8\u4e8e\u7537\u6027","78f9422d":"train_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)\n# \u67090\u52302\u4e2a\u5144\u5f1f\u59d0\u59b9\u6216\u914d\u5076\u7684\u751f\u8fd8\u51e0\u7387\u4f1a\u9ad8\u4e8e\u6709\u66f4\u591a\u7684","72ba190a":"train_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)\n# \u540c\u884c\u7684\u7236\u6bcd\u6216\u5b69\u5b50\u603b\u6570\u76f8\u5173","d923bac4":"g = sns.FacetGrid(train_df,col=\"Survived\")\ng.map(plt.hist,\"Age\",bins=20)\n# \u5a74\u5e7c\u513f\u7684\u751f\u5b58\u51e0\u7387\u66f4\u5927","24afe9ea":"# Fare\ng = sns.FacetGrid(train_df,col=\"Survived\")\ng.map(plt.hist,\"Fare\",bins=10)\n# \u7968\u4ef7\u6700\u4fbf\u5b9c\u7684\u5e78\u5b58\u51e0\u7387\u4f4e","28d612a3":"grid = sns.FacetGrid(train_df,row=\"Survived\",col=\"Sex\",aspect=1.6)\ngrid.map(plt.hist,\"Age\",alpha=.5,bins=20)\ngrid.add_legend()\n# \u5973\u6027\u7684\u5e78\u5b58\u7387\u66f4\u9ad8\uff0c\u5404\u5e74\u9f84\u6bb5\u5747\u9ad8\u4e8e50%\n# \u7537\u6027\u4e2d\u53ea\u6709\u5a74\u5e7c\u513f\u5e78\u5b58\u7387\u9ad8\u4e8e50%\uff0c\u5e74\u9f84\u6700\u5927\u7684\u7537\u6027\uff08\u8fd180\u5c81\uff09\u5e78\u5b58","5e9e935c":"grid1 = sns.FacetGrid(train_df,col=\"Embarked\")\ngrid1.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\",palette = \"deep\")\n#","0bcc903f":"grid = sns.FacetGrid(train_df, row='Embarked', col='Survived', size=2.2, aspect=1.6)\ngrid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\ngrid.add_legend()","4daf89fa":"# Some features of my own that I have added in\n# Gives the length of the name\ntrain_df['NameLength'] = train_df['Name'].apply(len)\ntest_df['NameLength'] = test_df['Name'].apply(len)","5376b7e7":"train_df","ea5bce5f":"# Feature that tells whether a passenger had a cabin on the Titanic\ntrain_df['HasCabin'] = train_df[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\ntest_df['HasCabin'] = test_df[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)","f7e6a423":"train_df","72ec48d9":"# \u5254\u9664Ticket\uff08\u4eba\u4e3a\u5224\u65ad\u65e0\u5173\u8054\uff09\u548cCabin\uff08\u6709\u6548\u6570\u636e\u592a\u5c11\uff09\u4e24\u4e2a\u7279\u5f81\ntrain_df = train_df.drop([\"Ticket\",\"Cabin\"],axis=1)\ntest_df = test_df.drop([\"Ticket\",\"Cabin\"],axis=1)\ncombine = [train_df,test_df]\nprint(train_df.shape,test_df.shape,combine[0].shape,combine[1].shape)","ce66ff63":"# \u6839\u636e\u59d3\u540d\u521b\u5efa\u79f0\u53f7\u7279\u5f81\uff0c\u4f1a\u5305\u542b\u6027\u522b\u548c\u9636\u5c42\u4fe1\u606f\n# dataset.Name.str.extract(' ([A-Za-z]+)\\.' -> \u628a\u7a7a\u683c\u5f00\u5934.\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u62bd\u53d6\u51fa\u6765\n# \u548c\u6027\u522b\u5339\u914d\uff0c\u770b\u5404\u7c7b\u79f0\u53f7\u5206\u522b\u5c5e\u4e8e\u7537or\u5973\uff0c\u65b9\u4fbf\u540e\u7eed\u5f52\u7c7b\n\nfor dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\npd.crosstab(train_df['Title'], train_df['Sex']).sort_values(by=[\"male\",\"female\"],ascending=False)","3b4e0b16":"# \u628a\u79f0\u53f7\u5f52\u7c7b\u4e3aMr,Miss,Mrs,Master,Rare_Male,Rare_Female(\u6309\u7537\u6027\u548c\u5973\u6027\u533a\u5206\u4e86Rare)\nfor dataset in combine:\n    dataset[\"Title\"] = dataset[\"Title\"].replace(['Lady', 'Countess', 'Dona'],\"Rare_Female\")\n    dataset[\"Title\"] = dataset[\"Title\"].replace(['Capt', 'Col','Don','Dr','Major',\n                                                 'Rev','Sir','Jonkheer',],\"Rare_Male\")\n    dataset[\"Title\"] = dataset[\"Title\"].replace('Mlle', 'Miss') \n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Miss')","fe41dfb0":"dataset","2f91542e":"# \u6309Title\u6c47\u603b\u8ba1\u7b97Survived\u5747\u503c\uff0c\u67e5\u770b\u76f8\u5173\u6027\ntrain_df[[\"Title\",\"Survived\"]].groupby([\"Title\"],as_index=False).mean()","64be82f6":"# title\u7279\u5f81\u6620\u5c04\u4e3a\u6570\u503c\ntitle_mapping = {\"Mr\":1,\"Miss\":2,\"Mrs\":3,\"Master\":4,\"Rare_Female\":5,\"Rare_Male\":6}\nfor dataset in combine:\n    dataset[\"Title\"] = dataset[\"Title\"].map(title_mapping)\n    dataset[\"Title\"] = dataset[\"Title\"].fillna(0)\n    # \u4e3a\u4e86\u907f\u514d\u6709\u7a7a\u6570\u636e\u7684\u5e38\u89c4\u64cd\u4f5c\ntrain_df.head()","d3db89a4":"# Name\u5b57\u6bb5\u53ef\u4ee5\u5254\u9664\u4e86\n# \u8bad\u7ec3\u96c6\u7684PassengerId\u5b57\u6bb5\u4ec5\u4e3a\u81ea\u589e\u5b57\u6bb5\uff0c\u4e0e\u9884\u6d4b\u65e0\u5173\uff0c\u53ef\u5254\u9664\ntrain_df = train_df.drop([\"Name\",\"PassengerId\"],axis=1)\ntest_df = test_df.drop([\"Name\"],axis=1)","61d6bc4f":"# \u6bcf\u6b21\u5220\u9664\u7279\u5f81\u65f6\u90fd\u8981\u91cd\u65b0combine\ncombine = [train_df,test_df]\ncombine[0].shape,combine[1].shape","677bfaba":"# sex\u7279\u5f81\u6620\u5c04\u4e3a\u6570\u503c\nfor dataset in combine:\n    dataset[\"Sex\"] = dataset[\"Sex\"].map({\"female\":1,\"male\":0}).astype(int)\n    # \u540e\u9762\u52a0astype(int)\u662f\u4e3a\u4e86\u907f\u514d\u5904\u7406\u4e3a\u5e03\u5c14\u578b\uff1f\ntrain_df.head()","72a7f608":"# \u5bf9Age\u5b57\u6bb5\u7684\u7a7a\u503c\u8fdb\u884c\u9884\u6d4b\u8865\u5145\n# \u53d6\u76f8\u540cPclass\u548cTitle\u7684\u5e74\u9f84\u4e2d\u4f4d\u6570\u8fdb\u884c\u8865\u5145\uff08Demo\u4e3aPclass\u548cSex\uff09\n\ngrid = sns.FacetGrid(train_df,col=\"Pclass\",row=\"Title\")\ngrid.map(plt.hist,\"Age\",bins=20)","570f5f89":"guess_ages = np.zeros((6,3))\nguess_ages","2be352b0":"# \u7ed9age\u5e74\u9f84\u5b57\u6bb5\u7684\u7a7a\u503c\u586b\u5145\u4f30\u503c\n# \u4f7f\u7528\u76f8\u540cPclass\u548cTitle\u7684Age\u4e2d\u4f4d\u6570\u6765\u66ff\u4ee3\uff08\u5bf9\u4e8e\u4e2d\u4f4d\u6570\u4e3a\u7a7a\u7684\u7ec4\u5408\uff0c\u4f7f\u7528Title\u6574\u4f53\u7684\u4e2d\u4f4d\u6570\u6765\u66ff\u4ee3\uff09\n\n\nfor dataset in combine:\n    # \u53d66\u79cd\u7ec4\u5408\u7684\u4e2d\u4f4d\u6570\n    for i in range(0, 6):\n        \n        for j in range(0, 3):\n            guess_title_df = dataset[dataset[\"Title\"]==i+1][\"Age\"].dropna()\n            \n            guess_df = dataset[(dataset['Title'] == i+1) & (dataset['Pclass'] == j+1)]['Age'].dropna()\n            \n            # age_mean = guess_df.mean()\n            # age_std = guess_df.std()\n            # age_guess = rnd.uniform(age_mean - age_std, age_mean + age_std)\n\n            age_guess = guess_df.median() if ~np.isnan(guess_df.median()) else guess_title_df.median()\n            #print(i,j,guess_df.median(),guess_title_df.median(),age_guess)\n            # Convert random age float to nearest .5 age\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n    # \u7ed9\u6ee1\u8db36\u4e2d\u60c5\u51b5\u7684Age\u5b57\u6bb5\u8d4b\u503c\n    for i in range(0, 6):\n        for j in range(0, 3):\n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Title == i+1) & (dataset.Pclass == j+1),\n                        'Age'] = guess_ages[i,j]\n\n    dataset['Age'] = dataset['Age'].astype(int)\n\ntrain_df.head()","69688b33":"#\u521b\u5efa\u662f\u5426\u513f\u7ae5\u7279\u5f81\nfor dataset in combine:\n    dataset.loc[dataset[\"Age\"] > 12,\"IsChildren\"] = 0\n    dataset.loc[dataset[\"Age\"] <= 12,\"IsChildren\"] = 1\ntrain_df.head()","8cea9786":"# \u521b\u5efa\u5e74\u9f84\u533a\u95f4\u7279\u5f81\n# pd.cut\u662f\u6309\u503c\u7684\u5927\u5c0f\u5747\u5300\u5207\u5206\uff0c\u6bcf\u7ec4\u503c\u533a\u95f4\u5927\u5c0f\u76f8\u540c\uff0c\u4f46\u6837\u672c\u6570\u53ef\u80fd\u4e0d\u4e00\u81f4\n# pd.qcut\u662f\u6309\u7167\u6837\u672c\u5728\u503c\u4e0a\u7684\u5206\u5e03\u9891\u7387\u5207\u5206\uff0c\u6bcf\u7ec4\u6837\u672c\u6570\u76f8\u540c\ntrain_df[\"AgeBand\"] = pd.qcut(train_df[\"Age\"],8)\ntrain_df[[\"AgeBand\",\"Survived\"]].groupby([\"AgeBand\"],as_index = False).mean().sort_values(by=\"AgeBand\",ascending=True)","000f8e1d":"# \u628a\u5e74\u9f84\u6309\u533a\u95f4\u6807\u51c6\u5316\u4e3a0\u52304\nfor dataset in combine:    \n    dataset.loc[ dataset['Age'] <= 17, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 17) & (dataset['Age'] <= 21), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 21) & (dataset['Age'] <= 25), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 25) & (dataset['Age'] <= 26), 'Age'] = 3\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 31), 'Age'] = 4\n    dataset.loc[(dataset['Age'] > 31) & (dataset['Age'] <= 36.5), 'Age'] = 5\n    dataset.loc[(dataset['Age'] > 36.5) & (dataset['Age'] <= 45), 'Age'] = 6\n    dataset.loc[ dataset['Age'] > 45, 'Age'] = 7\ntrain_df.head()","f878dbe1":"# \u79fb\u9664AgeBand\u7279\u5f81\ntrain_df = train_df.drop([\"AgeBand\"],axis=1)\ncombine = [train_df,test_df]\ntrain_df.head()","2184e856":"# \u521b\u5efa\u5bb6\u5ead\u89c4\u6a21FamilySize\u7ec4\u5408\u7279\u5f81\nfor dataset in combine:\n    dataset[\"FamilySize\"] = dataset[\"Parch\"] + dataset[\"SibSp\"] + 1\ntrain_df[[\"FamilySize\",\"Survived\"]].groupby([\"FamilySize\"],as_index = False).mean().sort_values(by=\"FamilySize\",ascending=True)\n","2fa7d5d4":"# \u521b\u5efa\u662f\u5426\u72ec\u81ea\u4e00\u4ebaIsAlone\u7279\u5f81\nfor dataset in combine:\n    dataset[\"IsAlone\"] = 0\n    dataset.loc[dataset[\"FamilySize\"] == 1,\"IsAlone\"] = 1\ntrain_df[[\"IsAlone\",\"Survived\"]].groupby([\"IsAlone\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","66e7a9a8":"# \u79fb\u9664Parch,Sibsp,FamilySize\uff08\u6682\u4e14\u4fdd\u7559\u8bd5\u8bd5\uff09\n# \u7ed9\u5b57\u6bb5\u8d4b\u503c\u53ef\u4ee5\u5728combine\u4e2d\u5faa\u73af\u64cd\u4f5c\uff0c\u5220\u9664\u5b57\u6bb5\u4e0d\u53ef\u4ee5\uff0c\u9700\u8981\u5bf9\u6307\u5b9a\u7684df\u8fdb\u884c\u64cd\u4f5c\ntrain_df = train_df.drop([\"Parch\",\"SibSp\"],axis=1)\ntest_df = test_df.drop([\"Parch\",\"SibSp\"],axis=1)\ncombine = [train_df,test_df]\ntrain_df.head()","42b43e3d":"# \u521b\u5efa\u5e74\u9f84*\u7ea7\u522bAge*Pclass\u7279\u5f81\n# \u8fd9\u4e2a\u6709\u5565\u610f\u4e49\uff1f\n#for dataset in combine:\n#    dataset[\"Age*Pclass\"] = dataset[\"Age\"] * dataset[\"Pclass\"]\n#train_df.loc[:,[\"Age*Pclass\",\"Age\",\"Pclass\"]].head()","98d2e61d":"# \u7ed9Embarked\u8865\u5145\u7a7a\u503c\n# \u83b7\u53d6\u4e0a\u8239\u6700\u591a\u7684\u6e2f\u53e3\nfreq_port = train_df[\"Embarked\"].dropna().mode()[0]\nfreq_port","d2a729b1":"for dataset in combine:\n    dataset[\"Embarked\"] = dataset[\"Embarked\"].fillna(freq_port)\ntrain_df[[\"Embarked\",\"Survived\"]].groupby([\"Embarked\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","13f37917":"# \u628aEmbarked\u6570\u5b57\u5316\nfor dataset in combine:\n    dataset[\"Embarked\"] = dataset[\"Embarked\"].map({\"S\":0,\"C\":1,\"Q\":2}).astype(int)\ntrain_df.head()","9adcaa80":"# \u53bb\u6389Embarked\u8bd5\u8bd5\u3002\u3002\n#train_df = train_df.drop([\"Embarked\"],axis=1)\n#test_df = test_df.drop([\"Embarked\"],axis=1)\n#combine=[train_df,test_df]\n#train_df.head()","254782b9":"# \u7ed9\u6d4b\u8bd5\u96c6\u4e2d\u7684Fare\u586b\u5145\u7a7a\u503c\uff0c\u4f7f\u7528\u4e2d\u4f4d\u6570\ntest_df[\"Fare\"].fillna(test_df[\"Fare\"].dropna().median(),inplace=True)\ntest_df.info()","1164d03f":"# \u521b\u5efaFareBand\u533a\u95f4\u7279\u5f81\ntrain_df[\"FareBand\"] = pd.qcut(train_df[\"Fare\"],4)\ntrain_df[[\"FareBand\",\"Survived\"]].groupby([\"FareBand\"],as_index=False).mean().sort_values(by=\"FareBand\",ascending=True)","6af31435":"# \u6839\u636eFareBand\u5c06Fare\u7279\u5f81\u8f6c\u6362\u4e3a\u5e8f\u6570\u503c\nfor dataset in combine:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntrain_df = train_df.drop(['FareBand'], axis=1)\ncombine = [train_df, test_df]\n    \ntrain_df.head(10)","d5400018":"test_df.head(10)","b01bd948":"# \u7528seaborn\u7684heatmap\u5bf9\u7279\u5f81\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u8fdb\u884c\u53ef\u89c6\u5316\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14,12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(train_df.astype(float).corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True)","010ebd4c":"# \u7528seaborn\u7684pairplot\u770b\u5404\u7279\u5f81\u7ec4\u5408\u7684\u6837\u672c\u5206\u5e03\ng = sns.pairplot(train_df[[u'Survived', u'Pclass', u'Sex', u'Age', u'Fare', u'Embarked',\n       u'FamilySize', u'Title', u'IsChildren', u'IsAlone', u'HasCabin',u'NameLength']], \n                 hue='Survived', palette = 'seismic',size=1.2,diag_kind = 'kde',\n                 diag_kws=dict(shade=True),plot_kws=dict(s=10) )\ng.set(xticklabels=[])\n# \u6709\u70b9\u6d6e\u5938\uff0c\u9700\u8981\u6307\u70b9","72bb0221":"X_train = train_df.drop(\"Survived\",axis=1)\nY_train = train_df[\"Survived\"]\nX_test = test_df.drop(\"PassengerId\",axis=1).copy()\nX_train.shape,Y_train.shape,X_test.shape","35e3408c":"# Logistic Regression\nlogreg = LogisticRegression()\nlogreg.fit(X_train,Y_train)\nY_pred_logreg = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train,Y_train)*100,2)\nacc_log","5a216528":"coeff_df = pd.DataFrame(train_df.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","36bb78f4":"# Support Vector Machines\n\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred_svc = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","fd176952":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred_knn = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","d9e88662":"# Gaussian Naive Bayes\n\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred_gaussian = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","6b174ac9":"# Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred_perceptron = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\nacc_perceptron","6c14b4df":"# Linear SVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred_linear_svc = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nacc_linear_svc","c32f827a":"# Stochastic Gradient Descent\n\nsgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nY_pred_sgd = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\nacc_sgd","72905c49":"# Decision Tree\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred_decision_tree = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","3ad7adad":"from sklearn.model_selection import train_test_split\n\nX_all = train_df.drop(['Survived'], axis=1)\ny_all = train_df['Survived']\n\nnum_test = 0.20\nX_train, X_test, y_train, y_test = train_test_split(X_all, y_all, test_size=num_test, random_state=23)","e0787fdf":"# Random Forest\nfrom sklearn.metrics import make_scorer, accuracy_score\nfrom sklearn.model_selection import GridSearchCV\nrandom_forest = RandomForestClassifier()\n\nparameters = {'n_estimators': [4, 6, 9], \n              'max_features': ['log2', 'sqrt','auto'], \n              'criterion': ['entropy', 'gini'],\n              'max_depth': [2, 3, 5, 10], \n              'min_samples_split': [2, 3, 5],\n              'min_samples_leaf': [1,5,8]\n             }\nacc_scorer = make_scorer(accuracy_score)\ngrid_obj = GridSearchCV(random_forest, parameters, scoring=acc_scorer)\ngrid_obj = grid_obj.fit(X_train, y_train)\nclf = grid_obj.best_estimator_\nclf.fit(X_train, y_train)\npred = clf.predict(X_test)\nacc_random_forest_split=accuracy_score(y_test, pred)\nacc_random_forest_split\n\n\n#random_forest.fit(X_train, Y_train)\n#Y_pred_random_forest = random_forest.predict(X_test)\n#random_forest.score(X_train, Y_train)\n#acc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\n#acc_random_forest","9bfe6144":"from sklearn.cross_validation import KFold\n\ndef run_kfold(clf):\n    kf = KFold(891, n_folds=10)\n    outcomes = []\n    fold = 0\n    for train_index, test_index in kf:\n        fold += 1\n        X_train, X_test = X_all.values[train_index], X_all.values[test_index]\n        y_train, y_test = y_all.values[train_index], y_all.values[test_index]\n        clf.fit(X_train, y_train)\n        predictions = clf.predict(X_test)\n        accuracy = accuracy_score(y_test, predictions)\n        outcomes.append(accuracy)\n        print(\"Fold {0} accuracy: {1}\".format(fold, accuracy))     \n    mean_outcome = np.mean(outcomes)\n    print(\"Mean Accuracy: {0}\".format(mean_outcome)) \n\nrun_kfold(clf)\n","ec6e9f01":"Y_pred_random_forest_split = clf.predict(test_df.drop(\"PassengerId\",axis=1))\n","c79370be":"#from sklearn.cross_validation import KFold\n\n#def run_kfold(clf):\n#    kf = KFold(891, n_folds=10)\n#    outcomes = []\n#    fold = 0\n#    for train_index, test_index in kf:\n#        fold += 1\n#        X_train, X_test = X_all.values[train_index], X_all.values[test_index]\n#        y_train, y_test = y_all.values[train_index], y_all.values[test_index]\n#        clf.fit(X_train, y_train)\n#        predictions = clf.predict(X_test)\n#        accuracy = accuracy_score(y_test, predictions)\n#        outcomes.append(accuracy)\n#        print(\"Fold {0} accuracy: {1}\".format(fold, accuracy))     \n#    mean_outcome = np.mean(outcomes)\n#    print(\"Mean Accuracy: {0}\".format(mean_outcome)) \n\n#run_kfold(clf)","aeedec89":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [acc_svc, acc_knn, \n              acc_log, \n              acc_random_forest_split,\n              #acc_random_forest,\n              acc_gaussian, \n              acc_perceptron, \n              acc_sgd, \n              acc_linear_svc, \n              acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","9c137da9":"import time\nprint(time.strftime('%Y%m%d%H%M',time.localtime(time.time())))","64716be9":"# \u53d6\u6700\u540e\u66f4\u65b0\u7684\u968f\u673a\u68ee\u6797\u6a21\u578b\u7684\u9884\u6d4b\u6570\u636e\u8fdb\u884c\u63d0\u4ea4\n\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred_random_forest_split\n        #\"Survived\": Y_pred_random_forest\n    })\nsubmission.to_csv('submission_random_forest_'\n                  +time.strftime('%Y%m%d%H%M',time.localtime(time.time()))\n                  +\".csv\", \n                  index=False)","1daa7e04":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred_decision_tree\n    })\nsubmission.to_csv('submission_decision_tree'\n                  +time.strftime('%Y%m%d%H%M',time.localtime(time.time()))\n                  +\".csv\", \n                  index=False)","586c9982":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred_knn\n    })\nsubmission.to_csv('submission_knn_'\n                  +time.strftime('%Y%m%d%H%M',time.localtime(time.time()))\n                  +\".csv\", \n                  index=False)","349911bd":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred_svc\n    })\nsubmission.to_csv('submission_svc_'\n                  +time.strftime('%Y%m%d%H%M',time.localtime(time.time()))\n                  +\".csv\", \n                  index=False)","c7020979":"## 3.6 FamilySize","fca6d2e3":"### 4.1.2 SVC","78aea056":"# 4.\u5efa\u6a21\u548c\u4f18\u5316","0b0a3fad":"## 3.5 IsChildren","cbd7b798":"### 4.1.7 SGD","3480109a":"## 2.1 \u7279\u5f81\u57fa\u672c\u4fe1\u606f\uff08head\uff0cinfo\uff0cdescribe\uff09","76ce0caa":"# 1.\u83b7\u53d6\u6570\u636e\n* \u5bfc\u5165\u673a\u5668\u5b66\u4e60\u6a21\u578b\u7684\u8fc7\u7a0b\u4e5f\u53ef\u4ee5\u653e\u5230\u6a21\u578b\u62df\u5408\u524d","8d96f3d7":"### 4.1.9 \u968f\u673a\u68ee\u6797\n* \u5305\u542b\u62c6\u5206\u9a8c\u8bc1\u96c6\u53caKfold\u65b9\u6cd5","76f42b52":"## 2.4 \u5176\u4ed6\u7279\u5f81\u53ef\u89c6\u5316\u63a2\u7d22\n* pointplot\u4e0d\u592a\u7406\u89e3\uff0c\u5f85\u7ec6\u770b","22912559":"### 4.1.5 Perceptron \u611f\u77e5\u5668","d192e996":"# 2.\u63a2\u7d22\u6570\u636e","7c71598e":"## 3.8 Embarked","844b527d":"## 3.12 \u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u51c6\u5907","1cdcc3d5":"### 4.1.4 Naive Bayes","62f0c2dd":"# \u95ee\u9898\u5b9a\u4e49\n## \u80cc\u666f\n\n* \u6cf0\u5766\u5c3c\u514b\u53f7\uff1a\u82f1\u56fd\u767d\u661f\u822a\u8fd0\u516c\u53f8\u4e0b\u8f96\u7684\u4e00\u8258\u5965\u6797\u5339\u514b\u7ea7\u90ae\u8f6e\uff0c\u4e8e1909\u5e743\u670831\u65e5\u5728\u7231\u5c14\u5170\u8d1d\u5c14\u6cd5\u65af\u7279\u6e2f\u7684\u54c8\u5170\u5fb7\u4e0e\u6c83\u5c14\u592b\u9020\u8239\u5382\u52a8\u5de5\u5efa\u9020\uff0c1911\u5e745\u670831\u65e5\u4e0b\u6c34\uff0c1912\u5e744\u67082\u65e5\u5b8c\u5de5\u8bd5\u822a\u3002\n* \u9996\u822a\u65f6\u95f4\uff1a1912\u5e744\u670810\u65e5\n* \u822a\u7ebf\uff1a\u4ece\u82f1\u56fd\u5357\u5b89\u666e\u6566\u51fa\u53d1\uff0c\u9014\u7ecf\u6cd5\u56fd\u745f\u5821-\u5965\u514b\u7279\u7ef4\u5c14\u4ee5\u53ca\u7231\u5c14\u5170\u6606\u58eb\u6566\uff0c\u9a76\u5411\u7f8e\u56fd\u7ebd\u7ea6\u3002\n* \u6c89\u8239\uff1a1912\u5e744\u670815\u65e5\uff081912\u5e744\u670814\u65e523\u65f640\u5206\u5de6\u53f3\u649e\u51fb\u51b0\u5c71\uff09\n* \u8239\u5458+\u4e58\u5ba2\u4eba\u6570\uff1a2224\n* \u9047\u96be\u4eba\u6570\uff1a1502\uff0867.5%\uff09\n\n## \u76ee\u6807\n\u6839\u636e\u8bad\u7ec3\u96c6\u4e2d\u5404\u4f4d\u4e58\u5ba2\u7684\u7279\u5f81\u53ca\u662f\u5426\u83b7\u6551\u6807\u5fd7\u7684\u5bf9\u5e94\u5173\u7cfb\u8bad\u7ec3\u6a21\u578b\uff0c\u9884\u6d4b\u6d4b\u8bd5\u96c6\u4e2d\u7684\u4e58\u5ba2\u662f\u5426\u83b7\u6551\u3002\uff08\u4e8c\u5143\u5206\u7c7b\u95ee\u9898\uff09\n\n## \u6570\u636e\u5b57\u5178\n### \u57fa\u7840\u5b57\u6bb5\n* PassengerId \u4e58\u5ba2id\n    * \u8bad\u7ec3\u96c6891\uff081- 891\uff09\uff0c\u6d4b\u8bd5\u96c6418\uff08892 - 1309\uff09\n* Survived \u662f\u5426\u83b7\u6551\n    * 1=\u662f\uff0c2=\u4e0d\u662f\n    * \u83b7\u6551\uff1a38%\n    * \u9047\u96be\uff1a62%\uff08\u5b9e\u9645\u9047\u96be\u6bd4\u4f8b\uff1a67.5%\uff09\n* Pclass \u8239\u7968\u7ea7\u522b\n    * \u4ee3\u8868\u793e\u4f1a\u7ecf\u6d4e\u5730\u4f4d\u3002 1=\u9ad8\u7ea7\uff0c2=\u4e2d\u7ea7\uff0c3=\u4f4e\u7ea7\n    * 1 : 2 : 3 = 0.24 : 0.21 : 0.55\n* Name \u59d3\u540d\n    * \u793a\u4f8b\uff1aFutrelle, Mrs. Jacques Heath (Lily May Peel)\n    * \u793a\u4f8b\uff1aHeikkinen, Miss. Laina\n* Sex \u6027\u522b\n    * male \u7537 577\uff0cfemale \u5973 314\n    * \u7537 : \u5973 = 0.65 : 0.35\n* Age \u5e74\u9f84\uff08\u7f3a\u5c1120%\u6570\u636e\uff09\n    * \u8bad\u7ec3\u96c6\uff1a714\/891 = 80%\n    * \u6d4b\u8bd5\u96c6\uff1a332\/418 = 79%\n* SibSp \u540c\u884c\u7684\u5144\u5f1f\u59d0\u59b9\u6216\u914d\u5076\u603b\u6570\n    * 68%\u65e0\uff0c23%\u67091\u4e2a \u2026 \u6700\u591a8\u4e2a\n* Parch \u540c\u884c\u7684\u7236\u6bcd\u6216\u5b69\u5b50\u603b\u6570\n    * 76%\u65e0\uff0c13%\u67091\u4e2a\uff0c9%\u67092\u4e2a \u2026 \u6700\u591a6\u4e2a\n    * Some children travelled only with a nanny, therefore parch=0 for them.\n* Ticket \u7968\u53f7\uff08\u683c\u5f0f\u4e0d\u7edf\u4e00\uff09\n    * \u793a\u4f8b\uff1aA\/5 21171\n    * \u793a\u4f8b\uff1aSTON\/O2. 3101282\n* Fare \u7968\u4ef7\n    * \u6d4b\u8bd5\u96c6\u7f3a\u4e00\u4e2a\u6570\u636e\n* Cabin \u8239\u8231\u53f7\n    * \u8bad\u7ec3\u96c6\u53ea\u6709204\u6761\u6570\u636e\uff0c\u6d4b\u8bd5\u96c6\u670991\u6761\u6570\u636e\n    * \u793a\u4f8b\uff1aC85\n* Embarked \u767b\u8239\u6e2f\u53e3\n    * C = Cherbourg\uff08\u745f\u5821\uff0919%, Q = Queenstown\uff08\u7687\u540e\u9547\uff099%, S = Southampton\uff08\u5357\u5b89\u666e\u6566\uff0972%\n    * \u8bad\u7ec3\u96c6\u5c11\u4e24\u4e2a\u6570\u636e\n\n### \u884d\u751f\u5b57\u6bb5\uff08\u90e8\u5206\uff0c\u5728\u540e\u7eed\u4ee3\u7801\u4e2d\u8865\u5145\uff09\n* Title \u79f0\u8c13\n    * dataset.Name.str.extract( \u201c ([A-Za-z]+)\\.\u201d, expand = False)\n    * \u4ece\u59d3\u540d\u4e2d\u63d0\u53d6\uff0c\u4e0e\u59d3\u540d\u548c\u793e\u4f1a\u5730\u4f4d\u76f8\u5173\n* FamilySize \u5bb6\u5ead\u89c4\u6a21\n    * Parch + SibSp + 1\n    * \u7528\u4e8e\u8ba1\u7b97\u662f\u5426\u72ec\u81ea\u51fa\u884cIsAlone\u7279\u5f81\u7684\u4e2d\u95f4\u7279\u5f81\uff0c\u6682\u4e14\u4fdd\u7559\n* IsAlone \u72ec\u81ea\u4e00\u4eba\n    * FamilySize == 1\n    * \u662f\u5426\u72ec\u81ea\u51fa\u884c\n* HasCabin \u6709\u72ec\u7acb\u8231\u5ba4\n    * \u4e0d\u786e\u5b9a\u6ca1CabinId\u7684\u6837\u672c\u662f\u6ca1\u6709\u8231\u5ba4\u8fd8\u662f\u6570\u636e\u786e\u5b9e","128e76b2":"## 3.3 Title","f4023465":"### 4.1.8 \u51b3\u7b56\u6811","554d6e60":"# \u5907\u6ce8\n\n> [Kernel\u53c2\u8003\uff1aTitanic Data Science Solutions](https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions)\n\n## \u5de5\u4f5c\u6d417\u4e2a\u6b65\u9aa4\n\n1. \u95ee\u9898\u5b9a\u4e49Question or problem definition.\n1.  \u83b7\u53d6\u8bad\u7ec3\u548c\u6d4b\u8bd5\u6570\u636eAcquire training and testing data.\n1. \u6570\u636e\u51c6\u5907\u548c\u6e05\u6d17Wrangle, prepare, cleanse the data.\n1. \u5206\u6790\uff0c\u8bc6\u522b\u6570\u636e\u6a21\u578b\uff0c\u63a2\u7d22\u6570\u636eAnalyze, identify patterns, and explore the data.\n1. \u5efa\u6a21\uff0c\u9884\u6d4b\uff0c\u89e3\u51b3\u95ee\u9898Model, predict and solve the problem.\n1. \u53ef\u89c6\u5316\uff0c\u62a5\u8868\uff0c\u5c55\u793a\u89e3\u51b3\u6b65\u9aa4\u548c\u6700\u7ec8\u89e3\u51b3\u65b9\u6848Visualize, report, and present the problem solving steps and final solution.\n1. \u63d0\u4ea4\u7ed3\u679cSupply or submit the results.\n\n## \u7279\u5f81\u5de5\u7a0b\n\n* Classifying\uff1a\u6837\u672c\u5206\u7c7b\u6216\u5206\u7ea7\n* Correlating\uff1a\u6837\u672c\u9884\u6d4b\u7ed3\u679c\u548c\u7279\u5f81\u7684\u5173\u8054\u7a0b\u5ea6\uff0c\u7279\u5f81\u4e4b\u95f4\u7684\u5173\u8054\u7a0b\u5ea6\n* Converting\uff1a\u7279\u5f81\u8f6c\u6362\uff08\u5411\u91cf\u5316\uff09\n* Completing\uff1a\u7279\u5f81\u7f3a\u5931\u503c\u9884\u4f30\u5b8c\u5584\n* Correcting\uff1a\u5bf9\u4e8e\u660e\u663e\u79bb\u7fa4\u6216\u4f1a\u9020\u6210\u9884\u6d4b\u7ed3\u679c\u660e\u663e\u503e\u659c\u7684\u5f02\u5e38\u6570\u636e\uff0c\u8fdb\u884c\u4fee\u6b63\u6216\u6392\u9664\n* Creating\uff1a\u6839\u636e\u73b0\u6709\u7279\u5f81\u884d\u751f\u65b0\u7684\u7279\u5f81\uff0c\u4ee5\u6ee1\u8db3\u5173\u8054\u6027\u3001\u5411\u91cf\u5316\u4ee5\u53ca\u5b8c\u6574\u5ea6\u7b49\u76ee\u6807\u4e0a\u7684\u8981\u6c42\n* Charting\uff1a\u6839\u636e\u6570\u636e\u6027\u8d28\u548c\u95ee\u9898\u76ee\u6807\u9009\u62e9\u6b63\u786e\u7684\u53ef\u89c6\u5316\u56fe\u8868\n","a1e4f9fc":"## 3.2 HasCabin","cef9e6cb":"### 4.1.6 Linear SVC","8c5d732e":"## 4.2 \u6a21\u578b\u6548\u679c\u6bd4\u8f83","1cf26847":"## 3.9 Fare","5e56c5df":"## 3.11 \u7279\u5f81\u76f8\u5173\u6027\u53ef\u89c6\u5316","11f0275e":"## 3.10 \u7279\u5f81\u5de5\u7a0b\u5b8c\u6210\n* Pclass\u7279\u5f81\u4e0d\u9700\u8981\u7279\u6b8a\u5904\u7406","fc3da80e":"## 4.1 \u6a21\u578b\u6bd4\u8f83\n### 4.1.1 \u903b\u8f91\u56de\u5f52","de6814fe":"## 3.5 Age","7beb1d26":"## 2.3 \u5bf9\u5e74\u9f84\u8fd9\u7c7b\u8de8\u5ea6\u8f83\u957f\u7684\u7279\u5f81\u4f7f\u7528\u76f4\u65b9\u56fe\u5206\u522b\u67e5\u770b\u751f\u8fd8\u4e0e\u5426\u7684\u5206\u5e03","0801ca51":"## 3.7 IsAlone","8a00d585":"## \u63d0\u4ea4\u7ed3\u679c","022156a3":"# 3.\u7279\u5f81\u6e05\u6d17","8f53c6bc":"* \u5254\u9664Ticket\uff08\u4eba\u4e3a\u5224\u65ad\u65e0\u5173\u8054\uff09\u548cCabin\uff08\u6709\u6548\u6570\u636e\u592a\u5c11\uff09\u4e24\u4e2a\u7279\u5f81","0b6c6521":"### 4.1.3 KNN","50e038b3":"## 3.1 NameLength\n* \u4ece\u522b\u7684kernel\u770b\u5230\u7684\uff0c\u4e0d\u786e\u5b9a\u6548\u679c","1109408a":"## 2.2 \u51e0\u4e2a\u679a\u4e3e\u578b\u7279\u5f81\u4e0eSurvived\u7684\u5173\u8054\u6027\uff08\u76f4\u63a5group\u6c47\u603b\u6c42\u5747\u503c\uff09","d77d49c7":"## 3.4 Sex"}}