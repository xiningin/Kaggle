{"cell_type":{"a1b71003":"code","f17f9af0":"code","60056eb9":"code","a2932f04":"code","c0f12a58":"code","a16c759b":"code","579c0871":"code","fdf41aff":"code","3b568cd4":"code","77c6b527":"code","0f18bcfc":"code","eebd9c86":"code","ae43fa22":"code","7b0f0351":"code","347d8ea7":"code","c31715b3":"code","7795812d":"code","a1d94a09":"code","c61b216c":"markdown","0370569f":"markdown","fe03e6c3":"markdown","b2af5474":"markdown","d02ec181":"markdown","89a3de37":"markdown"},"source":{"a1b71003":"import pandas as pd\nimport matplotlib.pylab as plt\nimport seaborn as sns\nfrom pathlib import Path\nfrom pandas.plotting import register_matplotlib_converters\n%matplotlib inline","f17f9af0":"sns.set(font_scale=1.5)","60056eb9":"BASE_FOLDER_PATH = Path(\"..\/input\/m5-forecasting-accuracy\/\")\nSALES_TRAIN_VALIDATION_PATH = BASE_FOLDER_PATH \/ \"sales_train_validation.csv\"\nTRAIN_START_DATE = pd.to_datetime(\"2011-01-29\")\nTRAIN_END_DATE = pd.to_datetime(\"2016-04-24\")","a2932f04":"df = pd.read_csv(SALES_TRAIN_VALIDATION_PATH)","c0f12a58":"store_mean_df = pd.concat([df.filter(like=\"d_\"), df[\"store_id\"]], axis=1).groupby(\"store_id\").mean().reset_index()\n# Need to melt the data to get better data format\nstore_mean_df = store_mean_df.melt(id_vars=\"store_id\", value_name=\"qty\", var_name=\"date\")\n","a16c759b":"dates_s = pd.date_range(TRAIN_START_DATE, TRAIN_END_DATE, freq=\"1D\")\ndate_labels = store_mean_df[\"date\"].unique()\ndate_labels_to_date_d = dict(zip(date_labels, dates_s))","579c0871":"# Map date labels (d_1, d_2 and so on ) to actual dates\nstore_mean_df[\"date\"] = store_mean_df[\"date\"].map(date_labels_to_date_d)","fdf41aff":"store_mean_df.sample(10)","3b568cd4":"def compute_rolling_mean_per_store_df(df, period=30):\n    return (df.set_index(\"date\").groupby(\"store_id\")\n                                .rolling(period)\n                                .mean()\n                                .reset_index())","77c6b527":"# Approximate month with 30 days and year with 365 days\nmonthly_rolling_mean_store_df = compute_rolling_mean_per_store_df(store_mean_df, period=30)\nyearly_rolling_mean_store_df = compute_rolling_mean_per_store_df(store_mean_df, period=365)","0f18bcfc":"register_matplotlib_converters()","eebd9c86":"g = sns.FacetGrid(monthly_rolling_mean_store_df.dropna(), col=\"store_id\", col_wrap=3)\ng = g.map(plt.plot, \"date\", \"qty\")","ae43fa22":"g = sns.FacetGrid(yearly_rolling_mean_store_df.dropna(), col=\"store_id\",  col_wrap=3)\ng = g.map(plt.plot, \"date\", \"qty\")","7b0f0351":"from fbprophet import Prophet\nfrom fbprophet.plot import add_changepoints_to_plot\n\ndfs = []\n\n\ndef fit_and_plot_trend(store_id):\n    # Need to rename date and qty columns so that Prophet is happy. :)\n    ts_df = (yearly_rolling_mean_store_df.loc[lambda df: df[\"store_id\"] == store_id].dropna()\n                                         .drop(\"store_id\", axis=1)\n                                         .rename(columns={\"date\": \"ds\", \"qty\": \"y\"}))\n    m = Prophet(daily_seasonality=True)\n    m.fit(ts_df)\n    future = m.make_future_dataframe(periods=28)\n    forecast = m.predict(future)\n    fig = m.plot(forecast)\n    dfs.append(forecast[[\"ds\", \"trend\"]].assign(store_id=store_id))\n    return add_changepoints_to_plot(fig.gca(), m, forecast)","347d8ea7":"# 10 stores\nSTORE_IDS = ['CA_1', 'CA_2', 'CA_3', 'CA_4', 'TX_1', 'TX_2', 'TX_3', 'WI_1', 'WI_2', 'WI_3']","c31715b3":"for store_id in STORE_IDS:\n    print(f\"Fitting a trend for {store_id}\")\n    fit_and_plot_trend(store_id)","7795812d":"store_to_trend_dict = (pd.concat(dfs).loc[lambda df: df[\"ds\"] == TRAIN_END_DATE, [\"store_id\", \"trend\"]]\n                                     .set_index(\"store_id\")[\"trend\"]\n                                     .to_dict())","a1d94a09":"store_to_trend_dict","c61b216c":"A short notebook where I explore if there is a trend or not per store","0370569f":"<img src=\"https:\/\/emojipedia-us.s3.dualstack.us-west-1.amazonaws.com\/thumbs\/120\/google\/241\/thinking-face_1f914.png\"> More on this next time (maybe)...","fe03e6c3":"# Load the raw data and compute daily sales mean per store","b2af5474":"#\u00a0Fitting the trend on the yearly time series","d02ec181":"# Rolling monthly and yearly store means","89a3de37":"# Are these linked to the \"magic\" multipliers? "}}