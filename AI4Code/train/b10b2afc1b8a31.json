{"cell_type":{"0e1011a5":"code","a9b18494":"code","dab9137b":"code","e6a1122c":"code","cd43df63":"code","a30e6063":"code","f9079890":"code","b3fde80e":"code","f4727684":"code","8ab74938":"code","fbed6ad2":"code","6a464dec":"code","c65af354":"code","9ddf9930":"code","e4e55dc2":"code","44c8b31a":"code","f0924c86":"code","30918fee":"code","09ad0891":"code","3f381358":"code","22ead391":"code","05d742d1":"code","c8bb5b61":"code","788dbfe9":"code","d51aaf60":"code","39022e08":"code","1e746f47":"code","05b31757":"code","e2ce9123":"markdown","54d8368c":"markdown","92d18445":"markdown","be1a3330":"markdown","fecef0c7":"markdown","de2018bb":"markdown","8c7fdfd5":"markdown","fc67c51e":"markdown","cabc2cf7":"markdown","c65f6bc2":"markdown","7dda5ebc":"markdown","4f08f0c1":"markdown","e47fadcc":"markdown","399e66f0":"markdown","455f42f2":"markdown","43efe08e":"markdown","5cb1f757":"markdown","4731a431":"markdown","6a02dca0":"markdown"},"source":{"0e1011a5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt","a9b18494":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","dab9137b":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-oct-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-oct-2021\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-oct-2021\/sample_submission.csv\")","e6a1122c":"train","cd43df63":"test","a30e6063":"submission","f9079890":"short_train = train[: 250000]\nshort_train","b3fde80e":"import seaborn as sns\n\nsns.histplot(short_train.target)","f4727684":"target = short_train.target\n\ncombi = short_train.drop(['target'], axis=1).append(test)\ncombi","8ab74938":"combi.info()","fbed6ad2":"combi.isnull().sum().sum()","6a464dec":"#combi = (combi - combi.mean()) \/ np.std(combi)\n#combi","c65af354":"combi = (combi - combi.min()) \/ (combi.max() - combi.min())\ncombi","9ddf9930":"y = target\nX = combi[: len(short_train)]\nX_test = combi[len(short_train):]\nX.shape, X_test.shape, y.shape","e4e55dc2":"from sklearn.feature_selection import SelectKBest, chi2\n\nselector = SelectKBest(chi2, k=60)\n\nX = selector.fit_transform(X, y)\nX_test = selector.transform(X_test)\ny.shape, X.shape, X_test.shape","44c8b31a":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=1, shuffle=True)\nX_train.shape, X_val.shape, y_train.shape,y_val.shape, X_test.shape","f0924c86":"import numpy as np\nimport torch\n\nX_train = X_train.astype(np.float32)\nX_val = X_val.astype(np.float32)\nX_test = X_test.astype(np.float32)\n\nX_train=torch.from_numpy(X_train)\nX_val=torch.from_numpy(X_val)\nX_test = torch.from_numpy(X_test)\n\n\ny_train = y_train.to_numpy()\ny_val = y_val.to_numpy()\n\ny_train = y_train.astype(np.float32)\ny_val = y_val.astype(np.float32)\n\ny_train=torch.from_numpy(y_train)\ny_val=torch.from_numpy(y_val)","30918fee":"y_train=y_train.view(y_train.shape[0],1)\ny_val=y_val.view(y_val.shape[0],1)","09ad0891":"class Logistic_Reg_model(torch.nn.Module):\n def __init__(self,no_input_features):\n   super(Logistic_Reg_model,self).__init__()\n   self.layer1=torch.nn.Linear(no_input_features,30)\n   self.layer2=torch.nn.Linear(30,1)\n def forward(self,x):\n   y_predicted=self.layer1(x)\n   y_predicted=torch.sigmoid(self.layer2(y_predicted))\n   return y_predicted","3f381358":"model=Logistic_Reg_model(X_train.shape[1])","22ead391":"criterion=torch.nn.BCELoss()\noptimizer=torch.optim.SGD(model.parameters(),lr=0.01)","05d742d1":"number_of_epochs=10000\nfor epoch in range(number_of_epochs):\n y_prediction=model(X_train)\n loss=criterion(y_prediction,y_train)\n loss.backward()\n optimizer.step()\n optimizer.zero_grad()\n if (epoch+1)%100 == 0:\n   print('epoch:', epoch+1,',loss=',loss.item())","c8bb5b61":"with torch.no_grad():\n y_pred=model(X_val)\n y_pred_class=y_pred.round()\n accuracy=(y_pred_class.eq(y_val).sum())\/float(y_val.shape[0])\n print(accuracy.item())","788dbfe9":"from sklearn.metrics import confusion_matrix\n\nprint(confusion_matrix(y_val, y_pred.round()))","d51aaf60":"with torch.no_grad():\n prediction=model(X_test)\n prediction_class=prediction.round()","39022e08":"prediction = prediction.round()\n#prediction[prediction < 0] = 0\nprediction.shape","1e746f47":"submission.target = prediction.detach().numpy().astype(int)\nsubmission","05b31757":"submission.to_csv('submission.csv', index=False)\nsubmission = pd.read_csv(\"submission.csv\")\nsubmission","e2ce9123":"Combine","54d8368c":"Select Model","92d18445":"Read","be1a3330":"Optimiser","fecef0c7":"Import","de2018bb":"Analyse combi","8c7fdfd5":"Load","fc67c51e":"Shorten train","cabc2cf7":"Standardise","c65f6bc2":"Analyse","7dda5ebc":"The dataset is used for this competition is synthetic, but based on a real dataset and generated using a CTGAN. The original dataset deals with predicting the biological response of molecules given various chemical properties. Although the features are anonymized, they have properties relating to real-world features.","4f08f0c1":"Convert numpy arrays to tensor arrays","e47fadcc":"Split","399e66f0":"Predict on test set","455f42f2":"Predict on data","43efe08e":"Normalise","5cb1f757":"Check for null values","4731a431":"Train data","6a02dca0":"Define X and y"}}