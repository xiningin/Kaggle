{"cell_type":{"b1af69d3":"code","0064b8e5":"code","4991bfb7":"code","9ac9ab62":"code","25eb01fb":"code","fe614f60":"code","f3163d94":"code","88747e74":"code","1bdb5336":"code","477c8c42":"code","78c7a9cc":"code","7e8a09a4":"code","cef93dcc":"code","7b406c44":"code","7ecf826b":"code","8d367118":"code","e17f32a8":"code","515433dd":"code","628b5c7b":"code","9d0bccde":"code","43d51415":"code","146b944c":"code","898929d1":"code","2ea42340":"code","6d9c039c":"code","f0563c0c":"code","a1fb2189":"code","ce7f6dd7":"code","c8839468":"code","0535ef40":"code","7476d0de":"code","0d889a71":"code","27b93e47":"code","c1887a11":"code","ac1a3fb1":"code","e623a39b":"code","14e1befa":"code","6526bdba":"code","4153afdb":"code","4d156eef":"code","88f27929":"code","737c55a3":"code","7201c59c":"code","384a7c48":"code","be1309dc":"code","ef03dd7a":"code","1f91f800":"code","7ddd3fa4":"markdown","f799adbb":"markdown","eeff9ca3":"markdown","9cf261b2":"markdown","16eb7a3f":"markdown","a000d7e6":"markdown","1715b79e":"markdown"},"source":{"b1af69d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('ggplot')\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, plot_confusion_matrix, classification_report, roc_auc_score, plot_roc_curve \nfrom imblearn.over_sampling import SMOTE \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0064b8e5":"df = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","4991bfb7":"df","9ac9ab62":"df.info()","25eb01fb":"df.fillna(df.bmi.mean(), inplace=True)","fe614f60":"print('How many people have suffer a stroke in the dataset?')\nstr((df.stroke.value_counts()[1]).round(2)) + ' or the ' + \\\nstr((df.stroke.value_counts()[1]\/df.stroke.value_counts()[0]).round(2)) + '%'","f3163d94":"pd.crosstab(df.gender, df.stroke, margins=True)","88747e74":"pd.crosstab(df.gender, df.stroke, normalize=True, margins=True).round(2)","1bdb5336":"pd.crosstab(df.smoking_status, df.stroke, margins=True)","477c8c42":"pd.crosstab(df.smoking_status, df.stroke, normalize=True, margins=True).round(2)","78c7a9cc":"pd.crosstab(df.hypertension, df.stroke, margins=True)","7e8a09a4":"pd.crosstab(df.hypertension, df.stroke, normalize=True, margins=True).round(2)","cef93dcc":"pd.crosstab(df.ever_married, df.stroke, margins=True)","7b406c44":"pd.crosstab(df.ever_married, df.stroke, normalize=True, margins=True).round(2)","7ecf826b":"fig = plt.subplots(figsize=(15,15))\nplt.scatter(df.age, df.bmi, c=df.stroke, alpha=0.4)\nplt.title('Stroke cluster compared to Age and BMI')\nplt.xlabel('In yellow who had a stroke');","8d367118":"no_stroke = df[df['stroke']==0]\nyes_stroke = df[df['stroke']==1]\n\nno_stroke.age.plot(kind='hist', color='green', alpha=0.2, edgecolor='b')\nyes_stroke.age.plot(kind='hist', color='red', alpha=0.2, edgecolor='b', figsize=(15,8), title='Frequencies of Stroke vs No Stroke by Age');","e17f32a8":"no_stroke = df[df['stroke']==0]\nyes_stroke = df[df['stroke']==1]\n\nno_stroke.avg_glucose_level.plot(kind='hist', color='green', alpha=0.2, edgecolor='b')\nyes_stroke.avg_glucose_level.plot(kind='hist', color='red', alpha=0.2, edgecolor='b', figsize=(15,8), title='Frequencies of Stroke vs No Stroke by Avg glucose level');","515433dd":"no_stroke = df[df['stroke']==0]\nyes_stroke = df[df['stroke']==1]\n\nno_stroke.bmi.plot(kind='hist', bins=8, color='green', alpha=0.2, edgecolor='b')\nyes_stroke.bmi.plot(kind='hist', bins=8, color='red', alpha=0.2, edgecolor='b', figsize=(15,8), title='Frequencies of Stroke vs No Stroke by BMI');","628b5c7b":"gender_enc = LabelEncoder()\ndf['gender_enc'] = gender_enc.fit(df['gender'])\n\never_married_enc = LabelEncoder()\ndf['ever_married_enc'] = ever_married_enc.fit(df['ever_married'])\n\nwork_type_enc = LabelEncoder()\ndf['work_type_enc'] = work_type_enc.fit(df['work_type'])\n\nResidence_type_enc = LabelEncoder()\ndf['Residence_type_enc'] = Residence_type_enc.fit(df['Residence_type'])\n\nsmoking_status_enc = LabelEncoder()\ndf['smoking_status_enc'] = smoking_status_enc.fit(df['smoking_status'])\n\ndef transform(dataset):\n    dataset['gender_enc'] = gender_enc.transform(dataset['gender'])\n    dataset['ever_married_enc'] = ever_married_enc.transform(dataset['ever_married'])\n    dataset['work_type_enc'] = work_type_enc.transform(dataset['work_type'])\n    dataset['Residence_type_enc'] = Residence_type_enc.transform(dataset['Residence_type'])\n    dataset['smoking_status_enc'] = smoking_status_enc.transform(dataset['smoking_status'])\n    return dataset.drop(['id','gender', 'ever_married', 'work_type', 'Residence_type', 'smoking_status'], axis=1)\n\ndf_enc = transform(df)\n\n\ndf_enc = df_enc.drop('stroke', axis=1)\ndf_enc['stroke'] = df['stroke']\ndf_enc","9d0bccde":"corr_matrix = df_enc.corr()\nfig, ax = plt.subplots(figsize=(15,6))\nax = sns.heatmap(corr_matrix,\n                annot=True,\n                linewidth=0.5,\n                fmt=\"2.2f\",\n                cmap='YlGnBu');","43d51415":"X = df_enc.drop('stroke', axis=1)\ny = df_enc['stroke']","146b944c":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, stratify=y, test_size=.2)","898929d1":"model = RandomForestClassifier()\nmodel.fit(X_train, y_train)\nprint(cross_val_score(model, X_train, y_train, cv=3))","2ea42340":"print('Score on the Test set: ', model.score(X_test, y_test))","6d9c039c":"model.predict([[38, 0, 0, df.avg_glucose_level.mean(), 24, 1, 0, 2, 1, 1]])","f0563c0c":"model.feature_importances_","a1fb2189":"feat = pd.Series(model.feature_importances_, df_enc.columns.drop('stroke'))\nfeat.sort_values().plot(kind='barh', title='Feature Importance');","ce7f6dd7":"y_pred = model.predict(X_test)\ny_pred_prob = model.predict_proba(X_test)\ny_pred_prob = [x[1] for x in y_pred_prob]\nprint(\"Y predicted: \", y_pred)\nprint(\"Y probability predicted: \", y_pred_prob[:5])","c8839468":"print(\"Confusion Matrix:\")\nplot_confusion_matrix(model, X_test, y_test);","0535ef40":"def evaluation_metric(model, X_test, y_test, y_pred, y_pred_prob):\n    print(\"Accuracy Score: \", accuracy_score(y_test, y_pred))\n    print(\"AUC Score: \", roc_auc_score(y_test, y_pred_prob))\n    print(\"\\n Classification Report: \\n\\n\", classification_report(y_test, y_pred))\n    print(\"\\n ROC curve: \\n\")\n    plot_roc_curve(model, X_test, y_test);\n\nevaluation_metric(model, X_test, y_test, y_pred, y_pred_prob)","7476d0de":"sm = SMOTE(sampling_strategy='auto', k_neighbors=8)\nX_res, y_res = sm.fit_resample(X_train, y_train)","0d889a71":"X_res_train, X_res_test, y_res_train, y_res_test = train_test_split(X_res, y_res, random_state=42, test_size=.2)","27b93e47":"model_res = RandomForestClassifier()\nmodel_res.fit(X_res_train, y_res_train)\nprint('Train cv score resampled: ', cross_val_score(model_res, X_res_train, y_res_train, cv=3))\nprint('Test set score resampled: ', model_res.score(X_test, y_test))","c1887a11":"y_pred = model_res.predict(X_test)\ny_pred_prob = model_res.predict_proba(X_test)\ny_pred_prob = [x[1] for x in y_pred_prob]\nprint(\"Y predicted: \", y_pred)\nprint(\"Y probability predicted: \", y_pred_prob[:5])","ac1a3fb1":"print(\"Confusion Matrix:\")\nplot_confusion_matrix(model_res, X_test, y_test);","e623a39b":"def evaluation_metric(model_res, X_test, y_test, y_pred, y_pred_prob):\n    print(\"Accuracy Score: \", accuracy_score(y_test, y_pred))\n    print(\"AUC Score: \", roc_auc_score(y_test, y_pred_prob))\n    print(\"\\n Classification Report: \\n\\n\", classification_report(y_test, y_pred))\n    print(\"\\n ROC curve: \\n\")\n    plot_roc_curve(model_res, X_test, y_test);\n\nevaluation_metric(model_res, X_test, y_test, y_pred, y_pred_prob)","14e1befa":"model_res.feature_importances_","6526bdba":"feat = pd.Series(model_res.feature_importances_, df_enc.columns.drop('stroke'))\nfeat.sort_values().plot(kind='barh', title='Feature Importance');","4153afdb":"import shap","4d156eef":"explainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(X_test)","88f27929":"shap.summary_plot(shap_values, X_test, plot_type='bar')","737c55a3":"shap.summary_plot(shap_values[0], X_test, plot_type=\"layered_violin\", color='coolwarm')","7201c59c":"shap.summary_plot(shap_values[0], X_test, plot_type=\"dot\", color='coolwarm')","384a7c48":"explainer_res = shap.TreeExplainer(model_res)\nshap_values_res = explainer_res.shap_values(X_test)","be1309dc":"shap.summary_plot(shap_values_res, X_test, plot_type='bar')","ef03dd7a":"shap.summary_plot(shap_values_res[0], X_test, plot_type=\"layered_violin\", color='coolwarm')","1f91f800":"shap.summary_plot(shap_values_res[0], X_test, plot_type=\"dot\", color='coolwarm')","7ddd3fa4":"<div class=\"alert alert-info\" \n     style=\"background-color:#008a79; color:white;  padding:0px 10px; border-radius:10px;\">     <h2 style='margin:15px 5px'>EDA<\/h2>\n<\/div>","f799adbb":"##### Indeed the resampled model improved.","eeff9ca3":"<div class=\"alert alert-info\" \n     style=\"background-color:#008a79; color:white;  padding:0px 10px; border-radius:10px;\">     <h2 style='margin:15px 5px'>Data transformation<\/h2>\n<\/div>","9cf261b2":"<div class=\"alert alert-info\" \n     style=\"background-color:#008a79; color:white;  padding:0px 10px; border-radius:10px;\">     <h2 style='margin:15px 5px'>Model<\/h2>\n<\/div>","16eb7a3f":"<div class=\"alert alert-info\" \n     style=\"background-color:#008a79; color:white; padding:0px 10px; border-radius:10px;\">\n    <h1 style='margin:10px 5px'>Stroke: EDA | Predictions<\/h1>\n<\/div>","a000d7e6":"#### There is a strong class imbalace so I will try to deal with it with a SMOTE lately.","1715b79e":"##### I am going to use a SMOTE to try to improve the AUC."}}