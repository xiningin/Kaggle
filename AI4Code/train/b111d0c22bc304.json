{"cell_type":{"ad76ef2c":"code","7605bff2":"code","326e13c1":"code","63b8b36d":"code","fac30469":"code","e463c280":"code","b4d638c5":"code","cc215f5a":"code","0cedc0b6":"markdown","0cea5d2c":"markdown","6271c4eb":"markdown","54fce80e":"markdown","3332ba73":"markdown","753459a7":"markdown","a4c7cf43":"markdown","ef9283c9":"markdown","3e7d178f":"markdown","45d1421a":"markdown","01257a53":"markdown","b7188a1a":"markdown","4e05ffe4":"markdown","5ad775a3":"markdown","aabc2a19":"markdown"},"source":{"ad76ef2c":"# First, import OpenCV. The Python name for this is 'cv2'\nimport cv2","7605bff2":"# Run these if OpenCV doesn't load\nimport sys\n#sys.path.append('\/Library\/Frameworks\/Python.framework\/Versions\/3.6\/lib\/python3.6\/site-packages\/cv2\/')","326e13c1":"# Next, import libraries that will aid OpenCV\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","63b8b36d":"# Let's do some basic operations using OpenCV\n# Reading an image\nimg = cv2.imread('..\/input\/style-transfer-and-object-detection\/rabbit.jpg')# You can replace this file path by your own file path.\nprint (img.shape)","fac30469":"# Using cv2's imshow opens this image in a different window.\n# However, the easier and more presentable way to do this is by using matplotlib's inline function\nplt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB)) # converting BGR to RGB for using matplotlib\nplt.axis('off')\nplt.show()\n","e463c280":"# Now, let's say we want to demonstrate only the green channel out of these\n# The ordering of channels in OpenCV is B-G-R. 0 is Blue, 1 is Green, 2 is Red.\nplt.imshow(img[:,:,1])\nplt.axis('off')\nplt.show()\n","b4d638c5":"# This image is a colour image. We can easily convert this image to gray.\nimg_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nplt.imshow(img_gray, cmap='gray')\nplt.axis('off')\nplt.show()","cc215f5a":"# Next, we can access specific parts of the image using coordinates\nbearface = img[100:800, 150:900]\nplt.imshow(bearface)\nplt.axis('off')\nplt.show()\n","0cedc0b6":"This 'img' object becomes the basic object which is manipulated","0cea5d2c":"Once you have installed OpenCV, you can experiment with images","6271c4eb":"> ### C. Working with Images using OpenCV","54fce80e":"\n\n#### For Windows users\n\n\n\n- Go to [this website](https:\/\/www.lfd.uci.edu\/~gohlke\/pythonlibs\/#opencv). It contains the 'wheel files' for several packages, which are present with a .whl extension. Do a Ctrl-F and find the ones for OpenCV.\n\n- Download the .whl file appropriate to your *Python version* and *OS specifications* (most likely, you will be using a Python version greater than 3.4, so use that)\n\n- Navigate to the file where the .whl file is present\n\n- Make sure you have `pip` present on your machine. [This tutorial page](https:\/\/pythonprogramming.net\/using-pip-install-for-python-modules\/) can help you install `pip` if you don't have it.\n\n- Run the following code:\n\n`pip install wheel-name.whl`\n\n- If pip is not present in your PATH variables, you may have to point to where pip is installed:\n\n`C:\\Python34\\Scripts\\Pip install <wheel-name>.whl`\n\n\n\n#### For Mac users\n\n- Open Terminal\n\n- Run the following command\n\n`apt-get install python3-OpenCV`\n","3332ba73":"> ### A. Installing OpenCV","753459a7":"OpenCV is a hugely popular image processing library. It is used in a number of image processing applications. A lot of the backend processing of OpenCV is done in C++, which makes it very fast.\n\nBefore anything else, we need to install OpenCV.","a4c7cf43":"#### For conda installation\n\nIf you are running Python via Anaconda, you can run a simple conda install:\n\n`conda install opencv`","ef9283c9":"# Getting Started with OpenCV","3e7d178f":"In case you want more details, [here is a website](https:\/\/pythonprogramming.net\/loading-images-python-opencv-tutorial\/) that talks about these installations in detail. The link also tells you how to install numpy and matplotlib - most of you already have it, and you don't need to install it again.","45d1421a":"This notebook has two main objectives:\n1. Getting familiar with OpenCV - its installation and some of its basic usage.\n2. Looking at the data we will use - this will give you a lot of context for all the upcoming sessions.","01257a53":"OpenCV is one of those libraries that is known to have issues in importing.\n\nTo ensure that these issues don't happen to you, there's an easy trick. Before importing OpenCV, you can basically point your Jupyter notebook to the correct path where OpenCV is installed.\n\n#### Resolving import issues in OpenCV\n\nSometimes, it might be that you have two conflicting Python versions (one from a regular install, one from Anaconda). This may cause cv2 to not work. One of the ways to fix this is go to your command line (Terminal for Mac), open Python from there and run these commands:\n\n`import site\nsite.getsitepackages()`\n\nYou will get a list of site packages. Then, run the same commands on Jupyter. If your Terminal site packages has an extra site package location, add it to your site packages with the following commands.\n\n`import sys\nsys.path.append('<extra paths found in terminal but not in Jupyter, separated by commas>')`","b7188a1a":"Let's now move to working with channels and colours. \nAs you know, coloured images typically have 3 channels - Red, Green, Blue (RGB). For OpenCV specifically, this ordering of channels is B-G-R. Let's manipulate these images according to their channels.","4e05ffe4":"## 1. Familiarisation with OpenCV","5ad775a3":"> ### B. Importing OpenCV","aabc2a19":"The cv2.imshow() function is the standard way to show images using cv2.\n\nHowever, this opens up a new window, which sometimes doesn't work with Jupyter notebooks. \n\nHence, the **suggested way with to show images with Jupyter notebooks** is using matplotlib's inline functions. These are demonstrated below."}}