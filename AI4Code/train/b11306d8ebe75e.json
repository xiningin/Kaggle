{"cell_type":{"1a309c36":"code","11cbdf6f":"code","82a2408f":"code","fca0673f":"code","15f1c77f":"code","cb8380da":"code","927b40cd":"code","f78c28ad":"code","f75b70f4":"code","e0cb52dd":"code","9463e527":"code","0db0716c":"code","645931ac":"code","65bae553":"code","03d2972e":"code","cb2c5302":"code","13ecf338":"code","9497c6a0":"code","58340283":"code","2f9fbcfc":"code","eda4578f":"code","3171009b":"code","4c63c3f6":"code","b5db1ca6":"code","65597ece":"code","d32b4ee7":"code","69fd6b0d":"code","f5a32c28":"code","5ccff5ac":"code","9a54acea":"code","81a54cd6":"code","79eb68d2":"code","d5e0f3a4":"markdown","6f497cf2":"markdown","3a86f36a":"markdown","c01b5e4a":"markdown"},"source":{"1a309c36":"import shapely.geometry as shg\nimport fiona\nfrom shapely.geometry import shape\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\n\nrcParams['figure.figsize'] = 8, 8 #makes the plots bigger","11cbdf6f":"def areasign(tri):\n    \"\"\"Finds the sign of the area of a closed triangle\n\n    Parameters\n    ----------\n    tri : List\n        List of coordinate tuples in the format\n        [(x, y), (x, y). (x, y), (x, y)]\n        First and last vertex are the same\n    \n    Returns\n    -------\n    int (-1, 1, 0)\n        -1 if the triangle is encoded clockwise\n        1  if the triangle is encoded anti-clockwise\n        0  if the coordinates are a 1d line\n    \"\"\"\n    sumarea = 0\n    for i in range(0, len(tri)-1):\n        xi = tri[i][0]\n        yi = tri[i][1]\n        xj = tri[i+1][0]\n        yj = tri[i+1][1]\n        sumarea = sumarea + ((xi*yj)-(yi*xj))\n        \n    if sumarea == 0: return 0\n    if sumarea < 0:  return -1\n    if sumarea > 0:  return 1\n    \ndef create_triangle(test_pt, line_seg):\n    \"\"\" Creates a closed triangle from a test point and a line segment\n    \n    Parameters\n    ----------\n    test_pt : the test point in the format (x, y)\n    line_seg: the line segment in the format [(x, y), (x, y)]\n    \n    Returns\n    -------\n    A triangle consisting of 4 coordinate tuples\n    \"\"\"\n    tri = line_seg.copy()\n    \n    tri.insert(0, test_pt)\n    tri.append(test_pt)\n    \n    return tri\n\ndef line_intersection(line1, line2):\n    \"\"\" Tests whether 2 line segments intersect\n    \n    Parameters\n    ----------\n    line1 : the first line segment in the format [(x, y), (x, y)]\n    line2 : the second line segment in the format [(x, y), (x, y)] \n    \n    Returns\n    -------\n    True if the segmenets intersect,otherwise False\n    \"\"\"\n    \n    #create 4 triangles from the start and end points of each line and the other line\n    tri1 = create_triangle(line2[0], line1)\n    tri2 = create_triangle(line2[1], line1)\n    tri3 = create_triangle(line1[0], line2)\n    tri4 = create_triangle(line1[1], line2)\n    \n    #Calculate the signs of the  areas of these triangles\n    tri1sign = areasign(tri1)\n    tri2sign = areasign(tri2)\n    tri3sign = areasign(tri3)\n    tri4sign = areasign(tri4)\n    \n    #if the signs are not equal then the lines intersect\n    if ((tri1sign != tri2sign) and (tri3sign != tri4sign)):\n        return True\n    else:\n        return False","82a2408f":"#A simple polygon and test point \n\np = [(1.0, 1.0), (1.0, 4.0), (6.0, 4.0), (6.0, 1.0), (1.0, 1.0)] #Polygon\n\ntest_pt = (3, 2) #Test point\n\nhalf_line = [test_pt, (1000000, 1000001)] \n#The halfline is a line segment from our test point to infinity (or a really large number).\n\nxy = list(zip(*p))\nplt.plot(xy[0], xy[1])\nplt.plot(test_pt[0], test_pt[1], 'go')\nplt.plot([3, 25], [2, 25], 'r-')\nplt.text (15, 14, s=\"half line\", rotation = 45, fontsize = 12)\n#This section of the code displays how the halfline intersects with our polygon.","fca0673f":"def point_in_polygon(pt, poly): \n    \"\"\" Tests whether a point lies within a polygon\n    \n    Parameters\n    ----------\n    poly : List\n        List of coordinate tuples in the format\n        [(x, y), (x, y). (x, y), (x, y)]\n        First and last vertex are the same\n    pt : the test point in the format (x, y)\n    \n    Returns\n    -------\n    True if the point lies in the polygon,otherwise False\n    \"\"\"    \n    half_line = [pt, (1000000, 1000001)] \n    #The coordinates of the halfline have to be adjusted so it doesn't intersect the polygon at a vertex, this would result in a degenerative case.\n    \n    counter = 0    #Counter must be defined so that when we run the code, python knows what to start counting from\n    for i in range(0, len(poly)-1):\n        line_intersection(half_line, [poly[i], poly[i+1]])\n        if line_intersection(half_line, [poly[i], poly[i+1]]):\n            counter += 1\n    #print(counter)\n    if counter %2 == 0: #modulus is the remainder, for example 2%2 = 0\n        return False\n    else:\n        return True\n","15f1c77f":"from shapely import wkt\nlist_of_polygons =[]\n\nf=open('..\/input\/vector\/test_polygons1.txt')\n\nfor each_line in f: \n    poly = wkt.loads(each_line)           #read WKT format into a Polygon\n    print(list(poly.exterior.coords))     #use coords to generate lists in our format\n    list_of_polygons.append(list(poly.exterior.coords)) ","cb8380da":"display(list_of_polygons)","927b40cd":"list_of_points = []   #to store the polygons we read in our format\n\nf = open ('..\/input\/vector\/test_points1.txt') \n\n#iterate over the file\nfor each_line in f: \n    pt = wkt.loads(each_line)           \n    print(list(pt.coords))     \n    list_of_points.append(pt.coords[0])  #we get a list of coordinates","f78c28ad":"display(list_of_points)","f75b70f4":"for poly in list_of_polygons:\n    xy = list(zip(*poly))\n    plt.fill(xy[0], xy[1], alpha=0.5)\n    \nfor pt in list_of_points:\n    #print(pt)\n    plt.plot(pt[0], pt[1], 'bx', ms=12) \n#this allows us to visulaise the point and polygons so we can see which points lie inside the polygons","e0cb52dd":"for pt in list_of_points:\n    for poly in list_of_polygons:\n        result = point_in_polygon(pt, poly)\n        print(result)\n        if (point_in_polygon(pt, poly)):\n            print('inside polygon')","9463e527":"for pt in list_of_points:\n    for poly in list_of_polygons:\n        res = point_in_polygon(pt, poly)\n        #print(res)\n        shppoly = shg.Polygon(poly)\n        shppt = shg.Point(pt)\n        print(res, shppoly.contains(shppt))\n\n#this code shows the results of the shapely test next to the outputs from our WKT files (test points 1 and test polygons 1), showing if our output was correct.","0db0716c":"from shapely import wkt\nlist_of_polygons =[]\n\nf=open('..\/input\/vector\/test_polygons2.txt')\n\nfor each_line in f: \n    poly = wkt.loads(each_line)           \n    print(list(poly.exterior.coords))     #use coords to generate lists in our format\n    list_of_polygons.append(list(poly.exterior.coords)) ","645931ac":"list_of_points = []   #to store the polygons we read in our format\n\nf = open ('..\/input\/vector\/test_points1.txt') \n\n#iterate over the file\nfor each_line in f: \n    pt = wkt.loads(each_line)           \n    print(list(pt.coords))     \n    list_of_points.append(pt.coords[0])  #So we get a list of coordinates","65bae553":"for poly in list_of_polygons:\n    xy = list(zip(*poly))\n    plt.fill(xy[0], xy[1], alpha=0.5)\n    \nfor pt in list_of_points:\n    #print(pt)\n    plt.plot(pt[0], pt[1], 'bx', ms=12) ","03d2972e":"for pt in list_of_points:\n    for poly in list_of_polygons:\n        result = point_in_polygon(pt, poly)\n        print(result)\n        if (point_in_polygon(pt, poly)):\n            print('inside polygon')","cb2c5302":"for pt in list_of_points:\n    for poly in list_of_polygons:\n        res = point_in_polygon(pt, poly)\n        #print(res)\n        shppoly = shg.Polygon(poly)\n        shppt = shg.Point(pt)\n        print(res, shppoly.contains(shppt))\n\n#these results show the results of the shapely test next to the outputs from our WKT files (test points 1 and test polygons 2).","13ecf338":"shapefile_polygons = []\n\nc = fiona.open('..\/input\/shapefile1\/test_polygon_shapefile.shp') \n\nfor each_poly in c:\n    geom = shape(each_poly['geometry'])\n    poly_data = each_poly[\"geometry\"][\"coordinates\"][0]  \n    poly = shg.Polygon(poly_data)\n    print(poly)\n    #Converts into the same format as the other data\n    shapefile_polygons.append(list(poly.exterior.coords))\n\ndisplay(shapefile_polygons)","9497c6a0":"shapefile_points = []\n\nc = fiona.open('..\/input\/shapefile1\/test_point_shapefile.shp')\n\nfor each_pt in c:\n    geom = shape(each_pt['geometry'])\n    pt_data = each_pt[\"geometry\"][\"coordinates\"]\n    pt = shg.Point(pt_data)\n    print(pt)\n    shapefile_points.append(pt.coords[0])\n\ndisplay(shapefile_points)","58340283":"for poly in shapefile_polygons:\n    xy = list(zip(*poly))\n    plt.fill(xy[0], xy[1], alpha=0.5)\n    \nfor pt in shapefile_points:\n    plt.plot(pt[0], pt[1], 'bx', ms=12)","2f9fbcfc":"for pt in shapefile_points:\n    for poly in shapefile_polygons:\n        result = point_in_polygon(pt, poly)\n        print(result)\n        if (point_in_polygon(pt, poly)):\n            print('inside polygon')","eda4578f":"for pt in shapefile_points:    \n    for poly in shapefile_polygons:\n        res = point_in_polygon(pt, poly)\n        #print(res)\n        shppoly = shg.Polygon(poly)\n        shppt = shg.Point(pt)\n        print(res, shppoly.contains(shppt))","3171009b":"def deg_cases(pt, poly): \n    \n    half_line = [pt, (1000000, 1000000)] \n\n    counter = 0\n    for i in range(0, len(poly)-1):\n        line_intersection(half_line, [poly[i], poly[i+1]])\n        if line_intersection(half_line, [poly[i], poly[i+1]]):\n            counter += 1\n    #print(counter)\n    if counter %2 == 0:\n        return False\n    else:\n        return True\n\npoly = [(2, 2), (2, 6), (6, 6), (6, 2), (2, 2)]","4c63c3f6":"#Testing the degenerative case: halfline intersects polygon at a vertex\npt = (4, 4)\n\nxy = list(zip(*poly))\nplt.plot(xy[0], xy[1])\nplt.plot(pt[0], pt[1], 'go')\nplt.plot([4, 15], [4, 15], 'r-')","b5db1ca6":"result = deg_cases(pt, poly)\nprint(result)","65597ece":"def deg_cases(pt, poly): \n    \n    half_line = [pt, (6, 1000000)] \n\n    counter = 0\n    for i in range(0, len(poly)-1):\n        line_intersection(half_line, [poly[i], poly[i+1]])\n        if line_intersection(half_line, [poly[i], poly[i+1]]):\n            counter += 1\n    #print(counter)\n    if counter %2 == 0:\n        return False\n    else:\n        return True\n\npoly = [(2, 2), (2, 6), (6, 6), (6, 2), (2, 2)]","d32b4ee7":"#Testing the degenerative case: halfline is tangent to the polygon\npt = (1, 4)\n\nxy = list(zip(*poly))\nplt.plot(xy[0], xy[1])\nplt.plot(pt[0], pt[1], 'go')\nplt.plot([1, 6], [4, 14], 'r-')","69fd6b0d":"result = deg_cases(pt, poly)\nprint(result)","f5a32c28":"#Testing the degenerative case: point is on the boundary of the polygon\npt = (6, 4)\n\nxy = list(zip(*poly))\nplt.plot(xy[0], xy[1])\nplt.plot(pt[0], pt[1], 'go')\nplt.plot([6, 15], [4, 15], 'r-')","5ccff5ac":"result = deg_cases(pt, poly)\nprint(result)","9a54acea":"def deg_cases(pt, poly): \n    \n    half_line = [pt, (6, 1000000)]\n    \n    counter = 0\n    for i in range(0, len(poly)-1):\n        line_intersection(half_line, [poly[i], poly[i+1]])\n        if line_intersection(half_line, [poly[i], poly[i+1]]):\n            counter += 1\n    #print(counter)\n    if counter %2 == 0:\n        return False\n    else:\n        return True\n\npoly = [(2, 2), (2, 6), (6, 6), (6, 2), (2, 2)]","81a54cd6":"#Testing the degenerative case: halfline is collinear\npt = (6, 1)\n\nxy = list(zip(*poly))\nplt.plot(xy[0], xy[1])\nplt.plot(pt[0], pt[1], 'go')\nplt.plot([6, 6], [1, 10], 'r-')","79eb68d2":"result = deg_cases(pt, poly)\nprint(result)","d5e0f3a4":"Testing using our WKT files","6f497cf2":"Creating the Point in Polygon function","3a86f36a":"Degenerative Cases","c01b5e4a":"Testing using our shapely files"}}