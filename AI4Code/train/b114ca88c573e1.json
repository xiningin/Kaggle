{"cell_type":{"862e42f9":"code","9c80a7ba":"code","8fa0d715":"code","9e1fc2c7":"code","25e2ad6e":"code","b43ed3a6":"code","2bc46eab":"code","850c1fdc":"code","73c57384":"code","4081a7a3":"code","2f3625ae":"code","6e19eb90":"code","215b6f0c":"code","d903e199":"code","cd1c5b0f":"code","20ce483f":"code","31da4efc":"code","18f7831c":"code","ef7bb7ba":"code","706aef69":"code","866fa80b":"code","7b834e3e":"code","7b5bf410":"code","c07e11da":"code","a27a6c44":"code","0e098819":"code","78a1048d":"code","9919f959":"code","3ee6fbb0":"code","81369400":"code","c7361f05":"code","74a08a8a":"code","f6f5910f":"code","0f75060b":"markdown","ef2cc679":"markdown","23f38334":"markdown","8f186b66":"markdown","ad17ff9c":"markdown","4cca1478":"markdown","10722d1c":"markdown","750c01d1":"markdown","6f7118bb":"markdown","d2dfe4e4":"markdown"},"source":{"862e42f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix, plot_confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9c80a7ba":"training_data_csv = pd.read_csv(\"..\/input\/star-categorization-giants-and-dwarfs\/Star3642_balanced.csv\")\n","8fa0d715":"training_data_csv.isnull().sum()","9e1fc2c7":"training_data_csv.describe()","25e2ad6e":"training_data_csv.describe(exclude=[np.number])","b43ed3a6":"training_data_csv.dtypes","2bc46eab":"for i in range(len(training_data_csv['SpType'])):\n    training_data_csv.loc[i, 'SpType'] = training_data_csv['SpType'][i][0]\nprint(training_data_csv['SpType'])","850c1fdc":"print(training_data_csv.describe(exclude=[np.number]))\nprint(\"Categorias:\", training_data_csv['SpType'].unique())","73c57384":"training_data_csv = training_data_csv.loc[training_data_csv['SpType'] != 'C']\nprint(\"Categorias:\", training_data_csv['SpType'].unique())","4081a7a3":"training_data = training_data_csv.iloc[:, :-1]\ntraining_target = training_data_csv.iloc[:, -1]\n\nprint(training_data)\nprint('\\n')\nprint(training_target)","2f3625ae":"print(training_data[\"Vmag\"].plot.kde())\n","6e19eb90":"print(training_data[\"Plx\"].plot.kde())\n","215b6f0c":"print(training_data[\"e_Plx\"].plot.kde())\n","d903e199":"print(training_data[\"B-V\"].plot.kde())\n","cd1c5b0f":"print(training_data[\"Amag\"].plot.kde())","20ce483f":"corr = training_data.corr()\nfig = plt.figure(figsize=(10, 10))\nsns.heatmap(corr, annot=True, vmin=-1, vmax=1, cmap=sns.color_palette(\"light:#5A9\", as_cmap=True))\nplt.title(\"Data Correlation Heatmap\", fontsize=14)\nplt.show()","31da4efc":"fig, axes = plt.subplots(3, 3, figsize=(28,16))\n\nsns.scatterplot(data = training_data_csv, x = 'Plx', y= 'B-V', ax = axes[0][0], hue = 'TargetClass')\naxes[0,0].set_xlabel('Distance Between the Star and the Earth')\n\nsns.scatterplot(data = training_data_csv, x = 'e_Plx',  y= 'B-V', ax = axes[0][1], hue = 'TargetClass')\naxes[0,1].set_xlabel('Standard error of Plx')\n\n\nsns.scatterplot(data = training_data_csv, x = 'Vmag', y = 'Amag', ax = axes[0][2], hue='TargetClass')\naxes[0,2].set_xlabel('Apparent Magnitude')\n\nsns.scatterplot(data = training_data_csv, x = 'Vmag', y = 'B-V', ax = axes[1][0], hue='TargetClass')\naxes[1,0].set_xlabel('Apparent Magnitude')\n\nsns.scatterplot(data = training_data_csv, x = 'Vmag', y = 'Plx', ax = axes[1][1], hue='TargetClass')\naxes[1,1].set_xlabel('Apparent Magnitude')\n\nsns.scatterplot(data = training_data_csv, x = 'Vmag', y = 'e_Plx', ax = axes[1][2], hue='TargetClass')\naxes[1,2].set_xlabel('Apparent Magnitude')\n\nsns.scatterplot(data = training_data_csv, x = 'Amag', y = 'Plx', ax = axes[2][0], hue = 'TargetClass')\naxes[2,0].set_xlabel('Absolute Magnitude')\n\nsns.scatterplot(data = training_data_csv, x = 'Amag', y = 'e_Plx', ax = axes[2][1], hue = 'TargetClass')\naxes[2,1].set_xlabel('Absolute Magnitude')\n\nsns.scatterplot(data = training_data_csv, x = 'Amag', y = 'B-V', ax = axes[2][2], hue = 'TargetClass')\naxes[2,2].set_xlabel('Absolute Magnitude')","18f7831c":"cp_map = {\n    \"O\": 0,\n    \"B\": 1,\n    \"A\": 2,\n    \"F\": 3,\n    \"G\": 4,\n    \"K\": 5,\n    \"M\": 6,\n}\ntraining_data['SpType'] = training_data['SpType'].map(cp_map, na_action=None)\nprint(training_data['SpType'])","ef7bb7ba":"cp_map = {\n    0: \"O\",\n    1: \"B\",\n    2: \"A\",\n    3: \"F\",\n    4: \"G\",\n    5: \"K\",\n    6: \"M\",\n}\nfig = plt.figure(figsize=(10,8))\nsns.countplot(training_data['SpType'].map(cp_map))\nplt.xlabel(\"SpType\", fontsize=12)\nplt.ylabel(\"Count\", fontsize=12)\nplt.title(\"SpTypes Distribution\", fontsize=15)\nplt.show()","706aef69":"test_data_csv = pd.read_csv(\"..\/input\/star-categorization-giants-and-dwarfs\/Star39552_balanced.csv\")\n","866fa80b":"test_data_csv.isnull().sum().sum","7b834e3e":"test_data_csv.isnull().values.any()","7b5bf410":"for i in range(len(test_data_csv['SpType'])):\n    test_data_csv.loc[i, 'SpType'] = test_data_csv['SpType'][i][0]\nprint(test_data_csv['SpType'])","c07e11da":"test_data_csv = test_data_csv.loc[test_data_csv['SpType'] != 'C']\ntest_data_csv = test_data_csv.loc[test_data_csv['SpType'] != 'W']\ntest_data_csv = test_data_csv.loc[test_data_csv['SpType'] != 'N']\nprint(\"Categorias:\", test_data_csv['SpType'].unique())","a27a6c44":"test_data = test_data_csv.iloc[:, :-1]\ntest_target = test_data_csv.iloc[:, -1]\n\nprint(test_data)\nprint('\\n')\nprint(test_target)","0e098819":"cp_map = {\n    \"O\": 0,\n    \"B\": 1,\n    \"A\": 2,\n    \"F\": 3,\n    \"G\": 4,\n    \"K\": 5,\n    \"M\": 6,\n}\ntest_data['SpType'] = test_data['SpType'].map(cp_map, na_action=None)\nprint(test_data['SpType'])","78a1048d":"# training_data.drop(['SpType'], inplace=True, axis=1)\n# test_data.drop(['SpType'], inplace=True, axis=1)","9919f959":"gnb = GaussianNB()\n\nmodel = gnb.fit(training_data, training_target)\n\npreds = gnb.predict(test_data)\nprint(preds)\n\nprint(accuracy_score(test_target, preds))","3ee6fbb0":"matrix = confusion_matrix(test_target, preds, labels=[0,1])\nplot_confusion_matrix(gnb, test_data, test_target,labels=[0,1],cmap='Blues')","81369400":"print(classification_report(test_target, preds))","c7361f05":"logreg = LogisticRegression()\nlogreg.fit(training_data, training_target)\nlog_pred = logreg.predict(test_data)","74a08a8a":"matrix = confusion_matrix(test_target, log_pred)\nplot_confusion_matrix(logreg, test_data, test_target,labels=[0,1],cmap='Blues')","f6f5910f":"print(classification_report(test_target, log_pred))","0f75060b":"## Importando base de testes","ef2cc679":"## Regress\u00e3o Log\u00edstica","23f38334":"## Visualiza\u00e7\u00e3o\n\nGerando uma visualiza\u00e7\u00e3o gr\u00e1fica da distribui\u00e7\u00e3o de cada coluna.\n","8f186b66":"## Descri\u00e7\u00e3o das colunas","ad17ff9c":"## Valores Nulos","4cca1478":"## Tipos espectrais (SpType)\n\nA letra inicial que descreve o tipo espectral representa um intervalo de temperatura. Usando somente essa letra podemos agrupar os 584 valores \u00fanicos em 8 categorias:\n\n| Class | Effective Temperature  | Chromaticity  |\n| ------ |:--------------------------:|:---------------:|\n| O       | \u2265 30,000 K                      | blue                 |\n| B        | 10,000\u201330,000 K          | blue white      |\n| A       | 7,500\u201310,000 K              | white              |\n| F        | 6,000\u20137,500 K               |  yellow white |\n| G       | 5,200\u20136,000 K               |  yellow            |\n| K       | 3,700\u20135,200 K                | light orange   |\n| M      | 2,400\u20133,700 K               | orange red     |\n","10722d1c":"## Classifica\u00e7\u00e3o Bayesiana\n","750c01d1":"# Descri\u00e7\u00e3o\n\nClassifica\u00e7\u00e3o de estrela de acordo com as seguintes caracter\u00edsticas:\n\n* Visual Apparent Magnitude of the Star (Vmag)\n* Distance Between the Star and the Earth (Plx)\n* Standard Error of Plx (e_Plx)\n* B-V color index (B-V)\n    * A hot star has a B-V color index close to 0 or negative, while a cool star has a B-V color index close to 2.0. Other stars are somewhere in between.\n* Spectral type (SpType)\n* Absolute Magnitude of the Star (Amag)\n\n\n## Classes\n* Dwarf (0)\n* Giant (1)\n\n## Arquivos\n* Treinamento: Star3642_balanced.csv\n    * 3642 Estrelas\n    * 1821 Dwarves\n    * 1821 Giants\n* Classifica\u00e7\u00e3o: Star39552_balanced.csv\n    * 39552 Estrelas\n    * 19776 Dwarves\n    * 19776 Giants\n\n# Treinamento\n## Importando dados\n","6f7118bb":"### Matriz de correla\u00e7\u00e3o","d2dfe4e4":"Excluindo as 2 linhas com a categoria C que n\u00e3o est\u00e1 na tabela de tipos espectrais."}}