{"cell_type":{"b9f60921":"code","396522d8":"code","24751d4d":"code","710c6c97":"code","662972b0":"code","69ecafed":"code","6b90fcfb":"code","597aa838":"code","1df1790a":"code","60df93f7":"code","7fa8f811":"code","202dfbe9":"code","cd9ce7f5":"code","bd7f95f2":"code","2531df0b":"code","21b138a2":"code","5b561302":"code","2878c255":"code","4b03fa0b":"code","60081119":"code","297ee9cd":"code","822d3247":"code","ca3c22ac":"code","47e2ebe7":"code","34656872":"code","f5ed477a":"code","5b0f291a":"code","f892c2bf":"code","dad639af":"code","1f859c5e":"code","9e8e688b":"code","868fc49d":"code","a755b6ca":"code","9c0cda8e":"code","7c6d90b6":"code","d0e32583":"code","dc2928a7":"code","dadd90d7":"code","fc67a1f2":"code","c4c18a36":"code","f9b5a824":"code","8e8d8f91":"code","219f6930":"code","add4a137":"code","9ab65ac4":"code","dcf17e97":"code","52fde53f":"code","28e17316":"code","5367ef50":"code","119d7375":"code","b29f3160":"code","70445fff":"code","8812e4df":"code","9c2d0aac":"code","5f53bcfb":"code","3919365c":"code","a3591746":"code","6f1aead8":"code","aee0c813":"code","dc53b51e":"code","6148b5a0":"code","ece504c1":"code","af37af3e":"code","18e99c8d":"code","61ccbb81":"code","e02d81c4":"code","a87a5ac6":"code","5f091904":"code","843d1c25":"code","bfb6c8c7":"markdown","d829a792":"markdown","ee0b71f8":"markdown","38834f91":"markdown","896fbf61":"markdown","32344204":"markdown","1c1ad29b":"markdown","ed52e306":"markdown","ae421aac":"markdown","8163eed7":"markdown","94cb3229":"markdown","3e06c165":"markdown","e18d295f":"markdown","8d458697":"markdown","1f43802a":"markdown","dd79c74a":"markdown","ae94df42":"markdown","31eaf4bb":"markdown","100cf8e6":"markdown","fc43d4cd":"markdown","7d683dbe":"markdown","f0a590cb":"markdown","ab5a3ecf":"markdown","07b3d25c":"markdown","76b9db27":"markdown","6782e178":"markdown","6ef17627":"markdown","f110915d":"markdown","6f691f05":"markdown","feb36f51":"markdown","547b6ffa":"markdown","0763344a":"markdown","647cb6f5":"markdown","327a491f":"markdown","eea358c4":"markdown","3a645ab1":"markdown","5a95e848":"markdown","26e1d976":"markdown","02d130ea":"markdown"},"source":{"b9f60921":"## Basic Cleaning - Kaggle Survey\nimport numpy as np\nimport pandas as pd\nimport os\nimport re\n\n# Loading the multiple choices dataset from Kaggle Survey, we will not look to the free form data on this study\nkaggle_multiple_choice = pd.read_csv('\/kaggle\/input\/kaggle-survey-2019\/multiple_choice_responses.csv', low_memory=False)\nkaggle_multiple_choice.head()","396522d8":"# Separating questions from answers\n# This Series stores all questions\nkaggle_questions = kaggle_multiple_choice.iloc[0,:]\nkaggle_questions.head()","24751d4d":"# This DataFrame stores all answers\nkaggle = kaggle_multiple_choice.iloc[1:,:]\nkaggle.head()","710c6c97":"# removing everyone that took less than 3 minutes or more than 600 minutes to answer the survey\nanswers_before = kaggle.shape[0]\nprint(f'Initial dataset length is {answers_before} answers.')\n\n# Creating a mask to identify those who took less than 3 min\nless_3_minutes = kaggle[round(kaggle.iloc[:,0].astype(int) \/ 60) <= 3].index\n# Dropping those rows\nkaggle = kaggle.drop(less_3_minutes, axis=0)\n\n# Creating a mask to identify those who took more than 600 min\nmore_600_minutes = kaggle[round(kaggle.iloc[:,0].astype(int) \/ 60) >= 600].index\nkaggle = kaggle.drop(more_600_minutes, axis=0)\n\nanswers_after = kaggle.shape[0]\nprint('After removing respondents that took less than 3 minutes or more than 600 minutes' \\\n      f'to answer the survey we were left with {answers_after} answers.')","662972b0":"# removing respondents who are not employed or project\/product managers\nanswers_before = kaggle.shape[0]\n\n# Creating a mask to identify Job titles that are not interesting for this study\nstudents_and_others = kaggle[(kaggle.Q5 == 'Student') | \\\n                             (kaggle.Q5 == 'Other') | \\\n                             (kaggle.Q5 == 'Not employed') | \\\n                             (kaggle.Q5 == 'Product\/Project Manager')\n                            ].index\n# Dropping rows\nkaggle = kaggle.drop(list(students_and_others), axis=0)\nanswers_after = kaggle.shape[0]\nprint(f'After removing respondents who are not employed or project\/product managers we were left with {answers_after} answers.')","69ecafed":"# Removing those who didn't disclose compensation (Q10 is NaN)\nanswers_before = kaggle.shape[0]\nkaggle.dropna(subset=['Q10'], inplace=True)\nanswers_after = kaggle.shape[0]\nprint(f'After removing respondents who did not disclose compensation there were left {answers_after} answers.')","6b90fcfb":"# Now lets group some data\nkaggle.Q5.value_counts()","597aa838":"# Groupping DBA + Data Engineer\nkaggle.Q5 = kaggle.Q5.replace('DBA\/Database Engineer', 'Data Engineer\/DBA')\nkaggle.Q5 = kaggle.Q5.replace('Data Engineer', 'Data Engineer\/DBA')\nkaggle.Q5.value_counts()","1df1790a":"# Groupping Statistician + Research Scientist\nkaggle.Q5 = kaggle.Q5.replace('Statistician', 'Statistician\/Research Scientist')\nkaggle.Q5 = kaggle.Q5.replace('Research Scientist', 'Statistician\/Research Scientist')\nkaggle.Q5.value_counts()","60df93f7":"# Simplifying country names\nkaggle.Q3 = kaggle.Q3.replace('United Kingdom of Great Britain and Northern Ireland', 'United Kingdom')\nkaggle.Q3 = kaggle.Q3.replace('United States of America', 'United States')","7fa8f811":"# We have 12 columns with answers about programming language (Q18)\n# Lets concatenate them into a list\nkaggle['ProgLang'] = kaggle[['Q18_Part_1', 'Q18_Part_2', 'Q18_Part_3', 'Q18_Part_4', 'Q18_Part_5',\n                             'Q18_Part_6', 'Q18_Part_7', 'Q18_Part_8', 'Q18_Part_9', 'Q18_Part_10', \n                             'Q18_Part_11', 'Q18_Part_12']].values.tolist()\nkaggle.ProgLang.head()","202dfbe9":"# remove nulls from list of programming languages\nkaggle.ProgLang = kaggle.ProgLang.apply(lambda x: [item for item in x if not pd.isnull(item)])\nkaggle.ProgLang.head()","cd9ce7f5":"# Calculates the quantity of different Programming Languages for each user\nkaggle['QtyProgLang'] = kaggle.ProgLang.apply(lambda x: len(x))\n# If Quantity > 6 then it will be 6\nkaggle.loc[kaggle.QtyProgLang > 6, 'QtyProgLang'] = 6\nkaggle.QtyProgLang.head()","bd7f95f2":"# We have 12 columns with answers about Cloud Platforms (Q29)\n# Lets concatenate them into a list as we did for programming languages\nkaggle['CloudPlatf']= kaggle[['Q29_Part_1', 'Q29_Part_2', 'Q29_Part_3', 'Q29_Part_4',\n                            'Q29_Part_5', 'Q29_Part_6', 'Q29_Part_7', 'Q29_Part_8',\n                            'Q29_Part_9', 'Q29_Part_10', 'Q29_Part_11', 'Q29_Part_12']].values.tolist()\n\n# remove nulls\nkaggle.CloudPlatf = kaggle.CloudPlatf.apply(lambda x: [item.strip().lower() for item in x if not pd.isnull(item)])\n\n# Calculates the quantity\nkaggle['QtyCloudPlatf'] = kaggle.CloudPlatf.apply(lambda x: len(x))\nkaggle.loc[kaggle.QtyCloudPlatf > 6, 'QtyCloudPlatf'] = 6","2531df0b":"# Finally the same logic for Databases (Q34)\nkaggle['Databases']= kaggle[['Q34_Part_1', 'Q34_Part_2', 'Q34_Part_3', 'Q34_Part_4', 'Q34_Part_5', 'Q34_Part_6',\n                             'Q34_Part_7', 'Q34_Part_8', 'Q34_Part_9', 'Q34_Part_10', 'Q34_Part_11', 'Q34_Part_12']].values.tolist()\nkaggle.Databases = kaggle.Databases.apply(lambda x: [item.strip().lower() for item in x if not pd.isnull(item)])\nkaggle['QtyDatabases'] = kaggle.Databases.apply(lambda x: len(x))\nkaggle.loc[kaggle.QtyDatabases > 6, 'QtyDatabases'] = 6","21b138a2":"# Now lets rename some columns to have more meaningfull names\nkaggle.columns = kaggle.columns.str.replace('Q15', 'TimeWritingCode')\nkaggle.columns = kaggle.columns.str.replace('Q10', 'Salary')\nkaggle.columns = kaggle.columns.str.replace('Q1', 'Age')\nkaggle.columns = kaggle.columns.str.replace('Q5', 'JobTitle')\nkaggle.columns = kaggle.columns.str.replace('Q3', 'Country')\nkaggle.columns = kaggle.columns.str.replace('Q6', 'CompanySize')","5b561302":"# To create good plots, we need to transform some columns into categories.\n# This is because a category might have a logical order, that will be preserved when plotting.\n# Otherwise the categories would be sorted by alphabetical order\n\n# Transform TimeWritingCode column into category\ntime_writting_code = ['I have never written code', '< 1 years', '1-2 years', '3-5 years',\n                      '5-10 years', '10-20 years', '20+ years']\ncat_dtype = pd.api.types.CategoricalDtype(categories=time_writting_code, ordered=True)\nkaggle.TimeWritingCode = kaggle.TimeWritingCode.astype(cat_dtype)\n# Now TimeWritingCode has a specific order as defined by the list time_writting_code","2878c255":"# We will do the same for CompanySize and transform the column into category\ncompany_size = ['0-49 employees', '50-249 employees', '250-999 employees', '1000-9,999 employees', '> 10,000 employees']\ncat_dtype = pd.api.types.CategoricalDtype(categories=company_size, ordered=True)\nkaggle.CompanySize = kaggle.CompanySize.astype(cat_dtype)","4b03fa0b":"# And the same for JobTitle column. Transform it into category\njob_titles = ['Business Analyst', 'Data Analyst', 'Data Scientist', \n              'Data Engineer\/DBA', 'Software Engineer', 'Statistician\/Research Scientist']\ncat_dtype = pd.api.types.CategoricalDtype(categories=job_titles, ordered=True)\nkaggle.JobTitle = kaggle.JobTitle.astype(cat_dtype)","60081119":"# Add count column to make groupby easier\nkaggle['Count'] = 1","297ee9cd":"# Transform range of salaries into numerical value\n# We are summing up the lowest and highest value for each category, and then dividing by 2.\n# Some regex needed to clean the text\ncompensation = kaggle.Salary.str.replace(r'(?:(?!\\d|\\-).)*', '').str.replace('500000', '500-500000').str.split('-')\nkaggle.Salary = compensation.apply(lambda x: (int(x[0]) * 1000 + int(x[1]))\/ 2) \/ 1000 # it is calculated in thousand dollars","822d3247":"# Transform range of ages into numerical value\n# The same we did for salary, we will do for age\nage = kaggle.Age.str.replace(r'(?:(?!\\d|\\-).)*', '').str.replace('70', '70-80').str.split('-')\nkaggle.Age = (age.apply(lambda x: (int(x[0]) + int(x[1]))\/ 2)).astype(int)","ca3c22ac":"# Filtering only the columns we will need\nkaggle = kaggle[['Age', 'Country', 'JobTitle', 'CompanySize', 'Salary', 'TimeWritingCode', 'ProgLang',\n                 'QtyProgLang', 'CloudPlatf', 'QtyCloudPlatf', 'Databases', 'QtyDatabases', 'Count']]\n# Finally our Dataframe looks like this\nkaggle.head(10)","47e2ebe7":"# One more to go! \n# Basic Cleaning - Glassdoor Data\n# Loading the main file for glassdoor listings\nglassdoor_full = pd.read_csv('\/kaggle\/input\/data-jobs-listings-glassdoor\/glassdoor.csv')\nglassdoor_full.head()","34656872":"# Selecting only the columns that are interesting for the purpose of this study\nglassdoor_columns = ['header.jobTitle', 'job.description', 'map.country']\nglassdoor = glassdoor_full[glassdoor_columns].copy()\n\n# Rename columns for more meaningful names\nglassdoor.columns = ['JobTitle', 'JobDescription', 'Country']\nglassdoor.head()","f5ed477a":"# Dropping NaN countries\nlistings_before = glassdoor.shape[0]\nprint(f'Initial Glassdoor dataset length is {listings_before} job listings.')\n\nglassdoor.dropna(subset=['Country'], inplace=True)\n\nlistings_after = glassdoor.shape[0]\nprint(f'After removing NaN countries we were left with {listings_after} job listings.')","5b0f291a":"# As you can see we have some country names writen in full, others are 2 digits codes.\n# Lets fix that by replacing 2 digits country codes by the full country name\n\n# This table has a list of country names vs 2 digit codes\ncountry_codes = pd.read_csv('\/kaggle\/input\/data-jobs-listings-glassdoor\/country_names_2_digit_codes.csv')\ncountry_codes.head()","f892c2bf":"# We merge both by 2 digit code, and then fill the NaNs with the full country name\nglassdoor = pd.merge(glassdoor, country_codes, left_on='Country', right_on='Code', how='left')\nglassdoor.head()","dad639af":"# Then replace the 2 digits codes with full name\nglassdoor.Country = glassdoor.Name.fillna(glassdoor.Country)\nglassdoor.head()","1f859c5e":"# Finally drop columns that wont be used\nglassdoor = glassdoor.drop(['Name', 'Code'], axis=1)\nglassdoor.head()","9e8e688b":"# After doing this, there were still some countries that didn't match official nomenclature\n# We need to remove them\nlistings_before = glassdoor.shape[0]\n\n# Now we merge two dataframes by Country and Name\nglassdoor = pd.merge(glassdoor, country_codes, left_on='Country', right_on='Name', how='left')\nglassdoor.head()","868fc49d":"# And remove rows were Name is NaN\nglassdoor.dropna(subset=['Name'], inplace=True)\nglassdoor = glassdoor.drop(['Name', 'Code'], axis=1)\nlistings_after = glassdoor.shape[0]\nprint('After removing countries names that don\\'t match official nomenclature there' \\\n      f'were left {listings_after} job listings.')","a755b6ca":"# Now we focus on job titles. We need to find the specific terms we are interested for this study\nlistings_before = glassdoor.shape[0]\n\n# List of job titles that are interesting for this study\njob_titles = ['data scientist', 'software engineer', 'data analyst', 'research scientist', 'business analyst',\n              'data engineer', 'statistician', 'dba', 'database engineer', 'machine learning engineer']\n\n# Creating masks for each job title to identify where they appear\njob_masks = [glassdoor.JobTitle.str.contains(job_title, flags=re.IGNORECASE, regex=True) for job_title in job_titles]\n# Combining all masks where any value is True, return True\ncombined_mask = np.vstack(job_masks).any(axis=0)\ncombined_mask","9c0cda8e":"# Applying the mask to the dataset\nglassdoor = glassdoor[combined_mask].reset_index(drop=True)\nlistings_after = glassdoor.shape[0]\nprint(f'After removing Job Titles that don\\'t match answers from question 5 there were left {listings_after} job listings.')\nglassdoor.head()","7c6d90b6":"# Now lets clean job titles even further and remove any word that doesn't match the terms from Kaggle survey question 5\njob_titles_regex = '|'.join(job_titles)\nglassdoor.JobTitle = glassdoor.JobTitle.str.findall(job_titles_regex, flags=re.IGNORECASE)\nglassdoor.JobTitle = glassdoor.JobTitle.str[0]\nglassdoor.JobTitle = glassdoor.JobTitle.str.title()\nglassdoor.head()","d0e32583":"# The same way we did for kaggle, we need to group DBA + Data Engineer\nglassdoor.JobTitle = glassdoor.JobTitle.replace('Dba', 'Data Engineer\/DBA')\nglassdoor.JobTitle = glassdoor.JobTitle.replace('Database Engineer', 'Data Engineer\/DBA')\nglassdoor.JobTitle = glassdoor.JobTitle.replace('Data Engineer', 'Data Engineer\/DBA')\n\n# And group Statistician + Research Scientist\nglassdoor.JobTitle = glassdoor.JobTitle.replace('Statistician', 'Statistician\/Research Scientist')\nglassdoor.JobTitle = glassdoor.JobTitle.replace('Research Scientist', 'Statistician\/Research Scientist')\n\nglassdoor.JobTitle.value_counts()","dc2928a7":"# Finally, we transform JobTitle column into category same way we did for Kaggle\njob_titles = ['Business Analyst', 'Data Analyst', 'Data Scientist', \n              'Data Engineer\/DBA', 'Software Engineer', 'Statistician\/Research Scientist']\ncat_dtype = pd.api.types.CategoricalDtype(categories=job_titles, ordered=True)\nglassdoor.JobTitle = glassdoor.JobTitle.astype(cat_dtype)","dadd90d7":"# Add column to make groupby easier\nglassdoor['Count'] = 1","fc67a1f2":"# Now lets work with Jod Descriptions\n# first, we will lowercase everything\nglassdoor.JobDescription = glassdoor.JobDescription.str.lower()","c4c18a36":"# We need to find mentions to cloud platforms into Job Descriptions\n# There are multiple ways to mention those, lets create a dictionary \n# to replace them and make standardized terms appear in Job Description\ncloud_platforms = {\n    'Alibaba': ' Alibaba Cloud ', \n    'Amazon Web Services': ' Amazon Web Services (AWS) ',\n    'AWS': ' Amazon Web Services (AWS) ',\n    'Google Cloud Platform': ' Google Cloud Platform (GCP) ', \n    'GCP': ' Google Cloud Platform (GCP) ',\n    'Google Cloud': ' Google Cloud Platform (GCP) ',\n    'IBM': ' IBM Cloud ', \n    'Azure': ' Microsoft Azure ', \n    'Oracle': ' Oracle Cloud ',\n    'Red Hat': ' Red Hat Cloud ',\n    'SAP': ' SAP Cloud ', \n    'Salesforce': ' Salesforce Cloud ', \n    'VMware': ' VMware Cloud '\n}\n\n# Replacing terms into Job Description\nfor find, repl in cloud_platforms.items():\n    glassdoor.JobDescription = glassdoor.JobDescription.str.replace(find.lower(), repl.lower())","f9b5a824":"# Doing the same for databases\ndatabases ={\n    'dynamodb': ' aws dynamodb ',\n    'dynamo': ' aws dynamodb ',\n    ' rds ': ' aws relational database service ',\n    'relational database service': ' aws relational database service ',\n    'azure sql': ' azure sql database ',\n    'google cloud sql': ' google cloud sql ',\n    'microsoft access': ' microsoft access ', \n    'sql server': ' microsoft sql server ', \n    'my sql': ' mysql ', \n    'oracle db': ' oracle database ', \n    'postgres': ' postgressql ',\n    'postgre': ' postgressql ',\n    'postgre sql': ' postgressql ',\n    'sqlite': 'sqlite '\n}\n\nfor find, repl in databases.items():\n    glassdoor.JobDescription = glassdoor.JobDescription.str.replace(find.lower(), repl.lower())","8e8d8f91":"# Now we will create a class to enable plotting radar charts\nimport plotly.graph_objects as go\nimport plotly.offline as pyo\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\n\n# We will create a class to polar plots because we are going to apply the same settings\n# for multiple charts. By creating a class we can standardize that and change configs in only one place.\nclass PolarPlot():\n\n    def __init__(self, title):\n        pyo.init_notebook_mode() # allows plotly to show charts on notebook \n        self.figure = go.Figure() # instatiates plotly figure\n        self.range = (0, 0) # define the initial range of polar plots\n        self.title = title # Saves the chart title as an attribute\n        self.theta = ['Business Analyst', 'Data Analyst', 'Data Scientist', 'Data Engineer\/DBA',\n                      'Software Engineer', 'Statistician\/Research Scientist', 'Business Analyst'] # Those are the Theta values for our plot\n    \n    def update_common_layout(self):\n        \"\"\"\n        Updates general layout characteristics\n        \"\"\"\n        self.figure.update_layout(\n            showlegend = True,\n            title_text = self.title, # add title to chart from attribute\n            title_font_color = '#333333', # Grey is always better to not draw much attention\n            title_font_size = 14,\n            legend_font_color = 'grey', # We don't want to draw attention to the legend \n            legend_itemclick = 'toggleothers', # Change the default behaviour, when click select only that trace\n            legend_itemdoubleclick = 'toggle', # Change the default behaviour, when double click ommit that trace\n            width = 800, # chart size \n            height = 500 # chart size\n        )\n        \n    def update_commom_polar_layout(self):\n        \"\"\"\n        Updates polar layout characteristics\n        \"\"\"\n        self.figure.update_layout(\n            polar_bgcolor='white', # White background is always better\n            polar_radialaxis_visible=True, # we want to show the axis\n            polar_radialaxis_showticklabels=True, # we want to show the axis titles\n            polar_radialaxis_tickfont_color='darkgrey', # grey to the axis label (Software Engineer, Data Scientist, etc)\n            polar_angularaxis_color='grey', # Always grey for all elements that are not important\n            polar_angularaxis_showline=False, # hide lines that are not necessary\n            polar_radialaxis_showline=False, # hide lines that are not necessary\n            polar_radialaxis_layer='below traces', # show the axis bellow all traces\n            polar_radialaxis_gridcolor='#F2F2F2', # grey to not draw attention\n            polar_radialaxis_range=self.range # gets the range attribute, that is calculated in another method\n        )\n        \n    def add_data(self, data, country, color, hover_template='%{r:0.0f}%'):\n        \"\"\"\n        Adds a trace to the figure following the same standard for each trace\n        \"\"\"\n        highlight = color != 'lightslategrey' # We only want to highlight a few traces, this will decide if a trace is highlighted or not\n        data.append(data[0]) # add the first element to the end of the list, this will \"close\" the polar chart \n        self.figure.add_trace(\n            go.Scatterpolar(\n                r=data, # Data points \n                theta=self.theta, # Axis (Software Engineer, Data Scientist, etc)\n                mode='lines', # plot mode to lines (not good to show markers, it usually adds cluttering to chart)\n                name=country, # name to be exibited on legend and on hover\n                hoverinfo='name+r', # what to show on hover (name + data point)\n                hovertemplate=hover_template, # Format of data point\n                line_color=color, # line color\n                showlegend=highlight, # will decide if show or not the legend, only shows if color != lightslategrey. Otherwise we would have one legend for each trace. Too much clutter.\n                opacity= 0.8 if highlight else 0.25, # If we want to highlight, then oppacity is 0.8. Otherwise it is 0.25, to reduce clutter.\n                line_shape='spline', # This will allow smoothing the lines\n                line_smoothing=0.8, # How much the lines will smooth\n                line_width=1.6 if highlight else 0.6 # we want highlighted traces to be more evident, otherwise they should stay in the background \n            )\n        )\n        self.update_range(data) # Calls the method that will update the max range\n    \n    def update_range(self, data):\n        \"\"\"\n        Updates the range to be 110% of maximum value of all traces\n        \"\"\"\n        max_range = max(data) * 1.1\n        self.range = (0, max_range) if max_range > self.range[1] else self.range # updates the range attribute\n        \n    def show(self):\n        \"\"\"\n        Update layouts and shows the figure\n        \"\"\"\n        self.update_common_layout() \n        self.update_commom_polar_layout()\n        self.figure.show()","219f6930":"# as we have many charts displaying job titles per country, we will create anoter class to handle this\nclass JobTitlebyCountry:\n    \n    def __init__(self, country_color, polar_plot):\n        self.countries = list(set(kaggle.Country.tolist())) # defines the list of countries as all countries available on Kaggle dataset\n        self.country_color = country_color # It is a dictionary of country names and colors\n        self.polar = polar_plot # PolarPlot() instance that we have defined before\n        \n        for country in self.country_color.keys():\n            # Here we remove countries that will be highlighted and add then back to the end of the list\n            # this way we avoid having non highlighted traces over them\n            self.countries.remove(country)\n            self.countries.append(country)\n    \n    def add_traces_percentage(self, data):\n        \"\"\"\n        Calculates the percentage of rows for each job title in each country  and then add it to plot\n        \"\"\"\n        for country in self.countries:\n            # iterates in the list of countries\n            data_filtered = data[data.Country == country] # filters data for a single country\n            if len(data_filtered) > 20: # only plotting if there are more than 20 datapoints\n                color = self.country_color.get(country, 'lightslategrey') # check if country is in the dict of countries and get color, if it is not then color is lightslategrey\n                plot_data = data_filtered.groupby(['JobTitle'], as_index=False).Count.sum().Count.tolist() # group the data by jobtitle, perform count and convert it to a list \n                plot_data = (np.array(plot_data) \/ sum(plot_data) * 100).tolist() # Transform absolute values into percentages\n                self.polar.add_data(plot_data, country, color) # add trace to the figure\n    \n    def add_traces_average_salary(self, data):\n        \"\"\"\n        Calculates the average salary for each job title in each country and then add it to plot\n        \"\"\"\n        for country in self.countries:\n            data_filtered = data[data.Country == country]\n            if len(data_filtered) > 20: # only plotting if there are more than 20 datapoints\n                color = self.country_color.get(country, 'lightslategrey')\n                plot_data = data_filtered.groupby(['JobTitle'], as_index=False).Salary.mean() # Group by job title and calculate average salary\n                plot_data.dropna(inplace=True) # drop all nulls\n                plot_data = plot_data.Salary.tolist()\n                if len(plot_data) == 6: #removes countries that dont have salary for all job titles\n                    self.polar.add_data(plot_data, country, color, 'U$%{r:,.2r}') # add trace to figure\n          \n    def adjust_layout_percentage(self):\n        \"\"\"\n        Adjust layout to show percentages\n        \"\"\"\n        self.polar.figure.update_layout(\n            polar_radialaxis_tickvals=[25, 50, 75], # show ticks ate 25, 50 and 75\n            polar_radialaxis_ticktext=['25%', '50%', '75%'],\n            polar_radialaxis_tickmode='array',\n        )","add4a137":"pp = PolarPlot('Proportionally USA has more Data Scientists, while China has more Software Engineers.' \\\n               '<br><span style=\"font-size:10px\"><i>Kaggle Survey Q5: Select the title most similar to ' \\\n               'your current role (sums to 100% for each country)<\/span><\/i>') # instantiate PolarPlot, with chart title\n\nus_ch_color = {\n    'United States': '#002366', \n    'China': '#ED2124', \n} # creates dict of colors for highlights\n\nplot = JobTitlebyCountry(us_ch_color, pp) # Instantiates the class that will add traces to plot\nplot.add_traces_percentage(kaggle) # add traces\nplot.adjust_layout_percentage() # Adjust layout to show percentages\nplot.polar.show() # show plot","9ab65ac4":"pp = PolarPlot('USA has more demand for Data Analysts and Scientists. China needs more Software Engineers.' \\\n               '<br><span style=\"font-size:10px\"><i>Glassdoor Job Listings: Percentage of job titles per country ' \\\n               ' (sums to 100% for each country)<\/span><\/i>')\n\nplot = JobTitlebyCountry(us_ch_color, pp)\nplot.add_traces_percentage(glassdoor)\nplot.adjust_layout_percentage()\nplot.polar.show()","dcf17e97":"pp = PolarPlot('China pays more to Statisticians compared to other positions. USA salaries are the highest.' \\\n               '<br><span style=\"font-size:10px\"><i>Kaggle Survey Q10: What is your current yearly compensation (approximate $USD)?<\/span><\/i>')\n\nplot = JobTitlebyCountry(us_ch_color, pp)\nplot.add_traces_average_salary(kaggle)\nplot.polar.show()","52fde53f":"pp = PolarPlot('India and Brazil have almost the same shape. The latter has a bit more Research Sientists and Statisticians.' \\\n               '<br><span style=\"font-size:10px\"><i>Kaggle Survey Q5: Sums to 100% for each country<\/span><\/i>')\n\nbr_in_color = {\n    'India': '#FE9933', \n    'Brazil': '#179B3A',\n}\n\nplot = JobTitlebyCountry(br_in_color, pp)\nplot.add_traces_percentage(kaggle)\nplot.adjust_layout_percentage()\nplot.polar.show()","28e17316":"pp = PolarPlot('In Brazil there are more space for Software Engineers while in India for Business Analysts.' \\\n               '<br><span style=\"font-size:10px\"><i>Glassdoor Job Titles: Sums to 100% for each country<\/span><\/i>')\n\nplot = JobTitlebyCountry(br_in_color, pp)\nplot.add_traces_percentage(glassdoor)\nplot.adjust_layout_percentage()\nplot.polar.show()","5367ef50":"pp = PolarPlot('Salaries are higher in Brazil than in India. Data engineers are well paid in Brazil compared to others.' \\\n               '<br><span style=\"font-size:10px\"><i>Kaggle Survey: Average salary per country in USD per year<\/span><\/i>')\n\nplot = JobTitlebyCountry(br_in_color, pp)\nplot.add_traces_average_salary(kaggle)\nplot.polar.show()","119d7375":"# Plots proportion of listings for each job title per country\npp = PolarPlot('European countries have almost the same proportion of professionals.' \\\n               '<br><span style=\"font-size:10px\"><i>Kaggle Survey Q5: Sums to 100% for each country<\/span><\/i>')\n\nge_uk_ne_colors = { \n    'Germany': '#000000',\n    'United Kingdom': '#012169',\n    'Netherlands': '#F55900'\n}\n\nplot = JobTitlebyCountry(ge_uk_ne_colors, pp)\nplot.add_traces_percentage(kaggle)\nplot.adjust_layout_percentage()\nplot.polar.show()","b29f3160":"# Plots proportion of listings for each job title per country\npp = PolarPlot('Proportionally there are more positions for Data and Software Engineers in The Netherlands.' \\\n               '<br><span style=\"font-size:10px\"><i>Glassdoor Job Titles: Sums to 100% for each country<\/span><\/i>')\n\nplot = JobTitlebyCountry(ge_uk_ne_colors, pp)\nplot.add_traces_percentage(glassdoor)\nplot.adjust_layout_percentage()\nplot.polar.show()","70445fff":"# Plots average salary for each job title per country\npp = PolarPlot('Business Analysts in the UK and Germany earn more than Engineers.' \\\n               '<br><span style=\"font-size:10px\"><i>Kaggle Survey: Average salary per country in USD per year<\/span><\/i>')\n\nplot = JobTitlebyCountry(ge_uk_ne_colors, pp)\nplot.add_traces_average_salary(kaggle)\nplot.polar.show()","8812e4df":"# Now we want to plot a set of subplots\n# to achieve that we are also building a new class that will handle all configuration\nclass PolarSubPlot():\n\n    def __init__(self, title, subplot_titles):\n        pyo.init_notebook_mode()\n        self.figure = go.Figure()\n        self.range = (0, 0)\n        self.title = title\n        self.subplot_titles = subplot_titles # List of subplot tiles\n        self.theta = ['Business Analyst', 'Data Analyst', 'Data Scientist', 'Data Engineer\/DBA',\n                      'Software Engineer', 'Statistician\/Research Scientist', 'Business Analyst']\n        self.subplot_countries = [] # initiate a list of countries to build subplots\n        self.make_subplots() # Execute method that will add subplots to figure\n        \n    def make_subplots(self):\n        \"\"\"\n        Creates 6 subplots in the figure and add titles\n        \"\"\"\n        self.figure = make_subplots(\n            rows=3, # our subplot will have 3 rows\n            cols=2, # and 2 columns\n            subplot_titles=self.subplot_titles, # Add titles to subplots\n            specs=[[{'type': 'polar'}]*2]*3 # Define chart type for each subplot\n        )\n\n        for i in self.figure['layout']['annotations']:\n            i['font'] = dict(size=16,color='grey')  # Size of subplot title\n    \n    def update_common_layout(self):\n        \"\"\"\n        Updates general layout characteristics\n        \"\"\"\n        self.figure.update_layout(\n            showlegend = True,\n            title_text = self.title,\n            title_font_color = '#333333',\n            title_font_size = 16,\n            margin_t = 150,\n            legend_font_color = 'gray',\n            legend_itemclick = False,\n            legend_itemdoubleclick = False,\n            width = 800,\n            height = 900\n        )\n        \n    def update_polar_layout(self):\n        \"\"\"\n        Updates polar layout characteristics\n        \"\"\"\n        # this is a dictionary with polar plot layout configs, similar to what you saw on PolarPlot\n        polar_layout = dict(\n            bgcolor = 'white',\n            radialaxis = dict(\n                visible=True,\n                showticklabels=False,\n                showline=False,\n                layer='below traces',\n                gridcolor='#F2F2F2',\n                tickvals=[25, 50, 75],\n                tickmode='array',\n                range=self.range,        \n            ),\n            angularaxis = dict(\n                tickfont_size=9,\n                color='grey',\n                showline=False\n            )\n        )\n\n        # We need to update the layout for each subplot\n        # We will create the same dictionary of layout for each subplot because we want all of them to have the same layout\n        subplot_layout = dict()\n        for subplot in ['polar', 'polar2', 'polar3', 'polar4', 'polar5', 'polar6']:\n             subplot_layout[subplot] = polar_layout\n        \n        self.figure.update_layout(subplot_layout)\n        \n    def add_data(self, data, country, source, x, y, hover_template='%{r:0.0f}%'):\n        \"\"\"\n        Adds a trace to the figure following the same standard for each trace\n        \"\"\"\n        data.append(data[0])\n        self.figure.add_trace(\n            go.Scatterpolar(\n                r=data,\n                theta=self.theta,\n                mode='lines',\n                name=source,\n                hoverinfo='name+r',\n                hovertemplate='%{r:0.0f}%',\n                text=country,\n                line_color= '#1BAB40' if source == 'Glassdoor' else '#27A4D7', # Green for Glassdoor, blue for Kaggle\n                showlegend= len(self.subplot_countries) < 2,\n                opacity= 0.8,\n                line_shape='spline',\n                line_smoothing=0.8,\n                line_width=1.5\n            ), x, y)\n        self.update_range(data)\n        self.subplot_countries.append(country)\n    \n    def update_range(self, data):\n        \"\"\"\n        Updates the range to be 110% of maximum value of all traces\n        \"\"\"\n        max_range = max(data) * 1.1\n        self.range = (0, max_range) if max_range > self.range[1] else self.range\n        \n    def show(self):\n        self.update_common_layout()\n        self.update_polar_layout()\n        self.figure.show()","9c2d0aac":"# Plots Kaggle vs Glassdoor proportion of listings for each job title for 4 countries\ncountries = ['Brazil', 'China', 'India', 'United States', 'Netherlands', 'United Kingdom']\npp = PolarSubPlot('Comparing Job Titles of Kagglers and jobs listings per country.' \\\n                  '<br>Jobs listings are not exactly available in the same job titles as Kagglers are.'\\\n                  '<br><span style=\"font-size:10px\"><i>Kaggle Survey vs Glassdoor Listings: '\\\n                  'Percentage of Job Titles (sums to 100% for each country)<\/span><\/i>',\n                  subplot_titles = countries)\n   \ni = 1 # rows\nj = 1 # columns\nfor country in countries:\n    # Add Kaggle trace\n    kaggle_filtered = kaggle[kaggle.Country == country] \n    plot_data = kaggle_filtered.groupby(['JobTitle'], as_index=False).Count.sum().Count.tolist()\n    plot_data = (np.array(plot_data) \/ sum(plot_data) * 100).tolist()\n    pp.add_data(plot_data, country, 'Kaggle', i, j)\n    \n    # Add Glassdoor trace\n    glassdoor_filtered = glassdoor[glassdoor.Country == country] \n    plot_data = glassdoor_filtered.groupby(['JobTitle'], as_index=False).Count.sum().Count.tolist()\n    plot_data = (np.array(plot_data) \/ sum(plot_data) * 100).tolist()\n    pp.add_data(plot_data, country, 'Glassdoor', i, j)\n  \n    # Chart Positioning\n    if j >= 2:\n        i += 1\n        j = 1\n    else:\n        j += 1\n\npp.show()","5f53bcfb":"# Now we create a class to make line plots easier, same logic as before\nclass LinePlot():\n\n    def __init__(self, title):\n        pyo.init_notebook_mode()\n        self.figure = go.Figure()\n        self.range = (0, 100)\n        self.title = title\n    \n    def update_axis_title(self, x, y):\n        self.figure.update_layout(\n            xaxis_title_text=x,\n            yaxis_title_text=y,\n        )\n        \n    def update_layout(self):\n        \"\"\"\n        Creates a clean layout for ploting, adjusting multiple settings\n        \"\"\"\n        self.figure.update_layout(\n            showlegend=True,\n            title_text=self.title,\n            title_font_color='#333333',\n            legend_font_color='gray',\n            legend_itemclick='toggleothers',\n            legend_itemdoubleclick='toggle',\n            width = 800,\n            height=500,\n            plot_bgcolor='white',\n            xaxis_title_font_color='grey',\n            xaxis_color='grey',\n            yaxis_title_font_color='grey',\n            yaxis_color='grey',\n        )\n         \n    def add_data(self, x_names, y_data, trace_name, trace_color, hover_template):\n        \"\"\"\n        Adds a trace to the figure following the same standard for each trace\n        \"\"\"\n        highlight = trace_color != 'lightslategrey'\n        self.figure.add_trace(\n            go.Scatter(\n                x=x_names,\n                y=y_data,\n                mode='lines',\n                name=trace_name,\n                hoverinfo='name+y',\n                hovertemplate=hover_template,\n                line_color= trace_color,\n                showlegend=highlight,\n                opacity= 0.8 if highlight else 0.25,\n                line_shape='spline',\n                line_smoothing=0.8,\n                line_width=1.6 if highlight else 0.5\n            )\n        )\n        \n    def show(self):\n        self.update_layout()\n        self.figure.show()","3919365c":"# This function will be used to create different aggegations for plotting\ndef plot_lines(line_plot, data, traces, x_names, agg_column, group_column, trace_column, trace_colors, hover_template):\n    \"\"\"\n    Creates aggregation to plot\n    \"\"\"\n    for trace_name in traces:\n        color = trace_colors.get(trace_name, 'lightslategrey') # Get color if trace_name in trace_colors\n        data_filtered = data[data[trace_column] == trace_name] # Filter data by trace_name\n        plot_data = data_filtered.groupby([group_column], as_index=False).agg({agg_column: ['mean', 'count']}) # Group by group_column and calculate mean and count for agg column\n        plot_data = plot_data[agg_column]['mean'].tolist() # convert mean column to list\n        line_plot.add_data(x_names, plot_data, trace_name, color, hover_template=hover_template) # add trace to line plot","a3591746":"traces = ['Business Analyst', 'Data Analyst', 'Data Scientist', 'Data Engineer\/DBA',\n          'Software Engineer', 'Statistician\/Research Scientist'] # defines traces (each line)\n\nx_names = ['0 years', '< 1 years', '1-2 years', '3-5 years', '5-10 years', '10-20 years', '20+ years'] # define x axis\n\ntrace_colors = {\n    'Data Engineer\/DBA': '#212F3C',\n    'Data Scientist': '#196F3D', \n    'Business Analyst': '#21618C'\n} # Define traces that will be highlighted\n\n# Instantiate LinePlot with title\nlp = LinePlot('We see a decrease in salary for DS, DE and BA who have just started coding' \\\n               '<br><span style=\"font-size:10px\"><i>Kaggle Survey Q15: Average salary per years writting code in USD per year<\/span><\/i>') \n\n# call plot lines function\nplot_lines(\n    lp, # plot a LinePlot\n    data=kaggle, # with Kaggle Data\n    traces=traces, # With a given list of traces\n    x_names=x_names, # and x axis\n    agg_column='Salary', # Calculate the aggregation on Salary\n    group_column='TimeWritingCode', # Group by TimeWritting Code\n    trace_column='JobTitle', # Column that contains traces\n    trace_colors=trace_colors, # Dict of traces to highlight\n    hover_template='U$%{y:,.2r}' # Number template to show on hover\n)\n\nxaxis_title='How long have you been writing code to analyze data (at work or at school)?'\nyaxis_title='Average Salary (USD per Year)'\n\nlp.update_axis_title(xaxis_title, yaxis_title) # Update x, and y axis titles\nlp.show()","6f1aead8":"\nlp = LinePlot('Professionals with no coding experience are older than those with little experience.' \\\n               '<br><span style=\"font-size:10px\"><i>Kaggle Survey Q1: Average age per years writting code<\/span><\/i>')\n\ntraces = ['Business Analyst', 'Data Analyst', 'Data Scientist', 'Data Engineer\/DBA',\n          'Software Engineer', 'Statistician\/Research Scientist']\n\nx_names = ['0 years', '< 1 years', '1-2 years', '3-5 years', '5-10 years', '10-20 years', '20+ years']\n\ntrace_colors = {\n    'Data Engineer\/DBA': '#212F3C',\n    'Data Scientist': '#196F3D', \n    'Business Analyst': '#21618C'\n}\n\nplot_lines(\n    lp, \n    data=kaggle,\n    traces=traces, \n    x_names=x_names, \n    agg_column='Age', \n    group_column='TimeWritingCode',\n    trace_column='JobTitle', \n    trace_colors=trace_colors,\n    hover_template='%{y:0.0f}'\n)\n\nxaxis_title='How long have you been writing code to analyze data (at work or at school)?'\nyaxis_title='Average age in years'\nlp.update_axis_title(xaxis_title, yaxis_title)\nlp.show()\n","aee0c813":"lp = LinePlot('Statisticians holds the greatest increase in salary when moving to bigger companies.' \\\n               '<br><span style=\"font-size:10px\"><i>Kaggle Survey Q6: Average salary per company size in USD per year<\/span><\/i>')\n\ntraces = ['Business Analyst', 'Data Analyst', 'Data Scientist', 'Data Engineer\/DBA',\n          'Software Engineer', 'Statistician\/Research Scientist']\n\nx_names = ['0-49 employees', '50-249 employees', '250-999 employees', '1000-9,999 employees', '> 10,000 employees']\n\ntrace_colors = {\n    'Data Scientist': '#196F3D', \n    'Business Analyst': '#21618C',\n    'Statistician\/Research Scientist': '#5B2C6F'\n}\n\nplot_lines(\n    lp, \n    data=kaggle,\n    traces=traces, \n    x_names=x_names, \n    agg_column='Salary', \n    group_column='CompanySize',\n    trace_column='JobTitle', \n    trace_colors=trace_colors,\n    hover_template='U$%{y:,.2r}'\n)\n\nxaxis_title='What is the size of the company where you are employed?'\nyaxis_title='Average Salary (USD per Year)'\nlp.update_axis_title(xaxis_title, yaxis_title)\nlp.show()","dc53b51e":"# Now we create a function to plot some more polar data\ndef plot_polar(polar_plot, data, traces, x_names, agg_column, group_column, trace_column, trace_colors, hover_template):\n    \"\"\"\n    Creates aggregation to plot\n    \"\"\"\n    data_cp = data.copy() # make copy of dataframe to avoid modifying the original\n    for trace_name in traces: # for each trace\n        color = trace_colors.get(trace_name.strip(), 'lightslategrey') # Check if trace will be highlighted\n        if agg_column in ('JobDescription', 'CloudPlatf'): # those columns are in lowercase\n            data_cp['TempCol'] = data_cp[agg_column].apply(lambda x: trace_name.lower() in x) # Find rows where trace_name is in agg_column\n        else: # Other columns are not lowercase\n            data_cp['TempCol'] = data_cp[agg_column].apply(lambda x: trace_name in x) # Find rows where trace_name is in agg_column\n        plot_data = data_cp.groupby([group_column], as_index=False).agg({'TempCol': ['sum', 'count']}) # Group by group_column, aggegate on TempCol calculating sum (of boolean) and count\n        plot_data['TempColPct'] = plot_data['TempCol']['sum'] \/ plot_data['TempCol']['count'] * 100 # Transform absolute values into percentages\n        plot_data = plot_data.TempColPct.tolist() # Convert to list\n        polar_plot.add_data(plot_data, trace_name, color, hover_template) # add trace","6148b5a0":"pp = PolarPlot('About 3\/4 of Kagglers use Python. R is not popular within Software Engineers. ' \\\n               '<br><span style=\"font-size:10px\"><i>Kaggle Survey Q18: What programming languages do you use on a regular basis?<\/span><\/i>')\n\n\ntraces = ['Bash', 'C', 'C++', 'Java', 'Javascript', 'MATLAB', \n          'Other', 'Python', 'R', 'SQL', 'TypeScript'] \n\nx_names = ['Business Analyst', 'Data Analyst', 'Data Scientist', 'Data Engineer\/DBA',\n          'Software Engineer', 'Statistician\/Research Scientist']\n\ntrace_colors = {\n    'Python': '#FEC331',\n    'SQL': '#66B900',\n    'R': '#2063b7',\n}\n\nplot_polar(\n    pp, \n    data=kaggle,\n    traces=traces, \n    x_names=x_names, \n    agg_column='ProgLang', \n    group_column='JobTitle',\n    trace_column='ProgLang', \n    trace_colors=trace_colors,\n    hover_template='%{r:0.0f}%'\n)\n\npp.figure.update_layout(\n    polar_radialaxis_tickvals=[25, 50, 75],\n    polar_radialaxis_ticktext=['25%', '50%', '75%'],\n    polar_radialaxis_tickmode='array',\n)\npp.show()\n","ece504c1":"pp = PolarPlot('R is not a frequent requirements in Jobs Listings. <b>Even for Statisticians.<\/b>' \\\n               '<br><span style=\"font-size:10px\"><i>Glassdoor: proportion of programming language appearances in Job Description per Job Title<\/span><\/i>')\n\ntraces = ['Bash', ' C ', 'C++', 'Java', 'Javascript', 'MATLAB', \n          'Python', ' R ', 'SQL', 'TypeScript'] \n\nx_names = ['Business Analyst', 'Data Analyst', 'Data Scientist', 'Data Engineer\/DBA',\n          'Software Engineer', 'Statistician\/Research Scientist']\n\ntrace_colors = {\n    'Python': '#FEC331',\n    'SQL': '#66B900',\n    'R': '#2063b7',\n}\n\nplot_polar(\n    pp, \n    data=glassdoor,\n    traces=traces, \n    x_names=x_names, \n    agg_column='JobDescription', \n    group_column='JobTitle',\n    trace_column='JobDescription', \n    trace_colors=trace_colors,\n    hover_template='%{r:0.0f}%'\n)\n\npp.figure.update_layout(\n    polar_radialaxis_tickvals=[25, 50, 75],\n    polar_radialaxis_ticktext=['25%', '50%', '75%'],\n    polar_radialaxis_tickmode='array',\n)\npp.show()","af37af3e":"# Plots Kaggle vs Glassdoor programming languages percentages of appearances\nprogramming_languages = ['Python', ' R ', 'SQL', 'Bash', 'Java', 'Javascript']\npp = PolarSubPlot('Comparing programming language knowledge of Kagglers and requirements of jobs.' \\\n                '<br><span style=\"font-size:10px\"><i>Kaggle Survey vs Glassdoor Listings: Percentage '\\\n                'of job listing with a given language in description vs respondents who use that language<\/span><\/i>',\n                  subplot_titles = programming_languages)\n\nkaggle_cp = kaggle.copy()\nglassdoor_cp = glassdoor.copy()\n\n\ni = 1\nj = 1\nfor language in programming_languages:\n    # Add Kaggle trace\n    kaggle_cp['Language'] = kaggle_cp.ProgLang.apply(lambda x: language.strip() in x)\n    plot_data = kaggle_cp.groupby('JobTitle', as_index=False).agg({'Language': ['sum', 'count']})\n    plot_data['LanguagePct'] = plot_data['Language']['sum'] \/ plot_data['Language']['count'] * 100\n    plot_data = plot_data.LanguagePct.tolist()\n    pp.add_data(plot_data, language.strip(), 'Kaggle', i, j)\n    \n    # Add Glassdoor trace\n    glassdoor_cp['Language'] = glassdoor_cp.JobDescription.apply(lambda x: language.lower() in x)\n    plot_data = glassdoor_cp.groupby('JobTitle', as_index=False).agg({'Language': ['sum', 'count']})\n    plot_data['LanguagePct'] = plot_data['Language']['sum'] \/ plot_data['Language']['count'] * 100\n    plot_data = plot_data.LanguagePct.tolist()\n    pp.add_data(plot_data, language.strip(), 'Glassdoor', i, j)\n  \n    # Chart Positioning\n    if j >= 2:\n        i += 1\n        j = 1\n    else:\n        j += 1\n\npp.show()","18e99c8d":"\nlp = LinePlot('Learning up to three languages will increase your salary!' \\\n               '<br><span style=\"font-size:10px\"><i>Kaggle Survey Q18: Quantity of languages used on a regular basis per years writting code<\/span><\/i>')\n\ntraces = list(set(kaggle.TimeWritingCode.tolist()))\n\nx_names = ['{} languages'.format(x) for x in range(7)]\n\ntrace_colors = {}\n\nplot_lines(\n    lp, \n    data=kaggle,\n    traces=traces, \n    x_names=x_names, \n    agg_column='Salary', \n    group_column='QtyProgLang',\n    trace_column='TimeWritingCode', \n    trace_colors=trace_colors,\n    hover_template='U$%{y:,.2r}'\n)\n\n# Adding Averarage\nplot_data = kaggle.groupby(['QtyProgLang'], as_index=False).agg({'Salary': 'mean'})\nplot_data = plot_data.Salary.tolist()\nlp.add_data(x_names, plot_data, 'Average', 'black', hover_template='U$%{y:,.2r}')\n\n\nxaxis_title='Quantity of programming languages used on a regular basis'\nyaxis_title='Average Salary (USD per Year)'\nlp.update_axis_title(xaxis_title, yaxis_title)\nlp.show()","61ccbb81":"pp = PolarPlot('Cloud platforms are more popular within technical positions. AWS is leading whithing Kagglers.' \\\n               '<br><span style=\"font-size:10px\"><i>Kaggle Survey Q29: Which of the following cloud computing platforms do you use on a regular basis?<\/span><\/i>')\n\ntraces = ['Alibaba Cloud', 'Amazon Web Services (AWS)', 'Google Cloud Platform (GCP)',\n          'IBM Cloud', 'Microsoft Azure', 'Oracle Cloud', 'Red Hat Cloud',\n          'SAP Cloud', 'Salesforce Cloud', 'VMware Cloud', 'None']\n\nx_names = ['Business Analyst', 'Data Analyst', 'Data Scientist', 'Data Engineer\/DBA',\n          'Software Engineer', 'Statistician\/Research Scientist']\n\ntrace_colors = {\n    'Amazon Web Services (AWS)': '#F79500',\n    'Google Cloud Platform (GCP)': '#1AA746',\n    'Microsoft Azure': '#3278B1',\n}\n\nplot_polar(\n    pp, \n    data=kaggle,\n    traces=traces, \n    x_names=x_names, \n    agg_column='CloudPlatf', \n    group_column='JobTitle',\n    trace_column='CloudPlatf', \n    trace_colors=trace_colors,\n    hover_template='%{r:0.0f}%'\n)\n\npp.figure.update_layout(\n    polar_radialaxis_tickvals=[10, 20, 30],\n    polar_radialaxis_ticktext=['10%', '20%', '30%'],\n    polar_radialaxis_tickmode='array',\n)\npp.show()\n","e02d81c4":"pp = PolarPlot('Data engineering is the field which requires more experience with cloud computing products.' \\\n               '<br><span style=\"font-size:10px\"><i>Glassdoor: percentage of cloud computing platform appearances in Job Descriptions<\/span><\/i>')\n\ntraces = ['Alibaba Cloud', 'Amazon Web Services (AWS)', 'Google Cloud Platform (GCP)',\n          'IBM Cloud', 'Microsoft Azure', 'Oracle Cloud', 'Red Hat Cloud',\n          'SAP Cloud', 'Salesforce Cloud', 'VMware Cloud', 'None']\n\nx_names = ['Business Analyst', 'Data Analyst', 'Data Scientist', 'Data Engineer\/DBA',\n          'Software Engineer', 'Statistician\/Research Scientist']\n\ntrace_colors = {\n    'Amazon Web Services (AWS)': '#F79500',\n    'Google Cloud Platform (GCP)': '#1AA746',\n    'Microsoft Azure': '#3278B1',\n}\n\nplot_polar(\n    pp, \n    data=glassdoor,\n    traces=traces, \n    x_names=x_names, \n    agg_column='JobDescription', \n    group_column='JobTitle',\n    trace_column='CloudPlatf', \n    trace_colors=trace_colors,\n    hover_template='%{r:0.0f}%'\n)\n\npp.figure.update_layout(\n    polar_radialaxis_tickvals=[10, 20, 30],\n    polar_radialaxis_ticktext=['10%', '20%', '30%'],\n    polar_radialaxis_tickmode='array',\n)\npp.show()\n","a87a5ac6":"pp = PolarPlot('The most used DBs by Kagglers are MySQL, PostgreSQL and SQL Server.' \\\n               '<br><span style=\"font-size:10px\"><i>Kaggle Survey Q34: Which of the following relational database products do you use on a regular basis?<\/span><\/i>')\n\ntraces =  ['aws dynamodb', 'aws relational database service', 'azure sql database', 'google cloud sql',\n           'microsoft access', 'microsoft sql server', 'mysql', 'oracle database', 'postgressql', 'sqlite', 'none']\n\nx_names = ['Business Analyst', 'Data Analyst', 'Data Scientist', 'Data Engineer\/DBA',\n          'Software Engineer', 'Statistician\/Research Scientist']\n\ntrace_colors = {\n    'mysql': '#DE8A01',\n    'postgressql': '#32648D',\n    'microsoft sql server': '#A41C22',\n}\n\nplot_polar(\n    pp, \n    data=kaggle,\n    traces=traces, \n    x_names=x_names, \n    agg_column='Databases', \n    group_column='JobTitle',\n    trace_column='Databases', \n    trace_colors=trace_colors,\n    hover_template='%{r:0.0f}%'\n)\n\npp.figure.update_layout(\n    polar_radialaxis_tickvals=[10, 20, 30],\n    polar_radialaxis_ticktext=['10%', '20%', '30%'],\n    polar_radialaxis_tickmode='array',\n)\npp.show()\n","5f091904":"pp = PolarPlot('Notice that many Statisticians and Research Scientists don\\'t use DBs.' \\\n               '<br><span style=\"font-size:10px\"><i>Kaggle Survey Q34: Which of the ' \\\n               'following relational database products do you use on a regular basis?<\/span><\/i>')\n\ntraces =  ['aws dynamodb', 'aws relational database service', 'azure sql database', 'google cloud sql',\n           'microsoft access', 'microsoft sql server', 'mysql', 'oracle database', 'postgressql', 'sqlite', 'none']\n\nx_names = ['Business Analyst', 'Data Analyst', 'Data Scientist', 'Data Engineer\/DBA',\n          'Software Engineer', 'Statistician\/Research Scientist']\n\ntrace_colors = {\n    'none': 'grey'\n}\n\nplot_polar(\n    pp, \n    data=kaggle,\n    traces=traces, \n    x_names=x_names, \n    agg_column='Databases', \n    group_column='JobTitle',\n    trace_column='Databases', \n    trace_colors=trace_colors,\n    hover_template='%{r:0.0f}%'\n)\n\npp.figure.update_layout(\n    polar_radialaxis_tickvals=[10, 20, 30],\n    polar_radialaxis_ticktext=['10%', '20%', '30%'],\n    polar_radialaxis_tickmode='array',\n)\npp.show()\n","843d1c25":"pp = PolarPlot('Databases is heavy on Data and Software Engineering. Some Data Analyst positions require SQL Server.' \\\n               '<br><span style=\"font-size:10px\"><i>Glassdoor: percentage of database names appearances in Job Descriptions<\/span><\/i>')\n\ntraces =  ['aws dynamodb', 'aws relational database service', 'azure sql database', 'google cloud sql',\n           'microsoft access', 'microsoft sql server', 'mysql', 'oracle database', 'postgressql', 'sqlite', 'none']\n\nx_names = ['Business Analyst', 'Data Analyst', 'Data Scientist', 'Data Engineer\/DBA',\n          'Software Engineer', 'Statistician\/Research Scientist']\n\ntrace_colors = {\n    'mysql': '#DE8A01',\n    'postgressql': '#32648D',\n    'microsoft sql server': '#A41C22',\n}\n\nplot_polar(\n    pp, \n    data=glassdoor,\n    traces=traces, \n    x_names=x_names, \n    agg_column='JobDescription', \n    group_column='JobTitle',\n    trace_column='Databases', \n    trace_colors=trace_colors,\n    hover_template='%{r:0.0f}%'\n)\n\npp.figure.update_layout(\n    polar_radialaxis_tickvals=[5, 10, 15],\n    polar_radialaxis_ticktext=['5%', '10%', '15%'],\n    polar_radialaxis_tickmode='array',\n)\npp.show()","bfb6c8c7":"If you want to find a job in Data Science, then Python is the language of choice. More than 75% of all Data Science positions on Glassdoor mention Python in their job descriptions.\n\n<div class=\"alert alert-success\"> Python is the prefered language for Data Science by the market!<\/div>\n\n<br>\nStatisticians and Research Scientists use less SQL than other professions. **In fact only 1\/4 of then use SQL!** This is a sign that academia is much more used to flat files than to databases. Unfortunately the real world is not served in `.csv` files.\n\n<div class=\"alert alert-warning\"> Hey you that are doing a Masters or PhD and want to find a job! Look at those two charts above! <b>Learn SQL!<\/b><\/div>\n\nIf you want to start working with data, then knowing SQL will help you get jobs as Business and Data Analyst. Now if you want to go down the Data Engineering path, SQL and Python are musts. Software engineers will find jobs more easily by knowing Java.\n\n<div class=\"alert alert-success\"><b>To get a job in the data world<\/b>, the recommended language to learn is SQL!<\/strong> <\/div>","d829a792":"Looking at salaries reported by Kagglers we see that China is paying better for Statisticians and Research Scientists when compared to other positions. However, unfortunately, there aren't many jobs available in this area as the previous chart shows. In USA the highest salaries are in Data Science, followed by Data Engineering and Software Engineering. And of course... USA pays more than any other country for almost all positions.","ee0b71f8":"Finally when we compare salaries in Europe we find out that they are at almost the same range (a little bit higher for UK, maybe because of stronger currency compared to Euro). And now we can tell that Business Analysts are indeed quite happy in Europe, they are earning on average even more than technical folks.\n\n<div class=\"alert alert-success\">\n  <strong>Software Engineers, Data Engineers and Data Scientists from UK and Germany!<\/strong> Stop coding now and become Business Analysts!<\/div>\n<div class=\"alert alert-danger\">\n  <strong>I'm joking. Don't do that.<\/strong> Or do.<\/div>","38834f91":"Python has been consolidated as the main language used by people with all job titles, about 3\/4 of all respondents use it on a regular basis. R Language is much less popular (and almost no Software Engineers use with it).","896fbf61":"# How does years of experience coding impact salaries?","32344204":"Learning (and using) multiple languages does not look like a competitive advantage in terms of salary. Pick up to three and be a real *Pro* when it comes to using them. Limit your languages especially if you don't have experience in working with data!\n\n<div class=\"alert alert-success\"><b>Stop learning multiple languages!<\/b> Python, SQL and one more language of your choice should be enough.<\/div>","1c1ad29b":"Looking at jobs listings, we find out that Brazil has a similar shape to China: huge demand for Software Engineers. \n\n<div class=\"alert alert-success\">\n  <strong>Data Scientists from Brazil that are struggling to find a job!<\/strong> Consider learning software engineering and joining a company as junior developer.<\/div>\n  \n<div class=\"alert alert-success\">\n  <strong>Kagglers from India!<\/strong> There is huge opportunities to start your career as Business Analyst.<\/div>\n","ed52e306":"Most countries follows the same proportion of Kagglers as United States, with proportionally more data scientists than other professions. And it does make sense because Kaggle is focused on Data Science. But we do have some outliers. Starting with China, where software engineers and Data Engineers are massively present in Kaggle. **Are they trying to learn data science and change their careers? Or is it just a knowledge they want to add up to their current roles?**","ae421aac":"# Data Preparation\nAll data preparation is hidden for better presentation, but you can unhide it with the buttons bellow, or fork the notebook. There are lots of comments there to make it easier for you to understand what was happening!\n\n### Kaggle Cleaning","8163eed7":"Look at that! Salaries in Brazil are looking great for Data Engineering! Not so easy to get a DE job though (remember that Software Engineers are in much higher demand). In India, you'll better paid as Data Scientist. If you want to earn even more, then consider moving to another country.","94cb3229":"<div class=\"alert alert-warning\"><b>Kagglers from academia!<\/b> Again, working with relational databases should be done more frequently if you wish to be prepared for the marketplace<\/div>","3e06c165":"We did expect a increase in salaries with the increase in experience, and there it is! However do you see that people who don't code at all earn a little bit more than those who are starting to code? This is probably due to managers sitting there on the first group. Once you get some momentum coding, your salary will consistently increase. \n\nCan we test this hypothesis that managers (without coding experience) are driving increase in the salaries? Well... kind of... We expect managers to earn more and also to be... older, right? Let's see if that is true.","e18d295f":"# How many programming languages should you learn?","8d458697":"The average salary usually increases with the company size. Data Scientists and Statisticians\/Research Scientists see the biggest difference in their payslips when moving from a startup to a big corp. Business Analysts can't expect to much increase in salary just by moving to a bigger company.\n\n<div class=\"alert alert-warning\"><b>Salary isn't everything.<\/b> Consider the pros and cons before going after jobs in large corporations.<\/div>\n<br>\n![gif career choice](https:\/\/media.giphy.com\/media\/gfV5GoEAaHwnC\/giphy.gif)","1f43802a":"# How does company size impact salaries?","dd79c74a":"Looking at Glassdoor jobs listings we see that China has much more jobs in Software Engineering than in Data Science. \n\n<div class=\"alert alert-warning\">\n \u00a0<strong>Warning!<\/strong> If you live and China, are a software engineer and are thinking about migrating to Data Science, then reconsider that. You'll likely have a much harder time finding a job in this new career.<\/div>\n\n<div class=\"alert alert-success\">\n  <strong>USA wants data analysts!<\/strong> If you live in the United States and want to be a Data Scientist in a few years, then consider getting a job as data analyst. It will probably be much easier as there is proportionally more jobs in that area than in DS.  <\/div>","ae94df42":"# Is there any job out there?\n\n![gif comfortably numb](https:\/\/media.giphy.com\/media\/T0KfWpSApxhQs\/source.gif)\n\n> Hello? Hello? Hello? <br>\n> Is there any job out there?<br>\n> Just nod if you can hire me.<br>\n> Is there anyone at the HR?<br>\n>\n> Come on now...<br> \n> I hear you're feeling down.<br> \n> Well I can ease your pain.<br> \n> Get you on your feet again.<br> \n> Relax.<br>\n>\n> *Adapted from Comfortably Numb by Pink Floyd*\n\n\n-----------------\n## A comparison between Kaggle Survey and Glassdoor Jobs Listings\n\nOn last year's survey I did an analysis to understand [What Makes a Kaggler Valuable](https:\/\/www.kaggle.com\/andresionek\/what-makes-a-kaggler-valuable), the idea was basically to identify what makes someone earn more than USD 100k per year when working in data related jobs. One year after I have moved from Brazil to United Kingdom, from Data Science to Data Engineering, and from earning around USD 14k per year to more than halfway to the USD 100k\/year.\n\n**For this year survey, I thought it would be nice to compare Kagglers skills to job listings around the world. To achieve that I have scraped Glassdoor listings looking for the search terms from Question 5 (job title) of this year's survey. Then I compared the results from both survey respondents and Glassdoor Listings. Hope you find it informative and useful to plan your career!**\n\n-----","31eaf4bb":"# Who should learn and use Cloud Computing Platforms?","100cf8e6":"# Comparing Kaggle vs Glassdoor for different countries","fc43d4cd":"### Glassdoor Cleaning","7d683dbe":"We see that Brazil and India have very similar proportions of Kagglers across all job titles. However Brazil has a higher proportion of Statistician and Research Scientists, it might be an indication that in Brazil there are more people doing DS in the academia than in India.","f0a590cb":"# USA vs China","ab5a3ecf":"In the chart above you can see where are the opportunities depending on where you live. More jobs listings proportionally means more chances of getting a job in that area. More Kagglers in one job title, probably means more competition for you when looking for a job.","07b3d25c":"In Europe the jobs listings are almost equalised (almost same proportion for all titles) which means it won't make much difference, in terms of job offerings, if you wanna be a Data Scientist or a Business Analyst. But in terms of competition, there will be probably more candidates per listing for data science if we extrapolate the Kaggle survey to the real world.\n\n<div class=\"alert alert-success\">\n  <strong>Software Engineers from Europe!<\/strong> Might be easier for you to find a job in The Netherlands!<\/div>\n  ","76b9db27":"# Europe","6782e178":"# Python, R and SQL - Popularity in Kaggle and in the job market","6ef17627":"# Databases","f110915d":"# Appendix\n-----------\n## Getting Job Listings from Glassdoor\n![Job Listings Dataset](https:\/\/storage.googleapis.com\/kaggle-datasets-images\/418397\/799497\/8f5cf74367e40c83b8828f9950a803e8\/dataset-cover.jpg?t=2019-11-17-15-54-20)\n\nI created a simple script to scrap [Glassdoor](https:\/\/www.glassdoor.com\/) listings. The web scraping was done on the 10th of December 2019, and I was able to retrieve more than 165k job listings. More details into that process are available on this [GitHub Repository](https:\/\/github.com\/andresionek91\/Job-Listing-Scraper).\n\nThe data was processed and is publicly available as a [Kaggle Dataset](https:\/\/www.kaggle.com\/andresionek\/data-jobs-listings-glassdoor\/)! The data extration was limited to the 30th page of each search term per country due to limitations of Glassdoor website. Please check it out and feel free to work on that data as well!\n\n## Public Dataset of Kaggle Survey 2019\nI could do this study only because Kaggle has released the data from its third annual [Machine Learning and Data Science Survey](https:\/\/www.kaggle.com\/c\/kaggle-survey-2019). The survey was live for three weeks in October 2019 and got a total of 19,717 responses. The results include raw numbers about who is working with data, what\u2019s happening with machine learning in different industries, and the best ways for new data scientists to break into the field.\n\n## Considerations\n* We are assuming that respondents were honest and sincere in their answers.\n* This may not represent the whole universe of data professionals (it only has answers from Kaggle users), but it's a good proxy.","6f691f05":"# Programming Languages: Kaggle vs Glassdoor","feb36f51":"We see that Kagglers are well prepared when it comes to Python usage! Although many respondents use Bash and R, job descriptions don't mention those languages frequently. SQL is not frequently required for Business Analysts, but knowing it (as Kagglers do) will put you one step ahead. In general Software Engineers and Data Engineers from Kaggle might find a hard time to find jobs, as Java is frequently required and many of them don't posses that skill.\n\n\n<div class=\"alert alert-success\"><b>Learning Java<\/b> will help you to move into Software Engineering or Data Engineering<\/strong> <\/div>","547b6ffa":"It is reasonable to infer that those who have no coding experience are earning more than those with little experience because they are in managerial positions. Except for Data Engineering, where we have younger people, without coding experience, earning more than those who are starting to code.","0763344a":"I can confirm that this is true! Since I migrated from Data Science to Data Engineering I started to work heavily with AWS products. Cloud computing platforms have a lot of managed services for the whole data pipeline. Knowing where to apply (and how to use) them is of prime importance for any data engineer.\n\n<div class=\"alert alert-warning\"><b>Be aware!<\/b> To work in Data and Software Engineering you'll need a lot of knowledge about cloud computing platforms!<\/div>","647cb6f5":"# Brazil vs India","327a491f":"# Conclusion\n\nIn this notebook we did a comparison analysis between Glassdoor Listings and Kaggle 2019 Survey answers. To start it we had to build a new dataset, because we didn't have job listngs database available. \n\n### Scraping\nTo acomplish that a scraper script was built and ran to get around 160k jobs listings from [Glassdoor](https:\/\/www.glassdoor.com\/). Scraped data was published to [Kaggle Datasets](https:\/\/www.kaggle.com\/andresionek\/data-jobs-listings-glassdoor) and made public for everyone. The script was also published on [GitHub](https:\/\/github.com\/andresionek91\/Job-Listing-Scraper).\n\n### Analysis\nWe compared the relative percentage of job listings around the world for both Kaggle and Glassdoor. It was possible to see that some countries have more demand for Software Engineers (such as China and Brazil), while Kaggle respondents are heavily focused on Data Science. \n\nWe also observed that years of experience coding help to increase salary, and that people without experience in programming usually earn a little bit more than those who are starting. But learning to code pays off in the long term. We could observe as well that bigger companies pay higher salaries on average, and that Data Scientists and Statisticians\/Research Scientists are the ones who have higher increases in salary when moving from small to a large companies.\n\nPython and SQL are very popular in the Kaggle community and also in the job market. However R is seldom mentioned on job descriptions, despite its popularity within Kaggle. Java is mostly mentioned in job descriptions for Data Engineers and Software Engineers, but there are much less Kagglers who use Java on a daily basis. Also, learning 3 programming languages should be the target for everyone, because learning more than that won't impact salaries.\n\nKagglers are doing very well when it comes to Cloud Platform usage. The market requires it much more from Data Engineers and Software Engineers, but we see that Kagglers with all job titles are used to Cloud, except by Statisticians and Research Scientists. The same applies for knowledge of database engines.\n\n### And finally... Is there any job out there?\n\n<div class=\"alert alert-success\"><b>Yes there is!<\/b> <br><br>- Maybe you are just looking in the wrong place or don't have the requirements for a given job title. <br>- Try to match your skills to the correct position. <br>- Look for opportunities in other areas as well, there is a lot of mismatch within job offers and professionals available. <br>- Perhaps your next job is not as Data Scientist, but as Data Analyst, Data Engineer or even Software developer.<\/div>","eea358c4":"# Proportion of Kagglers for each Job Title\n\nFirst let's create a metric to enable us compare those two different datasets and also different countries. The following radar charts express the number of Kagglers and job listings proportionally to the total of each country. See the example below for better understanding.\n\n#### Example Country\nData Scientists = 30 answers (or job listings if Glassdoor)<br>\nDevelopers = 90 answers<br> \nTotal = 120 answers<br>\n\n**We will be plotting:**<br>\nData Scientists = 25%<br>\nDevelopers = 75%<br>\n\n<div class=\"alert alert-warning\">\n  <strong>Warning!<\/strong> Having a higher value doesn't mean a greater absolute value of answers or jobs listings. But a higher proportion when compared to the rest in the same country.<\/div>\n","3a645ab1":"Although they don't appear frequently in the job descriptions, we see that listings for Data Engineers and Software Engineers often require knowledge of database engines such as PostgreSQL, MySQL and SQL Server. Data Analysts with SQL Server Knowledge might benefit from it when looking for a job.","5a95e848":"## Comparing skills for each Job Title\n\nThe same way we did before, let's create a metric to compare different skills for each Job Title. The following radar charts express either:\n* The proportion of Kagglers that have declared to use a specific language or technology when compared to the total number of respondents for each job title.\n* The proportion of job listings that mention a specific technology or language compared to the total universe of listings for each job title.\n\nSee the example bellow for better understanding.\n\n#### Example Language 1 \nData Scientists = 70 answers (or mentions in job listings if Glassdoor)<br>\nDevelopers = 30 answers<br> \n\nCount of Data Scientists =  180<br>\nCount of Developers = 60<br>\n\n**We will be plotting:**<br>\nData Scientists = 39%<br>\nDevelopers = 50%<br>\n\n<div class=\"alert alert-warning\">\n  <strong>Warning!<\/strong> Having a higher value means that a language\/technology is more popular for a specific job title.<\/div>\n","26e1d976":"We see a lot of Kagglers Data Scientists who are used to working with Cloud Platforms! This is good news for productionizing Machine Learning models, as it is much easier go live with a model if data scientists are not doing everything in their local environments.","02d130ea":"The Netherlands have more professionals interested in Kaggle, consequently in Data Science. For other countries we see a lack of Data Engineers and Business Analysts. **Are they happy in their current positions?**"}}