{"cell_type":{"dd95525d":"code","b88f8161":"code","39940ab2":"markdown"},"source":{"dd95525d":"import numpy as np\nimport math\nimport collections\n\n'''\n\uc9c0\uac8c\ucc28 \uc218\ub7c9 \n\ucc3d\uace0\naisle :  \ud63c\uc7a1\uc774 \ubc1c\uc0dd\ud558\ub294 \uacf3\uc744 \ubcf5\ub3c4 \ubd80\ubd84\uc73c\ub85c \ud55c\uc815, \uc9c0\uac8c\ucc28 \uc791\uc5c5\uc2dc\uac04 \ub3d9\uc548 \uc810\uc720\ub418\ub294 \uac83\uc73c\ub85c \uac00\uc815 \ndock: dock\uc774 \ube44\uc5b4\uc788\uac70\ub098, \uc0ac\uc6a9\uc911\uc778 truckNo \uac00 \uc788\ub294 order \ub9cc \uc9c0\uac8c\ucc28\uc5d0 \ud560\ub2f9 \uac00\ub2a5 \n\nmonte carlo tree search\nhttps:\/\/mongxmongx2.tistory.com\/17\n\n'''\n\n#np.random.seed(1)\n\ndef distance(start_pos, target_pos):\n    dist = math.fabs(start_pos.x - target_pos.x)\n    dist += math.fabs(start_pos.y - target_pos.y)\n\n    return dist\n\n\n\"\"\"Pos \ucc3d\uace0\ub0b4 \uc88c\ud45c\ub97c \ud45c\uc2dc\ud558\uae30 \uc704\ud568 \n\"\"\"\n\n\nclass Pos:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z  # \uc120\ubc18\uc758 \uce35\uc218 (\uc791\uc5c5\uc2dc\uac04 \uacc4\uc0b0 \uc2dc \ud65c\uc6a9)\n\n    def __str__(self):\n        return '(' + str(self.x) + ',' + str(self.y) + ',' + str(self.z) + ')'\n\n\n\"\"\"Order  \ucc98\ub9ac\ud574\uc57c \ud558\ub294 \uc8fc\ubb38\n turck_no : \ud574\ub2f9 \uc8fc\ubb38\uc740 \ub3d9\uc77c truck_no\uac00 \uc788\ub294 Dock \uc73c\ub85c \uc774\ub3d9\ud574\uc57c \ud568  \n\"\"\"\n\n\nclass Order:\n    def __init__(self, no, pos, aisle, truck_no):\n        self.no = no\n        self.pos = pos\n        self.aisle = aisle\n        self.truck_no = truck_no\n        self.done = False\n        self.finish_time = -1\n\n    def __str__(self):\n        return str(self.done) + ':Order ' + str(self.no) + ':pos=' + str(self.pos) + ':aisle=' + str(\n            self.aisle) + ':Truck=' + str(self.truck_no)\n\n\nclass Forklift:\n    def __init__(self, no, time_clock, pos):\n        self.no = no\n        self.time_clock = time_clock\n        self.pos = pos\n        self.order = None\n        self.dest_dock = None   # Dock \ubc88\ud638 \uc0ac\uc6a9\n        self.work_time = 0      #\uc21c\uc218 \uc791\uc5c5 \uc2dc\uac04\n\n        self.to_aisle_time = 0   #aisle \uae4c\uc9c0 \uac00\ub294 \uc2dc\uac04\n        self.aisle_to_dock_time = 0  #aisle\uc5d0\uc11c dock\uae4c\uc9c0 \uac00\ub294 \uc2dc\uac04\n\n        self.move_in_aisle_time = 0   #aisle \uc785\uad6c\uc5d0\uc11c \ub4e4\uc5b4\uac00\ub294 \uc2dc\uac04\n        self.picking_time = 0         #\uc120\ubc18\uc5d0\uc11c \uc0c1\ud488 \uaebc\ub0b4\ub294 \uc2dc\uac04\n        self.move_out_aisle_time = 0  #aisle \uc785\uad6c\ub85c \ub098\uc624\ub294 \uc2dc\uac04\n\n        self.start_time_clock = 0\n        self.finish_time_clock = 0    #\uc9c0\uac8c\ucc28\uc758 \uc791\uc5c5 \uc885\ub8cc\uc2dc\uac04\n        self.release_aisle_time_clock = 0   #\uc9c0\uac8c\ucc28\uac00 \uacf5\uc720\uc790\uc6d0(Aisle)\uc744 \ud574\uc81c\ud558\ub294 \uc2dc\uac04\n\n\n    def __str__(self):\n        return 'Forklift=' + str(self.no) + ':pos=' + str(self.pos) + ':dest_dock' + str(self.dest_dock)  + ':order=' + str(self.order.no)\n\n    def allocate_order(self, order, dest_dock):\n        # order \ud560\ub2f9 \uc2dc, \uc885\ub8cc\uc2dc\uac04 \uacc4\uc0b0\n\n        self.order = order\n        self.dest_dock = dest_dock  # \ubaa9\uc801\uc9c0 \uc9c0\uc815\n\n        self.start_time_clock = self.time_clock.time_clock\n\n        move_in_time = distance(self.pos, self.order.aisle.pos)  # aisle \uc785\uad6c\uae4c\uc9c0\ub9cc\n\n        picking_in_out_time = (distance(self.order.aisle.pos, self.order.pos) ) * 2\n\n        picking_time = self.order.pos.z * 5  # TODO   \uac01 \uce35\ubcc4\ub85c \uc2dc\uac04\uc744 5\uc529 \ucd94\uac00\uc18c\uc694 \uac00\uc815, \uc2e4\uc81c \uc0c1\ud669\uc5d0 \ub9de\uac8c \uc218\uc815 \ud544\uc694\n        move_out_time = distance(self.order.aisle.pos, self.dest_dock.pos)  # aisle\uc785\uad6c\uc5d0\uc11c Dock \uc704\uce58\uae4c\uc9c0\n\n        self.work_time = move_in_time + picking_in_out_time + picking_time + move_out_time\n\n        aisle_arrival_time_clock = self.time_clock.time_clock + move_in_time\n\n        base_time_clock = order.aisle.get_available_time_clock(aisle_arrival_time_clock)  # aisle\ucabd\uc5d0 \uac00\uc6a9\ud558\uac8c \ub418\ub294 \uc2dc\uac04 \ud655\uc778\n\n        self.release_aisle_time_clock = base_time_clock + picking_in_out_time + picking_time\n        self.finish_time_clock = self.release_aisle_time_clock + move_out_time   # \ucd5c\uc885 \uc885\ub8cc\uc2dc\uac04 \uc124\uc815\ub428\n        self.order.aisle.append(self)  # \ud574\ub2f9 Aisle \uc5d0 \ub300\uae30 \ucd94\uac00\n\n        print('forklift ', self.no, ': order=', self.order.no, ',finish_time_clock=', self.finish_time_clock, ',release_aisle_time_clock=', self.release_aisle_time_clock,  ',start_time_clock=', self.start_time_clock,\n              ',move_in_time=', move_in_time , ',picking_in_out_time=', picking_in_out_time , ',picking_time=', picking_time , ',move_out_time=', move_out_time)\n\n\n    def get_finish_time(self):\n        return self.finish_time\n\n    def set_clear(self):\n        self.order = None\n        self.dest_dock = None\n        self.work_time = 0\n        self.finish_time = 0\n\n\nclass Dock:\n    def __init__(self, no, pos):\n        self.no = no\n        self.truck_no = -1\n        self.pos = pos\n\n    def __str__(self):\n        return 'Dock=' + str(self.no) + ':pos=' + str(pos) + ':truck_no=' + str(self.truck_no)\n\n\nclass SimulationTimeClock:\n    def __init__(self):\n        self.time_clock = 0\n\n    def __str__(self):\n        return 'TimeClock=' + str(self.time_clock)\n\n    def increase(self):\n        self.time_clock += 1\n\n    def get_time_clock(self):\n        return self.time_clock\n\n\nclass Aisle:\n    def __init__(self, no, time_clock, start_pos, length=5):\n        self.no = no\n        self.time_clock = time_clock\n        self.pos = start_pos\n        self.queue = collections.deque()\n        self.length = length\n\n    def __str__(self):\n        return 'Aisle=' + str(self.no) + ':' + str(self.pos)\n\n    def get_available_time_clock(self, arrival_time_clock):\n        size = len(self.queue)\n        available_time_clock = arrival_time_clock\n\n        if size > 0:  # \ub300\uae30 \uc9c0\uac8c\ucc28\uac00\n            last_forklift = self.queue[size - 1]  # \ub9c8\uc9c0\ub9c9 \uc9c0\uac8c\ucc28\n            if arrival_time_clock < last_forklift.release_aisle_time_clock: #\ub354 \uc77c\ucc0d \ub3c4\ucc29\ud55c \uc0c1\ud669\uc774\uba74, \uba3c\uc800 \uc788\ub294 \uc9c0\uac8c\ucc28 \uc2dc\uac04\ubd80\ud130 \uc791\uc5c5 \uac00\ub2a5\n                available_time_clock = last_forklift.release_aisle_time_clock\n\n        return available_time_clock\n\n    def append(self, forklift):\n        self.queue.append(forklift)\n\n    def pop(self):\n        forklift = self.queue.popleft()\n        return forklift\n\n    def remove_waiting_forklift(self, time_clock):\n\n        while len(self.queue) > 0:\n            forklift = self.queue[0]\n            if forklift.release_aisle_time_clock <= time_clock :\n                self.pop()\n                print('Aisel=', self.no, ':Leave aisle time_clock=', time_clock, ',forklift=', forklift.no )\n            else:\n                break\n\n\nclass State:\n    def __init__(self, forklifts, orders):\n        # \ud604\uc7ac \uc0c1\ud0dc\ub97c \uc5b4\ub5bb\uac8c \ud45c\ud55c\ud560\uc9c0 \uace0\ubbfc \uc911....\n        self.orders = orders\n        self.forklifts = forklifts\n        self.time_hold = False\n\n    def __str__(self):\n        return 'State: orders=' + str(len(self.orders))\n\n\nclass Action:\n    def __init__(self):\n        self.forklift = None\n        self.order = None\n\n    def __init__(self, forklift, order):\n        self.forklift = forklift\n        self.order = order\n\n    def __str__(self):\n        return 'Action: forklift=' + str(super.forklift) + ':order=' + str(super.order)\n\n\nclass Warehouse:\n    def __init__(self, time_clock, size, docks, aisles, forklifts):\n        self.time_clock = time_clock\n        self.size = size  # (x,y)\n        self.orders = []  # \ucc98\ub9ac\ud574\uc57c\ud560 \uc8fc\ubb38\ub4e4\n        self.available_orders = []\n        self.docks = docks  # dock\uc758 \uc704\uce58\ub4e4\n        self.aisles = aisles\n        self.forklifts = forklifts\n        self.finish_time_clock = -1\n\n    def set_orders(self, orders):\n        self.orders = orders\n        self.available_orders = orders.copy()\n\n    def remove_available_order(self, order):\n        print('- pop order from available order:', order)\n        self.available_orders.remove(order)\n\n    def get_dest_dock(self, truck_no):\n        dest_dock = None\n        # \ub3d9\uc77c truck_no\uac00 \ubc30\uc815\ub41c dock \ucc3e\uae30\n        for dock in self.docks:\n            if dock.truck_no == truck_no:\n                dest_dock = dock\n                break\n            if dock.truck_no < 0:\n                dest_dock = dock\n\n        #print('dest dock:', dest_dock)\n        return dest_dock\n\n    def increase_time(self):\n        time_hold_flag = False\n        #forklift \uc5ec\ubd84 \ud655\uc778, order \uc5ec\uc720\ud655\uc778\n        for f in self.forklifts:\n            if f.order == None and len(self.available_orders) > 0:\n                time_hold_flag = True\n\n        if not time_hold_flag :\n            self.time_clock.increase()  # time \uc99d\uac00\n\n\n    def is_done(self):\n        done = False\n        # \ub0a8\uc740 \uc8fc\ubb38\uc774 \uc5c6\uace0 # \uc9c0\uac8c\ucc28\uc758 \ub9c8\uc9c0\ub9c9 \uc2dc\uac04\uc774 \ub3d9\uc77c\ud560\ub54c\n        if len(self.available_orders) == 0 and self.finish_time_clock >= self.time_clock.time_clock:\n            done = True\n\n        return done\n\n\n    def step(self, action):\n\n        reward = -1\n        done = False\n        info = []\n\n        #aisle \uc5d0\uc11c \uc644\ub8cc\ub41c forklift\ub294 \uc81c\uac70\n        for aisle in self.aisles:\n            aisle.remove_waiting_forklift(self.time_clock.time_clock)\n\n\n        # forklifts \ubaa8\ub450 \uccb4\ud06c\ud558\uace0, \uc885\ub8cc\ub418\ub294 \uc791\uc5c5\ub3c4 \ud655\uc778\n        for f in self.forklifts:\n            # forklift\uc758 \uc885\ub8cc\uc2dc\uac04\uc774 \ud604\uc7ac \uc2dc\uac04 \uc774\ud558\uc774\uba74 \uc885\ub8cc\ucc98\ub9ac\n            if f.order != None and f.finish_time_clock <= self.time_clock.time_clock:\n                print('* Complete work: Forklift',f,':order=',f.order.no)\n                f.order.done = True  # \uc791\uc5c5\uc644\ub8cc \ud45c\uc2dc\n                f.order = None  # \uc791\uc5c5\ud560\ub2f9 \ud574\uc81c\n                f.dest_dock = None\n\n        forklift = action.forklift\n        order = action.order\n\n        if forklift != None and order != None:\n            # dest_dock \ucc3e\uae30 (truck_no\uac00 \ub3d9\uc77c\ud558\uac70\ub098, \ube44\uc5b4\uc788\ub294 dock\uc744 \ud560\ub2f9\uac00\ub2a5, dock\uc740 \uc9c0\uac8c\ucc28\uac00 \ub193\uc740\ub4a4... \uc77c\uc815\uc2dc\uac04 \uc774\ud6c4 \ud574\uc81c\uac00\ub2a5 )\n            # \ud2b8\ub7ed\ubc30\uc815\uacfc \ud574\uc81c\ub294 \ub098\uc911\uc5d0 \ub354 \uace0\ub824\ud574\uc57c \ud568\n            dest_dock = self.get_dest_dock(order.truck_no)  #TODO dock\uc5d0 \ud2b8\ub7ed\uc744 \ud560\ub2f9\ud558\ub294 \uae30\uc900 \ud544\uc694 (\uc8fc\ubb38\uc744 truck \ubcc4\ub85c \ubaa8\uc544\uc11c \ubc30\uc815\ud558\ub294 \uac83 \uac19\uc740 \uc804\ub7b5)\n\n            dest_dock.truck_no = -1 #TODO \uc77c\ub2e8 \ubc14\ub85c \ud2b8\ub7ed\uc740 \ud574\uc81c (\ub098\uc911\uc5d0 \ub3c5 \ubc30\uc815\ub85c\uc9c1 \ubcf4\uc644\ud544\uc694\ud568)\n\n            if dest_dock != None:\n                self.remove_available_order(order)  # \uac00\uc6a9 order\uc5d0\uc11c \uc81c\uac70\n                forklift.dest_dock = dest_dock\n                forklift.pos = dest_dock.pos\n                forklift.allocate_order(order, dest_dock)\n                print('+ order allocation:f=', forklift, ':order=', order.no , ':dest_dock=', dest_dock.no )\n                print('-' * 40 )\n\n                # \ucc3d\uace0\uc758 \uc885\ub8cc\uc2dc\uac04\uc744 \ucd5c\uc885 \uc9c0\uac8c\ucc28 \uc885\ub8cc\uc2dc\uac04 \uae30\uc900\uc73c\ub85c \uc124\uc815 (\ubaa8\ub4e0 \uac00\uc6a9\uc8fc\ubb38\uc774 \ucc98\ub9ac\ub41c \uc774\ud6c4 \ud655\uc778\ud568)\n                if forklift.finish_time_clock > self.finish_time_clock:\n                    self.finish_time_clock = forklift.finish_time_clock\n\n        # \uc0c1\ud0dc: \ub0a8\uc544\uc788\ub294 order, forklift, dock \uc0c1\ud0dc\n        state = State(self.forklifts, self.available_orders)\n\n        # reawrd: \uc2dc\uac04\uc744 cost\ub85c \uac04\uc8fc\ud558\uace0 order\ub97c \ucc98\ub9ac\ud558\ub294 \ucd1d \uc2dc\uac04\uc744 \uc904\uc774\ub294 \uac83\uc744 \ubaa9\ud45c\ub85c \ud568 (\ud63c\uc7a1\ubc1c\uc0dd\uc2dc, \ub300\uae30\uc2dc\uac04\uc73c\ub85c \uc2dc\uac04 \uc99d\uac00\ub428)\n        reward = -1\n\n        self.increase_time()\n        done = self.is_done()\n\n\n        return (state, reward, done, info)\n\n\ndef get_action(warehouse):\n    orders = warehouse.available_orders\n\n    forklift = None\n    order = None\n\n    if len(orders) > 0:\n        for f in warehouse.forklifts:\n            if f.order == None:  # \uac00\uc6a9\ud55c \uc9c0\uac8c\ucc28\uac00 \uc788\ub294 \uacbd\uc6b0\n                forklift = f\n                order = orders[0]\n                #order = np.random.choice(orders)\n                break\n\n\n    return Action(forklift, order)\n\n\n########################################################################################################################\n\n\ntime_clock = SimulationTimeClock() # \ud574\ub2f9 \ucc3d\uace0\ub0b4\uc5d0\uc11c\ub294 \uacf5\uc720\ud574\uc57c\ud560 Time\n\nsize = (10,10) #\ucc3d\uace0 \uc0ac\uc774\uc988 (Grid \uad6c\uc870\uac00\uc815)\n\ndocks = [Dock(0, Pos(0,0,0)),\n         Dock(1,Pos(9,0,0))  ]\n\naisles = [Aisle(0, time_clock, Pos(0,4,0), 5),\n          Aisle(1, time_clock, Pos(5,4,0), 5),\n          Aisle(2, time_clock, Pos(9,4,0), 5)\n          ]\n\nforklifts = [Forklift(0,time_clock, Pos(9,0,0)),\n             Forklift(1, time_clock, Pos(9,0,0)) ]\n\norders = []\norder_no = 0\n\n#order \uc0dd\uc131\nfor i in range(len(aisles)):# i = aisle \ubc88\ud638\n    for j in range(2):\n        #no, pos, aisle_no, truck_no\n        pos = Pos(aisles[i].pos.x, aisles[i].pos.y + 1 + j, 1) # x, y, z\n        truck_no = np.random.randint(0,2)\n        aisle_no = i # np.random.randint(0,len(aisles))\n        order = Order(order_no, pos, aisles[aisle_no], truck_no) #i\ubc88 aisle\uc5d0 truck_no \uae30\uc900 order\n        order_no += 1\n        orders.append(order)\n        print('> Order create:', order)\n\n#time_clock, size, docks,  aisles, forklifts\nenv = Warehouse(time_clock, size, docks, aisles, forklifts)\nenv.set_orders(orders)\n\n\ndone = False\nstate = None\n\nwhile True:\n    action = get_action(env)\n    next_state, reward, done, info = env.step(action)  #state \uc5d0 \ud604\uc7ac forklifts \uc758 \uc0c1\ud0dc\ud544\n    state = next_state\n\n    if done :\n        break\n\nprint('[Result]')\nprint('Finish time=', env.finish_time_clock,':orders=',len(env.available_orders))\nprint('Simulation is finished.' )\n\n#TODO \ud14c\uc2a4\ud2b8 \ucf54\ub4dc \ucd94\uac00 \ud544\uc694\ud568 (\uc18c\uc2a4 \ubcc0\uacbd \uc2dc, \uc810\uac80\ud560 \uc218 \uc788\ub294 \ucf54\ub4dc)","b88f8161":"1+1","39940ab2":"# **\ubb3c\ub958AI \uc5f0\uad6c\ud68c**\n\n: \ucc3d\uace0\ub0b4 \uc9c0\uac8c\ucc28 \ud63c\uc7a1\ub3c4 \ucd5c\uc18c\ud654 Picking \uc791\uc5c5\uc9c0\uc2dc "}}