{"cell_type":{"b056ba00":"code","be370528":"code","3eaae949":"code","33b7fa26":"code","097dfb4d":"code","f80292e9":"code","ede573ca":"code","ca081836":"code","14b06662":"code","264d79e2":"code","d1a7acf1":"code","96ea21a1":"code","b66fe5ed":"code","6b585216":"code","5cc5daf1":"code","2078813a":"code","de180ea8":"code","45aed92b":"code","725e90a6":"code","bd304e17":"code","e944a91e":"code","63a678b7":"code","6998ba25":"code","80c3385b":"code","495dcb9e":"code","5c3d43de":"markdown","f8e57748":"markdown","e86a8de0":"markdown","e39fe42a":"markdown"},"source":{"b056ba00":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport cv2\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tqdm import tqdm\nimport os\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.applications import EfficientNetB0\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, TensorBoard, ModelCheckpoint\nfrom sklearn.metrics import classification_report,confusion_matrix\nimport ipywidgets as widgets\nimport io\nfrom PIL import Image\nfrom IPython.display import display,clear_output\nfrom warnings import filterwarnings\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","be370528":"colors_dark = [\"#1F1F1F\", \"#313131\", '#636363', '#AEAEAE', '#DADADA']\ncolors_red = [\"#331313\", \"#582626\", '#9E1717', '#D35151', '#E9B4B4']\ncolors_green = ['#01411C','#4B6F44','#4F7942','#74C365','#D0F0C0']\n\nsns.palplot(colors_dark)\nsns.palplot(colors_green)\nsns.palplot(colors_red)","3eaae949":"labels = ['glioma_tumor','no_tumor','meningioma_tumor','pituitary_tumor']","33b7fa26":"labels = ['glioma_tumor','no_tumor','meningioma_tumor','pituitary_tumor']","097dfb4d":"X_train = []\ny_train = []\nimage_size = 128\nfor i in labels:\n    folderPath = os.path.join('..\/input\/brain-tumor-classification-mri','Training',i)\n    for j in tqdm(os.listdir(folderPath)):\n        img = cv2.imread(os.path.join(folderPath,j))\n        img = cv2.resize(img,(image_size, image_size))\n        X_train.append(img)\n        y_train.append(i)\n        \nfor i in labels:\n    folderPath = os.path.join('..\/input\/brain-tumor-classification-mri','Testing',i)\n    for j in tqdm(os.listdir(folderPath)):\n        img = cv2.imread(os.path.join(folderPath,j))\n        img = cv2.resize(img,(image_size,image_size))\n        X_train.append(img)\n        y_train.append(i)\n        \nX_train = np.array(X_train)\ny_train = np.array(y_train)","f80292e9":"k=0\nfig, ax = plt.subplots(1,4,figsize=(20,20))\nfig.text(s='Sample Image From Each Label',size=18,fontweight='bold',\n             fontname='monospace',color=colors_dark[1],y=0.62,x=0.4,alpha=0.8)\nfor i in labels:\n    j=0\n    while True :\n        if y_train[j]==i:\n            ax[k].imshow(X_train[j])\n            ax[k].set_title(y_train[j])\n            ax[k].axis('off')\n            k+=1\n            break\n        j+=1","ede573ca":"X_train, y_train = shuffle(X_train,y_train, random_state=101)","ca081836":"X_train.shape","14b06662":"datagen = ImageDataGenerator(\n    rotation_range=30,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True)\n\ndatagen.fit(X_train)\nX_train.shape","264d79e2":"X_train,X_test,y_train,y_test = train_test_split(X_train,y_train, test_size=0.1,random_state=101)","d1a7acf1":"y_train_new = []\nfor i in y_train:\n    y_train_new.append(labels.index(i))\ny_train = y_train_new\ny_train = tf.keras.utils.to_categorical(y_train)\n\n\ny_test_new = []\nfor i in y_test:\n    y_test_new.append(labels.index(i))\ny_test = y_test_new\ny_test = tf.keras.utils.to_categorical(y_test)","96ea21a1":"\nfrom tensorflow.keras.applications import EfficientNetB0\neffnet = EfficientNetB0(weights='imagenet',include_top=False,input_shape=(image_size,image_size,3))","b66fe5ed":"model = effnet.output\nmodel = tf.keras.layers.GlobalAveragePooling2D()(model)\nmodel = tf.keras.layers.Dropout(rate=0.5)(model)\nmodel = tf.keras.layers.Dense(4,activation='softmax')(model)\nmodel = tf.keras.models.Model(inputs=effnet.input, outputs = model)","6b585216":"model.summary()","5cc5daf1":"model.compile(loss='categorical_crossentropy',optimizer = 'Adam', metrics= ['accuracy'])","2078813a":"tensorboard = TensorBoard(log_dir = 'logs')\ncheckpoint = ModelCheckpoint(\"resnet152v1.h5\",monitor=\"val_accuracy\",save_best_only=True,mode=\"auto\",verbose=1)\nreduce_lr = ReduceLROnPlateau(monitor = 'val_accuracy', factor = 0.4, patience = 2, min_delta = 0.001,\n                              mode='auto',verbose=1)","de180ea8":"history = model.fit(X_train,y_train,validation_split=0.1, epochs =25, verbose=1, batch_size=32,\n                   callbacks=[tensorboard,checkpoint,reduce_lr])","45aed92b":"filterwarnings('ignore')\n\nepochs = [i for i in range(25)]\nfig, ax = plt.subplots(1,2,figsize=(14,7))\ntrain_acc = history.history['accuracy']\ntrain_loss = history.history['loss']\nval_acc = history.history['val_accuracy']\nval_loss = history.history['val_loss']\n\nfig.text(s='Epochs vs. Training and Validation Accuracy\/Loss',size=18,fontweight='bold',\n             fontname='monospace',color=colors_dark[1],y=1,x=0.28,alpha=0.8)\n\nsns.despine()\nax[0].plot(epochs, train_acc, marker='o',markerfacecolor=colors_green[2],color=colors_green[3],\n           label = 'Training Accuracy')\nax[0].plot(epochs, val_acc, marker='o',markerfacecolor=colors_red[2],color=colors_red[3],\n           label = 'Validation Accuracy')\nax[0].legend(frameon=False)\nax[0].set_xlabel('Epochs')\nax[0].set_ylabel('Accuracy')\n\nsns.despine()\nax[1].plot(epochs, train_loss, marker='o',markerfacecolor=colors_green[2],color=colors_green[3],\n           label ='Training Loss')\nax[1].plot(epochs, val_loss, marker='o',markerfacecolor=colors_red[2],color=colors_red[3],\n           label = 'Validation Loss')\nax[1].legend(frameon=False)\nax[1].set_xlabel('Epochs')\nax[1].set_ylabel('Training & Validation Loss')\n\nfig.show()","725e90a6":"train_dir = \"..\/input\/brain-tumor-classification-mri\/Training\"\ntest_dir = \"..\/input\/brain-tumor-classification-mri\/Testing\"","bd304e17":"import tensorflow as tf\n\ntrain_data = tf.keras.preprocessing.image_dataset_from_directory(train_dir,\n                                                                 image_size=(128,128),\n                                                                 label_mode = \"categorical\",\n                                                                 batch_size = 32\n                                                                 )\ntest_data =tf.keras.preprocessing.image_dataset_from_directory(test_dir,\n                                                               image_size =(128,128),\n                                                               label_mode = \"categorical\",\n                                                               batch_size = 32\n                                                               )","e944a91e":"# tunning the model\neffnet.trainable = True\n\nfor layer in effnet.layers[:-1]:\n  effnet.trainable = False\n\nmodel.compile(\n    loss = tf.keras.losses.categorical_crossentropy,\n    optimizer = tf.keras.optimizers.Adam(learning_rate= 0.001),\n    metrics = [\"accuracy\"]\n)","63a678b7":"model.summary()","6998ba25":"# fitting data to the tuned model\n\nh_t=model.fit(train_data,\n          epochs = 10,\n          steps_per_epoch = len(train_data),\n          validation_data = test_data,\n          validation_steps = len(test_data)\n          )\n","80c3385b":"\n# evaluatinn the model\nmodel_evaluation = model.evaluate(test_data)","495dcb9e":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(h_t.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(h_t.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(h_t.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(h_t.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","5c3d43de":"# Training The Model","f8e57748":"# **Data Preperation**","e86a8de0":"# Transfer Learning","e39fe42a":"# Tunning the model"}}