{"cell_type":{"74a153b6":"code","05938253":"code","acd35bb9":"code","2b775bf3":"code","bf11e54a":"code","afd0a92d":"code","32901fd5":"code","e35b1adf":"code","cdc788b4":"code","020652a1":"code","f0f750c3":"code","51e47dba":"code","91cb6d76":"code","7f589116":"code","17f1d551":"code","e87f3e7e":"code","f8bb5645":"code","7f62f7a2":"code","770d250f":"code","4f9306c0":"code","8bbd872a":"code","3b07fa2b":"code","d9cd9c9e":"code","474885e5":"code","73405295":"code","008db65e":"code","d5dff567":"code","d8e9fd82":"code","71a3bacc":"code","a0b7b045":"code","52622d27":"code","057026fd":"code","eada6682":"code","730131fe":"code","f9349675":"code","ef99070b":"code","885156af":"code","4718544e":"code","c8e6a2c2":"code","7b1ade72":"code","dbc7690c":"code","ee87e7ac":"code","bb9d80e7":"code","69160d1d":"code","41ad1a8b":"code","2d1ea094":"code","074cf0da":"code","039266db":"code","2dc813bd":"code","78ee218e":"code","a1d4722e":"code","9305e31c":"code","cb310321":"code","dded0540":"code","ecbdc39c":"code","f3b69ced":"code","39815518":"code","5b8322ba":"code","cc6807c0":"code","1c01746a":"code","4b61bb3f":"code","0621dc32":"code","6a47920c":"code","4801567d":"code","79acb8cf":"code","57297bd3":"code","dccaafd9":"code","e555fc1a":"code","c6074364":"code","235c932b":"code","86b8ac80":"code","52d5eabd":"code","d9d0c27d":"code","5201c86d":"code","e8ddd52a":"code","e17f683b":"code","15309908":"code","409523a5":"code","657685d2":"markdown","aefa9554":"markdown","7712599d":"markdown","6ca592d9":"markdown","def892d0":"markdown","18a5db8e":"markdown","772a34b4":"markdown","0c8f38f4":"markdown","b2abae62":"markdown","bca8dd4d":"markdown","41e4a65c":"markdown","c838e921":"markdown","35c81768":"markdown","71aa4984":"markdown","59b246d2":"markdown","e1850640":"markdown","5d012dab":"markdown","0eda5930":"markdown","c65a72e6":"markdown","70f55b10":"markdown","cc783e00":"markdown","06ad275e":"markdown","7cc28f0e":"markdown","3191326c":"markdown","e16062d0":"markdown","321f2731":"markdown","22302056":"markdown"},"source":{"74a153b6":"import pandas as pd\nimport numpy as np\nimport nltk","05938253":"# Question-1\n# Load the course data files for English into a dataframe using Pandas\ndataframe_english = pd.read_csv(r\"..\/input\/concretext-dataset\/CONcreTEXT_trial_EN.tsv\", sep = \"\\t\")\ndataframe_english","acd35bb9":"# Question-1\n# Load the course data files for Italian into a dataframe using Pandas\ndataframe_italian = pd.read_csv(r\"..\/input\/concretext-dataset\/CONcreTEXT_trial_IT.tsv\", sep = \"\\t\")\ndataframe_italian","2b775bf3":"# Removing Punctuations\nfrom nltk.tokenize import RegexpTokenizer\ntokenizer_pattern = RegexpTokenizer('\\w+')\ntokenizer_pattern","bf11e54a":"# For English Dataframe\n# Using NLTK libraries, strip the text of punctuation and lowercase the words, and obtain from the original text a list of words\ndataframe_english['TEXT'] = dataframe_english['TEXT'].apply(lambda x: tokenizer_pattern.tokenize(x.lower()))\ndataframe_english['TEXT'].head(15)","afd0a92d":"# For Italian Dataframe\n# Using NLTK libraries, strip the text of punctuation and lowercase the words, and obtain from the original text a list of words\ndataframe_italian['TEXT'] = dataframe_italian['TEXT'].apply(lambda x: tokenizer_pattern.tokenize(x.lower()))\ndataframe_italian['TEXT'].head(100)","32901fd5":"from sklearn.model_selection import train_test_split\n\n# splits the training and test data set in 80% : 20%\n\nenglish_train, english_test = train_test_split(dataframe_english['TEXT'], test_size=0.2, random_state=25)\n#X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2, stratify=y)\n\nprint(\"\\t English Language Train data: \\n\\n\", english_train)\nprint('\\n\\n')\nprint(\"\\t English Language Test data: \\n\\n\", english_test)","e35b1adf":"# Displaying the shape of the Train and Test sets in English Language\nprint (english_train.shape)\nprint (english_test.shape)","cdc788b4":"from sklearn.model_selection import train_test_split\n\n# splits the training and test data set in 80% : 20%\n\nitalian_train, italian_test = train_test_split(dataframe_italian['TEXT'], test_size=0.2, random_state=25)\n#X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2, stratify=y)\n\nprint(\"\\t Italian Language Train data: \\n\\n\", italian_train)\nprint('\\n\\n')\nprint(\"\\t Italian Language Test data: \\n\\n\", italian_test)","020652a1":"# Displaying the shape of the Train and Test sets in Italian Language\nprint (italian_train.shape)\nprint (italian_test.shape)","f0f750c3":"dataframe_english['TEXT']","51e47dba":"# Convert 100 lists of English words to Panda Series\nlist_to_series_for_english = pd.Series(dataframe_english['TEXT'])\nenglish_list_to_series = list_to_series_for_english.apply(pd.Series).stack().reset_index(drop = True)\nenglish_list_to_series","91cb6d76":"# Convert 100 lists of Italian words to Panda Series\nlist_to_series_for_italian = pd.Series(dataframe_italian['TEXT'])\nitalian_list_to_series = list_to_series_for_italian.apply(pd.Series).stack().reset_index(drop = True)\nitalian_list_to_series","7f589116":"# Joining the Series in English as String\nenglish_series_to_string = \" \".join(english_list_to_series)\nenglish_series_to_string","17f1d551":"# Joining the Series in Italian as String\nitalian_series_to_string = \" \".join(italian_list_to_series)\nitalian_series_to_string","e87f3e7e":"# General Ngram Function\ndef ngram_function(ngram, input_string):\n    ngra_eng = [input_string[i:i+ngram] for i in range(len(input_string)-ngram+1)]\n    return ngra_eng","f8bb5645":"# Unigram Output for English\nunigram_english = ngram_function(1, english_series_to_string)\nunigram_english","7f62f7a2":"# Length of Unigram English\nlen(unigram_english)","770d250f":"# Bigram Output for English\nbigram_english = ngram_function(2, english_series_to_string)\nbigram_english","4f9306c0":"len(bigram_english)","8bbd872a":"# Trigram Output for English\ntrigram_english = ngram_function(3, english_series_to_string)\ntrigram_english","3b07fa2b":"len(trigram_english)","d9cd9c9e":"# Unigram Output for Italian\nunigram_italian = ngram_function(1, italian_series_to_string)\nunigram_italian","474885e5":"# Length of Unigram Italian\nlen(unigram_italian)","73405295":"# Bigram Output for Italian\nbigram_italian = ngram_function(2, italian_series_to_string)\nbigram_italian","008db65e":"len(bigram_italian)","d5dff567":"# Trigram Output for Italian\ntrigram_italian = ngram_function(3, italian_series_to_string)\ntrigram_italian","d8e9fd82":"len(trigram_italian)","71a3bacc":"# Counting the number of occurences of each character in Unigram English Train Set using FreqDist\nfrom nltk.probability import FreqDist\nenglish_unigram_fdist = FreqDist(unigram_english)\nprint(english_unigram_fdist)\n\n# Counting the number of occurences of each character in Bigram English Train Set using FreqDist\nenglish_bigram_fdist = FreqDist(bigram_english)\nprint(english_bigram_fdist)\n\n# Counting the number of occurences of each character in Trigram English Train Set using FreqDist\nenglish_trigram_fdist = FreqDist(trigram_english)\nprint(english_trigram_fdist)","a0b7b045":"english_unigram_fdist","52622d27":"# Storing the frequent character in Unigram English Train Set in a variable\nenglish_unigram_fdist_common = english_unigram_fdist.most_common()\nprint(\"English Train Set Unigram \\n\")\nprint(english_unigram_fdist_common)\nprint(\"\\n\\n\")\n\n# Storing the frequent character in Bigram English Train Set in a variable\nenglish_bigram_fdist_common = english_bigram_fdist.most_common()\nprint(\"English Train Set Bigram \\n\")\nprint(english_bigram_fdist_common)\nprint(\"\\n\\n\")\n\n# Storing the frequent character in Trigram English Train Set in a variable\nenglish_trigram_fdist_common = english_trigram_fdist.most_common()\nprint(\"English Train Set Trigram \\n\")\nprint(english_trigram_fdist_common)","057026fd":"# Counting the number of occurences of each character in Unigram Italian Train Set using FreqDist\nitalian_unigram_fdist = FreqDist(unigram_italian)\nprint(italian_unigram_fdist)\n\n# Counting the number of occurences of each character in Bigram Italian Train Set using FreqDist\nitalian_bigram_fdist = FreqDist(bigram_italian)\nprint(italian_bigram_fdist)\n\n# Counting the number of occurences of each character in Trigram Italian Train Set using FreqDist\nitalian_trigram_fdist = FreqDist(trigram_italian)\nprint(italian_trigram_fdist)","eada6682":"# Storing the frequent character in Unigram Italian Train Set in a variable\nitalian_unigram_fdist_common = italian_unigram_fdist.most_common()\nprint(\"Italian Train Set Unigram \\n\")\nprint(italian_unigram_fdist_common)\nprint(\"\\n\\n\")\n\n# Storing the frequent character in Bigram Italian Train Set in a variable\nitalian_bigram_fdist_common = italian_bigram_fdist.most_common()\nprint(\"Italian Train Set Bigram \\n\")\nprint(italian_bigram_fdist_common)\nprint(\"\\n\\n\")\n\n# Storing the frequent character in Trigram Italian Train Set in a variable\nitalian_trigram_fdist_common = italian_trigram_fdist.most_common()\nprint(\"Italian Train Set Trigram \\n\")\nprint(italian_trigram_fdist_common)","730131fe":"# Creating a Dataframe for the frequent characters in Unigram English Train Set\nenglish_train_set_uni_df = pd.DataFrame(english_unigram_fdist_common)\nenglish_train_set_uni_df = english_train_set_uni_df.rename(columns={0: \"English_Charcters\", 1: \"English_Frequency\"})\nenglish_train_set_uni_df","f9349675":"# Creating a Dataframe for the frequent characters in Bigram English Train Set\nenglish_train_set_bi_df = pd.DataFrame(english_bigram_fdist_common)\nenglish_train_set_bi_df = english_train_set_bi_df.rename(columns={0: \"English_Charcters\", 1: \"English_Frequency\"})\nenglish_train_set_bi_df","ef99070b":"# Creating a Dataframe for the frequent characters in Trigram English Train Set\nenglish_train_set_tri_df = pd.DataFrame(english_trigram_fdist_common)\nenglish_train_set_tri_df = english_train_set_tri_df.rename(columns={0: \"English_Charcters\", 1: \"English_Frequency\"})\nenglish_train_set_tri_df","885156af":"# Creating a Dataframe for the frequent characters in Unigram Italian Train Set\nitalian_train_set_uni_df = pd.DataFrame(italian_unigram_fdist_common)\nitalian_train_set_uni_df = italian_train_set_uni_df.rename(columns={0: \"Italian_Charcters\", 1: \"Italian_Frequency\"})\nitalian_train_set_uni_df","4718544e":"# Creating a Dataframe for the frequent characters in Bigram Italian Train Set\nitalian_train_set_bi_df = pd.DataFrame(italian_bigram_fdist_common)\nitalian_train_set_bi_df = italian_train_set_bi_df.rename(columns={0: \"Italian_Charcters\", 1: \"Italian_Frequency\"})\nitalian_train_set_bi_df","c8e6a2c2":"# Creating a Dataframe for the frequent characters in Trigram Italian Train Set\nitalian_train_set_tri_df = pd.DataFrame(italian_trigram_fdist_common)\nitalian_train_set_tri_df = italian_train_set_tri_df.rename(columns={0: \"Italian_Charcters\", 1: \"Italian_Frequency\"})\nitalian_train_set_tri_df","7b1ade72":"# Calculating the Probability for the most frequent words in English language\ndef probability_english(freq):\n    prob =freq\/len(english_series_to_string)\n    return prob","dbc7690c":"english_train_set_uni_df['English_Probability'] = english_train_set_uni_df['English_Frequency'].apply(lambda freq: probability_english(freq))\nenglish_train_set_uni_df","ee87e7ac":"english_train_set_bi_df['English_Probability'] = english_train_set_bi_df['English_Frequency'].apply(lambda freq: probability_english(freq))\nenglish_train_set_bi_df","bb9d80e7":"english_train_set_tri_df['English_Probability'] = english_train_set_tri_df['English_Frequency'].apply(lambda freq: probability_english(freq))\nenglish_train_set_tri_df","69160d1d":"# Calculating the Probability for the most frequent words in Italian language\ndef probability_italian(freq):\n    prob =freq\/len(italian_series_to_string)\n    #prob =freq\/len(unigram_string)\n    return prob","41ad1a8b":"italian_train_set_uni_df['Italian_Probability'] = italian_train_set_uni_df['Italian_Frequency'].apply(lambda freq: probability_italian(freq))\nitalian_train_set_uni_df","2d1ea094":"italian_train_set_bi_df['Italian_Probability'] = italian_train_set_bi_df['Italian_Frequency'].apply(lambda freq: probability_italian(freq))\nitalian_train_set_bi_df","074cf0da":"italian_train_set_tri_df['Italian_Probability'] = italian_train_set_tri_df['Italian_Frequency'].apply(lambda freq: probability_italian(freq))\nitalian_train_set_tri_df","039266db":"both_lang_train_set_uni_df = pd.concat([english_train_set_uni_df, italian_train_set_uni_df], axis = 1, sort = True)\nboth_lang_train_set_uni_df","2dc813bd":"both_lang_train_set_bi_df = pd.concat([english_train_set_bi_df, italian_train_set_bi_df], axis = 1, sort = True)\nboth_lang_train_set_bi_df","78ee218e":"both_lang_train_set_tri_df = pd.concat([english_train_set_tri_df, italian_train_set_tri_df], axis = 1, sort = True)\nboth_lang_train_set_tri_df","a1d4722e":"english_test","9305e31c":"# Convert 20 lists of English words to Panda Series\nlist_to_series_for_english_test_set = pd.Series(english_test)\nenglish_test_set_list_to_series = list_to_series_for_english_test_set.apply(pd.Series).stack().reset_index(drop = True)\nenglish_test_set_list_to_series","cb310321":"# Convert Series of English words to single list\nenglish_test_set_final_list = english_test_set_list_to_series.tolist()\nenglish_test_set_final_list","dded0540":"italian_test","ecbdc39c":"# Convert 20 lists of English words to Panda Series\nlist_to_series_for_italian_test_set = pd.Series(italian_test)\nitalian_test_set_list_to_series = list_to_series_for_italian_test_set.apply(pd.Series).stack().reset_index(drop = True)\nitalian_test_set_list_to_series","f3b69ced":"# Convert Series of Italian words to single list\nitalian_test_set_final_list = italian_test_set_list_to_series.tolist()\nitalian_test_set_final_list","39815518":"# Converting two Unigram English columns from dataframe to dictionary\nenglish_final_uni_dict = both_lang_train_set_uni_df.set_index('English_Charcters')['English_Probability'].to_dict()\nenglish_final_uni_dict","5b8322ba":"# Converting two Bigram English columns from dataframe to dictionary\nenglish_final_bi_dict = both_lang_train_set_bi_df.set_index('English_Charcters')['English_Probability'].to_dict()\nenglish_final_bi_dict","cc6807c0":"# Converting two Trigram English columns from dataframe to dictionary\nenglish_final_tri_dict = both_lang_train_set_tri_df.set_index('English_Charcters')['English_Probability'].to_dict()\nenglish_final_tri_dict","1c01746a":"# Converting two Unigram Italian columns from dataframe to dictionary\nitalian_final_uni_dict = both_lang_train_set_uni_df.set_index('Italian_Charcters')['Italian_Probability'].to_dict()\nitalian_final_uni_dict","4b61bb3f":"# Converting two Bigram Italian columns from dataframe to dictionary\nitalian_final_bi_dict = both_lang_train_set_bi_df.set_index('Italian_Charcters')['Italian_Probability'].to_dict()\nitalian_final_bi_dict","0621dc32":"# Converting two Trigram Italian columns from dataframe to dictionary\nitalian_final_tri_dict = both_lang_train_set_tri_df.set_index('Italian_Charcters')['Italian_Probability'].to_dict()\nitalian_final_tri_dict","6a47920c":"len(english_test_set_final_list)","4801567d":"english_test_set_final_list","79acb8cf":"# Function for Unigram English Test set\n\n# Input is given as list\ndef Unigram_English(input_test_set):\n    count_eng = 0                                # Accuracy for English words\n    count_ita = 0                                # Accuracy for Italian words\n#     total_english_prob = 0\n#     total_italian_prob = 0\n    # Iterating through each item in the English test set\n    for every_item in input_test_set:                  # 'every_item' have individual words from the list-Bring\n        total_english_prob = 0\n        total_italian_prob = 0\n        char_ngram = ngram_function(1, every_item)     # 'char_ngram' have individual characters in the word obtained from prev step-['B', 'r', 'i', 'n', 'g'] \n        for char_index in range(0, len(char_ngram)):   # 'char_index' have the index of the individual charcters of prev step\n            # Iterating over English Unigram Frequent items\n            for ele in english_unigram_fdist:          \n                if ele == (char_ngram[char_index]):\n                    if ele in english_final_uni_dict.keys():\n                        total_english_prob = total_english_prob + english_final_uni_dict[ele]\n                    else:\n                        break\n            for ele in italian_unigram_fdist:\n                if ele == (char_ngram[char_index]):\n                    if ele in italian_final_uni_dict.keys():\n                        total_italian_prob = total_italian_prob + italian_final_uni_dict[ele]\n                    else:\n                        break\n        print(\"Total English Probability for the word is: \", total_english_prob)\n        print(\"Total Italian Probability for the word is: \", total_italian_prob)\n        if total_english_prob > total_italian_prob:\n            print (every_item.upper(),\" is an English word!\")\n            print(\"\\n\")\n        else: \n            print (every_item.upper(),\" is an Italian word!\")   \n            print(\"\\n\")\n#         count_eng = 0\n#         count_ita = 0\n        if total_english_prob > total_italian_prob:\n            count_eng = count_eng + 1\n        else: \n            count_ita = count_ita + 1\n#         return count_eng, count_ita\n        print(\"Total count of Predicted English words: \", count_eng)\n        print(\"Total count of Predicted Italian words: \", count_ita)\n        english_accuracy = (count_eng\/len(english_test_set_final_list))*100\n        italian_accuracy = (count_ita\/len(italian_test_set_final_list))*100\n    print(\"Accuracy for English language is: \", english_accuracy)    \n    print(\"Accuracy for Italian language is: \", italian_accuracy)   ","57297bd3":"Unigram_English(['bring', 'person'])","dccaafd9":"Unigram_English(english_test_set_final_list)","e555fc1a":"italian_test_set_final_list","c6074364":"# Function for Unigram Italian Test set\n\n# Input is given as list\ndef Unigram_Italian(input_test_set):\n    count_eng = 0                                # Accuracy for English words\n    count_ita = 0                                # Accuracy for Italian words\n#     total_english_prob = 0\n#     total_italian_prob = 0\n    # Iterating through each item in the Italian test set\n    for every_item in input_test_set:                  # 'every_item' have individual words from the list-Bring\n        total_english_prob = 0\n        total_italian_prob = 0\n        char_ngram = ngram_function(1, every_item)     # 'char_ngram' have individual characters in the word obtained from prev step-['B', 'r', 'i', 'n', 'g'] \n        for char_index in range(0, len(char_ngram)):   # 'char_index' have the index of the individual charcters of prev step\n            # Iterating over Italian Unigram Frequent items\n            for ele in english_unigram_fdist:          \n                if ele == (char_ngram[char_index]):\n                    if ele in english_final_uni_dict.keys():\n                        total_english_prob = total_english_prob + english_final_uni_dict[ele]\n                    else:\n                        break\n            for ele in italian_unigram_fdist:\n                if ele == (char_ngram[char_index]):\n                    if ele in italian_final_uni_dict.keys():\n                        total_italian_prob = total_italian_prob + italian_final_uni_dict[ele]\n                    else:\n                        break\n        print(\"Total English Probability for the word is: \", total_english_prob)\n        print(\"Total Italian Probability for the word is: \", total_italian_prob)\n        if total_english_prob > total_italian_prob:\n            print (every_item.upper(),\" is an English word!\")\n            print(\"\\n\")\n        else: \n            print (every_item.upper(),\" is an Italian word!\")   \n            print(\"\\n\")\n#         count_eng = 0\n#         count_ita = 0\n        if total_english_prob > total_italian_prob:\n            count_eng = count_eng + 1\n        else: \n            count_ita = count_ita + 1\n#         return count_eng, count_ita\n        print(\"Total count of Predicted English words: \", count_eng)\n        print(\"Total count of Predicted Italian words: \", count_ita)\n        english_accuracy = (count_eng\/len(english_test_set_final_list))*100\n        italian_accuracy = (count_ita\/len(italian_test_set_final_list))*100\n    print(\"Accuracy for English language is: \", english_accuracy)    \n    print(\"Accuracy for Italian language is: \", italian_accuracy)","235c932b":"Unigram_Italian(italian_test_set_final_list)","86b8ac80":"# Function for Bigram English Test set\n\n# Input is given as list\ndef Bigram_English(input_test_set):\n    count_eng = 0                                # Accuracy for English words\n    count_ita = 0                                # Accuracy for Italian words\n#     total_english_prob = 0\n#     total_italian_prob = 0\n    # Iterating through each item in the English test set\n    for every_item in input_test_set:                  # 'every_item' have individual words from the list-Bring\n        total_english_prob = 0\n        total_italian_prob = 0\n        char_ngram = ngram_function(2, every_item)     # 'char_ngram' have individual characters in the word obtained from prev step-['B', 'r', 'i', 'n', 'g'] \n        for char_index in range(0, len(char_ngram)):   # 'char_index' have the index of the individual charcters of prev step\n            # Iterating over English Bigram Frequent items\n            for ele in english_bigram_fdist:          \n                if ele == (char_ngram[char_index]):\n                    if ele in english_final_bi_dict.keys():\n                        total_english_prob = total_english_prob + english_final_bi_dict[ele]\n                    else:\n                        break\n            for ele in italian_bigram_fdist:\n                if ele == (char_ngram[char_index]):\n                    if ele in italian_final_bi_dict.keys():\n                        total_italian_prob = total_italian_prob + italian_final_bi_dict[ele]\n                    else:\n                        break\n        print(\"Total English Probability for the word is: \", total_english_prob)\n        print(\"Total Italian Probability for the word is: \", total_italian_prob)\n        if total_english_prob > total_italian_prob:\n            print (every_item.upper(),\" is an English word!\")\n            print(\"\\n\")\n        else: \n            print (every_item.upper(),\" is an Italian word!\")   \n            print(\"\\n\")\n#         count_eng = 0\n#         count_ita = 0\n        if total_english_prob > total_italian_prob:\n            count_eng = count_eng + 1\n        else: \n            count_ita = count_ita + 1\n#         return count_eng, count_ita\n        print(\"Total count of Predicted English words: \", count_eng)\n        print(\"Total count of Predicted Italian words: \", count_ita)\n        english_accuracy = (count_eng\/len(english_test_set_final_list))*100\n        italian_accuracy = (count_ita\/len(italian_test_set_final_list))*100\n    print(\"Accuracy for English language is: \", english_accuracy)    \n    print(\"Accuracy for Italian language is: \", italian_accuracy)","52d5eabd":"Bigram_English(english_test_set_final_list)","d9d0c27d":"# Function for Bigram Italian Test set\n\n# Input is given as list\ndef Bigram_Italian(input_test_set):\n    count_eng = 0                                # Accuracy for English words\n    count_ita = 0                                # Accuracy for Italian words\n#     total_english_prob = 0\n#     total_italian_prob = 0\n    # Iterating through each item in the Italian test set\n    for every_item in input_test_set:                  # 'every_item' have individual words from the list-Bring\n        total_english_prob = 0\n        total_italian_prob = 0\n        char_ngram = ngram_function(2, every_item)     # 'char_ngram' have individual characters in the word obtained from prev step-['B', 'r', 'i', 'n', 'g'] \n        for char_index in range(0, len(char_ngram)):   # 'char_index' have the index of the individual charcters of prev step\n            # Iterating over Italian Bigram Frequent items\n            for ele in english_bigram_fdist:          \n                if ele == (char_ngram[char_index]):\n                    if ele in english_final_bi_dict.keys():\n                        total_english_prob = total_english_prob + english_final_bi_dict[ele]\n                    else:\n                        break\n            for ele in italian_bigram_fdist:\n                if ele == (char_ngram[char_index]):\n                    if ele in italian_final_bi_dict.keys():\n                        total_italian_prob = total_italian_prob + italian_final_bi_dict[ele]\n                    else:\n                        break\n        print(\"Total English Probability for the word is: \", total_english_prob)\n        print(\"Total Italian Probability for the word is: \", total_italian_prob)\n        if total_english_prob > total_italian_prob:\n            print (every_item.upper(),\" is an English word!\")\n            print(\"\\n\")\n        else: \n            print (every_item.upper(),\" is an Italian word!\")   \n            print(\"\\n\")\n#         count_eng = 0\n#         count_ita = 0\n        if total_english_prob > total_italian_prob:\n            count_eng = count_eng + 1\n        else: \n            count_ita = count_ita + 1\n#         return count_eng, count_ita\n        print(\"Total count of Predicted English words: \", count_eng)\n        print(\"Total count of Predicted Italian words: \", count_ita)\n        english_accuracy = (count_eng\/len(english_test_set_final_list))*100\n        italian_accuracy = (count_ita\/len(italian_test_set_final_list))*100\n    print(\"Accuracy for English language is: \", english_accuracy)    \n    print(\"Accuracy for Italian language is: \", italian_accuracy)","5201c86d":"Bigram_Italian(italian_test_set_final_list)","e8ddd52a":"# Function for Trigram English Test set\n\n# Input is given as list\ndef Trigram_English(input_test_set):\n    count_eng = 0                                # Accuracy for English words\n    count_ita = 0                                # Accuracy for Italian words\n#     total_english_prob = 0\n#     total_italian_prob = 0\n    # Iterating through each item in the English test set\n    for every_item in input_test_set:                  # 'every_item' have individual words from the list-Bring\n        total_english_prob = 0\n        total_italian_prob = 0\n        char_ngram = ngram_function(3, every_item)     # 'char_ngram' have individual characters in the word obtained from prev step-['B', 'r', 'i', 'n', 'g'] \n        for char_index in range(0, len(char_ngram)):   # 'char_index' have the index of the individual charcters of prev step\n            # Iterating over English Trigram Frequent items\n            for ele in english_trigram_fdist:          \n                if ele == (char_ngram[char_index]):\n                    if ele in english_final_tri_dict.keys():\n                        total_english_prob = total_english_prob + english_final_tri_dict[ele]\n                    else:\n                        break\n            for ele in italian_trigram_fdist:\n                if ele == (char_ngram[char_index]):\n                    if ele in italian_final_tri_dict.keys():\n                        total_italian_prob = total_italian_prob + italian_final_tri_dict[ele]\n                    else:\n                        break\n        print(\"Total English Probability for the word is: \", total_english_prob)\n        print(\"Total Italian Probability for the word is: \", total_italian_prob)\n        if total_english_prob > total_italian_prob:\n            print (every_item.upper(),\" is an English word!\")\n            print(\"\\n\")\n        else: \n            print (every_item.upper(),\" is an Italian word!\")   \n            print(\"\\n\")\n#         count_eng = 0\n#         count_ita = 0\n        if total_english_prob > total_italian_prob:\n            count_eng = count_eng + 1\n        else: \n            count_ita = count_ita + 1\n#         return count_eng, count_ita\n        print(\"Total count of Predicted English words: \", count_eng)\n        print(\"Total count of Predicted Italian words: \", count_ita)\n        english_accuracy = (count_eng\/len(english_test_set_final_list))*100\n        italian_accuracy = (count_ita\/len(italian_test_set_final_list))*100\n    print(\"Accuracy for English language is: \", english_accuracy)    \n    print(\"Accuracy for Italian language is: \", italian_accuracy)","e17f683b":"Trigram_English(english_test_set_final_list)","15309908":"# Function for Trigram Italian Test set\n\n# Input is given as list\ndef Trigram_Italian(input_test_set):\n    count_eng = 0                                # Accuracy for English words\n    count_ita = 0                                # Accuracy for Italian words\n#     total_english_prob = 0\n#     total_italian_prob = 0\n    # Iterating through each item in the Italian test set\n    for every_item in input_test_set:                  # 'every_item' have individual words from the list-Bring\n        total_english_prob = 0\n        total_italian_prob = 0\n        char_ngram = ngram_function(3, every_item)     # 'char_ngram' have individual characters in the word obtained from prev step-['B', 'r', 'i', 'n', 'g'] \n        for char_index in range(0, len(char_ngram)):   # 'char_index' have the index of the individual charcters of prev step\n            # Iterating over Italian Bigram Frequent items\n            for ele in english_trigram_fdist:          \n                if ele == (char_ngram[char_index]):\n                    if ele in english_final_tri_dict.keys():\n                        total_english_prob = total_english_prob + english_final_tri_dict[ele]\n                    else:\n                        break\n            for ele in italian_trigram_fdist:\n                if ele == (char_ngram[char_index]):\n                    if ele in italian_final_tri_dict.keys():\n                        total_italian_prob = total_italian_prob + italian_final_tri_dict[ele]\n                    else:\n                        break\n        print(\"Total English Probability for the word is: \", total_english_prob)\n        print(\"Total Italian Probability for the word is: \", total_italian_prob)\n        if total_english_prob > total_italian_prob:\n#             list_eng = []\n#             list_eng.extend(every_item)\n#             print(list_eng)\n            print (every_item.upper(),\" is an English word!\")\n            print(\"\\n\")\n        else: \n#             list_ita = []\n#             list_ita.extend(every_item)\n#             print(list_ita)\n            print (every_item.upper(),\" is an Italian word!\")   \n            print(\"\\n\")\n#         count_eng = 0\n#         count_ita = 0\n        if total_english_prob > total_italian_prob:\n            count_eng = count_eng + 1\n        else: \n            count_ita = count_ita + 1\n#         return count_eng, count_ita\n        print(\"Total count of Predicted English words: \", count_eng)\n        print(\"Total count of Predicted Italian words: \", count_ita)\n        english_accuracy = (count_eng\/len(english_test_set_final_list))*100\n        italian_accuracy = (count_ita\/len(italian_test_set_final_list))*100\n    print(\"Accuracy for English language is: \", english_accuracy)    \n    print(\"Accuracy for Italian language is: \", italian_accuracy)","409523a5":"Trigram_Italian(italian_test_set_final_list)","657685d2":"<a href=\"#Question 1 Answer English\" style=\"color:blue;\">Click here to have a look at Answer to Question-1 English<\/a>","aefa9554":"<a href=\"#Question 1 Answer Italian\" style=\"color:blue;\">Click here to have a look at Answer to Question-1 Italian<\/a>","7712599d":"<a href=\"#Question 2 Answer-model-implemetation\" style=\"color:blue;\">Click here to have a look at Question-2 N-gram model Implementation function<\/a>","6ca592d9":"In the Bigram model, the words in the test set is split into double(two) charcters and calculated the probability. The accuracy of the Bigram model is: \n\n- Around 57% and 42% for English and Italian Language respectively for the English test set. \n- Around 5% and 94.6% for English and Italian Language respectively for the Italian test set. \n\nAccording to the above reported accuracies, the bigram model showed improved performance in predicting the English test set words when compared to the unigram model English words accuracy. On considering the bigram model performance in Italian test set words, the model really performed absolutely well in predicting the characters, passing with 94.6%.\nThis shows that the bigram model was better when compared to the unigram model since bigram model has very good performance in predicting both the language words.","def892d0":"In the Trigram model, the words in the test set is split into triple(three) charcters and calculated the probability. The accuracy of the Trigram model is: \n\n- Around 65% and 35% for English and Italian Language respectively for the English test set. \n- Around 5% and 95% for English and Italian Language respectively for the Italian test set. \n\nAccording to the above reported accuracies, the trigram model performed better than bigram model in predicting the English test set words with 7% increase in predicting the English words correctly as English. On considering the trigram model performance in Italian test set words, the model outperformed both unigram and bigram models. The trigram model showed an accuracy of 95% in predicting the Italian test set words which proves to be a better predicting model.\nThis shows that the trigram model is slightly better than bigram model and far better than unigram model in predicting both the language words.","18a5db8e":"<a href=\"#Question 2 Answer-Prob\" style=\"color:blue;\">Click here to have a look at Question-2 Probability function<\/a>","772a34b4":"### Trigram model output for English","0c8f38f4":"<a id=\"Question 2 Answer-Prob\">\n<\/a>\n\n## Question-2 Probability","b2abae62":"<a id=\"Question 3\">\n<\/a>\n\n## Question-3  Bigram model Accuracy Analysis","bca8dd4d":"<a id=\"Question 1 Answer Italian\">\n<\/a>\n\n\n## Question-1 Answer - Italian","41e4a65c":"### Converting English & Italian dataframe columns to dictionary containing each language Characters & Probabilities","c838e921":"<a href=\"#Question 2 Answer-Ngram-model\" style=\"color:blue;\">Click here to have a look at Question-2 N-gram model function<\/a>","35c81768":"<a href=\"#Question 4\" style=\"color:blue;\">Click here to have a look at the Answer for Question-4 Trigram model Accuracy Analysis<\/a>","71aa4984":"### Unigram model output for Italian ","59b246d2":"<a id=\"Question 2 Answer-model-implemetation\">\n<\/a>\n\n## Question-2 N-gram model Implementation","e1850640":"<a id=\"Question 2 Answer-Ngram-model\">\n<\/a>\n\n## Question-2 N-gram Function","5d012dab":"<a id=\"Question 1 Answer English\">\n<\/a>\n\n## Question-1 Answer - English","0eda5930":"<a id=\"Question 4\">\n<\/a>\n\n## Question-4  Trigram model Accuracy Analysis","c65a72e6":"### Convert English Test set & Italian Test set to List of words","70f55b10":"### Bigram model output for English","cc783e00":"In the Unigram model, the words in the test set is split into single charcters and calculated the probability. The accuracy of the Unigram model is: \n\n- Around 43% and 56% for English and Italian Language respectively for the English test set. \n- Around 9.5% and 90.5% for English and Italian Language respectively for the Italian test set. \n\nAccording to the above reported accuracies, the unigram model showed somewhat poor performance in English test set words since, 43% of the words are predicted wrongly. But on seeing the unigram model performance in Italian test set words, the model really performed well in predicting the characters, passing with 90.5%.\nThis shows that unigram model fails to prove as a great working model in predicting both the language words.","06ad275e":"<a href=\"#Question 2 Answer-accuracy\" style=\"color:blue;\">Click here to have a look at Question-2 Unigram model Accuracy Analysis<\/a>","7cc28f0e":"<a href=\"#Question 3\" style=\"color:blue;\">Click here to have a look at the Answer for Question-3 Bigram model Accuracy Analysis<\/a>","3191326c":"### Unigram model output for English ","e16062d0":"<a id=\"Question 2 Answer-accuracy\">\n<\/a>\n\n## Question-2 Unigram model Accuracy Analysis","321f2731":"### Bigram model output for Italian","22302056":"### Trigram model output for Italian"}}