{"cell_type":{"135366f0":"code","db721064":"code","d84684c8":"code","1dcb70ad":"code","878ff19b":"code","59c64bd2":"code","a4f1eab4":"code","ec7fe0d6":"code","6cb5999e":"code","196f371e":"code","5754db3d":"code","a16d2318":"code","d1a58f1e":"code","f7914cfe":"code","17296b21":"code","10e88f18":"code","ed76e854":"code","249a76e8":"code","dcd1621a":"code","eac76614":"code","34d8e403":"code","4173512c":"code","5a12f9e8":"code","f8ed0ef8":"code","be1ebd3f":"code","835aafcd":"code","32da5b2a":"code","7538064c":"code","331e159c":"code","6b7b4489":"code","43451f1f":"code","78e2a7df":"code","e8e4be8c":"code","b0ea6e90":"code","dfb3cd33":"code","a846f860":"code","bf57959d":"code","71ff5efb":"code","ed03cf86":"code","e0436d15":"code","65573c16":"code","2c8d9095":"code","e0009437":"code","95a44aaf":"code","7a4c5c96":"code","f5c418f0":"code","5bc5bd17":"code","ab16356e":"code","175201c3":"code","95da7174":"code","824ff06b":"code","8528134b":"code","34467919":"code","deeef399":"code","4873c867":"code","e2ecb2fb":"markdown","2c069bf3":"markdown","27287906":"markdown","bbb6c726":"markdown","303f2446":"markdown","7aef21bd":"markdown","f9d76b64":"markdown","bfd9d35a":"markdown","b0a9c11c":"markdown","06639f6b":"markdown","c0228478":"markdown","555a92e2":"markdown","277b7f12":"markdown","9c2b016c":"markdown","b9d135d6":"markdown","f58c8d03":"markdown","7ae820d3":"markdown","b00a219a":"markdown","2bdf1788":"markdown"},"source":{"135366f0":"# essential libraries\nimport json\nimport random\nfrom urllib.request import urlopen\n\n# storing and anaysis\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats as sps\nfrom scipy.interpolate import interp1d\n\n# visualization\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport folium\n\nfrom matplotlib import pyplot as plt\nfrom matplotlib.dates import date2num, num2date\nfrom matplotlib import dates as mdates\nfrom matplotlib import ticker\nfrom matplotlib.colors import ListedColormap\nfrom matplotlib.patches import Patch\n\n# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow\ntst = '#2fb1d2' # tests - blue\nctl = '#e2e42e' # contrloed - yellow\n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# html embedding\nfrom IPython.display import Javascript\nfrom IPython.core.display import display\nfrom IPython.core.display import HTML","db721064":"# !ls ..\/input\/covid19-russia-regions-cases\/\n# !ls ..\/input\/covid19yandexdataset\/\n# !ls ..\/input\/estimating-covid-19-rt-in-real-time-russia\/","d84684c8":"# Read Russian data\n# rus_df = pd.read_csv('..\/input\/covid19-russia-regions-cases\/covid19-russia-cases.csv')\nrus_df = pd.read_csv('..\/input\/covid19-russia-regions-cases\/covid19-russia-cases-scrf.csv')\nrus_other_df = pd.read_csv('..\/input\/covid19-russia-regions-cases\/covid19-tests-and-other.csv')\nrus_info_df = pd.read_csv('..\/input\/covid19-russia-regions-cases\/regions-info.csv')\nrus_vent_df = pd.read_csv('..\/input\/covid19-russia-regions-cases\/regions-ventilators.csv')\n# iso_df = pd.read_csv('..\/input\/covid19-russia-regions-cases\/isolation_daily.csv')\niso_df = pd.read_csv('..\/input\/covid19yandexdataset\/ID.csv')\nmos_death_df = pd.read_csv('..\/input\/covid19-russia-regions-cases\/moscow_deaths.csv')\n\n# Read world data\nworld_df = pd.read_csv('..\/input\/covid19yandexdataset\/WS.csv')\n\n# Read R-value notebook output\nrt_df = pd.read_csv('..\/input\/estimating-covid-19-rt-in-real-time-russia\/rt.csv')","1dcb70ad":"# Data preporation\nrus_df['Active'] = rus_df['Confirmed'] - rus_df['Deaths'] - rus_df['Recovered']\nrus_df['Death_rate'] = rus_df['Deaths'] \/ rus_df['Confirmed'] * 100\nworld_df['Active'] = world_df['Confirmed'] - world_df['Deaths'] - world_df['Recovered']\nworld_df['Death_rate'] = (world_df['Deaths'] \/ world_df['Confirmed'] * 100).fillna(0)\n\n# Remove Diamond Princess cases\nrus_df = rus_df[rus_df['Region\/City'] != 'Diamond Princess']\n\nrt_df.date = pd.to_datetime(rt_df.date)\niso_df.Date = pd.to_datetime(iso_df.Date, dayfirst=True)\nworld_df.Date = pd.to_datetime(world_df.Date, dayfirst=True)\nrus_df['Date'] = pd.to_datetime(rus_df['Date'], dayfirst=True) \nprint('Russian data actual date:', rus_df.iloc[-1]['Date'].strftime('%d, %b %Y'))\nprint('World data actual date:', world_df.sort_values('Date').iloc[-1]['Date'].strftime('%d, %b %Y'))\n\ncases = ['Day-Confirmed', 'Day-Deaths', 'Day-Recovered', 'Confirmed', 'Deaths', 'Recovered', 'Active']","878ff19b":"# Combining with regions info\nright = rus_info_df[['Region_ID', 'Population']]\nrus_df = rus_df.merge(right, left_on='Region_ID', right_on='Region_ID', how='left')\nrus_df['Conf_p100k'] = rus_df.Confirmed \/ (rus_df.Population \/ 100000)\nrus_df = rus_df.drop('Population', axis=1)","59c64bd2":"# Get current situation in regions\nrus_latest = rus_df.groupby('Region\/City').apply(lambda df: df.loc[df['Date'].idxmax()])\nrus_latest = rus_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\nrus_latest = rus_latest[['Region\/City'] + cases + ['Death_rate', 'Conf_p100k']]","a4f1eab4":"rus_latest.style.background_gradient(cmap='Reds')","ec7fe0d6":"temp = rus_df.groupby(['Date', 'Region\/City'])['Confirmed'].max().reset_index()\ntemp = temp.sort_values(['Confirmed', 'Date'], ascending=False)\n\npx.line(temp, x=\"Date\", y=\"Confirmed\", color='Region\/City', title='Cases Spread', height=600)","6cb5999e":"temp = rus_df.groupby(['Date', 'Region\/City'])['Conf_p100k'].max().reset_index()\ntemp = temp.sort_values(['Conf_p100k', 'Date'], ascending=False)\n\nfig = px.line(temp, x=\"Date\", y=\"Conf_p100k\", color='Region\/City', title='Confirmed cases per 100 000 people', height=600)\nfig.update_layout(yaxis_title='Confirmed per 100K')","196f371e":"temp = rus_df.groupby(['Date', 'Region\/City'])[['Day-Confirmed', 'Confirmed']].max().reset_index()\ntemp = temp.sort_values(['Confirmed', 'Date'], ascending=False)\n\npx.line(temp, x=\"Date\", y=\"Day-Confirmed\", color='Region\/City', title='Daily confirmed cases spread', height=600)","5754db3d":"top = 30\ntemp = rus_latest.loc[rus_latest.Death_rate > 0].sort_values('Death_rate', ascending=False).head(top)\ntemp = temp.sort_values('Death_rate').melt(id_vars=\"Region\/City\", value_vars=['Death_rate'])\n\nfig = px.bar(temp, y=\"Region\/City\", x=\"value\", color='variable', color_discrete_sequence=[dth, cnf], orientation='h')\nfig.update_layout(barmode='group', title=f'The percentage of deaths from all confirmed cases - Top {top}',\n                  xaxis_title='Death Rate', yaxis_title='', height=800)\nfig.show()","a16d2318":"# Copied function from \"Estimating COVID-19 Rt in Real-Time. Russia\" notebook\ndef plot_rt(result, ax, state_name):\n    \n    ax.set_title(f\"{state_name}\")\n    \n    # Colors\n    ABOVE =  [1,0,0]\n    MIDDLE = [1,1,1]\n    BELOW =  [0,0,0]\n    cmap = ListedColormap(np.r_[\n        np.linspace(BELOW,MIDDLE,25),\n        np.linspace(MIDDLE,ABOVE,25)\n    ])\n    color_mapped = lambda y: np.clip(y, .5, 1.5)-.5\n    \n    index = result['ML'].index.get_level_values('date')\n    values = result['ML'].values\n    \n    # Plot dots and line\n    ax.plot(index, values, c='k', zorder=1, alpha=.25)\n    ax.scatter(index,\n               values,\n               s=40,\n               lw=.5,\n               c=cmap(color_mapped(values)),\n               edgecolors='k', zorder=2)\n    \n    # Aesthetically, extrapolate credible interval by 1 day either side\n    lowfn = interp1d(date2num(index),\n                     result['Low_90'].values,\n                     bounds_error=False,\n                     fill_value='extrapolate')\n    \n    highfn = interp1d(date2num(index),\n                      result['High_90'].values,\n                      bounds_error=False,\n                      fill_value='extrapolate')\n    \n    extended = pd.date_range(start=pd.Timestamp('2020-03-21'),\n                             end=index[-1]+pd.Timedelta(days=1))\n    \n    ax.fill_between(extended,\n                    lowfn(date2num(extended)),\n                    highfn(date2num(extended)),\n                    color='k',\n                    alpha=.1,\n                    lw=0,\n                    zorder=3)\n\n    ax.axhline(1.0, c='k', lw=1, label='$R_t=1.0$', alpha=.25);\n    \n    # Formatting\n    ax.xaxis.set_major_locator(mdates.MonthLocator())\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    ax.xaxis.set_minor_locator(mdates.DayLocator())\n    \n    ax.yaxis.set_major_locator(ticker.MultipleLocator(1))\n    ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(\"{x:.1f}\"))\n    ax.yaxis.tick_right()\n    ax.spines['left'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.margins(0)\n    ax.grid(which='major', axis='y', c='k', alpha=.1, zorder=-2)\n    ax.margins(0)\n    ax.set_ylim(0.0, 5.0)\n    ax.set_xlim(pd.Timestamp('2020-03-21'), result.index.get_level_values('date')[-1]+pd.Timedelta(days=1))\n    fig.set_facecolor('w')\n","d1a58f1e":"print('Rt data actuality date:', rt_df.iloc[-1]['date'].strftime('%d, %b %Y'))","f7914cfe":"ncols = 4\nnrows = int(np.ceil(len(rt_df.groupby('state')) \/ ncols))\n\nfig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(15, nrows*3))\n\nfor i, (state_name, result) in enumerate(rt_df.groupby('state')):\n    if len(result) < 2:\n        print(f\"Not enough data to plot: {state_name}\")\n        continue\n    plot_rt(result.set_index('date'), axes.flat[i], state_name)\n\nfig.tight_layout()\nfig.set_facecolor('w')","17296b21":"# Russia data by days\nday_cases = ['Day-Confirmed', 'Day-Deaths', 'Day-Recovered']\nrus_sum_df = rus_df.loc[rus_df['Region\/City'] != 'Diamond Princess']\nrus_sum_df = rus_sum_df.groupby('Date').apply(lambda df: df[day_cases].sum())\nrus_sum_df['Country\/Region'] = 'Russia'\nrus_sum_df = rus_sum_df.groupby('Country\/Region').apply(lambda df: df[day_cases].cumsum()).reset_index()\nrus_sum_df['Country\/Region'] = 'Russia'\nrus_sum_df = rus_sum_df.rename(columns={'Day-Confirmed': 'Confirmed', 'Day-Deaths': 'Deaths', 'Day-Recovered': 'Recovered'})\n\nrus_sum_df['Day-Confirmed'] = rus_sum_df.groupby('Country\/Region')['Confirmed'].diff()\nrus_sum_df['Day-Deaths'] = rus_sum_df.groupby('Country\/Region')['Deaths'].diff()\nrus_sum_df['Day-Recovered'] = rus_sum_df.groupby('Country\/Region')['Recovered'].diff()\nrus_sum_df.loc[0, ['Day-Confirmed', 'Day-Deaths', 'Day-Recovered']] = rus_sum_df.loc[0, ['Confirmed', 'Deaths', 'Recovered']].values \n\nrus_sum_df['Active'] = rus_sum_df['Confirmed'] - rus_sum_df['Deaths'] - rus_sum_df['Recovered']\nrus_sum_df['Death_rate'] = rus_sum_df['Deaths'] \/ rus_sum_df['Confirmed'] * 100\n\n# rus_sum_df.tail()","10e88f18":"cm = sns.light_palette(\"green\", as_cmap=True)\nstyle = (rus_sum_df.drop('Country\/Region', axis=1).style\n         .bar(subset=['Confirmed', 'Deaths'], color='#67000d')\n         .bar(subset=['Recovered'], color='#00441b')\n         .background_gradient(cmap='Reds')\n         .background_gradient(cmap='Greens', subset=['Day-Recovered', 'Recovered'])    \n        )\nstyle","ed76e854":"temp = rus_sum_df.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case',\n             title='Russia situation over time', color_discrete_sequence = [rec, dth, act])\n\ntemp1 = rus_sum_df[rus_sum_df['Date'] >= pd.Timestamp('2020-03-25')]\nfig.add_trace(go.Scatter(x=temp1.Date, y=temp1.Death_rate, name=\"Death Rate %\", yaxis=\"y2\", line_color=dth))\nfig.update_layout(yaxis2=dict(overlaying=\"y\", side=\"left\", position=0.26))\n\nfig.show()\n","249a76e8":"rus_days_df = rus_sum_df[['Date', 'Country\/Region', 'Confirmed', 'Deaths', 'Recovered', 'Death_rate', 'Active', 'Day-Confirmed']]\nrus_days_df = rus_days_df.rename(columns={'Country\/Region' : 'Country', 'Day-Confirmed' : 'Day_Confirmed'})\nfirst_day = rus_days_df['Date'][0]\nrus_days_df['Days'] = rus_days_df.groupby('Date').apply(lambda df: df['Date'] - first_day).reset_index(drop=True)\n\ncolumns = rus_days_df.columns\n# threshold = rus_days_df['Confirmed'].max() + 10000\n\ndef world_top_conf(world_df, n):\n    top = world_df.groupby('Country').Confirmed.max()\n    top = top.sort_values(ascending=False).head(n)\n    return top\n\ndef country_data(world_df, country):\n    country_df = world_df.loc[world_df.Country == country]\n#     country_df = country_df.loc[(country_df.Confirmed > 0) & (country_df.Confirmed <= threshold)].reset_index(drop=True)\n    country_df = country_df.loc[(country_df.Confirmed > 0)].reset_index(drop=True)\n\n    first_day = country_df.Date[0]\n    country_df['Days'] = country_df.groupby('Date').apply(lambda df: df.Date - first_day).reset_index(drop=True)\n    country_df = country_df[columns]\n    return country_df\n\nw_top_conf = world_top_conf(world_df, 10)\n\ntop_list = []\nfor c in w_top_conf.index.values:\n    top_list.append(country_data(world_df, c))\n","dcd1621a":"temp = pd.concat(top_list)\n\ntemp['Days'] = temp['Days'].astype('str')\ntemp1 = temp.groupby(['Country', 'Date']).apply(lambda df: int(df['Days'][0].split(' ')[0])).reset_index()\ntemp1 = temp1.sort_values(['Date', 'Country']).reset_index(drop=True)\ntemp = temp.sort_values(['Date', 'Country']).reset_index(drop=True)\ntemp['Days'] = temp1[0]\n\nfig = px.line(temp, x=\"Days\", y=\"Confirmed\", color='Country',\n              title='Number of cases in the most infected countries', height=600)\nfig.update_layout(xaxis_title='Days from the first case')\n\nfig.show()","eac76614":"fig = px.line(temp, x=\"Days\", y=\"Active\", color='Country',\n              title='Active cases in the most infected countries', height=600)\nfig.update_layout(xaxis_title='Days from the first case')\n\nfig.show()","34d8e403":"fig = px.line(temp, x=\"Days\", y=\"Death_rate\", color='Country',\n              title='Death rate in the most infected countries', height=600)\nfig.update_layout(xaxis_title='Days from the first case')\n\nfig.show()","4173512c":"fig = px.line(temp, x=\"Days\", y=\"Day_Confirmed\", color='Country',\n              title='New cases per day in the most infected countries', height=600)\nfig.update_layout(xaxis_title='Days from the first case')\n\nfig.show()","5a12f9e8":"\nrus_other_df.Date = pd.to_datetime(rus_other_df.Date, dayfirst=True)\n\ntemp = rus_other_df[rus_other_df['Date'] >= pd.Timestamp('2020-02-16')]\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=temp.Date, y=temp.Tests,\n                         line=dict(color=tst, width=2), mode='lines+markers', name='Tests performed'))\nfig.update_layout(title='Number of tests performed (not number of tested people)',\n                   xaxis_title='Date')\nfig.show()","f8ed0ef8":"rus_tests_df = rus_other_df[rus_other_df['Date'] >= pd.Timestamp('2020-03-02')][['Date', 'Tests']]\nrus_tests_df = rus_tests_df[~np.isnan(rus_tests_df.Tests)]\nrus_tests_df['Day_tests'] = rus_tests_df.Tests.diff()\nrus_tests_df = rus_tests_df[~np.isnan(rus_tests_df.Day_tests) & (rus_tests_df.Day_tests >= 0)]\n\ntemp = rus_sum_df[rus_sum_df['Date'] >= pd.Timestamp('2020-03-02')]\n\nfig = go.Figure(data=[\n    go.Bar(name='Day-Confirmed', x=temp.Date, y=temp['Day-Confirmed'], marker_color=cnf),\n    go.Bar(name='Tests performed', x=rus_tests_df.Date, y=rus_tests_df.Day_tests, marker_color=tst)\n])\n# Change the bar mode\nfig.update_layout(barmode='stack', yaxis_type=\"log\", title='Tests performed and confirmed cases per day in Russia')\nfig.show()","be1ebd3f":"temp = rus_sum_df.melt(id_vars=\"Date\", \n                 value_vars=['Day-Confirmed', 'Day-Deaths', 'Day-Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             color_discrete_sequence=[cnf, dth, rec])\nfig.update_layout(barmode='group', title='New registered cases in Russia per day', yaxis_title='')\nfig.show()","835aafcd":"# Growth factor\ndef growth_factor(df):\n    df['Growth-Factor'] = 1\n    for i in range(1, len(df)):\n        df.loc[i, 'Growth-Factor'] = df.loc[i, 'Day-Confirmed'] \/ df.loc[i-1, 'Day-Confirmed']\n    \n    df['Growth-Factor-Week'] = 1\n    for i in range(7, len(df)):\n        gf = 0\n        for j in range(7):\n            gf += df.loc[i-j, 'Day-Confirmed'] \/ df.loc[i-j-1, 'Day-Confirmed']\n        df.loc[i, 'Growth-Factor-Week'] = gf \/ 7\n    return df\n\nrus_sum_df = growth_factor(rus_sum_df)","32da5b2a":"temp = rus_sum_df[rus_sum_df['Date'] >= pd.Timestamp('2020-03-1')]\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Growth-Factor', 'Growth-Factor-Week'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             color_discrete_sequence=[cnf, rec, dth],\n             title='Growth Factor of confirmed cases in Russia')\nfig.update_layout(barmode='group')\nfig.add_trace(go.Scatter(x=temp['Date'], y=[1]*len(rus_sum_df),\n                         line=dict(color=dth, width=4, dash='dash'), name='Inflection Level'))\nfig.show()","7538064c":"def doubled(df):\n    df['Doubled-Days'] = 1\n    df['Incr-Fact'] = 2\n    for i in reversed(range(1, len(df))):\n        dd = 0\n        incr = 1.0\n        for j in range(1, i):\n            incr = df.loc[i, 'Confirmed'] \/ df.loc[i-j, 'Confirmed']\n            dd += 1\n            if incr >= 2.0:\n                break\n        df.loc[i, 'Doubled-Days'] = dd\n        df.loc[i, 'Incr-Fact'] = incr\n    return df\n\nrus_sum_df = doubled(rus_sum_df)","331e159c":"temp = rus_sum_df[rus_sum_df['Date'] >= pd.Timestamp('2020-03-1')]\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Doubled-Days', 'Incr-Fact'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             color_discrete_sequence=[cnf, dth],\n             title='How long did it take for the number of total confirmed cases to double?')\nfig.update_layout(barmode='group', yaxis_title='Days \/ Factor')\nfig.show()","6b7b4489":"# Prediction by current Doubled-Days and Incr-Fact\ndef predict(df, d_pred, reg_str='Country\/Region', name_suff='Prediction'):\n    # Mean values for 3 last days\n    dd = int(df.iloc[-3]['Doubled-Days'].mean())\n    incf = df.iloc[-1]['Incr-Fact'].mean()\n    today = df.iloc[-1]['Date']\n#     print(today, 'dd', dd, 'incf', incf)\n\n    pred = df.iloc[-dd:][['Date', 'Confirmed']].reset_index(drop=True)\n    for i in range(dd, d_pred + dd):\n        day = pred.iloc[i - 1]['Date'] + pd.DateOffset(days=1)\n        conf = pred.iloc[i - dd]['Confirmed'] * incf\n        pred = pred.append(pd.DataFrame([[day, conf]], columns=pred.columns), ignore_index=True)\n#         print('    ', day, conf)\n    \n    pred[reg_str] = df.iloc[0][reg_str] + name_suff\n    return pred, dd, incf\n\nd_pred = 14\nrus_pred, dd, incf = predict(rus_sum_df, d_pred)","43451f1f":"# temp = pd.concat([rus_sum_df, rus_pred.iloc[dd-1:]]).reset_index(drop=True)\n# px.line(temp, x=\"Date\", y=\"Confirmed\", color='Country\/Region',\n#         title='Prediction for {} days by current Doubled-Days({}) count and Increased-Factor({:.2})'.format(d_pred, dd, incf), height=600)","78e2a7df":"# Compare past predictions with current situation \n# d_pred = 28\n# rus_pred1, dd, incf = predict(rus_sum_df.loc[rus_sum_df.Date <= pd.Timestamp('2020-04-08')], d_pred, name_suff='Prediction minus a week')\n\n# temp1 = pd.concat([temp, rus_pred1.iloc[dd-1:]]).reset_index(drop=True)\n# px.line(temp1, x=\"Date\", y=\"Confirmed\", color='Country\/Region',\n#         title='Prediction for {} days by current Doubled-Days({}) count and Increased-Factor({:.2})'.format(d_pred, dd, incf), height=600)","e8e4be8c":"state_name = '\u0420\u043e\u0441\u0441\u0438\u044f'\n\nresult = rt_df.loc[rt_df.state == state_name].set_index('date')\nfig, ax = plt.subplots(figsize=(800\/72,600\/72))\nplot_rt(result, ax, state_name)\nax.set_title(f'Real-time $R_t$ for {state_name}')\nax.xaxis.set_major_locator(mdates.WeekdayLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))","b0ea6e90":"iso_df.head()","dfb3cd33":"temp = iso_df.groupby('Date')['Index'].mean().reset_index().sort_values('Date')\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Index'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='value', title='Russia Yandex self-isolation index')\nfig.update_layout(barmode='group', yaxis_title='Index')\n\nfig.show()","a846f860":"temp = rus_other_df[rus_other_df['Date'] >= pd.Timestamp('2020-02-16')]\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=temp.Date, y=temp.Control, name='For all the period', fill='tozeroy', line_color=cnf))\nfig.add_trace(go.Scatter(x=temp.Date, y=temp.Control_active, name='At given day', fill='tozeroy', line_color=act))\nfig.update_layout(title='People under medical supervision',\n                   xaxis_title='Date')\nfig.show()","bf57959d":"top = 20\n# temp = rus_vent_df.head(top).sort_values('Vent_idx').melt(id_vars=\"Region_eng\", \n#                    value_vars=['Vent_idx'])\n\n# fig = px.bar(temp, y=\"Region_eng\", x=\"value\", color='variable', \n#              color_discrete_sequence=[tst, dth, rec], orientation='h')\n# fig.update_layout(barmode='group', title='Ventilators per 100 000 people - Top {} region list'.format(top),\n#                   xaxis_title='Index value', yaxis_title='')\n# fig.show()","71ff5efb":"top = 20\n# temp = rus_vent_df.sort_values('ECMO_idx', ascending=False).head(top).sort_values('ECMO_idx')\n# temp = temp.melt(id_vars=\"Region_eng\", value_vars=['ECMO_idx'])\n\n# fig = px.bar(temp, y=\"Region_eng\", x=\"value\", color='variable', \n#              color_discrete_sequence=[dth, rec], orientation='h')\n# fig.update_layout(barmode='group', title='ECMO per 100 000 people - Top {} region list'.format(top),\n#                   xaxis_title='Index value', yaxis_title='')\n# fig.show()","ed03cf86":"moscow_cases = rus_df.loc[rus_df['Region\/City'] == '\u041c\u043e\u0441\u043a\u0432\u0430'].reset_index(drop=True)\n\ncm = sns.light_palette(\"green\", as_cmap=True)\nstyle = (moscow_cases.drop(['Region\/City', 'Region\/City-Eng', 'Region_ID'], axis=1).style\n         .bar(subset=['Confirmed', 'Deaths'], color='#67000d')\n         .bar(subset=['Recovered'], color='#00441b')\n         .background_gradient(cmap='Reds')\n         .background_gradient(cmap='Greens', subset=['Day-Recovered', 'Recovered'])    \n        )\nstyle","e0436d15":"temp = moscow_cases.melt(id_vars=\"Date\", \n                 value_vars=['Day-Confirmed', 'Day-Deaths', 'Day-Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             color_discrete_sequence=[cnf, dth, rec])\nfig.update_layout(barmode='group', title='New registered cases in Moscow per day', yaxis_title='')\nfig.show()","65573c16":"temp = moscow_cases.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case',\n             title='Moscow cases over time', color_discrete_sequence = [rec, dth, act])\n\ntemp1 = moscow_cases[moscow_cases['Date'] >= pd.Timestamp('2020-03-25')]\nfig.add_trace(go.Scatter(x=temp1.Date, y=temp1.Death_rate, name=\"Death Rate %\", yaxis=\"y2\", line_color=dth))\nfig.update_layout(yaxis2=dict(overlaying=\"y\", side=\"left\", position=0.19))\n\nfig.show()","2c8d9095":"# Growth factor\nmoscow_cases = growth_factor(moscow_cases)\n\ntemp = moscow_cases[moscow_cases['Date'] >= pd.Timestamp('2020-03-1')]\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Growth-Factor', 'Growth-Factor-Week'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             color_discrete_sequence=[cnf, rec, dth],\n             title='Growth Factor of confirmed cases in Moscow')\nfig.update_layout(barmode='group')\nfig.add_trace(go.Scatter(x=temp['Date'], y=[1]*len(rus_sum_df),\n                         line=dict(color=dth, width=4, dash='dash'), name='Inflection Level'))\nfig.show()","e0009437":"moscow_cases = doubled(moscow_cases)\n\ntemp = moscow_cases[moscow_cases['Date'] >= pd.Timestamp('2020-03-1')]\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Doubled-Days', 'Incr-Fact'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             color_discrete_sequence=[cnf, dth],\n             title='How long did it take for the number of total confirmed cases to double?')\nfig.update_layout(barmode='group', yaxis_title='Days \/ Factor')\nfig.show()","95a44aaf":"d_pred = 14\nmoscow_pred, dd, incf = predict(moscow_cases, d_pred, 'Region\/City-Eng')\n\n# temp = pd.concat([moscow_cases, moscow_pred.iloc[dd-1:]]).reset_index(drop=True)\n# px.line(temp, x=\"Date\", y=\"Confirmed\", color='Region\/City-Eng',\n#         title='Prediction for {} days by current Doubled-Days({}) count and Increased-Factor({:.2})'.format(d_pred, dd, incf), height=600)","7a4c5c96":"state_name = '\u041c\u043e\u0441\u043a\u0432\u0430'\n\nresult = rt_df.loc[rt_df.state == state_name].set_index('date')\nfig, ax = plt.subplots(figsize=(800\/72,600\/72))\nplot_rt(result, ax, state_name)\nax.set_title(f'Real-time $R_t$ for {state_name}')\nax.xaxis.set_major_locator(mdates.WeekdayLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))","f5c418f0":"temp = iso_df[iso_df.City == 'Moscow'][['Date', 'Index']].sort_values('Date')\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Index'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='value', title='Moscow Yandex self-isolation index')\nfig.update_layout(barmode='group', yaxis_title='Index')\n\nfig.show()","5bc5bd17":"# mos_death_df.tail()","ab16356e":"# Add may 2020 from another official source https:\/\/mosgorzdrav.ru\/ru-RU\/news\/default\/card\/4122.html\nmos_death_df = mos_death_df.append({'Month' : 5, 'Year' : 2020, 'Deaths' : 15713}, ignore_index=True)","175201c3":"# Moscow deaths March-May\nmos_month_deaths = {}\nmos_mean_deaths = {}\nmos_add_deaths = {}\nmos_add_post = {}\nmos_with_covid = {}\nfor i in range(4, 6):\n    mos_month_deaths[i] = rus_df.loc[(rus_df['Region\/City'] != '\u041c\u043e\u0441\u043a\u0432\u0430') &\n                              (rus_df.Date >= pd.Timestamp(f'2020-{i}-1')) &\n                              (rus_df.Date < pd.Timestamp(f'2020-{i+1}-1'))\n                              , 'Day-Deaths'].sum()\n    \n    mos_mean_deaths[i] = mos_death_df.loc[(mos_death_df.Month == i) & (mos_death_df.Year >= 2015) & (mos_death_df.Year <= 2019), 'Deaths'].mean()\n    mos_add_deaths[i] = mos_death_df.loc[(mos_death_df.Month == i) & (mos_death_df.Year == 2020), 'Deaths'].values[0] - mos_mean_deaths[i]\n    mos_add_post[i] = 0\n    mos_with_covid[i] = 0\n    if i == 5:\n        mos_add_post[i] = 2757 - mos_month_deaths[i]\n        mos_with_covid[i] = 2503\n    \n# print(mos_month_deaths)\n# print(mos_mean_deaths)\n# print(mos_add_deaths)\n\ntemp = pd.DataFrame([mos_month_deaths, mos_mean_deaths, mos_add_deaths]).transpose()\ntemp.columns = ['Covid', 'Mean', 'Add']\ntemp['Add_post'] = 0\n\ntemp['Unknown'] = temp.Add - temp.Covid\ntemp.Unknown = temp.Unknown.astype('int')\n\nfig = go.Figure(data=[\n    go.Bar(name='COVID-19 as main reason', x=temp.index, y=temp.Covid, text=temp.Covid, textposition='auto', marker_color=cnf),\n    go.Bar(name='Other reason', x=temp.index, y=temp.Unknown,  text=temp.Unknown, textposition='auto', marker_color=dth)\n])\n# Change the bar mode\nfig.update_layout(barmode='stack', title='Additional mortality in Moscow', xaxis_title='Month')\nfig.show()","95da7174":"reg_sum_df = rus_df.loc[(rus_df['Region\/City'] != '\u041c\u043e\u0441\u043a\u0432\u0430') & (rus_df['Region\/City'] != '\u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c')].reset_index(drop=True)\n\n# Regions data by days\nreg_sum_df = reg_sum_df.groupby('Date').apply(lambda df: df[day_cases].sum())\nreg_sum_df['Country\/Region'] = 'Russia regions'\nreg_sum_df = reg_sum_df.groupby('Country\/Region').apply(lambda df: df[day_cases].cumsum()).reset_index()\nreg_sum_df['Country\/Region'] = 'Russia regions'\nreg_sum_df = reg_sum_df.rename(columns={'Day-Confirmed': 'Confirmed', 'Day-Deaths': 'Deaths', 'Day-Recovered': 'Recovered'})\n\nreg_sum_df['Day-Confirmed'] = reg_sum_df.groupby('Country\/Region')['Confirmed'].diff()\nreg_sum_df['Day-Deaths'] = reg_sum_df.groupby('Country\/Region')['Deaths'].diff()\nreg_sum_df['Day-Recovered'] = reg_sum_df.groupby('Country\/Region')['Recovered'].diff()\nreg_sum_df.loc[0, ['Day-Confirmed', 'Day-Deaths', 'Day-Recovered']] = reg_sum_df.loc[0, ['Confirmed', 'Deaths', 'Recovered']].values \n\nreg_sum_df['Active'] = reg_sum_df['Confirmed'] - reg_sum_df['Deaths'] - reg_sum_df['Recovered']\nreg_sum_df['Death_rate'] = reg_sum_df['Deaths'] \/ reg_sum_df['Confirmed'] * 100\n\nregion_name = 'Russia province regions'\n\n# reg_sum_df.tail()","824ff06b":"\ncm = sns.light_palette(\"green\", as_cmap=True)\nstyle = (reg_sum_df.drop(['Country\/Region'], axis=1).style\n         .bar(subset=['Confirmed', 'Deaths'], color='#67000d')\n         .bar(subset=['Recovered'], color='#00441b')\n         .background_gradient(cmap='Reds')\n         .background_gradient(cmap='Greens', subset=['Day-Recovered', 'Recovered'])    \n        )\nstyle","8528134b":"temp = reg_sum_df.melt(id_vars=\"Date\", \n                 value_vars=['Day-Confirmed', 'Day-Deaths', 'Day-Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             color_discrete_sequence=[cnf, dth, rec])\nfig.update_layout(barmode='group', title=f'New registered cases in {region_name} per day', yaxis_title='')\nfig.show()","34467919":"temp = reg_sum_df.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case',\n             title=f'{region_name} cases over time', color_discrete_sequence = [rec, dth, act])\n\ntemp1 = reg_sum_df[reg_sum_df['Date'] >= pd.Timestamp('2020-03-28')]\nfig.add_trace(go.Scatter(x=temp1.Date, y=temp1.Death_rate, name=\"Death Rate %\", yaxis=\"y2\", line_color=dth))\nfig.update_layout(yaxis2=dict(overlaying=\"y\", side=\"left\", position=0.20))\n\nfig.show()","deeef399":"# Growth factor\nreg_sum_df = growth_factor(reg_sum_df)\n\ntemp = reg_sum_df[reg_sum_df['Date'] >= pd.Timestamp('2020-03-1')]\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Growth-Factor', 'Growth-Factor-Week'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             color_discrete_sequence=[cnf, rec, dth],\n             title=f'Growth Factor of confirmed cases in {region_name}')\nfig.update_layout(barmode='group')\nfig.add_trace(go.Scatter(x=temp['Date'], y=[1]*len(rus_sum_df),\n                         line=dict(color=dth, width=4, dash='dash'), name='Inflection Level'))\nfig.show()","4873c867":"reg_sum_df = doubled(reg_sum_df)\n\ntemp = reg_sum_df[reg_sum_df['Date'] >= pd.Timestamp('2020-03-1')]\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Doubled-Days', 'Incr-Fact'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             color_discrete_sequence=[cnf, dth],\n             title='How long did it take for the number of total confirmed cases to double?')\nfig.update_layout(barmode='group', yaxis_title='Days \/ Factor')\nfig.show()","e2ecb2fb":"Russia summary table","2c069bf3":"# Russian data","27287906":"# Regions without Moscow and Moscow region","bbb6c726":"Moscow summary table","303f2446":"Simple prediction by using current Doubled-Days count and Increased-Factor. In real-world the variables constantly changing for various reasons.","7aef21bd":"**Growth Factor**\n\nGF = Daily-Confirmed[i] \/ Daily-Confirmed[i-1]\n\nGFW = mean(GF[i-7] ... GF[i])","f9d76b64":"# Moscow","bfd9d35a":"# Region wise Data","b0a9c11c":"## Comparison with other countries\nUse \"Days from firs case\" instead \"Date\" column","06639f6b":"**Estimated Moscow COVID-19's  Rt  in Real-Time** \n* [Detailed description](https:\/\/www.kaggle.com\/fo2rist\/estimating-covid-19-rt-in-real-time-russia)","c0228478":"[Yandex self-isolation index](https:\/\/yandex.ru\/company\/researches\/2020\/podomam) -- [Map](https:\/\/yandex.ru\/maps\/covid19\/isolation?ll=81.460685%2C55.691496&z=4)","555a92e2":"# Analyzing COVID-19 situation in Russia","277b7f12":"*Incr-Fact - increase factor between today and N days before","9c2b016c":"# Datasets","b9d135d6":"* [Russia dataset](https:\/\/www.kaggle.com\/kapral42\/covid19-russia-regions-cases)\n* [World dataset](https:\/\/www.kaggle.com\/kapral42\/covid19yandexdataset)","f58c8d03":"**Estimated COVID-19's  Rt  in Real-Time** \n* [Detailed description](https:\/\/www.kaggle.com\/fo2rist\/estimating-covid-19-rt-in-real-time-russia)","7ae820d3":"# **Import**","b00a219a":"Additional mortality = (Deaths for current month) - mean(Values of deaths for current month per 5 previous years)","2bdf1788":"* [Russia geo plotting notebook](https:\/\/www.kaggle.com\/kapral42\/covid-19-russia-geo-plotting)\n* [Estimating COVID-19 Rt in Real-Time. Russia](https:\/\/www.kaggle.com\/fo2rist\/estimating-covid-19-rt-in-real-time-russia) Thanks [@fo2rist](https:\/\/www.kaggle.com\/fo2rist) for contribution"}}