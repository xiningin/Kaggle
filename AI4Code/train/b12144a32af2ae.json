{"cell_type":{"f5f141c8":"code","cc988c5d":"code","1cf8a986":"code","5d96fc27":"code","f6672268":"code","62b0c6ff":"code","950af5a1":"code","575f7d80":"code","3ff76862":"code","29cee061":"code","8863732b":"code","a75df605":"code","0bd1d584":"code","600c0f5a":"code","a21b2142":"code","6ee2c64e":"code","6a47dd82":"code","2aa82872":"code","aa39a8cc":"code","d0a59248":"code","b7d50bef":"code","a910daf2":"code","412fd6c8":"code","868d957a":"code","fee8c880":"code","c56d65f6":"code","a41fd487":"code","309710f1":"markdown","419d14b7":"markdown","697942d3":"markdown","75ea3635":"markdown","de5397b7":"markdown","23d50146":"markdown","a5c6f434":"markdown","390d8001":"markdown","49560140":"markdown","42f5e86f":"markdown","8ab5cb6e":"markdown"},"source":{"f5f141c8":"#multiply\nmultiply = lambda x,y: x*y\nmultiply(205,311)","cc988c5d":"# power of\npower = lambda x,y : x*y\npower(2,3)","1cf8a986":"some_num = [2,4,6,8]\ndouble = map(lambda x: x+x, some_num)\nprint(double)   # This will return object details\nprint(list(double))  # to print actual output we have to use list. ","5d96fc27":"strings = [\"My\", \"python\", 'is', 'GreaT']\ncap = map(lambda x: str.upper(x), strings)\nprint(cap)\nprint(list(cap))","f6672268":"attendance = [35,39,32,37,30,33]\nprint(sorted(attendance)) # Original data-set is not impacted.\nprint(attendance)","62b0c6ff":"print(sorted(attendance, reverse = False)) # Original data-set is not impacted.\nprint(attendance)","950af5a1":"print(sorted(attendance, reverse = True)) # Original data-set is not impacted.\nprint(attendance)","575f7d80":"attendance.sort() # Original data-set is impacted.\nprint(attendance)","3ff76862":"attendance.sort(reverse = True) # Original data-set is impacted.\nprint(attendance)","29cee061":"attendance = [35,39,32,37,30,33]\nattendance.sort(key = lambda x: x*1.5)\nattendance","8863732b":"class_attendance = [('9A', 35),('9B', 37), ('9C',30), ('9D',32),('9E',34)]\nclass_attendance","a75df605":"sorted(class_attendance, key = lambda x: x[1])","0bd1d584":"attendance = [35,39,32,37,30,33]\nabove_35 = filter(lambda x: x >=35, attendance)\nlist(above_35)","600c0f5a":"countries = [\"India\", \"US\", \"UK\", \"France\", \"China\", \"Germany\", \"UAE\"]\ncount_grt3 = list(filter(lambda x: len(x) > 3, countries))\ncount_grt3","a21b2142":"from functools import reduce","6ee2c64e":"nums = [10,20,22,25,29,35]\nsum_all = reduce(lambda x,y: x+y, nums)\nsum_all\n# Here the results of previous two elements are added to the next element and this goes on till the end of the list like (((((10+20)+22)+25)+29)+35).","6a47dd82":"max_value = reduce(lambda x,y: max(x,y), nums)\nmin_value = reduce(lambda x,y: min(x,y), nums)","2aa82872":"print(max_value, min_value)","aa39a8cc":"# lambda <arguments> : <Return Value if condition is True> if <condition> else <Return Value if condition is False>\nnums = [10,20,55,25,29,35]\nmax_value = reduce(lambda x,y: x if x > y else y , nums)\nmax_value","d0a59248":"scores = [[1,35,80], [2,32,75], [3,30,82],[4,33,75], [5,37,60]]\n# Lets assume above is a data of a Student with his ID, Attendance, and Marks in exam.\n# Here we have to give 2 additional marks if Attendance is more than 35, and if less then reduce marks by 2.\n\navg = 35\nnewmarks = map(lambda x: x[2]+2 if x[1] >= avg else x[2]-2, scores)\nlist(newmarks)","b7d50bef":"sales = [\n            {'country': 'India', 'sale' : 150.5},\n            {'country': 'Chine', 'sale' : 200.2},\n            {'country': 'US', 'sale' : 300.3},\n            {'country': 'UK', 'sale' : 400.6},\n            {'country': 'Germany', 'sale' : 500.9}\n        ]\nsales","a910daf2":"# List out the Countries\ncountry_key = list(map(lambda x: x['country'], sales))\ncountry_key","412fd6c8":"# List out the sales\ncountry_sales = list(map(lambda x: x['sale'], sales))\ncountry_sales","868d957a":"India_sales = list(filter(lambda x: x['country'] == 'India', sales))\nIndia_sales","fee8c880":"# Get only high sales\nhigh_sales = list(filter(lambda x: x['sale'] > 250, sales))\nhigh_sales","c56d65f6":"list1 = [20,25,30,35,40]\nlist2 = [50,55,60,65,70]","a41fd487":"# add tow list\nadd_list = list(map(lambda x,y: x+y, list1, list2))\nadd_list","309710f1":"# Reduce function and lambda expersion - returns a single value\nThe **reduce()** function in Python takes in a function and a list as argument. The function is called with a lambda function and a list and a new reduced result is returned. This performs a repetitive operation over the pairs of the list. This is a part of functools module.","419d14b7":"# Basic of Lambda\nIn Python, we use the lambda keyword to declare an anonymous function, which is why we refer to them as \"lambda functions\". An anonymous function refers to a function declared with no name. Although syntactically they look different, lambda functions behave in the same way as regular functions that are declared using the def keyword. The following are the characteristics of Python lambda functions:\n\nA lambda function can take any number of arguments, but they contain only a single expression. An expression is a piece of code executed by the lambda function, which may or may not return any value.\nLambda functions can be used to return function objects.\nSyntactically, lambda functions are restricted to only a single expression.\n\nWe use the following syntax to declare a lambda function:\n\n> lambda argument(s): expression\n\nAs stated above, we can have any number of arguments but only a single expression. The lambda operator cannot have any statements and it returns a function object that we can assign to any variable.\n","697942d3":"# Aggregate Function with Lambda.","75ea3635":"# Using filter on dictionaries along with lambda.","de5397b7":"# Filter and Lambda Function\nThe Python's **filter()** function takes a lambda function together with a list as the arguments. It has the following syntax:\n\n> filter(object, iterable)\n\nThe object here should be a lambda function which returns a boolean value. The object will be called for every item in the iterable to do the evaluation. The result is either a True or a False for every item. Note that the function can only take one iterable as the input.\n\nA lambda function, along with the list to be evaluated, is passed to the **filter()** function. The **filter()** function returns a list of those elements that return True when evaluated by the lambda funtion. ","23d50146":"# Passing multiple list to lamdba","a5c6f434":"# Lambda on Dictionaries","390d8001":"# Sorting with Lambda function","49560140":"# Lambda function on nested list","42f5e86f":"# If; If..else in lambda\nUsing if else in lambda function is little tricky, the syntax is as follows,\n","8ab5cb6e":"# Map and Lambda Function\nLambda functions can be used together with Python's built-in functions like map(), filter() etc.\nThe **map()** function is another built-in function that takes a function object and a list. The syntax of map function is as follows:\n\n> map(object, iterable_1, iterable_2, ...)\n\nThe iterable to the **map()** function can be a dictionary, a list, etc. The **map()** function basically maps every item in the input iterable to the corresponding item in the output iterable, according to the logic defined by the lambda function."}}