{"cell_type":{"c07aa8b2":"code","a28e3fc6":"code","5fe65989":"code","385ca2cc":"code","9ac13fa0":"code","f739fe38":"code","49848cc1":"code","3f4f19f7":"code","cd7ac41e":"code","a2379df1":"code","708d5711":"code","390ae051":"code","2ee31a7f":"code","216d4950":"code","84ce96db":"code","250e8b14":"code","a54342a6":"code","9cd6394b":"code","d0ed23bc":"code","cf2087d1":"code","6adaf1a0":"code","5aec2bdf":"code","8e679acc":"code","8c465f83":"code","878d3a3c":"code","8f10a644":"code","63fecd09":"code","59d34673":"code","849cecec":"code","18957e7b":"code","5046d122":"code","f4cd45f5":"code","1d7f737e":"code","41575688":"code","8d17aa0f":"code","049636ca":"code","6431aac5":"code","76953d17":"code","393a0aae":"code","46ec7393":"code","cf9c129c":"code","c21a05e8":"code","44b7e178":"code","385fa2cb":"code","92b11d3f":"code","ff1ebc7a":"code","4ce2f75b":"code","c5a94b82":"code","5db96f61":"code","026afd8a":"code","50917ff5":"code","2b67b0c5":"code","d1c185a3":"code","752da46e":"code","ac457936":"code","14e4ba76":"code","faccfcf9":"markdown","a72d566e":"markdown","57681fc4":"markdown","dee8fe6b":"markdown","4900b195":"markdown","92ef9447":"markdown","481f174e":"markdown","94afb7a8":"markdown","92f9b8b8":"markdown","d9aaf77c":"markdown","7d83fa27":"markdown","d1127a5f":"markdown","c72673d6":"markdown","b89a38a5":"markdown","3869d01b":"markdown","2ca7fc52":"markdown","f341a66d":"markdown","f300aa76":"markdown","55d32324":"markdown","04851bc0":"markdown","9501e3fa":"markdown","bab51c55":"markdown","003359e1":"markdown","00ed2ac5":"markdown","08249929":"markdown","4fa14270":"markdown","3a320151":"markdown","d5e4644c":"markdown","a03cffd8":"markdown","206c7762":"markdown","44b027e5":"markdown","567d7e6e":"markdown"},"source":{"c07aa8b2":"# importing relevant libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport geopandas\nimport warnings\nimport datetime as dt\nimport matplotlib.pyplot as plt\nimport random\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\n\n%matplotlib inline\n\nwarnings.filterwarnings('ignore')\n\nsns.set(style = 'darkgrid') # setting style of facetgrid in seaborn","a28e3fc6":"# setting display options for dataframe\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 500)","5fe65989":"# reading file\n#encoding = 'utf-8-sig' , encoding = \"ISO-8859-1\"\nimport csv \ndf = pd.read_csv('..\/input\/gtd\/globalterrorismdb_0718dist.csv')\ndf.head()\ndf_original = df.copy()   # in case","385ca2cc":"df.shape     # dimension of data","9ac13fa0":"df.head()","f739fe38":" #just to display columns as row-wise to look all columns at once\ncolumns = df.columns.tolist()         \nprint(columns)","49848cc1":"# renaming relevant columns\ndf.rename(columns = {'iyear':'year','imonth':'month','iday':'day','region':'enc_region',\\\n                     'attacktype1_txt':'attacktype','attacktype1':'enc_attacktype',\\\n                     'provstate':'province','country':'enc_country',\\\n                     'targtype1_txt':'target_type','targtype1':'enc_target',\\\n                     'targsubtype1_txt':'target_subtype',\\\n                     'target1':'target_entity','weaptype1':'enc_weapon_type',\\\n                     'weaptype1_txt':'weapon_type','weapsubtype1_txt':'weapon_subtype','weapsubtype1':'enc_weapon_subtype',\\\n                     'corp1':'entity','natlty1':'enc_nationality','natlty1_txt':'nationality',\\\n                     'gname':'group','nkill':'killed','nwound':'wounded',\\\n                     'targsubtype':'enc_target_subtype',\\\n                     'ishostkid':'hostages\/kidnapping','INT_LOG':'cross_border',\\\n                     'INT_IDEO':'ideological_international'}, inplace = True)","3f4f19f7":"# categorizing columns based on data types\ncategorical = ['extended','crit1','crit2','crit3','doubtterr','alternative','alternative_txt','multiple','enc_country','country_txt','enc_region','region_txt','vicinity','specificity','enc_attacktype','attacktype','enc_weapon_type','weapon_type','enc_weapon_subtype','weapon_subtype','success','suicide','target_entity','enc_target','target_type','target_subtype','enc_nationality','nationality','claimed','property','cross_border','ideological_international','province','entity','group','hostages\/kidnapping','city','INT_MISC','INT_ANY','individual']\nnumerical = ['eventid','year','month','day','latitude','longitude','killed','nkillter','wounded']\ntext = ['approxdate','summary','related','location','motive']","cd7ac41e":"# converting specific columns to category data type\nfor item in categorical:\n    if item not in df.columns:\n        pass\n    else:\n        df[item] = df[item].astype('category')","a2379df1":"# unique categories in each categorical column\nfor feature in categorical:\n    print(feature,\":\",len(df[feature].unique()),'labels')\n","708d5711":"len(categorical)","390ae051":"df.describe()  #to get the basic quantitative information about the features of our data set","2ee31a7f":"# Function to get basic information about data (features and null values)\ndef null_info(df, columns):\n    df = df.drop(columns = columns)\n    \n    # create empty dataframe\n    df_null_info = pd.DataFrame(np.random.randn(0,9)*0,columns = ['% of columns containing non_missing values',\\\n                                                                  '% of columns containing missing values',\\\n                                                                  '% of columns containing >50% missing values',\\\n                                                                  '% of columns containing <=50% missing values',\\\n                                                                  '% of columns containing >90% missing values',\\\n                                                                  'No. of features',\\\n                                                                  'No. of categorical features',\\\n                                                                  'No. of numerical features',\\\n                                                                  'No. of Text features'])\n    \n    df_null = pd.DataFrame(df.isnull().sum()\/len(df))\n    df_null.columns = ['Null_values']\n    df_null_info.loc[0,'No. of features'] = round(df_null.shape[0])\n    df_null_info.loc[0,'No. of categorical features']= round(len(categorical))\n    df_null_info.loc[0,'No. of numerical features']= round(len(numerical))\n    df_null_info.loc[0,'No. of Text features']= round(len(text))\n    \n    df_null_info.loc[0,'% of columns containing non_missing values'] = round(100*len(df_null[df_null.Null_values ==0.0])\/len(df_null),2)\n    df_null_info.loc[0,'% of columns containing missing values'] = round(100*len(df_null[df_null.Null_values >0.0])\/len(df_null),2)\n    df_null_info.loc[0,'% of columns containing >50% missing values'] = round(100*len(df_null[df_null.Null_values >0.50])\/len(df_null),2)\n    df_null_info.loc[0,'% of columns containing <=50% missing values'] = round(100*len(df_null[df_null.Null_values <=0.50])\/len(df_null),2)\n    df_null_info.loc[0,'% of columns containing >90% missing values'] = round(100*len(df_null[df_null.Null_values >0.90])\/len(df_null),2)\n    df_null_info = df_null_info.rename(index = {0:'Values'})\n    return df_null_info.T\n\n ","216d4950":"null_info(df,['success','eventid'])","84ce96db":"# function to get missing and unique values in data w.r.t each column\ndef missing_unique(df):\n    df = df.drop(columns = ['success','eventid'])\n    df_null = pd.DataFrame()\n    for col in df.columns:\n        df_null.loc[col, 'Unique Categories'] = len(df[col].unique())\n        df_null.loc[col, '% of_Null_Values'] = round(df[col].isnull().sum()*100\/ len(df),2)\n        df_null.loc[col, 'dtype'] = df[col].dtype\n    print(\"Shape of the Data:\",df.shape)\n    # Visualizing the missing values\n    f,ax =plt.subplots(figsize=(20,6))\n    plt.xticks(rotation='90')\n    fig = sns.barplot(x = df_null.index , y = df_null['% of_Null_Values'], color = '#787887',alpha=0.5)\n    plt.tick_params(axis='x', which='major', labelsize=10 ,labelcolor = '#2C2E2B' )  # change appearance of tick and tick labels\n    plt.xlabel(\"Features\" , fontsize = 15)\n    plt.ylabel(\"% of_Null_Values\" , fontsize = 15)\n    plt.title(\"Missing_Values_in_the_Dataset\", fontsize = 20, loc = 'center',fontweight=\"bold\")\n    plt.show()\n    return df_null.sort_values(ascending = False, by = '% of_Null_Values')\n","250e8b14":"# verifying if there are any int\/float features which needed a eye to get converted\n# to categorical based on unique values (int\/float features with few categories)\nmissing_unique(df)","a54342a6":"# since data collection was in four parts w.r.t year so, we looked the changes in the data to get something interesting\ndf[df['year']>1997].isnull().sum()*100\/len(df[df['year']>1997])","9cd6394b":"df[df['year']>2008].isnull().sum()*100\/len(df[df['year']>2008])","d0ed23bc":"df[df['year']>2011].isnull().sum()*100\/len(df[df['year']>2011])","cf2087d1":"# Based on the above findings, we drop columns with >20% missing values (As imputing with more than this value might create bias in the data)\ndf = df.drop(columns = ['eventid','dbsource','specificity','guncertain1','INT_MISC','INT_ANY'])\ndf = df.loc[:,df.isnull().sum()\/len(df) <0.20]\ndf.head()","6adaf1a0":"# creating Datetime feature with relevant features\ndf['Date'] = pd.to_datetime(df[['year','month','day']], errors = 'coerce')\ndf.head()","5aec2bdf":"# creating relevant Date related and other important features\ndf['week'] = df['Date'].dt.isocalendar().week\ndf['day_name'] = df['Date'].dt.day_name()\ndf['weekday'] = df['Date'].dt.weekday\ndf['is_weekend'] = np.where(((df['Date']).dt.dayofweek) < 5,0,1)\ndf.dropna(subset = ['Date','latitude','longitude'], inplace = True)\ndf.reset_index(inplace = True, drop = True)\ndf['casualities'] = df['killed']+df['wounded']","8e679acc":"df.head()","8c465f83":"# Again looking for Null values\ndf.isnull().sum()","878d3a3c":"# Impute missing values using statistical method for numerical and categorical features\ndef impute_Nan(data, feature):\n    if (data[feature].dtype == 'int') or (data[feature].dtype == 'float'):\n        data[feature + \"_median\" ] = data[feature].fillna(data[feature].median())\n        #data[feature + \"_mean\" ] = data[feature].fillna(data[feature].mean())\n        data.drop(feature, axis = 1)\n    elif (data[feature].dtype == 'category') or (data[feature].dtype == 'bool'):\n        data[feature + \"_mode\" ] = data[feature].fillna(data[feature].mode()[0])\n        data.drop(feature, axis = 1)","8f10a644":"# let's check data type of all features\ndf.dtypes","63fecd09":"print('Country with Highest Terrorist Attacks:',df['country_txt'].value_counts().index[0])\nprint('Regions with Highest Terrorist Attacks:',df['region_txt'].value_counts().index[0])\nprint('Maximum people killed in an attack are:',df['killed'].max(),'that took place in',df.loc[df['killed'].idxmax()].country_txt)","59d34673":"# Just to make sure\ndf_copy = df.copy()\ndf_copy1 = df.copy()\ndf_copy.drop(columns = ['enc_country','enc_region','enc_attacktype','enc_target','enc_nationality','enc_weapon_type','enc_weapon_subtype'],inplace = True)\ndf_copy1.drop(columns = ['enc_country','enc_region','enc_attacktype','enc_target','enc_nationality','enc_weapon_type','enc_weapon_subtype'],inplace = True)","849cecec":"df_copy['weapon_type'] = df_copy['weapon_type'].apply(lambda x: x.split()[0] if 'Vehicle' in x.split() else x)","18957e7b":"# Visualizing all categorical features with countplot (UniVariate Plot)\n\ndef count_plot(data, feature, palette =None, ax = None):\n    if data[feature].value_counts().shape[0]>15:\n        plt.figure(figsize = (17,6)) # defining figure size\n        #fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15, 7))\n        ax = sns.countplot(x = feature, data = data,\\\n                           order = data[feature].value_counts()[:20].index, \\\n                           palette = palette, \\\n                           edgecolor=sns.color_palette('dark',7),\\\n                           ax = None)\n        #plt.rcParams['figure.dpi'] = 360\n        total = float(len(data))\n        ax.set_xticklabels(ax.get_xticklabels(), rotation =90)  # rotating x-axis labels\n        \n        sns.set_context('talk')  # setting size of labels , lines and other elements in plot but doesn't change overall style\n        for p in ax.patches:\n            percentage = '{:.1f}%'.format(100 * p.get_height()\/total , '.1f')  # to write % values of each bar on top\n            x = p.get_x() + p.get_width() \/ 2.  # to put % value in center of each bar\n            y = p.get_height()\n            ax.annotate(percentage, (x, y), ha = 'center' , va = 'center', xytext = (0, 9) , textcoords = 'offset points',fontsize = 16)\n\n        plt.show()\n    else:\n        plt.figure(figsize = (10,6))\n        ax = sns.countplot(x = feature, data = data, \\\n                           palette = palette,\\\n                           edgecolor=sns.color_palette('dark',7), \\\n                           order = data[feature].value_counts().index,\\\n                           ax = None)\n        #plt.rcParams['figure.dpi'] = 360\n        total = float(len(data))\n        ax.set_xticklabels(ax.get_xticklabels(), rotation =90)\n        \n        sns.set_context('talk')\n        for p in ax.patches:\n            percentage = '{:.1f}%'.format(100 * p.get_height()\/total , '.1f')  # to write % values of each bar on top\n            x = p.get_x() + p.get_width() \/ 2.   # to put % value in center of each bar\n            y = p.get_height()\n            ax.annotate(percentage, (x, y), ha = 'center', va = 'center', xytext = (0, 9) , textcoords = 'offset points',fontsize = 16)\n        \n    plt.tight_layout()\n    plt.show()\n","5046d122":"# Global setting parameters for Plot\n# params = {'legend.fontsize': 'medium',    #\u2018xx-small\u2019, \u2018x-small\u2019, \u2018small\u2019, \u2018medium\u2019, \u2018large\u2019, \u2018x-large\u2019, \u2018xx-large\n#           'figure.figsize': (15, 5),\n#          'axes.labelsize': 'medium',\n#          'axes.titlesize':'medium',\n#          'xtick.labelsize':'medium',\n#          'ytick.labelsize':'medium'}\n# plt.rcParams.update(params)","f4cd45f5":"# converting categories to object type for renaming labels for proper visualization of plot (though renaming can be done earlier without this)\ncolumns = list()\nfor item in df_copy.select_dtypes('category'):\n    columns.append(item)\n\nfor item in columns:\n    if item not in df_copy.columns:\n        pass\n    else:\n        df_copy[item] = df_copy[item].astype(object)","1d7f737e":"# renaming labels from numerics to string for proper naming convention\ndef label_rename(data , feature):\n    if data[feature].nunique() == 2:\n        data[feature +\"_rename\"] = data[feature].map({0:'Unsuccessful attempt' ,1:'Successful attempt'} )\n    elif data[feature].nunique() == 3 :\n        data[feature+\"_rename\"] = data[feature].map({0:'Unsuccessful attempt' , 1:'Successful attempt' , -9:'Unknown'} )\n    \n    return data[feature+\"_rename\"]","41575688":"# Country-wise analysis of Terror Attacks and their destruction\n\ndef country_analysis(data , country=None , feature1=None , feature2=None , line_color=None , palette=None , title =None):\n    plt.figure(figsize = (20,17))\n    #Plot 1\n    plt.subplot(2,2,1)\n    sns.countplot(y = data.loc[data['country_txt'] == country]['city'] ,\\\n                  order = data.loc[data.country_txt == country].city.value_counts()[:10].index,\\\n                  data = data ,\\\n                  palette = sns.color_palette(palette,10),\\\n                  edgecolor = sns.color_palette('dark',5))\n    plt.xticks(rotation = 90)\n    plt.title(f\"Terror attacks on Top 10 cities of {country}\",weight = 'bold' ,fontsize = 18 ,loc = 'left')\n    plt.xlabel('Count',fontsize = 20)\n    plt.ylabel('City',fontsize = 20)\n    \n    #Plot 2\n    plt.subplot(2,2,2)\n    plt.pie(x = label_rename(data.query('country_txt == @country') , feature1).value_counts().values.tolist() ,\\\n            labels = label_rename(data.query('country_txt == @country') , feature1).value_counts().index.tolist() ,\\\n            autopct='%1.1f%%' ,\\\n            #explode = np.linspace(0.05 ,0.1  , 2) ,\\\n            pctdistance=0.45,\\\n            wedgeprops={\"edgecolor\":\"1\",'linewidth': 1,\n                    'linestyle': 'dashed', 'antialiased': True},  textprops={'fontsize':20})\n    my_circle=plt.Circle( (0,0), 0.7, color='white')\n    p=plt.gcf()\n    p.gca().add_artist(my_circle)\n    plt.title(title ,weight = 'bold' ,fontsize = 18 ,loc = 'left',pad =30 )  # f\"Terrorist {feature1} rate in {country}\"\n    plt.axis('equal')\n    \n    #Plot 3\n    plt.subplot(2,2,3)\n    data.query('country_txt == @country').groupby(['year'])['casualities'].sum().plot(xticks = data.loc[data.country_txt == country].groupby(['year'])['casualities'].sum().index, rot=90 , color = line_color)\n    plt.title(f\"Total casualities from (1970 - 2017) in {country}\", fontdict = {'fontsize' : 18 , 'weight': 'bold' } , loc = 'left')\n    plt.ylabel(\"Casualities\" ,fontsize = 20)\n    plt.xlabel('Year',fontsize = 20)\n   \n    \n    \n    #Plot 4\n    plt.subplot(2,2,4)\n    sns.countplot(x = data.query('country_txt == @country').group ,\\\n                  data = data ,\\\n                  order = data.query('country_txt == @country').group.value_counts()[:10].index[1:],\\\n                  palette = sns.color_palette(palette,7),\\\n                  edgecolor = sns.color_palette('dark',5))\n    plt.title(f\"Terrorist Groups active\/were active in {country}\",weight = 'bold' ,fontsize = 18 , loc = 'left')\n    plt.xticks(rotation =90)\n    plt.xlabel('Group',fontsize = 20)\n    plt.ylabel('Attack_Count',fontsize = 20)\n    \n    plt.subplots_adjust(wspace = 1 ,hspace =0.5 ,top = 0.5 , bottom = 0.1)  # tune the subplot layout\n    plt.tight_layout()   #to avoid overlapping of subplots and fit them cleanly in figure\n    plt.show()\n    ","8d17aa0f":"count_plot(df_copy,'country_txt', 'afmhot')","049636ca":"# Comparing No. of Attacks with Killings for each country\nattacks = df_copy.country_txt.value_counts()[:20].to_frame()\nattacks.columns = ['Attacks']\nkills = df_copy.groupby(['country_txt'])['killed'].sum().sort_values(ascending =False).to_frame()\nattacks.merge(kills, how = 'left' , left_index = True, right_index = True ).plot.bar(width = 0.8 , color = sns.color_palette('copper_r',2))\nfig=plt.gcf()\nfig.set_size_inches(18,6)\nplt.ylabel(\"Count\" ,fontsize = 15)\nplt.xlabel(\"Country\",fontsize = 15)\nplt.show()","6431aac5":"df_copy['casualities'] = df_copy['killed']+df_copy['wounded']","76953d17":"impute_Nan(df_copy , 'casualities')","393a0aae":"# Plotting geo_coordinates using Plotly Mapbox country wise\n# if there is no attack happened in any country, it would not be in this data\n\nmapbox_access_token = \"pk.eyJ1IjoibWF0c3VqanUiLCJhIjoiY2tmcXFiczFiMGRpdzMybzBxZmxtaTVxbiJ9.0zdao0fZdKyGb7CO8dPAVg\"\ndef geo_coordinate(data , country = None , color =None):\n    if country is not None:\n        data = data[data['country_txt'] == country]\n        random.seed(210)\n        zoom = 5\n    else:\n        data = data\n        country = 'Whole World'\n        zoom = 2\n    \n    fig = go.Figure()\n    new_customdatadf = np.stack(  # stacking of columns along last axis\n    (\n        data[\"casualities_median\"],\n        data[\"city\"],\n        data[\"year\"],\n        data[\"province\"],\n        data['country_txt'],\n        data['group'],\n        data['attacktype']\n    ),\n    axis=-1,\n    )\n    fig.add_traces(\n        go.Scattermapbox(\n            lon=data[\"longitude\"],\n            lat=data[\"latitude\"],\n            mode=\"markers\",\n            marker=dict(size=10, allowoverlap=False, opacity=0.7, color=color),\n            # text=df_sub[\"casualities_median\"],\n            customdata=new_customdatadf,  # we have to first stack the columns along the last axis\n            hovertemplate=\"\"\"<extra><\/extra>lat: %{lat}<br>long: %{lon}<br>casualities: %{customdata[0]}<br>city: %{customdata[1]}<br>State: %{customdata[3]}<br>Country: %{customdata[4]}<br>Group taken responsibiltiy: %{customdata[5]}<br>Attack_type: %{customdata[6]}<br>attack happened in: %{customdata[2]}\"\"\",\n        ),\n    )\n\n    fig.update_layout(\n        title=dict(\n            text=f\"<b>Satellite Overview of {country}<\/b>\",\n            font=dict(family=\"Cabin Sketch\", size=20, color=\"black\",),\n            xanchor=\"left\",\n            xref=\"container\",\n        ),\n        uirevision=\"foo\",\n        hovermode=\"closest\",\n        hoverdistance=2,\n        mapbox=dict(\n            accesstoken=mapbox_access_token,\n            style=\"dark\",\n            center=dict(\n                lat=random.choice(data[\"latitude\"].tolist()),\n                lon=random.choice(data[\"longitude\"].tolist()),\n            ),\n            zoom=zoom,\n        ),\n        annotations = [dict(showarrow=False,\n        text='(Zoom In\/Zoom Out to see all points properly)',\n        xanchor='right',\n        x=1,\n        yanchor='top',\n        y=1.1\n                )]\n    )\n    return fig","46ec7393":"geo_coordinate(df_copy , color = 'Crimson' , country = 'Iraq')","cf9c129c":"# Function for plotting heatmap w.r.t casualities for countries\npx.set_mapbox_access_token(mapbox_access_token)\ndef geo_coordinate_heatmap(data , country):\n    data = data[data['country_txt'] == country]\n    random.seed(210)\n    zoom = 4\n    fig = px.density_mapbox(data, lat='latitude', lon='longitude', z='casualities_median', radius=10,\n                        center=dict(\n                lat=random.choice(data[\"latitude\"].tolist()),\n                lon=random.choice(data[\"longitude\"].tolist()),\n            ), zoom=zoom,\n                        mapbox_style=\"dark\", range_color=[data['casualities_median'].min(),data['casualities_median'].max()])\n    fig.show()","c21a05e8":"geo_coordinate_heatmap(df_copy , 'Iraq')","44b7e178":"country_analysis(df_copy, country ='Iraq', feature1 ='success', title = \"Success Rate of Terrorist Attacks in Iraq\", palette = 'inferno', line_color = 'crimson')","385fa2cb":"country_analysis(df_copy, country = 'Pakistan' , feature1 = 'success' , title = \"Success rate of terror attacks in Pakistan\" , palette = 'inferno' , line_color = 'r')","92b11d3f":"count_plot(df_copy,'region_txt','afmhot')","ff1ebc7a":"count_plot(df_copy, 'province','afmhot')","4ce2f75b":"count_plot(df_copy, 'suicide','twilight')","c5a94b82":"count_plot(df_copy,'city','afmhot')","5db96f61":"count_plot(df_copy , 'target_type')","026afd8a":"count_plot(df_copy, 'weapon_type')","50917ff5":"# Is there any specific type of wepaons uused with respect to region?\nfig, ax = plt.subplots(nrows=1, ncols=2 , squeeze = False , figsize =(20,10))\nsns.countplot(x = 'attacktype', data = df_copy,\\\n                           order = df_copy['attacktype'].value_counts()[:20].index, \\\n                           palette = 'inferno', \\\n                           edgecolor=sns.color_palette('dark',7),\\\n                           ax = ax[0][0])\n        \ntotal = float(len(df_copy))\nlabels = ax[0][0].get_xticklabels()\nax[0][0].set_xticklabels(labels,rotation =90, fontsize = 'x-small')  # rotating x-axis labels\n        #plt.tight_layout()\nsns.set_context('talk')  # setting size of labels , lines and other elements in plot but doesn't change overall style\nregion_attacktype=pd.crosstab(df_copy.region_txt, df_copy.attacktype).plot(stacked=True,width=1,color=sns.color_palette('afmhot',9),kind = 'barh' , ax = ax[0][1])\nplt.legend(fontsize = 12)\nplt.tight_layout()  # minimize the overlap of subplots\nplt.show()","2b67b0c5":"terror_region  = pd.crosstab(df_copy.year , df_copy.region_txt )\nterror_region.plot()\n\nfig=plt.gcf()\nfig.set_size_inches(25,10)\nplt.legend(loc='upper left')\nplt.show()\n#plt.legend(loc='center right', bbox_to_anchor=(1.25, 0.5), ncol=1)","d1c185a3":"plt.subplots(figsize=(15,6))\nsns.countplot('year',data=df,palette='afmhot_r',edgecolor=sns.color_palette('dark',5))\nplt.xticks(rotation=90)\nplt.title('Number Of Terrorist Activities Each Year')\nplt.show()","752da46e":"plt.subplots(figsize=(15,6))\nsns.countplot('month',data=df,palette=sns.color_palette('Paired',10),edgecolor=sns.color_palette('dark',5))\n#plt.xticks(rotation=90)\nplt.title('Number Of Terrorist Activities Each Month')\nplt.show()","ac457936":"plt.subplots(figsize=(15,6))\nsns.countplot('day',data=df,palette=sns.color_palette('Paired',10),edgecolor=sns.color_palette('dark',5))\n#plt.xticks(rotation=90)\nplt.title('Number Of Terrorist Activities Each Day')\nplt.show()","14e4ba76":"df_original.motive.dropna().sample(10).tolist()","faccfcf9":"As we can see most of the attacks are concentrated near Capital of Iraq. This tells us how much these groups hate Government Organizations. and Moreover,the heatmap shows that this can densely populated area.","a72d566e":"#### This tells us that most of the variables have more than 80% missing values.","57681fc4":"- This graph confirms that Attacks increase exponentially after 2002 as ISIS and their groups became active and gain control of Crude Oil refineries in Middle East from which they get most of their cash for notorious activities.\n- This follows attack in neigbouring regions where there are under-developed region like Afghanistan and Pakistan i.e South Asia region as religious propoganda can be spread easily where there is poverty among people.","dee8fe6b":"Findings:\n- 79% columns in the dataset have missing values\n- 57% columns have more than 50% of missing values\n- 46% columns have more than 90% of missing values\n- Only 21% columns have zero missing values","4900b195":"#### As we can see there are most of categorical variables in the dataset and only numerical variable relevant to us will be killed , wounded. I won't be considering datetime variables and geographics coordinates as numerical values. They will be explored in different format.\n","92ef9447":"## 1. Importing relevant libraries","481f174e":"- Look at the bar of Iraq, it shows terrorist are very effective in getting what they wish for i.e destruction in terms of lives and same can be said for top 5 countries.\n- It also shows how **Intelligence and Security agencies** are not as **efficient and vigilant** w.r.t internal security of their countries.\n- This also proves the above assumption that **attacks generally happens in densely populated areas** thus it will eventually claim many lives.\n- The most safe country w.r.t this chart is France as the \"attacks > kills\".","94afb7a8":"- It seems like terror Attacks have been increased substantially since 2002 and the main group responsible for these is ISIL (Islamic State and it's groups local to region).\n- The casualities have also increased since 2002 as the success rate of attack is good.\n- The success rate of their attacks is very much good (~89%) and as mentioned earlier, the capital Baghdad is their favourite seems like.","92f9b8b8":"### What to expect?\n   In order to understand our data, we have to look at each variable to understand their meaning and relevance on the data. And yeah, this will be time consuming but it will give us flavours of dataset. We will try to follow this way:\n   - Variable : Variable Name\n   - Type : Identify the variable's type. There are 2 possible ways i.e numerical and categorical. \n      - Numerical : variables for which values are numbers\n      - Categorical : variables for which values are categories\n   - Segment : Identify the variable's segment. For now it seems like we might have 4 segments i.e \n       - Location : variables which gives some type of information about the location of the attack\n       - Damage : variables which gives some type of information about the damages it occurred after the attack whether life or property\n       - Attack type : variables which gives information about type of attack which took place i.e which can be linked to terrorism\n       - Weapons used : variables which gives information about the weapons used during these attacks\n   ","d9aaf77c":"- As expected from above graphs, the most affected regions are **MIddle-East and South Asia** which comprises of more than **50% terror attacks** on the Planet.","7d83fa27":"Let's change the Date columns to Datetime type, it might be helpful as we move further.","d1127a5f":"### **\"The threatened or actual use of illegal force and violence by a non-state actor to attain a political, economic, religious, or social goal through fear, coercion, or intimidation.\"** - _Definition of Terrorism_","c72673d6":"#### From these informations we can already see that some features won't be relevant in our exploratory analysis as there are too much missing values (such as attacktype2 and targtype3). Plus there is so much features to analyse that it may be better to concentrate on the ones which can give us real insights. Moreover, it seems like there are **many categorical variables** by looking max values.","b89a38a5":"### ","3869d01b":"- It seems like most prominent attack mode of terrorist is **Bomb\/Explosive and Armed Assault** irrespective of any region if the attack happened there.\n- It might be due to easy accessibility of these as it doesn't require industrial setup to manufacture.\n","2ca7fc52":"- The most number of attacks took place till now are in **Iraq** (~ 25,000) which is huge in (~ 50 years) means on average ~ 500 attacks per year i.e ~ 1.36 attacks per day.\n- It seems like in general eye as it is their daily job to plan and attack. (and also it seems like they are really good at this).\n- We can interpret this in general sense that there is so much instability in this country despite being \"**Oil Rich country**\".\n- The top 4 affected countries in list are either Islam as religion or Muslim majority neighbouring countries.","f341a66d":"## 2. Data cleaning","f300aa76":"**For Top 3 provinces here**:\n- Since Iraq is the most affected country hence it's capital i.e Baghdad will be first target of terrorist. **(They love to showoff their skills)**\n- However with respect to northern Ireland this is surprising for general eye as this is part of developed nation. Being follower of International Relations and interest in it, on being read about it, the incidents happened might be due to historical border issues which was due to Colonial Rule with Republic of Ireland(different country). To summaries in brief, this province\/state which is part of United Kingdom has nationalistic people who want this state to divide from U.K and want to join in Republic of Ireland due to difference in Religious demographics i.e (Protestant and Catholic (forms of Christianity))among people.\n- Same is the issue with Balochistan which wants it's own country and doesn't want to be with Pakistan though historically after Pakistan independence, it's army forcefully captures Balochistan (then comprised of 4 princely states ) as it was asked to join into Pakistan by then leader of state \"Mohd. Ali Jinnah\" though the communique before partition of India, says it will give independent sovereign status to Kalat (formally known as Balochistan).\n- Out of top 20 provinces 6 are from Middle East and 6 from South Asia region.","55d32324":"- It seems like Terror groups really hate government or they don't like policies of theirs as ~ 50% attacks are Government_officials\/Police\/Military.","04851bc0":"- The Terrorist are fond of losing their lives in the name of so called \"**JIHAD**\" (which is according to them losing life for greater good).\n- This data seems highly imbalanced for modelling.","9501e3fa":"- As expected Baghdad is most affected city(and yes this is also called province).\n- However the cities included here affected because either they are capital of state or densely populated areas in the respective countries i.e easy target for terrorists. ","bab51c55":"## Methods involve in EDA\n   - Understanding the problem : Here we will look all the variables and do philosophical analysis about their meaning and importance for the problem\n   - Univariate study : We will look at each relevant variable and get to know more about it.\n   - Bivariate study : We will assess the relationship between each variable with the relevant variable if necessary.\n   - Basic cleaning : We'll clean the dataset and handle the missing data, outliers and categorical variables.\n ","003359e1":"- These guys doesn't even take a break. ","00ed2ac5":"- Look at the increase in cases of attack year after year after 2002-2004","08249929":"#### The main question I will try to answer with this Data Exploration is **how relevant is this definition and details related to it** with the data we have?\n#### And may be I might try to fit the definition with respect to the data at the end.","4fa14270":"### Motivation behind theses attacks?","3a320151":"- Not even a single day :(","d5e4644c":"#### As being mentioned in the [GTD Database](https:\/\/start.umd.edu\/gtd\/downloads\/Codebook.pdf) that data collection has been done by different agencies during different interval of time, so as we tried to break these datasets into these different intervals, we find that data before 2007 have mostly missing values. So we can drop values before 1997. But since most of the columns have more than 20% values missing which tells us we should drop the entire column as we should focus on features which might be value to model if built in future.","a03cffd8":"## 4. Conclusion\n#### To conclude with what I find with data and am i correct with these is upto the reader and many people will have many perspective in what they are receiving as and how they are receiving with their own biases which everyone have in some way. \n#### I would say that I found the the definition relevant in most sense with respect to these words used in as \"threatening\",\"illegal use of force\",\"non-state actors\",\"Violence\",\"Political\",\"Religious\",\"Social\",\"fear\",\"coercion\",\"intimidation\" but what I didn't find is the \"economic\" goal as in how terrorism can used for attaining economic goal. However, I will say that this definition might not only tells the motive as direct action which we see but there may be indirect goals which are fulfilled by these attacks.\n#### I find this definition to be more relevant as **\"Terrorism is the use or threat of violence that aims to spread fear in a population, and to advance a political, ideological or religious cause.**\"","206c7762":"## 3. Self created Important Functions for Data Exploration","44b027e5":"- Bombs\/Explosives are most used weapon along with Guns (might be AK-47 or their variant as seen often in videos).\n- We can take deep breath as these notorious groups **still didn't possess weapons of mass destruction like Biological\/Radiological** as seen by data till now.","567d7e6e":"- The main group responsible for attacks in Pakistan is \"Tehrik-i-Taliban Pakistan\" (Taliban group for this region) but as per current scenerio \"Baloch Republican Army\" is increasing their attacks.\n- Karachi seems like their favourite place and it means it is densly populated city of Pakistan.\n- Success Rate of these groups is also good in terms of achievement for them."}}