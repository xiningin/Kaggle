{"cell_type":{"1ccc4107":"code","f95d0ac0":"code","246b2f3d":"code","1ac0213b":"code","5feb81af":"code","e82eacf9":"code","89890bee":"code","14d9ebe5":"code","975a58cf":"code","a19bb533":"code","9b655758":"code","d5e5f565":"code","92672df8":"code","a64c6570":"code","56f44f70":"markdown","f3878ac4":"markdown","7d05c4dc":"markdown","b1af698d":"markdown","de811604":"markdown","b0ad8eaa":"markdown"},"source":{"1ccc4107":"!pip install chart_studio -qq # install the package","f95d0ac0":"# import necessary libraries\nimport numpy as np\nimport pandas as pd\nimport chart_studio.plotly as plt\nimport seaborn as sns\nimport plotly.express as plt_ex\nimport cufflinks as cf\nimport os\nimport plotly.graph_objects as go\nimport math\nimport ipywidgets as widgets\nfrom tqdm import tqdm\nfrom collections import Counter\nfrom ipywidgets import interact\n\n%matplotlib inline\nfrom plotly.offline import download_plotlyjs, plot, iplot, init_notebook_mode\ninit_notebook_mode(connected = True)\ncf.go_offline()","246b2f3d":"#read the data from .csv file\ncsv_2019 = \"..\/input\/vietnam-national-high-school-exam-scores\/ver2019.csv\"\ncsv_2020 = \"..\/input\/vietnam-national-high-school-exam-scores\/ver2020.csv\"\n\ndf1 = pd.read_csv(csv_2019)\ndf2 = pd.read_csv(csv_2020)\nprint(\"Number of students in 2019: \", len(df1))\nprint(\"Number of students in 2020\", len(df2))","1ac0213b":"#take a look at df1\n\ndf1.head()","5feb81af":"#take a look at df2\n\ndf2.head()","e82eacf9":"values = pd.unique(df1[\"Chemistry\"].dropna()) # remove the NA values\nvalues = sorted(list(values)) # rearrange the data unique values, this will be our x-axis\nprint(values)","89890bee":"df1[\"Chemistry\"] = pd.to_numeric(df1[\"Chemistry\"], downcast = \"float\") # convert the data into numbers\nitem_counts = df1[\"Chemistry\"].value_counts().sort_index() \nitem_counts = list(item_counts) \nprint(item_counts) #we have the frequencies of the values above, this will be our y-axis","14d9ebe5":"iplot([{\n    \"x\": values,\n    \"y\": item_counts\n}]) # test our first plot","975a58cf":"# dictionary to access the dataframe easier without if\/else\ndf_dict = {2019: df1, 2020: df2}\ndef create_plot(year, subject):\n    # follow the previous steps\n    values = sorted(list(pd.unique(df_dict[year][subject].dropna())))\n    freq = list(pd.to_numeric(df_dict[year][subject], downcast = \"float\").value_counts().sort_index())\n    layout = go.Layout(title=\"{}'s score frequency in {}\".format(subject, year),\n                       plot_bgcolor=\"#FFF\",\n                       xaxis=dict(title=\"Score\",\n                                  linecolor=\"#BCCCDC\",  # sets color of X-axis line\n                                  showgrid=False),  # removes X-axis grid lines\n                       yaxis=dict(title=\"Frequency\",  \n                                  linecolor=\"#BCCCDC\",  # sets color of Y-axis line\n                                  showgrid=False))  # removes Y-axis grid lines \n    fig = go.Figure(data = go.Scatter(x=values, y=freq),\n                    layout=layout)   \n    fig.show()","a19bb533":"create_plot(year=2020, subject=\"History\")","9b655758":"x = 2020\nprint(2020 if x==2019 else 2019)","d5e5f565":"# let's add a feature to compare two years with the compare_mode option\n\ndf_dict = {2019: df1, 2020: df2}\ndef create_plot(year, subject, compare_mode=False):\n    if not compare_mode:\n        values = sorted(list(pd.unique(df_dict[year][subject].dropna())))\n        freq = list(pd.to_numeric(df_dict[year][subject], downcast = \"float\").value_counts().sort_index())\n        layout = go.Layout(title=\"{}'s score frequency in {}\".format(subject, year),\n                           plot_bgcolor=\"#FFF\",\n                           xaxis=dict(title=\"Score\",\n                                      linecolor=\"#BCCCDC\",  # sets color of X-axis line\n                                      showgrid=False),  # removes X-axis grid lines\n                           yaxis=dict(title=\"Frequency\",  \n                                      linecolor=\"#BCCCDC\",  # sets color of Y-axis line\n                                      showgrid=False))  # removes Y-axis grid lines \n        fig = go.Figure(data = go.Scatter(x=values, y=freq),\n                        layout=layout)   \n        fig.show()\n    else:\n        values = sorted(list(pd.unique(df_dict[year][subject].dropna())))\n        freq1 = list(pd.to_numeric(df_dict[year][subject], downcast = \"float\").value_counts().sort_index())\n        freq2 = list(pd.to_numeric(df_dict[2020 if year==2019 else 2019][subject], downcast = \"float\").value_counts().sort_index())\n        layout = go.Layout(title=\"{}'s score frequency\".format(subject),    \n                           plot_bgcolor=\"#FFFFFF\",\n                           hovermode=\"x\",\n                           hoverdistance=100, # distance to show hover label of data point - a great indicator to compare the data\n                           spikedistance=1000, # distance to show spike\n                           xaxis=dict(title=\"Score\",\n                                      linecolor=\"#BCCCDC\",\n                                      showspikes=True, # show spike line for X-axis\n                                      # format spike\n                                      spikethickness=2,\n                                      spikedash=\"dot\",\n                                      spikecolor=\"#999999\",\n                                      spikemode=\"across\"),\n                           yaxis=dict(title=\"Frequency\",\n                                      linecolor=\"#BCCCDC\"))\n        fig = go.Figure(data = [go.Scatter(x=values, y=freq1, name=year),\n                                go.Scatter(x=values, y=freq2, name=2020 if year==2019 else 2019)],\n                        layout=layout)   \n        fig.show()","92672df8":"create_plot(year=2020, subject=\"Mathematics\", compare_mode=True)","a64c6570":"# interactive plot\nyear_wid=widgets.Dropdown(options=[2019,2020],\n                                  value=2019,\n                                  description='Year: ',\n                                  disabled=False) \nsub_wid=widgets.Dropdown(options=[\"Mathematics\",\"History\", \"Chemistry\", \"Geography\", \"Civic Education\", \"Physics\", \"Foreign Language\", \"Biology\", \"History\", \"Vietnamese Literacy\"],\n                                  value=\"Mathematics\",\n                                  description='Subject: ',\n                                  disabled=False)\ncompare_mode_wid=widgets.Checkbox(value=False,\n                                  description='Compare Mode',\n                                  disabled=False)\ninteract(create_plot, year=year_wid, subject=sub_wid, compare_mode=compare_mode_wid);","56f44f70":"# Visualizing National Vietnam High School Exam Scores\n\n- The data set is crawled and translated to English. Feel free to use it.\n- In this article, we will explore __*chart_studio*__ library to create interactive visualization of the given data.","f3878ac4":"# 3. Create interactive graph with the help of Jupyter widgets","7d05c4dc":"### Let's plot a scoring curve for Chemistry using Plotly (because I hate it)","b1af698d":"# 1. Import some libraries","de811604":"# 4. Decorate our graph","b0ad8eaa":"# 2. Explore the data and ... plot it!"}}