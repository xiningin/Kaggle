{"cell_type":{"c91b104c":"code","492692cd":"code","4ec3326c":"code","98cf625f":"code","d832eac8":"code","55798d25":"code","3e92eda0":"code","7e07ce52":"code","5aa93477":"code","7b9c0bbc":"code","f913fb1a":"code","055b0bdb":"code","2988eb4b":"code","27d5aa30":"code","4f9ba813":"code","4151ab43":"code","0e05a9c5":"code","fdbf6ae3":"code","27924a45":"code","20968b96":"code","5440fea9":"code","4873a328":"code","080a30e2":"code","55ad44e3":"code","9c49938f":"code","358bca54":"code","94ec4f4c":"code","5e938279":"code","bf7f7c96":"code","2a02ef63":"code","a8cbc484":"code","5821bd5c":"code","9c7920e0":"code","b0990f2d":"code","8fed1cf8":"code","00b51273":"code","d3309658":"code","7b5bdc5a":"code","0216925e":"code","07c980eb":"code","5aac186d":"code","7f119045":"code","b3fbf37f":"code","6b006d50":"code","e66dd9bf":"code","15aff958":"code","cc50e0f2":"code","33404540":"code","a7b8fbbd":"code","9ead70fc":"code","9eddc37b":"code","ad745e2d":"code","9df6c4f4":"code","7fafcf1f":"code","1a1d6018":"code","b69875b5":"code","6b10401a":"code","b797badc":"code","a487bdfd":"code","12d35bb8":"code","16261af4":"code","bb7c5bfb":"code","5e06faa0":"code","892eecd1":"code","3fb162f0":"code","b731faa5":"code","f4cb84bb":"code","4950823f":"code","0c5ff166":"code","97e7bb56":"code","a3d9d659":"code","c89e8f0b":"code","67ca6b69":"code","5dab5864":"code","8c0b62f9":"code","09b015fc":"code","3bc09827":"code","24c63aec":"code","fe0d08c6":"code","2f8ea348":"code","3ac32246":"code","44a9a9a2":"code","feacfba3":"code","1becc06b":"code","0d9c489a":"code","0caccce2":"markdown","b5f115c8":"markdown","42c84809":"markdown","9757f910":"markdown","a93ca15d":"markdown","00dfb0e1":"markdown","6d2967e1":"markdown","713dba9b":"markdown","d4f45f8b":"markdown","62cb7fb8":"markdown","a152c481":"markdown","1a6a6ab5":"markdown","ad718416":"markdown","16fae80f":"markdown","336d57fb":"markdown","03e6f1b3":"markdown","e55c78e9":"markdown","06664785":"markdown","5b332646":"markdown","3f8fe70f":"markdown","9f1275e1":"markdown","97ac98ac":"markdown","0137ca4b":"markdown","76dfa403":"markdown","92fcbf46":"markdown","dd96da26":"markdown","58780713":"markdown","43690ff6":"markdown","485bf493":"markdown","d26475be":"markdown","2ada2af0":"markdown","42ac6199":"markdown","5e53f9ec":"markdown","6dda3337":"markdown","243bc08a":"markdown","28c1a784":"markdown","b76f1ec0":"markdown","a3e82e84":"markdown","4f6079f8":"markdown","a77ddd41":"markdown","9a22db99":"markdown","16200471":"markdown","2be62ecd":"markdown","55766764":"markdown","a20bbebd":"markdown","028e2b3e":"markdown","605b7f4f":"markdown","14c380ba":"markdown","ecd67346":"markdown","6db002b0":"markdown","25d1a474":"markdown","af123b5e":"markdown","8a1a22e9":"markdown","549369f4":"markdown","19856b54":"markdown","b339ae37":"markdown","30204bfd":"markdown","e075401d":"markdown","5b26264f":"markdown","83acbeb1":"markdown","3cb32626":"markdown","ab893d8d":"markdown","941988c3":"markdown","1eaf42c5":"markdown","24ddca81":"markdown","fbe6de59":"markdown","515d0bdf":"markdown","89ff5bcc":"markdown","b36fcbb4":"markdown","c16b28c6":"markdown","5ce80fff":"markdown","1e1c1167":"markdown","1e8901ba":"markdown","1ca7291b":"markdown","5d6f0ce0":"markdown","77437310":"markdown","382c26eb":"markdown"},"source":{"c91b104c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom datetime import datetime\nfrom itertools import cycle, islice\nfrom datetime import date\nimport re\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import SVC \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","492692cd":"# This cell places figures to the centre \nfrom IPython.core.display import HTML\nHTML(\"\"\"\n<style>\n.output_png {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n}\n<\/style>\n\"\"\")","4ec3326c":"# First we read the csv data\ngoogle_data = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')\ngoogle_data","98cf625f":"google_data.shape","d832eac8":"google_data.info()","55798d25":"# Number of NaN's in every column\ngoogle_data.isnull().sum()\n","3e92eda0":"google_data.Category.isnull().sum() # Checking whether Category column has null-valued entries ","7e07ce52":"google_data.Category.unique() # Unique categories","5aa93477":"google_data[google_data.Rating > 5]","7b9c0bbc":"google_data.drop([10472], inplace = True)","f913fb1a":"# Check whether the row has been deleted\ngoogle_data.iloc[10470:10474]","055b0bdb":"# Barchart\nmy_colors = list(islice(cycle(['b', 'r', 'g', 'c', 'y', 'm','k']), None, len(google_data))) # a way to represent different colours \n\ngoogle_data.Category.value_counts().plot(kind = 'bar', color = my_colors, figsize = (10,8), title = 'Number of apps in each category');\nplt.xlabel('Category')\nplt.ylabel('Frequency');","2988eb4b":"# Piechart\ngoogle_data['Category'].value_counts().plot.pie(y = google_data['Category'], figsize = (15, 16), label = '', autopct = '%1.1f%%', title = 'Distribution of apps by category', );# label = '' removes column name","27d5aa30":"# We clean the Rating column with the help of lambda function\ngoogle_data['Rating'] = google_data['Rating'].apply(lambda x: str(x).replace('nan', 'NaN') if 'nan' in str(x) else str(x))  # Replace nan with NaN\ngoogle_data['Rating'] = google_data['Rating'].apply(lambda x: float(x)) # Rewrite column in a float format\n\ngoogle_data['Rating'] = google_data['Rating'].fillna(google_data['Rating'].median()) # Replace null numbers with median numbers\n\ngoogle_data.Rating.isnull().sum() # Now we don't have any null numbers in the column","4f9ba813":"# Barchart\ngoogle_data.Rating.value_counts().plot(kind = 'bar', stacked = True, figsize = (12, 8), title = 'Distribution of Rating among apps available on Google Play Store'); # Historgram of frequencies \nplt.xlabel('Rating')\nplt.ylabel('Frequencies');","4151ab43":"google_data.Reviews.isnull().sum() # No null values in reviews column","0e05a9c5":"google_data.Reviews = pd.to_numeric(google_data.Reviews)\n\ngoogle_data.hist(column = 'Reviews', figsize = (12, 8))\nplt.xlabel('Number of reviews')\nplt.ylabel('Frequency');","fdbf6ae3":"# Log view of the graph\ngoogle_data.hist(column = 'Reviews', figsize = (12, 10))\nplt.xlabel('Number of reviews')\nplt.ylabel('Frequency')\nplt.yscale('log')","27924a45":"# Occurences of different numbers at the Size column\ngoogle_data.Size.value_counts()\n","20968b96":"# Clean Size column\ngoogle_data['Size'] = google_data['Size'].apply(lambda x: str(x).replace('M', 'e+6') if 'M' in str(x) else str(x)) # Convert Megabytes to bytes\ngoogle_data['Size'] = google_data['Size'].apply(lambda x: str(x).replace('k', 'e+3') if 'k' in str(x) else str(x)) # Convert kilobytes to bytes\n\n# Function converts number to float, if possible\ndef is_convertable(number):\n    try:\n        float(number)\n        return True\n    \n    except:\n        return False\n    \n    \nsize_column = google_data.Size.apply(lambda x: is_convertable(x))    \nsize_column.head()","5440fea9":"google_data.Size[~size_column].value_counts()\ngoogle_data.Size =  google_data.Size.replace('Varies with device', np.nan) # Replacing 'Varies with Device' with NaN to convert to float\ngoogle_data.Size = pd.to_numeric(google_data.Size) # Convert to numeric\n\n# Plotting Histogram\ngoogle_data.hist(column = 'Size', figsize = (12, 8))\nplt.xlabel('Size of an app (in bytes)')\nplt.ylabel('Frequency');\n","4873a328":"# Keep Varies with device option in the column for now\ngoogle_data.Size = google_data.Size.replace(np.nan, 'Varies with device')\ngoogle_data.Size.isnull().sum()","080a30e2":"# Cleaning Installs\ngoogle_data['Installs'] = google_data['Installs'].apply(lambda x: str(x).replace(',', '') if ',' in str(x) else str(x))\ngoogle_data['Installs'] = google_data['Installs'].apply(lambda x: str(x).replace('+', '') if '+' in str(x) else str(x))\ngoogle_data['Installs'] = google_data['Installs'].apply(lambda x: float(x))\n\n# Histogram of Installs \ngoogle_data.Installs = pd.to_numeric(google_data.Installs)\ngoogle_data.hist(column = 'Installs', figsize = (12, 8))\nplt.xlabel('Number of installs')\nplt.ylabel('Frequency')\nplt.yscale('log')","55ad44e3":"# Cleaning Installs\ngoogle_data['Installs'] = google_data['Installs'].apply(lambda x: str(x).replace(',', '') if ',' in str(x) else str(x))\ngoogle_data['Installs'] = google_data['Installs'].apply(lambda x: str(x).replace('+', '') if '+' in str(x) else str(x))\ngoogle_data['Installs'] = google_data['Installs'].apply(lambda x: float(x))\n\n# Histogram of Installs \ngoogle_data.Installs = pd.to_numeric(google_data.Installs)\ngoogle_data.hist(column = 'Installs', figsize = (12, 8), range = [0, 100000])\nplt.xlabel('Number of installs')\nplt.ylabel('Frequency')\nplt.yscale('log')\nprint('Number of Apps with Installs <= 100000: ', len(google_data[google_data.Installs <= 100000]) )","9c49938f":"google_data['Type'].fillna(str(google_data['Type'].mode().values[0]), inplace = True) # Fill NaN entries with mode value in the column. 'Free' is the mode in this case \ngoogle_data.Type.isnull().sum()","358bca54":"# The Free vs Paid apps\ngoogle_data.Type.value_counts().plot.pie(y = google_data.Type, figsize = (12, 14), autopct = '%1.1f%%', title = 'Ratio of Free and Paid apps in the market',label = '');","94ec4f4c":"google_data[google_data.Type == 'Paid'] # Shows paid columns. In the paid columns I want to delete the dollar ($) sign\ngoogle_data['Price'] = google_data['Price'].apply(lambda x: str(x).replace('$', '') if '$' in str(x) else str(x))  # delete dollar sign\ngoogle_data['Price'] = google_data['Price'].apply(lambda x: float(x))\n","5e938279":"google_data.Price = pd.to_numeric(google_data.Price)\ngoogle_data.hist(column = 'Price', figsize = (12, 8))\nplt.xlabel('Price of an app ($)')\nplt.ylabel('Frequency');\nplt.yscale('log')","bf7f7c96":"# We can go further and inspect the number of apps that lie in price range between 0 and 5\ngoogle_data.Price = pd.to_numeric(google_data.Price)\ngoogle_data.hist(column = 'Price', figsize = (12, 8), range = [0, 5])\nplt.xlabel('Price of an app ($)')\nplt.ylabel('Frequency');\nplt.yscale('log')","2a02ef63":"print('Number of apps that have a price tag of 350$+ :',len(google_data[google_data.Price > 350])) # 16 apps that cost more than 350 bucks... Most of them are 'I am rich' apps","a8cbc484":"print(google_data['Content Rating'].unique())\ngoogle_data['Content Rating'].value_counts().plot(kind = 'bar', title = 'Apps by Content Rating', color = my_colors, figsize = (12,8)) # It is good but We cant see the data for some columns. Use log scale for y axis\nplt.xlabel('Category')\nplt.ylabel('Number of installs')\nplt.yscale('log');","5821bd5c":"# Show how data is distributed. We can see that majority of genre is represented in format Category;Subcategory\ngoogle_data.Genres.unique()\ngoogle_data.Genres.isnull().sum()","9c7920e0":"Last_updated = pd.to_datetime(google_data['Last Updated'])\n\ngoogle_data['Last Updated'] = Last_updated.apply(lambda x: date.today() - datetime.date(x))\n\ngoogle_data['Last Updated']","b0990f2d":"google_data['Current Ver']","8fed1cf8":"# Clean Current Ver column\ngoogle_data['Current Ver'] = google_data['Current Ver'].apply(lambda x: 'Varies with device' if x == 'Varies with device' else re.findall('^[0-9]\\.[0-9]|[\\d]|\\W*', str(x))[0]) # Leaves only numbered versions\ngoogle_data['Current Ver'] = google_data['Current Ver'].apply(lambda x: str(x).strip('0') if x == '0' else str(x)) # I have checked that there are now instances of version 0\ngoogle_data['Current Ver'] = google_data['Current Ver'].apply(lambda x: str(x).strip('0.3') if x == '0.3' else str(x)) # Neither there is an instance of 0.3\n\ngoogle_data['Current Ver'].unique()","00b51273":"google_data['Android Ver'].unique()","d3309658":"# Rewrite Android column in numerical format\ngoogle_data['Android Ver'] = google_data['Android Ver'].apply(lambda x: str(x).replace(' and up', '') if ' and up' in str(x) else str(x))\ngoogle_data['Android Ver'] = google_data['Android Ver'].apply(lambda x: str(x).strip('W'))\ngoogle_data['Android Ver'] = google_data['Android Ver'].apply(lambda x: str(x).split('-')[-1])\n\ngoogle_data['Android Ver'] = google_data['Android Ver'].apply(lambda x: str(x).strip()) # Remove extra whitespace before the end of a string\n\ngoogle_data['Android Ver'].unique()\n\n","7b5bdc5a":"print('Number of \\'Varies with Device\\' in Android Ver column: ', google_data[google_data['Android Ver'] == 'Varies with device'].count()[0] )\nprint('Number of \\'nan\\' in Android Ver column', google_data[google_data['Android Ver'] == 'nan'].count()[0])","0216925e":"google_data","07c980eb":"# Drop the rows that have Size as Varies with device\ngoogle_data.Size = google_data.Size.replace('Varies with device', np.nan) \ngoogle_data.Size =  google_data.Size.dropna()\ngoogle_data.Size = google_data.Size.apply(lambda x: float(x))","5aac186d":"google_data","7f119045":"# Correlation map\nplt.figure(figsize = (12, 10)); # Adding command before the heatmap allows to control the size of a plot\nsns.heatmap(google_data.corr(), annot = True);","b3fbf37f":"# Total Number of apps per category\n\ngoogle_data.groupby('Category').count()[\"App\"].sort_values(ascending=False).plot(kind='bar',title='Number of apps\/Category', fontsize=10, figsize = (12, 8));","6b006d50":"free_apps = google_data[google_data.Type == 'Free']\nfree_apps.groupby('Category').count()['App'].sort_values(ascending = False).plot(kind = 'bar', figsize = (12,10), title = 'Number of free apps per category'); \n\n","e66dd9bf":"# Number of paid app per category\n\npaid_apps = google_data[google_data.Price > 0]\npaid_apps.groupby('Category').count()[\"App\"].sort_values(ascending=False).plot(kind='bar',title='Number of paid apps per Category', fontsize=10, figsize = (12, 8));\n\n# google_data.groupby('Category').sum().sort_values(by ='Installs', ascending = 'False')['Installs'].plot(kind = 'bar', title = 'Installs by Category', fontsize = 10, figsize = (14,10));\n","15aff958":"# Apps that have more than 1 Billion installations\ngoogle_data.drop_duplicates(subset = 'App', inplace = True) # Remove duplicate apps. The apps have almost identical rows - having a very small difference in number of installs, but being same in other columns\n\nbillion_installs = google_data[google_data.Installs >= 1e9]\n\nbillion_installs = google_data.sort_values('Installs', ascending = False).head(len(billion_installs))\n\nprint('Number of unique apps that have more than a billion installs:', len(billion_installs)) \n\nplt.figure(figsize = (12,8))\nplt.bar('App', 'Installs', data = billion_installs, color = 'blue')\nplt.xticks(rotation = 90);\nplt.xlabel('Name of the App')\nplt.ylabel('Install Counts')\nplt.title('Apps that have more than billion installations');\n","cc50e0f2":"top_five_hundred = google_data.sort_values('Installs', ascending= False).head(500) # Top 500 apps by Category\n# labels = df3['Content Rating'].value_counts(sort = True).index\n\ntop_five_hundred.Category.value_counts().plot.pie(y = top_five_hundred.Category,fontsize = 10, figsize = (20,32), autopct='%1.1f%%', label = '');\n","33404540":"# paid_apps = google_data[google_data.Price > 0]\ngoogle_data.Price.describe()","a7b8fbbd":"# Revenue of paid apps by category\npaid_apps = google_data[google_data.Price > 0]\npaid_apps['Revenue'] = paid_apps.Price * paid_apps.Installs\npaid_apps\n","9ead70fc":"paid_apps.groupby('Category').sum().sort_values(by = 'Revenue', ascending = 'False')['Revenue'].plot(kind = 'bar',title='Total Revenue from selling apps by category', fontsize=10, figsize = (12, 8));\nplt.xlabel('App Category')\nplt.ylabel('Revenue in USD');","9eddc37b":"# Delete duplicate rows\npaid_apps.sort_values('App', inplace = True)\npaid_apps.drop_duplicates(subset = 'App', keep = False, inplace = True )\nprint('Total Revenue from installations of all Paid Apps is', paid_apps.Revenue.sum()\/1e6,'million USD') \n","ad745e2d":"paid_apps.groupby('Category').mean().sort_values(by = 'Revenue', ascending = 'False')['Revenue'].plot(kind = 'bar', title = 'Average revenue of paid apps in each category', fontsize = 10, figsize = (12,8));\n","9df6c4f4":"google_data.groupby('Category').mean().sort_values(by = 'Price', ascending = False)['Price'].plot(kind = 'bar', title = 'Average price of all apps by category', fontsize = 10, figsize = (12,8));\nprint('Average price of all apps (free + paid) is: ', google_data.Price.mean(), '$')","7fafcf1f":"paid_apps.groupby('Category').mean().sort_values(by = 'Price', ascending = False)['Price'].plot(kind = 'bar', title = 'Average price of Paid Apps by Category', fontsize = 10, figsize = (12,8));\nprint('Average price of paid apps: ', paid_apps.Price.mean(), '$' )","1a1d6018":"google_data.groupby('Category').sum().sort_values(by ='Installs', ascending = 'False')['Installs'].plot(kind = 'bar', title = 'Installs by Category', fontsize = 10, figsize = (14,10));\nplt.ylabel('Number of Installations');","b69875b5":"google_data.groupby('Category').mean().sort_values(by = 'Size', ascending = 'False')['Size'].plot(kind = 'pie',autopct='%1.1f%%', title = 'Average Size of an app by category', label = '', fontsize = 10, figsize = (18, 20)); \nprint('Average size of an application is', google_data.Size.mean()\/1e6,'Megabytes' )","6b10401a":"google_data.Size.describe()","b797badc":"plt.figure(figsize = (12,10))\nsns.scatterplot(x = google_data.Reviews, y = google_data.Rating, edgecolor = 'white');","a487bdfd":"plt.figure(figsize = (12,10))\nsns.scatterplot(x = google_data.Installs, y = google_data.Rating, edgecolor = 'white');","12d35bb8":"google_data.groupby('Category').mean().sort_values(by = 'Rating', ascending = 'False')['Rating'].plot(kind = 'bar', title = 'Average rating of applications in each categories', fontsize = 10, figsize = (14,10));","16261af4":"google_data[(google_data.Rating == 5.0) & (google_data.Reviews > 100) & (google_data.Installs >= 5000)]\n","bb7c5bfb":"# Most Number of reviews\ngoogle_data[google_data.Reviews == google_data.Reviews.max()]\n","5e06faa0":"google_data[(google_data.Installs == google_data.Installs.max ()) & (google_data.Reviews == google_data.Reviews.max())]\n","892eecd1":"# Most Revenue from Installations\npaid_apps[paid_apps.Revenue == paid_apps.Revenue.max()]","3fb162f0":"# Apps with Maximum Price\npaid_apps[paid_apps.Price == paid_apps.Price.max()]","b731faa5":"google_data['Last Updated']","f4cb84bb":"google_data['Last Updated'] = google_data['Last Updated'].apply(lambda x: x.days) # Convert Last Updated column to represent in days  \n","4950823f":"array = google_data.Category.unique()\nfor i in range(len(array)):\n    print('Category:',array[i], 'Mean:', google_data[google_data.Category == array [i]]['Last Updated'].mean(), 'days')","0c5ff166":"google_data.groupby('Category').mean()\ngoogle_data.groupby('Category').mean().sort_values(by = 'Last Updated', ascending = 'False')['Last Updated'].plot(kind = 'bar', title = 'Mean Last Updated Time for Each Category', fontsize = 10,  figsize = (12, 8));\nplt.ylabel('Last Updated Time (days)');\nprint(google_data['Last Updated'].describe()) # The description of the column","97e7bb56":"sns.heatmap(google_data.corr(), annot = True);\n# Heatmap to check the correlation between the features","a3d9d659":"df = google_data\ndf.dtypes","c89e8f0b":"df = df.drop(['App', 'Current Ver'], axis= 'columns') ","67ca6b69":"df['Rating'] = df['Rating'].astype('int64')\ndf['Size'] = df['Size'].fillna(df.Size.median()) # Replacing the null Size with median value\ndf['Size'] = df['Size'].astype('int64')\ndf['Installs'] = df['Installs'].astype('int64')\ndf['Price'] = df['Price'].astype('int64')","5dab5864":"df2 = df.copy()\ndf2.Type = df2.Type.map({\"Free\":0, \"Paid\" : 1})\ncategory_dummies = pd.get_dummies(df2.Category, prefix = 'Category')\ncontent_rating_dummies = pd.get_dummies(df2['Content Rating'], prefix = 'content_rating')\ngenre_dummies = pd.get_dummies(df2['Genres'], prefix = 'Genres')","8c0b62f9":"df2.dtypes\n# Now most of the columns are in the integer format","09b015fc":"df3 = pd.concat([df2, category_dummies, content_rating_dummies, genre_dummies], axis = 1) # Combining dummy variables to our original dataframe\ndf3.isna().sum()\n","3bc09827":"df4 = df3.drop(['Category', 'Content Rating', 'Genres', 'Android Ver'], axis = 1) # Dropping non-numeric columns: Dropped columns have little value for ML model ","24c63aec":"# Checking the shape of our new dataframe\ndf4.shape","fe0d08c6":"X = df4.drop('Rating', axis = 1)\ny = df4.Rating\n\n# Doing train, test and split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","2f8ea348":"scaler=StandardScaler()\nX_train=scaler.fit_transform(X_train)\nX_test=scaler.transform(X_test)","3ac32246":"lr_model=LogisticRegression(random_state=0)\nlr_model.fit(X_train,y_train)\nlr_pred=lr_model.predict(X_test)\nlr_cm=confusion_matrix(y_test,lr_pred)\nlr_ac=accuracy_score(y_test, lr_pred)\nprint('LogisticRegression_accuracy:',lr_ac)\n","44a9a9a2":"dtree_model=DecisionTreeClassifier(criterion='entropy',random_state=0)\ndtree_model.fit(X_train,y_train)\ndtree_pred=dtree_model.predict(X_test)\ndtree_cm=confusion_matrix(y_test,dtree_pred)\ndtree_ac=accuracy_score(dtree_pred,y_test)\nprint('Decision Tree Classifier accuracy:',dtree_ac)","feacfba3":"svc_model=SVC(kernel='rbf')\nsvc_model.fit(X_train,y_train)\nsvr_pred=svc_model.predict(X_test)\nsvr_cm=confusion_matrix(y_test,svr_pred)\nsvr_ac=accuracy_score(y_test, svr_pred)\nprint('DecisionTree_Classifier_accuracy:',svr_ac)","1becc06b":"\nrdf_model=RandomForestClassifier(n_estimators=10,criterion='entropy',random_state=0)\nrdf_model.fit(X_train,y_train)\nrdf_pred=rdf_model.predict(X_test)\nrdf_cm=confusion_matrix(y_test,rdf_pred)\nrdf_ac=accuracy_score(rdf_pred,y_test)\nprint('Random Forest accuracy:',rdf_ac)","0d9c489a":"import sklearn.metrics as metrics\n%matplotlib inline\n\nlr_ac = metrics.accuracy_score(lr_pred,y_test)\nmodel_accuracy = pd.Series(data=[lr_ac,dtree_ac,svr_ac,rdf_ac],\n                           index=['Logistic Regression','Decision Tree Classifier','SVM regressor accuracy','Random Forest'])\nfig= plt.figure(figsize=(8,8))\nmodel_accuracy.sort_values().plot.barh()\nplt.xlabel('Model accuracy')\nplt.title('Accuracy of a Model');","0caccce2":" Again, the majority of the apps have number of installs less than 0.2e9. Next cell shows Install distribution on a much lower range in x axis.","b5f115c8":"We can see that Varies with Device is a common entry in the Android Version column. We will keep both of them for now. ","42c84809":"**Number of apps per category:**","9757f910":"#  **Step 1: Understanding Data**\nThis is a very brief section that gives brief information about our dataset","a93ca15d":"We can see that if the companies business aim is to make money from selling the app, the target category should be family category, followed by lifestyle and game.  ","00dfb0e1":"The log review of graph above allows to inspect the lower scale","6d2967e1":"**Installs**","713dba9b":"We also create Dummy variables to increase the accuracy of our deployed models. Dummy variables are created for category, content_rating and genre columns. ","d4f45f8b":"**Apps with most installations, reviews, revenues and other metrics:** \n\n* App with highest number of rating, reviews and installs (combined): Oracion CX\n* App with most number of reviews: Facebook (78158306 reviews)\n* App with most number of installs and reviews (combined): Facebook\n* Maximum price of an app: I'm Rich - Trump Edition\t(400 USD)\n* App with highest revenue from installations: Minecraft (69.9 millions USD from installations)\n\t\n\n","62cb7fb8":"**Correlation between Installs and Rating:**","a152c481":" We can see that the Category of the app is omitted which shifts the rest of the parameters to the left. Therefore, we can delete the row for now\n","1a6a6ab5":"**Model Comparison**","ad718416":"**Android Version:**","16fae80f":"# **Step 2: Data Cleaning:**\n\nWe start cleaning the data one by one from left to the right. Since The App column should not be edited, we start from category. I will go through every column one by one in this section","336d57fb":"In next cell, I have dropped several columns that bring little value to the analysis in my opinion.","03e6f1b3":"We have already seen the distribution of all apps by category. Let's now investigate categorical distribution of top 500 apps in play store","e55c78e9":"Personally, I could not find any direct correlation between reviews and rating.We can see that the apps that have high amount of reviews generally have a rating above 4.0","06664785":"**Random Forest**","5b332646":"The bar charts above include both free and paid apps in there analysis which in turn shows that most of the apps are free. From the pie chart above, we know that approximately 10,000 apps from the dataset are free. ","3f8fe70f":"**Most number of reviews. highest rating, most revenue from installations, most installations\n**","9f1275e1":"# **Step 3: Data Visualization**\n\n\n","97ac98ac":"We can also see the total number of apps per category with representation of barchart and piechart. ","0137ca4b":"We can see Android versions are mostly numerical. We can also spot that there are 'Varies with device' and 'nan' entries for some apps","76dfa403":"Thanks very much for attention :)\n\nPlease comment if you have any corrections\/recommendations","92fcbf46":"Let's first investigate the type of columns in our dataframe:","dd96da26":"Approximately half of the apps have less than 20 Megabytes of size","58780713":"The vast majority of the apps have number of reviews no more than 1e7. This makes sense since only limited number of apps are very popular with high number of installs and reviews. ","43690ff6":"There are several Apps that have maximum rating of 5. Therefore additional threshold parameters such as number of reviews and Installs were introduced to ensure that the app has some popularity. \n","485bf493":"**Type**","d26475be":"**Reviews**","2ada2af0":"The Facebook app has the most number of installs and reviews ","42ac6199":"**Rating**","5e53f9ec":"# Key Takeaway: Machine Learning Implementation\n\nThe implementation of four different Machine Learning algorithm gave the accuracy between 69 and 76 percent, which shows that our models have done a decent job in predicting the rating of an app. Most accurate model was found to be SVM Regression algorithm ","6dda3337":"**Average Size of the applications**","243bc08a":"**Rating**","28c1a784":"It is interesting to note that the apps with a pricetag of 350USD+ have more installs than the all apps that have 50$+ combined","b76f1ec0":"We can see that some categories such as Comics and Beauty only have free apps. Finance apps have highest average price which is 8 times higher than the average.","a3e82e84":"**Average Price per Category:**","4f6079f8":"As expected, the majority of the apps are free of charge. Only 7.4% of all apps in the dataset are paid ones","a77ddd41":"**Genres**","9a22db99":"**Decision Tree Classifier**","16200471":"We can see one odd entry in the category column: 1.9. It is clear that it is an integer entry somehow located in the category column. If we explore further we can see that the app in the same row has a rating of 19 while it should be in range between 1 and 5.  \n","2be62ecd":"# Google Play Store Data Analysis\n\nGreetings Everyone! This is my very first post that will focus on Google Play Store Dataset. This notebook focuses on:\n* Exploratory Data Analysis\n* Machine Learning models to predict the rating of an app\n \nThere are four sections in the Notebook, namely:\n* Understanding Data \n* Data Cleaning\n* Data Visualization\n* Machine Learning Models Implemetation ","55766764":"LifeStyle Apps have by far highest average of revenue (Price * Number of Installs). Each lifestyle app makes roughly 3 million dollars on average.\n","a20bbebd":"**Category**","028e2b3e":"**Logistic Regression:**","605b7f4f":"**Current Ver:**","14c380ba":"We can see that the average price of paid apps is around 14USD. The bar chart above clearly shows that high average price is heavily influenced by Finance, Lifestyle and Events categories, where each app costs on average 100$+\n","ecd67346":"Almost half of the apps have less than 100,000 installs and more than 3,000 apps have less than 10,000 Installations in the Google Play Store ","6db002b0":"We can see that the Game Category has the highest number of installations","25d1a474":"Most of the Apps have a rating between 3.5 and 4.5. With increase in number of installs, the data is more clustered around the mean. ","af123b5e":"**Content Rating**","8a1a22e9":"**Number of Installations:**","549369f4":"We can see that there is no strong correlation between when the app was last updated and other parameters","19856b54":"Now we need to define X and y variables for ML models. y is our Rating column and X as every other column in our dataframe.","b339ae37":"**When Apps were updated last:**","30204bfd":"Next we will write columns in an integer format, so that it will be readable by our ML algorithm ","e075401d":"We can clearly see that '4.3' is by far the most common Rating value","5b26264f":"From the Previous three plots we can clearly see that the Family is the most popular category both in free and paid segment. The Game is also very popular both in Free and Paid categories. ","83acbeb1":"We can see that all categories have a mean rating of 4 and higher. Highest rating is for EVENTS category.","3cb32626":"   **Data Visualization: Key Takeaways:**\n* Around **19%** of all apps are within **Family Category**\n* Most expensive apps are in the **Finance Category** \n* Only **7.4 %** of apps are **Paid**\n* There are **20** unique apps that have more than billion installations - half of them are Google products \n* **Games** are the most popular\/installed category\n* Average size of an app in the play store is **20.4 Megabytes**\n* If the company's strategy is to make profit based on the app installations, development of a LifeStyle category app is an option. Lifestyle themed app has an average revenue of 3 million USD based on the revenue from installation.\n* **81.8%** of the apps belong to **Everyone category** \n* No correlation between app Rating and Number of installs is observed\n* All the categories have an average rating of 4+","ab893d8d":"**Price**","941988c3":"Most Installations - Since 20 apps have 1 Billion+ Installations, I have shown The App with highest Reviews and Installs combined \n","1eaf42c5":"Most of the apps are suited for eveyone and only one app has an unrated category. May be the developer has not listed the category of an app","24ddca81":"We can see that game category has by far the biggest size of an app, followed by family and travel categories. Average size of an app from all categories is 20.4 Megabytes","fbe6de59":"# **EDA - Some Questions to ask**:\n\nMain questions for this dataset are:\n\n* Total Number of applications per category?\n* Average Rating per category \n* Average Size of an app per Category\n* Overall size of a market?  \n* Number of free and paid apps available\n* Number of downloads and overall revenue of all apps?\n* Average revenue from installs by category\n* Number of Installations by category\n* Applications with highest number of installations?\n* Applications with most number of reviews, highest rating, most revenue from installs?\n* Most expensive appliations?","515d0bdf":"Scaling techniques are used on X_train and X_test variables to increase the accuracy of a models. ","89ff5bcc":"**Last Updated:**\n\nFor Last Updated Date, we can also get the difference between the current date and the date it was last updated. The time difference is represented in days\n","b36fcbb4":"The google playstore database only shows number of installations as a milestone: e.g. 1,000,000+ instead of precise number\n\nThe bar plot has 20 unique entries. A half of the apps (10) presented in the list are Google products","c16b28c6":"The Dataframe has 13 columns and 10841 rows. Later we will see that some of the rows are identical.","5ce80fff":"**Market Size of Paid Apps and Revenue distribution by Category:**","1e1c1167":"**Size**","1e8901ba":"**Apps with more than billion installs:**","1ca7291b":"# Predicting Rating of an App","5d6f0ce0":"**SVM Regressor**","77437310":"Quarter of top 500 popular apps lie in the games category. It shows that games are really popular and get installed by a high number of users","382c26eb":"**Correlation Between Rating and Number of Review:**"}}