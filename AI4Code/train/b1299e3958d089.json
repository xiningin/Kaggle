{"cell_type":{"3f29b83a":"code","d3f6d9b2":"code","97947381":"code","047aa8af":"code","be59f3aa":"code","af24a193":"code","323b25b2":"code","2dac7bd6":"code","d733bf54":"code","96589b3d":"code","082dbe9e":"code","f774d290":"code","b56861ca":"code","531e4cfc":"code","4354bf75":"code","63d5743b":"code","6696faac":"code","df5379d4":"code","60441c80":"code","dd42fbc4":"code","4d061974":"code","34e9d8aa":"markdown","3b1cd012":"markdown","2eb258b3":"markdown","21e99270":"markdown","06fd2172":"markdown","d051ee16":"markdown","cb91af3e":"markdown","8ba3f674":"markdown","c6c68fbc":"markdown","941c466c":"markdown"},"source":{"3f29b83a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport plotly.offline as py\ncolor = sns.color_palette()\n\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected = True)\n\nimport plotly.tools as tls\n\n%matplotlib inline","d3f6d9b2":"from sklearn.preprocessing import RobustScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier","97947381":"##reading data with pandas\n\ndf_train = pd.read_csv('..\/input\/sloan-digital-sky-survey-dr16\/Skyserver_12_30_2019 4_49_58 PM.csv')\n\n\n## Taking a peak at the data\ndf_train.head()","047aa8af":"df_train.shape","be59f3aa":"df_train.info()","af24a193":"df_train.describe()","323b25b2":"df_train['class'].value_counts()","2dac7bd6":"df_train.drop(['run', 'rerun', 'camcol', 'field', 'objid', 'specobjid', \n              'fiberid'], axis = 1, inplace = True)\n\ndf_train.head(3)","d733bf54":"df_train.isnull().sum()","96589b3d":"sns.set_style('darkgrid')\n\nplt.figure(figsize = (8,6))\n\nsns.countplot(df_train['class'], palette = 'magma')","082dbe9e":"sns.pairplot(data = df_train, palette = 'Dark2', hue = 'class')","f774d290":"fig, ((ax1, ax2, ax3, ax4, ax5), (ax6, ax7, ax8, ax9, ax10)) = plt.subplots(nrows = 2, ncols = 5,\n                                                                      figsize = (25,12))\n\n\nsns.boxplot(ax = ax1, x = 'class', y = 'ra', hue = 'class', data = df_train)\nsns.boxplot(ax = ax2, x = 'class', y = 'dec', hue = 'class', data = df_train)\nsns.boxplot(ax = ax3, x = 'class', y = 'u', hue = 'class', data = df_train)\nsns.boxplot(ax = ax4, x = 'class', y = 'g', hue = 'class', data = df_train)\nsns.boxplot(ax = ax5, x = 'class', y = 'r', hue = 'class', data = df_train)\nsns.boxplot(ax = ax6, x = 'class', y = 'i', hue = 'class', data = df_train)\nsns.boxplot(ax = ax7, x = 'class', y = 'z', hue = 'class', data = df_train)\nsns.boxplot(ax = ax8, x = 'class', y = 'redshift', hue = 'class', data = df_train)\nsns.boxplot(ax = ax9, x = 'class', y = 'plate', hue = 'class', data = df_train)\nsns.boxplot(ax = ax10, x = 'class', y = 'mjd', hue = 'class', data = df_train)","b56861ca":"df_train.var()","531e4cfc":"corr = df_train.corr()\n\nplt.figure(figsize = (12,10))\n\nsns.heatmap(corr, annot = True)","4354bf75":"labels = {'STAR' :1, 'GALAXY': 2, 'QSO': 3}\n\ndf_train.replace({'class':labels}, inplace = True)\n","63d5743b":"df_train.head()","6696faac":"X = df_train.drop('class', axis = 1).values\ny = df_train['class'].values","df5379d4":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 123)","60441c80":"robust = RobustScaler()\nX_train = robust.fit_transform(X_train)\nX_test = robust.transform(X_test)","dd42fbc4":"lr = LogisticRegression(max_iter = 120)\n\nlr.fit(X_train, y_train)\n\ny_pred = lr.predict(X_test)\nprint(\"Classification Report: \\n\", classification_report(y_test, y_pred))\n\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, y_pred))\nlr_train_acc = lr.score(X_train, y_train)\nprint('Training Score: ', lr_train_acc)\nlr_test_acc = lr.score(X_test, y_test)\nprint('Testing Score: ', lr_test_acc)","4d061974":"svc = SVC()\nsvc.fit(X_train, y_train)\n\nprint('Classification Report: \\n', classification_report(y_test, y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, y_pred))\n\nsvc_train_acc = svc.score(X_train, y_train)\nprint('Training Score: ', svc_train_acc)\n\nsvc_test_acc = svc.score(X_test, y_test)\nprint('Testing Score: ', svc_test_acc)\n","34e9d8aa":"# EDA","3b1cd012":"![image.png](attachment:image.png)","2eb258b3":"# Visualizing The Data","21e99270":"# Loading Data","06fd2172":"# Dropping features we will not need","d051ee16":"#  Support Vector Class.","cb91af3e":"# Logistic Regression","8ba3f674":"# Importing Libraries","c6c68fbc":"# Decision Tree Class.","941c466c":"# Feature Engineering"}}