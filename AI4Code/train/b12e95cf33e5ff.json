{"cell_type":{"cd6c6d6e":"code","2871ea19":"code","19e7071f":"code","6717c9e2":"code","0cfc6efe":"code","8d363c45":"code","63d45fd5":"code","c52466e6":"code","bb57e007":"code","74ae348e":"code","68d85f11":"code","dec4ddf7":"code","33216627":"code","32f346b9":"code","cf2ef156":"code","70063b4e":"code","06aa4039":"code","61b8bd7d":"code","9c730b87":"code","65dc2904":"code","39ed76fb":"code","a0380d13":"code","e2ce9eee":"code","97ca91b6":"code","70aeb69d":"code","449f5701":"code","d7c4e1c3":"code","62f89d1b":"code","54fb4c09":"code","56378e01":"code","41938ca3":"code","f95e7d44":"code","de5a21cd":"code","1468ba64":"code","31a280f4":"code","1a62a356":"code","eece8023":"code","b13a5611":"code","307c1a59":"code","d03f1f42":"code","e0758c96":"code","64f25aa5":"code","e5a783fa":"code","f7607210":"code","6256c8be":"code","10885364":"code","f9420ec2":"code","ac7a6066":"code","7b356a46":"code","1552c74e":"code","228382c6":"code","71c9bcc7":"code","09ab745a":"markdown","5c8b0438":"markdown","c21061a3":"markdown","f1acb5f3":"markdown","d5b91e86":"markdown","a5eb33af":"markdown","d351d99c":"markdown","2fa3ac66":"markdown","f96cbb7c":"markdown"},"source":{"cd6c6d6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns #\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder #data convertion from staring to numeric\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2871ea19":"pd.set_option(\"display.max_rows\",None)\npd.set_option(\"display.max_columns\",None)","19e7071f":"governors_county = pd.read_csv(\"\/kaggle\/input\/us-election-2020\/governors_county.csv\")\ngovernors_candidate = pd.read_csv(\"\/kaggle\/input\/us-election-2020\/governors_county_candidate.csv\")\ngovernors_state = pd.read_csv(\"\/kaggle\/input\/us-election-2020\/governors_state.csv\")\nprint(governors_county.head())\nprint(governors_candidate.head())\nprint(governors_state.head())","6717c9e2":"governors_data = governors_county.merge(governors_candidate,how=\"left\",on=[\"state\",\"county\"])\ngovernors_data = governors_data.merge(governors_state,how=\"left\",on=\"state\")\ngovernors_data_df = governors_data\nprint(governors_data.head())","0cfc6efe":"governors_data[\"state_county_reported_votes\"] = governors_data [\"current_votes\"]\ngovernors_data[\"state_county_total_votes\"] = governors_data[\"total_votes\"]\ngovernors_data[\"state_county_candiate_votes\"] = governors_data[\"votes_x\"]\ngovernors_data[\"state_votes\"] = governors_data[\"votes_y\"]\ngovernors_data.head()","8d363c45":"governors_data.drop(columns=[\"current_votes\",\"total_votes\",\"votes_x\",\"votes_y\"])","63d45fd5":"columns_sequence = [\"state\",\"county\",\"candidate\",\"party\",\"state_county_candiate_votes\",\"state_county_reported_votes\",\"state_county_total_votes\",\"state_votes\",\"percent\",\"won\"]","c52466e6":"governors_data = governors_data.reindex(columns=columns_sequence)","bb57e007":"lben = LabelEncoder()\ngovernors_data[\"state\"] = lben.fit_transform(governors_data[\"state\"])\ngovernors_data[\"candidate\"] = lben.fit_transform(governors_data[\"candidate\"])\ngovernors_data[\"county\"] = lben.fit_transform(governors_data[\"county\"])\ngovernors_data[\"party\"] = lben.fit_transform(governors_data[\"party\"])\ngovernors_data[\"won\"] = lben.fit_transform(governors_data[\"won\"])\ngovernors_data.head()","74ae348e":"from sklearn.ensemble import AdaBoostClassifier,GradientBoostingClassifier\nfrom sklearn.model_selection import KFold,cross_val_score,train_test_split\nfrom sklearn.metrics import confusion_matrix\n\narray = governors_data.values\nX = array[:,0:8]\nY = array[:,9]\n\n#Splitting the dataset into the Training set and Test set\nx_train,x_test,y_train,y_test = train_test_split(X,Y,test_size=0.2,random_state=0)\nclassifier = GradientBoostingClassifier()\n\nclassifier.fit(x_train,y_train)\n#Predicting the Test set results\ny_pred = classifier.predict(x_test)\n\n#Making the Confusion Matrix\ncm = confusion_matrix(y_test,y_pred)\nprint(cm)","68d85f11":"kflod = KFold(n_splits=10,shuffle=True,random_state=7)\nmodel = AdaBoostClassifier(n_estimators=30,random_state=7)\nresults = cross_val_score(model,X,Y,cv=kflod)\n\n#print(results)\nprint(round(results.mean()*100),\"%\")","dec4ddf7":"won_state_details  = pd.pivot_table(governors_data_df,index=[\"state\"],columns=\"won\",values=\"party\",fill_value=0,aggfunc=lambda x: len(x))\n#print(winners_details)\nsns.heatmap(won_state_details,annot=True,fmt=\".0f\")\nplt.show()","33216627":"plt.figure(figsize=(25,5))\nparty_state_details = pd.pivot_table(governors_data_df[governors_data_df[\"won\"]==True],index=\"state\",columns=\"party\",values=\"state_county_candiate_votes\",aggfunc=sum,fill_value=0)\nsns.heatmap(party_state_details,annot=True,fmt=\".0f\")\nplt.show()","32f346b9":"plt.figure(figsize=(25,5))\nplt.bar(\"state\",\"state_county_candiate_votes\",data=governors_data_df[governors_data_df[\"won\"]==True].sort_values(\"state_county_candiate_votes\",ascending=False))\nplt.show()","cf2ef156":"plt.figure(figsize=(25,5))\nplt.bar(\"party\",\"state_county_candiate_votes\",data=governors_data_df.sort_values(\"state_county_candiate_votes\",ascending=False))\nplt.show()","70063b4e":"plt.figure(figsize=(30,5))\nstate_party_wise_votes = governors_data_df[governors_data_df[\"won\"]==True].loc[:,[\"state\",\"candidate\",\"party\",\"state_county_candiate_votes\"]].groupby([\"state\",\"party\",\"candidate\"]).sum()\nstate_party_wise_votes.sort_values(\"state_county_candiate_votes\",ascending=False).plot.bar(figsize=(30,5))\nplt.show()","06aa4039":"president_state = pd.read_csv(\"\/kaggle\/input\/us-election-2020\/president_state.csv\")\npresident_county = pd.read_csv(\"\/kaggle\/input\/us-election-2020\/president_county.csv\")\npresident_candidate = pd.read_csv(\"\/kaggle\/input\/us-election-2020\/president_county_candidate.csv\")","61b8bd7d":"president_state.head()","9c730b87":"president_state[\"president_state_total_votes\"] = president_state[\"total_votes\"]\npresident_state.head()","65dc2904":"president_state = president_state.drop(columns=[\"total_votes\"])\npresident_state.head()","39ed76fb":"president_county.head()","a0380d13":"president_county[\"president_current_votes\"] = president_county[\"current_votes\"]\npresident_county[\"president_county_total_values\"] = president_county[\"total_votes\"]\npresident_county[\"president_percent\"] = president_county[\"percent\"]\npresident_county.head()","e2ce9eee":"president_county = president_county.drop(columns=[\"current_votes\",\"total_votes\",\"percent\"])\npresident_county.head()","97ca91b6":"president_candidate.head()","70aeb69d":"president_candidate[\"president_candidate\"] = president_candidate[\"candidate\"]\npresident_candidate[\"president_candidate_total_votes\"] = president_candidate[\"total_votes\"]\npresident_candidate.head()","449f5701":"president_candidate = president_candidate.drop(columns=[\"candidate\",\"total_votes\"])\npresident_candidate.head()","d7c4e1c3":"president_data = president_county.merge(president_candidate,how=\"left\",on=[\"state\",\"county\"])\npresident_data = president_data.merge(president_state,how=\"left\",on=[\"state\"])\npresident_data.head()","62f89d1b":"senate_state = pd.read_csv(\"\/kaggle\/input\/us-election-2020\/senate_state.csv\")\nsenate_candidate = pd.read_csv(\"\/kaggle\/input\/us-election-2020\/senate_county_candidate.csv\")\nsenate_county = pd.read_csv(\"\/kaggle\/input\/us-election-2020\/senate_county.csv\")","54fb4c09":"senate_state.head()","56378e01":"senate_state[\"senate_state_total_votes\"] = senate_state[\"total_votes\"]\nsenate_state.head()","41938ca3":"senate_state = senate_state.drop(columns=[\"total_votes\"])\nsenate_state.head()","f95e7d44":"senate_candidate.head()","de5a21cd":"senate_candidate[\"senate_candidate\"] = senate_candidate[\"candidate\"]\nsenate_candidate[\"senate_candidate_total_votes\"] = senate_candidate[\"total_votes\"]\nsenate_candidate.head()","1468ba64":"senate_candidate = senate_candidate.drop(columns=[\"candidate\",\"total_votes\"])\nsenate_candidate.head()","31a280f4":"senate_county.head()","1a62a356":"senate_county[\"senate_current_votes\"] = senate_county[\"current_votes\"]\nsenate_county[\"senate_county_total_values\"] = senate_county[\"total_votes\"]\nsenate_county[\"senate_percent\"] = senate_county[\"percent\"]\nsenate_county.head()","eece8023":"senate_county = senate_county.drop(columns=[\"current_votes\",\"total_votes\",\"percent\"])\nsenate_county.head()","b13a5611":"senate_data = senate_county.merge(senate_candidate,how=\"left\",on=[\"state\",\"county\"])\nsenate_data = senate_data.merge(senate_state,how=\"left\",on=\"state\")\nsenate_data.head()","307c1a59":"governors_county = pd.read_csv(\"\/kaggle\/input\/us-election-2020\/governors_county.csv\")\ngovernors_candidate = pd.read_csv(\"\/kaggle\/input\/us-election-2020\/governors_county_candidate.csv\")\ngovernors_state = pd.read_csv(\"\/kaggle\/input\/us-election-2020\/governors_state.csv\")","d03f1f42":"governors_state.head()","e0758c96":"governors_state[\"governors_state_total_votes\"] = governors_state[\"votes\"]\ngovernors_state.head()","64f25aa5":"governors_state = governors_state.drop(columns=[\"votes\"])\ngovernors_state.head()","e5a783fa":"governors_county.head()","f7607210":"governors_county[\"governors_current_votes\"] = governors_county[\"current_votes\"]\ngovernors_county[\"governors_county_total_values\"] = governors_county[\"total_votes\"]\ngovernors_county[\"governors_percent\"] = governors_county[\"percent\"]\ngovernors_county.head()","6256c8be":"governors_county = governors_county.drop(columns=[\"current_votes\",\"total_votes\",\"percent\"])\ngovernors_county.head()","10885364":"governors_candidate.head()","f9420ec2":"governors_candidate[\"governors_candidate\"] = governors_candidate[\"candidate\"]\ngovernors_candidate[\"governors_candidate_votes\"] = governors_candidate[\"votes\"]\ngovernors_candidate.head()","ac7a6066":"governors_candidate = governors_candidate.drop(columns=[\"candidate\",\"votes\"])\ngovernors_candidate.head()","7b356a46":"governors_data = governors_county.merge(governors_candidate,how=\"left\",on=[\"state\",\"county\"])\ngovernors_data = governors_data.merge(governors_state,how=\"left\",on=[\"state\"])\ngovernors_data.head()","1552c74e":"election_data = governors_data.merge(senate_data,how=\"left\",on=[\"state\",\"county\",\"party\"])\nelection_data = election_data.merge(president_data,how=\"left\",on=[\"state\",\"county\",\"party\"])\nelection_data.head(10)","228382c6":"election_data.isna().sum()","71c9bcc7":"election_data = election_data.fillna(value=0)\nelection_data.head()","09ab745a":"# Grouping the 3 datasets to single dataset using Left Join Concept","5c8b0438":"# Transforming the string data as categorical data using LabelEncoder Library","c21061a3":"lben = LabelEncoder()\nelection_data[\"state\"] = lben.fit_transform(election_data[\"state\"])\nelection_data[\"county\"] = lben.fit_transform(election_data[\"county\"])\nelection_data[\"party\"] = lben.fit_transform(election_data[\"party\"])\nelection_data[\"won_x\"] = lben.fit_transform(election_data[\"won_x\"])\nelection_data[\"governors_candidate\"] = lben.fit_transform(election_data[\"governors_candidate\"])\nelection_data[\"senate_candidate\"] = lben.fit_transform(election_data[\"senate_candidate\"])\nelection_data[\"won_y\"] = lben.fit_transform(election_data[\"won_y\"])\nelection_data[\"president_candidate\"] = lben.fit_transform(election_data[\"president_candidate\"])","f1acb5f3":"# Creating the new columns with existing data","d5b91e86":"# Defining the columns sequence array to construct the columns in required sequence manner ","a5eb33af":"# Re-indexing the columns as per the defined columns sequence ","d351d99c":"# Checking accuracy of the data using KFlod,AdaBoostClassifier and Cross Val Score","2fa3ac66":"# Dropping the columns which are not used ","f96cbb7c":"# Reading Governors Data using Pandas"}}