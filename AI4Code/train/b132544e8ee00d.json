{"cell_type":{"5bc95157":"code","b264fd80":"code","7c006b88":"code","d8e0db40":"code","6f2bfa9d":"markdown","d5c922ac":"markdown"},"source":{"5bc95157":"import numpy as np\nimport pandas as pd \n\nTRAIN_PATH = \"..\/input\/widsdatathon2022\/train.csv\"\nTEST_PATH = \"..\/input\/widsdatathon2022\/test.csv\"","b264fd80":"train = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)\nprint(\"train\",train.shape)\nprint(\"test\",test.shape)","7c006b88":"display(train)","d8e0db40":"print(\"Train year:\",train[\"Year_Factor\"].agg([\"min\",\"max\"]))\nprint(\"\\nTest year:\",test[\"Year_Factor\"].agg([\"min\",\"max\"]))","6f2bfa9d":"## Train - test split is TEMPORAL\n* This was discovered externally using [adversarial validation](http:\/\/fastml.com\/adversarial-validation-part-one) & AutoML ([SparkBeyond](https:\/\/www.sparkbeyond.com\/))\n* May also be at building level - we lack building IDs\n*  **All are evaluation must also be temporal**","d5c922ac":"## Check train test split\nWe see that the split is temporal (by the overall data, not per site date).\n\nThis is critical for properly doing local evaluation!"}}