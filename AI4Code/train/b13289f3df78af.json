{"cell_type":{"0d9f6b4b":"code","3a7fc8f3":"code","44ecec25":"code","6f0c7641":"code","ec932700":"code","2a6af668":"code","0d011f62":"code","989a7a1e":"code","73378e91":"code","4962cc89":"code","824e7a1b":"code","be69ee33":"code","9e822489":"code","fd718765":"code","a36c34fb":"code","66b889b4":"code","45ca6a8e":"code","55bdbd76":"code","95ee7419":"code","fa7710ac":"code","bdb52709":"code","3a5156fc":"code","341ff1a9":"code","335ac312":"code","6de11ab2":"code","63e97845":"code","c4a259b1":"code","60f42005":"code","575af1f7":"code","04621ccb":"code","3f25969c":"code","7d6537b3":"code","af125223":"code","b56404a7":"code","5a926e12":"code","98591e34":"code","bf91d453":"code","c004bbb5":"code","7e71a6d0":"code","39c2581e":"code","ba210c0b":"code","88528d48":"code","b2b5c937":"code","d4cf4ea5":"markdown","580a9fbf":"markdown","980132ba":"markdown","619a60f5":"markdown","d2ff37bb":"markdown","d9df9b59":"markdown","6232c7d4":"markdown"},"source":{"0d9f6b4b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport pandas_datareader.data as web #imports the data then uses \"as\" as a shorthand way\nimport matplotlib.pyplot as plt  #plt is shorthand for matplotlib\nimport datetime as dt # dt is shorthand for datetime \n\n\nfrom sklearn.linear_model import LinearRegression #Scikit learn \n\n\nimport math\nimport statistics\nimport scipy.stats\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3a7fc8f3":"df = pd.read_csv('..\/input\/final-clean\/Rank_by_Country_V9.csv')\ndf.head()\n","44ecec25":"df.plot()\ndf[['Rank',' USD Value']].plot()\n","6f0c7641":"df.hist(figsize=(8,8))\nplt.figure(figsize=(8,8))","ec932700":"x=df[['Country Code']]\ny=df[[' USD Value']]\n","2a6af668":"x=df[['Country Code']]\ny=df[[' USD Value']]\n\ndf[['Country Code',' USD Value']].plot(kind='scatter', x='Country Code', y=' USD Value', alpha=0.5)\nplt.figure(figsize=(8,8))\n#plt.scatter(X, Y, s=30)\nplt.title('Task 3 completion time vs. Age')\nplt.xlabel('Participant Age')\nplt.ylabel('Time to complete Task 3 (in seconds)')\nplt.show()","0d011f62":"x=df[['Adults without an account owning a mobile phone (in millions)']]\ny=df[[' USD Value']]\n\n\ndf[['Adults without an account owning a mobile phone (in millions)',' USD Value']].plot(kind='scatter', x='Adults without an account owning a mobile phone (in millions)', y=' USD Value', alpha=0.5,figsize=(8,8))\nplt.gca().invert_yaxis() #Reverse the Y Axis order \n\n\nplt.title('Number of adults without a bank account but own a mobile phone (in millions) vs. LocalBitcoins BTC Transaction Volume (in USD)')\nplt.xlabel('Number of adults without a bank account but own a mobile phone (in millions)')\nplt.ylabel('LocalBitcoins BTC Transaction Volume (in USD)')\n","989a7a1e":"x=df[['Adults without an account owning a mobile phone (in millions)']]\ny=df[[' USD Value']]\n\n\ndf[['Adults without an account owning a mobile phone (in millions)',' USD Value']].plot(kind='scatter', x='Adults without an account owning a mobile phone (in millions)', y=' USD Value', alpha=0.5,figsize=(8,8))\nplt.gca().invert_yaxis()\n\n\nplt.title('Number of adults without a bank account but own a mobile phone (in millions) vs. Total Transaction Volume of BTC (in USD) on LocalBitcoins by Country')\nplt.xlabel('Number of adults without a bank account but own a mobile phone')\nplt.ylabel('Total Transaction Volume of BTC (in USD) on LocalBitcoins by Country')","73378e91":"#This section removes all NaN rows and skips them\n\ndf = df.dropna()\n#df.fillna(0)\ndf.head()\n\n\ndf[['Adults without an account owning a mobile phone (in millions)',' USD Value']].plot(kind='scatter', x='Adults without an account owning a mobile phone (in millions)', y=' USD Value', alpha=0.5,figsize=(8,8))\nplt.gca().invert_yaxis()\nplt.title('Number of adults (in millions) without a bank account but own a mobile phone  vs. Total Transaction Volume of BTC (in USD) on LocalBitcoins by Country')\nplt.xlabel('Number of adults (in millions) without a bank account but own a mobile phone')\nplt.ylabel('Total Transaction Volume of BTC (in USD) on LocalBitcoins by Country')\n\n","4962cc89":"#x=df[['Adults without an account owning a mobile phone (in millions)']]\n#y=df[['USD Value']]\n\nX = df[['Adults without an account owning a mobile phone (in millions)']].iloc[:].values.reshape(-1,1)  # values converts it into a numpy array\n# ilocate grabs the data then values holds onto the value \nY = df[[' USD Value']].iloc[: 1].values.reshape(-1,1)\ntype(X)\ntype(Y)\n","824e7a1b":"print(df.isnull())\n\n","be69ee33":"#This section removes all NaN rows and skips them\n\ndf = df.dropna()\n#df.fillna(0)\ndf.head()","9e822489":"df = pd.read_csv('..\/input\/final-clean\/datasets_702138_1227179_datasets_684561_1212154_Rank_by_Country_V6.csv')\n# data = pd.read_csv('..\/input\/final-clean\/Rank_by_Country_V8.csv')\ndf.head()","fd718765":"df.plot()","a36c34fb":"print(df.columns)\n\n#rename columns with spaces in names\ndf = df.rename(columns={\" USD Value \": \"USD Value\"})\n\n\ndf[['Rank', 'USD Value']].plot()","66b889b4":"df.hist(figsize=(8,8))\nplt.figure(figsize=(8,8))","45ca6a8e":"x=df[['Country Code']]\ny=df[['USD Value']]\n\ndf.dtypes\n","55bdbd76":"x=df[['Country Code']]\ny=df[['USD Value']]\n\ndf[['Country Code','USD Value']].plot(kind='scatter', x='Country Code', y='USD Value', alpha=0.5, figsize=(15,10))\n\n#plt.scatter(X, Y, s=30)\nplt.title('Task 3 completion time vs. Age')\nplt.xlabel('Participant Age')\nplt.ylabel('Time to complete Task 3 (in seconds)')\n\n#plt.show()","95ee7419":"x=df[['Adults without an account owning a mobile phone (in millions)']]\ny=df[['USD Value']]\n\n\ndf[['Adults without an account owning a mobile phone (in millions)','USD Value']].plot(kind='scatter', \n                                                                                       x='Adults without an account owning a mobile phone (in millions)', \n                                                                                       y='USD Value', alpha=0.5,figsize=(8,8))\nplt.gca().invert_yaxis()\n\n\nplt.title('Number of adults without a bank account but own a mobile phone (in millions) vs. LocalBitcoins BTC Transaction Volume (in USD)')\nplt.xlabel('Number of adults without a bank account but own a mobile phone (in millions)')\nplt.ylabel('LocalBitcoins BTC Transaction Volume (in USD)')","fa7710ac":"x=df[['Adults without an account owning a mobile phone (in millions)']]\ny=df[['USD Value']]\n\n\ndf[['Adults without an account owning a mobile phone (in millions)','USD Value']].plot(kind='scatter', \n                                                                                       x='Adults without an account owning a mobile phone (in millions)', \n                                                                                       y='USD Value', alpha=0.5,figsize=(8,8))\nplt.gca().invert_yaxis()\n\n\nplt.title('Number of adults without a bank account but own a mobile phone (in millions) vs. Total Transaction Volume of BTC (in USD) on LocalBitcoins by Country')\nplt.xlabel('Number of adults without a bank account but own a mobile phone')\nplt.ylabel('Total Transaction Volume of BTC (in USD) on LocalBitcoins by Country')","bdb52709":"#x=df[['Adults without an account owning a mobile phone (in millions)']]\n#y=df[['USD Value']]\n\nX = df[['Adults without an account owning a mobile phone (in millions)']].iloc[:].values.reshape(-1,1)  # values converts it into a numpy array\n# ilocate grabs the data then values holds onto the value \nY = df[['USD Value']].iloc[:].values.reshape(-1,1)\ntype(X)","3a5156fc":"#df = df.apply (pd.to_numeric, errors='coerce')\ndf = df.dropna()\n#df = df.reset_index(drop=True)\n\n\n\ndf[['Adults without an account owning a mobile phone (in millions)','USD Value']].plot(kind='scatter', x='Adults without an account owning a mobile phone (in millions)', y='USD Value', alpha=0.5,figsize=(8,8))\n\n#annotate points\nfor x,y in zip(df['Adults without an account owning a mobile phone (in millions)'], df['USD Value']):\n    #print(\"X:\", x, \"Y:\", y)\n    plt.annotate(\"Point:\"+str(y), # this is the text\n                 (x,y), # this is the point to label\n                 textcoords=\"offset points\", # how to position the text\n                 xytext=(0,10), # distance from text to points (x,y)\n                 ha='center') # horizontal alignment can be left, right or center\n\n\n    plt.gca().invert_yaxis()\nplt.title('Number of adults (in millions) without a bank account but own a mobile phone  vs. Total Transaction Volume of BTC (in USD) on LocalBitcoins by Country')\nplt.xlabel('Number of adults (in millions) without a bank account but own a mobile phone')\nplt.ylabel('Total Transaction Volume of BTC (in USD) on LocalBitcoins by Country')\n\n","341ff1a9":"X = df['Adults without an account owning a mobile phone (in millions)'].values.reshape(-1,1)\n\n#print(df['USD Value'])\n#Original values are strings not numbers\n#1. first replace ',' with '', this changes \"1,046,951,559.49\" into \"1046951559.49\"\n#2. then get a list from pandas.Series using values\n#3. then make this list a list of floating point numbers using .astype(float)\n#4. then shape it to be vertical row is data sample, column is feature (just one feature here, the exact number)\nY = df['USD Value'].str.replace(',','').values.astype(float).reshape(-1,1)\n\nprint(\"X:\", X)\nprint(\"Y:\", Y)","335ac312":"model = LinearRegression()\nmodel.fit(X,Y)\nY_Prediction = model.predict(X) \n#Y_Prediction line will hold \nY_Prediction","6de11ab2":"df[['Adults without an account owning a mobile phone (in millions)','USD Value']].plot(kind='scatter', x='Adults without an account owning a mobile phone (in millions)', y='USD Value', alpha=0.5,figsize=(8,8))\n\n\n\n\nplt.figure(figsize=(8,8))\nplt.scatter(X,Y, s=30)\nplt.plot(X, Y_Prediction, color = 'red')\n\nplt.gca().invert_yaxis()\nplt.title('Number of adults without a bank account but own a mobile phone (in millions) vs. Total Transaction Volume of BTC (in USD) on LocalBitcoins by Country')\nplt.xlabel('Number of adults without a bank account but own a mobile phone')\nplt.ylabel('Total Transaction Volume of BTC (in USD) on LocalBitcoins by Country')\nplt.show()","63e97845":"model = LinearRegression()\nmodel.fit(x,y)\ny_Prediction = model.predict(x) \n#Y_Prediction line will hold \ny_Prediction\n","c4a259b1":"model = LinearRegression()\nmodel.fit(x,y)\ny_Prediction = model.predict(x) \n#Y_Prediction line will hold \ny_Prediction\n","60f42005":"plt.figure(figsize=(8,8))\nplt.scatter(X,Y, s=30)\nplt.plot(X, Y_Prediction, color = 'red')\nplt.xlabel('Participant Age')\nplt.ylabel('Time to complete task 3 (in seconds)')\nplt.title('Time to complete task 3 (in seconds) by Age')\nplt.show()","575af1f7":"X = df[['Adults without an account owning a mobile phone (in millions)']].iloc[:, 0].values.reshape(-1,1) \n# ilocate grabs the data then values holds onto the value \nY = df[['USD Value']].iloc[:, 1].values.reshape(-1,1)\n\nplt.figure(figsize=(8,8))\nplt.scatter(X,Y,)\nplt.xlabel('Participant Age')\nplt.ylabel('Time to complete task 3 (in seconds)')\nplt.title('Time to complete task 3 (in seconds) by Age')\nplt.show()","04621ccb":"X = df[['Adults without an account owning a mobile phone (in millions)']].iloc[:5].values.reshape(-1,1)  # values converts it into a numpy array\n# ilocate grabs the data then values holds onto the value \nY = df[[' USD Value']].iloc[: 1].values.reshape(-1,1)  # -1 means that calculate the dimension of rows, but have 1 column\n\nmodel = LinearRegression()\nmodel.fit(X,Y)\nY_Prediction = model.predict(X) \n#Y_Prediction line will hold \nY_Prediction","3f25969c":"#annotate points\nfor x,y in zip(df['Adults without an account owning a mobile phone (in millions)'], df[' USD Value']):\n    plt.annotate(\"Point:\"+str(y), # this is the text\n                 (x,y), # this is the point to label\n                 textcoords=\"offset points\", # how to position the text\n                 xytext=(0,10), # distance from text to points (x,y)\n                 ha='center') # horizontal alignment can be left, right or center","7d6537b3":"df[['Adults without an account owning a mobile phone (in millions)','USD Value']].plot(kind='scatter', x='Adults without an account owning a mobile phone (in millions)', y='USD Value', alpha=0.5,figsize=(8,8))\n\n\n\n\nplt.figure(figsize=(8,8))\nplt.scatter(X,Y, s=30)\nplt.plot(X, Y_Prediction, color = 'red')\n\nplt.gca().invert_yaxis()\nplt.title('Number of adults without a bank account but own a mobile phone (in millions) vs. Total Transaction Volume of BTC (in USD) on LocalBitcoins by Country')\nplt.xlabel('Number of adults without a bank account but own a mobile phone')\nplt.ylabel('Total Transaction Volume of BTC (in USD) on LocalBitcoins by Country')\nplt.show()","af125223":"model = LinearRegression()\nmodel.fit(x,y)\ny_Prediction = model.predict(x) \n#Y_Prediction line will hold \ny_Prediction\n","b56404a7":"plt.figure(figsize=(8,8))\nplt.scatter(X,Y, s=30)\nplt.plot(X, Y_Prediction, color = 'red')\nplt.xlabel('Participant Age')\nplt.ylabel('Time to complete task 3 (in seconds)')\nplt.title('Time to complete task 3 (in seconds) by Age')\nplt.show()","5a926e12":"\nX = df[['Adults without an account owning a mobile phone (in millions)']].iloc[:, 0].values.reshape(-1,1) \n# ilocate grabs the data then values holds onto the value \nY = df[['USD Value']].iloc[:, 1].values.reshape(-1,1)\n\nplt.figure(figsize=(8,8))\nplt.scatter(X,Y,)\nplt.xlabel('Participant Age')\nplt.ylabel('Time to complete task 3 (in seconds)')\nplt.title('Time to complete task 3 (in seconds) by Age')\nplt.show()","98591e34":"x=df[['Adults without an account owning a mobile phone (in millions)']]\ny=df[['USD Value']]\n\nax = gca;\n#ax.XDir = 'reverse';\nax.YDir = 'reverse';\nytickformat('usd')\n\ndf[['Adults without an account owning a mobile phone (in millions)','USD Value']].plot(kind='scatter', x='Adults without an account owning a mobile phone (in millions)', y='USD Value', alpha=0.5,figsize=(8,8))","bf91d453":"X = data.iloc[:, 0].values.reshape(-1,1)\nY = data.iloc[:, 1].values.reshape(-1,1)\n\nplt.figure(figsize=(8,8))\nplt.scatter(X, Y, s=30)\nplt.title('Task 3 completion time vs. Age')\nplt.xlabel('Participant Age')\nplt.ylabel('Time to complete Task 3 (in seconds)')\nplt.show()","c004bbb5":"model = LinearRegression()\nmodel.fit(X,Y)\nY_pred = model.predict(X)\n\nmodel = LinearRegression()  # create an object called `model` for the LinearRegression class\nmodel.fit(X, Y)  # perform linear regression on the model using X and Y from the file we have read in\nY_pred = model.predict(X)  # make predictions","7e71a6d0":"Rank_by_Country_V3 Country Code USD Value","39c2581e":"illegal = {'Pakistan', 'Saudi Arabia', 'Vietnam'}\nprint(illegal)\n\nalegal = {'Argentina', 'Chile', 'Colombia', 'Kazakhstan', 'Kenya', 'Malaysia', 'Nigeria', 'Peru', 'Tanzania', 'United Arab Emirates'}\nprint(alegal)\n\nrestricted = {'India', 'China', 'Egypt', 'Morocco',}\nprint(restricted)\n\nlegal = {'Australia', 'Brazil', 'Canada', 'Croatia', 'Czech Republic', 'Denmark', 'Dominican Republic', 'Hong Kong', 'Hungary', 'Indonesia', 'Iran', 'Japan', 'Mexico', 'New Zealand',  'Norway', 'Philippines', 'Poland', 'Romania', 'Russia', 'Singapore', 'South Korea', 'South Africa', 'Sweden', 'Switzerland', 'Thailand', 'Turkey', 'Ukraine', 'United Kingdom', 'United States', 'Venezuala'}\nprint (legal)","ba210c0b":"# Country_Legality = (1) Dictionary\n#Key is Country. <Country Code> \n#Value is Country information (Legal, Alegal, Restricted, and Illegal)\n\n\n# illegal = {'Pakistan' : 'PK', 'Saudi Arabia': 'SA', 'Vietnam':'VN'}\n# alegal = {'Argentina': 'AR', 'Chile', 'Colombia', 'Kazakhstan', 'Kenya', 'Malaysia', 'Nigeria', 'Peru', 'Tanzania', 'United Arab Emirates'}\n# restricted = {'India', 'China', 'Egypt', 'Morocco', }\n# legal = {'Australia', 'Brazil', 'Canada', 'Croatia', 'Czech Republic', 'Denmark', 'Dominican Republic', 'Hong Kong', 'Hungary', 'Indonesia', 'Iran', 'Japan', 'Mexico', 'New Zealand',  'Norway', 'Philippines', 'Poland', 'Romania', 'Russia', 'Singapore', 'South Korea', 'South Africa', 'Sweden', 'Switzerland', 'Thailand', 'Turkey', 'Ukraine', 'United Kingdom', 'United States', 'Venezuala'}\n\n\n\n\n\ncountry_legality = { 'PK': 'illegal', \n                    'SA': 'illegal',\n                    'VN': 'illegal',\n                    'AR': 'alegal',\n                    'CL': 'alegal',\n                    'CO': 'alegal',\n                    'KZ': 'alegal',\n                    'KE': 'alegal',\n                    'MY': 'alegal',\n                    'NG': 'alegal',\n                    'PE': 'alegal',\n                    'TZ': 'alegal',\n                    'AE': 'alegal',\n                    'IN':'restricted',\n                    'CN':'restricted',\n                    'EG':'restricted',\n                    'MA':'restricted',\n                    'AU':'legal',\n                    'BR':'legal',\n                    'CA':'legal',\n                    'CR':'legal',\n                    'CZ':'legal',\n                    'DK':'legal',\n                    'DO':'legal',\n                    'HK':'legal',\n                    'HU':'legal',\n                    'ID':'legal',\n                    'IR':'legal',\n                    'JP':'legal',\n                    'MX':'legal',\n                    'NZ':'legal',\n                    'NO':'legal',\n                    'PH':'legal',\n                    'PL':'legal',\n                    'RO':'legal',\n                    'RU':'legal',\n                    'SG':'legal',\n                    'KR':'legal',\n                    'ZA':'legal',\n                    'SE':'legal',\n                    'CH':'legal',\n                    'TH':'legal',\n                    'TR':'legal',\n                    'UA':'legal',\n                    'GB':'legal',\n                    'US':'legal',\n                    'VE':'legal'\n                     }\n\nprint(country_legality)\n\nprint(len(country_legality))","88528d48":"#Have Ad_Dictionary compare against Legality \n#if Match write pair into key:pair\n\nlaw_volume_dict = {}\n\n#Declare Temp X as country code key? \n\nfor temp_x in country_legality.keys():\n    if temp_x == 'legal':\n        print(temp_x)\n    elif temp_x == 'alegal':\n        print(temp_x)\n    elif temp_x == 'restricted':\n        print(temp_x)\n    else: \n        print(temp_x)\n    \n    \nfor temp_x in country_legality.values():\n    if temp_x == 'legal':\n        print(temp_x)\n    elif temp_x == 'alegal':\n        print(temp_x)\n    elif temp_x == 'restricted':\n        print(temp_x)\n    else: \n        print(temp_x)       \n    ","b2b5c937":"#Produce the visuals of Plot Volumes  using something like\n# law_dict[\u2018Legal\u2019[Country_Code_volume]].plot()","d4cf4ea5":"Use Binary Logic to sort Countries into new Dictionary (law_volume_dict) through comparison of elif statements of < Legal Status>.\n\nKey = < Country Code>\n\nPair = Link to legal status in dictionary Country_Legality","580a9fbf":"Digital financial transactions facilitate development by:\n\n- Improving service delivery\n- Preventing people from falling into poverty\n- Helping people build savings\n\nBut strong consumer protections are also needed!\nhttps:\/\/blogs.worldbank.org\/developmenttalk\/digital-financial-transactions-matter-development?cid=dec_tt_research_en_ext**","980132ba":"Moving forward in learning about Python I need to learn more about transforming the dataframes as well as nesting dataframes and dictionaries.\n\nI Hope to expand on this work and In MP2 Run a Regression Analysis exploring a relationship between a country's volume of BTC Ads and an unbanked populations with cell phone.\n\nI have started by coding some logic. Please provide feedback on the code below as I plan to build upon on code this research question. I could use help or feedback to accessing a nested dictionary.\n\nThings to consider\n\nConvert BTC volume to Foreign Exchange currency then to USD for universal conversion\nWill Require FEX currency to USD API.\nCalculate the Correlation between the volume spent advertising BTC, and a countries bankless population with cellphones.\nCompare Correlation results between legal status of countries\nRQ#1 What are advertisement spending patterns on Crypto ads in restricted or Illegal regions?\nLegal\nAustralia, Brazil, Canada, Croatia, Czech Republic, Denmark, Dominican Republic, Hong Kong, Hungary, Indonesia, Iran, Japan, Mexico, New Zealand, Norway, Philippines, Poland, Romania, Russia, Singapore, South Korea, South Africa, Sweden, Switzerland, Thailand, Turkey, Ukraine, United Kingdom, United States, Venezuala\nNeutral \/ Alegal\nArgentina, Chile, Colombia, Kazakhstan, Kenya, Malaysia, Nigeria, Peru, Tanzania, United Arab Emirates,\nRestricted status\nIndia, China, Egypt, Morocco,\nIllegal\nPakistan, Saudi Arabia, Vietnam","619a60f5":"# Pathway 1: Exploring Python for ML\n\nI am building off of my work in MP1 and in MP2 run a logistic Regression Analysis exploring the relationship between a country's volume of BTC Ads and their unbanked populations with cell phone. ","d2ff37bb":"\"Sources: Global Findex database; Gallup World Poll 2017.\n\"\nNote: Data are not displayed for economies where the share of adults without an account is 5 percent or less.\n![image.png](attachment:image.png)","d9df9b59":"Dataset #1\nName: Regular survey about Unbanked populations (2011, 2014, 2017) Source: https:\/\/globalfindex.worldbank.org\/ Restrictions:\n\nExtracted entities\/terms\/features:\n\nWhy is it interesting to you? Very Detailed analysis of Unbanked populations. Specifically it considers how access to mobile phone will change the\n\nDataset #2\nName: Country Legal Status\n\nSource: https:\/\/coin.dance\/poli\n\nRestrictions: Unclear of legal status by year. IE What was legal in 2017?\n\nExtracted entities\/terms\/features:\n\n* Legal\n    * Australia, Brazil, Canada, Croatia, Czech Republic, Denmark, Dominican Republic, Hong Kong, Hungary, Indonesia, Iran, Japan, Mexico, New Zealand,  Norway, Philippines, Poland, Romania, Russia, Singapore, South Korea, South Africa, Sweden, Switzerland, Thailand, Turkey, Ukraine, United Kingdom, United States, Venezuala\n* Neutral \/ Alegal\n    * Argentina, Chile, Colombia, Kazakhstan, Kenya, Malaysia, Nigeria, Peru, Tanzania, United Arab Emirates, \n* Restricted status \n    * India, China, Egypt, Morocco, \n* Illegal\n    * Pakistan, Saudi Arabia, Vietnam\n\n\nWhy is it interesting to you?\n\nDataset #3\nName: Local Bitcoins Volume by Country\n\nSource: https:\/\/docs.google.com\/spreadsheets\/d\/1CKdE7v2w_cJooY3DhdTJzWfzhA_LQeU1mngLMWvP2j0\/edit#gid=0\n\nRestrictions:\n\nExtracted entities\/terms\/features:\n\n* Provides FEX exchange Conversions to USD ","6232c7d4":"## Research question:\n1. Is there a correlation between a countries BTC volume when considering a countries unbanked population with cell phones and the legal status of Bitcoin\/Blockchain?\n1. Is there relationship between a countries Bitcoin\/Blockchain legal status and the amount spent advertising buying\/selling Bitcoin online to target an unbanked population with cell phones?"}}