{"cell_type":{"917a5466":"code","a35c2df3":"code","45e87446":"code","5b94fc8b":"code","43c6a1c9":"code","31c79cb9":"code","4bee6b68":"code","41829bf0":"code","634697b6":"code","0450b462":"code","c4edf824":"code","220f9233":"code","03f57de9":"code","1088d794":"code","a106f0d9":"code","e11fe788":"code","c4328842":"code","d00dc740":"code","49c42d7d":"code","45421f18":"code","734da5e0":"markdown","a53ba63b":"markdown"},"source":{"917a5466":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a35c2df3":"data = pd.read_csv('\/kaggle\/input\/drinking-water-probability\/drinking_water_potability.csv')\ndata.head()","45e87446":"Water_Parameters_WHO = pd.DataFrame({'Parameters':['pH','TDS','Chloramines','Sulfate','Conductivity','TOC','Trihalomethanes','Turbidity'], \n                        'Values': ['6.5<pH<8.5', '<1000', '0-4','3-30', '<400', '<2','<80','<5']})\nWater_Parameters_WHO","5b94fc8b":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nsns.countplot(data=data, x =data.Potability, palette='rainbow')\nplt.title('Count of Potability')","43c6a1c9":"new_df = data[data.Potability == 1]\n# Criteria based on WHO water standards\nph = new_df[(new_df['ph'] >=6.5) & (new_df['ph']<=8.5)]\nSolids = new_df[new_df.Solids < 1000]\nchloramines = new_df[new_df.Chloramines < 4]\nsulfate = new_df[new_df.Sulfate < 30]\nConductivity = new_df[new_df.Conductivity < 400]\nOrganic = new_df[new_df.Organic_carbon < 2]\nTrihalo= new_df[new_df.Trihalomethanes < 80]\nTurbidity = new_df[new_df.Turbidity < 5]","31c79cb9":"Samples_meeting_criteria = pd.DataFrame({'Parameters': ['Total Samples potability','Datasets met the criteria of pH','Datasets met the criteria of solids',\n          'Datasets met the criteria of chloramines','Datasets met the criteria of sulfate','Datasets met the criteria of Conductivity',\n          'Datasets met the criteria of Organic','Datasets met the criteria of Trihalomethanes','Datasets met the criteria of Turbidity'],\n         'Values':[new_df.shape[0],ph.shape[0],Solids.shape[0],\n                   chloramines.shape[0],sulfate.shape[0],Conductivity.shape[0], \n                   Organic.shape[0], Trihalo.shape[0],Turbidity.shape[0]]} )\nSamples_meeting_criteria","4bee6b68":"#checking null_values \ndata.isnull().sum()","41829bf0":"#Missing value analysis and imputing them \ndef missing_value(df):\n    for i in list(df.columns):\n        x = df[i].isnull().sum()\/len(df)\n        if x > 0.40:\n            df = df.drop([i], axis=1)\n    from sklearn.impute import SimpleImputer\n    si = SimpleImputer(strategy='mean')\n    return pd.DataFrame(si.fit_transform(df), columns = df.columns)","634697b6":"imputed_df = missing_value(data)\nimputed_df","0450b462":"imputed_df.isnull().sum()","c4edf824":"# Outlier treatment \nfor column in imputed_df:\n    plt.figure()\n    imputed_df.boxplot([column])","220f9233":"q1 = data.quantile(0.25)\nq3 = data.quantile(0.75)\niqr = q3 - q1","03f57de9":"New_df   = imputed_df[~((imputed_df < (q1 - 1.5*iqr)) | (imputed_df > (q3 + 1.5*iqr))).any(axis=1)]\nnew_df","1088d794":"new_df.dropna()","a106f0d9":"#Because of losing more than 75% data i have included outliers in the model building \nx = imputed_df.drop(['Potability'], axis=1)\ny = imputed_df.Potability","e11fe788":"from sklearn.preprocessing import MinMaxScaler\nmms = MinMaxScaler()\nx_scaled = pd.DataFrame(mms.fit_transform(x), columns = x.columns)","c4328842":"from sklearn.model_selection  import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier \n\naccuracy = []\nmodels = [DecisionTreeClassifier(),RandomForestClassifier(),KNeighborsClassifier()]\n\nfor i in models: \n    cv = cross_val_score(i,x,y, cv=3)\n    acc = np.mean(cv)\n    accuracy.append(acc)","d00dc740":"accuracy","49c42d7d":"accuracy1 = []\nmodels = [DecisionTreeClassifier(),RandomForestClassifier(),LogisticRegression(),KNeighborsClassifier()]\n\nfor i in models: \n    cv = cross_val_score(i,x_scaled,y, cv=5)\n    acc = np.mean(cv)\n    accuracy1.append(acc)","45421f18":"accuracy1","734da5e0":"Data Analysis Summary \n\nMost of the datasets which are classified as drinking water does not meet the criteria set by WHO for drinking water. Out of 3276 samples 1278 samples are potable drinking water. Out of 1278 samples following samples meet the criteria set by WHO \npH :                         583, \nTotal Dissolved Solids :       1,\nChloramines :                 36,\nSulfate :                      0, \nConductivity :               516,\nOrganic Carbon:                0,\nTrihalomethanes :            985,\nTurbidity :                 1161.","a53ba63b":"Scaling Improves the accuracy by 2%. "}}