{"cell_type":{"406c1b35":"code","6d062ac7":"code","a172474e":"code","aeeaf363":"code","ef3e1cb1":"code","a892e84e":"code","b35b6157":"code","7b20127e":"code","43cc3bc6":"code","6cac0c63":"code","c4418fe7":"code","48ff34b2":"code","c0a20ac0":"code","b420c5f7":"code","db00ab83":"code","d9fc9ab6":"code","3a2fc318":"code","9c4d2050":"code","e05710c7":"code","5d08237d":"markdown","3659734b":"markdown","bbbb0677":"markdown","d552a0ff":"markdown","e40d88cc":"markdown","9479417d":"markdown","208f91fc":"markdown","5df0e86c":"markdown","34cf144c":"markdown","d2aa2dbc":"markdown"},"source":{"406c1b35":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d062ac7":"pip install xlrd","a172474e":"import warnings\nimport itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings(\"ignore\")\nplt.style.use('fivethirtyeight')\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib\nmatplotlib.rcParams['axes.labelsize'] = 14\nmatplotlib.rcParams['xtick.labelsize'] = 12\nmatplotlib.rcParams['ytick.labelsize'] = 12\nmatplotlib.rcParams['text.color'] = 'k'","aeeaf363":"df = pd.read_excel(\"..\/input\/sample-store\/Sample - Superstore.xls\")\nfurniture = df.loc[df['Category'] == 'Furniture']","ef3e1cb1":"furniture['Order Date'].min(), furniture['Order Date'].max()","a892e84e":"cols = ['Row ID', 'Order ID', 'Ship Date', 'Ship Mode', 'Customer ID', 'Customer Name', 'Segment', 'Country', 'City', 'State', 'Postal Code', 'Region', 'Product ID', 'Category', 'Sub-Category', 'Product Name', 'Quantity', 'Discount', 'Profit']\nfurniture.drop(cols, axis=1, inplace=True)\nfurniture = furniture.sort_values('Order Date')\nfurniture.isnull().sum()","b35b6157":"furniture = furniture.groupby('Order Date')['Sales'].sum().reset_index()","7b20127e":"furniture = furniture.set_index('Order Date')\nfurniture.index","43cc3bc6":"y = furniture['Sales'].resample('MS').mean()\ny['2017':]","6cac0c63":"y.plot(figsize=(15, 6))\nplt.show()","c4418fe7":"from pylab import rcParams","48ff34b2":"rcParams['figure.figsize'] = 18, 8\ndecomposition = sm.tsa.seasonal_decompose(y, model='additive')\nfig = decomposition.plot()\nplt.show()","c0a20ac0":"p = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","b420c5f7":"for param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(y,\n                                            order=param,\nseasonal_order=param_seasonal,\nenforce_invertibility=False)\n            results = mod.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal,\n                                                 results.aic))\n        except:\n            continue","db00ab83":"mod = sm.tsa.statespace.SARIMAX(y,\n                                order=(1, 1, 1),\n                                seasonal_order=(0, 1, 1, 12),\n                                enforce_invertibility=False)\nresults = mod.fit()\nprint(results.summary().tables[1])","d9fc9ab6":"results.plot_diagnostics(figsize=(16, 8))\nplt.show()","3a2fc318":"pred = results.get_prediction(start=pd.to_datetime('2017-01-01'), dynamic=False)\npred_ci = pred.conf_int()\nax = y['2014':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\nax.set_xlabel('Date')\nax.set_ylabel('Furniture Sales')\nplt.legend()\nplt.show()","9c4d2050":"y_forecasted = pred.predicted_mean\ny_truth = y['2017-01-01':]\nmse = ((y_forecasted - y_truth) ** 2).mean()\nprint('The Mean Squared Error of our forecasts is {}'\n      .format(round(mse, 2)))\nprint('The Root Mean Squared Error of our forecasts is {}'\n      .format(round(np.sqrt(mse), 2)))","e05710c7":"pred_uc = results.get_forecast(steps=100)\npred_ci = pred_uc.conf_int()\nax = y.plot(label='observed', figsize=(14, 7))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Date')\nax.set_ylabel('Furniture Sales')\nplt.legend()\nplt.show()","5d08237d":"the plot above shows that the sale of furniture s unstable\nnow lets use **ARIMA** which is commonly used for time-series forecasting and stands for **Autoregressive Integrated Moving Average**\nARIMA models are denoted with the notation ARIMA(p, d, q). **These three parameters account for seasonality, trend, and noise** in data","3659734b":"running model diagnostics ","bbbb0677":"visualizing data using a time-series decomposition","d552a0ff":"Validating forecasts by comparing it to predicted sales to real sales of the time series","e40d88cc":"Visualizing Furniture Sales Time Series Data","9479417d":"using grid search to find the optimal set of parameters ","208f91fc":"now lets produce and visualize our forecasts","5df0e86c":"The line plot is showing the observed values compared to the rolling forecast predictions. Overall, our forecasts align with the true values","34cf144c":"from the above output we can infer that SARIMAX(1, 1, 1)x(0, 1, 1, 12) yields lowest aic VAL OF 484.59\ntherefore considering it as an optimal option \nFitting the model","d2aa2dbc":"Indexing with Time Series Data"}}