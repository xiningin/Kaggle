{"cell_type":{"4732461b":"code","48ba0a1a":"code","0ab33827":"code","d0182b23":"code","6bdbff98":"code","8fb73b98":"code","9df476f5":"code","6c5d7134":"code","3a76eb46":"code","8364801c":"code","45574dbd":"code","6e526615":"code","afd54b17":"code","4c021c36":"code","f8323ab6":"code","db9ba68d":"code","ea1ff168":"code","4c5d8458":"code","5c24f29d":"code","f26c034a":"code","066c7bb9":"code","1e0ff480":"code","26a4947b":"code","1e19dc87":"code","436a9cbf":"code","bd894fd1":"code","7029d411":"code","f4c07fc8":"code","a476f689":"code","ad11e3a8":"code","3b29433e":"code","6b6f4d30":"code","0a4126dd":"code","3a75530f":"code","7ebc23aa":"code","bb06fd03":"code","81e5b544":"code","f421981d":"code","bc047a0a":"code","3fd851aa":"code","0e02f684":"code","5d6f4f01":"code","61a18ad4":"code","772f7454":"code","7fdfccfb":"code","5ae9b818":"code","2f548f22":"code","dc330921":"code","a39ac4d7":"code","6ed3c077":"code","96057997":"code","82a1d4cb":"code","7e392b6a":"code","982ac068":"code","810ec670":"code","e30e10c6":"code","ba632568":"code","586d8a9c":"code","176692ce":"code","85d14352":"code","76ee9812":"markdown","b3a25dae":"markdown","285a8bb8":"markdown","c1fc86f8":"markdown","343d8d50":"markdown","84b7b902":"markdown","8670c58d":"markdown","21037577":"markdown","1fc41361":"markdown","794a27b4":"markdown","a6919c9e":"markdown","f1007530":"markdown","81bcdb1b":"markdown","e8e69f23":"markdown","a97e2f13":"markdown","0d9f601f":"markdown","16b55243":"markdown","3b710d88":"markdown","f4625e43":"markdown","62dcb31c":"markdown","2286eb7c":"markdown","906c4efc":"markdown","6224a5c5":"markdown","f415e017":"markdown","a30c6ebd":"markdown","ff42b0ff":"markdown","cacf304a":"markdown","86e26938":"markdown","f8e2c817":"markdown","86b8ef23":"markdown","ea63a9b4":"markdown","e1aeb3d6":"markdown","bef608b7":"markdown","2076bf0f":"markdown","fa9c46f6":"markdown","f3d917bb":"markdown","f9b8dc02":"markdown","7abb0c11":"markdown","dd6469b3":"markdown","e98afb93":"markdown","da8fb9f5":"markdown","4ee530d8":"markdown","58a6f2a7":"markdown","9c0aba9d":"markdown","794b6e08":"markdown","3d6fd3a0":"markdown","543ef5e1":"markdown","2b9a6fd8":"markdown","3b098b54":"markdown","2943a9fc":"markdown","1115c294":"markdown","0c5fc74e":"markdown","c024317e":"markdown","c4c97817":"markdown","1139030a":"markdown","704cf3c1":"markdown"},"source":{"4732461b":"# import required libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport wordcloud\nimport seaborn as sns\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\npd.set_option('display.max_columns', None)\n%matplotlib inline","48ba0a1a":"# read data\npath = '..\/input\/'\nmcr_df = pd.read_csv(path + 'multipleChoiceResponses.csv', low_memory=False, header=[0,1]) #multiple-choice responses\nffr_df = pd.read_csv(path + 'freeFormResponses.csv', low_memory=False, header=[0,1]) # free form responses\n\n# adjust columns\nmcr_df.columns = mcr_df.columns.map('_'.join)\nffr_df.columns = ffr_df.columns.map('_'.join)","0ab33827":"# rename columns that we are primarily interested.\nmcr_df = mcr_df.rename({'Time from Start to Finish (seconds)_Duration (in seconds)' : 'duration', \n                 'Q1_What is your gender? - Selected Choice' : 'gender', \n                 'Q2_What is your age (# years)?' : 'age', \n                 'Q3_In which country do you currently reside?' : 'country', \n                 'Q4_What is the highest level of formal education that you have attained or plan to attain within the next 2 years?' : 'education', \n                 'Q5_Which best describes your undergraduate major? - Selected Choice' : 'major', \n                 'Q6_Select the title most similar to your current role (or most recent title if retired): - Selected Choice' : 'title', \n                 'Q7_In what industry is your current employer\/contract (or your most recent employer if retired)? - Selected Choice' : 'industry', \n                'Q8_How many years of experience do you have in your current role?' : 'experience', \n                'Q9_What is your current yearly compensation (approximate $USD)?' : 'compensation', \n                'Q10_Does your current employer incorporate machine learning methods into their business?' : 'employerML?', \n                'Q12_MULTIPLE_CHOICE_What is the primary tool that you use at work or school to analyze data? (include text response) - Selected Choice' : 'primary_tool', \n                'Q17_What specific programming language do you use most often? - Selected Choice' : 'language_often', \n                'Q18_What programming language would you recommend an aspiring data scientist to learn first? - Selected Choice' : 'language_recommend', \n                'Q20_Of the choices that you selected in the previous question, which ML library have you used the most? - Selected Choice' : 'MLlibrary_most',\n                'Q22_Of the choices that you selected in the previous question, which specific data visualization library or tool have you used the most? - Selected Choice' :'dataviz_most',       \n                'Q23_Approximately what percent of your time at work or school is spent actively coding?' : 'time_coding',\n                'Q24_How long have you been writing code to analyze data?': 'coding_experience',\n                'Q25_For how many years have you used machine learning methods (at work or in school)?': 'years_ML_used',\n                'Q26_Do you consider yourself to be a data scientist?': 'consider_DS',\n                'Q32_What is the type of data that you currently interact with most often at work or school? - Selected Choice': 'datatype_most',\n                'Q37_On which online platform have you spent the most amount of time? - Selected Choice': 'learning_platform_most',\n                'Q40_Which better demonstrates expertise in data science: academic achievements or independent projects? - Your views:': 'academicsVSprojects',\n                'Q48_Do you consider ML models to be \"black boxes\" with outputs that are difficult or impossible to explain?': 'ML_blackbox'}, axis='columns')\n","d0182b23":"# rename columns that we are interested from free form response data.\nffr_df = ffr_df.rename({'Q6_OTHER_TEXT_Select the title most similar to your current role (or most recent title if retired): - Other - Text' : 'current_title',\n                                  'Q7_OTHER_TEXT_In what industry is your current employer\/contract (or your most recent employer if retired)? - Other - Text':'industry',\n                                   \"Q13_OTHER_TEXT_Which of the following integrated development environments (IDE's) have you used at work or school in the last 5 years? (Select all that apply) - Other - Text\":'ide',\n                                  'Q18_OTHER_TEXT_What programming language would you recommend an aspiring data scientist to learn first? - Other - Text':'language_recommend',  \n                                  'Q11_OTHER_TEXT_Select any activities that make up an important part of your role at work: (Select all that apply) - Other - Text':'main_activity',\n                                  'Q12_OTHER_TEXT_What is the primary tool that you use at work or school to analyze data? (include text response) - Other - Text':'primary_tool',\n                                  'Q17_OTHER_TEXT_What specific programming language do you use most often? - Other - Text':'language_often',\n                                  'Q22_OTHER_TEXT_Of the choices that you selected in the previous question, which specific data visualization library or tool have you used the most? - Other - Text':'dataviz_most',\n                                  'Q30_OTHER_TEXT_Which of the following big data and analytics products have you used at work or school in the last 5 years? (Select all that apply) - Other - Text':'bigdata_tools',\n                                  'Q32_OTHER_What is the type of data that you currently interact with most often at work or school? - Other Data - Text':'datatype_most',\n                                  'Q37_OTHER_TEXT_On which online platform have you spent the most amount of time? - Other - Text':'learning_platform_most',\n                                  'Q21_OTHER_TEXT_What data visualization libraries or tools have you used in the past 5 years? (Select all that apply) - Other - Text' : 'viz'}, axis = 'columns')","6bdbff98":"# separete switchers from others\nmcr_switchers_df = mcr_df[mcr_df.major=='A business discipline (accounting, economics, finance, etc.)']\nmcr_exc_switchers_df = mcr_df[mcr_df.major!='A business discipline (accounting, economics, finance, etc.)']","8fb73b98":"print('Respondents with business major constitute {:.2%} of all respondents'.format(len(mcr_switchers_df)\/len(mcr_df)))","9df476f5":"print('Respondents with business major constitute {:.2%} of all respondents who answered the question about undergraduate degree'.format(mcr_switchers_df.major.value_counts().sum()\/mcr_df.major.value_counts().sum()))","6c5d7134":"countries = mcr_df.country.value_counts()\ndata =  dict( type = 'choropleth',\n                locations = countries.index,\n                z = countries.values,\n                text = countries.index,\n                locationmode = 'country names',\n                colorscale = 'Viridis',\n                autocolorscale = False,\n                reversescale = True,\n                marker = dict( line = dict (\n                        color = 'rgb(180,0,180)',width = 0.3\n                    ) ),\n                colorbar = dict( autotick = False,\n                    title = '# of respondents'),\n          ) \n\nlayout = dict(\n        #title = '2018 Survey Respondents',\n        geo = dict(showframe = False,\n            showcoastlines = True,\n            projection = dict( type = 'Mercator')\n        ))\n\nfig = dict( data=[data], layout=layout )\n\npy.iplot( fig, validate=False, filename='world-map' )","3a76eb46":"mcr_country_df = mcr_df.country.\\\nreplace({'United States of America':'US','United Kingdom of Great Britain and Northern Ireland':'UK'}).value_counts().head(10)\nax = mcr_country_df.plot(kind='bar', rot=0, color='#66ff66',figsize=(10,5), width=.6, title='All respondents')\nfor p in ax.patches:\n             ax.annotate(p.get_height(), (p.get_x() + p.get_width()\/2., p.get_height()),\n             ha='center', va='center', fontsize=12, color='black', xytext=(0, -10),\n             textcoords='offset points')\nplt.box(on=None)","8364801c":"mcr_swithers_country_df = mcr_switchers_df.country.replace({'United States of America':'US','United Kingdom of Great Britain and Northern Ireland':'UK'}).value_counts().head(10)\nax = mcr_swithers_country_df.plot(kind='bar', rot=0, color='#66ff66',figsize=(10,5), width=.6, title='switchers')\nfor p in ax.patches:\n             ax.annotate(p.get_height(), (p.get_x() + p.get_width()\/2., p.get_height()),\n             ha='center', va='center', fontsize=12, color='black', xytext=(0, -10),\n             textcoords='offset points')\nplt.box(on=None)","45574dbd":"mcr_exc_switchers_country_df = mcr_exc_switchers_df.country.\\\nreplace({'United States of America':'US','United Kingdom of Great Britain and Northern Ireland':'UK'}).value_counts().head(10)\nax = mcr_exc_switchers_country_df.plot(kind='bar', rot=0, color='#66ff66',figsize=(10,5), width=.6, title='others')\nfor p in ax.patches:\n             ax.annotate(p.get_height(), (p.get_x() + p.get_width()\/2., p.get_height()),\n             ha='center', va='center', fontsize=12, color='black', xytext=(0, -10),\n             textcoords='offset points')\nplt.box(on=None)","6e526615":"data = pd.DataFrame({'others':mcr_exc_switchers_df.consider_DS.dropna().value_counts(normalize=True),'switchers':mcr_switchers_df.consider_DS.dropna().value_counts(normalize=True)})\ndata['consider_DS'] = data.index\ndata.reset_index(drop=True, inplace=True)\ndata.sort_values(by=['others'], ascending=False, inplace=True)\ndata.dropna(inplace=True)","afd54b17":"Y = np.arange(len(data))\nX1 = data.others\nX2 = data.switchers\n\n\nplt.axes([0.05,0.05,0.95,0.95])\nplt.barh(Y, -X1, facecolor='#df80ff', edgecolor='white')\nplt.barh(Y, +X2, facecolor='#66ff66', edgecolor='white')\n\nfor y,x in zip(Y,X2):\n    plt.text(x+.01, y, '{:.1%}'.format(x), ha='left', va= 'center')\n\nfor y,x in zip(Y,X1):\n    plt.text(-x-.01, y, '{:.1%}'.format(x), ha='right', va= 'center')\n\nplt.ylim(-.3,len(Y)) \nplt.yticks([])\nplt.xlim(-.50,+.50) \nplt.xticks([])\n\n\nplt.yticks(Y,data.consider_DS)\nplt.box(on=None)\nplt.legend(data.columns[:-1])\nplt.show()","4c021c36":"labels = 'Male','Prefer not to say', 'Female', 'Prefer to self-describe'\nsizes = [mcr_switchers_df.gender.value_counts()[0],mcr_switchers_df.gender.value_counts()[2],\\\n        mcr_switchers_df.gender.value_counts()[1],mcr_switchers_df.gender.value_counts()[3]]\nexplode = (0.1, 0.1, 0.1, 0.1)  # only \"explode\" the 2nd slice (i.e. 'Hogs')\ncolors = ['#66b3ff','#ffcc29' ,'#66ff66','#ffcc99']\nfig, ax = plt.subplots()\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=30)\nax.axis('equal')\nplt.title('switchers')","f8323ab6":"labels = 'Male','Prefer not to say', 'Female', 'Prefer to self-describe'\nsizes = [mcr_exc_switchers_df.gender.value_counts()[0],mcr_exc_switchers_df.gender.value_counts()[2],\\\n        mcr_exc_switchers_df.gender.value_counts()[1],mcr_exc_switchers_df.gender.value_counts()[3]]\nexplode = (0.1, 0.1, 0.1, 0.1)  # only \"explode\" the 2nd slice (i.e. 'Hogs')\ncolors = ['#66b3ff','#ffcc29' ,'#66ff66','#ffcc99']\nfig, ax = plt.subplots()\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=30)\nax.axis('equal')  \nplt.title('others')","db9ba68d":"age_swt = mcr_switchers_df.age.value_counts(normalize=True).reindex(['18-21','22-24',\n                                                   '25-29','30-34',\n                                                   '35-39','40-44',\n                                                   '45-49','50-54',\n                                                   '55-59','60-69',\n                                                   '70-79','80+'])\n\nage_oth = mcr_exc_switchers_df.age.value_counts(normalize=True).reindex(['18-21','22-24',\n                                                   '25-29','30-34',\n                                                   '35-39','40-44',\n                                                   '45-49','50-54',\n                                                   '55-59','60-69',\n                                                   '70-79','80+'])\n\ndata = pd.DataFrame({'others':age_oth,'switchers':age_swt})\ndata['age'] = data.index\ndata.reset_index(drop=True, inplace=True)\n# data.sort_values(by=['others'], ascending=False, inplace=True)\ndata.dropna(inplace=True)","ea1ff168":"Y = np.arange(len(data))\nX1 = data.others\nX2 = data.switchers\n\n\nplt.axes([0.05,0.05,0.95,0.95])\nplt.barh(Y, -X1, facecolor='#66d9ff', edgecolor='white')\nplt.barh(Y, +X2, facecolor='#ff668c', edgecolor='white')\n\nfor y,x in zip(Y,X2):\n    plt.text(x+.01, y, '{:.1%}'.format(x), ha='left', va= 'center')\n\nfor y,x in zip(Y,X1):\n    plt.text(-x-.01, y, '{:.1%}'.format(x), ha='right', va= 'center')\n\nplt.ylim(-.3,len(Y)) \nplt.yticks([])\nplt.xlim(-.50,+.50) \nplt.xticks([])\n\n\nplt.yticks(Y,data.age)\nplt.box(on=None)\nplt.legend(data.columns[:-1])\nplt.show()","4c5d8458":"data = pd.DataFrame({'others':mcr_exc_switchers_df.education.dropna().value_counts(normalize=True),\\\n                     'switchers':mcr_switchers_df.education.dropna().value_counts(normalize=True)})\ndata['education'] = data.index\ndata.reset_index(drop=True, inplace=True)\ndata.sort_values(by=['others'], ascending=False, inplace=True)\ndata.dropna(inplace=True)","5c24f29d":"Y = np.arange(len(data))\nX1 = data.others\nX2 = data.switchers\n\n\nplt.axes([0.05,0.05,0.95,0.95])\nplt.barh(Y, -X1, facecolor='#ffff66', edgecolor='white')\nplt.barh(Y, +X2, facecolor='#ff8000', edgecolor='white')\n\nfor y,x in zip(Y,X2):\n    plt.text(x+.01, y, '{:.1%}'.format(x), ha='left', va= 'center')\n\nfor y,x in zip(Y,X1):\n    plt.text(-x-.01, y, '{:.1%}'.format(x), ha='right', va= 'center')\n\nplt.ylim(-.3,len(Y)) \nplt.yticks([])\nplt.xlim(-.65,+.65) \nplt.xticks([])\n\n\nplt.yticks(Y,data.education)\nplt.box(on=None)\nplt.legend(data.columns[:-1])\nplt.show()","f26c034a":"ax=mcr_df.major.value_counts().plot(kind='barh', rot=0, color='#ffb366',\\\n                                    figsize=(10,5), width=.6, title='All - Undergraduate major')\nax.title.set_fontsize(15)\nfor p in ax.patches:\n    width = p.get_width()\n    percent = '{:.1%}'.format(width\/mcr_df.major.value_counts().sum())\n    plt.text(350+p.get_width(), p.get_y()+0.5*p.get_height(),percent, ha='center', va='center')\n\nplt.box(on=None)","066c7bb9":"q78s = mcr_switchers_df[['industry','experience']].dropna()\nq78s['one']=1\nq78s_p = pd.pivot_table(q78s, values='one',index='industry',columns='experience',aggfunc='sum', margins=True)\nq78s_p = q78s_p[['0-1','1-2','2-3','3-4','4-5','5-10','10-15','15-20','20-25','25-30','30 +','All']].sort_values('All', ascending=False)","1e0ff480":"ax = q78s_p.iloc[1:,:-1].head(10).plot.barh(stacked=True, figsize=(15,7), cmap='Paired', title='Top10 Industry - switchers')\nax.title.set_fontsize(15)\n# ax.legend(fontsize=15, title='experience', title_fontsize=15)\nplt.box(on=None)","26a4947b":"q78 = mcr_exc_switchers_df[['industry','experience']].dropna()\nq78['one']=1\nq78_p = pd.pivot_table(q78,values='one',index='industry',columns='experience',aggfunc='sum', margins=True)\nq78_p = q78_p[['0-1','1-2','2-3','3-4','4-5','5-10','10-15','15-20','20-25','25-30','30 +','All']].sort_values('All', ascending=False)\n","1e19dc87":"ax = q78_p.iloc[1:,:-1].head(10).plot.barh(stacked=True, figsize=(15,7), cmap='Paired', title='Top10 Industry - others')\nax.title.set_fontsize(15)\n# ax.legend(fontsize=15, title='experience', title_fontsize=15)\nplt.box(on=None)","436a9cbf":"wc = wordcloud.WordCloud(width=1000, height=500, colormap=\"Paired\", background_color=\"white\")\nwc.generate_from_frequencies(ffr_df.industry.value_counts())\nplt.figure(figsize=(15,10))\nplt.imshow(wc, interpolation=\"bilinear\")\nplt.axis(\"off\")","bd894fd1":"ax=mcr_exc_switchers_df.title.value_counts().head(10).plot(kind='barh', rot=0, color='#df80ff',\\\n                                    figsize=(10,5), width=.6, title='Top10 Titles - others')\nax.title.set_fontsize(15)\nfor p in ax.patches:\n    width = p.get_width()\n    percent = '{:.1%}'.format(width\/mcr_exc_switchers_df.industry.value_counts().sum())\n    plt.text(250+p.get_width(), p.get_y()+0.5*p.get_height(),percent, ha='center', va='center')\n\nplt.box(on=None)","7029d411":"top10_swtitle= mcr_switchers_df.title.value_counts().head(10).to_frame()\ntop10_swtitle['%'] = top10_swtitle\/top10_swtitle.sum()\ntop10_swtitle = top10_swtitle.rename(columns = {'title':'count'})\ntop10_swtitle.style.format({'%': '{:.1%}'.format})","f4c07fc8":"ax=mcr_exc_switchers_df.compensation.value_counts().head(10).plot(kind='barh', rot=0, color='#66d9ff',\\\n                                    figsize=(10,5), width=.6, title='Top10 Compensation - others')\nax.title.set_fontsize(15)\n# ax.legend(fontsize=15, title='experience', title_fontsize=15)\nfor p in ax.patches:\n    width = p.get_width()\n    percent = '{:.1%}'.format(width\/mcr_exc_switchers_df.compensation.value_counts().sum())\n    plt.text(250+p.get_width(), p.get_y()+0.5*p.get_height(),percent, ha='center', va='center')\n\nplt.box(on=None)","a476f689":"# mcr_switchers_df.compensation.value_counts().head(10)\ntop5_swcomp= mcr_switchers_df.compensation.value_counts().head(5).to_frame()\ntop5_swcomp['%'] = top5_swcomp\/top5_swcomp.sum()\ntop5_swcomp = top5_swcomp.rename(columns = {'compensation':'count'})\ntop5_swcomp.style.format({'%': '{:.1%}'.format})","ad11e3a8":"Q11sw = mcr_switchers_df.filter(like=(\"Q11\"))\nQ11sw_unpivot = pd.melt(Q11sw.iloc[:,:-1]).dropna()\nQ11sw_unpivot = Q11sw_unpivot['value'].value_counts()\nQ11sw_unpivot = Q11sw_unpivot.to_frame().reset_index()\nQ11sw_unpivot.columns = ['Activity type - switchers', 'Count']\nQ11sw_unpivot['%'] = Q11sw_unpivot['Count']\/Q11sw_unpivot['Count'].sum()\nQ11sw_unpivot.style.set_properties(subset=['Activity type'], **{'width': '600px'})\nQ11sw_unpivot.style.format({'%': '{:.1%}'.format})","3b29433e":"Q11 = mcr_exc_switchers_df.filter(like=(\"Q11\"))\nQ11_unpivot = pd.melt(Q11.iloc[:,:-1]).dropna()\nQ11_unpivot = Q11_unpivot['value'].value_counts()\nQ11_unpivot = Q11_unpivot.to_frame().reset_index()\nQ11_unpivot.columns = ['Activity type - others', 'Count']\nQ11_unpivot['%'] = Q11_unpivot['Count']\/Q11_unpivot['Count'].sum()\nQ11_unpivot.style.set_properties(subset=['Activity type'], **{'width': '600px'})\nQ11_unpivot.style.format({'%': '{:.1%}'.format})","6b6f4d30":"data = pd.DataFrame({'others':mcr_exc_switchers_df.primary_tool.value_counts(normalize=True),'switchers':mcr_switchers_df.primary_tool.value_counts(normalize=True)})\ndata['primary_tool'] = data.index\ndata.reset_index(drop=True, inplace=True)\ndata.sort_values(by=['others'], ascending=False, inplace=True)","0a4126dd":"Y = np.arange(len(data))\nX1 = data.others\nX2 = data.switchers\n\n\nplt.axes([0.05,0.05,0.95,0.95])\nplt.barh(Y, -X1, facecolor='#a3adc2', edgecolor='white')\nplt.barh(Y, +X2, facecolor='#d9ff66', edgecolor='white')\n\nfor y,x in zip(Y,X2):\n    plt.text(x, y, '{:.1%}'.format(x), ha='left', va= 'center')\n\nfor y,x in zip(Y,X1):\n    plt.text(-x,y, '{:.1%}'.format(x), ha='right', va= 'center')\n\nplt.ylim(-.3,len(Y)) \nplt.yticks([])\nplt.xlim(-.65,+.51) \nplt.xticks([])\n\n\nplt.yticks(Y,data.primary_tool)\nplt.box(on=None)\nplt.legend(data.columns[:-1])\n\nplt.show()","3a75530f":"data = pd.DataFrame({'others':mcr_exc_switchers_df.language_often.dropna().value_counts(normalize=True),\\\n                     'switchers':mcr_switchers_df.language_often.dropna().value_counts(normalize=True)})\ndata['language_often'] = data.index\ndata.reset_index(drop=True, inplace=True)\ndata.sort_values(by=['others'], ascending=False, inplace=True)\ndata.dropna(inplace=True)","7ebc23aa":"Y = np.arange(len(data))\nX1 = data.others\nX2 = data.switchers\n\n\nplt.axes([0.05,0.05,0.95,0.95])\nplt.barh(Y, -X1, facecolor='#66d9ff', edgecolor='white')\nplt.barh(Y, +X2, facecolor='#ff668c', edgecolor='white')\n\nfor y,x in zip(Y,X2):\n    plt.text(x, y, '{:.1%}'.format(x), ha='left', va= 'center')\n\nfor y,x in zip(Y,X1):\n    plt.text(-x,y, '{:.1%}'.format(x), ha='right', va= 'center')\n\nplt.ylim(-.3,len(Y)) \nplt.yticks([])\nplt.xlim(-.65,+.51) \nplt.xticks([])\n\n\nplt.yticks(Y,data.language_often)\nplt.box(on=None)\nplt.legend(data.columns[:-1])\n\nplt.show()","bb06fd03":"wc = wordcloud.WordCloud(width=1000, height=500, colormap=\"Paired\", background_color=\"white\")\nwc.generate_from_frequencies(mcr_df.language_often.value_counts())\nplt.figure(figsize=(15,10))\nplt.imshow(wc, interpolation=\"bilinear\")\nplt.axis(\"off\")","81e5b544":"wc = wordcloud.WordCloud(width=1000, height=500, colormap=\"Paired\", background_color=\"white\")\nwc.generate_from_frequencies(ffr_df.language_often.value_counts())\nplt.figure(figsize=(15,10))\nplt.imshow(wc, interpolation=\"bilinear\")\nplt.axis(\"off\")","f421981d":"wc = wordcloud.WordCloud(width=1000, height=500, colormap=\"Paired\", background_color=\"white\")\nwc.generate_from_frequencies(ffr_df.language_recommend.value_counts())\nplt.figure(figsize=(15,10))\nplt.imshow(wc, interpolation=\"bilinear\")\nplt.axis(\"off\")","bc047a0a":"Q13 = mcr_exc_switchers_df.filter(like=(\"Q13\"))\nQ13_unpivot = pd.melt(Q13.iloc[:,:-2]).dropna()\nQ13sw = mcr_switchers_df.filter(like=(\"Q13\"))\nQ13sw_unpivot = pd.melt(Q13sw.iloc[:,:-2]).dropna()","3fd851aa":"data = pd.DataFrame({'others':Q13_unpivot['value'].value_counts(normalize=True),'switchers':Q13sw_unpivot['value'].\\\n                     value_counts(normalize=True)})\ndata['IDEtype'] = data.index\ndata.reset_index(drop=True, inplace=True)\ndata.sort_values(by=['others'], ascending=False, inplace=True)","0e02f684":"Y = np.arange(len(data))\nX1 = data.others\nX2 = data.switchers\n\n\nplt.axes([0.05,0.05,0.95,0.95])\nplt.barh(Y, -X1, facecolor='#df80ff', edgecolor='white')\nplt.barh(Y, +X2, facecolor='#66ff66', edgecolor='white')\n\nfor y,x in zip(Y,X2):\n    plt.text(x, y, '{:.1%}'.format(x), ha='left', va= 'center')\n\nfor y,x in zip(Y,X1):\n    plt.text(-x,y, '{:.1%}'.format(x), ha='right', va= 'center')\n\nplt.ylim(-.3,len(Y)) \nplt.yticks([])\nplt.xlim(-.25,+.25) \nplt.xticks([])\n\n\nplt.yticks(Y,data.IDEtype)\nplt.box(on=None)\nplt.legend(data.columns[:-1])\n\nplt.show()","5d6f4f01":"wc = wordcloud.WordCloud(width=1000, height=500, colormap=\"Paired\", background_color=\"white\")\nwc.generate_from_frequencies(ffr_df.ide.value_counts())\nplt.figure(figsize=(15,10))\nplt.imshow(wc, interpolation=\"bilinear\")\nplt.axis(\"off\")","61a18ad4":"Q14 = mcr_exc_switchers_df.filter(like=(\"Q14\"))\nQ14_unpivot = pd.melt(Q14.iloc[:,:-1]).dropna()\nQ14sw = mcr_switchers_df.filter(like=(\"Q14\"))\nQ14sw_unpivot = pd.melt(Q14sw.iloc[:,:-1]).dropna()","772f7454":"data = pd.DataFrame({'others':Q14_unpivot['value'].value_counts(normalize=True),'switchers':Q14sw_unpivot['value'].\\\n                     value_counts(normalize=True)})\ndata['notebook'] = data.index\ndata.reset_index(drop=True, inplace=True)\ndata.sort_values(by=['others'], ascending=False, inplace=True)","7fdfccfb":"Y = np.arange(len(data))\nX1 = data.others\nX2 = data.switchers\n\n\nplt.axes([0.05,0.05,0.95,0.95])\nplt.barh(Y, -X1, facecolor='#6699ff', edgecolor='white')\nplt.barh(Y, +X2, facecolor='#ff8c66', edgecolor='white')\n\nfor y,x in zip(Y,X2):\n    plt.text(x+.01, y, '{:.1%}'.format(x), ha='left', va= 'center')\n\nfor y,x in zip(Y,X1):\n    plt.text(-x-.01,y, '{:.1%}'.format(x), ha='right', va= 'center')\n\nplt.ylim(-.3,len(Y)) \nplt.yticks([])\nplt.xlim(-.40,+.40) \nplt.xticks([])\n\n\nplt.yticks(Y,data.notebook)\nplt.box(on=None)\nplt.legend(data.columns[:-1])\n# plt.grid(True, which='both', linestyle='--')\n\nplt.show()","5ae9b818":"data = pd.DataFrame({'others':mcr_exc_switchers_df.time_coding.value_counts(normalize=True),\\\n                     'switchers':mcr_switchers_df.time_coding.value_counts(normalize=True)})\ndata['time_coding'] = data.index\ndata.reset_index(drop=True, inplace=True)\ndata.sort_values(by=['others'], ascending=False, inplace=True)\ndata.dropna(inplace=True)","2f548f22":"Y = np.arange(len(data))\nX1 = data.others\nX2 = data.switchers\n\n\nplt.axes([0.05,0.05,0.95,0.95])\nplt.barh(Y, -X1, facecolor='#ff00ff', edgecolor='white')\nplt.barh(Y, +X2, facecolor='#00ff80', edgecolor='white')\n\nfor y,x in zip(Y,X2):\n    plt.text(x, y, '{:.1%}'.format(x), ha='left', va= 'center')\n\nfor y,x in zip(Y,X1):\n    plt.text(-x, y, '{:.1%}'.format(x), ha='right', va= 'center')\n\nplt.ylim(-.3,len(Y)) \nplt.yticks([])\nplt.xlim(-.6,+.6) \nplt.xticks([])\nplt.yticks(Y,data.time_coding)\nplt.box(on=None)\nplt.legend(data.columns[:-1])\nplt.savefig(\"image.png\")\nplt.show()","dc330921":"ax=mcr_switchers_df.MLlibrary_most.value_counts().head(5).\\\nplot(kind='bar', rot=0, color='#d9ff66',figsize=(10,5), width=.6, title='Top5 ML - switchers')\n\nfor p in ax.patches:\n             percent = '{:.1%}'.format(p.get_height()\/mcr_switchers_df.MLlibrary_most.value_counts().sum())\n             ax.annotate(percent, (p.get_x() + p.get_width()\/2., p.get_height()),\n             ha='center', va='center', fontsize=12, color='black', xytext=(0, 10),\n             textcoords='offset points')\n\nplt.box(on=None)","a39ac4d7":"ax=mcr_exc_switchers_df.MLlibrary_most.value_counts().head(5).plot(kind='bar', rot=0, color='#66ffb3',figsize=(10,5), width=.6, title='Top5 ML - others')\n\nfor p in ax.patches:\n             percent = '{:.1%}'.format(p.get_height()\/mcr_exc_switchers_df.MLlibrary_most.value_counts().sum())\n             ax.annotate(percent, (p.get_x() + p.get_width()\/2., p.get_height()),\n             ha='center', va='center', fontsize=12, color='black', xytext=(0, 10),\n             textcoords='offset points')\nplt.box(on=None)","6ed3c077":"data = pd.DataFrame({'others':mcr_exc_switchers_df.ML_blackbox.dropna().value_counts(normalize=True),'switchers':mcr_switchers_df.ML_blackbox.dropna().value_counts(normalize=True)})\ndata['ML_blackbox'] = data.index\ndata.reset_index(drop=True, inplace=True)\ndata.sort_values(by=['others'], ascending=False, inplace=True)\ndata.dropna(inplace=True)","96057997":"Y = np.arange(len(data))\nX1 = data.others\nX2 = data.switchers\n\n\nplt.axes([0.05,0.05,0.95,0.95])\nplt.barh(Y, -X1, facecolor='#8000ff', edgecolor='white')\nplt.barh(Y, +X2, facecolor='#ffff00', edgecolor='white')\n\nfor y,x in zip(Y,X2):\n    plt.text(x+.01, y, '{:.1%}'.format(x), ha='left', va= 'center')\n\nfor y,x in zip(Y,X1):\n    plt.text(-x-.01, y, '{:.1%}'.format(x), ha='right', va= 'center')\n\nplt.ylim(-.3,len(Y)) \nplt.yticks([])\nplt.xlim(-.65,+.65) \nplt.xticks([])\n\n\nplt.yticks(Y,data.ML_blackbox)\nplt.box(on=None)\nplt.legend(data.columns[:-1])\n# plt.grid(True, which='both', linestyle='--')\n# plt.savefig(\"image.png\")\nplt.show()","82a1d4cb":"data = pd.DataFrame({'others':mcr_exc_switchers_df.dataviz_most.dropna().value_counts(normalize=True),'switchers':mcr_switchers_df.dataviz_most.dropna().value_counts(normalize=True)})\ndata['dataviz_most'] = data.index\ndata.reset_index(drop=True, inplace=True)\ndata.sort_values(by=['others'], ascending=False, inplace=True)\ndata.dropna(inplace=True)","7e392b6a":"Y = np.arange(len(data))\nX1 = data.others\nX2 = data.switchers\n\n\nplt.axes([0.05,0.05,0.95,0.95])\nplt.barh(Y, -X1, facecolor='#ffff66', edgecolor='white')\nplt.barh(Y, +X2, facecolor='#ff8000', edgecolor='white')\n\nfor y,x in zip(Y,X2):\n    plt.text(x+.01, y, '{:.1%}'.format(x), ha='left', va= 'center')\n\nfor y,x in zip(Y,X1):\n    plt.text(-x-.01, y, '{:.1%}'.format(x), ha='right', va= 'center')\n\nplt.ylim(-.3,len(Y)) \nplt.yticks([])\nplt.xlim(-.75,+.75) \nplt.xticks([])\n\n\nplt.yticks(Y,data.dataviz_most)\nplt.box(on=None)\nplt.legend(data.columns[:-1])\n\nplt.show()","982ac068":"wc = wordcloud.WordCloud(width=1000, height=500, colormap=\"Paired\", background_color=\"white\")\nwc.generate_from_frequencies(ffr_df.dataviz_most.value_counts())\nplt.figure(figsize=(15,10))\nplt.imshow(wc, interpolation=\"bilinear\")\nplt.axis(\"off\")","810ec670":"data = pd.DataFrame({'others':mcr_exc_switchers_df.datatype_most.dropna().value_counts(normalize=True),'switchers':mcr_switchers_df.datatype_most.dropna().value_counts(normalize=True)})\ndata['datatype_most'] = data.index\ndata.reset_index(drop=True, inplace=True)\ndata.sort_values(by=['others'], ascending=False, inplace=True)\ndata.dropna(inplace=True)","e30e10c6":"Y = np.arange(len(data))\nX1 = data.others\nX2 = data.switchers\n\n\nplt.axes([0.05,0.05,0.95,0.95])\nplt.barh(Y, -X1, facecolor='#ff6666', edgecolor='white')\nplt.barh(Y, +X2, facecolor='#80b3ff', edgecolor='white')\n\nfor y,x in zip(Y,X2):\n    plt.text(x+.01, y, '{:.1%}'.format(x), ha='left', va= 'center')\n\nfor y,x in zip(Y,X1):\n    plt.text(-x-.01, y, '{:.1%}'.format(x), ha='right', va= 'center')\n\nplt.ylim(-.3,len(Y)) \nplt.yticks([])\nplt.xlim(-.40,+.40) \nplt.xticks([])\n\n\nplt.yticks(Y,data.datatype_most)\nplt.box(on=None)\nplt.legend(data.columns[:-1])\n# plt.grid(True, which='both', linestyle='--')\n# plt.savefig(\"image.png\")\nplt.show()","ba632568":"data = mcr_df[['title','datatype_most']].dropna()\ndata = data[data.title.isin(['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst', 'Research Scientist'])]\ndata = data[data.datatype_most.isin(['Numerical Data', 'Tabular Data', 'Text Data', 'Time Series Data', 'Image Data'])]\ndata = data.rename(columns = {'datatype_most':'data type'})\ncolors = ['#66b3ff','#66d9ff','#66ff66','#ffcc99', '#ff668c']\n\nplt.figure(figsize=(10,6))\ng = sns.countplot(y=data.title, hue=data['data type'], palette=colors)\ng.set(xlabel='respondents')\nplt.title('Title by Data type used')\nplt.box(on=None)","586d8a9c":"q37_others = mcr_exc_switchers_df.learning_platform_most.dropna().value_counts()\nindex_others = ['Coursera', 'Udemy', 'DataCamp', 'Udacity', 'edX','Other','Other','Other','Other','Other', 'Other', 'Other']\nq37_others.index = index_others\n\ncolors = ['#66b3ff','#66d9ff','#66ff66','#ffcc99', '#ff668c', '#ffff66']\nlabels= ['Coursera', 'Other', 'Udemy', 'DataCamp','Udacity',  'edX']\nfig, ax = plt.subplots()\nax.pie(q37_others.groupby(level=0).sum().sort_values(ascending=False),colors=colors, autopct='%1.1f%%', startangle=50,\\\n       labels=labels, textprops={'fontsize': 14})\nax.axis('equal')\nfig.set_size_inches(6, 6)\nplt.title('Others', fontsize = 20)","176692ce":"q37_switchers = mcr_switchers_df.learning_platform_most.dropna().value_counts()\nindex_switchers = ['Coursera', 'DataCamp', 'Udemy', 'edX', 'Udacity', 'Other','Other','Other','Other','Other', 'Other', 'Other']\nq37_switchers.index = index_switchers\n\ncolors = ['#66b3ff','#66d9ff','#66ff66','#ffcc99', '#ff668c', '#ffff66']\nlabels= ['Coursera', 'DataCamp','Udemy', 'edX', 'Udacity', 'Other']\nfig, ax = plt.subplots()\nax.pie(q37_switchers.groupby(level=0).sum().sort_values(ascending=False),colors=colors, autopct='%1.1f%%', startangle=70,\\\n       labels=labels, textprops={'fontsize': 14})\nax.axis('equal')\nfig.set_size_inches(6, 6)\nplt.title('Switchers', fontsize = 20)","85d14352":"wc = wordcloud.WordCloud(width=1000, height=500, colormap=\"Paired\", background_color=\"white\")\nwc.generate_from_frequencies(ffr_df.learning_platform_most.value_counts())\nplt.figure(figsize=(15,10))\nplt.imshow(wc, interpolation=\"bilinear\")\nplt.axis(\"off\")","76ee9812":"# Q20 Most used ML framework","b3a25dae":"# Q2 Age Distribution","285a8bb8":"Picture Reference: https:\/\/contentforcoaches.com\/wp-content\/uploads\/2015\/06\/MidCareerChange.jpg","c1fc86f8":"### Switchers use both Matplotlib and ggplot2 equally. More than half of others use Matplotlib. Seaborn is the third most popular data viz library.","343d8d50":"# Q3 - Where are respondents from?","84b7b902":"# Q12 Primary tool used","8670c58d":"![Picture](https:\/\/contentforcoaches.com\/wp-content\/uploads\/2015\/06\/MidCareerChange.jpg)","21037577":"# Q4 Highest level of education","1fc41361":"# Q13 IDE","794a27b4":"### Most recommended languages","a6919c9e":"### Top 10 countries","f1007530":"## Industy - free form responses","81bcdb1b":"### Switchers","e8e69f23":"### Although half of respondents are positive about ML models, based on 2nd and 3rd answers it could be concluded that one third are suspicious about ML models.","a97e2f13":"# Q5 Undergraduate major","0d9f601f":"### Switchers commonly used data types are Numerical, Tabular and Time Series Data. And they use more of these data types than others.","16b55243":"### Clearly switchers spend less time coding than others. Every third switcher spend maximum of 25% of their time coding.","3b710d88":"# Q23 Time spent coding","f4625e43":"### Many respondents just started their career and have 1 or 2 years of experience.\n\n### It is not a surprise that switchers (with major in business discipline) work primarily in Accounting\/Finance industry.","62dcb31c":"## Most favorite language - free form questions","2286eb7c":"### As we can see Jupyter\/iPython Notebook is the most popular IDE used by Data Scientists. RStudio is second most widely used IDE, in particular, by switchers.","906c4efc":"# Q17 Favorite programming language","6224a5c5":"### Switchers are not as confident as other respondents. \u201cMaybe\u201d category  is in the second place for switchers.","f415e017":"### Interestingly most of respondents don\u2019t use any hosted notebooks. Perhaps many prefer to work locally.","a30c6ebd":"# Q48 Do you consider ML models to be \"black boxes\" with outputs that are difficult or impossible to explain?","ff42b0ff":"# Q37 Online Learning Platform","cacf304a":"### Obviously Coursera is the most popular learning source. For switchers second most popular online learning source is DataCamp.","86e26938":"### Data Scientists mainly use Tabular and Numerical data, while Software Engineers Text Data. Data Analysts and Students main data type is Numerical.","f8e2c817":"## Visualization library - free form answers","86b8ef23":"###  The Community is dominated by males.","ea63a9b4":"### All use RStudio and JupyterLab as favorite tools for data analysis. Spreadsheets are second most reliable tool.\n### Switchers use spreadsheets (such as MS Excel or Google Sheets), statistical software (such as SPSS or SAS) and BI tools (Salesforse or Tableau) more than others. ","e1aeb3d6":"### Top5 switcher compensation","bef608b7":"### Let's compare respondents coming from Business discipline with others. \n\n### Being from Finance background I am especially interested in how happy people are with their decision to switch to Data Science\/Data Analytics, what their motivation is to switch, how competent they are and what technologies they use.\n\n### In context of this analysis respondents coming from Business Discipline are simply called \u201cswitchers\u201d and the rest \u201cothers\u201d. ","2076bf0f":"# Q26 - Do you consider yourself to be a data scientist?","fa9c46f6":"### Every fourth respondent from others is student. Data Scientist is the second most used title, though it is the favorite title of switchers.","f3d917bb":"### Most of the community is young, though there are persons older that 70 years. Interestingly more than 13% of respondents are in the range of 18-21. Switchers have more young persons than others.","f9b8dc02":"# Q22 Visualization library","7abb0c11":"# Q11 What are Data Scientists busy with?","dd6469b3":"### Many are hesitant to share yearly compensation, in particular the switchers.","e98afb93":"### It looks like all are mainly busy with analysis of data and applying ML to new areas. \n### Switchers 3rd most favorite activity is to create and maintain databases, while others deal with building ML services. \n### Note that switchers are more busy with data analysis, than others.","da8fb9f5":"# Q32 Data Type","4ee530d8":"# IDE - free form questions","58a6f2a7":"### It is no surprise that many of respondents have Computer science and Engineering background. Business discipline comes fourth.","9c0aba9d":"### Respondents most used languages are not their most recommended ones. Perhaps they are not happy with what language they use.","794b6e08":"### As obvious community is highly educated. Many of the switchers have a secondary degree. More than half have Master\u2019s degree.","3d6fd3a0":"### Top10 switcher titles","543ef5e1":"### Python dominates as a most favorite programming language. R and SQL are used two times more frequently by switchers than others.","2b9a6fd8":"# Q7 Industry and Q8 Experience","3b098b54":"## Most recommended language - free form questions","2943a9fc":"### Most of the switchers are from the US. India is first, if to exclude switchers from total. ","1115c294":"### Most used ML framework is famous Scikit-Learn. It is used by almost half of respondents. TensorFlow and Keras fall behind. After Scikit-Learn, switchers favorite ML frameworks are Caret and randomForest.","0c5fc74e":"### Others","c024317e":"### Data type by Title","c4c97817":"# Q1 Gender distribution","1139030a":"# Q6 Title and Q9 Compensation","704cf3c1":"# Q14 Hosted Notebooks"}}