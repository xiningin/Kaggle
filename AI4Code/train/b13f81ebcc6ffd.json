{"cell_type":{"1fede2be":"code","b8887642":"code","870f0ab8":"code","ea24f1c6":"code","2f92f345":"code","62c914f6":"code","de78b026":"code","1ec7c25e":"code","560c91a7":"code","e7c35da3":"code","6cd75893":"code","4beb412b":"code","88df9802":"code","70f01007":"code","e4fb25c6":"code","0054bad1":"code","ee6bbf0c":"code","b5cf574b":"code","aae33fec":"code","e181c0ec":"code","f5884610":"code","e937e160":"code","7d75f168":"code","c917019e":"code","7348dd54":"code","2ae94959":"code","09cee8fe":"code","3e56d26e":"code","39a30ea3":"code","cc284996":"code","9aa32c0f":"code","a5047dc5":"code","2229c750":"code","b9bd7d50":"code","58ad3b77":"code","f32f8f92":"code","4a3255b0":"code","9d286394":"code","50515caa":"code","4f1ef8b3":"code","e54ce47c":"code","1303f490":"code","140bdb99":"code","1d1a2244":"code","4f163e0f":"code","ecb34d02":"code","fae4e025":"code","44dfef04":"code","bebce76e":"code","80d3b865":"code","7714051b":"code","4f8c779f":"code","8c058da9":"code","88b768b9":"code","7fe80a28":"code","9e3c4cf5":"code","22f14eb5":"code","9257eb66":"code","e0858639":"code","b6c2baf3":"code","e98bcaa6":"markdown","d412835d":"markdown","0e36512a":"markdown","56bc5f2c":"markdown","ffd38a11":"markdown","a23b4346":"markdown","6ea00dfa":"markdown","04408387":"markdown","5915f535":"markdown","5feff228":"markdown","4e4d7ca8":"markdown","1304cb97":"markdown","66af18fd":"markdown","d31fd16c":"markdown","9d63ec10":"markdown","fc66f100":"markdown","cacbe840":"markdown","e21f0933":"markdown","4715fb82":"markdown","eb9d967f":"markdown","fb291692":"markdown","8a3856e4":"markdown","69fa03ee":"markdown","d1760e78":"markdown","f6d2e5c5":"markdown","1cbff562":"markdown","f3dff656":"markdown","5ce612d1":"markdown","84f932b5":"markdown","32c75706":"markdown","8fddd901":"markdown","1ed997ce":"markdown","5cb5c438":"markdown","0134f0db":"markdown","72ad7e9c":"markdown","4d5671c1":"markdown","7015b48e":"markdown","12a82085":"markdown","1223ac49":"markdown","cb9bcc31":"markdown","eea3cc85":"markdown","dfda7b46":"markdown","2565130a":"markdown","03ceb4a7":"markdown","4e51e0d6":"markdown","aa053c0b":"markdown","98a4e54f":"markdown","b72450aa":"markdown","a59df5f9":"markdown","88300e8d":"markdown","05408309":"markdown","82ed4d85":"markdown","0baa219d":"markdown"},"source":{"1fede2be":"# install calmap\n! pip install calmap","b8887642":"# essential libraries\nimport json\nimport random\nfrom urllib.request import urlopen\n\n# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport calmap\nimport folium\n\n# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow\n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# html embedding\nfrom IPython.display import Javascript\nfrom IPython.core.display import display, HTML","870f0ab8":"# list files\n!ls ..\/input\/corona-virus-report","ea24f1c6":"# importing datasets\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.head()","2f92f345":"# dataframe info\n full_table.info()","62c914f6":"# checking for missing value\n full_table.isna().sum()","de78b026":"# cases \ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[cases] = full_table[cases].fillna(0)","1ec7c25e":"# cases in the ships\nship = full_table[full_table['Province\/State'].str.contains('Grand Princess')|full_table['Province\/State'].str.contains('Diamond Princess cruise ship')]\n\n# china and the row\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\n# latest\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\n# latest condensed\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()","560c91a7":"temp = full_table.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', 'Active'].max()\n# temp.style.background_gradient(cmap='Reds')","e7c35da3":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1')","6cd75893":"tm = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(tm, path=[\"variable\"], values=\"value\", height=400, width=600,\n                 color_discrete_sequence=[rec, act, dth])\nfig.show()","4beb412b":"temp_f = full_latest_grouped.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Reds')","88df9802":"temp_flg = temp_f[temp_f['Deaths']>0][['Country\/Region', 'Deaths']]\ntemp_flg.sort_values('Deaths', ascending=False).reset_index(drop=True).style.background_gradient(cmap='Reds')","70f01007":"temp = temp_f[temp_f['Recovered']==0][['Country\/Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp.reset_index(drop=True).style.background_gradient(cmap='Reds')","e4fb25c6":"temp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Deaths']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Reds')","0054bad1":"temp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Recovered']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","ee6bbf0c":"temp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Deaths']+\n                          row_latest_grouped['Recovered']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","b5cf574b":"temp_f = china_latest_grouped[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp_f = temp_f.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Pastel1_r')","aae33fec":"temp = china_latest_grouped[china_latest_grouped['Recovered']==0]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1_r')","e181c0ec":"temp = china_latest_grouped[china_latest_grouped['Confirmed']==\n                          china_latest_grouped['Deaths']]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","f5884610":"temp = china_latest_grouped[china_latest_grouped['Confirmed']==\n                          china_latest_grouped['Recovered']]\ntemp = temp[['Province\/State', 'Confirmed','Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","e937e160":"temp = china_latest_grouped[china_latest_grouped['Confirmed']==\n                          china_latest_grouped['Deaths']+\n                          china_latest_grouped['Recovered']]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","7d75f168":"# World wide\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\nfor i in range(0, len(full_latest)):\n    folium.Circle(\n        location=[full_latest.iloc[i]['Lat'], full_latest.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(full_latest.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(full_latest.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(full_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(full_latest.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(full_latest.iloc[i]['Recovered']),\n        radius=int(full_latest.iloc[i]['Confirmed'])**1.1).add_to(m)\nm","c917019e":"# Confirmed\n\nfig = px.choropleth(full_latest_grouped, locations=\"Country\/Region\", \n                    locationmode='country names', color=\"Confirmed\", \n                    hover_name=\"Country\/Region\", range_color=[1,7000], \n                    color_continuous_scale=\"aggrnyl\", \n                    title='Countries with Confirmed Cases')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","7348dd54":"# Deaths\n\nfig = px.choropleth(full_latest_grouped[full_latest_grouped['Deaths']>0], \n                    locations=\"Country\/Region\", locationmode='country names',\n                    color=\"Deaths\", hover_name=\"Country\/Region\", \n                    range_color=[1,50], color_continuous_scale=\"agsunset\",\n                    title='Countries with Deaths Reported')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","2ae94959":"# # China\n\n clg = china_latest_grouped.iloc[:, :].copy()\n\n name = {'Inner Mongolia': 'Inner Mongol','Tibet': 'Xizang'}\n clg.loc[:, 'Province\/State'] = clg.loc[: 'Province\/State'].replace(name)\n\n with urlopen('https:\/\/raw.githubusercontent.com\/yg2619\/Choropleth-Maps-in-Python-Using-Plotly\/master\/china_geojson.json') as file:\n      china_json = json.load(file)\n\n fig = go.Figure(go.Choroplethmapbox(geojson=china_json, locations=clg['Province\/State'], \n                                     z=china_latest_grouped['Confirmed'], colorscale='Viridis', zmin=0, zmax=1000,\n                                     marker_opacity=0.8, marker_line_width=0))\n fig.update_layout(mapbox_style=\"carto-positron\",\n                   mapbox_zoom=3, mapbox_center = {\"lat\": 35.8617, \"lon\": 104.1954})\n fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n fig.update_layout(title='Confirmed Cases in Chinese Provincec')\n fig.show()\n\n# -----------------------------------------------------------------------------------------------------------------\n\n# # US\n\n temp = full_latest.loc[full_latest['Country\/Region']=='US', ['Province\/State', 'Confirmed']]\n temp['State'] = temp.loc[:, 'Province\/State'].str.split(', ').str[-1]\n temp = temp.groupby('State')['Confirmed'].sum().reset_index()\n\n df = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2011_us_ag_exports.csv')\n\n fig = go.Figure(go.Choropleth(locations=temp['State'], z = temp['Confirmed'].astype(float), \n#                               locationmode = 'USA-states', colorscale = 'Viridis'))\n fig.update_layout(geo_scope='usa', title='Confirmed Cases in US States')\n fig.show()","09cee8fe":"formated_gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['size'] = formated_gdf['Confirmed'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [0, max(formated_gdf['Confirmed'])+2], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Spread over time')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","3e56d26e":"# Latest cases from the ships\ntemp = ship[ship['Date']==max(ship['Date'])]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1_r')","39a30ea3":"temp = ship[ship['Date']==max(ship['Date'])]\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Lat'], temp.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(temp.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(temp.iloc[i]['Recovered']),\n        radius=100000).add_to(m)\nm","cc284996":"temp = full_table.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case',\n             title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig.show()","9aa32c0f":"temp = full_table.groupby('Date').sum().reset_index()\n\n# adding two more columns\ntemp['No. of Deaths to 100 Confirmed Cases'] = round(temp['Deaths']\/temp['Confirmed'], 3)*100\ntemp['No. of Recovered to 100 Confirmed Cases'] = round(temp['Recovered']\/temp['Confirmed'], 3)*100\n# temp['No. of Recovered to 1 Death Case'] = round(temp['Recovered']\/temp['Deaths'], 3)\n\ntemp = temp.melt(id_vars='Date', value_vars=['No. of Deaths to 100 Confirmed Cases', 'No. of Recovered to 100 Confirmed Cases'], \n                 var_name='Ratio', value_name='Value')\n\nfig = px.line(temp, x=\"Date\", y=\"Value\", color='Ratio', log_y=True, \n              title='Recovery and Mortality Rate Over The Time', color_discrete_sequence=[dth, rec])\nfig.show()","a5047dc5":"c_spread = china[china['Confirmed']!=0].groupby('Date')['Province\/State'].unique().apply(len)\nc_spread = pd.DataFrame(c_spread).reset_index()\n\nfig = px.line(c_spread, x='Date', y='Province\/State', text='Province\/State',\n              title='Number of Provinces\/States\/Regions of China to which COVID-19 spread over the time',\n             color_discrete_sequence=[cnf,dth, rec])\nfig.update_traces(textposition='top center')\nfig.show()\n\n# ------------------------------------------------------------------------------------------\n\nspread = full_table[full_table['Confirmed']!=0].groupby('Date')['Country\/Region'].unique().apply(len)\nspread = pd.DataFrame(spread).reset_index()\n\nfig = px.line(spread, x='Date', y='Country\/Region', text='Country\/Region',\n              title='Number of Countries\/Regions to which COVID-19 spread over the time',\n             color_discrete_sequence=[cnf,dth, rec])\nfig.update_traces(textposition='top center')\nfig.show()","2229c750":"flg = full_latest_grouped\nflg.head()","b9bd7d50":"fig = px.bar(flg.sort_values('Confirmed', ascending=False).head(20).sort_values('Confirmed', ascending=True), \n             x=\"Confirmed\", y=\"Country\/Region\", title='Confirmed Cases', text='Confirmed', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Confirmed'])+10000])\nfig.update_traces(marker_color=cnf, opacity=0.6, textposition='outside')\nfig.show()","58ad3b77":"fig = px.bar(flg.sort_values('Deaths', ascending=False).head(20).sort_values('Deaths', ascending=True), \n             x=\"Deaths\", y=\"Country\/Region\", title='Deaths', text='Deaths', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Deaths'])+500])\nfig.update_traces(marker_color=dth, opacity=0.6, textposition='outside')\nfig.show()","f32f8f92":"fig = px.bar(flg.sort_values('Recovered', ascending=False).head(20).sort_values('Recovered', ascending=True), \n             x=\"Recovered\", y=\"Country\/Region\", title='Recovered', text='Recovered', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Recovered'])+10000])\nfig.update_traces(marker_color=rec, opacity=0.6, textposition='outside')\nfig.show()","4a3255b0":"fig = px.bar(flg.sort_values('Active', ascending=False).head(20).sort_values('Active', ascending=True), \n             x=\"Active\", y=\"Country\/Region\", title='Active', text='Active', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Active'])+3000])\nfig.update_traces(marker_color=act, opacity=0.6, textposition='outside')\nfig.show()","9d286394":"# (Only countries with more than 100 case are considered)\n\nflg['Mortality Rate'] = round((flg['Deaths']\/flg['Confirmed'])*100, 2)\ntemp = flg[flg['Confirmed']>100]\ntemp = temp.sort_values('Mortality Rate', ascending=False)\n\nfig = px.bar(temp.sort_values('Mortality Rate', ascending=False).head(15).sort_values('Mortality Rate', ascending=True), \n             x=\"Mortality Rate\", y=\"Country\/Region\", text='Mortality Rate', orientation='h', \n             width=700, height=600, range_x = [0, 8], title='No. of Deaths Per 100 Confirmed Case')\nfig.update_traces(marker_color=act, opacity=0.6, textposition='outside')\nfig.show()","50515caa":"# load population dataset\npop_clean_data = pd.read_csv(\"..\/input\/world-population-19602018\/population_clean.csv\")\n\n# select only the latest data\npop = pop_clean_data.loc[:, ['Country Name', '2018']]\n\n# substitute for missing values\ncols = ['French Guiana', 'Martinique', 'Palestine' , 'Republic of Ireland', 'Saint Barthelemy', 'Taiwan', 'Vatican City']\npops = [290691, 376480, 4750000, 4920455, 7122, 23476640, 1000]\nfor c, p in zip(cols, pops):\n    temp.loc[temp['Country\/Region']== c, 'Population'] = p\n\n# replace country names \nname = {\n    'Egypt, Arab Rep.': 'Egypt',\n    'Hong Kong SAR, China': 'Hong Kong',\n    'Iran, Islamic Rep.': 'Iran (Islamic Republic of)',\n    'Macao SAR, China': 'Macau',\n    'Hong Kong SAR': 'Hong Kong',\n    'Russian Federation': 'Russia',\n    'Slovak Republic': 'Slovakia',\n    'Korea, Rep.': 'Republic of Korea',\n    'United Kingdom': 'UK',\n    'United States': 'US' }\npop.loc[:, 'Country Name'] = pop.loc[: 'Country Name'].replace(name)\n\n# merge dataframes\ntemp = pd.merge(full_latest_grouped, pop, how='left', right_on='Country Name', left_on='Country\/Region')\n# print(temp[temp['Country Name'].isna()])\n\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths', 'Recovered', 'Active', '2018']]\ntemp.columns = ['Country\/Region', 'Confirmed', 'Deaths', 'Recovered', 'Active', 'Population']\n    \n# calculate Confirmed\/Population\ntemp['Confirmed Per Million People'] = round(temp['Confirmed']\/temp['Population']*1000000, 2)\n\n# countries with population greater that 1 million only\ntemp = temp[temp['Population']>1000000].sort_values('Confirmed Per Million People', ascending=False).reset_index(drop=True)\n# temp.head()\n\nfig = px.bar(temp.head(20).sort_values('Confirmed Per Million People', ascending=True), \n             x='Confirmed Per Million People', y='Country\/Region', orientation='h', \n             width=700, height=700, text='Confirmed Per Million People', title='Confirmed cases Per Million People',\n             range_x = [0, max(temp['Confirmed Per Million People'])+20])\nfig.update_traces(textposition='outside', marker_color=dth, opacity=0.7)\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","4f1ef8b3":"temp = full_table.groupby(['Country\/Region', 'Date'])['Confirmed', 'Deaths', 'Recovered'].sum()\ntemp = temp.reset_index()\n\nfig = px.bar(temp, x=\"Date\", y=\"Confirmed\", color='Country\/Region', orientation='v', height=600,\n             title='Confirmed', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","e54ce47c":"fig = px.bar(temp, x=\"Date\", y=\"Deaths\", color='Country\/Region', orientation='v', height=600,\n             title='Deaths', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","1303f490":"temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp, x=\"Date\", y=\"Confirmed\", color='Country\/Region',title='New cases')\nfig.show()","140bdb99":"HTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1571387\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","1d1a2244":" temp = full_table.groupby(['Date', 'Country\/Region'])['Confirmed'].sum().reset_index()\n temp = temp.sort_values('Confirmed').reset_index(drop=True).head(20)\n temp['Date'] = temp['Date'].dt.strftime('%Y-%m-%d')\n temp = temp.sort_values(by='Date')\n temp['Date'] = temp['Date'].apply(lambda x: x.date()).apply(str)\n temp.head()\n\n fig = px.bar(temp, y='Country\/Region', x='Confirmed', color='Country\/Region', orientation='h',  \n              title='Over time', animation_frame='Date', height=1000, log_x=True)\n fig.update_traces(textposition='outside')\n fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\n fig.update_layout(yaxis={'categoryorder':'array', \n                          'categoryarray':['Hubei','Other Chinese Provinces','Rest of the World']})\n fig.show()","4f163e0f":"temp = full_table.groupby(['Date', 'Country\/Region'])['Confirmed'].sum().reset_index()\n\npx.line(temp, x=\"Date\", y=\"Confirmed\", color='Country\/Region', title='Cases Spread', height=600)","ecb34d02":"fig = px.treemap(full_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\", \"Province\/State\"], values=\"Confirmed\", height=700,\n                 title='Number of Confirmed Cases',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\n\nfig = px.treemap(full_latest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\", \"Province\/State\"], values=\"Deaths\", height=700,\n                 title='Number of Deaths reported',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","fae4e025":"# first date\n# ----------\nfirst_date = full_table[full_table['Confirmed']>0]\nfirst_date = first_date.groupby('Country\/Region')['Date'].agg(['min']).reset_index()\n# first_date.head()\nfrom datetime import timedelta  \n# last date\n# ---------\nlast_date = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\nlast_date = last_date.sum().diff().reset_index()\n\nmask = last_date['Country\/Region'] != last_date['Country\/Region'].shift(1)\nlast_date.loc[mask, 'Confirmed'] = np.nan\nlast_date.loc[mask, 'Deaths'] = np.nan\nlast_date.loc[mask, 'Recovered'] = np.nan\n\nlast_date = last_date[last_date['Confirmed']>0]\nlast_date = last_date.groupby('Country\/Region')['Date'].agg(['max']).reset_index()\n# last_date.head()\n\n# first_last\n# ----------\nfirst_last = pd.concat([first_date, last_date[['max']]], axis=1)\n\n# added 1 more day, which will show the next day as the day on which last case appeared\nfirst_last['max'] = first_last['max'] + timedelta(days=1)\n\n# no. of days\nfirst_last['Days'] = first_last['max'] - first_last['min']\n\n# task column as country\nfirst_last['Task'] = first_last['Country\/Region']\n\n# rename columns\nfirst_last.columns = ['Country\/Region', 'Start', 'Finish', 'Days', 'Task']\n\n# sort by no. of days\nfirst_last = first_last.sort_values('Days')\n# first_last.head()\n\n# visualization\n# --------------\n\n# produce random colors\nclr = [\"#\"+''.join([random.choice('0123456789ABC') for j in range(6)]) for i in range(len(first_last))]\n\n#plot\nfig = ff.create_gantt(first_last, index_col='Country\/Region', colors=clr, show_colorbar=False, \n                      bar_width=0.2, showgrid_x=True, showgrid_y=True, height=1600, \n                      title=('Gantt Chart'))\nfig.show()","44dfef04":"# In China\ntemp = china.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\ntemp = temp.reset_index()\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             title='In China',\n             color_discrete_sequence=[cnf, dth, rec])\nfig.update_layout(barmode='group')\nfig.show()\n\n#-----------------------------------------------------------------------------\n\n# ROW\ntemp = row.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\ntemp = temp.reset_index()\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             title='Outside China',\n             color_discrete_sequence=[cnf, dth, rec])\nfig.update_layout(barmode='group')\nfig.show()","bebce76e":"def from_china_or_not(row):\n    if row['Country\/Region']=='China':\n        return 'From China'\n    else:\n        return 'Outside China'\n    \ntemp = full_table.copy()\ntemp['Region'] = temp.apply(from_china_or_not, axis=1)\ntemp = temp.groupby(['Region', 'Date'])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\nmask = temp['Region'] != temp['Region'].shift(1)\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp, x='Date', y='Confirmed', color='Region', barmode='group', \n             text='Confirmed', title='Confirmed', color_discrete_sequence= [cnf, dth, rec])\nfig.update_traces(textposition='outside')\nfig.show()\n\nfig = px.bar(temp, x='Date', y='Deaths', color='Region', barmode='group', \n             text='Confirmed', title='Deaths', color_discrete_sequence= [cnf, dth, rec])\nfig.update_traces(textposition='outside')\nfig.update_traces(textangle=-90)\nfig.show()","80d3b865":" fig = px.bar(temp[temp['Country\/Region']!='China'], x=\"Date\", y=\"Confirmed\", color='Country\/Region',\n              title='Number of new cases outside China everyday')\n fig.show()\n\n fig = px.bar(temp, x=\"Date\", y=\"Deaths\", color='Country\/Region',\n              title='Number of new death case reported outside China everyday')\n fig.show()\n\n fig = px.bar(temp[temp['Country\/Region']!='China'], x=\"Date\", y=\"Deaths\", color='Country\/Region',\n              title='Number of new death case reported outside China everyday')\n fig.show()","7714051b":"gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\ngdf = gdf.reset_index()\n\ntemp = gdf[gdf['Country\/Region']=='China'].reset_index()\ntemp = temp.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', facet_col=\"Case\",\n            title='China', color_discrete_sequence=[cnf, dth, rec])\nfig.show()\n\ntemp = gdf[gdf['Country\/Region']!='China'].groupby('Date').sum().reset_index()\ntemp = temp.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', facet_col=\"Case\",\n             title='ROW', color_discrete_sequence=[cnf, dth, rec])\nfig.show()","4f8c779f":"def location(row):\n    if row['Country\/Region']=='China':\n        if row['Province\/State']=='Hubei':\n            return 'Hubei'\n        else:\n            return 'Other Chinese Provinces'\n    else:\n        return 'Rest of the World'\n\ntemp = full_table.copy()\ntemp['Region'] = temp.apply(location, axis=1)\ntemp['Date'] = temp['Date'].dt.strftime('%Y-%m-%d')\ntemp = temp.groupby(['Region', 'Date'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ntemp = temp.melt(id_vars=['Region', 'Date'], value_vars=['Confirmed', 'Deaths', 'Recovered'], \n                 var_name='Case', value_name='Count').sort_values('Count')\n# temp = temp.sort_values(['Date', 'Region', 'Case']).reset_index()\ntemp.head()\n\nfig = px.bar(temp, y='Region', x='Count', color='Case', barmode='group', orientation='h',\n             text='Count', title='Hubei - China - World', animation_frame='Date',\n             color_discrete_sequence= [dth, rec, cnf], range_x=[0, 70000])\nfig.update_traces(textposition='outside')\n# fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\n# fig.update_layout(yaxis={'categoryorder':'array', \n#                          'categoryarray':['Hubei','Other Chinese Provinces','Rest of the World']})\nfig.show()\n\ntemp = full_latest.copy()\ntemp['Region'] = temp.apply(location, axis=1)\ntemp = temp.groupby('Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ntemp = temp.melt(id_vars='Region', value_vars=['Confirmed', 'Deaths', 'Recovered'], \n                 var_name='Case', value_name='Count').sort_values('Count')\ntemp.head()\n\nfig = px.bar(temp, y='Region', x='Count', color='Case', barmode='group', orientation='h',\n             text='Count', title='Hubei - China - World', \n             color_discrete_sequence= [dth, rec, cnf])\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","8c058da9":"rl = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum()\nrl = rl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\nrl.head().style.background_gradient(cmap='rainbow')\n\nncl = rl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Country\/Region\", value_vars=['Affected', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             x=\"Country\/Region\", y=\"value\", color='variable', orientation='v', height=800,\n             title='Number of Cases outside China', color_discrete_sequence=[act, dth, rec])\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()\n\n# ------------------------------------------\n\ncl = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum()\ncl = cl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\n# cl.head().style.background_gradient(cmap='rainbow')\n\nncl = cl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Province\/State\", value_vars=['Affected', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             y=\"Province\/State\", x=\"value\", color='variable', orientation='h', height=800,\n             title='Number of Cases in China', color_discrete_sequence=[act, dth, rec])\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","88b768b9":" fig = px.treemap(china_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                  path=[\"Province\/State\"], values=\"Confirmed\",\n                  title='Number of Confirmed Cases in Chinese Provinces',\n                  color_discrete_sequence = px.colors.qualitative.Prism)\n fig.show()\n\n fig = px.treemap(china_latest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                  path=[\"Province\/State\"], values=\"Deaths\", \n                  title='Number of Deaths Reported in Chinese Provinces',\n                  color_discrete_sequence = px.colors.qualitative.Prism)\n fig.show()\n\n fig = px.treemap(china_latest.sort_values(by='Recovered', ascending=False).reset_index(drop=True), \n                  path=[\"Province\/State\"], values=\"Recovered\", \n                  title='Number of Recovered Cases in Chinese Provinces',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\n fig.show()\n\n# # ----------------------------------------------------------------------------\n\n fig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Confirmed\", \n                  title='Number of Confirmed Cases outside china',\n                  color_discrete_sequence = px.colors.qualitative.Pastel)\n fig.show()\n\n fig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Deaths\", \n                  title='Number of Deaths outside china',\n                  color_discrete_sequence = px.colors.qualitative.Pastel)\n fig.show()\n\n fig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Recovered\", \n                  title='Number of Recovered Cases outside china',\n                  color_discrete_sequence = px.colors.qualitative.Pastel)\n fig.show()","7fe80a28":"temp = full_table.groupby(['Date', 'Country\/Region'])['Confirmed'].sum()\ntemp = temp.reset_index().sort_values(by=['Date', 'Country\/Region'])\n\nplt.style.use('seaborn')\ng = sns.FacetGrid(temp, col=\"Country\/Region\", hue=\"Country\/Region\", \n                  sharey=False, col_wrap=5)\ng = g.map(plt.plot, \"Date\", \"Confirmed\")\ng.set_xticklabels(rotation=90)\nplt.show()","9e3c4cf5":"temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nplt.style.use('seaborn')\ng = sns.FacetGrid(temp, col=\"Country\/Region\", hue=\"Country\/Region\", \n                  sharey=False, col_wrap=5)\ng = g.map(sns.lineplot, \"Date\", \"Confirmed\")\ng.set_xticklabels(rotation=90)\nplt.show()","22f14eb5":"temp = full_table.groupby('Date')['Confirmed'].sum()\ntemp = temp.diff()\n\nplt.figure(figsize=(20, 5))\nax = calmap.yearplot(temp, fillcolor='white', cmap='Reds', linewidth=0.5)","9257eb66":"spread = full_table[full_table['Confirmed']!=0].groupby('Date')\nspread = spread['Country\/Region'].unique().apply(len).diff()\n\nplt.figure(figsize=(20, 5))\nax = calmap.yearplot(spread, fillcolor='white', cmap='Greens', linewidth=0.5)","e0858639":"epidemics = pd.DataFrame({\n    'epidemic' : ['COVID-19', 'SARS', 'EBOLA', 'MERS', 'H1N1'],\n    'start_year' : [2019, 2003, 2014, 2012, 2009],\n    'end_year' : [2020, 2004, 2016, 2017, 2010],\n    'confirmed' : [full_latest['Confirmed'].sum(), 8096, 28646, 2494, 6724149],\n    'deaths' : [full_latest['Deaths'].sum(), 774, 11323, 858, 19654]\n})\n\nepidemics['mortality'] = round((epidemics['deaths']\/epidemics['confirmed'])*100, 2)\n\nepidemics.head()","b6c2baf3":"temp = epidemics.melt(id_vars='epidemic', value_vars=['confirmed', 'deaths', 'mortality'],\n                      var_name='Case', value_name='Value')\n\nfig = px.bar(temp, x=\"epidemic\", y=\"Value\", color='epidemic', text='Value', facet_col=\"Case\",\n             color_discrete_sequence = px.colors.qualitative.Bold)\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_yaxes(showticklabels=False)\nfig.layout.yaxis2.update(matches=None)\nfig.layout.yaxis3.update(matches=None)\nfig.show()","e98bcaa6":"# Cases over the time","d412835d":"### Provinces with all the cases recovered","0e36512a":"Note : In the graph, last day is shown as one day after the last time a new confirmed cases reported in the Country \/ Region","56bc5f2c":"# Analysis on other epidemics","ffd38a11":"# Composition of Cases","a23b4346":"# Recovery and mortality rate over time","6ea00dfa":"# Comparison with other epidemics","04408387":"### Latest Condensed Data","5915f535":"### Install","5feff228":"https:\/\/app.flourish.studio\/visualisation\/1571387\/edit\n\n","4e4d7ca8":"# Proportion of Cases","1304cb97":"### Cleaning Data","66af18fd":"### Latest Complete Data","d31fd16c":"https:\/\/www.kaggle.com\/imdevskp\/mers-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/sars-2003-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/western-africa-ebola-outbreak-analysis\n","9d63ec10":"# Calander map","fc66f100":"# Corona Virus","cacbe840":"# China vs ROW","e21f0933":"# Hubei - China - World","4715fb82":"### Countries with no cases recovered","eb9d967f":"### Provinces with no cases recovered","fb291692":"### Diamond Princess cruise ship\n\n* On *20 January 2020*, an 80-year-old passenger from Hong Kong embarked in **Yokohama**, later tested positive for COVID-19 on *1 February*.    \n* On *4 February*, the ship was in Japanese waters when **10 passengers were diagnosed with COVID-19**. \n* The **ship was quarantined** on *4 February 2020* in the **Port of Yokohama in Japan**. \n>* The infections included at least 138 from India (including 132 crew and 6 passengers), 35 Filipinos, \n>* 32 Canadians, 24 Australians, 13 Americans, 4 Indonesians, 4 Malaysians,and 2 Britons. \n\n* Home countries arranged to evacuate their citizens and quarantine them further in their own countries.\n* As of *5 March*, **at least 696** out of the 3,711 passengers and crew had **tested positive** for the virus.\n* As of *7 March*, there had been **at least 7 deaths**\n\n### Grand Princess Ship\n\n* Another **Grand-class ship owned by Princess Cruises**, also experienced an outbreak of the disease\n* **Two of its passengers** fell ill after a cruise **from San Francisco to Mexico** in February 2020, and one of them died","8a3856e4":"https:\/\/www.kaggle.com\/imdevskp\/covid19-vs-sars-vs-mers-vs-ebola-vs-h1n1\n\n","69fa03ee":"* Coronaviruses are **zoonotic** viruses (means transmitted between animals and people).  \n* Symptoms include from fever, cough, respiratory symptoms, and breathing difficulties. \n* In severe cases, it can cause pneumonia, severe acute respiratory syndrome (SARS), kidney failure and even death.\n\n* A **novel coronavirus (nCoV)** is a new strain that has not been previously identified in humans.","d1760e78":"# COVID-19","f6d2e5c5":"### Countries with all cases died","1cbff562":"# Date vs","f3dff656":"# Libraries","5ce612d1":"### In each provinces","84f932b5":"### Provinces with all cases died","32c75706":"### Derived Tables","8fddd901":"# Epidemic Span","1ed997ce":"# Country Wise","5cb5c438":"### In each country","0134f0db":"### Countries with no affected case anymore","72ad7e9c":"### Confirmed cases","4d5671c1":"### Countries with all the cases recovered","7015b48e":"# Chinese province wise data","12a82085":"### Provinces with no affected cases anymore","1223ac49":"### Import","cb9bcc31":"# Ships","eea3cc85":"# Country wise Data","dfda7b46":"# Latest Data","2565130a":"### Across the world","03ceb4a7":"# Preprocessing","4e51e0d6":"### New cases","aa053c0b":"### Number of new cases every day","98a4e54f":"# Maps","b72450aa":"# Top 20 Countries","a59df5f9":"* Corona Virus Disease 2019\n* Caused by a **SARS-COV-2** corona virus.  \n* First identified in **Wuhan, Hubei, China**.  \n* Earliest reported symptoms occurred on **1 December 2019**. \n* First cases were linked to contact with the Huanan Seafood Wholesale Market, which sold live animals. \n* On 30 January the WHO declared the outbreak to be a Public Health Emergency of International Concern ","88300e8d":"### Countries with deaths reported","05408309":"# No. of places to which COVID-19 spread","82ed4d85":"### Number of new countries every day","0baa219d":"# Dataset"}}