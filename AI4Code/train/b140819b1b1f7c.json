{"cell_type":{"bfba46c8":"code","d57cac92":"code","41536439":"code","5787507c":"code","1acf8d3a":"code","59a217af":"code","024124df":"code","9750da2b":"code","70e87ff9":"code","893f7070":"code","a8e95adf":"code","85e12566":"code","0d529dad":"code","31e20999":"code","af777eb2":"code","0c20d91b":"code","88e5204b":"code","e9feb68c":"code","0fca1b04":"code","ac1e7cb6":"code","55937e7e":"code","b0558581":"code","3c4f9f41":"code","c67236c0":"code","34af2251":"code","4ef481dc":"code","61bb4068":"code","86d2287b":"code","1c2c4499":"code","3d171636":"code","88085297":"code","9eead336":"code","48c88bf1":"code","d005c836":"code","46d50fcf":"code","c6a52105":"code","318e888f":"code","0fd6a38f":"code","f5f8e321":"code","b0cee03e":"code","0bf25fdd":"code","b2c386d1":"code","060a09b0":"code","b1f51b18":"code","fbcc1c50":"code","ef8ca295":"code","379b0532":"code","1247df82":"code","fd091251":"code","d1274ca3":"code","50bdc000":"code","337a3898":"code","425a6038":"code","d734df8c":"code","bec98aca":"code","a7350a9b":"markdown","b5953955":"markdown"},"source":{"bfba46c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d57cac92":"dataset_train = pd.read_csv('\/kaggle\/input\/santander-customer-transaction-prediction\/train.csv')\ndataset_test = pd.read_csv('\/kaggle\/input\/santander-customer-transaction-prediction\/test.csv')\n","41536439":"dataset_train.head(10)","5787507c":"dataset_train.describe()","1acf8d3a":"dataset_test.head(10)","59a217af":"dataset_test.describe()","024124df":"dataset_train.info()","9750da2b":"dataset_train_32 = dataset_train.drop(['ID_code','target'], axis=1).astype('float16')","70e87ff9":"dataset_train_32.info()","893f7070":"X_train = dataset_train_32.values\nX_train","a8e95adf":"y_train = dataset_train.target.astype('uint8').values\ny_train","85e12566":"X_test = dataset_test.iloc[:, 1:].astype('float16').values\nX_test","0d529dad":"X = X_train\ny = y_train","31e20999":"from sklearn.model_selection import train_test_split","af777eb2":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, stratify = y, random_state = 0)","0c20d91b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics","88e5204b":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","e9feb68c":"x_test = dataset_test.iloc[:,2:]","0fca1b04":"x_test2 = dataset_test.iloc[:,1:].values","ac1e7cb6":"y_pred = logreg.predict(x_test2)\n#print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))","55937e7e":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","b0558581":"id_n = dataset_test.ID_code.values\n","3c4f9f41":"submission_logreg = pd.DataFrame({\n    \"ID_code\": dataset_test[\"ID_code\"],\n    \"target\": y_pred\n})\nsubmission_logreg.to_csv('submission_logreg.csv', index=False)","c67236c0":"from sklearn.naive_bayes import GaussianNB","34af2251":"gnb = GaussianNB()","4ef481dc":"gnb.fit(X_train, y_train)","61bb4068":"y_pred = gnb.predict(X_test)","86d2287b":"from sklearn import metrics","1c2c4499":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","3d171636":"from sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test, y_pred))","88085297":"print(\"Accuracy:\",metrics.classification_report(y_test, y_pred))","9eead336":"from sklearn.naive_bayes import BernoulliNB\nfrom sklearn.model_selection import train_test_split","48c88bf1":"bnb = BernoulliNB(binarize=0.0)","d005c836":"bnb.fit(X_train, y_train)","46d50fcf":"bnb.score(X_test, y_test)","c6a52105":"y_pred = bnb.predict(x_test2)","318e888f":"#print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","0fd6a38f":"#print(\"Accuracy:\",metrics.classification_report(y_test, y_pred))","f5f8e321":"submission_naive_bayes = pd.DataFrame({\n    \"ID_code\": dataset_test[\"ID_code\"],\n    \"target\": y_pred\n})\nsubmission_naive_bayes.to_csv('submission_naive_bayes.csv', index=False)","b0cee03e":"import os\nos.environ['KMP_DUPLICATE_LIB_OK']='True'","0bf25fdd":"import xgboost as xgb","b2c386d1":"xg_cl = xgb.XGBClassifier(objective = 'binary:logistic', n_estimators = 10, seed=123 )","060a09b0":"xg_cl.fit(X_train, y_train)","b1f51b18":"y_pred = xg_cl.predict(x_test2)","fbcc1c50":"import numpy as np\naccuracy = float(np.sum(y_pred==y_test))\/y_test.shape[0]\nprint(\"accuracy: %f\" % (accuracy))","ef8ca295":"param_grid = {'max_depth': [6,7,8], 'gamma': [1, 2, 4], 'learning_rate': [1, 0.1, 0.01], 'objective':['binary:logistic'], 'eval_metric': ['auc'],'tree_method': ['gpu_hist'],'n_gpus': [1]}","379b0532":"dataset_dmatrix = xgb.DMatrix(data = X,label = y)\ndataset_dmatrix","1247df82":"params = {\"objective\":\"reg:logistic\", \"max_depth\":3}\nparams","fd091251":"# Perform cross-validation: cv_results\ncv_results = xgb.cv(dtrain = dataset_dmatrix, params = params, num_boost_round = 5, nfold = 3, metrics = \"rmse\", as_pandas = True, seed = 123)","d1274ca3":"print(cv_results)","50bdc000":"print(1-cv_results[\"test-rmse-mean\"].tail(1))","337a3898":"# Perform cross_validation: cv_results\ncv_results = xgb.cv(dtrain = dataset_dmatrix, params = params, num_boost_round = 5, nfold = 3, metrics = \"auc\", as_pandas = True, seed = 123)# Perform cross_validation: cv_results\ncv_results = xgb.cv(dtrain = dataset_dmatrix, params = params, num_boost_round = 5, nfold = 3, metrics = \"auc\", as_pandas = True, seed = 123)","425a6038":"print(cv_results)","d734df8c":"print(cv_results[\"test-auc-mean\"].tail(1))","bec98aca":"submission_xgboots = pd.DataFrame({\n    \"ID_code\": dataset_test[\"ID_code\"],\n    \"target\": y_pred\n})\nsubmission_xgboots.to_csv('submission_xgboots.csv', index=False)","a7350a9b":"***Naive Bayes***","b5953955":"***XGBoots***"}}