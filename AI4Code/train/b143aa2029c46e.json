{"cell_type":{"f4bf18e8":"code","b18548ee":"code","612b06a8":"code","9e9aae4f":"code","17192960":"code","f58a24cd":"code","d9314b4b":"code","b804d098":"code","41f52015":"code","42917b90":"code","d6e9b187":"code","e764d3f6":"code","4d8efbbe":"code","e09cf1d0":"code","09634290":"code","d53e2ba4":"code","dabae2a1":"code","c9971a51":"code","ef65dab1":"code","fc832c1b":"code","fa3f98ec":"code","552893ee":"code","43781adc":"code","54d25fca":"markdown","88ae18a4":"markdown","7e671443":"markdown","1553378a":"markdown","592a96a9":"markdown","5df38cb4":"markdown","7e9e507c":"markdown","5dcfb5bd":"markdown","fdae9021":"markdown","870ffcec":"markdown","fd7534e5":"markdown","5053edd6":"markdown","ff5b08d6":"markdown","6ac4a488":"markdown","88592a5e":"markdown","5636b78c":"markdown"},"source":{"f4bf18e8":"!wget https:\/\/bit.ly\/fruits_300_data -O fruits_300.npy","b18548ee":"import numpy as np\nfrom sklearn.cluster import KMeans\n\nimport matplotlib.pyplot as plt","612b06a8":"NPY_FILE_NAME = 'fruits_300.npy'\nIMAGE_SIZE = 100\nTOTAL_ONE_IMAGE_SIZE = IMAGE_SIZE * IMAGE_SIZE\nSEED = 2021","9e9aae4f":"fruits = np.load(NPY_FILE_NAME)\nfruits[:5]","17192960":"fruits_2d = fruits.reshape(-1, TOTAL_ONE_IMAGE_SIZE)\nfruits_2d[:5]","f58a24cd":"DISPLAY_COL_SIZE = 10\nCMAP = 'gray_r'\n\nMIN_INERTIA = 2\nMAX_INERTIA = 7","d9314b4b":"inertia = []\nfor k in range(MIN_INERTIA, MAX_INERTIA):\n    km = KMeans(n_clusters=k, random_state=SEED)\n    km.fit(fruits_2d)\n    inertia.append(km.inertia_)\n\nplt.plot(range(MIN_INERTIA, MAX_INERTIA), inertia)\nplt.xlabel('k')\nplt.ylabel('inertia')\nplt.show()","b804d098":"N_CLUSTERS = 3","41f52015":"km = KMeans(n_clusters=N_CLUSTERS, random_state=SEED)\nkm.fit(fruits_2d)","42917b90":"print(km.n_iter_)","d6e9b187":"print(km.labels_)","e764d3f6":"print(np.unique(km.labels_, return_counts=True))","4d8efbbe":"import matplotlib.pyplot as plt\n\ndef draw_images(arr, ratio=1):\n    n = len(arr)  \n   \n    rows = int(np.ceil(n\/DISPLAY_COL_SIZE))\n  \n    cols = n if rows < 2 else DISPLAY_COL_SIZE\n    fig, axs = plt.subplots(rows, cols, \n                            figsize=(cols*ratio, rows*ratio), squeeze=False)\n    for i in range(rows):\n        for j in range(cols):\n            if i*DISPLAY_COL_SIZE + j < n:   \n                axs[i, j].imshow(arr[i*DISPLAY_COL_SIZE + j], cmap=CMAP)\n            axs[i, j].axis('off')\n    plt.show()","e09cf1d0":"draw_images(fruits[km.labels_==0])","09634290":"draw_images(fruits[km.labels_==1])","d53e2ba4":"draw_images(fruits[km.labels_==2])","dabae2a1":"km.cluster_centers_","c9971a51":"km.cluster_centers_.shape","ef65dab1":"km.cluster_centers_[0][:100]","fc832c1b":"draw_images(km.cluster_centers_.reshape(-1, IMAGE_SIZE, IMAGE_SIZE), ratio=5)","fa3f98ec":"print(km.transform(fruits_2d[IMAGE_SIZE:IMAGE_SIZE+1]))","552893ee":"print(km.predict(fruits_2d[IMAGE_SIZE:IMAGE_SIZE+1]))","43781adc":"draw_images(fruits[IMAGE_SIZE:IMAGE_SIZE+1])","54d25fca":"km.n_iter_ contains training count ","88ae18a4":"# train KMeans ","7e671443":"# check Target count","1553378a":"# best k is 3","592a96a9":"# predicted Target ","5df38cb4":"### get distances about 3 centroids\nneareat distance value is target ","7e9e507c":"# K-Means clustering","5dcfb5bd":"# draw predicted cluster centers => predicted Mean Target Image","fdae9021":"# load data (3d data)","870ffcec":"The KMeans algorithm clusters data by trying to separate samples in n groups of equal variance, minimizing a criterion known as the inertia or within-cluster sum-of-squares (see below). This algorithm requires the number of clusters to be specified. It scales well to large number of samples and has been used across a large range of application areas in many different fields.\n\nThe k-means algorithm divides a set of  samples  into  disjoint clusters , each described by the mean \n of the samples in the cluster. The means are commonly called the cluster \u201ccentroids\u201d; note that they are not, in general, points from , although they live in the same space.\n\nThe K-means algorithm aims ***to choose centroids that minimise the inertia***, \nor within-cluster sum-of-squares criterion:","fd7534e5":"# plot image","5053edd6":"# global variables","ff5b08d6":"# predict sample data ","6ac4a488":"# fetch data ","88592a5e":"# get best k","5636b78c":"# preprocess data (3d data => 2d data)"}}