{"cell_type":{"b9ff608a":"code","89317f17":"code","2411ba98":"code","4c8e6a41":"code","b9908471":"code","0a233913":"code","e58ac249":"code","16dc43e8":"code","a4f5eb61":"code","018366f6":"code","3faa4f09":"code","1b9ad45d":"code","f8162883":"markdown"},"source":{"b9ff608a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","89317f17":"import pandas as pd #making some of our usual imports inorder to solve the problem in hand \nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing import image","2411ba98":"from tensorflow.keras.models import Sequential #importing our deep learing libraries\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, Activation\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","4c8e6a41":"test_dir=\"..\/input\/dogs-cats-images\/dog vs cat\/dataset\/test_set\" #getting our testing data\ntrain_dir=\"..\/input\/dogs-cats-images\/dog vs cat\/dataset\/training_set\" #getting our training data\n\ntrain_dir_cats = train_dir + '\/cats' #storing the cats training images\ntrain_dir_dogs = train_dir + '\/dogs' #storing the dogs training images\ntest_dir_cats = test_dir + '\/cats' #storing the cats testing images\ntest_dir_dogs = test_dir + '\/dogs' #storing the dogs testing images","b9908471":"print('number of cats training images - ',len(os.listdir(train_dir_cats))) #printing the number of cat training images\nprint('number of dogs training images - ',len(os.listdir(train_dir_dogs))) #printing the number of dog training images\nprint('number of cats testing images - ',len(os.listdir(test_dir_cats))) #printing the number of cat testing immages\nprint('number of dogs testing images - ',len(os.listdir(test_dir_dogs))) #printing the number of dog testing images","0a233913":"data_generator = ImageDataGenerator(rescale = 1.\/250,zoom_range = 0.2) #we are converting our RGB photo into array numbers for better computation and processing of our model","e58ac249":"batch_size = 8 #accessing all our data both training and testing\ntraining_data = data_generator.flow_from_directory(directory = train_dir,\n                                                  target_size = (150,150),\n                                                  batch_size = batch_size,\n                                                  class_mode  = 'binary')\ntesting_data = data_generator.flow_from_directory(directory = test_dir,\n                                                  target_size = (150,150),\n                                                  batch_size = batch_size,\n                                                  class_mode  = 'binary')","16dc43e8":"model = Sequential() #making our CNN\nmodel.add(Conv2D(filters = 32, kernel_size = (3, 3), activation = 'relu', input_shape = training_data.image_shape))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(rate = 0.3))\nmodel.add(Conv2D(filters = 64, kernel_size = (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(rate = 0.2))\nmodel.add(Conv2D(filters = 126, kernel_size = (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(rate = 0.15))\nmodel.add(Flatten())\nmodel.add(Dense(units = 32, activation = 'relu'))\nmodel.add(Dropout(rate = 0.15))\nmodel.add(Dense(units = 64, activation = 'relu'))\nmodel.add(Dropout(rate = 0.1))\nmodel.add(Dense(units = len(set(training_data.classes)), activation = 'softmax'))\nmodel.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])","a4f5eb61":"model.summary() #to check how how our model appears to be","018366f6":"fitted_model = model.fit_generator(training_data,\n                        steps_per_epoch = 1000,\n                        epochs = 25,\n                        validation_data = testing_data,\n                        validation_steps = 1000)","3faa4f09":"def testing_image(image_directory): #testing out our model\n    test_image = image.load_img(image_directory, target_size = (150, 150))\n    test_image = image.img_to_array(test_image)\n    test_image = np.expand_dims(test_image, axis = 0)\n    result = model.predict(x = test_image)\n    print(result)\n    if result[0][0]  == 1:\n        prediction = 'Dog'\n    else:\n        prediction = 'Cat'\n    return prediction","1b9ad45d":"print(testing_image(test_dir + '\/cats\/cat.4003.jpg')) #making prediction","f8162883":"Our model is 79% accurate on our testi**ng set and almost 85% accurate on Training set!"}}