{"cell_type":{"72633fb0":"code","db0fc1c0":"code","1332b8fe":"code","1880fb9e":"code","3c663c77":"code","849736ed":"code","f5f1ec17":"code","ad537ff8":"code","7c7d5ffc":"code","fa9cf5ca":"code","87330994":"code","9acc2b18":"code","d3f2c9cf":"code","c8c51763":"code","1675d052":"code","ee0edf34":"code","8fdccef5":"markdown","426a4a7b":"markdown","96377cbe":"markdown","cb4a6c05":"markdown","d8ddfdd9":"markdown","456baae2":"markdown","44e4d531":"markdown","4f737404":"markdown","20a06e4b":"markdown","e382d621":"markdown","34fd446e":"markdown","bf34911d":"markdown","c3baea52":"markdown","6ac2e534":"markdown","40f95210":"markdown","003a4073":"markdown","71512cd0":"markdown","0de20a78":"markdown","f8495ec9":"markdown","564d22a0":"markdown","019bc760":"markdown"},"source":{"72633fb0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","db0fc1c0":"#!pip install sparkmagic\n#!pip install pyspark","1332b8fe":"from pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nfrom pyspark.sql import SparkSession\n\nfrom pyspark.ml import Pipeline\n#from pyspark.ml.classification import DecisionTreeClassifier\nfrom pyspark.ml.feature import VectorAssembler, StringIndexer, VectorIndexer, MinMaxScaler\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml.tuning import ParamGridBuilder, CrossValidator\nfrom pyspark.ml.evaluation import BinaryClassificationEvaluator\n\nspark = SparkSession.builder.master(\"local[*]\").getOrCreate()","1880fb9e":"csv = spark.read.csv('..\/input\/flights.csv', inferSchema=True, header=True)\ncsv.show(10)","3c663c77":"data = csv.select(\"DayofMonth\", \"DayOfWeek\", \"Carrier\", \"OriginAirportID\", \"DestAirportID\", \"DepDelay\", ((col(\"ArrDelay\") > 15).cast(\"Int\").alias(\"label\")))\ndata.show(10)","849736ed":"splits = data.randomSplit([0.7, 0.3])\ntrain = splits[0]\ntest = splits[1].withColumnRenamed(\"label\", \"trueLabel\")\ntrain_rows = train.count()\ntest_rows = test.count()\nprint(\"Training Rows:\", train_rows, \" Testing Rows:\", test_rows)","f5f1ec17":"strIdx = StringIndexer(inputCol = \"Carrier\", outputCol = \"CarrierIdx\")\ncatVect = VectorAssembler(inputCols = [\"CarrierIdx\", \"DayofMonth\", \"DayOfWeek\", \"OriginAirportID\", \"DestAirportID\"], outputCol=\"catFeatures\")\ncatIdx = VectorIndexer(inputCol = catVect.getOutputCol(), outputCol = \"idxCatFeatures\")\nnumVect = VectorAssembler(inputCols = [\"DepDelay\"], outputCol=\"numFeatures\")\nminMax = MinMaxScaler(inputCol = numVect.getOutputCol(), outputCol=\"normFeatures\")\nfeatVect = VectorAssembler(inputCols=[\"idxCatFeatures\", \"normFeatures\"], outputCol=\"features\")\nlr = LogisticRegression(labelCol=\"label\",featuresCol=\"features\",maxIter=10,regParam=0.3)\n#dt = DecisionTreeClassifier(labelCol=\"label\", featuresCol=\"features\")\npipeline = Pipeline(stages=[strIdx, catVect, catIdx, numVect, minMax, featVect, lr])","ad537ff8":"piplineModel = pipeline.fit(train)","7c7d5ffc":"prediction = piplineModel.transform(test)\npredicted = prediction.select(\"features\", \"prediction\", \"trueLabel\")\npredicted.show(100, truncate=False)","fa9cf5ca":"tp = float(predicted.filter(\"prediction == 1.0 AND truelabel == 1\").count())\nfp = float(predicted.filter(\"prediction == 1.0 AND truelabel == 0\").count())\ntn = float(predicted.filter(\"prediction == 0.0 AND truelabel == 0\").count())\nfn = float(predicted.filter(\"prediction == 0.0 AND truelabel == 1\").count())\npr = tp \/ (tp + fp)\nre = tp \/ (tp + fn)\nmetrics = spark.createDataFrame([\n (\"TP\", tp),\n (\"FP\", fp),\n (\"TN\", tn),\n (\"FN\", fn),\n (\"Precision\", pr),\n (\"Recall\", re),\n (\"F1\", 2*pr*re\/(re+pr))],[\"metric\", \"value\"])\nmetrics.show()","87330994":"evaluator = BinaryClassificationEvaluator(labelCol=\"trueLabel\", rawPredictionCol=\"rawPrediction\", metricName=\"areaUnderROC\")\naur = evaluator.evaluate(prediction)\nprint (\"AUR = \", aur)","9acc2b18":"prediction.select(\"rawPrediction\", \"probability\", \"prediction\", \"trueLabel\").show(100, truncate=False)","d3f2c9cf":"paramGrid = ParamGridBuilder().addGrid(lr.regParam, [0.3, 0.1]).addGrid(lr.maxIter, [10, 5]).addGrid(lr.threshold, \n                                                                                            [0.4, 0.3]).build()\ncv = CrossValidator(estimator=pipeline, evaluator=BinaryClassificationEvaluator(), estimatorParamMaps=paramGrid, \n                    numFolds=2)\n\nmodel = cv.fit(train)","c8c51763":"newPrediction = model.transform(test)\nnewPredicted = prediction.select(\"features\", \"prediction\", \"trueLabel\")\nnewPredicted.show()","1675d052":"# Recalculate confusion matrix\ntp2 = float(newPrediction.filter(\"prediction == 1.0 AND truelabel == 1\").count())\nfp2 = float(newPrediction.filter(\"prediction == 1.0 AND truelabel == 0\").count())\ntn2 = float(newPrediction.filter(\"prediction == 0.0 AND truelabel == 0\").count())\nfn2 = float(newPrediction.filter(\"prediction == 0.0 AND truelabel == 1\").count())\npr2 = tp2 \/ (tp2 + fp2)\nre2 = tp2 \/ (tp2 + fn2)\nmetrics2 = spark.createDataFrame([\n (\"TP\", tp2),\n (\"FP\", fp2),\n (\"TN\", tn2),\n (\"FN\", fn2),\n (\"Precision\", pr2),\n (\"Recall\", re2),\n (\"F1\", 2*pr2*re2\/(re2+pr2))],[\"metric\", \"value\"])\nmetrics2.show()","ee0edf34":"# Recalculate the Area Under ROC\nevaluator2 = BinaryClassificationEvaluator(labelCol=\"trueLabel\", rawPredictionCol=\"prediction\", metricName=\"areaUnderROC\")\naur2 = evaluator.evaluate(prediction)\nprint( \"AUR2 = \", aur2)","8fdccef5":"### Install Spark\nUncommet the code below to install PySpark and sparkmagic.","426a4a7b":"### Generate label predictions\nTransform the test data with all of the stages and the trained model in the pipeline to generate label predictions.","96377cbe":"Note that the results include rows where the probability for 0 (the first value in the probability vector) is only slightly higher than the probability for 1 (the second value in the probability vector). The default discrimination threshold (the boundary that decides whether a probability is predicted as a 1 or a 0) is set to 0.5; so the prediction with the highest probability is always used, no matter how close to the threshold.\n\nAnd we can see from the results above that for those *truelabel* 1s that we predicted 0s, many of them the problibilty of 1 is just slightly less than the threshold 0.5.","cb4a6c05":"### Change the Discrimination Threshold\nThe AUC score seems to indicate a reasonably good model, but the performance metrics seem to indicate that it predicts a high number of *False Negative* labels (i.e. it predicts 0 when the true label is 1), leading to a low *Recall*. We can improve this by lowering the threshold. Conversely, sometimes we may want to address a large number of *False Positive* by raising the threshold. \n\nIn this case, I'll let the **CrossValidator** find the best threshold from 0.45, 0.4 and 0.35, regularization parameter from 0.3 and 0.1, and the maximum number of iterations allowed from 10 and 5.","d8ddfdd9":"## Tune Parameters \nTo find the best performing parameters, we can use the **CrossValidator** class to evaluate each combination of parameters defined in a **ParameterGrid** against multiple *folds* of the data split into training and validation datasets. Note that this can take a long time to run because every parameter combination is tried multiple times.","456baae2":"### Split the Data\n\nI will use 70% of the data for training, and reserve 30% for testing. In the testing data, the *label* column is renamed to *trueLabel* so I can use it later to compare predicted labels with known actual values.","44e4d531":"So the AUR shows that our model is ok.\nLet's look deeper.","4f737404":"### Prepare the Data for a Classification Model (Decision Tree Learning Model)\nI select a subset of columns to use as features and create a Boolean label field named *label* with values 1 or 0. Specifically, **1** for flight that arrived late, **0** for flight was early or on-time.","20a06e4b":"Note that some of the **rawPrediction** and **probability** values that were previously predicted as 0 are now predicted as 1","e382d621":"Looks pretty good! The new model improves the *Recall* from 0.11 to 0.37, the *F1* score from 0.20 to 0.54, without compromising other metrics.\n\n## Next Step\n\nThere is still much room to improve the model. For example, I can try more options of lower threshold, or use different classfication models, or prepare data better like adding new features. I'll write another one for this.","34fd446e":"### Define the Pipeline\n\nA pipeline consists of a series of transformer and estimator stages that typically prepare a DataFrame for modeling and then train a predictive model. In this case, you will create a pipeline with seven stages:\n* A **StringIndexer estimator** that converts string values to indexes for categorical features\n* A **VectorAssembler** that combines categorical features into a single vector\n* A **VectorIndexer** that creates indexes for a vector of categorical features\n* A **VectorAssembler** that creates a vector of continuous numeric features\n* A **MinMaxScaler** that normalizes continuous numeric features\n* A **VectorAssembler** that creates a vector of categorical and continuous features\n* A **DecisionTreeClassifier** that trains a classification model.","bf34911d":"### Load Source Data\nThe data from the flight.csv file data includes specific characteristics (or features) for each flight, as well as a column indicating how many minutes late or early the flight arrived.","c3baea52":"### View the Raw Prediction and Probability\nThe prediction is based on a raw prediction score that describes a labelled point in a logistic function. This raw prediction is then converted to a predicted label of 0 or 1 based on a probability vector that indicates the confidence for each possible label value (in this case, 0 and 1). The value with the highest confidence is selected as the prediction.","6ac2e534":"## Evaluating a Classification Model\nWe'll calculate a *Confusion Matrix* and the *Area Under ROC* (Receiver Operating Characteristic) to evaluate the model. \n### Compute Confusion Matrix\nClassifiers are typically evaluated by creating a *confusion matrix*, which indicates the number of:\n- True Positives\n- True Negatives\n- False Positives\n- False Negatives\n\nFrom these core measures, other evaluation metrics such as *precision*, *recall* and *F1* can be calculated.","40f95210":"Looks like we've got a good *Precision*, but a low *Recall*, therefore our *F1* is not that good.","003a4073":"### Run the Pipeline to train a model\nRun the pipeline as an Estimator on the training data to train a model.","71512cd0":"Looking into the results, some trueLabel 1s are predicted as 0. Let's evaluate the model.","0de20a78":"### Review the Area Under ROC\nAnother way to assess the performance of a classification model is to measure the area under a ROC (Receiver Operating Characteristic) curve for the model. the spark.ml library includes a **BinaryClassificationEvaluator** class that we can use to compute this. The ROC curve shows the True Positive and False Positive rates plotted for varying thresholds.","f8495ec9":"This is a tutorial of machine learning with PySpark. I will create a classification model and a regression model using Pipelines.","564d22a0":"## Machine Learning with Spark","019bc760":"### Import Spark SQL and Spark ML Libraries\n\nWe'll train a **LogisticRegression** model with a **Pipleline** preparing the data, a **CrossValidator** to tuene the parameters of the model, and a **BinaryClassificationEvaluator** to evaluate our trained model."}}