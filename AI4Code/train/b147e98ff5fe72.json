{"cell_type":{"269742e4":"code","b6bafd31":"code","3466c064":"code","bcb63c38":"code","33918541":"code","62ee3e3f":"code","ca795372":"code","2b368934":"code","00ae451f":"code","95612503":"code","dd3867e1":"code","1d9fe4fa":"code","fd51a494":"code","23bf8c58":"code","ce24fdad":"code","0a635332":"code","c00a2f5c":"code","25d43ff9":"markdown"},"source":{"269742e4":"#Imports\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tensorflow.keras.utils import to_categorical\n","b6bafd31":"#Lets load the data\ndf_train = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/test.csv')\n#Info on dataframe\ndf_train.info()","3466c064":"#Lets visualize the class and checking for class imbalance\nnum = df_train.label.value_counts()\nsns.barplot(num.index,num)","bcb63c38":"#Seperating all the features and target for training data\ntrain_data = df_train.iloc[:,1:]\ntrain_label = df_train.iloc[:,0]\nprint(f\"train_data shape :{train_data.shape}\")\nprint(f\"train_label shape :{train_label.shape}\")","33918541":"#Normalize\nX = train_data.values \/ 255.0\nX_test = df_test.iloc[:,1:].values \/ 255.0\ny = train_label","62ee3e3f":"#Lets take a look at few samples\nplt.imshow(X[2].reshape(28,28))\nplt.show()   \nprint(f\"label : {y[2]}\")","ca795372":"#data splitting with 90% on the train set and 10% on validation set\nX_train,X_val,y_train,y_val = train_test_split(X,y,test_size = 0.1)","2b368934":"#input reshape\ninput_shape = (-1,28,28,1)\nX_train = X_train.reshape(input_shape)\nX_val = X_val.reshape(input_shape)","00ae451f":"#Now let us encode our labels\ny_train = to_categorical(y_train)\ny_val = to_categorical(y_val)","95612503":"#Now we have categoricaly encoded our labels\nprint(y_train.shape)","dd3867e1":"#Building the CNN model\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Conv2D(64,(3,3),activation='relu',\n                                input_shape = (28,28,1)))\nmodel.add(tf.keras.layers.Conv2D(64,(3,3),activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\nmodel.add(tf.keras.layers.MaxPool2D(pool_size=(2,2)))\nmodel.add(tf.keras.layers.Conv2D(32,(3,3),activation='relu'))\nmodel.add(tf.keras.layers.Conv2D(32,(3,3),activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.25))\nmodel.add(tf.keras.layers.MaxPool2D(pool_size=(2,2)))\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(128,activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.25))\nmodel.add(tf.keras.layers.Dense(256,activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.25))\nmodel.add(tf.keras.layers.Dense(10,activation='softmax'))","1d9fe4fa":"optimzer = tf.keras.optimizers.Adam(learning_rate=0.01)\nmodel.compile(optimizer='Adam',\n             loss='categorical_crossentropy',\n             metrics=['acc'])\n","fd51a494":"epochs = 10\nbatch_size = 128\nhist = model.fit(X_train,y_train,\n                validation_data=(X_val,y_val),\n                epochs=epochs,\n                batch_size=batch_size).history","23bf8c58":"#lets just evaluate the model\nmodel.evaluate(X_val,y_val)","ce24fdad":"X_test = X_test.reshape(-1,28,28,1)\nresult = model.predict_classes(X_test)","0a635332":"_id = [i for i in range(0,X_test.shape[0])]\nsub_df = pd.DataFrame({'id':_id,'label':result})\nsub_df.to_csv('submission.csv',index=False)","c00a2f5c":"sub_df.head()","25d43ff9":"# Kannada MNIST using CNN Tensorflow 2.0\n\n### A simple CNN implementation for Kannada MNIST dataset classification\n\nauthor : anand_s_m"}}