{"cell_type":{"2c1637b5":"code","43790734":"code","f2bd31e6":"code","d1ac6414":"code","40e7ab05":"code","ddab6753":"code","b05c673e":"code","37b6fe90":"code","09946d93":"code","d5378869":"code","463c58f9":"code","631c0008":"code","ce829684":"code","727f9c4b":"code","db0ce46d":"code","9e7eecdc":"code","7ab77458":"code","4ebbe388":"code","4fc8abb7":"code","83be00cc":"code","23b56c31":"code","3658dbe6":"code","b618a8ed":"code","40125a54":"code","4e9d5a23":"code","f5cf1f62":"code","7e143aa8":"code","1769a50c":"code","988c11f1":"code","c27f3ec0":"code","399fc5db":"code","70bb67cf":"code","999e07ea":"code","72d95395":"code","6fde1552":"code","47bdf62a":"code","954da4d4":"code","d3471bbf":"code","097c2677":"code","47271e68":"code","ca034790":"code","e834a2a1":"code","aa979a75":"code","d4f323f3":"code","f470e27f":"code","799790ee":"code","ac4b88e3":"code","abd9972d":"code","8128d694":"code","d2ca1e8a":"code","ca8a4049":"code","777878b4":"code","906f04d9":"code","8db68616":"code","1795ab06":"code","8302645e":"code","d766e58f":"code","26b26de3":"code","b771415e":"code","d78ed6c8":"code","0dde617a":"code","f80f93a2":"code","4fe7cbf7":"code","02a1703f":"code","858eb309":"code","bb12f8fb":"code","930cbd08":"code","1040ea04":"code","5464776d":"code","e96cb46b":"code","16886e8d":"code","dec2261f":"code","57f82a78":"code","cd5d94d8":"code","21a94074":"code","3809d8c8":"code","75ba68a5":"code","ee69a5e1":"code","6db3bb87":"code","a149b27e":"code","288e1c58":"code","1e2c793b":"code","48860b95":"markdown","69614406":"markdown","e79689dd":"markdown","3940f5ba":"markdown","b1754f6d":"markdown","658da4c2":"markdown","7dedc781":"markdown","00a417df":"markdown"},"source":{"2c1637b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","43790734":"import sys\nimport scipy\nimport numpy\nimport matplotlib\nimport pandas\nimport sklearn\n","f2bd31e6":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n%matplotlib inline","d1ac6414":"train_titanic = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_titanic.head(1)","40e7ab05":"test_titanic = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_titanic.head(1)","ddab6753":"# Check train dataframe structure\ntrain_titanic.info()","b05c673e":"# Check test dataframe rows and variables\ntest_titanic.info()","37b6fe90":"# Check train dataframe basic stats data\ntrain_titanic.describe()","09946d93":"# Check test dataframe basic stats data\ntest_titanic.describe()","d5378869":"# Check null and NA values for train dataset\nna_values = train_titanic.isna().sum()\n# Table of absolute frequency\nna_values","463c58f9":"# Table of relative frequency\ntrain_titanic.isnull().sum()\/len(train_titanic)*100","631c0008":"# Check null and NA values for test dataset\nna_values = test_titanic.isna().sum()\n# Table of absolute frequency\nna_values","ce829684":"# Table of relative frequency\ntest_titanic.isnull().sum()\/len(test_titanic)*100","727f9c4b":"train_titanic['PassengerId'].head(10)","db0ce46d":"# Remove PassengerId variable\ntrain_titanic.drop(['PassengerId'], axis=1, inplace=True)","9e7eecdc":"sns.barplot(x=\"Survived\", data=train_titanic)","7ab77458":"train_titanic.describe()['Survived']","4ebbe388":"train_titanic[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()","4fc8abb7":"sns.barplot(x=\"Pclass\", y=\"Survived\", data=train_titanic)","83be00cc":"train_titanic[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean()","23b56c31":"sns.barplot(x=\"Sex\", y=\"Survived\", data=train_titanic)","3658dbe6":"train_titanic['Sex'] = train_titanic['Sex'] == 'male'\ntest_titanic['Sex'] = test_titanic['Sex'] == 'male'","b618a8ed":"train_titanic[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean()\n","40125a54":"sns.barplot(x=\"SibSp\", y=\"Survived\", data=train_titanic)","4e9d5a23":"train_titanic[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean()","f5cf1f62":"sns.barplot(x=\"Parch\", y=\"Survived\", data=train_titanic)","7e143aa8":"train_titanic['FamilySize'] = train_titanic['SibSp'] + train_titanic['Parch'] + 1\ntrain_titanic[[\"FamilySize\", \"Survived\"]].groupby(['FamilySize'], as_index=False).mean()","1769a50c":"sns.barplot(x=\"FamilySize\", y=\"Survived\", data=train_titanic)","988c11f1":"# Apply the same above for test_titanic\ntest_titanic['FamilySize'] = test_titanic['SibSp'] + test_titanic['Parch'] + 1","c27f3ec0":"train_titanic['IsAlone'] = 0\ntrain_titanic.loc[train_titanic['FamilySize'] == 1, 'IsAlone'] = 1\ntrain_titanic[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()","399fc5db":"sns.barplot(x=\"IsAlone\", y=\"Survived\", data=train_titanic)","70bb67cf":"# Apply the same above for test_titanic\ntest_titanic['IsAlone'] = 0\ntest_titanic.loc[test_titanic['FamilySize'] == 1, 'IsAlone'] = 1","999e07ea":"# We remove Ticket variable in both traing and test dataset\ntrain_titanic.drop(['Ticket'], axis=1, inplace=True)\ntest_titanic.drop(['Ticket'], axis=1, inplace=True)","72d95395":"train_titanic.head(10)","6fde1552":"test_titanic.head(10)","47bdf62a":"# Check ratio Embarked and Survived variable\ntrain_titanic[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean()","954da4d4":"# Fill by frequency\ntrain_titanic['Embarked'] = train_titanic['Embarked'].fillna('S')","d3471bbf":"# Check ratio Embarked and Survived variable\ntrain_titanic[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean()","097c2677":"sns.barplot(x=\"Embarked\", y=\"Survived\", data=train_titanic)","47271e68":"# Apply the same above for test_titanic\ntest_titanic['Embarked'] = test_titanic['Embarked'].fillna('S')","ca034790":"sns.distplot(train_titanic['Fare'], fit=norm)","e834a2a1":"train_titanic['Fare'] = np.log1p(train_titanic['Fare'])\nsns.distplot(train_titanic['Fare'], fit=norm)","aa979a75":"train_titanic['FareGroup'] = pd.qcut(train_titanic['Fare'], 4, labels=['A', 'B', 'C', 'D'])\ntrain_titanic[['FareGroup', 'Survived']].groupby(['FareGroup'], as_index=False).mean()","d4f323f3":"sns.barplot(x=\"FareGroup\", y=\"Survived\", data=train_titanic)","f470e27f":"# Apply the same above for test_titanic\ntest_titanic['Fare'] = np.log1p(test_titanic['Fare'])\ntest_titanic['FareGroup'] = pd.qcut(test_titanic['Fare'], 4, labels=['A', 'B', 'C', 'D'])","799790ee":"# We remove the variable Fare\ntrain_titanic.drop(['Fare'], axis=1, inplace=True)\ntest_titanic.drop(['Fare'], axis=1, inplace=True)","ac4b88e3":"train_titanic['InCabin'] = ~train_titanic['Cabin'].isnull()","abd9972d":"sns.barplot(x=\"InCabin\", y=\"Survived\", data=train_titanic)\nplt.show()","8128d694":"# Apply the same above for test_titanic\ntest_titanic['InCabin'] = ~test_titanic['Cabin'].isnull()","d2ca1e8a":"# Check unique Cabin\npd.unique(train_titanic['Cabin'])","ca8a4049":"# Count values\ntrain_titanic[\"Cabin\"].value_counts()","777878b4":"#Turning cabin number into Deck\ntrain_titanic[\"Cabin_Data\"] = train_titanic[\"Cabin\"].isnull().apply(lambda x: not x)\ntest_titanic[\"Cabin_Data\"] = test_titanic[\"Cabin\"].isnull().apply(lambda x: not x)","906f04d9":"# Create Deck and Room\ntrain_titanic[\"Deck\"] = train_titanic[\"Cabin\"].str.slice(0,1)\ntrain_titanic[\"Room\"] = train_titanic[\"Cabin\"].str.slice(1,5).str.extract(\"([0-9]+)\", expand=False).astype(\"float\")\ntrain_titanic[train_titanic[\"Cabin_Data\"]]","8db68616":"# Create Deck and Room\ntest_titanic[\"Deck\"] = test_titanic[\"Cabin\"].str.slice(0,1)\ntest_titanic[\"Room\"] = test_titanic[\"Cabin\"].str.slice(1,5).str.extract(\"([0-9]+)\", expand=False).astype(\"float\")\ntest_titanic[test_titanic[\"Cabin_Data\"]]","1795ab06":"train_titanic[\"Deck\"] = train_titanic[\"Deck\"].fillna(\"N\")\ntrain_titanic[\"Room\"] = round(train_titanic[\"Room\"].fillna(train_titanic[\"Room\"].mean()),0).astype(\"int\")","8302645e":"test_titanic[\"Deck\"] = test_titanic[\"Deck\"].fillna(\"N\")\ntest_titanic[\"Room\"] = round(test_titanic[\"Room\"].fillna(test_titanic[\"Room\"].mean()),0).astype(\"int\")","d766e58f":"# Check unique Deck\npd.unique(train_titanic['Deck'])","26b26de3":"# Check unique Room\npd.unique(train_titanic['Room'])","b771415e":"train_titanic['Room'].describe()","d78ed6c8":"bins = [0, 50, 75, 100, np.inf]\nlabels = ['r1', 'r2', 'r3', 'r4']\ntrain_titanic['RoomGroup'] = pd.cut(train_titanic[\"Room\"], bins, labels = labels)","0dde617a":"test_titanic['RoomGroup'] = pd.cut(test_titanic[\"Room\"], bins, labels = labels)","f80f93a2":"sns.barplot(x=\"Deck\", y=\"Survived\", data=train_titanic)","4fe7cbf7":"sns.barplot(x=\"RoomGroup\", y=\"Survived\", data=train_titanic)","02a1703f":"# Remove variables except Deck\ntrain_titanic.drop([\"Cabin\", \"Cabin_Data\", \"Room\"], axis=1, inplace=True, errors=\"ignore\")\ntest_titanic.drop([\"Cabin\", \"Cabin_Data\", \"Room\"], axis=1, inplace=True, errors=\"ignore\")","858eb309":"train_titanic[\"Age\"] = train_titanic[\"Age\"].fillna(-0.5)\nbins = [-1, 0, 5, 12, 18, 24, 35, 60, np.inf]\nlabels = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\ntrain_titanic['AgeGroup'] = pd.cut(train_titanic[\"Age\"], bins, labels = labels)","bb12f8fb":"sns.barplot(x=\"AgeGroup\", y=\"Survived\", data=train_titanic)\nplt.show()","930cbd08":"# Apply the same above for test_titanic\ntest_titanic[\"Age\"] = test_titanic[\"Age\"].fillna(-0.5)\ntest_titanic['AgeGroup'] = pd.cut(train_titanic[\"Age\"], bins, labels = labels)","1040ea04":"# We remove the variable Age\ntrain_titanic.drop(['Age'], axis=1, inplace=True)\ntest_titanic.drop(['Age'], axis=1, inplace=True)","5464776d":"train_titanic['Name'].head(10)","e96cb46b":"import re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    if title_search:\n        return title_search.group(1)\n    return \"\"\n\n# Apply get_title function\ntrain_titanic['Title'] = train_titanic['Name'].apply(get_title)\ntest_titanic['Title'] = test_titanic['Name'].apply(get_title)\n\n# Check the results\npd.crosstab(train_titanic['Title'], train_titanic['Sex'])","16886e8d":"# Create a categorization on train dataset\ntrain_titanic['Title'] = train_titanic['Title'].replace(['Lady', 'Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ntrain_titanic['Title'] = train_titanic['Title'].replace('Mlle', 'Miss')\ntrain_titanic['Title'] = train_titanic['Title'].replace('Ms', 'Miss')\ntrain_titanic['Title'] = train_titanic['Title'].replace('Mme', 'Mrs')\n\n# We create a relative table\ntrain_titanic[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","dec2261f":"# Same above create a categorization on test dataset\ntest_titanic['Title'] = test_titanic['Title'].replace(['Lady', 'Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ntest_titanic['Title'] = test_titanic['Title'].replace('Mlle', 'Miss')\ntest_titanic['Title'] = test_titanic['Title'].replace('Ms', 'Miss')\ntest_titanic['Title'] = test_titanic['Title'].replace('Mme', 'Mrs')","57f82a78":"sns.barplot(x=\"Title\", y=\"Survived\", data=train_titanic)\nplt.show()","cd5d94d8":"# Remove Name variable\ntrain_titanic.drop(['Name'], axis=1, inplace=True)\ntest_titanic.drop(['Name'], axis=1, inplace=True)","21a94074":"train_titanic.shape, test_titanic.shape","3809d8c8":"train_titanic.head(1)","75ba68a5":"test_titanic.head(1)","ee69a5e1":"PassengerId = test_titanic['PassengerId']\nX = train_titanic\nY = test_titanic.drop('PassengerId', axis=1).copy()","6db3bb87":"PassengerId","a149b27e":"Y","288e1c58":"# combinamos train and test en un solo dataframe\ndataset = [X, Y]","1e2c793b":"col_Z = ['SibSp', 'Parch', 'FamilySize']","48860b95":"Embarked","69614406":"Training and Validation dataset","e79689dd":"Fare","3940f5ba":"Age","b1754f6d":"Cabin","658da4c2":"Scaling with StandardScaler","7dedc781":"Name","00a417df":"EDA"}}