{"cell_type":{"ecb4fca4":"code","d6363608":"code","4d4aadef":"code","a460b90e":"code","b232ca2d":"code","1341e79b":"code","5b0150be":"code","fd256562":"code","2e9a151b":"code","00e4524d":"code","cef36e36":"code","5fb8d06c":"code","e8c85b63":"code","f70b1b90":"code","d7cf936f":"code","16febebc":"code","9fc9c1e7":"code","f163eb3b":"code","c776b4cf":"code","38e243c0":"code","ece48f84":"code","a5f5278d":"code","7665a5c2":"code","dc25e363":"code","748334f6":"markdown","c070a1af":"markdown","757bb1e8":"markdown","647d49ea":"markdown","111e6c63":"markdown","c9767e63":"markdown","d4ef9871":"markdown","086d1913":"markdown","918f05a0":"markdown","980e9fac":"markdown","6a4f9f15":"markdown","272f8067":"markdown","18dc210e":"markdown","e10647ce":"markdown","da2620b5":"markdown","9150a7ac":"markdown"},"source":{"ecb4fca4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d6363608":"# pulling in the main datasets\ndata_gb = pd.read_csv('\/kaggle\/input\/youtube-new\/GBvideos.csv') # uk\ndata_ca = pd.read_csv('\/kaggle\/input\/youtube-new\/CAvideos.csv') # canada\ndata_us = pd.read_csv('\/kaggle\/input\/youtube-new\/USvideos.csv') # us\ndata_in = pd.read_csv('\/kaggle\/input\/youtube-new\/INvideos.csv') # india\ndata_de = pd.read_csv('\/kaggle\/input\/youtube-new\/DEvideos.csv') # germany\n\n# add new columns to identify the region\ndata_gb['region'] = 'UK'\ndata_ca['region'] = 'Canada'\ndata_us['region'] = 'US'\ndata_in['region'] = 'India'\ndata_de['region'] = 'Germany'\n\n# to make sure that the structure of the datasets are the same\nprint(data_gb.columns == data_ca.columns)\nprint(data_gb.columns == data_us.columns)\nprint(data_gb.columns == data_in.columns)\nprint(data_gb.columns == data_de.columns)","4d4aadef":"data_us.info()","a460b90e":"data_us.sample(5)","b232ca2d":"#pulling in the category datasets\ndata_gb_cat_json = pd.read_json('\/kaggle\/input\/youtube-new\/GB_category_id.json')\ndata_gb_cat = pd.json_normalize(data_gb_cat_json['items'])\n\ndata_ca_cat_json = pd.read_json('\/kaggle\/input\/youtube-new\/CA_category_id.json')\ndata_ca_cat = pd.json_normalize(data_ca_cat_json['items'])\n\ndata_us_cat_json = pd.read_json('\/kaggle\/input\/youtube-new\/US_category_id.json')\ndata_us_cat = pd.json_normalize(data_us_cat_json['items'])\n\ndata_in_cat_json = pd.read_json('\/kaggle\/input\/youtube-new\/IN_category_id.json')\ndata_in_cat = pd.json_normalize(data_in_cat_json['items'])\n\ndata_de_cat_json = pd.read_json('\/kaggle\/input\/youtube-new\/DE_category_id.json')\ndata_de_cat = pd.json_normalize(data_de_cat_json['items'])\n\n# change the id column to 'int64' so that we can match them in the merge function below (need to have the same datatype)\ndata_gb_cat['id'] = data_gb_cat['id'].astype('int64')\ndata_ca_cat['id'] = data_ca_cat['id'].astype('int64')\ndata_us_cat['id'] = data_us_cat['id'].astype('int64')\ndata_in_cat['id'] = data_in_cat['id'].astype('int64')\ndata_de_cat['id'] = data_de_cat['id'].astype('int64')","1341e79b":"# these are the columns we will keep\ncols_to_keep = ['region','title', 'channel_title','snippet.title','publish_time','views','likes','dislikes','comment_count','comments_disabled','ratings_disabled']","5b0150be":"#merging the main datasets and the category datasets\ndata_gb_new = data_gb.merge(data_gb_cat, left_on='category_id', right_on='id', how='left')\ndata_gb_new = data_gb_new[cols_to_keep]\n\ndata_ca_new = data_ca.merge(data_gb_cat, left_on='category_id', right_on='id', how='left')\ndata_ca_new = data_ca_new[cols_to_keep]\n\ndata_us_new = data_us.merge(data_gb_cat, left_on='category_id', right_on='id', how='left')\ndata_us_new = data_us_new[cols_to_keep]\n\ndata_in_new = data_in.merge(data_gb_cat, left_on='category_id', right_on='id', how='left')\ndata_in_new = data_in_new[cols_to_keep]\n\ndata_de_new = data_de.merge(data_gb_cat, left_on='category_id', right_on='id', how='left')\ndata_de_new = data_de_new[cols_to_keep]","fd256562":"data_final = pd.concat([data_gb_new, data_ca_new, data_us_new, data_in_new, data_de_new], axis=0)","2e9a151b":"data_final.rename(columns={'snippet.title' : 'video_category'}, inplace=True)","00e4524d":"data_final.shape[0] - data_final.count() # nan values under 'video category' column","cef36e36":"data_final[data_final['video_category'].isnull() == True]","5fb8d06c":"# fill the nan values under 'video_category' with 'No category'\ndata_final['video_category'].fillna('No category', inplace=True)","e8c85b63":"data_final['upload_date'] = pd.to_datetime(data_final['publish_time'].str[:10], format='%Y-%m-%d')\ndata_final['upload_date_year_month'] = pd.to_datetime(data_final['publish_time'].str[:7], format='%Y-%m')\n\ndata_final['upload_year'] = data_final['upload_date'].dt.year\ndata_final['upload_month'] = data_final['upload_date'].dt.month\n\ndata_final.drop('publish_time', axis=1, inplace=True)","f70b1b90":"data_final['likes_%_of_view'] = (data_final['likes'] \/ data_final['views']) * 100 # percentage of likes as a proportion of views\ndata_final['dislikes_%_of_view'] = (data_final['dislikes'] \/ data_final['views']) * 100 # percentage of dislikes as a proportion of views\ndata_final['comment_%_of_view'] = (data_final['comment_count'] \/ data_final['views']) * 100 # percentage of comment count as a proportion of views\n\ndata_final['comments_disabled'].replace({False : 'No', True:'Yes'}, inplace=True)\ndata_final['ratings_disabled'].replace({False : 'No', True:'Yes'}, inplace=True)","d7cf936f":"data_final.info()","16febebc":"data_final.sample(5)","9fc9c1e7":"data_final.groupby('upload_year')[['views','likes','dislikes','comment_count']].sum().reset_index()\n\n# observations:\n#1 from 2016 to 2017, major increase in views","f163eb3b":"a = data_final.pivot_table(index='upload_year', columns='region', aggfunc='sum', values='views')\na[[i for i in a.columns if i not in ['region','upload_year']]] = a[[i for i in a.columns if i not in ['region','upload_year']]] \/ 1000000\na.rename(columns=lambda x : x + ' Views in M', inplace=True)\n\n# generating the percentage change in views for each year for each region\nb = a[[i for i in a.columns if i not in ['region','upload_year']]].pct_change() * 100\nb.rename(columns=lambda x : x + ' % Change', inplace=True)\n\nc = pd.concat([a,b], axis=1).sort_index(axis=1)\nc.round(1)\n\n# observations\n#1 2017 and 2018 was where most regions experienced 'significant' growth in viewership of Youtube videos","c776b4cf":"data_selected_year = data_final[data_final['upload_year'].isin([2017,2018])]\ndata_selected_year_by_year = data_selected_year.groupby(['upload_date_year_month','region'])[['views']].sum().reset_index()\n\n\nfig = px.line(data_selected_year_by_year, x='upload_date_year_month', y='views', color='region')\nfig.update_layout(title_text='Views Across Regions from 2017 to 2018', title_font_size=20, legend_title_text='Region',\\\n                 legend=dict(\n                            yanchor='top',\n                            y=0.99,\n                            xanchor='right',\n                            x=0.999)\n                 )\n\nfig.update_xaxes(showgrid = False)\nfig.update_yaxes(showgrid = False)\n\nfig.show()","38e243c0":"fig = px.box(data_final, x = 'comments_disabled', y='likes_%_of_view', labels={'likes_%_of_view' : 'Percentage of Likes as a Proportion of Video Views'})\n\nfig.update_layout(title_text='Distribution of Likes % between Videos with Comments Enabled\/Disabled')\n\nfig.update_xaxes(showgrid = False)\nfig.update_yaxes(showgrid = False)\n\nfig.show()","ece48f84":"fig = px.scatter(data_final, x='views',y = 'likes', color='region', facet_col='region', labels={'views':'Number of Views', 'likes':'Number of Likes'}, marginal_x ='histogram', height=1000, trendline='ols', trendline_color_override='black')\n\nfig.update_layout(title_text='Visual View Between Number of Views and Likes Across Regions', title_font_size=20, showlegend=False)\n\nfig.update_xaxes(showgrid = False)\nfig.update_yaxes(showgrid = False)\n\nfig.show()","a5f5278d":"fig = px.scatter(data_final, x='likes_%_of_view',y = 'views', color='region', facet_col='region', labels={'views':'Number of Views', 'likes_%_of_view':'% of Likes'}, marginal_x ='histogram', height=1000)\n\nfig.update_layout(title_text='Visual View Between Number of Views and and Percentage of Likes Across Regions', title_font_size=20, showlegend=False)\n\nfig.update_xaxes(showgrid = False)\nfig.update_yaxes(showgrid = False)\n\nfig.show()","7665a5c2":"fig = px.treemap(data_final, path=['video_category','region'], values='views', color='region')\n\nfig.update_layout(title_text='Breakdown of Video Views by Category and Region', title_font_size=20, showlegend=False)\n\nfig.show()","dc25e363":"fig = px.scatter(data_final, x='views',y = 'likes', color='region', facet_col='video_category', labels={'views':'Number of Views', 'likes':'Number of Likes'},facet_col_wrap = 4, height = 1000, opacity = 0.5)\nfig.update_layout(title_text='Visual View Between Number of Views and Likes Across Video Categories', title_font_size=20)\n\nfig.update_xaxes(showgrid = False)\nfig.update_yaxes(showgrid = False)\n\nfig.show()","748334f6":"# Distribution of Likes","c070a1af":"# Views & Likes Across Regions","757bb1e8":"**Commentary:**\n\n* Views from UK was 'significantly' higher than other regions\n\n* Views from US was picking up in early 2018 and catching up to UK\n\n* Views from other regions were relatively consistent","647d49ea":"# Basic Data Exploration on Cleaned-Up Dataset","111e6c63":"# Combining data from different regions","c9767e63":"# Breakdown of Video Views by Category and Region","d4ef9871":"**Commentary:**\n\n* Videos in the 'Music' category garnered the most views\n* UK dominated in most of the top categories ","086d1913":"**Commentary:**\n\n* Videos with comments enabled generally have a wider spread of likes % as compared to videos with comments disabled","918f05a0":"# Data Visualization","980e9fac":"# Views & Likes Across Video Categories","6a4f9f15":"# Data Cleanup","272f8067":"# Views & Like % Across Region","18dc210e":"**Commentary:** \n\n* More views generally translate to more likes","e10647ce":"**Commentary** \n\n* When looking at the percentage of likes as a proportion of the video view count, videos with LOWER VIEW COUNT, generally have a HIGHER percentage of likes as a proportion of their video view count","da2620b5":"# Views Across Region Over Time","9150a7ac":"# Data Preparation"}}