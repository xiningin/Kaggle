{"cell_type":{"b6e4f3c3":"code","78a1bbac":"code","d48a453f":"code","4c63c2cf":"code","31477a2f":"code","5149c766":"code","cce92065":"code","5857b3e2":"code","5d438fa2":"code","548784e6":"code","d2e04c83":"code","a9cfa993":"code","136db4ca":"code","44d8c4ef":"code","d70c3722":"code","252475ea":"code","9c05cd0a":"code","c385d444":"code","680c65bf":"markdown","2544f625":"markdown","f4b2b3ac":"markdown","ad0a046b":"markdown","f139d37c":"markdown","4fd4fc8f":"markdown","75079887":"markdown","c73eb1ab":"markdown","69bcc5d7":"markdown","ea785808":"markdown","41517aa2":"markdown","0cdc9081":"markdown","4d6a76a3":"markdown","b31bc1f7":"markdown","bfbfa872":"markdown","d5b4aa1c":"markdown","2f913fdc":"markdown","3e564f56":"markdown"},"source":{"b6e4f3c3":"import numpy as np\nimport pandas as pd\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport missingno as mn\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px","78a1bbac":"df_cpi = pd.read_csv('..\/input\/us-consumer-price-index\/US_CPI.csv')\ndf_home = pd.read_csv('..\/input\/san-francisco-housing-income-cpi-workers\/Home_Price_index.csv')\ndf_income = pd.read_csv('..\/input\/san-francisco-housing-income-cpi-workers\/Income.csv')\ndf_rent = pd.read_csv('..\/input\/san-francisco-housing-income-cpi-workers\/Rent.csv')\ndf_worker = pd.read_csv('..\/input\/san-francisco-housing-income-cpi-workers\/Workers_Index.csv')","d48a453f":"display(df_cpi.head())\ndisplay(df_home.head())\ndisplay(df_income.head())\ndisplay(df_rent.head())\ndisplay(df_worker.head())","4c63c2cf":"df_cpi['Date'] = pd.to_datetime(df_cpi['Date'], format = '%m\/%d\/%Y')\ndf_home['Date'] = pd.to_datetime(df_home['Date'], format = '%Y-%m-%d')\ndf_income['Date'] = pd.to_datetime(df_income['Date'], format = '%m\/%d\/%Y')\ndf_rent['Date'] = pd.to_datetime(df_rent['Date'], format = '%m\/%d\/%Y')\ndf_worker['Date'] = pd.to_datetime(df_worker['Date'], format = '%Y-%m-%d')\n\ndf_cpi = df_cpi.set_index(df_cpi['Date'])\ndf_home = df_home.set_index(df_home['Date'])\ndf_income = df_income.set_index(df_income['Date'])\ndf_rent = df_rent.set_index(df_rent['Date'])\ndf_worker = df_worker.set_index(df_worker['Date'])\n\ndf_cpi = df_cpi.drop(columns = ['Date'])\ndf_home = df_home.drop(columns = ['Date'])\ndf_income = df_income.drop(columns = ['Date'])\ndf_rent = df_rent.drop(columns = ['Date'])\ndf_worker = df_worker.drop(columns = ['Date'])","31477a2f":"df1 = pd.concat([df_home, df_rent, df_worker], axis = 1)\nmn.matrix(df1)","5149c766":"df1 = df1[df1.index >= '1990-01-01']","cce92065":"df1 = df1.fillna(method = 'ffill')\nmn.matrix(df1)","5857b3e2":"fig = px.line(df1, x=df1.index, y=df1.columns)\n    \nfig.update_layout(\n        template='gridon',\n        title='Bay Area Housing vs Workers Index',\n        xaxis_title='Year',\n        yaxis_title = 'Index Values',\n        xaxis_showgrid=True,\n        yaxis_showgrid=False,\n    shapes = [\n                    dict(\n            type=\"rect\",\n            x0='2000-03-01',\n            x1='2002-10-01',\n            y0=df1['Home Price Index'].min(),\n            y1=df1['Rent Index'].max(),\n            fillcolor=\"Red\",\n            opacity=0.3,\n            layer=\"below\",\n            line_width=0\n                    ),\n                dict(\n            type=\"rect\",\n            x0=\"2007-12-01\",\n            y0=df1['Home Price Index'].min(),\n            x1=\"2009-06-01\",\n            y1=df1['Rent Index'].max(),\n            fillcolor=\"Red\",\n            opacity=0.3,\n            layer=\"below\",\n            line_width=0,\n            )\n        ],\n        annotations=[\n             dict(text=\"The Great Recession\",x = '2007-12-01', y=df1['Rent Index'].max()),\n             dict(text=\"Dot Com Bubble\", x='2000-03-01', y=df1['Rent Index'].max())\n         ]\n    )\nfig.show()","5d438fa2":"df2 = df1.drop(columns = ['Rent Index'])\nfig = px.line(df2, x=df2.index, y=df2.columns)\n    \nfig.update_layout(\n        template='gridon',\n        title='Bay Area House Prices vs Workers Index',\n        xaxis_title='Year',\n        yaxis_title = 'Index Values',\n        xaxis_showgrid=True,\n        yaxis_showgrid=False,\n    shapes = [\n                    dict(\n            type=\"rect\",\n            x0='2000-03-01',\n            x1='2002-10-01',\n            y0=df2['Home Price Index'].min(),\n            y1=df2['Home Price Index'].max(),\n            fillcolor=\"Salmon\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=0\n                    ),\n                dict(\n            type=\"rect\",\n            x0=\"2007-12-01\",\n            y0=df2['Home Price Index'].min(),\n            x1=\"2009-06-01\",\n            y1=df2['Home Price Index'].max(),\n            fillcolor=\"Red\",\n            opacity=0.4,\n            layer=\"below\",\n            line_width=0,\n            )\n        ],\n        annotations=[\n             dict(text=\"The Great Recession\",x = '2007-12-01', y=df2['Home Price Index'].max()),\n             dict(text=\"Dot Com Bubble\", x='2000-03-01', y=df2['Home Price Index'].max())\n         ]\n    )\nfig.show()","548784e6":"df_all = pd.concat([df_cpi, df_home, df_income, df_rent, df_worker], axis = 1)","d2e04c83":"df_all = df_all[df_all.index >= '1990-01-01']\ndf_all = df_all[df_all.index <= '2018-01-01']","a9cfa993":"df_all = df_all.fillna(method = 'ffill')\ndf_all","136db4ca":"sns.pairplot(df_all, corner=True, kind='reg', diag_kind='kde', plot_kws=dict(scatter_kws=dict(s=6)))\nplt.show()","44d8c4ef":"df_all = df_all.drop(columns = ['US Workers Index', 'San Fran Workers Index'])","d70c3722":"date = df_all.index\nfrom sklearn.preprocessing import MinMaxScaler\ndf_all = df_all.astype('float')\nscaler = MinMaxScaler()\ndf_scaled = pd.DataFrame(scaler.fit_transform(df_all), columns=df_all.columns)\ndf_scaled = df_scaled.set_index(date)","252475ea":"fig = px.line(df_scaled, x=df_scaled.index, y=df_scaled.columns)\n    \nfig.update_layout(\n        template='gridon',\n        title='Bay Area Housing Cost vs CPI vs Income',\n        xaxis_title='Year',\n        yaxis_title = 'Scaled Values',\n        xaxis_showgrid=True,\n        yaxis_showgrid=False,\n    shapes = [\n                    dict(\n            type=\"rect\",\n            x0='2000-03-01',\n            x1='2002-10-01',\n            y0=0,\n            y1=df_scaled.Income.max(),\n            fillcolor=\"LightSalmon\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=0\n                    ),\n                dict(\n            type=\"rect\",\n            x0=\"2007-12-01\",\n            y0=0,\n            x1=\"2009-06-01\",\n            y1=df_scaled.Income.max(),\n            fillcolor=\"Red\",\n            opacity=0.4,\n            layer=\"below\",\n            line_width=0,\n            )\n        ],\n        annotations=[\n             dict(text=\"The Great Recession\",x = '2007-12-01', y=df_scaled.Income.max()),\n             dict(text=\"Dot Com Bubble\", x='2000-03-01', y=df_scaled.Income.max())\n         ]\n    )\nfig.show()","9c05cd0a":"from fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, plot_components_plotly\n\nmodel_df = pd.DataFrame(df_home).reset_index()\nmodel_df = model_df.rename(columns={'Date': 'ds', 'Home Price Index': 'y'})\n\n# Initialise the model and make predictions\nm = Prophet()\nm.fit(model_df)\n\nfuture = m.make_future_dataframe(periods=24, freq='M')\n\nforecast = m.predict(future)\n\nplot_plotly(m, forecast)","c385d444":"plot_components_plotly(m, forecast)","680c65bf":"Bringing the cost of housing, rent, and worker indexes together into one Data Frame. The goal was to explore whether the number of jobs in the area had a correlation to the total cost of housing (renting or buying) in the area.\n\nNow that all this data is together in one Data Frame I wanted to explore any missing values, so I used the missingno library and the .matrix() function to identify missing values from each column.","2544f625":"**Next I simply needed to import all the data I would be using into Pandas Data Frames:**","f4b2b3ac":"No more missing values!","ad0a046b":"Let's do a little data exploration before we graph again. Using seaborn we can create a correlation plot:","f139d37c":"As expected the US Workers Index and the San Fran Workers Index don't really correlate with the data, so we'll drop those columns before we plot again.","4fd4fc8f":"So that we can see it all on one graph, we'll use sklearn library to call the function MinMaxScaler. This will scale all the data to fit nicely on one graph.","75079887":"# 2.Data Visualization using Plotly","c73eb1ab":"Now that the data is all scaled, we can graph them all again:","69bcc5d7":"If you enjoyed this notebook please upvote or leave a comment!\n\nSpecial thanks to Justinas Cirtautas as I used his notebook work on London Housing: https:\/\/www.kaggle.com\/justinas\/house-prices-in-london for a lot of this notebook.\nThanks for reading!","ea785808":"The data all seems to have different formats for the Date column, so I first wanted to convert each Date column using the pd.to_datetime() function, paying careful mind to the format each Data Frame had.\nOnce I converted the date columns, I set them to the index for each Data Frame so it was now seen as a time-series Data Frame. Next I dropped the 'Date' column all together as it became redundant.","41517aa2":"# Exploring the Bay Area Housing Market\n\n![image.png](attachment:image.png)\n\nThe main goal of this notebook was to explore the data offered by the Federal Reserve Bank of St. Louis on the San Fransisco bay area housing and income data.\nAll the data was pulled from: https:\/\/fredblog.stlouisfed.org\/\n\nI wanted to explore the housing and rental market, along with looking at what drives up the prices of these markets such as number of jobs along with income.\nWith the technology sector being a huge driving force I couldn't help but identify time of economic turmoil such as the dot com boom and the great recession.\n\n**First thing was to import all the libraries I would be using:**","0cdc9081":"We can also use the prophet_plot_components function to see the forecast broken down into trends.","4d6a76a3":"When looking at this matrix it was clear to see that the Rent Index column was missing a lot of data, and when looking back on df_rent Data Frame we can clearly see that is because the index is only tracked bi-annually, while other Data Frames contain data for each month. Another obvious issue is that the Rent Index ends earlier than the other data.\n\nBesides the Rent Index, we can see the US Workers Index and San Fran Workers Index have no data for the first few rows. Looking back at the Data Frames we can see the Rent Index starts back in 1984, while the others start as late as 1990. To fix this we will first first trim all data prior to 1990. Next I will use the .fillna() function to fill in the gaps for the Rent Index specifying method= 'ffill' to ensure we are simply using the previous data point for the Rent Index.","b31bc1f7":"Okay now that we have seen that, let's throw the CPI in there.","bfbfa872":"# 3.Facebook Prophet\n\nNow that we are done with that, let's look at some predictions!\nProphet is a Facebook open source model prediction that works similar to sklearn. The documentation is very easy to use and can be found at:\nhttps:\/\/facebook.github.io\/prophet\/docs\/quick_start.html","d5b4aa1c":"Now that I have done that, let's take another look at the data to ensure we are ready to graph","2f913fdc":"# 1.Data Exploration and Cleaning\n\n**I wanted to take a look at the data to see what I'm working with for each Data Frame:****","3e564f56":"The Rent Index continues to climb and makes it a little hard for us to see a comparison to the Home Price Index and the number of Workers. I'll drop that column to see a better picture to identify any correlation."}}