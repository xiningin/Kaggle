{"cell_type":{"2e412fda":"code","54bb7fec":"code","d7c1b07c":"code","26af56f6":"code","35316b85":"code","512f7c48":"code","2aa28358":"code","18e7d752":"code","a01359df":"code","b8840f1b":"code","9f4e45a6":"code","b76d9bd0":"code","60292515":"code","6b6c4bda":"code","e122f172":"code","68faa946":"code","024d8c40":"code","f8d3e794":"code","bf457f1b":"code","346c5e1a":"code","e7fedcf8":"code","fb81d4e3":"code","918fe91e":"code","1cc4a7c2":"code","248d6bff":"code","cb7e8be5":"code","517c2bd9":"code","82a4613d":"markdown","6fed5995":"markdown"},"source":{"2e412fda":"!pip install git+https:\/\/github.com\/qubvel\/efficientnet","54bb7fec":"from efficientnet import EfficientNetB3","d7c1b07c":"import os\nimport cv2\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport json\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Flatten, Activation, Dropout, GlobalAveragePooling2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import optimizers, applications\nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler, TensorBoard, EarlyStopping\nfrom keras import backend as K ","26af56f6":"train_df = pd.read_csv('..\/input\/train.csv')\ntrain_df.head()","35316b85":"train_df['category_id'] = train_df['category_id'].astype(str)","512f7c48":"batch_size=8\nimg_size = 32\nnb_epochs = 5","2aa28358":"%%time\ntrain_datagen = ImageDataGenerator(rescale=1.\/255, validation_split=0.25)\ntrain_generator = train_datagen.flow_from_dataframe(\n        dataframe = train_df,        \n        directory = '..\/input\/train_images',\n        x_col = 'file_name', y_col = 'category_id',\n        target_size=(img_size,img_size),\n        batch_size=batch_size,\n        class_mode='categorical',\n        subset='training')","18e7d752":"%%time\nvalidation_generator  = train_datagen.flow_from_dataframe(\n        dataframe = train_df,        \n        directory = '..\/input\/train_images',\n        x_col = 'file_name', y_col = 'category_id',\n        target_size=(img_size,img_size),\n        batch_size=batch_size,\n        class_mode='categorical',\n        subset='validation')","a01359df":"set(train_generator.class_indices)","b8840f1b":"nb_classes = 14","9f4e45a6":"# Metric\n\ndef f1_score(y_true, y_pred):\n    beta = 1\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)), axis=1)\n    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)), axis=1)\n    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)), axis=1)\n    \n    precision = true_positives \/ (predicted_positives + K.epsilon())\n    recall = true_positives \/ (possible_positives + K.epsilon())\n    \n    return K.mean(((1+beta**2)*precision*recall) \/ ((beta**2)*precision+recall+K.epsilon()))","b76d9bd0":"model_pre = EfficientNetB3(weights='imagenet', include_top=False, input_shape=(img_size, img_size, 3))\nmodel_pre.trainable = False","60292515":"# Freeze some layers\n# for layer in model_pre.layers[:-25]:\n#     layer.trainable = False","6b6c4bda":"#Adding custom layers \nx = model_pre.output\nx = GlobalAveragePooling2D()(x)\npredictions = Dense(nb_classes, activation=\"softmax\")(x)\nmodel = Model(input = model_pre.input, output = predictions)\n\nmodel.compile(optimizers.rmsprop(lr=0.001, decay=1e-6),loss='categorical_crossentropy',metrics=[f1_score])","e122f172":"model.summary()","68faa946":"# Callbacks\n\ncheckpoint = ModelCheckpoint(\"dnet121_1.h5\", monitor='val_loss', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\nearly = EarlyStopping(monitor='val_loss', min_delta=0, patience=5, verbose=1, mode='auto')","024d8c40":"%%time\n# Train model\nhistory = model.fit_generator(\n            train_generator,\n#             steps_per_epoch = train_generator.samples \/\/ batch_size,\n            steps_per_epoch = 50,\n            validation_data = validation_generator, \n#             validation_steps = validation_generator.samples \/\/ batch_size,\n            validation_steps = 25,\n            epochs = nb_epochs,\n            callbacks = [checkpoint, early],\n            verbose=2)","f8d3e794":"with open('history.json', 'w') as f:\n    json.dump(history.history, f)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['f1_score', 'val_f1_score']].plot()","bf457f1b":"test_df = pd.read_csv('..\/input\/test.csv')\ntest_df.head()","346c5e1a":"%%time\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_datagen.flow_from_dataframe(\n        dataframe = test_df,        \n        directory = '..\/input\/test_images',\n        x_col = 'file_name', y_col = None,\n        target_size = (img_size,img_size),\n        batch_size = 1,\n        shuffle = False,\n        class_mode = None\n        )","e7fedcf8":"%%time\ntest_generator.reset()\npredict = model.predict_generator(test_generator, steps = len(test_generator.filenames))","fb81d4e3":"len(predict)","918fe91e":"predicted_class_indices=np.argmax(predict,axis=1)","1cc4a7c2":"labels = (train_generator.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npredictions = [labels[k] for k in predicted_class_indices]","248d6bff":"sam_sub_df = pd.read_csv('..\/input\/sample_submission.csv')\nprint(sam_sub_df.shape)\nsam_sub_df.head()","cb7e8be5":"filenames=test_generator.filenames\nresults=pd.DataFrame({\"Id\":filenames,\n                      \"Predicted\":predictions})\nresults['Id'] = results['Id'].map(lambda x: str(x)[:-4])\nresults.to_csv(\"results.csv\",index=False)","517c2bd9":"results.head()","82a4613d":"**Simple example of transfer learning from pretrained model using Keras and Efficientnet (https:\/\/pypi.org\/project\/efficientnet\/).**\n* Metrics: f1_score","6fed5995":"### Prediction"}}