{"cell_type":{"dced7f8d":"code","25f01f6d":"code","4d073cd3":"code","96399398":"code","beea6fe1":"markdown","e3d0900f":"markdown","21ed7961":"markdown","4cb5d4ae":"markdown"},"source":{"dced7f8d":"import numpy as np\nimport sklearn.model_selection as cross_validation\nimport sklearn.model_selection as model_selection\nfrom sklearn.model_selection import KFold","25f01f6d":"X =  list(range(20))\nprint (X)","4d073cd3":"X_train, X_test = model_selection.train_test_split(X, train_size=0.75, test_size=0.25, shuffle=False)\nprint (\"X_train: \", X_train)\nprint(\"X_test: \", X_test)","96399398":"kf = KFold(n_splits=4, shuffle=True)\nX = np.array(X)\nfor train_index, test_index in kf.split(X):\n    X_train, X_test = X[train_index], X[test_index]\n    print(\"X_train: \", X_train)\n    print(\"X_test: \", X_test)","beea6fe1":"Create a dataset of numbers from 0 to 20 using range()","e3d0900f":"Import model_selection from scikit-learn, and use the function train_test_split( ) to split our data into two sets. I split data set into 75% for the training set and the rest of the data into the test set by using train_size as 0.75.\nAfter splitting data does not follow the same ascending order as before,  it randomly picks data for the training and test set. To avoid ascending order problem,  simply I set the shuffle parameter as False.","21ed7961":"1. Machine Learning with Scikit-Learn\n2. Data Splitting Using \"scikit-learn\"","4cb5d4ae":"For, cross-validation In scikit-learn, I used the KFold( ) function to split the data set by specifying the n_splits parameter as 4."}}