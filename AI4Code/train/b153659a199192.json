{"cell_type":{"26883eff":"code","c6f5fcf4":"code","5c5245f6":"code","d6683158":"code","f0516d3e":"code","16bbef67":"code","824b1ec3":"code","688ec79c":"code","e2df63cf":"code","a799abb0":"code","c2df5cd7":"code","02f2b986":"code","5bff70de":"code","b06b8468":"code","1ee68a4e":"code","138c5570":"code","a772e5ac":"code","6a2406df":"code","7077a1fd":"code","d933bed9":"code","4452693e":"code","9ca3c0b6":"code","8a3bf242":"code","0c8118e9":"markdown","4a0c8cf2":"markdown","00f94999":"markdown","15335bd0":"markdown","6b18a0a3":"markdown","3aef50ef":"markdown","b7cf9d16":"markdown","ae2d2e45":"markdown","7f5c58a5":"markdown","1a591641":"markdown","9beaf947":"markdown","8236e1d4":"markdown","70d2001d":"markdown","d4f71744":"markdown","b2bd948d":"markdown","6a7f9758":"markdown","71ff3aef":"markdown","341952e9":"markdown","7e13d194":"markdown"},"source":{"26883eff":"import pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport matplotlib as mtl\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nfrom pandas_profiling import ProfileReport\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots","c6f5fcf4":"df = pd.read_csv('..\/input\/chess\/games.csv')\ndf.head()","5c5245f6":"report = ProfileReport(df)\nreport","d6683158":"df = df.drop(['id', 'black_id', 'white_id', 'created_at', 'last_move_at', 'increment_code', 'opening_ply'], axis=1)","f0516d3e":"df.head()","16bbef67":"df['abertura'] = df['opening_name']\n\n#Limpeza da coluna \n\ndef splitAbertura(x):\n    df['abertura'] = df['abertura'].str.split(x).str[0]\n    return df['abertura']\n\nsplitAbertura(':')\nsplitAbertura('|')\nsplitAbertura('Game')\nsplitAbertura('#')\nsplitAbertura('Opening')\ndf['abertura'] = df['abertura'].str.strip()","824b1ec3":"df['media_pontos'] = (df['white_rating'] + df['black_rating']) \/ 2","688ec79c":"conditions = [\n    (df['media_pontos'] <= 199),\n    (df['media_pontos'] <= 399),\n    (df['media_pontos'] <= 599),\n    (df['media_pontos'] <= 799),\n    (df['media_pontos'] <= 999),\n    (df['media_pontos'] <= 1199),\n    (df['media_pontos'] <= 1399),\n    (df['media_pontos'] <= 1599),\n    (df['media_pontos'] <= 1799),\n    (df['media_pontos'] <= 1999),\n    (df['media_pontos'] <= 2199),\n    (df['media_pontos'] <= 2399),\n    (df['media_pontos'] >= 2400),\n]\n\nchoices = ['Class J', 'Class I', 'Class H', 'Class G',  'Class F',  'Class E',  'Class D',  \n           'Class C', 'Class B',  'Class A', 'Expert','National master', 'Senior master']\n\ndf['classe'] = np.select(conditions, choices)","e2df63cf":"status_vitoria = {\n    'draw': 'Empate', \n    'resign': 'Desistencia',\n    'outoftime':'TempoEsgotado',\n    'mate' : 'Mate'\n}\ndf['victory_status'] = df['victory_status'].replace(status_vitoria)\ndf['victory_status'].unique()","a799abb0":"ganhador= {\n    'draw': 'Empate', \n    'black': 'Preto',\n    'white':'branco',\n}\ndf['winner'] = df['winner'].replace(ganhador)\ndf['winner'].unique()","c2df5cd7":"df['primeiraJogada_branco'] = df['moves'].str.split(\" \").str[0]\ndf['primeiraJogada_preto'] = df['moves'].str.split(\" \").str[1]","02f2b986":"def contarResultadoPartida(df):\n    resultadoPartida = df.groupby(['classe','victory_status']).agg({'rated': 'count'}).reset_index()\n    resultadoPartida.columns = ['Classe','Resultado', 'Quantidade']\n    return resultadoPartida\n    \nresultadoPartidaDf = contarResultadoPartida(df)\n\nfig = px.bar(resultadoPartidaDf, x='Classe',y='Quantidade',color='Resultado')\nfig.show()","5bff70de":"expertDf = df[df['classe'] == 'Expert']\nclasseEDf = df[df['classe'] == 'Class E']\n\nresultadoPartidaExpert = contarResultadoPartida(expertDf)\n\nresultadoPartidaClasseE = contarResultadoPartida(classeEDf)","b06b8468":"fig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(\n    go.Pie(labels=resultadoPartidaExpert['Resultado'], values=resultadoPartidaExpert['Quantidade']),\n    row=1, col=1)\n\nfig.add_trace(\n    go.Pie(labels=resultadoPartidaClasseE['Resultado'], values=resultadoPartidaClasseE['Quantidade']),\n    row=1, col=2)\n\nfig.update_traces(textposition='inside', hole=.4, hoverinfo=\"label+percent\")\nfig.update_layout(\n    title_text=\"Resultados de partidas de Expert e classe E\",\n    annotations=[dict(text='Expert', x=0.18, y=0.5, font_size=15, showarrow=False),\n                 dict(text='Classe E', x=0.83, y=0.5, font_size=15, showarrow=False)])\nfig.show()","1ee68a4e":"def contarPrimeiraJogada(df,colunaPrimeiraJogada):\n    primeiraJogadaDf = df.groupby([colunaPrimeiraJogada]).agg({'rated': 'count'}).reset_index()\n    primeiraJogadaDf.columns = ['Jogada', 'Quantidade']\n    primeiraJogadaDf = primeiraJogadaDf.sort_values(by=['Quantidade'], ascending=False).head(5)\n    return primeiraJogadaDf\n    \nprimeiraJogadaBrancoExpert = contarPrimeiraJogada(expertDf,'primeiraJogada_branco')\nprimeiraJogadaBrancoClasseE = contarPrimeiraJogada(classeEDf,'primeiraJogada_branco')","138c5570":"sns.set_style('whitegrid')\nfont = {'size': 17}\nmtl.rc('font', **font)\n\nfig, axes = plt.subplots(1, 2, figsize=(17, 6), sharey=True)\nfig.suptitle('Primeira jogada das pe\u00e7as brancas',fontsize=27)\n\nsns.barplot(ax=axes[0], x=primeiraJogadaBrancoExpert['Jogada'], y=primeiraJogadaBrancoExpert['Quantidade'])\naxes[0].set_title('Experts')\n\nsns.barplot(ax=axes[1], x=primeiraJogadaBrancoClasseE['Jogada'], y=primeiraJogadaBrancoClasseE['Quantidade'])\naxes[1].set_title('Classe E')","a772e5ac":"primeiraJogadaPretoExpert = contarPrimeiraJogada(expertDf,'primeiraJogada_preto')\nprimeiraJogadaPretoClasseE = contarPrimeiraJogada(classeEDf,'primeiraJogada_preto')","6a2406df":"fig, axes = plt.subplots(1, 2, figsize=(17, 6), sharey=True)\nfig.suptitle('Primeira jogada das pe\u00e7as pretas',fontsize=25)\n\nsns.barplot(ax=axes[0], x=primeiraJogadaPretoExpert['Jogada'], y=primeiraJogadaPretoExpert['Quantidade'])\naxes[0].set_title('Experts')\n\nsns.barplot(ax=axes[1], x=primeiraJogadaPretoClasseE['Jogada'], y=primeiraJogadaPretoClasseE['Quantidade'])\naxes[1].set_title('Classe E')","7077a1fd":"def gerarTaxaDeVitoria(df):\n    taxaDeVitoria = df.groupby(['winner']).agg({'rated': 'count'}).reset_index()\n    taxaDeVitoria.columns = ['ganhador', 'quantidade']\n    taxaDeVitoria = taxaDeVitoria.drop(0)\n    return taxaDeVitoria\n    \ntaxaVitoriaExpert = gerarTaxaDeVitoria(expertDf)\ntaxaVitoriaClasseE = gerarTaxaDeVitoria(classeEDf)","d933bed9":"fig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(\n    go.Pie(labels=taxaVitoriaExpert['ganhador'], values=taxaVitoriaExpert['quantidade']),\n    row=1, col=1)\n\nfig.add_trace(\n    go.Pie(labels=taxaVitoriaClasseE['ganhador'], values=taxaVitoriaClasseE['quantidade']),\n    row=1, col=2)\n\nfig.update_traces(textposition='inside', hole=.4, hoverinfo=\"label+percent\")\nfig.update_layout(\n    title_text=\"Taxa de vitoria por cores\",\n    annotations=[dict(text='Expert', x=0.19, y=0.5, font_size=12, showarrow=False),\n                 dict(text='Classe E', x=0.82, y=0.5, font_size=12, showarrow=False)])\nfig.show()","4452693e":"def calcularAberturasMaisUsadas(df):\n    aberturasMaisUsadas = df.groupby(['abertura']).agg({'rated': 'count'}).reset_index()\n    aberturasMaisUsadas.columns = ['Abertura', 'Quantidade']\n    aberturasMaisUsadas = aberturasMaisUsadas.sort_values(by=['Quantidade'], ascending=False).head(10)\n    return aberturasMaisUsadas\n\naberturasMaisUsadasExpert = calcularAberturasMaisUsadas(expertDf)\naberturasMaisUsadasClasseE = calcularAberturasMaisUsadas(classeEDf)","9ca3c0b6":"fig = px.bar(aberturasMaisUsadasExpert, y='Quantidade', x='Abertura',title='Aberturas mais usadas por Experts')\nfig.show()","8a3bf242":"fig = px.bar(aberturasMaisUsadasClasseE, y='Quantidade', x='Abertura',title='Aberturas mais usadas por classes E')\nfig.show()","0c8118e9":"## Taxa de vit\u00f3ria","4a0c8cf2":"### M\u00e9dia\n- m\u00e9dia de pontos dos jogadores na partida","00f94999":"## Novas colunas","15335bd0":"## Resultado das partidas ","6b18a0a3":"### Preto","3aef50ef":"### Traduzir as tabela","b7cf9d16":"# An\u00e1lise de dados - Xadrez\n\n---\n\n# Dados\n\n- **id**;\n- **Rated**: partida competitiva (V\/F);\n- **created_at**: Hor\u00e1rio de in\u00edcio;\n- **last_move_at**: Hor\u00e1rio de t\u00e9rmino;\n- **turns**: N\u00famero de rodadas;\n- **victory_status**: Resultado da partida;\n- **Winner**: Ganhador;\n- **increment_code**: Tempo adicional;\n- **white_id** : id do branco;\n- **white_rating**: Pontua\u00e7\u00e3o do Branco;\n- **black_id**: id do preto;\n- **black_rating**: Pontua\u00e7\u00e3o do preto;\n- **moves**: Movimentos em formato de anota\u00e7\u00e3o de xadrez;\n- **opening_eco** : C\u00f3digo preestabelecido para cada abertura;\n- **opening_name**: Nome da abertura;\n- **opening_ply**: N\u00famero de jogadas na fase de abertura; ","ae2d2e45":"### Primeira Jogada","7f5c58a5":"### Colunas desnecess\u00e1rias\n- As colunas de id n\u00e3o ser\u00e3o uteis nessa an\u00e1lise, pois n\u00e3o ha necessidade de saber quem \u00e9 o jogador.\n- 'last_move_at', 'increment_code' e 'opening_ply' n\u00e3o s\u00e3o desnecess\u00e1rias para esta an\u00e1lise.","1a591641":"#### Status de vitoria","9beaf947":"### Branco","8236e1d4":"### Aberturas","70d2001d":"## Primeiro movimento","d4f71744":"# Limpeza de dados","b2bd948d":"### Categoria\n- Separa os jogadores com base na pontua\u00e7\u00e3o\n- Essas classes foram retiradas do site oficial do FIDE (Federa\u00e7\u00e3o Internacional de Xadrez)","6a7f9758":"- Visto que a \"classe E\" e \"Expert\" possuem uma quantidade de partidas equivalentes, e os jogadores possuem um n\u00edvel de performance bem diferente, essas classes ser\u00e3o usadas para an\u00e1lises comparativas.","71ff3aef":"## Abertura","341952e9":"#### Ganhador","7e13d194":"# An\u00e1lise de dados"}}