{"cell_type":{"b0cc0396":"code","957e07cc":"code","5c5f43e7":"code","4d401a04":"code","cab07793":"code","3ea317b6":"code","fdcccb2b":"code","55b5faf1":"code","ef220242":"code","688f160b":"code","4b83728c":"code","2bbb5d55":"code","c23e87ef":"code","5c18700f":"code","04809871":"code","ffd72d2b":"code","75b25644":"code","93769cdc":"code","9e34c17b":"code","098b8544":"code","ee82c0c1":"code","5d206e62":"code","3be5c51d":"code","78861087":"code","e7b6afb9":"code","f427e98f":"code","8550a64f":"code","bbe7dcf4":"code","e24f80c4":"code","ea246333":"code","65a49fb9":"code","bc843f92":"code","3311cce8":"code","62024bfb":"code","3b685ed9":"code","229dce13":"code","fa34f8cd":"code","d040be4c":"code","78278f01":"code","cbbf5edd":"code","d1f8c53b":"code","914240fb":"code","eb8b600a":"code","5686dfa9":"code","0933ca71":"code","4e499f01":"code","4ed85122":"code","3f5ad3b4":"code","6ba20620":"code","082bd28d":"code","1b8e9bbf":"code","cc637078":"code","d73aa32f":"code","58f314fb":"code","862fcb72":"code","2c3486e5":"code","c1aa294c":"code","0d6ab38d":"code","b86e9019":"code","1763b99f":"code","9522bf58":"code","cb49406a":"code","2c2f6766":"code","01e87a9d":"code","35c6f3ab":"code","9723662e":"code","69615438":"code","37609c89":"code","98a3df7b":"code","4cd6a599":"code","b88da2dc":"code","a4ebc0c6":"code","385ba95a":"code","8304158b":"code","c41657cb":"code","040cb79e":"code","96088932":"code","3abc8d06":"code","cce2aa59":"code","73b87ee8":"code","448e2a2a":"code","229957b9":"code","ac135c10":"code","e826d8fa":"code","5a32eac9":"code","984283a9":"code","b96e5a9a":"code","3fb4f480":"code","31041bf3":"code","835fedaf":"code","cd8496b3":"code","e1b4e36a":"markdown","0f561d9d":"markdown","cba99d8d":"markdown","67178672":"markdown","ffe0136c":"markdown","0b4b57fb":"markdown","ad6ddf39":"markdown","785beb5b":"markdown","7ca8b9ce":"markdown","12b98c39":"markdown","8b33825c":"markdown","4d74a8d8":"markdown","8abcccab":"markdown","21e4e43a":"markdown","a3faaf2c":"markdown","c02dc851":"markdown","1e235eb3":"markdown","929b5203":"markdown","dc1e04e7":"markdown","bbb87a89":"markdown","a88878ab":"markdown","7134bef5":"markdown","82fc4b17":"markdown"},"source":{"b0cc0396":"import pandas_datareader.data as web\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport datetime\n%matplotlib inline\nfrom pandas.plotting import scatter_matrix\nimport seaborn as sns\n","957e07cc":"start=datetime.datetime(2016,1,1)\nend=datetime.datetime(2021,1,1)","5c5f43e7":"amazon=web.DataReader(\"AMZN\",\"yahoo\",start,end)\ngoogle=web.DataReader(\"GOOG\",\"yahoo\",start,end)\nfacebook=web.DataReader(\"fb\",\"yahoo\",start,end)","4d401a04":"amazon.head()\ngoogle.head()\nfacebook.head()","cab07793":"amazon.isna().sum()","3ea317b6":"google.isna().sum()","fdcccb2b":"facebook.isna().sum()","55b5faf1":"facebook.info()\namazon.info()\ngoogle.info()","ef220242":"facebook.to_csv(\"fb_stocks.csv\")\namazon.to_csv(\"amazon_stocks.csv\")\ngoogle.to_csv(\"google_stocks.csv\")","688f160b":"facebook[facebook['Close']==facebook['Close'].min()]","4b83728c":"amazon[amazon['Close']==amazon['Close'].min()]","2bbb5d55":"google[google['Close']==google['Close'].min()]\n","c23e87ef":"facebook=facebook.reset_index()\namazon=amazon.reset_index()\ngoogle=google.reset_index()\nfacebook.head()","5c18700f":"facebook['month'] = pd.DatetimeIndex(facebook['Date']).month \ngoogle['month'] = pd.DatetimeIndex(google['Date']).month \namazon['month'] = pd.DatetimeIndex(amazon['Date']).month \n","04809871":"amazon_monthly_closing=amazon.groupby(\"month\").sum()['Close'].reset_index()\nplt.title(\"Amazon Monthly Closing\")\nplt.bar(amazon_monthly_closing['month'],amazon_monthly_closing['Close'])\nplt.xticks(amazon_monthly_closing['month'])\nplt.xlabel(\"Months\")\nplt.ylabel(\"Closing $\")\nplt.show()","ffd72d2b":"facebook_monthly_closing=facebook.groupby(\"month\").sum()['Close'].reset_index()\nplt.title(\"Facebook Monthly Closing\")\nplt.bar(facebook_monthly_closing['month'],facebook_monthly_closing['Close'])\nplt.xticks(facebook_monthly_closing['month'])\nplt.xlabel(\"Months\")\nplt.ylabel(\"Closing $\")\nplt.show()","75b25644":"google_monthly_closing=google.groupby(\"month\").sum()['Close'].reset_index()\nplt.title(\"Google Monthly Closing\")\nplt.bar(google_monthly_closing['month'],google_monthly_closing['Close'])\nplt.xticks(google_monthly_closing['month'])\nplt.xlabel(\"Months\")\nplt.ylabel(\"Closing $\")\nplt.show()","93769cdc":"google.set_index(\"Date\")\nplt.plot(google['Date'],google['Close'],label =\"Closing\")\nplt.plot(google['Date'],google['Open'],label =\"Open\")\nplt.plot(google['Date'],google['High'],label =\"High\")\nplt.plot(google['Date'],google['Low'],label =\"Low\")\n\nplt.legend()\nplt.show()","9e34c17b":"google['Open'].iloc[1000:1400].plot","098b8544":"plt.figure(figsize=(17,5))\nplt.plot(google['Date'],google['Volume'])\nplt.ylabel(\"Stock Price\")\nplt.grid()\nplt.show()","ee82c0c1":"plt.plot(facebook['Date'],facebook['Close'],label =\"Closing\")\nplt.plot(facebook['Date'],facebook['Open'],label =\"Open\")\nplt.plot(facebook['Date'],facebook['High'],label =\"High\")\nplt.plot(facebook['Date'],facebook['Low'],label =\"Low\")\n\nplt.legend()\nplt.show()","5d206e62":"plt.figure(figsize=(17,5))\nplt.plot(facebook['Date'],facebook['Volume'])\nplt.ylabel(\"Stock Price\")\nplt.grid()\nplt.show()","3be5c51d":"plt.plot(amazon['Date'],amazon['Close'],label =\"Closing\")\nplt.plot(amazon['Date'],amazon['Open'],label =\"Open\")\nplt.plot(amazon['Date'],amazon['High'],label =\"High\")\nplt.plot(amazon['Date'],amazon['Low'],label =\"Low\")\n\nplt.legend()\nplt.show()","78861087":"plt.figure(figsize=(17,5))\nplt.plot(amazon['Date'],amazon['Volume'])\nplt.ylabel(\"Stock Price\")\nplt.grid()\nplt.show()","e7b6afb9":"google['Total Traded']=google['Open']*google['Volume']\nfacebook['Total Traded']=facebook['Open']*facebook['Volume']\namazon['Total Traded']=amazon['Open']*amazon['Volume']","f427e98f":"google.set_index(\"Date\",inplace=True)\nfacebook.set_index(\"Date\",inplace=True)\namazon.set_index(\"Date\",inplace=True)","8550a64f":"google['Total Traded'].plot(label='google',figsize=(15,7))\namazon['Total Traded'].plot(label='amazon',figsize=(15,7))\nfacebook['Total Traded'].plot(label='facebook',figsize=(15,7))\nplt.legend()\nplt.grid()","bbe7dcf4":"amazon['Total Traded'].iloc[1000:1300].plot(label=\"amazon\",figsize=(15,7))\nfacebook['Total Traded'].iloc[1000:1300].plot(label=\"facebook\")\ngoogle['Total Traded'].iloc[1000:1300].plot(label=\"google\")\nplt.legend()\nplt.grid()","e24f80c4":"open_share=pd.concat([google['Open'],amazon['Open'],facebook['Open']],axis=1)\nopen_share.columns=['Google Open', 'Amazon Open','Facebook Open']","ea246333":"scatter_matrix(open_share,figsize=(8,8),hist_kwds={'bins':50})","65a49fb9":"close_share=pd.concat([google['Close'],amazon['Close'],facebook['Close']],axis=1)\nclose_share.columns=['Google Close', 'Amazon Close','Facebook Close']","bc843f92":"sns.pairplot(close_share, kind='reg')","3311cce8":"## Or check the volatility of any stock \nfacebook['return']=(facebook['Close']\/facebook['Close'].shift(1))-1\namazon['return']=(amazon['Close']\/amazon['Close'].shift(1))-1\ngoogle['return']=(google['Close']\/google['Close'].shift(1))-1","62024bfb":"plt.title(\"DAily Return\")\nfacebook['return'].plot(label='Facebook Return',figsize=(15,8))\nplt.legend()\nplt.grid()\nplt.show()","3b685ed9":"plt.title(\"DAily Return\")\ngoogle['return'].plot(label='Google Return',figsize=(15,8),color='purple')\nplt.legend()\nplt.grid()\nplt.show()","229dce13":"plt.title(\"DAily Return\")\namazon['return'].plot(label='Amazon Return',figsize=(15,8),color=\"green\")\nplt.legend()\nplt.grid()\nplt.show()","fa34f8cd":"facebook['return'].hist(bins=100, label=\"facebook\",alpha=0.5,figsize=(15,8))\namazon['return'].hist(bins=100, label=\"amazon\",alpha=0.5)\ngoogle['return'].hist(bins=100, label=\"google\",alpha=0.5)\nplt.legend()","d040be4c":"## TO normalize the data you should use KDE = kernal distribution estimation\nfacebook['return'].plot(kind='kde',label='Facebook',figsize=(12,8))\namazon['return'].plot(kind='kde',label='Amazon',figsize=(12,8))\ngoogle['return'].plot(kind='kde',label='google',figsize=(12,8))\nplt.legend()\nplt.grid()","78278f01":"box=pd.concat([facebook['return'],google['return'],amazon['return']],axis=1)\nbox.columns=['Facebook Return',\"Google Return\", \"Amazon Return\"]\nbox.head()","cbbf5edd":"scatter_matrix(box,figsize=(8,8),hist_kwds={'bins':50})","d1f8c53b":"facebook['Cumulative Return']=(1+facebook['return']).cumprod()\ngoogle['Cumulative Return']=(1+google['return']).cumprod()\namazon['Cumulative Return']=(1+amazon['return']).cumprod()","914240fb":"plt.title(\"Cumulative Return Vs Time\")\nfacebook['Cumulative Return'].plot(label=\"Facebook\",figsize=(15,7))\ngoogle['Cumulative Return'].plot(label=\"Google\")\namazon['Cumulative Return'].plot(label=\"Amazon\")\nplt.legend()\nplt.grid()","eb8b600a":"google.info()\nfacebook.info()\namazon.info()","5686dfa9":"print('Google')\ngoogle.describe()","0933ca71":"print('Facebook')\nfacebook.describe()","4e499f01":"print('Amazon')\namazon.describe()","4ed85122":"from plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\nprint(__version__)","3f5ad3b4":"#libraries for ploting Graph\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import plot\nimport numpy as np\n\n#for offline plotting\ninit_notebook_mode(connected=True)","6ba20620":"#Resettin g all the dataset index from date to numeric form\namazon=amazon.reset_index()\ngoogle=google.reset_index()\nfacebook=facebook.reset_index()\n#Setting the layout of all the company for ploting\namazon_layout=go.Layout(\n    title='Stock Price of Amazon',\n    xaxis=dict(\n        title='Date',\n        titlefont=dict(\n        family='Courier New, monospace',\n        size=18,\n        color='#7f7f7f'\n        )\n    ),\n    yaxis=dict(\n        title='Price',\n        titlefont=dict(\n        family='Courier New, monospace',\n        size=18,\n        color='#7f7f7f'\n        )\n    )\n)\ngoogle_layout=go.Layout(\n    title='Stock Price of Google',\n    xaxis=dict(\n        title='Date',\n        titlefont=dict(\n        family='Courier New, monospace',\n        size=18,\n        color='#7f7f7f'\n        )\n    ),\n    yaxis=dict(\n        title='Price',\n        titlefont=dict(\n        family='Courier New, monospace',\n        size=18,\n        color='#7f7f7f'\n        )\n    )\n)\nfacebook_layout=go.Layout(\n    title='Stock Price of Facebook',\n    xaxis=dict(\n        title='Date',\n        titlefont=dict(\n        family='Courier New, monospace',\n        size=18,\n        color='#7f7f7f'\n        )\n    ),\n    yaxis=dict(\n        title='Price',\n        titlefont=dict(\n        family='Courier New, monospace',\n        size=18,\n        color='#7f7f7f'\n        )\n    )\n)\n","082bd28d":"#ploting amazon data using the layout\namazon_data=[{'x':amazon['Date'],'y':amazon['Close']}]\namazon_plot=go.Figure(data=amazon_data,layout=amazon_layout)\niplot(amazon_plot)","1b8e9bbf":"#ploting google data using the layout\ngoogle_data=[{'x':google['Date'],'y':google['Close']}]\ngoogle_plot=go.Figure(data=google_data,layout=google_layout)\niplot(google_plot)","cc637078":"#ploting facebook data using the layout\nfacebook_data=[{'x':facebook['Date'],'y':facebook['Close']}]\nfacebook_plot=go.Figure(data=facebook_data,layout=facebook_layout)\niplot(facebook_plot)","d73aa32f":"#Building the regression model\nfrom sklearn.model_selection import train_test_split\n#for prepocessing\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\n\n#For model evaluation\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn.metrics import r2_score  ","58f314fb":"#Splitting the dataset into train and test sets for linear regression\n#for amazon\namazon_X =np.array(amazon.index).reshape(-1,1)\namazon_Y =amazon['Close']\n#for training we are taking 80%(0.8) of the whole dataset and assigning a random state of 101\namazon_X_train,amazon_X_test,amazon_Y_train,amazon_Y_test=train_test_split(amazon_X,amazon_Y,test_size=0.8,random_state=101)","862fcb72":"#Splitting the dataset into train and test sets for linear regression\n#for google\ngoogle_X =np.array(google.index).reshape(-1,1)\ngoogle_Y =google['Close']\n#for training we are taking 80%(0.8) of the whole dataset and assigning a random state of 101\ngoogle_X_train,google_X_test,google_Y_train,google_Y_test=train_test_split(google_X,google_Y,test_size=0.8,random_state=101)","2c3486e5":"#Splitting the dataset into train and test sets for linear regression\n#for facebook\nfacebook_X =np.array(facebook.index).reshape(-1,1)\nfacebook_Y =facebook['Close']\n#for training we are taking 80%(0.8) of the whole dataset and assigning a random state of 101\nfacebook_X_train,facebook_X_test,facebook_Y_train,facebook_Y_test=train_test_split(facebook_X,facebook_Y,test_size=0.8,random_state=101)","c1aa294c":"#feature scaling \namazon_scaler=StandardScaler().fit(amazon_X_train)\ngoogle_scaler=StandardScaler().fit(google_X_train)\nfacebook_scaler=StandardScaler().fit(facebook_X_train)\n#standardize scaler is mandatory for any machine learning \n#they tend to behave badly if the dataset are not distributed properly\n","0d6ab38d":"#importing linear Regression library to perform modeling\nfrom sklearn.linear_model import LinearRegression","b86e9019":"#create a linear model\n#provide x and y train value for the linear regression model\namazon_lm = LinearRegression()\namazon_lm.fit(amazon_X_train,amazon_Y_train)\n\ngoogle_lm = LinearRegression()\ngoogle_lm.fit(google_X_train,google_Y_train)\n\nfacebook_lm = LinearRegression()\nfacebook_lm.fit(facebook_X_train,facebook_Y_train)","1763b99f":"#plot actual and predicted values for train dataset using scatter plot\n#actual values\namazon_trace0 = go.Scatter(\n    x=amazon_X_train.T[0],\n    y=amazon_Y_train,\n    mode='markers',\n    name='Actual'\n)\ngoogle_trace0 = go.Scatter(\n    x=google_X_train.T[0],\n    y=google_Y_train,\n    mode='markers',\n    name='Actual'\n)\nfacebook_trace0 = go.Scatter(\n    x=facebook_X_train.T[0],\n    y=facebook_Y_train,\n    mode='markers',\n    name='Actual'\n)\n#predicted Values\namazon_trace1 = go.Scatter(\n    x=amazon_X_train.T[0],\n    y=amazon_lm.predict(amazon_X_train).T,\n    mode='lines',\n    name='Predicted'\n)\ngoogle_trace1 = go.Scatter(\n    x=google_X_train.T[0],\n    y=google_lm.predict(google_X_train).T,\n    mode='lines',\n    name='Predicted'\n)\nfacebook_trace1 = go.Scatter(\n    x=facebook_X_train.T[0],\n    y=facebook_lm.predict(facebook_X_train).T,\n    mode='lines',\n    name='Predicted'\n)\n#combining the actual and predicted value in a variable\n#for amazon\namazon_data=[amazon_trace0,amazon_trace1]\namazon_layout.xaxis.title.text='Day'\namazon_plot2=go.Figure(data=amazon_data,layout=amazon_layout)\n#for google\ngoogle_data=[google_trace0,google_trace1]\ngoogle_layout.xaxis.title.text='Day'\ngoogle_plot2=go.Figure(data=google_data,layout=google_layout)\n#for facebook\nfacebook_data=[facebook_trace0,facebook_trace1]\nfacebook_layout.xaxis.title.text='Day'\nfacebook_plot2=go.Figure(data=facebook_data,layout=facebook_layout)","9522bf58":"iplot(amazon_plot2)\niplot(google_plot2)\niplot(facebook_plot2)","cb49406a":"#Calculate scores for the model evaluation\n# we will find the error using r2 error and the mean squar error on our trained model\nprint(' Amazon Predicted scores'.center(50))\namazon_scores=f'''\n{'Metric'.ljust(10)} {'Train'.center(20)} {'Test'.center(20)}\n{'r2_score'.ljust(10)} {r2_score(amazon_Y_train,amazon_lm.predict(amazon_X_train))} \\t {r2_score(amazon_Y_test,amazon_lm.predict(amazon_X_test))}\n{'MSE'.ljust(10)} {mse(amazon_Y_train,amazon_lm.predict(amazon_X_train))} \\t {mse(amazon_Y_test,amazon_lm.predict(amazon_X_test))}\n'''\nprint(amazon_scores)\n\nprint(' Google Predicted scores'.center(50))\ngoogle_scores=f'''\n{'Metric'.ljust(10)} {'Train'.center(20)} {'Test'.center(20)}\n{'r2_score'.ljust(10)} {r2_score(google_Y_train,google_lm.predict(google_X_train))} \\t {r2_score(google_Y_test,google_lm.predict(google_X_test))}\n{'MSE'.ljust(10)} {mse(google_Y_train,google_lm.predict(google_X_train))} \\t {mse(google_Y_test,google_lm.predict(google_X_test))}\n'''\nprint(google_scores)\n\nprint(' Facebook Predicted scores'.center(50))\nfacebook_scores=f'''\n{'Metric'.ljust(10)} {'Train'.center(20)} {'Test'.center(20)}\n{'r2_score'.ljust(10)} {r2_score(facebook_Y_train,facebook_lm.predict(facebook_X_train))} \\t {r2_score(facebook_Y_test,facebook_lm.predict(facebook_X_test))}\n{'MSE'.ljust(10)} {mse(facebook_Y_train,facebook_lm.predict(facebook_X_train))} \\t {mse(facebook_Y_test,facebook_lm.predict(facebook_X_test))}\n'''\nprint(facebook_scores)","2c2f6766":"gogle_close=google.reset_index()['Close']\namzn_close=amazon.reset_index()['Close']\nfacebook_close=facebook.reset_index()['Close']","01e87a9d":"gogle_close.isna().sum()","35c6f3ab":"gogle_closing=MinMaxScaler(feature_range=(0,1))\ngogle_close=gogle_closing.fit_transform(np.array(gogle_close).reshape(-1,1))","9723662e":"gogle_close # you see the differnce before and after transformation. You can see that the values are now \n# in between 0 and 1. It is very necessary step to normalize your data to applying any model.","69615438":"gogle_training_size=int(len(gogle_close)*0.65) # if you take 65% of data into training and remaining 35% into testing\ngogle_test_size=len(gogle_close)-gogle_training_size\ngogle_train_data,gogle_test_data=gogle_close[0:gogle_training_size,:],gogle_close[gogle_training_size:len(gogle_close),:1]","37609c89":"def create_dataset(dataset,time_step=1):\n    X_data_gogle,Y_data_gogle=[],[]\n    for i in range(len(dataset)-time_step-1):\n        a= dataset[i:(i+time_step),0]\n        X_data_gogle.append(a)\n        Y_data_gogle.append(dataset[i+time_step,0])\n    return np.array(X_data_gogle),np.array(Y_data_gogle)    ","98a3df7b":"time_step=100\ngogle_X_train,gogle_Y_train=create_dataset(gogle_train_data,time_step)\ngogle_X_test,gogle_Y_test=create_dataset(gogle_test_data,time_step)","4cd6a599":"print(gogle_X_test.shape)\nprint(gogle_X_train.shape)","b88da2dc":"# Now reshape your data into 3 dimensional because it is neccessary to make your data 3 dimensional\ngogle_X_train=gogle_X_train.reshape(gogle_X_train.shape[0],gogle_X_train.shape[1],1)\ngogle_X_test=gogle_X_test.reshape(gogle_X_test.shape[0],gogle_X_test.shape[1],1)","a4ebc0c6":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM","385ba95a":"model=Sequential()\nmodel.add(LSTM(50,return_sequences=True,input_shape=(100,1)))\nmodel.add(LSTM(50,return_sequences=True))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\nmodel.compile(loss=\"mean_squared_error\",optimizer='adam')\n","8304158b":"model.fit(gogle_X_train,gogle_Y_train,validation_data=(gogle_X_test,gogle_Y_test),epochs=100,batch_size=64,verbose=1)","c41657cb":"import tensorflow as tf","040cb79e":"gogle_train_predict=model.predict(gogle_X_train)\ngogle_test_predict=model.predict(gogle_X_test)","96088932":"gogle_train_predict=gogle_closing.inverse_transform(gogle_train_predict)\ngogle_test_predict=gogle_closing.inverse_transform(gogle_test_predict)\n","3abc8d06":"import math\n\nmath.sqrt(mse(gogle_Y_train,gogle_train_predict))","cce2aa59":"math.sqrt(mse(gogle_Y_test,gogle_test_predict))","73b87ee8":"look_back=100\ntrainPredictPlot=np.empty_like(gogle_close)\ntrainPredictPlot[:, :]=np.nan\ntrainPredictPlot[look_back:len(gogle_train_predict)+look_back,:]=gogle_train_predict\ntestPredictPlot=np.empty_like(gogle_close)\ntestPredictPlot[:, :]=np.nan\ntestPredictPlot[len(gogle_train_predict)+(look_back*2)+1:len(gogle_close)-1,:]=gogle_test_predict\nplt.figure(figsize=(15,8))\nplt.title(\"Google Stocks Prediction\")\nplt.plot(gogle_closing.inverse_transform(gogle_close))\nplt.plot(trainPredictPlot,label=\"Train Predict\", )\nplt.plot(testPredictPlot,label=\"Test Predict\")\nplt.legend()\nplt.grid()\nplt.show()\n\n\n","448e2a2a":"amzn_closing=MinMaxScaler(feature_range=(0,1))\namzn_close=amzn_closing.fit_transform(np.array(amzn_close).reshape(-1,1))","229957b9":"amzn_training_size=int(len(amzn_close)*0.65) # if you take 65% of data into training and remaining 35% into testing\namzn_test_size=len(amzn_close)-amzn_training_size\namzn_train_data,amzn_test_data=amzn_close[0:amzn_training_size,:],amzn_close[amzn_training_size:len(amzn_close),:1]","ac135c10":"def amzn_create_dataset(dataset,time_step=1):\n    X_data_amzn,Y_data_amzn=[],[]\n    for i in range(len(dataset)-time_step-1):\n        a= dataset[i:(i+time_step),0]\n        X_data_amzn.append(a)\n        Y_data_amzn.append(dataset[i+time_step,0])\n    return np.array(X_data_amzn),np.array(Y_data_amzn)    ","e826d8fa":"time_step=100\namzn_X_train,amzn_Y_train=amzn_create_dataset(amzn_train_data,time_step)\namzn_X_test,amzn_Y_test=amzn_create_dataset(amzn_test_data,time_step)","5a32eac9":"amzn_X_train=amzn_X_train.reshape(amzn_X_train.shape[0],amzn_X_train.shape[1],1)\namzn_X_test=amzn_X_test.reshape(amzn_X_test.shape[0],amzn_X_test.shape[1],1)","984283a9":"model.fit(amzn_X_train,amzn_Y_train,validation_data=(amzn_X_test,amzn_Y_test),epochs=100,batch_size=64,verbose=1)","b96e5a9a":"amzn_train_predict=model.predict(amzn_X_train)\namzn_test_predict=model.predict(amzn_X_test)\n","3fb4f480":"amzn_train_predict=amzn_closing.inverse_transform(amzn_train_predict)\namzn_test_predict=amzn_closing.inverse_transform(amzn_test_predict)\n","31041bf3":"import math\n\nmath.sqrt(mse(amzn_Y_train,amzn_train_predict))","835fedaf":"math.sqrt(mse(amzn_Y_test,amzn_test_predict))","cd8496b3":"look_back=100\ntrainPredictPlot=np.empty_like(amzn_close)\ntrainPredictPlot[:, :]=np.nan\ntrainPredictPlot[look_back:len(amzn_train_predict)+look_back,:]=amzn_train_predict\ntestPredictPlot=np.empty_like(amzn_close)\ntestPredictPlot[:, :]=np.nan\ntestPredictPlot[len(amzn_train_predict)+(look_back*2)+1:len(amzn_close)-1,:]=amzn_test_predict\nplt.figure(figsize=(15,8))\nplt.title(\"Amazon Stocks Prediction\")\nplt.plot(amzn_closing.inverse_transform(amzn_close))\nplt.plot(trainPredictPlot,label=\"Train Predict\", )\nplt.plot(testPredictPlot,label=\"Test Predict\")\nplt.legend()\nplt.grid()\nplt.show()\n\n\n","e1b4e36a":"# Daily Percentage Change","0f561d9d":"# Test Predict","cba99d8d":"# Amazon Stocks Prediction","67178672":"# Facebook Monthly Closing","ffe0136c":"# Amazon Opening and Closing Shares","0b4b57fb":"# Data Exploration","ad6ddf39":"# Total Traded","785beb5b":"## Dont be wonder about that spikes of facebook is high in histogram. and here it is down. It shows density and KDE is normalized. So the area of all three stocks are constant ","7ca8b9ce":"## As you see, facebook and google show a possitive good relation between each other","12b98c39":"# Google Monthly Closing","8b33825c":"# Correlation of Close stocks","4d74a8d8":"# Google Open and Closing Shares","8abcccab":"# Cumulative Return ","21e4e43a":"# Lowest close of all the stocks ?","a3faaf2c":"# Linear Regression","c02dc851":"### we use cumulative return for capture the long term investment. if the cumulative return is greater than 1 you gain profit otherwise you lose it.","1e235eb3":"# Using LSTM For prediction","929b5203":"## Google Closing Stocks\n","dc1e04e7":"### Amazon is the most traded share during 2020, because in during lockdown most of people start their own buisness using Amazon FBA and Amazon PL","bbb87a89":"## Now Check The Relation by using correlation and scatter matrix ","a88878ab":"# Train Predict","7134bef5":"# Facebook Opening and Closing Shares","82fc4b17":"# Amazon Monthly Closing"}}