{"cell_type":{"36e6daee":"code","564c67dc":"code","aa3fbb28":"code","951dc3fd":"code","47de3f35":"code","f7961cd5":"code","f3cff51a":"code","9c10945b":"code","a602297a":"code","17ee66f3":"code","e708e217":"code","95f9d07d":"markdown"},"source":{"36e6daee":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport pickle\n\nprint(os.listdir(\"..\/input\/ieee-fraud-detection\"))\n\n# Any results you write to the current directory are saved as output.","564c67dc":"datadir = \"..\/input\/ieee-fraud-detection\"\ntrain_identity_df = pd.read_csv(os.path.join(datadir, 'train_identity.csv'))\ntrain_transaction_df = pd.read_csv(os.path.join(datadir, 'train_transaction.csv'))\n\nprint('Train Idenitity Shape:', train_identity_df.shape)\nprint('Train Transaction Shape:', train_transaction_df.shape)\n","aa3fbb28":"test_identity_df = pd.read_csv(os.path.join(datadir, 'test_identity.csv'))\ntest_transaction_df = pd.read_csv(os.path.join(datadir, 'test_transaction.csv'))\n\nprint('Test Identity Shape:', test_identity_df.shape)\nprint('Test Transaction Shape:', test_transaction_df.shape)","951dc3fd":"def mem_usage(pandas_obj):\n    if isinstance(pandas_obj,pd.DataFrame):\n        usage_b = pandas_obj.memory_usage(deep=True).sum()\n    else: # we assume if not a df it's a series\n        usage_b = pandas_obj.memory_usage(deep=True)\n    usage_mb = usage_b \/ 1024 ** 2 # convert bytes to megabytes\n    return \"{:03.2f} MB\".format(usage_mb)\n\ndef convert_type(df, column, source_type, target_type):\n    print('Memory Usage for ({},{}) Before:{}'.format(column, source_type, mem_usage(df[column])), end=' ')\n    df[column] = df[column].astype(target_type)\n    print('------->({},{}) After:{}'.format(column, target_type, mem_usage(df[column])))","47de3f35":"def reduce_memory(df):\n    print(\"Reduce_memory...\");\n    for col in df.columns:\n        col_type = df[col].dtype\n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            target_type = None\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    target_type = np.int8\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    target_type = np.int16\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    target_type = np.int32\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    target_type = np.int64\n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    target_type = np.float16\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    target_type = np.float32\n                else:\n                    target_type = np.float64\n            convert_type(df, col, col_type, target_type)\n        else:\n            # for object types\n            # check number of unique values\n            unique_values = df[col].nunique()\n            if unique_values \/ len(df[col]) < 0.5:\n                convert_type(df, col, col_type, 'category')\n    return df","f7961cd5":"def save_df_as_pickle(df, filename):\n    with open(filename, 'wb') as outfile:\n        pickle.dump(df, outfile)\n    statinfo = os.stat(filename)\n    print('{} file size:'.format(filename),statinfo.st_size \/ (1024 ** 2), 'MB')","f3cff51a":"print('Memory Usage Before:', mem_usage(train_identity_df))\ntrain_identity_df = reduce_memory(train_identity_df)\nprint('Memory Usage After:', mem_usage(train_identity_df))\nsave_df_as_pickle(train_identity_df, 'train_identity_df.pkl')","9c10945b":"print('Memory Usage Before:', mem_usage(train_transaction_df))\ntrain_transaction_df = reduce_memory(train_transaction_df)\nprint('Memory Usage After:', mem_usage(train_transaction_df))\nsave_df_as_pickle(train_transaction_df, 'train_transaction_df.pkl')","a602297a":"print('Memory Usage Before:', mem_usage(test_identity_df))\ntest_identity_df = reduce_memory(test_identity_df)\nprint('Memory Usage After:', mem_usage(test_identity_df))\nsave_df_as_pickle(test_identity_df, 'test_identity_df.pkl')","17ee66f3":"print('Memory Usage Before:', mem_usage(test_transaction_df))\ntest_transaction_df = reduce_memory(test_transaction_df)\nprint('Memory Usage After:', mem_usage(test_transaction_df))\nsave_df_as_pickle(test_transaction_df, 'test_transaction_df.pkl')","e708e217":"## verify files are present\nos.listdir()","95f9d07d":"# IEEE-CIS Fraud Detection\n\n\n## Use the output of this kernel of pickeled dataframe files for your fast experimentation"}}