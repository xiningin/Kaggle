{"cell_type":{"fdc0c084":"code","921bde91":"code","3a52b068":"code","e9195eb5":"code","8b53a160":"code","75ac1173":"code","179350cc":"code","8d0b9631":"code","a0434c9a":"code","f23d99ae":"code","940405ee":"code","58c1f0d8":"code","11f67da8":"code","ed52192f":"code","26624591":"code","d6c90572":"code","4ef23f29":"code","870a5804":"code","2265b74c":"code","1c07983c":"code","a3cc69fe":"code","26c5d182":"code","c468bd53":"code","04ddf4e7":"code","68788b44":"code","321f5de5":"code","3ad6ec49":"code","27942e57":"code","a54c7023":"code","50c94406":"code","8460872c":"code","1b7f4f0a":"code","05d71c53":"code","42e2f237":"code","c9f04fbe":"code","74cf5eee":"code","adc5cbd6":"code","7aaeb4a0":"code","46d04da8":"code","64b15564":"code","b96d24e5":"code","ba7b1e62":"code","7ccf07f6":"code","f00b0f32":"code","9c32158d":"code","24486e0b":"code","10bad26f":"code","736b1e76":"code","672cd349":"code","f798d78f":"markdown","9a1a36a4":"markdown","adb0b6af":"markdown","1a2e7040":"markdown","b3eceab4":"markdown","5172fb4f":"markdown","609ed43d":"markdown","6f58546a":"markdown","f2b8a0f0":"markdown","726895c7":"markdown","2c8ebc9c":"markdown","62e046ce":"markdown","c8f11e62":"markdown","a5fa9e31":"markdown","d41d1f4f":"markdown","d2effaf8":"markdown","3d616dbf":"markdown","25dd41ab":"markdown","9890e5ec":"markdown","ad0527b9":"markdown","218cfe67":"markdown","3d732092":"markdown","11c0c211":"markdown","c327cdbc":"markdown","19136b69":"markdown","4b5f37e5":"markdown"},"source":{"fdc0c084":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime as dt\nfrom matplotlib.ticker import PercentFormatter\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom yellowbrick.cluster import KElbowVisualizer\nfrom itertools import combinations\n\npd.options.mode.chained_assignment = None\n\nplt.rcParams[\"axes.facecolor\"] = \"#A2A2A2\"\nplt.rcParams[\"axes.grid\"] = 1","921bde91":"df = pd.read_csv(\"..\/input\/ecommerce-data\/data.csv\")\ndisplay(df.head())\nprint(df.shape)","3a52b068":"df.info()","e9195eb5":"df.isnull().sum()","8b53a160":"df[df.Description.isnull()]","75ac1173":"df[df.Description.isnull()].CustomerID.nunique()","179350cc":"df[df.Description.isnull()].UnitPrice.value_counts()","8d0b9631":"df = df[df.Description.notnull()]","a0434c9a":"df[df.CustomerID.isnull()]","f23d99ae":"print(\"We have {} observations.\".format(df.shape[0]))\n\ndf = df[df.CustomerID.notnull()]\n\nprint(\"We have {} observations after removing unknown customers.\".format(df.shape[0]))","940405ee":"df.isnull().sum()","58c1f0d8":"df[df.Description.str.len() < 5]","11f67da8":"df.InvoiceNo.value_counts()","ed52192f":"df[df[\"InvoiceNo\"].str.startswith(\"C\")]","26624591":"df[\"Cancelled\"] = df[\"InvoiceNo\"].apply(lambda x: 1 if x.startswith(\"C\") else 0)","d6c90572":"cancelled_invoiceNo = df[df.Cancelled == 1].InvoiceNo.tolist()\ncancelled_invoiceNo = [x[1:] for x in cancelled_invoiceNo]\n\ncancelled_invoiceNo[:5]","4ef23f29":"df[df[\"InvoiceNo\"].isin(cancelled_invoiceNo)]","870a5804":"df[df.InvoiceNo.str.len() != 6]","2265b74c":"df = df[df.Cancelled == 0]","1c07983c":"df[df.StockCode.str.contains(\"^[a-zA-Z]\")].StockCode.value_counts()","a3cc69fe":"df[df.StockCode.str.contains(\"^[a-zA-Z]\")].Description.value_counts()","26c5d182":"df[df.StockCode.str.len() > 5].StockCode.value_counts()","c468bd53":"df[df.StockCode.str.len() > 5].Description.value_counts()","04ddf4e7":"df =  df[~ df.StockCode.str.contains(\"^[a-zA-Z]\")]","68788b44":"df[\"Description\"] = df[\"Description\"].str.lower()","321f5de5":"df.groupby(\"StockCode\")[\"Description\"].nunique()[df.groupby(\"StockCode\")[\"Description\"].nunique() != 1]","3ad6ec49":"df[df.StockCode == \"16156L\"].Description.value_counts()","27942e57":"df[df.StockCode == \"17107D\"].Description.value_counts()","a54c7023":"df[df.StockCode == \"90014C\"].Description.value_counts()","50c94406":"df.CustomerID.value_counts()","8460872c":"customer_counts = df.CustomerID.value_counts().sort_values(ascending=False).head(25)\n\nfig, ax = plt.subplots(figsize = (10, 8))\n\nsns.barplot(y = customer_counts.index, x = customer_counts.values, orient = \"h\", \n            ax = ax, order = customer_counts.index, palette = \"Reds_r\")\n\nplt.title(\"Customers that have most transactions\")\nplt.ylabel(\"Customers\")\nplt.xlabel(\"Transaction Count\")\n\nplt.show()","1b7f4f0a":"df.Country.value_counts()","05d71c53":"country_counts = df.Country.value_counts().sort_values(ascending=False).head(25)\n\nfig, ax = plt.subplots(figsize = (18, 10))\n\nsns.barplot(x = country_counts.values, y = country_counts.index, orient = \"h\", \n            ax = ax, order = country_counts.index, palette = \"Blues_r\")\nplt.title(\"Countries that have most transactions\")\nplt.xscale(\"log\")\nplt.show()","42e2f237":"df[\"UnitPrice\"].describe()","c9f04fbe":"df[df.UnitPrice == 0].head()","74cf5eee":"print(\"We have {} observations.\".format(df.shape[0]))\n\ndf = df[df.UnitPrice > 0]\n\nprint(\"We have {} observations after removing records that have 0 unit price.\".format(df.shape[0]))","adc5cbd6":"fig, axes = plt.subplots(1, 3, figsize = (18, 6))\n\nsns.kdeplot(df[\"UnitPrice\"], ax = axes[0], color = \"#195190\").set_title(\"Distribution of Unit Price\")\nsns.boxplot(y = df[\"UnitPrice\"], ax = axes[1], color = \"#195190\").set_title(\"Boxplot for Unit Price\")\nsns.kdeplot(np.log(df[\"UnitPrice\"]), ax = axes[2], color = \"#195190\").set_title(\"Log Unit Price Distribution\")\n\nplt.show()","7aaeb4a0":"print(\"Lower limit for UnitPrice: \" + str(np.exp(-2)))\nprint(\"Upper limit for UnitPrice: \" + str(np.exp(3)))","46d04da8":"np.quantile(df.UnitPrice, 0.99)","64b15564":"print(\"We have {} observations.\".format(df.shape[0]))\n\ndf = df[(df.UnitPrice > 0.1) & (df.UnitPrice < 20)]\n\nprint(\"We have {} observations after removing unit prices smaller than 0.1 and greater than 20.\".format(df.shape[0]))","b96d24e5":"fig, axes = plt.subplots(1, 3, figsize = (18, 6))\n\nsns.kdeplot(df[\"UnitPrice\"], ax = axes[0], color = \"#195190\").set_title(\"Distribution of Unit Price\")\nsns.boxplot(y = df[\"UnitPrice\"], ax = axes[1], color = \"#195190\").set_title(\"Boxplot for Unit Price\")\nsns.kdeplot(np.log(df[\"UnitPrice\"]), ax = axes[2], color = \"#195190\").set_title(\"Log Unit Price Distribution\")\n\nfig.suptitle(\"Distribution of Unit Price (After Removing Outliers)\")\nplt.show()","ba7b1e62":"df[\"Quantity\"].describe()","7ccf07f6":"fig, axes = plt.subplots(1, 3, figsize = (18, 6))\n\nsns.kdeplot(df[\"Quantity\"], ax = axes[0], color = \"#195190\").set_title(\"Distribution of Quantity\")\nsns.boxplot(y = df[\"Quantity\"], ax = axes[1], color = \"#195190\").set_title(\"Boxplot for Quantity\")\nsns.kdeplot(np.log(df[\"Quantity\"]), ax = axes[2], color = \"#195190\").set_title(\"Log Quantity\")\nplt.show()","f00b0f32":"print(\"Upper limit for Quantity: \" + str(np.exp(5)))","9c32158d":"np.quantile(df.Quantity, 0.99)","24486e0b":"print(\"We have {} observations.\".format(df.shape[0]))\n\ndf = df[(df.Quantity < 150)]\n\nprint(\"We have {} observations after removing quantities greater than 150.\".format(df.shape[0]))","10bad26f":"fig, axes = plt.subplots(1, 3, figsize = (18, 6))\n\nsns.kdeplot(df[\"Quantity\"], ax = axes[0], color = \"#195190\").set_title(\"Distribution of Quantity\")\nsns.boxplot(y = df[\"Quantity\"], ax = axes[1], color = \"#195190\").set_title(\"Boxplot for Quantity\")\nsns.kdeplot(np.log(df[\"Quantity\"]), ax = axes[2], color = \"#195190\").set_title(\"Log Quantity\")\n\nfig.suptitle(\"Distribution of Quantity (After Removing Outliers)\")\nplt.show()","736b1e76":"df[\"TotalPrice\"] = df[\"Quantity\"] * df[\"UnitPrice\"]\ndf['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])","672cd349":"df.drop(\"Cancelled\", axis = 1, inplace = True)\ndf.to_csv(\"online_retail_final.csv\", index = False)","f798d78f":"We are done with systematically missing values. But lets go deeper.","9a1a36a4":"Sometimes, missing values are filled with some denotations. \"NAN\", \"na\", \"?\", \"Unknown\", and so on. Let's check them.","adb0b6af":"When description is null, we have 0 unit price and missing customer ids. Let's check for whole data.","1a2e7040":"Can we have both cancellation record, and record before cancellation. I mean, for example, we have C536379, have we 536379 ?","b3eceab4":"# Next","5172fb4f":"No, we only have proper invoices and cancellations for InvoiceNo. We don't have any different pattern.","609ed43d":"Well, maybe we have different pattern about InvoiceNo. Let's check it","6f58546a":"InvoiceNo has coded with 6 digit numeric characters. We can see that some InvoiceNo records starts with the letter C. This means cancellation.","f2b8a0f0":"I didn't find any pattern. So, I remove them.","726895c7":"213 Stock codes have more than one description. Let's check some of them.","2c8ebc9c":"It looks like data contains more than customer transactions. I will drop them.","62e046ce":"Cancelled invoices have negative quantity.","c8f11e62":"Nothing, we have just cancellation.","a5fa9e31":"At first look, we can see records that have missing customer id, there is no specific characteristics.\n\nStockCode contains non-numeric records i.e. DOT. It is a cue for examining stock codes.","d41d1f4f":"<a id=\"section-one\"><\/a>\n\n# 1) General Infos & Playing with Features","d2effaf8":"Stock Codes - Description","3d616dbf":"I just standardize descriptions with converting them to all lowercase characters.","25dd41ab":"Seems we have just a litle differences between them, i.e. \",\" or \"\/\"","9890e5ec":"0 unit price?","ad0527b9":"Some stock codes have a letter at the end of their codes. I don't know what they refers, so I will keep them.","218cfe67":"We have missing values for column Description and CustomerID. Go deeper","3d732092":"75%          12.000000\n\nmax       80995.000000\n\nLet's look at these outliers.","11c0c211":"Stock Codes generally contains 5 digit numerical codes.","c327cdbc":"You can reach this data from here. https:\/\/www.kaggle.com\/mustafacicek\/online-retail-final\n\nNext chapters:\n\nhttps:\/\/www.kaggle.com\/mustafacicek\/marketing-analytics-cohort-analysis\n\nhttps:\/\/www.kaggle.com\/mustafacicek\/marketing-analytics-pareto-principle\n\nhttps:\/\/www.kaggle.com\/mustafacicek\/marketing-analytics-rfm-analysis\n\nhttps:\/\/www.kaggle.com\/mustafacicek\/marketing-analytics-forecasting\n\nFull work: https:\/\/www.kaggle.com\/mustafacicek\/detailed-marketing-cohort-pareto-rfm-forecast","19136b69":"When description is null, we have no available customer id and zero unit price for all data. Let's drop nan values.","4b5f37e5":"# Introduction\n\nThis is first part of https:\/\/www.kaggle.com\/mustafacicek\/detailed-marketing-cohort-pareto-rfm-forecast"}}