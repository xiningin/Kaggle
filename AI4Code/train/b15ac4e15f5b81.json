{"cell_type":{"f6ac37b3":"code","04c177c4":"code","779dde1c":"code","a8b11358":"code","07cb4e76":"code","1e16ff70":"code","838611b6":"code","33267bc8":"code","f4b0780a":"markdown","1cdad68d":"markdown","67903def":"markdown","22e2d19c":"markdown"},"source":{"f6ac37b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","04c177c4":"traffic_df = pd.read_csv('\/kaggle\/input\/mock-traffic-data\/MockTrafficDataForMCNFP.csv')\n# Make the columns that are dates into actual dates so you can do arithmetic on them\ntraffic_df = traffic_df.set_index('id')\ncols = ['time_node_1', 'time_node_2', 'time_node_3','time_node_4', 'time_node_5', 'time_node_6']\n\nfor col in cols:\n    traffic_df[col] = pd.to_datetime(traffic_df[col]).dt.time\n\ntraffic_df.head()","779dde1c":"import re\nimport networkx as nx\n\ndef get_graph(traffic_df):\n\n    path_nodes = [re.findall('\\d', traffic_df.iloc[i].dropna().index[1:][j])[0] for i in range(len(traffic_df)) for j in range(len(traffic_df.iloc[i].dropna().index[1:]))]\n\n    path_edges = [(path_nodes[i], path_nodes[i+1]) for i in range(len(path_nodes)-1) if path_nodes[i]!='6']\n    \n    cars_per_edge = [path_edges.count(i) for i in set(path_edges)]\n        \n    edges = list(set(path_edges))\n    \n    path =[]\n    path_travel=[]\n    for i in path_nodes:\n        if i!='6':\n            path.append(i)\n        else:\n            path.append(i)\n            path_travel.append(tuple(path))\n            path = []\n    \n    G = nx.DiGraph()\n    \n    for edge, weight in zip(edges, cars_per_edge):\n        G.add_edges_from([edge], num_cars=weight)\n    return G, path_travel, path_edges","a8b11358":"import matplotlib.pyplot as plt\n\n%matplotlib inline\nplt.figure(figsize=(10,9))\n\nG, path_travel, path_edges = get_graph(traffic_df)\n\nedge_width = [0.01*G[u][v]['num_cars'] for u,v in G.edges()]\n\npos = {'1':(-0.6,0), '2':(-0.4,0.4), '3':(-0.4, -0.4), '4':(0.3,0.4), '5':(0.3, -0.4), '6':(0.7, 0)}\nnx.draw_networkx(G, pos=pos, alpha=0.7, width=edge_width, node_size=1500, edge_color='.4', cmap=plt.cm.Blues)\nlabels = nx.draw_networkx_edge_labels(G, pos=pos, font_size=10)\nplt.title('How many cars a path is travel from 7am to 7pm', size=20)\nplt.show()","07cb4e76":"from datetime import timedelta\nend_time = [timedelta(hours=x.hour, minutes=x.minute, seconds=x.second) for x in traffic_df['time_node_6']]\nstart_time = [timedelta(hours=x.hour, minutes=x.minute, seconds=x.second) for x in traffic_df['time_node_1']]\n\neda_traffic = traffic_df.copy()\neda_traffic['avg_time_travel'] = np.array(end_time) - np.array(start_time)\neda_traffic['path_travel'] = path_travel\ntime_travel_paths = pd.DataFrame(eda_traffic.groupby(by='path_travel')['avg_time_travel'].agg(lambda x: x.mean()))\n","1e16ff70":"ranking_time_travel_nodes = time_travel_paths.reset_index()\nranking_time_travel_nodes","838611b6":"ranking_time_travel_nodes.iloc[0]['path_travel']","33267bc8":"time_travel_paths['avg_time_travel'] = time_travel_paths['avg_time_travel'].apply(lambda x : x.total_seconds()\/3600)\nplt.figure(figsize=(10,9))\nr_bins = range(len(time_travel_paths))\nplt.bar(r_bins, time_travel_paths['avg_time_travel'], color='g')\nplt.xticks(r_bins, list(time_travel_paths.index), rotation=30)\nplt.yticks()\nplt.xlabel('Traveling Paths throgh nodes')\nplt.ylabel('Amount of time traveling (hours)')\nplt.title('Path traveling time')\nplt.show()","f4b0780a":"## Nodes in which most cars pass through them","1cdad68d":"## Showing a directed Graph of the tolls and how many times a path is travel all the 1500 samples in the dataset","67903def":"## Ranking of path of nodes travel through them","22e2d19c":"## Let's see which path are the best for traveling faster from node1 to node6"}}