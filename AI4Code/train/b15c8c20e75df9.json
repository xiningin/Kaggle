{"cell_type":{"57942a78":"code","667a7f38":"code","fe3895f0":"code","be6a84aa":"code","bcfc0e17":"code","f85bf9fd":"code","0d207175":"code","d9f963f9":"code","56872691":"code","f6cf1cdd":"code","897e774a":"code","b1f4197a":"code","ef6610b6":"code","7c2f7d75":"code","a4547fab":"code","3c73fc37":"code","db92afd4":"code","a0228de9":"code","9a01a02e":"code","e2548635":"markdown","3d3d5c75":"markdown","c830a41e":"markdown","eb16ecd3":"markdown","6c17da0b":"markdown","64df90f5":"markdown","94ea4a18":"markdown","56de8212":"markdown","1dcf4258":"markdown","214b6f1c":"markdown"},"source":{"57942a78":"import numpy as np\nimport pandas as pd\nfrom pandas_profiling import ProfileReport\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn import metrics \nimport lightgbm as lgb\nimport optuna\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","667a7f38":"train = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv')","fe3895f0":"test = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/test.csv')","be6a84aa":"submission = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/sample_submission.csv',index_col='id')","bcfc0e17":"# Pandas Profiling on the training set. \nprof = ProfileReport(train)\nprof.to_notebook_iframe()","f85bf9fd":"# Pandas Profiling on the test set\nprof = ProfileReport(test)\nprof.to_notebook_iframe()","0d207175":"#Label encoder\nfor c in train.columns:\n    if train[c].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(train[c].values) + list(test[c].values))\n        train[c] = lbl.transform(train[c].values)\n        test[c] = lbl.transform(test[c].values)\n        \ndisplay(train.head())","d9f963f9":"#checking for missing values in training set\ntrain.isnull().sum()","56872691":"#Checking for missing values in test set\ntest.isnull().sum()","f6cf1cdd":"#Removing unimportant columns\ntarget = train.pop('target')\ntrain.pop('id')\ntrain.info()\ntest.pop('id')","897e774a":"\ndef objective(trial,data=train, target = target):\n    X_train,X_test,y_train,y_test = train_test_split(train,target,train_size=0.9)\n    dtrain = lgb.Dataset(X_train, label=y_train)\n    param = {\n        'objective': 'binary',\n        'metric': 'binary_logloss',\n        'verbosity': -1,\n        'boosting_type': 'gbdt',\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 10.0),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-8, 10.0),\n        'num_leaves': trial.suggest_int('num_leaves', 2, 256),\n        'feature_fraction': trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        'bagging_fraction': trial.suggest_uniform('bagging_fraction', 0.4, 1.0),\n        'bagging_freq': trial.suggest_int('bagging_freq', 1, 7),\n        'min_child_samples': trial.suggest_int('min_child_samples', 5, 100),\n    }\n    model = lgb.train(param,dtrain)\n    y_pred = model.predict(X_test)\n    pred_labels = np.rint(y_pred)\n    auc_roc_score = roc_auc_score(y_test,pred_labels)\n    return auc_roc_score","b1f4197a":"study = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=50)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","ef6610b6":"params=study.best_params \n#params['n_estimators'] = 2000 \nparams['metric'] = 'roc_auc_score'","7c2f7d75":"X_train,X_test,y_train,y_test = train_test_split(train,target,train_size=0.9)","a4547fab":"from lightgbm import LGBMClassifier\nlgb = LGBMClassifier()\nlgb.fit(X_train,y_train)\ny_preds = lgb.predict(X_test)\nprint(metrics.roc_auc_score(y_preds,y_test))","3c73fc37":"\n\ncheck = LGBMClassifier(**params)\ncheck.fit(X_train,y_train)\ny_preds = check.predict(X_test)\ntarget_names = [\"class 0 \",\"class 1\"]\nprint(metrics.roc_auc_score(y_preds,y_test))","db92afd4":"output = check.predict_proba(test)\nsubmission['target'] = output","a0228de9":"submission.head()","9a01a02e":"submission.to_csv('lgbm.csv')","e2548635":"First I have used lightgbm to train the model and then I have used optuna to get the best hyper parameters for the model. After that I have created a simple model using optuna with defaults hyper parameters. The reason for doing so is to compare the roc auc score for both the models and how much improvement is seen from the initial model. \n\nLink to learn about optuna for lgbm - https:\/\/github.com\/optuna\/optuna\/blob\/master\/examples\/lightgbm\/lightgbm_simple.py","3d3d5c75":"## Model Creation and Hyper Parameter Optimisation","c830a41e":"## Importing the libraries and loading the data ","eb16ecd3":"First I have created a lgbm model in which I have not included the hyper parameters and then I have created another model where I have included the hyper parameter. And the hyper parameters have made a very slight improvement in the model but the slight improvement shows a significantly big jump in the leaderboard. ","6c17da0b":"## Feature Engineering and Feature Selection","64df90f5":"This section includes - \n1. Understanding and visualizing the data.\n2. Applying label encoder to the categorical features.\n3. Checking for missing values.\n4. Dropping some of the unimportant features. ","94ea4a18":"The roc_auc_score without the hyper parameter tuning is around 0.81645 and the roc_auc_score with hyper parameters is around 0.81780. And the difference in the roc_auc_score is 0.00135","56de8212":"**Thank you so much for your time, if you find it useful kindly upvote** :)","1dcf4258":"The dictionary params contains the best values for our hyper parameters which we found out using optuna","214b6f1c":"## Introduction\nIn this notebook I will be creating a using lightgbm and then I will do hyperparameter tuning on that model to improve it \ud83d\ude04. Initially with out the hyper parameter tuning, the model gives a score of around .77(approx) on submitting it to the competition. While, after doing the hyper parameter tuning, it gets a score of .88(appprox)\ud83e\udd1e. I have used optuna for hyper parameter tunining. I will keep adding all the necessary links as well from which you can learn. \n\nThank you !! \nEnjoy :)"}}