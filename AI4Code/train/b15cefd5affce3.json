{"cell_type":{"62789fef":"code","83e84508":"code","6435d625":"code","8d85ac85":"code","8c3b3218":"code","18aa626b":"code","c0acec4e":"code","3a1d693b":"code","9a1f76f0":"code","ada2e565":"code","1016629d":"code","7238a0a4":"code","e67d6b96":"code","90dad7ba":"code","bba942a8":"code","0e4c93ad":"code","b24de4f5":"code","f7761eb6":"code","a916e996":"code","bb9dc48b":"code","229abdf8":"code","e3565861":"code","74b31bf3":"code","8a28b8ce":"code","bc431083":"code","f117d845":"code","bae24a19":"code","4b0c7bf3":"code","f7c03898":"code","33e8164d":"code","7fdbac84":"code","607ad277":"code","9bc5586d":"code","e69f90ed":"code","c5e03f30":"code","e9a4ff60":"code","a8176348":"code","0aabcd64":"code","942253c9":"code","8f17ba61":"code","76d78350":"code","ff6c83ba":"code","0be2dcb6":"code","7ef8b5d4":"code","cfc22120":"code","5a174776":"code","70c8a17b":"code","fd4a78b9":"code","d3904000":"code","e1155d4e":"code","59ba2dd0":"code","68815c15":"code","96ad3a47":"code","48b99422":"code","294dda58":"code","98f5aba5":"code","cd167d3e":"code","2b8276bf":"code","986d08bb":"code","2c7bd0a8":"code","b94f1593":"markdown","ac807999":"markdown","cc3a518c":"markdown","133154f6":"markdown","04710a55":"markdown","a3512e9e":"markdown","5ff16cf7":"markdown","b5ae48af":"markdown","0b673d46":"markdown","aa16afba":"markdown","eeb877e6":"markdown","3bf59e22":"markdown","2750e887":"markdown","287c33d2":"markdown","4526c9e2":"markdown","8635afde":"markdown","06d44961":"markdown","e4475df7":"markdown","024205d0":"markdown","f6d74a6e":"markdown","a053198a":"markdown","bd95309f":"markdown","7ebbad54":"markdown","d82fb576":"markdown","b181aa1f":"markdown","8801a484":"markdown","6b73579e":"markdown","a5148219":"markdown","8b0ba227":"markdown","79074bf8":"markdown","572dff8c":"markdown","56c736a0":"markdown","1d8b19f8":"markdown","df0e631b":"markdown","50aeee60":"markdown","9e6d57d4":"markdown","1fdaf17c":"markdown","6bafd36b":"markdown","fad099ed":"markdown","1d6ad217":"markdown","50f40564":"markdown","0f6ee291":"markdown","2673a9cf":"markdown","e28c4df0":"markdown","63de818d":"markdown","33003f4e":"markdown","7946bfb2":"markdown","98888f18":"markdown","1e2bcf09":"markdown","27af44fe":"markdown"},"source":{"62789fef":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt\nimport seaborn as sns # data visualization\nfrom sklearn import neighbors # K- nearest neighbour\nfrom sklearn.preprocessing import LabelEncoder #Categorical data to Numerical Values\nfrom sklearn.impute import SimpleImputer #Imputing missing Values\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nprint(\"import complete\")","83e84508":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","6435d625":"train_data.sample(10)","8d85ac85":"train_data.isna().sum()","8c3b3218":"train_data.shape","18aa626b":"train_data = train_data.drop(labels=[\"Cabin\"], axis=\"columns\")\ntest_data = test_data.drop(labels=[\"Cabin\"], axis=\"columns\")","c0acec4e":"train_data.describe()","3a1d693b":"train_data[\"Age\"] = train_data[\"Age\"].fillna(28)\ntest_data[\"Age\"] = test_data[\"Age\"].fillna(28)","9a1f76f0":"test_data.isna().sum()","ada2e565":"test_data.describe()","1016629d":"test_data[\"Fare\"] = test_data[\"Fare\"].fillna(14.454200)","7238a0a4":"label_encoder = LabelEncoder()\ntrain_data[\"Sex\"] = label_encoder.fit_transform(train_data[\"Sex\"])\ntest_data[\"Sex\"] = label_encoder.fit_transform(test_data[\"Sex\"])","e67d6b96":"print(train_data[\"Embarked\"].unique())\nprint(test_data[\"Embarked\"].unique())","90dad7ba":"train_data[\"Embarked\"] = train_data[\"Embarked\"].fillna(\"X\")\ntest_data[\"Embarked\"] = test_data[\"Embarked\"].fillna(\"X\")","bba942a8":"train_data[\"Embarked\"] = label_encoder.fit_transform(train_data[\"Embarked\"])\ntest_data[\"Embarked\"] = label_encoder.fit_transform(test_data[\"Embarked\"])","0e4c93ad":"train_data.sample(10)","b24de4f5":"Ticket1 = []\n#Train_data\nfor i in list(train_data.Ticket):\n    if not i.isdigit() :\n        Ticket1.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(' ')[0]) #Take prefix\n    else:\n        Ticket1.append(\"X\")\n        \ntrain_data[\"Ticket\"] = Ticket1\n\n#Test_data\nTicket2 = []\nfor j in list(test_data.Ticket):\n    if not j.isdigit() :\n        Ticket2.append(j.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(' ')[0]) #Take prefix\n    else:\n        Ticket2.append(\"X\")\n\n        \ntest_data[\"Ticket\"] = Ticket2","f7761eb6":"train_data.sample(10)","a916e996":"print(train_data[\"Ticket\"].unique())\nprint(test_data[\"Ticket\"].unique())","bb9dc48b":"unique1 = [] #Unique prefixes train_data\nunique2 = [] #Unique prefixes test_data\nfor i in train_data[\"Ticket\"].unique():\n    if i not in test_data[\"Ticket\"].unique():\n        unique1.append(i)\n    else:\n        pass\nfor j in test_data[\"Ticket\"].unique():\n    if j not in train_data[\"Ticket\"].unique():\n        unique2.append(j)\n    else:\n        pass","229abdf8":"print(\"Unique in train data: {} \\nUnique in test data: {}\".format(unique1,unique2))","e3565861":"unique1 = [\"Ticket_\" + s for s in unique1]\nunique2 = [\"Ticket_\" + s for s in unique2]","74b31bf3":"train_data = pd.get_dummies(train_data, columns = [\"Ticket\"])\ntest_data = pd.get_dummies(test_data, columns = [\"Ticket\"])","8a28b8ce":"train_data = train_data.drop(labels = unique1 , axis = \"columns\")\ntest_data = test_data.drop(labels = unique2 , axis = \"columns\")","bc431083":"print(train_data.columns,test_data.columns, sep = \"\\n\")","f117d845":"train_data.head()","bae24a19":"train_title = [i.split(\",\")[1].split(\".\")[0].strip() for i in train_data[\"Name\"]]\ntrain_data[\"Title\"] = pd.Series(train_title)\ntest_title = [i.split(\",\")[1].split(\".\")[0].strip() for i in test_data[\"Name\"]]\ntest_data[\"Title\"] = pd.Series(test_title)","4b0c7bf3":"train_data = train_data.drop(labels = \"Name\", axis = \"columns\")\ntest_data = test_data.drop(labels = \"Name\", axis = \"columns\")","f7c03898":"train_data.head()","33e8164d":"train_data[\"Title\"] = train_data[\"Title\"].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ntrain_data[\"Title\"] = train_data[\"Title\"].map({\"Master\":0, \"Miss\":1, \"Ms\" : 1 , \"Mme\":1, \"Mlle\":1, \"Mrs\":1, \"Mr\":2, \"Rare\":3})\ntrain_data[\"Title\"] = train_data[\"Title\"].astype(int)\ntest_data[\"Title\"] = test_data[\"Title\"].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ntest_data[\"Title\"] = test_data[\"Title\"].map({\"Master\":0, \"Miss\":1, \"Ms\" : 1 , \"Mme\":1, \"Mlle\":1, \"Mrs\":1, \"Mr\":2, \"Rare\":3})\ntest_data[\"Title\"] = test_data[\"Title\"].astype(int)","7fdbac84":"train_data.head()","607ad277":"train_data[['Age']].hist(bins=25)\nplt.show()","9bc5586d":"plt.figure(figsize=(16,16))\nsns.countplot(y=train_data.Age, hue=train_data.Survived)\nplt.show()","e69f90ed":"plt.figure(figsize=(12,6))\nsns.countplot(x=train_data.Sex, hue=train_data.Survived)\nplt.show()","c5e03f30":"plt.figure(figsize=(12,6))\nsns.countplot(x=train_data.Pclass, hue=train_data.Survived, palette=\"pastel\")\nplt.show()","e9a4ff60":"plt.figure(figsize=(12,6))\nsns.countplot(x=train_data.Title, hue=train_data.Survived)\nplt.show()\n#{\"Master\":0, \"Miss\":1, \"Ms\" : 1 , \"Mme\":1, \"Mlle\":1, \"Mrs\":1, \"Mr\":2, \"Rare\":3}","a8176348":"pred = train_data['Survived']","0aabcd64":"import statsmodels.formula.api as smf\nimport statsmodels.api as sm","942253c9":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Ticket_A4 + Ticket_A5 +Ticket_C + Ticket_CA+Ticket_FC + Ticket_FCC + Ticket_PC + Ticket_PP+ Ticket_SC + Ticket_SCA4 + Ticket_SCAH + Ticket_SCPARIS + Ticket_SCParis + Ticket_SOC+Ticket_SOPP+Ticket_SOTONO2+Ticket_SOTONOQ + Ticket_STONO + Ticket_STONO2 + Ticket_WC + Ticket_WEP + Ticket_X +Title', data=train_data, family=sm.families.Binomial()).fit()\nbeta1 = reg_log.params[0]\nbeta2 = reg_log.params[1]\nprint(reg_log.summary())","8f17ba61":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Ticket_A4 + Ticket_A5 +Ticket_C + Ticket_CA + Ticket_FCC + Ticket_PC + Ticket_PP+ Ticket_SCAH + Ticket_SCPARIS + Ticket_SCParis + Ticket_SOC+Ticket_SOPP+Ticket_SOTONO2+Ticket_SOTONOQ + Ticket_STONO + Ticket_STONO2 + Ticket_WC + Ticket_WEP + Ticket_X +Title', data=train_data, family=sm.families.Binomial()).fit()\nbeta1 = reg_log.params[0]\nbeta2 = reg_log.params[1]\nprint(reg_log.summary())","76d78350":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Ticket_A4 + Ticket_A5 +Ticket_C + Ticket_CA + Ticket_FCC + Ticket_PC + Ticket_PP+ Ticket_SCAH + Ticket_SCPARIS + Ticket_SCParis + Ticket_SOC+Ticket_SOPP+Ticket_SOTONOQ + Ticket_STONO + Ticket_STONO2 + Ticket_WC + Ticket_WEP + Ticket_X +Title', data=train_data, family=sm.families.Binomial()).fit()\nprint(reg_log.summary())","ff6c83ba":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Ticket_A5 +Ticket_C + Ticket_CA + Ticket_FCC + Ticket_PC + Ticket_PP+ Ticket_SCAH + Ticket_SCPARIS + Ticket_SCParis + Ticket_SOC+Ticket_SOPP+Ticket_SOTONOQ + Ticket_STONO + Ticket_STONO2 + Ticket_WC + Ticket_WEP + Ticket_X +Title', data=train_data, family=sm.families.Binomial()).fit()\nprint(reg_log.summary())","0be2dcb6":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Ticket_A5 +Ticket_C + Ticket_CA + Ticket_FCC + Ticket_PC + Ticket_PP+ Ticket_SCAH + Ticket_SCPARIS + Ticket_SCParis + Ticket_SOC+Ticket_SOTONOQ + Ticket_STONO + Ticket_STONO2 + Ticket_WC + Ticket_WEP + Ticket_X +Title', data=train_data, family=sm.families.Binomial()).fit()\nprint(reg_log.summary())","7ef8b5d4":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Ticket_A5 +Ticket_C + Ticket_CA + Ticket_FCC + Ticket_PC + Ticket_PP+ Ticket_SCAH + Ticket_SCPARIS + Ticket_SCParis + Ticket_SOC+Ticket_SOTONOQ + Ticket_STONO + Ticket_WC + Ticket_WEP + Ticket_X +Title', data=train_data, family=sm.families.Binomial()).fit()\nprint(reg_log.summary())","cfc22120":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Ticket_C + Ticket_CA + Ticket_FCC + Ticket_PC + Ticket_PP+ Ticket_SCAH + Ticket_SCPARIS + Ticket_SCParis + Ticket_SOC+Ticket_SOTONOQ + Ticket_STONO + Ticket_WC + Ticket_WEP + Ticket_X +Title', data=train_data, family=sm.families.Binomial()).fit()\nprint(reg_log.summary())","5a174776":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Ticket_C + Ticket_CA + Ticket_FCC + Ticket_PC + Ticket_PP+ Ticket_SCAH  + Ticket_SCParis + Ticket_SOC+Ticket_SOTONOQ + Ticket_STONO + Ticket_WC + Ticket_WEP + Ticket_X +Title', data=train_data, family=sm.families.Binomial()).fit()\nprint(reg_log.summary())","70c8a17b":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Ticket_C + Ticket_CA + Ticket_FCC + Ticket_PC + Ticket_PP+ Ticket_SCAH  + Ticket_SOC+Ticket_SOTONOQ + Ticket_STONO + Ticket_WC + Ticket_WEP + Ticket_X +Title', data=train_data, family=sm.families.Binomial()).fit()\nprint(reg_log.summary())","fd4a78b9":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Ticket_C + Ticket_CA + Ticket_FCC + Ticket_PC + Ticket_PP  + Ticket_SOC+Ticket_SOTONOQ + Ticket_STONO + Ticket_WC + Ticket_WEP + Ticket_X +Title', data=train_data, family=sm.families.Binomial()).fit()\nprint(reg_log.summary())","d3904000":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Ticket_C + Ticket_CA + Ticket_FCC + Ticket_PC + Ticket_PP  + Ticket_SOC+Ticket_SOTONOQ + Ticket_STONO + Ticket_WC + Ticket_WEP +Title', data=train_data, family=sm.families.Binomial()).fit()\nprint(reg_log.summary())","e1155d4e":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Ticket_C + Ticket_CA + Ticket_FCC + Ticket_PC + Ticket_PP  + Ticket_SOC+ Ticket_STONO + Ticket_WC +Title', data=train_data, family=sm.families.Binomial()).fit()\nprint(reg_log.summary())","59ba2dd0":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Ticket_C +Ticket_PC + Ticket_PP  + Ticket_SOC+ Ticket_STONO + Ticket_WC +Title', data=train_data, family=sm.families.Binomial()).fit()\nprint(reg_log.summary())","68815c15":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Ticket_C +Ticket_PC  + Ticket_STONO + Ticket_WC +Title', data=train_data, family=sm.families.Binomial()).fit()\nprint(reg_log.summary())","96ad3a47":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch  + Embarked + Ticket_C +Ticket_PC  + Ticket_STONO + Ticket_WC +Title', data=train_data, family=sm.families.Binomial()).fit()\nprint(reg_log.summary())","48b99422":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch  + Embarked + Ticket_C   + Ticket_STONO + Ticket_WC +Title', data=train_data, family=sm.families.Binomial()).fit()\nprint(reg_log.summary())","294dda58":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp + Parch  + Embarked    + Ticket_STONO + Ticket_WC +Title', data=train_data, family=sm.families.Binomial()).fit()\nprint(reg_log.summary())","98f5aba5":"reg_log = smf.glm('Survived ~ Pclass + Sex + Age + SibSp+ Embarked    + Ticket_STONO + Ticket_WC +Title', data=train_data, family=sm.families.Binomial()).fit()\nprint(reg_log.summary())","cd167d3e":"pr = reg_log.predict(test_data)","2b8276bf":"y_pred = (pr > 0.65).astype(int)","986d08bb":"print(y_pred)","2c7bd0a8":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': y_pred})\noutput.to_csv('.\/submission.csv', index=False)","b94f1593":"These are the prefixes that are unique to train_data vs test_data:","ac807999":"The third Pclass passengers have higher survival rate.","cc3a518c":"Lets import the model packages:","133154f6":"Drop the Cabin column from training and testing data:","04710a55":"Perfect! we took care of all the missing values and categorical data.\nNow lets move to visualization.","a3512e9e":"We only have one missing value in Fare column, so we will fill it with the median value:","5ff16cf7":"Add a prefix (can be added directly with pandas get_dummmies function with the attribute prefix=\"\")","b5ae48af":"Now we have to take care of the Name column, since names don't matter but the titles do, we will create a column with only the titles and drop the name.","0b673d46":"We will be using statsmodels logistic regression.","aa16afba":"We will fill the missing values with a string X, to distinguish them from the other values in the visualization phase.","eeb877e6":"Even though that male passengers are more than female passengers, females have better survival rate than males.","3bf59e22":"We will fill missing values with median age:","2750e887":"# Titanic Disaster - Survival Prediction","287c33d2":"### Plan:\n\n1. Data preprocessing: *Handling missing values and categorical data.*\n2. Data visualization.\n3. Creating a model.\n\n","4526c9e2":"After trying multiple threshold, 0.65 gave me the best result.","8635afde":"we will be using logistic regression to make the predictions, but before creating a model we have to pre process the data to have a good model.","06d44961":"We have the same columns in both sets, except for Survived which we will drop later.","e4475df7":"## Model:","024205d0":"### Missing values:\nWe have to take a look at columns that have missing values:","f6d74a6e":"### Data Visualization:","a053198a":"We can clearly see that we have prefixes that are in train_data and not in test_data and vice versa","bd95309f":"#### Title:","7ebbad54":"Lets take a look at what we have acheived so far:","d82fb576":"#### Embarked:\nHere we can see that we have missing values in this column in training data.","b181aa1f":"So now that we got rid of the numbers and kept the prefixes, we have to take care of the prefixes that are unique to one dataset(training vs testing set)","8801a484":"#### Age distribution:","6b73579e":"Since 88% of Cabin data is missing, it probably won't make any difference.","a5148219":"Most passengers are aged between 18-35 years old.","8b0ba227":"Lets take a look at a sample:","79074bf8":"## Data Preprocessing:","572dff8c":"We start with the simplest one, the sex: Female or Male.\nWe are using the sklearn.preprocessing module to label encode these values.","56c736a0":"### Categorical variables:","1d8b19f8":"As we can see we have many non significant variables such as Ticket_FC since the p value is less than 0.05(5% test level). We will eliminate each non significant variable till we have all p values less than 0.05.","df0e631b":"---------------------------------------------------------------------------------------------------------------","50aeee60":"Lets import the important packages.","9e6d57d4":"So we can see that we have plenty categorical data and missing values.","1fdaf17c":"#### Pclass survival rate:","6bafd36b":"This is our last model, let's predict on test data.","fad099ed":"Title column is categorical, lets encode it manually: (we won't use the sklearn module this time)","1d6ad217":"As we saw in gender survival rate, in this plot we can confirm that females have higher survival rate.","50f40564":"Lets take a look again at the data:","0f6ee291":"Run our first model:","2673a9cf":"Now we have to take care of Ticker column, since it has different forms, some tickets start with a prefix and some dont. We will take only the prefix into consideration.\n(You can study the numbers too, since two adjacent ticket numbers can mean that those two people are friends or partners)","e28c4df0":"#### Gender survival rate:","63de818d":"Now that we handled all the missing values, we will move to handling categorical values:","33003f4e":"Encoding:","7946bfb2":"Load data:","98888f18":"We have a lot of 28 years old people didn't survive, that is normal since we filled the age missing values with median(28). Other than that, we can see that new borns(less than 1year old) all survived, but the other age groups, the no-survival rate is always greater than the survival rate. ","1e2bcf09":"So we handled missing values in training data, now lets move to testing data:","27af44fe":"Drop the unique columns:"}}