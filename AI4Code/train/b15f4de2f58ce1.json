{"cell_type":{"8bdb7f5f":"code","4e504def":"code","ff0557f6":"code","c7d954a6":"code","ac617023":"code","2d5edc5a":"code","cabf831f":"code","c32ec1be":"code","95e666bc":"code","8a75f351":"code","28c6f8e7":"code","01f959b8":"code","c30e918f":"code","307b0d8d":"code","66247039":"code","ec20edfa":"code","16d014bf":"code","c8e258f0":"code","2db10509":"code","94151eac":"code","39b5ddb5":"code","55eba882":"code","2ec2cb8a":"code","fd52a085":"code","33ded7a5":"code","247939b8":"code","071add9c":"code","72bd5e80":"code","42d9b3e1":"code","8de01f48":"code","6222c144":"code","cf62525c":"code","0115145a":"code","dfe825f6":"code","f882109c":"markdown","72b212bd":"markdown","b5979612":"markdown","6c212b98":"markdown","6dab8215":"markdown","a1e8d3c7":"markdown","db2dfefc":"markdown","29db3f65":"markdown","1d5b7c5b":"markdown","89d9d7cb":"markdown","d847b180":"markdown","2a858d72":"markdown"},"source":{"8bdb7f5f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow.keras.callbacks import LearningRateScheduler\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Conv2D, Flatten, BatchNormalization\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.preprocessing.image import ImageDataGenerator\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        \nimport warnings\nwarnings.filterwarnings(\"ignore\")","4e504def":"base_train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\nbase_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nprint(base_train.shape, base_test.shape)","ff0557f6":"base_train.head()","c7d954a6":"# Lista ordenada dos R\u00f3tulos da classe\nsorted(base_train[\"label\"].unique())","ac617023":"x = base_train.drop(\"label\", axis = 1)\ny = base_train[\"label\"]","2d5edc5a":"print(x.shape, y.shape)","cabf831f":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 1)","c32ec1be":"print(x_train.shape, x_test.shape)\nprint(y_train.shape, y_test.shape)","95e666bc":"x_train = np.array(x_train).astype(\"float64\")\nx_test = np.array(x_test).astype(\"float64\")\n\nx_train = x_train.reshape(-1, 28, 28, 1)\nx_test = x_test.reshape(-1, 28, 28, 1)","8a75f351":"x_train.shape","28c6f8e7":"x_train[1].dtype","01f959b8":"fig = plt.figure(figsize = (13, 8))\nfor i in range(9):\n    plt.subplot(330 + 1 + i)\n    plt.imshow(x_train[i])\nplt.show()","c30e918f":"x_train = x_train \/ 255.0\nx_test = x_test \/ 255.0","307b0d8d":"x_train.shape[1:]","66247039":"classifier = Sequential()\n\nclassifier.add(Conv2D(64, kernel_size = 3, activation = \"relu\", padding=\"same\", input_shape = (28, 28, 1)))\nclassifier.add(BatchNormalization())\n\nclassifier.add(Conv2D(64, kernel_size = 3, activation = \"relu\"))\nclassifier.add(BatchNormalization())\n\nclassifier.add(Conv2D(64, kernel_size = 5, strides=2, activation = \"relu\", padding=\"same\"))\nclassifier.add(BatchNormalization())\nclassifier.add(Dropout(0.4))\n\nclassifier.add(Conv2D(64, kernel_size = 3, activation = \"relu\"))\nclassifier.add(BatchNormalization())\n\nclassifier.add(Conv2D(64, kernel_size = 3, activation = \"relu\"))\nclassifier.add(BatchNormalization())\n\nclassifier.add(Conv2D(64, kernel_size = 5, strides=2, activation = \"relu\", padding=\"same\"))\nclassifier.add(BatchNormalization())\nclassifier.add(Dropout(0.4))\n\nclassifier.add(Conv2D(64, kernel_size = 4, activation = \"relu\"))\nclassifier.add(BatchNormalization())\n\nclassifier.add(Flatten())\nclassifier.add(Dropout(0.3))\n\nclassifier.add(Dense(units = 10, activation = \"softmax\"))","ec20edfa":"classifier.summary()","16d014bf":"from keras.utils import plot_model\nplot_model(classifier, to_file='classifier.png', show_shapes=True, show_layer_names=True)\nfrom IPython.display import Image\nImage(\"classifier.png\")","c8e258f0":"classifier.compile(optimizer = \"adam\", loss = \"sparse_categorical_crossentropy\", metrics = [\"accuracy\"])","2db10509":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=2, \n                                            factor=0.5, \n                                            min_lr=0.00001)","94151eac":"annealer = LearningRateScheduler(lambda x: 1e-3 * 0.95 ** x)","39b5ddb5":"data_generator = ImageDataGenerator(\n        featurewise_center=False,\n        samplewise_center=False,\n        featurewise_std_normalization=False,\n        samplewise_std_normalization=False,\n        zca_whitening=False,\n        rotation_range=10,\n        zoom_range = 0.1,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        horizontal_flip=False,\n        vertical_flip=False)\n\ndata_generator.fit(x_train)","55eba882":"history = classifier.fit(data_generator.flow(x_train,y_train, batch_size=64),\n                         epochs = 50, validation_data = (x_test,y_test) ,\n                         callbacks=[learning_rate_reduction, annealer],\n                         verbose = 2, steps_per_epoch=x_train.shape[0] \/\/ 64)","2ec2cb8a":" #history.history ","fd52a085":"\ndef graphic_evaluation(history,materics,graphic_title):\n    plt.plot(history.history[materics])\n    plt.plot(history.history['val_'+materics])\n    plt.title(graphic_title, fontsize = 16)\n    plt.legend(['train','test'])\n    plt.xlabel('Epochs', fontsize = 15)\n    plt.ylabel(materics, fontsize = 15)\n    plt.show()","33ded7a5":"# ploting the accuracy\ngraphic_evaluation(history,'accuracy', 'Model Accuracy')","247939b8":"# ploting the model loss\ngraphic_evaluation(history, 'loss', 'Model Loss')","071add9c":"x_test_sub = base_test.copy()","72bd5e80":"x_test_sub = x_test_sub.values.reshape(-1,28,28,1)\nx_test_sub = x_test_sub.astype('float32')\/255.0","42d9b3e1":"pred_x_test_sub = classifier.predict(x_test_sub)","8de01f48":"pred_x_test_sub","6222c144":"my_submition = pd.DataFrame({'ImageId':base_test.index.values + 1, 'Label':np.argmax(pred_x_test_sub, axis=1)})","cf62525c":"my_submition","0115145a":"my_submition.to_csv('digit_mnist.csv', index=False)","dfe825f6":"ls","f882109c":"# Training the Model","72b212bd":"# Save submition","b5979612":"# Image Data Generator","6c212b98":"# Normalize ","6dab8215":"# Separating Training Database and Test Database","a1e8d3c7":"# Convolutional Neural Network Architecture","db2dfefc":"# Compiling the Model","29db3f65":"# Total Amount of Unique Labels in the Database","1d5b7c5b":"# Reshape ","89d9d7cb":"# Separating the Pixels of the Images from the Labels","d847b180":"# Evaluation of the Trained Model","2a858d72":"# Structure of the Convolutional Neural Network with Tensorflow and Keras"}}