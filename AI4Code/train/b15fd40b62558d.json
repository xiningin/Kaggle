{"cell_type":{"976d0e32":"code","35456c30":"code","a01e85f7":"code","846224f4":"code","2fed818e":"code","690725c1":"code","275ab607":"code","0c0a754d":"code","c6b67493":"code","1fdaca4f":"code","62eefd42":"code","8d04cf0e":"code","34ea7710":"code","e4662ee1":"code","b9b3a679":"code","b8f71620":"code","013889fe":"code","83719339":"code","96c5f680":"code","3ec9700c":"code","a730c2c4":"code","33cbd53b":"code","41815565":"code","8285ffe1":"code","57f8d2a6":"code","bf4753e7":"code","6611873f":"code","3f8c5534":"code","b34ddd47":"code","61978218":"code","a84785a5":"code","bacd59d4":"code","ee1a8fca":"code","0748c5f8":"code","3eea2e58":"code","e08450db":"code","fd883dab":"code","9c78193f":"code","bfc3a572":"code","95e59c16":"code","0c76f73d":"code","983bf5c7":"code","491ab434":"code","cada0afd":"code","43777933":"code","59e26845":"code","c26911f4":"code","b605b962":"code","8a93030f":"code","82a6b798":"code","6cd4a6fd":"code","1829e699":"code","e1b9933b":"code","28ddab61":"code","00ed1eea":"code","5ba9ca4d":"code","47e435eb":"code","d62aa359":"code","f7b56be6":"code","430b4a42":"code","fc2ee196":"code","fa945f77":"code","b388d1b7":"code","7a689c73":"code","b1be8106":"code","17227c24":"code","a71d8d86":"code","4c2275d9":"code","e8ecd840":"code","fc986568":"code","7edb648d":"code","9942e06d":"code","e7640941":"code","1a504e3b":"code","1bee0d34":"code","553e527d":"code","43def7c1":"code","9fd80a6e":"code","f8b055f6":"code","b3963428":"code","52b0e3e3":"code","d6a7f1ba":"code","9ecec16c":"code","ff1e08b6":"code","c50cb754":"code","252a0a20":"code","89551bce":"code","3a52e213":"code","887c3bb8":"code","823a385b":"code","c9a5e453":"code","1570bab1":"code","feb6dd5f":"code","47be10a7":"code","8048d822":"code","3866485e":"code","047ac1b8":"code","e1b69b87":"code","e6b8428f":"code","d316ea7f":"code","7724acb8":"code","f1d5828a":"code","b124c868":"code","072b7803":"code","31aa6449":"code","0faec6b8":"markdown","b7a856da":"markdown","8112d832":"markdown","e1ef8c1b":"markdown","21960dc1":"markdown","cd217310":"markdown","4bad8a1e":"markdown","7a6926a0":"markdown","25efe6cf":"markdown","576d6ddb":"markdown"},"source":{"976d0e32":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # this is used for the plot the graph \nimport seaborn as sns # used for plot interactive graph.\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import SVC\n%matplotlib inline\n\n#To hide Warning messages.\nimport warnings\nwarnings.filterwarnings('ignore')","35456c30":"df = pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore.csv\")\ndf.head()\n","a01e85f7":"df.info()","846224f4":"print(df.isnull().sum())\n\ndf.dropna(inplace=True) #Dropping Rows with Null values","2fed818e":"df.drop_duplicates(inplace=True)","690725c1":"df.shape","275ab607":"df.dtypes  # Displaying Data types of each feature.","0c0a754d":"print(df.isnull().sum())","c6b67493":"df.info()","1fdaca4f":"df.Reviews = df.Reviews.astype('int64') #Changing to int type.","62eefd42":"df.info()","8d04cf0e":"df.info()","34ea7710":"newInstalls = []\n\nfor row in df.Installs:\n    \n    row = row[:-1]\n    newRow = row.replace(\",\", \"\")\n    newInstalls.append(float(newRow))\n    \n\ndf.Installs = newInstalls\n\ndf.Installs.head()","e4662ee1":"newSize = []\n\nfor row in df.Size:\n    newrow = row[:-1]\n    try:\n        newSize.append(float(newrow))\n    except:\n        newSize.append(0) #When it says - Size Varies.\n    \ndf.Size = newSize\n\ndf.Size.head()","b9b3a679":"newPrice = []\n\nfor row in df.Price:\n    if row!= \"0\":\n        newrow = float(row[1:])\n    else:\n        newrow = 0 \n        \n    newPrice.append(newrow)\n        \ndf.Price = newPrice\n\ndf.Price.head()\n    ","b8f71620":"newVer = []\n\nfor row in df['Android Ver']:\n    try:\n        newrow = float(row[:2])\n    except:\n        newrow = 0  # When the value is - Varies with device\n    \n    newVer.append(newrow)\n    \ndf['Android Ver'] =  newVer\n\ndf['Android Ver'].value_counts()","013889fe":"df.Category.value_counts() ","83719339":"df.Category.value_counts().plot(kind='barh',figsize= (12,8))","96c5f680":"df.Rating.describe()","3ec9700c":"sns.distplot(df.Rating)","a730c2c4":"print(\"No. of Apps with full ratings: \",df.Rating[df['Rating'] == 5 ].count())","33cbd53b":"plt.figure(figsize=(5,2))\nsns.distplot(df.Reviews)","41815565":"df[df.Reviews>40000000]","8285ffe1":"plt.pie(df.Type.value_counts(), labels=['Free', 'Paid'], autopct='%1.1f%%')","57f8d2a6":"df[df.Price == df.Price.max()]","bf4753e7":"df['Android Ver'].value_counts()","6611873f":"sns.countplot(df['Android Ver'])","3f8c5534":"plt.figure(figsize=(20,10))\nsns.countplot(df['Rating'])","b34ddd47":"df.Rating.head(30)","61978218":"df.head()","a84785a5":"df.Genres.value_counts().plot(kind='line')","bacd59d4":"sns.boxplot((df['Rating']))","ee1a8fca":"sns.boxplot((df['Android Ver']))","0748c5f8":"sns.violinplot((df['Android Ver']))","3eea2e58":"sns.violinplot((df['Reviews']))","e08450db":"sns.violinplot((df['Rating']))","fd883dab":"df.Price.value_counts().plot(kind='line')","9c78193f":"sns.violinplot((df['Installs']))","bfc3a572":"df_full = df[df.Rating == 5]\n\ndf_full.head()","95e59c16":"sns.distplot(df_full.Installs)","0c76f73d":"df_full.Installs.value_counts().sort_index()","983bf5c7":"df_full_maxinstalls = df_full[df.Installs > 1000]\n\ndf_full_maxinstalls[['App', 'Category', 'Installs']]","491ab434":"sns.distplot(df_full.Reviews)","cada0afd":"df_full = df_full[df.Reviews > 30]","43777933":"print(\"No. of Apps having 5.0 Rating with sufficient Reviews: \",df_full.App.count())","59e26845":"plt.figure(figsize=(12,5))\nsns.countplot(df_full.Genres)","c26911f4":"sns.countplot(df_full.Price)","b605b962":"df_four = df[df.Rating == 4]","8a93030f":"df_four.head()","82a6b798":"df_four.shape","6cd4a6fd":"plt.figure(figsize=(12,5))\nsns.countplot(df_four.Price)","1829e699":"plt.figure(figsize=(20,5))\nsns.countplot(df_full.Category)","e1b9933b":"df_three = df[df.Rating == 3]","28ddab61":"df_three.head()","00ed1eea":"df_three.shape","5ba9ca4d":"plt.figure(figsize=(80,15))\nsns.countplot(df_three.Genres)","47e435eb":"plt.figure(figsize=(40,5))\nsns.countplot(df_three.Category)","d62aa359":"plt.figure(figsize=(12,5))\nsns.countplot(df_three.Price)","f7b56be6":"df[df.Rating == df.Rating.max()]","430b4a42":"df[df['Rating'] == 19]\n","fc2ee196":"df[\"Last Updated\"] = pd.to_datetime(df['Last Updated'])\ndf['year_added']=df['Last Updated'].dt.year\ndf['month_added']=df['Last Updated'].dt.month","fa945f77":"df.head()","b388d1b7":"df.columns","7a689c73":"df.info()","b1be8106":"import plotly\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\ncol = \"Type\"\ngrouped = df[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\n## plot\ntrace = go.Pie(labels=grouped[col], values=grouped['count'], pull=[0.05, 0])\nlayout = {'title': 'Target(0 = No, 1 = Yes)'}\nfig = go.Figure(data = [trace], layout = layout)\niplot(fig)","17227c24":"d1=df[df['Type']=='Free']\nd2=df[df['Type']=='Paid']","a71d8d86":"col='year_added'\nv1=d1[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1['percent']=v1['count'].apply(lambda x : 100*x\/sum(v1['count']))\nv1=v1.sort_values(col)\nv2=d2[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\nv2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(col)\ntrace1 = go.Scatter(x=v1[col], y=v1[\"count\"], name=\"Free\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Scatter(x=v2[col], y=v2[\"count\"], name=\"Paid\", marker=dict(color=\"#6ad49b\"))\ny = [trace1, trace2]\nlayout={'title':\"app udated or added over the years\",'xaxis':{'title':\"years\"}}\nfig = go.Figure(data=y, layout=layout)\niplot(fig)","4c2275d9":"col='month_added'\nv1=d1[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1['percent']=v1['count'].apply(lambda x : 100*x\/sum(v1['count']))\nv1=v1.sort_values(col)\ntrace1 = go.Bar(x=v1[col], y=v1[\"count\"], name=\"Free\", marker=dict())\nlayout={'title':\"Free App added over the month\",'xaxis':{'title':\"months\"}}\nfig = go.Figure(data=[trace1], layout=layout)\niplot(fig)","e8ecd840":"col='Content Rating'\nv1=d1[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1['percent']=v1['count'].apply(lambda x : 100*x\/sum(v1['count']))\nv1=v1.sort_values(col)\ntrace1 = go.Bar(x=v1[col], y=v1[\"count\"], name=\"Free\", marker=dict())\nlayout={'title':\"Free App Content Rating \",'xaxis':{'title':\"Contents\"}}\nfig = go.Figure(data=[trace1], layout=layout)\niplot(fig)","fc986568":"col='Content Rating'\nv2=d2[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\nv2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(col)\ntrace1 = go.Bar(x=v2[col], y=v2[\"count\"], name=\"aid\",  marker=dict(color=\"#6ad49b\"))\nlayout={'title':\"Paid App Content Rating\",'xaxis':{'title':\"contents\"}}\nfig = go.Figure(data=[trace1], layout=layout)\niplot(fig)","7edb648d":"col='Rating'\nv1=d1[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1['percent']=v1['count'].apply(lambda x : 100*x\/sum(v1['count']))\nv1=v1.astype(str).sort_values(col)\nv2=d2[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\nv2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(col)\ntrace1 = go.Scatter(x=v1[col], y=v1[\"count\"], name=\"Free\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Scatter(x=v2[col], y=v2[\"count\"], name=\"Paid\", marker=dict(color=\"#6ad49b\"))\ny = [trace1, trace2]\nlayout={'title':\"Ratings of the free vs paid app\",'xaxis':{'title':\"Ratings\"}}\nfig = go.Figure(data=y, layout=layout)\niplot(fig)","9942e06d":"col='Rating'\nv1=d1[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1['percent']=v1['count'].apply(lambda x : 100*x\/sum(v1['count']))\ntrace1 = go.Bar(x=v1[col], y=v1[\"count\"], name=\"Free\", marker=dict())\nlayout={'title':\"Free App Rating\",'xaxis':{'title':\"Ratings\"}}\nfig = go.Figure(data=[trace1], layout=layout)\niplot(fig)","e7640941":"col='Rating'\nv2=d2[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\nv2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(col)\ntrace1 = go.Bar(x=v2[col], y=v2[\"count\"], name=\"Paid\",  marker=dict(color=\"#6ad49b\"))\nlayout={'title':\"Paid App Rating\",'xaxis':{'title':\"Ratingss\"}}\nfig = go.Figure(data=[trace1], layout=layout)\niplot(fig)","1a504e3b":"col='Category'\nv1=d1[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1['percent']=v1['count'].apply(lambda x : 100*x\/sum(v1['count']))\nv1=v1.sort_values(col)\nv2=d2[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\nv2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(col)\ntrace1 = go.Scatter(x=v1[col], y=v1[\"count\"], name=\"Free\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Scatter(x=v2[col], y=v2[\"count\"], name=\"Paid\", marker=dict(color=\"#6ad49b\"))\ny = [trace1, trace2]\nlayout={'title':\"App Category\"}\nfig = go.Figure(data=y, layout=layout)\niplot(fig)","1bee0d34":"col='Android Ver'\nv1=d1[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1['percent']=v1['count'].apply(lambda x : 100*x\/sum(v1['count']))\nv1=v1.sort_values(col)\nv2=d2[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\nv2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(col)\ntrace1 = go.Scatter(x=v1[col], y=v1[\"count\"], name=\"Free\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Scatter(x=v2[col], y=v2[\"count\"], name=\"Paid\", marker=dict(color=\"#6ad49b\"))\ny = [trace1, trace2]\nlayout={'title':\"Android Versions\"}\nfig = go.Figure(data=y, layout=layout)\niplot(fig)","553e527d":"col='Installs'\nv1=d1[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1['percent']=v1['count'].apply(lambda x : 100*x\/sum(v1['count']))\nv1=v1.sort_values(col)\nv2=d2[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\nv2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(col)\ntrace1 = go.Scatter(x=v1[col], y=v1[\"count\"], name=\"Free\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Scatter(x=v2[col], y=v2[\"count\"], name=\"Paid\", marker=dict(color=\"#6ad49b\"))\ny = [trace1, trace2]\nlayout={'title':\"Installed App \",'xaxis':{'title':\"Installs\"}}\nfig = go.Figure(data=y, layout=layout)\niplot(fig)","43def7c1":"d3=df[df['Rating']==4.5]\nd4=df[df['Rating']==4]","9fd80a6e":"col='Content Rating'\nv1=d3[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1['percent']=v1['count'].apply(lambda x : 100*x\/sum(v1['count']))\nv1=v1.sort_values(col)\nv2=d4[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\nv2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(col)\ntrace1 = go.Bar(x=v1[col], y=v1[\"count\"], name=\"rating = 4.5\", marker=dict(color=\"#6ad49b\"))\ntrace2 = go.Bar(x=v2[col], y=v2[\"count\"], name=\"rating = 4\", marker=dict())\ny = [trace1, trace2]\nlayout={'title':\"Rating over the contents\",'xaxis':{'title':\"Content Rating\"}}\nfig = go.Figure(data=y, layout=layout)\niplot(fig)","f8b055f6":"col='Android Ver'\nv1=d3[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1['percent']=v1['count'].apply(lambda x : 100*x\/sum(v1['count']))\nv1=v1.sort_values(col)\nv2=d4[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\nv2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(col)\ntrace1 = go.Scatter(x=v1[col], y=v1[\"count\"], name=\"rating = 4.5\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Scatter(x=v2[col], y=v2[\"count\"], name=\"rating = 4\", marker=dict(color=\"#6ad49b\"))\ny = [trace1, trace2]\nlayout={'title':\"Rating over the Android Version \"}\nfig = go.Figure(data=y, layout=layout)\niplot(fig)","b3963428":"col='Category'\nv1=d3[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1['percent']=v1['count'].apply(lambda x : 100*x\/sum(v1['count']))\nv1=v1.sort_values(col)\nv2=d4[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\nv2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(col)\ntrace1 = go.Bar(x=v1[col], y=v1[\"count\"], name=\"rating = 4.5\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=v2[col], y=v2[\"count\"], name=\"rating = 4\", marker=dict())\ny = [trace1, trace2]\nlayout={'title':\"Category wise Rating\"}\nfig = go.Figure(data=y, layout=layout)\niplot(fig)","52b0e3e3":"col='Installs'\nv1=d3[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1['percent']=v1['count'].apply(lambda x : 100*x\/sum(v1['count']))\nv1=v1.sort_values(col)\nv2=d4[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\nv2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(col)\ntrace1 = go.Scatter(x=v1[col], y=v1[\"count\"], name=\"rating = 4.5\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Scatter(x=v2[col], y=v2[\"count\"], name=\"rating = 4\", marker=dict(color=\"#6ad49b\"))\ny = [trace1, trace2]\nlayout={'title':\"Rating over total Installs \",'xaxis':{'title':\"Installs\"}}\nfig = go.Figure(data=y, layout=layout)\niplot(fig)","d6a7f1ba":"df[\"Rating\"] = df[\"Reviews\"].apply(lambda x: 1 if x > 3 else 0)\n\n","9ecec16c":"df.Rating.value_counts().sort_index()","ff1e08b6":"df","c50cb754":"df.isnull().sum().sum()\n","252a0a20":"catgry=pd.get_dummies(df['Category'],prefix='catg',drop_first=True)\ntyp=pd.get_dummies(df['Type'],prefix='typ',drop_first=True)\ncr=pd.get_dummies(df['Content Rating'],prefix='cr',drop_first=True)\nframes=[df,catgry,typ,cr]\ndf=pd.concat(frames,axis=1)\ndf.drop(['Category','Installs','Type','Content Rating'],axis=1,inplace=True)","89551bce":"df.shape","3a52e213":"df.drop(['App','Size','Price','Genres','Last Updated','Current Ver','Android Ver'],axis=1,inplace=True)","887c3bb8":"df.head()","823a385b":"df.shape","c9a5e453":"X=df.drop('Rating',axis=1)\ny=df['Rating'].values\ny=y.astype('int')","1570bab1":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=0)","feb6dd5f":"from sklearn.preprocessing import StandardScaler\nsc_X=StandardScaler()\nX_train=sc_X.fit_transform(X_train)\nX_test=sc_X.transform(X_test)","47be10a7":"from sklearn.utils import resample\ndf_majority = df[df.Rating==1]\ndf_minority = df[df.Rating==0]\n# Upsample minority class\ndf_minority_upsampled = resample(df_minority, \n                                 replace=True,     # sample with replacement\n                                 n_samples=8661,    # to match majority class\n                                 random_state=225)\n# Combine majority class with upsampled minority class\ndf_upsampled = pd.concat([df_majority, df_minority_upsampled])\n \n# Display new class counts\ndf_upsampled.Rating.value_counts()\n","8048d822":"y = df_upsampled.Rating\nX = df_upsampled.drop('Rating', axis=1)\n \n# Train model\nclf_1 = LogisticRegression().fit(X, y)\n \n# Predict on training set\npred_y_1 = clf_1.predict(X)\n \n# Is our model still predicting just one class?\nprint( np.unique( pred_y_1 ) )\n# [0 1]\n \n# How's our accuracy?\nprint( accuracy_score(y, pred_y_1) )","3866485e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=0)","047ac1b8":"#LogisticRegression\nlr_c=LogisticRegression(random_state=0)\nlr_c.fit(X_train,y_train)\nlr_pred=lr_c.predict(X_test)\nlr_cm=confusion_matrix(y_test,lr_pred)\nlr_ac=accuracy_score(y_test, lr_pred)\nprint('LogisticRegression_accuracy:',lr_ac)","e1b69b87":"plt.figure(figsize=(10,5))\nplt.title(\"lr_cm\")\nsns.heatmap(lr_cm,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False)\nplt.show()","e6b8428f":"# DecisionTree Classifier\ndtree_c=DecisionTreeClassifier(criterion='entropy',random_state=0)\ndtree_c.fit(X_train,y_train)\ndtree_pred=dtree_c.predict(X_test)\ndtree_cm=confusion_matrix(y_test,dtree_pred)\ndtree_ac=accuracy_score(dtree_pred,y_test)","d316ea7f":"plt.figure(figsize=(10,5))\nplt.title(\"dtree_cm\")\nsns.heatmap(dtree_cm,annot=True,fmt=\"d\",cbar=False)\nprint('DecisionTree_Classifier_accuracy:',dtree_ac)","7724acb8":"#SVM \nsvc_r=SVC(kernel='rbf')\nsvc_r.fit(X_train,y_train)\nsvc_pred=svc_r.predict(X_test)\nsvc_cm=confusion_matrix(y_test,svc_pred)\nsvc_ac=accuracy_score(y_test, svc_pred)","f1d5828a":"plt.figure(figsize=(10,5))\nplt.title(\"svm_cm\")\nsns.heatmap(svc_cm,annot=True,cmap=\"Oranges\",fmt=\"d\",cbar=False)\nprint('SVM_Classification_accuracy:',svc_ac)","b124c868":"#RandomForest\nrdf_c=RandomForestClassifier(n_estimators=10,criterion='entropy',random_state=0)\nrdf_c.fit(X_train,y_train)\nrdf_pred=rdf_c.predict(X_test)\nrdf_cm=confusion_matrix(y_test,rdf_pred)\nrdf_ac=accuracy_score(rdf_pred,y_test)","072b7803":"plt.figure(figsize=(10,5))\nplt.title(\"rdf_cm\")\nsns.heatmap(rdf_cm,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False)\nprint('RandomForest_accuracy:',rdf_ac)","31aa6449":"%matplotlib inline\nmodel_accuracy = pd.Series(data=[lr_ac,dtree_ac,svr_ac,rdf_ac], \n        index=['Logistic_Regression','DecisionTree_Classifier','SVM_regressor_accuracy','RandomForest'])\nfig= plt.figure(figsize=(8,8))\nmodel_accuracy.sort_values().plot.barh()\nplt.title('Model Accracy')","0faec6b8":"By ovserving the above plot highest installs of the apps are crossing the 1M than 10M than 100k, very less app are crossing the 500M and dream install 1B . some apps like Instagram, Youtoube, Facebook Whtsapp etc are crossing the dream installs 1B.","b7a856da":"RandomForest\n\nThe random forest is a classification algorithm consisting of many decisions trees. It uses bagging and feature randomness when building each individual tree to try to create an uncorrelated forest of trees whose prediction by committee is more accurate than that of any individual tree","8112d832":"Models comparision\nThe key to a fair comparison of machine learning algorithms is ensuring that each algorithm is evaluated in the same way on the same data. You can achieve this by forcing each algorithm to be evaluated on a consistent test harness. In this notebbok 4 different algorithms are compared","e1ef8c1b":"StandardScaler will transform your data such that its distribution will have a mean value 0 and standard deviation of 1. Given the distribution of the data, each value in the dataset will have the sample mean value subtracted, and then divided by the standard deviation of the whole dataset.","21960dc1":"Logestic Regression\n\nLogistic regression is a statistical model that in its basic form uses a logistic function to model a binary dependent variable, although many more complex extensions exist. In regression analysis, logistic regression (or logit regression) is estimating the parameters of a logistic model (a form of binary regression).","cd217310":"Here we added 2 more columns in the data set by spliting the last updated attribute, by doing this we find that in which year apps are added or updated on playstore.","4bad8a1e":"In the above plot we plot the app updated or added over the year Free vs Paid. By observing this plot we conclude that before 2011 there were no paid apps (after that google thinks that people have lots of money so why not take some charge for some apps >> just for fun ). But with the year free apps are added in huge ammount in comparision to paid apps --> people does not like paid services.\n\nBy compairing the app updated or added in the year 2011 and 2018 free apps are increases from 80% to 96% and paid apps are goes from 20% to 4%.\n\nSEE!! told you already that people like free service more than paid service.","7a6926a0":"Most important things about apps are there rating we even didn't see the app's whose ratings are less than 3.5 . Before downloading the app first we see the rating of app if the app rating is more then 4 than we say that yeah this is a good category of app then after we see other attribute of apps. Very less people see the review's of app. My personal observation is that some of the good people who are pationate about the technology and have enough time give the review of app. (we are data scientist and our maximum time goes in the cleaning of data).","25efe6cf":"DecisionTree Classifier\n\nA decision tree classifier is a tree in which internal nodes are labeled by features. ... The classifier categorizes an object xi by recursively testing for the weights that the features labeling the internal nodes have in vector xi, until a leaf node is reached. The label of this node is then assigned to xi","576d6ddb":"We already discuss about the category of the apps that most of the apps are belongs to the category of Family Game and Tools. --> 2nd most category of apps are Games kids now these days!!!"}}