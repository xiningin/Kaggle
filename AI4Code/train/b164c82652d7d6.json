{"cell_type":{"99164de3":"code","3ca21142":"code","25b981af":"code","c7415081":"code","88a647bc":"code","afca7fa3":"code","f720af7f":"code","1897fb58":"code","393e83ba":"code","4f34521a":"code","ec61a0b5":"code","f7e01df3":"code","8bcb4ea5":"code","b880eb99":"code","3dbf4cf2":"code","17da987c":"markdown"},"source":{"99164de3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nprint(os.listdir(\"..\/input\"))","3ca21142":"df_train = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")","25b981af":"df_train.head()","c7415081":"df_train.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_test.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)","88a647bc":"df_train['Age'] = df_train['Age'].fillna(df_train['Age'].mean())\ndf_train['Embarked'] = df_train['Embarked'].fillna(df_train['Embarked'].mode()[0])\ndf_train['Fare'] = df_train['Fare'].fillna(df_train['Fare'].mean())\n\ndf_test['Age'] = df_test['Age'].fillna(df_test['Age'].mean())\ndf_test['Embarked'] = df_test['Embarked'].fillna(df_test['Embarked'].mode()[0])\ndf_test['Fare'] = df_test['Fare'].fillna(df_test['Fare'].mean())","afca7fa3":"df_train = pd.get_dummies(df_train)\ndf_test = pd.get_dummies(df_test)","f720af7f":"df_train.head()","1897fb58":"import h2o\nfrom h2o.automl import H2OAutoML\nh2o.init()","393e83ba":"htrain = h2o.H2OFrame(df_train)\nhtest = h2o.H2OFrame(df_test)\n\nx = htrain.columns\ny = 'Survived'\nx.remove(y)\n\nhtrain[y] = htrain[y].asfactor()","4f34521a":"aml = H2OAutoML(max_runtime_secs = 30000,nfolds=10)\naml.train(x=x, y =y, training_frame=htrain)\nlb = aml.leaderboard\n\nprint (lb)\nprint('Generate predictions\u2026')\ntest_y = aml.leader.predict(htest)\ntest_y = test_y.as_data_frame()","ec61a0b5":"hpred = h2o.H2OFrame(test_y)\nresult = htest.cbind(hpred)","f7e01df3":"result = result[:, [\"PassengerId\", \"predict\"]]","8bcb4ea5":"submission  = result.as_data_frame()","b880eb99":"submission.rename(index=str, columns={\"predict\": \"Survived\"}, inplace=True)\nsubmission.head()","3dbf4cf2":"submission.to_csv('submission.csv', index=False)","17da987c":"##                max_runtime_secs=36000,\u6700\u5927\u8fd0\u884c\u65f6\u95f4\n#                max_runtime_secs_per_model=3600,\u6700\u5927\u5355\u6a21\u578b\u8fd0\u884c\u65f6\u95f4\n#seed\uff0c\u968f\u4fbf\u9009\uff0c\u968f\u673a\u79cd\u5b50\n#                nfolds=10, \u4ea4\u53c9\u9a8c\u8bc1\uff0c\u8d8a\u5927\u4ea4\u53c9\u9a8c\u8bc1\u5ea6\u8d8a\u9ad8\uff0c\u7ed3\u679c\u8d8a\u597d\uff0c\u8d8a\u8017\u65f6\uff0c\u9ed8\u8ba4\u4e3a5\n#sort_metric: Specifies the metric used to sort the Leaderboard by at the end of an AutoML run. Available options include:\n#AUTO: This defaults to AUC for binary classification, mean_per_class_error for multinomial classification, and deviance for regression.\n#For binomial classification choose between AUC, \"logloss\", \"mean_per_class_error\", \"RMSE\", \"MSE\". For multinomial classification choose between \"mean_per_class_error\", \"logloss\", \"RMSE\", \"MSE\". For regression choose between \"deviance\", \"RMSE\", \"MSE\", \"MAE\", \"RMLSE\".\n#max_models=333,\u6700\u5927\u6a21\u578b\u6570\u76ee\uff1b\u9ed8\u8ba4\u4e3a\u65e0\u7a77\u5927\n#                include_algos=['XGBoost'], \u6b64\u9009\u9879\u5141\u8bb8\u60a8\u6307\u5b9a\u5728\u6a21\u578b\u6784\u5efa\u9636\u6bb5\u8981\u5305\u62ec\u5728AutoML\u8fd0\u884c\u4e2d\u7684\u7b97\u6cd5\u5217\u8868\u3002\u8be5\u9009\u9879\u9ed8\u8ba4\u4e3aNone \/ Null\uff0c\u8fd9\u610f\u5473\u7740\u5c06\u5305\u62ec\u6240\u6709\u7b97\u6cd5\uff0c\u9664\u975e\u5728\u8be5exclude_algos\u9009\u9879\u4e2d\u6307\u5b9a\u4e86\u4efb\u4f55\u7b97\u6cd5\u3002\n#                verbosity='info'\u4f20\u9012\u4f55\u79cd\u4fe1\u606f\uff0cinfo\u4e3a\u5168\u90e8"}}