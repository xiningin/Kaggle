{"cell_type":{"91d896f8":"code","77626e0d":"code","e0ead1a5":"code","a7d1c7b5":"code","5bce828d":"code","c94991f8":"code","7f20143f":"code","bf1352fa":"code","c86da9dd":"markdown","3dfd8a1b":"markdown","7b3f3532":"markdown","b707a1c8":"markdown","ec6d9619":"markdown","133b84b4":"markdown"},"source":{"91d896f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","77626e0d":"df=pd.read_csv('..\/input\/50_Startups.csv')","e0ead1a5":"df.head()\n#df.info()","a7d1c7b5":"X=df.iloc[:,:-1].values #predictor varables\ny=df.iloc[:,4].values #outcome variable","5bce828d":"from sklearn.preprocessing import LabelEncoder,OneHotEncoder\nlabelencoder=LabelEncoder()\nX[:,3]=labelencoder.fit_transform(X[:,3])\nonehotencoder=OneHotEncoder()\nX=onehotencoder.fit_transform(X).toarray()\n\n#Avoiding the Dummy Variable Trap\nX=X[:,1:]","c94991f8":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","7f20143f":"from sklearn.linear_model import LinearRegression\nmodel=LinearRegression()\nmodel.fit(X_train,y_train)\n\n#extracting data from model\nprint('y intercepts:',model.intercept_) #prints y intercept\nprint('model coeff:',model.coef_) #prints the coefficients in the same order as they are passed\n\n#predicting the test set results\ny_pred=model.predict(X_test)\nprint('predictions:',y_pred)","bf1352fa":"#import metrics library\nfrom sklearn import metrics\nprint('MAE',metrics.mean_absolute_error(y_test,y_pred)) #calculating mean absolute error MAE\n\nprint('MSE',metrics.mean_squared_error(y_test,y_pred)) #calculating mean squared error MSE\n\nprint('RMSE',np.sqrt(metrics.mean_squared_error(y_test,y_pred))) #calulating root mean squared error RMSE","c86da9dd":"**Reading data**","3dfd8a1b":"**Splitting the data into test dataset and training dataset**","7b3f3532":"**With careful feature selection we can further reduce the RMSE.**","b707a1c8":"**Model Evaulation**","ec6d9619":"**From sklearn training our model**","133b84b4":"**Since state is string type we can convert this categorical feature\ninto numerical using LabelEncoder,OneHotEncoder**"}}