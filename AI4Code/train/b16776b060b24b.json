{"cell_type":{"1115786e":"code","76754292":"code","2e09d76f":"code","1b77b8a2":"code","61a2424a":"code","323b8d59":"code","f7947b00":"code","4c574930":"code","bc144749":"code","da8fcb0d":"code","8da37871":"code","715b950e":"code","181f32d8":"code","467545e1":"code","99168abe":"code","171caac3":"code","f3331472":"code","8d434b21":"code","4727082e":"code","d6f77b3e":"code","110dfa3e":"code","608391ce":"code","0b677ab6":"code","e38c0d1c":"code","61f19070":"code","afb2850d":"code","e14c4ae2":"code","823486bb":"code","96cf5402":"code","7e5ef1f0":"code","db54eab8":"code","c324af3b":"code","6db30a3b":"code","46ff513a":"code","ed4b7a21":"code","4e5da5c7":"code","e30a8b4d":"code","ffcb2b1d":"code","6ea931a5":"code","7d350ed8":"code","fdd3b518":"code","deffbcf3":"code","968d11a5":"code","65dd6c74":"code","4d03b522":"code","02773b60":"code","25c89c8a":"code","600d6f5c":"code","7f01b3c1":"code","e44c8bde":"markdown","f381d382":"markdown","46a7cf7b":"markdown","cf9d525f":"markdown","ecddcb36":"markdown","02599dd4":"markdown","3f872ac8":"markdown","55f5cef3":"markdown","98331d18":"markdown","5931db91":"markdown","32c6db79":"markdown","ec5bc8fe":"markdown","7206a86d":"markdown","84ec27a7":"markdown","dadcee48":"markdown","777f7175":"markdown","2ac013cc":"markdown","b1c54138":"markdown","6bf65c36":"markdown","69a88425":"markdown","1e6f8147":"markdown","ea05e4c6":"markdown","16d0ce86":"markdown"},"source":{"1115786e":"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\nimport random\nimport pandas as pd\nimport scipy.stats as stat\nfrom collections import Counter\nfrom scipy.stats import t\nfrom scipy.stats import norm\nfrom sklearn.utils import shuffle\n\nimport os\n\npath = os.environ['PATH']\n\nif path.startswith('C'):\n    IN_KAGGLE = False\nelse:\n    IN_KAGGLE = True","76754292":"# Para uso com fun\u00e7\u00f5es da biblioteca standard (ex random.randint)\nrandom.seed(1)\n# Para uso com fun\u00e7\u00f5es da biblioteca numpy (ex np.random.randint)\nnp.random.seed(1)\n\n# Quando for passada como par\u00e2metro a seed\nrandom_state = 1","2e09d76f":"# Calcula n\u00famero de desvios na distribui\u00e7\u00e3o t de student para determinada confianca\n\n\ndef calcula_Z_tstudent(confianca, tamanho_amostra):\n    mean = 0\n    std = 1\n    rv = t(df=(tamanho_amostra-1))\n    return rv.interval(confianca)[1]","1b77b8a2":"# Calcula n\u00famero de desvios na distribui\u00e7\u00e3o normal para determinada confianca\n\n\ndef calcula_Z_normal(confianca):\n    mean = 0\n    std = 1\n    rv = norm(loc=mean, scale=std)\n    return rv.interval(confianca)[1]","61a2424a":"# Calcula n\u00famero de desvios na distribui\u00e7\u00e3o normal para determinada confianca e m\u00faltiplas propor\u00e7\u00f5es\n\ndef calcula_Z_Multiplas_Proporcoes(confianca, numero_proporcoes):\n    area = math.pow(  confianca, 1\/(numero_proporcoes-1) )\n    return calcula_Z_normal(area)\n\n","323b8d59":"def calcula_P_Value_Proporcao(proporcao_amostra, tamanho_amostra, proporcao_populacao):\n    p_value = 0  \n    z = (proporcao_amostra - proporcao_populacao)\/np.sqrt((proporcao_populacao*(1-proporcao_populacao))\/tamanho_amostra)\n    if (tamanho_amostra>=30):\n        if z<0:\n            p_value = norm.cdf(z)\n        else:\n            p_value = norm.sf(z)\n    else:\n        if z<0:\n            p_value = t.cdf(z, df=(tamanho_amostra-1))\n        else:\n            p_value = t.sf(z, df=(tamanho_amostra-1))\n    \n    return z, p_value \n        \n       ","f7947b00":"def calcula_P_Value_Media(media_amostra, tamanho_amostra, desvio_amostra, media_populacao, desvio_populacao):\n        \n    if (desvio_populacao!=0) & (tamanho_amostra>=30):\n        return calcula_P_Value_Normal(media_amostra, tamanho_amostra, media_populacao, desvio_populacao)\n    else:\n        if (desvio_populacao==0):\n            desvio_populacao = desvio_amostra\n        if (desvio_amostra==0):\n            desvio_amostra = desvio_populacao\n        return calcula_P_Value_Media_T_Student(media_amostra, tamanho_amostra, media_populacao, desvio_amostra)","4c574930":"def calcula_P_Value_Media_Normal(media_amostra, tamanho_amostra, media_populacao, desvio_populacao):\n    SE = (desvio_populacao\/np.sqrt(tamanho_amostra))\n    z = (media_amostra - media_populacao)\/SE\n    if z<0:\n        p_value = norm.cdf(z)\n    else:\n        p_value = norm.sf(z)\n    return z, p_value","bc144749":"def calcula_P_Value_Media_T_Student(media_amostra, tamanho_amostra, media_populacao, desvio_populacao):\n    SE = (desvio_populacao\/np.sqrt(tamanho_amostra))\n    z = (media_amostra - media_populacao)\/SE\n    if z<0:\n        p_value = t.cdf(z, df=(tamanho_amostra-1))\n    else:\n        p_value = t.sf(z, df=(tamanho_amostra-1))\n    return z, p_value","da8fcb0d":"def teste_hipotese_media_desvio_populacao(significancia, tipo, media_amostra, tamanho_amostra, media_populacao, desvio_populacao ):\n    z, p_value = calcula_P_Value_Media(media_amostra, tamanho_amostra, 0, media_populacao, desvio_populacao)\n    if tipo == 'bilateral':\n        significancia = significancia\/2\n    if p_value < significancia:\n        return 'H0 rejeitada tendo em vista que p-value={} correspondente a z={} menor que signific\u00e2ncia {}'.format(p_value,z,significancia)\n    else:\n        return 'H0 n\u00e3o rejeitada tendo em vista que p-value={} correspondente a z={} maior que signific\u00e2ncia {}'.format(p_value,z,significancia)","8da37871":"def teste_hipotese_media_desvio_amostra(significancia, tipo, media_amostra, desvio_amostra, tamanho_amostra, media_populacao ):\n    z, p_value = calcula_P_Value_Media(media_amostra, tamanho_amostra, desvio_amostra, media_populacao, 0)\n    if tipo == 'bilateral':\n        significancia = significancia\/2\n    if p_value < significancia:\n        return 'H0 rejeitada tendo em vista que p-value={} correspondente a z={} menor que signific\u00e2ncia {}'.format(p_value,z,significancia)\n    else:\n        return 'H0 n\u00e3o rejeitada tendo em vista que p-value={} correspondente a z={} maior que signific\u00e2ncia {}'.format(p_value,z,significancia)","715b950e":"def teste_hipotese_proporcao(significancia, tipo, proporcao_amostra, tamanho_amostra, proporcao_populacao ):\n    z, p_value = calcula_P_Value_Proporcao(proporcao_amostra, tamanho_amostra, proporcao_populacao)\n    if tipo == 'bilateral':\n        significancia = significancia\/2\n    if p_value < significancia:\n        return 'H0 rejeitada tendo em vista que p-value={} correspondente a z={} menor que signific\u00e2ncia {}'.format(p_value,z,significancia)\n    else:\n        return 'H0 n\u00e3o rejeitada tendo em vista que p-value={} correspondente a z={} maior que signific\u00e2ncia {}'.format(p_value,z,significancia)","181f32d8":"def teste_hipotese_media_duas_amostras_desvio_populacao(significancia, tipo, \n                                                        media_amostra_1, tamanho_amostra_1, desvio_populacao_1,\n                                                        media_amostra_2, tamanho_amostra_2, desvio_populacao_2,\n                                                     diferenca = 0 ):\n    SE = np.sqrt((np.power(desvio_populacao_1,2)\/tamanho_amostra_1)+(np.power(desvio_populacao_2,2)\/tamanho_amostra_2))\n    if media_amostra_1>media_amostra_2:\n        z = (media_amostra_1 - media_amostra_2 - diferenca)\/SE\n    else:\n        z = (media_amostra_2 - media_amostra_1 - diferenca)\/SE\n    if z<0:\n        p_value = norm.cdf(z)\n    else:\n        p_value = norm.sf(z)\n    \n    \n    if tipo == 'bilateral':\n        significancia = significancia\/2\n    if p_value < significancia:\n        return 'H0 rejeitada tendo em vista que p-value={} correspondente a z={} menor que signific\u00e2ncia {}'.format(p_value,z,significancia)\n    else:\n        return 'H0 n\u00e3o rejeitada tendo em vista que p-value={} correspondente a z={} maior que signific\u00e2ncia {}'.format(p_value,z,significancia)","467545e1":"def teste_hipotese_media_duas_amostras_desvio_amostra(significancia, tipo,\n                                                        media_amostra_1, tamanho_amostra_1, desvio_amostra_1,\n                                                        media_amostra_2, tamanho_amostra_2, desvio_amostra_2,\n                                                     diferenca = 0):\n    S2 = ( (tamanho_amostra_1-1)*np.power(desvio_amostra_1,2) + (tamanho_amostra_2-1)*np.power(desvio_amostra_2,2) )\/ (tamanho_amostra_1+tamanho_amostra_2-2)\n    SE = np.sqrt( S2 * (1\/tamanho_amostra_1 + 1\/tamanho_amostra_2) )\n    if media_amostra_1>media_amostra_2:\n        z = (media_amostra_1 - media_amostra_2 - diferenca)\/SE\n    else:\n        z = (media_amostra_2 - media_amostra_1 - diferenca)\/SE\n    if z<0:\n        p_value = t.cdf(z, df=(tamanho_amostra_1+tamanho_amostra_2-2))\n    else:\n        p_value = t.sf(z, df=(tamanho_amostra_1+tamanho_amostra_2-2))\n    \n    \n    if tipo == 'bilateral':\n        significancia = significancia\/2\n    if p_value < significancia:\n        return 'H0 rejeitada tendo em vista que p-value={} correspondente a z={} menor que signific\u00e2ncia {}'.format(p_value,z,significancia)\n    else:\n        return 'H0 n\u00e3o rejeitada tendo em vista que p-value={} correspondente a z={} maior que signific\u00e2ncia {}'.format(p_value,z,significancia)","99168abe":"def teste_hipotese_media_duas_amostras_pareadas(significancia, tipo,\n                                                        amostra1,\n                                                amostra2,\n                                                     diferenca = 0):\n    if len(amostra1)!=len(amostra2):\n        return 'ERRO - Tamanhos diferentes de amostra'\n    media_amostra1 = amostra1.mean()\n    media_amostra2 = amostra2.mean()\n    Diferen\u00e7as = Media1 - Media2\n    \n    SD = Diferen\u00e7as.std()\n    SE = SD \/ np.sqrt(tamanho_amostras)\n    if media_amostra_1>media_amostra_2:\n        z = (media_amostra_1 - media_amostra_2 - diferenca)\/SE\n    else:\n        z = (media_amostra_2 - media_amostra_1 - diferenca)\/SE\n    if z<0:\n        p_value = t.cdf(z, df=tamanho_amostras-1)\n    else:\n        p_value = t.sf(z, df=tamanho_amostras-1)\n    \n    \n    if tipo == 'bilateral':\n        significancia = significancia\/2\n    if p_value < significancia:\n        return 'H0 rejeitada tendo em vista que p-value={} correspondente a z={} menor que signific\u00e2ncia {}'.format(p_value,z,significancia)\n    else:\n        return 'H0 n\u00e3o rejeitada tendo em vista que p-value={} correspondente a z={} maior que signific\u00e2ncia {}'.format(p_value,z,significancia)","171caac3":"def teste_hipotese_media_duas_amostras_pareadas(significancia, tipo,\n                                                        media_amostra1,\n                                                media_amostra2,\n                                                desvio_diferencas,\n                                                tamanho_amostras,\n                                                     diferenca = 0):\n    \n    \n    SD = desvio_diferencas\n    SE = SD \/ np.sqrt(tamanho_amostras)\n    \n    if media_amostra_1>media_amostra_2:\n        z = (media_amostra_1 - media_amostra_2 - diferenca)\/SE\n    else:\n        z = (media_amostra_2 - media_amostra_1 - diferenca)\/SE\n    if z<0:\n        p_value = t.cdf(z, df=tamanho_amostras-1)\n    else:\n        p_value = t.sf(z, df=tamanho_amostras-1)\n    \n    \n    if tipo == 'bilateral':\n        significancia = significancia\/2\n    if p_value < significancia:\n        return 'H0 rejeitada tendo em vista que p-value={} correspondente a z={} menor que signific\u00e2ncia {}'.format(p_value,z,significancia)\n    else:\n        return 'H0 n\u00e3o rejeitada tendo em vista que p-value={} correspondente a z={} maior que signific\u00e2ncia {}'.format(p_value,z,significancia)","f3331472":"def teste_hipotese_proporcao_duas_amostras(significancia, tipo, \n                                                        proporcao_amostra_1, tamanho_amostra_1,\n                                                        proporcao_amostra_2, tamanho_amostra_2 ):\n    P = (proporcao_amostra_1*tamanho_amostra_1 + proporcao_amostra_2*tamanho_amostra_2) \/ (tamanho_amostra_1+tamanho_amostra_2)\n    SE = np.sqrt( P * (1-P) * (1\/tamanho_amostra_1 + 1\/tamanho_amostra_2) )\n    z = (proporcao_amostra_1 - proporcao_amostra_2)\/SE\n    if z<0:\n        p_value = norm.cdf(z)\n    else:\n        p_value = norm.sf(z)\n    \n    \n    if tipo == 'bilateral':\n        significancia = significancia\/2\n    if p_value < significancia:\n        return 'H0 rejeitada tendo em vista que p-value={} correspondente a z={} menor que signific\u00e2ncia {}'.format(p_value,z,significancia)\n    else:\n        return 'H0 n\u00e3o rejeitada tendo em vista que p-value={} correspondente a z={} maior que signific\u00e2ncia {}'.format(p_value,z,significancia)","8d434b21":"# Recupera amostra da popula\u00e7\u00e3o\n\ndef recupera_amostra(populacao, tamanho_amostra):\n    tamanho_amostra = int(tamanho_amostra)\n    if type(populacao) is pd.DataFrame:\n        return populacao.sample(tamanho_amostra)\n    else:\n        #return populacao[np.random.randint(0, len(populacao), tamanho_amostra)]\n        return [populacao[i] for i in np.random.randint(0, len(populacao), tamanho_amostra)]","4727082e":"# Fun\u00e7\u00e3o que calcula intervalo de confian\u00e7a para m\u00e9dia com base em uma amostra e a confian\u00e7a desejada\n\ndef calcula_intervalo_media(amostra, confianca, tamanho_populacao=0):\n    tamanho_amostra = len(amostra)\n    \n    #1-Calcule a m\u00e9dia da amostra ex. media_amostra = np.mean(amostra)\n    media_amostra = np.mean(amostra)\n\n    #2-Calcule o desvio da amostra ex. desvio_amostra = np.std(amostra)\n    desvio_amostra = np.std(amostra)\n\n    #3-Calcule quantos desvios precisar\u00e1 para seu grau de confi\u00e2n\u00e7a ex. numero_desvios = calcula_numero_desvios_tstudent_para_confianca(confian\u00e7a, tamanho_amostra)\n    numero_desvios = calcula_Z_tstudent(confianca, tamanho_amostra)\n\n    #4-Calcule o desvio das amostras ex. desvio_amostras = desvio_amostra\/np.sqrt(tamanho_amostra)\n    desvio_amostras = desvio_amostra\/np.sqrt(tamanho_amostra)\n\n    #5-Calcule a margem de erro ex. margem_erro = numero_desvios*desvio_amostras\n    margem_erro = numero_desvios*desvio_amostras\n    \n    if (tamanho_populacao!=0) & (tamanho_amostra>0.05*tamanho_populacao):\n        margem_erro = margem_erro * (np.sqrt(tamanho_populacao-tamanho_amostra)\/np.sqrt(tamanho_populacao-1))\n\n    #6-Calcule o intervalo ex. inferior = media_amostra-margem_erro, superior = media_amostra+margem_erro\n    inferior = media_amostra-margem_erro\n    superior = media_amostra+margem_erro\n\n    return inferior,superior","d6f77b3e":"# Fun\u00e7\u00e3o que calcula intervalo de confian\u00e7a para propor\u00e7\u00e3o de determinado valor com base em uma amostra e a confian\u00e7a desejada\n# O par\u00e2metro valor representa a categoria na amostra para a qual se deseja o intervalo de confian\u00e7a da propor\u00e7\u00e3o, por exemplo o nome de um candidato\n\ndef calcula_intervalo_proporcao(amostra, confianca, valor, tamanho_populacao=0):\n    tamanho_amostra = len(amostra)\n    \n    proporcao_valor = Counter(amostra)[valor]\/tamanho_amostra\n    \n    numero_desvios = calcula_Z_tstudent(confianca, tamanho_amostra)\n\n    margem_erro = numero_desvios*np.sqrt(proporcao_valor*(1-proporcao_valor))\/np.sqrt(tamanho_amostra)\n    \n    if (tamanho_populacao!=0) & (tamanho_amostra>0.05*tamanho_populacao):\n        margem_erro = margem_erro * (np.sqrt(tamanho_populacao-tamanho_amostra)\/np.sqrt(tamanho_populacao-1))\n\n    inferior = proporcao_valor-margem_erro\n    superior = proporcao_valor+margem_erro\n\n    return inferior,superior","110dfa3e":"# Fun\u00e7\u00e3o para c\u00e1lculo do n\u00famero de amostras para m\u00e9dias e somas\n\ndef Tamanho_Amostra_Valor_Pontual(Tamanho_Populacao, Grau_Confianca, Variancia, Margem_Erro):\n    Numero_Desvios = calcula_Z_normal(Grau_Confianca)\n    return math.ceil( \n            (Tamanho_Populacao * math.pow(Numero_Desvios,2) * Variancia) \/ \\\n            ( (Tamanho_Populacao-1)*math.pow(Margem_Erro,2) + math.pow(Numero_Desvios,2)*Variancia )\n            )","608391ce":"# Fun\u00e7\u00e3o para c\u00e1lculo do n\u00famero de amostras para propor\u00e7\u00f5es simples\n\ndef Tamanho_Amostra_Proporcao_Simples(Tamanho_Populacao, Grau_Confianca, Proporcao, Margem_Erro):\n    Numero_Desvios = calcula_Z_normal(Grau_Confianca)\n    return math.ceil( \n            (Tamanho_Populacao * math.pow(Numero_Desvios,2) * Proporcao * (1-Proporcao)) \/ \\\n            ( (Tamanho_Populacao-1)*math.pow(Margem_Erro,2) + math.pow(Numero_Desvios,2)*Proporcao*(1-Proporcao) )\n            )","0b677ab6":"# Fun\u00e7\u00e3o para c\u00e1lculo do tamanho da amostra para propor\u00e7\u00f5es m\u00faltiplas\n\ndef Tamanho_Amostra_Proporcao_Multipla(Tamanho_Populacao, Confianca, Numero_Proporcoes, Margem_Erro):\n    Confianca_ = calcula_Z_Multiplas_Proporcoes(Confianca, Numero_Proporcoes)\n    return math.ceil( \n            (Tamanho_Populacao * math.pow(Confianca_,2) * 0.25 ) \/ \\\n            ( (Tamanho_Populacao-1)*math.pow(Margem_Erro,2) + math.pow(Confianca_,2)*0.25 )\n            )","e38c0d1c":"def graficoBarra(planilha, coluna):\n    planilha[coluna].value_counts().plot(kind='bar')\n    plt.xlabel(coluna)\n    plt.ylabel('Quantidade')\n\n    plt.title(coluna)\n    plt.grid(True)\n    plt.show()\n    \n    print(planilha[coluna].value_counts()\/len(planilha))","61f19070":"def graficoLinha(planilha, coluna):\n    planilha[coluna].plot()\n    plt.xlabel(coluna)\n    plt.ylabel('Quantidade')\n\n    plt.title(coluna)\n    plt.grid(True)\n    plt.show()","afb2850d":"def histograma(planilha, coluna):\n    n, bins, patches = plt.hist(planilha[coluna],  facecolor='g', alpha=0.75, bins=50)\n    plt.xlabel(coluna)\n    plt.ylabel('Quantidade')\n\n    plt.title(coluna)\n    plt.grid(True)\n    plt.show()\n    \n    print('M\u00e9dia {}, desvio padr\u00e3o {}'.format(planilha[coluna].mean(),planilha[coluna].std()))\n","e14c4ae2":"#TamanhoPopulacao = 146656000\nTamanhoPopulacao = 1000000\nRegioes = ['Sul','Sudeste', 'Norte', 'Nordeste',  'CentroOeste']\nCandidatos = ['B', 'H', 'C', 'I']\nPercentualVotosSexoMasculinoPorCandidato = [0.65, 0.3, 0.5, 0.4]\nPercentualEleitoresRegiao = [0.143, 0.418, 0.080, 0.287, 0.072]\nMediaSalarioRegiao = [2286, 2541, 2025, 1920, 2155]\neleitoresRegiao = np.multiply(PercentualEleitoresRegiao,TamanhoPopulacao).astype(int).tolist()\neleitoresRegiao","823486bb":"populacao = pd.DataFrame( columns=['Regiao', 'Voto', 'Sexo', 'Salario', 'Idade'])","96cf5402":"# Define vota\u00e7\u00e3o\nPercentualVotosRegiaoCandidato = [0.57,0.2,0.09,                             \n                                  0.53,0.19,0.12,\n                                  0.43,0.37,0.09,\n                                  0.26,0.51,0.17,\n                                 0.58,0.21,0.18]\ni = 0\nj = 0\nTempVotos = []\nfor x in Regioes:\n    print(x)\n    \n    B = int(eleitoresRegiao[i] * PercentualVotosRegiaoCandidato[j])\n    j+=1\n    H = int(eleitoresRegiao[i] * PercentualVotosRegiaoCandidato[j])\n    j+=1\n    C = int(eleitoresRegiao[i] * PercentualVotosRegiaoCandidato[j])\n    j+=1\n    I = eleitoresRegiao[i]-B-H-C\n    TempVotos = TempVotos + ['B']*B + ['H']*H + ['C']*C + ['I']*I\n    \n    i+=1\n    \npopulacao.Voto = TempVotos\n        \n\nlen(populacao)","7e5ef1f0":"# Define Regi\u00e3o\npopulacao.Regiao = ['Sul']*eleitoresRegiao[0] + \\\n['Sudeste']*eleitoresRegiao[1] + \\\n['Norte']*eleitoresRegiao[2] + \\\n['Nordeste']*eleitoresRegiao[3] + \\\n['CentroOeste']*eleitoresRegiao[4]\n\nlen(populacao)\n","db54eab8":"# Define Sal\u00e1rio\ni = 0\nfor x in Regioes:\n    print(x)\n    tamanho = len(populacao.loc[populacao.Regiao == x,:])\n    populacao.loc[populacao.Regiao == x,'Salario'] = norm(loc=MediaSalarioRegiao[i], scale=0.5*MediaSalarioRegiao[i]).rvs(size=tamanho)\n    i+=1\n\n    \npopulacao.Salario =     populacao.Salario.astype('int')\npopulacao.loc[populacao.Salario <900,'Salario'] = 900\nlen(populacao)","c324af3b":"\n\n\n# Define sexo\ni = 0\nfor x in Candidatos:\n    print(x)\n    tamanho = len(populacao.loc[populacao.Voto == x,:])\n    votosMasculinos = int(tamanho*PercentualVotosSexoMasculinoPorCandidato[i])\n    votosFemininos = tamanho - votosMasculinos\n    populacao.loc[populacao.Voto == x,'Sexo'] = ['M'] * votosMasculinos + ['F'] * votosFemininos\n    i+=1    \nlen(populacao)\n\n","6db30a3b":"populacao.Idade = (populacao.Salario\/100 * 2).astype('int')\npopulacao.Idade = populacao.Idade - populacao.Idade.min() \npopulacao.Idade = populacao.Idade * 80 \/ populacao.Idade.max()\npopulacao.Idade = populacao.Idade + 18\npopulacao.Idade = populacao.Idade.astype('int')\nlen(populacao)","46ff513a":"populacao = shuffle(populacao)","ed4b7a21":"\npopulacao.head()","4e5da5c7":"len(populacao)","e30a8b4d":"histograma(populacao,'Salario')","ffcb2b1d":"histograma(populacao,'Idade')","6ea931a5":"graficoBarra(populacao,'Regiao')","7d350ed8":"graficoBarra(populacao,'Voto')","fdd3b518":"graficoBarra(populacao,'Sexo')","deffbcf3":"significancia = 0.05\ntipo = 'bilateral'\nproporcao_amostra = 0.73\ntamanho_amostra = 100\nproporcao_populacao = 0.8\n\nteste_hipotese_proporcao(significancia, tipo, proporcao_amostra, tamanho_amostra, proporcao_populacao )","968d11a5":"significancia = 0.05\ntipo = 'unilateral'\nproporcao_amostra = 0.73\ntamanho_amostra = 100\nproporcao_populacao = 0.8\n\nteste_hipotese_proporcao(significancia, tipo, proporcao_amostra, tamanho_amostra, proporcao_populacao )","65dd6c74":"significancia = 0.05\ntipo = 'bilateral'\nmedia_amostra = 295\ndesvio_amostra =20\ntamanho_amostra = 50\nmedia_populacao = 300\nteste_hipotese_media_desvio_amostra(significancia, tipo, media_amostra, desvio_amostra, \n                                    tamanho_amostra, media_populacao )\n","4d03b522":"significancia = 0.01\ntipo = 'unilateral'\nmedia_amostra = 108\ndesvio_amostra =10\ntamanho_amostra = 20\nmedia_populacao = 110\nteste_hipotese_media_desvio_amostra(significancia, tipo, media_amostra, desvio_amostra, \n                                    tamanho_amostra, media_populacao )","02773b60":"significancia = 0.1\ntipo = 'bilateral'\nmedia_amostra_1 =78\ntamanho_amostra_1 = 30\ndesvio_amostra_1 = 10\nmedia_amostra_2 = 85\ntamanho_amostra_2 = 25\ndesvio_amostra_2 = 15\nteste_hipotese_media_duas_amostras_desvio_amostra(significancia, tipo,\n                                                        media_amostra_1, tamanho_amostra_1, desvio_amostra_1,\n                                                        media_amostra_2, tamanho_amostra_2, desvio_amostra_2,\n                                                     diferenca = 0)","25c89c8a":"significancia = 0.05\ntipo = 'unilateral'\nmedia_amostra_1 =200\ntamanho_amostra_1 = 100\ndesvio_amostra_1 = 40\nmedia_amostra_2 = 190\ntamanho_amostra_2 = 100\ndesvio_amostra_2 = 20\n\n\ndiferenca = 7\n\nteste_hipotese_media_duas_amostras_desvio_amostra(significancia, tipo,\n                                                        media_amostra_1, tamanho_amostra_1, desvio_amostra_1,\n                                                        media_amostra_2, tamanho_amostra_2, desvio_amostra_2,\n                                                     diferenca )","600d6f5c":"significancia = 0.05\ntipo = 'bilateral'\n\nproporcao_amostra_1 =0.38\ntamanho_amostra_1 = 100\n\nproporcao_amostra_2 = 0.51\ntamanho_amostra_2 = 200\n\nteste_hipotese_proporcao_duas_amostras(significancia, tipo, \n                                                        proporcao_amostra_1, tamanho_amostra_1,\n                                                        proporcao_amostra_2, tamanho_amostra_2 )","7f01b3c1":"significancia = 0.01\ntipo = 'unilateral'\n\nproporcao_amostra_1 =0.38\ntamanho_amostra_1 = 100\n\nproporcao_amostra_2 = 0.51\ntamanho_amostra_2 = 200\n\nteste_hipotese_proporcao_duas_amostras(significancia, tipo, \n                                                        proporcao_amostra_1, tamanho_amostra_1,\n                                                        proporcao_amostra_2, tamanho_amostra_2 )","e44c8bde":"## Fun\u00e7\u00e3o para recupera\u00e7\u00e3o de amostra a partir da popula\u00e7\u00e3o","f381d382":"<font size=\"6\" color=\"red\">An\u00e1lise de dados<\/font>","46a7cf7b":"<font size=\"6\" color=\"red\">Exerc\u00edcios Teste de Hip\u00f3tese<\/font>","cf9d525f":"## Fun\u00e7\u00f5es para Teste de Hip\u00f3tese","ecddcb36":"Fonte: https:\/\/stattrek.com\/hypothesis-test\/proportion.aspx?Tutorial=AP","02599dd4":"1 - Two-Tailed Test - Propor\u00e7\u00e3o\n\nThe CEO of a large electric utility claims that 80 percent of his 1,000,000 customers are very satisfied with the service they receive. To test this claim, the local newspaper surveyed 100 customers, using simple random sampling. Among the sampled customers, 73 percent say they are very satisified. Based on these findings, can we reject the CEO's hypothesis that 80% of the customers are very satisfied? Use a 0.05 level of significance. \n","3f872ac8":"<font size=\"10\" color=\"black\">Teste de Hip\u00f3tese<\/font>\n\nEduardo Chaves Ferreira","55f5cef3":"4- One-Tailed Test - M\u00e9dia\n\nBon Air Elementary School has 1000 students. The principal of the school thinks that the average IQ of students at Bon Air is at least 110. To prove her point, she administers an IQ test to 20 randomly selected students. Among the sampled students, the average IQ is 108 with a standard deviation of 10. Based on these results, should the principal accept or reject her original hypothesis? Assume a significance level of 0.01. (Assume that test scores in the population of engines are normally distributed.) ","98331d18":"5 - Two-Tailed Test - Duas M\u00e9dias\n\nWithin a school district, students were randomly assigned to one of two Math teachers - Mrs. Smith and Mrs. Jones. After the assignment, Mrs. Smith had 30 students, and Mrs. Jones had 25 students.\nAt the end of the year, each class took the same standardized test. Mrs. Smith's students had an average test score of 78, with a standard deviation of 10; and Mrs. Jones' students had an average test score of 85, with a standard deviation of 15.\nTest the hypothesis that Mrs. Smith and Mrs. Jones are equally effective teachers. Use a 0.10 level of significance. (Assume that student performance is approximately normal.) \n","5931db91":"## Fun\u00e7\u00f5es gr\u00e1ficas","32c6db79":"## Fun\u00e7\u00f5es para c\u00e1lculo do intervalo de confian\u00e7a","ec5bc8fe":"## Exerc\u00edcios Pontuais","7206a86d":"## Fun\u00e7\u00f5es para c\u00e1lculo do valor Z","84ec27a7":"## Fun\u00e7\u00f5es para c\u00e1lculo do tamanho da amostra","dadcee48":"## Importa\u00e7\u00e3o de bibliotecas usadas nos exemplos","777f7175":"# Veja os dados carregados","2ac013cc":"7 - Two-Tailed Test - Duas Propor\u00e7\u00f5es\n\nSuppose the Acme Drug Company develops a new drug, designed to prevent colds. The company states that the drug is equally effective for men and women. To test this claim, they choose a a simple random sample of 100 women and 200 men from a population of 100,000 volunteers.\nAt the end of the study, 38% of the women caught a cold; and 51% of the men caught a cold. Based on these findings, can we reject the company's claim that the drug is equally effective for men and women? Use a 0.05 level of significance. ","b1c54138":"2- One-Tailed Test - Propor\u00e7\u00e3o\n\nSuppose the previous example is stated a little bit differently. Suppose the CEO claims that at least 80 percent of the company's 1,000,000 customers are very satisfied. Again, 100 customers are surveyed using simple random sampling. The result: 73 percent are very satisfied. Based on these results, should we accept or reject the CEO's hypothesis? Assume a significance level of 0.05. \n","6bf65c36":"## Mantendo a reprodutibilidade dos resultados\n\nAntes da gera\u00e7\u00e3o de n\u00fameros aleat\u00f3rios \u00e9 importante inicializar o gerador de n\u00fameros para que os resultados sejam os mesmos","69a88425":"<font size=\"6\" color=\"red\">Gera\u00e7\u00e3o de dados simulando toda a popula\u00e7\u00e3o<\/font>","1e6f8147":"6 - One-Tailed Test - Duas M\u00e9dias\n\nThe Acme Company has developed a new battery. The engineer in charge claims that the new battery will operate continuously for at least 7 minutes longer than the old battery.\nTo test the claim, the company selects a simple random sample of 100 new batteries and 100 old batteries. The old batteries run continuously for 190 minutes with a standard deviation of 20 minutes; the new batteries, 200 minutes with a standard deviation of 40 minutes.\nTest the engineer's claim that the new batteries run at least 7 minutes longer than the old. Use a 0.05 level of significance. (Assume that there are no outliers in either sample.) ","ea05e4c6":"3 - Two-Tailed Test - M\u00e9dia\n\nAn inventor has developed a new, energy-efficient lawn mower engine. He claims that the engine will run continuously for 5 hours (300 minutes) on a single gallon of regular gasoline. From his stock of 2000 engines, the inventor selects a simple random sample of 50 engines for testing. The engines run for an average of 295 minutes, with a standard deviation of 20 minutes. Test the null hypothesis that the mean run time is 300 minutes against the alternative hypothesis that the mean run time is not 300 minutes. Use a 0.05 level of significance. (Assume that run times for the population of engines are normally distributed.) ","16d0ce86":"8 - One-Tailed Test - Duas Propor\u00e7\u00f5es\n\nSuppose the previous example is stated a little bit differently. Suppose the Acme Drug Company develops a new drug, designed to prevent colds. The company states that the drug is more effective for women than for men. To test this claim, they choose a a simple random sample of 100 women and 200 men from a population of 100,000 volunteers.\nAt the end of the study, 38% of the women caught a cold; and 51% of the men caught a cold. Based on these findings, can we conclude that the drug is more effective for women than for men? Use a 0.01 level of significance. "}}