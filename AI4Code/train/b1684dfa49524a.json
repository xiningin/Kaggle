{"cell_type":{"8c75650c":"code","45ae6b07":"code","c67232e8":"code","ff9db8d8":"code","4331aeff":"code","0a515a96":"code","ae4fdd8d":"code","8887f5b5":"code","19b60c6d":"code","b174b003":"code","13d928ef":"code","abc63046":"code","133e452e":"code","00d0008c":"code","8ed80ce2":"code","f5de44c4":"code","320a12d6":"code","26d29297":"code","1fb71c3a":"code","955f43c5":"markdown","d84406c4":"markdown","f2487e68":"markdown"},"source":{"8c75650c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","45ae6b07":"import plotly.graph_objs as go\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nplt.rcParams['font.sans-serif']=['SimHei'] #\u7528\u6765\u6b63\u5e38\u663e\u793a\u4e2d\u6587\u6807\u7b7e","c67232e8":"file= pd.read_csv(\"..\/input\/climate-change-earth-surface-temperature-data\/GlobalTemperatures.csv\",\n              encoding='cp936',parse_dates=['dt'])","ff9db8d8":"file.info()","4331aeff":"file.head(3)","0a515a96":"def changeview(fig):\n    fig.update_layout(\n    yaxis=dict(\n            showline=False,\n            showgrid=False,\n            showticklabels=True,\n            linecolor='rgb(204, 204, 204)',\n            linewidth=2,\n            title='Average temp',\n            title_font_color='rgb(204, 204, 204)',\n            ticks='outside',\n            tickfont=dict(\n                family='Arial',\n                size=15,\n                color='#75878a',\n            )),\n    xaxis=dict(\n            showline=False,\n            showgrid=False,\n            showticklabels=True,\n            linecolor='rgb(204, 204, 204)',\n            linewidth=2,\n            title='Year',\n            title_font_color='rgb(204, 204, 204)',\n            ticks='outside',\n            tickfont=dict(\n                family='Arial',\n                size=15,\n                color='#75878a',\n            )),\n    plot_bgcolor='#333333',\n        paper_bgcolor='#333333'\n    )\n\n    annotations = []\n    # Title\n    annotations.append(dict(xref='paper', yref='paper', x=0.25, y=1.005,\n                                  xanchor='left', yanchor='bottom',\n                                  text='Average temp for each year',\n                                  font=dict(family='Arial',\n                                            size=30,\n                                            color='#bacac6'),\n                                  showarrow=False))\n# Source\n    annotations.append(dict(xref='paper', yref='paper', x=0.5, y=-0.11,\n                                  xanchor='center', yanchor='top',\n                                  text='Source:GlobalTemperatures.csv ',\n                                  font=dict(family='Arial',\n                                            size=12,\n                                            color='rgb(150,150,150)'),\n                                  showarrow=False))\n    fig.update_layout(annotations=annotations)\n    fig.update_traces(marker_color='#478384')","ae4fdd8d":"#Regularized polynomial regression\ndef ax_bfit_reg(list_x,list_y,predict_year,key_n,lamda,label_x,label_y,title,line_color,line_name):\n    x_test = np.linspace(min(list_x)[0],max(list_x)[0],100)[:,None]\n    X = np.ones_like(list_x)\n    X_test = np.ones_like(x_test)\n    for i in range(1,key_n+1):\n        X = np.hstack((X,list_x**i))\n        X_test = np.hstack((X_test,x_test**i))\n    w = np.linalg.solve(np.dot(X.T,X) + list_x.size*lamda*\n                        np.identity(key_n+1),np.dot(X.T,list_y))\n    coef_=w\n    \n    #new_line\n    attach_list=np.array([])\n    for i in range(key_n+1):\n        attach_list=np.append(attach_list,predict_year**i)\n    X_NEW=np.append(X_test,attach_list)\n    X_NEW=X_NEW.reshape(int(len(X_NEW)\/(key_n+1)),key_n+1)\n    #y_value\n    f_test = np.dot(X_NEW,w)\n    x_pro=np.append(x_test,[predict_year])\n    y_pro=[i[0] for i in f_test]\n    x_ax=[i[0]for i in list_x]\n    y_ax=[i[0] for i in list_y]\n    dic={label_x:x_ax,label_y:y_ax}\n    answer_sourse=pd.DataFrame(dic)\n    reference_line=go.Scatter(x=x_pro,y=y_pro,mode='lines', line_shape='spline',line_color=line_color,name=line_name,\n                              showlegend=False)\n    print ('When the condition\uff1a%s is %s \uff0cwe predict %s will be %.6f '%(label_x,predict_year,label_y,f_test[-1]))\n    return reference_line,coef_\n#The function has seven inputs\n#list_x         \n#list_y         \n#predict_year   \n#key_n           \n#lamda           \n#label_x        \n#label_y         \n#title           \n#line_color\n#line_name","8887f5b5":"average_temp=file.groupby(file.dt.dt.year).mean()\nfig=px.scatter(average_temp,x=average_temp.index,\n            y=average_temp.LandAverageTemperature.values)\nchangeview(fig)","19b60c6d":"from sklearn.linear_model import Ridge\nrid=Ridge(alpha=.01)\nrid.fit([[i] for i in average_temp.index],average_temp.LandAverageTemperature)","b174b003":"ydata_adjust=np.array([])\nfor i in average_temp.index:\n    ydata_adjust=np.append(ydata_adjust,i*rid.coef_)","13d928ef":"reference_line=go.Scatter(x=average_temp.index,\n                          y=ydata_adjust,mode='lines',line=go.scatter.Line(color='grey'),\n                          line_shape='spline',showlegend=False,line_color='#339966',legendgroup='Ridge Regression',name='Ridge Regression')","abc63046":"fig.add_trace(reference_line)","133e452e":"average_temp=file.groupby(file.dt.dt.year).mean()\nfig=px.scatter(average_temp,x=average_temp.index,\n            y=average_temp.LandAverageTemperature.values)\nchangeview(fig)\nxlist=np.array([[float(i)]for i in average_temp.index ])\nylist=np.array([[float(i)]for i in average_temp.LandAverageTemperature.values])","00d0008c":"trace_pro,coef=ax_bfit_reg(list_x=xlist,list_y=ylist,predict_year=2016,\n            key_n=3,lamda=.02,label_x='x',label_y='y',title='title',line_color='grey',line_name='average temp')","8ed80ce2":"changeview(fig)\nfig.add_trace(trace_pro)","f5de44c4":"max_temp_file=average_temp['LandMaxTemperature']\nmin_temp_file=average_temp['LandMinTemperature']\nmax_temp_file.dropna(how='any',inplace=True)\nmin_temp_file.dropna(how='any',inplace=True)\nxlist_max=np.array([[float(i)]for i in max_temp_file.index ])\nxlist_min=np.array([[float(i)]for i in min_temp_file.index ])\nylist_max=np.array([[float(i)]for i in max_temp_file.values])\nylist_min=np.array([[float(i)]for i in min_temp_file.values])\ntrace_max,coef_max=ax_bfit_reg(list_x=xlist_max,list_y=ylist_max,predict_year=2016,\n            key_n=3,lamda=.02,label_x='x',label_y='y',title='title',line_color='#990033',line_name='max temp')\n\ntrace_min,coef_min=ax_bfit_reg(list_x=xlist_min,list_y=ylist_min,predict_year=2016,\n            key_n=3,lamda=.02,label_x='x',label_y='y',title='title',line_color='#6699CC',line_name='mix temp')\nfig.add_trace(trace_max)\nfig.add_trace(trace_min)","320a12d6":"def guess_previous(list_x,w,key_n,line_color,line_name):\n    x_test = np.linspace(min(list_x)[0],max(list_x)[0],100)[:,None]\n    X = np.ones_like(list_x)\n    X_test = np.ones_like(x_test)\n    for i in range(1,key_n+1):\n        X = np.hstack((X,list_x**i))\n        X_test = np.hstack((X_test,x_test**i))\n    f_test = np.dot(X_test,w)\n    x_pro=[i[0] for i in x_test]\n    y_pro=[i[0] for i in f_test]\n    reference_line=go.Scatter(x=x_pro,y=y_pro,mode='lines', line_shape='spline',\n                              line_color=line_color,name=line_name,showlegend=False)\n    return reference_line","26d29297":"previous_max=guess_previous(np.array([[float(i)]for i in range(int(xlist[0][0]),int(xlist_max[0][0]))]),coef_max,3,'#ddada6','previous max temp')\nprevious_min=guess_previous(np.array([[float(i)]for i in range(int(xlist[0][0]),int(xlist_min[0][0]))]),coef_min,3,'#aacdbf','previous min temp')","1fb71c3a":"fig.add_trace(previous_max)\nfig.add_trace(previous_min)","955f43c5":"- then we can guess the max temp and the min temp for the early years","d84406c4":"## To show you the change in the maximum temperature of the year","f2487e68":"- Ridge regression is not accurate enough, so  I write a polynomial regression"}}