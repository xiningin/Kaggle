{"cell_type":{"18187a31":"code","95e62f96":"code","993f2d80":"code","0d56eec2":"code","9e47b5ba":"code","b6f3ab21":"code","fc6a1068":"code","694d4897":"code","49c1abe9":"code","5a3f7367":"code","d5c83325":"code","7ec3accf":"code","0e06be49":"code","33e467d5":"code","18dc3a80":"code","642baa64":"code","7194b8cd":"code","bd78f9e6":"code","bcca8fd3":"code","6c713241":"code","752875aa":"code","3d2e4a3e":"code","fe453e1f":"code","5af93421":"code","57a62a2c":"code","eea0287a":"code","0dd832b9":"code","f310b2cf":"code","8c42535a":"code","4f0b77c6":"code","d63cdd88":"code","2aeae99c":"code","b9b74d0a":"code","c6e7787e":"code","ed63e7c4":"code","ef64ca8f":"code","1076d6e8":"markdown","2bacca46":"markdown","af37659c":"markdown","be08039f":"markdown"},"source":{"18187a31":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        df = pd.read_csv(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","95e62f96":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score, cross_val_predict\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom sklearn.preprocessing import LabelEncoder","993f2d80":"df.head()","0d56eec2":"df.columns","9e47b5ba":"df.shape","b6f3ab21":"df.isna().any()","fc6a1068":"df.isnull().sum()","694d4897":"df.info()","49c1abe9":"df.describe()","5a3f7367":"df['Year'].unique()","d5c83325":"df['Platform'].unique()","7ec3accf":"df['Genre'].unique()","0e06be49":"df['Publisher'].unique()","33e467d5":"df['Publisher'].value_counts()","18dc3a80":"df['Year'].value_counts()","642baa64":"print(df['Year'].median())\nprint(df['Year'].mean())\nprint(df['Year'].mode())","7194b8cd":"df['Year']=df['Year'].fillna(df['Year'].median())","bd78f9e6":"df['Year'].isnull().sum()","bcca8fd3":"df['Year'].value_counts()","6c713241":"df['Publisher']=df['Publisher'].replace(np.nan, df['Publisher'].mode()[0])","752875aa":"df['Publisher'].isnull().sum()","3d2e4a3e":"df.isnull().sum()","fe453e1f":"categorical_labels = ['Platform', 'Genre', 'Publisher']\nnumerical_lables = ['Global_Sales']\nenc = LabelEncoder()\nencoded_df = pd.DataFrame(columns=['Platform', 'Genre', 'Publisher', 'Global_Sales'])\n\nfor label in categorical_labels:\n    temp_column = df[label]\n\n    encoded_temp_col = enc.fit_transform(temp_column)\n\n    encoded_df[label] = encoded_temp_col\n\nfor label in numerical_lables:\n    encoded_df[label] = df[label].values\n\nencoded_df.head()","5af93421":"encoded_df['Platform'].value_counts()","57a62a2c":"encoded_df['Publisher'].value_counts()","eea0287a":"encoded_df['Genre'].value_counts()","0dd832b9":"#from sklearn import preprocessing\n#norm_encoded = preprocessing.normalize(encoded_df)\n#norm_encoded\n\n# bu yontem kullanilabilir mi? kullanilabilirse bagimli degiskeni de normalize edecek miyiz? cunku asagida standartscaler yaparken \n#global sales sutununu scaler etmemis.","f310b2cf":"x = encoded_df.iloc[:, 0:3]\ny = encoded_df.iloc[:,3:]\n\nscalar = StandardScaler()\nx = scalar.fit_transform(x)\nx\n","8c42535a":"#import statsmodels.api as sm\nxm=sm.add_constant(x)\nmodel = sm.OLS(y,xm).fit()\nprint_model = model.summary()\nprint(print_model)\n#print(xm)","4f0b77c6":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=42)\nlr = LinearRegression()\nlr.fit(x_train,y_train)\ny_predict = lr.predict(x_test)\n\nprint(lr.coef_)\nprint(lr.intercept_)","d63cdd88":"print(lr.predict([[26,10,359]]))\nprint(lr.predict([[1.21567658,  1.3482215 ,  0.3714072 ]]))\n# predict yaparken scaler edilmis degerleri mi yazacagiz? scaler edilmemis degerleri mi?","2aeae99c":"mae=mean_absolute_error(y_predict, y_test)\nmse=mean_squared_error(y_predict, y_test)\nrmse=np.sqrt(mse)\nr2=r2_score(y_test,y_predict)\n\nprint('mae is  {}'.format(mae))\nprint('mse is  {}'.format(mse))\nprint('rmse is  {}'.format(rmse))\nprint('r2 is  {}'.format(r2))","b9b74d0a":"#import matplotlib.pyplot as plt\nplt.scatter(y_test,y_predict)","c6e7787e":"linear_reg = LinearRegression()\ny_pred = cross_val_predict(linear_reg, x_test, y_test, cv=10)\n\nmae=mean_absolute_error(y_pred, y_test)\nmse=mean_squared_error(y_pred, y_test)\nrmse=np.sqrt(mse)\nr2=r2_score(y_test,y_pred)\n\nprint('mae is  {}'.format(mae))\nprint('mse is  {}'.format(mse))\nprint('rmse is  {}'.format(rmse))\nprint('r2 is  {}'.format(r2))\n","ed63e7c4":"plt.scatter(y_test,y_pred)","ef64ca8f":"from sklearn.preprocessing import PolynomialFeatures\n\nfor i in range(1,6):\n\n    poly_features = PolynomialFeatures(degree=i)\n    \n    x_train_poly = poly_features.fit_transform(x_train)\n    x_test_poly = poly_features.fit_transform(x_test)\n\n    poly_model = LinearRegression()\n    poly_model.fit(x_train_poly, y_train)\n    \n    #coef and intercept\n    #print('for degree '+str(i)+':'+'coef: ' +str(poly_model.coef_)+' intercept: '+str(poly_model.intercept_))\n\n    # RMSE and r2 score for train data\n    y_train_pred = poly_model.predict(x_train_poly)\n    rmse_train = np.sqrt(mean_squared_error(y_train,y_train_pred))\n    r2_train = r2_score(y_train, y_train_pred)\n    print('train data for degree '+str(i)+' rmse_train:' +str(rmse_train)+' r2_train: '+str(r2_train))\n\n    # RMSE and r2 score for test data\n    y_test_pred = poly_model.predict(x_test_poly)\n    rmse_test = np.sqrt(mean_squared_error(y_test, y_test_pred))\n    r2_test = r2_score(y_test, y_test_pred)\n    print('test data for degree '+str(i)+' rmse_train:' +str(rmse_test)+' r2_train: '+str(r2_test)+'\\n')\n    \n    \n    plt.plot(y_test,y_test_pred, color= \"green\",label = \"poly\")\n    plt.legend()\n    plt.show()","1076d6e8":"model evaluation for testing set","2bacca46":"Linear regression","af37659c":"Polynomial Regression","be08039f":"look at first columns, shape,info and describe"}}