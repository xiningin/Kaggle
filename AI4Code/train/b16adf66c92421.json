{"cell_type":{"bc24783b":"code","2f23e1ae":"code","e1f782fc":"code","726173e2":"code","62680095":"code","f9539cb1":"code","9b22210b":"code","1af81b56":"code","f4ff3c46":"code","331b2685":"code","6a3258aa":"code","90c10962":"code","c0008c1e":"code","3484bea5":"code","07100934":"code","8650c205":"code","e9c913f0":"code","57cb36d3":"code","1f608903":"code","3664b8a5":"code","89f5eecd":"code","258d3cb6":"code","44e40ef5":"code","ad077403":"code","ca31e66f":"code","30ba4917":"code","210ff298":"code","8c35e2fa":"code","3c6f58cb":"code","3c83a162":"code","1c167bd4":"code","d48459b0":"code","12b9534d":"code","8b813286":"code","a11ddb96":"code","aa2cf8b0":"code","e6c3c009":"code","18b2813e":"code","113f6f87":"code","1ee74fde":"code","1563db90":"code","50ef5748":"code","b0c9bd39":"code","7d7a3fe2":"code","15255988":"code","3d1c09f9":"code","7c9a7161":"markdown","a2e6d4f0":"markdown","42dc81d7":"markdown","240ea46c":"markdown","14ccdba4":"markdown","0d264155":"markdown","eb3763cd":"markdown","cf8de9da":"markdown","9ee9a1e6":"markdown","24b1ed82":"markdown","95079ac3":"markdown","172034e5":"markdown","1d8f7a54":"markdown","5ce80f5b":"markdown"},"source":{"bc24783b":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import KNNImputer\n\nfrom imblearn.over_sampling import SMOTE\n\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import BaggingClassifier\n\nfrom lightgbm import LGBMClassifier\n","2f23e1ae":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","e1f782fc":"train.drop('PassengerId',axis=1,inplace=True)\nID = test['PassengerId']\ntest.drop('PassengerId',axis=1,inplace=True)","726173e2":"train.head()","62680095":"plt.figure(figsize=(14,6))\nsns.countplot(x='Survived',hue='Sex',data=train)\nplt.title('Number of people category by Sex and Survival');","f9539cb1":"plt.figure(figsize=(14,6))\nsns.violinplot(x='Sex',y='Fare',hue='Survived',data=train)\nplt.title('Number of people Fare Distribution category by Sex and Survival');","9b22210b":"plt.figure(figsize=(14,6))\nsns.countplot(x='Pclass',hue='Survived',data=train)\nplt.title('Number of people category by Pclass and Survival');","1af81b56":"plt.figure(figsize=(14,6))\nsns.countplot(x='SibSp',hue='Survived',data=train)\nplt.title('Number of people category by SibSp and Survival');","f4ff3c46":"plt.figure(figsize=(14,6))\nsns.countplot(x='Parch',hue='Survived',data=train)\nplt.title('Number of people category by Parch and Survival');","331b2685":"plt.figure(figsize=(14,6))\nsns.countplot(x='Embarked',hue='Survived',data=train)\nplt.title('Number of people category by Embarked and Survival');","6a3258aa":"plt.figure(figsize=(14,6))\nsns.distplot(a=train[train['Survived']==0]['Fare'])\nsns.distplot(a=train[train['Survived']==1]['Fare'])\nplt.title(\"Distribution of fares by survival\");","90c10962":"plt.figure(figsize=(14,6))\nsns.distplot(a=train[train['Survived']==0]['Age'])\nsns.distplot(a=train[train['Survived']==1]['Age'])\nplt.title(\"Distribution of Age by survival\");","c0008c1e":"plt.figure(figsize=(14,6))\nsns.heatmap(train.corr(),annot=True)\nplt.title(\"Correlation Matrix\");","3484bea5":"def visualNA(df,perc=0):\n    #Percentage of NAN Values \n    NAN = [(c, df[c].isna().mean()*100) for c in df]\n    NAN = pd.DataFrame(NAN, columns=[\"column_name\", \"percentage\"])\n    NAN = NAN[NAN.percentage > perc]\n    print(NAN.sort_values(\"percentage\", ascending=False))","07100934":"visualNA(train)","8650c205":"train['Embarked'].value_counts()","e9c913f0":"train['Embarked'].fillna(value='S',inplace=True)","57cb36d3":"train[['Ticket_Class','Ticket_Number']]=train['Ticket'].str.split(\" \",expand=True,n=1)\ntrain['Ticket_Class'],train['Ticket_Number'] = zip(*train[['Ticket_Class','Ticket_Number']].apply((lambda x : (None,x['Ticket_Class']) if x['Ticket_Number'] is None else (x['Ticket_Class'],x['Ticket_Number'])),axis=1))","1f608903":"train['Title'] = train['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]","3664b8a5":"plt.figure(figsize=(16,6))\nsns.countplot(x=train['Title'],hue=train['Survived'])\nplt.xticks(rotation=45)\nplt.title('Distribution of People by Title');","89f5eecd":"train['Cabin'].fillna(value='0',inplace=True)\ntrain['Ticket_Class'].fillna(value='0',inplace=True)","258d3cb6":"les = LabelEncoder()\ntrain['Sex'] = les.fit_transform(train['Sex'])\n\n\nlet = LabelEncoder()\ntrain['Title'] = let.fit_transform(train['Title'].astype(str))\n\nletn = LabelEncoder()\ntrain['Ticket_Number'] = letn.fit_transform(train['Ticket_Number'].astype(str))\n\n\nletc = LabelEncoder()\ntrain['Ticket_Class'] = letc.fit_transform(train['Ticket_Class'].astype(str))\n\n\nlec = LabelEncoder()\ntrain['Cabin'] = lec.fit_transform(train['Cabin'].astype(str))\n\n\nlee = LabelEncoder()\ntrain['Embarked'] = lee.fit_transform(train['Embarked'].astype(str))\n","44e40ef5":"train['Cabin'].replace(0,np.NaN,inplace=True)","ad077403":"X = train[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch',\n       'Fare', 'Cabin', 'Embarked', 'Ticket_Class','Ticket_Number','Title']]\n\ny = train['Survived']","ca31e66f":"imputer = KNNImputer(n_neighbors=5)\n\n\nX = imputer.fit_transform(X)","30ba4917":"sm = SMOTE(random_state=42)\nX_res, y_res = sm.fit_resample(X, y)","210ff298":"model_bc = BaggingClassifier(RandomForestClassifier(n_estimators=300, max_depth=5, random_state=42),n_estimators=100)\n\nmodel_bc.fit(X_res,y_res)","8c35e2fa":"feature_importances = np.mean([\n    tree.feature_importances_ for tree in model_bc.estimators_\n], axis=0)","3c6f58cb":"coeff_df = pd.DataFrame(feature_importances,['Pclass', 'Sex', 'Age', 'SibSp', 'Parch',\n       'Fare', 'Cabin', 'Embarked', 'Ticket_Class','Ticket_Number','Title'],columns=['Coefficient'])\n\nfig, ax = plt.subplots(1,1,figsize=(12,8))\ncoeff_df.sort_values(by='Coefficient',ascending=True).plot(kind='barh',ax=ax)\nplt.xlabel('Features')\nplt.title('Top Features');","3c83a162":"visualNA(test)","1c167bd4":"test[['Ticket_Class','Ticket_Number']]=test['Ticket'].str.split(\" \",expand=True,n=1)\ntest['Ticket_Class'],test['Ticket_Number'] = zip(*test[['Ticket_Class','Ticket_Number']].apply((lambda x : (None,x['Ticket_Class']) if x['Ticket_Number'] is None else (x['Ticket_Class'],x['Ticket_Number'])),axis=1))","d48459b0":"test['Title'] = test['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]","12b9534d":"for i,lechange in [('Ticket_Class',letc),('Cabin',lec),('Embarked',lee),\n                   ('Ticket_Number',letn),('Title',let)]:\n    test[i] = test[i].map(lambda s: '<unknown>' if s not in lechange.classes_ else s)\n    le_classes = lechange.classes_.tolist()\n    le_classes.insert(len(le_classes), '<unknown>')\n    lechange.classes_ = le_classes","8b813286":"test['Ticket_Class'].fillna(value='0',inplace=True)\n\n\ntest['Sex'] = les.transform(test['Sex'])\ntest['Ticket_Class'] = letc.transform(test['Ticket_Class'].astype(str))\ntest['Cabin'] = lec.transform(test['Cabin'].astype(str))\ntest['Embarked'] = lee.transform(test['Embarked'].astype(str))\ntest['Ticket_Number'] = letn.transform(test['Ticket_Number'].astype(str))\ntest['Title'] = let.transform(test['Title'].astype(str))\n","a11ddb96":"X_test = test[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch',\n       'Fare', 'Cabin', 'Embarked', 'Ticket_Class','Ticket_Number','Title']]","aa2cf8b0":"X_test = imputer.transform(X_test)","e6c3c009":"y_pred_bc = model_bc.predict(X_test)","18b2813e":"lgb = LGBMClassifier()","113f6f87":"lgb.fit(X_res,y_res)","1ee74fde":"coeff_df = pd.DataFrame(lgb.feature_importances_,['Pclass', 'Sex', 'Age', 'SibSp', 'Parch',\n       'Fare', 'Cabin', 'Embarked', 'Ticket_Class','Ticket_Number','Title'],columns=['Coefficient'])\n\nfig, ax = plt.subplots(1,1,figsize=(12,8))\ncoeff_df.sort_values(by='Coefficient',ascending=True).plot(kind='barh',ax=ax)\nplt.xlabel('Features')\nplt.title('Top Features');","1563db90":"y_pred_lgb = lgb.predict(X_test)","50ef5748":"Proba_bc=model_bc.predict_proba(X_test)\nProba_lgb=lgb.predict_proba(X_test)","b0c9bd39":"def argmax(iterable):\n    return max(enumerate(iterable), key=lambda x: x[1])[0]","7d7a3fe2":"def custom_pred(bc,lgb):\n    preds = list()\n    diff_index = [i for i, x in enumerate(y_pred_bc==y_pred_lgb) if not x]\n    for index,(i,j) in enumerate(zip(bc,lgb)):\n        if index in diff_index:\n            preds.append(y_pred_bc[index])\n        else:\n            preds.append(argmax(i+j)%2)\n            \n    return preds\n            ","15255988":"preds = custom_pred(Proba_bc,Proba_lgb)","3d1c09f9":"submission = pd.DataFrame({\n        \"PassengerId\": ID,\n        \"Survived\": preds\n    })\nsubmission.to_csv('submission.csv', index=False)","7c9a7161":"Extracting Ticket Class from Ticket","a2e6d4f0":"## Top 10 Features LGBM","42dc81d7":"# Data Featuring","240ea46c":"Insights : Female survival ratio is far greater than male counterpart","14ccdba4":"# LGBM","0d264155":"# Prediction","eb3763cd":"## Random Forest","cf8de9da":"# Custom Predictions","9ee9a1e6":"ReSampling as number of survival in train dataset is undersample with respect to Non-Survived.","24b1ed82":"# Modelling","95079ac3":"# Data Visualization","172034e5":"## Predictions LGBM","1d8f7a54":"# Please upvote if you find my notebook intersting :)\n\n# Import Libraries","5ce80f5b":"Insight : People with high fare were given better chance to survive than low fare class."}}