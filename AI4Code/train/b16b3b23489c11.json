{"cell_type":{"b9ec4088":"code","9812d1d6":"code","bfb13bab":"code","30030406":"code","7a4b530b":"code","9cb06e91":"code","614c8bfd":"code","5dcd1dfd":"code","02fa7fb9":"code","76040804":"code","74c18fbd":"code","001df539":"code","5f27b8b5":"code","99cb57cb":"code","b39f37d4":"code","b55dc914":"code","0b19bb9e":"code","ec1ca0df":"code","b56a9b74":"code","f4482088":"code","cadd069e":"code","5d2d095d":"code","463ce8cd":"code","685fb0ae":"code","36ec22bf":"code","ea45aafd":"code","b46991a8":"code","866b5f43":"code","c45fb25e":"code","4646e582":"code","15ae47c1":"code","b82137dd":"code","fc77312b":"code","690cfbad":"code","d8188ce6":"code","67ba4cd9":"code","9a1d7b5d":"code","43147560":"code","2d6d61ef":"code","5f55574d":"code","e5db1119":"code","663470ad":"code","4543fd1c":"code","0b25d702":"code","e3a78bfe":"code","c71258c8":"code","5fc098c4":"code","822a73b7":"code","e744eddb":"code","a5e4811b":"code","91b80007":"code","42577ad5":"code","b15910e7":"code","5dda750a":"code","8e9780a9":"code","8f39a2c1":"code","391ecfb4":"code","9c4c92df":"code","1c912bdd":"code","f890ad1a":"code","3d36e78b":"code","b056cafd":"code","21e09989":"code","9f07ebcc":"code","7fd1dafb":"code","87dd4870":"code","dba90ddd":"code","707c20d7":"code","ff1f7f93":"code","5e187135":"code","996b1402":"code","a6ca394d":"code","aada0b5e":"code","3c68dc44":"code","64a4b12d":"code","b29c563d":"code","e898881d":"code","7b6e0fdb":"code","6a9f275b":"code","1af778f5":"code","5cb4e3da":"code","ffe4a3be":"code","bc6e0ac9":"code","4739bf02":"code","ad43c43f":"code","ce1e3bbe":"code","68527603":"code","984e1ab1":"code","b1fdf176":"code","2d74bff7":"code","e3a6f858":"code","579b25a4":"code","c1eec71e":"code","60f1e211":"code","b951abb0":"code","45d934da":"markdown"},"source":{"b9ec4088":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9812d1d6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","bfb13bab":"train","30030406":"# Analysis\n# pip install pandas-profiling","7a4b530b":"from pandas_profiling import ProfileReport","9cb06e91":"# pr = train.profile_report()","614c8bfd":"# filling CPU\n# pr.to_widgets()","5dcd1dfd":"# Cleaning\n!pip install dabl","02fa7fb9":"import dabl","76040804":"train_clean = dabl.clean(train, verbose=0)","74c18fbd":"types = dabl.detect_types(train_clean)\nprint(types) ","001df539":"# Not Normally distributed\ndabl.plot(train, 'SalePrice')","5f27b8b5":"# !pip install missingno\nimport missingno as msno","99cb57cb":"msno.matrix(train)","b39f37d4":"msno.dendrogram(train)","b55dc914":"msno.bar(train)","0b19bb9e":"msno.matrix(train.sample(100))","ec1ca0df":"msno.heatmap(train)","b56a9b74":"# !pip install autoviz","f4482088":"!pip install datasist","cadd069e":"import datasist as ds\nds.structdata.check_train_test_set(train, test, index=None, col=None)","5d2d095d":"ds.structdata.describe(train)\n","463ce8cd":"numerical_feats = ds.structdata.get_num_feats(train)\nds.structdata.detect_outliers(train,80,numerical_feats)","685fb0ae":"ds.structdata.display_missing(train)['missing_percent'].sort_values(ascending=False)","36ec22bf":"all_data, ntrain, ntest = ds.structdata.join_train_and_test(train, test)\nprint(\"New size of combined data {}\".format(all_data.shape))\nprint(\"Old size of train data: {}\".format(ntrain))\nprint(\"Old size of test data: {}\".format(ntest))\n\n#later splitting after transformations\ntrain_new = all_data[:ntrain]\ntest_new = all_data[ntrain:]","ea45aafd":"new_train_df = ds.feature_engineering.drop_missing(train_new,  \n                                                    percent=7.0)\n# ds.structdata.display_missing(new_train_df)","b46991a8":"ds.structdata.display_missing(new_train_df)['missing_percent'].sort_values(ascending=False)","866b5f43":"ds.feature_engineering.drop_redundant(new_train_df)","c45fb25e":"df = ds.feature_engineering.fill_missing_cats(new_train_df)\nds.structdata.display_missing(df)['missing_counts'].sort_values()","4646e582":"df = ds.feature_engineering.fill_missing_num(new_train_df)\nds.structdata.display_missing(df)","15ae47c1":"df = ds.feature_engineering.fill_missing_num(df)\ndf = ds.feature_engineering.log_transform(df,columns=['Id'])","b82137dd":"df","fc77312b":"features = ['OverallQual' , 'GrLivArea' , 'TotalBsmtSF' , 'BsmtFinSF1' ,\n            '2ndFlrSF'    , 'GarageArea', '1stFlrSF'    , 'YearBuilt'  ]","690cfbad":"X_train = df[features]\ny_train = df[\"SalePrice\"]\nX_test  = test[features]","d8188ce6":"X_train      = X_train.fillna(X_train.mean())\nX_test       = X_test.fillna(X_test.mean())","67ba4cd9":"from rgf.sklearn import RGFRegressor\nimport xgboost as xgb\nfrom catboost import CatBoostRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import StackingRegressor\nfrom sklearn.model_selection import train_test_split\n\nestimators =  [('xgb',xgb.XGBRegressor(n_estimators  = 750,learning_rate = 0.02, max_depth = 4)),\n               ('cat',CatBoostRegressor(loss_function='RMSE', verbose=False)),\n               ('RGF',RGFRegressor(max_leaf=300, algorithm=\"RGF_Sib\", test_interval=100, loss=\"LS\"))]\n\nensemble = StackingRegressor(estimators      =  estimators,\n                             final_estimator =  RandomForestRegressor())\n\n# Fit ensemble using cross-validation\nX_tr, X_te, y_tr, y_te = train_test_split(X_train,y_train)\nensemble.fit(X_tr, y_tr).score(X_te, y_te)\n\n# Prediction\npredictions = ensemble.predict(X_test)","9a1d7b5d":"out = pd.DataFrame({\"Id\": test.Id, \"SalePrice\": predictions})","43147560":"out","2d6d61ef":"out.to_csv(\"sub.csv\", index=False)","5f55574d":"# a Better Score","e5db1119":"train.corr()['SalePrice'].nlargest(10)","663470ad":"# Outlier\nplt.scatter(train['GrLivArea'], train['SalePrice'])","4543fd1c":"train = train[train['GrLivArea']<4500]","0b25d702":"plt.scatter(train['GrLivArea'], train['SalePrice'])","e3a78bfe":"# not Normal Distributed\ntrain['SalePrice'].plot(kind=\"kde\")","c71258c8":"train['SalePrice'] = np.log1p(train['SalePrice'])","5fc098c4":"train['SalePrice'].plot(kind=\"kde\")","822a73b7":"train = ds.feature_engineering.drop_missing(train, percent=7.0)","e744eddb":"# Electrical has only one missing\ntrain.isna().sum().sort_values().tail(20)","a5e4811b":"train[train['Electrical'].isna()]","91b80007":"# Remove it\ntrain = train[~train['Electrical'].isna()]","42577ad5":"train[train['MasVnrArea'].isna()]\ntrain[train['MasVnrType'].isna()]","b15910e7":"# drop 37 NaNs\ntrain = train[~train['MasVnrArea'].isna()]\n# drop 37 NaNs\ntrain = train[~train['MasVnrType'].isna()]","5dda750a":"# year month to categorical\ncols = [\"MSSubClass\", \"YrSold\", 'MoSold']\ntrain[cols] = train[cols].astype(str)\ntest[cols] = test[cols].astype(str)","8e9780a9":"train['YrSold']","8f39a2c1":"# Collinearity\ntrain.corr()['GarageArea']['GarageCars']","391ecfb4":"# should remove one","9c4c92df":"# not working\n# ds.feature_engineering.drop_redundant(train)\n\n\n# Select upper triangle of correlation matrix\nupper = train.corr().abs().where(np.triu(np.ones(train.corr().shape), k=1).astype(np.bool))\n\nto_drop = [column for column in upper.columns if any(upper[column] > 0.7)]","1c912bdd":"to_drop = to_drop[:4]","f890ad1a":"train = train.drop(train[to_drop],axis=1)","3d36e78b":"test = test.drop(test[to_drop],axis=1)","b056cafd":"def fill_missing_data(df):\n    df_data = df.copy()\n    categoricals = []\n    for cname,dtype in df_data.dtypes.items():\n        if dtype == 'object':\n            categoricals.append(cname)\n    # Fill 'None' for the Categorical attribute\n    df_data[categoricals] = df_data[categoricals].fillna('None')\n    \n    for cname in df_data.columns:\n        if cname not in categoricals:\n            df_data[cname] = df_data[cname].fillna(0) #Fill 0 for the Numeric attribute\n    return df_data\n","21e09989":"train = fill_missing_data(train)\ntest = fill_missing_data(test)","9f07ebcc":"train['TotalPorchSF'] = train['OpenPorchSF'] + train['EnclosedPorch'] + train['3SsnPorch'] + train['ScreenPorch']\ntest['TotalPorchSF'] = test['OpenPorchSF'] + test['EnclosedPorch'] + test['3SsnPorch'] + test['ScreenPorch']","7fd1dafb":"train['TotalBaths'] = train['BsmtFullBath'] + train['FullBath'] + 0.5*(train['BsmtHalfBath'] + train['HalfBath'])\ntest['TotalBaths'] = test['BsmtFullBath'] + test['FullBath'] + 0.5*(test['BsmtHalfBath'] + test['HalfBath'])","87dd4870":"train['TotalAreaSF'] = train['TotalBsmtSF'] + train['GrLivArea']\ntest['TotalAreaSF'] = test['TotalBsmtSF'] + test['GrLivArea']","dba90ddd":"train['Age'] = train['YrSold'].astype('int64') - train['YearBuilt']\ntest['Age'] = test['YrSold'].astype('int64') - test['YearBuilt']","707c20d7":"# one hot encode","ff1f7f93":"def feature_engineering(df):\n    df_data = df.copy()\n    \n    feature = {\n        'categorical':{\n            'MSSubClass': ['20', '30', '40', '45', '50', '60', '70', '75', '80', '85', '90', '120', '150', '160', '180', '190'],\n            'MSZoning': ['A', 'C', 'FV', 'I', 'RH', 'RL', 'RP', 'RM'],\n            'Alley': ['Grvl', 'Pave', 'None'],\n            'LandContour': ['Lvl', 'Bnk', 'HLS', 'Low'],\n            'LotConfig': ['Inside', 'Corner', 'CulDSac', 'FR2', 'FR3'],\n            'Neighborhood': ['Blmngtn', 'Blueste', 'BrDale', 'BrkSide', 'ClearCr', 'CollgCr', 'Crawfor', 'Edwards', 'Gilbert', 'IDOTRR', 'MeadowV', 'Mitchel',\n                            'Names', 'NoRidge', 'NPkVill', 'NridgHt', 'NWAmes', 'OldTown', 'SWISU', 'Sawyer', 'SawyerW', 'Somerst', 'StoneBr', 'Timber', 'Veenker'],\n            'Condition1': ['Artery', 'Feedr', 'Norm', 'RRNn', 'RRAn', 'PosN', 'PosA', 'RRNe', 'RRAe'],\n            'Condition2': ['Artery', 'Feedr', 'Norm', 'RRNn', 'RRAn', 'PosN', 'PosA', 'RRNe', 'RRAe'],\n            'BldgType': ['1Fam', '2FmCon', 'Duplx', 'TwnhsE', 'TwnhsI'],\n            'HouseStyle': ['1Story', '1.5Fin', '1.5Unf', '2Story', '2.5Fin', '2.5Unf', 'SFoyer', 'SLvl'],\n            'RoofStyle': ['Flat', 'Gable', 'Gambrel', 'Hip', 'Mansard', 'Shed'],\n            'RoofMatl': ['ClyTile', 'CompShg', 'Membran', 'Metal', 'Roll', 'Tar&Grv', 'WdShake', 'WdShngl'],\n            'Exterior1st': ['AsbShng', 'AsphShn', 'BrkComm', 'BrkFace', 'CBlock', 'CemntBd', 'HdBoard', 'ImStucc', 'MetalSd', 'Other', 'Plywood', 'PreCast', 'Stone', 'Stucco',\n                           'VinylSd', 'Wd Sdng', 'WdShing'],\n            'Exterior2nd': ['AsbShng', 'AsphShn', 'BrkComm', 'BrkFace', 'CBlock', 'CemntBd', 'HdBoard', 'ImStucc', 'MetalSd', 'Other', 'Plywood', 'PreCast', 'Stone', 'Stucco',\n                           'VinylSd', 'Wd Sdng', 'WdShing'],\n            'MasVnrType': ['BrkCmn', 'BrkFace', 'CBlock', 'None', 'Stone'],\n            'Foundation': ['BrkTil', 'CBlock', 'PConc', 'Slab', 'Stone', 'Wood'],\n            'Heating': ['Floor', 'GasA', 'GasW', 'Grav', 'OthW', 'Wall'],\n            'Electrical': ['SBrkr', 'FuseA', 'FuseF', 'FuseP', 'Mix'],\n            'Functional': ['Typ', 'Min1', 'Min2', 'Mod', 'Maj1', 'Maj2', 'Sev', 'Sal'],\n            'GarageType': ['2Types', 'Attchd', 'Basment', 'BuiltIn', 'CarPort', 'Detchd', 'None'],\n            'GarageFinish': ['Fin', 'RFn', 'Unf', 'None'],\n            'PavedDrive': ['Y', 'P', 'N'],\n            'MiscFeature': ['Elev', 'Gar2', 'Othr', 'Shed', 'TenC', 'None'],\n            'MoSold': ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],\n            'YrSold': ['2006', '2007', '2008', '2009', '2010'],\n            'SaleType': ['WD', 'CWD', 'VWD', 'New', 'COD', 'Con', 'ConLw', 'ConLI', 'ConLD', 'Oth'],\n            'SaleCondition': ['Normal', 'Abnorml', 'AdjLand', 'Alloca', 'Family', 'Partial']\n        },\n        'binary': {\n            'Street': ['Pave', 'Grvl'],\n            'CentralAir': ['Y', 'N']          \n        },\n        'ordinal': {\n            'LotShape': ['None', 'IR3', 'IR2', 'IR1', 'Reg'],\n            'Utilities': ['None', 'NoSeWa', 'NoSewr', 'AllPub'],\n            'LandSlope': ['None', 'Sev', 'Mod', 'Gtl'],\n            'ExterQual': ['None', 'Po', 'Fa', 'TA', 'Gd', 'Ex'],\n            'ExterCond': ['None', 'Po', 'Fa', 'TA', 'Gd', 'Ex'],\n            'BsmtQual': ['None', 'Po', 'Fa', 'TA', 'Gd', 'Ex'],\n            'BsmtCond': ['None', 'Po', 'Fa', 'TA', 'Gd', 'Ex'],\n            'BsmtExposure': ['None', 'No', 'Mn', 'Av', 'Gd'],\n            'BsmtFinType1': ['None', 'Unf', 'LwQ', 'Rec', 'BLQ', 'ALQ', 'GLQ'],\n            'BsmtFinType2': ['None', 'Unf', 'LwQ', 'Rec', 'BLQ', 'ALQ', 'GLQ'],\n            'HeatingQC': ['None', 'Po', 'Fa', 'TA', 'Gd', 'Ex'],\n            'KitchenQual': ['None', 'Po', 'Fa', 'TA', 'Gd', 'Ex'],\n            'FireplaceQu': ['None', 'Po', 'Fa', 'TA', 'Gd', 'Ex'],\n            'GarageQual': ['None', 'Po', 'Fa', 'TA', 'Gd', 'Ex'],\n            'GarageCond': ['None', 'Po', 'Fa', 'TA', 'Gd', 'Ex'],\n            'Fence': ['None', 'MnWw', 'GdWo', 'MnPrv', 'GdPrv'],\n            'PoolQC': ['None', 'Fa', 'Ta', 'Gd', 'Ex']\n        },\n    }\n    \n    selected = []\n    for cname in df_data.columns:\n        if cname in feature['binary']: # Convert the binary attributes to 0\/1\n            default_value = feature['binary'][cname][0]\n            feature_name = cname + \"_is_\" + default_value\n            selected.append(feature_name)\n            df_data[feature_name] = df_data[cname].apply(lambda x: int(x == default_value))\n        elif cname in feature['categorical']: # Convert Categorical attributes into One-hot vector\n            values = feature['categorical'][cname]\n            for val in values:\n                try:\n                    new_name = \"{}_{}\".format(cname, val)\n\n                    selected.append(new_name)\n                    df_data[new_name] = df_data[cname].apply(lambda x: int(x == val))\n                except Exception as err:\n                    print(\"One-hot encoding for {}_{}. Error: {}\".format(cname, val, err))\n        elif cname in feature['ordinal']: # Convert the Ordinal attributes to a number\n            new_name = cname + \"_ordinal\"\n            selected.append(new_name)\n            df_data[new_name] = df_data[cname].apply(lambda x: int(feature['ordinal'][cname].index(x)))\n        else: # The remaining attributes are numeric so they remain the same\n#             print(cname)\n            selected.append(cname)\n            \n    return df_data[selected]","5e187135":"train = feature_engineering(train)\ntest = feature_engineering(test)","996b1402":"train","a6ca394d":"# remove all zeros columns\n# df=df[[i for i in df if len(set(df[i]))>1]]\nfor col in train.columns:    \n    if any(train[col]) == False:\n            train.drop([col], axis=1, inplace=True)\n            test.drop([col], axis=1, inplace=True)","aada0b5e":"id = test['Id']","3c68dc44":"id.shape","64a4b12d":"y = train['SalePrice']","b29c563d":"y.shape","e898881d":"test['Id'].shape","7b6e0fdb":"df['SalePrice']","6a9f275b":"train.drop(['Id', 'SalePrice'], axis=1, inplace=True)\n\ntest.drop(['Id'], axis=1, inplace=True)","1af778f5":"abt = test","5cb4e3da":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ntrain = scaler.fit_transform(train)\n# test = scaler.transform(test)","ffe4a3be":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(train, y, test_size=0.25, random_state=1)\nX_test, X_val, y_test, y_val = train_test_split(X_test, y_test, test_size=0.5, random_state=123)","bc6e0ac9":"from sklearn.metrics import mean_squared_error","4739bf02":"param_init = {\n    \"max_depth\": 5, # default: 3 only for depthwise\n    \"n_estimators\": 3000, # default: 500\n    \"learning_rate\": 0.01, # default: 0.05\n    \"subsample\": 0.5,\n    \"colsample_bytree\": 0.7,  # default:  1.0\n    \"min_child_weight\": 1.5,\n    \"reg_alpha\": 0.75,\n    \"reg_lambda\": 0.4,\n    \"seed\": 42,\n#     \"eval_metric\": \"rmse\"\n}","ad43c43f":"import xgboost\nxgb_model = xgboost.XGBRegressor(**param_init)","ce1e3bbe":"param_fit = {\n    \"eval_metric\": \"rmse\",\n    \"early_stopping_rounds\": 500, # default: 100\n    \"verbose\": 200,\n    \"eval_set\": [(X_val, y_val)]\n}","68527603":"xgb_model = xgb_model.fit(X_train, y_train, **param_fit)\n","984e1ab1":"y_pred_xgb = xgb_model.predict(X_test)","b1fdf176":"SalePrice_pred","2d74bff7":"mean_squared_error(y_test, y_pred_xgb, squared=False)\n","e3a6f858":"SalePrice_pred = np.exp(y_pred_xgb)","579b25a4":"y_pred_xgb.shape","c1eec71e":"# Id=pd.Series(range(1461,2920))","60f1e211":"# submission = pd.DataFrame({'Id': Id, 'SalePrice': SalePrice_pred})","b951abb0":"# submission.to_csv(\"sub.csv\", index=False)","45d934da":"## Plz consider upvoting and commenting down below about your thoughts about what is good or can be improved. Cheers!"}}