{"cell_type":{"1ca0579e":"code","6cd6c90b":"code","0401e348":"code","328833f2":"code","05f1f6d1":"code","e3584549":"code","99a6a0f3":"code","f32b1934":"code","ae271a3d":"code","30fd8dfa":"code","8885ef78":"code","d09c5702":"markdown","44b547bb":"markdown","b8daa523":"markdown","b0483bbd":"markdown","40ee1084":"markdown","ae7e4754":"markdown","89792257":"markdown"},"source":{"1ca0579e":"!pip install -I vaex","6cd6c90b":"# Load Libraries\nimport vaex\nvaex.multithreading.thread_count_default = 8\nimport vaex.ml\n\nimport numpy as np\nimport pylab as plt\nimport time\nfrom pathlib import Path\nimport pprint\nimport pandas\nfrom IPython.core.interactiveshell import InteractiveShell  # for printing all outputs of a cell \nInteractiveShell.ast_node_interactivity = \"all\" # to revert to original setting set InteractiveShell.ast_node_interactivity = \"last_expr\"\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0401e348":"# Load data using Vaex\nstart = time.time()\ndata_dir = Path('..\/input\/tabular-playground-series-nov-2021\/')\nvaex_train = vaex.read_csv(data_dir \/ \"train.csv\")\nend = time.time()\nprint(end - start)","328833f2":"# https:\/\/datatofish.com\/random-rows-pandas-dataframe\/\nvaex_train_99_percent = vaex_train.sample(frac=0.999)","05f1f6d1":"features = vaex_train.column_names[1:-1] # because we want to exclude id and target columns from the training dataset\nprint(features)","e3584549":"features_first_90 = vaex_train.column_names[1:90]\npca_first_90_features = vaex.ml.PCA(features=features_first_90, n_components=10)\nvaex_train_99_percent_first_90_features = pca_first_90_features.fit_transform(vaex_train_99_percent)\nvaex_train_99_percent_first_90_features","99a6a0f3":"features_91_101 = vaex_train.column_names[91:101]\npca_91_101_features = vaex.ml.PCA(features=features_91_101, n_components=10)\nvaex_train_99_percent_91_101_features = pca_91_101_features.fit_transform(vaex_train_99_percent)\nvaex_train_99_percent_91_101_features","f32b1934":"pca_first_90_features_incremental = vaex.ml.PCAIncremental(n_components=10, features=features_first_90, batch_size=42000)\npca_first_90_features_incremental.fit(vaex_train_99_percent, progress='widget')\npca_first_90_features_incremental.transform(vaex_train_99_percent)","ae271a3d":"pca_91_101_features_incremental = vaex.ml.PCAIncremental(n_components=10, features=features_91_101, batch_size=42000)\npca_91_101_features_incremental.fit(vaex_train_99_percent, progress='widget')\npca_91_101_features_incremental.transform(vaex_train_99_percent)","30fd8dfa":"random_projections_first_90_features = vaex.ml.RandomProjections(features=features_first_90, n_components=10)\nrandom_projections_first_90_features.fit(vaex_train_99_percent)\nrandom_projections_first_90_features.transform(vaex_train_99_percent)","8885ef78":"random_projections_91_101_features = vaex.ml.RandomProjections(features=features_91_101, n_components=10)\nrandom_projections_91_101_features.fit(vaex_train_99_percent)\nrandom_projections_91_101_features.transform(vaex_train_99_percent)","d09c5702":"# Problem Statement\n\nIn this competition, we predict whether or not an email is spam.\n\nWe are going to cover the following steps:\n1. Install Vaex\n2. Load Data\n3. Dimensionality Reduction (PCA)\n4. Dimensionality Reduction (Incremental PCA)\n5. Dimensionality Reduction (Random Projections)\n6. References\n\nLet\u2019s begin by installing the latest stable version of <span style=\"color:#E94A93;\">Vaex<\/span>\n\n# Install Vaex","44b547bb":"# References\n\n1. Thank you to the [Vaex Documentation](https:\/\/vaex.io\/docs\/tutorial_ml.html#Dimensionality-reduction) for demonstrating how to use Vaex to do Dimensionality Reduction.","b8daa523":"# Dimensionality Reduction using PCA","b0483bbd":"Let's take a random sample of the training data so that we can at least do something instead of running into memory issues.","40ee1084":"# Load Data","ae7e4754":"# Dimensionality Reduction using Incremental PCA","89792257":"# Dimensionality Reduction using Random Projections\n\nRandom projections is another popular way of doing dimensionality reduction, especially when the dimensionality of the data is very high. <span style=\"color:#E94A93;\">vaex.ml<\/span> conveniently wraps both <span style=\"color:#E94A93;\">scikit-learn.random_projection.GaussianRandomProjection<\/span> and <span style=\"color:#E94A93;\">scikit-learn.random_projection.SparseRandomProjection<\/span> in a single <span style=\"color:#E94A93;\">vaex.ml<\/span> transformer."}}