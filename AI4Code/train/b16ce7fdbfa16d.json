{"cell_type":{"1db03c42":"code","5d817058":"code","9d322ff2":"code","66da38fc":"code","1686bf04":"code","9cbbb782":"code","15b12569":"code","5b1b3ace":"code","900bcd81":"code","3fbdc92b":"code","763fbb0c":"code","c11b9585":"code","4dd9d2f9":"code","c732ad05":"code","9dbc208e":"code","a4ab4f7c":"code","a70447dd":"code","e871c151":"code","d2587431":"code","984828e8":"code","931d98e3":"code","f09f3a19":"code","9b2578fb":"code","18132126":"code","45148118":"code","74d24eaf":"code","3c2370e1":"code","468c2e04":"code","1747f5a8":"code","62f15bb7":"code","041cb163":"code","9b92d6e0":"code","51f3e296":"code","e1f0d52b":"code","8d48a8a9":"code","cd1b12c8":"code","7a5508a5":"code","35b993ab":"code","ef4c56ab":"code","b3b704e2":"code","c4261611":"code","0979fd5d":"code","03050c97":"code","135b5af4":"code","cafeee8b":"code","816c121a":"code","6086c5c7":"code","e3ea2506":"code","901ee688":"code","74bcd922":"code","3ad115dc":"code","e27c8706":"code","7531b185":"code","11090c42":"code","d56c260b":"markdown","74211b45":"markdown","72a19668":"markdown","0aad8079":"markdown","9fbc2d0c":"markdown","27859e2b":"markdown","790f0300":"markdown","a8ac7466":"markdown","a43721cc":"markdown","57c66b29":"markdown","0a2bcbc6":"markdown","be3de13e":"markdown","30c2cbd5":"markdown","80ba38cb":"markdown","e31dcaa5":"markdown","5433b14a":"markdown","23e10334":"markdown","0d038065":"markdown","98ec5d4a":"markdown","cf8be6be":"markdown","7578f9c0":"markdown","330d2a35":"markdown","00c509fd":"markdown","02657eab":"markdown","f5132d93":"markdown"},"source":{"1db03c42":"#Loading the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.svm import SVC","5d817058":"#Load the dataset\ntrain_ds=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_ds=pd.read_csv(\"..\/input\/titanic\/test.csv\")","9d322ff2":"train_ds.head()","66da38fc":"test_ds.head()","1686bf04":"train_ds.info()","9cbbb782":"test_ds.info()","15b12569":"y=np.array(train_ds['Survived'])","5b1b3ace":"y","900bcd81":"data_set1=pd.concat([train_ds.drop(['Survived'],axis=1),test_ds])","3fbdc92b":"data_set1.tail()","763fbb0c":"data_set1.set_index('PassengerId',inplace=True)#Just for convenience","c11b9585":"data_set1.info()","4dd9d2f9":"data_set1.drop('Cabin',axis=1,inplace=True)","c732ad05":"data_set1['Family']=data_set1.SibSp+data_set1.Parch","9dbc208e":"data_set1.drop(['SibSp','Parch'],axis=1,inplace=True)","a4ab4f7c":"data_set1.columns","a70447dd":"data_set1.head()","e871c151":"Fare_null_indices=data_set1[data_set1.Fare.isnull()==True].index.values\nFare_null_indices","d2587431":"for id in list(Fare_null_indices):\n    id=id-1\n    data_set1.iloc[id,5]=data_set1[(data_set1.Pclass==data_set1.iloc[id,0])&(data_set1.Embarked==data_set1.iloc[id,6])].Fare.median()","984828e8":"data_set1.iloc[1043,5]#id is subtracted by 1 because passengerid starts from 1 and actual index starts from 0","931d98e3":"Embarked_null_indices=data_set1[data_set1.Embarked.isnull()==True].index.values\nEmbarked_null_indices","f09f3a19":"for id in list(Embarked_null_indices):\n    id=id-1\n    id_fare=data_set1.iloc[id,5]\n    diff_id_S=abs((data_set1[(data_set1.Pclass==data_set1.iloc[id,0])&(data_set1.Embarked=='S')].Fare.median())-id_fare)\n    diff_id_C=abs((data_set1[(data_set1.Pclass==data_set1.iloc[id,0])&(data_set1.Embarked=='C')].Fare.median())-id_fare)\n    diff_id_Q=abs((data_set1[(data_set1.Pclass==data_set1.iloc[id,0])&(data_set1.Embarked=='Q')].Fare.median())-id_fare)\n    nearest_Emb_fare=min([diff_id_S,diff_id_C,diff_id_Q])\n    if(nearest_Emb_fare==diff_id_S):\n        data_set1.iloc[id,6]='S'\n    elif(nearest_Emb_fare==diff_id_C):\n        data_set1.iloc[id,6]='C'\n    else:\n        data_set1.iloc[id,6]='Q'","9b2578fb":"print(\"Filled values:\",data_set1.iloc[61,6],data_set1.iloc[829,6])","18132126":"Age_null_indices=data_set1[(data_set1.Age.isnull()==True)|(data_set1.Age=='NaN')].index.values\nAge_null_indices","45148118":"#Extracting the title from their names\ndata_set1['Title']=((data_set1.Name.str.split(', ',expand=True))[1].str.split('.',expand=True))[0]","74d24eaf":"data_set1.head()","3c2370e1":"data_set1.Title=data_set1.Title.apply(lambda x: x if x in ['Mr','Mrs','Miss','Master'] else 'None')","468c2e04":"data_set1","1747f5a8":"Title_null_values=data_set1[(data_set1.Title=='None')].index.values\nTitle_null_values","62f15bb7":"for id in list(Title_null_values):\n    id=id-1\n    if(data_set1.iloc[id,2]=='male'):\n        if(data_set1.iloc[id,3]>15):\n            data_set1.iloc[id,8]='Mr'\n        else:\n            data_set1.iloc[id,8]='Master'\n    elif(data_set1.iloc[id,2]=='female'):\n        if(data_set1.iloc[id,3]>22):\n            data_set1.iloc[id,8]='Mrs'\n        else:\n            data_set1.iloc[id,8]='Miss'","041cb163":"data_set1.tail()","9b92d6e0":"for id in list(Age_null_indices):\n    id=id-1\n    data_set1.iloc[id,3]=data_set1[(data_set1.Pclass==data_set1.iloc[id,0])&(data_set1.Sex==data_set1.iloc[id,2])&(data_set1.Embarked==data_set1.iloc[id,6])&(data_set1.Title==data_set1.iloc[id,8])].Age.median()","51f3e296":"data_set1.tail()","e1f0d52b":"data_set1.isnull().sum()","8d48a8a9":"data_set1.drop(['Name','Ticket','Title'],inplace=True,axis=1)","cd1b12c8":"train_set=pd.DataFrame(data_set1.iloc[0:891,:])\ntest_set=pd.DataFrame(data_set1.iloc[891:1309,:])","7a5508a5":"train_set.info()","35b993ab":"train_set['Survival']=y","ef4c56ab":"plt.figure(figsize=(12,12))\nfig, ax = plt.subplots(1, 2)\nfig.tight_layout(pad=2.0)\nfig.suptitle(\"Variation of Survival with respect to Pclass and Sex\")\nsns.countplot(data=train_set,x='Pclass',hue='Survival',ax=ax[0])\nsns.countplot(data=train_set,x='Sex',hue='Survival',ax=ax[1])","b3b704e2":"plt.figure(figsize=(12,12))\nfig, ax = plt.subplots(1, 2)\nfig.tight_layout()\nfig.suptitle(\"Variation of Survival with respect to Age and Fare\")\nsns.boxplot(data=train_set,x='Survival',y='Age',ax=ax[0])\nsns.boxplot(data=train_set,x='Survival',y='Fare',ax=ax[1])","c4261611":"plt.figure(figsize=(12,12))\nfig, ax = plt.subplots(1, 2)\nfig.tight_layout()\nfig.suptitle(\"Variation of Survival with respect to Family and Embarked\")\nsns.countplot(data=train_set,x='Family',hue='Survival',ax=ax[0])\nsns.countplot(data=train_set,x='Embarked',hue='Survival',ax=ax[1])","0979fd5d":"train_set=pd.get_dummies(data=train_set,columns=['Pclass','Sex','Embarked'],drop_first=True)","03050c97":"train_set.head()","135b5af4":"test_set=pd.get_dummies(data=test_set,columns=['Pclass','Sex','Embarked'],drop_first=True)\ntest_set.head()","cafeee8b":"train_set.drop('Survival',inplace=True,axis=1)","816c121a":"scaler = StandardScaler()\ntrain_set1 = scaler.fit_transform(train_set)\ntest_set1 = scaler.transform(test_set)","6086c5c7":"# Logistic Regression\nCV = KFold(n_splits=10, random_state=0, shuffle=True)\nLog_reg = LogisticRegression()\nLog_reg_score = cross_val_score(Log_reg, train_set1, y, cv=CV)\nprint(f'Logistic Regression Accuracy: {np.round(Log_reg_score.mean(), 4)*100}')","e3ea2506":"#RandomForestClassifier\nRF_model=RandomForestClassifier(n_estimators=100,criterion='gini',random_state=1)\nRF_score = cross_val_score(RF_model, train_set1, y, cv=CV)\nprint(f'RF Accuracy: {np.round(RF_score.mean(), 4)*100}')","901ee688":"#GradientBoostingClassifier\nGB_model=GradientBoostingClassifier(learning_rate=0.1,n_estimators=50)\nGB_score=cross_val_score(GB_model, train_set1, y, cv=CV)\nprint(f'Gradient boosting accuracy: {np.round(GB_score.mean(), 4)*100}')","74bcd922":"#SVM\nSV_model = SVC()\nSV_model.fit(train_set1, y)\nSV_score=cross_val_score(SV_model, train_set1, y, cv=CV)\nprint(f'SVM accuracy: {np.round(SV_score.mean(), 4)*100}')","3ad115dc":"SV_model.fit(train_set1, y)\ny_test_pred=SV_model.predict(test_set1)","e27c8706":"y_test_pred","7531b185":"predict_submissions=pd.DataFrame({\"PassengerId\":(np.arange(892,1310)),\"Survived\":y_test_pred})","11090c42":"predict_submissions.to_csv(\"submission.csv\",index=False)","d56c260b":"# Prediction of missing values","74211b45":"# Analysing the data","72a19668":"Embarked is predicted based on the Passenger class and Fare.\n\nWe considered the median fares of all 'Embarked' values with respect to Passenger class.\n\nWhichever median fare is close to the fare of the missing 'Embarked' value, we filled the missing value with the respective  'Embarked' value","0aad8079":"In the passenger class 1, there are more number of survivors than deceased.\n\nIn the passenger class 2, the number of survivors is slightly less than deceased\n\nIn the passenger class 3, the number of survivors is very less compared to deceased\n\nSo there is more chance to survive for the people in the class 1","9fbc2d0c":"**Adding dummy columns for the categorical data**","27859e2b":"We will consider SVC to predict the test set survival values","790f0300":"# Visualization","a8ac7466":"There are more outliers in the deceased box (left plot) i,e.; number of aged people is high in the deceased.\n\nThe median fare in the deceased ones is less than the median fare of survived ones. So there are more chances to survive if the fare is high.","a43721cc":"**Standardization of the inputs**","57c66b29":"Some names don't have titles. In those cases, title is predicted based on the age","0a2bcbc6":"It can be understood, except 'Survived' column, remaining all columns are same in train and test datasets","be3de13e":"'Fare' will depend on the place a passenger started and the Class passenger travels. So fare will be predicted based on the 'Embarked' and 'Pclass'","30c2cbd5":"Combining the SibSp and Parch into one column 'Family' and dropping SibSp, Parch","80ba38cb":"# Training the models","e31dcaa5":"First, survival column in the train set will be kept aside.\n\nThen the train and test data sets will be combined\n\nUnwanted columns will be removed and missing values will be predicted.","5433b14a":"The survival percentage is more for the people who embarked at Cherbourg","23e10334":"Suvival percentage of males is very less compared to female","0d038065":"# Data Preprocessing","98ec5d4a":"# **Titanic Survival Prediction**","cf8be6be":"'Cabin' column has very less entries, so difficult to predict the missing values. This column will be removed.\n\n'Age', 'Fare' and 'Embarked' missing values will be predicted.","7578f9c0":"**Taking the train data which is combined initially.**","330d2a35":"Train set has 418 rows.\n\nWith 'Age' column has only 332 entries i.e.; 418-332=86 missing values.\n\nWith 'Cabin' column having only 91 entries i.e.; 418-91=327 missing values\n\nand 'Fare' column hacing 417 entries with 1 missing value","00c509fd":"Age is predicted based on the Pclass, Sex, Embarked and also the title in passengers' name","02657eab":"Train set has 891 rows.\n\nWith 'Age' column has only 714 entries i.e.; 891-714=177 missing values.\n\nWith 'Cabin' column having only 204 entries i.e.; 891-204=687 missing values\n\nand 'Embarked' column hacing 889 entries with 2 missing values.","f5132d93":"For the family sizes of 1,2 and 3 the survival percentage is more than deceased percentage.\n\nFor the people who travelled alone, the survived count is more but it is less percentage as the total passengers who travelled alone are more."}}