{"cell_type":{"2420bf0c":"code","e6921259":"code","a1cb3856":"code","8ead6ec9":"code","8934f427":"code","80edba50":"code","2391d162":"code","4a01b89b":"code","08eac1df":"code","8f4edaf4":"code","dec77159":"code","181c2527":"code","3d733bfa":"code","a5349fe2":"code","ab131037":"code","b994966d":"code","5f6599f7":"code","e157da8a":"code","d5be24d7":"code","086d27b8":"code","ca5f6e97":"code","d98e3244":"code","bb2c2719":"code","721758d7":"code","942ca5bb":"code","be633ce0":"code","216749ea":"code","7a0eaa2b":"code","2b5de1c5":"code","9bfb5545":"code","59d3a941":"code","a092ec7a":"code","fa8b2f28":"code","a3f1aa40":"code","259df353":"code","9d2f2e5b":"code","b037c9b2":"code","850b284b":"code","49321bd8":"code","68446b7a":"markdown"},"source":{"2420bf0c":"import os\nimport numpy as np\nimport pandas as pd\nfrom glob import glob\nfrom itertools import chain\nfrom tensorflow.keras import layers\nfrom sklearn.metrics import roc_curve, auc, roc_auc_score, accuracy_score, average_precision_score\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nimport tensorflow as tf","e6921259":"!pip install gdown","a1cb3856":"!gdown --id 1qRIdvUWiNxdAXXeEoyOMya-NuES6D-Px","8ead6ec9":"DATA_DIR = '..\/input\/data'\nimage_size = 256\nbatch_size = 32","8934f427":"df = pd.read_csv('..\/input\/data\/Data_Entry_2017.csv')","80edba50":"df","2391d162":"data_image_paths = {os.path.basename(x): x for x in glob(os.path.join(DATA_DIR, 'images*', '*', '*.png'))}","4a01b89b":"df['path'] = df['Image Index'].map(data_image_paths.get)","08eac1df":"df['path']","8f4edaf4":"df['Finding Labels'] = df['Finding Labels'].map(lambda x: x.replace('No Finding', ''))","dec77159":"labels = np.unique(list(chain(*df['Finding Labels'].map(lambda x: x.split('|')).tolist())))\nlabels = [x for x in labels if len(x) > 0]","181c2527":"labels","3d733bfa":"for label in labels:\n    if len(label) > 1:\n        df[label] = df['Finding Labels'].map(lambda finding: 1.0 if label in finding else 0.0)","a5349fe2":"labels = [label for label in labels if df[label].sum() > 1000]","ab131037":"labels","b994966d":"train_df, valid_df = train_test_split(df, test_size=0.20, random_state=2018, stratify=df['Finding Labels'].map(lambda x: x[:4]))","5f6599f7":"train_df['labels'] = train_df.apply(lambda x: x['Finding Labels'].split('|'), axis=1)\nvalid_df['labels'] = valid_df.apply(lambda x: x['Finding Labels'].split('|'), axis=1)","e157da8a":"core_idg = ImageDataGenerator(rescale=1 \/ 255,\n                                  samplewise_center=True,\n                                  samplewise_std_normalization=True,\n                                  horizontal_flip=True,\n                                  vertical_flip=False,\n                                  height_shift_range=0.05,\n                                  width_shift_range=0.1,\n                                  rotation_range=5,\n                                  shear_range=0.1,\n                                  fill_mode='reflect',\n                                  zoom_range=0.15)\n\ntrain_gen = core_idg.flow_from_dataframe(dataframe=train_df,\n                                             directory=None,\n                                             x_col='path',\n                                             y_col='labels',\n                                             class_mode='categorical',\n                                             batch_size=batch_size,\n                                             classes=labels,\n                                             target_size=(image_size, image_size))\n\nvalid_gen = core_idg.flow_from_dataframe(dataframe=valid_df,\n                                             directory=None,\n                                             x_col='path',\n                                             y_col='labels',\n                                             class_mode='categorical',\n                                             batch_size=batch_size,\n                                             classes=labels,\n                                             target_size=(image_size, image_size))\n\ntest_X, test_Y = next(core_idg.flow_from_dataframe(dataframe=valid_df,\n                                                       directory=None,\n                                                       x_col='path',\n                                                       y_col='labels',\n                                                       class_mode='categorical',\n                                                       batch_size=1024,\n                                                       classes=labels,\n                                                       target_size=(image_size, image_size)))","d5be24d7":"from tensorflow.keras.applications.densenet import DenseNet121\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom tensorflow.keras.applications.xception import Xception\nfrom tensorflow.keras.applications.nasnet import NASNetMobile\nfrom tensorflow.keras.applications.inception_resnet_v2 import InceptionResNetV2\n\nbase_model = InceptionResNetV2(include_top=False, weights='imagenet', input_shape=(256, 256, 3))\nx = base_model.output\nx = tf.keras.layers.GlobalAveragePooling2D()(x)\noutput = tf.keras.layers.Dense(len(labels), activation=\"sigmoid\")(x)\nmodel = tf.keras.Model(base_model.input, output)\nmodel.compile(optimizer=tf.keras.optimizers.Adam(), loss='binary_crossentropy', metrics=['accuracy'])","086d27b8":"def get_callbacks(model_name):\n    callbacks = []\n    tensor_board = tf.keras.callbacks.TensorBoard(log_dir='.\/logs', histogram_freq=0)\n    callbacks.append(tensor_board)\n    checkpoint = tf.keras.callbacks.ModelCheckpoint(\n        filepath=f'model.{model_name}.h5',\n        verbose=1,\n        save_best_only=True)\n    # erly = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)\n    callbacks.append(checkpoint)\n    # callbacks.append(erly)\n    return callbacks","ca5f6e97":"with tf.device(\"gpu:0\"):\n    from tensorflow.keras.applications.densenet import DenseNet121\n    from tensorflow.keras.applications.inception_v3 import InceptionV3\n    from tensorflow.keras.applications.xception import Xception\n    from tensorflow.keras.applications.nasnet import NASNetMobile\n    from tensorflow.keras.applications.inception_resnet_v2 import InceptionResNetV2\n\n    base_model = InceptionResNetV2(include_top=False, weights='imagenet', input_shape=(256, 256, 3))\n    x = base_model.output\n    x = tf.keras.layers.GlobalAveragePooling2D()(x)\n    output = tf.keras.layers.Dense(len(labels), activation=\"sigmoid\")(x)\n    model = tf.keras.Model(base_model.input, output)\n    model.compile(optimizer=tf.keras.optimizers.Adam(), loss='binary_crossentropy', metrics=['accuracy'])","d98e3244":"callbacks = get_callbacks('inceptionresnetv2')\nmodel.fit(train_gen,\n              steps_per_epoch=100,\n              validation_data=(test_X, test_Y),\n              epochs=50,\n              callbacks=callbacks)","bb2c2719":"path = \"..\/input\/chexpert-dataset\/\"\n\ntrain_df = pd.read_csv('..\/input\/chexpert-modified\/modifiedv2_train.csv')\nvalid_df = pd.read_csv('..\/input\/chexpert-modified\/modifiedv2_valid.csv')\ntrain_df[\"path\"] = path + train_df[\"Path\"]\nvalid_df[\"path\"] = path + valid_df[\"Path\"]\n\ndfs = [train_df, valid_df]\nall_xray_df = pd.concat(dfs)\nall_xray_df.sample(3)","721758d7":"# all_xray_df.drop(\"No Finding\", axis=1, inplace=True)\nall_xray_df.columns","942ca5bb":"all_xray_df['Finding Labels'] = all_xray_df['Finding Labels'].fillna('')","be633ce0":"all_xray_df['Finding Labels'] = all_xray_df['Finding Labels'].map(lambda x: x.replace('No Finding', ''))","216749ea":"all_labels = ['Atelectasis'\n, 'Consolidation'\n, 'Infiltration'\n, 'Pneumothorax'\n, 'Edema'\n, 'Emphysema'\n, 'Fibrosis'\n, 'Pleural Effusion'\n, 'Mass'\n, 'Pneumonia'\n, 'Pleural_thickening'\n, 'Cardiomegaly'\n, 'Nodule Mass'\n, 'Hernia'\n, 'Enlarged Cardiom'\n, 'Lung Lesion'\n, 'Lung Opacity'\n, 'Pleural Other'\n,'Fracture']\n\nprint('All Labels ({}): {}'.format(len(all_labels), all_labels))","7a0eaa2b":"for c_label in all_labels:\n    if len(c_label)>1: # leave out empty labels\n        all_xray_df[c_label] = all_xray_df['Finding Labels'].map(lambda finding: 1.0 if c_label in finding else 0)\nall_xray_df.sample(3)","2b5de1c5":"all_xray_df.head()","9bfb5545":"train_df, valid_df = train_test_split(all_xray_df, test_size=0.20, random_state=2018, stratify=all_xray_df['Finding Labels'].map(lambda x: x[:4]))","59d3a941":"train_df['labels'] = train_df.apply(lambda x: x['Finding Labels'].split('|'), axis=1)\nvalid_df['labels'] = valid_df.apply(lambda x: x['Finding Labels'].split('|'), axis=1)","a092ec7a":"DATA_DIR = '..\/input\/chexpert-dataset\/CheXpert-v1.0-small\/train'\nimage_size = 256\nbatch_size = 32","fa8b2f28":"core_idg = ImageDataGenerator(rescale=1 \/ 255,\n                                  samplewise_center=True,\n                                  samplewise_std_normalization=True,\n                                  horizontal_flip=True,\n                                  vertical_flip=False,\n                                  height_shift_range=0.05,\n                                  width_shift_range=0.1,\n                                  rotation_range=5,\n                                  shear_range=0.1,\n                                  fill_mode='reflect',\n                                  zoom_range=0.15)\n\ntrain_gen = core_idg.flow_from_dataframe(dataframe=train_df,\n                                             directory=None,\n                                             x_col='path',\n                                             y_col='labels',\n                                             class_mode='categorical',\n                                             batch_size=batch_size,\n                                             classes=all_labels,\n                                             target_size=(image_size, image_size))\n\nvalid_gen = core_idg.flow_from_dataframe(dataframe=valid_df,\n                                             directory=None,\n                                             x_col='path',\n                                             y_col='labels',\n                                             class_mode='categorical',\n                                             batch_size=batch_size,\n                                             classes=all_labels,\n                                             target_size=(image_size, image_size))\n\ntest_X, test_Y = next(core_idg.flow_from_dataframe(dataframe=valid_df,\n                                                       directory=None,\n                                                       x_col='path',\n                                                       y_col='labels',\n                                                       class_mode='categorical',\n                                                       batch_size=1024,\n                                                       classes=all_labels,\n                                                       target_size=(image_size, image_size)))","a3f1aa40":"from tensorflow.keras.callbacks import ModelCheckpoint, LearningRateScheduler, EarlyStopping, ReduceLROnPlateau\nweight_path=\"{}sigmoid_activation_inceptionresnetv2.hdf5\".format('xray_class')\n\ncheckpoint = ModelCheckpoint(weight_path, monitor='val_loss', verbose=1, \n                             save_best_only=True, mode='min')\n\nearly = EarlyStopping(monitor=\"val_loss\", \n                      mode=\"min\", \n                      patience=3)\ncallbacks_list = [checkpoint, early]","259df353":"for x, y in train_gen:\n    print(x.shape)\n    break","9d2f2e5b":"nihmodel = tf.keras.models.load_model('.\/sigmoid_activation_inceptionresnetv2.h5')","b037c9b2":"nihmodel.trainable = False\nbase_inputs = nihmodel.layers[0].input\nbase_outputs = nihmodel.layers[-2].output\ndense_1 = layers.Dense(500, activation=\"relu\")(base_outputs)\noutput_layer = layers.Dense(19, activation=\"softmax\")(dense_1)\n\nnewnihmodel = tf.keras.Model(inputs = base_inputs, outputs = output_layer)\nnewnihmodel.compile(optimizer=tf.keras.optimizers.Adam(),\n                 loss=tf.keras.losses.BinaryCrossentropy(),\n                 metrics=[\"binary_accuracy\", \"mae\"])","850b284b":"newnihmodel.summary()","49321bd8":"newnihmodel.fit(train_gen, \n                            steps_per_epoch=100,\n                            validation_data = (test_X, test_Y), \n                            epochs = 10, \n                            callbacks = callbacks_list)","68446b7a":"**Fine Tune on chexpert**"}}