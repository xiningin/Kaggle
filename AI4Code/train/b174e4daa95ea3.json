{"cell_type":{"c75275bb":"code","e4559d77":"code","d013407a":"code","16fe7739":"code","62533d8b":"code","35302821":"code","4e735cef":"code","41859229":"code","659975d2":"code","960b4469":"code","9a6ce32e":"code","7e44637e":"code","336b96c9":"code","470ea3b1":"code","6265c090":"code","45f9c2bd":"code","10f3e61f":"code","92051167":"code","016c38a3":"code","b86e0a0b":"code","112add0f":"code","b0abc310":"code","2a74c8f3":"code","ac9aa607":"code","2de0e479":"code","dc5064c6":"code","58283db9":"code","bf0ca78c":"markdown","b91015cd":"markdown","d771c9c0":"markdown","f12e095b":"markdown","1843eeaa":"markdown","ec2d7da0":"markdown","b88ff2da":"markdown","30a04982":"markdown","cd23a9d1":"markdown","f89d8e05":"markdown","36a8ed89":"markdown","9b63e4a5":"markdown","e335caf5":"markdown","34014e81":"markdown","f8ed5e47":"markdown"},"source":{"c75275bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e4559d77":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d013407a":"data= pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')\ndata.head()","16fe7739":"submission= pd.read_csv('..\/input\/cancer-submission\/cancer_submission.csv')\n","62533d8b":"data.describe()","35302821":"data.info()","4e735cef":"missing= data.isnull().sum().sort_values(ascending= False)\nmissing_per= (data.isnull().sum()\/data.isnull().count()).sort_values(ascending= False)\ntotal= pd.concat([missing, missing_per], axis=1, keys=['Total', 'Percent'])\ntotal","41859229":"data= data.drop('Unnamed: 32', axis=1)","659975d2":"plt.figure(figsize=(18, 9))\nsns.heatmap(data.corr(), cmap='GnBu', annot= True)","960b4469":"sns.barplot(x= 'diagnosis', y= 'id', data= data)\nplt.title(\"Id vs Diagnosis\")\nplt.xlabel(\"Id\")\nplt.ylabel(\"Diagnosis\")\nplt.show()","9a6ce32e":"x= data.drop('diagnosis', axis=1)","7e44637e":"y= data.diagnosis.copy()","336b96c9":"x.head()","470ea3b1":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ny=le.fit_transform(y)","6265c090":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test= train_test_split(x, y, test_size=0.2, random_state=0)","45f9c2bd":"print(len(x_train))\nprint(len(x_test))\nprint(len(y_train))\nprint(len(y_test))","10f3e61f":"from sklearn.preprocessing import StandardScaler\nsc= StandardScaler()\nx_train= sc.fit_transform(x_train)\nx_test= sc.fit_transform(x_test)","92051167":"from sklearn.linear_model import LogisticRegression\nlr= LogisticRegression(random_state=0)\nlr.fit(x_train, y_train)\n\ny_pred1= lr.predict(x_test)\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm= confusion_matrix(y_test, y_pred1)\nprint(cm)\naccuracy_score(y_test, y_pred1)","016c38a3":"from sklearn.neighbors import KNeighborsClassifier\nkn= KNeighborsClassifier(n_neighbors=5, metric= 'minkowski', p=2)\nkn.fit(x_train, y_train)\n\ny_pred2= kn.predict(x_test)\n\ncm= confusion_matrix(y_test, y_pred2)\nprint(cm)\naccuracy_score(y_test, y_pred2)","b86e0a0b":"from sklearn.svm import SVC\nksvc = SVC(kernel = 'rbf', random_state = 0)\nksvc.fit(x_train, y_train)\n\ny_pred3= ksvc.predict(x_test)\n\ncm= confusion_matrix(y_test, y_pred3)\nprint(cm)\naccuracy_score(y_test, y_pred3)","112add0f":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train, y_train)\n\ny_pred4= nb.predict(x_test)\n\ncm= confusion_matrix(y_test, y_pred4)\nprint(cm)\naccuracy_score(y_test, y_pred4)","b0abc310":"from sklearn.svm import SVC\nsvc = SVC(kernel = 'linear', random_state = 0)\nsvc.fit(x_train, y_train)\n\ny_pred5= svc.predict(x_test)\n\ncm= confusion_matrix(y_test, y_pred5)\nprint(cm)\naccuracy_score(y_test, y_pred5)","2a74c8f3":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\ndt.fit(x_train, y_train)\n\ny_pred6= dt.predict(x_test)\n\ncm= confusion_matrix(y_test, y_pred6)\nprint(cm)\naccuracy_score(y_test, y_pred6)","ac9aa607":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nrf.fit(x_train, y_train)\n\ny_pred7= rf.predict(x_test)\n\ncm= confusion_matrix(y_test, y_pred7)\nprint(cm)\naccuracy_score(y_test, y_pred7)","2de0e479":"from sklearn.ensemble import GradientBoostingClassifier\nxgb= GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=1, random_state=0)\nxgb.fit(x_train, y_train)\n\ny_pred8= xgb.predict(x_test)\n\ncm= confusion_matrix(y_test, y_pred8)\nprint(cm)\naccuracy_score(y_test, y_pred8)","dc5064c6":"submission = pd.DataFrame()\nsubmission['diagnosis'] = y_pred3\nsubmission.to_csv('cancer_submission.csv',index=False)","58283db9":"submission.head()","bf0ca78c":"**KNeighbors Classification**","b91015cd":"**SVC**","d771c9c0":"**Decision Tree**","f12e095b":"**Random Forest**","1843eeaa":"**Kernal SVM**","ec2d7da0":"# Classification Models","b88ff2da":"# Importing Dataset","30a04982":"# Label Encoding","cd23a9d1":"# Importing Libraries","f89d8e05":"# Train Test Split","36a8ed89":"**Naive Bayes**","9b63e4a5":"# Standard Scaling","e335caf5":"**Logistic Regression**","34014e81":"**XG Boost Classifier**","f8ed5e47":"# Data Visualization"}}