{"cell_type":{"c27bb5e2":"code","33e6b076":"code","79b4588b":"code","72fa7169":"code","1f397a1d":"code","b9913a4f":"code","97c8b5b7":"code","d96da693":"code","df063926":"code","a8efeb73":"code","a1801ee8":"code","80dceb90":"code","11aed6c2":"code","1d124f89":"code","260718a8":"code","1ae64078":"code","1e1d7813":"code","c61e64c3":"code","7ad73a9b":"code","94dc1609":"code","d3308fef":"code","01531f9d":"code","33ff1a57":"code","f7800a19":"code","be1790e1":"code","24273f1a":"code","6cc93e7f":"code","44db0393":"code","f5ecd190":"code","71964341":"code","f38d6024":"code","1c523a77":"code","64752a32":"markdown"},"source":{"c27bb5e2":"import pandas as pd\ntrain=pd.read_csv('..\/input\/bikedata\/train.csv')\ntrain.head().append(train.tail())\n","33e6b076":"train.shape","79b4588b":"test=pd.read_csv('..\/input\/bikedata\/test.csv')\ntest.head().append(test.tail())","72fa7169":"train.dtypes","1f397a1d":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.boxplot(data=train[['temp',\n       'atemp', 'humidity', 'windspeed', 'casual', 'registered', 'count']])\nfig=plt.show()\n","b9913a4f":"train[\"season\"]","97c8b5b7":"season=pd.get_dummies(train['season'],prefix='season')\ntrain=pd.concat([train,season],axis=1)\ntrain.head()\nseason=pd.get_dummies(test['season'],prefix='season')\ntest=pd.concat([test,season],axis=1)\ntest.head()","d96da693":"weather=pd.get_dummies(train['weather'],prefix='weather')\ntrain=pd.concat([train,weather],axis=1)\ntrain.head()\nweather=pd.get_dummies(test['weather'],prefix='weather')\ntest=pd.concat([test,weather],axis=1)\ntest.head()","df063926":"# # # now can drop weather and season.\ntrain.drop(['season','weather'],inplace=True,axis=1)\ntrain.head()\ntest.drop(['season','weather'],inplace=True,axis=1)\ntest.head()","a8efeb73":"train.columns","a1801ee8":"train[\"hour\"]=[t.hour for t in pd.DatetimeIndex(train.datetime)]\ntrain[\"day\"]=[t.day for t in pd.DatetimeIndex(train.datetime)]\ntrain[\"month\"]=[t.month for t in pd.DatetimeIndex(train.datetime)]\ntrain[\"year\"]=[t.year for t in pd.DatetimeIndex(train.datetime)]\ntrain['year'] = train['year'].map({2011:0, 2012:1})\ntrain.head()","80dceb90":"train.drop('datetime',axis=1,inplace=True)\ntrain.head()","11aed6c2":"test[\"hour\"] = [t.hour for t in pd.DatetimeIndex(test.datetime)]\ntest[\"day\"] = [t.dayofweek for t in pd.DatetimeIndex(test.datetime)]\ntest[\"month\"] = [t.month for t in pd.DatetimeIndex(test.datetime)]\ntest['year'] = [t.year for t in pd.DatetimeIndex(test.datetime)]\ntest['year'] = test['year'].map({2011:0, 2012:1})\ntest.head()","1d124f89":"test.drop('datetime',axis=1,inplace=True)\ntest.head()","260718a8":"import numpy as np\ncor_mat= train[:].corr()\nmask = np.array(cor_mat)\nmask[np.tril_indices_from(mask)] = False\nfig=plt.gcf()\nfig.set_size_inches(30,12)\nsns.heatmap(data=cor_mat,mask=mask,square=True,annot=True,cbar=True)\n","1ae64078":"train.drop(['casual','registered'],axis=1,inplace=True)","1e1d7813":"import seaborn as sns\nsns.histplot(train[\"count\"])","c61e64c3":"train['count'].describe()","7ad73a9b":"#histogram\nfrom scipy.stats import norm, skew\nfrom scipy import stats\nsns.distplot(train['count'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['count'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('count distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['count'], plot=plt)\nplt.show()\n","94dc1609":"print(\"Skewness: %f\" % train['count'].skew())\nprint(\"Kurtosis: %f\" % train['count'].kurt())","d3308fef":"#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\ntrain[\"count\"] = np.log1p(train[\"count\"])\n\n#Check the new distribution \nsns.distplot(train['count'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['count'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('count distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['count'], plot=plt)\nplt.show()","01531f9d":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig, axs = plt.subplots(ncols=4)\nsns.countplot(train[\"season\"], ax=axs[0])\nsns.countplot(train[\"holiday\"], ax=axs[1])\nsns.countplot(train[\"workingday\"], ax=axs[2])\nsns.countplot(train[\"weather\"], ax=axs[3])","33ff1a57":"fig, axs = plt.subplots(ncols=2)\nsns.histplot(train[\"atemp\"], ax=axs[0])\nsns.histplot(train[\"temp\"], ax=axs[1])","f7800a19":"fig, axs = plt.subplots(ncols=2)\nsns.histplot(train[\"humidity\"], ax=axs[0])\nsns.histplot(train[\"windspeed\"], ax=axs[1])","be1790e1":"sns.boxplot(x=train[\"season\"], y=train[\"count\"])\n","24273f1a":"sns.boxplot(x=train[\"weather\"], y=train[\"count\"])\n","6cc93e7f":"sns.boxplot(x=train[\"workingday\"], y=train[\"count\"])\n","44db0393":"import seaborn as sns\n\nimport matplotlib.pyplot as plt\n\n# taking all rows but only 6 columns\ntrain_small = train.iloc[:,1:]\n\ncorrelation_mat = train_small.corr()\n\nsns.heatmap(correlation_mat, mask = mask, annot = True, annot_kws={'size': 9})\n\nplt.show()","f5ecd190":"import numpy as np\ncorrmat = train.corr()\nk = 6 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'count')['count'].index\ncm = np.corrcoef(train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","71964341":"train.drop('atemp', axis=1)","f38d6024":"var = 'registered'\ndata = pd.concat([train['count'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='count', ylim=(0,1000));","1c523a77":"var = 'casual'\ndata = pd.concat([train['count'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='count', ylim=(0,1000));","64752a32":"##### from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(train.drop('count',axis=1),train['count'],test_size=0.25,random_state=42)"}}