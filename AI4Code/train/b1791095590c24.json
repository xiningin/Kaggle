{"cell_type":{"9e893ce1":"code","e1e6ce4f":"code","1af990dd":"code","4dcfe44a":"code","93dcfdca":"code","e25c6d4f":"code","8bdd6cfc":"code","8204c7a1":"code","37494f32":"code","f16af2b1":"code","83712e13":"code","3353434c":"code","a39a2802":"code","83c4cfd3":"code","dc76bb8c":"code","30323c37":"code","5c91d8fb":"code","89763346":"code","c1ff404a":"code","ebf4e24f":"code","ff9d5f71":"code","70551e86":"code","dbe3f787":"code","02dce887":"code","9d161457":"code","51f4af80":"code","8cc5cd58":"code","4fb8286a":"code","2b1fd28a":"code","b445f135":"markdown","2c847ce5":"markdown","0f8f0b26":"markdown","2a6cda53":"markdown","59485999":"markdown","121a6b08":"markdown","f3c69afa":"markdown","653757f1":"markdown","0728b2ce":"markdown","c907c115":"markdown","7ac0070d":"markdown","97f006a2":"markdown"},"source":{"9e893ce1":"import pandas as pd\ntrain = pd.read_csv(\"..\/input\/shelter-animal-outcomes\/train.csv.gz\")\ntest = pd.read_csv(\"..\/input\/shelter-animal-outcomes\/test.csv.gz\")","e1e6ce4f":"train","1af990dd":"# num of rows and columns\nprint( \"records and columns in train dataset: \",train.shape)\nprint( \"records and columns in test dataset:  \",test.shape)","4dcfe44a":"# Four columns have nulls -\ntrain.isnull().sum(axis = 0)","93dcfdca":"# All 9 columns are categorical - need to convert\ntrain.info()","e25c6d4f":"# values in target variable are not balanced, will make it challenging to predict \"Died\" or \"Euthenized\"\ntrain.OutcomeType.value_counts()","8bdd6cfc":"# outcomeSubtype is dependant on OutcomeType, does not contribute to prediction\ntrain = train.drop('OutcomeSubtype', axis=1)","8204c7a1":"# The actual name does not matter, what is important is whether the dog has a name or not\n# has_name =1, no_name=0\ntrain.Name = train.Name.apply(lambda x: 0 if pd.isnull(x) else 1)\ntest.Name = test.Name.apply(lambda x: 0 if pd.isnull(x) else 1)","37494f32":"# Now Name is numeric with no nulls\ntrain.Name","f16af2b1":"# Out of 26729 records, 18 are nulls - we will replace them with zero\n# Replace nulls with zeros, convert age from an ordinal variable to a numeric \n#age in weeks\n#calculate Age in weeks\ndef age_in_weeks(x):\n    if pd.isnull(x):\n        return 0\n    num = int(x.split(' ')[0])\n    if 'year' in x:\n        return num * 52\n    elif 'month' in x:\n        return num * 4.5\n    elif 'week' in x:\n        return num\n    elif 'day' in x:\n        return 1","83712e13":"train.AgeuponOutcome= train.AgeuponOutcome.apply(lambda x : age_in_weeks(x))\ntest.AgeuponOutcome= test.AgeuponOutcome.apply(lambda x : age_in_weeks(x))\n#AgeuponOutcome is numeric with no nulls\ntrain.AgeuponOutcome","3353434c":"# Breed Column - reduce unique values and convert to numeric. mixed breed=1 else 0\n\ndef breed_type(x):\n    if \"Mix\" in x:\n        return 1\n    return 0","a39a2802":"# Is animal of mix breed?\ntrain.Breed = train.Breed.apply(breed_type)\ntest.Breed = test.Breed.apply(breed_type)\n#Breed is now numeric with no nulls\ntrain.Breed","83c4cfd3":"# DateTime - Remove the timestamp then split date into three new fields.\ntrain.DateTime=pd.to_datetime(train.DateTime)\ntrain[\"dayofweek\"] = train.DateTime.dt.dayofweek\ntrain[\"month\"] = train.DateTime.dt.month\ntrain[\"year\"] = train.DateTime.dt.year\n\ntest.DateTime=pd.to_datetime(test.DateTime)\ntest[\"dayofweek\"] = test.DateTime.dt.dayofweek\ntest[\"month\"] = test.DateTime.dt.month\ntest[\"year\"] = test.DateTime.dt.year","dc76bb8c":"train","30323c37":"#SexuponOutcome has one null value\ntrain.isnull().sum(axis = 0)","5c91d8fb":"# Drop record with null value\ntrain = train.dropna()\ntrain.isnull().sum(axis = 0)","89763346":"# Use LabelEncoder to convert rest of features\nfrom sklearn.preprocessing import LabelEncoder\n\ntrain.OutcomeType = LabelEncoder().fit_transform(train.OutcomeType)\ntrain.AnimalType = LabelEncoder().fit_transform(train.AnimalType)\ntrain.SexuponOutcome = LabelEncoder().fit_transform(train.SexuponOutcome)\ntrain.Color = LabelEncoder().fit_transform(train.Color)","c1ff404a":"test.AnimalType = LabelEncoder().fit_transform(test.AnimalType)\ntest.SexuponOutcome = LabelEncoder().fit_transform(test.SexuponOutcome)\ntest.Color = LabelEncoder().fit_transform(test.Color)","ebf4e24f":"# ALl required columns has numeric values\ntrain","ff9d5f71":"# We will store the target variable in a dataset by itelf \ntarget = train.OutcomeType\ntarget","70551e86":"# drop unused columns\ntrain=train.drop([\"AnimalID\", \"DateTime\",\"OutcomeType\"],axis=1)\ntrain\n\ntestID=test.ID #keeping the IDs\ntest=test.drop([\"ID\",\"DateTime\"],axis=1)","dbe3f787":"X=train\nX","02dce887":"# we have 9 numeric columns with no nulls\ntrain.isnull().sum(axis = 0)","9d161457":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, #train w\/o target var\n                                                    target, \n                                                    test_size=0.20, \n                                                    random_state=1)\n\nprint(\"Records & variables in X_train dataset: \", X_train.shape)\nprint(\"Records in training dataset for Target variable: \", y_train.shape)\nprint(\"Records & variables in X_test dataset: \", X_test.shape)\nprint(\"Records in testing dataset for Target variable: \", y_test.shape)","51f4af80":"from sklearn.ensemble import RandomForestClassifier\n# Do random forest\nrf = RandomForestClassifier(n_estimators=1000)\nrf.fit(X, target)\n# Let's see the train accuracy\ntra_score=rf.score(X, target)\n\nprint(\"Training accuracy for RandomForest: \",tra_score)","8cc5cd58":"#Retraining with the complete training set\nrf.fit(train, target)","4fb8286a":"#Getting predicted probabilities\npred = rf.predict_proba(test)","2b1fd28a":"my_submission = pd.DataFrame({'ID':testID, \n                              'Adoption':pred[:,0], \n                              'Died':pred[:,1],'Euthanasia':pred[:,2],\n                              'Return_to_owner':pred[:,3],'Transfer':pred[:,4] })\n\n# you could use any filename\nmy_submission.to_csv('submission.csv', index=False)","b445f135":"## 1. OutcomeSubtype Column","2c847ce5":"## 6. Remaining Categorical Columns","0f8f0b26":"## 2. Name Column","2a6cda53":"# Replacing nulls and converting to numeric","59485999":"## 5. DateTime Column","121a6b08":"**<mark> <font size=\"3\" color=\"red\">  We got 98.58% accuracy**","f3c69afa":"## 3. AgeuponOutcome Column ","653757f1":"## 4. Breed Column","0728b2ce":"## 6. SexuponOutcome","c907c115":"*No more nulls*","7ac0070d":"# Splitting data into training and testing sets\nwe will use the train_test_split method, the target varible will have a dataset by itself \"target, the training data will be x.","97f006a2":"# Submission"}}