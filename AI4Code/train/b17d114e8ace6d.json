{"cell_type":{"3115055c":"code","7df5440a":"code","eb78fa45":"code","e0d49c47":"code","7d6a67bf":"code","d5e931bb":"code","67420b55":"code","6778d2b4":"code","a1731e1e":"code","96ad4d42":"code","c3fa4c9b":"code","e5a64d49":"code","921a2c2b":"code","70fed677":"code","6ad79d06":"code","4086a626":"code","7b93be1e":"code","e8538596":"code","d037f870":"code","36211cf3":"code","8e748f53":"code","0e0cecb3":"code","436bd5a3":"code","b765272a":"code","71e76c82":"code","03f9425d":"code","8cc045af":"code","b9894104":"code","b63fcbb5":"code","a88b129c":"code","7f54f3cb":"code","2d704d3e":"code","067b5e97":"code","ec303f8d":"code","004e8268":"code","783d50a2":"code","1a51ae74":"code","12bb0861":"code","6e3e88d6":"code","ef632f00":"code","a95c61c9":"code","f535fee6":"code","e61848ff":"code","d756528c":"code","8f24be41":"code","f77ee591":"code","d762e41f":"markdown","3050f5ba":"markdown","76e039d8":"markdown","cacf72ac":"markdown","974ce559":"markdown","92f3f04e":"markdown","41bc9655":"markdown"},"source":{"3115055c":"!pip install adjustText\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandasql as ps\nfrom functools import partial, reduce\nfrom adjustText import adjust_text\nplt.rcParams[\"figure.figsize\"] = (20,10)","7df5440a":"namedict = pd.read_csv('..\/input\/liquor-store-data\/ServDic.csv')\nrawHour = pd.read_csv('..\/input\/liquor-store-data\/RPT_HOU.txt', index_col = False)\nrawHour.rename(columns = dict(zip(namedict['FLDD'],namedict['DESCRIPTION'])),inplace = True)\nrawHour.rename(columns = dict(zip(rawHour.columns, ['date','a','register', 'hour', 'date_range','type','customers','sales','a','a'])), inplace = True)\nrawHour.drop(columns = 'a', inplace = True)\nrawHour['date'] = rawHour['date'].map(lambda x: datetime.strptime(x.replace(x[0],''),\"%Y%j\"))\nrawHour['type'] = rawHour['type'].map({3102 : 'transactions', 2 : 'items' })\nrawHour = rawHour.groupby(['date_range','date','hour','type'], as_index = False).sum()\n#rawHour.drop(columns = 'register')\nHourlyData = rawHour[(rawHour['date_range'] == '\\'W\\'') & (rawHour['type'] == 'transactions')]","eb78fa45":"govtPrices = pd.read_csv('..\/input\/liquor-store-data\/prices.csv', skipinitialspace = True)\nProductInfo = pd.read_csv('..\/input\/liquor-store-data\/product_info.csv', dtype = {'sku':float})\ninStock =  pd.read_csv('..\/input\/liquor-store-data\/IsInStock.csv', skipinitialspace = True, dtype= {' instock ':bool})\ninStock.drop_duplicates(inplace = True)\ninStock.rename(columns = {'instock ':'instock'}, inplace = True)\nfor index, price in enumerate(govtPrices['price']):\n    govtPrices.loc[index,'price'] = float(price.strip(\" $\"))\n\npriceComp = pd.merge(pd.merge(govtPrices, ProductInfo, on='sku', how = 'inner'),inStock, on = 'sku', how = 'left')\n\npriceComp.columns\npriceComp.drop(columns = ['Sale Price','End Date','modification_date'],inplace = True)\npriceComp.to_csv('price_comparison.csv')\npriceComp.rename(columns = {'price_x':'govt_price','price_y':'store_price','product name':'govt_name'}, inplace = True)\n    \npriceComp['percent_price_diff'] = 100*(priceComp['store_price'] - priceComp['govt_price'])\/(0.5*priceComp['store_price']+0.5*priceComp['govt_price'])\npriceComp.percent_price_diff = priceComp.percent_price_diff.astype(float)\npriceComp.percent_price_diff = priceComp.percent_price_diff.round(decimals = 2)\n\nWeeklySales = pd.read_csv('..\/input\/liquor-store-data\/sales_weekly.csv')\nWeeklySales = pd.merge(WeeklySales, ProductInfo[['upc','name','modification_date','category']], how = 'left', left_on = 'upc', right_on = 'upc')\nWeeklySales['date'] = [datetime.strptime(str(date),\"%Y%j\") for date in WeeklySales['date']]\nWeeklySales = WeeklySales.fillna('unknown')\n\nMonthlySales = pd.read_csv('..\/input\/liquor-store-data\/sales_monthly.csv')\nMonthlySales['date'] = [datetime.strptime(str(date),\"%Y%j\") for date in MonthlySales['date']]\nMonthlyTotals = MonthlySales.groupby('date').sum()\n\n\n#HourlyData = pd.read_csv('..\/input\/liquor-store-data\/sales_hourly.csv')\n#HourlyData['date'] = [datetime.strptime(str(date),\"%Y%j\") for date in HourlyData['date']]\nHourlySales = pd.pivot_table(HourlyData, values = 'sales', index = ['date'], columns = ['hour'],fill_value = 0)\nHourlyCustomers = pd.pivot_table(HourlyData, values = 'customers', index = ['date'], columns = ['hour'],fill_value = 0)","e0d49c47":"priceComp.sort_values('percent_price_diff',ascending = True, inplace = True)\npriceComp.drop(priceComp[priceComp['percent_price_diff'] < -75].index, inplace = True)\npriceComp.head()","7d6a67bf":"temp = MonthlySales[(MonthlySales['date'] >= datetime(2020,8,1)) & (MonthlySales['date'] <= datetime(2021,8,1))].groupby('upc').sum()\ntemp2 = pd.merge(priceComp, temp[['units']], how = 'inner', on = 'upc')\n\nax = temp2.plot(kind = 'scatter', x = 'units', y = 'percent_price_diff', logx = True, label = 'Not In Stock')\ntemp2[temp2['instock'] == True].plot(kind = 'scatter', x = 'units', y = 'percent_price_diff', logx = True, color = 'red', ax = ax, label = 'In Stock')\n\n\ntext = []\nfor index, txt in temp2[(temp2['units'] > 750) | (temp2['percent_price_diff'] < -10) | (temp2['percent_price_diff'] > 23)]['name'].iteritems():\n    text.append(plt.annotate(txt,(temp2['units'][index] ,temp2['percent_price_diff'][index])))\n\nadjust_text(text, arrowprops=dict(arrowstyle='-', color='black'))\n\nprint('Correlation = ' + str(np.corrcoef(x = temp2['units'],y = temp2['percent_price_diff'])[0,1]))\nprint('In stock Correlation = ' + str(np.corrcoef(x = temp2[temp2['instock'] == True]['units'],y = temp2[temp2['instock'] == True]['percent_price_diff'])[0,1]))\n                                                                                        ","d5e931bb":"YearlyTotals = MonthlyTotals.rolling(window = 12 ).sum()\nYearlyTotals.plot(y = ['total','cost'])\nplt.ylabel('Dollars ($)')\nplt.title('Rolling Yearly Sales')","67420b55":"ax = MonthlyTotals.plot(y = 'total')\nax.axvline(x=datetime(2020,3,1),color = 'k', linestyle = '--',lw = 1)\nplt.ylabel('Dollars ($)')\nplt.title('Monthly Sales')\n","6778d2b4":"xmin = datetime(2005,1,1)\nxmax = datetime(2021,8,1)\nplt.plot(MonthlyTotals.index, MonthlyTotals['total']-MonthlyTotals['cost'])\nplt.ylabel('Dollars ($)')\nplt.title('Monthly Revenue')\nplt.xlim(xmin,xmax)","a1731e1e":"xmin = datetime(2005,1,1)\nxmax = datetime(2021,8,1)\nplt.plot(MonthlyTotals.index,MonthlyTotals['total']\/MonthlyTotals['cost']-1)\nplt.xlim(xmin,xmax)\nplt.ylim(-0.08,0.45)\nplt.ylabel('Percent (%)')\nplt.title('Profit Margin')","96ad4d42":"xmin = datetime(2016,1,1)\nxmax = datetime(2021,8,1)\nplt.plot(MonthlyTotals.index,MonthlyTotals['total']\/MonthlyTotals['cost']-1)\nplt.xlim(xmin,xmax)\nplt.ylim(0.30,0.45)\nplt.ylabel('%')\nplt.title('Profit Margin')","c3fa4c9b":"xmin = datetime(2017,8,1)\nxmax = datetime(2021,8,1)\nplt.plot(MonthlyTotals.index,MonthlyTotals['total']\/MonthlyTotals['units'])\nplt.xlim(xmin,xmax)\nplt.title('Average Sale Price per Unit')\nplt.ylabel('Dollars ($)')\n\n#distribution plot of unit sale price in december 2020 vs jan 2021","e5a64d49":"MonthlySales['unit_total'] = MonthlySales['total']\/MonthlySales['units']\n\nax = MonthlySales[MonthlySales['date'] == datetime(2020,12,1)].hist(column = 'unit_total',bins = np.arange(0,200,5))\nMonthlySales[MonthlySales['date'] == datetime(2021,1,1)].hist(column = 'unit_total',bins = np.arange(0,200,5), ax = ax)\nplt.xlim((0,200))\n","921a2c2b":"WeeklyCustomers = HourlyData.groupby('date').sum()\nplt.plot(WeeklyCustomers.index,WeeklyCustomers.rolling(window = 1).mean()['sales']\/WeeklyCustomers.rolling(window = 1).mean()['customers'])\nplt.ylabel('Sales ($)')\nplt.title('Average Spent per Customer')\nplt.ylim(17,45)","70fed677":"plt.plot(WeeklyCustomers.index,WeeklyCustomers.rolling(window = 1).mean()['customers'])\nplt.ylabel('Sales ($)')\nplt.title('Average Weekly Customers')","6ad79d06":"fig, ax = plt.subplots(1,1)\nax2 = ax.twinx()\nax.plot(WeeklyCustomers.index,WeeklyCustomers.rolling(window = 1).mean()['sales']\/WeeklyCustomers.rolling(window = 1).mean()['customers'], label = 'average spent')\nax2.plot(WeeklyCustomers.index,WeeklyCustomers.rolling(window = 1).mean()['customers'], color = 'red', label = 'customers')\nax.set_ylabel('average spent', color = 'blue')\nax2.set_ylabel('avg weekly customers', color = 'red')\nplt.title('Average Weekly Customers')\nplt.xlim(datetime(2019,3,1),datetime(2021,10,1))\nax.set_ylim(19,45)\nax2.set_ylim(700,2000)","4086a626":"HourlyTotals = HourlyData[HourlyData['date'] > datetime(2020,10,1)].groupby('hour').mean()\/7\n\nax = HourlyTotals.plot(kind = 'bar', y=['customers','sales'], secondary_y = 'sales')\nax.set_ylabel('Customers')\nax.right_ax.set_ylabel('Sales ($)')\nax.set_xticks(np.arange(0.5,14.5,1))\nax.set_xticklabels(['9am', '10am', '11am', '12am', '1pm', '2pm', '3pm', '4pm', '5pm', '6pm', '7pm', '8pm','9pm', '10pm'])\nax.set_xlim(0.45,13.55)\nplt.title('2019-2021 Average Daily Customers and Sales per Hour')\n\n\"\"\"\nI checked the hourly sales by day of week and found no change.\ntemp = rawHour[(rawHour['date_range'] == '\\'D\\'') & (rawHour['type'] == 'transactions')]\ntemp['week_day'] = temp['date'].dt.dayofweek\ntemp2 = temp[(temp['date'] > datetime(2020,10,1)) & (temp['date'] < datetime(2021,3,1))].groupby(by = ['hour', 'week_day']).mean()\nax = temp2.loc[[10,21,22],:].plot(kind = 'bar', y = ['sales'])\n\"\"\"","7b93be1e":"plt.plot(HourlySales.index,HourlySales.rolling(window = 3).mean()[10]\/7,label = '9-10am')\nplt.plot(HourlySales.index,HourlySales.rolling(window = 3).mean()[22]\/7,label = '9-10pm')\nplt.plot(HourlySales.index,HourlySales.rolling(window = 3).mean()[21]\/7,label = '8-9pm')\nplt.legend()\nplt.ylabel('Sales ($)')\nplt.title('Average Daily Sales per Hour')\nplt.xlim(datetime(2019,1,1),datetime(2021,11,1))","e8538596":"plt.plot(HourlyCustomers.index,HourlyCustomers.rolling(window = 3).mean()[10]\/7,label = '9-10am')\nplt.plot(HourlyCustomers.index,HourlyCustomers.rolling(window = 3).mean()[22]\/7,label = '9-10pm')\nplt.plot(HourlyCustomers.index,HourlyCustomers.rolling(window = 3).mean()[21]\/7,label = '8-9pm')\nplt.legend()\nplt.ylabel('Customers')\nplt.title('Average Daily Customers per Hour')\nplt.xlim(datetime(2019,1,1),datetime(2021,11,1))","d037f870":"WeeklySales[WeeklySales['upc'] == 5000213002834].plot(x='date',y='units',xlim = [datetime(2020,1,1),datetime(2021,1,1)],title = 'Guinness Sales',ylabel = 'Units')","36211cf3":"Px = WeeklySales[WeeklySales['name'] == 'BARNSIDE FARMERS TAP 12AR']['date']\nDx = WeeklySales[WeeklySales['name'] == 'BARNSIDE FARMERS TAP 6AR']['date']\nPy = WeeklySales[WeeklySales['name'] == 'BARNSIDE FARMERS TAP 12AR'].rolling(window = 1)['units'].mean()\nDy = WeeklySales[WeeklySales['name'] == 'BARNSIDE FARMERS TAP 6AR'].rolling(window = 1)['units'].mean()\nAx = WeeklySales[WeeklySales['name'] == 'BARNSIDE HONEY COMB PALE 4AR']['date']\nSx = WeeklySales[WeeklySales['name'] == 'BARNSIDE CRESCENT ISLAND 4AR']['date']\nAy = WeeklySales[WeeklySales['name'] == 'BARNSIDE HONEY COMB PALE 4AR'].rolling(window = 1)['units'].mean()\nSy = WeeklySales[WeeklySales['name'] == 'BARNSIDE CRESCENT ISLAND 4AR'].rolling(window = 1)['units'].mean()\nplt.plot(Ax,Ay, label = 'HONEY')\nplt.plot(Sx,Sy, label = 'BROWN')\nplt.plot(Px,Py,label = 'TAP 12')\nplt.plot(Dx,Dy, label = 'TAP 6')\n#plt.locator_params(axis='x', nbins=5)\nplt.legend()\nplt.xlim(datetime(2021,5,1),datetime(2021,11,1))","8e748f53":"Px = WeeklySales[WeeklySales['name'] == 'HOYNE PILSNER 6AR']['date']\nDx = WeeklySales[WeeklySales['name'] == 'HOYNE DARK MATTER 6AR']['date']\nPy = WeeklySales[WeeklySales['name'] == 'HOYNE PILSNER 6AR'].rolling(window = 3)['units'].mean()\nDy = WeeklySales[WeeklySales['name'] == 'HOYNE DARK MATTER 6AR'].rolling(window = 3)['units'].mean()\nAx = WeeklySales[WeeklySales['name'] == 'HOYNE BIER GARTEN KOLSCH 6AR']['date']\nSx = WeeklySales[WeeklySales['name'] == 'HOYNE DOWN EASY 6AR']['date']\nAy = WeeklySales[WeeklySales['name'] == 'HOYNE BIER GARTEN KOLSCH 6AR'].rolling(window = 3)['units'].mean()\nSy = WeeklySales[WeeklySales['name'] == 'HOYNE DOWN EASY 6AR'].rolling(window = 3)['units'].mean()\nplt.plot(Ax,Ay, label = 'Kolsch')\nplt.plot(Sx,Sy, label = 'Down Easy')\nplt.plot(Px,Py,label = 'Pilsner')\nplt.plot(Dx,Dy, label = 'Dark Matter')\n#plt.locator_params(axis='x', nbins=5)\nplt.legend()","0e0cecb3":"Px = WeeklySales[WeeklySales['name'] == 'NEGRA MODELO 6PB']['date']\nDx = WeeklySales[WeeklySales['name'] == 'MODELO ESPECIAL 6PB']['date']\nPy = WeeklySales[WeeklySales['name'] == 'NEGRA MODELO 6PB'].rolling(window = 3)['units'].mean()\nDy = WeeklySales[WeeklySales['name'] == 'MODELO ESPECIAL 6PB'].rolling(window = 3)['units'].mean()\nplt.plot(Px,Py,label = 'Negra Modelo')\nplt.plot(Dx,Dy, label = 'Modelo Especial')\nplt.xlim(datetime(2020,1,1),datetime(2021,8,1))\nplt.legend()","436bd5a3":"def plotter(products,coarsen,xmin):\n    for product in products:\n        x = WeeklySales[WeeklySales['name'] == product]['date']\n        y = WeeklySales[WeeklySales['name'] == product].rolling(window = coarsen)['units'].mean()\n        plt.plot(x,y, label = product)\n        plt.xlim(left = xmin)\n    plt.legend()","b765272a":"def bar(products,xmin,xmax):\n    y = WeeklySales[products & (WeeklySales['date'] >= xmin) & (WeeklySales['date'] <= xmax)]\n    y = y.groupby('name').mean().sort_values(by = 'units', ascending = False)\n    plt.bar(y.index,y['units'])\n    plt.legend()","71e76c82":"WeeklySales[WeeklySales['name'].str.contains('C12 S')]","03f9425d":"def bar2(products,xmin,xmax):\n    WeeklySales[products & (WeeklySales['date'] >= xmin) & (WeeklySales['date'] <= xmax)].groupby('name').mean().sort_values(by = 'units', ascending = False)[:10].plot.bar(y='units')\n    plt.legend()\n    \n\nbar2(WeeklySales['category'] == 'Single Beer Fridge Door', datetime(2020,8,1),datetime(2021,10,1))\nplt.xticks(rotation = 45)\nplt.title('Average Weekly Sales')","8cc045af":"bar(WeeklySales['name'].str.contains('BARNSIDE'), datetime(2020,8,1),datetime(2021,10,1))\nplt.xticks(rotation = 45)\nplt.title('Average Weekly Sales')","b9894104":"bar(WeeklySales['name'].str.contains('C12'), datetime(2020,8,1),datetime(2021,10,1))\nplt.xticks(rotation = 45)\nplt.title('Average Weekly Sales')","b63fcbb5":"bar2(((WeeklySales['category'] == 'Red Wine-Domestic') | (WeeklySales['category'] == 'Red Wine-Import') )& (WeeklySales['unit_total'] > 15), datetime(2020,8,1),datetime(2021,10,1))\nplt.xticks(rotation = 45)\nplt.title('Most Popular Red Wine Over $15')\n\n","a88b129c":"WeeklyTotals = pd.pivot_table(WeeklySales, values = ['units','cost','total'],index = ['date'],columns = ['category'], fill_value = 0, aggfunc = 'sum')\n","7f54f3cb":"cats = \"\"\"\n'Bottle Beer', 'Brandy', 'Canned Beer', 'Coolers\/Ciders (ALL)','Craft Beer Singles', \n'Fortified Wine - Import', 'Gin', 'Liqueurs','Mickeys', 'NON ALCOHOL', 'Red Wine-Domestic', \n'Red Wine-Import', 'Rum','Scotch\/Irish', 'Single Beer Fridge Door', 'Sparkling Wines', \n'Tequila','Vodka', 'Whiskey', 'White Wine-Domestic', 'White Wine-Import'\n\"\"\"\n\nWeeklyTotals['total'].plot.area(y= ['Bottle Beer', 'Canned Beer', 'Coolers\/Ciders (ALL)','Craft Beer Singles', \n'Fortified Wine - Import', 'Gin', 'Liqueurs','Mickeys', 'Red Wine-Domestic', \n'Red Wine-Import', 'Rum','Scotch\/Irish', 'Single Beer Fridge Door', \n'Tequila','Vodka', 'Whiskey', 'White Wine-Domestic'], stacked = True, xlim = [datetime(2020,5,1),datetime(2021,10,1)], ylim = [0,55000])","2d704d3e":"percentTotals = WeeklyTotals['total'].div(WeeklyTotals['total'].sum(axis = 1), axis = 'rows')\npercentTotals.columns","067b5e97":"WeeklyTotals['total']","ec303f8d":"weeklyTotals2 = WeeklyTotals['total']\nweeklyTotals2['wine'] = weeklyTotals2['White Wine-Domestic'] + weeklyTotals2['Fortified Wine - Import'] + weeklyTotals2['Wine Accessories'] + weeklyTotals2['Red Wine-Domestic'] + weeklyTotals2['Red Wine-Import'] + weeklyTotals2['White Wine-Import'] + weeklyTotals2['Sparkling Wines']\nweeklyTotals2['spirits'] = weeklyTotals2['Brandy'] + weeklyTotals2['Gin'] + weeklyTotals2['Liqueurs'] + weeklyTotals2['Mickeys'] + weeklyTotals2['Rum'] + weeklyTotals2['Scotch\/Irish'] + weeklyTotals2['Tequila'] + weeklyTotals2['Whiskey'] + weeklyTotals2['Vodka']\nweeklyTotals2['beer'] = weeklyTotals2['Bottle Beer'] + weeklyTotals2['Canned Beer'] + weeklyTotals2['Craft Beer Singles']\nweeklyTotals2.drop(columns = ['Bottle Beer', 'Brandy', 'Canned Beer', 'Craft Beer Singles',\n'Fortified Wine - Import', 'Gin', 'Liqueurs','Mickeys', 'Red Wine-Domestic', \n'Red Wine-Import', 'Rum','Scotch\/Irish', 'Sparkling Wines', 'Wine Accessories', \n'Tequila','Vodka', 'Whiskey', 'White Wine-Domestic', 'White Wine-Import'], inplace = True)\nweeklyTotals2[weeklyTotals2 < 0] = 0\nweeklyTotals2.head()","004e8268":"percentTotals = WeeklyTotals['total'].div(WeeklyTotals['total'].sum(axis = 1), axis = 'rows')\npercentTotals['wine'] = percentTotals['White Wine-Domestic'] + percentTotals['Fortified Wine - Import'] + percentTotals['Wine Accessories'] + percentTotals['Red Wine-Domestic'] + percentTotals['Red Wine-Import'] + percentTotals['White Wine-Import'] + percentTotals['Sparkling Wines']\npercentTotals['spirits'] = percentTotals['Brandy'] + percentTotals['Gin'] + percentTotals['Liqueurs'] + percentTotals['Mickeys'] + percentTotals['Rum'] + percentTotals['Scotch\/Irish'] + percentTotals['Tequila'] + percentTotals['Whiskey'] + percentTotals['Vodka']\npercentTotals['beer'] = percentTotals['Bottle Beer'] + percentTotals['Canned Beer'] + percentTotals['Craft Beer Singles']\npercentTotals.drop(columns = ['Bottle Beer', 'Brandy', 'Canned Beer', 'Craft Beer Singles',\n'Fortified Wine - Import', 'Gin', 'Liqueurs','Mickeys', 'Red Wine-Domestic', \n'Red Wine-Import', 'Rum','Scotch\/Irish', 'Sparkling Wines', 'Wine Accessories', \n'Tequila','Vodka', 'Whiskey', 'White Wine-Domestic', 'White Wine-Import'], inplace = True)\npercentTotals[percentTotals < 0] = 0\npercentTotals.plot.area( stacked = True, xlim = [datetime(2019,5,1),datetime(2021,10,1)], ylim = [0,1])\n#WeeklyTotals['total'].div(WeeklyTotals['total'].sum(axis = 1), axis = 'rows').rolling(window = 3).mean().plot(y = ['Vodka','Whiskey','Rum', 'Mickeys', 'Tequila','Canned Beer'], xlim = (datetime(2019,1,1),datetime(2021,10,1)), ylim = (0,0.07))\n#plt.plot(np.full(len(np.arange(0,100000)),datetime(2020,3,1)),np.arange(0,100000))","783d50a2":"percentTotals.rolling(window = 3).mean().plot(y = ['wine', 'spirits', 'beer', 'Single Beer Fridge Door', 'unknown', 'Coolers\/Ciders (ALL)'], xlim = [datetime(2018,5,1),datetime(2021,10,1)], ylim = [0,0.4])","1a51ae74":"weeklyTotals2.plot(xlim = (datetime(2019,11,1),datetime(2021,1,1)), ylim = (0,23000))\nplt.plot(np.full(len(np.arange(0,100000)),datetime(2020,3,1)),np.arange(0,100000))","12bb0861":"weeklyTotals2.plot(xlim = (datetime(2018,11,1),datetime(2020,1,1)), ylim = (0,15000))\nplt.plot(np.full(len(np.arange(0,100000)),datetime(2020,3,1)),np.arange(0,100000))","6e3e88d6":"WeeklyTotals = pd.pivot_table(WeeklySales, values = ['units','cost','total'],index = ['date'],columns = ['category'], fill_value = 0, aggfunc = 'sum')\n\ncoarsen = 2\nproducts = ['Scotch\/Irish','Whiskey','White Wine-Import','Red Wine-Import','Single Beer Fridge Door','Canned Beer','Coolers\/Ciders (ALL)']\nfor product in products:\n    x = WeeklyTotals.index\n    y = (WeeklyTotals['total'][product]).rolling(window = coarsen).mean()\n    #y = WeeklyTotals['units'][product].rolling(window = coarsen).mean()\n    plt.plot(x,y, label = product)\nplt.legend()\nplt.xlim(datetime(2019,9,14),datetime(2021,9,14))\nplt.ylim(0,15000)\n","ef632f00":"weeklyTotals2.plot(xlim = (datetime(2019,11,1),datetime(2021,10,1)), ylim = (0,15000))","a95c61c9":"itemTotals = ps.sqldf(\"Select name, category, AVG(unit_total) as sale_price, AVG(unit_cost) as unit_cost, AVG(unit_total) - AVG(unit_cost) as unit_profit, Sum(total)-sum(cost) AS total_profit,Sum(cost) AS total_cost,Sum(total) AS total_sales,Sum(units) AS total_units FROM WeeklySales WHERE date > \\\"2020-09-14\\\" GROUP BY upc ORDER BY Sum(units) DESC\")","f535fee6":"itemTotals = itemTotals.sort_values(by = 'total_sales',ascending = False)\nitemTotals['average_margin'] = itemTotals['total_profit']\/itemTotals['total_cost']\nitemTotals.to_csv('Item Totals.csv',index = False)\nitemTotals.head(20)","e61848ff":"#categories = itemTotals['category'].unique()\n#print(categories)\ncategories = ['Canned Beer', 'Coolers\/Ciders (ALL)', 'White Wine-Import',\n 'White Wine-Domestic', 'Bottle Beer', 'Vodka', 'Single Beer Fridge Door',\n 'Whiskey', 'Mickeys', 'Red Wine-Import', 'Gin', 'Craft Beer Singles',\n 'Red Wine-Domestic', 'Scotch\/Irish', 'Liqueurs', 'Rum', 'Sparkling Wines',\n 'Fortified Wine - Import', 'Tequila']\nfor cat in categories:\n    ax = itemTotals[itemTotals['category'] == cat][:20].plot.bar(y=['total_sales','average_margin'],x='name',secondary_y = 'average_margin')\n    ax.right_ax.set_ylim(0,0.75)\n    plt.title(cat)\n","d756528c":"categoryTotals = itemTotals.groupby('category').sum()[['total_profit','total_sales','total_units','total_cost']]\ncategoryTotals['average_margin'] = categoryTotals['total_profit']\/categoryTotals['total_cost']\ncategoryTotals.sort_values(by = 'total_profit', ascending = False)","8f24be41":"for cat in list(categoryTotals.index):\n    itemTotals.loc[itemTotals['category'] == cat,'margin_variance'] = itemTotals.loc[itemTotals['category'] == cat,'average_margin'] - categoryTotals.loc[cat,'average_margin']\nitemTotals.drop(itemTotals[itemTotals['total_units']<5].index, inplace = True)\nitemTotals.sort_values(by = 'margin_variance').head(50)\n","f77ee591":"fig, axes = plt.subplots(2,2,figsize = (20,20))\nprint(ax)\nfor ax, col in zip(fig.axes, categoryTotals.columns):\n    categoryTotals[col].plot.pie(autopct = '%.2f', fontsize = 10, ax = ax)\n    ax.set_ylabel('')\n    ax.set_title(str(col))","d762e41f":"The pricing in our store is done manually based on a target margin and experience. Our POS system does not automatically update changes in product cost so I spent most of my time analyzing the prices in our store. Our store is a private liquor store located in a rural area, because of the geography our only competition is the nearest government liquor store. The government stores have a publicly avalaible price and stock list so I took those and compared it to ours. I compiled this into a spreadsheet for easy viewing which you can see [here.](https:\/\/docs.google.com\/spreadsheets\/d\/19h2SvTQ0QpkILJAB6qw0Rw4GhuLbCHswjGJGj36i5wI\/edit?usp=sharing)","3050f5ba":"Here you can see the effect of a change in government policy on the stores profits. Prior to 2015 private liquor stores had to buy products at the government store price, to remain competitive items were sold at cost. Only products purchased direct from supplier were profitable. I'm still convinced there is a problem with the data because the store lost 7884 by selling 133854 dollars of product for 125969 but I couldn't find any obvious errors and the manager and owner confirmed the store operate at a loss. \n\nTo further explore this lets look at the store's profit margin. Currently the store is pretty stable around 40% with some spikes that represent the store's christmas and father's day sales.","76e039d8":"The store has seen a huge increase in volume since expanding in 2018 and again during the coronavirus pandemic.","cacf72ac":"Zooming in on the last 5 years we see the importance of keeping up cost changes even if it only affects the price a few percent. Our average margin was 1% down over the last 12 months from the average of the 12 months prior. We sold 1.5e6 dollars of product, the 1% decrease in profit margin translates to 15000 in lost profit. Thats not huge but it highlights the importance of keeping up with changes in cost and passing that cost along to the consumer. This is especially important considering current inflation rates and the consumer's inflation expectations making them more accepting of price increases.","974ce559":"## Liquor Store Analytics.\n\nI currently work at a liquor store and after completing the google data analytics certificate I asked the owner of the store If I could practice my analytics skills using sales data on the store. Conveinently, I started this project right as we were upgrading our 14 year old point of sale (POS) software and my work has come in handy when building the databsae of the new system. Unfortuantely, our old POS system deletes inventory data and tracks item codes by a regularily changing PLU code I've had to limit the scope of my analysis to 2019-2021.","92f3f04e":"Checking the Coorelation between the sales data and the price difference we see no relationship. This suggests we can raise some of our prices to match or exceed the government price without impacting sales. Guinness single cans are so cheap because we have a deal with kevin to give him staff price if he purchases a flat at a time. We risk losing his business to the government if we raise the price of guinness. When raising the prices we need to be careful we don't anger habitual customers that have the price memorized.","41bc9655":"Our prices are distributed randomly above and below government price. It's important to understand if the government's price affects our product sales."}}