{"cell_type":{"2c59e3e5":"code","23a1475c":"code","ae68302e":"code","ffe2e705":"code","23035383":"code","3a42cfd0":"code","fe9e157e":"code","1aa1872b":"code","c30c8f72":"code","2a4dfa78":"markdown","b80a17d1":"markdown","6cea89a8":"markdown","48a9b63c":"markdown","0785326c":"markdown","3914c2fd":"markdown","a780be9a":"markdown","b272c0e0":"markdown","c5e10efe":"markdown","ac8e0109":"markdown","463a39ec":"markdown","4e49883a":"markdown","a83256ad":"markdown","1318fecb":"markdown","651a28ba":"markdown"},"source":{"2c59e3e5":"import requests\nfrom bs4 import BeautifulSoup\nimport json\nimport pandas as pd\nfrom tqdm import tqdm\nimport numpy as np\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\nimport re\n","23a1475c":"# Entering the league's  link\nlink = \"https:\/\/understat.com\/league\/La_liga\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the players stats \nstrings = scripts[3].string \n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end]\njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)\n# Creating the dataframe\nall_shots = pd.DataFrame(data)\n# Changing the data type using pd.to_numeric() function\nall_shots[\"id\"] = pd.to_numeric(all_shots[\"id\"])\nidd = all_shots[\"id\"].values.tolist()","ae68302e":"shoots = pd.DataFrame()\nfor i in tqdm(idd):\n    url = f\"https:\/\/understat.com\/player\/{i}\"\n    r = requests.get(url)\n    soup = BeautifulSoup(r.content, 'lxml')\n    scripts = soup.find_all('script')\n    strings = scripts[3].string\n    ind_start = strings.index(\"('\")+2\n    ind_end = strings.index(\"')\")\n    json_data = strings[ind_start:ind_end]\n    json_data = json_data.encode('utf8').decode('unicode_escape')\n    data = json.loads(json_data)\n    shoots = shoots.append(pd.DataFrame(data))","ffe2e705":"display(shoots.head(5))","23035383":"game_ids = pd.DataFrame()\nfor year in [2020]:\n    url = f'https:\/\/understat.com\/league\/EPL\/{year}'\n    r = requests.get(url)\n    soup = BeautifulSoup(r.content, 'lxml')\n    scripts = soup.find_all('script')\n    strings = scripts[1].string\n    ind_start = strings.index(\"('\")+2\n    ind_end = strings.index(\"')\")\n    json_data = strings[ind_start:ind_end]\n    json_data = json_data.encode('utf8').decode('unicode_escape')\n    data = json.loads(json_data)\n    game_ids = game_ids.append(pd.DataFrame(data).sort_values('datetime'))\n    # Changing the data type to int32\n    game_ids = game_ids.astype({'id': 'int32'})\n    game_ids = game_ids.id.tolist()","3a42cfd0":"df = pd.DataFrame()\nfor i in tqdm(game_ids) :\n    link = f\"https:\/\/understat.com\/match\/{i}\"\n    res = requests.get(link)\n    soup = BeautifulSoup(res.content,'lxml')\n    scripts = soup.find_all('script')\n    # Get the table \n    strings = scripts[1].string\n    # Getting rid of unnecessary characters from json data\n    ind_start = strings.index(\"('\")+2 \n    ind_end = strings.index(\"')\") \n    json_data = strings[ind_start:ind_end] \n    json_data = json_data.encode('utf8').decode('unicode_escape')\n    data = json.loads(json_data)\n    for home_away in ['h', 'a']:\n        match_shots = pd.DataFrame(data[home_away])\n        df = df.append(match_shots)\n        ","fe9e157e":" display(df.head(5))","1aa1872b":"match_stats = pd.DataFrame()\nfor i in tqdm(game_ids):\n    response = requests.get(f'https:\/\/understat.com\/match\/{i}')\n    match_info = re.search(\"match_info\\s+=\\s+JSON.parse\\('([^']+)\", response.text)\n    decoded_string = bytes(match_info.groups()[0], 'utf-8').decode('unicode_escape')\n    matchObj = json.loads(decoded_string)\n    sh = pd.Series(matchObj)\n    match_stats = match_stats.append(pd.DataFrame(sh).T)","c30c8f72":"match_stats.head(7)","2a4dfa78":"# Scraping Understat Using For Loops\n\n\n**By Jose Gonzalez**\n![image.png](attachment:image.png)\n","b80a17d1":"<a id=\"6.1\"><\/a>\n## In Beautiful Soup\nAs we have once scraped all the match IDs and changed their data types, now it's only a matter of running the loop and obtaining the match statistics.","6cea89a8":"<a id=\"4.\"><\/a>\n# Scrape all players shots from La Liga \n\nIn order to scrape all shots taken by each player from la liga, we must first scrape their IDs and change their data type from obj to int and then run a loop with those values to scrape all the shots the players have taken throughout their careers.","48a9b63c":"<a id=\"7.\"><\/a>\n# References","0785326c":"Running the loop for the 2020\/2021 season EPL","3914c2fd":"<a id=\"5.1\"><\/a>\n## In Beautiful Soup \nAs done in the section above, before scraping the games shots, we must first scrape the game IDs to then run a loop of those IDs.\n","a780be9a":"<a id=\"5.\"><\/a>\n# Scraping all matches shots\nIn this section we'll focus on scraping all the shots from the matches instead of each player shots, for example if it's desirable to scrape every shot Barcelona took in 20\/21 season or all the shots taken by every team .","b272c0e0":"<a id=\"4.1\"><\/a>\n## Beautiful Soup\nOnce we've scraped all the players IDs , now we can proceed to run the loop.","c5e10efe":"* [1. Introduction](#1.)\n* [2.Notebook Content.](#2.)\n* [3.Importing libraries.](#3.)\n* [4.Scrape all La Liga player shots.](#4.)\n    - [4.1. Beautiful Soup.](#4.1)\n* [5. Scrape all match shots for the EPL](#4.)\n    - [5.1. Beautiful Soup.](#5.1)\n* [6. Scraping all EPL matches](#6.)\n    - [6.1. In Beautiful Soup.](#6.1)\n* [7. References](#7.)\n* [8. Other notebooks](#8.)","ac8e0109":"<a id=\"3.\"><\/a>\n# Importing libraries","463a39ec":"<a id=\"6.\"><\/a>\n# Scraping all match stats for the EPL\nIt's also possible to scrape all the stats for each game of the premier league , these include goals scored, received, win probability under the name of h_w ,xG, xGA, xpts, PPDA etc. \n![image.png](attachment:image.png)","4e49883a":"The idea for this notebook came from these 3 questions asked in Stack Overflow : \n\n   1. https:\/\/stackoverflow.com\/questions\/54868228\/issue-with-scraping-understat-chart-data-using-selenium\n    \n   2. https:\/\/stackoverflow.com\/questions\/67859503\/web-scraping-understat-top-players-data\n    \n   3. https:\/\/stackoverflow.com\/questions\/62431388\/how-to-get-the-data-from-a-script-tag-on-a-website-using-python\n    \n","a83256ad":"<a id=\"2.\"><\/a>\n# Notebook content","1318fecb":"<a id=\"1.\"><\/a>\n# 1. Introduction\n\n**IMPORTANT NOTE : It's not possible to run Selenium on Kaggle therefore this notebook included loops for BS4 and Selenium and the Selenium code's been deleted to be able to run the notebook, [click here](https:\/\/github.com\/Josegra\/Understat-Series\/blob\/main\/Webscraping%20Understat\/Scraping%20Understat%20Using%20For%20Loops.ipynb) to see the notebook with the Selenium code included**\n\nContinuing the other scraping notebooks [Selenium](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-selenium) , [BS4](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-beautiful-soup) and [Understat module](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-understat-package) We proceed by scraping not only a few shots for a specific player but also for all the players want, as well as all the match shots and match statistics.\n\nHere are some of the other notebooks created for the Understat Series :\n\n1. [Understat Series : Webscraping of Understat using the Beautiful Soup](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-beautiful-soup)\n2. [Understat Series : Understat package](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-understat-package)\n\n3. [Understat Series : Webscraping using Selenium](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-selenium)\n\n4. [Understat Series : Webscraping using for loops](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-for-loops)\n\n5. [Understat Series : Probabilities and Random](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-probabilities-and-random)\n\n6. [Understat Series : Diverging plots](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-diverging-plots)\n\n7. [Understat Series : xG Rolling averages](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-rolling-averages)\n\n8. [Understat Series : xG Flow Chart](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-flow-chart)\n\n9. [Understat Series : Shotmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-shotmaps)\n\n10. [Understat Series : Heatmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-heatmaps)\n\n11. [Understat Series : Top 2 Goalscorers](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-top-2-goalscorers)\n\n12. [Understat Series : Dashboards](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-dashboards)","651a28ba":"<a id=\"8.\"><\/a>\n# Other notebooks \nHere I add some other notebooks on the subject\n\n   1. https:\/\/github.com\/ibnass\/Liverpool-Evolution-with-Klopp\/blob\/main\/script\/scrapping\/dev_Jacky\/Scrap_Understat.ipynb\n   \n   \n   2. https:\/\/github.com\/cooperh01\/understat_scrape\/blob\/main\/FornalsSDScrap.ipynb\n   \n   \n   3. https:\/\/github.com\/douglasbc\/scraping-understat-dataset\/tree\/main\/scraping\n   \n   \n   4. https:\/\/github.com\/andrewjoelpeters\/understat\/blob\/main\/scrape_rosters.ipynb\n   \n   "}}