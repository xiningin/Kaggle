{"cell_type":{"aa990d6b":"code","f4cb84eb":"code","441f4245":"code","8a0b3600":"code","5ec8504a":"code","c4e5f6f2":"code","8708f943":"code","9fe7383d":"code","b1d22e9b":"code","0b7fe80c":"code","c63b9316":"code","f10b959d":"code","a31eef6a":"code","e82af667":"code","67def75c":"code","9e2f026d":"code","24f81afa":"code","728c6cba":"code","63049c03":"code","422bb0cd":"code","2879909d":"code","4fb5f0f6":"code","e2502690":"code","41afbbd9":"code","f34a9b11":"code","1a66bd13":"code","0e9f5b72":"code","a8577374":"code","16fc19bd":"code","c6894528":"code","6827ce25":"code","91214ca7":"code","7ad8b6db":"code","394c07fe":"code","78a19b19":"code","0c6b34a2":"markdown","aaadb2f1":"markdown","5c56afb9":"markdown","7840b844":"markdown","99f6c91b":"markdown"},"source":{"aa990d6b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f4cb84eb":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","441f4245":"#import dataset\ndf = pd.read_csv('\/kaggle\/input\/titanic-train\/titanic_train.csv')\ndf.head(5)","8a0b3600":"df.info()","5ec8504a":"#see if any missing value\ndf.isnull().sum()","c4e5f6f2":"sns.heatmap(df.isnull(),yticklabels=False, cmap='viridis')","8708f943":"#class data details\n\nsns.countplot(df['Survived'])","9fe7383d":"df['Survived'].value_counts()","b1d22e9b":"sns.countplot(df['Survived'], hue = df['Sex'])","0b7fe80c":"sns.countplot(df['Survived'], hue = df['Pclass'], palette='rainbow')","c63b9316":"#see the age data distribution. drop the null values, dont use KDE\n\nsns.displot(df['Age'].dropna(), kde = False, color = 'green', bins = 40)","f10b959d":"sns.countplot(df['SibSp'])","a31eef6a":"df['SibSp'].value_counts()","e82af667":"df['Fare'].hist(figsize = (10,10), color = 'green')","67def75c":"sns.distplot(df['Fare'], kde = False, color = 'green')","9e2f026d":"df['Fare'].value_counts()","24f81afa":"df.corr()","728c6cba":"sns.heatmap(df.corr())","63049c03":"plt.figure(figsize = (10,10))\nsns.boxplot(x = 'Pclass', y = 'Age', data = df)","422bb0cd":"def age_impute(col):\n    Age = col[0]\n    Pclass = col[1]\n\n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        elif Pclass == 3:\n            return 24\n    else:\n        return Age\n        ","2879909d":"df['Age'] = df[['Age', 'Pclass']].apply(age_impute, axis =1)","4fb5f0f6":"sns.heatmap(df.isnull(),yticklabels=False, cmap='viridis')","e2502690":"#since Cabin has a huge number of data missing, we will drop the column\n\nddf = df.drop('Cabin',axis=1,) #axis = 0, then row. axis = 1, then column","41afbbd9":"sns.heatmap(ddf.isnull(),yticklabels=False, cmap='viridis')","f34a9b11":"embark = pd.get_dummies(ddf['Embarked'], drop_first=True)\nsex = pd.get_dummies(ddf['Sex'], drop_first=True)","1a66bd13":"#drop the columns that are not required\n\nddf.drop(['Sex', 'Name', 'Ticket', 'Embarked'], axis = 1, inplace=True)","0e9f5b72":"ddf.head()","a8577374":"ddf = pd.concat([ddf, sex, embark], axis =1)","16fc19bd":"ddf.head()","c6894528":"ddf['Survived'].value_counts()","6827ce25":"from collections import Counter\nfrom sklearn.datasets import make_classification\nfrom imblearn.over_sampling import SMOTE\n\nx = ddf.drop(['Survived'], axis = 1)\ny = ddf['Survived']\n\nsm = SMOTE(sampling_strategy='auto')\nx_res, y_res = sm.fit_resample(x, y)","91214ca7":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\nx_train, x_test, y_train, y_test = train_test_split(x_res,y_res, test_size = 0.3, random_state = 101)\n\nlogmodel = LogisticRegression()\nlogmodel.fit(x_train, y_train)","7ad8b6db":"prediction = logmodel.predict(x_test)","394c07fe":"accuracy = confusion_matrix(y_test, prediction)\naccuracy","78a19b19":"accuracy = accuracy_score(y_test, prediction)\naccuracy*100","0c6b34a2":"## Age Imputation","aaadb2f1":"# Data Cleaning","5c56afb9":"## Removing Class Imbalance by oversampling - SMOTE","7840b844":"## Logistic Regression","99f6c91b":"## Handle Categorical Data with dummy encoding\n"}}