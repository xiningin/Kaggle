{"cell_type":{"7eeb7118":"code","cff9e664":"code","77ba3571":"code","3f9917df":"code","07b36bd4":"code","76538fd0":"code","7c444d4b":"code","124bf88f":"code","8f818f44":"code","e8b9b60c":"code","e86c5a35":"code","db8b513c":"code","26a13745":"code","06eac7bd":"code","361b16b4":"code","8cd72453":"code","b68e9e45":"code","4a90d643":"code","e0e62848":"code","59dd6f21":"markdown","c4629775":"markdown","3de5d5bb":"markdown","1312827f":"markdown","e3faecdd":"markdown","c39eae02":"markdown","9f1bd0dc":"markdown","a73b5ed0":"markdown","02a82108":"markdown","0d5e0df8":"markdown","4dae960d":"markdown","bf0714de":"markdown","cdfc55d0":"markdown","abe1e30c":"markdown","9431d9df":"markdown"},"source":{"7eeb7118":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom hyperopt import STATUS_OK, Trials, fmin, hp, tpe\n\nplt.style.use(\"seaborn-whitegrid\")\n\nfrom sklearn.feature_selection import mutual_info_regression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\n\nfrom sklearn.preprocessing import (OrdinalEncoder, StandardScaler, \n                                   MinMaxScaler, PolynomialFeatures,\n                                   PowerTransformer)\n\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom scipy import stats\nfrom scipy.stats import norm\nfrom sklearn.linear_model import Lasso, RidgeCV\nfrom sklearn.ensemble import (RandomForestRegressor, AdaBoostRegressor,\n                             GradientBoostingRegressor, ExtraTreesRegressor)\nfrom sklearn.ensemble import VotingRegressor\n\nfrom lightgbm import LGBMRegressor\nimport lightgbm as lgb\nfrom sklearn.svm import SVC \nfrom xgboost import XGBRegressor\n%matplotlib inline\n\nfrom bayes_opt import BayesianOptimization\nfrom skopt import BayesSearchCV\n\nimport warnings\nwarnings.filterwarnings('ignore')","cff9e664":"X_full = pd.read_csv(\"..\/input\/30-days-of-ml\/train.csv\", index_col='id')\nX_test_full = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\", index_col='id')\nSample_result = pd.read_csv(\"..\/input\/30-days-of-ml\/sample_submission.csv\")","77ba3571":"(mu, sigma) = norm.fit(X_full['target'])\nplt.figure(figsize = (12,6))\nsns.distplot(X_full['target'], kde=True, hist=True, fit=norm)\nplt.title('Target Distribution', fontsize=12)\nplt.legend([f\"mu:{mu}, sigma:{sigma}\"],loc=\"best\")\nplt.show()","3f9917df":"print(f\"Skewness: {X_full['target'].skew()}\")\nprint(f\"Kurtosis: {X_full['target'].kurt()}\")","07b36bd4":"X_full.describe()","76538fd0":"num_types = X_full.select_dtypes(include=['int64', 'float64']).columns[:-1]\nfig, axes = plt.subplots(nrows=7, ncols=2, figsize=(10,25))\nfor indx,feature in enumerate(num_types):\n    row = indx \/\/ 2\n    col = indx % 2\n    X_full[num_types[indx]].hist(ax=axes[row,col]);axes[row,col].set_title(f\"{num_types[indx]}\")   ","7c444d4b":"mean = X_full['target'].mean()\nstd = X_full['target'].std()\ncut_off = std * 3\nlower, upper = mean - cut_off, mean + cut_off\noutliers = X_full[(X_full['target'] < lower) | (X_full['target'] > upper)]\nprint(f\"Orginal Dataset size: {X_full.shape}\")\n#X_full.drop(outliers.index.to_list(), inplace=True)\nprint(f\"Number of outliers: {len(outliers)}\")\nprint(f\"New size: {X_full.shape}\")","124bf88f":"features = X_full.drop(['target'], axis=1, inplace=False)\ntargets = X_full['target'].copy()\n\nfor cols in features.select_dtypes(\"object\"):\n    features[cols], _ = features[cols].factorize()\n    \ndiscrete_features = features.dtypes == int\n\nmi_value = mutual_info_regression(features, targets, discrete_features=discrete_features)\nmi_value = pd.Series(mi_value, name=\"MI\", index=features.columns)\nmi_value = mi_value.sort_values(ascending=True)\nwidth = np.arange(len(mi_value))\nticks = list(mi_value.index)\n\nplt.figure(dpi=100, figsize=(8,5))\nplt.barh(width, mi_value)\nplt.yticks(width, ticks)\nplt.title(\"Mutual Information\")","8f818f44":"X_full.columns","e8b9b60c":"X_full.dropna(axis=0, subset=['target'], inplace=True)\ny = X_full['target']\nX_full.drop(['target'], axis=1, inplace=True)","e86c5a35":"X = X_full[list(mi_value.index)[-24:]]\nX_test = X_test_full[list(mi_value.index)[-24:]]","db8b513c":"print(f\"Shape of training data: {X.shape}\")\nmissing_values = X.isnull().sum()\nprint(missing_values[missing_values > 0])","26a13745":"num_cols = X.select_dtypes(include=['int64', 'float64']).columns\ncat_cols = X.select_dtypes(include=['object', 'bool']).columns","06eac7bd":"skewed_features = X[num_cols].apply(lambda x: stats.skew(x)).sort_values(ascending=False)\nskewed_features = skewed_features[abs(skewed_features) > 0.75]\nprint(skewed_features)\n\nfor f in skewed_features.index:\n    X[f] = np.log1p(X[f])\n    X_test[f] = np.log1p(X_test[f])","361b16b4":"print(\"Number of unique category for each categorical Feature\")\nfor cols in cat_cols:\n    print(f\"{cols}: {X[cols].nunique()}\")","8cd72453":"cat_transformer = OrdinalEncoder()\nnum_transformer = StandardScaler()\npreprocessor = ColumnTransformer(transformers=[\n    ('cat', cat_transformer, cat_cols),\n    ('num', num_transformer, num_cols)])","b68e9e45":"def train(model):\n    \n    clf = Pipeline(steps=[('preprocessor', preprocessor),\n                       ('model', model)\n                     ])\n\n    cv = KFold(n_splits=10, shuffle=True, random_state=42)\n    ypred = 0\n    total_loss = 0\n    for train_indx, test_indx in cv.split(X):\n        X_train, X_val = X.iloc[train_indx], X.iloc[test_indx]\n        y_train, y_val = y.iloc[train_indx], y.iloc[test_indx]\n        clf.fit(X_train, y_train)\n        \n        yhat = clf.predict(X_val)\n        score = mean_squared_error(yhat, y_val, squared=False)\n        print(f\"Loss:{score}\")\n        ypred += clf.predict(X_test) \/ 10\n        total_loss += score \/ 10\n        \n    print(f\"Avg. Loss: {total_loss}\")     \n    return ypred\n    ","4a90d643":"model = XGBRegressor(n_estimators= 10000, booster='gbtree', tree_method='gpu_hist', \n                    learning_rate= 0.03628302216953097, subsample= 0.7875490025178415, max_depth= 3,\n                    colsample_bytree = 0.11807135201147481, reg_alpha = 23.13181079976304, random_state = 1,\n                    reg_lambda = 0.0008746338866473539, n_jobs=-1)\n\nfinal_prediction = train(model)","e0e62848":"Sample_result['target'] = final_prediction \nSample_result.to_csv(\"submission.csv\", index=False)","59dd6f21":"### Load the Dataset","c4629775":"### Outlier Detection and Removal \nThough it is recommended to remove outliers for proper model training, there was a dip in performance after removing outliers. This may be because either w\/o outliers the model may be overfitting and the outliers are providing a regularization effect in the form of noise or the outliers may be having some important features which may be helping in the final prediction.\nIn the given cell in order to remove outliers uncomment the single commented line.","3de5d5bb":"### Analyse the Dataset","1312827f":"#### Taking the top N features\nCurrently all 24 features are being used.","e3faecdd":"### Extract Features and Target","c39eae02":"### Feature Engineering\nFeature engineering is one of the most important step for any data science problem.   \nIt involves transforming the original raw data in a form which helps the model in learning the given function.  \nIt can include either skipping redundant features or transforming the original feature or adding features.  \nTo get an idea about the features and its relation to the given target two popular tools used are:\n* Correlation\n* Mutual Information  \n\nWhile **correlation** is limited to only linear relationships, **mutual information** can be used for any kind of relationships. *Mutual Information* describes how presence of a given features reduces the uncertainty of the target variable. MI is lower bounded by 0 and there is no upper bound. The variables are independent if MI is 0.","9f1bd0dc":"In general skewness should be in range of [-0.5,0.5] and kurtosis in [-2,2].","a73b5ed0":"### Final Submission","02a82108":"### Training","0d5e0df8":"#### EDA : Exploratory Data Analysis, this is used for getting a better insight of the data","4dae960d":"### Import the libraries","bf0714de":"#### Transform the skewed features to normal distribution","cdfc55d0":"### Feature Visualisation","abe1e30c":"### **Using Pipelines to preprocess and create a model**","9431d9df":"### Preprocess the Input Data "}}