{"cell_type":{"8951caaf":"code","41cb2895":"code","1a7e1e9d":"code","649cdfde":"code","fb16edae":"code","4ce72c58":"code","a6db086a":"code","4b90ea27":"code","d4e72d06":"code","2eb1f602":"code","1c931c2d":"code","1340e8f5":"code","899f8c83":"code","4df5eadd":"code","97ee6689":"code","2d4940fa":"code","1625bba4":"markdown","4ac78de7":"markdown","f57b9b7a":"markdown","031655ec":"markdown","c8126c13":"markdown","adefd8cd":"markdown","0b498eda":"markdown","383b70cc":"markdown"},"source":{"8951caaf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","41cb2895":"path = '\/kaggle\/input\/usd.csv'\ndf = pd.read_csv(path)\ndf.head(5)\ndf.shape\ndf.tail()","1a7e1e9d":"time_series_data = df[['1\/1\/2020', '37.60']]\ntime_series_data.columns = ['ds', 'y']\ntime_series_data.ds = pd.to_datetime(time_series_data.ds,infer_datetime_format=True)\ntime_series_data.y = time_series_data.y.replace('\\n','', regex=True)\ntime_series_data['y'] = pd.to_numeric(time_series_data['y'], errors='coerce')\ntime_series_data","649cdfde":"train_range = np.random.rand(len(time_series_data)) < 0.8\ntrain_ts = time_series_data[train_range]\ntest_ts = time_series_data[~train_range]\ntest_ts = test_ts.set_index('ds')\ntrain_ts.shape","fb16edae":"from fbprophet import Prophet\n\nm = Prophet()\nm.fit(time_series_data)\nfuture = m.make_future_dataframe(periods=365)\nprophet_pred = m.predict(future)\nm.plot(prophet_pred)","4ce72c58":"#prophet_pred = pd.DataFrame({\"Date\" : prophet_pred[-12:]['ds'], \"Pred\" : prophet_pred[-12:][\"yhat\"]})\nprophet_pred = prophet_pred.set_index(\"ds\")\nprophet_pred['ds']=prophet_pred.index","a6db086a":"# Plot the components of the model\nfig = m.plot_components(prophet_pred)","4b90ea27":"import plotly.graph_objects as go\n\ntest_fig = go.Figure() \ntest_fig.add_trace(go.Scatter(\n                x= test_ts.index,\n                y= test_ts.y,\n                name = \"Actual Cases\",\n                line_color= \"deepskyblue\",\n                mode = 'lines',\n                opacity= 0.8))\ntest_fig.add_trace(go.Scatter(\n                x= prophet_pred.index,\n                y= prophet_pred.yhat,\n                name= \"Prediction\",\n                mode = 'lines',\n                line_color = 'red',\n                opacity= 0.8))\ntest_fig.add_trace(go.Scatter(\n                x= prophet_pred.index,\n                y= prophet_pred.yhat_lower,\n                name= \"Prediction Lower Bound\",\n                mode = 'lines',\n                line = dict(color='gray', width=2, dash='dash'),\n                opacity= 0.8))\ntest_fig.add_trace(go.Scatter(\n                x= prophet_pred.index,\n                y= prophet_pred.yhat_upper,\n                name= \"Prediction Upper Bound\",\n                mode = 'lines',\n                line = dict(color='royalblue', width=2, dash='dash'),\n                opacity = 0.8\n                ))\n\ntest_fig.update_layout(title_text= \"Prophet Model's Test Prediction\",\n                       xaxis_title=\"Date\", yaxis_title=\"Cases\",)\n\ntest_fig.show()","d4e72d06":"from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nmetric_df = prophet_pred.set_index('ds')[['yhat']].join(time_series_data.set_index('ds').y).reset_index()\n\nmetric_df.dropna(inplace=True)\npr=r2_score(metric_df.y, metric_df.yhat)\nprint(\"Le taux de pr\u00e9cision de votre mod\u00e9le est \" + str(pr*100) + \" %\")","2eb1f602":"from fbprophet import Prophet\nm = Prophet(\n    changepoint_prior_scale=0.2, # increasing it will make the trend more flexible\n    changepoint_range=0.95, # place potential changepoints in the first 98% of the time series\n    yearly_seasonality=False,\n    weekly_seasonality=False,\n    daily_seasonality=True,\n    seasonality_mode='additive'\n)\n\nm.fit(train_ts)\n\nfuture = m.make_future_dataframe(periods=275)\nforecast = m.predict(future)\n\n\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(7)\nm.plot(forecast)","1c931c2d":"forecast.tail()","1340e8f5":"fig = m.plot_components(forecast)","899f8c83":"from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nmetric_df = forecast.set_index('ds')[['yhat']].join(train_ts.set_index('ds').y).reset_index()\n\nmetric_df.dropna(inplace=True)\npr=r2_score(metric_df.y, metric_df.yhat)\nprint(\"Le taux de pr\u00e9cision de votre mod\u00e9le est \" + str(pr*100) + \" %\")","4df5eadd":"metric_df.tail()","97ee6689":"forecast.yhat_gr=(forecast.yhat\/forecast.yhat.shift(+1)-1)*100\nforecast['yhat_uppr_gr']=(forecast.yhat_upper\/forecast.yhat_upper.shift(+1)-1)*100\nforecast['yhat_lower_gr']=(forecast.yhat_lower\/forecast.yhat_lower.shift(+1)-1)*100\nforecast.yhat_uppr_gr\n\n\ndf_trend = forecast[['ds','yhat','yhat_uppr_gr','yhat_lower_gr']]\ndf_trend.dropna(inplace=True)\ndf_trend.columns = ['date', 'pr\u00e9diction','best','worest']\ndf_trend.tail(30)","2d4940fa":"time_series_data = df[['1\/1\/2020', '37.60']]\ntime_series_data.columns = ['ds', 'y']\ntime_series_data.ds = pd.to_datetime(time_series_data.ds,infer_datetime_format=True)\ntime_series_data.y = time_series_data.y.replace('\\n','', regex=True)\n#time_series_data['y'] = time_series_data['y'].astype(float)\ntime_series_data['y'] = pd.to_numeric(time_series_data['y'], errors='coerce')\ntime_series_data","1625bba4":"we will use mauritania currency (MRU) , to trend the usd.","4ac78de7":"# *Prophet*","f57b9b7a":"to trend money we need to create our test | train data ","031655ec":"# ***So we have a 94% of precision , it's not so bad so we can take the last one!***","c8126c13":"We now describe a time series forecasting model designed to handle the common features\nof business time series , so we'll use Prophet ,Prophet is an open source software in Python.\n\nProphet is a decomposable time series model (Harvey & Peters 1990) with three main\nmodel components: trend, seasonality, and holidays. They are combined in the following\nequation:\n\n                                   y(t) = g(t) + s(t) + h(t) + e(t)\n                                   \nHere g(t) is the trend function which models non-periodic changes in the value of the\ntime series, s(t) represents periodic changes (e.g., weekly and yearly seasonality), and\nh(t) represents the effects of holidays which occur on potentially irregular schedules over\none or more days. The error term e(t) represents any idiosyncratic changes which are not\naccommodated by the model; later we will make the parametric assumption that e(t)\nis normally distributed.","adefd8cd":"Our second Prophet modele with all of his variables ","0b498eda":"*Forecasting is a common data science task that helps organizations with capacity\nplanning, goal setting, and anomaly detection. Despite its importance, there are\nserious challenges associated with producing reliable and high quality forecasts \u2013\nespecially when there are a variety of time series and analysts with expertise in\ntime series modeling are relatively rare*\nhttps:\/\/peerj.com\/preprints\/3190.pdf","383b70cc":"# **Data**"}}