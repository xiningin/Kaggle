{"cell_type":{"a864242f":"code","4ca140c5":"code","637132d0":"code","8ff312ed":"code","9386b103":"code","6fc4d842":"code","69d799a8":"code","be21d0f2":"code","32ddd5bb":"code","ea186643":"code","ff63c22d":"code","9427003a":"code","7fdb96cc":"code","ac998f1f":"code","2e407f0c":"code","0e472fb9":"code","d5233cc0":"code","bb9395a7":"code","55e0b128":"code","6f191d7c":"code","92d8e9c3":"code","033faa39":"code","91bc8321":"code","53dcd7e9":"code","252daaff":"code","f8f221ae":"code","a5cb3af0":"code","76e9572f":"code","8f2eb2a2":"code","00a4f542":"code","58f2dd90":"code","12868067":"code","c3166f0c":"code","05a53af4":"code","5e7fbe75":"code","b8035a6c":"code","561d935c":"code","f443b092":"code","70da12f6":"code","31cb78e0":"code","63b21878":"code","c541cba1":"code","79ddfa16":"markdown","cdc2a42d":"markdown","b027f62b":"markdown","57297f49":"markdown","8a1e4ed3":"markdown","967fdbaa":"markdown","ad3ea093":"markdown","accf0b1a":"markdown","53ce5d8f":"markdown","42177d4e":"markdown","67d11cc2":"markdown","bd3b4d21":"markdown","3143e367":"markdown","9d48f93b":"markdown","95d6f65c":"markdown","059656b6":"markdown","12184d8f":"markdown"},"source":{"a864242f":"%matplotlib inline\nimport math\nimport pickle\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport numpy as np\nfrom sklearn import linear_model\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nsns.set(style=\"white\")\nsns.set(style=\"whitegrid\", color_codes=True)\ndf = pd.read_csv('..\/input\/reza-06nov20\/reza_sir.csv')\ndf.head()\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('display.width', None)\npd.set_option('display.max_colwidth', -1)\n\ndf= df[['a\/d']+['pf']+['fc']+['d']+['bw']+['Ef']+['Vexp']]\n\ndf['a\/d'] = np.log(df['a\/d'])\n# df['pf'] = np.log(df['pf'])\ndf['fc'] = np.log(np.sqrt(df['fc']))\ndf['d'] = np.log(df['d'])\ndf['bw'] = np.log(df['bw'])\ndf['Ef'] = np.log(df['Ef'])\n\ndf=df.round(decimals=6)\ndf['Vexp'] = np.log(df['Vexp'])\ndf.to_csv('test.csv')\n\ndf.head()\ndf = df.replace([np.inf, -np.inf], np.nan)\ndf = df.fillna(df.mean())\n\ndata=df\nX = data.loc[:, data.columns != 'Vexp']\ny=data['Vexp']\nprint(X.head())\nprint(data.info())\nprint(y.head())\nprint(data.shape)","4ca140c5":"corr = data.corr() \nplt.figure(figsize=(12, 10))\n\nsns.heatmap(corr[(corr >= 0.0) | (corr <= -0.0)], \n            cmap='viridis', vmax=1.0, vmin=-1.0, linewidths=0.1,\n            annot=True, annot_kws={\"size\": 8}, square=True);","637132d0":"#Plottinf correlation above or below 0.5\n\n\n\ncorr = data.corr() # We already examined SalePrice correlations\nplt.figure(figsize=(12, 10))\n\nsns.heatmap(corr[(corr >= 0.5) | (corr <= -0.5)], \n            cmap='viridis', vmax=1.0, vmin=-1.0, linewidths=0.1,\n            annot=True, annot_kws={\"size\": 8}, square=True);","8ff312ed":"# import seaborn as sns\n# quantitative_features_list1 = ['a\/d', 'pf', 'fc', 'd', 'b', 'Ef', 'Vexp']\n# #quantitative_features_list1 = ['a\/d', 'pf', 'sqrt(fc)', 'd', 'b', 'Ef', 'Vexp']\n# data_plot_data=data_mod_num = data[quantitative_features_list1]\n# sns.pairplot(data_plot_data)","9386b103":"evaluation = pd.DataFrame({'Model': [],\n                           'Details':[],\n                           'RMSE(train)':[],\n                           'R-squared (train)':[],\n                           'Adj R-squared (train)':[],\n                           'MAE (train)':[],\n                           'RMSE (test)':[],\n                           'R-squared (test)':[],\n                           'Adj R-squared (test)':[],\n                           'MAE(test)':[],\n                           '10-Fold Cross Validation':[]})\n\nevaluation2 = pd.DataFrame({'Model': [],\n                           'Test':[],\n                           '1':[],\n                           '2':[],\n                           '3':[],\n                           '4':[],\n                           '5':[],\n                           '6':[],\n                           '7':[],\n                           '8':[],\n                           '9':[],\n                           '10':[],\n                           'Mean':[]})\ndef adjustedR2(r2,n,k):\n    return r2-(k-1)\/(n-k)*(1-r2)\n\nfeatures = list(data.columns.values)\nprint(features)\nfeatures=  ['a\/d', 'pf', 'fc', 'd', 'b', 'Ef', 'Vexp']\nfeatures2=  ['a\/d', 'pf', 'fc', 'd', 'b', 'Ef']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\npickle.dump(scaler, open('scaler.pkl','wb'))","6fc4d842":"print(\"for linear Regression\")\ncomplex_model_1 = linear_model.LinearRegression(normalize=True)\ncomplex_model_1.fit(X_train, y_train)\n\npred = complex_model_1.predict(X_test)\nrmse_train = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_train), y_train)),'.3f'))\nr2_train = float(format(complex_model_1.score(X_train, y_train),'.3f'))\nar2_train = float(format(adjustedR2(complex_model_1.score(X_train, y_train),X_train.shape[0],len(features)),'.3f'))\nmae_train=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_train), y_train)),'.3f'))\n\nrmse_test = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_test), y_test)),'.3f'))\nr2_test = float(format(complex_model_1.score(X_test, y_test),'.3f'))\nar2_test = float(format(adjustedR2(complex_model_1.score(X_test, y_test),X_test.shape[0],len(features)),'.3f'))\nmae_test=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_test), y_test)),'.3f'))\n\ncv = float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10).mean(),'.3f'))\n\ncv_train_rmse=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error')\ncv_train_rmse_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error').mean(),'.3f'))\n\ncv_train_r2=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2')\ncv_train_r2_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),'.3f'))\n\ncv_train_ar2=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2'),X_train.shape[0],len(features))\ncv_train_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),X_train.shape[0],len(features))\n\ncv_train_mae=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error')\ncv_train_mae_m=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error').mean()\n\ncv_test_rmse=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error')\ncv_test_rmse_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error').mean()\n\ncv_test_r2=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2')\ncv_test_r2_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean()\n\ncv_test_ar2=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2'),X_test.shape[0],len(features))\ncv_test_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean(),X_test.shape[0],len(features))\n\ncv_test_mae=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error')\ncv_test_mae_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error').mean()\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['Multiple Regression-1','All features',rmse_train,r2_train,ar2_train,mae_train,rmse_test,r2_test,ar2_test,mae_test,cv]\nevaluation.sort_values(by = '10-Fold Cross Validation', ascending=False)\n\nr = evaluation2.shape[0]\nevaluation2.loc[r] = ['Linear Regression','Train RMSE',float(format(-cv_train_rmse[0],'.3f')),float(format(-cv_train_rmse[1],'.3f')),float(format(-cv_train_rmse[2],'.3f')),float(format(-cv_train_rmse[3],'.3f')),float(format(-cv_train_rmse[4],'.3f')),float(format(-cv_train_rmse[5],'.3f')),float(format(-cv_train_rmse[6],'.3f')),float(format(-cv_train_rmse[7],'.3f')),float(format(-cv_train_rmse[8],'.3f')),float(format(-cv_train_rmse[9],'.3f')),float(format(-cv_train_rmse_m,'.3f'))]\nevaluation2.loc[r+1] = ['Linear Regression','Train R2',float(format(cv_train_r2[0],'.3f')),float(format(cv_train_r2[1],'.3f')),float(format(cv_train_r2[2],'.3f')),float(format(cv_train_r2[3],'.3f')),float(format(cv_train_r2[4],'.3f')),float(format(cv_train_r2[5],'.3f')),float(format(cv_train_r2[6],'.3f')),float(format(cv_train_r2[7],'.3f')),float(format(cv_train_r2[8],'.3f')),float(format(cv_train_r2[9],'.3f')),float(format(cv_train_r2_m,'.3f'))]\nevaluation2.loc[r+2] = ['Linear Regression','Train ar2',float(format(cv_train_ar2[0],'.3f')),float(format(cv_train_ar2[1],'.3f')),float(format(cv_train_ar2[2],'.3f')),float(format(cv_train_ar2[3],'.3f')),float(format(cv_train_ar2[4],'.3f')),float(format(cv_train_ar2[5],'.3f')),float(format(cv_train_ar2[6],'.3f')),float(format(cv_train_ar2[7],'.3f')),float(format(cv_train_ar2[8],'.3f')),float(format(cv_train_ar2[9],'.3f')),float(format(cv_train_ar2_m,'.3f'))]\nevaluation2.loc[r+3] = ['Linear Regression','Train mae',float(format(-cv_train_mae[0],'.3f')),float(format(-cv_train_mae[1],'.3f')),float(format(-cv_train_mae[2],'.3f')),float(format(-cv_train_mae[3],'.3f')),float(format(-cv_train_mae[4],'.3f')),float(format(-cv_train_mae[5],'.3f')),float(format(-cv_train_mae[6],'.3f')),float(format(-cv_train_mae[7],'.3f')),float(format(-cv_train_mae[8],'.3f')),float(format(-cv_train_mae[9],'.3f')),float(format(-cv_train_mae_m,'.3f'))]\nevaluation2.loc[r+4] = ['Linear Regression','Test RMSE',float(format(-cv_test_rmse[0],'.3f')),float(format(-cv_test_rmse[1],'.3f')),float(format(-cv_test_rmse[2],'.3f')),float(format(-cv_test_rmse[3],'.3f')),float(format(-cv_test_rmse[4],'.3f')),float(format(-cv_test_rmse[5],'.3f')),float(format(-cv_test_rmse[6],'.3f')),float(format(-cv_test_rmse[7],'.3f')),float(format(-cv_test_rmse[8],'.3f')),float(format(-cv_test_rmse[9],'.3f')),float(format(-cv_test_rmse_m,'.3f'))]\nevaluation2.loc[r+5] = ['Linear Regression','Test R2',float(format(cv_test_r2[0],'.3f')),float(format(cv_test_r2[1],'.3f')),float(format(cv_test_r2[2],'.3f')),float(format(cv_test_r2[3],'.3f')),float(format(cv_test_r2[4],'.3f')),float(format(cv_test_r2[5],'.3f')),float(format(cv_test_r2[6],'.3f')),float(format(cv_test_r2[7],'.3f')),float(format(cv_test_r2[8],'.3f')),float(format(cv_test_r2[9],'.3f')),float(format(cv_test_r2_m,'.3f'))]\nevaluation2.loc[r+6] = ['Linear Regression','Test ar2',float(format(cv_test_ar2[0],'.3f')),float(format(cv_test_ar2[1],'.3f')),float(format(cv_test_ar2[2],'.3f')),float(format(cv_test_ar2[3],'.3f')),float(format(cv_test_ar2[4],'.3f')),float(format(cv_test_ar2[5],'.3f')),float(format(cv_test_ar2[6],'.3f')),float(format(cv_test_ar2[7],'.3f')),float(format(cv_test_ar2[8],'.3f')),float(format(cv_test_ar2[9],'.3f')),float(format(cv_test_ar2_m,'.3f'))]\nevaluation2.loc[r+7] = ['Linear Regression','Test mae',float(format(-cv_test_mae[0],'.3f')),float(format(-cv_test_mae[1],'.3f')),float(format(-cv_test_mae[2],'.3f')),float(format(-cv_test_mae[3],'.3f')),float(format(-cv_test_mae[4],'.3f')),float(format(-cv_test_mae[5],'.3f')),float(format(-cv_test_mae[6],'.3f')),float(format(-cv_test_mae[7],'.3f')),float(format(-cv_test_mae[8],'.3f')),float(format(-cv_test_mae[9],'.3f')),float(format(-cv_test_mae_m,'.3f')) ]\nevaluation.sort_values(by = 'R-squared (test)', ascending=False)","69d799a8":"pickle.dump(complex_model_1, open('fprc_r_lr.pkl','wb'))","be21d0f2":"# Print the predicted and actual value for the test set\nMLR_y_test_prediction= complex_model_1.predict(X_test)\nnp.savetxt('MLR_test_prediction.csv', np.exp(MLR_y_test_prediction) , delimiter=',', fmt='%s')\nnp.savetxt('MLR_test_actual.csv', np.exp(y_test), delimiter=',', fmt='%s')\n\n# Print the predicted and actual value for the traing set\nMLR_y_train_prediction= complex_model_1.predict(X_train)\nnp.savetxt('MLR_train_prediction.csv', np.exp(MLR_y_train_prediction), delimiter=',', fmt='%s')\nnp.savetxt('MLR_train_actual.csv', np.exp(y_train), delimiter=',', fmt='%s')\n\nX_standardized = scaler.transform(X)\nMLR_y_pred_entire_data = complex_model_1.predict(X_standardized)\nnp.savetxt('MLR_entire_prediction.csv', np.exp(MLR_y_pred_entire_data), delimiter=',', fmt='%s')\nnp.savetxt('MLR_entire_actual.csv', np.exp(y), delimiter=',', fmt='%s')\n\nimport matplotlib.pyplot as plt\nplt.plot(y, MLR_y_pred_entire_data,  'ro')\nplt.ylabel('Predicted data')\nplt.xlabel('Actual data')\nplt.show()\n\n\nK=X\n\nfeatures = list(X.columns.values)\nimportances = complex_model_1.coef_\nimport numpy as np\nindices = np.argsort(importances)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()\n\nprint(importances)\n\n#equation for Linear Regression\nprint('Intercept: {}'.format(complex_model_1.intercept_))\nprint('Coefficients: {}'.format(complex_model_1.coef_))","32ddd5bb":"print(\"For ridge regression\")\ncomplex_model_1 = linear_model.Ridge(alpha=0.01, random_state=20)\ncomplex_model_1.fit(X_train, y_train)\n\npred = complex_model_1.predict(X_test)\nrmse_train = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_train), y_train)),'.3f'))\nr2_train = float(format(complex_model_1.score(X_train, y_train),'.3f'))\nar2_train = float(format(adjustedR2(complex_model_1.score(X_train, y_train),X_train.shape[0],len(features)),'.3f'))\nmae_train=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_train), y_train)),'.3f'))\n\nrmse_test = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_test), y_test)),'.3f'))\nr2_test = float(format(complex_model_1.score(X_test, y_test),'.3f'))\nar2_test = float(format(adjustedR2(complex_model_1.score(X_test, y_test),X_test.shape[0],len(features)),'.3f'))\nmae_test=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_test), y_test)),'.3f'))\n\ncv = float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10).mean(),'.3f'))\n\ncv_train_rmse=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error')\ncv_train_rmse_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error').mean(),'.3f'))\n\ncv_train_r2=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2')\ncv_train_r2_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),'.3f'))\n\ncv_train_ar2=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2'),X_train.shape[0],len(features))\ncv_train_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),X_train.shape[0],len(features))\n\ncv_train_mae=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error')\ncv_train_mae_m=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error').mean()\n\ncv_test_rmse=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error')\ncv_test_rmse_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error').mean()\n\ncv_test_r2=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2')\ncv_test_r2_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean()\n\ncv_test_ar2=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2'),X_test.shape[0],len(features))\ncv_test_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean(),X_test.shape[0],len(features))\n\ncv_test_mae=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error')\ncv_test_mae_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error').mean()\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['ridge Regression-1','All features',rmse_train,r2_train,ar2_train,mae_train,rmse_test,r2_test,ar2_test,mae_test,cv]\nevaluation.sort_values(by = '10-Fold Cross Validation', ascending=False)\n\nr = evaluation2.shape[0]\nevaluation2.loc[r] = ['Ridge Regression','Train RMSE',float(format(-cv_train_rmse[0],'.3f')),float(format(-cv_train_rmse[1],'.3f')),float(format(-cv_train_rmse[2],'.3f')),float(format(-cv_train_rmse[3],'.3f')),float(format(-cv_train_rmse[4],'.3f')),float(format(-cv_train_rmse[5],'.3f')),float(format(-cv_train_rmse[6],'.3f')),float(format(-cv_train_rmse[7],'.3f')),float(format(-cv_train_rmse[8],'.3f')),float(format(-cv_train_rmse[9],'.3f')),float(format(-cv_train_rmse_m,'.3f'))]\nevaluation2.loc[r+1] = ['Ridge Regression','Train R2',float(format(cv_train_r2[0],'.3f')),float(format(cv_train_r2[1],'.3f')),float(format(cv_train_r2[2],'.3f')),float(format(cv_train_r2[3],'.3f')),float(format(cv_train_r2[4],'.3f')),float(format(cv_train_r2[5],'.3f')),float(format(cv_train_r2[6],'.3f')),float(format(cv_train_r2[7],'.3f')),float(format(cv_train_r2[8],'.3f')),float(format(cv_train_r2[9],'.3f')),float(format(cv_train_r2_m,'.3f'))]\nevaluation2.loc[r+2] = ['Ridge Regression','Train ar2',float(format(cv_train_ar2[0],'.3f')),float(format(cv_train_ar2[1],'.3f')),float(format(cv_train_ar2[2],'.3f')),float(format(cv_train_ar2[3],'.3f')),float(format(cv_train_ar2[4],'.3f')),float(format(cv_train_ar2[5],'.3f')),float(format(cv_train_ar2[6],'.3f')),float(format(cv_train_ar2[7],'.3f')),float(format(cv_train_ar2[8],'.3f')),float(format(cv_train_ar2[9],'.3f')),float(format(cv_train_ar2_m,'.3f'))]\nevaluation2.loc[r+3] = ['Ridge Regression','Train mae',float(format(-cv_train_mae[0],'.3f')),float(format(-cv_train_mae[1],'.3f')),float(format(-cv_train_mae[2],'.3f')),float(format(-cv_train_mae[3],'.3f')),float(format(-cv_train_mae[4],'.3f')),float(format(-cv_train_mae[5],'.3f')),float(format(-cv_train_mae[6],'.3f')),float(format(-cv_train_mae[7],'.3f')),float(format(-cv_train_mae[8],'.3f')),float(format(-cv_train_mae[9],'.3f')),float(format(-cv_train_mae_m,'.3f'))]\nevaluation2.loc[r+4] = ['Ridge Regression','Test RMSE',float(format(-cv_test_rmse[0],'.3f')),float(format(-cv_test_rmse[1],'.3f')),float(format(-cv_test_rmse[2],'.3f')),float(format(-cv_test_rmse[3],'.3f')),float(format(-cv_test_rmse[4],'.3f')),float(format(-cv_test_rmse[5],'.3f')),float(format(-cv_test_rmse[6],'.3f')),float(format(-cv_test_rmse[7],'.3f')),float(format(-cv_test_rmse[8],'.3f')),float(format(-cv_test_rmse[9],'.3f')),float(format(-cv_test_rmse_m,'.3f'))]\nevaluation2.loc[r+5] = ['Ridge Regression','Test R2',float(format(cv_test_r2[0],'.3f')),float(format(cv_test_r2[1],'.3f')),float(format(cv_test_r2[2],'.3f')),float(format(cv_test_r2[3],'.3f')),float(format(cv_test_r2[4],'.3f')),float(format(cv_test_r2[5],'.3f')),float(format(cv_test_r2[6],'.3f')),float(format(cv_test_r2[7],'.3f')),float(format(cv_test_r2[8],'.3f')),float(format(cv_test_r2[9],'.3f')),float(format(cv_test_r2_m,'.3f'))]\nevaluation2.loc[r+6] = ['Ridge Regression','Test ar2',float(format(cv_test_ar2[0],'.3f')),float(format(cv_test_ar2[1],'.3f')),float(format(cv_test_ar2[2],'.3f')),float(format(cv_test_ar2[3],'.3f')),float(format(cv_test_ar2[4],'.3f')),float(format(cv_test_ar2[5],'.3f')),float(format(cv_test_ar2[6],'.3f')),float(format(cv_test_ar2[7],'.3f')),float(format(cv_test_ar2[8],'.3f')),float(format(cv_test_ar2[9],'.3f')),float(format(cv_test_ar2_m,'.3f'))]\nevaluation2.loc[r+7] = ['Ridge Regression','Test mae',float(format(-cv_test_mae[0],'.3f')),float(format(-cv_test_mae[1],'.3f')),float(format(-cv_test_mae[2],'.3f')),float(format(-cv_test_mae[3],'.3f')),float(format(-cv_test_mae[4],'.3f')),float(format(-cv_test_mae[5],'.3f')),float(format(-cv_test_mae[6],'.3f')),float(format(-cv_test_mae[7],'.3f')),float(format(-cv_test_mae[8],'.3f')),float(format(-cv_test_mae[9],'.3f')),float(format(-cv_test_mae_m,'.3f')) ]\nevaluation.sort_values(by = 'R-squared (test)', ascending=False)","ea186643":"pickle.dump(complex_model_1, open('fprc_r_rr.pkl','wb'))","ff63c22d":"# Print the predicted and actual value for the test set\nRidge_y_test_prediction= complex_model_1.predict(X_test)\nnp.savetxt('Ridge_test_prediction.csv', np.exp(Ridge_y_test_prediction) , delimiter=',', fmt='%s')\nnp.savetxt('Ridge_test_actual.csv', np.exp(y_test), delimiter=',', fmt='%s')\n\n# Print the predicted and actual value for the traing set\nRidge_y_train_prediction= complex_model_1.predict(X_train)\nnp.savetxt('Ridge_train_prediction.csv', np.exp(Ridge_y_train_prediction), delimiter=',', fmt='%s')\nnp.savetxt('Ridge_train_actual.csv', np.exp(y_train), delimiter=',', fmt='%s')\n\nX_standardized = scaler.transform(X)\nRidge_y_pred_entire_data = complex_model_1.predict(X_standardized)\nnp.savetxt('Ridge_entire_prediction.csv', np.exp(Ridge_y_pred_entire_data), delimiter=',', fmt='%s')\nnp.savetxt('Ridge_entire_actual.csv', np.exp(y), delimiter=',', fmt='%s')\n\nimport matplotlib.pyplot as plt\nplt.plot(y, Ridge_y_pred_entire_data,  'ro')\nplt.ylabel('Predicted data')\nplt.xlabel('Actual data')\nplt.show()\n\n\nfeatures = list(X.columns.values)\nimportances = complex_model_1.coef_\nimport numpy as np\nindices = np.argsort(importances)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()\n\nprint(importances)\n\n#equation for Linear Regression\nprint('Intercept: {}'.format(complex_model_1.intercept_))\nprint('Coefficients: {}'.format(complex_model_1.coef_))","9427003a":"complex_model_1 = linear_model.Lasso(alpha=0.00001)\ncomplex_model_1.fit(X_train, y_train)\n\npred = complex_model_1.predict(X_test)\nrmse_train = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_train), y_train)),'.3f'))\nr2_train = float(format(complex_model_1.score(X_train, y_train),'.3f'))\nar2_train = float(format(adjustedR2(complex_model_1.score(X_train, y_train),X_train.shape[0],len(features)),'.3f'))\nmae_train=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_train), y_train)),'.3f'))\n\nrmse_test = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_test), y_test)),'.3f'))\nr2_test = float(format(complex_model_1.score(X_test, y_test),'.3f'))\nar2_test = float(format(adjustedR2(complex_model_1.score(X_test, y_test),X_test.shape[0],len(features)),'.3f'))\nmae_test=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_test), y_test)),'.3f'))\n\ncv = float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10).mean(),'.3f'))\n\ncv_train_rmse=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error')\ncv_train_rmse_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error').mean(),'.3f'))\n\ncv_train_r2=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2')\ncv_train_r2_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),'.3f'))\n\ncv_train_ar2=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2'),X_train.shape[0],len(features))\ncv_train_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),X_train.shape[0],len(features))\n\ncv_train_mae=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error')\ncv_train_mae_m=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error').mean()\n\ncv_test_rmse=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error')\ncv_test_rmse_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error').mean()\n\ncv_test_r2=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2')\ncv_test_r2_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean()\n\ncv_test_ar2=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2'),X_test.shape[0],len(features))\ncv_test_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean(),X_test.shape[0],len(features))\n\ncv_test_mae=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error')\ncv_test_mae_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error').mean()\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['LASSO Regression-1','All features',rmse_train,r2_train,ar2_train,mae_train,rmse_test,r2_test,ar2_test,mae_test,cv]\nevaluation.sort_values(by = '10-Fold Cross Validation', ascending=False)\n\nr = evaluation2.shape[0]\nevaluation2.loc[r] = ['Lasso Regression','Train RMSE',float(format(-cv_train_rmse[0],'.3f')),float(format(-cv_train_rmse[1],'.3f')),float(format(-cv_train_rmse[2],'.3f')),float(format(-cv_train_rmse[3],'.3f')),float(format(-cv_train_rmse[4],'.3f')),float(format(-cv_train_rmse[5],'.3f')),float(format(-cv_train_rmse[6],'.3f')),float(format(-cv_train_rmse[7],'.3f')),float(format(-cv_train_rmse[8],'.3f')),float(format(-cv_train_rmse[9],'.3f')),float(format(-cv_train_rmse_m,'.3f'))]\nevaluation2.loc[r+1] = ['Lasso Regression','Train R2',float(format(cv_train_r2[0],'.3f')),float(format(cv_train_r2[1],'.3f')),float(format(cv_train_r2[2],'.3f')),float(format(cv_train_r2[3],'.3f')),float(format(cv_train_r2[4],'.3f')),float(format(cv_train_r2[5],'.3f')),float(format(cv_train_r2[6],'.3f')),float(format(cv_train_r2[7],'.3f')),float(format(cv_train_r2[8],'.3f')),float(format(cv_train_r2[9],'.3f')),float(format(cv_train_r2_m,'.3f'))]\nevaluation2.loc[r+2] = ['Lasso Regression','Train ar2',float(format(cv_train_ar2[0],'.3f')),float(format(cv_train_ar2[1],'.3f')),float(format(cv_train_ar2[2],'.3f')),float(format(cv_train_ar2[3],'.3f')),float(format(cv_train_ar2[4],'.3f')),float(format(cv_train_ar2[5],'.3f')),float(format(cv_train_ar2[6],'.3f')),float(format(cv_train_ar2[7],'.3f')),float(format(cv_train_ar2[8],'.3f')),float(format(cv_train_ar2[9],'.3f')),float(format(cv_train_ar2_m,'.3f'))]\nevaluation2.loc[r+3] = ['Lasso Regression','Train mae',float(format(-cv_train_mae[0],'.3f')),float(format(-cv_train_mae[1],'.3f')),float(format(-cv_train_mae[2],'.3f')),float(format(-cv_train_mae[3],'.3f')),float(format(-cv_train_mae[4],'.3f')),float(format(-cv_train_mae[5],'.3f')),float(format(-cv_train_mae[6],'.3f')),float(format(-cv_train_mae[7],'.3f')),float(format(-cv_train_mae[8],'.3f')),float(format(-cv_train_mae[9],'.3f')),float(format(-cv_train_mae_m,'.3f'))]\nevaluation2.loc[r+4] = ['Lasso Regression','Test RMSE',float(format(-cv_test_rmse[0],'.3f')),float(format(-cv_test_rmse[1],'.3f')),float(format(-cv_test_rmse[2],'.3f')),float(format(-cv_test_rmse[3],'.3f')),float(format(-cv_test_rmse[4],'.3f')),float(format(-cv_test_rmse[5],'.3f')),float(format(-cv_test_rmse[6],'.3f')),float(format(-cv_test_rmse[7],'.3f')),float(format(-cv_test_rmse[8],'.3f')),float(format(-cv_test_rmse[9],'.3f')),float(format(-cv_test_rmse_m,'.3f'))]\nevaluation2.loc[r+5] = ['Lasso Regression','Test R2',float(format(cv_test_r2[0],'.3f')),float(format(cv_test_r2[1],'.3f')),float(format(cv_test_r2[2],'.3f')),float(format(cv_test_r2[3],'.3f')),float(format(cv_test_r2[4],'.3f')),float(format(cv_test_r2[5],'.3f')),float(format(cv_test_r2[6],'.3f')),float(format(cv_test_r2[7],'.3f')),float(format(cv_test_r2[8],'.3f')),float(format(cv_test_r2[9],'.3f')),float(format(cv_test_r2_m,'.3f'))]\nevaluation2.loc[r+6] = ['Lasso Regression','Test ar2',float(format(cv_test_ar2[0],'.3f')),float(format(cv_test_ar2[1],'.3f')),float(format(cv_test_ar2[2],'.3f')),float(format(cv_test_ar2[3],'.3f')),float(format(cv_test_ar2[4],'.3f')),float(format(cv_test_ar2[5],'.3f')),float(format(cv_test_ar2[6],'.3f')),float(format(cv_test_ar2[7],'.3f')),float(format(cv_test_ar2[8],'.3f')),float(format(cv_test_ar2[9],'.3f')),float(format(cv_test_ar2_m,'.3f'))]\nevaluation2.loc[r+7] = ['Lasso Regression','Test mae',float(format(-cv_test_mae[0],'.3f')),float(format(-cv_test_mae[1],'.3f')),float(format(-cv_test_mae[2],'.3f')),float(format(-cv_test_mae[3],'.3f')),float(format(-cv_test_mae[4],'.3f')),float(format(-cv_test_mae[5],'.3f')),float(format(-cv_test_mae[6],'.3f')),float(format(-cv_test_mae[7],'.3f')),float(format(-cv_test_mae[8],'.3f')),float(format(-cv_test_mae[9],'.3f')),float(format(-cv_test_mae_m,'.3f')) ]\nevaluation.sort_values(by = 'R-squared (test)', ascending=False)","7fdb96cc":"pickle.dump(complex_model_1, open('fprc_r_lasso.pkl','wb'))","ac998f1f":"# Print the predicted and actual value for the test set\nLasso_y_test_prediction= complex_model_1.predict(X_test)\nnp.savetxt('Lasso_test_prediction.csv', np.exp(Lasso_y_test_prediction) , delimiter=',', fmt='%s')\nnp.savetxt('Lasso_test_actual.csv', np.exp(y_test), delimiter=',', fmt='%s')\n\n# Print the predicted and actual value for the traing set\nLasso_y_train_prediction= complex_model_1.predict(X_train)\nnp.savetxt('Lasso_train_prediction.csv', np.exp(Lasso_y_train_prediction), delimiter=',', fmt='%s')\nnp.savetxt('Lasso_train_actual.csv', np.exp(y_train), delimiter=',', fmt='%s')\n\nX_standardized = scaler.transform(X)\nLasso_y_pred_entire_data = complex_model_1.predict(X_standardized)\nnp.savetxt('Lasso_entire_prediction.csv', np.exp(Lasso_y_pred_entire_data), delimiter=',', fmt='%s')\nnp.savetxt('Lasso_entire_actual.csv', np.exp(y), delimiter=',', fmt='%s')\n\nimport matplotlib.pyplot as plt\nplt.plot(y, Lasso_y_pred_entire_data,  'ro')\nplt.ylabel('Predicted data')\nplt.xlabel('Actual data')\nplt.show()\n\n\nfeatures = list(X.columns.values)\nimportances = complex_model_1.coef_\nimport numpy as np\nindices = np.argsort(importances)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()\n\nprint(importances)\n\n#equation for Linear Regression\nprint('Intercept: {}'.format(complex_model_1.intercept_))\nprint('Coefficients: {}'.format(complex_model_1.coef_))","2e407f0c":"complex_model_1 = KNeighborsRegressor(n_neighbors=3)\ncomplex_model_1.fit(X_train, y_train)\n\npred = complex_model_1.predict(X_test)\nrmse_train = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_train), y_train)),'.3f'))\nr2_train = float(format(complex_model_1.score(X_train, y_train),'.3f'))\nar2_train = float(format(adjustedR2(complex_model_1.score(X_train, y_train),X_train.shape[0],len(features)),'.3f'))\nmae_train=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_train), y_train)),'.3f'))\n\nrmse_test = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_test), y_test)),'.3f'))\nr2_test = float(format(complex_model_1.score(X_test, y_test),'.3f'))\nar2_test = float(format(adjustedR2(complex_model_1.score(X_test, y_test),X_test.shape[0],len(features)),'.3f'))\nmae_test=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_test), y_test)),'.3f'))\n\ncv = float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10).mean(),'.3f'))\n\ncv_train_rmse=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error')\ncv_train_rmse_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error').mean(),'.3f'))\n\ncv_train_r2=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2')\ncv_train_r2_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),'.3f'))\n\ncv_train_ar2=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2'),X_train.shape[0],len(features))\ncv_train_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),X_train.shape[0],len(features))\n\ncv_train_mae=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error')\ncv_train_mae_m=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error').mean()\n\ncv_test_rmse=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error')\ncv_test_rmse_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error').mean()\n\ncv_test_r2=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2')\ncv_test_r2_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean()\n\ncv_test_ar2=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2'),X_test.shape[0],len(features))\ncv_test_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean(),X_test.shape[0],len(features))\n\ncv_test_mae=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error')\ncv_test_mae_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error').mean()\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['kNN Regression','All features',rmse_train,r2_train,ar2_train,mae_train,rmse_test,r2_test,ar2_test,mae_test,cv]\nevaluation.sort_values(by = '10-Fold Cross Validation', ascending=False)\n\nr = evaluation2.shape[0]\nevaluation2.loc[r] = ['KNN Regression','Train RMSE',float(format(-cv_train_rmse[0],'.3f')),float(format(-cv_train_rmse[1],'.3f')),float(format(-cv_train_rmse[2],'.3f')),float(format(-cv_train_rmse[3],'.3f')),float(format(-cv_train_rmse[4],'.3f')),float(format(-cv_train_rmse[5],'.3f')),float(format(-cv_train_rmse[6],'.3f')),float(format(-cv_train_rmse[7],'.3f')),float(format(-cv_train_rmse[8],'.3f')),float(format(-cv_train_rmse[9],'.3f')),float(format(-cv_train_rmse_m,'.3f'))]\nevaluation2.loc[r+1] = ['KNN Regression','Train R2',float(format(cv_train_r2[0],'.3f')),float(format(cv_train_r2[1],'.3f')),float(format(cv_train_r2[2],'.3f')),float(format(cv_train_r2[3],'.3f')),float(format(cv_train_r2[4],'.3f')),float(format(cv_train_r2[5],'.3f')),float(format(cv_train_r2[6],'.3f')),float(format(cv_train_r2[7],'.3f')),float(format(cv_train_r2[8],'.3f')),float(format(cv_train_r2[9],'.3f')),float(format(cv_train_r2_m,'.3f'))]\nevaluation2.loc[r+2] = ['KNN Regression','Train ar2',float(format(cv_train_ar2[0],'.3f')),float(format(cv_train_ar2[1],'.3f')),float(format(cv_train_ar2[2],'.3f')),float(format(cv_train_ar2[3],'.3f')),float(format(cv_train_ar2[4],'.3f')),float(format(cv_train_ar2[5],'.3f')),float(format(cv_train_ar2[6],'.3f')),float(format(cv_train_ar2[7],'.3f')),float(format(cv_train_ar2[8],'.3f')),float(format(cv_train_ar2[9],'.3f')),float(format(cv_train_ar2_m,'.3f'))]\nevaluation2.loc[r+3] = ['KNN Regression','Train mae',float(format(-cv_train_mae[0],'.3f')),float(format(-cv_train_mae[1],'.3f')),float(format(-cv_train_mae[2],'.3f')),float(format(-cv_train_mae[3],'.3f')),float(format(-cv_train_mae[4],'.3f')),float(format(-cv_train_mae[5],'.3f')),float(format(-cv_train_mae[6],'.3f')),float(format(-cv_train_mae[7],'.3f')),float(format(-cv_train_mae[8],'.3f')),float(format(-cv_train_mae[9],'.3f')),float(format(-cv_train_mae_m,'.3f'))]\nevaluation2.loc[r+4] = ['KNN Regression','Test RMSE',float(format(-cv_test_rmse[0],'.3f')),float(format(-cv_test_rmse[1],'.3f')),float(format(-cv_test_rmse[2],'.3f')),float(format(-cv_test_rmse[3],'.3f')),float(format(-cv_test_rmse[4],'.3f')),float(format(-cv_test_rmse[5],'.3f')),float(format(-cv_test_rmse[6],'.3f')),float(format(-cv_test_rmse[7],'.3f')),float(format(-cv_test_rmse[8],'.3f')),float(format(-cv_test_rmse[9],'.3f')),float(format(-cv_test_rmse_m,'.3f'))]\nevaluation2.loc[r+5] = ['KNN Regression','Test R2',float(format(cv_test_r2[0],'.3f')),float(format(cv_test_r2[1],'.3f')),float(format(cv_test_r2[2],'.3f')),float(format(cv_test_r2[3],'.3f')),float(format(cv_test_r2[4],'.3f')),float(format(cv_test_r2[5],'.3f')),float(format(cv_test_r2[6],'.3f')),float(format(cv_test_r2[7],'.3f')),float(format(cv_test_r2[8],'.3f')),float(format(cv_test_r2[9],'.3f')),float(format(cv_test_r2_m,'.3f'))]\nevaluation2.loc[r+6] = ['KNN Regression','Test ar2',float(format(cv_test_ar2[0],'.3f')),float(format(cv_test_ar2[1],'.3f')),float(format(cv_test_ar2[2],'.3f')),float(format(cv_test_ar2[3],'.3f')),float(format(cv_test_ar2[4],'.3f')),float(format(cv_test_ar2[5],'.3f')),float(format(cv_test_ar2[6],'.3f')),float(format(cv_test_ar2[7],'.3f')),float(format(cv_test_ar2[8],'.3f')),float(format(cv_test_ar2[9],'.3f')),float(format(cv_test_ar2_m,'.3f'))]\nevaluation2.loc[r+7] = ['KNN Regression','Test mae',float(format(-cv_test_mae[0],'.3f')),float(format(-cv_test_mae[1],'.3f')),float(format(-cv_test_mae[2],'.3f')),float(format(-cv_test_mae[3],'.3f')),float(format(-cv_test_mae[4],'.3f')),float(format(-cv_test_mae[5],'.3f')),float(format(-cv_test_mae[6],'.3f')),float(format(-cv_test_mae[7],'.3f')),float(format(-cv_test_mae[8],'.3f')),float(format(-cv_test_mae[9],'.3f')),float(format(-cv_test_mae_m,'.3f')) ]\nevaluation.sort_values(by = 'R-squared (test)', ascending=False)","0e472fb9":"pickle.dump(complex_model_1, open('fprc_r_knn.pkl','wb'))","d5233cc0":"# Print the predicted and actual value for the test set\nKNN_y_test_prediction= complex_model_1.predict(X_test)\nnp.savetxt('KNN_test_prediction.csv', np.exp(KNN_y_test_prediction) , delimiter=',', fmt='%s')\nnp.savetxt('KNN_test_actual.csv', np.exp(y_test), delimiter=',', fmt='%s')\n\n# Print the predicted and actual value for the traing set\nKNN_y_train_prediction= complex_model_1.predict(X_train)\nnp.savetxt('KNN_train_prediction.csv', np.exp(KNN_y_train_prediction), delimiter=',', fmt='%s')\nnp.savetxt('KNN_train_actual.csv', np.exp(y_train), delimiter=',', fmt='%s')\n\nX_standardized = scaler.transform(X)\nKNN_y_pred_entire_data = complex_model_1.predict(X_standardized)\nnp.savetxt('KNN_entire_prediction.csv', np.exp(KNN_y_pred_entire_data), delimiter=',', fmt='%s')\nnp.savetxt('KNN_entire_actual.csv', np.exp(y), delimiter=',', fmt='%s')\n\nimport matplotlib.pyplot as plt\nplt.plot(y, KNN_y_pred_entire_data,  'ro')\nplt.ylabel('Predicted data')\nplt.xlabel('Actual data')\nplt.show()\n\n\n# features = list(X.columns.values)\n# importances = complex_model_1.metric_params\n# import numpy as np\n# indices = np.argsort(importances)\n# plt.title('Feature Importances')\n# plt.barh(range(len(indices)), importances[indices], color='b', align='center')\n# plt.yticks(range(len(indices)), [features[i] for i in indices])\n# plt.xlabel('Relative Importance')\n# plt.show()\n\n# print(importances)\n\n","bb9395a7":"print(\"For SVR: \")\nfrom sklearn.svm import SVR\ncomplex_model_1 = SVR(kernel='rbf', C=20, degree=5)\ncomplex_model_1.fit(X_train, y_train)\n\n\npred = complex_model_1.predict(X_test)\nrmse_train = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_train), y_train)),'.3f'))\nr2_train = float(format(complex_model_1.score(X_train, y_train),'.3f'))\nar2_train = float(format(adjustedR2(complex_model_1.score(X_train, y_train),X_train.shape[0],len(features)),'.3f'))\nmae_train=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_train), y_train)),'.3f'))\n\nrmse_test = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_test), y_test)),'.3f'))\nr2_test = float(format(complex_model_1.score(X_test, y_test),'.3f'))\nar2_test = float(format(adjustedR2(complex_model_1.score(X_test, y_test),X_test.shape[0],len(features)),'.3f'))\nmae_test=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_test), y_test)),'.3f'))\n\ncv = float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10).mean(),'.3f'))\n\ncv_train_rmse=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error')\ncv_train_rmse_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error').mean(),'.3f'))\n\ncv_train_r2=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2')\ncv_train_r2_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),'.3f'))\n\ncv_train_ar2=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2'),X_train.shape[0],len(features))\ncv_train_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),X_train.shape[0],len(features))\n\ncv_train_mae=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error')\ncv_train_mae_m=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error').mean()\n\ncv_test_rmse=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error')\ncv_test_rmse_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error').mean()\n\ncv_test_r2=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2')\ncv_test_r2_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean()\n\ncv_test_ar2=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2'),X_test.shape[0],len(features))\ncv_test_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean(),X_test.shape[0],len(features))\n\ncv_test_mae=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error')\ncv_test_mae_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error').mean()\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['SVR Regression','All features',rmse_train,r2_train,ar2_train,mae_train,rmse_test,r2_test,ar2_test,mae_test,cv]\nevaluation.sort_values(by = '10-Fold Cross Validation', ascending=False)\n\nr = evaluation2.shape[0]\nevaluation2.loc[r] = ['SVR Regression','Train RMSE',float(format(-cv_train_rmse[0],'.3f')),float(format(-cv_train_rmse[1],'.3f')),float(format(-cv_train_rmse[2],'.3f')),float(format(-cv_train_rmse[3],'.3f')),float(format(-cv_train_rmse[4],'.3f')),float(format(-cv_train_rmse[5],'.3f')),float(format(-cv_train_rmse[6],'.3f')),float(format(-cv_train_rmse[7],'.3f')),float(format(-cv_train_rmse[8],'.3f')),float(format(-cv_train_rmse[9],'.3f')),float(format(-cv_train_rmse_m,'.3f'))]\nevaluation2.loc[r+1] = ['SVR Regression','Train R2',float(format(cv_train_r2[0],'.3f')),float(format(cv_train_r2[1],'.3f')),float(format(cv_train_r2[2],'.3f')),float(format(cv_train_r2[3],'.3f')),float(format(cv_train_r2[4],'.3f')),float(format(cv_train_r2[5],'.3f')),float(format(cv_train_r2[6],'.3f')),float(format(cv_train_r2[7],'.3f')),float(format(cv_train_r2[8],'.3f')),float(format(cv_train_r2[9],'.3f')),float(format(cv_train_r2_m,'.3f'))]\nevaluation2.loc[r+2] = ['SVR Regression','Train ar2',float(format(cv_train_ar2[0],'.3f')),float(format(cv_train_ar2[1],'.3f')),float(format(cv_train_ar2[2],'.3f')),float(format(cv_train_ar2[3],'.3f')),float(format(cv_train_ar2[4],'.3f')),float(format(cv_train_ar2[5],'.3f')),float(format(cv_train_ar2[6],'.3f')),float(format(cv_train_ar2[7],'.3f')),float(format(cv_train_ar2[8],'.3f')),float(format(cv_train_ar2[9],'.3f')),float(format(cv_train_ar2_m,'.3f'))]\nevaluation2.loc[r+3] = ['SVR Regression','Train mae',float(format(-cv_train_mae[0],'.3f')),float(format(-cv_train_mae[1],'.3f')),float(format(-cv_train_mae[2],'.3f')),float(format(-cv_train_mae[3],'.3f')),float(format(-cv_train_mae[4],'.3f')),float(format(-cv_train_mae[5],'.3f')),float(format(-cv_train_mae[6],'.3f')),float(format(-cv_train_mae[7],'.3f')),float(format(-cv_train_mae[8],'.3f')),float(format(-cv_train_mae[9],'.3f')),float(format(-cv_train_mae_m,'.3f'))]\nevaluation2.loc[r+4] = ['SVR Regression','Test RMSE',float(format(-cv_test_rmse[0],'.3f')),float(format(-cv_test_rmse[1],'.3f')),float(format(-cv_test_rmse[2],'.3f')),float(format(-cv_test_rmse[3],'.3f')),float(format(-cv_test_rmse[4],'.3f')),float(format(-cv_test_rmse[5],'.3f')),float(format(-cv_test_rmse[6],'.3f')),float(format(-cv_test_rmse[7],'.3f')),float(format(-cv_test_rmse[8],'.3f')),float(format(-cv_test_rmse[9],'.3f')),float(format(-cv_test_rmse_m,'.3f'))]\nevaluation2.loc[r+5] = ['SVR Regression','Test R2',float(format(cv_test_r2[0],'.3f')),float(format(cv_test_r2[1],'.3f')),float(format(cv_test_r2[2],'.3f')),float(format(cv_test_r2[3],'.3f')),float(format(cv_test_r2[4],'.3f')),float(format(cv_test_r2[5],'.3f')),float(format(cv_test_r2[6],'.3f')),float(format(cv_test_r2[7],'.3f')),float(format(cv_test_r2[8],'.3f')),float(format(cv_test_r2[9],'.3f')),float(format(cv_test_r2_m,'.3f'))]\nevaluation2.loc[r+6] = ['SVR Regression','Test ar2',float(format(cv_test_ar2[0],'.3f')),float(format(cv_test_ar2[1],'.3f')),float(format(cv_test_ar2[2],'.3f')),float(format(cv_test_ar2[3],'.3f')),float(format(cv_test_ar2[4],'.3f')),float(format(cv_test_ar2[5],'.3f')),float(format(cv_test_ar2[6],'.3f')),float(format(cv_test_ar2[7],'.3f')),float(format(cv_test_ar2[8],'.3f')),float(format(cv_test_ar2[9],'.3f')),float(format(cv_test_ar2_m,'.3f'))]\nevaluation2.loc[r+7] = ['SVR Regression','Test mae',float(format(-cv_test_mae[0],'.3f')),float(format(-cv_test_mae[1],'.3f')),float(format(-cv_test_mae[2],'.3f')),float(format(-cv_test_mae[3],'.3f')),float(format(-cv_test_mae[4],'.3f')),float(format(-cv_test_mae[5],'.3f')),float(format(-cv_test_mae[6],'.3f')),float(format(-cv_test_mae[7],'.3f')),float(format(-cv_test_mae[8],'.3f')),float(format(-cv_test_mae[9],'.3f')),float(format(-cv_test_mae_m,'.3f')) ]\nevaluation.sort_values(by = 'R-squared (test)', ascending=False)","55e0b128":"pickle.dump(complex_model_1, open('fprc_r_svr.pkl','wb'))","6f191d7c":"# Print the predicted and actual value for the test set\nSVR_y_test_prediction= complex_model_1.predict(X_test)\nnp.savetxt('SVR_test_prediction.csv', np.exp(SVR_y_test_prediction) , delimiter=',', fmt='%s')\nnp.savetxt('SVR_test_actual.csv', np.exp(y_test), delimiter=',', fmt='%s')\n\n# Print the predicted and actual value for the traing set\nSVR_y_train_prediction= complex_model_1.predict(X_train)\nnp.savetxt('SVR_train_prediction.csv', np.exp(SVR_y_train_prediction), delimiter=',', fmt='%s')\nnp.savetxt('SVR_train_actual.csv', np.exp(y_train), delimiter=',', fmt='%s')\n\nX_standardized = scaler.transform(X)\nSVR_y_pred_entire_data = complex_model_1.predict(X_standardized)\nnp.savetxt('SVR_entire_prediction.csv', np.exp(SVR_y_pred_entire_data), delimiter=',', fmt='%s')\nnp.savetxt('SVR_entire_actual.csv', np.exp(y), delimiter=',', fmt='%s')\n\nimport matplotlib.pyplot as plt\nplt.plot(y, SVR_y_pred_entire_data,  'ro')\nplt.ylabel('Predicted data')\nplt.xlabel('Actual data')\nplt.show()\n\n\n# features = list(X.columns.values)\n# importances = complex_model_1.metric_params\n# import numpy as np\n# indices = np.argsort(importances)\n# plt.title('Feature Importances')\n# plt.barh(range(len(indices)), importances[indices], color='b', align='center')\n# plt.yticks(range(len(indices)), [features[i] for i in indices])\n# plt.xlabel('Relative Importance')\n# plt.show()\n\n# print(importances)","92d8e9c3":"print(\"For Decision Tree regression\")\nfrom sklearn.tree import DecisionTreeRegressor\ncomplex_model_1 = DecisionTreeRegressor(random_state=27)\ncomplex_model_1.fit(X_train, y_train)\n\n\npred = complex_model_1.predict(X_test)\nrmse_train = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_train), y_train)),'.3f'))\nr2_train = float(format(complex_model_1.score(X_train, y_train),'.3f'))\nar2_train = float(format(adjustedR2(complex_model_1.score(X_train, y_train),X_train.shape[0],len(features)),'.3f'))\nmae_train=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_train), y_train)),'.3f'))\n\nrmse_test = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_test), y_test)),'.3f'))\nr2_test = float(format(complex_model_1.score(X_test, y_test),'.3f'))\nar2_test = float(format(adjustedR2(complex_model_1.score(X_test, y_test),X_test.shape[0],len(features)),'.3f'))\nmae_test=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_test), y_test)),'.3f'))\n\ncv = float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10).mean(),'.3f'))\n\ncv_train_rmse=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error')\ncv_train_rmse_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error').mean(),'.3f'))\n\ncv_train_r2=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2')\ncv_train_r2_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),'.3f'))\n\ncv_train_ar2=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2'),X_train.shape[0],len(features))\ncv_train_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),X_train.shape[0],len(features))\n\ncv_train_mae=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error')\ncv_train_mae_m=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error').mean()\n\ncv_test_rmse=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error')\ncv_test_rmse_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error').mean()\n\ncv_test_r2=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2')\ncv_test_r2_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean()\n\ncv_test_ar2=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2'),X_test.shape[0],len(features))\ncv_test_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean(),X_test.shape[0],len(features))\n\ncv_test_mae=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error')\ncv_test_mae_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error').mean()\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['DT','All features',rmse_train,r2_train,ar2_train,mae_train,rmse_test,r2_test,ar2_test,mae_test,cv]\nevaluation.sort_values(by = '10-Fold Cross Validation', ascending=False)\n\nr = evaluation2.shape[0]\nevaluation2.loc[r] = ['DT Regression','Train RMSE',float(format(-cv_train_rmse[0],'.3f')),float(format(-cv_train_rmse[1],'.3f')),float(format(-cv_train_rmse[2],'.3f')),float(format(-cv_train_rmse[3],'.3f')),float(format(-cv_train_rmse[4],'.3f')),float(format(-cv_train_rmse[5],'.3f')),float(format(-cv_train_rmse[6],'.3f')),float(format(-cv_train_rmse[7],'.3f')),float(format(-cv_train_rmse[8],'.3f')),float(format(-cv_train_rmse[9],'.3f')),float(format(-cv_train_rmse_m,'.3f'))]\nevaluation2.loc[r+1] = ['DT Regression','Train R2',float(format(cv_train_r2[0],'.3f')),float(format(cv_train_r2[1],'.3f')),float(format(cv_train_r2[2],'.3f')),float(format(cv_train_r2[3],'.3f')),float(format(cv_train_r2[4],'.3f')),float(format(cv_train_r2[5],'.3f')),float(format(cv_train_r2[6],'.3f')),float(format(cv_train_r2[7],'.3f')),float(format(cv_train_r2[8],'.3f')),float(format(cv_train_r2[9],'.3f')),float(format(cv_train_r2_m,'.3f'))]\nevaluation2.loc[r+2] = ['DT Regression','Train ar2',float(format(cv_train_ar2[0],'.3f')),float(format(cv_train_ar2[1],'.3f')),float(format(cv_train_ar2[2],'.3f')),float(format(cv_train_ar2[3],'.3f')),float(format(cv_train_ar2[4],'.3f')),float(format(cv_train_ar2[5],'.3f')),float(format(cv_train_ar2[6],'.3f')),float(format(cv_train_ar2[7],'.3f')),float(format(cv_train_ar2[8],'.3f')),float(format(cv_train_ar2[9],'.3f')),float(format(cv_train_ar2_m,'.3f'))]\nevaluation2.loc[r+3] = ['DT Regression','Train mae',float(format(-cv_train_mae[0],'.3f')),float(format(-cv_train_mae[1],'.3f')),float(format(-cv_train_mae[2],'.3f')),float(format(-cv_train_mae[3],'.3f')),float(format(-cv_train_mae[4],'.3f')),float(format(-cv_train_mae[5],'.3f')),float(format(-cv_train_mae[6],'.3f')),float(format(-cv_train_mae[7],'.3f')),float(format(-cv_train_mae[8],'.3f')),float(format(-cv_train_mae[9],'.3f')),float(format(-cv_train_mae_m,'.3f'))]\nevaluation2.loc[r+4] = ['DT Regression','Test RMSE',float(format(-cv_test_rmse[0],'.3f')),float(format(-cv_test_rmse[1],'.3f')),float(format(-cv_test_rmse[2],'.3f')),float(format(-cv_test_rmse[3],'.3f')),float(format(-cv_test_rmse[4],'.3f')),float(format(-cv_test_rmse[5],'.3f')),float(format(-cv_test_rmse[6],'.3f')),float(format(-cv_test_rmse[7],'.3f')),float(format(-cv_test_rmse[8],'.3f')),float(format(-cv_test_rmse[9],'.3f')),float(format(-cv_test_rmse_m,'.3f'))]\nevaluation2.loc[r+5] = ['DT Regression','Test R2',float(format(cv_test_r2[0],'.3f')),float(format(cv_test_r2[1],'.3f')),float(format(cv_test_r2[2],'.3f')),float(format(cv_test_r2[3],'.3f')),float(format(cv_test_r2[4],'.3f')),float(format(cv_test_r2[5],'.3f')),float(format(cv_test_r2[6],'.3f')),float(format(cv_test_r2[7],'.3f')),float(format(cv_test_r2[8],'.3f')),float(format(cv_test_r2[9],'.3f')),float(format(cv_test_r2_m,'.3f'))]\nevaluation2.loc[r+6] = ['DT Regression','Test ar2',float(format(cv_test_ar2[0],'.3f')),float(format(cv_test_ar2[1],'.3f')),float(format(cv_test_ar2[2],'.3f')),float(format(cv_test_ar2[3],'.3f')),float(format(cv_test_ar2[4],'.3f')),float(format(cv_test_ar2[5],'.3f')),float(format(cv_test_ar2[6],'.3f')),float(format(cv_test_ar2[7],'.3f')),float(format(cv_test_ar2[8],'.3f')),float(format(cv_test_ar2[9],'.3f')),float(format(cv_test_ar2_m,'.3f'))]\nevaluation2.loc[r+7] = ['DT Regression','Test mae',float(format(-cv_test_mae[0],'.3f')),float(format(-cv_test_mae[1],'.3f')),float(format(-cv_test_mae[2],'.3f')),float(format(-cv_test_mae[3],'.3f')),float(format(-cv_test_mae[4],'.3f')),float(format(-cv_test_mae[5],'.3f')),float(format(-cv_test_mae[6],'.3f')),float(format(-cv_test_mae[7],'.3f')),float(format(-cv_test_mae[8],'.3f')),float(format(-cv_test_mae[9],'.3f')),float(format(-cv_test_mae_m,'.3f')) ]\nevaluation.sort_values(by = 'R-squared (test)', ascending=False)","033faa39":"pickle.dump(complex_model_1, open('fprc_r_dt.pkl','wb'))","91bc8321":"# Print the predicted and actual value for the test set\nDT_y_test_prediction= complex_model_1.predict(X_test)\nnp.savetxt('DT_test_prediction.csv', np.exp(DT_y_test_prediction) , delimiter=',', fmt='%s')\nnp.savetxt('DT_test_actual.csv', np.exp(y_test), delimiter=',', fmt='%s')\n\n# Print the predicted and actual value for the traing set\nDT_y_train_prediction= complex_model_1.predict(X_train)\nnp.savetxt('DT_train_prediction.csv', np.exp(DT_y_train_prediction), delimiter=',', fmt='%s')\nnp.savetxt('DT_train_actual.csv', np.exp(y_train), delimiter=',', fmt='%s')\n\nX_standardized = scaler.transform(X)\nDT_y_pred_entire_data = complex_model_1.predict(X_standardized)\nnp.savetxt('DT_entire_prediction.csv', np.exp(DT_y_pred_entire_data), delimiter=',', fmt='%s')\nnp.savetxt('DT_entire_actual.csv', np.exp(y), delimiter=',', fmt='%s')\n\nimport matplotlib.pyplot as plt\nplt.plot(y, DT_y_pred_entire_data,  'ro')\nplt.ylabel('Predicted data')\nplt.xlabel('Actual data')\nplt.show()\n\nfeatures = list(X.columns.values)\nimportances = complex_model_1.feature_importances_\nimport numpy as np\nindices = np.argsort(importances)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()\n\nprint(importances)","53dcd7e9":"print(\"For Random Forest regression\")\nfrom sklearn.ensemble import RandomForestRegressor\ncomplex_model_1 = RandomForestRegressor(random_state=43, n_estimators=100)\ncomplex_model_1.fit(X_train, y_train)\n\npred = complex_model_1.predict(X_test)\nrmse_train = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_train), y_train)),'.3f'))\nr2_train = float(format(complex_model_1.score(X_train, y_train),'.3f'))\nar2_train = float(format(adjustedR2(complex_model_1.score(X_train, y_train),X_train.shape[0],len(features)),'.3f'))\nmae_train=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_train), y_train)),'.3f'))\n\nrmse_test = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_test), y_test)),'.3f'))\nr2_test = float(format(complex_model_1.score(X_test, y_test),'.3f'))\nar2_test = float(format(adjustedR2(complex_model_1.score(X_test, y_test),X_test.shape[0],len(features)),'.3f'))\nmae_test=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_test), y_test)),'.3f'))\n\ncv = float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10).mean(),'.3f'))\n\ncv_train_rmse=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error')\ncv_train_rmse_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error').mean(),'.3f'))\n\ncv_train_r2=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2')\ncv_train_r2_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),'.3f'))\n\ncv_train_ar2=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2'),X_train.shape[0],len(features))\ncv_train_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),X_train.shape[0],len(features))\n\ncv_train_mae=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error')\ncv_train_mae_m=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error').mean()\n\ncv_test_rmse=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error')\ncv_test_rmse_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error').mean()\n\ncv_test_r2=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2')\ncv_test_r2_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean()\n\ncv_test_ar2=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2'),X_test.shape[0],len(features))\ncv_test_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean(),X_test.shape[0],len(features))\n\ncv_test_mae=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error')\ncv_test_mae_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error').mean()\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['RF','All features',rmse_train,r2_train,ar2_train,mae_train,rmse_test,r2_test,ar2_test,mae_test,cv]\nevaluation.sort_values(by = '10-Fold Cross Validation', ascending=False)\n\nr = evaluation2.shape[0]\nevaluation2.loc[r] = ['RF Regression','Train RMSE',float(format(-cv_train_rmse[0],'.3f')),float(format(-cv_train_rmse[1],'.3f')),float(format(-cv_train_rmse[2],'.3f')),float(format(-cv_train_rmse[3],'.3f')),float(format(-cv_train_rmse[4],'.3f')),float(format(-cv_train_rmse[5],'.3f')),float(format(-cv_train_rmse[6],'.3f')),float(format(-cv_train_rmse[7],'.3f')),float(format(-cv_train_rmse[8],'.3f')),float(format(-cv_train_rmse[9],'.3f')),float(format(-cv_train_rmse_m,'.3f'))]\nevaluation2.loc[r+1] = ['RF Regression','Train R2',float(format(cv_train_r2[0],'.3f')),float(format(cv_train_r2[1],'.3f')),float(format(cv_train_r2[2],'.3f')),float(format(cv_train_r2[3],'.3f')),float(format(cv_train_r2[4],'.3f')),float(format(cv_train_r2[5],'.3f')),float(format(cv_train_r2[6],'.3f')),float(format(cv_train_r2[7],'.3f')),float(format(cv_train_r2[8],'.3f')),float(format(cv_train_r2[9],'.3f')),float(format(cv_train_r2_m,'.3f'))]\nevaluation2.loc[r+2] = ['RF Regression','Train ar2',float(format(cv_train_ar2[0],'.3f')),float(format(cv_train_ar2[1],'.3f')),float(format(cv_train_ar2[2],'.3f')),float(format(cv_train_ar2[3],'.3f')),float(format(cv_train_ar2[4],'.3f')),float(format(cv_train_ar2[5],'.3f')),float(format(cv_train_ar2[6],'.3f')),float(format(cv_train_ar2[7],'.3f')),float(format(cv_train_ar2[8],'.3f')),float(format(cv_train_ar2[9],'.3f')),float(format(cv_train_ar2_m,'.3f'))]\nevaluation2.loc[r+3] = ['RF Regression','Train mae',float(format(-cv_train_mae[0],'.3f')),float(format(-cv_train_mae[1],'.3f')),float(format(-cv_train_mae[2],'.3f')),float(format(-cv_train_mae[3],'.3f')),float(format(-cv_train_mae[4],'.3f')),float(format(-cv_train_mae[5],'.3f')),float(format(-cv_train_mae[6],'.3f')),float(format(-cv_train_mae[7],'.3f')),float(format(-cv_train_mae[8],'.3f')),float(format(-cv_train_mae[9],'.3f')),float(format(-cv_train_mae_m,'.3f'))]\nevaluation2.loc[r+4] = ['RF Regression','Test RMSE',float(format(-cv_test_rmse[0],'.3f')),float(format(-cv_test_rmse[1],'.3f')),float(format(-cv_test_rmse[2],'.3f')),float(format(-cv_test_rmse[3],'.3f')),float(format(-cv_test_rmse[4],'.3f')),float(format(-cv_test_rmse[5],'.3f')),float(format(-cv_test_rmse[6],'.3f')),float(format(-cv_test_rmse[7],'.3f')),float(format(-cv_test_rmse[8],'.3f')),float(format(-cv_test_rmse[9],'.3f')),float(format(-cv_test_rmse_m,'.3f'))]\nevaluation2.loc[r+5] = ['RF Regression','Test R2',float(format(cv_test_r2[0],'.3f')),float(format(cv_test_r2[1],'.3f')),float(format(cv_test_r2[2],'.3f')),float(format(cv_test_r2[3],'.3f')),float(format(cv_test_r2[4],'.3f')),float(format(cv_test_r2[5],'.3f')),float(format(cv_test_r2[6],'.3f')),float(format(cv_test_r2[7],'.3f')),float(format(cv_test_r2[8],'.3f')),float(format(cv_test_r2[9],'.3f')),float(format(cv_test_r2_m,'.3f'))]\nevaluation2.loc[r+6] = ['RF Regression','Test ar2',float(format(cv_test_ar2[0],'.3f')),float(format(cv_test_ar2[1],'.3f')),float(format(cv_test_ar2[2],'.3f')),float(format(cv_test_ar2[3],'.3f')),float(format(cv_test_ar2[4],'.3f')),float(format(cv_test_ar2[5],'.3f')),float(format(cv_test_ar2[6],'.3f')),float(format(cv_test_ar2[7],'.3f')),float(format(cv_test_ar2[8],'.3f')),float(format(cv_test_ar2[9],'.3f')),float(format(cv_test_ar2_m,'.3f'))]\nevaluation2.loc[r+7] = ['RF Regression','Test mae',float(format(-cv_test_mae[0],'.3f')),float(format(-cv_test_mae[1],'.3f')),float(format(-cv_test_mae[2],'.3f')),float(format(-cv_test_mae[3],'.3f')),float(format(-cv_test_mae[4],'.3f')),float(format(-cv_test_mae[5],'.3f')),float(format(-cv_test_mae[6],'.3f')),float(format(-cv_test_mae[7],'.3f')),float(format(-cv_test_mae[8],'.3f')),float(format(-cv_test_mae[9],'.3f')),float(format(-cv_test_mae_m,'.3f')) ]\nevaluation.sort_values(by = 'R-squared (test)', ascending=False)","252daaff":"pickle.dump(complex_model_1, open('fprc_r_rf.pkl','wb'))","f8f221ae":"# Print the predicted and actual value for the test set\nRF_y_test_prediction= complex_model_1.predict(X_test)\nnp.savetxt('RF_test_prediction.csv', np.exp(RF_y_test_prediction) , delimiter=',', fmt='%s')\nnp.savetxt('RF_test_actual.csv', np.exp(y_test), delimiter=',', fmt='%s')\n\n# Print the predicted and actual value for the traing set\nRF_y_train_prediction= complex_model_1.predict(X_train)\nnp.savetxt('RF_train_prediction.csv', np.exp(RF_y_train_prediction), delimiter=',', fmt='%s')\nnp.savetxt('RF_train_actual.csv', np.exp(y_train), delimiter=',', fmt='%s')\n\nX_standardized = scaler.transform(X)\nRF_y_pred_entire_data = complex_model_1.predict(X_standardized)\nnp.savetxt('RF_entire_prediction.csv', np.exp(RF_y_pred_entire_data), delimiter=',', fmt='%s')\nnp.savetxt('RF_entire_actual.csv', np.exp(y), delimiter=',', fmt='%s')\n\nimport matplotlib.pyplot as plt\nplt.plot(y, RF_y_pred_entire_data,  'ro')\nplt.ylabel('Predicted data')\nplt.xlabel('Actual data')\nplt.show()\n\n\nfeatures = list(X.columns.values)\nimportances = complex_model_1.feature_importances_\nimport numpy as np\nindices = np.argsort(importances)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='c', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()\n\nprint(importances)","a5cb3af0":"RF_model=complex_model_1\nfrom sklearn.inspection import permutation_importance\nr = permutation_importance(RF_model, X_test, y_test,n_repeats=50,random_state=0)\n#if r.importances_mean[i] - 2 * r.importances_std[i] > 0:\nfor i in r.importances_mean.argsort()[::-1]:\n  print(f\"{features[i]:<20}\"\n  f\"{r.importances_mean[i]:.3f}\"\n  f\" +\/- {r.importances_std[i]:.3f}\")","76e9572f":"# Extract single tree\nestimator = RF_model.estimators_[5]\n\nfrom sklearn.tree import export_graphviz\n# Export as dot file\nexport_graphviz(estimator, out_file='tree.dot', \n                feature_names = features2,\n                class_names = features2,\n                rounded = True, proportion = False, \n                precision = 2, filled = True)\n\n# Convert to png using system command (requires Graphviz)\nfrom subprocess import call\ncall(['dot', '-Tpng', 'tree.dot', '-o', 'tree.png', '-Gdpi=300'])\n\n# Display in jupyter notebook\nfrom IPython.display import Image\nImage(filename = 'tree.png')\n","8f2eb2a2":"importances","00a4f542":"print(\"For XGBoost regression\")\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nimport xgboost as xgb\nfrom xgboost import plot_importance\ncomplex_model_1 = xgb.XGBRegressor(n_estimators=100, learning_rate=0.16, gamma=0, subsample=0.75,\n                           colsample_bytree=1, max_depth=7)\n\ncomplex_model_1.fit(X_train, y_train)\n# testing=pd.read_csv('reza_06NOV.csv');\npred2=complex_model_1.predict(X_test)\n\n\n\npred = complex_model_1.predict(X_test)\nrmse_train = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_train), y_train)),'.3f'))\nr2_train = float(format(complex_model_1.score(X_train, y_train),'.3f'))\nar2_train = float(format(adjustedR2(complex_model_1.score(X_train, y_train),X_train.shape[0],len(features)),'.3f'))\nmae_train=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_train), y_train)),'.3f'))\n\nrmse_test = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_test), y_test)),'.3f'))\nr2_test = float(format(complex_model_1.score(X_test, y_test),'.3f'))\nar2_test = float(format(adjustedR2(complex_model_1.score(X_test, y_test),X_test.shape[0],len(features)),'.3f'))\nmae_test=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_test), y_test)),'.3f'))\n\ncv = float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10).mean(),'.3f'))\n\ncv_train_rmse=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error')\ncv_train_rmse_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error').mean(),'.3f'))\n\ncv_train_r2=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2')\ncv_train_r2_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),'.3f'))\n\ncv_train_ar2=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2'),X_train.shape[0],len(features))\ncv_train_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),X_train.shape[0],len(features))\n\ncv_train_mae=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error')\ncv_train_mae_m=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error').mean()\n\ncv_test_rmse=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error')\ncv_test_rmse_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error').mean()\n\ncv_test_r2=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2')\ncv_test_r2_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean()\n\ncv_test_ar2=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2'),X_test.shape[0],len(features))\ncv_test_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean(),X_test.shape[0],len(features))\n\ncv_test_mae=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error')\ncv_test_mae_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error').mean()\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['XGBOOST Regression','All features',rmse_train,r2_train,ar2_train,mae_train,rmse_test,r2_test,ar2_test,mae_test,cv]\nevaluation.sort_values(by = '10-Fold Cross Validation', ascending=False)\n\nr = evaluation2.shape[0]\nevaluation2.loc[r] = ['XgBoost Regression','Train RMSE',float(format(-cv_train_rmse[0],'.3f')),float(format(-cv_train_rmse[1],'.3f')),float(format(-cv_train_rmse[2],'.3f')),float(format(-cv_train_rmse[3],'.3f')),float(format(-cv_train_rmse[4],'.3f')),float(format(-cv_train_rmse[5],'.3f')),float(format(-cv_train_rmse[6],'.3f')),float(format(-cv_train_rmse[7],'.3f')),float(format(-cv_train_rmse[8],'.3f')),float(format(-cv_train_rmse[9],'.3f')),float(format(-cv_train_rmse_m,'.3f'))]\nevaluation2.loc[r+1] = ['XgBoost Regression','Train R2',float(format(cv_train_r2[0],'.3f')),float(format(cv_train_r2[1],'.3f')),float(format(cv_train_r2[2],'.3f')),float(format(cv_train_r2[3],'.3f')),float(format(cv_train_r2[4],'.3f')),float(format(cv_train_r2[5],'.3f')),float(format(cv_train_r2[6],'.3f')),float(format(cv_train_r2[7],'.3f')),float(format(cv_train_r2[8],'.3f')),float(format(cv_train_r2[9],'.3f')),float(format(cv_train_r2_m,'.3f'))]\nevaluation2.loc[r+2] = ['XgBoost Regression','Train ar2',float(format(cv_train_ar2[0],'.3f')),float(format(cv_train_ar2[1],'.3f')),float(format(cv_train_ar2[2],'.3f')),float(format(cv_train_ar2[3],'.3f')),float(format(cv_train_ar2[4],'.3f')),float(format(cv_train_ar2[5],'.3f')),float(format(cv_train_ar2[6],'.3f')),float(format(cv_train_ar2[7],'.3f')),float(format(cv_train_ar2[8],'.3f')),float(format(cv_train_ar2[9],'.3f')),float(format(cv_train_ar2_m,'.3f'))]\nevaluation2.loc[r+3] = ['XgBoost Regression','Train mae',float(format(-cv_train_mae[0],'.3f')),float(format(-cv_train_mae[1],'.3f')),float(format(-cv_train_mae[2],'.3f')),float(format(-cv_train_mae[3],'.3f')),float(format(-cv_train_mae[4],'.3f')),float(format(-cv_train_mae[5],'.3f')),float(format(-cv_train_mae[6],'.3f')),float(format(-cv_train_mae[7],'.3f')),float(format(-cv_train_mae[8],'.3f')),float(format(-cv_train_mae[9],'.3f')),float(format(-cv_train_mae_m,'.3f'))]\nevaluation2.loc[r+4] = ['XgBoost Regression','Test RMSE',float(format(-cv_test_rmse[0],'.3f')),float(format(-cv_test_rmse[1],'.3f')),float(format(-cv_test_rmse[2],'.3f')),float(format(-cv_test_rmse[3],'.3f')),float(format(-cv_test_rmse[4],'.3f')),float(format(-cv_test_rmse[5],'.3f')),float(format(-cv_test_rmse[6],'.3f')),float(format(-cv_test_rmse[7],'.3f')),float(format(-cv_test_rmse[8],'.3f')),float(format(-cv_test_rmse[9],'.3f')),float(format(-cv_test_rmse_m,'.3f'))]\nevaluation2.loc[r+5] = ['XgBoost Regression','Test R2',float(format(cv_test_r2[0],'.3f')),float(format(cv_test_r2[1],'.3f')),float(format(cv_test_r2[2],'.3f')),float(format(cv_test_r2[3],'.3f')),float(format(cv_test_r2[4],'.3f')),float(format(cv_test_r2[5],'.3f')),float(format(cv_test_r2[6],'.3f')),float(format(cv_test_r2[7],'.3f')),float(format(cv_test_r2[8],'.3f')),float(format(cv_test_r2[9],'.3f')),float(format(cv_test_r2_m,'.3f'))]\nevaluation2.loc[r+6] = ['XgBoost Regression','Test ar2',float(format(cv_test_ar2[0],'.3f')),float(format(cv_test_ar2[1],'.3f')),float(format(cv_test_ar2[2],'.3f')),float(format(cv_test_ar2[3],'.3f')),float(format(cv_test_ar2[4],'.3f')),float(format(cv_test_ar2[5],'.3f')),float(format(cv_test_ar2[6],'.3f')),float(format(cv_test_ar2[7],'.3f')),float(format(cv_test_ar2[8],'.3f')),float(format(cv_test_ar2[9],'.3f')),float(format(cv_test_ar2_m,'.3f'))]\nevaluation2.loc[r+7] = ['XgBoost Regression','Test mae',float(format(-cv_test_mae[0],'.3f')),float(format(-cv_test_mae[1],'.3f')),float(format(-cv_test_mae[2],'.3f')),float(format(-cv_test_mae[3],'.3f')),float(format(-cv_test_mae[4],'.3f')),float(format(-cv_test_mae[5],'.3f')),float(format(-cv_test_mae[6],'.3f')),float(format(-cv_test_mae[7],'.3f')),float(format(-cv_test_mae[8],'.3f')),float(format(-cv_test_mae[9],'.3f')),float(format(-cv_test_mae_m,'.3f')) ]\nevaluation.sort_values(by = 'R-squared (test)', ascending=False)","58f2dd90":"pickle.dump(complex_model_1, open('fprc_r_xb.pkl','wb'))","12868067":"# Print the predicted and actual value for the test set\nXgBoost_y_test_prediction= complex_model_1.predict(X_test)\nnp.savetxt('XgBoost_test_prediction.csv', np.exp(XgBoost_y_test_prediction) , delimiter=',', fmt='%s')\nnp.savetxt('XgBoost_test_actual.csv', np.exp(y_test), delimiter=',', fmt='%s')\n\n# Print the predicted and actual value for the traing set\nXgBoost_y_train_prediction= complex_model_1.predict(X_train)\nnp.savetxt('XgBoost_train_prediction.csv', np.exp(XgBoost_y_train_prediction), delimiter=',', fmt='%s')\nnp.savetxt('XgBoost_train_actual.csv', np.exp(y_train), delimiter=',', fmt='%s')\n\nX_standardized = scaler.transform(X)\nXgBoost_y_pred_entire_data = complex_model_1.predict(X_standardized)\nnp.savetxt('XgBoost_entire_prediction.csv', np.exp(XgBoost_y_pred_entire_data), delimiter=',', fmt='%s')\nnp.savetxt('XgBoost_entire_actual.csv', np.exp(y), delimiter=',', fmt='%s')\n\nimport matplotlib.pyplot as plt\nplt.plot(y, XgBoost_y_pred_entire_data,  'ro')\nplt.ylabel('Predicted data')\nplt.xlabel('Actual data')\nplt.show()\n\n\nfeatures = list(X.columns.values)\nimportances = complex_model_1.feature_importances_\nimport numpy as np\nindices = np.argsort(importances)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()\n\nprint(importances)\n","c3166f0c":"from sklearn.ensemble import AdaBoostRegressor\nprint(\"For Adaboost regression\")\ncomplex_model_1 = AdaBoostRegressor(random_state=30, base_estimator=KNeighborsRegressor(n_neighbors=3) ,n_estimators=100)\ncomplex_model_1.fit(X_train, y_train)\n\n\n\n\n# svc = RandomForestClassifier(max_depth=2, random_state=0)\n# clf = AdaBoostClassifier(n_estimators=500,base_estimator=svc, random_state=43)\n# clf.fit(X_train, y_train)\n\n\npred = complex_model_1.predict(X_test)\nrmse_train = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_train), y_train)),'.3f'))\nr2_train = float(format(complex_model_1.score(X_train, y_train),'.3f'))\nar2_train = float(format(adjustedR2(complex_model_1.score(X_train, y_train),X_train.shape[0],len(features)),'.3f'))\nmae_train=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_train), y_train)),'.3f'))\n\nrmse_test = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_test), y_test)),'.3f'))\nr2_test = float(format(complex_model_1.score(X_test, y_test),'.3f'))\nar2_test = float(format(adjustedR2(complex_model_1.score(X_test, y_test),X_test.shape[0],len(features)),'.3f'))\nmae_test=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_test), y_test)),'.3f'))\n\ncv = float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10).mean(),'.3f'))\n\ncv_train_rmse=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error')\ncv_train_rmse_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error').mean(),'.3f'))\n\ncv_train_r2=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2')\ncv_train_r2_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),'.3f'))\n\ncv_train_ar2=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2'),X_train.shape[0],len(features))\ncv_train_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),X_train.shape[0],len(features))\n\ncv_train_mae=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error')\ncv_train_mae_m=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error').mean()\n\ncv_test_rmse=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error')\ncv_test_rmse_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error').mean()\n\ncv_test_r2=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2')\ncv_test_r2_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean()\n\ncv_test_ar2=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2'),X_test.shape[0],len(features))\ncv_test_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean(),X_test.shape[0],len(features))\n\ncv_test_mae=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error')\ncv_test_mae_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error').mean()\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['ADABOOST Regression','All features',rmse_train,r2_train,ar2_train,mae_train,rmse_test,r2_test,ar2_test,mae_test,cv]\nevaluation.sort_values(by = '10-Fold Cross Validation', ascending=False)\n\nr = evaluation2.shape[0]\nevaluation2.loc[r] = ['AdaBoost Regression','Train RMSE',float(format(-cv_train_rmse[0],'.3f')),float(format(-cv_train_rmse[1],'.3f')),float(format(-cv_train_rmse[2],'.3f')),float(format(-cv_train_rmse[3],'.3f')),float(format(-cv_train_rmse[4],'.3f')),float(format(-cv_train_rmse[5],'.3f')),float(format(-cv_train_rmse[6],'.3f')),float(format(-cv_train_rmse[7],'.3f')),float(format(-cv_train_rmse[8],'.3f')),float(format(-cv_train_rmse[9],'.3f')),float(format(-cv_train_rmse_m,'.3f'))]\nevaluation2.loc[r+1] = ['AdaBoost Regression','Train R2',float(format(cv_train_r2[0],'.3f')),float(format(cv_train_r2[1],'.3f')),float(format(cv_train_r2[2],'.3f')),float(format(cv_train_r2[3],'.3f')),float(format(cv_train_r2[4],'.3f')),float(format(cv_train_r2[5],'.3f')),float(format(cv_train_r2[6],'.3f')),float(format(cv_train_r2[7],'.3f')),float(format(cv_train_r2[8],'.3f')),float(format(cv_train_r2[9],'.3f')),float(format(cv_train_r2_m,'.3f'))]\nevaluation2.loc[r+2] = ['AdaBoost Regression','Train ar2',float(format(cv_train_ar2[0],'.3f')),float(format(cv_train_ar2[1],'.3f')),float(format(cv_train_ar2[2],'.3f')),float(format(cv_train_ar2[3],'.3f')),float(format(cv_train_ar2[4],'.3f')),float(format(cv_train_ar2[5],'.3f')),float(format(cv_train_ar2[6],'.3f')),float(format(cv_train_ar2[7],'.3f')),float(format(cv_train_ar2[8],'.3f')),float(format(cv_train_ar2[9],'.3f')),float(format(cv_train_ar2_m,'.3f'))]\nevaluation2.loc[r+3] = ['AdaBoost Regression','Train mae',float(format(-cv_train_mae[0],'.3f')),float(format(-cv_train_mae[1],'.3f')),float(format(-cv_train_mae[2],'.3f')),float(format(-cv_train_mae[3],'.3f')),float(format(-cv_train_mae[4],'.3f')),float(format(-cv_train_mae[5],'.3f')),float(format(-cv_train_mae[6],'.3f')),float(format(-cv_train_mae[7],'.3f')),float(format(-cv_train_mae[8],'.3f')),float(format(-cv_train_mae[9],'.3f')),float(format(-cv_train_mae_m,'.3f'))]\nevaluation2.loc[r+4] = ['AdaBoost Regression','Test RMSE',float(format(-cv_test_rmse[0],'.3f')),float(format(-cv_test_rmse[1],'.3f')),float(format(-cv_test_rmse[2],'.3f')),float(format(-cv_test_rmse[3],'.3f')),float(format(-cv_test_rmse[4],'.3f')),float(format(-cv_test_rmse[5],'.3f')),float(format(-cv_test_rmse[6],'.3f')),float(format(-cv_test_rmse[7],'.3f')),float(format(-cv_test_rmse[8],'.3f')),float(format(-cv_test_rmse[9],'.3f')),float(format(-cv_test_rmse_m,'.3f'))]\nevaluation2.loc[r+5] = ['AdaBoost Regression','Test R2',float(format(cv_test_r2[0],'.3f')),float(format(cv_test_r2[1],'.3f')),float(format(cv_test_r2[2],'.3f')),float(format(cv_test_r2[3],'.3f')),float(format(cv_test_r2[4],'.3f')),float(format(cv_test_r2[5],'.3f')),float(format(cv_test_r2[6],'.3f')),float(format(cv_test_r2[7],'.3f')),float(format(cv_test_r2[8],'.3f')),float(format(cv_test_r2[9],'.3f')),float(format(cv_test_r2_m,'.3f'))]\nevaluation2.loc[r+6] = ['AdaBoost Regression','Test ar2',float(format(cv_test_ar2[0],'.3f')),float(format(cv_test_ar2[1],'.3f')),float(format(cv_test_ar2[2],'.3f')),float(format(cv_test_ar2[3],'.3f')),float(format(cv_test_ar2[4],'.3f')),float(format(cv_test_ar2[5],'.3f')),float(format(cv_test_ar2[6],'.3f')),float(format(cv_test_ar2[7],'.3f')),float(format(cv_test_ar2[8],'.3f')),float(format(cv_test_ar2[9],'.3f')),float(format(cv_test_ar2_m,'.3f'))]\nevaluation2.loc[r+7] = ['AdaBoost Regression','Test mae',float(format(-cv_test_mae[0],'.3f')),float(format(-cv_test_mae[1],'.3f')),float(format(-cv_test_mae[2],'.3f')),float(format(-cv_test_mae[3],'.3f')),float(format(-cv_test_mae[4],'.3f')),float(format(-cv_test_mae[5],'.3f')),float(format(-cv_test_mae[6],'.3f')),float(format(-cv_test_mae[7],'.3f')),float(format(-cv_test_mae[8],'.3f')),float(format(-cv_test_mae[9],'.3f')),float(format(-cv_test_mae_m,'.3f')) ]\nevaluation.sort_values(by = 'R-squared (test)', ascending=False)","05a53af4":"pickle.dump(complex_model_1, open('fprc_r_ab.pkl','wb'))","5e7fbe75":"# Print the predicted and actual value for the test set\nAdaBoost_y_test_prediction= complex_model_1.predict(X_test)\nnp.savetxt('AdaBoost_test_prediction.csv', np.exp(AdaBoost_y_test_prediction) , delimiter=',', fmt='%s')\nnp.savetxt('AdaBoost_test_actual.csv', np.exp(y_test), delimiter=',', fmt='%s')\n\n# Print the predicted and actual value for the traing set\nAdaBoost_y_train_prediction= complex_model_1.predict(X_train)\nnp.savetxt('AdaBoost_train_prediction.csv', np.exp(AdaBoost_y_train_prediction), delimiter=',', fmt='%s')\nnp.savetxt('AdaBoost_train_actual.csv', np.exp(y_train), delimiter=',', fmt='%s')\n\nX_standardized = scaler.transform(X)\nAdaBoost_y_pred_entire_data = complex_model_1.predict(X_standardized)\nnp.savetxt('AdaBoost_entire_prediction.csv', np.exp(AdaBoost_y_pred_entire_data), delimiter=',', fmt='%s')\nnp.savetxt('AdaBoost_entire_actual.csv', np.exp(y), delimiter=',', fmt='%s')\n\nimport matplotlib.pyplot as plt\nplt.plot(y, AdaBoost_y_pred_entire_data,  'ro')\nplt.ylabel('Predicted data')\nplt.xlabel('Actual data')\nplt.show()\n\n# features = list(X.columns.values)\n# importances = complex_model_1.feature_importances_\n# import numpy as np\n# indices = np.argsort(importances)\n# plt.title('Feature Importances')\n# plt.barh(range(len(indices)), importances[indices], color='b', align='center')\n# plt.yticks(range(len(indices)), [features[i] for i in indices])\n# plt.xlabel('Relative Importance')\n# plt.show()\n\n# print(importances)","b8035a6c":"print(\"For CatBoost regression\")\n!pip3 install catboost\nfrom catboost import CatBoostRegressor\ncomplex_model_1 = CatBoostRegressor(iterations=700,learning_rate=0.02,depth=12,eval_metric='RMSE',random_seed = 23,bagging_temperature = 0.2,od_type='Iter',\n                             metric_period = 75,\n                             od_wait=100)\n\ncomplex_model_1.fit(X_train, y_train)\n\n\npred = complex_model_1.predict(X_test)\nrmse_train = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_train), y_train)),'.3f'))\nr2_train = float(format(complex_model_1.score(X_train, y_train),'.3f'))\nar2_train = float(format(adjustedR2(complex_model_1.score(X_train, y_train),X_train.shape[0],len(features)),'.3f'))\nmae_train=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_train), y_train)),'.3f'))\n\nrmse_test = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_test), y_test)),'.3f'))\nr2_test = float(format(complex_model_1.score(X_test, y_test),'.3f'))\nar2_test = float(format(adjustedR2(complex_model_1.score(X_test, y_test),X_test.shape[0],len(features)),'.3f'))\nmae_test=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_test), y_test)),'.3f'))\n\ncv = float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10).mean(),'.3f'))\n\ncv_train_rmse=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error')\ncv_train_rmse_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error').mean(),'.3f'))\n\ncv_train_r2=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2')\ncv_train_r2_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),'.3f'))\n\ncv_train_ar2=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2'),X_train.shape[0],len(features))\ncv_train_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),X_train.shape[0],len(features))\n\ncv_train_mae=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error')\ncv_train_mae_m=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error').mean()\n\ncv_test_rmse=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error')\ncv_test_rmse_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error').mean()\n\ncv_test_r2=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2')\ncv_test_r2_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean()\n\ncv_test_ar2=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2'),X_test.shape[0],len(features))\ncv_test_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean(),X_test.shape[0],len(features))\n\ncv_test_mae=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error')\ncv_test_mae_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error').mean()\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['CATBOOST','All features',rmse_train,r2_train,ar2_train,mae_train,rmse_test,r2_test,ar2_test,mae_test,cv]\nevaluation.sort_values(by = '10-Fold Cross Validation', ascending=False)\n\nr = evaluation2.shape[0]\nevaluation2.loc[r] = ['CatBoost Regression','Train RMSE',float(format(-cv_train_rmse[0],'.3f')),float(format(-cv_train_rmse[1],'.3f')),float(format(-cv_train_rmse[2],'.3f')),float(format(-cv_train_rmse[3],'.3f')),float(format(-cv_train_rmse[4],'.3f')),float(format(-cv_train_rmse[5],'.3f')),float(format(-cv_train_rmse[6],'.3f')),float(format(-cv_train_rmse[7],'.3f')),float(format(-cv_train_rmse[8],'.3f')),float(format(-cv_train_rmse[9],'.3f')),float(format(-cv_train_rmse_m,'.3f'))]\nevaluation2.loc[r+1] = ['CatBoost Regression','Train R2',float(format(cv_train_r2[0],'.3f')),float(format(cv_train_r2[1],'.3f')),float(format(cv_train_r2[2],'.3f')),float(format(cv_train_r2[3],'.3f')),float(format(cv_train_r2[4],'.3f')),float(format(cv_train_r2[5],'.3f')),float(format(cv_train_r2[6],'.3f')),float(format(cv_train_r2[7],'.3f')),float(format(cv_train_r2[8],'.3f')),float(format(cv_train_r2[9],'.3f')),float(format(cv_train_r2_m,'.3f'))]\nevaluation2.loc[r+2] = ['CatBoost Regression','Train ar2',float(format(cv_train_ar2[0],'.3f')),float(format(cv_train_ar2[1],'.3f')),float(format(cv_train_ar2[2],'.3f')),float(format(cv_train_ar2[3],'.3f')),float(format(cv_train_ar2[4],'.3f')),float(format(cv_train_ar2[5],'.3f')),float(format(cv_train_ar2[6],'.3f')),float(format(cv_train_ar2[7],'.3f')),float(format(cv_train_ar2[8],'.3f')),float(format(cv_train_ar2[9],'.3f')),float(format(cv_train_ar2_m,'.3f'))]\nevaluation2.loc[r+3] = ['CatBoost Regression','Train mae',float(format(-cv_train_mae[0],'.3f')),float(format(-cv_train_mae[1],'.3f')),float(format(-cv_train_mae[2],'.3f')),float(format(-cv_train_mae[3],'.3f')),float(format(-cv_train_mae[4],'.3f')),float(format(-cv_train_mae[5],'.3f')),float(format(-cv_train_mae[6],'.3f')),float(format(-cv_train_mae[7],'.3f')),float(format(-cv_train_mae[8],'.3f')),float(format(-cv_train_mae[9],'.3f')),float(format(-cv_train_mae_m,'.3f'))]\nevaluation2.loc[r+4] = ['CatBoost Regression','Test RMSE',float(format(-cv_test_rmse[0],'.3f')),float(format(-cv_test_rmse[1],'.3f')),float(format(-cv_test_rmse[2],'.3f')),float(format(-cv_test_rmse[3],'.3f')),float(format(-cv_test_rmse[4],'.3f')),float(format(-cv_test_rmse[5],'.3f')),float(format(-cv_test_rmse[6],'.3f')),float(format(-cv_test_rmse[7],'.3f')),float(format(-cv_test_rmse[8],'.3f')),float(format(-cv_test_rmse[9],'.3f')),float(format(-cv_test_rmse_m,'.3f'))]\nevaluation2.loc[r+5] = ['CatBoost Regression','Test R2',float(format(cv_test_r2[0],'.3f')),float(format(cv_test_r2[1],'.3f')),float(format(cv_test_r2[2],'.3f')),float(format(cv_test_r2[3],'.3f')),float(format(cv_test_r2[4],'.3f')),float(format(cv_test_r2[5],'.3f')),float(format(cv_test_r2[6],'.3f')),float(format(cv_test_r2[7],'.3f')),float(format(cv_test_r2[8],'.3f')),float(format(cv_test_r2[9],'.3f')),float(format(cv_test_r2_m,'.3f'))]\nevaluation2.loc[r+6] = ['CatBoost Regression','Test ar2',float(format(cv_test_ar2[0],'.3f')),float(format(cv_test_ar2[1],'.3f')),float(format(cv_test_ar2[2],'.3f')),float(format(cv_test_ar2[3],'.3f')),float(format(cv_test_ar2[4],'.3f')),float(format(cv_test_ar2[5],'.3f')),float(format(cv_test_ar2[6],'.3f')),float(format(cv_test_ar2[7],'.3f')),float(format(cv_test_ar2[8],'.3f')),float(format(cv_test_ar2[9],'.3f')),float(format(cv_test_ar2_m,'.3f'))]\nevaluation2.loc[r+7] = ['CatBoost Regression','Test mae',float(format(-cv_test_mae[0],'.3f')),float(format(-cv_test_mae[1],'.3f')),float(format(-cv_test_mae[2],'.3f')),float(format(-cv_test_mae[3],'.3f')),float(format(-cv_test_mae[4],'.3f')),float(format(-cv_test_mae[5],'.3f')),float(format(-cv_test_mae[6],'.3f')),float(format(-cv_test_mae[7],'.3f')),float(format(-cv_test_mae[8],'.3f')),float(format(-cv_test_mae[9],'.3f')),float(format(-cv_test_mae_m,'.3f')) ]\nevaluation.sort_values(by = 'R-squared (test)', ascending=False)","561d935c":"pickle.dump(complex_model_1, open('fprc_r_cb.pkl','wb'))","f443b092":"# Print the predicted and actual value for the test set\nCatBoost_y_test_prediction= complex_model_1.predict(X_test)\nnp.savetxt('CatBoost_test_prediction.csv', np.exp(CatBoost_y_test_prediction) , delimiter=',', fmt='%s')\nnp.savetxt('CatBoost_test_actual.csv', np.exp(y_test), delimiter=',', fmt='%s')\n\n# Print the predicted and actual value for the traing set\nCatBoost_y_train_prediction= complex_model_1.predict(X_train)\nnp.savetxt('CatBoost_train_prediction.csv', np.exp(CatBoost_y_train_prediction), delimiter=',', fmt='%s')\nnp.savetxt('CatBoost_train_actual.csv', np.exp(y_train), delimiter=',', fmt='%s')\n\nX_standardized = scaler.transform(X)\nCatBoost_y_pred_entire_data = complex_model_1.predict(X_standardized)\nnp.savetxt('CatBoost_entire_prediction.csv', np.exp(CatBoost_y_pred_entire_data), delimiter=',', fmt='%s')\nnp.savetxt('CatBoost_entire_actual.csv', np.exp(y), delimiter=',', fmt='%s')\n\nimport matplotlib.pyplot as plt\nplt.plot(y, CatBoost_y_pred_entire_data,  'ro')\nplt.ylabel('Predicted data')\nplt.xlabel('Actual data')\nplt.show()\n\n\nfeatures = list(X.columns.values)\nimportances = complex_model_1.feature_importances_\nimport numpy as np\nindices = np.argsort(importances)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()\n\nprint(importances)\n","70da12f6":"print(\"For ANN regression\")\nfrom sklearn.neural_network import MLPRegressor\ncomplex_model_1 = MLPRegressor(random_state=43,activation='relu', max_iter=2500).fit(X_train, y_train)\npred = complex_model_1.predict(X_test)\nrmse_train = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_train), y_train)),'.3f'))\nr2_train = float(format(complex_model_1.score(X_train, y_train),'.3f'))\nar2_train = float(format(adjustedR2(complex_model_1.score(X_train, y_train),X_train.shape[0],len(features)),'.3f'))\nmae_train=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_train), y_train)),'.3f'))\n\nrmse_test = float(format(np.sqrt(metrics.mean_squared_error(complex_model_1.predict(X_test), y_test)),'.3f'))\nr2_test = float(format(complex_model_1.score(X_test, y_test),'.3f'))\nar2_test = float(format(adjustedR2(complex_model_1.score(X_test, y_test),X_test.shape[0],len(features)),'.3f'))\nmae_test=float(format((metrics.mean_absolute_error(complex_model_1.predict(X_test), y_test)),'.3f'))\n\ncv = float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10).mean(),'.3f'))\n\ncv_train_rmse=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error')\ncv_train_rmse_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_root_mean_squared_error').mean(),'.3f'))\n\ncv_train_r2=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2')\ncv_train_r2_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),'.3f'))\n\ncv_train_ar2=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2'),X_train.shape[0],len(features))\ncv_train_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='r2').mean(),X_train.shape[0],len(features))\n\ncv_train_mae=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error')\ncv_train_mae_m=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='neg_mean_absolute_error').mean()\n\ncv_test_rmse=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error')\ncv_test_rmse_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_root_mean_squared_error').mean()\n\ncv_test_r2=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2')\ncv_test_r2_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean()\n\ncv_test_ar2=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2'),X_test.shape[0],len(features))\ncv_test_ar2_m=adjustedR2(cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='r2').mean(),X_test.shape[0],len(features))\n\ncv_test_mae=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error')\ncv_test_mae_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='neg_mean_absolute_error').mean()\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['ANN Regression-1','All features',rmse_train,r2_train,ar2_train,mae_train,rmse_test,r2_test,ar2_test,mae_test,cv]\nevaluation.sort_values(by = '10-Fold Cross Validation', ascending=False)\n\nr = evaluation2.shape[0]\nevaluation2.loc[r] = ['ANN Regression','Train RMSE',float(format(-cv_train_rmse[0],'.3f')),float(format(-cv_train_rmse[1],'.3f')),float(format(-cv_train_rmse[2],'.3f')),float(format(-cv_train_rmse[3],'.3f')),float(format(-cv_train_rmse[4],'.3f')),float(format(-cv_train_rmse[5],'.3f')),float(format(-cv_train_rmse[6],'.3f')),float(format(-cv_train_rmse[7],'.3f')),float(format(-cv_train_rmse[8],'.3f')),float(format(-cv_train_rmse[9],'.3f')),float(format(-cv_train_rmse_m,'.3f'))]\nevaluation2.loc[r+1] = ['ANN Regression','Train R2',float(format(cv_train_r2[0],'.3f')),float(format(cv_train_r2[1],'.3f')),float(format(cv_train_r2[2],'.3f')),float(format(cv_train_r2[3],'.3f')),float(format(cv_train_r2[4],'.3f')),float(format(cv_train_r2[5],'.3f')),float(format(cv_train_r2[6],'.3f')),float(format(cv_train_r2[7],'.3f')),float(format(cv_train_r2[8],'.3f')),float(format(cv_train_r2[9],'.3f')),float(format(cv_train_r2_m,'.3f'))]\nevaluation2.loc[r+2] = ['ANN Regression','Train ar2',float(format(cv_train_ar2[0],'.3f')),float(format(cv_train_ar2[1],'.3f')),float(format(cv_train_ar2[2],'.3f')),float(format(cv_train_ar2[3],'.3f')),float(format(cv_train_ar2[4],'.3f')),float(format(cv_train_ar2[5],'.3f')),float(format(cv_train_ar2[6],'.3f')),float(format(cv_train_ar2[7],'.3f')),float(format(cv_train_ar2[8],'.3f')),float(format(cv_train_ar2[9],'.3f')),float(format(cv_train_ar2_m,'.3f'))]\nevaluation2.loc[r+3] = ['ANN Regression','Train mae',float(format(-cv_train_mae[0],'.3f')),float(format(-cv_train_mae[1],'.3f')),float(format(-cv_train_mae[2],'.3f')),float(format(-cv_train_mae[3],'.3f')),float(format(-cv_train_mae[4],'.3f')),float(format(-cv_train_mae[5],'.3f')),float(format(-cv_train_mae[6],'.3f')),float(format(-cv_train_mae[7],'.3f')),float(format(-cv_train_mae[8],'.3f')),float(format(-cv_train_mae[9],'.3f')),float(format(-cv_train_mae_m,'.3f'))]\nevaluation2.loc[r+4] = ['ANN Regression','Test RMSE',float(format(-cv_test_rmse[0],'.3f')),float(format(-cv_test_rmse[1],'.3f')),float(format(-cv_test_rmse[2],'.3f')),float(format(-cv_test_rmse[3],'.3f')),float(format(-cv_test_rmse[4],'.3f')),float(format(-cv_test_rmse[5],'.3f')),float(format(-cv_test_rmse[6],'.3f')),float(format(-cv_test_rmse[7],'.3f')),float(format(-cv_test_rmse[8],'.3f')),float(format(-cv_test_rmse[9],'.3f')),float(format(-cv_test_rmse_m,'.3f'))]\nevaluation2.loc[r+5] = ['ANN Regression','Test R2',float(format(cv_test_r2[0],'.3f')),float(format(cv_test_r2[1],'.3f')),float(format(cv_test_r2[2],'.3f')),float(format(cv_test_r2[3],'.3f')),float(format(cv_test_r2[4],'.3f')),float(format(cv_test_r2[5],'.3f')),float(format(cv_test_r2[6],'.3f')),float(format(cv_test_r2[7],'.3f')),float(format(cv_test_r2[8],'.3f')),float(format(cv_test_r2[9],'.3f')),float(format(cv_test_r2_m,'.3f'))]\nevaluation2.loc[r+6] = ['ANN Regression','Test ar2',float(format(cv_test_ar2[0],'.3f')),float(format(cv_test_ar2[1],'.3f')),float(format(cv_test_ar2[2],'.3f')),float(format(cv_test_ar2[3],'.3f')),float(format(cv_test_ar2[4],'.3f')),float(format(cv_test_ar2[5],'.3f')),float(format(cv_test_ar2[6],'.3f')),float(format(cv_test_ar2[7],'.3f')),float(format(cv_test_ar2[8],'.3f')),float(format(cv_test_ar2[9],'.3f')),float(format(cv_test_ar2_m,'.3f'))]\nevaluation2.loc[r+7] = ['ANN Regression','Test mae',float(format(-cv_test_mae[0],'.3f')),float(format(-cv_test_mae[1],'.3f')),float(format(-cv_test_mae[2],'.3f')),float(format(-cv_test_mae[3],'.3f')),float(format(-cv_test_mae[4],'.3f')),float(format(-cv_test_mae[5],'.3f')),float(format(-cv_test_mae[6],'.3f')),float(format(-cv_test_mae[7],'.3f')),float(format(-cv_test_mae[8],'.3f')),float(format(-cv_test_mae[9],'.3f')),float(format(-cv_test_mae_m,'.3f')) ]\nevaluation.sort_values(by = 'R-squared (test)', ascending=False)","31cb78e0":"pickle.dump(complex_model_1, open('fprc_r_ann.pkl','wb'))","63b21878":"# Print the predicted and actual value for the test set\nANN_y_test_prediction= complex_model_1.predict(X_test)\nnp.savetxt('ANN_test_prediction.csv', np.exp(ANN_y_test_prediction) , delimiter=',', fmt='%s')\nnp.savetxt('ANN_test_actual.csv', np.exp(y_test), delimiter=',', fmt='%s')\n\n# Print the predicted and actual value for the traing set\nANN_y_train_prediction= complex_model_1.predict(X_train)\nnp.savetxt('ANN_train_prediction.csv', np.exp(ANN_y_train_prediction), delimiter=',', fmt='%s')\nnp.savetxt('ANN_train_actual.csv', np.exp(y_train), delimiter=',', fmt='%s')\n\nX_standardized = scaler.transform(X)\nANN_y_pred_entire_data = complex_model_1.predict(X_standardized)\nnp.savetxt('ANN_entire_prediction.csv', np.exp(ANN_y_pred_entire_data), delimiter=',', fmt='%s')\nnp.savetxt('ANN_entire_actual.csv', np.exp(y), delimiter=',', fmt='%s')\n\nimport matplotlib.pyplot as plt\nplt.plot(y, ANN_y_pred_entire_data,  'ro')\nplt.ylabel('Predicted data')\nplt.xlabel('Actual data')\nplt.show()\n\n\n# features = list(X.columns.values)\n# importances = complex_model_1.coefs_\n# import numpy as np\n# indices = np.argsort(importances)\n# plt.title('Feature Importances')\n# plt.barh(range(len(indices)), importances[indices], color='b', align='center')\n# plt.yticks(range(len(indices)), [features[i] for i in indices])\n# plt.xlabel('Relative Importance')\n# plt.show()\n\n# print(importances)\n\n","c541cba1":"evaluation.to_csv(\"model_results_with_cat.csv\")\nevaluation2.to_csv(\"cross_val_results_with_cat.csv\")","79ddfa16":"## Support Vector Regression","cdc2a42d":"## Linear Regression","b027f62b":"# Data Exploration","57297f49":"## XG Boost Regression","8a1e4ed3":"## Decision Tree Regression","967fdbaa":"## Lasso Regression","ad3ea093":"# Steps Involved : Data Exploration, Model Fitting, Best Model Selection, Inference","accf0b1a":"# Checking the data types, If string exists it should be converted into numerical values","53ce5d8f":"## Random Forest Regression","42177d4e":"# ANN","67d11cc2":"## CAT BOOST REGRESSION","bd3b4d21":"For permutation feature importance for Random Forest","3143e367":"## K- nearest Neighbors","9d48f93b":"For genarating tree for Random Forest","95d6f65c":"## Ridge Regression","059656b6":"## ADABOOST REGRESSION","12184d8f":"Spliiting the data into training and test set\n"}}