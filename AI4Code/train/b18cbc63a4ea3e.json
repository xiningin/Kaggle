{"cell_type":{"9e730d90":"code","da5f5b6c":"code","23683644":"code","f7e44b56":"code","a4ce96bc":"code","fbc716a3":"code","df351df0":"code","ecec29cb":"code","a437688d":"code","5e709c21":"code","23be5176":"code","36b437d3":"code","08a963d9":"code","15d4596a":"code","695b5e8d":"markdown","c4c8e4ca":"markdown","e9ba8b03":"markdown","c14794a5":"markdown","f4f1df52":"markdown"},"source":{"9e730d90":"import json\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.multiclass import OneVsRestClassifier","da5f5b6c":"data = pd.read_json('..\/input\/train.json')\ndata.head()","23683644":"data.info()","f7e44b56":"# Bar Plot of various cusisines appearance frequency \ny = data['cuisine'].value_counts()\nx = y\/y.sum() * 100\ny = y.index\nsns.barplot(y, x, data=data, palette=\"BuGn_r\")\nplt.xticks(rotation=-60)","a4ce96bc":"# The most popular ingredients\nn = 6714 # total ingredients\nframe= pd.DataFrame(Counter([i for sublist in data.ingredients for i in sublist]).most_common(n))\nframe = frame.head(10)\nframe","fbc716a3":"sns.barplot(frame[0], frame[1], palette=\"gist_heat\")\nplt.xticks(rotation=-60)\nplt.show()","df351df0":"train = json.load(open('..\/input\/train.json'))\ntest = json.load(open('..\/input\/test.json'))\ntrain_doc = [\" \".join(doc['ingredients']).lower() for doc in train]\ntest_doc = [\" \".join(doc['ingredients']).lower() for doc in test]\n\n# Label Encoding of y - the target kinds of cuisine\ny_train = [doc['cuisine'] for doc in train]\nlb = LabelEncoder()\ny_train = lb.fit_transform(y_train)\ny_train","ecec29cb":"# TFIDF statiscic applying to the data - resulting in sparse matrix\ntfidf = TfidfVectorizer(binary=True)\nX_train = tfidf.fit_transform(train_doc)\nX_test = tfidf.transform(test_doc)\nX_train","a437688d":"#Random Forest\n#rf = RandomForestClassifier(n_estimators=100)\n#model_rf = OneVsRestClassifier(rf, n_jobs=-1)\n#model_rf.fit(X_train, y_train)","5e709c21":"#Support Vector Machine\nsvc = SVC(C=100, gamma=0.9, coef0=1, tol=0.001, decision_function_shape=None)\nmodel_svc = OneVsRestClassifier(svc, n_jobs=1)\nmodel_svc.fit(X_train, y_train)","23be5176":"#Perceptron\n#p= Perceptron()\n#model_p = OneVsRestClassifier(p, n_jobs=1)\n#model_p.fit(X_train, y_train)","36b437d3":"#Decision Tree\n#df = DecisionTreeClassifier()\n#model_df = OneVsRestClassifier(df, n_jobs=-1)\n#model_df.fit(X_train, y_train)","08a963d9":"# Predictions based on supported vector machine\ny_test = model_svc.predict(X_test)\nprint(y_test)\ny_pred = lb.inverse_transform(y_test)\nprint(y_pred)\n# Submission\ntest_id = [doc['id'] for doc in test]\nsub = pd.DataFrame({'id': test_id, 'cuisine': y_pred}, columns=['id', 'cuisine'])\nsub.to_csv('svm_output.csv', index=False)","15d4596a":"# Saving results to file\ntest_id = [doc['id'] for doc in test]\nsub = pd.DataFrame({'id': test_id, 'cuisine': y_pred}, columns=['id', 'cuisine'])\nsub.to_csv('svm_output.csv', index=False)","695b5e8d":"Importing libraries","c4c8e4ca":"Basic information, checking if there is missing data","e9ba8b03":"Basic visualizations","c14794a5":"Dataset machine learning preprocessing","f4f1df52":"Models:"}}