{"cell_type":{"99c58e22":"code","f98f90f4":"code","c8d97671":"code","dbc65c8d":"code","e74fcb02":"code","9b59c412":"code","a3c26ff2":"code","943de6ad":"code","e5f48b78":"code","816f3c39":"code","55ddbe8f":"code","3448ef56":"code","890abd82":"code","379ae15f":"code","c6c44836":"code","050cbcd5":"code","5293a46b":"code","a350bc90":"code","7ee4ef5a":"code","96517d61":"code","62b9fb3d":"code","64df151e":"code","f4c2feca":"code","94369148":"markdown","4b233b1c":"markdown","80c93a41":"markdown","10f0e7a1":"markdown","39135516":"markdown","0faa06ea":"markdown","0274bc33":"markdown","e44b5f5b":"markdown","3e5fed60":"markdown","361e26a4":"markdown","161f5826":"markdown","96bcec63":"markdown","c0ce101a":"markdown","72c89680":"markdown","0554e2bf":"markdown","c1a3d5d1":"markdown","ce7a521e":"markdown","016a0641":"markdown"},"source":{"99c58e22":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\n\npd.set_option('max_columns', 100)\nplt.style.use('ggplot')\ncolor_pal = plt.rcParams['axes.prop_cycle'].by_key()['color']","f98f90f4":"!ls -lh ..\/input\/nfl-big-data-bowl-2022\/","c8d97671":"# Loading in game, players and plays files\ngames = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/games.csv')\nplayers = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/players.csv')\nplays = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/plays.csv')\n\nplays = plays.merge(games, on=['gameId'],\n            how='left',\n            validate='m:1')","dbc65c8d":"players['Position'].value_counts() \\\n    .sort_values(ascending=True) \\\n    .plot(kind='barh', figsize=(10, 15\n                               ),\n         title='Count of Players by Position')\nplt.show()","e74fcb02":"plays['specialTeamsPlayType'].value_counts().to_frame()","9b59c412":"(plays.query('specialTeamsPlayType == \"Kickoff\"')['specialTeamsResult'] \\\n    .value_counts() \/ len(plays.query('specialTeamsPlayType == \"Kickoff\"'))) \\\n    .to_frame()","a3c26ff2":"(plays.query('specialTeamsPlayType == \"Punt\"')['specialTeamsResult'] \\\n    .value_counts() \/ len(plays.query('specialTeamsPlayType == \"Punt\"'))) \\\n    .to_frame()","943de6ad":"def add_seconds_into_game(df):\n    \"\"\"\n    Takes in a dataframe with \"gameClock\" column.\n    \n    Adds secondsOfGameTime column\n    \"\"\"\n    game_clock_minutes = df['gameClock'].str.split(':', expand=True)[0].astype('int')\n    game_clock_sec = df['gameClock'].str.split(':', expand=True)[1].astype('int')\n    gameClockSeconds = game_clock_minutes * 60 + game_clock_sec\n    df['secondsOfGameTime'] = (df['quarter'] * 15 * 60) - gameClockSeconds\n    return df\n\ndef process_play_data(plays, players):\n    plays['returnTeam'] = plays \\\n        .apply(lambda row: row['visitorTeamAbbr'] if row['possessionTeam'] == row['homeTeamAbbr'] else row['homeTeamAbbr'],\n                                                        axis=1)\n    \n    # Calculate the absolute yardline relative to the possession team.\n    plays['yardlineNumberAbs'] = plays['yardlineNumber']\n    plays.loc[plays['yardlineSide'] == plays['returnTeam'],\n              'yardlineNumberAbs'] = \\\n        (50 - plays.loc[plays['yardlineSide'] == plays['returnTeam']]['yardlineNumberAbs']) + 50\n\n    # Mapping Players to positions\n    player_pos_map = players.set_index('nflId')['Position'].to_dict()\n    plays['kickerPos'] = plays['kickerId'].map(player_pos_map)\n    # Expand \n    plays['returnerId1'] = plays['returnerId'].str.split(';', expand=True)[0]\n    plays['returnerId2'] = plays['returnerId'].str.split(';', expand=True)[1]\n    \n    # Seconds within game\n    plays = add_seconds_into_game(plays)\n    \n    # Team Scores and score differential.\n    plays['preSnapPossessionTeamScore'] = plays.apply(lambda row: row['preSnapHomeScore'] if row['possessionTeam'] == row['homeTeamAbbr'] else row['preSnapVisitorScore'], axis=1)\n    plays['preSnapReturnTeamScore'] = plays.apply(lambda row: row['preSnapVisitorScore'] if row['possessionTeam'] == row['homeTeamAbbr'] else row['preSnapHomeScore'], axis=1)\n    plays['preSnapScoreDifferential'] = plays['preSnapPossessionTeamScore'] - plays['preSnapReturnTeamScore']\n    \n    return plays\n\nplays = process_play_data(plays, players)","e5f48b78":"plays_punt_fc_r = plays.query('specialTeamsPlayType == \"Punt\" and specialTeamsResult in (\"Return\", \"Fair Catch\")').copy()\nplays_punt_fc_r = plays_punt_fc_r.reset_index(drop=True)\n\nfig, ax = plt.subplots(figsize=(15, 8))\nplays_punt_fc_r.groupby(['specialTeamsResult'])['yardlineNumberAbs'] \\\n    .plot(kind='hist', bins=30, alpha=0.5, ax=ax)\nax.set_title('Punt Yardline by Result', fontsize=20)\nplt.legend()\nplt.show()","816f3c39":"plays_punt_fc_r.query('quarter <= 4') \\\n    .groupby(['quarter','specialTeamsResult']).size().unstack() \\\n    .plot(kind='bar',\n          figsize=(15, 6),\n          title='Fair Catch vs. Returned by Quarter',\n          stacked=True)\nplt.show()","55ddbe8f":"returned_punts = plays \\\n    .query('specialTeamsPlayType == \"Punt\" and specialTeamsResult == \"Return\"') \\\n    .query('kickReturnYardage == kickReturnYardage') \\\n    .copy() \\\n    .reset_index(drop=True)\n\nax = returned_punts['kickReturnYardage'] \\\n    .plot(kind='hist', bins=60, figsize=(15, 5),\n          title='Distribution of Punt Return Yards', color=color_pal[2])\nax.axvline(returned_punts['kickReturnYardage'].median(), color='black', ls='--')\nplt.show()","3448ef56":"player_pos_map = players.set_index('nflId')['Position'].to_dict()\nreturned_punt_nopenalty = returned_punts.loc[returned_punts['penaltyCodes'].isna()] \\\n    .reset_index(drop=True)\nreturned_punt_nopenalty['returner1Pos'] = returned_punt_nopenalty['returnerId1'].astype('int').map(player_pos_map)\nreturned_punt_nopenalty['returner1Pos'].value_counts()","890abd82":"FEATURES = ['kickerId',\n            'possessionTeam',\n            'returnTeam',\n            'yardsToGo',\n            'yardlineNumberAbs',\n            'returnerId',\n            'returner1Pos',\n            'secondsOfGameTime',\n            'preSnapPossessionTeamScore',\n            'preSnapReturnTeamScore',\n            'preSnapScoreDifferential']\n\nTARGET = ['kickReturnYardage']\n\nnumeric_features = ['yardsToGo','yardlineNumberAbs','secondsOfGameTime',\n                    'preSnapPossessionTeamScore','preSnapReturnTeamScore',\n                    'preSnapScoreDifferential']\n\ndf = returned_punt_nopenalty.copy()\nX = df[FEATURES].copy()\ny = df[TARGET].copy()\noof = df[['gameId','playId'] + TARGET].copy()\nX_num = X[numeric_features].values\ny = y.values","379ae15f":"from sklearn.linear_model import ElasticNetCV\n\nreg = ElasticNetCV()\nreg.fit(X_num, y.reshape(-1))\n\n# Pull the coeffiencts from the model\nen_coef = pd.DataFrame(index=numeric_features,\n             data=reg.coef_,\n            columns=['coef'])","c6c44836":"en_coef.sort_values('coef')","050cbcd5":"returned_punt_nopenalty['en_pred'] = reg.predict(X_num)\nreturned_punt_nopenalty.plot(x=TARGET[0],\n                             y='en_pred',\n                             style='.',\n                             figsize=(10, 10),\n                            color=color_pal[5])","5293a46b":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n\nLEARNING_RATE = 0.001\nCAT_COLS = ['kickerId','possessionTeam','returnTeam','returnerId','returner1Pos']\n\nfor c in CAT_COLS:\n    X[c] = X[c].astype('category')\n\nkf = KFold(n_splits=5, shuffle=True)\n\nfold = 0\nbest_iters = []\nfor tr_idx, val_idx in kf.split(X, y):\n    df.loc[val_idx, 'fold'] = fold\n    X_tr = X.loc[tr_idx]\n    y_tr = y[tr_idx]\n\n    X_val = X.loc[val_idx]\n    y_val = y[val_idx]\n    reg = lgb.LGBMRegressor(n_estimators=1000,\n                            learning_rate=LEARNING_RATE,\n                            random_state=529\n                           )\n    reg.fit(X_tr, y_tr, eval_set=(X_val, y_val),\n            verbose=False,\n            early_stopping_rounds=100)\n    preds = reg.predict(X_val)\n    oof.loc[val_idx, 'pred'] = preds\n    \n    # Scoring\n    mae_score = mean_absolute_error(y_val, preds)\n    mse_score = mean_squared_error(y_val, preds)\n    best_iter = reg.best_iteration_\n    best_iters.append(best_iter)\n    print(f'Fold {fold}: MAE {mae_score:0.4f} - MSE {mse_score:0.4f} - Best Iteration {best_iter}')\n    fold += 1\n    \nbest_avg_iteration = np.mean(best_iters)\nmae_oof = mean_absolute_error(oof['kickReturnYardage'], oof['pred'])\nmse_oof = mean_squared_error(oof['kickReturnYardage'], oof['pred'])\n\nprint(f'The average best iteraction across folds is {best_avg_iteration}')\nprint(f'OOF Score MAE {mae_oof:0.2f} - MSE {mse_oof:0.2f}')","a350bc90":"reg = lgb.LGBMRegressor(n_estimators=round(best_avg_iteration),\n                        learning_rate=LEARNING_RATE)\nreg.fit(X, y)\npreds = reg.predict(X)\noof['fullfit_pred'] = reg.predict(X)\noof.plot(x='fullfit_pred', y=TARGET[0], kind='scatter',\n         figsize=(10, 10), title='Predictions vs Target for LGBMRegressor Model')","7ee4ef5a":"pd.DataFrame(index=reg.feature_name_,\n             data=reg.feature_importances_,\n            columns=['importance']).sort_values('importance') \\\n    .plot(kind='barh', title='LGBM Feature Importance', figsize=(12, 8))\nplt.legend().remove()","96517d61":"pff = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv')\npunt_pff = oof[['gameId','playId']].merge(pff, validate='1:1').copy()\n# See if punt where the punter intended\npunt_pff['puntedWhereIntended'] = punt_pff['kickDirectionIntended'] == punt_pff['kickDirectionActual']\npunt_pff['puntedWhereIntended'].value_counts()","62b9fb3d":"punt_pff['puntedWhereIntended'].value_counts() \/ punt_pff.shape[0]","64df151e":"sns.jointplot(x='snapTime', y='operationTime',\n              data=punt_pff, hue='kickType',\n              alpha=0.5, height=10)\nplt.show()","f4c2feca":"tracking2018 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2018.csv')\nmy_play = tracking2018.query('gameId == 2018090600 and playId == 2599').reset_index(drop=True).copy()","94369148":"# PFF Data Exploration","4b233b1c":"# Simple Linear Model\n\nIn this section we use a simple regression model (ElasticNet) to predict the outcome of punt plays based on the features we've created above.","80c93a41":"# Player Counts\n- What are the most common positions found in the player file?","10f0e7a1":"# Return Yardarge on Returned Punts\n- 2286 Plays","39135516":"# How to improve this model?\nIn the next section we will explore the tracking data, and features that may help improve the model score.\n- Up next I'll explore the tracking data.\n- More to come.","0faa06ea":"## Snap time vs. Operation Time","0274bc33":"# What Do we know about kickoffs?\n- 60% Touchback \/ 37% Returned","e44b5f5b":"# Processing Play Data\nTo assist in reviewing the play data we will apply some processing to add features about each play.","3e5fed60":"\n## Model Feature Importances","361e26a4":"# Big Data Bowl Data EDA\n\nThis notebook was created during a live coding session. [Check it out the stream here.](https:\/\/www.twitch.tv\/medallionstallion_)","161f5826":"# Lets model to predict return yards\nWe only want to model punt plays that do not involve a pentalty (1881 plays)\n\nPotential Features:\n- kickerId\n- possessionTeam\n- returnTeam\n- yardsToGo\n- yardlineNumberAbs\n- returnerId\n- returner1Pos\n- secondsOfGameTime\n- preSnapReturnTeamScore\n- preSnapPossessionTeamScore\n- preSnapScoreDifferential","96bcec63":"Out model on average is 6.77 yards off from the predicted target. Finally, we fit a single model on all of the training data using the average best iteration across folds.","c0ce101a":"# Play Info\n- Almost 20,000 plays.\n- 7,800 kickoffs, 6,000 Punts, 3,400 Extra points, and 2,600 Field Goals.","72c89680":"Reviewing our model coefficents we can see the `yardlineNumberAbs` and `preSnapScoreDifferential` are the most correlated with the play's outcome.","0554e2bf":"## Machine Learning Model\nNext we will use a machine learning model.\n- 5 kfold cross validation.\n- Fit a final model on the average best iteration across folds.","c1a3d5d1":"## Plot the predictions vs. Actual of the linear model","ce7a521e":"# What do we know about Punts?\n- 38% Returned, 27% Fair Catch, 13.8% Out of Bounds\n- 3,926 Punts resulted in a fair catch or return","016a0641":"## Data Overview\nIn this competition we are provided with player, game and player stats for special teams plays in the 2018-2020 NFL Seasons. We are also provided tracking data with each players position during the plays."}}