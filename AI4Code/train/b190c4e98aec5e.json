{"cell_type":{"3c14a208":"code","323f0698":"code","8a9908fe":"code","1eda374f":"code","ef102e5a":"code","ed8121a3":"code","54034e4f":"code","b9c62092":"code","f6a39715":"code","c9bfcc04":"code","88d9f9dc":"code","aebce3ab":"code","b101c41e":"code","bc3a4104":"code","faabe6b3":"code","95420b69":"code","61226ca7":"code","d9f889d2":"code","74280328":"code","22807de1":"code","89272c4f":"code","b1531917":"code","f6382bd5":"code","a2af24f9":"code","df88da10":"code","93dccc8f":"code","70f2d309":"code","075b8df5":"code","9c626369":"code","2e196bc6":"code","c0a6b6f1":"code","9bf93c14":"code","a422ff2a":"code","482928c1":"code","61d12d54":"code","b3b0d0ac":"code","8e81fbe0":"code","cceecaac":"code","29c259fb":"code","6d6ce35d":"code","46f8570f":"code","848ab343":"code","60485419":"code","e5b68886":"code","cd27f37b":"code","68e96082":"code","aca3fd02":"code","5ff12dcc":"code","48d316bc":"code","db8f0403":"code","abfa7889":"code","50208b0c":"code","7ba5c361":"code","e47257ef":"code","c0561a67":"code","4f562481":"code","1a8e5474":"code","9b0a9349":"code","b47f0ca7":"code","24afb882":"code","81f238be":"code","3fd0776c":"code","af489012":"code","f6780785":"code","80a483bb":"markdown","2feb3a57":"markdown","ba6e5254":"markdown","b288f318":"markdown","1d1e5e8c":"markdown","192b6efe":"markdown","c3543165":"markdown","f5f516fc":"markdown","c4ba6ab5":"markdown","551ccc8f":"markdown","80630e27":"markdown","a3ac3054":"markdown","c20578cd":"markdown","f91c6199":"markdown","7fa03859":"markdown","770b296f":"markdown","3142b872":"markdown","a5ff878d":"markdown","c38feb5c":"markdown","a772daf2":"markdown","a819eebe":"markdown","add2f8d5":"markdown","3a634104":"markdown","d58e70b0":"markdown"},"source":{"3c14a208":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","323f0698":"pip install openpyxl","8a9908fe":"df_Train=pd.read_excel('\/kaggle\/input\/flight-fare-prediction-mh\/Data_Train.xlsx')\ndf_Test=pd.read_excel('\/kaggle\/input\/flight-fare-prediction-mh\/Test_set.xlsx')","1eda374f":"df_Train.head()","ef102e5a":"df_Train.shape","ed8121a3":"df_Train.info()","54034e4f":"df_Train.dtypes","b9c62092":"df_Train['Date_of_Journey'] = pd.to_datetime(df_Train['Date_of_Journey'])\ndf_Train['Dep_Time'] = pd.to_datetime(df_Train['Dep_Time'])\ndf_Train['Arrival_Time'] = pd.to_datetime(df_Train['Arrival_Time'])","f6a39715":"df_Train.dtypes","c9bfcc04":"df_Train.describe()","88d9f9dc":"df_Train.columns","aebce3ab":"df_Train.duplicated()","b101c41e":"df_Train.isnull().sum()","bc3a4104":"df_Train.dropna(inplace=True)","faabe6b3":"df_Train.isnull().sum()","95420b69":"cat_cols=[]\nnum_cols=[]\nfor i in df_Train.columns:\n    if df_Train[i].dtype == 'object':\n        cat_cols.append(i)\n    else:\n        num_cols.append(i)","61226ca7":"df_Train[cat_cols]","d9f889d2":"df_Train[num_cols]","74280328":"df_Train['Journey_day'] = df_Train['Date_of_Journey'].dt.day\ndf_Train['Journey_month'] = df_Train['Date_of_Journey'].dt.month\ndf_Train['Journey_year'] = df_Train['Date_of_Journey'].dt.year","22807de1":"# remove Date_of_Journey column from df_Train\ndf_Train.drop('Date_of_Journey', axis=1, inplace=True)","89272c4f":"# Add Dep_Time_Hour and Dep_Time_Min and remove Dep_Time\n\ndf_Train['Dep_Time_Hour'] = df_Train['Dep_Time'].dt.hour\ndf_Train['Dep_Time_Min'] = df_Train['Dep_Time'].dt.minute\ndf_Train.drop('Dep_Time', inplace=True, axis=1)\ndf_Train.head()","b1531917":"# Add Arrival_Time_Hour and Arrival_Time_Min and remove Arrival_Time\n\ndf_Train['Arrival_Time_Hour'] = df_Train['Arrival_Time'].dt.hour\ndf_Train['Arrival_Time_Min'] = df_Train['Arrival_Time'].dt.minute\ndf_Train.drop('Arrival_Time', inplace=True, axis=1)\ndf_Train.head()","f6382bd5":"duration = list(df_Train['Duration'])\n\n\nfor i in range(len(duration)):\n    if len(duration[i].split(' ')) == 2:\n        pass\n    \n    else:\n        if 'h' in duration[i]:   # Check if duration contains hour\n            duration[i] = duration[i]+' 0m' # Add 0m\n        else:\n            duration[i] = '0h '+duration[i]\n    \n","a2af24f9":"df_Train['Duration'] = duration","df88da10":"def duration_hour(x):\n    return x.split(' ')[0][0:-1]\n\ndef duration_min(x):\n    return x.split(' ')[1][0:-1]","93dccc8f":"df_Train['Duration_Hour'] = df_Train['Duration'].apply(duration_hour)\ndf_Train['Duration_Min'] = df_Train['Duration'].apply(duration_min)\n","70f2d309":"df_Train['Duration_Hour'] = df_Train['Duration_Hour'].astype(int)\ndf_Train['Duration_Min'] = df_Train['Duration_Min'].astype(int)\ndf_Train.drop('Duration', inplace=True, axis=1)","075b8df5":"plt.figure(figsize=(15,10))\nplt.xticks(rotation=90)\nplt.title('Airline Count plot')\nsns.countplot(df_Train['Airline'])","9c626369":"plt.figure(figsize=(15,10))\nplt.xticks(rotation=90)\nplt.title('Airline Vs Price')\nsns.barplot(x=df_Train['Airline'], y=df_Train['Price'], data=df_Train)","2e196bc6":"plt.figure(figsize=(15,10))\nplt.xticks(rotation=90)\nplt.title('Airline Vs Price')\nsns.boxplot(x=df_Train['Airline'], y=df_Train['Price'], data=df_Train)","c0a6b6f1":"plt.figure(figsize=(15,10))\nplt.xticks(rotation=90)\nplt.title('Destination Vs Price')\nsns.boxplot(x=df_Train['Destination'], y=df_Train['Price'], data=df_Train)","9bf93c14":"plt.figure(figsize=(15,10))\nplt.xticks(rotation=90)\nplt.title('Destination Vs Price')\nsns.scatterplot(x=df_Train['Destination'], y=df_Train['Price'], data=df_Train)","a422ff2a":"plt.figure(figsize=(15,10))\nplt.xticks(rotation=90)\nplt.title('Source Vs Price')\nsns.scatterplot(x=df_Train['Source'], y=df_Train['Price'], data=df_Train)","482928c1":"plt.figure(figsize=(15,10))\nplt.xticks(rotation=90)\nplt.title('Total_Stops Vs Price')\nsns.boxplot(x=df_Train['Total_Stops'], y=df_Train['Price'], data=df_Train)","61d12d54":"plt.figure(figsize=(15,10))\nplt.xticks(rotation=90)\nplt.title('Source Vs Price')\nsns.boxplot(x=df_Train['Source'], y=df_Train['Price'], data=df_Train)","b3b0d0ac":"plt.figure(figsize=(15,10))\nplt.xticks(rotation=90)\nplt.title('Destination Vs Price')\nsns.boxplot(x=df_Train['Destination'], y=df_Train['Price'], data=df_Train)","8e81fbe0":"cat_cols","cceecaac":"df_Train['Airline'].value_counts()","29c259fb":"# As Airline is Nominal Categorical data we will perform OneHotEncoding\n\nAirline = pd.get_dummies(df_Train['Airline'], drop_first=True)","6d6ce35d":"df_Train['Source'].value_counts()","46f8570f":"# As Source is Nominal Categorical data we will perform OneHotEncoding\n\nSource = pd.get_dummies(df_Train['Source'], drop_first=True)","848ab343":"df_Train['Destination'].value_counts()","60485419":"# As Destination is Nominal Categorical data we will perform OneHotEncoding\n\nDestination=pd.get_dummies(df_Train['Destination'], drop_first=True)","e5b68886":"df_Train['Route'].value_counts()","cd27f37b":"df_Train['Route_1']=df_Train['Route'].str.split('\u2192').str[0]\ndf_Train['Route_2']=df_Train['Route'].str.split('\u2192').str[1]\ndf_Train['Route_3']=df_Train['Route'].str.split('\u2192').str[2]\ndf_Train['Route_4']=df_Train['Route'].str.split('\u2192').str[3]\ndf_Train['Route_5']=df_Train['Route'].str.split('\u2192').str[4]","68e96082":"df_Train['Route_1'].fillna('None',inplace=True)\ndf_Train['Route_2'].fillna('None',inplace=True)\ndf_Train['Route_3'].fillna('None',inplace=True)\ndf_Train['Route_4'].fillna('None',inplace=True)\ndf_Train['Route_5'].fillna('None',inplace=True)","aca3fd02":"# as we will see we have lots of features in Route , one hot encoding will not be a better option lets appply Label Encoding\n\nfrom sklearn.preprocessing import LabelEncoder\nencoder=LabelEncoder()\n\nfor i in ['Route_1', 'Route_2', 'Route_3', 'Route_4','Route_5']:\n    df_Train[i]=encoder.fit_transform(df_Train[i])","5ff12dcc":"df_Train['Total_Stops'].value_counts()","48d316bc":"dict = {\n    'non-stop':0,\n    '1 stop':1,\n    '2 stops':2,\n    '3 stops':3,\n    '4 stops':4,\n}\ndf_Train['Total_Stops'] = df_Train['Total_Stops'].map(dict)","db8f0403":"# removie this column there is no relevent infor in this col and also delete Route column\n\ndf_Train.drop(['Route','Additional_Info','Airline','Source','Destination'], inplace=True, axis=1)","abfa7889":"df_Train = pd.concat([Airline,Source,Destination,df_Train], axis=1)","50208b0c":"def plot(df,col):\n    fig,(ax1,ax2)=plt.subplots(2,1)\n    sns.distplot(df[col],ax=ax1)\n    sns.boxplot(df[col],ax=ax2)\n    \nplt.figure(figsize=(30,20))\nplot(df_Train,'Price')","7ba5c361":"df_Train['Price']=np.where(df_Train['Price']>=40000,df_Train['Price'].median(),df_Train['Price'])","e47257ef":"X = df_Train.drop('Price',axis=1)\ny = df_Train['Price']","c0561a67":"# Feature Selection using Information Gain,\n\nfrom sklearn.feature_selection import mutual_info_classif\nmutual_info_classif(X,y)","4f562481":"impo_col = pd.DataFrame(mutual_info_classif(X,y), index=X.columns)\nimpo_col","1a8e5474":"impo_col.columns=['Importance']\nimpo_col.sort_values(by='Importance',ascending=False)","9b0a9349":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","b47f0ca7":"from sklearn import metrics\n\ndef prediction(ml_model):\n    model = ml_model.fit(X_train, y_train)\n    print(\"Training Socre {}\".format(model.score(X_train, y_train)))\n    print('\\n')\n    y_prediction = model.predict(X_test)\n    print(\"Predictions are \\n {}\".format(y_prediction))\n    print('\\n')\n    r2_score=metrics.r2_score(y_test,y_prediction)\n    print('r2 score: {}'.format(r2_score))\n    print('MAE:',metrics.mean_absolute_error(y_test,y_prediction))\n    print('MSE:',metrics.mean_squared_error(y_test,y_prediction))\n    print('RMSE:',np.sqrt(metrics.mean_squared_error(y_test,y_prediction)))\n    sns.distplot(y_test-y_prediction)","24afb882":"from sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\n","81f238be":"# Linear Regression Predictions\nprediction(LinearRegression())","3fd0776c":"# KNeighborsRegressor Predictions\nprediction(KNeighborsRegressor())","af489012":"# RandomForestRegressor Predictions\nprediction(RandomForestRegressor())","f6780785":"# DecisionTreeRegressor Predictions\nprediction(DecisionTreeRegressor())","80a483bb":"# Now Seperate Independent and Dependent variables","2feb3a57":"# Flight Fare Prediction\n\n![image.png](attachment:0366c066-d35f-4841-b8c0-773e5fd971a9.png)]","ba6e5254":"# Linear Regression Predictions\n","b288f318":"# Convert Date_of_Journey column into day, month, year","1d1e5e8c":"# DecisionTreeRegressor Predictions\n","192b6efe":"RandomForestRegressor Predictions are better then other algoriths","c3543165":"# Import Different type of Regression Model","f5f516fc":"Ordinal data --> data are in order -->       LabelEncoder is used in this case","c4ba6ab5":"# Import Libraries","551ccc8f":"# Feature Selection","80630e27":"# KNeighborsRegressor Predictions\n","a3ac3054":"# Conclusion","c20578cd":"# Automate Model Prediction","f91c6199":"# RandomForestRegressor Predictions\n","7fa03859":"# Remove Outliers","770b296f":"# Handle Categorical Data","3142b872":"# Import dataset","a5ff878d":"# Data Preprocessing and Cleaning","c38feb5c":"# Split Data ","a772daf2":"# Check Categorical columns and Numerical Columns","a819eebe":"# Data Analysis","add2f8d5":"# pre-processing on duration column,Separate Duration hours and minute from duration","3a634104":"# Outlier Detection","d58e70b0":"Nominal data --> data are not in any order --> OneHotEncoder is used in this case\n"}}