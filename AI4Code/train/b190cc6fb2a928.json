{"cell_type":{"dac92f15":"code","ec326cbf":"code","01718d1f":"code","c7199fef":"code","c3a1a037":"code","97edec7f":"code","e7e0872c":"code","5489f711":"code","dd3949ac":"code","fa131584":"code","d921c5c1":"code","566c400a":"code","47794898":"code","231db8b0":"code","709f3ba2":"code","17c2846e":"code","2741d98c":"code","77e7da7a":"code","dad0ebd1":"code","e2525ca8":"code","1fd5ff0a":"code","0e551fac":"code","95d00747":"code","cda1c56c":"code","b48434b5":"code","982621fd":"code","07bdafe4":"code","915de86f":"code","0dc2ec28":"markdown","7f576c79":"markdown","5abf3f2c":"markdown","3e8f452d":"markdown","f34ecd2a":"markdown","0418706a":"markdown","85a9e8ee":"markdown","c3fa46c6":"markdown","fd2bd7ce":"markdown","ff59e646":"markdown","199a3220":"markdown","234ee872":"markdown","73832c98":"markdown","4f54ae6d":"markdown","dbda50b8":"markdown","99c588c0":"markdown","518f954d":"markdown","d620555a":"markdown","8d02335c":"markdown","dfecade6":"markdown","fcf5a721":"markdown","93c729f3":"markdown","5dddf334":"markdown","3b36012d":"markdown","71717a7a":"markdown","95c95327":"markdown","501d2766":"markdown","3f7f4f04":"markdown","5e42bb52":"markdown"},"source":{"dac92f15":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n%matplotlib inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec326cbf":"#import data\n\nintakes = pd.read_csv('..\/input\/animal-shelter-analytics\/Austin_Animal_Center_Intakes.csv', parse_dates=['DateTime','MonthYear'])\nprint(f'intakes contains {intakes.shape[0]} records and {intakes.shape[1]} columns.')\n\n\noutcomes = pd.read_csv('..\/input\/animal-shelter-analytics\/Austin_Animal_Center_Outcomes.csv', parse_dates=['DateTime','MonthYear','Date of Birth'])\nprint(f'outcomes contains {outcomes.shape[0]} records and {outcomes.shape[1]} columns.')\n\nstray_map = pd.read_csv('..\/input\/animal-shelter-analytics\/Austin_Animal_Center_Stray_Map.csv', parse_dates=['Intake Date'])","01718d1f":"\ndef dropdupcols(df,col1,col2):\n    if (df[col1] == df[col2]).mean() == 1:\n        df.drop(columns=col2,inplace=True)\n        print(df.dtypes)\n\ndropdupcols(intakes,'DateTime','MonthYear')\ndropdupcols(outcomes,'DateTime','MonthYear')","c7199fef":"print(\"Intakes Data Types\\n\",intakes.dtypes)\nprint(\"Outcomes Data Types\\n\",outcomes.dtypes)","c3a1a037":"intakes['Intake Type'] = intakes['Intake Type'].astype('category')\nintakes['Intake Condition'] = intakes['Intake Condition'].astype('category')\nintakes['Animal Type'] = intakes['Animal Type'].astype('category')\nintakes['Sex upon Intake'] = intakes['Sex upon Intake'].astype('category')\n\noutcomes['Outcome Type'] = outcomes['Outcome Type'].astype('category')\noutcomes['Outcome Subtype'] = outcomes['Outcome Subtype'].astype('category')\noutcomes['Animal Type'] = outcomes['Animal Type'].astype('category')\noutcomes['Sex upon Outcome'] = outcomes['Sex upon Outcome'].astype('category')\n","97edec7f":"print(\"Intakes\\n\")    \nfor col in intakes.columns:\n    pct_missing = intakes[col].isnull().mean()\n    print(f'{col} - {pct_missing :.3%}')\n\nprint(\"\\nOutcomes\\n\")    \n    \nfor col in outcomes.columns:\n    pct_missing = outcomes[col].isnull().mean()\n    print(f'{col} - {pct_missing :.3%}') \n","e7e0872c":"intakes['Sex upon Intake'].fillna(\"Unknown\",inplace=True)\noutcomes['Sex upon Outcome'].fillna(\"Unknown\",inplace=True)\noutcomes['Outcome Type'].cat.add_categories(\"Unknown\", inplace=True)\noutcomes['Outcome Type'].fillna(\"Unknown\",inplace=True)","5489f711":"def ageconvert(age):\n    if age == \"nan\":\n\n        return age\n    \n    split = str(age).split(' ',1)\n   \n    try:\n        if split[1] == 'week' or split[1] == 'weeks':\n            # The average number of weeks in a month is 4.345\n            age_months = round(float(split[0])\/4.345,1)\n        if split[1] == 'year' or split[1] == 'years':\n            age_months = float(split[0])*12\n        if split[1] == 'day' or split[1] == 'days':\n            age_months = round(float(split[0])\/7\/4.345,1)\n        else: \n            age_months = float(split[0])\n    except:\n        age_months = np.nan\n\n    if age_months < 0:\n        # It is not possible for us to know what the negative ages were intended to be, so these are changed to null values.\n        age_months = np.nan\n    \n    return age_months    \n    \nintakes['Age upon Intake Months'] = intakes['Age upon Intake'].apply(ageconvert)\noutcomes['Age upon Outcome Months'] = outcomes['Age upon Outcome'].apply(ageconvert)\nstray_map['Age Months'] = stray_map['Age'].apply(ageconvert)","dd3949ac":"intakes['Age upon Intake Months'].describe()","fa131584":"\n_ = sns.histplot(x='Age upon Intake Months', data=intakes,binwidth=1)\n_ = plt.xlabel('Age upon Intake (Months)')\n_ = plt.title('Animal Age upon Intake in Months')\nplt.show()","d921c5c1":"sns.color_palette()\n_ = sns.boxplot(data=intakes, x='Animal Type', y ='Age upon Intake Months')\n_ = plt.title('Age of Intakes by Species')","566c400a":"_ = sns.violinplot(x='Animal Type', y='Age upon Intake Months', data=intakes)\n_ = plt.xlabel('Animal Type')\n_ = plt.ylabel('Age (months)')\n_ = plt.title('Age of Intakes by Species')\nplt.show()","47794898":"intakes['Named'] = intakes['Name'].isnull().map({True:'No Name', False:'Has Name'})\n\n_ = sns.histplot(data=intakes, x='Named')\n_ = plt.xlabel('Intake Name Status')\n_ = plt.title('Count of Intakes with and without Names')","231db8b0":"_ = sns.histplot(data=intakes, x='Named', hue='Animal Type', multiple = 'dodge')\n_ = plt.xlabel('Intake Name Status')\n_ = plt.title('Count of Intakes with and without Names')\n\nname_comp = intakes[['Animal ID','Animal Type','Named']].groupby(['Named','Animal Type']).count()\nname_comp.rename(columns= {'Animal ID': 'Count'},inplace=True)\nname_comp['Percentage'] = name_comp['Count'] \/ name_comp['Count'].sum()\n\nname_comp.style.format({\n    'Percentage': '{:,.2%}'.format,\n})\n","709f3ba2":"intakes_dup = intakes[intakes['Animal ID'].duplicated(keep=False)]\n\nintakes_uniq = intakes[~intakes['Animal ID'].duplicated(keep=False)]\n","17c2846e":"dup_count = intakes_dup[['Intake Type','Animal Type','Animal ID']].groupby(['Intake Type','Animal Type']).count()\ndup_count.rename(columns= {'Animal ID': 'Count'},inplace=True)\ndup_count['Percentage'] = dup_count['Count']\/ dup_count['Count'].sum()\n\n\nuniq_count = intakes_uniq[['Intake Type','Animal Type','Animal ID']].groupby(['Intake Type','Animal Type']).count()\nuniq_count.rename(columns= {'Animal ID': 'Count'},inplace=True)\nuniq_count['Percentage'] = uniq_count['Count']\/ uniq_count['Count'].sum()\n\n\ndup_vs_uniq = dup_count.merge(uniq_count,left_index = True, right_index = True, suffixes=[\" multiple intakes\",\" unique intakes\"])\n\nprint(f\"The total count of unique intakes is {uniq_count['Count'].sum()} \")\nprint(f\"The total count of multiple intakes is {dup_count['Count'].sum()} \")\n\ndup_vs_uniq.style.format({\n    'Percentage multiple intakes': '{:,.2%}'.format,\n    'Percentage unique intakes': '{:,.2%}'.format,\n})\n\n","2741d98c":"plt.clf()\n\n\n\nfig, ax = plt.subplots(1, 2, sharey=True, figsize=(12,5))\n_ = fig.suptitle('Intake Type Comparison')\n\n\n_ = sns.histplot(intakes_uniq, x='Intake Type', hue='Animal Type', multiple='stack', ax=ax[0])\n_ = ax[0].set_title('Unique Intakes')\n_ = ax[0].tick_params(axis='x', rotation=90)\n\n\n_ = sns.histplot(intakes_dup, x='Intake Type', hue='Animal Type', multiple='stack', ax=ax[1])\n_ = ax[1].set_title('Repeat Intakes')\n_ = ax[1].tick_params(axis='x', rotation=90)\n\n\nplt.show();","77e7da7a":"sns.set_style(\"whitegrid\")\n\nintakes['month'] = intakes['DateTime'].dt.month\nintakes['year'] = intakes['DateTime'].dt.year\n\nin_month = intakes[['Animal ID','year','month']].groupby(['year','month']).count()","dad0ebd1":"\n\n_ = in_month.plot(kind='bar',figsize=(22,4))\n_ = plt.ylabel('Count')\n_ = plt.xticks(fontsize=14)\n_ = plt.title('Count of Animal Intakes per month')","e2525ca8":"in_by_month = intakes.groupby(['Intake Type',intakes.DateTime.dt.month]).agg({'Animal ID':'count'}).reset_index()\n\nin_by_month.rename(columns= {'Animal ID': 'Count'},inplace=True)\nin_by_month_wide = in_by_month.pivot_table(index='DateTime',columns='Intake Type',values='Count')\nin_by_month\n\nf, ax = plt.subplots(figsize=(9, 9))\n_ = sns.heatmap(in_by_month_wide, annot=True, fmt=\"d\", linewidths=.5, ax=ax,cmap=\"YlGnBu\")\n_ = plt.xticks(fontsize=14, rotation=45)\n_ = plt.ylabel('Month of Intake',fontsize=14)\n_ = plt.title('Intake Type by Month ')","1fd5ff0a":"\n\n_ = sns.histplot(x='Animal Type', hue = 'Outcome Type', data = outcomes, multiple ='dodge')\n\nout_by_animal = outcomes[['Animal ID','Outcome Type','Animal Type']].groupby(['Animal Type','Outcome Type']).count()\nout_by_animal.rename(columns = {'Animal ID':'Count'},inplace=True)\nout_by_animal","0e551fac":"\n_ = sns.histplot(x='Age upon Outcome Months', data=outcomes,binwidth=1)\n_ = plt.xlabel('Age upon Outcome (Months)')\n_ = plt.title('Animal Age upon Outcome in Months')\nplt.show()\n\noutcomes['Age upon Outcome Months'].describe()","95d00747":"sns.set_style(\"whitegrid\")\n\noutcomes['month'] = outcomes['DateTime'].dt.month\noutcomes['year'] = outcomes['DateTime'].dt.year\n\nout_month = outcomes[['Animal ID','year','month']].groupby(['year','month']).count()","cda1c56c":"_ = out_month.plot(kind='bar',figsize=(22,4))\n_ = plt.ylabel('Count')\n_ = plt.xticks(fontsize=14)\n_ = plt.title('Count of Animal Outcomes per month')","b48434b5":"\noutcomes_uniq = outcomes[~outcomes['Animal ID'].duplicated(keep=False)]\n\nin_out_uniq = intakes_uniq.merge(right=outcomes_uniq, how='left', on='Animal ID',suffixes=['_in','_out'])","982621fd":"count_in_out = in_out_uniq[['Animal ID','Intake Type','Outcome Type']].groupby(['Intake Type','Outcome Type']).count()\n\ncount_in_out","07bdafe4":"fig_dims = (20, 4)\nfig, ax = plt.subplots(figsize=fig_dims)\n\n_ = sns.histplot(x='Intake Type',hue='Outcome Type',data = in_out_uniq,multiple ='dodge', ax=ax)\n\n\n","915de86f":"in_out_type = in_out_uniq.groupby(['Intake Type','Outcome Type']).agg({'Animal ID':'count'}).reset_index()\n\nin_out_type.rename(columns= {'Animal ID': 'Count'},inplace=True)\nin_out_wide = in_out_type.pivot_table(index='Outcome Type',columns='Intake Type',values='Count')\n\nf, ax = plt.subplots(figsize=(9, 9))\n_ = sns.heatmap(in_out_wide, annot=True, fmt=\"d\", linewidths=.5, ax=ax,cmap=\"YlGnBu\")\n_ = plt.xticks(rotation=45)\n_ = plt.ylabel('Month of Intake',fontsize=14)\n_ = plt.title('Intake Type by Month ')","0dc2ec28":"## Converting the Age Column\nAge columns are listed as strings with varying units, so these need to be converted to be plottable. We will convert this column into months with a float datatype. Negative ages are converted to null values.","7f576c79":"# Matching Intakes to Outcomes\n\nAs there are many duplicate Animal IDs in both Intakes and Outcomes, this analysis is done using the subset of Animal IDs in intakes\/outcomes that only occur once. There are no obvious ways to join Animal IDs that occur more than once without a unique \"visit\" ID.\n\nWith this in mind, when viewing the ensuing analysis, it must be noted that there was a noticeable difference in the subset of animals that were only taken in once versus the subset of animals that were taken in multiple times.\n","5abf3f2c":"* Intakes tend to peak during late spring\/early summer and wane in the winter.\n* Intakes seem to have dropped off starting March 2020, which correlates with the beginning of the COVID-19 pandemic.\n\n","3e8f452d":"\n## Looking at Animal Age","f34ecd2a":"* About 2\/3rds of intakes (68.5%) come in with a name. This naturally means that the rest (31.5%) come in without a name. ","0418706a":"# Animal Shelter Analytics\n\n## Still a WIP, feedback is deeply appreciated as I get my toes wet!\n\nWhat insights can be gleaned from data from the Austin Animal Center regarding animal intakes and outcomes?\n","85a9e8ee":"* The animal age at outcome distribution unsurprisingly looks very similar to the animal age at intake distribution.\n* The average age at outcome is .11 months higher than the average age at intake, implying that most animals stay in a shelter for a fraction of a month.","c3fa46c6":"# Outcomes\n","fd2bd7ce":"# Intake Type by Month","ff59e646":"https:\/\/seaborn.pydata.org\/examples\/spreadsheet_heatmap.html","199a3220":"* Other types are highly likely to have no name\n    * This is likely explained by the fact that wildlife is included in the \"Other\" animal type.\n*","234ee872":"* Most transfers come in as strays\n* The overwhelming majority of adoption outcomes come from animals that were taken in as owner surrenders or strays.\n* Wildlife and strays were the most euthanized categories","73832c98":"## Dataset Features\n\n### Timeframe\nData spans from October 1st, 2013 to March 3rd, 2021\n\n### Austin Animal Center Intakes \n* Animal ID\n* Name\n* DateTime\/MonthYear\n    * Redundant columns that include the time the animal was taken in at the Austin Animal Center\n* Found Location\n* Intake Type\n* Intake Condition\n* Animal Type\n* Sex upon Intake\n    * Animal sex & spay\/neuter status at time of intake\n* Age upon Intake\n\n### Austin Animal Center Outcomes\n* Animal ID\n* Name\n* DateTime\/MonthYear\n    * Redundant columns that include the time the animal was taken in at the Austin Animal Center\n* Date of Birth\n* Outcome Type\n* Outcome Subtype\n* Animal Type\n* Sex upon Outcome\n    * Animal sex & spay\/neuter status at time of outcome\n* Age upon Outcome\n\n","4f54ae6d":"## Check for missing values","dbda50b8":"### Immediate Takeaways\n\n* Wildlife, somewhat obviously, is almost never taken in multiple times (only 8 instances in a dataset containing 124k intakes)\n* Dogs account for the large majority of animals that were taken in multiple times (82.4%), but only about half of the animals that had been taken in a single time at the time the dataset was assembled(50.8%).\n","99c588c0":"## The Presence of Animal Names","518f954d":"* The age of intakes is skewed towards the younger side, with very few animals being taken in at over a year old\n    * Despite this, there is a relatively small number of animals that are taken in with an age of <1 month \n* Animals are about 3-1\/3 months old upon intake on average\n    ","d620555a":"### Check Datatypes","8d02335c":"# Analyzing the Data\nThe data is appropriately cleansed, and now we begin to try to answer some questions.","dfecade6":"## Data Import and Cleaning","fcf5a721":"## Intakes as a Function of Time of Year","93c729f3":"### Import Data","5dddf334":"## Convert data types to categories as appropriate","3b36012d":"#### Import Needed Libraries","71717a7a":"## Replacement\/Adjustment of Null Values\nThere are many null values in both DataFrames that may or may not need to be handled:\n* Name\n    * No replacement necessary, as many intakes don't have names.\n* Sex upon Intake\/Sex upon Outcome\n    * Null values should be replaced with \"Unknown\"\n* Age upon Intake\/Age upon Outcome\n    * No replacement, many ages might be unknown.\n* Outcome Type\n    * Since we are not sure why these values are missing, we will replace this with \"Unknown\" rather than removing these rows.","95c95327":"* Other animal types are most often euthanized, perhaps because there is not often much recourse for hurt wildlife that has low chance of survival when released back into the wild.\n* The overwhelming number of \"Return to Owners\" goes to dogs\n    * This combined with the fact that most repeat intakes are dogs may suggest that many dogs that are taken in multiple times get lost often.","501d2766":"## Dropping Redundant Data\nDateTime and MonthYear columns in both DataFrames appear to be redundant; if redundant, drop the 'MonthYear' column.","3f7f4f04":"## Repeat Intakes\n\nSome animals are taken in multiple times. What differences exist between the group of animals that were only taken in once versus the group of animals that have been taken in multiple times?","5e42bb52":"## Age at Outcome"}}