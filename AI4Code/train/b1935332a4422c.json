{"cell_type":{"d49a99c4":"code","b802a988":"code","78df0b3e":"code","99ca99e6":"code","2b6fe766":"code","3d1ffba9":"code","5676d1d5":"code","56569d88":"code","f3a39d74":"code","90c57536":"code","4bf744a3":"code","7351894c":"code","0c168e8e":"code","36faec01":"code","63ec6ee5":"code","c6dbef73":"code","e89c04ad":"code","f2f1a774":"code","7ec4d34f":"code","5cdf4266":"code","252c8d3a":"code","62fb4ac8":"code","ba27b65d":"code","aa1038c4":"code","14fc8f0c":"code","feb9d3bb":"code","d342178e":"code","2024ee42":"code","96078b9b":"code","dc8fc12d":"code","1fdd08e5":"code","26691a02":"code","f2a30609":"code","8523c172":"code","9b5516f3":"code","5e7e94ae":"code","1a80aca0":"code","594db4a7":"code","c8a2e62e":"code","f9fa74ba":"code","e3386d22":"code","33452410":"code","bd930dc3":"code","dcdcfaef":"code","74daeb15":"code","328fac4e":"code","e15f9dc2":"code","82649b43":"code","f32649b2":"code","5a40af6e":"code","2ff6f841":"code","f3dfb3c9":"markdown","ba9e23f1":"markdown"},"source":{"d49a99c4":"pip install dataprep","b802a988":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.metrics import classification_report","78df0b3e":"df = pd.read_csv('..\/input\/maternal-health-risk-data\/Maternal Health Risk Data Set.csv')\ndf.head()","99ca99e6":"df.tail()","2b6fe766":"df.dtypes","3d1ffba9":"df.info()","5676d1d5":"df.shape","56569d88":"#Miss Valuse\ndf.isnull().sum()","f3a39d74":"#Duplicated value \ndata_dup = df.duplicated().any()\ndata_dup","90c57536":"df = df.drop_duplicates()","4bf744a3":"data_dup = df.duplicated().any()\ndata_dup","7351894c":"ca_val=[]\nco_val=[]\n\nfor column in df.columns:\n    if df[column].nunique() <=10:\n        ca_val.append(column)\n    else:\n        co_val.append(column)","0c168e8e":"#Categorical Data\nca_val","36faec01":"df['BodyTemp'].unique()","63ec6ee5":"df['RiskLevel'].unique()","c6dbef73":"co_val","e89c04ad":"df['Age'].unique()","f2f1a774":"df['SystolicBP'].unique()","7ec4d34f":"df['DiastolicBP'].unique()","5cdf4266":"df['BS'].unique()","252c8d3a":"df['HeartRate'].unique()","62fb4ac8":"RiskLevel = {'low risk':1, \n        'mid risk':2, \n        'high risk':3}\n\n# apply using map\ndf['RiskLevel'] = df['RiskLevel'].map(RiskLevel).astype(float)\ndf","ba27b65d":"df['RiskLevel'].value_counts()","aa1038c4":"df.describe()","14fc8f0c":"df[['RiskLevel','Age']].corr()","feb9d3bb":"df[['RiskLevel','SystolicBP']].corr()","d342178e":"df[['RiskLevel','DiastolicBP']].corr()","2024ee42":"df[['RiskLevel','BS']].corr()","96078b9b":"df[['RiskLevel','HeartRate']].corr()","dc8fc12d":"from dataprep.eda import plot\nplot(df)","1fdd08e5":"plot(df,'Age')","26691a02":"plot(df,'SystolicBP')","f2a30609":"plot(df,'DiastolicBP')","8523c172":"plot(df,'BS')","9b5516f3":"plot(df,'HeartRate')","5e7e94ae":"plot(df,'RiskLevel')","1a80aca0":"df\n","594db4a7":"from dataprep.eda import plot_correlation\nplot_correlation(df)","c8a2e62e":"import matplotlib.pyplot as plt\ndf.hist(bins=50, figsize=(20, 15))\nplt.show()","f9fa74ba":"df['RiskLevel'].value_counts()\n\ndf['RiskLevel'].value_counts() * 100 \/ len(df)\n\n\nsns.countplot(x='RiskLevel', data=df, palette='viridis')","e3386d22":"X = df.drop('RiskLevel',axis=1)\ny = df['RiskLevel']","33452410":"X","bd930dc3":"y","dcdcfaef":"#Splitting The Dataset\n\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,\n                                               random_state=42)\ny_test","74daeb15":"print(f'Training Shape x:',X_train.shape)\nprint(f'Testing Shape x:',X_test.shape)\nprint('*****___________*****___________*****')\nprint(f'Training Shape y:',X.shape)\nprint(f'Testing Shape y:',y.shape)","328fac4e":"#StandardScaler\n\nss = StandardScaler()\n\nX_train = ss.fit_transform(X_train)\n\nX_test= ss.transform(X_test)\n","e15f9dc2":"#Applying SVC (Support Vector Classification)\nfrom sklearn.svm import SVC\n\n#Create svm\nsvm = SVC(kernel='rbf', random_state=0, gamma=.10, C=1.0)\nsvm.fit(X_train, y_train)\nprint(\"Train accuracy:\",svm.score(X_train,y_train))\nprint(\"Test accuracy:\",svm.score(X_test,y_test))\n\ny_pred = svm.predict(X_test)\nprint(y_pred)\ncm = confusion_matrix(y_test, y_pred)\nprint(f'CM:',cm)\nprint(f'Accuracy:',accuracy_score(y_test, y_pred)* 100 ,'%')\nprint(classification_report(y_test, svm.predict(X_test)))","82649b43":"#Applying XGBoost\nimport xgboost as xgb\n\n#Create XGBClassifier\nxgb_clf = xgb.XGBClassifier()\n\nxgb_clf = xgb_clf.fit(X_train, y_train)\n\nprint(\"Train accuracy:\",xgb_clf.score(X_train,y_train))\nprint(\"Test accuracy:\",xgb_clf.score(X_test,y_test))\n\ny_pred = xgb_clf.predict(X_test)\nprint(y_pred)\ncm = confusion_matrix(y_test, y_pred)\nprint(f'CM:',cm)\nprint(f'Accuracy:',accuracy_score(y_test, y_pred)* 100 ,'%')\nprint(classification_report(y_test, xgb_clf.predict(X_test)))\n","f32649b2":"#Applying Decision Tree\nfrom sklearn import tree\n\n#Create tree object\ndecision_tree = tree.DecisionTreeClassifier(criterion='gini')\n\n#Train DT based on scaled training set\ndecision_tree.fit(X_train, y_train)\n\nprint(\"Train accuracy:\",decision_tree.score(X_train,y_train))\nprint(\"Test accuracy:\",decision_tree.score(X_test,y_test))\n\ny_pred = decision_tree.predict(X_test)\nprint(y_pred)\ncm = confusion_matrix(y_test, y_pred)\nprint(f'CM:',cm)\nprint(f'Accuracy:',accuracy_score(y_test, y_pred)* 100 ,'%')\nprint(classification_report(y_test, decision_tree.predict(X_test)))","5a40af6e":"#Applying RandomForest\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Create Random Forest object\nrandom_forest = RandomForestClassifier()\n\n#Train model\nrandom_forest.fit(X_train, y_train)\n\nprint(\"Train accuracy:\",random_forest.score(X_train,y_train))\nprint(\"Test accuracy:\",random_forest.score(X_test,y_test))\n\ny_pred = random_forest.predict(X_test)\nprint(y_pred)\ncm = confusion_matrix(y_test, y_pred)\nprint(f'CM:',cm)\nprint(f'Accuracy:',accuracy_score(y_test, y_pred)* 100 ,'%')\nprint(classification_report(y_test, random_forest.predict(X_test)))","2ff6f841":"#Applying GaussianNB\nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(X_train , y_train)\n\nprint(\"Train accuracy:\",nb.score(X_train,y_train))\nprint(\"Test accuracy:\",nb.score(X_test,y_test))\n\ny_pred = nb.predict(X_test)\nprint(y_pred)\ncm = confusion_matrix(y_test, y_pred)\nprint(f'CM:',cm)\nprint(f'Accuracy:',accuracy_score(y_test, y_pred)* 100 ,'%')\nprint(classification_report(y_test, nb.predict(X_test)))","f3dfb3c9":"![Upvote!](https:\/\/img.shields.io\/badge\/Upvote-If%20you%20like%20my%20work-07b3c8?style=for-the-badge&logo=kaggle)","ba9e23f1":"# Maternal Health Risk using EDA and machine learning\n\n\nMany pregnant women die from pregnancy issues as a result of a lack of information on maternal health care during and after pregnancy. It is more common in rural regions and among lower-middle-class families in emerging countries. During pregnancy, every minute should be observed to ensure the proper growth of the baby and the safe delivery. \n\n<img src=\"https:\/\/miro.medium.com\/max\/400\/1*rmj7B0EumeMHL4SiW6tD5Q.gif\" width=\"600px\">\n\n\n\n# 5 Algorithms Classification\n\nWe used dataprep EDA and 5 algorithms Classification\n\n\n\n* Support Vector Machine(RBF)\n* Xgboost\n* Decision Tree\n* Random Forest\n* Gaussian Naive Bayes\n\n\n\nData Set Information:\n\n\nData has been collected from different hospitals, community clinics, maternal health cares through the IoT based risk monitoring system.\n\n* Age: Age in years when a woman is pregnant.\n* SystolicBP: Upper value of Blood Pressure in mmHg, another significant attribute during pregnancy.\n* DiastolicBP: Lower value of Blood Pressure in mmHg, another significant attribute during pregnancy.\n* BS: Blood glucose levels is in terms of a molar concentration, mmol\/L.\n* HeartRate: A normal resting heart rate in beats per minute.\n* Risk Level: Predicted Risk Intensity Level during pregnancy considering the previous attribute.\n\nDataset link :\n\n[HERE](https:\/\/www.kaggle.com\/csafrit2\/maternal-health-risk-data)"}}