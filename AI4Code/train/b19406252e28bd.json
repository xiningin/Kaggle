{"cell_type":{"b3669c33":"code","f313a045":"code","1f637785":"code","03dd40ff":"code","03b7de10":"code","01fbe774":"code","e35313b3":"code","ec075055":"code","601766b6":"code","29a496a3":"code","a00a6afc":"code","cff7568a":"code","8ed18448":"code","e50c7759":"code","ef80fc85":"markdown","f60a9588":"markdown","b6be0aaa":"markdown","b8ba4392":"markdown","70c736ef":"markdown","dba09e1e":"markdown"},"source":{"b3669c33":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","f313a045":"pkmn = pd.read_csv('..\/input\/Pokemon.csv')\npkmn.head()","1f637785":"#Deletes columns Generation and Legendary\npkmn = pkmn.drop(['Generation', 'Legendary'],1)\npkmn.head()","03dd40ff":"#To start things off, let's just make a scatterplot based on two variables from the data set. I will use HP and Attack.\n\nsns.jointplot(x=\"HP\", y=\"Attack\", data=pkmn,size=6,ratio=4,color='r');\nplt.show()","03b7de10":"sns.jointplot(x=\"Total\",y=\"HP\",data=pkmn,size=5,ratio=3,color='y')\n\nplt.show()","01fbe774":"#Now let's see if we can make something a little bit prettier.How about a distribution of all six stats? \n#We could even group it further using Pokemon type!\n#Let's take it one step at a time.","e35313b3":"sns.boxplot(data=pkmn,palette=\"bright\");\nplt.tight_layout() #Makes automatic editing.","ec075055":"pkmn = pkmn.drop(['Total','#'],1)\npkmn.head()","601766b6":"\nsns.boxplot(data=pkmn,palette=\"pastel\",width=0.8)\nplt.tight_layout()","29a496a3":"\npkmn = pd.melt(pkmn, id_vars=[\"Name\", \"Type 1\", \"Type 2\"], var_name=\"Stat\")\npkmn.head()","a00a6afc":"\nsns.swarmplot(x=\"Stat\", y=\"value\", data=pkmn, hue=\"Type 1\",palette=\"Set1\")\n","cff7568a":"plt.figure(figsize=(12,10))\nplt.ylim(0, 275)\nsns.swarmplot(x=\"Stat\", y=\"value\", data=pkmn, hue=\"Type 1\", split=True, size=7)\nplt.legend(bbox_to_anchor=(1, 1), loc=2, borderaxespad=0.)","8ed18448":"plt.figure(figsize=(12,10))\nplt.ylim(0, 275)\nsns.violinplot(x=\"Stat\", y=\"value\", data=pkmn)\nsns.swarmplot(x=\"Stat\", y=\"value\", data=pkmn, hue=\"Type 1\", split=True, size=7)\nplt.legend(bbox_to_anchor=(1, 1), loc=2, borderaxespad=0.)\nplt.show()","e50c7759":"sns.set_style(\"whitegrid\")\nwith sns.color_palette([\n    \"#8ED752\", \"#F95643\", \"#53AFFE\", \"#C3D221\", \"#BBBDAF\",\n    \"#AD5CA2\", \"#F8E64E\", \"#F0CA42\", \"#F9AEFE\", \"#A35449\",\n    \"#FB61B4\", \"#CDBD72\", \"#7673DA\", \"#66EBFF\", \"#8B76FF\",\n    \"#8E6856\", \"#C3C1D7\", \"#75A4F9\"], n_colors=18, desat=.9):\n    plt.figure(figsize=(12,10))\n    plt.ylim(0, 275)\n    sns.swarmplot(x=\"Stat\", y=\"value\", data=pkmn, hue=\"Type 1\", split=False, size=9)\n    plt.legend(bbox_to_anchor=(1, 1), loc=2, borderaxespad=0.);","ef80fc85":"# Fimport the packages we will be using in this kernel.","f60a9588":"# Plots and Seaborn","b6be0aaa":"###### Alright,now all that's left is to include Pokemon type in this visualization\n###### One way to do this would be switch the graph to a swarmplot and color code the points by type","b8ba4392":"###### Trying to use the swarmplot function with the \"hue\" argument is going to give use some errors if we don't transform our data a bir though. The Seaborn website provides an axample using Pandas' melt function,so we will give that a try!","70c736ef":"###### The head method doesn't really do this transformation justice,bur our dataset now has 4800 rows up from 800! So let's go ahead and run this plot function!","dba09e1e":"Using a few Seaborn and Matplotlib functions, we can adjust how our plot looks.\nOn each line below, we will:\n\n* Make the plot larger\n* Adjust the y-axis\n* Organize the point distribution by type and make the individual points larger\n* Move the legend out of the way"}}