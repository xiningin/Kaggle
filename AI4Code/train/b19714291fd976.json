{"cell_type":{"6cea4a7d":"code","4b1187aa":"code","3b3c894c":"code","0d16ba79":"code","42d7662d":"code","3b6bcff4":"code","b8e9ebd0":"code","d642173e":"code","35d63811":"code","1d4edb03":"code","6eb2e7ba":"code","abc7fd19":"code","6b66bbdb":"code","42a5b05c":"code","a97f91bd":"code","e92ab30f":"code","72c76781":"code","fc4388ec":"code","06838be9":"code","10b4ec14":"code","e5666b70":"code","ab3f91c7":"code","cdfc2d25":"code","9ca01d42":"markdown","2138d6ce":"markdown","db56a1d1":"markdown","1e93391e":"markdown","c4009f22":"markdown","d86513aa":"markdown","b552ff84":"markdown"},"source":{"6cea4a7d":"import pandas as pd\nimport numpy as np\nfrom statistics import mean\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier","4b1187aa":"train = pd.read_csv('..\/input\/train.csv')\ntest  = pd.read_csv('..\/input\/test.csv')","3b3c894c":"train.head()","0d16ba79":"test.head()","42d7662d":"train.shape,test.shape","3b6bcff4":"train.columns, test.columns","b8e9ebd0":"train.info(),test.info()","d642173e":"train.describe()","35d63811":"# Pas de valeur manquante (dans le 'train' et dans le 'test')","1d4edb03":"cols=[\"target\",\"ID_code\"]\nX_train = train.drop(cols,axis=1)\nY_train = train[\"target\"]\nX_test  = test.drop(\"ID_code\", axis=1).copy()\n\nX_train.shape, Y_train.shape, X_test.shape","6eb2e7ba":"X_train.head()","abc7fd19":"X_test.head()","6b66bbdb":"# MinMaxScaler\nscaler = MinMaxScaler()\n\nX_train_scaled = scaler.fit_transform(X_train)\nX_train = pd.DataFrame(X_train_scaled)\n\nX_test_scaled = scaler.fit_transform(X_test)\nX_test = pd.DataFrame(X_test_scaled)","42a5b05c":"# Logistic Regression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","a97f91bd":"coeff_df = pd.DataFrame(train.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","e92ab30f":"# Decision Tree\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","72c76781":"# Stochastic Gradient Descent\nsgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\nacc_sgd","fc4388ec":"# Linear SVC\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nacc_linear_svc","06838be9":"# Perceptron\nperceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\nacc_perceptron","10b4ec14":"# Gaussian Naive Bayes\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","e5666b70":"# Random Forest\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","ab3f91c7":"models = pd.DataFrame({\n    'Model': ['Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [ acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_linear_svc, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","cdfc2d25":"submission = pd.DataFrame({\n        \"ID_code\": test[\"ID_code\"],\n        \"target\": Y_pred\n    })\n# submission.to_csv('..\/output\/submission.csv', index=False)","9ca01d42":"### Pr\u00e9diction","2138d6ce":"# LIBRAIRIES","db56a1d1":"### Visualisation du data","1e93391e":"### R\u00e9duction de la taille des variables \n\"pour faciliter le travail des algorithmes\"","c4009f22":"## Importation du Data","d86513aa":"### Valeurs manquantes","b552ff84":"### Analyse du data"}}