{"cell_type":{"e4da54a6":"code","44c67be2":"code","a679658c":"code","6b52db67":"code","f66d5fb3":"code","951af8a2":"code","d0646fe7":"code","ef298908":"code","24788a88":"code","e50472ba":"code","efdd17ce":"markdown","011d67f4":"markdown","1bd6677a":"markdown","ea0f3fc6":"markdown"},"source":{"e4da54a6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline","44c67be2":"# Loading Complementary DNA Sequence into an alignable file\nfrom Bio import SeqIO\nDNAseq = SeqIO.read('\/kaggle\/input\/coronavirus-genome-sequence\/MN908947.fna', \"fasta\") # This is DNA Sequence","a679658c":"DNA = DNAseq.seq\nprint('DNA', DNA[:10], '...')\nmRNA = DNA.transcribe()\nprint('RNA', mRNA[:10], '...')\nprint('Total nucleotides:', len(mRNA))\n# Obtain Amino Acid Sequence from mRNA (translation)\namino_acids = mRNA.translate(table=1, cds=False) \nprint('Amino Acid', amino_acids[:30])\nprint('Total Amino acids', len(amino_acids))\n","6b52db67":"#Identify all the Proteins (chains of amino acids)\nProteins = amino_acids.split('*') # * is translated stop codon\ndf = pd.DataFrame(Proteins)\ndf.describe()\nprint('Total proteins:', len(df))\n\ndef conv(item):\n    return len(item)\n\ndef to_str(item):\n    return str(item)\n\ndf['sequence_str'] = df[0].apply(to_str)\ndf['length'] = df[0].apply(conv)\ndf.rename(columns={0: \"sequence\"}, inplace=True)\ndf.head()","f66d5fb3":"# Take only longer than 20\nfunctional_proteins = df.loc[df['length'] >= 20]\nprint('Total functional proteins:', len(functional_proteins))\nfunctional_proteins.describe()","951af8a2":"# Plot lengths\nplt.figure(figsize=(20,5))\n\nplt.subplot(111)\nplt.hist(functional_proteins['length'])\nplt.title('Length of proteins -- histogram')\n\n\n# Remove the extremes\nplt.figure(figsize=(20,5))\nwo = functional_proteins.loc[functional_proteins['length'] < 60]\nplt.subplot(121)\nplt.hist(wo['length'])\nplt.title('Lenght of proteins (where < 60)')\n\nwo = functional_proteins.loc[functional_proteins['length'] > 1000]\nplt.subplot(122)\nplt.hist(wo['length'])\nplt.title('Length of proteins (where > 1000)')","d0646fe7":"# See what's about that huge protein\nlarge_prot = functional_proteins.loc[functional_proteins['length'] > 2700]\nl = large_prot['sequence'].tolist()[0]\nprint('Sequence sample:', '...',l[1000:1150],'...')","ef298908":"from Bio import pairwise2\n# Define sequences to be aligned\nSARS = SeqIO.read(\"\/kaggle\/input\/coronavirus-accession-sars-mers-cov2\/sars.fasta\", \"fasta\")\nMERS = SeqIO.read(\"\/kaggle\/input\/coronavirus-accession-sars-mers-cov2\/mers.fasta\", \"fasta\")\nCOV2 = SeqIO.read(\"\/kaggle\/input\/coronavirus-accession-sars-mers-cov2\/cov2.fasta\", \"fasta\")\n\nprint('Sequence Lengths:')\nprint('SARS:', len(SARS.seq))\nprint('COV2:', len(COV2.seq))\nprint('MERS:', len(MERS.seq))\n","24788a88":"# Alignments using pairwise2 alghoritm\nSARS_COV = pairwise2.align.globalxx(SARS.seq, COV2.seq, one_alignment_only=True, score_only=True)\nprint('SARS\/COV Similarity (%):', SARS_COV \/ len(SARS.seq) * 100)\nMERS_COV = pairwise2.align.globalxx(MERS.seq, COV2.seq, one_alignment_only=True, score_only=True)\nprint('MERS\/COV Similarity (%):', MERS_COV \/ len(MERS.seq) * 100)\nMERS_SARS = pairwise2.align.globalxx(MERS.seq, SARS.seq, one_alignment_only=True, score_only=True)\nprint('MERS\/SARS Similarity (%):', MERS_SARS \/ len(SARS.seq) * 100)","e50472ba":"# Plot the data\nX = ['SARS\/COV2', 'MERS\/COV2', 'MERS\/SARS']\nY = [SARS_COV\/ len(SARS.seq) * 100, MERS_COV\/ len(MERS.seq)*100, MERS_SARS\/len(SARS.seq)*100]\nplt.title('Sequence identity (%)')\nplt.bar(X,Y)\n","efdd17ce":"# Comparing Human Coronavirus RNA\n\nUsing pariwise alignment to find similarities between variants.","011d67f4":"Since input sequence is FASTA (DNA), and Coronavirus is RNA type of virus, we need to:\n\n1. Transcribe DNA to RNA (`ATTAAAGGTT...` => `AUUAAAGGUU...`)\n2. Translate RNA to Amino acid sequence (`AUUAAAGGUU...` => `IKGLYLPR*Q...`)\n\nIn the current scenario, the `.fna` file starts with **ATTAAAGGTT**, then we call `transcribe()` so `T` (thymine) is replaced with `U` (uracil), so we get the RNA sequence which starts with **AUUAAAGGUU**.\n\nWhen we `translate()` the RNA sequence to amino-acid sequence, we get something like **IKGLYLPR*Q** (* is so called STOP codon, effectively * is separator for proteins). In our scenario, sequence looks like this:\n`IKGLYLPR*QTNQLSISCRSVL*TNFKICV`, where:\n\n1. `IKGLYLPR` encodes first protein (every letter encodes single amino-acid)\n2. `QTNQLSISCRSVL` encodes second protein, and so on","1bd6677a":"# COVID19 CoV-2 Protein Analysis (WIP)\n\n![genome variants](https:\/\/i.imgur.com\/Ewd1d6u.png)\n\nTodo:\n- BLAST charts\n- Seq Alignment","ea0f3fc6":"# Mapping\n\nThis is probably `orf1ab`:\n\nhttps:\/\/www.ncbi.nlm.nih.gov\/nuccore\/MN908947.3?report=genbank&log$=seqview"}}