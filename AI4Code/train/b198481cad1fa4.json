{"cell_type":{"f3e62aef":"code","d82cf24d":"code","149293f5":"code","3a2233c6":"code","e73ff98d":"code","29e90adf":"code","2fa06fff":"code","812b93a4":"code","0fda85f0":"code","8f0fb38e":"code","77af1a8a":"code","9900cea1":"code","4983006a":"code","713dbd67":"code","428efb7b":"code","07344da2":"code","38cb8720":"code","21bd3751":"code","266bcf18":"code","944b55bf":"code","145390d6":"code","8f14c6a5":"markdown","34db277a":"markdown"},"source":{"f3e62aef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d82cf24d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline","149293f5":"# Load the data\ntrain = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","3a2233c6":"train.head()","e73ff98d":"test.head()","29e90adf":"Y_train = train[\"label\"]\n\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) \n\n# free some space\ndel train \n\n","2fa06fff":"#lets check the distribution of our target variable\ng = sns.countplot(Y_train)\n\nY_train.value_counts()","812b93a4":"# Check the data\nX_train.isnull().any().describe()","0fda85f0":"# Check the data\ntest.isnull().any().describe()","8f0fb38e":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0","77af1a8a":"# Reshape image (height = 28px, width = 28px , channel = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","9900cea1":"\nnp.random.seed(123)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nimport tensorflow as tf\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, BatchNormalization, ZeroPadding2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau, LearningRateScheduler\n\n","4983006a":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_train = to_categorical(Y_train, num_classes = 10)","713dbd67":"# Split the train and the validation set for the fitting\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=234)","428efb7b":"# Some examples\ng = plt.imshow(X_train[10][:,:,0])","07344da2":"#Bulding Model:CNN\n#ensembles of CNN\n\n# BUILD CONVOLUTIONAL NEURAL NETWORKS\nnets = 5\nmodel = [0] *nets\nfor j in range(nets):\n    model[j] = Sequential()\n\n    model[j].add(Conv2D(32, kernel_size = 3, padding='same', activation='relu', input_shape = (28, 28, 1)))\n    model[j].add(BatchNormalization())\n    #model[j].add(MaxPooling2D(pool_size=(2, 2)))\n    #model[j].add(Conv2D(32, kernel_size = 3, padding='same', activation='relu'))\n   # model[j].add(BatchNormalization())\n    #model[j].add(MaxPooling2D(pool_size=(2, 2)))\n    model[j].add(Conv2D(32, kernel_size = 3, padding='same', activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(MaxPooling2D(pool_size=(2, 2)))\n    model[j].add(Dropout(0.4))\n\n    model[j].add(Conv2D(64, kernel_size = 3, padding='same', activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(64, kernel_size = 5, padding='same', activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(MaxPooling2D(pool_size=(2, 2)))\n    model[j].add(Dropout(0.25))\n\n    model[j].add(Conv2D(256, kernel_size = 4, padding='same', activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(MaxPooling2D(pool_size=(2, 2)))\n    \n    model[j].add(Flatten())\n    model[j].add(Dense(256, activation='relu'))\n    model[j].add(Dropout(0.5))\n    model[j].add(Dense(10, activation='softmax'))\n\n    # COMPILE WITH ADAM OPTIMIZER AND CROSS ENTROPY COST\n    model[j].compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","38cb8720":"# With data augmentation to prevent overfitting\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.3, # Randomly zoom image \n        shear_range = 0.2, #Randomly shears images\n        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)\n","21bd3751":"# DECREASE LEARNING RATE EACH EPOCH\nannealer = LearningRateScheduler(lambda x: 1e-3 * 0.95 ** x)\n# TRAIN NETWORKS\nhistory = [0] * nets\nepochs = 10\nfor j in range(nets):\n    X_train2, X_val2, Y_train2, Y_val2 = train_test_split(X_train, Y_train, test_size = 0.1)\n    history[j] = model[j].fit_generator(datagen.flow(X_train2,Y_train2, batch_size=32),\n        epochs = epochs, steps_per_epoch = X_train2.shape[0]\/\/32, verbose = 2,  \n        validation_data = (X_val2,Y_val2), callbacks=[annealer])\n    print(\"CNN {0:d}: Epochs={1:d}, Train accuracy={2:.5f}, Validation accuracy={3:.5f}\".format(\n        j+1,epochs,max(history[j].history['accuracy']),max(history[j].history['val_accuracy']) ))","266bcf18":"# ENSEMBLE PREDICTIONS AND SUBMIT\nresults = np.zeros( (test.shape[0],10) ) \nfor j in range(nets):\n    results = results + model[j].predict(test)\nresults = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"MNIST-submission-cnn.csv\",index=False)","944b55bf":"#accuracy plots fo all models:\nfor j in range(nets):\n    accs = history[j].history['accuracy']\n    val_accs = history[j].history['val_accuracy']\n\n    plt.title(\"For CNN: \"+ str(j+1))\n    plt.plot(range(len(accs)),accs, label = 'Training_accuracy')\n    plt.plot(range(len(accs)),val_accs, label = 'Validation_accuracy')\n    plt.ylabel('accuracy')\n    plt.xlabel('epochs')\n    plt.legend()\n    plt.show()\n","145390d6":"#loss plots of all models\nfor j in range(nets):\n    loss = history[j].history['loss']\n    val_loss = history[j].history['val_loss']\n\n    plt.title(\"For CNN: \"+ str(j+1))\n    plt.plot(range(len(loss)),loss, label = 'Training_loss')\n    plt.plot(range(len(loss)),val_loss, label = 'Validation_loss')\n    plt.ylabel('loss')\n    plt.xlabel('epochs')\n    plt.legend()\n    plt.show()","8f14c6a5":"I feel image reshaping could be better****","34db277a":"#balanced output variable we have. :)"}}