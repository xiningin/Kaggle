{"cell_type":{"63a8499f":"code","c6b9d2fb":"code","d9626492":"code","4938c1ce":"code","aa701446":"code","f2d3a856":"code","add85422":"code","2b316f56":"markdown","587ff409":"markdown","a7ca0ae6":"markdown","eb20a1cb":"markdown","5ccb05b7":"markdown"},"source":{"63a8499f":"!pip install qiskit","c6b9d2fb":"import qiskit\nfrom qiskit import IBMQ","d9626492":"token = 'your_token_goes_here'","4938c1ce":"IBMQ.save_account(token)","aa701446":"print(qiskit.__qiskit_version__)","f2d3a856":"import numpy as np\nfrom qiskit import QuantumCircuit, execute, Aer\nfrom qiskit.visualization import plot_histogram\n\n# Use Aer's qasm_simulator\nsimulator = Aer.get_backend('qasm_simulator')\n\n# Create a Quantum Circuit acting on the q register\ncircuit = QuantumCircuit(2, 2)\n\n# Add a H gate on qubit 0\ncircuit.h(0)\n\n# Add a CX (CNOT) gate on control qubit 0 and target qubit 1\ncircuit.cx(0, 1)\n\n# Map the quantum measurement to the classical bits\ncircuit.measure([0,1], [0,1])\n\n# Execute the circuit on the qasm simulator\njob = execute(circuit, simulator, shots=1000)\n\n# Grab results from the job\nresult = job.result()\n\n# Returns counts\ncounts = result.get_counts(circuit)\nprint(\"\\nTotal count for 00 and 11 are:\",counts)\n\n# Draw the circuit\ncircuit.draw(output='mpl')","add85422":"# Plot a histogram\nplot_histogram(counts)","2b316f56":"### Make your free Qiskit account [here](https:\/\/quantum-computing.ibm.com\/) and get your token","587ff409":"### This is just a simple program from the Qiskit tutorial, just to get you going","a7ca0ae6":"### In the next week I will publish some relevant codes for todays challenges","eb20a1cb":"### The purpose of this notebook is to get you started with Quantum Computing and Qiskit. This is the first notebook in a in a weekly series of Qiskit notebooks and tutorials","5ccb05b7":"# <center> IBM Quantum Qiskit<\/center>\n<center>![quantum](https:\/\/miro.medium.com\/max\/783\/1*oigIU2U8Z3BLTz_vpigkJQ.jpeg)<\/center>"}}