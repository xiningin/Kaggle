{"cell_type":{"25abb357":"code","bb1c50ed":"code","9d8d9be0":"code","e4a191f0":"code","207128ba":"code","d6f6fd24":"code","2d09f7fc":"code","7dd30d6e":"code","0018c8e0":"code","062e011c":"code","20fd6d67":"code","2512a013":"code","7c38a63e":"code","642d1705":"code","194af349":"code","8a8c114f":"code","ff58a0b2":"code","b8313262":"code","aa4d8573":"code","79d9af8c":"code","0212ca85":"code","2f798f0a":"code","c1e32ac8":"markdown","f05b6595":"markdown","1db6fdfb":"markdown","af050f54":"markdown","d6c5c3e1":"markdown","04af8fe6":"markdown"},"source":{"25abb357":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","bb1c50ed":"import matplotlib.pyplot as plt\n\nfrom tqdm import tqdm # spits out a lil progress bar anytime you want to load a dataset\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Dense, Input, CuDNNLSTM, Embedding, Dropout, Activation, CuDNNGRU, Conv1D\nfrom keras.layers import Bidirectional, GlobalMaxPool1D, GlobalMaxPooling1D, GlobalAveragePooling1D\nfrom keras.layers import Input, Embedding, Dense, Conv2D, MaxPool2D, concatenate\nfrom keras.layers import Reshape, Flatten, Concatenate, Dropout, SpatialDropout1D\nfrom keras.optimizers import Adam\nfrom keras.models import Model\nfrom keras import backend as K\nfrom keras.engine.topology import Layer\nfrom keras import initializers, regularizers, constraints, optimizers, layers\nfrom keras.callbacks import Callback\n\n# Useful for preprocessing\nimport string\nimport nltk\nfrom nltk.tokenize import RegexpTokenizer\nfrom nltk.corpus import stopwords\nimport re\n\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.metrics import roc_auc_score","9d8d9be0":"train = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/train.csv', index_col='id')\ntest = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/test.csv', index_col='id') # covariates you'll use for contest submmissions\ntrain.head()","e4a191f0":"train.columns","207128ba":"plt.hist(train[\"target\"])\nplt.title(\"Distribution of Target Values\")\nplt.show()","d6f6fd24":"# This could be useful if we want to regularize the target value with a beta prior, or use a weighted loss\nplt.hist(train[\"toxicity_annotator_count\"])\nplt.title(\"Distribution of Toxicity Annotator Counts\")\nplt.show()","2d09f7fc":"val_size = 10000\nrandom_state = 2018","7dd30d6e":"## split to train and val\ntrain_df, val_df = train_test_split(train, \n        test_size=val_size, random_state=random_state) \n\n## fill up the missing values\ntrain_X = train_df[\"comment_text\"].values\nval_X = val_df[\"comment_text\"].values\ntest_X = test[\"comment_text\"].values\n\n## Preprocessing ought to go here\n\n## Tokenize the sentences\n## some config values \nembed_size = 300 # how big is each word vector\nmax_features = 95000 # how many unique words to use (i.e num rows in embedding vector)\nmaxlen = 70 # max number of words in a question to use\n\nprint(\"Tokenizing\") # This part takes a long time. Sorry!\ntokenizer = Tokenizer(num_words=max_features)\ntokenizer.fit_on_texts(list(train_X))\ntrain_X = tokenizer.texts_to_sequences(train_X)\nval_X = tokenizer.texts_to_sequences(val_X)\ntest_X = tokenizer.texts_to_sequences(test_X)\n\n## Pad the sentences \nprint(\"Padding\")\ntrain_X = pad_sequences(train_X, maxlen=maxlen)\nval_X = pad_sequences(val_X, maxlen=maxlen)\ntest_X = pad_sequences(test_X, maxlen=maxlen)\n\n## Get the target values\ntrain_y = train_df['target'].values > 0.5\nval_y = val_df['target'].values > 0.5","0018c8e0":"def load_glove(word_index):\n    EMBEDDING_FILE = '..\/input\/glove840b300dtxt\/glove.840B.300d.txt' \n    def get_coefs(word,*arr): return word, np.asarray(arr, dtype='float32')\n    embeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(EMBEDDING_FILE))\n\n    all_embs = np.stack(embeddings_index.values())\n    emb_mean,emb_std = -0.005838499,0.48782197\n    embed_size = all_embs.shape[1]\n\n    # word_index = tokenizer.word_index\n    nb_words = min(max_features, len(word_index))\n    embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size))\n    for word, i in word_index.items():\n        if i >= max_features: continue\n        embedding_vector = embeddings_index.get(word)\n        if embedding_vector is not None: embedding_matrix[i] = embedding_vector\n            \n    return embedding_matrix ","062e011c":"embedding_matrix = load_glove(tokenizer.word_index) # also takes a long time. can't really get around this","20fd6d67":"# https:\/\/www.kaggle.com\/yekenot\/2dcnn-textclassifier\n# It's kind of stupid that this works so well lol. That's CNNs for you\ndef model_cnn(embedding_matrix):\n    filter_sizes = [1,2,3,5]\n    num_filters = 36\n\n    inp = Input(shape=(maxlen,))\n    x = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp)\n    x = Reshape((maxlen, embed_size, 1))(x)\n\n    maxpool_pool = []\n    for i in range(len(filter_sizes)):\n        conv = Conv2D(num_filters, kernel_size=(filter_sizes[i], embed_size),\n                                     kernel_initializer='he_normal', activation='elu')(x)\n        maxpool_pool.append(MaxPool2D(pool_size=(maxlen - filter_sizes[i] + 1, 1))(conv))\n\n    z = Concatenate(axis=1)(maxpool_pool)   \n    z = Flatten()(z)\n    z = Dropout(0.1)(z)\n\n    outp = Dense(1, activation=\"sigmoid\")(z)\n\n    model = Model(inputs=inp, outputs=outp)\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    \n    return model\n\nfast_model = model_cnn(embedding_matrix)\nfast_model.fit(train_X, train_df[\"target\"] > 0.5, batch_size=512, epochs=1,\n          validation_data=(val_X, val_y), verbose=True)\npred_val_y = fast_model.predict([val_X], batch_size=1024, verbose=0).T[0]\nroc_auc_score(y_true=(val_df[\"target\"] > 0.5), y_score=pred_val_y)","2512a013":"def get_roc_auc(model, X, target): #slightly more convenient than the two-liner used previously\n    pred_val_y = model.predict([X], batch_size=1024, verbose=0).T[0]\n    return roc_auc_score(y_true=(target > 0.5), y_score=pred_val_y)\n\nget_roc_auc(fast_model, val_X, val_df[\"target\"])","7c38a63e":"def get_false_pos_rate(y_true, y_pred, thresh=0.5):\n    return (y_pred > thresh)[1 - y_true].mean()\n\ndef get_true_pos_rate(y_true, y_pred, thresh=0.5):\n    return 1 - y_true[y_pred > thresh].mean()\n\nthresholds = np.arange(0.0, 1.0, 0.01)\nfp_rates = [get_false_pos_rate(val_df[\"target\"] > 0.5, pred_val_y, thresh) for thresh in thresholds]\ntp_rates = [ get_true_pos_rate(val_df[\"target\"] > 0.5, pred_val_y, thresh) for thresh in thresholds]\n\nprint(list(zip(thresholds, fp_rates, tp_rates))[0:5])","642d1705":"plt.plot(fp_rates, tp_rates)\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"ROC Plot\")\nplt.show()","194af349":"import keras.backend as K\n\ndef custom_loss(p_reviewers, y_pred, n_reviewers):\n    \"\"\" Treats every instance of a review as a separate datapoint, rather than giving each comment equal weight.\n    Use this if you assume that reviewers are i.i.d. and that the number of reviewers is independent of the \n    comment's contents.\n    \n    Requires: \n    - p_reviewers: n-length array. p_reviewers[i] is float representing \n    proportion of reviewers who labelled comment i as \"toxic\"\n    - y_pred: n-length array of floats, where y_pred[i] is model's predicted probability that \n    comment i is toxic\n    - n_reviewers: n-length array. n_reviewers[i] is int representing \n    total number of reviewers who labelled given comment as \"toxic\" or \"not toxic\"\n    Returns: float\"\"\"\n    # Maybe K.mean results in some efficiency? \n    return -1*K.mean(K.log(y_pred) * n_reviewers * p_reviewers + \n                 K.log(1-y_pred) * n_reviewers * (1-p_reviewers))\n","8a8c114f":"from functools import partial\n\n# Same CNN model as before, but with the custom loss fn. \n# Quite slow to train and actually gets lower ROC-AUC\ndef model_cnn_custom_loss(embedding_matrix):\n    filter_sizes = [1,2,3,5]\n    num_filters = 36\n\n    inp = Input(shape=(maxlen,))\n    x = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp)\n    x = Reshape((maxlen, embed_size, 1))(x)\n\n    maxpool_pool = []\n    for i in range(len(filter_sizes)):\n        conv = Conv2D(num_filters, kernel_size=(filter_sizes[i], embed_size),\n                                     kernel_initializer='he_normal', activation='elu')(x)\n        maxpool_pool.append(MaxPool2D(pool_size=(maxlen - filter_sizes[i] + 1, 1))(conv))\n\n    z = Concatenate(axis=1)(maxpool_pool)   \n    z = Flatten()(z)\n    z = Dropout(0.1)(z)\n\n    outp = Dense(1, activation=\"sigmoid\")(z)\n    n_reviewers_inp = Input(shape=(1,))\n\n    model = Model(inputs=[inp, n_reviewers_inp], outputs=outp)\n    # partial loss function composition - this is necessary cuz keras loss functions require exactly \n    # two arguments: y_true and y_pred. This helps us get around that\n    custom_loss_partial = partial(custom_loss, n_reviewers=train_df[\"toxicity_annotator_count\"].values)\n    model.compile(loss=custom_loss_partial, optimizer='adam', metrics=['accuracy'])\n    return model\n\n# This takes 15 MINUTES to train for 1 epoch. Pretty ridiculous\n# slow_model = model_cnn_custom_loss(embedding_matrix)\n# slow_model.fit(x=[train_X, train_df[\"toxicity_annotator_count\"].values], y=train_y, \n#                batch_size=512, epochs=1,\n#                validation_data=([val_X, val_df[\"toxicity_annotator_count\"]], val_y), verbose=True)\n\n# pred_val_y = slow_model.predict([val_X, np.array([1]*len(val_X))], batch_size=1024, verbose=0).T[0]\n# print(roc_auc_score(y_true=(val_df[\"target\"] > 0.5), y_score=pred_val_y))","ff58a0b2":"# https:\/\/www.kaggle.com\/suicaokhoailang\/lstm-attention-baseline-0-652-lb\n# Code for neural attention layer. People have been using this same chunk of code for the past three competitions lol\n# I'd recommend ignoring this completely tbh.\n\nclass Attention(Layer):\n    def __init__(self, step_dim,\n                 W_regularizer=None, b_regularizer=None,\n                 W_constraint=None, b_constraint=None,\n                 bias=True, **kwargs):\n        self.supports_masking = True\n        self.init = initializers.get('glorot_uniform')\n\n        self.W_regularizer = regularizers.get(W_regularizer)\n        self.b_regularizer = regularizers.get(b_regularizer)\n\n        self.W_constraint = constraints.get(W_constraint)\n        self.b_constraint = constraints.get(b_constraint)\n\n        self.bias = bias\n        self.step_dim = step_dim\n        self.features_dim = 0\n        super(Attention, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        assert len(input_shape) == 3\n\n        self.W = self.add_weight((input_shape[-1],),\n                                 initializer=self.init,\n                                 name='{}_W'.format(self.name),\n                                 regularizer=self.W_regularizer,\n                                 constraint=self.W_constraint)\n        self.features_dim = input_shape[-1]\n\n        if self.bias:\n            self.b = self.add_weight((input_shape[1],),\n                                     initializer='zero',\n                                     name='{}_b'.format(self.name),\n                                     regularizer=self.b_regularizer,\n                                     constraint=self.b_constraint)\n        else:\n            self.b = None\n\n        self.built = True\n\n    def compute_mask(self, input, input_mask=None):\n        return None\n\n    def call(self, x, mask=None):\n        features_dim = self.features_dim\n        step_dim = self.step_dim\n\n        eij = K.reshape(K.dot(K.reshape(x, (-1, features_dim)),\n                        K.reshape(self.W, (features_dim, 1))), (-1, step_dim))\n\n        if self.bias:\n            eij += self.b\n\n        eij = K.tanh(eij)\n\n        a = K.exp(eij)\n\n        if mask is not None:\n            a *= K.cast(mask, K.floatx())\n\n        a \/= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())\n\n        a = K.expand_dims(a)\n        weighted_input = x * a\n        return K.sum(weighted_input, axis=1)\n\n    def compute_output_shape(self, input_shape):\n        return input_shape[0],  self.features_dim\n","b8313262":"def model_lstm_atten(embedding_matrix):\n    inp = Input(shape=(maxlen,))\n    x = Embedding(max_features, embed_size, weights=[embedding_matrix], trainable=False)(inp)\n    x = Bidirectional(CuDNNLSTM(128, return_sequences=True))(x)\n    x = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x)\n    x = Attention(maxlen)(x)\n    x = Dense(64, activation=\"relu\")(x)\n    x = Dense(1, activation=\"sigmoid\")(x)\n    model = Model(inputs=inp, outputs=x)\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n","aa4d8573":"model2 = model_lstm_atten(embedding_matrix)","79d9af8c":"epochs = 2\n\nhistories = [None]*epochs\nfor epoch in range(epochs):\n    # model saves weights from previous call to .fit. Can access weights in history object returned by .fit\n    histories[epoch] = model2.fit(train_X, train_y, batch_size=512, epochs=1,\n                  validation_data=(val_X, val_y), verbose=True)","0212ca85":"# pred_val_y = model.predict([val_X], batch_size=1024, verbose=0)\n# roc_auc_score(y_true=(val_df[\"target\"] > 0.5), y_score=pred_val_y)\nget_roc_auc(model2, val_X, val_df[\"target\"])","2f798f0a":"predictions = model2.predict([test_X], batch_size=1024, verbose=0)\n\nsubmission = pd.DataFrame.from_dict({\n    'id': test['id'],\n    'prediction': predictions\n})\n\nsubmission.to_csv('submission.csv', index=False)","c1e32ac8":"# Areas for improvement\nArranged in rough order of complexity. This code can be drastically improved without the need for much prior machine learning knowledge. \n\n* Pre-processing steps!\n    - Removing stop-words, fixing misspellings, and changing word capitalizations could result in better inputs for your model. \n    - [Stemming](https:\/\/www.geeksforgeeks.org\/introduction-to-stemming\/) seemed to be a useful preprocessing step for the Quora Insincere Questions competition.\n* Different Embeddings! \n    - Instead of simply using just the FastText vector embeddings, you could use [GloVe](https:\/\/www.kaggle.com\/joshkyh\/glove-twitter) embeddings or [Paragram](https:\/\/www.kaggle.com\/hengzheng\/paragram-300-sl999) instead!\n    - Or average them all, as this hilariously-titled [paper](https:\/\/arxiv.org\/abs\/1804.05262) suggests.\n* Different model architecture\/hyperparameters\n    - Well, duh. Maybe throw in a second LSTM layer? Or a GRU layer? \n* Ensembling!\n    - Create a second model architecture, train it, then ensemble it with this model, so that we return a weighted average of their predicted probabilities\n    - Have two separate models with the same architecture. Train one using FastText embeddings and the other with GloVe embeddings. Average their predictions\n* Pre-training\n    - First, use your model architecture to predict the vector of identities. Then, using those same weights as initial values, train the same model to predict toxicity scores\n    \nOh yeah, and we have 42 other features to use here as well! There's gold just begging to be mined here.","f05b6595":"This would be nothing without https:\/\/www.kaggle.com\/christofhenkel\/keras-baseline-lstm-attention-5-fold. Dieter is a beast.\n\n# Basic explanation of this model\n\nKeras bidirectional LSTM with GloVe embeddings. \n\nGloVe embeddings from [here](https:\/\/www.kaggle.com\/takuok\/glove840b300dtxt)","1db6fdfb":"# TODO TODO TODO include FP and TP calculations, ROC plot to explain ROC-AUC","af050f54":"The target column is the fraction of human raters who believed that the comment is toxic. **For evaluation, test set examples with target >= 0.5 will be considered to be in the positive class (toxic)**. Perhaps we could try both regression and classification approaches. ","d6c5c3e1":"# Custom Loss Function\n\nIf you want your model to incorporate `toxicity_annotator_count` somehow, or some other feature, here's an example.\n\nThis uses binary cross-entropy, weighted by the proportion and number of reviewers who labelled each comment. There's a pretty straightforward, elegant statistical interpretation, but in the end it actually gets lower performance (lmao) and is also much slower (probably because my code is poorly optimized).","04af8fe6":"# Bidirectional LSTM with Attention Layer"}}