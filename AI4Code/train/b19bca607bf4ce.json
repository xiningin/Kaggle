{"cell_type":{"5b05b8bc":"code","9e90a3eb":"code","28262c6a":"code","45a64d7a":"code","f3f4263a":"code","dfe73afa":"code","e226558f":"code","83e530a3":"code","726a68ae":"code","3171731c":"code","c0eb087f":"code","8f72cae3":"code","b9af51cf":"code","636c4657":"code","d4e5b67d":"code","89f38520":"code","8f2d80c3":"code","cd1b5459":"code","c09f2975":"code","d501f500":"code","9d1a6361":"code","b0706182":"code","cc2c8190":"markdown","c06f5370":"markdown","9067efe0":"markdown","d0a08b0e":"markdown","b6a3f108":"markdown","b32d2250":"markdown","37362026":"markdown","4fbbe905":"markdown"},"source":{"5b05b8bc":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import (\n    LinearRegression,\n    Ridge,\n    Lasso\n)\n%matplotlib inline","9e90a3eb":"# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv') #\u8a13\u7df4\u30c7\u30fc\u30bf\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv') #\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf","28262c6a":"# \u8a13\u7df4\/\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u78ba\u8a8d (\u884c,\u5217)\nprint('The size of train is : ' + str(train.shape))\nprint('The size of test is : ' + str(test.shape))","45a64d7a":"# \u8a13\u7df4\u30c7\u30fc\u30bf\ntrain.head()","f3f4263a":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\n# SalePrice\u304c\u5b58\u5728\u3057\u306a\u3044\ntest.head()","dfe73afa":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3066\u524d\u51e6\u7406\u3059\u308b\u305f\u3081\u306b\u30de\u30fc\u30b8\u3092\u884c\u3046\n# WhatIsData: \u8a13\u7df4\/\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u3042\u308b\u3053\u3068\u3092\u533a\u5225\u3059\u308b\u5217\u3092\u8ffd\u52a0\ntrain['WhatIsData'] = 'Train'\ntest['WhatIsData'] = 'Test'\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5b58\u5728\u3057\u306a\u3044SalesPrice\u3092'9999999999'\u3067\u8ffd\u52a0\ntest['SalePrice'] = 9999999999\n# alldata\u306b\u8a13\u7df4\/\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u96c6\u7d04\nalldata = pd.concat([train,test],axis=0).reset_index(drop=True)","e226558f":"# \u30de\u30fc\u30b8\u51e6\u7406\u5f8c\u306e\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\nprint('The size of train is : ' + str(train.shape))\nprint('The size of test is : ' + str(test.shape))\nprint('The size of alldata is : ' + str(alldata.shape))","83e530a3":"alldata.head()","726a68ae":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u72b6\u6cc1\ntrain.isnull().sum()[train.isnull().sum()>0].sort_values(ascending=False)","3171731c":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u72b6\u6cc1\ntest.isnull().sum()[test.isnull().sum()>0].sort_values(ascending=False)","c0eb087f":"# \u6b20\u640d\u3092\u542b\u3080\u30ab\u30e9\u30e0\u306e\u30c7\u30fc\u30bf\u578b\u3092\u78ba\u8a8d\nna_col_list = alldata.isnull().sum()[alldata.isnull().sum()>0].index.tolist() # \u6b20\u640d\u3092\u542b\u3080\u30ab\u30e9\u30e0\u3092\u30ea\u30b9\u30c8\u5316\nalldata[na_col_list].dtypes.sort_values() #\u30c7\u30fc\u30bf\u578b","8f72cae3":"# alldata\u306b\u5bfe\u3057\u3066\u6b20\u640d\u5024\u306e\u88dc\u5b8c\n# float\u306e\u5834\u5408\u306f0\n# object\u306e\u5834\u5408\u306f'NA'\nna_float_cols = alldata[na_col_list].dtypes[alldata[na_col_list].dtypes=='float64'].index.tolist() #float64\nna_obj_cols = alldata[na_col_list].dtypes[alldata[na_col_list].dtypes=='object'].index.tolist() #object\n# float64\u578b\u3067\u6b20\u640d\u3057\u3066\u3044\u308b\u5834\u5408\u306f0\u3092\u4ee3\u5165\nfor na_float_col in na_float_cols:\n    alldata.loc[alldata[na_float_col].isnull(),na_float_col] = 0.0\n# object\u578b\u3067\u6b20\u640d\u3057\u3066\u3044\u308b\u5834\u5408\u306f'NA'\u3092\u4ee3\u5165\nfor na_obj_col in na_obj_cols:\n    alldata.loc[alldata[na_obj_col].isnull(),na_obj_col] = 'NA'","b9af51cf":"# alldata\u306e\u6b20\u640d\u5024\u304c\u88dc\u5b8c\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\n# \u30de\u30fc\u30b8\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u72b6\u6cc1\nalldata.isnull().sum()[alldata.isnull().sum()>0].sort_values(ascending=False)","636c4657":"# \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u7279\u5fb4\u91cf\u3092\u30ea\u30b9\u30c8\u5316\ncat_cols = alldata.dtypes[alldata.dtypes=='object'].index.tolist()\n# \u6570\u5024\u5909\u6570\u306e\u7279\u5fb4\u91cf\u3092\u30ea\u30b9\u30c8\u5316\nnum_cols = alldata.dtypes[alldata.dtypes!='object'].index.tolist()\n# \u30c7\u30fc\u30bf\u5206\u5272\u304a\u3088\u3073\u63d0\u51fa\u6642\u306b\u5fc5\u8981\u306a\u30ab\u30e9\u30e0\u3092\u30ea\u30b9\u30c8\u5316\nother_cols = ['Id','WhatIsData']\n# \u4f59\u8a08\u306a\u8981\u7d20\u3092\u30ea\u30b9\u30c8\u304b\u3089\u524a\u9664\ncat_cols.remove('WhatIsData') #\u5b66\u7fd2\u30c7\u30fc\u30bf\u30fb\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u533a\u5225\u30d5\u30e9\u30b0\u9664\u53bb\nnum_cols.remove('Id') #Id\u524a\u9664\n# \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u3092\u30c0\u30df\u30fc\u5316\nalldata_cat = pd.get_dummies(alldata[cat_cols])\n# \u30c7\u30fc\u30bf\u7d71\u5408\nall_data = pd.concat([alldata[other_cols],alldata[num_cols],alldata_cat],axis=1)","d4e5b67d":"# sns.distplot\u3092\u4f7f\u3063\u305f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u78ba\u8a8d\nsns.distplot(train['SalePrice'])","89f38520":"# sns.distplot\u3092\u4f7f\u3063\u305f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u78ba\u8a8d\nsns.distplot(np.log(train['SalePrice']))","8f2d80c3":"# \u30de\u30fc\u30b8\u30c7\u30fc\u30bf\u304b\u3089\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\ntrain_ = all_data[all_data['WhatIsData']=='Train'].drop(['WhatIsData','Id'], axis=1).reset_index(drop=True)\n# \u3000\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u306b\u5206\u5272\ntrain_x = train_.drop('SalePrice',axis=1)\ntrain_y = np.log(train_['SalePrice'])","cd1b5459":"# \u30b0\u30ea\u30c3\u30c9\u3092\u7528\u3044\u3066\u6700\u826f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u691c\u7d22\u3059\u308b\nscaler = StandardScaler()  #\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\nparam_grid = [0.001, 0.01, 0.1, 1.0, 10.0,100.0,1000.0] #\u30d1\u30e9\u30e1\u30fc\u30bf\u30b0\u30ea\u30c3\u30c9\ncnt = 0\nfor alpha in param_grid:\n    #Lasso\u56de\u5e30\u30e2\u30c7\u30eb\n    ls = Lasso(alpha=alpha)\n    #\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u751f\u6210\n    pipeline = make_pipeline(scaler, ls)\n    # \u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30e2\u30c7\u30eb\u69cb\u7bc9\u7528\u306e\u30c7\u30fc\u30bf\u3092\u751f\u6210\n    X_train, X_test, y_train, y_test = train_test_split(train_x, train_y, test_size=0.3, random_state=0)\n    pipeline.fit(X_train,y_train)\n    # \u4e88\u6e2c\u5024\u306e\u7b97\u51fa\n    py_test  = pipeline.predict(X_test)\n    # RMSE:\u4e8c\u4e57\u5e73\u5747\u5e73\u65b9\u6839\u8aa4\u5dee(\u30b9\u30b3\u30a2)\u306e\u7b97\u51fa\n    test_rmse = np.sqrt(mean_squared_error(y_test, py_test))\n    # \u521d\u56de\u5b9f\u884c\u6642\u306e\u51e6\u7406\n    if cnt == 0:\n        best_score = test_rmse\n        best_estimator = pipeline\n        best_param = alpha\n    # \u6700\u5c0f\u3068\u306a\u308bbest_score\u3092\u6c42\u3081\u308b\n    elif best_score > test_rmse:\n        best_score = test_rmse\n        best_estimator = pipeline\n        best_param = alpha\n    else:\n        pass\n    cnt = cnt + 1\n    \nprint('alpha : ' + str(best_param))\nprint('test score is : ' +str(best_score))","c09f2975":"# \u30b0\u30ea\u30c3\u30c9\u3092\u7528\u3044\u3066\u6700\u826f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u691c\u7d22\u3059\u308b\nscaler = StandardScaler()  #\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\nparam_grid = [0.001, 0.01, 0.1, 1.0, 10.0,100.0,1000.0] #\u30d1\u30e9\u30e1\u30fc\u30bf\u30b0\u30ea\u30c3\u30c9\ncnt = 0\nfor alpha in param_grid:\n    #Lasso\u56de\u5e30\u30e2\u30c7\u30eb\n    ls = Lasso(alpha=alpha)\n    #\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u751f\u6210\n    pipeline = make_pipeline(scaler, ls)\n    # \u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30e2\u30c7\u30eb\u69cb\u7bc9\u7528\u306e\u30c7\u30fc\u30bf\u3092\u751f\u6210\n    X_train, X_test, y_train, y_test = train_test_split(train_x, train_y, test_size=0.3, random_state=0)\n    pipeline.fit(X_train,y_train)\n    # \u4e88\u6e2c\u5024\u306e\u7b97\u51fa\n    py_test  = pipeline.predict(X_test)\n    # RMSE:\u4e8c\u4e57\u5e73\u5747\u5e73\u65b9\u6839\u8aa4\u5dee(\u30b9\u30b3\u30a2)\u306e\u7b97\u51fa\n    test_rmse = np.sqrt(mean_squared_error(y_test, py_test))\n    # \u521d\u56de\u5b9f\u884c\u6642\u306e\u51e6\u7406\n    if cnt == 0:\n        best_score = test_rmse\n        best_estimator = pipeline\n        best_param = alpha\n    # \u6700\u5c0f\u3068\u306a\u308bbest_score\u3092\u6c42\u3081\u308b\n    elif best_score > test_rmse:\n        best_score = test_rmse\n        best_estimator = pipeline\n        best_param = alpha\n    else:\n        pass\n    cnt = cnt + 1\n    \nprint('alpha : ' + str(best_param))\nprint('test score is : ' +str(best_score))","d501f500":"plt.subplots_adjust(wspace=0.4)\nplt.subplot(121)\nplt.scatter(np.exp(y_train),np.exp(best_estimator.predict(X_train)))\nplt.subplot(122)\nplt.scatter(np.exp(y_test),np.exp(best_estimator.predict(X_test)))","9d1a6361":"# \u30de\u30fc\u30b8\u30c7\u30fc\u30bf\u304b\u3089\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\ntest_ = all_data[all_data['WhatIsData']=='Test'].drop(['WhatIsData','SalePrice'], axis=1).reset_index(drop=True)\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u306b\u5206\u5272\ntest_id = test_['Id']\ntest_data = test_.drop('Id',axis=1)","b0706182":"# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u751f\u6210\n# test_id\nls = Lasso(alpha = 0.01)\npipeline = make_pipeline(scaler, ls)\npipeline.fit(train_x,train_y)\ntest_SalePrice = pd.DataFrame(np.exp(pipeline.predict(test_data)),columns=['SalePrice'])\ntest_Id = pd.DataFrame(test_id,columns=['Id'])\npd.concat([test_Id, test_SalePrice],axis=1).to_csv('output.csv',index=False)","cc2c8190":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6e96\u5099","c06f5370":"# \u4e88\u6e2c\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9","9067efe0":"# \u76ee\u7684\u5909\u6570\u306e\u5206\u5e03\u5909\u63db","d0a08b0e":"# \u6b20\u640d\u5024\u306e\u88dc\u5b8c","b6a3f108":"# \u30c7\u30fc\u30bf\u306e\u53d6\u8fbc\/\u78ba\u8a8d","b32d2250":"# \u30e2\u30c7\u30eb\u306e\u691c\u8a3c","37362026":"# \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u3092\u30c0\u30df\u30fc\u5316","4fbbe905":"# \u4e88\u6e2c\u7d50\u679c\u306e\u63d0\u51fa"}}