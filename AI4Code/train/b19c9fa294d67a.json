{"cell_type":{"1e77f7c4":"code","0c71cec3":"code","73bd900b":"code","a186076d":"code","2660b74f":"code","e3c4a0b5":"code","4c095042":"code","7aea4bc3":"code","58ba5ffa":"code","02c3aca9":"code","133ec95c":"code","243d388f":"code","97eb9895":"code","2418d07a":"code","7ad4a857":"code","b7389a7f":"code","40269d43":"code","244bfcef":"code","889ceaaf":"code","2fed48ed":"code","8a79e781":"code","63a27ab6":"code","5f57f9d7":"code","38539fd7":"code","99e4ac44":"code","ee1ae41c":"code","f79941a2":"code","8765098e":"code","e3b1d304":"code","8f89c7ff":"code","500a751f":"code","5af0460f":"code","d718d6ce":"code","cf357679":"code","3f51b8d2":"code","870d8440":"code","85f0f3af":"markdown","cc66c40f":"markdown","d9c4676b":"markdown","d4bb29dc":"markdown","bd25418a":"markdown","066fa66c":"markdown","dc03553a":"markdown","ebd5c0ed":"markdown","b46ca1f0":"markdown","2a0d23e5":"markdown","96cd3b2f":"markdown","722057ad":"markdown","c2bd4a2b":"markdown","ea60e7a9":"markdown","523d5fc2":"markdown","4989c5c2":"markdown"},"source":{"1e77f7c4":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\nfrom bokeh.plotting import output_notebook, figure, show\nfrom bokeh.models import ColumnDataSource, Div, Select, Button, ColorBar, CustomJS\nfrom bokeh.layouts import row, column, layout\nfrom bokeh.transform import cumsum, linear_cmap\nfrom bokeh.palettes import Blues8, Spectral3\nfrom bokeh.plotting import figure, output_file, show\n\noutput_notebook()\n\n# Visualisation libraries\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport folium \nfrom folium import plugins\nplt.style.use(\"fivethirtyeight\")# for pretty graphs\n\nfrom plotly.offline import iplot\nfrom plotly import tools, subplots\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.offline as py\nimport plotly.figure_factory as ff\npy.init_notebook_mode(connected=True)\nimport  pandas as pd\nfrom google.cloud import storage\nfrom io import BytesIO\n\n\nimport gc\nimport os\nfrom pathlib import Path\nimport random\nimport sys\n\nfrom tqdm.notebook import tqdm\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\nimport seaborn as sns\n\nfrom IPython.core.display import display, HTML\n\nimport plotly.figure_factory as ff\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\n\n# --- models ---\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cb\n\n# --- setup ---\npd.set_option('max_columns', 50)\n\n\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n\n# !pip install --upgrade google-cloud-storage\nprint('Credendtials from environ: {}'.format(os.environ.get('GOOGLE_APPLICATION_CREDENTIALS')))\nos.environ['GOOGLE_APPLICATION_CREDENTIALS'] = \"\/kaggle\/input\/credential\/analyze-covid-19-public-data.json\"\n# If you don't specify credentials when constructing the client, the\n# client library will look for credentials in the environment.\nclient = storage.Client()\n#  # Make an authenticated API request\n# # buckets = list(client.list_buckets())\n\n# # print(buckets)\n# bucket = \"covid-19_data\"\n\n# # # # # For read\n\n# blob = storage.blob.Blob(\"\/Datasets\/wikipedia-iso-country-codes.csv\",bucket)\n\n# content = blob.download_as_string()\n\n# train = pd.read_csv(BytesIO(content))\n\n","0c71cec3":"path = \"\/kaggle\/input\/covid19globalforecastingweek1\"\n# \"https:\/\/console.cloud.google.com\/storage\/browser\/covid-19_data\/Datasets\/Weather%20Data%20for%20COVID-19%20Data%20Analysis\/?forceOnBucketsSortingFiltering=false&project=analyze-covid-19-public-data\" \ntrain_df = pd.read_csv( path + \"\/\/train.csv\")                      \n#         \"\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv\")\ntest_df = pd.read_csv(path + '\/\/test.csv')\n#     \"\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv\")\nsubmission_csv = pd.read_csv(path + \"\/\/submission.csv\")\ncountry_csv = pd.read_csv(\"\/kaggle\/input\/wikipediaisocountrycodes\/wikipedia-iso-country-codes.csv\")\n\npath = \"\/kaggle\/input\/covid19globalforecastingweek2\"\n# \"https:\/\/console.cloud.google.com\/storage\/browser\/covid-19_data\/Datasets\/Weather%20Data%20for%20COVID-19%20Data%20Analysis\/?forceOnBucketsSortingFiltering=false&project=analyze-covid-19-public-data\" \ntrain1_df = pd.read_csv( path + \"\/\/train.csv\")                      \n#         \"\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv\")\ntest1_df = pd.read_csv(path + '\/\/test.csv')\n#     \"\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv\")\nsubmission1_csv = pd.read_csv(path + \"\/\/submission.csv\")\ncountry_csv = pd.read_csv(\"\/kaggle\/input\/wikipediaisocountrycodes\/wikipedia-iso-country-codes.csv\")\n\npath = \"\/kaggle\/input\/covid19globalforecastingweek\"\n# \"https:\/\/console.cloud.google.com\/storage\/browser\/covid-19_data\/Datasets\/Weather%20Data%20for%20COVID-19%20Data%20Analysis\/?forceOnBucketsSortingFiltering=false&project=analyze-covid-19-public-data\" \ntrain2_df = pd.read_csv( path + \"\/\/train.csv\")                      \n#         \"\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv\")\ntest2_df = pd.read_csv(path + '\/\/test.csv')\n#     \"\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv\")\nsubmission2_csv = pd.read_csv(path + \"\/\/submission.csv\")\ncountry_csv = pd.read_csv(\"\/kaggle\/input\/wikipediaisocountrycodes\/wikipedia-iso-country-codes.csv\")\n\n\ncountries_df = pd.read_csv(\"..\/input\/populationbycountry\/population_by_country_2020.csv\", converters={'Urban Pop %':p2f,\n                                                                                                             'Fert. Rate':fert2float,\n                                                                                                             'Med. Age':age2int})\n\n\ncleaned_data = pd.read_csv('..\/input\/coviddataclean\/covid_19_clean_complete.csv', parse_dates=['Date'])\n\ncleaned_data.rename(columns={'ObservationDate': 'date', \n                     'Province\/State':'state',\n                     'Country\/Region':'country',\n                     'Last Update':'last_updated',\n                     'Confirmed': 'confirmed',\n                     'Deaths':'deaths',\n                     'Recovered':'recovered'\n                    }, inplace=True)\n\n# cases \ncases = ['confirmed', 'deaths', 'recovered', 'active']\n\n# Active Case = confirmed - deaths - recovered\ncleaned_data['active'] = cleaned_data['confirmed'] - cleaned_data['deaths'] - cleaned_data['recovered']\n\n# replacing Mainland china with just China\ncleaned_data['country'] = cleaned_data['country'].replace('Mainland China', 'China')\n\n# filling missing values \ncleaned_data[['state']] = cleaned_data[['state']].fillna('')\ncleaned_data[cases] = cleaned_data[cases].fillna(0)\ncleaned_data.rename(columns={'Date':'date'}, inplace=True)\n\ndata = cleaned_data\n\n# display(data.head())\n# display(data.info())\n\n\ndf_temperature = pd.read_csv(\"..\/input\/temperature\/temperature_dataframe.csv\")\ndf_temperature['country'] = df_temperature['country'].replace('USA', 'US')\ndf_temperature['country'] = df_temperature['country'].replace('UK', 'United Kingdom')\ndf_temperature = df_temperature[[\"country\", \"province\", \"date\", \"humidity\", \"sunHour\", \"tempC\", \"windspeedKmph\"]].reset_index()\ndf_temperature.rename(columns={'province': 'state'}, inplace=True)\ndf_temperature[\"date\"] = pd.to_datetime(df_temperature['date'])\ndf_temperature['state'] = df_temperature['state'].fillna('')\nprint(\"Successfully Loaded\")\n\n","73bd900b":"# Analyze Covid19 Global forcasting Dataset week 1\n\ntrain_df.head()","a186076d":"\ntemp = train_df.groupby(['Date', 'Country\/Region'])['ConfirmedCases'].sum().reset_index()\ntemp['Date'] = pd.to_datetime(temp['Date'])\ntemp['Date'] = temp['Date'].dt.strftime('%m\/%d\/%Y')\ntemp['size'] = temp['ConfirmedCases'].pow(0.3) * 3.5\n\nfig = px.scatter_geo(temp, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"ConfirmedCases\", size='size', hover_name=\"Country\/Region\", \n                     range_color=[-10, 45],\n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='COVID-19: Cases Over Time', color_continuous_scale=\"portland\")\nfig.show()\n\ntemp = train_df.groupby(['Date', 'Country\/Region'])['Fatalities'].sum().reset_index()\ntemp['Date'] = pd.to_datetime(temp['Date'])\ntemp['Date'] = temp['Date'].dt.strftime('%m\/%d\/%Y')\ntemp['size'] = temp['Fatalities'].pow(0.3) * 3.5\n\nfig = px.scatter_geo(temp, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Fatalities\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [-20, 45],\n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='COVID-19: Deaths Over Time',color_continuous_scale=\"portland\")\nfig.show()","2660b74f":"group = train_df.groupby('Date')['Date', 'ConfirmedCases', 'Fatalities'].sum().reset_index()\n\nfig = px.line(group, x=\"Date\", y=\"ConfirmedCases\", \n              title=\"Worldwide Confirmed Cases Over Time\")\n\nfig.show()\n\nfig = px.line(group, x=\"Date\", y=\"Fatalities\", \n              title=\"Worldwide Deaths Over Time\")\n\nfig.show()\n","e3c4a0b5":"Country=pd.DataFrame()\n#temp = train_df.groupby([\"Country\/Region\"])[\"ConfirmedCases\"].sum().reset_index()\ntemp = train_df.loc[train_df[\"Date\"]==train_df[\"Date\"][len(train_df)-1]].groupby(['Country\/Region'])[\"ConfirmedCases\"].sum().reset_index()\nCountry['Name']=temp[\"Country\/Region\"]\nCountry['Values']=temp[\"ConfirmedCases\"]\n\nfig = px.choropleth(Country, locations='Name',\n                    locationmode='country names',\n                    color=\"Values\")\nfig.update_layout(title=\"Corona spread on 19-03-2020\")\nfig.show()","4c095042":"Disease_through_Country = pd.DataFrame()\nDisease_through_Country = train_df.groupby([\"Country\/Region\"]).sum().reset_index()\nDisease_through_Country = Disease_through_Country.drop(['Lat','Long'],axis=1)\n\nNames = [\"ConfirmedCases\",\"Fatalities\"]\nfor i in Names:\n    Disease_through_Country[i+\"_percentage\"] = Disease_through_Country[i]\/Disease_through_Country[Names].sum(axis=1)*100\n    Disease_through_Country[i+\"_angle\"] = Disease_through_Country[i+\"_percentage\"]\/100 * 2*np.pi\n    \nDisease_through_Country_plot = pd.DataFrame({'class': [\"ConfirmedCases\",\"Fatalities\"],\n                                              'percent': [float('nan'), float('nan')],\n                                              'angle': [float('nan'), float('nan')],\n                                              'color': [ '#718dbf', '#e84d60']})\nDisease_through_Country_plot\n\n# Create the ColumnDataSource objects \"s2\" and \"s2_plot\"\ns2 = ColumnDataSource(Disease_through_Country)\ns2_plot = ColumnDataSource(Disease_through_Country_plot)\n\n# Create the Figure object \"p2\"\np2 = figure(plot_width=475, plot_height=550, y_range=(-0.5, 0.7),toolbar_location=None, tools=['hover'], tooltips='@percent{0.0}%')\n\n# Add circular sectors to \"p2\"\np2.wedge(x=0, y=0, radius=0.8, source=s2_plot,start_angle=cumsum('angle', include_zero=True), end_angle=cumsum('angle'),fill_color='color', line_color=None, legend='class')\n\n# Change parameters of \"p2\"\np2.axis.visible = False\np2.grid.grid_line_color = None\np2.legend.orientation = 'horizontal'\np2.legend.location = 'top_center'\n\n# Create the custom JavaScript callback\ncallback2 = CustomJS(args=dict(s2=s2, s2_plot=s2_plot), code='''\n    var ang = ['ConfirmedCases_angle', 'Fatalities_angle'];\n    var per = ['ConfirmedCases_percentage',  'Fatalities_percentage'];\n    if (cb_obj.value != 'Please choose...') {\n        var disease = s2.data['Country\/Region'];\n        var ind = disease.indexOf(cb_obj.value);\n        for (var i = 0; i < ang.length; i++) {\n            s2_plot.data['angle'][i] = s2.data[ang[i]][ind];\n            s2_plot.data['percent'][i] = s2.data[per[i]][ind];\n            \n        }\n    }\n    else {\n        for (var i = 0; i < ang.length; i++) {\n            s2_plot.data['angle'][i] = undefined;\n            s2_plot.data['percent'][i] = undefined;\n        }\n\n    }\n    s2_plot.change.emit();\n''')\n\n# When changing the value of the dropdown menu execute \"callback2\"\noptions = ['Please choose...'] + list(s2.data['Country\/Region'])\nselect = Select(title='Country ', value=options[0], options=options)\nselect.js_on_change('value', callback2)\n\n# Display \"select\" and \"p2\" as a column\nshow(column(select, p2))\n","7aea4bc3":"train1_df.head()           #for week 2","58ba5ffa":"Data = train1_df.groupby(\"Date\").sum().reset_index()\nData[\"Date\"]= pd.to_datetime(Data[\"Date\"])\nsource = ColumnDataSource(Data)\np = figure(x_axis_type='datetime')\n\n\np.line(x=\"Date\", y=\"ConfirmedCases\", line_width=2, source=source, legend_label='Confirmed Corona Cases')\np.line(x=\"Date\", y=\"Fatalities\", line_width=2, source=source, color=Spectral3[2], legend_label='Death by Corona')\n\np.yaxis.axis_label = 'Activity of Corona period of time'\nshow(p)\n\n","02c3aca9":"train_df[\"Date\"] = pd.to_datetime(train2_df[\"Date\"])\nChina_cases = train_df.loc[train_df[\"Country\/Region\"]==\"China\"].groupby(\"Date\")[\"ConfirmedCases\"].sum().reset_index()\nItaly_cases = train_df.loc[train_df[\"Country\/Region\"]==\"Italy\"].groupby(\"Date\")[\"ConfirmedCases\"].sum().reset_index()\nIran_cases = train_df.loc[train_df[\"Country\/Region\"]==\"Iran\"].groupby(\"Date\")[\"ConfirmedCases\"].sum().reset_index()\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=China_cases.Date, y=China_cases['ConfirmedCases'], name=\"Cases in China\",\n                         line_color='deepskyblue'))\n\nfig.add_trace(go.Scatter(x=Italy_cases.Date, y=Italy_cases['ConfirmedCases'], name=\"Cases in Itlay\",\n                         line_color='red'))\n\nfig.add_trace(go.Scatter(x=Iran_cases.Date, y=Iran_cases['ConfirmedCases'], name=\"Cases in Iran\",\n                         line_color='green'))\n\n# fig.add_trace(go.Scatter(x=Usa_cases.Date, y=Usa_cases['ConfirmedCases'], name=\"Cases in Usa\",\n#                          line_color='yellow'))\n\nfig.update_layout(title_text='Spread of Corona over a period of Time',\n                  xaxis_rangeslider_visible=True)\nfig.show()\n\n\n\n\n\n","133ec95c":"train_df[\"Date\"] = pd.to_datetime(train_df[\"Date\"])\n\nChina_cases = train_df.loc[train_df[\"Country\/Region\"]==\"Iran\"].groupby(\"Date\")[\"ConfirmedCases\"].sum().reset_index()\nItaly_cases = train_df.loc[train_df[\"Country\/Region\"]==\"Pakistan\"].groupby(\"Date\")[\"ConfirmedCases\"].sum().reset_index()\nUsa_cases = train_df.loc[train_df[\"Country\/Region\"]==\"India\"].groupby(\"Date\")[\"ConfirmedCases\"].sum().reset_index()\n\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=China_cases.Date, y=China_cases['ConfirmedCases'], name=\"Cases in Iran\",\n                         line_color='deepskyblue'))\n\nfig.add_trace(go.Scatter(x=Italy_cases.Date, y=Italy_cases['ConfirmedCases'], name=\"Cases in Pakistan\",\n                         line_color='red'))\n\nfig.add_trace(go.Scatter(x=Usa_cases.Date, y=Usa_cases['ConfirmedCases'], name=\"Cases in India\",\n                         line_color='yellow'))\n\nfig.update_layout(title_text='Spread of Corona over a period of Time',\n                  xaxis_rangeslider_visible=True)\nfig.show()","243d388f":"China_cases = train_df.loc[train_df[\"Country\/Region\"]==\"China\"].groupby(\"Date\")[\"Fatalities\"].sum().reset_index()\nItaly_cases = train_df.loc[train_df[\"Country\/Region\"]==\"Italy\"].groupby(\"Date\")[\"Fatalities\"].sum().reset_index()\n# Iran_cases = train_df.loc[train_df[\"Country\/Region\"]==\"Iran\"].groupby(\"Date\")[\"Fatalities\"].sum().reset_index()\nUsa_cases = train_df.loc[train_df[\"Country\/Region\"]==\"Pakistan\"].groupby(\"Date\")[\"Fatalities\"].sum().reset_index()\n\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=China_cases.Date, y=China_cases['Fatalities'], name=\"Fatalities in China\",\n                         line_color='blue'))\n\nfig.add_trace(go.Scatter(x=Italy_cases.Date, y=Italy_cases['Fatalities'], name=\"Fatalities in Itlay\",\n                         line_color='red'))\n\n# fig.add_trace(go.Scatter(x=Iran_cases.Date, y=Iran_cases['Fatalities'], name=\"Fatalities in Iran\",\n#                          line_color='green'))\n\nfig.add_trace(go.Scatter(x=Usa_cases.Date, y=Usa_cases['Fatalities'], name=\"Fatalities in Pakistan\",\n                         line_color='black'))\n\nfig.update_layout(title_text='Fatality through Corona over a period of Time',\n                  xaxis_rangeslider_visible=True)\nfig.show()","97eb9895":"import math\ndef Survival(Country):\n    Sx = [] \n    d = 1\n    Ld = 0\n    temp_ = train_df.loc[train_df[\"Country\/Region\"]==Country]\n    temp = temp_.groupby(['Date'])['Fatalities','ConfirmedCases'].sum().reset_index()\n    temp[\"Survival Probability\"] = 0\n    temp[\"Hazard Rate\"] = 0\n    Hr = []\n    for i in range(len(temp)):\n        delta = 1\n        d = temp[\"Fatalities\"][i]\n        n = temp[\"ConfirmedCases\"][i]\n        L = Ld + math.pow((d\/n),delta)\n        S = math.exp(-L)\n        Hr.append(L)\n        Sx.append(S)\n        d= temp[\"Fatalities\"][i]\n        Ld = 0\n    temp[\"Survival Probability\"] = Sx\n    temp[\"Hazard Rate\"] = Hr\n    return temp\nChina_df = Survival(\"China\")\nItaly_df = Survival(\"Italy\")\nIran_df = Survival(\"Iran\")\nUsa_df = Survival(\"USA\")  \n","2418d07a":"\n\nChina_df.head()\n\nfig = go.Figure()\n\n\nfig.add_trace(go.Scatter(x=Italy_df.Date, y=Italy_df['Survival Probability'], name=\"Italy\",\n                         line_color='red'))\n\nfig.add_trace(go.Scatter(x=Iran_df.Date, y=Iran_df['Survival Probability'], name=\"Iran\",\n                         line_color='blue'))\n\nfig.add_trace(go.Scatter(x=Usa_df.Date, y=Usa_df['Survival Probability'], name=\"Usa\",\n                         line_color='green'))\n\nfig.add_trace(go.Scatter(x=China_df.Date, y=China_df['Survival Probability'], name=\"China\",\n                         line_color='black'))\n\nfig.update_layout(title_text='Survival Probability Corona over a period of Time',\n                  xaxis_rangeslider_visible=True)\n\nfig.show()\n","7ad4a857":"temp_df = train_df.loc[train_df[\"Date\"]==\"2020-03-16\"].groupby(\"Country\/Region\")[\"ConfirmedCases\",\"Fatalities\"].sum().reset_index()\ntemp=pd.DataFrame()\ntemp[\"Index\"] = [\"Korea,South\",\"Spain\",\"Iran\",\"Italy\",\"China\",\"Others\"]\nt = temp_df.sort_values(by=\"ConfirmedCases\").tail()[\"ConfirmedCases\"].values\nvalues = []\nfor i in range(0,5):\n    values.append(t[i])\nvalues.append(sum(temp_df.loc[~temp_df[\"Country\/Region\"].isin(temp[\"Index\"])][\"ConfirmedCases\"]))\ntemp[\"Values\"]=values\n\nfig = go.Figure(data=[go.Pie(labels=temp[\"Index\"], values=temp[\"Values\"],hole=0.2)])\nfig.show()","b7389a7f":"temp = train_df.loc[(train_df[\"Country\/Region\"]==\"Pakistn\") & (train_df[\"Date\"]==\"2020-03-20\")].groupby([\"Province\/State\",\"Lat\",\"Long\"])[\"ConfirmedCases\"].sum().reset_index()\nmap = folium.Map(location=[34, 100], zoom_start=3.5,tiles='Stamen Toner')\n\nfor lat, lon, value, name in zip(temp['Lat'], temp['Long'], temp['ConfirmedCases'], temp[\"Province\/State\"]):\n    folium.CircleMarker([lat, lon],\n                        radius=value*0.007,\n                        popup = ('<strong>State<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Active Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.3 ).add_to(map)\nmap\n\ntemp = train_df.loc[(train_df[\"Country\/Region\"]==\"Pakistan\")].groupby([\"Date\"])[\"ConfirmedCases\"].sum().reset_index()\nfig = px.bar(temp, x='Date', y='ConfirmedCases',\n             hover_data=['ConfirmedCases'], color='ConfirmedCases',\n             labels={'pop':'Total Number of confirmed Cases'}, height=400)\nfig.show()\n\n","40269d43":"temp = train_df.loc[(train_df[\"Country\/Region\"]==\"China\") & (train_df[\"Date\"]==\"2020-03-20\")].groupby([\"Province\/State\",\"Lat\",\"Long\"])[\"ConfirmedCases\"].sum().reset_index()\nmap = folium.Map(location=[34, 100], zoom_start=3.5,tiles='Stamen Toner')\n\nfor lat, lon, value, name in zip(temp['Lat'], temp['Long'], temp['ConfirmedCases'], temp[\"Province\/State\"]):\n    folium.CircleMarker([lat, lon],\n                        radius=value*0.007,\n                        popup = ('<strong>State<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Active Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.3 ).add_to(map)\nmap\n\ntemp = train_df.loc[(train_df[\"Country\/Region\"]==\"China\")].groupby([\"Date\"])[\"ConfirmedCases\"].sum().reset_index()\nfig = px.bar(temp, x='Date', y='ConfirmedCases',\n             hover_data=['ConfirmedCases'], color='ConfirmedCases',\n             labels={'pop':'Total Number of confirmed Cases'}, height=400)\nfig.show()\n","244bfcef":"temp = train_df.loc[(train_df[\"Country\/Region\"]==\"Italy\") & (train_df[\"Date\"]==\"2020-03-20\")].groupby([\"Province\/State\",\"Lat\",\"Long\"])[\"ConfirmedCases\"].sum().reset_index()\nmap = folium.Map(location=[34, 100], zoom_start=3.5,tiles='Stamen Toner')\n\nfor lat, lon, value, name in zip(temp['Lat'], temp['Long'], temp['ConfirmedCases'], temp[\"Province\/State\"]):\n    folium.CircleMarker([lat, lon],\n                        radius=value*0.007,\n                        popup = ('<strong>State<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Active Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.3 ).add_to(map)\nmap\n\ntemp = train_df.loc[(train_df[\"Country\/Region\"]==\"Italy\")].groupby([\"Date\"])[\"ConfirmedCases\"].sum().reset_index()\nfig = px.bar(temp, x='Date', y='ConfirmedCases',\n             hover_data=['ConfirmedCases'], color='ConfirmedCases',\n             labels={'pop':'Total Number of confirmed Cases'}, height=400)\nfig.show()","889ceaaf":"\ntrain_df[\"Date\"] = train_df[\"Date\"].apply(lambda x: str(x).replace(\"-\",\"\"))\ntrain_df[\"Date\"]  = train_df[\"Date\"].astype(int)\n\n#drop Province column and all not available entries\ntrain_df = train_df.drop(['Province\/State'],axis=1)\ntrain_df = train_df.dropna()\ntrain_df.isnull().sum()\n\ntest_df[\"Date\"] = test_df[\"Date\"].apply(lambda x: x.replace(\"-\",\"\"))\ntest_df[\"Date\"]  = test_df[\"Date\"].astype(int)\n\ntest_df[\"Lat\"]  = test_df[\"Lat\"].fillna(12.5211)\ntest_df[\"Long\"]  = test_df[\"Long\"].fillna(69.9683)\ntest_df.isnull().sum()\n\n#Asign columns for training and testing\n\nx =train_df[['Lat', 'Long', 'Date']]\ny1 = train_df[['ConfirmedCases']]\ny2 = train_df[['Fatalities']]\nx_test = test_df[['Lat', 'Long', 'Date']]\n# y_test = test_df[['ConfirmedCases']]\n\n#We are going to use Random Forest classifier for the forecast\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=200)\n\n##\nmodel.fit(x,y1)\npred1 = model.predict(x_test)\npred1 = pd.DataFrame(pred1)\npred1.columns = [\"ConfirmedCases_prediction\"]\n\nRandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n                      max_depth=None, max_features='auto', max_leaf_nodes=None, \n                      n_estimators=150, random_state=None, n_jobs=1, verbose=0)\n\npred1.head()\n","2fed48ed":"##\nmodel.fit(x,y2)\npred2 = model.predict(x_test)\npred2 = pd.DataFrame(pred2)\npred2.columns = [\"Death_prediction\"]\n\npred2.head()\n\ntest_df[\"ConfirmedCases\"] = pred1[\"ConfirmedCases_prediction\"]\ntest_df[\"Death\"] = pred2[\"Death_prediction\"]\ntest_df.head()\n","8a79e781":"### Prediction Plot\n\ntemp1 = pd.read_csv(\"\/kaggle\/input\/covid19globalforecastingweek1\/\/train.csv\")  \ntemp2 = pd.read_csv(\"\/kaggle\/input\/covid19globalforecastingweek1\/test.csv\")\ntrain = train_df.loc[(train_df[\"Country\/Region\"]==\"Pakistan\")].groupby([\"Date\"])[\"ConfirmedCases\"].sum().reset_index()\ntest  = test_df.loc[(test_df[\"Country\/Region\"]==\"Pakistan\")].groupby([\"Date\"])[\"ConfirmedCases\"].sum().reset_index()\ntrain[\"Date\"] = temp1[\"Date\"]\ntest[\"Date\"] = temp2[\"Date\"]\n\nimport matplotlib.patches as mpatches\nplt.figure(figsize=(10, 8))\nplt.plot(train['Date'], train['ConfirmedCases'], 'b-')\nplt.plot(test['Date'], test['ConfirmedCases'], 'r-')\nred_patch = mpatches.Patch(color='red', label='Predicted Corona Cases')\nblue_patch = mpatches.Patch(color='blue', label='Actual Corona Cases')\nplt.legend(handles=[red_patch, blue_patch])\nplt.xlabel('Date'); \nplt.ylabel('Corona Virus Confirmed Cases')\nplt.title('Spread of Corona Virus in Pakistan');\n\n","63a27ab6":"temp1 = train_df\ntemp2 = test_df\ntrain = train_df.loc[(train_df[\"Country\/Region\"]==\"China\")].groupby([\"Date\"])[\"Fatalities\"].sum().reset_index()\ntest  = test_df.loc[(test_df[\"Country\/Region\"]==\"China\")].groupby([\"Date\"])[\"Death\"].sum().reset_index()\ntrain[\"Date\"] = temp1[\"Date\"]\ntest[\"Date\"] = temp2[\"Date\"]\nimport matplotlib.patches as mpatches\nplt.figure(figsize=(10, 8))\nplt.plot(train['Date'], train['Fatalities'], 'b-')\nplt.plot(test['Date'], test['Death'], 'r-')\nred_patch = mpatches.Patch(color='red', label='Predicted death due to Corona')\nblue_patch = mpatches.Patch(color='blue', label='Actual death due to Corona')\nplt.legend(handles=[red_patch, blue_patch])\nplt.xlabel('Date'); \nplt.ylabel('Corona Virus Death')\nplt.title('Death due to Corona Virus in China');\n\n","5f57f9d7":"print(f\"Earliest Entry: {train_df['Date'].min()}\")\nprint(f\"Last Entry:     {train_df['Date'].max()}\")\n# print(f\"Total Days:     {train_df['Date'].max() - train_df['Date'].min()}\")","38539fd7":"def p2f(x):\n    \"\"\"\n    Convert urban percentage to float\n    \"\"\"\n    try:\n        return float(x.strip('%'))\/100\n    except:\n        return np.nan\n\ndef age2int(x):\n    \"\"\"\n    Convert Age to integer\n    \"\"\"\n    try:\n        return int(x)\n    except:\n        return np.nan\n\ndef fert2float(x):\n    \"\"\"\n    Convert Fertility Rate to float\n    \"\"\"\n    try:\n        return float(x)\n    except:\n        return np.nan\n\n\n","99e4ac44":"countries_df.rename(columns={'Country (or dependency)': 'country',\n                             'Population (2020)' : 'population',\n                             'Density (P\/Km\u00b2)' : 'density',\n                             'Fert. Rate' : 'fertility',\n                             'Med. Age' : \"age\",\n                             'Urban Pop %' : 'urban_percentage'}, inplace=True)\n\n\n\ncountries_df['country'] = countries_df['country'].replace('United States', 'US')\ncountries_df = countries_df[[\"country\", \"population\", \"density\", \"fertility\", \"age\", \"urban_percentage\"]]\n\ncountries_df.head()","ee1ae41c":"data = pd.merge(data, countries_df, on='country')","f79941a2":"data = data.merge(df_temperature, on=['country','date', 'state'], how='inner')\ndata['mortality_rate'] = data['deaths'] \/ data['confirmed']","8765098e":"temp_gdf = data.groupby(['date', 'country'])['tempC', 'humidity'].mean()\ntemp_gdf = temp_gdf.reset_index()\ntemp_gdf['date'] = pd.to_datetime(temp_gdf['date'])\ntemp_gdf['date'] = temp_gdf['date'].dt.strftime('%m\/%d\/%Y')\n\ntemp_gdf['tempC_pos'] = temp_gdf['tempC'] - temp_gdf['tempC'].min()  # To use it with size\n\nwind_gdf = data.groupby(['date', 'country'])['windspeedKmph'].max()\nwind_gdf = wind_gdf.reset_index()\nwind_gdf['date'] = pd.to_datetime(temp_gdf['date'])\nwind_gdf['date'] = wind_gdf['date'].dt.strftime('%m\/%d\/%Y')","e3b1d304":"target_gdf = data.groupby(['date', 'country'])['confirmed', 'deaths'].sum()\ntarget_gdf = target_gdf.reset_index()\ntarget_gdf['date'] = pd.to_datetime(target_gdf['date'])\ntarget_gdf['date'] = target_gdf['date'].dt.strftime('%m\/%d\/%Y')","8f89c7ff":"\nfig = px.scatter_geo(temp_gdf.fillna(0), locations=\"country\", locationmode='country names', \n                     color=\"tempC\", size='tempC_pos', hover_name=\"country\", \n                     range_color= [-20, 45], \n                     projection=\"natural earth\", animation_frame=\"date\", \n                     title='Temperature by country', color_continuous_scale=\"portland\")\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","500a751f":"\ngdf = pd.merge(target_gdf, temp_gdf, on=['date', 'country'])\ngdf['confirmed_log1p'] = np.log1p(gdf['confirmed'])\ngdf['deaths_log1p'] = np.log1p(gdf['deaths'])\ngdf['mortality_rate'] = gdf['deaths'] \/ gdf['confirmed']\n\ngdf = pd.merge(gdf, wind_gdf, on=['date', 'country'])\nfig = px.scatter_geo(gdf.fillna(0), locations=\"country\", locationmode='country names', \n                     color=\"tempC\", size='confirmed_log1p', hover_name=\"country\", \n                     range_color= [-20, 45], \n                     projection=\"natural earth\", animation_frame=\"date\", \n                     title='COVID-19: log1p(confirmed) VS Temperature by country', color_continuous_scale=\"portland\")\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","5af0460f":"fig = px.scatter_geo(gdf.fillna(0), locations=\"country\", locationmode='country names', \n                     color=\"tempC\", size='deaths', hover_name=\"country\", \n                     range_color= [-20, 45], \n                     projection=\"natural earth\", animation_frame=\"date\", \n                     title='COVID-19: deaths VS temperature by country', color_continuous_scale=\"portland\")\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","d718d6ce":"fig = px.scatter_geo(gdf.fillna(0), locations=\"country\", locationmode='country names', \n                     color=\"tempC\", size='mortality_rate', hover_name=\"country\", \n                     range_color= [-20, 45], \n                     projection=\"natural earth\", animation_frame=\"date\", \n                     title='COVID-19: Mortality rate VS Temperature by country', color_continuous_scale=\"portland\")\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","cf357679":"fig = px.scatter_geo(gdf.fillna(0), locations=\"country\", locationmode='country names', \n                     color=\"humidity\", size='confirmed_log1p', hover_name=\"country\", \n                     range_color= [0, 100], \n                     projection=\"natural earth\", animation_frame=\"date\", \n                     title='COVID-19: log1p(confirmed) VS Humidity by country', color_continuous_scale=\"portland\")\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","3f51b8d2":"fig = px.scatter_geo(gdf.fillna(0), locations=\"country\", locationmode='country names', \n                     color=\"humidity\", size='mortality_rate', hover_name=\"country\", \n                     range_color= [0, 100], \n                     projection=\"natural earth\", animation_frame=\"date\", \n                     title='COVID-19: Mortality rate VS humidity by country', color_continuous_scale=\"portland\")\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","870d8440":"fig = px.scatter_geo(gdf.fillna(0), locations=\"country\", locationmode='country names', \n                     color=\"windspeedKmph\", size='confirmed_log1p', hover_name=\"country\", \n                     range_color= [0, 40], \n                     projection=\"natural earth\", animation_frame=\"date\", \n                     title='COVID-19: log1p(Confirmed) VS Wind speed by country', color_continuous_scale=\"portland\")\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","85f0f3af":"**Observation:**\n\nFrom this graph now we can see that the survival prbability of all Iran,Italy, China are now at same state\n","cc66c40f":"### China","d9c4676b":"## Observation and the big Question <a id=\"1\"><\/a>\n\nFrom the inside stories of the higly affected countries  we can understand that, countries had a huge spike in their confirmed cases rate at their 4th and 5th of infection, It is noted that many counties like India are entring into their **fourth and fith** week of Corona. By knowing this fact the question that coming into my mind is **Will we take this seriously, What are we going to do to prevent the outbreak**\n###  Predicitions <a id=\"9\"><\/a>\n\nWe are treating the spread as of corona as a regression problem and we are using **RandomForest Regression** to predict the death and the spread of the Corona cases\n\n","d4bb29dc":"\n\n### Cases Confirmed Vs Fatalities across Countries \n\n#### Note\nHere you can see dashboard for each countries on their confirmed cases vs fatality rate.","bd25418a":"\n# Disease spread across the top counrties","066fa66c":"#### Observation:\nThere are two fluctuation point on the period of Corona one between **2-10-2020** and **2-15-2020** and other at **3-10-2020** and **3-15-2020**, which is exactly a month period. So it might follow a cyclical pattern, we will try to explore from that prespective in this kernel.\n\n","dc03553a":"### Observations:\nFrom this graph, we can see clearly that disease is well spread in **China**.\n\nWe can also able to observe that, **Iran**, **Italy**, **USA** are following the trend of China and are having high numbers.\n","ebd5c0ed":"### Now Adding Population Data","b46ca1f0":"### Forecasting Confirmed Cases and Fatality Rate","2a0d23e5":"#### Italy\n","96cd3b2f":"\n### Pakistan","722057ad":"\n### Survival Probability and Hazard Rate <a id=\"4\"><\/a>\n\n#### Survival Probability:\n\nIn reliability, the survival probability is the proportion of units that survive beyond a specified time. These estimates of survival probabilities are frequently referred to as reliability estimates.\n\n\nThe survival function, conventionally denoted by S, is the probability that the event (say, death) has not occurred yet:\n                      **S(t)=Pr(T>t)**\n\n#### Hazard Rate:\n\nThe hazard function is the instantaneous rate of failure at a given time. \n\nThe hazard function h(t) is the event (death) rate at time t, conditional on survival until t (i.e., T\u2265t):\n**h(t)=p(t)\/S(t)**","c2bd4a2b":"### Loading the necessary Packages <a id=\"2\"><\/a>\n","ea60e7a9":"**Observation:**\n\nOn observing both **Confirmed cases** and **fatalities** over the time Italy and Iran are in the verge of repeating the China, whereas the death rate in **Italy** seems worse of all and it follows a increasing trend, which leaves us with the worries.\n","523d5fc2":"### Exploratory Data Analysis <a id=\"3\"><\/a>\n\n### Disease spread over the countries \n","4989c5c2":"### *** Analyze Covid19 Global forcasting Dataset ***"}}