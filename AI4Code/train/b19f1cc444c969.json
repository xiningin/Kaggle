{"cell_type":{"403f25d8":"code","f40bba75":"code","6e860021":"code","bde2e83e":"code","4f2de551":"code","30b1460b":"code","9b6d37b8":"code","a63a81d0":"code","5b9afcd9":"code","65ec3ed1":"code","c39f1309":"code","f188e61e":"code","bdd07a80":"code","3cebea59":"code","1aeb0099":"code","be0cc615":"code","ee516dbe":"code","ccc50a03":"code","b8b86c46":"markdown","935df429":"markdown","59412671":"markdown","0c5a6307":"markdown","22557105":"markdown","49e4635d":"markdown","37f6be44":"markdown","a1e6cd32":"markdown","d8bd4eab":"markdown","0dc34ea3":"markdown","03e3cc16":"markdown","786abf91":"markdown"},"source":{"403f25d8":"import os\nos.listdir(\"..\/input\/modelalexnet-and-best-weights-9\/\")","f40bba75":"# Importing Keras libraries and packages\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers.normalization import BatchNormalization\n\n# Initializing the CNN\nclassifier = Sequential()\n\n# Convolution Step 1\nclassifier.add(Convolution2D(96, 11, strides = (4, 4), padding = 'valid', input_shape=(224, 224, 3), activation = 'relu'))\n\n# Max Pooling Step 1\nclassifier.add(MaxPooling2D(pool_size = (2, 2), strides = (2, 2), padding = 'valid'))\nclassifier.add(BatchNormalization())\n\n# Convolution Step 2\nclassifier.add(Convolution2D(256, 11, strides = (1, 1), padding='valid', activation = 'relu'))\n\n# Max Pooling Step 2\nclassifier.add(MaxPooling2D(pool_size = (2, 2), strides = (2, 2), padding='valid'))\nclassifier.add(BatchNormalization())\n\n# Convolution Step 3\nclassifier.add(Convolution2D(384, 3, strides = (1, 1), padding='valid', activation = 'relu'))\nclassifier.add(BatchNormalization())\n\n# Convolution Step 4\nclassifier.add(Convolution2D(384, 3, strides = (1, 1), padding='valid', activation = 'relu'))\nclassifier.add(BatchNormalization())\n\n# Convolution Step 5\nclassifier.add(Convolution2D(256, 3, strides=(1,1), padding='valid', activation = 'relu'))\n\n# Max Pooling Step 3\nclassifier.add(MaxPooling2D(pool_size = (2, 2), strides = (2, 2), padding = 'valid'))\nclassifier.add(BatchNormalization())\n\n# Flattening Step\nclassifier.add(Flatten())\n\n# Full Connection Step\nclassifier.add(Dense(units = 4096, activation = 'relu'))\nclassifier.add(Dropout(0.4))\nclassifier.add(BatchNormalization())\nclassifier.add(Dense(units = 4096, activation = 'relu'))\nclassifier.add(Dropout(0.4))\nclassifier.add(BatchNormalization())\nclassifier.add(Dense(units = 1000, activation = 'relu'))\nclassifier.add(Dropout(0.2))\nclassifier.add(BatchNormalization())\nclassifier.add(Dense(units = 38, activation = 'softmax'))\nclassifier.summary()","6e860021":"classifier.load_weights('..\/input\/modelalexnet-and-best-weights-9\/best_weights_9.hdf5')","bde2e83e":"# let's visualize layer names and layer indices to see how many layers\n# we should freeze:\nfrom keras import layers\nfor i, layer in enumerate(classifier.layers):\n   print(i, layer.name)","4f2de551":"# we chose to train the top 2 conv blocks, i.e. we will freeze\n# the first 8 layers and unfreeze the rest:\nprint(\"Freezed layers:\")\nfor i, layer in enumerate(classifier.layers[:20]):\n    print(i, layer.name)\n    layer.trainable = False\n","30b1460b":"#trainable parameters decrease after freezing some bottom layers   \nclassifier.summary()","9b6d37b8":"# Compiling the Model\nfrom keras import optimizers\nclassifier.compile(optimizer=optimizers.SGD(lr=0.001, momentum=0.9, decay=0.005),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])","a63a81d0":"# image preprocessing\nfrom keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,\n                                   shear_range=0.2,\n                                   zoom_range=0.2,\n                                   width_shift_range=0.2,\n                                   height_shift_range=0.2,\n                                   fill_mode='nearest')\n\nvalid_datagen = ImageDataGenerator(rescale=1.\/255)\n\nbatch_size = 128\nbase_dir = \"..\/input\/new-plant-diseases-dataset\/new plant diseases dataset(augmented)\/New Plant Diseases Dataset(Augmented)\"\n\ntraining_set = train_datagen.flow_from_directory(base_dir+'\/train',\n                                                 target_size=(224, 224),\n                                                 batch_size=batch_size,\n                                                 class_mode='categorical',\n                                                 shuffle=False)\n\nvalid_set = valid_datagen.flow_from_directory(base_dir+'\/valid',\n                                            target_size=(224, 224),\n                                            batch_size=batch_size,\n                                            class_mode='categorical',\n                                            shuffle=False)","5b9afcd9":"class_dict = training_set.class_indices\nprint(class_dict)","65ec3ed1":"li = list(class_dict.keys())\nprint(li)","c39f1309":"train_num = training_set.samples\nvalid_num = valid_set.samples","f188e61e":"# checkpoint\nfrom keras.callbacks import ModelCheckpoint\nweightpath = \"best_weights_9.hdf5\"\ncheckpoint = ModelCheckpoint(weightpath, monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=True, mode='max')\ncallbacks_list = [checkpoint]\n\n#fitting images to CNN\nhistory = classifier.fit_generator(training_set,\n                         steps_per_epoch=150, #train_num\/\/batch_size,\n                         validation_data=valid_set,\n                         epochs=10, #25,\n                         validation_steps=100, #valid_num\/\/batch_size,\n                         callbacks=callbacks_list)\n#saving model\nfilepath=\"AlexNetModel.hdf5\"\nclassifier.save(filepath)","bdd07a80":"#plotting training values\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(loss) + 1)\n\n#accuracy plot\nplt.plot(epochs, acc, color='green', label='Training Accuracy')\nplt.plot(epochs, val_acc, color='blue', label='Validation Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend()\n\nplt.figure()\n#loss plot\nplt.plot(epochs, loss, color='pink', label='Training Loss')\nplt.plot(epochs, val_loss, color='red', label='Validation Loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","3cebea59":"# predicting an image\nfrom keras.preprocessing import image\nimport numpy as np\nimage_path = \"..\/input\/new-plant-diseases-dataset\/test\/test\/TomatoEarlyBlight1.JPG\"\nnew_img = image.load_img(image_path, target_size=(224, 224))\nimg = image.img_to_array(new_img)\nimg = np.expand_dims(img, axis=0)\nimg = img\/255\n\nprint(\"Following is our prediction:\")\nprediction = classifier.predict(img)\n# decode the results into a list of tuples (class, description, probability)\n# (one such list for each sample in the batch)\nd = prediction.flatten()\nj = d.max()\nfor index,item in enumerate(d):\n    if item == j:\n        class_name = li[index]\n\n##Another way\n# img_class = classifier.predict_classes(img)\n# img_prob = classifier.predict_proba(img)\n# print(img_class ,img_prob )\n\n\n#ploting image with predicted class name        \nplt.figure(figsize = (4,4))\nplt.imshow(new_img)\nplt.axis('off')\nplt.title(class_name)\nplt.show()","1aeb0099":"# reset the test_data to start iterating over dataset from scratch\nvalid_set.reset()\n# start to predict\npred = classifier.predict(valid_set)","be0cc615":"import tensorflow as tf\nimport pandas as pd\n# use the confusion_matrix function provided by tensorflow to generate confusion matrix\ncon_mat = tf.math.confusion_matrix(labels=valid_set.classes, predictions=np.argmax(pred, axis=1)).numpy()\n\n# normalize the confusion matrix\ncon_mat_norm = np.around(con_mat.astype('float') \/ con_mat.sum(axis=1)[:, np.newaxis], decimals=2)\n\n# convert the nomalized confusion matrix for better view\ncon_mat_df = pd.DataFrame(con_mat_norm,\n                     index = valid_set.class_indices.keys(), \n                     columns = valid_set.class_indices.keys())\n\n# show the nomalized confusion matrix\ncon_mat_df","ee516dbe":"# convert the original confusion matrix for better view (using the case numbers)\ncon_mat_df_explain = pd.DataFrame(con_mat,\n                     index = valid_set.class_indices.keys(), \n                     columns = valid_set.class_indices.keys())\n\n# show the unnomalized confusion matrix\ncon_mat_df_explain","ccc50a03":"import sklearn.metrics\n# generate the clasification report by using the classification_report of sklearn package\nreport = sklearn.metrics.classification_report(valid_set.classes, np.argmax(pred, axis=1), target_names=valid_set.class_indices.keys())\n\n# print the report\nprint(report)","b8b86c46":"## Explain","935df429":"**Model Summary After Freezing**","59412671":"**Fine Tuning By Freezing Some Layers Of Our Model**","0c5a6307":"**Compiling the Model**","22557105":"**Predicting New Test Image(s)**","49e4635d":"## Predict from test data","37f6be44":"**Loading Weights To The Model**","a1e6cd32":"## Confusion Matrix","d8bd4eab":"**Visualising Training Progress**","0dc34ea3":"**Image Preprocessing**","03e3cc16":"**Building CNN Based On AlexNet Architecture**","786abf91":"## Classification Repot"}}