{"cell_type":{"5d49df2e":"code","bc4b1cf6":"code","413da91c":"code","c0a259a5":"code","df7d217f":"code","b38c0c83":"code","4d259c34":"code","0ddf2ecd":"code","770f4060":"code","8bef6b80":"code","afb55d80":"code","2f68f0e6":"code","cd5a00ab":"code","17d29d49":"code","5aa3a2b8":"code","33125a8e":"code","5467b31d":"code","a365c5eb":"code","8703dafe":"code","82c5b88d":"code","063c649e":"code","75350f12":"code","a49bdf4f":"code","b94a9739":"markdown","009140e0":"markdown","4ca492a8":"markdown","d4992bf2":"markdown","afa49871":"markdown","0b454ebc":"markdown","ad15953b":"markdown","fdf8a215":"markdown","7c31a0bd":"markdown"},"source":{"5d49df2e":"# libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport glob\nimport warnings \nimport os,gc,cv2\nimport shutil\nimport random\nfrom tqdm.notebook import tqdm\nfrom PIL import Image, ImageDraw\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.applications import DenseNet121\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.optimizers import RMSprop\n\n\n%matplotlib inline\nwarnings.filterwarnings('ignore')","bc4b1cf6":"# directories \nCELL_IMG='..\/input\/hpa-cell-tiles-sample-balanced-dataset\/cells\/'\nCELL_DF='..\/input\/hpa-cell-tiles-sample-balanced-dataset\/cell_df.csv'","413da91c":"# loads train dataframe\ntrain_df=pd.read_csv(CELL_DF)\ntrain_df.head(n=10)","c0a259a5":"\n# spliting label column\ntrain_df[\"image_labels\"] = train_df[\"image_labels\"].str.split(\"|\")\n\n# class labels\nclass_labels = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18']\n\n# binarizing each label\/class\nfor label in tqdm(class_labels):\n    train_df[label] = train_df['image_labels'].map(lambda result: 1 if label in result else 0)\n\n# rename column\ntrain_df.columns = ['image_id', 'r_mean', 'g_mean', 'b_mean', 'cell_id', 'image_labels', 'size1', 'size2', 'Nucleoplasm', 'Nuclear membrane', 'Nucleoli', 'Nucleoli fibrillar center',\n                    'Nuclear speckles', 'Nuclear bodies', 'Endoplasmic reticulum', 'Golgi apparatus', 'Intermediate filaments',\n                    'Actin filaments', 'Microtubules', 'Mitotic spindle', 'Centrosome', 'Plasma membrane', 'Mitochondria',\n                    'Aggresome', 'Cytosol', 'Vesicles and punctate cytosolic patterns', 'Negative']","df7d217f":"train_df.head()","b38c0c83":"# creates a new column with unique identifiers for single-cell images\n\nmultinames = ['id', 'r_mean', 'g_mean', 'b_mean', 'image_labels', 'size1', 'size2', 'Nucleoplasm', 'Nuclear membrane', 'Nucleoli', 'Nucleoli fibrillar center',\n                    'Nuclear speckles', 'Nuclear bodies', 'Endoplasmic reticulum', 'Golgi apparatus', 'Intermediate filaments',\n                    'Actin filaments', 'Microtubules', 'Mitotic spindle', 'Centrosome', 'Plasma membrane', 'Mitochondria',\n                    'Aggresome', 'Cytosol', 'Vesicles and punctate cytosolic patterns', 'Negative']\ncell_df=train_df\ncell_df[\"id\"] = cell_df['image_id'] +'_'+ cell_df['cell_id'].astype(str) \ncell_df[\"id\"] =  cell_df[\"id\"] + '.jpg'\ncell_df=cell_df.drop( columns=['image_id', 'cell_id'] )\ncell_df=cell_df.reindex( columns= multinames ) \ncell_df.head()","4d259c34":"# change order of ids as in the cells folder\ncell_df=cell_df.sort_values('id', axis=0, ascending=True, inplace=False, \n                            kind='quicksort', na_position='last')\ncell_df.head()","0ddf2ecd":"# define multilabels for training\nmultilabels = ['Nucleoplasm', 'Nuclear membrane', 'Nucleoli', 'Nucleoli fibrillar center',\n                    'Nuclear speckles', 'Nuclear bodies', 'Endoplasmic reticulum', 'Golgi apparatus', 'Intermediate filaments',\n                    'Actin filaments', 'Microtubules', 'Mitotic spindle', 'Centrosome', 'Plasma membrane', 'Mitochondria',\n                    'Aggresome', 'Cytosol', 'Vesicles and punctate cytosolic patterns', 'Negative']\nprint( len(multilabels), '\\n')","770f4060":"# constant parameters\nIMG_SIZE = 224\nBATCH_SIZE = 32","8bef6b80":"# image generator, rescaling is performed in a pre-processing layer below, \nimage_generator = image.ImageDataGenerator(\n    rescale=1.\/255,\n    data_format='channels_last',\n    preprocessing_function=None,\n    validation_split=0.2\n)","afb55d80":"# train set data flow from dataframe\ntrain_data = image_generator.flow_from_dataframe(\ncell_df,\ndirectory=CELL_IMG,\nx_col='id',\ny_col=multilabels,\nclass_mode='raw',    \ncolor_mode='rgb',\ntarget_size=(IMG_SIZE, IMG_SIZE),    \nbatch_size=BATCH_SIZE,\nseed=123,\nsubset='training'\n)","2f68f0e6":"# validation set data flow from dataframe\nvalidation_data = image_generator.flow_from_dataframe(\ncell_df,\ndirectory=CELL_IMG,\nx_col='id',\ny_col=multilabels,\nclass_mode='raw',    \ncolor_mode='rgb',\ntarget_size=(IMG_SIZE, IMG_SIZE),    \nbatch_size=BATCH_SIZE,\nseed=123,\nsubset='validation'\n)","cd5a00ab":"# constant parameters for model definition\nNUM_CLASSES=19","17d29d49":"# DenseNet121 model\ndensenet = DenseNet121(\n    include_top=True,\n    weights=None,\n    input_shape=(IMG_SIZE,IMG_SIZE,3),\n    input_tensor=None,\n    pooling=None,\n    classes=NUM_CLASSES\n)","5aa3a2b8":"# model definition including a normalization layer and extra layers\nmodel_densenet = Sequential( [\nlayers.experimental.preprocessing.Rescaling( 1.\/255, input_shape=(IMG_SIZE, IMG_SIZE, 3) ),\nlayers.experimental.preprocessing.RandomFlip(\"horizontal\"),\nlayers.experimental.preprocessing.RandomFlip(\"vertical\"),\nlayers.experimental.preprocessing.RandomTranslation(height_factor=0.1, width_factor=0.1),\nlayers.experimental.preprocessing.RandomRotation(factor=1.0),\nlayers.experimental.preprocessing.RandomZoom(height_factor=0.25, width_factor=0.25),\ndensenet\n] )","33125a8e":"# shape of the output ndarray \nmodel_densenet.output","5467b31d":"# compile model\nlearning_rate = 1e-3\nmodel_densenet.compile(optimizer=Adam(lr=learning_rate), \n                       loss='binary_crossentropy', metrics=['categorical_accuracy'])","a365c5eb":"# model summary\nmodel_densenet.summary()","8703dafe":"# constant training parameters\nEPOCHS=10","82c5b88d":"# callbacks\nmodel_callbacks = [\n    tf.keras.callbacks.EarlyStopping(monitor='loss', patience=2, verbose=0),\n    tf.keras.callbacks.ModelCheckpoint(filepath='.\/densenet_model.{epoch:02d}-{val_loss:.2f}.h5'),\n    tf.keras.callbacks.TensorBoard(log_dir='.\/logs'),\n]","063c649e":"history = model_densenet.fit(\ntrain_data,\nvalidation_data=validation_data,\nepochs=EPOCHS,\ncallbacks=model_callbacks     \n)","75350f12":"# plot model accuracy\nplt.plot(history.history['categorical_accuracy'])\nplt.plot(history.history['val_categorical_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","a49bdf4f":"# plot model loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","b94a9739":"# Build a base model for the Human Protein Atlas - Single Cell Classification Competition using Tensorflow and Keras\n\n## Introduction\n\nImportant insights from the previous competition, from Ouyang et al. Nature Methods (2019) sections \"Strategies used by the top-ranking solutions\" and \"Assessing the biological relevance of the winning model with class activation maps (CAMs)\":\n\n1. Data augmentation such as random cropping, rotation, and flipping might improve model performance. \n2. Modifications of the loss function. \n3. DenseNet architecture more effective than ResNet. \n4. Medium sized networks worked better than larger ones (for example DenseNet121 performed better than DenseNet169).\n5. Using larger image sizes might improve scores.\n6. Model ensembling and stacking might improve performance. \n7. Class activation maps (CAMs) can be used for visualization of model spatial attention.\n\n\nArticles: \n\n[1] Ouyang, W., Winsnes, C.F., Hjelmare, M. et al. Analysis of the Human Protein Atlas Image Classification competition. Nat Methods 16, 1254\u20131261 (2019). https:\/\/doi.org\/10.1038\/s41592-019-0658-6\n\nNotebooks:\n\n(1) [DenseNet Trained with Old and New Data](https:\/\/www.kaggle.com\/raimonds1993\/aptos19-densenet-trained-with-old-and-new-data) by Federico Raimondi.\n\n(2) [Tutorial on Keras ImageDataGenerator with flow_from_dataframe](https:\/\/vijayabhaskar96.medium.com\/tutorial-on-keras-imagedatagenerator-with-flow-from-dataframe-8bd5776e45c1) by Vijayabhaskar J. \n\n\nDatasets:\n\n(1) [HPA cell tiles sample balanced dataset: individual cells as RGB jpg images for rapid experimentation](https:\/\/www.kaggle.com\/thedrcat\/hpa-cell-tiles-sample-balanced-dataset) by Darek K\u0142eczek, a single-cell image version of the original dataset, below.\n\n(2) [Human Protein Atlas - Single Cell Classification Dataset](https:\/\/www.kaggle.com\/c\/hpa-single-cell-image-classification\/data).\n\nPackage documentation:\n\n(1) [Keras DenseNet121](https:\/\/keras.io\/api\/applications\/densenet).\n\n(2) [Tensorflow Module: tf.keras.layers.experimental.preprocessing](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/experimental\/preprocessing\/).\n\n(3) [Tensorflow Data augmentation](https:\/\/www.tensorflow.org\/tutorials\/images\/data_augmentation).\n\n(4) [Tensorflow Image classification](https:\/\/www.tensorflow.org\/tutorials\/images\/classification).\n\n(5) [Tensorflow Image dataset from directory](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/preprocessing\/image_dataset_from_directory).\n\n(6) [scikit-learn MultiLabelBinarizer](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.MultiLabelBinarizer.html#sklearn.preprocessing.MultiLabelBinarizer).","009140e0":"## 1. Pre-processing","4ca492a8":"### (1.1) Get unique single-cell image identifiers and multilabels","d4992bf2":"Use the tensorflow method 'flow_from_dataframe', as in this [notebook](https:\/\/www.kaggle.com\/minniekabra\/code-3may) ","afa49871":"### (1.2) Train and validation split","0b454ebc":"## 4. Evaluation","ad15953b":"## 2. Model definition","fdf8a215":"## 3. Training","7c31a0bd":"\nTasks:\n\n1. Preprocessing:\n\n(1.1) Get unique single-cell image identifiers and multilabels.\n\n(1.2) Train and validation split.\n\n(1.3) Configure dataset for performance.\n\n2. Model definition.\n\n3. Training.\n\n4. Evaluation."}}