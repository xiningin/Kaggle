{"cell_type":{"eec62dae":"code","9c39963c":"code","e4dda3dd":"code","56143711":"code","0e179fa9":"code","5a04317f":"code","3695d3e9":"code","42d973b9":"code","3f755829":"code","f0fe40c8":"code","9a8a2ced":"code","d860eb18":"code","3f49c47c":"code","661fb2bb":"code","77e25d1a":"code","3da7cd48":"code","fcecebc6":"code","c594f040":"code","d15a4014":"code","93c807b8":"code","cd7da98b":"code","c7517e78":"code","c581844d":"code","940d09c7":"code","8d1fbb14":"code","219ed2d7":"code","417b4292":"code","41743b86":"code","6a176afc":"code","97156566":"markdown","18d01860":"markdown","8bdd714e":"markdown","20657fb1":"markdown","5efcc3ec":"markdown","0f0ba7f7":"markdown","f51ddc08":"markdown","e2c65bd9":"markdown","8b3b7ce7":"markdown","82f14619":"markdown","3f71d179":"markdown","edc0ebf8":"markdown","f67d3c45":"markdown","4cd209cd":"markdown","884b03ff":"markdown","afb32ca5":"markdown","3e23f59c":"markdown","c7528450":"markdown","7dfd415a":"markdown"},"source":{"eec62dae":"import pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\n\n# \u307e\u3068\u3081\u3066\u51e6\u7406\u3059\u308b\ndata = pd.concat([train, test], sort=True)\n\ndata['Sex'].replace(['male','female'],[0, 1], inplace=True) #\u6587\u5b57\u5217\u306e\u7f6e\u63db\ndata['Embarked'].fillna(('S'), inplace=True) #\u6b20\u640d\u5024\u3092\u57cb\u3081\u308b\ndata['Embarked'] = data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int) #\u6587\u5b57\u5217\u306e\u7f6e\u63db\ndata['Fare'].fillna(np.mean(data['Fare']), inplace=True)\ndata['Age'].fillna(100, inplace=True)\ndata['FamilySize'] = data['Parch'] + data['SibSp'] + 1 #\u65b0\u3057\u3044\u7279\u5fb4\u91cf\u306e\u4f5c\u6210\ndata['IsAlone'] = 0\ndata.loc[data['FamilySize'] == 1, 'IsAlone'] = 1\ndata['Age'] = data['Age'].astype(int) #float\u3058\u3083\u30c7\u30fc\u30bf\u304c\u591a\u3059\u304e\u308b\u306e\u3067int\u306b\u3057\u3066\u5c11\u3057\u3060\u3051\u60c5\u5831\u91cf\u3092\u843d\u3068\u3057\u305f\ndata['Fare'] = data['Fare'].astype(int)\ndelete_columns = ['Cabin','Ticket','PassengerId'] #\u660e\u3089\u304b\u306b\u4f7f\u3048\u306a\u3044\u306e\u3067\u6d88\u3057\u305f\ndata.drop(delete_columns, axis = 1, inplace = True)\ndata.head()","9c39963c":"data = data.reset_index()\ndata['Middle_Name'] = 0\nfor i in range(len(data['Name'])):\n    val = 0\n    if 'Miss' in data['Name'][i]:\n        val = 1\n    elif 'Master' in data['Name'][i]:\n        val = 2\n    elif 'Mrs' in data['Name'][i]:\n        val = 3\n    elif 'Mr' in data['Name'][i]:\n        val = 4\n    data['Middle_Name'][i] = val\ndata.head()","e4dda3dd":"import seaborn as sns\nsns.countplot(x='Middle_Name',hue='Survived',data=data)","56143711":"data['Last_Name'] = \"hoge\"\nname_set = set()\nfor i in range(len(data['Name'])):\n    l = data['Name'][i].split()\n    for j in range(len(l)):\n        if '.' in l[j]:\n            data['Last_Name'][i] = l[j+1]\n            name_set.add(l[j+1])\ndata.head()","0e179fa9":"len(name_set)","5a04317f":"plt.figure(figsize=(30,10))\nsns.countplot(x='Last_Name',hue='Survived',data=data,)","3695d3e9":"import collections\ndata['Name_count'] = 0\nc = collections.Counter(data['Last_Name'])\nfor i in range(len(data['Last_Name'])):\n    data['Name_count'][i] = c[data['Last_Name'][i]]\ndata.head()","42d973b9":"plt.figure(figsize=(30,10))\nsns.countplot(x='Name_count',hue='Survived',data=data,)","3f755829":"delete_columns = ['index','Name','Last_Name']\ndata.drop(delete_columns, axis = 1, inplace = True)\ndata.head()","f0fe40c8":"train = train = data[:len(train)]\ntest = data[len(train):]\ntrain = train.reset_index()\ntest = test.reset_index()\ntrain.drop('index',axis=1,inplace=True)\ntest.drop('index',axis=1,inplace=True)\ny_train = train['Survived']\nx_train = train.drop('Survived', axis = 1)\nx_test = test.drop('Survived', axis = 1)","9a8a2ced":"from sklearn.model_selection import StratifiedKFold\n\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=0) #\u30b3\u30ec\u3060\u3051\u3067\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3067\u304d\u308b\nfor fold_id, (train_index, valid_index) in enumerate(cv.split(x_train, y_train)):\n    x_tr = x_train.loc[train_index, :]\n    x_val = x_train.loc[valid_index, :]\n    y_tr = y_train[train_index]\n    y_val = y_train[valid_index]\n\n    print(f'fold: {fold_id}')\n    print(f'y_tr y==1 rate: {sum(y_tr)\/len(y_tr)}')\n    print(f'y_val y==1 rate: {sum(y_val)\/len(y_val)}')","d860eb18":"import optuna\nimport lightgbm as lgb\nfrom sklearn.metrics import accuracy_score\ncategorical_features = ['Pclass','Age','Middle_Name']\ndef objective(trial):\n    models = [] #\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u8a18\u9332\n    oof_train = np.zeros((len(x_train),)) #\u5b66\u7fd2\u7cbe\u5ea6\u306e\u7b97\u51fa\u306b\u5229\u7528\u3059\u308b\n    cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n    params = {\n        'objective': 'binary',\n        'max_bin': trial.suggest_int('max_bin', 255, 512),\n        'learning_rate': 0.05,\n        'num_leaves': trial.suggest_int('num_leaves', 64,256),\n    }\n    for fold_id, (train_index, valid_index) in enumerate(cv.split(x_train, y_train)):\n        x_tr = x_train.loc[train_index, :]\n        x_val = x_train.loc[valid_index, :]\n        y_tr = y_train[train_index]\n        y_val = y_train[valid_index]\n\n        lgb_train = lgb.Dataset(x_tr, y_tr, categorical_feature=categorical_features)\n        lgb_eval = lgb.Dataset(x_val, y_val, reference=lgb_train, categorical_feature=categorical_features)\n\n        model = lgb.train(\n            params, lgb_train,\n            valid_sets=[lgb_train, lgb_eval],\n            verbose_eval=10,\n            num_boost_round=10000,\n            early_stopping_rounds=10\n        )\n\n        y_pred = model.predict(x_val, num_iteration=model.best_iteration) #validation\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3067\u7cbe\u5ea6\u3092\u8a55\u4fa1\u3059\u308b\n        oof_train[valid_index] = y_pred\n        models.append(model) #\u3053\u306e\u5206\u5272\u3067\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u8a18\u9332\n    y_pred_oof = (oof_train>0.5).astype(int) #0,1\u306b\u7f6e\u304d\u63db\u3048\u308b\n    acc = accuracy_score(y_train, y_pred_oof) #\u8aa4\u5dee\u95a2\u6570\u3000\u4eca\u56de\u306f\u8aa4\u308a\u7387\u3068\u3057\u305f\n    return 1.0 - acc","3f49c47c":"study = optuna.create_study(sampler=optuna.samplers.RandomSampler(seed=0))\nstudy.optimize(objective, n_trials=20)","661fb2bb":"study.best_params","77e25d1a":"y_preds = []\nx_preds = []\nmodels = []\noof_train = np.zeros((len(x_train),))\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\nparams = {\n    'objective': 'binary',\n    'max_bin': 427,\n    'learning_rate':   0.05,\n    'num_leaves': 111,\n}\nfor fold_id, (train_index, valid_index) in enumerate(cv.split(x_train, y_train)):\n    x_tr = x_train.loc[train_index, :]\n    x_val = x_train.loc[valid_index, :]\n    y_tr = y_train[train_index]\n    y_val = y_train[valid_index]\n\n    lgb_train = lgb.Dataset(x_tr, y_tr, categorical_feature=categorical_features)\n    lgb_eval = lgb.Dataset(x_val, y_val, reference=lgb_train, categorical_feature=categorical_features)\n\n    model = lgb.train(\n        params, lgb_train,\n        valid_sets=[lgb_train, lgb_eval],\n        verbose_eval=10,\n        num_boost_round=10000,\n        early_stopping_rounds=10\n    )\n\n    y_pred = model.predict(x_test, num_iteration=model.best_iteration)\n    oof_train[valid_index] = model.predict(x_val, num_iteration=model.best_iteration)\n    y_preds.append(y_pred)\n    x_preds.append(model.predict(x_train,num_iteration=model.best_iteration))\n    models.append(model)","3da7cd48":"feature_importance = [0 for i in range(len(x_train.columns))]\nfor m in models:\n    for i in range(len(m.feature_importance())):\n        feature_importance[i]+=m.feature_importance()[i]\nfeature_importance\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(16,10))\nax = fig.add_subplot(111)\nax.bar(range(len(x_train.columns)),feature_importance,tick_label=x_train.columns)","fcecebc6":"from sklearn.metrics import accuracy_score\n\ny_pred_oof = (oof_train>0.5).astype(int)\naccuracy_score(y_train, y_pred_oof)","c594f040":"y_sub = sum(y_preds) \/ len(y_preds)\ny_sub = (y_sub > 0.5).astype(int)\ny_sub[:10]","d15a4014":"sub = pd.DataFrame(pd.read_csv(\"..\/input\/titanic\/test.csv\")['PassengerId'])\nsub['Survived'] = y_sub\nsub.to_csv(\"submission_LightGBM.csv\", index = False)\nsub.head()","93c807b8":"delete_columns = ['IsAlone','SibSp','Sex','Parch']\ndata.drop(delete_columns, axis = 1, inplace = True)\ndata.head()","cd7da98b":"train = train = data[:len(train)]\ntest = data[len(train):]\ntrain = train.reset_index()\ntest = test.reset_index()\ntrain.drop('index',axis=1,inplace=True)\ntest.drop('index',axis=1,inplace=True)\ny_train = train['Survived']\nx_train = train.drop('Survived', axis = 1)\nx_test = test.drop('Survived', axis = 1)","c7517e78":"import optuna\nfrom sklearn.metrics import accuracy_score\nimport lightgbm as lgb\nfrom sklearn.model_selection import StratifiedKFold\ncategorical_feature = ['Embarked','Fare','Middle_Name']\ndef objective(trial):\n    models = []\n    oof_train = np.zeros((len(x_train),))\n    cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n    params = {\n        'objective': 'binary',\n        'max_bin': trial.suggest_int('max_bin', 4, 32), #\u3053\u3053\u3092\u5909\u66f4\u3057\u3066\u3044\u304f \u5927\u304d\u3044\u3068\u7cbe\u5ea6\u304c\u4e0a\u304c\u308a\u3084\u3059\u3044\u304c\u3001\u904e\u5b66\u7fd2\u3092\u306a\u304f\u3059\u306b\u306f\u5c0f\u3055\u304f\u3059\u308b\n        'learning_rate': trial.suggest_loguniform(\"learning_rate\",0.005,0.02), #\u3053\u3053\u3082\u8abf\u6574\u3059\u308b\n        'num_leaves': trial.suggest_int('num_leaves', 4, 16), #\u3053\u3053\u3092\u5909\u66f4\u3057\u3066\u3044\u304f \u5927\u304d\u3044\u3068\u7cbe\u5ea6\u304c\u4e0a\u304c\u308a\u3084\u3059\u3044\u304c\u3001\u904e\u5b66\u7fd2\u3092\u306a\u304f\u3059\u306b\u306f\u5c0f\u3055\u304f\u3059\u308b\n    }\n    for fold_id, (train_index, valid_index) in enumerate(cv.split(x_train, y_train)):\n        x_tr = x_train.loc[train_index, :]\n        x_val = x_train.loc[valid_index, :]\n        y_tr = y_train[train_index]\n        y_val = y_train[valid_index]\n\n        lgb_train = lgb.Dataset(x_tr, y_tr, categorical_feature=categorical_features)\n        lgb_eval = lgb.Dataset(x_val, y_val, reference=lgb_train, categorical_feature=categorical_features)\n\n        model = lgb.train(\n            params, lgb_train,\n            valid_sets=[lgb_train, lgb_eval],\n            verbose_eval=10,\n            num_boost_round=10000,\n            early_stopping_rounds=20\n        )\n\n        y_pred = model.predict(x_val, num_iteration=model.best_iteration)\n        oof_train[valid_index] = y_pred\n        models.append(model)\n    y_pred_oof = (oof_train>0.5).astype(int)\n    acc = accuracy_score(y_train, y_pred_oof)\n    return 1.0 - acc","c581844d":"study = optuna.create_study(sampler=optuna.samplers.RandomSampler(seed=0))\nstudy.optimize(objective, n_trials = 20)","940d09c7":"study.best_params","8d1fbb14":"y_preds = []\nx_preds = []\nmodels = []\noof_train = np.zeros((len(x_train),))\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\nparams = {\n    'objective': 'binary',\n    'max_bin': 13,\n    'learning_rate': 0.017232299486550178,\n    'num_leaves': 4,\n}\nfor fold_id, (train_index, valid_index) in enumerate(cv.split(x_train, y_train)):\n    x_tr = x_train.loc[train_index, :]\n    x_val = x_train.loc[valid_index, :]\n    y_tr = y_train[train_index]\n    y_val = y_train[valid_index]\n\n    lgb_train = lgb.Dataset(x_tr, y_tr, categorical_feature=categorical_features)\n    lgb_eval = lgb.Dataset(x_val, y_val, reference=lgb_train, categorical_feature=categorical_features)\n\n    model = lgb.train(\n        params, lgb_train,\n        valid_sets=[lgb_train, lgb_eval],\n        verbose_eval=10,\n        num_boost_round=10000,\n        early_stopping_rounds=10\n    )\n\n    y_pred = model.predict(x_test, num_iteration=model.best_iteration)\n    oof_train[valid_index] = model.predict(x_val, num_iteration=model.best_iteration)\n    y_preds.append(y_pred)\n    x_preds.append(model.predict(x_train,num_iteration=model.best_iteration))\n    models.append(model)","219ed2d7":"feature_importance = [0 for i in range(len(x_train.columns))]\nfor m in models:\n    for i in range(len(m.feature_importance())):\n        feature_importance[i]+=m.feature_importance()[i]\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(16,10))\nax = fig.add_subplot(111)\nax.bar(range(len(x_train.columns)),feature_importance,tick_label=x_train.columns)","417b4292":"from sklearn.metrics import accuracy_score\n\ny_pred_oof = (oof_train>0.5).astype(int)\naccuracy_score(y_train, y_pred_oof)","41743b86":"y_sub = sum(y_preds) \/ len(y_preds)\ny_sub = (y_sub > 0.5).astype(int)\ny_sub[:10]","6a176afc":"sub = pd.DataFrame(pd.read_csv(\"..\/input\/titanic\/test.csv\")['PassengerId'])\nsub['Survived'] = y_sub\nsub.to_csv(\"submission_LightGBM_tuning.csv\", index = False)\nsub.head()","97156566":"\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u3092\u6c42\u3081\u308b","18d01860":"\u3053\u308c\u3067\u7cbe\u5ea680.382%\u3067\u3057\u305f\u3002","8bdd714e":"\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u4e88\u6e2c\u3092\u7acb\u3066\u308b","20657fb1":"\u7cfb\u5217\uff14\u3001\u7cfb\u5217\uff13\u3001\u7cfb\u5217\uff11\u3067\u9855\u8457\u306b\u5dee\u304c\u73fe\u308c\u3066\u3044\u308b\u306e\u3067\u4f7f\u3048\u305d\u3046","5efcc3ec":"## \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u65b9\u6cd5\n\n\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u3053\u3068\u3067\u3044\u3044\u611f\u3058\u306b\uff08\u7b54\u3048\u306e\u30c7\u30fc\u30bf\u304c\u5747\u4e00\u306b\u306a\u308b\u3088\u3046\u306b\uff09\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3067\u304d\u308b","0f0ba7f7":"## 1.\u7279\u5fb4\u91cf\u89e3\u6790\n\u57fa\u672c\u3068\u306a\u308b\u300c\u6587\u5b57\u5217\u306e\u7f6e\u63db\u3068\u6b20\u640d\u5024\u51e6\u7406\u3092\u884c\u3046\u300d","f51ddc08":"\u7528\u610f\u3057\u305f\u7279\u5fb4\u91cf\u304c\u4f7f\u3048\u308b\u304b\u3069\u3046\u304b\u30b0\u30e9\u30d5\u3092\u66f8\u3044\u3066\u78ba\u304b\u3081\u308b","e2c65bd9":"Light GBM\u3067\u4e88\u6e2c\u3092\u7acb\u3066\u308b\n\nOptuna\u3067\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","8b3b7ce7":"### \u624b\u9806\n1. \u7279\u5fb4\u91cf\u89e3\u6790\n2. \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n3. \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","82f14619":"\u3068\u308a\u3042\u3048\u305a\u4e0d\u8981\u305d\u3046\u306a\u30c7\u30fc\u30bf\u3092\u524a\u9664\u3057\u3066\u304b\u3089\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u884c\u3046\n\n\u4f55\u5ea6\u3082Validation\u30b9\u30b3\u30a2\u3068\u5b66\u7fd2\u30b9\u30b3\u30a2\u306e\u5dee\u304c\u5c0f\u3055\u304f\u306a\u308a\u3001\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u304c\u3044\u3044\u611f\u3058\u306b\u306a\u308b\uff08\u7279\u5b9a\u306e\u30c7\u30fc\u30bf\u306b\u504f\u3089\u306a\u3044\u3088\u3046\u306b\u306a\u308b\uff09\u307e\u3067\u8a66\u884c\u932f\u8aa4\u3059\u308b\u3002\n\n\u4ee5\u4e0b\u306b\u306f\u8a66\u884c\u932f\u8aa4\u3057\u305f\u7d50\u679c\u306e\u307f\u3092\u793a\u3059","3f71d179":"\u6975\u7aef\u306a\u7d50\u679c\u306f\u51fa\u306a\u304b\u3063\u305f\u3051\u308c\u30694,8,13,19,56\u306f\u304b\u306a\u308a\u6709\u7528\u305d\u3046\u306a\u306e\u3067\u4f7f\u3063\u3066\u307f\u308b\n\n\u3044\u3089\u306a\u3044\u30c7\u30fc\u30bf\u3092\u524a\u9664\u3057\u3066\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3059\u308b","edc0ebf8":"\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024","f67d3c45":"## LightGBM\u3067\u7cbe\u5ea680.382%\u3092\u51fa\u3059\u307e\u3067\u306e\u6d41\u308c","4cd209cd":"Last namen\u306b\u306f\u5bb6\u67c4\u304c\u51fa\u305d\u3046\u3001\u8cb4\u65cf\u306e\u307b\u3046\u304c\u52a9\u3051\u3089\u308c\u305d\u3046\u306a\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u3084\u3063\u3066\u307f\u308b","884b03ff":"\u7a2e\u985e\u6570\u304c\u7570\u5e38\u306a\u306e\u3067\u3053\u306e\u307e\u307e\u3067\u306f\u4f7f\u3048\u306a\u3044","afb32ca5":"\u3053\u308c\u306f\u660e\u3089\u304b\u306b\u904e\u5b66\u7fd2\u3057\u3066\u3044\u308b\u3002\u904e\u5b66\u7fd2\u306e\u5224\u65ad\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\n\n1. validation\u30b9\u30b3\u30a2\u3068\u5b66\u7fd2\u30b9\u30b3\u30a2\u304c\u5927\u304d\u304f\u7570\u306a\u3063\u3066\u3044\u308b\n2. \u5217\u3092\u7279\u5b9a\u3067\u304d\u308b\u3088\u3046\u306a\u7279\u5fb4\u91cf\uff08\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u6570\u304c\u591a\u3044\u3082\u306e\uff09\u304c\u7570\u5e38\u306a\u91cd\u8981\u5ea6\u3092\u793a\u3059\n\n\u56de\u907f\u3059\u308b\u65b9\u6cd5\u3068\u3057\u3066\u306f\n\n1. \u89e3\u6790\u3059\u308b\u30c7\u30fc\u30bf\u306e\u6b21\u5143\u3092\u843d\u3068\u3059\u305f\u3081\u306b\u4e0d\u8981\u306a\u30c7\u30fc\u30bf\u3092\u524a\u9664\u3059\u308b\n2. \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u3002\n\n\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8abf\u6574\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3059\u308b\u3002https:\/\/lightgbm.readthedocs.io\/en\/latest\/Parameters-Tuning.html\n\n\u30c7\u30fc\u30bf\u306e\u524a\u9664\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3001\u904e\u5b66\u7fd2\u3057\u3066\u3044\u308b\u3068\u304d\u306b\u306f\u4e0d\u8981\u3067\u3082\u3001\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u3068\u91cd\u8981\u5ea6\u304c\u4e0a\u304c\u308b\u30b1\u30fc\u30b9\u3082\u3042\u308b\u3002\n\n\u5e38\u8b58\u7684\u306b\u8003\u3048\u3066\u3044\u3089\u306a\u3044\u3060\u308d\u3046\u3068\u601d\u3046\u30c7\u30fc\u30bf\u306f\u524a\u9664\u3057\u3066\u826f\u3044","3e23f59c":"\u3061\u3083\u3093\u3068\u51fa\u6765\u305f\u3063\u307d\u3044","c7528450":"\u540d\u524d\u3092\u5206\u6790\u3057\u3066\u3044\u304f","7dfd415a":"\u4e00\u90e8\u7570\u5e38\u306b\u4eba\u6570\u306e\u591a\u3044\u30c7\u30fc\u30bf\u304c\u3042\u308b\u306e\u3067\u305d\u3044\u3064\u3089\u306f\u4f7f\u3048\u305d\u3046\n\n\u4eba\u6570\u3067\u30ab\u30c6\u30b4\u30e9\u30a4\u30ba\u3057\u3066\u307f\u308b"}}