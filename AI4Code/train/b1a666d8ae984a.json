{"cell_type":{"63cabd83":"code","dd25f765":"code","ccef943d":"code","e491b634":"code","e180cfb4":"code","a3b9f4fa":"code","89e35786":"code","a8fd4257":"code","03c92308":"code","d7a046e4":"code","70845d38":"code","14c4ace2":"code","4b991ec5":"code","c42ae9a7":"code","dac632b5":"code","88197018":"code","d12a26b6":"code","368363a3":"code","4d224788":"code","786f90c8":"code","065b803f":"code","e9b901c5":"code","762eaa6f":"code","8cb70508":"code","0d448d32":"code","3a693a35":"code","2419d7da":"code","081e6bdb":"code","e010ba08":"code","3adf7f7d":"code","0b433dd5":"code","23006f0f":"code","4d3df96b":"code","6e847856":"code","b4e2bc25":"code","65875804":"code","11e6002a":"code","617f152d":"code","039286c0":"code","737c171c":"code","f5ef1218":"code","87fd4754":"code","e84794cd":"code","32e41cdc":"code","57f94369":"code","f0d8a91b":"code","14cc6a5d":"code","3dcabb53":"code","c6d2935a":"code","202aa4c1":"code","506dbe91":"markdown","adae791f":"markdown","1fe7f85d":"markdown","2d2e2cc7":"markdown"},"source":{"63cabd83":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd25f765":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport pandas_profiling as pdp\nimport gc\ngc.enable()\nfrom scipy import stats\nfrom sklearn import preprocessing\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import roc_auc_score","ccef943d":"data=pd.read_csv('..\/input\/star-type-classification\/Stars.csv')","e491b634":"data.head()","e180cfb4":"data.tail()","a3b9f4fa":"data.info()","89e35786":"data.describe().T","a8fd4257":"data.Type","03c92308":"sns.histplot(data=data,hue='Type',palette=\"Set1\", x=\"Temperature\", kde=True)","d7a046e4":"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(18, 14))\nsns.histplot(data=data,hue='Type',palette=\"Set1\", x=\"L\", kde=True,ax=axes[0][0])\nsns.histplot(data=data,hue='Type',palette=\"Set1\", x=\"R\", kde=True,ax=axes[0][1])\nsns.histplot(data=data,hue='Type',palette=\"Set1\", x=\"A_M\", kde=True,ax=axes[1][0])\nsns.histplot(data=data,hue='Type',palette=\"Set1\", x=\"Spectral_Class\", kde=True,ax=axes[1][1])","70845d38":"fig, axes = plt.subplots(figsize=(20, 10))\nsns.histplot(data=data,hue='Type',palette=\"Set1\", x=\"Color\", kde=True)\nplt.xticks(rotation=45)","14c4ace2":"report = pdp.ProfileReport(data, title=\"Cardiovascular disease Report\",minimal=True)\nreport","4b991ec5":"plt.figure(figsize=(16,8))\nsns.heatmap(data.corr(),annot=True)","c42ae9a7":"duplicado = data.duplicated()\nprint(duplicado.any())\nprint(data[duplicado])","dac632b5":"plt.figure(figsize=(8,4))\nsns.boxplot(data=data,x=data[\"Temperature\"],color='red')","88197018":"plt.figure(figsize=(8,4))\nsns.boxplot(data=data,x=data[\"R\"],color='red')","d12a26b6":"plt.figure(figsize=(8,4))\nsns.boxplot(data=data,x=data[\"L\"],color='red')","368363a3":"plt.figure(figsize=(8,4))\nsns.boxplot(data=data,x=data[\"A_M\"],color='red')","4d224788":"data.drop(data[(data['Temperature'] > data['Temperature'].quantile(0.975)) | (data['Temperature'] < data['Temperature'].quantile(0.025))].index,inplace=True)\ndata.drop(data[(data['R'] > data['R'].quantile(0.975)) | (data['R'] < data['R'].quantile(0.025))].index,inplace=True)\ndata.drop(data[(data['L'] > data['L'].quantile(0.975)) | (data['L'] < data['L'].quantile(0.025))].index,inplace=True)\ndata.drop(data[(data['A_M'] > data['A_M'].quantile(0.975)) | (data['A_M'] < data['A_M'].quantile(0.025))].index,inplace=True)","786f90c8":"plt.figure(figsize=(8,4))\nsns.boxplot(data=data,x=data[\"Temperature\"],color='red')","065b803f":"plt.figure(figsize=(8,4))\nsns.boxplot(data=data,x=data[\"R\"],color='red')","e9b901c5":"plt.figure(figsize=(8,4))\nsns.boxplot(data=data,x=data[\"L\"],color='red')","762eaa6f":"plt.figure(figsize=(8,4))\nsns.boxplot(data=data,x=data[\"A_M\"],color='red')","8cb70508":"le = preprocessing.LabelEncoder()\nselected_col = ['Color','Spectral_Class']\n\nle.fit(data[selected_col].values.flatten())\n\ndata[selected_col] = data[selected_col].apply(le.fit_transform)","0d448d32":"plt.figure(figsize=(16,8))\nsns.heatmap(data.corr(),annot=True)","3a693a35":"sns.pairplot(data, hue='Type', diag_kind='hist',palette=\"Set1\")\nplt.show()","2419d7da":"robust_sc = preprocessing.RobustScaler()\nstandard_sc = preprocessing.StandardScaler() \nminmax_sc = preprocessing.MinMaxScaler() ","081e6bdb":"X = data.drop('Type',axis=1)\ny = data[\"Type\"]","e010ba08":"resultado = []\n\nfor x in [robust_sc,standard_sc,minmax_sc]:\n    scaler = x.fit(X)\n    X_new = x.transform(X)\n    tree = DecisionTreeClassifier(max_depth=10,random_state=42)\n    tree.fit(X_new,y)\n    y_pred = tree.predict(X_new)\n    f1sc=f1_score(y, y_pred, average='weighted')\n    rauc=(y, y_pred)\n    resultado.append(f1sc)\n    print(\"El escalado Utilizado--->\",x)\n    print(\"f1 segun el tipo de estrategia:\",f1sc)\n    print(\"----------------------------------------\")","3adf7f7d":"X_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.3,random_state=42,stratify=y)","0b433dd5":"standard_sc.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","23006f0f":"gbm = XGBClassifier(verbosity=1)\nparams_xgb = {\n        \"n_estimators\":[150,250,500],\n        \"learning_rate\":[0.01,0.1],\n        'gpu_id': [0],\n        \"predictor\":[\"gpu_predictor\"],\n        'tree_method': ['gpu_hist'],\n        \"updater\":[\"grow_gpu_hist\"],\n        \"sampling_method\":[\"gradient_based\"],\n        \"updater\":[\"grow_gpu_hist\"]\n}","4d3df96b":"model_xgb = GridSearchCV(gbm,param_grid=params_xgb, cv=5,n_jobs=-1)\nmodel_xgb.fit(X_train,y_train)","6e847856":"print(\"Best params: \"+str(model_xgb.best_params_))\nprint(\"Best Score: \"+str(model_xgb.best_score_)+'\\n')","b4e2bc25":"scores = pd.DataFrame(model_xgb.cv_results_)\nscores.sort_values(by=\"rank_test_score\")","65875804":"y_train_pred_xgb = model_xgb.predict(X_train)\ny_test_pred_xgb = model_xgb.predict(X_test)","11e6002a":"print(classification_report(y_test,y_test_pred_xgb))","617f152d":"plot_confusion_matrix(model_xgb, X_test, y_test)","039286c0":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold\nfrom sklearn.neural_network import MLPClassifier","737c171c":"model_nb = GaussianNB()\nmodel_rf = RandomForestClassifier(random_state=42, n_jobs=-1)\nmodel_xgb = XGBClassifier(random_state=42)\nmodel_lgbm = LGBMClassifier(random_state=42, n_jobs=-1)\nmodel_knn = KNeighborsClassifier(n_jobs=-1)","f5ef1218":"models = []\n\nmodels.append(('NB',model_nb))\nmodels.append(('RF',model_rf))\nmodels.append(('XGB',model_xgb))\nmodels.append(('LGBM',model_lgbm))\nmodels.append(('KNN',model_knn))","87fd4754":"cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\nresults = []\nnames = []\n\nfor name, model in models:\n    scores = cross_val_score(model,X_train, y_train, scoring='f1_weighted', cv=cv, n_jobs=-1)\n    accuracy = scores.mean()\n    std = scores.std()\n    print(f\"{name} : Mean ROC {accuracy} STD:({std})\")\n    results.append(scores)\n    names.append(name)","e84794cd":"cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\nresults = []\nnames = []\n\nfor name, model in models:\n    scores = cross_val_score(model,X_test, y_test, scoring='f1_weighted', cv=cv, n_jobs=-1)\n    accuracy = scores.mean()\n    std = scores.std()\n    print(f\"{name} : Mean ROC {accuracy} STD:({std})\")\n    results.append(scores)\n    names.append(name)","32e41cdc":"clf = MLPClassifier(random_state=42)\nparams_MLP = {\n        \"hidden_layer_sizes\":[64,128,256],\n        \"activation\":[\"identity\", \"logistic\", \"tanh\", \"relu\"],\n        'solver': [\"lbfgs\", \"sgd\", \"adam\"],\n        \"learning_rate\":[\"constant\", \"invscaling\", \"adaptive\"],\n        'max_iter': [100,200,300],\n        \"warm_start\":[True]\n    }","57f94369":"model_MLP = GridSearchCV(clf,param_grid=params_MLP, cv=3,n_jobs=-1)\nmodel_MLP.fit(X_train,y_train)","f0d8a91b":"print(\"Best params: \"+str(model_MLP.best_params_))\nprint(\"Best Score: \"+str(model_MLP.best_score_)+'\\n')","14cc6a5d":"scores = pd.DataFrame(model_MLP.cv_results_)\nscores.sort_values(by=\"rank_test_score\")","3dcabb53":"y_train_pred_MLP = model_MLP.predict(X_train)\ny_test_pred_MLP = model_MLP.predict(X_test)","c6d2935a":"print(classification_report(y_test,y_test_pred_xgb))","202aa4c1":"plot_confusion_matrix(model_MLP, X_test, y_test)","506dbe91":"# EDA","adae791f":"**Star Type Classification\nFor comparing all models of ML\nIt can be used for prediction\n\n   * Temperature -- K\n    L -- L\/Lo\n    R -- R\/Ro\n    AM -- Mv\n    Color -- General Color of Spectrum\n    Spectral_Class -- O,B,A,F,G,K,M \/ SMASS - https:\/\/en.wikipedia.org\/wiki\/Asteroid_spectral_types\n    Type -- Red Dwarf, Brown Dwarf, White Dwarf, Main Sequence , Super Giants, Hyper Giants\n\n    TARGET:\n    Type\n\nfrom 0 to 5\n\n    Red Dwarf - 0\n    Brown Dwarf - 1\n    White Dwarf - 2\n    Main Sequence - 3\n    Super Giants - 4\n    Hyper Giants - 5\n    MATH:\n*\nLo = 3.828 x 10^26 Watts\n(Avg Luminosity of Sun)\nRo = 6.9551 x 10^8 m\n(Avg Radius of Sun)**","1fe7f85d":"# Classifiers","2d2e2cc7":"# Preprocessing"}}