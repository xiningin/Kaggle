{"cell_type":{"24ec16f4":"code","c4c8917b":"code","dcbea270":"code","a4350d7f":"code","8f981404":"code","efa5a64d":"code","b30fbf53":"code","1e77c577":"code","8c83807e":"code","2baed299":"code","0f4520c2":"code","654b2b2c":"code","4fb1174c":"code","9feb7396":"code","24690607":"code","4ac89a01":"code","3ff8b053":"code","ada4cbca":"code","74f6dae0":"code","ec2a5bd1":"code","ff0e130e":"code","a6989b86":"code","e9c2af48":"code","82782d83":"code","4951627f":"code","f8739b4f":"code","4daa1f1e":"code","3493d716":"code","8ecf9a2f":"code","14563674":"code","1f3c2778":"code","96283b5b":"code","f5b349c0":"code","8e0b5a0f":"code","b6c96917":"code","2f9109f6":"code","c6962cb8":"markdown","5c500840":"markdown","efa911a1":"markdown","1897d0b7":"markdown","bc2f3f53":"markdown","92370c9a":"markdown","a9e02441":"markdown"},"source":{"24ec16f4":"import pandas as pd\nimport seaborn as sns\nimport numpy as np","c4c8917b":"train_df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntrain_df.head()\n","dcbea270":"train_df.info()","a4350d7f":"qualitative_cols = [c for c in train_df.columns if train_df[c].dtype == object]\nquantative_cols = [c for c in train_df.columns if train_df[c].dtype != object]\nfor c in qualitative_cols:\n    train_df[c] = train_df[c].astype('category')","8f981404":"train_df.describe().T","efa5a64d":"train_df.drop(['Id'],axis=1,inplace=True)","b30fbf53":"\nx = train_df.isna().sum()\nx = x[x > 500]\ntrain_df.drop(x.keys(),axis = 1,inplace=True)","1e77c577":"x = train_df.isna().sum()\nx[x > 0]","8c83807e":"def add_categories(train_df):\n    train_df.BsmtQual.cat.add_categories(['NA'],inplace=True)\n    train_df.BsmtCond.cat.add_categories(['NA'],inplace=True)\n    train_df.BsmtExposure.cat.add_categories(['NA'],inplace=True)\n    train_df.BsmtFinType1.cat.add_categories(['NA'],inplace=True)\n    train_df.BsmtFinType2.cat.add_categories(['NA'],inplace=True)\n    train_df.GarageType.cat.add_categories(['NA'],inplace=True)\n    train_df.GarageCond.cat.add_categories(['NA'],inplace=True)\n    train_df.GarageFinish.cat.add_categories(['NA'],inplace=True)\n    train_df.GarageQual.cat.add_categories(['NA'],inplace=True)\n","2baed299":"def fillna(train_df):\n    train_df.LotFrontage.fillna(0,inplace=True)\n    train_df.MasVnrType.fillna(\"None\",inplace=True)\n    train_df.MasVnrArea.fillna(0,inplace=True)\n    train_df.BsmtQual.fillna('NA',inplace=True)\n    train_df.BsmtCond.fillna('NA',inplace=True)\n    train_df.BsmtExposure.fillna('NA',inplace=True)\n    train_df.BsmtFinType1.fillna('NA',inplace=True)\n    train_df.BsmtFinType2.fillna('NA',inplace=True)\n    train_df.GarageType.fillna('NA',inplace=True)\n    train_df.GarageCond.fillna('NA',inplace=True)\n    train_df.GarageFinish.fillna('NA',inplace=True)\n    train_df.GarageQual.fillna('NA',inplace=True)\n    train_df.GarageYrBlt.fillna(0,inplace=True)\n    train_df.Electrical.fillna(train_df.Electrical.mode()[0],inplace=True)\n","0f4520c2":"add_categories(train_df)\nfillna(train_df)","654b2b2c":"x = train_df.drop(['SalePrice'],axis=1)\ny = train_df.SalePrice\ny = np.log1p(y.values.ravel())","4fb1174c":"qualitative_cols = [c for c in train_df.columns if train_df[c].dtype.name == 'category']\nquantative_cols = [c for c in train_df.columns if train_df[c].dtype.name != 'category']","9feb7396":"correlation = abs(train_df.corr()['SalePrice']).sort_values(ascending=False)\nfeatures_correlated = correlation[correlation>0.5].keys()\n","24690607":"toplot = (train_df[features_correlated])\ntoplot = toplot.sample(n=50,random_state=42)\nbefore=sns.pairplot(toplot,hue=\"SalePrice\",diag_kws={\"hue\": None, \"color\": \".2\"})\nbefore.fig.suptitle(\"pair plot of the dataset before normalization\",y=1.00)","4ac89a01":"print(qualitative_cols[0])","3ff8b053":"qualtoplot = qualitative_cols#[0:2]\n# print(qualtoplot)\ntoplot= train_df[qualtoplot].copy(deep=True)\ntoplot['SalePrice'] = y\n# toplot = toplot.sample(n=30,random_state=1)\n# sns.displot(toplot[qualtoplot])\nfor c in qualitative_cols:\n    sns.catplot(x=c, y=\"SalePrice\", data=toplot,kind=\"box\")\n# print(y.dtype)\n# before=sns.catplot(toplot[qualtoplot],toplot['SalePrice'])\n# before.fig.suptitle(\"pair plot of the dataset before normalization\",y=1.00)","ada4cbca":"features = features_correlated.drop(['SalePrice']).to_list()\ncat_features = [\n    'MSZoning',\n    'Street',\n    'Neighborhood',\n    'Condition1',\n    'Condition2',\n#     'HouseStyle',\n    'Exterior1st',\n    'Exterior2nd',\n#     'MasVnrType',\n#     'ExterQual',\n#     'ExterCond',\n#     'Foundation',\n#     'BsmtQual',\n#     'BsmtCond',\n#     'BsmtExposure',\n    'Heating',\n#     'HeatingQC',\n    'CentralAir',\n#     'Electrical',\n    'KitchenQual',\n    'GarageFinish',\n    'PavedDrive',\n    'SaleType',\n    'SaleCondition'\n]\nfeatures.extend(cat_features)\nlen(features)\nsns.heatmap(train_df[features].corr(), annot=True)","74f6dae0":"x_oi = x[features]\nx_oi.head()","ec2a5bd1":"x_dummy = pd.get_dummies(data=x_oi,drop_first=True)\nx_dummy.shape","ff0e130e":"train_features = x_dummy.columns\ntrain_features","a6989b86":"from sklearn.model_selection import train_test_split","e9c2af48":"X_train, X_test, y_train, y_test = train_test_split(x_dummy, y, test_size=0.2, random_state=42)","82782d83":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression","4951627f":"poly_reg=PolynomialFeatures(degree=1)\nX_poly=poly_reg.fit_transform(X_train)\n# poly_reg.fit(X_poly,y)\nlin_reg2=LinearRegression()\nlin_reg2.fit(X_poly,y_train)","f8739b4f":"# sns.scatter(y,color='red')\n# sns.plot(lin_reg2.predict(poly_reg.fit_transform(x_dummy)),color='blue')\n# sns.title('Truth or bluff(Polynomial Regression)')\n# sns.xlabel('Position Level')\n# sns.ylabel('Salary')\n# sns.show()\nX_test_poly=poly_reg.fit_transform(X_test)\nprint(lin_reg2.score(X_test_poly,y_test))\nprint(lin_reg2.score(X_poly,y_train))\n#y_test.head()","4daa1f1e":"import matplotlib.pyplot as plt\n","3493d716":"# step = 0\n# sample = 30\nx_predict = X_poly#[step*sample:step*sample+sample]\ny_predict = lin_reg2.predict(X_test_poly)\nplt.subplots(figsize=(24, 10))\nplt.plot(range(len(y_test)),np.e**y_test -1)#[step*sample:step*sample+sample])\nplt.plot(range(len(y_predict)),np.e**y_predict -1)#[step*sample:step*sample+sample])\n","8ecf9a2f":"test_df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","14563674":"for c in qualitative_cols:\n    test_df[c] = test_df[c].astype('category')","1f3c2778":"test_df.info()","96283b5b":"add_categories(test_df)\nfillna(test_df)","f5b349c0":"x_valid = test_df[features].copy(deep=True)\nx_valid.GarageArea.fillna(0,inplace=True)\nx_valid.GarageCars.fillna(0,inplace=True)\nx_valid.TotalBsmtSF.fillna(0,inplace=True)\n# x_valid.BsmtUnfSF.fillna(0,inplace=True)\n# x_valid.BsmtFullBath.fillna(0,inplace=True)\n# print(x_valid.Exterior1st)\nx_valid.Exterior1st.fillna('AsphShn',inplace=True)\nx_valid.Exterior2nd.fillna('AsphShn',inplace=True)\n# x_valid.BsmtFinSF1.fillna(0,inplace=True)\nx_valid.MSZoning.fillna(x_valid.MSZoning.mode()[0],inplace=True)\nx_valid.KitchenQual.fillna(x_valid.KitchenQual.mode()[0],inplace=True)\nx_valid.SaleType.fillna('Con',inplace=True)\n\nisna = x_valid.isna().sum()\nisna[isna > 0]\n\n# x_valid = pd.get_dummies(test_df[features],drop_first=True)\n","8e0b5a0f":"x_valid.info()\nx_valid_dummies = pd.get_dummies(data=x_valid,drop_first=True)","b6c96917":"# x_valid_dummies.info()\ntest_features = x_valid_dummies.columns\ncommon_features = set(test_features).intersection(train_features)\ntest_features_d_c = set(test_features).difference(common_features)\ntrain_features_d_c = set(train_features).difference(common_features)\ntest_features =test_features.drop(test_features_d_c)\nx_valid_dummies = x_valid_dummies[test_features]\nfor c in list(set(train_features).difference(common_features)):\n    x_valid_dummies[c] = 0\nx_valid_dummies.shape\n\nx_=poly_reg.fit_transform(x_valid_dummies)\ny_test_predict = lin_reg2.predict(x_)","2f9109f6":"final_test_data= pd.DataFrame()\nfinal_test_data['Id'] = test_df.Id.astype(\"int32\")\nfinal_test_data['SalePrice'] = np.e**y_test_predict -1\nfinal_test_data.to_csv('\/kaggle\/working\/output.csv', index=False)\n","c6962cb8":"## updating columns","5c500840":"# Separating Features and Price","efa911a1":"## solving null values","1897d0b7":"# exploring Correlation","bc2f3f53":"# Exploring Data","92370c9a":"# Import Libraries","a9e02441":"# Read Data"}}