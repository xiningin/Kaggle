{"cell_type":{"9f9cb260":"code","1cf79e4a":"code","7a87846f":"code","af770496":"code","463ff129":"code","a7d04485":"code","f83a9662":"code","514bf327":"code","0e1377f9":"code","c06c75d1":"code","fabb47b3":"code","6e73607f":"code","546ec708":"code","6a6d4794":"code","2b370e0d":"code","12f96202":"code","fe029416":"code","4f088ae2":"code","053a49aa":"code","164ea568":"code","2575bbec":"code","30ecdf64":"code","b1085598":"code","cf23103d":"code","ba522ae5":"code","518c02f1":"code","8f0fa2cc":"code","b0069436":"code","a6b31d14":"code","aae2c6d8":"code","05af4c91":"code","92a911e6":"code","89a2e3e0":"code","139d8ed9":"code","2fd05161":"code","ba5c14d4":"code","210fbb93":"code","4956a970":"code","2903159e":"code","44249336":"code","caa03d91":"code","20f3c86d":"code","5821a8e8":"code","96961bfa":"code","9760ada5":"code","11827977":"code","5a042d93":"code","e0c84953":"code","5bd3ae6f":"markdown","7f289b6f":"markdown","50b8fcab":"markdown","11d65b2b":"markdown","6f6485e8":"markdown","0f7ed6f7":"markdown"},"source":{"9f9cb260":"import pandas as pd\nimport numpy as np\nimport keras\n\nnp.random.seed(2)","1cf79e4a":"data = pd.read_csv('..\/input\/creditcard.csv')","7a87846f":"data.head()","af770496":"df=data.iloc[:,1:29]\ndf.head()","463ff129":"import seaborn as sns\nsns.violinplot(df.iloc[:,0])","a7d04485":"from sklearn.preprocessing import StandardScaler\ndata['normalizedAmount'] = StandardScaler().fit_transform(data['Amount'].values.reshape(-1,1))\ndata = data.drop(['Amount'],axis=1)","f83a9662":"data.head()","514bf327":"data = data.drop(['Time'],axis=1)\ndata.head()","0e1377f9":"X = data.iloc[:, data.columns != 'Class']\ny = data.iloc[:, data.columns == 'Class']","c06c75d1":"y.head()","fabb47b3":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state=0)","6e73607f":"X_train.shape","546ec708":"X_test.shape","6a6d4794":"X_train = np.array(X_train)\nX_test = np.array(X_test)\ny_train = np.array(y_train)\ny_test = np.array(y_test)","2b370e0d":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout","12f96202":"model = Sequential([\n    Dense(units=16, input_dim = 29,activation='relu'),\n    Dense(units=24,activation='relu'),\n    Dropout(0.5),\n    Dense(20,activation='relu'),\n    Dense(24,activation='relu'),\n    Dense(1,activation='sigmoid'),\n])","fe029416":"model.summary()","4f088ae2":"model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\nmodel.fit(X_train,y_train,batch_size=15,epochs=5)","053a49aa":"score = model.evaluate(X_test, y_test)","164ea568":"print(score)","2575bbec":"import matplotlib.pyplot as plt\nimport itertools\n\nfrom sklearn import svm, datasets\nfrom sklearn.metrics import confusion_matrix\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.tight_layout()","30ecdf64":"y_pred = model.predict(X_test)\ny_test = pd.DataFrame(y_test)","b1085598":"cnf_matrix = confusion_matrix(y_test, y_pred.round())","cf23103d":"print(cnf_matrix)","ba522ae5":"plot_confusion_matrix(cnf_matrix, classes=[0,1])","518c02f1":"plt.show()","8f0fa2cc":"y_pred = model.predict(X)\ny_expected = pd.DataFrame(y)\ncnf_matrix = confusion_matrix(y_expected, y_pred.round())\nplot_confusion_matrix(cnf_matrix,classes=[0,1])\nplt.show()","b0069436":"fraud_indices = np.array(data[data.Class == 1].index)\nnumber_records_fraud = len(fraud_indices)\nprint(number_records_fraud)","a6b31d14":"normal_indices = data[data.Class == 0].index","aae2c6d8":"random_normal_indices = np.random.choice(normal_indices, number_records_fraud, replace=False)\nrandom_normal_indices = np.array(random_normal_indices)\nprint(len(random_normal_indices))","05af4c91":"under_sample_indices = np.concatenate([fraud_indices,random_normal_indices])\nprint(len(under_sample_indices))","92a911e6":"under_sample_data = data.iloc[under_sample_indices,:]","89a2e3e0":"X_undersample = under_sample_data.iloc[:,under_sample_data.columns != 'Class']\ny_undersample = under_sample_data.iloc[:,under_sample_data.columns == 'Class']","139d8ed9":"X_train, X_test, y_train, y_test = train_test_split(X_undersample,y_undersample, test_size=0.3)","2fd05161":"X_train = np.array(X_train)\nX_test = np.array(X_test)\ny_train = np.array(y_train)\ny_test = np.array(y_test)","ba5c14d4":"model.summary()","210fbb93":"model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\nmodel.fit(X_train,y_train,batch_size=15,epochs=5)","4956a970":"y_pred = model.predict(X_test)\ny_expected = pd.DataFrame(y_test)\ncnf_matrix = confusion_matrix(y_expected, y_pred.round())\nplot_confusion_matrix(cnf_matrix, classes=[0,1])\nplt.show()","2903159e":"y_pred = model.predict(X)\ny_expected = pd.DataFrame(y)\ncnf_matrix = confusion_matrix(y_expected, y_pred.round())\nplot_confusion_matrix(cnf_matrix, classes=[0,1])\nplt.show()","44249336":"%%bash\npip install -U imbalanced-learn","caa03d91":"from imblearn.over_sampling import SMOTE","20f3c86d":"X_resample, y_resample = SMOTE().fit_sample(X,y.values.ravel())","5821a8e8":"y_resample = pd.DataFrame(y_resample)\nX_resample = pd.DataFrame(X_resample)","96961bfa":"X_train, X_test, y_train, y_test = train_test_split(X_resample,y_resample,test_size=0.3)","9760ada5":"X_train = np.array(X_train)\nX_test = np.array(X_test)\ny_train = np.array(y_train)\ny_test = np.array(y_test)","11827977":"model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\nmodel.fit(X_train,y_train,batch_size=15,epochs=5)","5a042d93":"y_pred = model.predict(X_test)\ny_expected = pd.DataFrame(y_test)\ncnf_matrix = confusion_matrix(y_expected, y_pred.round())\nplot_confusion_matrix(cnf_matrix, classes=[0,1])\nplt.show()","e0c84953":"y_pred = model.predict(X)\ny_expected = pd.DataFrame(y)\ncnf_matrix = confusion_matrix(y_expected, y_pred.round())\nplot_confusion_matrix(cnf_matrix, classes=[0,1])\nplt.show()","5bd3ae6f":"##\u00a0Training","7f289b6f":"## Undersampling","50b8fcab":"##\u00a0Data exploration","11d65b2b":"##\u00a0SMOTE","6f6485e8":"## Deep neural network","0f7ed6f7":"##\u00a0Pre-processing"}}