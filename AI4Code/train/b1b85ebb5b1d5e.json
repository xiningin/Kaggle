{"cell_type":{"b0881ed8":"code","b0b32760":"code","4040986c":"code","b5d92985":"code","29b07d80":"code","3b2583c6":"code","7cc55c82":"code","a967f4ec":"code","efaaf34a":"code","44f81644":"code","c05b80bf":"code","4c0e489a":"code","0e574314":"code","a035ed4e":"code","da9fc959":"code","0976d752":"code","7ec9a5a5":"code","5f9e82ad":"code","9358be6e":"code","9a0058fc":"code","c33e3e26":"code","9f245cb3":"code","7df96cef":"code","0411d1d9":"code","37e7f0e3":"code","180d8b63":"code","2c9b2db4":"code","11911970":"code","8bd51564":"markdown","a4e92d67":"markdown","36a230df":"markdown","de9a5868":"markdown","e56e9d13":"markdown","32c4eee8":"markdown","da19b4e2":"markdown","669c6c7d":"markdown","63c32087":"markdown","d638168e":"markdown","61b778b1":"markdown","009a7d3a":"markdown","18306e41":"markdown","fdc94e74":"markdown","17f31d33":"markdown","1751e929":"markdown","6cbabcff":"markdown","64fb0220":"markdown","df486fda":"markdown","aa99d428":"markdown","a252f2f6":"markdown"},"source":{"b0881ed8":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline","b0b32760":"train_df = pd.read_csv('..\/input\/train.csv', nrows = 100000)","4040986c":"train_df.shape","b5d92985":"test_df = pd.read_csv('..\/input\/test.csv')","29b07d80":"test_df.shape","3b2583c6":"train_df.head(5)","7cc55c82":"train_df.isnull().sum()","a967f4ec":"train_df.dropna(inplace=True)","efaaf34a":"train_df.describe()","44f81644":"train_df = train_df[train_df['fare_amount']>0]","c05b80bf":"train_df.shape","4c0e489a":"def distance(lat1, lon1, lat2, lon2):\n    a = 0.5 - np.cos((lat2 - lat1) *  0.017453292519943295)\/2 + np.cos(lat1 * 0.017453292519943295) * np.cos(lat2 * 0.017453292519943295) * (1 - np.cos((lon2 - lon1) *  0.017453292519943295)) \/ 2\n    res = 0.6213712 * 12742 * np.arcsin(np.sqrt(a))\n    return res","0e574314":"train_df['distance'] = distance(train_df.pickup_latitude, train_df.pickup_longitude, \\\n                                      train_df.dropoff_latitude,train_df.dropoff_longitude)","a035ed4e":"test_df['distance'] = distance(test_df.pickup_latitude, test_df.pickup_longitude, \\\n                                      test_df.dropoff_latitude,test_df.dropoff_longitude)","da9fc959":"train_df = train_df[train_df['distance']<15]","0976d752":"train_df.describe()","7ec9a5a5":"train_df = train_df[(train_df['passenger_count']!=0) & (train_df['passenger_count']<10)]","5f9e82ad":"# train_df['hour'] = train_df.pickup_datetime.apply(lambda x: pd.to_datetime(x).hour)\n# train_df['year'] = train_df.pickup_datetime.apply(lambda x: pd.to_datetime(x).year)\n\n# test_df['hour'] = test_df.pickup_datetime.apply(lambda x: pd.to_datetime(x).hour)\n# test_df['year'] = test_df.pickup_datetime.apply(lambda x: pd.to_datetime(x).year)","9358be6e":"feat_cols_s = ['distance','passenger_count']\n\nX = train_df[feat_cols_s]\ny = train_df['fare_amount']","9a0058fc":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)","c33e3e26":"# from sklearn.ensemble import RandomForestRegressor","9f245cb3":"# r_reg= RandomForestRegressor(n_estimators=500)","7df96cef":"# r_reg.fit(X_train,y_train)","0411d1d9":"# y_pred_final = r_reg.predict(test_df[feat_cols_s])\n\n# submission = pd.DataFrame(\n#     {'key': test_df.key, 'fare_amount': y_pred_final},\n#     columns = ['key', 'fare_amount'])\n# submission.to_csv('Random Forest regression.csv', index = False)","37e7f0e3":"import xgboost as xgb","180d8b63":"def XGBoost(X_train,X_test,y_train,y_test,num_rounds=500):\n    dtrain = xgb.DMatrix(X_train,label=y_train)\n    dtest = xgb.DMatrix(X_test,label=y_test)\n\n    return xgb.train(params={'objective':'reg:linear','eval_metric':'rmse'}\n                    ,dtrain=dtrain,num_boost_round=num_rounds, \n                    early_stopping_rounds=20,evals=[(dtest,'test')],)","2c9b2db4":"xgbm = XGBoost(X_train,X_test,y_train,y_test)\nxgbm_pred = xgbm.predict(xgb.DMatrix(test_df[feat_cols_s]), ntree_limit = xgbm.best_ntree_limit)","11911970":"submission = pd.DataFrame(\n    {'key': test_df.key, 'fare_amount':xgbm_pred},\n    columns = ['key', 'fare_amount'])\nsubmission.to_csv('XGboost regression.csv', index = False)","8bd51564":"The fare amount seems to be negative as well as the latitude and longitude are way too off. Let's quickly take care of it.","a4e92d67":"I'm from Nepal and the fare rates are pretty much high in respect to the taxi fare\/avg. person income ratio inside the country. I had a curosity of knowing how much do New Yorkers pay and will be paying (buhahaha) for their taxi fares.","36a230df":"Let me take a look at the head of the dataframe.","de9a5868":"# Modeling using XGBoost","e56e9d13":"## Modeling using Random Forest Regressor","32c4eee8":"Checking for null values,","da19b4e2":"The test data only has 9914 rows so it won't be taking much memory space.","669c6c7d":"Train test split,","63c32087":"Importing the training set,","d638168e":"Removing the null values as the numbers are too less to spend time trying to handle the missing values of data.","61b778b1":"Data this big certainly has to have some anomalies in it.","009a7d3a":"Let's get every data row with distance less than 15 miles out of the picture.","18306e41":"You can do some fancy stuffs to import the whole massive amount of data more systematically.","fdc94e74":"Remove data where there are no passengers or there are more than 10 passengers.","17f31d33":"Checking the shape again,","1751e929":"## Importing the libraries as well as the data","6cbabcff":"# How much does a Taxi ride cost in NYC?","64fb0220":"Looks like we pretty much cleaned our training data! Time for some feature engineering.","df486fda":"# Understanding the data","aa99d428":"Same for test set,","a252f2f6":"## Anamoly detection"}}