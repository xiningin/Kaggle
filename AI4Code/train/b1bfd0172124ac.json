{"cell_type":{"2bc54e9a":"code","5a72f3be":"code","7f033adf":"code","c8fab94d":"code","e369069a":"code","dc8eaa50":"code","52b7f67f":"code","3cfa2de6":"code","d03447e3":"code","022ac9ab":"code","40aaa23a":"code","6c459f11":"code","70c1fa59":"code","bfd3be22":"code","f3b0cf4a":"code","3c70e4dd":"code","ab1a2311":"code","9f71caa0":"code","70c475a5":"code","9e879eb8":"code","beae958b":"code","6d064883":"code","155f3d29":"code","09195ed4":"code","d60e056a":"code","6d752089":"code","517902b0":"code","278c68b3":"code","fd14f061":"code","7a850ec4":"code","abac4751":"code","6498b835":"code","6a7fad42":"code","fa4ef57a":"code","3ff89594":"code","a1e03fac":"code","6612d7ba":"code","5439d666":"code","7c216b82":"code","015d4f33":"code","57d5e109":"code","ec1b400a":"code","c41b5c33":"code","5cbd68d2":"code","e2376305":"markdown","d80c05a6":"markdown","9fbce596":"markdown","51acf7df":"markdown","0f43679a":"markdown","14ec7a83":"markdown","9ce73391":"markdown","0874e945":"markdown","3d08d38b":"markdown","bfb6d2cc":"markdown","8a0ec663":"markdown","d1902eae":"markdown","be16dea2":"markdown","5635b1b2":"markdown","db11fa1c":"markdown","a585c79d":"markdown","2212c4a7":"markdown","02612795":"markdown","85c37be2":"markdown","e61dd0ec":"markdown","e217d1ef":"markdown","a0dc3c1c":"markdown","8f55ed59":"markdown","aa3847fc":"markdown","a823a6b9":"markdown","392a4040":"markdown","20c2073f":"markdown","303f5eac":"markdown","e2ad77b9":"markdown"},"source":{"2bc54e9a":"!pip install chart_studio","5a72f3be":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport librosa\nimport librosa.display\n%matplotlib inline\n\n# Preprocessing\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\n\nimport datetime as dt\nfrom datetime import datetime   \n\n# Visualisation libraries\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport chart_studio.plotly as py\nimport plotly.figure_factory as ff\nfrom plotly.offline import iplot\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n\n# Settings for pretty nice plots\nplt.style.use('fivethirtyeight')\nplt.show()\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings('ignore')","7f033adf":"train = pd.read_csv('..\/input\/birdsong-recognition\/train.csv',)\ntrain.head()","c8fab94d":"train.info()","e369069a":"len(train['ebird_code'].value_counts())","dc8eaa50":"x = train['ebird_code'].value_counts().index.to_list()\ne_code_path = 'https:\/\/ebird.org\/species\/'\nspecies = [e_code_path+p for p in x]\n","52b7f67f":"from IPython.display import IFrame\nIFrame(species[0], width=800, height=450)\n","3cfa2de6":"IFrame(species[100], width=800, height=450)\n","d03447e3":"IFrame(species[200], width=800, height=450)","022ac9ab":"# Total number of people who provided the recordings\ntrain['recordist'].nunique()","40aaa23a":"# Top 10 recordists in terms of the number of recordings done\ntrain['recordist'].value_counts()[:10].sort_values().iplot(kind='barh',color='#3780BF')","6c459f11":"train['playback_used'].fillna('Not Defined',inplace=True);\ntrain['playback_used'].value_counts()","70c1fa59":"train['playback_used'].value_counts()\n\nlabels = train['playback_used'].value_counts().index\nvalues = train['playback_used'].value_counts().values\ncolors=['#3795bf','#bfbfbf']\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent',\n                             insidetextorientation='radial',marker=dict(colors=colors))])\nfig.show()","bfd3be22":"train['rating'].value_counts().iplot(kind='bar',color='#3780BF')","f3b0cf4a":"# Convert string to datetime64\ntrain['date'] = train['date'].apply(pd.to_datetime,format='%Y-%m-%d', errors='coerce')\n#train.set_index('date',inplace=True)\ntrain['date'].value_counts().plot(figsize=(12,8))","3c70e4dd":"%%HTML\n<div class='tableauPlaceholder' id='viz1592397692077' style='position: relative'><noscript><a href='#'><img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Bi&#47;Birds_15923974075490&#47;Dashboard1&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='Birds_15923974075490&#47;Dashboard1' \/><param name='tabs' value='no' \/><param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Bi&#47;Birds_15923974075490&#47;Dashboard1&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><param name='language' value='en' \/><param name='filter' value='publish=yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1592397692077');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.minWidth='420px';vizElement.style.maxWidth='650px';vizElement.style.width='100%';vizElement.style.minHeight='587px';vizElement.style.maxHeight='887px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.minWidth='420px';vizElement.style.maxWidth='650px';vizElement.style.width='100%';vizElement.style.minHeight='587px';vizElement.style.maxHeight='887px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else { vizElement.style.width='100%';vizElement.style.height='727px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","ab1a2311":"# Total no of unique species in the dataset\nprint(len(train['species'].value_counts().index))\n","9f71caa0":"train['species'].value_counts()","70c475a5":"train['species'].value_counts().iplot()","9e879eb8":"%%HTML\n<div class='tableauPlaceholder' id='viz1592442148007' style='position: relative'><noscript><a href='#'><img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;ZN&#47;ZNDRZCHNN&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='path' value='shared&#47;ZNDRZCHNN' \/> <param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;ZN&#47;ZNDRZCHNN&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><param name='language' value='en' \/><param name='filter' value='publish=yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1592442148007');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.minWidth='420px';vizElement.style.maxWidth='650px';vizElement.style.width='100%';vizElement.style.minHeight='587px';vizElement.style.maxHeight='887px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.minWidth='420px';vizElement.style.maxWidth='650px';vizElement.style.width='100%';vizElement.style.minHeight='587px';vizElement.style.maxHeight='887px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else { vizElement.style.width='100%';vizElement.style.height='727px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","beae958b":"TRAIN_EXT_PATH = \"..\/input\/xeno-canto-bird-recordings-extended-a-m\/train_extended.csv\"\ntrain_ext = pd.read_csv(TRAIN_EXT_PATH)\ntrain_ext.head()","6d064883":"len(train_ext['ebird_code'].value_counts())","155f3d29":"len(train_ext)","09195ed4":"df_original = train.groupby(\"species\")[\"filename\"].count().reset_index().rename(columns = {\"filename\": \"original_recordings\"})\ndf_extended = train_ext.groupby(\"species\")[\"filename\"].count().reset_index().rename(columns = {\"filename\": \"extended_recordings\"})\n\ndf = df_original.merge(df_extended, on = \"species\", how = \"left\").fillna(0)\ndf[\"total_recordings\"] = df.original_recordings + df.extended_recordings\ndf = df.sort_values(\"total_recordings\").reset_index().sort_values('total_recordings',ascending=False)\ndf.head()","d60e056a":"# Plot the total recordings\nf, ax = plt.subplots(figsize=(10, 50))\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"total_recordings\", y=\"species\", data=df,\n            label=\"total_recordings\", color=\"r\")\n\n# Plot the original recordings\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"original_recordings\", y=\"species\", data=df,\n            label=\"original_recordings\", color=\"g\")\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlim=(0, 2000), ylabel=\"\",\n       xlabel=\"Count\")\nsns.despine(left=True, bottom=True)","6d752089":"\naudio_path = '..\/input\/birdsong-recognition\/train_audio\/nutwoo\/XC462016.mp3'\nx , sr = librosa.load(audio_path)\n","517902b0":"print(type(x), type(sr))","278c68b3":"print(x.shape, sr)","fd14f061":"librosa.load(audio_path, sr=44100)","7a850ec4":"librosa.load(audio_path, sr=None)","abac4751":"import IPython.display as ipd\nipd.Audio(audio_path)","6498b835":"plt.figure(figsize=(14, 5))\nlibrosa.display.waveplot(x, sr=sr)","6a7fad42":"X = librosa.stft(x)\nXdb = librosa.amplitude_to_db(abs(X))\nplt.figure(figsize=(14, 5))\nlibrosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='hz')\nplt.colorbar()","fa4ef57a":"librosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='log')\nplt.colorbar()","3ff89594":"plt.figure(figsize=(14, 5))\nlibrosa.display.waveplot(x, sr=sr)","a1e03fac":"# Zooming in\nn0 = 9000\nn1 = 9100\nplt.figure(figsize=(14, 5))\nplt.plot(x[n0:n1])\nplt.grid()","6612d7ba":"zero_crossings = librosa.zero_crossings(x[n0:n1], pad=False)\nprint(sum(zero_crossings))","5439d666":"spectral_centroids = librosa.feature.spectral_centroid(x, sr=sr)[0]\nspectral_centroids.shape\n","7c216b82":"# Computing the time variable for visualization\nframes = range(len(spectral_centroids))\nt = librosa.frames_to_time(frames)\n# Normalising the spectral centroid for visualisation\ndef normalize(x, axis=0):\n    return sklearn.preprocessing.minmax_scale(x, axis=axis)\n#Plotting the Spectral Centroid along the waveform\nlibrosa.display.waveplot(x, sr=sr, alpha=0.4)\nplt.plot(t, normalize(spectral_centroids), color='r')","015d4f33":"spectral_rolloff = librosa.feature.spectral_rolloff(x+0.01, sr=sr)[0]\nlibrosa.display.waveplot(x, sr=sr, alpha=0.4)\nplt.plot(t, normalize(spectral_rolloff), color='r')","57d5e109":"x, fs = librosa.load('..\/input\/birdsong-recognition\/train_audio\/nutwoo\/XC161356.mp3')\nlibrosa.display.waveplot(x, sr=sr)\n","ec1b400a":"mfccs = librosa.feature.mfcc(x, sr=fs)\nprint(mfccs.shape)\n","c41b5c33":"#Displaying  the MFCCs:\nlibrosa.display.specshow(mfccs, sr=sr, x_axis='time')\n","5cbd68d2":"mfccs = sklearn.preprocessing.scale(mfccs, axis=1)\nprint(mfccs.mean(axis=1))\nprint(mfccs.var(axis=1))\nlibrosa.display.specshow(mfccs, sr=sr, x_axis='time')","e2376305":"## Visualizing Audio\n\nWe can plot the audio array using librosa.display.waveplot. Let's plot the  amplitude envelope of a waveform.\n","d80c05a6":"## Playing Audio\n\n`IPython.display.Audio` lets you play audio directly in a jupyter notebook.","9fbce596":"## Additional Datasets\n\nIt is interesting to note here the amount of training recordings per species has been limited to 100 to keep the dataset at a reasonable. However, external dataset is available and [Rohan Rao](https:\/\/www.kaggle.com\/rohanrao) has been kind enough to extract them and share them in usable form with the community.\n\nThe remaining recordings (with some exclusions) has been published as datasets (split in two by first alphabet due to Kaggle's 20GB size limitation):\nhttp:\/\/www.kaggle.com\/rohanrao\/xeno-canto-bird-recordings-extended-a-m\nhttp:\/\/www.kaggle.com\/rohanrao\/xeno-canto-bird-recordings-extended-n-z\n\nPlease read [this discussion post](https:\/\/www.kaggle.com\/c\/birdsong-recognition\/discussion\/159970) for more information.\n\n### Analysing the external datasets","51acf7df":"## Recordist\n\nRecordist is the user who provided the recordings.","0f43679a":"### Spectral Centroid\nIt indicates where the \u201dcentre of mass\u201d for a sound is located and is calculated as the weighted mean of the frequencies present in the sound. Consider two songs, one from a blues genre and the other belonging to metal. \n","14ec7a83":"Clearly, the additional recordings(in red) has far more observations than existing data. Since external data is allowed in the competition, it can prove to be highly beneficial during the training part.","9ce73391":"### 1. Spectrogram\nA spectrogram is a visual representation of the spectrum of frequencies of sound or other signals as they vary with time. Spectrograms are sometimes called sonographs, voiceprints, or voicegrams. When the data is represented in a 3D plot, they may be called waterfalls. In 2-dimensional arrays, the first axis is frequency while the second axis is time.\nWe can display a spectrogram using. `librosa.display.specshow`.","0874e945":"## Countries where recordings have been made","3d08d38b":"The original train data has 21,375 recordings and the extended train data has an additional 22,015 recordings for 253 out of 264 species which more than doubles the training data size.","bfb6d2cc":"## Distribution of Recorded Species","8a0ec663":"Here, we have the plot of the amplitude envelope of a waveform.","d1902eae":"This returns an audio time series as a numpy array with a default sampling rate(sr) of 22KHZ mono. sr stands for **Sample Rate** which is the number of samples of audio carried per second, measured in Hz or kHz.\n\nWe can also resample the audio sample to **44.1KHz** by:","be16dea2":"The file contains a lot of columns but we shall focus on some of the ones which are directly related to our problem","5635b1b2":"# Improving the accuracy of soundscape analyses.\n\n## Objective\n\nIt is often easier to hear birds than see them. With proper sound detection and classification, researchers could automatically intuit factors about an area\u2019s quality of life based on a changing bird population.The objective of the competition as stated on the competitions page is to identify a wide variety of bird vocalizations in soundscape recordings. However, the recordings are complex and may contain anthropogenic sounds (e.g., airplane overflights) or other bird and non-bird (e.g., chipmunk) calls in the background, with a particular labeled bird species in the foreground.\n\n## Understanding the Evaluation Metric\n\nThe metric in this competition is the row-wise micro averaged F1 score.The F1 score or F measure, is a measure of a test\u2019s accuracy.\n\nThe F score is defined as the weighted harmonic mean of the test\u2019s precision and recall.\n![](https:\/\/imgur.com\/nC4QwrO.png)\n\n\n## Data\nFollowing files have been provided to the participants:\n\n* `train_audio` : Trainign data consisting of short recordings\n* `train_csv` : metadata for training data\n*  `test_audio` : The hidden test set audio consists of approximately 150 recordings in mp3 format, each                       roughly 10 minutes long. \n* `test_audio.csv` : metadata for test set.It is important to note that only the first three rows are available for download; the full test.csv is in the hidden test set.\n\n## Exploring the Training metadata\n\nTo begin with let's explore the training metadata file to gather some information","db11fa1c":"### Mel-Frequency Cepstral Coefficients\nThe Mel frequency cepstral coefficients (MFCCs) of a signal are a small set of features (usually about 10\u201320) which concisely describe the overall shape of a spectral envelope. It models the characteristics of the human voice.","a585c79d":"### 2.Feature extraction\n\nEvery audio signal consists of many features. However, we must extract the characteristics that are relevant to the problem we are trying to solve. The process of extracting features to use them for analysis is called feature extraction. Let us study about few of the features in detail.","2212c4a7":"## Playback_used\n\nWhether playback has been used or not.","02612795":"Or we can simply disable sampling by:","85c37be2":"## e-bird code\n\na code for the bird species. You can review detailed information about the bird codes by appending the code to https:\/\/ebird.org\/species\/, such as https:\/\/ebird.org\/species\/amecro for the American Crow.","e61dd0ec":"# Properties of an audio signal\n\n\nAn audio signal is represented in the form of an audio signal having parameters such as frequency, bandwidth, decibel etc. A typical audio signal can be expressed as a function of Amplitude and Time.\n![](https:\/\/miro.medium.com\/max\/1400\/1*akRbhl8739UEDuKHkOUR1Q.png)\n\nsource: https:\/\/docs.google.com\/presentation\/d\/1zzgNu_HbKL2iPkHS8-qhtDV20QfWt9lC3ZwPVZo8Rw0\/pub?start=false&loop=false&delayms=3000&slide=id.g5a7a9806e_0_84\n\n\nThese sounds are available in many formats which makes it possible for the computer to read and analyse them. Some examples are:\n* mp3 format\n* WMA (Windows Media Audio) format\n* wav (Waveform Audio File) format","e217d1ef":"### Spectral Rolloff\nIt is a measure of the shape of the signal. It represents the frequency below which a specified percentage of the total spectral energy, e.g. 85%, lies.","a0dc3c1c":"Let's check out a few","8f55ed59":"###  Zero Crossing Rate\nThe zero crossing rate is the rate of sign-changes along a signal, i.e., the rate at which the signal changes from positive to negative or back. \nLet us calculate the zero crossing rate for our example audio clip.","aa3847fc":"## Date of recordings","a823a6b9":"## Species","392a4040":"## Ratings","20c2073f":"Here mfcc computed 20 MFCC s over 1062 frames.\nWe can also perform feature scaling such that each coefficient dimension has zero mean and unit variance:","303f5eac":"The vertical axis shows frequencies (from 0 to 10kHz), and the horizontal axis shows the time of the clip. Since we see that all action is taking place at the bottom of the spectrum, we can convert the frequency axis to a logarithmic one.","e2ad77b9":"## Loading an audio file\n\nI'll be using a Python Library called Librosa for analysing the audio file."}}