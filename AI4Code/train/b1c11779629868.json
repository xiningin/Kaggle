{"cell_type":{"1f2b0089":"code","ebbf567a":"code","c7d34fdd":"code","685abc4d":"code","91a85b11":"code","d9804fa0":"code","ecb43b37":"code","4400e952":"code","c1b25e7e":"code","d0cea305":"code","b509b339":"code","70efeba2":"code","6b5c094c":"code","f97a1a6a":"code","5231daf3":"code","31c71567":"code","3b65339b":"code","1f6a2d61":"code","13407168":"code","17ffa896":"code","0cffa022":"code","aa8c2e18":"code","9ea728e8":"code","94645dc3":"code","da94eda7":"code","e36809d5":"code","0115ccc0":"code","ae1979d9":"code","a50a71bd":"code","ee9162f3":"code","ae85fe12":"code","ab2d54ab":"code","48a2c7e0":"code","c78ea9c0":"code","f48d7dd1":"code","20b7a822":"code","4a30cae9":"code","f91081b1":"code","59c6e55d":"code","8cbdd273":"code","5a774f05":"code","7e918191":"code","3a13beae":"code","f46dfff4":"code","14b5a7c1":"markdown"},"source":{"1f2b0089":"import fasttext as ft\nfrom fastai2.vision.all import * \nfrom sklearn.metrics import roc_auc_score\nfrom timm import create_model\nimport pandas as pd\nfrom pathlib import Path\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold\n\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True","ebbf567a":"BS=32\nIMG_SIZE = 224\nN_FOLDS = 5\nSEED = 2\nseed_everything(SEED)","c7d34fdd":"IMG_PATH = Path('\/home\/bf\/Documents\/Plant\/images')","685abc4d":"train = pd.read_csv('train.csv')","91a85b11":"def get_tag(row):\n    if row.healthy:\n        return \"healthy\"\n    if row.multiple_diseases:\n        return \"multiple_diseases\"\n    if row.rust:\n        return \"rust\"\n    if row.scab:\n        return \"scab\"\ntrain['label'] = [get_tag(train.iloc[idx]) for idx in train.index]\ntrain.drop(columns=['healthy', 'multiple_diseases', 'rust', 'scab'], inplace=True)\nLABEL_COLS = ['healthy', 'multiple_diseases', 'rust', 'scab']","d9804fa0":"train['fold'] = -1\n\nstrat_kfold = MultilabelStratifiedKFold(n_splits=N_FOLDS, random_state=SEED, shuffle=True)\nfor i, (_, test_index) in enumerate(strat_kfold.split(train.image_id.values, train.iloc[:,1:].values)):\n    train.iloc[test_index, -1] = i\n    \ntrain['fold'] = train['fold'].astype('int')","ecb43b37":"PATH = Path('devise')","4400e952":"PATH.mkdir(exist_ok=True)","c1b25e7e":"ft_vecs = ft.load_model(str((PATH\/'wiki.en.bin')))","d0cea305":"lc_vec_d = {w.lower(): ft_vecs.get_word_vector(w) for w in LABEL_COLS}","b509b339":"train.head()","70efeba2":"vec = np.empty([train.shape[0], 300])\nfor i in range(train.shape[0]):\n    vec[i] = (np.array(lc_vec_d[train.iloc[i, 1]]))","6b5c094c":"train = pd.concat([train, pd.DataFrame(vec)], 1)","f97a1a6a":"train.head()","5231daf3":"LAB_COL = train.columns.tolist()[3:]","31c71567":"item_tfms = RandomResizedCrop(IMG_SIZE, min_scale=0.75, ratio=(1.,1.))\nbatch_tfms=[*aug_transforms(size=IMG_SIZE, max_rotate=30., min_scale=0.75, flip_vert=True, do_flip=True)]","3b65339b":"def get_data(fold):\n    train_no_val = train.query(f'fold != {fold}')\n    train_just_val = train.query(f'fold == {fold}')\n\n    train_bal = pd.concat(\n        [train_no_val.query('label != \"multiple_diseases\"'), train_just_val] +\n        [train_no_val.query('label == \"multiple_diseases\"')] * 2\n    ).sample(frac=1.0, random_state=SEED).reset_index(drop=True)\n\n    datablock = DataBlock(\n        blocks=(ImageBlock, RegressionBlock(c_out=300)),\n        getters=[\n            ColReader('image_id', pref=IMG_PATH, suff='.jpg'),\n            ColReader(LAB_COL)\n        ],\n        splitter=IndexSplitter(train_bal.loc[train_bal.fold==fold].index),\n        item_tfms=item_tfms,\n        batch_tfms=batch_tfms\n    )\n    return datablock.dataloaders(source=train_bal, bs=BS)","1f6a2d61":"def cos_loss(inp,targ): return 1 - F.cosine_similarity(inp,targ).mean()","13407168":"dls = get_data(fold=0)","17ffa896":"net = create_model('efficientnet_b3a', pretrained=True)","0cffa022":"def create_timm_body(arch:str, pretrained=True, cut=None):\n    model = create_model(arch, pretrained=pretrained)\n    if cut is None:\n        ll = list(enumerate(model.children()))\n        cut = next(i for i,o in reversed(ll) if has_pool_type(o))\n    if isinstance(cut, int): return nn.Sequential(*list(model.children())[:cut])\n    elif callable(cut): return cut(model)\n    else: raise NamedError(\"Cut must be either integer or function\")","aa8c2e18":"body = create_timm_body('efficientnet_b3a', pretrained=True)\nnf = num_features_model(nn.Sequential(*body.children()))* (2)\nhead = create_head(nf, dls.c)\nmodel = nn.Sequential(body, head)","9ea728e8":"dls.c","94645dc3":"mixup = MixUp()","da94eda7":"learn = Learner(dls, model, \n                cbs=mixup,\n                #opt_func = partial(ranger, eps=1e-7),\n                opt_func = partial(Lamb),\n                loss_func= cos_loss).to_fp16()","e36809d5":"#learn.summary()","0115ccc0":"learn.lr_find()","ae1979d9":"#learn.fine_tune(10, 1e-3)\nlearn.fit_one_cycle(10, 3e-3)","a50a71bd":"learn.unfreeze()\nlearn.lr_find()","ee9162f3":"learn.fit_one_cycle(5, slice(1e-6, 1e-4))","ae85fe12":"learn.save('devise')","ab2d54ab":"import nmslib\n\ndef create_index(a):\n    index = nmslib.init(space='angulardist')\n    index.addDataPointBatch(a)\n    index.createIndex()\n    return index\n\ndef get_knns(index, vecs):\n     return zip(*index.knnQueryBatch(vecs, k=10, num_threads=4))\n\ndef get_knn(index, vec): return index.knnQuery(vec, k=10)","48a2c7e0":"k2i = {'healthy':1, 'multiple_diseases':2, \n      'rust':3, 'scab':4}","c78ea9c0":"syn_wv = [(k2i[k], v) for k,v in lc_vec_d.items()]\nsyns, wvs = list(zip(*syn_wv))","f48d7dd1":"nn_wvs = create_index(wvs)","20b7a822":"test_df = pd.read_csv('test.csv')\ntest_dl = dls.test_dl(test_df)","4a30cae9":"test_preds = learn.get_preds(dl=test_dl)","f91081b1":"idxs,dists = get_knns(nn_wvs, test_preds[0])","59c6e55d":"labels = [idx[0] for idx in idxs]","8cbdd273":"subm = pd.read_csv('sample_submission.csv')","5a774f05":"subm.healthy = 0\nsubm.multiple_diseases = 0\nsubm.rust = 0\nsubm.scab = 0","7e918191":"for i in range(subm.shape[0]):\n    subm.iloc[i, labels[i]+1] = 1","3a13beae":"subm","f46dfff4":"subm.to_csv('Devise.csv', index=False)","14b5a7c1":"Unfreeze, progressive resizing, cross_validation, devise"}}