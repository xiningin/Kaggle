{"cell_type":{"2f7e83b4":"code","5a5138c8":"code","8e0ce42d":"code","eaa1f6df":"code","5e8c7990":"code","065256a2":"code","58b19b44":"code","040361be":"code","0acb7465":"code","42686062":"code","9213b3ed":"code","158a9d35":"code","d87cf69b":"code","9fa7f870":"code","7533b141":"code","8ac901f8":"code","08c8185f":"code","28081242":"code","1519c13b":"code","987252c4":"code","dbf9ce55":"code","71ee508d":"code","c79da3cc":"code","d4f541e3":"code","e592cade":"markdown","e3c278dd":"markdown","47836bb5":"markdown","abaafc10":"markdown"},"source":{"2f7e83b4":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.externals import joblib\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5a5138c8":"## load the data \ndiabetesDF = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndiabetesDF.head()","8e0ce42d":"diabetesDF.info()","eaa1f6df":"diabetesDF.describe()","5e8c7990":"bad_g = diabetesDF[\"Glucose\"] == 0\ndiabetesDF.loc[bad_g, \"Glucose\"] = None\nsum(diabetesDF['Glucose']==0)","065256a2":"bad_g = diabetesDF['BloodPressure'] == 0\ndiabetesDF.loc[bad_g, 'BloodPressure'] = None\nsum(diabetesDF['BloodPressure']==0)","58b19b44":"bad_s= diabetesDF['Insulin'] == 0\ndiabetesDF.loc[bad_s, 'Insulin'] = None\nsum(diabetesDF['Insulin']==0)","040361be":"bad_s= diabetesDF['SkinThickness'] == 0\ndiabetesDF.loc[bad_s, 'SkinThickness'] = None\nsum(diabetesDF['SkinThickness']==0)","0acb7465":"bad_s= diabetesDF['BMI'] == 0\ndiabetesDF.loc[bad_s,'BMI'] = None\nsum(diabetesDF['BMI']==0)","42686062":"ad_s= diabetesDF['DiabetesPedigreeFunction'] == 0\ndiabetesDF.loc[bad_s,'DiabetesPedigreeFunction'] = None\nsum(diabetesDF['DiabetesPedigreeFunction']==0)","9213b3ed":"diabetesDF.describe()","158a9d35":"diabetesDF.shape","d87cf69b":"diabetesDF.fillna(diabetesDF.mean(), inplace= True)\nprint(diabetesDF.isnull().sum())","9fa7f870":"sns.countplot(diabetesDF['Outcome'],label=\"Count\")","7533b141":"diabetesDF.hist(figsize=(15,15))","8ac901f8":"# split into train and test \ndfTrain =diabetesDF[:700]\ndfTest = diabetesDF[700:750]\ndfCheck=diabetesDF[750:]","08c8185f":"# S\u00e9paration de l'\u00e9tiquette et les fonctionnalit\u00e9s, pour les ensembles d'apprentissages et de test. \n# Conversion en tableau numpy cer les donn\u00e9es seront g\u00e9r\u00e9s par l'algorithme d'apprentissage au format tableau numpy\ntrainLabel= np.asarray(dfTrain['Outcome'])\ntrainData=  np.asarray(dfTrain.drop('Outcome',1)) \ntestLabel= np.asarray(dfTest['Outcome'])\ntestData=  np.asarray(dfTest.drop('Outcome',1))","28081242":"# Normalisation des donn\u00e9es\n# S\u00e9paration de l'\u00e9tiquette et les fonctionnalit\u00e9s, pour les ensembles d'apprentissages et de test. \n# Conversion en tableau numpy car les donn\u00e9es seront g\u00e9r\u00e9es par l'algorithme d'apprentissage au format tableau numpy\n\nmeans= np.mean(trainData, axis=0)\nstds= np.std(trainData, axis=0)\n\ntrainData= (trainData - means)\/stds\ntestData= (testData - means)\/stds","1519c13b":"diabetesCheck = LogisticRegression()\ndiabetesCheck.fit(trainData, trainLabel)","987252c4":"accuracy = diabetesCheck.score(testData, testLabel)\nprint(\"accuracy = \", accuracy * 100, \"%\")","dbf9ce55":"coeff = list(diabetesCheck.coef_[0])\nlabels = list(dfTrain.drop('Outcome',1).columns)\nfeatures = pd.DataFrame()\nfeatures['Features'] = labels\nfeatures['importance'] = coeff\nfeatures.sort_values(by=['importance'], ascending=True, inplace=True)\nfeatures['positive'] = features['importance'] > 0\nfeatures.set_index('Features', inplace=True)\nfeatures.importance.plot(kind='barh', figsize=(11, 6),color = features.positive.map({True: 'blue', False: 'red'}))\nplt.xlabel('Importance')","71ee508d":"joblib.dump([diabetesCheck, means, stds], 'diabeteseModel.pkl')","c79da3cc":"diabetesLoadedModel, means, stds = joblib.load('diabeteseModel.pkl')\naccuracyModel = diabetesLoadedModel.score(testData, testLabel)\nprint(\"accuracy = \",accuracyModel * 100,\"%\")","d4f541e3":"sampleData = dfCheck[:1]\n \n# prepare sample  \nsampleDataFeatures = np.asarray(sampleData.drop('Outcome',1))\nsampleDataFeatures = (sampleDataFeatures - means)\/stds\n \n# predict \npredictionProbability = diabetesLoadedModel.predict_proba(sampleDataFeatures)\nprediction = diabetesLoadedModel.predict(sampleDataFeatures)\nprint('Probability:', predictionProbability)\nprint('prediction:', prediction)","e592cade":"# Training and Evaluating Machine Learning Model","e3c278dd":"# Pr\u00e9paration des donn\u00e9es","47836bb5":"# Data Description","abaafc10":"# Visualisation de donn\u00e9es"}}