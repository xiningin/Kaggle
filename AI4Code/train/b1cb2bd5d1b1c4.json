{"cell_type":{"fe29fe69":"code","5dc3626e":"code","67043f03":"code","6ee313f9":"code","7fb4eb1b":"code","483623bb":"code","3d6e9602":"code","0dbfe6c5":"code","fb5d39e3":"code","a68e4b6a":"code","ce763eb0":"code","bcab0b4d":"markdown","d0fc83f8":"markdown","8dcae87d":"markdown","55efbd05":"markdown","99c4d11c":"markdown","ba51980b":"markdown"},"source":{"fe29fe69":"tag:'Energy'\ntag:'Nuclear'\ntag:'Population exposure'\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5dc3626e":"df = pd.read_csv('..\/input\/energy-pop-exposure-nuclear-plants-locations_plants.csv', delimiter=',')","67043f03":"countries_shortNames = [['UNITED STATES OF AMERICA','USA'],\\\n                       ['RUSSIAN FEDERATION','RUSSIA'],\\\n                       ['IRAN, ISLAMIC REPUBLIC OF','IRAN'],\\\n                       ['KOREA, REPUBLIC OF','SOUTH KOREA'],\\\n                       ['TAIWAN, CHINA','CHINA']]\nfor shortName in countries_shortNames:\n    df = df.replace(shortName[0], shortName[1])","6ee313f9":"import folium # map rendering library\nfrom folium import plugins\nfrom folium.plugins import HeatMap\n# Matplotlib and associated plotting modules\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors","7fb4eb1b":"latitude, longitude = 40, 10.0\nmap_world_NPP = folium.Map(location=[latitude, longitude], zoom_start=2)\n\n# set color scheme for the clusters\nviridis = cm.get_cmap('viridis', df['NumReactor'].max())\ncolors_array = viridis(np.arange(df['NumReactor'].min()-1, df['NumReactor'].max()))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n    \nfor nReactor, lat, lng, borough, neighborhood in zip(df['NumReactor'].astype(int),df['Latitude'].astype(float), df['Longitude'].astype(float), df['Plant'], df['NumReactor']):\n    label = '{}, {}'.format(neighborhood, borough)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=3,\n        popup=label,\n        color=rainbow[nReactor-1],\n        fill=True,\n        fill_color=rainbow[nReactor-1],\n        fill_opacity=0.5).add_to(map_world_NPP)  \n\nmap_world_NPP","483623bb":"countries = df['Country'].unique()\ndf_count_reactor = [[i, df[df['Country'] == i]['NumReactor'].sum(), df[df['Country'] == i]['Region'].iloc[0]] for i in countries]\ndf_count_reactor = pd.DataFrame(df_count_reactor, columns=['Country', 'NumReactor','Region'])\ndf_count_reactor = df_count_reactor.set_index('Country').sort_values(by='NumReactor',ascending=False)[:20]","3d6e9602":"ax = df_count_reactor.plot(kind='bar',stacked=True, figsize=(10,3), title='The 20 Countries With The Most Nuclear Reactors in 2010')\nax.set_ylim((0,150))\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), xy=(p.get_x(), p.get_height()+2))","0dbfe6c5":"df_count_reactor['Country'] = df_count_reactor.index\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.set_style(\"whitegrid\")\n\nax = sns.barplot(x=\"NumReactor\", y=\"Country\", hue=\"Region\", data=df_count_reactor, dodge=False, orient='h')\nax.set_title('The 20 Countries With The Most Nuclear Reactors in 2010', fontsize=16)\nax.set_xlabel('Reactors', fontsize=16)\nax.set_ylabel('')\nax.legend(fontsize='14')\n","fb5d39e3":"def getMostExposedNPP(Exposedradius):\n    df_pop_sort = df.sort_values(by=str('p10_'+ str(Exposedradius)),ascending=False)[:10]\n    df_pop_sort['Country'] = df_pop_sort['Plant'] + ',\\n' + df_pop_sort['Country']\n    df_pop_sort = df_pop_sort.set_index('Country')\n    df_pop_sort = df_pop_sort.rename(columns={str('p90_'+ str(Exposedradius)): '1990', str('p00_'+ str(Exposedradius)): '2000', str('p10_'+ str(Exposedradius)): '2010'})\n    df_pop_sort = df_pop_sort[['1990','2000', '2010']]\/1E6\n    ax = df_pop_sort.plot(kind='bar',stacked=False, figsize=(10,4))\n    ax.set_ylabel('Population Exposure in millions', size = 14)\n    ax.set_title('Location of nuclear power plants \\n with the most exposed population \\n within ' + Exposedradius + ' km radius', size = 16)\n    print(df_pop_sort['2010'])","a68e4b6a":"getMostExposedNPP('30')\n# getMostExposedNPP('75')\n# getMostExposedNPP('150')\n# getMostExposedNPP('300')\n# getMostExposedNPP('600')\n# getMostExposedNPP('1200')","ce763eb0":"latitude, longitude = 40, 10.0\nmap_world_NPP = folium.Figure(width=100, height=100)\nmap_world_NPP = folium.Map(location=[latitude, longitude], zoom_start=2)\n    \nfor nReactor, lat, lng, borough, neighborhood in zip(df['NumReactor'].astype(int),df['Latitude'].astype(float), df['Longitude'].astype(float), df['Plant'], df['NumReactor']):\n    label = '{}, {}'.format(neighborhood, borough)\n    label = folium.Popup(label, parse_html=True)\n    folium.Circle(\n        [lat, lng],\n        radius=30000,\n        popup=label,\n        color='grey',\n        fill=True,\n        fill_color='grey',\n        fill_opacity=0.5).add_to(map_world_NPP)  \n\nExposedradius = '30'\ndf_sort = df.sort_values(by=str('p10_'+ str(Exposedradius)),ascending=False)[:10]\n\nfor nReactor, lat, lng, borough, neighborhood in zip(df_sort['NumReactor'].astype(int),df_sort['Latitude'].astype(float), df_sort['Longitude'].astype(float), df_sort['Plant'], df_sort['NumReactor']):\n    label = '{}, {}'.format(neighborhood, borough)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        color='red',\n        fill=True,\n        fill_color='red',\n        fill_opacity=0.25).add_to(map_world_NPP)  \n\n    \nfor nReactor, lat, lng, borough, neighborhood in zip(df_sort['NumReactor'].astype(int),df_sort['Latitude'].astype(float), df_sort['Longitude'].astype(float), df_sort['Plant'], df_sort['NumReactor']):\n    label = '{}, {}'.format(neighborhood, borough)\n    label = folium.Popup(label, parse_html=True)\n    folium.Circle(\n        [lat, lng],\n        radius=30000,\n        popup=label,\n        color='red',\n        fill=True,\n        fill_color='red',\n        fill_opacity=0.25).add_to(map_world_NPP)  \n\nmap_world_NPP","bcab0b4d":"# Normalization of Population Exposure to a respective square territory around NPP","d0fc83f8":"Available data is outdated. Since 2010 many countries constructed new reactors, especially in Asia.\n\nI do not see how I could apply statistical methods. The best what I came up is to try to use clustering algorithms. The question: are there any clusters of nuclear power plants in 30\/60\/120 km radius? If a density of NPPs cluster would be relatively high, it means that the exposed population has to be summed within this cluster. However, DBSCAN methods can identify only 5 clusters of NPP with 600 km only, which is quite a large radius and our hypothesis is not applicable.\n\nOverall, I can identify 10 NPPs with the most exposed population within radius of 30 km from a NPP:\n* KANUPP, PAKISTAN        7.17059\n* KUOSHENG, CHINA        5.66094\n* CHIN SHAN, CHINA         4.63817\n* KORI, SOUTH KOREA     3.44340\n* VILYUCHINSK, RUSSIA   3.23945\n* GUANGDONG, CHINA     3.10829\n* CEFR, CHINA                   3.08320\n* LINGAO, CHINA               2.97893\n* PICKERING, CANADA     2.24941\n* NARORA, INDIA               2.18178","8dcae87d":"## Location of nuclear power plants with the most exposed population within 30 km radius","55efbd05":"# Conclusions","99c4d11c":"## Sort all countries by number of nuclear reactors","ba51980b":"# Location of nuclear power plants on the world map"}}