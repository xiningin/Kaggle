{"cell_type":{"9a519520":"code","e304647e":"code","f05a9890":"code","471979a4":"code","1f88d92f":"code","f8ac432d":"code","846dae36":"code","b81b4caf":"code","7addae7c":"code","c06790fe":"code","48e39894":"code","8bd75673":"code","18e9613c":"code","60fb2065":"code","e5d85bd5":"code","88f2a4c4":"code","b0113c7b":"code","b6d8807f":"code","e4761cb2":"code","b90ef737":"code","088912f8":"code","d9b50b23":"code","c4db1766":"code","d7e8ca83":"code","fb0acd4b":"code","14d049e0":"code","f489f375":"markdown","690b9b9b":"markdown","06dce807":"markdown","a1fb13fc":"markdown","469a8812":"markdown","00139b86":"markdown","93e402f6":"markdown","5b0a6970":"markdown","299a119b":"markdown","23a92f08":"markdown","b87f0c4f":"markdown","b39e2129":"markdown","08e44276":"markdown","fa3763fc":"markdown","7fd64f13":"markdown","0ed5166a":"markdown","b6f7cc7e":"markdown","dafda5a6":"markdown","0155b418":"markdown","6e34de33":"markdown","26702e08":"markdown","97125c08":"markdown"},"source":{"9a519520":"# import the usual frameworks\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport collections\nimport warnings\n\nfrom IPython.core.display import display, HTML\nfrom sklearn.preprocessing import MinMaxScaler\n    \n# import plotly \nimport plotly\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.tools as tls\n\n# for color scales in plotly\nimport colorlover as cl \n\n# configure things\nwarnings.filterwarnings('ignore')\n\npd.options.display.float_format = '{:,.2f}'.format  \npd.options.display.max_columns = 999\n\npy.init_notebook_mode(connected=True)\n\n%load_ext autoreload\n%autoreload 2\n%matplotlib inline","e304647e":"# !pwd\n# !pip list","f05a9890":"df_orig = pd.read_csv(\n    '..\/input\/clouds.csv',\n    skiprows=0,\n    thousands=',',\n)\ndf_orig","471979a4":"df = df_orig.copy()","1f88d92f":"df","f8ac432d":"df.info()","846dae36":"df['full'] = df['Cloud Service'] + \" \" + df['NVIDIA GPU']\ndf.head(3)","b81b4caf":"df.set_index('full', inplace = True)\ndf","7addae7c":"df.drop('Kaggle K80', inplace = True)\ndf","c06790fe":"df = df.sort_values(by = ['Cost to Train'])\ndf.head(5)","48e39894":"cmax=200\ncmin=50\ncolor_s = np.linspace(cmin, cmax, 13)\n\ndata = [\n    go.Bar(\n        x=df.index,          \n        y=df['Cost to Train'],\n        marker=dict(\n            colorscale='Jet',\n            color=color_s,\n        ),\n    )\n]\n\nlayout = {\n    'title': 'Cost to Train',\n    'xaxis': {'title': 'Cloud Software', 'tickmode': 'linear'},\n    'yaxis': {'title': \"$ USD\"}\n}\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","8bd75673":"df = df.iloc[:-2]\ndf","18e9613c":"labs = [\n    'Google Colab K80',\n    'vast.ai GTX1070Ti',\n    'GCP P100',\n    'GCP V100',\n    'GCP P4',\n    'GCP K80',\n    'AWS EC2 V100',\n    'Paperspace M4000',\n    'GCP V100 x2',\n    'AWS EC2 K80',\n    'GCP V100 x4',\n    'AWS EC2 V100 x4',\n]\n\nlen(labs)","60fb2065":"df['short_names'] = labs\ndf","e5d85bd5":"cmax=200\ncmin=50\ncolor_s = np.linspace(cmin, cmax, 12)\n\ndata = [\n    go.Bar(\n        x=df.short_names,          \n        y=df['Cost to Train'],\n        marker=dict(\n            colorscale='Jet',\n            # cauto=True,\n            color=color_s,\n        ),\n    )\n]\n\nlayout = {\n    'title': 'Cost to Train',\n    'xaxis': {'title': 'Cloud Software', 'tickmode': 'linear'},\n    'yaxis': {'title': \"$ USD\"}\n}\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","88f2a4c4":"df = df.sort_values(by = ['Wall Time'])\ndf","b0113c7b":"cmax=200\ncmin=50\ncolor_s = np.linspace(cmin, cmax, 12)\n\ndata = [\n    go.Bar(\n        x=df.short_names,          \n        y=df['Wall Time'],\n        marker=dict(\n            colorscale='Jet',\n            color=color_s,\n        ),\n    )\n]\n\nlayout = {\n    'title': 'Time to Train',\n    'xaxis': {'title': 'Cloud Software', 'tickmode': 'linear'},\n    'yaxis': {'title': \"Minutes\"}\n}\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","b6d8807f":"df_best = df.iloc[[0,1,2,4,5,6,11],:]\ndf_best","e4761cb2":"df_aws = df[df['Cloud Service']=='AWS EC2']\ndf_aws","b90ef737":"df_gcp = df[df['Cloud Service']=='Google Cloud Compute Engine']\ndf_gcp","088912f8":"df_vast = df[df['Cloud Service']=='vast.ai']\ndf_vast","d9b50b23":"df_colab = df[df['Cloud Service']=='Google Colab']\ndf_colab","c4db1766":"df_paper = df[df['Cloud Service']=='Paperspace']\ndf_paper","d7e8ca83":"dot_size = 10\n\n\ntrace1 = go.Scatter(\n    x=df_aws['Wall Time'], \n    y=df_aws['Cost Per Hour'],\n    marker={'color': 'purple', 'size': dot_size}, \n    mode=\"markers+text\",  \n    text=df_aws['short_names'],\n    name='AWS',\n    textposition=\"top center\",\n)\n\n# the line\n\ntrace2 = go.Scatter(\n    x=df_best['Wall Time'], \n    y=df_best['Cost Per Hour'],\n    marker={'color': 'yellow',}, \n    mode=\"lines\",  \n    name='Efficient Frontier',\n)\n\ntrace3 = go.Scatter(\n    x=df_colab['Wall Time'], \n    y=df_colab['Cost Per Hour'],\n    marker={'color': 'red', 'size': dot_size}, \n    mode=\"markers+text\",  \n    text=df_colab['short_names'],\n    name=\"Google Colab\",\n    textposition=\"top center\"\n)\n\ntrace4 = go.Scatter(\n    x=df_paper['Wall Time'], \n    y=df_paper['Cost Per Hour'],\n    marker={'color': 'green', 'size': dot_size}, \n    mode=\"markers+text\",  \n    text=df_paper['short_names'],\n    name=\"Paperspace\",\n    textposition=\"top center\"\n)\n\ntrace5 = go.Scatter(\n    x=df_vast['Wall Time'], \n    y=df_vast['Cost Per Hour'],\n    marker={'color': 'blue', 'size': dot_size}, \n    mode=\"markers+text\",  \n    text=df_vast['short_names'],\n    name=\"vast.ai\",\n    textposition=\"top center\"\n)\n\ntrace6 = go.Scatter(\n    x=df_gcp['Wall Time'], \n    y=df_gcp['Cost Per Hour'],\n    marker={'color': 'black', 'size': dot_size}, \n    mode=\"markers+text\",  \n    text=df_gcp.short_names,\n    name=\"Google Cloud\",\n    textposition=\"top center\"\n)\n\n                   \ndata=[trace1, trace3, trace4, trace5, trace6, trace2 ]\nlayout = go.Layout(title='Cost per Hour vs Time to Train')\n\nfig = go.FigureWidget(data,layout)\n\npy.iplot(fig)\nfig","fb0acd4b":"sns.scatterplot(data=df,x=\"Wall Time\",y=\"Cost Per Hour\")","14d049e0":"fig, ax = plt.subplots()\n\nsns.scatterplot(\n    data=df,\n    x=\"Wall Time\",\n    y=\"Cost Per Hour\",\n    hue=\"Cloud Service\", \n    legend=False,\n    s=100,\n)\n\nfor item_num in range(0,df.shape[0]):\n     ax.text(\n         df['Wall Time'][item_num]+0.2, \n         df['Cost Per Hour'][item_num]-0.12, \n         df['short_names'][item_num], \n     )\n\nsns.despine()\nfig.set_size_inches(11.7, 8.27)\n\nax.set_title('Cost per Hour vs Time to Train', fontsize=24)\n# ax.legend(loc='upper right', fontsize=16,)\nax.set_xlabel('Time to Train (Minutes)',fontsize=16);\nax.set_ylabel('Cost per Hour ($ USD)',fontsize=16);\n\nimport matplotlib.ticker as mtick\nfmt = '${x:,.2f}'\ntick = mtick.StrMethodFormatter(fmt)\nax.yaxis.set_major_formatter(tick) \n\n\n# https:\/\/stackoverflow.com\/questions\/38152356\/matplotlib-dollar-sign-with-thousands-comma-tick-labels\n\nfig.savefig('cost_v_time.png')","f489f375":"# Deep Learning Cloud Service Provider Comparison\n## By Jeff Hale\n\nIn this notebook I explore which cloud service providers offer the best value for GPU users. I use plotly, Seaborn, and pandas to make visualizations for this project.\n\n## See [this Medium article](https:\/\/towardsdatascience.com\/maximize-your-gpu-dollars-a9133f4e546a) for an extended discussion.","690b9b9b":"Let's make our first chart in Plotly. Let's chart the cost to train.","06dce807":"Make a subset DataFrames by cloud provider for Plotly traces.","a1fb13fc":"# Speed to train\nLet's look at training time.","469a8812":"## Let's plot price vs speed on a scatter plot.","00139b86":"Let's combine the first two columns into a separate column for ease of charting.  Then we'll set the new column as the index.","93e402f6":"Note that Kaggle wasn't included because at the time this research was conducted using FastAI v1 with it was difficult, if not impossible. ","5b0a6970":"This is proving to be tricky with Plotly. Because the main purpose of this is for a Medium article wihtout 3D interactiveity let's switch to the Seaborn library and see if we can make something nicer.","299a119b":"Note that the Google Colab was run without parallelization, because of a bug in Colab's allocation of shared memory for the Docker container. This issue has since been fixed, so the time now appear to be similar to the other K80s.","23a92f08":"# Please upvote this Kaggle kernel if you find it helpful.","b87f0c4f":"That looks better.","b39e2129":"Let's make a plotly figure with the data.","08e44276":"Amazon Sagemaker was not run while Amazon sits on my quota increase request. The specs of machine on Sagemaker are the same as a similar on AWS EC2, so that EC2 time was substituded. Sagemaker is very expensive for the power, so it's not going to make the final cut, anyway. \\\n\nWall time was used in the analysis because that is what Colab would output for %%time. ","fa3763fc":"Let's see how the chart looks if we take off the two non-competitive AWS instances.","7fd64f13":"Looks good. Let's plot.","0ed5166a":"# Get the data","b6f7cc7e":"Ok. That's a start. Let's see if we can improve it.","dafda5a6":"List package versions and read in the data from the .csv. ","0155b418":"We neeed some shorter labels.","6e34de33":"> Let's make a DataFrame that just contains the poinyd on the efficient frontier.","26702e08":"# Cost to Train\nSort by cost to train.","97125c08":"## Please see [this Medium article](https:\/\/towardsdatascience.com\/maximize-your-gpu-dollars-a9133f4e546a) for the full comparison and discussion. \n## Please upvote if you found this helpful, so that others can find it too :)"}}