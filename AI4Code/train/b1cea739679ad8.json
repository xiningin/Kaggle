{"cell_type":{"9746717f":"code","ab1d1449":"code","eae6a18d":"code","52d316e8":"code","f1ce032c":"code","dcaf60d2":"code","c7b6ba01":"code","e8ed6a98":"code","ce123f8a":"code","e4a94f18":"code","9786d331":"code","a089a5c1":"code","1e22b126":"code","7b873c77":"code","d0b4c5d9":"code","0a335c19":"code","6269dcdb":"code","cb73d9b0":"markdown"},"source":{"9746717f":"import pandas as pd\nimport numpy as np\nfrom scipy.sparse import csr_matrix\nfrom sklearn.neighbors import NearestNeighbors\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ab1d1449":"movies = pd.read_csv(\"..\/input\/movie-lens-small-latest-dataset\/movies.csv\")\nratings = pd.read_csv(\"..\/input\/movie-lens-small-latest-dataset\/ratings.csv\")","eae6a18d":"movies.head()","52d316e8":"ratings.head()","f1ce032c":"final_dataset = ratings.pivot(index='movieId',columns='userId',values='rating')\nfinal_dataset.head()","dcaf60d2":"final_dataset.fillna(0,inplace=True)\nfinal_dataset.head()","c7b6ba01":"no_user_voted = ratings.groupby('movieId')['rating'].agg('count')\nno_movies_voted = ratings.groupby('userId')['rating'].agg('count')","e8ed6a98":"f,ax = plt.subplots(1,1,figsize=(16,4))\n# ratings['rating'].plot(kind='hist')\nplt.scatter(no_user_voted.index,no_user_voted,color='mediumseagreen')\nplt.axhline(y=10,color='r')\nplt.xlabel('MovieId')\nplt.ylabel('No. of users voted')\nplt.show()","ce123f8a":"final_dataset = final_dataset.loc[no_user_voted[no_user_voted > 10].index,:]","e4a94f18":"f,ax = plt.subplots(1,1,figsize=(16,4))\nplt.scatter(no_movies_voted.index,no_movies_voted,color='mediumseagreen')\nplt.axhline(y=50,color='r')\nplt.xlabel('UserId')\nplt.ylabel('No. of votes by user')\nplt.show()","9786d331":"final_dataset=final_dataset.loc[:,no_movies_voted[no_movies_voted > 50].index]\nfinal_dataset","a089a5c1":"sample = np.array([[0,0,3,0,0],[4,0,0,0,2],[0,0,0,0,1]])\nsparsity = 1.0 - ( np.count_nonzero(sample) \/ float(sample.size) )\nprint(sparsity)","1e22b126":"csr_sample = csr_matrix(sample)\nprint(csr_sample)","7b873c77":"csr_data = csr_matrix(final_dataset.values)\nfinal_dataset.reset_index(inplace=True)","d0b4c5d9":"knn = NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=20, n_jobs=-1)\nknn.fit(csr_data)","0a335c19":"def get_movie_recommendation(movie_name):\n    n_movies_to_reccomend = 10\n    movie_list = movies[movies['title'].str.contains(movie_name)]  \n    if len(movie_list):        \n        movie_idx= movie_list.iloc[0]['movieId']\n        movie_idx = final_dataset[final_dataset['movieId'] == movie_idx].index[0]\n        distances , indices = knn.kneighbors(csr_data[movie_idx],n_neighbors=n_movies_to_reccomend+1)    \n        rec_movie_indices = sorted(list(zip(indices.squeeze().tolist(),distances.squeeze().tolist())),key=lambda x: x[1])[:0:-1]\n        recommend_frame = []\n        for val in rec_movie_indices:\n            movie_idx = final_dataset.iloc[val[0]]['movieId']\n            idx = movies[movies['movieId'] == movie_idx].index\n            recommend_frame.append({'Title':movies.iloc[idx]['title'].values[0],'Distance':val[1]})\n        df = pd.DataFrame(recommend_frame,index=range(1,n_movies_to_reccomend+1))\n        return df\n    else:\n        return \"No movies found. Please check your input\"","6269dcdb":"get_movie_recommendation('Iron Man')","cb73d9b0":"https:\/\/www.analyticsvidhya.com\/blog\/2020\/11\/create-your-own-movie-movie-recommendation-system\/"}}