{"cell_type":{"70e3f33d":"code","bc83d8a8":"code","ec4bd6af":"code","7db53e84":"code","f442fcd4":"markdown","72924dc0":"markdown","0435faf5":"markdown","748914ef":"markdown","f77c2909":"markdown"},"source":{"70e3f33d":"# Default Kaggle Notebook imports\nimport numpy as np \nimport pandas as pd\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Additional package install and import        \n!pip install bar_chart_race\nimport bar_chart_race as bcr","bc83d8a8":"my_filepath = \"..\/input\/coffee-production-19912020-data-from-ico\/coffee-production-by-exporting-countries-1991-2020-ico.csv\"\nsource_data = pd.read_csv(my_filepath, encoding='ISO-8859-1')\nsource_data.head()","ec4bd6af":"coffee = source_data.drop(\"Type\", axis=1).set_index(\"Country\").transpose()\n\nrename_dict = {\"Viet Nam\" : \"Vietnam\",\n               \"Dominican Republic\" : \"Dominican Rep.\",\n               \"Democratic Republic of Congo\" : \"Dem. Rep. Congo\",\n               \"Central African Republic\" : \"Central African Rep.\",\n               \"Lao People's Democratic Republic\" : \"Laos\",\n               \"Bolivia (Plurinational State of)\" : \"Bolivia\",            \n              }\ncoffee.rename(columns=rename_dict, inplace=True)\n\ncoffee.head()","7db53e84":"# Source: https:\/\/pypi.org\/project\/bar-chart-race\/\n# API reference: https:\/\/www.dexplo.org\/bar_chart_race\/api\/\n\n# Top 10 Countries (note: takes a few minutes to process)\nbcr.bar_chart_race(\n    df=coffee,\n    title='Global Coffee Production (1991-2020): Top 10 Countries',\n    filename=None, # If None then display on screen, else save to .mp4 file\n    # filename=\"Coffee-Producers-Top-10-1991-2020.mp4\",\n    figsize=(5,4),\n    dpi=144, # Default 144, Use >288 dpi for better file export resolution\n    fixed_max=True,\n    sort='desc',\n    steps_per_period=15, # Default=10, higher value=faster speed\n    period_length=1000, # Default=500, higher value=longer duration\n    n_bars=10, # Max number of bars displayed, if not defined then all data shown\n    filter_column_colors=True,\n    period_label={'x': .95, 'y': .77, 'ha': 'right', 'va': 'center'},\n    period_summary_func=lambda v, r: {'x': .95, 'y': .72,\n                                      's': f'Global: {v.sum():,.0f} metric tons',\n                                      'ha': 'right', 'size': 7, 'family': 'Courier New'},    \n    shared_fontdict={'family' : 'Helvetica', 'color' : '.1'},\n    bar_size=.95,\n    bar_kwargs={'alpha': .7},\n    )","f442fcd4":"## Generating Bar Chart Race\nOnce the dataframe was in the right format, calling `bcr.bar_chart_race()` was quick and easy, though it does take a few minutes for processing to be completed.\n\nThere are quite a few parameters available to customise the chart, and more details can be found in the [API reference page](https:\/\/www.dexplo.org\/bar_chart_race\/api\/).\n\nWhen the `filename` parameter is set to `None`, the chart *(or rather video)* is rendered on screen as a Notebook output. If a filename is provided instead, the video is saved as an .mp4 file that can be downloaded.\n\nMy first attempt used all 55 countries in the dataset, but the bar chart was too long, so I shortened it to just the top 10 using the `n_bars` parameter. To revert back to using the entire dataset, just comment out this parameter.\n\nAnd that's all it took to generate a bar chart race!","72924dc0":"## Loading Data\nI re-used the same CSV file containing global coffee production that I had uploaded previously to [Kaggle Datasets](https:\/\/www.kaggle.com\/firefortysix\/coffee-production-19912020-data-from-ico), and called `pd.read_csv()` with the appropriate character encoding.\n\nIt was a small dataset, with country-level data kept in rows and annual coffee production numbers from 1991 to 2020 held in columns.\n\nThere was an additional \"Type\" column that indicated if the coffee was Arabica (A), Robusta (R) or both (A\/R, R\/A), but this wouldn't be needed when creating the bar chart race.","0435faf5":"## Reformatting Data\nAccording to the `bar_chart_race` [PyPI page](https:\/\/pypi.org\/project\/bar-chart-race\/), the input dataframe required \"every row to represent a single period of time\", and \"every column to hold values for a particular category\" with the \"index containing the time component\", although the last part was optional.\n\nSince my input data was the other-way-round, I had to transpose it. But before I did that, I had to drop the un-needed \"Type\" column first. I also had to set the \"Country\" column as the dataframe index so that it would become the column name after transposition. Some of the country names were a bit too long, so I renamed them.","748914ef":"## Installing and Importing Packages\nFirst things first, I added the standard `os`, `np` and `pandas` imports that come with every Kaggle Notebook. Then I tried importing `bar_chart_race` directly, but it wasn't recognised, so I had to do a `pip install` of the package first.","f77c2909":"# Bar Chart Race of Global Coffee Production from 1991-2020\n*Data sourced from the International Coffee Organisation (ICO):*  \n*https:\/\/ico.org\/historical\/1990%20onwards\/Excel\/1a%20-%20Total%20production.xlsx*\n\nHot off the heels of some [geospatial visualisation](https:\/\/www.kaggle.com\/firefortysix\/geospatial-viz-of-global-coffee-production-in-2020) that I built using global coffee production data in 2020, I wanted to see if I could use all the data available from 1991-2020 to render a bar chart race.\n\nAfter some googling, I found the `bar_chart_race` package that allowed me to do exactly that, with surprisingly minimal code.\n\n<img src=\"https:\/\/firefortysix.files.wordpress.com\/2021\/10\/bar-chart-race-top-10-coffee-producing-countries-1991-2020.gif\" alt=\"Bar Chart Race of Top 10 Coffee Producing Countries (1991-2020)\" width=\"750\"\/>\n"}}