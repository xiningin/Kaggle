{"cell_type":{"8d448400":"code","c8ad5ec9":"code","75d1da16":"code","4f18d036":"code","55fc5750":"code","debe4221":"code","fbd755c8":"code","fee8e3fd":"code","7201658b":"code","d64d21d9":"code","6c9e3f0a":"code","e475ede9":"code","340bd162":"code","80fc6044":"code","d4f9a269":"code","54d9e1bc":"code","acf99a11":"code","6176171f":"code","209f3e2f":"code","ca83a9ac":"code","1aed1c8c":"code","57208adf":"code","1043b3ec":"code","b5fc4e52":"code","5b9481b6":"code","849a91a1":"code","91d47c9b":"code","780d3234":"code","6c2e5d19":"code","6400771c":"code","4923f8f6":"code","cd4d1655":"code","5c22ec47":"code","2ad3a02f":"code","d2d5906b":"code","6199477d":"code","4eb053bf":"code","627b5a1d":"code","951be533":"code","039958ea":"code","eb4db88a":"code","a31d6ecd":"code","56ab8c66":"code","a5e47fd3":"code","becae88c":"code","9d58b252":"code","7e370d11":"code","d03dbda4":"code","5168b2a6":"markdown","e7941aa0":"markdown","4151c6df":"markdown","59a5e405":"markdown","d491f0f0":"markdown","8b5a57b2":"markdown","9ea54806":"markdown","557b4953":"markdown","3d8a6165":"markdown","283a53a1":"markdown","a499157b":"markdown","fc0fe7f7":"markdown","3fc1489e":"markdown","7d434b44":"markdown","e995f612":"markdown","fd814901":"markdown","c2d041ca":"markdown","15a13764":"markdown","050e3569":"markdown"},"source":{"8d448400":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn import metrics\nfrom sklearn.cluster import KMeans\nfrom scipy.spatial.distance import cdist \nfrom colorama import Fore, Back, Style\ny_ = Fore.YELLOW\nr_ = Fore.RED\ng_ = Fore.GREEN\nb_ = Fore.BLUE\nm_ = Fore.MAGENTA","c8ad5ec9":"custom_colors = [\"#023e8a\", \"#0096c7\",\"#90e0ef\",\"#ff5400\",\"#ffbd00\"]\ncustomPalette = sns.set_palette(sns.color_palette(custom_colors))","75d1da16":"sns.palplot(sns.color_palette(custom_colors),size=1)","4f18d036":"sns.set_context(\"poster\")","55fc5750":"players = pd.read_csv(r'..\/input\/indian-premier-league-csv-dataset\/Player.csv')\nplayers = players.drop([\"Is_Umpire\", \"Unnamed: 7\"], axis = 1)\nplayers.head(10)","debe4221":"runs = pd.read_csv(r'..\/input\/indian-premier-league-csv-dataset\/Ball_by_Ball.csv')\nruns.head(10)","fbd755c8":"runs.Dissimal_Type.unique()","fee8e3fd":"runs['Dissimal_Type'] = runs['Dissimal_Type'].replace(r'^\\s*$', np.nan, regex=True)","7201658b":"runs.dtypes","d64d21d9":"runs[\"Extra_Runs\"] = pd.to_numeric(runs[\"Extra_Runs\"], errors=\"coerce\")\nruns[\"Extra_Runs\"] = runs[\"Extra_Runs\"].fillna(0)\n\nruns[\"Batsman_Scored\"] = pd.to_numeric(runs[\"Batsman_Scored\"], errors=\"coerce\")\nruns[\"Batsman_Scored\"] = runs[\"Batsman_Scored\"].fillna(0)","6c9e3f0a":"runs.head()","e475ede9":"batsmen_runs = []\nbatsmen_ballsFaced = []\n\nfor i in runs[\"Striker_Id\"].unique():\n    r = runs[\"Batsman_Scored\"][runs[\"Striker_Id\"] == i].sum()\n    b = runs[\"Match_Id\"][runs[\"Striker_Id\"] == i].count()\n    batsmen_runs.append(r)\n    batsmen_ballsFaced.append(b)\n\nbatsmen = pd.DataFrame({\"Player_Id\": runs[\"Striker_Id\"].unique()})\n\nbatsmen[\"Runs\"] = batsmen_runs\nbatsmen[\"Balls_played\"] = batsmen_ballsFaced\n\nbatsmen[\"Strike_Rate\"] = (batsmen[\"Runs\"] * 100 \/ batsmen[\"Balls_played\"]).round(2)","340bd162":"batsmen.head(5)","80fc6044":"def triple_plot(x, title,c):\n    fig, ax = plt.subplots(3,1,figsize=(20,12),sharex=True)\n    sns.distplot(x, ax=ax[0],color=c)\n    ax[0].set(xlabel=None)\n    ax[0].set_title('Histogram + KDE')\n    sns.boxplot(x, ax=ax[1],color=c)\n    ax[1].set(xlabel=None)\n    ax[1].set_title('Boxplot')\n    sns.violinplot(x, ax=ax[2],color=c)\n    ax[2].set(xlabel=None)\n    ax[2].set_title('Violin plot')\n    fig.suptitle(title, fontsize=25)\n    plt.tight_layout(pad=3.0)\n    plt.show()","d4f9a269":"triple_plot(batsmen[\"Strike_Rate\"],'Distribution of Strike Rate',custom_colors[0])","54d9e1bc":"batsmen = batsmen[batsmen[\"Strike_Rate\"] > 120]","acf99a11":"batsmen.head()","6176171f":"triple_plot(batsmen[\"Strike_Rate\"],'Distribution of Strike Rate',custom_colors[1])","209f3e2f":"def scatter_plot(data,title,c,col1,col2):\n    fig = plt.figure(figsize=(12,6))\n    sns.scatterplot(x=col1, y=col2, data=data,color=c)\n    plt.title(title)\n    plt.show()","ca83a9ac":"def elbow_method(X):\n    distortions = [] \n    inertias = [] \n    mapping1 = {} \n    mapping2 = {} \n    K = range(2,10) \n\n    for k in K:  \n        kmeans = KMeans(n_clusters=k)\n        kmeans.fit(X)     \n\n        distortions.append(sum(np.min(cdist(X, kmeans.cluster_centers_, \n                          'euclidean'),axis=1)) \/ X.shape[0]) \n        inertias.append(kmeans.inertia_) \n\n        mapping1[k] = sum(np.min(cdist(X, kmeans.cluster_centers_, \n                     'euclidean'),axis=1)) \/ X.shape[0] \n        mapping2[k] = kmeans.inertia_ \n\n    print(\"Distortion\")\n    for key,val in mapping1.items(): \n        print(str(key)+' : '+str(val)) \n\n    print(\"Inertia\")\n    for key,val in mapping2.items(): \n        print(str(key)+' : '+str(val)) \n\n    plt.plot(K, distortions, 'bx-',color=custom_colors[3]) \n    plt.xlabel('Values of K') \n    plt.ylabel('Distortion') \n    plt.xticks(K)\n    plt.title('Elbow Method using Distortion') \n    plt.show() \n\n    plt.plot(K, inertias, 'bx-',color=custom_colors[4]) \n    plt.xlabel('Values of K') \n    plt.ylabel('Inertia') \n    plt.xticks(K)\n    plt.title('Elbow Method using Inertia') \n    plt.show() ","1aed1c8c":"elbow_method(batsmen[[\"Strike_Rate\", \"Runs\"]])","57208adf":"def scores(X):\n    K = range(3,8) \n\n    for k in K:  \n        kmeans = KMeans(n_clusters=k)\n        kmeans.fit(X) \n        y_hat = kmeans.predict(X)\n        labels = kmeans.labels_\n        \n        a = metrics.silhouette_score(X, labels, metric = 'euclidean')\n        b = metrics.calinski_harabasz_score(X, labels)\n        \n        print(\"k={0}, Silhouette score={1}, Calinski harabasz score={2}\".format(k,a, b))","1043b3ec":"scores(batsmen[[\"Strike_Rate\", \"Runs\"]])","b5fc4e52":"kmeans = KMeans(n_clusters=4)\nkmeans.fit(batsmen[[\"Strike_Rate\", \"Runs\"]])\nbatsmen[\"cluster\"] = kmeans.labels_\n\nfig = plt.figure(figsize=(12,6))\n\ncolors = custom_colors\n\nfor r in range(1,6):\n    clustered_Batsmen = batsmen[batsmen[\"cluster\"] == r]\n    plt.scatter(clustered_Batsmen[\"Strike_Rate\"], clustered_Batsmen[\"Runs\"], color=colors[r-1])\n    \nplt.title(\"IPL Batsmen\")\nplt.xlabel(\"Strike Rate of the Batsmen\")\nplt.ylabel(\"Runs scored by the Batsmen\")\nplt.show()","5b9481b6":"batsmen = batsmen.sort_values(by='cluster')","849a91a1":"Players_batsmen = players[[\"Player_Id\", \"Player_Name\",\"Batting_Hand\",\"DOB\",\"Country\"]]","91d47c9b":"batsmen = batsmen[batsmen.columns].merge(Players_batsmen, \"left\")\nbatsmen","780d3234":"fig = px.sunburst(batsmen, path=['Batting_Hand', 'cluster'],color='cluster')\nfig.show()","6c2e5d19":"batsmen.to_csv('\/kaggle\/working\/Batsmen.csv') ","6400771c":"bowlers_runs = []\nbowlers_over_count = []\n\nfor j in runs[\"Bowler_Id\"].unique():\n    r = runs[\"Batsman_Scored\"][runs[\"Bowler_Id\"] == j].sum() + runs[\"Extra_Runs\"][runs[\"Bowler_Id\"] == j].sum()\n    o = runs[\"Over_Id\"][runs[\"Bowler_Id\"] == j].count()\/6\n    \n    bowlers_runs.append(r)\n    bowlers_over_count.append(o)\n    \nbowlers = pd.DataFrame({\"Player_Id\": runs[\"Bowler_Id\"].unique()})\n\nbowlers[\"Runs\"] = bowlers_runs\nbowlers[\"Over_count\"] = bowlers_over_count\n\nbowlers[\"Econ_Rate\"] = (bowlers[\"Runs\"] \/ bowlers[\"Over_count\"]).round(2)\n\nbowlers.head()","4923f8f6":"triple_plot(bowlers[\"Econ_Rate\"],'Distribution of Economy Rate',custom_colors[0])","cd4d1655":"bowlers = bowlers[(bowlers[\"Econ_Rate\"] > 4) & (bowlers[\"Econ_Rate\"] < 8.5)]","5c22ec47":"triple_plot(bowlers[\"Econ_Rate\"],'Distribution of Economy Rate',custom_colors[1])","2ad3a02f":"elbow_method(batsmen[[\"Strike_Rate\", \"Runs\"]])","d2d5906b":"scores(batsmen[[\"Strike_Rate\", \"Runs\"]])","6199477d":"kmeans = KMeans(n_clusters=4)\nkmeans.fit(bowlers[[\"Econ_Rate\", \"Over_count\"]])\nbowlers[\"cluster\"] = kmeans.labels_\n\nfig = plt.figure(figsize=(12,6))\n\ncolors = custom_colors\n\nfor r in range(1,5):\n    clustered_Bowlers = bowlers[bowlers[\"cluster\"] == r]\n    plt.scatter(clustered_Bowlers[\"Econ_Rate\"], clustered_Bowlers[\"Over_count\"], color=colors[r-1])\n    \nplt.title(\"IPL Bowlers\")\nplt.xlabel(\"Economy Rate of the Bowler\")\nplt.ylabel(\"Number of Overs bowled by the Bowler\")\n    \nplt.show()","4eb053bf":"bowlers = bowlers.sort_values(by = 'cluster')\nbowlers.head()","627b5a1d":"Players_bowlers = players[[\"Player_Id\", \"Player_Name\",\"Bowling_Skill\",\"DOB\",\"Country\"]]","951be533":"bowlers = bowlers[bowlers.columns].merge(Players_bowlers, \"left\")\nbowlers","039958ea":"bowlers = bowlers[bowlers['Bowling_Skill'].notna()]","eb4db88a":"df_b = bowlers[['Bowling_Skill','cluster']].copy()\nct = pd.crosstab(df_b.Bowling_Skill, df_b.cluster)\n\nct.plot.bar(stacked=True)\nplt.legend(title='cluster',loc='upper right',bbox_to_anchor=(1.25, 1))\nplt.gcf().set_size_inches(10,8)\nplt.show()","a31d6ecd":"bowlers.to_csv('\/kaggle\/working\/Bowlers.csv') ","56ab8c66":"final=pd.concat([batsmen,bowlers],sort=\"True\").reset_index(drop=True)\nfinal","a5e47fd3":"final.to_csv('\/kaggle\/working\/final.csv')","becae88c":"batsmen_team=batsmen[['Player_Name','Strike_Rate','DOB','Country']].sort_values(by=['Strike_Rate'],ascending=False)\nbatsmen_team=batsmen_team.head(5)\nbatsmen_team","9d58b252":"bowlers_team=bowlers[['Player_Name','Econ_Rate','DOB','Country']].sort_values(by=['Econ_Rate'])\nbowlers_team=bowlers_team.head(5)\nbowlers_team","7e370d11":"d1 = pd.merge(batsmen,bowlers, how='inner', on=['Player_Id'])\nd2 = pd.merge(d1,players, on='Player_Id')\nall_rounder_team=d2[['Player_Name_x','Strike_Rate','Econ_Rate','DOB','Country']]\nall_rounder_team.rename(columns = {'Player_Name_x':'Player_Name'}, inplace = True) \nall_rounder_team=all_rounder_team.head(10)\nall_rounder_team","d03dbda4":"df=pd.concat([batsmen_team,bowlers_team,all_rounder_team],sort=True).drop_duplicates(subset='Player_Name', keep=\"first\").reset_index(drop=True)\ndf=df[['Player_Name','Strike_Rate','Econ_Rate','DOB','Country']]\nprint(\"-\"*30,\"Well rounded team\",\"-\"*30,\"\\n\")\ndf","5168b2a6":"*We notice the presence of outliers with the help of the box plot for strike rate.*","e7941aa0":"**Batting Hand and Cluster assigned to players**","4151c6df":"### K Means Clustering on Bowlers Data ","59a5e405":"Selecting top 5 bowlers","d491f0f0":"*Players with low strike rate are eliminated*","8b5a57b2":"Displaying the Batting Hand of Batsmen","9ea54806":"### Data preprocessing","557b4953":"The players with:\n\nStrike_Rate: NaN are **batsmen**\n\nEconomy_Rate: NaN are **bowlers**\n\nboth Strike_Rate and Economy_Rate listed are **all rounders**.","3d8a6165":"### Example of a well-rounded Team","283a53a1":"### K Means Clustering on Batsmen Data ","a499157b":"**Bowling Skill and Cluster assigned to players**","fc0fe7f7":"### Batsmen","3fc1489e":"> economy rate = total runs conceded\/number of overs bowled","7d434b44":"> Aim: To create clusters of players based on their strengths in order to show a well-rounded cricket team of all time.\n","e995f612":"Displaying the Bowling Skill of Batsmen","fd814901":"> *strike_rate = runs per 100 balls faced*","c2d041ca":"Selecting top 5 batsmen","15a13764":"Selecting top 10 all rounders","050e3569":"### Bowlers"}}