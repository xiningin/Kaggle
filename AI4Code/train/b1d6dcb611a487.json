{"cell_type":{"ad8bba2d":"code","7ae8a24e":"code","b63d2636":"code","9efaad95":"code","43821dd5":"code","8fcd59a4":"code","17a48dcd":"code","44dd384a":"code","b53d5008":"code","dbe26849":"code","e9b16b37":"code","afddd9ad":"code","4d068ad2":"markdown","02ccf347":"markdown","dd6f0ed6":"markdown","b43bea44":"markdown","8d84349a":"markdown","210d0cd4":"markdown","049a1d20":"markdown","7a5cd25f":"markdown","65f88649":"markdown","cd0c7abc":"markdown","ae4ee51b":"markdown","f9de16db":"markdown"},"source":{"ad8bba2d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # Data visualization\nimport folium #for mapping \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7ae8a24e":"df_conf=pd.read_csv('..\/input\/coronavirus-6th-mar-2020-johns-hopkins-university\/time_series_19-covid-Confirmed.csv')\ndf_death=pd.read_csv('..\/input\/coronavirus-6th-mar-2020-johns-hopkins-university\/time_series_19-covid-Deaths.csv')\ndf_rec=pd.read_csv('..\/input\/coronavirus-6th-mar-2020-johns-hopkins-university\/time_series_19-covid-Recovered.csv')\n\nprint(\"conf_shape:\", df_conf.shape)                     \nprint(\"death_shape:\", df_death.shape)\nprint(\"rec_shape:\", df_rec.shape)\n\ndf_death.head()","b63d2636":"import folium\nworld_map = folium.Map(location=[0,0], zoom_start=2,tiles='CartoDB positron')\n\nfor lat, lon,conf in zip(df_conf['Lat'], df_conf['Long'],df_conf.iloc[:,-1]):\n    folium.CircleMarker([lat, lon], \n                        radius=5,color='red',\n                        fill_color='red',fill_opacity=0.5,\n                        tooltip=\"Confirmed Cases :\"+str(conf)).add_to(world_map)\nworld_map","9efaad95":"df_chn_full=df_conf[df_conf[\"Country\/Region\"]==\"Mainland China\"] #Data within China\n\nchina_map = folium.Map(location=[35,100], zoom_start=4,tiles='Stamen Toner')\n\nfor lat, lon,state, cases in zip(df_chn_full['Lat'], df_chn_full['Long'],df_chn_full['Province\/State'], df_chn_full.iloc[:,-1]):\n    folium.CircleMarker([lat, lon],\n                        radius=5,\n                        color='red',\n                        tooltip =('Province: ' + str(state))+ '<br>' +\"Cases :\"+str(cases),\n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(china_map)\nchina_map","43821dd5":"def stats_calculator(df_conf,df_death,df_rec):\n    \"\"\"\n    Docstring:\n    Calculate the number of Total Deaths, Confirmed Cases, Recoveries, New Cases and Mortality Rate each day\n    \n    Takes in confirmed, death and recovered dataframes as argument\n    Return a dataframe\n    \"\"\"\n    #Extract dates\n    date=df_death.keys()[4:]\n    \n    #Initialize Stats\n    total_death_date=[]\n    total_rec_date=[]\n    total_conf_date=[]\n    mortality_rate=[]\n    \n    #Append Stats\n    for i in date:\n        total_death_date.append(df_death[i].sum())\n        total_rec_date.append(df_rec[i].sum())\n        total_conf_date.append(df_conf[i].sum())\n        mortality_rate.append(df_death[i].sum()*100\/(df_death[i].sum()+df_conf[i].sum()))\n\n    #Make stats into a dataframe\n    df_temp=pd.DataFrame(data=date, columns=[\"date\"])\n    df_temp[\"death\"]=total_death_date\n    df_temp[\"rec\"]=total_rec_date\n    df_temp[\"conf\"]=total_conf_date\n    df_temp[\"mort_rate\"]=mortality_rate\n    df_temp['new_cases']=df_temp.conf\n    for i in range(1,df_temp.shape[0]):\n        df_temp.new_cases[i]=df_temp.conf[i]-df_temp.conf[i-1]\n    \n    #Return dataframe\n    return(df_temp)","8fcd59a4":"def stats_plotter(df_temp):\n    \"\"\"\n    Docstring: \n    Input dataframe object\n    Plots Total Confirmed Cases, Recovered Cases, Total Deaths Vs Date \n    \"\"\"\n    \n    #Print Latest Stats\n    print(\"Total Confirmed Cases :\",df_temp.conf.iloc[-1])\n    print(\"Total Recovered Patients :\",df_temp.rec.iloc[-1])\n    print(\"Total Deaths :\",df_temp.death.iloc[-1])\n    \n    #Plot Stats\n    plt.figure(figsize=(10,6))\n    plt.title(\"COVID-19 Time Series\")\n    plt.plot(df_temp.date,df_temp.death, label=\"Death\")\n    plt.plot(df_temp.date,df_temp.conf, label=\"Confirmed Cases\")\n    plt.plot(df_temp.date,df_temp.rec, label=\"Recovered\")\n    plt.xticks(rotation=90)\n    plt.legend()\n    plt.grid()\n    plt.show()\n    \n    #Plot Mortality Rate\n    print(\"Mortality Rate: \"+ str(round(df_temp.mort_rate.iloc[-1],2))+\"%\")\n    plt.figure(figsize=(10,4))\n    plt.title(\"COVID-19 Mortality Rate (in %) Vs Time\")\n    plt.plot(df_temp.date,df_temp.mort_rate, label=\"Mortality Rate\")\n    plt.xticks(rotation=90)\n    plt.legend()\n    plt.grid()\n    plt.show()","17a48dcd":"def only_country(country_name):\n    \"\"\"\n    Input- Country Name\n    Output- Data of that country\n    \"\"\"\n    df_death_ctry=df_death[df_death[\"Country\/Region\"]==country_name]\n    df_rec_ctry=df_rec[df_rec[\"Country\/Region\"]==country_name]\n    df_conf_ctry=df_conf[df_conf[\"Country\/Region\"]==country_name]\n\n    return(stats_calculator(df_conf_ctry,df_death_ctry,df_rec_ctry))\n\ndef except_country(country_name):\n    \"\"\"\n    Input- Country Name\n    Output- Data outside that country\n    \"\"\"\n    df_death_ctry=df_death[df_death[\"Country\/Region\"]!=country_name]\n    df_rec_ctry=df_rec[df_rec[\"Country\/Region\"]!=country_name]\n    df_conf_ctry=df_conf[df_conf[\"Country\/Region\"]!=country_name]\n\n    return(stats_calculator(df_conf_ctry,df_death_ctry,df_rec_ctry))","44dd384a":"df_total=stats_calculator(df_conf,df_death,df_rec)\nstats_plotter(df_total)","b53d5008":"stats_plotter(only_country(\"South Korea\"))\n","dbe26849":"df_chn=only_country(\"Mainland China\")  #dataframe within China\ndf_oc=except_country(\"Mainland China\") #dataframe outside China\n\nplt.figure(figsize=(12,8))\nplt.title(\"COVID-19 Spred: China Vs Rest of the World\", fontsize=18)\nplt.plot(df_total.date,df_total.conf,'k--', label=\"Global\")\nplt.plot(df_total.date,df_chn.conf, label=\"Inside China\")\nplt.plot(df_total.date,df_oc.conf, label=\"Outside China\")\nplt.legend()\nplt.xticks(rotation=90)\nplt.show()","e9b16b37":"plt.figure(figsize=(12,8))\nplt.title(\"COVID-19 New Cases: China Vs Rest of the World\", fontsize=18)\nplt.plot(df_total.date,df_total.new_cases,'k--', label=\"Global\")\nplt.plot(df_total.date,df_chn.new_cases, label=\"Inside China\")\nplt.plot(df_total.date,df_oc.new_cases, label=\"Outside China\")\nplt.legend()\nplt.xticks(rotation=90)\nplt.show()","afddd9ad":"c=df_chn.tail(5).new_cases.sum()\nprint(\"New Cases in China in last 5 days: \",c)\no=df_oc.tail(5).new_cases.sum()\nprint(\"New Cases outside China in last 5 days: \",o)\nprint(\"Percentage of Cases outside China : \", round(o*100\/(o+c),2),\"%\")","4d068ad2":"**Function for calculating Stats**","02ccf347":"**UPVOTES WILL BE APPRECIATED**","dd6f0ed6":"**Function for plotting**","b43bea44":"**\nData Visualization Specific Country\n**\n\nVisualization for South Korea Specific Data\n","8d84349a":"**COVID-19 New Cases: China Vs Rest of the World**","210d0cd4":"**How is China doing??**","049a1d20":"**Function for extracting data pertaining to\/ except a specific Country\n**","7a5cd25f":"**Last 5 days trend**","65f88649":"**COVID-19 Spread: China Vs Rest of the World**","cd0c7abc":"In last five days we can observe that around 94.5% cases have been observed outside China","ae4ee51b":"**COVID-19 Global Time-Series Visualization**","f9de16db":"**It is a PANDEMIC!!!**"}}