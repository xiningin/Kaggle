{"cell_type":{"9f48701b":"code","c4a684be":"code","84da7e26":"code","d45a36b0":"code","9f9a646e":"code","91e0ae3b":"code","007b466b":"code","766541d5":"code","e7effa22":"code","59fe0087":"markdown","97552946":"markdown","e386e30c":"markdown","1624fd06":"markdown","6d013128":"markdown","4f99e6c8":"markdown","2994aa3b":"markdown","26b82a28":"markdown","72337839":"markdown"},"source":{"9f48701b":"%%bash\ngit clone -q https:\/\/github.com\/Kaggle\/kaggle-environments.git\ncd kaggle-environments && pip3 install -qq . && cd ..\n\napt-get -qq update\napt-get -qq install libsdl2-gfx-dev libsdl2-ttf-dev > \/dev\/null\n\nGRF_VER=v2.7\nGRF_PATH=football\/third_party\/gfootball_engine\/lib\nGRF_URL=https:\/\/storage.googleapis.com\/gfootball\/prebuilt_gameplayfootball_${GRF_VER}.so\ngit clone -q -b ${GRF_VER} https:\/\/github.com\/google-research\/football.git\nmkdir -p ${GRF_PATH}\nwget -q ${GRF_URL} -O ${GRF_PATH}\/prebuilt_gameplayfootball.so","c4a684be":"%%writefile football\/gfootball\/scenarios\/academy_custom.py\nfrom . import *\n\ndef build_scenario(builder):\n    builder.config().game_duration = 300\n    builder.config().deterministic = False\n    builder.config().offsides = False\n    builder.config().end_episode_on_score = True\n    builder.config().end_episode_on_out_of_play = True\n    builder.config().end_episode_on_possession_change = True\n    builder.SetBallPosition(0.3, -0.05)\n\n    builder.SetTeam(Team.e_Left)\n    builder.AddPlayer(-1.0, 0.0, e_PlayerRole_GK)\n    builder.AddPlayer(0.1, -0.1, e_PlayerRole_CF)\n\n    builder.SetTeam(Team.e_Right)\n    builder.AddPlayer(-1.0, 0.0, e_PlayerRole_GK)\n    builder.AddPlayer(-0.7, 0.05, e_PlayerRole_CB)","84da7e26":"%%bash\ncd football && GFOOTBALL_USE_PREBUILT_SO=1 pip3 install -qq . && cd ..\nrm -rf football kaggle-environments","d45a36b0":"!find \/ -name academy*.py","9f9a646e":"%%writefile submission.py\nfrom math import sqrt, atan2, pi\nfrom kaggle_environments.envs.football.helpers import *\n\ndef angle(src, tgt):\n    xdir = tgt[0] - src[0]\n    ydir = tgt[1] - src[1]\n    theta = round(atan2(xdir, -ydir) * 180 \/ pi, 2)\n    while theta < 0:\n        theta += 360\n    return theta\n\n\ndef direction(src, tgt):\n    actions = [Action.Top, Action.TopRight, Action.Right, Action.BottomRight, \n               Action.Bottom, Action.BottomLeft, Action.Left, Action.TopLeft]\n    theta = angle(src, tgt)\n    index = int(((theta+45\/2)%360)\/45)\n    return actions[index]\n\n@human_readable_agent\ndef agent(obs):\n    goal_pos = [1, 0]\n    ball_pos = obs[\"ball\"]\n    \n    player_pos = obs[\"left_team\"][obs[\"active\"]]\n    player_x, player_y = player_pos\n    \n    ball_owned = (obs[\"ball_owned_team\"] == 0 and \n                  obs[\"ball_owned_player\"] == obs[\"active\"])\n\n    def shot(shot_dir):\n        if shot_dir not in obs[\"sticky_actions\"]:\n            return shot_dir\n        return Action.Shot\n    \n    def high_pass(pass_dir):\n        if pass_dir not in obs[\"sticky_actions\"]:\n            return pass_dir\n        return Action.HighPass   \n    \n    if  player_x < 0.6:\n        if Action.Sprint not in obs['sticky_actions']:\n            return Action.Sprint\n    else:\n        if Action.Sprint in obs['sticky_actions'] and ball_owned:\n            return Action.ReleaseSprint\n    \n    if ball_owned:\n        goal_dir = direction(player_pos, goal_pos)\n        if player_x < -0.6:\n            return shot(goal_dir)\n        if player_x < -0.4:\n            return high_pass(goal_dir)\n        if player_x > 0.6:\n            return shot(goal_dir)\n        if player_x > 0.4 and abs(player_y) < 0.2:\n            return shot(goal_dir)\n        return goal_dir\n        \n    return direction(player_pos, ball_pos)","91e0ae3b":"from kaggle_environments import make\n\nscenarios = {0: \"academy_custom\",\n             1: \"academy_3_vs_1_with_keeper\", \n             2: \"academy_corner\", \n             3: \"academy_counterattack_easy\", \n             4: \"academy_counterattack_hard\", \n             5: \"academy_empty_goal\", \n             6: \"academy_empty_goal_close\", \n             7: \"academy_pass_and_shoot_with_keeper\", \n             8: \"academy_run_pass_and_shoot_with_keeper\", \n             9: \"academy_run_to_score\", \n             10: \"academy_run_to_score_with_keeper\",\n             11: \"academy_single_goal_versus_lazy\",\n             12: \"11_vs_11_kaggle\"}\n\nscenario_num = 0\nenv = make(\"football\", debug=True,\n           configuration={\"save_video\": True, \n                          \"scenario_name\": scenarios[scenario_num], \n                          \"running_in_notebook\": True})\n         \noutput = env.run([\"submission.py\", \"run_right\"])\n\nscores = output[-1][0][\"observation\"][\"players_raw\"][0][\"score\"]\nprint(\"Scores  {0} : {1}\".format(*scores))\nprint(\"Rewards {0} : {1}\".format(output[-1][0][\"reward\"], output[-1][1][\"reward\"]))","007b466b":"%%writefile visualizer.py\nfrom matplotlib import animation, patches, rcParams\nfrom matplotlib import pyplot as plt\nfrom kaggle_environments.envs.football.helpers import *\n\nWIDTH = 110\nHEIGHT = 46.2\nPADDING = 10\n\n\ndef initFigure(figwidth=12):\n    figheight = figwidth * (HEIGHT + 2 * PADDING) \/ (WIDTH + 2 * PADDING)\n\n    fig = plt.figure(figsize=(figwidth, figheight))\n    ax = plt.axes(xlim=(-PADDING, WIDTH + PADDING), ylim=(-PADDING, HEIGHT + PADDING))\n    plt.axis(\"off\")\n    return fig, ax\n\n\ndef drawPitch(ax):\n    paint = \"white\"\n\n    # Grass around pitch\n    rect = patches.Rectangle((-PADDING \/ 2, -PADDING \/ 2), WIDTH + PADDING, HEIGHT + PADDING,\n                             lw=1, ec=\"black\", fc=\"#3f995b\", capstyle=\"round\")\n    ax.add_patch(rect)\n\n    # Pitch boundaries\n    rect = plt.Rectangle((0, 0), WIDTH, HEIGHT, ec=paint, fc=\"None\", lw=2)\n    ax.add_patch(rect)\n\n    # Middle line\n    plt.plot([WIDTH \/ 2, WIDTH \/ 2], [0, HEIGHT], color=paint, lw=2)\n\n    # Dots\n    dots_x = [11, WIDTH \/ 2, WIDTH - 11]\n    for x in dots_x:\n        plt.plot(x, HEIGHT \/ 2, \"o\", color=paint, lw=2)\n\n    # Penalty box\n    penalty_box_dim = [16.5, 40.3]\n    penalty_box_pos_y = (HEIGHT - penalty_box_dim[1]) \/ 2\n\n    rect = plt.Rectangle((0, penalty_box_pos_y),\n                         penalty_box_dim[0], penalty_box_dim[1], ec=paint, fc=\"None\", lw=2)\n    ax.add_patch(rect)\n    rect = plt.Rectangle((WIDTH, penalty_box_pos_y), -\n                         penalty_box_dim[0], penalty_box_dim[1], ec=paint, fc=\"None\", lw=2)\n    ax.add_patch(rect)\n\n    # Goal box\n    goal_box_dim = [5.5, penalty_box_dim[1] - 11 * 2]\n    goal_box_pos_y = (penalty_box_pos_y + 11)\n\n    rect = plt.Rectangle((0, goal_box_pos_y),\n                         goal_box_dim[0], goal_box_dim[1], ec=paint, fc=\"None\", lw=2)\n    ax.add_patch(rect)\n    rect = plt.Rectangle((WIDTH, goal_box_pos_y),\n                         -goal_box_dim[0], goal_box_dim[1], ec=paint, fc=\"None\", lw=2)\n    ax.add_patch(rect)\n\n    # Goals\n    goal_width = 0.044 \/ 0.42 * HEIGHT\n    goal_pos_y = (HEIGHT \/ 2 - goal_width \/ 2)\n    rect = plt.Rectangle((0, goal_pos_y), -2, goal_width,\n                         ec=paint, fc=paint, lw=2, alpha=0.3)\n    ax.add_patch(rect)\n    rect = plt.Rectangle((WIDTH, goal_pos_y), 2, goal_width,\n                         ec=paint, fc=paint, lw=2, alpha=0.3)\n    ax.add_patch(rect)\n\n    # Middle circle\n    mid_circle = plt.Circle([WIDTH \/ 2, HEIGHT \/ 2], 9.15, color=paint, fc=\"None\", lw=2)\n    ax.add_artist(mid_circle)\n\n    # Penalty box arcs\n    left = patches.Arc([11, HEIGHT \/ 2], 2 * 9.15, 2 * 9.15,\n                       color=paint, fc=\"None\", lw=2, angle=0, theta1=308, theta2=52)\n    ax.add_patch(left)\n    right = patches.Arc([WIDTH - 11, HEIGHT \/ 2], 2 * 9.15, 2 * 9.15,\n                        color=paint, fc=\"None\", lw=2, angle=180, theta1=308, theta2=52)\n    ax.add_patch(right)\n\n    # Arcs on corners\n    corners = [[0, 0], [WIDTH, 0], [WIDTH, HEIGHT], [0, HEIGHT]]\n    angle = 0\n    for x, y in corners:\n        c = patches.Arc([x, y], 2, 2,\n                        color=paint, fc=\"None\", lw=2, angle=angle, theta1=0, theta2=90)\n        ax.add_patch(c)\n        angle += 90\n\n\ndef scale_x(x):\n    return (x + 1) * (WIDTH \/ 2)\n\n\ndef scale_y(y):\n    return (y + 0.42) * (HEIGHT \/ 0.42 \/ 2)\n\n\ndef extract_data(raw_obs):\n    obs = raw_obs[0][\"observation\"][\"players_raw\"][0]\n    res = dict()\n    res[\"left_team\"] = [(scale_x(x), scale_y(y)) for x, y in obs[\"left_team\"]]\n    res[\"right_team\"] = [(scale_x(x), scale_y(y)) for x, y in obs[\"right_team\"]]\n\n    ball_x, ball_y, ball_z = obs[\"ball\"]\n    res[\"ball\"] = [scale_x(ball_x), scale_y(ball_y), ball_z]\n    res[\"score\"] = obs[\"score\"]\n    res[\"steps_left\"] = obs[\"steps_left\"]\n    res[\"ball_owned_team\"] = obs[\"ball_owned_team\"]\n\n    left_active = raw_obs[0][\"observation\"][\"players_raw\"][0][\"active\"]\n    res[\"left_player\"] = res[\"left_team\"][left_active]\n\n    right_active = raw_obs[1][\"observation\"][\"players_raw\"][0][\"active\"]\n    res[\"right_player\"] = res[\"right_team\"][right_active]\n\n    res[\"right_team_roles\"] = obs[\"right_team_roles\"]\n    res[\"left_team_roles\"] = obs[\"left_team_roles\"]\n    res[\"left_team_direction\"] = obs[\"left_team_direction\"]\n    res[\"right_team_direction\"] = obs[\"right_team_direction\"]\n    res[\"game_mode\"] = GameMode(obs[\"game_mode\"]).name\n    return res\n\n\ndef draw_team(obs, team, side):\n    x_coords, y_coords = zip(*obs[side])\n    team.set_data(x_coords, y_coords)\n\n\ndef draw_ball(obs, ball):\n    ball.set_markersize(8 + obs[\"ball\"][2])  # Scale size of ball based on height\n    ball.set_data(obs[\"ball\"][:2])\n\n\ndef draw_active_players(obs, left_player, right_player):\n    x1, y1 = obs[\"left_player\"]\n    left_player.set_data(x1, y1)\n\n    x2, y2 = obs[\"right_player\"]\n    right_player.set_data(x2, y2)\n\n    if obs[\"ball_owned_team\"] == 0:\n        left_player.set_markerfacecolor(\"yellow\")\n        left_player.set_markersize(20)\n        right_player.set_markerfacecolor(\"blue\")\n        right_player.set_markersize(18)\n    elif obs[\"ball_owned_team\"] == 1:\n        left_player.set_markerfacecolor(\"firebrick\")\n        left_player.set_markersize(18)\n        right_player.set_markerfacecolor(\"yellow\")\n        right_player.set_markersize(20)\n    else:\n        left_player.set_markerfacecolor(\"firebrick\")\n        left_player.set_markersize(18)\n        right_player.set_markerfacecolor(\"blue\")\n        right_player.set_markersize(18)\n\n\ndef draw_team_active(obs, team_left_active, team_right_active):\n    team_left_active.set_data(WIDTH \/ 2 - 7, -7)\n    team_right_active.set_data(WIDTH \/ 2 + 7, -7)\n\n    if obs[\"ball_owned_team\"] == 0:\n        team_left_active.set_markerfacecolor(\"indianred\")\n    else:\n        team_left_active.set_markerfacecolor(\"mistyrose\")\n\n    if obs[\"ball_owned_team\"] == 1:\n        team_right_active.set_markerfacecolor(\"royalblue\")\n    else:\n        team_right_active.set_markerfacecolor(\"lightcyan\")\n\n\ndef draw_players_directions(obs, directions, side):\n    index = 0\n    if \"right\" in side:\n        index = 11\n    for i, player_dir in enumerate(obs[f\"{side}_direction\"]):\n        x_dir, y_dir = player_dir\n        dist = (x_dir ** 2 + y_dir ** 2)**0.5 + 0.00001  # to prevent division by 0\n        x = obs[side][i][0]\n        y = obs[side][i][1]\n        directions[i + index].set_data([x, x + x_dir \/ dist], [y, y + y_dir \/ dist])\n\n\ndef player_actions(step, side):\n    if side == 0:\n        actions = {0: \"idle\", 1: \"\u2190\", 2: \"\u2196\", 3: \"\u2191\", 4: \"\u2197\", 5: \"\u2192\", 6: \"\u2198\", 7: \"\u2193\", 8: \"\u2199\",\n                   9: \"l_pass\", 10: \"h_pass\", 11: \"s_pass\", 12: \"shot\",\n                   13: \"sprint\", 14: \"rel_dir\", 15: \"rel_spr\",\n                   16: \"slide\", 17: \"dribble\", 18: \"rel_dri\"}\n    else:\n        actions = {0: \"idle\", 1: \"\u2192\", 2: \"\u2198\", 3: \"\u2193\", 4: \"\u2199\", 5: \"\u2190\", 6: \"\u2196\", 7: \"\u2191\", 8: \"\u2197\",\n                   9: \"l_pass\", 10: \"h_pass\", 11: \"s_pass\", 12: \"shot\",\n                   13: \"sprint\", 14: \"rel_dir\", 15: \"rel_spr\",\n                   16: \"slide\", 17: \"dribble\", 18: \"rel_dri\"}\n\n    obs = step[side][\"observation\"][\"players_raw\"][0]\n\n    if obs[\"sticky_actions\"][8]:\n        spr = \"+spr\"\n    else:\n        spr = \"-spr\"\n\n    if obs[\"sticky_actions\"][9]:\n        dri = \"+dri\"\n    else:\n        dri = \"-dri\"\n\n    if 1 in obs[\"sticky_actions\"][0:8]:\n        i = obs[\"sticky_actions\"][0:8].index(1) + 1\n        drn = actions[i]\n    else:\n        drn = \"|\"\n\n    if step[side][\"action\"]:\n        act = actions[step[side][\"action\"][0]]\n    else:\n        act = \"idle\"\n\n    return f\"{spr} {dri} {drn} [{act}]\".ljust(24, \" \")\n\n\nsteps = None\ndrawings = None\ndirections = None\nball = left_player = right_player = None\nteam_left = team_right = None\nteam_left_active = team_right_active = None\nteam_left_actions = team_right_actions = None\nteam_left_number = team_right_number = None\nteam_left_direction = team_right_direction = None\ntext_frame = game_mode = match_info = None\n\n\ndef init():\n    ball.set_data([], [])\n    left_player.set_data([], [])\n    right_player.set_data([], [])\n    team_left.set_data([], [])\n    team_right.set_data([], [])\n    team_left_active.set_data([], [])\n    team_right_active.set_data([], [])\n    return drawings\n\n\ndef animate(i):\n    obs = extract_data(steps[i])\n\n    # Draw info about ball possesion\n    draw_active_players(obs, left_player, right_player)\n    draw_team_active(obs, team_left_active, team_right_active)\n\n    # Draw players\n    draw_team(obs, team_left, \"left_team\")\n    draw_team(obs, team_right, \"right_team\")\n\n    draw_players_directions(obs, directions, \"left_team\")\n    draw_players_directions(obs, directions, \"right_team\")\n\n    draw_ball(obs, ball)\n\n    # Draw textual informations\n    text_frame.set_text(f\"Step {i}\/{obs['steps_left'] + i - 1}\")\n    game_mode.set_text(f\"{obs['game_mode']} Mode\")\n\n    score_a, score_b = obs[\"score\"]\n    match_info.set_text(f\"{score_a} : {score_b}\")\n\n    team_left_actions.set_text(player_actions(steps[i], 0))\n    team_right_actions.set_text(player_actions(steps[i], 1))\n\n    team_left_number.set_text(str(steps[i][0][\"observation\"][\"players_raw\"][0][\"active\"]))\n    team_right_number.set_text(str(steps[i][1][\"observation\"][\"players_raw\"][0][\"active\"]))\n\n    return drawings\n\n\ndef visualize(trace):\n    global steps\n    global drawings\n    global directions\n    global ball, left_player, right_player\n    global team_left, team_right\n    global team_left_active, team_right_active\n    global text_frame, game_mode, match_info\n    global team_left_actions, team_right_actions\n    global team_left_number, team_right_number\n    global team_left_direction, team_right_direction\n\n    rcParams['font.family'] = 'monospace'\n    rcParams['font.size'] = 12\n\n    steps = trace\n\n    fig, ax = initFigure()\n    drawPitch(ax)\n    ax.invert_yaxis()\n\n    left_player, = ax.plot([], [], \"o\", ms=18, mfc=\"firebrick\", mew=0, alpha=0.5)\n    right_player, = ax.plot([], [], \"o\", ms=18, mfc=\"blue\", mew=0, alpha=0.5)\n    team_left, = ax.plot([], [], \"o\", ms=12, mfc=\"firebrick\", mew=1, mec=\"white\")\n    team_right, = ax.plot([], [], \"o\", ms=12, mfc=\"blue\", mew=1, mec=\"white\")\n    ball, = ax.plot([], [], \"o\", ms=8, mfc=\"wheat\", mew=1, mec=\"black\")\n\n    team_left_active, = ax.plot([], [], \"o\", ms=16, mfc=\"mistyrose\", mec=\"None\")\n    team_right_active, = ax.plot([], [], \"o\", ms=16, mfc=\"lightcyan\", mec=\"None\")\n\n    textheight = -6\n    text_frame = ax.text(-5, textheight, \"\", ha=\"left\")\n    match_info = ax.text(WIDTH \/ 2, textheight, \"\", ha=\"center\", fontweight=\"bold\")\n    game_mode = ax.text(WIDTH + 5, textheight, \"\", ha=\"right\")\n\n    team_left_actions = ax.text(WIDTH \/ 4 + 2, textheight, \"\", ha=\"center\")\n    team_right_actions = ax.text(3 * WIDTH \/ 4 + 2, textheight, \"\", ha=\"center\")\n\n    team_left_number = ax.text(WIDTH \/ 2 - 7, -6.3, \"\", ha=\"center\", fontsize=10)\n    team_right_number = ax.text(WIDTH \/ 2 + 7, -6.3, \"\", ha=\"center\", fontsize=10)\n\n    # Drawing of directions definitely can be done in a better way\n    directions = []\n    for _ in range(22):\n        direction, = ax.plot([], [], color=\"yellow\", lw=1.5)\n        directions.append(direction)\n\n    drawings = [team_left_active, team_right_active, left_player, right_player,\n                team_left, team_right, ball, text_frame, match_info,\n                game_mode, team_left_actions, team_right_actions, team_left_number, team_right_number]\n\n    fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=None, hspace=None)\n    anim = animation.FuncAnimation(fig, animate, init_func=init, blit=True,\n                                   interval=100, frames=len(steps), repeat=True)\n    return anim","766541d5":"from IPython.display import HTML\nfrom visualizer import visualize\nviz = visualize(output)","e7effa22":"HTML(viz.to_html5_video())","59fe0087":"---\n# Academy Scenarios","97552946":"---\n# Modified Template Bot\nA modified version of the [Template Bot](https:\/\/www.kaggle.com\/piotrstanczyk\/gfootball-template-bot) with some ideas from [GFootball Rules from Environment Exploration](https:\/\/www.kaggle.com\/sx2154\/gfootball-rules-from-environment-exploration) and [Simple Baseline Bot](https:\/\/www.kaggle.com\/eugenkeil\/simple-baseline-bot).","e386e30c":"# Finish Install\nComplete gfootball installation with the custom scenario included.","1624fd06":"---\n\n# <center> GFootball Academy <\/center>\n\n---\n<center><a data-flickr-embed=\"true\" href=\"https:\/\/www.flickr.com\/photos\/robocup2013\/9175658500\/in\/photostream\/\" title=\"BvOF RoboCup2013 - finals humanoid kid size soccer\"><img src=\"https:\/\/live.staticflickr.com\/5482\/9175658500_76331391bf_c.jpg\" width=\"800\" height=\"533\" alt=\"BvOF RoboCup2013 - finals humanoid kid size soccer\"><\/a><script async src=\"\/\/embedr.flickr.com\/assets\/client-code.js\" charset=\"utf-8\"><\/script><\/center>\n\n<center><small>Photo credit <a href=\"https:\/\/www.flickr.com\/photos\/robocup2013\/\">RoboCup2013<\/a><\/small><\/center>\n\n---","6d013128":"# Add a Custom Scenario\nInclude a custom scenario inside the gfootball source. May be useful for quick bot testing or training. More example scenarios in the [repository](https:\/\/github.com\/google-research\/football\/tree\/master\/gfootball\/scenarios).","4f99e6c8":"# Start Install\nInstall kaggle-environments and gfootball dependencies, clone gfootball source and download football engine binary.","2994aa3b":"This animation is created using the beautiful tutorial from [Human Readable Visualization](https:\/\/www.kaggle.com\/jaronmichal\/human-readable-visualization).\n\n\nModifications made to the original: \n1. Added player actions.\n2. Added markers for active players on both teams.\n3. Changed relative sizes of pitch, goal posts and players.\n4. Various cosmetic enhancements to fonts and colours.","26b82a28":"After installation, scenario files can be modified or added in the install location.","72337839":"---\n# Visualization"}}