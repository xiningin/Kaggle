{"cell_type":{"34fa5634":"code","729127c2":"code","4adfe945":"code","29c17e49":"code","eecc48c9":"code","98572282":"code","f4b8ac92":"code","4e6d8d1e":"code","09a4d19d":"code","7964c14d":"code","65cfbc96":"code","138f6e10":"code","966a1d04":"code","9c60bc84":"code","04aeebab":"code","4a0c974e":"code","f99f99ab":"code","d0b8effd":"code","d5b6487c":"code","a4fb4593":"code","e558bbeb":"code","a367c867":"code","5a85ce11":"code","b3f8f0de":"code","73bfb180":"code","797ac37a":"code","7ec4fd96":"code","4369d826":"code","cea86db3":"code","55b4bbe2":"code","52aade39":"code","8e04f064":"code","cb14c1e2":"code","559b185f":"code","1cbf3a1c":"code","fcb7533f":"code","1db0dc56":"code","9fa69e14":"code","4b960b80":"code","8641e488":"code","dc479257":"code","1309cb1c":"code","c0d36b34":"code","5a08f585":"code","26fbcf8d":"code","278bd128":"code","7ef03dee":"code","4e448c1f":"code","f89ac610":"code","7914f73b":"code","1b481d5e":"code","66a31bfe":"code","4214287e":"code","0a5dc811":"code","c7c9da0e":"code","e3987b57":"code","bc87dbc9":"code","1aaf4d9c":"code","ce991b3b":"code","459c67bd":"code","13efa5f0":"code","04fea75b":"code","67dfdd4d":"code","74dd606a":"code","78351f46":"code","6f58b5e6":"code","37918afd":"code","df45bb3e":"code","6e7ff2d8":"code","8ced4478":"code","4bf31738":"code","125b9997":"markdown","9cb933c7":"markdown","ff07b46c":"markdown","90b12bdc":"markdown","5f403bab":"markdown","1502a38f":"markdown","2670fef7":"markdown","6b03a505":"markdown","3e16b216":"markdown","c4f15180":"markdown","d52a74a7":"markdown","f910859d":"markdown","2ed9faf5":"markdown","d8b3b307":"markdown","4bcdd05d":"markdown","b50ebb5d":"markdown","4304469f":"markdown","7af22d6d":"markdown","eddfbbb0":"markdown","1e949e28":"markdown","f6e73ce2":"markdown","12cc83cd":"markdown","1651911d":"markdown","25483790":"markdown","eec8a1b8":"markdown","f1e4e631":"markdown","3429045c":"markdown","f5ca0721":"markdown","47dc5ba6":"markdown","3edacdbf":"markdown","2c61d8f6":"markdown","ddcc1e8a":"markdown","45c2c9de":"markdown","12c7516a":"markdown","f3b95f23":"markdown","c3837ce6":"markdown","6192aea4":"markdown","27df48cd":"markdown"},"source":{"34fa5634":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","729127c2":"file = open('\/kaggle\/input\/ense32020\/files\/adult.data', 'r')","4adfe945":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","29c17e49":"print (data[1:2])\n","eecc48c9":"%matplotlib inline\nimport pandas as pd\n\ndf = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()","98572282":"df.tail()\n","f4b8ac92":"df.shape\n","4e6d8d1e":"counts = df.groupby('country').size()\n\nprint (counts) ","09a4d19d":"counts = df.groupby('age').size() # grouping by age\nprint (counts)","7964c14d":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape\n","65cfbc96":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","138f6e10":"fm =df[(df.sex == 'Female')]\nfm.shape","966a1d04":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","9c60bc84":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","04aeebab":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')","4a0c974e":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","f99f99ab":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)","d0b8effd":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","d5b6487c":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","a4fb4593":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","e558bbeb":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","a367c867":"import matplotlib.pyplot as plt\nml_age=ml['age']\nml_age.hist(normed=0, histtype='stepfilled', bins=20)","5a85ce11":"fm_age=fm['age']\nfm_age.hist(normed=0, histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","b3f8f0de":"import seaborn as sns\nfm_age.hist(normed=0, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(normed=0, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","73bfb180":"fm_age.hist(normed=1, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(normed=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('PMF',fontsize=15)\nplt.show()","797ac37a":"ml_age.hist(normed=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","7ec4fd96":"fm_age.hist(normed=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","4369d826":"ml_age.hist(normed=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","cea86db3":"fm_age.hist(normed=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","55b4bbe2":"ml_age.hist(normed=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20)\nfm_age.hist(normed=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","52aade39":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean())\n","8e04f064":"df['age'].median()\n","cb14c1e2":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])\n","559b185f":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])\n","1cbf3a1c":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape","fcb7533f":"ml1_age=ml1['age']\nfm1_age=fm1['age']","1db0dc56":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])","9fa69e14":"mu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","4b960b80":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","8641e488":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","dc479257":"import numpy as np\n\ncountx,divisionx = np.histogram(ml2_age, normed=True)\ncounty,divisiony = np.histogram(fm2_age, normed=True)","1309cb1c":"import matplotlib.pyplot as plt\n\nval = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","c0d36b34":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()), # The difference between the mean values of male and female populations.)","5a08f585":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\n\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))","26fbcf8d":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","278bd128":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\n\nml2 = ml1.drop(ml1.index[(ml1['age']>df['age'].median() +35)&(ml1['age']> df['age'].median()- 15)])\n\nfm2 = fm1.drop(fm1.index[(fm1['age']> df['age'].median() + 35)& (fm1['age']> df['age'].median() - 15)])\n\nprint (ml2.shape, fm2.shape)","7ef03dee":"print (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")","4e448c1f":"print (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","f89ac610":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())","7914f73b":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))","1b481d5e":"ml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*ml2_elder\/fm2_elder)","66a31bfe":"l = 3\nx=np.arange(0,2.5,0.1)\ny= 1- np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential CDF: $\\lambda$ =%.2f'% l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","4214287e":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","0a5dc811":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()","c7c9da0e":"u=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()","e3987b57":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, normed=True, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()","bc87dbc9":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)","1aaf4d9c":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","ce991b3b":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28, normed=True)\nplt.plot(xgrid, density(xgrid), 'r-')","459c67bd":"# Create a bi-modal distribution with a mixture of Normals.\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\n\n# Append by row\nx = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\nplt.hist(x, bins=18, normed=True)","13efa5f0":"density = kde.gaussian_kde(x)\nxgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(x, bins=18, normed=True)\nplt.plot(xgrid, density(xgrid), 'r-')\n","04fea75b":"x = np.random.normal(0.0, 1.0, 10000)\na = plt.hist(x,50,normed='True')","67dfdd4d":"print ('The empirical mean of the sample is ', x.mean())\n\n","74dd606a":"NTs=200\nmu=0.0\nvar=1.0\nerr = 0.0\nNPs=1000\nfor i in range(NTs):\n    x = np.random.normal(mu, var, NPs)\n    err += (x.mean()-mu)**2\n\nprint ('MSE: ', err\/NTs)","78351f46":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","6f58b5e6":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])","37918afd":"plt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","df45bb3e":"X=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","6e7ff2d8":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))","8ced4478":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","4bf31738":"X=np.array([[10.0, 8.04,10.0, 9.14, 10.0, 7.46, 8.0, 6.58],\n[8.0,6.95, 8.0, 8.14, 8.0, 6.77, 8.0, 5.76],\n[13.0,7.58,13.0,8.74,13.0,12.74,8.0,7.71],\n[9.0,8.81,9.0,8.77,9.0,7.11,8.0,8.84],\n[11.0,8.33,11.0,9.26,11.0,7.81,8.0,8.47],\n[14.0,9.96,14.0,8.10,14.0,8.84,8.0,7.04],\n[6.0,7.24,6.0,6.13,6.0,6.08,8.0,5.25],\n[4.0,4.26,4.0,3.10,4.0,5.39,19.0,12.50],\n[12.0,10.84,12.0,9.13,12.0,8.15,8.0,5.56],\n[7.0,4.82,7.0,7.26,7.0,6.42,8.0,7.91],\n[5.0,5.68,5.0,4.74,5.0,5.73,8.0,6.89]])\nplt.subplot(2,2,1)\nplt.scatter(X[:,0],X[:,1],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.subplot(2,2,2)\nplt.scatter(X[:,2],X[:,3],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.subplot(2,2,3)\nplt.scatter(X[:,4],X[:,5],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.subplot(2,2,4)\nplt.scatter(X[:,6],X[:,7],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.gcf().set_size_inches((10,10))","125b9997":"Nous obtenons la fin du tableau ","9cb933c7":"Distribution qui penche vers la droite pour les hommes et femmes, la distribution n'est pas sym\u00e9trique.  ","ff07b46c":"Distribution graphique des donn\u00e9es d\u00e9crivant la fr\u00e9quence d'apparition. Ici la tranche d'age la plus repr\u00e9sent\u00e9e est les 30-50ans ","90b12bdc":"69 valeurs au dessus de 72 ans consid\u00e9r\u00e9es comme aberrantes ","5f403bab":"Changement de la taille des plateaux ","1502a38f":"Probl\u00e8me de graphique","2670fef7":"L'age des hommes ne semble pas pond\u00e9r\u00e9","6b03a505":"L'age moyen des hommes et des femmes de la base \n39 ans pour les hommes et 37 pour les femmes ","3e16b216":"La diff\u00e9rence moyenne d'\u00e2ge est de 2ans et demi ","c4f15180":"M\u00e9dianes des heures travaill\u00e9es pour les hommes et les femmes : 40h\/ semaines ","d52a74a7":"Graphique normalis\u00e9 : fonction de masse de probabilit\u00e9 \nChaque valeur est pond\u00e9r\u00e9e par le nombre d'\u00e9chantillons pour voir quelle valeur \u00e0 le plus de poids dans la base ","f910859d":"Nous avons cr\u00e9\u00e9 un dataframe et nomm\u00e9 les colonnes et on affiche le d\u00e9but","2ed9faf5":"L'age moyen des hommes et des femmes ayant des gros revenus dans la base\n43 ans pour les hommes et 42 pour les femmes ","d8b3b307":"Il manque la courbe concernant la FDC des femmes ","4bcdd05d":"Il y 2\/3 d'hommes et 1\/3 de femmes \nSur toutes les personnes interrog\u00e9es 24% ont un salaire sup\u00e9rieur \u00e0 50k annuellement.  \n30 % des hommes ont un salaire sup\u00e9rieur \u00e0 50k annuellement et 10% de femmes. ","b50ebb5d":"Nous avons group\u00e9s par pays avec le nombre de donn\u00e9es sur chaque pays \n643 pour le mexique \n29 170 pour les USA","4304469f":"Densit\u00e9 du noyau ","7af22d6d":"L'age des femmes semble pond\u00e9r\u00e9. ","eddfbbb0":"Les valeurs moyennes d'heures de travail par semaine pour les hommes est de 42 et 36h pour les femmes avec un \u00e9cart type de 12h pour les hommes et 12h pour les femmes ","1e949e28":"21 790 hommes","f6e73ce2":"fonction de distribution cumulative pour l'age des femmes ","12cc83cd":"Groupement par age ","1651911d":"En moyenne les hommes travaillent plus dans la semaine que les femmes avec un \u00e9cart type assez similaire. Plusieurs possibilit\u00e9s les hommes mettent plus de temps \u00e0 r\u00e9aliser leurs projets ou ils font plus d'heures suppl\u00e9mentaires tandis que les femmes ont peut-\u00eatre d'autres contraintes non professionelles qui les obligent \u00e0 travailler moins mais de mani\u00e8re plus efficace ","25483790":"Fonction de distribution cumultaive pour l'age des hommes","eec8a1b8":"Repartition en fonction de l'age de la promotion ","f1e4e631":"Les femmes sont promues un peu plus tot que les hommes en g\u00e9n\u00e9ral. ","3429045c":"5 valeurs en dessous de 22ans qui sont donc consid\u00e9r\u00e9es comme aberrantes ","f5ca0721":"nombre de lignes et de colonnes ","47dc5ba6":"On peut voir que plus l'age augmente moins il y a de donn\u00e9es pr\u00e9sente. ","3edacdbf":"age m\u00e9dian pour les hommes  38 ans et 35 ans pour les femmes ","2c61d8f6":"Les valeurs moyennes et m\u00e9dianes sont assez similaires pour les \u00e2ges donc il ne doit pas y avoir de valeur aberrantes. Pour les heures travaill\u00e9es par semaine, on voit que les 2 m\u00e9dianes sont identiques. Il y a peut-etre une valeur aberrante du c\u00f4t\u00e9 des femmes qui baisse la moyenne. ","ddcc1e8a":"Les valeurs moyennes d'\u00e2ges pour les hommes est de 39ans et 36ans pour les femmes avec un \u00e9cart type de 13ans pour les hommes et 14ans pour les femmes ","45c2c9de":" femmes qui gagnent plus de 50k annuellement","12c7516a":"6662 hommes qui gagnent plus de 50k annuellement","f3b95f23":"10 771 femmes","c3837ce6":"age m\u00e9dian pour les hommes avec des hauts revenus 44 ans et 41 ans pour les femmes avec des hauts revenus","6192aea4":"Nous obtenons une fonction continue qui se rapproche de la densit\u00e9 de distribustion sans utiliser de param\u00e8tres.","27df48cd":"Nous obtenons l'erreur quadratique moyenne"}}