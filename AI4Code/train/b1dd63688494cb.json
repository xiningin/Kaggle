{"cell_type":{"e0913815":"code","f68e5b58":"code","5fe0f08b":"code","8e5eb739":"code","2105995b":"code","0f1bb49f":"code","2e8d5cd0":"code","561d36b3":"code","54368a4f":"code","fe32690d":"code","e73df45e":"code","28772d7f":"code","99d726be":"code","860ff4e9":"code","9d04e406":"code","8550fa5d":"code","fcccc407":"code","f070a139":"code","a990b53c":"code","ec4cf9e3":"code","fbcb79c6":"code","48430eb3":"code","2612da20":"code","2dd130b2":"code","829c4fd8":"code","cc0ae020":"code","cc0d4148":"code","34503ba8":"code","d195454e":"code","49bebb05":"code","909fa0dc":"code","5490da66":"code","25e0287a":"code","e96fd71f":"code","2ab5819b":"code","16a69774":"code","49125027":"code","2b9cb266":"code","9769bf9f":"code","88ca2682":"code","aefa13a1":"code","f6ea18a1":"code","8ee576e3":"markdown","1f8b4927":"markdown","f04ed337":"markdown","5a2ce217":"markdown","ae90b575":"markdown","3e6210f4":"markdown","bf2324ad":"markdown","ce18adf9":"markdown"},"source":{"e0913815":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f68e5b58":"ins_data = pd.read_csv(\"..\/input\/auto-insurance-claims-data\/insurance_claims.csv\")\nins_data.head()","5fe0f08b":"ins_data.drop('_c39', inplace=True, axis = 1)","8e5eb739":"ins_data.describe()","2105995b":"print (\"Rows     : \" ,ins_data.shape[0])\nprint (\"Columns  : \" ,ins_data.shape[1])\nprint (\"\\nFeatures : \\n\" ,ins_data.columns.tolist())\nprint (\"\\nMissing values :  \", ins_data.isnull().sum().values.sum())\nprint (\"\\nUnique values :  \\n\",ins_data.nunique())","0f1bb49f":"ins_data.duplicated()","2e8d5cd0":"ins_data.dtypes","561d36b3":"for col in [ 'policy_state', 'policy_csl', 'insured_sex', 'insured_education_level', 'insured_occupation', 'insured_hobbies', 'insured_relationship', 'incident_date',\n            'incident_type', 'collision_type', 'incident_severity', 'authorities_contacted', 'incident_state', 'incident_city', 'incident_location',\n             'property_damage',  'police_report_available','vehicle_claim', 'auto_make', 'auto_model', 'fraud_reported']:\n    ins_data[col] = ins_data[col].astype('category')","54368a4f":"ins_data['policy_bind_date'] = pd.to_datetime(ins_data['policy_bind_date'], format='%Y-%m-%d')","fe32690d":"ins_data.dtypes","e73df45e":"ins_data.head(2)","28772d7f":"ins_data['policy_number'].value_counts().sort_values()\n#policy numbers seems unique and hence dropping this feature","99d726be":"ins_data.drop('policy_number', axis = 1, inplace =True)","860ff4e9":"ins_data.replace('?','No info')","9d04e406":"ins_data.groupby(['insured_sex'])['fraud_reported'].count().sort_values().plot(kind='bar')","8550fa5d":"import matplotlib.pyplot as plt\nplt.hist(ins_data.total_claim_amount)\nplt.title(\"Histogram of total amount claimed by the customers\")\nplt.xlabel(\"Amount claimed\")\nplt.ylabel(\"Number of customers\")","fcccc407":"import matplotlib.pyplot as plt\nplt.hist(ins_data.age)\nplt.title(\"Histogram of age of the customers\")\nplt.xlabel(\"Age of the customers\")\nplt.ylabel(\"Number of customers\")","f070a139":"ins_data.groupby(['insured_sex','age']).fraud_reported.count().plot(kind='bar',figsize=(30,5))","a990b53c":"import seaborn as sns\nsns.countplot(ins_data['fraud_reported']);","ec4cf9e3":"ins_data.groupby(['fraud_reported','age']).age.count()","fbcb79c6":"plt.bar(ins_data['age'], ins_data['fraud_reported']== 'Y')\nplt.title(\"Age of the customers\")\nplt.xlabel(\"Age of the customers\")\nplt.ylabel(\"Fraud_reported\")","48430eb3":"plt.bar(ins_data['age'], ins_data['fraud_reported']== 'N')\nplt.title(\"Age of the customers\")\nplt.xlabel(\"Age of the customers\")\nplt.ylabel(\"Fraud_reported\")","2612da20":"abc = ins_data.groupby([ 'auto_model'])['fraud_reported'].count().plot(kind='bar',figsize=(30, 5), rot=90)","2dd130b2":"import seaborn as sns\nsns.set(style=\"darkgrid\")\n\nax = sns.countplot(x=\"age\", data=ins_data)","829c4fd8":"ins_data.groupby(['policy_state']).fraud_reported.value_counts().plot(kind='bar',figsize=(20, 5), rot=90)\nplt.xlabel(\"State\")\nplt.ylabel(\"Fraud Reported\")\nplt.title(\"Distribution of fraud cases w.r.t states\")\nplt.show()","cc0ae020":"#which areas suspecting what type of outages\npd.crosstab(ins_data['auto_model'],ins_data['vehicle_claim'])","cc0d4148":"#count of frauds reported w.r.t auto model\npd.crosstab(ins_data['auto_model'],ins_data['fraud_reported'])","34503ba8":"ins_data.shape","d195454e":"X = ins_data.iloc[:,:-1]\nY = ins_data.iloc[:, -1]\n\n\ncategorical_data = X.select_dtypes(exclude=\"number\")\ncategorical_cols = categorical_data.columns\n\nX = X.drop(categorical_cols, axis=1)\nX.shape","49bebb05":"from sklearn.model_selection import train_test_split\none_hot_data = pd.get_dummies(categorical_data)\nX = X.join(one_hot_data)\n\nXcols = X.columns\nycols = Y\n\nx_train, x_test, y_train, y_test = train_test_split(X,Y, test_size=0.3, stratify=Y)","909fa0dc":"x_train.shape, y_train.shape","5490da66":"x_test.shape,y_test.shape,","25e0287a":"x_train.columns","e96fd71f":"categorical_cols","2ab5819b":"x_train = x_train.drop(['policy_bind_date','auto_year'], axis = 1)\nx_test = x_test.drop(['policy_bind_date','auto_year'], axis = 1)","16a69774":"num_cols = ['months_as_customer', 'age', 'policy_deductable', 'policy_annual_premium',\n       'umbrella_limit', 'insured_zip',  'incident_hour_of_the_day','capital-loss','capital-gains'\n       'number_of_vehicles_involved',  'bodily_injuries',\n       'witnesses',  'total_claim_amount','injury_claim', 'property_claim']","49125027":"from sklearn.preprocessing import StandardScaler\n \nprint('scaling numerical columns')\nscaler = StandardScaler(num_cols)\nx_train= scaler.fit_transform(x_train)\nx_test = scaler.fit_transform(x_test)\nprint(\"Done with standard scaling, Proceed.....All the best :)\")","2b9cb266":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import  cross_val_score \nLogistic_model = LogisticRegression(random_state=200)\nLogistic_model.fit( x_train,y_train)\n\ny_pred1_train = Logistic_model.predict(x_train)\ny_pred1_test = Logistic_model.predict(x_test)\n\nfrom sklearn.metrics import accuracy_score\nprint(\"Accuracy on Train using Logistic Model is:\", accuracy_score(y_train, y_pred1_train))\nprint(\"Accuracy on Test using Logistic Model is:\", accuracy_score(y_test, y_pred1_test))\n\nscores = cross_val_score(Logistic_model, x_train,y_train, cv=5, scoring='accuracy')\nprint(\"Max cross validation score on logistic model\",max(scores))\nprint(\"Mean cross validation score on logistic model\",np.mean(scores))\nprint(\"Min cross validation score on logistic model\",min(scores))","9769bf9f":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score\n\nDT_clf = DecisionTreeClassifier(criterion='entropy', max_depth=800,max_features=15,min_samples_split=2,min_samples_leaf=1,class_weight='balanced')\n\n# Train Decision Tree Classifer\nDT_clf = DT_clf.fit(x_train, y_train)\n\n#Predict the response for train and validation dataset\ny_pred2_train = DT_clf .predict(x_train)\ny_pred2_test = DT_clf.predict(x_test)\n\n\nconf_matrix = confusion_matrix(y_pred2_test, y_test)\nplot_confusion_matrix(conf_matrix)\n\nprecision = precision_score(y_pred2_test, y_test, pos_label='Y')\nrecall = recall_score(y_pred2_test, y_test, pos_label='Y')\n\n\nprint(\"on complete data using DT:\\n\")\nprint(\"Accuracy on Train using Decision Tree Model is:\", accuracy_score(y_train, y_pred2_train))\nprint(\"Accuracy on Test using Decision Tree Model is:\", accuracy_score(y_test, y_pred2_test))\nscores = cross_val_score(DT_clf,x_train, y_train, cv=5, scoring='accuracy')\nprint(\"Max cross validation score on DT model\",max(scores))\nprint(\"Mean cross validation score on DTmodel\",np.mean(scores))\nprint(\"Min cross validation score on DT model\",min(scores))","88ca2682":"from imblearn import under_sampling, over_sampling\nfrom imblearn.over_sampling import SMOTE\nsmote=SMOTE(\"minority\")\nx_smote,y_smote = smote.fit_sample(x_train, y_train)","aefa13a1":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score\n\nDT_clf_smote = DecisionTreeClassifier(criterion='entropy', max_depth=800,max_features=15,min_samples_split=2,min_samples_leaf=1,class_weight='balanced')\n\n# Train Decision Tree Classifer\nDT_clf_smote = DT_clf_smote.fit(x_smote, y_smote)\n\n#Predict the response for train and validation dataset\ny_pred2_train_smote = DT_clf_smote .predict(x_smote)\ny_pred2_test_smote = DT_clf_smote.predict(x_test)\n\n\nconf_matrix_smote = confusion_matrix(y_pred2_test_smote, y_test)\nplot_confusion_matrix(conf_matrix_smote)\n\nprecision = precision_score(y_pred2_test_smote, y_test, pos_label='Y')\nrecall = recall_score(y_pred2_test_smote, y_test, pos_label='Y')\n\n\nprint(\"on complete data using DT:\\n\")\nprint(\"Accuracy on Train using Decision Tree Model is:\", accuracy_score(y_smote, y_pred2_train_smote))\nprint(\"Accuracy on Test using Decision Tree Model is:\", accuracy_score(y_test, y_pred2_test_smote))\nscores = cross_val_score(DT_clf,x_smote, y_smote, cv=5, scoring='accuracy')\nprint(\"Max cross validation score on DT model\",max(scores))\nprint(\"Mean cross validation score on DTmodel\",np.mean(scores))\nprint(\"Min cross validation score on DT model\",min(scores))","f6ea18a1":"from sklearn.ensemble import RandomForestClassifier\nRFC_model = RandomForestClassifier(random_state = 1, max_features='sqrt',oob_score=True, n_estimators = 1200)\nRFC_model.fit(x_smote, y_smote)\ny_pred3_trainSMOTE = RFC_model.predict(x_smote)\n\ny_pred3_testSMOTE = RFC_model.predict(x_test)\nprint(\"ON SMOTE dataset:\\n\")\n\nconf_matrix_smote = confusion_matrix(y_pred3_testSMOTE, y_test)\nplot_confusion_matrix(conf_matrix_smote)\n\nprecision = precision_score(y_pred3_testSMOTE, y_test, pos_label='Y')\nrecall = recall_score(y_pred3_testSMOTE, y_test, pos_label='Y')\n\n\nprint(\"on complete data using random Forest:\\n\")\nprint(\"Accuracy on Train using random Forest Model is:\", accuracy_score(y_smote, y_pred3_trainSMOTE))\nprint(\"Accuracy on Test using random Forest Model is:\", accuracy_score(y_test, y_pred3_testSMOTE))\nscores = cross_val_score(DT_clf,x_smote, y_smote, cv=5, scoring='accuracy')\nprint(\"Max cross validation score on random Forest model\",max(scores))\nprint(\"Mean cross validation score on random Forestmodel\",np.mean(scores))\nprint(\"Min cross validation score on random Forest model\",min(scores))\nprint(\"oob score\", RFC_model.oob_score_)","8ee576e3":"model DT giving best accuracy scores .","1f8b4927":"Please Note: Though the cross validation scores showing model is stable but accuracy on test is very low, \n    the size of the given data must be the reason for such performance.","f04ed337":"Middle aged females reporting more fraud cases","5a2ce217":"# Decision tree model on smote data","ae90b575":"highest claimed amount is 60k-70k","3e6210f4":"# Decision trees with cross validation\n","bf2324ad":"# Using Smote on train data**","ce18adf9":"# Random Forest on smote data"}}