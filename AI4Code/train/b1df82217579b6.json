{"cell_type":{"f17735d2":"code","bd654f18":"code","7ab6d3e5":"code","14c27bb4":"code","81d5f11c":"code","f9421907":"code","a67068e5":"code","f5d69764":"code","e8e75cab":"code","fa4055a4":"code","adb1f18f":"code","57219922":"code","dadf77df":"code","a583a6a0":"code","7879ff45":"code","b567f0d6":"code","ac111e7a":"code","7ed15671":"markdown"},"source":{"f17735d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bd654f18":"df = pd.read_csv('\/kaggle\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-09-14.csv')\n\ndf.head()","7ab6d3e5":"from datetime import datetime    # to translate unix time stamp to UTC time","14c27bb4":"datetime.utcfromtimestamp(1600041360)   # example","81d5f11c":"df['Timestamp'] = df['Timestamp'].apply(datetime.utcfromtimestamp)\n\ndf","f9421907":"df = df.set_index('Timestamp', drop=True)","a67068e5":"df","f5d69764":"# follow the steps above: fill NA Volume columns with 0.0\ndf[['Volume_(BTC)','Volume_(Currency)']] = df[['Volume_(BTC)','Volume_(Currency)']].fillna(0)\n\ndf","e8e75cab":"# follow the steps above: fill NA Close columns with PREVIOUS Close price (forward fill)\ndf['Close'] = df['Close'].fillna(method='ffill')\ndf","fa4055a4":"# follow the steps above: fill NA Open, High, Low columns with Close price (row wise backfill)\ndf = df.fillna(axis=1, method='backfill')\ndf","adb1f18f":"import matplotlib.pyplot as plt","57219922":"plt.plot(df['Close'])","dadf77df":"# agg dictionary for OHLCV data\nagg_functions = {\n    'Open': 'first',\n    'High': np.max,\n    'Low': np.min,\n    'Close': 'last',\n    'Volume_(BTC)': np.sum,\n    'Volume_(Currency)': np.sum   \n}","a583a6a0":"df_1H = df.resample('1H').agg(agg_functions)\ndf_1H","7879ff45":"df_4H = df.resample('4H').agg(agg_functions)","b567f0d6":"df_1D = df.resample('1D').agg(agg_functions)","ac111e7a":"df_1H.to_csv('.\/BTC_1H.csv')\ndf_4H.to_csv('.\/BTC_4H.csv')\ndf_1D.to_csv('.\/BTC_1D.csv')","7ed15671":"### Rough steps to resample data:\n1. Translate ```Timestamp``` column from UNIX timestamp to UTC\n2. I think we should get rid of ```Weighted_Price``` column, there is NO indication on how this is calculated anywhere.\n3. Fill the missing values based on the following settings\n\n| Columns                  | Fill NA value | Fill NA method         | Rationale                                                                          |\n|--------------------------|---------------|------------------------|------------------------------------------------------------------------------------|\n| Volumes (btc & currency) | 0.0           | -                      | Volume is zero because NO transaction occurred                                     |\n| Weighted price           | -             | -                      | We will get rid of this column                                                     |\n| Close                    | -             | Forward Fill           | Follow previous period Close price                                                 |\n| Open, High, Low          | -             | Row wise Backward Fill | If no transaction occurred, Open = High = Low = Close. So just follow Close price. |"}}