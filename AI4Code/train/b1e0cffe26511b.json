{"cell_type":{"5a64b56a":"code","43ceb58f":"code","46b6815c":"code","cbfa09bb":"code","a7cd39c2":"code","dc620e8d":"code","3cc9e520":"code","9450d32c":"code","5cd7c138":"code","4bd01050":"code","1c33f913":"code","a122a670":"markdown","b19202aa":"markdown","648c26ee":"markdown","1924fffc":"markdown","a3c39366":"markdown","55c26bb2":"markdown","5bb245cf":"markdown","d00ad10f":"markdown"},"source":{"5a64b56a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom keras import layers, models\nfrom keras.datasets import mnist\n\n(X_train, _), (X_test, _) = mnist.load_data()","43ceb58f":"X_train.shape , X_test.shape","46b6815c":"fig, axes = plt.subplots(1,10,figsize=(25,5))\nfig.suptitle('X_train', size=30,y = 0.8)\nfor i in range(0,10):\n    axes[i].imshow(X_train[i], cmap='gray')\n    axes[i].get_xaxis().set_visible(False)\n    axes[i].get_yaxis().set_visible(False)    ","cbfa09bb":"result = X_test\nX_train = X_train.astype('float32') \/255\nX_test = X_test.astype('float32') \/255\n\nX_train = X_train.reshape((len(X_train), np.prod(X_train.shape[1:]) ))\nX_test = X_test.reshape((len(X_test), np.prod(X_test.shape[1:]) ))\n\nX_train.shape, X_test.shape","a7cd39c2":"class AE(models.Model):\n    def __init__(self, x_nodes = 784, z_dim =64):\n        x_shape = (x_nodes,)\n        x = layers.Input(shape = x_shape)\n        z = layers.Dense(z_dim, activation='relu')(x)\n        y = layers.Dense(x_nodes, activation='sigmoid')(z)\n        \n        super().__init__(x,y)\n        self.x = x\n        self.z = z\n        self.z_dim = z_dim\n        self.compile(optimizer = 'adam', loss='binary_crossentropy', metrics=['accuracy'])\n        \n    def Encoder(self):\n        return models.Model(self.x, self.z)\n    \n    def Decoder(self):\n        z_shape = (self.z_dim,)\n        z = layers.Input(shape=z_shape)\n        y_layer = self.layers[-1]\n        y = y_layer(z)\n        return models.Model(z,y)\n    \nautoencoder = AE(784, 36)","dc620e8d":"history = autoencoder.fit(X_train, X_train, epochs=50, batch_size= 256, shuffle = True, validation_data=(X_test,X_test),verbose=0)","3cc9e520":"fig, axes = plt.subplots(1,2,figsize=(25,5))\n\naxes[0].plot(history.history['loss'])\naxes[0].plot(history.history['val_loss'])\naxes[0].set_title('Loss and val_loss')\n\naxes[1].plot(history.history['accuracy'])\naxes[1].plot(history.history['val_accuracy'])\naxes[1].set_title('accuracy and val_accuracy')\n\nfig.show()","9450d32c":"encoder_imgs = autoencoder.Encoder().predict(X_test)\ndecoder_imgs = autoencoder.Decoder().predict(encoder_imgs)","5cd7c138":"fig, axes = plt.subplots(1,10,figsize=(25,5))\nfig.suptitle('Test imgs', size=30,y = 0.8)\nfor i in range(0,10):\n    axes[i].imshow(result[i], cmap='gray')\n    axes[i].get_xaxis().set_visible(False)\n    axes[i].get_yaxis().set_visible(False)","4bd01050":"fig, axes = plt.subplots(1,10,figsize=(25,5))\nfig.suptitle('encoder_imgs', size=30,y = 1)  \nfor i in range(0,10):\n    axes[i].stem(encoder_imgs[i])\n    axes[i].get_xaxis().set_visible(False)\n    axes[i].get_yaxis().set_visible(False)    ","1c33f913":"decoder_imgs = decoder_imgs.reshape(len(decoder_imgs), 28, 28)\nfig, axes = plt.subplots(1,10,figsize=(25,5))\nfig.suptitle('decoder_imgs', size=30,y = 1)  \nfor i in range(0,10):\n    axes[i].imshow(decoder_imgs[i],cmap='gray')\n    axes[i].get_xaxis().set_visible(False)\n    axes[i].get_yaxis().set_visible(False)    ","a122a670":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">Predict the test data<\/p>","b19202aa":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">Import libraries and Load dataset<\/p>","648c26ee":"* We make the two model. Encoder, and Decoder.","1924fffc":"### We don't need y data.","a3c39366":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">Make model<\/p>","55c26bb2":"* First, I change the data's range 0 ~ 255 to 0 ~ 1\n* Next, We should change the shape (28,28) to (784)","5bb245cf":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">Change the data's shape<\/p>","d00ad10f":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">AutoEncoder<\/p>\n\n![](https:\/\/stackabuse.s3.amazonaws.com\/media\/image-reconstruction-and-denoising-with-autoencoders-in-python-and-keras-3.png)\n\nimg url : https:\/\/seongjuhong.com\/2019-12-09pm-autoencoder\/"}}