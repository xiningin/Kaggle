{"cell_type":{"0c42fd46":"code","1a7b7a74":"code","2151a64c":"code","c73deb7e":"code","a1efcaf7":"code","5de22548":"code","321e17ed":"code","37e470dc":"code","2cecb8ec":"code","10f9c221":"code","11a0668d":"code","598da4d6":"code","b49ffddf":"code","3c0463ae":"code","ffec7258":"code","6414da2a":"code","18a7b694":"code","ecbbdedb":"code","97d294ac":"code","66207f4b":"code","e0f93af2":"code","d8fa8a3a":"code","49a4f396":"code","96cba974":"markdown","db48c9cf":"markdown","2d6facdf":"markdown","d6e666c4":"markdown","ba20101b":"markdown","2dca0a4f":"markdown","74805ed2":"markdown","7a96ae43":"markdown","4e014b2a":"markdown","9da8538d":"markdown","ad90e513":"markdown","12f29a2b":"markdown","086b630a":"markdown"},"source":{"0c42fd46":"import json\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nfrom os import path, listdir, walk\nfrom tqdm.notebook import tqdm\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn import manifold","1a7b7a74":"from nltk.tokenize import WordPunctTokenizer\nfrom collections import Counter\npunct_tokenizer = WordPunctTokenizer()","2151a64c":"# read datasets\ncovid_data_df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\n# in the covid_19_data.csv we have the number of confirmed cases, deaths, and recovered for every date by country and privince or state.\ncovid_data_df.head()","c73deb7e":"covid_measures_df = pd.read_csv('\/kaggle\/input\/covid19-containment-and-mitigation-measures\/COVID 19 Containment measures data.csv')\n# In the measures dataframe we have a description of the measure implemented and a keyword to standardize all the topics in description. \n# This dataset also has a start date of the measure, and it is given by country and state or province.\ncovid_measures_df.head()","a1efcaf7":"country_info_df = pd.read_csv('\/kaggle\/input\/countryinfo\/covid19countryinfo.csv')\ncountry_info_df.head()","5de22548":"# clean up the data a little bit\ncountry_info_df.loc[country_info_df['alpha2code']=='TW', ['country']] = 'Taiwan'\ncountry_info_df.loc[country_info_df['alpha2code']=='KR', ['country']] = 'South Korea'\ncountry_info_df.loc[country_info_df['alpha2code']=='HK', ['country']] = 'Hong Kong'\ncountry_info_df.loc[country_info_df['alpha2code']=='HK', ['region']] = None\n# keep important parameters\ncountry_info_df = country_info_df[country_info_df['region'].isnull()][['country', 'alpha2code', 'pop', 'density', 'medianage', 'urbanpop', 'tests', 'testpop']]","321e17ed":"# convert population to million\ncountry_info_df['pop_mil'] = country_info_df['pop'].str.replace(',', '').astype(int) \/ 1_000_000\ncountry_info_df = country_info_df.drop('pop', axis=1)\n# convert date columns to Datetime format\ncovid_measures_df['Date Start'] = pd.to_datetime(covid_measures_df['Date Start'], format=\"%b %d, %Y\")\ncovid_data_df['ObservationDate'] = pd.to_datetime(covid_data_df['ObservationDate'], format=\"%m\/%d\/%Y\")\n# Some cleaning on country names\ncountry_info_df['country'] = country_info_df['country'].apply(lambda row: str(row)).apply(lambda row: 'Czech Republic' if 'Czechia' in row else row)\ncovid_measures_df['Country'] = covid_measures_df['Country'].apply(lambda row: str(row)).apply(lambda row: 'Czech Republic' if 'Czechia' in row else row)\ncovid_measures_df['Country'] = covid_measures_df['Country'].apply(lambda row: str(row)).apply(lambda row: 'United States' if 'US' in row else row)","37e470dc":"# see number of total examples found found and missing measures against coronavirus \n# As you can see, we have a few rows where measure and their date is missing\nprint(f\"total examples {len(covid_measures_df)}\")\nprint(f\"measures description found: {len(covid_measures_df[covid_measures_df['Description of measure implemented'].notnull()])}\")\nprint(f\"measures keywords found: {len(covid_measures_df[covid_measures_df['Keywords'].notnull()])}\")\nprint(f\"measures with date found: {len(covid_measures_df[covid_measures_df['Date Start'].notnull()])}\")","2cecb8ec":"def get_measures_count_by_country(country, covid_data_df, covid_measures_df, country_info_df):\n    '''\n    Get a datafarme containing number of covid cases and measure takens in a single dataframe\n    '''\n    country_covid_df = covid_data_df[covid_data_df['Country\/Region'] == country].groupby(['Country\/Region', 'ObservationDate']).sum().reset_index()\n    country_measures_df = covid_measures_df[covid_measures_df['Country']==country]\n    country_covid_df['Confirmed Increase'] = country_covid_df['Confirmed'].diff().fillna(0)\n    country_covid_df['Death Increase'] = country_covid_df['Deaths'].diff().fillna(0)\n    country_covid_df['Recovered Increase'] = country_covid_df['Recovered'].diff().fillna(0)\n    country_df = country_covid_df.merge(country_measures_df, how='left',left_on='ObservationDate', right_on='Date Start')\n    pop_mil = country_info_df[country_info_df['country']==country]['pop_mil']\n    pop_mil = int(pop_mil)\n    country_df['confirmed_per_one_mil'] = country_df['Confirmed'] \/ pop_mil\n    country_df['death_per_one_mil'] = country_df['Deaths'] \/ pop_mil\n    country_df['recovered_per_one_mil'] = country_df['Recovered'] \/ pop_mil\n    return country_df","10f9c221":"def insert_breaks(measure):\n    '''\n    The hover textbox is going to become very long. A work around to this is to insert <br> tags and break the lines in text.\n    '''\n    measure_list = str(measure).split(' ')\n    [measure_list.insert(x, '<br>') for x in range(0, len(measure_list), 7)]\n    measure_list.pop(0)\n    return ' '.join(measure_list)\n\ndef get_count_list(country_df):\n    country_df = country_df.sort_values('ObservationDate')\n    country_df = country_df[['ObservationDate','Confirmed','Deaths']].drop_duplicates()\n    return (country_df['Confirmed'].to_list(), country_df['Deaths'].to_list())\n\ndef get_measures(country_df):\n    '''\n    get x y co-ordinates and measures and keywords\n    '''\n    country_df = country_df.sort_values('ObservationDate')\n    x = country_df[country_df['Description of measure implemented'].notnull()]['Date Start'].to_list()\n    y = country_df[country_df['Description of measure implemented'].notnull()]['Confirmed'].to_list()\n    measures = country_df[country_df['Description of measure implemented'].notnull()]['Description of measure implemented'].to_list()\n    measures = [insert_breaks(measure) for measure in measures]\n    about_mask = country_df[country_df['Description of measure implemented'].notnull()]['mask'].to_list()\n    about_mask = ['\ud83d\ude37' if event is True else '' for event in about_mask]\n    return (x, y, measures, about_mask)","11a0668d":"def plot_measures(country_df, x, y, measures, keywords=None):\n    \n    '''\n    plots the number of confirmed cases in line graph and measures using scatter plots\n    '''\n\n    fig = px.line(country_df, x=\"ObservationDate\", y=\"Confirmed\", color=\"Country\/Region\", line_group=\"Country\/Region\")\n    \n    #fig.add_trace(go.Bar(\n    #    x=country_df['ObservationDate'], \n    #    y=country_df['Confirmed Increase']))\n    \n    country = country_df['Country\/Region'][0]\n    \n    # taking care of events with same date\n    \n    # create an empty list to store dates with multiple events\n    dates_with_multiple_events = []\n    \n    # store dates with multiple events in the dataset\n    for dt in set(x):\n        if len([t for t in x if t==dt]) > 1:\n            dates_with_multiple_events.append(dt)\n    \n    # loop over x and add a few hours to make each date different \n    x = [t+timedelta(minutes=i+1) if t in dates_with_multiple_events else t for i, t in enumerate(x)]\n    #print(x)\n    \n    fig.add_trace(go.Scatter(\n        x=x, y=y, text=measures,\n        mode=\"markers\",\n        name=\"measures\"\n    ))\n    \n    if keywords:\n        fig.add_trace(go.Scatter(\n            x=x, y=y, text=keywords,\n            textposition='top left',\n            mode=\"text\",\n            name=\"keywords\",\n            hoverinfo='skip'\n        ))\n    \n    fig.update_layout(hovermode='closest', showlegend=False, \n                     title = 'Covid 19 Measures vs Confirmed Cases - '+country + ' (Hover To See Measure)',\n                     xaxis_title = 'Date', yaxis_title = 'Confirmed Covid-19 Cases')\n    \n    return fig\n","598da4d6":"def check_for_mask(text):\n    word_list = ['mask', 'masks']\n    text = str(text)\n    token = set(punct_tokenizer.tokenize(text.lower()))\n    match = set(word_list).intersection(token)\n    if match:\n        return True\n    else:\n        return False","b49ffddf":"# check for masks in description and create a column to indicate so\ncovid_measures_df['mask'] = covid_measures_df['Description of measure implemented'].apply(check_for_mask)","3c0463ae":"# count number of mask related events for each country and do a bar plot\nmask_country_count = covid_measures_df[covid_measures_df['mask']==True]['Country'].value_counts()\nfig = px.bar(mask_country_count, x = mask_country_count.index, y = mask_country_count.values)\nfig.update_layout(title = 'Countries with mask mentioned in measures dataset',\n                  xaxis_title = 'Country Name', yaxis_title = 'Number of events in data')\nfig.show()","ffec7258":"country_info_df[country_info_df['country']=='South Korea']","6414da2a":"kr_df = get_measures_count_by_country('South Korea', covid_data_df, covid_measures_df, country_info_df)\ncz_df = get_measures_count_by_country('Czech Republic', covid_data_df, covid_measures_df, country_info_df)\nsg_df = get_measures_count_by_country('Singapore', covid_data_df, covid_measures_df, country_info_df)\nhk_df = get_measures_count_by_country('Hong Kong', covid_data_df, covid_measures_df, country_info_df)\nsk_df = get_measures_count_by_country('Slovakia', covid_data_df, covid_measures_df, country_info_df)\ntw_df = get_measures_count_by_country('Taiwan', covid_data_df, covid_measures_df, country_info_df)\nmask_country_df = pd.concat([kr_df, cz_df, sg_df, hk_df, sk_df, tw_df])","18a7b694":"# plot using plotly\nfig = px.line(mask_country_df, x=\"ObservationDate\", y=\"confirmed_per_one_mil\", color=\"Country\/Region\", line_group=\"Country\/Region\")\nfig.update_layout(title = 'Covid 19 Confirmed Cases for Countries Where Everyone Wears A Mask',\n                  xaxis_title = 'Date', yaxis_title = 'Confirmed Covid-19 Cases (Per 1 mil)')\nfig.show()","ecbbdedb":"x, y, measures, mask_events = get_measures(kr_df)\nplot_measures(kr_df, x, y, measures, mask_events)","97d294ac":"x, y, measures, mask_events = get_measures(cz_df)\nplot_measures(cz_df, x, y, measures, mask_events)","66207f4b":"x, y, measures, mask_events = get_measures(sg_df)\nplot_measures(sg_df, x, y, measures, mask_events)","e0f93af2":"x, y, measures, mask_events = get_measures(hk_df)\nplot_measures(hk_df, x, y, measures, mask_events)","d8fa8a3a":"x, y, measures, mask_events = get_measures(sk_df)\nplot_measures(sk_df, x, y, measures, mask_events)","49a4f396":"x, y, measures, mask_events = get_measures(tw_df)\nplot_measures(tw_df, x, y, measures, mask_events)","96cba974":"**After inspecting the data, for the following countries we can confidently say that they enforces mask as a serious measure against Covid-19:**\n* **South Korea**: Advocated all people to wear masks, specially when visiting medical facilities and outdoor in general. In certain cases (i.e. Taxi and other non-essential businesses), a mask is mandatory with fine. They even deployed a mask supply app service to inform and alert local pharmacies mask supply situation. \n* **Hong Kong**: Initially mask was encouraged for people with symptoms along with returning travelers from high risk areas. Later, government started seeing wearing mask as one of the serious measures. They started distributing two face masks per day to seniors at elderly homes. Furthermore, all citizens were requested to wear masks at all times. \n* **China**: Scaled up production (and even created new factories in record breaking times) to provide as much mask as possible. \n* **Czech Republic**: Chronological information about when 1%, 10%, and 100% citizens in public are wearing masks is available.\n* **Slovakia**: At first, mask was recommended for all public transport operators. However, then mask was mandatory for everyone at all places (streets, shops, work, factory, office, everywhere!).\n* **Singapore**: Four masks distributed to each household. \n* **Taiwan**: Rationed face masks to its citizens.","db48c9cf":"![Covid-19](https:\/\/cdn.pixabay.com\/photo\/2020\/03\/25\/11\/30\/envato-4966945_1280.jpg)","2d6facdf":"## Work In Progress. . . \n\n## Of course we have some more work to do before we can understanding anything conclusively. If you like what I did so far, and would like me to keep going, upvote this kernel! ","d6e666c4":"#### Looks like all of these countries are doing well in terms of controlling the total number of confirmed cases of Covid-19 compared to the rest of the world. South Korea was even able flatten a scary growth rate. However, we need to zoom in much more to understand what is really going on.","ba20101b":"# Zooming Into The Countries","2dca0a4f":"### Imports","74805ed2":"First of all, I would like to thank the wonderful the people at Kaggle and in Kaggle community, who does an amazing job to make awesome datasets like this available to us. In this notebook, I want to explore the effectiveness of using mask as a preventive measure against Covid-19. To do so, I will use the following datasets:\n* [COVID-19 Open Research Dataset Challenge (CORD-19)](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge) created by  the Allen Institute for AI in partnership with the Chan Zuckerberg Initiative, Georgetown University\u2019s Center for Security and Emerging Technology, Microsoft Research, and the National Library of Medicine - National Institutes of Health, in coordination with The White House Office of Science and Technology Policy.\n* [COVID-19 containment and mitigation measures](https:\/\/www.kaggle.com\/paultimothymooney\/covid19-containment-and-mitigation-measures) uploaded by [Paul Mooney](https:\/\/www.kaggle.com\/paultimothymooney) and \n* [Novel Corona Virus 2019 Dataset](https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset) uploaded by [SRK](https:\/\/www.kaggle.com\/sudalairajkumar).\n* [countryinfo](https:\/\/www.kaggle.com\/koryto\/countryinfo) dataset uploaded by [My Koryto](https:\/\/www.kaggle.com\/koryto).\n\n### This notebook is still a work in progress. Please upvote my kernel if you find it useful and encourage me to keep going..","7a96ae43":"## Analyzing The Effectiveness of Mask As A Measures Against Covid 19","4e014b2a":"In this section I will store\/hide and hide all the functions I am using throughout this notebook.","9da8538d":"### Functions","ad90e513":"**After manually inspecting the data, we see that South Korea, Hong Kong, China, Czech Republic, Slovakia, Singapore, and Taiwan are the countries where everyone is wearing a mask as a serious measure against Covid-19. For the rest of the countries, only the healthcare providers are using a mask.**\n\nLet's take a look also at the growth of confirmed cases for these countries below.","12f29a2b":"# Reading and Cleaning The Data","086b630a":"# Mask Related Measures Taken\n\nIn this section, I will simply tokenize each words in the measure description (using NLTK), and match for the word mask or masks. This approach will not give us exactly what we are looking for, and a more automated approach is also possible. For example, using this approach, we will have measures to ban export of masks also in our count. However, as our dataset is small, it is easier to narrow down our search and then inspect the data."}}