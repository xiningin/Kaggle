{"cell_type":{"a6aefc53":"code","42955889":"code","b0580950":"code","54d4f3bf":"code","c33b0ce3":"code","8156cdbc":"code","43849086":"code","ee6f7e13":"code","98a340b0":"code","89ba13f4":"code","fa88c5f5":"code","5d38647d":"code","6476e65e":"code","8e5832b5":"code","97a44742":"markdown"},"source":{"a6aefc53":"!pip install imageai","42955889":"!wget \"https:\/\/github.com\/OlafenwaMoses\/ImageAI\/releases\/download\/essential-v4\/pretrained-yolov3.h5\"","b0580950":"!wget 'https:\/\/github.com\/OlafenwaMoses\/ImageAI\/releases\/download\/essentials-v5\/resnet50_coco_best_v2.1.0.h5'","54d4f3bf":"import numpy as np\nimport os\nimport shutil\nfrom pathlib import Path\nfrom PIL import Image","c33b0ce3":"root_annots_path = '..\/input\/hard-hat-detection\/annotations\/'\nroot_images_path = '..\/input\/hard-hat-detection\/images\/'\n\nannots_path = sorted([i for i in Path(root_annots_path).glob('*.xml')])\nimages_path = sorted([i for i in Path(root_images_path).glob('*.png')])\n\nn_imgs = len(images_path)\n\nclasses = np.array([\"helmet\",\"head\",\"person\"])","8156cdbc":"with open(annots_path[500], 'r') as f:\n    print(f.read())","43849086":"os.makedirs('imageai\/data\/train\/images', exist_ok=True)\nos.makedirs('imageai\/data\/train\/annotations', exist_ok=True)\n\nos.makedirs('imageai\/data\/validation\/images', exist_ok=True)\nos.makedirs('imageai\/data\/validation\/annotations', exist_ok=True)\n\nos.makedirs('imageai\/data\/test\/images', exist_ok=True)\nos.makedirs('imageai\/data\/test\/annotations', exist_ok=True)","ee6f7e13":"n_imgs = 300\nn_split = n_imgs \/\/ 20\n\n\nfor i, (annot_path, img_path) in enumerate(zip(annots_path, images_path)):    \n    if i > n_imgs:\n        break\n    # train-val-test split\n    if i < n_split:\n        shutil.copy(img_path, 'imageai\/data\/test\/images\/' + img_path.parts[-1])\n        shutil.copy(annot_path, 'imageai\/data\/test\/annotations\/' + annot_path.parts[-1])\n    elif n_split <= i < n_split*5:\n        shutil.copy(img_path, 'imageai\/data\/validation\/images\/' + img_path.parts[-1])\n        shutil.copy(annot_path, 'imageai\/data\/validation\/annotations\/' + annot_path.parts[-1])\n    else:\n        shutil.copy(img_path, 'imageai\/data\/train\/images\/' + img_path.parts[-1])\n        shutil.copy(annot_path, 'imageai\/data\/train\/annotations\/' + annot_path.parts[-1])","98a340b0":"print(len(list(Path('imageai\/data\/train\/annotations\/').glob('*.xml'))))\nprint(len(list(Path('imageai\/data\/validation\/annotations\/').glob('*.xml'))))\nprint(len(list(Path('imageai\/data\/test\/annotations\/').glob('*.xml'))))","89ba13f4":"from imageai.Detection.Custom import DetectionModelTrainer\n\ntrainer = DetectionModelTrainer()\ntrainer.setModelTypeAsYOLOv3()\ntrainer.setDataDirectory(data_directory=\".\/imageai\/data\/\")\ntrainer.setTrainConfig(object_names_array=[\"helmet\",\"head\",\"person\"],\n                       batch_size=8,\n                       num_experiments=10,\n                       train_from_pretrained_model=\"pretrained-yolov3.h5\")\n\ntrainer.trainModel()","fa88c5f5":"from imageai.Detection.Custom import DetectionModelTrainer\n\ntrainer = DetectionModelTrainer()\ntrainer.setModelTypeAsYOLOv3()\ntrainer.setDataDirectory(data_directory=\".\/imageai\/data\/\")\nmetrics = trainer.evaluateModel(model_path=\"imageai\/data\/models\/\",\n                                json_path=\"imageai\/data\/json\/detection_config.json\",\n                                iou_threshold=0.2,\n                                object_threshold=0.3,\n                                nms_threshold=0.5)","5d38647d":"!wget \"https:\/\/www.lemoniteur.fr\/mediatheque\/9\/1\/1\/002134119_620x393_c.jpeg\"","6476e65e":"from imageai.Detection.Custom import CustomObjectDetection\n\ndetector = CustomObjectDetection()\ndetector.setModelTypeAsYOLOv3()\ndetector.setModelPath(\"imageai\/data\/models\/detection_model-ex-009--loss-0041.123.h5\")\ndetector.setJsonPath(\"imageai\/data\/json\/detection_config.json\")\ndetector.loadModel()\ndetections = detector.detectObjectsFromImage(minimum_percentage_probability=50,\n                                             input_image=\"002134119_620x393_c.jpeg\",\n                                             output_image_path=\"detected.jpg\")\nfor detection in detections:\n    print(detection[\"name\"], \" : \", detection[\"percentage_probability\"], \" : \", detection[\"box_points\"])","8e5832b5":"Image.open('detected.jpg')","97a44742":"# Installing Dependencies"}}