{"cell_type":{"1cd08c1e":"code","b4844eb3":"code","d89b9567":"code","ef03e5f6":"code","42c08de1":"code","24a3e3c2":"code","d101b1fa":"code","eda1d14c":"code","eb937da8":"code","723385a8":"code","b92a2a4b":"code","900905f9":"code","cbd34fa5":"markdown"},"source":{"1cd08c1e":"import numpy as np \nimport pandas as pd \n!pip install seqeval\nimport torch, datasets, transformers, seqeval\nprint(torch.__version__)\nprint(transformers.__version__)","b4844eb3":"task = 'ner' # should be one of 'ner', 'pos', 'chunk'\nmodel_checkpoint = 'bert-base-uncased'\nbatch_size = 16","d89b9567":"from datasets import load_dataset, load_metric","ef03e5f6":"datasets = load_dataset('conll2003')","42c08de1":"datasets\n","24a3e3c2":"datasets['train'][0]","d101b1fa":"datasets['train']","eda1d14c":"datasets['train']","eb937da8":"datasets['train'].features[f'ner_tags']","723385a8":"from transformers import AutoTokenizer\ntokenizer = AutoTokenizer.from_pretrained(model_checkpoint)","b92a2a4b":"assert isinstance(tokenizer, transformers.PreTrainedTokenizerFast)","900905f9":"tokenizer('my name is Iran')","cbd34fa5":"# NER With ****BERT**** (****B****idirectional ****E****ncoder ****R****epresentation from ****T****ransformers)"}}