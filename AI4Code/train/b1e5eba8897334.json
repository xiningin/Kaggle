{"cell_type":{"5db7f6aa":"code","eb617264":"code","6735b01e":"code","38966f75":"code","9b9a30d1":"code","b900b243":"code","2687c5ad":"code","7e464593":"code","6dd0c01c":"code","0e6c9a87":"code","39703045":"code","6495d19f":"code","0311ff2f":"code","a0efa28f":"code","0a342137":"code","e9100e31":"code","35240a99":"code","8b839814":"code","0f4840ea":"code","1acfa275":"code","c875489f":"code","c56c1e7e":"code","5d750b3a":"code","3082f233":"code","b0a0cbba":"code","297a1117":"code","a31a36c5":"code","573b0e6d":"code","7b6ea4ba":"code","679dbe27":"code","8f318c42":"code","a0f26f3e":"code","82cf75c8":"code","fefecd3a":"code","2b20ded3":"code","d97195d2":"code","4dce0db0":"code","3265a71f":"code","8517de12":"code","a984a24a":"code","5e5f9001":"markdown","63ca7bc9":"markdown","59e74ff4":"markdown","1e1b5d7d":"markdown","1af34334":"markdown","e9e79651":"markdown","97278ff9":"markdown","c568db96":"markdown","7939e2f9":"markdown","5d1cb8dc":"markdown","6d1267bb":"markdown","3f323c05":"markdown","2d577e54":"markdown","64be30bd":"markdown","ccbeed71":"markdown","e11bec4a":"markdown","b63db25e":"markdown","a6463e78":"markdown","68d9ce7c":"markdown","eef2513d":"markdown","2cbdb0e7":"markdown","05721792":"markdown","41e572c6":"markdown","a32e9122":"markdown","6812834a":"markdown","52eb0c60":"markdown","0988c32d":"markdown"},"source":{"5db7f6aa":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","eb617264":"df= pd.read_csv('..\/input\/imdb-5000-movie-dataset\/movie_metadata.csv')\ndf.head()","6735b01e":"# Now let us check for the shape of the dataset and also that are any null values present in our dataset.\n# For that,\n\nprint('shape of the dataset=', df.shape)\n\nprint(' \\nThe null count of each column of the dataset are as follows:')\ndf.isnull().sum()","38966f75":"df.info()  # Information of the dataset, in terms of shape of dataset,name , type and non null values wrt each column.","9b9a30d1":"df['color'].value_counts()","b900b243":"sns.countplot(df['color'])","2687c5ad":"df['genres'].value_counts().head(10)","7e464593":"plt.figure(figsize=(15,10))\ndf['genres'].value_counts()[0:10].plot.bar()","6dd0c01c":"df['language'].value_counts()","0e6c9a87":"plt.figure(figsize=(15,10))\ndf['language'].value_counts()[0:10].plot.bar()","39703045":"df['country'].value_counts()","6495d19f":"plt.figure(figsize=(15,10))\ndf['country'].value_counts()[0:10].plot.bar()","0311ff2f":"df['imdb_score'].mean()","a0efa28f":"df['movie_title'].value_counts()[0:10]","0a342137":"df['title_year'].value_counts().head(10)","e9100e31":"df['title_year'].fillna(0,inplace=True)","35240a99":"df['title_year'] = df['title_year'].apply(np.int64)","8b839814":"plt.figure(figsize=(15,10))\ndf['title_year'].value_counts()[0:10].plot.bar()","0f4840ea":"#Sort movies based on score calculated above\ndf2 = df.sort_values('imdb_score', ascending=False)\n\n#Print the top 20 movies\ndf2[['movie_title', 'title_year', 'director_name', 'genres', 'language', 'imdb_score']].head(20)","1acfa275":"dataset= df[['director_name','actor_2_name','genres','title_year','actor_1_name','movie_title','actor_3_name']]","c875489f":"dataset.head()","c56c1e7e":"dataset['genres']","5d750b3a":"## clean genres--- remove | between generes\ndataset['genres'] = dataset['genres'].apply(lambda a: str(a).replace('|', ' '))\ndataset['genres']","3082f233":"dataset['movie_title'][0]","b0a0cbba":"dataset['movie_title'] = dataset['movie_title'].apply(lambda a:a[:-1])\ndataset['movie_title'][0]","297a1117":"## combined features on which we will calculate cosine similarity\n\ndataset['director_genre_actors'] = dataset['director_name']+' '+dataset['actor_1_name']+' '+' '+dataset['actor_2_name']+' '+dataset['actor_3_name']+' '+dataset['genres']","a31a36c5":"dataset.head()","573b0e6d":"dataset.fillna('', inplace=True)","7b6ea4ba":"dataset.isnull().sum()","679dbe27":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nvec = CountVectorizer()\nvec_matrix = vec.fit_transform(dataset['director_genre_actors'])\n\nsimilarity = cosine_similarity(vec_matrix)","8f318c42":"def recommend_movie(movie):\n    if movie not in dataset['movie_title'].unique():\n        return('Sorry! The movie you requested is not in our database. Please check the spelling or try with some other movies')\n    else:\n        i = dataset.loc[dataset['movie_title']==movie].index[0]\n        lst = list(enumerate(similarity[i]))\n        lst = sorted(lst, key = lambda x:x[1] ,reverse=True)\n        lst = lst[1:11] # excluding first item since it is the requested movie itself\n        l = []\n        year=[]\n        for i in range(len(lst)):\n            a = lst[i][0]\n            l.append(dataset['movie_title'][a])\n            year.append(dataset['title_year'][a])\n            \n        plt.figure(figsize=(10,5))\n        plt.bar(l, [i[1] for i in lst])\n        plt.xticks(rotation=90)\n        plt.xlabel('Movies similar to \u2192 '+movie, fontsize=12,fontweight=\"bold\")\n        plt.ylabel('cosine scores', fontsize=12,fontweight=\"bold\")\n        plt.show()\n        df2 = pd.DataFrame({'Movies Recommended':l, 'Year':year})\n        df2.drop_duplicates\n        return df2","a0f26f3e":"dataset['movie_title'].sample(10)","82cf75c8":"recommend_movie('The Kids Are All Right')","fefecd3a":"recommend_movie('The Godfather')","2b20ded3":"recommend_movie('Avatar')","d97195d2":"recommend_movie('The Dark Knight Rises')","4dce0db0":"recommend_movie(\"Pirates of the Caribbean: At World's End\")","3265a71f":"dataset['movie_title'].value_counts()","8517de12":"recommend_movie(\"The Fast and the Furious\")","a984a24a":"recommend_movie('Fight Club')","5e5f9001":"#### 5. The year when maximum movies were released","63ca7bc9":"- We can conclude that majority of the movies in our dataset are made in `USA`.","59e74ff4":"- From the plot above, we can say that the movies with `Drama` genre is the most in our dataset.","1e1b5d7d":"#### 3. Languages in which the movies are made.","1af34334":"## Importing necessary libraries\nThe following code is written in Python 3.x. Libraries provide pre-written functionality to perform necessary tasks.","e9e79651":"- From the above output, we can see that the average IMDB rating of the movie is 6.44, on a scale from 1-10.","97278ff9":"#### 1. Color of the movies","c568db96":"- We can observe that majority of the movies are in `English` language, followed by `French`, `Spanish` and `Hindi`.","7939e2f9":"# IMDB 5000 Movie Data set","5d1cb8dc":"#### Formatting the `genres` and `movie_title` columns in the dataset:","6d1267bb":"### Dataset Information\n\nThis Notebook contains various movies and their IMDB information. They are as follows:-\n\n|**Feature**|**Description**|\n|----|----|\n|color|It contains the information whether the movies are coloured or black and white.|\n|director_name|It contains the name of the director for that movie.|\n|num_critic_for_reviews|Number of critic for reviews of that movie.|\n|duration|This feature has the duration of the movie.|\n|director_facebook_likes|Number of likes of the Director on his\/her Facebook Page.|\n|actor_3_facebook_likes|Number of likes of the Actor_3 on his\/her Facebook Page.|\n|actor_2_facebook_likes| Number of likes of the Actor_2 on his\/her Facebook Page.|\n|actor_1_facebook_likes|Number of likes of the Actor_1 on his\/her Facebook Page.|\n|gross| The Gross amount for the movie.|\n|genres|The genre og the movie.|\n|actor_1_name|Name of the 1st actor.|\n|movie_title|Title\/Name of the movie.|\n|num_voted_users|Number of users who voted for the movie.|\n|cast_total_facebook_likes|Total Facebook likes for the cast of the movie.|\n|actor_2_name|Name of the 2nd actor.|\n|actor_3_name|Name of the 3rd actor.|\n|facenumber_in_poster|Number of posters on the Facebook.|\n|plot_keywords|Keywords that can be used to identify the plots in the movie.|\n|movie_imdb_link|The IMDB link of that movie.|\n|num_user_for_reviews|Number of users who wrote reviews.|\n|language|Language of the movie.|\n|country|Country in which the movie was made.|\n|content_rating|Rating of the content of the movie.|\n|budget|Budget used for making the movie.|\n|title_year|The year in which title of the movie was launched.|\n|imdb_score|The IMBD score or rating for the movie.|\n|aspect_ratio|It is the ratio of width to height of the scenes in that movie.|\n|movie_facebook_likes|Number of likes for that movie on Facebook.|","3f323c05":"### **2. Content based Recommender System**","2d577e54":"## Please upvote my work if you like it. Thankyou!! ","64be30bd":"## Yayy!! The Recommender System works. \ud83d\ude00","ccbeed71":"## Exploratory Data Analysis","e11bec4a":"- This tells us there are many null values present in our dataset. ","b63db25e":"#### 4. Country of the movie","a6463e78":"**Task:** Build a movie recommendation system using the given data set.\n\nLink to data set\nhttps:\/\/www.kaggle.com\/carolzhangdc\/imdb-5000-movie-dataset","68d9ce7c":"#### Creating a separate dataset for the recommender system:","eef2513d":"- From here, we can see that maximum movies were released in the year `2009`, according to our dataset.","2cbdb0e7":"- We can see that 4815 movies are colored. Others are Black and white.","05721792":"#### Combined features on which we will calculate cosine similarity:","41e572c6":"#### vectorizing and then calculating cosine similarity:","a32e9122":"The above is a very simple Movie Recommender System. Here, the `IMDB rating` of the movie is taken into account and recommendation is made, based on that. According to this:\n\n- `Towering Inferno` has the highest rating og 9.5\/10 & it is an English comedy movie.\n- Then follows `The Shawshank Redemption`, `The Godfather` and so on.","6812834a":"**I will be using the `cosine similarity` to calculate a numeric quantity that denotes the similarity between two movies. I use the cosine similarity score since it is independent of magnitude and is relatively easy and fast to calculate. Mathematically, it is defined as follows:**\n\n![image.png](attachment:image.png)","52eb0c60":"## Movie Recommendation System\n\n### 1. Simple Recommender System (based on IMDB rating)","0988c32d":"#### 2. Genres of the movie (Top 10)"}}