{"cell_type":{"b150f321":"code","5d72445a":"code","cbcbaff7":"code","7dffda40":"code","6e941392":"code","0cec276a":"code","8c032f2d":"code","bd82c812":"code","a157cbfd":"code","e169f68c":"code","7bf4c96c":"code","a0faadf5":"code","95572e77":"code","7fbcc7b5":"code","5eacb813":"code","1d8a4758":"code","183e28ad":"code","a94f37b3":"code","a0648f10":"code","bd013f32":"code","0adc0449":"code","146bb92e":"code","12320bbc":"code","38d20fe3":"code","3155bf06":"code","06a8c7b7":"code","ff5d6a23":"code","42379aef":"code","591716b9":"code","2220741b":"code","52e99c4c":"code","83b8f45f":"code","5afc9a60":"code","3f04ac5c":"code","bf0d6a09":"code","86d4f2da":"code","5befbcfb":"code","1a0cb959":"code","2f515363":"code","dc1d44e0":"code","7824597c":"code","e0667675":"code","9d7c4be6":"code","beb055d5":"code","a27ed474":"code","4a114045":"code","9bedad0f":"code","5091c2cd":"code","462da675":"code","9ba81550":"code","853f0296":"code","4cefa427":"code","80c5dc5e":"markdown","f1e42287":"markdown","27ae33eb":"markdown","27cf7ce1":"markdown","84213b73":"markdown","618c2bc5":"markdown","1255f82c":"markdown","ecee8a9f":"markdown","68931e80":"markdown","e11a4d8a":"markdown","8bab59a8":"markdown","9644f144":"markdown","b68f3d49":"markdown","a444a80b":"markdown","27f81216":"markdown","0d18aa9a":"markdown","80b23f7d":"markdown","5593c51d":"markdown","675fbd36":"markdown","b5c2d2b4":"markdown"},"source":{"b150f321":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d72445a":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score,make_scorer,classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score,adjusted_rand_score\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.model_selection import train_test_split","cbcbaff7":"df = pd.read_csv('..\/input\/prediction-of-music-genre\/music_genre.csv')","7dffda40":"df.head(10)","6e941392":"discr_feat = ['instance_id', 'artist_name', 'track_name', 'popularity','key', 'mode','obtained_date','music_genre','tempo']\ncont_feat = ['popularity','acousticness','duration_ms', 'energy','instrumentalness','liveness','loudness','speechiness','valence']","0cec276a":"df.info()","8c032f2d":"df.shape","bd82c812":"df.describe()","a157cbfd":"print(df.isnull().sum())\n","e169f68c":"df.index[df.isnull().any(axis=1)]","7bf4c96c":"for i in df.index[df.isnull().any(axis=1)]:\n    print(\"la ligne n\u00b0\",i)\n    print(    df.iloc[i        ,:]  )","a0faadf5":"for i in df.index[df.isnull().any(axis=1)]:\n    df=df.drop(i)","95572e77":"print(df.isnull().sum())","7fbcc7b5":"df.music_genre.value_counts()","5eacb813":"for col in cont_feat :\n    plt.figure(figsize=[10,5])\n    sns.histplot(df[col])","1d8a4758":"Electronic = df.music_genre=='Electronic'\nAnime = df.music_genre=='Anime'\nJazz = df.music_genre=='Jazz'\nAlternative = df.music_genre=='Alternative'\nCountry = df.music_genre=='Country'\nRap = df.music_genre=='Rap'\nBlues = df.music_genre=='Blues'\nRock = df.music_genre=='Rock'\nClassical = df.music_genre=='Classical'\nHipHop = df.music_genre=='Hip-Hop'","183e28ad":"plt.figure(figsize=(10,6))\n\nplt.scatter(df.acousticness[df.music_genre=='Hip-Hop'],\n           df.loudness[df.music_genre=='Hip-Hop'],\n           c=\"salmon\")\n\nplt.scatter(df.acousticness[df.music_genre=='Classical'],\n           df.loudness[df.music_genre=='Classical'],\n           c=\"lightblue\")\n\nplt.scatter(df.acousticness[df.music_genre=='Electronic'],\n           df.loudness[df.music_genre=='Electronic'],\n           c=\"yellow\")\n\nplt.scatter(df.acousticness[df.music_genre=='Country'],\n           df.loudness[df.music_genre=='Country'],\n           c=\"brown\")\n\nplt.scatter(df.acousticness[df.music_genre=='Rap'],\n           df.loudness[df.music_genre=='Rap'],\n           c=\"purple\")\n\nplt.scatter(df.acousticness[df.music_genre=='Blues'],\n           df.loudness[df.music_genre=='Blues'],\n           c=\"darkblue\")\n\nplt.title(\"Heart disease in function of Age and Max Heart Rate\")\nplt.xlabel(\"Age\")\nplt.legend([\"Disease\",\"No Disease\"])\nplt.ylabel(\"Max Heart Rate\");","a94f37b3":"corr_matrix=df.corr()\nplt.figure(figsize=(15,10))\nsns.heatmap(corr_matrix,\n           annot=True,\n           linewidths=0.5,\n           fmt=\".2f\",\n           cmap=\"YlGnBu\")","a0648f10":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier","bd013f32":"df_music_genre = df.drop(['instance_id', 'artist_name', 'track_name', 'key', 'mode','obtained_date','tempo'], axis=1)","0adc0449":"data_train = df_music_genre.sample(frac=0.8, random_state=1)          # 80% des donn\u00e9es avec frac=0.8\ndata_test = df_music_genre.drop(data_train.index)     # le reste des donn\u00e9es pour le test","146bb92e":"X_train = data_train.drop(['music_genre'], axis=1)\ny_train = data_train['music_genre']\nX_test = data_test.drop(['music_genre'], axis=1)\ny_test = data_test['music_genre']","12320bbc":"plt.figure(figsize=(9,9))\n\nlogistique = lambda x: np.exp(x)\/(1+np.exp(x))   \n\nx_range = np.linspace(-10,10,50)       \ny_values = logistique(x_range)\n\nplt.plot(x_range, y_values, color=\"red\")","38d20fe3":"from sklearn.linear_model import LogisticRegression","3155bf06":"lr = LogisticRegression()\nlr.fit(X_train,y_train)","06a8c7b7":"y_lr = lr.predict(X_test)","ff5d6a23":"print(y_lr)","42379aef":"lr_score = accuracy_score(y_test, y_lr)\nprint(lr_score)","591716b9":"from sklearn import ensemble\n\nrf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)","2220741b":"print(classification_report(y_test, y_rf))","52e99c4c":"from sklearn import ensemble\nrf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)","83b8f45f":"print(classification_report(y_test, y_rf))","5afc9a60":"rf_score = accuracy_score(y_test, y_rf)\nprint(rf_score)","3f04ac5c":"cm = confusion_matrix(y_test, y_rf)\nprint(cm)","bf0d6a09":"importances = rf.feature_importances_\nindices = np.argsort(importances)","86d4f2da":"plt.figure(figsize=(12,8))\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), df_music_genre.columns[indices])\nplt.title('Importance des caracteristiques')","5befbcfb":"!pip install xgboost","1a0cb959":"import xgboost as XGB\nxgb  = XGB.XGBClassifier()\nxgb.fit(X_train, y_train)\ny_xgb = xgb.predict(X_test)\ncm = confusion_matrix(y_test, y_xgb)\nprint(cm)\nprint(classification_report(y_test, y_xgb))","2f515363":"music_features = df_music_genre.drop(\"music_genre\", axis = 1)","dc1d44e0":"music_labels = df_music_genre[\"music_genre\"]","7824597c":"scaler = StandardScaler()","e0667675":"music_features_scaled = scaler.fit_transform(music_features)","9d7c4be6":"music_features_scaled.mean(), music_features_scaled.std()","beb055d5":"tr_val_f, test_features, tr_val_l, test_labels = train_test_split(\n    music_features_scaled, music_labels, test_size = 0.1, stratify = music_labels)","a27ed474":"train_features, val_features, train_labels, val_labels = train_test_split(\n    tr_val_f, tr_val_l, test_size = len(test_labels), stratify = tr_val_l)","4a114045":"train_features.shape, train_labels.shape, val_features.shape, val_labels.shape, test_features.shape,   test_labels.shape","9bedad0f":"f1 = make_scorer(f1_score, average = \"weighted\")","5091c2cd":"model = RandomForestClassifier(n_estimators = 35, max_depth = 15, min_samples_leaf = 4)","462da675":"def classification_task(estimator, features, labels):\n    \"\"\"\n    Peforms classification by training (\"fit\", \"predict\") and evaluation (\"score\") of a modelling alogirthm.\n    \n    Arguments: \n        Estimator, features (X) and labels (y).\n    \n    Returns: \n        Model's performance measured in terms of accuracy and f1_score.\n        \n        Le F1-score est une m\u00e9trique pour \u00e9valuer la performance des mod\u00e8les de classification \u00e0 2 classes ou plus.\n    \"\"\"\n    estimator.fit(features, labels)\n    predictions = estimator.predict(features)\n    \n    print(f\"Accuracy: {accuracy_score(labels, predictions)}\")\n    print(f\"F1 score: {f1_score(labels, predictions, average = 'weighted')}\")","9ba81550":"classification_task(model, train_features, train_labels)","853f0296":"classification_task(model, val_features, val_labels)","4cefa427":"classification_task(model, test_features, test_labels)","80c5dc5e":"informations g\u00e9n\u00e9rales concernant le dataset:","f1e42287":"## Pr\u00e9sentation du data set\n","27ae33eb":"## r\u00e9gression logistique","27cf7ce1":"D\u00e9finition des valeurs discr\u00e8tes et continues:","84213b73":"## Random Forrest","618c2bc5":"Notre dataset est une classification des musiques selon le genre musical. Ce dataset est issue de Spotify et comporte 10 genres musicaux ('Electronic', 'Anime', 'Jazz', 'Alternative', 'Country', 'Rap', 'Blues', 'Rock', 'Classical', 'Hip-Hop'). \n\nOn y trouve \u00e9galement 18 colonnes : 11 d\u00e9cimales, 6 cha\u00eenes de caract\u00e8res et 1 format date. ","1255f82c":"# Donn\u00e9es","ecee8a9f":"On a les informations suivantes :\n\n1) instance_id  \n2) artist_name  \n3) track_name  \n4) popularity  \n5) acousticness  \n6) danceability: how a music is a danceable  \n7) duration_ms: *the duration of the music in ms*  \n8) energy: is the sense of forward motion in music    \n9) instrumentalness  \n10) key  \n11) liveness  \n12) loudness  \n13) mode  \n14) speechiness  \n15) tempo  \n16) obtained_date  \n17) valence  \n18) music_genre  ","68931e80":"# Pr\u00e9diction du genre musical","e11a4d8a":"## importance des caract\u00e9ristiques","8bab59a8":"# Machine Learning","9644f144":"## classification","b68f3d49":"V\u00e9rifier s'il y a des donn\u00e9es manquantes:","a444a80b":"Etant donn\u00e9 que nous avons beaucoup de classes (10 genres musicaux), le r\u00e9sultat est plut\u00f4t satisfaisant. ","27f81216":"## R\u00e9seaux de neurones","0d18aa9a":"voir avec la prof comment analyser les donn\u00e9es d'un dataset \u00e0 plus de 2 outputs + il faut supprimer le id","80b23f7d":"## XGBoost","5593c51d":"## Importation des librairies","675fbd36":"**On affiche les distributions des valeurs continues :**","b5c2d2b4":"Il y a seulement 5 lignes avec des donn\u00e9es manquantes cela est anecdotiques mais on peut tout de m\u00eame les supprimer."}}