{"cell_type":{"76c344fd":"code","5628a738":"code","c6cc0196":"code","2f965cba":"code","69f5e3c2":"code","9ce7cd4d":"code","0c85f1a5":"code","22c10aef":"code","66e37777":"markdown"},"source":{"76c344fd":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom tensorflow.keras.optimizers import Adam\nfrom keras.utils.np_utils import to_categorical\nfrom keras.layers import Dropout,Flatten\nfrom keras.layers.convolutional import Conv2D,MaxPooling2D\nimport cv2\nfrom sklearn.model_selection import train_test_split\nimport pickle\nimport os\nimport pandas as pd\nimport random\nfrom keras.preprocessing.image import ImageDataGenerator","5628a738":"path=\"..\/input\/traffic-sign-dataset-classification\/DATA\"\nlabelfile=\"..\/input\/traffic-sign-dataset-classification\/labels.csv\"\nbatch_size_val=16\nsteps_per_epoch_val=100\nepochs_val=20\nimageDimensions=(32,32,3)\ntestratio=0.1\nvalidationratio=0.1","c6cc0196":"count=0\nImages=[]\nClassno=[]\nmylist=os.listdir(path)\nprint(\"Total Classes Detected: \",len(mylist))\nnoofclasses=len(mylist)\nprint(\"Importing Classes .....\")\nfor i in range(0,len(mylist)):\n    mypics=os.listdir(\"..\/input\/traffic-sign-dataset-classification\/DATA\/\" + str(count))\n    for y in mypics:\n        current=cv2.imread(path+\"\/\"+str(count)+\"\/\"+ y)\n        Images.append(current)\n        Classno.append(count)\n    print(str(count) + \"\/\" + str(noofclasses))\n    count=count+1\nprint(str(noofclasses)+(\"\/\")+str(noofclasses))\nprint(\" \")\n#print(Images)\n#print(Classno)\nImages=np.array(Images)\nClassno=np.array(Classno)\nprint(Images.shape)\nprint(Classno.shape)\n\n\n\n\nX_train, X_test, Y_train, Y_test = train_test_split(Images,Classno,test_size=testratio)\nX_train, X_validation ,Y_train, Y_validation = train_test_split(X_train,Y_train,test_size=validationratio)","2f965cba":"################################################\nprint(\"DATA SHAPES\")\nprint(\"Train:  \")\nprint(X_train.shape,Y_train.shape)\nprint(\"Validation:   \")\nprint(X_validation.shape, Y_validation.shape)\nprint(\"Test:  \")\nprint(X_test.shape,Y_test.shape)\n\ndata=pd.read_csv(labelfile)\nprint(\"data_shape\",data.shape,type(data))\n\ndef grayscale(img):\n    img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n    img = cv2.resize(img,(100,100)) \n    return img\ndef equalize(img):\n    img=cv2.equalizeHist(img)\n    return img\ndef preprocessing(img):\n    img=grayscale(img)\n    img=equalize(img)\n    img=img\/255.0\n    return img","69f5e3c2":"X_train=np.array(list(map(preprocessing,X_train)))\nX_validation=np.array(list(map(preprocessing,X_validation)))\nX_test=np.array(list(map(preprocessing,X_test)))\n#cv2.imshow(\"Gray Scale Images: \", X_train[random.randint(0,len(X_train)-1)])\n#cv2.waitKey(0)\n\nX_train=X_train.reshape(X_train.shape[0],100,100,1)\nX_validation=X_validation.reshape(X_validation.shape[0],100,100,1)\nX_test=X_test.reshape(X_test.shape[0],100,100,1)\n\ndatagen=ImageDataGenerator(width_shift_range=0.1,height_shift_range=0.1,zoom_range=0.2,shear_range=0.1,rotation_range=10)\ndatagen.fit(X_train)\nbatches=datagen.flow(X_train,Y_train,batch_size=20)\nX_batch,Y_batch=next(batches)\n\nY_train=to_categorical(Y_train,noofclasses)\nY_validation=to_categorical(Y_validation,noofclasses)\nY_test=to_categorical(Y_test,noofclasses)","9ce7cd4d":"def mymodel():\n    nooffilters=60\n    sizeoffilters=(5,5)\n    sizeoffilters2=(3,3)\n    sizeofpool=(2,2)\n    noofnodes=500\n    model=Sequential()\n    model.add((Conv2D(nooffilters,sizeoffilters,input_shape=(100,100,1),activation='relu')))\n    model.add((Conv2D(nooffilters,sizeoffilters,activation='relu')))\n    model.add(MaxPooling2D(pool_size=sizeofpool))\n\n    model.add((Conv2D(nooffilters\/\/2,sizeoffilters2,activation='relu')))\n    model.add((Conv2D(nooffilters\/\/2,sizeoffilters2,activation='relu')))\n    model.add(MaxPooling2D(pool_size=sizeofpool))\n    model.add(Dropout(0.5))\n\n    model.add(Flatten())\n    model.add(Dense(noofnodes,activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(noofclasses,activation='softmax'))\n\n    model.compile(Adam(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy'])\n    return model","0c85f1a5":"###################33\nmodel=mymodel()\nhistory=model.fit_generator(datagen.flow(X_train,Y_train,batch_size=batch_size_val),steps_per_epoch=steps_per_epoch_val,epochs=100,validation_data=(X_validation,Y_validation),shuffle=1)\nscore=model.evaluate(X_test,Y_test,verbose=0)\nprint('Test Score: ',score[0])\nprint('Test Accuracy: ',score[1])","22c10aef":"\n#################\n# pickle_out=open(\"model_trained_avnmht.p\",\"wb\")\n# pickle.dump(model,pickle_out)\n# pickle_out.close()\n#cv2.waitKey(0)","66e37777":"# This is the Code for creation of Basic classification CNN network on Traffic Signs\n![trafficsigndataset.png](attachment:26215f77-bcbe-40fc-aa17-d49383387f25.png)\n# Please upvote the notebook and dataset if you find this helpful"}}