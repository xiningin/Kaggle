{"cell_type":{"e01808ad":"code","1240572f":"code","019add33":"code","3dde10f5":"code","cfaa352f":"code","46e98420":"code","9e095aa3":"code","4df4fae5":"code","4fa50095":"code","bc8936bd":"code","0bd81d4d":"code","699149b5":"code","bcb56361":"code","395bbce8":"code","d9ddc82b":"code","99d57863":"code","4bd8871a":"code","e9d630e6":"code","5597ee2d":"code","c3b988ab":"code","5e2da17b":"code","8e57f448":"code","3f3abe6b":"code","0092c990":"code","29f3decf":"code","75486914":"code","e3597e7a":"code","9b6b5363":"code","df1b6c3f":"code","34c8c9e8":"code","a456bed1":"code","0b70d8db":"code","2d65c712":"code","54ca46ef":"code","38d40182":"code","781347bd":"code","91f838b4":"code","1a071c78":"code","08339f5d":"code","473f1386":"code","16e17155":"code","bea4d3bd":"code","3855c232":"code","6d109900":"code","a8e1d9f0":"code","9752afb5":"code","231cd677":"code","b91e8462":"code","2ad57b5e":"code","8376b4a1":"code","8ceaea2d":"code","4f8c31ab":"code","0af630e3":"code","c6f641b5":"code","15662600":"code","818a1e46":"code","43c44245":"code","a80a0489":"code","aca91ac2":"markdown","f7c39f92":"markdown","5e269f8b":"markdown","d1ab1380":"markdown","de968ed4":"markdown","8a68ca8a":"markdown","322a213d":"markdown","598445b6":"markdown","c45eb242":"markdown","a3a8f2bb":"markdown","b9967fca":"markdown","d30fbac9":"markdown","7b230b2e":"markdown","029c797a":"markdown","41979ece":"markdown","6486ec29":"markdown","adb709aa":"markdown","c6b7468b":"markdown","f7d840ec":"markdown","febdb5b3":"markdown","b8e9b745":"markdown","6a165746":"markdown","c0a2db13":"markdown"},"source":{"e01808ad":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.filterwarnings('ignore')","1240572f":"data = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","019add33":"data.head()","3dde10f5":"len(data)","cfaa352f":"data.shape","46e98420":"data.isnull().sum()","9e095aa3":"data.info()","4df4fae5":"data[['age', 'platelets', 'serum_creatinine']] = data[['age', 'platelets', 'serum_creatinine']].astype('int')","4fa50095":"data.groupby(by='DEATH_EVENT').describe().round().T","bc8936bd":"corr = data.corr().round(3)","0bd81d4d":"corr","699149b5":"plt.figure(figsize=(12,8))\nsns.heatmap(corr, annot=True, linewidth=2, linecolor='w', fmt='.2f',annot_kws={'size':12, 'weight': 'bold'});","bcb56361":"def correlatedfeatures(cor, threshold):\n    feature = []\n    value = []\n\n    for i, index in enumerate(cor.index):\n        if abs(cor[index]) > threshold:\n            feature.append(index)\n            value.append(cor[index])\n\n    df = pd.DataFrame(data=value, index=feature, columns=['Value'])\n\n    return df","395bbce8":"threshold = 0.5\ncor_features = correlatedfeatures(corr['DEATH_EVENT'], threshold)\n\ncor_features","d9ddc82b":"data.describe().round()","99d57863":"colum = ['age','creatinine_phosphokinase','ejection_fraction','platelets','serum_creatinine','serum_sodium']","4bd8871a":"rows = 3\ncols = 2\n\nfig,ax = plt.subplots(nrows=rows, ncols=cols, figsize=(16,15))\n\nindex = 0\n\nfor i in range(rows):\n    for j in range(cols):\n        sns.boxplot(data[colum[index]], ax=ax[i][j])\n        index = index+1","e9d630e6":"sns.boxplot(data['time']);","5597ee2d":"plt.figure(figsize=(12,8))\nplt.pie(data['DEATH_EVENT'].value_counts(sort=False), autopct='%1.1f%%', explode=[0, 0.1], shadow=True, labels=['Alive', 'Death'])\nplt.title('Death Event Distribution', weight='bold', style='italic', fontsize=14);","c3b988ab":"row = 3\ncol = 2\n\nfig,ax = plt.subplots(row, col, figsize=(16,15))\n\nindex=0\n\nfor i in range(row):\n    for j in range(col):\n        sns.kdeplot(data[colum[index]], shade=True, color='b', ax=ax[i][j])\n        index = index+1","5e2da17b":"col = ['age','creatinine_phosphokinase','ejection_fraction','platelets','serum_creatinine','serum_sodium', 'time']\ndata[col].std().round(2)","8e57f448":"data.columns","3f3abe6b":"plt.figure(figsize=(10,6))\nfig = sns.countplot(data['anaemia'], label=['No Anaemia', 'Anaemia'])\nfig.set_xticklabels(['No_Anaemia', 'Anaemia'], weight='bold')\n\nfor i in fig.patches:\n    fig.annotate(format(i.get_height()),\n                 (i.get_x()+i.get_width()\/2,\n                  i.get_height()), ha='center', va='center',\n                 size=14, xytext=(8,0),\n                 textcoords='offset points')","0092c990":"fig, ax = plt.subplots(1,2, figsize=(16,8))\n\nax[0].pie(data['diabetes'].value_counts(), autopct='%1.1f%%', shadow=True, labels=data['diabetes'].unique())\nax[0].set_title('Disctribution of Diabetic Patients', fontsize=14)\n\nax[1].pie(data.groupby(['DEATH_EVENT', 'diabetes'])['DEATH_EVENT'].count(), autopct='%1.1f%%', explode=[0,0,0,0.1], shadow=True)\nax[1].set_title('Patient with Diabetes & Died', fontsize=14);","29f3decf":"px.bar(y = data['high_blood_pressure'].value_counts(),height=500, width=800, text=data['high_blood_pressure'].value_counts(), \n       x=['No_BP', 'BP'], labels={'x': 'Blood Pressure', 'y':'Count'})","75486914":"px.pie(values=data.groupby(['sex', 'DEATH_EVENT'])['DEATH_EVENT'].count(), height=400, width=500, hole=.5, title='Sex Distribution',\n       names=['F+A', 'F+D', 'M+A', 'M+D'])","e3597e7a":"fig = go.Figure(data=[go.Pie(values=data['smoking'].value_counts(), labels=['Non-Smoker', 'Smoker'], textinfo='label+percent', \n                             title='Smoking Distribution', pull=[0, 0.1])])\n\nfig.update_layout(height=500, width=600)","9b6b5363":"sns.pairplot(data, diag_kind='kde')","df1b6c3f":"x = data.drop(columns='DEATH_EVENT')\n\ny = data['DEATH_EVENT']","34c8c9e8":"from sklearn.model_selection import train_test_split","a456bed1":"x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=0)","0b70d8db":"from sklearn.preprocessing import StandardScaler\n\nsc=StandardScaler()","2d65c712":"col = ['age', 'creatinine_phosphokinase', 'ejection_fraction', 'platelets','serum_creatinine', 'serum_sodium', 'time']","54ca46ef":"x_train_sc = x_train.copy()\n\nx_train_sc[col] = sc.fit_transform(x_train_sc[col])","38d40182":"x_test_sc = x_test.copy()\n\nx_test_sc[col] = sc.fit_transform(x_test_sc[col])","781347bd":"from sklearn.svm import SVC","91f838b4":"svc = SVC(kernel='rbf', random_state=0, probability=True)","1a071c78":"svc.fit(x_train_sc, y_train)","08339f5d":"pred_svc = svc.predict(x_test_sc)\n\npred_svc","473f1386":"from sklearn.metrics import confusion_matrix, classification_report, roc_auc_score, plot_roc_curve, plot_precision_recall_curve","16e17155":"print(classification_report(y_test, pred_svc))","bea4d3bd":"cm = confusion_matrix(y_test, pred_svc)","3855c232":"sns.heatmap(cm, annot=True)\nplt.xlabel('Predicted')\nplt.ylabel('Actual');","6d109900":"plt.figure(figsize=(12,8))\nplot_roc_curve(svc, x_test_sc, y_test)\nplt.plot([0,1],[0,1], ls='--', c='r');","a8e1d9f0":"plt.figure(figsize=(12,8))\nplot_precision_recall_curve(svc, x_test_sc, y_test);","9752afb5":"from sklearn.model_selection import GridSearchCV","231cd677":"praram = {'C':[1,2,3,4,5], \n          'kernel':['linear', 'poly', 'rbf'], \n          'degree':[2,3,4,5], \n          'random_state':[0],\n          'gamma':[1, 0.1, 0.01, 0.001, 0.0001], \n          'probability': [True]}","b91e8462":"gsc= GridSearchCV(SVC(), param_grid=praram, scoring='accuracy', cv=10, return_train_score=False, refit=True)","2ad57b5e":"gsc.fit(x_train_sc, y_train)","8376b4a1":"df_cv = pd.DataFrame(gsc.cv_results_)\n\ndf_cv.head()","8ceaea2d":"gsc.best_estimator_","4f8c31ab":"gsc.best_score_","0af630e3":"gsc.best_params_","c6f641b5":"gsc.get_params","15662600":"pred_gsc = gsc.predict(x_test_sc)\n\npred_gsc","818a1e46":"confusion_matrix(y_test, pred_gsc)","43c44245":"print(classification_report(y_test, pred_gsc))","a80a0489":"gsc.predict_proba(x_test_sc)","aca91ac2":"### Smoking","f7c39f92":"## Check the Outliers","5e269f8b":"### After Hyperparameter Optmization precision for predicting Detah Event (i.e. 1) has imporved slightly","d1ab1380":"### If you Like the work please support me with your Upvote","de968ed4":"#### Anaemia - 0 = No, 1 = Yes\n#### Diabetes - 0 = No, 1 = Yes\n#### High_blood_pressure - 0 = No, 1 = Yes\n#### Sex - Gender of patient (1 = Male, 0 = Female)\n#### Smoking - 0 = No, 1 = Yes\n#### time - Follow-up Period\n#### DEATH_EVENT - 0 = No, 1 = Yes","8a68ca8a":"### Scalling","322a213d":"### Parameter Description","598445b6":"### Blood Pressure","c45eb242":"### Splitting Dependent and Independent variables","a3a8f2bb":"### Diabetes","b9967fca":"# Correlation","d30fbac9":"### Data Distribution","7b230b2e":"### Sex","029c797a":"# Model Development (Support Vector Clasification)","41979ece":"# Data Describe","6486ec29":"### Train Test Split","adb709aa":"### Check the Predictor variables with High \/ low correlation","c6b7468b":"## Import Libraries","f7d840ec":"# Data Visualization","febdb5b3":"#### Understanding the Data Distribution by using KDE Plot","b8e9b745":"### Model Evaulation","6a165746":"# Hyper Parameters Optimization","c0a2db13":"### Anaemia"}}