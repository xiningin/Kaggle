{"cell_type":{"7af8ca0c":"code","8314d474":"code","45df7d16":"code","83736102":"code","ea905f44":"code","9ce63d27":"code","aeda364c":"code","5fb9486f":"code","708cd18a":"code","1c8a1037":"code","d10a1fd6":"code","355d812d":"code","22bbf711":"code","4a9909ad":"code","0ecada31":"code","ce39882b":"code","1ff6e9dd":"code","2fe4a84a":"code","d4ad376d":"code","a887c5f9":"code","a1da41ca":"code","587ff975":"code","f43fc663":"code","2b9efa5d":"code","a1e230eb":"code","71a3c4ef":"code","c113d8cc":"code","1363071e":"code","f316b258":"code","3370d084":"code","56e7752c":"code","4411dd03":"code","9b2eb8f7":"code","28dd121e":"code","757ad536":"code","fca271c0":"code","a37c6662":"code","1fd192f0":"code","6b41985a":"code","dc6aca0a":"code","3f5d9ba8":"code","4bccc886":"code","d104d2f9":"code","10cc3597":"code","5d4fefd3":"code","8da744ec":"code","1af766e0":"code","29945262":"code","a4c16dd2":"code","d9e5aa73":"code","24e66183":"code","47a1de21":"code","5519b7ba":"code","d67d9eb4":"code","b57382d1":"code","4b65a32a":"code","dc1f7832":"code","cf88163f":"code","2ac9f5fb":"code","3bf1cf54":"code","d12b2951":"code","ad42f540":"code","79507eeb":"code","37609a0e":"code","3fb03180":"code","1c712e04":"code","87bb007a":"code","9b7c88d5":"code","ec56e37b":"code","0e2a2fd6":"code","f2b8ff1d":"code","a0381847":"code","c9af28a4":"code","6a3726a0":"code","077c1ff4":"code","ed921a70":"code","e215fc3e":"code","8701a1ce":"code","5e89b710":"code","41bb3501":"code","f7154daf":"code","0ab9893b":"code","a000bc36":"code","5babef80":"code","aa9091f9":"code","1ac1f83c":"code","8650c241":"code","8ef970a2":"code","a626cfbf":"code","38788568":"code","e1592e5f":"code","44e2a007":"code","d0683015":"code","648d7099":"markdown","2104900f":"markdown","1ce4dd59":"markdown","4cda16ac":"markdown","0e939e37":"markdown","266ad01d":"markdown","c0ff1705":"markdown","b5a7c6d6":"markdown","2c351ba9":"markdown","a8dc5f93":"markdown","7fee73ec":"markdown","515edc0c":"markdown","b1756439":"markdown","8aaa31ea":"markdown","f72172ad":"markdown","a30d56c2":"markdown","732ac320":"markdown","5d9066c1":"markdown","e9b515be":"markdown","0d286285":"markdown","9f0ed064":"markdown","300c83a3":"markdown","ff6c73e0":"markdown","ffbbc3a5":"markdown","d7ec4463":"markdown","3de3816a":"markdown","63b3ee67":"markdown","a1573962":"markdown","7e63d926":"markdown","81acd1f6":"markdown","ac7b5942":"markdown","87000d48":"markdown","f02656dc":"markdown","96ec7eaf":"markdown","241ab571":"markdown","b4a89d3c":"markdown","abf9622f":"markdown","040f2192":"markdown","beeb8b77":"markdown","23a35f2e":"markdown","299f94aa":"markdown","6cfbb25e":"markdown","5ae8a0e2":"markdown","19bda9ff":"markdown","8343d3b9":"markdown","2caf8332":"markdown","1b7d1b95":"markdown","abf64c79":"markdown","f90f86f7":"markdown","fb568547":"markdown","864bdc68":"markdown","897303f6":"markdown","e080aabd":"markdown","7a560705":"markdown","cf3d7352":"markdown","35e7f29c":"markdown","7add5c4b":"markdown","8a2bfd0d":"markdown","c31dd115":"markdown","4a601f6a":"markdown","8a4ba83d":"markdown","2fee8859":"markdown","ccfcb205":"markdown","4f4421f2":"markdown","e5b650bb":"markdown","1bee7828":"markdown","d98e87eb":"markdown","acfe2a9e":"markdown","ff072f32":"markdown","f72bba71":"markdown","253688f0":"markdown","1a25df27":"markdown","dcef1c34":"markdown","75582efa":"markdown","81ac2c7f":"markdown","1b75c484":"markdown","36b37b33":"markdown","6ba26db6":"markdown","4c176565":"markdown","0339a672":"markdown","9ed0ec49":"markdown","867c8449":"markdown","e8aa3fb9":"markdown","d49de1fc":"markdown","acf9d01e":"markdown","f1bc2c72":"markdown","47c77908":"markdown","f801e840":"markdown","5dd9a7b7":"markdown","63f709d2":"markdown","e65ba730":"markdown","e27cff1d":"markdown"},"source":{"7af8ca0c":"import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\n \n# Dataset:\na = pd.DataFrame({ 'group' : np.repeat('A',500), 'value': np.random.normal(10, 5, 500) })\nb = pd.DataFrame({ 'group' : np.repeat('B',500), 'value': np.random.normal(13, 1.2, 500) })\nc = pd.DataFrame({ 'group' : np.repeat('B',500), 'value': np.random.normal(18, 1.2, 500) })\nd = pd.DataFrame({ 'group' : np.repeat('C',20), 'value': np.random.normal(25, 4, 20) })\ne = pd.DataFrame({ 'group' : np.repeat('D',100), 'value': np.random.uniform(12, size=100) })\ndf=a.append(b).append(c).append(d).append(e)\n \n# Usual boxplot\nsns.boxplot(x='group', y='value', data=df)","8314d474":"ax = sns.boxplot(x='group', y='value', data=df)\nax = sns.stripplot(x='group', y='value', data=df, color=\"orange\", jitter=0.2, size=2.5)\nplt.title(\"Boxplot with jitter\", loc=\"left\")","45df7d16":"sns.boxplot(x=\"group\", y=\"value\", data=df)\n \n# Calculate number of obs per group & median to position labels\nmedians = df.groupby(['group'])['value'].median().values\nnobs = df.groupby(\"group\").size().values\nnobs = [str(x) for x in nobs.tolist()]\nnobs = [\"n: \" + i for i in nobs]\n \n# Add it to the plot\npos = range(len(nobs))\nfor tick,label in zip(pos,ax.get_xticklabels()):\n    plt.text(pos[tick], medians[tick] + 0.4, nobs[tick], horizontalalignment='center', size='medium', color='w', \n         weight='semibold')\n \n# add title\nplt.title(\"Boxplot with number of observation\", loc=\"left\")","83736102":"import seaborn as sns\n \n# Usual boxplot\nax = sns.boxplot(x='group', y='value', data=df)\n \n# Add jitter with the swarmplot function.\nax = sns.swarmplot(x='group', y='value', data=df, color=\"grey\")","ea905f44":"import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nplt.style.use('seaborn')\n \n# Dataset:\ndf=pd.DataFrame({'x': np.random.normal(10, 1.2, 20000), 'y': np.random.normal(10, 1.2, 20000), 'group': np.repeat('A',20000) })\ntmp1=pd.DataFrame({'x': np.random.normal(14.5, 1.2, 20000), 'y': np.random.normal(14.5, 1.2, 20000), 'group': np.repeat('B',20000) })\ntmp2=pd.DataFrame({'x': np.random.normal(9.5, 1.5, 20000), 'y': np.random.normal(15.5, 1.5, 20000), 'group': np.repeat('C',20000) })\ndf=df.append(tmp1).append(tmp2)\n \n# plot\nplt.plot( 'x', 'y', data=df, linestyle='', marker='o')\nplt.xlabel('Value of X')\nplt.ylabel('Value of Y')\nplt.title('Overplotting looks like that:', loc='left')","9ce63d27":"plt.plot( 'x', 'y', data=df, linestyle='', marker='o', markersize=0.7)\nplt.xlabel('Value of X')\nplt.ylabel('Value of Y')\nplt.title('Overplotting? Try to reduce the dot size', loc='left')","aeda364c":"plt.plot( 'x', 'y', data=df, linestyle='', marker='o', markersize=3, alpha=0.05, color=\"purple\")\n \n# Titles\nplt.xlabel('Value of X')\nplt.ylabel('Value of Y')\nplt.title('Overplotting? Try to use transparency', loc='left')","5fb9486f":"sns.kdeplot(df.x, df.y, cmap=\"Reds\", shade=True)\nplt.title('Overplotting? Try 2D density graph', loc='left')","708cd18a":"# Sample 1000 random lines\ndf_sample=df.sample(1000)\n \n# Make the plot with this subset\nplt.plot( 'x', 'y', data=df_sample, linestyle='', marker='o')\n \n# titles\nplt.xlabel('Value of X')\nplt.ylabel('Value of Y')\nplt.title('Overplotting? Sample your data', loc='left')","1c8a1037":"df_filtered = df[ df['group'] == 'A']\n# Plot the whole dataset\nplt.plot( 'x', 'y', data=df, linestyle='', marker='o', markersize=1.5, color=\"grey\", alpha=0.3, label='other group')\n \n# Add the group to study\nplt.plot( 'x', 'y', data=df_filtered, linestyle='', marker='o', markersize=1.5, alpha=0.3, label='group A')\n \n# Add titles and legend\nplt.legend(markerscale=8)\nplt.xlabel('Value of X')\nplt.ylabel('Value of Y')\nplt.title('Overplotting? Show a specific group', loc='left')","d10a1fd6":"sns.lmplot( x=\"x\", y=\"y\", data=df, fit_reg=False, hue='group', legend=False, palette=\"Accent\", scatter_kws={\"alpha\":0.1,\"s\":15} )\n \n# Legend\nplt.legend(loc='lower right', markerscale=2)\n \n# titles\nplt.xlabel('Value of X')\nplt.ylabel('Value of Y')\nplt.title('Overplotting? Show putative structure', loc='left')","355d812d":"g = sns.FacetGrid(df, col=\"group\", hue=\"group\")\ng = (g.map(plt.scatter, \"x\", \"y\", edgecolor=\"w\"))","22bbf711":"a=np.concatenate([np.random.normal(2, 4, 1000), np.random.normal(4, 4, 1000), np.random.normal(1, 2, 500), np.random.normal(10, 2, 500), np.random.normal(8, 4, 1000), np.random.normal(10, 4, 1000)])\ndf=pd.DataFrame({'x': np.repeat( range(1,6), 1000), 'y': a })\n \n# plot\nplt.plot( 'x', 'y', data=df, linestyle='', marker='o')","4a9909ad":"from scipy.stats import kde\nfrom mpl_toolkits.mplot3d import Axes3D\n \n# Evaluate a gaussian kde on a regular grid of nbins x nbins over data extents\nnbins=300\nk = kde.gaussian_kde([df.x,df.y])\nxi, yi = np.mgrid[ df.x.min():df.x.max():nbins*1j, df.y.min():df.y.max():nbins*1j]\nzi = k(np.vstack([xi.flatten(), yi.flatten()]))\n \n# Transform it in a dataframe\ndata=pd.DataFrame({'x': xi.flatten(), 'y': yi.flatten(), 'z': zi })\n \n# Make the plot\nfig = plt.figure()\nax = fig.gca(projection='3d')\nax.plot_trisurf(data.x, data.y, data.z, cmap=plt.cm.Spectral, linewidth=0.2)\n# Adapt angle, first number is up\/down, second number is right\/left\nax.view_init(30, 80)","0ecada31":"# 2D density + marginal distribution:\nsns.jointplot(x=df.x, y=df.y, kind='kde')","ce39882b":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import kde\n \n# Create data: 200 points\ndata = np.random.multivariate_normal([0, 0], [[1, 0.5], [0.5, 3]], 200)\nx, y = data.T\n \n# Create a figure with 6 plot areas\nfig, axes = plt.subplots(ncols=6, nrows=1, figsize=(21, 5))\n \n# Everything sarts with a Scatterplot\naxes[0].set_title('Scatterplot')\naxes[0].plot(x, y, 'ko')\n# As you can see there is a lot of overplottin here!\n \n# Thus we can cut the plotting window in several hexbins\nnbins = 20\naxes[1].set_title('Hexbin')\naxes[1].hexbin(x, y, gridsize=nbins, cmap=plt.cm.BuGn_r)\n \n# 2D Histogram\naxes[2].set_title('2D Histogram')\naxes[2].hist2d(x, y, bins=nbins, cmap=plt.cm.BuGn_r)\n \n# Evaluate a gaussian kde on a regular grid of nbins x nbins over data extents\nk = kde.gaussian_kde(data.T)\nxi, yi = np.mgrid[x.min():x.max():nbins*1j, y.min():y.max():nbins*1j]\nzi = k(np.vstack([xi.flatten(), yi.flatten()]))\n \n# plot a density\naxes[3].set_title('Calculate Gaussian KDE')\naxes[3].pcolormesh(xi, yi, zi.reshape(xi.shape), cmap=plt.cm.BuGn_r)\n \n# add shading\naxes[4].set_title('2D Density with shading')\naxes[4].pcolormesh(xi, yi, zi.reshape(xi.shape), shading='gouraud', cmap=plt.cm.BuGn_r)\n \n# contour\naxes[5].set_title('Contour')\naxes[5].pcolormesh(xi, yi, zi.reshape(xi.shape), shading='gouraud', cmap=plt.cm.BuGn_r)\naxes[5].contour(xi, yi, zi.reshape(xi.shape) )","1ff6e9dd":"# libraries and data\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Make a data frame\ndf=pd.DataFrame({'x': range(1,11), 'y1': np.random.randn(10), 'y2': np.random.randn(10)+range(1,11), 'y3': np.random.randn(10)+range(11,21), 'y4': np.random.randn(10)+range(6,16), 'y5': np.random.randn(10)+range(4,14)+(0,0,0,0,0,0,0,-3,-8,-6), 'y6': np.random.randn(10)+range(2,12), 'y7': np.random.randn(10)+range(5,15), 'y8': np.random.randn(10)+range(4,14), 'y9': np.random.randn(10)+range(4,14) })\n \n# Initialize the figure\nplt.style.use('seaborn-darkgrid')\n \n# create a color palette\npalette = plt.get_cmap('Set1')\n \n# multiple line plot\nnum=0\nfor column in df.drop('x', axis=1):\n    num+=1\n \n    # Find the right spot on the plot\n    plt.subplot(3,3, num)\n \n    # Plot the lineplot\n    plt.plot(df['x'], df[column], marker='', color=palette(num), linewidth=1.9, alpha=0.9, label=column)\n \n    # Same limits for everybody!\n    plt.xlim(0,10)\n    plt.ylim(-2,22)\n \n    # Not ticks everywhere\n    if num in range(7) :\n        plt.tick_params(labelbottom='off')\n    if num not in [1,4,7] :\n        plt.tick_params(labelleft='off')\n \n    # Add title\n    plt.title(column, loc='left', fontsize=12, fontweight=0, color=palette(num) )\n \n# general title\nplt.suptitle(\"How the 9 students improved\\nthese past few days?\", fontsize=13, fontweight=0, color='black', style='italic', y=1.02)\n \n# Axis title\nplt.text(0.5, 0.02, 'Time', ha='center', va='center')\nplt.text(0.06, 0.5, 'Note', ha='center', va='center', rotation='vertical')","2fe4a84a":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Make a data frame\ndf=pd.DataFrame({'x': range(1,11), 'y1': np.random.randn(10), 'y2': np.random.randn(10)+range(1,11), 'y3': np.random.randn(10)+range(11,21), 'y4': np.random.randn(10)+range(6,16), 'y5': np.random.randn(10)+range(4,14)+(0,0,0,0,0,0,0,-3,-8,-6), 'y6': np.random.randn(10)+range(2,12), 'y7': np.random.randn(10)+range(5,15), 'y8': np.random.randn(10)+range(4,14), 'y9': np.random.randn(10)+range(4,14) })\n \n# Initialize the figure\nplt.style.use('seaborn-darkgrid')\n \n# create a color palette\npalette = plt.get_cmap('Set1')\n \n# multiple line plot\nnum=0\nfor column in df.drop('x', axis=1):\n    num+=1\n \n    # Find the right spot on the plot\n    plt.subplot(3,3, num)\n \n    # plot every groups, but discreet\n    for v in df.drop('x', axis=1):\n        plt.plot(df['x'], df[v], marker='', color='grey', linewidth=0.6, alpha=0.3)\n \n    # Plot the lineplot\n    plt.plot(df['x'], df[column], marker='', color=palette(num), linewidth=2.4, alpha=0.9, label=column)\n \n    # Same limits for everybody!\n    plt.xlim(0,10)\n    plt.ylim(-2,22)\n \n    # Not ticks everywhere\n    if num in range(7) :\n        plt.tick_params(labelbottom='off')\n    if num not in [1,4,7] :\n        plt.tick_params(labelleft='off')\n \n    # Add title\n    plt.title(column, loc='left', fontsize=12, fontweight=0, color=palette(num) )\n \n# general title\nplt.suptitle(\"How the 9 students improved\\nthese past few days?\", fontsize=13, fontweight=0, color='black', style='italic', y=1.02)\n \n# Axis title\nplt.text(0.5, 0.02, 'Time', ha='center', va='center')\nplt.text(0.06, 0.5, 'Note', ha='center', va='center', rotation='vertical')","d4ad376d":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Make a data frame\ndf=pd.DataFrame({'x': range(1,11), 'y1': np.random.randn(10), 'y2': np.random.randn(10)+range(1,11), 'y3': np.random.randn(10)+range(11,21), 'y4': np.random.randn(10)+range(6,16), 'y5': np.random.randn(10)+range(4,14), 'y6': np.random.randn(10)+range(2,12), 'y7': np.random.randn(10)+range(5,15), 'y8': np.random.randn(10)+range(4,14) })\n \n# All the possibility of style:\npossibilities = [u'seaborn-darkgrid', u'seaborn-notebook', u'classic', u'seaborn-ticks', u'grayscale', u'bmh', u'seaborn-talk', u'dark_background', u'ggplot', u'fivethirtyeight', u'_classic_test', u'seaborn-colorblind', u'seaborn-deep', u'seaborn-whitegrid', u'seaborn-bright', u'seaborn-poster', u'seaborn-muted', u'seaborn-paper', u'seaborn-white', u'seaborn-pastel', u'seaborn-dark', u'seaborn', u'seaborn-dark-palette']\n \n# Initialise figure\nmy_dpi=96\nplt.figure(figsize=(1000\/my_dpi, 1000\/my_dpi), dpi=my_dpi)\n \n# Let's do a chart per possibility:\nfor n, v in enumerate(possibilities):\n    print (n, v)\n \n# I set the new style\n    plt.style.use(v)\n \n# Start new place in the figure\n    plt.subplot(5 ,5, n + 1)\n \n# multiple line plot\n    for column in df.drop('x', axis=1):\n        plt.plot(df['x'], df[column], marker='', color='grey', linewidth=1, alpha=0.4)\n \n        # And highlith one\n        plt.plot(df['x'], df['y5'], marker='', color='orange', linewidth=4)\n \n        # Add a title to say which style it is\n        plt.title(v, fontsize=10, fontweight=0, color='grey', loc='left')\n \n        # remove labels\n        plt.tick_params(labelbottom='off')\n        plt.tick_params(labelleft='off')","a887c5f9":"# libraries and data\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Make a data frame\ndf=pd.DataFrame({'x': range(1,11), 'y1': np.random.randn(10), 'y2': np.random.randn(10)+range(1,11), 'y3': np.random.randn(10)+range(11,21), 'y4': np.random.randn(10)+range(6,16), 'y5': np.random.randn(10)+range(4,14)+(0,0,0,0,0,0,0,-3,-8,-6), 'y6': np.random.randn(10)+range(2,12), 'y7': np.random.randn(10)+range(5,15), 'y8': np.random.randn(10)+range(4,14), 'y9': np.random.randn(10)+range(4,14), 'y10': np.random.randn(10)+range(2,12) })\n \n# style\nplt.style.use('seaborn-darkgrid')\n \n# create a color palette\npalette = plt.get_cmap('Set1')\n \n# multiple line plot\nnum=0\nfor column in df.drop('x', axis=1):\n    num+=1\n    plt.plot(df['x'], df[column], marker='', color=palette(num), linewidth=1, alpha=0.9, label=column)\n \n# Add legend\n    plt.legend(loc=2, ncol=2)\n \n# Add titles\n    plt.title(\"A (bad) Spaghetti plot\", loc='left', fontsize=12, fontweight=0, color='orange')\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Score\")","a1da41ca":"# libraries and data\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Make a data frame\ndf=pd.DataFrame({'x': range(1,11), 'y1': np.random.randn(10), 'y2': np.random.randn(10)+range(1,11), 'y3': np.random.randn(10)+range(11,21), 'y4': np.random.randn(10)+range(6,16), 'y5': np.random.randn(10)+range(4,14)+(0,0,0,0,0,0,0,-3,-8,-6), 'y6': np.random.randn(10)+range(2,12), 'y7': np.random.randn(10)+range(5,15), 'y8': np.random.randn(10)+range(4,14) })\n \n#plt.style.use('fivethirtyeight')\nplt.style.use('seaborn-darkgrid')\nmy_dpi=96\nplt.figure(figsize=(480\/my_dpi, 480\/my_dpi), dpi=my_dpi)\n \n# multiple line plot\nfor column in df.drop('x', axis=1):\n   plt.plot(df['x'], df[column], marker='', color='grey', linewidth=1, alpha=0.4)\n \n# Now re do the interesting curve, but biger with distinct color\nplt.plot(df['x'], df['y5'], marker='', color='orange', linewidth=4, alpha=0.7)\n \n# Change xlim\nplt.xlim(0,12)\n \n# Let's annotate the plot\nnum=0\nfor i in df.values[9][1:]:\n   num+=1\n   name=list(df)[num]\n   if name != 'y5':\n      plt.text(10.2, i, name, horizontalalignment='left', size='small', color='grey')\n \n# And add a special annotation for the group we are interested in\nplt.text(10.2, df.y5.tail(1), 'Mr Orange', horizontalalignment='left', size='small', color='orange')\n \n# Add titles\nplt.title(\"Evolution of Mr Orange vs other students\", loc='left', fontsize=12, fontweight=0, color='orange')\nplt.xlabel(\"Time\")\nplt.ylabel(\"Score\")","587ff975":"import seaborn as sns\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n \n# Data set\nurl = 'https:\/\/python-graph-gallery.com\/wp-content\/uploads\/mtcars.csv'\ndf = pd.read_csv(url)\ndf = df.set_index('model')\ndf\n \n# Prepare a vector of color mapped to the 'cyl' column\nmy_palette = dict(zip(df.cyl.unique(), [\"orange\",\"yellow\",\"brown\"]))\nrow_colors = df.cyl.map(my_palette)\n \n# plot\nsns.clustermap(df, metric=\"correlation\", method=\"single\", cmap=\"Blues\", standard_scale=1, row_colors=row_colors)","f43fc663":"import seaborn as sns\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n \n# Data set\nurl = 'https:\/\/python-graph-gallery.com\/wp-content\/uploads\/mtcars.csv'\ndf = pd.read_csv(url)\ndf = df.set_index('model')\n#del df.index.name\ndf\n \n# Default plot\nsns.clustermap(df)","2b9efa5d":"import pandas as pd\nfrom matplotlib import pyplot as plt\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nimport numpy as np\n \n# Data set\nurl = 'https:\/\/python-graph-gallery.com\/wp-content\/uploads\/mtcars.csv'\ndf = pd.read_csv(url)\ndf = df.set_index('model')\n#del df.index.name\n \n# Calculate the distance between each sample\nZ = linkage(df, 'ward')\n \n# Make the dendro\ndendrogram(Z, labels=df.index, leaf_rotation=0, orientation=\"left\", color_threshold=240, above_threshold_color='grey')\n \n# Create a color palette with 3 color for the 3 cyl possibilities\nmy_palette = plt.cm.get_cmap(\"Accent\", 3)\n \n# transforme the 'cyl' column in a categorical variable. It will allow to put one color on each level.\ndf['cyl']=pd.Categorical(df['cyl'])\nmy_color=df['cyl'].cat.codes\n \n# Apply the right color to each label\nax = plt.gca()\nxlbls = ax.get_ymajorticklabels()\nnum=-1\nfor lbl in xlbls:\n    num+=1\n    val=my_color[num]\n    lbl.set_color(my_palette(val))","a1e230eb":"import pandas as pd\nfrom matplotlib import pyplot as plt\nfrom scipy.cluster import hierarchy\nimport numpy as np\n \n# Data set\nurl = 'https:\/\/python-graph-gallery.com\/wp-content\/uploads\/mtcars.csv'\ndf = pd.read_csv(url)\ndf = df.set_index('model')\n#del df.index.name\ndf\n \n# Calculate the distance between each sample\nZ = hierarchy.linkage(df, 'ward')\n \n \n# Plot with Custom leaves\nhierarchy.dendrogram(Z, leaf_rotation=90, leaf_font_size=8, labels=df.index)","71a3c4ef":"import pandas as pd\nfrom matplotlib import pyplot as plt\nfrom scipy.cluster import hierarchy\nimport numpy as np\n \n# Data set\nurl = 'https:\/\/python-graph-gallery.com\/wp-content\/uploads\/mtcars.csv'\ndf = pd.read_csv(url)\ndf = df.set_index('model')\n#del df.index.name\ndf\n \n# Calculate the distance between each sample\nZ = hierarchy.linkage(df, 'ward')\n \n# Control number of clusters in the plot + add horizontal line.\nhierarchy.dendrogram(Z, color_threshold=240)\nplt.axhline(y=240, c='grey', lw=1, linestyle='dashed')","c113d8cc":"# Libraries\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom scipy.cluster import hierarchy\nimport numpy as np\n \n# Data set\nurl = 'https:\/\/python-graph-gallery.com\/wp-content\/uploads\/mtcars.csv'\ndf = pd.read_csv(url)\ndf = df.set_index('model')\n#del df.index.name\ndf\n \n# Calculate the distance between each sample\nZ = hierarchy.linkage(df, 'ward')\n \n# Set the colour of the cluster here:\nhierarchy.set_link_color_palette(['#b30000','#996600', '#b30086'])\n \n# Make the dendrogram and give the colour above threshold\nhierarchy.dendrogram(Z, color_threshold=240, above_threshold_color='grey')\n \n# Add horizontal line.\nplt.axhline(y=240, c='blue', lw=1, linestyle='dashed')","1363071e":"import pandas as pd\nfrom matplotlib import pyplot as plt\nfrom scipy.cluster import hierarchy\nimport numpy as np\n \n# Data set\nurl = 'https:\/\/python-graph-gallery.com\/wp-content\/uploads\/mtcars.csv'\ndf = pd.read_csv(url)\ndf = df.set_index('model')\n#del df.index.name\ndf\n \n# Calculate the distance between each sample\nZ = hierarchy.linkage(df, 'ward')\n \n# method 1: lastp\nhierarchy.dendrogram(Z, truncate_mode = 'lastp', p=4 ) # -> you will have 4 leaf at the bottom of the plot","f316b258":"# method 2: level\nhierarchy.dendrogram(Z, truncate_mode = 'level', p=2) # -> No more than ``p`` levels of the dendrogram tree are displayed.","3370d084":"import matplotlib.pyplot as plt\nimport pandas as pd\nfrom math import pi\n \n# Set data\ndf = pd.DataFrame({\n'group': ['A','B','C','D'],\n'var1': [38, 1.5, 30, 4],\n'var2': [29, 10, 9, 34],\n'var3': [8, 39, 23, 24],\n'var4': [7, 31, 33, 14],\n'var5': [28, 15, 32, 14]\n})\n \n# number of variable\ncategories=list(df)[1:]\nN = len(categories)\n \n# We are going to plot the first line of the data frame.\n# But we need to repeat the first value to close the circular graph:\nvalues=df.loc[0].drop('group').values.flatten().tolist()\nvalues += values[:1]\nvalues\n \n# What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\nangles = [n \/ float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]\n \n# Initialise the spider plot\nax = plt.subplot(111, polar=True)\n \n# Draw one axe per variable + add labels labels yet\nplt.xticks(angles[:-1], categories, color='grey', size=8)\n \n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([10,20,30], [\"10\",\"20\",\"30\"], color=\"grey\", size=7)\nplt.ylim(0,40)\n \n# Plot data\nax.plot(angles, values, linewidth=1, linestyle='solid')\n \n# Fill area\nax.fill(angles, values, 'b', alpha=0.1)","56e7752c":"import matplotlib.pyplot as plt\nimport pandas as pd\nfrom math import pi\n \n# Set data\ndf = pd.DataFrame({\n'group': ['A','B','C','D'],\n'var1': [38, 1.5, 30, 4],\n'var2': [29, 10, 9, 34],\n'var3': [8, 39, 23, 24],\n'var4': [7, 31, 33, 14],\n'var5': [28, 15, 32, 14]\n})\n \n# ------- PART 1: Define a function that do a plot for one line of the dataset!\n \ndef make_spider( row, title, color):\n \n    # number of variable\n    categories=list(df)[1:]\n    N = len(categories)\n \n# What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n \n# Initialise the spider plot\n    ax = plt.subplot(2,2,row+1, polar=True, )\n \n# If you want the first axis to be on top:\n    ax.set_theta_offset(pi \/ 2)\n    ax.set_theta_direction(-1)\n \n# Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=8)\n \n# Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([10,20,30], [\"10\",\"20\",\"30\"], color=\"grey\", size=7)\n    plt.ylim(0,40)\n \n# Ind1\n    values=df.loc[row].drop('group').values.flatten().tolist()\n    values += values[:1]\n    ax.plot(angles, values, color=color, linewidth=2, linestyle='solid')\n    ax.fill(angles, values, color=color, alpha=0.4)\n \n# Add a title\n    plt.title(title, size=11, color=color, y=1.1)\n \n# ------- PART 2: Apply to all individuals\n# initialize the figure\n    my_dpi=96\n    plt.figure(figsize=(1000\/my_dpi, 1000\/my_dpi), dpi=my_dpi)\n \n# Create a color palette:\n    my_palette = plt.cm.get_cmap(\"Set2\", len(df.index))\n \n# Loop to plot\nfor row in range(0, len(df.index)):\n    make_spider( row=row, title='group '+df['group'][row], color=my_palette(row))\n\n","4411dd03":"import matplotlib.pyplot as plt\nimport pandas as pd\nfrom math import pi\n \n# Set data\ndf = pd.DataFrame({\n'group': ['A','B','C','D'],\n'var1': [38, 1.5, 30, 4],\n'var2': [29, 10, 9, 34],\n'var3': [8, 39, 23, 24],\n'var4': [7, 31, 33, 14],\n'var5': [28, 15, 32, 14]\n})\n \n \n \n# ------- PART 1: Create background\n \n# number of variable\ncategories=list(df)[1:]\nN = len(categories)\n \n# What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\nangles = [n \/ float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]\n \n# Initialise the spider plot\nax = plt.subplot(111, polar=True)\n \n# If you want the first axis to be on top:\nax.set_theta_offset(pi \/ 2)\nax.set_theta_direction(-1)\n \n# Draw one axe per variable + add labels labels yet\nplt.xticks(angles[:-1], categories)\n \n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([10,20,30], [\"10\",\"20\",\"30\"], color=\"grey\", size=7)\nplt.ylim(0,40)\n \n \n# ------- PART 2: Add plots\n \n# Plot each individual = each line of the data\n# I don't do a loop, because plotting more than 3 groups makes the chart unreadable\n \n# Ind1\nvalues=df.loc[0].drop('group').values.flatten().tolist()\nvalues += values[:1]\nax.plot(angles, values, linewidth=1, linestyle='solid', label=\"group A\")\nax.fill(angles, values, 'b', alpha=0.1)\n \n# Ind2\nvalues=df.loc[1].drop('group').values.flatten().tolist()\nvalues += values[:1]\nax.plot(angles, values, linewidth=1, linestyle='solid', label=\"group B\")\nax.fill(angles, values, 'r', alpha=0.1)\n \n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))","9b2eb8f7":"import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import kde\n \n# create data\nx = np.random.normal(size=500)\ny = x * 3 + np.random.normal(size=500)\n \n# Evaluate a gaussian kde on a regular grid of nbins x nbins over data extents\nnbins=300\nk = kde.gaussian_kde([x,y])\nxi, yi = np.mgrid[x.min():x.max():nbins*1j, y.min():y.max():nbins*1j]\nzi = k(np.vstack([xi.flatten(), yi.flatten()]))\n \n# Make the plot\nplt.pcolormesh(xi, yi, zi.reshape(xi.shape))\nplt.show()\n \n# Change color palette\nplt.pcolormesh(xi, yi, zi.reshape(xi.shape), cmap=plt.cm.Greens_r)\nplt.show()","28dd121e":"plt.pcolormesh(xi, yi, zi.reshape(xi.shape), cmap=plt.cm.Greens_r)\nplt.colorbar()\nplt.show()","757ad536":"import matplotlib.pyplot as plt\nimport numpy as np\n \n# create data\nx = np.random.normal(size=50000)\ny = (x * 3 + np.random.normal(size=50000)) * 5\n \n# Make the plot\nplt.hexbin(x, y, gridsize=(15,15) )\nplt.show()\n \n# We can control the size of the bins:\nplt.hexbin(x, y, gridsize=(150,150) )\nplt.show()","fca271c0":"import matplotlib.pyplot as plt\nimport numpy as np\n \n# create data\nx = np.random.normal(size=50000)\ny = (x * 3 + np.random.normal(size=50000)) * 5\n \n# Control the color\nplt.hexbin(x, y, gridsize=(25,25), cmap=plt.cm.Greens)\nplt.show()\n \n# Other color\nplt.hexbin(x, y, gridsize=(25,25), cmap=plt.cm.BuGn_r)\nplt.show()","a37c6662":"plt.hexbin(x, y, gridsize=(25,25), cmap=plt.cm.Purples_r)\nplt.colorbar()\nplt.show()","1fd192f0":"# library & dataset\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndf = sns.load_dataset('iris')\n \n# with regression\nsns.pairplot(df, kind=\"reg\")\nplt.show()\n \n# without regression\nsns.pairplot(df, kind=\"scatter\")\nplt.show()","6b41985a":"import seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('iris')\n \n# Density\nsns.pairplot(df, diag_kind=\"kde\")\n \n# Histogram\nsns.pairplot(df, diag_kind=\"hist\")\n \n# You can custom it as a density plot or histogram so see the related sections\nsns.pairplot(df, diag_kind=\"kde\", diag_kws=dict(shade=True, bw=.05, vertical=False) )","dc6aca0a":"import matplotlib.pyplot as plt\nimport seaborn as sns\ndf = sns.load_dataset('iris')\n \n# with regression\nsns.pairplot(df, kind=\"reg\")\nplt.show()\n \n# without regression\nsns.pairplot(df, kind=\"scatter\")\nplt.show()","3f5d9ba8":"import matplotlib.pyplot as plt\nimport seaborn as sns\ndf = sns.load_dataset('iris')\n \n# left\nsns.pairplot(df, kind=\"scatter\", hue=\"species\", markers=[\"o\", \"s\", \"D\"], palette=\"Set2\")\nplt.show()\n \n# right: you can give other arguments with plot_kws.\nsns.pairplot(df, kind=\"scatter\", hue=\"species\", plot_kws=dict(s=80, edgecolor=\"white\", linewidth=2.5))\nplt.show()","4bccc886":"import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set_style(\"white\")\nimport pandas as pd\nmy_dpi=96\n \n# Get the data (csv file is hosted on the web)\nurl = 'https:\/\/python-graph-gallery.com\/wp-content\/uploads\/gapminderData.csv'\ndata = pd.read_csv(url)\n \n# And I need to transform my categorical column (continent) in a numerical value group1->1, group2->2...\ndata['continent']=pd.Categorical(data['continent'])\n \n# For each year:\nfor i in data.year.unique():\n \n# initialize a figure\n    fig = plt.figure(figsize=(680\/my_dpi, 480\/my_dpi), dpi=my_dpi)\n \n# Change color with c and alpha. I map the color to the X axis value.\n    tmp=data[ data.year == i ]\n    plt.scatter(tmp['lifeExp'], tmp['gdpPercap'] , s=tmp['pop']\/200000 , c=tmp['continent'].cat.codes, cmap=\"Accent\", alpha=0.6, edgecolors=\"white\", linewidth=2)\n \n# Add titles (main and on axis)\n    plt.yscale('log')\n    plt.xlabel(\"Life Expectancy\")\n    plt.ylabel(\"GDP per Capita\")\n    plt.title(\"Year: \"+str(i) )\n    plt.ylim(0,100000)\n    plt.xlim(30, 90)\n \n# Save it\n    filename='Gapminder_step'+str(i)+'.png'\n    plt.savefig(filename, dpi=96)\n    plt.gca()\n\n#Transformation in a GIF using Image Magick\n# Then use image magick (this is bash, not python)\n#convert -delay 80 Gapminder*.png animated_gapminder.gif","d104d2f9":"# libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n \nmy_dpi=96\n \n# I build a data set: 10 individuals and 5 variables for each\nfor i in range(0,10):\n    fig = plt.figure(figsize=(480\/my_dpi, 480\/my_dpi), dpi=my_dpi)\n    plt.scatter(i, i*i, s=40+i*600, alpha=0.5, edgecolors=\"grey\", linewidth=2)\n    plt.xlim(0, 10)\n    plt.ylim(0, 100)\n    filename='step'+str(i)+'.png'\n    plt.savefig(filename, dpi=96)\n    plt.gca()\n\n#Transformation in a GIF using Image Magick\n# Then use image magick (this is bash, not python)\n#convert -delay 80 Gapminder*.png animated_gapminder.gif","10cc3597":"# library and dataset\nfrom matplotlib import pyplot as plt\nimport pandas as pd\nimport numpy as np\n \n# Create data\ndf=pd.DataFrame({'x': range(1,101), 'y': np.random.randn(100)*15+range(1,101), 'z': (np.random.randn(100)*15+range(1,101))*2 })\n \n# plot with matplotlib\nplt.plot( 'x', 'y', data=df, marker='o', color='mediumvioletred')\nplt.show()\n \n# Just load seaborn and the chart looks better:\nimport seaborn as sns\nplt.plot( 'x', 'y', data=df, marker='o', color='mediumvioletred')\nplt.show()","5d4fefd3":"import seaborn as sns\nimport numpy as np\n \n# Data\ndata = np.random.normal(size=(20, 6)) + np.arange(6) \/ 2\n \n# Proposed themes: darkgrid, whitegrid, dark, white, and ticks\n \nsns.set_style(\"whitegrid\")\nsns.boxplot(data=data)\nplt.title(\"whitegrid\")\nplt.show()\n \nsns.set_style(\"darkgrid\")\nsns.boxplot(data=data);\nplt.title(\"darkgrid\")\nplt.show()\n \nsns.set_style(\"white\")\nsns.boxplot(data=data);\nplt.title(\"white\")\nplt.show()\n \nsns.set_style(\"dark\")\nsns.boxplot(data=data);\nplt.title(\"dark\")\nplt.show()\n \nsns.set_style(\"ticks\")\nsns.boxplot(data=data);\nplt.title(\"ticks\")\nplt.show()","8da744ec":"from mpl_toolkits.basemap import Basemap\nimport numpy as np\nimport matplotlib.pyplot as plt\n \n# A basic map\nm=Basemap(llcrnrlon=-100, llcrnrlat=20,urcrnrlon=30,urcrnrlat=70)\nm.drawmapboundary(fill_color='#A6CAE0', linewidth=0)\nm.fillcontinents(color='grey', alpha=0.7, lake_color='grey')\nm.drawcoastlines(linewidth=0.1, color=\"white\")\n \n# Add a connection between new york and London\nstartlat = 40.78; startlon = -73.98\narrlat = 51.53; arrlon = 0.08\nm.drawgreatcircle(startlon,startlat,arrlon,arrlat, linewidth=2, color='orange')","1af766e0":"from mpl_toolkits.basemap import Basemap\nimport numpy as np\nimport matplotlib.pyplot as plt\n \n# Make a data frame with the GPS of a few cities:\ndata = pd.DataFrame({\n'lat':[-58, 2, 145, 30.32, -4.03, -73.57, 36.82, -38.5],\n'lon':[-34, 49, -38, 59.93, 5.33, 45.52, -1.29, -12.97],\n'name':['Buenos Aires', 'Paris', 'melbourne', 'St Petersbourg', 'Abidjan', 'Montreal', 'Nairobi', 'Salvador']\n})\n \n# A basic map\nm=Basemap(llcrnrlon=-160, llcrnrlat=-75,urcrnrlon=160,urcrnrlat=80)\nm.drawmapboundary(fill_color='#A6CAE0', linewidth=0)\nm.fillcontinents(color='grey', alpha=0.7, lake_color='grey')\nm.drawcoastlines(linewidth=0.1, color=\"white\")\n \n# Add a marker per city of the data frame!\nm.plot(data['lat'], data['lon'], linestyle='none', marker=\"o\", markersize=16, alpha=0.6, c=\"orange\", markeredgecolor=\"black\", markeredgewidth=1)","29945262":"m=Basemap(lat_0=0, lon_0=0, projection='ortho' )\nm.drawmapboundary(fill_color='#A6CAE0')\nm.fillcontinents(color='grey', alpha=0.3)\nm","a4c16dd2":"m=Basemap(llcrnrlon=-180, llcrnrlat=-60,urcrnrlon=180,urcrnrlat=80, projection='merc')\nm.drawmapboundary(fill_color='#A6CAE0')\nm.fillcontinents(color='grey', alpha=0.3)\nm","d9e5aa73":"m=Basemap(lat_0=0, lon_0=0, projection='robin' )\nm.drawmapboundary(fill_color='#A6CAE0')\nm.fillcontinents(color='grey', alpha=0.3)\nm","24e66183":"#aeqd --> you HAVE to provide lon_0 and lat_0\nm=Basemap(lat_0=30, lon_0=30, projection='aeqd' )\nm.drawmapboundary(fill_color='#A6CAE0')\nm.fillcontinents(color='grey', alpha=0.3)\nm","47a1de21":"m=Basemap(lat_0=0, lon_0=0, projection='nsper' )\nm.drawmapboundary(fill_color='#A6CAE0')\nm.fillcontinents(color='grey', alpha=0.3)\nm","5519b7ba":"m=Basemap(llcrnrlon=-180, llcrnrlat=-60,urcrnrlon=180,urcrnrlat=80, projection='cyl' )\nm.drawmapboundary(fill_color='#A6CAE0')\nm.fillcontinents(color='grey', alpha=0.3)\nm","d67d9eb4":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\n \n# Initialize the map\nmap = Basemap(llcrnrlon=-160, llcrnrlat=-60,urcrnrlon=160,urcrnrlat=70)\n \n# Continent and countries!\nmap.drawmapboundary(fill_color='#A6CAE0')\nmap.fillcontinents(color='#e6b800',lake_color='#e6b800')\nmap.drawcountries(color=\"white\")\nplt.show()","b57382d1":"conda install -c conda-forge basemap-data-hires","4b65a32a":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\n \n# initialise\nmap = Basemap(llcrnrlon=-130, llcrnrlat=25, urcrnrlon=-65.,urcrnrlat=52.,resolution='i', lat_0 = 40., lon_0 = -80)\n \n# show counties\nmap.drawmapboundary(fill_color='#A6CAE0')\nmap.fillcontinents(color='#e6b800',lake_color='#A6CAE0')\nmap.drawcounties()\nplt.show()","dc1f7832":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\n \n# initialise\nmap = Basemap(llcrnrlon=-130, llcrnrlat=25, urcrnrlon=-65.,urcrnrlat=52.,resolution='i', lat_0 = 40., lon_0 = -80)\n \n# map states\nmap.drawmapboundary(fill_color='#A6CAE0')\nmap.fillcontinents(color='#e6b800',lake_color='#A6CAE0')\nmap.drawstates()\nmap.drawcountries()\nplt.show()","cf88163f":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\n \nm = Basemap(llcrnrlon=-10.5,llcrnrlat=33,urcrnrlon=10.,urcrnrlat=46., resolution='i', projection='cass', lat_0 = 39.5, lon_0 = 0.)\nm.bluemarble()\nplt.show()","2ac9f5fb":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\n \nm = Basemap(llcrnrlon=-10.5,llcrnrlat=33,urcrnrlon=10.,urcrnrlat=46., resolution='i', projection='cass', lat_0 = 39.5, lon_0 = 0.)\nm.shadedrelief()\nplt.show()","3bf1cf54":"m = Basemap(llcrnrlon=-10.5,llcrnrlat=33,urcrnrlon=10.,urcrnrlat=46., resolution='i', projection='cass', lat_0 = 39.5, lon_0 = 0.)\nm.etopo()","d12b2951":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\n \n# Control the position of the square. Give the coordinate of 2 corners\nm=Basemap(llcrnrlon=-100, llcrnrlat=-58,urcrnrlon=-30,urcrnrlat=15)\n \n# Draw the components of the map\nm.drawmapboundary(fill_color='#A6CAE0', linewidth=0)\nm.fillcontinents(color='brown', alpha=0.6, lake_color='grey')\nm.drawcoastlines(linewidth=0.1, color=\"white\")\nplt.show()","ad42f540":"# libraries\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\nimport matplotlib.pyplot as plt\n \n# initialise the map\nm=Basemap(llcrnrlon=-180, llcrnrlat=-60,urcrnrlon=180,urcrnrlat=70)\n \n# Control the background color\nm.drawmapboundary(fill_color='#A6CAE0', linewidth=0)\n \n# Fill the continent\nm.fillcontinents(color='grey', alpha=0.7, lake_color='grey')\n \n# Draw the coastline\nm.drawcoastlines(linewidth=0.1, color=\"white\")\n \n# to save if needed\n#plt.savefig('PNG\/#282_Custom_Basemap.png', dpi=110, bbox_inches='tight')\n \n# Show\nplt.show()","79507eeb":"from mpl_toolkits.basemap import Basemap\nimport numpy as np\nimport matplotlib.pyplot as plt\n \n# Always start witht the basemap function to initialize a map\nm=Basemap()\n \n# Then add element: draw coast line, map boundary, and fill continents:\nm.drawcoastlines()\nm.drawmapboundary()\nm.fillcontinents()\n \n# You can add rivers as well\n#m.drawrivers(color='#0000ff')\n \nplt.show()","37609a0e":"import pandas as pd\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt\n \n# Build a dataframe with your connections\ndf = pd.DataFrame({ 'from':['A', 'B', 'C','A'], 'to':['D', 'A', 'E','C'] })\ndf\n \n# Build your graph\nG=nx.from_pandas_edgelist(df, 'from', 'to', create_using=nx.Graph() )\n \n# Custom the nodes:\nfig = plt.figure()\nnx.draw(G, with_labels=True, node_color='skyblue', node_size=1500, edge_color='white')\nfig.set_facecolor(\"#00000F\")\n \n# If you want to save the figure to png:\n# plt.savefig('yourname.png', facecolor=fig.get_facecolor() )","3fb03180":"import pandas as pd\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt\n \n# I build a data set: 10 individuals and 5 variables for each\nind1=[5,10,3,4,8,10,12,1,9,4]\nind5=[1,1,13,4,18,5,2,11,3,8]\ndf = pd.DataFrame({ 'A':ind1, 'B':ind1 + np.random.randint(10, size=(10)) , 'C':ind1 + np.random.randint(10, size=(10)) , 'D':ind1 + np.random.randint(5, size=(10)) , 'E':ind1 + np.random.randint(5, size=(10)), 'F':ind5, 'G':ind5 + np.random.randint(5, size=(10)) , 'H':ind5 + np.random.randint(5, size=(10)), 'I':ind5 + np.random.randint(5, size=(10)), 'J':ind5 + np.random.randint(5, size=(10))})\ndf\n \n# Calculate the correlation between individuals. We have to transpose first, because the corr function calculate the pairwise correlations between columns.\ncorr = df.corr()\ncorr\n \n# Transform it in a links data frame (3 columns only):\nlinks = corr.stack().reset_index()\nlinks.columns = ['var1', 'var2','value']\nlinks\n \n# Keep only correlation over a threshold and remove self correlation (cor(A,A)=1)\nlinks_filtered=links.loc[ (links['value'] > 0.8) & (links['var1'] != links['var2']) ]\nlinks_filtered\n \n# Build your graph\nG=nx.from_pandas_edgelist(links_filtered, 'var1', 'var2')\n \n# Plot the network:\nnx.draw(G, with_labels=True, node_color='orange', node_size=400, edge_color='black', linewidths=1, font_size=15)","1c712e04":"# libraries\nimport pandas as pd\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt\n     \n# Build a dataframe with your connections\ndf = pd.DataFrame({ 'from':['A', 'B', 'C','A'], 'to':['D', 'A', 'E','C'], 'value':[1, 10, 5, 5]})\ndf\n     \n# Build your graph\nG=nx.from_pandas_edgelist(df, 'from', 'to', create_using=nx.Graph() )\n     \n# Custom the nodes:\nnx.draw(G, with_labels=True, node_color='skyblue', node_size=1500, edge_color=df['value'], width=10.0, edge_cmap=plt.cm.Blues)","87bb007a":"import pandas as pd\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt\n \n# Build a dataframe with your connections\ndf = pd.DataFrame({ 'from':['A', 'B', 'C','A'], 'to':['D', 'A', 'E','C'], 'value':['typeA', 'typeA', 'typeB', 'typeB']})\ndf\n \n# And I need to transform my categorical column in a numerical value typeA->1, typeB->2...\ndf['value']=pd.Categorical(df['value'])\ndf['value'].cat.codes\n \n# Build your graph\nG=nx.from_pandas_edgelist(df, 'from', 'to', create_using=nx.Graph() )\n \n# Custom the nodes:\nnx.draw(G, with_labels=True, node_color='skyblue', node_size=1500, edge_color=df['value'].cat.codes, width=10.0, edge_cmap=plt.cm.Set2)","9b7c88d5":"# libraries\nimport pandas as pd\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt\n \n# Build a dataframe with your connections\ndf = pd.DataFrame({ 'from':['A', 'B', 'C','A','E','F','E','G','G','D','F'], 'to':['D', 'A', 'E','C','A','F','G','D','B','G','C']})\ndf\n \n# Build your graph\nG=nx.from_pandas_edgelist(df, 'from', 'to')\n \n# Fruchterman Reingold\nnx.draw(G, with_labels=True, node_size=1500, node_color=\"skyblue\", pos=nx.fruchterman_reingold_layout(G))\nplt.title(\"fruchterman_reingold\")\nplt.show()\n \n# Circular\nnx.draw(G, with_labels=True, node_size=1500, node_color=\"skyblue\", pos=nx.circular_layout(G))\nplt.title(\"circular\")\nplt.show()\n\n# Random\nnx.draw(G, with_labels=True, node_size=1500, node_color=\"skyblue\", pos=nx.random_layout(G))\nplt.title(\"random\")\nplt.show()\n \n# Spectral\nnx.draw(G, with_labels=True, node_size=1500, node_color=\"skyblue\", pos=nx.spectral_layout(G))\nplt.title(\"spectral\")\nplt.show()\n \n# Spring\nnx.draw(G, with_labels=True, node_size=1500, node_color=\"skyblue\", pos=nx.spring_layout(G))\nplt.title(\"spring\")\nplt.show()","ec56e37b":"import pandas as pd\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt\n \n# ------- DIRECTED\n \n# Build a dataframe with your connections\n# This time a pair can appear 2 times, in one side or in the other!\ndf = pd.DataFrame({ 'from':['D', 'A', 'B', 'C','A'], 'to':['A', 'D', 'A', 'E','C']})\ndf\n \n# Build your graph. Note that we use the DiGraph function to create the graph!\nG=nx.from_pandas_edgelist(df, 'from', 'to', create_using=nx.DiGraph() )\n \n# Make the graph\nnx.draw(G, with_labels=True, node_size=1500, alpha=0.3, arrows=True)\nplt.title(\"Directed\")\nplt.show()\n#&nbsp;\n \n# ------- UNDIRECTED\n \n# Build a dataframe with your connections\n# This time a pair can appear 2 times, in one side or in the other!\ndf = pd.DataFrame({ 'from':['D', 'A', 'B', 'C','A'], 'to':['A', 'D', 'A', 'E','C']})\ndf\n \n# Build your graph. Note that we use the Graph function to create the graph!\nG=nx.from_pandas_edgelist(df, 'from', 'to', create_using=nx.Graph() )\n \nnx.draw(G, with_labels=True, node_size=1500, alpha=0.3, arrows=True)\nplt.title(\"UN-Directed\")\nplt.show()","0e2a2fd6":"import pandas as pd\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt\n \n# Build a dataframe with your connections\ndf = pd.DataFrame({ 'from':['A', 'B', 'C','A'], 'to':['D', 'A', 'E','C']})\ndf\n \n# Build your graph\nG=nx.from_pandas_edgelist(df, 'from', 'to')\n \n# Graph with Custom nodes:\nnx.draw(G, with_labels=True, node_size=1500, node_color=\"skyblue\", node_shape=\"s\", alpha=0.5, linewidths=40)\nplt.show()","f2b8ff1d":"import pandas as pd\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt\n \n# Build a dataframe with your connections\ndf = pd.DataFrame({ 'from':['A', 'B', 'C','A'], 'to':['D', 'A', 'E','C']})\ndf\n \n# Build your graph\nG=nx.from_pandas_edgelist(df, 'from', 'to')\n \n# Custom the edges:\nnx.draw(G, with_labels=True, node_size=1500, font_size=25, font_color=\"yellow\", font_weight=\"bold\")","a0381847":"import pandas as pd\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt\n \n# Build a dataframe with your connections\ndf = pd.DataFrame({ 'from':['A', 'B', 'C','A'], 'to':['D', 'A', 'E','C']})\ndf\n \n# Build your graph\nG=nx.from_pandas_edgelist(df, 'from', 'to')\n \n# Chart with Custom edges:\nnx.draw(G, with_labels=True, width=5, edge_color=\"skyblue\", style=\"solid\")","c9af28a4":"import pandas as pd\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt\n \n# Build a dataframe with your connections\ndf = pd.DataFrame({ 'from':['A', 'B', 'C','A'], 'to':['D', 'A', 'E','C']})\ndf\n \n# Build your graph\nG=nx.from_pandas_edgelist(df, 'from', 'to')\n \n# All together we can do something fancy\nnx.draw(G, with_labels=True, node_size=1500, node_color=\"skyblue\", node_shape=\"o\", alpha=0.5, linewidths=4, font_size=25, font_color=\"grey\", font_weight=\"bold\", width=2, edge_color=\"grey\")","6a3726a0":"import pandas as pd\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt\n \n# Build a dataframe with 4 connections\ndf = pd.DataFrame({ 'from':['A', 'B', 'C','A'], 'to':['D', 'A', 'E','C']})\ndf\n \n# Build your graph\nG=nx.from_pandas_edgelist(df, 'from', 'to')\n \n# Plot it\nnx.draw(G, with_labels=True)\nplt.show()","077c1ff4":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.sankey import Sankey\n \n# basic sankey chart\nSankey(flows=[0.25, 0.15, 0.60, -0.20, -0.15, -0.05, -0.50, -0.10], labels=['', '', '', 'First', 'Second', 'Third', 'Fourth', 'Fifth'], orientations=[-1, 1, 0, 1, 1, 1, 0,-1]).finish()\nplt.title(\"Sankey diagram with default settings\")","ed921a70":"import sys\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Basic chart\ndf=pd.DataFrame({'x': range(1,101), 'y': np.random.randn(100)*15+range(1,101) })\nplt.plot( 'x', 'y', data=df, linestyle='none', marker='o')\n \n# Annotate with text + Arrow\nplt.annotate(\n# Label and coordinate\n'This point is interesting!', xy=(25, 50), xytext=(0, 80),\n \n# Custom arrow\narrowprops=dict(facecolor='black', shrink=0.05)\n)\nplt.show()","e215fc3e":"import matplotlib.patches as patches\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Data\ndf=pd.DataFrame({'x': range(1,101), 'y': np.random.randn(100)*15+range(1,101) })\n \n# Plot\nfig1 = plt.figure()\nax1 = fig1.add_subplot(111)\nax1.plot( 'x', 'y', data=df, linestyle='none', marker='o')\n \n# Add rectangle\nax1.add_patch(\npatches.Rectangle(\n(20, 25), # (x,y)\n50, # width\n50, # height\n# You can add rotation as well with 'angle'\nalpha=0.3, facecolor=\"red\", edgecolor=\"black\", linewidth=3, linestyle='solid'\n)\n)","8701a1ce":"import matplotlib.patches as patches\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Data\ndf=pd.DataFrame({'x': range(1,101), 'y': np.random.randn(100)*15+range(1,101) })\n \n# Plot\nfig1 = plt.figure()\nax1 = fig1.add_subplot(111)\nax1.plot( 'x', 'y', data=df, linestyle='none', marker='o')\n \n# Annotation\nax1.add_patch(\npatches.Circle(\n(40, 35),           # (x,y)\n30,                    # radius\nalpha=0.3, facecolor=\"green\", edgecolor=\"black\", linewidth=1, linestyle='solid'\n)\n)","5e89b710":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Basic chart\ndf=pd.DataFrame({'x': range(1,101), 'y': np.random.randn(100)*15+range(1,101) })\nplt.plot( 'x', 'y', data=df, linestyle='none', marker='o')\n \n# Annotation\nplt.plot([80, 40], [30, 90], color=\"skyblue\", lw=5, linestyle='solid', label=\"_not in legend\")","41bb3501":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Plot\ndf=pd.DataFrame({'x': range(1,101), 'y': np.random.randn(100)*15+range(1,101) })\nplt.plot( 'x', 'y', data=df, linestyle='none', marker='o')\n \n# Annotation\nplt.axvline(40, color='r')\nplt.axhline(40, color='green')","f7154daf":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# plot\ndf=pd.DataFrame({'x': range(1,101), 'y': np.random.randn(100)*15+range(1,101) })\nplt.plot( 'x', 'y', data=df, linestyle='none', marker='o')\n \n# Annotation\nplt.text(40, 00, r'equation: $\\sum_{i=0}^\\infty x_i$', fontsize=20)","0ab9893b":"import matplotlib.patches as patches\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Data\ndf=pd.DataFrame({'x': range(1,101), 'y': np.random.randn(100)*15+range(1,101) })\n \n# Plot\nfig1 = plt.figure()\nax1 = fig1.add_subplot(111)\nax1.plot( 'x', 'y', data=df, linestyle='none', marker='o')\nax1.add_patch(\npatches.Ellipse(\n(40, 35), # (x,y)\n30, # width\n100, # height\n45, # radius\nalpha=0.3, facecolor=\"green\", edgecolor=\"black\", linewidth=1, linestyle='solid'\n)\n)","a000bc36":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\nimport pandas as pd\n \n# Data\nr = [0,1,2,3,4]\nraw_data = {'greenBars': [20, 1.5, 7, 10, 5], 'orangeBars': [5, 15, 5, 10, 15],'blueBars': [2, 15, 18, 5, 10]}\ndf = pd.DataFrame(raw_data)\n \n# From raw value to percentage\ntotals = [i+j+k for i,j,k in zip(df['greenBars'], df['orangeBars'], df['blueBars'])]\ngreenBars = [i \/ j * 100 for i,j in zip(df['greenBars'], totals)]\norangeBars = [i \/ j * 100 for i,j in zip(df['orangeBars'], totals)]\nblueBars = [i \/ j * 100 for i,j in zip(df['blueBars'], totals)]\n \n# plot\nbarWidth = 0.85\nnames = ('A','B','C','D','E')\n# Create green Bars\nplt.bar(r, greenBars, color='#b5ffb9', edgecolor='white', width=barWidth)\n# Create orange Bars\nplt.bar(r, orangeBars, bottom=greenBars, color='#f9bc86', edgecolor='white', width=barWidth)\n# Create blue Bars\nplt.bar(r, blueBars, bottom=[i+j for i,j in zip(greenBars, orangeBars)], color='#a3acff', edgecolor='white', width=barWidth)\n \n# Custom x axis\nplt.xticks(r, names)\nplt.xlabel(\"group\")\n \n# Show graphic\nplt.show()","5babef80":"# Create green Bars\nplt.bar(r, greenBars, color='#b5ffb9', edgecolor='white', width=barWidth, label=\"group A\")\n# Create orange Bars\nplt.bar(r, orangeBars, bottom=greenBars, color='#f9bc86', edgecolor='white', width=barWidth, label=\"group B\")\n# Create blue Bars\nplt.bar(r, blueBars, bottom=[i+j for i,j in zip(greenBars, orangeBars)], color='#a3acff', edgecolor='white', width=barWidth, label=\"group C\")\n \n# Custom x axis\nplt.xticks(r, names)\nplt.xlabel(\"group\")\n \n# Add a legend\nplt.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1)\n \n# Show graphic\nplt.show()","aa9091f9":"# libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\nimport pandas as pd\n \n# y-axis in bold\nrc('font', weight='bold')\n \n# Values of each group\nbars1 = [12, 28, 1, 8, 22]\nbars2 = [28, 7, 16, 4, 10]\nbars3 = [25, 3, 23, 25, 17]\n \n# Heights of bars1 + bars2\nbars = np.add(bars1, bars2).tolist()\n \n# The position of the bars on the x-axis\nr = [0,1,2,3,4]\n \n# Names of group and bar width\nnames = ['A','B','C','D','E']\nbarWidth = 1\n \n# Create brown bars\nplt.bar(r, bars1, color='#7f6d5f', edgecolor='white', width=barWidth)\n# Create green bars (middle), on top of the firs ones\nplt.bar(r, bars2, bottom=bars1, color='#557f2d', edgecolor='white', width=barWidth)\n# Create green bars (top)\nplt.bar(r, bars3, bottom=bars, color='#2d7f5e', edgecolor='white', width=barWidth)\n \n# Custom X axis\nplt.xticks(r, names, fontweight='bold')\nplt.xlabel(\"group\")\n \n# Show graphic\nplt.show()","1ac1f83c":"import numpy as np\nimport matplotlib.pyplot as plt\n \n# set width of bar\nbarWidth = 0.25\n \n# set height of bar\nbars1 = [12, 30, 1, 8, 22]\nbars2 = [28, 6, 16, 5, 10]\nbars3 = [29, 3, 24, 25, 17]\n \n# Set position of bar on X axis\nr1 = np.arange(len(bars1))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\n \n# Make the plot\nplt.bar(r1, bars1, color='#7f6d5f', width=barWidth, edgecolor='white', label='var1')\nplt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='white', label='var2')\nplt.bar(r3, bars3, color='#2d7f5e', width=barWidth, edgecolor='white', label='var3')\n \n# Add xticks on the middle of the group bars\nplt.xlabel('group', fontweight='bold')\nplt.xticks([r + barWidth for r in range(len(bars1))], ['A', 'B', 'C', 'D', 'E'])\n \n# Create legend & Show graphic\nplt.legend()\nplt.show()","8650c241":"# library\nimport matplotlib.pyplot as plt\n \n# Create bars\nbarWidth = 0.9\nbars1 = [3, 3, 1]\nbars2 = [4, 2, 3]\nbars3 = [4, 6, 7, 10, 4, 4]\nbars4 = bars1 + bars2 + bars3\n \n# The X position of bars\nr1 = [1,5,9]\nr2 = [2,6,10]\nr3 = [3,4,7,8,11,12]\nr4 = r1 + r2 + r3\n \n# Create barplot\nplt.bar(r1, bars1, width = barWidth, color = (0.3,0.1,0.4,0.6), label='Alone')\nplt.bar(r2, bars2, width = barWidth, color = (0.3,0.5,0.4,0.6), label='With Himself')\nplt.bar(r3, bars3, width = barWidth, color = (0.3,0.9,0.4,0.6), label='With other genotype')\n# Note: the barplot could be created easily. See the barplot section for other examples.\n \n# Create legend\nplt.legend()\n \n# Text below each barplot with a rotation at 90\u00b0\nplt.xticks([r + barWidth for r in range(len(r4))], ['DD', 'with himself', 'with DC', 'with Silur', 'DC', 'with himself', 'with DD', 'with Silur', 'Silur', 'with himself', 'with DD', 'with DC'], rotation=90)\n \n# Create labels\nlabel = ['n = 6', 'n = 25', 'n = 13', 'n = 36', 'n = 30', 'n = 11', 'n = 16', 'n = 37', 'n = 14', 'n = 4', 'n = 31', 'n = 34']\n \n# Text on the top of each barplot\nfor i in range(len(r4)):\n    plt.text(x = r4[i]-0.5 , y = bars4[i]+0.1, s = label[i], size = 6)\n \n# Adjust the margins\n    plt.subplots_adjust(bottom= 0.2, top = 0.98)\n \n# Show graphic\n    plt.show()","8ef970a2":"import numpy as np\nimport matplotlib.pyplot as plt\n \n# width of the bars\nbarWidth = 0.3\n \n# Choose the height of the blue bars\nbars1 = [10, 9, 2]\n \n# Choose the height of the cyan bars\nbars2 = [10.8, 9.5, 4.5]\n \n# Choose the height of the error bars (bars1)\nyer1 = [0.5, 0.4, 0.5]\n \n# Choose the height of the error bars (bars2)\nyer2 = [1, 0.7, 1]\n \n# The x position of bars\nr1 = np.arange(len(bars1))\nr2 = [x + barWidth for x in r1]\n \n# Create blue bars\nplt.bar(r1, bars1, width = barWidth, color = 'blue', edgecolor = 'black', yerr=yer1, capsize=7, label='poacee')\n \n# Create cyan bars\nplt.bar(r2, bars2, width = barWidth, color = 'cyan', edgecolor = 'black', yerr=yer2, capsize=7, label='sorgho')\n \n# general layout\nplt.xticks([r + barWidth for r in range(len(bars1))], ['cond_A', 'cond_B', 'cond_C'])\nplt.ylabel('height')\nplt.legend()\n \n# Show graphic\nplt.show()","a626cfbf":"# libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n \n# Choose the height of the bars\nheight = [3, 12, 5, 18, 45]\n \n# Choose the names of the bars\nbars = ('group1', 'group2', 'group3', 'group4', 'group5')\ny_pos = np.arange(len(bars))\n \n# Create bars\nplt.bar(y_pos, height)\n \n# Create names on the x-axis\nplt.xticks(y_pos, bars, color='orange')\nplt.yticks(color='orange')\n \n# Show graphic\nplt.show()","38788568":"import numpy as np\nimport matplotlib.pyplot as plt\n \n# Create data\nheight = [3, 12, 5, 18, 45]\nbars = ('A','B','C','D','E')\n \n# Create bars\nplt.bar(y_pos, height)\n \n# Create names on the x-axis\nplt.xticks(y_pos, bars)\nplt.xlabel('category', fontweight='bold', color = 'orange', fontsize='18')\n \n# Show graphic\nplt.show()","e1592e5f":"import numpy as np\nimport matplotlib.pyplot as plt\n \n# Create data\nheight = [3, 12, 5, 18, 45]\nbars = (\"very long group name 1\",\"very long group name 2\",\"very long group name 3\",\"very long group name 4\",\"very long group name 5\")\n \n# Create bars\nplt.bar(y_pos, height)\n \n# Rotation of the bars names\nplt.xticks(y_pos, bars, rotation=90)\n \n# Custom the subplot layout\nplt.subplots_adjust(bottom=0.4, top=0.99)\n \n# Show graphic\nplt.show()","44e2a007":"!pip install hiplot","d0683015":"import hiplot as hip\ndata = [{'dropout':0.1, 'lr': 0.001, 'loss': 10.0, 'optimizer': 'SGD'},\n        {'dropout':0.15, 'lr': 0.01, 'loss': 3.5, 'optimizer': 'Adam'},\n        {'dropout':0.3, 'lr': 0.1, 'loss': 4.5, 'optimizer': 'Adam'}]\nhip.Experiment.from_iterable(data).display()","648d7099":"## circle","2104900f":"### Countries","1ce4dd59":"## map with markers","4cda16ac":"## with heat map","0e939e37":"## Network layout possibilities","266ad01d":"## rectangle","c0ff1705":"## merc","b5a7c6d6":"### categorical","2c351ba9":"# 8. Gapminder Animation","a8dc5f93":"## Custom appearance of basemap","7fee73ec":"## Add confidence interval on barplot","515edc0c":"## Filtering","b1756439":"## Hexbin plot","8aaa31ea":"## Customised dendrogram","f72172ad":"## 2D density","a30d56c2":"## Distribution","732ac320":"## Basic map with basemap","5d9066c1":"## Basic Network from pandas data frame","e9b515be":"### Nodes","0d286285":"## robin","9f0ed064":"### Labels","300c83a3":"### Etopo","ff6c73e0":"## math","ffbbc3a5":"# 12. network chart","d7ec4463":"## Stacked barplot ","3de3816a":"## background layer","63b3ee67":"### States","a1573962":"# 3.Line Plot ","7e63d926":"## Radar chart with several individuals ","81acd1f6":"# 11. Map","ac7b5942":"### Shaderelief","87000d48":"# 7. Correlogram","f02656dc":"### axis name","96ec7eaf":"## Faceting","241ab571":"## Network from correlation matrix","b4a89d3c":"## text","abf9622f":"## Set bounding box in basemap","040f2192":"## Small multiples for line chart","beeb8b77":"## Dot Size","23a35f2e":"# 15. Bar Plot","299f94aa":"### Bluemarble","6cfbb25e":"## ellipse","5ae8a0e2":"##  Custom barplot layout","19bda9ff":"## Highlight a line in line plot","8343d3b9":"## Percent stacked barplot","2caf8332":"## ortho","1b7d1b95":"## Grouped barplot","abf64c79":"## Directed or Undirected network","f90f86f7":"#  10. Seaborn Themes","fb568547":"# To Be Continued...","864bdc68":"### Add color bar","897303f6":"## segment","e080aabd":"# 13. Sankey diagram with Matplotlib","7a560705":"### All","cf3d7352":"### bottom margin","35e7f29c":"### Counties","7add5c4b":"# What is new:\n* HiPlot - High dimensional Interactive Plotting","8a2bfd0d":"# 5. Radar","c31dd115":"## 3D","4a601f6a":"# 4. Dendrogram","8a4ba83d":"### labels","2fee8859":"## faceting","ccfcb205":"### Leaf Label","4f4421f2":"## Barplot with number of observation","e5b650bb":"# 2. How to avoid overplotting with python","1bee7828":"## Correlation","d98e87eb":"# HiPlot - High dimensional Interactive Plotting","acfe2a9e":"## nsper","ff072f32":"## Spaghetti plot","f72bba71":"## aeqd","253688f0":"## 2D density plot:","1a25df27":"## Sampling","dcef1c34":"## cyl","75582efa":"# 9. Seaborn style on matplotlib plot","81ac2c7f":"## vertical line","1b75c484":"### Numerical","36b37b33":"# 1. Box Plot","6ba26db6":"## with heatmap and coloured leaves","4c176565":"## transparency","0339a672":"## Map colour to the edges of a Network","9ed0ec49":"## Boundaries provided in Basemap","867c8449":"### of cluster","e8aa3fb9":"## Grouping","d49de1fc":"# If you like This Notebook please Upvote :)","acf9d01e":"## Jitter","f1bc2c72":"## Draw a connection line with great circle","47c77908":"### truncate","f801e840":"### color","5dd9a7b7":"### Edges","63f709d2":"# 6. Density plot","e65ba730":"# 14. Annotate matplotlib chart","e27cff1d":"## Custom NetworkX graph appearance"}}