{"cell_type":{"67d7588b":"code","7aba48ec":"code","5ec36397":"code","479d9509":"code","3178364b":"code","bd00a516":"code","61917e81":"code","af994cc0":"code","fa45397c":"code","419955a3":"code","5ad6b742":"code","b23a8c11":"code","8ddc34b2":"code","8a22c8db":"code","560c663e":"code","8a5145b5":"code","394ddc7a":"code","95f730b8":"code","63c17769":"code","57af9197":"code","cd454fac":"code","9b365ae6":"code","fb733955":"code","9819cf51":"code","fe48b95a":"code","4beb6e38":"code","b8909810":"code","7a7c3530":"code","9c3fdbb1":"code","0af523da":"code","54ae5a90":"code","23fe5f59":"code","7cb1566b":"code","e29e87ae":"code","cd6c38f4":"code","77e2ac64":"code","de47ec0a":"code","3fb8112c":"code","4fcb4c46":"code","5f1ab918":"code","bf90365c":"code","3f4b18a4":"code","7e33f873":"code","9df106c7":"code","5d38ca03":"code","ca5d70b7":"code","f715123d":"code","d6b30fbb":"code","a7c1f67a":"code","63de9a3b":"code","ad5c0890":"code","fd508d3d":"code","73187954":"code","2bb544d9":"markdown","0df89e59":"markdown","9c89c360":"markdown","b2d54c86":"markdown","d9d144f3":"markdown","20bb65be":"markdown"},"source":{"67d7588b":"#importing libraries\nimport pandas as pd\n\nimport numpy as np","7aba48ec":"data=pd.read_csv(\"\/kaggle\/input\/bank-customers\/Churn Modeling.csv\")","5ec36397":"data","479d9509":"data.columns","3178364b":"data.info()","bd00a516":"data.isnull().sum()","61917e81":"data.drop(['RowNumber','CustomerId','Surname'],1,inplace=True)","af994cc0":"#ploting\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(80,50))\nsns.barplot(x=data.CreditScore.value_counts(),y=data.CreditScore)","fa45397c":"sns.countplot(data.Geography.values)","419955a3":"#Binary encoding\ndata['Male'] = data['Gender'].map( {'male':1, 'female':0} )\ndata['Gender']","5ad6b742":"data=pd.get_dummies(data, columns=['Gender'])","b23a8c11":"data.drop(['Male'],1,inplace=True)","8ddc34b2":"data.Geography=pd.Categorical(data.Geography)\ndata.Geography=data.Geography.cat.codes","8a22c8db":"data","560c663e":"#ML Algorithims","8a5145b5":"#1.train test split\nfrom sklearn.model_selection import train_test_split\nxdata=data.drop(['CreditScore'],1)\n\n\ncreditscore=data['CreditScore']\n","394ddc7a":"x = xdata\ny = np.array(creditscore)\n","95f730b8":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 42)","63c17769":"print(\"Shape of X_train: \",X_train.shape)\nprint(\"Shape of X_test: \", X_test.shape)\nprint(\"Shape of y_train: \",y_train.shape)\nprint(\"Shape of y_test\",y_test.shape)","57af9197":"#2 Linear regresion\nfrom sklearn.linear_model import LinearRegression\nLR = LinearRegression()\nLR.fit(X_train, y_train)","cd454fac":"from sklearn.metrics import r2_score\nfrom sklearn.model_selection import cross_val_score\n\ncross_val=cross_val_score(estimator = LR, X = X_train, y = y_train, cv = 10)\n\n# Predicting R2 Score the Train set results\npredict_tr = LR.predict(X_train)\nr2_score_train = r2_score(y_train, predict_tr)\n","9b365ae6":"# Predicting R2 Score the Test set results\npredict_te =LR.predict(X_test)\nr2_score_test = r2_score(y_test,predict_te)\n","fb733955":"# Predicting RMSE the Test set results\nfrom sklearn.metrics import mean_squared_error\nrmse_linear = (np.sqrt(mean_squared_error(y_test, predict_te)))\nprint(\"CV: \", cross_val.mean())\nprint('R2_score (train): ', r2_score_train)\nprint('R2_score (test): ', r2_score_test)\nprint(\"RMSE: \", rmse_linear)","9819cf51":"LR.fit(X_test,y_test)","fe48b95a":"plt.scatter(predict_te,y_test)","4beb6e38":"predict_te=LR.predict(X_test)","b8909810":"plt.scatter(predict_te,y_test)","7a7c3530":"from sklearn import metrics\nprint(metrics.mean_absolute_error(y_test,predict_te))\nprint(metrics.mean_absolute_error(y_train,predict_tr))","9c3fdbb1":"print(np.sqrt(metrics.mean_squared_error(y_test,predict_te)))","0af523da":"print(np.sqrt(metrics.mean_squared_error(y_train,predict_tr)))\n","54ae5a90":"from sklearn.metrics import r2_score,mean_squared_error","23fe5f59":"r2_test=r2_score(predict_te,y_test)\nr2_test","7cb1566b":"r2_train=r2_score(predict_tr,y_train)","e29e87ae":"cv_LR = cross_val_score(estimator = LR, X = X_train, y = y_train, cv = 10)","cd6c38f4":"print(\"Cross val score:\", cv_LR.mean())\nprint(\"MAE:\", metrics.mean_absolute_error(y_test, predict_te))\nprint('MSE:', metrics.mean_squared_error(y_test, predict_te))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predict_te)))","77e2ac64":"print(\"MAE:\", metrics.mean_absolute_error(y_train, predict_tr))\nprint('MSE:', metrics.mean_squared_error(y_train, predict_tr))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_train, predict_tr)))","de47ec0a":"from sklearn.preprocessing import PolynomialFeatures\nmodel_poly = PolynomialFeatures(degree = 2)\nX_poly = model_poly.fit_transform(X_train)\nmodel_poly.fit(X_poly, y_train)\nreg_poly2 = LinearRegression()\nreg_poly2.fit(X_poly, y_train)","3fb8112c":"from sklearn.metrics import r2_score\n\n# Predicting Cross Validation Score the Test set results\ncv_poly2 = cross_val_score(estimator = reg_poly2, X = X_train, y = y_train, cv = 10)\n\n# Predicting R2 Score the Train set results\ny_pred_poly2_train = reg_poly2.predict(model_poly.fit_transform(X_train))\nr2_score_poly2_train = r2_score(y_train, y_pred_poly2_train)\n\n# Predicting R2 Score the Test set results\ny_pred_poly2_test = reg_poly2.predict(model_poly.fit_transform(X_test))\nr2_score_poly2_test = r2_score(y_test, y_pred_poly2_test)\n\n# Predicting RMSE the Test set results\nrmse_poly2 = (np.sqrt(mean_squared_error(y_test, y_pred_poly2_test)))\nprint('CV: ', cv_poly2.mean())\nprint('R2_score (train): ', r2_score_poly2_train)\nprint('R2_score (test): ', r2_score_poly2_test)\nprint(\"RMSE: \", rmse_poly2)","4fcb4c46":"from sklearn.linear_model import Ridge\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import PolynomialFeatures\n\nsteps = [\n    ('scalar', StandardScaler()),\n    ('poly', PolynomialFeatures(degree=3)),\n    ('model', Ridge(alpha=1777, fit_intercept=True))\n]\n\nridge_pipe = Pipeline(steps)\nridge_pipe.fit(X_train, y_train)","5f1ab918":"from sklearn.metrics import r2_score\n\n# Predicting Cross Validation Score the Test set results\ncv_ridge = cross_val_score(estimator = ridge_pipe, X = X_train, y = y_train.ravel(), cv = 10)\n\n# Predicting R2 Score the Train set results\ny_pred_ridge_train = ridge_pipe.predict(X_train)\nr2_score_ridge_train = r2_score(y_train, y_pred_ridge_train)\n\n# Predicting R2 Score the Test set results\ny_pred_ridge_test = ridge_pipe.predict(X_test)\nr2_score_ridge_test = r2_score(y_test, y_pred_ridge_test)\n\n# Predicting RMSE the Test set results\nrmse_ridge = (np.sqrt(mean_squared_error(y_test, y_pred_ridge_test)))\nprint('CV: ', cv_ridge.mean())\nprint('R2_score (train): ', r2_score_ridge_train)\nprint('R2_score (test): ', r2_score_ridge_test)\nprint(\"RMSE: \", rmse_ridge)","bf90365c":"from sklearn.linear_model import Lasso\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import PolynomialFeatures\n\n\nsteps = [\n    ('scalar', StandardScaler()),\n    ('poly', PolynomialFeatures(degree=3)),\n    ('model', Lasso(alpha=2.36, fit_intercept=True, tol = 0.0199, max_iter=2000))\n]\n\nlasso_pipe = Pipeline(steps)\nlasso_pipe.fit(X_train, y_train)","3f4b18a4":"from sklearn.metrics import r2_score\n\n# Predicting Cross Validation Score\ncv_lasso = cross_val_score(estimator = lasso_pipe, X = X_train, y = y_train, cv = 10)\n\n# Predicting R2 Score the Test set results\ny_pred_lasso_train = lasso_pipe.predict(X_train)\nr2_score_lasso_train = r2_score(y_train, y_pred_lasso_train)\n\n# Predicting R2 Score the Test set results\ny_pred_lasso_test = lasso_pipe.predict(X_test)\nr2_score_lasso_test = r2_score(y_test, y_pred_lasso_test)\n\n# Predicting RMSE the Test set results\nrmse_lasso = (np.sqrt(mean_squared_error(y_test, y_pred_lasso_test)))\nprint('CV: ', cv_lasso.mean())\nprint('R2_score (train): ', r2_score_lasso_train)\nprint('R2_score (test): ', r2_score_lasso_test)\nprint(\"RMSE: \", rmse_lasso)\n","7e33f873":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nsc_y = StandardScaler()\nX_scaled = sc_X.fit_transform(X_train)\ny_scaled = sc_y.fit_transform(y_train.reshape(-1,1))\n","9df106c7":"from sklearn.svm import SVR\nregressor_svr = SVR(kernel = 'rbf', gamma = 'scale')\nregressor_svr.fit(X_scaled, y_scaled.ravel())","5d38ca03":"from sklearn.metrics import r2_score\n\n# Predicting Cross Validation Score\ncv_svr = cross_val_score(estimator = regressor_svr, X = X_scaled, y = y_scaled.ravel(), cv = 10)\n\n# Predicting R2 Score the Train set results\ny_pred_svr_train = sc_y.inverse_transform(regressor_svr.predict(sc_X.transform(X_train)))\nr2_score_svr_train = r2_score(y_train, y_pred_svr_train)\n\n# Predicting R2 Score the Test set results\ny_pred_svr_test = sc_y.inverse_transform(regressor_svr.predict(sc_X.transform(X_test)))\nr2_score_svr_test = r2_score(y_test, y_pred_svr_test)\n\n# Predicting RMSE the Test set results\nrmse_svr = (np.sqrt(mean_squared_error(y_test, y_pred_svr_test)))\nprint('CV: ', cv_svr.mean())\nprint('R2_score (train): ', r2_score_svr_train)\nprint('R2_score (test): ', r2_score_svr_test)\nprint(\"RMSE: \", rmse_svr)","ca5d70b7":"from sklearn.tree import DecisionTreeRegressor\nregressor_dt = DecisionTreeRegressor(random_state = 0)\nregressor_dt.fit(X_train, y_train)","f715123d":"from sklearn.metrics import r2_score\n\n# Predicting Cross Validation Score\ncv_dt = cross_val_score(estimator = regressor_dt, X = X_train, y = y_train, cv = 10)\n\n# Predicting R2 Score the Train set results\ny_pred_dt_train = regressor_dt.predict(X_train)\nr2_score_dt_train = r2_score(y_train, y_pred_dt_train)\n\n# Predicting R2 Score the Test set results\ny_pred_dt_test = regressor_dt.predict(X_test)\nr2_score_dt_test = r2_score(y_test, y_pred_dt_test)\n\n# Predicting RMSE the Test set results\nrmse_dt = (np.sqrt(mean_squared_error(y_test, y_pred_dt_test)))\nprint('CV: ', cv_dt.mean())\nprint('R2_score (train): ', r2_score_dt_train)\nprint('R2_score (test): ', r2_score_dt_test)\nfrom sklearn.ensemble import RandomForestRegressor\nregressor_rf = RandomForestRegressor(n_estimators = 1200, random_state = 0)\nregressor_rf.fit(X_train, y_train.ravel())\nprint(\"RMSE: \", rmse_dt)","d6b30fbb":"from sklearn.ensemble import RandomForestRegressor\nregressor_rf = RandomForestRegressor(n_estimators = 1200, random_state = 0)\nregressor_rf.fit(X_train, y_train.ravel())","a7c1f67a":"\n\n\n\n\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import cross_val_score\n\n# Predicting Cross Validation Score\ncv_rf = cross_val_score(estimator = regressor_rf, X = X_scaled, y = y_train.ravel(), cv = 10)\n\n# Predicting R2 Score the Train set results\ny_pred_rf_train = regressor_rf.predict(X_train)\nr2_score_rf_train = r2_score(y_train, y_pred_rf_train)\n\n# Predicting R2 Score the Test set results\ny_pred_rf_test = regressor_rf.predict(X_test)\nr2_score_rf_test = r2_score(y_test, y_pred_rf_test)\n\n# Predicting RMSE the Test set results\nrmse_rf = (np.sqrt(mean_squared_error(y_test, y_pred_rf_test)))\nprint('CV: ', cv_rf.mean())\nprint('R2_score (train): ', r2_score_rf_train)\nprint('R2_score (test): ', r2_score_rf_test)\nprint(\"RMSE: \", rmse_rf)","63de9a3b":"models = [('Linear Regression', rmse_linear, r2_train, r2_test, cv_LR.mean()),\n          ('Polynomial Regression (2nd)', rmse_poly2, r2_score_poly2_train, r2_score_poly2_test, cv_poly2.mean()),\n          ('Ridge Regression', rmse_ridge, r2_score_ridge_train, r2_score_ridge_test, cv_ridge.mean()),\n          ('Lasso Regression', rmse_lasso, r2_score_lasso_train, r2_score_lasso_test, cv_lasso.mean()),\n          ('Support Vector Regression', rmse_svr, r2_score_svr_train, r2_score_svr_test, cv_svr.mean()),\n          ('Decision Tree Regression', rmse_dt, r2_score_dt_train, r2_score_dt_test, cv_dt.mean()),\n          ('Random Forest Regression', rmse_rf, r2_score_rf_train, r2_score_rf_test, cv_rf.mean())   \n         ]","ad5c0890":"predict_all = pd.DataFrame(data = models, columns=['Model', 'RMSE', 'R2_Score(training)', 'R2_Score(test)', 'Cross-Validation'])\npredict_all","fd508d3d":"predict_all.sort_values(by=['RMSE'], ascending=False, inplace=True)\n\nf, axe = plt.subplots(1,1, figsize=(18,6))\nsns.barplot(x='Model', y='RMSE', data=predict_all, ax = axe)\naxe.set_xlabel('Model', size=16)\naxe.set_ylabel('RMSE', size=16)\n\nplt.show()","73187954":"f, axes = plt.subplots(2,1, figsize=(14,10))\n\npredict_all.sort_values(by=['R2_Score(training)'], ascending=False, inplace=True)\n\nsns.barplot(x='R2_Score(training)', y='Model', data = predict_all, palette='Blues_d', ax = axes[0])\n#axes[0].set(xlabel='Region', ylabel='Charges')\naxes[0].set_xlabel('R2 Score (Training)', size=16)\naxes[0].set_ylabel('Model')\naxes[0].set_xlim(0,1.0)\naxes[0].set_xticks(np.arange(0, 1.1, 0.1))\n\npredict_all.sort_values(by=['R2_Score(test)'], ascending=False, inplace=True)\n\nsns.barplot(x='R2_Score(test)', y='Model', data = predict_all, palette='Reds_d', ax = axes[1])\n#axes[0].set(xlabel='Region', ylabel='Charges')\naxes[1].set_xlabel('R2 Score (Test)', size=16)\naxes[1].set_ylabel('Model')\naxes[1].set_xlim(0,1.0)\naxes[1].set_xticks(np.arange(0, 1.1, 0.1))\n\nplt.show()\n","2bb544d9":"Polynomial Regression - 2nd degree ","0df89e59":"Plotinig R2score","9c89c360":"Random Forest Regression","b2d54c86":"most of the people from france having highest account in the bank","d9d144f3":"plot for RMSE ","20bb65be":"Lasso regression"}}