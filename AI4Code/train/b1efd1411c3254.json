{"cell_type":{"2c47ab66":"code","155bf807":"code","9964ccac":"code","e10a66d6":"code","8f4de6d2":"code","73388d3b":"code","4cd9c6ed":"code","bb86c5f7":"code","184406be":"code","a6507706":"code","db14f979":"code","26c036dd":"code","bcf51a2d":"code","bd9ab53a":"code","f245390a":"code","aafc6821":"code","d9e6690d":"code","11d34db4":"code","987a4841":"code","f9575e4d":"code","f75a1cc1":"code","99aa528f":"code","3415fe03":"code","8cdcefdc":"code","e4af21fd":"code","01cc8aa1":"code","6e578ab7":"code","79000b2c":"code","097bd9bb":"code","c929d6e1":"code","75cff64e":"code","5ea2cf7d":"code","096a88c3":"code","644d5fd4":"markdown","7700f754":"markdown","f695715f":"markdown","a908f0e8":"markdown","1120bd8a":"markdown","521ff9fa":"markdown","79c6ce42":"markdown","d0b8501c":"markdown","6649e60a":"markdown","46319ce7":"markdown","fe10aafe":"markdown","3d405c31":"markdown","9fd76a9b":"markdown","650c14bb":"markdown","708a2952":"markdown","cff03e9b":"markdown","6df65153":"markdown","aec37a48":"markdown","339e630e":"markdown","c9a6fe77":"markdown","fea97987":"markdown","52bf7179":"markdown","ed1ca64a":"markdown","5ab4a340":"markdown","4615bb60":"markdown","dc8baefd":"markdown"},"source":{"2c47ab66":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches  \nimport seaborn as sns\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True) \nimport warnings\n\nwarnings.filterwarnings('ignore')","155bf807":"#import data from csv file.\ndf_olympic = pd.read_csv(\"..\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv\")\ndf_noc = pd.read_csv(\"..\/input\/120-years-of-olympic-history-athletes-and-results\/noc_regions.csv\")\nolympic = df_olympic.copy()","9964ccac":"olympic.info()","e10a66d6":"olympic.head()","8f4de6d2":"olympic.describe()","73388d3b":"#I'm omitting ID (column no 0) with iloc not to affect our correlation.\n#I'm trying to find out correlation between our columns.\n\nf,ax = plt.subplots(figsize=(8,6))\nsns.heatmap(olympic.iloc[:, 1:].corr(),annot=True, linewidths=.5, fmt='.1f', ax=ax)\n\nplt.show()","4cd9c6ed":"#filtering gold medal winners as gold_medal\n\ngold_medal = olympic[olympic['Medal']=='Gold']","bb86c5f7":"sports = gold_medal.groupby(['Sport']).size()\ntop_gold_medal_sports = pd.DataFrame({'Sports':sports.index, 'Count':sports.values})\n#Ranking the count of medalled sport branches in descending order.\ntop_gold_medal_sports.sort_values(['Count', 'Sports'], ascending=[False, True], inplace=True)\n\nprint(top_gold_medal_sports.head())","184406be":"print(gold_medal['Sport'].value_counts(dropna=False).head()) ","a6507706":"###I will use of this graphic to determine that i decide to examine which branches\n\nplt.figure(figsize=(18,9))\nsns.barplot(x=top_gold_medal_sports['Sports'][:20], y=top_gold_medal_sports['Count'][:20])\nplt.xticks(rotation= 60)\n#plt.xlabel('Sports')\n#plt.ylabel('Gold Medal Count')\nplt.title('Top 20 Gold Medalled Sports')\n\nplt.show()","db14f979":"gold_medal.plot(kind='scatter', x='Weight', y='Height', alpha=0.5, color='darkblue', figsize = (15,9))\nplt.xlabel='Weight'\nplt.ylabel='Height'\nplt.title('Gold Medal Winner at Athletics')\n\nplt.show()","26c036dd":"def medalled_athletes_scatter(medal_type,sport):\n    \"\"\"\n    takes a medal type and sport type, \n    gives a scatter plot for weight-height relation\n    \"\"\"\n    athletes=olympic[(olympic['Medal']==medal_type) & (olympic['Sport']==sport)]\n    athletes.plot(kind='scatter', x='Weight', y='Height', alpha=0.5, color='darkgreen', label=\"All Genders\", figsize = (12,7))\n    patch = mpatches.Patch(color='darkgreen', label='All')\n    plt.legend(handles=[patch], loc='lower right')\n    plt.xlabel='Weight'\n    plt.ylabel='Height'\n    plt.title(medal_type+' Medal Winners at '+sport)\n    \n    plt.show()","bcf51a2d":"medalled_athletes_scatter('Gold', 'Gymnastics')","bd9ab53a":"def medalled_athletes_gender_scatter(medal_type,sport):\n    \"\"\"\n    takes a medal type and sport type, gives a scatter plot \n    for weight-height relation with gender discrimination\n    \"\"\"\n    athletes=olympic[(olympic[\"Medal\"]==medal_type) & (olympic[\"Sport\"]==sport)].loc[:,[\"Sex\",\"Height\",\"Weight\",\"Sport\",\"Medal\"]]\n    athletes[\"Color\"] = [\"blue\" if each ==\"M\" else \"red\" for each in athletes.Sex]     \n    athletes.plot(kind='scatter', x='Weight', y='Height', alpha=0.5, color=athletes[\"Color\"], figsize = (12,7))\n    red_patch = mpatches.Patch(color='red', label='Female')\n    blue_patch = mpatches.Patch(color='blue', label='Male')\n    plt.legend(handles=[red_patch, blue_patch], loc='lower right')\n    plt.title(medal_type+\" Medal Winners at \"+sport)\n    \n    plt.show()","f245390a":"medalled_athletes_gender_scatter('Gold', 'Gymnastics')","aafc6821":"medalled_athletes_gender_scatter('Silver', 'Basketball')","d9e6690d":"olympic['BMI'] = olympic['Weight']\/(olympic['Height']\/100)**2","11d34db4":"olympic.loc[:,['Weight', 'Height', 'BMI']].head()","987a4841":"Wrestling=olympic[(olympic[\"Medal\"]=='Gold') & (olympic[\"Sport\"]=='Wrestling')].loc[:,[\"BMI\",\"Sport\",\"Medal\"]]    \nBasketball=olympic[(olympic[\"Medal\"]=='Gold') & (olympic[\"Sport\"]=='Basketball')].loc[:,[\"BMI\",\"Sport\",\"Medal\"]]    \n\nf,ax=plt.subplots(1,2,figsize=(15,7))\n\nWrestling.BMI.plot.hist(ax=ax[0],bins=30,edgecolor='black',color='purple')\n\nax[0].set_title('BMI Distribution of Gold Wrestlers')\nx1=list(range(15,50,5))\nax[0].set_xticks(x1)\n\nBasketball.BMI.plot.hist(ax=ax[1],bins=30,edgecolor='black',color='orange')\n\nax[1].set_title('BMI Distribution of Gold Basketballers')\nx2=list(range(10,40,5))\nax[1].set_xticks(x2)\n\nplt.show()","f9575e4d":"#Summer Olympics since 1928 \ndf_summer = olympic[(olympic.Season == 'Summer') & (olympic.Year >= 1928)]\n\n#Winter Olympics since 1928 \ndf_winter = olympic[(olympic.Season == 'Winter') & (olympic.Year >= 1928)]","f75a1cc1":"fig, ax = plt.subplots(nrows=1, ncols=1,figsize=(12, 8))\n\nsns.boxplot(x=\"Year\", y=\"BMI\", data=df_summer, hue=\"Sex\", \n            palette=\"muted\", ax=ax) \n           \nax.set_ylim([15, 30])\nplt.xticks(rotation=90)\nplt.title(\"Athlete BMI over time (Summer Oliympics)\")\n\nplt.show()","99aa528f":"fig, ax = plt.subplots(nrows=1, ncols=1,figsize=(12, 8))\nsns.boxplot(x=\"Year\", y=\"BMI\", data=df_winter, hue=\"Sex\", palette=\"viridis_r\", ax=ax)\nax.set_ylim([15, 30])\nplt.xticks(rotation=90)\nplt.title(\"Athlete BMI over time (Winter Oliympics)\")\n\nplt.show()","3415fe03":"df_winter_ages = df_winter.groupby(['Year','Sex'], as_index=False)['Age','Year','Sex'].agg('mean')\ndf_summer_ages = df_summer.groupby(['Year','Sex'], as_index=False)['Age','Year','Sex'].agg('mean')\ndf_winter_ages.head()","8cdcefdc":"plt.figure(figsize=(12,6))\nsns.barplot(x=\"Year\", y=\"Age\", data=df_winter_ages, hue=\"Sex\", palette=\"hls\")\nplt.title('Age Distribution in Winter Olympic by Sex') \nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nplt.show()","e4af21fd":"plt.figure(figsize=(12,6))\nsns.barplot(x=\"Year\", y=\"Age\", data=df_summer_ages, \n            hue=\"Sex\", palette=\"rocket\") \n\nplt.title('Age Distribution in Summer Olympic by Sex') \nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nplt.show()","01cc8aa1":"OL = olympic.loc[:,[\"Year\", \"ID\", \"Sex\"]].drop_duplicates().groupby([\"Year\", \"Sex\"]).size().reset_index()\nOL.columns = [\"Year\",\"Sex\",\"Count\"]","6e578ab7":"Years = olympic[\"Year\"].sort_values().unique().tolist()\n\nFemale = []\nMale = []\n\nfor year in Years:\n    Female.append(\n        OL[(OL[\"Year\"] == year) & (OL[\"Sex\"] == 'F')][\"Count\"].sum()\/\n        OL[(OL[\"Year\"] == year)][\"Count\"].sum()*100\n    )\n    \n    Male.append(\n        OL[(OL[\"Year\"] == year) & (OL[\"Sex\"] == 'M')][\"Count\"].sum()\/\n        OL[(OL[\"Year\"] == year)][\"Count\"].sum()*100\n    )","79000b2c":"f,ax = plt.subplots(figsize=(16,6))\nsns.barplot(x=Years, y=Female, label='Female', color='r', alpha = 0.7)\nsns.barplot(x=Years, y=Male, label='Male', color='b', alpha = 0.4)\n\nax.set(xlabel='Hour', ylabel='Percentage', \n       title='Percentage Distribution of Female & Male Athletes by Years'\n      ) \n      \nax.legend(loc='upper right',frameon= True)\n\nplt.show()","097bd9bb":"plt.figure(figsize=(16,6))\nsns.barplot(x=\"Year\", y=\"Count\", data=OL, \n            hue=\"Sex\", palette=\"muted\"\n           ) \n           \nplt.title('Number of Female & Male Athletes by Years') \n\nplt.show()","c929d6e1":"Cities = olympic.loc[:,[\"ID\", \"City\"]].drop_duplicates().groupby([\"City\"]).size().reset_index()\nCities.columns = [\"City\", \"Count\"]\nCities = Cities.sort_values(\"Count\", ascending=False)","75cff64e":"plt.figure(figsize=(16,6))\nsns.barplot(x=\"City\", y=\"Count\", data=Cities.head(25), palette=\"rocket\")\n\nplt.title('Cities Hosting The Greatest Number Of Olympic Games') \nplt.xticks(rotation=45)\n\nplt.show()","5ea2cf7d":"Teams = olympic.loc[:,[\"ID\", \"NOC\"]].drop_duplicates().groupby([\"NOC\"]).size().reset_index()\nTeams.columns = [\"NOC\", \"Count\"]\nTeamsCountry = pd.merge(Teams,df_noc, on=['NOC','NOC'])","096a88c3":"data = [ dict(\n        type = 'choropleth',\n        locations = TeamsCountry['NOC'],\n        locationmode = 'ISO-3',\n        z = TeamsCountry['Count'],\n        text = TeamsCountry['region'],\n        \n        colorscale=\n            [[0.0, \"rgb(251, 237, 235)\"],\n            [0.09, \"rgb(245, 211, 206)\"],\n            [0.12, \"rgb(239, 179, 171)\"],\n            [0.15, \"rgb(236, 148, 136)\"],\n            [0.22, \"rgb(239, 117, 100)\"],\n            [0.35, \"rgb(235, 90, 70)\"],\n            [0.45, \"rgb(207, 81, 61)\"],\n            [0.65, \"rgb(176, 70, 50)\"],\n            [0.85, \"rgb(147, 59, 39)\"],\n            [1.00, \"rgb(110, 47, 26)\"]],\n        \n        autocolorscale = False,\n        reversescale = False,\n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) \n        ),\n        colorbar = dict(\n            autotick = False,\n            tickprefix = '',\n            title = 'Count'),\n      ) \n       ]\n\nlayout = dict(\n    title = \"Countries With the Most Teams\",\n    geo = dict(\n        showframe = False,\n        showcoastlines = True,\n        width=500,height=400\n    )\n)\n\nw_map = dict(data=data, layout=layout)\n\niplot( w_map, validate=False)","644d5fd4":"In this kernel, i'll try to find out relation between atletes' height and weight. And i'll inspect connection between BMI and medals.\n\n**Content**\n\n1. [Importing and analyzing the data](#1)\n1. [Top gold medalled sports](#2)\n1. [Height - Weight plots](#3)\n1. [BMI Analysis](#4)\n1. [Other Analysis](#5)\n1. [Ending](#6)","7700f754":"We can use histogram plot for bmi analysis. I want to compare two type sport. For example wrestling and basketball.","f695715f":"Body mass index (BMI) is a measure of body fat.The formula for BMI is : weight (kg) \/ (height (m))2\nAs you remember, we have NaN values at Weight and Height. We can assign them mean values but i prefer to ignore them. I calculate bmi column below.","a908f0e8":"<a id=\"1\"><\/a> <br>\n## 1. Importing and analyzing the data","1120bd8a":"<a id=\"4\"><\/a> <br>\n## 4. BMI Analysis","521ff9fa":"I want to learn the top gold medalled sports branches. Because of that, i'm creating a series group by sport and adding elements from series to dictionary.","79c6ce42":"It's a tidier plot. It's almost a line chart.","d0b8501c":"We can inspect any branches now. For example I wonder silver medalist at basketball.","6649e60a":"It seems there are direct correlation between our Height and Weight columns. So i will examine connection between Height and Weight of gold medalists.","46319ce7":"I'll use this top records to select brances for my weight-height plot later.  Now, i'm able to create bar plot of top 25 gold medalled sports branches. ","fe10aafe":"The average of females age peaks in 1904.","3d405c31":"There are null (NaN) values both Height and Weight columns. On the top five row, we can see it. We'll have to handle them.","9fd76a9b":"There are an easier way though. ","650c14bb":"<a id=\"5\"><\/a> <br>\n## 5. Other Analysis","708a2952":"<a id=\"2\"><\/a> <br>\n## 2. Top gold medalled sports","cff03e9b":"It seems Summer Oliympics have more uniform bmi than Winter Oliympics over time.","6df65153":"We can say based on the graph above that wrestling athletes have more weight proportion than basketball players. Because they have wide range of BMIs. Basketball players those have above 35 bmi are more than wrestlers.","aec37a48":"This was my first kernel. I'll continue working on. If you like the kernel, please upvote.","339e630e":"Let's try to plot gold medalled gymnastics athletes with our function.","c9a6fe77":"I'm trying plot scatter diagram of all gold medalled athlethes at once. ","fea97987":"There are a significant correlation between Height and Weight. it's a bit complicated because we plotted all branches at same time. So I want to examine sport branches separately.","52bf7179":"<a id=\"6\"><\/a> <br>\n## 6. Ending","ed1ca64a":"When weight or height have a NaN value, bmi is NaN too. You can see this below.","5ab4a340":"As you can see, height and weight are directly proportional explicitly. I think it will be good if we add gender division.","4615bb60":"The olympic data has 15 columns. I'll deal with Sports, Sex, Medal, Height, Weight columns mostly.","dc8baefd":"<a id=\"3\"><\/a> <br>\n## 3. Height - Weight plots"}}