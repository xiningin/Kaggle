{"cell_type":{"73db97e4":"code","76e8c8dc":"code","c6b561a7":"code","8b54f8b1":"code","48a651ea":"code","07d98de8":"code","90806835":"code","c73c8c82":"code","cebccd1f":"code","bf314bc1":"code","7fde086b":"code","bc41b801":"code","81c6271a":"code","75ca3885":"code","22b297df":"code","105f1964":"code","89e9a56c":"code","340fd28c":"code","a09cb8fa":"code","21a79939":"code","00edea18":"code","0ad6d63a":"code","7d9c8fc3":"code","7dd9f3dc":"code","9f0e1014":"code","5b902cec":"code","c636f683":"code","cb87e667":"code","b7da5a84":"code","25b429d4":"code","f77492ed":"code","b1f11752":"code","0d81b7fd":"code","3a14630b":"code","db27323e":"code","6d9967d4":"code","b2d1b514":"code","9e200f4c":"code","bd9bbdbd":"code","4cedeeaf":"code","b94879a8":"code","e5d3ed75":"code","1cb3524e":"code","e7e6f72f":"code","08616c0b":"code","18265189":"code","f074b667":"code","70995487":"code","c3df9887":"code","82f349fd":"code","743b80c1":"code","4e269f75":"code","e15fb303":"code","0498d11f":"code","e6984877":"code","0859ab06":"code","43c9f8fe":"code","90386f16":"code","2dac21f3":"code","ae058a4b":"code","497e2e55":"code","1c2ab8af":"code","3922e16a":"code","4ed69d6d":"code","e587d173":"code","d3dd4e24":"code","eec55add":"code","beaf5851":"code","3b8c229e":"code","244eb38a":"code","e5328562":"code","2d2a2742":"code","3b219b99":"code","ce8c340b":"code","e1f2b4dd":"code","9ad8873a":"code","821f0e63":"code","a5d4de04":"code","e6d9275f":"code","8ebcb1ba":"markdown","a97c20e9":"markdown","e3f50d88":"markdown","48c0b882":"markdown","dc705ca4":"markdown","cb9b0832":"markdown","93e41ef0":"markdown","56b7f21c":"markdown","e4b7bf19":"markdown","f0020dbb":"markdown","bbad9892":"markdown","d4e49fca":"markdown","5d36d36a":"markdown","d7b1beb6":"markdown","37b14997":"markdown","f90b1c82":"markdown","c982373c":"markdown","0359f186":"markdown","2b9b82e0":"markdown","59da2363":"markdown","e40e5abf":"markdown","660adbce":"markdown","b9372353":"markdown","33158320":"markdown","12ba8cda":"markdown","49b26319":"markdown","341415aa":"markdown","3964cb76":"markdown","4fd0fa19":"markdown","d9d0c09f":"markdown","83585ce7":"markdown","04ac56c2":"markdown","2f8eeeb3":"markdown","eb7fe108":"markdown","a304592c":"markdown","a9ce6ff0":"markdown","52ec916e":"markdown","f8cf89b3":"markdown","d2190d0a":"markdown","4da83216":"markdown","e0cd1012":"markdown","f98bb158":"markdown","e5e8dce3":"markdown","22e3cefd":"markdown","13234a90":"markdown","93be6c14":"markdown","b109ae9f":"markdown","38b38952":"markdown","feb56479":"markdown","0fa6daa5":"markdown","a86bd2b7":"markdown","84fdfb12":"markdown","bf661149":"markdown","038ef822":"markdown","e595bafa":"markdown"},"source":{"73db97e4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom scipy.special import boxcox1p\n\nimport folium\nimport folium.plugins\nfrom folium.plugins import HeatMap\nfrom folium.plugins import MarkerCluster\nfrom folium import plugins\n\nimport wordcloud\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nfrom sklearn import preprocessing\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score, mean_absolute_error\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","76e8c8dc":"pd.options.display.max_rows = None\npd.options.display.max_columns = None","c6b561a7":"data = pd.read_csv('\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')","8b54f8b1":"data.shape","48a651ea":"data.dtypes","07d98de8":"data.duplicated().sum()","90806835":"total = data.isnull().sum().sort_values(ascending = False)\npercent = (((data.isnull().sum()) * 100) \/ data.isnull().count()).sort_values(ascending = False)\nmissing_data = pd.concat([total, percent], axis = 1, keys=['Total', 'Percent'], sort=False).sort_values('Total', ascending=False)","c73c8c82":"missing_data.head()","cebccd1f":"data.isnull().sum()","bf314bc1":"data.describe().T","7fde086b":"data.corr().style.background_gradient(cmap='coolwarm')","bc41b801":"corr = data.corr() \nplt.figure(figsize=(15, 10))\nsns.heatmap(corr, annot=True)","81c6271a":"data.columns","75ca3885":"data.head()","22b297df":"data.availability_365.dtypes","105f1964":"data['status_availability_365'] = 'Worst'\ndata.loc[data['availability_365'] >200, 'status_availability_365'] = \"Best\"\ndata.loc[(data['availability_365'] > 100) & (data['availability_365'] < 200), 'status_availability_365'] = 'Good'\ndata.loc[(data['availability_365'] > 0) & (data['availability_365'] < 100), 'status_availability_365'] = 'Okay'","89e9a56c":"data.head()","340fd28c":"data.status_availability_365.value_counts()","a09cb8fa":"data['average_price'] = data['minimum_nights'] \/ data['price']","21a79939":"from scipy.stats import norm\nfrom scipy import stats","00edea18":"sns.distplot(data['availability_365'], fit = norm)\nfig = plt.figure()\nres = stats.probplot(data['availability_365'], plot = plt)","0ad6d63a":"sns.distplot(data['calculated_host_listings_count'], fit = norm)\nfig = plt.figure()\nres = stats.probplot(data['calculated_host_listings_count'], plot = plt)","7d9c8fc3":"data['reviews_per_month'] = data['reviews_per_month'].replace(np.nan, 0)","7dd9f3dc":"sns.distplot(data['reviews_per_month'], fit = norm)\nfig = plt.figure()\nres = stats.probplot(data['reviews_per_month'], plot = plt)","9f0e1014":"sns.distplot(data['number_of_reviews'], fit = norm)\nfig = plt.figure()\nres = stats.probplot(data['number_of_reviews'], plot = plt)","5b902cec":"sns.distplot(data['latitude'], fit = norm)\nfig = plt.figure()\nres = stats.probplot(data['latitude'], plot = plt)","c636f683":"sns.distplot(data['longitude'], fit = norm)\nfig = plt.figure()\nres = stats.probplot(data['longitude'], plot = plt)","cb87e667":"sns.distplot(data['minimum_nights'], fit = norm)\nfig = plt.figure()\nres = stats.probplot(data['minimum_nights'], plot = plt)","b7da5a84":"data.average_price.replace([np.inf, -np.inf], np.nan, inplace = True)\ndata.average_price.fillna(0, inplace=True)","25b429d4":"sns.distplot(data['average_price'], fit = norm)\nfig = plt.figure()\nres = stats.probplot(data['average_price'], plot = plt)","f77492ed":"data.shape","b1f11752":"sns.countplot(data['neighbourhood_group'], palette = 'plasma')\nfig = plt.gcf()\nfig.set_size_inches(10, 10)\nplt.title('Neighbourhood Group')","0d81b7fd":"sns.countplot(data['neighbourhood'], palette='plasma')\nfig = plt.gcf()\nfig.set_size_inches(25, 6)\nplt.title('Neighbourhood')","3a14630b":"sns.countplot(data['room_type'], palette='plasma')\nfig = plt.gcf()\nfig.set_size_inches(10, 10)\nplt.title('Restaurants delivering online or not')","db27323e":"plt.figure(figsize=(10, 10))\nax = sns.boxplot(x = 'neighbourhood_group', y = 'availability_365', data=data, palette='plasma')","6d9967d4":"plt.figure(figsize=(10, 10))\nsns.scatterplot(data.longitude, data.latitude, hue = data.neighbourhood_group)","b2d1b514":"plt.figure(figsize=(10, 10))\nsns.scatterplot(data.longitude, data.latitude, hue=data.neighbourhood)","9e200f4c":"plt.figure(figsize=(10, 10))\nsns.scatterplot(data.longitude, data.latitude, hue=data.room_type)","bd9bbdbd":"plt.figure(figsize=(10, 10))\nsns.scatterplot(data.longitude, data.latitude, hue=data.availability_365)","4cedeeaf":"m = folium.Map([40.7128,-74.0060], zoom_start=11)\nHeatMap(data[['latitude', 'longitude']].dropna(), radius=8, gradient={0.2: 'blue', 0.4: 'purple', 0.6: 'orange', 1: 'red'}).add_to(m)\ndisplay(m)","b94879a8":"data.neighbourhood_group.unique()","e5d3ed75":"plt.figure(figsize=(10, 8))\nsns.distplot(data[data.neighbourhood_group == 'Manhattan'].price, color='maroon', hist=False, label='Manhattan')\nsns.distplot(data[data.neighbourhood_group == 'Brooklyn'].price, color='black', hist=False, label='Brooklyn')\nsns.distplot(data[data.neighbourhood_group == 'Queens'].price, color='green', hist=False, label='Queens')\nsns.distplot(data[data.neighbourhood_group == 'Staten Island'].price, color='blue', hist=False, label='Staten Island')\nsns.distplot(data[data.neighbourhood_group == 'Bronx'].price, color='lavender', hist=False, label='Bronx')\nplt.title('Borough wise price destribution for price<2000')\nplt.xlim(0,2000)\nplt.show()","1cb3524e":"plt.figure(figsize=(14, 8))\nsns.distplot(data.minimum_nights).set_yscale('log')\nplt.title('Minimum no. of nights distribution')\nplt.show()","e7e6f72f":"sns.set(style='white', palette='plasma', color_codes=True)\nplt.figure(figsize=(10, 5))\ndf1 = data[data.neighbourhood_group == 'Brooklyn'][['neighbourhood', 'price']]\nd = df1.groupby('neighbourhood').mean()\nsns.distplot(d, color='r', axlabel='Price distribution in Brooklyn', kde_kws={\"color\": \"k\"}, hist_kws={\"histtype\":\"step\",\"linewidth\": 3})\nplt.ioff()\nplt.plot()","08616c0b":"sns.set(style='white', palette='plasma', color_codes=True)\nplt.figure(figsize=(10, 5))\ndf1 = data[data.neighbourhood_group == 'Manhattan'][['neighbourhood', 'price']]\nd = df1.groupby('neighbourhood').mean()\nsns.distplot(d, color='r', axlabel='Price distribution in Brooklyn', kde_kws={\"color\": \"k\"}, hist_kws={\"histtype\":\"step\",\"linewidth\": 3})\nplt.ioff()\nplt.plot()","18265189":"sns.set(style='white', palette='plasma', color_codes=True)\nplt.figure(figsize=(10, 5))\ndf1 = data[data.neighbourhood_group == 'Staten Island'][['neighbourhood', 'price']]\nd = df1.groupby('neighbourhood').mean()\nsns.distplot(d, color='r', axlabel='Price distribution in Brooklyn', kde_kws={\"color\": \"k\"}, hist_kws={\"histtype\":\"step\",\"linewidth\": 3})\nplt.ioff()\nplt.plot()","f074b667":"sns.set(style='white', palette='plasma', color_codes=True)\nplt.figure(figsize=(10, 5))\ndf1 = data[data.neighbourhood_group == 'Queens'][['neighbourhood', 'price']]\nd = df1.groupby('neighbourhood').mean()\nsns.distplot(d, color='r', axlabel='Price distribution in Brooklyn', kde_kws={\"color\": \"k\"}, hist_kws={\"histtype\":\"step\",\"linewidth\": 3})\nplt.ioff()\nplt.plot()","70995487":"sns.set(style='white', palette='plasma', color_codes=True)\nplt.figure(figsize=(10, 5))\ndf1 = data[data.neighbourhood_group == 'Bronx'][['neighbourhood', 'price']]\nd = df1.groupby('neighbourhood').mean()\nsns.distplot(d, color='r', axlabel='Price distribution in Brooklyn', kde_kws={\"color\": \"k\"}, hist_kws={\"histtype\":\"step\",\"linewidth\": 3})\nplt.ioff()\nplt.plot()","c3df9887":"plt.figure(figsize=(10, 6))\nsub_6 = data[data.price < 500]\nviz_4 = sub_6.plot(kind='scatter', x='longitude', y='latitude', figsize=(10, 10), colorbar=True, alpha=0.4, label='availability_365',c='price', cmap=plt.get_cmap('jet'))\nviz_4.legend()\nplt.ioff()","82f349fd":"ng = data[data.price < 500]\nplt.figure(figsize=(10, 6))\nsns.boxplot(x='neighbourhood_group', y='price', data=ng)\nplt.title('neighbourhood_group price distribution < 500')\nplt.show()","743b80c1":"df_top_prices_by_neighbourhood = data.groupby('neighbourhood').agg({'price' : 'mean'}).sort_values('price').reset_index()","4e269f75":"# print(df_top_prices_by_neighbourhood)\ndf_top_prices_by_neighbourhood.columns","e15fb303":"plt.figure(figsize=(10, 6))\nsns.barplot(x = 'price', y='neighbourhood', data=df_top_prices_by_neighbourhood.head(10))\nplt.ioff()","0498d11f":"plt.figure(figsize=(10, 6))\nsns.countplot(x='room_type', hue='neighbourhood_group', data=data)\nplt.title('Room types occupied by neighbourhood group')\nplt.show()","e6984877":"plt.figure(figsize=(10, 6))\nsns.catplot(x='room_type', y='price', data=data)","0859ab06":"text = \" \".join(str(x) for x in data.name)\nwordcloud = WordCloud(max_words=200, background_color='yellow').generate(text)\nplt.figure(figsize=(10, 6))\nplt.figure(figsize=(15, 10))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis('off')\nplt.show()","43c9f8fe":"_names_ = []\nfor name in data.name:\n    _names_.append(name)\ndef split_name(name):\n    spl = str(name).split()\n    return spl\n_names_for_count_ = []\n\nfor x in _names_:\n        for word in split_name(x):\n            word = word.lower()\n            _names_for_count_.append(word)","90386f16":"from collections import Counter\n_top_25_w = Counter(_names_for_count_).most_common()\n_top_25_w = _top_25_w[0:25]","2dac21f3":"sub_w = pd.DataFrame(_top_25_w)\nsub_w.rename(columns={0 : 'Words', 1 : 'Count'}, inplace=True)","ae058a4b":"plt.figure(figsize=(10, 6))\nviz_5 = sns.barplot(x='Words', y='Count',data=sub_w)\nviz_5.set_title('Counts of the top 25 used words for listing names')\nviz_5.set_ylabel('Count of words')\nviz_5.set_xlabel('Words')\nviz_5.set_xticklabels(viz_5.get_xticklabels(), rotation=80)","497e2e55":"plt.figure(figsize=(10, 6))\ndata['number_of_reviews'].plot(kind='hist')\nplt.xlabel('Price')\nplt.ioff()\nplt.show()","1c2ab8af":"df1 = data.sort_values(by=['number_of_reviews'], ascending=False).head(1000)\ndf1.head()","3922e16a":"print('Rooms with most number of reviews')\nLong=-73.80\nLat=40.80\nmapdf1 = folium.Map([Lat, Long], zoom_start=10)\nmapdf1_rooms_map = plugins.MarkerCluster().add_to(mapdf1)\n\nfor lat, lon, label in zip(df1.latitude, df1.longitude, df1.name):\n    folium.Marker(location=[lat, lon], popup=label, icon=folium.Icon(icon='home')).add_to(mapdf1_rooms_map)\n    \nmapdf1.add_child(mapdf1_rooms_map)","4ed69d6d":"data['availability_365'] = boxcox1p(data['availability_365'], 0)\ndata['calculated_host_listings_count'] = boxcox1p(data['calculated_host_listings_count'], 0)\ndata['reviews_per_month'] = boxcox1p(data['reviews_per_month'], 0)\ndata['number_of_reviews'] = boxcox1p(data['number_of_reviews'], 0)\ndata['minimum_nights'] = boxcox1p(data['minimum_nights'], 0)","e587d173":"data.drop(['host_id', 'id', 'name', 'host_name', 'last_review'], axis=1, inplace=True)","d3dd4e24":"data_final = pd.get_dummies(data)","eec55add":"data_final.head()","beaf5851":"data_final.shape","3b8c229e":"X = data_final.loc[:, data_final.columns != 'price']\ny = data_final['price']","244eb38a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","e5328562":"rf = RandomForestRegressor(n_estimators=50)","2d2a2742":"rf_fit = rf.fit(X_train, y_train)","3b219b99":"y_pred_rf = rf_fit.predict(X_test)","ce8c340b":"r2_score(y_test,y_pred_rf)","e1f2b4dd":"from sklearn.ensemble import GradientBoostingRegressor","9ad8873a":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.01)","821f0e63":"GBoost = GBoost.fit(X_train,y_train)","a5d4de04":"y_pred_gb = GBoost.predict(X_test)","e6d9275f":"r2_score(y_test, y_pred_gb)","8ebcb1ba":"### Plotting price distribution grouped on basis of different neighbourhood_group","a97c20e9":"### Displaying map with specified centter point and plotting latiutde and longitude of given dataset on it","e3f50d88":"### Avoiding the restriction to display maximum number of rows and columns","48c0b882":"### Splitting the dataframe into two parts one containing dependent and other containing independent variable","dc705ca4":"### Displaying scatterplot between latitude and longitude grouped on the basis of neighbourhood","cb9b0832":"### Dropping the following columns from dataset","93e41ef0":"### Plotting the rooms with the most number of reviews on the map","56b7f21c":"### Plotting histogram for latitude and finding whether skewness is there or not","e4b7bf19":"### Displating shape of data","f0020dbb":"### Splitting the dataset into train and test part","bbad9892":"### Plotting histogram for longitude and finding whether skewness is there or not","d4e49fca":"### Finding whether any duplicate entry is there or not in dataframe","5d36d36a":"### Renaming the columns","d7b1beb6":"### RandomForest Regressor model","37b14997":"### Appending a new column names status_availability_365, based on the number of days","f90b1c82":"### Displaying countplot for neighbourhood","c982373c":"### Appending a new column named average_price for one night stand in hotel","0359f186":"### Doing boxcox1p transformation to remove skewness and make the variable normally distributed","2b9b82e0":"### Plotting barplot to between each word and it's corresponding frequency","59da2363":"### Plotting histogram for number_of_reviews and finding whether skewness is there or not","e40e5abf":"### Displaying the top values of data_final dataframe","660adbce":"### Displaying scatterplot between latitude and longitude grouped on the basis of availability_365","b9372353":"### Plotting price column grouped on basis of neighbourhood_group","33158320":"### Plotting histogram for calculated_host_listings_count and finding whether skewness is there or not","12ba8cda":"### Splitting the words in name column and appending it to _name_for_count_ variable","49b26319":"### Plotting histogram for reviews_per_month and finding whether skewness is there or not","341415aa":"### Plotting category plot between room_type and price","3964cb76":"### Plotting histogram for minimum_nights and finding whether skewness is there or not","4fd0fa19":"### Importing the required libraries","d9d0c09f":"### Displaying correlation matrix for dataset","83585ce7":"### Plotting histogram for availability_365 and finding whether skewness is there or not","04ac56c2":"### Displaying words on the basis of their frequency in name column","2f8eeeb3":"### Displaying countplot for neighbourhood_group","eb7fe108":"### Plotting histogram for average_price and finding whether skewness is there or not","a304592c":"### Grouping data based on neighbourhood column and aggregating price value to calculate mean of price and then sorting the entire dataframe with respect to price ","a9ce6ff0":"### Displaying data types of each and every column of a dataset","52ec916e":"### Displaying scatterplot between latitude and longitude grouped on the basis of neighbourhood_group","f8cf89b3":"### Displaying boxplot between neighbourhood_group and availability_365 ","d2190d0a":"### Displaying the shape of data_final dataframe","4da83216":"### Replacing inf and -inf values with null and then replacing null with zero in average_price","e0cd1012":"### GradientBoostingRegressor model","f98bb158":"### Counting the frequency of each word in _name_for_count_ variable","e5e8dce3":"### Displaying scatterplot between latitude and longitude grouped on the basis of room_type","22e3cefd":"### Sort the data on basis of number_of_reviews columns","13234a90":"### Displaying top values of missing_data frame","93be6c14":"### Replacing null values with zero in reviews_per_month","b109ae9f":"### Reading the csv file","38b38952":"### Displaying countplot for room_type","feb56479":"### Creating dummies for categorical variable","0fa6daa5":"### Plotting boxplot between neighbourhood_group and price for data having price less than 500","a86bd2b7":"### Displaying heapmap corresponding to correlation values","84fdfb12":"### Plotting side by side bar graph for different neighbourhood_group","bf661149":"### Describing the dataset","038ef822":"### Finding the total number of missing values of each and every column and their percentage","e595bafa":"### Importing norm and stats"}}