{"cell_type":{"9c91d050":"code","f5cd28c4":"code","835d2716":"code","c09c2088":"code","a31b950c":"code","55b85f62":"code","b48a01f4":"code","0f383c7f":"code","af3b7176":"code","6d126cdb":"code","88a4813a":"markdown","7f872f44":"markdown","98e7dbd7":"markdown","0ea5e9ee":"markdown","66b6ec5a":"markdown","f6ade64f":"markdown","4816a111":"markdown","d14745af":"markdown","9de9194f":"markdown"},"source":{"9c91d050":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport os \nimport cv2\nimport re\nfrom sklearn.model_selection import train_test_split","f5cd28c4":"index_file = pd.read_csv('..\/input\/chinese-mnist\/chinese_mnist.csv')\nindex_file","835d2716":"labels = sorted(index_file.value.unique())\nlabels","c09c2088":"data = []\nwidth = 60\nheight = 60\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/chinese-mnist\/data\/data\/'):\n    for filename in filenames:\n        # apply regular expression to find all the numbers\n        comb = re.findall('[0-9]+', filename)\n        comb = [int(i) for i in comb]\n        if(len(comb)==3):\n            # convert the image into an array and resize it\n            label = labels.index(index_file[index_file.suite_id==comb[0]][index_file.sample_id==comb[1]][index_file.code==comb[2]].value.values[0])\n            image_data = cv2.imread(os.path.join(dirname, filename), cv2.IMREAD_GRAYSCALE)\n            resized_data = cv2.resize(image_data, (width, height))\n            data.append([resized_data, label])\n        else:\n            print('Incompatible file format')\n            break; ","a31b950c":"plt.figure(figsize=(19, 16))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(cv2.cvtColor(data[i][0], cv2.COLOR_BGR2RGB))\n    plt.xlabel(labels[data[i][1]])","55b85f62":"X = [] \ny = [] \n\nfor feature, label in data:\n    X.append(feature)\n    y.append(label)\n\nX = np.array(X).reshape(-1, width, height, 1)\ny = np.array(y)","b48a01f4":" X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=69)","0f383c7f":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import Dense, MaxPooling2D, Conv2D, Activation, Flatten, Dropout, BatchNormalization\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras import layers","af3b7176":"model = Sequential()\n\nmodel.add(Conv2D(256, (3, 3), padding='same', input_shape=X_train.shape[1:]))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(BatchNormalization(axis=1))\n\nmodel.add(Conv2D(64, (3, 3), padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(BatchNormalization(axis=1))\n\nmodel.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors\n\nmodel.add(Dense(32))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.3))\nmodel.add(BatchNormalization(axis=1))\n\nmodel.add(Dense(len(labels)))\nmodel.add(Activation('softmax'))\n\nearly_stop = tf.keras.callbacks.EarlyStopping(patience=3, monitor='val_loss', restore_best_weights=True)\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\nhistory = model.fit(X_train, y_train, batch_size=70, epochs=100, validation_split=0.15, callbacks=[early_stop])","6d126cdb":"model.evaluate(X_test, y_test)","88a4813a":"Building a convolutional neural network ","7f872f44":"read the csv file that contains all the instructions of the training data layout","98e7dbd7":"visualize chinese digits ","0ea5e9ee":"Get the image data based on the rules specified in the csv file ","66b6ec5a":"Preparing our data for training ","f6ade64f":"# Classifying Chinese Digits \n\n> The MNIST dataset is one of the classics of machine learning. It is the gateway to deep learning for many, and undoubtly changed how people approach problems in computing. \n> \n> This notebook takes a look at a variation of the beloved MNIST dataset. Instead of Arabic numerals, we are classifying Chinese digits. \n> \n> It will include characters from 0 to 100 million. Interestingly, the Chinese counting system is a bit different. Instead saying ten thousand, there is a different unit called **\u4e07** (wan). At the same time, there is a separate character **\u4ebf** that describes one hundred million. \n> \n**I hope this notebook is helpful, feel free to provide me with feedbacks and suggestions.**\n\n![](https:\/\/external-content.duckduckgo.com\/iu\/?u=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F9%2F9f%2FWang_Xianzi_Imitation_by_Tang_Dynasty.JPG%2F1920px-Wang_Xianzi_Imitation_by_Tang_Dynasty.JPG&f=1&nofb=1)\n\nImage source: Wikipedia","4816a111":"Evaluating the model ","d14745af":"split into training and testing sets ","9de9194f":"We are told that the images are named based on \n\nsuite_id: 1, sample_id: 3, code: 4  forming input_1_3_4.jpg  "}}