{"cell_type":{"5da44daa":"code","26d40684":"code","5f721ffd":"code","aedbe36c":"code","ebd9fe1d":"code","f34b2f32":"code","7dd9f45b":"code","39ed9b2d":"code","92c3ebb3":"code","820160b2":"code","8784354e":"code","1c6fda37":"code","a4b389b6":"code","f4c67f50":"code","572f6957":"code","ed9fb95d":"code","c303ccd4":"code","7220ff84":"code","d3337543":"code","c59fda13":"code","7c2cf6cf":"code","cc9dc536":"code","c1d06f4e":"code","3941c4e2":"code","ec73b407":"markdown","4e79c3c6":"markdown","bc42abb0":"markdown","27d9e3f5":"markdown","56f7f702":"markdown","251a627b":"markdown","3e3197b1":"markdown","cd28d518":"markdown","4c8db10c":"markdown","2b2701a8":"markdown","8ec0cfcf":"markdown","eea3293a":"markdown","0684edd7":"markdown","d6181305":"markdown","03909061":"markdown","b5c5888d":"markdown","0abbb48c":"markdown","70244bd5":"markdown"},"source":{"5da44daa":"import numpy as np \nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom pandas import read_csv\ncolumn_names = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']\ndf = read_csv('..\/input\/boston-house-prices\/housing.csv', header=None, delimiter=r\"\\s+\", names=column_names)\nprint(data.head(5))","26d40684":"df.head(10)","5f721ffd":"df.info()","aedbe36c":"df.count()","ebd9fe1d":"tabcorr = df.corr()","f34b2f32":"plt.figure(figsize=(12,12))\nsns.heatmap(abs(tabcorr), cmap=\"coolwarm\")","7dd9f45b":"sns.clustermap(abs(tabcorr), cmap=\"coolwarm\")","39ed9b2d":"from scipy.cluster import hierarchy as hc\n\ncorr = 1 - df.corr()\ncorr_condensed = hc.distance.squareform(corr)\nlink = hc.linkage(corr_condensed, method='ward')\nplt.figure(figsize=(12,12))\nden = hc.dendrogram(link, labels=df.columns, orientation='left', leaf_font_size=10)","92c3ebb3":"correlations = tabcorr.MEDV\nprint(correlations)","820160b2":"correlations = correlations.drop(['MEDV'],axis=0)","8784354e":"print(abs(correlations).sort_values(ascending=False))","1c6fda37":"X = df.drop(['MEDV'], axis=1)\ny = df.MEDV\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","a4b389b6":"from sklearn.linear_model import LinearRegression","f4c67f50":"lm = LinearRegression()\nlm.fit(X_train, y_train)\ny_pred = lm.predict(X_test)","572f6957":"plt.figure(figsize=(12,12))\nplt.scatter(y_test, y_pred)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Prix\")\nplt.ylabel(\"Prediction de prix\")\nplt.title(\"Prix reels vs predictions\")","ed9fb95d":"sns.distplot(y_test-y_pred)","c303ccd4":"print(np.sqrt(mean_squared_error(y_test, y_pred)))","7220ff84":"scoreR2 = r2_score(y_test, y_pred)\nprint(scoreR2)","d3337543":"X = df.drop(['MEDV'], axis=1)\ny = df.MEDV\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","c59fda13":"from sklearn import ensemble\nrf = ensemble.RandomForestRegressor()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)\nprint(rf.score(X_test,y_test))","7c2cf6cf":"plt.figure(figsize=(12,12))\nplt.scatter(y_test, y_rf)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Prix\")\nplt.ylabel(\"Prediction de prix\")\nplt.title(\"Prix reels vs predictions\")","cc9dc536":"sns.distplot(y_test-y_rf)","c1d06f4e":"print(np.sqrt(mean_squared_error(y_test, y_rf)))","3941c4e2":"import xgboost as XGB\nxgb  = XGB.XGBRegressor()\nxgb.fit(X_train, y_train)\ny_xgb = xgb.predict(X_test)\nprint(xgb.score(X_test,y_test))\n\nplt.figure(figsize=(12,12))\nplt.scatter(y_test, y_xgb)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Prix\")\nplt.ylabel(\"Prediction de prix\")\nplt.title(\"Prix reels vs predictions\")","ec73b407":"## XGBRegressor","4e79c3c6":"Score R2 (rapport des variances estim\u00e9e\/r\u00e9elle) ","bc42abb0":"Calcule l'erreur sur les moindres carr\u00e9s","27d9e3f5":"Visualisation de la distribution de l'erreur avec seaborn","56f7f702":"On trace le nuage de points pour comparer la pr\u00e9diction et les r\u00e9sultats attendus","251a627b":"On s'int\u00e9resse plus pr\u00e9cisement \u00e0 la correlation par rapport \u00e0 la valeur des maisons","3e3197b1":"## Lecture du fichier","cd28d518":"## R\u00e9gression lin\u00e9aire multiple","4c8db10c":"### Regroupement des param\u00e8tres par clusters class\u00e9s par proximit\u00e9","2b2701a8":"On voit que la plus forte corr\u00e9lation est LSTAT soit le pourcentage de statut inf\u00e9rieur de la population","8ec0cfcf":"## Importations des librairies courantes","eea3293a":"* CRIM per capita crime rate by town\n* ZN proportion of residential land zoned for lots over 25,000 square feet\n* INDUS proportion of non-retail business acres per town\n* CHAS Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\n* NOX nitric oxides concentration (parts per 10 million)\n* RM average number of rooms per dwelling\n* AGE proportion of owner-occupied units built prior to 1940\n* DIS weighted distances to five Boston employment centres\n* RAD index of accessibility to radial highways\n* TAX full-value property-tax rate per 10,000 USD\n* PTRATIO pupil-teacher ratio by town\n* B 1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n* LSTAT % lower status of the population\n* MEDV - Median value of owner-occupied homes in 1000's USD","0684edd7":"On utilise la fonction de r\u00e9gression lin\u00e9aire multiple de sklearn ","d6181305":"On \u00e9limine la ligne MEDV elle-m\u00eame (qui est forc\u00e9ment \u00e0 1)","03909061":"## Recherche de corr\u00e9lations","b5c5888d":"## R\u00e9gression par for\u00eats al\u00e9atoires","0abbb48c":"### Dendrogramme des corr\u00e9lations entre les caract\u00e9ristiques","70244bd5":"On consid\u00e8re les valeurs absolues, et on trie par ordre d\u00e9croissant afin de montrer la corr\u00e9lation la plus forte"}}