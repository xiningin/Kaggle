{"cell_type":{"f28443f5":"code","da579d93":"code","5472b655":"code","31555bf0":"code","983f19c1":"code","714fbd58":"code","130ff017":"code","acabd427":"code","0cc39f78":"code","7f378911":"code","b1efe21d":"code","924d4089":"code","720ec594":"code","bb8a6d9a":"code","0d082690":"code","cf25ae3c":"code","c27eb264":"code","7077dd82":"code","6070c2c3":"code","87a1e4bb":"code","0d72a3ea":"code","d66df80f":"code","37f5e7fb":"code","9dbe9216":"code","149ef8fd":"code","2cc58829":"code","eb1c8c32":"code","b151e2e0":"code","1426f2f5":"code","2dc613ad":"code","7e1d438a":"code","54e6be23":"code","e0a38a51":"code","eb1cd67e":"code","1f5ae7f3":"code","23f9a882":"markdown"},"source":{"f28443f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","da579d93":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","5472b655":"df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","31555bf0":"df.info()","983f19c1":"df.head()","714fbd58":"df.Street.value_counts() #Given there are only 6 non-paved streets in the set, we will probably drop this variable ","130ff017":"df.corr()['SalePrice'] #looking for variables with a low correlation with salesprice to limit the data we have to consider","acabd427":"df.YrSold.value_counts() #We will drop this variable for predicting future sales prices, the events of 08\/09 would have rendered this variable largely useless for future years","0cc39f78":"#What we will drop now for low correlative values: OverallCond, BsmtFinSF2, LowQualFinSF, BsmtHalfBath, 3SsnPorch, PoolArea,YrSold\n#Some other variables have low values, but are related to an object variable elsewhere will have to consider these variables in concert","7f378911":"df.drop(['OverallCond','BsmtFinSF2','LowQualFinSF','BsmtHalfBath','3SsnPorch','PoolArea','YrSold'],axis=1, inplace=True)","b1efe21d":"df.head(25)","924d4089":"df.Utilities.value_counts() #Not useful given only 1 non 'AllPub' answer; also forgot to drop Street earlier, will do that ","720ec594":"df.drop(['Utilities','Street'], axis=1, inplace=True)","bb8a6d9a":"df = pd.get_dummies(df)","0d082690":"df","cf25ae3c":"subclass= ['MSSubClass']\ndf = pd.get_dummies(df, columns=subclass)","c27eb264":"df[df.LotFrontage.isnull()]","7077dd82":"df.dropna(inplace=True)","6070c2c3":"df.info()","87a1e4bb":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error, explained_variance_score","0d72a3ea":"X= df.drop(['Id','SalePrice',], axis=1)\ny=df.SalePrice\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)\n","d66df80f":"linearmodel = LinearRegression()\nlinearmodel.fit(X_train,y_train)","37f5e7fb":"predictions = linearmodel.predict(X_test)","9dbe9216":"plt.scatter(x=y_test, y=predictions)","149ef8fd":"print(\"Mean Absolute Error:\")\nprint(mean_absolute_error(y_test,predictions))\nprint(\"Explained Variance:\")\nprint(explained_variance_score(y_test,predictions))","2cc58829":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping","eb1c8c32":"from sklearn.preprocessing import StandardScaler","b151e2e0":"model = Sequential()\n\nmodel.add(Dense(300,activation ='relu'))\nmodel.add(Dropout(.5))\nmodel.add(Dense(300,activation ='relu'))\nmodel.add(Dropout(.5))\nmodel.add(Dense(300,activation ='relu'))\nmodel.add(Dropout(.5))\nmodel.add(Dense(300,activation ='relu'))\nmodel.add(Dropout(.5))\n\nmodel.add(Dense(1))\n\nmodel.compile(optimizer ='adam', loss='mse')\n\n\n","1426f2f5":"early_stop = EarlyStopping(monitor='val_loss', mode='min', verbose =3, patience=25)","2dc613ad":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","7e1d438a":"model.fit(X_train, y_train, epochs=500, callbacks = [early_stop], validation_data = (X_test,y_test))","54e6be23":"loss = pd.DataFrame(model.history.history)\n\nloss.plot()","e0a38a51":"pred = model.predict(X_test)","eb1cd67e":"plt.scatter(y_test,pred)","1f5ae7f3":"print(\"Mean Absolute Error:\")\nprint(mean_absolute_error(y_test,pred))\nprint(\"Explained Variance:\")\nprint(explained_variance_score(y_test,pred))","23f9a882":"***Overall, interesting results. I played with a few different activations for the neural net, and found leaky_relu and relu to perform best on this experiment. After multiple runs however, neither the Linear Regression or the Deep Learning technique either seemed to work better than the other on this dataset with any consistency. Sometimes one would slightly outperform the other, othertimes it would reverse. Both had very good agreement between SalePrice and predicted SalePrice for large amounts of the examples, however there were a few extreme outliers in either model***"}}