{"cell_type":{"51dbeee7":"code","388ce96d":"code","ab59bd1b":"code","91133ceb":"code","1f1ea829":"code","a2f1193f":"code","a8395880":"code","9bbc29e5":"code","43784500":"code","f9328f24":"code","9df14f18":"code","ee5d2a79":"code","97418785":"code","e3920a4b":"code","748a9fa7":"code","ee5ffe03":"code","9ba934eb":"markdown"},"source":{"51dbeee7":"import numpy as np \nimport pandas as pd\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\n\n\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import KernelCenterer\n\nfrom sklearn import svm","388ce96d":"import os\nprint(os.listdir(\"..\/input\"))","ab59bd1b":"data = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\nsubmition = pd.read_csv(\"..\/input\/sample_submission.csv\")","91133ceb":"input_label = np.array(data.get('TARGET_5Yrs'))\n\ndata = data.drop(['PlayerID','Name','TARGET_5Yrs'] ,axis=1)\ndata = data.fillna(data.mean())\n\ntest = test.drop(['PlayerID','Name'] ,axis=1)\ntest = test.fillna(test.mean())","1f1ea829":"# standizer = StandardScaler()\n\n# data[np.array(data.columns[:])] = standizer.fit_transform(data[np.array(data.columns[:])])\n# test[np.array(test.columns[:])] = standizer.transform(test[np.array(test.columns[:])])\n","a2f1193f":"quantile = QuantileTransformer(n_quantiles=3000)\ndata[np.array(data.columns[:])] = quantile.fit_transform(data[np.array(data.columns[:])])\ntest[np.array(test.columns[:])] = quantile.transform(test[np.array(test.columns[:])])","a8395880":"# rbs = RobustScaler()\n    \n# data[np.array(data.columns[:])] = rbs.fit_transform(data[np.array(data.columns[:])])\n# test[np.array(test.columns[:])] = rbs.fit_transform(test[np.array(test.columns[:])])","9bbc29e5":"# pca = PCA()\n\n# data[np.array(data.columns[:])] = pca.fit_transform(data[np.array(data.columns[:])])\n# test[np.array(test.columns[:])] = pca.fit_transform(test[np.array(test.columns[:])])","43784500":"# krc = KernelCenterer()\n\n# data[np.array(data.columns[:])] = krc.fit_transform(data[np.array(data.columns[:])])\n# test[np.array(test.columns[:])] = krc.transform(test[np.array(test.columns[:])])","f9328f24":"# kf = KFold(n_splits=5,shuffle=True)\n\n# random_forest_acc = 0\n# adaboost_acc = 0\n# extraRandom_acc = 0\n# svm_acc = 0\n# gradientBoosting_acc = 0 \n\n# for train_index, test_index in kf.split(data):\n\n#     X_train = data.filter(items=train_index, axis=0)\n#     X_test = data.filter(items=test_index, axis=0)\n    \n#     y_train = input_label[train_index]\n#     y_test = input_label[test_index]\n\n# #   for randomForest  \n#     random_forest_clf = RandomForestClassifier(n_estimators=50)\n#     random_forest_clf.fit(X_train, y_train)\n#     rand_given_labels = random_forest_clf.predict(X_test)\n#     random_forest_acc += accuracy_score(y_test, rand_given_labels)\n    \n# #   for AdaBoost  \n#     adaboost_clf = AdaBoostClassifier(n_estimators = 100,learning_rate=0.5)\n#     adaboost_clf.fit(X_train, y_train)\n#     ada_given_labels = adaboost_clf.predict(X_test)\n#     adaboost_acc += accuracy_score(y_test, ada_given_labels)\n# #   for extra random forest  \n#     extraRandom= ExtraTreesClassifier(n_estimators=100, max_depth=None,min_samples_split=2)\n#     extraRandom.fit(X_train, y_train)\n#     xrand_given_labels = extraRandom.predict(X_test)\n#     extraRandom_acc += accuracy_score(y_test, xrand_given_labels)    \n# #   for gradient boosting\n#     gradientBoosting_clf = GradientBoostingClassifier(n_estimators=350, learning_rate=.1,max_depth=1)\n#     gradientBoosting_clf.fit(X_train, y_train)\n#     gradientBoosting_given_labels = gradientBoosting_clf.predict(X_test)\n#     gradientBoosting_acc += accuracy_score(y_test, gradientBoosting_given_labels)    \n# #   for svm\n#     svm_clf = svm.SVC(C= 0.1 , kernel='linear')\n#     svm_clf.fit(X_train, y_train)\n#     svm_given_labels = svm_clf.predict(X_test)\n#     svm_acc += accuracy_score(y_test, svm_given_labels)    \n    ","9df14f18":"print('AdaBoost : {}'.format(adaboost_acc\/5))\nprint('RandomForest : {}'.format(random_forest_acc\/5))\nprint('ExtraRandomForest: {}'.format(extraRandom_acc\/5))\nprint('SVM : {}'.format(svm_acc\/5))\nprint('GradientBoostingClassifier : {}'.format(gradientBoosting_acc\/5))","ee5d2a79":"gradientBoosting_clf = GradientBoostingClassifier(n_estimators=350, learning_rate=.1,max_depth=1)\ngradientBoosting_clf.fit(data,input_label)\ngradientBoosting_given_labels = gradientBoosting_clf.predict(final)","97418785":" gradientBoosting_given_labels.reshape((1,440))","e3920a4b":"submition.iloc[:,1] = gradientBoosting_given_labels","748a9fa7":"submition.to_csv(\"submission_6.csv\", index=False)","ee5ffe03":"print(submition)","9ba934eb":"## GradientBoostingClassifier used for final prediction"}}