{"cell_type":{"b587a31a":"code","918d67a5":"code","7523f7e8":"code","af9097e4":"code","b6118e0e":"code","a8788bba":"code","963c4830":"code","fd97dd83":"code","25cd5098":"markdown","f0f553c2":"markdown","ced79735":"markdown","892556f3":"markdown","9ef5bfd3":"markdown","8925f2cb":"markdown","40182da0":"markdown","0e0084f4":"markdown","82fb8ea7":"markdown","4aecf5ed":"markdown"},"source":{"b587a31a":"!pip install openpyxl \nfrom numba import jit\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import f as ft\nfrom scipy.stats import t\nfrom time import time\nimport warnings\nfrom decimal import *\ngetcontext().prec = 6\nsns.set_style('whitegrid')\nwarnings.filterwarnings('ignore')\n#Pradhyumn\ndf = pd.read_excel('..\/input\/biostats\/data4.xlsx')\n# Sahana\n# df = pd.read_excel('\/Users\/Pradhyumn\/Downloads\/dataset_all.xlsx') \n# Ishaan\n#df = pd.read_excel('\/Users\/Pradhyumn\/Downloads\/data4.xlsx') \n\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\nstart = time()","918d67a5":"y_actual = list(df.Y)\n\na = 1.0\nb = -1.7\nc = 0.5\nd = 1.0\nh = 0.2\n\nparams = [a,b,c,d,h]\nE = 2\nlamd = 50\nstep = 1e-6","7523f7e8":"@jit(nopython = True)\ndef f(params,y_actual):\n    a = params[0] \n    b = params[1] \n    c = params[2] \n    d =  params[3] \n    h = params[4] \n    dx = 0.1\n    X = np.arange(0,10,dx)\n    y_pred = [0.0]    \n    for i in range(len(X)):\n        x = X[i]\n        y = y_pred[i]\n        estimate = y + (((d*(np.sin(x**2))) - a*np.sin(h*x*y) - b*np.cos(x*y**2) - c*np.sin(x*y**3))*dx)\n        y_pred.append(estimate)\n\n    y_pred = y_pred[:]\n    y_actual = y_actual[:]\n    chi2 = list(map(lambda x,y : (x - y)**2, y_actual, y_pred))\n    del_y = list(map(lambda x,y : (x - y), y_actual, y_pred))\n    sum = 0\n    for i in chi2:\n        sum = sum + i\n\n    return sum, np.array(y_pred), np.array(del_y)","af9097e4":"@jit(nopython = True)\ndef temp(params, y_actual):\n\n    dp = step\n    jmat = []\n    for i in range(5):\n        new_params = [i for i in params]\n        new_params[i] = params[i] + dp\n        # Derivative \n        jmat.append((f(new_params,y_actual)[1] - f(params,y_actual)[1])\/dp)\n        \n        \n    return jmat\n\ndef J(params):\n    return np.matrix(temp(params, y_actual)).T\n","b6118e0e":"_, y_pred, del_y = f(params,y_actual)\njmat = J(params)\ni = 0\ns = 1\nwhile (s > 1e-12):\n    \n    chi2_old = f(params,y_actual)[0]\n    del_y = del_y.reshape(-1,1)\n    params = np.array(params).reshape(-1,1)\n    new_params = params + ((jmat.T*jmat) + lamd * np.diag(np.diag(jmat.T * jmat)))**-1 * jmat.T * del_y\n    new_params = list(np.array(new_params).flatten())\n    params = list(params.flatten())\n    chi2_new = f(new_params, y_actual)[0]\n    \n    if chi2_new > chi2_old:\n        if lamd*E < 10**8:\n            lamd = lamd * E\n            s = abs(chi2_new - chi2_old)\n            \n    else:\n        if lamd \/ E > 10**-3:\n            lamd = lamd \/ E\n        params = new_params\n        jmat = J(params)\n        chi2_new, _, del_y = f(params,y_actual)\n        s = abs(chi2_new - chi2_old)\n        chi2_old = chi2_new\n        i = i+1\n    ","a8788bba":"y_pred = f(params,y_actual)[1]\n\n# Sum of Squared errors between mean Y and regression predictions\nSSR = np.sum((y_pred - np.mean(y_actual))**2)\nSSR_df = 1\nMSR = SSR\/SSR_df\n\n# Sum of Squared errors between actual values and regression predictions\nSSE = np.sum((y_pred - y_actual)**2)\nSSE_df = 101 - 1 - 1\nMSE = SSE\/SSE_df\n\n# Total sum of squared errors\nSST = SSE + SSR\nSST_df = SSE_df + SSR_df\nMST = MSE + MSR\n\n# R^2\nR_2 = SSR\/SSR\n\n# Adjusted R^2\nadjR_2 = 1 - (1-R_2) * (101-1) \/ (101-1-1)\n\n# Root Mean Squared Error\nRMSE = (SSE \/ (101-1-1))**0.5\n\n#Performing F test for checking if difference in variance is significant\nF = MSR\/MSE\npvalue_F = (1 - ft.cdf(F,SSR_df,SSE_df))*2\n\nindex = ['SSR', 'SSE', 'Total']\nAnova = pd.DataFrame([SSR,SSE,SST], index = index, columns = ['Sum of Squares'])\nAnova['df'] = [SSR_df,SSE_df,SST_df]\nAnova['Mean Error'] = [MSR,MSE,MST]\nAnova\nprint(f'\\nF Score : {F}\\np value : {pvalue_F}\\nR_2 : {R_2}\\nAdjusted R_2 : {adjR_2}\\nRMSE : {RMSE}')","963c4830":"cov_mat = (jmat.T*jmat)**-1 * SSE \/ (101-1-1)\ncov_diag = np.diag(cov_mat)\nstd_err = cov_diag**0.5\nt_vals = np.array(params) \/ std_err\n\np_vals1 = ((1- t.cdf(t_vals, 101-1-1))*2)\np_vals2 = (t.cdf(t_vals, 101-1-1))*2\np_vals = [min(a,b) for a,b in zip(p_vals1, p_vals2)]\n\nalpha = 0.02563\nstd_alpha = abs(t.ppf(alpha\/2,101-1-1))*std_err\n\nindex = ['a','b','c','d','h']\nerr = pd.DataFrame(params, index = index, columns = ['Value'])\nerr['Std Error'] = std_err\nerr['t value'] = t_vals\nerr['p value'] = p_vals\nerr['Error at 2.563%'] = std_alpha\nerr\n\nprint(f'Covarinace [4,4] = {cov_mat[4,4]}')\nprint(f'Lambda = {lamd}')\nprint(f'Iterations = {i}')\n","fd97dd83":"pred = f(params,y_actual)[1]\nplt.figure(figsize = (30,10));\nplt.scatter(x = df.X, y = df.Y, facecolor = 'red', edgecolor = 'red', s = 300, label = 'actual');\nplt.scatter(x = df.X, y = pred, facecolor = 'blue', edgecolor = 'blue', s = 300, label = 'predicted');\nplt.legend(prop = {\"size\" : 30})\nplt.show()\nend = time()\nprint(f'Time to run : {end - start}')","25cd5098":"## Visualize!","f0f553c2":"##  Marquart-Levenberg Algorithm","ced79735":"## Error Analysis","892556f3":"$ \\frac{df(x)}{d(x)} = dsin(x^2) - a\\sin(hxf(x)) - bcos(x{f(x)}^2) - csin(x{f(x)}^3) $","9ef5bfd3":"## Differential Equation","8925f2cb":"## Initializing params","40182da0":"## $\\chi^2$","0e0084f4":"## Anova","82fb8ea7":"## Jacobian","4aecf5ed":"## Imports"}}