{"cell_type":{"57a3e50a":"code","c1e1c5c3":"code","08aee6c7":"code","84e48169":"code","68c61b5f":"code","db5ae89d":"code","86a80153":"code","2d7a823c":"code","b2c922c9":"code","9af09ce7":"code","d2168fee":"code","1b8e46cc":"code","801c3cd9":"code","198e662d":"code","03021d43":"code","40b67cc1":"code","d72c505d":"markdown"},"source":{"57a3e50a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c1e1c5c3":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom tqdm import tqdm\nimport gc\nimport matplotlib.pyplot as plt\nimport shap\nimport xgboost as xgb\nprint(xgb.__version__)\n\n# load JS visualization code to notebook\nshap.initjs()","08aee6c7":"train = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/test.csv')\nsub = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/sample_submission.csv')\ntrain.head()","84e48169":"columns = test.columns[1:]\ncolumns","68c61b5f":"target = train['loss'].values\ntrain_oof = np.zeros((train.shape[0],))\ntest_preds = 0\ntrain_oof_shap = np.zeros((train.shape[0],train.shape[1]-1))\ntest_preds_shap = 0\ntrain_oof.shape","db5ae89d":"xgb_params= {\n        \"objective\": \"reg:squarederror\",\n        \"max_depth\": 4,\n        \"learning_rate\": 0.004325,\n        \"colsample_bytree\": 0.4,\n        \"subsample\": 0.8,\n        \"reg_alpha\" : 0.4,\n        \"reg_lambda\" : 2e-08,\n        \"n_jobs\": 2,\n        \"seed\": 2021,\n        'tree_method': \"gpu_hist\",\n        \"gpu_id\": 0,\n        'predictor': 'gpu_predictor'\n    }","86a80153":"test = xgb.DMatrix(test[columns])","2d7a823c":"NUM_FOLDS = 2\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=0)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(train, target))):\n        #print(f'Fold {f}')\n        train_df, val_df = train.iloc[train_ind][columns], train.iloc[val_ind][columns]\n        train_target, val_target = target[train_ind], target[val_ind]\n        \n        train_df = xgb.DMatrix(train_df, label=train_target)\n        val_df = xgb.DMatrix(val_df, label=val_target)\n        \n        model =  xgb.train(xgb_params, train_df, 25000)\n        temp_oof = model.predict(val_df)\n        temp_oof_shap = model.predict(val_df, pred_contribs=True)\n        temp_test = model.predict(test)\n        temp_test_shap = model.predict(test, pred_contribs=True)\n\n        train_oof[val_ind] = temp_oof\n        test_preds += temp_test\/NUM_FOLDS\n        \n        train_oof_shap[val_ind, :] = temp_oof_shap\n        test_preds_shap += temp_test_shap\/NUM_FOLDS\n        \n        print(mean_squared_error(temp_oof, val_target, squared=False))","b2c922c9":"mean_squared_error(train_oof, target, squared=False)","9af09ce7":"np.save('train_oof', train_oof)\nnp.save('test_preds', test_preds)\nnp.save('train_oof_shap', train_oof_shap)\nnp.save('test_preds_shap', test_preds_shap)","d2168fee":"train = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/test.csv')","1b8e46cc":"# summarize the effects of all the features\nshap.summary_plot(train_oof_shap[:,:-1], train[columns])","801c3cd9":"shap.summary_plot(train_oof_shap[:,:-1], train[columns], plot_type=\"bar\")","198e662d":"# summarize the effects of all the features\nshap.summary_plot(test_preds_shap[:,:-1], test[columns])","03021d43":"shap.summary_plot(test_preds_shap[:,:-1], test[columns], plot_type=\"bar\")","40b67cc1":"#%%time\n#shap_interactions = model.predict(xgb.DMatrix(test[columns]), pred_interactions=True)\nsub['loss'] = test_preds\nsub.to_csv('submission.csv', index=False)","d72c505d":"**if you like the notbook dont forget to up vote and feel free to share ur valuable feedback ..!**"}}