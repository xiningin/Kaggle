{"cell_type":{"e5b3594f":"code","b687041d":"code","3cf6933f":"code","5e2a155f":"code","35f99e61":"code","039f9abf":"code","cddb5343":"code","7f81165c":"code","db9f2151":"code","a80bb603":"code","78b84f1f":"code","dfd17a23":"code","bb13d020":"code","881eb4f1":"code","1298fd69":"code","eb79b875":"code","76693d15":"code","e317ec19":"code","883b07b9":"code","24d5a5b6":"code","5205c3f5":"code","477868cc":"code","7f548d28":"code","4c06a24f":"code","5bb0c00f":"code","089268d4":"code","8c9ff2c3":"code","8840d81c":"code","4ce85c04":"code","0266c203":"markdown","82e96d51":"markdown","fc99be57":"markdown","640d47bb":"markdown","2a897ca5":"markdown","846a3508":"markdown"},"source":{"e5b3594f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b687041d":"import matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nfrom tqdm import tqdm","3cf6933f":"df = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')","5e2a155f":"price_df = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sell_prices.csv\")","35f99e61":"df.head()","039f9abf":"price_df.head()","cddb5343":"cal_df = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/calendar.csv\")","7f81165c":"cal_df.head()","db9f2151":"cal_df[\"d\"]=cal_df[\"d\"].apply(lambda x: int(x.split(\"_\")[1]))\nprice_df[\"id\"] = price_df[\"item_id\"] + \"_\" + price_df[\"store_id\"] + \"_validation\"","a80bb603":"for day in tqdm(range(1858, 1886)):\n    wk_id = list(cal_df[cal_df[\"d\"]==day][\"wm_yr_wk\"])[0]\n    wk_price_df = price_df[price_df[\"wm_yr_wk\"]==wk_id]\n    df = df.merge(wk_price_df[[\"sell_price\", \"id\"]], on=[\"id\"], how='inner')\n    df[\"unit_sales_\" + str(day)] = df[\"sell_price\"] * df[\"d_\" + str(day)]\n    df.drop(columns=[\"sell_price\"], inplace=True)","78b84f1f":"df[\"dollar_sales\"] = df[[c for c in df.columns if c.find(\"unit_sales\")==0]].sum(axis=1)","dfd17a23":"df.drop(columns=[c for c in df.columns if c.find(\"unit_sales\")==0], inplace=True)","bb13d020":"df[\"weight\"] = df[\"dollar_sales\"] \/ df[\"dollar_sales\"].sum()","881eb4f1":"df.drop(columns=[\"dollar_sales\"], inplace=True)","1298fd69":"for d in range(1886, 1914):\n    df[\"F_\" + str(d)] = 0","eb79b875":"agg_df = pd.DataFrame(df[[c for c in df.columns if c.find(\"d_\") == 0 or c.find(\"F_\") == 0]].sum()).transpose()\nagg_df[\"level\"] = 1\nagg_df[\"weight\"] = 1\/12\ncolumn_order = agg_df.columns","76693d15":"agg_df","e317ec19":"level_groupings = {2: [\"state_id\"], 3: [\"store_id\"], 4: [\"cat_id\"], 5: [\"dept_id\"], \n              6: [\"state_id\", \"cat_id\"], 7: [\"state_id\", \"dept_id\"], 8: [\"store_id\", \"cat_id\"], 9: [\"store_id\", \"dept_id\"],\n              10: [\"item_id\"], 11: [\"item_id\", \"state_id\"]}","883b07b9":"df.groupby(by=level_groupings[11]).sum()","24d5a5b6":"for level in tqdm(level_groupings):\n    temp_df = df.groupby(by=level_groupings[level]).sum().reset_index(drop=True)\n    temp_df[\"level\"] = level\n    temp_df[\"weight\"] \/= 12\n    agg_df = agg_df.append(temp_df[column_order])\n\ndel temp_df","5205c3f5":"df[\"weight\"] \/= 12","477868cc":"print(df.shape[0], agg_df.shape[0], df.shape[0] + agg_df.shape[0])","7f548d28":"agg_df[\"weight\"].sum() + df[\"weight\"].sum()","4c06a24f":"h = 28\nn = 1885\ndef rmsse(ground_truth, forecast, train_series, axis=1):\n    # assuming input are numpy array or matrices\n    assert axis == 0 or axis == 1\n    assert type(ground_truth) == np.ndarray and type(forecast) == np.ndarray and type(train_series) == np.ndarray\n    \n    if axis == 1:\n        # using axis == 1 we must guarantee these are matrices and not arrays\n        assert ground_truth.shape[1] > 1 and forecast.shape[1] > 1 and train_series.shape[1] > 1\n    \n    numerator = ((ground_truth - forecast)**2).sum(axis=axis)\n    if axis == 1:\n        denominator = 1\/(n-1) * ((train_series[:, 1:] - train_series[:, :-1]) ** 2).sum(axis=axis)\n    else:\n        denominator = 1\/(n-1) * ((train_series[1:] - train_series[:-1]) ** 2).sum(axis=axis)\n    return (1\/h * numerator\/denominator) ** 0.5","5bb0c00f":"train_series_cols = [c for c in df.columns if c.find(\"d_\") == 0][:-28]\nground_truth_cols = [c for c in df.columns if c.find(\"d_\") == 0][-28:]\nforecast_cols = [c for c in df.columns if c.find(\"F_\") == 0]","089268d4":"df[\"rmsse\"] = rmsse(np.array(df[ground_truth_cols]), \n                   np.array(df[forecast_cols]), np.array(df[train_series_cols]))\nagg_df[\"rmsse\"] = rmsse(np.array(agg_df[ground_truth_cols]), \n                   np.array(agg_df[forecast_cols]), np.array(agg_df[train_series_cols]))","8c9ff2c3":"# for row_idx in range(len(df)):\n#     row_df = pd.DataFrame(df.iloc[row_idx]).transpose()\n#     train_series = np.array(row_df[train_series_cols].transpose()[row_idx])\n#     ground_truth_series = np.array(row_df[ground_truth_cols].transpose()[row_idx])\n#     forecast_series = np.array(row_df[forecast_cols].transpose()[row_idx])\n#     print(rmsse(ground_truth_series, forecast_series, train_series, axis=0))","8840d81c":"df[\"wrmsse\"] = df[\"weight\"] * df[\"rmsse\"]\nagg_df[\"wrmsse\"] = agg_df[\"weight\"] * agg_df[\"rmsse\"]","4ce85c04":"df[\"wrmsse\"].sum() + agg_df[\"wrmsse\"].sum()","0266c203":"## 4. Calculalte RMSSE for all series using the equation","82e96d51":"## 2. Use the naive logic to make forecasts for each of the level 12 series\n- All 0s\n- Average through all history\n- Same as previous 28 days\n- Mean of previous 10, 20, 30, 40, 50, 60 days\n- Average of same day for all previous weeks****","fc99be57":"## 1. Calculate weight for the level 12 series","640d47bb":"## 3. Infer forecast, ground truth values, and weights for all the higher level series by aggregating","2a897ca5":"\t1. Calculate weight for the level 12 series\n\t2. Use the naive logic to make forecasts for each of the level 12 series\n\t3. Infer forecast, ground truth values, and weights for all the higher level series by aggregating\n\t4. Calculalte RMSSE for all series using the equation\n\t5. Multiply weight by respective RMSSE and add all these products","846a3508":"## 0. Import libraries and read in data"}}