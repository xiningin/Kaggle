{"cell_type":{"a4ad3d36":"code","f0b6ddd8":"code","13e7fa81":"code","b7f465fc":"code","efcf9f35":"code","696673fe":"code","1c1f7a51":"code","8f3d33f3":"code","b06bdea9":"code","e94c860a":"code","f1bf91e3":"code","f27c5169":"code","9a95a3d8":"code","2a1c6e99":"code","8133295f":"code","d8d0532c":"code","d0f4c8f5":"code","3b4bec0b":"code","1568f923":"code","a21d4a29":"code","973f787b":"code","c9a83bca":"code","8824d073":"code","d3e27208":"code","33b937da":"code","5d17621e":"markdown","6002ce5a":"markdown","21b561b6":"markdown","983f4127":"markdown","3bc5698d":"markdown","11af652c":"markdown","ddf93b12":"markdown","9d6618e5":"markdown","219e0d37":"markdown","7ae907fe":"markdown","a880ac7d":"markdown"},"source":{"a4ad3d36":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.lines as lines\nimport pydicom\n\nfrom glob import glob\n\nplt.style.use('ggplot')","f0b6ddd8":"def level(mean, std):\n    return mean + 1.7 * std\n\ndef read_dicom_files(cohort, case, mpMRI):\n    PATH = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification'\n    files_glob = f'{PATH}\/{cohort}\/{case}\/{mpMRI}\/*.dcm'\n    sorted_files = sorted(glob(files_glob),key=lambda f: int(f.split('Image-')[1].split('.')[0]))\n    return [pydicom.read_file(f) for f in sorted_files]\n\ndef image_orientation(dicom):\n    rt = 'unkown'\n    # https:\/\/www.kaggle.com\/davidbroberts\/determining-mr-image-planes\n    (x1,y1,_,x2,y2,_) = [round(v) for v in dicom.ImageOrientationPatient]\n    if (x1,y1,x2,y2) == (1,0,0,0):\n        rt = 'coronal'\n    if (x1,y1,x2,y2) == (1,0,0,1):\n        rt = 'axial'\n    if (x1,y1,x2,y2) == (0,1,0,0):\n        rt = 'sagittal'\n    \n    if rt == 'unkown':\n        raise ValueError(f'unkown ImageOrientationPatient: {dicom.ImageOrientationPatient}')\n        \n    return rt\n\ndef stats_image(image):\n    noncero_pixels = image[np.nonzero(image)]\n    if noncero_pixels.shape == (0,):\n        mean = 0\n        std = 0\n    else:\n        mean = np.mean(noncero_pixels)\n        std = np.std(noncero_pixels)\n    return (mean,std)\n\ndef calc_idx(image):\n    (mean,std) = stats_image(image)\n    non_cero_pixels = np.count_nonzero(image > level(mean,std))\n    return non_cero_pixels\n    \ndef top_brilliant_image(images):\n    idx = [calc_idx(image) for image in images]\n    top_image = np.argsort(idx)[::-1][0]\n    return top_image\n\ndef top_brilliant_line(image, axis):\n    (mean,std) = stats_image(image)\n    non_cero_pixels = np.count_nonzero(image > level(mean,std),  axis=axis)\n    top_line = np.argsort(non_cero_pixels)[::-1][0]\n    return top_line\n\ndef normalize_image(image):\n    (mean,std) = stats_image(image)\n    image = (image - mean) \/ std\n    return image\n\ndef cropped_image(image):\n    noncero_pixels = image[np.nonzero(image)]\n    if noncero_pixels.shape == (0,):\n        return image\n    min=np.array(np.nonzero(image)).min(axis=1)\n    max=np.array(np.nonzero(image)).max(axis=1)\n    return image[min[0]:max[0],min[1]:max[1]]\n\ndef cropped_images(images):\n    min=np.array(np.nonzero(images)).min(axis=1)\n    max=np.array(np.nonzero(images)).max(axis=1)\n    return images[min[0]:max[0],min[1]:max[1],min[2]:max[2]]\n\ndef calc_center(dicom_file, r, c):\n    orientation = image_orientation(dicom_file)\n    if orientation == 'coronal':\n        center = [dicom_file.ImagePositionPatient[0] + dicom_file.PixelSpacing[0] * c,\n                  dicom_file.ImagePositionPatient[1],\n                  dicom_file.ImagePositionPatient[2] - dicom_file.PixelSpacing[1] * r]\n\n    if orientation == 'sagittal':\n        center = [dicom_file.ImagePositionPatient[0],\n                  dicom_file.ImagePositionPatient[1] + dicom_file.PixelSpacing[0] * c,\n                  dicom_file.ImagePositionPatient[2] - dicom_file.PixelSpacing[1] * r]\n        \n    if orientation == 'axial':\n        center = [dicom_file.ImagePositionPatient[0] + dicom_file.PixelSpacing[0] * c,\n                  dicom_file.ImagePositionPatient[1] + dicom_file.PixelSpacing[0] * r,\n                  dicom_file.ImagePositionPatient[2]]\n\n    return center\n\ndef find_nearest_scan(dicom_files, center):\n    axis_move = {'sagittal': 0, 'coronal': 1, 'axial': 2}\n    orientation = image_orientation(dicom_files[0])\n    a = np.array([f.ImagePositionPatient for f in dicom_files])\n    scan = np.argsort(np.abs(a - center),axis=0)[0][axis_move[orientation]]\n    return scan\n\ndef plot_image_hist(image):\n    pixels = image.ravel()\n    noncero_pixels = pixels[np.nonzero(pixels)]\n    (mean,std) = stats_image(noncero_pixels)\n    noncero_pixels = (noncero_pixels - mean) \/ std\n    (mean,std) = stats_image(noncero_pixels)\n    over_threshold = np.count_nonzero(noncero_pixels > level(mean, std))\n\n    fig, (axi, axh) = plt.subplots(1, 2, figsize = (20,3), gridspec_kw={'width_ratios': [1, 4]})\n    fig.suptitle(f'scan # ({over_threshold})')\n\n    axh.hist(noncero_pixels, 200)\n    axh.set_xlim(-5,5)\n\n    ax_limits = axh.get_ylim()\n    axh.vlines(mean, ymin=ax_limits[0], ymax=ax_limits[1], colors='b')\n    axh.vlines(mean+std, ymin=ax_limits[0], ymax=ax_limits[1], colors='b', linestyles='dotted')\n    axh.vlines(level(mean, std), ymin=ax_limits[0], ymax=ax_limits[1], colors='b', linestyles='dashed')\n    axi.imshow(image, cmap = plt.cm.gray)\n    axi.grid(False)\n    axi.axis('off')\n    plt.show()\n\n","13e7fa81":"cohort = 'train'\ncase = '00386'\n\nflair_dicom_files = read_dicom_files(cohort, case, 'FLAIR')\nt1w_dicom_files = read_dicom_files(cohort, case, 'T1w')\nt1wce_dicom_files = read_dicom_files(cohort, case, 'T1wCE')\nt2w_dicom_files = read_dicom_files(cohort, case, 'T2w')","b7f465fc":"flair_orientation = image_orientation(flair_dicom_files[0])\nflair_nscans = len(flair_dicom_files)\nt1w_orientation = image_orientation(t1w_dicom_files[0])\nt1w_nscans = len(t1w_dicom_files)\nt1wce_orientation = image_orientation(t1wce_dicom_files[0])\nt1wce_nscans = len(t1wce_dicom_files)\nt2w_orientation = image_orientation(t2w_dicom_files[0])\nt2w_nscans = len(t2w_dicom_files)\n\nprint(f\"FLAIR: {flair_orientation}, {flair_nscans} scans\")\nprint(f\"T1w: {t1w_orientation}, {t1w_nscans} scans\")\nprint(f\"T1wce: {t1wce_orientation}, {t1wce_nscans} scans\")\nprint(f\"T2w: {t2w_orientation}, {t2w_nscans} scans\")","efcf9f35":"# test: all dicom files must be of the same patient\nassert flair_dicom_files[0].PatientID == t1w_dicom_files[0].PatientID\nassert flair_dicom_files[0].PatientID == t1wce_dicom_files[0].PatientID\nassert flair_dicom_files[0].PatientID == t2w_dicom_files[0].PatientID","696673fe":"flair_images = cropped_images(np.array([s.pixel_array for s in flair_dicom_files]))\nt1wce_images = cropped_images(np.array([s.pixel_array for s in t1wce_dicom_files]))\nt1w_images = cropped_images(np.array([s.pixel_array for s in t1w_dicom_files]))\nt2w_images = cropped_images(np.array([s.pixel_array for s in t2w_dicom_files]))","1c1f7a51":"import plotly.express as px\n\nfig = px.imshow(flair_images, animation_frame=0, binary_string=True, labels=dict(x=\"FLAIR Images\",animation_frame=\"scan\"), height=800)\nfig.show()","8f3d33f3":"fig = px.imshow(t1w_images, animation_frame=0, binary_string=True, labels=dict(x=\"T1w Images\",animation_frame=\"scan\"), height=800)\nfig.show()","b06bdea9":"fig = px.imshow(t1wce_images, animation_frame=0, binary_string=True, labels=dict(x=\"T1wCE Images\",animation_frame=\"scan\"), height=800)\nfig.show()","e94c860a":"fig = px.imshow(t2w_images, animation_frame=0, binary_string=True, labels=dict(x=\"T2w Images\",animation_frame=\"scan\"), height=800)\nfig.show()","f1bf91e3":"for img in flair_images:\n    plot_image_hist(img)","f27c5169":"flair_images = np.array([s.pixel_array for s in flair_dicom_files])\n\ntop = top_brilliant_image(flair_images)\ntop","9a95a3d8":"from pydicom.pixel_data_handlers.util import apply_voi_lut\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize = (20,10))\nfig.suptitle('normalized image vs VOI LUT image')\n\nimage = flair_images[top]\nax1.imshow(image, cmap = plt.cm.gray)\n\nim = apply_voi_lut(flair_dicom_files[top].pixel_array, flair_dicom_files[top])\nax2.imshow(im, cmap = plt.cm.gray)\n\nplt.show()","2a1c6e99":"(top,flair_dicom_files[top].ImagePositionPatient)","8133295f":"rtop = top_brilliant_line(flair_images[top], axis=1)\nctop = top_brilliant_line(flair_images[top], axis=0)\n\n(rtop,ctop)","d8d0532c":"center = calc_center(flair_dicom_files[top], rtop, ctop)\ncenter","d0f4c8f5":"scan_t1wce = find_nearest_scan(t1wce_dicom_files, center)\n(t1wce_orientation, scan_t1wce, t1wce_dicom_files[scan_t1wce].ImagePositionPatient)","3b4bec0b":"scan_t1w = find_nearest_scan(t1w_dicom_files, center)\n(t1w_orientation, scan_t1w, t1w_dicom_files[scan_t1w].ImagePositionPatient)","1568f923":"scan_t2w = find_nearest_scan(t2w_dicom_files, center)\n(t2w_orientation, scan_t2w, t2w_dicom_files[scan_t2w].ImagePositionPatient)","a21d4a29":"fig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2, 2, figsize = (20,20))\nfig.suptitle('images')\n\nim = normalize_image(cropped_image(flair_dicom_files[top].pixel_array))\nax1.imshow(im, cmap = plt.cm.gray)\nax1.set_title(f'FLAIR #scan {top}')\n\nim = normalize_image(cropped_image(t1w_dicom_files[scan_t1w].pixel_array))\nax2.imshow(im, cmap = plt.cm.gray)\nax2.set_title(f'T1w #scan {scan_t1w}')\n\nim = normalize_image(cropped_image(t1wce_dicom_files[scan_t1wce].pixel_array))\nax3.imshow(im, cmap = plt.cm.gray)\nax3.set_title(f'T1wCE #scan {scan_t1wce}')\n\nim = normalize_image(cropped_image(t2w_dicom_files[scan_t2w].pixel_array))\nax4.imshow(im, cmap = plt.cm.gray)\nax4.set_title(f'T2w #scan {scan_t2w}')\n\nplt.show()","973f787b":"def process_case_and_plot(cohort, case):\n    flair_dicom_files = read_dicom_files(cohort, case, 'FLAIR')\n    t1w_dicom_files = read_dicom_files(cohort, case, 'T1w')\n    t1wce_dicom_files = read_dicom_files(cohort, case, 'T1wCE')\n    t2w_dicom_files = read_dicom_files(cohort, case, 'T2w')\n    \n    flair_images = np.array([s.pixel_array for s in flair_dicom_files])\n    \n    top = top_brilliant_image(flair_images)\n    rtop = top_brilliant_line(flair_images[top], axis=1)\n    ctop = top_brilliant_line(flair_images[top], axis=0)\n\n    center = calc_center(flair_dicom_files[top], rtop, ctop)\n        \n    scan_t1w = find_nearest_scan(t1w_dicom_files, center)\n    scan_t1wce = find_nearest_scan(t1wce_dicom_files, center)\n    scan_t2w = find_nearest_scan(t2w_dicom_files, center)\n\n    flair_image = normalize_image(cropped_image(flair_dicom_files[top].pixel_array))\n    t1w_image = normalize_image(cropped_image(t1w_dicom_files[scan_t1w].pixel_array))\n    t1wce_image = normalize_image(cropped_image(t1wce_dicom_files[scan_t1wce].pixel_array))\n    t2w_image = normalize_image(cropped_image(t2w_dicom_files[scan_t2w].pixel_array))\n\n    fig, (ax1,ax2,ax3,ax4) = plt.subplots(1, 4, figsize = (20,5))\n    fig.suptitle(f'Case {case}')\n    \n    ax1.imshow(flair_image, cmap = plt.cm.gray)\n    ax1.set_title(f'FLAIR #scan {top}')\n    ax1.grid(False)\n\n    ax2.imshow(t1w_image, cmap = plt.cm.gray)\n    ax2.set_title(f'T1w #scan {scan_t1w}')\n    ax2.grid(False)\n    \n    ax3.imshow(t1wce_image, cmap = plt.cm.gray)\n    ax3.set_title(f'T1wCE #scan {scan_t1wce}')\n    ax3.grid(False)\n\n    ax4.imshow(t2w_image, cmap = plt.cm.gray)\n    ax4.set_title(f'T2w #scan {scan_t2w}')\n    ax4.grid(False)\n\n    plt.show()","c9a83bca":"train = pd.read_csv('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv', converters = {'BraTS21ID': str,})","8824d073":"cohort = 'train'\nfor case in train.sample(10).BraTS21ID:\n    process_case_and_plot(cohort, case)","d3e27208":"test = pd.read_csv('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/sample_submission.csv', converters = {'BraTS21ID': str,})","33b937da":"cohort = 'test'\nfor case in test.sample(10).BraTS21ID:\n    process_case_and_plot(cohort, case)","5d17621e":"### FLAIR Images (Histogram)","6002ce5a":"### Hypothesis","21b561b6":"### Basic Information","983f4127":"### Images","3bc5698d":"### Top brilliant Image in FLAIR serie","11af652c":"### Example DICOM File","ddf93b12":"### Test: train cohort","9d6618e5":"### Equivalent scan in other series","219e0d37":"### Test: test cohort","7ae907fe":"Tumor is seeing like a brilliant zone in FLAIR images","a880ac7d":"### Center of brilliant image "}}