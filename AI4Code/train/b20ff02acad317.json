{"cell_type":{"81fca71b":"code","0a9c45c8":"code","1e9094ee":"code","ec2a513a":"code","91e52e02":"code","89d1c13f":"code","3c81a6a0":"code","f7dcc892":"code","6d12aa53":"code","d6ad8a83":"code","5ce79857":"code","450cf2fd":"code","b8af44c3":"code","4faa7119":"code","af42194b":"code","5b0cde4f":"code","e205171c":"code","367f959c":"code","7f5ae2a5":"code","a3fb73b6":"markdown","edadb0ff":"markdown","81ab688e":"markdown","b59cf612":"markdown","02303a28":"markdown","aec1039e":"markdown","fdd5689f":"markdown","030c5790":"markdown","dbb9ab40":"markdown","4a3d8769":"markdown"},"source":{"81fca71b":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import LeaveOneOut, cross_validate, cross_val_predict, GridSearchCV, KFold\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.svm import SVR\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n%matplotlib inline","0a9c45c8":"df = pd.read_csv('..\/input\/3dprinter\/data.csv') \n\ndf.head()","1e9094ee":"categorical = ['infill_pattern','material']\n\ndummies = pd.get_dummies(df[categorical], drop_first=True)\ndf.drop(categorical, axis=1, inplace=True)\ndf = pd.concat([dummies, df], axis=1)\n\ncat_dummies = list(dummies.columns)","ec2a513a":"def vis_corr(df):\n    corr = df.corr()\n    mask = np.zeros_like(corr)\n    mask[np.triu_indices_from(mask)] = True\n    plt.figure(figsize=(12, 6))\n    sns.heatmap(df.corr(), cmap = 'RdBu', center=0., fmt = '.2f', annot=True, mask=mask)\n    \nvis_corr(df)","91e52e02":"sns.lmplot(data=df, x='nozzle_temperature', y='tension_strenght', hue='material_pla');","89d1c13f":"sns.lmplot(data=df, x='bed_temperature', y='tension_strenght', hue='material_pla');","3c81a6a0":"df.drop('fan_speed', axis = 1, inplace = True)\n\ndf1 = df.copy()\nseries1 = (df1['nozzle_temperature'] + df1['bed_temperature']) * 0.5\n\ndf1.insert(5, 'mean_temperature', series1)\n\ndf1.drop(['nozzle_temperature', 'bed_temperature','infill_pattern_honeycomb'], axis=1, inplace=True)","f7dcc892":"vis_corr(df1)","6d12aa53":"outputs = ['roughness', 'tension_strenght', 'elongation']\ninputs = [c for c in df.columns if c not in outputs]\ninputs1 = [c for c in df1.columns if c not in outputs]","d6ad8a83":"numerical_df = [c for c in inputs if c not in cat_dummies]\nnumerical_df1 = [c for c in inputs1 if c not in cat_dummies]\n\nct_df = ColumnTransformer(\n       [('scaler', StandardScaler(), numerical_df)],\nremainder='passthrough')\n\nct_df1 = ColumnTransformer(\n       [('scaler', StandardScaler(), numerical_df1)],\nremainder='passthrough')","5ce79857":"pd.DataFrame(ct_df.fit_transform(df[inputs]), columns= numerical_df + cat_dummies).head()","450cf2fd":"model_df = Pipeline(\n    [('transform', ct_df),\n     ('estimator', SVR(kernel='rbf'))]\n)\n\nmodel_df1 = Pipeline(\n    [('transform', ct_df1),\n     ('estimator', SVR(kernel='rbf'))]\n)\n\nparams_grid = {'estimator__C': np.logspace(0, 3, 4),\n               'estimator__gamma': list(np.logspace(-2, 1, 4)),\n               'estimator__epsilon': [0.0001, 0.001, 0.01]}\n\nmetric = 'neg_root_mean_squared_error'\n\ncv_grid_df = GridSearchCV(model_df, params_grid, scoring=metric, cv=LeaveOneOut(), verbose=1)\ncv_grid_df1 = GridSearchCV(model_df1, params_grid, scoring=metric, cv=LeaveOneOut(), verbose=1)","b8af44c3":"cv_grid_df.fit(df[inputs], df[outputs[1]])\ncv_grid_df1.fit(df1[inputs1], df1[outputs[1]])","4faa7119":"cv_grid_df.best_score_, cv_grid_df1.best_score_ ","af42194b":"cv_grid_df.best_params_, cv_grid_df1.best_params_","5b0cde4f":"params = cv_grid_df.best_params_\n\nparams = {p.split('_')[-1]:v for p,v in params.items()}","e205171c":"model_df = SVR(**params).fit(df[inputs], df[outputs[1]])\nmodel_df1 = SVR(**params).fit(df1[inputs1], df[outputs[1]])","367f959c":"y_pred = model_df.predict(df[inputs])\ny_pred1 = model_df1.predict(df1[inputs1])\n\nk = len(df[inputs].columns)\nk1 = len(df1[inputs1].columns)\n\nrmse = (mean_squared_error(df[outputs[1]], y_pred))**0.5\nrmse1 = (mean_squared_error(df[outputs[1]], y_pred1))**0.5","7f5ae2a5":"print('CV RMSE'.center(30, '-'), end='\\n\\n')\nprint(f'{k} Parameter Model: {-cv_grid_df.best_score_:.3f}')\nprint(f'{k1} Parameter Model: {-cv_grid_df1.best_score_:.3f}\\n')\n\nprint('TRAIN RMSE'.center(30, '-'), end='\\n\\n')\nprint(f'{k} Parameter Model: {rmse:.2e}')\nprint(f'{k1} Parameter Model: {rmse1:.2e}\\n')","a3fb73b6":"Some notes about it: There is a multicolinearity problem in this dataset, when the independent variables (inputs) are correlated with one another. This undermines feature importances and might cause inaccurate results when generalizing the model. For this given problem:\n\n- There's a perfect correlation between fan speed and bed temperature, which means that both explains the same things.\n- Bed Temperature and Nozzle Temperature are moderate positive correlated, since the bed should accomodate the material that comes from the nozzle with similar temperature.\n- Material is too correlated with nozzle, negatively. The ABS needs more temperature than the PLA.\n- Infill pattern does not have correlation to the output values.","edadb0ff":"## Machine Learning","81ab688e":"The nozzle temperature have to different intervals for different materials, it doesn't influence PLA properties that much, in contrast with ABS.","b59cf612":"One way to solve the multicolinearity is to combine the correlated variables and drop then individualy. In this example, the combination used on temperature is the mean value between them, but it can vary depending on the problem and correlation. I don't know how to deal with multicolinearity between categorical and numerical values, therefore, if you can help me in this regard, please share your thoughts in the comments.","02303a28":"The transformed datased had a overall better validation performance, therefore, its a better model in terms of generalization.","aec1039e":"The Cross Validation used is the Leave-One-Out, since there's few instances avaliable. The hyperparameter selection method will be Grid Search.","fdd5689f":"## Import Dataset","030c5790":"The `ColumnTransformer` does the desired transformation in selected features. It has to be used it since scaling categorical variables is wrong.","dbb9ab40":"## EDA","4a3d8769":"Given the results, the model suffers from high variance. To resolve this, more data should be gathered, or you can choose a simpler model having more bias in exchange for less variance."}}