{"cell_type":{"46a94408":"code","34c73cbe":"code","35d50ae6":"code","8692a564":"code","38ceda88":"code","ac1d8ede":"code","6d32fc65":"code","630d38fe":"code","4671c7b8":"code","64d2a91f":"code","56510ead":"code","c71540f5":"code","bd4a5527":"code","d8524321":"code","1274d56c":"markdown","f0322d6f":"markdown","384136b5":"markdown","133a1bfc":"markdown","ee54c2de":"markdown","aedcac65":"markdown","b806b2f5":"markdown","074981ba":"markdown","f20060d3":"markdown","18af8c2a":"markdown","aaf74c5a":"markdown","8d05d382":"markdown"},"source":{"46a94408":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","34c73cbe":"from sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, r2_score\nfrom  ipywidgets import interact","35d50ae6":"df = pd.read_csv(\"..\/input\/insurance-1\/insurance 1.csv\")\ndf.head()","8692a564":"x = df.iloc[:,0:2].values\ny = df.iloc[:,-1].values","38ceda88":"xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.3, random_state = 16)","ac1d8ede":"model = LinearRegression()\nmodel.fit(xtrain,ytrain)","6d32fc65":"m = model.coef_\nc = model.intercept_","630d38fe":"x = [12, 37]\ny_predict = sum(m*x) + c\ny_predict","4671c7b8":"x = [12, 37]\ny_predict = model.predict([x])\ny_predict","64d2a91f":"ytest_predict = model.predict(xtest)","56510ead":"def InsurancePricePredict(Age, bmi):\n    y_predict = model.predict([[Age, bmi]])\n    print(\"Insurance Price is:\", y_predict[0])","c71540f5":"InsurancePricePredict(33,3)","bd4a5527":"age_min = df.iloc[:, 0].min()\nage_max = df.iloc[:, 0].max()\nbmi_min = df.iloc[:, 1].min()\nbmi_max = df.iloc[:, 1].max()","d8524321":"interact(InsurancePricePredict, Age = (age_min, age_max), bmi = (bmi_min, bmi_max) )","1274d56c":"converting our dataset into arrays so that we can use the dataset as input for our functions","f0322d6f":"find the value of slope and intercept from our multi regresssion algorithm","384136b5":"fitting the model to the dataset","133a1bfc":"defining a function to predict the price premium of insurance","ee54c2de":"calling the function and storing the value to use other time\n","aedcac65":"importing libraries and modules from which we gonna use the functions to execute Multi-Linear Regression","b806b2f5":"uploaded data file of insurance ","074981ba":"defining the limits from min to max of the age and BMI index to design the model","f20060d3":"using the widget library module we used the interact function to make a model, try and measure your insurance price on the basis of given dataset","18af8c2a":"We will make our own split function but for now let's use it from the inbuilt library only\n","aaf74c5a":"predicting the value form direct equation","8d05d382":"predicting the value from the inbuilt model "}}