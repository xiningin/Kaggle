{"cell_type":{"0f02e069":"code","273d584b":"code","6c983966":"code","68bade9c":"code","52f61529":"code","c2143979":"code","75abfd0b":"code","588513f0":"code","8c51cd00":"code","9bfd94b2":"code","ca0eefd4":"code","aeb8fa1b":"code","f870af80":"code","2a2b3773":"code","a3255ae4":"code","0ec41cf2":"code","4f56962b":"code","7830e8fe":"code","bf0435e5":"code","b4732ed8":"code","4cd22711":"code","8e5c4161":"code","e324fd7b":"code","79ffc564":"code","38ab1f29":"code","e9b0a7ff":"code","9c7eed69":"code","f576f3d6":"code","1a508a22":"code","d7e1d373":"code","8316dbb9":"code","2425a71e":"code","1ff30739":"code","4a2cf4f9":"code","c6b1f133":"code","a4f4ff6d":"code","8f2416c9":"code","c575a8ce":"code","a0f821f2":"code","cbc1f581":"code","bdc46d46":"code","c4842d1c":"code","b7bd658c":"code","b3ae7fa2":"code","3af89b04":"code","fcf9bc17":"code","a2ec7044":"code","7b8b81e5":"code","da7e912c":"code","b1c4842d":"code","c0de55fd":"code","bba625af":"code","9fe476b8":"code","dd970c23":"code","caea84c1":"code","c16ce851":"code","7622d0f2":"markdown","f7699263":"markdown","1f72a7ab":"markdown","923062c3":"markdown","b585242b":"markdown","21314853":"markdown"},"source":{"0f02e069":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nimport matplotlib\nmatplotlib.rcParams['figure.figsize'] = (20,10)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","273d584b":"home = pd.read_csv('..\/input\/bengaluru-house-price-data\/Bengaluru_House_Data.csv')\nhome.head()","6c983966":"home2 = home.copy()","68bade9c":"home.info()","52f61529":"#Checking for count of each categorical columns\ndef count(df):\n    for val in df.columns:\n        print(df[val].value_counts())\n        print(\"*************************\")\n\ncount(home)       ","c2143979":"home.isna().sum()","75abfd0b":"#assuming that these are not a factor for price\ndel_col = ['area_type','availability','society','balcony']\nhome = home.drop(del_col, axis=1)","588513f0":"#checking the mean and median for numerical variables\nhome.describe()","8c51cd00":"#Imputing columns value based on above data\nhome['location'] = home['location'].fillna('Sarjapur Road')\nhome['size'] = home['size'].fillna('2 BHK')\nhome['bath'] = home['bath'].fillna(home['bath'].median())\n","9bfd94b2":"#checking the datatype of variables\nhome.info()","ca0eefd4":"home.shape","aeb8fa1b":"home['bhk'] = home['size'].apply(lambda x : int(x.split(' ')[0]))","f870af80":"home.bhk.unique()","2a2b3773":"home[home.bhk > 20]","a3255ae4":"home.total_sqft.unique()","0ec41cf2":"def isFloat(x):\n    try:\n        float(x)\n    except:\n        return False\n    return True","4f56962b":"home[~home['total_sqft'].apply(isFloat)]","7830e8fe":"def convertRange(x):\n    temp = x.split('-')\n    if len(temp) == 2:\n        return (float(temp[0]) + float(temp[1]))\/2\n    try:\n        return float(x)\n    except:\n        return None","bf0435e5":"home3 = home.copy()","b4732ed8":"home3['total_sqft'] = home3['total_sqft'].apply(convertRange)\nhome3.head()","4cd22711":"home4 = home3.copy()\nhome4['price_per_sqft'] = (home4.price * 100000) \/ home4.total_sqft\nhome4.head()","8e5c4161":"len(home4.location.unique())","e324fd7b":"home4.location = home4.location.apply(lambda x: x.strip())\nlocation_count = home4.location.value_counts()\nlocation_count","79ffc564":"location_count_less_10 = location_count[location_count <= 10]\nlocation_count_less_10","38ab1f29":"home4.location = home4.location.apply(lambda x : 'other' if x in location_count_less_10 else x)\n","e9b0a7ff":"home4.head()","9c7eed69":"home4[home4.total_sqft\/home4.bhk < 300].head()","f576f3d6":"home4.shape","1a508a22":"home6 = home4[~(home4.total_sqft\/home4.bhk < 300)]\nhome6.shape","d7e1d373":"home6.price_per_sqft.describe()","8316dbb9":"def remove_outliers_sqft(df):\n    df_output = pd.DataFrame()\n    for key,subdf in df.groupby('location'):\n        m = np.mean(subdf.price_per_sqft)\n        st = np.std(subdf.price_per_sqft)\n        gen_df = subdf[(subdf.price_per_sqft > (m-st)) & (subdf.price_per_sqft <= (m+st))]\n        df_output = pd.concat([df_output,gen_df],ignore_index =True)\n    return df_output\nhome7 = remove_outliers_sqft(home6)\nhome7.shape","2425a71e":"def plot_scatter_chart(df,location):\n    bhk2 = df[(df.location == location) & (df.bhk == 2)]\n    bhk3 = df[(df.location == location) & (df.bhk == 3)]\n    matplotlib.rcParams['figure.figsize'] = (20,10)\n    plt.scatter(bhk2.total_sqft,bhk2.price,color='red',label='2 BHK',s=50)\n    plt.scatter(bhk3.total_sqft,bhk3.price,marker='D',color='green',label='3 BHK',s=50)\n    plt.xlabel('Total square Feet area')\n    plt.ylabel('Price ')\n    plt.title(location)\n    plt.legend()\n\nplot_scatter_chart(home7,'Rajaji Nagar')    ","1ff30739":"def bhk_outlier_remover(df):\n    exclude_indices = np.array([])\n    for location, location_df in df.groupby('location'):\n        bhk_stats = {}\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            bhk_stats[bhk] = {\n                'mean': np.mean(bhk_df.price_per_sqft),\n                'std': np.std(bhk_df.price_per_sqft),\n                'count': bhk_df.shape[0]\n            }\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            stats = bhk_stats.get(bhk-1)\n            if stats and stats['count']>5:\n                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)\n    return df.drop(exclude_indices,axis='index')\n\nhome8 = bhk_outlier_remover(home7)\nhome8.shape","4a2cf4f9":"plot_scatter_chart(home8,'Rajaji Nagar')    ","c6b1f133":"\nplt.hist(home8.price_per_sqft,rwidth=0.8)\nplt.xlabel(\"Price Per Square Feet\")\nplt.ylabel(\"Count\")","a4f4ff6d":"home8.bath.unique()","8f2416c9":"plt.hist(home8.bath,rwidth=0.8)\nplt.xlabel(\"Number of bathrooms\")\nplt.ylabel(\"Count\")\n\nSeries' object has no attribute 'unqiue'","c575a8ce":"home9 = home8[home8.bath<home8.bhk+2]\nhome9.shape","a0f821f2":"home9.head()","cbc1f581":"home10 = home9.drop(['size','price_per_sqft'],axis='columns')\nhome10.head()","bdc46d46":"home10.bath.value_counts()","c4842d1c":"dummies = pd.get_dummies(home10.location,drop_first=True)\ndummies","b7bd658c":"home11 = pd.concat([home10,dummies],axis='columns')\nhome11.head(3)","b3ae7fa2":"home12 = home11.drop('location',axis='columns')\nhome12.head()","3af89b04":"home12.shape","fcf9bc17":"X = home12.drop('price',axis='columns')\nX.head()","a2ec7044":"y = home12.price\ny.head()","7b8b81e5":"from sklearn.model_selection import train_test_split\nX_train , X_test , y_train , y_test = train_test_split(X,y,test_size=0.2,random_state=10)","da7e912c":"from sklearn.linear_model import LinearRegression\nlinreg = LinearRegression()\nlinreg.fit(X_train,y_train)\nlinreg.score(X_test,y_test)","b1c4842d":"from sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\n\ncv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n\ncross_val_score(LinearRegression(), X, y, cv=cv)\n\n","c0de55fd":"from sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\n\ndef find_best_model_using_gridsearchcv(X,y):\n    algorithms = {\n        'linear_regression' : {\n            'model': LinearRegression(),\n            'params': {\n                'normalize': [True, False]\n            }\n        },\n        'lasso': {\n            'model': Lasso(),\n            'params': {\n                'alpha': [1,2],\n                'selection': ['random', 'cyclic']\n            }\n        },\n        'decision_tree': {\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter': ['best','random']\n            }\n        }\n    }\n    scores = []\n    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n    for algo_name, config in algorithms.items():\n        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)\n        gs.fit(X,y)\n        scores.append({\n            'model': algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\n\nfind_best_model_using_gridsearchcv(X,y)","bba625af":"def predict_price(location,sqft,bath,bhk):    \n    loc_index = np.where(X.columns==location)[0][0]\n\n    x = np.zeros(len(X.columns))\n    x[0] = sqft\n    x[1] = bath\n    x[2] = bhk\n    if loc_index >= 0:\n        x[loc_index] = 1\n\n    return linreg.predict([x])[0]","9fe476b8":"predict_price('1st Phase JP Nagar',1000, 2, 2)","dd970c23":"import pickle\nwith open('banglore_home_prices_model.pickle','wb') as f:\n    pickle.dump(linreg,f)\n","caea84c1":"import json\ncolumns = {\n    'data_columns' : [col.lower() for col in X.columns]\n}\nwith open(\"columns.json\",\"w\") as f:\n    f.write(json.dumps(columns))\n","c16ce851":"from django.contrib import admin\nfrom django.contrib import admin\n","7622d0f2":"### Feature Engineering(Narrowing the Ranges)","f7699263":"# Find best model using GridSearchCV","1f72a7ab":"### Outlier Detection and Removal","923062c3":"## Exporting the tested model to a pickle file\n","b585242b":"## Use K Fold cross validation to measure accuracy of our LinearRegression model","21314853":"#### Removing 2Bhk apartments whose price_per_sqft is less than mean price_per_sqft of 1Bhk apartment"}}