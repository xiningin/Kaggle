{"cell_type":{"d4235684":"code","44c2351b":"code","e7d052a5":"code","89064f6e":"code","5156de16":"code","7ca4c21f":"code","1810929a":"code","984136c4":"code","b0217c56":"code","a7a80f8e":"code","e1d8783d":"markdown","b94c45fb":"markdown","6d289a63":"markdown","121e31fe":"markdown","515e0a4d":"markdown","c21ccd11":"markdown","c916a5dd":"markdown","08b638b3":"markdown","a924a1ff":"markdown","8c8bce27":"markdown"},"source":{"d4235684":"#Import necessay libraries\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport matplotlib\nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)\nimport seaborn as sns\n\n#Preprocessing\nfrom sklearn import model_selection,metrics\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split,KFold\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler,OrdinalEncoder,LabelEncoder\n#Model\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error,roc_auc_score\nfrom xgboost import XGBRegressor,XGBClassifier\nfrom lightgbm import LGBMRegressor,LGBMClassifier\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_log_error,mean_squared_error\nfrom catboost import CatBoostRegressor,CatBoostClassifier\n\n","44c2351b":"#import the data and shape\ntrain = pd.read_csv(\"..\/input\/song-popularity-prediction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/song-popularity-prediction\/test.csv\")\nsample=pd.read_csv(\"..\/input\/song-popularity-prediction\/sample_submission.csv\")\nprint(train.shape,test.shape,sample.shape)\nprint(train.isnull().sum())\ntrain.describe().transpose()","e7d052a5":"\n\nplt.rc('figure',figsize= (10,12))\nsns.set_context('paper',font_scale=1)\n\nplt.title('Missing value status',fontweight = 'bold')\nax = sns.heatmap(train.isnull().sum().to_frame(),annot=True,fmt = 'd',cmap = 'RdYlGn')\nax.set_xlabel('Amount Missing')\nplt.show()\n\n","89064f6e":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy='constant')\ntrain_im = pd.DataFrame(imputer.fit_transform(train))\ntest_im = pd.DataFrame(imputer.fit_transform(test))\n#remove column\ntrain_im.columns = train.columns\ntest_im.columns = test.columns\n\ntrain = train_im\ntest = test_im","5156de16":"#insert the kfold columns\ntrain['kfold'] = -1\n#distributing the data\nkfold = KFold(n_splits = 5,shuffle=True,random_state = 42)\nfor fold, (tr_i,va_i) in enumerate(kfold.split(X=train)):\n    train.loc[va_i,'kfold'] = fold\n    \nprint(train.kfold.value_counts())\ntrain.to_csv(\"folds_5.csv\",index=False)\nprint(\"successfully folds\")\n","7ca4c21f":"\n\nplt.rc('figure',figsize= (10,12))\nsns.set_context('paper',font_scale=1)\n\nplt.title('Missing value status',fontweight = 'bold')\nax = sns.heatmap(train.isnull().sum().to_frame(),annot=True,fmt = 'd',cmap = 'RdYlGn')\nax.set_xlabel('Amount Missing')\nplt.show()\n\n","1810929a":"# Plot dataframe\nheat = train.corr().round(5)\n\n# Mask to hide upper-right part of plot as it is a duplicate\nmask = np.zeros_like(heat)\nmask[np.triu_indices_from(mask)] = True\n\n# Making a plot\nplt.figure(figsize=(16,16))\nax = sns.heatmap(heat, annot=False, mask=mask, cmap=\"RdYlGn\", annot_kws={\"weight\": \"bold\", \"fontsize\":13})\nax.set_title(\"Feature correlation heatmap\", fontsize=17)\nplt.setp(ax.get_xticklabels(), rotation=90, ha=\"right\",\n         rotation_mode=\"anchor\", weight=\"normal\")\nplt.setp(ax.get_yticklabels(), weight=\"normal\",\n         rotation_mode=\"anchor\", rotation=0, ha=\"right\")\nplt.show();\n","984136c4":"df = pd.read_csv(\".\/folds_5.csv\")\n\n#features taken to train\nfeatures = [f for f in df.columns if f not in(\"id\",\"kfold\",\"song_popularity\")]\ntest= test[features]","b0217c56":"prediction = []\nscore = []\n\nfor fold in range (5):\n    xtrain = df[df.kfold != fold].reset_index(drop=True)\n    xvalid = df[df.kfold == fold].reset_index(drop=True)\n    xtest = test.copy()\n    \n    ytrain = xtrain.song_popularity\n    yvalid = xvalid.song_popularity\n    \n    xtrain = xtrain[features]\n    xvalid = xvalid[features]\n    \n    lE = StandardScaler()\n    xtrain[features] = lE.fit_transform(xtrain[features])\n    xvalid[features] = lE.transform(xvalid[features])\n    xtest[features] = lE.transform(xtest[features])\n    \n    params_lgb = {\n    \"task\": \"train\",\n    \"boosting_type\": \"gbdt\",\n    \"objective\": \"binary\",\n    'subsample': 6,\n    'learning_rate': 0.11279777021715014,\n    \"max_depth\": 29,\n    \"feature_fraction\": 0.2256038826485174,\n    \"bagging_fraction\": 0.7705303688019942,\n    \"min_child_samples\": 290,\n    \"reg_alpha\": 1.7048279932347365e-06,\n    \"reg_lambda\": 0.013553466940310612,\n    \"max_bin\": 772,\n    \"min_data_per_group\": 177,\n    \"bagging_freq\": 1,\n    \"cat_smooth\": 96,\n    \"cat_l2\": 17,\n    \"verbosity\": -1,\n    'random_state':42,\n    'n_estimators':3741,\n    'colsample_bytree':0.07025834820938834,\n    'num_leaves': 465,\n    }\n    \n    lgb_train = lgb.Dataset(xtrain, ytrain)\n    lgb_val = lgb.Dataset(xvalid, yvalid)\n    \n    model = lgb.train(params=params_lgb,\n                      train_set=lgb_train,\n                      valid_sets=lgb_val,\n                      early_stopping_rounds=300,\n                      verbose_eval=False)\n    \n   \n    preds_valid = model.predict(xvalid,num_iteration=model.best_iteration)\n    test_predict = model.predict(xtest,num_iteration=model.best_iteration)\n   \n    prediction.append(test_predict)\n    roc1= roc_auc_score(yvalid,preds_valid)\n    #Score \n    score.append(roc1)\n    print(f\"fold|split:{fold},roc:{roc1}\")\n    \nprint(np.mean(score),np.std(score))","a7a80f8e":"#reconfigure of split data\nfinal_predict = np.mean(np.column_stack(prediction),axis=1)\nprint(final_predict)\nsample.song_popularity = final_predict\nsample.to_csv(\"submission_lgb.csv\",index=False)\nprint(\"Final achieve to send lgbboost output data\")","e1d8783d":"### **Import Necessary Library** ","b94c45fb":"### **Apply SimpleImputer(Median)** ","6d289a63":"### **Feature_Correlation**","121e31fe":"### **Identify Null Value in Graphical Representation**","515e0a4d":"### **KFold**","c21ccd11":"### **Read Data&Shape**","c916a5dd":"### **Identify_Nullvalue**","08b638b3":"### **lgb & Prediction_Output**","a924a1ff":"## **ThankYou_Guys_Visit here**\n## **SuggestNewIdeas to approach***","8c8bce27":"### **Feature Represent**"}}