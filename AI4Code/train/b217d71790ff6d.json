{"cell_type":{"0cc529ee":"code","f93be45c":"code","a4f20c47":"code","1ec1c71b":"code","2e65527c":"code","8276c2ea":"code","b44524cb":"code","4aabf504":"code","4de4221c":"code","3e85d629":"code","61ea7a8a":"code","4de7c1d6":"code","1e35badc":"code","809dde45":"code","84deba71":"code","4ab618ba":"code","63fee49d":"code","403afbcf":"code","a4c0fe73":"code","8fe70d85":"code","52eaec94":"code","c466ea49":"code","c187acd7":"code","7790d27e":"code","e300801e":"code","d08cbbd5":"code","a20b767e":"code","715710c2":"code","056447ee":"code","ca9285d0":"code","45b78cda":"code","be2abea9":"code","8ce747e5":"code","d2cf7e88":"code","fd670ad9":"code","f6617e44":"code","4edb485b":"markdown","d94a2b81":"markdown","f558dfc2":"markdown","c9626b0d":"markdown","7902c3fb":"markdown","bb35a438":"markdown","931efc74":"markdown","10c046db":"markdown","b6bef3b1":"markdown","fec8b7a7":"markdown","8d055b3c":"markdown","c246afd8":"markdown","9a1bbbab":"markdown","134cf943":"markdown","fb659b0e":"markdown","5db12f66":"markdown","57208341":"markdown","4e7fe788":"markdown","9c3f5b7f":"markdown","b6c40152":"markdown","3e019dd0":"markdown","f22bfe68":"markdown","32066ef7":"markdown","6eb08ddd":"markdown","60bd3f3e":"markdown","6ef63361":"markdown","49769e75":"markdown","2da132cf":"markdown","6a54bcd5":"markdown","d50fe585":"markdown","26c9df19":"markdown","08467258":"markdown","cbe5ac5e":"markdown","321eb180":"markdown","ce4f6506":"markdown","f819fff7":"markdown","adf3d726":"markdown","01d8ca35":"markdown"},"source":{"0cc529ee":"from IPython.display import Image\nImage(filename=\"..\/input\/skoltech-anomaly-benchmark-skab-teaser\/look.png\", width=1000, height=500)","f93be45c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\n%matplotlib inline","a4f20c47":"# \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e csv \u0444\u0430\u0439\u043b\u0430\nraw_data = pd.read_csv('..\/input\/skoltech-anomaly-benchmark-skab-teaser\/SkAB teaser.csv', \n                   sep=';', \n                   index_col='datetime', \n                   parse_dates=True).drop('index',axis=1)","1ec1c71b":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 10 \u043f\u0435\u0440\u0432\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0442\u0430\u0431\u043b\u0438\u0446\u044b\nraw_data.head(10)","2e65527c":"# \u0420\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443, \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0432\u0438\u0434\u0443\nraw_data = raw_data.pivot_table(values='value', index=raw_data.index, columns='id')","8276c2ea":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 5 \u043f\u0435\u0440\u0432\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0442\u0430\u0431\u043b\u0438\u0446\u044b\nraw_data.head()","b44524cb":"raw_data.info()","4aabf504":"# \u041e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\nraw_data.plot(figsize=(12,6), marker='o', markersize=3);","4de4221c":"# \u041e\u0431\u0440\u0435\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\nraw_data = raw_data['2019-07-08 17:52:29':]","3e85d629":"# \u041e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\nraw_data.plot(figsize=(12,6), marker='o', markersize=3);","61ea7a8a":"# \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# raw_data.to_csv('raw_data.csv')","4de7c1d6":"# \u041f\u0440\u0438\u043d\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\nprint(f'\u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f: {raw_data.shape}')","1e35badc":"raw_data.describe()","809dde45":"# \u041e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u0432\u0441\u0435\u0445 \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432\nfor name in raw_data.columns:\n    raw_data[name].plot(figsize=(12,3), marker='o', markersize=2)\n    plt.xlabel('\u0412\u0440\u0435\u043c\u044f')\n    plt.ylabel('\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430')\n    plt.title(f'\u0413\u0440\u0430\u0444\u0438\u043a \u0441\u0438\u0433\u043d\u0430\u043b\u0430: {name}')\n    plt.show()","84deba71":"# todo\ndef preprocessing(raw_data):\n    data = raw_data.copy()\n    \n    # your code\n    \n    return data\n\ndata = preprocessing(raw_data=raw_data)","4ab618ba":"# \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ndata.plot(figsize=(12,6))\nplt.axvspan(data.index[0], \n            '2019-07-08 18:25', \n            color='green', \n            alpha=0.1, \n            label='\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430')\nplt.axvspan('2019-07-08 18:25', \n            '2019-07-08 18:35', \n            color='yellow', \n            alpha=0.1, \n            label='\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430')\nplt.axvspan('2019-07-08 18:35', \n            data.index[-1], \n            color='red', \n            alpha=0.1, \n            label='\u0422\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430')\nplt.legend(bbox_to_anchor =(0.8, -0.2), ncol = 3)\nplt.xlabel('\u0412\u0440\u0435\u043c\u044f')\nplt.ylabel('\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432')\nplt.title('\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0438');","63fee49d":"# \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043a\u044d\u0439\u043b\u0435\u0440\u0430\nStSc = StandardScaler()\n# \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043a\u044d\u0439\u043b\u0435\u0440\u0430 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\nStSc.fit(data[:'2019-07-08 18:25'])\n\n# \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0441\u043a\u044d\u0439\u043b\u0435\u0440\u0430 \u043d\u0430 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ntrain_sc = StSc.transform(data[:'2019-07-08 18:25'])\n# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\nval_sc = StSc.transform(data['2019-07-08 18:25':'2019-07-08 18:35'])\n# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0441\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ndata_sc = StSc.transform(data)","403afbcf":"from tensorflow.keras.layers import Input, Dense, BatchNormalization, Activation, Dropout\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import regularizers\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n# from tensorflow.keras.callbacks import TensorBoard\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nfrom itertools import product","a4c0fe73":"def Random(seed_value):\n    # 1. Set `PYTHONHASHSEED` environment variable at a fixed value\n    import os\n    os.environ['PYTHONHASHSEED'] = str(seed_value)\n\n    # 2. Set `python` built-in pseudo-random generator at a fixed value\n    import random\n    random.seed(seed_value)\n\n    # 3. Set `numpy` pseudo-random generator at a fixed value\n    import numpy as np\n    np.random.seed(seed_value)\n\n    # 4. Set `tensorflow` pseudo-random generator at a fixed value\n    import tensorflow as tf\n    tf.random.set_seed(seed_value)","8fe70d85":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438\ndef arch(param, data):\n    \"\"\"\n    \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b\n\n    Parameters\n    ----------\n    param : list\n    \n    data : np.array\n    \"\"\"\n    Random(0)\n    input_dots = Input((8,))\n\n    x = Dense(param[0])(input_dots)\n    x = BatchNormalization()(x)\n    x = Activation('elu')(x)\n\n    x = Dense(param[1])(x)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n\n    bottleneck = Dense(param[2], activation='linear')(x)\n\n    x = Dense(param[1])(bottleneck)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n\n    x = Dense(param[0])(x)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n\n    out = Dense(8, activation='linear')(x)\n\n    model = Model(input_dots, out)\n    model.compile(optimizer=Adam(param[3]), loss='mae', metrics=[\"mse\"])\n    \n#     early_stopping = EarlyStopping(patience=3, verbose=0)\n    model.fit(data, data,\n                validation_split=0.2,\n                epochs=10,\n                batch_size=param[4],\n                verbose=0,\n                shuffle=True,\n#                 callbacks=[early_stopping]\n               )\n    return model","52eaec94":"model = arch(param=(6, 5, 4, 0.0001, 30), data=train_sc)","c466ea49":"for i in range(val_sc.shape[1]):\n    plt.figure(figsize=(12,3))\n    plt.plot(StSc.inverse_transform(val_sc)[:, i])\n    plt.plot(StSc.inverse_transform(model.predict(val_sc))[:, i])\n    plt.show()","c187acd7":"mean_absolute_error(val_sc, model.predict(val_sc))","7790d27e":"# \u0412\u044b\u0431\u043e\u0440 \u0441\u0435\u0442\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\nn1=[6, 5]\nn2=[4, 3]\nn3=[2, 1]\nlr=[0.05, 0.01]\nbatch_size=[32, 64]\n\nparameters = product(n1, n2, n3, lr, batch_size)\nparameters_list = list(parameters)\nprint(f'Total number of parameter combinations: {len(parameters_list)}')","e300801e":"# \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0441\u0435\u0442\u043a\u043e\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\npd.DataFrame(parameters_list, columns=['neurons 1st layer',\n                                      'neurons 2nd layer',\n                                      'neurons 3rd layer',\n                                      'learning rate',\n                                      'batch size']).head()","d08cbbd5":"from tqdm.notebook import tqdm","a20b767e":"# \"\u041f\u0435\u0440\u0435\u0431\u043e\u0440 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\"\nerrors = []\nfor params in tqdm(parameters_list):\n    \n    model = arch(params, train_sc)\n    train_pred = model.predict(train_sc, batch_size=params[4])\n    val_pred = model.predict(val_sc, batch_size=params[4])\n    \n    train_error = mean_absolute_error(train_sc, train_pred)\n    val_error = mean_absolute_error(val_sc, val_pred)\n    \n    errors.append(list(params)+[train_error, val_error])\n\n# \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0448\u0438\u0431\u043a\u0438\ndf_errors = pd.DataFrame(errors,\n                         columns=['neurons 1st layer', \n                                  'neurons 2nd layer', \n                                  'neurons 3rd layer', \n                                  'learning rate', \n                                  'batch size', \n                                  'mae train', \n                                  'mae val'])\ndf_errors.sort_values('mae val').head()","715710c2":"best_params = parameters_list[df_errors.sort_values('mae val').index[0]]\n\nmodel = arch(best_params, train_sc) # train+val \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u043e\u0440\u043e\u043a \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442\nmodel.summary()","056447ee":"# #\u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0438 \u043e\u0448\u0438\u0431\u043a\u0430 \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n# train_pred = model.predict(train_df_sc, batch_size=30)\n# print('train mae: ', mean_absolute_error(train_df_sc,train_pred))\n\n# #\u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0438 \u043e\u0448\u0438\u0431\u043a\u0430 \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n# test_pred = model.predict(test_df_sc, batch_size=30)\n# print('test mae: ', mean_absolute_error(test_df_sc,test_pred))","ca9285d0":"for i in range(val_sc.shape[1]):\n    plt.figure(figsize=(12,3))\n    plt.plot(StSc.inverse_transform(val_sc)[:, i])\n    plt.plot(StSc.inverse_transform(model.predict(val_sc))[:, i])\n    plt.show()","45b78cda":"test_residuals = data_sc - model.predict(data_sc)\n\npd.DataFrame(test_residuals, columns=data.columns, index = data.index).plot(figsize=(12,6))\nplt.xlabel('\u0412\u0440\u0435\u043c\u044f')\nplt.ylabel('\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432')\nplt.title('\u0413\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432')\nplt.show()","be2abea9":"train_residuals = train_sc - model.predict(train_sc)\nval_residuals = val_sc - model.predict(val_sc)\n\nUCL = pd.DataFrame(val_residuals).abs().sum(axis=1).quantile(0.99)","8ce747e5":"# \u0418\u0422\u0421\npd.DataFrame(test_residuals, index=data.index).abs().sum(axis=1).plot(marker='o', \n                                                                      markersize=2, \n                                                                      alpha=0.2, \n                                                                      figsize=(12,6), \n                                                                      label='\u0418\u0422\u0421')\n# \u0418\u0422\u0421 \u0441 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c \u0441 \u043e\u043a\u043d\u043e\u043c \u0432 3 \u0442\u043e\u0447\u043a\u0438\npd.DataFrame(test_residuals, index=data.index).abs().sum(axis=1).rolling(3).median().plot(marker='o', \n                                                                                          markersize=2, \n                                                                                          alpha=0.7, \n                                                                                          figsize=(12,6),\n                                                                                          label='\u0421\u0433\u043b\u0430\u0436\u0435\u043d\u043d\u044b\u0439 \u0418\u0422\u0421')\n\nplt.axvspan(data.index[0], \n            '2019-07-08 18:25', \n            color='green', \n            alpha=0.1, \n            label='\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430')\nplt.axvspan('2019-07-08 18:25', \n            '2019-07-08 18:35', \n            color='yellow', \n            alpha=0.1, \n            label='\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430')\nplt.axvspan('2019-07-08 18:35', \n            data.index[-1], \n            color='red', \n            alpha=0.1, \n            label='\u0422\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430')\n\nplt.axhline(UCL, color='r', label='\u0412\u0435\u0440\u0445\u043d\u044f\u044f \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430')\nplt.ylim([0, 4*UCL])\nplt.xlabel('\u0412\u0440\u0435\u043c\u044f')\nplt.ylabel('\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0418\u0422\u0421')\nplt.legend(bbox_to_anchor =(0.8, -0.2), ncol = 3)\nplt.show()","d2cf7e88":"fig, ax = plt.subplots(figsize=(12,6))\nax.axvspan(\n    data.index[data.index=='2019-07-08 18:39:22'][0],\n    data.index[data.index=='2019-07-08 18:42:32'][0],\n    alpha=0.2, \n    color='red')\nax.axvspan(\n    data.index[data.index=='2019-07-08 18:44:36'][0],\n    data.index[data.index=='2019-07-08 18:46:51'][0],\n    alpha=0.2, \n    color='red')\nax.axvspan(\n    data.index[data.index=='2019-07-08 19:06:57'][0],\n    data.index[data.index=='2019-07-08 19:11:31'][0],\n    alpha=0.2, \n    color='red')\nax.axvspan(\n    data.index[data.index=='2019-07-08 19:14:40'][0],\n    data.index[data.index=='2019-07-08 19:21:16'][0],\n    alpha=0.2, \n    color='red', label='\u0410\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b')\nax.plot(data.index, pd.DataFrame(test_residuals).abs().sum(axis=1), marker='o', markersize=2, alpha=0.2, label='\u0418\u0422\u0421')\nax.plot(data.index, pd.DataFrame(test_residuals).abs().sum(axis=1).rolling(3).median(), marker='o', markersize=2, alpha=0.7, label='\u0421\u0433\u043b\u0430\u0436\u0435\u043d\u043d\u044b\u0439 \u0418\u0422\u0421')\nax.axhline(UCL, color='r', label='\u0412\u0435\u0440\u0445\u043d\u044f\u044f \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430')\nax.set_ylim([0, 4*UCL])\nax.set_xlabel('\u0412\u0440\u0435\u043c\u044f')\nax.set_ylabel('\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0418\u0422\u0421')\nplt.legend(bbox_to_anchor =(0.8, -0.1), ncol = 3)\nplt.show()","fd670ad9":"def feature_importance(residuals, analysis_type=\"collective\", date_from=None, date_till=None, weigh=True):\n    \"\"\"\n    \u041e\u0446\u0435\u043d\u043a\u0430 \u0432\u043a\u043b\u0430\u0434\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0432 \u043a\u0430\u0436\u0434\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438\/\u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435\n\n    Parameters\n    ----------\n    residuals : pandas.DataFrame()\n        \u0414\u0430\u043d\u043d\u044b\u0435 \u043e \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044f\u0445 (\u043d\u0435\u0432\u044f\u0437\u043a\u0430\u0445) \u043c\u043e\u0434\u0435\u043b\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 DataFrame,\n        \u0433\u0434\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b - \u0432\u0440\u0435\u043c\u044f, \u0441\u0442\u043e\u043b\u0431\u0446\u044b - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\n\n    analysis_type : str, \"single\"\/\"collective\", \"single\" by default\n        \u041f\u043e\u0442\u043e\u0447\u0435\u0447\u043d\u044b\u0439: \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0432\u043a\u043b\u0430\u0434 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\n        \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044c\u043d\u044b\u0439: \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0432\u043a\u043b\u0430\u0434 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043a\u0430\u0436\u0434\u044b\u043c \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f\n\n    date_from : str \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 'yyyy-mm-dd HH:MM:SS', None by default\n        \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0432\u043a\u043b\u0430\u0434\n\n    date_till : str \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 'yyyy-mm-dd HH:MM:SS', None by default\n        \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f, \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0432\u043a\u043b\u0430\u0434\n\n    weigh : boolean, True by default\n        \u0412\u0437\u0432\u0435\u0448\u0438\u0432\u0430\u0442\u044c \u043b\u0438 \u0432\u043a\u043b\u0430\u0434 \u0432 \u043a\u0430\u0436\u0434\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u0432 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438.\n        \u0422\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f analysis_type == \"collective\".\n\n    Returns\n    -------\n    data : pandas.DataFrame().\n        \u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c DataFrame, \u0433\u0434\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b (\u0432\u043a\u043b\u0430\u0434) \u043b\u0438\u0431\u043e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438,\n        \u043b\u0438\u0431\u043e \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435 \u0432 \u041f\u0420\u041e\u0426\u0415\u041d\u0422\u0410\u0425.\n    \"\"\"\n    if date_from is None:\n        start = 0\n    if date_till is None:\n        end = -1\n    data = residuals[date_from:date_till].abs().copy()\n\n    if (analysis_type == \"collective\") & (weigh == False):\n        data = data.div(data.sum(axis=1), axis=0) * 100\n        return pd.DataFrame(data.mean(), columns=['\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, %']).T\n    elif (analysis_type == \"collective\") & (weigh == True):\n        data = data.mean().div(data.mean().sum(), axis=0) * 100\n        return pd.DataFrame(data, columns=['\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, %']).T\n    elif analysis_type == \"single\":\n        return data.div(data.sum(axis=1), axis=0) * 100","f6617e44":"for dates in [['2019-07-08 18:39:22','2019-07-08 18:42:32'],\n              ['2019-07-08 18:44:36','2019-07-08 18:46:51'],\n              ['2019-07-08 19:06:57','2019-07-08 19:11:31'],\n              ['2019-07-08 19:14:40','2019-07-08 19:21:16']]:\n    print(f'\u0418\u043d\u0446\u0438\u0434\u0435\u043d\u0442 \u0441 {dates[0]} \u043f\u043e {dates[1]}')\n    display(feature_importance(pd.DataFrame(test_residuals, index=data.index, columns=data.columns), date_from=dates[0], date_till=dates[1]))\n    print('\\n')","4edb485b":"### \u041e\u0431\u0443\u0447\u0438\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c","d94a2b81":"\u0414\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0431\u044b\u043b\u0438 \u0432 \u043e\u0434\u043d\u043e\u043c \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0435.","f558dfc2":"### \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","c9626b0d":"### \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0438","7902c3fb":"\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430:\n\n$\\text{mae} = \\frac{1}{N} \\sum^{N}_{i=1}|x_i - \\hat{x}_i|$,  \n\u0433\u0434\u0435 $N$ - \u043e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, $x_i$ - \u043f\u0440\u0430\u0432\u0434\u0438\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 $i$, $\\hat{x}_i$ - \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 $i$.","bb35a438":"\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u043f\u0430\u0437\u0434\u044b\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f\n\n$\\text{ADD} = \\frac{1}{|Y|}\\sum_{y \\in Y} ( \\tau_y - \\theta_y )$,\n\n\u0433\u0434\u0435 $|Y|$ - \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0447\u0435\u043a \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f,  \n$\\tau_y$ - \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f  \n$\\theta_y$ - \u0432\u0440\u0435\u043c\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f","931efc74":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0441\u0442\u0435\u043d\u0434 \u043f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430 \u0432\u0435\u0449\u0435\u0439 (\u0434\u0430\u043b\u0435\u0435 - \u0421\u0442\u0435\u043d\u0434) \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u0434\u043b\u044f:\n\n- \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0438 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435\u043c \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439 \u043f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430 \u0432\u0435\u0449\u0435\u0439;\n- \u0410\u043f\u0440\u043e\u0431\u0430\u0446\u0438\u0438, \u0432\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u043e\u043c \u0432\u0435\u0449\u0435\u0439, \u0432 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u0432 \u0446\u0435\u043b\u044f\u0445 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u0431\u043e\u0440\u0430 \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u0442\u0435\u043e\u0440\u0438\u0439, \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439 \u0432 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445;\n- \u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0440\u0430\u0431\u043e\u0442 \u043f\u043e \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0435 \u043f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430 \u0432\u0435\u0449\u0435\u0439.\n\n\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438 \u0438\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u043c\u0438, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0432 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\n\u0421\u0442\u0435\u043d\u0434 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0432\u043e\u0434\u044f\u043d\u043e\u0439 \u043d\u0430\u0441\u043e\u0441 \u0441 \u0437\u0430\u043c\u043a\u043d\u0443\u0442\u044b\u043c \u043a\u043e\u043d\u0442\u0443\u0440\u043e\u043c, \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043f\u0438\u0442\u0430\u043d\u0438\u044f, \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0441\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439 \u043f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430 \u0432\u0435\u0449\u0435\u0439.\n\u0421\u0442\u0435\u043d\u0434 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0438\u0441\u0442\u0435\u043c:\n\n1. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0446\u0438\u0440\u043a\u0443\u043b\u044f\u0446\u0438\u0438 \u0432\u043e\u0434\u044b.\n2. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u0446\u0438\u0440\u043a\u0443\u043b\u044f\u0446\u0438\u0438 \u0432\u043e\u0434\u044b (\u0434\u0430\u043b\u0435\u0435 - \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f).\n3. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0446\u0438\u0440\u043a\u0443\u043b\u044f\u0446\u0438\u0438 \u0432\u043e\u0434\u044b (\u0434\u0430\u043b\u0435\u0435 - \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430).\n4. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 TSN.\n5. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0446\u0438\u0440\u043a\u0443\u043b\u044f\u0446\u0438\u0438 \u0432\u043e\u0434\u044b \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0430 \u0434\u043b\u044f \u0438\u043c\u0438\u0442\u0430\u0446\u0438\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432\u043e\u0434\u043e\u0441\u043d\u0430\u0431\u0436\u0435\u043d\u0438\u044f \u0432 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u0438 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0446\u0438\u0440\u043a\u0443\u043b\u044f\u0446\u0438\u044e \u0432\u043e\u0434\u044b \u043f\u043e \u0432\u043e\u0434\u044f\u043d\u044b\u043c \u0442\u0440\u0443\u0431\u0430\u043c \u043f\u0443\u0442\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u043e\u0434\u044f\u043d\u043e\u0433\u043e \u043d\u0430\u0441\u043e\u0441\u0430.\n\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0446\u0438\u0440\u043a\u0443\u043b\u044f\u0446\u0438\u0438 \u0432\u043e\u0434\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0438\u043c\u0438\u0442\u0430\u0446\u0438\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043d\u0435\u043f\u043e\u043b\u0430\u0434\u043e\u043a:\n\n- \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u043d\u0430 \u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0432\u0430\u043b\u0435 \u043c\u043e\u0442\u043e\u0440\u0430 \u0438 \u0432\u043e\u0434\u044f\u043d\u043e\u0433\u043e \u043d\u0430\u0441\u043e\u0441\u0430;\n- \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043d\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043a\u043b\u0430\u043f\u0430\u043d\u0430 \u043d\u0430 \u0432\u0445\u043e\u0434\u0435 \u043d\u0430\u0441\u043e\u0441\u0430;\n- \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043d\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043a\u043b\u0430\u043f\u0430\u043d\u0430 \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u043d\u0430\u0441\u043e\u0441\u0430.\n\n\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432: \n- \u0412\u043e\u0434\u044f\u043d\u043e\u0439 \u043d\u0430\u0441\u043e\u0441\n- \u042d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043c\u043e\u0442\u043e\u0440\n- \u0418\u043d\u0432\u0435\u0440\u0442\u043e\u0440\n- \u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043a\u043b\u0430\u043f\u0430\u043d (1)\n- \u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043a\u043b\u0430\u043f\u0430\u043d (2)\n- \u041c\u0435\u0445\u0430\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0440\u044b\u0447\u0430\u0433 \u0434\u043b\u044f \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0441\u043d\u043e\u0441\u0442\u0438\n- \u0414\u0430\u0442\u0447\u0438\u043a\u0438 \u0432\u0438\u0431\u0440\u0430\u0446\u0438\u0438\n- \u0412\u043e\u0434\u044f\u043d\u043e\u0439 \u0431\u0430\u043a \u0441 \u0442\u0440\u0443\u0431\u0430\u043c\u0438\n- \u0414\u0430\u0442\u0447\u0438\u043a \u0434\u0430\u0432\u043b\u0435\u043d\u0438\u044f\n- \u0420\u0430\u0441\u0445\u043e\u0434\u043e\u043c\u0435\u0440\n- \u0422\u0435\u0440\u043c\u043e\u043f\u0430\u0440\u0430","10c046db":"## \u0417\u0430\u0434\u0430\u043d\u0438\u044f\n\n### \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1\n\u0423\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438 (\u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u0443\u044e \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0443\u044e \u043e\u0448\u0438\u0431\u043a\u0443 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435).\n\n### \u0412\u0430\u0440\u0438\u0430\u043d\u0442 2\n\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0443 ADD \u0434\u043b\u044f \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0439.\n\n\n<!-- \u0420\u0435\u0448\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 - Tennessee Eastman Process (TEP) -->","b6bef3b1":"# \u0412\u043e\u0440\u043a\u0448\u043e\u043f \u043f\u043e \u043f\u043e\u0438\u0441\u043a\u0443 \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0439 \u0432 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445: \u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0439 \u0432 \u0440\u0430\u0431\u043e\u0442\u0435 \u043d\u0430\u0441\u043e\u0441\u0430","fec8b7a7":"## \u041e\u0431\u0449\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0434\u043b\u044f \u043f\u043e\u0433\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0432 \u0442\u0435\u043c\u0443:\n\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0441\u0441\u044b\u043b\u043e\u043a \u0432\u0437\u044f\u0442\u043e \u0438\u0437 \u043c\u043e\u0435\u0433\u043e [cheatsheet](https:\/\/github.com\/YKatser\/DS-links)'\u0430 \u043f\u043e data science. \u0422\u0430\u043c \u0435\u0449\u0435 \u043c\u043d\u043e\u0433\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430, \u043f\u0440\u0430\u0432\u0434\u0430 \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f.\n\n\u041a\u0443\u0440\u0441\u044b:\n1. [\u041a\u0443\u0440\u0441 \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 (\u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 56 \u0447\u0430\u0441\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u043e\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f)](https:\/\/www.coursera.org\/learn\/vvedenie-mashinnoe-obuchenie)\n```\n\u0412\u044b \u0438\u0437\u0443\u0447\u0438\u0442\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0437\u0430\u0434\u0430\u0447, \u0440\u0435\u0448\u0430\u0435\u043c\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u2014 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0440\u0435\u0447\u044c \u043f\u043e\u0439\u0434\u0451\u0442 \u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0438 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u0423\u0437\u043d\u0430\u0435\u0442\u0435 \u043e\u0431 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0438\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044f\u0445, \u043d\u0430\u0443\u0447\u0438\u0442\u0435\u0441\u044c \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u2014 \u0438 \u0440\u0435\u0448\u0430\u0442\u044c, \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. \u041d\u0430\u043a\u043e\u043d\u0435\u0446, \u043f\u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u0435\u0441\u044c \u0441 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u043c\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u0435\u043c\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u043c\u0435\u0442\u043e\u0434\u044b \u043e\u0446\u0435\u043d\u043a\u0438 \u0438\u0445 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430. \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447.\n```\n2. [\u041a\u0443\u0440\u0441 \u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 (\u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 224 \u0447\u0430\u0441\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f)](https:\/\/www.coursera.org\/specializations\/machine-learning-data-analysis) \n```\n\u041c\u044b \u043f\u043e\u043a\u0430\u0436\u0435\u043c, \u043a\u0430\u043a \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u0446\u0438\u043a\u043b \u0430\u043d\u0430\u043b\u0438\u0437\u0430, \u043e\u0442 \u0441\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e \u0432\u044b\u0431\u043e\u0440\u0430 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u0435\u0433\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430. \u0412\u044b \u043d\u0430\u0443\u0447\u0438\u0442\u0435\u0441\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0438 \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u043f\u043e\u0434 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447.\n```\n3. [\u041a\u0443\u0440\u0441 \"\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\" \u043d\u0430 \u0424\u041a\u041d \u0412\u0428\u042d](https:\/\/github.com\/esokolov\/ml-course-hse)\n```\n\u041a\u043e\u043d\u0441\u043f\u0435\u043a\u0442\u044b \u043b\u0435\u043a\u0446\u0438\u0439, \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0441\u0435\u043c\u0438\u043d\u0430\u0440\u043e\u0432 \u0438 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f (\u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435, \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435, \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f) \u043f\u043e \u043a\u0443\u0440\u0441\u0443 \"\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\", \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043c\u043e\u043c\u0443 \u043d\u0430 \u0431\u0430\u043a\u0430\u043b\u0430\u0432\u0440\u0441\u043a\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \"\u041f\u0440\u0438\u043a\u043b\u0430\u0434\u043d\u0430\u044f \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430\" \u0424\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442\u0430 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0445 \u043d\u0430\u0443\u043a \u0412\u044b\u0441\u0448\u0435\u0439 \u0448\u043a\u043e\u043b\u044b \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0438.\n```\n4. [\u041a\u0443\u0440\u0441 \u043e\u0442 mlcourse.ai](https:\/\/github.com\/Yorko\/mlcourse.ai)\n```\nmlcourse.ai is an open Machine Learning course by OpenDataScience. The course is designed to perfectly balance theory and practice.\n```\n\n\u0414\u0440\u0443\u0433\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b:\n1. [Machine Learning with scikit-learn (interactive slides)](http:\/\/amueller.github.io\/sklearn_tutorial\/#\/1)\n```\n\u041e\u0442\u043b\u0438\u0447\u043d\u043e\u0435 \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 sklearn - \u043e\u0434\u043d\u0443 \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.\n```\n2. [Machine Learning and Data Science Applications in Industry](https:\/\/github.com\/ashishpatel26\/Real-time-ML-Project#manufacturing)\n```\n\u0411\u043e\u043b\u044c\u0448\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u043e\u0432 \u0441 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447 \u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u044b\u0445 \u043e\u0442\u0440\u0430\u0441\u043b\u044f\u0445.\n```\n3. [Awesome Machine Learning (github)](https:\/\/github.com\/josephmisiti\/awesome-machine-learning#python-general-purpose)\n```\n\u0411\u043e\u043b\u044c\u0448\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0432 data science.\n```\n4. [Time Series Analysis (TSA) in Python - Linear Models to GARCH](http:\/\/www.blackarbs.com\/blog\/time-series-analysis-in-python-linear-models-to-garch\/11\/1\/2016)","8d055b3c":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0443, \u0447\u0442\u043e\u0431\u044b \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u0433\u043d\u0430\u043b \u044f\u0432\u043b\u044f\u043b\u0441\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b.","c246afd8":"## \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438","9a1bbbab":"- \u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430 (training sample) \u2014 \u0432\u044b\u0431\u043e\u0440\u043a\u0430, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432) \u043c\u043e\u0434\u0435\u043b\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.\n- \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430 (validation sample) \u2014 \u0432\u044b\u0431\u043e\u0440\u043a\u0430, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u044b\u0431\u043e\u0440 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u0437 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043f\u043e \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n- \u0422\u0435\u0441\u0442\u043e\u0432\u0430\u044f (\u0438\u043b\u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0430\u044f) \u0432\u044b\u0431\u043e\u0440\u043a\u0430 (test sample) \u2014 \u0432\u044b\u0431\u043e\u0440\u043a\u0430, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043e\u043a \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 [\u0441\u0442\u0430\u0442\u044c\u0435 1](http:\/\/www.machinelearning.ru\/wiki\/index.php?title=\u0412\u044b\u0431\u043e\u0440\u043a\u0430), [\u0441\u0442\u0430\u0442\u044c\u0435 2](https:\/\/medium.com\/@tekaround\/train-validation-test-set-in-machine-learning-how-to-understand-6cdd98d4a764) \u0438 \u0434\u0440.\n\n[\u0421\u0442\u0430\u0442\u044c\u044f](https:\/\/hunch.net\/?p=22) \u043e \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u0432 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438.","134cf943":"### \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0410\u0432\u0442\u043e\u044d\u043d\u043a\u043e\u0434\u0435\u0440\u0430","fb659b0e":"### \u0418\u043c\u043f\u043e\u0440\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","5db12f66":"\u041b\u0438\u0446\u0435\u0432\u0430\u044f \u043f\u0430\u043d\u0435\u043b\u044c \u0441\u0438\u0441\u0442\u0435\u043c \u0446\u0438\u0440\u043a\u0443\u043b\u044f\u0446\u0438\u0438 \u0432\u043e\u0434\u044b, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430, \u0433\u0434\u0435:\n1,2 \u2013 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043a\u043b\u0430\u043f\u0430\u043d\u044b;\n3 - \u0431\u0430\u043a \u0441 \u0432\u043e\u0434\u043e\u0439;\n4 \u2013 \u043d\u0430\u0441\u043e\u0441;\n5 \u2013 \u043a\u043d\u043e\u043f\u043a\u0430 \u044d\u043a\u0441\u0442\u0440\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0430; 6 \u2013 \u043c\u043e\u0442\u043e\u0440;\n7 \u2013 \u0438\u043d\u0432\u0435\u0440\u0442\u043e\u0440;\n8 \u2013 cRIO;\n9 \u2013 \u043c\u0435\u0445\u0430\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0440\u044b\u0447\u0430\u0433.","57208341":"\u0412 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 4 \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0438:\n\n- \u0420\u0410\u0421\u0426\u0415\u041d\u0422\u0420\u041e\u0412\u041a\u0410 \u0412\u0410\u041b\u041e\u0412 \u041d\u0410\u0421\u041e\u0421\u0410 \u0418 \u0414\u0412\u0418\u0413\u0410\u0422\u0415\u041b\u042f (\u0440\u0435\u0437\u043a\u043e)  \n\u0420\u0435\u0437\u043a\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u0435\u043a\u0442\u0430: 18:39:22  \n\u0420\u0435\u0437\u043a\u043e\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u0435\u043a\u0442\u0430: 18:42:32\n\n- \u0420\u0410\u0421\u0426\u0415\u041d\u0422\u0420\u041e\u0412\u041a\u0410 \u0412\u0410\u041b\u041e\u0412 \u041d\u0410\u0421\u041e\u0421\u0410 \u0418 \u0414\u0412\u0418\u0413\u0410\u0422\u0415\u041b\u042f (\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e)  \n\u041c\u0435\u0434\u043b\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u0435\u043a\u0442\u0430: 18:44:36-18:45:49  \n\u0420\u0435\u0437\u043a\u043e\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u0435\u043a\u0442\u0430: 18:46:51\n\n- \u041f\u0415\u0420\u0415\u041a\u0420\u042b\u0422\u0418\u0415 (\u0423\u041c\u0415\u041d\u042c\u0428\u0415\u041d\u0418\u0415) \u041f\u0420\u041e\u0425\u041e\u0414\u041d\u041e\u0413\u041e \u0421\u0415\u0427\u0415\u041d\u0418\u042f-1 (\u0432\u0435\u0440\u0445)  \n\u041c\u0435\u0434\u043b\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u0435\u043a\u0442\u0430: 19:06:57-19:07:37  \n\u041c\u0435\u0434\u043b\u0435\u043d\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u0435\u043a\u0442\u0430: 19:10:45-19:11:31\n\n- \u041f\u0415\u0420\u0415\u041a\u0420\u042b\u0422\u0418\u0415 (\u0423\u041c\u0415\u041d\u042c\u0428\u0415\u041d\u0418\u0415) \u041f\u0420\u041e\u0425\u041e\u0414\u041d\u041e\u0413\u041e \u0421\u0415\u0427\u0415\u041d\u0418\u042f-2 (\u043d\u0438\u0437)  \n\u041c\u0435\u0434\u043b\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u0435\u043a\u0442\u0430: 19:14:40-19:16:24  \n\u041c\u0435\u0434\u043b\u0435\u043d\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u0435\u043a\u0442\u0430: 19:19:15-19:21:16","4e7fe788":"\u041e\u0431\u0440\u0435\u0436\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u043e \u0434\u0430\u043d\u043d\u044b\u0445, \u0447\u0442\u043e\u0431\u044b \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 (\u0440\u0430\u0437\u043e\u0433\u0440\u0435\u0432).","9c3f5b7f":"## \u041f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438","b6c40152":"### \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","3e019dd0":"### \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0442\u044c","f22bfe68":"\u0410\u0432\u0442\u043e\u044d\u043d\u043a\u043e\u0434\u0435\u0440 (\u0430\u0432\u0442\u043e\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a) - \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0430\u044f \u0441\u0435\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0432\u044b\u0445\u043e\u0434. \u0410\u0432\u0442\u043e\u044d\u043d\u043a\u043e\u0434\u0435\u0440\u044b \u0441\u0436\u0438\u043c\u0430\u044e\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u0445 \u0432 \u0441\u043a\u0440\u044b\u0442\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 (\u0431\u0443\u0442\u044b\u043b\u043e\u0447\u043d\u043e\u0435 \u0433\u043e\u0440\u043b\u044b\u0448\u043a\u043e), \u0430 \u0437\u0430\u0442\u0435\u043c \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0442 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. \u0426\u0435\u043b\u044c \u2014 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u043c \u0441\u043b\u043e\u0435 \u043e\u0442\u043a\u043b\u0438\u043a, \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0431\u043b\u0438\u0437\u043a\u0438\u0439 \u043a \u0432\u0445\u043e\u0434\u043d\u043e\u043c\u0443.\n\n\u041e\u0442\u043b\u0438\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u044d\u043d\u043a\u043e\u0434\u0435\u0440\u043e\u0432 \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0439\u0440\u043e\u043d\u043e\u0432 \u043d\u0430 \u0432\u0445\u043e\u0434\u0435 \u0438 \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442.","32066ef7":"- **\u0414\u0421 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u0431\u0438\u0437\u043d\u0435\u0441\u0430:** \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0442\u044c \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0438\u0435 \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0438 \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u043d\u044c\u0448\u0435 \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0438\u0445 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f.\n\n\u041c\u0435\u0442\u0440\u0438\u043a\u0430:\n\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u043f\u0430\u0437\u0434\u044b\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f\n\n$\\text{ADD} = \\frac{1}{|Y|}\\sum_{y \\in Y} ( \\tau_y - \\theta_y )$,\n\n\u0433\u0434\u0435 $|Y|$ - \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0447\u0435\u043a \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f,  \n$\\tau_y$ - \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f  \n$\\theta_y$ - \u0432\u0440\u0435\u043c\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f\n\n- **\u0414\u0421 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0438:** \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0442\u043e\u0447\u043d\u043e \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438.\n\n\u041c\u0435\u0442\u0440\u0438\u043a\u0430:\n\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430\n\n$\\text{MAE} = \\frac{1}{N} \\sum^{N}_{i=1}|x_i - \\hat{x}_i|$,\n\n\u0433\u0434\u0435 $N$ - \u043e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439,  \n$x_i$ - \u043f\u0440\u0430\u0432\u0434\u0438\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 $i$,  \n$\\hat{x}_i$ - \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 $i$.","6eb08ddd":"### \u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f) \u0434\u0430\u043d\u043d\u044b\u0445","60bd3f3e":"### \u0412\u043a\u043b\u0430\u0434 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0432 \u043c\u043e\u043c\u0435\u043d\u0442\u044b \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0439 (\u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432)","6ef63361":"### \u0418\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f (\u0418\u0422\u0421)","49769e75":"## \u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435","2da132cf":"- \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043a\u0443\u0440\u0441 Keras \u0441 \u0431\u044d\u043a\u044d\u043d\u0434\u043e\u043c TensorFlow: https:\/\/youtu.be\/qFJeN9V1ZsI","6a54bcd5":"## \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438","d50fe585":"### \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432","26c9df19":"### \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043c\u043e\u0434\u0435\u043b\u0438","08467258":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","cbe5ac5e":"### \u0418\u043c\u043f\u043e\u0440\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","321eb180":"### \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","ce4f6506":"## \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438\n\n- \u041e\u0431 \u0430\u0432\u0442\u043e\u044d\u043d\u043a\u043e\u0434\u0435\u0440\u0435:\nhttps:\/\/www.youtube.com\/watch?v=H1AllrJ-_30\n\n- \u041b\u0435\u043a\u0446\u0438\u044f \u041a. \u0412\u043e\u0440\u043e\u043d\u0446\u043e\u0432\u0430 \u043f\u043e \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u043c \u0441\u0435\u0442\u044f\u043c:\nhttp:\/\/www.machinelearning.ru\/wiki\/images\/3\/38\/Voron-ML-NeuralNets1-2018-slides.pdf\n\n- \u041f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043a \u043b\u0435\u043a\u0446\u0438\u0438:\nhttp:\/\/www.machinelearning.ru\/wiki\/images\/c\/cc\/Voron-ML-NeuralNets.pdf\n\n- \u0410\u0432\u0442\u043e\u044d\u043d\u043a\u043e\u0434\u0435\u0440\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0439:\nhttps:\/\/saketsathe.net\/downloads\/autoencode.pdf\n\n- \u041e \u0441\u043b\u043e\u0435 batch normalization:\nhttps:\/\/arxiv.org\/pdf\/1502.03167v2.pdf","f819fff7":"### \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","adf3d726":"### \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u044d\u043d\u043a\u043e\u0434\u0435\u0440\u0430","01d8ca35":"![ae](https:\/\/miro.medium.com\/max\/700\/1*44eDEuZBEsmG_TCAKRI3Kw@2x.png)"}}