{"cell_type":{"67b60a68":"code","6f2b4a5c":"code","b64aac1f":"code","a2f21f4f":"code","2b5fe267":"code","1e7bdcfa":"code","df714f99":"code","fd97139c":"code","4c3436ab":"code","c969af5f":"code","c613b438":"code","dedd9770":"code","ca3f90cf":"code","4f87168c":"code","22c748fe":"code","1e856bb7":"code","e65a2a06":"code","7f92022b":"code","b80d2c30":"code","e344c0c6":"code","65d56198":"code","052be8d1":"code","36965c56":"code","0065c5d4":"code","f791189c":"code","46302e1e":"code","f065b37c":"code","39f4e81f":"code","dec6e83a":"code","ef6c378e":"code","d3624181":"code","08ee2b9a":"code","bc39ca54":"code","19731aa4":"code","3242ced9":"code","6b37e242":"code","a2eeafd6":"markdown"},"source":{"67b60a68":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns","6f2b4a5c":"train=pd.read_csv('..\/input\/covid19-global-forecasting-week-3\/train.csv')\ntest=pd.read_csv('..\/input\/covid19-global-forecasting-week-3\/test.csv')\n","b64aac1f":"train.info()","a2f21f4f":"train.head()","2b5fe267":"#there are 180 unique countries \ntrain.Country_Region.unique()\nprint(len(train.Country_Region.unique()))","1e7bdcfa":"#there are not any null values in the countries column\ntrain.Country_Region.isnull().sum()","df714f99":"# there are 176 countries for which there are not state province values \n\ntrain[train['Province_State'].isnull()]['Country_Region'].unique()\nprint(len(train[train['Province_State'].isnull()]['Country_Region'].unique()))","fd97139c":"# fill nan values in state values with string \"unkown\"\n#train.loc[train['Province_State'].isnull(),\"Province_State\"]=\"unkown\"","4c3436ab":"#Inorder to merge train and test set: Created a new attribute to keep track  \n\ntrain['is_test']=False\ntest['is_test']=True\nmatrix=pd.concat([train,test],ignore_index=True)","c969af5f":"print(matrix.head())\nprint(matrix.shape)","c613b438":"# Rename columns \nmatrix.rename(columns={'Province_State':'state','Country_Region':'country'},inplace=True)\nmatrix.head()","dedd9770":"#replace null values in state with unknown\nmatrix.loc[matrix['state'].isnull(),'state']='unknown'\n\n# introducing the new column for the state and country by combinning them\nmatrix['Country_State']=matrix['country']+'_'+matrix['state']","ca3f90cf":"matrix.head()","4f87168c":"# convert Date column to date time object \nmatrix['Date'] = pd.to_datetime(matrix['Date'])","22c748fe":"# Adding a new columns day that have the day of year \nmatrix['Day']=matrix['Date'].dt.dayofyear\nmatrix.Day.min()","1e856bb7":"# SUBRACTING WITH 21 TO MAKE DAY START FROM ONE\nmatrix['Day']=matrix.Day-21\nmatrix.head(3)","e65a2a06":"#creating a new_column for the growth factor of both confirmed and fatalities for each country\n#growth factor= no of cases till date\/no of days\n\ngroup1=matrix.groupby('country')['ConfirmedCases'].transform('max')\ngroup2=matrix.groupby('country')['Day'].transform('max')\nmatrix['cases_growth_factor']=group1\/group2\n\ngroup1=matrix.groupby('country')['Fatalities'].transform('max')\ngroup2=matrix.groupby('country')['Day'].transform('max')\nmatrix['fatalities_growth_factor']=group1\/group2\n\nprint(matrix.head())\n\n    ","7f92022b":"#creating a new_column for the growth factor of both confirmed and fatalities for each state\n#growth factor= no of cases till date\/no of days\n\ngroup1=matrix.groupby('Country_State')['ConfirmedCases'].transform('max')\ngroup2=matrix.groupby('Country_State')['Day'].transform('max')\nmatrix['cases_growth_factor_state']=group1\/group2\n\ngroup1=matrix.groupby('Country_State')['Fatalities'].transform('max')\ngroup2=matrix.groupby('Country_State')['Day'].transform('max')\nmatrix['fatalities_growth_factor_state']=group1\/group2\n\nprint(matrix.head())","b80d2c30":"# mean encoding of country featrue\n\n\n\ngroup=matrix.groupby('country')['ConfirmedCases'].transform('mean')\nmatrix['conf_country_mean']=group\n\ngroup1=matrix.groupby('country')['Fatalities'].transform('max')\nmatrix['fatalities_country_mean']=group1\n","e344c0c6":"# mean encoding of the Country_State feature\n\ngroup=matrix.groupby('Country_State')['ConfirmedCases'].transform('mean')\nmatrix['conf_state_mean']=group\n\ngroup1=matrix.groupby('Country_State')['Fatalities'].transform('max')\nmatrix['fatalities_state_mean']=group1\n","65d56198":"# since we are using tree base models Label Encoder is the good option \n\nfrom sklearn.preprocessing import LabelEncoder\nmatrix['country']=LabelEncoder().fit_transform(matrix['country'])\nmatrix['state']=LabelEncoder().fit_transform(matrix['state'])\nmatrix['Country_State']=LabelEncoder().fit_transform(matrix['Country_State'])\n\n","052be8d1":"print(matrix.head())","36965c56":"# dropping the date column\nmatrix.drop('Date',axis=1,inplace=True)","0065c5d4":"#seperate the train and test date based on the is_true column\nnew_train=matrix[matrix['is_test']==False]\nnew_test=matrix[matrix['is_test']==True]","f791189c":"# dropping trivial attribrutes to predict the confirmed cases\nx_train=new_train.drop(['Fatalities','fatalities_growth_factor','fatalities_growth_factor_state','is_test','ForecastId','Id','ConfirmedCases',\n                        'fatalities_country_mean','fatalities_country_mean'],\n                       axis=1)\n","46302e1e":"x_train.info()","f065b37c":"#x_train.drop(['ConfirmedCases'],axis=1,inplace=True)\nx_test=new_test.drop(['Fatalities','fatalities_growth_factor','fatalities_growth_factor_state','is_test','ForecastId','Id','ConfirmedCases',\n                     'fatalities_country_mean','fatalities_country_mean'],axis=1)","39f4e81f":"y_train=new_train['ConfirmedCases']","dec6e83a":"from xgboost import XGBRegressor","ef6c378e":"model1=XGBRegressor(nestimators=10000)\nmodel1.fit(x_train,y_train,eval_metric='rmse')\nConfirmedCases=model1.predict(x_test)","d3624181":"# dropping the irrelevant features to predict fatalities \n\nx1_train=new_train.drop(['Fatalities','cases_growth_factor','cases_growth_factor_state','is_test','ForecastId','Id','ConfirmedCases',\n                        'conf_state_mean','conf_country_mean']\n                        ,axis=1)\nx1_test=new_test.drop(['Fatalities','cases_growth_factor','cases_growth_factor_state','is_test','ForecastId','Id','ConfirmedCases',\n                      'conf_state_mean','conf_country_mean'],axis=1)","08ee2b9a":"y1_train=new_train['Fatalities']","bc39ca54":"model2=XGBRegressor(nestimators=10000)\nmodel2.fit(x1_train,y1_train,eval_metric='rmse')\nFatalities=model2.predict(x1_test)","19731aa4":"xout = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})\nxdata = pd.DataFrame({'ForecastId': test['ForecastId'],'ConfirmedCases': ConfirmedCases, 'Fatalities': Fatalities})","3242ced9":"xout = pd.concat([xout, xdata], axis=0)\nxout.ForecastId = xout.ForecastId.astype('int')\nxout.tail()\nxout.to_csv('submission.csv', index=False)","6b37e242":"print(xout.head())","a2eeafd6":"## Upvote this kernel if you have found it useful. This motivates me a lot. "}}