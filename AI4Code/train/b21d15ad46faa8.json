{"cell_type":{"6db06959":"code","c5c33c5c":"code","356c3c37":"code","f0768c92":"code","69da05e6":"code","e5ee1377":"code","9f269e55":"code","a12ac1b3":"code","69d61cfa":"code","94ff43ce":"code","e03dcff2":"code","f18f8131":"code","dd58147c":"code","da36d261":"code","d269860c":"code","fe07150d":"code","468b4e25":"code","c69d0990":"code","bdfd7db3":"code","baf2b21f":"code","a6c3183c":"code","5999b3c1":"code","6c5c018e":"code","cefe7620":"code","ea7c887b":"code","de230932":"code","c502d90e":"code","3673e80f":"code","be25d05d":"code","ef5aba33":"code","41ef4a4e":"code","ab143eae":"code","9a37d886":"code","f3dd7b9a":"code","93907d29":"code","11265a24":"code","da39230f":"code","ec1742fa":"code","12ca2570":"code","d6936c2c":"code","680b75ca":"code","5c3a9c44":"code","2106964c":"code","a3b166d5":"code","a2ff9fae":"code","f7a8fd5f":"code","46ba2e19":"code","2ccaa292":"code","944433be":"code","1bea1c37":"code","de5948dd":"code","c13d0d31":"code","99dc207e":"code","f4d3ec09":"code","723a2621":"code","bdccb766":"code","4c8a1e4c":"code","e2e03559":"code","ef216170":"code","ac8f4a3f":"code","44d98f61":"code","16699b20":"code","d31bc086":"code","0fb4c327":"code","9ced93f3":"code","4e2c680a":"code","83f43d99":"code","4b275526":"code","aa529187":"code","915ab32c":"code","c552786e":"code","33b21224":"code","93aac00c":"code","bcf16a65":"code","ee0fdd17":"code","c6ab4c5a":"code","b3afc760":"code","4e971a57":"code","b3b26dda":"code","823ce500":"code","29cf1ccf":"code","17d8c696":"code","8ba095f8":"code","4433c3c2":"code","596279f0":"code","cc577bbb":"code","7e5bd6ed":"code","9dae48e3":"code","8ebb2449":"code","91d30e05":"code","0dd14018":"code","75ba9a17":"code","81f320b3":"code","09555263":"code","9afae13f":"code","407d39c2":"code","52820b07":"code","42541691":"code","7b0c071d":"code","71ec5599":"code","b7cd7eec":"code","f27f17fe":"code","4132bc14":"code","0a3d414d":"code","b0113317":"code","10df1f77":"code","789139aa":"code","e550051b":"code","80c1eb07":"code","ade08cf3":"code","917b4602":"code","eaa32f0b":"code","92b6594e":"code","397e5678":"code","9aa8668a":"code","4d064bf9":"code","2697e556":"code","1727188b":"code","c8d70c58":"code","125dca39":"code","b5e51a1e":"code","f8835a8e":"code","7020b17a":"code","07716afb":"code","b89386ec":"code","ba349276":"code","cfd8c31c":"code","65a5c0a6":"code","7a830142":"code","a9cc3097":"code","6e474dfa":"code","79944acd":"code","a6354cc3":"code","00c25d64":"code","b3823815":"code","1f667eb0":"code","7d206a0b":"code","a785110a":"code","7db420cd":"code","bd421e35":"code","149d91fd":"code","faf38292":"code","281c63d2":"code","36cff5ec":"code","486388b0":"code","7a27fae1":"code","f756b7b8":"code","aab2eb02":"code","e51e7150":"code","f9d1ae0d":"code","a3eaac69":"code","fa4a601a":"code","7ca0f0b2":"code","d87d23ee":"code","40a8486d":"code","28976c68":"code","bcc01f65":"code","452857f1":"code","8adafb53":"code","fd325aae":"code","48660caa":"code","cde32955":"code","0862744e":"code","06c6c466":"code","526356df":"code","5290b309":"code","5ee3bc63":"code","dc10e9c1":"code","6e3b061e":"code","5ba255d7":"code","8c1dc108":"code","c7a1fc6e":"code","964a6ec2":"code","6d2e3dde":"code","2641ea4b":"markdown","72a1a1d6":"markdown","6c4c504c":"markdown","12260f4d":"markdown","4841803d":"markdown","280770be":"markdown","8479be7f":"markdown","bce83cc8":"markdown","2010acc1":"markdown","92a9a71f":"markdown","874b7e46":"markdown","1b06b921":"markdown","5950138b":"markdown","5a89be59":"markdown","8614a030":"markdown","0c4be266":"markdown","cbbd2ae2":"markdown","0c4db64c":"markdown","a5e97ded":"markdown","915c5f03":"markdown","6a8ea675":"markdown","76f41693":"markdown","360277a8":"markdown","630dbda3":"markdown","e89e755e":"markdown","fde037e5":"markdown","c2ac13b2":"markdown","285181c6":"markdown","a45e99b7":"markdown","4ae815d5":"markdown","8c9216ad":"markdown","098afcf5":"markdown","7e797482":"markdown","8437d661":"markdown","59fe0f21":"markdown","e087526c":"markdown","48126b13":"markdown","71ac05ee":"markdown","a7dabd6b":"markdown"},"source":{"6db06959":"#The installation of seaborn package will take few time\nimport pip\nimport numpy as np\nimport pandas as pd\npd.set_option('precision',15)\nimport matplotlib.pyplot as plt\n# Pretty display for notebooks\n%matplotlib inline","c5c33c5c":"#Load the data\ndata = pd.read_csv('.\/new.csv',delimiter=\";\",dtype=object)","356c3c37":"# Success\nprint('Loans dataset has {0} data points with {1} variables each'.format(*data.shape))","f0768c92":"groupbyrisque = data.groupby('Niveau de risque').count()","69da05e6":"data.rename(columns={'Niveau de risque': 'Risque'}, inplace=True)","e5ee1377":"data.rename(columns={'capital social': 'Capital_Social'}, inplace=True)","9f269e55":"data.rename(columns={'Nombre de mois de la p\u00e9riode 17': 'Periode_17'}, inplace=True)","a12ac1b3":"data.rename(columns={'Nombre de mois de la p\u00e9riode 18': 'Periode_18'}, inplace=True)","69d61cfa":"data.rename(columns={'Chiffre d\\'Affaires 17': 'Chiffre_Affaire_17'}, inplace=True)","94ff43ce":"data.rename(columns={'Chiffre d\\'Affaires 18': 'Chiffre_Affaire_18'}, inplace=True)","e03dcff2":"data.rename(columns={'Evolution du Chiffre d\\'Affaires 17': 'Evolution_Chiffre_Affaire_17'}, inplace=True)","f18f8131":"data.rename(columns={'Evolution du Chiffre d\\'Affaires 18': 'Evolution_Chiffre_Affaire_18'}, inplace=True)","dd58147c":"data.rename(columns={'Marge d\\'EBE 17': 'Marge_EBE_17'}, inplace=True)","da36d261":"data.rename(columns={'Marge d\\'EBE 18': 'Marge_EBE_18'}, inplace=True)","d269860c":"data.rename(columns={'Resultat Net 17': 'Net_17'}, inplace=True)","fe07150d":"data.rename(columns={'Resultat Net 18': 'Net_18'}, inplace=True)","468b4e25":"data.rename(columns={'Capacit\u00e9 de remboursement (FCCR) 17': 'Capacite_Rembourcement_17'}, inplace=True)","c69d0990":"data.rename(columns={'Capacit\u00e9 de remboursement (FCCR) 18': 'Capacite_Rembourcement_18'}, inplace=True)","bdfd7db3":"data.rename(columns={'Fonds Propres \/ Total Bilan 17': 'Rapport_Fonds_Propres_Total_Bilan_17'}, inplace=True)","baf2b21f":"data.rename(columns={'Fonds Propres \/ Total Bilan 18': 'Rapport_Fonds_Propres_Total_Bilan_18'}, inplace=True)","a6c3183c":"data.rename(columns={'Passif circulant 17': 'Passif_Circulant_17'}, inplace=True)","5999b3c1":"data.rename(columns={'Passif circulant 18': 'Passif_Circulant_18'}, inplace=True)","6c5c018e":"data.rename(columns={'Actif circulant 17': 'Actif_Circulant_17'}, inplace=True)","cefe7620":"data.rename(columns={'Actif circulant 18': 'Actif_Circulant_18'}, inplace=True)","ea7c887b":"data.rename(columns={'Dettes court terme 17': 'Dettes_Cout_Terme_17'}, inplace=True)","de230932":"data.rename(columns={'Dettes court terme 18': 'Dettes_Cout_Terme_18'}, inplace=True)","c502d90e":"data.rename(columns={'Dettes Nettes \/ EBE(* ann\u00e9es) 17': 'Rapprt_Dettes_Nettes_EBE_17'}, inplace=True)","3673e80f":"data.rename(columns={'Dettes Nettes \/ EBE(* ann\u00e9es) 18': 'Rapprt_Dettes_Nettes_EBE_18'}, inplace=True)","be25d05d":"data.rename(columns={'Dettes Nettes \/ Fonds propres 17': 'Rapprt_Dettes_Fonds_Propres_17'}, inplace=True)","ef5aba33":"data.rename(columns={'Dettes Nettes \/ Fonds propres 18': 'Rapprt_Dettes_Fonds_Propres_18'}, inplace=True)","41ef4a4e":"features = data.drop(['ID','Periode_17','Emprunteur','Risque','ann\u00e9e de cr\u00e9ation','Ant\u00e9riorit\u00e9','effectifs','Nombre de mois de la p\u00e9riode 15','Nombre de mois de la p\u00e9riode 16','Chiffre d\\'Affaires 15','Chiffre d\\'Affaires 16','Evolution du Chiffre d\\'Affaires 15','Evolution du Chiffre d\\'Affaires 16','EBE(retrait\u00e9 des loyers de leasing) 15','EBE(retrait\u00e9 des loyers de leasing) 16','EBE(retrait\u00e9 des loyers de leasing) 17','EBE(retrait\u00e9 des loyers de leasing) 18','Marge d\\'EBE 15','Marge d\\'EBE 16','Resultat Net 15','Resultat Net 16','Total Bilan 15','Total Bilan 16','Total Bilan 17','Total Bilan 18','BFRE 15','BFRE 16','BFRE 17','BFRE 18','Capacit\u00e9 de remboursement (FCCR) 15','Capacit\u00e9 de remboursement (FCCR) 16','Fonds Propres 15','Fonds Propres 16','Fonds Propres 17','Fonds Propres 18','Fonds Propres \/ Total Bilan 15','Fonds Propres \/ Total Bilan 16','Passif circulant 15','Passif circulant 16','Actif immobilis\u00e9 15','Actif immobilis\u00e9 16','Actif immobilis\u00e9 17','Actif immobilis\u00e9 18','Actif circulant 15','Actif circulant 16','Dettes court terme 15','Dettes court terme 16','Dettes Moyen long terme 15','Dettes Moyen long terme 16','Dettes Moyen long terme 17','Dettes Moyen long terme 18','Dettes Nettes \/ EBE(* ann\u00e9es) 15','Dettes Nettes \/ EBE(* ann\u00e9es) 16','Dettes Nettes \/ Fonds propres 15','Dettes Nettes \/ Fonds propres 16','BFRE en nombre de jours de CA 15','BFRE en nombre de jours de CA 16','BFRE en nombre de jours de CA 17','BFRE en nombre de jours de CA 18','Periode_18','Chiffre_Affaire_18','Evolution_Chiffre_Affaire_18','Marge_EBE_18','Net_18','Capacite_Rembourcement_18','Rapport_Fonds_Propres_Total_Bilan_18','Passif_Circulant_18','Actif_Circulant_18','Dettes_Cout_Terme_18','Rapprt_Dettes_Nettes_EBE_18','Rapprt_Dettes_Fonds_Propres_18'], axis = 1)","ab143eae":"liste_taux = []\nfor i in features['Taux']:\n    try:\n        elem = str(i).replace(\"*\",\"\").replace(\",\",\"\").replace(\" *\",\"\").replace(\"%\",\"\").replace(\" \",\"\").replace(\"-\",\"\")\n        if str(i) != \"nan\":\n            liste_taux.append(int(elem))\n        else:\n            liste_taux.append(i)\n    except:\n        liste_taux.append(0)","9a37d886":"features[\"Taux\"] = liste_taux","f3dd7b9a":"pd.set_option('precision',15)\nliste_montant = []\nfor i in features[\"Montant\"]:\n    try:\n        elem = str(i).replace(\"\u20ac\",\"\").replace(\" \",\"\")\n        if str(i) != \"nan\":\n            liste_montant.append(int(elem))\n        else:\n            liste_montant.append(elem)\n    except:\n        liste_montant.append(0)","93907d29":"features[\"Montant\"] = liste_montant","11265a24":"liste_cp = []\nfor i in features[\"Capital_Social\"]:\n    try:\n        elem = str(i).replace(\"\u20ac\",\"\").replace(\" \",\"\")\n        if str(i) != \"nan\":\n            liste_cp.append(int(elem))\n        else:\n            liste_cp.append(elem)\n    except:\n        liste_cp.append(0)","da39230f":"features[\"Capital_Social\"] = liste_cp","ec1742fa":"features[\"Capital_Social\"].head()","12ca2570":"features.info()","d6936c2c":"# Success\nprint('Loans dataset has {0} data points with {1} variables each'.format(*features.shape))","680b75ca":"data['Risque'] = data['Risque'].map({'A': 0, 'A+': 1,'B': 2,'B+': 3, 'C': 4,'C+': 5})","5c3a9c44":"data['Pays'] = data['Pays'].map({'France': 0, 'Italie': 1,'Espagne': 2,'Pays-Bas': 3})","2106964c":"features[\"Pays\"] = data[\"Pays\"]","a3b166d5":"features[\"Pays\"] = features[\"Pays\"].fillna(method='ffill')","a2ff9fae":"Risque = data[\"Risque\"]","f7a8fd5f":"# here we set the figure size to 15x8\nplt.figure(figsize=(15, 8))\nplt.scatter(data.Risque, features.Pays)\nplt.xlabel(\"Risque \", fontsize=14)\nplt.ylabel(\"Pays\", fontsize=14)\nplt.title(\"Scatter plot of Risque and Pays\",fontsize=18)\nplt.show()","46ba2e19":"# here we set the figure size to 15x8\nplt.figure(figsize=(15, 8))\nplt.scatter(data.Risque, features.Taux)\nplt.xlabel(\"Risque \", fontsize=14)\nplt.ylabel(\"Taux\", fontsize=14)\nplt.title(\"Scatter plot of Risque and Taux\",fontsize=18)\nplt.show()","2ccaa292":"# here we set the figure size to 15x8\nplt.figure(figsize=(15, 8))\nplt.scatter(data.Risque, features.Mois)\nplt.xlabel(\"Risque \", fontsize=14)\nplt.ylabel(\"Mois\", fontsize=14)\nplt.title(\"Scatter plot of Risque and Mois\",fontsize=18)\nplt.show()","944433be":"# here we set the figure size to 15x8\nplt.figure(figsize=(15, 8))\nplt.scatter(data.Risque, features.Montant)\nplt.xlabel(\"Risque \", fontsize=14)\nplt.ylabel(\"Montant\", fontsize=14)\nplt.title(\"Scatter plot of Risque and Montant\",fontsize=18)\nplt.show()","1bea1c37":"# here we set the figure size to 15x8\nplt.figure(figsize=(15, 8))\nplt.scatter(data.Risque, features.Capital_Social)\nplt.xlabel(\"Risque \", fontsize=14)\nplt.ylabel(\"Capital Social\", fontsize=14)\nplt.title(\"Scatter plot of Risque and Capital Social\",fontsize=18)\nplt.show()","de5948dd":"\"\"\"#! conda install pandas --yes\n#! conda install -c conda-forge\/label\/gcc7 missingno --yes\n! conda install numpy==1.18 --yes\n! conda install scipy==1.1.0 --yes\n! conda install scikit-learn==0.21.3 --yes\"\"\"","c13d0d31":"import missingno as msno\n%matplotlib inline\nmsno.matrix(features)","99dc207e":"msno.heatmap(features)","f4d3ec09":"msno.dendrogram(features)","723a2621":"print(features.isnull().sum())\nprint(features.shape)","bdccb766":"liste_mois = []\nfor i in features[\"Mois\"]:\n    liste_mois.append(int(str(i).split(\".\")[0]))","4c8a1e4c":"features[\"Mois\"] = liste_mois","e2e03559":"liste_CA = []\nfor i in features[\"Chiffre_Affaire_17\"]:\n    elem = str(i).replace(\" \",\"\").replace(\"n\/a\",\"\").replace(\"13mois\",\"\").replace(\"nan\",\"\")\n    if \",\" in elem:\n        liste_CA.append(int(elem.split(\",\")[0]))\n    else:\n        liste_CA.append(elem)","ef216170":"features[\"Chiffre_Affaire_17\"] = liste_CA","ac8f4a3f":"last_list_CA = []\nfor i in liste_CA:\n    try:\n        last_list_CA.append(int(str(i).split(\".\")[0]))\n    except:\n        last_list_CA.append(0)","44d98f61":"features[\"Chiffre_Affaire_17\"] = last_list_CA","16699b20":"features[\"Chiffre_Affaire_17\"] = features[\"Chiffre_Affaire_17\"].fillna(method='ffill')","d31bc086":"# here we set the figure size to 15x8\nplt.figure(figsize=(15, 8))\nplt.scatter(data.Risque, features.Chiffre_Affaire_17)\nplt.xlabel(\"Risque \", fontsize=14)\nplt.ylabel(\"Chiffre_Affaire_17\", fontsize=14)\nplt.title(\"Scatter plot of Risque and Chiffre_Affaire_17\",fontsize=18)\nplt.show()","0fb4c327":"features[\"Evolution_Chiffre_Affaire_17\"].head()","9ced93f3":"liste_evolution_CA = []\nfor i in features[\"Evolution_Chiffre_Affaire_17\"]:\n    if \"%\" in str(i) and \"-\" in str(i):\n        liste_evolution_CA.append(00)\n    elif \"%\" in str(i) and \"-\" not in str(i):\n        liste_evolution_CA.append(int(str(i).split(\",\")[0]))\n    else:\n        liste_evolution_CA.append(00)","4e2c680a":"features[\"Evolution_Chiffre_Affaire_17\"] = liste_evolution_CA","83f43d99":"features[\"Evolution_Chiffre_Affaire_17\"] = features[\"Evolution_Chiffre_Affaire_17\"].fillna(method='ffill')","4b275526":"# here we set the figure size to 15x8\nplt.figure(figsize=(15, 8))\nplt.scatter(data.Risque, features.Evolution_Chiffre_Affaire_17)\nplt.xlabel(\"Risque \", fontsize=14)\nplt.ylabel(\"Evolution_Chiffre_Affaire_17\", fontsize=14)\nplt.title(\"Scatter plot of Risque and Evolution_Chiffre_Affaire_17 %\",fontsize=18)\nplt.show()","aa529187":"liste_marge_ebe = []\nfor i in features[\"Marge_EBE_17\"]:\n    if str(i).startswith('25'):\n        liste_marge_ebe.append(25)\n    elif str(i).startswith(\"20\"):\n        liste_marge_ebe.append(20)\n    elif str(i).startswith(\"-\"):\n        liste_marge_ebe.append(00)\n    elif str(i).startswith(\"15\"):\n        liste_marge_ebe.append(15)\n    elif str(i).startswith(\"10\"):\n        liste_marge_ebe.append(10)\n    elif str(i).startswith(\"60\"):\n        liste_marge_ebe.append(60)\n    elif str(i).startswith(\"50\"):\n        liste_marge_ebe.append(50)\n    elif str(i).startswith(\"40\"):\n        liste_marge_ebe.append(40)\n    elif str(i).startswith(\"5\"):\n        liste_marge_ebe.append(5)\n    elif str(i).startswith(\"60\"):\n        liste_marge_ebe.append(60)\n    elif str(i).startswith(\"30\"):\n        liste_marge_ebe.append(30)\n    elif str(i).startswith(\"35\"):\n        liste_marge_ebe.append(35)\n    elif str(i).startswith(\"45\"):\n        liste_marge_ebe.append(45)\n    elif str(i).startswith(\"55\"):\n        liste_marge_ebe.append(55)\n    else:\n        liste_marge_ebe.append(\"0\")","915ab32c":"features[\"Marge_EBE_17\"] = liste_marge_ebe","c552786e":"features[\"Marge_EBE_17\"] = features[\"Marge_EBE_17\"].fillna(method='ffill')","33b21224":"# here we set the figure size to 15x8\nplt.figure(figsize=(15, 8))\nplt.scatter(data.Risque, features.Marge_EBE_17)\nplt.xlabel(\"Risque \", fontsize=14)\nplt.ylabel(\"Marge_EBE_17\", fontsize=14)\nplt.title(\"Scatter plot of Risque and Marge_EBE_17 %\",fontsize=18)\nplt.show()","93aac00c":"liste_net = []\nfor i in features[\"Net_17\"]:\n    if str(i).startswith(\"-\"):\n        liste_net.append(0)\n    elif str(i).startswith(\"0\"):\n        liste_net.append(\"1\")\n    elif str(i).startswith(\"5\"):\n        liste_net.append(\"2\")\n    elif str(i).startswith(\"10\"):\n        liste_net.append(\"3\")\n    elif str(i).startswith(\"15\"):\n        liste_net.append(\"4\")\n    elif str(i).startswith(\"20\"):\n        liste_net.append(\"5\")\n    elif str(i).startswith(\"25\"):\n        liste_net.append(\"6\")\n    elif str(i).startswith(\"45\"):\n        liste_net.append(\"7\")\n    else:\n        liste_net.append(\"8\")","bcf16a65":"features[\"Net_17\"] = liste_net","ee0fdd17":"\"\"\"! conda install seaborn --yes\"\"\"","c6ab4c5a":"# here we set the figure size to 15x8\nplt.figure(figsize=(15, 8))\nplt.scatter(data.Risque, features.Net_17)\nplt.xlabel(\"Risque \", fontsize=14)\nplt.ylabel(\"Net_17\", fontsize=14)\nplt.title(\"Scatter plot of Risque and Net_17\",fontsize=18)\nplt.show()","b3afc760":"liste_capacite_rembourcement = []\nfor i in features[\"Capacite_Rembourcement_17\"]:\n    if str(i).startswith(\"-\"):\n        liste_capacite_rembourcement.append(0)\n    elif str(i) == \"nan\":\n        liste_capacite_rembourcement.append(0)\n    elif \".\" in str(i):\n        liste_capacite_rembourcement.append(int(str(i).split(\".\")[0]))\n    else:\n        liste_capacite_rembourcement.append(int(str(i).split(\",\")[0]))","4e971a57":"features[\"Capacite_Rembourcement_17\"] = liste_capacite_rembourcement","b3b26dda":"features[\"Capacite_Rembourcement_17\"] = features[\"Capacite_Rembourcement_17\"].fillna(method='ffill')","823ce500":"# here we set the figure size to 15x8\nplt.figure(figsize=(15, 8))\nplt.scatter(data.Risque, features.Capacite_Rembourcement_17)\nplt.xlabel(\"Risque \", fontsize=14)\nplt.ylabel(\"Capacite_Rembourcement_17\", fontsize=14)\nplt.title(\"Scatter plot of Risque and Capacite_Rembourcement_17\",fontsize=18)\nplt.show()","29cf1ccf":"liste_rapport_fonds_propre_total_bilan = []\nfor i in features[\"Rapport_Fonds_Propres_Total_Bilan_17\"]:\n    if str(i) != \"nan\":\n        elem = str(i).replace(\",\",\" \").replace(\".\",\" \")\n        if \"%\" in elem:\n            liste_rapport_fonds_propre_total_bilan.append(int(elem.split(\" \")[0]))\n        else:\n            liste_rapport_fonds_propre_total_bilan.append(0)\n    else:\n        liste_rapport_fonds_propre_total_bilan.append(i)","17d8c696":"last_list_fp_tb = []\nfor i in liste_rapport_fonds_propre_total_bilan:\n    if str(i).startswith(\"-\"):\n        last_list_fp_tb.append(0)\n    else:\n        last_list_fp_tb.append(i)","8ba095f8":"features[\"Rapport_Fonds_Propres_Total_Bilan_17\"] = last_list_fp_tb","4433c3c2":"features[\"Rapport_Fonds_Propres_Total_Bilan_17\"] = features[\"Rapport_Fonds_Propres_Total_Bilan_17\"].fillna(method='ffill')","596279f0":"# here we set the figure size to 15x8\nplt.figure(figsize=(15, 8))\nplt.scatter(data.Risque, features.Rapport_Fonds_Propres_Total_Bilan_17)\nplt.xlabel(\"Risque \", fontsize=14)\nplt.ylabel(\"Rapport_Fonds_Propres_Total_Bilan_17\", fontsize=14)\nplt.title(\"Scatter plot of Risque and Rapport_Fonds_Propres_Total_Bilan_17\",fontsize=18)\nplt.show()","cc577bbb":"#features[\"Passif_Circulant_17\"] = features[\"Passif_Circulant_17\"].replace(\" \",\"\").interpolate()\nfeatures[\"Passif_Circulant_17\"] = features[\"Passif_Circulant_17\"].replace(\" \",\"\").fillna(method='ffill')","7e5bd6ed":"liste_passif_circulant = []\nfor i in features[\"Passif_Circulant_17\"]:\n    elem = str(i).replace(\" \",\"\")\n    try:\n        liste_passif_circulant.append(int(elem))\n    except:\n        liste_passif_circulant.append(\"00\")","9dae48e3":"features[\"Passif_Circulant_17\"] = liste_passif_circulant","8ebb2449":"# here we set the figure size to 15x8\nplt.figure(figsize=(15, 8))\nplt.scatter(data.Risque, features.Passif_Circulant_17)\nplt.xlabel(\"Risque \", fontsize=14)\nplt.ylabel(\"Passif_Circulant_17\", fontsize=14)\nplt.title(\"Scatter plot of Risque and Passif_Circulant_17\",fontsize=18)\nplt.show()","91d30e05":"features[\"Actif_Circulant_17\"] = features[\"Actif_Circulant_17\"].replace(\" \",\"\").fillna(method='ffill')","0dd14018":"liste_actif_circulant = []\nfor i in features[\"Actif_Circulant_17\"]:\n    elem = str(i).replace(\" \",\"\")\n    try:\n        liste_actif_circulant.append(int(elem))\n    except:\n        liste_actif_circulant.append(\"00\")","75ba9a17":"features[\"Actif_Circulant_17\"] = liste_actif_circulant","81f320b3":"# here we set the figure size to 15x8\nplt.figure(figsize=(15, 8))\nplt.scatter(data.Risque, features.Actif_Circulant_17)\nplt.xlabel(\"Risque \", fontsize=14)\nplt.ylabel(\"Actif_Circulant_17\", fontsize=14)\nplt.title(\"Scatter plot of Risque and Actif_Circulant_17\",fontsize=18)\nplt.show()","09555263":"features[\"Dettes_Cout_Terme_17\"] = features[\"Dettes_Cout_Terme_17\"].replace(\" \",\"\").fillna(method='ffill')","9afae13f":"liste_dette_court_terme = []\nfor i in features[\"Dettes_Cout_Terme_17\"]:\n    elem = str(i).replace(\" \",\"\")\n    try:\n        liste_dette_court_terme.append(int(elem))\n    except:\n        liste_dette_court_terme.append(\"00\")","407d39c2":"features[\"Dettes_Cout_Terme_17\"] = liste_dette_court_terme","52820b07":"# here we set the figure size to 15x8\nplt.figure(figsize=(15, 8))\nplt.scatter(data.Risque, features.Dettes_Cout_Terme_17)\nplt.xlabel(\"Risque \", fontsize=14)\nplt.ylabel(\"Dettes_Cout_Terme_17\", fontsize=14)\nplt.title(\"Scatter plot of Risque and Dettes_Cout_Terme_17\",fontsize=18)\nplt.show()","42541691":"liste_dette_nette_ebe = []\nfor i in features[\"Rapprt_Dettes_Nettes_EBE_17\"]:\n    try:\n        elem = str(i).replace(\"*\",\"\").replace(\",\",\"\").replace(\" *\",\"\").replace(\"%\",\"\").replace(\" \",\"\").replace(\"-\",\"\")\n        if str(i) != \"nan\":\n            liste_dette_nette_ebe.append(int(elem))\n        else:\n            liste_dette_nette_ebe.append(i)\n    except:\n        liste_dette_nette_ebe.append(0)","7b0c071d":"features[\"Rapprt_Dettes_Nettes_EBE_17\"] = liste_dette_nette_ebe","71ec5599":"features[\"Rapprt_Dettes_Nettes_EBE_17\"] = features[\"Rapprt_Dettes_Nettes_EBE_17\"].replace(np.NaN, features[\"Rapprt_Dettes_Nettes_EBE_17\"].median())","b7cd7eec":"# here we set the figure size to 15x8\nplt.figure(figsize=(15, 8))\nplt.scatter(data.Risque, features.Rapprt_Dettes_Nettes_EBE_17)\nplt.xlabel(\"Risque \", fontsize=14)\nplt.ylabel(\"Rapprt_Dettes_Nettes_EBE_17\", fontsize=14)\nplt.title(\"Scatter plot of Risque and Rapprt_Dettes_Nettes_EBE_17\",fontsize=18)\nplt.show()","f27f17fe":"liste_rapport_dette_fonds_propre = []\nfor i in features[\"Rapprt_Dettes_Fonds_Propres_17\"]:\n    if str(i) != \"nan\" and \",\" in str(i) and \"%\" in str(i):\n        liste_rapport_dette_fonds_propre.append(int(str(i).replace(\"%\",\"\").split(\",\")[0])\/100)\n    elif \"-\" in str(i):\n        liste_rapport_dette_fonds_propre.append(00)\n    else:\n        liste_rapport_dette_fonds_propre.append(i)","4132bc14":"rapport_dette_fp = []\nfor i in liste_rapport_dette_fonds_propre:\n    if \"-\" in str(i):\n        rapport_dette_fp.append(00)\n    elif str(i) == \"nan\":\n        rapport_dette_fp.append(\"\")\n    elif \"%\" in str(i):\n        rapport_dette_fp.append(int(str(i).replace(\"%\",\"\")*100))\n    else:\n        rapport_dette_fp.append(str(i).split(\",\")[0])","0a3d414d":"last_list_refp = []\nfor i in rapport_dette_fp:\n    if len(str(i)) > 30 :\n        last_list_refp.append(0)\n    elif str(i) != \"\":\n        last_list_refp.append(int(str(i).split(\".\")[0]))\n    else:\n        last_list_refp.append(0)","b0113317":"features[\"Rapprt_Dettes_Fonds_Propres_17\"] = last_list_refp","10df1f77":"features[\"Rapprt_Dettes_Fonds_Propres_17\"] = features[\"Rapprt_Dettes_Fonds_Propres_17\"].fillna(method='bfill')","789139aa":"features.info()","e550051b":"import pandas\nfeatures[\"Pays\"] = features[\"Pays\"].astype(int)","80c1eb07":"features[\"Mois\"] = features[\"Mois\"].astype(int)","ade08cf3":"features[\"Chiffre_Affaire_17\"] = features[\"Chiffre_Affaire_17\"].astype(int)","917b4602":"features[\"Marge_EBE_17\"] = features[\"Marge_EBE_17\"].astype(int)","eaa32f0b":"features[\"Net_17\"] = pandas.to_numeric(features[\"Net_17\"])","92b6594e":"features[\"Rapport_Fonds_Propres_Total_Bilan_17\"] = features[\"Rapport_Fonds_Propres_Total_Bilan_17\"].astype(int)","397e5678":"features[\"Rapprt_Dettes_Nettes_EBE_17\"] = features[\"Rapprt_Dettes_Nettes_EBE_17\"].astype(int)","9aa8668a":"features[\"Passif_Circulant_17\"] = pandas.to_numeric(features[\"Passif_Circulant_17\"])","4d064bf9":"features[\"Actif_Circulant_17\"] = pandas.to_numeric(features[\"Actif_Circulant_17\"])","2697e556":"features[\"Dettes_Cout_Terme_17\"] = pandas.to_numeric(features[\"Dettes_Cout_Terme_17\"])","1727188b":"features[\"Rapprt_Dettes_Fonds_Propres_17\"] = features[\"Rapprt_Dettes_Fonds_Propres_17\"].astype(int)","c8d70c58":"features[\"Chiffre_Affaire_17\"] = features[\"Chiffre_Affaire_17\"].fillna(method='ffill')\nfeatures[\"Marge_EBE_17\"] = features[\"Marge_EBE_17\"].fillna(method='ffill')\nfeatures[\"Rapprt_Dettes_Fonds_Propres_17\"] = features[\"Rapprt_Dettes_Fonds_Propres_17\"].fillna(method='ffill')\nfeatures[\"Passif_Circulant_17\"] = features[\"Passif_Circulant_17\"].fillna(method='bfill')\nfeatures[\"Actif_Circulant_17\"] = features[\"Actif_Circulant_17\"].fillna(method='bfill')\nfeatures[\"Dettes_Cout_Terme_17\"] = features[\"Dettes_Cout_Terme_17\"].fillna(method='bfill')","125dca39":"import csv\nimport pandas\ndf = pandas.DataFrame(features)\nfeatures.to_csv('.\/last_data.csv', index = False, encoding='utf-8', sep=\";\", quotechar='\"',quoting=csv.QUOTE_ALL)","b5e51a1e":"import pandas\ndata = pandas.read_csv('.\/last_data.csv', sep=';', low_memory=False, dtype=int)","f8835a8e":"data.info()","7020b17a":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(data, Risque, test_size=0.20)","07716afb":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","b89386ec":"grids   =   [ {\n               'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None], #Random_forest_grid\n               'min_samples_split': [2, 5, 10],\n               'criterion' : ['gini', 'entropy' ],\n               'n_estimators': [180, 230, 280, 330, 350]} ,\n\n             {\n               'solver' : ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],     #Logistic_Regression_Grid\n               'penalty' : ['l2'],\n               'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]  }  ,\n\n\n              {'loss' : ['deviance'] ,\n               'learning_rate' : [0.001, 0.01, 0.1, 1, 10, 100, 1000] ,           #Gradient_Boost_Classifier_grid\n               'n_estimators' : [130, 180, 230] ,\n               'criterion' : ['friedman_mse', 'mse', 'mae'] ,\n               'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None],\n               'min_samples_leaf': [1, 2, 4],\n               'min_samples_split': [2, 5, 10] } ]","ba349276":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nclassifiers = [ RandomForestClassifier(), LogisticRegression(), GradientBoostingClassifier() ]\nbest_param = []\nbest_scores = []\nfor i in range(0,3):\n  RSCV = RandomizedSearchCV( estimator = classifiers[i], param_distributions = grids[i], n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n  RSCV.fit(X_train,y_train)\n  best_param.append( RSCV.best_params_ )\n  best_scores.append( RSCV.best_score_ )","cfd8c31c":"for i in range(0,3):\n  print(\"Classifier \" + str(i+1) + \" Best Parameters:\" + str(best_param[i]))","65a5c0a6":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(criterion='entropy', max_depth=None, min_samples_split=5, n_estimators=350)\nclassifier.fit(X_train,y_train)","7a830142":"y_pred = classifier.predict(X_test)","a9cc3097":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nprint(classification_report(y_test,y_pred))","6e474dfa":"from sklearn.linear_model import LogisticRegression\nclassifier_2 = LogisticRegression(solver='liblinear',C=10,penalty='l1',max_iter=500)\nclassifier_2.fit(X_train,y_train)","79944acd":"y_pred_2 = classifier_2.predict(X_test)\nprint(classification_report(y_test,y_pred_2))","a6354cc3":"from sklearn.ensemble import GradientBoostingClassifier\nclassifier_3 = GradientBoostingClassifier(n_estimators = 180, min_samples_split = 2, min_samples_leaf = 4, max_depth = 110, loss = 'deviance', learning_rate = 1, criterion = 'friedman_mse')\nclassifier_3.fit(X_train,y_train)","00c25d64":"y_pred_3 = classifier_3.predict(X_test)\nprint(classification_report(y_test,y_pred_3))","b3823815":"#! conda install -c anaconda py-xgboost --yes\nimport xgboost\nfrom xgboost import XGBClassifier\nfrom xgboost import XGBRegressor\nclassifier_4 = XGBClassifier()\nclassifier_4.fit(X_train,y_train)","1f667eb0":"y_pred_4 = classifier_4.predict(X_test)\nprint(classification_report(y_test,y_pred_4))","7d206a0b":"from sklearn.metrics import accuracy_score\npredictions = [y_pred, y_pred_2, y_pred_3,y_pred_4]\nfor i in predictions:\n  print(accuracy_score(y_test,i))","a785110a":"from sklearn.ensemble import VotingClassifier\nclassifier_5 = VotingClassifier(estimators=[('rf',classifier), ('lr',classifier_2), ('gb',classifier_3), ('xgb',classifier_4)], voting='soft',n_jobs=-1,)\nclassifier_5.fit(X_train,y_train)","7db420cd":"y_pred_5 = classifier_5.predict(X_test)\nprint(classification_report(y_test,y_pred_5))\nprint(accuracy_score(y_test,y_pred_5))","bd421e35":"\"2\";\"550\";\"48\";\"310000\";\"396072\";\"1743\";\"10\";\"25\";\"1\";\"3\";\"37\";\"0\";\"0\";\"0\";\"32\";\"0\"\n# user_input = [0,700,48,1500000,567765,1600,5,20,1,2,36,1,1,1,31,0]\nuser_input = {'Pays':3, 'Taux':70000, 'Mois':48, 'Montant':1523450, 'Capital_Social':765,'Chiffre_Affaire_17':160,'Evolution_Chiffre_Affaire_17':5,\n              'Marge_EBE_17':10,'Net_17':1,'Capacite_Rembourcement_17':6,'Rapport_Fonds_Propres_Total_Bilan_17':56,\n             'Passif_Circulant_17':2, 'Actif_Circulant_17':4, 'Dettes_Cout_Terme_17':2, 'Rapprt_Dettes_Nettes_EBE_17':31,\n              'Rapprt_Dettes_Fonds_Propres_17':0}\ndef input_to_one_hot(features):\n    # initialize the target vector with zero values\n    enc_input = np.zeros(16)\n    # set the numerical input as they are\n    enc_input[0]  = features['Pays']\n    enc_input[1]  = features['Taux']\n    enc_input[2]  = features['Mois']\n    enc_input[3]  = features['Montant']\n    enc_input[4]  = features['Capital_Social']\n    enc_input[5]  = features['Chiffre_Affaire_17']\n    enc_input[6]  = features['Evolution_Chiffre_Affaire_17']\n    enc_input[7]  = features['Marge_EBE_17']\n    enc_input[8]  = features['Net_17']\n    enc_input[9]  = features['Capacite_Rembourcement_17']\n    enc_input[10] = features['Rapport_Fonds_Propres_Total_Bilan_17']\n    enc_input[11] = features['Passif_Circulant_17']\n    enc_input[12] = features['Actif_Circulant_17']\n    enc_input[13] = features['Dettes_Cout_Terme_17']\n    enc_input[14] = features['Rapprt_Dettes_Nettes_EBE_17']\n    enc_input[15] = features['Rapprt_Dettes_Fonds_Propres_17']\n    return enc_input","149d91fd":"print(input_to_one_hot(user_input))","faf38292":"a = input_to_one_hot(user_input)","281c63d2":"Decision_Loan = classifier_4.predict([a])","36cff5ec":"if Decision_Loan[0] == 0:\n    print(\"The Loan Decision of your requests's characteristics is A\")\nelif Decision_Loan[0] == 1:\n    print(\"The Loan Decision of your requests's characteristics is A+\")\nelif Decision_Loan[0] == 2:\n    print(\"The Loan Decision of your requests's characteristics is B\")\nelif Decision_Loan[0] == 3:\n    print(\"The Loan Decision of your requests's characteristics is B+\")\nelif Decision_Loan[0] == 4:\n    print(\"The Loan Decision of your requests's characteristics is C\")\nelif Decision_Loan[0] == 5:\n    print(\"The Loan Decision of your requests's characteristics is C+\")","486388b0":"from sklearn.externals import joblib\n\njoblib.dump(classifier_4, 'model.pkl')","7a27fae1":"XGBoost = joblib.load('model.pkl')","f756b7b8":"if Decision_Loan[0] == 0:\n    print(\"The Loan Decision of your request is A\")\nelif Decision_Loan[0] == 1:\n    print(\"The Loan Decision of your request is A+\")\nelif Decision_Loan[0] == 2:\n    print(\"The Loan Decision of your request is B\")\nelif Decision_Loan[0] == 3:\n    print(\"The Loan Decision of your request is B+\")\nelif Decision_Loan[0] == 4:\n    print(\"The Loan Decision of your request is C\")\nelif Decision_Loan[0] == 5:\n    print(\"The Loan Decision of your request is C+\")","aab2eb02":"import pandas\ndata = pandas.read_csv('.\/last_data.csv', sep=';', low_memory=False, dtype=int)","e51e7150":"data.info()","f9d1ae0d":"rapport_Actif_Circulant_17_Dettes_Cout_Terme_17 = data[\"Actif_Circulant_17\"]\/data[\"Dettes_Cout_Terme_17\"]","a3eaac69":"liste_rapport= []\nfor i in rapport_Actif_Circulant_17_Dettes_Cout_Terme_17:\n    if str(i) == \"nan\":\n        liste_rapport.append(0)\n    elif str(i) == \"inf\":\n        liste_rapport.append(0)\n    else:\n        liste_rapport.append(int(str(i).split(\".\")[0]))","fa4a601a":"rapport_Actif_Circulant_17_Dettes_Cout_Terme_17 = pandas.Series(liste_rapport)","7ca0f0b2":"rapport_Actif_Circulant_17_Dettes_Cout_Terme_17 = rapport_Actif_Circulant_17_Dettes_Cout_Terme_17.fillna(method='ffill')","d87d23ee":"data[\"rapport_Actif_Circulant_17_Dettes_Cout_Terme_17\"] = pandas.Series(rapport_Actif_Circulant_17_Dettes_Cout_Terme_17, index=data.index)","40a8486d":"data[\"rapport_Actif_Circulant_17_Dettes_Cout_Terme_17\"] = data[\"rapport_Actif_Circulant_17_Dettes_Cout_Terme_17\"].astype(int)","28976c68":"data[\"rapport_Actif_Circulant_17_Dettes_Cout_Terme_17\"] = data[\"rapport_Actif_Circulant_17_Dettes_Cout_Terme_17\"].fillna(method='ffill')","bcc01f65":"import csv\nimport pandas\ndf = pandas.DataFrame(data)\ndata.to_csv('.\/last_data_with_feature_engineering.csv', index = False, encoding='utf-8', sep=\";\", quotechar='\"',quoting=csv.QUOTE_ALL)","452857f1":"import pandas\ndata = pandas.read_csv('.\/last_data_with_feature_engineering.csv', sep=';', low_memory=False, dtype=int)","8adafb53":"data.info()","fd325aae":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(data, Risque, test_size=0.20)","48660caa":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","cde32955":"grids   =   [ {\n               'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None], #Random_forest_grid\n               'min_samples_split': [2, 5, 10],\n               'criterion' : ['gini', 'entropy' ],\n               'n_estimators': [180, 230, 280, 330, 350]} ,\n\n             {\n               'solver' : ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],     #Logistic_Regression_Grid\n               'penalty' : ['l2'],\n               'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]  }  ,\n\n\n              {'loss' : ['deviance'] ,\n               'learning_rate' : [0.001, 0.01, 0.1, 1, 10, 100, 1000] ,           #Gradient_Boost_Classifier_grid\n               'n_estimators' : [130, 180, 230] ,\n               'criterion' : ['friedman_mse', 'mse', 'mae'] ,\n               'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None],\n               'min_samples_leaf': [1, 2, 4],\n               'min_samples_split': [2, 5, 10] } ]","0862744e":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nclassifiers = [ RandomForestClassifier(), LogisticRegression(), GradientBoostingClassifier() ]\nbest_param = []\nbest_scores = []\nfor i in range(0,3):\n  RSCV = RandomizedSearchCV( estimator = classifiers[i], param_distributions = grids[i], n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n  RSCV.fit(X_train,y_train)\n  best_param.append( RSCV.best_params_ )\n  best_scores.append( RSCV.best_score_ )","06c6c466":"for i in range(0,3):\n  print(\"Classifier \" + str(i+1) + \" Best Parameters:\" + str(best_param[i]))","526356df":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(criterion='entropy', max_depth=None, min_samples_split=5, n_estimators=350)\nclassifier.fit(X_train,y_train)","5290b309":"y_pred = classifier.predict(X_test)","5ee3bc63":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nprint(classification_report(y_test,y_pred))","dc10e9c1":"from sklearn.linear_model import LogisticRegression\nclassifier_2 = LogisticRegression(solver='liblinear',C=10,penalty='l1',max_iter=500)\nclassifier_2.fit(X_train,y_train)","6e3b061e":"y_pred_2 = classifier_2.predict(X_test)\nprint(classification_report(y_test,y_pred_2))","5ba255d7":"from sklearn.ensemble import GradientBoostingClassifier\nclassifier_3 = GradientBoostingClassifier(n_estimators = 180, min_samples_split = 2, min_samples_leaf = 4, max_depth = 110, loss = 'deviance', learning_rate = 1, criterion = 'friedman_mse')\nclassifier_3.fit(X_train,y_train)","8c1dc108":"y_pred_3 = classifier_3.predict(X_test)\nprint(classification_report(y_test,y_pred_3))","c7a1fc6e":"#! conda install -c anaconda py-xgboost --yes\nimport xgboost\nfrom xgboost import XGBClassifier\nfrom xgboost import XGBRegressor\nclassifier_4 = XGBClassifier()\nclassifier_4.fit(X_train,y_train)","964a6ec2":"y_pred_4 = classifier_4.predict(X_test)\nprint(classification_report(y_test,y_pred_4))","6d2e3dde":"from sklearn.metrics import accuracy_score\npredictions = [y_pred, y_pred_2, y_pred_3,y_pred_4]\nfor i in predictions:\n  print(accuracy_score(y_test,i))","2641ea4b":"# Using Logistic Regression Classifier","72a1a1d6":"# <FONT color=\"fuchsia\">Data Modeling<\/FONT>","6c4c504c":"# Using XGBoost Classifier","12260f4d":"# Scaling the Data","4841803d":"<h1>Impute missing values with forward fill and backward fill:<\\h1><br>\n<FONT size=\"3p\">\nNull values can also be replaced by it\u2019s previous value in the column which is called Backward fill or next occurring value in the column which is called Forward fill.<\/br> The NaN value will remain even after forward filling or back filling if a next or previous value isn\u2019t available or it is also a NaN value.<\/br><\/FONT>","280770be":"## Could you adjust the model using the new data? What are the results? What are your conclusions?","8479be7f":"# Part 3: Alternative data","bce83cc8":"## Comparing the best Accuracy Score of all Classifiers :","2010acc1":"## Feature Engineering : Adding extra features","92a9a71f":"# Using XGBoost Classifier","874b7e46":"<table class='table table-striped'> <thead> <tr> <th>Model<\/th> <th>Variance Score<\/th><\/tr> <\/thead> <tbody> <tr> <th scope='row'>Random Forest<\/th> <td>0.69<\/td><\/tr> <tr> <th scope='row'>Logistic Regression <\/th> <td>0.55<\/td><\/tr> <tr> <th scope='row'> Gradient Boosting\t<\/th> <td>0.66<\/td><\/tr> \n<tr> <th scope='row'>XGBoost<\/th> <td>0.68<\/td><\/tr><\/tbody> <\/table>","1b06b921":"Let's visualize the distribution of Loan price by their Pays, and look how it behaves","5950138b":"In order to have a better predictive model, we can add extra data to our dataset using different techniques.<br> For example the famous one is Web Crawl or Web Scraping using different tools : selenium, BeautifullSoup,<br> Scrapy Framework, Neukolln, Storm.<br>\nin addition to that we can collect extra data about our clients from websites such as <br>\nGoogle News where news and trends are always there,from Blacklists on websites.","5a89be59":"# Using Gradient Boosting Classifier\u00b6","8614a030":"<FONT size=\"4p\">Based on Accuracy Score of four Models; the best Model to use is XGBoost Classifier.<\/FONT>","0c4be266":"<ol>\n  <li>Deleating rows with missing values<\/li>\n  <li>Impute missing values with Mean\/Median<\/li>\n  <li>Impute missing values with forward fill and backward fill<\/li>\n<\/ol>","cbbd2ae2":"## Comparing the best Accuracy Score of all Classifiers :","0c4db64c":"## Could you explain what is the meaning of generative data? Is it useful in our case? Why?","a5e97ded":"# Data Splitting","915c5f03":"# Using Gradient Boosting Classifier\u00b6","6a8ea675":"## Compared to those results and previous results there is a difference in accuracy : the best one was for Linear Regression Classifier with 69 % becomes 77 %. So the Data Engineering or Data Generative used has enhanced and affected positiv our Model. ","76f41693":"# <FONT color=\"blue\">Best Model<\/FONT>","360277a8":"These are traditional data sources, such as customer records, which are easy to manipulate and store in relational databases .<br> For decades, this type of structured information has been the primary fuel for decision-making. However, as the type and amount of information that is available continues to grow, we are seeing that it\u2019s not enough to tap into their own pools of proprietary data.<br>\nAlternative Data that comes from social media profiles, industry specific information, etc are very important.<br> Alternative Data and traditional data can be combined to bring deeper insights so we can act on more quickly for tangible benefits and clever decisions.<br>","630dbda3":"<FONT size=\"4p\">Usually we split our data into three parts : Training , validation and Testing set, but for simplicity we will use only train and test with 20% in test size.<\/FONT>","e89e755e":"## What are the data sources we can add to our dataset to have better a predictive model? Can you list some sources & techniques?","fde037e5":"# Using Logistic Regression Classifier","c2ac13b2":"# Save the best model","285181c6":"<FONT size=\"5p\" color=\"blue\">Let's predict an observation never seen before<\/FONT>","a45e99b7":"<h1>Deleating rows with missing values<\\h1><br>\n<FONT size=\"3p\">Missing values can be handled by deleting the rows or columns having null values.<\/br> If columns have more than half of rows as null then the entire column can be dropped. <br> The rows which are having one or more columns values as null can also be dropped.<br> Wel will not use this method because we have a few data and we won't to lose more.<br> ---> In our case we will not use this method because we have a very little data so we want to keep them as max as possible.<br><\/FONT>","4ae815d5":"## How can we improve the previous predictive model? Is getting alternative data, a solution for that?","8c9216ad":"# Using Random Forest Classifier with Best Parameters\u00b6","098afcf5":"<ol>\n  <li>Loading Data<\/li>\n  <li>Data preprocessing and cleaning<\/li>\n  <li>Data exploration and visualisation<\/li>\n  <li>Data modeling<\/li>\n  <li>Evaluating the model<\/li>\n<\/ol>","7e797482":"<h1>Impute missing values with Mean\/Median:<\\h1><br>\n<FONT size=\"3p\">\nColumns in the dataset which are having numeric continuous values can be replaced with the mean, median, or mode of remaining values in the column.<\/br> This method can prevent the loss of data compared to the earlier method.<\/br> Replacing the above two approximations (mean, median) is a statistical approach to handle the missing values.<\/br><\/FONT>","8437d661":"Generative data refers to data that comes from another existant data with some modifications.<br> \nFo example in our case we can create a new column \"Liquidit\u00e9 G\u00e9n\u00e9rale\" based on the ratio of<br>\nActif_Circulant with Dettes_Court_Terme because it represents an essential factor for the <br>\ncredibility and profitability of the client.","59fe0f21":"# Part 1: Descriptive analysis","e087526c":"To do that we first build a fucntion that takes a simple user input and transform it to a one hot encoding.","48126b13":"<FONT size=\"4p\">I will pursuit a Data Science process to build and deploy a Machine Learning Model that can predict a Loan decision, by following the steps below:<\/FONT>","71ac05ee":"# Using Random Forest Classifier with Best Parameters\u00b6","a7dabd6b":"# Using Randomized Search CV for Hyperparameter tuning Of Random Forest"}}