{"cell_type":{"b1b01709":"code","53745bc8":"code","c7147043":"code","2815ec5e":"code","935577da":"code","c3bbcbfa":"code","0b53b094":"code","d57a566b":"code","480e40e2":"code","cec580e2":"code","14c297b8":"code","30186864":"code","fe88abf3":"code","2aed2bc2":"code","1faea430":"code","fadc44f9":"code","9a7ca707":"code","dec06952":"code","a3534932":"code","47884afc":"code","c22314f3":"code","8546abc7":"markdown","ffb8c5af":"markdown"},"source":{"b1b01709":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mplimg\nfrom matplotlib.pyplot import imshow\nfrom IPython.display import  Image\n\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder\n\nfrom keras import layers\nfrom keras.preprocessing import image\nfrom keras.applications.imagenet_utils import preprocess_input\nfrom keras.layers import Input,Dense,Activation,BatchNormalization,Conv2D,Flatten\nfrom keras.layers import AveragePooling2D,MaxPooling2D,Dropout\nfrom keras.models import Model\n\nimport keras.backend as k\nfrom keras.models import Sequential\n\nimport warnings\nwarnings.simplefilter(\"ignore\", category=DeprecationWarning)\n\n","53745bc8":"os.listdir('..\/input\/')","c7147043":"train_df=pd.read_csv('..\/input\/train.csv')\n\ntrain_df.head()","2815ec5e":"train_df.columns","935577da":"# Random image\n\nfrom IPython.display import  Image\nimport random\n\nImage(filename='..\/input\/train\/'+random.choice(train_df.Image))\n","c3bbcbfa":"def\nX_train=np.zeros((train_df.shape[0],100,100,3))\ncount=0\n\nfor fig in train_df['Image']:\n    img=image.load_img('..\/input\/train\/'+fig,target_size=(100,100,3))\n    x=image.img_to_array(img)\n#     x=preprocess_input(img)\n    \n    X_train[count]=x\n    \nreturn X_train\n\n","0b53b094":"def prepareImage(data,n,datset):\n    print('Printing Images')\n    X_train=np.zeros((n,100,100,3))\n    count=0\n    \n    for fig in data['Image']:\n        img=image.load_img('..\/input\/'+datset+'\/'+ fig,target_size=(100,100,3))\n        x=image.img_to_array(img)\n        x=preprocess_input(x)\n        \n        X_train[count]=x\n        \n        if(count%500==0):\n            print(\"ProcessingImage : \" , count+1,\", \",fig)\n        count +=1\n        \n    return X_train     \n   ","d57a566b":"X = prepareImage(train_df, train_df.shape[0], \"train\")\nX \/= 255","480e40e2":"def prepare_labels(y):\n    values=np.array(y)\n    label_encoder=LabelEncoder()\n    integer_encoded=label_encoder.fit_transform(values)\n    print(integer_encoded)\n    \n    onehot_encoder=OneHotEncoder(sparse=False)\n    integer_encoded=integer_encoded.reshape(len(integer_encoded),1)\n    onehot_encoded=onehot_encoder.fit_transform(integer_encoded)\n    print(onehot_encoded)\n    y=onehot_encoded\n    return y,label_encoder","cec580e2":"y,label_encoder=prepare_labels(train_df['Id'])","14c297b8":"y.shape\n","30186864":"# CNN architecture \n\nmodel=Sequential()\n\n# convolution\nmodel.add(Conv2D(32,(7,7),strides=(1,1),name = 'conv0', input_shape=(100,100,3)))\n\n#Batch Normalization\n\nmodel.add(BatchNormalization(axis=3,name='bn0'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D((2,2),name='max_pool'))\n\nmodel.add(Conv2D(64,(3,3),strides=(1,1),name='conv1'))\nmodel.add(Activation('relu'))\nmodel.add(AveragePooling2D((3,3),name='avg_pool'))\n\nmodel.add(Flatten())\nmodel.add(Dense(500,activation='relu',name='r1'))\nmodel.add(Dropout(0.8))\nmodel.add(Dense(y.shape[1],activation='softmax',name='sm'))\n\nmodel.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\nmodel.summary()","fe88abf3":"history=model.fit(X,y,epochs=15,batch_size=100,verbose=1)\ngc.collect()","2aed2bc2":"import gc\ngc.collect()","1faea430":"plt.plot(history.history['acc'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.show()","fadc44f9":"test = os.listdir(\"..\/input\/test\/\")\nprint(len(test))","9a7ca707":"col = ['Image']\ntest_df = pd.DataFrame(test, columns=col)\ntest_df['Id'] = ''","dec06952":"X = prepareImage(test_df, test_df.shape[0], \"test\")\nX \/= 255","a3534932":"predictions = model.predict(np.array(X), verbose=1)","47884afc":"for i, pred in enumerate(predictions):\n    test_df.loc[i, 'Id'] = ' '.join(label_encoder.inverse_transform(pred.argsort()[-5:][::-1]))","c22314f3":"test_df.head(10)\ntest_df.to_csv('submission.csv', index=False)","8546abc7":"**Preprocessing the images in training then converting into Array**","ffb8c5af":"**Humpback Whale Identification - CNN with Keras**"}}