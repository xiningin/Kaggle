{"cell_type":{"eeddd7d8":"code","33abc9b2":"code","4232d389":"code","8717f9eb":"code","517906a7":"code","4ed557e4":"code","f8c78a3a":"code","05f3b6db":"code","55f89d85":"code","55a40025":"code","0af2bd61":"code","9ea2b6ec":"code","2f16401a":"code","ff019305":"code","e0f763e4":"code","fd87ce37":"code","495213b3":"code","2e4f7faa":"code","78af3236":"code","47b31538":"markdown","9b48ab6a":"markdown","fc376ead":"markdown","ee8d42dd":"markdown","9bb7a7d5":"markdown","bcf858e4":"markdown","e1065836":"markdown","da66fee5":"markdown","e8d50be0":"markdown"},"source":{"eeddd7d8":"import pandas as pd\nimport numpy as np\nimport cv2\nimport os\nimport re\n\nfrom PIL import Image\n\nimport albumentations as A\nfrom albumentations.pytorch.transforms import ToTensorV2\n\nimport torch\nimport torchvision\n\nfrom torchvision.models.detection.faster_rcnn import FastRCNNPredictor\nfrom torchvision.models.detection import FasterRCNN\nfrom torchvision.models.detection.rpn import AnchorGenerator\n\nfrom torch.utils.data import DataLoader, Dataset\nfrom torch.utils.data.sampler import SequentialSampler\n\nfrom matplotlib import pyplot as plt\n\nTest = True","33abc9b2":"# from tensorboardX import SummaryWriter\n# writer = SummaryWriter('log')","4232d389":"# DIR_INPUT = '\/kaggle\/input\/global-wheat-detection'\n# DIR_TRAIN = f'{DIR_INPUT}\/train'\n# DIR_TEST = f'{DIR_INPUT}\/test'\n# train_df = pd.read_csv(f'{DIR_INPUT}\/train.csv')\n# train_df.shape","8717f9eb":"# train_df['x'] = -1\n# train_df['y'] = -1\n# train_df['w'] = -1\n# train_df['h'] = -1\n\n# def expand_bbox(x):\n#     r = np.array(re.findall(\"([0-9]+[.]?[0-9]*)\", x))\n#     if len(r) == 0:\n#         r = [-1, -1, -1, -1]\n#     return r\n\n# train_df[['x', 'y', 'w', 'h']] = np.stack(train_df['bbox'].apply(lambda x: expand_bbox(x)))\n# train_df.drop(columns=['bbox'], inplace=True)\n# train_df['x'] = train_df['x'].astype(np.float)\n# train_df['y'] = train_df['y'].astype(np.float)\n# train_df['w'] = train_df['w'].astype(np.float)\n# train_df['h'] = train_df['h'].astype(np.float)\n\n# image_ids = train_df['image_id'].unique()\n# valid_ids = image_ids[-665:]\n# train_ids = image_ids[:-665]\n\n# valid_df = train_df[train_df['image_id'].isin(valid_ids)]\n# train_df = train_df[train_df['image_id'].isin(train_ids)]","517906a7":"# train_df","4ed557e4":"# skpike_train_images = '..\/input\/wheat-data-spide\/images\/train'\n# skpike_train_labels = '..\/input\/wheat-data-spide\/labels\/train'\n# we_images = os.listdir(skpike_train_images)\n# we_labels = os.listdir(skpike_train_labels)\n# we_images = np.sort(we_images)\n# we_labels = np.sort(we_labels)\n# spike_df_train = None\n# for (lab, img) in zip(we_labels, we_images):\n#     df = pd.read_csv(skpike_train_labels + '\/' + lab, sep=' ', header=None)\n#     df.columns = ['class', 'x', 'y', 'w', 'h']\n#     df['x'] = (1024 * df['x'])\n#     df['y'] = np.ceil(1024 * df['y'])\n#     df['w'] = np.floor(1024 * df['w'])\n#     df['h'] = np.floor(1024 * df['h'])\n#     df['x'] = np.ceil(df['x'] - df['w']\/2 - 1)\n#     df['y'] = np.ceil(df['y'] - df['h']\/2 - 1)\n    \n#     df['x'] = df['x'].clip(0.1, 1023)\n#     df['y'] = df['y'].clip(0.1, 1023)\n#     keep_idx = df['w'] > 1\n#     df = df[keep_idx]\n#     keep_idx = df['h'] > 1\n#     df = df[keep_idx]\n    \n    \n    \n#     df['image_id'] = img.split('.')[0]\n#     df['base_path'] = '..\/input\/spike-dataset\/images\/train\/'\n#     df['width'] = 1024\n#     df['height'] = 1024\n#     df['source'] = 'spike'\n#     df = df.drop(['class'], axis=1)\n#     df = df[['image_id', 'width', 'height', 'source', 'x', 'y', 'w', 'h', 'base_path']]\n    \n    \n#     #print ( lab, img)\n#     if spike_df_train is None:\n#         spike_df_train = df.copy()\n#     else:\n#         spike_df_train = pd.concat((spike_df_train, df))\n        \n# spike_df_train.head()    ","f8c78a3a":"# skpike_valid_images = '..\/input\/wheat-data-spide\/images\/valid'\n# skpike_valid_labels = '..\/input\/wheat-data-spide\/labels\/valid'\n# we_images = os.listdir(skpike_valid_images)\n# we_labels = os.listdir(skpike_valid_labels)\n# we_images = np.sort(we_images)\n# we_labels = np.sort(we_labels)\n# spike_df_valid = None\n# for (lab, img) in zip(we_labels, we_images):\n#     df = pd.read_csv(skpike_valid_labels + '\/' + lab, sep=' ', header=None)\n#     df.columns = ['class', 'x', 'y', 'w', 'h']\n#     df['x'] = (1024 * df['x'])\n#     df['y'] = np.ceil(1024 * df['y'])\n#     df['w'] = np.floor(1024 * df['w'])\n#     df['h'] = np.floor(1024 * df['h'])\n#     df['x'] = np.ceil(df['x'] - df['w']\/2 - 1)\n#     df['y'] = np.ceil(df['y'] - df['h']\/2 - 1)\n    \n#     df['x'] = df['x'].clip(0.1, 1023)\n#     df['y'] = df['y'].clip(0.1, 1023)\n#     keep_idx = df['w'] > 1\n#     df = df[keep_idx]\n#     keep_idx = df['h'] > 1\n#     df = df[keep_idx]\n    \n    \n    \n#     df['image_id'] = img.split('.')[0]\n#     df['base_path'] = '..\/input\/spike-dataset\/images\/valid\/'\n#     df['width'] = 1024\n#     df['height'] = 1024\n#     df['source'] = 'spike'\n#     df = df.drop(['class'], axis=1)\n#     df = df[['image_id', 'width', 'height', 'source', 'x', 'y', 'w', 'h', 'base_path']]\n    \n    \n#     #print ( lab, img)\n#     if spike_df_valid is None:\n#         spike_df_valid = df.copy()\n#     else:\n#         spike_df_valid = pd.concat((spike_df_valid, df))\n        \n# spike_df_valid.head()    ","05f3b6db":"# '''\n# \u9884\u89c8\u56fe\u50cf\n# '''\n# image = cv2.imread('..\/input\/wheat-data-spide\/images\/train\/Spike_0001_0_0.jpg')\n# image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\n# image \/= 255.0\n# fig, ax = plt.subplots(1, 1, figsize=(16, 8))\n# ax.imshow(image)","55f89d85":"class WheatDataset(Dataset):\n\n    def __init__(self, dataframe, image_dir, transforms=None):\n        super().__init__()\n\n        self.image_ids = dataframe['image_id'].unique()\n        self.df = dataframe\n        self.image_dir = image_dir\n        self.transforms = transforms\n\n    def __getitem__(self, index: int):\n\n        image_id = self.image_ids[index]\n        records = self.df[self.df['image_id'] == image_id]\n\n        image = cv2.imread(f'{self.image_dir}\/{image_id}.jpg', cv2.IMREAD_COLOR)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        image \/= 255.0\n\n        boxes = records[['x', 'y', 'w', 'h']].values\n        boxes[:, 2] = boxes[:, 0] + boxes[:, 2]\n        boxes[:, 3] = boxes[:, 1] + boxes[:, 3]\n        \n        area = (boxes[:, 3] - boxes[:, 1]) * (boxes[:, 2] - boxes[:, 0])\n        area = torch.as_tensor(area, dtype=torch.float32)\n\n        # there is only one class\n        labels = torch.ones((records.shape[0],), dtype=torch.int64)\n        \n        # suppose all instances are not crowd\n        iscrowd = torch.zeros((records.shape[0],), dtype=torch.int64)\n        \n        target = {}\n        target['boxes'] = boxes\n        target['labels'] = labels\n        # target['masks'] = None\n        target['image_id'] = torch.tensor([index])\n        target['area'] = area\n        target['iscrowd'] = iscrowd\n\n        if self.transforms:\n            sample = {\n                'image': image,\n                'bboxes': target['boxes'],\n                'labels': labels\n            }\n            sample = self.transforms(**sample)\n            image = sample['image']\n            \n            target['boxes'] = torch.stack(tuple(map(torch.tensor, zip(*sample['bboxes'])))).permute(1, 0)\n\n        return image, target, image_id\n\n    def __len__(self) -> int:\n        return self.image_ids.shape[0]","55a40025":"# Albumentations\ndef get_train_transform():\n    return A.Compose([\n        A.Flip(0.5),\n        ToTensorV2(p=1.0)\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\n\ndef get_valid_transform():\n    return A.Compose([\n        ToTensorV2(p=1.0)\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\n","0af2bd61":"\n# anchor_sizes = ((8,), (16,), (32,), (64,), (128,))\n# aspect_ratios = ((0.5, 1.0, 2.0),) * len(anchor_sizes)\n# rpn_anchor_generator = AnchorGenerator(\n#     anchor_sizes, aspect_ratios\n# )\n\n# load a model; pre-trained on COCO\nif Test:\n    model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=False,pretrained_backbone=False)\n#                                                                  rpn_anchor_generator=rpn_anchor_generator)\nelse:\n    model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)\nnum_classes = 2  # 1 class (wheat) + background\n\n# get number of input features for the classifier\nin_features = model.roi_heads.box_predictor.cls_score.in_features\n\n# replace the pre-trained head with a new one\nmodel.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)","9ea2b6ec":"class Averager:\n    def __init__(self):\n        self.current_total = 0.0\n        self.iterations = 0.0\n\n    def send(self, value):\n        self.current_total += value\n        self.iterations += 1\n\n    @property\n    def value(self):\n        if self.iterations == 0:\n            return 0\n        else:\n            return 1.0 * self.current_total \/ self.iterations\n\n    def reset(self):\n        self.current_total = 0.0\n        self.iterations = 0.0\n","2f16401a":"# def collate_fn(batch):\n#     return tuple(zip(*batch))\n\n# train_dataset = WheatDataset(train_df, DIR_TRAIN, get_train_transform())\n# valid_dataset = WheatDataset(valid_df, DIR_TRAIN, get_valid_transform())\n# # skpike_train_images\u4e3a\u56fe\u7247\u8def\u5f84\n# spike_train_dataset = WheatDataset(spike_df_train, skpike_train_images, get_train_transform())\n# spike_valid_dataset = WheatDataset(spike_df_valid, skpike_valid_images, get_valid_transform())\n\n# # split the dataset in train and test set\n# indices = torch.randperm(len(train_dataset)).tolist()\n\n# train_data_loader = DataLoader(\n#     train_dataset,\n#     batch_size=8,\n#     shuffle=False,\n#     num_workers=4,\n#     collate_fn=collate_fn\n# )\n\n# valid_data_loader = DataLoader(\n#     valid_dataset,\n#     batch_size=8,\n#     shuffle=False,\n#     num_workers=4,\n#     collate_fn=collate_fn\n# )\n\n# spike_train_data_loader = DataLoader(\n#     spike_train_dataset,\n#     batch_size=8,\n#     shuffle=False,\n#     num_workers=4,\n#     collate_fn=collate_fn\n# )\n\n# spike_valid_data_loader = DataLoader(\n#     spike_valid_dataset,\n#     batch_size=8,\n#     shuffle=False,\n#     num_workers=4,\n#     collate_fn=collate_fn\n# )","ff019305":"device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')","e0f763e4":"# [i for i in model.state_dict()]\n# param_list = [(name,param.requires_grad) for name, param in model.named_parameters()]\n# param_list","fd87ce37":"# i = 0\n# for name, param in model.named_parameters():\n# #     23\u6700\u597d\uff0c69\u6700\u5dee\n#     if i>=23:\n#         param.requires_grad = True\n#     else:\n#         param.requires_grad = False\n#     i+=1","495213b3":"model.to(device)\nparams = [p for p in model.parameters() if p.requires_grad]\noptimizer = torch.optim.SGD(params, lr=0.005, momentum=0.9, weight_decay=0.0005)\n# lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=3, gamma=0.1)\nlr_scheduler = None\n\nnum_epochs = 4","2e4f7faa":"# loss_hist = Averager()\n# itr = 1\n# best_loss = 100000\n\n# for epoch in range(num_epochs):\n#     loss_hist.reset()\n    \n#     for images, targets, image_ids in train_data_loader:\n        \n#         images = list(image.to(device) for image in images)\n#         targets = [{k: v.to(device) for k, v in t.items()} for t in targets]\n\n#         loss_dict = model(images, targets)\n\n#         losses = sum(loss for loss in loss_dict.values())\n#         loss_value = losses.item()\n\n#         loss_hist.send(loss_value)\n\n#         optimizer.zero_grad()\n#         losses.backward()\n#         optimizer.step()\n\n    \n#         if itr % 50 == 0:\n#             print(f\"Iteration #{itr} loss: {loss_value}\")\n\n#         itr += 1\n        \n#     for images, targets, image_ids in spike_train_data_loader:\n        \n#         images = list(image.to(device) for image in images)\n#         targets = [{k: v.to(device) for k, v in t.items()} for t in targets]\n\n#         loss_dict = model(images, targets)\n\n#         losses = sum(loss for loss in loss_dict.values())\n#         loss_value = losses.item()\n\n#         loss_hist.send(loss_value)\n\n#         optimizer.zero_grad()\n#         losses.backward()\n#         optimizer.step()\n\n    \n#         if itr % 50 == 0:\n#             print(f\"spike Iteration #{itr} loss: {loss_value}\")\n\n#         itr += 1\n        \n#     if best_loss > loss_hist.value:\n#         best_loss = loss_hist.value\n#         torch.save(model.state_dict(), 'fasterrcnn_V4_epoch4.pth')    \n# #     torch.save(model.state_dict(), 'fasterrcnn_resnet50_fpn.pth')\n    \n#     # update the learning rate\n#     if lr_scheduler is not None:\n#         lr_scheduler.step()\n\n#     print(f\"Epoch #{epoch} loss: {loss_hist.value}\")   ","78af3236":"def collate_fn(batch):\n    return tuple(zip(*batch))\n\n\nclass WheatTestDataset(Dataset):\n\n    def __init__(self, dataframe, image_dir, transforms=None):\n        super().__init__()\n\n        self.image_ids = dataframe['image_id'].unique()\n        self.df = dataframe\n        self.image_dir = image_dir\n        self.transforms = transforms\n\n    def __getitem__(self, index: int):\n\n        image_id = self.image_ids[index]\n        records = self.df[self.df['image_id'] == image_id]\n\n        image = cv2.imread(f'{self.image_dir}\/{image_id}.jpg', cv2.IMREAD_COLOR)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        image \/= 255.0\n\n        if self.transforms:\n            sample = {\n                'image': image,\n            }\n            sample = self.transforms(**sample)\n            image = sample['image']\n\n        return image, image_id\n\n    def __len__(self) -> int:\n        return self.image_ids.shape[0]\nDIR_INPUT = '\/kaggle\/input\/global-wheat-detection'\nDIR_TEST = f'{DIR_INPUT}\/test'\n# DIR_WEIGHTS = '\/kaggle\/input\/global-wheat-detection-public'\n# WEIGHTS_FILE = f'{DIR_WEIGHTS}\/fasterrcnn_resnet50_fpn.pth'\n# WEIGHTS_FILE = '..\/input\/weithght-v1-ep4\/fasterrcnn_resnet50_fpn_epoch30.pth'\nWEIGHTS_FILE = '..\/input\/weithght-v1-ep4\/fasterrcnn_V4_epoch4.pth'\ntest_df = pd.read_csv(f'{DIR_INPUT}\/sample_submission.csv')\n\n# model\u52a0\u8f7d\u6700\u597d\u7684\u53c2\u6570\nmodel.load_state_dict(torch.load(WEIGHTS_FILE,map_location=torch.device(device)))\nmodel.eval()\n\n# Albumentations\ndef get_test_transform():\n    return A.Compose([\n        # A.Resize(512, 512),\n        ToTensorV2(p=1.0)\n    ])\n\ntest_dataset = WheatTestDataset(test_df, DIR_TEST, get_test_transform())\n\ntest_data_loader = DataLoader(\n    test_dataset,\n    batch_size=4,\n    shuffle=False,\n    num_workers=4,\n    drop_last=False,\n    collate_fn=collate_fn\n)\n\ndef format_prediction_string(boxes, scores):\n    pred_strings = []\n    for j in zip(scores, boxes):\n        pred_strings.append(\"{0:.4f} {1} {2} {3} {4}\".format(j[0], j[1][0], j[1][1], j[1][2], j[1][3]))\n\n    return \" \".join(pred_strings)\n\ndetection_threshold = 0.5\nresults = []\n\nfor images, image_ids in test_data_loader:\n\n    images = list(image.to(device) for image in images)\n    outputs = model(images)\n\n    for i, image in enumerate(images):\n\n        boxes = outputs[i]['boxes'].data.cpu().numpy()\n        scores = outputs[i]['scores'].data.cpu().numpy()\n        \n        boxes = boxes[scores >= detection_threshold].astype(np.int32)\n        scores = scores[scores >= detection_threshold]\n        image_id = image_ids[i]\n        \n        boxes[:, 2] = boxes[:, 2] - boxes[:, 0]\n        boxes[:, 3] = boxes[:, 3] - boxes[:, 1]\n        \n        result = {\n            'image_id': image_id,\n            'PredictionString': format_prediction_string(boxes, scores)\n        }\n\n        \n        results.append(result)\n        \ntest_df = pd.DataFrame(results, columns=['image_id', 'PredictionString'])\ntest_df.head()\ntest_df.to_csv('submission.csv', index=False)","47b31538":"# Inference","9b48ab6a":"# \u5b9a\u4e49device","fc376ead":"# Create the model","ee8d42dd":"# Train","9bb7a7d5":"\n- FasterRCNN from torchvision\n- Use Resnet50 backbone\n- Albumentation enabled (simple flip for now)\n","bcf858e4":"# \u8def\u5f84\u5b9a\u4e49","e1065836":"# \u6570\u636e\u589e\u5f3a","da66fee5":"# \u88c5\u8f7d\u6570\u636e\u96c6","e8d50be0":"# \u6570\u636e\u96c6\u5b9a\u4e49"}}