{"cell_type":{"eb284bc1":"code","6b428240":"code","04813ef5":"code","e77f856b":"code","0fd5a45d":"code","61f8262e":"code","c78a600f":"code","bd3adab4":"code","0becc33d":"code","0e6e8c7f":"code","0856a0e4":"code","7187f326":"code","db489ae6":"code","f2475f68":"code","22027d68":"code","cdc7428c":"code","91af7945":"code","1127da92":"code","3d42d6a9":"code","b7f6df42":"code","b1c847a9":"code","f57c5e2e":"code","adc64a82":"code","d6d2f277":"code","3becf2cb":"code","f2fe435f":"code","73b4a62b":"code","c99a3633":"code","46bde43e":"code","8e5bf07a":"code","6953fb3c":"code","97d94ff1":"code","89fcd4c5":"code","f4717ba3":"code","3f1d8c0e":"code","94865cc0":"code","42754e4d":"code","f7b8f1e6":"code","996826d8":"code","67d470f3":"code","00dd2b5b":"code","81a53ed7":"code","feffa4ef":"code","f3a7d5af":"markdown","c4b4e05b":"markdown","1e37f202":"markdown","17d29cba":"markdown","136b8d6e":"markdown","a8a680b3":"markdown","2c41b686":"markdown","19e3bbda":"markdown","5f0d812c":"markdown","637b892d":"markdown","341e30cf":"markdown","d57ee9c7":"markdown","509d09ad":"markdown","c1d72e90":"markdown","3ec87bed":"markdown","8277224c":"markdown","10721433":"markdown","002d3dd6":"markdown","ee6f0a76":"markdown","ad626450":"markdown","d27ae92f":"markdown","4e640e5b":"markdown","2af5b91d":"markdown","5b825825":"markdown","45b2d410":"markdown","6d0ead8b":"markdown","1b01886c":"markdown","f716f356":"markdown","c0891e91":"markdown","d9a2cd82":"markdown","44d0ba0a":"markdown","6dc7732a":"markdown","19811986":"markdown","6f931d29":"markdown"},"source":{"eb284bc1":"# matplotlib\u3067\u65e5\u672c\u8a9e\u3092\u6271\u3048\u308b\u3088\u3046\u306b\n!pip install japanize_matplotlib -Uq\n\n# RainCloud Plot(\u6563\u5e03\u56f3\uff0bBoxPlot\uff0bViolin\u3092\u4e00\u3064\u3067\u8868\u793a)\n!pip install ptitprince -Uq\n\n# \u30d9\u30f3\u56f3\u3092\u4f5c\u6210\n!pip install matplotlib-venn -Uq","6b428240":"import warnings\nwarnings.simplefilter('ignore')\n\nimport os\nimport gc\ngc.enable()\nimport sys\nimport glob\nimport math\nimport time\nimport random\nimport string\nimport psutil\nimport pathlib\nfrom pathlib import Path\nfrom contextlib import contextmanager\n\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', 200)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport japanize_matplotlib\nfrom ptitprince import RainCloud\nfrom matplotlib_venn import venn2\n\nfrom tqdm.auto import tqdm as tqdmp\nfrom tqdm.autonotebook import tqdm as tqdm\ntqdmp.pandas()\n\nfrom sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.model_selection import KFold, StratifiedKFold, GroupKFold\nimport lightgbm as lgb","04813ef5":"# \u5b9f\u9a13\u3067\u4f7f\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u306fConfig\u3067\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u3002\n# \u3053\u306e\u5b9f\u9a13\u4f55\u3084\u3063\u305f\u304b\u306a\u3068\u5f8c\u3067\u632f\u308a\u8fd4\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u3001\u306a\u308b\u3079\u304fConfig\u3060\u3051\u898b\u308c\u3070\u308f\u304b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\n\nclass CFG:\n    \n    def __init__(self):\n        \n        self.seed=42\n        self.n_fold = 5\n        self.environment='Kaggle'\n        self.project='Shiggle_2nd'\n        self.exp_name = '001_Baseline'\n        self.objective = 'binary'\n        self.metric = 'binary_logloss'\n        self.learning_rate = 0.1\n        self.num_boost_round = 3000\n        self.early_stopping_rounds = 50\n        self.num_leaves = 2^5-1\n        \nCONFIG = CFG()","e77f856b":"## \u518d\u73fe\u6027\u78ba\u4fdd\u306e\u305f\u3081\u306eSeed\u56fa\u5b9a\ndef seed_everything(seed:int==42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything(CONFIG.seed)","0fd5a45d":"## \u51e6\u7406\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3068\u4f7f\u7528\u3057\u305f\u30e1\u30e2\u30ea\u3092\u8a08\u6e2c\n@contextmanager\ndef timer(name:str, slack:bool=False):\n    t0 = time.time()\n    p = psutil.Process(os.getpid())\n    m0 = p.memory_info()[0] \/ 2. ** 30\n    print(f'<< {name} >> Start')\n    yield\n    \n    m1 = p.memory_info()[0] \/ 2. ** 30\n    delta = m1 - m0\n    sign = '+' if delta >= 0 else '-'\n    delta = math.fabs(delta)\n    \n    print(f\"<< {name} >> {m1:.1f}GB({sign}{delta:.1f}GB):{time.time() - t0:.1f}sec\", file=sys.stderr)","61f8262e":"## Directory\u8a2d\u5b9a\nINPUT_DIR = Path('..\/input\/shigglecup-2nd')\nMODEL_DIR = Path('.\/')\nOUTPUT_DIR = Path('.\/')\nprint(f\"INPUT_DIR is {INPUT_DIR}\\nMODEL_DIR is {MODEL_DIR}\\nOUTPUT_DIR is {OUTPUT_DIR}\")","c78a600f":"## Data Check\nfor dirnames, _, filenames in os.walk(INPUT_DIR):\n    for filename in filenames:\n        print(f'{dirnames}\/{filename}')","bd3adab4":"with timer('Data Load'):\n    pokemon_df = pd.read_csv(INPUT_DIR \/ 'pokemon.csv')\n    team_id_df = pd.read_csv(INPUT_DIR \/ 'team_id.csv')\n    type_df = pd.read_csv(INPUT_DIR \/ 'typetable.csv')\n    \n    train_df = pd.read_csv(INPUT_DIR \/ 'train.csv')\n    test_df = pd.read_csv(INPUT_DIR \/ 'test.csv')\n    \n    sub_df = pd.read_csv(INPUT_DIR \/ 'sample_submission.csv')\n    \n    \n    print(f'pokemon_df: {pokemon_df.shape} | team_id_df: {team_id_df.shape} | type_df: {type_df.shape}')\n    print(f'train_df: {train_df.shape} | test_df: {test_df.shape} | sub_df: {sub_df.shape}')","0becc33d":"display(train_df.head().T)\ndisplay(test_df.head().T)","0e6e8c7f":"print(f'train\u306efirst\u30c1\u30fc\u30e0\u306e\u30e6\u30cb\u30fc\u30af\u6570:{train_df[\"first\"].nunique()}')\nprint(f'train\u306esecond\u30c1\u30fc\u30e0\u306e\u30e6\u30cb\u30fc\u30af\u6570:{train_df[\"second\"].nunique()}')\nprint(f'test\u306efirst\u30c1\u30fc\u30e0\u306e\u30e6\u30cb\u30fc\u30af\u6570:{test_df[\"first\"].nunique()}')\nprint(f'test\u306esecond\u30c1\u30fc\u30e0\u306e\u30e6\u30cb\u30fc\u30af\u6570:{test_df[\"second\"].nunique()}')","0856a0e4":"plt.figure(figsize=(25, 5))\n\nplt.subplot(1, 8, 1)\nvenn2(\n    subsets=(\n        set(train_df[\"first\"].unique().tolist() + train_df[\"second\"].unique().tolist()), # train\u306efirst\u3068second\n        set(test_df[\"first\"].unique().tolist() + test_df[\"second\"].unique().tolist())), # test\u306efirst\u3068second\n    set_labels=('train', 'test'), # test\u306b\u3057\u304b\u51fa\u3066\u3053\u306a\u3044\u30c1\u30fc\u30e0\u304c\u3044\u308b\u304b\u3069\u3046\u304b\n)\n\nplt.subplot(1, 8, 2)\nvenn2(\n    subsets=(set(train_df[\"first\"].unique()), set(train_df[\"second\"].unique())),\n    set_labels=('train first ', 'train second'),\n)\n\nplt.subplot(1, 8, 3)\nvenn2(\n    subsets=(set(train_df[\"first\"].unique()), set(test_df[\"first\"].unique())),\n    set_labels=('train first ', 'test first'),\n)\n\nplt.subplot(1, 8, 4)\nvenn2(\n    subsets=(set(train_df[\"first\"].unique()), set(test_df[\"second\"].unique())),\n    set_labels=('train first ', 'test second'),\n)\n\nplt.subplot(1, 8, 5)\nvenn2(\n    subsets=(set(train_df[\"second\"].unique()), set(test_df[\"first\"].unique())),\n    set_labels=('train second ', 'test first'),\n)\n\nplt.subplot(1, 8, 6)\nvenn2(\n    subsets=(set(train_df[\"second\"].unique()), set(test_df[\"second\"].unique())),\n    set_labels=('train second ', 'test second'),\n)\n\nplt.subplot(1, 8, 7)\nvenn2(\n    subsets=(set(test_df[\"first\"].unique()), set(test_df[\"second\"].unique())),\n    set_labels=('test first ', 'test second'),\n)\n\nplt.show()","7187f326":"plt.figure(figsize=(25, 6))\nsns.barplot(\n    x=train_df.groupby('first')['target'].agg(\"mean\").index.tolist(),\n    y=np.abs(1 - train_df.groupby('first')['target'].agg(\"mean\")),\n)\nplt.ylim(0,1)\nplt.yticks([i\/10 for i in range(11)])\nplt.grid()\nplt.title(\"first\u30c1\u30fc\u30e0\u306e\u52dd\u7387\")\nplt.show()","db489ae6":"plt.figure(figsize=(25, 6))\nsns.barplot(\n    x=train_df.groupby('second')['target'].agg(\"mean\").index.tolist(),\n    y=train_df.groupby('second')['target'].agg(\"mean\"),\n)\nplt.ylim(0,1)\nplt.yticks([i\/10 for i in range(11)])\nplt.grid()\nplt.title(\"second\u30c1\u30fc\u30e0\u306e\u52dd\u7387\")\nplt.show()","f2475f68":"display(team_id_df.head().T)","22027d68":"## \u3069\u306e\u30dd\u30b1\u30e2\u30f3\u304c\u591a\u304f\u4f7f\u308f\u308c\u3066\u3044\u308b\u304b\nimport collections\n\npokemon_id_cols = [f\"pokemon_id_{i+1}\" for i in range(6)]\npokemon_list = team_id_df[pokemon_id_cols].values.reshape(1,-1).tolist()[0] # \u5168\u30c1\u30fc\u30e0\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b6\u4f53\u30921\u3064\u306e\u30ea\u30b9\u30c8\u5316\u3057\u307e\u3059\nprint(f\"len(pokemon_list): {len(pokemon_list)}\")\n\nc = collections.Counter(pokemon_list) # \u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059\nmost_poke_values, counts = zip(*c.most_common(5)) # \u6700\u3082\u983b\u5ea6\u304c\u9ad8\u3044\u3082\u306e\u3092\u4e0a\u304b\u30895\u4f53\u3092\u62bd\u51fa\nprint(most_poke_values, counts)","cdc7428c":"display(pokemon_df.head().T)","91af7945":"pokemon_df[pokemon_df[\"pokemon_id\"]==530]","1127da92":"display(type_df.head().T)","3d42d6a9":"type_df = type_df.set_index('atck')\ndisplay(type_df.head())","b7f6df42":"plt.figure(figsize=(20, 15))\nsns.heatmap(type_df, annot=True, fmt='.1f', cmap=\"bwr\", linewidths=.5)\nplt.show()","b1c847a9":"atck_mean = type_df.mean(axis=1)\nplt.figure(figsize=(25, 6))\nsns.barplot(\n    x=type_df.index.tolist(),\n    y=atck_mean,\n)\nplt.grid()\nplt.title(\"\u5404Type\u304c\u4e0e\u3048\u3089\u308c\u308b\u30c0\u30e1\u30fc\u30b8\u306e\u671f\u5f85\u5024\")\nplt.show()","f57c5e2e":"defence_mean = type_df.mean(axis=0)\nplt.figure(figsize=(25, 6))\nsns.barplot(\n    x=type_df.columns.tolist(),\n    y=defence_mean,\n)\nplt.grid()\nplt.title(\"\u5404Type\u304c\u53d7\u3051\u308b\u30c0\u30e1\u30fc\u30b8\u306e\u671f\u5f85\u5024\")\nplt.show()","adc64a82":"# type_df\u304b\u3089\u3001\u5404type\u306e\u653b\u6483\u671f\u5f85\u5024\u3001\u9632\u5fa1\u671f\u5f85\u5024\u3092\u6c42\u3081\u308b\nwith timer(\"\u653b\u6483\u671f\u5f85\u5024&\u9632\u5fa1\u671f\u5f85\u5024\"):\n    atack_mean_df = pd.DataFrame(\n        type_df.mean(axis=1),\n        index=type_df.index,\n        columns=[\"type_atck_expected\"]\n    )\n\n    defence_mean_df = pd.DataFrame(\n        type_df.mean(axis=0),\n        index=type_df.columns,\n        columns=['type_def_expected']\n    )","d6d2f277":"with timer(\"type feature merge\"):\n    pokemon_df = pd.merge(pokemon_df, atack_mean_df,\n                          left_on=\"Type_1\",\n                          right_index=True,\n                          how=\"left\")\n    \n    pokemon_df = pd.merge(pokemon_df, defence_mean_df,\n                          left_on=\"Type_1\",\n                          right_index=True,\n                          how=\"left\")","3becf2cb":"def FE_pokemon_df(df:pd.DataFrame) -> pd.DataFrame:\n    \n    # \u5408\u8a08\u7a2e\u65cf\u5024\n    stats_cols = [\"HP\", \"Attack\", \"Defense\", \"Sp_Atk\", \"Sp_Def\", \"Speed\"]\n    df[\"total_stats\"] = df[stats_cols].sum(axis=1)\n    \n    # \u4f1d\u8aac\u304b\u3069\u3046\u304b\u3092int\u306b\n    df[\"Legendary\"] = df[\"Legendary\"].astype(int)\n    \n    # type_1, type_2\u3092Category_Enconding\n    labels, uniques = pd.concat([df['Type_1'], df['Type_2']], axis=0).factorize()\n    df['Type_1'] = labels[:len(df)]\n    df['Type_2'] = labels[len(df):]\n    \n    return df","f2fe435f":"with timer(\"FE_pokemon_df\"):\n    pokemon_df = FE_pokemon_df(pokemon_df)","73b4a62b":"pokemon_df.head()","c99a3633":"def team_pokemon_merge(team_df:pd.DataFrame, pokemon_df:pd.DataFrame) -> pd.DataFrame:\n    \n    '''\n    team_id_df\u306e\u30dd\u30b1\u30e2\u30f3\u306b\u5404\u30dd\u30b1\u30e2\u30f3\u306e\u60c5\u5831\u3092\u30de\u30fc\u30b8\n    '''\n    \n    team_pokemon_id = [f\"pokemon_id_{i+1}\" for i in range(6)]\n    tq = tqdm(team_pokemon_id, total=len(team_pokemon_id))\n    \n    for i, pokemon_id in enumerate(tq):\n        \n        team_df = pd.merge(\n            left=team_df,\n            right=pokemon_df.drop(\"Name\", axis=1), # Name\u306f\u4f7f\u308f\u306a\u3044\n            left_on=pokemon_id,\n            right_on=\"pokemon_id\",\n            how=\"left\",\n            suffixes=[\"\", f\"_{pokemon_id}\"]\n        )\n        \n    return team_df","46bde43e":"with timer(\"team_pokemon_merge\"):\n    team_df = team_pokemon_merge(team_id_df, pokemon_df)\n    display(team_df.head())","8e5bf07a":"stats_columns = [col for col in team_df.columns.tolist() if \"total_stats\" in col]\nprint(f\"len(stats_columns): {len(stats_columns)}\")\n\ndef calc_max_stats(row):\n    return row[stats_columns].max()\n\ndef calc_min_stats(row):\n    return row[stats_columns].min()\n\ndef calc_mean_stats(row):\n    return row[stats_columns].mean()\n\nwith timer(\"\u30c1\u30fc\u30e0\u5185\u306e\u7a2e\u65cf\u5024\/\u6700\u5927\/\u6700\u5c0f\/\u5e73\u5747\"):  \n    team_df[\"max_stats\"] = team_df.progress_apply(calc_max_stats, axis=1)\n    team_df[\"min_stats\"] = team_df.progress_apply(calc_min_stats, axis=1)\n    team_df[\"mean_stats\"] = team_df.progress_apply(calc_mean_stats, axis=1)","6953fb3c":"plt.figure(figsize=(25, 6))\nsns.barplot(data=team_df, x=\"team_id\", y=\"mean_stats\")\nplt.grid()\nplt.show()","97d94ff1":"## Type\u306e\u30e6\u30cb\u30fc\u30af\u6570\ntype_columns = [col for col in team_df.columns.tolist() if \"Type_\" in col]\nprint(f\"len(type_columns): {len(type_columns)}\")\n\ndef calc_type_unique(row):\n    return row[type_columns].nunique()\n\nwith timer(\"\u5404\u30c1\u30fc\u30e0\u306e\u30bf\u30a4\u30d7\u6570\"):\n    team_df[\"type_unique\"] = team_df.apply(calc_type_unique, axis=1)","89fcd4c5":"plt.figure(figsize=(25, 6))\nsns.barplot(data=team_df, x=\"team_id\", y=\"type_unique\")\nplt.grid()\nplt.show()","f4717ba3":"def combat_team_merge(df:pd.DataFrame, team_df:pd.DataFrame) -> pd.DataFrame:\n    \n    out_df = pd.merge(\n        left=df,\n        right=team_df,\n        left_on=\"first\",\n        right_on=\"team_id\",\n        how=\"left\"\n    )\n    \n    out_df = pd.merge(\n        left=out_df,\n        right=team_df,\n        left_on=\"second\",\n        right_on=\"team_id\",\n        how=\"left\",\n        suffixes=[\"_team_first\", \"_team_second\"]\n    )\n    \n    return out_df","3f1d8c0e":"with timer(\"team_df -> train\/test\u3078\u30de\u30fc\u30b8\"):\n    train_df = combat_team_merge(train_df, team_df)\n    test_df = combat_team_merge(test_df, team_df)","94865cc0":"train_df.head()","42754e4d":"## \u7279\u5fb4\u91cf\u306e\u30ab\u30e9\u30e0\u3068Target\u306e\u30ab\u30e9\u30e0\u3092\u5206\u3051\u308b\ntarget_col = [\"target\"]\nfeature_cols = [col for col in train_df.columns.tolist() if col not in target_col]\n\nprint(f\"\u7279\u5fb4\u91cf: {len(feature_cols)}\")\nprint(f\"\u76ee\u7684\u5909\u6570: {len(target_col)}\")\nprint(f\"train\u306e\u30ab\u30e9\u30e0\u6570: {train_df.shape[1]}\")","f7b8f1e6":"lgb_params = {\n    \"objective\": \"binary\", \n    \"metric\": \"binary_logloss\", \n    \"boosting_type\": \"gbdt\",\n    'learning_rate': 0.1,\n    'verbosity': 0,\n    'random_state': CONFIG.seed,\n    'num_leaves': CONFIG.num_leaves,\n    'force_col_wise':True\n}","996826d8":"oof = np.zeros(len(train_df)) # Train\u5168\u4f53\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\npred = np.zeros(len(test_df)) # Test\u5168\u4f53\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\nCV = GroupKFold(n_splits=CONFIG.n_fold)\nIMP_DF = pd.DataFrame() # Feature Importance\u3092\u78ba\u8a8d\n\nfor fold, (tr, te) in enumerate(CV.split(train_df, train_df[target_col], groups=train_df[\"first\"])):\n    \n    print('#'*20, f\" Fold: {fold+1} \", \"#\"*20)\n    s_t = time.time()\n    X_tr = train_df.loc[tr, feature_cols]\n    y_tr = train_df.loc[tr, target_col]\n    \n    X_te = train_df.loc[te, feature_cols]\n    y_te = train_df.loc[te, target_col]\n    \n    ### Train\u3068Valid\u3067First\u306e\u30c1\u30fc\u30e0\u306b\u88ab\u308a\u304c\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\n    plt.figure(figsize=(12, 4))\n    venn2(subsets=(set(X_tr[\"first\"].unique()), set(X_te[\"first\"].unique())), set_labels=('train first ', 'valid first'))\n    plt.show()\n    \n    lgb_train = lgb.Dataset(X_tr, y_tr)\n    lgb_eval = lgb.Dataset(X_te, y_te)\n    \n    lgb_model = lgb.train(\n        lgb_params,\n        lgb_train,\n        valid_sets=[lgb_train, lgb_eval],\n        valid_names=[\"train\", \"eval\"],\n        verbose_eval=100,\n        num_boost_round=CONFIG.num_boost_round,\n        early_stopping_rounds=CONFIG.early_stopping_rounds,\n    )\n    \n    best_iter = lgb_model.best_iteration\n    lgb_oof = lgb_model.predict(X_te, num_iteration=best_iter)\n    oof[te] += lgb_oof\n    \n    lgb_pred = lgb_model.predict(test_df[feature_cols], num_iteration=best_iter)\n    pred += lgb_pred\/CONFIG.n_fold\n    auc = roc_auc_score(y_te, lgb_oof)\n    \n    importances = pd.DataFrame()\n    importances[\"feature\"] = feature_cols\n    importances[\"lgb_gain\"] = lgb_model.feature_importance()\n    importances[\"fold\"] = fold+1\n    IMP_DF = pd.concat([IMP_DF, importances], axis=0, sort=False)\n    \n    e_t = time.time() - s_t\n    \n    print(f\"Fold {fold+1} | AUC:{auc:.5f} | Elapsed {e_t:.0f}sec.\")\n    \ntotal_auc = roc_auc_score(train_df[target_col], oof)\n\nprint(\"\u2605\"*50)\nprint(f\"total auc: {total_auc:.5f}\")","67d470f3":"## Feature Importance\nmean_importance = IMP_DF.groupby('feature')['lgb_gain'].agg('mean')\nmean_importance = mean_importance.sort_values(ascending=False)\nimportance_list = mean_importance.index.tolist()[:50]\n\nplt.figure(figsize=(25, 10), tight_layout=True)\nsns.boxenplot(data=IMP_DF[IMP_DF['feature'].isin(importance_list)].sort_values('lgb_gain', ascending=False),\n              x='feature', y='lgb_gain', scale=\"area\")\nplt.xticks(rotation=90)\nplt.title(f\"Feature Importance\")\nplt.show()","00dd2b5b":"# OOF\u3067ROC Curve\u3092\u78ba\u8a8d\nfpr, tpr, thres = roc_curve(train_df[target_col], oof)\nplt.figure(figsize = (5, 5)) #\u5358\u4e00\u30b0\u30e9\u30d5\u306e\u5834\u5408\u306e\u30b5\u30a4\u30ba\u6bd4\u306e\u4e0e\u3048\u65b9\nplt.plot(fpr, fpr, linestyle='dashed')\nplt.plot(fpr, tpr, marker='o')\nplt.xlabel('False Positive Rete', fontsize = 13)\nplt.ylabel('True Positive Rete', fontsize = 13)\nplt.grid()\nplt.show()","81a53ed7":"# oof, pred\u306e\u4e88\u6e2c\u5206\u5e03\u306e\u78ba\u8a8d\nplt.figure(figsize=(16, 5))\nsns.distplot(oof, label='oof')\nsns.distplot(pred, label='pred')\nplt.legend()\nplt.grid()\nplt.show()","feffa4ef":"sub_df['target'] = pred\nsub_df.to_csv(f'.\/{CONFIG.exp_name}_CV{total_auc:.6f}_submision.csv', index=False) # submission\u30d5\u30a1\u30a4\u30eb\u540d\u306b\u5b9f\u9a13\u540d\u3084CV\u30b9\u30b3\u30a2\u3092\u5165\u308c\u3066\u304a\u304f\u3068\u3001\u5f8c\u3067Sub\u3092\u9078\u3076\u3068\u304d\u306b\u4fbf\u5229\u3067\u3059","f3a7d5af":"# EDA\n- EDA(Exploratory data analysis: \u63a2\u7d22\u7684\u30c7\u30fc\u30bf\u89e3\u6790)\n- \u5206\u6790\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u304c\u4f55\u3092\u8868\u3057\u3066\u3044\u308b\u304b\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u306f\u91cd\u8981\u3067\u3059\u3002\n- \u53ef\u8996\u5316\u3057\u306a\u304c\u3089\u30c7\u30fc\u30bf\u306b\u89e6\u308c\u307e\u3057\u3087\u3046\n- \u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306f\u3001\u5927\u304d\u304f\u5206\u3051\u30664\u3064\u3042\u308a\u307e\u3059\u3002\n  - train.csv\/test.csv -> first team vs second team\u306e\u7d50\u679c\/\u4e88\u6e2c\n  - team_id.csv -> train, test\u306efirst, second\u306e\u30c1\u30fc\u30e0\u306b\u305d\u308c\u305e\u308c\u3069\u3093\u306a\u30dd\u30b1\u30e2\u30f3\u3067\u30d1\u30fc\u30c6\u30a3\u3092\u7d44\u307e\u308c\u3066\u3044\u308b\u304b\n  - pokemon.csv -> first, second\u306e\u5404\u30c1\u30fc\u30e0\u306e\u30dd\u30b1\u30e2\u30f3\u306e\u60c5\u5831\n  - typetable.csv -> \u30dd\u30b1\u30e2\u30f3\u306e\u30bf\u30a4\u30d7\u76f8\u6027\u8868\n- \u307e\u305a\u306f1\u3064\u305a\u3064\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046","c4b4e05b":"## pokemon_df -> team_df\u3078\u30de\u30fc\u30b8","1e37f202":"- train\u3068test\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u30c1\u30fc\u30e0\u304c\u3069\u308c\u304f\u3089\u3044\u88ab\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059","17d29cba":"<div class = 'alert alert-block alert-info'\n     style = 'background-color:#292952;\n              color:#e64a31;\n              border-width:5px;\n              border-color:#ffd518;\n              font-family:Comic Sans MS'>\n    <p style = 'font-size:24px'>\n    \u4f5c\u6226\n<\/p>\n    <li style = \"color:#e64a31;\n                font-size:14px\">\n    type_df -> pokemon_df -> team_df -> train_df\/test_df\u3078\u30de\u30fc\u30b8\n    <\/li>\n    <li style = \"color:#e64a31;\n                font-size:14px\">\n    train\/test\u306ffirst\u30c1\u30fc\u30e0\u306e\u88ab\u308a\u304c\u306a\u3044\u306e\u3067\u3001Cross Validation\u306ffirst\u306e\u88ab\u308a\u304c\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u65b9\u304c\u826f\u3055\u305d\u3046\n    <\/li>\n    <li style = \"color:#e64a31;\n                font-size:14px\">\n    \u4eca\u56de\u306fpokemon\uff11\u5bfe\u306b\u3064\u3044\u3066\u306e\u7279\u5fb4\u91cf\u3092pokemon_df\u3067\u4f5c\u3063\u3066\u304b\u3089\u30de\u30fc\u30b8\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\n    <\/li>\n<\/div>   ","136b8d6e":"## typetable","a8a680b3":"## pokemon.csv","2c41b686":"- test\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u306e\u65b9\u304c\u82e5\u5e72\u5185\u5074\u306b\u5165\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u50be\u5411\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u304a\u304b\u3057\u306a\u5024\u306f\u6301\u3063\u3066\u3044\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u3053\u306e\u307e\u307eSub\u3057\u307e\u3059","19e3bbda":"## train\/test","5f0d812c":"<img src=\"https:\/\/pbs.twimg.com\/media\/FBleFqjVEAEZa0t?format=jpg&name=large\" width=400%>\n","637b892d":"- \u5404\u30c1\u30fc\u30e0\u5185\u306b\u5c5e\u3057\u3066\u3044\u308b\u30dd\u30b1\u30e2\u30f3\u306e\u7a2e\u65cf\u5024\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u4f5c\u6210\u3057\u305f\u306e\u3067\u3001\u6b21\u306bLightGBM\u306b\u3088\u308b\u5b66\u7fd2\u3092\u884c\u306a\u3063\u3066\u3044\u304d\u307e\u3059\n- \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u3092\u884c\u3046\u4e0a\u3067\u6700\u3082\u91cd\u8981\u306a\u8981\u7d20\u306f\u4ea4\u5dee\u691c\u8a3c(Cross Validation)\u3067\u3059\n- Cross Validation\u306f\u3001\u5b66\u7fd2\u7528\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8907\u6570\u306b\u5206\u5272\u3057\u3066\u3001\u5b66\u7fd2\/\u691c\u8a3c\u7528\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u308a\u3001\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3092\u898b\u7a4d\u3082\u308b\u305f\u3081\u306e\u67a0\u7d44\u307f\u3067\u3059\u3002\n  - Cross Validation\u306f\u3001\u4eca\u306e\u7279\u5fb4\u91cf\u3068\u30e2\u30c7\u30eb\u3092\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306b\u5b9f\u65bd\u3059\u308b\u3082\u306e\u3067\u3001LeaderBoard\u306e\u30b9\u30b3\u30a2\u3068Cross Validation\u306e\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\u3057\u306a\u304c\u3089\u8a55\u4fa1\u3057\u307e\u3059\u3002\n  - CV\u306e\u3053\u3068\u306f\u3088\u304f\u300c\u624b\u5143\u306e\u30b9\u30b3\u30a2\u300d\u3068\u8a00\u3063\u305f\u308a\u3057\u307e\u3059\u304c\u3001Train\u30c7\u30fc\u30bf\u3084Test\u30c7\u30fc\u30bf\u306bOverfit\u3057\u3066\u3044\u306a\u3044\u304b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n  - Cross Validation\u306fKFold\u3084StratifiedKFold\u3084GroupKFold\u3001Time Split\u306a\u3069\u304c\u3042\u308a\u307e\u3059\n    - KFold\u306f\u5358\u7d14\u306bn\u500b\u306b\u5206\u5272\u3059\u308b\u65b9\u6cd5\u3067\u3059\n    - StratifiedKFold\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5206\u5e03\u304c\u540c\u3058\u306b\u306a\u308b\u3088\u3046\u306b\u5206\u5272\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002\n    - GroupKFold\u306f\u5404\u5206\u5272\u3067\u7279\u5b9a\u306e\u30b0\u30eb\u30fc\u30d7\u304c\u91cd\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002\n    - Time Split\u306f\u6642\u7cfb\u5217\u3067\u533a\u5207\u308b\u3088\u3046\u306b\u5206\u3051\u307e\u3059\u3002\n    - \u3069\u308c\u3092\u4f7f\u3048\u3070\u826f\u3044\u304b\u306fTest\u304c\u3069\u306e\u3088\u3046\u306b\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3001\u3064\u307e\u308a\u300c\u3069\u3093\u306a\u672a\u77e5\u306e\u30c7\u30fc\u30bf\u3092\u5f53\u3066\u305f\u3044\u304b\u300d\u306b\u3088\u308b\u306e\u3067\u30c7\u30fc\u30bf\u3092\u898b\u306a\u304c\u3089\u3001\u624b\u5143\u306e\u30b9\u30b3\u30a2\u3068Test\u306e\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\u3057\u306a\u304c\u3089\u6c7a\u3081\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n- \u4eca\u56de\u306fTrain\u3068Test\u3067first\u304c\u88ab\u3063\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u3001GroupKFold\u306egroup\u306bfirst\u3092\u6307\u5b9a\u3057\u3066\u5206\u5272\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002","341e30cf":"- \u52dd\u7387\u304c10%\u672a\u6e80\u306e\u30c1\u30fc\u30e0\u3084\u300120%\u672a\u6e80\u306e\u30c1\u30fc\u30e0\u3082\u3044\u304f\u3064\u304b\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n- \u9006\u306b\u52dd\u7387\u304c90%\u4ee5\u4e0a\u306e\u30c1\u30fc\u30e0\u3082\u3042\u308b\u3088\u3046\u3067\u3059\u3002","d57ee9c7":"- Dusknoir??\u3069\u3046\u3084\u3089\u3053\u306e\u30dd\u30b1\u30e2\u30f3\u306e\u3088\u3046\u3067\u3059\u3002\n\n<img src=\"https:\/\/img.pokemondb.net\/artwork\/dusknoir.jpg\">","509d09ad":"# Settings","c1d72e90":"- 1.0\u3092\u5207\u3063\u3066\u3044\u308b\u30bf\u30a4\u30d7\u306f\u3001\u76f8\u624b\u306e\u653b\u6483\u3092\u7b49\u500d\u4ee5\u4e0b\u3067\u53d7\u3051\u3089\u308c\u308b\u306e\u3067\u3001\u53d7\u3051\u308b\u30c0\u30e1\u30fc\u30b8\u304c\u5c11\u306a\u304f\u306a\u308a\u305d\u3046\u3067\u3059\u3002\n- Steel(\u306f\u304c\u306d)\u30bf\u30a4\u30d7\u306f\u304b\u306a\u308a\u6709\u5229\u306a\u3088\u3046\u306b\u898b\u3048\u307e\u3059","3ec87bed":"## pokemon_df","8277224c":"## type_df","10721433":"- \u5148\u307b\u3069\u306e530\u306e\u30dd\u30b1\u30e2\u30f3\u304b\u3089\u307e\u305a\u306f\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046","002d3dd6":"- \u4e00\u756a\u5de6\u306e\u30b0\u30e9\u30d5\u3067\u306f\u3001train\u306b\u3057\u304b\u5b58\u5728\u3057\u306a\u3044\u30c1\u30fc\u30e0\u304c6\u30c1\u30fc\u30e0\u3001test\u306b\u3057\u304b\u5b58\u5728\u3057\u306a\u3044\u30c1\u30fc\u30e0\u304c2\u30c1\u30fc\u30e0\u3042\u308a\u307e\u3059\u3002\n- \u5de6\u304b\u30893\u756a\u76ee\u306e\u30b0\u30e9\u30d5\u304b\u3089\u3001train\u3068test\u3067first\u306e\u30c1\u30fc\u30e0\u306b\u88ab\u308a\u304c\u306a\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n- \u53f3\u304b\u30892\u756a\u76ee\u306e\u30b0\u30e9\u30d5\u304b\u3089\u306ftrain\u3068test\u3067\u306fsecond\u304c\u5168\u304f\u540c\u3058\u30c1\u30fc\u30e0\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3082\u5206\u304b\u308a\u307e\u3059\u3002","ee6f0a76":"- \u4ed6\u306b\u3082\u30c7\u30fc\u30bf\u3092\u56f3\u793a\u3057\u306a\u304c\u3089\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3067\u793a\u5506\u304c\u5f97\u3089\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u30c7\u30fc\u30bf\u306f\u90fd\u5ea6\u53ef\u8996\u5316\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\n- \u3053\u3053\u304b\u3089\u306f\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\/\u7279\u5fb4\u91cf\u4f5c\u6210\u3068LightGBM\u3092\u4f7f\u3063\u305f\u4e88\u6e2c\u3092\u3057\u3066\u3044\u304d\u307e\u3059","ad626450":"- type\u76f8\u6027\u3092heatmap\u3067\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046","d27ae92f":"<div class = 'alert alert-block alert-info'\n     style = 'background-color:#292952;\n              color:#e64a31;\n              border-width:5px;\n              border-color:#ffd518;\n              font-family:Comic Sans MS'>\n    <p style = 'font-size:24px'>Exp 001<\/p>\n    <a href = \"#Settings\"\n       style = \"color:#e64a31;\n                font-size:14px\">1.Settings<\/a><br>\n    <a href = \"#Data-Load\"\n       style = \"color:#e64a31;\n                font-size:14px\">2.Data Load<\/a><br>\n    <a href = \"#Preprocess\"\n       style = \"color:#e64a31;\n                font-size:14px\">3.EDA<\/a><br>\n    <a href = \"#Preprocess\"\n       style = \"color:#e64a31;\n                font-size:14px\">4.Preprocess<\/a><br>\n    <a href = \"#Training\"\n       style = \"color:#e64a31;\n                font-size:14px\">5.Training<\/a><br>\n<\/div>   \n<p style = 'font-size:24px'>\n    \u7c21\u5358\u306a\u7279\u5fb4\u4f5c\u6210\u3068Submission\u307e\u3067\u3092\u7c21\u5358\u306b\u3054\u7d39\u4ecb\u3057\u307e\u3059\n<\/p>\n    <li style = \"color:#000000;\n                font-size:14px\">\n    kaggle\u3067\u306f\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u5927\u6982\u5165\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u5165\u3063\u3066\u3044\u306a\u3044\u3082\u306e\u306f\u81ea\u5206\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n    <\/li>\n    <li style = \"color:#000000;\n                font-size:14px\">\n    \u4eca\u56de\u306f\u7c21\u5358\u306a\u7279\u5fb4\u4f5c\u6210\u3068LightGBM\u3092\u4f7f\u3063\u305f\u4e88\u6e2c\u3068Submission\u307e\u3067\u3092\u3054\u7d39\u4ecb\u3057\u307e\u3059\u3002\n    <\/li>","4e640e5b":"- id\u756a\u53f7\u304c530\u306e\u30dd\u30b1\u30e2\u30f3\u304c\u6700\u3082\u4f7f\u308f\u308c\u3066\u304a\u308a\u3001\u5168100\u30c1\u30fc\u30e0\u306e\u4e2d\u30675\u56de\u4f7f\u308f\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059","2af5b91d":"- \u4f5c\u3063\u305f\u7279\u5fb4\u91cf\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046","5b825825":"- atck\u5074\u304c\u4e0e\u3048\u308b\u30c0\u30e1\u30fc\u30b8\u306e\u671f\u5f85\u5024\u3082\u51fa\u3057\u3066\u307f\u307e\u3057\u3087\u3046","45b2d410":"# Data Load","6d0ead8b":"# Preprocess","1b01886c":"- 1.0\u3092\u5207\u3063\u3066\u3044\u308b\u30bf\u30a4\u30d7\u306f\u3001\u81ea\u5206\u306e\u653b\u6483\u304c\u7b49\u500d\u4ee5\u4e0a\u306e\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u3089\u308c\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u4e0d\u5229\u304b\u3082\u3057\u308c\u307e\u305b\u3093\n- \u30c9\u30e9\u30b4\u30f3\u30bf\u30a4\u30d7\u306f\u30dd\u30b1\u30e2\u30f3\u306e\u4e2d\u3067\u304b\u306a\u308a\u5f37\u3044\u3068\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u30bf\u30a4\u30d7\u76f8\u6027\u8868\u304b\u3089\u306e\u30c0\u30e1\u30fc\u30b8\u671f\u5f85\u5024\u3060\u30681.0\u3092\u5207\u3063\u3066\u3044\u308b\u306e\u3082\u9762\u767d\u3044\u3067\u3059\u306d\u3002\u3046\u307e\u304f\u8abf\u6574\u3055\u308c\u3066\u3044\u305d\u3046\u3067\u3059\u3002\n- \u653b\u6483\u3092\u53d7\u3051\u308b\u5074\u3082\u898b\u3066\u307f\u307e\u3057\u3087\u3046","f716f356":"# Make Submission\n- submission\u3092\u3059\u308b\u524d\u306b\u3001\u4e88\u6e2c\u3068\u5b9f\u969b\u306e\u5024\u3068\u306e\u78ba\u8a8d\u3084\u3001Train\u3068Test\u306e\u4e88\u6e2c\u5206\u5e03\u306e\u78ba\u8a8d\u3092\u884c\u306a\u3046\u3053\u3068\u3067\u7121\u99c4\u306aSubmission\u3092\u3057\u306a\u3044\u3088\u3046\u6c17\u3092\u3064\u3051\u307e\u3059","c0891e91":"- \u7279\u5fb4\u91cf\u91cd\u8981\u5ea6\u306e\u78ba\u8a8d\n  - GBDT\u7cfb\u306e\u30e2\u30c7\u30eb\u3067\u306f\u3069\u306e\u7279\u5fb4\u91cf\u3067\u5206\u5c90\u3092\u4f5c\u308a\u306a\u304c\u3089\u4e88\u6e2c\u3092\u3057\u3066\u3044\u308b\u304b\u3092\u7279\u5fb4\u91cf\u91cd\u8981\u5ea6\u3067\u51fa\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n  - \u30c9\u30e1\u30a4\u30f3\u77e5\u8b58\u3068\u306e\u4e00\u81f4\u3084\u5b9a\u6027\u7684\u306a\u7406\u89e3\u304b\u3089\u3001\u3055\u3089\u306b\u5225\u306e\u7279\u5fb4\u3092\u8003\u3048\u305f\u308a\u3057\u307e\u3059\u3002","d9a2cd82":"- \u5404\u30c1\u30fc\u30e0\u306e\u4e2d\u3067\u3082\u7279\u5fb4\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\n  - \u4f8b\u3048\u3070\u3001\u5404\u30c1\u30fc\u30e0\u306e\u4e2d\u3067\u6700\u3082\u7a2e\u65cf\u5024\u304c\u9ad8\u3044\u3082\u306e\u3084\u7a2e\u65cf\u5024\u304c\u4f4e\u3044\u3082\u306e\u3001\u307e\u305f\u306f\u305d\u306e\u5e73\u5747\n  - type\u306e\u30e6\u30cb\u30fc\u30af\u6570\u3000\u3092\u3053\u3053\u3067\u306f\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059","44d0ba0a":"### team_df -> train\/test\u3078\u30de\u30fc\u30b8","6dc7732a":"## team_id","19811986":"### \u7279\u5fb4\u91cf\u3068\u306f\n- \u8aac\u660e\u5909\u6570\u306e\u3053\u3068\u3092\u7279\u5fb4\u91cf\u3068\u547c\u3093\u3067\u3044\u307e\u3059\n- \u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u3084\u6df1\u5c64\u5b66\u7fd2\u30e2\u30c7\u30eb\u306b\u5165\u529b\u3059\u308b\u7279\u5fb4\u91cf\u306f\u81ea\u5206\u3067\u7528\u610f\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n- \u305d\u308c\u305e\u308c\u306e\u30e2\u30c7\u30eb\u304c\u7406\u89e3\u3057\u3084\u3059\u3044\u7279\u5fb4\u91cf\u3092\u6e96\u5099\u3059\u308b\u3053\u3068\u304c\u5927\u5207\u3067\u3059\u3002\n  - \u3044\u308f\u3086\u308b\u30e2\u30c7\u30eb\u306e\u6c17\u6301\u3061\u3092\u7406\u89e3\u3059\u308b\u3000\u3068\u3044\u3046\u3053\u3068\u3067\u3059\n  - \u4f8b\u3048\u3070\u3001\n    - LightGBM\u306a\u3069\u306eGBDT\u7cfb\u306e\u30e2\u30c7\u30eb\u3092\u4f7f\u3046\u306e\u3067\u3042\u308c\u3070\u3001\u6b20\u640d\u5024\u306f\u305d\u306e\u307e\u307e\u6271\u3048\u308b\u306e\u3067\u6c17\u306b\u3057\u306a\u304f\u3066\u826f\u3044\u304c\u3001NN\u7cfb\u306e\u30e2\u30c7\u30eb\u3067\u306f\u6b20\u640d\u5024\u57cb\u3081\u304c\u5fc5\u8981\n    - GBDT\u7cfb\u306e\u30e2\u30c7\u30eb\u3067\u306f\u5024\u306e\u5927\u5c0f\u3067\u5224\u65ad\u3059\u308b\u306e\u3067\u3001\u5927\u5c0f\u95a2\u4fc2\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u3059\u308b\u306a\u3069\n- \u7279\u5fb4\u4f5c\u6210\u306f\u57fa\u672c\u7684\u306b\u306f\u3001\u4eba\u9593\u304c\u4e88\u6e2c\u3059\u308b\u3068\u304d\u3068\u540c\u3058\u3088\u3046\u306b\u300c\u3069\u3093\u306a\u7279\u5fb4\u304c\u3042\u308c\u3070\u4e88\u6e2c\u3057\u3084\u3059\u3044\u304b\u300d\u3092\u8a00\u8a9e\u5316\u3057\u306a\u304c\u3089\u9032\u3081\u307e\u3059\n- \u6697\u9ed9\u77e5\u3068\u3057\u3066\u8a8d\u8b58\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3082\u3001\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306f\u77e5\u3089\u306a\u3044\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u6b63\u78ba\u306b\u6559\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n  - \u4f8b\u3048\u3070\u3001\n    - \u25ef\u6708\u306a\u3069\u3092\u8868\u3059\u3088\u3046\u306a\u7279\u5fb4\u91cf\u306f\u3001\u4eba\u306f12\u6708\u306e\u6b21\u304c1\u6708\u3068\u77e5\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306f\u77e5\u308a\u307e\u305b\u3093\u3002\n    - \u30a2\u30ca\u30ed\u30b0\u6642\u8a08\u3092\u601d\u3044\u51fa\u3057\u306a\u304c\u3089\u3001sin\/cos\u306a\u3069\u3067\u6975\u5ea7\u6a19\u306e\u3088\u3046\u306b\u6271\u3046\u3053\u3068\u3067\u300112\u306e\u6b21\u304c1\u3068\u7e4b\u3052\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002","6f931d29":"- \u540c\u3058\u30c1\u30fc\u30e0\u3067\u3042\u3063\u3066\u3082\u3001first\u3068second\u3068\u4f7f\u3046\u30e6\u30fc\u30b6\u30fc\u304c\u9055\u3048\u3070\u52dd\u7387\u304c\u7570\u306a\u308b\u30b1\u30fc\u30b9\u3082\u540c\u3058\u304f\u3089\u3044\u306e\u30b1\u30fc\u30b9\u3082\u3042\u308b\u3088\u3046\u3067\u3059\u3002"}}