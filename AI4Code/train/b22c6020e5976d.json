{"cell_type":{"d99fa186":"code","3bff47c6":"code","d88fed8d":"code","fafd67bb":"code","9299df98":"code","8dfcf790":"code","145ca4d7":"code","adf95081":"code","00c99e65":"code","07fe1008":"code","11830901":"code","f02f66b6":"code","aaa80d5c":"code","1b54a9b7":"code","0fc445d2":"code","7c9819b5":"code","3f46a01c":"code","926009e0":"code","d3a8f407":"code","89c44e9f":"code","4cb36bc8":"code","de38b2f7":"code","bc0d8eb7":"code","61ced04f":"code","e753811e":"code","6c5226d3":"code","51cfde43":"code","96fa86fc":"code","767f9947":"code","4ac1ffb7":"code","47c7dcd7":"code","f1c5ce77":"code","42b312d4":"code","a65a1a9b":"code","65db69e7":"code","bf8110ac":"code","2fce9020":"markdown","0282f7ce":"markdown","7c438757":"markdown"},"source":{"d99fa186":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport os\n%matplotlib inline\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3bff47c6":"train = pd.read_csv('..\/input\/train.csv')","d88fed8d":"train.head()","fafd67bb":"Labels = train['label']\ntrain = train.drop('label', axis=1)","9299df98":"#Converting our Dataframe to a matrix \ntrain_mat = train.as_matrix()","8dfcf790":"Images = []\nfor i in tqdm(range(train_mat.shape[0])):\n    im = train_mat[i]\n    im = im.reshape((28,28))\n    Images.append(im)","145ca4d7":"Images = np.array(Images)","adf95081":"Images.shape","00c99e65":"plt.imshow(Images[3], cmap='gray')\nprint(Labels[3])","07fe1008":"Images = Images\/255.","11830901":"import seaborn as sns\nsns.countplot(Labels)","f02f66b6":"from sklearn.model_selection import train_test_split\n\nxtr, xv, ytr, yv = train_test_split(Images, Labels, random_state = 45, test_size=0.2)","aaa80d5c":"xtr = xtr.reshape(xtr.shape[0],28,28,1)\nxv = xv.reshape(xv.shape[0],28,28,1)","1b54a9b7":"from keras.preprocessing.image import ImageDataGenerator\n\ntrain_gen = ImageDataGenerator(featurewise_center=True,\n    featurewise_std_normalization=True,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2, zoom_range=0.2)\n\ntrain_gen.fit(xtr)","0fc445d2":"from keras.utils import to_categorical\n\nytr1 = to_categorical(ytr)\nyv1 = to_categorical(yv)\n\nyv1[:5]","7c9819b5":"from keras.layers import Conv2D, MaxPooling2D, Dropout, BatchNormalization, Flatten, Dense, Activation\nfrom keras import optimizers\nfrom keras.models import Sequential","3f46a01c":"model = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(28,28,1)))\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, kernel_size=(3,3), activation='relu'))\nmodel.add(Conv2D(64, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten()) # Flattening the 2D arrays for fully connected layers\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10,activation='softmax'))","926009e0":"model.summary()","d3a8f407":"model.compile(optimizer=optimizers.Adam(lr=0.0001),\n              loss='categorical_crossentropy', \n              metrics=['accuracy'])","89c44e9f":"from keras.callbacks import EarlyStopping, ModelCheckpoint\n\nes = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5)\nmc = ModelCheckpoint('best_model.h5', monitor='val_loss', mode='min', verbose=1, save_best_only=True)","4cb36bc8":"history = model.fit(xtr, ytr1, validation_data=(xv, yv1)\n                              , epochs=20\n                              , batch_size=32\n                             , callbacks=[es, mc])","de38b2f7":"from keras.models import load_model\n\nfinal_model = load_model('best_model.h5')","bc0d8eb7":"test = pd.read_csv('..\/input\/test.csv')","61ced04f":"test_mat = test.as_matrix()","e753811e":"Images_test = []\nfor i in tqdm(range(test_mat.shape[0])):\n    im = test_mat[i]\n    im = im.reshape((28,28))\n    Images_test.append(im)","6c5226d3":"Images_test = np.array(Images_test)","51cfde43":"Images_test = Images_test.reshape(Images_test.shape[0],28,28,1)","96fa86fc":"predictions = final_model.predict(Images_test)","767f9947":"predictions","4ac1ffb7":"pred_labels = []\n\nfor i in predictions:\n    l = np.argmax(i)\n    pred_labels.append(l)","47c7dcd7":"#plot of the predicted labels \nsns.countplot(pred_labels)","f1c5ce77":"submission = pd.read_csv('..\/input\/sample_submission.csv')","42b312d4":"imageid = submission['ImageId']","a65a1a9b":"data_final = {'ImageId': imageid, 'Label': pred_labels }","65db69e7":"final_sub = pd.DataFrame(data=data_final)\nfinal_sub.head()","bf8110ac":"#Exporting to CSV for submission\nfinal_sub.to_csv('final_submission.csv', sep=',', index=False)","2fce9020":"Now Let's make predictions on the test set","0282f7ce":"If you find this kernel helpful , please upvote !!\ncomments appreciated !!","7c438757":"let's convert this encoded predictions back to the digits"}}