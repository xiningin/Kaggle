{"cell_type":{"b3c463be":"code","dc174180":"code","2343a4b3":"code","e553c1ea":"code","49f1d336":"code","91e7b904":"code","34dfea41":"code","a4b8350a":"code","0ff4e579":"code","091d14a5":"markdown","5389fc18":"markdown","89ec2e95":"markdown","55958731":"markdown"},"source":{"b3c463be":"import numpy as np \nimport pandas as pd \nimport json\nimport glob\nfrom cytoolz.curried import *\nfrom collections import Counter\nimport itertools\nimport colorful\nimport seaborn as sns\nimport matplotlib.pyplot as plt","dc174180":"colorful.use_true_colors()","2343a4b3":"replays={}\nepisodes=[]\nfor filename in glob.glob(\"\/kaggle\/input\/rps-episode\/episode\/episode\/*.json\"):\n    with open(filename) as f:\n        replay0=json.load(f)\n    epi_id=replay0[\"info\"][\"EpisodeId\"]\n    episodes.append({\"epi_id\": epi_id, \"team1\": replay0[\"info\"][\"TeamNames\"][0], \"team2\": replay0[\"info\"][\"TeamNames\"][1], \"reward1\": replay0[\"rewards\"][0]})\n     \n    replay=pd.DataFrame([{\"a1\":agent1_step[\"action\"], \"a2\":agent2_step[\"action\"]} for agent1_step, agent2_step in replay0[\"steps\"]])\n    replay[\"outcome\"]=replay[\"a1\"].sub(replay[\"a2\"]).mod(3)\n    replays[epi_id]=replay\n    \nepisodes=pd.DataFrame(episodes).set_index(\"epi_id\")\nepisodes.head()","e553c1ea":"# Let's not count easy wins, where someone wins 90% of all last 100 steps\neasy_wins=set()\nfor epi_id, r in replays.items():\n    if r[\"outcome\"].iloc[-100:].value_counts(normalize=True).iloc[0]>0.9:\n        easy_wins.add(epi_id)\nprint(f\"{len(easy_wins)\/len(replays):.0%} easy wins\/draws\")","49f1d336":"cnts=Counter()\nfor epi_id, r in replays.items():\n    if epi_id in easy_wins:\n        continue\n    cnts.update(sliding_window(4, r[\"a1\"]))\n    cnts.update(sliding_window(4, r[\"a2\"]))\ncnts.most_common()","91e7b904":"def frac_format(x):\n    text = f\"{100*x:.0f}\"\n    if abs(x-0.33) > 0.02:\n        text = colorful.tomato(text)\n    return str(text)\n\nprint(\"Start-> 0  1  2\")\nfor start in itertools.product(range(3), repeat=3):\n    seq_cnt = [cnts[start+(end,)] for end in range(3)]\n    seq_frac = [x\/sum(seq_cnt) for x in seq_cnt]\n    print(''.join(map(str,start)), \"->\", ' '.join(frac_format(x) for x in seq_frac))","34dfea41":"def calc_repeat_prob(seq, *, n):\n    seq=list(seq)\n    repeat_count=0\n    for i in range(len(seq)-2*n+1):\n        if seq[i:i+n]==seq[i+n:i+2*n]:\n            repeat_count+=1\n    return repeat_count \/ (len(seq)-2*n+1)\n\nrepeat_probs=[]\nfor epi_id, r in replays.items():\n    if epi_id in easy_wins:\n        continue\n        \n    if len(r)<10:\n        continue\n    repeat_probs.append((epi_id, calc_repeat_prob(r[\"a1\"], n=3)))\n    repeat_probs.append((epi_id, calc_repeat_prob(r[\"a2\"], n=3)))\nrepeat_probs=pd.DataFrame(repeat_probs, columns=[\"epi_id\", \"prob\"])","a4b8350a":"repeat_probs[\"prob\"].hist(bins=\"doane\", log=True)\nplt.title(\"Distribution of n-gram repeat probability\");","0ff4e579":"repeat_reward=[]\n\nfor epi_id, r in replays.items():\n    if epi_id in easy_wins:\n        continue\n        \n    repeat=r[\"a1\"].diff().diff().dropna().mod(3).value_counts(normalize=True).to_dict().get(0,0)\n    repeat_reward.append((repeat, episodes.loc[epi_id][\"reward1\"]))\n    \n    repeat=r[\"a2\"].diff().diff().dropna().mod(3).value_counts(normalize=True).to_dict().get(0,0)\n    repeat_reward.append((repeat, -episodes.loc[epi_id][\"reward1\"]))\nrepeat_reward=pd.DataFrame(repeat_reward, columns=[\"repeat_prob\", \"reward\"])\n    \nrepeat_reward.plot.scatter(\"repeat_prob\", \"reward\", alpha=0.2);","091d14a5":"# Action after each possible 3-gram (excluding easy wins)","5389fc18":"# Do repeaters have less reward?","89ec2e95":"Conclusions:\n* after a constant prediction, you often have the same again (e.g. 000->0); and from the other two options the -1 option is a bit more likely (000->2)\n* after a rising or falling cycle, the cycle tends to continue (e.g. 012->0)\n* this effect is much stronger the more easy wins you include into the analysis","55958731":"# Probability that a pattern of certain lengths repeats right after"}}