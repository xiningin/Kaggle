{"cell_type":{"a2a06cad":"code","e3980780":"code","009e7458":"code","efbfe9eb":"code","a0832cbb":"code","6cd2c682":"code","70ccf8a5":"code","dda2e8d3":"code","7ca28fae":"code","0986a0ea":"code","37a2ca20":"code","8d8ac7f1":"code","8cab6899":"code","520ec58d":"code","6a09b253":"code","0fcfc6e5":"code","e13f8e2c":"code","7de2ccdd":"code","a995fce2":"code","4f92dde3":"code","cc0092c6":"code","f0614d79":"code","6f78a62c":"code","0683e978":"markdown"},"source":{"a2a06cad":"import numpy as np\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\ndf= pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\n","e3980780":"df","009e7458":"# BMI Group\ndf['bmi_group']=np.nan\nfor x in range(len(df['bmi'])):\n    if df['bmi'][x] < 18.5:\n        df['bmi_group'][x]='underweight'\n    if df['bmi'][x] >= 18.5 and df['bmi'][x]<25:\n        df['bmi_group'][x]='health'\n    if df['bmi'][x]>=25 and df['bmi'][x]<30:\n        df['bmi_group'][x]='overweight'\n    if df['bmi'][x]> 30:\n        df['bmi_group'][x]='obese'","efbfe9eb":"# Age Group\ndf['age_group']=np.nan\nfor x in range(len(df['age'])):\n    if df['age'][x] <= 3:\n        df['age_group'][x]='baby'\n    if df['age'][x]>3 and df['age'][x]<=12:\n        df['age_group'][x]='children'\n    if df['age'][x]>12 and df['age'][x]<=20:\n        df['age_group'][x]='adolescence'\n    if df['age'][x]>20 and df['age'][x]<=40:\n        df['age_group'][x]='young adult'\n    if df['age'][x]>40 and df['age'][x]<=60:\n        df['age_group'][x]='adult'\n    if df['age'][x]>60 and df['age'][x]<=70:\n        df['age_group'][x]='middle age'\n    if df['age'][x]>70:\n        df['age_group'][x]='senior'","a0832cbb":"# Glucose Level Group\ndf['glucose_level_group']=np.nan\nfor x in range(len(df['avg_glucose_level'])):\n    if df['avg_glucose_level'][x]<=115:\n        df['glucose_level_group'][x]='normal'\n    if df['avg_glucose_level'][x]>115 and df['avg_glucose_level'][x]<=180:\n        df['glucose_level_group'][x]='impaired glucose'\n    if df['avg_glucose_level'][x]>180:\n        df['glucose_level_group'][x]='diabetes'","6cd2c682":"df_cp=df.drop(['id','age','avg_glucose_level','bmi'],axis=1)","70ccf8a5":"y=df_cp['stroke']\nx=df_cp.drop(['stroke'],axis=1)","dda2e8d3":"df_cp","7ca28fae":"import seaborn as sns\nsns.heatmap(df_cp.corr(), annot=True)","0986a0ea":"sns.pairplot(df_cp,hue='stroke')","37a2ca20":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline","8d8ac7f1":"from sklearn.preprocessing import LabelEncoder\nencoder=LabelEncoder()\nx['gender']=encoder.fit_transform(x['gender'])\nx['ever_married']=encoder.fit_transform(x['ever_married'])\nx['work_type']=encoder.fit_transform(x['work_type'])\nx['Residence_type']=encoder.fit_transform(x['Residence_type'])\nx['smoking_status']=encoder.fit_transform(x['smoking_status'])\nx['bmi_group']=encoder.fit_transform(x['bmi_group'].astype(str))\nx['age_group']=encoder.fit_transform(x['age_group'])\nx['glucose_level_group']=encoder.fit_transform(x['glucose_level_group'])","8cab6899":"# Standardizing\nscaler=StandardScaler()\nX=scaler.fit_transform(x)","520ec58d":"# Train Test Split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)","6a09b253":"# Create Model\nmodel=Sequential()\n\n# Input layer Layer\nmodel.add(Dense(32,activation='relu',input_dim=10))\n\n# Hidden Layer\nmodel.add(Dense(16,activation='relu'))\n\n# Outout Layer\nmodel.add(Dense(1,activation='sigmoid'))\n\nmodel.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","0fcfc6e5":"# Fit model\nmodel.fit(X_train,y_train,batch_size=5,epochs=5)","e13f8e2c":"eval_model=model.evaluate(X_train,y_train)","7de2ccdd":"eval_model","a995fce2":"y_pred=model.predict(X_test)\ny_pred =(y_pred>0.5)","4f92dde3":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","cc0092c6":"pip install pycaret","f0614d79":"from pycaret.classification import *\ndf= pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\nclassification = setup(data=df,target='stroke',train_size=0.8)","6f78a62c":"best=compare_models()","0683e978":"**Pycaret**"}}