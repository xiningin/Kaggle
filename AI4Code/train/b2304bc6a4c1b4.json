{"cell_type":{"ba421128":"code","43297944":"code","007bfb13":"code","da5bd4e6":"code","1b14fbbd":"code","38408339":"code","e1f9db19":"code","6a5ee780":"code","8ac04d50":"code","b7654742":"code","ce5c4285":"code","6369e8b1":"code","fae926a1":"code","b7abb6f2":"code","71d1d10d":"code","ac65532b":"code","bdc8c013":"code","9ccd3be5":"code","6ce955d6":"code","430e087f":"code","b6f65384":"code","20c14b26":"code","1e35c485":"code","a367b008":"code","4656f8a7":"code","6e2715e9":"code","c9ff97e4":"code","912d208e":"code","b15e1755":"code","64633bbe":"code","6102708a":"code","bc92997e":"code","451a7021":"code","e507bfc4":"code","1e0fa952":"code","37e7dffc":"code","592c9e59":"code","92785de5":"code","6bd8edd8":"code","bf37937a":"code","c3639c8a":"code","635657a3":"code","8b1cb395":"code","2ce89e32":"code","212e5699":"code","6c779790":"code","57044a84":"code","cfc7aad5":"code","dd648cd6":"code","e6816c64":"code","50bde46a":"code","0af3111c":"code","6cdb0bfd":"code","5570da59":"code","147816e6":"code","3b342aab":"code","880647f9":"code","c5fd2c61":"code","14fd7f2e":"code","47d5d553":"code","7aa37dd7":"code","6bedebed":"code","8527e6ca":"code","b29a22b1":"code","7f6b0458":"code","dceaca40":"code","c6525a97":"code","cc3761ee":"code","01eb8aa4":"code","87f94fa4":"code","41da6f65":"code","93abbd2f":"code","cdbb4b7c":"code","d8c97902":"code","02b2f603":"code","8bf791df":"code","aeeff197":"code","7f5a848f":"code","e60d0a12":"code","1c9bdca2":"code","67fdc420":"code","5515f48f":"code","e9eaccf4":"code","8f9ad0ea":"code","28f7e6ff":"code","d1fef07e":"code","e4815309":"code","1f0fc171":"code","c0f6485a":"code","82263630":"code","f6c6c86b":"code","4df3b0d1":"code","d4dc2215":"code","69cf3cf8":"code","efd5294a":"code","35ecb2db":"code","3494cb1a":"code","96dc757d":"code","739caa51":"markdown","3c652317":"markdown","4058e038":"markdown","27381151":"markdown","1430d641":"markdown","32e82d90":"markdown","171832f4":"markdown","1fba73fe":"markdown","64d95746":"markdown","9336f242":"markdown","045f8d40":"markdown","272bdc02":"markdown","05d24958":"markdown","a9abe18b":"markdown","92e4a372":"markdown","05601e46":"markdown","f77d706a":"markdown","d9b65e4c":"markdown","403e3b58":"markdown","649c6e96":"markdown","22c102e6":"markdown","1458d2b6":"markdown","339a4c8c":"markdown","6c55d84c":"markdown","4c2b6e68":"markdown","c7ad3766":"markdown","3d1a1e10":"markdown","105dd272":"markdown","feb0a71e":"markdown","23758082":"markdown","4cedbc88":"markdown","90b5b428":"markdown","293caf3d":"markdown"},"source":{"ba421128":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a:\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.image as img\nimport matplotlib.pyplot as plt\nimport catboost as catb\nimport xgboost as xgb \nimport lightgbm as lgbm\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline\n%config Inlinebackend.figure_format='svg'#vector setting\n\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV, LinearRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import KFold, StratifiedKFold, GridSearchCV, RandomizedSearchCV, train_test_split, cross_val_score \nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.metrics import mean_squared_error as mse, r2_score as r2\nfrom sklearn.metrics import precision_recall_curve, roc_auc_score, confusion_matrix, accuracy_score, recall_score, precision_score, f1_score,auc, roc_curve, plot_confusion_matrix\n\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 F1:\nfrom sklearn.metrics import classification_report, f1_score, precision_score, recall_score\n\n# \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\nfrom scipy import stats\nfrom scipy.stats import chi2_contingency\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder, RobustScaler\nfrom scipy.stats import shapiro\nfrom scipy.stats import mannwhitneyu\nfrom scipy.stats import probplot\n\nseed = 42","43297944":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","007bfb13":"TRAIN_DATASET_PATH = '..\/input\/tarasova-datascience2\/course_project_train.csv'\n\nTEST_DATASET_PATH = '..\/input\/tarasova-datascience2\/course_project_test.csv'\n\nTARGET = 'Credit Default'","da5bd4e6":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445. \u043f\u0435\u0440\u0432\u044b\u0435 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 5 \u0441\u0442\u0440\u043e\u0447\u0435\u043a\n\ntrain_df = pd.read_csv(\"..\/input\/tarasova-datascience2\/course_project_train.csv\")\n\ntrain_df.head(5).append(train_df.tail(5))","1b14fbbd":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445. \u043f\u0435\u0440\u0432\u044b\u0435 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 5 \u0441\u0442\u0440\u043e\u0447\u0435\u043a\n\ntest_df = pd.read_csv(\"..\/input\/tarasova-datascience2\/course_project_test.csv\")\ntest_df.head(5).append(test_df.tail(5))","38408339":"train_df.shape[1]-1 == test_df.shape[1]","e1f9db19":"train_df.dtypes","6a5ee780":"for cat_colname in train_df.select_dtypes(include='object').columns:\n    print(str(cat_colname) + '\\n\\n' + str(train_df[cat_colname].value_counts()) + '\\n' + '*' * 100 + '\\n')","8ac04d50":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f: 0 - \u043f\u043e\u0433\u0430\u0448\u0435\u043d \u0432\u043e\u0432\u0440\u0435\u043c\u044f, 1 - \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0430\ntrain_df['Credit Default'].value_counts()","b7654742":"plt.figure(figsize=(8,8))\nsns.heatmap(train_df.isnull(),cbar=False,yticklabels=False,cmap = 'viridis')","ce5c4285":"# train \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043e\u0434\u043d\u0438\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c\ntrain_df.isna().sum()","6369e8b1":"# test \u0434\u0440\u0443\u0433\u0438\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c\nlen(test_df) - test_df.count()","fae926a1":"for col in train_df.columns:\n    pct_missing = np.mean(train_df[col].isnull())\n    print('{} - {}%'.format(col, round(pct_missing*100)))","b7abb6f2":"sns.set(font_scale=1)\ncorr_with_TARGET = train_df.corr().iloc[:-1, -1].sort_values(ascending=False)\nplt.figure(figsize=(10, 10))\nsns.barplot(x=corr_with_TARGET.values, y=corr_with_TARGET.index)\nplt.title('Correlation with TARGET variable')","71d1d10d":"pd.set_option('display.max_columns', None)\ntrain_df.head(10)","ac65532b":"plt.figure(figsize = (16, 8))\n\nplt.subplot(121)\ntrain_df['Credit Default'].hist(density=False, bins=32)\nplt.ylabel('Y ?')\nplt.xlabel('X ?')\n\nplt.subplot(122)\nsns.kdeplot(train_df['Credit Default'], shade=True, legend=False)\nplt.xlabel('X ?')\nplt.ylabel('Y ?')\n\nplt.suptitle('Distribution of Credit Default')\nplt.show()","bdc8c013":"train_df[\"Credit Default\"].value_counts()","9ccd3be5":"plt.style.use('fivethirtyeight')\nplt.rcParams[\"figure.figsize\"] = [8,5]\nplt.hist(train_df[\"Credit Default\"])\nplt.show()","6ce955d6":"train_df.describe().round()","430e087f":"train_df.hist(figsize=(15,15), bins=20, grid=False, color='green')\nplt.show()","b6f65384":"train_df['Tax Liens'].value_counts().sort_index()","20c14b26":"train_df[train_df['Tax Liens'] == 5]","1e35c485":"train_df['Number of Open Accounts'].value_counts().sort_index()","a367b008":"train_df[train_df['Number of Open Accounts'] <= 0]","4656f8a7":"mask = train_df['Number of Open Accounts'] < 25\ngrid = sns.jointplot(train_df[mask]['Number of Open Accounts'], train_df[mask]['Maximum Open Credit'], kind='reg')\ngrid.fig.set_figwidth(6)\ngrid.fig.set_figheight(6)\nplt.show()","6e2715e9":"mask = (train_df['Number of Open Accounts'] < 150) & (train_df['Number of Open Accounts'] > 8)\ngrid = sns.jointplot(train_df[mask]['Number of Open Accounts'], train_df[mask]['Annual Income'], kind='reg')\ngrid.fig.set_figwidth(6)\ngrid.fig.set_figheight(6)\nplt.show()","c9ff97e4":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\ndef missing_values_table(df):\n    \n        # \u0412\u0441\u0435\u0433\u043e \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0435\u0442\n        mis_val = df.isnull().sum()\n        \n        # \u041f\u0440\u043e\u0446\u0435\u043d\u0442 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        \n        # \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        \n        # \u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n        mis_val_table_ren_columns = mis_val_table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        \n        # \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0440\u043e \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\u0436\u0443\n        mis_val_table_ren_columns = mis_val_table_ren_columns[\n            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n        \n        # \u0418\u043d\u0444\u043e\n        print (\"\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0435 \" + str(df.shape[1]) + \" \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432.\\n\"      \n            \"\u0412\u0441\u0435\u0433\u043e \" + str(mis_val_table_ren_columns.shape[0]) +\n              \" \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0441 \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438.\")\n        \n        # \u0412\u043e\u0437\u0432\u0440\u0430\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\n        return mis_val_table_ren_columns","912d208e":"def Bankruptcies(df):\n    # \u0437\u0430\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n    median = int(df['Bankruptcies'].median())\n    df[\"Bankruptcies\"].fillna(median,inplace=True)\n    return df","b15e1755":"def Annual_Income_preprocessing(df):\n    # \u0437\u0430\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n    median = int(df['Annual Income'].median())\n    df[\"Annual Income\"].fillna(median,inplace=True)\n    return df","64633bbe":"def Months_since_last_delinquent(df):\n    # \u0437\u0430\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n    median = int(df['Months since last delinquent'].median())\n    df[\"Months since last delinquent\"].fillna(median,inplace=True)\n    return df","6102708a":"def Years_in_current_job(df):\n    # \u0437\u0430\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n    median = int(df['Years in current job'].median())\n    df[\"Years in current job\"].fillna(median,inplace=True)\n    return df","bc92997e":"def Credit_Score(df):\n    # \u0437\u0430\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n    median = int(df['Credit Score'].median())\n    df[\"Credit Score\"].fillna(median,inplace=True)\n    return df","451a7021":"def median_preprocessing(df):\n    \"\"\" \n    \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\n        1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 'Bankruptcies'\n        2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 'Annual_Income_preprocessing'\n        3. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 'Months_since_last_delinquent'\n        4. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 'Years_in_current_job'\n        5. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 'Credit_Score'\n    \"\"\"\n    df = Bankruptcies(df)\n    df = Annual_Income_preprocessing(df)\n    df = Months_since_last_delinquent(df)\n    df = Years_in_current_job(df)\n    df = Credit_Score(df)\n\n    return df ","e507bfc4":"missing_values_table(train_df)","1e0fa952":"missing_values_table(test_df)","37e7dffc":"train_df.boxplot(column=['Credit Score'])","592c9e59":"num_rows = len(train_df.index)\nlow_information_cols = [] #\nfor col in train_df.columns:\n    cnts = train_df[col].value_counts(dropna=False)\n    top_pct = (cnts\/num_rows).iloc[0]\n    \n    if top_pct > 0.95:\n        low_information_cols.append(col)\n        print('{0}: {1:.5f}%'.format(col, top_pct*100))\n        print(cnts)\n        print()","92785de5":"grid=sns.jointplot(train_df['Tax Liens'], train_df['Credit Default'],kind='reg')\nplt.show()","6bd8edd8":"train_df.dtypes.value_counts()","bf37937a":"train_df.select_dtypes(include=[object]).apply(pd.Series.nunique, axis = 0)","c3639c8a":"train_df.select_dtypes(include=['object']).head()","635657a3":"# \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 Term \u0432 Boolian\nstatus_replace = {\n    \"Term\" : {\n        \"Short Term\": 1,\n        \"Long Term\": 0,\n    }\n}\ntrain_df= train_df.replace(status_replace)\ntest_df= test_df.replace(status_replace)","8b1cb395":"train_df.info()","2ce89e32":"object_columns_df = train_df.select_dtypes(include=[\"object\"])\nobject_columns_df.iloc[0]","212e5699":"columns = ['Home Ownership', 'Years in current job', 'Purpose']\nfor col in columns:\n    print(str(col) + '\\n\\n' + str(train_df[col].value_counts()) + '\\n' + '*' * 100 + '\\n')\nprint(train_df[col].value_counts())","6c779790":"#\u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c Years in current job \u0432 int\nYears_replace = {\n    \"Years in current job\" : {\n        \"10+ years\": 10,\n        \"9 years\": 9,\n        \"8 years\": 8,\n        \"7 years\": 7,\n        \"6 years\": 6,\n        \"5 years\": 5,\n        \"4 years\": 4,\n        \"3 years\": 3,\n        \"2 years\": 2,\n        \"1 year\": 1,\n        \"< 1 year\": 0,\n        \"nan\": 0\n    }\n}\ntrain_df= train_df.replace(Years_replace)\ntest_df= test_df.replace(Years_replace)","57044a84":"train_df['Years in current job'].unique()","cfc7aad5":"train_df['Years in current job'].value_counts()","dd648cd6":"train_df.dtypes.value_counts()","e6816c64":"train_df.isnull().sum()","50bde46a":"train_df.isna().sum()","0af3111c":"# \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u041c\u0435\u0434\u0438\u0430\u043d\u043e\u0439. \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e median_preprocessing(train_df)\nmedian_preprocessing(train_df)","6cdb0bfd":"median_preprocessing(test_df)","5570da59":"train_df.head()","147816e6":"plt.style.use('seaborn-talk')\nfig = plt.figure(figsize=(18,6))\nmiss_train = pd.DataFrame((train_df.isnull().sum())*100\/train_df.shape[0]).reset_index()\nmiss_test = pd.DataFrame((test_df.isnull().sum())*100\/test_df.shape[0]).reset_index()\nmiss_train[\"type\"] = \"\u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0430\u044f\"\nmiss_test[\"type\"]  =  \"\u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f\"\nmissing = pd.concat([miss_train,miss_test],axis=0)\nax = sns.pointplot(\"index\",0,data=missing,hue=\"type\")\nplt.xticks(rotation =90)\nplt.title(\"\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043e\u0442\u0441\u0442\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\")\nplt.ylabel(\"\u0414\u043e\u043b\u044f \u0432 %\")\nplt.xlabel(\"\u0421\u0442\u043e\u043b\u0431\u0446\u044b\")","3b342aab":"display(train_df.describe().loc[[\"mean\",\"50%\",\"std\"]].loc[:,['Number of Open Accounts','Tax Liens', 'Annual Income']])","880647f9":"print('\u041f\u0435\u0440\u0435\u0434 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 :\\n')\nprint(train_df['Number of Open Accounts'].describe())\nprint(train_df['Number of Open Accounts'].shape)\n# \u0443\u0434\u0430\u043b\u044f\u044e \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e quantile .99 \n\ntrain_df = train_df[train_df[\"Number of Open Accounts\"] < train_df[\"Number of Open Accounts\"].quantile(0.99)]\n\nprint('\u041f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 :')\nprint(train_df[\"Number of Open Accounts\"].describe())\nprint(train_df['Number of Open Accounts'].shape)\n# \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043b\u0443\u0447\u0448\u0435","c5fd2c61":"train_df['Purpose'].describe()","14fd7f2e":"# Bivariate Analysis - Puprose vs Maximum Open Credit\n# Box Plot\n\nplt.figure(figsize=(12,8),facecolor='b')\nax = sns.boxplot(y='Purpose', x='Maximum Open Credit', data =train_df, palette='rainbow')\nax.set_title('Purpose vs Maximum Open Credit',fontsize=15,color='w')\nax.set_ylabel('Puprose',fontsize=14,color = 'w')\nax.set_xlabel('Maximum Open Credit',fontsize=14, color = 'w')\n\nplt.show()\n\n# Observations:\n# Median,95th percentile,75th percentile of loan amount is highest for loan taken for small business purpose among all purposes.\n# Debt consolidation is second and Credit card comes 3rd.","47d5d553":"train_df['Purpose'].value_counts().to_frame()","7aa37dd7":"purpose_cr_default = train_df[['Purpose','Credit Default']]\npd.crosstab(purpose_cr_default['Purpose'], purpose_cr_default['Credit Default']).plot \\\n(kind='bar', stacked=True, figsize=(10,6), title=\"Purpose \/ Credit Default\", )","6bedebed":"train_df['Purpose'] = train_df['Purpose'].map({\n                                'debt consolidation':'0', \n                                'other':'0',\n                                'home improvements':'0',\n                                'business loan':'1',\n                                'buy a car':'0',\n                                'medical bills':'0',\n                                'major purchase':'0',\n                                'take a trip':'0',\n                                'buy house':'0',\n                                'small business':'2',\n                                'wedding':'0',\n                                'moving':'0',\n                                'educational expenses':'3',\n                                'vacation':'0',\n                                'renewable energy':'0'\n                                }).astype(float)","8527e6ca":"test_df['Purpose'] = test_df['Purpose'].map({\n                                'debt consolidation':'0', \n                                'other':'0',\n                                'home improvements':'0',\n                                'business loan':'1',\n                                'buy a car':'0',\n                                'medical bills':'0',\n                                'major purchase':'0',\n                                'take a trip':'0',\n                                'buy house':'0',\n                                'small business':'2',\n                                'wedding':'0',\n                                'moving':'0',\n                                'educational expenses':'3',\n                                'vacation':'0',\n                                'renewable energy':'0'\n                                }).astype(float)","b29a22b1":"sns.countplot(x=\"Purpose\", hue='Credit Default', data=train_df)\nplt.show()","7f6b0458":"train_df['Current Loan Amount'].value_counts()","dceaca40":"train_df['Current Loan Amount'].describe()","c6525a97":"train_df['Current Loan Amount'].hist()","cc3761ee":"train_df.info()","01eb8aa4":"train_df['Years of Credit History'].value_counts()","87f94fa4":"train_df['Years of Credit History'].hist()","41da6f65":"#  \u0431\u043e\u043b\u0435\u0435 40 \u043b\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 - \u0432\u044b\u0431\u0440\u043e\u0441. \u0432\u0441\u0435, \u0447\u0442\u043e \u0432\u044b\u0448\u0435 40 \u043b\u0435\u0442 - \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 40. \n\ntrain_df.loc[train_df['Years of Credit History'] > 40, ['Years of Credit History']] = 40\n\ntest_df.loc[test_df['Years of Credit History'] > 40, ['Years of Credit History']] = 40","93abbd2f":"train_df['Years of Credit History'].hist()","cdbb4b7c":"train_df['Months since last delinquent'].hist()","d8c97902":"# \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u0443\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u043c\ntrain_df.loc[train_df['Months since last delinquent'] > train_df['Months since last delinquent'].quantile(.95), ['Months since last delinquent']] =\\\n            train_df['Months since last delinquent'].quantile(.95)\n\ntest_df.loc[test_df['Months since last delinquent'] > test_df['Months since last delinquent'].quantile(.95), ['Months since last delinquent']] =\\\n            test_df['Months since last delinquent'].quantile(.95)","02b2f603":"train_df['Months since last delinquent'].hist()","8bf791df":"# \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430\ncorrelations = train_df.corr()['Credit Default'].sort_values()\n\n# \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\nprint('\u041d\u0430\u0438\u0432\u044b\u0441\u0448\u0430\u044f \u043f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f: \\n', correlations.tail(15))\nprint('\\n\u041d\u0430\u0438\u0432\u044b\u0441\u0448\u0430\u044f \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f: \\n', correlations.head(15))","aeeff197":"train_df_correlation = train_df.corr()\nsns.set(font_scale=0.8)\nsns.clustermap(train_df_correlation,annot=True,figsize=(12, 8),cmap=\"GnBu\")\nplt.show()\n","7f5a848f":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 'Credit Score'\n\nFEATURE_NAMES = train_df.columns.drop('Credit Score').tolist()\ncorr_Credit_Score = train_df[FEATURE_NAMES + ['Credit Score']].corr().iloc[:-1, -1]\ncorr_Credit_Score = np.abs(corr_Credit_Score).sort_values(ascending=False)\n\nplt.figure(figsize=(10, 8))\n\nsns.barplot(x=corr_Credit_Score.values, y=corr_Credit_Score.index)\n\nplt.title('Correlation')\nplt.show()","e60d0a12":"# \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c 7 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n# TARGET_FEATURE = list(corr_Credit_Score.index[0:15])\n\nTARGET_FEATURE = [\n#                  'Credit Default',\n                 'Current Loan Amount BIG',\n                 'Current Loan Amount',\n                 'Term',\n                 'Annual Income',\n#                  'ID',\n                 'Home Ownership_Home Mortgage',\n                 'Bankruptcies',\n                 'Home Ownership_Own Home',\n                 'Maximum Open Credit',\n                 'Number of Credit Problems',\n                 'Purpose',\n                 'Home Ownership_Rent',\n                 'Years of Credit History',\n                 'Years in current job'\n                 ]","1c9bdca2":"ext_data = train_df[['Credit Default', 'Annual Income', 'Years in current job', 'Current Loan Amount', 'Months since last delinquent']]\next_data_corrs = ext_data.corr()\next_data_corrs","67fdc420":"sns.heatmap(ext_data_corrs, cmap = plt.cm.RdYlBu_r, vmin = -0.25, annot = True, vmax = 0.6)\nplt.title('Correlation Heatmap');","5515f48f":"# \u0432\u044b\u043d\u043e\u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\n\ntrain_df['Current Loan Amount BIG'] = train_df['Current Loan Amount'] == 99999999\ntest_df['Current Loan Amount BIG'] = test_df['Current Loan Amount'] == 99999999","e9eaccf4":"train_df.loc[train_df['Current Loan Amount'] == 99999999, ['Current Loan Amount']] = None\ntest_df.loc[test_df['Current Loan Amount'] == 99999999, ['Current Loan Amount']] = None","8f9ad0ea":"train_df.loc[train_df['Current Loan Amount'].isnull(), 'Current Loan Amount'] = train_df['Current Loan Amount'].mean() #median()\ntest_df.loc[test_df['Current Loan Amount'].isnull(), 'Current Loan Amount'] = test_df['Current Loan Amount'].mean() #median()","28f7e6ff":"# \u043f\u043e\u0441\u043b\u0435 \u0432\u043d\u0435\u0441\u0435\u043d\u043d\u044b\u0445 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0433\u0438\u0441\u0442\u043e\u0440\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u0435\u0435\ntrain_df['Current Loan Amount'].hist()","d1fef07e":"train_df['No problems'] = (train_df['Tax Liens'] == 0) & (train_df['Bankruptcies'] == 0) & (train_df['Number of Credit Problems'] == 0)\ntest_df['No problems'] = (test_df['Number of Credit Problems'] == 0) \\\n                                & (test_df['Bankruptcies'] == 0) & (test_df['Tax Liens'] == 0)","e4815309":"train_df['No problems'].value_counts()","1f0fc171":"sns.countplot(x=\"No problems\", hue='Credit Default', data=train_df)\nplt.show()","c0f6485a":"# \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\n\nCOL_SELECTED = [\n#     'Home Ownership',\n    'Annual Income',\n    'Years in current job',\n#     'Tax Liens', - \u0432 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n    'Number of Open Accounts',\n#     'Years of Credit History',\n#     'Maximum Open Credit',\n#     'Number of Credit Problems', - \u0432 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n#     'Months since last delinquent',\n#     'Bankruptcies', - \u0432 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n    'Purpose',\n    'Term',\n    'Current Loan Amount',\n    'Current Credit Balance',\n    'Monthly Debt',\n#     'Credit Score',\n#     'Credit Default',\n    'Current Loan Amount BIG',\n    'No problems'\n        ]","82263630":"# \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\n\nCOL_SELECTED_NUM = [\n        'Annual Income',\n        'Years in current job',\n        'Number of Open Accounts',\n        'Years of Credit History',\n        'Maximum Open Credit',\n        'Current Loan Amount',\n        'Current Credit Balance',\n        'Monthly Debt'\n                         ]","f6c6c86b":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u043e\u0445\u043e\u0436\u0435-\u043b\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0430 train \u0438 test\n\nfrom scipy.stats import mannwhitneyu\n\n# p > 5% - \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0445\u043e\u0436\u0438\nfigsize = (6, 3)\nfor col in COL_SELECTED_NUM:\n    plt.figure(figsize=figsize)\n    sns.set(font_scale=0.8)\n    sns.kdeplot(train_df[col], shade=True, label='train', color='r')\n    sns.kdeplot(test_df[col], shade=True, label='test', color='g')\n    print(col)\n    print(mannwhitneyu(train_df[col], test_df[col]))\n    plt.legend()\n    plt.title(col)\n    plt.show()","4df3b0d1":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n\ncorr_with_target = train_df[COL_SELECTED + ['Credit Default']].corr().iloc[:-1, -1].sort_values(ascending=False)\nplt.figure(figsize=(10, 8))\nsns.barplot(x=corr_with_target.values, y=corr_with_target.index)\nplt.title('Correlation with target variable')\nplt.show()","d4dc2215":"# \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438\n\nplt.figure(figsize = (25,20))\n\nsns.set(font_scale=1.4)\n\ncorr_matrix = train_df[COL_SELECTED].corr()\ncorr_matrix = np.round(corr_matrix, 2)\ncorr_matrix[np.abs(corr_matrix) < 0.3] = 0\n\nsns.heatmap(corr_matrix, annot=True, linewidths=.5, cmap='GnBu')\n\nplt.title('Correlation matrix')\nplt.show()","69cf3cf8":"X = train_df[COL_SELECTED]\ny = train_df['Credit Default']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    shuffle=True,\n                                                    test_size=0.30, \n                                                    random_state=21)","efd5294a":"def pred_model(model):\n    model.fit(X_train, y_train)\n    y_test_pred = model.predict(X_test)\n\n    print(model, '  --  ', f1_score(y_test, y_test_pred))","35ecb2db":"for model in [\n#             \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f\n            LogisticRegression(C = 0.1, class_weight = 'balanced', penalty = 'l1', solver = 'liblinear', max_iter = 50),     \n            xgb.XGBClassifier(eval_metric=\"logloss\", max_depth=50, reg_lambda=1, random_state=21),\n            KNeighborsClassifier(), # \u041a-\u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439\n            BaggingClassifier(), # \u0411\u0435\u0433\u0433\u0438\u043d\u0433\n            RandomForestClassifier(), # \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441    \n#             \u0414\u0435\u0440\u0435\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0439\n            DecisionTreeClassifier(random_state=21, class_weight={0:1, 1:3.3}, max_depth=4),\n            lgbm.LGBMClassifier(class_weight={0:1, 1:3.3}, random_state=21),\n            catb.CatBoostClassifier(class_weights=[1, 3.3], silent=True),\n            AdaBoostClassifier(),    \n            SVC(C=0.05, kernel='rbf'), # \u041c\u0435\u0442\u043e\u0434 \u043e\u043f\u043e\u0440\u043d\u044b\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432\n            GaussianNB(),\n            ExtraTreesClassifier(random_state=42, bootstrap=True, min_samples_split=0.3, class_weight='balanced'),\n            GradientBoostingClassifier(learning_rate=7, random_state=42), # \u0411\u0443\u0441\u0442\u0438\u043d\u0433\n            Perceptron(class_weight='balanced')    \n]:\n        pred_model(model)","3494cb1a":"# \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u044c \u043d\u0430 \u043b\u0443\u0447\u0448\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u044f\u0445\n\nmodel_vote = VotingClassifier(\n    estimators=[\n        ('LightGBM', lgbm.LGBMClassifier(class_weight={0:1, 1:3.3}, random_state=21)),\n        ('CatBooster', \n                            catb.CatBoostClassifier(class_weights=[1, 3.3], \n                                    depth=3,\n                                    iterations=400,\n                                    silent=True, \n                                    )),\n        ('Extra Tree', \n                ExtraTreesClassifier(random_state=42, bootstrap=True, min_samples_split=0.3, class_weight='balanced')),\n    ],\n\n    voting='soft', # \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0438 \u0432 \u0438\u0442\u043e\u0433\u0435 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u0447\u0438\u0442\u043e-\u0442\u043e \u0432\u0440\u043e\u0434\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e\n    weights=[1,1.5,1],\n    n_jobs=-1)\n\nmodel_vote.fit(X_train, y_train)\n\ny_train_pred = model_vote.predict(X_train)\ny_test_pred = model_vote.predict(X_test)\n\nprint('VOTE:: ')\nprint(f1_score(y_test, y_test_pred))\n# get_classification_report(y_train, y_train_pred, y_test, y_test_pred)","96dc757d":"# \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043c\u043e\u0434\u0435\u043b\u044c CatBoost\n\nmodel_catb = catb.CatBoostClassifier(class_weights=[1, 3.3],\n                                    depth=3,\n                                    iterations=400, \n                                    silent=True, \n                                    )\n\n\n\nmodel_catb.fit(X_train, y_train)\n# model_catb.fit(X_train, y_train, eval_set=(X_test, y_test))\n\ny_train_pred = model_catb.predict(X_train)\ny_test_pred = model_catb.predict(X_test)\n\nprint('CatBoost:: ')\nprint(f1_score(y_test, y_test_pred))\n# get_classification_report(y_train, y_train_pred, y_test, y_test_pred)","739caa51":"### \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","3c652317":"\u0443 \u043d\u0430\u0441 \u0438\u043c\u0435\u0435\u0442\u0441\u044f 4 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 Object. \u043d\u0430\u0434\u043e \u0432\u043d\u0438\u043c\u0430\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0447\u0442\u043e \u044d\u0442\u043e \u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0445","4058e038":"## \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0432 \u0434\u0430\u043d\u043d\u044b\u0445","27381151":"## \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","1430d641":"## 3. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","32e82d90":"## \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","171832f4":"### Number of Open Accounts - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432","1fba73fe":"## 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","64d95746":"\u044d\u0442\u043e \u043d\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u043d\u043e \u0438\u0445 \u043e\u0447\u0435\u043d\u044c \u043c\u0430\u043b\u043e \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430. \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439","9336f242":"### \u041f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u043c \u0438 \u0444\u0430\u0439\u043b\u0430\u043c","045f8d40":"\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e, \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f.","272bdc02":"\u0441\u0438\u043b\u044c\u043d\u043e\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0433\u043e\u0434\u043e\u0432\u043e\u0433\u043e \u0434\u043e\u0445\u043e\u0434\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0447\u0435\u0442\u043e\u0432 \u043d\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u044e","05d24958":"\u0422\u0430\u043a\u0436\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0443\u0434\u043e\u0431\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 heatmap","a9abe18b":"## \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043d\u0430 train \u0438 valid","92e4a372":"# \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u043e \u043a\u0443\u0440\u0441\u0443 \n# \"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Python \u0434\u043b\u044f Data Science: \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0435\" <a class='anchor' id='begin'>\n\n\u0422\u0435\u043c\u0430: \"\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0433\u043e\u0432\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443\"<br>\n\u0421\u0442\u0443\u0434\u0435\u043d\u0442: \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u0422\u0430\u0440\u0430\u0441\u043e\u0432 ([kaggle](https:\/\/www.kaggle.com\/sashatarassov), [telegram](https:\/\/t.me\/Escander81))<br>\n\u041f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c: \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430 \u041c\u0435\u0434\u0432\u0435\u0434\u0435\u0432\u0430<br>","05601e46":"---\n# \u0417\u0430\u0434\u0430\u043d\u0438\u0435\n\n_\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 \u0431\u0430\u043d\u043a\u0430, \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0433\u043e\u0432\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u043a\u0440\u0435\u0434\u0438\u0442\u0443. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430._\n    \n    \n**\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0443 (\u0444\u0430\u0439\u043b\u044b):** \n* [train.csv](https:\/\/www.kaggle.com\/c\/credit-default\/data?select=train.csv), \n* [test.csv](https:\/\/www.kaggle.com\/c\/credit-default\/data?select=test.csv),\n\n**\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f:**\nCredit Default - \u0444\u0430\u043a\u0442 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\n\n**\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430:**\nF1-score (sklearn.metrics.f1_score)\n\n**\u0426\u0435\u043b\u0435\u0432\u043e\u0439 \u043a\u043b\u0430\u0441\u0441:**\n\u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443\n\n\n**\u0421\u0440\u043e\u043a\u0438 \u0441\u0434\u0430\u0447\u0438:**\n* C\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0443\u0436\u043d\u043e \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 5 \u0434\u043d\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u0435\u0431\u0438\u043d\u0430\u0440\u0430. \u041e\u0446\u0435\u043d\u043a\u0438 \u0440\u0430\u0431\u043e\u0442, \u0441\u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430, \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0432\u0438\u0434\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430, \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430. \u041f\u0440\u043e\u0435\u043a\u0442\u044b, \u0441\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u043b\u0435 \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430 \u0438\u043b\u0438 \u0441\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e, \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u0440\u0435\u0439\u0442\u0438\u043d\u0433, \u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0443\u0437\u043d\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n    \n**\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c:**\n\n* \u0422\u0435\u0442\u0440\u0430\u0434\u043a\u0430 Jupyter Notebook \u0441 \u043a\u043e\u0434\u043e\u043c \u0412\u0430\u0448\u0435\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u043d\u0430\u0437\u0432\u0430\u043d\u043d\u0430\u044f \u043f\u043e \u043e\u0431\u0440\u0430\u0437\u0446\u0443 {\u0424\u0418\u041e}_solution.ipynb, \u043f\u0440\u0438\u043c\u0435\u0440 SShirkin_solution.ipynb\n\u0424\u0430\u0439\u043b CSV \u0441 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430\u043c\u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430, \u043d\u0430\u0437\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u043e \u043e\u0431\u0440\u0430\u0437\u0446\u0443 {\u0424\u0418\u041e}_predictions.csv, \u043f\u0440\u0438\u043c\u0435\u0440 SShirkin_predictions.csv\n\n**\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:**\n\u0412\u0441\u0435 \u0444\u0430\u0439\u043b\u044b csv \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439 (header - \u0442\u043e \u0435\u0441\u0442\u044c \"\u0448\u0430\u043f\u043a\u0443\"), \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c - \u0437\u0430\u043f\u044f\u0442\u0430\u044f. \u0412 \u0444\u0430\u0439\u043b\u0430\u0445 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c\u0441\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0438\u0437 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430.\n    \n**\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430 \u0441 \u043a\u043e\u0434\u043e\u043c (ipynb):**\n1. \u0424\u0430\u0439\u043b \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 (markdown)\n2. \u041f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043b\u0443\u0447\u0448\u0435 \u043e\u0444\u043e\u0440\u043c\u043b\u044f\u0442\u044c \u0432 \u0432\u0438\u0434\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439\n3. \u041d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434 \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0442\u0440\u043e\u043a \u0442\u0430\u0431\u043b\u0438\u0446 (5-10 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e)\n4. \u041f\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0433\u0440\u0430\u0444\u0438\u043a\u0438, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 (\u043e\u043a\u043e\u043b\u043e 3-5)\n5. \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043b\u0443\u0447\u0448\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c, \u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u043a\u043e\u0434 \u0432\u0441\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n6. \u0421\u043a\u0440\u0438\u043f\u0442 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0442\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 (\u043e\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439)\n7. \u0412\u0435\u0441\u044c \u043f\u0440\u043e\u0435\u043a\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432 \u043e\u0434\u043d\u043e\u043c \u0441\u043a\u0440\u0438\u043f\u0442\u0435 (\u0444\u0430\u0439\u043b ipynb).\n8. \u0414\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a Python \u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043a\u0443\u0440\u0441\u0435.\n    \n    \n\n# \u041f\u0440\u0438\u043c\u0435\u0440\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u0442\u0430\u043f\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\n**\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438**\n\n\u041e\u0431\u0437\u043e\u0440 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n\u041f\u043e\u0434\u0431\u043e\u0440 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0439\u0437\u043b\u0430\u043d\u0430\n\u0412\u044b\u0431\u043e\u0440 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430, \u0431\u043e\u0440\u044c\u0431\u0430 \u0441 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\u043c\n\u0418\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0446\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432\n\n**\u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435** \n\n\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0442\u0435 \u0436\u0435 \u044d\u0442\u0430\u043f\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u043d\u0438\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\u0421\u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u043e\u0434\u0435\u043b\u044c, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\n\u041f\u0440\u043e\u0433\u043d\u043e\u0437\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 (\u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u043e\u043a)\n\u0421\u043e\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","f77d706a":"Tax Liens, Maximum Open Credit\n\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u044b\u0431\u0440\u043e\u0441, \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u0441\u0435 \u0442\u0440\u0438 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0438\u043b\u044f \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u043d\u0438\u044f \u043c\u0435\u043d\u044c\u0448\u0435 \u043d\u0443\u043b\u044f. \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 \u043c\u043e\u0434\u0443\n\nNumber of Open Accounts\n\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0446\u0438\u0444\u0440\u0430 43 \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0430 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0438\u043b\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u043b\u0430 14. \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u0431\u0440\u043e\u0441.\n\nYears of Credit History\n\u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438. \u043b\u0438\u0431\u043e \u043a\u0430\u043a-\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432, \u0435\u0441\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043a\u0430\u0436\u0434\u044b\u0439 \u0433\u043e\u0434 \u0441\u0432\u043e\u0435\u0439 \u0436\u0438\u0437\u043d\u0438 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u043b \u043e\u0434\u0438\u043d \u043d\u043e\u0432\u044b\u0439 \u0441\u0447\u0435\u0442. \u043d\u043e \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u044d\u0442\u043e \u0432\u044b\u0431\u0440\u043e\u0441 \u0438 \u043d\u0435 \u043d\u0443\u0436\u0435\u043d \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n\nCurrent Loan Amount\n\u042f\u0432\u043d\u044b\u0439 \u0432\u044b\u0431\u0440\u043e\u0441. \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0441\u0443\u043c\u043c\u0430.","d9b65e4c":"Random Forest (RF)","403e3b58":"## \u0412\u044b\u0431\u0440\u043e\u0441\u044b ","649c6e96":"\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043b\u0430\u0431\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u0441 \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c (\u043a\u0440\u043e\u043c\u0435 \u0441\u0430\u043c\u043e\u0433\u043e \u0442\u0430\u0440\u0433\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439, \u043f\u043e\u043d\u044f\u0442\u043d\u043e, \u0440\u0430\u0432\u0435\u043d \u0441\u0430\u043c \u0441\u0435\u0431\u0435). <br \/>\n\u041e\u0434\u043d\u0430\u043a\u043e \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f Credit Score, Number of open accounts, Current Loan Amount, Annual Income. \u0431\u0443\u0434\u0443 \u043e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043d\u0430 \u043d\u0438\u0445. <br \/>\n\u0434\u043b\u044f \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0432\u0435\u0434\u0443 \u0435\u0449\u0435 \u043f\u0430\u0440\u0443 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e","22c102e6":"### \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u043e\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","1458d2b6":"### \u0424\u0443\u043d\u043a\u0446\u0438\u0438","339a4c8c":"### \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\n* **Home Ownership** - \u0434\u043e\u043c\u043e\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435\n* **Annual Income** - \u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0445\u043e\u0434\n* **Years in current job** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b\n* **Tax Liens** - \u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0435 \u043e\u0431\u0440\u0435\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n* **Number of Open Accounts** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\n* **Years of Credit History** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438\n* **Maximum Open Credit** - \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\n* **Number of Credit Problems** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u043c\n* **Months since last delinquent** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n* **Bankruptcies** - \u0431\u0430\u043d\u043a\u0440\u043e\u0442\u0441\u0442\u0432\u0430\n* **Purpose** - \u0446\u0435\u043b\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* **Term** - \u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* **Current Loan Amount** - \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* **Current Credit Balance** - \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441\n* **Monthly Debt** - \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u0434\u043e\u043b\u0433\n* **Credit Default** - \u0444\u0430\u043a\u0442 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 (0 - \u043f\u043e\u0433\u0430\u0448\u0435\u043d \u0432\u043e\u0432\u0440\u0435\u043c\u044f, 1 - \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0430)","6c55d84c":"### \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f","4c2b6e68":"**\u041f\u043e\u0438\u0441\u043a \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Heatmap**","c7ad3766":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u0435\u0435 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0442\u0430\u0440\u0433\u0435\u0442\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0441 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438.","3d1a1e10":"\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438\u043b\u0438 \u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u043d\u0435\u0442, \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0435","105dd272":"### \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","feb0a71e":"\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043d\u0435\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438","23758082":"### \u0424\u0443\u043d\u043a\u0446\u0438\u0438","4cedbc88":"\u041a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u041f\u0438\u0440\u0441\u043e\u043d\u0430 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 - \u043d\u0435 \u0441\u0430\u043c\u044b\u0439 \u043b\u0443\u0447\u0448\u0438\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043d\u043e \u043e\u043d \u043f\u0440\u043e\u0441\u0442 \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u0434\u0430\u043d\u043d\u044b\u0445. \n\u0418\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043c\u043e\u0436\u043d\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n\n00-.19 \u201c\u043e\u0447\u0435\u043d\u044c \u0441\u043b\u0430\u0431\u0430\u044f\u201d 20-.39 \u201c\u0441\u043b\u0430\u0431\u0430\u044f\u201d 40-.59 \u201c\u0441\u0440\u0435\u0434\u043d\u044f\u044f\u201d 60-.79 \u201c\u0441\u0438\u043b\u044c\u043d\u0430\u044f\u201d 80-1.0 \u201c\u043e\u0447\u0435\u043d\u044c \u0441\u0438\u043b\u044c\u043d\u0430\u044f\u201d","90b5b428":"### Tax Liens - \u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0435 \u043e\u0431\u0440\u0435\u043c\u0435\u043d\u0435\u043d\u0438\u044f","293caf3d":"## Exploratory Data Analysis"}}