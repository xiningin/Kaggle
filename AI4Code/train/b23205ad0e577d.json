{"cell_type":{"7dba2fe8":"code","30887b6a":"code","2aa74469":"code","8038dca5":"markdown","d8decee4":"markdown","5d45b05b":"markdown"},"source":{"7dba2fe8":"from Bio import SeqIO\nrecords = SeqIO.parse('..\/input\/dna2.fasta', 'fasta')\nfor record in records:\n    for strand, seq in (1, record.seq), (-1, record.seq.reverse_complement()):\n        for frame in range(3):\n            length = 3 * ((len(seq)-frame) \/\/ 3)\n            for pro in seq[frame:frame+length].translate(table = 1).split(\"*\")[:-1]:\n                if 'M' in pro:\n                    orf = pro[pro.find('M'):]\n                    pos = seq[frame:frame+length].translate(table=1).find(orf)*3 + frame +1\n                    if len(orf)*3 +3 > 1300:\n                        print(\"{}...{} - length {}, strand {}, frame {}, pos {}, name {}\".format\\\n                               (orf[:3], orf[-3:], len(orf)*3+3, strand, frame, pos, record.id))\n\n","30887b6a":"from Bio import SeqIO\nimport re\nrecords = SeqIO.parse('..\/input\/dna2.fasta', 'fasta')\n\nfor record in records:\n    for strand, seq in (1, record.seq), (-1, record.seq.reverse_complement()):\n        for frame in range(3):\n            index = frame\n            while index < len(record) - 6:\n                match = re.match('(ATG(?:\\S{3})*?T(?:AG|AA|GA))', str(seq[index:]))\n                if match:\n                    orf = match.group()\n                    index += len(orf)\n                    if len(orf) > 1300:\n                        pos = str(record.seq).find(orf) + 1 \n                        print(\"{}...{} - length {}, strand {}, frame {}, pos {}, name {}\".format\\\n                               (orf[:6], orf[-3:], len(orf), strand, frame, pos, record.id))\n                else: index += 3\n                             ","2aa74469":"from Bio import SeqIO\nrecords = list(SeqIO.parse('..\/input\/dna2.fasta', 'fasta'))\nlist_query = list()\nfor r in records:\n    for i in range(len(r)):\n        if len(r.seq[i: i+7]) < 7: continue\n        list_query.append(str(r.seq[i: i+7]))\nquery = set(list_query)\n\ncount = dict()\nfor q in query:\n    num = 0\n    for r in records:\n        num += r.seq.count_overlap(q) \n    count[q] = num\nprint(sorted([(v,k) for k,v in count.items() if v > 30], reverse = True))\n    ","8038dca5":"**Find ORF(open reading frame),  method 1, ORF length limitation set > 1000bp,  position index set = (1-base)**","d8decee4":"**Find ORF(open reading frame),  method 2, ORF length limitation set > 1000bp,  position index set = (1-base)**","5d45b05b":"**Find highest occuring repeat sequences, incidence set > 30**"}}