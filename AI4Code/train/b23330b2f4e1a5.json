{"cell_type":{"dfdaf48a":"code","e353edc4":"code","b850b7b0":"code","12bebafd":"code","58b8a8ac":"code","142f6581":"code","66128477":"code","aec7507b":"code","a4797b62":"code","606caeea":"code","f00dbc65":"code","7f877b3e":"code","35af97fb":"code","61e93299":"code","40d568df":"code","66ea5e13":"code","3f7bad85":"code","8a8f3c76":"code","9c4e8f7d":"code","0dc8a372":"code","c9a0e98a":"markdown","776f3d0a":"markdown"},"source":{"dfdaf48a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e353edc4":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')  #reading the train data\ntrain.head(10)                                        #printing out the first 10 rows","b850b7b0":"features=[\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Embarked\"] # collecting all features \n#separating the features-X from the target variable-y\nX=train[features]\ny=train[\"Survived\"]","12bebafd":"X.isnull().sum()  #figuring out the number of null values in the features","58b8a8ac":"#Cleaning the data by handling missing values from Age and Embarked Columns\nX['Age'] = X['Age'].fillna(X['Age'].median())\nX['Embarked']=X['Embarked'].fillna(X['Embarked'].mode())\nX","142f6581":"X.info()    # Getting the information so as to analyse which columns in the dataset have object type values which have to be fixed by LabelEncoding in the preprocessing step","66128477":"#Label Encoding or Preprocessing step\nfrom sklearn.preprocessing import LabelEncoder\nLe=LabelEncoder()\nX['Sex']=Le.fit_transform(X['Sex'])\nX['Embarked']=Le.fit_transform(X['Embarked'].astype(str))\nX","aec7507b":"#Splitting the train data \nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,random_state=0)\n","a4797b62":"# Fitting a Logistic regression model on the training data\nfrom sklearn.linear_model import LogisticRegression\nlog=LogisticRegression()\nlog.fit(X_train,y_train)","606caeea":"log.score(X_test,y_test)   #The training data model gives an accuracy of 81%","f00dbc65":"test=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')  #reading the test data\ntest.head(10)","7f877b3e":"test_data_x=test[features]    #Repeating the same procedure on test data by making a feature set\ntest_data_x","35af97fb":"# The Cleaning Phase for test data\ntest_data_x['Age'] = test_data_x['Age'].fillna(test_data_x['Age'].median())\ntest_data_x['Embarked']=test_data_x['Embarked'].fillna(test_data_x['Embarked'].mode())\ntest_data_x","61e93299":"#The Preprocessing Phase\ntest_data_x['Sex']=Le.fit_transform(test_data_x['Sex'])\ntest_data_x['Embarked']=Le.fit_transform(test_data_x['Embarked'].astype(str))\ntest_data_x","40d568df":"test_data_x.info()","66ea5e13":"test_data_x.isnull().sum()","3f7bad85":"#Cleaning the Fare column as it has 1 null value\ntest_data_x['Fare']=test_data_x['Fare'].fillna(test_data_x['Fare'].median())\ntest_data_x","8a8f3c76":"#Making Predictions on the test data \npredictions=log.predict(test_data_x)\npredictions","9c4e8f7d":"output=pd.DataFrame({\"PassengerId\":test['PassengerId'],\"Survived\":predictions})\noutput.to_csv(\"submission.csv\",index=False)\n","0dc8a372":"output.head(10)   #Hence the output","c9a0e98a":"### **The Preprocessing Phase**","776f3d0a":"### **The Data Cleaning Phase** (Handling missing values)"}}