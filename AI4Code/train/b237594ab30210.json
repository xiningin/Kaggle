{"cell_type":{"3bd1f6b3":"code","344dc7d2":"code","3a615fbf":"code","fe5e4e53":"code","f4e3f52b":"code","4e1f2b60":"code","a6280195":"code","43b5ebca":"code","13cc120b":"code","a94172eb":"code","cf3ecbc8":"code","a811e49e":"code","3edf54c2":"code","1414d80b":"code","669149a5":"code","3b4e09f3":"code","39adedee":"code","d673182e":"code","e78d23ce":"code","da646d2e":"code","edeefcad":"code","73d22c25":"code","8773e3e9":"code","a161ad7a":"code","05ae0ebd":"code","eca0bf09":"code","c485fa21":"code","55220bd0":"code","d3dbe08d":"code","aec90881":"code","f7b64ba3":"code","3c688e58":"code","24d84f72":"code","be7962cc":"code","c0482691":"code","f12608f0":"code","90d4cd71":"code","76991d85":"code","94c037c0":"code","8b4316f7":"code","15166b1a":"code","2ead2136":"code","6c0bf492":"code","40287d0d":"code","171e5cb3":"code","e6458178":"code","390a6b64":"code","b8eed6fa":"code","76b3ea80":"code","8d438053":"code","6144c1fa":"code","15a3594c":"code","efa55a7a":"code","baf7a981":"code","4d89b985":"code","9fd2283f":"code","0d8eb9d8":"code","9e9d8d5d":"code","867f497d":"code","805ce1d7":"code","366daf3a":"code","fd2e552b":"code","35983ce4":"code","3af94aad":"code","372b8a6a":"code","bac64c93":"code","3c4693e1":"code","b6c8ce51":"code","b7c8d897":"code","bad154ab":"code","20d29b50":"code","cf28fe49":"code","e3321b29":"code","b366772e":"code","476d281a":"code","b7559cb8":"code","9bfb971f":"code","1dd7feee":"code","ec7a213d":"markdown","3baf75d9":"markdown","aed157b3":"markdown","19aa8eeb":"markdown","20de3150":"markdown","caaab6c3":"markdown","ce58692b":"markdown","d28659ca":"markdown","67539c94":"markdown","992f6d6c":"markdown","d032f428":"markdown","3717250b":"markdown","aea2ce8d":"markdown","721e1233":"markdown","abf862fb":"markdown","333ee5db":"markdown","efd48094":"markdown","97cfbe36":"markdown","f04c6e37":"markdown","9fe98c7f":"markdown","e5ec6a8b":"markdown","b0d7e8d9":"markdown","a57531bc":"markdown","3e52317c":"markdown","a177663f":"markdown","f8791bae":"markdown","f1cffef7":"markdown","a72098f3":"markdown","f7b3638b":"markdown","715bd05f":"markdown","1cdd6032":"markdown","cb7debbb":"markdown","fdf6b8ca":"markdown","43547925":"markdown","e7797dd8":"markdown","fc5b2ef2":"markdown","98a53a42":"markdown","e80adca2":"markdown","c103049d":"markdown","7276c803":"markdown","db66fd06":"markdown"},"source":{"3bd1f6b3":"! pip install pymorphy2[fast] rnnmorph pymystem3 nltk razdel","344dc7d2":"text = '\u043a\u0443\u043f\u0438\u043b \u0442\u0430\u0431\u043b\u0435\u0442\u043a\u0438 \u043e\u0442 \u0442\u0443\u043f\u043e\u0441\u0442\u0438,,, \u043d\u043e \u043d\u0435 \u0441\u043c\u043e\u0433 \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0431\u0430\u043d\u043a\u0443,\u0427\u0422\u041e \u0414\u0415\u041b\u0410\u0422\u042c???'","3a615fbf":"text = text.lower()\ntext","fe5e4e53":"import re","f4e3f52b":"regex = re.compile(r'(\\W)\\1+')\nregex.sub(r'\\1', text)","4e1f2b60":"regex = re.compile(r'[^\\w\\s]')\ntext=regex.sub(r' ', text).strip()","a6280195":"text","43b5ebca":"re.sub('\\s+', ' ', text)","13cc120b":"text = '\u041a\u0443\u043f\u0438\u0442\u0435 \u043a\u0440\u0443\u0436\u043a\u0443-\u0442\u0435\u0440\u043c\u043e\u0441 \"Hello Kitty\" \u043d\u0430 0.5\u043b (64\u0441\u043c\u00b3) \u0437\u0430 3 \u0440\u0443\u0431\u043b\u044f. \u0414\u043e 01.01.2050.'","a94172eb":"text.split()","cf3ecbc8":"from pymorphy2.tokenizers import simple_word_tokenize\n\nsimple_word_tokenize(text)","a811e49e":"from nltk import sent_tokenize, word_tokenize, wordpunct_tokenize\n\nsentences=sent_tokenize(text)","3edf54c2":"[word_tokenize(sentence) for sentence in sentences]","1414d80b":"[wordpunct_tokenize(sentence) for sentence in sentences]","669149a5":"import razdel","3b4e09f3":"sents=[]\nfor sentence in razdel.sentenize(text):\n    sents.append(sentence.text)","39adedee":"sents","d673182e":"sentences = [sentence.text for sentence in razdel.sentenize(text)]\n","e78d23ce":"tokens = [ [token.text for token in razdel.tokenize(sentence)] for sentence in sentences ]","da646d2e":"tokens","edeefcad":"razdel.tokenize","73d22c25":"import razdel\n\n\ndef tokenize_with_razdel(text):\n    sentences = [sentence.text for sentence in razdel.sentenize(text)]\n    tokens = [ [token.text for token in razdel.tokenize(sentence)] for sentence in sentences ]\n    \n    return tokens\n\n\ntokenize_with_razdel(text)","8773e3e9":"from nltk.stem.snowball import SnowballStemmer\n\nSnowballStemmer(language='english').stem('running')","a161ad7a":"SnowballStemmer(language='russian').stem('\u0431\u0435\u0436\u0430\u0442\u044c')","05ae0ebd":"from pymorphy2 import MorphAnalyzer\n\npymorphy = MorphAnalyzer()\n\n\ndef lemmatize_with_pymorphy(tokens):\n    lemms = [pymorphy.parse(token)[0].normal_form for token in tokens]\n    return lemms","eca0bf09":"tokens=['\u041a\u0443\u043f\u0438\u0442\u0435',\n  '\u043a\u0440\u0443\u0436\u043a\u0443-\u0442\u0435\u0440\u043c\u043e\u0441',\n  '\"',\n  'Hello',\n  'Kitty',\n  '\"',\n  '\u043d\u0430',\n  '0.5',\n  '\u043b',\n  '(',\n  '64',\n  '\u0441\u043c\u00b3',\n  ')',\n  '\u0437\u0430',\n  '3',\n  '\u0440\u0443\u0431\u043b\u044f',\n  '.']","c485fa21":"pymorphy.parse('\u0431\u0435\u0436\u0430\u043b')","55220bd0":"lemmatize_with_pymorphy(['\u0431\u0435\u0433\u0443\u0442', '\u0431\u0435\u0436\u0430\u043b', '\u0431\u0435\u0436\u0438\u0442\u0435'])","d3dbe08d":"lemmatize_with_pymorphy(['\u043c\u0430\u043c\u0430', '\u043c\u044b\u043b\u0430', '\u0440\u0430\u043c\u0443'])","aec90881":"pymorphy.normal_forms('\u043d\u0430 \u0437\u0430\u0432\u043e\u0434\u0435 \u0441\u0442\u0430\u043b\u0438 \u0443\u0432\u0438\u0434\u0435\u043b \u0432\u0438\u0434\u044b \u0441\u0442\u0430\u043b\u0438')","f7b64ba3":"lemmatize_with_pymorphy(['\u043d\u0430', '\u0437\u0430\u0432\u043e\u0434\u0435', '\u0441\u0442\u0430\u043b\u0438', '\u0443\u0432\u0438\u0434\u0435\u043b', '\u0432\u0438\u0434\u044b', '\u0441\u0442\u0430\u043b\u0438'])","3c688e58":"pymorphy.parse('\u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0430')","24d84f72":"from pymystem3 import Mystem\n\nmystem = Mystem()\n\n\ndef lemmatize_with_mystem(text):\n    lemms=[token for token in mystem.lemmatize(text) if token!=' '][:-1]\n    \n    return  lemms","be7962cc":"lemmatize_with_mystem('\u0431\u0435\u0433\u0430\u043b \u0431\u0435\u0436\u0430\u043b ')","c0482691":"[token for token in mystem.lemmatize('\u0431\u0435\u0436\u0430\u043b \u0431\u0435\u0436\u0430\u043b') if token!=' '][:-1]","f12608f0":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n\nwords = ['NLP', 'is', 'awesome']\n\nlabel_encoder = LabelEncoder()\ncorpus_encoded = label_encoder.fit_transform(words)\ncorpus_encoded","90d4cd71":"onehot_encoder = OneHotEncoder(sparse=False)\nonehot_encoder.fit_transform(corpus_encoded.reshape(-1, 1))","76991d85":"from sklearn.feature_extraction.text import CountVectorizer\n\nvectorizer=CountVectorizer()","94c037c0":"vectorizer.fit(corpus)","8b4316f7":"vectors = vectorizer.transform(corpus)","15166b1a":"corpus = [\n    '\u0414\u0435\u0432\u043e\u0447\u043a\u0430 \u043b\u044e\u0431\u0438\u0442 \u043a\u043e\u0442\u0430 \u0412\u0430\u0441\u044c\u043a\u0443',\n    '\u0422\u043e\u0442 \u043a\u0442\u043e \u043b\u044e\u0431\u0438\u0442, \u043d\u0435 \u0437\u043d\u0430\u0435\u0442 \u043a\u0442\u043e \u043b\u044e\u0431\u0438\u0442 \u0435\u0433\u043e',\n    '\u041a\u0442\u043e \u043a\u043e\u0433\u043e \u043b\u044e\u0431\u0438\u0442?',\n    '\u0412\u0430\u0441\u044c\u043a\u0430 \u043b\u044e\u0431\u0438\u0442 \u0434\u0435\u0432\u043e\u0447\u043a\u0430?',\n]","2ead2136":"vectors.todense()","6c0bf492":"vectorizer.vocabulary_","40287d0d":"from sklearn.feature_extraction.text import TfidfVectorizer\n\nidf_vectorizer=TfidfVectorizer()","171e5cb3":"vectors = idf_vectorizer.fit_transform(corpus)","e6458178":"vectors.todense()","390a6b64":"idf_vectorizer.vocabulary_","b8eed6fa":"import pandas as pd\n\ntrain = pd.read_csv('..\/input\/lecture-5-embeddings\/train.csv')\ntrain.shape","76b3ea80":"train.head()","8d438053":"train.label.value_counts(normalize=True)","6144c1fa":"test = pd.read_csv('..\/input\/lecture-5-embeddings\/test.csv')\ntest.shape","15a3594c":"test.label.value_counts(normalize=True)","efa55a7a":"test.head()","baf7a981":"%matplotlib inline\n\nimport tqdm\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import classification_report\n\n\ndef evaluate_vectorizer(vectorizer):\n    train_vectors = vectorizer.fit_transform(train['text'])\n    test_vectors = vectorizer.transform(test['text'])\n    \n    clf = LinearSVC(random_state=42)\n    \n    clf.fit(train_vectors, train['label'])\n    \n    predictions = clf.predict(test_vectors)\n    \n    print(classification_report(test['label'], predictions))\n    \n    return predictions","4d89b985":"evaluate_vectorizer(CountVectorizer(min_df=2));","9fd2283f":"evaluate_vectorizer(TfidfVectorizer(min_df=2));","0d8eb9d8":"def tokenize_with_razdel(text):\n    tokens = [token.text for token in razdel.tokenize(text)]\n    \n    return tokens","9e9d8d5d":"evaluate_vectorizer(TfidfVectorizer(min_df=2, tokenizer=tokenize_with_razdel));","867f497d":"tfidf_vectorizer = TfidfVectorizer(\n    min_df=2, \n    tokenizer=lambda text: lemmatize_with_pymorphy(tokenize_with_razdel(text)),\n)\n\npredictions=evaluate_vectorizer(tfidf_vectorizer)","805ce1d7":"from nltk.corpus import stopwords","366daf3a":"stopwords = stopwords.words(\"russian\")","fd2e552b":"tfidf_vectorizer = TfidfVectorizer(\n    min_df=2, \n    tokenizer=lambda text: lemmatize_with_pymorphy(tokenize_with_razdel(text)),\n    stop_words=stopwords\n)\n\nevaluate_vectorizer(tfidf_vectorizer)","35983ce4":"tfidf_vectorizer = TfidfVectorizer(\n    min_df=2, \n    tokenizer=lambda text: lemmatize_with_pymorphy(tokenize_with_razdel(text)),\n    stop_words=stopwords,\n    ngram_range=(1, 2)\n)\n\nevaluate_vectorizer(tfidf_vectorizer)","3af94aad":"import seaborn as sns\nfrom sklearn.metrics import confusion_matrix\n\n\ndef plot_confusion_matrix_heatmap(true, predicted):\n    classes = true.unique()\n    matrix = confusion_matrix(true, predicted, labels=classes)\n    sns.heatmap(matrix, xticklabels=classes, yticklabels=classes, annot=True, fmt='g')","372b8a6a":"plot_confusion_matrix_heatmap(test.label, predictions)","bac64c93":"import io\nimport gzip\nimport pathlib\nimport urllib.request\n\nWORD2VEC_PATH = pathlib.Path('word2vec.bin')\n\nif not WORD2VEC_PATH.exists():\n    url = 'https:\/\/rusvectores.org\/static\/models\/rusvectores2\/news_mystem_skipgram_1000_20_2015.bin.gz'\n    with urllib.request.urlopen(url) as connection:\n        compressed = connection.read()\n            \n    decompressed = gzip.GzipFile(fileobj=io.BytesIO(compressed), mode='rb').read()\n    WORD2VEC_PATH.write_bytes(decompressed)","3c4693e1":"import numpy as np\nfrom sklearn.base import TransformerMixin\n\n\nclass Word2VecVectorizer(TransformerMixin):\n    def __init__(self, vectors):\n        self.vectors = vectors\n        self.zeros = np.zeros(self.vectors.vector_size)\n        \n    def _get_text_vector(self, text):\n        token_vectors = []\n        for token in tokenize_with_mystem_pos(text):\n            try:\n                token_vectors.append(self.vectors[token])\n            except KeyError: # \u043d\u0435 \u043d\u0430\u0448\u043b\u0438 \u0442\u0430\u043a\u043e\u0439 \u0442\u043e\u043a\u0435\u043d \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\n                pass\n                \n        if not token_vectors:\n            return self.zeros\n\n        text_vector = np.sum(token_vectors, axis=0)\n        return text_vector \/ np.linalg.norm(text_vector)\n        \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        return np.array([self._get_text_vector(text) for text in X])","b6c8ce51":"from gensim.models import KeyedVectors\n\nword2vec = KeyedVectors.load_word2vec_format(WORD2VEC_PATH, binary=True)","b7c8d897":"word2vec.most_similar(positive=['\u043f\u0443\u0442\u0438\u043d_S', '\u0432\u0430\u0448\u0438\u043d\u0433\u0442\u043e\u043d_S'], negative=['\u043c\u043e\u0441\u043a\u0432\u0430_S'])","bad154ab":"word2vec_mystem = Mystem(entire_input=False)\n\n\ndef tokenize_with_mystem_pos(text):\n    result = []\n    \n    for item in word2vec_mystem.analyze(text):\n        if item['analysis']:\n            lemma = item['analysis'][0]['lex']\n            pos = re.split('[=,]', item['analysis'][0]['gr'])[0]\n            token = f'{lemma}_{pos}'\n        else:\n            token = f'{item[\"text\"]}_UNKN'\n            \n        result.append(token)\n\n    return result","20d29b50":"import numpy as np\nfrom sklearn.base import TransformerMixin\n\n\nclass Word2VecVectorizer(TransformerMixin):\n    def __init__(self, vectors):\n        self.vectors = vectors\n        self.zeros = np.zeros(self.vectors.vector_size)\n        \n    def _get_text_vector(self, text):\n        token_vectors = []\n        for token in tokenize_with_mystem_pos(text):\n            try:\n                token_vectors.append(self.vectors[token])\n            except KeyError: # \u043d\u0435 \u043d\u0430\u0448\u043b\u0438 \u0442\u0430\u043a\u043e\u0439 \u0442\u043e\u043a\u0435\u043d \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\n                pass\n                \n        if not token_vectors:\n            return self.zeros\n\n        text_vector = np.sum(token_vectors, axis=0)\n        return text_vector \/ np.linalg.norm(text_vector)\n        \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        return np.array([self._get_text_vector(text) for text in X])","cf28fe49":"word2vec_vectorizer = Word2VecVectorizer(word2vec)\n\nevaluate_vectorizer(word2vec_vectorizer);","e3321b29":"from sklearn.pipeline import FeatureUnion\n\nevaluate_vectorizer(\n    FeatureUnion(\n        [\n            ('tf-idf', tfidf_vectorizer),\n            ('word2vec', word2vec_vectorizer),\n        ]\n    )\n);","b366772e":"def tokenize_with_razdel(text):\n    return [token.text for token in razdel.tokenize(text)]","476d281a":"import razdel\n\ntrain_texts = train['text'].apply(tokenize_with_razdel)\ntest_texts = test['text'].apply(tokenize_with_razdel)","b7559cb8":"from gensim.models import Word2Vec\n\nmodel = Word2Vec(train_texts, \n                 size=32,     # embedding vector size\n                 min_count=5,  # consider words that occured at least 5 times\n                 window=5).wv  # define context as a 5-word window around the target word","9bfb971f":"class MyWord2Vec(Word2VecVectorizer):\n    def _get_text_vector(self, text):\n        token_vectors = []\n        for token in tokenize_with_razdel(text):\n            try:\n                token_vectors.append(self.vectors[token])\n            except KeyError: # \u043d\u0435 \u043d\u0430\u0448\u043b\u0438 \u0442\u0430\u043a\u043e\u0439 \u0442\u043e\u043a\u0435\u043d \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\n                pass\n                \n        if not token_vectors:\n            return self.zeros\n\n        text_vector = np.sum(token_vectors, axis=0)\n        return text_vector \/ np.linalg.norm(text_vector)","1dd7feee":"word2vec_vectorizer = MyWord2Vec(word2vec)\n\nevaluate_vectorizer(word2vec_vectorizer);","ec7a213d":"\u0427\u0442\u043e\u0431\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430\u043c\u0438 \u0438\u0437 \u044d\u0442\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438, \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u0440\u0430\u0442\u0438\u043c\u0441\u044f \u043a \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 `gensim`.","3baf75d9":"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043e\u0442 \u042f\u043d\u0434\u0435\u043a\u0441\u0430 `mystem3` \u043e\u0431\u0445\u043e\u0434\u0438\u0442 \u044d\u0442\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u0438 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0441\u043b\u043e\u0432\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430.","aed157b3":"Tf-idf \u0438 word2vec \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.","19aa8eeb":"[T.Mikolov et al, 2013](https:\/\/arxiv.org\/abs\/1301.3781)\n<img src=\"https:\/\/miro.medium.com\/max\/804\/0*nTWCeWnK_tkp0H6_\" width=\"400\">","20de3150":"**\u041b\u0435\u043c\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f - \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u043b\u043e\u0432 \u043a \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u043e\u0440\u0444\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0444\u043e\u0440\u043c\u0435 (\u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0438 \u0433\u0440\u0430\u043c\u043c\u0430\u0442\u0438\u043a\u0438 \u044f\u0437\u044b\u043a\u0430).**\n\n\u0414\u043b\u044f \u043b\u0435\u043c\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0443\u0441\u0441\u043a\u0438\u0445 \u0441\u043b\u043e\u0432 \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0432 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u0435:\n- [pymorphy2](https:\/\/pymorphy2.readthedocs.io\/en\/latest\/)\n- [mystem3](https:\/\/tech.yandex.ru\/mystem\/)\n- [rnnmorph](https:\/\/pypi.org\/project\/rnnmorph\/)\n\n\u0421\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043a \u043b\u0435\u043c\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 - \u0441\u043b\u043e\u0432\u0430\u0440\u043d\u044b\u0439. \u0417\u0434\u0435\u0441\u044c \u043d\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0441\u043b\u043e\u0432\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f \u043e\u043c\u043e\u043d\u0438\u043c\u043e\u0432 \u0442\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430. \u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 `pymorphy2`","caaab6c3":"<img src=\"https:\/\/99px.ru\/sstorage\/86\/2016\/06\/image_861406160953297143150.gif\" width=\"400\">\n","ce58692b":"\u0412 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0434\u043b\u044f \u043c\u043e\u0440\u0444\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u043b\u044f \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430 [`pymorphy2`](https:\/\/pymorphy2.readthedocs.io\/en\/latest\/) \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0442\u043e\u043a\u0435\u043d\u0438\u0437\u0430\u0446\u0438\u0438.","d28659ca":"\u0414\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 word2vec \u0443\u0434\u043e\u0431\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 [`gensim`](https:\/\/radimrehurek.com\/gensim\/).","67539c94":"\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043d\u0430\u0448 \u043a\u043b\u0430\u0441\u0441, \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u044f\u0441\u044c \u043e\u0442 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e","992f6d6c":"# 4. Embeddings (word2vec \u0438 \u0434\u0440\u0443\u0437\u044c\u044f)\n\nEmbedding - \u044d\u0442\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043b\u043e\u0432\u0430.\n\n| \u0421\u043b\u043e\u0432\u043e  |\u0412\u0435\u043a\u0442\u043e\u0440          |\n|--------|---------------|\n| \u0429\u0435\u043d\u043e\u043a  |[0.9, 1.0, 0.0]|\n| \u041f\u0451\u0441    |[1.0, 0.2, 0.0]|\n| \u041a\u043e\u0442\u0451\u043d\u043e\u043a |[0.0, 1.0, 0.9]|\n| \u041a\u043e\u0442    |[0.0, 0.2, 1.0]|\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043f\u0435\u0440\u0432\u0430\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u0430 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \"\u0441\u043e\u0431\u0430\u0447\u043d\u043e\u0441\u0442\u044c\" \u0441\u043b\u043e\u0432\u0430, \u0432\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \"\u043c\u043e\u043b\u043e\u0434\u043e\u0441\u0442\u044c\", \u0430 \u0442\u0440\u0435\u0442\u044c\u044f - \u0437\u0430 \"\u043a\u043e\u0448\u0430\u0447\u043d\u043e\u0441\u0442\u044c\".","d032f428":"# 5. \u0418 \u0441\u043d\u043e\u0432\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f\n\n\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0442\u0435\u043f\u0435\u0440\u044c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0432\u0435\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 `word2vec`. \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0435\u043a\u0442\u043e\u0440 \u0442\u0435\u043a\u0441\u0442\u0430, \u0431\u0443\u0434\u0435\u043c \u0431\u0440\u0430\u0442\u044c word2vec-\u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u043b\u043e\u0432, \u0441\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043e\u0434\u0438\u043d \u0432\u0435\u043a\u0442\u043e\u0440 \u0438 \u0437\u0430\u0442\u0435\u043c \u044d\u0442\u043e\u0442 \u0432\u0435\u043a\u0442\u043e\u0440 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c.\n\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043a\u0430\u0447\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u043f\u043e \u043d\u043e\u0432\u043e\u0441\u0442\u043d\u044b\u043c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u043c \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 [RusVect\u014dr\u0113s](https:\/\/rusvectores.org\/ru\/models\/). ","3717250b":"\u0415\u0441\u0442\u044c 2 \u0432\u0437\u0430\u0438\u043c\u043d\u043e-\u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b Word2Vec: CBOW \u0438 Skip-Gram:   \n<img src=\"https:\/\/israelg99.github.io\/images\/2017-03-23-Word2Vec-Explained\/word2vec_diagrams.png\" width=\"600\">","aea2ce8d":"~~\u041d\u0438\u043a\u0430\u043a\u043e\u0433\u043e~~ \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043f\u0440\u0438\u0440\u043e\u0441\u0442\u0430 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u044b \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438, \u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u043f\u043e\u043b\u043d\u043e\u0442\u0430 \u043f\u043e \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u0443 \u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e \u043f\u043e\u0437\u0438\u0442\u0438\u0432\u0443 \u0441\u043b\u0435\u0433\u043a\u0430 \u0432\u044b\u0440\u043e\u0441\u043b\u0438.","721e1233":"### 4.1 W2V Embeddings\n\u041b\u0438\u043d\u0433\u0432\u0438\u0441\u0442 John Firth (1957):\n> \"You shall know a word by the company it keeps\" \n> (\"\u0421\u043a\u0430\u0436\u0438 \u043c\u043d\u0435 \u043a\u0442\u043e \u0434\u0440\u0443\u0433 \u0442\u0432\u043e\u0435\u0433\u043e \u0441\u043b\u043e\u0432\u0430 \u0438 \u0441\u043a\u0430\u0436\u0443 \u0447\u0442\u043e \u044d\u0442\u043e \u0437\u0430 \u0441\u043b\u043e\u0432\u043e\")","abf862fb":"# 1. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430\n\n\u0422\u0435\u043a\u0441\u0442 \u043d\u0430 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u044f\u0437\u044b\u043a\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0432 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u0441\u0438\u043b\u044c\u043d\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430. \n\u0412 \u0441\u0432\u044f\u0437\u0438 \u0441 \u044d\u0442\u0438\u043c, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 (\u0438\u043b\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438) \u0442\u0435\u043a\u0441\u0442\u0430, \u0442\u043e \u0435\u0441\u0442\u044c \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043a \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0435\u0434\u0438\u043d\u043e\u043c\u0443 \u0432\u0438\u0434\u0443.","333ee5db":"# 3. \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f","efd48094":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0435\u0433\u043e w2v\\ft","97cfbe36":"# \u0412\u0435\u043a\u0442\u043e\u0440\u0430 \u0438 \u044d\u043c\u0431\u0435\u0434\u0438\u043d\u0433\u0438 \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u043e\u0432","f04c6e37":"### 1.2 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\n\u0422\u0430\u043a\u0438\u043c\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043f\u0443\u043d\u043a\u0442\u0443\u0430\u0446\u0438\u0438, \u0441\u043f\u0435\u0446-\u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u0446\u0438\u0444\u0440\u044b. \u0414\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 \u0434\u043b\u044f [\u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439](https:\/\/docs.python.org\/3\/library\/re.html).","9fe98c7f":"\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0447\u0430\u0441\u0442\u0435\u0440\u0435\u0447\u043d\u044b\u0439 \u0440\u0430\u0437\u0431\u043e\u0440 \u0438\u0437 MyStem \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d\u044b \u0432\u0438\u0434\u0430 `<\u0441\u043b\u043e\u0432\u043e>_<\u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0447\u0438>`.","e5ec6a8b":"### 4.2 Skip-Gram model\n\n<img src=\"https:\/\/i.stack.imgur.com\/DcSPa.png\" width=\"600\">","b0d7e8d9":"### 2.3 TF-IDF\n\n**Term Frequency**  $tf(w,d)$ - \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0441\u043b\u043e\u0432\u043e $w$ \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u043e\u0441\u044c \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435 $d$\n\n**Document Frequency** $df(w)$ - \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0441\u043b\u043e\u0432\u043e $w$\n\n**Inverse Document Frequency** $idf(w) = log_2(N\/df(w))$  \u2014 \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0441\u0442\u044c. \n\n**TF-IDF**=$tf(w,d)*idf(w)$\n\n\n","a57531bc":"### 2.2 Bag-of-words\n\n**Quiz: \u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442, \u0435\u0441\u043b\u0438 \u043c\u044b \u0441\u043b\u043e\u0436\u0438\u043c \u0432\u0441\u0435 one-hot \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0441\u043b\u043e\u0432 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435?**\n<img src=\"https:\/\/www.programmersought.com\/images\/947\/0acb9279d17a1631bcfb154583cca443.JPEG\" width=\"800\">\n\n\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u0432 \u0442\u0435\u043a\u0441\u0442\u0430\u0445","3e52317c":"\u0421\u043a\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440\u0430","a177663f":"$$Cosine: cos(\\theta) = \\frac{A \\cdot B}{\\lVert A \\rVert \\cdot \\lVert B \\rVert}$$\n\n\n$$Euclidean: d(A, B) = \\sqrt{\\sum{(A - B)^2}}$$","f8791bae":"### 3.2 \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n\n\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0435\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440\u0430. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0439 SVM, \u043e\u043d \u0445\u043e\u0440\u043e\u0448\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0442\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438.  ","f1cffef7":"### 2.1 One-Hot Encoding\n<img src=\"https:\/\/miro.medium.com\/max\/674\/1*YEJf9BQQh0ma1ECs6x_7yQ.png\" width=\"500\">\n\n\u041a\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c one-hot? \n\n\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0441\u043b\u043e\u0432\u0443 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043d\u043e\u043c\u0435\u0440, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0438\u0445 \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u0430. \n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 [`scikit-learn`](https:\/\/scikit-learn.org\/).","a72098f3":"### 1.4 \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u043b\u043e\u0432 \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u0435 (\u0441\u0442\u0435\u043c\u043c\u0438\u043d\u0433, \u043b\u0435\u043c\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f)\n\n**\u0421\u0442\u0435\u043c\u043c\u0438\u043d\u0433 - \u044d\u0442\u043e \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043b\u043e\u0432\u0430 \u043f\u0443\u0442\u0451\u043c \u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u043d\u0438\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u044f\u0437\u044b\u043a\u0430.**\n\n\u0422\u0430\u043a\u0430\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u044f\u0437\u044b\u043a\u043e\u0432 \u0441 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435\u043c \u0441\u043b\u043e\u0432\u043e\u0444\u043e\u0440\u043c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e. \u0412 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 [nltk](https:\/\/www.nltk.org\/) \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u0441\u0442\u0435\u043c\u043c\u0435\u0440\u043e\u0432:\n - [Porter stemmer](http:\/\/tartarus.org\/martin\/PorterStemmer\/)\n - [Snowball stemmer](http:\/\/snowball.tartarus.org\/)\n - [Lancaster stemmer](http:\/\/www.nltk.org\/_modules\/nltk\/stem\/lancaster.html)","f7b3638b":"# 2. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u0430\n\n**Quiz: \u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043a\u0435\u043d\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043a\u0441\u0442\u044b \u0432 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 NLP? \u041a\u0430\u043a\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u0442\u044c?**","715bd05f":"\u0414\u043b\u044f \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430 \u0442\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u043d\u043e\u0432\u0430\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 [`razdel`](https:\/\/github.com\/natasha\/razdel).","1cdd6032":"\u0414\u043b\u044f \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430 \u044d\u0442\u043e\u0442 \u043f\u043e\u0434\u0445\u043e\u0434 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u0435\u0441\u0442\u044c \u043f\u0430\u0434\u0435\u0436\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u044b, \u0432\u0440\u0435\u043c\u044f \u0443 \u0433\u043b\u0430\u0433\u043e\u043b\u043e\u0432 \u0438 \u0442.\u0434.","cb7debbb":"\u0411\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u043e\u043a\u0435\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0432 [`nltk`](https:\/\/www.nltk.org\/): \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0434\u043b\u044f \u043e\u0431\u0449\u0435\u0433\u043e NLP.\n\n**\u0421\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u0447\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u0442\u0440\u0438 \u043c\u0435\u0442\u043e\u0434\u0430 \u0438\u0437 nltk**","fdf6b8ca":"\u041a\u0430\u043a \u0442\u0430\u043a\u0438\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u0432 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435? \n\n> \u0412\u0441\u0442\u0440\u0435\u0447\u0430 \u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442\u0430 \u0420\u043e\u0441\u0441\u0438\u0438 \u041f\u0443\u0442\u0438\u043d\u0430 \u0438 \u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442\u0430 \u0421\u0428\u0410 \u041e\u0431\u0430\u043c\u044b \u0441\u043e\u0441\u0442\u043e\u044f\u043b\u0430\u0441\u044c \u0432\u0447\u0435\u0440\u0430 \u0432 \u041a\u0440\u0435\u043c\u043b\u0435.\n\n> \u041f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442 \u0421\u0428\u0410, \u0411\u0430\u0440\u0430\u043a \u041e\u0431\u0430\u043c\u0430, \u0432\u0447\u0435\u0440\u0430 \u0443\u0435\u0445\u0430\u043b \u0438\u0437 \u0412\u0430\u0448\u0438\u043d\u0433\u0442\u043e\u043d\u0430.\n\n[\u0418\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e \u043d\u0430 projector.tensorflow](http:\/\/projector.tensorflow.org\/?config=https:\/\/gist.githubusercontent.com\/akutuzov\/fd57a53a6aeec15c3497c54bc42a9af8\/raw\/c29e04ee34dc7ffad8d8bcccc8da2d5905259fcc\/tayga_none_fasttextcbow_300_10_2019_b7b71a84a9796c369d8566d6c64d75ee_config.json)\n","43547925":"### 1.3 \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0430 \u0441\u043c\u044b\u0441\u043b\u043e\u0432\u044b\u0435 \u0435\u0434\u0438\u043d\u0438\u0446\u044b (\u0442\u043e\u043a\u0435\u043d\u0438\u0437\u0430\u0446\u0438\u044f).","e7797dd8":"### 1.1 \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u0430 \u043a \u043d\u0438\u0436\u043d\u0435\u043c\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0443.","fc5b2ef2":"### 3.4 \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430","98a53a42":"**Quiz: \u0427\u0442\u043e \u044d\u0442\u043e \u0437\u0430 \u0437\u0430\u0434\u0430\u0447\u0430? \u041a\u0430\u043a\u0438\u0435 \u0435\u0449\u0451 \u0437\u0430\u0434\u0430\u0447\u0438 \u0440\u0435\u0448\u0430\u044e\u0442\u0441\u044f \u0432 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438?**\n\n\u041c\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0442\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442\u0430. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0442\u0432\u0438\u0442\u043e\u0432. \u0412\u0441\u0435\u0433\u043e \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 2 \u043a\u043b\u0430\u0441\u0441\u0430: \u043f\u043e\u0437\u0438\u0442\u0438\u0432 \u0438 \u043d\u0435\u0433\u0430\u0442\u0438\u0432.","e80adca2":"\u0421\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043a \u0442\u043e\u043a\u0435\u043d\u0438\u0437\u0430\u0446\u0438\u0438 - \u044d\u0442\u043e \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u043e \u043f\u0440\u043e\u0431\u0435\u043b\u044c\u043d\u044b\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c. \n\n**Quiz: \u041a\u0430\u043a\u0430\u044f \u0443 \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430?**","c103049d":"\u042d\u0442\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043e\u0431\u0443\u0447\u0430\u043b\u0430\u0441\u044c \u043d\u0435 \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0442\u043e\u043a\u0435\u043d\u0430\u0445, \u0430 \u043d\u0430 \u0442\u043e\u043a\u0435\u043d\u0430\u0445 \u0438 \u0438\u0445 \u0447\u0430\u0441\u0442\u0435\u0440\u0435\u0447\u043d\u044b\u0445 \u0442\u0435\u0433\u0430\u0445 \u0438\u0437 MyStem.","7276c803":"## \u041f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043e\u0442 RusVectores","db66fd06":"### 3.1 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n**Quiz: \u0417\u0430\u0447\u0435\u043c \u043d\u0430\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435?**\n\n\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 [`pandas`](https:\/\/pandas.pydata.org\/)."}}