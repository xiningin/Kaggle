{"cell_type":{"447c5d6d":"code","bec10a82":"code","06c41126":"code","9d31269c":"code","5663dca9":"code","cc08f914":"code","40ff3dea":"code","a7b7c8ff":"code","7ed0492c":"code","e994ac6d":"code","3ce0f7ad":"code","3daacec9":"code","a2482f0b":"code","084eae6c":"code","7f43a8c6":"code","527c0ce2":"code","1a36e586":"markdown"},"source":{"447c5d6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport cv2\nimport time\nimport random \nimport pickle \nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import TensorBoard\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bec10a82":"data_dir =\"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\"\ncategories = [\"dogs\" ,\"cats\"]\nfor category in categories:\n    path = os.path.join(data_dir,category)\n    for img in os.listdir(path):\n        img_array = cv2.imread(os.path.join(path,img), cv2.IMREAD_GRAYSCALE)\n        plt.imshow(img_array, cmap=\"gray\")\n        break\n        \n    break","06c41126":"print(img_array.shape)","9d31269c":"img_size = 50\nnew_array = cv2.resize(img_array, (img_size,img_size))\nplt.imshow(new_array, cmap=\"gray\")","5663dca9":"training_data =[]\n\ndef create_training_data():\n    for category in categories:\n        path = os.path.join(data_dir,category)\n        class_num = categories.index(category)\n        for img in os.listdir(path):\n            try:\n                img_array = cv2.imread(os.path.join(path,img), cv2.IMREAD_GRAYSCALE)\n                new_array = cv2.resize(img_array, (img_size,img_size))\n                training_data.append([new_array, class_num])\n            except Exception as e:\n                pass\ncreate_training_data()\n       \n","cc08f914":"print(len(training_data))","40ff3dea":"test_dir = \"\/kaggle\/input\/cat-and-dog\/test_set\/test_set\"\n\ndef prepare(test_dir):\n    for category in categories:\n        path = os.path.join(test_dir,category)\n        class_num = categories.index(category)\n        for img in os.listdir(path):\n            try:\n                img_array = cv2.imread(os.path.join(path,img), cv2.IMREAD_GRAYSCALE)\n                new_array = cv2.resize(img_array, (img_size,img_size))\n                training_data.append([new_array, class_num])\n            except Exception as e:\n                pass\n    return new_array.reshape(-1, img_size, img_size,1)\n    ","a7b7c8ff":"random.shuffle(training_data)","7ed0492c":"x =[]\ny =[]","e994ac6d":"for features, label in training_data:\n    x.append(features)\n    y.append(label)\n    \nx =np.array(x).reshape(-1, img_size,img_size,1)","3ce0f7ad":"NAME =\"Cats_vs_Dogs{}\".format(int(time.time()))\ntensorboard = TensorBoard(log_dir='log\/{}'.format(NAME))\npickle_out = open(\"x.pickle\",\"wb\")\npickle.dump(x,pickle_out)\npickle_out.close()\n\npickle_out = open(\"y.pickle\",\"wb\")\npickle.dump(y,pickle_out)\npickle_out.close()","3daacec9":"x = pickle.load(open(\"x.pickle\",\"rb\"))\ny = pickle.load(open(\"y.pickle\",\"rb\"))\n\nx=np.array(x\/255.0)\ny=np.array(y)","a2482f0b":"\nmodel = Sequential()\n\nmodel.add( Conv2D(64, (3,3), input_shape = x.shape[1:]) )\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2) ) )\n\nmodel.add(Conv2D(64, (3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(64))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\nmodel.compile(loss=\"binary_crossentropy\",\n         optimizer=\"adam\",\n         metrics=['accuracy'])\n\nmodel.fit(x, y, batch_size=32, epochs=15, validation_split=0.1, callbacks=[tensorboard])","084eae6c":"model.save('cat-and-dog_cnn')","7f43a8c6":"pred = model.predict([prepare(test_dir)])","527c0ce2":"print(categories[int(pred[0][0])])","1a36e586":"**Normalization**"}}