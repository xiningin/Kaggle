{"cell_type":{"a6898b1f":"code","366718b0":"code","6fff3dc7":"code","f467143b":"code","4eb382f3":"code","d6261492":"code","cf98a81c":"code","d41888b4":"code","57a0d0b2":"code","477343c4":"code","07db8099":"code","5e055ec8":"code","8d8ac27c":"code","b5a76455":"code","75e87182":"code","8e5e4951":"code","35583611":"code","668f81b0":"code","571ad5ff":"code","fc0376ed":"code","a7cd358a":"code","365603c5":"code","05b12e9b":"code","e2b6d03a":"code","7ea34885":"code","88214968":"code","f9a89448":"code","38c539af":"code","78afd604":"code","1fd3f4d5":"code","2323ce4a":"code","15823654":"code","bf7b4224":"code","2e2fb6e5":"code","a7fdca5e":"code","5646c5fb":"code","5f517fb9":"code","e11a7e2e":"code","8e91ea0a":"code","71c0e4e7":"code","3e181fe6":"code","4839ec40":"code","8adca5e5":"code","54b543fd":"code","11a8e5f6":"code","325da6c3":"code","528f6570":"code","05e98650":"code","1f288b78":"code","d9ff68fe":"code","6a467a3a":"code","178145b2":"code","35ef63dc":"code","51283e81":"code","f0c789a0":"code","27632d13":"code","f8d0f31f":"code","23648241":"code","01c1de25":"code","1bdcaad5":"code","458aeed1":"code","3ffe872a":"code","072b023c":"code","5d03ac3a":"code","280aad99":"code","47e4c0a5":"code","39872378":"code","066462c8":"code","eed3f5df":"code","b941a494":"markdown","1f8f8f90":"markdown","52bf73e9":"markdown","eb73ca8b":"markdown","ee18aeb2":"markdown","ff572836":"markdown"},"source":{"a6898b1f":"%matplotlib inline\n\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport tensorflow as tf\nimport keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Embedding, LSTM\nfrom keras.preprocessing import sequence\nfrom keras import backend as K\n\nimport nltk\nnltk.download('punkt')\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud\nimport string\nimport re\n","366718b0":"df = pd.read_csv(\"..\/input\/amazon-fine-food-reviews\/Reviews.csv\")\ndf.shape[0]","6fff3dc7":"df = df[:50000]","f467143b":"df.shape","4eb382f3":"df.head()","d6261492":"df.info()","cf98a81c":"len(df.ProductId.unique())","d41888b4":"len(df.UserId.unique())","57a0d0b2":"#Lets do the value count on 'Scores'.\ndf.Score.value_counts()","477343c4":"plt.figure()\nsns.countplot(x='Score', data=df, palette='RdBu')\nplt.xlabel('Score (Rating)')\nplt.show()","07db8099":"#copying the original dataframe to 'temp_df'.\ntemp_df = df[['UserId','HelpfulnessNumerator','HelpfulnessDenominator', 'Summary', 'Text','Score']].copy()\n\n#Adding new features to dataframe.\ntemp_df[\"Sentiment\"] = temp_df[\"Score\"].apply(lambda score: \"positive\" if score > 3 else \\\n                                              (\"negative\" if score < 3 else \"not defined\"))\ntemp_df[\"Usefulness\"] = (temp_df[\"HelpfulnessNumerator\"]\/temp_df[\"HelpfulnessDenominator\"]).apply\\\n(lambda n: \">75%\" if n > 0.75 else (\"<25%\" if n < 0.25 else (\"25-75%\" if n >= 0.25 and\\\n                                                                        n <= 0.75 else \"useless\")))\n\ntemp_df.loc[temp_df.HelpfulnessDenominator == 0, 'Usefulness'] = [\"useless\"]\n# Removing all rows where 'Score' is equal to 3\n#temp_df = temp_df[temp_df.Score != 3]\n#Lets now observe the shape of our new dataframe.\ntemp_df.shape","5e055ec8":"sns.countplot(x='Sentiment', order=[\"positive\", \"negative\"], data=temp_df, palette='RdBu')\nplt.xlabel('Sentiment')\nplt.show()","8d8ac27c":"pos = temp_df.loc[temp_df['Sentiment'] == 'positive']\npos = pos[0:25000]\n\nneg = temp_df.loc[temp_df['Sentiment'] == 'negative']\nneg = neg[0:25000]","b5a76455":"def create_Word_Corpus(temp):\n    words_corpus = ''\n    for val in temp[\"Summary\"]:\n        text = str(val).lower()\n        #text = text.translate(trantab)\n        tokens = nltk.word_tokenize(text)\n        tokens = [word for word in tokens if word not in stopwords.words('english')]\n        for words in tokens:\n            words_corpus = words_corpus + words + ' '\n    return words_corpus\n        \n# Generate a word cloud image\npos_wordcloud = WordCloud(width=900, height=500).generate(create_Word_Corpus(pos))\nneg_wordcloud = WordCloud(width=900, height=500).generate(create_Word_Corpus(neg))\n","75e87182":"# Plot cloud\ndef plot_cloud(wordCloud):\n    plt.figure( figsize=(16,8), facecolor='w')\n    plt.imshow(wordCloud)\n    plt.axis(\"off\")\n    plt.tight_layout(pad=0)\n    plt.show()","8e5e4951":"plot_cloud(pos_wordcloud)","35583611":"plot_cloud(neg_wordcloud)","668f81b0":"#Checking the value count for 'Usefulness'\ntemp_df.Usefulness.value_counts()","571ad5ff":"df.head()","fc0376ed":"user = df['UserId'] == \"AR5J8UI46CURR\"\nscore = df['Score'] != 3\ndf[user & score]","a7cd358a":"from nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nstop_words=stopwords.words('english')","365603c5":"from nltk.stem import SnowballStemmer\nw_tokenizer = nltk.tokenize.WhitespaceTokenizer()\nlemmatizer = nltk.stem.WordNetLemmatizer()\nstemmer=SnowballStemmer(\"english\")\n\ndf['CleanedText'] = df['Text'].replace(to_replace=r'@\\S+',value=\"\",regex=True)\ndf[\"CleanedText\"] = df['CleanedText'].replace(to_replace=r'[^A-Za-z0-9]+',value=\" \",regex=True)\ndf[\"CleanedText\"] = df[\"CleanedText\"].apply(lambda x: x.split())\ndf[\"CleanedText\"] = df['CleanedText'].apply(lambda x: [item for item in x if item not in stop_words])\ndf['CleanedText'] = df['CleanedText'].apply(lambda x: [stemmer.stem(w) for w in x])\ndf['CleanedText'] = df['CleanedText'].apply(' '.join)","05b12e9b":"df.head()","e2b6d03a":"df[\"sentiment\"] = df[\"Score\"].apply(lambda score: \"positive\" if score >= 3 else \"negative\")","7ea34885":"df.head()","88214968":"#Sorting data according to ProductId in ascending order\ndf = df.sort_values('ProductId', axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')","f9a89448":"df","38c539af":"df = df.drop_duplicates(subset={\"UserId\",\"ProfileName\",\"Time\",\"Text\"}, keep='first', inplace=False)\ndf.shape","78afd604":"df.head()","1fd3f4d5":"sentences = np.array(df['CleanedText'])\n\nfor i,sentence in enumerate(sentences):\n    sentences[i] = sentence\n    \nprint(sentences[0])\nprint(sentences.shape)","2323ce4a":"# Find all words in the cleanedtext\nvocab = set()\nfor x in sentences:\n    for word in x.split():\n        vocab.add(word)\n        \nlen(vocab)","15823654":"# Create a dictionary from vocabulary.\nvocab_dict = dict.fromkeys(vocab, 0)","bf7b4224":"# Calculate count of each word..\nfor x in sentences:\n    for word in x.split():\n        vocab_dict[word]+=1","2e2fb6e5":"k = []\nv = []\nfor keys,val in vocab_dict.items():\n    k.append(keys)\n    v.append(val)","a7fdca5e":"kv = np.vstack((k,v)).T","5646c5fb":"kv.shape","5f517fb9":"df2 = pd.DataFrame(columns=[\"Word\",\"Count\"], data=kv)\ndf2['Count'] = df2['Count'].astype('int')\ndf2.head()","e11a7e2e":"# Sort the dataframe to get the largest count at first place\ndf2.sort_values(by=['Count'], ascending=False, inplace=True)\ndf2.head()","8e91ea0a":"# Give numbering to the most frequent word as 1 then next as 2 and so on.\ndf2.reset_index(inplace=True)\ndf2['mapping'] = df2.index + 1\ndf2.head()","71c0e4e7":"df2.drop(columns=['index','Count'], inplace=True)\ndf2.head()","3e181fe6":"# Convert to dictionary for easier processing.\ndictionary = dict(zip(df2['Word'], df2['mapping']))\nlen(dictionary)","4839ec40":"df2.head()","8adca5e5":"del(df2)\ndel(sentences)\ndel(k)\ndel(v)\ndel(kv)","54b543fd":"def change(x):\n    l = list()\n    for words in x.split():\n        l.append(dictionary[words])\n        \n    return l","11a8e5f6":"df","325da6c3":"# Get LSTM Feature....\ndf['lstm_feature'] = df['CleanedText'].apply(change)\ndf.head()","528f6570":"df = df[['lstm_feature', 'sentiment']]\ndf.head()","05e98650":"df.head()","1f288b78":"df['sentiment'] = df.sentiment.replace(to_replace=['positive', 'negative'], value=[1,0])\ndf.head()","d9ff68fe":"X,y = df['lstm_feature'], df['sentiment']","6a467a3a":"# Find maximum length vector in LSTM Feature\nm = 0\nfor x in df['lstm_feature']:\n    m = max(m, len(x))\nprint(m)","178145b2":"max_review_length = 1500\nX = sequence.pad_sequences(np.array(X), maxlen=max_review_length)","35ef63dc":"df.head()","51283e81":"X[0].shape","f0c789a0":"X.shape","27632d13":"# create the model\nembedding_vecor_length = 32\ntotal_words = 74581\nmodel = Sequential()\nmodel.add(Embedding(total_words, embedding_vecor_length, input_length=1500))\nmodel.add(LSTM(100))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(model.summary())","f8d0f31f":"X[0]","23648241":"X = tf.convert_to_tensor(X, dtype=tf.float32)\ny = tf.convert_to_tensor(y, dtype=tf.float32)","01c1de25":"es = keras.callbacks.EarlyStopping(monitor='val_loss', patience=2, verbose=0, mode='auto')\nmc = keras.callbacks.ModelCheckpoint('.mdl_wts.hdf5', monitor='val_loss', verbose=0, save_best_only=True, save_weights_only=False, mode='auto', period=2)","1bdcaad5":"# X.reset_index()","458aeed1":"df.head()","3ffe872a":"history = model.fit(X, y, nb_epoch=10, batch_size=1024, validation_split=0.2, callbacks=[es, mc])","072b023c":"# Loss Curves\nplt.figure(figsize=[8,6])\nplt.plot(history.history['loss'],'r',linewidth=3.0)\nplt.plot(history.history['val_loss'],'b',linewidth=3.0)\nplt.legend(['Training loss', 'Validation Loss'],fontsize=18)\nplt.xlabel('Epochs ',fontsize=16)\nplt.ylabel('Loss',fontsize=16)\nplt.title('Loss Curves',fontsize=16)\n \n# Accuracy Curves\nplt.figure(figsize=[8,6])\nplt.plot(history.history['accuracy'],'r',linewidth=3.0)\nplt.plot(history.history['val_accuracy'],'b',linewidth=3.0)\nplt.legend(['Training Accuracy', 'Validation Accuracy'],fontsize=18)\nplt.xlabel('Epochs ',fontsize=16)\nplt.ylabel('Accuracy',fontsize=16)\nplt.title('Accuracy Curves',fontsize=16)","5d03ac3a":"import re\n\ndef preprocess(text):\n    text = re.sub(r'@\\S+', \"\", text)\n    text = re.sub(r'[^A-Za-z0-9]+', \" \", text)\n    text = text.split()\n    text = [item for item in text if item not in stop_words]\n    text = [stemmer.stem(w) for w in text]\n    text = ' '.join(text)\n    return text","280aad99":"def sample_predict(text):\n    text = preprocess(text)\n    text = change(text)\n    return text","47e4c0a5":"# def get_sentiment(arr):\n#     sentiment = []\n#     for sent in arr:\n#         if sent>= 0.5:\n#              sentiment.append(\"Positive\")\n#         else:\n#             sentiment.append(\"Negative\")\n#     return sentiment ","39872378":"text1 = \"Good Seller, Console came with everything as specified on description. I'll upload some pictures so you can see the box and hardware quality. \"\nencoded_text1 = sample_predict(text1)\n\ntext2 = \"Very poor product\"\nencoded_text2 = sample_predict(text2)\n\nencoded_text = sequence.pad_sequences([encoded_text1, encoded_text2], maxlen=max_review_length)\n\npredictions = model.predict(encoded_text)\n# sentiment = get_sentiment(predictions)\nprint(predictions)","066462c8":"model.save(\"model.h5\")","eed3f5df":"text1 = \" is amazingly simple to use. What great fun! \"\nencoded_text1 = sample_predict(text1)\n\ntext2 = \"Very poor product\"\nencoded_text2 = sample_predict(text2)\n\nencoded_text = sequence.pad_sequences([encoded_text1, encoded_text2], maxlen=max_review_length)\n\npredictions = model.predict(encoded_text)\n# sentiment = get_sentiment(predictions)\nprint(predictions)","b941a494":"## Duplication","1f8f8f90":"# Preprocessing Cleaned Text to generate LSTM Input","52bf73e9":"## Remove Duplicate Reviews","eb73ca8b":"# Training an LSTM Model","ee18aeb2":"## Helpfulness\n\nHow many reviews are helpful?\n\nAmong all reviews, almost half (50%) are not voted on at all.\n\nAmong reviews that are voted on, helpful reviews(>75%) are the most common","ff572836":"# Preprocessing"}}