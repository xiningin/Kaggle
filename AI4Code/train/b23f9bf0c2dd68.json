{"cell_type":{"25fd3e9b":"code","22f96932":"code","8307dcea":"code","9af74023":"code","cec057c3":"code","8b43e4d9":"code","4be77340":"code","a00e904e":"code","99bbd34f":"code","c5fee1af":"code","262bbe4e":"code","7ce81b31":"code","98460ccf":"code","26372950":"code","a3d07cae":"code","58b99fd4":"code","8426e584":"code","4c58370e":"code","304b6a9a":"code","ea738e08":"code","336afb94":"code","0a559ae7":"code","351ebae2":"code","12561187":"code","c6c441c3":"code","af20b71f":"markdown","4e9056c9":"markdown","00b7f0cc":"markdown","2adde9ad":"markdown","c08eef08":"markdown","036087e3":"markdown"},"source":{"25fd3e9b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","22f96932":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport re\nimport sklearn\nimport xgboost as xgb\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n\n# Going to use these 5 base models for the stacking\nfrom sklearn.ensemble import (RandomForestClassifier, AdaBoostClassifier, \n                              GradientBoostingClassifier, ExtraTreesClassifier)\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import KFold\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\ntrain = pd.read_csv('..\/input\/titanic_train.csv')\ntest = pd.read_csv('..\/input\/titanic_test.csv')\n\nall_data=pd.concat([train,test])","8307dcea":"all_data.head()","9af74023":"train.head()","cec057c3":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","8b43e4d9":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',data=train,palette='RdBu_r')","4be77340":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Sex',data=train,palette='RdBu_r')","a00e904e":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Pclass',data=train,palette='rainbow')","99bbd34f":"sns.distplot(train['Age'].dropna(),kde=False,color='darkred',bins=30)","c5fee1af":"train['Age'].hist(bins=30,color='darkred',alpha=0.7)","262bbe4e":"sns.countplot(x='SibSp',data=train)","7ce81b31":"train['Fare'].hist(color='green',bins=40,figsize=(8,4))","98460ccf":"import cufflinks as cf\ncf.go_offline()\ntrain['Fare'].iplot(kind='hist',bins=30,color='green')","26372950":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=train,palette='winter')","a3d07cae":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age","58b99fd4":"train['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)\nall_data['Age'] = all_data[['Age','Pclass']].apply(impute_age,axis=1)","8426e584":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","4c58370e":"train.drop('Cabin',axis=1,inplace=True)\nall_data.drop(\"Cabin\",axis=1,inplace=True)","304b6a9a":"train.head()","ea738e08":"train.dropna(inplace=True)","336afb94":"train.info()","0a559ae7":"sex = pd.get_dummies(train['Sex'],drop_first=True)\nembark = pd.get_dummies(train['Embarked'],drop_first=True)","351ebae2":"train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)","12561187":"train = pd.concat([train,sex,embark],axis=1)","c6c441c3":"train.head()","af20b71f":"Roughly 20 percent of the Age data is missing. The proportion of Age missing is likely small enough for reasonable replacement with some form of imputation. Looking at the Cabin column, it looks like we are just missing too much of that data to do something useful with at a basic level. We'll probably drop this later, or change it to another feature like \"Cabin Known: 1 or 0\"\n\nLet's continue on by visualizing some more of the data! Check out the video for full explanations over these plots, this code is just to serve as reference.","4e9056c9":"Great! Let's go ahead and drop the Cabin column and the row in Embarked that is NaN.","00b7f0cc":"> ","2adde9ad":"**The Data** :\nLet's start by reading in the titanic_train.csv file into a pandas dataframe.","c08eef08":"## Converting Categorical Features \n\nWe'll need to convert categorical features to dummy variables using pandas! Otherwise our machine learning algorithm won't be able to directly take in those features as inputs.","036087e3":"# Exploratory Data Analysis\n\nLet's begin some exploratory data analysis! We'll start by checking out missing data!\n\n## Missing Data\n\nWe can use seaborn to create a simple heatmap to see where we are missing data!"}}