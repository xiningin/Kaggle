{"cell_type":{"61dc7847":"code","0c4d35b8":"code","bb39aa72":"code","e4d1eda8":"code","2e264c48":"code","77ea4059":"code","5b6663da":"code","1e3b463f":"code","e1fcce90":"code","1143df45":"code","1b62606a":"code","614dbe4a":"code","9fa637da":"code","182ba6ae":"code","317904d7":"code","0cd640f4":"code","7a9e3ee6":"code","a70366e9":"code","74a5eaa5":"code","94daf882":"code","bdc47668":"code","43bddf34":"code","73fd4e28":"code","d1511d19":"code","88427ee3":"code","d57619fa":"code","449cd7b9":"code","c7a08b99":"code","5c7367c7":"code","21bf9918":"code","8b78e6dd":"code","83e9d239":"code","7c8bf357":"code","879441d9":"code","864e0e6c":"code","0aed3480":"code","15ddb6ee":"code","4799b0aa":"code","7e46d706":"code","a005a848":"code","76682d09":"code","455d89c6":"code","44a563b6":"code","7426452f":"code","8aefd656":"code","2042ca64":"code","27aff270":"code","fc12bde6":"code","1b96115f":"code","998697f8":"code","44e0f704":"code","a34b24ab":"code","de56b076":"code","ab206787":"code","36c16e6a":"code","96ca2f84":"code","350f7710":"code","4ffffecb":"code","e52c90e8":"code","1171b3fc":"code","b7ae9ba2":"code","6fd933cd":"code","470a5db5":"code","13129a6f":"code","9625b7d1":"code","39cb0729":"code","17fa9ff9":"code","27918bc9":"code","246124be":"code","eeea9a90":"code","955d1344":"code","6abb4664":"code","b4570f66":"code","f95bc4b7":"code","26c3f105":"code","dfa2aaf0":"code","d1c00e87":"code","4413bdff":"code","65d967ad":"code","c0e33d34":"code","f5ca346f":"code","5beb06f4":"code","519d5727":"code","a56e018d":"code","00845f36":"code","c3eba762":"code","5c343f57":"code","a06808ce":"code","e4ff2f82":"code","31d82b15":"code","93e2d397":"code","86281e68":"code","e9849d8a":"code","7649b079":"code","e284ce9e":"code","1e09844f":"code","132ab1e7":"code","4d60f5a1":"code","d9ce47ae":"code","e8b3d0a0":"code","09836b2a":"code","89e1740d":"code","92b18e18":"code","ef103d20":"code","421f9a34":"code","368112f4":"code","6b94a631":"code","69974c07":"code","0c453d79":"code","4128d15e":"code","33e5a811":"code","0ba7ef47":"code","ddc9f6a1":"code","91bcccc0":"code","996e4130":"code","8d6be658":"code","b8a0f511":"code","60454ecf":"code","319e3bae":"code","a8fa2e84":"code","a55bc720":"code","06e77fa9":"code","0638bde0":"code","77f6c495":"code","5ad57d10":"markdown","d30b95df":"markdown","39588be8":"markdown","ed676985":"markdown","0d150201":"markdown","482d980f":"markdown","d4cae454":"markdown","1efffaa0":"markdown","86913131":"markdown","8f6a824f":"markdown","0aa4a413":"markdown","52e0a7c6":"markdown","e2258be0":"markdown","79c04b4d":"markdown","d3c57b64":"markdown","84df1831":"markdown","67d2f8b7":"markdown","c826f07f":"markdown","0aef9835":"markdown","fe4d37bd":"markdown","e674e93f":"markdown","7e29ed70":"markdown","4c85c193":"markdown","9d249d57":"markdown","80c06dbf":"markdown","59a7536c":"markdown","a17bb1af":"markdown","b00b8b34":"markdown","fd25daf3":"markdown","35c84a2a":"markdown","0bab86ca":"markdown","adf05a02":"markdown","bf1ab417":"markdown","0533f998":"markdown","38ae8cc6":"markdown","4761897a":"markdown","9e9fa05f":"markdown","463c672d":"markdown","b6f7c338":"markdown","6e943571":"markdown","4789cd4e":"markdown","883848f8":"markdown","8d53719e":"markdown","2ae811b8":"markdown","b3eab631":"markdown","6ea69af4":"markdown","df3896a1":"markdown","045050aa":"markdown","bf5fd246":"markdown","8e118699":"markdown","6a319c85":"markdown","41362bd1":"markdown","4a04fd42":"markdown","279a16c5":"markdown","71300b3c":"markdown","a153eda3":"markdown","09935ae0":"markdown","d628d15b":"markdown","2b2d3739":"markdown","32ce6eea":"markdown","90986434":"markdown","4e398e20":"markdown","53e19711":"markdown","75ec7017":"markdown","8f35f5a7":"markdown","873b3c19":"markdown","61f92302":"markdown","443ae07c":"markdown","0b95f8bf":"markdown","036b9945":"markdown","7ba39621":"markdown","0a83397d":"markdown","0841bceb":"markdown","c625b160":"markdown","4ea2e0be":"markdown","4b8a5d75":"markdown","9886fa91":"markdown","68fb77c1":"markdown","bfcd124b":"markdown","e124d424":"markdown","8742df03":"markdown","6d5eada9":"markdown","a5a6220a":"markdown","153feccf":"markdown","4680e7c3":"markdown","f94bdec9":"markdown","e790bfe4":"markdown","31e51817":"markdown","66e75977":"markdown"},"source":{"61dc7847":"# Bruno Vieira Ribeiro","0c4d35b8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px","bb39aa72":"sns.set_style(\"whitegrid\")\nsns.set(rc={'figure.figsize':(10,6)})","e4d1eda8":"df = pd.read_csv('..\/input\/ludopedia-rank\/all_pages2.csv')","2e264c48":"df.head()","77ea4059":"df.columns","5b6663da":"cols = ['position', 'title', 'year', 'notaRank', 'media', 'notas', 'age',\n        'numOfPlayers', 'timeOfPlay', 'dominio', 'mecanicas', 'artist', 'designer',\n        'imagem']\n\ndf = df[cols]","1e3b463f":"df.head()","e1fcce90":"df['position'] = df['position'].apply(lambda s: s.replace(\"\u00ba\",\"\"))","1143df45":"df['position'] = pd.to_numeric(df['position'])","1b62606a":"df.info()","614dbe4a":"len(df.loc[df['age'].str.contains(' +')])","9fa637da":"df['age'] = df['age'].apply(lambda s: s.replace(\"+\",\"\"))\ndf['age'] = df['age'].apply(lambda s: s.replace(\" \",\"\"))","182ba6ae":"df['age']","317904d7":"df['age'] = pd.to_numeric(df['age'])","0cd640f4":"sns.countplot(y = 'age', data = df,\n              order = df['age'].value_counts().index);","7a9e3ee6":"fig, axs = plt.subplots(2, 1, sharex=True)\n\nsns.boxplot(x='age', y = 'notaRank', data = df, ax = axs[0])\nsns.boxplot(x='age', y = 'media', data = df, ax = axs[1]);","a70366e9":"df['numOfPlayers'] = df['numOfPlayers'].apply(lambda s: s.replace(\"jogadores\",\"\").strip())","74a5eaa5":"df['numOfPlayers']","94daf882":"# With range\nlen(df.loc[df['numOfPlayers'].str.contains('a')])","bdc47668":"# Without (for completeness)\nlen(df.loc[df['numOfPlayers'].str.contains('a') == False])","43bddf34":"df['minPlayers'] = df['numOfPlayers'].apply(lambda s: int(s[0]))\n\ndf['maxPlayers'] = df['numOfPlayers'].apply(lambda s: s[s.find('a')+2:] if len(s)>1 else s[0])","73fd4e28":"df.head()","d1511d19":"sns.countplot(data=df, x='maxPlayers');","88427ee3":"sns.countplot(data=df, x='minPlayers');","d57619fa":"df['year'] = df['year'].apply(lambda s: s.strip('( )'))\ndf['year'] = pd.to_numeric(df['year'])","449cd7b9":"df.info()","c7a08b99":"plt.figure(figsize=(20,6))\nplt.xticks(rotation=90)\nsns.countplot(x='year', data = df);","5c7367c7":"len(df.loc[df['timeOfPlay'].str.contains('min')])","21bf9918":"df['timeOfPlay'] = df['timeOfPlay'].apply(lambda s: s.replace(\" min\",\"\"))","8b78e6dd":"df['timeOfPlay'] = pd.to_numeric(df['timeOfPlay'])","83e9d239":"sns.histplot(data = df, x = 'timeOfPlay');","7c8bf357":"unique_times = df['timeOfPlay'].unique()\nnp.sort(unique_times)","879441d9":"sns.boxplot(x='timeOfPlay', y = 'notaRank', data = df)\nplt.xticks(rotation=90);","864e0e6c":"df[df['timeOfPlay'] == 1000]","0aed3480":"df = df.sort_values(by=['position'])\ndf = df.reset_index(drop=True)","15ddb6ee":"df.head()","4799b0aa":"sns.boxplot(x='dominio', y = 'notaRank', data = df);","7e46d706":"df['dominio'].unique()","a005a848":"df['dominio'].value_counts()","76682d09":"df[df['dominio']=='Jogos Familiares,Jogos Expert,Jogos Infantis']","455d89c6":"df.at[1798, 'dominio'] = 'Jogos Familiares'","44a563b6":"df.at[1798, 'dominio']","7426452f":"df['dominio'].value_counts()","8aefd656":"df[df['dominio']=='Jogos Infantis,Jogos Familiares']","2042ca64":"df.at[1020, 'dominio'] = 'Jogos Familiares'\ndf.at[1020, 'dominio']","27aff270":"df.at[690, 'dominio'] = 'Jogos Infantis'\ndf.at[690, 'dominio']","fc12bde6":"df['dominio'].value_counts()","1b96115f":"df[df['dominio']=='Jogos Expert,Jogos Familiares']","998697f8":"df.at[147, 'dominio'] = 'Jogos Familiares'\ndf.at[2016, 'dominio'] = 'Jogos Familiares'\nprint(df.at[147, 'dominio'], df.at[2016, 'dominio'])","44e0f704":"df.at[255, 'dominio'] = 'Jogos Familiares'\ndf.at[255, 'dominio']","a34b24ab":"df.at[602, 'dominio'] = 'Jogos Expert'\ndf.at[602, 'dominio']","de56b076":"df['dominio'].value_counts()","ab206787":"df[df['dominio']=='Jogos Familiares,Jogos Infantis']","36c16e6a":"df.at[1110, 'dominio'] = 'Jogos Infantis'\ndf.at[1361, 'dominio'] = 'Jogos Infantis'\ndf.at[2136, 'dominio'] = 'Jogos Infantis'\ndf.at[2438, 'dominio'] = 'Jogos Infantis'\nprint(df.at[1110, 'dominio'], df.at[1361, 'dominio'], df.at[2136, 'dominio'], df.at[2438, 'dominio'])","96ca2f84":"df['dominio'].value_counts()","350f7710":"df[df['dominio'].isnull()]","4ffffecb":"df[df['title']=='Carson City']","e52c90e8":"df.at[279, 'dominio'] = 'Jogos Expert'\ndf.at[279, 'dominio']","1171b3fc":"df.at[902, 'dominio'] = 'Jogos Familiares'\ndf.at[902, 'dominio']","b7ae9ba2":"df.at[1176, 'dominio'] = 'Jogos Familiares'\ndf.at[1176, 'dominio']","6fd933cd":"df[df['title'] == 'Stratego']","470a5db5":"df.at[2075, 'dominio'] = 'Jogos Familiares'\ndf.at[2075, 'dominio']","13129a6f":"df.at[2357, 'dominio'] = 'Jogos Familiares'\ndf.at[2357, 'dominio']","9625b7d1":"df.at[2388, 'dominio'] = 'Jogos Familiares'\ndf.at[2388, 'dominio']","39cb0729":"df[df['dominio'].isnull()]","17fa9ff9":"sns.countplot(y = 'dominio', data = df);","27918bc9":"sns.boxplot(x='dominio', y = 'notaRank', data = df);","246124be":"df.isnull().sum()","eeea9a90":"df[df['mecanicas'].isnull()]","955d1344":"df.at[1093, 'mecanicas'] = 'Rolagem de Dados'\ndf.at[1093, 'mecanicas']","6abb4664":"df.at[1235, 'mecanicas'] = 'Gest\u00e3o de M\u00e3o'\ndf.at[1235, 'mecanicas']","b4570f66":"df.at[2317, 'mecanicas'] = 'Force sua sorte'\ndf.at[2317, 'mecanicas']","f95bc4b7":"df.at[2347, 'mecanicas'] = 'Movimento de \u00c1rea,Rolagem de Dados,Ordem de Fases Vari\u00e1vel'\ndf.at[2347, 'mecanicas']","26c3f105":"df.at[2347, 'designer'] = 'S\u00e9rgio Halaban,Andr\u00e9 Zatz'\ndf.at[2347, 'designer']","dfa2aaf0":"df.at[2513, 'mecanicas'] = 'Force sua sorte,Colecionar Componentes,Toma essa'\ndf.at[2513, 'mecanicas']","d1c00e87":"df_ludo = df.copy()","4413bdff":"df_ludo.drop(2370, inplace = True)","65d967ad":"df_ludo[df_ludo['mecanicas'].isnull()]","c0e33d34":"df_ludo = df_ludo.reset_index(drop=True)","f5ca346f":"df_ludo.isnull().sum()","5beb06f4":"# Games with no artist AND no designer info\ndf_ludo[df_ludo['artist'].isnull() & df_ludo['designer'].isnull()]","519d5727":"df_ludo['designer'] = np.where(df_ludo['artist'].isnull() & df_ludo['designer'].isnull(),\n                               'No info',\n                               df_ludo['designer'])\n\ndf_ludo['artist'] = np.where(df_ludo['designer'] == 'No info',\n                               'No info',\n                               df_ludo['artist'])","a56e018d":"df_ludo.isnull().sum()","00845f36":"# Games with no artist AND WITH designer info\ndf_ludo[df_ludo['artist'].isnull() & df_ludo['designer'].notnull()]","c3eba762":"df_ludo['artist'] = np.where(df_ludo['artist'].isnull() & df_ludo['designer'].notnull(),\n                               'Missing artist',\n                               df_ludo['artist'])","5c343f57":"# Games WITH artist AND no designer info\ndf_ludo[df_ludo['artist'].notnull() & df_ludo['designer'].isnull()]","a06808ce":"df_ludo['designer'] = np.where(df_ludo['artist'].notnull() & df_ludo['designer'].isnull(),\n                               'Missing designer',\n                               df_ludo['designer'])","e4ff2f82":"df_ludo.isnull().sum()","31d82b15":"def uniques(feature):\n    '''\n    Takes a string 'feature' and returns a set of unique\n    features in the entire df.\n    '''\n    unique_feat = set()\n    for i in df_ludo[feature]:\n        feats = set(i.split(','))\n        unique_feat.update(feats)\n\n    print('Number of unique '+feature+':' ,len(unique_feat))\n    return unique_feat","93e2d397":"unique_designers = uniques('designer')","86281e68":"unique_artists = uniques('artist')","e9849d8a":"unique_mecanicas = uniques('mecanicas')","7649b079":"def make_dist(df, feature):\n    '''\n    Function to plot a histogram of the distribution of 'feature' within 'df'.\n    '''\n    # Check distribution of feature:\n    mean_feat = df[feature].mean()\n    num_of_values = len(df)\n\n    fig = px.histogram(df, x=feature,\n                       title='Mean value of ' +feature+ ': ' +str(round(mean_feat,2))+\n                           ' - (with '+str(num_of_values)+' games)',\n                       opacity = 0.6)\n\n    fig.show()","e284ce9e":"make_dist(df_ludo.loc[df_ludo['mecanicas'].str.contains('Cooperativo')], 'media')","1e09844f":"count_mecanicas = {}\nfor mec in unique_mecanicas:\n    count_mecanicas[mec] = len(df_ludo.loc[df_ludo['mecanicas'].str.contains(mec)])","132ab1e7":"count_mecanicas","4d60f5a1":"mec_df = pd.DataFrame(count_mecanicas.items(), columns=['mecanica', 'games_count'])\n# Sorting\nmec_df = mec_df.sort_values(by=['games_count'], ascending = False)","d9ce47ae":"plt.figure(figsize=(10,20))\nsns.barplot(x = 'games_count', y = 'mecanica', data = mec_df);","e8b3d0a0":"# Define a function for this\ndef plot_uniques(df, unique_values, feature, max_plot=20):\n    '''\n    Plots a horizonatl bar plot for the value count of unique features.\n    Returns a dataframe with two columns: [feature, games_count]\n    This second column counts the number of games containing that feature.\n    \n    '''\n    count_feat = {}\n    for val in unique_values:\n        count_feat[val] = len(df.loc[df[feature].str.match(val)])\n    \n    feat_df = pd.DataFrame(count_feat.items(), columns=[feature, 'games_count'])\n    feat_df = feat_df.sort_values(by=['games_count'], ascending = False)\n    \n    plt.figure(figsize=(10,10))\n    sns.barplot(x = 'games_count', y = feature, data = feat_df.head(max_plot))\n    \n    return feat_df","09836b2a":"designer_df = plot_uniques(df_ludo, unique_designers, 'designer', max_plot=20)","89e1740d":"artist_df = plot_uniques(df_ludo, unique_artists, 'artist', max_plot=20)","92b18e18":"def common_member(a, b):\n    '''Check if list a and list b have at least one common member'''\n    return not set(a).isdisjoint(b)","ef103d20":"def shares_feature_id_iter(df, idx, feature):\n    '''Returns a string with indexes of games having\n       at least one shared feature separated by commas'''\n    print(idx)\n    shared = ''\n    feat_list = df.iloc[idx][feature]\n    feat_list = list( feat_list.split(',') )\n    for i, row in df.iterrows():\n        if i == idx:\n            continue\n        if common_member(feat_list, list(row[feature].split(','))):\n            shared += str(i)\n            shared += ','\n    \n    print('Shared ', feature, ' - Done index ',idx)\n    return shared[:-1]\n\ndef shared_feat_id_series_iter(df, feature):\n    return pd.Series([\n        shares_feature_id_iter(df, idx, feature) for idx in df.index\n    ])","421f9a34":"df_ludo['shared_artists'] = shared_feat_id_series_iter(df_ludo, 'artist')","368112f4":"df_ludo.tail()","6b94a631":"df_ludo['shared_designers'] = shared_feat_id_series_iter(df_ludo, 'designer')","69974c07":"df_ludo.tail()","0c453d79":"df_ludo[(df_ludo['artist']=='No info') | (df_ludo['artist']=='Missing artist')]","4128d15e":"df_ludo[(df_ludo['artist']=='No info') | (df_ludo['artist']=='Missing artist') | (df_ludo['shared_artists']=='')]","33e5a811":"# Df for relevant info on shared artists\ndf_sa = df_ludo[((df_ludo['artist']=='No info') \n        | (df_ludo['artist']=='Missing artist') \n        | (df_ludo['shared_artists']=='')) == False]","0ba7ef47":"df_sa.head()","ddc9f6a1":"edges_art = []\n\nfor i, row in df_sa.iterrows():\n    for shared in list( row['shared_artists'].split(',') ):    \n        if int(shared) > i:\n            artists = list(set(row['artist'].split(',')).intersection(df_ludo.iloc[int(shared)]['artist'].split(',')))\n            artists = ','.join([str(item) for item in artists])\n            temp_dict = {'data': {'id':str(i)+'-'+shared, 'source': str(i), 'target':str(shared), 'shared':artists}}\n            edges_art.append(temp_dict)","91bcccc0":"len(edges_art)","996e4130":"# Using only games that have an edge with at least one game (node)\nnodes_art = [\n    {\n        \"data\": {\n            \"id\": str(i),\n            \"label\": str(i),\n            \"title\": row['title'],\n            \"year\": row['year'],\n            \"notarank\": row['notaRank'],\n            \"media\": row['media'],\n            \"age\": row['age'],\n            \"players\": row['numOfPlayers'],\n            \"time\": row['timeOfPlay'],\n            \"dominio\": row['dominio'],\n            \"img-src\": row['imagem'],\n            \"edges\": list( row['shared_artists'].split(',') ),\n            \"conns\": len(list( row['shared_artists'].split(',') )),\n            \"node_size\": np.sqrt(len(list( row['shared_artists'].split(',') )))\n        },\n        \"selectable\": True,\n        \"grabbable\": False,\n    }\n    for i, row in df_sa.iterrows()\n]","8d6be658":"df_ludo['games_with_sa'] = df_ludo['shared_artists'].apply(lambda s: len(s.split(',')) if s!= '' else 0)","b8a0f511":"df_ludo.head()","60454ecf":"sns.histplot(data = df_ludo, x='games_with_sa');","319e3bae":"df_sa['games_with_sa'] = df_sa['shared_artists'].apply(lambda s: len(s.split(',')) if s!= '' else 0)","a8fa2e84":"df_sa.head()","a55bc720":"sns.histplot(data = df_sa, x='games_with_sa',\n             bins = 30);","06e77fa9":"plt.figure(figsize=(10,10))\nsns.displot(data = df_sa, x='games_with_sa',\n             kind='kde',\n            height = 6)\nplt.title(\"Games with at least one shared artists\");","0638bde0":"# df_sa[df_sa['games_with_sa']>100]","77f6c495":"df_sa['games_with_sa'].describe()","5ad57d10":"Finally, games with no designer:","d30b95df":"Now, on to the final multiclassified domains:","39588be8":"Let's see some numbers for this distribution:","ed676985":"Since we are peeking into this game, we notice it has missing `designer` entry. However, the designers are listed in BGG, so we can include these:","0d150201":"Now, let's inspect missing values:","482d980f":"We test out this function to see the distribution of `media` in all games with a `cooperativo` mechanics:","d4cae454":"So, this collection will also be in this class:","1efffaa0":"What game has '1000 in' of time of play?","86913131":"Now, I would like to know how is the distribution of, say, the average score given by users (the `media` column) for games with a specific mechanics.\n\nFor this, we can write another helper function:","8f6a824f":"Next, we check for games with no artist information:","0aa4a413":"We can use `np.where` to assign the string 'No info' to the designer feature for every game without both designer and artist data:","52e0a7c6":"First thing that stands out here is `War`. It has been around long enough and played enough for us to consider it a family game. Since it has the same age recommendation as Catan and this awesome grandparent of modern board games has a complexity ranking of 2.32\/5 (see [BGG](https:\/\/boardgamegeek.com\/boardgame\/13\/catan)), we will set both as family games.","e2258be0":"Next: **Jogo dos conquistadores**.\n\nAcoording to [BGG](https:\/\/boardgamegeek.com\/boardgame\/24069\/jogo-dos-conquistadores), the mechanics are:\n* Area Movement\n* Dice Rolling\n* Variable Phase Order\n\nWhich have equivalents in Ludopedia as:\n* Movimento de \u00c1rea\n* Rolagem de Dados\n* Ordem de Fases Vari\u00e1vel\n\nSo, we set all this in the dataframe.","79c04b4d":"Do a simple simple histogram to check the distribution of `timeOfPlay`:","d3c57b64":"For top 20 artists:","84df1831":"# Reading and cleaning the data","67d2f8b7":"## `numOfPlayers` column\n\nAll elements of this column have a `jogadores` string at the end. Once again, we can get rid of this:","c826f07f":"In this project we will go through our collected data from [Ludopedia](https:\/\/ludopedia.com.br\/) ranking of boardgames. We'll perform basic data cleaning and EDA.\n\nColumns in our dataset:\n* 'age': recommended age to play the game\n* 'artist': Names of artists that worked on the game (separated by commas)\n* 'designer': Names of game designers (separated by commas)\n* 'dominio': Domain of the game (Expert, Family or Child)\n* 'imagem': URL to an image of the game cover\n* 'mecanicas': List of mechanics involved in the game\n* 'media': mean score given by users\n* 'notaRank': score given by website (Bayesian average)\n* 'notas': Amount of users giving score to game\n* 'numOfPlayers': Number of players that can play the game\n* 'position': Position in ranking\n* 'timeOfPlay': Estimated time of single play through\n* 'title': title of game\n* 'year': year of release","0aef9835":"Now, to get some general info:","fe4d37bd":"This is very messy. The one bin with over 300 games sharing artists corresponds to our games with missing artists. We can use our `df_sa` to do this task and avoid these games:","e674e93f":"Finally! To close this column cleaning, we can create a countplot for all three domains:","7e29ed70":"Next: **Jenga Tetris**. Again, we look to [BGG](https:\/\/boardgamegeek.com\/boardgame\/145259\/jenga-tetris) for any clues. In there, we find the mechanics to be `Push Your Luck`, which actually has a very nice correspondent in Ludopedia (`Force sua sorte`).","4c85c193":"`Toru` is a very fast paced party game, so we'll classify it as a family game also:","9d249d57":"Next, we have **Timeline: Discoveries**. According to the game description:\n> Players take turns placing a card from their hand in a row on the table.\n\nSo, we will set its mechanics as `Gest\u00e3o de M\u00e3o`, which seems a good fit.","80c06dbf":"## Sorting by `position` column","59a7536c":"We will skip to the last game for now (reasons will become clear later). The last game in this list is **Pick Up Sticks**. In [BGG](https:\/\/boardgamegeek.com\/boardgame\/6424\/pick-sticks), the listed mechanics are\n* Physical Removal\n* Push Your Luck\n* Set Collection\n* Take That\n\nWhich have equivalents in Ludopedia as:\n* -\n* Force sua sorte\n* Colecionar Componentes\n* Toma essa\n\nSo, we will use these in our dataframe:","a17bb1af":"## `age` column\n\n**Question**: do all entries in the `age` column have a `+` string at the end?\n\nTo answer this, we can count the number of elements in this column conatining the string `+`:","b00b8b34":"A quick way of dealing with both types of entries (be it only a single number or a range), is to define `minPlayers` as the first character in the `numOfPlayers` entry and `maxPlayers` as the remaining string after the characetr `a` (if there is a character `s`).","fd25daf3":"Check if everything worked out:","35c84a2a":"Let's check for missing values of the `dominio` feature:","0bab86ca":"The first game in ths list is a collection of **Carson City** and its expansions. The base game is classified as `expert`, as can be seen here:","adf05a02":"Dealing with multiple entries in `dominio`:","bf1ab417":"# Relations between games (getting into graph building)\n\nWe are now going to see how these games relate to each other by sharing features. For instance, we would like to see how artists work for various games and what kind of game they collaborate with the most.\n\nLet's first build out our helper functions:","0533f998":"Let's check if we are done:","38ae8cc6":"For these games, we will fill the  missing values for `artist` with the string 'Missing artist'.","4761897a":"Great! Now to inspect further missing values:","9e9fa05f":"With these new columns, we can create an `edges` object in the format required by [Dash Cytoscape](https:\/\/dash.plotly.com\/cytoscape).","463c672d":"So: yes, they all do! Let's get rid of that and all white spaces:","b6f7c338":"The final game in this list is trickier. The game **Quilombolas \u2013 O Ref\u00fagio dos Palmares** is an awesome looking game (not yet fully released). It has an important historical theme and some interesting combinations of mechanics. We will choose to set it as an expert game for the depth of its historical theme and dynamic rules.","6e943571":"Same as before, we will use the string 'Missing designer'.","4789cd4e":"Great! Let's, now, deal with the `Jogos Infantis,Jogos Familiares` case:","883848f8":"And we need some nodes for our graph in cytoscape:","8d53719e":"Finally, all games are classified in one of three possible **domains**:","2ae811b8":"Again, going to [BGG](https:\/\/boardgamegeek.com\/boardgame\/217362\/frogriders), we choose `Frogriders` to have be a family game:","b3eab631":"What else is missing:","6ea69af4":"## Shared artists\n\nWe can inspect how many games don't share artists with other games:","df3896a1":"Following this, we have `Stratego (Revised Edition)`. Let's find the unrevised edition and get information from there and use it:","045050aa":"## `mecanicas` column","bf5fd246":"Looking good, but we still need to convert these to numeric:","8e118699":"There are 306 games with no shared artists.\n\nBesides these, there are games with the entries **No info** or **Missing artist**. Let's check how many of these we have:","6a319c85":"## Unique values\n\nGreat! Now we can explore some numbers.\n\nIt is not straightforward to see the number of unique artists (or designers or mechanics...). But we can use a helper function to do so:","41362bd1":"**NOTE: some games have `(Uncredited)` as designer entry.**\n\nFirst off, we can explore games with both artist and designer information missing:","4a04fd42":"The game **O Bom do Videogame** is another national entry with a complexity rating of 2.5\/5 at [BGG](https:\/\/boardgamegeek.com\/boardgame\/234432\/o-bom-do-videogame). We will set it as a family game also:","279a16c5":"This game is classified as `Family game` in [BGG](https:\/\/boardgamegeek.com\/boardgame\/382\/heimlich-co). So, let's change the entry:","71300b3c":"Doing a similar case to case analysis, we can look into the missing `mecanicas` entry:","a153eda3":"We can do a simple bar plot to see how many games we have per age recommendation:","09935ae0":"Since we are looking at this column, we can do a quick **countplot** to check the number of released games per year:","d628d15b":"## `dominio` column\n\nWe'll start by checking the distribution of `notaRank` for all unique `dominio`s:","2b2d3739":"On to the next cases:","32ce6eea":"## Visualizing shared artists\n\nNow that we have a list (not actually a `python list object`) of games that shared artists with each game, we can plot a distribution of the number of games with shared artists.\n\nTo do so, we can create a new column to store the number of games with shared artists by using a `len()` call on a list created from the 'shared_artists' column:","90986434":"Next, we have **Futebol de bot\u00e3o**. Most brazilian kids know (and love) this game. It is definetly challenging and tons of fun to play (commonly with your dad or grandad). So, we'll choose to set its domain as a family game:","4e398e20":"Basically, the function loops through the `feature` column and updates a set containing all entries within each row. As sets don't allow for duplicates, we end up with a iterable containing only unique items of that feature. The function returns this set and prints the number of items in it (using `len()`).","53e19711":"# EDA","75ec7017":"Now we can use these functions to create a `shared_artist` column with the indexes of games that share at least one artist with each game in a given row. **This will take some time.**","8f35f5a7":"From this column we can create two different columns: `minPlayers` and `maxPlayers`.\n\nFirst let's check if all entries have the same format:","873b3c19":"To better visualize this, we can create a dataframe object and plot it with seaborn as a barplot:","61f92302":"So, the remaining dataframe that is of interest for analizing the shared artists can be called by:","443ae07c":"All 4 of these will be classified as `Infantis` as they are very kid friendly with a low complexity rating on BGG.","0b95f8bf":"We can get a similar plot for the designers, however, since there are 1526 unique designers, we can filter the top ones. Since we can do the same for artists, let's create a helper function for the process.","036b9945":"Some columns have a range of players while others only allow for a fixed number of players. We can count how many of each we have in our data:","7ba39621":"After entering the 2000's, there was a huge boom in boardgame releases with a peak in 2015.","0a83397d":"Some other interesting data we can explore is the count of how many games contain each unique mechanics (`mecanica`).\n\nWe can create a dictionary to count the appereance of each unique mechanics in the dataframe:","0841bceb":"We can reorder the columns just to get a better visual of the data. Namely, I would like to see the `position` and `title` columns up front.","c625b160":"Reset the indexes:","4ea2e0be":"The first game is **Rhino Hero: Super Battle**. In [BGG](https:\/\/boardgamegeek.com\/boardgame\/218333\/rhino-hero-super-battle), there is a list of mechanics for this game. We can see the available mechanics in the official Ludopedia [mechanics list](https:\/\/www.ludopedia.com.br\/mecanicas) and see waht we can use:\n\nAcoording to BGG, the mechanics are:\n* Dice Rolling\n* Single Loser Game\n* Stacking and Balancing\n\nThere is only one corresponding mechanic in Ludopedia:\n* Rolagem de Dados\n\nSo, we will use this in our dataframe:","4b8a5d75":"Since `Afluentes` has am age recommendation of 12, we will set it as a family game:","9886fa91":"And back to our boxplot for distributions of `notaRank`:","68fb77c1":"## `year` column\n\nThis one has all years bewteen parenthesis. We can just use a `strip` method to remove them and later convert to numeric:","bfcd124b":"## `artist` and `designer` columns","e124d424":"Well, it appears we have **mixed** entries here. There are only three possible domains for a game in the original site:\n* Expert\n* Family\n* For children.\n\nLet's try to avoid these mixed categories by doing a case to case analysis.\n\nFirst off, we can count the number of games in each possible entry in the `dominio` column:","8742df03":"From the game's (The 7th Continent) description:\n> Unlike most board games, it will take you many, MANY hours of exploring and searching the seventh continent until you eventually discover how to remove the curse(s)...or die trying.\nThe 7th Continent features an easy saving system so that you can stop playing at any time and resume your adventure later on, just like in a video game!","6d5eada9":"Next, we have **Lotus**. Following [BGG](https:\/\/boardgamegeek.com\/boardgame\/198525\/lotus), we'll classifiy it as a family game:","a5a6220a":"## `timeOfPlay` column\n\nThese entries are all measured in **min**. We can remove this substring and convert everything to numeric:","153feccf":"## `position` column\n\nThe `position` column has a '\u00ba' character that has no purpose in this context, so we can remove it and convert its tyoe to numeric to clean this column:","4680e7c3":"Also, let's check distribution of scores by age:","f94bdec9":"Thanks for reading! Stay safe all!","e790bfe4":"The other game in this list is a national production (with no BGG for more info). We will set it as a `Jogos Infantis` class, as it is recommended for ages 5+:","31e51817":"There are 458 games within this filtered df. Let's get all conditions out in one call:","66e75977":"Ok, so the game we skipped: `Clube Grow` is a collection of classic games (according to the description: Mico, Sobe-Desce, Ludo, Trilha, Resta 1, Damas Chinesas, Mini Can-can, Mega Trunfo e Gam\u00e3o). Because it is such a collection and has three missing features, we will drop it from our dataframe. First we will create a copy to keep all games, then we will use the new copy to start dropping and making more changes:"}}