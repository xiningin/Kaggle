{"cell_type":{"475b0280":"code","4a30cd5c":"code","8237f641":"code","baa9d62d":"code","e39df1fe":"code","2ed30fc3":"code","b7c9a48e":"code","a4f27bdb":"code","eac3a28a":"code","60b46049":"code","dfda8058":"code","d55084c6":"code","d8fb16ce":"code","ff1ea71b":"code","ffabe88c":"code","10af6515":"code","02caa4fa":"code","946ffbb6":"code","37e18f1f":"code","20efc82a":"code","442280bf":"code","33087d8f":"code","6a5d6ab4":"code","4564e23c":"code","cc5075f7":"code","73c26afc":"code","cd8494c7":"code","4b2760a3":"code","fb794f96":"code","d74853a2":"code","1cc5c171":"code","d996cfc7":"code","579a7798":"code","585d4cd7":"code","520ba239":"code","988c05ab":"code","b9303a06":"code","1f4327b2":"code","967f0756":"code","7c74dc61":"code","18a01f7b":"code","64d4fd73":"code","a9df03b6":"code","5bfe9295":"code","537f9c55":"code","c8341405":"code","a39e1136":"code","6d7de824":"code","1fb64fdc":"code","bf914dab":"code","ad237fba":"code","99aed1a2":"code","32d7ef91":"code","2099cd71":"code","a5724a2b":"code","ebe50a4a":"code","2326290c":"code","9fbec22b":"code","851aa198":"code","72ff0431":"code","1571e9da":"code","722a3c37":"code","b0e4ffbb":"code","916a7fb0":"code","af9e9f0c":"code","eaf6e4aa":"code","7ab769f3":"code","0f19ebd0":"code","3762b175":"code","9e1e4dce":"code","7eb58f83":"code","ef4d0ef5":"code","2bb1d3bb":"code","c836b817":"code","5f4d1cd8":"code","a13396f4":"code","a48fca4d":"code","a967c0ba":"code","49b97b82":"code","064918ac":"code","eb2c4f30":"code","98c3d20a":"code","7c23c526":"code","cd162043":"code","34a8d747":"code","73f2a998":"code","ee7f686d":"code","bf60b840":"code","151517ce":"code","c8e16388":"code","902beec1":"code","1cf92871":"code","d4b94ee7":"code","8a46df6a":"code","46326005":"code","786780ff":"code","2abfaa2a":"code","78cf6c6d":"code","485b0662":"code","95e5aff7":"code","93a34751":"code","e717f2a6":"markdown","362ed1f3":"markdown","390442c9":"markdown","dcbc76b5":"markdown","05a661b3":"markdown","11fd5d14":"markdown","eb12bc03":"markdown"},"source":{"475b0280":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4a30cd5c":"#path of file for train\ntrain=pd.read_csv(\"..\/input\/titanic\/train.csv\")\n#path of file for test\ntest=pd.read_csv(\"..\/input\/titanic\/test.csv\")","8237f641":"train.head()","baa9d62d":"test.head()","e39df1fe":"train.isnull().sum()","2ed30fc3":"test.isnull().sum()","b7c9a48e":"train.shape","a4f27bdb":"train.drop(train[[\"Cabin\"]],axis=\"columns\",inplace=True)\ntrain","eac3a28a":"test.drop(test[[\"Cabin\"]],axis=\"columns\",inplace=True)\ntest","60b46049":"train.dtypes","dfda8058":"train[\"Embarked\"].unique()","d55084c6":"train[\"Embarked\"].mode()","d8fb16ce":"train[\"Embarked\"].fillna(value=\"S\",inplace=True)","ff1ea71b":"train[\"Embarked\"].isnull().sum()","ffabe88c":"test[\"Embarked\"].isnull().sum()","10af6515":"train[\"Age\"].mean()","02caa4fa":"train[\"Age\"].fillna(value=29.6991,inplace=True)","946ffbb6":"test[\"Age\"].isnull().sum()","37e18f1f":"test[\"Age\"].mean()","20efc82a":"test[\"Age\"].fillna(value=30.27,inplace=True)","442280bf":"train.isnull().sum()","33087d8f":"test.isnull().sum()","6a5d6ab4":"test.Fare","4564e23c":"test[\"Fare\"].mean()","cc5075f7":"test[\"Fare\"].fillna(value=35.62,inplace=True)","73c26afc":"test[\"Fare\"].isnull().sum()","cd8494c7":"import matplotlib.pyplot as plt\nimport seaborn as sns","4b2760a3":"x=train[\"Survived\"].value_counts()\nlabel=[\"Not Survived(0)\",\"Survived(1)\"]\ncolors=[\"#F97306\",\"#FFA500\"]\nplt.figure(figsize=(12,6))\nplt.pie(x,labels=label,autopct=\"%1.1f%%\",colors=colors)\nplt.show()","fb794f96":"gender=train[\"Sex\"].value_counts()\nlabel=[\"Male\",\"Female\"]\nplt.figure(figsize=(12,6))\nplt.pie(gender,labels=label,autopct=\"%1.1f%%\")\nplt.show()","d74853a2":"classes=train[\"Pclass\"].value_counts()\nlabel=[\"1st\",\"2nd\",\"3rd\"]\nplt.pie(classes,labels=label,autopct=\"%1.1f%%\")\nplt.show()","1cc5c171":"Pclass=[\"class1\",\"class2\",\"class3\"]\nsns.countplot(data=train,x=\"Pclass\",hue=\"Survived\")\nplt.gcf().set_size_inches(15, 8)\nplt.xticks(ticks=[0,1,2],labels=Pclass)\nplt.legend([\"No of passengers not survived\",\"No of passengers survived\"])\nplt.show()\n","d996cfc7":"Sex=[\"Male\",\"Female\"]\nsns.countplot(data=train,x=\"Sex\",hue=\"Survived\")\nplt.show()","579a7798":"Embarked=[\"Cherbourg\", \"Queenstown\", \"Southampton\"]\nsns.countplot(data=train,x=\"Embarked\",hue=\"Survived\")\nplt.xticks(ticks=[0,1,2],labels=Embarked)\nplt.show()","585d4cd7":"\n#path of file for train\ntrain=pd.read_csv(\"..\/input\/titanic\/train.csv\")\n#path of file for test\ntest=pd.read_csv(\"..\/input\/titanic\/test.csv\")","520ba239":"train.isnull().sum()","988c05ab":"train.shape","b9303a06":"train.drop(train[[\"Cabin\"]],axis=\"columns\",inplace=True)","1f4327b2":"test.isnull().sum()","967f0756":"test.drop(test[[\"Cabin\"]],axis=\"columns\",inplace=True)","7c74dc61":"import re\ndef split_it(data):\n    result = re.search('^.*,(.*)\\.\\s.*$', data)\n    if result.group(1) not in [' Mr', ' Miss', ' Mrs', ' Master']:\n        return ' Misc'\n    else:\n        return result.group(1)\n\ntrain['Title'] = train['Name'].apply(split_it)","18a01f7b":"train","64d4fd73":"train.drop(train[[\"Name\"]],axis=\"columns\",inplace=True)","a9df03b6":"test['Title'] = test['Name'].apply(split_it)","5bfe9295":"test.drop(test[[\"Name\"]],axis=\"columns\",inplace=True)","537f9c55":"train","c8341405":"train[\"Sex\"].replace({\"male\":0,\"female\":1},inplace=True)","a39e1136":"test[\"Sex\"].replace({\"male\":0,\"female\":1},inplace=True)","6d7de824":"train[\"Embarked\"].replace({\"S\":0,\"C\":1,\"Q\":2},inplace=True)","1fb64fdc":"test[\"Embarked\"].replace({\"S\":0,\"C\":1,\"Q\":2},inplace=True)","bf914dab":"train","ad237fba":"train.drop(\"Ticket\",axis=\"columns\",inplace=True)","99aed1a2":"test.drop(\"Ticket\",axis=\"columns\",inplace=True)","32d7ef91":"train","2099cd71":"train[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"),inplace=True)","a5724a2b":"test[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"),inplace=True)","ebe50a4a":"train.isnull().sum()","2326290c":"train[\"Embarked\"].max()","9fbec22b":"train[\"Embarked\"].fillna(value=2,inplace=True)","851aa198":"test.isnull().sum()","72ff0431":"test.drop(\"Fare\",axis=\"columns\",inplace=True)","1571e9da":"train.drop(\"Fare\",axis=\"columns\",inplace=True)","722a3c37":"test.drop(\"Title\",axis=\"columns\",inplace=True)","b0e4ffbb":"train.drop(\"Title\",axis=\"columns\",inplace=True)","916a7fb0":"train","af9e9f0c":"test","eaf6e4aa":"#spliting train and test\nfrom sklearn.model_selection import train_test_split","7ab769f3":"\nX=train.drop(\"Survived\",axis=\"columns\")","0f19ebd0":"X","3762b175":"y=train[\"Survived\"]","9e1e4dce":"y","7eb58f83":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)\n","ef4d0ef5":"print(len(X_train),len(y_train),len(X_test),len(y_test))","2bb1d3bb":"from sklearn.linear_model import LogisticRegression","c836b817":"model=LogisticRegression(solver='liblinear')","5f4d1cd8":"model.fit(X_train,y_train)","a13396f4":"prediction=model.predict(X_test)","a48fca4d":"prediction\n","a967c0ba":"model.score(X_test,y_test)","49b97b82":"from sklearn.ensemble import RandomForestClassifier","064918ac":"model_2=RandomForestClassifier()","eb2c4f30":"model_2.fit(X_train,y_train)","98c3d20a":"prediction_2=model_2.predict(X_test)","7c23c526":"model_2.score(X_test,y_test)","cd162043":"from sklearn.tree import DecisionTreeClassifier","34a8d747":"model_3= DecisionTreeClassifier()","73f2a998":"model_3.fit(X_train,y_train)","ee7f686d":"prediction_3=model_3.predict(X_test)","bf60b840":"model_3.score(X_test,y_test)","151517ce":"from sklearn.neighbors import KNeighborsClassifier","c8e16388":"model_4=KNeighborsClassifier()","902beec1":"model_4.fit(X_train,y_train)","1cf92871":"prediction_4=model_4.predict(X_test)","d4b94ee7":"model_4.score(X_test,y_test)","8a46df6a":"model_2.fit(X,y)","46326005":"final_predict=model_2.predict(test)","786780ff":"final_predict.sum()","2abfaa2a":"gender_submission=pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","78cf6c6d":"gender_submission","485b0662":"submission=pd.DataFrame({\"PassengerId\":gender_submission[\"PassengerId\"],\"Survived\":final_predict})","95e5aff7":"submission","93a34751":"submission.to_csv(\"submission.csv\",index=False)","e717f2a6":"test.drop(\"PassengerId\",axis=\"columns\",inplace=True)","362ed1f3":"# decision tree","390442c9":"# LOGISTIC REGRESSION","dcbc76b5":"# random forest","05a661b3":"# K Nearest Neighbor","11fd5d14":"# Final model=RandomForest","eb12bc03":"# MACHINE LEARNING"}}