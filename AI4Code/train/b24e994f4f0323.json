{"cell_type":{"70524092":"code","c6814b7f":"code","c7974649":"code","4e2a1cc4":"code","6aa7fd8c":"code","6b5432fb":"code","335f2d88":"code","31894577":"code","3b1c3e25":"code","fd99bf08":"code","d0a7cb33":"code","756c6724":"code","7ebaee81":"code","1674aa02":"code","712bbf5c":"code","4cd29f39":"code","f8f0680c":"code","81791ad2":"code","751de521":"code","c1c1855c":"code","fdc31546":"code","244da5a3":"code","47196b2d":"code","a0021f12":"code","cb76119f":"code","ec7d2a1a":"code","ec50d0b8":"code","634d0ae1":"code","db2269ce":"code","69c8a03b":"code","816f74e2":"code","0db108a1":"code","d7499435":"code","28990e14":"code","b4da0905":"code","d237402a":"code","ae3fbb6e":"code","2ee1be39":"code","c6612ba0":"code","65b8850e":"code","857e6a3a":"code","d45e8cd6":"code","96e8fbf3":"code","50000376":"code","453bc11a":"code","9cfac126":"code","6699f2f3":"code","f94838f5":"code","510bba12":"code","8f205348":"code","3f4e2cc5":"code","2dd70f79":"code","318b5b75":"code","340e377a":"markdown","2c0f4e32":"markdown","1e508142":"markdown","f019a3b8":"markdown","002587e7":"markdown","328cb259":"markdown","68df523c":"markdown","025cc989":"markdown","b8cdc468":"markdown","cb313569":"markdown","6ef59701":"markdown","6d4869e4":"markdown","8f4a524f":"markdown","4b020916":"markdown","8498a2e7":"markdown","2a5efe97":"markdown","7b7941c9":"markdown","d18b4a91":"markdown","6aa3e0fe":"markdown","0678ac63":"markdown"},"source":{"70524092":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\n\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nprint(os.listdir(\"..\/input\"))","c6814b7f":"pd.set_option('display.max_columns',None)","c7974649":"US_comments = pd.read_csv('..\/input\/youtube\/UScomments.csv', error_bad_lines=False)","4e2a1cc4":"US_videos = pd.read_csv('..\/input\/youtube\/USvideos.csv', error_bad_lines=False)","6aa7fd8c":"US_videos.head()","6b5432fb":"US_videos.shape","335f2d88":"US_videos.nunique()","31894577":"US_videos.info()","3b1c3e25":"US_videos.head()","fd99bf08":"US_comments.head()","d0a7cb33":"US_comments.shape","756c6724":"US_comments.isnull().sum()","7ebaee81":"US_comments.dropna(inplace=True)","1674aa02":"US_comments.isnull().sum()","712bbf5c":"US_comments.shape","4cd29f39":"US_comments.nunique()","f8f0680c":"US_comments.info()","81791ad2":"US_comments.drop(41587, inplace=True)","751de521":"US_comments = US_comments.reset_index().drop('index',axis=1)","c1c1855c":"US_comments.likes = US_comments.likes.astype(int)\nUS_comments.replies = US_comments.replies.astype(int)","fdc31546":"US_comments.head()","244da5a3":"US_comments['comment_text'] = US_comments['comment_text'].str.replace(\"[^a-zA-Z#]\", \" \")","47196b2d":"US_comments['comment_text'] = US_comments['comment_text'].apply(lambda x: ' '.join([w for w in x.split() if len(w)>3]))","a0021f12":"US_comments['comment_text'] = US_comments['comment_text'].apply(lambda x:x.lower())","cb76119f":"tokenized_tweet = US_comments['comment_text'].apply(lambda x: x.split())\ntokenized_tweet.head()","ec7d2a1a":"from nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import stopwords","ec50d0b8":"wnl = WordNetLemmatizer()","634d0ae1":"tokenized_tweet.apply(lambda x: [wnl.lemmatize(i) for i in x if i not in set(stopwords.words('english'))]) \ntokenized_tweet.head()","db2269ce":"for i in range(len(tokenized_tweet)):\n    tokenized_tweet[i] = ' '.join(tokenized_tweet[i])","69c8a03b":"US_comments['comment_text'] = tokenized_tweet","816f74e2":"import nltk\nnltk.download('vader_lexicon')","0db108a1":"from nltk.sentiment.vader import SentimentIntensityAnalyzer\nsia = SentimentIntensityAnalyzer()","d7499435":"US_comments['Sentiment Scores'] = US_comments['comment_text'].apply(lambda x:sia.polarity_scores(x)['compound'])","28990e14":"US_comments.head()","b4da0905":"US_comments['Sentiment'] = US_comments['Sentiment Scores'].apply(lambda s : 'Positive' if s > 0 else ('Neutral' if s == 0 else 'Negative'))","d237402a":"US_comments.head()","ae3fbb6e":"US_comments.Sentiment.value_counts()","2ee1be39":"videos = []\nfor i in range(0,US_comments.video_id.nunique()):\n    a = US_comments[(US_comments.video_id == US_comments.video_id.unique()[i]) & (US_comments.Sentiment == 'Positive')].count()[0]\n    b = US_comments[US_comments.video_id == US_comments.video_id.unique()[i]]['Sentiment'].value_counts().sum()\n    Percentage = (a\/b)*100\n    videos.append(round(Percentage,2))","c6612ba0":"Positivity = pd.DataFrame(videos,US_comments.video_id.unique()).reset_index()","65b8850e":"Positivity.columns = ['video_id','Positive Percentage']","857e6a3a":"Positivity.head()","d45e8cd6":"channels = []\nfor i in range(0,Positivity.video_id.nunique()):\n    channels.append(US_videos[US_videos.video_id == Positivity.video_id.unique()[i]]['channel_title'].unique()[0])","96e8fbf3":"Positivity['Channel'] = channels","50000376":"Positivity.head()","453bc11a":"Positivity[Positivity['Positive Percentage'] == Positivity['Positive Percentage'].max()]","9cfac126":"Positivity[Positivity['Positive Percentage'] == Positivity['Positive Percentage'].min()]","6699f2f3":"all_words = ' '.join([text for text in US_comments['comment_text']])\nfrom wordcloud import WordCloud\nwordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(all_words)\n\nplt.figure(figsize=(10, 7))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","f94838f5":"all_words_posi = ' '.join([text for text in US_comments['comment_text'][US_comments.Sentiment == 'Positive']])","510bba12":"wordcloud_posi = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(all_words_posi)\n\nplt.figure(figsize=(10, 7))\nplt.imshow(wordcloud_posi, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","8f205348":"all_words_nega = ' '.join([text for text in US_comments['comment_text'][US_comments.Sentiment == 'Negative']])","3f4e2cc5":"wordcloud_nega = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(all_words_nega)\n\nplt.figure(figsize=(10, 7))\nplt.imshow(wordcloud_nega, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","2dd70f79":"all_words_neu = ' '.join([text for text in US_comments['comment_text'][US_comments.Sentiment == 'Neutral']])","318b5b75":"wordcloud_neu = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(all_words_neu)\n\nplt.figure(figsize=(10, 7))\nplt.imshow(wordcloud_neu, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","340e377a":"## Let's do some analysis and Data Cleaning on both the datasets.","2c0f4e32":"## Removing Short Words.","1e508142":"## Changing the text to lower case.","f019a3b8":"## Classifying the Sentiment scores as Positive, Negative and Neutral","002587e7":"## So these are the videos and their channels whose comments are 100% Positive (Well, this might be less likely because NLTK is poor with sarcasmic comments but i can say that most of the comments are positive).","328cb259":"## Removing Punctuations, Numbers and Special Characters.","68df523c":"## Let's Contstruct a wordcloud of all the comments to see the most frequent comments.","025cc989":"## Now we will add the channel name of the videos which are their in our new dataset.","b8cdc468":"## Importing The Libaries","cb313569":"## Loading The Data","6ef59701":"## Lemmatization","6d4869e4":"## Let's Construct a Wordcloud of Positive Comments","8f4a524f":"## Making a dataframe of the videos with their Positive Percentages.","4b020916":"## Tokenization","8498a2e7":"## Let's Contsruct a Wordcloud of Neutral Comments.","2a5efe97":"## Now we will calculate the percentage of comments which are positive in all the videos.","7b7941c9":"## Let's Construct a Wordcloud of Negative Comments","d18b4a91":"## Setting The Sentiment Scores","6aa3e0fe":"## So these are the videos and their channels whose comments are 0% Positive (Means the comments are either Negative or Neutral. This stat is also less likely but as i said earlier, MOSTLY).","0678ac63":"## Let's do the Sentiment Analysis on the US Comments Dataset"}}