{"cell_type":{"ce39d54c":"code","4f160e2c":"code","c78cc92d":"code","9ea87cc8":"code","96eb89a7":"code","e9cbe57d":"code","b74774ad":"code","9d9d34a3":"code","754f0cdd":"markdown","526453bc":"markdown","6f016ab0":"markdown"},"source":{"ce39d54c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4f160e2c":"df = pd.read_json('..\/input\/whats-cooking-kernels-only\/train.json')\ndf.head()","c78cc92d":"df['ingredient_text'] = df['ingredients'].apply(lambda x: ' '.join([i.replace(' ','_') for i in x]))\ndf.head()","9ea87cc8":"df_train, df_test = train_test_split(df,stratify=df['cuisine'])","96eb89a7":"nb = BernoulliNB()\nle = LabelEncoder()\n\n#tv = TfidfVectorizer(max_features=500)\ncv = CountVectorizer()\n\nX_train = cv.fit_transform(df_train['ingredient_text'])\ny_train = le.fit_transform(df_train['cuisine'])\n\nnb.fit(X_train,y_train)\ny_train_pred = nb.predict(X_train)\n\nX_test = cv.transform(df_test['ingredient_text'])\n\ndf_test['pred'] = le.inverse_transform(nb.predict(X_test))\n\nprint(accuracy_score(y_train,y_train_pred))\nprint(classification_report(df_test['cuisine'],df_test['pred']))","e9cbe57d":"submission = pd.read_json('..\/input\/whats-cooking-kernels-only\/test.json')\nsubmission['ingredient_text'] = submission['ingredients'].apply(lambda x: ' '.join([i.replace(' ','_') for i in x]))\nsubmission.head()","b74774ad":"X_sub = cv.transform(submission['ingredient_text'])\n\ny_sub = nb.predict(X_sub)\n\nsubmission['cuisine'] = le.inverse_transform(y_sub)\nsubmission[['id','cuisine']].head()","9d9d34a3":"submission[['id','cuisine']].to_csv('submission.csv',index=False)","754f0cdd":"here I replace spaces with underscores so the CountVectorizer doesn't split ingredients on spaces.  Not sure if this is a good idea, it might be better to split everything and then use a max_df in the CountVectorizer to get rid of the common words.","526453bc":"Take a look at the classification report, very low recall on Irish and Brazilian for some reason","6f016ab0":"20 minute Naive Bayes model hits close to 70%"}}