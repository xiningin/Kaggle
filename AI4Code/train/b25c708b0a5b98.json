{"cell_type":{"7de715af":"code","d013e0c9":"code","663ca2e6":"code","d0913c38":"code","f4bffef9":"code","209de7b8":"code","14b923a1":"code","5e9ba36f":"code","ddb200fd":"code","3e1c92d8":"code","470871bc":"code","b22fae10":"code","90b039d6":"code","82a9ee93":"code","55450779":"code","2268132b":"code","217b906b":"code","0cf37cfb":"code","2092d3e8":"code","5f9b7790":"code","9ae9e478":"code","2cfa8941":"code","6a0e321e":"code","a070b0ab":"code","af4b13d7":"code","af56124a":"code","fadd5a8c":"code","77c9312b":"code","5081b501":"code","1bc0c7b2":"code","b90a2fd3":"code","8599dd1b":"code","72181469":"code","e2628787":"code","151a9904":"code","742873df":"code","b10993cc":"code","a25f8a35":"code","6bc7cb09":"code","66b74021":"code","ac15afa2":"code","9477171b":"code","eae2a789":"code","684e0f8f":"code","6383f832":"code","048a81bf":"code","18bdbf30":"code","1fe5c20b":"code","74fedf43":"code","57e3d2e7":"code","7b4d6dbc":"code","4855bc47":"code","48861a9e":"code","94602ad8":"code","119620da":"code","e4660aa2":"code","d8c41f9f":"code","d3035e38":"code","2ffd585f":"code","286e4fc9":"code","b47837ca":"code","674225b0":"code","046264ff":"code","eb7c0335":"code","cdf75855":"code","e33dd86a":"code","79e0a8ca":"code","1bd5a9e8":"code","1f688b4d":"code","a624f459":"code","fd857376":"code","c1da4a79":"code","fa50da2a":"code","50e63999":"code","ac11fe09":"code","dea723a3":"code","6dd6da9f":"code","fe78da9d":"code","063865da":"code","da87ea6a":"code","dd72b227":"code","559b302b":"code","a78b176a":"code","6351c924":"code","af71b1b8":"code","fc489fa5":"code","5070d4f5":"code","a256de03":"code","ed3b250d":"code","498b6dba":"code","1b628f0f":"code","fa2d05bc":"code","a68fdfaa":"code","78bf924a":"code","530a9009":"code","d94c0dda":"code","a68c0add":"code","2c011084":"code","08dd4e67":"code","5940c8dd":"code","72e23976":"code","696c61d3":"code","2d3c5d27":"code","f7605014":"code","64056d03":"code","e431440c":"code","1f56fd96":"code","9b14a9b9":"code","c1befd5a":"code","811d6c37":"code","5ef45904":"code","1d3b3798":"code","bf5240e6":"code","aeb8ad9f":"code","8da038aa":"code","efefcf79":"code","4c2f1ffa":"code","5c59a58e":"code","ee20b9cc":"code","91454855":"code","73acc59b":"code","aff0b7be":"code","3bc18c93":"code","8f556fe1":"code","0dd1e227":"code","42c275d5":"code","da40445e":"code","6eeda625":"markdown","c6af6bca":"markdown","7081b5b1":"markdown","1faf6359":"markdown","0c7cd66c":"markdown","b17d3d22":"markdown","012fc702":"markdown","8d69e52b":"markdown","720563ae":"markdown","4de18795":"markdown","e37d4f46":"markdown","4abf622f":"markdown","0875c59f":"markdown","ab665170":"markdown","e34dc7f8":"markdown","346a4362":"markdown","c242e702":"markdown","44506c58":"markdown","c99d2694":"markdown","a3a7155f":"markdown"},"source":{"7de715af":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport xgboost as xgb\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 12, 4\nimport plotly.express as px\nfrom sklearn.model_selection import GridSearchCV\nfrom pandas.api.types import is_string_dtype\nfrom pandas.api.types import is_numeric_dtype","d013e0c9":"# Reading the train dataset\nHouse_data=pd.read_csv(\"..\/input\/home-data-for-ml-course\/train.csv\")","663ca2e6":"House_data.head()","d0913c38":"# Reading the test data set\nHouse_data_test=pd.read_csv(\"..\/input\/home-data-for-ml-course\/test.csv\")","f4bffef9":"House_data_test.head()","209de7b8":" # Merging the test and train datasets, so that all the cleaning can be done at once.\nHouse_data[\"flag\"]=\"0\"\nHouse_data_test[\"flag\"]=\"1\"\nfinal_house_data=pd.concat([House_data,House_data_test])","14b923a1":"# Removing these two columns since they have too many null values.\nfinal_house_data.drop([\"LotFrontage\",\"GarageYrBlt\"],axis=1,inplace=True)","5e9ba36f":"\nOrdinal_categorical=[\"MSSubClass\",\"Street\",\"Alley\",\"LotShape\",\"LandContour\",\"Utilities\",\"LotConfig\",\"LandSlope\",\"Condition1\"\n                    ,\"BldgType\",\"HouseStyle\",\"RoofStyle\",\"RoofMatl\",\"Exterior1st\",\"MasVnrType\",\"ExterQual\",\"ExterCond\",\"Foundation\"\n                    ,\"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinType2\",\"Heating\",\"HeatingQC\",\"CentralAir\",\n                    \"Electrical\",\"KitchenQual\",\"FireplaceQu\",\"GarageType\",\"GarageFinish\",\"GarageQual\",\"GarageCond\",\"PavedDrive\",\n                    \"PoolQC\",\"Fence\"]\nNominal_categorical=[\"MSZoning\",\"MiscFeature\",\"SaleType\",\"SaleCondition\"]\n","ddb200fd":"def nullvalueremovecategoricalcolumns(df_nullcheck,cols):\n    for columns in cols:\n        if (df_nullcheck[columns].dtypes=='int64')|(df_nullcheck[columns].dtypes=='int32'):\n            df_nullcheck[columns].fillna(0,inplace=True)\n        df_nullcheck[columns].fillna(\"unknown\",inplace=True)\n    print(df_nullcheck[cols].head())\n    return df_nullcheck\n        \n    ","3e1c92d8":"Housedata_nullcheck=nullvalueremovecategoricalcolumns(final_house_data,[\"MSZoning\",\"MiscFeature\",\"SaleType\",\"SaleCondition\",\"MSSubClass\",\"Street\",\"Alley\",\"LotShape\",\"LandContour\",\"Utilities\",\"LotConfig\",\"LandSlope\",\"Condition1\"\n                    ,\"BldgType\",\"Condition2\",\"HouseStyle\",\"RoofStyle\",\"RoofMatl\",\"Exterior1st\",\"Exterior2nd\",\"MasVnrType\",\"ExterQual\",\"ExterCond\",\"Foundation\"\n                    ,\"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinType2\",\"Heating\",\"HeatingQC\",\"CentralAir\",\n                    \"Electrical\",\"KitchenQual\",\"FireplaceQu\",\"GarageType\",\"GarageFinish\",\"GarageQual\",\"GarageCond\",\"PavedDrive\",\n                    \"PoolQC\",\"Fence\",\"Functional\",\"Neighborhood\"])","470871bc":"def nullvalueremovenumericcolumns(df_nullcheck_numeric,cols):\n    for columns in cols:\n        df_nullcheck_numeric[columns].fillna(df_nullcheck_numeric[columns].mean(),inplace=True)\n    print(df_nullcheck_numeric[cols].head())\n    return df_nullcheck_numeric","b22fae10":"Housedata_nullcheck_numeric=nullvalueremovenumericcolumns(final_house_data,[\"LotArea\",\"YearBuilt\",\"YearRemodAdd\",\n                                                                     \"MasVnrArea\",\"BsmtFinSF1\",\"BsmtFinSF2\",\"BsmtUnfSF\",\n                                                                     \"TotalBsmtSF\",\"1stFlrSF\",\"2ndFlrSF\",\"LowQualFinSF\",\n                                                                     \"GrLivArea\",\"BsmtFullBath\",\"BsmtHalfBath\",\"FullBath\",\n                                                                     \"HalfBath\",\"BedroomAbvGr\",\"KitchenAbvGr\",\"TotRmsAbvGrd\",\"Fireplaces\",\n                                                                     \"GarageCars\",\"GarageArea\",\"WoodDeckSF\",\"OpenPorchSF\",\"EnclosedPorch\",\n                                                                     \"3SsnPorch\",\"ScreenPorch\",\"PoolArea\",\"MiscVal\",\"MoSold\",\"YrSold\"])","90b039d6":"corrs=final_house_data[final_house_data[\"flag\"]=='0'].corr().abs()","82a9ee93":"s = corrs.unstack()\nso = s.sort_values(kind=\"quicksort\",ascending=False)\nprint(so[\"SalePrice\"])","55450779":"plt.figure(figsize=(20,10))\nsns.barplot(x='ExterQual',y='SalePrice',data=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'])","2268132b":"plt.figure(figsize=(20,10))\nsns.barplot(x='OverallQual',y='SalePrice',data=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'])","217b906b":"plt.figure(figsize=(20,10))\nsns.barplot(x='GarageCars',y='SalePrice',data=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'])\n","0cf37cfb":"plt.figure(figsize=(20,10))\nsns.barplot(x='BsmtQual',y='SalePrice',data=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'])\n","2092d3e8":"plt.figure(figsize=(20,10))\nsns.barplot(x='KitchenQual',y='SalePrice',data=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'])\n","5f9b7790":"plt.figure(figsize=(20,10))\nsns.barplot(x='FullBath',y='SalePrice',data=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'])\n","9ae9e478":"plt.figure(figsize=(20,10))\nsns.barplot(x='GarageFinish',y='SalePrice',data=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'])\n","2cfa8941":"plt.figure(figsize=(20,10))\nsns.barplot(x='TotRmsAbvGrd',y='SalePrice',data=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'])\n","6a0e321e":"from scipy.stats import pearsonr \ncorryu,_ =pearsonr(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"],Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"YearBuilt\"])\ncolorassigned=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"]\nfig = px.scatter(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"YearBuilt\", y=\"SalePrice\",trendline=\"ols\",color=colorassigned)\nfig.show()\nprint(\"Pearson Correlation: %.3f\" % corryu)\nprint(\"P-value: %.8f\" % _)","a070b0ab":"from scipy.stats import pearsonr \ncorryu,_ =pearsonr(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"],Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"GrLivArea\"])\ncolorassigned=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"]\nfig = px.scatter(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"GrLivArea\", y=\"SalePrice\",trendline=\"ols\",color=colorassigned)\nfig.show()\nprint(\"Pearson Correlation: %.3f\" % corryu)\nprint(\"P-value: %.8f\" % _)","af4b13d7":"from scipy.stats import pearsonr \ncorryu,_ =pearsonr(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"],Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"GarageArea\"])\ncolorassigned=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"]\nfig = px.scatter(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"GarageArea\", y=\"SalePrice\",trendline=\"ols\",color=colorassigned)\nfig.show()\nprint(\"Pearson Correlation: %.3f\" % corryu)\nprint(\"P-value: %.8f\" % _)\n","af56124a":"from scipy.stats import pearsonr \ncorryu,_ =pearsonr(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"],Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"TotalBsmtSF\"])\ncolorassigned=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"]\nfig = px.scatter(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"TotalBsmtSF\", y=\"SalePrice\",trendline=\"ols\",color=colorassigned)\nfig.show()\nprint(\"Pearson Correlation: %.3f\" % corryu)\nprint(\"P-value: %.8f\" % _)\n","fadd5a8c":"from scipy.stats import pearsonr \ncorryu,_ =pearsonr(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"],Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"1stFlrSF\"])\ncolorassigned=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"]\nfig = px.scatter(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"1stFlrSF\", y=\"SalePrice\",trendline=\"ols\",color=colorassigned)\nfig.show()\nprint(\"Pearson Correlation: %.3f\" % corryu)\nprint(\"P-value: %.8f\" % _)\n\n","77c9312b":"from scipy.stats import pearsonr \ncorryu,_ =pearsonr(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"],Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"YearRemodAdd\"])\ncolorassigned=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"]\nfig = px.scatter(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"YearRemodAdd\", y=\"SalePrice\",trendline=\"ols\",color=colorassigned)\nfig.show()\nprint(\"Pearson Correlation: %.3f\" % corryu)\nprint(\"P-value: %.8f\" % _)\n","5081b501":"from scipy.stats import pearsonr \ncorryu,_ =pearsonr(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"],Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"MasVnrArea\"])\ncolorassigned=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"]\nfig = px.scatter(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"MasVnrArea\", y=\"SalePrice\",trendline=\"ols\",color=colorassigned)\nfig.show()\nprint(\"Pearson Correlation: %.3f\" % corryu)\nprint(\"P-value: %.8f\" % _)","1bc0c7b2":"plt.figure(figsize=(20,10))\nsns.barplot(x='Fireplaces',y='SalePrice',data=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'])\n","b90a2fd3":"plt.figure(figsize=(20,10))\nsns.barplot(x='FireplaceQu',y='SalePrice',data=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'])\n","8599dd1b":"plt.figure(figsize=(20,10))\nsns.barplot(x='GarageType',y='SalePrice',data=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'])\n","72181469":"plt.figure(figsize=(20,10))\nsns.barplot(x='HeatingQC',y='SalePrice',data=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'])","e2628787":"from scipy.stats import pearsonr \ncorryu,_ =pearsonr(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"],Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"BsmtFinSF1\"])\ncolorassigned=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"]\nfig = px.scatter(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"BsmtFinSF1\", y=\"SalePrice\",trendline=\"ols\",color=colorassigned)\nfig.show()\nprint(\"Pearson Correlation: %.3f\" % corryu)\nprint(\"P-value: %.8f\" % _)\n","151a9904":"plt.figure(figsize=(20,10))\nsns.barplot(x='Foundation',y='SalePrice',data=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'])","742873df":"from scipy.stats import pearsonr \ncorryu,_ =pearsonr(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"],Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"WoodDeckSF\"])\ncolorassigned=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"]\nfig = px.scatter(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"WoodDeckSF\", y=\"SalePrice\",trendline=\"ols\",color=colorassigned)\nfig.show()\nprint(\"Pearson Correlation: %.3f\" % corryu)\nprint(\"P-value: %.8f\" % _)","b10993cc":"from scipy.stats import pearsonr \ncorryu,_ =pearsonr(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"],Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"2ndFlrSF\"])\ncolorassigned=Housedata_nullcheck[Housedata_nullcheck['flag']=='0'][\"SalePrice\"]\nfig = px.scatter(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"2ndFlrSF\", y=\"SalePrice\",trendline=\"ols\",color=colorassigned)\nfig.show()\nprint(\"Pearson Correlation: %.3f\" % corryu)\nprint(\"P-value: %.8f\" % _)\n","a25f8a35":"fig = px.pie(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], values='HalfBath', names='HalfBath')\nfig.show()","6bc7cb09":"fig = px.box(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"ExterQual\", \n             y=\"SalePrice\", points=\"all\",color=\"ExterQual\",\n             title=\"Distribution of SalePrice with External Quality of House\",\n            )\nfig.show()","66b74021":"fig = px.box(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"GarageCars\", \n             y=\"SalePrice\", points=\"all\",color=\"GarageCars\",\n             title=\"Distribution of SalePrice with number of Car Garages in House\",\n            )\nfig.show()","ac15afa2":"fig = px.box(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"OverallQual\", \n             y=\"SalePrice\", points=\"all\",color=\"OverallQual\",\n             title=\"Distribution of SalePrice with Overall present Quality of House\",\n            )\nfig.show()","9477171b":"fig = px.box(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"BsmtQual\", \n             y=\"SalePrice\", points=\"all\",color=\"BsmtQual\",\n             title=\"Distribution of SalePrice with the quality of the basement in the House\",\n            )\nfig.show()\n","eae2a789":"fig = px.box(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"KitchenQual\", \n             y=\"SalePrice\", points=\"all\",color=\"KitchenQual\",\n             title=\"Distribution of SalePrice with the quality of the Kitchen in the House\",\n            )\nfig.show()","684e0f8f":"fig = px.box(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"FullBath\", \n             y=\"SalePrice\", points=\"all\",color=\"FullBath\",\n             title=\"Distribution of SalePrice with the number of full bathrooms in the House\",\n            )\nfig.show()\n","6383f832":"fig = px.box(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"GarageFinish\", \n             y=\"SalePrice\", points=\"all\",color=\"GarageFinish\",\n             title=\"Distribution of SalePrice with the status of Garage in the House\",\n            )\nfig.show()\n","048a81bf":"fig = px.box(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"TotRmsAbvGrd\", \n             y=\"SalePrice\", points=\"all\",color=\"TotRmsAbvGrd\",\n             title=\"Distribution of SalePrice with the total number of rooms above the ground in the House\",\n            )\nfig.show()\n","18bdbf30":"fig = px.box(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"Fireplaces\", \n             y=\"SalePrice\", points=\"all\",color=\"Fireplaces\",\n             title=\"Distribution of SalePrice with the number of fireplaces present in the House\",\n            )\nfig.show()\n      \n     ","1fe5c20b":"fig = px.box(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"FireplaceQu\", \n             y=\"SalePrice\", points=\"all\",color=\"FireplaceQu\",\n             title=\"Distribution of SalePrice with the quality of fireplaces present in the House\",\n            )\nfig.show()\n","74fedf43":"fig = px.box(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"GarageType\", \n             y=\"SalePrice\", points=\"all\",color=\"GarageType\",\n             title=\"Distribution of SalePrice with the type of garage present in the House\",\n            )\nfig.show()\n","57e3d2e7":"fig = px.box(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"HeatingQC\", \n             y=\"SalePrice\", points=\"all\",color=\"HeatingQC\",\n             title=\"Distribution of SalePrice with the quality of Heating in the House\",\n            )\nfig.show()\n","7b4d6dbc":"fig = px.box(Housedata_nullcheck[Housedata_nullcheck['flag']=='0'], x=\"Foundation\", \n             y=\"SalePrice\", points=\"all\",color=\"Foundation\",\n             title=\"Distribution of SalePrice with the type of material used for constructing the House\",\n            )\nfig.show()\n","4855bc47":"def labelencoding(df,cols):\n    for columns in cols:\n        from sklearn.preprocessing import LabelEncoder\n        le = LabelEncoder()\n        df[columns] = le.fit_transform(df[columns].values)\n    print(df[cols].head())\n    return df\n    ","48861a9e":"Housedata_encoded=labelencoding(final_house_data,[\"MSZoning\",\"MiscFeature\",\"SaleType\",\"SaleCondition\",\"MSSubClass\",\"Street\",\"Alley\",\"LotShape\",\"LandContour\",\"Utilities\",\"LotConfig\",\"LandSlope\",\"Condition1\"\n                    ,\"BldgType\",\"Condition2\",\"HouseStyle\",\"RoofStyle\",\"RoofMatl\",\"Exterior1st\",\"Exterior2nd\",\"MasVnrType\",\"ExterQual\",\"ExterCond\",\"Foundation\"\n                    ,\"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinType2\",\"Heating\",\"HeatingQC\",\"CentralAir\",\n                    \"Electrical\",\"KitchenQual\",\"FireplaceQu\",\"GarageType\",\"GarageFinish\",\"GarageQual\",\"GarageCond\",\"PavedDrive\",\n                    \"PoolQC\",\"Fence\",\"Functional\",\"Neighborhood\"])","94602ad8":"# Checking the null values we do not have any null values after the cleaning, only the saleprice has since it is the target variable.\nax=plt.figure(figsize=(20,10))\nsns.heatmap(Housedata_nullcheck.isnull(),yticklabels=False,cbar=False,cmap='viridis')","119620da":"# Finding the correlation of all the columns with the target variable, after encoding the categorical columns.\ncorrs=final_house_data[final_house_data[\"flag\"]=='0'].corr().abs()","e4660aa2":"s = corrs.unstack()\nso = s.sort_values(kind=\"quicksort\",ascending=False)\nprint(so[\"SalePrice\"])","d8c41f9f":"# Plotting the count of few columns\ncolorassigned=Housedata_encoded[\"OverallQual\"]\nfig = px.histogram(final_house_data, x=\"OverallQual\", marginal=\"rug\",\n                   hover_data=final_house_data.columns,nbins=30,color=colorassigned)\nfig.show()","d3035e38":"colorassigned=Housedata_encoded[\"GarageCars\"]\nfig = px.histogram(final_house_data, x=\"GarageCars\", marginal=\"rug\",\n                   hover_data=final_house_data.columns,nbins=20,color=colorassigned)\nfig.show()","2ffd585f":"colorassigned=Housedata_encoded[\"ExterQual\"]\nfig = px.histogram(final_house_data, x=\"ExterQual\", marginal=\"rug\",\n                   hover_data=final_house_data.columns,nbins=30,color=colorassigned)\nfig.show()\n","286e4fc9":"final_house_data.kurtosis(axis=0) ","b47837ca":"# Scaling the columns that have too much Kurtosis.\nfrom sklearn.preprocessing import MinMaxScaler\nmms = MinMaxScaler()\nfinal_house_data[['3SsnPorch','Condition2', 'PoolArea','Utilities','MiscVal','Heating','LotArea','LowQualFinSF','Street','RoofMatl','MiscFeature','EnclosedPorch']] = mms.fit_transform(final_house_data[['3SsnPorch','Condition2', 'PoolArea','Utilities','MiscVal','Heating','LotArea','LowQualFinSF','Street','RoofMatl','MiscFeature','EnclosedPorch']])","674225b0":"# Selecting the train part of the dataset by making flag=0\np=final_house_data[final_house_data[\"flag\"]=='0']\n","046264ff":"# Removing the flag, saleprice and id columns from the features matrix\ncolss = [col for col in p.columns if col not in ['flag','SalePrice','Id']]","eb7c0335":"X=p[colss]","cdf75855":"X.head()","e33dd86a":"y=p[\"SalePrice\"]","79e0a8ca":"# importing train test set\nfrom sklearn.model_selection import train_test_split","1bd5a9e8":"# splitting the training and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","1f688b4d":"# importing linear regressor\nfrom sklearn.linear_model import LinearRegression","a624f459":"# Instantiating linear regressor\nlm=LinearRegression()","fd857376":"# Fitting the model on the training data\nlm.fit(X_train,y_train)","c1da4a79":"# Prediction on the training data\npredictions_linearregressor_traindata=lm.predict(X_test)\ndff = pd.DataFrame({'Actual': y_test, 'Predicted': predictions_linearregressor_traindata})\ndff","fa50da2a":"# Checking the mean squared log error on training data\nfrom sklearn import metrics\nmetrics.mean_squared_log_error(y_test, predictions_linearregressor_traindata)","50e63999":"# Checking the score of the Linear regressor on training data\nlinearregressionscore=lm.score(X_test,y_test)\nlinearregressionscore","ac11fe09":"# Selecting the test part of the data\nLineartestdata=final_house_data[final_house_data[\"flag\"]=='1']","dea723a3":"Lineartestdata.head()","6dd6da9f":"# Removing the 3 unwanted features that will impact the prediction, and SalePrice is target variable so cannot be in feature matrix.\ntestdata = Lineartestdata.drop(['flag','SalePrice','Id'], axis=1)","fe78da9d":"testdata.head()","063865da":"# making predictions on the test data set\npredictions_linearregressor_testdata=lm.predict(testdata)","da87ea6a":"predictions_linearregressor_testdata\n","dd72b227":"# Importing the required libraries\nfrom sklearn.model_selection import train_test_split","559b302b":"# Splitting the train and the test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","a78b176a":"# Importing the deicion tree regressor\nfrom sklearn.tree import DecisionTreeRegressor","6351c924":"# Instantiating the DecisionTree regressor\ndecisiontreereg=DecisionTreeRegressor()","af71b1b8":"# Fitting on the training data set\ndecisiontreereg.fit(X_train,y_train)","fc489fa5":"# Predictions for the training data sets\npredictions_decisiontree_traindata=decisiontreereg.predict(X_test)\npredictions_decisiontree_traindata","5070d4f5":"# Score for the decisiontree regressor on the training data set\ndecisiontreescore=decisiontreereg.score(X_test,y_test)\ndecisiontreescore","a256de03":"# Getting the decisiontree test data set using the flag filtering\nDecisiontreetestdata=final_house_data[final_house_data[\"flag\"]=='1']","ed3b250d":"# Removing the unwanted columns\ntestdata_decisiontree = Decisiontreetestdata.drop(['flag','SalePrice','Id'], axis=1)","498b6dba":"# Making predictions on the test data set\npredictions_decisiontree_testdata=decisiontreereg.predict(testdata_decisiontree)","1b628f0f":"predictions_decisiontree_testdata","fa2d05bc":"# Getting the train data using the flag variable.\nq=final_house_data[final_house_data[\"flag\"]=='0']","a68fdfaa":"# Filtering the columns \ncold = [col for col in q.columns if col not in ['flag','SalePrice','Id']]","78bf924a":"Z=q[cold]","530a9009":"t=q['SalePrice']","d94c0dda":"# Importing the required \nfrom sklearn.model_selection import train_test_split","a68c0add":"# Splitting the training and the test set within the train dat set\nZ_train, Z_test, t_train, t_test = train_test_split(Z, t, test_size=0.3, random_state=42)","2c011084":"# Importing the randomforest regressor\nfrom sklearn.ensemble import RandomForestRegressor","08dd4e67":"# Instantiating the regressor and passing the required parameters to the regressor\nRandomforestregr=RandomForestRegressor(n_estimators = 100,n_jobs = -1,oob_score = True, bootstrap = True,random_state=42)","5940c8dd":"# Fitting to the training data set\nRandomforestregr.fit(Z_train,t_train)","72e23976":"# Pedicting on the trained dataset\nprediction_randomforest_traindata=Randomforestregr.predict(Z_test)","696c61d3":"# Score on the train dataset\nrandomforestscore=Randomforestregr.score(Z_test,t_test)\nrandomforestscore","2d3c5d27":"print('R^2 Training Score: {:.2f} \\nOOB Score: {:.2f} \\nR^2 Validation Score: {:.2f}'.format(Randomforestregr.score(Z_train, t_train), \n                                                                                             Randomforestregr.oob_score_,\n                                                                                             Randomforestregr.score(Z_test, t_test)))","f7605014":"# Getting the test dataset to make the final predictions\nRandomforesttestdata=final_house_data[final_house_data[\"flag\"]=='1']","64056d03":"# removing the unwanted columns\ntestdata_randomforest = Randomforesttestdata.drop(['flag','SalePrice','Id'], axis=1)","e431440c":"# Making the predictions on the test dataset.\npredictions_randomforest_testdata=Randomforestregr.predict(testdata_randomforest)","1f56fd96":"# Getting the importances of the features of the dataset. The significance of each feature is shown in predicting the SalePrice.\nfeature_imp=pd.DataFrame(sorted(zip(Randomforestregr.feature_importances_,Z)),columns=[\"Significance\",\"Features\"])\nfig=plt.figure(figsize=(20,20))\nsns.barplot(x=\"Significance\",y=\"Features\",data=feature_imp.sort_values(by=\"Significance\",ascending=False),dodge=False)\nplt.title(\"Important features for predicting the SalePrice of the House\")\nplt.tight_layout()\nplt.show()","9b14a9b9":"# Getting the train data from the dataset \nr=final_house_data[final_house_data[\"flag\"]=='0']","c1befd5a":"# Getting the required columns\ncolsxg=[col for col in q.columns if col not in ['flag','SalePrice','Id']]","811d6c37":"A=r[colsxg]","5ef45904":"b=r['SalePrice']","1d3b3798":"# Splitting the train and test set within the train set\nA_train, A_test, b_train, b_test = train_test_split(A, b, test_size=0.3, random_state=42)","bf5240e6":"# Instantiated the XgBoost model by passing the most optimal parameters that were obtained by performing the GridSearchcv.\nXgBoostmodel = xgb.XGBRegressor(\n    n_estimators=100,\n    reg_lambda=1,\n    reg_alpha=0.002,\n    gamma=0.3,\n    max_depth=4,\n    min_child_weight=4,\n    subsample=1,\n    colsample_bytree=1,\n)","aeb8ad9f":"# Fitting on the train sample.\nXgBoostmodel.fit(A_train,b_train)","8da038aa":"# Making predictions on the train sample\nXgboost_prediction_train = XgBoostmodel.predict(A_test)","efefcf79":"Xgboost_prediction_train","4c2f1ffa":"# Score on training set\nXgboostscore=XgBoostmodel.score(A_test,b_test)\nXgboostscore","5c59a58e":"# Calculated the mean squared log error\nmetrics.mean_squared_log_error(b_test, Xgboost_prediction_train)","ee20b9cc":"print('\\n Best hyperparameters:')\nprint(random_search.best_params_)","91454855":"# Getting the test dataset from the whole dataset\nXgboosttestdata=final_house_data[final_house_data[\"flag\"]=='1']","73acc59b":"\ntestdata_xgboost=Randomforesttestdata.drop(['flag','SalePrice','Id'], axis=1)","aff0b7be":"# Making predictions on the test data set\npredictions_xgboost_testdata=XgBoostmodel.predict(testdata_xgboost)","3bc18c93":"# Exporting the results to a dataframe from an array and then converting it to csv file for export\nresultcsv=pd.DataFrame(predictions_xgboost_testdata)","8f556fe1":"resultcsv.shape","0dd1e227":"resultcsv.to_csv('Result.csv')","42c275d5":"# Creating a dictionary for all the models to store thier scores and convert this to dataframe.\ndict={\"Linear Regressor\":[linearregressionscore],\"DecisionTree Regressor\":[decisiontreescore],\"RandomForest Regressor\":[randomforestscore],\"XGBoost Regressor\":[Xgboostscore]}\ndf_comparison_models=pd.DataFrame(dict,[\"Score\"])","da40445e":"# Plotting the performance of all the 3 models on the train dataset.\n%matplotlib inline\nmodel_accuracy = pd.Series(data=[linearregressionscore,decisiontreescore,randomforestscore,Xgboostscore], \n        index=['Linear Regressor','DecisionTree Regressor','RandomForest Regressor','XGBoost Regressor'])\nfig= plt.figure(figsize=(8,8))\nmodel_accuracy.sort_values().plot.barh()\nplt.title('Model Accuracy')","6eeda625":"# Predicting using the XgBoost Regressor with Hyperparameters Tuning to give the best predictions","c6af6bca":"### It was observed that XgBoost model was the best model that had the maximum accuracy.","7081b5b1":"## This shows a scatter plot with a line of best fit to the given data points.","1faf6359":"## Now we need to encode the categorical columns so that we can feed them to our model for the prediction. Labelencoder is used for all the columns at once.","0c7cd66c":"## Checking the Kurtosis and skewness to know the normality. It can be observed that there are few columns that have too high values, and those columns should be scaled using MinMaxscaler.","b17d3d22":"# THATS ALL FOLKS !","012fc702":"# COMPARISON OF MODEL PERFORMANCES ON THE TRAIN DATASET","8d69e52b":"## This was the complete SalePrice prediction for the given business problem. The Result.csv file was uploaded to Kaggle and got ranked 107\/45000. Will be updating this kernel to make this model more accurate by hyperparameter tuning.","720563ae":"## Predicting using the DecisionTree Regressor","4de18795":"## READING AND JOINING THE TRAIN AND TEST DATA.","e37d4f46":"## We need to find the correlation between different features and the target variable using the pearson correlation matrix. The features having the correlation value greater than 0.5 are considered to be better for feeding into our model for prediction. The features are sorted according to their value of the pearson correlation.","4abf622f":"## Predicting using the Randomforest Regressor","0875c59f":"## Predicting using the Simple Linear Regressor","ab665170":"## It can be observed that most of the houses have the quality of medium that is 5. Only 31 houses have the quality of rating 10 that is outstanding.","e34dc7f8":"### There are 2 types of categorical variables one is ordinal that is the categories show some type of order, for instance qualities of a product or the ratings of a product. The other type is nominal that does not involves any type of order in the categories. Here two separate lists are made indicating the two types of categorical variables.","346a4362":"# EXPLORATORY DATA ANALYSIS","c242e702":"## We know which features are the most significant for our model, so we will check the distribution of those features with respect to the target variable in bar plot, scatter plot(with linear fit) and finally box plots to know the statistics.","44506c58":"## It can be observed that OverallQual is the most significant column for our prediction, since it has the maximum value of correlation in the correlation matrix. There is a linear increase in the saleprice of the houses as the overall quality of the houses increases which is perfectly relatable.","c99d2694":"# MODEL CREATION AND MAKING PREDICTIONS","a3a7155f":"## Here we are removing the null values from the columns and imputing them with reasonable values. For instance, for the categorical columns, we are replacing null values with zeros and \"unknown\" string. Similarly for the numeric columns, we are replacing with mean values of the columns."}}