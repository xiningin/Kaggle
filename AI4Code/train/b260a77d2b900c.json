{"cell_type":{"37ff05fd":"code","1703a256":"code","c3ac8405":"code","1e29570e":"code","cb1774af":"code","6ba5017d":"code","11895297":"code","9fa825c3":"code","06a91f0f":"code","8f8a4480":"code","8ba720a2":"code","795fb421":"code","7499df39":"code","bf35473f":"code","43ef2369":"code","05093edf":"code","121b34c1":"code","db4ea358":"code","a6a6e6a4":"code","f22c8c68":"code","9c9cff92":"code","6760065c":"code","007213dc":"code","7b8f2591":"code","1b7353e4":"code","410da19d":"code","1949e5c1":"code","6f963158":"code","0bc94305":"code","beb3dbf0":"code","7ac168cf":"code","f85cdfd1":"code","81ce950a":"code","244f4b1d":"code","02727a29":"code","0c52d796":"code","999a7120":"code","77f542e1":"code","ff528423":"code","38412424":"code","4c2e36f4":"code","be989ad0":"code","8806e095":"code","01148252":"code","6f1404f2":"markdown","91491cd3":"markdown","d9e69272":"markdown","0077d30f":"markdown","172748c2":"markdown","58d8fdea":"markdown","77f64fac":"markdown"},"source":{"37ff05fd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport datetime\n# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow\n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')","1703a256":"population=pd.read_csv('\/kaggle\/input\/countries-of-the-world\/countries of the world.csv')\ndata=pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv')","c3ac8405":"treat_numeric=[]\ntreat_str=[]\nfor y in population.columns:\n    if(population[y].dtype == np.float64 or population[y].dtype == np.int64):\n          treat_numeric.append(y)\n    else:\n          treat_str.append(y)\n\ncols_to_float=['Pop. Density (per sq. mi.)','Coastline (coast\/area ratio)', 'Net migration', 'Infant mortality (per 1000 births)', 'Literacy (%)', 'Phones (per 1000)', 'Arable (%)',\n 'Crops (%)', 'Other (%)', 'Birthrate', 'Deathrate', 'Agriculture','Climate', 'Industry', 'Service']\n\nfor i in cols_to_float:\n    population[i]= population[i].str.replace(',','.', case = False) \n    population[i]=pd.to_numeric(population[i])\n\ndata=data.groupby(['Country\/Region','Date']).sum()\ndata.reset_index(level='Date',inplace=True)\ndata=data[data['Confirmed']!=0]\ndata['date']=pd.to_datetime(data['Date'])\ndel data['Date']\ndata.sort_values(by=['Country\/Region','date'],inplace=True)\ndata.reset_index(level=0,inplace=True)","1e29570e":"data=data.astype({'Country\/Region': str})\npopulation['Country']=population['Country'].astype('str')\ndata['match']=data['Country\/Region'].eq(data['Country\/Region'].shift())\ndata['Country\/Region']=data['Country\/Region'].str.strip(' ').str.lower()\npopulation['Country']=population['Country'].str.strip(' ').str.lower()\ndata.loc[data['Country\/Region']=='us']='united states'\ndata.loc[data['Country\/Region']=='taiwan*']='taiwan'\ndata.loc[data['Country\/Region']=='congo (kinshasa)']='congo, dem. rep.'\n","cb1774af":"data['days_since_first']=0\n","6ba5017d":"for i in data.index[1:]:\n    if data.at[i,'match']==True:\n        data.loc[i,'days_since_first']=(data.at[i-1,'days_since_first']+1)\n        data.loc[i,'increase_rate']=(((data.at[i,'Confirmed']-data.at[i-1,'Confirmed'])\/data.at[i-1,'Confirmed'])*100)\n        data.loc[i,'previous_Confirmed']=data.at[i-1,'Confirmed']\n    else:\n        data.set_value(i,'days_since_first',0)","11895297":"data=data[data['increase_rate']>=0]\ndata['previous_Confirmed'].astype(int)\ndel data['match']\ndata.set_index('Country\/Region',inplace=True)\npopulation.set_index('Country',inplace=True)","9fa825c3":"result = pd.merge(data, population,left_index=True, right_index=True)","06a91f0f":"result['death_rate']=(result['Deaths']\/result['Confirmed'])*100\n","8f8a4480":"cols=['Lat','Long','Confirmed','Deaths','Recovered','death_rate']                             \nfor i in cols:\n    result[i]=pd.to_numeric(result[i])","8ba720a2":"result.info()","795fb421":"viz=result.copy()\nviz.reset_index(inplace=True)","7499df39":"viz['conf\/1m_popul']=viz['Confirmed']\/(viz['Population']\/1000000)","bf35473f":"plt.figure(figsize=(30, 7))\nmcount=viz.groupby('index').tail(1)\nmcount = mcount.reset_index().sort_values(by='conf\/1m_popul',ascending=False)\nmcount=mcount[mcount['conf\/1m_popul']>100]\ng=sb.barplot(data = mcount, x = 'index',y='conf\/1m_popul');\ng.set_title('Countries confirmed per 1m population')\ng.set_ylabel('conf\/1m_popul')\ng.set_xlabel('Country');\nplt.xticks(rotation=90)","43ef2369":"plt.figure(figsize=(30, 7))\nmcount=viz.groupby('index').mean()\nmcount = mcount.reset_index().sort_values(by='increase_rate',ascending=False)\nmcount=mcount[mcount['increase_rate']>30]\ng=sb.barplot(data = mcount, x = 'index',y='increase_rate');\ng.set_title('Countries mean increase rate')\ng.set_ylabel('Mean Increase rate %')\ng.set_xlabel('Country');\nplt.xticks(rotation=90)","05093edf":"mcount=viz.groupby('index').mean()\nmcount = mcount.reset_index()\ndcount=viz.groupby('index').tail(1)\ndcount = dcount.reset_index()\n\ng = sb.jointplot(\"GDP ($ per capita)\", \"increase_rate\", data=mcount,\n                  kind=\"reg\", truncate=True,\n                  xlim=(0, 60000), ylim=(0, 150),\n                  color=\"m\", height=7)\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Increase rate compared to GDP')\n\ng = sb.jointplot(\"GDP ($ per capita)\", \"conf\/1m_popul\", data=mcount,\n                  kind=\"reg\", truncate=True,\n                  xlim=(0, 60000), ylim=(0, 1500),\n                  color=\"m\", height=7)\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Confirmed cases per 1m population compared to GDP')","121b34c1":"mcount=viz.groupby('index').tail(1)\nmcount = mcount.reset_index().sort_values(by='index',ascending=False)\nmcount","db4ea358":"plt.figure(figsize=(30, 7))\nmcount=viz.groupby('index').tail(1)\nmcount = mcount.reset_index().sort_values(by='index',ascending=False)\n\n\npal = sb.cubehelix_palette(len(mcount['days_since_first'].unique()), rot=-.5, dark=.3)\n\n# Show each distribution with both violins and points\nsb.swarmplot(x=\"days_since_first\", y='conf\/1m_popul',\n              palette=[\"r\", \"c\", \"y\"], data=mcount)","a6a6e6a4":"plt.figure(figsize=(30, 7))\nmcount=viz.groupby('days_since_first').mean()\nmcount = mcount.reset_index().sort_values(by='days_since_first',ascending=False)\ng=sb.barplot(data = mcount, x = 'days_since_first',y='increase_rate');\ng.set_title('Increase rate after x days of infection')\ng.set_ylabel('Mean Increase rate %')\ng.set_xlabel('Days since first victim');\nplt.xticks(rotation=90)","f22c8c68":"viz.groupby('index').max()","9c9cff92":"mcount=viz.groupby('index').mean()\nmcount = mcount.reset_index()\ndcount=viz.groupby('index').tail(1)\ndcount = dcount.reset_index()\ng = sb.jointplot(\"Pop. Density (per sq. mi.)\", \"increase_rate\", data=mcount,\n                  kind=\"reg\", truncate=True,\n                  xlim=(0, 17000), ylim=(0, 200),\n                  color=\"y\", height=7)\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Increase rate compared to Pop. Density')\n\ng = sb.jointplot(\"Industry\", \"increase_rate\", data=mcount,\n                  kind=\"reg\", truncate=True,\n                  xlim=(0, 1), ylim=(0, 150),\n                  color=\"y\", height=7)\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Increase rate compared to Industry')\n\ng = sb.jointplot(\"Pop. Density (per sq. mi.)\", \"death_rate\", data=dcount,\n                  kind=\"reg\", truncate=True,\n                  xlim=(0, 17000), ylim=(0, 10),\n                  color=\"r\", height=7)\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Confirmed cases compared to Pop. Density')","6760065c":"plt.figure(figsize=(30, 7))\nmcount=viz.groupby('days_since_first').mean()\nmcount = mcount.reset_index().sort_values(by='days_since_first',ascending=False)\ng=sb.barplot(data = mcount, x = 'days_since_first',y='death_rate');\ng.set_title('death_rate after x days of infection')\ng.set_ylabel('death_rate %')\ng.set_xlabel('Days since first victim');\nplt.xticks(rotation=90)","007213dc":"mcount=viz.groupby('index').tail(1)\nmcount = mcount.reset_index().sort_values(by='death_rate',ascending=False)\nmcount","7b8f2591":"plt.figure(figsize=(30, 7))\nmcount=viz.groupby('index').tail(1)\nmcount = mcount.reset_index().sort_values(by='death_rate',ascending=False)\ng=sb.barplot(data = mcount, x = 'index',y='death_rate');\ng.set_title('Countries mean death rate')\ng.set_ylabel('Mean death rate %')\ng.set_xlabel('Country');\ng.set(ylim=(0, 40))\ng.set(xlim=(0, 40))\n\nplt.xticks(rotation=90)","1b7353e4":"viz.columns","410da19d":"X=result.copy()\ndel X['Deaths']\ndel X['date']\ndel X['increase_rate']\ndel X['Recovered']\ndel X['death_rate']\n\n\nX=pd.get_dummies(X)","1949e5c1":"corr = X.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","6f963158":"from sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error","0bc94305":"y = X.Confirmed     \ncorr = X.corr()['Confirmed']\ncorr=abs(corr)\ncol_to_keep = corr[corr>0.03]\nfor i in X.columns:\n    if not i in col_to_keep:\n        X.drop(i, axis=1,inplace=True)\n\nX.drop(['Confirmed'], axis=1, inplace=True)\n\n\n# Break off validation set from training data\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.9, test_size=0.1, random_state=1)\n\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, train_size=0.9, test_size=0.1, random_state=1)","beb3dbf0":"xgb = XGBRegressor(n_estimators=100, learning_rate=0.08, gamma=0, subsample=0.75,\n                           colsample_bytree=1, max_depth=7)","7ac168cf":"eval_set = [(X_val.as_matrix(), y_val.as_matrix())]\nxgb.fit(X_train.as_matrix(),y_train.as_matrix(), early_stopping_rounds=50, eval_metric=\"mae\", eval_set=eval_set, verbose=True)","f85cdfd1":"from sklearn.metrics import explained_variance_score\npredictions = xgb.predict(X_test.as_matrix())\n","81ce950a":"gr=X.copy()\ngr=gr.reset_index()\ngr=gr[gr['index']=='greece']\ndel gr['index']\n#gr.drop(['Confirmed'], axis=1, inplace=True)\na=data.copy()\na=a.reset_index()\n#a['date']=pd.to_datetime(a['date'])\n#a=a['Country\/Region'=='greece']","244f4b1d":"gr","02727a29":"future_gr=gr.copy()\nfuture_gr=future_gr[X_test.columns]","0c52d796":"future_gr.columns,X_test.columns","999a7120":"future_gr.reset_index(inplace=True)\ndel future_gr['index']\n\nfuture_gr.iloc[0]=gr.iloc[-1]\n#future_gr['date']=last_date\nfor i in future_gr.index[1:]:\n    future_gr.loc[i,'days_since_first']=(future_gr.at[i-1,'days_since_first']+1)\n\n\npredictions=[]\nfor i in future_gr.index:\n    pred=int(xgb.predict(future_gr.iloc[i]))\n    future_gr.loc[i+1,'previous_Confirmed']=pred\n    predictions.append(pred)","77f542e1":"future_gr['predicted_infections']=future_gr['previous_Confirmed'].shift(-1)\nfuture_gr=future_gr[{'days_since_first', 'previous_Confirmed','predicted_infections'}]","ff528423":"future_gr['increase_rate']=0","38412424":"future_gr['increase_rate']=((future_gr['predicted_infections']-future_gr['previous_Confirmed'])\/future_gr['previous_Confirmed'])*100","4c2e36f4":"future_gr['date']=''\nfuture_gr.loc[0,'date']='2020-03-22'\nfuture_gr['date']=pd.to_datetime(future_gr['date'])\nfor i in future_gr.index[1:]:\n    future_gr.loc[i,'date']=(future_gr.at[i-1,'date'] + datetime.timedelta(days=1))","be989ad0":"del future_gr['previous_Confirmed']\nfuture_gr","8806e095":"plt.figure(figsize = [16, 8])\nsb.set(style=\"whitegrid\")\nsb.lineplot(x='date',y='increase_rate',data=future_gr[:-2], palette=\"tab10\", linewidth=2.5).set_title('Prediction of increase rate in Greece')\nplt.xticks(rotation=90);\n","01148252":"plt.figure(figsize = [16, 8])\nsb.set(style=\"whitegrid\")\nsb.lineplot(x='date',y='predicted_infections',data=future_gr[:-2], palette=\"tab10\", linewidth=2.5).set_title('Prediction of number of infections in Greece')\n\nplt.xticks(rotation=90);\n\nplt.show()","6f1404f2":"**Data cleaning**","91491cd3":"The increase rate has a temporary low at the 20th day of infection but after that explode. The rate icrease dramaticaly every 10 days more or less.","d9e69272":"**Data analysis on COVID19 pandemy. \n**\n\nIn this work I analyze the pandemy spread, by using data from all around the world and several demografic data for each country. I focus on the increase rate.\nFinal goal is to predict the spread of the virus in Greece during the two following weeks.\n\nThe current project takes into consideration the fact that several countries do not announce reliable data, either because they are hiding the real numbers due to political reasons, or because they do not have the necessary infrastructure to test and record all the suspicious cases. Nevertheless, we consider the given data a solid base in order to come up with some coclusions about the general trend.\n\n","0077d30f":"We can see below that the majority of countries are between th 17th and 28th day infection.","172748c2":"**Visualization**","58d8fdea":"**Visualization of death rate**","77f64fac":"**Prediction using machine learning algorith**"}}