{"cell_type":{"1d5a8522":"code","682538a0":"code","250ef02d":"code","9bd5364b":"code","4db781f3":"code","cdf796b8":"code","12725517":"code","7f5e5989":"code","bd4b101a":"code","81dcc49f":"code","40307392":"code","c1569e70":"code","3e1bef77":"code","42c1ba51":"code","91abd59c":"code","c52a838d":"code","9bde19af":"code","f0d164bb":"code","2f5a08cb":"code","cebc79c3":"code","5a5fb5d3":"code","d4cef896":"code","96c33891":"code","07ec9d69":"code","c135bb4b":"code","55dd55c4":"code","57d0fae1":"code","57839d34":"code","e179873e":"code","f209887f":"code","f1841be5":"code","1276ce5d":"code","aa2d774c":"code","9190214c":"code","4c62c263":"code","d9570642":"code","c0790864":"code","4c3596ae":"code","bde9231d":"code","b7427333":"code","c60ef2fb":"code","81e07edf":"code","a013c56f":"code","54b6de1e":"code","fee0b232":"code","bc6de144":"code","d5ca2760":"code","8cd5caf2":"code","c28adbdb":"code","7e1990be":"code","78900dd2":"code","c2e559a0":"code","e1ec4e2b":"code","6d479146":"code","d4ab4e06":"code","0b170321":"code","a9a60733":"code","0851601f":"code","1484a836":"code","c2847684":"code","d9cfaeea":"code","3021dbef":"code","fee97563":"code","2350c832":"code","910b4281":"code","1833fd9f":"code","3350600a":"code","3a4af917":"code","24b3ef3c":"code","36efc9e8":"code","8252496d":"code","48657da4":"code","7b896e3f":"markdown","7f03a74b":"markdown","f4d022b8":"markdown","2b29be0d":"markdown","b52dad6c":"markdown","9cd14cd2":"markdown"},"source":{"1d5a8522":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","682538a0":"df_1 = pd.read_csv(\"Boston_Train.csv\")\ndf_2 = pd.read_csv(\"Boston_Test.csv\")","250ef02d":"df_boston = pd.concat([df_1,df_2])\ndf_boston.tail()\ndf_boston.head()","9bd5364b":"df_boston.drop(\"Unnamed: 0\",axis = 1,inplace = True)","4db781f3":"df_boston.columns","cdf796b8":"df_boston.shape","12725517":"df_boston.info","7f5e5989":"df_boston.dtypes","bd4b101a":"df_boston.nunique()","81dcc49f":"df_boston.isnull().sum()","40307392":"df_boston[df_boston.isnull().any(axis = 1)]","c1569e70":"df_boston.describe()","3e1bef77":"corr = df_boston.corr()\ncorr","42c1ba51":"plt.figure(figsize = (12,12))\nplt.title(\"Heatmap\",fontsize = 40)\nsns.heatmap(corr,cbar = True,square = True,fmt = \".1f\",annot_kws={\"size\":11},annot = True,cmap = \"Greens\")","91abd59c":"sns.pairplot(df_boston)","c52a838d":"from sklearn.linear_model import LinearRegression\nreg = LinearRegression()\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","9bde19af":"#linear regression for one variable\nx_room = df_boston[\"rm\"]\ny_price = df_boston[\"medv\"]","f0d164bb":"x_room = np.array(x_room).reshape(-1,1)\ny_price = np.array(y_price).reshape(-1,1)","2f5a08cb":"from sklearn.model_selection import train_test_split\nx_train_1, x_test_1, y_train_1, y_test_1 = train_test_split(x_room, y_price, test_size=0.3,random_state = 4)","cebc79c3":"model = reg.fit(x_train_1,y_train_1)","5a5fb5d3":"print(\"intercept :\" ,model.intercept_)\nprint(\"coef :\", model.coef_)","d4cef896":"#model evaluation for tarining data \ny_train_pred_1 = reg.predict(x_train_1)","96c33891":"print(\"MAE is :\" , mean_absolute_error(y_train_1, y_train_pred_1))\nprint(\"MSE is :\", mean_squared_error(y_train_1, y_train_pred_1))\nprint(\"RMSE is :\", np.sqrt(mean_squared_error(y_train_1, y_train_pred_1)))\nprint(\"R^2 SCORE is :\", r2_score(y_train_1, y_train_pred_1))","07ec9d69":"#model evaluation for testing data \ny_test_pred_1 = reg.predict(x_test_1)","c135bb4b":"print(\"MAE is :\" , mean_absolute_error(y_test_1, y_test_pred_1))\nprint(\"MSE is :\", mean_squared_error(y_test_1, y_test_pred_1))\nprint(\"RMSE is :\", np.sqrt(mean_squared_error(y_test_1, y_test_pred_1)))\nprint(\"R^2 SCORE is :\", r2_score(y_test_1, y_test_pred_1))","55dd55c4":"plt.scatter(x_test_1, y_test_pred_1, color = \"r\", label = \"Predcted\")\nplt.scatter(x_test_1, y_test_1, color = 'b', label = \"Actual\")\nplt.title(\"Linear-Regression,Actual vs Predicted\",fontweight=\"bold\",fontsize=\"15\")\nplt.xlabel(\"number of rooms\",fontweight=\"bold\",fontsize=\"15\")\nplt.ylabel(\"medv\",fontweight=\"bold\",fontsize=\"15\")\nplt.legend()\nplt.show()\n","57d0fae1":"##regression model for all variables\nx = df_boston.drop([\"medv\"],axis = 1)\ny = df_boston[\"medv\"]","57839d34":"from sklearn.model_selection import train_test_split\nx_train_2, x_test_2, y_train_2, y_test_2 = train_test_split(x, y, test_size=0.3,random_state = 4)","e179873e":"reg.fit(x_train_2,y_train_2)","f209887f":"reg.intercept_","f1841be5":"reg.coef_","1276ce5d":"coeff = pd.DataFrame([x_train.columns,reg.coef_]).T\ncoeff = coeff.rename(columns={0:\"attribute\",1:\"coeffecients\"})\ncoeff","aa2d774c":"y_train_pred_2 = reg.predict(x_train_2)","9190214c":"print(\"MAE is :\" , mean_absolute_error(y_train_2, y_train_pred_2))\nprint(\"MSE is :\", mean_squared_error(y_train_2, y_train_pred_2))\nprint(\"RMSE is :\", np.sqrt(mean_squared_error(y_train_2, y_train_pred_2)))\nprint(\"R^2 SCORE is :\", r2_score(y_train_2, y_train_pred_2))","4c62c263":"#model evaluation for testing data \ny_test_pred_2 = reg.predict(x_test_2)","d9570642":"print(\"MAE is :\" , mean_absolute_error(y_test_2, y_test_pred_2))\nprint(\"MSE is :\", mean_squared_error(y_test_2, y_test_pred_2))\nprint(\"RMSE is :\", np.sqrt(mean_squared_error(y_test_2, y_test_pred_2)))\nprint(\"R^2 SCORE is :\", r2_score(y_test_2, y_test_pred_2))","c0790864":"plt.scatter(y_train_2,y_train_pred_2)\nplt.xlabel(\"medv\",fontweight=\"bold\",fontsize=\"15\")\nplt.ylabel(\"predicted medv\",fontweight=\"bold\",fontsize=\"15\")\nplt.title(\"Multiple Linear-Regression,Actual vs Predicted\",fontweight=\"bold\",fontsize=\"15\")\nplt.show()","4c3596ae":"from sklearn.preprocessing import PolynomialFeatures\n","bde9231d":"#for one variable\nX= df_boston[\"lstat\"]\ny = df_boston[\"medv\"]","b7427333":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,random_state = 4)","c60ef2fb":"np.array(X_train)","81e07edf":"poly_f = PolynomialFeatures(degree = 2)\npoly_f.fit(np.array(X_train).reshape(-1, 1))\n","a013c56f":"X_train_poly = poly_f.transform(np.array(X_train).reshape(-1, 1))\nX_test_poly = poly_f.transform(np.array(X_test).reshape(-1, 1))","54b6de1e":"model = reg.fit(X_train_poly, y_train)","fee0b232":"model.coef_","bc6de144":"model.intercept_","d5ca2760":"y_train_pred = model.predict(X_train_poly)","8cd5caf2":"print(\"MAE is :\" , mean_absolute_error(y_train, y_train_pred))\nprint(\"MSE is :\", mean_squared_error(y_train, y_train_pred))\nprint(\"RMSE is :\", np.sqrt(mean_squared_error(y_train, y_train_pred)))\nprint(\"R^2 SCORE is :\", r2_score(y_train, y_train_pred))","c28adbdb":"y_test_pred = model.predict(X_test_poly)","7e1990be":"print(\"MAE is :\" , mean_absolute_error(y_test, y_test_pred))\nprint(\"MSE is :\", mean_squared_error(y_test, y_test_pred))\nprint(\"RMSE is :\", np.sqrt(mean_squared_error(y_test, y_test_pred)))\nprint(\"R^2 SCORE is :\", r2_score(y_test, y_test_pred))","78900dd2":"plt.scatter(X_test, y_test_pred, color = \"r\", label = \"Predcted\")\nplt.scatter(X_test, y_test, color = 'b', label = \"Actual\")\nplt.title(\"Actual vs Predicted\",fontweight=\"bold\",fontsize=\"15\")\nplt.xlabel(\"lstat\",fontweight=\"bold\",fontsize=\"15\")\nplt.ylabel(\"medv\",fontweight=\"bold\",fontsize=\"15\")\nplt.legend()\nplt.show()","c2e559a0":"##regression model for all variables\nx = df_boston.drop([\"medv\"],axis = 1)\ny = df_boston[\"medv\"]","e1ec4e2b":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3,random_state = 4)","6d479146":"poly_f = PolynomialFeatures(degree = 2)\n","d4ab4e06":"x_poly = poly_reg.fit_transform(x_train)\npoly_reg.fit(x_poly, y_train)\nregressor_poly2 = LinearRegression()\nregressor_poly2.fit(x_poly, y_train)","0b170321":"model = reg.fit(x_poly, y_train)","a9a60733":"model.coef_","0851601f":"model.intercept_","1484a836":"y_pred_poly2_train = regressor_poly2.predict(poly_reg.fit_transform(x_train))","c2847684":"print(\"MAE is :\" , mean_absolute_error(y_train,  y_pred_poly2_train))\nprint(\"MSE is :\", mean_squared_error(y_train,  y_pred_poly2_train))\nprint(\"RMSE is :\", np.sqrt(mean_squared_error(y_train,  y_pred_poly2_train)))\nprint(\"R^2 SCORE is :\", r2_score(y_train,  y_pred_poly2_train))","d9cfaeea":"y_pred_poly2_test = regressor_poly2.predict(poly_reg.fit_transform(x_test))","3021dbef":"print(\"MAE is :\" , mean_absolute_error(y_test, y_pred_poly2_test))\nprint(\"MSE is :\", mean_squared_error(y_test, y_pred_poly2_test))\nprint(\"RMSE is :\", np.sqrt(mean_squared_error(y_test,y_pred_poly2_test)))\nprint(\"R^2 SCORE is :\", r2_score(y_test, y_pred_poly2_test))","fee97563":"plt.scatter(y_train,y_pred_poly2_train)\nplt.xticks(fontweight=\"bold\")\nplt.yticks(fontweight=\"bold\")\nplt.xlabel(\"medv\",fontweight=\"bold\",fontsize=\"15\")\nplt.ylabel(\"predicted medv\",fontweight=\"bold\",fontsize=\"15\")\nplt.title(\"Polynomial-Regression,Actual vs Predicted\",fontweight=\"bold\",fontsize=\"15\")\nplt.show()","2350c832":"models_1 = [('Linear Regression', mean_absolute_error(y_train_1, y_train_pred_1), mean_squared_error(y_train_1, y_train_pred_1), np.sqrt(mean_squared_error(y_train_1, y_train_pred_1)), r2_score(y_train_1, y_train_pred_1)),\n          ('Multiple Regression',mean_absolute_error(y_train_2, y_train_pred_2), mean_squared_error(y_train_2, y_train_pred_2), np.sqrt(mean_squared_error(y_train_2, y_train_pred_2)), r2_score(y_train_2, y_train_pred_2)),\n         ('Polynomial Regression (2nd)', mean_absolute_error(y_train, y_pred_poly2_train), mean_squared_error(y_train, y_pred_poly2_train), np.sqrt(mean_squared_error(y_train, y_pred_poly2_train)), r2_score(y_train, y_pred_poly2_train) )]\n          ","910b4281":"predict_1 = pd.DataFrame(data = models_1, columns=['Model', 'MAE(train)','MSE(train)','RMSE(train)', 'R2_Score(train)'])\npredict_1","1833fd9f":"models_2 = [('Linear Regression',mean_absolute_error(y_test_1, y_test_pred_1), mean_squared_error(y_test_1, y_test_pred_1), np.sqrt(mean_squared_error(y_test_1, y_test_pred_1)), r2_score(y_test_1, y_test_pred_1)) ,\n          ('Multiple Regression',mean_absolute_error(y_test_2, y_test_pred_2), mean_squared_error(y_test_2, y_test_pred_2), np.sqrt(mean_squared_error(y_test_2, y_test_pred_2)), r2_score(y_test_2, y_test_pred_2)),\n         ('Polynomial Regression (2nd)', mean_absolute_error(y_test, y_pred_poly2_test), mean_squared_error(y_test, y_pred_poly2_test), np.sqrt(mean_squared_error(y_test, y_pred_poly2_test)), r2_score(y_test, y_pred_poly2_test) )]\n          ","3350600a":"predict_2 = pd.DataFrame(data = models_2, columns=['Model', 'MAE(test)','MSE(test)','RMSE(test)', 'R2_Score(test)'])\npredict_2","3a4af917":"sns.barplot(x='R2_Score(test)', y='Model', data = predict_2, palette='Blues_d')\nplt.xlabel('R2_Score(testing)', fontsize=\"15\")\nplt.title(\"R2_Score of Testing-Data\",fontsize=\"22\",fontweight=\"bold\")\nplt.xticks(fontweight=\"bold\")\nplt.yticks(fontweight=\"bold\",fontsize=\"15\")\nplt.ylabel('Model',fontsize=\"15\")\nplt.xlim(0,1.0)\n","24b3ef3c":"sns.barplot(x='R2_Score(train)', y='Model', data = predict_1, palette='Reds_d')\nplt.xlabel('R2_Score', fontsize=\"15\",fontweight=\"bold\")\nplt.xticks(fontweight=\"bold\")\nplt.yticks(fontweight=\"bold\",fontsize=\"15\")\nplt.ylabel('Model',fontsize=\"15\",fontweight=\"bold\")\nplt.title(\"R2_Score of Training-Data\",fontsize=\"22\",fontweight=\"bold\")\nplt.xlim(0,1.0)","36efc9e8":"sns.barplot(x='Model', y='RMSE(test)', data=predict_2)\nplt.xlabel('Model', fontsize=\"16\",fontweight=\"bold\")\nplt.xticks(rotation=40,fontweight=\"bold\",fontsize=\"12\")\nplt.ylabel('RMSE', fontsize=\"16\")\nplt.title(\"Root Mean Squared Error Values\",fontsize=\"22\",fontweight=\"bold\")\nplt.show()","8252496d":"models = [('Linear Regression',r2_score(y_train_1, y_train_pred_1),r2_score(y_test_1, y_test_pred_1)) ,\n          ('Multiple Regression',r2_score(y_train_2, y_train_pred_2), r2_score(y_test_2, y_test_pred_2)),\n         ('Polynomial Regression (2nd)',r2_score(y_train, y_pred_poly2_train), r2_score(y_test, y_pred_poly2_test) )]\n          ","48657da4":"model = pd.DataFrame(data = models, columns=[\"Model\",\"R2_Score(train)\", \"R2_Score(test)\"])\nmodel","7b896e3f":"Hence Polynomial Regression works the best for this dataset","7f03a74b":"# Visualization","f4d022b8":"# Exploratory Data-Analysis","2b29be0d":"# Linear-Regression","b52dad6c":"# Polynomial Regression","9cd14cd2":"# Multiple Linear-Regression"}}