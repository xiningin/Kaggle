{"cell_type":{"539314ad":"code","e8ec6e10":"code","56f96ae6":"code","b04c473d":"code","74f72a98":"code","4e3f25c1":"code","f3b0bf3a":"code","aaa6b9fa":"code","84cc22e0":"code","63c88b4d":"code","5fd3c5f4":"code","4f35c291":"code","b6eb7faa":"code","1b945f23":"code","47a3de5d":"code","ab33879e":"code","378f268b":"code","fa774c4d":"code","2c76e629":"code","5f816d5b":"code","be141c25":"code","2aa9435d":"code","94c275c9":"code","d50409bd":"code","2ab6d24e":"code","3ccad76d":"code","2d15d180":"code","beb71042":"code","376d3fe0":"code","2a3dba5f":"code","226ffd85":"code","f9fc670e":"code","40c13951":"code","9bded510":"code","b9159420":"code","9c61878b":"code","023c663a":"code","1c154df5":"code","8988d481":"code","02464d7f":"code","414e0702":"code","10831b24":"code","c45647ec":"code","588aad56":"code","afc78a96":"code","57e8b98e":"code","fba5fab2":"markdown","aed038dc":"markdown","c3c67446":"markdown","322a44e9":"markdown","c8e19b45":"markdown","04288462":"markdown","b67ccf0f":"markdown","945e8a3f":"markdown","8a64702b":"markdown","e8f59e5d":"markdown","882b2f54":"markdown","b0e26a52":"markdown","b889d33e":"markdown","b1fbd6b4":"markdown","0492a41a":"markdown","c07df049":"markdown","2c4dc36e":"markdown","750996e9":"markdown","5e825a0b":"markdown","a45f139e":"markdown","838868da":"markdown","e7babd9d":"markdown","d4a53495":"markdown"},"source":{"539314ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e8ec6e10":"import pandas as pd\nimport glob\nfrom matplotlib import pyplot as plt\nimport os\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error as MSE\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.linear_model import LinearRegression ","56f96ae6":"# metadata\ndata = pd.read_csv('..\/input\/musicnet-dataset\/musicnet_metadata.csv')\ndata.head()","b04c473d":"print(data.info())","74f72a98":"data.nunique()","4e3f25c1":"# test data music\n\npath = '..\/input\/musicnet-dataset\/musicnet\/musicnet\/test_labels'\nall_files = glob.glob(path + \"\/*.csv\")\n\nli = []\n\nfor filename in all_files:\n    df = pd.read_csv(filename)\n    df['id'] = os.path.basename(filename[:-4])\n    li.append(df)\ntest = pd.concat(li, axis=0, ignore_index=True)\ntest['id'] = test['id'].astype(str).astype(int)","f3b0bf3a":"test.head()","aaa6b9fa":"test.info()","84cc22e0":"test.nunique()","63c88b4d":"# test data music\n\npath = '..\/input\/musicnet-dataset\/musicnet\/musicnet\/train_labels'\nall_files = glob.glob(path + \"\/*.csv\")\n\nli = []\n\nfor filename in all_files:\n    df = pd.read_csv(filename)\n    df['id'] = os.path.basename(filename[:-4])\n    li.append(df)\ntrain = pd.concat(li, axis=0, ignore_index=True)\ntrain['id'] = train['id'].astype(str).astype(int)","5fd3c5f4":"train.head()","4f35c291":"train.info()","b6eb7faa":"train.nunique()","1b945f23":"data_train = data.merge(train, on = 'id')\ndata_train = data_train.drop(['source', 'transcriber', 'catalog_name'], axis=1)","47a3de5d":"data_test = data.merge(test, on = 'id')\ndata_test = data_test.drop(['source', 'transcriber', 'catalog_name'], axis=1)","ab33879e":"entire_data = pd.concat([data_test, data_train])\nentire_data.head(5)","378f268b":"entire_data.shape","fa774c4d":"entire_data.nunique()","2c76e629":"# drop duplicated musics\nmusic_info = entire_data.drop_duplicates(subset=['id'])","5f816d5b":"ensemble = music_info['ensemble'].value_counts()\n\nlabel = [ensemble.index.tolist()]\nplt.pie(ensemble, shadow=True, autopct='%1.1f%%', startangle=90)\nplt.gcf().set_size_inches(12,12)\nplt.legend(labels=label[0], loc=\"best\")\nplt.style.use('seaborn')\nplt.show()","be141c25":"composer = music_info['composer'].value_counts()\n\nlabel = [composer.index.tolist()]\nplt.pie(composer, shadow=True, autopct='%1.1f%%', startangle=90)\nplt.gcf().set_size_inches(12,12)\nplt.legend(labels=label[0], loc=\"best\")\nplt.style.use('seaborn')\nplt.show()","2aa9435d":"music_info_ = music_info[music_info['ensemble'].isin(['Solo Piano', 'String Quartet', 'Accompanied Violin'])]\n\nhue = music_info_['composer'].value_counts(normalize=True)\n\nensemble_counts = (music_info_.groupby(['ensemble'])['composer']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index())\nsns.barplot(x=\"composer\", y=\"percentage\", hue=\"ensemble\", data=ensemble_counts)\nplt.gcf().set_size_inches(8,8)\nplt.legend(loc=\"right\")\nplt.style.use('seaborn')\nplt.show()","94c275c9":"# randomly music\nmusic_1759 = entire_data[entire_data['id'] == 1759]","d50409bd":"fig, (ax1, ax2) = plt.subplots(2, sharex=True)\n\nax1.plot(music_1759['start_time'], music_1759['note'])\nax1.set_title('Start time')\nax2.plot(music_1759['end_time'], music_1759['note'])\nax2.set_title('End time')\nplt.xlabel('Time')\nplt.ylabel('Note')\nplt.style.use('seaborn')\nplt.show()","2ab6d24e":"solo_piano = entire_data[entire_data['ensemble'] == 'Solo Piano']\nsolo_piano = solo_piano.drop(['id', 'composition', 'movement', 'ensemble', 'instrument', 'note_value'], axis=1)\nsolo_piano.head(5)","3ccad76d":"solo_piano['composer'].replace({'Beethoven':0,'Bach':1, 'Schubert':2,'Mozart':3, 'Brahms':4,'Cambini':5, 'Dvorak':6,'Faure':7, 'Ravel':8,'Haydn':9},inplace=True)","2d15d180":"X_piano = solo_piano.drop(['note'], axis=1) # Features\ny_piano = solo_piano['note'] # Labels","beb71042":"accompanied_violin = entire_data[entire_data['ensemble'] == 'Accompanied Violin']\naccompanied_violin = accompanied_violin.drop(['id', 'composition', 'movement', 'ensemble', 'instrument', 'note_value'], axis=1)\naccompanied_violin.head(5)","376d3fe0":"accompanied_violin['composer'].replace({'Beethoven':0,'Bach':1, 'Schubert':2,'Mozart':3, 'Brahms':4,'Cambini':5, 'Dvorak':6,'Faure':7, 'Ravel':8,'Haydn':9},inplace=True)","2a3dba5f":"X_violin = accompanied_violin.drop(['note'], axis=1) # Features\ny_violin = accompanied_violin['note'] # Labels","226ffd85":"X_train_p, X_test_p, y_train_p, y_test_p = train_test_split(X_piano, y_piano, test_size = 0.2, random_state=10)","f9fc670e":"# Decision tree regressor\ntree_p = DecisionTreeRegressor()\ntree_p.fit(X_train_p, y_train_p)\ny_pred_tree_p = tree_p.predict(X_test_p)\n\n# Linear regressor\nlinear_p = LinearRegression()\nlinear_p.fit(X_train_p, y_train_p)\ny_pred_linear_p = linear_p.predict(X_test_p)","40c13951":"test_p_ = X_test_p.copy()\ntest_p_['note'] = y_pred_tree_p\ntest_p_ = test_p_.sort_values(by=['start_time'])\ntest_p_.tail()","9bded510":"plt.plot(test_p_['start_time'], y_pred_tree_p)\nplt.xlabel('Time')\nplt.ylabel('Note')\nplt.style.use('seaborn')\nplt.gcf().set_size_inches(18,4)\nplt.show()","b9159420":"X_train_v, X_test_v, y_train_v, y_test_v = train_test_split(X_violin, y_violin, test_size = 0.2, random_state=10)","9c61878b":"# Decision tree regressor\ntree_v = DecisionTreeRegressor()\ntree_v.fit(X_train_v,y_train_v)\ny_pred_tree_v = tree_v.predict(X_test_v)\n\n# Linear regressor\nlinear_v = LinearRegression()\nlinear_v.fit(X_train_v, y_train_v)\ny_pred_linear_v = linear_v.predict(X_test_v)","023c663a":"test_v_ = X_test_v.copy()\ntest_v_['note'] = y_pred_tree_v\ntest_v_ = test_v_.sort_values(by=['start_time'])\ntest_v_.tail()","1c154df5":"plt.plot(test_v_['start_time'], y_pred_tree_v)\nplt.xlabel('Time')\nplt.ylabel('Note')\nplt.style.use('seaborn')\nplt.gcf().set_size_inches(18,4)\nplt.show()","8988d481":"r2_tree_p = r2(y_test_p, y_pred_tree_p)\nr2_linear_p = r2(y_test_p, y_pred_linear_p)\nprint('Tree regression R2:', r2_tree_p)\nprint('Linear regression R2:', r2_linear_p)","02464d7f":"r2_tree_v = r2(y_test_v, y_pred_tree_v)\nr2_linear_v = r2(y_test_v, y_pred_linear_v)\nprint('Tree regression R2:', r2_tree_v)\nprint('Linear regression R2:', r2_linear_v)","414e0702":"data_1759 = entire_data[entire_data['id'] == 1759]\ndata_1759 = data_1759.drop(['id', 'composition', 'movement', 'ensemble', 'instrument', 'note_value'], axis=1)\ndata_1759['composer'].replace({'Beethoven':0,'Bach':1, 'Schubert':2,'Mozart':3, 'Brahms':4,'Cambini':5, 'Dvorak':6,'Faure':7, 'Ravel':8,'Haydn':9},inplace=True)","10831b24":"X_1759 = data_1759.drop(['note'], axis=1)\ny_1759 = data_1759['note']\ny_pred_tree_1759 = tree_p.predict(X_1759)\nprint('Tree regression R2:', r2(y_1759, y_pred_tree_1759))","c45647ec":"plt.plot(X_1759['start_time'], y_pred_tree_1759)\nplt.xlabel('Start Time')\nplt.ylabel('Note')\nplt.style.use('seaborn')\nplt.show()","588aad56":"data_2628 = entire_data[entire_data['id'] == 2628]\ndata_2628 = data_2628.drop(['id', 'composition', 'movement', 'ensemble', 'instrument', 'note_value'], axis=1)\ndata_2628['composer'].replace({'Beethoven':0,'Bach':1, 'Schubert':2,'Mozart':3, 'Brahms':4,'Cambini':5, 'Dvorak':6,'Faure':7, 'Ravel':8,'Haydn':9},inplace=True)","afc78a96":"X_2628 = data_2628.drop(['note'], axis=1)\ny_2628 = data_2628['note']\ny_pred_tree_2628 = tree_v.predict(X_2628)\nprint('Tree regression R2:', r2(y_2628, y_pred_tree_2628))","57e8b98e":"plt.plot(X_2628['start_time'], y_pred_tree_2628)\nplt.xlabel('Start Time')\nplt.ylabel('Note')\nplt.style.use('seaborn')\nplt.show()","fba5fab2":"\ud83d\udccc As seen, almost half of the music were produced by Beethoven. Bach composed ~20% and Schubert composed ~9%.\n\n\ud83d\udccc Mozart and Brahms composed 7.3% of the music in the database. The remaining composers together produced less than 10%.\n\nLet's see how the most 3 played ensemble are distributed among composers:","aed038dc":"## 1.1. Read and check the data","c3c67446":"## 2.1. Ensemble analysis","322a44e9":"\ud83c\udfbc\ud83c\udfbc\ud83c\udfbc\n### Objective: generate models for producing music based on existing databases from great musicians! I have taken data from MusicNet Dataset and decided to join all music that were available.\n           \ud83c\udfb5        \ud83c\udfb6                                       \ud83c\udfbc\ud83c\udfbc\ud83c\udfbc\n                                 \ud83c\udfb5    \ud83c\udfb6                                                 \ud83c\udfbc\ud83c\udfbc\ud83c\udfbc","c8e19b45":"![Untitled Diagram1.png](attachment:fdd9d143-3d9d-47ca-b376-e3c15d580983.png)","04288462":"# 4. Models \ud83d\udda5\ufe0f\n![Untitled Diagram13.png](attachment:28f87787-e37e-4cf0-a1d0-83f0df6a1004.png)\n\n## 4.1 Solo Piano\nI used the Decision Tree Regressor and the Liner Regressor to predict the notes.","b67ccf0f":"From the data...\n\n\ud83d\udccc no null values\n\n\ud83d\udccc test and train data are equal but for different music\n\n\ud83d\udccc metadata table has relevant information that are not present on music data, such as: composer name, composition, movement or ensemble. \n\nTherefore... lets merge and concate all the data\n\n## 1.2. Merge and concatenate\n![Untitled Diagram12.png](attachment:103a61ff-24e6-457c-813c-8cd1c02dc7b0.png)","945e8a3f":"## 3.2. Accompanied violin","8a64702b":"# 1. Read and prepare the data\n![Untitled Diagram13.png](attachment:175be799-63d8-4852-b12c-e661c04363e0.png)\n\nDatabase is composed by 3 types:\n\n   - the data with the overall information of the data bases (metadata) \n   \n   - test data with information per music (test data)  \n   \n   - train data with information per music (train data)\n   \n![Untitled Diagram8.png](attachment:d368fba5-3ca6-4c91-952e-c39ddfaecc20.png)\n\nThe data read and preparation will:\n\n\u2714\ufe0f read and check the data head\n\n\u2714\ufe0f all music will be concated in one train and test database with the music 'id' indicated\n\n\u2714\ufe0f check the data info and null values\n\n\u2714\ufe0f check the unique values per variable","e8f59e5d":"Both models present a low coefficient of regression and Tree regression fits better to models than Linear Regression. However, I applied these models to single musics to check \n\n## 4.3. Prediction using the created models\n\nI used two music to evaluate my models. I randomly used the 1759 music and for solo piano fit and 2628 for accompanied violin fit. \n\nThe Tree Regression model was used.\n\n### 4.3.1. Solo Piano","882b2f54":"## Imported libraries \ud83d\udcda","b0e26a52":"\ud83d\udccc The plots shows the note evolution over start and end time.\n\n# 3. Data preprocessing \ud83d\uddf3\ufe0f\n![Untitled Diagram13.png](attachment:b9f234c5-48c2-4c2a-816f-0f939f933d72.png)\n\nHere I prepared the data to perform different predictions:\n- Solo piano\n- Accompanied violin\n\nI worked with the entire data. For this study, I considered that the relevant information were:\n- the composer (that is relevant for the music generation since he influences it)\n- the duration of the music\n- the note (the value I want to predict)\n- start time and end time (that a note is played)\n- start beat and end beat (that indicates the note value)\n\n## 3.1. Solo piano","b889d33e":"\ud83d\udccc Solo piano is the most common type of ensemble (47.3%) followed by the string quartet (17.3%) and accompanied violin (6.7%). So... let's focus on Solo piano data \ud83c\udfb9\n\n## 2.2. Composer analysis","b1fbd6b4":"# 2. Data analysis \ud83d\udcca\n![Untitled Diagram13.png](attachment:2c49eeed-ee1a-4cc3-9245-cb58bfcd00e5.png)\n\nHere I analysed the data to check any patterns or main characteristics so find out what type of music I could choose to perform my study.\n\nFirstly I cleaned the table by leaving only information regarding to one music (drop the 'id')","0492a41a":"\ud83d\udccc The plot shows the predicted notes vs start time for the test data.\n\n# 5. Models evaluation \ud83d\udcdd\n![Untitled Diagram13.png](attachment:34b827c3-fa7f-4c47-8f15-cedd399fc9ac.png)\n\nI checked my models performance using the R$^2$ to see what one was better.\n\n## 4.1. Solo Piano","c07df049":"\ud83d\udccc Beethoven wrote all of the accompanied violin plays.\n\n\ud83d\udccc Solo piano is from by Beethoven (60%), Bach and Schubert.\n\n\ud83d\udccc String quartet is more distributed among composers.\n\nBased on this analysis it will be interesting to consider two cases for performing the predictions:\n- Solo piano music (that were composed by 3 composers (Beethoven, Bach, Schubert))\n- Accompanied Violin (that has only one composer)\n\n## 2.3 Individual music analysis","2c4dc36e":"\ud83d\udccc The plot shows the predicted notes vs start time for the test data.\n\n## 4.2 Accompanied violin","750996e9":"### 4.3.2. Accompanied Violin","5e825a0b":"For the used music the R2 fairer better. \n\n# 6. Conclusions \ud83d\udccc\n![Untitled Diagram13.png](attachment:ef6804e8-8fb5-4c5a-a210-5a688cbe1a51.png)\n\nWith this project I intended to predict music based on existing databases from great composers. \n\nThe target was to predict notes based on composers (that define the style), start time, end time, start beat and end beat of notes. As main conclusions:\n\n\u270f\ufe0f Tree Regression presents better fits than Linear Regression \ud83d\udfe2\n\n\u270f\ufe0f Models were fitted to single music and showed good results \u2611\ufe0f\n\n\u270f\ufe0f We can used these models to reproduce more music and assert its quality! \ud83c\udfb6\n\nI was not able to reproduce the music, but feel free to try! \ud83d\ude0a","a45f139e":"Let's replace the composer name by numerical values.","838868da":"# Table of contents \ud83d\udccb \n![Untitled Diagram13.png](attachment:c0d813e0-c109-470d-a566-292711e2bd20.png)\n\n**1. Read and prepare the data**\n\n**2. Data analysis** \n\n**3. Data preprocessing**\n\n**4. ML models**\n\n**5. Models evaluation**\n\n**6. Conclusions**","e7babd9d":"## 4.2. Accompanied violin","d4a53495":"\ud83d\udccc **NOTE**: This notebook is for celebrating great some of our great composers by trying to play and having fun in creating music from their plays."}}