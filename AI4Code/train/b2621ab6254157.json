{"cell_type":{"f06599c9":"code","eeea4a3c":"code","9c5dc430":"code","5aa30ea3":"code","2214d920":"code","76a55f7f":"code","a8d7de60":"code","33a11c0b":"code","2b745bcd":"code","fd8cfb02":"code","03c3d744":"code","799725e6":"code","70b4a98d":"code","ce9d7f98":"code","7066d752":"code","ec87f440":"code","762e0110":"code","81e275b8":"code","b4145741":"code","e5e4a2dc":"code","0fcce5ec":"code","d251b361":"code","d677319f":"code","bf4a3937":"code","14932596":"code","2098a525":"code","26971606":"code","e7e4b0d3":"code","c8558420":"code","c4618423":"code","1fc3ae8f":"markdown","2277ec7a":"markdown","debfbe1a":"markdown"},"source":{"f06599c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","eeea4a3c":"#Importing necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","9c5dc430":"#Reading the train and test data\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')","5aa30ea3":"#Checking data\ntrain_df.head()","2214d920":"test_df.head()","76a55f7f":"#Check info\ntrain_df.info()\nprint('-----------------------------------------------------------------')\ntest_df.info()","a8d7de60":"#Remove the target feature i.e. Survived\ny1 = train_df['Survived'].copy()\ntrain_df.drop(columns=['Survived'],inplace=True)","33a11c0b":"train_df.describe()","2b745bcd":"train_df.isnull().sum()","fd8cfb02":"test_df.isnull().sum()","03c3d744":"# We have missing values in Age, Cabin and Embarked\n# Cabin has a lot of missing values so we will drop the column\ntrain_df.drop(columns=['Cabin'],inplace=True)\ntest_df.drop(columns=['Cabin'],inplace=True)\n# Age is a numerical data, so we will use median to fill the missing values\ntrain_df['Age'].fillna(train_df['Age'].median(),inplace=True)\ntest_df['Age'].fillna(test_df['Age'].median(),inplace=True)\n\n# Fare in test data\ntest_df['Fare'].fillna(test_df['Fare'].median(),inplace=True)","799725e6":"# Embarked in train data\n# Find category and it's counts\ntrain_df['Embarked'].value_counts().plot(kind='bar',figsize=(6,4), title='Embarked')","70b4a98d":"# We will replace S which has the highest frequency in the place of missing values\ntrain_df['Embarked'].fillna('S',inplace=True)","ce9d7f98":"# PassengerId, Ticket are not of any use\ntrain_df.drop(columns=['PassengerId','Ticket'],inplace=True)\ntest_df.drop(columns=['PassengerId','Ticket'],inplace=True)\n","7066d752":"# Feature Enginnering\ntrain_df['Title'] = train_df['Name'].apply(lambda x: x[x.find(',')+2:x.find('.')])\ntest_df['Title'] = test_df['Name'].apply(lambda x: x[x.find(',')+2:x.find('.')])","ec87f440":"train_df['Title'] = train_df['Title'].replace(['Mme','Ms'],'Mrs')\ntrain_df['Title'] = train_df['Title'].replace(['Mlle','Lady'],'Miss')\ntrain_df['Title'] = train_df['Title'].replace(['the Countess',\n                                               'Capt', 'Col','Don', \n                                               'Dr', 'Major', 'Rev', \n                                               'Sir', 'Jonkheer', 'Dona'], 'Others')\n\ntest_df['Title'] = test_df['Title'].replace(['Mme','Ms'],'Mrs')\ntest_df['Title'] = test_df['Title'].replace(['Mlle','Lady'],'Miss')\ntest_df['Title'] = test_df['Title'].replace(['the Countess',\n                                               'Capt', 'Col','Don', \n                                               'Dr', 'Major', 'Rev', \n                                               'Sir', 'Jonkheer', 'Dona'], 'Others')","762e0110":"train_df['Title'].value_counts().plot(kind='bar', figsize=(6,4), title='Title')","81e275b8":"test_df['Title'].value_counts().plot(kind='bar', figsize=(6,4), title='Title')","b4145741":"# Drop Name Column\ntrain_df.drop(columns=['Name'],inplace=True)\ntest_df.drop(columns=['Name'],inplace=True)","e5e4a2dc":"train_df = pd.get_dummies(columns=['Title','Embarked','Sex'],data=train_df)\ntest_df = pd.get_dummies(columns=['Title','Embarked','Sex'],data=test_df)","0fcce5ec":"#Training data\nx = train_df.iloc[:,:].values\ny = y1.values\n\n#Test data\ntest = test_df.iloc[:,:].values","d251b361":"from sklearn.model_selection import train_test_split\nxtr,xvl,ytr,yvl = train_test_split(x,y,test_size=0.25,random_state=0)","d677319f":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=10,criterion='entropy',random_state=0)\nrf.fit(xtr,ytr)\nrf.score(xtr,ytr)","bf4a3937":"y_pred = rf.predict(xvl)","14932596":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_pred,yvl)\ncm","2098a525":"y_pred2 = rf.predict(test)","26971606":"submission = pd.read_csv('..\/input\/gender_submission.csv')\ndf = pd.DataFrame({'Survived':y_pred2})\nsubmission.update(df)","e7e4b0d3":"from lightgbm import LGBMClassifier","c8558420":"lgb = LGBMClassifier(objective='binary',random_state=0)\nlgb.fit(x,y)\nlgb.score(x,y)","c4618423":"y_pred2 = lgb.predict(test)\nsubmission = pd.read_csv('..\/input\/gender_submission.csv')\ndf = pd.DataFrame({'Survived':y_pred2})\nsubmission.update(df)","1fc3ae8f":"We will drop unnecessary columns from our data that do not have any significant impact","2277ec7a":"<h1>Modelling<\/h1>","debfbe1a":"Except the target value, we have 2 float, 4 integer and 5 object dtypes columns.\nNow we will explore our data."}}