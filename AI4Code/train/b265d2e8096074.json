{"cell_type":{"51679247":"code","b699a358":"code","3e9778e5":"code","6d47b1b9":"code","696c6c78":"code","5422bbc8":"code","b9ddabd5":"code","b7910807":"code","3e2e65ea":"code","d2ee0104":"code","1d3f421b":"code","6933a36f":"code","1f87c2dd":"code","eb38366c":"code","28d41214":"code","bbd822f5":"code","f9cf12ff":"code","9df83ac0":"code","779bf74e":"code","d20bd437":"code","13d2b3ba":"code","9081df56":"code","326abbd0":"code","40f9d9b4":"code","49108052":"code","a41d56f4":"code","03700a15":"code","f510bd08":"code","82438087":"code","3bc06ecd":"code","9db3c42c":"code","652777e7":"code","7a6c82ef":"code","0a859304":"code","669cc3a0":"code","aed1f8cc":"code","26db4d1a":"markdown","1429d8e3":"markdown","eeb2b158":"markdown","2a1ab906":"markdown","29ab1e1d":"markdown","b3675c13":"markdown","f5b584a9":"markdown","f1cf49d8":"markdown","fe1df1a0":"markdown","4e2520f2":"markdown","a6bbd7f3":"markdown","f1e288b2":"markdown","729fcfc2":"markdown"},"source":{"51679247":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b699a358":"# Put these at the top of every notebook, to get automatic reloading and inline plotting\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","3e9778e5":"# This file contains all the main external libs we'll use\nfrom fastai.imports import *\nfrom fastai.transforms import *\nfrom fastai.conv_learner import *\nfrom fastai.model import *\nfrom fastai.dataset import *\nfrom fastai.sgdr import *\nfrom fastai.plots import *\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split","6d47b1b9":"#set the path\nPATH=\"..\/input\"\nos.listdir(PATH)","696c6c78":"train=pd.read_csv(f'{PATH}\/train.csv')\ntest=pd.read_csv(f'{PATH}\/test.csv')","5422bbc8":"image=train.iloc[:,1:]\nlbl=train.iloc[:,0:1]\n","b9ddabd5":"#Reshape an existing 2D pandas.dataframe into 3D-numpy.ndarray\nimg=image.as_matrix()\nimg=img.reshape(-1,28,28)\ntest_img=test.as_matrix()\ntest_img=test_img.reshape(-1,28,28)\n#Add missing color channels to previously reshaped image\nimg=np.stack((img,)*3, axis=-1).astype('float32')\ntest_img=np.stack((test_img,)*3, axis=-1).astype('float32')\n  \n#plt.imshow(img[2])\n#plt.title(lbl.iloc[i,0]);\n\n","b7910807":"plt.imshow(img[3]);","3e2e65ea":"#not required\n#convert images into a proper np.ndarray\n#img=img.flatten()\n#print([i.shape for i in img])","d2ee0104":"train_img, val_img, train_lbl, val_lbl=train_test_split(img, lbl, train_size=0.8,random_state=1)","1d3f421b":"grp=[train_img, val_img, train_lbl, val_lbl, test_img]\nprint([e.shape for e in grp])\nprint([type(e) for e in grp])","6933a36f":"train_lbl=train_lbl.values.flatten()\nval_lbl=val_lbl.values.flatten()","1f87c2dd":"grp=[train_img, val_img, train_lbl, val_lbl]\nprint([e.shape for e in grp])\nprint([type(e) for e in grp])","eb38366c":"arch=resnet34\nsz=28\nclasses=np.unique(train_lbl)\ndata=ImageClassifierData.from_arrays(path=\"\/tmp\",trn=(train_img\/255, train_lbl),\n                                     val=(val_img\/255, val_lbl),\n                                     classes=train_lbl,\n                                     test=test_img\/255,\n                                     tfms=tfms_from_model(arch, sz, max_zoom=1.1))\n","28d41214":"learn=ConvLearner.pretrained(arch, data, precompute=True)","bbd822f5":"learn.lr_find()","f9cf12ff":"learn.sched.plot_lr()","9df83ac0":"learn.sched.plot()","779bf74e":"learn=ConvLearner.pretrained(arch, data, precompute=True)","d20bd437":"learn.fit(0.01,9)","13d2b3ba":"learn=ConvLearner.pretrained(arch, data, precompute=False)","9081df56":"#learn.precompute=False\nlearn.fit(0.01,9, cycle_len=1)","326abbd0":"learn.sched.plot_lr()","40f9d9b4":"learn.unfreeze()","49108052":"lr=np.array([1e-4,1e-3,1e-2])","a41d56f4":"learn.fit(lr, 4, cycle_len=1, cycle_mult=2)","03700a15":"learn.sched.plot_lr()","f510bd08":"learn.save('4_epochs')","82438087":"#predict the test set\n%time log_preds_test, y_test=learn.TTA(is_test=True)\nprobs_test=np.mean(np.exp(log_preds_test),0)\nprobs_test.shape\n\n","3bc06ecd":"#Create a dataframe from all probabilities\ndf=pd.DataFrame(probs_test)","9db3c42c":"\ndf.head()","652777e7":"#consider the maxm probability\n\ndf=df.assign(Label=df.values.argmax(axis=1))\ndf=df.assign(ImageId=df.index.values+1)","7a6c82ef":"df1=df[['ImageId', 'Label']]","0a859304":"df1.head()","669cc3a0":"df1.shape","aed1f8cc":"df1.to_csv(\"submission.csv\", index=False)","26db4d1a":"**Introduction:**\nThis is based on Fast AI library Lesson 1( Dogs Vs Cats) using resnet 34 pre-trained model with help from A Beginner's Approach to Classification by archaeocharlie & MNIST test with fastai library by Stefan Langenbach\n","1429d8e3":"Fine tuning other layers with final layer being trained. ","eeb2b158":"Since the label is in the form of dataframe, it needs to be converted into array","2a1ab906":"Moving to the second chapter.  We will use cycle rate and data augmentations.  Re-run ConvLearner code again","29ab1e1d":"To create a submission file","b3675c13":"Cycle Mult multiplies the length of the cycle after each cycle. e.g. epoch=4, cycle_mult=2 then it multiples the length of the cycle after each cycle (1 epoch + 2 epoch + 4 epoch + 8 epoch=15 epochs)","f5b584a9":"To view as image and load into fastai library using image classifier data.  Since pre-trained model resnet has 3 channels, we will have to multiply the channels by 3 the test and train data","f1cf49d8":"Based on the above plot, we will select 0.01 as the learning rate. Before running the below code, re-run ConvLearner and run the below code","fe1df1a0":"The above training file contains both images and labels.  These have to be split. First column is a label\n","4e2520f2":" The earlier layers (as we've seen) have more general-purpose features. Therefore we would expect them to need less fine-tuning for new datasets. For this reason we will use different learning rates for different layers: the first few layers will be at 1e-4, the middle layers at 1e-3, and our FC layers we'll leave at 1e-2 as before. We refer to this as differential learning rates,","a6bbd7f3":"Cycle_len hasn't improved the accuracy or the loss. Cycle_len enables stochastic gradient descent with restarts (SGDR).  This helps model to jump to the different part in the weight space","f1e288b2":"Using Pandas to upload the file","729fcfc2":"Split the Training dataset into Train and Valid"}}