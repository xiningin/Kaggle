{"cell_type":{"15bca0f9":"code","47cac50d":"code","e5f19d3c":"code","d71fe080":"code","f6ebc3c0":"code","8f113064":"code","7b71a4d4":"code","f0481f65":"code","bfe84e9a":"code","1df2d46d":"markdown","017ae0c1":"markdown","65e19754":"markdown","a28e07d2":"markdown","24d3c979":"markdown","5e604b8d":"markdown"},"source":{"15bca0f9":"import numpy as np  #importing numpy","47cac50d":"np_arr = np.array([1,2,0,3,4])\nprint(np_arr)\n\nno_zero=np.all(np_arr)  #Return True when all elements are non-zero \nprint(no_zero)\n\nany_zero=np.any(np_arr) #Return True when any element is non-zero\nprint(any_zero)","e5f19d3c":"np_arr1 = np.array([1,0,-1,np.nan,np.inf]) \nprint(np_arr1)\n\nprint(\"Checking INFINITY : \",end='')\nprint(np.isinf(np_arr1))  #Return True when element is INFINITY\n\nprint(\"Checking NOT INFINITY : \", end='')\nprint(np.isfinite(np_arr1)) #Return True when element is NOT INFINITY\n\nprint(\"Checking Nan : \",end='')\nprint(np.isnan(np_arr1))   #Return True when element is NaN","d71fe080":"np_arr2 = np.array([1,0,-1,1+2j])\nprint(np_arr2)\n\nprint(\"Checking COMPLEX No. : \",end='')\nprint(np.iscomplex(np_arr2))   #Return True for element which is COMPLEX\n\nprint(\"Checking REAL No. : \",end='')\nprint(np.isreal(np_arr2))      #Return True for element which is REAL\n\nprint(\"Checking Number is SCALAR or NOT : \",end='')\nprint(np.isscalar(np_arr2[0]))    #Return True if element is SCALAR\n","f6ebc3c0":"print(\"np_arr : \",end='')\nprint(np_arr)\nprint(\"np_arr1 : \",end='')\nprint(np_arr1)\n\nprint(\"Checking 2 arrays are equal elementwise : \",end='')\nprint(np.equal(np_arr,np_arr1))   #Return True if elements in given arrays are equal\n\nprint(\"Checking 2 arrays are greater elementwise : \",end='')\nprint(np.greater(np_arr,np_arr1))   #Return True if elements in 1st arrays are greater than second array\n\n#Similar Functions are : less, less_equal, greater_equal\n\n#NOTE : Size of both arrays must be equal.","8f113064":"print(\"Size of array\")\nprint(np_arr1.size)     #Gives the total no of elements in array\n\nprint(\"Memory occupied by element in array\")\nprint(np_arr.itemsize)  #Gives the memory size occupied by single element\n","7b71a4d4":"print(\"FLOAT ARRAY : \",end='')\nnp_float = np.array([1,2,3,4], dtype=float)\nprint(np_float)\nprint(\"Size of each element as float : \" ,end='')\nprint(np_float.itemsize)","f0481f65":"print(\"COMPLEX ARRAY : \",end='')\nnp_complex = np.array([1,2,3,4], dtype=complex)\nprint(np_complex)\nprint(\"Size of each element as complex: \" ,end='')\nprint(np_complex.itemsize)","bfe84e9a":"print(\"STRING ARRAY : \",end='')\nnp_string = np.array([1,2,3,4], dtype=str)\nprint(np_string)\nprint(\"Size of each element as string : \" ,end='')\nprint(np_string.itemsize)","1df2d46d":" **ItemSize and Size of array in MEMORY**","017ae0c1":"**Checking FINITIES of elements in given array.**","65e19754":"**Checking if ALL or ANY element of given array is NON_ZERO** ","a28e07d2":"**Check element-wise for complex number, real number and element is scalar.** \n\n","24d3c979":"**Comparing 2 arrays Elementwise** ","5e604b8d":"When I start learning Machine Learning and Data Science, First difficulty i faced how to practice the concept I learned and where to look up if I have to revise those concepts.Because PRACTICE is the only way to be good in something. So here I am uploading exercises and imp functions,usecase,examples of required skills to learn ML,DL. \nIn these notebook some of the basic use of Numpy is shown. I hope it is useful for beginners.I will upload others exercises too.\nRefrence : https:\/\/www.w3resource.com\/python-exercises\/numpy\/basic\/index.php\n\nAny suggestions\/feedback will be useful and appericited that helps the beginners like me to grow."}}