{"cell_type":{"f245d622":"code","5d21315f":"code","674cc525":"code","a51b7a9c":"code","a308b37d":"code","62a0fe39":"code","c7b35b28":"code","0f6f16e1":"code","84ea0885":"code","f7720bfa":"code","88b2e0ed":"code","16b36682":"code","98a3e989":"code","b46f12f5":"code","d6e213b7":"code","e662cc82":"code","5ba23d1d":"code","0995839b":"code","b3197131":"code","ca850718":"code","aaf01205":"code","d81cf20e":"code","1eb8e287":"code","05a175fc":"code","0ff36d60":"code","f284fa77":"code","feceffe5":"code","1498b9a1":"code","11f70740":"code","7ea0799b":"code","440ad41c":"code","d726190d":"code","8f51fdb3":"code","ddc742fa":"code","6c875458":"code","56311f12":"code","9762c090":"code","be3e1d6c":"code","bd0af172":"code","a11a2ae7":"code","5ea62a71":"code","bf2b88f1":"code","e8d1be2f":"code","5299e205":"code","ef05014e":"code","f2d8fec1":"code","df44f75f":"code","6b875482":"code","861df7db":"code","202ef5d5":"markdown","76fac228":"markdown","e6e741ad":"markdown","b95c1b0f":"markdown","be639d28":"markdown","3ecc367a":"markdown","22ef40f7":"markdown","37e85eea":"markdown","83054008":"markdown","60341fb2":"markdown","98259a99":"markdown","90fd3191":"markdown","ca669ce9":"markdown","234df88a":"markdown","3d95463d":"markdown","921ce90d":"markdown","ca014582":"markdown","612ba73d":"markdown","9fd40374":"markdown","a0db62d2":"markdown","7178e459":"markdown","351a0a19":"markdown","0e7a4b46":"markdown","f040c382":"markdown","3e6daa1a":"markdown","38ba30ba":"markdown","5e472bff":"markdown","fa96f036":"markdown","bff879eb":"markdown","d07e6379":"markdown","654818ca":"markdown","e7c408d5":"markdown","4e4b300a":"markdown","35d97026":"markdown","2c72ae7a":"markdown","76bb3852":"markdown"},"source":{"f245d622":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline\n\n# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets","5d21315f":"from keras.datasets import mnist\n\nfrom keras.models import Sequential, load_model\n\nfrom keras.layers import Dense, Dropout, Flatten\n\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\n\nfrom keras.utils.np_utils import to_categorical","674cc525":"import cv2\nimport os\nimport glob","a51b7a9c":"# Affichage des fichiers dans le r\u00e9pertoire de donn\u00e9es Kaggle\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a308b37d":"img_dir = \"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/cats\" # Enter Directory of all images \ndata_path = os.path.join(img_dir,'*g')\nfiles = glob.glob(data_path)\nX=[]\ny=[]\nfor f1 in files:\n    img = cv2.imread(f1)\n    img = cv2.resize(img, (100,100))\n    X.append(np.array(img))\n    y.append(0)\nn_cats = len(X)","62a0fe39":"plt.imshow(X[0])\nplt.title(y[0])","c7b35b28":"np.array(X).shape","0f6f16e1":"plt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(X[i])\n    plt.title('Label: %i' % y[i])","84ea0885":"img_dir = \"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/dogs\" # Enter Directory of all images \ndata_path = os.path.join(img_dir,'*g')\nfiles = glob.glob(data_path)\nfor f1 in files:\n    img = cv2.imread(f1)\n    img = cv2.resize(img, (100,100))\n    X.append(np.array(img))\n    y.append(1)\nn_dogs = len(X)-n_cats","f7720bfa":"print(n_dogs)\nprint(n_cats)","88b2e0ed":"plt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(X[n_cats+i])\n    plt.title('Label: %i' % y[n_cats+i])","16b36682":"X = np.array(X)\ny = np.array(y)","98a3e989":"X.shape","b46f12f5":"# Normalisation entre 0 et 1\nX = X \/ 255\nprint(X[0][0])","d6e213b7":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","e662cc82":"# R\u00e9seau convolutionnel simple\nmodel = Sequential()\nmodel.add(Conv2D(32, (5, 5), input_shape=(100, 100, 3), activation='relu'))\n#model.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\n#model.add(Dense(128, activation='relu'))\nmodel.add(Dense(1))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])\n","5ba23d1d":"model.summary()","0995839b":"# Apprentissage\ntrain = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=200, verbose=1)","b3197131":"# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","ca850718":"print(train.history['accuracy'])","aaf01205":"print(train.history['val_accuracy'])","d81cf20e":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","1eb8e287":"plot_scores(train)","05a175fc":"# Prediction\ny_cnn = model.predict_classes(X_test)","0ff36d60":"cm = confusion_matrix(y_cnn,y_test)\nprint(cm)\nplt.figure(figsize = (12,10))","f284fa77":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (y_cnn[j] != y_test[j]) & (i<50):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        pred_classe = y_cnn[j].argmax(axis=-1)\n        plt.title('%d \/ %d' % (y_cnn[j], y_test[j]))\n        i+=1","feceffe5":"# Mod\u00e8le CNN plus profond\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(100, 100, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(1))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])","1498b9a1":"model.summary()","11f70740":"# Apprentissage\ntrain = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, batch_size=200, verbose=1)\n\n# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","7ea0799b":"plot_scores(train)","440ad41c":"model.save('mnist_cnn2.h5')","d726190d":"new_model = load_model('mnist_cnn2.h5')\nnew_model.summary()","8f51fdb3":"scores = new_model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","ddc742fa":"from keras.applications import VGG16","6c875458":"vgg16 = VGG16(weights='imagenet', include_top=False, input_shape=(100,100,3))\nvgg16.trainable = False","56311f12":"vgg16.summary()","9762c090":"model = Sequential()\nmodel.add(vgg16)\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(1))","be3e1d6c":"model.summary()","bd0af172":"model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])","a11a2ae7":"train = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=200, verbose=1)","5ea62a71":"# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","bf2b88f1":"for i in range (len(vgg16.layers)):\n    print (i,vgg16.layers[i])","e8d1be2f":"for layer in vgg16.layers[15:]:\n    layer.trainable=True\nfor layer in vgg16.layers[0:15]:\n    layer.trainable=False","5299e205":"model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])\ntrain = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=200, verbose=1)","ef05014e":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","f2d8fec1":"plot_scores(train)","df44f75f":"y_cnn = model.predict_classes(X_test)","6b875482":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (y_cnn[j] != y_test[j]) & (i<50):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        pred_classe = y_cnn[j].argmax(axis=-1)\n        plt.title('%d \/ %d' % (y_cnn[j], y_test[j]))\n        i+=1","861df7db":"from keras.applications import InceptionV3, ResNet50V2","202ef5d5":"On d\u00e9finit une fonction pour afficher un graphique des scores :","76fac228":"## Initialisations","e6e741ad":"On affiche 50 images o\u00f9 l'algorithme s'est tromp\u00e9 :","b95c1b0f":"## Exercices","be639d28":"On peut \"d\u00e9geler\" les derni\u00e8res couches :","3ecc367a":"On teste un mod\u00e8le avec deux couches convolutionnelles :","22ef40f7":"## Mod\u00e8le CNN plus profond","37e85eea":"Pour installer Keras et Tensorflow sans GPU :","83054008":"D\u00e9tection de pneumonie sur des radios :  \nhttps:\/\/www.kaggle.com\/paultimothymooney\/chest-xray-pneumonia  \n  \nD\u00e9tection de cellules infect\u00e9es par la malaria :  \nhttps:\/\/www.kaggle.com\/iarunava\/cell-images-for-detecting-malaria","60341fb2":"On peut afficher la matrice de confusion :","98259a99":"On lit de m\u00eame les images de chiens, en positionnant la cible *y* \u00e0 1 :","90fd3191":"## Keras et Tensorflow","ca669ce9":"## Lecture des images","234df88a":"On d\u00e9compose en ensemble d'apprentissage et de validation :","3d95463d":"## Transfer learning","921ce90d":"Le mod\u00e8le entrain\u00e9 peut \u00eatre sauvegard\u00e9 :","ca014582":"Il existe plusieurs autres mod\u00e8les plus complexes :\nhttps:\/\/keras.io\/applications\/","612ba73d":"On peut ensuite utiliser le mod\u00e8le sans recommencer l'entra\u00eenement :","9fd40374":"Pour une installation locale :\npip install opencv-python\n","a0db62d2":"On va utiliser utiliser une couche convolutionnelle pour l'extraction des caract\u00e9ristiques, et une couche dense pour la classification :","7178e459":"On affiche les 50 premi\u00e8res images de chats :","351a0a19":"# R\u00e9seaux convolutionnels : CNN","0e7a4b46":"On transforme les listes Python en tableau :","f040c382":"L'apprentissage peut \u00eatre un peu long sans GPU ...","3e6daa1a":"et sur l'ensemble de validation :","38ba30ba":"On peut afficher la structure du mod\u00e8le :","5e472bff":"conda install -c conda-forge keras\nconda install -c conda-forge tensorflow ","fa96f036":"On ajoute des couches pour entra\u00eener le mod\u00e8le \u00e0 partir du dataset, sans modifier les poids existants du VGG16 :","bff879eb":"On parcourt le r\u00e9pertoire des images de chats, on lit chaque image, on la redimensionne et on l'ajoute au caract\u00e9ristiques *X*. Pour les chats, on positionne la cible *y* \u00e0 0","d07e6379":"On utilise le dataset *Cat and Dog* : https:\/\/www.kaggle.com\/tongpython\/cat-and-dog","654818ca":"Pour installer la version GPU sous windows, cf https:\/\/medium.com\/@raza.shahzad\/setting-up-tensorflow-gpu-keras-in-conda-on-windows-10-75d4fd498198  \nSous Linux : http:\/\/deeplearning.lipingyang.org\/2017\/08\/01\/install-keras-with-tensorflow-backend\/  \nSous MacOS (avec GPU Nvidia) : https:\/\/blog.wenhaolee.com\/run-keras-on-mac-os-with-gpu\/","e7c408d5":"La variable *train* m\u00e9morise l'historique des scores sur l'ensemble d'apprentissage :","4e4b300a":"## Une couche convolutionnelle","35d97026":"On va utiliser un mod\u00e8le pr\u00e9d\u00e9fini dans Keras (VGG16) :","2c72ae7a":"On utilise les poids pr\u00e9-entra\u00een\u00e9s sur ImageNet (un million d'images)\nOn \"fige\" le r\u00e9seau VGG16, de mani\u00e8re \u00e0 ne pas refaire l'entra\u00eenement sur le dataset particulier","76bb3852":"On affiche la premi\u00e8re image :"}}