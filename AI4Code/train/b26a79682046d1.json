{"cell_type":{"92bace9c":"code","724a9777":"code","15b8c08c":"code","f0d2de0d":"code","c7b4c28e":"code","243586ef":"code","a5e34186":"code","6b0ffb97":"code","874eef03":"code","2ab94c3f":"code","50eb9c9b":"code","339222d2":"code","8af95a70":"code","b1acea7e":"code","759b667c":"code","5f099901":"code","d588b8a6":"code","79aae96b":"code","c2474559":"code","97c132ca":"code","77ca1751":"code","e2b738fb":"code","2a91fa64":"code","3bd7b087":"code","ba763972":"code","91cfab23":"code","eb17386d":"code","5bfae047":"markdown","f717a919":"markdown"},"source":{"92bace9c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","724a9777":"data = pd.read_csv('\/kaggle\/input\/weatherww2\/Summary of Weather.csv')","15b8c08c":"data.head()","f0d2de0d":"data.info()","c7b4c28e":"plt.figure(figsize=(15,10))\nsns.heatmap(data.corr(), annot=True)","243586ef":"nulls = data.isnull().sum()\nnull_percentages = nulls \/ data.shape[0]\nnull_percentages *= 100\nnull_df = pd.DataFrame({'Null Percentage (%)':null_percentages})\n\nnull_df.sort_values(by='Null Percentage (%)')","a5e34186":"dropped_cols = [col for col in null_df.index if null_df.loc[col][0] > 50]\n\ndata.drop(columns=dropped_cols, inplace=True)\n\n# Drop temp. columns in Fahrenheit\ndata.drop(columns=['MIN', 'MAX', 'MEA', 'Precip'], inplace=True)","6b0ffb97":"data.isnull().sum()","874eef03":"data['Snowfall'].value_counts()","2ab94c3f":"data['Snowfall'].replace(to_replace='#VALUE!',value=0, inplace=True)\n\ndata['Snowfall'] = data['Snowfall'].fillna(0)\n\ndata['Snowfall'] = data['Snowfall'].astype(float)","50eb9c9b":"data['PRCP'].value_counts()","339222d2":"data['PRCP'].value_counts()","8af95a70":"data['PRCP'] = data['PRCP'].fillna(method='bfill')","b1acea7e":"data['SNF'] = data['SNF'].fillna(0)","759b667c":"data.isnull().sum()","5f099901":"fig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2, figsize=(15,10))\n\nax0.set_title('Before Outlier Removal')\n\nsns.scatterplot(x='MaxTemp',y='MinTemp', data=data, ax=ax0)\n\ndata = data.drop(data[data['MaxTemp'] < data['MinTemp']].index)\n\ndata = data.drop(data[(data['MaxTemp'] > 20) & (data['MinTemp'] < -15)].index)\n\nax1.set_title('After Outlier Removal')\n\nsns.scatterplot(x='MaxTemp', y='MinTemp', data=data, ax=ax1)\n","d588b8a6":"data.isnull().sum()","79aae96b":"data.drop('Date', axis=1, inplace=True)","c2474559":"pd.get_dummies(data['STA'])","97c132ca":"data['PRCP'] = data['PRCP'].replace('T',0)\ndata['PRCP'] = data.PRCP.astype(float)\n\ndata['SNF'] = data['SNF'].replace('T',0)\ndata['SNF'] = data['SNF'].astype(float)","77ca1751":"data.drop('STA', axis=1, inplace=True)","e2b738fb":"data.head()","2a91fa64":"from sklearn.model_selection import train_test_split\n\ny = data['MaxTemp']\nX = data.drop('MaxTemp', axis=1)\n\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, test_size = 0.1)","3bd7b087":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\n\nmodel = LinearRegression()\n\n\nmodel.fit(train_X, train_y)","ba763972":"preds = model.predict(test_X)","91cfab23":"model.score(test_X, test_y)","eb17386d":"plt.figure(figsize=(20,10))\n\npd.DataFrame({'Actual':test_y, 'Preds':preds})\n\nplt.xlabel('Count')\nplt.ylabel('Temperature (in Celcius)')\n\nplt.plot(np.array(test_y)[:50],c='b', label='Actual',linewidth=3)\nplt.plot(preds[:50],c='g', label='Predicted',linewidth=3)\n\n\nplt.legend()","5bfae047":"Assess the missing values","f717a919":"Encode columns"}}