{"cell_type":{"10cc0a31":"code","463bfe42":"code","a47c075c":"code","d1a1c51a":"code","2391c309":"code","802b562e":"code","ef5bc458":"code","97f3a79a":"code","78734fb1":"code","83b996f5":"code","420353a0":"code","a0db36c3":"code","65451909":"code","91d0d1a7":"code","16aaffb3":"code","ba45007e":"code","6b01ccb7":"code","d7f966ec":"code","943ac4c4":"code","4fe3693f":"markdown","8a4328a9":"markdown","1c4e8d18":"markdown","7adaeecd":"markdown","f1faa0ed":"markdown","c5a215ea":"markdown","20d95190":"markdown","1d422128":"markdown","e5f17d04":"markdown","7fd02be7":"markdown","d3649f40":"markdown","24cf0666":"markdown","b8e8c629":"markdown","535ab12a":"markdown","8732ab25":"markdown","dedf2da1":"markdown","bdbf95ee":"markdown","a8f2e778":"markdown","26e6f7c2":"markdown","56be3dae":"markdown","a5f443bd":"markdown","e7654afa":"markdown","594e17c8":"markdown","156ca187":"markdown","fb84e0bc":"markdown"},"source":{"10cc0a31":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","463bfe42":"# read BlackFriday.csv file data from input directory and create dataframe named data\ndf = pd.read_csv(\"..\/input\/BlackFriday.csv\")","a47c075c":"# check information about columns data \ndf.info()","d1a1c51a":"# Let's see first 10 data of dataframe to have knowledge data itself.\ndf.head(10)","2391c309":"df[\"Product_Category_1\"].fillna(0, inplace=True)\ndf[\"Product_Category_2\"].fillna(0, inplace=True)\ndf[\"Product_Category_3\"].fillna(0, inplace=True)\n\ndf.columns","802b562e":"# Bar Plot\n# Most common 50 Product_id sold in Black Friday\n                   \nprd_count = Counter(df.Product_ID)         \nmost_common_prd= prd_count.most_common(50)  \n\nx,y = zip(*most_common_prd)\nx,y = list(x),list(y)\n# \nplt.figure(figsize=(15,8))\nax= sns.barplot(x=x, y=y,palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Id of Product')\nplt.xticks(rotation=90)\nplt.ylabel('Frequency')\nplt.title('Most Common 15 Product Sold in Black Friday')","ef5bc458":"# Bar Plot\n# For each Occupation, percentage of number of Product categories purchased \n\ndf_Product = pd.merge(df[df.Product_Category_1 != 0 ].groupby(['Occupation']).count().reset_index('Occupation')[['Occupation','Product_Category_1']], \n                      df[df.Product_Category_2 != 0 ].groupby(['Occupation']).count().reset_index('Occupation')[['Occupation','Product_Category_2']],    \n                       how='outer', left_index=True, on='Occupation')\n\ndf_Product = pd.merge(df_Product, \n                      df[df.Product_Category_3 != 0 ].groupby(['Occupation']).count().reset_index('Occupation')[['Occupation','Product_Category_3']],\n                       how='outer', left_index=True, on='Occupation')\n\nocc_list = df.sort_values(by=['Occupation'])['Occupation'].unique()\n\nshare_prd_cat1 = []\nshare_prd_cat2 = []\nshare_prd_cat3 = []\n\nfor i in occ_list:\n    x = df_Product[df_Product['Occupation']==i]\n    total = sum(x.Product_Category_1) + sum(x.Product_Category_2) + sum(x.Product_Category_3)\n    share_prd_cat1.append(np.round(100 * (sum(x.Product_Category_1) \/ total), decimals=2, out=None))\n    share_prd_cat2.append(np.round(100 * (sum(x.Product_Category_2) \/ total), decimals=2, out=None))\n    share_prd_cat3.append(np.round(100 * (sum(x.Product_Category_3) \/ total), decimals=2, out=None))\n    \n# visualization\nf,ax = plt.subplots(figsize = (10,8))\n\nsns.barplot(x=share_prd_cat1,y=occ_list,color='red',alpha = 0.5,label='Product Category 1',orient='h' )\nsns.barplot(x=share_prd_cat2,y=occ_list,color='blue',alpha = 0.6,label='Product Category 2',orient='h' )\nsns.barplot(x=share_prd_cat3,y=occ_list,color='cyan',alpha = 0.7,label='Product Category 3',orient='h' )\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Percentage of Products', ylabel='States',title = \"Percentage of # Products Purchased\")\nplt.xticks(rotation=90)\n\n\n","97f3a79a":"# Percentahge of 1-5 type of Product category1 item for each Occupation\ndf_Product =df[df.Product_Category_1 != 0 ].groupby(['Occupation','Product_Category_1']).count().reset_index('Occupation').reset_index('Product_Category_1')[['Occupation','Product_Category_1', 'Product_ID']]\ndf_Product.rename(columns={'Product_ID': 'Count'}, inplace = True)\n\nocc_list = df_Product.sort_values(by=['Occupation'])['Occupation'].unique()\nprd_list = df_Product.sort_values(by=['Product_Category_1'])['Product_Category_1'].unique()\nprd_list = prd_list[0:5]\n\npool_of_names = []\nfor i in prd_list:\n    globals()['Category{0}'.format(i)] =[]  \n    if i == 1 :\n        globals()['Color{0}'.format(i)] =\"cyan\"\n    elif i == 2 :\n        globals()['Color{0}'.format(i)] =\"blue\"\n    elif i == 3 :\n        globals()['Color{0}'.format(i)] =\"red\"\n    elif i == 4 :\n        globals()['Color{0}'.format(i)] =\"yellow\"\n    elif i == 5 :\n        globals()['Color{0}'.format(i)] =\"fuchsia\"\n        \n   \nfor i in occ_list:\n    x = df_Product[df_Product['Occupation']==i]\n    total = sum(x.Count)\n    for j in prd_list:\n         percentage = np.round(100 * (sum(x[x.Product_Category_1 ==j].Count) \/ total), decimals=2, out=None)\n         globals()['Category{0}'.format(j)].append(percentage)\n         if percentage < 25:\n             globals()['Alpha{0}'.format(j)] = 0.8\n         else:\n             globals()['Alpha{0}'.format(j)] = 0.2\n         \n# visualization\nf,ax = plt.subplots(figsize = (9,10))\n\nfor j in prd_list:\n    sns.barplot(x= globals()['Category{0}'.format(j)],\n                y=occ_list,\n                color=globals()['Color{0}'.format(j)],\n                alpha = globals()['Alpha{0}'.format(j)],\n\n                label='Product Category1 {0}'.format(j),\n                orient='h' )\n\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Percentage of Products', ylabel='States',title = \"Percentage of number of ProductCategory1 type Purchased\")\nplt.xticks(rotation=90)","78734fb1":"#%%Point Plot\n# high school graduation rate vs Poverty rate of each state\n\ndf_Product = pd.merge(df[df.Product_Category_1 != 0 ].groupby(['Occupation']).count().reset_index('Occupation')[['Occupation','Product_Category_1']], \n                      df[df.Product_Category_2 != 0 ].groupby(['Occupation']).count().reset_index('Occupation')[['Occupation','Product_Category_2']],    \n                       how='outer', left_index=True, on='Occupation')\n\ndf_Product = pd.merge(df_Product, \n                      df[df.Product_Category_3 != 0 ].groupby(['Occupation']).count().reset_index('Occupation')[['Occupation','Product_Category_3']],\n                       how='outer', left_index=True, on='Occupation')\nocc_list = df_Product.sort_values(by=['Occupation'])['Occupation'].unique()\n\n# visualize\nf,ax1 = plt.subplots(figsize =(10,5))\n    \nsns.pointplot(x='Occupation',y='Product_Category_1',data=df_Product, color='red',alpha=0.6)\nsns.pointplot(x='Occupation',y='Product_Category_2',data=df_Product ,color='cyan',alpha=0.6)\nsns.pointplot(x='Occupation',y='Product_Category_3',data=df_Product ,color='limegreen',alpha=0.6)\n\nplt.text(5,0.50,'Product category1',color='red',fontsize = 12,style = 'italic')\nplt.text(10,15,'Product category2',color='cyan',fontsize = 12,style = 'italic')\nplt.text(15,20,'Product category3',color='limegreen',fontsize = 12,style = 'italic')\n\nplt.xlabel('Occupation',fontsize = 14,color='black')\nplt.ylabel('Product Category Purchased Count',fontsize = 14,color='black')\nplt.title('Product Category Purchased Count Vs Occupation',fontsize = 16,color='red')\nplt.grid()\n","83b996f5":"# Visualization of count(Product_Category_1) vs  count(Product_Category_2) of each state with different style of seaborn code\n# joint kernel density\n# pearsonr= if it is 1, there is positive correlation and if it is, -1 there is negative correlation.\n# If it is zero, there is no correlation between variables\n# Show the joint distribution using kernel density estimation \ndf_Product = pd.merge(df[df.Product_Category_1 != 0 ].groupby(['Occupation']).count().reset_index('Occupation')[['Occupation','Product_Category_1']], \n                      df[df.Product_Category_2 != 0 ].groupby(['Occupation']).count().reset_index('Occupation')[['Occupation','Product_Category_2']],    \n                       how='outer', left_index=True, on='Occupation')\n\ng = sns.jointplot(df_Product.Product_Category_1, df_Product.Product_Category_2, kind=\"kde\", size=7)\nplt.show()","420353a0":"# Product_Category_1 rates in black friday data \nlabels = df.Product_Category_1.value_counts().index\nsizes = df.Product_Category_1.value_counts().values\n\ncolors = ['grey','blue','red','yellow','green','brown','grey','blue','red','yellow','green','brown','grey','blue','red','yellow','green','brown']\nexplode = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n\n# visual\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Product_Category_1 rates in black friday data',color = 'blue',fontsize = 15)\n\n","a0db36c3":"# Visualization of count(Product_Category_1 purchased bye men ) vs  count(Product_Category_1 purchased bye women ) of each state with different style of seaborn code\n# lmplot \n# Show the results of a linear regression within each dataset\n\ndf_Gender = df.groupby(['Gender','Product_Category_1']).count().reset_index('Gender').reset_index('Product_Category_1')\n\n# Filter female and male \ndf_Female = df_Gender[df_Gender['Gender'] =='F'] \ndf_Male = df_Gender[df_Gender['Gender'] =='M'] \n\n# get only 3 columns \ndf_Female = df_Female[['Product_Category_1', 'Product_ID']]\ndf_Male = df_Male[['Product_Category_1', 'Product_ID']]\n\n# Rename column Product_ID as Count\ndf_Female.rename(columns={'Product_ID': 'CountFemale'}, inplace = True)\ndf_Male.rename(columns={'Product_ID': 'CountMale'}, inplace = True)\n\ndf_Female.sort_values(by=['Product_Category_1'], inplace = True)\ndf_Male.sort_values(by=['Product_Category_1'], inplace = True)\n\ndf_Product = pd.merge(df_Female, \n                      df_Male,    \n                      how='outer', left_index=True, on='Product_Category_1')\nsns.lmplot(x=\"CountMale\", y=\"CountFemale\", data=df_Product)\nplt.show()","65451909":"#%%  kde plot\nsns.kdeplot(df_Product.CountMale, df_Product.CountFemale, shade=True, cut=3)\nplt.show()","91d0d1a7":"# distribution of Product_Category_1, Product_Category_2, Product_Category_3 types \n# Show each distribution with both violins and points\n# Use cubehelix to get a custom sequential palette\ndf_Product = df[( df.Product_Category_2 != 0 ) & (df.Product_Category_3 != 0)][['Product_Category_1','Product_Category_2','Product_Category_3']]\n\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=df_Product, palette=pal, inner=\"points\")\nplt.show()","16aaffb3":"#correlation map\n# Visualization of black friday data for Product_Category_1, Product_Category_2, Product_Category_3 types\ndf_Product = df[( df.Product_Category_2 != 0 ) & (df.Product_Category_3 != 0)][['Product_Category_1','Product_Category_2','Product_Category_3']]\n\nf,ax = plt.subplots(figsize=(5, 5))\nsns.heatmap(df_Product.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","ba45007e":"# purchase for Age and Gender\ndf_Product = df[(df.Age != '0-17') & (df.Age !='18-2')][['Purchase','Age','Gender']].sort_values(by=['Age'])\n\n# Plot the orbital period with horizontal boxes\nsns.boxplot(x=\"Age\", y=\"Purchase\", hue=\"Gender\", data=df_Product, palette=\"PRGn\")\nplt.show()","6b01ccb7":"# purchase for Age and Gender for 1000 record\ndf_Product = df.loc[:1000,['Purchase','Age','Gender']][(df.Age != '0-17') & (df.Age !='18-2')].sort_values(by=['Age'])\n\n\nsns.swarmplot(x=\"Age\", y=\"Purchase\",hue=\"Gender\", data=df_Product)\nplt.show()","d7f966ec":"#%% pair plot\n#Count of Product_Category_1 purchased by male and Female\ndf_Gender = df.groupby(['Gender','Product_Category_1']).count().reset_index('Gender').reset_index('Product_Category_1')\n\n# Filter female and male \ndf_Female = df_Gender[df_Gender['Gender'] =='F'].sort_values(by=['Product_Category_1'])\ndf_Male = df_Gender[df_Gender['Gender'] =='M'].sort_values(by=['Product_Category_1']) \n\n# Rename column Product_ID as Count\ndf_Female.rename(columns={'Product_ID': 'CountFemale'}, inplace = True)\ndf_Male.rename(columns={'Product_ID': 'CountMale'}, inplace = True)\n\ndf_Product = pd.merge(df_Female, \n                      df_Male,    \n                      how='outer', left_index=True, on='Product_Category_1')[['CountFemale','CountMale']]\n\nsns.pairplot(df_Product)\nplt.show()","943ac4c4":"sns.countplot(df.Occupation)\n#sns.countplot(kill.manner_of_death)\nplt.title(\"Occupation\",color = 'blue',fontsize=15)\nplt.show()","4fe3693f":"<a id=\"4\"><\/a> \n# 4.Pie Plot","8a4328a9":"**[Go To Top](#0)**","1c4e8d18":"<a id=\"7\"><\/a> \n# 7.Violin Plot","7adaeecd":"**[Go To Top](#0)**","f1faa0ed":"**[Go To Top](#0)**","c5a215ea":"<a id=\"2\"><\/a> \n# 2.Point Plot","20d95190":"<a id=\"8\"><\/a> \n# 8.Heatmap","1d422128":"**[Go To Top](#0)**","e5f17d04":"**[Go To Top](#0)**","7fd02be7":"<a id=\"0\"><\/a> \n# INTRODUCTION\nIn this program , I will use seaborn library to analyze Black Friday data .  Graphics I will draw are as below :\n<br>\n1. [Bar Plot](#1)\n2. [Point Plot](#2)\n3. [Joint Plot](#3)\n4. [Pie Chart](#4)\n5. [Lm Plot](#5)\n6. [Kde Plot](#6)\n7. [Violin Plot](#7)\n8. [Heatmap](#8)\n9. [Box Plot](#9)\n10. [Swarm Plot](#10)\n11. [Pair Plot](#11)\n12. [Count Plot](#12)","d3649f40":"<a id=\"6\"><\/a> \n# 6.Kde Plot","24cf0666":"<a id=\"10\"><\/a> \n# 10.Swarm Plot","b8e8c629":"**[Go To Top](#0)**","535ab12a":"**[Go To Top](#0)**","8732ab25":"**[Go To Top](#0)**","dedf2da1":"<a id=\"9\"><\/a> \n# 9.Box Plot","bdbf95ee":"**[Go To Top](#0)**","a8f2e778":"**[Go To Top](#0)**","26e6f7c2":"**[Go To Top](#0)**","56be3dae":"<a id=\"3\"><\/a> \n# 3.Joint Plot","a5f443bd":"<a id=\"12\"><\/a> \n# 12.Count Plot","e7654afa":"<a id=\"5\"><\/a> \n# 5.Lm Plot","594e17c8":"<a id=\"11\"><\/a> \n# 11.Pair Plot","156ca187":"<a id=\"1\"><\/a> \n# 1.Bar Plot","fb84e0bc":"**[Go To Top](#0)**"}}