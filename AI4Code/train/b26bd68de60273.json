{"cell_type":{"78b2d4bc":"code","68e4bbe6":"code","5a65239a":"code","f99682a8":"code","831ebf94":"code","1760b766":"code","f59ff0c5":"code","36f5be5f":"code","3ed798e5":"code","3c9bc1fe":"code","0d00fe88":"code","35f3485f":"code","b5408c77":"code","b7849818":"code","ba96180f":"code","808be95e":"code","415b3938":"code","ba07ed6a":"code","a90827fc":"code","828299d7":"code","264ec9dd":"code","9642e127":"code","85efd05a":"code","989623e3":"code","7d0feb42":"markdown","2421066a":"markdown","748c93a0":"markdown","c358fd72":"markdown","13f60c7b":"markdown","6a9b876c":"markdown","7f550ee2":"markdown","4e993bb5":"markdown","8717d1d8":"markdown"},"source":{"78b2d4bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPool2D , Activation , Dropout , Flatten , Dense\nfrom keras.preprocessing.image import ImageDataGenerator, img_to_array , load_img\nfrom glob import glob\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","68e4bbe6":"test_path= pd.read_csv(\"\/kaggle\/input\/mnist-in-csv\/mnist_test.csv\")\ntrain_path = pd.read_csv(\"\/kaggle\/input\/mnist-in-csv\/mnist_train.csv\")","5a65239a":"train_path.shape","f99682a8":"test_path.shape","831ebf94":"train_path.head()","1760b766":"train_path[\"label\"].unique()","f59ff0c5":"test_path.head()","36f5be5f":"y_train=train_path[\"label\"]\nx_train=train_path.drop(columns =\"label\")\ny_test=test_path[\"label\"]\nx_test=test_path.drop(columns =\"label\")","3ed798e5":"x_train.head()","3c9bc1fe":"plt.figure(figsize=(10,5))\ng= sns.countplot(y_train, palette=\"icefire\")\nplt.title(\"Number of digit classes\")\nplt.show()\n","0d00fe88":"y_train.shape","35f3485f":"x_train.shape","b5408c77":"x_train= x_train.values.reshape(-1,28 ,28,1)\nx_test=x_test.values.reshape(-1, 28,28,1)\nprint(\"x_train shape:\" , x_train.shape)\nprint(\"x_test shape:\" , x_test.shape)\n","b7849818":"x_train= x_train\/255.0\ntest_path= test_path\/255","ba96180f":"from keras.utils.np_utils import to_categorical\ny_train= to_categorical(y_train, num_classes=10)","808be95e":"image_index=777\nprint(y_train[image_index])\nplt.imshow(x_train[image_index], cmap='Greys')\n","415b3938":"a=img_to_array(x_train[image_index])\nprint(a.shape)","ba07ed6a":"className= glob(\"train_path+'\/*'\")\nnumberOfClass=len(className)\nprint(numberOfClass)","a90827fc":"x_train, x_val,y_train, y_val = train_test_split(x_train, y_train ,test_size= 0.2, random_state=42) \nprint(\"x train size:\" ,x_train.shape)\nprint(\"x validation: \",x_val.shape)\nprint(\"y train size: \",y_train.shape)\nprint(\"y validation size:\" ,y_val.shape)","828299d7":"model= Sequential()\n\nmodel.add(Conv2D(32 ,(3,3), activation=\"relu\",input_shape=a.shape))\nmodel.add(MaxPool2D())\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(32,(3,3),activation=\"relu\"))\nmodel.add(MaxPool2D())\nmodel.add(Conv2D(64,(3,3), activation=\"relu\"))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(250, activation=\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation=\"softmax\"))\n\nmodel.compile(loss=\"categorical_crossentropy\",\n              optimizer=\"rmsprop\",\n              metrics=[\"accuracy\"])\nbatch_size=32\nepoch= 20","264ec9dd":"datgen= ImageDataGenerator(shear_range=0.3,\n                          horizontal_flip=True,\n                          width_shift_range=0.5,\n                          zoom_range=0.3)\n\ndatgen.fit(x_train)","9642e127":"history=model.fit_generator(datgen.flow(x_train,y_train, batch_size=batch_size),epochs=epoch, validation_data=(x_val,y_val), steps_per_epoch=x_train.shape[0]\/\/batch_size)","85efd05a":"plt.plot(history.history[\"loss\"], label=\"Train loss\")\nplt.plot(history.history[\"val_loss\"], label=\"Validation Loss\")\nplt.legend()\nplt.show()","989623e3":"plt.plot(history.history[\"accuracy\"], label=\"Train Accuracy\")\nplt.plot(history.history[\"val_accuracy\"], label=\"Validation Accuracy\")\nplt.legend()\nplt.show()","7d0feb42":"# Data Generator","2421066a":"# Create Model","748c93a0":"# Train Test Split","c358fd72":"# Normalization","13f60c7b":"# Loading and Visualization of Data","6a9b876c":"# Visualization","7f550ee2":"# Results","4e993bb5":"# Reshape","8717d1d8":"# Label Encoding"}}