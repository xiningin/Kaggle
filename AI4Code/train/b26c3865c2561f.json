{"cell_type":{"961c27e5":"code","ee9a92fc":"code","6ee847d1":"code","f5ab0ba8":"code","ff01860a":"code","a993bc4b":"code","7d5dd602":"code","63aec72f":"code","548a59fc":"code","298c1864":"code","e0842a1a":"code","a5c7f668":"code","8f64f887":"code","9dace479":"code","def88cd2":"code","c43f2e9d":"code","43935d7a":"code","fd5d1684":"code","c6d2f932":"code","5132d8e1":"code","0688f852":"code","4b15e594":"code","199042cb":"code","b4001335":"code","77bd85f2":"code","e64f9e67":"code","60933d02":"code","80eda43b":"code","44648df9":"code","6692732a":"code","7dca0520":"code","0fcf5cf5":"markdown","79a73b71":"markdown","78f5df14":"markdown","383d629b":"markdown","77bf68ac":"markdown","9e48599d":"markdown","4b84565c":"markdown","494d6d58":"markdown"},"source":{"961c27e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ee9a92fc":"ls","6ee847d1":"df = pd.read_csv(\"\/kaggle\/input\/the-cure-discography\/thecure_discography.csv\")\ndf.head()","f5ab0ba8":"df.shape","ff01860a":"df.info()","a993bc4b":"df.album_release_date = pd.to_datetime(df.album_release_date, format='%Y-%m-%d')\ndf.album_release_year = pd.to_datetime(df.album_release_year, format='%Y-%m-%d')","7d5dd602":"df.info()","63aec72f":"df['album_release_year']=df['album_release_year'].dt.year","548a59fc":"import matplotlib.pyplot as plt\ndf.columns","298c1864":"albums_by_year = df.sort_values(by=['album_release_year', 'album_name'])[['album_name', 'track_name', 'album_release_year']]\nalbums_by_year['album_name']=albums_by_year['album_name'].apply(lambda x: x.replace('Disintegration (Deluxe Edition [Remastered])', 'Disintegration (D.E. Rmstrd)'))\nalbums_by_year['album_name']=albums_by_year['album_name'].apply(lambda x: x.replace('Mixed Up (Remastered 2018 \/ Deluxe Edition)', 'Mixed Up (D.E. Rmstrd 2018)'))\nalbums_by_year['album_name'].value_counts()","e0842a1a":"albums_by_year.album_name.value_counts().plot(kind='bar');","a5c7f668":"import seaborn as sns","8f64f887":"plt.figure(figsize=(15,20))\nplt.rc('ytick', labelsize=20) \nb = sns.countplot(y='album_name', data=albums_by_year, hue = 'album_release_year', dodge=False)\nb.set_xlabel('Count of songs on album', fontsize=15)\nb.set_ylabel('Album name', fontsize=12)\nb.set_xticks(range(0,30,4))\nb.legend(fontsize=20, loc='lower right')\n# label each bar with count of songs per album\nfor p in b.patches:\n    count = p.get_width().astype(int)\n    b.text(p.get_x() + p.get_width() + 0.1, p.get_y() + p.get_height()\/2, count, fontsize=12);","9dace479":"df.head()","def88cd2":"df.drop('Unnamed: 0', axis=1, inplace=True)","c43f2e9d":"df.columns","43935d7a":"song_moods = df[['album_name', 'track_name', 'danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'key_mode']]\nsong_moods.describe()","fd5d1684":"song_moods.info()","c6d2f932":"sm_non_numeric_cols = [col for col in song_moods.columns if song_moods[col].dtype=='object']\nsong_moods_cat = song_moods[sm_non_numeric_cols]\nsong_moods_cat.head()","5132d8e1":"song_moods_cat.key.value_counts()","0688f852":"# these sound like they might be highly correlated\nsong_moods_fun = song_moods[['danceability', 'energy', 'liveness']]\nsong_moods_fun.head()\nsns.heatmap(song_moods_fun.corr(), annot=True)","4b15e594":"happier = song_moods[song_moods.valence >= 0.5]\nhappier.shape","199042cb":"happy_keys = happier.key.value_counts()\/len(happier)","b4001335":"sadder = song_moods.drop(happier.index)\nsadder.shape\nsad_keys = sadder.key.value_counts()\/len(sadder)","77bd85f2":"happy_keys = pd.DataFrame(happy_keys)\nsad_keys = pd.DataFrame(sad_keys)\nhappy_keys.rename(columns = {\"key\": \"happy_percent\"}, \n          inplace = True)\nsad_keys.rename(columns = {\"key\": \"sad_percent\"}, \n          inplace = True)\nsad_keys.head()","e64f9e67":"# do an outer join to try to find which keys are more commonly happy or sad\nkey_mood = pd.concat([happy_keys, sad_keys], axis=1)","60933d02":"key_mood","80eda43b":"love = df[df['track_name'].str.lower().str.contains('love')]\nlove.sort_values(['valence', 'tempo'], ascending=False)[['track_name', 'valence', 'tempo']]","44648df9":"sns.scatterplot(x='tempo', y='valence', data=df, hue='key');","6692732a":"sns.scatterplot(x='tempo', y='valence', data=df, hue='mode');","7dca0520":"df.groupby('mode')['valence'].mean().plot(kind='bar')","0fcf5cf5":"Hmmm.  Time to google these terms, because I would definitely *not* expect a higher energy song to be less danceable.  ","79a73b71":"Note: none of this data is missing","78f5df14":"So yes - I should take out liveness as this just means was the song probably performed live.  Also, I will definitely include valence.  In fact, I would think that more Cure songs are sad, depressed, or angry than happy.  I will check this now.","383d629b":"It's interesting to change the threshold on what is happy (>=.5, >=.7, etc.) and watch the percents change in the keys above.","77bf68ac":"Well.  I seem to have no intuition for music, eh?","9e48599d":"Lol I'm about ready to stop on this dataset.  *HOW* is *Lovesong* happier than *Friday I'm In Love*??!?","4b84565c":"And...moving on! :)","494d6d58":"From [maelfabien](https:\/\/maelfabien.github.io\/Hack-3\/#)<br>\n**duration_ms:** The duration of the track in milliseconds.<br>\n**key:** The estimated overall key of the track. Integers map to pitches using standard Pitch Class notation. E.g. 0 = C, 1 = C\u266f\/D\u266d, 2 = D, and so on. If no key was detected, the value is -1.<br>\n**mode:** Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.<br>\n**time_signature:** An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).<br>\n**acousticness:** A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic. <br>\n**danceability:** Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable. <br>\n**energy:** Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. <br>\n**instrumentalness:** Predicts whether a track contains no vocals. \u201cOoh\u201d and \u201caah\u201d sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \u201cvocal\u201d. The closer the instrumentalness value is to 1.0, the greater the likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0. <br>\n**liveness:** Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides a strong likelihood that the track is live. <br>\n**loudness:** The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typical range between -60 and 0 dB. <br>\n**speechiness:** Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audiobook, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks. <br>\n**valence:** A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry). <br>\ntempo: The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, the tempo is the speed or pace of a given piece and derives directly from the average beat duration.<br>\n**key:** The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C\u266f\/D\u266d, 2 = D, and so on). If no key was detected, the value is -1.<br>\n**mode:** integer Indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. This field will contain a 0 for \u201cminor\u201d, a 1 for \u201cmajor\u201d, or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.<br>\n**mode_confidence:** The confidence, from 0.0 to 1.0, of the reliability of the mode.<br>\n**time_signature:** An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \u201c3\/4\u201d, to \u201c7\/4\u201d."}}