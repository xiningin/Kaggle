{"cell_type":{"5c711d19":"code","e6b2c610":"code","47dbbd09":"code","3d031fef":"code","5b55ca6f":"code","6834e291":"code","f4c3df3a":"code","a025f581":"code","13a3df92":"code","36ee911e":"code","4470ffc1":"code","a2d606cf":"code","59ba10eb":"code","0fbf0a37":"code","c29cb621":"code","a3cc3737":"code","351223c6":"code","15d6c4fc":"code","20a03942":"code","a55a525b":"code","7ce35cf7":"code","e9c4dca9":"code","23252e9d":"code","90039c6e":"code","95a53918":"code","1f91219c":"code","80c63af6":"code","8b96cfd3":"code","7ef06ba8":"code","04eeaf4b":"code","0bea3438":"code","a4c4b4cd":"code","bf2d74de":"markdown","8c1c84ba":"markdown","aadf2686":"markdown","008c5561":"markdown","43dad4a8":"markdown","17d26d59":"markdown","7487a954":"markdown","cbf9bab1":"markdown","8c54103f":"markdown"},"source":{"5c711d19":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime\nimport pandas as pd\nimport numpy as np\n\nplt.style.use('default')","e6b2c610":"data = pd.read_csv(\"..\/input\/learn-time-series-forecasting-from-gold-price\/gold_price_data.csv\")\ndata['Date'] = pd.to_datetime(data['Date'], format='%Y-%m-%d')\nprint(\"Number of rows and columns:\", data.shape)\ndata.head()","47dbbd09":"data.tail()","3d031fef":"f, ax = plt.subplots(figsize=(16, 4))\nsns.lineplot(data=data, x=\"Date\", y=\"Value\")\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(1970,1,1), datetime(2021,1,1)]);","5b55ca6f":"f, ax = plt.subplots(figsize=(16, 4))\ndata_resample_y = data.resample(rule='Y', on='Date').mean()\ndata_resample_m = data.resample(rule='M', on='Date').mean()\ndata_resample_q = data.resample(rule='Q', on='Date').mean()\n\nsns.lineplot(data=data, x=\"Date\", y=\"Value\", label=\"original\")\nsns.lineplot(data=data_resample_y, x=\"Date\", y=\"Value\", label=\"year frequency\")\nsns.lineplot(data=data_resample_q, x=\"Date\", y=\"Value\", label=\"quarter frequency\")\nsns.lineplot(data=data_resample_m, x=\"Date\", y=\"Value\", label=\"month frequency\");","6834e291":"from statsmodels.tsa.filters.hp_filter import hpfilter\n\ncycle, trend = hpfilter(data['Value'], lamb=1296000)\n\nf, ax = plt.subplots(figsize=(20, 5))\nsns.lineplot(data=data, x=\"Date\", y=\"Value\")\nsns.lineplot(x=data['Date'], y=trend.to_list())\n\nax.set_xlim([datetime(1970,1,1), datetime(2020,3,13)]);","f4c3df3a":"pd.plotting.autocorrelation_plot(data_resample_y);","a025f581":"f, ax = plt.subplots(figsize=(16, 4))\ndata_rolling = data.rolling(365, center=True, min_periods=360).mean()\n\nsns.lineplot(data=data, x=\"Date\", y=\"Value\")\nsns.lineplot(data=data, x=\"Date\", y=data_rolling[\"Value\"]);","13a3df92":"data_diff=data.diff().dropna()\n\nfig = plt.figure(figsize = (16,4))\nsns.lineplot(x=data[\"Date\"], y=data_diff[\"Value\"]);","36ee911e":"data_diff_sample=data[2000:2500].diff(axis = 0, periods = 7).dropna()\n\nfig = plt.figure(figsize = (16,4))\nsns.lineplot(x=data[\"Date\"][2000:2500], y=data_diff_sample[\"Value\"]);","4470ffc1":"fig = plt.figure(figsize = (10,5))\nsns.histplot(data_diff[\"Value\"], bins=50, kde=True);\n# sns.kdeplot(data_diff[\"Value\"]);","a2d606cf":"from statsmodels.tsa.stattools import adfuller\n\nresult = adfuller(data_diff[\"Value\"])\n\nprint(f'ADF Statistic: {result[0]:.3f}')\nprint(f'p-value: {result[1]:.3f}')\n\nfor key, value in result[4].items():\n    print(f'Critical values({key}): {value:.3f}')\n    \nif result[0]<result[4]['1%']:\n    print(\"Dataset is stationary!\")\n    \n\n\nstat, p, lags, obs, crit, t = adfuller(data_diff[\"Value\"])\nprint(f'stat: {stat:.5f}\\np-value: {p:.5f}')\n\nif p > 0.05:\n    print('Probably not Stationary')\nelse:\n    print('Probably Stationary')","59ba10eb":"from statsmodels.tsa.stattools import kpss\n\nstat, p, lags, crit = kpss(data_diff[\"Value\"])\nprint(f'stat: {stat:.5f}\\np-value: {p:.5f}')\n\nif p > 0.05:\n    print('Probably not Stationary')\nelse:\n    print('Probably Stationary')","0fbf0a37":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nfig, axes = plt.subplots(3, 1, sharex=True, figsize = (16,7))\n\nplot_acf(data[\"Value\"], ax=axes[0])\naxes[0].set_title('Original series')\n\nplot_acf(data[\"Value\"].diff().dropna(), ax=axes[1])\naxes[1].set_title('1st order differencing')\n\nplot_acf(data[\"Value\"].diff().diff().dropna(), ax=axes[2])\naxes[2].set_title('2nd order differencing');","c29cb621":"!pip install pmdarima","a3cc3737":"from pmdarima.arima.utils import ndiffs\n\nprint(f\"ADF Test: {ndiffs(data['Value'], test='adf')}\")\nprint(f\"KPSS test: {ndiffs(data['Value'], test='kpss')}\")\nprint(f\"PP test: {ndiffs(data['Value'], test='pp')}\")","351223c6":"from pylab import rcParams\n\nrcParams['figure.figsize'] = 16,5\nplot_pacf(data[\"Value\"].diff().dropna())\nplt.show()","15d6c4fc":"rcParams['figure.figsize'] = 16,5\nplot_acf(data[\"Value\"].diff().dropna())\nplt.show()","20a03942":"data_change=data[\"Value\"].pct_change(periods=1)\n\nfig = plt.figure(figsize = (16,4))\nsns.lineplot(x=data[\"Date\"], y=data_change);","a55a525b":"from statsmodels.tsa.seasonal import seasonal_decompose\nfrom pylab import rcParams\n\nresult = seasonal_decompose(data['Value'], model='multiplicative', period=120)\n\nrcParams['figure.figsize'] = 10,7\nresult.plot();","7ce35cf7":"data_log = np.log(data[\"Value\"])\n\nfig = plt.figure(figsize = (16,4))\nsns.lineplot(x=data[\"Date\"], y=data_log);","e9c4dca9":"df_temp = data[:20].copy()\ndf_temp['Year'] = pd.DatetimeIndex(df_temp['Date']).year\ndf_temp['Month'] = pd.DatetimeIndex(df_temp['Date']).month\n\nplt.figure(figsize=(10,5))\nsns.pointplot(x='Month', y='Value', hue='Year', data=df_temp);","23252e9d":"from statsmodels.tsa.arima.model import ARIMA\n\ntrain = data[\"Value\"][:10500]\ntest = data[\"Value\"][10500:]\n\nmodel = ARIMA(train, order=(1,1,1))\nmodel_fit = model.fit()\nprint(model_fit.summary())","90039c6e":"rcParams['figure.figsize'] = 12,3\nresiduals = pd.DataFrame(model_fit.resid)\n\nfig, ax = plt.subplots(1,2)\nresiduals.plot(title=\"Residuals\", ax=ax[0])\nresiduals.plot(kind='kde', title='Density', ax=ax[1]);","95a53918":"fc, se, conf = model_fit.forecast(steps=3, alpha=0.05)\n# arima_predict = model_fit.predict(start=0, end=15000, dynamic=False)\n\nfc_series = pd.Series(fc, index=test.index)","1f91219c":"f, ax = plt.subplots(figsize=(16, 4))\n\nsns.lineplot(data=data, x=\"Date\", y=\"Value\", label='Actual')\nsns.lineplot(data=data, x=\"Date\", y=train, color='orange', label='Train')\nsns.lineplot(data=data, x=\"Date\", y=fc_series, color='g', label='Forecast');\n# sns.lineplot(data=data, x=\"Date\", y=arima_predict, color='brown', label='Predict');","80c63af6":"from statsmodels.tsa.statespace.sarimax import SARIMAX\n\nmodel = SARIMAX(train, order=(1,1,1))\nmodel_fit = model.fit()\nprint(model_fit.summary())","8b96cfd3":"sarimax_predict = model_fit.predict(start=0, end=15000, dynamic=False)\n\nf, ax = plt.subplots(figsize=(16, 4))\n\nsns.lineplot(data=data, x=\"Date\", y=\"Value\", label='Actual')\nsns.lineplot(data=data, x=\"Date\", y=sarimax_predict, color='brown', label='Predict');","7ef06ba8":"data_fb=data.copy()\ndata_fb = data_fb.rename(columns={'Date':'ds','Value':'y'})\n\ntrain_fb = data_fb[:10500]\ntest_fb = data_fb[10500:]","04eeaf4b":"from fbprophet import Prophet\n\nmodel_fb = Prophet()\nmodel_fb.fit(train_fb)\n\nfuture = model_fb.make_future_dataframe(periods=200)\nforecast_fb = model_fb.predict(future)","0bea3438":"forecast_fb_plot = forecast_fb[10500:]\n\nplt.figure(figsize=(16,5))\nplt.plot(train_fb.ds, train_fb['y'], label = 'Train')\nplt.plot(test_fb.ds, test_fb['y'], label='Test')\nplt.plot(forecast_fb_plot.ds, forecast_fb_plot['yhat'], label='Prophet Forecast')\nplt.legend(loc='best');","a4c4b4cd":"from statsmodels.tsa.holtwinters import SimpleExpSmoothing\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\n\ntrain_hw = data[\"Value\"][:10500]\ntest_hw = data[\"Value\"][10500:]\n\nfuture = ExponentialSmoothing(train_hw, trend='mul').fit()\nforecast_hw = future.forecast(300)\n\nplt.figure(figsize=(16,4))\nplt.plot(train_hw, label='Train')\nplt.plot(test_hw, label='Test')\nplt.plot(forecast_hw, label='Forecast')\nplt.legend(loc='best');","bf2d74de":"## Kwiatkowski-Phillips-Schmidt-Shin","8c1c84ba":"# ARIMA model","aadf2686":"## Hodrick-Prescott filter","008c5561":"## Order of MA term (q)","43dad4a8":"## Augmented Dickey-Fuller test","17d26d59":"## Order of differencing (d)","7487a954":"# Prophet","cbf9bab1":"## Order of AR term (p)","8c54103f":"# Holt-Winters"}}