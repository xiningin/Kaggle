{"cell_type":{"6147b450":"code","114d69e6":"code","1fde3ed3":"code","9fc32a82":"code","06807bcd":"code","5de5d8f8":"code","559df734":"code","ee345c9b":"code","604a9d6c":"code","eb507f46":"code","e036d584":"code","326b4f74":"code","6c159f4c":"code","6fe33f34":"code","ea722593":"code","216a6996":"code","4761bdea":"code","664101a8":"code","5e6da851":"code","4da3234f":"code","6022c3cb":"code","f413ad7a":"code","c70864e1":"code","6582e8b8":"code","8a4a18c9":"code","867fdffc":"code","8d132b84":"code","766facec":"code","0ec6ad6d":"code","74484bb8":"code","77499120":"code","d18b7b8c":"code","ab71c0cc":"code","b50f0508":"code","a23f3909":"markdown","a78d0482":"markdown","538ea458":"markdown","bcc9d6e3":"markdown","ef2cd67a":"markdown","5cd934dd":"markdown","25cf5179":"markdown","b3331593":"markdown","6e636f69":"markdown","14cba3c5":"markdown","6824f6d3":"markdown","82a719bf":"markdown","948bf39a":"markdown","ade4397d":"markdown","9e5433b9":"markdown","fa0666a5":"markdown","50e0a95a":"markdown","72bb54d9":"markdown","4cb85d1d":"markdown","ed95bb57":"markdown","237a3f32":"markdown","d2e53950":"markdown","3c3b7fa7":"markdown","62f91033":"markdown","a9e94f4b":"markdown","b5a650e4":"markdown","444e2933":"markdown","49257d8f":"markdown","1b6f4e91":"markdown","cee93b9c":"markdown","e67f2538":"markdown","16633e4c":"markdown","9d6f9e00":"markdown","8c11f293":"markdown","ff64451d":"markdown","1681da04":"markdown"},"source":{"6147b450":"import numpy as np\nimport pandas as pd\nfrom sklearn.metrics.pairwise import cosine_similarity, cosine_distances\nimport networkx as nx\nimport json\nfrom pandas.io.json import json_normalize\nimport matplotlib.pyplot as plt\nimport altair as alt\nimport plotly\nimport os\nfrom math import sqrt\n\n%precision %.2f\npd.options.display.float_format = '{:,.2f}'.format\n\n#print(os.listdir(\"..\/input\"))","114d69e6":"credits = pd.read_csv('..\/input\/tmdb_5000_credits.csv')\nmovies = pd.read_csv('..\/input\/tmdb_5000_movies.csv')","1fde3ed3":"movies.head(1)","9fc32a82":"credits.head(1)","06807bcd":"genre_list = movies.genres.apply(json.loads).apply(lambda x: [e['name'] for e in x if 'name' in e])","5de5d8f8":"pd.DataFrame(genre_list[0])","559df734":"unique_genres = set([])\nfor x in genre_list.values:\n    for e in x:\n        unique_genres.add(e)\n#len(list(unique_genres))","ee345c9b":"pd.DataFrame(list(unique_genres))","604a9d6c":"def build_gender_row(genre_list, all_genres=unique_genres):\n    row_movie_gender = pd.Series(0, index=all_genres)\n    row_movie_gender[genre_list]=1\n    return row_movie_gender ","eb507f46":"genres = pd.DataFrame([build_gender_row(e) for e in genre_list])\n#for movie_gender in genre_list","e036d584":"#genres = pd.concat([movies['original_title'], genres], axis = 1)\ngenres.head(1)","326b4f74":"genres.Family.sum()","6c159f4c":"genres.Animation.sum()","6fe33f34":"genres.query('Family == 1 & Animation == 1').shape[0]","ea722593":"(genres.query('Family == 1 & Animation == 1').shape[0])\\\n\/(sqrt(genres.Family.sum())*sqrt(genres.Animation.sum()))","216a6996":"genres_sim = pd.DataFrame(cosine_similarity(genres.T))\ngenres_sim.columns = genres.columns\ngenres_sim.index = genres.columns","4761bdea":"genres_sim","664101a8":"df = genres_sim.where(np.triu(np.ones(genres_sim.shape), 1).astype(np.bool))\ndf = df.stack().reset_index()\ndf.columns = ['Row','Column','Value']\ndf.sort_values('Value', ascending = False).head(10)","5e6da851":"df.query('Row == \"Adventure\" | Column == \"Adventure\"').sort_values('Value', ascending = False).head(10)","4da3234f":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\ninit_notebook_mode(connected=True) #do not miss this line\n\nnames = genres_sim.columns.tolist()\ndendro = ff.create_dendrogram(genres_sim, orientation='left', labels=names)\ndendro['layout'].update({'width':800, 'height':600, 'margin':go.layout.Margin(\n        l=150,\n        r=50,\n        b=50,\n        t=50,\n        pad=0\n    )})\n\npy.offline.iplot(dendro)","6022c3cb":"from scipy.cluster import hierarchy\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nimport matplotlib.pyplot as plt\n\nZ = hierarchy.linkage(genres.T, 'complete', 'euclidean')\n# single, complete, average, weighted, centroid, ward, median\n# cosine, euclidean, jaccard, etc.\n\nfig = plt.figure()\nfig.set_size_inches(12, 10)\nnames = genres_sim.columns.tolist()\ndn = hierarchy.dendrogram(Z, orientation='right', labels=names)","f413ad7a":"G = nx.from_pandas_adjacency(genres_sim)\nG.name = 'Graph from pandas adjacency matrix'\nprint(nx.info(G))","c70864e1":"from networkx.algorithms import community\n#G = nx.barbell_graph(5, 1)\ncommunities_generator = community.girvan_newman(G)\ntop_level_communities = next(communities_generator)\nnext_level_communities = next(communities_generator)\nsorted(map(sorted, next_level_communities))","6582e8b8":"from sklearn.cluster import AffinityPropagation\nimport numpy as np\n\nclustering = AffinityPropagation().fit(genres_sim)\nclustering \ncluster_centers_indices = clustering.cluster_centers_indices_\nlabels = clustering.labels_\n\nn_clusters_ = len(cluster_centers_indices)\nprint(n_clusters_)\n\n# Seems to work just fine","8a4a18c9":"aux = pd.DataFrame(clustering.labels_)\naux.index = genres.columns\naux.sort_values(0)","867fdffc":"aux3 = pd.DataFrame(clustering.cluster_centers_)\naux3.columns = genres.columns\naux3","8d132b84":"from sklearn.cluster import KMeans\n\nwcss = []\nfor i in range(1,11):\n    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)\n    kmeans.fit(genres.T)\n    wcss.append(kmeans.inertia_)\n\nplt.plot(range(1,11), wcss)\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('wcss')\nplt.show()","766facec":"kmeans = KMeans(n_clusters=5, init='k-means++', max_iter=300, n_init=10, random_state=0)\nkmeans.fit(genres.T)","0ec6ad6d":"aux2 = pd.DataFrame(kmeans.labels_)\naux2.index = genres.columns\naux2.sort_values(0)","74484bb8":"pd.DataFrame(kmeans.cluster_centers_)","77499120":"from sklearn.cluster import AgglomerativeClustering","d18b7b8c":"clustering = AgglomerativeClustering(affinity='euclidean', linkage='complete', n_clusters=5, connectivity=genres_sim)\nclustering.fit(genres.T)\nclustering\n\n# If connectivity matrix is not provided the results changes slightly. If linkage is not 'complete' the results are much worse. Other than that, ok.","ab71c0cc":"clustering.labels_","b50f0508":"aux2 = pd.DataFrame(clustering.labels_)\naux2.index = genres.columns\naux2.sort_values(0)","a23f3909":"## Network stuff, oh man I am rusty : (","a78d0482":"## Cosine similarity","538ea458":"Movies are cool. They make you think, feel, learn and above all be entertained. They are the ultimate hobby. What are your favourite movies? Directors? Genres? Which movies do you really (really) hate? Which movies do you guilty watch? Top Gun? Me too.\n\nThis is the very first of a series of kernels I am going to dedicate to my passion of movies. Although I will be using data science tools to extract information and display it in particular ways, these are going to be short artcicles mainly about movies. Through data, yes, but about movies.\n\nIn this first kernel I dive in a concept I have always found particularly tricky: genres. Wikipedia says a genre is just a style or category of art. However, I believe movie genres are specially fuzzy beings. Where does terror end and thriller starts? Is _The Big Leboswki_ a comedy? a noir film? Do you have a particular favourite genre? How do you know it's your favourite? Maybe you like a lot of movies of that genre, but that's just because there are a lot of movies of it. I mean, it defies statistics that Michael Bay hasn't been able to do a decent Transformers movie. And what it is that defines a genre? A particular aesthetic? Are there similar genres? Comedy and romance? Action and adventure? Are there genres that are more frequent in some decades or countries? Can we reverse engineer some of these questions purely from data analysis?\n\nWill this be too technical for people who just like movies and too boring for people who only like data science? Let's get to it, or as Martin Lawrence's character in the masterpice _Bad Boys 2_ once said: _shit just got real_.","bcc9d6e3":"## Dendrograms, oh look! pretty pictures!","ef2cd67a":"One of the main sins of data scientist (and there are many) is not looking at the data. Seems fairly straight forward, right? Just look at the data! Develop a feeling of how it looks, get to know it. The dataset is divided in two tables: `movies` and `credits`.\n\n`movies` contains the basic infom\n\nLet's look at the very first movie in the dataset.","5cd934dd":"There is not clear elbow where the K-Means method finds a partition of clusters which is optimal. Very linear. Let's just take five for instance:","25cf5179":"Now let\u00b4s see how many different genres there are in this dataset.","b3331593":"### Affinity Propagation","6e636f69":"Ok, now this is starting to get interesting. The previous matrix, defined in the \u00b4genres_sim\u00b4dataframe defines the frequency in which two genres appear in the same movies. This frequency is defined by the `cosine_similarity` and goes from 1 to 0. One meaning complete similarity, which only occurs in the main diagonal, that is, between a genre and itself. And zero meaning no overlap whatsoever. Please note that this is a symmetric matrix so every value is repeated twice. Some trends star to appear.","14cba3c5":"Those are:","6824f6d3":"## Data Loading","82a719bf":"_Avatar_ genres are the following:","948bf39a":"### Agglomerative Clustering","ade4397d":"For every pair of genres we have:","9e5433b9":"In this first kernel I will be using the TMDB 5000 Movie Dataset, one of the most popular dataset on Kaggle. I like it because it is relatively small and easy to handle. Maybe in further kernels I will use deeper datasets or combinations of several.","fa0666a5":"When going directly to scipy and using the hierarchy.linkage funciton we can use many different linkages and distances. Please note that the cosine distance = 1 - cosine similarity.","50e0a95a":"For instance, _Avatar_ genres are shown as:","72bb54d9":"# Opening credits","4cb85d1d":"Plotly has limited options when displaying a dendrogram. Mostly the linkage or hierarchical clustering is set to complete.","ed95bb57":"Ok... some of these are... questinable to say the least hehe. Family?! As in kids friendly? Foreign seems like a very US centered concept, foreign films are just films, with their own genres but whatever. And TV Movie sounds just like an insult to me hehe.","237a3f32":"Let\u00b4s see what are the genres that appear more frequently together. Without looking into the dataset I would assume it would be pair such as Action-Adventure or Romance-Comedy or something like that. In order to do that, let\u00b4s use the `cosine_similarity` function within sklearn.","d2e53950":"# Second act: exploration","3c3b7fa7":"## Libraries Loading","62f91033":"Let's see a practical example of Family-Adventure:","a9e94f4b":"We are going to use the usual suspects (movie reference) for data analysis and visualization.","b5a650e4":"The results is not very useful since the algorithm is keeping most of the genres in the same cluster.","444e2933":"Let\u00b4s now just expand the genres into columns and mark the ones that are defined in each movie.","49257d8f":"# First act: the data","1b6f4e91":"## Proper clustering (YEAH, SCIENCE BITCH!)","cee93b9c":"# Third act: similarity","e67f2538":"Exactly the same thing as the Dendrogram, it gives you back one particular snapshot. Defined by the affinity, the linkage and the number of clusters.","16633e4c":"Ok, I am not a big fan of this movie so there they go half of my readers! It's _Avatar_, the James Cameron uberhit that still holds the number 1 box office of all time with almost 2.8 billion USD (yeah, I said billions). You can actually check that number in the `revenue` field within the `movies` table.","9d6f9e00":"Ok, it looks like my predictions were not that off. Action-Adventure is the second most frequent combination only after Family-Animation. Comedy-Romance is number six because we live in a bleak world now haha. Some combinations are perfectly logical, though they did not occured to me inmediatly: Thriller-Crime or War-History. Please note that the `cosine_similarity`  definition is a normalized dot product so higher similarity does not necessarily mean largest number of movies with those common genres. It means higher common appearence of those genres in movies of those particular genres. So if a two genres are very uncommon but they always appear together, we would see them as the top of list.  ","8c11f293":"### KMeans (ALL THE MEANS!)","ff64451d":"We extract the genres of each movie. Most of the times movies belong to more than one genre.","1681da04":"Reading the data"}}