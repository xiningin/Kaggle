{"cell_type":{"b8a3567f":"code","3f9a5ea8":"code","a0ad02a1":"code","7a07fd7b":"code","1fdb3c0d":"code","442a1797":"code","1f948bfc":"code","bc499ba7":"code","acecfc98":"code","559b2d9b":"code","4824bedd":"code","bab56d4e":"code","6ed5c0d0":"code","8d415efc":"code","2988abec":"code","5435ef67":"code","b5c5a37d":"code","b64d3652":"code","e87a4fa4":"code","9673878e":"code","4bcf4a03":"markdown","fe7142cc":"markdown","a34ede23":"markdown","7afe5334":"markdown","65f15018":"markdown","4550f1d6":"markdown","1245983b":"markdown","61baa61f":"markdown","a50a204c":"markdown","9b12bb7e":"markdown"},"source":{"b8a3567f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f9a5ea8":"import os\nimport pandas as pd\nimport numpy as np\nimport torch\nimport torch.optim as optim\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom sklearn import preprocessing","a0ad02a1":"train=pd.read_csv('\/kaggle\/input\/carclassification\/car5_train.csv')","7a07fd7b":"x_train=train.loc[:,[i for i in train.keys()[1:-1]]]\ny_train=train[train.keys()[-1]]","1fdb3c0d":"x_train","442a1797":"y_train","1f948bfc":"Scaler=preprocessing.StandardScaler()\nx_train=Scaler.fit_transform(x_train)","bc499ba7":"x_train=np.array(x_train)\ny_train=np.array(y_train)\nx_train=torch.FloatTensor(x_train)\ny_train=torch.LongTensor(y_train)","acecfc98":"x_train","559b2d9b":"import torch.nn.functional as F\nimport torch.optim as optim\n\nnb_class=8\nnb_data=len(y_train)","4824bedd":"W=torch.zeros((8,nb_class),requires_grad=True)\nb=torch.zeros(1,requires_grad=True)\n\noptimizer=torch.optim.SGD([W,b],lr=0.5)\n\nnb_epochs=1000\n\n\nfor epoch in range(nb_epochs+1):\n  hypothesis=F.softmax(x_train.matmul(W)+b,dim=1)\n  cost = F.cross_entropy((x_train.matmul(W) + b), y_train)\n\n  optimizer.zero_grad()\n  cost.backward()\n  optimizer.step()\n\n  if epoch%100==0:\n    print('Epoch: {:4d}\/{}  Cost: {:.6f}'.format(epoch,nb_epochs,cost.item()))","bab56d4e":"hypothesis=F.softmax(x_train.matmul(W)+b,dim=1)\npredict=torch.argmax(hypothesis,dim=1)\n\nprint(predict)\nprint(y_train)\n\ncorrect_prediction=predict.float()==y_train\nprint(correct_prediction)\n\naccuracy=correct_prediction.sum().item()\/len(correct_prediction)\nprint('Accuracy: {:2.2f}'.format(accuracy*100))","6ed5c0d0":"test=pd.read_csv('\/kaggle\/input\/carclassification\/car5_test.csv')","8d415efc":"x_test=test.loc[:,[i for i in test.keys()[1:]]]","2988abec":"x_test=Scaler.fit_transform(x_test)\nx_test=np.array(x_test)\nx_test=torch.FloatTensor(x_test)","5435ef67":"hypothesis=F.softmax(x_test.matmul(W)+b,dim=1)\npredict=torch.argmax(hypothesis,dim=1)\n\nprint(predict.shape)","b5c5a37d":"predict","b64d3652":"\nsubmit=pd.read_csv('\/kaggle\/input\/carclassification\/car5_submit.csv')\n\nsubmit","e87a4fa4":"predict=predict.detach().reshape(-1,1)\n\nid=np.array([i for i in range(len(predict))]).reshape(-1,1)\nresult=np.hstack([id,predict])\n\nsubmit=pd.DataFrame(result,columns=[\"Id\",\"Category\"])\nsubmit.to_csv(\"baseline.csv\",index=False,header=True)","9673878e":"submit","4bcf4a03":"# \ubaa8\ub4c8 \ubd88\ub7ec\uc624\uae30","fe7142cc":"# \ubaa8\ub378 \uc608\uce21","a34ede23":"1\uc5f4\uc740 \ub79c\ub364\uc73c\ub85c \uc124\uc815\ud55c id\uac12\uc774\ubbc0\ub85c \uc81c\uac70\ud55c \ucc44 train\uac12\uc5d0 \ub123\uc5b4\uc918\uc57c \ud55c\ub2e4.","7afe5334":"train\ub370\uc774\ud130\uc758 typeofoil\uc774\ub098 typeofcar\uc758 \uc218\uc640 \ub2e4\ub978 \uc790\ub9ac\uc218\uc640 \uac12 \ud3b8\ucc28\uac00 \ub9e4\uc6b0 \ud06c\ubbc0\ub85c \ub370\uc774\ud130\ub97c \uc815\uaddc\ud654 \uc2dc\ucf1c\uc918\uc57c\ud55c\ub2e4.\n\ub530\ub77c\uc11c 13\uc8fc\ucc28\uc5d0 \ubc30\uc6e0\ub358 Scaler\uc744 \uc0ac\uc6a9\ud55c\ub2e4.","65f15018":"# Train \ub370\uc774\ud130","4550f1d6":"# \uc81c\ucd9c \ud30c\uc77c \ub9cc\ub4e4\uae30","1245983b":"\uc704\uc5ed\uc2dc random\ud55c id\uac12\ub3c4 \uac19\uc774 \ub4e4\uc5b4\uc654\uae30 \ub54c\ubb38\uc5d0 1\ubd80\ud130 \ubf51\uc544\uc628\ub2e4.","61baa61f":"# \ubaa8\ub378\ud559\uc2b5","a50a204c":"# Test \ub370\uc774\ud130","9b12bb7e":"train\ub370\uc774\ud130\uc640 \uac19\uc774 test\ub370\uc774\ud130\ub3c4 Scaler\ud568\uc218\ub97c \ud1b5\ud558\uc5ec \ub370\uc774\ud130\ub97c \uc815\uaddc\ud654\uc2dc\ucf1c\uc918\uc57c\ud55c\ub2e4."}}