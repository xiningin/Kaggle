{"cell_type":{"904d8ea0":"code","a31a0375":"code","4d15b424":"code","d6690894":"code","f7ccf9c4":"code","2dc85d9b":"code","17850f5d":"code","22b666d5":"code","c5acecb4":"code","b94b4293":"code","c5e99261":"code","258c4c81":"code","6030554f":"code","3a006810":"code","caacd1da":"code","a274daa1":"code","8d15f99f":"code","a210b9ce":"code","f6930cc5":"code","52d8327c":"code","61494a01":"code","23a1c7ef":"code","07bedbef":"code","12399aaa":"code","fd85026c":"code","2b2981aa":"code","b74a06f9":"code","729af51c":"code","34d65eeb":"code","03dfd359":"code","1fb287a3":"code","b1912352":"code","cf92af6d":"code","0804fe59":"code","ab4e7daf":"code","060e6604":"code","5e675884":"code","6cfc8f0c":"code","b24fe890":"code","0dae6da7":"code","4ce4784f":"code","740681e3":"code","aa7c7712":"code","f9f9c4ce":"code","a73efeb7":"code","eaf70e99":"code","6b003b82":"code","2c4561a6":"code","8bdab73a":"code","63a8e8a5":"code","4c8a71a0":"code","ea9a0873":"code","12a3d2b1":"code","225c9957":"code","63595d8c":"code","cf1be165":"code","d30166a1":"code","35029060":"code","753920f7":"code","567b55b3":"code","08ada57d":"code","3117d6d6":"code","ddb92445":"code","cb32fe68":"code","9d53169e":"code","819459c8":"code","bf2b9655":"code","9b66044b":"code","a5482033":"code","bd1ff0a0":"code","7fda50d3":"code","10e04004":"code","727bb2a4":"code","a7ba2ec8":"code","e24c479f":"code","6d0577bc":"code","c2906f31":"code","2cbdeae0":"code","45fe38c7":"code","2cb1d509":"code","b0c609bc":"code","6b000591":"code","f94987fb":"code","95adb221":"code","0c4468f3":"code","51f590de":"code","f16b714f":"markdown","1cb189f6":"markdown"},"source":{"904d8ea0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n","a31a0375":"train=pd.read_excel('..\/input\/flight-fare-prediction-mh\/Data_Train.xlsx')\ntest_data=pd.read_excel('..\/input\/flight-fare-prediction-mh\/Test_set.xlsx')","4d15b424":"pd.set_option('display.max_columns',None)","d6690894":"train.tail()","f7ccf9c4":"(10862*100)\/10863","2dc85d9b":"train.info()\n\n#Luckily we have a 99.99 % of non null values so we can drop the null value.","17850f5d":"train.dropna(inplace=True)","22b666d5":"train.info()","c5acecb4":"train['Journey_day']=pd.to_datetime(train.Date_of_Journey,format='%d\/%m\/%Y').dt.day\n\ntrain['Journey_month']=pd.to_datetime(train.Date_of_Journey,format='%d\/%m\/%Y').dt.month\n\ntrain.drop(train[['Date_of_Journey']],axis=1,inplace=True)","b94b4293":"train['DEP_Hr']=pd.to_datetime(train.Dep_Time).dt.hour\n\ntrain['DEP_min']=pd.to_datetime(train.Dep_Time).dt.minute\n\ntrain.drop(train[['Dep_Time']],axis=1,inplace=True)","c5e99261":"train['Arrival_Hour']=pd.to_datetime(train.Arrival_Time).dt.hour\ntrain['Arrival_Min']=pd.to_datetime(train.Arrival_Time).dt.minute\ntrain.drop(train[['Arrival_Time']],axis=1,inplace=True)","258c4c81":"train['Additional_Info'].value_counts()","6030554f":"duration = list(train[\"Duration\"])\n\nfor i in range(len(duration)):\n    if len(duration[i].split()) != 2:    # Check if duration contains only hour or mins\n        if \"h\" in duration[i]:\n            duration[i] = duration[i].strip() + \" 0m\"   # Adds 0 minute\n        else:\n            duration[i] = \"0h \" + duration[i]           # Adds 0 hour\n\nduration_hours = []\nduration_mins = []\nfor i in range(len(duration)):\n    duration_hours.append(int(duration[i].split(sep = \"h\")[0]))    # Extract hours from duration\n    duration_mins.append(int(duration[i].split(sep = \"m\")[0].split()[-1]))","3a006810":"train['Duration_hours']=duration_hours\ntrain['Duration_mins']=duration_mins","caacd1da":"train.drop(train[['Duration']],axis=1,inplace=True)","a274daa1":"# For which Destination is priced high\nplt.figure(figsize=(10,10))\nsns.catplot(x='Destination',y='Price',data=train,kind='boxen',height=5,aspect=3)\nplt.title(\"Destination Vs Price\",loc='center',fontsize=20)\nplt.show()","8d15f99f":"#From which source is the price high\nsns.catplot(x='Source',y='Price',data=train,aspect=3,kind='point',height=5)\nplt.title(\"Source Vs Price\",loc='center',fontsize=20)\nplt.show()","a210b9ce":"#Which airways has highest rate\nsns.catplot(x='Airline',y='Price',kind='point',data=train,height=5,aspect=3)\nplt.xticks(rotation=45)\nplt.show()","f6930cc5":"train.drop(train[['Additional_Info','Route']],axis=1,inplace=True)","52d8327c":"#Now comes encoding part\n#train.info()\ncat_cols=train.select_dtypes(include=[np.object])\nprint(cat_cols.columns)","61494a01":"#df_train=pd.get_dummies(train,drop_first=True)","23a1c7ef":"train.head()","07bedbef":"train.columns","12399aaa":"train.replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)","fd85026c":"Source = train[[\"Source\"]]\n\nSource = pd.get_dummies(Source, drop_first= True)\n\nSource.head()","2b2981aa":"Destination = train[[\"Destination\"]]\n\nDestination = pd.get_dummies(Destination, drop_first = True)\n\nDestination.head()","b74a06f9":"Airline = train[[\"Airline\"]]\n\nAirline = pd.get_dummies(Airline, drop_first= True)\n\nAirline.head()","729af51c":"final_train = pd.concat([train, Airline, Source, Destination], axis = 1)","34d65eeb":"final_train.drop([\"Airline\", \"Source\", \"Destination\"], axis = 1, inplace = True)","03dfd359":"final_train","1fb287a3":"test_data['Journey_day']=pd.to_datetime(test_data.Date_of_Journey,format='%d\/%m\/%Y').dt.day\n\ntest_data['Journey_month']=pd.to_datetime(test_data.Date_of_Journey,format='%d\/%m\/%Y').dt.month\n\ntest_data.drop(test_data[['Date_of_Journey']],axis=1,inplace=True)","b1912352":"test_data['DEP_Hr']=pd.to_datetime(test_data.Dep_Time).dt.hour\n\ntest_data['DEP_min']=pd.to_datetime(test_data.Dep_Time).dt.minute\n\ntest_data.drop(test_data[['Dep_Time']],axis=1,inplace=True)","cf92af6d":"test_data['Arrival_Hour']=pd.to_datetime(test_data.Arrival_Time).dt.hour\ntest_data['Arrival_Min']=pd.to_datetime(test_data.Arrival_Time).dt.minute\ntest_data.drop(test_data[['Arrival_Time']],axis=1,inplace=True)","0804fe59":"test_data['Additional_Info'].value_counts()","ab4e7daf":"duration = list(test_data[\"Duration\"])\n\nfor i in range(len(duration)):\n    if len(duration[i].split()) != 2:    # Check if duration contains only hour or mins\n        if \"h\" in duration[i]:\n            duration[i] = duration[i].strip() + \" 0m\"   # Adds 0 minute\n        else:\n            duration[i] = \"0h \" + duration[i]           # Adds 0 hour\n\nduration_hours = []\nduration_mins = []\nfor i in range(len(duration)):\n    duration_hours.append(int(duration[i].split(sep = \"h\")[0]))    # Extract hours from duration\n    duration_mins.append(int(duration[i].split(sep = \"m\")[0].split()[-1]))","060e6604":"test_data['Duration_hours']=duration_hours\ntest_data['Duration_mins']=duration_mins","5e675884":"test_data.drop(test_data[['Duration']],axis=1,inplace=True)","6cfc8f0c":"test_data.drop(test_data[['Additional_Info','Route']],axis=1,inplace=True)","b24fe890":"test_data.replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)","0dae6da7":"Destination = pd.get_dummies(test_data[\"Destination\"], drop_first = True)\nSource = pd.get_dummies(test_data[\"Source\"], drop_first= True)\nAirline = pd.get_dummies(test_data[\"Airline\"], drop_first= True)","4ce4784f":"final_test = pd.concat([test_data, Airline, Source, Destination], axis = 1)","740681e3":"final_test.drop([\"Airline\", \"Source\", \"Destination\"], axis = 1, inplace = True)","aa7c7712":"final_test","f9f9c4ce":"final_train.drop(final_train[['Airline_Trujet']],axis=1,inplace=True)","a73efeb7":"len(final_train.columns)","eaf70e99":"final_test.columns=['Total_Stops', 'Journey_day', 'Journey_month', 'DEP_Hr',\n       'DEP_min', 'Arrival_Hour', 'Arrival_Min', 'Duration_hours',\n       'Duration_mins', 'Airline_Air India', 'Airline_GoAir', 'Airline_IndiGo',\n       'Airline_Jet Airways', 'Airline_Jet Airways Business',\n       'Airline_Multiple carriers',\n       'Airline_Multiple carriers Premium economy', 'Airline_SpiceJet',\n       'Airline_Vistara', 'Airline_Vistara Premium economy',\n       'Source_Chennai', 'Source_Delhi', 'Source_Kolkata', 'Source_Mumbai',\n       'Destination_Cochin', 'Destination_Delhi', 'Destination_Hyderabad',\n       'Destination_Kolkata', 'Destination_New Delhi']","6b003b82":"final_train","2c4561a6":"final_test","8bdab73a":"X=final_train.drop(train[['Price']],axis=1)","63a8e8a5":"Y=final_train['Price']","4c8a71a0":"#To validate we will split the train data into train and test splits\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=42)","ea9a0873":"print('X_train shape: ',X_train.shape)\nprint('Y_train shape: ',Y_train.shape)\nprint('X_test shape: ',X_test.shape)\nprint('Y_test shape: ',Y_test.shape)","12a3d2b1":"from sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor ","225c9957":"from xgboost import XGBRegressor","63595d8c":"rf=RandomForestRegressor()\ngb=GradientBoostingRegressor()\nxgb=XGBRegressor()","cf1be165":"rf.fit(X_train,Y_train)","d30166a1":"gb.fit(X_train,Y_train)","35029060":"xgb.fit(X_train,Y_train)","753920f7":"pred=rf.predict(X_test)","567b55b3":"pred_gb=gb.predict(X_test)","08ada57d":"pred_XGB=xgb.predict(X_test)","3117d6d6":"from sklearn.metrics import accuracy_score","ddb92445":"print('------------------------------------------RF Scores---------------------------------------------')\nprint('Train_SCore :',rf.score(X_train,Y_train))\nprint('Test_SCore :' ,rf.score(X_test,Y_test))\nprint('------------------------------------------GB Scores---------------------------------------------')\nprint('Train_SCore : ',gb.score(X_train,Y_train))\nprint('Test_SCore : ' ,gb.score(X_test,Y_test))\nprint('------------------------------------------XGB Scores---------------------------------------------')\nprint('Train_SCore :',xgb.score(X_train,Y_train))\nprint('Test_SCore :' ,xgb.score(X_test,Y_test))","cb32fe68":"plt.figure(figsize=(10,7))\nsns.distplot(Y_test-pred)\nplt.title('Random Forest')","9d53169e":"plt.figure(figsize=(10,7))\nsns.distplot(Y_test-pred_gb)\nplt.title('Gradient Boosting')","819459c8":"plt.figure(figsize=(10,7))\nsns.distplot(Y_test-pred_XGB)\nplt.title('XGBoosting')","bf2b9655":"plt.scatter(Y_test,pred)","9b66044b":"import plotly.express as px","a5482033":"fig=px.scatter(x=Y_test,y=pred)\n\nfig.show()","bd1ff0a0":"fig=px.scatter(x=Y_test,y=pred_gb)\n\nfig.show()","7fda50d3":"fig=px.scatter(x=Y_test,y=pred_XGB)\nfig.show()","10e04004":"from sklearn.model_selection import RandomizedSearchCV","727bb2a4":"n_estimators=[int(x) for x in np.linspace(start=100,stop=1200,num=12)]\nmax_features=['auto','sqrt']\nmax_depth=[int(x) for x in np.linspace(5,30,num=7)]\nmin_samples_split = [2, 5, 10, 15, 100]\nmin_samples_leaf = [1, 2, 5, 10]","a7ba2ec8":"rf_grid={'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}","e24c479f":"rf_random=RandomizedSearchCV(estimator=rf,param_distributions=rf_grid,scoring='neg_mean_squared_error',n_iter=10,\n                             cv=5,verbose=2,random_state=42,n_jobs=1)","6d0577bc":"rf_random.fit(X_train,Y_train)","c2906f31":"xgb_random=RandomizedSearchCV(estimator = xgb, param_distributions = rf_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2,\n                                random_state=42, n_jobs = 1)","2cbdeae0":"xgb_random.fit(X_train,Y_train)","45fe38c7":"rf_random.best_params_","2cb1d509":"predRF=rf_random.predict(X_test)","b0c609bc":"plt.figure(figsize = (8,8))\nsns.distplot(Y_test-predRF)\nplt.show()","6b000591":"xgb_random.best_params_","f94987fb":"predXGB=xgb_random.predict(X_test)","95adb221":"plt.figure(figsize = (8,8))\nsns.distplot(Y_test-predXGB)\nplt.show()","0c4468f3":"rf_random.predict(final_test)","51f590de":"xgb_random.predict(final_test)","f16b714f":"Hyper parameter tuning for better results","1cb189f6":"### As route is the path b\/w source and destination and if there is a stop b\/w source and destination \nit is seen in total stops columns.So we can drop the Route column.\nThr columns Additional Info column has more than 80% of columns with 'No Info' which potentially is a NA value in terms.so we can drop them"}}