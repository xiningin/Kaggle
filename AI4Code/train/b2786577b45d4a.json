{"cell_type":{"7d14478e":"code","ab795df6":"code","70012215":"code","a8d41b78":"code","d4514fad":"code","1e404ee9":"code","ce494b81":"code","eb5382de":"code","27fd9e3d":"code","a877daed":"code","111cee57":"code","d977efc3":"code","65310bb4":"code","c648b3f3":"code","1a212949":"code","ef537c77":"code","7b991ec2":"code","52fd07fc":"code","e1cb5a8e":"code","75d7e2ce":"code","ca4adc32":"code","fb110264":"code","5db3fa86":"code","91935153":"code","5bfed079":"code","1b610659":"code","c4c7f622":"code","421d101e":"code","9963b268":"code","007bc37e":"code","354d1dc8":"code","52d9aabd":"code","6421bf59":"code","6a57de80":"code","0b00d953":"code","e955df31":"code","5547cc08":"code","a16b8a2a":"code","3afea22b":"code","0e767ae4":"code","9f70118c":"code","b602f1a6":"code","6145e443":"code","6a643803":"code","c482edf0":"code","5217b7d2":"markdown","418702a5":"markdown","f1964a92":"markdown","ca779915":"markdown","0c0e5208":"markdown","f071ec3d":"markdown","9a6f0099":"markdown","c36bca4a":"markdown","5681c3cd":"markdown","19baab69":"markdown","2527b7a0":"markdown","40273996":"markdown","7c66ad02":"markdown","e2217a2e":"markdown","d8e40d67":"markdown","ff4741f6":"markdown","b7a156ce":"markdown","fe1f286f":"markdown","100a2ddb":"markdown","5f31eb58":"markdown","ccdabbd7":"markdown","8fbb8c19":"markdown","873788c3":"markdown","aca12f5a":"markdown","bec2bfb6":"markdown","67119d81":"markdown","b65533ea":"markdown","bf73985b":"markdown","7d8374cb":"markdown"},"source":{"7d14478e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ab795df6":"data = pd.read_csv('\/kaggle\/input\/heart-failure-prediction\/heart.csv')\ndata.head()","70012215":"# Shape of data\nprint(\"The shape of data is\", data.shape)\n\n# info of data\ndata.info()","a8d41b78":"# Checking for null values \ndata.isnull().sum()","d4514fad":"# Value counts of Target variable.\ndata['HeartDisease'].value_counts()","1e404ee9":"# Value counts of ExerciseAngina variable.\ndata['ExerciseAngina'].value_counts()","ce494b81":"# Value counts of ST_Slope variable.\ndata['ST_Slope'].value_counts()","eb5382de":"# Value counts of RestingECG variable.\ndata['RestingECG'].value_counts()","27fd9e3d":"# Value counts of ChestPainType variable.\ndata['ChestPainType'].value_counts()","a877daed":"# Value counts of sex variable. \ndata['Sex'].value_counts()","111cee57":"# Checking for corelations.\ndata.corr()","d977efc3":"# convert categorical columns to numerical values\ndata.replace({\"ExerciseAngina\":{'N':0,'Y':1},\"ST_Slope\":{'Flat':0,'Up':1,'Down':2},\"RestingECG\":{'Normal':0,'LVH':1,'ST':2},\n                      \"ChestPainType\":{'ASY':0,'NAP':1,'ATA':2,'TA':3},\"Sex\":{'M':0,'F':1}},inplace=True)","65310bb4":"import seaborn as sns\n# let's see how data is distributed for every column.\nimport matplotlib.pyplot as plt\nplt.figure(figsize = (20, 25))\nplotnumber = 1\nfor column in data:\n    if plotnumber <= 9:\n        ax = plt.subplot(3, 3, plotnumber)\n        sns.distplot(data[column])\n        plt.xlabel(column, fontsize = 15)\n        \n    plotnumber += 1\nplt.show()","c648b3f3":"fig, ax = plt.subplots(figsize = (15, 10))\nsns.boxplot(data = data, width = 0.5, ax = ax, fliersize = 3)\nplt.show()","1a212949":"outlier = data['Cholesterol'].quantile(0.98)\n# removing the top 2% data from the pregnancies column\ndata = data[data['Cholesterol']<outlier]\n\noutlier = data['RestingBP'].quantile(0.99)\n# removing the top 1% data from BMI column\ndata = data[data['RestingBP']<outlier]\n\noutlier = data['Age'].quantile(0.99)\n# removing the top 1% data from Age column\ndata = data[data['Age']<outlier]","ef537c77":"# let's see again how data is distributed for every column.\nimport matplotlib.pyplot as plt\nplt.figure(figsize = (20, 25))\nplotnumber = 1\nfor column in data:\n    if plotnumber <= 9:\n        ax = plt.subplot(3, 3, plotnumber)\n        sns.distplot(data[column])\n        plt.xlabel(column, fontsize = 15)\n        \n    plotnumber += 1\nplt.show()\n","7b991ec2":"# Check outliers again.\nfig, ax = plt.subplots(figsize = (15, 10))\nsns.boxplot(data = data, width = 0.5, ax = ax, fliersize = 3)\nplt.show()","52fd07fc":"%matplotlib inline\n# education & Loan Status\nsns.factorplot(x='ExerciseAngina',y='HeartDisease',data=data)","e1cb5a8e":"# education & Loan Status\nsns.factorplot(x='ChestPainType',y='HeartDisease',data=data)","75d7e2ce":"# Spilt data into X & Y\nX = data.drop(columns='HeartDisease', axis=1)\nY = data['HeartDisease']","ca4adc32":"print(X.shape)\nprint(Y.shape)","fb110264":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=42)","5db3fa86":"print(\"The shape of X_train is \", X_train.shape)\nprint(\"The shape of X_test is \", X_test.shape)\nprint(\"The shape of Y_train is \", Y_train.shape)\nprint(\"The shape of Y_test is \", Y_test.shape)","91935153":"from sklearn import svm\nfrom sklearn.metrics import accuracy_score\nclassifier_model = svm.SVC(kernel='linear')\nclassifier_model.fit(X_train,Y_train)","5bfed079":"# accuracy score on training data\n\nX_train_prediction = classifier_model.predict(X_train)\ntraining_data_accuray = accuracy_score(X_train_prediction,Y_train)\nprint('Accuracy on training data : ', training_data_accuray)\n\n# accuracy score on testing data\n\nX_test_prediction = classifier_model.predict(X_test)\nsvm_test_data_accuray = accuracy_score(X_test_prediction,Y_test)\nprint('Accuracy on test data    : ', svm_test_data_accuray)","1b610659":"from sklearn.linear_model import LogisticRegression\nlogistic_model = LogisticRegression(max_iter=200,solver='liblinear')\nlogistic_model.fit(X_train,Y_train)","c4c7f622":"# accuracy score on training data\n\nX_train_prediction = logistic_model.predict(X_train)\ntraining_data_accuray = accuracy_score(X_train_prediction,Y_train)\nprint('Accuracy on training data  : ', training_data_accuray)\n\n# accuracy score on testing data\nX_test_prediction = logistic_model.predict(X_test)\nlgr_test_data_accuray = accuracy_score(X_test_prediction,Y_test)\nprint('Accuracy on test data      : ', lgr_test_data_accuray)","421d101e":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nsc_X_train = sc_X.fit_transform(X_train)\nsc_X_test = sc_X.transform(X_test)","9963b268":"from sklearn.tree import DecisionTreeClassifier\ndecision_tree_model = DecisionTreeClassifier(random_state = 0)\ndecision_tree_model.fit(sc_X_train,Y_train)","007bc37e":"# hyper parameter tuning\n\nfrom sklearn.model_selection import GridSearchCV\n\ngrid_params = {\n    'criterion' : ['gini', 'entropy'],\n    'max_depth' : [3, 5, 7, 10],\n    'min_samples_split' : range(2, 10, 1),\n    'min_samples_leaf' : range(2, 10, 1)\n}\n\ngrid_search = GridSearchCV(decision_tree_model, grid_params, cv = 5, n_jobs = -1, verbose = 1)\ngrid_search.fit(sc_X_train, Y_train)","354d1dc8":"# best parameters and best score\n\nprint(grid_search.best_params_)\nprint(grid_search.best_score_)","52d9aabd":"dtc = grid_search.best_estimator_\ny_pred = dtc.predict(sc_X_test)\ndtc_train_acc = accuracy_score(Y_train, dtc.predict(sc_X_train))\ndtc_test_acc = accuracy_score(Y_test, y_pred)\n\nprint(f\"Training Accuracy of Decesion Tree Model is {dtc_train_acc}\")\nprint(f\"Test Accuracy of Decesion Tree Model is {dtc_test_acc}\")","6421bf59":"from sklearn.neighbors import KNeighborsClassifier\nk_model = KNeighborsClassifier(n_neighbors=6)\nkfitModel = k_model.fit(sc_X_train, Y_train)\nprint(kfitModel)\n#predictions = fitModel.predict(X_test)\n","6a57de80":"# finding optimal values for k\nfrom sklearn.model_selection import cross_val_score\ncross_valid_scores = []\nfor k in range(1, 100):\n  knn = KNeighborsClassifier(n_neighbors = k)\n  scores = cross_val_score(knn,X, Y, cv = 10, scoring = 'accuracy')\n  cross_valid_scores.append(scores.mean())    \n\nprint(\"Optimal k with cross-validation: \\t\",np.argmax(cross_valid_scores))","0b00d953":"# accuracy score on training data\n\nkX_train_prediction = kfitModel.predict(sc_X_train)\ntraining_data_accuray = accuracy_score(kX_train_prediction,Y_train)\nprint('Accuracy on training data  : ', training_data_accuray)\n\n# accuracy score on testing data\nkX_test_prediction = kfitModel.predict(sc_X_test)\nkx_lgr_test_data_accuray = accuracy_score(kX_test_prediction,Y_test)\nprint('Accuracy on test data      : ', kx_lgr_test_data_accuray)","e955df31":"from sklearn.ensemble import RandomForestClassifier\n\nrand_clf = RandomForestClassifier(criterion = 'gini', max_depth = 3, max_features = 'sqrt', min_samples_leaf = 2, min_samples_split = 4, n_estimators = 180)\nrand_clf.fit(X_train, Y_train)\n\ny_pred = rand_clf.predict(X_test)\n\nrand_clf_train_acc = accuracy_score(Y_train, rand_clf.predict(X_train))\nrand_clf_test_acc = accuracy_score(Y_test, y_pred)\n\nprint(f\"Training Accuracy of Random Forest Model is {rand_clf_train_acc}\")\nprint(f\"Test Accuracy of Random Forest Model is {rand_clf_test_acc}\")","5547cc08":"# Importing Keras libraries\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Dropout","a16b8a2a":"#adding the input and first hidden layer\nclassifier = Sequential()\nclassifier.add(Dense(units=16, kernel_initializer=\"glorot_uniform\", activation='relu',input_dim=11))\nclassifier.add(Dropout(rate=0.1))\n\n#adding the second hidden layer\nclassifier.add(Dense(units=16, kernel_initializer=\"glorot_uniform\", activation='relu'))\nclassifier.add(Dropout(rate=0.1))\n\n#adding the output layer\nclassifier.add(Dense(units=1, kernel_initializer=\"glorot_uniform\", activation='sigmoid'))\n","3afea22b":"# Compile the model\nclassifier.compile(optimizer=\"Adam\", loss='binary_crossentropy', metrics=['accuracy'])","0e767ae4":"# Fitting the model\nclassifier.fit(X_train, Y_train, batch_size=100, epochs=1000)","9f70118c":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)\ny_pred = (y_pred > 0.5)","b602f1a6":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(Y_test, y_pred)","6145e443":"sns.heatmap(cm,annot=True)\nplt.savefig('h.png')\n","6a643803":"models = ['SVM', 'LR', 'Decision Tree', 'Random Forest','KNN']\nscores = [svm_test_data_accuray, lgr_test_data_accuray, dtc_test_acc, rand_clf_test_acc,kx_lgr_test_data_accuray]\nmodels = pd.DataFrame({'Model' : models, 'Score' : scores})\nmodels.sort_values(by = 'Score', ascending = False)","c482edf0":"plt.figure(figsize = (18, 8))\nsns.barplot(x = 'Model', y = 'Score', data = models)\nplt.show()","5217b7d2":"### **\ud83d\udcab ANN give 87% accuracy not bad !**","418702a5":"### **\ud83c\udf2a Evaluation of SVM Model**","f1964a92":"### ***If you like the notebook please upvote & please give me more suggestions to polish my skills. \u2764***\n<img src= \"data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxIQEhUSEhMVFRUXFhgVFxYWFRYVFxYXFRgXFhUVFRgYHSggGBolGxcWITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGy0lICUvLS0tLS0tLS0tNS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIALwBDAMBEQACEQEDEQH\/xAAcAAEAAwADAQEAAAAAAAAAAAAABAUGAgMHAQj\/xABEEAABAgMFBQYCCAQDCQEAAAABAAIDBBEFBhIhMUFRYXGREyKBobHBMtEHI0JSYnKy4RQzNPEkgpIWF1Njc6LC0vAV\/8QAGwEBAAIDAQEAAAAAAAAAAAAAAAQFAgMGAQf\/xAA1EQACAgIABAQEBAUFAQEAAAAAAQIDBBEFEiExE0FRgSIyYXEjkaGxM0LB0fAUFVLh8WI0\/9oADAMBAAIRAxEAPwD29eHgQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAJQHCHFa74XA8iD6LxNPsZOLXdHNemIQBAEAQBAEAQFZPW5ChGlS525vudFi5pEynBtsW+y+pWRL0u+zDHi4n0Cw8X6ExcLXnIjvvNGOgYPA\/NeeKzauGVebZHiW7MH7dOQA9l54kjdHAoXkRIk5EdrEef8xWLkzeqa49or8ji2YeNHuHJx+a82z11QfdL8i1sq3nscGxCXNJpU\/EONdoWyNj7Mg5OBCUXKHRmuW4oggOL3hoqSAN5NAvT06WT8JxoIjCd2IL3kkvI95X6EgGqxMQgBKA64cdrsmuaeRBQycJLq0diGIQEGftWHBNHEl2uEZnx3LZCqU+xhZYoLbIkveOE40cHM4mhHjTRSJYU0trqQYcSqcuWSa+5cgqGWJ5\/fS1IpjuhBxaxgGQJGIuFSTTXWips66ficiekjqeE4tapVjW2ytsi3Y0u8HG5zKjEwkkEcK6FR6cqdb77XoS8rAqvi1pJ+TPUIUQOaHNzBAIPA5hdAmmto42UXFtPujpnpxkBhiRDRo6ncBvKxnOMI80uxnTTO2ahBdWebW5bsSacakth\/ZYD5u3lUWRlTtfovQ67DwK8ePrLzf9jjdqO5kzCw1zcGkDaDkQfXwXmJJxtjoy4jXGePPm8ls9TXQnFBAEAQBAEAQFFea0XQwIbDQuFSdoGlBzWE5aLLh+NGxucuyMotBeBeAIAgCAIDtlJd0R7WNGZP8Ac9FlFbejC2yNcHJnoTRQAbslJOVb29kS1Z9sCGXnXRo3nYFnXBzejKEeZ6MHOzsSM7E9xPDYOQ2KwjBRXQlxio9iOsj0l2daESA4OYebScjz+awnWpLTMZRUl1N\/JTLYrGvboR03jwKr5RcXpkOS09FNe2YIaxgJGIkniBTLqVg+xYcOrTm5PyMuxxaag0I0IyK0Nl44prTNLYlu4iIcY56Nfv4O+a2Rn6lPmYPKuev3RolsKowVovJixCdcbvIkBSqJEjKpXhL7EdWlT2jkMuHLI112I5dBofsuI8NR6qszYctm\/Ut+GWOVOn5PRj78\/wBUfyM91zHEP43sjveDf\/m93\/QoFCLU9Pu\/MBsnCe91AGVJOwCq6HHklRFyfkcXmwcsucYrq2Ye8VuOm37obT3G\/wDkePoqfKyXdL6LsdJgYMcaHX5n3f8AQqFGLA1VxLKL4hmHfCyobxcRQnkB5ngrHh9O5eI\/LsUfGcpRh4K7vq\/t\/wBm8VwcyEAQBAEAQBAVNt2R29HNIDgKZ6EbBw2rGUdk7Ey\/B2mtplSy7EU6uYPEn2WHhE58Ur8kzrnrvvhML8TXUzIFRl4rx1tLZlTxCNk1DWtlOtZYH0CuiB9OrJkOyY7tITvHL1WXJJkeWXSv5iZL3cjOPewsG+tT0C9VbI8+JVRXw9TQ2bZjIA7ubtrjqfkFujFIqr8mdz+Lt6E5ekYyF8pisRrNjW18XfsApmMujZKpXTZnipJtNGbAZ\/CiJUh4ZjJrkcsVKclF8Z8+vI0+I+bRnApRuNVcuOaRIe6jh45H2UTJj2ZHuXZnVe7+Yz8nuVFa6E3h8tJoolGaLlPYXh6bG7to9qzC499vmNhUiD2jn87H8Ke49mUV4YGCO7c6juuvmCpVK6mqc06UVytKTlc3uaW6OkTm33UPP7xJPCPll7Gfv+P8Q3\/pj9TlyvEf4i+x9B4J\/Al9\/wChmVALkmx7Te+CyBoxlTlXvEkkV5VW6V8pVqvyRFhiwhdK7zf6ENrarUk2SW9FrYVhumYmHRgze7cNw4lSsfElZLr28yDm50ceG\/N9j0uVl2wmBjBha0UAV5GKiuWPY4+yyVknKT22dqyMAgCAIAgCAIAgCAr7ffSXfxAHUgJrfQlYa3dExFF54R0OzQ3SlQS6IRpRo4E5n2XvJylXxK16UF9ybaFvCG\/A1uKmRNaZ7hkoluZCEuU0UYDsjzSeidJz7YkPtNAK1B2U1W6u6M4c67Ea2iVc+RlPEvG6vdYKcSSfJV8+JpdkT48Ojr4pE2y7YMV2BzQCdCNMtmayxeIq6zka0\/Ij5GH4ceaL6GcvQ6sy7gGjyr7roKZagKIbiVeBZO0kqks5m2Ij4LYNAAAASNXAaDgtMeVS5jX\/AKVJ8xVEKTGaZ5KDRorl\/wAyJ+Ueq05PZEa\/sfb1u+tA3MHmSsK6+aBoqyfDnopCFHnV1LynJTR8otXhknxUSrOmjBiB45EbwdQtsKyJlTjOHKy6vVDDmw4gzByrwObfdScfu0c\/fNxgZ5WtcdI5rJntmkujpE5t91B4h3iWPCPll7FF9ILPr2HfD9HH5rluJL8RP6Hf8Df4Ml9f6GXVcXZ2QodVnCDkYSlotLOkg97Wk4QTSutKqxpoXmQsi9wg5Jb0eiyEkyAwMYKDadpO88VZxiorSOTuundLmkSVkaQgCAIAgCAIAgCAICkvXEpCa3e70H9lnDuT+Hx3Y36Iyq3Fyau7IwwC47XOPgAB7FaLZcu2\/Ips5812vsULxU1359VwzyJN7ZarotFnKzTGS7mV7zq5U30HorOrNrhiSi38T30IVlU5ZClrotFWGqoc5Mm7J1iH69nj6FWfC4Px4v8AzsR8z+C\/Yg3hH+Iicx+kLqnZpaPMOvdSZX0Wl2MnKtEh0k8QxFIo0mgO\/jTdkslJpbNXPBz8NPqRSFIhYYWVl\/cwd+J+Ueq2Xy3FFTkx0dd5XVjng1o8q+6l4te6jmM3IcMj2RUrKdJIo4jrzL6NZLf4VsQDvgYyd4Oo8B6KAv4nKy2WVLk5ihUyNRBtz9+ZYGexS\/ZHVrgW8s6jwWUaGrOYr7sxSqcX3ICmlS3vqaS6OkTm33VbxDvEuuEdp+xT\/SJ\/Mg\/ld6hcvxP5o\/ZnecC+Sf3X9TJtbU0CrUtvRet6WyxloSsqKyJZMmAUUxEd9TbWFP8AbQxU99uTvY+KkwltHOZmP4VnTs+xZLIiBAEAQBAEAQBAEAQGXvbEq9jdza9T+y21lvw6OoORRLYWJqoB7OSGwlv6z8iqzidnJRN+35lO14mV7\/sUS4stD6gOLis4R2z1E27wrHHBpPt7roeHV6nsjZ3Sn3RXWu6saIfxHyyVpN9SViR1TH7HTKwcb2sH2iB1WC6s22z5IOXoae9FGwGtAyxNHIAGnot1j6FLw74rnJ+jMkUrZcTXQ0lzYf8AMd+Uep+SkTfRFJm\/MkQLffWO\/hQdAFa4i1Uji+IPeRIrwK5KSyGk32N\/DhDAGHTDhPSi55y+LZ18Y\/Aov0MJNwDDe5h2Ejw2eSvqpKcFI5a+Mq7HBvsdS2GgLwGjui7+YPyn1VdxBdYsuuEP519ij+kF57dg2CHXq419AuV4k\/xEvofQOBr8GT+v9CruxAxzMIbnYt\/w972UfDjzXIm8RnyY039NfmX14LN7GIXNHdfmOB2j38VcThyva8yswcnxa+V91+xVrAmkqzJ0wIgeNNCN42rKMtM0ZFCuhyv2N3Bih7Q5pqCKgqSc1KLi3FnNDEIAgCAIAgCAIAgMVb8TFHfwoOgC3w7F9hx1SivAqsiS3rqau2m4IMNnIZfhauf43P8ABS9WVGH8V0pFCuYLQt3ybWyuOgxGhrtzOXkrqWLXDA8Rr4np7+7ICuk8nl30KV5VbQixiWV2G\/WucdjD5kfIrpMCPVsh8Rf4aXqyjjvxOc7e4nqaqUyxrXLBL6FrdaBijYvuNJ8TkPdZVrqQuIz5aterLG97+4wb3E9B+6ys7EXhi+OT+hll7WWs30NbdKHSCTT4nnxAAHzW6ZQ5j3YZ20YuOK929x6VyV5THlrS+hw+RLntlL6nKy4OOMxv4gTyGZ9F5fLlrkzLEhz3RX1N2qE6szd6pPMRQNe67w0Pt4Kywbejg\/YpeKUdVavszPKxKYIDS3Rb3Yh4gdAT7hVnEH8SRecIXwyZlL4zXaTT6HJgDPEZnzJXI50+a5\/TofRuE1cmMm\/PqWX0fSZL4kU6NbgHN2Zp4DzUjhsOsp+xE45clGNa8+pr7SkhGhlh5g7iNCrVra0UNFzqmpIwkeEWOLXChBoVGaaOmhNTipR7M4LwyNLdKaJxQjoO8OGeY91uqfkU\/E6kmrF59DRraVIQBAEAQBAEAQBAYe2m0jxK\/ernxAW+PY6DFe6Ynyx4HaRmDZXEeTcyvZPSGVPkqb9i9vL9jx9lzHHP5Pf+hB4f\/N7FK1pJAGpyCooxcmoruyxbSW2aG2hhgBvFren9l03E14eGo\/ZFTifFfv7maeFz9LLlFvYTMMGM\/bQgf5Wk+66fh\/WDZX5sua2EP86szQUmUS2TNddWWwwi86vPk3IedVnBaRR8Rt5reX0Oq97DgYdgca+Iy9Fk1sy4bJKUvsZRzluqrJ9thurFgYJdjaZ4cR5uz91jN\/EUV0uabZiyKaroEcS+\/U0d15EisVw1FG8tpVbnXJ\/AvcuuF47W7Ze39zQquLg4RoQe0tcKg5ELKMnF7RjKKmnGXYyVp2I+ESWAuZspmRwI91bUZcZrUujOeyuHzqe4dV+pEgWfFeaBjvEEDxJW6V9cVtsjQxrZvSizY2bJiDDDBntJ3k6qmutdk3JnS41CprUEYifutMPmH4WjA55cHkigDiTmNaqhswrZWvXZvudhRxWiGPHb6pJa+36G1smz2y0JsJudNTtcTqSrWmpVQUUc9k5Er7HZLzJi2EcrLYshscVHdeNDvG4rGUdkzFy5UvT6r0M7\/wDgR8VMI51FFp8ORa\/7hRre\/wBDSWNZYl2nOrjqdmWwLdCPKVOVlO+X0XYsVkRAgCAIAgCAIAgCArbVshsejq4XAUrStRxWcZaJWPlSq6d0crKspsCtCXOOpO7cF5KWzy\/Jlb37HfPSbYraOy2gjYomViwyIcsvZmFN0qpbRFkbHbDdiLsRGmVAOPNQ8ThcKJ87e2uxuuzJWR5UtEq0JTtWYa02g8QpmXjLIq5N6NNFvhT5imNgRPvN8\/kqWPBrU\/mRP\/3CHoy6lpRrIfZ0qKUPGutVfU1KqCgvIr7LZTnzvuUpus3HXGcFdKZ03VW7oTFxCSjrXU0ENgaA0ZACg5BeFfKTk9s4zEBsRpa4VB1XqPYycXtFTAu1Ba7ES51DUAkU8cs1s8V60jdLInJaLpaiORX2fCc7GYbS7WpC2q6xLSb0aXjVOXM4rZKAWo3BAEAQBAdUeZZD+N7W8yB6r1Rb7Hqi32OuWtCFENGRGuO4HPovXCS7o9cWu5JWJiEAQBAEBGtCdbBYXu5AbSdwXjels3UUyunyozL7yRsVRhA+7T1Oq1eKy4XDauXT3v1NJZc+2OzEMjoRuK2xe0VGRQ6Z8rJa9NAQBAEAQBAVNuW\/ClQA6rnkVDBrTe47Ao9+TCnv39Cdh4FmS\/h6L1KORvvV4EWGGsP2mkkt4kUzHJQ6+JJy1NaRY3cDahuuW36aNhDeHAEEEEVBGhB2hWie+qKFpp6ZyQ8CAoLzXi\/haMYA6IRXPRo3mmvJQ8rK8HSXVlnw\/h7ydyk9RRn4d944PeZDI3AOHnUqEuJWb6pFrLglLXST\/Q11h2uybZjbkQaOadQfccVZ0XxujtFFl4k8afLL2ZYrcRAgI85OMhCrjyA1PJR8jKrojub9vM21UzseolJM25Ed8NGjqVQXcYuk\/wANaX5ssq8GC+bqRDaMX\/iO6qG8\/J\/5s3\/6ar\/ijug2zFbqQ7mPkt9fFsiHd7+5rnh1S7dC2krZY\/J3dPHTqrjG4rVa+WXwv9PzINuHOHVdUWStCGEBCtmZMKC94NCBlzJoFnXHmkkZwW2eeucSakknecyrJLRMR9Y8tIINCMwRsXjW+jPGtm8sC0DHhVd8TThdx3FQLYcktEWyPKyyWo1mctm8eBxhwqEjIuOYB3AbVJro2ts311J9ZFSy3pitcfhQU5aLCyCj2LCrGqktaNrLRg9jXjRwB6rSVc48snF+RnL4OOKGNlCfMLVb5FrwtdJP7GeWktjQXQf33t3tB6Gnut1RVcUj8MWahbSmCAIAgCAIDD3wg4piv4G+6gZNXNPf0Ok4VPVGvq\/6FE6VUZ4xZK02NyZgmE6ET8Bq38rtnWvVTsTahyvyOf4tWlarF5\/uaRSipCA8svNGL5qKTsdhHJuXt5rnsuXNdI7Xh0FHGgl6b\/MrFHJpqPo\/iER3t2OZU82kU\/UVY8N2pv6opOORTqjLzT\/f\/wAN8rg5gjz822Cwvds0G87AsZy5Vs201O2aijGTE26I4ucak+XAcFQZNcrZOUjoYUxrjyxOMSO1jS5xDWtBcScgABUkqpnS96SPJdOpVWBeuUnnOZAiYnNzLS0tJGmIV1CzyMK6hJzXc013QseosuiaaqKbTyP\/AHpRhOGrWmVx4MNO8GA0xh2\/bTTZxXR\/7PB0f\/Wt+\/oVn+tl4n0PcbHtbDRrjVhAod1dPBReH8RlVJVW\/L2+3\/RtycVTXPDuaMLpSpKe9f8ATu\/M31C3UfObavmMOp5KCA19y2\/VvO9\/oAoeT8yI13cs7bnOxgucNfhbzPy18FqrjzS0YVx5mefFWJMObFEyETcdm6u66suzxHRxCiLsV2ctXy1\/nQoL0Rax6fdaB7+61Wdy04bHVO\/VlQtRPNHc+HnEd+UepW6rzKjikvlj9zSraVAQBAEAQBAZG9jKRgd7B5EhabO5fcMf4TX1KVaiwLm6cSkYj7zT5UPzWyr5iv4nHdSfozXreUIQHkNoRMUWI6tavca+JXM2vc5P6s7zHjy0xX0R0MbUrGK2za3o1Fzm0mG\/lcPJW2HHUtlNxV7of3RvVZHLmPvNO9pEwA91mXN20+3VaLHt6L7h9HJXzvu\/2KgFR5QTRYNGV+lGfMKQc0GhiPbD8DVzvJtPFaKKF46b8iBny5avv0POfo0jllpS9D8Rcw8Q5jsj40PgpPEo82LP\/PMqsV6tR7zO\/wAt9PuO\/SVyNfzr7ouJdmfl5d4c+fpS7EftJOXedTBhk88IXEZUeW+a+rL6p7gn9Da2DOYm4Dq3TiP2+SvuEZXiQ8KXeP7f9Fbm08suZdmc7ytrLROFD\/3BXtPzoi1fMYJWBLC8BtboMpArve4jyHsoWR85Fu+Yi31i92GzeS7oAPdZ4y6tmVK7mVUskHJhWi+O0SKJaZurtf07Obv1FQUtEPNe7n7fsjJWjGxxXu3uNOQNB5KNJ7Ze48OSqMfoR1ibjZ3ZgYIAO1xLvYeQUiC+E57iFnNc16dC1WZCCAIAgCAIDL3vh9+G7e0joa+61W+Rc8Ll8Mo+5n1pLUkSEz2URr9xz5aHyWUXpmq+vxK3E37XAgEZg5jkVJOXa09Mr7wT4l4D37aYW\/mdkPn4LTkW+HW5EnCx3fdGH5\/Y8qXOHcHbLDNbaltmub6GpuoPr28nehVxjrTKXib\/AAX7GynZjs4bn\/dBPjs81Mb0tnP1Q8Saj6nnznEkk5k5nmVEZ1KSS0j4h6YT6YB\/hIXCOP0PXtS1Z7FbxP8Ahr7mG+jthNpSwH3yejHE+QWPEXrGn9isxv4sT9CEVXGl2fmq8lnOlZmNBcKYXupxaTVpHgQu5xrVbVGa80UNsHCbTP0HdmAYcpLsdq2DDB54QuOypKV05L1ZdVLUEvoXtmRsEVp40PI5LZgWurIi\/b8zDJhz1tF3eP8AponIfqC7en50U1fzIwKsCWEBu7rspLM44j1cVX3P42RLfmKW+b6xWDcytN1T+wW\/GXRm2nsZ9STcF40mexlpm5kHdlJh2lIZd1qR6qumviejQ\/xLvuzGqI4NHSbOcGGXuDRq4gDxyWKTb0eTmoRcn5HocKGGgNGgAA8FKOVlJybbOSGIQBAEAQBAUt64OKEHfdcOhyPstdi6Fhw2fLbr1RkVoL4ICxl7wxYLAwBrgNMQNRwyKO5wREs4dXbPm6r7Gfte1Isw6sR1aaAZNHIKoyLp2S+Jlri4tVEdQXv5kBaCUd8qt9Hc1WGout\/Pbyd6FXFHcpeJfwH7F5eyLSEG\/ecOgz+S32PoVvDYbt36IySjl6EBR2\/IwbTl4suyKwvaRmCHYIjdA4DTaDzK0yt5JKX+aIt8YXwcU+37lJ9HNxo0nHdMTOEOaC2G1pxfFkXk8svFQOJ50bK\/Dh59yFjYsq5c0j0hUJNIE9YstHe2JFgse9nwuc2pFMxzzW6vItri4xk0mYSrjJ7aJUGYY8uDXNcWmjgCCWncaaLW4yXVruZJpnaCkekkH2NLeD+miflHqF9Ao+ZFBX85gVYks+0Xm0e6ZvLtOrLQ+FR0JUC752Q7VqTMveeNimHfhAb0FT5lSqFqBvqWolUtxsOTGlxAGpNOuS8fTqeG0vC\/s5cMG3C3wb\/ZV8estjBjzXb9DKLJxTLvZcXYlcUXHsYK+JyHutcoKJBz7dV8vqa1YlIEAQBAEAQBAdczBERjmHRwIR9TOubhJSXkYCal3Q3FjhmD13EKK1pnUV2RsipROpeGZEmoiiXz6EiuJWuKrW9slnxeHpzguoVnXLTMZLaNRdJ9ZhvJ3oVb4styKXia1Q\/b9y0vg\/vQxuBPUgeylW+RC4WukmZ5aS1PoXjaSB5WyO6xbUeYgP8ADxyTXXuONQ7iWO1G7msbI+PTqPdf5+pSbePkPfZnr0tFa9oexwc1wqHA1BB0IK5W\/fNpljtPqjuWkFDfG8TJCXdEJHaOBEJm1zthpuGpKl4WLLIsUV28zTdaq47Mz9D1kxGQos3ErWO4BtdrWkkv8XE9FP4zdFyjVH+X\/NEfCrai5vzPRobMRA3kDqqiuPNNRXm0TJPUWzTW4ysvEH4Cemfsu+qfLJFDX1mjBNYt87i4hQcsK0O8kKgmyVpxYLS1jqA55gGh3iqx8RPuarMOM3togxKkknMk1J4lSq7TTOjXY66KSmmRmmiwu\/LdpHYNgOI\/5c\/Wi13S1Bmux6iW9649XtZ90VPM\/sPNRIIl8OhqLkUK2FibSwJXs4Irq7vHx0HSi0ze2UOXb4lj9F0LJYEUIAgCAIAgCAICttmyWxxUZPGh38DwWMo7JmLlypevL0MNaDHwSWvaWnjoeIO0Kvum4dGdJRKFq5oPZVRYlVXWT5ibGOi5sK7EWOQ59WQ9pIo5w3NB9VvowZz6y6Ir8zildK5YdZfovudl77JhwHwxCbhBZnqakHXms8zHjBrkRjwrKndCTse3szpaQoDi0W20zQ3KcTMt4NcTypT1IVhgy3ZoqeLpLHf3Rf3thd6GeBHQj5qZlWcmir4ZLpJfYz+BRnkFtzHNsNRrMlGLkQbwXdgz8Lsow4tePiYd7T7bVCWdOqfNEjXVxtWpHnjbBtmynESjzGg1rhbRw8Ybs2n8qsf9ThZa\/FWn+X6lf4V9PydUdhvVb0TuNlC06YhLvBHi80WKw+Hx6uf6o9d2S+0f0O+xvo+mZqKJi1Ipd\/y8WJzvwuIyY3g3yWF3E6qoeHjL3\/zuewxZzfNaz06FDDGhrQA0AAAZAAaABUMm5PbJ6SRZ2JL44gOxufjs\/wDuCsuFUeJepeUev9iLmWctevUvrRZihRBvY70XVlXS9WRf1RgAtDm2dQo6CwPQgBW2E9GEo7OtwVhTMrrqzTXNlaB8U7e4OQzd7dF5kS7Irbn5FRaMftIr3b3Gm3IZDyCxj2LuiHJWonbZEn20QN+yM3ch89F5J6Rhk3eHW35+RuFoOfCAIAgCAIAgCAIAgOEWE1wo5ocNxAI80aT7mUZOL2mdMOz4LTVsKGDWtQxta9FioRXVIzlfbJacn+ZIe4AEkgAakrI1pNvSMNeKbExEq34WjCDv3lRLkps6TApdFen3ZSxIKhzpLGMy7uLK\/Xvfsayni4j\/ANSs8GrVjl9Ct4zb+DGPq9\/l\/wCmnt+Wxw6jVpr4bVs4nW5U80e66lPhW8lmvUy+ALmHfIudn0NWErJMbPq1nh9QBAEB9a0k0AqToFlGLk1GPdnjaS2zV2ZKdkym05uPH9l2GDirHq5fPzKPIu8We\/LyJZCmGg88m4Bhvcw\/ZJHy8lGktPR1VVniQU\/U6libAgC9B2S8uYjgxupNPmVLploiZLUYts3LJcQYJY37LD1oST1XrfM9lAnzTTfqYVbzpOxs7CkOxh974nZnhuC0zltlDlX+JPp2RZLAihAEAQBAEAQBAUt75x8GWc5hoSQ2u0A604qLmWShU3EsOGUxtyFGfbq\/yPO5afiwzVkR7eTjzzG1UkbrIfK2dZZj1WLUop+xfyF7ZkfFgeOLaHqFPpzLX36lXdwjH\/l2ix\/2oikZNYOp91Ojc2uxE\/2upPq2V05aEWN8biRu0HQLxybJdWPXV8qIyxNx8cF41s92bS7kh2MLP4n953DcOikVQ5YnO51\/i29Oy6ItSFsIRl7Vs8wjUfAdOHArk+IYDx5c0flf6fT+xdY2QrFp9yAq0lBAEAQHODBc84WipWyqqdsuWC2zGc4wW5M0ll2aIWZzfv3cAuowOHrHXNLrL9vsU+Rku3ouxYKyIoQFBeOyS\/62GKuAo5o1IG0cVrnHfVFngZah+HPt5GWWguwgJUlIRIx7jSRv0A8Vkot9jTbkV1fM\/Y1tkWU2AN7zq72G4KRFaRQ5OVK6XovQkxp2Ew4XPaDuJCy0zVGmyS3FMjy9kQWPxtbnqM6gcWr1yfY2TyrZR5GywWJGCAIAgCAIAgCAICNaUm2PCdCdo4UruOw+BWFlasi4vzN1F0qbFOPkeW2nZ8SXiGHEGew7HDe1c7dTKqXLI7TGyYZEOeH\/AIJVb6D20sWqxj2IbOSyPDlDYXEBoJJ0AzKHkpKK23pGnsawcBESL8QzDdg57yt8a9dWU2Xn86cK+3qX62FWEB8e0EUIqDsK8lFSWn2PU2ntFRNWE05sOHgcwqa\/g0Jdanr6eROrzpLpJbIL7EijTCeR+ar5cHyF20\/ckrOqfqGWJFOuEcz8kjwfJffS9w86pepMl7AH23V4Ny8yp1PBIrrZLf2NE89\/yotoEBrBRoAHBW9VNdUeWC0QZzlN7kzsW0wCAIAgI8eRhPNXMaTvIC8aTNsLrIdIyaOLLNgjSEz\/AEhOVeh68i195P8AMktFMhkvTU3sgW5OGDCJb8ROEcK7eiyitskYtSss0+xi3GuZ1K3l8uhq7qxS6EQTXC6g5UBotU11KbPilZteaLlayCEAQBAEAQBAEAQBAR52Rhxm4YjA4cdRxB1CwnXGa1JbNtV1lUuaD0ygiXNhg\/VxHNG4gO+SjLChH5Wy0jxmzXxxT\/QMuqdsUf6f3W5U68zx8VXlH9SXAuzCHxOc7yHkslWjRPiVr+VJFrKycOEKMaG+vVZpJdiHZdOx7k9nevTUEAQBAEAQBAEAQBAEAQBAEAQBARLUku2hllaHUHiN6yi9M3UW+FPmMs2wo9aYKcainPVbeZFu82nW9mqs2TEGGGA12k7ydVqk9sp7rXZPmZKWJqCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgP\/2Q==\" alt =\"Titanic\" style='width: 700px;'>","ca779915":"# **\ud83c\udf1e Model Traning** \n\n**We will train different models.**\n\n1. SVM\n2. Logistic Regression\n3. Decision Tree\n4. Random FOrest","0c0e5208":"### ***\ud83e\ude90 Lets wrap up all the things and find the prefect model for the pridiction.***","f071ec3d":"### **\u2712 Decision Tree Model**","9a6f0099":"### **\u3297 Evaluation of Logistic Regression Model.**","c36bca4a":"**\ud83c\udf89 Now data is in some normal condition lets visualize more.**","5681c3cd":"### **\ud83c\udf32 Random Forest**","19baab69":"### **\u3030 Finding Optimal values for k**","2527b7a0":"**\ud83d\udc40 The data distribution is some abnormal but we have to check the outliers for more clear understanding.**","40273996":"### **\u2714 Hyper parameter tuning for DTC**","7c66ad02":"# **\ud83c\udf0a Visualization**\n\n**Lets understand data with some visualization. \ud83d\ude09**","e2217a2e":"### ***\ud83d\udd25 Random Forest gives the best result we will select Random Forest for the production.***","d8e40d67":"**\u2935 Lets checkout the value counts of Categorical features.**","ff4741f6":"**\u27b0 There still are outliers present in some columns. Let's deal with them.**","b7a156ce":"# **\u270d Exploratory Data Analysis**\n\n**Lets explore the dataset ....**","fe1f286f":"**We Stratify Y values to equally divide the value into testing & traning**","100a2ddb":"# **\u270c Data Transformation**\n\n**We have categorical data lets convert into numerical values.** \n\n### **Data Attributes** \n\n1. **ExerciseAngina:**\n\n         N -- > 0\n         Y -- > 1\n         \n      \n2. **ST_Slope:**\n\n         Flat -- > 0\n         Up -- > 1\n         Down -- > 2\n         \n         \n3. **RestingECG:** \n\n         Normal -- > 0\n         LVH -- > 1\n         ST -- > 2\n\n\n4. **ChestPainType:** \n\n         ASY -- > 0\n         NAP -- > 1\n         ATA -- > 2\n         TA -- > 3\n         \n         \n5. **Sex:** \n         M -- > 0\n         F -- > 1\n        ","5f31eb58":"**\u270c Lets Play more we will also train ANN for the more better accuracy.**","ccdabbd7":"### **\ud83c\udf2b Evaluation for KNN**","8fbb8c19":"### **\u2b1c KNN**","873788c3":"### **\u2734 Feature Scaling For DTC & Random Forest**","aca12f5a":"### **\ud83c\udf00SVM Model**","bec2bfb6":"# **\ud83d\ude80 Getting Started**\n\n#### **Title : Heart Failure Prediction \ud83d\udc93**\n\n<img src= \"https:\/\/getmegiddy.com\/sites\/default\/files\/2021-02\/Giddy_3d_P_Hero.gif\" alt =\"Titanic\" style='width: 800px;'>\n\n### **\u2714 Attribute Information**\n\n1. Age: age of the patient [years]\n\n2. Sex: sex of the patient [M: Male, F: Female]\n\n3. ChestPainType: chest pain type [TA: Typical Angina, ATA: Atypical Angina, NAP: Non-Anginal Pain, ASY: Asymptomatic]\n\n4. RestingBP: resting blood pressure [mm Hg]\n\n5. Cholesterol: serum cholesterol [mm\/dl]\n\n6. FastingBS: fasting blood sugar [1: if FastingBS > 120 mg\/dl, 0: otherwise]\n\n7. RestingECG: resting electrocardiogram results [Normal: Normal, ST: having ST-T wave abnormality (T \nwave inversions and\/or ST elevation or depression of > 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria]\n\n8. MaxHR: maximum heart rate achieved [Numeric value between 60 and 202]\n\n9. ExerciseAngina: exercise-induced angina [Y: Yes, N: No]\n\n10. Oldpeak: oldpeak = ST [Numeric value measured in depression]\n\n11. ST_Slope: the slope of the peak exercise ST segment [Up: upsloping, Flat: flat, Down: downsloping]\n\n12. HeartDisease: output class [1: heart disease, 0: Normal]","67119d81":"# **\u2728 Model preparation**","b65533ea":"# **\u2b50 DataFraming**\n\n**Read .csv file into pandas dataframe.**","bf73985b":"### **\u2754 Evaluation for DTC**","7d8374cb":"### **\u2b55 Logistic Regression**"}}