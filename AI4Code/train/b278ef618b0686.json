{"cell_type":{"a6083ef2":"code","3c43de59":"code","a566ed40":"code","d0b4e420":"code","ca4a3261":"code","ccf3fa82":"code","ba58e1f7":"code","14d490a6":"code","18d5ccfb":"code","3aaaf0a0":"code","fecd4300":"code","849581fc":"code","5e681454":"code","6fb47072":"code","24fd4d52":"code","b368d31f":"code","41829f15":"markdown","d8920f2f":"markdown","d6c772e5":"markdown","53976ef4":"markdown","ce086145":"markdown","ccbb25e7":"markdown","e9696746":"markdown","34fb2b16":"markdown","144fa401":"markdown","16810dca":"markdown","6d65362a":"markdown","c48c4016":"markdown","421bf741":"markdown","333c784b":"markdown","57f63951":"markdown"},"source":{"a6083ef2":"import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport zipfile\nimport glob\nimport json","3c43de59":"season_stats1718 = json.load(open('..\/input\/datafilev2\/datafile\/season17-18\/season_stats.json','r'))\nprint(\"{}\".format(json.dumps(season_stats1718,indent=2))[:3000])","a566ed40":"match_stats1718 = json.load(open('..\/input\/datafilev2\/datafile\/season17-18\/season_match_stats.json','r'))\nprint(\"{}\".format(json.dumps(match_stats1718,indent=2))[:3000])","d0b4e420":"match_df = pd.DataFrame.from_dict(match_stats1718, orient='index')\n\nprint(match_df.shape)\nmatch_df[:5]","ca4a3261":"\ndef divideScore(df, scoreName, name1, name2):\n    df2 = df[scoreName].str.split(':',expand=True)\n    df2.rename(columns={0: name1, 1: name2}, inplace=True)\n    \n    df2 = pd.concat([df, df2], axis=1)\n\n    return df2\n\nmatch_df = divideScore(match_df,'half_time_score','half_time_score_home', 'half_time_score_away')\nmatch_df = divideScore(match_df,'full_time_score','full_time_score_home', 'full_time_score_away')","ccf3fa82":"match_df[:5]","ba58e1f7":"match_df = match_df.astype({'half_time_score_home': 'int8', 'half_time_score_away': 'int8', 'full_time_score_home': 'int8', 'full_time_score_away': 'int8'})\n\nmatch_df.loc[match_df['full_time_score_home'] == match_df['full_time_score_away'], 'result_home'] = 'D'\nmatch_df.loc[match_df['full_time_score_home'] > match_df['full_time_score_away'], 'result_home'] = 'W'\nmatch_df.loc[match_df['full_time_score_home'] < match_df['full_time_score_away'], 'result_home'] = 'L'","14d490a6":"match_df[:10]","18d5ccfb":"clubs = match_df['home_team_name'].unique()\nclubs","3aaaf0a0":"club_df = pd.DataFrame()\n\ngrp_home = match_df.groupby('home_team_name')\ngrp_away  = match_df.groupby('away_team_name')\n\ndef resultCount(df, str):\n    if (str in df.keys()):\n        return df[str]\n    else:\n        return 0\n    \nfor c in clubs:\n        home_matches = grp_home.get_group(c)\n        away_matches = grp_away.get_group(c)\n        \n        result_home = home_matches['result_home'].value_counts(normalize=False)\n        result_away =  away_matches['result_home'].value_counts(normalize=False)\n        \n        home_win   = resultCount(result_home,'W')\n        home_draw = resultCount(result_home,'D')\n        home_lose  = resultCount(result_home,'L')\n        \n        away_win   = resultCount(result_away,'L')\n        away_draw = resultCount(result_away,'D')\n        away_lose  = resultCount(result_away,'W')\n        \n        home_point = home_win *3 + home_draw\n        away_point = away_win *3 + away_draw\n        \n        new_data = [(c, home_win, home_draw, home_lose, away_win, away_draw, away_lose, home_point, away_point)]\n        \n        club_df = club_df.append(new_data)\n\nclub_df.columns=['Club','Home_win','Home_draw','Home_lose','Away_win','Away_draw','Away_lose','Home_point','Away_point']\n\nclub_df","fecd4300":"plt.figure(figsize=(15, 15), dpi=50)\nplt.rcParams[\"font.size\"] = 18\n\nplt.xlabel(\"Points at home\")\nplt.ylabel(\"Points at away\")\n\nplt.xlim([0,60])\nplt.ylim([0,60])\nplt.plot([0,60],[0,60])\nplt.scatter(club_df['Home_point'],club_df['Away_point'])\n\nfor (i, j, k) in zip(club_df['Club'], club_df['Home_point'],club_df['Away_point']):\n             plt.annotate(i, xy=(j, k))\n\nplt.show()","849581fc":"match_key = season_stats1718.keys()\nmatch_df = pd.DataFrame()\n\nfor key in match_key:\n    \n    for team_key in season_stats1718[key]:\n        \n        x = season_stats1718[key][team_key]\n        # a_df = season_stats1718[key][team_key]['team_details']\n        a_df = pd.io.json.json_normalize(season_stats1718[key][team_key]['team_details'])\n        b_df = pd.io.json.json_normalize(season_stats1718[key][team_key]['aggregate_stats'])\n        c_df = pd.concat([a_df,b_df], axis =1)\n        match_df = pd.concat([match_df, c_df], sort=False)\n\nmatch_df = match_df.fillna(0)\nmatch_df.head(5)","5e681454":"match_df.dtypes\nint_val = ['accurate_pass',  'aerial_lost', 'aerial_won', 'att_miss_left', \n          'att_miss_right','att_sv_low_centre', 'blocked_scoring_att', 'fk_foul_lost',\n       'ontarget_scoring_att', 'shot_off_target',\n       'total_offside', 'total_pass', 'total_scoring_att', 'total_tackle',\n       'total_throws', 'won_contest', 'won_corners', 'att_goal_low_centre',\n       'att_goal_low_left', 'att_goal_low_right', 'att_pen_goal',\n       'att_sv_high_centre', 'att_sv_low_left', 'goals', 'att_miss_high',\n       'att_miss_high_right', 'att_post_left', 'att_sv_high_right',\n       'att_sv_low_right', 'post_scoring_att', 'att_sv_high_left',\n       'att_miss_high_left', 'att_goal_high_left', 'att_goal_high_right',\n       'att_post_right', 'att_goal_high_centre', 'penalty_save',\n       'att_post_high']\n\nfor i in int_val:\n    match_df[i] = match_df[i].astype(np.int64)\n\nmatch_df['possession_percentage'] = match_df['possession_percentage'].astype(np.float64)\nmatch_df.dtypes","6fb47072":"grp = match_df.groupby('team_name' , as_index=False)\ngrp_mean = grp.mean()\ngrp_mean","24fd4d52":"import seaborn as sns\n\nplt.rcParams[\"font.size\"] = 9\n\ngrp_mean.plot.scatter(x='possession_percentage', y='goals')\n\nfor (i, j, k) in zip(grp_mean['team_name'], grp_mean['possession_percentage'],grp_mean['goals']):\n             plt.annotate(i, xy=(j, k))\n\n        \nsns.regplot(x=\"possession_percentage\", y=\"goals\", data=grp_mean);\n\nplt.show()","b368d31f":"att = ['possession_percentage','total_pass', 'goals']\npd.plotting.scatter_matrix(match_df[att])","41829f15":"Summarize points for each club.","d8920f2f":"Plot each club on scatter figure.","d6c772e5":"Since the data types are not numbers, we change them into integer and float.","53976ef4":"As a result, we can say the followings.\n\n- The relation between possession rates and goals is almost linear.\n- Liverpool, Man U, Leicester an West Ham scored well compared with the other clubs having similar possessions.\n- While Southampton dominanted games (possession > 50%), they scored poorly (goals < 1.0)","ce086145":"Add win\/draw\/lose tag.","ccbb25e7":"Divide score data.","e9696746":"Check the structure of json for season stats.","34fb2b16":"As a result, we can say the followings.\n\n- No teams could earn more points at away than home, except for Burnley.\n- Did well at home and away: Man City, Man U, Tottenham, Liverpool, Chelsea, Burnley.\n- Really goot at home, really bad at away: Arsenal.\n- So-so: Others.","144fa401":"### English Premier League in-game\n\nTry to see which club played goot at home and away.","16810dca":"Then, we calculate the mean of the stats for each team.","6d65362a":"Next, we are going to investigate team stats. First, we collect aggregated stats for each match.","c48c4016":"Import libraries","421bf741":"Check the structure of json for match stats.","333c784b":"We can conduct performance evaluation. For example, we can see the relation between possession rates and goals.","57f63951":"We can conduct various relation analysis."}}