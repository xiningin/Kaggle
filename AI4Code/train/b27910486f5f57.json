{"cell_type":{"dfd6e9c9":"code","da01561a":"code","71da5018":"code","dbc59c8c":"code","13bd9ded":"code","fad46177":"code","92b4a0d6":"code","6b6ae043":"code","416cfb9f":"markdown","b8624b91":"markdown","0b849780":"markdown","9d8bbc87":"markdown","3f3e5d32":"markdown"},"source":{"dfd6e9c9":"import numpy as np # \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0430\u043b\u0433\u0435\u0431\u0440\u0430\nimport pandas as pd # \u0447\u0442\u0435\u043d\u0438\u0435 csv \u0444\u0430\u0439\u043b\u043e\u0432\nimport seaborn as sns # \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\nimport matplotlib.pyplot as plt # \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\nfrom sklearn.preprocessing import StandardScaler # \u0448\u043a\u0430\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\nfrom sklearn.preprocessing import OneHotEncoder # \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","da01561a":"train = pd.read_csv(\"\/kaggle\/input\/cybersecurity-in-canberra\/UNSW_NB15_training-set.csv\") # \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430","71da5018":"corr = train.corr()\nsns.heatmap(corr)\nprint(corr)","dbc59c8c":"x_train = train.drop('label', axis=1)\ny_train = train['label']\nx_train_cat = train.select_dtypes(include=[np.object])\nx_train_cat.info()","13bd9ded":"''' \u0412\u044b\u0432\u043e\u0434 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432'''\nprint(x_train_cat['proto'].unique())\nprint(x_train_cat['service'].unique())\nprint(x_train_cat['state'].unique())\nprint(x_train_cat['attack_cat'].unique())","fad46177":"proto = ['udp', 'arp', 'tcp', 'igmp', 'ospf', 'sctp', 'gre', 'ggp', 'ip', 'ipnip', 'st2',\n 'argus', 'chaos', 'egp', 'emcon', 'nvp', 'pup', 'xnet', 'mux', 'dcn', 'hmp', 'prm',\n 'trunk-1', 'trunk-2', 'xns-idp', 'leaf-1', 'leaf-2', 'irtp', 'rdp', 'netblt',\n 'mfe-nsp', 'merit-inp', '3pc', 'idpr', 'ddp', 'idpr-cmtp', 'tp++', 'ipv6', 'sdrp',\n 'ipv6-frag', 'ipv6-route', 'idrp', 'mhrp', 'i-nlsp', 'rvd', 'mobile', 'narp',\n 'skip', 'tlsp', 'ipv6-no', 'any', 'ipv6-opts', 'cftp', 'sat-expak', 'ippc',\n 'kryptolan', 'sat-mon', 'cpnx', 'wsn', 'pvp', 'br-sat-mon', 'sun-nd', 'wb-mon',\n 'vmtp', 'ttp', 'vines', 'nsfnet-igp', 'dgp', 'eigrp', 'tcf', 'sprite-rpc', 'larp',\n 'mtp', 'ax.25', 'ipip', 'aes-sp3-d', 'micp', 'encap', 'pri-enc', 'gmtp', 'ifmp',\n 'pnni', 'qnx', 'scps', 'cbt', 'bbn-rcc', 'igp', 'bna', 'swipe', 'visa', 'ipcv',\n 'cphb', 'iso-tp4', 'wb-expak', 'sep', 'secure-vmtp', 'xtp', 'il', 'rsvp', 'unas',\n 'fc', 'iso-ip', 'etherip', 'pim', 'aris', 'a\/n', 'ipcomp', 'snp', 'compaq-peer',\n 'ipx-n-ip', 'pgm', 'vrrp', 'l2tp', 'zero', 'ddx', 'iatp', 'stp', 'srp', 'uti', 'sm',\n 'smp', 'isis', 'ptp', 'fire', 'crtp', 'crudp', 'sccopmce', 'iplt', 'pipe', 'sps', 'ib']\nservice = ['-', 'http', 'ftp', 'ftp-data', 'smtp', 'pop3', 'dns', 'snmp', 'ssl', 'dhcp', 'irc',\n 'radius', 'ssh']\nstate = ['INT', 'FIN', 'REQ', 'ACC', 'CON', 'RST', 'CLO']\nattack_cat = ['Normal', 'Reconnaissance', 'Backdoor', 'DoS', 'Exploits', 'Analysis',\n 'Fuzzers', 'Worms', 'Shellcode', 'Generic']\n\nenc = OneHotEncoder(categories=[proto, service, state, attack_cat], sparse=False)\nx_train_cat = enc.fit_transform(x_train_cat)\ndf_cat = pd.DataFrame(x_train_cat)\nx_train_floatint = train.select_dtypes(include=[np.float, np.int])\nx_new_train = x_train_floatint.join(df_cat)\nx_new_train = x_new_train.drop(columns=['label'])\n\nprint(x_new_train.info(verbose=True))","92b4a0d6":"from sklearn.linear_model import LogisticRegression # \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u043a\u0430\u0446\u0438\u044f \"\u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f\"\nfrom sklearn.linear_model import SGDClassifier # \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u043a\u0430\u0446\u0438\u044f \"\u0441\u0442\u043e\u0445\u0430\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0441\u043f\u0443\u0441\u043a\"\nfrom sklearn import tree # \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u043a\u0430\u0446\u0438\u044f \"\u0434\u0435\u0440\u0435\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0439\"\nfrom sklearn import svm # \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u043a\u0430\u0446\u0438\u044f \"\u043e\u043f\u043e\u0440\u043d\u044b\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u044b\"\nfrom sklearn.ensemble import RandomForestClassifier # \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u043a\u0430\u0446\u0438\u044f \"\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441\"\nfrom sklearn.ensemble import AdaBoostClassifier # \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u043a\u0430\u0446\u0438\u044f \"\u0430\u0434\u0430\u0431\u0443\u0441\u0442\"\nfrom sklearn.ensemble import GradientBoostingClassifier # \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u043a\u0430\u0446\u0438\u044f \"\u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433\"\nfrom sklearn.metrics import plot_confusion_matrix # \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \"\u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a\"\n\n#model1 = LogisticRegression().fit(x_new_train, y_train)\n#model2 = tree.DecisionTreeClassifier(random_state=0).fit(x_new_train, y_train)\nmodel3 = svm.SVC(kernel='sigmoid').fit(x_new_train, y_train)\n'''model4 = SGDClassifier().fit(x_new_train, y_train)\nmodel5 = RandomForestClassifier(n_estimators=1000, random_state=0).fit(x_new_train, y_train)\nmodel6 = AdaBoostClassifier(n_estimators=1000, random_state=0).fit(x_new_train, y_train)\nmodel7 = GradientBoostingClassifier(n_estimators=1000, random_state=0).fit(x_new_train, y_train)'''\n\n#plot_confusion_matrix(model1, x_new_train, y_train, display_labels=['label 0','label 1'], normalize='all')\n#plot_confusion_matrix(model2, x_new_train, y_train, display_labels=['label 0','label 1'], normalize='all')\nplot_confusion_matrix(model3, x_new_train, y_train, display_labels=['label 0','label 1'], normalize='all')\n'''plot_confusion_matrix(model4, x_new_train, y_train, display_labels=['label 0','label 1'])\nplot_confusion_matrix(model5, x_new_train, y_train, display_labels=['label 0','label 1'])\nplot_confusion_matrix(model6, x_new_train, y_train, display_labels=['label 0','label 1'])\nplot_confusion_matrix(model7, x_new_train, y_train, display_labels=['label 0','label 1'])'''","6b6ae043":"test = pd.read_csv(\"\/kaggle\/input\/cybersecurity-in-canberra\/UNSW_NB15_testing-set.csv\") # \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\ntest.info()\n# \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\nx_test = test.drop('label', axis=1)\ny_test = test['label']\nx_test_cat = test.select_dtypes(include=[np.object])\nx_test_cat.info()\n\nproto = ['udp', 'arp', 'tcp', 'igmp', 'ospf', 'sctp', 'gre', 'ggp', 'ip', 'ipnip', 'st2',\n 'argus', 'chaos', 'egp', 'emcon', 'nvp', 'pup', 'xnet', 'mux', 'dcn', 'hmp', 'prm',\n 'trunk-1', 'trunk-2', 'xns-idp', 'leaf-1', 'leaf-2', 'irtp', 'rdp', 'netblt',\n 'mfe-nsp', 'merit-inp', '3pc', 'idpr', 'ddp', 'idpr-cmtp', 'tp++', 'ipv6', 'sdrp',\n 'ipv6-frag', 'ipv6-route', 'idrp', 'mhrp', 'i-nlsp', 'rvd', 'mobile', 'narp',\n 'skip', 'tlsp', 'ipv6-no', 'any', 'ipv6-opts', 'cftp', 'sat-expak', 'ippc',\n 'kryptolan', 'sat-mon', 'cpnx', 'wsn', 'pvp', 'br-sat-mon', 'sun-nd', 'wb-mon',\n 'vmtp', 'ttp', 'vines', 'nsfnet-igp', 'dgp', 'eigrp', 'tcf', 'sprite-rpc', 'larp',\n 'mtp', 'ax.25', 'ipip', 'aes-sp3-d', 'micp', 'encap', 'pri-enc', 'gmtp', 'ifmp',\n 'pnni', 'qnx', 'scps', 'cbt', 'bbn-rcc', 'igp', 'bna', 'swipe', 'visa', 'ipcv',\n 'cphb', 'iso-tp4', 'wb-expak', 'sep', 'secure-vmtp', 'xtp', 'il', 'rsvp', 'unas',\n 'fc', 'iso-ip', 'etherip', 'pim', 'aris', 'a\/n', 'ipcomp', 'snp', 'compaq-peer',\n 'ipx-n-ip', 'pgm', 'vrrp', 'l2tp', 'zero', 'ddx', 'iatp', 'stp', 'srp', 'uti', 'sm',\n 'smp', 'isis', 'ptp', 'fire', 'crtp', 'crudp', 'sccopmce', 'iplt', 'pipe', 'sps', 'ib']\nservice = ['-', 'http', 'ftp', 'ftp-data', 'smtp', 'pop3', 'dns', 'snmp', 'ssl', 'dhcp', 'irc',\n 'radius', 'ssh']\nstate = ['INT', 'FIN', 'REQ', 'ACC', 'CON', 'RST', 'CLO']\nattack_cat = ['Normal', 'Reconnaissance', 'Backdoor', 'DoS', 'Exploits', 'Analysis',\n 'Fuzzers', 'Worms', 'Shellcode', 'Generic']\n\nenc = OneHotEncoder(categories=[proto, service, state, attack_cat], sparse=False, handle_unknown='ignore')\nx_test_cat = enc.fit_transform(x_test_cat)\ntest_df_cat = pd.DataFrame(x_test_cat)\nx_test_floatint = test.select_dtypes(include=[np.float, np.int])\nx_new_test = x_test_floatint.join(df_cat)\nx_new_test = x_new_test.drop(columns=['label'])\n\nprint(x_new_train.info(verbose=True))\n\n# \u0437\u0430\u043c\u0435\u043d\u0430 \u043f\u0443\u0441\u0442\u044b\u0445 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u044b\u043d\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0443\u043b\u044f\u043c\u0438\nx_new_test[np.isfinite(x_new_test) == True] = 0\nx_new_test[np.isnan(x_new_test) == True] = 0\n\nx_new_test['label'] = model1.predict(x_new_test)\nfor i in range(0,100):\n    print(x_new_test['label'][i])\n  \nprint(x_new_test['label'] == 0)","416cfb9f":"\u0412\u044b\u0432\u043e\u0434 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \"model_score\"","b8624b91":"\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0432\u044b\u0431\u043e\u0440 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0433\u043e","0b849780":"\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437","9d8bbc87":"\u0427\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","3f3e5d32":"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438"}}