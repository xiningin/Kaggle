{"cell_type":{"61cfcca6":"code","9fa12103":"code","f070a661":"code","222b890a":"code","219d4caf":"code","97bb866f":"code","98267ab4":"code","73df5bd2":"code","645ca673":"code","5de5df83":"code","2b2ad2d7":"code","4744db8a":"code","2d8db7d5":"code","40bdd914":"code","ee41aa2b":"code","863f5657":"code","49272f94":"code","6e0ed945":"code","f2914967":"code","d958b308":"code","a662f281":"code","8753e6aa":"code","d571a9b7":"code","a9620f3b":"code","65965e8e":"code","9dbb4818":"code","2c882534":"code","27fd2f7b":"code","d1488783":"code","60890b50":"code","87377000":"code","0e423cd8":"markdown","17853e5c":"markdown","f78d8010":"markdown"},"source":{"61cfcca6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9fa12103":"df=pd.read_csv('\/kaggle\/input\/vehicle-dataset-from-cardekho\/car data.csv')\ndf.head()","f070a661":"df.describe()","222b890a":"df.info()","219d4caf":"df['Seller_Type'].unique()","97bb866f":"df.isnull().sum()","98267ab4":"df['current_year']=2020\ndf['No_of_years']=df['current_year']-df['Year']\ndf.head()\ndf=df.drop(['current_year'],axis=1)","73df5bd2":"df=df.drop(['Year'],axis=1)","645ca673":"df=df.drop(['Car_Name'],axis=1)","5de5df83":"df=pd.get_dummies(df,drop_first=True)","2b2ad2d7":"df.corr()","4744db8a":"import seaborn as sns\nsns.pairplot(df)\n","2d8db7d5":"sns.heatmap(df.corr(),annot=True)","40bdd914":"X=df.iloc[:,1:]","ee41aa2b":"y=df.iloc[:,:1]","863f5657":"from sklearn.ensemble import ExtraTreesRegressor\next=ExtraTreesRegressor()\next.fit(X,y)","49272f94":"ext.feature_importances_","6e0ed945":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,random_state=0)","f2914967":"from sklearn.ensemble import RandomForestRegressor\nmodel=RandomForestRegressor()\nmodel.fit(X_train,y_train)","d958b308":"prediction=model.predict(X_test)","a662f281":"prediction","8753e6aa":"from sklearn.metrics import mean_absolute_error\nmean_absolute_error(prediction,y_test)","d571a9b7":"from sklearn.model_selection import RandomizedSearchCV","a9620f3b":"# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\n# max_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15, 100]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 5, 10]","65965e8e":"random_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}\n\nprint(random_grid)","9dbb4818":"random_model=RandomizedSearchCV(estimator=model,param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)","2c882534":"random_model.fit(X_train,y_train)","27fd2f7b":"random_model.best_params_","d1488783":"predictions_hp=random_model.predict(X_test)","60890b50":"mean_absolute_error(predictions_hp,y_test)","87377000":"import matplotlib.pyplot as plt\nplt.scatter(y_test,predictions_hp)","0e423cd8":"Selling price and Present price highly positively corelated. whereas Fuel_Type_Diesel and Fuel_Type_Petrol are less corelated. If my dataset has more number of columns, I will drop columns which are corelated.","17853e5c":"As we got 0.79 accuracy score in test dataset. We should improve it. ","f78d8010":"Accuracy was an increase to 0.875. "}}