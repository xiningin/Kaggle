{"cell_type":{"2f5ed1e4":"code","aba158f8":"code","d9f6aa85":"code","11dc50d3":"code","780957ec":"code","929947e1":"code","9baad168":"code","9dcaa916":"code","7876ac53":"code","7a236023":"code","3b2bc1ea":"code","8ae0adcc":"code","738542a4":"code","b9dc5f96":"code","4450400d":"code","fda3ca50":"code","7b7fbde5":"code","570bc2a6":"code","862474df":"code","12d54bf2":"code","43139e82":"code","d3aa6cda":"code","76d8dc5e":"code","6c07e490":"code","a9b2b8d6":"code","901becd2":"code","358ccd2a":"code","a50fa627":"code","4284f947":"code","f01229a2":"code","034b9c86":"code","55b7a316":"code","36002c07":"code","5c264ae1":"code","48a85efb":"code","b854d7e3":"code","57e97a09":"code","bd7b634a":"code","24241b4e":"code","9d6c8438":"code","93f9a476":"code","d24dfbe6":"code","358f5c72":"code","dc9fa86d":"code","327d2848":"code","380ad472":"code","92f35a8e":"code","7e78baac":"code","bf94a113":"code","d0d8d749":"code","e2d533bb":"code","2058c387":"code","fae9beec":"code","684cca7f":"code","c18a788e":"code","fca21cb0":"code","8fe3b58d":"code","cc50ac14":"code","20275418":"code","914dbccd":"code","1a013204":"code","dff16431":"code","d4e7a79c":"code","d85dcb63":"markdown","3abcf82d":"markdown","c1c59054":"markdown","6004a269":"markdown","2552943f":"markdown","13a81a03":"markdown","d1fd228e":"markdown","de8f81cc":"markdown","61bb8a5a":"markdown","1d41fd28":"markdown","42d91bff":"markdown","47bb0660":"markdown","10cf148a":"markdown"},"source":{"2f5ed1e4":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom scipy.stats import norm,skew\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler","aba158f8":"import warnings\nwarnings.filterwarnings('ignore')","d9f6aa85":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n","11dc50d3":"train.head()","780957ec":"test.head()","929947e1":"train.shape,test.shape","9baad168":"train.columns","9dcaa916":"train.info()","7876ac53":"#since sales prices is our target variable\ntrain['SalePrice'].describe()","7a236023":"#pearson correlation\ncorr_matrix = train.corr()\nplt.figure(figsize=(12,8))\nsns.heatmap(corr_matrix, cmap=plt.cm.Accent_r)","3b2bc1ea":"#now for sales price\nk = 10\ncols = corr_matrix.nlargest(k, 'SalePrice')['SalePrice'].index\nk_corr_matrix = train[cols].corr()\n#plt.figure(figsize=(12, 8))\nsns.heatmap(k_corr_matrix, annot=True, cmap=plt.cm.RdBu_r)","8ae0adcc":"cols=['SalePrice','OverallQual','GrLivArea','GarageCars','TotalBsmtSF','FullBath','YearBuilt']\nsns.pairplot(train[cols],height = 2)","738542a4":"plt.figure(figsize=(16,30))\nfor idx, f in enumerate(['OverallQual','GrLivArea',\n                        'GarageArea','GarageCars','TotalBsmtSF','1stFlrSF',\n                        'FullBath','TotRmsAbvGrd','YearBuilt']):\n    plt.subplot(9,2,2*idx+1)\n    sns.distplot(train[f])\n    plt.subplot(9,2,2*idx+2)\n    sns.scatterplot(x=f,y='SalePrice',data =train)","b9dc5f96":"plt.figure(figsize=(8,12))\ntrain.corr()['SalePrice'].sort_values().plot(kind='barh')\n","4450400d":"#analyzing the target variable first to see if it fits a normal distrubution\nsns.distplot(train['SalePrice'],fit=norm)\n(mu,sigma)=norm.fit(train['SalePrice'])\nplt.legend(['Normal dist ($\\mu=${:2f},$\\sigma=${:2f}) '.format(mu,sigma)])\nplt.ylabel(\"frequency\")\nplt.title('Saleprice Distribution')\n\n#normal probability plot\nfig = plt.figure()\nres= stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","fda3ca50":"#skewnesss and kurtosis\nprint(\"skewness \",train['SalePrice'].skew())\nprint(\"kurtosis \",train['SalePrice'].kurt())","7b7fbde5":"#applying log transformation on saleprice\ntrain['SalePriceLog'] = np.log1p(train['SalePrice'])","570bc2a6":"#distribution histogram and normal probability plot\n(mu,sigma)=norm.fit(train['SalePriceLog'])\n\n\nsns.distplot(train['SalePriceLog'], fit = norm)\nplt.legend(['Normal dist  mi =${:2f},  sigmla =${:2f}'.format(mu,sigma)])\nfig = plt.figure()\nstats.probplot(train['SalePriceLog'], plot = plt)\nplt.show()","862474df":"sale_price_scaled= StandardScaler().fit_transform(train['SalePrice'][:,np.newaxis])\n\nsns.distplot(sale_price_scaled, fit =norm)\n\nlow_range= sale_price_scaled[sale_price_scaled[:,0].argsort()[:10]]\n\nhigh_range=sale_price_scaled[sale_price_scaled[:,0].argsort()[-10:]]\nprint(f'outer range (low) of the distribution: \\n{low_range}')\nprint(f'outer range (high) of the distribution: \\n{high_range}')","12d54bf2":"#scatter plot\ntrain.plot.scatter(x='GrLivArea', y= 'SalePrice', ylim=(0.800000), xlim=(0,6000))","43139e82":"train = train[train['GrLivArea']<4000]","d3aa6cda":"#scatter plot\ntrain.plot.scatter(x='GrLivArea', y= 'SalePrice', ylim=(0.800000), xlim=(0,6000))","76d8dc5e":"#feature engineering\n#quantitative and qualitative\nquantitative = [ f for f in train.columns if train.dtypes[f]!='object']\nquantitative.remove('SalePrice')\nquantitative.remove('Id')\nquantitative.sort()\nqualitative= [f for f in train.columns if train.dtypes[f]=='object']\nqualitative.sort()","6c07e490":"#continuous\nquantitative","a9b2b8d6":"#categorical\nqualitative","901becd2":"#concatenating test and train\ntrain.reset_index(drop =True,inplace = True)\ny_train = train['SalePriceLog']\nX_train = train.drop(['SalePrice','SalePriceLog'], axis = 1)\nX_test= test","358ccd2a":"all_data = pd.concat([X_train,test], axis = 0 ,sort=False)\nall_data.drop(['Id'], axis = 1, inplace=True)\nall_data.shape","a50fa627":"#missing data\nna_tot= all_data.isnull().sum().sort_values(ascending=False)\nna_ratio= (all_data.isnull().sum()\/all_data.shape[0]).sort_values(ascending=False)\nmissing_data= pd.concat([na_tot,na_ratio], axis = 1, keys  =['Total','Ratio'])\nmissing_data.head(50)","4284f947":"#most of the top values are missing. since they haveno pattern delete them\nplt.figure(figsize=(16,12))\nfor idx,f in enumerate(['PoolQC','Utilities','Street','MiscFeature']):\n    plt.subplot(2,2,idx+1)\n    sns.scatterplot(x='SalePrice', y= f, data= train)\nall_data.drop(['PoolQC','Utilities','Street','MiscFeature'], axis = 1, inplace=True)","f01229a2":"all_data['Alley'].fillna('None', inplace=True)\nall_data['Fence'].fillna('None', inplace=True)\nall_data['FireplaceQu'].fillna('None', inplace=True)\n\nall_data['GarageQual'].fillna('None', inplace=True)\nall_data['GarageFinish'].fillna('None',inplace=True)\nall_data['GarageCond'].fillna('None', inplace=True)\nall_data['GarageType'].fillna('None', inplace=True)\n\nall_data['BsmtExposure'].fillna('None', inplace=True)\nall_data['BsmtCond'].fillna('None', inplace=True)\nall_data['BsmtQual'].fillna('None', inplace=True)\nall_data['BsmtFinType1'].fillna('None', inplace=True)\n","034b9c86":"#for categorical features  without NA , fill it with NA'\nall_data['MasVnrType'].fillna('None',inplace =True)\nall_data['HasMasVnr'] = all_data['MasVnrType'].apply(lambda x:0 if x=='None' else 1)\n\nall_data['MSZoning']=all_data.groupby(['MSSubClass'])['MSZoning'].transform(lambda x:x.fillna(x.mode()[0]))\nall_data['Functional'].fillna('Type', inplace=True)\nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])\nall_data['KitchenQual']=all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])\nall_data['SaleType']= all_data['SaleType'].fillna(all_data['SaleType'].fillna(all_data['SaleType'].mode()[0]))\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\n","55b7a316":"all_data['LotFrontage']=all_data.groupby('Neighborhood')['LotFrontage'].transform(lambda x:x.fillna(x.median()))\n","36002c07":"all_data['GarageYrBlt']=(all_data['YearBuilt']+all_data['YearRemodAdd'])\/2","5c264ae1":"sns.scatterplot(x='SalePrice',y='MasVnrArea', hue ='MasVnrType',data=train,legend=None)\nall_data['MasVnrArea']=all_data.groupby(['MasVnrType'])['MasVnrArea'].transform(lambda x:x.fillna(x.median()))","48a85efb":"print(all_data[all_data['GarageCars'].isnull()][['GarageArea','GarageCars','GarageType',\n                                                'GarageYrBlt','GarageQual']])\nall_data['GarageArea'].fillna(0,inplace=True)\nall_data['GarageArea'].fillna(0,inplace=True)","b854d7e3":"print(all_data[all_data['TotalBsmtSF'].isnull()][\n    ['TotalBsmtSF', 'BsmtQual', 'BsmtCond', 'BsmtFinSF2', 'BsmtUnfSF', 'BsmtFinSF1', 'BsmtFullBath','BsmtHalfBath']])\nall_data['TotalBsmtSF'].fillna(0, inplace=True)\nall_data['BsmtUnfSF'].fillna(0, inplace=True)\nall_data['BsmtFinSF1'].fillna(0, inplace=True)\nall_data['BsmtFinSF2'].fillna(0, inplace=True)\nall_data['BsmtFullBath'].fillna(0, inplace=True)\nall_data['BsmtHalfBath'].fillna(0, inplace=True)","57e97a09":"all_data['YrBltAndRemod']=all_data['YearBuilt']+all_data['YearRemodAdd']\nall_data['TotalSF']=all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\n\nall_data['TotalSqrFootage'] = (all_data['BsmtFinSF1'] + all_data['BsmtFinSF2'] +\n                                 all_data['1stFlrSF'] + all_data['2ndFlrSF'])\n\nall_data['TotalBathrooms'] = (all_data['FullBath'] + (0.5 * all_data['HalfBath']) +\n                               all_data['BsmtFullBath'] + (0.5 * all_data['BsmtHalfBath']))\n\nall_data['TotalPorchSF'] = (all_data['OpenPorchSF'] + all_data['3SsnPorch'] +\n                              all_data['EnclosedPorch'] + all_data['ScreenPorch'] +\n                              all_data['WoodDeckSF'])","bd7b634a":"all_data['has2ndfloor'] = all_data['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\nall_data['hasgarage'] = all_data['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\nall_data['hasbsmt'] = all_data['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\nall_data['hasfireplace'] = all_data['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)","24241b4e":"# Some of the non-numeric predictors are stored as numbers; we convert them into strings \nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","9d6c8438":"all_data = pd.get_dummies(all_data).reset_index(drop=True)","93f9a476":"# creating model\nfrom sklearn.model_selection import cross_val_score, KFold\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.linear_model import ElasticNet, Lasso, Ridge,ElasticNetCV, LassoCV,RidgeCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor\nfrom sklearn.svm import SVR\n# to check for validated test \nfrom sklearn.model_selection import train_test_split\n","d24dfbe6":"X_train = all_data.iloc[:len(y_train), :]\n\n","358f5c72":"X_train, X_test, y_train, y_test =train_test_split(X_train, y_train ,train_size=0.8, random_state=20) ","dc9fa86d":"#defining cross validation strategy\ndef rmse_cv(model):\n    mse =cross_val_score(model,X_train.values,y_train, scoring='neg_mean_squared_error', cv= 5)\n    rmse=np.sqrt(-mse)\n    print(\"mse is\", rmse.mean())","327d2848":"lasso =Lasso()\nlasso_search =GridSearchCV(lasso, {'alpha':np.logspace(-4,-3,5)}, cv=5, scoring ='neg_mean_squared_error')\nlasso_search.fit(X_train,y_train)\nlasso_search.best_estimator_","380ad472":"lasso_model = make_pipeline(RobustScaler(),Lasso(alpha = 0.0005, random_state=1))\nrmse_cv(lasso_model)","92f35a8e":"ridge =Ridge()\nridge_Search = GridSearchCV(ridge, {'alpha':np.linspace(10,30,10)}, cv =5, scoring='neg_mean_squared_error')\nridge_Search.fit(X_train,y_train)\nridge_Search.best_estimator_","7e78baac":"ridge_model =make_pipeline(RobustScaler(),Ridge(alpha=16.66))\nrmse_cv(ridge_model)","bf94a113":"enet=  ElasticNet()\nenet_search = GridSearchCV(enet,{'alpha':np.linspace(0.0001,0.001,10),\"l1_ratio\":np.linspace(0.5,1.5,10)}, cv=5,scoring='neg_mean_squared_error')\nenet_search.fit(X_train,y_train)\nenet_search.best_estimator_","d0d8d749":"enet_model =make_pipeline(RobustScaler(),ElasticNet(alpha=0.00039, l1_ratio=0.944, random_state=3 ))\nrmse_cv(enet_model)","e2d533bb":"gbr = GradientBoostingRegressor(learning_rate=0.05, min_samples_leaf=5,min_samples_split=10,\n                               max_depth=4,n_estimators=3000)\nrmse_cv(gbr)","2058c387":"rf=RandomForestRegressor(min_samples_leaf=4,min_samples_split=8)\nrmse_cv(rf)","fae9beec":"svr=make_pipeline(RobustScaler(),SVR(C=20, epsilon= 0.005, gamma =0.0003))\nrmse_cv(svr)","684cca7f":"def metrics(y,y_pred):\n    a=  np.sqrt(mean_squared_error(y,y_pred))\n    b= mean_absolute_error(y,y_pred)\n    c = r2_score(y, y_pred)\n    return a,b,c","c18a788e":"import time","fca21cb0":"start = time.time()\nlasso_model = lasso_model.fit(X_train,y_train)\nstop = time.time()\nprint(\"it toook lasso\", (start-stop))\nstart = time.time()\nridge_model=ridge_model.fit(X_train,y_train)\nstop = time.time()\nprint(\"it toook ridge\", (start-stop))\n\nstart = time.time()\nenet_model=enet_model.fit(X_train,y_train)\nstop = time.time()\nprint(\"it toook Enet\", (start-stop))\n\nstart = time.time()\ngbr_model = gbr.fit(X_train,y_train)\nstop = time.time()\nprint(\"it toook GBR\", (start-stop))\n\nstart = time.time()\nrf_model = rf.fit(X_train,y_train)\nstop = time.time()\nprint(\"it toook RF\", (start-stop))\n\nstart = time.time()\nsvr_model = svr.fit(X_train,y_train)\nstop = time.time()\nprint(\"it toook SVR\", (start-stop))\n","8fe3b58d":"y_lasso = lasso_model.predict(X_test)\ny_ridge = ridge_model.predict(X_test)\ny_Enet = enet_model.predict(X_test)\ny_gbr= gbr_model.predict(X_test)\ny_rf = rf_model.predict(X_test)\ny_svr = svr_model.predict(X_test)\n","cc50ac14":"print(\"metrics of Lasso  RMSE, MAE, R2_score\", metrics(y_test, y_lasso))","20275418":"print(\"metrics of Ridge  RMSE, MAE, R2_score\", metrics(y_test, y_ridge))","914dbccd":"print(\"metrics of Enet  RMSE, MAE, R2_score\", metrics(y_test, y_Enet))","1a013204":"print(\"metrics of GBR  RMSE, MAE, R2_score\", metrics(y_test, y_gbr))","dff16431":"print(\"metrics of RF  RMSE, MAE, R2_score\", metrics(y_test, y_rf))","d4e7a79c":"print(\"metrics of SVR  RMSE, MAE, R2_score\", metrics(y_test, y_svr))","d85dcb63":"randomforest","3abcf82d":"Ridge","c1c59054":"points geater than 6000 in case of saelprice and 00 in case of GrLIveArea are definitely outliers","6004a269":"according to the data  NA means None for categorical features so replaceing","2552943f":"Elasticnet","13a81a03":"preprocessing\n","d1fd228e":"#Saleprice distribution<br>\nstandardize the data and see if any outlier points\nx = (x-mu)\/sigma","de8f81cc":"so seems like there are 2 green ","61bb8a5a":"few hof them have a linear relationship<br>\nTotalBSmtsf and GrLIvArea<br>\nGrlivAre ~ saleprice and totalbsmtsf ~ saleprice","1d41fd28":"low is within2 sd(sigma)\nhigh like 7.x are out of range\nat least the 2 points with value greater than 7 should be considered as outlier\n","42d91bff":"most correlated features\noverallqual ,grilivatea, garage areas","47bb0660":"Gradientboost","10cf148a":"outliers\n"}}