{"cell_type":{"870da2ee":"code","b1d621c7":"code","a36c92a7":"code","3bf812f4":"code","5d75dacf":"code","5072527a":"code","0b4c7334":"code","5ce197df":"code","1f26a133":"code","b8e5fcb8":"code","cbd3aed1":"code","0f34d420":"code","9680ffa1":"code","ace7089c":"code","262e7c67":"markdown","a2f5f31b":"markdown","ba914628":"markdown","9e858704":"markdown","257be1da":"markdown","62dc6c11":"markdown","fe6fe5ac":"markdown","8fa6d41d":"markdown","90f92275":"markdown","8c2165eb":"markdown","6d4a6f8e":"markdown","1865fbc8":"markdown"},"source":{"870da2ee":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nfrom datetime import date\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b1d621c7":"filename = '\/kaggle\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-09-14.csv'\ndf = pd.read_csv(filename)\ndf.head()","a36c92a7":"df.Timestamp = pd.to_datetime(df.Timestamp, unit='s')","3bf812f4":"df.index = df.Timestamp\ndf.head()","5d75dacf":"df_day = df.resample('D').mean()\n\n# Find missing values\nfor i, r in df_day.iterrows():\n    if r.isnull().sum() > 0:\n        print(i)\n        print(r)\n        print()\n\n# Print the records of the date between the missing records\nprint()\nprint('Data at 2015-01-05')\nprint(df_day.loc['2015-01-05'])\n\nprint()\nprint('Data at 2015-01-09')\nprint(df_day.loc['2015-01-09'])","5072527a":"missing_replacement = df['2015-01-05': '2015-01-09'].mean(numeric_only=True)\ndf_day.loc['2015-01-06'] = missing_replacement\ndf_day.loc['2015-01-07'] = missing_replacement\ndf_day.loc['2015-01-08'] = missing_replacement\n\n# Any missing value?\ndf_day.isnull().sum()","0b4c7334":"window_size = (date(2020, 9, 14) - date(2020, 5, 10)).days\n\ndf_train = df_day.loc['2011-12-31':'2020-05-10']\ndf_test = df_day.loc['2020-05-11':]\n\ndf_train['Predicted_Price'] = df_train[['Weighted_Price']].shift(-window_size)\n\nX_train = df_train[['Weighted_Price']].values[:-window_size].reshape(-1,1)\ny_train = df_train.Predicted_Price.values[:-window_size]\n\ny_test = df_test.Weighted_Price.values\n\ny_test, y_test.shape","5ce197df":"svr = SVR(kernel='rbf', C=1000)\nsvr.fit(X_train, y_train)\n\nlr = LinearRegression()\nlr.fit(X_train, y_train)","1f26a133":"plt.figure(figsize=(22, 10))\nplt.plot(df_day.index.values, df_day.Weighted_Price.values, \n         label='Actual Price')\nplt.plot([date(2020, 5, 10), date(2020, 5, 10)], [0, 20000], 'black', \n         label='Prediction point')\n\ny_predict_svr = svr.predict(X_train)\n\nplt.plot(df_train.index.values, np.append(np.zeros(window_size), y_predict_svr), 'red',\n        label='Predicted price over the training set')\n\ny_predict_svr_test = svr.predict(\n    df_train[-window_size:].Weighted_Price.values.reshape(-1, 1),\n)\nplt.plot(df_test.index.values[:window_size], y_predict_svr_test, 'green',\n        label='Predicted Price')\nplt.legend()","b8e5fcb8":"mean_squared_error(y_test, y_predict_svr_test, squared=False)","cbd3aed1":"plt.figure(figsize=(22, 10))\nplt.plot(df_day.index.values, df_day.Weighted_Price.values, label='Actual Price')\nplt.plot([date(2020, 5, 10), date(2020, 5, 10)], [0, 20000], 'black', \n         label='Prediction point')\n\ny_predict_lr = lr.predict(X_train)\nplt.plot(df_train.index.values[window_size:], y_predict_lr, 'red', \n         label='Predicted price over the training set')\n\ny_predict_lr_test = lr.predict(\n    df_train[-window_size:].Weighted_Price.values.reshape(-1, 1)\n)\nplt.plot(df_test.index.values[:window_size], y_predict_lr_test, 'green', \n         label='Predicted price')\nplt.legend()","0f34d420":"mean_squared_error(y_test, y_predict_svr_test, squared=False), mean_squared_error(y_test, y_predict_lr_test, squared=False)","9680ffa1":"mean_squared_error(y_test, y_predict_svr_test, squared=True), mean_squared_error(y_test, y_predict_lr_test, squared=True)","ace7089c":"r2_score(y_test, y_predict_svr_test), r2_score(y_test, y_predict_lr_test)","262e7c67":"## RMSE of SVR and LR ##","a2f5f31b":"# Plot the SVR prediction results #","ba914628":"## Resample to daily period ##","9e858704":"## Set window_size and prepare time series dataset ##","257be1da":"## Convert timestamp to Datetime ##","62dc6c11":"## Set Timestamp as an index of the dataframe ##","fe6fe5ac":"## MAE of SVR and LR ##","8fa6d41d":"## Replace missing value with average values ##","90f92275":"## R2 of SVR and LR ##","8c2165eb":"## Create SVR model and LR model ##\n### Then fit with training set ###","6d4a6f8e":"# BTC price prediction with Linear Regression and Support Vector Regression #\nBy Tanut Apiwong.","1865fbc8":"# Plot the LR prediction result #"}}