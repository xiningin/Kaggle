{"cell_type":{"02a59e5b":"code","5f0e7112":"code","9160a8ec":"code","2ccda46c":"code","1c53f2c4":"code","df183044":"code","5ebaa3b0":"code","2b55869d":"code","a019652c":"code","963ea05c":"code","dd69fece":"code","cb39f25e":"code","c8169c4c":"code","20f0b9c6":"code","031499d0":"code","400828b4":"code","b4173fd0":"code","bdfc43b6":"code","847c179d":"markdown","2bdfcf05":"markdown","f75c6db8":"markdown","21536bb2":"markdown","d28a45b0":"markdown","23499a8d":"markdown","543962d6":"markdown","e7cc23e8":"markdown","60920da4":"markdown"},"source":{"02a59e5b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5f0e7112":"#Load the data\ntrain_X = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/train.csv')\ntest_X = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv')","9160a8ec":"import seaborn as sns\nfrom matplotlib import pyplot as plt\n%matplotlib inline","2ccda46c":"# Name the rows by their 'id' and drop the superfluous 'id' column\ntrain_X = train_X.drop('id', axis = 1)\ntest_X = test_X.drop('id', axis = 1)","1c53f2c4":"# Split off the target, also create a copy with just the number part of the class - might need it later!\ntrain_y = train_X.pop('target')\ntrain_y_num = [int(x[-1])-1 for x in train_y]","df183044":"# Missing values? \nprint('Missing values in training set: ', train_X.isnull().sum().sum())\nprint('Missing values in test set: ', test_X.isnull().sum().sum())","5ebaa3b0":"# Any duplicates? - Yes, drop them all - we won't make any assumption which one is right\ndupes = train_X.duplicated(keep=False)\nprint(dupes.value_counts())\ndropthese = list(dupes[dupes == True].index)\ntrain_X = train_X.drop(dropthese)\ntrain_y = train_y.drop(dropthese) # Drop their class labels too\ntrain_y_num = [int(x[-1])-1 for x in train_y]","2b55869d":"# Yes there are\ndata_X = train_X.append(test_X, ignore_index = True)\nalldupes = data_X.duplicated(keep=False)\nprint(alldupes.value_counts())\nnotethese = list(alldupes[alldupes == True].index)\n# More to come later maybe","a019652c":"# Count the instances of each class and divide by the length\ndumb_preds = train_y.value_counts() \/ len(train_y)","963ea05c":"fig, ax = plt.subplots(figsize=(9,6))\nsns.countplot(data=train_y, x=train_y, order=sorted(train_y.unique()), ax=ax)\nax.set_title(\"Target distribution\", size=16, weight='bold')\nplt.show()","dd69fece":"\nsubmission1 = pd.DataFrame(columns=sorted(dumb_preds.index), index=test_X.index + 200000)\nfor x in submission1.columns:\n    submission1[x] = dumb_preds[x]\n# submission1.head() -- Quality check if desired\nsubmission1.index.name = 'id'\nsubmission1.to_csv('submission1_naive.csv')","cb39f25e":"train_X.describe().T.style.bar(subset=['mean'], color='#205ff2')\\\n                            .background_gradient(subset=['std'], cmap='Reds')\\\n                            .background_gradient(subset=['50%'], cmap='coolwarm')","c8169c4c":"test_X.describe().T.style.bar(subset=['mean'], color='#205ff2')\\\n                            .background_gradient(subset=['std'], cmap='Reds')\\\n                            .background_gradient(subset=['50%'], cmap='coolwarm')","20f0b9c6":"datacorr = data_X.corr()\nplt.subplots(figsize=(16,16))\nsns.heatmap(datacorr)\nplt.show()","031499d0":"# This was shamelessly stolen from a May TPS competitor\nfig, ax = plt.subplots(1, 1, figsize=(18, 6))\n\ny = np.array([train_X[f'feature_{i}'].nunique() for i in range(75)])\ny2 = np.array([test_X[f'feature_{i}'].nunique() for i in range(75)])\ncomp = y-y2\n\nax.bar(range(75), y2, alpha=0.7, label='Test Dataset')\nax.bar(range(75),  comp*(comp>0), bottom=y2, alpha=0.7, label='Test > Train')\nax.bar(range(75), comp*(comp<0), bottom=y2-comp*(comp<0), alpha=0.7, label='Test < Train')\n\nax.set_yticks(range(0, 120, 10))\nax.margins(0.02)\nax.grid(axis='y', linestyle='--', zorder=5)\nax.set_title('# of Features Unique Values (Train\/Test)', loc='left', fontweight='bold')\nax.legend()\nplt.show()","400828b4":"from xgboost import XGBClassifier\nfrom xgboost import plot_importance\nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.model_selection import GridSearchCV \nfrom sklearn.model_selection import train_test_split","b4173fd0":"model1 = XGBClassifier(random_state = 14000605, use_label_encoder=False)\nmodel1.fit(train_X, train_y_num)","bdfc43b6":"preds = model1.predict_proba(test_X)\nsubmission2 = pd.DataFrame(preds, columns=sorted(dumb_preds.index), index=test_X.index + 200000)\nsubmission2.index.name = 'id'\nsubmission2.head()\nsubmission2.to_csv('submission2_xgb.csv')","847c179d":"# June 2021 Tabular Playground Series - Exploratory data analysis\nIf you're here, you know the score, especially if you did May's version, as I did. This dataset has more rows and more columns, and furthermore there are 9 classes to predict this time instead of 4. The column names are devoid of meaning and there's no insight as to what the data actually represents in real-world terms. We have a bunch of columns of numbers and each row belongs to one of nine otherwise indistinguishable classes. To me, it's about testing out and tweaking appropriate models than about manipulating data.","2bdfcf05":"## That's it for now\nIf any of you have any commentary or wisdom - please drop it in the comments! ","f75c6db8":"## Check unique value counts\nLet's look to see how many values each feature takes on. From the graph below, it looks like all of the features take on at least 15 different values. Low counts would be suspected of being categories. Of course, some of them can still be - but we have no underlying knowledge of where the data came from, so we can't know this for sure. Because it makes my life easier, I'm going to pretend I did not have this thought. In addition, a few features in the test set take on values that aren't in the training set. Again we are going to overlook that for now.","21536bb2":"## XGBoost\nI'm going to try it without any messing around.","d28a45b0":"## Feature distributions\nLast time the features had most values = 0 and many were similarly distributed. Let's see if that is the case here. Since there are more features these graphs may be a bit more unwieldy than last time. It does appear that there are differences in the ranges of some features between the training and test set. I might try scaling the combined data sets to the same scale and see if that helps at all.","23499a8d":"The training set has 200,000 rows and 77 columns. One of them is a row ID and useless to us. The last one is the target labels, so there are 75 features. Let's check the data quality. Before that, let's drop the ID column and separate the target column.\n\n## Data setup and cleaning","543962d6":"## Class distribution\nNow we're ready to get to some exploring. Let's look at the distribution of predicted classes, and make a dumb prediction based on it.","e7cc23e8":"## Check pairwise correlations\nIt doesn't look like there are any meaningful pairwise correlations to me.","60920da4":"Now we want to check if any remaining training observations duplicate rows in the test set. We won't necessarily do anything about it, but it might help us to force the test predictions to match the training version. Last time, this didn't help me - go figure!"}}