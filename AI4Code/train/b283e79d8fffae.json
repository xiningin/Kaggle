{"cell_type":{"d83409ad":"code","76737327":"code","b486e2cb":"code","13f0f64e":"code","2d765ae0":"code","31967703":"code","3d32a9e3":"code","fa4ad443":"code","c2452a5a":"code","5d9e1413":"code","4cd228d6":"code","bff9b166":"code","dee266b4":"code","5ce05378":"code","661246c6":"code","72cd284e":"code","b1c0fc16":"code","f4837541":"code","9ff57fd6":"code","34b0dacb":"code","fcc2fe1e":"code","e68c80a0":"code","9203bf56":"code","3746b8b4":"code","6046a68d":"code","e1868ba9":"code","07dfc396":"code","9a56927f":"code","ab41e5cf":"code","df694e5b":"code","3d2bab5e":"code","6cb7515b":"code","0316ef62":"code","8d61f3cd":"code","cff4c1c2":"code","4279a192":"code","ec4541b9":"code","e3ad6c27":"code","963c4b77":"code","58b22f36":"code","fa188948":"code","7d3169aa":"code","0656f511":"code","e8ed0386":"code","0439fb48":"code","2a6d3a06":"code","57f850d7":"code","fdb45e38":"code","f1fc56d7":"code","99eaec60":"code","c7b1d979":"code","d83b51ba":"code","610e3469":"code","d664aa4e":"code","784fa021":"code","95331954":"code","a2c6aea0":"code","c8c7c1bc":"code","1f1ab24a":"code","68e2494d":"code","9afb9738":"code","0f436e7a":"code","5310839c":"code","cc618382":"code","9e94cafc":"code","f1012855":"code","8e8913d6":"code","1ffb311c":"code","4fb643d7":"code","0cccb97f":"code","40232a89":"code","314237a1":"code","cfb068ec":"code","4d0e6b51":"code","a760c124":"code","415d14e0":"code","0e60eaa9":"code","7a6b1734":"code","eb22a9ae":"code","92c34191":"code","57d92671":"code","c3682052":"code","1bc0b386":"code","eff78baf":"code","d3c1a214":"code","5146c8b3":"code","b2c62d51":"code","c4dfb2bb":"code","2742776c":"code","03d1c2f9":"code","39aa5267":"code","eec421c0":"code","6e76ab10":"code","7446ff25":"code","952256dd":"code","25766925":"code","c93b2c36":"code","326c5369":"code","d0aa69d9":"code","becb3a92":"code","ff89ea76":"code","56e863d7":"code","ebca4775":"code","326f25b6":"code","2bea2b0d":"code","7d8e0db9":"code","3f5f1066":"code","08d32901":"code","9b90072b":"code","6dbe1fce":"code","37eb96ee":"code","0e85ad9a":"code","38ba02d3":"code","e8539bf4":"code","01cbd75d":"code","e03773a8":"code","e04ead85":"code","a82d65ab":"code","46fe96a6":"code","d6ae6419":"code","8394484f":"code","1bb95ca4":"code","1ff35f65":"code","67535949":"code","f26ee8be":"code","48ab460a":"code","3b532a89":"code","d6489f68":"code","150afce6":"code","a1f4b010":"code","cbaf19a1":"code","c4effda8":"code","178e1977":"code","86ef1d4a":"code","465c7147":"code","5c0b1389":"code","014e812b":"code","f17e971a":"code","bd281588":"code","f2f03757":"code","6c7d8646":"code","fa17a07c":"code","349d6cbc":"code","c1e19bdf":"code","dcde15d7":"code","f11d8bde":"code","7daef66f":"code","f5a3cae3":"code","dd21eac6":"code","c7e8fcb3":"code","bcfec53b":"code","eeeaa99e":"code","8880c997":"code","1c31509c":"code","20ac0005":"code","7a07f2fe":"code","76349b16":"code","57405f87":"code","5e34eff3":"code","fccdd509":"code","4c7c6e32":"code","1b0a9c76":"code","808bf1da":"code","c5a8f9c3":"code","43433e98":"code","e0bb246d":"code","4ecd0bb9":"code","fde9643a":"code","0e7346f1":"code","79ea573a":"code","aeb9a06b":"code","4d3d9adf":"code","c6dc28aa":"code","c54e2ac1":"code","f1346fd0":"code","0bd33792":"code","4eb91fe8":"code","81f4d63c":"code","9d1d897b":"code","4994c358":"code","da386744":"code","e3e507ab":"code","ed03a913":"code","85c9f81a":"code","716f37ce":"code","68fbe53d":"code","07a9ccac":"code","0a71d606":"code","b2f3d8a9":"code","3806346d":"code","56a590c5":"code","f7174f97":"code","1077aa73":"code","e394ba30":"code","0be5696c":"code","f4e9028b":"code","0c1379f3":"code","de031cc2":"code","eca73d05":"code","48e65bd7":"code","b823dbde":"code","9dd3a770":"code","9839835f":"code","25b88e2f":"code","1dae7209":"code","3677c65b":"code","233155df":"code","cc530bb8":"code","b823eacb":"code","83c8febf":"code","3eed1792":"code","ee595af2":"code","a9f6b4e2":"code","9816ed26":"code","20b604d2":"code","2bbf98db":"code","9f492242":"code","5eba788e":"code","658347cd":"code","8c230c15":"code","4552aaaa":"code","4fdc55f3":"code","392ebc6f":"code","a1330c55":"code","e47ab7b9":"code","bc8cb714":"code","7e60f506":"code","cb930864":"code","5e40ee00":"code","467c3809":"code","db32bd10":"code","d0fa9ef1":"code","c5f07ee9":"code","53f2ca72":"code","da8ea8fe":"code","f9dc821e":"code","2ca52589":"code","5a40fa63":"code","eb04c619":"code","c73d776d":"code","158baf23":"code","6d89e4e7":"code","d9e0ac8f":"code","d688b268":"code","fdc2a73a":"code","697c5049":"code","ee3f8450":"code","ad097f31":"code","a0e20974":"code","673bda48":"code","7b7d5b8d":"code","7a0d7ff1":"code","050dc33b":"code","2fe0e54b":"code","723b780e":"code","26b31f41":"code","481b32e5":"code","0741fc12":"code","3c599bab":"code","1b242c0f":"code","e13ee58f":"code","84517a46":"code","c3282d7c":"code","04d18c54":"code","f3b5c1d8":"code","b0a51329":"code","09f092e3":"code","ebc190e3":"code","b9b9f8b9":"code","a7e7cdcf":"code","7ca6b158":"code","8ba7210e":"code","cc0ec6ca":"code","b2a14489":"code","a16edf0b":"markdown","0affaf4d":"markdown","33813422":"markdown","ab6e0b23":"markdown","dcd4848f":"markdown","ec9c1cf5":"markdown","0d7694d5":"markdown","c4ef52d9":"markdown","5a9cb910":"markdown","dd77ab2d":"markdown","b4a716cc":"markdown","1324e861":"markdown","8f386fae":"markdown","9e2a90ad":"markdown","d406ce94":"markdown","6627b192":"markdown","0478153d":"markdown","6bc84ce3":"markdown","f4a4d682":"markdown","eebcf96d":"markdown","a20be205":"markdown","a845dd98":"markdown","a7b6b4bc":"markdown","170618f2":"markdown","0eb722be":"markdown","418491e9":"markdown","398209e5":"markdown","c1a24e5c":"markdown","e0e4e0ac":"markdown","4ddbda8e":"markdown","79590923":"markdown","9a156453":"markdown","03e1fce6":"markdown","7c500627":"markdown","cf25b708":"markdown","614b42e5":"markdown","6f78db5a":"markdown","ff9dca04":"markdown","9769b911":"markdown","472538cd":"markdown","80064a34":"markdown","d0b06519":"markdown","ff2b183c":"markdown","c9f51412":"markdown","e13ea319":"markdown","7e687050":"markdown","17e86ee2":"markdown","5fcdb46e":"markdown","95746392":"markdown","d02222a1":"markdown","fccdd03a":"markdown","4c06f251":"markdown","2221b680":"markdown","b6611bec":"markdown","1797300c":"markdown","ae8bbbe7":"markdown","c61558f1":"markdown","40cb6030":"markdown","b5d396d0":"markdown","a0f51646":"markdown","05a4bcb6":"markdown","f0d2d92f":"markdown","7ecd7277":"markdown","3e273c53":"markdown","80957c82":"markdown","f1369f3a":"markdown","2148d1c6":"markdown","0fb77297":"markdown","a79979e6":"markdown","022c7d3e":"markdown","263c392c":"markdown","7490a800":"markdown","e0426fda":"markdown","ec78f8da":"markdown","aa084869":"markdown","f5458cc2":"markdown","ec13a400":"markdown","ad63ec77":"markdown","0d8b2378":"markdown","4a11aa85":"markdown","03867952":"markdown","6e1dfa7f":"markdown","5c430860":"markdown","d36afc9f":"markdown","b5d27514":"markdown","94ebb8d6":"markdown","d47f5638":"markdown","09971f85":"markdown","69744e0f":"markdown","ad54d33b":"markdown","eec6d4a2":"markdown","1369088a":"markdown","59f696da":"markdown","b4946715":"markdown","6b09309f":"markdown","32d6e3d2":"markdown","822800ce":"markdown","2feb1445":"markdown","34714176":"markdown","4f3f7649":"markdown","f2f5806f":"markdown","46675c9c":"markdown","51e2e450":"markdown","54004acd":"markdown","4098f665":"markdown","78581d7b":"markdown","5556d6dc":"markdown","d1cfe645":"markdown","4c70e80e":"markdown","44cd1104":"markdown","b28d85b9":"markdown","171c9a4d":"markdown","480d6b1b":"markdown","b1631790":"markdown","613f90fd":"markdown","34dd8615":"markdown","2d430b3f":"markdown","d93a1f12":"markdown","f3223794":"markdown","fc4590ac":"markdown","6c541209":"markdown","3dcbc9df":"markdown","c5a31181":"markdown","e8392ce8":"markdown","537c7ece":"markdown","e021eae8":"markdown","017fecc4":"markdown","7e6b22e6":"markdown","cc51371c":"markdown","b2662de5":"markdown","a049c6e0":"markdown","ddcc13c1":"markdown","8e45f6b0":"markdown","7cf8d2da":"markdown","4bcc5f18":"markdown","48975934":"markdown","1c3c644a":"markdown","8ccff518":"markdown","f40c6e4e":"markdown","9726bfe7":"markdown","edc05690":"markdown","dcf18f8f":"markdown","e35a77de":"markdown","1d134b7d":"markdown","9b3c6bf6":"markdown","7909a38e":"markdown","dcbbf453":"markdown","56d6ac60":"markdown","f4b51755":"markdown","9a199d7d":"markdown","8f6ad14f":"markdown","189f02e7":"markdown","8a108d21":"markdown","6ab59f0b":"markdown","27ef22f7":"markdown","6ea25e77":"markdown","bec7625f":"markdown","356663f4":"markdown","eceefa36":"markdown","f91b4c9b":"markdown","ad1aac7f":"markdown","58c1e483":"markdown","52db2dc0":"markdown","9620a0b1":"markdown","b189f64b":"markdown","6ff1f71d":"markdown","3b825759":"markdown","eda3d3af":"markdown","76c589be":"markdown","88233f5a":"markdown","44e238c7":"markdown","d0cea90e":"markdown","52753f48":"markdown","36b19fed":"markdown","f3e2ffd3":"markdown","01ceab8d":"markdown","ae69ccd7":"markdown","a2d0ad35":"markdown","3838f521":"markdown","7bcb324a":"markdown","04db4a76":"markdown","b367348f":"markdown","0fb5c535":"markdown","3db4a19a":"markdown","090566bc":"markdown","5f6ee4ea":"markdown","e04d9ece":"markdown","3bb852e7":"markdown","e1ead254":"markdown","c435edf8":"markdown","e1f40a67":"markdown","2c762d40":"markdown","40786c5a":"markdown","1270fe86":"markdown","2a72d832":"markdown","9c73816f":"markdown","d2ffd1b9":"markdown","69d65387":"markdown","1efef679":"markdown","a21d9b11":"markdown","935df751":"markdown","cbc1b535":"markdown","af8adc64":"markdown","04504918":"markdown","ee1127a8":"markdown","6347f661":"markdown","52c6762b":"markdown","652d250e":"markdown","3c77ef11":"markdown","070c0937":"markdown","618d0ca6":"markdown","c4163912":"markdown","63cc8183":"markdown","4b45c3c8":"markdown","b1537cd0":"markdown","69cae056":"markdown","cd45880d":"markdown","0881f4e0":"markdown","a909ba13":"markdown","c6885bfd":"markdown","bb6ed842":"markdown","0433bfd5":"markdown","f18dd0bd":"markdown","8c271c2c":"markdown","79f1e22b":"markdown","10ae1dce":"markdown","1bc545f9":"markdown","69ffd5df":"markdown","0bec266a":"markdown","25f7a6f0":"markdown","9cfe10b3":"markdown","883607d7":"markdown","6c04891a":"markdown","538c1ed4":"markdown","b5d622bc":"markdown","a9428ac9":"markdown","792eb065":"markdown","f6033d62":"markdown","a0e254bb":"markdown","48be3f0d":"markdown","d727ef42":"markdown","adcd5bdb":"markdown","73afad23":"markdown","0f6e9e55":"markdown","3f383ba8":"markdown","ec24070b":"markdown","542eba06":"markdown","4169d438":"markdown","71e0ae6a":"markdown","90a4ce93":"markdown","42e5c5ec":"markdown"},"source":{"d83409ad":"# Try your first Python output\n\nprint('Hello, Python!')","76737327":"# Check the Python Version\n\nimport sys\nprint(sys.version)","b486e2cb":"# Practice on writing comments\n\nprint('Hello, Python!') # This line prints a string\n# print('Hi')","13f0f64e":"# Print string as error message\n\nfrint(\"Hello, Python!\")","2d765ae0":"# Try to see build in error message\n\nprint(\"Hello, Python!)","31967703":"# Print string and error to see the running order\n\nprint(\"This will be printed\")\nfrint(\"This will cause an error\")\nprint(\"This will NOT be printed\")","3d32a9e3":"# Integer\n\n11","fa4ad443":"# Float\n\n2.14","c2452a5a":"# String\n\n\"Hello, Python 101!\"","5d9e1413":"# Type of 12\n\ntype(12)","4cd228d6":"# Type of 2.14\n\ntype(2.14)","bff9b166":"# Type of \"Hello, Python 101!\"\n\ntype(\"Hello, Python 101!\")","dee266b4":"# Print the type of -1\n\ntype(-1)","5ce05378":"# Print the type of 4\n\ntype(4)","661246c6":"# Print the type of 0\n\ntype(0)","72cd284e":"# Print the type of 1.0\n\ntype(1.0) # Notice that 1 is an int, and 1.0 is a float","b1c0fc16":"# Print the type of 0.5\n\ntype(0.5)","f4837541":"# Print the type of 0.56\n\ntype(0.56)","9ff57fd6":"# System settings about float type\n\nsys.float_info","34b0dacb":"# Verify that this is an integer\n\ntype(2)","fcc2fe1e":"# Convert 2 to a float\n\nfloat(2)","e68c80a0":"# Convert integer 2 to a float and check its type\n\ntype(float(2))","9203bf56":"# Casting 1.1 to integer will result in loss of information\n\nint(1.1)","3746b8b4":"# Convert a string into an integer\n\nint('1')","6046a68d":"# Convert a string into an integer with error\n\nint('1 or 2 people')","e1868ba9":"# Convert the string \"1.2\" into a float\n\nfloat('1.2')","07dfc396":"# Convert an integer to a string\n\nstr(1)","9a56927f":"# Convert a float to a string\n\nstr(1.2)","ab41e5cf":"# Value true\n\nTrue","df694e5b":"# Value false\n\nFalse","3d2bab5e":"# Type of True\n\ntype(True)","6cb7515b":"# Type of False\n\ntype(False)","0316ef62":"# Convert True to int\n\nint(True)","8d61f3cd":"# Convert 1 to boolean\n\nbool(1)","cff4c1c2":"# Convert 0 to boolean\n\nbool(0)","4279a192":"# Convert True to float\n\nfloat(True)","ec4541b9":"# Addition operation expression\n\n43 + 60 + 16 + 41","e3ad6c27":"# Subtraction operation expression\n\n50 - 60","963c4b77":"# Multiplication operation expression\n\n5 * 5","58b22f36":"# Division operation expression\n\n25 \/ 5","fa188948":"# Division operation expression\n\n25 \/ 6","7d3169aa":"# Integer division operation expression\n\n25 \/\/ 5","0656f511":"# Integer division operation expression\n\n25 \/\/ 6","e8ed0386":"# Store value into variable\n\nx = 43 + 60 + 16 + 41","0439fb48":"# Print out the value in variable\n\nx","2a6d3a06":"# Use another variable to store the result of the operation between variable and value\n\ny = x \/ 60\ny","57f850d7":"# Overwrite variable with new value\n\nx = x \/ 60\nx","fdb45e38":"# Name the variables meaningfully\n\ntotal_min = 43 + 42 + 57 # Total length of albums in minutes\ntotal_min","f1fc56d7":"# Name the variables meaningfully\n\ntotal_hours = total_min \/ 60 # Total length of albums in hours \ntotal_hours","99eaec60":"# Complicate expression\n\ntotal_hours = (43 + 42 + 57) \/ 60  # Total hours in a single expression\ntotal_hours","c7b1d979":"# Create your first tuple\n\ntuple1 = (\"disco\",10,1.2 )\ntuple1","d83b51ba":"# Print the type of the tuple you created\n\ntype(tuple1)","610e3469":"# Print the variable on each index\n\nprint(tuple1[0])\nprint(tuple1[1])\nprint(tuple1[2])","d664aa4e":"# Print the type of value on each index\n\nprint(type(tuple1[0]))\nprint(type(tuple1[1]))\nprint(type(tuple1[2]))","784fa021":"# Use negative index to get the value of the last element\n\ntuple1[-1]","95331954":"# Use negative index to get the value of the second last element\n\ntuple1[-2]","a2c6aea0":"# Use negative index to get the value of the third last element\n\ntuple1[-3]","c8c7c1bc":"# Concatenate two tuples\n\ntuple2 = tuple1 + (\"hard rock\", 10)\ntuple2","1f1ab24a":"# Slice from index 0 to index 2\n\ntuple2[0:3]","68e2494d":"# Slice from index 3 to index 4\n\ntuple2[3:5]","9afb9738":"# Get the length of tuple\n\nlen(tuple2)","0f436e7a":"# A sample tuple\n\nRatings = (0, 9, 6, 5, 10, 8, 9, 6, 2)","5310839c":"# Sort the tuple\n\nRatingsSorted = sorted(Ratings)\nRatingsSorted","cc618382":"# Create a nest tuple\n\nNestedT =(1, 2, (\"pop\", \"rock\") ,(3,4),(\"disco\",(1,2)))","9e94cafc":"# Print element on each index\n\nprint(\"Element 0 of Tuple: \", NestedT[0])\nprint(\"Element 1 of Tuple: \", NestedT[1])\nprint(\"Element 2 of Tuple: \", NestedT[2])\nprint(\"Element 3 of Tuple: \", NestedT[3])\nprint(\"Element 4 of Tuple: \", NestedT[4])","f1012855":"# Print element on each index, including nest indexes\n\nprint(\"Element 2, 0 of Tuple: \",   NestedT[2][0])\nprint(\"Element 2, 1 of Tuple: \",   NestedT[2][1])\nprint(\"Element 3, 0 of Tuple: \",   NestedT[3][0])\nprint(\"Element 3, 1 of Tuple: \",   NestedT[3][1])\nprint(\"Element 4, 0 of Tuple: \",   NestedT[4][0])\nprint(\"Element 4, 1 of Tuple: \",   NestedT[4][1])","8e8913d6":"# Print the first element in the second nested tuples\n\nNestedT[2][1][0]","1ffb311c":"# Print the second element in the second nested tuples\n\nNestedT[2][1][1]","4fb643d7":"# Print the first element in the second nested tuples\n\nNestedT[4][1][0]","0cccb97f":"# Print the second element in the second nested tuples\n\nNestedT[4][1][1]","40232a89":"# Create a list\n\nL = [\"Michael Jackson\", 10.1, 1982]\nL","314237a1":"# Print the elements on each index\n\nprint('the same element using negative and positive indexing:\\n Postive:',L[0],\n'\\n Negative:' , L[-3]  )\nprint('the same element using negative and positive indexing:\\n Postive:',L[1],\n'\\n Negative:' , L[-2]  )\nprint('the same element using negative and positive indexing:\\n Postive:',L[2],\n'\\n Negative:' , L[-1]  )","cfb068ec":"# Sample List\n\n[\"Michael Jackson\", 10.1, 1982, [1, 2], (\"A\", 1)]","4d0e6b51":"# Sample List\n\nL = [\"Michael Jackson\", 10.1,1982,\"MJ\",1]\nL","a760c124":"# List slicing\n\nL[3:5]","415d14e0":"# Use extend to add elements to list\n\nL = [ \"Michael Jackson\", 10.2]\nL.extend(['pop', 10])\nL","0e60eaa9":"# Use append to add elements to list\n\nL = [ \"Michael Jackson\", 10.2]\nL.append(['pop', 10])\nL","7a6b1734":"# Use extend to add elements to list\n\nL = [ \"Michael Jackson\", 10.2]\nL.extend(['pop', 10])\nL","eb22a9ae":"# Use append to add elements to list\n\nL.append(['a','b'])\nL","92c34191":"# Change the element based on the index\n\nA = [\"disco\", 10, 1.2]\nprint('Before change:', A)\nA[0] = 'hard rock'\nprint('After change:', A)","57d92671":"# Delete the element based on the index\n\nprint('Before change:', A)\ndel(A[0])\nprint('After change:', A)","c3682052":"# Split the string, default is by space\n\n'hard rock'.split()","1bc0b386":"# Split the string by comma\n\n'A,B,C,D'.split(',')","eff78baf":"# Copy (copy by reference) the list A\n\nA = [\"hard rock\", 10, 1.2]\nB = A\nprint('A:', A)\nprint('B:', B)","d3c1a214":"# Examine the copy by reference\n\nprint('B[0]:', B[0])\nA[0] = \"banana\"\nprint('B[0]:', B[0])","5146c8b3":"# Clone (clone by value) the list A\n\nB = A[:]\nB","b2c62d51":"print('B[0]:', B[0])\nA[0] = \"hard rock\"\nprint('B[0]:', B[0])","c4dfb2bb":"# Create the dictionary\n\nDict = {\"key1\": 1, \"key2\": \"2\", \"key3\": [3, 3, 3], \"key4\": (4, 4, 4), ('key5'): 5, (0, 1): 6}\nDict","2742776c":"# Access to the value by the key\n\nDict[\"key1\"]","03d1c2f9":"# Access to the value by the key\n\nDict[(0, 1)]","39aa5267":"# Create a sample dictionary\n\nrelease_year_dict = {\"Thriller\": \"1982\", \"Back in Black\": \"1980\", \\\n                    \"The Dark Side of the Moon\": \"1973\", \"The Bodyguard\": \"1992\", \\\n                    \"Bat Out of Hell\": \"1977\", \"Their Greatest Hits (1971-1975)\": \"1976\", \\\n                    \"Saturday Night Fever\": \"1977\", \"Rumours\": \"1977\"}\nrelease_year_dict","eec421c0":"# Get value by keys\n\nrelease_year_dict['Thriller'] ","6e76ab10":"# Get value by key\n\nrelease_year_dict['The Bodyguard'] ","7446ff25":"# Get all the keys in dictionary\n\nrelease_year_dict.keys() ","952256dd":"# Get all the values in dictionary\n\nrelease_year_dict.values() ","25766925":"# Append value with key into dictionary\n\nrelease_year_dict['Graduation'] = '2007'\nrelease_year_dict","c93b2c36":"# Delete entries by key\n\ndel(release_year_dict['Thriller'])\ndel(release_year_dict['Graduation'])\nrelease_year_dict","326c5369":"# Verify the key is in the dictionary\n\n'The Bodyguard' in release_year_dict","d0aa69d9":"# Create a set\n\nset1 = {\"pop\", \"rock\", \"soul\", \"hard rock\", \"rock\", \"R&B\", \"rock\", \"disco\"}\nset1","becb3a92":"# Convert list to set\n\nalbum_list = [ \"Michael Jackson\", \"Thriller\", 1982, \"00:42:19\", \\\n              \"Pop, Rock, R&B\", 46.0, 65, \"30-Nov-82\", None, 10.0]\nalbum_set = set(album_list)             \nalbum_set","ff89ea76":"# Convert list to set\n\nmusic_genres = set([\"pop\", \"pop\", \"rock\", \"folk rock\", \"hard rock\", \"soul\", \\\n                    \"progressive rock\", \"soft rock\", \"R&B\", \"disco\"])\nmusic_genres","56e863d7":"# Sample set\n\nA = set([\"Thriller\", \"Back in Black\", \"AC\/DC\"])\nA","ebca4775":"# Add element to set\n\nA.add(\"NSYNC\")\nA","326f25b6":"# Try to add duplicate element to the set\n\nA.add(\"NSYNC\")\nA","2bea2b0d":"# Remove the element from set\n\nA.remove(\"NSYNC\")\nA","7d8e0db9":"# Verify if the element is in the set\n\n\"AC\/DC\" in A","3f5f1066":"# Sample Sets\n\nalbum_set1 = set([\"Thriller\", 'AC\/DC', 'Back in Black'])\nalbum_set2 = set([ \"AC\/DC\", \"Back in Black\", \"The Dark Side of the Moon\"])","08d32901":"# Print two sets\n\nalbum_set1, album_set2","9b90072b":"# Find the intersections\n\nintersection = album_set1 & album_set2\nintersection","6dbe1fce":"# Find the difference in set1 but not set2\n\nalbum_set1.difference(album_set2) ","37eb96ee":"album_set2.difference(album_set1)  ","0e85ad9a":"# Use intersection method to find the intersection of album_list1 and album_list2\n\nalbum_set1.intersection(album_set2)   ","38ba02d3":"# Find the union of two sets\n\nalbum_set1.union(album_set2)","e8539bf4":"# Check if superset\n\nset(album_set1).issuperset(album_set2)","01cbd75d":"# Check if subset\n\nset(album_set2).issubset(album_set1)    ","e03773a8":"# Check if subset\n\nset({\"Back in Black\", \"AC\/DC\"}).issubset(album_set1) ","e04ead85":"# Check if superset\n\nalbum_set1.issuperset({\"Back in Black\", \"AC\/DC\"})  ","a82d65ab":"# Condition Equal\n\na = 5\na == 6","46fe96a6":"# Greater than Sign\n\ni = 6\ni > 5","d6ae6419":"# Greater than Sign\n\ni = 2\ni > 5","8394484f":"# Inequality Sign\n\ni = 2\ni != 6","1bb95ca4":"# Inequality Sign\n\ni = 6\ni != 6","1ff35f65":"# Use Equality sign to compare the strings\n\n\"ACDC\" == \"Michael Jackson\"","67535949":"# Use Inequality sign to compare the strings\n\n\"ACDC\" != \"Michael Jackson\"","f26ee8be":"# Compare characters\n\n'B' > 'A'","48ab460a":"# Compare characters\n\n'BA' > 'AB'","3b532a89":"# If statement example\n\nage = 19\n#age = 18\n\n#expression that can be true or false\nif age > 18:\n    \n    #within an indent, we have the expression that is run if the condition is true\n    print(\"you can enter\" )\n\n#The statements after the if statement will run regardless if the condition is true or false \nprint(\"move on\")","d6489f68":"# Else statement example\n\nage = 18\n# age = 19\n\nif age > 18:\n    print(\"you can enter\" )\nelse:\n    print(\"go see Meat Loaf\" )\n    \nprint(\"move on\")","150afce6":"# Elif statment example\n\nage = 18\n\nif age > 18:\n    print(\"you can enter\" )\nelif age == 18:\n    print(\"go see Pink Floyd\")\nelse:\n    print(\"go see Meat Loaf\" )\n    \nprint(\"move on\")","a1f4b010":"# Condition statement example\n\nalbum_year = 1983\nalbum_year = 1970\n\nif album_year > 1980:\n    print(\"Album year is greater than 1980\")\n    \nprint('do something..')","cbaf19a1":"# Condition statement example\n\nalbum_year = 1983\n#album_year = 1970\n\nif album_year > 1980:\n    print(\"Album year is greater than 1980\")\nelse:\n    print(\"less than 1980\")\n\nprint('do something..')","c4effda8":"# Condition statement example\n\nalbum_year = 1980\n\nif(album_year > 1979) and (album_year < 1990):\n    print (\"Album year was in between 1980 and 1989\")\n    \nprint(\"\")\nprint(\"Do Stuff..\")","178e1977":"# Condition statement example\n\nalbum_year = 1990\n\nif(album_year < 1980) or (album_year > 1989):\n    print (\"Album was not made in the 1980's\")\nelse:\n    print(\"The Album was made in the 1980's \")","86ef1d4a":"# Condition statement example\n\nalbum_year = 1983\n\nif not (album_year == '1984'):\n    print (\"Album year is not 1984\")","465c7147":"# Use the range\n\nrange(3)","5c0b1389":"# For loop example\n\ndates = [1982,1980,1973]\nN = len(dates)\n\nfor i in range(N):\n    print(dates[i])   ","014e812b":"# Example of for loop\n\nfor i in range(0, 8):\n    print(i)","f17e971a":"# Exmaple of for loop, loop through list\n\nfor year in dates:  \n    print(year)   ","bd281588":"# Use for loop to change the elements in list\n\nsquares = ['red', 'yellow', 'green', 'purple', 'blue']\n\nfor i in range(0, 5):\n    print(\"Before square \", i, 'is',  squares[i])\n    squares[i] = 'weight'\n    print(\"After square \", i, 'is',  squares[i])","f2f03757":"# Loop through the list and iterate on both index and element value\n\nsquares=['red', 'yellow', 'green', 'purple', 'blue']\n\nfor i, square in enumerate(squares):\n    print(i, square)","6c7d8646":"# While Loop Example\n\ndates = [1982, 1980, 1973, 2000]\n\ni = 0\nyear = 0\n\nwhile(year != 1973):\n    year = dates[i]\n    i = i + 1\n    print(year)\n\nprint(\"It took \", i ,\"repetitions to get out of loop.\")","fa17a07c":"# First function example: Add 1 to a and store as b\n\ndef add(a):\n    b = a + 1\n    print(a, \"if you add one\", b)\n    return(b)","349d6cbc":"# Get a help on add function\n\nhelp(add)","c1e19bdf":"# Call the function add()\n\nadd(1)","dcde15d7":"# Call the function add()\n\nadd(2)","f11d8bde":"# Define a function for multiple two numbers\n\ndef Mult(a, b):\n    c = a * b\n    return(c)","7daef66f":"# Use mult() multiply two integers\n\nMult(2, 3)","f5a3cae3":"# Use mult() multiply two floats\n\nMult(10.0, 3.14)","dd21eac6":"# Use mult() multiply two different type values together\n\nMult(2, \"Michael Jackson \")","c7e8fcb3":"# Function Definition\n\ndef square(a):\n    \n    # Local variable b\n    b = 1\n    c = a * a + b\n    print(a, \"if you square + 1\", c) \n    return(c)","bcfec53b":"# Initializes Global variable  \n\nx = 3\n# Makes function call and return function a y\ny = square(x)\ny","eeeaa99e":"# Directly enter a number as parameter\n\nsquare(2)","8880c997":"# Define functions, one with return value None and other without return value\n\ndef MJ():\n    print('Michael Jackson')\n    \ndef MJ1():\n    print('Michael Jackson')\n    return(None)","1c31509c":"# See the output\n\nMJ()","20ac0005":"# See what functions returns are\n\nprint(MJ())\nprint(MJ1())","7a07f2fe":"# Define the function for combining strings\n\ndef con(a, b):\n    return(a + b)","76349b16":"# Test on the con() function\n\ncon(\"This \", \"is\")","57405f87":"# a and b calculation block1\n\na1 = 4\nb1 = 5\nc1 = a1 + b1 + 2 * a1 * b1 - 1\nif(c1 < 0):\n    c1 = 0 \nelse:\n    c1 = 5\nc1   ","5e34eff3":"# a and b calculation block2\n\na2 = 0\nb2 = 0\nc2 = a2 + b2 + 2 * a2 * b2 - 1\nif(c2 < 0):\n    c2 = 0 \nelse:\n    c2 = 5\nc2 ","fccdd509":"# Make a Function for the calculation above\n\ndef Equation(a,b):\n    c = a + b + 2 * a * b - 1\n    if(c < 0):\n        c = 0 \n    else:\n        c = 5\n    return(c) ","4c7c6e32":"a1 = 4\nb1 = 5\nc1 = Equation(a1, b1)\nc1","1b0a9c76":"a2 = 0\nb2 = 0\nc2 = Equation(a2, b2)\nc2","808bf1da":"# Build-in function print()\n\nalbum_ratings = [10.0, 8.5, 9.5, 7.0, 7.0, 9.5, 9.0, 9.5] \nprint(album_ratings)","c5a8f9c3":"# Use sum() to add every element in a list or tuple together\n\nsum(album_ratings)","43433e98":"# Show the length of the list or tuple\n\nlen(album_ratings)","e0bb246d":"# Function example\n\ndef type_of_album(artist, album, year_released):\n    \n    print(artist, album, year_released)\n    if year_released > 1980:\n        return \"Modern\"\n    else:\n        return \"Oldie\"\n    \nx = type_of_album(\"Michael Jackson\", \"Thriller\", 1980)\nprint(x)","4ecd0bb9":"# Print the list using for loop\n\ndef PrintList(the_list):\n    for element in the_list:\n        print(element)","fde9643a":"# Implement the printlist function\n\nPrintList(['1', 1, 'the man', \"abc\"])","0e7346f1":"# Example for setting param with default value\n\ndef isGoodRating(rating=4): \n    if(rating < 7):\n        print(\"this album sucks it's rating is\",rating)\n        \n    else:\n        print(\"this album is good its rating is\",rating)\n","79ea573a":"# Test the value with default value and with input\n\nisGoodRating()\nisGoodRating(10)","aeb9a06b":"# Example of global variable\n\nartist = \"Michael Jackson\"\ndef printer1(artist):\n    internal_var = artist\n    print(artist, \"is an artist\")\n    \nprinter1(artist)","4d3d9adf":"artist = \"Michael Jackson\"\n\ndef printer(artist):\n    global internal_var \n    internal_var= \"Whitney Houston\"\n    print(artist,\"is an artist\")\n\nprinter(artist) \nprinter(internal_var)","c6dc28aa":"# Example of global variable\n\nmyFavouriteBand = \"AC\/DC\"\n\ndef getBandRating(bandname):\n    if bandname == myFavouriteBand:\n        return 10.0\n    else:\n        return 0.0\n\nprint(\"AC\/DC's rating is:\", getBandRating(\"AC\/DC\"))\nprint(\"Deep Purple's rating is:\",getBandRating(\"Deep Purple\"))\nprint(\"My favourite band is:\", myFavouriteBand)","c54e2ac1":"# Example of local variable\n\ndef getBandRating(bandname):\n    myFavouriteBand = \"AC\/DC\"\n    if bandname == myFavouriteBand:\n        return 10.0\n    else:\n        return 0.0\n\nprint(\"AC\/DC's rating is: \", getBandRating(\"AC\/DC\"))\nprint(\"Deep Purple's rating is: \", getBandRating(\"Deep Purple\"))\nprint(\"My favourite band is\", myFavouriteBand)","f1346fd0":"# Example of global variable and local variable with the same name\n\nmyFavouriteBand = \"AC\/DC\"\n\ndef getBandRating(bandname):\n    myFavouriteBand = \"Deep Purple\"\n    if bandname == myFavouriteBand:\n        return 10.0\n    else:\n        return 0.0\n\nprint(\"AC\/DC's rating is:\",getBandRating(\"AC\/DC\"))\nprint(\"Deep Purple's rating is: \",getBandRating(\"Deep Purple\"))\nprint(\"My favourite band is:\",myFavouriteBand)","0bd33792":"# Import the library\n\nimport matplotlib.pyplot as plt\n%matplotlib inline  ","4eb91fe8":"# Create a class Circle\n\nclass Circle(object):\n    \n    # Constructor\n    def __init__(self, radius=3, color='blue'):\n        self.radius = radius\n        self.color = color \n    \n    # Method\n    def add_radius(self, r):\n        self.radius = self.radius + r\n        return(self.radius)\n    \n    # Method\n    def drawCircle(self):\n        plt.gca().add_patch(plt.Circle((0, 0), radius=self.radius, fc=self.color))\n        plt.axis('scaled')\n        plt.show()  ","81f4d63c":"# Create an object RedCircle\n\nRedCircle = Circle(10, 'red')","9d1d897b":"# Find out the methods can be used on the object RedCircle\n\ndir(RedCircle)","4994c358":"# Print the object attribute radius\n\nRedCircle.radius","da386744":"# Print the object attribute color\n\nRedCircle.color","e3e507ab":"# Set the object attribute radius\n\nRedCircle.radius = 1\nRedCircle.radius","ed03a913":"# Call the method drawCircle\n\nRedCircle.drawCircle()","85c9f81a":"# Use method to change the object attribute radius\n\nprint('Radius of object:',RedCircle.radius)\nRedCircle.add_radius(2)\nprint('Radius of object of after applying the method add_radius(2):',RedCircle.radius)\nRedCircle.add_radius(5)\nprint('Radius of object of after applying the method add_radius(5):',RedCircle.radius)","716f37ce":"# Create a blue circle with a given radius\n\nBlueCircle = Circle(radius=100)","68fbe53d":"# Print the object attribute radius\n\nBlueCircle.radius","07a9ccac":"# Print the object attribute color\n\nBlueCircle.color","0a71d606":"# Call the method drawCircle\n\nBlueCircle.drawCircle()\n\nCompare the x and y axis of the figure to the figure for RedCircle; they are different.","b2f3d8a9":"# Create a new Rectangle class for creating a rectangle object\n\nclass Rectangle(object):\n    \n    # Constructor\n    def __init__(self, width=2, height=3, color='r'):\n        self.height = height \n        self.width = width\n        self.color = color\n    \n    # Method\n    def drawRectangle(self):\n        plt.gca().add_patch(plt.Rectangle((0, 0), self.width, self.height ,fc=self.color))\n        plt.axis('scaled')\n        plt.show()","3806346d":"# Create a new object rectangle\n\nSkinnyBlueRectangle = Rectangle(2, 10, 'blue')","56a590c5":"# Print the object attribute height\n\nSkinnyBlueRectangle.height ","f7174f97":"# Print the object attribute width\n\nSkinnyBlueRectangle.width","1077aa73":"# Print the object attribute color\n\nSkinnyBlueRectangle.color","e394ba30":"# Use the drawRectangle method to draw the shape\n\nSkinnyBlueRectangle.drawRectangle()","0be5696c":"# Create a new object rectangle\n\nFatYellowRectangle = Rectangle(20, 5, 'yellow')","f4e9028b":"# Print the object attribute height\n\nFatYellowRectangle.height ","0c1379f3":"# Print the object attribute width\n\nFatYellowRectangle.width","de031cc2":"# Print the object attribute color\n\nFatYellowRectangle.color","eca73d05":"# Use the drawRectangle method to draw the shape\n\nFatYellowRectangle.drawRectangle()","48e65bd7":"# Import the libraries\n\nimport time \nimport sys\nimport numpy as np \n\nimport matplotlib.pyplot as plt\n%matplotlib inline  ","b823dbde":"# Plotting functions\n\ndef Plotvec1(u, z, v):\n    \n    ax = plt.axes()\n    ax.arrow(0, 0, *u, head_width=0.05, color='r', head_length=0.1)\n    plt.text(*(u + 0.1), 'u')\n    \n    ax.arrow(0, 0, *v, head_width=0.05, color='b', head_length=0.1)\n    plt.text(*(v + 0.1), 'v')\n    ax.arrow(0, 0, *z, head_width=0.05, head_length=0.1)\n    plt.text(*(z + 0.1), 'z')\n    plt.ylim(-2, 2)\n    plt.xlim(-2, 2)\n\ndef Plotvec2(a,b):\n    ax = plt.axes()\n    ax.arrow(0, 0, *a, head_width=0.05, color ='r', head_length=0.1)\n    plt.text(*(a + 0.1), 'a')\n    ax.arrow(0, 0, *b, head_width=0.05, color ='b', head_length=0.1)\n    plt.text(*(b + 0.1), 'b')\n    plt.ylim(-2, 2)\n    plt.xlim(-2, 2)","9dd3a770":"# Create a python list\n\na = [\"0\", 1, \"two\", \"3\", 4]","9839835f":"# Print each element\n\nprint(\"a[0]:\", a[0])\nprint(\"a[1]:\", a[1])\nprint(\"a[2]:\", a[2])\nprint(\"a[3]:\", a[3])\nprint(\"a[4]:\", a[4])","25b88e2f":"# import numpy library\n\nimport numpy as np ","1dae7209":"# Create a numpy array\n\na = np.array([0, 1, 2, 3, 4])\na","3677c65b":"# Print each element\n\nprint(\"a[0]:\", a[0])\nprint(\"a[1]:\", a[1])\nprint(\"a[2]:\", a[2])\nprint(\"a[3]:\", a[3])\nprint(\"a[4]:\", a[4])","233155df":"# Check the type of the array\n\ntype(a)","cc530bb8":"# Check the type of the values stored in numpy array\n\na.dtype","b823eacb":"# Create a numpy array\n\nb = np.array([3.1, 11.02, 6.2, 213.2, 5.2])","83c8febf":"# Check the type of array\n\ntype(b)","3eed1792":"# Check the value type\n\nb.dtype","ee595af2":"# Create numpy array\n\nc = np.array([20, 1, 2, 3, 4])\nc","a9f6b4e2":"# Assign the first element to 100\n\nc[0] = 100\nc","9816ed26":"# Assign the 5th element to 0\n\nc[4] = 0\nc","20b604d2":"# Slicing the numpy array\n\nd = c[1:4]\nd","2bbf98db":"# Set the fourth element and fifth element to 300 and 400\n\nc[3:5] = 300, 400\nc","9f492242":"# Create the index list\n\nselect = [0, 2, 3]","5eba788e":"# Use List to select elements\n\nd = c[select]\nd","658347cd":"# Assign the specified elements to new value\n\nc[select] = 100000\nc","8c230c15":"# Create a numpy array\n\na = np.array([0, 1, 2, 3, 4])\na","4552aaaa":"# Get the size of numpy array\n\na.size","4fdc55f3":"# Get the number of dimensions of numpy array\n\na.ndim","392ebc6f":"# Get the shape\/size of numpy array\n\na.shape","a1330c55":"# Create a numpy array\n\na = np.array([1, -1, 1, -1])","e47ab7b9":"# Get the mean of numpy array\n\nmean = a.mean()\nmean","bc8cb714":"# Get the standard deviation of numpy array\n\nstandard_deviation=a.std()\nstandard_deviation","7e60f506":"# Create a numpy array\n\nb = np.array([-1, 2, 3, 4, 5])\nb","cb930864":"# Get the biggest value in the numpy array\n\nmax_b = b.max()\nmax_b","5e40ee00":"# Get the smallest value in the numpy array\n\nmin_b = b.min()\nmin_b","467c3809":"u = np.array([1, 0])\nu","db32bd10":"v = np.array([0, 1])\nv","d0fa9ef1":"# Numpy Array Addition\n\nz = u + v\nz","c5f07ee9":"# Plot numpy arrays\n\nPlotvec1(u, z, v)","53f2ca72":"# Create a numpy array\n\ny = np.array([1, 2])\ny","da8ea8fe":"# Numpy Array Multiplication\n\nz = 2 * y\nz","f9dc821e":"# Create a numpy array\n\nu = np.array([1, 2])\nu","2ca52589":"# Create a numpy array\n\nv = np.array([3, 2])\nv","5a40fa63":"# Calculate the production of two numpy arrays\n\nz = u * v\nz","eb04c619":"# Calculate the dot product\n\nnp.dot(u, v)","c73d776d":"# Create a constant to numpy array\n\nu = np.array([1, 2, 3, -1]) \nu","158baf23":"# Add the constant to array\n\nu + 1","6d89e4e7":"# The value of pie\n\nnp.pi","d9e0ac8f":"# Create the numpy array in radians\n\nx = np.array([0, np.pi\/2 , np.pi])","d688b268":"# Calculate the sin of each elements\n\ny = np.sin(x)\ny","fdc2a73a":"# Makeup a numpy array within [-2, 2] and 5 elements\n\nnp.linspace(-2, 2, num=5)","697c5049":"# Makeup a numpy array within [-2, 2] and 9 elements\n\nnp.linspace(-2, 2, num=9)","ee3f8450":"# Makeup a numpy array within [0, 2\u03c0] and 100 elements \n\nx = np.linspace(0, 2*np.pi, num=100)","ad097f31":"# Calculate the sine of x list\n\ny = np.sin(x)","a0e20974":"# Plot the result\n\nplt.plot(x, y)","673bda48":"# Import the libraries\n\nimport numpy as np \nimport matplotlib.pyplot as plt","7b7d5b8d":"# Create a list\n\na = [[11, 12, 13], [21, 22, 23], [31, 32, 33]]\na","7a0d7ff1":"# Convert list to Numpy Array\n# Every element is the same type\n\nA = np.array(a)\nA","050dc33b":"# Show the numpy array dimensions\n\nA.ndim","2fe0e54b":"# Show the numpy array shape\n\nA.shape","723b780e":"# Show the numpy array size\n\nA.size","26b31f41":"# Access the element on the second row and third column\n\nA[1, 2]","481b32e5":"# Access the element on the second row and third column\n\nA[1][2]","0741fc12":"# Access the element on the first row and first column\n\nA[0][0]","3c599bab":"# Access the element on the first row and first and second columns\n\nA[0][0:2]","1b242c0f":"# Access the element on the first and second rows and third column\n\nA[0:2, 2]","e13ee58f":"# Create a numpy array X\n\nX = np.array([[1, 0], [0, 1]]) \nX","84517a46":"# Create a numpy array Y\n\nY = np.array([[2, 1], [1, 2]]) \nY","c3282d7c":"# Add X and Y\n\nZ = X + Y\nZ","04d18c54":"# Create a numpy array Y\n\nY = np.array([[2, 1], [1, 2]]) \nY","f3b5c1d8":"# Multiply Y with 2\n\nZ = 2 * Y\nZ","b0a51329":"# Create a numpy array Y\n\nY = np.array([[2, 1], [1, 2]]) \nY","09f092e3":"# Create a numpy array X\n\nX = np.array([[1, 0], [0, 1]]) \nX","ebc190e3":"# Multiply X with Y\n\nZ = X * Y\nZ","b9b9f8b9":"# Create a matrix A\n\nA = np.array([[0, 1, 1], [1, 0, 1]])\nA","a7e7cdcf":"# Create a matrix B\n\nB = np.array([[1, 1], [1, 1], [-1, 1]])\nB","7ca6b158":"# Calculate the dot product\n\nZ = np.dot(A,B)\nZ","8ba7210e":"# Calculate the sine of Z\n\nnp.sin(Z)","cc0ec6ca":"# Create a matrix C\n\nC = np.array([[1,1],[2,2],[3,3]])\nC","b2a14489":"# Get the transposed of C\n\nC.T","a16edf0b":"And there is no reason why we shouldn't be able to make floats into strings as well:","0affaf4d":"The elements in album_set2 but not in album_set1 is given by:","33813422":"# About the Dataset <a id=\"15\"><\/a>","ab6e0b23":"# Using if\/else Statemtents and Loops in Functions <a id=\"46\"><\/a>\n\nThe return() function is particularly useful if you have any IF statements in the function, when you want your output to be dependent on some condition:","dcd4848f":"# Sets Logic Operations <a id=\"33\"><\/a>","ec9c1cf5":"# What is Numpy? <a id=\"58\"><\/a>\n\nA numpy array is similar to a list. It's usually fixed in size and each element is of the same type. We can cast a list to a numpy array by first importing numpy:","0d7694d5":"If we use the inequality operator, the output is going to be True as the strings are not equal.","c4ef52d9":"We can add an element to a set using the add() method:","5a9cb910":"Block 2:","dd77ab2d":"We can slice tuples obtaining multiple values as demonstrated by the figure below:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/TuplesSlice.gif\" width=\"750\" align=\"center\">","b4a716cc":"# Boolean data type <a id=\"10\"><\/a>","1324e861":"To create a list, type the list within square brackets [ ], with your content inside the parenthesis and separated by commas. Let\u2019s try it!","8f386fae":"The process is demonstrated below, where each of the possibilities is illustrated on each side of the image. On the left is the case where the age is 17, we set the variable age to 17, and this corresponds to the individual attending the Meatloaf concert. The right portion shows what happens when the individual is over 18, in this case 19, and the individual is granted access to the concert.","9e2a90ad":"After executing the cell above, you should see that Python prints Hello, Python!. Congratulations on running your first Python code!","d406ce94":"<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/CondsElse.gif\" width=\"650\" \/>","6627b192":"Consider the following array v:","0478153d":"We can replace the lines of code with a function. A function combines many instructions into a single line of code. Once a function is defined, it can be used repeatedly. You can invoke the same function many times in your program. You can save your function and use it in another program or use someone else\u2019s function. The lines of code in code Block 1 and code Block 2 can be replaced by the following function:","6bc84ce3":"Let's display some values for i in the figure. Set the values greater than 5 in green and the rest in red. The green region represents where the condition is True, the red where the statement is False. If the value of i is 2, we get False as the 2 falls in the red region. Similarly, if the value for i is 6 we get a True as the condition falls in the green region.","f4a4d682":"Each time we apply a method, the list changes. If we apply extend we add two new elements to the list. The list L is then modified by adding two new elements:","eebcf96d":"In Python we can directly access the elements in the list as follows:","a20be205":"# The Rectangle Class <a id=\"56\"><\/a>\n\nLet's create a class rectangle with the attributes of height, width and color. We will only add the method to draw the rectangle object:","a845dd98":"When we set one variable B equal to A; both A and B are referencing the same list in memory:","a7b6b4bc":"If we can convert strings to numbers, it is only natural to assume that we can convert numbers to strings, right?","170618f2":"Printing the function after a call reveals a None is the default return statement:","0eb722be":"**Converting numbers to strings**","418491e9":"# Assign Value with List <a id=\"62\"><\/a>\n\nSimilarly, we can use a list to select a specific index. The list ' select ' contains several values:","398209e5":"# Product of Two Numpy Arrays <a id=\"66\"><\/a>\n\nConsider the following array u:","c1a24e5c":"# Integers <a id=\"7\"><\/a>","e0e4e0ac":"Set i = 2. The statement is false as 2 is not greater than 5:","4ddbda8e":"# Introduction to Classes and Objects <a id=\"50\"><\/a>\n\n# Creating a Class <a id=\"51\"><\/a>\n\nThe first part of creating a class is giving it a name: In this notebook, we will create two classes, Circle and Rectangle. We need to determine all the data that make up that class, and we call that an attribute. Think about this step as creating a blue print that we will use to create objects. In figure 1 we see two classes, circle and rectangle. Each has their attributes, they are variables. The class circle has the attribute radius and color, while the rectangle has the attribute height and width. Let\u2019s use the visual examples of these shapes before we get to the code, as this will help you get accustomed to the vocabulary.\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/ClassesClass.png\" width=\"500\" \/>\n\nFigure 1: Classes circle and rectangle, and each has their own attributes. The class circle has the attribute radius and colour, the rectangle has the attribute height and width.\n\n# Instances of a Class: Objects and Attributes <a id=\"52\"><\/a>\n\nAn instance of an object is the realisation of a class, and in Figure 2 we see three instances of the class circle. We give each object a name: red circle, yellow circle and green circle. Each object has different attributes, so let's focus on the attribute of colour for each object.\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/ClassesObj.png\" width=\"500\" \/>\n\nFigure 2: Three instances of the class circle or three objects of type circle.\n\nThe colour attribute for the red circle is the colour red, for the green circle object the colour attribute is green, and for the yellow circle the colour attribute is yellow.\n\n# Methods <a id=\"53\"><\/a>\n\nMethods give you a way to change or interact with the object; they are functions that interact with objects. For example, let\u2019s say we would like to increase the radius by a specified amount of a circle. We can create a method called add_radius(r) that increases the radius by r. This is shown in figure 3, where after applying the method to the \"orange circle object\", the radius of the object increases accordingly. The \u201cdot\u201d notation means to apply the method to the object, which is essentially applying a function to the information in the object.\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/ClassesMethod.png\" width=\"500\" \/> \n\n# Creating a Class <a id=\"54\"><\/a>\n\nNow we are going to create a class circle, but first, we are going to import a library to draw the objects:","79590923":"# Sets in Python <a id=\"29\"><\/a>","9a156453":"If we print internal_var we get an error.\n\nWe got a Name Error: name 'internal_var' is not defined. Why?\n\nIt's because all the variables we create in the function is a local variable, meaning that the variable assignment does not persist outside the function.\n\nBut there is a way to create global variables from within a function as follows:","03e1fce6":"A tuple can contain another tuple as well as other more complex data types. This process is called 'nesting'. Consider the following tuple with several elements:","7c500627":"<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/CondsIf.gif\" width=\"650\" \/>","cf25b708":"Consider the following tuple:","614b42e5":"Now, let us create your first tuple with string, integer and float.","6f78db5a":"<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/SetsSamples.png\" width=\"650\" \/>","ff9dca04":"We can use the attribute ndim to obtain the number of axes or dimensions referred to as the rank.","9769b911":"We can also use the following notation to obtain the elements:","472538cd":"Create a Python List as follows:","80064a34":"We can use a loop in a function. For example, we can print out each element in a list:","d0b06519":"# Adding Constant to a Numpy Array <a id=\"68\"><\/a>\n\nConsider the following array:","ff2b183c":"Each key is separated from its value by a colon \":\". Commas separate the items, and the whole dictionary is enclosed in curly braces. An empty dictionary without any items is written with just two curly braces, like this \"{}\".","c9f51412":"# 2D Numpy in Python <a id=\"71\"><\/a>\n\nWelcome! This notebook will teach you about using Numpy in the Python Programming Language. By the end of this lab, you'll know what Numpy is and the Numpy operations.\n\n# Create a 2d Numpy Array <a id=\"72\"><\/a>","e13ea319":"We can apply the function sin to the array x and assign the values to the array y; this applies the sine function to each element in the array:","7e687050":"Two Floats:","17e86ee2":"# Python - Writing Your First Python Code!","5fcdb46e":"# Tuples <a id=\"16\"><\/a>","95746392":"We can create the following numpy array in Radians:","d02222a1":"The first step in creating your own class is to use the class keyword, then the name of the class as shown in Figure 4. In this course the class parent will always be object:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/ClassesDefine.png\" width=\"400\" \/>\n\nFigure 4: Three instances of the class circle or three objects of type circle.\n\nThe next step is a special method called a constructor __init__, which is used to initialize the object. The input are data attributes. The term self contains all the attributes in the set. For example the self.color gives the value of the attribute color and self.radius will give you the radius of the object. We also have the method add_radius() with the parameter r, the method adds the value of r to the attribute radius. To access the radius we use the syntax self.radius. The labeled syntax is summarized in Figure 5:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/ClassesCircle.png\" width=\"600\" \/>\n\nFigure 5: Labeled syntax of the object circle.\n\nThe actual object is shown below. We include the method drawCircle to display the image of a circle. We set the default radius to 3 and the default colour to blue:","fccdd03a":"The sum() function adds all the elements in a list or tuple:","4c06f251":"Comparison operations compare some value or operand and, based on a condition, they produce a Boolean. When comparing two values you can use these operators:\n\n* equal: ==\n* not equal: !=\n* greater than: >\n* less than: <\n* greater than or equal to: >=\n* less than or equal to: <=\n\nLet's assign a a value of 5. Use the equality operator denoted with two equal == signs to determine if two values are equal. The case below compares the variable a with 6.","2221b680":"Create a function con that concatenates two strings using the addition operation:","b6611bec":"Boolean is another important type in Python. An object of type Boolean can take on one of two values: True or False:","1797300c":"# Other Attributes <a id=\"63\"><\/a>\n\nLet's review some basic array attributes using the array a:","ae8bbbe7":"# Assign Value <a id=\"60\"><\/a>\n\nWe can change the value of the array, consider the array c:","c61558f1":"# Type <a id=\"59\"><\/a>\n\nIf we check the type of the array we get numpy.ndarray:","40cb6030":"# Functions Makes Things Simple <a id=\"44\"><\/a> \n\nConsider the two lines of code in Block 1 and Block 2: the procedure for each block is identical. The only thing that is different is the variable names and values.\n\nBlock 1:","b5d396d0":"# Preparation <a id=\"57\"><\/a>","a0f51646":"The next two attributes will make more sense when we get to higher dimensions but let's review them. The attribute ndim represents the number of array dimensions or the rank of the array, in this case, one:","05a4bcb6":"# Variables <a id=\"43\"><\/a>\n\nThe input to a function is called a formal parameter.\n\nA variable that is declared inside a function is called a local variable. The parameter only exists within the function (i.e. the point where the function starts and stops).\n\nA variable that is declared outside a function definition is a global variable, and its value is accessible and modifiable throughout the program. We will discuss more about global variables at the end of the lab.","f0d2d92f":"We can verify if an element is in the set using the in command:","7ecd7277":"Imagine you received album recommendations from your friends and compiled all of the recommandations into a table, with specific information about each album.\n\nThe table has one row for each movie and several columns:\n\n* **artist - Name of the artist**\n* **album - Name of the album**\n* **released_year - Year the album was released**\n* **length_min_sec - Length of the album (hours,minutes,seconds)**\n* **genre - Genre of the album**\n* **music_recording_sales_millions - Music recording sales (millions in USD) on SONG:\/\/DATABASE**\n* **claimed_sales_millions - Album's claimed sales (millions in USD) on SONG:\/\/DATABASE**\n* **date_released - Date on which the album was released**\n* **soundtrack - Indicates if the album is the movie soundtrack (Y) or (N)**\n* **rating_of_friends - Indicates the rating from your friends from 1 to 10**\n\nThe dataset can be seen below:","3e273c53":"The three combinations are shown in the figure below. The left-most region shows what happens when the individual is less than 18 years of age. The central component shows when the individual is exactly 18. The rightmost shows when the individual is over 18.","80957c82":"Now let us create a set of genres:","f1369f3a":"The following figure shows the relationship of the tree and the element NestedT[4][1][1]:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/TuplesNestFour.gif\" width=\"750\" align=\"center\">","2148d1c6":"# Floats <a id=\"8\"><\/a>","0fb77297":"The code in the indent is executed N times, each time the value of i is increased by 1 for every execution. The statement executed is to print out the value in the list at index i as shown here:","a79979e6":"The not statement checks if the statement is false:","022c7d3e":"We can cast boolean objects to other data types. If we cast a boolean with a value of True to an integer or float we will get a one. If we cast a boolean with a value of False to an integer or float we will get a zero. Similarly, if we cast a 1 to a Boolean, you get a True. And if we cast a 0 to a Boolean we will get a False. Let's give it a try:","263c392c":"This figure shows the number of elements:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/TuplesElement.png\" width=\"750\" align=\"center\">","7490a800":"A dictionary consists of keys and values. It is helpful to compare a dictionary to a list. Instead of the numerical indexes such as a list, dictionaries have keys. These keys are the keys that are used to access values within a dictionary.\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/DictsList.png\" width=\"650\" \/>","e0426fda":"- [Say \"Hello\" to the world in Python](#1)\n    - [What version of Python are we using?](#2)\n    - [Writing comments in Python](#3)\n    - [Errors in Python](#4)\n    - [Does Python know about your error before it runs your code?](#5)\n- [Types of objects in Python](#6)\n    - [Integers](#7)\n    - [Floats](#8)\n    - [Converting from one object type to a different object type](#9)\n    - [Boolean data type](#10)\n- [Expressions and Variables](#11)\n    - [Expressions](#12)\n    - [Variables](#13)\n- [Tuples in Python](#14)\n    - [About the Dataset](#15)\n    - [Tuples](#16)\n        - [Indexing](#17)\n        - [Slicing](#18)\n        - [Sorting](#19)\n- [Lists in Python](#20)\n    - [Lists](#21)\n        - [Indexing](#22)\n        - [List Content](#23)\n        - [List Operations](#24)\n        - [Copy and Clone List](#25)\n- [Dictionaries in Python](#26)\n    - [What are Dictionaries](#27)\n    - [Keys](#28)\n- [Sets in Python](#29)\n    - [Set Content](#30)\n    - [Set Operations](#31)\n    - [Sets Logic Operations](#32)\n- [Conditions in Python](#33)\n    - [Comparision Operators](#34)\n    - [Branching](#35)\n    - [Logical Operators](#36)\n- [Loops](#37)\n    - [Range](#38)\n    - [What is for loop?](#39)\n    - [What is while loop?](#40)\n- [Funcations](#41)\n    - [What is Function?](#42)\n    - [Variable](#43)\n    - [Functions Make Things Simple](#44)\n    - [Pre-defined Functions](#45)\n    - [Using if\/else Statements and Loops in Functions](#46)\n    - [Setting default arguments values in your custom functions](#47)\n    - [Global variables](#48)\n    - [Scope of a variable](#49)\n- [Introduction to Classes and Objects](#50)\n    - [Creating a Class](#51)\n    - [Instances of a Class: Object and Attributes](#52)\n    - [Methonds](#53)\n    - [Creating a Class](#54)\n    - [Creating an instance of a Class Circle](#55)\n    - [The Rectangle Class](#56)\n- [Preparation](#57)\n    - [What is Numpy](#58)\n    - [Type](#59)\n    - [Assign Value](#60)\n    - [Slicing](#61)\n    - [Assign Value with List](#62)\n    - [Other Attributes](#63)\n    - [Numpy Array Operation](#64)\n    - [Array Addition & Multiplication](#65)\n    - [Product of Two Numpy Arrays](#66)\n    - [Dot Product](#67)\n    - [Adding Constant to  Numpy Array](#68)\n    - [Mathematical Functions](#69)\n    - [Linspace](#70)\n- [2D Numpy in Python](#71)\n    - [Create 2D Numpy Array](#72)\n    - [Accessing different elements of Numpy Arrays](#73)\n    - [Basic Operations](#74)\n    \n    ","ec78f8da":"We can call the function:","aa084869":"# Sets Operations <a id=\"32\"><\/a>","f5458cc2":"The inequality test uses an exclamation mark preceding the equal sign, if two operands are not equal then the condition becomes True. For example, the following condition will produce True as long as the value of i is not equal to 6:","ec13a400":"Let\u2019s create a blue circle. As the default colour is blue, all we have to do is specify what the radius is:","ad63ec77":"We can concatenate or combine tuples by using the + sign:","0d8b2378":"We can also use slicing in numpy arrays. Consider the following figure. We would like to obtain the first two columns in the first row\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%205\/Images\/NumTwoFSF.png\" width=\"400\" \/>\n\nThis can be done with the following syntax","4a11aa85":"# Mathematical Functions <a id=\"69\"><\/a>\n\nWe can access the value of pie in numpy as follows :","03867952":"# Loops <a id=\"37\"><\/a>","6e1dfa7f":"Lists can contain strings, floats, and integers. We can nest other lists, and we can also nest tuples and other data structures. The same indexing conventions apply for nesting:","5c430860":"We can call the function with an input of 3:","d36afc9f":"<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/ListsIndex.png\" width=\"1000\" \/>","b5d27514":"# Dot Product <a id=\"67\"><\/a>\n\nThe dot product of the two numpy arrays u and v is given by:","94ebb8d6":"The figure below illustrates the terminology:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/FuncsDefinition.png\" width=\"500\" \/> ","d47f5638":"<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/CondsGreater.gif\" width=\"650\" \/>","09971f85":"We can use a tree to visualise the process. Each new index corresponds to a deeper level in the tree:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/TuplesNestThree.gif\" width=\"750\" align=\"center\">","69744e0f":"This corresponds to the intersection of the two circles:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/SetsIntersect.png\" width=\"650\" \/>\n\nThe union corresponds to all the elements in both sets, which is represented by coloring both circles:\n\n<img src = \"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/SetsUnion.png\" width=\"650\" \/>\n\nThe union is given by:","ad54d33b":"If there is no return statement, the function returns None. The following two functions are equivalent:","eec6d4a2":"A while loop iterates merely until the condition in the argument is not met, as shown in the following figure:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/LoopsWhile.gif\" width=\"650\" \/>","1369088a":"**Concatenate Tuples**","59f696da":"We can use the list as an argument in the brackets. The output is the elements corresponding to the particular index:","b4946715":"As both sets contain AC\/DC and Back in Black we represent these common elements with the intersection of two circles.\n\n<img src = \"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/SetsLogic.png\" width = \"650\" \/>","6b09309f":"The labels are displayed in the figure:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/FuncsVar.png\" width=\"500\" \/>","32d6e3d2":"Sometimes, we can have a string that contains a number within it. If this is the case, we can cast that string that represents a number into an integer using int():","822800ce":"We can also perform matrix multiplication with the numpy arrays A and B as follows:\n\nFirst, we define matrix A and B:","2feb1445":"We can use negative and regular indexing with a list :\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/ListsNeg.png\" width=\"1000\" \/>","34714176":"Corresponding to the following figure:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%205\/Images\/NumTwoTST.png\" width=\"400\" \/>","4f3f7649":"This function takes two inputs, a and b, then applies several operations to return c. We simply define the function, replace the instructions with the function, and input the new values of a1, b1 and a2, b2 as inputs. The entire process is demonstrated in the figure:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/FuncsPros.gif\" width=\"850\" \/>","f2f5806f":"Multiplying a numpy array by a scaler is identical to multiplying a matrix by a scaler. If we multiply the matrix Y by the scaler 2, we simply multiply every element in the matrix by 2 as shown in the figure.\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%205\/Images\/NumTwoDb.png\" width=\"500\" \/>\n\nWe can perform the same operation in numpy as follows","46675c9c":"We can call the function with an input of 2 in a different manner:","51e2e450":"# Indexing <a id=\"17\"><\/a>","54004acd":"There are two popular versions of the Python programming language in use today: Python 2 and Python 3. The Python community has decided to move on from Python 2 to Python 3, and many popular libraries have announced that they will no longer support Python 2.\n\nSince Python 3 is the future, in this course we will be using it exclusively. How do we know that our notebook is executed by a Python 3 runtime? We can look in the top-right hand corner of this notebook and see \"Python 3\".\n\nWe can also ask directly Python and obtain a detailed answer. Try executing the following code:","4098f665":"<img src = \"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/SetsRight.png\" width=\"650\" \/>\n\n\nYou can also find the intersection of album_list1 and album_list2, using the intersection method:","78581d7b":"# Slicing <a id=\"18\"><\/a>","5556d6dc":"<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/CondsIneq.gif\" width=\"650\" \/>\n\nWe can apply the same methods on strings. For example, use an equality operator on two different strings. As the strings are not equal, we get a False.","d1cfe645":"Just like with most programming languages, we can store values in variables, so we can use them later on. For example:","4c70e80e":"Notice that the value True has an uppercase \"T\". The same is true for False (i.e. you must use the uppercase \"F\").","44cd1104":"Multiplication of two arrays corresponds to an element-wise product or Hadamard product. Consider matrix X and Y. The Hadamard product corresponds to multiplying each of the elements in the same position, i.e. multiplying elements contained in the same color boxes together. The result is a new matrix that is the same size as matrix Y or X, as shown in the following figure.\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%205\/Images\/NumTwoMul.png\" width=\"500\" \/>\n\nWe can perform element-wise product of the array X and Y as follows:","b28d85b9":"Welcome! This notebook will teach you the basics of the Python programming language. Although the information presented here is quite basic, it is an important foundation that will help you read and write Python code. By the end of this notebook, you'll know the basics of Python, including how to write basic commands, understand some basic types, and how to perform simple operations on them.","171c9a4d":"# Array Multiplication\n\nConsider the vector numpy array y:","480d6b1b":"# Slicing <a id=\"61\"><\/a>\n\nLike lists, we can slice the numpy array, and we can select the elements from 1 to 3 and assign it to a new numpy array d as follows:","b1631790":"When i equals 6 the inequality expression produces False.","613f90fd":"The elif statement, short for else if, allows us to check additional conditions if the condition statements before it are False. If the condition for the elif statement is True, the alternate expressions will be run. Consider the concert example, where if the individual is 18 they will go to the Pink Floyd concert instead of attending the ACDC or Meat-loaf concert. The person of 18 years of age enters the area, and as they are not older than 18 they can not see ACDC, but as they are 18 years of age, they attend Pink Floyd. After seeing Pink Floyd, they move on. The syntax of the elif statement is similar in that we merely change the if in if statement to elif.","34dd8615":"This corresponds to:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/DictsKeyOne.png\" width=\"500\" \/>","2d430b3f":"Each element is of the same type, in this case integers:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%205\/Images\/NumOneNp.png\" width=\"500\" \/>\n\nAs with lists, we can access each element via a square bracket:","d93a1f12":"You can get Python to tell you the type of an expression by using the built-in type() function. You'll notice that Python refers to integers as int, floats as float, and character strings as str.","f3223794":"# List Content <a id=\"23\"><\/a>","fc4590ac":"We can use the split function to separate strings on a specific character. We pass the character we would like to split on into the argument, which in this case is a comma. The result is a list, and each element corresponds to a set of characters that have been separated by a comma:","6c541209":"# Errors in Python <a id=\"4\"><\/a>","3dcbc9df":"In summary, like a list, a dictionary holds a sequence of elements. Each element is represented by a key and its corresponding value. Dictionaries are created with two curly braces containing keys and values separated by a colon. For every key, there can only be one single value, however, multiple keys can hold the same value. Keys can only be strings, numbers, or tuples, but values can be any data type.\n\nIt is helpful to visualize the dictionary as a table, as in the following image. The first column represents the keys, the second column represents the values.\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/DictsStructure.png\" width=\"650\" \/>","c5a31181":"# Basic Operations <a id=\"74\"><\/a>\n\nWe can also add arrays. The process is identical to matrix addition. Matrix addition of X and Y is shown in the following figure:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%205\/Images\/NumTwoAdd.png\" width=\"500\" \/>\n\nThe numpy array is given by X and Y","e8392ce8":"We can remove an item from a set using the remove method:","537c7ece":"The error message tells you:\n\nwhere the error occurred (more useful in large notebook cells or scripts), and\nwhat kind of error it was (NameError)\nHere, Python attempted to run the function frint, but could not determine what frint is since it's not a built-in function and it has not been previously defined by us either.\n\nYou'll notice that if we make a different type of mistake, by forgetting to close the string, we'll obtain a different error (i.e., a SyntaxError). Try it below:","e021eae8":"You can find all the elements that are only contained in album_set1 using the difference method:","017fecc4":"Variable B references a new copy or clone of the original list; this is demonstrated in the following figure:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/ListsVal.gif\" width=\"1000\" \/>","7e6b22e6":"# What version of Python are we using? <a id=\"2\"><\/a>","cc51371c":"We can also use negative indexing. We use the same table above with corresponding negative values:","b2662de5":"We can convert a string to a list using split. For example, the method split translates every group of characters separated by a space into an element in a list:","a049c6e0":"This is demonstrated in the following figure:\n\n<img src = \"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/ListsRefGif.gif\" width=\"1000\" \/>","ddcc13c1":"# Lists in Python <a id=\"20\"><\/a>","8e45f6b0":"In Python, there are different data types: string, integer and float. These data types can all be contained in a tuple as follows:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/TuplesType.png\" width=\"750\" align=\"center\" \/>","7cf8d2da":"Each element in the tuple including other tuples can be obtained via an index as shown in the figure:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/TuplesNestOne.png\" width=\"750\" align=\"center\">","4bcc5f18":"You can find the intersect of two sets as follow using &:","48975934":"You can also convert strings containing floating point numbers into float objects:","1c3c644a":"# Indexing <a id=\"22\"><\/a>\n\nWe are going to take a look at lists in Python. A list is a sequenced collection of different objects such as integers, strings, and other lists as well. The address of each element within a list is called an index. An index is used to access and refer to items within a list.","8ccff518":"# Setting default argument values in your custom functions <a id=\"47\"><\/a>\n\nYou can set a default value for arguments in your function. For example, in the isGoodRating() function, what if we wanted to create a threshold for what we consider to be a good rating? Perhaps by default, we should have a default rating of 4:","f40c6e4e":"Remember that with sets you can check the difference between sets, as well as the symmetric difference, intersection, and union:\n\nConsider the following two sets:","9726bfe7":"# Creating instance of a Class Circle <a id=\"55\"><\/a>\n","edc05690":"When we convert an integer into a float, we don't really change the value (i.e., the significand) of the number. However, if we cast a float into an integer, we could potentially lose some information. For example, if we cast the float 1.1 to integer we will get 1 and lose the decimal information (i.e., 0.1):","dcf18f8f":"You can change the type of the object in Python; this is called typecasting. For example, you can convert an integer into a float (e.g. 2 to 2.0).\n\nLet's try it:","e35a77de":"# Conditions in Python <a id=\"34\"><\/a>","1d134b7d":"# Logical operators <a id=\"36\"><\/a>\n\nSometimes you want to check more than one condition at once. For example, you might want to check if one condition and another condition is True. Logical operators allow you to combine or modify conditions.\n\n* and\n* or\n* not\nThese operators are summarized for two variables using the following truth tables:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/CondsTable.png\" width=\"650\" \/>\n\nThe and statement is only True when both conditions are true. The or statement is true if one condition is True. The not statement outputs the opposite truth value.\n\nLet's see how to determine if an album was released after 1979 (1979 is not included) and before 1990 (1990 is not included). The time periods between 1980 and 1989 satisfy this condition. This is demonstrated in the figure below. The green on lines a and b represents periods where the statement is True. The green on line c represents where both conditions are True, this corresponds to where the green regions overlap.\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/CondsEgOne.png\" width=\"650\" \/>\n\nThe block of code to perform this check is given by:","9b3c6bf6":"We use the numpy function dot to multiply the arrays together.","7909a38e":"# Numpy Array Operations <a id=\"64\"><\/a>\n\n# Array Addition <a id=\"65\"><\/a>\n\nConsider the numpy array u:","dcbbf453":"The else statement runs a block of code if none of the conditions are True before this else statement. Let's use the ACDC concert analogy again. If the user is 17 they cannot go to the ACDC concert, but they can go to the Meatloaf concert. The syntax of the else statement is similar as the syntax of the if statement, as else :. Notice that, there is no condition statement for else. Try changing the values of age to see what happens:","56d6ac60":"# Global Variable <a id=\"48\"><\/a>\n\nSo far, we've been creating variables within functions, but we have not discussed variables outside the function. These are called global variables.\nLet's try to see what printer1 returns:","f4b51755":"Python is an object-oriented language. There are many different types of objects in Python. Let's start with the most common object types: strings, integers and floats. Anytime you write words (text) in Python, you're using character strings (strings for short). The most common numbers, on the other hand, are integers (e.g. -1, 0, 100) and floats, which represent real numbers (e.g. 3.14, -42.0).","9a199d7d":"You can retrieve the values based on the names:","8f6ad14f":"# Expressions <a id=\"12\"><\/a>","189f02e7":"# Table of Contents","8a108d21":"Inequality operation is also used to compare the letters\/words\/symbols according to the ASCII value of letters. The decimal value shown in the following table represents the order of the character:\n\nFor example, the ASCII code for ! is 21, while the ASCII code for + is 43. Therefore + is larger than ! as 43 is greater than 21.\n\nSimilarly, the value for A is 101, and the value for B is 102 therefore:","6ab59f0b":"We can access the data via an index:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%205\/Images\/NumOneList.png\" width=\"660\" \/>\n\nWe can access each element using a square bracket as follows:","27ef22f7":"# Linspace <a id=\"70\"><\/a>\n\nA useful function for plotting mathematical functions is \"linespace\". Linespace returns evenly spaced numbers over a specified interval. We specify the starting point of the sequence and the ending point of the sequence. The parameter \"num\" indicates the Number of samples to generate, in this case 5:","6ea25e77":"Take a look at this modified version of our code. Now the myFavouriteBand variable is defined within the getBandRating function. A variable that is defined within a function is said to be a local variable of that function. That means that it is only accessible from within the function in which it is defined. Our getBandRating function will still work, because myFavouriteBand is still defined within the function. However, we can no longer print myFavouriteBand outside our function, because it is a local variable of our getBandRating function; it is only defined within the getBandRating function:","bec7625f":"We can draw the object by using the method drawCircle():","356663f4":"Congratulations, you have completed a very basic Python and hands-on lab in Python. Please let me know if missed soemthing or correct me it there is any mistake.","eceefa36":"# Pre-Defined Functions <a id=\"45\"><\/a>\n\nThere are many pre-defined functions in Python, so let's start with the simple ones.\n\nThe print() function:","f91b4c9b":"# Tuples in Python <a id=\"14\"><\/a>","ad1aac7f":"# List Operations <a id=\"24\"><\/a>","58c1e483":"We can use the second index to access other tuples as demonstrated in the figure:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/TuplesNestTwo.png\" width=\"750\" align=\"center\">","52db2dc0":"Python is what is called an interpreted language. Compiled languages examine your entire program at compile time, and are able to warn you about a whole class of errors prior to execution. In contrast, Python interprets your script line by line as it executes it. Python will stop executing the entire program when it encounters an error (unless the error is expected and handled by the programmer, a more advanced subject that we'll cover later on in this course).\n\nTry to run the code in the cell below and see what happens:","9620a0b1":"When you ask Python to display the type of a boolean object it will show bool which stands for boolean:","b189f64b":"We can cast the list to a Numpy Array as follow","6ff1f71d":"Consider the numpy array v:","3b825759":"# Accessing different elements of Numpy Array <a id=\"73\"><\/a>\n\nWe can use rectangular brackets to access the different elements of the array. The correspondence between the rectangular brackets and the list and the rectangular representation is shown in the following figure for a 3x3 array:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%205\/Images\/NumTwoEg.png\" width=\"500\" \/>\n\nWe can access the 2nd-row 3rd column as shown in the following figure:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%205\/Images\/NumTwoFT.png\" width=\"400\" \/>\n\nWe simply use the square brackets and the indices corresponding to the element we would like:","eda3d3af":"If we add the same element twice, nothing will happen as there can be no duplicates in a set:","76c589be":"We can slice tuples, obtaining new tuples with the corresponding elements:","88233f5a":"The result is False, as 5 does not equal to 6.\n\nConsider the following equality comparison operator i > 5. If the value of the left operand, in this case the variable i, is greater than the value of the right operand, in this case 5, then the statement is True. Otherwise, the statement is False. If i is equal to 6, because 6 is larger than 5, the output is True.","44e238c7":"# Does Python know about your error before it runs your code? <a id=\"5\"><\/a>","d0cea90e":"# Copy and Clone List <a id=\"25\"><\/a>","52753f48":"The attribute shape is a tuple of integers indicating the size of the array in each dimension:","36b19fed":"# Scope of a Variable <a id=\"49\"><\/a>\n\nThe scope of a variable is the part of that program where that variable is accessible. Variables that are declared outside of all function definitions, such as the myFavouriteBand variable in the code shown here, are accessible from anywhere within the program. As a result, such variables are said to have global scope, and are known as global variables. myFavouriteBand is a global variable, so it is accessible from within the getBandRating function, and we can use it to determine a band's rating. We can also use it outside of the function, such as when we pass it to the print function to display it:","f3e2ffd3":"Finally, take a look at this example. We now have two myFavouriteBand variable definitions. The first one of these has a global scope, and the second of them is a local variable within the getBandRating function. Within the getBandRating function, the local variable takes precedence. Deep Purple will receive a rating of 10.0 when passed to the getBandRating function. However, outside of the getBandRating function, the getBandRating s local variable is not defined, so the myFavouriteBand variable we print is the global variable, which has a value of AC\/DC:","01ceab8d":"<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/CondsLogicMap.png\" width=\"650\" \/>","ae69ccd7":"We can access the index and the elements of a list as follows:","a2d0ad35":"<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/ListsSlice.png\" width=\"1000\">","3838f521":"We can perform subtraction operations using the minus operator. In this case the result is a negative number:","7bcb324a":"Block 4:","04db4a76":"See the number line below. when the condition is True the corresponding numbers are marked in green and for where the condition is False the corresponding number is marked in red. If we set i equal to 2 the operator is true as 2 is in the green region. If we set i equal to 6, we get a False as the condition falls in the red region.","b367348f":"# Variables <a id=\"13\"><\/a>","0fb5c535":"# Say \"Hello\" to the world in Python <a id=\"1\"><\/a>","3db4a19a":"**Converting integers to floats**\n**Let's cast integer 2 to float:**","090566bc":"Floats represent real numbers; they are a superset of integer numbers but also include \"numbers with decimals\". There are some limitations when it comes to machines representing real numbers, but floating point numbers are a good representation in most cases. You can learn more about the specifics of floats for your runtime environment, by checking the value of sys.float_info. This will also tell you what's the largest and smallest number that can be represented with them.\n\nOnce again, can test some examples with the type() function:","5f6ee4ea":"# Expression and Variables <a id=\"11\"><\/a>","e04d9ece":"Consider the list a, the list contains three nested lists each of equal size.","3bb852e7":"We can draw the object by using the method drawCircle():","e1ead254":"The process of mapping is illustrated in the figure:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/SetsUnique.png\" width=\"1100\" \/>","c435edf8":"# Branching <a id=\"35\"><\/a>","e1f40a67":"<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/DictsKeyTwo.png\" width=\"500\" \/>","2c762d40":"We can also perform slicing in lists. For example, if we want the last two elements, we use the following command:","40786c5a":"<br>\n<br>\n\nThe dataset can be seen below:\n\n<font size=\"1\">\n<table font-size:xx-small style=\"width:100%\">\n  <tr>\n    <th>Artist<\/th>\n    <th>Album<\/th> \n    <th>Released<\/th>\n    <th>Length<\/th>\n    <th>Genre<\/th> \n    <th>Music recording sales (millions)<\/th>\n    <th>Claimed sales (millions)<\/th>\n    <th>Released<\/th>\n    <th>Soundtrack<\/th>\n    <th>Rating (friends)<\/th>\n  <\/tr>\n  <tr>\n    <td>Michael Jackson<\/td>\n    <td>Thriller<\/td> \n    <td>1982<\/td>\n    <td>00:42:19<\/td>\n    <td>Pop, rock, R&B<\/td>\n    <td>46<\/td>\n    <td>65<\/td>\n    <td>30-Nov-82<\/td>\n    <td><\/td>\n    <td>10.0<\/td>\n  <\/tr>\n  <tr>\n    <td>AC\/DC<\/td>\n    <td>Back in Black<\/td> \n    <td>1980<\/td>\n    <td>00:42:11<\/td>\n    <td>Hard rock<\/td>\n    <td>26.1<\/td>\n    <td>50<\/td>\n    <td>25-Jul-80<\/td>\n    <td><\/td>\n    <td>8.5<\/td>\n  <\/tr>\n    <tr>\n    <td>Pink Floyd<\/td>\n    <td>The Dark Side of the Moon<\/td> \n    <td>1973<\/td>\n    <td>00:42:49<\/td>\n    <td>Progressive rock<\/td>\n    <td>24.2<\/td>\n    <td>45<\/td>\n    <td>01-Mar-73<\/td>\n    <td><\/td>\n    <td>9.5<\/td>\n  <\/tr>\n    <tr>\n    <td>Whitney Houston<\/td>\n    <td>The Bodyguard<\/td> \n    <td>1992<\/td>\n    <td>00:57:44<\/td>\n    <td>Soundtrack\/R&B, soul, pop<\/td>\n    <td>26.1<\/td>\n    <td>50<\/td>\n    <td>25-Jul-80<\/td>\n    <td>Y<\/td>\n    <td>7.0<\/td>\n  <\/tr>\n    <tr>\n    <td>Meat Loaf<\/td>\n    <td>Bat Out of Hell<\/td> \n    <td>1977<\/td>\n    <td>00:46:33<\/td>\n    <td>Hard rock, progressive rock<\/td>\n    <td>20.6<\/td>\n    <td>43<\/td>\n    <td>21-Oct-77<\/td>\n    <td><\/td>\n    <td>7.0<\/td>\n  <\/tr>\n    <tr>\n    <td>Eagles<\/td>\n    <td>Their Greatest Hits (1971-1975)<\/td> \n    <td>1976<\/td>\n    <td>00:43:08<\/td>\n    <td>Rock, soft rock, folk rock<\/td>\n    <td>32.2<\/td>\n    <td>42<\/td>\n    <td>17-Feb-76<\/td>\n    <td><\/td>\n    <td>9.5<\/td>\n  <\/tr>\n    <tr>\n    <td>Bee Gees<\/td>\n    <td>Saturday Night Fever<\/td> \n    <td>1977<\/td>\n    <td>1:15:54<\/td>\n    <td>Disco<\/td>\n    <td>20.6<\/td>\n    <td>40<\/td>\n    <td>15-Nov-77<\/td>\n    <td>Y<\/td>\n    <td>9.0<\/td>\n  <\/tr>\n    <tr>\n    <td>Fleetwood Mac<\/td>\n    <td>Rumours<\/td> \n    <td>1977<\/td>\n    <td>00:40:01<\/td>\n    <td>Soft rock<\/td>\n    <td>27.9<\/td>\n    <td>40<\/td>\n    <td>04-Feb-77<\/td>\n    <td><\/td>\n    <td>9.5<\/td>\n  <\/tr>\n<\/table><\/font>","1270fe86":"Here are some examples of integers. Integers can be negative or positive numbers:\n\nWe can verify this is the case by using, you guessed it, the type() function:\n","2a72d832":"# Sets Content <a id=\"31\"><\/a>\n\nA set is a unique collection of objects in Python. You can denote a set with a curly bracket {}. Python will automatically remove duplicate items:","9c73816f":"After executing the cell above, you should notice that This line prints a string did not appear in the output, because it was a comment (and thus ignored by Python).\n\nThe second line was also not executed because print('Hi') was preceded by the number sign (#) as well! Since this isn't an explanatory comment from the programmer, but an actual line of code, we might say that the programmer commented out that second line of code.","d2ffd1b9":"We can multiply every element in the array by 2:","69d65387":"# Keys <a id=\"28\"><\/a>","1efef679":"We can change the elements in a list:","a21d9b11":"# Sorting <a id=\"19\"><\/a>","935df751":"# Lists <a id=\"21\"><\/a>","cbc1b535":"Code Blocks 1 and Block 2 can now be replaced with code Block 3 and code Block 4.\n\nBlock 3:","af8adc64":"It's a good practice to use meaningful variable names, so you and others can read the code and understand it more easily:","04504918":"# Converting from one object type to a different object type <a id=\"9\"><\/a>","ee1127a8":"In the cells above we added the length of three albums in minutes and stored it in total_min. We then divided it by 60 to calculate total length total_hours in hours. You can also do it all at once in a single expression, as long as you use parenthesis to add the albums length before you divide, as shown below.","6347f661":"Now let you retrieve the keys of the dictionary using the method release_year_dict():","52c6762b":"But if you try to do so with a string that is not a perfect match for a number, you'll get an error. Try the following:","652d250e":"# Range <a id=\"38\"><\/a>\n\nSometimes, you might want to repeat a given operation many times. Repeated executions like this are performed by loops. We will look at two types of loops, for loops and while loops.\n\nBefore we discuss loops lets discuss the range object. It is helpful to think of the range object as an ordered list. For now, let's look at the simplest case. If we would like to generate a sequence that contains three elements ordered from 0 to 2 we simply use the following command:","3c77ef11":"When there are multiple letters, the first letter takes precedence in ordering:","070c0937":"Feel free to change album_year value to other values -- you'll see that the result changes!\n\nNotice that the code in the above indented block will only be executed if the results are True.\n\nAs before, we can add an else block to the if block. The code in the else block will only be executed if the result is False.\n\nSyntax:\n\nif (condition):\n\n# do something\nelse:\n\n# do something else\n\nIf the condition in the if statement is False, the statement after the else block will execute. This is demonstrated in the figure:","618d0ca6":"We can even replicate a string by multiplying with an integer:","c4163912":"Each element of a tuple can be accessed via an index. The following table represents the relationship between the index and the items in the tuple. Each element can be obtained by the name of the tuple followed by a square bracket with the index number:","63cc8183":"# What is for Loop? <a id=\"39\"><\/a>\n\nThe for loop enables you to execute a code block multiple times. For example, you would use this if you would like to print out every element in a list.\nLet's try to use a for loop to print all the years presented in the list dates:\n\nThis can be done as follows:","4b45c3c8":"In addition to writing code, note that it's always a good idea to add comments to your code. It will help others understand what you were trying to accomplish (the reason why you wrote a given snippet of code). Not only does this help other people understand your code, it can also serve as a reminder to you when you come back to it weeks or months later.\n\nTo write comments in Python, use the number symbol # before writing your comment. When you run your code, Python will ignore everything past the # on a given line.","b1537cd0":"**Converting from strings to integers or floats**","69cae056":"Here is an example where issubset() and issuperset() return true:","cd45880d":"<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/LoopsForRange.gif\" width=\"800\" \/>\n\nIn this example we can print out a sequence of numbers from 0 to 7:","0881f4e0":"# Functions <a id=\"41\"><\/a>\n\nA function is a reusable block of code which performs operations specified in the function. They let you break down tasks and allow you to reuse your code in different programs.\n\nThere are two types of functions :\n\n* Pre-defined functions\n* User defined functions\n\n# What is a Function? <a id=\"42\"><\/a>\n\nYou can define functions to provide the required functionality. Here are simple rules to define a function in Python:\n\n* Functions blocks begin def followed by the function name and parentheses ().\n* There are input parameters or arguments that should be placed within these parentheses.\n* You can also define parameters inside these parentheses.\n* There is a body within every function that starts with a colon (:) and is indented.\n* You can also place documentation before the body\n* The statement return exits a function, optionally passing back a value\n\nAn example of a function that adds on to the parameter a prints and returns the output as b:\n","a909ba13":"You only need to consider elements in album_set1; all the elements in album_set2, including the intersection, are not included.\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/SetsLeft.png\" width=\"650\" \/>","c6885bfd":"# Writing comments in Python <a id=\"3\"><\/a>","bb6ed842":"# What are Dictionaries? <a id=\"27\"><\/a>","0433bfd5":"Let us go over set operations, as these can be used to change the set. Consider the set A:","f18dd0bd":"# Dictionaries <a id=\"26\"><\/a>","8c271c2c":"To determine if an album was released before 1980 (~ - 1979) or after 1989 (1990 - ), an or statement can be used. Periods before 1980 ( - 1979) or after 1989 (1990 - ~) satisfy this condition. This is demonstrated in the following figure, the color green in a and b represents periods where the statement is true. The color green in c represents where at least one of the conditions are true.\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/CondsEgTwo.png\" width=\"650\" \/>\n\nThe block of code to perform this check is given by:","79f1e22b":"You can also create a set from a list as follows:","10ae1dce":"Now if you change A, B will not change:","1bc545f9":"<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/LoopsRange.png\" width=\"300\" \/>","69ffd5df":"We can create different functions. For example, we can create a function that multiplies two numbers. The numbers will be represented by the variables a and b:","0bec266a":"**Nested Tuple**","25f7a6f0":"It is helpful to use the following diagram to illustrate the process. On the left side, we see what happens when the condition is True. The person enters the ACDC concert representing the code in the indent being executed; they then move on. On the right side, we see what happens when the condition is False; the person is not granted access, and the person moves on. In this case, the segment of code in the indent does not run, but the rest of the statements are run.","9cfe10b3":"# What is while Loop? <a id=\"40\"><\/a>\n\nAs you can see, the for loop is used for a controlled flow of repetition. However, what if we don't know when we want to stop the loop? What if we want to keep executing a code block until a certain condition is met? The while loop exists as a tool for repeated execution based on a condition. The code block will keep being executed until the given logical condition returns a False boolean value.\n\nLet\u2019s say we would like to iterate through list dates and stop at the year 1973, then print out the number of iterations. This can be done with the following block of code:","883607d7":"The process is summarised in the following animation:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%205\/Images\/NumOneAdd.gif\" width=\"500\" \/>","6c04891a":"<img src =\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/CondsElif.gif\" width=\"650\" \/>","538c1ed4":"Consider the elements shown in the following figure\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%205\/Images\/NumTwoFF.png\" width=\"400\" \/>\n\nWe can access the element as follows","b5d622bc":"<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/ListsRef.png\" width=\"1000\" align=\"center\">\n\n\nInitially, the value of the first element in B is set as hard rock. If we change the first element in A to banana, we get an unexpected side effect. As A and B are referencing the same list, if we change list A, then list B also changes. If we check the first element of B we get banana instead of hard rock:","a9428ac9":"# Sets <a id=\"30\"><\/a>\n\n","792eb065":"The operation is equivalent to vector addition:","f6033d62":"Adding the constant 1 to each element in the array:","a0e254bb":"<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/TuplesIndex.gif\" width=\"750\" align=\"center\">","48be3f0d":"When learning a new programming language, it is customary to start with an \"hello world\" example. As simple as it is, this one line of code will ensure that we know how to print a string in output and how to execute code within cells in a notebook.","d727ef42":"Everyone makes mistakes. For many types of mistakes, Python will tell you that you have made a mistake by giving you an error message. It is important to read error messages carefully to really understand where you made a mistake and how you may go about correcting it.","adcd5bdb":"As before we can access the attributes of the instance of the class by using the dot notation:","73afad23":"<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%202\/Images\/TuplesNeg.png\" width=\"750\" align=\"center\">","0f6e9e55":"Expressions in Python can include operations among compatible types (e.g., integers and floats). For example, basic arithmetic operations like adding multiple numbers:","3f383ba8":"# Types of objects in Python <a id=\"6\"><\/a>","ec24070b":"For each iteration, the value of the variable years behaves like the value of dates[i] in the first example:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/PY0101EN\/Chapter%203\/Images\/LoopsForList.gif\" width=\"800\">","542eba06":"The len() function returns the length of a list or tuple:","4169d438":"We can increase the radius of the circle by applying the method add_radius(). Let increases the radius by 2 and then by 5:","71e0ae6a":"Branching allows us to run different statements for different inputs. It is helpful to think of an if statement as a locked room, if the statement is True we can enter the room and your program will run some predefined tasks, but if the statement is False the program will ignore the task.\n\nFor example, consider the blue rectangle representing an ACDC concert. If the individual is older than 18, they can enter the ACDC concert. If they are 18 or younger than 18 they cannot enter the concert.\n\nUse the condition statements learned before as the conditions need to be checked in the if statement. The syntax is as simple as  if condition statement :, which contains a word if, any condition statement, and a colon at the end. Start your tasks which need to be executed under this condition in a new line with an indent. The lines of code after the colon and with an indent will only be executed when the if statement is True. The tasks will end when the line of code does not contain the indent.\n\nIn the case below, the tasks executed print(\u201cyou can enter\u201d) only occurs if the variable age is greater than 18 is a True case because this line of code has the indent. However, the execution of print(\u201cmove on\u201d) will not be influenced by the if statement.","90a4ce93":"# Comparision Operators <a id=\"35\"><\/a>","42e5c5ec":"The same function can be used for different data types. For example, we can multiply two integers:"}}