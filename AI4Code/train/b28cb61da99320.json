{"cell_type":{"48a30689":"code","090cefb4":"code","7d526276":"code","da4bad07":"code","2c87ac77":"code","ca66708b":"code","b6be01cc":"code","0aa190ca":"code","c0bb845c":"code","4d0245fa":"code","1b83c376":"code","98ce0e36":"code","d5f82d37":"markdown","d41b9ad2":"markdown","32e57948":"markdown","6b06bfb3":"markdown","c02e47a6":"markdown"},"source":{"48a30689":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","090cefb4":"import pandas as pd\ntraining = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf=training\ntraining['train_test'] = 1\ntest['train_test'] = 0\ntest['Survived'] = np.NaN\nall_data = pd.concat([training,test])\nall_data.head()","7d526276":"#find numerical and non-numerical data\nall_data._get_numeric_data()\nnum_cols = ['PassengerId','Pclass','Age','SibSp','Parch','Fare']\ncat_cols = ['Name','Sex','Ticket','Cabin','Embarked']\n","da4bad07":"#visualise numerical data better\nimport matplotlib.pyplot as plt\nfor x in num_cols:\n    plt.hist(all_data[x])\n    plt.title(x)\n    plt.show()","2c87ac77":"#understand how numerical columns correlate to eachother\nimport seaborn as sns\ndf_num = all_data[num_cols]\nsns.heatmap(df_num.corr())","ca66708b":"#check survival rates along variables\npd.pivot_table(all_data,index='Survived',values=['Age','Pclass','Parch','SibSp'])\npd.pivot_table(all_data,index='Survived',columns='Pclass',values='Ticket',aggfunc='count')\npd.pivot_table(all_data,index='Survived',columns='Name',values='Ticket',aggfunc='count')\npd.pivot_table(all_data,index='Survived',columns='Sex',values='Ticket',aggfunc='count')","b6be01cc":"#divide the test data\nfrom sklearn.model_selection import train_test_split\ny = df['Survived']\nX = df.drop('Survived',axis=1)\ny.head()\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,random_state=0)\n             \n# Imputation","0aa190ca":"#apply Encoding to splits by creating pipeline\nimport numpy as np\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import tree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='median')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, num_cols),\n        ('cat', categorical_transformer, cat_cols)\n    ])\n\nrfc = RandomForestClassifier(random_state = 1)\nxgbc = XGBClassifier(random_state =1)\nsvc = SVC(probability = True)\n","c0bb845c":"#Cross Validate data through pipeline - \nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import GridSearchCV \nfrom sklearn.model_selection import RandomizedSearchCV \n\n\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', rfc)\n                             ])\n#my_pipeline.head()\nmy_pipeline.fit(X_train,y_train)\npreds1 = my_pipeline.predict(X_valid)\nmean_absolute_error(y_valid,preds1)\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ntest['train_test'] = 0\ntest.head()\npreds2 = my_pipeline.predict(test)\nprint(preds2)\n\nfinal_data_3 = {'PassengerId': test.PassengerId, 'Survived': preds2}\nsubmission_3 = pd.DataFrame(data=final_data_3)\nsubmission_3.to_csv('sumbission_randomForestClassifiers.csv', index=False)","4d0245fa":"# Bundle preprocessing and XGboost modeling code in a pipeline\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', xgb)\n                             ])\n\nscores2 = cross_val_score(my_pipeline,X_train, y_train,\n                              cv=5)\n\n\nprint(\"MAE scores:\\n\", scores2.mean())","1b83c376":"# Bundle preprocessing and SVC modeling code in a pipeline\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', svc)\n                             ])\n\nscores2 =  cross_val_score(my_pipeline, X_train, y_train,\n                              cv=5)\n\nprint(\"MAE scores:\\n\", scores2.mean())","98ce0e36":"#build voting classifier\nfrom sklearn.ensemble import VotingClassifier\nvoting_clf = VotingClassifier(estimators = [('rf',rf),('svc',svc),('xgb',xgb)], voting = 'soft') \n\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', voting_clf)\n                             ])\n\nscores2 = cross_val_score(my_pipeline,X_train, y_train,\n                              cv=5)\n\nprint(\"MAE scores:\\n\", scores2.mean())","d5f82d37":"**Using Cross Validation to test a Random Forest model and XGBoost Model**","d41b9ad2":"**Clean data **","32e57948":"**Create Pipeline **","6b06bfb3":"**Import the training and testing data into a dataframe and describe it **","c02e47a6":"**Data Preprocesseing **\n1. ****divide the training data into test and validation sets \n* ****Clean the data by imputing the NAN values \n* ****Encode the categorical data with a OneHot Encoder "}}