{"cell_type":{"6b71f27d":"code","e691bead":"code","90de2301":"code","323dc8a2":"code","836e83dd":"code","126f992a":"code","31b69ff3":"code","57d6c871":"code","98d2ba0e":"code","ada22526":"code","ac4ecd3f":"code","39d97dfa":"code","0147d644":"code","3bfe8fc9":"code","1ac17da6":"code","e82238c2":"code","7400d202":"code","0df60eb3":"code","91408299":"code","014dc518":"code","25ab573f":"code","54d07553":"code","10254954":"code","804d1f2e":"code","01655bce":"code","89e00a84":"code","d8c85769":"code","a46884d8":"code","fb08b82b":"code","56ceb46d":"code","26ad5001":"code","09807fe7":"code","c7e7f19f":"code","2c160ce3":"code","4855b1dc":"code","d8ffe5c1":"code","c4682235":"code","a0ff11e3":"code","6a5e0ace":"code","c8fecd57":"code","2be8a057":"code","f4ca1b72":"code","9ee75a57":"code","08924b37":"code","ca0b49db":"code","f5783c03":"code","6618788b":"code","260c871d":"code","6a6207f3":"code","6569e090":"code","1a8c92a2":"code","88e04927":"code","a6a1cfd0":"code","1c3d5aae":"code","2a31370d":"code","71be9327":"code","7331e2ce":"code","d10b8c29":"code","983ebbba":"code","260fb1bf":"code","8a53d839":"code","4dfa590e":"code","16d7f14f":"code","425d233c":"code","85b97836":"code","f773ed5a":"code","6bfe22bf":"code","b38146ca":"code","7dd25c12":"code","e0ed9da8":"code","2198845e":"code","22b0aaa1":"code","c1fd9170":"code","4ab110cd":"code","f4014bf6":"code","33e85cf9":"code","7b763353":"code","d5559df2":"code","415fe691":"code","2b33ce56":"code","f04c2a43":"code","aadce2cb":"code","4473a69f":"code","72c094a3":"code","69015b6b":"code","9b41325d":"code","f34b9fad":"code","c296b897":"code","cd448686":"code","5ebb2c6c":"code","e4f486e3":"code","ce3c5479":"code","c3cb428a":"code","e5706d3c":"code","77622080":"code","82acc50b":"code","23708226":"code","20516f4c":"code","09a4a8cc":"code","7f36e804":"code","7b51f629":"code","8ab9b2f9":"code","b06f83a6":"code","da6dcdc9":"code","f1feedda":"code","721b8639":"code","bb575b45":"code","4092aa00":"code","4ae4ad80":"code","68e1b8cb":"code","91820850":"code","d5eab760":"code","7e063dec":"code","cff95b7e":"code","363c7fb5":"code","07d13725":"code","0018ff66":"code","848eaf79":"code","8ea47aa3":"code","355909cc":"code","7cd65c27":"code","c652a5b8":"code","a5218d95":"code","a38632c5":"code","018a9389":"code","296b43f6":"code","edd669f5":"code","9b426f7a":"code","8cb450ac":"code","1120848c":"code","a8066fe3":"code","be45aefa":"markdown","6329580e":"markdown","69a25e86":"markdown","5b8d95aa":"markdown","35650b2f":"markdown","cfdc417b":"markdown","666c41f0":"markdown","0fe84598":"markdown","01cc5572":"markdown","9252f648":"markdown","2b9aff9f":"markdown","8280eb27":"markdown","04d45d4f":"markdown","0a22a9ab":"markdown","ca496f92":"markdown","1dae0e21":"markdown","9ccb9673":"markdown","57a2e195":"markdown","81a5fced":"markdown","1635ba82":"markdown","cd5ec808":"markdown","2f51d4b7":"markdown","50be8af8":"markdown","89a8bec0":"markdown","55dcf97f":"markdown","d075fac4":"markdown","d2a5649b":"markdown","78b5828b":"markdown","398cfa36":"markdown","7e84c768":"markdown","ffcbe02a":"markdown","3e03a6c3":"markdown","5fc7bf89":"markdown","5d63ae37":"markdown","d305766e":"markdown","8e66f1dd":"markdown","d958c012":"markdown","bee65fb5":"markdown","65a9ef9d":"markdown","d736c039":"markdown","50c4e1fd":"markdown","b8e9e900":"markdown","6aeba6f5":"markdown","1cdbd1cd":"markdown","43edad55":"markdown","03599258":"markdown","b6c696ef":"markdown","7aef5d0a":"markdown","75dca083":"markdown","e9f14abd":"markdown","9bcce482":"markdown","f34b4092":"markdown","d27344d2":"markdown","ed3d3362":"markdown","1eb10c9b":"markdown","ce1b23af":"markdown","d78a8fba":"markdown","d063588b":"markdown","a9441507":"markdown","85ef7840":"markdown","05840ab7":"markdown","f0bb2dfa":"markdown","0a503b22":"markdown","cb22b179":"markdown","8c2a17c1":"markdown","1f0d87e7":"markdown","d709cf9a":"markdown","80e448b4":"markdown","f74afeb0":"markdown","f9a7297e":"markdown","0ff379b4":"markdown","107c5f85":"markdown","d6e6bc7c":"markdown","5a1f6de4":"markdown","ab453bcb":"markdown","fcd978f0":"markdown","b8a8273f":"markdown","e734b562":"markdown","6d3015dd":"markdown","c209e50e":"markdown","ac35d965":"markdown","7779e849":"markdown","b78a5085":"markdown","b49d5792":"markdown","feae931e":"markdown","84a3cc3a":"markdown","ba5abceb":"markdown","29cbbc1c":"markdown","b89af826":"markdown","6e6c3ecb":"markdown","938081d9":"markdown","9b124b23":"markdown","d75d826e":"markdown","2f3137bf":"markdown","f9d5dd0a":"markdown"},"source":{"6b71f27d":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.base import BaseEstimator","e691bead":"#verifica se o arquivo est\u00e1 sendo executado diretamente pelo usu\u00e1rio. caso contr\u00e1rio, est\u00e1 sendo chamado por outro notebook. \nexecucao_direta = (__name__ == '__main__') and ('__file__' not in globals())\n\n#indica se os passos do pipeline devem ser executados nesse caderno\n#True durante o desenvolvimento, False quando estiver sendo utilizado para aprendizado\nexecutar_pipeline = False","90de2301":"# retorna uma lista de True ou False indicando as posi\u00e7\u00f5es onde um elemento de list1 est\u00e1 contido em list2\n# \u00e9 \u00fatil para retornar todas as linhas de um dataframe cuja coluna list1 assuma qualquer dos valores em list2\n# exemplo: dataframe[eachIn(dataframe.coluna, lista)]\ndef eachIn(list1, list2):\n    retorno = []\n    for item in list1:\n        retorno.append(True if (item in list2) else False)\n    return retorno\n\n# retorna as linhas do dataframe cujo valor da coluna esteja contido na lista\ndef dfRowsEachIn(dataframe, column, value_list):\n    return dataframe[eachIn(dataframe[column], value_list)]\n\n# retorna uma lista de True ou False indicando as posi\u00e7\u00f5es onde um elemento de list1 n\u00e3o est\u00e1 contido em list2\n# \u00e9 \u00fatil para retornar todas as linhas de um dataframe cuja coluna list1 nunca assuma qualquer dos valores em list2\n# exemplo: dataframe[notIn(dataframe.coluna, lista)]\ndef notIn(list1, list2):\n    retorno = []\n    for item in list1:\n        retorno.append(False if (item in list2) else True)\n    return retorno","323dc8a2":"candidatos_original = pd.read_csv('..\/input\/dados-dos-candidatos-da-eleio-de-2014\/consulta_cand_2014_BRASIL.csv', sep=';', encoding='iso-8859-1', low_memory=False)\ncandidatos = candidatos_original.copy()\ncandidatos.head()","836e83dd":"candidatos.shape","126f992a":"candidatos.columns","31b69ff3":"candidatos.describe()","57d6c871":"colunas_numericas = candidatos.describe().columns\ncolunas_numericas","98d2ba0e":"colunas_textuais = np.setdiff1d(candidatos.columns, colunas_numericas)\ncolunas_textuais","ada22526":"#essa lista vai guardar todas as colunas que n\u00e3o ser\u00e3o utilizadas nesse estudo\ncolunas_desnecessarias = ['DT_GERACAO', 'HH_GERACAO', 'ANO_ELEICAO', 'CD_TIPO_ELEICAO',\n       'CD_ELEICAO', 'DS_ELEICAO', 'DT_ELEICAO', 'NM_UE', 'CD_CARGO',\n       'NR_CANDIDATO', 'NM_CANDIDATO', 'NM_URNA_CANDIDATO',\n       'NM_SOCIAL_CANDIDATO', 'NR_CPF_CANDIDATO', 'NM_EMAIL',\n       'CD_SITUACAO_CANDIDATURA', 'CD_DETALHE_SITUACAO_CAND', 'NR_PARTIDO',\n       'NM_PARTIDO', 'SQ_COLIGACAO', 'NM_COLIGACAO', 'DS_COMPOSICAO_COLIGACAO',\n       'CD_NACIONALIDADE', 'CD_MUNICIPIO_NASCIMENTO', 'DT_NASCIMENTO',\n       'NR_TITULO_ELEITORAL_CANDIDATO', 'CD_GENERO', 'CD_GRAU_INSTRUCAO',\n       'CD_ESTADO_CIVIL', 'CD_COR_RACA', 'CD_OCUPACAO', 'CD_SIT_TOT_TURNO',\n       'NR_PROTOCOLO_CANDIDATURA', 'NR_PROCESSO ','SQ_CANDIDATO']","ac4ecd3f":"candidatos[candidatos.NM_TIPO_ELEICAO=='ELEI\u00c7\u00c3O SUPLEMENTAR'].head()","39d97dfa":"len(candidatos)","0147d644":"candidatos = candidatos.drop(candidatos[candidatos.NM_TIPO_ELEICAO=='ELEI\u00c7\u00c3O SUPLEMENTAR'].index, axis=\"rows\")\nlen(candidatos)","3bfe8fc9":"colunas_desnecessarias.append('NM_TIPO_ELEICAO')","1ac17da6":"candidatos.loc[:,'NR_DESPESA_MAX_CAMPANHA'].unique()","e82238c2":"candidatos.groupby('NR_DESPESA_MAX_CAMPANHA').NR_DESPESA_MAX_CAMPANHA.count()","7400d202":"#candidatos['SEM_DESPESA_MAX_CAMPANHA'] = [i*1 for i in candidatos['NR_DESPESA_MAX_CAMPANHA']<0]\n#candidatos['SEM_DESPESA_MAX_CAMPANHA']","0df60eb3":"#candidatos['NR_DESPESA_MAX_CAMPANHA'] = [i if i>0 else 0 for i in candidatos['NR_DESPESA_MAX_CAMPANHA']]\n#candidatos['NR_DESPESA_MAX_CAMPANHA']","91408299":"#media = candidatos['NR_DESPESA_MAX_CAMPANHA'].mean()\n#desv_pad = candidatos['NR_DESPESA_MAX_CAMPANHA'].std()\n#candidatos['NR_DESPESA_MAX_CAMPANHA'] = [(i-media)\/desv_pad for i in candidatos['NR_DESPESA_MAX_CAMPANHA']]","014dc518":"#candidatos['NR_DESPESA_MAX_CAMPANHA'].describe()","25ab573f":"class Transformer_nr_despesa:\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        self.media = X['NR_DESPESA_MAX_CAMPANHA'].mean()\n        self.desv_pad = X['NR_DESPESA_MAX_CAMPANHA'].std()\n        return self\n        \n    def transform(self, X, y=None):\n        candidatos = X.copy()\n\n        #adicionando uma coluna para indicar quando o valor de NR_DESPESA_MAX_CAMPANHA n\u00e3o estava dispon\u00edvel\n        candidatos['SEM_DESPESA_MAX_CAMPANHA'] = [i*1 for i in candidatos['NR_DESPESA_MAX_CAMPANHA']<0]\n\n        #s valores negativos da coluna NR_DESPESA_MAX_CAMPANHA ser\u00e3o zerados\n        candidatos['NR_DESPESA_MAX_CAMPANHA'] = [i if i>0 else 0 for i in candidatos['NR_DESPESA_MAX_CAMPANHA']]\n\n        #Normalizando os valores\n        candidatos['NR_DESPESA_MAX_CAMPANHA'] = [(i-self.media)\/self.desv_pad for i in candidatos['NR_DESPESA_MAX_CAMPANHA']]\n        return candidatos","54d07553":"if(executar_pipeline):\n    pipeline = Pipeline(steps=[('nr_despesa',Transformer_nr_despesa())])\n    pipeline.fit(candidatos)\n    candidatos = pipeline.transform(candidatos)","10254954":"#verificando resultado da transforma\u00e7\u00e3o, quando aplicada\ncandidatos['NR_DESPESA_MAX_CAMPANHA'].describe().apply(lambda x: format(x, 'f'))","804d1f2e":"#adicionando a transforma\u00e7\u00e3o no pipeline\npipe_steps = [('nr_despesa',Transformer_nr_despesa())]","01655bce":"#listando os candidatos com idade nula\ncandidatos[candidatos.NR_IDADE_DATA_POSSE.isna()].SQ_CANDIDATO","89e00a84":"candidatos.NR_IDADE_DATA_POSSE.mean()","d8c85769":"class Transformer_nr_idade:\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        self.media = X['NR_IDADE_DATA_POSSE'].mean()\n        return self\n        \n    def transform(self, X, y=None):\n        candidatos = X.copy()\n        candidatos.loc[candidatos.NR_IDADE_DATA_POSSE.isna(),'NR_IDADE_DATA_POSSE'] = self.media\n        return candidatos","a46884d8":"if(executar_pipeline):\n    pipeline = Pipeline(steps=[('nr_idade',Transformer_nr_idade())])\n    pipeline.fit(candidatos)\n    candidatos = pipeline.transform(candidatos)","fb08b82b":"#mostrando as idades nulas depois da opera\u00e7\u00e3o\nif(execucao_direta):\n    print(f\"Idades nulas:{candidatos.NR_IDADE_DATA_POSSE.isna().sum()}\")","56ceb46d":"#adicionando a transforma\u00e7\u00e3o para o pipeline\npipe_steps.append(('nr_idade',Transformer_nr_idade()))","26ad5001":"candidatos.groupby('DS_CARGO').DS_CARGO.count()","09807fe7":"candidatos = candidatos.drop(candidatos[candidatos['DS_CARGO'] == '1\u00ba SUPLENTE'].index, axis=\"rows\")\ncandidatos = candidatos.drop(candidatos[candidatos['DS_CARGO'] == '2\u00ba SUPLENTE'].index, axis=\"rows\")\ncandidatos = candidatos.drop(candidatos[candidatos['DS_CARGO'] == 'VICE-GOVERNADOR'].index, axis=\"rows\")\ncandidatos = candidatos.drop(candidatos[candidatos['DS_CARGO'] == 'VICE-PRESIDENTE'].index, axis=\"rows\")","c7e7f19f":"candidatos.groupby('DS_CARGO').DS_CARGO.count()","2c160ce3":"candidatos.groupby('DS_COR_RACA').DS_COR_RACA.count()","4855b1dc":"candidatos.groupby('DS_DETALHE_SITUACAO_CAND').DS_DETALHE_SITUACAO_CAND.count()","d8ffe5c1":"candidatos.groupby('DS_ESTADO_CIVIL').DS_ESTADO_CIVIL.count()","c4682235":"candidatos.groupby('DS_GENERO').DS_GENERO.count()","a0ff11e3":"candidatos.groupby('DS_GRAU_INSTRUCAO').DS_GRAU_INSTRUCAO.count()","6a5e0ace":"candidatos.groupby('DS_NACIONALIDADE').DS_NACIONALIDADE.count()","c8fecd57":"candidatos.DS_OCUPACAO.value_counts()","2be8a057":"candidatos.DS_OCUPACAO.describe()","f4ca1b72":"(candidatos.DS_OCUPACAO == None).sum()","9ee75a57":"# esse transformador modifica as ocupa\u00e7\u00f5es menos frequentes para OUTROS\nclass Transformer_ds_ocupacao(BaseEstimator):\n    def __init__(self, min_value=1):\n        self.min_value = min_value\n    \n    def fit(self, X, y=None):\n        ocupacoes = X.DS_OCUPACAO.value_counts()\n        self.ocupacoes_comuns = ocupacoes[ocupacoes>=self.min_value].index\n        return self\n        \n    def transform(self, X, y=None):\n        candidatos = X.copy()       \n        candidatos.loc[notIn(candidatos.DS_OCUPACAO, self.ocupacoes_comuns),'DS_OCUPACAO'] = \"OUTROS\"\n        return candidatos","08924b37":"if(executar_pipeline):\n    pipeline = Pipeline(steps=[('ds_ocupacao',Transformer_ds_ocupacao(min_value=1))])\n    pipeline.fit(candidatos)\n    candidatos = pipeline.transform(candidatos)","ca0b49db":"#adicionando a transforma\u00e7\u00e3o ao pipeline\npipe_steps.append(('ds_ocupacao',Transformer_ds_ocupacao()))","f5783c03":"candidatos.groupby('DS_SITUACAO_CANDIDATURA').DS_SITUACAO_CANDIDATURA.count()","6618788b":"inaptos = candidatos[candidatos.DS_SITUACAO_CANDIDATURA=='INAPTO']\ninaptos.groupby('DS_SIT_TOT_TURNO').DS_SIT_TOT_TURNO.count()","260c871d":"candidatos.groupby('NM_MUNICIPIO_NASCIMENTO').NM_MUNICIPIO_NASCIMENTO.count()","6a6207f3":"candidatos.NM_MUNICIPIO_NASCIMENTO.describe()","6569e090":"candidatos.loc[:,['CD_MUNICIPIO_NASCIMENTO','NM_MUNICIPIO_NASCIMENTO']]","1a8c92a2":"candidatos.CD_MUNICIPIO_NASCIMENTO.describe()","88e04927":"colunas_desnecessarias.append('NM_MUNICIPIO_NASCIMENTO')","a6a1cfd0":"candidatos.groupby('SG_PARTIDO').SG_PARTIDO.count()","1c3d5aae":"candidatos.groupby('SG_UE').SG_UE.count()","2a31370d":"candidatos.groupby('SG_UF').SG_UF.count()","71be9327":"candidatos[candidatos.SG_UE != candidatos.SG_UF].SG_UF.sum()","7331e2ce":"colunas_desnecessarias.append('SG_UF')","d10b8c29":"candidatos.groupby('SG_UF_NASCIMENTO').SG_UF_NASCIMENTO.count()","983ebbba":"#candidatos.SG_UF_NASCIMENTO = candidatos.SG_UF_NASCIMENTO.replace('ZZ','N\u00e3o divulg\u00e1vel')","260fb1bf":"class Transformer_uf_nascimento:\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        return self\n        \n    def transform(self, X, y=None):\n        candidatos = X.copy()\n\n        #trocando os valores ZZ por um r\u00f3tulo mais intelig\u00edvel\n        candidatos.SG_UF_NASCIMENTO = candidatos.SG_UF_NASCIMENTO.replace('ZZ','N\u00e3o divulg\u00e1vel')\n\n        return candidatos","8a53d839":"if(executar_pipeline):\n    pipeline = Pipeline(steps=[('uf_nascimento',Transformer_uf_nascimento())])\n    pipeline.fit(candidatos)\n    candidatos = pipeline.transform(candidatos)","4dfa590e":"candidatos[candidatos.SG_UF_NASCIMENTO=='ZZ'].SG_UF_NASCIMENTO.count()","16d7f14f":"#colocando a transforma\u00e7\u00e3o no pipeline\npipe_steps.append(('uf_nascimento',Transformer_uf_nascimento()))","425d233c":"candidatos.groupby('ST_DECLARAR_BENS').ST_DECLARAR_BENS.count()","85b97836":"candidatos.groupby('ST_REELEICAO').ST_REELEICAO.count()","f773ed5a":"candidatos.groupby('TP_ABRANGENCIA').TP_ABRANGENCIA.count()","6bfe22bf":"len(candidatos)","b38146ca":"colunas_desnecessarias.append('TP_ABRANGENCIA')","7dd25c12":"candidatos.groupby('TP_AGREMIACAO').TP_AGREMIACAO.count()","e0ed9da8":"candidatos.groupby('DS_SIT_TOT_TURNO').DS_SIT_TOT_TURNO.count()","2198845e":"len(candidatos)","22b0aaa1":"#descobrindo o n\u00famero de candidatos que aparecem mais de uma vez no dataset\ncontagem = candidatos.SQ_CANDIDATO.value_counts()\nrepetidos = contagem[contagem==2]\nlen(repetidos)","c1fd9170":"#verificando a situa\u00e7\u00e3o de totaliza\u00e7\u00e3o apenas dos candidatos repetidos\ncand_repetidos = candidatos[eachIn(candidatos.SQ_CANDIDATO, repetidos)]\ncand_repetidos.DS_SIT_TOT_TURNO.value_counts()","4ab110cd":"#verificando que candidatos s\u00e3o esses com situa\u00e7\u00e3o nula\ncand_nulo = cand_repetidos[cand_repetidos.DS_SIT_TOT_TURNO=='#NULO#'].SQ_CANDIDATO.tolist()\ncand_repetidos[eachIn(cand_repetidos.SQ_CANDIDATO, cand_nulo)]","f4014bf6":"#atribuindo '2\u00ba TURNO' para os candidatos com situa\u00e7\u00e3o nula\ncandidatos.loc[7863,'DS_SIT_TOT_TURNO'] = '2\u00ba TURNO'\ncandidatos.loc[12133,'DS_SIT_TOT_TURNO'] = '2\u00ba TURNO'","33e85cf9":"candidatos = candidatos.drop(candidatos[candidatos.DS_SIT_TOT_TURNO=='2\u00ba TURNO'].index, axis='rows')","7b763353":"#mostrando o n\u00famero de candidatos que aparecem duas vezes no dataset\nrepetidos = candidatos.SQ_CANDIDATO.value_counts()[candidatos.SQ_CANDIDATO.value_counts()==2]\nif(execucao_direta):\n    print(f\"repetidos: {len(repetidos)}\")\ncand_repetidos = candidatos[eachIn(candidatos.SQ_CANDIDATO, repetidos)]\ncand_repetidos.DS_SIT_TOT_TURNO.value_counts()","d5559df2":"cand_repetidos.loc[:,['NM_CANDIDATO','SQ_CANDIDATO','DS_CARGO','SG_UF','NM_TIPO_ELEICAO','NR_TURNO','DS_SIT_TOT_TURNO']].sort_values('NM_CANDIDATO')","415fe691":"eliminar = candidatos[(candidatos.SQ_CANDIDATO==90000000608) & (candidatos.NR_TURNO==1)].index\ncandidatos = candidatos.drop(eliminar, axis=\"rows\")\neliminar = candidatos[(candidatos.SQ_CANDIDATO==90000000637) & (candidatos.NR_TURNO==1)].index\ncandidatos = candidatos.drop(eliminar, axis=\"rows\")","2b33ce56":"#mostrando o n\u00famero de candidatos que aparecem duas vezes no dataset\nrepetidos = candidatos.SQ_CANDIDATO.value_counts()[candidatos.SQ_CANDIDATO.value_counts()==2]\nif(execucao_direta):\n    print(f\"repetidos: {len(repetidos)}\")\ncand_repetidos = candidatos[eachIn(candidatos.SQ_CANDIDATO, repetidos)]\ncand_repetidos.DS_SIT_TOT_TURNO.value_counts()","f04c2a43":"colunas_desnecessarias.append('NR_TURNO')","aadce2cb":"#candidatos['DS_SIT_TOT_TURNO'] = candidatos.DS_SIT_TOT_TURNO.replace('#NULO#','N\u00c3O ELEITO')\n#candidatos['DS_SIT_TOT_TURNO'] = candidatos.DS_SIT_TOT_TURNO.replace('SUPLENTE','N\u00c3O ELEITO')\n#candidatos['DS_SIT_TOT_TURNO'] = candidatos.DS_SIT_TOT_TURNO.replace('ELEITO POR M\u00c9DIA','ELEITO')\n#candidatos['DS_SIT_TOT_TURNO'] = candidatos.DS_SIT_TOT_TURNO.replace('ELEITO POR QP','ELEITO')\n#candidatos.groupby('DS_SIT_TOT_TURNO').DS_SIT_TOT_TURNO.count()","4473a69f":"candidatos.groupby('DS_SIT_TOT_TURNO').DS_SIT_TOT_TURNO.count()","72c094a3":"class Transformer_ds_turno:\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        return self\n        \n    def transform(self, X, y=None):\n        candidatos = X.copy()\n\n        #Reduzindo todas as poss\u00edveis classifica\u00e7\u00f5es s\u00f3 para ELEITO e N\u00c3O ELEITO\n        candidatos = candidatos.replace('#NULO#','N\u00c3O ELEITO')\n        candidatos = candidatos.replace('SUPLENTE','N\u00c3O ELEITO')\n        candidatos = candidatos.replace('ELEITO POR M\u00c9DIA','ELEITO')\n        candidatos = candidatos.replace('ELEITO POR QP','ELEITO')\n\n        return candidatos","69015b6b":"if(executar_pipeline):\n    pipeline = Pipeline(steps=[('ds_turno',Transformer_ds_turno())])\n    pipeline.fit(candidatos)\n    candidatos = pipeline.transform(candidatos)","9b41325d":"candidatos.groupby('DS_SIT_TOT_TURNO').DS_SIT_TOT_TURNO.count()","f34b9fad":"#essa transforma\u00e7\u00e3o n\u00e3o ser\u00e1 adicionada ao pipeline porque \u00e9 aplicada somente sobre a coluna target\n#sendo assim, rodo esse transformador manualmente logo antes do pipeline","c296b897":"candidatos['DS_SIT_TOT_TURNO'].value_counts()\/len(candidatos)","cd448686":"eleitos = pd.read_csv('..\/input\/dados-dos-candidatos-da-eleio-de-2014\/resultado_eleicao.csv', sep=';', encoding='iso-8859-1')\neleitos.head()","5ebb2c6c":"#o n\u00famero de eleitos segundo TSE\nlen(eleitos)","e4f486e3":"#O n\u00famero de eleitos no meu dataset\ncand_eleitos = candidatos[candidatos.DS_SIT_TOT_TURNO=='ELEITO']\nlen(cand_eleitos)","ce3c5479":"#mostrando os candidatos que considerei eleitos e n\u00e3o est\u00e3o na lista do TSE\ncand_eleitos[notIn(cand_eleitos.NM_CANDIDATO, eleitos['Nome do candidato'].tolist())].loc[:,['NM_CANDIDATO','NR_CPF_CANDIDATO','DS_CARGO','DS_SIT_TOT_TURNO']].sort_values('NM_CANDIDATO')","c3cb428a":"#mostrando os candidatos eleitos do TSE que n\u00e3o foram achados o meu dataset\neleitos[notIn(eleitos['Nome do candidato'], cand_eleitos.NM_CANDIDATO.tolist())]","e5706d3c":"#corrigindo o MARQUES BATISTA DE ABREU\ncandidatos.loc[15903,'DS_SIT_TOT_TURNO'] = 'N\u00c3O ELEITO'","77622080":"candidatos[candidatos.NM_CANDIDATO=='M\u00c1RCIO JOS\u00c9 MACHADO OLIVEIRA'].loc[:,['NM_CANDIDATO','NR_CPF_CANDIDATO','DS_CARGO','DS_SIT_TOT_TURNO']].sort_values('NM_CANDIDATO')","82acc50b":"#corrigindo o M\u00c1RCIO JOS\u00c9 MACHADO OLIVEIRA\ncandidatos.loc[16296,'DS_SIT_TOT_TURNO'] = 'ELEITO'","23708226":"candidatos.loc[candidatos.DS_SIT_TOT_TURNO=='ELEITO'].DS_SIT_TOT_TURNO.count()","20516f4c":"candidatos = pd.concat([candidatos, candidatos.loc[candidatos.DS_SIT_TOT_TURNO=='ELEITO']], ignore_index=True)\ncandidatos = pd.concat([candidatos, candidatos.loc[candidatos.DS_SIT_TOT_TURNO=='ELEITO POR QP']], ignore_index=True)\ncandidatos = pd.concat([candidatos, candidatos.loc[candidatos.DS_SIT_TOT_TURNO=='ELEITO POR M\u00c9DIA']], ignore_index=True)","09a4a8cc":"candidatos.loc[candidatos.DS_SIT_TOT_TURNO=='ELEITO'].DS_SIT_TOT_TURNO.count()","7f36e804":"len(candidatos)","7b51f629":"nao_eleitos = candidatos.loc[candidatos.DS_SIT_TOT_TURNO=='N\u00c3O ELEITO'].sample(3000, random_state=2) ","8ab9b2f9":"eleitos = candidatos.loc[eachIn(candidatos.DS_SIT_TOT_TURNO,['ELEITO','ELEITO POR QP','ELEITO POR M\u00c9DIA'])]","b06f83a6":"candidatos = pd.concat([nao_eleitos, eleitos])","da6dcdc9":"candidatos.shape","f1feedda":"candidatos.columns","721b8639":"#candidatos = candidatos.drop(colunas_desnecessarias, axis=\"columns\")","bb575b45":"class Transformer_drop_columns(BaseEstimator):\n    def __init__(self, columns):\n        self.columns = columns\n    \n    def fit(self, X, y=None):\n        return self\n        \n    def transform(self, X, y=None):\n        candidatos = X.copy()\n        candidatos = candidatos.drop(self.columns, axis=\"columns\")\n        return candidatos","4092aa00":"if(executar_pipeline):\n    pipeline = Pipeline(steps=[('drop_columns',Transformer_drop_columns(colunas_desnecessarias))])\n    pipeline.fit(candidatos)\n    candidatos = pipeline.transform(candidatos)","4ae4ad80":"candidatos.columns","68e1b8cb":"#adicionando essa transforma\u00e7\u00e3o no pipeline\npipe_steps.append(('drop_columns',Transformer_drop_columns(colunas_desnecessarias)))","91820850":"import pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import metrics\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.preprocessing import  OneHotEncoder\nfrom sklearn import set_config\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.base import TransformerMixin\n\nimport matplotlib.pyplot as plt\n\nfrom IPython.core.display import display, HTML","d5eab760":"#mostra erro se o pipeline j\u00e1 foi executado no pr\u00e9-processamento\nif(executar_pipeline):\n    stop","7e063dec":"#mostra o tamanho do dataset\ncandidatos.shape","cff95b7e":"#separa as vari\u00e1veis independentes\nfeatures = candidatos.drop('DS_SIT_TOT_TURNO', axis=\"columns\")\nfeatures.shape","363c7fb5":"#separa as vari\u00e1veis dependentes\ntarget = candidatos.loc[:,'DS_SIT_TOT_TURNO']\n#essa transforma\u00e7\u00e3o reduz o n\u00famero de categorias nos resultados para ELEITO e N\u00c3O ELEITO apenas\ntargetTransformer = Transformer_ds_turno()\ntargetTransformer.fit(target)\ntarget = targetTransformer.transform(target)\ntarget.shape","07d13725":"#mostra os passos de pr\u00e9-processamento configurados no outro caderno\npipe_steps","0018ff66":"preprocessamento = Pipeline(steps=pipe_steps)","848eaf79":"onehotencoder = make_column_transformer((OneHotEncoder(handle_unknown='error', drop='first'), ['DS_CARGO','DS_COR_RACA','DS_DETALHE_SITUACAO_CAND','DS_ESTADO_CIVIL',\n                                               'DS_GENERO','DS_GRAU_INSTRUCAO','DS_NACIONALIDADE','DS_OCUPACAO',\n                                               'DS_SITUACAO_CANDIDATURA','SG_PARTIDO','SG_UE','SG_UF_NASCIMENTO',\n                                               'ST_DECLARAR_BENS','ST_REELEICAO','TP_AGREMIACAO']), remainder='passthrough')","8ea47aa3":"#separa\u00e7\u00e3o dos dados de teste e treinamento\nX_treino, X_teste, y_treino, y_teste = train_test_split(features, target, test_size=0.2, shuffle=True, random_state=123, stratify=target) ","355909cc":"class Redefine_Desconhecido(BaseEstimator, TransformerMixin):\n    def __init__(self, mapa=None):\n        self.mapa = mapa\n    \n    def fit(self, X, y=None):\n        self.classes = {}\n        for coluna in sorted(self.mapa.keys()):\n            self.classes[coluna] = X.loc[:,coluna].unique()\n        return self\n        \n    def transform(self, X, y=None):\n        X_ = X.copy()   \n        for coluna in sorted(self.mapa.keys()):\n            X_.loc[notIn(X_.loc[:,coluna], self.classes[coluna]),coluna] = self.mapa[coluna]\n        return X_","7cd65c27":"#fun\u00e7\u00e3o que realiza a cria\u00e7\u00e3o de um Grid Search com os par\u00e2metros configurados, roda o grid e apresenta uma avalia\u00e7\u00e3o preliminar\ndef avaliacao_grid_search(parameters):\n    pipeline = Pipeline(steps=[('preprocessamento',preprocessamento),\n                           ('redefine_desconhecido',Redefine_Desconhecido({'DS_DETALHE_SITUACAO_CAND':'INDEFERIDO', 'DS_CARGO':'DEPUTADO ESTADUAL', 'DS_COR_RACA':'BRANCA',\n                         'DS_ESTADO_CIVIL':'CASADO(A)', 'DS_GENERO':'MASCULINO', 'DS_GRAU_INSTRUCAO':'SUPERIOR COMPLETO',\n                         'DS_NACIONALIDADE':'BRASILEIRA NATA', 'DS_SITUACAO_CANDIDATURA':'APTO', 'SG_PARTIDO':'PT',\n                         'SG_UE':'SP', 'SG_UF_NASCIMENTO':'SP', 'ST_DECLARAR_BENS':'N', 'ST_REELEICAO':'N'})),\n                          ('onehotencoder', onehotencoder),\n                          ('classificador', DecisionTreeClassifier())])\n    \n    grid_search = GridSearchCV(pipeline, parameters, n_jobs=-1, verbose=True, cv=3)\n    \n    grid_search.fit(X_treino, y_treino)\n        \n    display(HTML('<font size=\"4\"><br\/><bold>Melhores par\u00e2metros<\/bold><\/font>'))\n    best_parameters = grid_search.best_estimator_.get_params()\n    for param_name in sorted(parameters.keys()):\n        print(\"\\t%s: %r\" % (param_name, best_parameters[param_name]))\n        \n    display(HTML('<font size=\"4\"><br\/><bold>Desempenho nos dados de treinamento<\/bold><\/font>'))\n    media = grid_search.cv_results_['mean_test_score'][grid_search.best_index_]\n    desvio = grid_search.cv_results_['std_test_score'][grid_search.best_index_]\n    print(f\"\\tCross-validation: {media} (+\/- {desvio})\")\n        \n    display(HTML('<font size=\"4\"><br\/><bold>Desempenho nos dados de teste<\/bold><\/font>'))\n    print(f\"\\tAcur\u00e1cia: {grid_search.score(X_teste, y_teste)}\")\n    print(f\"\\tF1_score: {metrics.f1_score(y_teste.tolist(), grid_search.predict(X_teste),pos_label='ELEITO')}\")\n    \n    display(HTML('<font size=\"4\"><br\/><bold>Matriz de confus\u00e3o<\/bold><\/font>'))\n    plot_confusion_matrix(grid_search, X_teste, y_teste);\n    \n    return grid_search","c652a5b8":"parameters = {\n    'classificador':[LogisticRegression(solver='lbfgs', multi_class='auto')],\n    'classificador__max_iter': (2, 50, 100, 1000, 5000, 10000),\n    'classificador__random_state': [123]\n}","a5218d95":"grid_search = avaliacao_grid_search(parameters)","a38632c5":"parameters = {\n    'classificador':[KNeighborsClassifier()],\n    'classificador__n_neighbors': (5, 10, 20, 40, 80),\n    'preprocessamento__ds_ocupacao__min_value': (1,2,3,4,5,10,20,100)\n}","018a9389":"grid_search = avaliacao_grid_search(parameters)","296b43f6":"parameters = {\n    'preprocessamento__ds_ocupacao__min_value': [1,2,10,50,100,200,500,1000,2000,4000],\n    'classificador':[DecisionTreeClassifier()],\n    'classificador__min_samples_split': (5, 10, 20, 40, 80),\n    'classificador__max_depth': (None, 3, 4, 5, 6),\n    'classificador__random_state': [123]\n}","edd669f5":"grid_search = avaliacao_grid_search(parameters)","9b426f7a":"#mostrar a imagem do pipeline\nset_config(display='diagram')\ngrid_search","8cb450ac":"#gera o nome das colunas de maneira mais leg\u00edvel considerando o One Hot Encoder\nonehotencoder_treinado = grid_search.best_estimator_.named_steps['onehotencoder'].transformers_[0][1]\ncolunas = onehotencoder_treinado.get_feature_names(['CARGO','RACA','DET_SIT_CAND','ESTADO_CIVIL',\n                                               'GENERO','INSTRUCAO','NACIONALIDADE','OCUPACAO',\n                                               'SIT_CANDIDATURA','PARTIDO','UE','NASCIMENTO',\n                                               'BENS_DECLARAR','REELEICAO','AGREMIACAO'])\n\ncolunas_originais = ['NR_DESPESA_MAX_CAMPANHA','NR_IDADE_DATA_POSSE', 'SEM_DESPESA_MAX_CAMPANHA']\n\ncolunas = colunas.tolist()\ncolunas.extend(colunas_originais)","1120848c":"#mostra os primeiros n\u00f3s da \u00e1rvore de decis\u00e3o\narvore = grid_search.best_estimator_.named_steps['classificador']\nplt.subplots(figsize=(20, 20))\nplot_tree(arvore, max_depth=3, filled=True, fontsize=12, feature_names=colunas, class_names=[\"ELEITO\",\"N\u00c3O ELEITO\"])\nplt.show()","a8066fe3":"print(\"O caderno foi executado com \u00eaxito!\") ","be45aefa":"Vou tratar os dados dessa coluna agora.","6329580e":"## coluna DS_CARGO","69a25e86":"# Avalia\u00e7\u00e3o geral do dataset\n\nAlgumas observa\u00e7\u00f5es para garantir que os dados foram trazidos corretamente","5b8d95aa":"Os dados de munic\u00edpios parecem um pouco sujos e dispersos. Vou ver se a coluna de c\u00f3digo pode ser mais \u00fatil.","35650b2f":"## Coluna DS_DETALHE_SITUACAO_CAND","cfdc417b":"# Parte I - Pr\u00e9-processamento","666c41f0":"<font size=\"5\">**Escopo e limita\u00e7\u00f5es**<\/font>\n\nApenas os dados da elei\u00e7\u00e3o de 2014 foram avaliados, permitindo \"prever\" o resultado das urnas dentre desse ano. Devido \u00e0s limita\u00e7\u00f5es de tempo n\u00e3o \u00e9 objetivo do projeto fazer um classificador capaz de prever o resultado em outras elei\u00e7\u00f5es, especialmente em elei\u00e7\u00f5es futuras. \n\nA avalia\u00e7\u00e3o do classificador em outros processos eleitorais \u00e9, entretanto, um excelente teste a se fazer e ficar\u00e1 na lista de pend\u00eancias para trabalhos futuros.","0fe84598":"## Coluna DS_ESTADO_CIVIL","01cc5572":"## Coluna NM_TIPO_ELEICAO","9252f648":"# Avalia\u00e7\u00e3o geral das colunas do DataFrame\n\nUma primeira vis\u00e3o para conhecer as colunas do dataset","2b9aff9f":"Vou aceitar os dados do jeito que est\u00e3o.","8280eb27":"# Montagem do pipeline e separa\u00e7\u00e3o de conjunto de teste","04d45d4f":"Processamento para considerar qualquer ocupa\u00e7\u00e3o com menos de N candidatos como OUTROS","0a22a9ab":"# Tratamento de colunas\n\nDetalhamento das colunas uma a uma, com pr\u00e9-processamento onde foi necess\u00e1rio","ca496f92":"Os valores negativos da coluna NR_DESPESA_MAX_CAMPANHA ser\u00e3o zerados.","1dae0e21":"![labels.jpg](attachment:labels.jpg)","9ccb9673":"Vendo o resumo da base carregada. Talvez isso ajude a identificar algo interessante.","57a2e195":"# Configura\u00e7\u00f5es iniciais\n\nRealiza\u00e7\u00e3o de imports, configura\u00e7\u00e3o do caderno, carga de dataset e outras opera\u00e7\u00f5es de inicializa\u00e7\u00e3o.","81a5fced":"\u00c9 um dataset muito completo, com diversos dados dos candidatos. Segue uma listagem de apenas alguns:\n\n- Cargo ao qual concorre\n- UF de nascimento\n- Idade\n- G\u00eanero\n- Grau de instru\u00e7\u00e3o\n- Estado civil\n- Ocupa\u00e7\u00e3o\n- ...","1635ba82":"### Eliminando candidatos repetidos","cd5ec808":"Verificando se deu certo.","2f51d4b7":"Vou aceitar os dados do jeito que est\u00e3o.","50be8af8":"# Introdu\u00e7\u00e3o\n\nEsse projeto teve como objetivo avaliar o processo eleitoral de 2014 e identificar o grau de determinismo entre as caracter\u00edsticas pr\u00e9vias de um candidato e o seu resultado nas urnas. ","89a8bec0":"## Coluna TP_AGREMIACAO","55dcf97f":"Encapsulando as transforma\u00e7\u00f5es dentro de um Transformador Personalizado para usar no pipeline","d075fac4":"# Regress\u00e3o Log\u00edstica","d2a5649b":"## Coluna DS_SITUACAO_CANDIDATURA","78b5828b":"Vou eliminar os registros do tipo ELEI\u00c7\u00c3O SUPLEMENTAR porque n\u00e3o t\u00eam interesse para esse estudo.","398cfa36":"### Reduzindo o n\u00famero de classifica\u00e7\u00f5es alvo","7e84c768":"# \u00c1rvore de decis\u00e3o","ffcbe02a":"Agora que eliminamos algumas linhas com base na coluna NM_TIPO_ELEICAO, ela n\u00e3o ser\u00e1 mais utilizada","3e03a6c3":"## Conclus\u00e3o\n","5fc7bf89":"Algumas configura\u00e7\u00f5es de execu\u00e7\u00e3o:","5d63ae37":"Vou aceitar os dados do jeito que est\u00e3o.","d305766e":"## Coluna DS_COR_RACA","8e66f1dd":"Vou aceitar os dados do jeito que est\u00e3o.","d958c012":"### Verificando se o meu r\u00f3tulo ELEITO \u00e9 confi\u00e1vel","bee65fb5":"## Coluna ST_REELEICAO","65a9ef9d":"Por enquanto vou eliminar essa coluna. Depois penso melhor sobre isso.","d736c039":"## Coluna SG_UE","50c4e1fd":"Para a interpreta\u00e7\u00e3o da \u00e1rvore iremos considerar as seguintes classes (resultado do classificador):","b8e9e900":"Tamb\u00e9m resolvi eliminar a coluna NR_TURNO porque estou mantendo apenas uma \u00fanica linha de registro por candidato, independente do turno, para declarar o resultado dele na elei\u00e7\u00e3o. Al\u00e9m disso, indicar que o candidato foi para o segundo turno j\u00e1 \u00e9 um vazamento de informa\u00e7\u00e3o do futuro para o treinamento.","6aeba6f5":"As colunas SG_UE e SG_UF s\u00e3o sempre iguais. Vou eliminar a coluna SG_UF.","1cdbd1cd":"Mostrando somente os nomes das colunas num\u00e9ricas","43edad55":"### Oversampling de ELEITO","03599258":"## Coluna NM_MUNICIPIO_NASCIMENTO","b6c696ef":"# Resultado","7aef5d0a":"## Coluna DS_OCUPACAO","75dca083":"Essa coluna n\u00e3o est\u00e1 agregando valor. Vou eliminar.","e9f14abd":"Nas elei\u00e7\u00f5es de 2014 havia um conjunto de caracter\u00edsticas pessoais que poderiam favorecer ou dificultar a elei\u00e7\u00e3o de determinado candidato, notadamente o fato do candidato ter bens a declarar e tamb\u00e9m j\u00e1 ser ocupante de uma cadeira de deputado.","9bcce482":"# Desprezar colunas desnecess\u00e1rias\n\nElimina\u00e7\u00e3o de algumas colunas com base na leitura do dicion\u00e1rio de dados e avalia\u00e7\u00e3o das colunas na se\u00e7\u00e3o anterior.","f34b4092":"Em linhas gerais, qualquer resultado abaixo de 93% n\u00e3o \u00e9 interessante.","d27344d2":"## Coluna SG_UF_NASCIMENTO","ed3d3362":"Importando primeiro a base de candidatos para dar uma olhada no que posso fazer com ela. Os dados originais foram obtidos no Dados.gov.br no seguinte endere\u00e7o: http:\/\/dados.gov.br\/dataset\/perfil-dos-candidatos-em-cada-eleicao\/resource\/d56a9c80-9e7a-44fc-ae9e-e4d5ea74f2ed","1eb10c9b":"## Visualiza\u00e7\u00e3o e interpreta\u00e7\u00e3o da \u00e1rvore","ce1b23af":"Pela an\u00e1lise dos registros acima, percebe-se que os nulos deveriam ser segundo turno","d78a8fba":"# Parte II - Aprendizado","d063588b":"## Coluna DS_SIT_TOT_TURNO\nEssa \u00e9 a coluna de resultado da elei\u00e7\u00e3o. \u00c9 o que o algoritmo deve aprender.","a9441507":"N\u00famero de registros depois de eliminar a Elei\u00e7\u00e3o Suplementar:","85ef7840":"Definindo alguma fun\u00e7\u00f5es utilit\u00e1rias","05840ab7":"# Configura\u00e7\u00f5es iniciais\n\nRealiza\u00e7\u00e3o de imports, configura\u00e7\u00e3o do caderno, carga de dataset e outras opera\u00e7\u00f5es de inicializa\u00e7\u00e3o.","f0bb2dfa":"Padronizando os valores.","0a503b22":"### Undersampling de N\u00c3O ELEITO","cb22b179":"Achei estranho esse registro do candidato que \u00e9 considerado INAPTO, mas est\u00e1 como suplente. Apesar disso, vou aceitar os dados como est\u00e3o. ","8c2a17c1":"## Visualiza\u00e7\u00e3o do Pipeline","1f0d87e7":"Vou aceitar os dados do jeito que est\u00e3o.","d709cf9a":"Vou aceitar os dados do jeito que est\u00e3o.","80e448b4":"Vou retirar os candidatos a vagas de substitui\u00e7\u00e3o. O motivo disso \u00e9 que eles n\u00e3o s\u00e3o cabe\u00e7a de chapa e geralmente n\u00e3o s\u00e3o votados. O eleitor costuma escolher o candidato principal. ","f74afeb0":"Eliminando as linhas indicando que o candidato foi para o segundo turno. Vou considerar no modelo apenas o resultado final da elei\u00e7\u00e3o.","f9a7297e":"# Pend\u00eancias\n\nA lista dos pontos conhecidos de melhoria para esse caderno.","0ff379b4":"A coluna de c\u00f3digo n\u00e3o vai ter utilidade, j\u00e1 que todos os valores est\u00e3o iguais.","107c5f85":"## Coluna DS_NACIONALIDADE","d6e6bc7c":"## Coluna SG_PARTIDO","5a1f6de4":"## Coluna SG_UF","ab453bcb":"Avalinando rapidamente a taxa de acerto m\u00ednima aceit\u00e1vel","fcd978f0":"## Coluna TP_ABRANGENCIA","b8a8273f":"Vou aceitar os dados do jeito que est\u00e3o.","e734b562":"Vou aceitar os dados do jeito que est\u00e3o.","6d3015dd":"# KNN","c209e50e":"N\u00famero de registros antes de eliminar a Elei\u00e7\u00e3o Suplementar:","ac35d965":"* Fazer a padroniza\u00e7\u00e3o da despesa de campanha utilizando alguma fun\u00e7\u00e3o do sklearn\n* restaurar todos os functiontransformers que eu transformei em classes. tentar simplificar as coisas.\n* utilizar a coluna de escolaridade como uma coluna ordenada\n* passar a utilizar a coliga\u00e7\u00e3o no c\u00e1lculo\n* incluir as informa\u00e7\u00f5es de bens de cada candidato\n* reduzir a dimensionalidade com PCA\n* Testar o classificador com dados de outras elei\u00e7\u00f5es","7779e849":"## Coluna NR_IDADE_DATA_POSSE","b78a5085":"## coluna NR_DESPESA_MAX_CAMPANHA","b49d5792":"Adicionando uma coluna para indicar quando o valor de NR_DESPESA_MAX_CAMPANHA n\u00e3o estava dispon\u00edvel.","feae931e":"## Coluna DS_GENERO","84a3cc3a":"## Coluna DS_GRAU_INSTRUCAO","ba5abceb":"Vou aceitar os dados do jeito que est\u00e3o.","29cbbc1c":"Mostrando somente os nomes das colunas textuais","b89af826":"Reduzindo todas as poss\u00edveis classifica\u00e7\u00f5es s\u00f3 para ELEITO e N\u00c3O ELEITO","6e6c3ecb":"Carregando uma base de candidatos eleitos obtida em http:\/\/www.tse.jus.br\/eleicoes\/estatisticas\/estatisticas-eleitorais","938081d9":"## Coluna ST_DECLARAR_BENS","9b124b23":"![Elei\u00e7\u00f5es](https:\/\/www.paiquere.com.br\/wp-content\/uploads\/2019\/10\/elei%C3%A7%C3%A3o-conselheiro-tutelar-foto-ilustrativa-elei%C3%A7%C3%B5es-2018.com-P.jpg)","d75d826e":"Eliminando candidatos repetidos:","2f3137bf":"Vou aceitar os dados do jeito que est\u00e3o.","f9d5dd0a":"Vou aceitar os dados do jeito que est\u00e3o."}}