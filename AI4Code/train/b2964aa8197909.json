{"cell_type":{"7001b8c2":"code","cb36a296":"code","bfc50a12":"code","8a9ec8c8":"code","a40ab194":"code","a2bc94c2":"code","5111deda":"code","35de27a8":"code","5c243656":"code","16c8cadc":"code","15efe3d1":"code","a91275ee":"code","84071342":"code","13469de0":"code","bd81f56d":"code","4c62a4ed":"code","0d8c81b5":"code","67ce8670":"code","966488e6":"code","acf3a089":"code","a8b6e108":"code","50d43217":"code","e5845479":"code","18ab97a3":"code","197e94d1":"code","595ac37c":"code","7fb13d7c":"code","f8673e87":"code","2ac98e6c":"code","4e5b11f7":"code","dff7c5c5":"code","ceaea6ac":"code","546cf372":"code","55ccfeae":"code","45b2802f":"code","7d245735":"code","8147f556":"code","0cf487dd":"code","d337cb39":"code","e1f17450":"code","998eff43":"markdown","bbde4e6c":"markdown","b3ecb9ae":"markdown","0c362a9e":"markdown","f63837ab":"markdown","ae0dffe7":"markdown","8df326e9":"markdown","a3de21fd":"markdown","0b751b49":"markdown","025ccc30":"markdown","aff26554":"markdown","86447716":"markdown"},"source":{"7001b8c2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npd.set_option('display.max_columns', None)","cb36a296":"df= pd.read_csv('\/kaggle\/input\/housesalesprediction\/kc_house_data.csv')\np=df.copy()\ndf","bfc50a12":"# df.drop(columns={'id', 'date'},axis=1).hist(color='orange',figsize=(15,15));","8a9ec8c8":"p= p.drop(columns={'id', 'date'},axis=1)","a40ab194":"p.describe()","a2bc94c2":"j=1\nfor i in p:\n    f, (ax_box, ax_hist) = plt.subplots(2, sharex=True, gridspec_kw= {\"height_ratios\": (0.2, 1)})\n    mean=df[i].mean()\n    median=df[i].median()\n    mode=df[i].mode().values[0]\n\n    sns.boxplot(data=df, x=i, ax=ax_box)\n    ax_box.axvline(mean, color='r', linestyle='--')\n    ax_box.axvline(median, color='g', linestyle='-')\n    ax_box.axvline(mode, color='b', linestyle='-')\n\n    sns.histplot(data=df, x=i, ax=ax_hist, kde=True)\n    ax_hist.axvline(mean, color='r', linestyle='--', label=\"Mean\")\n    ax_hist.axvline(median, color='g', linestyle='-', label=\"Median\")\n    ax_hist.axvline(mode, color='b', linestyle='-', label=\"Mode\")\n\n    ax_hist.legend()\n\n    ax_box.set(xlabel='')\n    plt.show()","5111deda":"'''import plotly.express as px\n### creating a histogram using ploty\n\nimport plotly.express as px\nfig = px.histogram(df, x=\"price\")\nfig.show()\n\n### Creating multiple histogram   #####\nj=1\nfor i in p:\n    plt.subplot(1,19,j)\n    fig = px.histogram(p, x=i,\n                       title=i,\n                       opacity=0.8,\n                       #log_y=True, # represent bars with log scale\n                       marginal=\"box\", # or violin, rug\n                       color_discrete_sequence=['blue'] # color of histogram bars\n                       )\n    fig.show()\n    j=j+1\n''';","35de27a8":"import plotly.express as px\nprint('Log Histogram ')\n\nj=1\nfor i in p:\n    plt.subplot(1,19,j)\n    fig = px.histogram(p, x=i,\n                       title=i,\n                       opacity=0.8,\n                       log_y=True, # represent bars with log scale\n                       # marginal=\"box\", # or violin, rug\n                       marginal = 'violin',\n                       color_discrete_sequence=['#A56CC1'] # color of histogram bars\n                       )\n    fig.show()\n    j=j+1\n","5c243656":"plt.figure(figsize=(15,8))\nsns.heatmap(p.corr(), annot=True, cmap = \"tab20\");","16c8cadc":"sns.scatterplot(x='lat', y='long', data=p);","15efe3d1":"price_list=p.price.values.tolist()\n","a91275ee":"!pip install folium","84071342":"import folium\nfrom folium.plugins import HeatMap\n","13469de0":"def generateBaseMap(default_location=[47.5112,-122.257], default_zoom_start=12):\n    base_map = folium.Map(location=default_location, zoom_start=default_zoom_start)\n    return base_map","bd81f56d":"basemap=generateBaseMap()","4c62a4ed":"p.head(3)","0d8c81b5":"HeatMap(p[['lat','long','price']].values.tolist(),zoom=20,radius=15).add_to(basemap)","67ce8670":"basemap","966488e6":"####### heat map with price < mean ###########\n'''\n\nHeatMap(p[['lat','long'],p['price']<p.price.mean()].values.tolist(),zoom=20,radius=15).add_to(basemap)\nbasemap\n# p.price.mean()\n''';","acf3a089":"####### heat map with price > mean ###########","a8b6e108":"### Heat map with zip code ####\n\nHeatMap(p[['lat','long','zipcode']].values.tolist(),zoom=20,radius=15).add_to(basemap)\nbasemap","50d43217":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F","e5845479":"data = df.drop('id', axis=1)\ndata['year'] = data['date'].apply(lambda x: x[0:4])\ndata['month'] = data['date'].apply(lambda x: x[4:6])\n#data['day'] = data['date'].apply(lambda x: x[6:8])\n\ndata = data.drop('date', axis=1)\nprint(len(data['zipcode'].unique()),'\\n')\nprint()\ndata.head()","18ab97a3":"def onehot_encode(df, column, prefix):\n    df = df.copy()\n    dummies = pd.get_dummies(df[column], prefix=prefix)\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    return df","197e94d1":"data = onehot_encode(data, 'zipcode', 'zip')","595ac37c":"data.query(\"yr_renovated != 0\")","7fb13d7c":"data = data.drop('yr_renovated', axis=1)","f8673e87":"data","2ac98e6c":"y = data['price'].copy()\nX = data.drop('price', axis=1).copy()","4e5b11f7":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)","dff7c5c5":"tf_X_train, tf_X_test, tf_y_train, tf_y_test = train_test_split(X, y, train_size=0.7, random_state=1)","ceaea6ac":"%%time\nclass Net(nn.Module):   ## We need to create a class for nn and gonna inheriant from neural network.module\n    \n    def __init__(self):\n        super(Net, self).__init__()\n        self.layer1 = nn.Linear(88, 64)  ## Just like hidden layer\n        self.layer2 = nn.Linear(64, 64)  ## 2nd hidden layer\n        self.out = nn.Linear(64, 1)\n    \n    def forward(self, x):\n        x = F.relu(self.layer1(x))   ## Activation function relu\n        x = F.relu(self.layer2(x))   ## Activation function relu\n        x = self.out(x)\n        return x\n\nnet = Net()","546cf372":"list(net.parameters())","55ccfeae":"for i in range(len(list(net.parameters()))):\n    print(list(net.parameters())[i].shape)","45b2802f":"torch_X_train = torch.tensor(tf_X_train).type(torch.float32)\ntorch_y_train = torch.tensor(np.array(tf_y_train)).type(torch.float32)\n\ntorch_X_test = torch.tensor(tf_X_test).type(torch.float32)\ntorch_y_test = torch.tensor(np.array(tf_y_test)).type(torch.float32)","7d245735":"optimizer = torch.optim.Adam(net.parameters(), lr=0.01)\ncriterion = nn.MSELoss()","8147f556":"%%time\nfor x, target in zip(torch_X_train, torch_y_train):\n    optimizer.zero_grad()\n    output = net(x)\n    loss = criterion(output, target)\n    loss.backward()\n    optimizer.step()","0cf487dd":"%%time\ntotal_loss = 0\n\nfor x, target in zip(torch_X_test, torch_y_test):\n    output = net(x)\n    loss = criterion(output, target)\n    total_loss += loss\n    \navg_loss = total_loss \/ len(torch_X_test)","d337cb39":"torch_rmse = torch.sqrt(avg_loss).detach().numpy()","e1f17450":"print(\"   PyTorch RMSE 1st parameter:\", torch_rmse)\n# print(\"   PyTorch RMSE 2nd Parameter:\", torch_rmse2)","998eff43":"# Deep Learning","bbde4e6c":"# Heat Map of location and price\n* Generally price of property depends on locations ","b3ecb9ae":"* **King County** is located in the **U.S. state of Washington**. The population was 2,269,675 in the 2020 census, making it the most populous county in Washington, and the 12th-most populous in the United States. The county seat is Seattle, also the state's most populous city. \n* however this dataset is 5 years old","0c362a9e":"### Please upvote if u found this helpful","f63837ab":"## Splitting and Scaling","ae0dffe7":"# Training With PyTorch","8df326e9":"### Preprocessing","a3de21fd":"![download.jfif](attachment:d9f13774-e2c5-4579-8527-96ec1e50f4ee.jfif)","0b751b49":"yr_renovated have 914 0 values so we are gonna drop it","025ccc30":"# Results","aff26554":"As there are only 70 unique zipcode we can perform one hot encode on zipcode\n* We are performing zipcode encoding because we don't want machine to think high or lower value of zipcode influence the result","86447716":"### What are query?\n> The query function allows for applying filtering conditions as a string. It provides more flexibility than many other techniques.\n\n[Further Reading](https:\/\/towardsdatascience.com\/10-examples-that-will-make-you-use-pandas-query-function-more-often-a8fb3e9361cb)"}}