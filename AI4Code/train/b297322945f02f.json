{"cell_type":{"1bd945a9":"code","5302a10d":"code","6086accc":"code","4e9834f1":"code","a36247f3":"code","ce172988":"code","a4ed1a42":"code","9d21783a":"code","80f20f88":"code","fece3bad":"code","3ec0b875":"code","2f9e1329":"code","efb6a6a0":"code","55760ed1":"code","679b1289":"code","69ef713b":"code","60f0688f":"code","f5339bc1":"code","e60db6df":"code","64df79e9":"code","f3c15298":"markdown","bcb5c4a2":"markdown","dadbf193":"markdown","3e1fd050":"markdown","45930157":"markdown","1fe748a8":"markdown","8bb30888":"markdown","e01d24c2":"markdown","2282deef":"markdown","f3a83778":"markdown","e799eba2":"markdown","35f438ae":"markdown","7ba6ef42":"markdown","2ad95f92":"markdown","820380fd":"markdown","08cc9739":"markdown","6924198f":"markdown","49d18017":"markdown"},"source":{"1bd945a9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ndf = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\n\n# Any results you write to the current directory are saved as output.","5302a10d":"import pandas_profiling\ndf.profile_report()","6086accc":"def missing_percentage(df):\n    \"\"\"This function takes a DataFrame(df) as input and returns two columns, total missing values and total missing values percentage\"\"\"\n    ## the two following line may seem complicated but its actually very simple. \n    total = df.isnull().sum().sort_values(ascending = False)[df.isnull().sum().sort_values(ascending = False) != 0]\n    percent = round(df.isnull().sum().sort_values(ascending = False)\/len(df)*100,2)[round(df.isnull().sum().sort_values(ascending = False)\/len(df)*100,2) != 0]\n    return pd.concat([total, percent], axis=1, keys=['Total','Percent'])\n\nmissing_percentage(df)","4e9834f1":"df.info(memory_usage = 'deep')","a36247f3":"def mem_usage(pandas_obj):\n    \"\"\"This function takes in a DataFrame object as an input and returns a\"\"\"\n    if isinstance(pandas_obj,pd.DataFrame):\n        usage_b = pandas_obj.memory_usage(deep=True).sum()\n    else: # we assume if not a df it's a series\n        usage_b = pandas_obj.memory_usage(deep=True)\n    usage_mb = usage_b \/ 1024 ** 2 # convert bytes to megabytes\n    return \"{:03.2f} MB\".format(usage_mb)\n\nmem_usage(df)","ce172988":"# This function takes only the 'object' type columns from the the dataFrames and the columns with tunique values \ndef reduce_by_category_type(df):\n    converted_obj = pd.DataFrame()\n    for col in df.columns:\n        num_unique_values = len(df[col].unique())\n        num_total_values = len(df[col])\n        if num_unique_values \/ num_total_values < 0.5 and df[col].dtype == 'object':\n            converted_obj.loc[:,col] = df[col].astype('category')\n        else:\n            converted_obj.loc[:,col] = df[col]\n    return converted_obj\n\ndf = reduce_by_category_type(df)","a4ed1a42":"mem_usage(df)","9d21783a":"df.info(memory_usage='deep')","80f20f88":"df_int = df.select_dtypes(include = 'int64')\nprint (f\" Before working with int types: {mem_usage(df_int)}\")\nconverted_int = df.select_dtypes(include = 'int64').apply(pd.to_numeric,downcast='unsigned')\nprint (f\" After working with the int types: {mem_usage(converted_int)}\")\ndf.loc[:,df_int.columns] = converted_int\nprint (f\" Total usage of the df after: {mem_usage(df)}\")","fece3bad":"df.head()","3ec0b875":"df['adjusted_price'] = df.price\/df.minimum_nights","2f9e1329":"df.head()","efb6a6a0":"\nimport plotly.graph_objects as go\n\ntemp = df.host_id.value_counts().reset_index().head(20)\ntemp.columns = ['host_id', 'count']\ntemp = temp.merge(df[['host_id','host_name']], left_on = 'host_id',right_on = 'host_id', how = 'left', copy = False)\ntemp.drop_duplicates(inplace = True)\n\nx = temp['host_name']\ny = temp['count']\n\n# Use the hovertext kw argument for hover text\nfig = go.Figure(data=[go.Bar(x=x, \n                             y=y,\n#                              hovertext=['27% market share', '24% market share', '19% market share'],\n                            )])\n# Customize aspect\nfig.update_traces(marker_color='rgb(158,202,225)', marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5, opacity=0.6)\nfig.update_layout(title_text='Top Airbnb hosts in NYC')\nfig.layout.xaxis.title = 'Hosts'\nfig.layout.yaxis.title = 'Host listings'\nfig.show()","55760ed1":"import plotly.express as px\n## Setting the DataFrame\ntemp = df.host_id.value_counts().reset_index().head(5)\ntemp.columns = ['host_id', 'count']\ntemp = temp.merge(df[['host_id','host_name','price', 'latitude','longitude']], left_on = 'host_id',right_on = 'host_id', how = 'left', copy = False)\n\n## Setting up the Visualization..\nfig = px.scatter_mapbox(temp, \n                        lat=\"latitude\", \n                        lon=\"longitude\", \n                        color=\"host_name\", \n                        size=\"price\",\n#                         color_continuous_scale=px.colors.cyclical.IceFire, \n                        size_max=30, \n                        opacity = .70,\n                        zoom=11,\n                       )\n# \"open-street-map\", \"carto-positron\", \"carto-darkmatter\", \"stamen-terrain\", \"stamen-toner\" or \n# \"stamen-watercolor\" yeild maps composed of raster tiles from various public tile servers which do \n# not require signups or access tokens\n# fig.update_layout(mapbox_style=\"carto-positron\", \n#                  )\nfig.layout.mapbox.style = 'carto-positron'\nfig.update_layout(title_text = 'Top 5 hosts and their hosted Locations<br>(Click legend to toggle hosts)', height = 800)\n\nfig.show()","679b1289":"df.head()","69ef713b":"## Setting up the Visualization..\nfig = px.scatter_mapbox(df, \n                        hover_data = ['price','minimum_nights','room_type'],\n                        hover_name = 'neighbourhood',\n                        lat=\"latitude\", \n                        lon=\"longitude\", \n                        color=\"neighbourhood_group\", \n                        size=\"price\",\n#                         color_continuous_scale=px.colors.cyclical.IceFire, \n                        size_max=30, \n                        opacity = .70,\n                        zoom=10,\n                       )\n# \"open-street-map\", \"carto-positron\", \"carto-darkmatter\", \"stamen-terrain\", \"stamen-toner\" or \n# \"stamen-watercolor\" yeild maps composed of raster tiles from various public tile servers which do \n# not require signups or access tokens\n# fig.update_layout(mapbox_style=\"carto-positron\", \n#                  )\nfig.layout.mapbox.style = 'stamen-terrain'\nfig.update_layout(title_text = 'Airbnb by Borough in NYC<br>(Click legend to toggle borough)', height = 800)\nfig.show()","60f0688f":"colors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen']\nlabels = df.neighbourhood_group.value_counts().index\nvalues = df.neighbourhood_group.value_counts().values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.update_traces(marker=dict(colors = colors, line=dict(color='#000000', width=2)))\n\nfig.show()","f5339bc1":"## Setting up the Visualization..\nfig = px.scatter_mapbox(df, \n                        lat=\"latitude\", \n                        lon=\"longitude\", \n                        color=\"neighbourhood\", \n#                         size=\"price\",\n#                         color_continuous_scale=px.colors.cyclical.IceFire, \n                        size_max=30, \n                        opacity = .70,\n                        zoom=10,\n                       )\n# \"open-street-map\", \"carto-positron\", \"carto-darkmatter\", \"stamen-terrain\", \"stamen-toner\" or \n# \"stamen-watercolor\" yeild maps composed of raster tiles from various public tile servers which do \n# not require signups or access tokens\n# fig.update_layout(mapbox_style=\"carto-positron\", \n#                  )\nfig.layout.mapbox.style = 'carto-positron'\nfig.update_layout(title_text = 'NYC Airbnb by Neighbourhood<br>(Click legend to toggle neighbourhood)', height = 800)\n\nfig.show()","e60db6df":"colors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen']\nlabels = df.room_type.value_counts().index\nvalues = df.room_type.value_counts().values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.update_traces(marker=dict(colors = colors, line=dict(color='#000000', width=2)))\n\nfig.show()","64df79e9":"from plotly.subplots import make_subplots\n\ntemp_bk = df[df.neighbourhood_group == 'Brooklyn']\ntemp_qn = df[df.neighbourhood_group == 'Queens']\ntemp_mn = df[df.neighbourhood_group == 'Manhattan']\n\n\nlabels = df.room_type.value_counts().index.to_list()\n\nfig = make_subplots(1, 3, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=['Manhattan', 'Brooklyn', 'Queens'])\nfig.add_trace(go.Pie(labels=labels, values=temp_mn.room_type.value_counts().reset_index().sort_values(by = 'index').room_type.tolist(), scalegroup='one',\n                     name=\"Manhattan\"), 1, 1)\nfig.add_trace(go.Pie(labels=labels, values=temp_bk.room_type.value_counts().reset_index().sort_values(by = 'index').room_type.tolist(), scalegroup='one',\n                     name=\"Brooklyn\"), 1, 2)\nfig.add_trace(go.Pie(labels=labels, values=temp_qn.room_type.value_counts().reset_index().sort_values(by = 'index').room_type.tolist(), scalegroup='one',\n                     name=\"Brooklyn\"), 1, 3)\n\n\nfig.update_layout(title_text='Room Types in top 3 Boroughs')\nfig.update_traces(marker=dict(colors = colors, line=dict(color='#000000', width=2)))\nfig.show()","f3c15298":"# Overview of all datapoints by Borough","bcb5c4a2":"These are missing values in this dataset. We will work with them later. ","dadbf193":"# About the Dataset\n\n## Overview","3e1fd050":"It looks like Manhattan is the preferable place for top hosts. Let's plot all the datapoints and see how that looks. ","45930157":"First we will work with \"object\" data types. \n\n## Object types","1fe748a8":"It looks like Manhattan and Brooklyn counts for ~85% of all hostings.  ","8bb30888":"# How about by Neighbourhood","e01d24c2":"## Missing Values","2282deef":"As you can see this is a fairly small dataset and there is no need to worry about reducing memory. However, as I am trying to learn about about this topic, I will demonstrate some techniques to reduce memory usages. First let's write a function with calculate the memory usage of the dataframe and try it on our dataset. ","f3a83778":"# Room Types","e799eba2":"## Top Hosts","35f438ae":"Let's look at the top 5 hosts in NYC and see where they are hosting in NYC.","7ba6ef42":"![Title](https:\/\/thenypost.files.wordpress.com\/2019\/03\/shutterstock_790067248.jpg?quality=90&strip=all&w=618&h=410&crop=1)\n# <div style=\"text-align: center\" > A Statistical Analysis of airbnb in NYC<\/div>\n\nI am supper excited to work with this airbnb dataset especially because this dataset is about NYC's airbnb hosts. I am going to know all the specs. This is going to be fun. Let's get started. \n","2ad95f92":"So, the total improvement of the dataset is from 23.45 MB to 8.01 MB. This is a huge improvement.","820380fd":"As you can see there is already a massive improvement in the dataset from 23.45 MB to 9.78 MB. Let's work with \"int64\" datatypes as well. ","08cc9739":"# EDA\n\nLet's have a preview of the dataset. ","6924198f":"## Memory Usage","49d18017":"# Goals:\n* Do an exploratory EDA of Airbnb. \n* As a newyorker, I would like to know a bit more about the relation between Airbnb and NY neighbourhood."}}