{"cell_type":{"32be6527":"code","aac98552":"code","8337587c":"code","6b58c654":"code","84feb92e":"code","50e8f6c5":"code","f169eed0":"code","f0d56bee":"code","ecf598ea":"code","fa32ccbc":"code","121767b5":"code","f13e41cc":"code","5b8188e2":"code","da2651b9":"code","8335af07":"code","bc7fb935":"code","26bba436":"code","b0443b4e":"code","840c9997":"code","fb522d4b":"code","3361e72d":"code","aa56d078":"code","1f55ff6c":"code","fcaddc88":"code","957a8093":"code","ad090fae":"code","155849f1":"code","8bc026bc":"code","706817da":"code","2e67d1f2":"code","63305e71":"code","f09c9755":"code","a19050de":"code","986b0802":"code","b5f34912":"code","f0fa6511":"code","c40dc43f":"code","a7ee2e39":"code","1f411835":"code","f947ee1b":"code","30785fa9":"code","05aa3ae7":"code","e6b6d201":"code","40f3541f":"code","e1f0e2ed":"code","77f5ec6b":"code","32d6ec2e":"code","76256e43":"code","97e61058":"code","3bfde768":"code","9bd10c1f":"code","e4687943":"code","18ea9561":"code","0dc0237b":"code","a6728920":"code","08b6bcc1":"code","2f7cc100":"code","c796c3f6":"code","96a71b43":"code","d26b2d44":"code","f6f398e1":"code","0563c7ea":"code","bf7feba2":"code","4e515dd6":"code","16f3f7b4":"code","39bccff7":"code","1dd4db48":"code","42d31411":"code","07b36dd6":"code","9dd522a2":"code","c6fb7b5a":"code","46d45e73":"code","d1787425":"code","b480d8c4":"markdown","cb667a8c":"markdown","92ba28b8":"markdown","a5752bc0":"markdown","361c459a":"markdown","a269a30d":"markdown","cb8ec5b3":"markdown","5602bb03":"markdown","423730cd":"markdown","2352948d":"markdown","0108a810":"markdown","10f42784":"markdown","5721ac5a":"markdown","e4b434d5":"markdown"},"source":{"32be6527":"import pandas as pd\nimport numpy as np","aac98552":"a = pd.Series([1, 2, 3, 4, 5])","8337587c":"a","6b58c654":"# type of series\ntype(a)","84feb92e":"# Accessing the series element just like list\na[2]","50e8f6c5":"b = pd.Series(['a', 'b','c'])","f169eed0":"b","f0d56bee":"# date_range function to quickly make a list of date times\na = pd.date_range(start='20-03-2021', end='14-09-2021')","ecf598ea":"a","fa32ccbc":"type(a)","121767b5":"# Describing arrays\ntemp = np.random.randint(low=20, high=100, size=[20,])\nname = np.random.choice([\"Niketan\", \"Eshwar\", \"Moon\", \"Maya\"], 20)\nrandom = np.random.choice([1, 2, 3, 10, 20], 20)","f13e41cc":"# merging using zip function in python\na = list(zip(temp, name, random))","5b8188e2":"# Creating data frame through the zipped data where columns means the column headings\ndf = pd.DataFrame(data=a, columns=[\"temp\", \"name\", \"random\"])","da2651b9":"df","8335af07":"df = pd.DataFrame({\n    \"temp\": temp,\n    \"name\": name,\n    \"random\": random\n})","bc7fb935":"df","26bba436":"# returns first five items\ndf.head()","b0443b4e":"# returns last five items\ndf.tail()","840c9997":"# getting the dimension of DataFrame same as numpy\ndf.shape","fb522d4b":"# returns all the column names\ndf.columns","3361e72d":"# Accessing column \ndf.name","aa56d078":"# Another way to access column with describe function to give more details\n# note if the row is string then we dont get mean 5% 25% etc in there\ndf[\"name\"].describe()","1f55ff6c":"# Here you get Q1(25%), Q2(50%), Q3(75%)\ndf[\"temp\"].describe()","fcaddc88":"# info about the whole dataframe.\ndf.info()","957a8093":"# only for numerical datatype\ndf.describe()","ad090fae":"# converting whole data into a list\ndf.values","155849f1":"# gives the frequency of unique items\ndf.value_counts()","8bc026bc":"df[\"temp\"].value_counts()","706817da":"# If you want to make temp used as index\n# Note this is the temporary change\ndf.set_index(\"temp\")","2e67d1f2":"df","63305e71":"df.set_index(\"temp\", inplace=True)","f09c9755":"df","a19050de":"# Sorting according to index for x axis\ndf.sort_index(axis=0, ascending=False)","986b0802":"# If you want to sort according to values of some other column name\ndf.sort_values(by=\"random\", ascending=False)","b5f34912":"# dropping it rowwise since axis=0\n# Replace 98 with any number inside temp\n# df.drop([98])","f0fa6511":"# dropping it columnwise axis=1\ndf.drop([\"random\"], axis=1)","c40dc43f":"# iloc[rows, columns]\n# Here iloc[[0, 1]] rows = [0,1]\ndf.iloc[[0, 1]]","a7ee2e39":"# rows 1 and 2 and column is 1 i.e random\ndf.iloc[1:3, 1]","1f411835":"# first row and all the columns\ndf.iloc[0, :]","f947ee1b":"# loc uses index number \n# Replace 67 with any number inside temp which acts as index\n# Uncomment below line to run\n# df.loc[67, :]","30785fa9":"# df.loc[67, \"name\": \"random\"]","05aa3ae7":"# keep only data for which condition is true\ndf.loc[df.random > 10]","e6b6d201":"ls \/kaggle\/input\/random-salary-data-of-employes-age-wise\/","40f3541f":"df1 = pd.read_csv(\"\/kaggle\/input\/random-salary-data-of-employes-age-wise\/Salary_Data.csv\")","e1f0e2ed":"df1","77f5ec6b":"# pip install openpyxl\n# df1.to_excel(\"Salaries.xlsx\", sheet_name=\"Salary Data\")","32d6ec2e":"# df2 = pd.read_excel('Salaries.xlsx')","76256e43":"# df2","97e61058":"# df2.to_csv(\"Dataframe2.csv\", index=False)","3bfde768":"# df2 = pd.read_csv(\"Dataframe2.csv\")\n# df2","9bd10c1f":"d1 = pd.DataFrame([['a', 1], [\"b\", 2]], columns=[\"col1\", \"number\"])\nd2 = pd.DataFrame([[\"c\", 3, \"lion\"], [\"d\", 4, \"tiger\"]], columns=[\"letter\", \"number\", \"animal\"])","e4687943":"d1","18ea9561":"d2","0dc0237b":"# concatenate according to x axis i.e row wise\npd.concat([d1, d2], axis=0)","a6728920":"# note the indexing \npd.concat([d1, d2], axis=0, ignore_index=True)","08b6bcc1":"# concatenating according to y axis i.e. column\npd.concat([d1, d2], axis=1)","2f7cc100":"df1","c796c3f6":"# group by function to group according to column or feature name\ndf_group = df1.groupby(\"Salary\")","96a71b43":"df_group","d26b2d44":"for salary in df_group:\n    print(salary)","f6f398e1":"# Getting all the entries for specific salary\ndf_group.get_group(105582)","0563c7ea":"df_group.describe()","bf7feba2":"d1 = pd.DataFrame({\n    \"city\": [\"Wardha\", \"Nagpur\", \"Mumbai\", \"Pune\"],\n    \"temperature\": [37, 38, 39, 40]\n})\nd2 = pd.DataFrame({\n    \"city\": [\"Nagpur\", \"Mumbai\", \"Pune\"],\n    \"humidity\": [67, 68, 69]\n})","4e515dd6":"# merge function to merge data with city as key\npd.merge(d1, d2, on=\"city\")","16f3f7b4":"# Applying outer join\npd.merge(d1, d2, on=\"city\", how=\"outer\")","39bccff7":"# Applying left join\npd.merge(d1, d2, on=\"city\", how=\"left\")","1dd4db48":"# Applying right join\npd.merge(d1, d2, on=\"city\", how=\"right\")","42d31411":"df1","07b36dd6":"# pivot table will show mean of Salary and also tells the values of years of experience\ndf1.pivot_table(values=\"YearsExperience\", index=\"Salary\", aggfunc=\"mean\")","9dd522a2":"# Sum according to features\ndf1.apply(np.sum)","c6fb7b5a":"# Sum according to rows which is the default one\ndf1.apply(np.sum, axis=0)","46d45e73":"# Sum according to columns\ndf1.apply(np.sum, axis=1)","d1787425":"# If you need any help \nhelp(pd.DataFrame.pivot_table)","b480d8c4":"### Use of apply function","cb667a8c":"### Converting dataFrame to excel and reversing the procedure\n- Requires to install openpysql","92ba28b8":"### Dictionary way of defining a DataFrame","a5752bc0":"## Series","361c459a":"## Importing the libraries","a269a30d":"# A glance at Pandas \n### The objective is to get hold of operations done in pandas","cb8ec5b3":"#### Merge operations","5602bb03":"- #### You will have to import the csv file from File -> Add or upload data","423730cd":"# DataFrame","2352948d":"### Creating DataFrame using read_csv method","0108a810":"### Using iloc and loc","10f42784":"- #### Put inplace=True for making a permanent change","5721ac5a":"## Pandas DataStructures\n- Series\n- DataFrame\nWe will look into each one in detail","e4b434d5":"### List way of defining a dataframe"}}