{"cell_type":{"de0feeb0":"code","d4b53656":"code","72ad3429":"code","cd913da3":"code","9a31ec05":"code","a1c21aee":"code","54315d83":"code","55980da0":"code","2659437b":"code","c24044d6":"code","281c400e":"code","1d330127":"code","d691a43f":"code","e08c4210":"code","c21ace5c":"code","0d92e340":"code","4129f194":"code","c89498ff":"code","99674573":"code","caf797d9":"code","1cf058b7":"code","3fd4b31a":"code","845f59a2":"code","18d5b5e9":"code","a606c792":"code","daa4845e":"code","a7da979b":"code","3f9d58c1":"code","4e44e22f":"code","9b30fa30":"code","0887566b":"code","cc6d15d7":"code","12e5f9ac":"code","9d13b433":"code","49609aed":"code","4c2381e6":"code","6e949967":"code","0abde1e9":"code","93e2855b":"code","3bd3c06f":"code","e70809f5":"code","6573f3a3":"code","31e2ec26":"code","b324be6e":"code","687dc9a5":"code","0d4f93a2":"code","6fec8677":"code","ad78de75":"markdown","b329217c":"markdown","08d9b566":"markdown","addb1750":"markdown","ef8238b8":"markdown","fb68b18f":"markdown","8fc2a7fd":"markdown","33ab0346":"markdown","ebdc43f0":"markdown","e474b801":"markdown","4c55c863":"markdown","8424a5ea":"markdown"},"source":{"de0feeb0":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt","d4b53656":"from sklearn.preprocessing import Imputer\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import Lasso\nfrom sklearn.svm import  SVR\nfrom sklearn.ensemble import IsolationForest","72ad3429":"train_data_csv = pd.read_csv(\"..\/input\/train.csv\")\ntest_data_csv = pd.read_csv(\"..\/input\/test.csv\")","cd913da3":"train_SalePrice = pd.DataFrame(train_data_csv[\"SalePrice\"])","9a31ec05":"train_SalePrice.shape","a1c21aee":"train_SalePrice.head()","54315d83":"train_data = train_data_csv.drop([\"SalePrice\"],axis=1)","55980da0":"full_features = pd.concat([train_data,test_data_csv],ignore_index= True)","2659437b":"full_features.to_csv(\"full.csv\")","c24044d6":"full_features.info()","281c400e":"full_features = full_features.drop([\"Id\"],axis=1)","1d330127":"full_features.shape","d691a43f":"full_features.isnull().sum().sort_values(ascending = False)","e08c4210":"full_features.isnull().sum().sort_values(ascending = False)","c21ace5c":"full_features.loc[2576,'GarageArea'] = 0\nfull_features.loc[2576,'GarageCars'] = 0\nfull_features.loc[2120,'BsmtUnfSF'] = 0\nfull_features.loc[2120,'BsmtFinSF1'] = 0\nfull_features.loc[2120,'TotalBsmtSF'] = 0\nfull_features.loc[2120,'BsmtFinSF2'] = 0\nfull_features.loc[2120,'BsmtFullBath'] = 0\nfull_features.loc[2188,'BsmtFullBath'] = 0\nfull_features.loc[2120,'BsmtHalfBath'] = 0\nfull_features.loc[2188,'BsmtHalfBath'] = 0\nfull_features['Functional'] = full_features['Functional'].fillna('None')\nfull_features['Utilities'] = full_features['Utilities'].fillna('None')\nfull_features.loc[1555,'KitchenQual'] = 'None'\nfull_features.loc[2151,'Exterior1st'] = 'None'\nfull_features.loc[2151,'Exterior2nd'] = 'None'\nfull_features[\"Electrical\"] = full_features[\"Electrical\"].fillna('SBrkr')\nfull_features[\"MasVnrArea\"] = full_features[\"MasVnrArea\"].fillna(0)\nfull_features[\"MasVnrType\"] = full_features[\"MasVnrType\"].fillna('None')\nfull_features[\"GarageFinish\"] = full_features[\"MasVnrType\"].fillna(0)\nfull_features['SaleType']=full_features['SaleType'].fillna(full_features['SaleType'].mode()[0])\n\n\ncols = ['BsmtQual','BsmtCond','FireplaceQu','GarageType','GarageQual','GarageCond',\n        'PoolQC','MiscFeature','Fence','BsmtFinType1','Alley','BsmtFinType2','BsmtExposure']\nfor c in cols:\n    full_features[c].fillna('None', inplace=True)","0d92e340":"imp=Imputer(missing_values=\"NaN\", strategy=\"median\" )\nimp.fit(full_features[[\"GarageYrBlt\"]])\nfull_features[\"GarageYrBlt\"]=imp.transform(full_features[[\"GarageYrBlt\"]]).ravel()\n\nimp=Imputer(missing_values=\"NaN\", strategy=\"mean\" )\nimp.fit(full_features[[\"LotFrontage\"]])\nfull_features[\"LotFrontage\"]=imp.transform(full_features[[\"LotFrontage\"]]).ravel()\n\nmean = full_features['LotFrontage'].agg(['mean'])\nfull_features['LotFrontage'] = full_features['LotFrontage'].fillna(value=mean)","4129f194":"subclass_group = full_features.groupby('MSSubClass')\nZoning_modes = subclass_group['MSZoning'].apply(lambda x : x.mode()[0])\nZoning_modes","c89498ff":"full_features['MSZoning'] = full_features.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))","99674573":"full_features.isnull().sum().sort_values(ascending = False)","caf797d9":"full_features.info()","1cf058b7":"full_features = pd.get_dummies(data=full_features,columns=['MSSubClass','Fence','Alley','MiscFeature','MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle','OverallQual','OverallCond','RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Heating','HeatingQC','CentralAir','Electrical','KitchenQual','Functional','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive','PoolQC','SaleType','SaleCondition'])","3fd4b31a":"train_data = full_features.iloc[:1460,:]\ntest_data = full_features.iloc[1460:,:]","845f59a2":"print(train_data.shape)\nprint(test_data.shape)","18d5b5e9":"train_data['SalePrice'] = train_SalePrice","a606c792":"train_data.shape","daa4845e":"y_train = pd.DataFrame(index = train_data.index, columns=[\"SalePrice\"])\ny_train[\"SalePrice\"] = np.log(train_data[\"SalePrice\"])\nX_train = train_data.drop('SalePrice',axis= 1 )","a7da979b":"X_train","3f9d58c1":"y_train","4e44e22f":"print(test_data.shape)\ntest_data.head(n = 10)","9b30fa30":"test_data.reset_index(drop= True)","0887566b":"regressor = DecisionTreeRegressor(random_state= 0)","cc6d15d7":"regressor.fit(X_train, y_train)","12e5f9ac":"y_pred_tree =regressor.predict(test_data)","9d13b433":"svr = SVR(kernel= 'rbf')","49609aed":"svr.fit(X_train, y_train)","4c2381e6":"y_pred_svr = svr.predict(test_data)","6e949967":"best_alpha = 0.00099\n","0abde1e9":"regr = Lasso(alpha=best_alpha, max_iter=50000)\n","93e2855b":"regr.fit(X_train, y_train)","3bd3c06f":"y_pred_lasso =regressor.predict(test_data)","e70809f5":"#y_pred = (y_pred_lasso + y_pred_svr) \/ 2","6573f3a3":"#y_pred = np.exp(y_pred)","31e2ec26":"from xgboost import  XGBRegressor","b324be6e":"xgboost = XGBRegressor(learning_rate=0.05, n_estimators=3460,\n                                     max_depth=3, min_child_weight=0,\n                                     gamma=0, subsample=0.7,\n                                     colsample_bytree=0.7,\n                                     objective='reg:linear', nthread=-1,\n                                     scale_pos_weight=1, seed=27,\n                                     reg_alpha=0.00006, random_state=42)","687dc9a5":"xgboost.fit(X_train,y_train)","0d4f93a2":"predictions = xgboost.predict(test_data)\ny_pred = (y_pred_lasso + predictions) \/ 2\ny_pred = np.exp(y_pred)","6fec8677":"pred_df = pd.DataFrame(y_pred, index=test_data_csv[\"Id\"], columns=[\"SalePrice\"])\npred_df.to_csv('output_xgb.csv', header=True, index_label='Id')","ad78de75":"# Data Preprocessing","b329217c":"## Concatenate the train and the test set ","08d9b566":"# Importing the dataset ","addb1750":"###  1-Missing Values","ef8238b8":"## Submission File","fb68b18f":"### Tree based model","8fc2a7fd":"## Model\n* Tree Based Model \n* SVR\n* Lasso Regression\n* XGBoost Regressor","33ab0346":"### LASSO ","ebdc43f0":"### 2-Categorical Data","e474b801":"### XGBoost ","4c55c863":"### 3-Split the train and test data","8424a5ea":"## SVR"}}