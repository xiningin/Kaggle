{"cell_type":{"90a1cda6":"code","7937793b":"code","d03257d5":"code","7db86f62":"code","fe823fc2":"code","b54ccf59":"code","535c19ba":"code","32591b1b":"code","10fd9132":"code","74fa6406":"code","3eea7f00":"code","6fa95f76":"code","1be1d76f":"code","623df62f":"code","9b4699ab":"code","33c49009":"code","a680be81":"code","f9611159":"code","1ac293c3":"code","46697f4b":"code","f456dced":"code","d384149c":"code","4a3c77a5":"code","1ba7c8b6":"code","b75c3192":"code","f99729a0":"code","5c367950":"code","7dc6bbde":"code","234a2994":"code","dd77aacf":"code","78dbea9c":"code","72a1fa5f":"code","e346787a":"code","a3f9cf73":"code","4e77daa2":"code","26dd41d0":"code","0938c4e9":"code","8adf966a":"markdown","94e36335":"markdown","4fc29927":"markdown","cf261d74":"markdown","9831e119":"markdown"},"source":{"90a1cda6":"import pandas as pd\nimport numpy  as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom mpl_toolkits.mplot3d import Axes3D","7937793b":"diabetes=pd.read_csv(\"..\/input\/diabetes\/diabetes.csv\")\ndiabetes_df=diabetes","d03257d5":"print (diabetes.shape)","7db86f62":"diabetes.head(20)","fe823fc2":"print (diabetes.columns)\ndiabetes.describe()","b54ccf59":"plt.figure(figsize=(20,10))\ncor = diabetes.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.YlGnBu,vmin= 0,vmax= 1)\nplt.show()","535c19ba":"g = sns.FacetGrid(diabetes, hue='Outcome',height=8)  # Menentukan Axis\ng = g.map(plt.scatter, \"Pregnancies\", \"Glucose\").add_legend() # Plotting\n\nplt.show()\n","32591b1b":"sns.pairplot(diabetes, hue = \"Outcome\", corner=True);","10fd9132":"sns.pairplot(diabetes [[\"Pregnancies\", \"Glucose\", \"BloodPressure\", \"BMI\"]], diag_kind=\"kde\");\n","74fa6406":"sns.catplot(x=\"Pregnancies\", y=\"Age\", hue=\"Outcome\", kind=\"box\", data=diabetes);","3eea7f00":"import plotly.express as px\nfig = px.scatter(diabetes.query(\"Outcome==1\"), x = \"Glucose\", y = \"BloodPressure\", size = \"Insulin\", color = \"Pregnancies\", hover_name = \"Pregnancies\", log_x = True, size_max = 60,title=\"outcome = 1\")\n\nfig.show()\n","6fa95f76":"fig = px.scatter(diabetes.query(\"Outcome==0\"), x = \"Glucose\", y = \"BloodPressure\", size = \"Insulin\", color = \"Pregnancies\", hover_name = \"Pregnancies\", log_x = True, size_max = 60,title=\"outcome = 0\")\nfig.show()","1be1d76f":"fig = px.parallel_categories(diabetes, color=\"Glucose\", color_continuous_scale=px.colors.sequential.Sunset)\nfig.show()","623df62f":"fig = px.parallel_categories(diabetes, color=\"BloodPressure\", color_continuous_scale=px.colors.sequential.deep)\nfig.show()\n","9b4699ab":"# Masih Error Jangan Dirubah\nimport plotly.graph_objects as go\nfrom ipywidgets import widgets\nimport pandas as pd\nimport numpy as np\n\ndiabetes_df = diabetes\n# Build parcats dimensions\ncategorical_dimensions = ['Pregnancies', 'BloodPressure', 'Glucose'];\n\ndimensions = [dict(values=diabetes_df[label], label=label) for label in categorical_dimensions]\n\n# Build colorscale\ncolor = np.zeros(len(diabetes_df), dtype='uint8')\ncolorscale = [[0, 'gray'], [1, 'firebrick']]\n\n# Build figure as FigureWidget\nfig = go.FigureWidget(\n    data=[go.Scatter(x=diabetes_df.Glucose, y=diabetes_df['Outcome'],\n    marker={'color': 'gray'}, mode='markers', selected={'marker': {'color': 'firebrick'}},\n    unselected={'marker': {'opacity': 0.3}}), go.Parcats(\n        domain={'y': [0, 0.4]}, dimensions=dimensions,\n        line={'colorscale': colorscale, 'cmin': 0,\n              'cmax': 1, 'color': color, 'shape': 'hspline'})\n    ])\n\nfig.update_layout(\n        height=800, xaxis={'title': 'Glucose'},\n        yaxis={'title': 'Outcome', 'domain': [0.6, 1]},\n        dragmode='lasso', hovermode='closest')\n\n# Update color callback\ndef update_color(trace, points, state):\n    # Update scatter selection\n    fig.data[0].selectedpoints = points.point_inds\n\n    # Update parcats colors\n    new_color = np.zeros(len(diabetes_df), dtype='uint8')\n    new_color[points.point_inds] = 1\n    fig.data[1].line.color = new_color\n\n# Register callback on scatter selection...\nfig.data[0].on_selection(update_color)\n# and parcats click\nfig.data[1].on_click(update_color)\n\nfig","33c49009":"import plotly.express as px\nfig = px.scatter(diabetes, x=\"Glucose\", y=\"BloodPressure\", animation_frame=\"Age\", animation_group=\"BMI\",\n           size=\"Pregnancies\", color=\"SkinThickness\", hover_name=\"Insulin\", facet_col=\"Outcome\",\n           log_x=True, size_max=45, range_x=[1,400], range_y=[25,90])\nfig.show()","a680be81":"import sys\nimport pandas as pd\nimport numpy as np\nimport sklearn\nimport matplotlib\nimport keras\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import scatter_matrix\n\n#Print Versi dari Library\nprint('Python: {}'.format(sys.version))\nprint('Pandas: {}'.format(pd.__version__))\nprint('Numpy: {}'.format(np.__version__))\nprint('Sklearn: {}'.format(sklearn.__version__))\nprint('Matplotlib: {}'.format(matplotlib.__version__))\nprint('Keras :{}'.format(keras.__version__))\nprint('Pandas :{}'.format(pd.__version__))\n\n\n","f9611159":"diabetes_df.head(10)","1ac293c3":"diabetes_df.describe()","46697f4b":"diabetes_df.info()","f456dced":"dataset = diabetes_df.values\nprint(dataset.shape)","d384149c":"X = dataset[:,0:8]\nY = dataset[:, 8].astype(int)","4a3c77a5":"print(X.shape)\nprint(Y.shape)\nprint(Y[:5])","1ba7c8b6":"from sklearn.model_selection import GridSearchCV, KFold\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.optimizers import Adam\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler().fit(X)","b75c3192":"X_standardized = scaler.transform(X)\n\ndata = pd.DataFrame(X_standardized)\ndata.describe()","f99729a0":"#Menentukan Seed\nseed = 6\nnp.random.seed(seed)\n\n# Membuat Model\ndef create_model():\n    # create model\n    model = Sequential()\n    model.add(Dense(8, input_dim = 8, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(4, input_dim = 8, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(1, activation='sigmoid'))\n    \n    # Compile Model\n    adam = Adam(lr = 0.01)\n    model.compile(loss = 'binary_crossentropy', optimizer = adam, metrics = ['accuracy'])\n    return model\n\nmodel = KerasClassifier(build_fn = create_model, verbose = 1)\n\n# define the grid search parameters\nbatch_size = [10, 20, 40]\nepochs = [10, 50, 100]\n\n# make a dictionary of the grid search parameters\nparam_grid = dict(batch_size=batch_size, epochs=epochs)\n\n# build and fit the GridSearchCV\ngrid = GridSearchCV(estimator = model, param_grid = param_grid, cv = KFold(random_state=seed), verbose = 10)\ngrid_results = grid.fit(X_standardized, Y)\n\n# summarize the results\nprint(\"Best: {0}, using {1}\".format(grid_results.best_score_, grid_results.best_params_))\nmeans = grid_results.cv_results_['mean_test_score']\nstds = grid_results.cv_results_['std_test_score']\nparams = grid_results.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print('{0} ({1}) with: {2}'.format(mean, stdev, param))","5c367950":"from datetime import datetime\nfrom packaging import version\nfrom tensorflow import keras\n%reload_ext tensorboard\n\nlogdir=\"logs\/fit\/\" + datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=logdir)\n%tensorboard --logdir logs","7dc6bbde":"import numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score","234a2994":"diabetes_df.head()","dd77aacf":"diabetes_df.describe()","78dbea9c":"not_zero = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\n\nfor column in not_zero:\n    diabetes_df[column] = diabetes_df[column].replace(0,np.NaN)\n    mean = int(diabetes_df[column].mean(skipna=True))\n    diabetes_df[column] = diabetes_df[column].replace(np.NaN,mean)","72a1fa5f":"X = diabetes_df.iloc[:, 0:7]\ny = diabetes_df['Outcome']\n\n#Ganti ukuran test size sesuai soal\nX_train,X_test,y_train,y_test = train_test_split(X, y, train_size=0.6, test_size=0.4)","e346787a":"import math\nmath.sqrt(len(y_test))","a3f9cf73":"knn = KNeighborsClassifier(n_neighbors=27, p=2, metric='euclidean')\nknn.fit(X_train,y_train)","4e77daa2":"y_pred = knn.predict(X_test)\ny_pred","26dd41d0":"accuracy_score(y_pred,y_test)","0938c4e9":"prediction=knn.predict([[6,148.0,62.0,35.0,455.0,33.6,0.627,30]])\nif prediction ==1:\n    print(\"The person have Diabetes\")\nelse:\n    print(\"The person is not have Diabetes\")\nprediction","8adf966a":"> # **DATA MINING**","94e36335":"# **Deep Learning Section**","4fc29927":"# **SECTION 2 MACHINE LEARNING (Data Split)**","cf261d74":"* Dwi Krisnawan\n* Bandem Mahatma\n* Gus Rai Surya Laksana","9831e119":"# **Data Visualization Section**"}}