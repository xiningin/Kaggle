{"cell_type":{"1f561237":"code","1ece803c":"code","73a25811":"code","7584385d":"code","32293930":"code","def6e509":"code","45e2adc5":"code","276da8c9":"code","c449f0dd":"code","50c73f26":"code","51686c8b":"code","64d58e98":"code","699fa031":"code","be8e4f67":"code","c4888852":"code","f251a0cd":"code","9806db99":"code","90af87a0":"code","e0e01d73":"code","bbb1dd7d":"code","8400b683":"code","337f377a":"code","a8e641fb":"code","5109bdc0":"code","1d92a334":"code","0a135c10":"code","779e9397":"code","3738cf2f":"code","53ae4a04":"code","765544c8":"code","d60e16c5":"code","620351d2":"code","5d5a6542":"code","c7cb7f86":"code","8d424c5b":"code","77ef80a3":"code","c8d879cb":"code","211624f4":"code","4029b2f6":"markdown","4c8e1b18":"markdown","b6bcc40f":"markdown","90a67d58":"markdown","05881bcc":"markdown","f2af8ff0":"markdown","ac192edc":"markdown","d49fdb75":"markdown","5d1030d8":"markdown","8b7255f2":"markdown","9c47aedb":"markdown","cbed5ce9":"markdown","58be2aeb":"markdown","cb37bd1d":"markdown","ef7a969e":"markdown","0cd1089c":"markdown","58dd6492":"markdown","d4ac6977":"markdown","ad0a25b7":"markdown","174ed8fc":"markdown","c60c9794":"markdown","af9b9895":"markdown","d6f091a8":"markdown","40a53b6d":"markdown","a295bd33":"markdown","4313fa0b":"markdown","b6cbaf0c":"markdown","37873186":"markdown","af2d4ac4":"markdown","857d0302":"markdown","a8ee6e24":"markdown","0b5cca46":"markdown","739c0342":"markdown","05c7d44b":"markdown","4b09be11":"markdown","821272f4":"markdown","7dbcb5c9":"markdown","63d9472c":"markdown","5708fe71":"markdown","484de4f5":"markdown","0921a4cc":"markdown","17f718ef":"markdown","97884b24":"markdown","5eef2e53":"markdown"},"source":{"1f561237":"import pandas as pd\nimport numpy as np\nimport datetime as dt\nfrom sklearn.model_selection import train_test_split\nimport statistics as st\nimport seaborn as sns\nimport copy\nimport math\nimport scipy as sp\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import OneHotEncoder,StandardScaler\nfrom sklearn.decomposition import PCA, KernelPCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.neighbors import NearestNeighbors\nimport plotly.graph_objects as go\n!pip install category_encoders\nimport category_encoders as ce\nfrom category_encoders import TargetEncoder\n!pip install bioinfokit\nfrom bioinfokit.visuz import cluster\nimport plotly\n!pip install umap\nimport umap.umap_ as umap\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA","1ece803c":"def plot_3d(component1,component2,component3, color, x,y,z):\n  fig = go.Figure(data=[go.Scatter3d(\n          x=component1,\n          y=component2,\n          z=component3,\n          mode='markers',\n          marker=dict(\n              size=10,\n              color=color,                \n              colorscale=[\"firebrick\", 'mediumseagreen' , 'orange', \"steelblue\", 'darkmagenta'],   \n              opacity=1,\n              line_width=1\n          )\n      )])\n  # tight layout\n  fig.update_layout(width=900,height=900, scene_camera = dict(eye=dict(x=x, y=y, z=z)))\n  fig.layout.template = 'plotly_white'\n\n      \n  fig.show()","73a25811":"def dbscan_predict(dbscan_model, X_new, metric=sp.spatial.distance.euclidean):\n\n    y_new = np.ones(shape=len(X_new), dtype=int)*-1 \n\n    for j, x_new in enumerate(X_new):\n        for i, x_core in enumerate(dbscan_model.components_): \n            if metric(x_new, x_core) < dbscan_model.eps:\n                y_new[j] = dbscan_model.labels_[dbscan_model.core_sample_indices_[i]]\n                break\n\n    return y_new","7584385d":"data = pd.read_excel(\"..\/input\/bdpracticafinal\/BDpracticafinal.xlsx\")","32293930":"data.columns = [x.replace(\" \",\"_\") for x in data.columns]\ndata.columns = [x.replace(\"\/\",\"_\") for x in data.columns]\ndata['Date_Sold'] = [dt.datetime(y, x, 15) for x,y in zip(data['Mo_Sold'].values.tolist(), data['Yr_Sold'].values.tolist())]\ndata = data[data.MS_Zoning.isin(['RH', 'RM', 'RL'])].reset_index(drop = True)\ndata","def6e509":"data.Lot_Frontage = data.Lot_Frontage.fillna(st.median(data.Lot_Frontage))\ndata.Mas_Vnr_Type = data.Mas_Vnr_Type.fillna('None')\ndata.Garage_Cars = data.Garage_Cars.fillna(0)\ndata.Garage_Area = data.Garage_Area.fillna(0)\ndata.Garage_Cond = data.Garage_Cond.fillna('Sg')","45e2adc5":"train, test = train_test_split(data, test_size=0.2, random_state=123)\ntrain = train.reset_index(drop = True)\ntest = test.reset_index(drop = True)\n","276da8c9":"train_categorical = copy.deepcopy(train)\n\ntrain_categorical['Bsmt_Cond'] = train_categorical['Bsmt_Cond'].apply(lambda id: {'Ss': 0,'Po': 1, 'Fa': 2,'TA': 3, 'Gd': 4, 'Ex': 5}[str(id)])\ntrain_categorical['Heating_QC'] = train_categorical['Heating_QC'].apply(lambda id: {'Po': 1,'Fa': 2,'TA': 3, 'Gd': 4, 'Ex': 5}[str(id)])\ntrain_categorical['Garage_Cond'] = train_categorical['Garage_Cond'].apply(lambda id: {'Sg': 0,'Po': 1,'Fa': 2,'TA': 3, 'Gd': 4, 'Ex': 5}[str(id)])\ntrain_categorical['Mas_Vnr_Type'] = train_categorical['Mas_Vnr_Type'].apply(lambda id: {'BrkFace': 'BrkFace','CBlock': 'BrkFace','None': 'None','Stone': 'Stone', 'BrkCmn': 'BrkCmn'}[str(id)])\ntrain_categorical['Land_Slope'] = train_categorical['Land_Slope'].apply(lambda id: {'Gtl': 'Gtl','Mod': 'NoGtl','Sev': 'NoGtl'}[str(id)])\ntrain_categorical = train_categorical.drop(columns=['Pool_QC', 'Pool_Area'])\ntrain_categorical","c449f0dd":"plt.figure(figsize=(20,8))\nplt.subplot(131)\nsns.distplot(train_categorical.Year_Built, kde=True, color=\"cadetblue\")\nplt.subplot(132)\nsns.distplot(train_categorical.Year_Remod_Add, kde=True, color=\"cadetblue\")\nplt.subplot(133)\nsns.distplot(train_categorical.Garage_Area, kde=True,color=\"cadetblue\")\nplt.show()","50c73f26":"plt.figure(num = 6, figsize=(23,8))\nplt.subplot(131)\nsns.boxplot(x = train_categorical.Exter_Qual, y = train_categorical.Year_Built, order=['Ex', 'Gd', 'TA', 'Fa'], palette = \"Blues\")\nplt.subplot(132)\nsns.boxplot(x = train_categorical.Exter_Qual, y = train_categorical.Year_Remod_Add, order=['Ex', 'Gd', 'TA', 'Fa'], palette = \"Blues\")\nplt.subplot(133)\nsns.boxplot(x = train_categorical.Exter_Qual, y = train_categorical.Garage_Area, order=['Ex', 'Gd', 'TA', 'Fa'], palette = \"Blues\")\nplt.show()","51686c8b":"train_categorical_encoded1 = copy.deepcopy(train_categorical)\nenc = ce.OneHotEncoder(cols = ['Exter_Qual','Kitchen_Qual'])\nmodel = enc.fit(train_categorical_encoded1)\ntrain_encoded = model.transform(train_categorical_encoded1)\ntrain_encoded.head()","64d58e98":"train_tsne = train_encoded.select_dtypes(np.number)\nx = StandardScaler().fit_transform(train_tsne.dropna())\nfrom sklearn.decomposition import PCA \npca_tsne = PCA(n_components = 3)\npca_result_tsne = pca_tsne.fit_transform(x)\ntsne = TSNE(n_components=3, perplexity = math.sqrt(len(x))).fit_transform(x)","699fa031":"plot_3d(tsne[:,0], tsne[:,1], tsne[:,2], 'cadetblue', 0, 2.5, 0)","be8e4f67":"neighbors = NearestNeighbors()\nneighbors_fit = neighbors.fit(x)\ndistances, indices = neighbors_fit.kneighbors(x)\n\ndistances = np.sort(distances, axis=0)\ndistances = distances[:,1]\nplt.figure(figsize=(10,10))\nplt.plot(distances)\nplt.show()","c4888852":"clustering = DBSCAN(eps=5, min_samples=np.shape(x)[1]).fit(x)\ny_pred_x = clustering.fit_predict(x)\n\nplot_3d(pca_result_tsne[:,0], pca_result_tsne[:,1], pca_result_tsne[:,2], y_pred_x, -1.25, 1.25, 1.25)","f251a0cd":"#Realizo las mismas transformaciones sobre test para poder predecir sobre test en el DBSCAN\ntest_categorical = copy.deepcopy(test)\n\ntest_categorical['Bsmt_Cond'] = test_categorical['Bsmt_Cond'].apply(lambda id: {'Ss': 0,'Po': 1, 'Fa': 2,'TA': 3, 'Gd': 4, 'Ex': 5}[str(id)])\ntest_categorical['Heating_QC'] = test_categorical['Heating_QC'].apply(lambda id: {'Po': 1,'Fa': 2,'TA': 3, 'Gd': 4, 'Ex': 5}[str(id)])\ntest_categorical['Garage_Cond'] = test_categorical['Garage_Cond'].apply(lambda id: {'Sg': 0,'Po': 1,'Fa': 2,'TA': 3, 'Gd': 4, 'Ex': 5}[str(id)])\ntest_categorical['Mas_Vnr_Type'] = test_categorical['Mas_Vnr_Type'].apply(lambda id: {'BrkFace': 'BrkFace','CBlock': 'BrkFace','None': 'None','Stone': 'Stone', 'BrkCmn': 'BrkCmn'}[str(id)])\ntest_categorical['Land_Slope'] = test_categorical['Land_Slope'].apply(lambda id: {'Gtl': 'Gtl','Mod': 'NoGtl','Sev': 'NoGtl'}[str(id)])\ntest_categorical = test_categorical.drop(columns=['Pool_QC', 'Pool_Area'])\n\ntest_categorical_encoded1 = copy.deepcopy(test_categorical)\nenc = ce.OneHotEncoder(cols = ['Exter_Qual','Kitchen_Qual'])\nmodel = enc.fit(test_categorical_encoded1)\ntest_encoded = model.transform(test_categorical_encoded1)\n\ntest_tsne = test_encoded.select_dtypes(np.number)\ntest_tsne =test_tsne.drop(columns=['Kitchen_Qual_5']) \ny = StandardScaler().fit_transform(test_tsne.dropna())\n\npca_result_tsne2 = pca_tsne.fit_transform(y)","9806db99":"clustering = DBSCAN(eps=5, min_samples=np.shape(x)[1]*2).fit(x)\ntest_predict = dbscan_predict(clustering, y)\n\nplot_3d(pca_result_tsne2[:,0], pca_result_tsne2[:,1], pca_result_tsne2[:,2], test_predict, -1.25, 1.25, 0.)","90af87a0":"plot_3d(tsne[:,0], tsne[:,1], tsne[:,2], y_pred_x.tolist(), 0, 2.5, 0)","e0e01d73":"enc_tot = ce.OneHotEncoder(cols = list(train.select_dtypes(\"object\", \"category\").columns))\nmodel_tot = enc_tot.fit(train)\ntrain_tot_encoded = model_tot.transform(train).select_dtypes(np.number)\n\nmodel_tot_test = enc_tot.fit(test)\ntest_tot_encoded = model_tot.transform(test).select_dtypes(np.number)","bbb1dd7d":"x_pca = StandardScaler().fit_transform(train_tot_encoded.dropna())\ny_pca = StandardScaler().fit_transform(test_tot_encoded.dropna())\nfrom sklearn.decomposition import PCA \nPCA = PCA(n_components = 28)\npca = PCA.fit(x_pca)","8400b683":"summary28 = pd.DataFrame({'Variance' : pca.explained_variance_ratio_[0:28],\n                          'VarianceCum' : pca.explained_variance_ratio_[0:28].cumsum(),\n                          'Eigenvalue' : pca.explained_variance_[0:28],\n                          'PC' : np.arange(1, len(pca.explained_variance_ratio_[0:28])+1)})\n\nplt.figure(num = 3, figsize=(20,15))\n\nplt.subplot(211)\nplt.bar(data = summary28,\n         height = 'Variance', x = 'PC', color=\"steelblue\")\nsns.lineplot(data = summary28,\n         y = 'VarianceCum', x = 'PC', color=\"red\")\nfor i, v in enumerate(round(summary28.VarianceCum,3)):\n    plt.text(summary28.PC.tolist()[i], v+0.01, str(v), ha='right', \n             fontsize=12, color = 'red')\nplt.title('Variance and Cumulative Variance of each PC', size=15)\n\nplt.subplot(212)\nplt.bar(data = summary28,\n         height = 'Eigenvalue', x = 'PC', color=\"steelblue\")\nfor i, v in enumerate(round(summary28.Eigenvalue,1)):\n    plt.text(summary28.PC.tolist()[i], v+.1, str(v), ha='center', \n             fontsize=12, color = 'black')\nplt.title('Eigenvalues of each PC', size=15)\nplt.show()","337f377a":"projected = pca.fit_transform(y_pca)\nplot_3d(projected[:,0], projected[:,1], projected[:,2], 'cadetblue', -1.25, 1, 0.5)","a8e641fb":"testComponents = pca.transform(y_pca)\ny_pca_rec = pca.inverse_transform(testComponents)\nprint(np.sort([mean_squared_error(y_pca[i,], y_pca_rec[i,]).round(2) for i in range(len(y_pca))]).tolist()[-2:])","5109bdc0":"from sklearn.decomposition import PCA \nPCA = PCA(n_components = 28)\npca = PCA.fit(x_pca) #tengo que volver a generar el modelo, ya que sino no se podr\u00eda realizar la transformada sobre train, al haberse hecho ya sobre test\ntrainComponents = pca.transform(x_pca)\nx_pca_rec = pca.inverse_transform(trainComponents)\nprint(np.sort([mean_squared_error(x_pca[i,], x_pca_rec[i,]).round(2) for i in range(len(x_pca))]).tolist()[-23:])","1d92a334":"neighbors = NearestNeighbors()\nneighbors_fit = neighbors.fit(projected)\ndistances, indices = neighbors_fit.kneighbors(projected)\n\ndistances = np.sort(distances, axis=0)                           \ndistances = distances[:,1]\nplt.figure(figsize=(10,10))\nplt.plot(distances)\nplt.show()","0a135c10":"clustering2 = DBSCAN(eps=9, min_samples=np.shape(projected)[1]*2).fit(projected)\ny_pred = clustering2.fit_predict(projected)\n\nplot_3d(projected[:,0], projected[:,1], projected[:,2], y_pred, -1.25, 1, 0.5)","779e9397":"train_tsne = train_encoded.select_dtypes(np.number)\nx = StandardScaler().fit_transform(train_tsne.dropna())\nfrom sklearn.decomposition import PCA \npca_tsne = PCA(n_components = 3)\npca_result_tsne = pca_tsne.fit_transform(x)\n\ny_pred = clustering2.fit_predict(x)\n\nreducer = umap.UMAP(random_state = 42, n_components = 3)\nembedding = reducer.fit_transform(x)\n\nplot_3d(reducer.embedding_[:,0], reducer.embedding_[:,1], reducer.embedding_[:,2], y_pred, 0, 2, 0.5 )","3738cf2f":"train_tsne = train_encoded.select_dtypes(np.number)\nx = StandardScaler().fit_transform(train_tsne)\nfrom sklearn.decomposition import PCA \npca_tsne = PCA(n_components = 3)\npca_result_tsne = pca_tsne.fit_transform(x)\n\ny_pred = clustering2.fit_predict(x)\n\n\nX_LDA = LDA().fit_transform(x, y_pred)","53ae4a04":"a = [0]*len(y_pred)\nfor i in range(len(y_pred)):\n    if y_pred[i] == -1:\n        a[i] = 'red'\n    if y_pred[i] == 0:\n        a[i] = 'green'","765544c8":"plt.figure(num = 6, figsize=(12.5,8))\nsns.regplot(x = X_LDA[:,0], y = [1]*len(X_LDA[:,0]), scatter_kws={'facecolors':a, 's' : 80, 'color': 'white'}, fit_reg=False, ci=None)\nplt.show()","d60e16c5":"train_linealidad = copy.deepcopy(train_categorical)\nencoder_tgt = TargetEncoder()\ntrain_linealidad['Exter_Qual'] = encoder_tgt.fit_transform(train_linealidad['Exter_Qual'], train_linealidad['SalePrice'])\nencoder_tgt = TargetEncoder()\ntrain_linealidad['Kitchen_Qual'] = encoder_tgt.fit_transform(train_linealidad['Kitchen_Qual'], train_linealidad['SalePrice'])\ntrain_linealidad = train_linealidad.drop(columns=['Order'])","620351d2":"correlation = train_linealidad[train_linealidad.Yr_Sold.isin([2010,2009])]\ncorrelation = correlation.loc[:, correlation.columns !='Pool_Area']\ncorr_matrix_p = correlation.select_dtypes(include = ['int', 'float']).corr(method = 'pearson')\n\nmask_p = np.zeros_like(corr_matrix_p)\nmask_p[np.triu_indices_from(mask_p)]=True\n\nplt.figure(num = 3, figsize=(20,15))\nsns.heatmap(corr_matrix_p, annot=True, annot_kws={\"size\": 8}, mask = mask_p)\nplt.show()","5d5a6542":"plt.figure(num = 6, figsize=(12.5,8))\nplt.subplot(221)\nsns.regplot(x = train_linealidad.Year_Built, y = train_linealidad.SalePrice, color = 'cadetblue', fit_reg=False)\nplt.subplot(222)\nsns.regplot(x = train_linealidad.Year_Remod_Add, y = train_linealidad.SalePrice, color = 'cadetblue', fit_reg=False)\nplt.subplot(223)\nsns.regplot(x = train_linealidad.Total_Bsmt_SF, y = train_linealidad.SalePrice, color = 'cadetblue', fit_reg=False)\nplt.subplot(224)\nsns.regplot(x = train_linealidad.Garage_Area, y = train_linealidad.SalePrice, color = 'cadetblue', fit_reg=False)\nplt.show()","c7cb7f86":"x_kernel = StandardScaler().fit_transform(train_linealidad.select_dtypes(np.number))\nfrom sklearn.decomposition import PCA \nPCA = PCA()\npca = PCA.fit(x_kernel)\nprojected = pca.fit_transform(x_kernel)\n\nclustering2 = DBSCAN(eps=2.4, min_samples=np.shape(x_kernel)[1]*2.5).fit(x_kernel)\ny_pred = clustering2.fit_predict(x_kernel)\n\nplot_3d(projected[:,0], projected[:,1], projected[:,2], y_pred, -2, -2, .5)","8d424c5b":"transformer = KernelPCA(n_components=40, gamma=1\/np.shape(x_kernel)[1], kernel='rbf')\nX_transK = transformer.fit_transform(x_kernel)\n\nprincipalK = pd.DataFrame(data=X_transK)","77ef80a3":"plot_3d(principalK.iloc[:, 0],principalK.iloc[:, 1], principalK.iloc[:, 2], y_pred, 0, 0, 2.5)","c8d879cb":"explained_variance = np.var(principalK, axis=0)\nexplained_variance_ratio = explained_variance \/ np.sum(explained_variance)\nexplained_variance_ratio\n\nsummary16 = pd.DataFrame({'Variance' : explained_variance_ratio[0:16],\n                          'VarianceCum' : explained_variance_ratio[0:16].cumsum(),\n                          'Eigenvalue' : explained_variance[0:16],\n                          'PC' : np.arange(1, len(explained_variance_ratio[0:16])+1)})\n\nplt.figure(num = 3, figsize=(20,20))\n\nplt.subplot(211)\nplt.bar(data = summary16,\n         height = 'Variance', x = 'PC', color=\"steelblue\")\nsns.lineplot(data = summary16,\n         y = 'VarianceCum', x = 'PC', color=\"red\")\nfor i, v in enumerate(round(summary16.VarianceCum,3)):\n    plt.text(summary16.PC.tolist()[i], v+0.01, str(v), ha='right', \n             fontsize=12, color = 'red')\nplt.title('Variance and Cumulative Variance of each PC', size=15)\nplt.show()","211624f4":"df1 = principalK.iloc[: , :16]\ndf2 = train_linealidad.select_dtypes(np.number)\ncorrelacion_Kernel = pd.DataFrame({'CP1' : df2.corrwith(df1[0]),'CP2' : df2.corrwith(df1[1]),'CP3' : df2.corrwith(df1[2])})\ncorrelacion_Kernel    ","4029b2f6":"Para tratar los valores missing, **utilizo elmismo sitema que en la pr\u00e1ctica de EDA**\n\nDe la tabla, obtengo que las siguientes variables tienen datos missing:\n\n* **`Lot_Frontage`:** 490, decido **sustituir los valores mising por la mediana de la variable** ya que la media se veria afectada por valores at\u00edpicos(no tendr\u00eda sentido sustituirlos por 0 ya que todas las fachadas tienen longitud, y borrarlos supondr\u00eda perder un gran numero de casas.\n* **`Mas_Vnr_Type`:** 23, al existir una categor\u00eda None, **sustituyo los missing por ella.**\n* **`Garage_Cars`:** 1, al haber solo uno y teniendo en cuenta que puede no tener garaje, **sustituyo por un 0.**\n* **`Garage_Area`:** 1, al haber solo uno y teniendo en cuenta que puede no tener garaje, **sustituyo por un 0** (adem\u00e1s, es la misma casa que el anterior)\n* **`Garage_Cond`:** 2, al haber solo dos y teniendo en cuenta que puede no tener garaje, **sustituyo por el valor Sg** (Sin garaje)","4c8e1b18":"He utilizado boxplots para cada variable categ\u00f3rica correlacionada con las continuas multimodales para analizar que , efectivamente, **cada una de las categorias de las variables categoricas se comportan de manera diferente frente a las 3 variables continuas que tienen distintos grupos** ","b6bcc40f":"# **Pregunta 2.1**\n## **Aplica bien un PCA u otro algoritmo de proyecci\u00f3n para identificar grupos de baja frecuencia o peculiares teniendo en cuenta todas las dimensiones posibles (no tienes por qu\u00e9 usar todas).**","90a67d58":"# **Pregunta 3**\n## **Estudiaste la relaci\u00f3n de la variable precio con el resto de las variables cuantitativas durante el a\u00f1o 2009 y 2010. Estudia la correlaci\u00f3n entre ellas y argumenta el uso de PCA o KernelPCA en base a esas relaciones.**","05881bcc":"#### Ra\u00fal Arellano L\u00f3pez","f2af8ff0":"# **Extra** \nComo extra, se a\u00f1ade un UMAP que separa a la perfecci\u00f3n el peque\u00f1o grupo de Outliers y el resto de datos dentro de rango, as\u00ed como un LDA que tambi\u00e9n separa correctamente los datos","ac192edc":"Por \u00faltimo, con la intenci\u00f3n de **averiguar si los datos se relacionan de una manera lineal o no** (y por tanto escoger el Kernel PCA o el PCA simple) realizo los siguientes gr\u00e1ficos de dispersi\u00f3n con las principales variables continuas.","d49fdb75":"Seg\u00fan el modelo generado, **se necesitar\u00edan 16 Componentes Principales para explicar una varianza de entorno al 80%.** En la siguiente parte, analizo las relaciones de tansolo las 3 primeras CP ya que son las m\u00e1s descifrables.\n\nCacular la relaci\u00f3n con cada variable en un PCA simple es muy sencillo, ya que disponemos de los autovalores que se asignan a cada variable en cada CP y podemos obtener su peso en la contribuci\u00f3n al total de la varianza del CP, sin embargo **en el Kernel PCA, los vectores transformados, nunca se calculan explicitamente, directamente se obtienen las proyecciones.** Por ello, la manera que, apriori, mas sencillo me parece de calcular la relacion entre cada CP y las variables, es analizar su correlaci\u00f3n (al fin y al cabo, cada CP se compone de tantas proyecciones como individuos tiene cada variable en los datos originales).","5d1030d8":"Lo primero que hago es **abrir los paquetes que voy autilizar en la pr\u00e1ctica**, especialmente utilizo `sklearn` con distintas funciones para aplicar los algoritmos de cluster y reducci\u00f3n dimensional, as\u00ed como los codificadores de variables categ\u00f3ricas.\n\nAdem\u00e1s, creo la funci\u00f3n `plot_3d()` para hacer gr\u00e1ficas en 3D de los resultados, **cambiando algunas opciones est\u00e9ticas** respecto a la original. Tambi\u00e9n creo la funci\u00f3n `dbscan_predict()`, teniendo en cuenta **distancias euclideas** para asignar los posibles outliers resultantes de aplicar el DBSCAN a los datos test.\n\nPor \u00faltimo, **abro los datos**, que he subido a GutHub para no tener que estar abriendo Drive continuamente y que sea m\u00e1s sencillo procesarlo.","8b7255f2":"Por \u00faltimo, tal y como he indicado arriba, asigno cada individuo de train a los grupos a los que el DBSCAN ha predecido que pertenece cada grupo seg\u00fan el dsarrollo anterior.","9c47aedb":"Para aplicar el DBSCAN, utilizo el mismo procedimiento ya mencionado, primero calculo el *n\u00famero minimo de individuos necesario para crear un grupo*, en este caso, utilizo el numero de variables por dos, ya que quiero que se generen pocos grupos (realmente dos: outliers y valores en rango). \n\nPara el *epsilon*, utilizo la estimaci\u00f3n de antes, pero con los nuevos datos, lo que me da un epsilon de 9","cbed5ce9":"Los valores missing ya los he tratado en la anterior pregunta\n\n**Hay algunas variables categoricas cuyas categor\u00edas no estan correctamente definidas**, al tener poca frecuencia o al representar condiciones que bien podr\u00edan ser representadas en una escala num\u00e9rica. Por ello, lo primero que hago es **analizar la frecuencia de cada una de las categor\u00edas en cada variable categ\u00f3rica y las posibles transformaciones que se pueden llevar a cabo.**\n\n* **`'MS_Zoning'`:** La categor\u00eda RL es mayoritaria, con un 82% de los registros, y la categor\u00eda RH no llega al 1% de los registros. Quiz\u00e1s podr\u00edamos unificar las categor\u00edas RM y RH en una categor\u00eda, pero si lo que queremos es identificar grupos de casas con similares condiciones (cluster) no deber\u00edamos unificar dos categor\u00edas de una variable tan significativa como esta, ya que es por la que se nos ha pedido que filtremos al comenzar la pr\u00e1ctica.\n\n* **`'Land_Contour'`:** Pese a existir un grupo mayoritaio, el resto de grupos tienen una presencia suficiente como para poder tenerlos en cuenta como variables diferenciadoras a la hora de generar grupos.\n\n* **`'Land_Slope'`:** Debido a la baja frecuencia de las categor\u00edas de pendiente fuerte y media, **tendr\u00eda sentido utilizar esta variable como una categ\u00f3rica de dos categor\u00edas: pendiente suave o pendiente no suave.**\n\n* **`'Mas_Vnr_Type'`:** Debido a que la categor\u00eda de bloque de cemento tan solo tiene un registro, **he decidido unirlo a la categor\u00eda de ladrillo visto**, ya que presupongo que, arquitectonicamente, las casas que poseen estas dos caracter\u00edsticas, son similares. De esta manera, al aplicar un posible One Hot Encoder, no generar\u00eda una variable con 2.208 ceros y un solo uno.\n\n* **`'Exter_Qual'`:** Las variables tienen una frecuencia suficiente como para tenerlas en cuenta todas. Podr\u00edamos asignar variables numer\u00edcas a las categor\u00edas (Excelente 5, Bueno 4, Medio 3, Justo 2, Pobre 1)\n\n* **`'Bsmt_Cond'`:** **Voy a asignar variables numer\u00edcas a las categor\u00edas (Excelente 5, Bueno 4, Medio 3, Justo 2, Pobre 1)**\n\n* **`'Heating_QC'`:** **Voy a asignar variables numer\u00edcas a las categor\u00edas (Excelente 5, Bueno 4, Medio 3, Justo 2, Pobre 1)**\n\n* **`'Central_Air'`:** Las variables tienen una frecuencia suficiente como para tenerlas en cuenta todas.\n\n* **`'Kitchen_Qual'`:** Las variables tienen una frecuencia suficiente como para tenerlas en cuenta todas. Podr\u00edamos asignar variables numer\u00edcas a las categor\u00edas (Excelente 5, Bueno 4, Medio 3, Justo 2, Pobre 1)\n\n* **`'Garage_Cond'`:** **Voy a asignar variables numer\u00edcas a las categor\u00edas (Excelente 5, Bueno 4, Medio 3, Justo 2, Pobre 1)**\n\n* **`'Pool_QC'`:** Debido a que el 99% de las casas no tiene piscina, **he decidido eliminar esta variable**\n\nA continuaci\u00f3n realizo las transformaciones indicadas en negrita y despues aplico un **One Hot Encoder sobre los datos resultantes**. De esta manera, puedo **asignar un orden a las variables categ\u00f3ricas ordinales** (principalemnte las de calidad) y **codificar las categ\u00f3ricas que queden despues de agrupar aquellas que tienen una baja frecuencia**, evitando generar dummies con un altisimoporcentaje de ceros que puede ser malinterpretada por alguno de los algoritmos (como el PCA) al ser 'identica' a las otras variables (La correlaci\u00f3n de una variable de todo 0s y un solo uno con otras variables podr\u00eda ser de pr\u00e1cticamente 1, y para el PCA necesitamos que est\u00e9n incorrelacionadas entre si)\n\n*Utilizo la funci\u00f3n copy.deepcopy() para evitar que los cambios que realizo sobre train_categorical se copien en la tabla de datos original, que prefiero mantener intacta*","58be2aeb":"Adem\u00e1s de **tratar los datos**, voy a **tratar los valores missing** para poder crear el conjunto de entrenamiento y de test sin NAs.\n\nEmpiezo **sustituyendo los espacios por barras bajas \"_\")** con `replace()` utilizando un bucle for para aplicarlo a todas las columnas. **Creo una nueva variable** `Date_Sold` que contiene la fecha de venta (como nos dan tansolo el mes de venta, presupongo que todas se venden en d\u00edas 15) y que es de tipo DateTime\n\nAdem\u00e1s, **filtro la zona en la que se ubica la vivienda a zonas residenciales de alta, media y baja densidad**, tal y como se indica en el enunaciado de la pr\u00e1ctica.","cb37bd1d":"Al aplicarlo, vemos como el n\u00famero de outliers es muy grande en train (tiene m\u00e1s registros) y que si tenemos en cuenta **los valores por encima de 2**, aparecen unos 23 outliers (**en torno al 1% de los datos**). \n\n*Como no queremos que el modelo se vea afectado por los outliers, deber\u00edamos eliminarlos de la tabla de train y volver a repetir el proceso. No lo hago ya que no es el principal objetivo de la pr\u00e1ctica, y afectar\u00eda a los siguientes desarrollos.*\n\nEstos individuos no se explican correctamente con las primeras CP, sino con las ultimas, por lo que ser\u00edan outliers.\n\n**Para verlos gr\u00e1ficamente en la gr\u00e1fica qu ya se ha generado, se va a predecir si forman parte del grupo mayoritario o no en el siguiente ejercicio.**","ef7a969e":"# **Pregunta 2.2**\n## **\u00bfQu\u00e9 algoritmo de clustering y sobre que variables (podr\u00edan ser las componentes anteriores...) aplicar\u00edas para identificar adecuadamente esos valores raros?**","0cd1089c":"Si tenemos en cuenta como outliers aquellos valores cuyo **error cuadr\u00e1tico medio es mayor a 1**, en la transformada de test, tan solo encontramos 2 outliers, lo que supone **un 0.7% de los datos aproximadamente.** De estamanera, estos individuos se explicar\u00edan por las CP que suponen el \u00faltimo 20% de varianza explicada, y no por las primeras que engloban el 80%.","58dd6492":"A continuaci\u00f3n, **voy a realizar un DBSCAN para asignar a cada registro un grupo de pertenencia, y as\u00ed poder certificar que el T-SNE se ha aplicado correctamente**\n\nPara aplicar el algor\u00edtmo de clustering, lo primero que hago es **establecer el *n\u00famero m\u00ednimo* de individuos necesario para generar un grupo**. He decidido que este numero sea igual a **el n\u00famero de variables que contienen los datos** (`min_samples=np.shape(x)[1]`) y no un n\u00famero mayor ya que as\u00ed intento que se generen el m\u00e1ximo n\u00famero de grpos posibles (al requrir menor numero de individuos para generar un grupo, se tendr\u00e1n en cuenta un mayor n\u00famero de grupos, tambi\u00e9n aquellos m\u00e1s peque\u00f1os) ya que seg\u00fan he visto en el T-SNE, a priori creo que hay varios grupos que no se componen por un gran n\u00famero de registros y otros muy grandes.\n\nLo segundo que decido es **el valor de *epsilon***, es decir, el radio del c\u00edculo centrado en el individuo que va a establecer si dos individuos est\u00e1n suficientemente cercanos como para pertenecer al mismo grupo o si son muy lejanos, seg\u00fan el criterio de el vecino m\u00e1s cercano. Para ello, he creado las distancias entre los individuos seg\u00fan el criterio indicado, y he realizado una gr\u00e1fica de codo para determinar el valor \u00f3ptimo de epsilon. He decidido que tenga un valor de 5, tal y como se ve en la gr\u00e1fica.\n\n**Todo ello lo he realizado debido a la informaci\u00f3n de la siguiente <a href=\"https:\/\/medium.com\/@tarammullin\/dbscan-parameter-estimation-ff8330e3a3bd\">publicaci\u00f3n.<\/a>**","d4ac6977":"En esta gr\u00e1fica, **se pueden comenzar a intuir individuos fuera de rango que no se explican correctamente con las primeras CP que explican el 80% de los datos.** Para certificar que existen estos valores, a continuaci\u00f3n se van a calcular los **errores cuadr\u00e1tico medios de los datos test y train** al hacer la transformada del modelo sobre estos conjuntos de datos. Los valores con errores cuadraticos medios mayores suponen que, al transformar el individuo sobre el nuevo modelo generado, difiere mucho del original, es decir, que el modelo que explica el 80% de la varianza (o informaci\u00f3n) no es capaz de recalcular el valor de ese individuo. Esto sucede ya que, al ser un outlier, se va a explicar por las CP que menor varianza explican (las \u00faltimas CP) y que no se incluyen en el modelo.\n\nEn el siguiente ejercicio, **se aplica un DBSCAN para predecir si los valores son outliers (no pertenecen al grupo mayoritario) o pertenecen al grupo mayoritario (y por tanto se explican por los CP que contienen el 80% de la informaci\u00f3n).**","ad0a25b7":"**Esta gr\u00e1fica se ha creado con los individuos ubicados en las coordenadas generadas por el PCA con el que se ha creado el T-SNE y que pretenden esplicar el mayor % de varianza posible.**\n\nEn la gr\u00e1fica se aprecian los **5 grupos generados en el DBSCAN**, existe un grupo mayoritario (*verde*) muy bien definido, as\u00ed como otros dos (*azul* y *naranja*) que se diferencian correctamente. Por otra parte, el grupo *morado* no se diferencia tan bien, debido seguramente a que las caracter\u00edsticas que discriminan si el individuo pertenece o no a ese cluster, no estan correctamente representadas en las tres primeras componentes principales. \n\nPor \u00faltimo, aparecen los **valores rojos** que no pertenecen a ning\u00fan grupo y que ser\u00edan los **outliers**. Realmente, parece que algunos outliers se agrupan en grupos de baja frecuencia, quiz\u00e1s si fuesemos menos severos con la definici\u00f3n de outlier que hemos hecho (en funci\u00f3n del epsilon y del n\u00famero m\u00ednimo) se generar\u00edan grupos de outliers o pasar\u00edan a formar parte a otro grupo.\n\n**A continuaci\u00f3n, voy a repetir el DBSCAN, entrenandolo con los datos train, pero generando los grupos con los datos de test** (utilizando la funci\u00f3n creada al comienzo de la pr\u00e1ctica). De esta manera, **se predice el grupo al que pertenecen los individuos de train (que componen el anterior gr\u00e1fico) utilizando los datos de test, aportando mayor robustez al modelo.**","174ed8fc":"Las variales numericas indentificadas como bimodales (A\u00f1o de construcci\u00f3n, A\u00f1o de reforma y Area del garaje) est\u00e1n especialmente relacionadas con las siguientes variables categ\u00f3ricas:\n\n* **MS_Zoning y Year_Built**: las zonas en las que se contruye var\u00eda seg\u00fan los a\u00f1os\n* **Exter_Qual y Year_Built, Year_Remod_Add y Garge_Area**: Cuanto m\u00e1s reciente es la casa o su modificaci\u00f3n,mejor es su calidad exterior, lo mismo con el \u00e1rea del garaje\n* **Central_Air y Year_Built y Year_Remod_Add**: Las viviendas m\u00e1s recientes o con reformas m\u00e1s recientes si que tienen aire acondicionado, frente las m\u00e1s antiguas.\n* **Kitchen_Qual y Year_Built y Year_Remod_Add**: Las viviendas m\u00e1s recientes o con reformas m\u00e1s recientes tienen cocinas de mayor calidad que las m\u00e1s antiguas.\n\nComo se puede ver, las casas m\u00e1s recientes o con garajes m\u00e1s grandes (y por tanto casas m\u00e1s grandes) son aquellas que mejor calidd en sus elementos tiene, por lo que **se podr\u00edan evidenciar ciertos grupos**, al tener en cuenta que los a\u00f1os de construcci\u00f3n, remodelado y areas del garaje (o de la casa) tienen distintas modas (por ejemplo,  viviendas de calidad construidas en los a\u00f1os 60 o viviendas de calidad construidas hoy, o lo mismo con las reformas)\n\nPor lo tanto, **he decidido hacer el One Hot Encoder con las variables referentes a la calidad de los elementos de la casa que contiuaban siendo categ\u00f3ricas tras la primera transformaci\u00f3n** ya que, adem\u00e1s de tener relaci\u00f3n con el precio, que supone una variable fundamental en este an\u00e1lisis, su relaci\u00f3n con variables continuas que presentan distintas modas (como los a\u00f1os de construcci\u00f3n y remodelaci\u00f3n) es muy clara. Adem\u00e1s, lo he aplicado sobre la variable de zona.\n","c60c9794":"# **Pregunta 3.1**\n## **Aplica el modelo elegido y describe las 3 primeras componentes generadas, \u00bfqu\u00e9 varianza explica cada una? \u00bfCon qu\u00e9 variables se relacionada cada una? \u00bfC\u00f3mo indicadores de varianza en el sistema y en base a la relaci\u00f3n con otras variables que nombres les dar\u00edas?**","af9b9895":"Despu\u00e9s de esto, y teniendo en cuenta que muchas variables son categoricas (por mucho que se haya aplicado el target encoder), **dudo de la linealidad, y me planteo aplicar un KernelPCA**, aun que para estar m\u00e1s seguro, primero aplicar\u00e9 un PCA, ver\u00e9 como se presentan los posibles grupos (agrupados segun un DBSCAN) en las CP. \n\n**En el caso de que estos grupos no puedan ser bien diferenciados mediante ejes ortogonales (lineales) deber\u00e9 aplicar un Kernel PCA en vez de un PCA simple (tal y como pasa en el t\u00edpico ejemplo de dos grupos de datos distribuidos en las CP como circulos conc\u00e9ntricos)**\n\nMi planteamiento se basa en ejemplos como el siguiente: \n<img src= \"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAB4AAAAN6CAYAAABv5FSqAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAMrwSURBVHhe7N07ety2\/jBg6luLncJPVmCvwDlNqrTprNJuTpcy3b+xyrhLmyrNsVZgryCPi0h70TfQDCwa5gW8396XD21xhgQBkARB\/DSjq4eTAgAAAAAAAIDN+3+X\/wEAAAAAAADYOAFgAAAAAAAAgJ0QAAYAAAAAAADYCQFgAAAAAAAAgJ0QAAYAAAAAAADYCQFgAAAAAAAAgJ0QAAYAAAAAAADYCQFgAAAAAAAAgJ0QAAYAAAAAAADYCQFgAAAAAAAAgJ0QAIY9u78pXl1dFVdf51fFzf3lvVr3xc2rsO51cXt5pVnX9dvkpndbXH9TtvL6l\/de3ZxSW6Ox6wwAOLa0XxTnir7f7XWyTlV\/JPZVTvN1e2\/l9rqc3lXxtElNvjLSHNeUfS\/9OgBgKsv28aJzX6+cnj4ewBYIAMNehY7f83dF8f6ueHh4eJzv3hfFu+flQbmtCp2wn4oPxZvi42PZPp5++lD8tNqA7whCMH\/7Bw4AmNLL98Xdpd937h99PvX9ngYI729eFVc\/nXpQH+M6d8X7l6c+VDqIeP+\/4q\/Pp+ReviyKD383DnqFNE9Jfk3z45vTJj8l6b35eNnfaT51SF9++GmBAcIR6ZcBAHNaoI93dg6Chr5eJX08gFUTAIZdui2uQ+\/s1EH88+2zy2tF8eztn6cOYBiUa\/rttWfF20+h8\/ZH8frySrOu64\/hrvhy6rAWb36+7PN18UfobH56e8rNDoUO6PN3p+49AECu18V\/Q8fv1IP4cheWb4v\/e3fqTbz5WPzxtdMW+3GfilKXsbj\/31+nrd4Uv\/3242npn+Lf8sBh4tnbT4+DfjHN1z+\/Of37ufjrfzUbPXtb\/BZW+fD7twOSkxqxv\/pdv2yJvjAAcFzz9PHOn\/J9XoSks+jjAayOADDs0e3fRfjlvJe\/\/OfUXSl7Vvznl9BJ\/FD8\/RgBvnxly6tXl6+KDoHhiq84CZ2g+HUur66L62\/eT9ePad4UN6WvA\/zmF+jK6T3OyW8k5mr9bcW\/il9L+8nPQyxDLOt5\/vaXAC\/rxLnt08fl\/V3\/7\/JiSW1+TvX766UDGn6TMtbzWHUIABzDpX\/45ue2Iaz74n\/hoyHhF+1e\/\/z4CZPaYG6F+3\/\/efz\/xx\/qfy0vBonPg5aptn5YVf81iH3SOJf6st\/1V4OWvlza13rMQFW\/rCrtprzE\/Df0lQEAck3axwvfvBc+TXxZbKGPd3pNHw9YEQFg2KGmgbdnP4Tf8iuKf8q\/5nfq4fxyV\/dbbacOTPgNuPh1M7+d+kKPPaIWn\/8qiv+GNMNX05y2+T12uC7pff2amMtX1\/za5eubXxd\/hO8XDF\/7fOlcVW77tVw98\/D51IX+Lbx\/7uw+fZ1h6NT9VHz4+hU8p+0\/vyue1+UjrcP\/Fo9fufOkKT\/Pird\/vi8e+9qP74djNEYdAgD7dvk0yKmXEMYDY\/+wVfxqwBfPTwvPixenTsjnv\/6X2cf4dp9tvumPpmr7YRdf+3mXvtHjJ1TinweJX3tYHpQra+vLJX2t8\/daF6e3K\/plqcy81PaVAQCazNXHC9+21+\/Tr\/p4l32fFvXxgCUJAAPho8LFf+o+pJF+mvj1fx87aK2+pnnuVBafvxTnXwC8fF3zH88vvzUX\/pZv+f1Mr\/947Kw9xoFDZy4EgtNfqxuah1OH8b+PPb5nxdvH77G5\/Bbjd5+wvnz9zqmTV\/nLk+n6z\/5TPH4Q+6uudTJSHQIA+xL7RI9z6B+8LN7fdRu4O3814Mvil8dO1OXbY+r6OInb63Of5M3HfoOF36jrh0Xl\/mvsa73\/72W\/cZsPxe9VX5HS1pe7vP\/1kzSXfuen8nco1snNS20\/FQAgsXAfb1T6eACzEQCGHar8lO9FztfylXVdv134jbnQYX1e\/PXL3dffiOvr9R\/ht+rOvzWY\/3dG+uch1Gmsk8\/vnl8631fF88ffvqz+mpv2Ouyan3HrEADYia+fdojz0999i\/3DZpevBix+LGK35bxd+1cE3t+8Kn76ELJwV\/r7c8269i\/rPk3St39b15eL7\/fRNS8AAK0W7OP1oY8HsA4CwLBHj3\/L49S9+e6rXGKHL+9r+YKmYHIv8bftPia\/YffyRRG+hKaf+LeNqwOw3xmQh9DRi3USBjifOt\/nuWrAs7UOu+ZnkjoEAHbt0j\/88Hf1F+Y9unw1YPgkw0+XQbOrENU9afyKwNvr8+Dam49Zn6C4\/Tuk+bJ4\/AbCDuoG3Lr2V9v6cvH9PrrmBQBgkCn7eB3p4wGsiwAw7NLr89\/IDV8RU\/pa5PubX4vz2FyHr4lJg8m3\/\/eYxlCxY3p\/8\/tjMLPTV6LcXp87q1\/L1j2wHbTm4VR\/\/\/e4yn1x83tY45L+dwH20\/uPX8Vc8zdIMuuwNj\/PfiiquqiD6hAAOJjLV+B9+Kl46h7GPsz5b6+dvxowHTS7fNNK7VcE3hbXjwOIL4v35+\/za3Z\/U5y7Vb99\/eRKpbp+WJXY13r3f5e+2NM2v1XtpK0vd3n\/699su\/Q9X4VKqumXfdU1LwAAg0zVx+tIHw9gdQSAYa\/C37G4e1+8PHUAH4Olp\/n5u6J4f1f9KdV6pWBySOfvF3l\/A7jOKV+Pf7f3kq\/n734s3j8m+E+R\/Ut0pzTuLp3bc9meF+8+d\/j7J7l5ePm+ePF3Vfrhb\/B+LN7EOnl8\/03x8aFu\/6f1w7Goq8PW\/Lwufv76\/qnz\/nyEOgQADufZ20\/Fw6kT8eGn0H8p92HC1wjGX6iLfxsuevqmlaqvCPz6i2in9989j+leBtKir32203zqkH5+87F4aOuQ1vbDqoS+WRjEjJ9qyeibNfblkr5bCHB\/\/XRz0i\/7rkq65gUAYJgp+nhZ9PH08YBVu3oIv\/IDkC389tzeOznhb+z+VHwIf2Pl09tTlxgAgHlM0Q87Qv8VAGDN9PEA5uYTwECz+5vi1eNvtsWvN74rvoRfHHzzs44VAADb8fJF0fFP0gEAsHb6eACVBICBZs\/eFn8+fr1w\/IqTn04\/vSk+dvseaQAAmN39zavLV\/QVxZvffLMLAMAe6OMBtPMV0AAAAAAAAAA74RPAAAAAAAAAADshAAwAAAAAAACwEwLAAAAAAAAAADshAAwAAAAAAACwEwLAAAAAAAAAADshAAwAAAAAAACwEwLAAAAAAAAAADshAAwAAAAAAACwEwLAAAAAAAAAADshAAwAAAAAAACwEwLAAAAAAAAAADshAAwAAAAAAACwEwLAAAAAAAAAADshAAwAAAAAAACwEwLAAAAAAAAAADtx9XBy+Xm3rq6uLj8BAHt1gC4NCX08ANg3\/btj0scDgH3Tx5vHYQLATigA2C\/3+mNy3AFgv9znj8uxB4D9cp+fj6+ABgAAAAAAANgJAWAAAAAAAACAnRAABgAAAAAAANgJAWAAAAAAAACAnRAABgAAAAAAANgJAWAAAAAAoJvb6+Lq6qpiflXc3F\/WAQBgEQLAAAAAAEAH98XN7x+KNx8fioeHZL77pfjr15vTGgAALEUAGAAAAADo4K748vlN8fPry2LZsx+KHz9\/Oa0BAMBSBIABAAAAgA6eFy9efij+vr0slt3\/W\/xz+REAgGVcPYTvZtm58PdHDlBMoMrp+v+qqh1oe3\/ttp5\/GIl7\/TE57rBR+i9ABvf5Dbi\/KV49f1d8viw+eVm8v\/tUvH12WezIsQeA\/XKfn48AMLBf5cHFqNwWtL2\/dlvPP4zIvf6YHHfYIP0XIJP7\/HE59gCwX+7z8\/EV0AAAAADASG6L66vr07\/NwgBw1QwAwHA+AQzsV9WDY7ktaHt\/7baefxiRe\/0xOe6wQfovQCb3+eNy7AFgv9zn5+MTwMB2hAHDOOdIbyRtN5at3Xi6lg8AYGn6LwAAADA5AWBgfaoCvWnQt0sQOM5luduvXV35AADWSv8FAAAAJiUADFsSg6J7CV5WScu257ICAAAAAACMTAAYtmJLgdGQtzhPaY59AABAMFcfF2ATbovrU3sY\/o5f9Xx9WgMAgKVcPRzgry2Hjqc\/Ks3mnc7j76zxvO6Sz\/K6cZ2m7avei\/rURdX+57LkvmGH3OuPyXEHJjd2\/xPI5j6\/BSEI\/Hvx4u5T8fbZ5aUROPYAsF\/u8\/MRAIatqBp8GvO8Lqc\/JN3cfDat15aXqetiqK3nHzbIvf6YHHfgO239sC6q+mxlQ9IfM5+wU+7zG3F7XVz9\/qK4+\/S2GCsG7NgDwH65z89HABi2ZKqBonK6Ud\/0c9Mass+x8jtFfebkbaz8A1+51x+T4w58Y+w+VlV6ZX3T1heELO7zx+XYA8B+uc\/Px98Ahi0JDWOc1yrN2xR5HWMf6cBb1UDcloXyxBkAgHGtuT8OAADA4a0rABy+NubqqmJ+VdzcX9YB+jtdT1\/nKYUBsTjXSd\/rOoiWs48hpqyrIWXPyVf63hRlAADYu6o+W5wBAABgxVYUAL4vbn7\/ULz5+HB6nk7mu1+Kv369Oa0B9NYUFEwHsdLlqYT9xHlObQHRIQHU3LrsU\/Yh+Roq7CvOAABrlNsP66JPn63NFPkEAACAkhUFgO+KL5\/fFD+\/viyWPfuh+PHzl9MawGSmGNxao7oA5pjlbqvLrQVT03xuJd8AwPG09cPWoks+u\/Ydu64PAADA7qwoAPy8ePHyQ\/H37WWx7P7f4p\/Lj7A7Uw3QjJFuOY3yvDdzDRBW1d8U9ZmWZ67yAQC0if2hKfpAe9S179h1fQAAAHbp6iF8x\/Ja3N8Ur56\/Kz5fFp+8LN7ffSrePrssdhT+jvCaiglfVQ3IpOdqeZ3c87gu3S5pVaVRttVrKqfOgz713qSpPrukP3a+coyVd5iQe\/0xOe6wMVV9Ctdws651po7ZEff543LsAWC\/3Ofns64A8EScUKxW2wBN2\/tVqrYJqrYrrxver9u2ypavqbTcY2hLs6lut1CXW89\/aopzgEW51x+T4w4bU9WfcA0361pn6pgdcZ8\/LsceAPbLfX4+K\/oK6Ca3xfXV9enfZuHEqZrhMLqc7+m6c10rYT9xXkq4wcR5DEPqcis3uzHra2lDjhcAwJzS\/ldbf6zr+gAAAOySTwDD0srBp\/Q8rQpMNZ3LdYGsqm2GBL36Xk9dy5OrqQ7Hlu6rb51Pnc+pTHUM57SHMvAd9\/pjctxhY9J7sOsXaOA+f1yOPQDsl\/v8fDbyCWDYmTD4FefQ2MU5lb7Wp2Hss00U85XOaxLqsCxdHlOXfVW9t9Y67CLN+5bLAgDMZ8o+GgAAAPANAWCYW5cgYtAlaJgbnKsLTq5dyHecyTNFncXzcQvnTJU031stBwDrMsU9dy5bzjsAAADwHQFg2Jsxg3NjDwIOCbyleVnLAOWQeo4DrekcVb3WRbpd33T2KF4jQ44fAERj3HPDNnGe0xh5BwAAAFZlRQHg2+L66qoI3\/9dPV+f1oCNO53LhxLKG+do7MBbms6UAb0u+2rLR9O5kNZZ0LQ+34r1p84A2Iq2+\/4e7m1z9tmOYA\/nBAAAAJNZUQD4dfHHw8fiTfGyeH\/3UIQ\/Av3t\/MdpDdiwusGZJQa\/0n1OkYe0vFMOToX8x3lqc+5rr+Jg5RTnxJznHZDv\/qZ4dboeH3+p77r8K33hFwD9kh80GvveFrYvz3Maux+1VDmWlpb3aOUHAACg1cq+Avp18cfHH4t3v94U95dXYNeGDH4NHfBKB+Cq0hlrcG4MaV7WlLclNZ0Hc9ZZUz7K0vfb1gd24L64+fVd8ePHyy\/1\/fz36dIX9GVnluqn5N5\/o5z15sr7UGlZcusAAAAADmB9fwP49R\/Fw6e3xbPLIlBh7AGvqu3XOPgX8hTnNUnzk5O\/pnWqyli1fs55ENOq2n4sTfkIP8cZOKi74svnN8XP8atcQl\/v4efi7w5B4O\/\/NMh5hlXpes8N53Cc021y0kivgSHXRNe8AwAAAKu2vgAwx1QeANurPgN7W7am8s5xfoXyxTlXeZvyHFW9tiVpfY9V\/03HM62rrdYd7Mrz4sXLf4p\/v\/l6l\/CnP34u\/n71e\/HP5ZUm3\/9pkPMMm1V1jwzndJzL2paPqKoPcCTOCQAAAFoIALO8qgGwvQqDM3E+gjWU90jn1xak50JcDsclznWq3q9afw3nHVDyrHj75y\/FX8+vim\/+\/G8IAv\/2Y\/H5sgQ0GOveVrV9eC3eY6vuq1sxtG62Jp4Payh37vmTux4AAACDXT0c4OMT4SsCfUpkxaoGANZ4vMr5TPPX9N7YpqqvOcswp6b62kOZly5Dbv1GVXnMWa9qnWirx45Rudcfk+POZuXeI9uU0+l7LYyVl6G6lGXMPI9Rh0eWeyzWcp715TxZhPv8cTn2ALBf7vPz8QlgyJEOWJSXm97bktDoxvkIHLezUO44jy3N01HOLQBoM9Y9MmwX5y3r2i8bq\/667pdjcp4AAAAbJADM8sYawFnClh\/+Q97jvGdbPr+mlh77pnOh7\/kS6jvOU3A8Adiqqe+RY+rbDxhL1f7XWn9VeQUAAICZCQCzDmsdwFmjtI761Fk6IDXFANWaBr+cX8M0nS9jnI85aVSt02dfADCVNfV9umi7D1f1A+YsY9X+12pLeR1L2\/kT5a4HAADAKASAIUeXAYs5BjPCPuK8Rlsc\/FprXW7BGOdjThpV64RzK84AMIeqe096H6paZ82q7rFtpi7bHHWXlrdL+ddqiXMv9\/zJXW9t0vxuLf8AAMAhCQBDrqoBizkHA3IHc3LXO7Ip62ZI\/Q\/ZtquqfUx5\/k4hLcMc9ZYrHsc15QmAdm3td\/p6Tjufsw7V5qi72L\/fWj+oSp\/zs01II85HtqfzBAAAOAQBYBiqPAgw1cBImm7dfnLXSwcu0jLEmW5y67\/KkG1TYds4V+madtP5wvfS+u1a3wAsY+n2O+wvzmsyx32\/aR9r6YfkHJ+15HWourK2lR8AAIDVEACGoaoGRrYgDEjFORqrLEMGv8I+40x3Q45hed14DOJrVefLkrqUa2xp3QDA0Ptjek9Z2z2mqg8wZ58g7j\/d51z35KrjU7fPurxuRU5dTl3fAAAADCYADEyjz+BX1eDaFNI8bXWAbipzHYe+6vIzx3Fce90AMK2mPkT4Oc5l6XKucI+J81rUlXEqTfuZ8p6cW\/dj7nMMaX3NdZxSufUHAADAZASA2Ye9DzLkDuasZdCnzpqOU6ibOI9lSP0P2barKdNuM9U5sGSZUnMeSwDGk9t+h9fje3X3tLhOXRpdjXXfjPkdK71Umn663KSqrnK2y5Wbl\/T9MfMwh7HPva7WWH8hD3EGAAA4CAFgtm\/pQYZ0cGWqwZbcwZzc9aqk2\/RJo87Sx2kuQ+u\/77ZRum1dWlX7GbLfHHOdAyHdOOfqs02TWL9T1ykA42pqv8v3ivR+Ufd6rj73i677TNfrm9c6benn7K+u3ofqk5eyPsdnq9KyhuWq17Zi6LEHAADYKAFgGEMcGOkzGBIGIeK8BkPKMlS6zyXysAddjmHVuul2OenMqSl\/fQb5umyz9roBYDzhflCec3VZtyzcU+LcJt1H330uIdbn0DzPfU+uOjZT73Mpsazl8lW9BgAAwGoJALNvYw0wTSXN11rzOSeDS+uw9uOwZP6W3DcA81i6T5beY6a658xdzrH7vk335JB2nLtoq\/umfaJeAAAAVkIAmO2rGpQJxh5gqtN3cOlo6o4Tx+EcAGBqQ\/tla+rThftknMdQl85Y5U3Tb1uu03e7srYyNaWZbluXVng9zkcwpLxt2wxJu80Y5xMAAMAGCQCzD+FBPs5zSgcpphi02JOljhPHUHX95Zxr6TrOT4BtGtovG6sfN8d9pO+9a+q8hfTjXLVcpe7+3bZdlZBW3XHsm2YQ04zpp\/uo2+eU6vKSq8v26Tp991llyrSjIcceAABgowSAoa8xBieqBiGmGPSANagb4Av\/p3NXVdt0GeQzMAhAk\/J9ou5e0fReH233xbb8rNGUee3Tf+hi6vS7SPPSNW9DtwcAAGD1BIDZr3SAaUuDY6kwKBNnjuMIx72ubM51ANaga4B1rHt3uv0Y98W6fG25j5yrSxmnrI94DMY4nmuW1uHc59hR6hkAAKCBADDzmvthPAw2xHkOU+wnrSsDGcew9HEP+4szAGxB2g\/r2i\/rsn3Vurn37iXusVX7CnluKuNUqupuKn3L2DWPOftIj8HYxz+eU2OnG3StjyCsE+cmfdJuMnU9AwAAbIQAMPPZ28P4WIMVYw96wFBTXatTntuuI4BjCfemOJeF9j\/OfXTZvsu60VT32K3pU3dtqtKqOkfalLcp5zFNP76Xvj6Htn22lbmqLG1iWXPWbRPrOK3ntrTT7QAAAKglAAxD5A5WtBkrHVi73PO8z7UQ0+6zLQDrUxfsaVveg\/Re5t6Wp64fkHuOtJ1bMf2m4xG2ifOUcvLSZOj2fbXVcZ2+2wEAAByUADCsXTooM\/cgzZzCQE6cj+5Ixz0KZYzzGJxPANuVtt1baMvHvnePeV8cO29UazpvHYN6Y17f6hkAAOCRADDz8TDeX6irOO\/VFgd6p7bUcU\/3t6bzLpwXcW7ifALYjty2fQva7t1L3mPb8sb0pjgGVddN1\/TXcA2Oue8p6hkAAGBjBICZl4dx2Iapr9U03Zz9pAODSw1SxgHSpfYPsCd92vY+95A1CfmNM9Poe4703W4pVddL1zz3uQaH6FunWzs2AAAACxMAhjGEgZI40516O6YwcBfnrUjPVecuwDTagj1d7yGxn7aGdntNeRnbmspWd4605bFuuxzpNn3SOIK+9RKPi3oFAABoJQDM8bQN+uQop5GmMyTdI6qrLwM7DJGeP84ngO2JgZ6hbXhuXy28Huep5OZli7ZQtjnyONZ5u2ah3uLcV1o\/e64vAACABQgA090YD\/xLSfPcpxxbLPfWGACiSteBwvB+nMvide9aBhhf1za2qi1fon1O97lEHtYoHkv1sU7p9VN1PbXpmkbVtdL3HAn7ijMAAACjEgAmT92DfZ8H\/bGU81Se++i7HTCvoQOF6bXe9dpP91uXj9geaVuAIxnaxrIujuc2DO0bBWOkEYRzpDynmt4DAABgVALAtFvjA3pTnpbO79CBk6NJ60v9sXZxgLTuXE3bIIOcAMtaU19jTXkZ2xbKtuf6X6NyH0j\/CAAAYFYCwBxH2yBDeD9nIKJq4Kg80536A4DtiH2mnH5TjvT+P0V\/oK2vMUceora8bNkWyraFPK7Znupt7LYMAABgRQSAGWYrAwBdHurb1i2\/P1f548BEl3IA30uv2bmvYYCtS9uy8vKQNjasG+el5OQhtudHaNPTeljy2LAuOdfKWKa45qrSGzN9AACAFRAApl3V4M9cD\/x1mvadm68++V9ioMDgBIwrtl992oAcTem6foG9Cu1bbOOmbGOXdMQ+WTyWezyejKPp3Ci\/l66Xc05Ncc2NlUacAQAAVkoAmDzhAT3Oa1HOU3kG9mWLg2xD26Mtlhk4rrSt0nYBVf2g2D8a0kdamvYOAADYCAFgjiEdZIjLdYMP4UE+92HeQz9M50iDbLHdOVKZge2p61Mtra4NBcixlrYMAABgJALAHEd4qI9zWd3rQTqIWLVOX7kDlVX5Bb6Vez3NLff6nTPfa60rYDtCWxbnNUjbs6nat9w2Hca29nv3VNfGFOlWpTlWfgEAAFZEABiW0HWgMg5MGJyA73W9nua2put37XUFbFPavpWXQzsT56HGTKuvNbXpHEN6vk9x\/o9xbU11bZTTG6vsQ\/KabtMnDQAAgBkIAHMcYwxsBB76YT57ut76tkHaGGALQlsV5yht74b0wcZMC3iy9mtrjfmrau8AAABWRgCYY8gdOEgf4use6j30w3yWuN5CGxHnMbS1QWnZligzwFzGbmOr2tA5jF0OOKq+11Lf7QAAAA5AABhScwRelhqohD0a+3pKBxH3NKio7QGWNlUbG9qzOM9hz\/cK1mXv9+6+19KU12BIK84AAAAbJQB8ZFt6sN1SXnPNPVAJY1vTdbn16ymtwynrdOt1BWxH2s4MaXfGTCvHmu5xEM73OI9t7murq7nzV9Unq2sLmt4DAABYmADwUaUPqWt+aB0jr2sf2ICt2VIb0iTkO85T0gYBR1JuW0N7F+ehxkyrSXpPmPoeAUub69rqay35K7cFU7UTIZ04AwAADCAAzHGsZeAAWIe6gbu0jRirzdAGAUdQ17ZGU7Wxc9tLOWBpVddOTvBzj9dgW\/sJAADQgQAwAKTCIGKcc4QBujj3scdBTIA6XdvYtdpLOWBpVddQTp9qimvQ9QwAAOyEAPBRpQ+2a37Q7ZvXqoBM+lq6DORZWxsy97Vc3l+6z6o81K0LwPqs7R4HzCtc83EuKy83vQcAALACAsBHFh9qt\/Cw2jWvVQGZqtfKBGagm67X5VT6Xstpvvu2L21y8te3DABr07dt7Sq0k3GeQsh3nIHjamoLmt7rI01nrHQBAIBDEgAG4LjGHrgDYPq21S\/NwP6k7cWSfbOpf8GkydTtJwAAcBgCwAAwJgN2wF4sGQQBjiVtZ5Zqd9aSD9iE2+L66vr079n9zavTJXN1nl\/dFPeX1wEAWIYAMNsTHsLjXCcNwFT9FnXbMrANU1\/LaZtTtb\/ynKpaP5WzzlBpOQCapG1F37bjaG3P0coLAMHtdfH8y2+nx5iH8\/xnUfwqCAwAsCgB4CPa0sBUmtc0z01lCAGUOEfpa+XldF\/AeqXXa\/laHlPaHvTdX876Oev0VVcOgClN0fZUpTFFu9mHthaWE663OC9h6f3Dwu7\/\/ad4+eL5Zenk2Q\/Fj5+\/FHeXRQAA5icAfDTpA+maH1DnzOuW6gWObq3Xa8hHnAG2YKx2q5xOeR5bVZprCf42mbJOYC\/Sa7nLtZ1eW0OutT75GHP\/sDkfip9e3RTFf34pfry88tXLF0UpJAwAwMyuHsJ3s+xc+PsjByhmnqqH0bXWTe6D8xj531K9wNHNeb3m7mvtbcgB2jj3+mNy3AfIaRfK69TVc1U6TYYcr7Z9LX0u5NaFcxbGldOeTWnp\/e+Y+\/xG3N8Ur56\/Kz4XL4v3d5+Kt0VY\/qv4Jfz87LJOR449AOyX+\/x8BICPZi0Pp+V8VO2\/Kp9BWLdq27b02qylXoB2c1+vOe3LGtqQtnzmlGPD3OuPyXEfYKx2qyqdOkOPVc6+lj4fynkMeRmrnoF6Xa6z9Bodg+t8Mu7zx+XYA8B+uc\/Px1dAH016YS1xoaUPyFUPzFViXsP\/cQ76pleW1kO6DKyH6\/V7Oe1gqKc4A9sTrus4z6G8v\/Lc1xhtzxbaL20tzC+93uquv7QNG9KmleXuv48x2l9YxG1xfXV9+rdZGACumgEAGG5FAeBvO4f3N6+eOn+vbor7y+uMIDyQxnmv+jwwHKFeYC\/mul7TtqSubUnzMXa+wn7jDBxPblvURVO71ZR++l5uezdW+xX2F+ctSPO5lXzD0kKbEeccS7cNU+w\/LftY7SjM4nXxx8Mfp3+bhU\/\/VM0AAAy3zk8A314Xz7\/89tT5+7MofhUEztf1YXmN0g6\/BwA4hi23X6GdivOY0rqYs262fDyAdmO1W1O0fTnSfS6RhxyxftaaP1ibJfs+AAAAO7HKAPD9v\/8UL188vyydPPuh+PHzl+LuskiDLTws5w7WjTVYFuogzm26rAuMK73uXIfLcjyArsbqu3WxxD6BbUrbiSXajdCfinMT\/S624vb6dLp++\/XN5\/lVceNTHAAAi1pZAPhD8dOrm6L4zy\/Fj5dXvnr5oiiFhNm6oYN1pweKr3OVmG76ft36QZd1AQDmkvaX+vafcjWln7vvufMMkCO0RXGeW87zZnit7jlUO8rq3Bc3v38o3nz89uubH+e7X4q\/fvVNfgAAS1pRADj8fZBTJzF83fPzd8WHd7+ef1vw\/qZ4dfV78eLPt8Wz84pMKT5w1j10rkFb3k7nEcBupG1aVRuXsw6wbeG6jvMcyvsrz1303Q44tqo2o+0ZcAvPsW22nHcO6q748vlN8XPVH\/r1TX4AAIu7egi\/mrdz4etnDlDMJ+UHxy7lrnrgXGO9tT0Yl\/PcpUxbKT\/sWd\/2a0przNNcNlT2w93reeS4Zxr7Wj5yuwjMo9zORHXtTZd1l1SVzyjkt+39A3KfX7v74ubV8+LLbw\/FH2kQOHyY4\/mX4reHP4qq+HAbxx4A9st9fj6r\/BvA37strq+uT\/82CydO1Xw44eKJ89GkZW5bLuuyLjCNcN3FeS3WmKe5HLnssBdpX3ho33js9ADWJLRpcR5bU3+qbn\/6Yazas+Ltn++Lf36qGIt7\/lfxy12\/4C8AAOPwCWCenOrpO2utt3JeHVuAw3OvPybHPcOY\/buqtALHAJhC7jPfWO3cmO1lm7p95Zb5INznj8uxB4D9cp+fz0Y+Acws0otuzRdhyFucATgLg4ZxBhjTlO2KtguokvvMl76\/5WfE3DIDAAC0WFcA+Pa6CNH\/7+dXxc39ZR2m5YETYJtO98tvpMvAfoXrPc6ptE+X28drSrNsaJ8xTb9tfwBV4jPs0DZpLmk+t5JvAABgM1YUAL4vbn7\/ULz5+HB69knmu1+Kv369Oa0BAAeRG3wBji0ngBoCC3HOkZNmkJsewBakbVpYDu1fnMcW22VtKQAAMIEVBYDvii+f3xQ\/v74slj37ofjx85fTGlAy5cM4wJLSdk07x6bdFtenc7j6W17CfH1ao1n1dq6LWVUFRgD2phyUTe8z7jsAAMCGrCgA\/Lx48fJD8XfVCOD9v8U\/lx85mPCQHecyD+PA1OranykN2Z\/gDKv1uvjj4WPxpnhZvL+r+KaXhz9OazT7fpvzzMxCncd5LGlajitwFEv0NQEAgMO4eljT6Nn9TfHq+bvi82XxSRgw\/FS8fXZZ7Ch8QsQg4QZVPQjH49j0HsBQS7QxbYN\/ufsvp3OgdtG9fgNur4ur318Ud5\/eFj27dN9x3C+muO4P2pYAfFVuB6Mp2thIW\/sd9\/njcuwBYL\/c5+ezrgDwRJxQG9X0UNz0HsBQS7QxVfuMcvd94LbRvf6YHHcAJlXuW415vzlwn60L9\/njcuwBYL\/c5+ezoq+AZtXCA2qc1yBtIDQYwB6Ftk37BsxlzP7emGkBLCX2xZr6Y3tp7\/ZSDgAA4JEAMO3SB8C5HgjTh+yq5baHcYA+2tqf1BgDZl33CTCmMft7Y6YFsGZjtXdV\/b6QVpynNlY5AACA1RAAZt3Cg3CcAeaU2\/6MOWCWu8866XZ90wH2JbRLcQZgWTltcbqO9hsAAOhIABgAAPZKEAEAAADgcASAaecTZQDbINAD9DVmf0\/fETiKvbR32m0AANgdAWDyhAfAOHcVAhBxBh5dlSY2zoAZMJal+0xD+nupMdMCWLOu7V26XtV2OeuMLewjzgAAwOYJADOtdABTEBi+C\/oKAu\/AmgfMtLuwDVP1mdJ2ycA+wPJy+o456wAAANQQAAYYQfw0b99gbt\/t2IAQxIlzk9z1mtQNEA5JE9g+QQSA8Y3RdwMAAJiIADDAQGnwVhCYr9IBwboBwtz1cgjwwH4IKkAvoU8VJ5hEn75bWCfOAAAAExMAZtoHUYEI+M7DaWLnDO4BXdX1mfbclsS2UnvJQOWAb5jK0mVYRNrOlds\/bSAAADABAeCjq3oQnZoHXBAE3rM1tHFpIMkv48A2rPlaDW1bnMeQprOGtpNNEuBlF7SBAADAyASA9yAOxuU+NHZdfwpryAOrFj\/BsYVBvTSYmxvc7bsdG1YX3JkiYBvSiDNAWdd+WLqe\/htwdFP03QAAAEYkALx1XQfkxhiwC2nEeQxjpcPq5QZ10\/fb1l+DELyNUxd9t2NjcgKxcZ2xBxDHbrOBaaVtwBRtQllc1lawU\/pYjKKqjezSdxu7LQcAAGghAMy32h5M00HBnEFCD7ucbDGoO1QoY5w4kLTNG7MNrBp8bNKnzQaWF9qNOM9hibZiyraSQ6kK8MZfrqt6Dzrr0kaG9+KcKrft2kAAAGBiAsDUP4SOaY59QKJPALbPNlXS7eNyTDsus1O5bV7TIGEqXSdnG4AxpG3ZWP253LaSzVm6v7PUfjm4rn01bSAAADAhAeCtCA+PcS5LHxa38PC4xTwzq\/TTGn0+vZEO\/OUMBPbZpoup02djug4SAoyhbz8srBdnaDBFfyekkU7l16FV3fN0Wc46Syrnb835BAAAVkEAeAvSB7t0ec4BuXQfffc5Z55ZhZygbhzEC1N4P05wOGMN7I3VZgPb09SO6IexAeV+YZW61+E7aTtY1S42rbOG\/lRVnoPwetUMAAAcngDw0Yzx8Bq2ifPSPORuSlNQNx3E2\/qgXlrGqjL3dR4KPU\/sUNqexeW+7fea2mygvy59nrp2BDZiaB9nzH4XPEr7U1VtctrXWrLvpd0HAIDDEwA+ovThtazqQXat0jx6yKVkjABszjZPodjvz7+wfZziclm6nCPdT9V+2Yiug4TaPDiuqus\/zn2V0+jaHnFYsc\/T1P8Yo7\/TV9jXVPvLKXtZ1\/XZkLTtTdvTOAMAACxIAHgL5hqUq3qQzVV+6IUJdRlMi4OAOQOBOeml0m3GzhMHYJAQGKpP3yvdJixrj2jRpd\/Tpb8T0onTEDn7Kuuy33Sdtm26rs\/E0natqp3LWSfHVM\/D2mYAAKAjAeCtCA98ce4iPIDGeSpp2lPui12qGhSrGsTbwmBayFOc5jLnvphB2s7PNeA3x\/0C6KbvNblUOwIdpX2YuFzVDzyHk799Pb6Wvt6mbr9d6H9tTGgH41wnZ50llfNXnqvUvQ4AAByGAPCepQOGexvUTx9qPeSyMn0HBsN25ams6wAnGxUH9Mrt2pRt3t7vF7AF4bqLc1weoqodgYnV9V\/6eArtnqdyuvE1WMSa2tWqe4V2HwAAOBEAPprywGIqfVDcwoNjyGOcGSQOqsWBtbFMle7Y0kHEtkHFPuV5qon6bavea1qfg2lr82IbX9fOA+uUXrNNfbX0+q9rD5qMkQaH09ZXSvsr5x7PeRoqTWOMNKvE\/Kbpdwk2p9sGXbZnI2J7rD0FAABWSgD4qNoGFrs8uHro3bx0oKpq4Cp1Hhr7fiprW84R0w1T28BjqrxtOlUJ6cWpSdX2Xbepy0OOdF9t+2aAGEytazPXJM3jFvIM9NOnv5YaIw0O59xLOk9dnHtf56ksTadrun1V7TfNW1teg7RM6TbBXGViQdpTAABghQSA92zOB1APvZsTB6yqBqraNG3TJ706aVphOQyixYG0sFy3v7rXo7b3o7iPuH78v0o6wDflgF+shyn3cXhHCqimbbe2HJa3pusytH9xhoHSvtRSfZo++61bv6l\/WHbuUZ4nGIU+HAAAUEMAeO\/CA6CHQBJDBp2mGLBKB9LaBuLSPIyVp5BOnOJyWbpcJQ4MxjKU08sRtyureg1GF+8X7hkwv\/S6i8truC6P9MswDDJWfyX2neIUpGnX7Svdbk3SPK0xj2zUGu4VAADA6ggAH0X6MOjhkAZhUC0OnsXBqfLPuXIH64LwXpzmEssUp7J0uUnM81NKT3VWp6mcsR7iVPa0h27HggPQzgMws7RfUtd\/yRXTKctJu5yHKL4Wpzpt73eR5q0qr\/CN8jcsxBkAAGAEAsBHEoIBcYZEHFALUzoI1mVQLGxf9pRq9\/Mu3aZLGn3210fcz5A6yzXHPijZYkBVOw\/blA74CwCwAX37JWkfLWwXpz5yt4vrxX3FqUnb+2Vx3VC+OEGjurbePQAAABiBADD9hIfSOLM56YDU0AGqOMgVpjiYFgfBUlXvV70WldMO6tapUvd6rqHbN6kqR5VYL7nrM7K9BFS12UBfafvnF0x2aez+RlU6597ct+fPWPvL1Wd\/51rJ265uvarXp+xnAgAAgADwHk090J+mO3Q\/U+eXSnEQbujgU3n7dHArZ7ltnRx16aavdxHLFesoLs9pSP7hq7HbbGBd5uhH7eWXYaiU9jfW2P+oylN4bc68lvc1dr8wlqU8AQAAwBACwHuztYH+reX3INJBrarlOK1FHCgbMmBWV66mgbim99rEbftun+azzdD9ATBQ6OfEuazvp2z1o1hQ2g\/p2i\/pqtx\/maov06UMY5W3riz6awdQ19b7ZRsAAGAEAsBHUzfwmMvA4mGEQa04VS1PKQx4laeyMfZflUb5tfK+w9RVnzz22U8XafpT7w9g97r0qarWS5fDgH+cYSNCnydO517TeQrLZelyXyHtOjEfZVWvlcX341R+LUe6Xt12uetxQOW23z0AAAAYkQDwkbQNPLapW99DKhdTDW6VB\/uaBv6a3iuLA5PlKcpNo005zehpb3n1krseNErb6HQ5tO1xhiPrci2k6zRtk5MeLCjtb\/Tpf6T9p7SvVWWsPlcU0iunWd5vmoemfAV1eUv3EcS0mtILctfjwOI9yH0DAAAYgQDw3rQN9Pc11UPoVPllMU2DW1Wv5aoacFurLeWVmSw9oBfa1jiXpfkpLy+dZ5hT07WwZnX9KNcvHT313pJzaqDYJ1qiX1TeZ7r\/pvzk5DWsE9eLP8flrurqfOxjwcpV3Ye05QAAwAACwHtUN9A\/laEPpXPnl0VNMbg4lpyBu6F5bxogrHpvrLqqSqdqf0wgbR+HDuLFNndoOk3GzjPwvbH6PWk\/yvXLhGLfIaf\/kK6Ts01U1\/8Jr3dJZ2pVZSxPZXWvB6Fc6cSOhXY5zrmWasv75BUAAFgFAeAjqRpoHPNBzkMhJ02DW2vRZ1AtDsbVlSsnzdw6Sdfrk9+y89E4p1mVVm6+WIG0ndXuwjLSPlVVHyuqWrdpfRhZ7AcMvd+n25eX0\/5FXd8l5qO8bZW298fwlJPzNIWYbpr+VPtjA7bUl9PvBACATRMApl54wItzl4FONu08BHaeukq3icsxvbg8ljC4WDfAWKVp\/Zy81a2Tk4cu+aySbp+bXprnsY8BG6dth7M+10JYJ85t0nXLfayxjJ0euzBGPyBsk7Nd6JvEaQpN6Ta9l1vmuF6a1rlE45cp1mvcLwdQ10aH13PuJU3iPcB9AAAAuBAAplr64BgfSsuDl+xOOgDVZUCqbt0hadZJB+Licvm1VNN7bXK3bVpvzHI37YcVStvMtbWhVW372vMMU6i6FqZQ1ccqz3303Y7VC\/2HOI0tJ+2m91JPqZ23maq\/kqbbtJ+Yl7K2fKXblMvTtm1fVfnkYMrteNW9qOnelN4D3BMAAIATAeC9CQ97ca7S5UGyzZhpsWlzDVrFgbewvzilphqYq5PuL+ZxDk310KQqz0wstI9xHmLOdnesPAPddB24z1m\/a5qsQnp\/73q\/bzJW2mG7OJWly2OL\/a1yH6b8c5Au52jLd9dyxTz0yUt0rt3zxEHENnvpvli6X31CAADYFAHgpYWHuzgPlaZRl+aYD5JjpsUm9RmM6rpNGDSLA2fptufhsKcpqBpki+\/VyRmYS9fJ2SYVtkmnKjG\/sVxxOWpbjqrSD+s+7b17GVjYmO3umPcgAFYnvc+v7b4f+yJpvtqW68S0ctfvoq6vlatPvqr6e+WJjdniM\/OY\/U4AAGBWAsBdjD1QnqazpgH49AHPA98hpINSYwye5aYZXh9jf0MGw6ryULUcp+BpCO7b\/cb3U3XrV0nXydkmiOnH9avyEt\/jwNZ8D4I906diZrHfUtUfmFJdX6MqP+m6Ybnp\/SphnTjF5VQ5zVx9tumq7z6qythXrLsx06RCDKaOeS9I03KfAQAATgSAcx1xoHyKh1MOr21QKR0Ai8tzDkiFfcapSZqfdDln+7HL1JYnAFag3MdK+1ld+11V2w9Nk0nF+3\/bPTrtR7T1K7rISbstf2Op20\/6elN+ctYtlzGnLsM6Oeu1CXmJU5CmOcY+hop5i9JlJhLb6zHa7Lq0AACAw7p6OLn8vFtXV1en56CBxawK+M6ZZnndpv3mrschlQdzqgabqgZ76galcgaGwra56zUZYxCqvI+2eojS\/dalUdYlvSYhnbZ9VJWjapu6tJryygqN3b5PcV9b0Cj3ejZn08f9CH22I5Sxoy3cj+v6H2Mpl7frvurqqm+e6\/Iyxn5CGlXr16Vdp22fXdOrMkY+YQr6d8fl2APAfrnPz8cngJeUnuR1J3158CxIl8tCGnGGknRgp8sAVhS2iVOTMGCUO2jUd3Ap7qNt+3SdNO9VZakrY9VrqbhOTCNOfeSWrW29sP90nbZtWJku94FcufcgYHxTXNNrc4QyzuipR9Fcj7nrlZW3CVOunD5IX3P1U2J5y+WO+471UX4v11z5H2M\/fcrHioW2Ns4AAMChCQDnmmqgPKQTZ1ixLoNDfQfL+gqDX2MNtLXlO6dcVet0rY++9ddUD7GemtZhg6oG+qpeq+IeBOuUew2zC137HnXrN60Xfo5TWbqca0hfom2fMe10H1P1X6rqpOq1tRmjPurKNVVdM7H0nuEeAgAAhyYA3MVeB8oNMnJRNdBWNQiWK2w3xgBSU77CNJbctMbcZ5Own6qyw1dVA31VrwHb0ecajte+6331lriPp\/2WsNylL9PWF6laTl9Lxf3npBU15blqu\/I0t1jHVftuKsdUYn5y9r1EfS1Cu9lM\/QAAwOYJAG9BGnAeMwCdPtB5wDu8OFAWppxBoiCuX6fu\/fJrT8NS1fuMaYQpXaduu7BuKn0tLtftdw3OpT5PbXLrgRXJGWCb8j4AzG\/Ma3qtfTnt1mB1\/Zux5KSd24eI\/ZTy+ulynfI6aZ7alsvi\/srptemybth3l\/WDum2aypHqus9Ulzo8jLnbzZB+Oq9Zmr+15xcAAKgkALwVYdAszmuwlYdXvqobfOo7CBTSi1OOpv2k7\/XNU1lTvp5yvpLrqUFOXYR14lSl7nVWoMsA29ruA8AwR7imj1DGHtL+R1V\/pOnePWX\/JScv5x7HecrRlt80nbicm\/4Qc+xjDDnnTB9TpUtJXd9uiufotK3V9gIAwKEJANNdl4AFswqDWHGqEgZ1qgZ26tavUpdGkL5et15Z3b675OnIcutJfe5U1UCfwT9YXugbxbkr1\/AhxP5UTl8p6rp+1GWbtL\/Q1n8I7+f0MdI8tOWpKc2c\/ZV1Xb+vPscmda7N76cgpB+nocppj5kuE8u5t8S+oHsHAAAcngDw0VUNMuY8WLI6YQCnLF3uqmr7rgNDbXnom8cpBqjmHvQyyMZoqgb6ql4D5pH2n\/r0p8rXcFu\/LL3OXfcsIKdPF\/o+cdqCNJ9N+Y7vddkm1VSH8b3wf5xyteWhS1q7scV2s+ne0naf6GpI\/YydFwAAoDcBYM4PdHFOH9Q8uG3e0zBR87Fse7\/sKcVvt0mXg7jekAGxrtK0Yx7C1KQuT2PlNaQTp7a8RGHd4KkE+ceJDagbYBtj8GyMNIBlpddv3fVc7svl0D6sXrz\/R+lylbptqvoO4b2cNMf01JP5Nj91+R5Duq9U277OtXSeovLPQXk53V9VeYM0jRxVaec6l+A8cdHUbo7ZRta1y7ntdZs0j2O16031U2eqvAAAAL0IANNd1UOgh7tVqhsoqhv8yRlI6jv4FNZ7GnpqH0jIWSdVlXbX\/Kbbx+Wq1+M0lZh2Uxnq9p++PmU+GSgdYBtj8MwAHFBH+7AZ4d4dpyahXxCn8vrxtSHa9p0rzUe6HPMd9xf\/r9L0Xo64n5hO\/L9NrM9y3nO3ZUOmaCPLfb1yn2+NQnnjDAAAbJoAMP1UPbR6SFxUOgDVd0AqDmpVbV8e8BpDVZ7j1CZdJ2ebKA7exSkV8xDTLK9Xfr2LPtvkStOOy+ecnicABsodFE\/7SGse6Gfz0n5Muc\/SJme93LSm6Gs89WK+naaQppsu19VDbv00CWm0pTNmudvKykrNcW9J72+e7wEAYNMEgPmWQctNCwM4cWqTu07OekHXAbCqwa6uacT85eaxTsxLnMralnNU5a8tz7llKuf5XBPn7eLr6QRAD10HxUP\/Kc5D6Jcxgdw+Rp10+6HpVRmr71KV17q0w3tx6qvrtmkegqdcPE3x9bJ0uYuY7pA0WEDVvWVN94k15QUAAFhZAPj2uri6Oj0Gfze\/Km7uL+swrVN9f9X3gS2kEWcWc7pyLj89SQd5xhj0CWlU7StV3lfT+uG9nPRy9SnjmPuvklPG8vt1xy1NIy43pd22X1ZgjMEyA3CwH+H6jfMYtA+bEu7bcRrLGGmFvkicoqecfj+lytul0vWrtu\/iKaff91nPuXua+ki3K+8vTFX67q8t3b5ifvrkaXe22EaGPMa5iyme2\/vmBQAAGN2KAsD3xc3vH4o3H0+Ps6eHhW\/mu1+Kv369Oa1Bo6EPcOl2bemkD3VhuWsaTKJq8OZ0JV1++lb6et16qbBel3W7GnMQKua1Tz5yNKWbvtelTOV1Y\/5jemPVDRvRpy0NbXKcgXbhOovznlSVS\/uwCem9vureH\/sFUbpcZ+x+RJf0cvO4hFCO8hS15bm8bipsG6ccT3sf9xjVSfcz135XbYk2sqqtHktV2ul+ptgvAACwqBUFgO+KL5\/fFD+\/viyWPfuh+PHzl9MaVEof5oK5HuCWeDhmdHUDU3MOPtWJeRgrH2kZhyjn7akGv53mFvICQEdt\/ai0n7OVoEBbuVjMUw9i+DEZu9\/RlFbV62OUIRozrTEsnZ+11QcTmbKtdh9gar7JDwBgtVYUAH5evHj5ofj79rJYdv9v8c\/lRxKnjjXkOD2CfZ1ytK1Xfr9pwDF9L3f\/VYZsW3Ye1jxPVcqvp+vE5TQvY+VtDHXlCpreg1rhXhNnOKolfuktveZcg7uw5j5EWegzpFMQ8hunPuq2q3s97ndJOWU918i3U1m6nFpDOTm4JX\/ZiY3yTX5Q9tQDqJ6i8mumY005x7+8TpO4TtVU9T5wTCsKAD8r3v75vvjnp1OTdJXMz\/8qfrn7o6j6cDAjSh\/w0uUcY6TBYKfHrctP1U5X1eWnYUI6cQrCftOpLK63lKfcPnWGUmmeg6fSnN+r2i6Iade9H8Q0cnRZNzVkW1ZgTW1pGnBKlwEYrKnvMIZzL+Y89VXVx5k632MbUv4+Yp211dPc+SpL971kXphRXV8z\/B9naOWb\/CDIudcHueuxX7nnSRD6ZFXnTNVrqar3c7YD9mdFAeCTZ2+LT6cHje9+c\/DhU\/H22WUd8pzqrZewXZz7GiMNBjtdOV+nrvp2CJo6GFXvzSndf9\/85G7XJ\/30ePVNg52Ysy0NQd04wxTW\/vWA6XW2lz7MXsu1U6cr4vLT+GLaOfuoWqdpuzH6HrllD+vFaQpVZZlyX3GKyj8H6fJUYj7m2h8Xp\/vg45was61uug+En+MMvfgmPyj3E+J9tOl+mq5TXrdpO44nnFvhnAhTPM\/ia1H8ufxaVH6v\/P5UfVtgnToGgG+L69MDyqvZR+rCfq9P\/zarHljceaNW9UDnAY4BTlfN5afh+qYVOyflDkqQLs8llCNOY6gqV5iq9tFln33rJ+63y77YkfQ+mXPfDOvs\/f56OFP28Tby9YCh\/xTntUjz0idvayzXwZ3O\/MtPzdL1crer0+U+P+a6beVo2z68H6eyqteGGju9NrEM5f2G+olTqmp9NqqqHzVVW+0+wGQ28E1+4Vorz6n0\/ao5d729zVsod04em9Zpei93vngIP56Wv\/n\/ovzzd+tc\/o8\/R99s00FMq2773HTT9ZrSDMrvN60XNKUV34vvl9dL3yurWj\/VtF2VpvfqhG3iXJbzetV7j+dExTnzVfJenB+V179s8\/X9+NoYc1D1unmZOT0e6XLVXNb1dVavYwD4dfHH6aHhz+LX07E+d+rmCQaH\/bZ3HL8bVLzMuxfKGOc101DM7nSVVg4Qna6My095uqxft88cYT\/pvuJr6etTiPuIZYhTm7q8VW1ffq1crnS9JlXrVuUhfa1qnTStLvngIJruLX3ac\/eClZqyjzf86wFjntJ5M0Je49zVHP28Ifmjl6p7co7Tmf91qtMl7b756CrsJ045ctcLmupirUL50nxXleN8pJ+msnSZiWknodqav8mv6notv5Z7PR\/1ut9CuXPy2LTOwDJeXborXwNuifh6WO9r4C1DWC+m3UW6Xbq\/LunGPAdpOqny+3EfbdsEVevE\/MU04nK6blyO\/6frp+rei9vFdIK4HN+rU\/VeeR\/x\/XS9uteD8nt1ZYmvV20f1aVdl+YgR20j1yo9Hl3aybpt+6TJavT6Cuhnbz997dSVBwqv2z6iy3FpKGZXNSh0umofp9R5SOk8Val7vcnY25xzd576qCp3EOskvt81\/bhd\/L9KTDNNu09ZqrYJ+w6vx6nsXLLz1EVdehzU6X7\/OA\/lXrB60\/Txhn89YMxTOm\/C2s\/7qfIX0okzlU5n8eWns3Q5vQdXLaevRWlaTdrWrdtHHzHPcZrLlPvsUtdRTj6myCs9TdVOwq75Jj8AgKX1+xvApb\/j9mvx52UQ7mNR\/NTeuWu09r8PBzt0usIuP1XrM6gVDdm2LM1jW5676JNWKFechgr7b8tD1\/fb1m8zdnqswOle+nVOpUG0rQTVmMYkfbwNfD0gzU7H6uucI10vd7sDeupR9G97T1fS5aduyvtM9x+X+6YdldOtSiu8VrfvLkI65aksXR5LyGeYqtLvUwYORv+L3fNNfuxf\/JRl7ic1cz99GdZr+nRnnabt4qc\/c9ON6+cor9c371Hcti2\/cZ\/x\/6b1c94rC8tx\/fS9NlX7qFOVdnm\/dWnF17vmLeiSP2Afrk4dqw7NRfgNvp+KD28+Fg9\/jD1Ud1\/cvHpefPntofgu6fub4tWvRfHnp7dFn2+QCQOMm+5AlgfN1lCOPvmpGvjTqZ9M3UDX6VHq8tOTnEGrKQbOwj6G7ruqPG3a6qZLWbvmtUvaVbqk0aVuymnW7aNLeqzM2O3vkHvShPeCzd\/rFzdlH286mzjuE573o2jLX5\/8r73MG9Gl31B1n27aPl2\/7t7fJQ9RXZ+hLq2mPkZ5m\/J6Ofnqm\/8xjFF3bds31Rsj06YtRv\/uuEY79un1m6ZZdX2nwjY56+3NFsqdk8emdUYoYwzCVQXWyu81rVdWtU0X5fSrts9NN10vplu3bfn9tn00pRXfC9K00vfK4nrl9VNV73Vdv03YJipvm\/N60PReWVyvbp3wflXaTWn2dtQ2cq3S45HbTkbptlHd6z3p482nYwB4SmHg8e\/i58rfEGx6r92mT6iqC3TJsgzJz9rKsmNVA0Z1g0S565bX6zuoFdUNbqX7bdtHXZnqNKWXk6ec7avWyU2jTdU+wmtt++xq7PRY2JrvIyPmQ+fxmDZz3Cc670fTlL\/ye1FbGfpsQ6Uu\/Yb0Xt22bV0fYqi6PkPdvvr2MeYqX590huy7XB9tdVZ+v7wdE1h7O75T+ncbEL495qcPl4Wyl8X7u\/5\/B9ixZ0vG6G9AqtyfzOkf5tJnZA3c5+fT7yugJzH878NREh5Q47wWVRf1mvJ3QHWdhpzORNcOQ1g\/TmV1r+fo0unpsm5Vntq2j++Xt41TWd3rXZS371KuXGnehuQVvhPuBXGGo5jrvO\/b\/xs7f2k6U5d7x+I9P+denPYJ2rbp04fIzUecyqq2zcljVVpzC\/nMKXtZun7u9uWyNm2T1snSdbR7Y7eTY+jb5sNo7oub3z8Ubz6eWqvTtfHNfPdL8devN6c1YP9OZ3zjPTvKXY\/9yj1PgtC3qzpnql5LVb2fsx2wPysKAPv7cKNJHwDTZXYvvaEPvcGfrsLLT2fpcldh+zgNVZdOfL3qvdRYHaC6fT3l5Nv3u+w3XTdNq2yM8oQ04sRKhbY9zk3Sgcp0Gdiequs\/bQva2oZcfduQsF6cGUWfe\/LS9\/Jyf6X8c8zTuXf07TrlqSxdbipXfC9dZ+66CPuLU1xm56ra5ymM0ebPlVd27K748vlN8XPVYN2zH4ofP385rQHH8XTXr56i8mumY005x7+8TpO4TtVU9T5wTCsKAJ88e1t8ejg1Sd\/N\/b82ZvNO5f9Gujy3teWHWqcr5+s0ldy0y+u1DeZFda\/XKa+fu4+p6ydoykv556a8hNfDunGCzoN+oa2O89gMHkK9Ka6PNK05rr0p2xA6if2FMOUYs++Qu88qaR6qlvvk86k2vp3K0tfj\/9HTu\/3LV5amE8vWp3xBmt5Y+WQCS7TPfW0pr6yYb\/IDAFizFf0N4Okc6jvF6x7c1lT+ch4NJC6uajCqauAqFdepG8yqGpxqGvgqr99nf23C9uVtq\/LXJmffabp989tXn3KxQVVtfZ\/2dGh7PFY+RnCoez1frfq4T3V91KW7ouuR+TT1bZr6IGm\/qM2Q\/k3XfTWZup9Tlc8hZR8ip6zlvEyxPh11bYfL63dtr4e2+Ru5Z+jfbcD9TfHq+bvi82Xxib8BDABUc5+fjwDw3mzkQY7tqRswyhkoi5oGzNrSHGqMQa62fFXtY4qyBGFf5bTHKB8bMkZbv5Y0RqLzeEyrPu5TXR9N6Zbfcz0cSlWfoKkPkvYjctX1N+rSyslLrq59nao6ydFluzHKVafPvpu26br+oYzVdnZp98e4RwzJ9xj7n4H+3XE59gCwX+7z81nXV0DTT3h4i3OOrusHXbfpuj6rFwaI4hQGkOKUanu\/TZ9t2oQ8jaEunfj6U6mfyjB033Xbj7kPNijtJI3ZaSq33+UZWIem6z\/8HGc246n30K+tTbfrm06OurTTvkhY7tI\/6bp+m751MmddshJpH2dIn6epfZ7CkDZ\/7rwCAACzEwDeurYH1PRBrs8Dbtdt+uyDWYRBrDj1VbdtHLhL3y8vtw3sDclXnZx9xilHLGdZ1bZPqZ7fa8tHldxt4j44mDjgN+aAXVN7XfVeuu8x8wLUm+L6ZxHpPXzMe3qfvkdX557OeTr3kM5TrnT9pm3DPoZ6yu149dxFWt4mS+WRgbbUPm8prwAAQGcCwHvkQY4K6SDSkgNfa5FTJ+G1OEXln3OFbbqUfYp6iuUIExsRgq5xHttY9wj3HIBJjHHfPocbv22f4\/LQvkaarz757LrNkLoYI79R2DZ3+3gMyvWdLs8h3d\/c+9+doX20tN+kHwUAAIxMABgYzdCBtLH1GdiKA3pxKkuX+8jJ05ABuaecN+c9XWaF0gHFNQeBgfUYGpRgFbrct3MCe+G1OJWlyzlCXrr2I3L30zXdKlVp5O4\/p37q0o9T6lxb1eVq2m5saR7q8nQ4fQKxY\/XRwr7iDAAAMDIB4K3r+sDadf1gjn0wqTEHeKoGqMJrTQNbqTkGuebYR19p3sJyeQp1Gaf4flndclw\/SpdhkLHbckEq9m6q\/lDTtZO+5vpavfSeHnS5f597C+f1Q1pV6bXps02dJfse5bpI5eYrXa8pzSpN67alkx6HquMS89OWFh2F9jnOW9J0P6jSdX0AAGDTrh5OLj\/v1tXpAecAxYRKdQNEcVCp\/P6QAcC2\/ZRNPWiVU46+ecitt6r0++YrZ7ugadsh6bKQqsG5qe5lTQOBU+xzgrK51x\/TJo97+fzPzXvuNTrBtcU8qu7Tdca+t6fp1KWRm8eq\/IXXcvLbto8heavKQzm9nDTqxHT65j\/H0LSrth+Sn0NbQ1vbNQ8bvT\/o3x2XYw8A++U+Px+fAIYDqhukahpYCu\/FKVfVoFKX7euEdJsGrNr20TcP5X3GPJRfi+rSH6PsfaX5rMo3K5N2hKbsGIW041zWdZ9hcDHOwPfSayPnWnE9kWjqT3Tta1Stn\/tak3T93O1z+ichrTgNNUYaS\/apwr7j1CZdJ2cbagztLwEAAMxAABholQ6OVQ2WjT2IdB7K+j7N8mtj77PJWPvqM9CYu02ax6rlOLERMSg758Bi3332CWzB3oTzPs5LSK\/buLx0vuhl6D079B+qpik15Td9r27dpjTS\/OeWJ6Q5RdlzyxS0lStOZXWv9xXyECcG6ttfAgAAmIkAMOxcOsDTZcCnbcApvl+3Tt3rTWL+YrppfuPrYQrqypOuN0Sap6FpNqXTVJ7UUypP74Xt4wSPmgI\/Te9NqS5IBVtUdx3NcV1VXTsxIBHfq8rXHHmjk\/S+nXMfb1qn3DdINb03tXMP5TzFPswY+QnpVYn7mkq5DGEK4j7TqU7cLorL6euppjTZkNgmd22X0\/a\/6n5Q1nV9AABg8\/wN4D0rP0R6wKNC1cBSHExqG3TKFdIbK60quflNB8ly89SWfppu1KXMVWlUbV9er+19eFQ1mBjvB3UDjX3vF037moG\/H3JMix\/3uusoqspbeZvcvPfZJmrKo2tmM8r3\/fR+n76X0wdp6lPU9Sdy0q3TlOeoKU9NpshvENLtk0ZdfqrUpZ+77y77YiFN7XdV+7ymdnnIvWck+nfH5dgDwH65z8\/HJ4D3Kn2YTJf7CunEmc1LB41yB5HGGNiqMmQQK2wbpxy564f8N5Wh7r3c9IPyPso\/wyL6tu9px01HDs7SvlO4NuJcJV0\/qNumal12qalfUX6vax+iy\/pxH2tSlZ+hfam5yjkkj2xE2jaP0VbP1e5PkXcAAGBWAsDk8xC4S3GQK2egK3e9tYoDgnEaUznddMqts7BunZw04v5gMXVBKjiicB107Tt1WT93XdcjidinqOszTNmXyOmrNL1\/7ok+Takp855raB5iuarKx8F1uUcAAACHJwC8JuEBLs6woKqBq3QQKmdQquvAVdhvl23q1q3Ka1WZwmtd91mlKu2yuI84dVG3TVM6bfnhQNLAT3lZUAiGq7rG4rwmVXlaWx6ZTOxLxClHU18iN40orj9G\/2TuPk7XskYhn+UpqnqtLN1fWC5PZekyK5PzTD9nuzznWMOc+wIAAGoJAK9F+nA09GHJIB8zqBt4Kg9S9Rmcyt2mbvAsiHnISSukk7NelT7b9d1X6ly6cdJix0L7H+dU1etV69UxwAdP11GXa2cpW8orvaT9gnQ5Bh\/D1Ka8ztNW59eW7IPEPMwlljVOZVWvVSnXXZ2cdMrrzF0PdFDXL6pqe+dol9P85PTb0vyky7H\/15Z2zr4AAIBJCADv2dgPk20PgVAjZ0ArlbtNzuDXWOsEIV9DB9\/qtknLnFsH0Ft54K7r\/cIAH7Sr6zvFay+9burWr9JlXQ4l9lXK\/YjQ9+jTZwnS7bqm03Xf5XyPIU0v1k36eq6h25d1TWvosWBBY7TRc7f7If04l+kDAgDAJggA003dQyCrFQfdugwQpYNQuYNSdXL3XbXfOOV6Ku15n\/H\/McR8dE2znP+6beM659Kep1zpul22ZafqgktlBu9gHmnfqe3aS9dv0mXdPkLe4sxmNfVb1tpnOPeE8vMWylhVzpBG+npTfQR1aTVZaz2yQ1O3+wAAwG4IAK9F+gC39gc6A4KLigNTbYNT6ftt65fFgbe2Aa30\/bb1c8XyxSlHul7udjllzF2nauoiljfNe93rUd\/9sUNpu6ydBvrQlhxC6FfU9SHS5So564wt3Wdd3yhHU\/67phvSqkuv6r26ddmBtT3bz5mftZUdAAAOTAB4TcLDUZzXzIDgotLBqLAcp6XEQa2hA1mxDF3KMnSfcfumdKau27jvdD919TF1fphRaD\/jvDUG+AB2odyvCH2SOAU5fY647hBd0ijnaYw+Ubm8U4v76ru\/dLu+6TCDsZ\/th\/YZx8xPmkbV8lj7AgAAehMAhh1Za2BwisGp89DZ8HTTQc8c6XpD8jFGGdiodABv7iBw2+BdjqYBvqEDlbBXY1x70EHfvkZTvzK8V56GqMvfWOmm6Y\/R93oq+fz3uJD\/OLGAuv5N3etjqNrX0pr6gAAAwCoIAO\/dlA+irF46MDTXQFHVoFjuvsvb1IlpPe3lvM0Y5c3dJqwXp1wxn2VVr5W1vQ\/f6RJcmmrwbo0DlbAmU117Y0rztua80qpPv2Vsdfsfu69TtZ\/4Wvp6Wfpe3bppftPl3HTYoLr+jX4PAACwQgLAezbVg6gBwUV1GURqG6AaS0i3PJWly32EMpenoG4\/6Xrx\/y6qthmjHHXKec\/Rp0wcTGiX4wy0C32kOPNEW7JLaT9ia\/2Kcn7HLkvYPk5dhL5cua9YTie+V34fAAAApiYATD8GBBdVHlQqS5fn0GUwq2v+qsoYdNln27pz1VlOnnPWmSu\/zCBtP7WnsIypfmEOViz2sZr6FU3vja2qD9S0\/7B+nGI5mtafS8hPWdsyZNFnBAAAehAAho1b06BXnfJg15z5bBtkW1OdGRA8qDCAF+c9MVAJsDqhrxGnXLGPWTWVpcup8vt168Z8PeWyOp\/p63Xr5Yj7iWmky1XaysqO1fVv5uj3hDTjnMM3WwAAwOEJAG9R+WGuPKemePBkU7oOzk2pPJAW8jF2Xrqm17Z++n7T+k9DhRXXYYY+dTF0nzC5rgOVcHRNfbo5rSUfjCrtL4zRfwj9lzjVqXu\/bps5+zVtddKUl6YyR21lCe\/HiQ2p69\/Uvb6EtP3WngMAwCEJAG9N08NbHKyLc5Wm7XO17WNqS+9\/Y+LAW85AVR9pumPtqymNqn3mOucub\/24btP66aBd3SBemsZTyt3yHuTuE4AMVYP4c0v7NEv2scr0tegg7dN06ePkaksz9InSaU51fbVIXw4AAIC5CADv2RSDdksPDBqYXKUwmFUe0ModxIrb9BH32ZRG1XtjDrDVpVX3+lOOv89X1WtR3TYAjGRNn9yCjSr3f3L6Lek6dduce0HnKS6XxeWu\/bKh6vJRp+19AAAAGJMAMBxMGASL05ja0qsb9NrqYNjY9ReEuqiaANi48AtrcYYVGLt\/kfaL6vpJ4fU4BU+9nXN+4v9Rebm8bdwmvh9e6ypuW6ft\/SDmIWddmM0avtkCAABYnADw1nR9ePPwR0k6ONZnsKyLLQ6KnYcVz9Mc+uwvrc8t1S8jE1SC9Uuvz6prdi39Nf3GXerSx8jx1HPplm66ft32se9Y7t\/kbttVeR\/B0577n\/tVeUvTa1tmQ2KbXp6rtL0\/ttB+xxkAADgkAeAtKj\/MpXNZXK57P+ryMFq3j1SXNLvI3T+bkjsIFgbU4pSjbr3c13P3k8oZxAtpD9lf2EecOKi0fR27vQXaDenvpNuEPk2cc6T7Tpf76poPDmVI32UpbX2lpx7Vw2N54jS18n7ZqLr2Nn29bRkAAGACAsB703XQrs\/DaNs+ctMMr8c51fRe2\/5ZRDp4FZdzB9LiAFjcLpVu\/5Rq3uuptvfbpPl8yn37eTl036xQU5u1dXsuGwyRXhNzXiNt+x6al7B91Qw10v5PTn+oTezP1fWb4utV78c+WZd8pOnU7XdsYT9xAgAAgLEIALOMdBCxvNz0HoOkg2BdBsVyxIG2mG46kPU0vDXuMY3pjZ1u0JRmWt6ycynPEzu35zZLewzDbe0X1pquc23AJqX9lKp+yxhin2iM9HP7T1XrjbH\/IdL9N+Unzb9+IwAAAGMRAOZ7YXAvzuzOeVjuPC2pPMAVfo5TVPXaUrrmIV0\/d\/uljwkbkwaVxggyaf9hGlXfXLK1wDCb9tT7G3bepdsPTa+LIfs69yi\/naZ0runzxI7VteNt7b32HwAAmIEA8NG1PXz2CQJ4wKWDdACualAuLPcdQHsafvt2+3R5Tkvum50J7Wucu6gK9KbtfZ\/2H46kT3+n7zWbatv30PTnVtUmsVqxX7WV\/kzar4zS19PybKV8LCy26eW5Stv7AAAAIxMAZpqH0bY009fLy03vsSljD5ydhxrPU1lcrns9Om95nqrUvT6Xc+j7PLEhW2uzugR6tcfQLFwTcR6qaxA03Xe63FfT9kPTrtKlTWLT0n5WU7+ry7plXftyaZ8rbB+nOaT7mWu\/AAAA7N\/Vw8nl5926uroqDlDMcVQNuqk7GpQHztoGrarWzQ12TjEg1pT3LuWq0rZ9TrmnKDPUtvMbb\/\/d649pN8f9yP2vI5edXur6UHX9prH6XEP7hrAJ5TZ5BW2x\/t1xOfYAsF\/u8\/PxCeAjCw93cY7SC6\/uQqzatsrY67Eq6YBa2wBbGCyLU1T+uU7OOl1V5b08xXz23Xfb9nWvs2FD27Gh2w+V2\/4D+7B0mwMdxT5a8NTLeprqNL2XK+43SpdhF9L7gfsDAABsmgDwUTU93IVB\/zhXyX0wHHs9dutp6G74AN1Y5hjYW2O56WloOzZGOxi2iXOTpkBvW\/sP7MMYbc5YmtokuBgagNXnYnK5\/TAAAICZCAADowoDcnHaujnLkg5IGqCkk67BHIFeWJe6IOiSAYU5961NYkH6XHzVpd0rr5uun7N9m7q0AQAAMgkAA721DZj1CZzWBUKfQrHjDIJ0Hezrs9+nHOdtG\/IUJw4kd2BvjIHAMdKAo5vqOkqDoGn6c163S+4bJpTbJ0ulfTN9tR3q0u6N2SaGtOIcpemPub8m6S\/h+KUcAADYNAHgo+r7cFf18Fm3bc4+uqTHKsWA5ZgDYWma6WBd38G7snIa5X2NZYo8s2I57V0X6fZjDASOkQYc3V6uo7HbLJhY2k8bu9+WI\/YXl9g3O1V1T1n6vhLuB3EGAAA2TQD4yOZ4uJtjH9BRXXDWwB6DLNnepfvU5sJ+xQDB0CDBkm0W9KCfxmZoVwEAgBUQAAZGkw7IbXmAbk9lYWP6DhoK5sC+pNdyWE6DvlN9Uqxq37AD+nfU6tLuVa1bnsdWleZYvwwEAADslgAw3aQPn0MfcMdOj8WFgbQ4jSVNa8y0m8Ry9Nlfuk2fNDiA3EE7bSWsw9zXYkg\/zmNpCxqU3xt737ACsW+nb8Z32trcqvZzSBvZtm1dXsr7D9JlAACAEwFguosPom0PrLnGTo9dGnOwLk1jjDSrxPxOlT4Hk7aV6SBkugxMI70WtyRtH7ouAxxVXXs4tJ2su6ds8R4DAACsigAwcEiCs2yaoA0cU1VAwPUOsA91wWAAAIAeBIABLq5KE8wiHeCbc8DP4CIQhSCyQDLANizZfwQAADZDABjgJA36CgIzmzBoF+c6MTjTN0AjsAMEVUGDpvahqV0COJK69nCpdjLsN84AAAAVBIABYGiAdUppnsJyOtjXtgzsx9DrPawf5zpt749hze0uQKrcVuW0owAAAAsTACafgTpgj9I2bU1tXFNe0sHHdLmN9hy2q+56j9f12q\/tNH\/aImDN1tBmhX3GuUnuegAAwO4JAG\/NUg906f48ULIzD6epLF2GTWsKCmvPYR\/69tXS9qGpvQBgfrnte9\/7AAAAsEsCwFvigW45oa7jzG6FoG+cYLX6BmfCdgI7QJXYPmgjAObjGRMAAJjQigLAt8X11fXp37P7m1en56Cr8\/zqpri\/vM4CpnggjQ+6U6Q9tjSPW8gzkC8NeKwpANIlb1tqV4FjW3O7CxxTUz9qijYr3c+Q\/ltdvgEAgENb5yeAb6+L519+Oz1XPZznP4viV0HgdRny0Dvmwy5wDHFga6r2IrRpcV6bnLx1aVfTdNZYZqC7vtf21O1rnZC\/OAMsKacf1afN6tO+Vm2T7rO83JR2l7wCAAC7s8oA8P2\/\/xQvXzy\/LJ08+6H48fOX4u6yeFhND35TSB88xzB2esD+pe3GXO1IbAP32G6F+0ecgf3oem0v1b4C7F2f9rVpmy7te5f7AAAAsFsrCwB\/KH56dVMU\/\/ml+PHyylcvXxSlkPBxdXnwG6LpAfVoD5NpeY9WfjiC0ObFOS6XNbWJQIvwZz4uf9ajcn76EyAAcAi5z5in+yQAAEAfVw\/hO5bX5P6mePX8XfG5eFm8v\/tUvC3C8l\/FL+HnZ5d1OgqDi2sr5urlPGj2qdOqdB0boMnU7UbuwNra26pyOQ7YrrrXr10IAv9evBjQn6viuA80dfsKsBVj96P6tK9V20RN246d9xVxnz8uxx4A9st9fj7rCwBPwAnVQ\/khskmfei2nnbN9mpcljmXXPAPjmvIaHNLeaRtWw71+A26vi6vfXxR3n94WXWPA4fjWcdwH0o4B9NfUhvZpX+vudwdtn\/XvjsuxB4D9cp+fz0YCwOFTI38XPz\/8Uby+vNKFE6qn8sNnqL\/ycjRmvab7C6r2Gcx5PKcuN7Csumu8qk0qW6ptaMvXQbnXH5PjvhLaJWAua2pvynmJ0jz1yW9OugfhPn9cjj0A7Jf7\/Hx8Aph8Uz6I1qVd9Xow5\/GcstzAsoZc30u0DdqjWu71GxM+Dfz3z8XDH31+te+J454otxFz1ctU7dISZQHWbar2pq+2\/AzJrzbwkfv8cTn2ALBf7vPz+X+X\/3chnDhVMyNJL0oXKXBUS9xb3M+AJmkb0aXNCOvGeQ2GlAVgaWO0p+FZO84AAAA9rCsAHD4NcnpQ+n5+VdzcX9ZpEH5roGpmRKE+4zyW0zGutYbjl+ZhDXkCphfapjiX1bVZU7YNTe0kwBC5bRwA36p6TtSGAgAAK7GiAPB9cfP7h+LNx4og7t0vxV+\/3pzWYHfaAilreYAO+YkzsB\/pNV3X9rS1RUu1Ddoktur1H4O\/\/pmVqGtHU6EdjTNAH7ntzZxCHuLcJje\/2ks247a4vro+\/Xt2f\/PqdNpePsjxyhgeAMDSVhQAviu+fH5T\/Fw1Fvjsh+LHz19Oa3AIbQ\/GuQ\/OADnioN2QtmXIAF0c4CunUfVaSlsIlKVtwpxtRGxD6\/aZtmVNbVuwZFmAdWtrb9asre0LuraXsBa318XzL7+dLs3LBzn+LIpfBYEBABa1ogDw8+LFyw\/F3\/FXB8vu\/y3+ufwInYQH5jgDjGHMAceqQb6q19J9bnHQE5heaBvinGut7UufsgBEsU+V9qumps3ioO7\/\/ad4+eL5ZenEBzkAABa3ogDws+Ltn++Lf34q\/+3fy\/z8r+KXuz8KXxS4Q+kDctflJunDfroMUGdI2zOVkIc4A4xpje1L6LfFGaCLpZ8Dm9pTbRq786H46dVNUfznl+LHyytfvXxRlELCAADM7OohfDfLzoUg8gGKSVndg7XzABhLuZ3p27bkDgJqu1q51x+T4z6SMdqzOlXtXNs++mwDEOW0IVO2e2VD28CDt33u8xtxf1O8ev6u+Fy8LN7ffSreFmE5fJDj9POzyzodOfYAsF\/u8\/NZdwD49rq4+vvn4uGPYZ\/9dUIdUPmhucx5AKxNub2KbVTVazRyrz8mx30EVX2mseq0b9pV20WON9Cmre0Zo23KbYv67otH7vPH5dgDwH65z89nRV8BzWGEh+A4z2nKRmWpMgHbF9qmOEdVrwFswdR9In0tOI6+7UnafxqjP5XmITdPU+QFNuG2uL66Pv0LAMBSBICZV98H567mfNCeq0wAAGMIfZU4j2ms9ARI4HjSdiltT7q2L6EdifPS1pQXmM3r4o+HP07\/AgCwFH8DmHlVPbhv\/djssUxAtfL17jpfFff6Y3Lce6jqt5RV1Wdu29cn7TZVaTrmsC9tbUdqjDYgt12LtEWLcJ\/fv3CM6zj2ALBP+njz8QlgWIvw4BNnWBvn5\/dln6Iu1DOwhPDgFefU0LavKe0c6XZ90wH2Y4x+0tC2CTi7vT5dklcV86vi5v6yToMw+Fs1AwAwnAAw80o78nvo2I9RptMD0jfSZViS83Me6hnYuro+UWjP4txHSCfOwDEsfb2n7VaaH+0RnNwXN79\/KN58rAji3v1S\/PXrzWkNAACWIgDM\/MLDcpz3Yo9lArpJBwoB1ijtq4zdd0n7RGmbqI0Egpx+U7ktmVNVuxVfWypPsEp3xZfPb4qfq\/7Q77Mfih8\/fzmtAQDAUgSA2ab4EJ4+nAPbt9brOx3sKy+nedU2AWsWAxg5QYymtg+gj679pLHaodi\/HNJP08eDkufFi5cfir9vL4tl9\/8W\/1x+BABgGVcP4btZdi78\/ZEDFHP7yg\/TTcer6qF7D8c3t\/ywhLnOz7Ve323l75vvNN256nmH3OuPyXHfgL7tI7BfVe1Cqq6d6NtX6tIWteVPGzYb9\/kNuL8pXj1\/V3y+LD55Wby\/+1S8fXZZ7MixB4D9cp+fjwAw61D1kF13zLqsW1bezvkA69T3+p5STp765HuNZd0w9\/pjctw3otzeOV5AVR+orK6dGNJ36rptUx61Y7Nxnz8uxx4A9st9fj6+AppjSB\/gq5bjDNBV2mnRiQF4EtrEOANU9ZvW1k7U5Weq\/HkeZS9ur4ur66rvhAYAYG4CwGzP2A\/h6UN234duD+0w3FyDbFMIeY0zAAD1uvabhj5jpfvp0l\/rmteu0rJ5ngQAAEYgAEw3McA59kNpzgN5ed9TP4R3ldbH2PUDRzLG9V1uL4ZK8zFWuzNVugAAe1LXn+vadwrrxxkAAGDn\/A1g8lU9eM9Vr2Psu5xGedux047q0qjLBzCOMa5pNse9\/pgcdx7pWzG2I55Tay5zOW\/Rno7L3ss3gPv8cTn2ALBf7vPz8QlgjiM0KnEua1seU\/pwX\/WwD4zPtdZfqLs4A6xN2ja1tVXaNNp0Paf24IhlXpM5n0cBAIDDEACGIDxkx7kPD+2wflMOZoa047wnaXn2Vj7gWLRp7FE4j+O8V3M\/ay1Rp6FMcQYAABiBADD55n7wLlty37lCnuIMLGfuazAdHNzzACzAELlBldz12B7HdlxpPa6pXsc+1nM9a625TgEAADoQAKabuR68qyy577Gked9yWWDNXFsA65IbVOkafNG32o6ux3YpRzynxi7zVo41AADAjgkAM73wwB\/nPRhanjCgEmdgOmMPZh6ROgS2ILRNcW6iTSNX7jk1taHPHV2MUeax8jpnuQEAAHZKAJhppQ\/tW3+I31t5YO3CNRbnPsqDmUPTqpMOlA4ZOF2jch0CtJmqrR3LFG3a2svMNqXnU9X5lZ7HS96rxzr\/c8o9pTXVKQAAwAACwGxLGACIM7BvYw4AjplWlTA4GGeAo2pqa3ODKrnrrcXU95eQXpy3bmvHditCPcZ5rbZ2rMv53cO1BwAAHJIAMNuRPnx7GAcA2I7cQFXuenu3x76vY3ssWz3WnjsBAIAdEABmWukDf9UAQHigjnNZ3etLyikPAADDrLEfCHOa6rljzmurzz48bwEAAIxCAJjphYf2OKfSQYG4XPf6mEKace6iqTw5+u4X1mqqczq9xvpec8GYaQEwrfR+suY+k\/sLUwrnU5zHMNW11ZROn32MXW4AAIADEgBmfeoGCdIBgCEDAlMNfrSp2m957qLvdjCm9Pwb+3wccwBwzLQAIJrq\/pKm5\/4F83DtAQAAOyAAzLaEh+8471Fu8GzqoBv7Ec6NOG\/R1vMPwDi63Af2dO+o6vtOXb6p04eldDm3q649AACADREAZlm5D9Rbe\/DuMrgAU0nPv7nOx7H2M3f+Q\/pxBqC7tL82dv8tp31O19lbmz51+fZef0c31TXalM7Y7UBfzm0AAOBgBIBZXt2gQHg9zmNL0xxzH02DC0P2E9KJMwRrOCfqzulyntaQzzZp3tacV4A1C\/eFOHexhXsFbFF6bbVdo+n6udL0mvYBAADA5ASAWYeqAYOpxUGJuQcmyvtN912Xl7YBmLrt2K\/0nOg6SDempvNvTfmcQihPnAHoZ4k2VPu9X0se2yX3XSXNR1u+uq5fNmRbAAAARicAzLjCg36cu4oB0aMFM\/uWu+92HEd6bmztXBmS\/yFtUa407Sn3BUD9faDc5ufcO7bcfg+5N+bIrb84r82Sx3bJfW9RqJ84z2HqawcAAGBlBIAZj0GPM4MLrEk4\/+I8panO+z7579MWjZVfAL4X2uE491XXTle1+X3uHVsydfnK6afHrqq+03WgTdV5NIfyuQ0AALBzAsDQpO+A1tiDC2k6Bi1Y4zkR8hDnaI35zDXXYCTA2vXtDwXpNlVptN0r6u4dffJDvpxjl3JM1qVrP6zr+mVDtgUAAGB0AsDsTxh4ivMQ6fZLD2iFQZQ4Q7CVc2Ir+eyiqj3YU\/kAorn6Q+m9Il3uKuQzzqk0zb77GEtTXulmyWNbta81HNOQrzjn6Lp+2ZBt67g+AAAAehEAZjzpg\/6YD\/650oGBOQYK1jYosbb8wNymbouqrq0l2jsAvhfa47Sdrmu34zxE7HNV7SNHVV6HpDe1Ldzvxjq2fVTtc63Hss6U52BdunXHKl13ijwBAADslAAw41pywGUJaxuUmCI\/IY04Mz71O40+bVG67lHaMYApTdm2Lt1up\/fuse\/lS\/cN6uo3\/F+ey9JltmXKc7oqrapzCAAAgFEIAEMdA1rTDgKhftcoDkQajAQ4G6M\/NGXbOmXaaxH6B3GeW0795qyzd0seo6nttVwAAAA7JwDMvqQDT00DUTkDNQa0YBtyruexdGlnAPZga\/2hLbXTbXlL72tz3OdyzXnvXbO28q\/9usk9jlXv527bZIw0AAAA+I4AMPsTBlniXCcdYOg74JDuY+0DPLBHY13PXeS0MwC0C212nMc0Rzudpt13X3V57ZveELnHI31\/7OM3h9yy9lF3TNdmSNnTbdvSqjq\/m9IYkjcAAAAEgGGwtgGeMHgR5zFVpVs1sDLE2OmNparsWzSkfvdSB2V9yrSn8gMcTdqGb7FND\/fuOHcV73nlcg9Jb6i641GVz62rKyvTnn9Lnt8AAAAHIwAMU5pqcKkp3T4DK2H7OKf6pDelprJvUZ\/63VsdBHOXKaQfZwDWb2\/tdlqOunKl\/YO5+2O5+ZxbyEecl7b0MZrKGsu1l7oFAACYgQAwx7TXgZpc5UGzdOBsDQNpDFd3fLekb97bruc03fJyrLO++wZgfE3t9lqNeT8J97U4r0WalznzNvX50OfYrfEYldWVqSq\/5fWaypW+1pRWut+oKY2c9AEAAKglAMxxhUGEOB9J3QAM+5Ee4z0f8zEHB49UbwBTC21onOuM2YavyVbvJ7nHI5YnvB\/nrakr6xqOXdhnnMfQVqa6Y5iz\/7htzvZ16TWl0fQeAAAAjQSAYUrpYMVYgxdTpVslDNbEeQ3GLPvaypZrzuPfxZD6HFKGsG2cAVheeh9oui8ctQ1Py7uW8qfHYy35mkJa1jXocu2s2VbzDQAAsCMCwNAmDGDEuY+pBpemTDeoKnPfOhhb37LHMuWWrW7dNehbB1PJqc82aVmmKttc+wFgHGtot6foE5TLUZVueZ9xhrVzngIAAKyCADA0SQcw9jCgUTWIWp6DPQ7c5JQprBPXS9ffUp1UHeM1iPXbVJfpuTiVqv2k+5w6DwDkq2q359K1T5B7P2lKt24fbfueQm55gpC\/OG9Rl7JuRW6Zpi77HuoSAABgQwSA4YjCAEycp7bFgcCtDlqWzXmMc6R1utY6Xlu9AWxR2oZuqU2NfZah96mm+8kY6c+tqTxRWqapypjmoSlPfeSUdSpTlS23TLnrdTV2egAAALQSAOZ44qDb1gbe1qA8eJNTj+l7R6vznDrqa8q0+0gH9gz0ARxbuA\/Eeai57nlp+l32l5vHLmnuTW4d5UjPrzHTXlpati2pqv8tlgMAAGAHBIA5lnRQom2QKB2wOMoARlW5y691rce1SstVVlUHXVTVUZyHqkp7DWJ9dq2rvsasUwDWaep7Xs69pK1PMFYey+nW3UvnuseObaw6qjJl2n2FPMQ5R9f116gq71s9XwEAAHZAABjahIGLOOfawyBOn3LPYYq6TcsYl6eqgy2fF33V1XFfaR0esU4BGKbLvaNrnyCknZt+XbrlfdatsxZVZV1zfqeU1kXbedB1fQAAAMggAAxjW8sgTthvnJeSDvwNHQicsm7jwOpRByvnoI4B2JIx7ldpXyVNc6l7YuwjjtGXqkrDvZ5gzPMMAACATgSAOZa1DLpNLR1kGXvQpUs9hvfivKQueR5DTvp9B8WmKkvf\/ADAVJa4f8c5V8665Xtsn32MKb3Pz3HfT8s6Ztn7pF0+Hoyjrd7VNQAAwKwEgDmeMDgR5z1YagBri\/U4d56b9pcer67Hry7tuvOh7vWoav25tOWtSlruqjoG1uP+pnh1usavwnx9e3kxuC2ur65P\/0KDunveUGPeS5ryl97fcu53YZ04Nxl7vSnFOhpSz3W6pJ3WwZJ1EqR5nqJ+5tLlOAAAADApAWAY25yDOFUDWEsPYk1p7LqN9RXrLF0eU8jrlOdCkOa7XK6yKcrX15C8xTqdul6Bge6Lm1\/fFT9+fDhdrqf5579Pl7qgLysx9r0kTadPurn3xqr1ynOUrje2Mcq8dlX1WqdPfYR14tykSz5yjJ0eAAAAqyEAzPHMMdCRO4gzl7XkYwxj1W16\/NuW5xLPzaX2P5W9lgvIcFd8+fym+Pn1ZfH1H6cm\/Ofib0Fg9mqsvspQuffcMfK5ljJPIa3HnHqdoj765KNJVXpD0yxLy77HcwMAAGDF1hUAvr0+PXNevh7wm\/lVcXN\/WQeGOJ1P30iX92gPgy3hOMV5r8JxWvL8nHKQbslyASvwvHjx8p\/i32\/6cq+LP0IQ+NXvxT+XV2C31tgXC3mK85xCHyDOY+qSblrmpjoYO585upRlCmPud6nzDAAAgDUFgO+Lm98\/FG\/i1wOW57tfir9+vTmtAR0sPXgyhzkHU5aqz3R\/Wz+e6TELy2Mdx6p0Qn1V7bNKzEvd+1PIzRuwYc+Kt3+e+nLPr4pv\/vxvCAL\/9mPx+bLUpPoXBDd+P+DYms7f3Htj7j1zLffatMxjXcN90g11EOc1maqOAAAAOJyrhxBhXYXb4vrq7+Lnhz+K+A2BT5reaxcGCFdTTOZRNVgSzoG61\/ekXMaxytal3sbe\/5THLM1rl7yPXc5gjLLmpDFF3puMUS5o4V5\/TI47mzHXvXDoPb5u+6HpBlPVwZR1O2XaVdr2N8ZxKKvaXzBlGaED9\/njcuwBYL\/c5+ezok8Ah68H\/FD8XfXH4O7\/9fWAjCNtWPbY0IQyxXlu6SBS3aDSWqR1lS7Xmaqc6X7b8tHHEsdojnIB2xL+7Me3HwcGxhDusXHuqq6PsETfYaiQxzHyubY+zJDjW6UqrbHSBgAAYFErCgCHrwd8X\/zzU8VX\/D3\/q\/jlrt+nf+E7caBjD4MbYWArzmMYO70xdB2UWmMZuhh6fnatr7kMLRcAbNla789zmqoOmtIZoz8Y0o9zrr790XQfXfY5RJ8yAgAAsGorCgCfPHtbfDo9dIaPf387fyrePrusAzlO58030uU9SAeUhg5wNaW3dH2G\/cW5ydh1shWhnHEOcusLAJiP+\/N0dbCmeh3aH52qjgAAADiUFf0N4Cb+BjB8p2owach53jW98vpxvTSN3PxUpdXH2HXSZKw8D9WnzGvJO4zIvf6YHHcYWV0fYSt9h3I+o9z8jlXGIXkYy1aOF7Rwnz8uxx4A9st9fj4bCQAP44Ril8oDO9GQ87xLelXrVsnJT11afcoydp1MrZzfvvncWplhIu71x+S4w0F06TP16V+N2Z8aM62uqvYdaCfZKPf543LsAWC\/3Ofns66vgB4onDhVM+xS2kg2NZrhOohzlarXl26Eq\/LUVo4udbK0tAxxua2MdKdOAWC70vt32\/089P\/ivISl+qP6OQAAAJTsKgAcfmugaobdCud3nOu0DZpVDRat8brJyXeQUydrlVvGsrScU5c75CnOW9CnTgGA7Vhj32TL\/VEAAAB2YVcBYFitNQ5MDTHmYJaBseHmGmRMz9+u53P5OijPAAB9pP2Irv2Kur7Invqn+toAAACHtKIA8G1xfXr4rvoK5\/N8fVoDNuh0\/n4jXd6qctCxbmApt6xVaZSX91JnZU3l3aOmY7jH4wsAjGOqPlNV\/yOkvdU+WVU9bbUsAAAADHb1sKrvSA5B4N+LF3efirfPLi+NIASQfRU0i6kbXJpTOQ9V+x4jj1VpREPKW5fuXq\/ptmNV1mXdoYYeh6bzI5gy\/3PWE4txrz8mxx0Orqp\/MaRvoj2BVXGfPy7HHgD2y31+PisLAJ\/cXhdXv78o7j69LcaKATuhWNScg0vlfXXZx1h5rEonGFLeOetvDXKPYV1dB1PUz9Dj0JTfYM\/HlFm41x+T4w5808cY2jfRnsCquM8fl2MPAPvlPj+f9QWAJ+CEYnHlAaapzsXyPqKwr5x9123bx5hpBWOnt6S2Y9GlrFXrlsXt2vaZa4zjUJfnIfmCC\/f6Y3LcgUHG6icBk3CfPy7HHgD2y31+Piv6G8AVwqeBr\/3lX3YgNGhxnlN5UCtIl6M0X0PyOWZawdjpLSX3WIxpzH2OcRzCNlUzAMAS9EcAAADYqXUHgIH55AyAhQBinJvkpNVFn\/Ry87qkch675nOsuu2iz3EAAAAAAABmJQAMe5EG5cYO0qUByq4ByzltKa9N2o5hDMZOfewBAAAAAIDN8DeAYe\/Kwc8h10FVEHWt19VYeR2r7qKqfKXGrtOxywAr5V5\/TI47AOyX+\/xxOfYAsF\/u8\/PxCWDYu9CYxvnITjeWr3OOdL3c7ZrMfRymKAMAAMOEPlmcAbbs9vrUlF1VzK+Km\/vLOgAALEIAGMiTBi7XHFBuy9vpgXRRdflbc50CADBc2g9dul8K0Nt9cfP7h+LNx4fTo2wy3\/1S\/PXrzWkNAACWIgAM5AsByjiv3drzWs7fmvMJAAAA37krvnx+U\/z8+rJY9uyH4sfPX05rAACwFAFggCppQHaLAdo9lAEAAIAVel68ePmh+Pv2slh2\/2\/xz+VHAACWcfUQvptl58LfHzlAMYEm5a\/X0x7A7rjXH5PjDmySfilkcZ\/fgPub4tXzd8Xny+KTl8X7u0\/F22eXxY4cewDYL\/f5+QgAAwCb515\/TI47AOyX+\/xxOfYAsF\/u8\/PxFdDAvE4N\/NcZAIBx6GMBsBq3xfXV9elfAACW4hPAwHyqBiRdm8AI3OuPyXGHC30sYIfc54\/LsQeA\/XKfn49PAAMAAAAAswoDwFUzAADDCQADAAAAALMKn\/6pmgEAGE4AGJhP+iDnwQ4AYDh9LAAAAKBEABiYVxiQjDMAAOPQxwJgVrfFdcXXNz\/N16c1AABYytXDAb5bJXQ8fYUMAOyXe\/0xOe4AsF\/u81sQgsC\/Fy\/uPhVvn11eGoFjDwD75T4\/HwFgAGDz3OuPyXEHgP1yn9+I2+vi6vcXxd2nt8VYMWDHHgD2y31+PgLAAMDmudcfk+MOAPvlPn9cjj0A7Jf7\/Hz8DWAAAAAAYJjwaeBrf\/kXAGANBIABAAAAAAAAdkIAGAAAAAAAAGAn\/A1gAGDz3OuPyXEHgP1ynz8uxx4A9st9fj4+AQwAAAAAAACwEwLAAAAAAAAAADtxmK+ABgD2zdfHHI8+HgDsm\/7dMenjAcC+6ePN4xABYOr5vvXlqPtlqPflqPvlqHtYN9foOjku6+S4rJdjs06OCyzH9bdOjss6OS7r5Lisl2NDDl8BDQAAAAAAALATAsAAAAAAAAAAOyEADAAAAAAAALATAsAAAAAAAAAAOyEADAAAAAAAALATVw8nl58BAAAAAAAA2DCfAAYAAAAAAADYCQFgAAAAAAAAgJ0QAAYAAAAAAADYCQFgAAAAAAAAgJ0QAAYAAAAAAADYCQFgAAAAAAAAgJ0QAAYAAAAAAADYCQFgAAAAAAAAgJ0QAD6c2+L66vr0b43b6+Lq6upxvq5dic4y6vX2+vz+eW44RrTLOY+d69Nwri9MGw\/bc1\/cvCq1iy7OlWlpV5mPe9jKuVbWxb0Fluc6XDf3rdXQx1sx18n6uLfQjQDwoYRG+6fiw2Xpe6f3f\/qneH\/3UDzcvS\/++UkDP46cer0v\/v3n5XmdhzD\/Uby+vENXOfXtXJ+Gc31Zp\/rXxsPm3N\/8Wrz78eOlTbwr3v\/zk4GP1WhrV5mPe9i6uVbWxr0Fluc6XDP3rfXQx1sv18kaubfQlQDwYYTfDvm7+PnhY\/Hm8sp37v8t\/nn5S\/GfZ6efn\/2n+OXlP8W\/9+e3GCCnXu\/\/V\/z1+cfih7AOw2TVt3N9Es71BWnjYauevf1UPPwRfxXmWfGfX14W\/7g4VyCjXWU+7mEr5lpZI\/cWWJ7rcK3ct1ZFH2+lXCdr5d5CVwLAh\/GsePup5ZN2d1+Kzz\/+cFozeFb88OPn4svd4wJD5NRrWOfUyfnd1zcMl1vfzvXxOdcXpI2Hfbgt\/u\/dj8Vvb89XKkvKaFeZj3vYirlW1s+9BZbnOlwP961V0cdbKdfJNri30E4AGNbg9R\/Fw59\/Fn8+fn3DQ3H34ndf38A+OdcBaoSv2Pq9eHHnQRuAsbi3wPJchwCMzb2FPALAO3V7ffl0XZdP2D1\/Ubz859\/i\/KUB57\/T+eL54wIdfFf3ufX67NnlN97OfH1DTzn17VyfhnN93Zz3sAqVfbT7m+LV48Pbp8Iv7y6jV9+Z+biHQXfuLTArfbx10sdbOX086M69hQ4EgHfq9R\/nT9c9zl+\/F77Fsx+KHz\/\/Vfwv3HX9nc7evqv7nHq9vf6uI\/qjyu8np76d69Nwrq+b8x5W4bt+Qnh4e\/6l+O3Bw9uSevWdmY97GHTj3gKz08dbJ328ldPHg27cW+hIAPjwwtcFXJ\/+DV4Xf3z8sXj3\/Kq4ev6u+PGjrxAYR129lur+9R\/Fx+Knr7+V+GvxZ6Ff2ldGfdeuwzDO9fVx3sPa3f7fu+Jz8aH46dIuhvnVTRgBAZ64h0EX7i2wPNch5NDHgy7cW+jq6iH8ChQAAAAAAAAAm+cTwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAAAAAAAA7IQAMAAAAAAAAsBMCwAAAwErdFtdXV8XV9e1lObi8dpq\/eXlW98XNq5CH61Nuqjzl8dv5VXFzf1klur1O1qlKM+7vNGcU+va6nF65nmryNXtFttXfEFOm3VXmefLq5rTmEGsqc6b7m+LV13OwOd\/15zMA26WPdxb3d5o7FPp8byynp483r8zzRB+vMd\/6eDA9AWAAAGAzbq9\/Kj6c\/n\/5\/q744\/X5tdV6+b64e3goHh7nj8Wb4nPx7vnTAOH9zavi6qcPxZuPcZ274v3LD8VP6SDi\/f+Kvz6fknv5sig+\/N04kBLSPCX5Nc2Pb06b\/JSk9+bjZX+n+e598fLDTwsMEI4oDDRtJf9byutk7oubX98Vnx\/Pw8s5XzNAmnU+A7AL+njNfbyzc0Aw3Bsr6eMtRx\/vRB8P1kYAGAAA2Ibb68eBgjAw+Onts8uLW\/G6+O\/7l6f\/Pxdf7sLybfF\/7z4\/DtQ9DXI+K95+CoMgn4py8e7\/99dpqzfFb7\/9eFr6p\/i3YWDk2dtPj4MoMc3XP785\/fu5+Ot\/NRs9e1v8Flb58PuMAy6xnH+camWgMNj2\/N2phNGIaQ+W5OW7vI5lTWXOEAe7Xzw\/LTwr\/vPL6br4\/FdRdYp2Pp8B2CZ9vNNScx8vpHt99bwISWfRx5uQPl4lfTxYHQFgAABg\/cLAyvnXxCsGBpOvvfvmN83jV7C9unwdWfgqsqevZbspffXYt7+035TmCG7\/fvyUy5uf24Zz7ov\/hZGUNz8Xr1\/\/\/PgJky4DI\/f\/\/vP4\/48\/1A+mxgGX86BlKtbVdXH9+BV05\/mprqrqN4hfWRfn8lfAVX2dXUt9h+Nffv8xA5dPGYT3wydcHtOrSrspLznnQvR92o+f8Dmt\/+rryOpTevffrF+V1+iv4tfLfuv3HSTl+FpH3+frm\/r6euwu78f3rk9lLqV3ffvtMfgmH2n9V33VZa67L4\/1EM\/JZz+EQe+68+9bOeczABujj9ehj\/em+Pj4ycrLYgt9vNNrjedC9H3a+ng96OPB6ggAAwAAK\/dvaWAl\/Xq8MKDxU\/Hh61fxfSzefH5XPE8Hl04b\/3KX\/Ab957+K4r+XbU6LH36P22Sm2cnl0yCnPYXxwDjI0eqb36R\/Xrx4\/EX6\/2Xm49t9tvmn6WMnnz8UxW+hLs6Djt99Rds39RvqL3xCJQxSxm3C1x6WB8TK2ur79H74VMXj18md3j9\/R1xxert4++f74nEM9PG9qk9HZOal9lwou3ySofhQ\/H3Z+O5LqN\/SMbkM+r785T+ntcue1ef1a9017TuMz\/36+Kmf8FV5d+EgnOro\/yor9FJfsT5\/O6V5zua3PnwpfgifKglfERkWf\/q9ePGYj3iMYx0l9f+Yz8\/Fu1\/P+YwDpFXz06Dpk7pzv\/H8e9TtfAZgC\/Tx8vt4r4s\/Kvs67fTxLvs+LerjhWV9PDgKAWAAAGDdPrwr3v348TwoVHwofi8POHw3GHP5Gr7068Ze\/lL8J\/2F8q+vnQfdis9fivM392Wm2SYMcH0dKPnplObL4v1dt4G781cDvix+ecxo81eppeLf0nvzsd9g4Tdevi\/++5jIs+Lt4\/cJJr\/NX67fWH\/v\/3vZb9wmOXZRW31f3v\/6SZrXfzwOUmV9RWRuXurOhcSz\/\/zyOJB2Hsi6Lf4+Jf7mzSm9y\/rnga94vDJl7jv68Pftd1+b9420Pl\/\/93Gw7zvhE0fh\/2c\/FOHzGd8cw2+EAeeH4uGP55dPk5zPq5jPmJeqecyv8Rz1fAZgHfTxevXxRqWP90gfTx8P9kgAGAAAWLk3xccwCnIZ5Pj87tevn0yIv2n++d3zyyDcVfH88TfI875urMpoaX79tEOcn\/7u2\/kr0dpcvhqw+LGI34YWv0qt7SsCw2\/sx7+lVzmAVKHrV67V\/TZ\/rL\/c9NrqO77fR9e8tHr2n+I8Pvu\/4v7+3+Kf8EmFP8LXNoa\/23c5XrWDbMM8e\/vneZDv8esFz\/VU9VWCo5c5fDrkcX\/Pi79+uTudx+dPsURdPx1Sd+435bfP+QzAFujjxdtfbh+vD328DPp4+niwQwLAAADAusXfYi\/i17N9Lt5dvhctDjSEQYOnQbjz3HcQYYo0v\/P4t97Ov+lf6\/LVgOGTDD\/FAZcwQnLS+BWBt9fnwbU3VX9L73u34SMOxcvi8RsIO6gbzIn11\/51b2dt9V03mJSja17axU\/ofCn+Fz658\/JF8fzxUx1hwPZ\/Rfi2wKdPuYztWfE2fJ1fqJvHT0pVnz+jlzl+Oudj8mmPx7Kf9tfz0yExf+fBzIbzr+P5DMCG6ON16+N1pI\/XhT7eV\/p4sBsCwAAAwGY8e\/vb+TfTP\/x+\/oTIZZDtabDs\/vIVZnV\/iyzDFGl+5\/IVeB9+Kv2Gf9zP+W+vnb8aMB00O\/\/trlPmar4i8La4fhxAfFm8P3+fX7P7m+L3x5Gf375+cqXS179FdsrjeYP6v9EV6+\/d\/13q62mb36p20lbfcSA1\/t202+vHgdLHTx7Er7ar0zUvGc5fEfiheBcGrH78oXh2GTD8\/O7d6dWGrwZsy2uL2+tQJ5dPhDx\/cdpTGJ+rGFFL6\/P2\/x7\/rtxQcSDy\/ub3x8HCtq8xrBU\/5fX4Uav0EzXJse96PgOwWfp4bX28jvTxOtPH08eDvREABgAANuQyqPb1EyLhb1d9LN58\/Vtsz4t3n98UHx+G\/A2pKdL83uNv1X98U3z46Tzo87Sf8DWC8asB08Gmp0\/IVH1F4NeBm1A\/z2O6yde0lb5e7ur5u+Lzm4\/FQ9vHXl6+L178HfPY9nfuQv2FQcz4qZa2+mur79P7d++Ll\/H9MFj09ZMCr4ufH0cOQ5nOg6rf6pqXDJevCAzi36z7+gmWxq8GbMtrs9d\/nAeGH8+XcNxOx+TPygHOU5nDp0diff394jyg3NfrP4rzn2Y8nzfP3\/1YvH9MMHwl4uMaHYVPuZyO92N6l+Px6e3p1e9lnc8A7IQ+XlMfL4s+3rBjqY+njwc7c\/UQfsUIAAAAvhP+NthPxYfwt+5qBnC6C58AGGGQjkzqGwBI6eNtn\/oGmvkEMAAAAPO7\/H0xRnZ\/U7x6\/BRF\/Iq9u8e\/W\/f0dxYBACakjzcNfTygIwFgAAAAZnF\/8+rylXBF8ea3sT5twjeevS3+fPz6vviViD+dfnpTfGz7CkgAgJ708Wagjwd05CugAQAAAAAAAHbCJ4ABAAAAAAAAdkIAGAAAAAAAAGAnBIABAAAAAAAAdkIAGAAAAAAAAGAnBIABAAAAAAAAdkIAGAAAAAAAAGAnBIABAAAAAAAAdkIAGAAAAAAAAGAnBIABAAAAAAAAdkIAGAAAAAAAAGAnBIABAAAAAAAAdkIAGAAAAAAAAGAnBIABAAAAAAAAdkIAGAAAAAAAAGAnBIABAAAAAAAAdkIAGAAAAAAAAGAnrh5OLj8DAMBmXF1dXX4CAPbIkNUx6eMBwL7p481DABgAgE0Kg4O6sgCwT+7zx+XYA8B+uc\/Px1dAAwAAAAAAAOyEADAAAAAAAADATggAAwAAAAAAAOyEADAAAAAAAADATggAAwAAAADd3F4XV1dXFfOr4ub+sg4AAIsQAAYAAAAAOrgvbn7\/ULz5+FA8PCTz3S\/FX7\/enNYAAGApAsAAAAAAQAd3xZfPb4qfX18Wy579UPz4+ctpDQAAliIADAAAAAB08Lx48fJD8fftZbHs\/t\/in8uPAAAs4+ohfDcLAABsTPgbc7qyAO2uTlP0cJqCqtdyDdkWcrnPb8D9TfHq+bvi82Xxycvi\/d2n4u2zy2JHjj0A7Jf7\/HwEgAEA2CQPDQDtysHaJrmB3Kr0hgSQI4FkUu7zx+XYA8B+uc\/Px1dAAwAAAL3lBpmDunW7pAGs3W1xfXV9+rdZGACumgEAGM4ngAEA2KQwQKgrC9DsKjOwOuQTwMHQ7SOfBCZynz8uxx4A9st9fj4+AQwAAAA7lRNQrVonBGrjVLaGAG1d3gAAADgTAAYAAIAdC0HbusBtXfC3LF1Ot6lLu48Y2E33GaWvP619ngAAABAABgAAgMmsPTjZN1\/nkPJ5Cp5KOV45+6Q15v4BAAC2SgAYAAAARhADoDEIGf+P0uW5xWDt2LqUM81DDCKnrwNrd1tcX52u9tr5+rQGAABLuXrw15YBANigMLioKwusxVVD0LNs6UBnVT6r8lRer\/z+lOXsk7cqS9cx43Cf34IQBP69eHH3qXj77PLSCBx7ANgv9\/n5CAADALBJHhqANZkyMNqkLlDbpM82QW4Zg77lzM1bXV7qtulbZpbjPr8Rt9fF1e8virtPb4uxYsCOPQDsl\/v8fASAAQDYJA8NwBLqAolVAcnwftfAY5f16\/Y5lar9VZkyD1GXss9dT4zDff64HHsA2C\/3+fn4G8AAAACQIQ0klpfTgGJcDv\/HqUlIqyn9tcst55rEOo\/1nC4DAABslQAwAADTur8pXl29Km7uTz+Hrwm8urrM18XteQ2A1YgBwDB1VQ6Adkmjz76WUBfc3VLQN0rrvGp5K8cFAAAgJQAMAMCE7oubX\/8qfrn7VLwtbopX4W\/EPTw8ft3Pw92L4vdXN6c1ANahLSiYY4w0cqWB1zkCsWEf6VQWyhunKfRJO81jF1OVAwAAYEoCwAAATOiu+PL5x+KHZ5fFH38o4o\/Fsx+KHz9\/Oa0BsKymoGL59TSQOCSwmCMn\/bBOnJaW1mFdnfY1JL211BEAAMAcBIABAJjQ6+LnN\/8U\/4aP+T77T\/HLP7+fvwo6uP+3+OfNz6c1AJbTNagYA4ljBhPTtOrSD3mNE98aejyGbg8AALAmVw\/h+\/cAAGAy98XNq+fFu8+Xxejl++Lu09unTwR3FP6OsK4sMFROMLVrcLCc5liBxap8xrTb9ldXxrGDnk15HMNY6Xepr\/h+2zaMz33+uBx7ANgv9\/n5CAADALBJHhqAMVQFFcvWEuyrC37WvR7NWb62vIyhvI+5js0c5eJ77vPH5dgDwH65z8\/HV0ADADCt2+vHDv7386unr4MGWEhVIK\/82qm1uvxEm7Quc4KkoX7jlCOkGaeoaxpjmHt\/AAAAXQgAAwAwofvi5vcPxZuPD4+\/4fnNfPdL8devN6c1AJZ1apG+mdLA3hoCfSFfqbZ8LZHvp1rMC\/6W9cnvkDTCunHqa8i2AAAAUxEABgBgQnfFl89vip9fXxbLnv1Q\/Pj5y2kNgGGewnj7DsblBFVz1om6rLs36bnSdO4cuZ4AAIBtEgAGAGBCz4sXLz8Uf99eFsvu\/y3+ufzYpPrro33iCjg7tQiXn87S5a0L5YlTnRCgjFObLuseTVM9qzMAAGBLrh7C9+8BAMBU7m+KV8\/fFZ8vi09eFu\/vPhVvn10WOwpBYF1ZoCpgN0agrpxul\/T6blelLhiZqtrPVPUytjHqq08abXXblM4Yeaad+\/xxOfYAsF\/u8\/MRAAYAYJM8NADBmgKdY+elLr2cAOSa6mWtquoopc6W4z5\/XI49AOyX+\/x8fAU0AAALuS2ur65P\/wL0lwbo5gzYhQBinOYUyhgn+supw7mPLQAAwBh8AhgAgE3yW6OwD1UBtqUDm+U81eUlNzA4tCw5eakzZNuu5tzXFJqO55jl2Xo9zcl9\/rgcewDYL\/f5+fgEMAAAAIuoC7o1vR6nqaRpV+2rbv9pQG+MAF9II05dlPPYdduucups7frUcVd7qCcAAGAbBIABAJjW7fXjb3h+P78qbu4v6wC0OLUal5\/O0uW1iIHEqYOJTbZSV2uUHrec4xjqN04AAABrIAAMAMCE7oub3z8Ubz4+PH7Fzzfz3S\/FX7\/enNYAaLaFwNqpVbv8RPQUFh3v+E2RZiocyzi1SfNRtRwnAACAuQgAAwAwobviy+c3xc+vL4tlz34ofvz85bQGcFR1Abby63MHztI8VeUxZ50jqaqP9LiNcRynSHNKbfk7+nkDAABMRwAYAIAJPS9evPxQ\/H17WSy7\/7f45\/IjcFwhCJZOOXLX6+MpJ9\/uIwT04lS3zhqkeZojj7Eu5tjXksrnwFBjpAEAAFDl6iF8\/x4AAEzl\/qZ49fxd8fmy+ORl8f7uU\/H22WWxo\/B3hHVlYf+qgmRLBBnXko8plcs4tGxT1NfSx6Bq\/1VinnLWL+d\/zPrfA\/f543LsAWC\/3OfnIwAMAMAmeWiA41hDYGzp4OPUpihfn+PWts2S50JVHVUp56ttm7hu1Xpzl29t3OePy7EHgP1yn5+Pr4AGAABg1UIgLE5sR9fjlgZB64KibWmG7eI0tTQfVcvlqSxdBgAAGIsAMAAAALQQvNuGNOg7ZhC47hwI\/8epLAahy3moWxcAAGBMAsAAAAC0qgpmHc2eg3dpmbqUce3nxpj5ise\/rX7SfbblIU2vLX0AAIAmAsAAAADUOof1ugWz9i7WyZT1MMc+UjGw2SX4mOZvSH7T\/XbJxx7Euk\/LHc+DIXULAAAciwAwAAAAlQScvpfWyRR1NMc+1qouCJqr73ZrdeRzAQAA6E8AGAAAANiNNAgclkPgNE5zqMrDWOYqAwAAsF0CwAAAAHSyt09ZbsHUQb8YHO26nzECnX333STkI05pumPup0k5DwAAAHMSAAYAACDb0YNZafmnqI+mNGOgtDwNlabRNc2Q3zh1NXTfAAAAfE8AGAAAADoYEvBMhYBnnNrUrZOzLfsxxnkHAADsmwAwAAAALCAN3JaXjxzkGzugndalACoAALB3AsAAAABUEjhbVqjvOep8yeNct68pgsBxAgAA2DsBYAAAgIMLwbY4pQTO1m+MY\/N0lKc\/zun51nWf6fYAAAB8SwAYAADgwNIg2pGDajGoOFcdpIHPukBo0+t1761VWrdd63ro9luTHt+q4x3qIE4AAACBADAAAACT2FJgKs3jXHmOQdyqwF5Zeb047UlanjnKF8\/NuY51X\/F4V9VJmve1lwUAAJiHADAAAACjE5iaV6jfOG1VU6BzbGk9bbneAAAAUgLAAAAAB5YG2+YIvjGuLQUzh55vWzhfQ\/3HCQAAYAkCwAAAAAcXgmhxOqq07Eeui6nFc61vHQ\/dfkpp0HfqIHBaB2usEwAAYH4CwAAAAIyuKTAVPx05dXCsq5DHOO3NWut8Kekx3vIxj+fslssAAACMSwAYAACASZQDU3UByHSZ7kL9lqXLXev8fJTO057FczOtLwAAgK0TAAYAAGBSew8krsFYwcz0WDl23aT1P\/R41DmH588TAABASgAYAAAAWMxYwcyx0hkqBuKnDP6WLV1eAABgfQSAAQAAWMxUQTKepHW8pjofK5gpKAoAAPBEABgAAIBJVQUg48Q8cus8fb9tfQAAANZHABgAAIDJxeCjgOL6OVbrlh6X8nL45HOcAACA4xIABgAAABbRFMzsYqx01iAniJsGfcv\/R03bAwAA+yYADADAzO6Lm1evipv7yyIAhxaCmXFqcw6LnqdUl3TWKi1XVTmD3PUAAIBjuno4ufwMAAAjuy2ur34qPlyWvvem+PjwR\/H6stTF1dVVoSsLcBx1Qd8plPc1Z0A5t4y5Ad9NB8Pd5w\/LsQeA\/XKfn49PAAMAMKHXxR9374uXp59evr977OQ\/PNwV71++LN7fhZ\/7BX8B6C8ED+PE99J62Uo9pcHeLQd\/AQCAYQSAAQCY1rO3xaeHh+LP4tfi6spXPwMMEQO3fYOS6XZ902EauUHbumBv+D9OAADAcQkAAwAwi2dvPxUPD38Wxa\/Pi3efLy8CkO3owds0qHmUIGfdcY6B3rQewvpxAgAAjsnfAAYAYJP83RiYRjlolAaWWFZVQK\/rMapLY23Hfaz89E1nyfqoO0Y5hmy7Nu7zx+XYA8B+uc\/PxyeAAQCY1u31Ywf\/+9nXQcPanK7My09n6TL7tLbjXpWfPnmqSidXCJrGCQAAYGsEgAEAmNB9cfP7h+LNx4fH3\/D8Zr77pfjr15vTGgDkOLWcl5\/O0uW96xMETo2RxtSqjnPId5wAAADaCAADADChu+LL5zfFz68vi2XPfih+\/PzltAYAuUIwME59pNv1TWfL2oKoT6HW5YKt8RiHKc1HU77C+mXpMgAAcAwCwAAATOh58eLlh+Lv28ti2f2\/xT+XH5tUf320T0BxPKcz\/+s0FcGjYwjHNU5xuSxdnttY+++TTnp9TXm9TSWUO05NYnuyxTICAADNrh7C9+8BAMBU7m+KV8\/fFZ8vi09eFu\/vPhVvn10WOwpBYF1ZjqIqQNMW3GG4cr2r72WMce53SWON11rf\/Dfle43lTLnPH5djDwD75T4\/HwFgAAA2yUMDRzJlsCY3YHQ0WwiQHcFYxyH3PF\/rcc\/Jf5e8r7WcZe7zx+XYA8B+uc\/Px1dAAwCwkNvi+ur69C+wlDQIVBUUWlrIU5zWZs15G2KP5QrBzTg1Sd9vW38uMe91+dnTsQIAAIbzCWAAADbJb41yNOUAT10QqKuqoNFYaY9hyfy17XvtddfXGstVztMe6nhsVccsaqqvtder+\/xxOfYAsF\/u8\/PxCWAAAIANCAGaODG9tJ7V+3Liee8YdNNWX0+1ql4BAGBvBIABAJjW7fXjb3h+P78qbu4v6wCPTlfG12kOaeBny4GgKeouBse2XC\/sV9P57pwFAIBjEwAGAGBC98XN7x+KNx8fHr\/i55v57pfir19vTmsAQRrIGTOQ2eR0NX6d1ibNU10el6i73LxtzV7LtTdN57hjxjxui+ur69O\/Z\/c3r55+ye+V\/h0AwNIEgAEAmNBd8eXzm+Ln15fFsmc\/FD9+\/nJaA6BeCGbFaW3WnLch2soVgo9xWqst5HFsTccMJnV7XTz\/8tvTL\/n9WRS\/CgIDACxKABgAgAk9L168\/FD8HT8eUnb\/b\/HP5UcAtiENqK4xwDpGHsM2cepqyLawRff\/\/lO8fPH8snTil\/wAABYnAAwAwISeFW\/\/fF\/889NV6W\/\/XubnfxW\/3P1RVH04GI4o\/eSeT\/LlU3eM6XSHuvx0li43GbJtF8551uFD8dOrm6L4zy\/Fj5dXvnr5oiiFhAEAmNnVQ\/huFgAA2JgQRNaVBZhXVUBzTcHHuoBrlzwOKePa62dL3Oc34v6mePX8XfG5eFm8v\/tUvC3Ccvglv9PPzy7rdOTYA8B+uc\/PRwAYAIBN8tAAsIxykHNtwc0xArACwOs4xu7zx+XYA8B+uc\/Px1dAAwAAALVCMDBOQQgIxqBg+fW9SAOeXQKgQ7Zdi\/R47u34Mofb4vrq+vRvszAAXDUDADCcTwADALBJYYBQVxZgWlcVwb8Q1Kx7fQ3KedtiAHZqbfWzlmPrPn9cjj0A7Jf7\/Hx8AhgAAADYjRCsjBPfSoO7VcFeAABg+wSAAQAA4KBCADBO7MOQY1q1jUA6tW6vHz\/F8\/38qri5v6wDAMAiBIABAADggK6SYF+6HKTBv7hc9zrLyjmmMI774ub3D8Wbj6er\/yGZ734p\/vr15rQGAABLEQAGAACAgwgBwTjleihNZXWvs17psco5dn3OGY7grvjy+U3x8+vLYtmzH4ofP385rQEAwFIEgAEAAKDGnoJfeygDw8WgfVXwt+q1MucQT54XL15+KP6+vSyW3f9b\/HP5EQCAZVw9hO9mAQCAjQl\/Y05XFphSVbCrLUC2Zm3Buy2XjSfl4zz0mC55DbjPb8D9TfHq+bvi82Xxycvi\/d2n4u2zy2JHjj0A7Jf7\/HwEgAEA2CQPDcDU1hoAbgrw5b4XraE8rJcAMEtw7OH\/t3fv2k0zi9+Ax\/eSULC4guQKeHdDRUuXlKH5d7uk+xpcQve2VDSbXAG5gqwU2PfizxN7iBjko87S88wyWNZpNCNFjn+RDDBezvPtcQtoAAAAGIg8kCsO7xsX5cGd8JdD7DMAADBMAmAAAAAoMcbwK25DKnAM+wwAAAyPABgAAAB2EH4BAAAwNAJgAAAAGIg8iC4O7xsHAADAdAiAAQAAGIX4nbepjFkMdlPJ7RuXm0p7AQAATI0AGAAAgMHLQ0yh5n7aCwAAYLwEwAAAAAAAAAAjIQAGAAAAThKvGE6lKW2sAwAAYIwEwAAAAAxe\/p23x3wH7pRVaa88kG0ioG1jHQAAAGMlAAYAAGAUYoiZypTEcDSVU0y1vQAAAMZOAAwAAAADlYe+p4bAHC+F7NoYAADoOwEwAAAAgyCAe9FlO+RXDDdxBXEb6zhF3tZD2QfTfjKU+gIAAPUQAAMAANB7eYA15UCrD9seA9lUmtLGOsbMMQMAANMlAAYAAIAREfQBAABMmwAYAIBmLefhejYLs\/i4vd++GN2H29nt+l8A6Lf8KmRXJQMAAH0mAAYAoEHLMP\/wMbz5sQqr1frx7nuYCX2BMwjgXggfuxHbPZUuxCu7U9ln1zRd1RsAAGifABgAgAYtwtPDTXj3djv49ktYrd6F70Jg4Awv8Zsgq9gWsRTlwwxfHujuCoF3Bb\/2CQAAmBYBMAAADboMr68ew6\/ldvDZ2\/AlhsDXn8Lj9hUAqkkhn6Cv\/zbX524KAABAEwTAAAA06CLc\/fs+fLuchT++\/jeGwP99Ex62QwAwBXno22UInELoYjnGqdMDAADtm63il7EBAMDAzGaz5+8VBqD\/imFhukq57LWxKwtNj932Y9vrmOnK6pEcu+ykqb5znp8ufQ8A4+U83x5XAAMA0Kz72+c3+H8\/rsP8j1tDAzB065\/uv0tSfB7l46N8mL\/FoDWVfY6dDgAAGC8BMAAADVqG+aev4ebH6vkvPP94LN6Hbx\/m6ykAGAOh7mHrs9\/22UY+DAAAUAcBMAAADVqEp4eb8O7tdrDo4lV48\/C0ngKgXZvrTzeFYbfHsXU\/dro2xNA3la7sWvehOuXju9wGAABgNwEwAAANugyvr76G7\/fbwaLlr\/C4fbpP+e2jhTbAedY\/QbbPNvLhqWmjPcpCw11BYlx\/Kofk0+ya59jp2hTrkEpXUj8UyzGK03VZfwAAYLfZKt5\/DwAAmrKch+vLj+FhO\/jiKnxe\/Ax3F9vBE8UQ2FtZ4FRlgdWxwdcY1d0exeWdupxT63Ls9H3r877V51Rt1d95frr0PQCMl\/N8ewTAAAAMkl8agHMMPXyrW5\/a49S6HDt93\/p86PtgWf2jurfBeX669D0AjJfzfHvcAhoAgI7ch9vZ7fpfgPbkIdWQgrcmDLk9jq172XQxxExlrKawjQAAQDlXAAMAMEj+ahRgfIphZVNhdFkg2tS6dml6O5vexjba0Hl+uvQ9AIyX83x7XAEMAAAA9EIMEVPpuxiCpnKqPm7nKduT17tP2wEAAAiAAQBo2v3t8194\/v24DvPldhqAEVj\/ZPtdGLe8j4fe5+dsTwqwhb8AANA\/AmAAABq0DPNPX8PNj9XzLX7+eCzeh28f5uspAIZvbIEgw7Y+y26fbeTDAADAuAmAAQBo0CI8PdyEd2+3g0UXr8Kbh6f1FABwnhi0p3KsqYSjcbtSKTqnzQAAgGERAAMA0KDL8Prqa\/h+vx0sWv4Kj9unAHCqPMA8JdDcFY4eK5\/v3OW0bVebDXV7AACAcrNVvP8eAAA0ZTkP15cfw8N28MVV+Lz4Ge4utoMnit8j7K0s0CfFcE2A1ryywFe77zekNnOeny59DwDj5TzfHgEwAACD5JcGINkXvE49lB3z9guATycAZgj0PQCMl\/N8e9wCGgAAgKPFACmVPsjrURzeN24Kxr79eXAp\/D1MmwEAwDQIgAEAADjK1ANV+icGmKlwHG0GAADjJwAGAACAHooBeyoAAABwLAEwAAAAg5VfxVgc3jeu7\/LQVwgMAADAsQTAAAAAHKWPgWoxGC2rT3wtlanJt7lvbbC5tnlTAAAAqI8AGAAAgKOlMLUPYWIeHAoS\/9an\/irSdwAAAM0RAAMAADAaMUg8JUxM058yTxvywLZvAS7TlR8z+TAAANA9ATAAAACjc0wYlU\/TtwArXbkr\/KUvDh0zfTuGAABgqgTAAAAADNI5wWgMqFKhO3nfCblf2EcBAICqBMAAAAAM1ub62OPCQ4Fav6S+O7b\/piDfR+2zAADAOQTAAAAADF4eIp4TKgoiD9tcl7opUMdxBwAA1E8ADAAAwCjE8CmVY50zz5BVCXDzec5Zxi6pTnUuk3rt6pupHUMAADAEAmAAAAAmIQ+ophZY5QFeX8LWvtarC0PfR2PfpQIAAHRHAAwAAMBkxEAtlaYJwzhHm\/tonfL93H4PAADdEQADAADwLIWVgpvq8jYcQ5vmgeTQAkqq0f8AADAcAmAAAABGGVgOQWznVJpWR4AX50mF6dH\/AAAwDAJgAAAA6EAe+rYVAg8hwEuheBttQj3yfarv+xgAAIyZABgAAABqJgyrjxB4OOJ+ngoAANAdATAAAAB\/BTYCnOpSEKYt95t6+7xc6yzoBgAA6iEABgAA4NlLXCmwbEPezlNu97TfTa0N8tBXCAwAANRBAAwAAAAVpSs4dwV4u8ZPNfjcJ28LbQMAAHAaATAAAABUkIe6pw7ztxSKC38BAABOJwAGAAAA6EAecAu8AQCAOgiAAQAA6Ey8GjYVhm2MfdnGNqUrnfsS\/raxzQAAQLMEwAAAAHQiD5iGGjjlwd2pw2Mwlr4sGuM2HTLFbQYAgDESAAMA0Kz72zCbzUoe12G+3E4DMHAx1E2lzKHxlFufLX4XAAAAjiMABgCgQcsw\/\/Q13PxYhdUqeyzeh28f5uspAF4I+kjyfcG+AQAAcBwBMAAADVqEp4eb8O7tdrDo4lV48\/C0ngKYqpWrYUcj78sx9O0Yt+mQKW4zAACMkQAYAIAGXYbXV1\/D9\/vtYNHyV3jcPgWatbmB7qZAU2JYmMpYjHGbDpniNgMAwNgIgAEAaNBFuPv3c3j8Z\/b3dwBffgvvF19C2cXBrVrXpdNH0a7XoYL10bZ9tpEP982h0CnWPxXGLd8XBJLQM\/e367cs65\/Gfz2uw9x3fAAAdGq2il\/ABgAAAxM\/YKz8Vna9jF6I21FWF2\/VqcGsJCitI0grLvfc5Z1at6a2BeifWs7zNGgZ5teX4em\/q\/Al\/2u+5Txcfwjh35934WL70in0PXVK7x12vV84ND45Zrri+5Q43a73Lfmy8vn22bXMqLjcsunqtm89u8blda1Dle1toj5TUqXtx6Trdjhn\/cV5jp0\/TlcH5\/n2uAIYAIBmuToERmd9BG+fbeTDAIzdIjw93IR3ZbdyuXgV3jw8raeA7sT3JrHEwCKFG7EkaXjX+CS9vm+64mtxmiifJilOt2u+9FrRrtejNO7Quuu2bz27xm1qWm\/9qiyvifpMibbb6Lodzll\/cZ5j54\/TnbMuuiMABgCgQcsw\/\/Q13PxYPf+F5x+Pxfvw7cN8PQXQpPXRtn22kQ9D3dKHQz4ggjG7DK+vvobv99vBouWv8Lh9Cl2I55\/4fqf4nicNp\/NTGk7ScPHcdcx06f\/i6\/H\/ouJwel6cL4nP8\/FRPm2aLg1H8Xlx3cVxuX3jDtk1b3z9nHF9M5R6NmHs2z6lvi3b1lO2f9+0cVzx5xP9JgAGAJi8+3A7m4XrRi7H7fnVIX247VCqQ16XPtSN0Yi\/qKfSJ3l9DtXv1OnjhxOp0I68rbU9jNVFuPv3c3j8Z32U53d5ufwW3i++hLK3f61a16XTR9Gu1wEAGiIABgCYvLfhy2oV\/g0fQvrgrr4wuPrVIX98oFh41CYGrV0+ina9Dj1zahC7T5w3lWMcO\/36J8X22UY+DEBFF3fh5\/o9y193eVn9DHfnfPlvnep8r3iuVIe8Ln2o24jF8\/16L9wOnS7OG5dxaDlpuvQ8SvPser04rih\/vThfej1Nk8ZFxeH0vPh\/mX3jDtk1b3p913LTuDhdE+pc7q5tSJrahj4Y+7Yf2r4xybc1HaPJob6M0+6aJo2bUnsOmQAYAIBnF3c\/f39wVwyDb8vC26NVvzrkzw8UXx7Afuuj7HdpwvpI\/F1g6Jo+Xuo0pLoyVfHuMrfrf\/f7673h9gEAQHWzlU\/PAACI7m\/D7J+vz0+vPi\/Cz+dLN+IHeN\/Du1UPbuOXiR8QeisL5WYlwdDUglpt0J1i2\/elzffVaUj7Sp\/rWne\/O89PVy1935cgOW5HWV3s242KP492\/RxKP6v2jU\/jDi0njsuXl78e5dOVjUvzR8Vpo3zeXdOmccX\/y+wbd8iueePr0anj+qZK2wzd2Ld9Sn1btq2nbP++adO4+P+5vMdrjyuAAQAmb\/MdwLPv757fhMfHJvyN4u2hmwp\/j7s6BOAc+YcSVT6k4DSxrVPpg\/wDrGM+\/DpmGl6c08bQqD58sJzqkNelD3UDAEbPFcAAAAySvxqF3crCl76EcdC2Q8fDrrCyj8dMX4\/tJurlPD8AhbvH\/OkqfF6c\/z3A+p46pJ9L6WfRqcPJMdOl16L4enF4l3y6suGic5YJ0IT859OpnOfb4wpgAACAkcl\/Ka\/6SzrjFT8oTmWqhnR8OLbpj2WYf\/oabn6s98JV9li8D98+zNdTQHfWe+JzSee4NJyk4V3jk\/T6vumKr8VponyapDjdrvnSa0W7Xo\/SuEPrrtu+9ewat6lpvfWrsrwm6jMl2m6j63Y4Z\/3FeY6dP053zrrojgAYAIBmxatD4i2m\/3pch7lPBqEx6Rd0v6Szy\/on8fbZRj48FvkxUHZMHDNNX8S6pdIXeV36VDeasghPDzfhXdn3hFy8Cm8entZTQPcO\/bw8ND45Zro0TZquOJxK8fUkDRdf26U4bSpJcTg9b7LsW8+ucUnxtaqlyvKS4mvK8UXbbUrX7XDO+ovzFJ\/vKwyPABgAgAa5OgSA7q3POr\/LLvumieF4KpTb136M0WV4ffU1fL\/fDhYtf4XH7VMAALohAAYAoEGuDgGYmrGFpfl2dLldqV27rANsXIS7fz+Hx3\/We2N+l5fLb+H94ksoe\/sHAEA7BMAAADTI1SEAfZVfqVnHlZuzLJjMh3eJ06VCubxt+tZWqf\/6Vi8adHEXfuZ3eHl+\/Ax3F9tpAADoxGz9xsy9eQAAaM5yHq4vP4aH7eCLq\/B5cf4HhPEKE29lAfqlLPxbHQiWz5mnTX2pX5\/bqYm6Oc9Pl74HgPFynm+PABgAgEHySwNA\/4wxAI6KdeyqbgJgpkLfA8B4Oc+3xy2gAQAA6LUYLqVCv+WhX9+C3HPF7UilTcV9P19323UBAACGQwAMAAAwQsXgaMjy+g99e8bunP4SbJYra8vYNqn0RVkf96l+AAAwRQJgAACAkTknhKN9sV9SmbqXWFNwOCRl+64+BACA7gmAAQAAoEYvse7uYDcf9zLHptANfQAAAIyBABgAAIDeyq8m7PvVhXlweG6Q2EQAuYk1N6UpQ+uvorxdmmynYwy5LQEAgG4JgAEAAEZmbMFRrH8qU1JnANlmuDnV\/mrCvraMfZhKV\/J6ldUTAABonwAYAABghFJoJJDpJ\/1CFXno23UInAoAANAPAmAAAAA6l65k7DLIqkMegu0LxVJolgrdyvugrT4Zy74PAAD0hwAYAACATuXB19CDsBTonhog5tOfOv8+TS576FL4Gktsl1TaENdZlA8DAACcQwAMAAAAPdFkANnksodqqAFs3of6FAAAKBIAAwAAQA1ieJgKNKG4j6UwX\/gLAADkBMAAAAB0Kg+whhhoxUCuKB+GMqfs+\/YxAADgWAJgAAAAOheDr1SgaTE83RWgth2s2vcBAIC6CYABAACAVqUAtu2wNepinVUNsc4AAEB3BMAAAABQUX71pqs5d8vDzD6Gm0MIXO1jAADALgJgAAAAqCCGhSkw3NzIVzC3yxCCVQAAgKETAAMAAMCZ8kCzzoBzEytvSm7fuD7oe\/2GJv+jgq7\/yED\/AgBAvwmAAQAAoEZ1hGL5MorD+8b1wan16+MV032tUypd6vv+BwAACIABAACgdkKxcnl42UWYWVaHvIxJ3BdTAQAApkEADAAAAGcaW1jYhpeYtbu260Md2pCHvkJgAACYBgEwAAAAZ0tXFuZlSpoIEfNlFof3jeuDvtePavQvAAD0nwAYAACAs+wLeqceAtcRisVlpJIrjkuhe51tXnWZxfpNQdX2Gpqp9S8AAAyNABgAgGYt5+F6Nguz+Li9374Y3Yfb2e36X4Bx6CIUywPHOgLIJpbZN3GbUqkqX0Ydy6xLvi+2uW8CAADdEQADANCgZZh\/+Bje\/FiF1Wr9ePc9zIS+AHSoz4FtE2LomwoAADANAmAAABq0CE8PN+Hd2+3g2y9htXoXvguB4bcYPqXSZ2X13BcoCZsAAACgGwJgAAAadBleXz2GX8vt4LO34UsMga8\/hcftKzBVxTA1yof7Yl8905WFeaEdeVsf0\/ax\/1Ipc84yp0x7AQAAfSMABgCgQRfh7t\/34dvlLPzx9b8xBP7vm\/CwHQLgfDFwTOWQPPQ9JgTeNU1Vmwh6U9qUt9Mx7XbIpvU3BQAAoGuzVfwyNgAAGJjZbPb8vcIwZGXBVx8DpKHUk8OO7cum+\/zQ8ovj7WvT5Dw\/XfoeAMbLeb49rgAGAKBZ97fPb\/D\/flyH+R+3hobpyYOtIQVd66N4+wzqle9b9jUAAIDTCIABAGjQMsw\/fQ03P1bPf+H5x2PxPnz7MF9PAdO2Php+B78x6BJ20aS0ryX5MNWl49ixDAAAdEUADABAgxbh6eEmvHu7HSy6eBXePDytpwDyoEhwVF0K4LTl39IfHewLf\/Nx+6Y9R9PL70q+v9n\/AACALgiAAQBo0GV4ffU1fL\/fDhYtf4XH7VOg38rCufy1FLb2IfDK69CHOg1R7ONUmrBr+YeGAQAA2G+2ivffAwCApizn4fryY3jYDr64Cp8XP8PdxXbwRPF7hL2VZcgOhZJDCr3KtqXL+vetPrSr2P9t97t9rz7O89Ol7wFgvJzn2yMABgCg1+IvB7t4K8tQjSn8jYYUAHcZDtK8PuyL9rF6+HBwuvQ9AIyX83x73AIaAICO3Ifb2e363\/3iLwZlDxib9Z79u1BN3oZpOA8Hy8JCqCodx2m\/AwAAaJsrgAEAGCR\/NcqQ9eEqxWMdezXjEK56HFK7c54x9fEQjqkmOc9Pl74HgPFynm+PK4ABAABaloc5bYY7MVRK5ZB8mn3zxG1IZZ+07n3LgnPl+9+h\/bGv8uPD8QIAAJxCAAwAQLPub5\/\/wvPvx3WYL7fTwASlsLTNgGp95G2fbeTDTet6\/Xlbt9n2tCcdV\/oXAACYKgEwAAANWob5p6\/h5sfq+RY\/fzwW78O3D\/P1FADtWf\/0+V2KYhidSlV1LgsAAABOJQAGAKBBi\/D0cBPevd0OFl28Cm8entZTAH2Vh6T58FjkQW2V4LbOZTFdUzn2AACAZgiAAQBo0GV4ffU1fL\/fDhYtf4XH7VOgHeeESnGaVKrKl1HHMulGDLZToRnpuHOcAAAAp5qt4v33AACgKct5uL78GB62gy+uwufFz3B3sR08UfweYW9loTnFYG\/sAVRZiHnuNte5rL6awjbSPef56dL3ADBezvPtEQADADBIfmmA5kwx4Ksz8K5zWX0kAKYNzvPTpe8BYLyc59vjFtAAALTr\/jbMbsvuCQ3QnRhgplJVncsCAACAUwmAAQAAYIDilbiptCkPtgXdAAAA\/SIABgAA4A9dBnxdhZpDk7dP2+0V94lUAAAA6BffAQwAwCD53hgYn7IQU8BYTlsxds7z06XvAWC8nOfb4wpgAAAAgImLf1SQCgAAMGwCYAAAABiY\/GpfV\/9SRR76CoEBAGDYBMAAAAD0glDzNLF9UgEAAIBEAAwAAEBvCDVpQ7rVsStdAQCAMRIAAwAAQM0EjP2V94k+AgAAxkYADAAAADUSMAIAANAlATAAAADAhOW3XHcLdgAAGDYBMAAAANTE1b79J+wsF9shFQAAYNgEwAAAAFCDXeGvQK1\/XqJOfQMAAIyPABgAAAAaImAclhjipwIAADBUAmAAAABgr7qC0bqWU8WuOhwaBgAAGAoBMAAAANQgv9p3LFf\/1hWM9iFg7UMdAAAAmiYABgAAgBPE0DCV3OZbZTdlqva1T5lTp29TH+sE\/XAfbme36383lvPrMJutj5j4uJ6H5fZ1AAC6IQAGAACAI+WBYJ0BYVxWKl2oY\/35vIeWder0TdoV2ndZJxiE+9tw+fTfsFqtj6L4+DeED0JgAIBOCYABAACgY10HofvWnwej517dXNdyqjhUhy7qBEO3\/PUYrl5fbofWLl6FNw9PYbEdBACgfQJgAAAAYK8YjKZSRV3LqaIPdYBx+Br+uZ6H8J\/34c32ld+uXodCJAwAQMtmq3hvFgAAGJj4HXPeygJd2Hd17LnKrvhtM6A8Z\/272uGU9ul6u3c5ZRv6bMjb4Tw\/EMt5uL78GB7CVfi8+BnuQhz+Ft7H5xfbaU6k7wFgvJzn2yMABgBgkPzSAIxN12FdF8FtXcvhb0NvW+f56dL3ADBezvPtcQtoAAAAWhEDqVTG7NztjOFcKl3oYv35utpcN9CU+3A7u13\/CwBAV1wBDADAIPmrUaiuGFA2HbyVhaFjDPtsZ3+1ub\/3wdD3Ref56dL3ADBezvPtcQUwAADABOXhUFlYRD3G2LZ5kDik8Deawv4+tD5ieuIHwGUPAACqEwADANCyZZhfX4f5cjsIPTArFGhCHfvWy17aj\/00BoqplOlbfYGa3d+WBriz2XHv8+LVP2UPAACqEwADANCg+B1w+YeCl+Hjw0P4eBmf+344urfeE7fPNvJh6rHKQsJ8eCya2q6h7aeOq+7pA5q1DPNPX8PNj5fg9vdj8T58+zBfTwEAQFcEwAAANOht+LL4HK7Wz64+L7YfDC7C56ur8HkRn39ZTwF0YX0Ebp9t5MNNiOtIZczGvn1jMKQ+isFtKtAfi\/D0cBPelb2Ru3gV3jw8racAAKArAmAAAJp1cRd+rlbh3\/AhHHtLQKAdKYwdUhg2FHmbauPuDDk4zesuBKY\/LsPrq6\/he9mtXJa\/wuP2KQAA3RAAAwDQiou7n2G1+jeED\/EW0NsXoQcEdUSb6ys3pS5xX0qlqnwZdSwzamK7o7rq21T9pqCpfQY2LsLdv5\/D4z\/rozP\/uo\/Lb+H9wl1eAAC6NFvF+\/ABAMDAxA8YvZUF6jArCRenEJb1fbvrql9b29nEeqa6b0bO89Ol7wFgvJzn2+MKYAAAmnV\/u7ka5K+H20EzHOs99ndpUlvrgSnJA9O2wt+o6rHcRt2hNvE9323ZPaEBAGibABgAgAYtw\/zT13DzY\/X8F55\/PBbvw7cP8\/UU0G95gNNUONvWeo4R150K7dHuzVmfdX6XoRly3QEAgG4IgAEAaNAiPD3chHdlXwJ38Sq8eXhaTwEcq42AMF92k+vqizxY6yJo66Ldu97uuI2plOlDvzTtUBvsU2VeAABg3ATAAAA06DK8vvoavpfdDXD5KzxunwKH5SGP0KdeMVxMZUq62u5j9+eu6neqXfXbV+8qx\/Qx88bXUoFWvP0SVl\/K\/uoPAIC2zVbx\/nsAANCU5TxcX34MD9vBF1fh8+JnuLvYDp4ofo+wt7K0pRigNBlE7VtPWYjTRF32hUVNbvvUtdW\/fTG17S1TpQ0OzTuG9nWeny59DwDj5TzfHgEwAAC9Fn852MVbWfqoGLxUCVzy5bQZ6JStK2kzRKqrLbt0yjaMYXuP1eb+3FdV2uDQvGNoXx8OTpe+B4Dxcp5vj1tAAwDQkftwO7td\/7tf\/MWg7AF9lIcuZSHMMcqWs97zt0Mb+XCd4rKbXP4x6mrLLp26Dandu277NuTbOIVtzlVpA+0HAADs4wpgAAAGyV+N0kdlAd85wUxdy6nqlHoUp62jrn1pgyr6tA119w\/9Uta\/Q+9z5\/np0vcAMF7O8+1xBTAAAACl8tBoV4iUB51lwSfd0T\/tiO2aSlvK1peG4\/GaCgAAMC0CYAAAmnV\/+\/wXnn8\/rsN8uZ0GRiIPWs4NXupaTh3iulNpU76+Jta\/\/kn0uzShjW2gfufsF\/m0p8x7rn3raGP9AABAfwmAAQBo0DLMP30NNz9Wz7f4+eOxeB++fZivp4BxWe\/dv0sVdS1nyJpsg7YCuya3gfq1sV\/EZaYCAADQBAEwAAANWoSnh5vw7u12sOjiVXjz8LSeAhi6PNwce9g5tABvyP0ztLY+JN+OsWwXAADQLwJgAAAadBleX30N3++3g0XLX+Fx+xQYvhgqpjJmQw3whtg\/fW7rWJdUorxdT2nnfFl1GFI\/AwAA9Zut4v33AACgKct5uL78GB62gy+uwufFz3B3sR08UfweYW9lGapi0COo6c45\/VAW0unDZnTV1of2iyr1Kps3d8yyprAfOs9Pl74HgPFynm+PABgAgEHySwNDNYXgpi6Hgrgu6L\/29LWtq9arbP6itKx9+\/8U9kPn+enS9wAwXs7z7XELaAAA2nV\/G2a3ZfeEBvoihkupdCVfd5d1KcpDtrGFbn0y1raO25HKLn3d\/wEAgGEQAAMAAPDb1IKnuH3FcoxjAjzq0ce2zutSHD5nXyo6djvPnQ8AAJgGATAAAECLphrcnBqMtaGsLn2qH81K++M5fR6P21SSfDnHLrdsWcc4dz4AAGD8fAcwAACD5HtjoBlloVXVgGlXEHZoucX5mgi5zq0Xw9fWfl5lmU3v\/33nPD9d+h4Axst5vj2uAAYAAJioGDClkuRBU5PBU3G9ZeK6UwEAAACOIwAGAADooZdodn9Ieq58ucXhqQSvZds39m2uKu2Txf2FjXzfqbIv5e2rvQEAgFMIgAEAAHpmiOFPrGMquT6HqrFuxcJued+W9fU+af84db4m5H1dV9+n\/eic5fWpfQAAgGETAAMAAFBJHliVBVhloVg+nMKvsvnpRl19ks9fdXl1SPtkvh92oQ\/tAQAAjIcAGAAAYILy0KutECwFbvn6+hgQTp0+AAAAGCYBMAAAQM\/k4Wg+XJcUxDa1fPohBrmp1Ml+AwAA0E8CYAAAgB56iWb7H7KV1bHusLFtL5Hp8LejqI7tOWe\/zKc\/df6xO9Q+2gsAADiFABgAAIDKygKqU8LGPgVeTYSmQ1TWB1X6Jc6bCn\/L2ycfBgAAOJYAGAAAgF4QePVPsU9iAQAAoP8EwAAAADBSeWgrxD1dvAI8FQAAgCEQAAMAAExcXQFXW2FjXfXdZWyhaax\/Kpwm38ea2ucAAADqJAAGAACYsH0BV3yeyjGK0zUVNuZ1ObZup3qJTIWmXdvsgZsyFmPcJgAAoD8EwAAAAPwlD6YOBVWnTs9xYjumMkX5do+hHca4TQAAQL8IgAEAAKCHBIX1iW2XSpK\/lg9H+RXgrggHAACGQAAMAAAwYUMLuARynKoY6EZ5yBvtG477WCpV5esBAABoggAYAABg4soCruLzKB\/OnTp9FXHZqdBfm5h1U8ocGh\/lfTzkPt+1nfZjAACgbgJgAAAASm0i1k05xqHpX+K+4V4F2eY25O24q137KG+fU4eL0j7VxfbHepWVunSxTQAAwPgJgAEAAGhcHprVGaK1pYtteIk+2wkK4zalMhZ525W1Z9nwvjZI41JbpWEAAIA+EAADAADwm0CrOX1v27xep9Qzbdcp87Qphb6xJPlr+fAh+bYe2vZ8uceuBwAA4FQCYAAAAJ6dGmhxvDG3bdm2HQo7mwpD47rz0idxO1MBAABoigAYAIBmLefhenYd5sv18\/vbMJvNto\/bcL+ZApiAPPAaYgA2hm1oU2yfVMocGn+qXWFvej3+n8oxzqnXscsGAABokgAYAIAGLcP8w7fwfvEz3IV5uP70OixWq7CKj8Xr8Ol6vp4CmIpN1LcpQzWGbdgl36YxbWMezJ4SAqcCAAAwFAJgAAAatAhPD2\/Cq4vt4JtXIT0NF6\/Cm4en9RRAX+Qhl9CrPkNp21ivVI6VT3vKvAAAANRPAAwAQIPehnc3j+FXvMz34j\/h\/eOnza2go+Wv8Hjzbj0F0Ccp\/Ds2xNvcUHdT2C1vn7L2Su1YNq7vTt1vmrBr3U3WKV92l9sPAACQzFbx\/nsAANCYZZhfX4aPD9vB5OpzWPy8e7ki+ETxe4S9lYVulQWVArAXVYPcLtuyWPex9Gkd2zTGdukr5\/np0vcAMF7O8+0RAAMAMEh+aYDuDSEA7iqwK2ubU5XVt43t6XO\/dtWftM95frr0PQCMl\/N8e9wCGgCAZt3fPr\/B\/\/tx\/XI7aIAGrH\/SbJ9t5MNDM7btOUXc1ilvPwAAwCkEwAAANGgZ5p++hpsfq+e\/8PzjsXgfvn2Yr6cAhmp9JG+fbeTDU5NCyl3BZGyfVA45Zpqp2NWebXnpVYEzAAAwDAJgAAAatAhPDzfh3dvtYNHFq\/Dm4Wk9BTBkL5Fmd4FlHwK6Q+vO26dsuFi6lK+\/6\/oc62UvqG8\/yJdV57IBAACaIgAGAKBBl+H11dfw\/X47WLT8FR63T4HxS8Fc3QFavryXtcxqCTKLyztVXF8qZQ6Nz+XTHTvfOVK9mlxHVcW65f1zTn+lfj5nXgAAgD6ZreL99wAAoCnLebi+\/BgetoMvrsLnxc9wd7EdPFH8HmFvZWEY9gVqVQPGQ2FdleWXLXvX8k6Z9lxtrKOvittets1V22bX\/FNu8645z0+XvgeA8XKeb48AGACAXou\/HOzirSwMQ1mIVnRuoHZouVGVsO7U8K84fRMhYZ1hZNN1bVJZ3au2zb75h9xWQ+bDwenS9wAwXs7z7XELaAAAOnIfbme363\/3i78YlD2AaSsL7KqKy0zlHOufTr\/LMQ6t79D43LHT5+MPTd8nu+qet\/kxfRDnTWWf1KfHLBMAAKAPXAEMAMAg+atRGJZ9Ids5wVrZ8uJyiq+fsty6l3fIrvUlp9bn0PKSsumiOretScdu5yG72iEZSnuMmfP8dOl7ABgv5\/n2uAIYAACAxsVALZWifLgohnSpHOtlLZvlnrOMonx5TTqmnlXqc24bjMm+Nq7StgAAAH0iAAYAoFn3t89\/4fn34zrMl9tpgEk5Jmhb\/5TYPtvIh\/N5y5Z1aBl91XY99\/VD3xzT70WxLYsFAABgCgTAAAA0aBnmn76Gmx+r51v8\/PFYvA\/fPszXUwCcZ\/2T5HepKl9GHcvc59Dyy8bvCzHPrX8d25nqtatudYt1TmWfU+pzaFkAAABDIgAGAKBBi\/D0cBPevd0OFl28Cm8entZTAPTDS6zYThh4aF27xu8KNtP0ZfNE+eu7pjtFXpe2QuC67GsvAACAoRIAAwDQoMvw+upr+H6\/HSxa\/gqP26cAuTrCyjqW0YayejUVpMZ1pfXFdQwtsD3GsdvV1\/0BAACgqtkq3n8PAACaspyH68uP4WE7+OIqfF78DHcX28ETxe8R9lYW2KcYAvY97CsLLItBba7K9tS5vLrrVlVZfXJ93xfYcJ6fLn0PAOPlPN8eATAAAIPklwZgn74Fk4ccqm9x\/DnbcSgYPbdtzm3nfdtTZVt3bee520d3nOenS98DwHg5z7fHLaABAGjX\/W2Y3ZbdExpguvKAss7A8lD427a8PsXhXePi\/6kAAACwnwAYAAAAeiCGvqkU5aFn3SFoXF8KV4vLLnvtkLzux9q3jnzcvmnL1n9unQAAAIZKAAwAAMDo5KFf0yHgJibdlFOcO19VsT1SydddVp+y+pW91gfFbYsFAABgagTAAAC06+2XsPrydjsA0JyqIWAKQg8Fnfn4Q9Mn5853qnz7z22Poip13bX+uMwm6go0JH6tx2x95P71uA7z5XYaAAA6IQAGAACAzCwLOPPhNtURisZ5UqmqjrbYV4+Xmm6mSf8n+TDQhWWYf\/oabn6sj8hV9li8D98+zNdTAADQFQEwAAAA9NyqUOqWL\/PcdTRRt2Sz5ZsC9MEiPD3chHdlN3W5eBXePDytpwAAoCsCYAAAAKggDyX3hZTx6tlUTpmvSbEuRefU7Zy692X7gXNchtdXX8P3++1g0fJXeNw+BQCgG7NVvDcLAAAMTPyOOW9lgSYVg9E6wsk8aI32LXfX+ster1LXKvWKTl0fHMN5fgCW83B9+TE8bAdfXIXPi5\/h7mI7eCJ9DwDj5TzfHgEwAACD5JcGYGhOCVrLpj3FKaFs1XoJgGmC8\/x06XsAGC\/n+fa4BTQAAABMQAxvUwFozn24nd2u\/wUAoCuuAAYAYJD81SgwRMXwdd+Vs1VD2nzZZctL0+wblztlWqjCeX669D0AjJfzfHtcAQwAAAAtiWFpKvscGp+ULevYec\/R5rqAcYsfAJc9AACozhXAAAAMUvyA0FtZYCpmhStvzwldi\/MnaTn7xkFXnOenS98DwHg5z7fHFcAAAADQczGQTeUc+XzF4X3jAAAAGB4BMAAAAExADHZTye0bB\/C3+3A7e7lt89+P2\/UUAAB0xS2gAQAYpPjhoreyADBOzvNDEEPgT+H14me4u9i+VAN9DwDj5TzfHgEwAACD5JcGABgv5\/mBuL8Ns0+vw+LnXagrA9b3ADBezvPtEQADADBIfmkAgPFynp8ufQ8A4+U83x7fAQwAAAAAVBOvBr71zb8AAH0gAAYAAAAAAAAYCQEwAAAAAAAAwEj4DmAAAAbJ98YAwHg5z0+XvgeA8XKeb48rgAEAAAAAAABGwhXAAAAMUvyrUQBgvHxkNU3e4wHAuHmP1w4BMAAATJRbLw2HvhoG\/TQM+gkYOz\/nhkE\/DYe+Ggb9BH9yC2gAAAAAAACAkRAAAwAAAAAAAIyEABgAAAAAAABgJATAAAAAAAAAACMhAAYAAAAAAAAYCQEwAAAAAAAAwEjMVmvb5wAAAAAAAAAMmCuAAQAAAAAAAEZCAAwAAAAAAAAwEgJgAAAAAAAAgJEQAAMAAAAAAACMhAAYAAAAAAAAYCQEwAAAAAAAAAAjIQAGAAAAAAAAGAkBMAAAjNX9bZjNZs+P2\/vta7nSaZZhfr157fmxc2YqO7uP1o6Zl3o4loahyvG0tZxfh+v5cjsE0FPOS\/1W5Xx0zLzUx7E0DFWOqS3v8ZgiATAAAIzSfbj95zF8XqzCavE5PP5zu34lVz7Ncv4hfHzzI6xW69dXi\/D58R8fQDXi\/D46bl7q4VgahirH09ZyHj58fNgOAPSV81K\/VTkfHTMv9XEsDUOVY2rLezwmSgAMAABjtPwVHq\/eh\/9crJ9f\/Ce8v3oMv\/I\/eN4xzcXdz7D68nYzTbgI\/3l\/FR7\/mpnKKvTRUfNSD8fSMFQ5np4tw\/zDt\/Dm5mo7DNBTzkv9VuV8dMy81MexNAxVjqln3uMxXQJgAAAYo8VTeHjzKsTfgeOHEq\/ePISnxfPAi2OmCffh\/318E\/57t5mKGlXpo6P6jlo4loahYj\/FK3m+vf83\/N\/rzTBAbzkv9VuV\/jmq36iNY2kYKvaT93hMmQAYAADY4T7czj6F14svIf19O3AOx1KvxdsCfnsf\/vXBLTAZzktQD8dSr3mPx8QJgAEAYATub2dhNts+4hdQXb4OV4+\/wubOV8vw6\/EqvL58Hnixb5r1L8vXzx9m\/Ax+X25IlT46Zl7q4Vgahgr9tPzft\/Dw8DFcrn9+Xn58CA8fL8P1fDMVQNe8xxuYKv1zzLzUx7E0DBX6yXs8pk4ADAAAI\/D2yyqsVttH\/D6qi1fhzcO38L\/4++3yf+Hbw5vwKv9gYtc08cOMy6fw35UPMxpVpY+OmZd6OJaGoUI\/PX+P3\/bn5+LzVbj6vAg\/dRjQE97jDUyV\/jlmXurjWBqGCv3kPR6Tt975AQCAMfpxs4pv+ePj5sf2tdWP1U24Wf+7VTLNj5vNcPGx\/mV5M5J6ndlHz3a9Tv0cS8NQ5XjaWny+0kdA\/zkv9VuV89GB8xQ1cywNQ5Vjast7PKZoFv9ZHxQAAAAAAAAADJxbQAMAAAAAAACMhAAYAAAAAAAAYCQEwAAAAAAAAAAjIQAGAAAAAAAAGAkBMAAAAAAAAMAohPD\/AWQSY77E24EiAAAAAElFTkSuQmCC\" alt=\"image info\" \/>\n\n*Fuente: https:\/\/rpubs.com\/sandipan\/197468*","d6f091a8":"# **Pregunta 1.2**\n## **Genera una nueva tabla train con nuevas columnas num\u00e9ricas asociadas a las variables categ\u00f3ricas que creas oportunas y vayas a utilizar. Trata los valores missing (ap\u00f3yate en la pr\u00e1ctica anterior)**","40a53b6d":"Con esta gr\u00e1fica, **los outliers son m\u00e1s 'puros'**, ya que realmente se compoenen por los datos fuera de rango (*rojo*) y parte de los que con los datos train se habian categorizado como outlier, pertenecen ahora al grupo mayoritario. \n\nLa funci\u00f3n `dbscan_predict()` asigna el grupo al que pertenece cada uno de los registros, comenzando todos en el grupo de los outliers (*-1*) y teniendose en cuenta la distancia euclidea ntre puntos, para generar los grupos de datos.\n\n**En mi opini\u00f3n, esta gr\u00e1fica permite ver perfectamente los datos fuera de rango gracias a la utilizaci\u00f3n del DBSCAN**","a295bd33":"**Aplicar\u00eda un algoritmo DBSCAN para identificar esos valores raros sobre las CP.**\nA continuaci\u00f3n, sobre el PCA creado en el anterior ejercicio, se realizauna predicci\u00f3n de la pertenencia de cada individuo a un grupo seg\u00fan el PCA, de esta manera, se identifican los valores fuera de rango que no se explican correctamente con las primeras CP y que, por tanto, son outliers (y deber\u00edamos eliminar y re-entrenar el modelo)","4313fa0b":"**Este ultimo gr\u00e1fico, es el generado por el T-SNE, pero teniendo en cuenta los grupos de pertenencia predecidos con el DBSCAN. Como se puede ver, el T-SNE hace una agrupaci\u00f3n pr\u00e1cticamente perfecta, ya que los grupos que no se diferencian correctamente en el DBSCAN, se diferencian a la perfecci\u00f3n aqui.**\n\nLa agrupaci\u00f3n de datos generada por el T-SNE es coherente con la que realiza el DBSCAN, por lo que seguramente los datos se agrupen de esta manera. Existe un grupo mayoritario que contiene la amplia mayoria de los datos (*verde*, igual que en el primer DBSCAN) y otros tres m\u00e1sminoritarios (*azul, naranja* y *morado*) que no se diferenciaban tan bien en el DBSCAN, pero que, debido al car\u00e1cter de visualizai\u00f3n del T-SNE se diferencian perfectamente\n\n**Los outliers, que es el objetivo final de este an\u00e1lisis, pueden verse como los individuos rojos que no pertenecen a ning\u00fan grupo, si bien es cierto que podr\u00edan generar algunos grupos minoritarios.**","b6cbaf0c":"**En esta gr\u00e1fica, se ve perfectamente como los valores que est\u00e1n m\u00e1s alejados del grupo mayoritario son considerados como outliers, tal y como hemos intu\u00eddo al hacer el PCA. En mi opini\u00f3n, se ven claramente los valores fuera de rango, si bien es cierto que algunos pocos outliers se consideran dentro del grupo mayoritario. Esto puede deberse a que, o bien su pecularidad se da en otras CP y en las 3 primeras se 'camuflan' correctamente entre los valores dentro del rango, o bien la predicci\u00f3n del DBSCAN no es del todo correcta.**","37873186":"Una vez he tratado los datos que voy a utilizar en este ejercicio, **analizo sus correlaciones**, ya que siempre hay que hacerlo antes de realizar un PCA, ya que presuponemos que las variables son incorrelacionadas entre si para aplicar el modelo.","af2d4ac4":"# **Pregunta 2**\n## **\u00bfDe qu\u00e9 manera podr\u00edas identificar valores at\u00edpicos?**","857d0302":"A continuaci\u00f3n, para la tabla de entrenamiento, voy a analizar cuales de las variables categoricas tienen mayor relaci\u00f3n con las variables n\u00famericas que tienen varias modas (y que por tanto comienzan a dar una evidencia de que efectivamente pueden representar distintos grupos)\n\n**Si hay una variable continua que tiene distintas modas, es una evidencia de que pueden llegar a exisir distintos grupos de registros explicados en esa variable. Si tenemos en cuenta las variables categ\u00f3ricas altamente correlacionados con estas variables continuas, y efectivamente las continuas explican grupos dentro de los registros, estas categ\u00f3ricas deber\u00edan ser explicativas de los grupos que se generan, y por tanto, deber\u00edan tenerse en cuenta a la hora de generar los algoritmos de clustering (al generar grupos) o para identificar outliers (ya que los outliers no estar\u00edan correctamente representados en estos grupos que presuponemos que hay).**","a8ee6e24":"A continuaci\u00f3n, analizo la varianza explicada por el Kernel PCA, las variables con las que m\u00e1s se relaciona cada CP y asigno nombres a estas en funci\u00f3n de estas relaciones.","0b5cca46":"**Primero, voy a realizar un T-SNE sobre los datos que he codificado en el ejercicio anterior.** Me parece adecuada al ser una herramienta de visualizaci\u00f3n de conjuntos de datos de alta dimensi\u00f3n,como creo que es el caso.\n\nAntes de todo, **aplico un PCA sencillo sobre los datos** (una vez escalados), para poder seleccionar las 3 variables que mayor informaci\u00f3n van a explicar de los datos, y asi graficar el T-SNE de la mejor maner posible. \n\nRealizo el T-SNE y lo grafico, como se puede ver en el gr\u00e1fico, **aparecen una serie de grupos correctamente diferenciados** (debemos recordar que las distancias entre individuos intragrupo son reales, pero entre grupos, se escoge la distancia que m\u00e1s convenga a la gr\u00e1fica, por lo que son irreales).**Para establecer el perplexity del T-SNE, he tenido en cuenta la siguiente  <a href=\"https:\/\/towardsdatascience.com\/how-to-tune-hyperparameters-of-tsne-7c0596a18868 \">publicaci\u00f3n<\/a>.** (raiz cuadrada del n\u00famero de registros con el que se construye el T-SNE, (2.209 ^ 1\/2 = 47), por lo que la perplexity es igual a 47.\n\nA priori, **puedo identificar 4 o 5 grupos principales, unos tantos m\u00e1s de un tama\u00f1o menor y valores que no pertenecen a ninguno de los grupos y que, por tanto, presupongo como at\u00edpicos, a falta de confirmaci\u00f3n por otros algoritmos.**\n\nEn principio, **no puedo separar por grupos al ser un an\u00e1lisis no supervisado**, pero m\u00e1s adelante utilizo algoritmos que me indican al grupo al que pertence cada individuo en funci\u00f3n de una serie de inputs (DBSCAN) y **vuelvo a graficar el T-SNE, pero teniendo en cuenta el grupo al que se supone que pertenece cada individuo seg\u00fan el DBSCAN, para comprobar que, efectivamente, los grupos generados por el TSNE se contrastan con el DBSCAN.**","739c0342":"Como se ve en el gr\u00e1fico, **el PCA simple no es capaz de diferenciar los datos ya que estos no se distribuyen de una manera lineal.** Debido a esto, los grupos de datos (*naranja y morado*) quedan \"atrapados\" entre el resto de datos (*outliers*). La agrupaci\u00f3n de los datos la he aplicado utilizando el DBSCAN como algoritmo de clustering, con el numero minimo de muestras y elepsilon obtenido seg\u00fan los criterios ya explicados.\n\n**No existe la posibilidad de explicar correctamente el comportamiento de cada grupo diferenciado al proyectarlo sobre ejes ortogonales, debido a la falta de linealidad**\n\nPor la falta de ajuste del PCA sobre los datos tratados con el Target encoder, **decido realizar un Kernel PCA** para ver si, al tranformar la dimensi\u00f3n, es capaz de diferenciar correctamente losgrupos, y estos no quedan \"atrapados\".","05c7d44b":"Para identificar valores at\u00edpicos, voy a aplicar distintas herramientas aprendidas en clase:\n\n> 1.- Un **T-SNE** para ver si se generan grupos y valores at\u00edpicos que no pertenecen a ning\u00fan grupo. Har\u00e9 el T-SNE sobre los valores train que acabo de tratar\n\n> 2.- Un **DBSCAN**, para tener la certeza de a que grupo pertenece cada individuo, y poder asignarlo en la visualizaci\u00f3n del T-SNE, de esta manera, el an\u00e1lisis ser\u00e1 m\u00e1s robusto.\n\n> 3.- Un **PCA completo** (ya en la siguiente pregunta) y un DBSCAN para ver si con el nuevo PCA se diferencian mejor los datos. Voy a entrenar el modelo con los datos de entrenamiento, y luego, har\u00e9 la transformada con los de test para analizar si, efectivamente, el modelo detecta correctamente outliers. Ser\u00eda interesante eliminar los registros fuera de rango de los datos de entrenamiento del modelo, pero debido a que se van a utilizar en las siguientes preguntas de la pr\u00e1ctica, no quiero modificarlos","4b09be11":"Efectivamente, **el kernel PCA se ajusta mucho mejor a la composici\u00f3n de estos datos no lineales**, por lo que es el que he decidido explicar a continuaci\u00f3n. **Sobre esta transformada, si que se pueden aplicar ejes que diferencien los grupos de una manera lineal, pudiendo proyectarlos sobre estos ejes y diferenciando la informaci\u00f3n que contienen.**","821272f4":"* **CP1**: Las variables mas correlacionadas son *Overall_Qual, Year_Built, Year_Remod_Add, Exter_Qual, Full_Bath, Kitchen_Qual y SalePrice*, todas ellas de manera positiva. Estas variables, realmente, tienen una correlacion alta entre si (cuanto m\u00e1s reciente sea la vivienda, mejor ser\u00e1 su calidad y por tanto mayor su precio). Por lo tanto, podr\u00edamos llamar a esta CP: **Calidad, nueva construcci\u00f3n y precio**, ya que contiene la informaci\u00f3n de estas variables . La viviendas que tengan un valor muy alto en este factor, ser\u00e1n aquellas de alta calidad, una construcci\u00f3n reciente y un precio elevado, mientras que las viviendas con baja calidad, antiguas y bajo precio tendr\u00e1n un valor m\u00e1s bajo (negativo) en este facctor.\n\n* **CP2**: Las variables mas correlacionadas son *Garage_Cond (neg), Year_Built (neg), Bsmt_Cond (neg) y Kitchen_AbvGr (pos)*. Realmente, la mayor\u00eda de estas variables son las que tienen una correlaci\u00f3n m\u00e1s cercana a 0 en la primera CP, por lo que contienen la mayor parte de la informaci\u00f3n no explicada por la primera CP (tal y como es la composici\u00f3n de las CP en un modelo de PCA). Se podr\u00eda llamar **Antiguedad y baja calidad**. De esta manera, las viviendas con valores muy altos en esta CP ser\u00e1n antiguas y de baja calidad, mientras que las viviendas m\u00e1s nuevas y de calidad tendr\u00e1n valores negativos.\n\n* **CP3**: Las variables mas correlacionadas son *Half_Bath (pos), Bedroom_AbvGr (pos) y TotRms_AbvGrd (pos)*. Esta variable, a mi modo de ver, no est\u00e1 hablando tanto de las condiciones de la vivienda, sino de la composici\u00f3n y distribuci\u00f3n interna. Al tener muchos dormitorios en general y en la plantta principal en particular, asi como muchos aseos (lo cual tiene sentido, ya que algunos de estos dormitorios podr\u00edan tener un aseo en suit) esta describiendo casas con muchas habitaciones, o pensadas para muchas personas. Por ello, esta ultima CP podr\u00eda denominarse **Cantidad de dormitorios** o **Familias numerosas** ya que las viviendas que se proyecten de una manera m\u00e1s positiva en esta CP, tendr\u00e1n un mayor n\u00famero de habitaciones, por lo que servir\u00e1n para familias con gran n\u00famero de individuos.","7dbcb5c9":"---","63d9472c":"Para realizar este PCA, voy a cambiar un poco la estrategia, y voy a aplicarlo **sobre las variables obtenidas tras realizar un OneHotEncoder de todas las variables categ\u00f3ricas disponibles en train**, de esta manera, espero utilizar la informaci\u00f3n que contiene la tabla de la manera m\u00e1s pura posible, evitando realizar suposiciones como en la pregunta anterior. \n\nTras esto, **escalo los valores y realizo el PCA**. En un primer momento, no especifiqu\u00e9 el n\u00famero de CP que quer\u00eda (por lo que se generaron tantos como n\u00famero de variables tiene la tabla de datos escalados) pero despu\u00e9s me di cuenta de que, **al tener en cuenta todos ellos para buscar outliers, estar\u00eda cometiendo un error: los individuos que son outliers se explican correctamente por las \u00faltimas CP** (las que menor informaci\u00f3n aportan, por ello son outliers) **por lo que al tener en cuenta estas CP estar\u00eda introduciendo estos valores como no at\u00edpicos en el an\u00e1lisis.** Por ello, despu\u00e9s de hacer una primera aproximaci\u00f3n, tan solo he generado 28 componentes principales, que contienen un 79,4% de varianza explicada, tal y como se ve en la siguiente gr\u00e1fica, as\u00ed como que son el n\u00famero de CP cuyo autovalor es mayor que 1.","5708fe71":"Para certificar si efectivamente estos individuos son outliers, voy a aplicar el error cuadr\u00e1tico medio\nEl PCA lo he entrenado con train (x) y ahora voy a tranformar las variables de test aplicando el modelo entrenado","484de4f5":"# **Pregunta 1.1**\n## **Realizar una primera transformaci\u00f3n de los datos en la que generes un conjunto de train y otro de test.**","0921a4cc":"*Fuente: https:\/\/stackoverflow.com\/questions\/27822752\/scikit-learn-predicting-new-points-with-dbscan*","17f718ef":"Para aplicar un **Kernel PCA**, igual que para aplicar un PCA simple, solo puedo tener en cuenta variables num\u00e9ricas, para ello, utilizo un **target encoder** con la variable precio como objetivo (*como se menciona en el enunciado*).\n\nPara ello, utilizo la funcion `TargetEncoder()` (Tengo que crear el modelo continuamente para cada variable categ\u00f3rica).\n\nAl ser *SalePrice* una variable continua, para cada categor\u00eda de las distintas variables categ\u00f3ricas que hay en los datos, **se establecer\u00e1 el valor de la media de precio para esa categor\u00eda.**","97884b24":"Por \u00faltimo, utilizo la funci\u00f3n `train_test_split()` para generar la tabla *train* y la tabla *test* **dividadas en una proporci\u00f3n 80%\/20%** de forma **aleatoria y sin remplazo**, de esta manera me aseguro que se han escogido todos los registros.","5eef2e53":"Una vez he tratado los datos con el Target Encoder, me planteo si hacer un PCA o un Kernel PCA, todo dependera de la linealidad. Para ver cual de los dos se ajusta mejor, **decido realizar primero un PCA lineal para ver si se adapta correctamente a los datos, presumiendo que, ser\u00e1n lineales.**"}}