{"cell_type":{"3a9b69df":"code","67288d79":"code","fd37bb01":"code","52a9a61a":"code","466cddcc":"code","94632fe3":"code","77acead9":"code","6c48949a":"code","925a3481":"code","a8880caa":"code","480a9469":"code","41703167":"code","b1102ef7":"code","8f51dca3":"code","451c1f65":"code","29db9ca5":"code","50d115e6":"code","00258f8c":"code","3a8534aa":"code","dc903b37":"code","3b371b8f":"code","500125e7":"code","431f6a8c":"code","cd21768b":"code","bcddaae3":"code","86d899da":"code","ca20909e":"code","5719525f":"code","a1a4a2fc":"code","a4d9213a":"code","b40d9762":"code","118657bb":"code","95198ab1":"code","b10a66f3":"code","bf9bd217":"code","cf7934fc":"code","46595be1":"code","33521030":"code","0051bf7e":"code","1d1d02b7":"code","410deba9":"code","b493b7fe":"code","fd4c9bd0":"code","38bbcfcc":"code","bbd07de8":"code","f69bef2c":"code","787a0524":"code","79dd484b":"code","f13b1b3e":"code","f070f28e":"code","f8f60414":"markdown","61697ec0":"markdown","bb2044f6":"markdown","321e9b95":"markdown","0ac4276d":"markdown","44e1bf9e":"markdown","1d39886d":"markdown","42f08324":"markdown","19ca8d6e":"markdown","cd2df94a":"markdown","931bed26":"markdown","d8c66649":"markdown","9c7504d8":"markdown","e5e75d07":"markdown"},"source":{"3a9b69df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67288d79":"# Importing Libraries for EDA\n\n#Importing Libraries\n\n#data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\nimport math\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","fd37bb01":"data_train = pd.read_csv('..\/input\/new-york-city-taxi-fare-prediction\/train.csv',nrows = 200000,parse_dates=[\"pickup_datetime\"])","52a9a61a":"print(len(data_train));","466cddcc":"#Data exploration\ndata_train.info()","94632fe3":"data_train.describe()","77acead9":"data_train.head()","6c48949a":"#Null value exploration code\nprint(data_train.isnull().sum())","925a3481":"#So we will enter there a median value.\n\nmedian1 = data_train['dropoff_longitude'].median()\ndata_train['dropoff_longitude'].fillna(median1, inplace=True)\n\nmedian2 = data_train['dropoff_latitude'].median()\ndata_train['dropoff_latitude'].fillna(median2, inplace=True)","a8880caa":"print(data_train.isnull().sum())","480a9469":"data_train[\"pickup_longitude\"] = pd.to_numeric(data_train.pickup_longitude, errors='coerce')\ndata_train[\"pickup_latitude\"] = pd.to_numeric(data_train.pickup_latitude, errors='coerce')\ndata_train[\"dropoff_longitude\"] = pd.to_numeric(data_train.dropoff_longitude, errors='coerce')\ndata_train[\"dropoff_latitude\"] = pd.to_numeric(data_train.dropoff_latitude, errors='coerce')","41703167":"data_train.head()","b1102ef7":"data_train.dtypes","8f51dca3":"from math import pi,sqrt,sin,cos,atan2\n\ndef haversine(pickUp_lat,pickUp_long,dropOff_lat,dropOff_long):\n    lat1 = pd.to_numeric(pickUp_lat, errors='coerce')\n    long1 = pd.to_numeric(pickUp_long, errors='coerce')\n\n    lat2 = pd.to_numeric(dropOff_lat, errors='coerce')\n    long2 = pd.to_numeric(dropOff_long, errors='coerce')\n\n    #lat1 = pickUp_lat\n    #long1 = pickUp_long\n    #lat2 = dropOff_lat\n    #long2 = dropOff_long\n\n\n    #degree_to_rad = float(pi \/ 180.0)\n    degree_to_rad =  0.017453292519943295\n    d_lat = (lat2 - lat1) * degree_to_rad\n    d_long = (long2 - long1) * degree_to_rad\n\n    a = pow(np.sin(d_lat \/ 2), 2) + np.cos(lat1 * degree_to_rad) * np.cos(lat2 * degree_to_rad) * pow(np.sin(d_long \/ 2), 2)\n    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))\n    km = 6367 * c\n    #mi = 3956 * c\n\n    #return km#\"km\":km, \"miles\":mi}\n    return km","451c1f65":"res = haversine(40.721319,-73.844311,40.712278,-73.841610)\nprint(\"Distance is {} km\".format(round(res)))","29db9ca5":"# add new column to dataframe with distance in miles\ndata_train['distance_km'] = haversine(data_train.pickup_latitude, data_train.pickup_longitude,data_train.dropoff_latitude, data_train.dropoff_longitude)","50d115e6":"data_train.head()","00258f8c":"data_train['year'] = data_train.pickup_datetime.apply(lambda t: t.year)\ndata_train['month'] = data_train.pickup_datetime.apply(lambda t: t.month)\ndata_train['weekday'] = data_train.pickup_datetime.apply(lambda t: t.weekday())\ndata_train['hour'] = data_train.pickup_datetime.apply(lambda t: t.hour)","3a8534aa":"#Some statisitcs\n\n\nstatistics_of_data = []\nfor col in data_train.columns:\n  statistics_of_data.append((col,\n                             data_train[col].nunique(),\n                             data_train[col].isnull().sum()*100\/data_train.shape[0],\n                             data_train[col].value_counts(normalize=True, dropna=False).values[0] * 100, \n                             data_train[col].dtype\n                             ))\nstats_df = pd.DataFrame(statistics_of_data, columns=['Feature', 'Uniq_val', 'missing_val', 'val_biggest_cat', 'type'])","dc903b37":"stats_df.sort_values('val_biggest_cat', ascending=False)","3b371b8f":"## Now lets explore features one by one\n\ndef exploreFeatures(col):\n  top_n=10\n  top_n = top_n if data_train[col].nunique() > top_n else data_train[col].nunique()\n  #print(f\"{col} has {data_train[col].nunique()} unique values and type: {data_train[col].dtype}.\")\n  #txt2 = \"My name is {0}, I'am {1}\".format(\"John\",36)\n  print(\"col has {0} unique values and type {1}:\".format(data_train[col].nunique(),data_train[col].dtype))\n  print(data_train[col].value_counts(normalize=True, dropna=False).head(10))\n","500125e7":"exploreFeatures('passenger_count')","431f6a8c":"exploreFeatures('fare_amount')","cd21768b":"exploreFeatures('weekday')","bcddaae3":"exploreFeatures('hour')","86d899da":"exploreFeatures('distance_km')","ca20909e":"exploreFeatures('pickup_latitude')","5719525f":"exploreFeatures('pickup_longitude')","a1a4a2fc":"exploreFeatures('dropoff_longitude')","a4d9213a":"exploreFeatures('dropoff_latitude')","b40d9762":"exploreFeatures('year')","118657bb":"exploreFeatures('month')","95198ab1":"data_train[data_train['distance_km'] == 0.00]","b10a66f3":"## SO, We will remove them\n\ndata_train = data_train[data_train['distance_km'] != 0.00]","bf9bd217":"data_train","cf7934fc":"##Lets test it\nexploreFeatures('distance_km')","46595be1":"## Any coordiantes wrongly planted ??\n## Does New York City have a beach?\n\n#New York City has 14 miles of beaches, from beauties in the Bronx, to the historical sands of Brooklyn, to surfing in Queens.\n\n#First of all we need to create a boundary (Bounding Box). NYC boundary is:\n\ndata_test = pd.read_csv('..\/input\/new-york-city-taxi-fare-prediction\/test.csv')\n\nmindatapoints = min(data_test.pickup_longitude.min(), data_test.dropoff_longitude.min())\nmaxdatapoints = max(data_test.pickup_longitude.max(), data_test.dropoff_longitude.max())\n\nprint(\"minimum LONGITUDE data points {0} maximum data points {1} in NYC\".format(mindatapoints,maxdatapoints))","33521030":"mindatapointsLAT = min(data_test.pickup_latitude.min(), data_test.dropoff_latitude.min())\nmaxdatapointsLAT = max(data_test.pickup_latitude.max(), data_test.dropoff_latitude.max())\n\nprint(\"minimum LATITUDE data points {0} maximum data points {1} in NYC\".format(mindatapointsLAT,maxdatapointsLAT))","0051bf7e":"# Now Creating a Boundary.\n\ndef select_within_boundingbox(df, BB):\n    return (df.pickup_longitude >= BB[0]) & (df.pickup_longitude <= BB[1]) & \\\n           (df.pickup_latitude >= BB[2]) & (df.pickup_latitude <= BB[3]) & \\\n           (df.dropoff_longitude >= BB[0]) & (df.dropoff_longitude <= BB[1]) & \\\n           (df.dropoff_latitude >= BB[2]) & (df.dropoff_latitude <= BB[3])","1d1d02b7":"#Boundary is :\nBB = (-74.5, -72.8, 40.5, 41.8)","410deba9":"print('Old size: %d' % len(data_train))\ndata_train = data_train[select_within_boundingbox(data_train, BB)]\nprint('New size: %d' % len(data_train))","b493b7fe":"#We have successfully removed all data points which are not in the boundary of NYC.Now we need to remove data points in water, as they are Noisy data-points.\n\ndef remove_datapoints_from_water(df):\n    def lonlat_to_xy(longitude, latitude, dx, dy, BB):\n        return (dx*(longitude - BB[0])\/(BB[1]-BB[0])).astype('int'), \\\n               (dy - dy*(latitude - BB[2])\/(BB[3]-BB[2])).astype('int')\n\n    # define bounding box\n    BB = (-74.5, -72.8, 40.5, 41.8)\n    \n    # read nyc mask and turn into boolean map with\n    # land = True, water = False\n    nyc_mask = plt.imread('https:\/\/aiblog.nl\/download\/nyc_mask-74.5_-72.8_40.5_41.8.png')[:,:,0] > 0.9\n    \n    # calculate for each lon,lat coordinate the xy coordinate in the mask map\n    pickup_x, pickup_y = lonlat_to_xy(df.pickup_longitude, df.pickup_latitude, \n                                      nyc_mask.shape[1], nyc_mask.shape[0], BB)\n    dropoff_x, dropoff_y = lonlat_to_xy(df.dropoff_longitude, df.dropoff_latitude, \n                                      nyc_mask.shape[1], nyc_mask.shape[0], BB)    \n    # calculate boolean index\n    idx = nyc_mask[pickup_y, pickup_x] & nyc_mask[dropoff_y, dropoff_x]\n    \n    # return only datapoints on land\n    return df[idx]\n","fd4c9bd0":"print('Old size: %d' % len(data_train))\ndata_train = remove_datapoints_from_water(data_train)\nprint('New size: %d' % len(data_train))","38bbcfcc":"#Strat From Airport, Did we find any lead ?\njfkAirport_Corrd = (-73.7822222222, 40.6441666667)\nLGAAirport_Corrd = (-73.87, 40.77)\nEWRAirport_Coord = (-74.175, 40.69)\nnyc = (-74.0063889, 40.7141667)","bbd07de8":"def absoluteDataPoint(loc, name):\n    range=1.5\n    idx0 = (haversine(data_train.pickup_latitude, data_train.pickup_longitude, loc[1], loc[0]) < range)\n    idx1 = (haversine(data_train.dropoff_latitude, data_train.dropoff_longitude, loc[1], loc[0]) < range)\n    fareAmount_Pickup = data_train[idx0].fare_amount\n    fareAmount_DropOff = data_train[idx1].fare_amount\n    distance_pickup = data_train[idx0].distance_km\n    distance_dropoff = data_train[idx1].distance_km\n    return idx0,idx1,fareAmount_Pickup,fareAmount_DropOff","f69bef2c":"idx0,idx1,fareAmount_Pickup,fareAmount_DropOff = absoluteDataPoint(jfkAirport_Corrd,\"JFK Airport\")","787a0524":"idx0,idx1,fareAmount_Pickup,fareAmount_DropOff = absoluteDataPoint(EWRAirport_Coord,\"Newark Airport\")","79dd484b":"idx0,idx1,fareAmount_Pickup,fareAmount_DropOff = absoluteDataPoint(LGAAirport_Corrd, 'LaGuardia Airport')","f13b1b3e":"data_train_ToAndFro_airport_JFK_Airport = data_train[(data_train.fare_amount == 57.33) | (data_train.fare_amount == 49.80) | (data_train.fare_amount == 49.57)]","f070f28e":"data_train_ToAndFro_airport_JFK_Airport.head()","f8f60414":"> First of all, We need to calculate the distacne from pickup Latitude,longitude to dropoff latitude,longitude.","61697ec0":"This is the end of EDA of NYC Taxi Fare, I have enjoyed and learned a lot while creating this notebook. A note book which helped me alot is the masterpiece by **\"Albert van Breemen\"**, His notebook's link is:  https:\/\/www.kaggle.com\/breemen\/nyc-taxi-fare-data-exploration. \n\nI have worked hard for this notebook, Hope this will be helpful for you. Up vote this notebook if you like it. Thanks.","bb2044f6":"**Now as we have removed incorrect data, We need to do EDA. Critical thinking for this project may leads to:**\n\nAre there any coordiante which are wrongly planted. i.e. sea comes in between ?\n\nAre there any fare which is absolute. i.e. to and from airport, universty, or at food point ?\n\nAre there any fare which involved having festival on that data, For eg. Christmas.\n\nIs fare amount gradually increased in these years ? i.e. what impact have created form 2009-2015 ? Petrol gets high or low in this period ?\n\nTraffic ? Does traffic have impact on fare ?\n\npassenger_count has any impact or not ?","321e9b95":"**Its very important to extract distance of a single trip through pickup and drop off locations**","0ac4276d":"**Problem Statement**\n\nIn this playground competition, hosted in partnership with Google Cloud and Coursera, you are tasked with predicting the fare amount (inclusive of tolls) for a taxi ride in New York City given the pickup and dropoff locations. While you can get a basic estimate based on just the distance between the two points, this will result in an RMSE of 5-8 ($)\n\nOur challenge is to do better than this using Machine Learning techniques!","44e1bf9e":"We have removed data points in water successfully. 32 data points were detected.\n\nAre there any fare which is absolute. i.e. to and from airport, universty, or at food point ?\n\n##Working on absolute data points","1d39886d":"Famoous Resturants in NY:\n\n> Bamonte's. Williamsburg. ...\n\n> Balthazar. SoHo. ...\n\n> Di Fara. Midwood. ...\n\n> Gramercy Tavern. Flatiron. ...\n","42f08324":"So, Now we need to cater 2 things:\n\nRemove columns having 0 distance covered.\n\nRemove columns having latitudes and longitudes = 0.","19ca8d6e":"> Our Function gives correct results, We have tested it through different websites as well. Now the challenge is to apply this formula in data set and extract distance.","cd2df94a":"New York City is serviced by three major airports:\n\n> John F. Kennedy International Airport (JFK)\n> \n> LaGuardia Airport (LGA)\n> \n> Newark International Airport (EWR)","931bed26":"**Observations Are:**\n\npassenger_count have up to 7 unique values, which means 0-6.\n\nWe have data of 7 years\n\nfare amount has 1215 unique values.","d8c66649":"**Cool! We got the distance.. Now as suggested, Take information from pickup_datetime as well.**","9c7504d8":"According to this, We see that prices to and from airport was fixed i.e.  49.57\ud835\udc56\ud835\udc5b2009\u221210,  49.80 in 2011-12 and $ 57.33 in 2013-15. It seems that gas prices were hiked from the end of 2012\n\nFebruary 2012: Concerns about a potential military action against Iran, by either Israel or even the United States, caused high oil prices. Second, some U.S. oil refineries were closing, according to an Environmental Impact Assessment report. Third, oil and gas prices tend to rise every spring, in anticipation of increased demand during the summer.\n\nMarch 2013: Iran started war games near the Strait of Hormuz early in 2013. Almost 20% of the world's oil flows through this narrow checkpoint bordering Iran and Oman. If Iran threatened to close the Strait, it would have raised the fear of a dramatic decline in oil supply. In anticipation of such a crisis, oil traders bid up the price, which reached  118.90\ud835\udc4e\ud835\udc4f\ud835\udc4e\ud835\udc5f\ud835\udc5f\ud835\udc52\ud835\udc59\ud835\udc5c\ud835\udc5b\ud835\udc39\ud835\udc52\ud835\udc4f\ud835\udc5f\ud835\udc62\ud835\udc4e\ud835\udc5f\ud835\udc668.\ud835\udc3a\ud835\udc4e\ud835\udc60\ud835\udc5d\ud835\udc5f\ud835\udc56\ud835\udc50\ud835\udc52\ud835\udc60\ud835\udc60\ud835\udc5c\ud835\udc5c\ud835\udc5b\ud835\udc53\ud835\udc5c\ud835\udc59\ud835\udc59\ud835\udc5c\ud835\udc64\ud835\udc52\ud835\udc51,\ud835\udc5f\ud835\udc56\ud835\udc60\ud835\udc56\ud835\udc5b\ud835\udc54\ud835\udc61\ud835\udc5c 3.85 a gallon by February 25. These rose again in August 2013 because oil prices hit a 15-month high that summer. That spike was created by political unrest in Egypt.\n\nSources: https:\/\/www.thebalance.com\/why-are-gas-prices-so-high-3305653","e5e75d07":"Famous Colleges\/Universities in NY are:\n\n> Columbia University.\n> \n> Cornell University.\n> \n> New York University.\n> \n> University of Rochester."}}