{"cell_type":{"5f48b18d":"code","85a75cec":"code","9aeda2de":"code","ab09995b":"code","84c54e82":"code","16752399":"code","58bb32aa":"code","b95d7e70":"code","b7df92eb":"code","c611d7c0":"code","b5de66dc":"code","aa5a824d":"code","7cd04175":"code","78153006":"code","f23af231":"code","4bc0993b":"code","1deab08f":"code","e5ae91c4":"code","32c60391":"code","9103685b":"code","ef707a2c":"code","31b888ab":"code","8c3d30ef":"code","88a21a04":"code","a8e96ffe":"code","bd0ed001":"code","9f108292":"code","222281aa":"code","271034c6":"code","4e442016":"code","1016b789":"markdown","54bf2fe7":"markdown","facfc0dc":"markdown","201737c3":"markdown","5957106c":"markdown","71e416ed":"markdown","85f765bb":"markdown","74283ef9":"markdown","bfc4f3fb":"markdown","59638295":"markdown","3d0e071a":"markdown","861f32bc":"markdown","f75c119e":"markdown","9ca8e1d4":"markdown","6e277a46":"markdown","f2721caa":"markdown","3a853fc8":"markdown","4893cc23":"markdown","742ee35b":"markdown","6fc15c8b":"markdown","ed2453e5":"markdown","1817dad9":"markdown","a8697a88":"markdown","e085aa25":"markdown","2119e28d":"markdown","2dd95e68":"markdown"},"source":{"5f48b18d":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import r2_score","85a75cec":"df = pd.read_csv('..\/input\/most-expensive-footballers-2021\/players.csv')\ndf.drop('Unnamed: 0', axis=1, inplace=True)","9aeda2de":"copy = df.copy()\npos_a = []\npos_d = []\npos_m = []\npos_all = []\npos_o = []\nfor i in range(len(copy['Position'])):\n    if(copy['Position'][i] =='Centre-Forward' or copy['Position'][i] =='Left Winger' or copy['Position'][i] =='Right Winger' or copy['Position'][i] =='Second Striker'):\n        pos_a.append(1)\n        pos_d.append(0)\n        pos_m.append(0)\n        pos_all.append(0)\n        pos_o.append(1)\n    elif(copy['Position'][i] =='Attacking Midfield' or copy['Position'][i] =='Central Midfield' or copy['Position'][i] =='Defensive Midfield' or copy['Position'][i] =='Left Midfield' or copy['Position'][i] =='Right Midfield'):\n        pos_a.append(0)\n        pos_d.append(0)\n        pos_m.append(1)\n        pos_all.append(1)\n        pos_o.append(1)\n    elif(copy['Position'][i] =='Centre-Back' or copy['Position'][i] =='Left-Back' or copy['Position'][i] =='Right-Back'):\n        pos_a.append(0)\n        pos_d.append(1)\n        pos_m.append(0)\n        pos_all.append(2)\n        pos_o.append(1)\n    else:\n        pos_a.append(0)\n        pos_d.append(0)\n        pos_m.append(0)\n        pos_all.append(3)\n        pos_o.append(0)\ncopy['Attacker'] = pos_a\ncopy['Defender'] = pos_d\ncopy['Midfielder'] = pos_m\ncopy['Pos'] = pos_all\ncopy['Outfield'] = pos_o","ab09995b":"copy.info()","84c54e82":"copy.describe()","16752399":"copy.head()","58bb32aa":"sns.heatmap(copy.isnull())  # No missing data","b95d7e70":"copy.columns","b7df92eb":"import plotly.express as px\nfig = px.scatter(copy,y= 'Markey Value In Millions(\u00a3)', x='Name', color=\"Name\")\nfig.update_traces(marker_size=10)\nfig.show()","c611d7c0":"import plotly.express as px\nfig = px.scatter(copy,y= 'Markey Value In Millions(\u00a3)', x='Position', color=\"Position\")\nfig.update_traces(marker_size=10)\nfig.show()","b5de66dc":"fig = px.bar(copy,x = 'Position', color= 'Position')\nfig.update_layout(showlegend=False)\nfig.show()","aa5a824d":"import xgboost as xb\nfrom sklearn.model_selection import train_test_split","7cd04175":"X_train, X_test, y_train, y_test = train_test_split(copy[['Markey Value In Millions(\u00a3)','Matches', 'Goals', 'Own Goals', 'Assists', 'Yellow Cards', 'Red Cards', 'Age']], copy['Outfield'], test_size=0.3, random_state=101)","78153006":"classifier = xb.XGBClassifier()\nclassifier.fit(X_train, y_train)\npredictions = classifier.predict(X_test)","f23af231":"print(classification_report(y_test, predictions))\nprint('Accuracy Score : ', accuracy_score(y_test, predictions))","4bc0993b":"X_train, X_test, y_train, y_test = train_test_split(copy[['Markey Value In Millions(\u00a3)','Matches', 'Goals', 'Own Goals', 'Assists', 'Yellow Cards', 'Red Cards', 'Age']], copy['Attacker'], test_size=0.3, random_state=101)","1deab08f":"classifier = xb.XGBClassifier()\nclassifier.fit(X_train, y_train)\npredictions = classifier.predict(X_test)","e5ae91c4":"print(classification_report(y_test, predictions))\nprint('Accuracy Score : ', accuracy_score(y_test, predictions))","32c60391":"from sklearn.gaussian_process import GaussianProcessClassifier\nmodel = GaussianProcessClassifier()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\nprint(classification_report(y_test, predictions))\nprint('Accuracy Score : ', accuracy_score(y_test, predictions))","9103685b":"from sklearn.tree import DecisionTreeClassifier\nclf_gini = DecisionTreeClassifier(criterion='gini', max_depth=3, random_state=0)\nclf_gini.fit(X_train, y_train)\npredictions = clf_gini.predict(X_test)\nprint(classification_report(y_test, predictions))\nprint('Accuracy Score : ', accuracy_score(y_test, predictions))","ef707a2c":"from sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\npredictions = classifier.predict(X_test)\nprint(classification_report(y_test, predictions))\nprint('Accuracy Score : ', accuracy_score(y_test, predictions))","31b888ab":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import BernoulliNB\nclassifier=GaussianNB()\nclassifier.fit(X_train,y_train)\npredictions=classifier.predict(X_test)\nprint(classification_report(y_test, predictions))\nprint('Accuracy Score : ', accuracy_score(y_test, predictions))","8c3d30ef":"classifier=BernoulliNB()\nclassifier.fit(X_train,y_train)\npredictions=classifier.predict(X_test)\nprint(classification_report(y_test, predictions))\nprint('Accuracy Score : ', accuracy_score(y_test, predictions))","88a21a04":"from sklearn.neighbors import KNeighborsClassifier\nclassifier=KNeighborsClassifier(n_neighbors=5,metric='minkowski',p=2)\nclassifier.fit(X_train,y_train)\npredictions=classifier.predict(X_test)\nprint(classification_report(y_test, predictions))\nprint('Accuracy Score : ', accuracy_score(y_test, predictions))","a8e96ffe":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=1)\nmodel.fit(X_train, y_train)\npredictions=model.predict(X_test)\nprint(classification_report(y_test, predictions))\nprint('Accuracy Score : ', accuracy_score(y_test, predictions))","bd0ed001":"from sklearn.ensemble import AdaBoostClassifier\nclassifier=AdaBoostClassifier(random_state=0)\nclassifier.fit(X_train,y_train)\npredictions=classifier.predict(X_test)\nprint(classification_report(y_test, predictions))\nprint('Accuracy Score : ', accuracy_score(y_test, predictions))","9f108292":"from sklearn.ensemble import BaggingClassifier\nclassifier=BaggingClassifier(random_state=0)\nclassifier.fit(X_train,y_train)\npredictions=classifier.predict(X_test)\nprint(classification_report(y_test, predictions))\nprint('Accuracy Score : ', accuracy_score(y_test, predictions))","222281aa":"from sklearn.ensemble import GradientBoostingClassifier\ngbk = GradientBoostingClassifier()\ngbk.fit(X_train, y_train)\npredictions=gbk.predict(X_test)\nprint(classification_report(y_test, predictions))\nprint('Accuracy Score : ', accuracy_score(y_test, predictions))","271034c6":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nlasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\nlasso.fit(X_train, y_train)\nr2_score(lasso.predict(X_test), y_test)","4e442016":"from sklearn.linear_model import RidgeClassifierCV\nrcc = RidgeClassifierCV()\nrcc.fit(X_train, y_train)\nr2_score(rcc.predict(X_test), y_test)","1016b789":"# Outfiled Player Clasification","54bf2fe7":"## Ridge Classifier","facfc0dc":"# Conclusion","201737c3":"## Lasso","5957106c":"## Players Charts","71e416ed":"## ADA Booster Classifier","85f765bb":"# EDA","74283ef9":"## Gradient Boosting Classifier","bfc4f3fb":"## XGBClassifier","59638295":"## SVM","3d0e071a":"## Naive Bayes Algorithm","861f32bc":"## Random Forest","f75c119e":"## Position vs Market Value","9ca8e1d4":"# Attacker Classification","6e277a46":"## KNN","f2721caa":"## Gaussian Process Classifier","3a853fc8":"## Decision Classifier Tree","4893cc23":"This noteboook shows how the data differs with various fields and EDA and data visualization is also performed on the mentions \n\nOutfield Player And Attacker Classification With 15 Algorithms and the best one for Outfield player classification is XGBClassifier and for attack classifier is Random Forest","742ee35b":"## Bernoulli","6fc15c8b":"## Checking for missing data","ed2453e5":"## Player Names vs Market Value","1817dad9":"# Loading CSV","a8697a88":"# Few Workings","e085aa25":"## Bagging Classifier","2119e28d":"# Import Statements","2dd95e68":"## Player position Count"}}