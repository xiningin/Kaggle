{"cell_type":{"7402c57c":"code","649630f8":"code","1a3bfecf":"code","1a0e6677":"code","a2be2a12":"code","70b04f59":"code","7b3db315":"code","dd6420b8":"code","67f61766":"code","ec17af26":"code","5553f4af":"code","542ffad5":"code","92fbf37c":"code","853545fd":"code","2ece350d":"code","08af2cbf":"markdown","09558ab4":"markdown","cf4373c5":"markdown","aacc2f1f":"markdown","fed23925":"markdown","7ae71050":"markdown","cf657bf5":"markdown","1694074c":"markdown","a80a1cb1":"markdown","c847f613":"markdown"},"source":{"7402c57c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","649630f8":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestRegressor","1a3bfecf":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","1a0e6677":"train.head()","a2be2a12":"train.Parch.value_counts()","70b04f59":"train['Sex'] = train['Sex'].apply(lambda x : 1 if x=='male' else 0)\ntest['Sex'] = test['Sex'].apply(lambda x : 1 if x=='male' else 0)","7b3db315":"train['Embarked'] = train['Embarked'].map({'S':1, 'C':2, 'Q':3})\ntest['Embarked'] = test['Embarked'].map({'S':1, 'C':2, 'Q':3})","dd6420b8":"my_imputer = SimpleImputer()\n\nfeatures = ['Pclass','Sex','Age','Parch', 'Fare', 'Embarked']\n\nimputed_train = pd.DataFrame(my_imputer.fit_transform(train[features]))\nimputed_test = pd.DataFrame(my_imputer.fit_transform(test[features]))\n\ny = train.Survived\n\nX = imputed_train.copy()\nX_test = imputed_test.copy()","67f61766":"train_X, val_X, train_y, val_y = train_test_split(imputed_train, y, train_size=0.8, test_size=0.2, random_state=0)","ec17af26":"#Define the models\n\nmodel_1 = RandomForestRegressor(n_estimators = 50, random_state = 0)\nmodel_2 = RandomForestRegressor(n_estimators = 100,criterion = 'mae', random_state = 0)\nmodel_3 = RandomForestRegressor(n_estimators = 100, min_samples_split = 20, random_state = 0)\nmodel_4 = RandomForestRegressor(n_estimators = 200, min_samples_split = 20, random_state = 0)\nmodel_5 = RandomForestRegressor(n_estimators = 100, max_depth = 7, random_state = 0)","5553f4af":"#Function comparing different models\ndef score_model(model, X_train = train_X, X_val = val_X, y_train = train_y, y_val = val_y):\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_val)\n    return(mean_absolute_error(y_val, predictions))\n\nmodels = [model_1,model_2,model_3,model_4,model_5]\n\nfor i in range(0, len(models)):\n    mae = score_model(models[i])\n    print(\"model %d MAE : %d\"%(i+1, mae))","542ffad5":"# I don't know why the error in each of the above cases is 0, anyways, so we can use any of the aforementioned models\n# because the error in each case is 0.\n\nbest_model = model_2","92fbf37c":"# Define a model\n\nmy_model = best_model","853545fd":"# Fit the model to the training data\nmy_model.fit(imputed_train, y)\n\n# Generate predictions on test data\npredict = my_model.predict(imputed_test)\n\nsubmission['Survived'] = predict","2ece350d":"submission.to_csv('submission.csv', index = False)","08af2cbf":"# Submit the output","09558ab4":"# Break of validation set from training data","cf4373c5":"# Generate test Predictions","aacc2f1f":"Let's also convert the three unique values of 'Embarked' column into integer using 'map' function.","fed23925":"# To select the best model out of the five, we define a function score_model()\n1. This function returns the mean absolute error (MAE) from the validation set\n2. The best model will obtain the lowest MAE","7ae71050":"# Evaluate several models","cf657bf5":"The 'Sex' column is an important column to have while making predictions, but for that purpose we'll have to convert it to integer. There are several ways to do it, I'll use the lambda function in this case.","1694074c":"# Obtain target and predictors","a80a1cb1":"The next code cell fits the model to the training and validation data, and then\ngenerates test predictions that are saved to a csv file. These teast predictions \ncan be submitted directly to the competition.","c847f613":"We'll use 5 different Random Forest models"}}