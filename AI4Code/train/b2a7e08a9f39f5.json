{"cell_type":{"ca9df97d":"code","7e39f84b":"code","1b848df6":"code","03336561":"code","0ced16d8":"code","e55db409":"code","f5a428a1":"code","ddc9d84b":"code","8aef3b9d":"code","a37166c7":"code","ec63e497":"code","d120d8dc":"code","77b892ce":"code","476609b4":"code","98793957":"code","f30c5290":"code","8be1c319":"code","c6940adf":"code","47d5360f":"code","22cac4aa":"code","cb4e58d8":"markdown","74d8ed01":"markdown"},"source":{"ca9df97d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7e39f84b":"col0=['season','age','childish_diseases','accident','intervention','fevers','alcohol_consumption','smoking','sitting_hours','output']","1b848df6":"data0 = open('..\/input\/fertility-data-set\/fertility_Diagnosis.txt', 'r')\ndata1 = data0.read()\ndata2 = data1.split('\\n')\ndata2[0:5]","03336561":"data3=[]\nfor item in data2:\n    data3+=[item.split(',')]\ndata4=pd.DataFrame(data3,columns=col0)\ndata4","0ced16d8":"data4['output']=data4['output'].map({'N':0,'O':1})\ndata4=data4.drop(index=data4.index[100],axis=0)\ndata4=data4.astype(float)\ndata4","e55db409":"data4.info()","f5a428a1":"target=['output']\ndataY=data4[target[0]]\ndataX=data4.drop(target,axis=1)","ddc9d84b":"df_columns = list(dataX.columns)\nprint(df_columns)","8aef3b9d":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","a37166c7":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","ec63e497":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","d120d8dc":"train_feat_df = to_feature(dataX)\n#test_feat_df = to_feature(testX)","77b892ce":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","476609b4":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","98793957":"y = dataY\nprint(y.shape)","f30c5290":"ydf=pd.DataFrame(y)\nydf","8be1c319":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_ylabel('Predicted Train '+target[i],fontsize=12)\n    ax.set_xlabel('Actual Train '+target[i],fontsize=12)\n    ax.scatter(y,oof)","c6940adf":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","47d5360f":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)","22cac4aa":"fig, ax = plt.subplots(figsize=(12,4))\nsns.histplot(data4[data4['output']==0]['sitting_hours'], label='Normal', ax=ax, color='black',bins=30)\nsns.histplot(data4[data4['output']==1]['sitting_hours'], label='Altered', ax=ax, color='C1',bins=30)\nax.set_title('Sitting Hours vs Output',fontsize=20)\nax.legend()\nax.grid()\nplt.show()","cb4e58d8":"### Attribute Information:\n* Season in which the analysis was performed. 1) winter, 2) spring, 3) Summer, 4) fall. (-1, -0.33, 0.33, 1)\n* Age at the time of analysis. 18-36 (0, 1)\n* Childish diseases (ie , chicken pox, measles, mumps, polio) 1) yes, 2) no. (0, 1)\n* Accident or serious trauma 1) yes, 2) no. (0, 1)\n* Surgical intervention 1) yes, 2) no. (0, 1)\n* High fevers in the last year 1) less than three months ago, 2) more than three months ago, 3) no. (-1, 0, 1)\n* Frequency of alcohol consumption 1) several times a day, 2) every day, 3) several times a week, 4) once a week, 5) hardly ever or never (0, 1)\n* Smoking habit 1) never, 2) occasional 3) daily. (-1, 0, 1)\n* Number of hours spent sitting per day ene-16 (0, 1)\n* Output: Diagnosis normal (N), altered (O)","74d8ed01":"## Sitting Hours vs Output\n* https:\/\/consumer.healthday.com\/encyclopedia\/fertility-19\/infertility-news-412\/lifestyle-and-fertility-643329.html\n* Men, don't take infertility sitting down. Whenever you spend long hours sitting -- whether it's in front of a computer screen or behind a steering wheel -- the temperature of your scrotum and testes may rise a few degrees. "}}