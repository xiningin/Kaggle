{"cell_type":{"d4949917":"code","205a81ce":"code","8b8d0dc3":"code","a830091b":"code","c183998d":"code","0007eebd":"code","60bf3a33":"code","feab9b03":"code","566c49fd":"code","e1d8b9af":"code","7ab6732d":"code","c1c9c5b2":"code","e43539e2":"markdown","d785bb42":"markdown","8644795d":"markdown","a0f5c147":"markdown","2bee524d":"markdown","2de46431":"markdown","f33444de":"markdown","1025ca86":"markdown","aa6003e9":"markdown"},"source":{"d4949917":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","205a81ce":"df_train = pd.read_csv('..\/input\/house-prices-data\/train.csv')\ndf_train = df_train[:100]","8b8d0dc3":"df_train.head()","a830091b":"#check the decoration\ndf_train.columns","c183998d":"#descriptive statistics summary\ndf_train['SalePrice'].describe()","0007eebd":"var = 'OverallQual'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","60bf3a33":"corrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","feab9b03":"k = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","566c49fd":"#missing data\ntotal = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","e1d8b9af":"#dealing with missing data\ndf_train = df_train.drop((missing_data[missing_data['Total'] > 1]).index,1)\ndf_train = df_train.drop(df_train.loc[df_train['Electrical'].isnull()].index)\ndf_train.isnull().sum().max() #checking that there's no missing data missing","7ab6732d":"#standardizing data\nsaleprice_scaled = StandardScaler().fit_transform(df_train['SalePrice'][:,np.newaxis]);\nlow_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]\nhigh_range= saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","c1c9c5b2":"var = 'YearBuilt'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","e43539e2":"do standarization data and show outliers","d785bb42":"Correlation Matrix","8644795d":"Box plot overallqual\/saleprice","a0f5c147":"Counting percentage of missing data","2bee524d":"Import libraries","2de46431":"Saleprice correlation matrix highest 10 correlation","f33444de":"Scatter plot 'SalesPrice' and 'YearBulit'","1025ca86":"Dropping null data","aa6003e9":"> from the visualization we can read the highest sales price from 2000 year bulit dan lowest sales proce from 1920 year bulit"}}