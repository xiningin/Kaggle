{"cell_type":{"502c2c2b":"code","0797ff4e":"code","4a7f7945":"code","b10fa292":"code","ddb481cf":"code","4d0ce0fa":"code","ff18476a":"code","2bfe9df2":"code","79197b08":"code","1a487767":"code","342aa931":"code","8c51745a":"code","1582e051":"code","652c2155":"code","7c0de642":"code","27dcce42":"code","df655234":"code","f1f44d5d":"code","2ed646f0":"code","6773557c":"code","19d4aa7c":"code","a2a41fa7":"code","3ec6ba65":"code","782c2974":"code","0847971c":"code","b3277294":"code","b7ebc71f":"code","4ab48af5":"code","bcceea59":"code","f6671b27":"code","02d9867c":"code","3c3237cd":"code","8e50fa74":"code","66e2ae49":"code","c6168808":"code","4c9f17e9":"code","1ac538a4":"code","b03e2ea2":"code","86b52333":"code","4f251f6b":"code","25bf662a":"code","eb79cd7e":"code","72aa31d0":"code","03424d72":"code","92d50176":"code","94a478f8":"code","9e717684":"code","946d8934":"code","2382e866":"code","422e3482":"code","b68071bc":"code","b41601e9":"code","eb37b38e":"code","4abe5b9b":"code","84ac6787":"code","225f7b22":"code","14d50b30":"code","50f29c10":"code","1a8a50f7":"code","5efb0811":"code","81245fb4":"markdown","e0b27352":"markdown","abd71bc6":"markdown","61138efe":"markdown","e8394808":"markdown","c5910589":"markdown","07b0c241":"markdown","3f38807f":"markdown","6a4dd3fa":"markdown","7d2ef7d5":"markdown","60cbbe74":"markdown","985b70b6":"markdown","484c6487":"markdown","79e4ace0":"markdown","cc4a4438":"markdown","aeb1864c":"markdown","468fdb8e":"markdown","c73df2c0":"markdown","74d5fadc":"markdown","406db254":"markdown","5ff6138b":"markdown"},"source":{"502c2c2b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport datetime as dt\n\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\n\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom scipy.cluster.hierarchy import cut_tree\nfrom sklearn.neighbors import NearestNeighbors\nfrom random import sample\nfrom numpy.random import uniform\nfrom math import isnan","0797ff4e":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4a7f7945":"df = pd.read_csv(r\"\/kaggle\/input\/cricket\/Cricket.csv\",encoding='latin1')\ndf.head()","b10fa292":"df.shape","ddb481cf":"df_dub = df.copy()\n# Checking for duplicates and dropping the entire duplicate row if any\ndf_dub.drop_duplicates(subset=None, inplace=True)","4d0ce0fa":"df_dub.shape","ff18476a":"df.shape","2bfe9df2":"df.info()","79197b08":"df.describe()","1a487767":"(df.isnull().sum() * 100 \/ len(df)).value_counts(ascending=False)","342aa931":"df.isnull().sum().value_counts(ascending=False)","8c51745a":"(df.isnull().sum(axis=1) * 100 \/ len(df)).value_counts(ascending=False)","1582e051":"df.isnull().sum(axis=1).value_counts(ascending=False)","652c2155":"df.head()","7c0de642":"df[['Strt','End']] = df.Span.str.split(\"-\",expand=True) ","27dcce42":"df[['Strt','End']]=df[['Strt','End']].astype(int)\ndf['Exp']=df['End']-df['Strt']\ndf=df.drop(['Strt','End','Span'], axis = 1) \ndf.head()","df655234":"#Match Played\nplt.figure(figsize = (30,5))\nmat = df[['Player','Mat']].sort_values('Mat', ascending = False)\nax = sns.barplot(x='Player', y='Mat', data= mat)\nax.set(xlabel = '', ylabel= 'Match Played')\nplt.xticks(rotation=90)\nplt.show()","f1f44d5d":"plt.figure(figsize = (10,5))\nmat_top10 = df[['Player','Mat']].sort_values('Mat', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Mat', data= mat_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Match Played')\nplt.xticks(rotation=90)\nplt.show()","2ed646f0":"#Inns\nplt.figure(figsize = (30,5))\ninns = df[['Player','Inns']].sort_values('Inns', ascending = False)\nax = sns.barplot(x='Player', y='Inns', data= inns)\nax.set(xlabel = '', ylabel= 'Innings Played')\nplt.xticks(rotation=90)\nplt.show()","6773557c":"plt.figure(figsize = (10,5))\ninns_top10 = df[['Player','Inns']].sort_values('Inns', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Inns', data= inns_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Innings Played')\nplt.xticks(rotation=90)\nplt.show()","19d4aa7c":"#NO\nplt.figure(figsize = (30,5))\nno = df[['Player','NO']].sort_values('NO', ascending = False)\nax = sns.barplot(x='Player', y='NO', data= no)\nax.set(xlabel = '', ylabel= 'Not Out')\nplt.xticks(rotation=90)\nplt.show()","a2a41fa7":"plt.figure(figsize = (10,5))\ninns_top10 = df[['Player','NO']].sort_values('NO', ascending = False).head(10)\nax = sns.barplot(x='Player', y='NO', data= inns_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Not Out')\nplt.xticks(rotation=90)\nplt.show()","3ec6ba65":"#Runs\nplt.figure(figsize = (30,5))\nrun = df[['Player','Runs']].sort_values('Runs', ascending = False)\nax = sns.barplot(x='Player', y='Runs', data= run)\nax.set(xlabel = '', ylabel= 'Runs Scored')\nplt.xticks(rotation=90)\nplt.show()","782c2974":"plt.figure(figsize = (10,5))\nruns_top10 = df[['Player','Runs']].sort_values('Runs', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Runs', data= runs_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Runs Scored')\nplt.xticks(rotation=90)\nplt.show()","0847971c":"#HS\ndf.HS=df.HS.str.extract('(\\d+)')\ndf.HS=df.HS.astype(int)\nplt.figure(figsize = (30,5))\nhs = df[['Player','HS']].sort_values('HS', ascending = False)\nax = sns.barplot(x='Player', y='HS', data= hs)\nax.set(xlabel = '', ylabel= 'Highest Score')\nplt.xticks(rotation=90)\nplt.show()","b3277294":"plt.figure(figsize = (10,5))\nhs_top10 = df[['Player','HS']].sort_values('HS', ascending = False).head(10)\nax = sns.barplot(x='Player', y='HS', data= hs_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Highest Score')\nplt.xticks(rotation=90)\nplt.show()","b7ebc71f":"#Ave\nplt.figure(figsize = (30,5))\nave = df[['Player','Ave']].sort_values('Ave', ascending = False)\nax = sns.barplot(x='Player', y='Ave', data= ave)\nax.set(xlabel = '', ylabel= 'Averages')\nplt.xticks(rotation=90)\nplt.show()","4ab48af5":"plt.figure(figsize = (10,5))\navg_top10 = df[['Player','Ave']].sort_values('Ave', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Ave', data= avg_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Averages')\nplt.xticks(rotation=90)\nplt.show()","bcceea59":"#BF\nplt.figure(figsize = (30,5))\nbf = df[['Player','BF']].sort_values('BF', ascending = False)\nax = sns.barplot(x='Player', y='BF', data= bf)\nax.set(xlabel = '', ylabel= 'Best Form')\nplt.xticks(rotation=90)\nplt.show()","f6671b27":"plt.figure(figsize = (10,5))\nbf_top10 = df[['Player','BF']].sort_values('BF', ascending = False).head(10)\nax = sns.barplot(x='Player', y='BF', data= bf_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Best Form')\nplt.xticks(rotation=90)\nplt.show()","02d9867c":"#SR \nplt.figure(figsize = (30,5))\nsr = df[['Player','SR']].sort_values('SR', ascending = False)\nax = sns.barplot(x='Player', y='SR', data= sr)\nax.set(xlabel = '', ylabel= 'SR')\nplt.xticks(rotation=90)\nplt.show()","3c3237cd":"plt.figure(figsize = (10,5))\nsr_top10 = df[['Player','SR']].sort_values('SR', ascending = False).head(10)\nax = sns.barplot(x='Player', y='SR', data= sr_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'SR')\nplt.xticks(rotation=90)\nplt.show()","8e50fa74":"#100\nplt.figure(figsize = (30,5))\nr100 = df[['Player','100']].sort_values('100', ascending = False)\nax = sns.barplot(x='Player', y='100', data= r100)\nax.set(xlabel = '', ylabel= \"100's Scored\" )\nplt.xticks(rotation=90)\nplt.show()","66e2ae49":"plt.figure(figsize = (10,5))\nr100_top10 = df[['Player','100']].sort_values('100', ascending = False).head(10)\nax = sns.barplot(x='Player', y='100', data= r100_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= \"100's Scored\")\nplt.xticks(rotation=90)\nplt.show()","c6168808":"#50\nplt.figure(figsize = (30,5))\nr50 = df[['Player','50']].sort_values('50', ascending = False)\nax = sns.barplot(x='Player', y='50', data= r50)\nax.set(xlabel = '', ylabel= \"50s Scored\")\nplt.xticks(rotation=90)\nplt.show()","4c9f17e9":"plt.figure(figsize = (10,5))\nr50_top10 = df[['Player','50']].sort_values('50', ascending = False).head(10)\nax = sns.barplot(x='Player', y='50', data= r50_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= \"50's Scored\")\nplt.xticks(rotation=90)\nplt.show()","1ac538a4":"#0\nplt.figure(figsize = (30,5))\nr0 = df[['Player','0']].sort_values('0', ascending = False)\nax = sns.barplot(x='Player', y='0', data= r0)\nax.set(xlabel = '', ylabel= \"Os Scored\")\nplt.xticks(rotation=90)\nplt.show()","b03e2ea2":"plt.figure(figsize = (10,5))\nr0_top10 = df[['Player','0']].sort_values('0', ascending = False).head(10)\nax = sns.barplot(x='Player', y='0', data= r0_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= \"Os Scored\")\nplt.xticks(rotation=90)\nplt.show()","86b52333":"#Exp\nplt.figure(figsize = (30,5))\nexp = df[['Player','Exp']].sort_values('Exp', ascending = False)\nax = sns.barplot(x='Player', y='Exp', data= exp)\nax.set(xlabel = '', ylabel= 'Experience')\nplt.xticks(rotation=90)\nplt.show()","4f251f6b":"plt.figure(figsize = (10,5))\nexp_top10 = df[['Player','Exp']].sort_values('Exp', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Exp', data= exp_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Exprience')\nplt.xticks(rotation=90)\nplt.show()","25bf662a":"# Let's check the correlation coefficients to see which variables are highly correlated\n\nplt.figure(figsize = (10, 10))\nsns.heatmap(df.corr(), annot = True, cmap=\"rainbow\")\nplt.savefig('Correlation')\nplt.show()","eb79cd7e":"sns.pairplot(df,corner=True,diag_kind=\"kde\")\nplt.show()","72aa31d0":"df.describe()","03424d72":"f, axes = plt.subplots(4,3, figsize=(16, 8))\ns=sns.violinplot(y=df.Exp,ax=axes[0, 0])\naxes[0, 0].set_title('Exp')\ns=sns.violinplot(y=df.Mat,ax=axes[0, 1])\naxes[0, 1].set_title('Mat')\ns=sns.violinplot(y=df.Inns,ax=axes[0, 2])\naxes[0, 2].set_title('Inns')\n\ns=sns.violinplot(y=df.NO,ax=axes[1, 0])\naxes[1, 0].set_title('NO')\ns=sns.violinplot(y=df.Runs,ax=axes[1, 1])\naxes[1, 1].set_title('Runs')\ns=sns.violinplot(y=df.HS,ax=axes[1, 2])\naxes[1, 2].set_title('HS')\n\ns=sns.violinplot(y=df.Ave,ax=axes[2, 0])\naxes[2, 0].set_title('Ave')\ns=sns.violinplot(y=df.SR,ax=axes[2, 1])\naxes[2, 1].set_title('SR')\ns=sns.violinplot(y=df['100'],ax=axes[2, 2])\naxes[2, 2].set_title('100')\ns=sns.violinplot(y=df.BF,ax=axes[3, 0])\naxes[3, 0].set_title('BF')\ns=sns.violinplot(y=df['50'],ax=axes[3, 1])\naxes[3, 1].set_title('50s')\ns=sns.violinplot(y=df['0'],ax=axes[3, 2])\naxes[3, 2].set_title('0s')\nplt.show()","92d50176":"plt.figure(figsize = (30,10))\nfeatures=[ 'Mat', 'Inns', 'NO', 'Runs', 'HS', 'Ave', 'BF', 'SR', '100','50', '0', 'Exp']\nfor i in enumerate(features):\n    plt.subplot(3,4,i[0]+1)\n    sns.distplot(df[i[1]])","94a478f8":"Q3 = df.Mat.quantile(0.99)\nQ1 = df.Mat.quantile(0.01)\ndf['Mat'][df['Mat']<=Q1]=Q1\ndf['Mat'][df['Mat']>=Q3]=Q3","9e717684":"Q3 = df.Inns.quantile(0.99)\nQ1 = df.Inns.quantile(0.01)\ndf['Inns'][df['Inns']<=Q1]=Q1\ndf['Inns'][df['Inns']>=Q3]=Q3","946d8934":"Q3 = df.NO.quantile(0.99)\nQ1 = df.NO.quantile(0.01)\ndf['NO'][df['NO']<=Q1]=Q1\ndf['NO'][df['NO']>=Q3]=Q3","2382e866":"Q3 = df.Runs.quantile(0.99)\nQ1 = df.Runs.quantile(0.01)\ndf['Runs'][df['Runs']<=Q1]=Q1\ndf['Runs'][df['Runs']>=Q3]=Q3","422e3482":"Q3 = df.HS.quantile(0.99)\nQ1 = df.HS.quantile(0.01)\ndf['HS'][df['HS']<=Q1]=Q1\ndf['HS'][df['HS']>=Q3]=Q3","b68071bc":"Q3 = df.Ave.quantile(0.99)\nQ1 = df.Ave.quantile(0.01)\ndf['Ave'][df['Ave']<=Q1]=Q1\ndf['Ave'][df['Ave']>=Q3]=Q3","b41601e9":"Q3 = df.BF.quantile(0.99)\nQ1 = df.BF.quantile(0.01)\ndf['BF'][df['BF']<=Q1]=Q1\ndf['BF'][df['BF']>=Q3]=Q3","eb37b38e":"Q3 = df.SR.quantile(0.99)\nQ1 = df.SR.quantile(0.01)\ndf['SR'][df['SR']<=Q1]=Q1\ndf['SR'][df['SR']>=Q3]=Q3","4abe5b9b":"Q3 = df.Exp.quantile(0.99)\nQ1 = df.Exp.quantile(0.01)\ndf['Exp'][df['Exp']<=Q1]=Q1\ndf['Exp'][df['Exp']>=Q3]=Q3","84ac6787":"Q3 = df['100'].quantile(0.99)\nQ1 = df['100'].quantile(0.01)\ndf['100'][df['100']<=Q1]=Q1\ndf['100'][df['100']>=Q3]=Q3","225f7b22":"Q3 = df['50'].quantile(0.99)\nQ1 = df['50'].quantile(0.01)\ndf['50'][df['50']<=Q1]=Q1\ndf['50'][df['50']>=Q3]=Q3","14d50b30":"Q3 = df['0'].quantile(0.99)\nQ1 = df['0'].quantile(0.01)\ndf['0'][df['0']<=Q1]=Q1\ndf['0'][df['0']>=Q3]=Q3","50f29c10":"f, axes = plt.subplots(4,3, figsize=(16, 8))\ns=sns.violinplot(y=df.Exp,ax=axes[0, 0])\naxes[0, 0].set_title('Exp')\ns=sns.violinplot(y=df.Mat,ax=axes[0, 1])\naxes[0, 1].set_title('Mat')\ns=sns.violinplot(y=df.Inns,ax=axes[0, 2])\naxes[0, 2].set_title('Inns')\n\ns=sns.violinplot(y=df.NO,ax=axes[1, 0])\naxes[1, 0].set_title('NO')\ns=sns.violinplot(y=df.Runs,ax=axes[1, 1])\naxes[1, 1].set_title('Runs')\ns=sns.violinplot(y=df.HS,ax=axes[1, 2])\naxes[1, 2].set_title('HS')\n\ns=sns.violinplot(y=df.Ave,ax=axes[2, 0])\naxes[2, 0].set_title('Ave')\ns=sns.violinplot(y=df.SR,ax=axes[2, 1])\naxes[2, 1].set_title('SR')\ns=sns.violinplot(y=df['100'],ax=axes[2, 2])\naxes[2, 2].set_title('100')\ns=sns.violinplot(y=df.BF,ax=axes[3, 0])\naxes[3, 0].set_title('BF')\ns=sns.violinplot(y=df['50'],ax=axes[3, 1])\naxes[3, 1].set_title('50s')\ns=sns.violinplot(y=df['0'],ax=axes[3, 2])\naxes[3, 2].set_title('0s')\nplt.show()","1a8a50f7":"# Dropping Player field as final dataframe will only contain data columns\n\ndf_drop = df.copy()\nplayer = df_drop.pop('Player')","5efb0811":"df_drop.head()","81245fb4":"All are Batsmans","e0b27352":"## Data Preparation","abd71bc6":"All are batsmans","61138efe":"# Data Cleaning","e8394808":"# Exploratory Data Analytics","c5910589":"Percentile Capping (Winsorization) for outliers handling","07b0c241":"Derived Metrices","3f38807f":"All are Batsmans","6a4dd3fa":"Outlier Analysis","7d2ef7d5":"Null Count: Columns","60cbbe74":"## Univariate Analysis","985b70b6":"# Data Inspection","484c6487":"Null Percentage: Rows","79e4ace0":"### Duplicate Check","cc4a4438":"There are no missing \/ Null values either in columns or rows","aeb1864c":"All are batsman","468fdb8e":"The shape after running the drop duplicate command is same as the original dataframe.\n\nHence we can conclude that there were zero duplicate values in the dataset.","c73df2c0":"Null Percentage: Columns","74d5fadc":"Plot histogram for each continous variables","406db254":"- Mat and Inns are highly correlated with correlation of 0.99\n- Mat and Runs are highly correlated with correlation of 0.86\n- Runs and Inns are highly correlated with correlation of 0.90","5ff6138b":"Null Count: Rows"}}