{"cell_type":{"27209cc0":"code","67487d2f":"code","eeff6a0b":"code","356624c2":"code","63250d38":"code","e4f53b4e":"code","9e0bed75":"code","9072d3fb":"code","375bfae6":"code","e3868e3c":"code","ed1b982e":"code","447f7eb0":"code","7fc21318":"code","fe9bf885":"code","b229dd8f":"code","b67e0851":"code","e7eeac68":"code","cc7f02bd":"code","fd446466":"code","7e83198e":"code","1ad7b4ff":"code","5b242f9f":"code","32000ba4":"code","ad3726f7":"code","dbcb0db0":"code","0d2fa7bf":"code","2a4c1822":"code","1b937144":"code","b8cd7ea7":"code","cfcc2322":"code","872f4912":"code","19c24de5":"code","7865c6fb":"code","d2cf41cd":"code","91b827e9":"code","4c04970d":"code","4b787a86":"code","bb57bbbf":"code","4e1cfb1e":"code","de68c356":"markdown","be0b09fb":"markdown"},"source":{"27209cc0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","67487d2f":"import pandas as pd\nimport numpy as np\n\nX_train=pd.read_csv('..\/input\/X_train.csv')\ny_train=pd.read_csv('..\/input\/y_train.csv')\n\n\n","eeff6a0b":"X_train.head(10)","356624c2":"y_train.head(10)","63250d38":"X_train.shape","e4f53b4e":"y_train.shape","9e0bed75":"X_test=pd.read_csv('..\/input\/X_test.csv')\nX_test.head(10)","9072d3fb":"X_test.shape","375bfae6":"for i in X_train.columns:\n    print(X_train[i].value_counts())","e3868e3c":"def eulerAnglesToRotationMatrix(theta) :\n     \n    R_x = np.array([[1,         0,                  0                   ],\n                    [0,         math.cos(theta[0]), -math.sin(theta[0]) ],\n                    [0,         math.sin(theta[0]), math.cos(theta[0])  ]\n                    ])\n         \n         \n                     \n    R_y = np.array([[math.cos(theta[1]),    0,      math.sin(theta[1])  ],\n                    [0,                     1,      0                   ],\n                    [-math.sin(theta[1]),   0,      math.cos(theta[1])  ]\n                    ])\n                 \n    R_z = np.array([[math.cos(theta[2]),    -math.sin(theta[2]),    0],\n                    [math.sin(theta[2]),    math.cos(theta[2]),     0],\n                    [0,                     0,                      1]\n                    ])\n                     \n                     \n    R = np.dot(R_z, np.dot( R_y, R_x ))\n \n    return R\n\n","ed1b982e":"df=X_train.copy()\n","447f7eb0":"df.head(10)\ndf['T_acceleration']=np.sqrt(np.square(df['linear_acceleration_X'])+np.square(df['linear_acceleration_Y'])+np.square(df['linear_acceleration_Z']))\ndf['T_angular_v']=np.sqrt(np.square(df['angular_velocity_X'])+np.square(df['angular_velocity_Y'])+np.square(df['angular_velocity_Z']))","7fc21318":"df2=df.join(y_train.set_index('series_id'), on='series_id')","fe9bf885":"df2.head(10)","b229dd8f":"# a quaternion is a complex number with w as the real part and x, y, z as imaginary parts.\n#q=s+xi+yj+zk","b67e0851":"df2.drop('row_id',axis=1,inplace=True)","e7eeac68":"df2.head(10)","cc7f02bd":"#w = cos(theta \/ 2)\n\ndf2['theta']=2*np.arccos(df2['orientation_W'])","fd446466":"df2.head(10)","7e83198e":"df2['x'] = (df2['angular_velocity_X']*np.sin(df2['theta'])\/ 2)\ndf2['y'] = (df2['angular_velocity_Y']*np.sin(df2['theta'])\/ 2)\ndf2['z'] = (df2['angular_velocity_Z']*np.sin(df2['theta'])\/ 2)","1ad7b4ff":"#df2['theta'].value_counts()","5b242f9f":"df2['theta2']=df2['theta'].round(3)","32000ba4":"#features_selected=['series_id','T_acceleration','group_id','x','y','z','theta2','surface']\ndf2['RotZ90']=df2['z']*np.sin(0.5*90)\n\n\n#features_selected=['series_id','T_acceleration','theta2','RotZ90','surface']\nfeatures_selected=['series_id','T_acceleration','x','y','z','theta2','RotZ90','angular_velocity_X','angular_velocity_Y','angular_velocity_Z','T_angular_v']\n\n","ad3726f7":"colList=df2.columns\ncolList=colList.drop('surface')\ncolList=colList.drop('theta')\ncolList=colList.drop('measurement_number')\ncolList=colList.drop('group_id')\nnormalize =df2[features_selected].copy()\nnormalize=(np.min(normalize)-normalize)\/(np.max(normalize)-np.min(normalize))\nnormalize['series_id']=df2['series_id']\nlabels = pd.Series(df2['surface'])\nfeatures[\"bias\"] = 1\n\nshuffled_index = np.random.permutation(df2.index)\nshuffled_data = features.loc[shuffled_index]\nshuffled_labels = labels.loc[shuffled_index]\nmid_length = int(len(shuffled_data)\/2)\n\ntrain_features = shuffled_data.iloc[0:mid_length]\ntest_features = shuffled_data.iloc[mid_length:len(shuffled_data)]\ntrain_labels = shuffled_labels.iloc[0:mid_length]\ntest_labels = shuffled_labels.iloc[mid_length: len(labels)]","dbcb0db0":"from sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import accuracy_score\n\nmlp = MLPClassifier(hidden_layer_sizes=(10,5), max_iter=1000,activation='tanh',random_state=1,alpha=0.1,solver='adam')\n#mlp = MLPClassifier(hidden_layer_sizes=(7,3), max_iter=1000,activation='tanh',random_state=1,alpha=0.1,solver='adam')\nmlp.fit(train_features, train_labels)\nnn_predictions = mlp.predict(test_features)\n\nnn_accuracy = accuracy_score(test_labels, nn_predictions)\n\nprint(\"NN Model Accuracy: \", nn_accuracy)\n","0d2fa7bf":"X_test2=X_test.copy()\nX_test2['T_acceleration']=np.sqrt(np.square(X_test['linear_acceleration_X'])+np.square(X_test['linear_acceleration_Y'])+np.square(X_test['linear_acceleration_Z']))\nX_test2['T_angular_v']=np.sqrt(np.square(X_test['angular_velocity_X'])+np.square(X_test['angular_velocity_Y'])+np.square(X_test['angular_velocity_Z']))\n","2a4c1822":"X_test2['theta']=2*np.arccos(X_test['orientation_W'])\nX_test2['theta2']=X_test2['theta'].round(3)","1b937144":"X_test2['x'] = (X_test['angular_velocity_X']*np.sin(X_test2['theta'])\/ 2)\nX_test2['y'] = (X_test['angular_velocity_Y']*np.sin(X_test2['theta'])\/ 2)\nX_test2['z'] = (X_test['angular_velocity_Z']*np.sin(X_test2['theta'])\/ 2)\n","b8cd7ea7":"X_test2['RotZ90']=X_test2['z']*np.sin(0.5*90)","cfcc2322":"colList2=X_test2.columns\ncolList2=colList2.drop('theta')\ncolList2=colList2.drop('row_id')\ncolList2=colList2.drop('measurement_number')\n","872f4912":"normalize2 =X_test2[colList2].copy()\nnormalize2.isnull().sum()","19c24de5":"normalize2=(np.min(normalize2)-normalize2)\/(np.max(normalize2)-np.min(normalize2))","7865c6fb":"normalize2['series_id']=X_test['series_id']","d2cf41cd":"normalize.columns\n","91b827e9":"#normalize2[\"bias\"] = 1\n\nnormalize2.drop('bias',axis=1,inplace=True)\n\nnormalize2.columns=normalize.columns","4c04970d":"mlp.fit(shuffled_data, shuffled_labels)\nnn_predictions2 = mlp.predict(normalize2)","4b787a86":"result=normalize[['series_id']]\nresult['surface']=nn_predictions2","bb57bbbf":"result.head(500)","4e1cfb1e":"result.to_csv('submisson.csv',index = False)","de68c356":"<h1>Feature Engineering <\/h1>\n","be0b09fb":"<h2> Running the Model <\/h2>"}}