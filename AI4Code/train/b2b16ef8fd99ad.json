{"cell_type":{"4bb64c2a":"code","576b64b1":"code","a3dd3d4e":"code","8f6db0f3":"code","88167646":"code","58a31967":"code","7e0bf876":"code","9528ed7c":"code","69feb4f4":"code","b5588253":"code","c9a4768a":"code","5ad42757":"code","07a4bde3":"code","cac9abba":"code","df543f39":"code","a1563833":"code","294af511":"code","1a86e603":"code","f1100d78":"code","008b3f9d":"code","1162c7fe":"code","e7689bb4":"code","af2151bc":"code","3e8429f2":"code","e6bdaca5":"code","0366fafa":"code","57ca2e33":"code","0e0d936d":"code","7d5bc483":"code","0ccb30b1":"code","1b81322f":"code","416ced09":"code","a559dad8":"code","b63dff5b":"code","0fb14f3c":"code","ed49ad86":"code","0036c226":"code","3356e0a0":"code","d340f260":"code","1ba40e79":"code","0846508e":"code","64566e1d":"code","9b83f4c7":"code","ba20754f":"code","081be16f":"code","ade4ee38":"code","dd07e242":"code","66da8f0b":"markdown","6258ed38":"markdown","2a7942d6":"markdown","01c4656d":"markdown","2fe62d60":"markdown","a2d39a01":"markdown","898c50e2":"markdown","cd42204f":"markdown","98844950":"markdown","d6b4c407":"markdown","07445c5c":"markdown","49424b3f":"markdown","0cb84f34":"markdown","80e06656":"markdown"},"source":{"4bb64c2a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport re\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.","576b64b1":"data = pd.read_csv(\"..\/input\/data.csv\")","a3dd3d4e":"data.head()","8f6db0f3":"# Checking if any values missing\ndata.isna().sum()","88167646":"data[data['Weight'].isna()].head()","58a31967":"data.dropna(subset = ['Weight','Height'],inplace = True)","7e0bf876":"data.isna().sum()","9528ed7c":"## Converting players market value into value in Millions(M)\ndata['Value'] = data['Value'].fillna('NaN')\ndata['Value'] = data['Value'].apply(lambda x:\n                                    float(re.findall('\u20ac(.*)M',x)[0]) if 'M' in x \n                                    else (float(re.findall('\u20ac(.*)K',x)[0])\/1000 if 'K' in x  else 0))","69feb4f4":"## Converting players wages into value in Thousands (K)\ndata['Wage'] = data['Wage'].fillna('NaN')\ndata['Wage'] = data['Wage'].apply(lambda x:float(re.findall('\u20ac(.*)K',x)[0]) if 'K' in x \n                                  else float(re.findall('\u20ac(.*)',x)[0])\/1000)","b5588253":"## Converting players release clause in Millions (M)\ndata['Release Clause'] = data['Release Clause'].fillna('NaN')\ndata['Release Clause'] = data['Release Clause'].apply(lambda x:\n                                    float(re.findall('\u20ac(.*)M',x)[0]) if 'M' in x \n                                    else (float(re.findall('\u20ac(.*)K',x)[0])\/1000 if 'K' in x  else 0))","c9a4768a":"print(\"Total players in fifa 19 - \",data.shape[0])","5ad42757":"tm = data['Preferred Foot'].value_counts()\nplt_data = [go.Bar(\n    x = tm.index,\n    y = tm\n    )]\nlayout = go.Layout(\n    autosize=False,\n    width=500,\n    height=500,\n    title = \"Count of players prefered foot\"\n)\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","07a4bde3":"print(\"Total number of positions in FIFA19 is\",data['Position'].nunique())\ntm = data['Position'].value_counts()\nplt_data = [go.Bar(\n    x = tm.index,\n    y = tm\n    )]\nlayout = go.Layout(\n    title = \"Count of the Players Playing in a particular Position\"\n)\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","cac9abba":"tm = data['Position'].value_counts(normalize=True)*100\nplt_data = [go.Bar(\n    x = tm.index,\n    y = tm\n    )]\nlayout = go.Layout(\n    title = \"Percentage of Players Playing in a particular Position\"\n)\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","df543f39":"forwards = ['ST','LF','RF','CF','LW','RW']\nmidfielders = ['CM','LCM','RCM','RM','LM','CDM','LDM','RDM','CAM','LAM','RAM','LCM','RCM']\ndefenders = ['CB','RB','LB','RCB','LCB','RWB','LWB'] \ngoalkeepers = ['GK']\ndata['Overall_position'] = None\nforward_players = data[data['Position'].isin(forwards)]\nmidfielder_players = data[data['Position'].isin(midfielders)]\ndefender_players = data[data['Position'].isin(defenders)]\ngoalkeeper_players = data[data['Position'].isin(goalkeepers)]\ndata.loc[forward_players.index,'Overall_position'] = 'forward'\ndata.loc[defender_players.index,'Overall_position'] = 'defender'\ndata.loc[midfielder_players.index,'Overall_position'] = 'midfielder'\ndata.loc[goalkeeper_players.index,'Overall_position'] = 'goalkeeper'","a1563833":"# sns.countplot(data['Overall_position'])\ntm = data['Overall_position'].value_counts()\nplt_data = [go.Bar(\n    x = tm.index,\n    y = tm\n    )]\nlayout = go.Layout(\n    autosize=False,\n    width=500,\n    height=500,\n    title = \"Total players playing in the Overall position\"\n)\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","294af511":"print(\"TOP 5 FORWARDS\")\ndata[data['Overall_position'] == 'forward'].sort_values(by = 'Overall', ascending = False).head()","1a86e603":"print(\"TOP 5 MIDFIELDERS\")\ndata[data['Overall_position'] == 'midfielder'].sort_values(by = 'Overall', ascending = False).head()","f1100d78":"print(\"TOP 5 DEFENDERS\")\ndata[data['Overall_position'] == 'defender'].sort_values(by = 'Overall', ascending = False).head()","008b3f9d":"print(\"TOP 5 GOALKEEPERS\")\ndata[data['Overall_position'] == 'goalkeeper'].sort_values(by = 'Overall', ascending = False).head()","1162c7fe":"print(\"--------------Top 10 Highest Market Value in Millions \u20ac -------------- \")\ndata.sort_values(by = 'Value',ascending = False)[['Name','Age','Value','Overall','Potential','Position']].head(10)","e7689bb4":"print(\"--------------Top 10 Highest Wages Earned in Thousands \u20ac -------------- \")\ndata.sort_values(by = 'Wage',ascending = False)[['Name','Age','Wage','Overall','Potential','Position']].head(10)","af2151bc":"print(\"--------------Top 10 Highest Release Clause in Millions \u20ac-------------- \")\ndata.sort_values(by = 'Release Clause',ascending = False)[['Name','Age','Release Clause','Overall','Potential','Position']].head(10)","3e8429f2":"tm = data.groupby('Nationality').count()['ID'].sort_values(ascending = False)\nplt_data = [go.Bar(\n    x = tm.index,\n    y = tm\n    )]\nlayout = go.Layout(\n    autosize=False,\n    width=5000,\n    height=600,\n    title = \"Total players from a Nation in the whole game\"\n)\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","e6bdaca5":"tm = data.groupby('Nationality').mean()['Overall'].sort_values(ascending = False)\nplt_data = [go.Bar(\n    x = tm.index,\n    y = tm\n    )]\nlayout = go.Layout(\n    autosize=True,\n    width=5000,\n    height=500,\n    title = \"Average overall rating of a player from a Nation in the whole game\"\n)\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","0366fafa":"## Creating national team data using group by\nnational_team_data = data.groupby(['Nationality'],as_index = False).agg(['mean','count','sum'])","57ca2e33":"national_team_data.head()","0e0d936d":"## So we consider average overall for those team which have atleast 200 players\ntm = national_team_data[national_team_data['ID']['count']>200]['Overall']['mean'].sort_values(ascending = False)\nplt_data = [go.Bar(\n    x = tm.index,\n    y = tm\n    )]\nlayout = go.Layout(\n    autosize=False,\n    width=1000,\n    height=500,\n    title = \"Average Overall rating of a player from a Nation in the whole game (having atleast 200 players)\"\n)\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","7d5bc483":"tm = national_team_data['Value']['sum'].sort_values(ascending = False).head(50)\nplt_data = [go.Bar(\n    x = tm.index,\n    y = tm\n    )]\nlayout = go.Layout(\n    autosize=False,\n    width=1500,\n    height=500,\n    title = \"Total valuation of players of a Nation in the whole game in Million(M) \u20ac\"\n)\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","0ccb30b1":"tm = national_team_data[national_team_data['ID']['count']>100]['Value']['mean'].sort_values(ascending = False)\nplt_data = [go.Bar(\n    x = tm.index,\n    y = tm\n    )]\nlayout = go.Layout(\n    autosize=False,\n    width=1000,\n    height=500,\n    title = \"Average valuation of a player of a Nation in the whole game in Million(M) \u20ac (Nation having >100 players)\"\n)\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","1b81322f":"tm = national_team_data[national_team_data['ID']['count']>100]['Wage']['sum'].sort_values(ascending = False)\nplt_data = [go.Bar(\n    x = tm.index,\n    y = tm\/1000 # better to divide the wages(in K) by 1000 to convert them to Millions(M)\n    )]\nlayout = go.Layout(\n    autosize=False,\n    width=1000,\n    height=500,\n    title = \"Total wages of players of a Nation in the whole game in Million(M) \u20ac (Nations having > 100 players)\"\n)\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","416ced09":"tm = national_team_data[national_team_data['ID']['count']>100]['Wage']['mean'].sort_values(ascending = False)\nplt_data = [go.Bar(\n    x = tm.index,\n    y = tm\n    )]\nlayout = go.Layout(\n    autosize=False,\n    width=1000,\n    height=500,\n    title = \"Mean wages of players of a Nation in the whole game in Thousands(K) \u20ac (Nations having > 100 players)\"\n)\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","a559dad8":"tm = national_team_data[national_team_data['ID']['count']>100]['Age']['mean'].sort_values(ascending = True)\nplt_data = [go.Bar(\n    x = tm.index,\n    y = tm\n    )]\nlayout = go.Layout(\n    autosize=False,\n    width=1000,\n    height=500,\n    title = \"Mean age of players of a Nation having more than 100 players\"\n)\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","b63dff5b":"nations_more_players = national_team_data[national_team_data['ID']['count']>100]['ID'].sort_values(by = 'count',ascending =  False).index\ntm = data.groupby(['Nationality','Overall_position']).agg(['count'])['ID'].unstack()\ntm = tm.fillna(0)\ntm = tm[tm.index.isin(nations_more_players)]","0fb14f3c":"tm.head()","ed49ad86":"trace1 = go.Bar(\n    x=tm.index,\n    y=tm['count']['defender'],\n    name='Defenders'\n)\ntrace2 = go.Bar(\n    x=tm.index,\n    y=tm['count']['midfielder'],\n    name='Midfielders'\n)\ntrace3 = go.Bar(\n    x=tm.index,\n    y=tm['count']['forward'],\n    name='Forwards'\n)\ntrace4 = go.Bar(\n    x=tm.index,\n    y=tm['count']['goalkeeper'],\n    name='Goalkeepers'\n)\nplt_data = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    barmode='stack',\n    title = \"Total number of players position wise playing for a nation\",\n    width = 1200,\n    height = 500\n)\n\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","0036c226":"top_50_clubs = data[data['Age']>18].groupby('Club').mean()['Overall'].sort_values(ascending = False).head(50)\ntop_50_clubs = top_50_clubs.index.tolist()\ntop_50_clubs = data[data['Club'].isin(top_50_clubs)]","3356e0a0":"top_50_clubs.head()","d340f260":"tm = top_50_clubs.groupby('Club').mean()['Overall'].sort_values(ascending = False)\nplt_data = [go.Bar(\n    x = tm.index,\n    y = tm\n    )]\nlayout = go.Layout(\n    autosize=False,\n    width=2000,\n    height=500,\n    title = \"Average overall ratings of top 50 Clubs (Players age > 19)\"\n)\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","1ba40e79":"tm = top_50_clubs.groupby('Club').agg('sum')['Value'].sort_values(ascending=False)\nplt_data = [go.Bar(\n    x = tm.index,\n    y = tm\n    )]\nlayout = go.Layout(\n    autosize=False,\n    width=2000,\n    height=500,\n    title = \"Total valuation of players of Top 50 Clubs (Players age > 19) in Millions(M)\"\n)\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","0846508e":"tm = top_50_clubs.groupby('Club').agg('sum')['Wage'].sort_values(ascending=False)\nplt_data = [go.Bar(\n    x = tm.index,\n    y = tm\n    )]\nlayout = go.Layout(\n    autosize=False,\n    width=2000,\n    height=500,\n    title = \"Total wages paid by Top 50 Clubs (Players age > 19)\"\n)\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","64566e1d":"tm = top_50_clubs.groupby(['Club','Overall_position']).agg(['count'])['ID'].unstack()\ntrace1 = go.Bar(\n    x=tm.index,\n    y=tm['count']['defender'],\n    name='Defenders'\n)\ntrace2 = go.Bar(\n    x=tm.index,\n    y=tm['count']['midfielder'],\n    name='Midfielders'\n)\ntrace3 = go.Bar(\n    x=tm.index,\n    y=tm['count']['forward'],\n    name='Forwards'\n)\ntrace4 = go.Bar(\n    x=tm.index,\n    y=tm['count']['goalkeeper'],\n    name='Goalkeepers'\n)\nplt_data = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    barmode='stack',\n    width=2000,\n    height=500,\n    title = \"Total number of players playing in a position club wise (Players age > 19)\"\n)\n\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","9b83f4c7":"tm = top_50_clubs.groupby(['Club','Overall_position']).agg(['mean'])['Overall'].unstack()\ntrace1 = go.Bar(\n    x=tm.index,\n    y=tm['mean']['defender'],\n    name='Defenders'\n)\ntrace2 = go.Bar(\n    x=tm.index,\n    y=tm['mean']['midfielder'],\n    name='Midfielders'\n)\ntrace3 = go.Bar(\n    x=tm.index,\n    y=tm['mean']['forward'],\n    name='Forwards'\n)\ntrace4 = go.Bar(\n    x=tm.index,\n    y=tm['mean']['goalkeeper'],\n    name='Goalkeepers'\n)\nplt_data = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    barmode='stack',\n    width=2000,\n    height=500,\n    title = \"Mean rating number of players playing in a position club wise (Players age > 19)\"\n)\n\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","ba20754f":"top_fwds = data[data['Overall_position'] == 'forward'].sort_values(by = 'Overall', ascending = False).head(10)\nplt_cols = ['Crossing','Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling',\n       'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n       'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n       'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n       'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n       'Marking', 'StandingTackle', 'SlidingTackle']\ntop_fwds.reset_index(inplace=True)\nplt_data = [] \nfor i in range(top_fwds.shape[0]):\n    trace = go.Scatterpolar(\n        r = top_fwds.loc[i,plt_cols],\n        theta = plt_cols,\n        #mode = 'lines',\n        name = top_fwds.loc[i,'Name'],\n    )\n    plt_data.append(trace)\n    \nlayout = go.Layout(\n  polar = dict(\n    radialaxis = dict(\n      visible = True,\n      range = [15, 100],\n    )\n  ),\n    height = 900,\n    width = 900,\n    title = \"Top 10 forwards\",\n    showlegend = True\n)\n\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","081be16f":"top_fwds = data[data['Overall_position'] == 'midfielder'].sort_values(by = 'Overall', ascending = False).head(10)\ntop_fwds.reset_index(inplace=True)\nplt_data = [] \nfor i in range(top_fwds.shape[0]):\n    trace = go.Scatterpolar(\n        r = top_fwds.loc[i,plt_cols],\n        theta = plt_cols,\n        #mode = 'lines',\n        name = top_fwds.loc[i,'Name'],\n    )\n    plt_data.append(trace)\n    \nlayout = go.Layout(\n  polar = dict(\n    radialaxis = dict(\n      visible = True,\n      range = [10, 100],\n    )\n  ),\n    height = 900,\n    width = 900,\n    title = \"Top 10 midfielders\",\n    showlegend = True\n)\n\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","ade4ee38":"top_fwds = data[data['Overall_position'] == 'defender'].sort_values(by = 'Overall', ascending = False).head(10)\ntop_fwds.reset_index(inplace=True)\nplt_data = [] \nfor i in range(top_fwds.shape[0]):\n    trace = go.Scatterpolar(\n        r = top_fwds.loc[i,plt_cols],\n        theta = plt_cols,\n        #mode = 'lines',\n        name = top_fwds.loc[i,'Name'],\n    )\n    plt_data.append(trace)\n    \nlayout = go.Layout(\n  polar = dict(\n    radialaxis = dict(\n      visible = True,\n      range = [10, 100],\n    )\n  ),\n    height = 900,\n    width = 900,\n    title = \"Top 10 defenders\",\n    showlegend = True\n)\n\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","dd07e242":"top_fwds = data[data['Overall_position'] == 'goalkeeper'].sort_values(by = 'Overall', ascending = False).head(10)\nplt_cols = [ 'Reactions','Jumping','Strength','GKDiving', 'GKHandling','GKKicking', 'GKPositioning', 'GKReflexes']\ntop_fwds.reset_index(inplace=True)\nplt_data = [] \nfor i in range(top_fwds.shape[0]):\n    trace = go.Scatterpolar(\n        r = top_fwds.loc[i,plt_cols],\n        theta = plt_cols,\n        #mode = 'lines',\n        name = top_fwds.loc[i,'Name'],\n    )\n    plt_data.append(trace)\n    \nlayout = go.Layout(\n  polar = dict(\n    radialaxis = dict(\n      visible = True,\n      range = [40, 100],\n    )\n  ),\n    height = 900,\n    width = 900,\n    title = \"Top 10 goalkeepers\",\n    showlegend = True\n)\n\nfig = go.Figure(data=plt_data, layout=layout)\niplot(fig)","66da8f0b":"## Total Players from a Nation","6258ed38":"### Some players do not have weight and height mentioned .\n### Also these players remaining attributes are missing. Hence we discard them","2a7942d6":"## Player with most valuation","01c4656d":"# Radar plot of top 10 forwards, midfielders, defenders and goalkeepers","2fe62d60":"### So according to the graph is UAE the highest overall rated team?\n### Well the answer is no since some teams might contain less number of players which are high rated thus increasing their average overall","a2d39a01":"# That's all folks.\n## Hope you enjoyed.","898c50e2":"## Converting Value and wages in numerical data format","cd42204f":"# Now moving to club analysis\n\n### Considering there are numerous clubs, we might use only top 50 overall rating clubs for some analysis","98844950":"# In Depth Analysis of FIFA 19 GAME \n\n### This kernel contains thorough analysis of clubs and nation ratings and their market value.\n\n### All the plots use plotly library. So you can hover to the plot for more details.\n### Radar plot at the end","d6b4c407":"Better to look at the percentages as well","07445c5c":"###    Positon wise total players","49424b3f":"#### Most of the positions are also divided into a sub-position i.e exact position of the player.\n\n#### Lets understand it a bit more\n\n#### Overall there are 4 overall positions Goalkeeper, Defence, Midfield and Forwards and these positions are further sub-divided\n\n#### So we have \n#### Defence (CB,RB,LB,RCB,LCB,RWB,LWB)\n\n#### Midfield (CM,LCM,RCM,RM,LM,CDM,LDM,RDM,CAM,LAM,RAM,LCM,RCM)\n\n#### Forward (ST,LF,RF,CF,LS,RS)\n\n#### Goalkeeper (GK)\n\n## Let's see which overall position has more number of Players","0cb84f34":"## Total Players game in the game","80e06656":"## Now we find the top 5 best players in these 3 overall positions"}}