{"cell_type":{"ba0fcec3":"code","5b1328a5":"code","df728adc":"code","77b52656":"code","1e0e319f":"code","41b7a25e":"code","a74bd788":"code","fc5ece73":"code","5296a326":"code","50878e5b":"code","faeb368b":"code","072c6900":"markdown","00cf251d":"markdown","9b78a59d":"markdown","9ef21092":"markdown","dd8eed3c":"markdown","b1b8803d":"markdown","8e430a02":"markdown"},"source":{"ba0fcec3":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom numpy.fft import *\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style \nstyle.use('ggplot')\n\nimport os\nprint(os.listdir(\"..\/input\"))","5b1328a5":"# Load data\nX_train = pd.read_csv('..\/input\/X_train.csv')\nX_test = pd.read_csv('..\/input\/X_test.csv')\ntarget = pd.read_csv('..\/input\/y_train.csv')","df728adc":"series_dict = {}\nfor series in (X_train['series_id'].unique()):\n    series_dict[series] = X_train[X_train['series_id'] == series] ","77b52656":"# From: Code Snippet For Visualizing Series Id by @shaz13\ndef plotSeries(series_id):\n    style.use('ggplot')\n    plt.figure(figsize=(28, 16))\n    print(target[target['series_id'] == series_id]['surface'].values[0].title())\n    for i, col in enumerate(series_dict[series_id].columns[3:]):\n        if col.startswith(\"o\"):\n            color = 'red'\n        elif col.startswith(\"a\"):\n            color = 'green'\n        else:\n            color = 'blue'\n        if i >= 7:\n            i+=1\n        plt.subplot(3, 4, i + 1)\n        plt.plot(series_dict[series_id][col], color=color, linewidth=3)\n        plt.title(col)","1e0e319f":"plotSeries(1)","41b7a25e":"# from @theoviel at https:\/\/www.kaggle.com\/theoviel\/fast-fourier-transform-denoising\ndef filter_signal(signal, threshold=1e3):\n    fourier = rfft(signal)\n    frequencies = rfftfreq(signal.size, d=20e-3\/signal.size)\n    fourier[frequencies > threshold] = 0\n    return irfft(fourier)","a74bd788":"# denoise train and test angular_velocity and linear_acceleration data\nX_train_denoised = X_train.copy()\nX_test_denoised = X_test.copy()\n\n# train\nfor col in X_train.columns:\n    if col[0:3] == 'ang' or col[0:3] == 'lin':\n        # Apply filter_signal function to the data in each series\n        denoised_data = X_train.groupby(['series_id'])[col].apply(lambda x: filter_signal(x))\n        \n        # Assign the denoised data back to X_train\n        list_denoised_data = []\n        for arr in denoised_data:\n            for val in arr:\n                list_denoised_data.append(val)\n                \n        X_train_denoised[col] = list_denoised_data\n        \n# test\nfor col in X_test.columns:\n    if col[0:3] == 'ang' or col[0:3] == 'lin':\n        # Apply filter_signal function to the data in each series\n        denoised_data = X_test.groupby(['series_id'])[col].apply(lambda x: filter_signal(x))\n        \n        # Assign the denoised data back to X_train\n        list_denoised_data = []\n        for arr in denoised_data:\n            for val in arr:\n                list_denoised_data.append(val)\n                \n        X_test_denoised[col] = list_denoised_data\n        ","fc5ece73":"series_dict = {}\nfor series in (X_train_denoised['series_id'].unique()):\n    series_dict[series] = X_train_denoised[X_train_denoised['series_id'] == series] ","5296a326":"plotSeries(1)","50878e5b":"plt.figure(figsize=(24, 8))\nplt.title('linear_acceleration_X')\nplt.plot(X_train.angular_velocity_Z[128:256], label=\"original\");\nplt.plot(X_train_denoised.angular_velocity_Z[128:256], label=\"denoised\");\nplt.legend()\nplt.show()","faeb368b":"X_test.to_csv('X_test_denoised.csv', index=False)\nX_train.to_csv('X_train_denoised.csv', index=False)","072c6900":"If for whatever reason you want to denoise the signal, you can use fast fourier transform. Detailed implementation of how it's done is out of the scope of this kernel. You can learn more about it here: https:\/\/en.wikipedia.org\/wiki\/Fast_Fourier_transform","00cf251d":"Now, let's look at the result:","9b78a59d":"Thank you for reading my first kernel. I hope this kernel can be usefull for your competition!","9ef21092":"# Fast Fourier Tranform Denoising\nIn this kernel I will show a quick trick to denoise your signal.","dd8eed3c":"As you may already know, in this competition we are given 128 measurements per time series from 10 sensor channels. Let's take a closer look:","b1b8803d":"Let's say that I want to denoise the signal on angular_velocity and linear_acceleration column","8e430a02":"As you can see, our signal become much smoother than before. Here's a closer comparison:"}}