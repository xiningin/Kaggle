{"cell_type":{"8af58e38":"code","954cf2a6":"code","479f6789":"code","653312a6":"code","c4571e13":"code","c0364f2b":"code","409e2fcc":"code","431bf6d0":"code","f60beb8a":"code","327ed5f4":"code","0f184656":"code","1aac08a0":"code","37696946":"code","27686b4c":"markdown","ba085982":"markdown","7bef8185":"markdown","ddfd96b6":"markdown","db870355":"markdown","c5db504c":"markdown"},"source":{"8af58e38":"import numpy as np\nimport pandas_datareader as web\nimport datetime as dt\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn')\nplt.rcParams['figure.figsize'] = 20, 15\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout, GRU, Conv1D, MaxPool1D, Flatten, AveragePooling1D\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom tensorflow.keras.optimizers import Adam","954cf2a6":"ticker = 'ciel3.sa'\nstart = dt.date(1900,1,1)\n\ndf = web.get_data_yahoo(ticker, start=start)\ndf = df.filter(['Close'])\ndf.dropna(inplace=True)\ndf.plot()","479f6789":"def rnn_process(scaled_data, window=60, test_size=.2):\n    # split\n    test_len = int(len(scaled_data) * test_size)\n    train = scaled_data[:-test_len]\n    test = scaled_data[-test_len-window:]\n    print(f'Train & Test lengths are : {len(train), len(test)}')\n\n    X_train = []\n    y_train = []\n    X_test = []\n    y_test = []\n    \n    # train build\n    for i in range(window,len(train)):\n        X_train.append(train[i-window:i,:])\n        y_train.append(train[i,0])\n    \n    #test build    \n    for i in range(window,len(test)):\n        X_test.append(test[i-window:i,:])\n        y_test.append(test[i,0])\n        \n    X_train, y_train, X_test, y_test = np.array(X_train), np.array(y_train), np.array(X_test), np.array(y_test)\n    #X_train = np.expand_dims(X_train,axis=-1)\n    #X_test = np.expand_dims(X_test,axis=-1)\n    print(f'Shapes of the X_train, y_train, X_test, y_test are {X_train.shape, y_train.shape, X_test.shape, y_test.shape}')\n    \n    return X_train, y_train, X_test, y_test","653312a6":"scaler = MinMaxScaler()\nscaled_df = scaler.fit_transform(df)\n\nX_train, y_train, X_test, y_test = rnn_process(scaled_data=scaled_df)","c4571e13":"# Model for stock predictions\nfeatures = 1\nmodel = Sequential(name=\"LSTM_model\")\nmodel.add(LSTM(128, return_sequences=True, input_shape=(X_train.shape[1], features)))\nmodel.add(Dropout(.2))\nmodel.add(LSTM(64, return_sequences=True))\nmodel.add(Dropout(.2))\nmodel.add(LSTM(64, return_sequences=False))\nmodel.add(Dropout(.2))\n\nmodel.add(Dense(30, activation='relu'))\nmodel.add(Dropout(.2))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='mse', optimizer='adam')\nmodel.summary()\n\n# Callbacks\ncheckpts = ModelCheckpoint('.\/'+ticker.upper()+'.h5', verbose=1, save_best_only=True)\nearly = EarlyStopping(patience=5)\ncallback_list = [checkpts, early]","c0364f2b":"history = model.fit(X_train, y_train, validation_split=.2, epochs=200, callbacks=callback_list)","409e2fcc":"plt.plot(history.history['loss'], label='Original loss')\nplt.plot(history.history['val_loss'], label='Val loss')\nplt.legend()","431bf6d0":"preds = model.predict(X_test)\npreds = scaler.inverse_transform(preds)\n\ndf.plot()\nplt.plot(df.index[-int(len(df)*.2):],preds, label='Predictions')\nplt.legend()","f60beb8a":"tomorrow_pred = model.predict(scaled_df[-60:].reshape(1,60,features))\ntomorrow_pred = scaler.inverse_transform(tomorrow_pred)\n\nprint(f'Price today and tomorrow are {df.iloc[-1,0],tomorrow_pred[0][0]} respectively')","327ed5f4":"# Model for stock predictions\nfeatures = 1\nmodel = Sequential(name=\"Conv1d_model\")\nmodel.add(Conv1D(128, kernel_size=3, strides=1, activation='relu', padding='same',\n                 input_shape=(X_train.shape[1], features)))\nmodel.add(AveragePooling1D(2))\n#model.add(Dropout(.2))\nmodel.add(Conv1D(64, kernel_size=3, padding='same', activation='relu'))\nmodel.add(AveragePooling1D(2))\n#model.add(Dropout(.2))\nmodel.add(Conv1D(64, kernel_size=3, padding='same', activation='relu'))\nmodel.add(AveragePooling1D(2))\n#model.add(Dropout(.2))\nmodel.add(Flatten())\nmodel.add(Dense(30, activation='relu'))\nmodel.add(Dropout(.2))\nmodel.add(Dense(1, activation='linear'))\nmodel.compile(loss='mse', optimizer='adam')\nmodel.summary()\n\n# Callbacks\ncheckpts = ModelCheckpoint('.\/'+ticker.upper()+'_Conv1d.h5', verbose=1, save_best_only=True)\nearly = EarlyStopping(patience=5)\ncallback_list = [checkpts, early]","0f184656":"model.fit(X_train, y_train, validation_split=.2, epochs=200, callbacks=callback_list)","1aac08a0":"preds = model.predict(X_test)\npreds = scaler.inverse_transform(preds)\n\ndf.plot()\nplt.plot(df.index[-int(len(df)*.2):],preds, label='Predictions')\nplt.legend()","37696946":"tomorrow_pred = model.predict(scaled_df[-60:].reshape(1,60,features))\ntomorrow_pred = scaler.inverse_transform(tomorrow_pred)\n\nprint(f'Price today and tomorrow are {df.iloc[-1,0],tomorrow_pred[0][0]} respectively')","27686b4c":"# Preprocess","ba085982":"# Data","7bef8185":"# Model","ddfd96b6":"# Results","db870355":"# Conv1d","c5db504c":"Here, we shall try to predict some stock for the next day.\n\n# Imports"}}