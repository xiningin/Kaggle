{"cell_type":{"3e518771":"code","6b0226f1":"code","9cdc06a3":"code","c9f5a675":"code","e16aef31":"code","acc71b9a":"code","4afdf59b":"code","97d6d886":"code","fdf68b43":"code","42f915e9":"code","17036dc5":"code","03413fea":"code","5db95297":"code","627211cc":"code","63a7ccdc":"code","69fa2ec3":"code","63a972ef":"code","4843c009":"code","c442526b":"code","053ba3fb":"code","a62b74c5":"code","cd002022":"code","fa73673a":"code","01397a57":"code","9fed8325":"code","144fe031":"code","ddeb842b":"code","bade27ca":"code","a55605a8":"code","ed978074":"code","5060f5d8":"code","53ac94aa":"code","a09b166b":"code","5c5344a8":"code","835f3be8":"code","e149e9ae":"code","6cef8715":"code","90e5eefe":"code","86ec7c66":"code","a7a6784f":"code","78be1d5e":"code","7aaf4b07":"code","c45f10d2":"code","8635e557":"code","81ed1a1a":"code","a58d85aa":"code","39318d62":"code","d76ecfcd":"code","5a45e23c":"code","4aa4e5dd":"code","1f7210f0":"code","b2811972":"code","a74218a5":"code","5c9519d1":"code","cfeb74ba":"code","8e62efee":"code","b3adc758":"code","b198d8ca":"code","25014417":"code","f7263f8c":"code","9b8333d6":"code","6db3907f":"code","b0727201":"code","6933c660":"code","83b6c850":"code","83e23821":"code","a69d6d56":"code","b72faf84":"code","734ccf66":"code","45dd7b1b":"code","3f538247":"code","88e10498":"code","20723754":"code","4e87c604":"code","b2877db4":"code","eda7a60a":"code","9d7261c8":"code","bea165f7":"code","8f1c4989":"code","94900670":"code","8fbc2613":"code","2597fe03":"code","04eaf6f9":"code","ac2efa94":"code","ad298de7":"code","c4f6d819":"code","25f8387b":"code","d68f8535":"code","bd08a2f2":"code","8d8c1152":"code","8f43ae5f":"code","4860230f":"code","35257b4b":"code","aa69b626":"code","5aef6525":"code","7e28d48d":"code","59741fed":"code","2e324749":"code","57894105":"code","e1821a92":"code","cf61f2cd":"code","56478178":"code","bfa509d2":"code","8263ab9f":"code","e3baa6ba":"markdown","96382e17":"markdown","e92fc7f5":"markdown","95d56618":"markdown","5825a55b":"markdown","fc1a525c":"markdown","c747fc41":"markdown","d79dabbc":"markdown","d6fe0ff2":"markdown","ab403296":"markdown","2260f9a6":"markdown","008c4c41":"markdown","01de71ba":"markdown","d9b4149b":"markdown","565b4eb8":"markdown","6b3d199c":"markdown","15fe70e4":"markdown","aca47cb9":"markdown","35e8e657":"markdown"},"source":{"3e518771":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\n%matplotlib inline","6b0226f1":"data = pd.read_csv('..\/input\/train.csv')","9cdc06a3":"data.head(10)","c9f5a675":"data.tail(10)","e16aef31":"sns.pairplot(data,x_vars=['Age','Fare','Pclass'],y_vars='Survived',kind='reg',size=7)","acc71b9a":"data.columns","4afdf59b":"data.shape","97d6d886":"data.isna().sum()","fdf68b43":"data.groupby('Age').Survived.value_counts(dropna=False)","42f915e9":"data.Age.describe()","17036dc5":"data.Age.agg(['min','max','mean','std'])","03413fea":"data.Age.agg(['min','max','mean','std']).plot(kind = 'barh')","5db95297":"age_survival = data.loc[data.Survived == 1,'Age'].value_counts().sort_index().plot(figsize=(13,8))\n\nage_survival.set_xlabel('Age')\nage_survival.set_ylabel('Survival')","627211cc":"data.loc[(data['Survived']==1) & (data['Sex']=='female') & (data['Age'])]","63a7ccdc":"sns.boxplot(x =data.Sex =='female',y=data['Survived'])","69fa2ec3":"data.loc[data.Sex=='female','Survived'].value_counts()","63a972ef":"data.loc[(data['Survived']==1) & (data['Sex']=='female') & (data['Age'])].mean()","4843c009":"sns.pairplot(data,x_vars='Age',y_vars='Survived',kind='reg',size=10)","c442526b":"pd.crosstab(data.Survived,data.Embarked).plot(kind = 'bar')","053ba3fb":"data.Embarked.value_counts(dropna=False)","a62b74c5":"data['Embarked'] = data.Embarked.map({'S':0,'C':1,'Q':2})","cd002022":"data.Embarked.value_counts()","fa73673a":"data['Embarked'] = data.Embarked.fillna(value = 0.0)","01397a57":"data.Embarked.value_counts(dropna=False)","9fed8325":"data.Embarked.shape","144fe031":"data.head()","ddeb842b":"data['Embarked'].head()","bade27ca":"data.Embarked.shape","a55605a8":"data.Embarked.isna().sum()","ed978074":"sns.pairplot(data,x_vars='Embarked',y_vars='Survived',kind='reg',size=10)","5060f5d8":"data.Cabin.value_counts().head()","53ac94aa":"data[(data.Survived ==1) & (data.Cabin)]","a09b166b":"data.loc[data['Age'] <= 15,'Age'] = 0 \n\ndata.loc[(data['Age'] > 15) & (data['Age'] <= 30), 'Age'] = 1\n\ndata.loc[(data['Age'] > 30) & (data['Age'] <= 50), 'Age'] = 2\n\ndata.loc[(data['Age'] > 50),'Age'] = 3","5c5344a8":"data.Age.head()","835f3be8":"data.Age.isna().sum()","e149e9ae":"data.dropna(subset=['Age'],axis ='index',how='all',inplace=True)","6cef8715":"data.Age.isna().sum()","90e5eefe":"data.Age.value_counts(dropna=False)","86ec7c66":"data.Age.isna().sum()","a7a6784f":"sns.pairplot(data,x_vars='Age',y_vars='Survived',size=10,kind='reg')","78be1d5e":"data.head(10)","7aaf4b07":"data.Age.isna().sum()","c45f10d2":"pd.crosstab(data.Survived,data.Sex).plot(kind='bar')","8635e557":"data['Sex'] = data.Sex.map({'female':0,'male':1})","81ed1a1a":"data.Sex.values","a58d85aa":"data.head(10)","39318d62":"data.isna().sum()","d76ecfcd":"data.head(100)","5a45e23c":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score\nimport seaborn as sns","4aa4e5dd":"feature_cols = ['Pclass','Sex','Age','Embarked','SibSp','Fare']","1f7210f0":"sns.pairplot(data,x_vars=feature_cols,y_vars = 'Survived',kind = 'reg',size = 4,aspect=0.9)","b2811972":"feature_cols = ['Pclass','Sex','Age','Embarked','SibSp','Fare']\n\nX = data[feature_cols]\n\ny = data.Survived","a74218a5":"print(type(X))\nprint(X.shape)","5c9519d1":"print(type(y))\nprint(y.shape)","cfeb74ba":"#Instantiate the Model\n\nlinreg = LinearRegression()","8e62efee":"# Fit the model \n\nlinreg.fit(X,y)","b3adc758":"linreg.intercept_","b198d8ca":"linreg.coef_","25014417":"feature_list = list(zip(feature_cols,linreg.coef_))","f7263f8c":"feature_list","9b8333d6":"# 10 fold cross validation with all 4 features\n\nlinreg = LinearRegression()\n\nscore = cross_val_score(linreg,X,y,cv=10,scoring='neg_mean_squared_error')","6db3907f":"score","b0727201":"# Make the scores +\n\nmsc_sc = -score\nprint(msc_sc)","6933c660":"# Calculate te RMSE\n\nrmse = np.sqrt(msc_sc)\nprint(rmse)","83b6c850":"## Print the mean of RMSE\n\nprint(rmse.mean())","83e23821":"# Load the test set \n\ntest = pd.read_csv('..\/input\/test.csv')","a69d6d56":"test.head()","b72faf84":"test['Sex'] = test.Sex.map({'female':0,'male':1})","734ccf66":"test.Sex.value_counts()","45dd7b1b":"test.Embarked.value_counts()","3f538247":"test['Embarked'] = test.Embarked.map({'S':0,'C':1,'Q':2})","88e10498":"test.Embarked.value_counts()","20723754":"test.loc[test['Age'] <= 15,'Age'] = 0 \n\ntest.loc[(test['Age'] > 15) & (test['Age'] <= 30), 'Age'] = 1\n\ntest.loc[(test['Age'] > 30) & (test['Age'] <= 50), 'Age'] = 2\n\ntest.loc[(test['Age'] > 50),'Age'] = 3","4e87c604":"test.isna().sum()","b2877db4":"test.Age.dropna(axis='index',how='any',inplace=True)","eda7a60a":"test['Age'] = test.Age.isna().sum()","9d7261c8":"test.isna().sum()","bea165f7":"feature_cols = ['Pclass','Sex','Age','Embarked','SibSp']\n\nX_test = test[feature_cols]","8f1c4989":"linreg = LinearRegression()\n\nlinreg.fit(X,y)","94900670":"y_pred = linreg.predict(X)","8fbc2613":"y_pred[X_test]","2597fe03":"from sklearn.linear_model import LogisticRegression","04eaf6f9":"feature_cols = ['Pclass','Sex','Age','Embarked','SibSp','Fare']\n\nX = data[feature_cols]\n\ny = data.Survived","ac2efa94":"logreg = LogisticRegression()\n\nlogreg.fit(X,y)","ad298de7":"score = cross_val_score(logreg,X,y,cv=10,scoring='neg_mean_squared_error')\n\nscore","c4f6d819":"mse = - score","25f8387b":"## NOw calculate the RMSE\n\nrmse = np.sqrt(mse)\nprint(rmse)","d68f8535":"test_cols = ['Pclass','Sex','Age','Embarked','SibSp','Fare']\n\nX_test = test[test_cols]","bd08a2f2":"X","8d8c1152":"X_test","8f43ae5f":"X_test.isna().sum()","4860230f":"X_test.dtypes","35257b4b":"X_test.Fare.fillna(X_test.Fare.mean(),inplace=True)","aa69b626":"X_test.isna().sum()","5aef6525":"logreg = LogisticRegression()\n\nlogreg.fit(X,y)","7e28d48d":"y_pred = logreg.predict(X_test)","59741fed":"y_pred","2e324749":"pd.get_option('display.max_rows')","57894105":"pd.set_option('display.max_rows',None)","e1821a92":"X_test.shape","cf61f2cd":"test.PassengerId.shape","56478178":"# Create a pandas Dataframe\n\npd.DataFrame({'PasssngerId':test.PassengerId,'Survived':y_pred})","bfa509d2":"# now save PassengerId columns as the index\n\npd.DataFrame({'PasssngerId':test.PassengerId,'Survived':y_pred}).set_index('PasssngerId')","8263ab9f":"# Finally Convert the file to a CSV file \n\npd.DataFrame({'PassengerId':test.PassengerId,'Survived':y_pred}).set_index('PassengerId').to_csv('Titaanic log reg2.csv')","e3baa6ba":"### Categorizing the Age column and create dummy variables. ","96382e17":"### Quick look at the data","e92fc7f5":"### Create Dummy Variables for Sex Column","95d56618":"#### Cabin","5825a55b":"### Select X","fc1a525c":"## Fit and test a classification model. ","c747fc41":"### Create the kaggle Submission file","d79dabbc":"### Predict from the loaded test set","d6fe0ff2":"#### Age","ab403296":"### Check for any Null values ","2260f9a6":"### Further look into the data\n\nLook into the Age column, Cabin Column and the embarked columns. ","008c4c41":"#### Prepare the data. ","01de71ba":"### Make Predictions","d9b4149b":"#### Embarked","565b4eb8":"### Create a model using Linear Regression","6b3d199c":"### Check the cross Validation score","15fe70e4":"### check the cross validation score. ","aca47cb9":"### Read the data and save to a dataframe","35e8e657":"I have decided to Drop the Cabin Column because it has too many missing values "}}