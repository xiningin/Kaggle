{"cell_type":{"6e85b289":"code","af29e314":"code","cc76a61b":"code","cdf88971":"code","54fe49d0":"code","b84ccce2":"code","1f9055d8":"code","f96fc3e8":"code","99824472":"code","fd814381":"code","0cfab703":"code","001a7783":"code","09453884":"code","ca75c140":"code","b91e0c60":"code","234a44eb":"code","d0ea9f48":"code","ae91c6ce":"code","a367e339":"code","dfb90781":"code","e778f0e9":"code","d4a36226":"code","24a36e09":"code","a85d66f2":"code","8f13045a":"code","28f899b9":"code","952d7e5f":"code","36ced917":"code","7ca22017":"code","2a1f9281":"code","2e16e482":"code","b4e95450":"code","3c6ec37c":"code","2d67201c":"markdown","5ba25ae0":"markdown","54c6e93d":"markdown","f1f540ed":"markdown","b4edb9c2":"markdown","37b81423":"markdown","b3d5757a":"markdown"},"source":{"6e85b289":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nfrom xgboost import plot_importance, plot_tree\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, mean_squared_log_error\nfrom sklearn.model_selection import train_test_split\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","af29e314":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv') \ntrain = train.dropna(axis=0, subset=['SalePrice'])\ntrain.info()\ntrain.head()","cc76a61b":"train.isnull().sum().sort_values().tail(20)","cdf88971":"#Remove the most missing values\nlist_to_delete = ['Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature']\ntrain = train.drop(list_to_delete, axis = 1)","54fe49d0":"def sample_research(data, target_column_name = 'SalePrice', \\\n                    threshold_corr_min_to_del = -0.1, threshold_corr_max_to_del = 0.1):\n    df = pd.DataFrame()\n    df['Number_missing_values'] = data.isnull().sum()\n    df['Number_unique_values'] = data.nunique()\n    df['dtype'] = data.dtypes\n    df['Correlation_with_target_' + target_column_name] = train.corr()['SalePrice']\n    df['Recomendate_to_delete'] = (df['Number_missing_values'] >= train.shape[0] * 0.5)                       | \\\n                                 ((df['Number_unique_values'] >= 30)                                          & \\\n                                  (df['dtype'] == 'object'))                                                  | \\\n                                 ((df['Correlation_with_target_' + target_column_name] < threshold_corr_max)  & \\\n                                  (df['Correlation_with_target_' + target_column_name] > threshold_corr_min))\n    return df\n\ndef plot_scatter_res(y_valid, vaild_res_y):\n    ax = plt.axes(aspect='equal')\n    plt.scatter(y_valid, vaild_res_y, c = 'green', marker = '.')\n    ax.set_title('Scatter plot')\n    plt.xlabel('True Values')\n    plt.ylabel('Predictions')\n    lims = [0, 1000000]\n    plt.xlim(lims)\n    plt.ylim(lims)\n    plt.plot(lims, lims);","b84ccce2":"sample_data = sample_research(train)\nsample_data","1f9055d8":"train[train['GarageYrBlt'].isnull() & \\\n      train['GarageQual'].isnull()  & \\\n      train['GarageCond'].isnull()  & \\\n      train['GarageType'].isnull()  & \\\n      train['GarageFinish'].isnull()]['GarageType'].size","f96fc3e8":"#Let's take a closer look at distributions\nsns.jointplot(x = 'LotFrontage', y = 'SalePrice', data = train);","99824472":"print('Q1 = {}'.format(int(train['YearBuilt'].quantile(0.25))))\nprint('Q2 = {}'.format(int(train['YearBuilt'].quantile(0.5))))\nprint('Q3 = {}'.format(int(train['YearBuilt'].quantile(0.75))))\nprint('Q4 = {}'.format(int(train['YearBuilt'].quantile(1.))))\nsns.distplot(train['YearBuilt'], bins=30);","fd814381":"sns.distplot(train['YearRemodAdd'], bins=30); ","0cfab703":"train[train['YearRemodAdd'] < train['YearBuilt']]['YearBuilt'].count()","001a7783":"sns.jointplot(x = 'YearBuilt', y = 'SalePrice', data = train);      ","09453884":"sns.distplot(train['LotFrontage'], bins=15);","ca75c140":"sns.distplot(train['SalePrice'], bins=100);","b91e0c60":"sns.catplot(x = 'Electrical', kind = 'count', data = train);","234a44eb":"#Need to look at categorical signs\ncaterigal_columns = train.select_dtypes(include=[\"object\"]).columns.values\nfor col in caterigal_columns:\n    print(\"Count unique values column {}: {}\".format(col, len(pd.unique(train[col]))), end = '\\n')\n    print(\"Matrix unique values: {}\".format(pd.unique(train[col])), end = '\\n\\n')","d0ea9f48":"#Let's look at the correlation\ntrain.select_dtypes(include = ['float64', 'int64']).iloc[:,1:].corr()['SalePrice'].sort_values(axis=0)","ae91c6ce":"#Let's deal with Garage\ntrain['GarageYrBlt'].fillna('NaN', inplace = True)\ntrain['GarageQual'].fillna('NaN', inplace = True)\ntrain['GarageCond'].fillna('NaN', inplace = True)\ntrain['GarageType'].fillna('NaN', inplace = True)\ntrain['GarageFinish'].fillna('NaN', inplace = True)\n#Let's deal with electricity\ntrain.loc[train['Electrical'].isnull(), 'Electrical'] = train['Electrical'].mode()\ntrain['GarageBlt'] = 1\ntrain.loc[train['GarageYrBlt'] == 'NaN', 'GarageBlt'] = 0\ntrain['GarageBlt'] = train['GarageBlt'].astype('uint8')\nlist_to_delete.append('GarageYrBlt')\ntrain = train.drop('GarageYrBlt', axis = 1)","a367e339":"caterigal_columns = train.select_dtypes(include=[\"object\"]).columns.values\ntrain = pd.get_dummies(train, columns = caterigal_columns) #one-hot encoding","dfb90781":"#Make features\ndef category_year(YearBuilt):\n    #Quantilies\n    if YearBuilt <= 1954:\n        return 0\n    elif YearBuilt <= 1954 and YearBuilt > 1973:\n        return 1\n    elif YearBuilt >= 1973 and YearBuilt < 2000:\n        return 2\n    else:\n        return 3\n\ntrain['YearBuilt_category'] = train['YearBuilt'].apply(category_year).astype('uint8')","e778f0e9":"train.corr()['SalePrice'].sort_values(axis=0).tail(5)","d4a36226":"sample_data = sample_research(train)\nsample_data.head()","24a36e09":"lst_del_temp = sample_data[sample_data['Recomendate_to_delete'] == True].index.values\nlist_to_delete.extend(lst_del_temp)\ntrain = train.drop(lst_del_temp, axis = 1)","a85d66f2":"X_train = train.drop('SalePrice', axis = 1)\nY_train = train['SalePrice']","8f13045a":"x_train, x_valid, y_train, y_valid = train_test_split(X_train, Y_train, test_size=0.2, random_state=0)\n\nxgb = XGBClassifier(n_estimators = 220, random_state=0, eval_metric='rmse', n_jobs = -1)\nxgb.fit(x_train, y_train)","28f899b9":"#Interpreting the model\n''' plt.bar(range(len(xgb.feature_importances_)), xgb.feature_importances_)\n    plt.show() '''\nplot_importance(xgb, height = 1)","952d7e5f":"for num_trees in range(3):\n    plot_tree(xgb, num_trees = num_trees)","36ced917":"vaild_res_y = xgb.predict(x_valid)\nprint('Mean Absolute Error Accuracy: {:.5f}'.format(mean_absolute_error(vaild_res_y, y_valid)))\nprint('Mean Squared Error Accuracy: {:.5f}'.format(np.sqrt(mean_squared_error(vaild_res_y, y_valid))))\nprint('Mean Squared Log Error Accuracy: {:.5f}'.format(np.sqrt(mean_squared_log_error(vaild_res_y, y_valid))))\n#Construct result DataFrame\nresult_df = pd.DataFrame()\nresult_df['Real_value'] = y_valid\nresult_df['Predict_value'] = vaild_res_y\nresult_df['Difference'] = np.abs(y_valid - vaild_res_y)\nresult_df.sort_values(by = 'Difference', ascending = False).head()","7ca22017":"plot_scatter_res(y_valid, vaild_res_y)","2a1f9281":"test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv') \ntest.head()","2e16e482":"list_to_delete","b4e95450":"sample_test = sample_research(test.drop(list_to_delete, axis = 1))\nsample_test['Number_missing_values'].sort_values().tail(20)","3c6ec37c":"predict_submission = pd.DataFrame()\npredict_submission['Id'] = test['Id']\npredict_submission['SalePrice'] = xgb.predict(test.drop(list_to_delete. axis = 1))","2d67201c":"Let's look at the missing values","5ba25ae0":"# Predict and save results","54c6e93d":"# Feature engineering","f1f540ed":"# Feature Selection","b4edb9c2":"## Functions","37b81423":"# EDA (Exploratory data analysis)","b3d5757a":"# Modeling"}}