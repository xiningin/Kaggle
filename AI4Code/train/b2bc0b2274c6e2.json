{"cell_type":{"8e8adf56":"code","e1642e5c":"code","3a766f3d":"code","7023802a":"code","b6e75c25":"code","bf4f4f06":"code","e688dbe8":"code","55eea69f":"code","cfbcc11d":"code","7e5b9744":"code","741d4aa1":"code","1139e6e7":"code","bed3f1a0":"code","ae7d5758":"code","082462ee":"code","2e189366":"code","83bcd4fd":"code","3c571d15":"code","c07b1326":"code","98c2d248":"code","3f7bec84":"code","4c11d759":"code","3df73e3f":"code","ea98009b":"code","b8a20c0a":"code","e23c2628":"code","090346fc":"code","5ce52ebc":"markdown","ed1313cc":"markdown","bb243560":"markdown","943b1ffe":"markdown","dc4842b8":"markdown","39b54a47":"markdown","62bedca2":"markdown","4199bfa6":"markdown","efb008e2":"markdown","371aa1e1":"markdown","9ffcdbf9":"markdown","64c788b0":"markdown","00317603":"markdown","00f69c78":"markdown"},"source":{"8e8adf56":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import PathPatch\nfrom matplotlib.patches import Patch\nimport matplotlib.patches as patches\nimport collections\nimport seaborn as sns\nimport plotly\n\ncolor = sns.color_palette()","e1642e5c":"df20 = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv', keep_default_na=False)\ndf19 = pd.read_csv('\/kaggle\/input\/kaggle-survey-2019\/multiple_choice_responses.csv', keep_default_na=False)","3a766f3d":"df20.head()","7023802a":"cols = list(df20.columns)\nunique = list(set(['_'.join(x.split('_')[0:2]) for x in cols if 'A' in x or 'B' in x]))+list(set([x.split('_')[0] for x in cols if 'A' not in x and 'B' not in x and 'Part' in x]))\ncol_breakdown = {}\nfor col in unique:\n    tmp = [c for c in cols if c.startswith(col)]\n    col_breakdown[col] = tmp\ncol_frozen = frozenset(col_breakdown.keys())\ndef clean(row):\n    cleaned = []\n    for col in col_frozen:\n        tmp = [x for x in list(row[col_breakdown[col]]) if x!='']\n        cleaned.append(tmp)\n#     print(len(cleaned))\n    return pd.Series(cleaned)\ndf20[list(col_frozen)] = df20.apply(clean, axis=1)","b6e75c25":"cols = list(df19.columns)\nunique = list(set(['_'.join(x.split('_')[0:2]) for x in cols if 'A' in x or 'B' in x]))+list(set([x.split('_')[0] for x in cols if 'A' not in x and 'B' not in x and 'Part' in x]))\ncol_breakdown = {}\nfor col in unique:\n    tmp = [c for c in cols if c.startswith(col)]\n    col_breakdown[col] = tmp\ncol_frozen = frozenset(col_breakdown.keys())\ndef clean(row):\n    cleaned = []\n    for col in col_frozen:\n        tmp = [x for x in list(row[col_breakdown[col]]) if x!='']\n        cleaned.append(tmp)\n#     print(len(cleaned))\n    return pd.Series(cleaned)\ndf19[list(col_frozen)] = df19.apply(clean, axis=1)","bf4f4f06":"qs_20 = ['Q1','Q2','Q3', 'Q4','Q5','Q6','Q10','Q11','Q12','Q13','Q20','Q21','Q23','Q25','Q26_A','Q26_B', 'Q27_A','Q27_B','Q28_A','Q28_B','Q29_A','Q29_B','Q30','Q31_A','Q31_B','Q32','Q34_A','Q34_B','Q38']\nqs_19 = ['Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q11','Q14','Q17','Q22','Q29','Q30','Q31','Q32','Q33','Q34']","e688dbe8":"d20 = df20[qs_20][1:]\nd19 = df19[qs_19][1:]","55eea69f":"tmp19 = d19[d19['Q5']!='Student']\nprint('No entry: {}'.format(len([x for x in list((tmp19['Q29'])) if x==[-1] or x==['-1'] or 'None' in x])))\nprint('Total: {}'.format(len(tmp19)))\nprint('Cloud answered: {}'.format(len([x for x in list((tmp19['Q29'])) if x!=[-1] and x!=['-1'] and 'None' not in x])))\ntotal_cloud_19 = len([x for x in list((tmp19['Q29'])) if x!=[-1] and x!=['-1'] and 'None' not in x])\nnum_cloud_user_19 = collections.Counter([len(x)-1 for x in list((tmp19['Q29'])) if x!=[-1] and x!=['-1'] and 'None' not in x])\np_cloud_19 = round(float(total_cloud_19*100\/len(tmp19)),2)\nprint('%respondents using Cloud: {}'.format(p_cloud_19))","cfbcc11d":"tmp20 = d20[d20['Q5']!='Student']\nprint('No entry: {}'.format(len([x for x in list((tmp20['Q26_A'])) if x==[] or x==['None']])))\nprint('Total: {}'.format(len(tmp20)))\nprint('Cloud answered: {}'.format(len([x for x in list((tmp20['Q26_A'])) if x!=[] and x!=['None']])))\ntotal_cloud_20 = len([x for x in list((tmp20['Q26_A'])) if x!=[] and x!=['None']])\nnum_cloud_user_20 = collections.Counter([len(x) for x in list((tmp20['Q26_A'])) if x!=[] and x!=['None']])\np_cloud_20 = round(float(total_cloud_20*100\/len(tmp20)),2)\nprint('%respondents using Cloud: {}'.format(p_cloud_20))","7e5b9744":"x = ['2019', '2020']\ny = [p_cloud_19, p_cloud_20]\nfig = plt.figure(figsize = (6, 6))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\nfor x_, y_ in zip(x, y):\n    # make a scatter plot\n    ax.bar(x_, y_, color = \"red\" if y_ < 32 else \"green\", alpha = 0.3)\n    \n    ax.text(x_, y_ + 0.5, round(y_, 1), horizontalalignment='center')\n    \n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# change the ylim\n# ax.set_ylim(0, 70)\n\n# rotate the x ticks 90 degrees\nax.set_xticklabels(x, rotation = 90)\n\n# add an y label\nax.set_ylabel(\"% respondents who use the Cloud\")\n\n# set a title\nax.set_title(\"Distribution of cloud users out over the years\");","741d4aa1":"roles19 = set([x.strip() for x in list(d19['Q5'][1:])])\nroles20 = set([x.strip() for x in list(d20['Q5'][1:])])\nroles = roles19.intersection(roles20)\n\nfig = plt.figure(figsize=(20,20))\ni = 1\nfor role in roles:\n#     print(role)\n    total_cloud_19 = len([x for x in list((d19[d19['Q5']==role][1:]['Q29'])) if x!=[-1] and x!=['-1'] and 'None' not in x])\n    p_cloud_19 = round(float(total_cloud_19*100\/len(d19[d19['Q5']==role])),2)\n#     print('%respondents using Cloud: {}'.format(p_cloud_19))\n    total_cloud_20 = len([x for x in list((d20[d20['Q5']==role][1:]['Q26_A'])) if x!=[] and x!=['None']])\n    p_cloud_20 = round(float(total_cloud_20*100\/len(d20[d20['Q5']==role])),2)\n#     print('%respondents using Cloud: {}'.format(p_cloud_20))\n    x = ['2019', '2020']\n    y = [p_cloud_19, p_cloud_20]\n    totals = [total_cloud_19, total_cloud_20]\n    denoms = [len(d19[d19['Q5']==role]), len(d20[d20['Q5']==role])]\n    if y[0]!=0:\n        ax = fig.add_subplot(4,4,i)\n        for x_, y_, t_, d_ in zip(x, y, totals, denoms):\n        # make a scatter plot\n            ax.bar(x_, y_, color = \"red\" if x_=='2019' else \"green\", alpha = 0.3)\n\n            ax.text(x_, y_\/2, '{}'.format(round(y_, 1)), horizontalalignment='center')\n            ax.text(x_, y_\/3, '{}\/{}'.format(t_, d_), horizontalalignment='center')\n\n        # ----------------------------------------------------------------------------------------------------\n        # prettify the plot\n        # change the ylim\n    #     ax.set_ylim(0, 30)\n\n        # rotate the x ticks 90 degrees\n    #     ax.set_xticklabels(x, rotation = 90)\n\n        # add an y label\n        ax.set_ylabel(\"% respondents who use the Cloud\")\n\n        # set a title\n        ax.set_title(\"{}\".format(role))\n        i+=1\nfig.suptitle('Distribution of % cloud users for the role: ')","1139e6e7":"q_19 = 'Q6'\nq_20 = 'Q20'\nroles19 = set([x.strip() for x in list(d19[q_19][1:])])\nroles20 = set([x.strip() for x in list(d20[q_20][1:])])\nroles = [x for x in list(roles19.intersection(roles20)) if x!='']\n\nfig = plt.figure(figsize=(20,20))\ni = 1\nfor role in roles:\n#     print(role)\n    total_cloud_19 = len([x for x in list((d19[d19[q_19]==role][1:]['Q29'])) if x!=[-1] and x!=['-1'] and 'None' not in x])\n    p_cloud_19 = round(float(total_cloud_19*100\/len(d19[d19[q_19]==role])),2)\n#     print('%respondents using Cloud: {}'.format(p_cloud_19))\n    total_cloud_20 = len([x for x in list((d20[d20[q_20]==role][1:]['Q26_A'])) if x!=[] and x!=['None']])\n    p_cloud_20 = round(float(total_cloud_20*100\/len(d20[d20[q_20]==role])),2)\n#     print('%respondents using Cloud: {}'.format(p_cloud_20))\n    x = ['2019', '2020']\n    y = [p_cloud_19, p_cloud_20]\n    totals = [total_cloud_19, total_cloud_20]\n    denoms = [len(d19[d19[q_19]==role]), len(d20[d20[q_20]==role])]\n    if y[0]!=0:\n        ax = fig.add_subplot(4,4,i)\n        for x_, y_, t_, d_ in zip(x, y, totals, denoms):\n        # make a scatter plot\n            ax.bar(x_, y_, color = \"red\" if x_=='2019' else \"green\", alpha = 0.3)\n\n            ax.text(x_, y_\/2, '{}'.format(round(y_, 1)), horizontalalignment='center')\n            ax.text(x_, y_\/3, '{}\/{}'.format(t_, d_), horizontalalignment='center')\n\n        # ----------------------------------------------------------------------------------------------------\n        # prettify the plot\n        # change the ylim\n    #     ax.set_ylim(0, 30)\n\n        # rotate the x ticks 90 degrees\n    #     ax.set_xticklabels(x, rotation = 90)\n\n        # add an y label\n        ax.set_ylabel(\"% respondents who use the Cloud\")\n\n        # set a title\n        ax.set_title(\"{}\".format(role))\n        i+=1\nfig.suptitle('Distribution of % cloud users for the number of employees: ')","bed3f1a0":"x19 = list(num_cloud_user_19.keys())\ny19 = list(num_cloud_user_19.values())\n# instantiate the figure\nfig = plt.figure(figsize = (16,6))\nax19 = fig.add_subplot(1,3,1)\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\nfor x_, y_ in zip(x19, y19):\n    # this is very cool, since we can pass a function to matplotlib\n    # and it will plot the color based on the result of the evaluation\n    ax19.bar(x_, y_, color = color[9], alpha = 0.5)\n#     ax19.bar(x_, y_, color = \"red\" if y_ < 100 else \"green\", alpha = 0.3)\n    \n     # add some text\n    ax19.text(x_, y_ + 0.3, round(y_, 1), horizontalalignment = 'center')\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# rotate the x ticks 90 degrees\n# ax19.set_xticklabels(x, rotation=90)\n\n# add an y label\nax19.set_ylabel(\"Number of respondents\")\n\n# add an x label\nax19.set_xlabel(\"Number of Cloud platforms\")\n\n# set a title\nax19.set_title(\"Bar Chart for Number of Cloud platforms by respondents(2019)\");\n\nx20 = list(num_cloud_user_20.keys())\ny20 = list(num_cloud_user_20.values())\n\nax20 = fig.add_subplot(1,3,3)\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\nfor x_, y_ in zip(x20, y20):\n    # this is very cool, since we can pass a function to matplotlib\n    # and it will plot the color based on the result of the evaluation\n    ax20.bar(x_, y_, color = color[9], alpha = 0.5)\n#     ax20.bar(x_, y_, color = \"red\" if y_ < 100 else \"green\", alpha = 0.3)\n    \n     # add some text\n    ax20.text(x_, y_ + 0.3, round(y_, 1), horizontalalignment = 'center')\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# rotate the x ticks 90 degrees\n# ax20.set_xticklabels(x, rotation=90)\n\n# add an y label\nax20.set_ylabel(\"Number of respondents\")\n\n# add an x label\nax20.set_xlabel(\"Number of Cloud platforms\")\n\n# set a title\nax20.set_title(\"Bar Chart for Number of Cloud platforms by respondents(2020)\");\n","ae7d5758":"def flag_cloud_19(row):\n    x = row['Q29']\n    if x!=[-1] and x!=['-1'] and 'None' not in x and row['Q6']!='Student':\n        return pd.Series([True])\n    else:\n        return pd.Series([False])\n\ndef flag_cloud_20(row):\n    x = row['Q26_A']\n    if x!=[] and x!=['None'] and row['Q6']!='Student':\n        return pd.Series([True])\n    else:\n        return pd.Series([False])\n    \nd19[['cloud_true']] = d19.apply(flag_cloud_19, axis=1)\nd20[['cloud_true']] = d20.apply(flag_cloud_20, axis=1)","082462ee":"cloudwise_20 = collections.Counter(sum(list(d20[d20.cloud_true==True]['Q26_A']), []))\ntotal_cloud_20 = len(d20[d20.cloud_true==True])\nfor key in cloudwise_20:\n    cloudwise_20[key]\/=total_cloud_20\/100","2e189366":"cloudwise_19 = collections.Counter(sum(list(d19[d19.cloud_true==True]['Q29']), []))\ntotal_cloud_19 = len(d19[d19.cloud_true==True])\nfor key in cloudwise_19:\n    cloudwise_19[key]\/=total_cloud_19\/100","83bcd4fd":"clouds = set(cloudwise_19.keys()).intersection(cloudwise_20.keys())\nclouds_diff = {cloud:cloudwise_20[cloud]-cloudwise_19[cloud] for cloud in clouds}\nclouds_diff = dict(sorted(clouds_diff.items(), key=lambda x: x[1]) )","3c571d15":"vals = list(clouds_diff.values())\nkeys = list(clouds_diff.keys())\n\nfig = plt.figure(figsize = (8, 8))\nax = fig.add_subplot()\ncolors = ['Red' if v<0 else 'Green' for v in vals]\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# plot horizontal lines from the origin to each data point\nax.hlines(y = keys, \n          xmin = 0,\n          xmax = vals,\n          color = colors,\n          alpha = 0.6)\n\n# # plot the dots\nax.scatter(x = vals,\n          y = keys,\n          s = 100,\n          color = colors,\n          alpha = 0.6)\ny = [round(x,2) for x in vals]\nx = keys\nfor i in range(len(clouds_diff)):\n    if y[i]>0:\n        ax.annotate('{}%'.format(y[i]), (y[i]+0.3, x[i]), alpha=0.8)\n    else:\n        ax.annotate('{}%'.format(y[i]), (y[i]-0.8, x[i]), alpha=0.8)\nax.set_title(\"Diverging Lollipop of growth of Cloud platforms from 2019 to 2020\")\n\n# autoscale\nax.autoscale_view()\n\n# change x lim\nax.set_xlim(-2, 7)\n\n# set labels\nax.set_xlabel(\"% change\")\nax.set_ylabel(\"Cloud platform\")\n\n# change the spines to make it nicer\nax.spines[\"right\"].set_color(\"None\")\nax.spines[\"top\"].set_color(\"None\")\n\n# add a grid\nax.grid(linestyle='--', alpha=0.5);","c07b1326":"cloud_ml_products_19 = collections.Counter(sum(d19['Q32'], []))\ntotal_cloud_19 = len(d19[d19.cloud_true==True])\nfor key in cloud_ml_products_19:\n    cloud_ml_products_19[key]\/=total_cloud_19\/100\n\ncloud_ml_products_mapping = {\n    'Google Cloud Machine Learning Engine': 'Google Cloud AI Platform \/ Google Cloud ML Engine',\n    'Google Cloud Vision': 'Google Cloud Vision AI',\n    \n}\n\nfor old in cloud_ml_products_mapping:\n    cloud_ml_products_19[cloud_ml_products_mapping[old]] = cloud_ml_products_19.pop(old)","98c2d248":"cloud_ml_products_20 = collections.Counter(sum(d20[d20.cloud_true==True]['Q28_A'], []))\ntotal_cloud_20 = len(d20[d20.cloud_true==True])\nfor key in cloud_ml_products_20:\n    cloud_ml_products_20[key]\/=total_cloud_20\/100\nfor key in cloud_ml_products_20:\n    cloud_ml_products_20[key.strip()] = cloud_ml_products_20.pop(key)","3f7bec84":"cloud_ml_products = set(cloud_ml_products_19.keys()).intersection(cloud_ml_products_20.keys())\ncloud_ml_products\n\ncloud_ml_products_diff = {cloud:cloud_ml_products_20[cloud]-cloud_ml_products_19[cloud] for cloud in cloud_ml_products}\ncloud_ml_products_diff = dict(sorted(cloud_ml_products_diff.items(), key=lambda x: x[1]) )\n_ = cloud_ml_products_diff.pop('Other')","4c11d759":"vals = list(cloud_ml_products_diff.values())\nkeys = list(cloud_ml_products_diff.keys())\n\nfig = plt.figure(figsize = (6, 6))\nax = fig.add_subplot()\ncolors = ['Red' if v<0 else 'Green' for v in vals]\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# plot horizontal lines from the origin to each data point\nax.hlines(y = keys, \n          xmin = 0,\n          xmax = vals,\n          color = colors,\n          alpha = 0.6)\n\n# print(colors)\n# # plot the dots\nax.scatter(x = vals,\n          y = keys,\n          s = 100,\n          color = colors,\n          alpha = 0.6)\ny = [round(x,2) for x in vals]\nx = keys\nfor i in range(len(cloud_ml_products_diff)):\n    if y[i]>0:\n        ax.annotate('{}%'.format(y[i]), (y[i]+0.3, x[i]), alpha=0.8)\n    else:\n        ax.annotate('{}%'.format(y[i]), (y[i]-0.8, x[i]), alpha=0.8)\nax.set_title(\"Diverging Lollipop of growth of Cloud platforms from 2019 to 2020\")\n\n# autoscale\nax.autoscale_view()\n\n# change x lim\nax.set_xlim(-3, 3)\n\n# set labels\nax.set_xlabel(\"% change\")\nax.set_ylabel(\"Cloud platform\")\n\n# change the spines to make it nicer\nax.spines[\"right\"].set_color(\"None\")\nax.spines[\"top\"].set_color(\"None\")\n\n# add a grid\nax.grid(linestyle='--', alpha=0.5);","3df73e3f":"cloud_bi_products_20 = collections.Counter(sum(d20[d20.cloud_true==True]['Q31_A'], []))\ntotal_cloud_20 = len(d20[d20.cloud_true==True])\nfor key in cloud_bi_products_20:\n    cloud_bi_products_20[key]\/=total_cloud_20\/100\nfor key in cloud_bi_products_20:\n    cloud_bi_products_20[key.strip()] = cloud_bi_products_20.pop(key)\ncloud_bi_products_20","ea98009b":"cloud_bi_products = set(cloud_bi_products_19.keys()).intersection(cloud_bi_products_20.keys())\ncloud_bi_products\n\ncloud_bi_products_diff = {cloud:cloud_bi_products_20[cloud]-cloud_bi_products_19[cloud] for cloud in cloud_bi_products}\ncloud_bi_products_diff = dict(sorted(cloud_bi_products_diff.items(), key=lambda x: x[1]) )\ncloud_bi_products_diff","b8a20c0a":"cloud_automl_products_19 = collections.Counter(sum(d19[d19.cloud_true==True]['Q33'], []))\ntotal_cloud_19 = len(d19[d19.cloud_true==True])\nfor key in cloud_automl_products_19:\n    cloud_automl_products_19[key]\/=total_cloud_19\/100\nfor key in cloud_automl_products_19:\n    if type(key)==str:\n        cloud_automl_products_19[key.strip()] = cloud_automl_products_19.pop(key)\n\ncloud_automl_products_mapping = {\n#     'AWS Redshift': 'Amazon Redshift',\n#     'Google automlgQuery': 'Google Cloud automlgQuery',\n#     'AWS Athena': 'Amazon Athena',\n}\n\nfor old in cloud_automl_products_mapping:\n    cloud_automl_products_19[cloud_automl_products_mapping[old]] = cloud_automl_products_19.pop(old)\ncloud_automl_products_19","e23c2628":"cloud_automl_products_20 = collections.Counter(sum(d20[d20.cloud_true==True]['Q34_A'], []))\ntotal_cloud_20 = len(d20[d20.cloud_true==True])\nfor key in cloud_automl_products_20:\n    cloud_automl_products_20[key]\/=total_cloud_20\/100\nfor key in cloud_automl_products_20:\n    cloud_automl_products_20[key.strip()] = cloud_automl_products_20.pop(key)\ncloud_automl_products_20","090346fc":"cloud_automl_products = set(cloud_automl_products_19.keys()).intersection(cloud_automl_products_20.keys())\ncloud_automl_products\n\ncloud_automl_products_diff = {cloud:cloud_automl_products_20[cloud]-cloud_automl_products_19[cloud] for cloud in cloud_automl_products}\ncloud_automl_products_diff = dict(sorted(cloud_automl_products_diff.items(), key=lambda x: x[1]) )\ncloud_automl_products_diff","5ce52ebc":"# Growth of public cloud platforms 2019 vs 2020","ed1313cc":"# Percentage of users using cloud 2019 vs 2020","bb243560":"# Popularity of popular cloud ML tools 2019 vs 2020","943b1ffe":"I did not imagine this visualization to be so interesting when I was building it. Since I had a template established to plot any column, I simply ran it. But when I see the graph it seems like large organization have adopted cloud more than relatively smaller companies and that tells us an interesting story. Intuitively, we would have thought that smaller companies might have increased adoption over the years compared to a big company but here we are!","dc4842b8":"# Under construction - Proceed with caution\n![Typing furiously](https:\/\/pics.me.me\/the-best-of-me-is-yet-to-come-under-construction-25159623.png)\nYes, the code is really bad down here, might hurt your eyes, come visit us later?","39b54a47":"I honestly expected this to be higher but it does seem like there is only a marginal increase in the number of people who have responded that they work with\/know atleast one cloud platform. Something that needs to be noted is that this is for all the roles and not specific to Data Scientist or MLE(Rolewise breakdown coming up)","62bedca2":"Percentage comparison between 2019 and 2020 in terms of cloud adoption broken down by different platforms\n- Percentage of entries with no cloud platform(2019 vs 2020)\n- Same as above, for every role\n- Same as above, broken by gender\n- Same as above, broken by #years exp\n- Bar plot of number of cloud platforms per user","4199bfa6":"I personally spent a lot of 2020 working with Google Cloud and started familiarizing myself with some of the other cloud platforms out there as well. That is when I got to wondering, how many out there have started to study and play around with more than one cloud platforms(I knew I'm not the only one haha). The comparison clearly shows that more and more people are exploring multiple cloud platforms. \n\n> I keep wondering, is this similar to how developers started learning more than one languages or is this comparison not valid?","efb008e2":"# Number of cloud products used","371aa1e1":"# Machine Learning on the cloud!(In progress)\n\nMy day-to-day job involves working with numerous companies moving their infrastructure around a bunch of public cloud platforms(and on-prem infra). Something I've observed is that companies haven't embraced using the cloud for ML as much as they embraced moving infrastructure from on-premises to the cloud. Although this dataset is not a very accurate representation of the problem, it could be a good starting point to understand how are companies adopting ML and using the cloud to run experiments. \n\n![Cloud?](https:\/\/www.explainxkcd.com\/wiki\/images\/5\/5f\/cloud.png)\n\n# Table of contents and visualization built:\n- Percentage of users using cloud 2019 vs 2020\n    - Grouped by day job\n    - Grouped by the number of employees\n- Familiarity with number of cloud platforms 2019 vs 2020\n- Growth rate of public cloud platforms 2019 vs 2020\n- Popularity of popular cloud ML tools 2019 vs 2020\n- Proportion of users using the following tools 2019 vs 2020:\n    - Big Data\n    - Business Intelligence\n    - AutoML\n","9ffcdbf9":"I think all I wanted to compare was the growth of Sagemaker vs Google AI platform. But something interesting I came across here is although the adoption rate for Azure seems to be going up, the proportion of users using Azure Machine Learning Studio seems to have gone down. That might mean that Azure might not be the platforms devs Data folks are turning to at the moment but Azure might be more sought after for other portofolios of developers(Statisticians maybe :P ?)","64c788b0":"This seems to be one of the most important visualizations of this notebook. Here's why:\n> We all know Amazon is like the most used Cloud platform out there but being a Cloud Consultant, I'm seeing a lot of companies shopping around for platforms that offer more than just 'cheap cloud' or 'high discounts'. Companies now know that cloud is everywhere, now they have actually started looking for the right things in cloud platforms(For example, Google supports a lot of open source tools and libraries compared to AWS, just my observation, not trying to sell GCP to you)\n\nIt obviously does not come as a surprise that Azure is leading the growth numbers here and I personally know a lot of developers and companies moving to Azure. What's surprising however is 'Oracle Cloud'. Although Oracle does not stand anywhere near the other giants in terms of absolute market share, it is interesting to see how it's growing over the years. It could worth seeing roles\/company sizes for which Oracle is growing a lot(there could be a pattern here :D )","00317603":"# Role-wise 2019 vs 2020\n\nThis is a breakdown of numbers comparison for 2019 vs. 2020 but grouped by role. This is particularly interesting and obvious to see how a specific role has effect on the adoption of Cloud in that company. \n\nThe biggest jump is seen in **Database Engineers\/DBAs** and **Statisticians**. This goes on to show how a diverse set of people are embracing cloud and are able to bring more and more workloads onto cloud. It's not surprising that DBAs have started using public cloud platforms more given how the leading cloud platforms are adding support for almost any database out there. It would also be interesting to see these growth numbers broken down by cloud platforms, which might help us answer the question 'Are DBAs embracing Google Cloud more or Azure?'","00f69c78":"# Grouped by number of employees"}}