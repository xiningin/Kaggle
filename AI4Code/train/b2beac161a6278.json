{"cell_type":{"25d186c0":"code","b83ebc2e":"code","456f8179":"code","fa276634":"code","e688a6c0":"code","5d287b92":"code","540393da":"code","188c0f83":"code","4cd3e149":"code","e512b1b6":"code","017ddb78":"code","31eb0ff4":"code","d143b5ab":"code","53119759":"code","d42e8adb":"code","fd5b096b":"code","0a1f4800":"code","485c9dea":"code","fbce24c2":"code","47da7c76":"code","45c92076":"code","983bc079":"code","f4723cab":"code","f213c1d9":"code","c7ebe091":"code","3c3a86b7":"code","e2240485":"code","1680d76e":"markdown","0ddff7c8":"markdown","7d0def0a":"markdown","4c9ac0bf":"markdown","b799959f":"markdown","dea8b4b4":"markdown","2f88677d":"markdown","8876ba79":"markdown","bf5ff4e3":"markdown","3f0061ef":"markdown","ba316c64":"markdown"},"source":{"25d186c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b83ebc2e":"import numpy as np\nimport pandas as pd\n\ndata=pd.read_csv('\/kaggle\/input\/graduate-admissions\/Admission_Predict.csv')","456f8179":"data.head()","fa276634":"data.shape","e688a6c0":"data.drop('Serial No.',axis=1,inplace=True)","5d287b92":"data.shape","540393da":"data.isnull().sum()\n","188c0f83":"x=data.iloc[:,:-1]\ny=data.iloc[:,-1]","4cd3e149":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,10))\ni=331;\nfor z in x:\n    plt.subplot(i)\n    i=i+1\n    plt.scatter(x[z],y)","e512b1b6":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,10))\ni=331;\nfor z in x:\n    plt.subplot(i)\n    i=i+1\n    plt.boxplot(x[z])\n    plt.title(z)","017ddb78":"x.corr()","31eb0ff4":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)","d143b5ab":"x_train.shape","53119759":"x_test.shape","d42e8adb":"from sklearn.linear_model import LinearRegression\n\nM1=LinearRegression()\nM1.fit(x_train,y_train)","fd5b096b":"\ny_pred= M1.predict(x_test)","0a1f4800":"from sklearn import metrics\ndef errors(y_test,y_pred):\n    print('MAE is',metrics.mean_absolute_error(y_test,y_pred))\n    print('MSE is',metrics.mean_squared_error(y_test,y_pred))\n    print('RMSE is',np.sqrt(metrics.mean_squared_error(y_test,y_pred)))\n    print('R2 score is',metrics.r2_score(y_test,y_pred))\n","485c9dea":"print(\"LINEAR REGRESSION\")\nerrors(y_test,y_pred)","fbce24c2":"from sklearn import tree\n\nm2=tree.DecisionTreeRegressor(criterion='mse',max_depth=4,random_state=1)\nm2.fit(x_train,y_train)\n","47da7c76":"y_pred= m2.predict(x_test)","45c92076":"print(\"DECISION TREE\")\n\nerrors(y_test,y_pred)","983bc079":"from sklearn.ensemble import RandomForestRegressor\n\nm3=RandomForestRegressor(max_depth=8,n_estimators=300,random_state=1)\nm3.fit(x_train,y_train)\n","f4723cab":"y_pred= m2.predict(x_test)","f213c1d9":"print(\"RANDOM FOREST REGRESSOR\")\nerrors(y_test,y_pred)","c7ebe091":"m3.feature_importances_","3c3a86b7":"data.isnull().sum()\n","e2240485":"y.mean()","1680d76e":"# Plotting between Dependent and independent variables","0ddff7c8":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\ndata=sc.fit_transform(data)","7d0def0a":"#     USING LINEAR REGRESSION","4c9ac0bf":"# USING RANDOM FOREST","b799959f":"# 1. Droping Unwanted Columns ","dea8b4b4":"# Checking for null values","2f88677d":"# Checking outliers","8876ba79":"# Normalizing the values","bf5ff4e3":"from sklearn.decomposition import PCA\ncols=data.columns\npca=PCA(n_components=6)\nx=pca.fit_transform(x)","3f0061ef":"#  Using PCA","ba316c64":"# USING DECISION TREE"}}