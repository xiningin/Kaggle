{"cell_type":{"d6059404":"code","5168a774":"code","273ffd2c":"code","0b0e6690":"code","7a61a87a":"code","739a8365":"code","31ffb5db":"code","e685d03b":"code","c8354053":"code","e39ec770":"code","c95b2e09":"code","b2e7faf9":"code","a30b59e7":"code","ed805aff":"markdown","7181568b":"markdown","6b6987bf":"markdown","767d10bb":"markdown","46c00e22":"markdown","7006ba22":"markdown","c280b03a":"markdown","71694e4d":"markdown"},"source":{"d6059404":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5168a774":"directory = '\/kaggle\/input\/random-linear-regression\/'","273ffd2c":"train_data = pd.read_csv (directory + 'train.csv')\ntest_data = pd.read_csv(directory + 'test.csv')","0b0e6690":"train_data.describe() ","7a61a87a":"test_data.info()","739a8365":"train_data = train_data.dropna()\ntrain_data.head()","31ffb5db":"train_data.describe()","e685d03b":"X_train = np.array(train_data.iloc[:,0].values)\ny_train = np.array(train_data.iloc[:,1].values)\nprint( 'X_train' , X_train [:5] )\nprint( 'y_train' , y_train [:5] )","c8354053":"X_train = X_train.reshape( -1 ,1 )\nprint( 'X_train\\n' , X_train [:5] )\n","e39ec770":"X_test = np.array(test_data.iloc[:,0].values)\ny_test = np.array(test_data.iloc[:,1].values)\nprint( 'X_test' , X_test [:5] )\nprint( 'y_test' , y_test [:5] )\n","c95b2e09":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit( X_train , y_train )\nmodel.score( X_train , y_train )","b2e7faf9":"import matplotlib.pyplot as plt\nplt.scatter( X_test , y_test )\nprint(X_test.shape)\nplt.plot( X_test , model.predict( X_test.reshape( - 1 , 1 ) ) , 'r')","a30b59e7":" X_test.reshape( - 1 , 1 ).shape","ed805aff":"# Linear Regression Model","7181568b":"# Derive Information about the Dataset","6b6987bf":"# Extract Input and output from the Train Dataset","767d10bb":"# Removes the Null Value","46c00e22":"# Plotting the graph to Check the performance ","7006ba22":"# Changing the Shape as LR requires 2D array","c280b03a":"# Extract Data from Csv File","71694e4d":"# Extracting Input and Output from Test Dataset"}}