{"cell_type":{"7d443a18":"code","3b7f3992":"code","31481439":"code","743d3247":"code","1c48207f":"code","b8a2885b":"code","4cafcd08":"code","0ef6aa0b":"code","fd870983":"code","9a246a24":"code","31b2dbb5":"code","9d67a34e":"code","6e1f7250":"code","6ccc54f0":"code","ddd2fd98":"code","1fd0c1f9":"code","111c3f1c":"code","9a18b30d":"code","e2e99433":"code","72dea923":"code","31331927":"code","5177525c":"code","191ae06c":"code","2ffdfaba":"markdown","49f0e571":"markdown","960c6226":"markdown","83ec4203":"markdown","05a49890":"markdown","448e311c":"markdown","4775bcb2":"markdown","9fab9fe9":"markdown","ad9d5b5c":"markdown"},"source":{"7d443a18":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, roc_auc_score, roc_curve\n\nimport os\nprint(os.listdir(\"..\/input\"))","3b7f3992":"# Util function(s)\n\ndef print_matrix(model, X_test, y_test, xlabel='Predicted', ylabel='True class', title=''):\n    y_pred = model.predict(X_test)\n    matrix = confusion_matrix(y_pred, y_test, [1,0])\n    sns.heatmap(matrix, annot=True, fmt='.2f', xticklabels=['Left', 'Stayed'], yticklabels=['Left', 'Stayed'])\n    plt.ylabel(ylabel)\n    plt.xlabel(xlabel)\n    plt.title(title)\n    plt.show()\n    \ndef print_roc(model, X_test, y_test, label='', xlabel='False Positive Rate', ylabel='True Positive Rate', title=''):\n    y_pred = model.predict_proba(X_test)[:, 1]\n    fpr_lm, tpr_lm, _ = roc_curve(y_test, y_pred)\n    plt.plot(fpr_lm, tpr_lm, label=label)\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlabel(xlabel)\n    plt.ylabel(ylabel)\n    plt.title(title)\n    plt.legend(loc='best')\n    plt.legend()\n    plt.grid()\n    plt.show()","31481439":"df = pd.read_csv('..\/input\/HR_comma_sep.csv')\ndf.head()\ndFrame = df","743d3247":"print(df.shape)\nprint()\nprint(df.dtypes)\nprint()\nprint(df.isnull().sum())","1c48207f":"df.rename(columns={\"sales\":\"department\"}, inplace=True)","b8a2885b":"#Mapping categorical salary\ndf.salary = df.salary.map({\"low\": 0, \"medium\": 1, \"high\": 2})","4cafcd08":"df.head()","0ef6aa0b":"df.groupby(\"left\").mean()","fd870983":"pd.crosstab(df.department, df.left).plot(kind=\"bar\")\nplt.title(\"Turnover Frequency for Department\")\nplt.xlabel(\"Department\")\nplt.ylabel(\"Frequency of Turnover\")\nplt.show()","9a246a24":"sns.countplot(df.left)\nplt.xticks((0, 1), [\"Didn't leave\", \"Left\"])\nplt.xlabel(\"Class counts\")\nplt.ylabel(\"Count\")\nplt.show()","31b2dbb5":"pd.crosstab(df.salary, df.left).div(pd.crosstab(df.salary, df.left).sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)\nplt.xticks((0, 1, 2), [\"High\", \"Low\", \"Medium\"])\nplt.title(\"Stacked Bar Chart of Salary Level vs Turnover\")\nplt.xlabel(\"Salary Level\")\nplt.ylabel(\"Proportion of Employees\")\nplt.show()","9d67a34e":"plt.pie(df.department.value_counts().values, labels=df.department.value_counts().index)\nplt.legend()\nplt.axis(\"equal\")\nplt.show()","6e1f7250":"pd.crosstab(df.left, df.salary).div(pd.crosstab(df.left, df.salary).sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)\nplt.title(\"Stacked Chart of Salary vs Class\")\nplt.xlabel(\"Class\")\nplt.xticks([0, 1], [\"Didn't leave\", \"Left\"])\nplt.ylabel(\"Proportion of Salary\")\nplt.show()","6ccc54f0":"# Create dummy variables for department feature\ndf = pd.get_dummies(df, columns=[\"department\"], drop_first=True)\n#df.head()","ddd2fd98":"# Convert dataframe into numpy objects and split them into train and test sets: 80\/20\nX = df.loc[:, df.columns != \"left\"].values\ny = df.loc[:, df.columns == \"left\"].values.flatten()\n\n# Original minority class\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=1)\n\nprint (\"Original shape:\", X_train.shape, y_train.shape )","1fd0c1f9":"# Build random forest classifier\n\npip_rf = make_pipeline(StandardScaler(), RandomForestClassifier(n_estimators=500, class_weight=\"balanced\", random_state=123))\n    \nhyperparam_grid = {\n    'randomforestclassifier__n_estimators': [10, 50, 100, 500],\n    'randomforestclassifier__max_features': [\"sqrt\", \"log2\", 0.4, 0.5],\n    'randomforestclassifier__min_samples_leaf': [1, 3, 5],\n    'randomforestclassifier__criterion': [\"gini\", \"entropy\"]}\n    \ngs_rf = GridSearchCV(pip_rf,\n                    hyperparam_grid,\n                    scoring='f1',\n                    cv=10,\n                    n_jobs=-1)\ngs_rf.fit(X_train, y_train)\n\nfor hyperparam in gs_rf.best_params_.keys():\n    print (hyperparam[hyperparam.find('__') + 2:], ':', gs_rf.best_params_[hyperparam]   )\n    \nprint ('Best 10-folds CV f1-score: {:.2f}%.'.format(gs_rf.best_score_ * 100))","111c3f1c":"print_matrix(gs_rf, X_test, y_test, title='Random Forest')\nprint_roc(gs_rf, X_test, y_test,'Random Forest')","9a18b30d":"# Build KNN classifier\npip_knn = make_pipeline(StandardScaler(), KNeighborsClassifier())\nhyperparam_range = range(1, 20)\ngs_knn = GridSearchCV(pip_knn,\n                      param_grid={'kneighborsclassifier__n_neighbors': hyperparam_range,\n                                  'kneighborsclassifier__weights': ['uniform', 'distance']},\n                      scoring='f1',\n                      cv=10,\n                      n_jobs=-1)\ngs_knn.fit(X_train, y_train)\n\nfor hyperparam in gs_knn.best_params_.keys():\n    print (hyperparam[hyperparam.find(\"__\") + 2:], ':', gs_knn.best_params_[hyperparam]) \nprint ('Best 10-folds CV f1-score: {:.2f}%.'.format((gs_knn.best_score_) * 100))","e2e99433":"print_matrix(gs_knn, X_test, y_test, title='K-Nearest Neighbors')\nprint_roc(gs_knn, X_test, y_test,'K-Nearest Neighbors')","72dea923":"# Build SVM classifier\nclf_svc = make_pipeline(StandardScaler(),\n                        SVC(C=0.01,\n                            gamma=0.1,\n                            kernel='poly',\n                            degree=5,\n                            coef0=10,\n                            probability=True))\nclf_svc.fit(X_train, y_train)\nsvc_cv_scores = cross_val_score(clf_svc,\n                                X=X_train,\n                                y=y_train,\n                                scoring='f1',\n                                cv=10,\n                                n_jobs=-1)\nprint ('The 10-folds CV f1-score is: {:.2f}%'.format(np.mean(svc_cv_scores) * 100))","31331927":"print_matrix(clf_svc, X_test, y_test, title='Support Vector Machine')\nprint_roc(clf_svc, X_test, y_test,'Support Vector Machine')","5177525c":"# Conclusion\ny_pred_rf = gs_rf.predict_proba(X_test)[:, 1]\nfpr_rf_lm, tpr_rf_lm, _ = roc_curve(y_test, y_pred_rf)\nplt.plot(fpr_rf_lm, tpr_rf_lm, label='Random Forest')\n\ny_pred_knn = gs_knn.predict_proba(X_test)[:, 1]\nfpr_knn_lm, tpr_knn_lm, _ = roc_curve(y_test, y_pred_knn)\nplt.plot(fpr_knn_lm, tpr_knn_lm, label='K-Nearest')\n\ny_pred_scv = clf_svc.predict_proba(X_test)[:, 1]\nfpr_scv_lm, tpr_scv_lm, _ = roc_curve(y_test, y_pred_scv)\nplt.plot(fpr_scv_lm, tpr_scv_lm, label='SVM')\n\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='best')\nplt.legend()\nplt.show()","191ae06c":"features = gs_rf.best_estimator_.steps[1][1].feature_importances_\nindex = dFrame.columns[dFrame.columns != 'left']\nimp_features = pd.Series(data=features[:9], index=index)\nimp_features.sort_values(ascending=False, inplace=True)\nimp_features.plot(kind='bar')\nplt.show()","2ffdfaba":"## Exploratory Data Analysis","49f0e571":"## Feature Importance","960c6226":"## About Features","83ec4203":"## K-Nearest Neighbors","05a49890":" - satisfaction_level: Level of satisfaction {0\u20131}.\n - last_evaluationTime: Time since last performance evaluation (in years).\n - number_project: Number of projects completed while at work.\n - average_montly_hours: Average monthly hours at workplace.\n - time_spend_company: Number of years spent in the company.\n - Work_accident: Whether the employee had a workplace accident.\n - left: Whether the employee left the workplace or not {0, 1}.\n - promotion_last_5years: Whether the employee was promoted in the last five years.\n - sales: Department the employee works for.\n - salary: Relative level of salary {low, medium, high}.","448e311c":"## Data Preprocessing","4775bcb2":"## Importing Dataset","9fab9fe9":"## Support Vector Machine (SVM)","ad9d5b5c":"## Random Forest"}}