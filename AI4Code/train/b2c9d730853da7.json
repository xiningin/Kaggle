{"cell_type":{"1a13f5df":"code","41d3af77":"code","061f3c3a":"code","52c92aa7":"code","be0e3e7b":"code","e52dc0fa":"code","a976c001":"code","12d3e1c7":"code","a6f2a1db":"code","dd4c25a6":"code","18e8e63d":"code","7868aac2":"code","c01ea23c":"code","96a1f2b1":"code","8bde4bca":"code","2bde0239":"code","4e7f202b":"code","1fc09044":"markdown","6951b245":"markdown","a46b51f7":"markdown","c8820346":"markdown","2a7af539":"markdown","b8a2b96c":"markdown","1241c3c7":"markdown","b6ef5467":"markdown"},"source":{"1a13f5df":"# pandas and numpy for data manipulation\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\n\n# Import the tpot Classifier\nfrom tpot import TPOTClassifier\nprint(\"TPOT has been installed\")","41d3af77":"# Read data\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\n#Show 10 fist datapoints\ntrain_df.head(n=10)","061f3c3a":"#Dataset information\ntrain_df.info()\nprint('_'*40)\ntest_df.info()","52c92aa7":"#numerical features stats\ntrain_df.describe()","be0e3e7b":"#Categorical features stats \ntrain_df.describe(include=['O'])","e52dc0fa":"#Labels: C\u00e1i c\u1ea7n d\u1ef1 \u0111o\u00e1n\ny_train = train_df[\"Survived\"]\n#Drop feature: ID, name, ticket number l\u00e0 kh\u00f4ng c\u1ea7n thi\u1ebft. Cabin miss value qu\u00e1 nhi\u1ec1u\nX_train = train_df.drop([\"Survived\",\"PassengerId\", \"Name\", \"Ticket\", \"Cabin\"], axis=1)\n\n# Fill missed categorical value\nfreq_port = train_df.Embarked.dropna().mode()[0]\nX_train['Embarked'] = X_train['Embarked'].fillna(freq_port)\n\n# Convert categorical feature to numerical feature\nX_train['Sex'] = X_train['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\nX_train['Embarked'] = X_train['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\n# Show traning data feature \nX_train.head(n=10)","a976c001":"# Convert to numpy arrays\nX_train = np.array(X_train)\n\n# Sklearn wants the labels as one-dimensional vectors\ny_train = np.array(y_train).reshape((-1,))\nprint(X_train.shape)\nprint(y_train.shape)","12d3e1c7":"#Split data: traing and testing\n#X_train , X_test , y_train , y_test = train_test_split( X_train , y_train , train_size = .8 )\nprint(X_train.shape)\nprint(y_train.shape)\n#print(X_test.shape)\n#print(y_test.shape)","a6f2a1db":"# Create a tpot object with a few parameters\npipeline_optimizer = TPOTClassifier(generations=15, population_size=50, cv=6,\n                                    random_state=42, verbosity=2)\nprint(\"Done\")","dd4c25a6":"# Fit the tpot model on the training data\npipeline_optimizer.fit(X_train, y_train)\nprint(\"Training finish\")","18e8e63d":"# Show the final model\nprint(pipeline_optimizer.fitted_pipeline_)","7868aac2":"# Export the pipeline as a python script file\npipeline_optimizer.export('tpot_exported_pipeline.py')","c01ea23c":"# To examine all fitted models\n#pipeline_optimizer.evaluated_individuals_","96a1f2b1":"# Evaluate the final model\n#print(pipeline_optimizer.score(X_test, y_test))","8bde4bca":"test_df = pd.read_csv('..\/input\/test.csv')\nX_test_df = test_df.drop([\"PassengerId\", \"Name\", \"Ticket\", \"Cabin\"], axis=1)\n\n#freq_port = test_df.Embarked.dropna().mode()[0]\nX_test_df['Embarked'] = X_test_df['Embarked'].fillna(freq_port)\n\n# Convert categorical feature to numerical feature\nX_test_df['Sex'] = X_test_df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\nX_test_df['Embarked'] = X_test_df['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\n# Show traning data feature \nX_test_df.head(n=10)","2bde0239":"X_test_df = np.array(X_test_df)\nprint(X_test_df.shape)","4e7f202b":"surv_pred = pipeline_optimizer.predict(X_test_df)\n\nsubmit = pd.DataFrame({'PassengerId' : test_df.loc[:,'PassengerId'],\n                       'Survived': surv_pred.T})\nsubmit.to_csv(\"..\/working\/submit.csv\", index=False)\n#submit.to_csv(\"submit.csv\", index=False)\nsubmit.head(n=20)","1fc09044":"# Automated Machine Learning\n## Preprocessing","6951b245":"If we want to look at all of the evaluated pipelines, we can see the `.evaluated_individuals_` attribute of the fitted optimizer. Be careful about running this as it will print out all 1500 pipelines that were tested!","a46b51f7":"Finally, let's test the entire fitted pipeline on the test dataset. After evaluating all the pipelines, TPOT saves the best one and trains it on all the training data, so we can evaluate the best one using the optimizer `.score` method.","c8820346":"The TPOT optimization process is stochastic, meaning that [each run will produce different results](https:\/\/epistasislab.github.io\/tpot\/using\/). If you run this notebook again, don't worry if you see a different final pipeline!  ","2a7af539":"## Evaluating model","b8a2b96c":"To save the pipeline for future use, we can export it to a Python script. ","1241c3c7":"## Submit prediction","b6ef5467":"## Building model: So easy"}}