{"cell_type":{"134aea28":"code","956cfe36":"code","83b8703b":"code","d420173c":"code","f53b95ed":"code","2891065f":"code","2f59b043":"code","55429709":"code","7b91e453":"code","0253642f":"code","ed8a0f34":"code","568da6c9":"code","388933cb":"code","ddca32c8":"code","05b8a800":"code","39ef4291":"code","69d42cb4":"code","693d513d":"code","e2307ac8":"code","993d6e99":"code","69a23312":"code","ba13cc87":"code","c292ab6c":"code","b2b979a3":"markdown","0a0bda96":"markdown","a888c008":"markdown","624e22ed":"markdown","5b793ea9":"markdown","3b7c3b96":"markdown","79b36168":"markdown","62a72b60":"markdown","f6b03cab":"markdown","d8afa17b":"markdown","4d45a992":"markdown","f08b091f":"markdown","9c8ee817":"markdown","1925342c":"markdown","3cb57df7":"markdown","eb4b1817":"markdown","12b8be15":"markdown","7f7e60b3":"markdown","6fa883d9":"markdown","f50f970c":"markdown","786322d3":"markdown","be3bb81d":"markdown","45686838":"markdown","4adf9773":"markdown"},"source":{"134aea28":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.text import Text\nfrom matplotlib.lines import Line2D\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib.patches import Rectangle, Polygon\n\nplt.rcParams['figure.dpi'] = 100\n\ndef clip_path(ax):\n    T1 = [(0,0),(0,1),(1,1)]\n    T2 = [(0,0),(1,0),(1,1)]\n    clip1 = Polygon(T1, closed=True, transform=ax.transAxes,\n                   edgecolor='None', facecolor='None')\n    clip2 = Polygon(T2, closed=True, transform=ax.transAxes,\n                   edgecolor='None', facecolor='None')\n\n    line = Line2D([0, 1], [0, 1], transform=ax.transAxes, linewidth=0.5,\n                  color=\"black\", clip_on=False, zorder=50)\n    ax.add_artist(line)\n\n    return clip1, clip2\n\n    \ndef scatter(ax):\n    np.random.seed(123)\n    n = 500\n    X = np.random.normal(0, 0.5, n)\n    Y = np.random.normal(0, 0.5, n)\n    S = 25\n\n    clip1, clip2 = clip_path(ax)\n    \n    ax.scatter(X, Y, S, clip_path=clip1,\n               linewidth=0.75, facecolor=\"None\",  edgecolor=\".25\")\n    ax.scatter(X, Y, S, clip_path=clip1,\n               linewidth=0.00, facecolor=\"white\", edgecolor=\"None\")\n    ax.scatter(X, Y, S\/2, clip_path=clip1,\n               linewidth=0.00, facecolor=\"black\", edgecolor=\"None\", alpha=0.5)\n\n    ax.scatter(X, Y, S, clip_path=clip2,\n               linewidth=0.75, facecolor=\"None\",  edgecolor=\".25\")\n    ax.scatter(X, Y, S, clip_path=clip2,\n               linewidth=0.00, facecolor=\"white\", edgecolor=\"None\")\n    ax.scatter(X, Y, S\/2, clip_path=clip2,\n               linewidth=0.00, facecolor=\"red\", edgecolor=\"None\", alpha=0.5)\n\n    ax.set_xlabel(\"Scatter plot\")\n    \n\ndef lineplot(ax):\n    ax.set_xlabel(\"Line plot\")\n\n    clip1, clip2 = clip_path(ax)\n    \n    X = np.linspace(-1,1,100)\n    Y = 0.25*np.cos(1+np.pi*X)\n    ax.plot(X, Y, color=\"black\", linewidth=2, clip_path=clip1)\n    ax.fill_between(X, Y+0.25, Y-0.25, clip_path=clip1,\n                    facecolor=\"black\", edgecolor=\"None\", alpha=0.15)\n\n    X = np.linspace(-1,1,100)\n    Y = 0.25*np.cos(1+np.pi*X)\n    ax.plot(X, Y, color=\"red\", linewidth=2, clip_path=clip2)\n    ax.fill_between(X, Y+0.25, Y-0.25, clip_path=clip2,\n                    facecolor=\"red\", edgecolor=\"None\", alpha=0.15)\n    \n\ndef quiverplot(ax):\n    clip1, clip2 = clip_path(ax)\n    \n    n = 10\n    X,Y = np.mgrid[0:n, 0:n]\n    X,Y = 2*X\/(n-1)-1, 2*Y\/(n-1)-1\n    T = np.arctan2(Y, X)\n    U, V = np.cos(T), np.sin(T)\n    ax.quiver(X, Y, 0.1*U, 0.1*V, scale=1, width=0.015, clip_path=clip1,\n              edgecolor='black', facecolor='.9', linewidth=.5)\n\n    ax.quiver(X, Y, 0.1*U, 0.1*V, T-1, scale=1, width=0.015, clip_path=clip2,\n              edgecolor='black', linewidth=.5, cmap=\"hot\")\n\n    ax.set_xlabel(\"Quiver plot\")\n\ndef contourplot(ax):\n\n    clip1, clip2 = clip_path(ax)\n    \n    def f(x,y): return (1-x\/2+x**5+y**3)*np.exp(-x**2-y**2)\n    n = 100\n    x = np.linspace(-3,3,n)\n    y = np.linspace(-3,3,n)\n    X,Y = np.meshgrid(x,y)\n    Z = f(X,Y)\n\n    CF = ax.contourf(Z, 10, extent=[-1,+1,-1,+1], alpha=.5, \n                     origin=\"upper\", cmap=\"gray\", zorder=-10)\n    for collection in CF.collections:\n        collection.set_clip_path(clip1)\n   \n    CS = ax.contour(Z, 10, extent=[-1,+1,-1,+1], \n                    colors=\"black\", linewidths=.5, origin=\"upper\")\n    for collection in CS.collections:\n        collection.set_clip_path(clip1)\n\n    CF = ax.contourf(Z, 10, extent=[-1,+1,-1,+1], alpha=.75, \n                     origin=\"upper\", cmap=\"viridis\", zorder=-10)\n    for collection in CF.collections:\n        collection.set_clip_path(clip2)\n    \n    CS = ax.contour(Z, 10, extent=[-1,+1,-1,+1], \n                    colors=\"white\", linewidths=.5, origin=\"upper\")\n    for collection in CS.collections:\n        collection.set_clip_path(clip2)\n\n    ax.set_xlabel(\"Contour plot\")\n\ndef imageplot(ax):\n    def f(x,y): return (1-x\/2+x**5+y**3)*np.exp(-x**2-y**2)\n    n = 32\n    x = np.linspace(-3,3,n)\n    y = np.linspace(-3,3,n)\n    X,Y = np.meshgrid(x,y)\n    Z = f(X,Y)\n\n    clip1, clip2 = clip_path(ax)\n    ax.imshow(Z, extent=[-1,+1,-1,+1], origin=\"upper\", zorder=50,\n              cmap=\"gray\", interpolation=\"nearest\", clip_path=clip1)\n    ax.imshow(Z, extent=[-1,+1,-1,+1], origin=\"upper\", \n              cmap=\"hot\", interpolation=\"bicubic\", clip_path=clip2)\n\n\n    ax.set_xlabel(\"Image plot\")\n\ndef pieplot(ax):\n    clip1, clip2 = clip_path(ax)\n\n    size = 0.3\n    vals = np.array([[60., 32.], [37., 40.], [29., 10.]])\n\n    cmap = plt.get_cmap(\"gray\")\n    outer_colors = cmap(.1+np.arange(3)\/4)\n    inner_colors = cmap(np.array([1, 2, 5, 6, 9, 10])\/12)\n\n    patches, _ = ax.pie(vals.sum(axis=1), radius=1, colors=outer_colors,\n                        wedgeprops=dict(width=size, edgecolor='w'))\n    for patch in patches:\n        patch.set_clip_on(True)\n        patch.set_clip_path(clip1)\n    patches, _ = ax.pie(vals.flatten(), radius=1-size, colors=inner_colors,\n                        wedgeprops=dict(width=size, edgecolor='w'))\n    for patch in patches:\n        patch.set_clip_on(True)\n        patch.set_clip_path (clip1)\n\n    cmap = plt.get_cmap(\"tab20c\")\n    outer_colors = cmap(+np.arange(3))\n    inner_colors = cmap(np.array([1, 2, 5, 6, 9, 10]))\n    patches, _ = ax.pie(vals.sum(axis=1), radius=1, colors=outer_colors,\n                        wedgeprops=dict(width=size, edgecolor='w'))\n    for patch in patches:\n        patch.set_clip_on(True)\n        patch.set_clip_path(clip2)\n    patches, _ = ax.pie(vals.flatten(), radius=1-size, colors=inner_colors,\n                        wedgeprops=dict(width=size, edgecolor='w'))\n    for patch in patches:\n        patch.set_clip_on(True)\n        patch.set_clip_path (clip2)\n    \n    rect = Rectangle((0,0), 1, 1, transform=ax.transAxes, linewidth=0.75,\n                     edgecolor=\"black\", facecolor=\"None\", clip_on=False)\n    ax.add_artist(rect)\n\n    ax.set_xlabel(\"Pie plot\")\n\ndef threedplot(ax):\n\n    T1 = [(0,0),(0,1),(1,1)]\n    T2 = [(0,0),(1,0),(1,1)]\n    clip1 = Polygon(T1, closed=True, transform=ax.transAxes,\n                   edgecolor='None', facecolor='None')\n    clip2 = Polygon(T2, closed=True, transform=ax.transAxes,\n                   edgecolor='None', facecolor='None')\n\n    ax.set_axis_off()\n    ax.set_xlim(-1, 1), ax.set_ylim(-1, 1), ax.set_zlim(-2, 2)\n    X,Y= np.meshgrid(np.linspace(-1, 1, 25),\n                     np.linspace(-1, 1, 25))\n    Z = np.sin(5*np.sqrt(X**2+Y**2))\n\n    ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=\"gray\", clip_path=clip1,\n                    linewidth=.25, edgecolor=\"black\", vmin=-1.5, vmax=1)\n    ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=\"magma\", clip_path=clip2,\n                    linewidth=0, edgecolor=\"black\", vmin=-1.5, vmax=1)\n\n    line = Line2D([0, 1], [0, 1], transform=ax.transAxes, linewidth=0.5,\n                  color=\"black\", clip_on=False, zorder=10)\n    ax.add_artist(line)\n    \n    rect = Rectangle((0,0), 1, 1, transform=ax.transAxes, linewidth=0.75,\n                     edgecolor=\"black\", facecolor=\"None\", clip_on=False)\n    ax.add_artist(rect)\n    text = Text(0.5, -0.025, \"3D plot\", clip_on=False,\n                ha=\"center\", va=\"top\", transform=ax.transAxes)\n    ax.add_artist(text)\n    \n    \ndef barplot(ax):\n    clip1, clip2 = clip_path(ax)\n\n    n = 16\n    X = np.arange(n)\n    Y1 = (1-0.25*X\/n) * np.random.uniform(0.25, 0.75, n)\n    Y2 = (1-0.25*X\/n) * np.random.uniform(0.25, 0.75, n)\n    ax.bar(X, +Y1, 1, facecolor='#cccccc', edgecolor='white', clip_path=clip1)\n    ax.bar(X, -Y2, 1, facecolor='#999999', edgecolor='white', clip_path=clip1)\n    ax.bar(X, +Y1, 1, facecolor='#ffaaaa', edgecolor='white', clip_path=clip2)\n    ax.bar(X, -Y2, 1, facecolor='#ff7777', edgecolor='white', clip_path=clip2)\n    ax.set_xlim(-1,n)\n    ax.set_xlabel(\"Bar plot\")\n\ndef boxplot(ax):\n    clip1, clip2 = clip_path(ax)\n\n    n = 5\n    data = np.random.normal(0, .25, (100,n))\n\n    bplots = ax.boxplot(data, patch_artist=True)\n    for patch in bplots['boxes']:\n        patch.set_facecolor(\"0.9\")\n    for line in bplots['medians']:\n        line.set_color(\"black\")\n    for element in [\"boxes\",\"medians\",\"whiskers\", \"caps\", \"fliers\",\"means\"]:\n        for item in bplots[element]:\n            item.set_clip_path(clip1)\n\n    bplots = ax.boxplot(data, patch_artist=True)\n    \n    for patch in bplots['boxes']:\n        patch.set_facecolor(\"0.9\")\n    for line in bplots['medians']:\n        line.set_color(\"black\")\n    for element in [\"boxes\",\"medians\",\"whiskers\", \"caps\", \"fliers\",\"means\"]:\n        for item in bplots[element]:\n            item.set_color(\"red\")\n            try:\n                item.set_markerfacecolor (\"red\")\n                item.set_markeredgecolor (\"red\")\n            except:\n                pass\n            item.set_clip_path(clip2)\n\n            \n    ax.set_xlim(0,n+1), ax.set_xticks([])\n    ax.set_xlabel(\"Box plot\")\n\n\nfig, axes = plt.subplots(3, 3, figsize=(8, 8))\nfor ax in axes.ravel():\n    ax.set(xticks=[], yticks=[], xlim=[-1,1], ylim=[-1,1])\naxes[2,2] = plt.subplot(339, projection=\"3d\")\n\nlineplot(axes[0,0])\nscatter(axes[0,1])\nbarplot(axes[0,2])\n\nimageplot(axes[1,0])\ncontourplot(axes[1,1])\nboxplot(axes[1,2])\n\nquiverplot(axes[2,0])\npieplot(axes[2,1])\nthreedplot(axes[2,2])\n\nplt.savefig(\"catalogue.pdf\")\nplt.show()","956cfe36":"import numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec # Alignments \n\nimport seaborn as sns # theme & dataset\nprint(f\"Matplotlib Version : {mpl.__version__}\")\n\n# for visualization samples\nimport pandas as pd\n\nnetflix_titles = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")","83b8703b":"fig, axes = plt.subplots(2, 3, figsize=(8, 5))\nplt.show()","d420173c":"fig, axes = plt.subplots(2, 3, figsize=(8, 5))\nplt.tight_layout()\nplt.show()","f53b95ed":"# with subplot2grid\n\nfig = plt.figure(figsize=(8, 5)) # initialize figure\n\nax = [None for _ in range(6)] # list to save many ax for setting parameter in each\n\nax[0] = plt.subplot2grid((3,4), (0,0), colspan=4)\nax[1] = plt.subplot2grid((3,4), (1,0), colspan=1)\nax[2] = plt.subplot2grid((3,4), (1,1), colspan=1)\nax[3] = plt.subplot2grid((3,4), (1,2), colspan=1)\nax[4] = plt.subplot2grid((3,4), (1,3), colspan=1,rowspan=2)\nax[5] = plt.subplot2grid((3,4), (2,0), colspan=3)\n\n\nfor ix in range(6): \n    ax[ix].set_title('ax[{}]'.format(ix)) # make ax title for distinguish:)\n    ax[ix].set_xticks([]) # to remove x ticks\n    ax[ix].set_yticks([]) # to remove y ticks\n    \nfig.tight_layout()\nplt.show()","2891065f":"fig = plt.figure(figsize=(8, 5))\n\nax = [None for _ in range(3)]\n\n\nax[0] = fig.add_axes([0.1,0.1,0.8,0.4]) # x, y, dx, dy\nax[1] = fig.add_axes([0.15,0.6,0.25,0.6])\nax[2] = fig.add_axes([0.5,0.6,0.4,0.3])\n\nfor ix in range(3):\n    ax[ix].set_title('ax[{}]'.format(ix))\n    ax[ix].set_xticks([])\n    ax[ix].set_yticks([])\n\nplt.show()","2f59b043":"fig = plt.figure(figsize=(8, 5))\n\ngs = fig.add_gridspec(3, 3) # make 3 by 3 grid (row, col)\n\nax = [None for _ in range(5)]\n\nax[0] = fig.add_subplot(gs[0, :]) \nax[0].set_title('gs[0, :]')\n\nax[1] = fig.add_subplot(gs[1, :-1])\nax[1].set_title('gs[1, :-1]')\n\nax[2] = fig.add_subplot(gs[1:, -1])\nax[2].set_title('gs[1:, -1]')\n\nax[3] = fig.add_subplot(gs[-1, 0])\nax[3].set_title('gs[-1, 0]')\n\nax[4] = fig.add_subplot(gs[-1, -2])\nax[4].set_title('gs[-1, -2]')\n\nfor ix in range(5):\n    ax[ix].set_xticks([])\n    ax[ix].set_yticks([])\n\nplt.tight_layout()\nplt.show()","55429709":"def cmap_plot(cmap_list, ctype):\n    cmaps = cmap_list\n\n    n = len(cmaps)\n\n    fig = plt.figure(figsize=(8.25, n*.20), dpi=200)\n    ax = plt.subplot(1, 1, 1, frameon=False, xlim=[0,10], xticks=[], yticks=[])\n    fig.subplots_adjust(top=0.99, bottom=0.01, left=0.18, right=0.99)\n\n    y, dy, pad = 0, 0.3, 0.08\n\n    ticks, labels = [], []\n\n    for cmap in cmaps[::-1]:\n        Z = np.linspace(0,1,512).reshape(1,512)\n        plt.imshow(Z, extent=[0,10,y,y+dy], cmap=plt.get_cmap(cmap))\n        ticks.append(y+dy\/2)\n        labels.append(cmap)\n        y = y + dy + pad\n\n    ax.set_ylim(-pad,y)\n    ax.set_yticks(ticks)\n    ax.set_yticklabels(labels)\n\n    ax.tick_params(axis='y', which='both', length=0, labelsize=5)\n    plt.title(f'{ctype} Colormap', fontweight='bold', fontsize=8)\n    plt.show()\n","7b91e453":"# _r mean reverse\ndiverge_cmap = ('PRGn', 'PiYG', 'RdYlGn', 'BrBG', 'RdGy', 'PuOr', 'RdBu', 'RdYlBu',  'Spectral', 'coolwarm_r', 'bwr_r', 'seismic_r')\ncmap_plot(diverge_cmap, 'Diverging')","0253642f":"qualitative_cmap = ('tab10', 'tab20', 'tab20b', 'tab20c',\n         'Pastel1', 'Pastel2', 'Paired',\n         'Set1', 'Set2', 'Set3', 'Accent', 'Dark2' )\n\ncmap_plot(qualitative_cmap, 'Qualitative')","ed8a0f34":"sequential_cmap = ('Greys', 'Reds', 'Oranges', \n         'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu',\n         'Purples', 'YlGnBu', 'Blues', 'PuBu', 'GnBu', 'PuBuGn', 'BuGn',\n         'Greens', 'YlGn','bone', 'gray', 'pink', 'afmhot', 'hot', 'gist_heat', 'copper', \n         'Wistia', 'autumn_r', 'summer_r', 'spring_r', 'cool', 'winter_r')            \n\ncmap_plot(sequential_cmap, 'Sequential')","568da6c9":"netflix_date = netflix_titles[['date_added']].dropna()\nnetflix_date['year'] = netflix_date['date_added'].apply(lambda x : x.split(', ')[-1])\nnetflix_date['month'] = netflix_date['date_added'].apply(lambda x : x.lstrip().split(' ')[0])\n\nmonth_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][::-1]\ndf = netflix_date.groupby('year')['month'].value_counts().unstack().fillna(0)[month_order].T","388933cb":"plt.figure(figsize=(10, 7), dpi=200)\nplt.pcolor(df, cmap='gist_heat_r', edgecolors='white', linewidths=2) # heatmap\nplt.xticks(np.arange(0.5, len(df.columns), 1), df.columns, fontsize=7, fontfamily='serif')\nplt.yticks(np.arange(0.5, len(df.index), 1), df.index, fontsize=7, fontfamily='serif')\n\nplt.title('Netflix Contents Update', fontsize=12, fontfamily='serif', fontweight='bold', position=(0.23, 1.0+0.02))\ncbar = plt.colorbar()\n\ncbar.ax.tick_params(labelsize=8) \ncbar.ax.minorticks_on()\nplt.show()","ddca32c8":"scientific_cmap = ('viridis', 'plasma', 'inferno', 'magma')\ncmap_plot(scientific_cmap, 'Scientific')","05b8a800":"fig, ax = plt.subplots(figsize=(5, 5), dpi=100)\n\n## Gray Box\nax.text(0.1, 0.9, 'Test', color='gray', va=\"center\", ha=\"center\")\n\n## Red Box\nax.text(0.3, 0.7, 'Test', color='red', va=\"center\", ha=\"center\",\n        bbox=dict(facecolor='none', edgecolor='red'))\n\n## Blue Box\nax.text(0.5, 0.5, 'Test', color='blue', va=\"center\", ha=\"center\",\n        bbox=dict(facecolor='none', edgecolor='blue', pad=10.0))\n\n# Green Box\nax.text(0.7, 0.3, 'Test', color='green', va=\"center\", ha=\"center\",\n        bbox=dict(facecolor='none', edgecolor='green', boxstyle='round'))\n\n# Black\nax.text(0.9, 0.1, 'Test', color='black', va=\"center\", ha=\"center\",\n        bbox=dict(facecolor='none', edgecolor='black', boxstyle='round, pad=0.5'))\n\nax.set_xticks([])\nax.set_yticks([])\n\nplt.show()","39ef4291":"import matplotlib.path as mpath\nimport matplotlib.lines as mlines\nimport matplotlib.patches as mpatches\nfrom matplotlib.collections import PatchCollection\n\n\ndef label(xy, text):\n    y = xy[1] - 0.15  # shift y-value for label so that it's below the artist\n    plt.text(xy[0], y, text, ha=\"center\", family='sans-serif', size=14)\n\n\nfig, ax = plt.subplots()\n# create 3x3 grid to plot the artists\ngrid = np.mgrid[0.2:0.8:3j, 0.2:0.8:3j].reshape(2, -1).T\n\npatches = []\n\n# add a circle\ncircle = mpatches.Circle(grid[0], 0.1, ec=\"none\")\npatches.append(circle)\nlabel(grid[0], \"Circle\")\n\n# add a rectangle\nrect = mpatches.Rectangle(grid[1] - [0.025, 0.05], 0.05, 0.1, ec=\"none\")\npatches.append(rect)\nlabel(grid[1], \"Rectangle\")\n\n# add a wedge\nwedge = mpatches.Wedge(grid[2], 0.1, 30, 270, ec=\"none\")\npatches.append(wedge)\nlabel(grid[2], \"Wedge\")\n\n# add a Polygon\npolygon = mpatches.RegularPolygon(grid[3], 5, 0.1)\npatches.append(polygon)\nlabel(grid[3], \"Polygon\")\n\n# add an ellipse\nellipse = mpatches.Ellipse(grid[4], 0.2, 0.1)\npatches.append(ellipse)\nlabel(grid[4], \"Ellipse\")\n\n# add an arrow\narrow = mpatches.Arrow(grid[5, 0] - 0.05, grid[5, 1] - 0.05, 0.1, 0.1,\n                       width=0.1)\npatches.append(arrow)\nlabel(grid[5], \"Arrow\")\n\n# add a path patch\nPath = mpath.Path\npath_data = [\n    (Path.MOVETO, [0.018, -0.11]),\n    (Path.CURVE4, [-0.031, -0.051]),\n    (Path.CURVE4, [-0.115, 0.073]),\n    (Path.CURVE4, [-0.03, 0.073]),\n    (Path.LINETO, [-0.011, 0.039]),\n    (Path.CURVE4, [0.043, 0.121]),\n    (Path.CURVE4, [0.075, -0.005]),\n    (Path.CURVE4, [0.035, -0.027]),\n    (Path.CLOSEPOLY, [0.018, -0.11])]\ncodes, verts = zip(*path_data)\npath = mpath.Path(verts + grid[6], codes)\npatch = mpatches.PathPatch(path)\npatches.append(patch)\nlabel(grid[6], \"PathPatch\")\n\n# add a fancy box\nfancybox = mpatches.FancyBboxPatch(\n    grid[7] - [0.025, 0.05], 0.05, 0.1,\n    boxstyle=mpatches.BoxStyle(\"Round\", pad=0.02))\npatches.append(fancybox)\nlabel(grid[7], \"FancyBboxPatch\")\n\n# add a line\nx, y = np.array([[-0.06, 0.0, 0.1], [0.05, -0.05, 0.05]])\nline = mlines.Line2D(x + grid[8, 0], y + grid[8, 1], lw=5., alpha=0.3)\nlabel(grid[8], \"Line2D\")\n\ncolors = np.linspace(0, 1, len(patches))\ncollection = PatchCollection(patches, cmap=plt.cm.hsv, alpha=0.3)\ncollection.set_array(np.array(colors))\nax.add_collection(collection)\nax.add_line(line)\n\nplt.axis('equal')\nplt.axis('off')\nplt.tight_layout()\n\nplt.show()","69d42cb4":"from matplotlib.ticker import FuncFormatter\ndef age_band(num):\n    for i in range(1, 100):\n        if num < 10*i : \n            return f'under {i*10}'\n \ntitanic_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntitanic_train['age_band'] = titanic_train['Age'].apply(age_band)\ntitanic_age = titanic_train[['age_band', 'Survived']].groupby('age_band')['Survived'].value_counts().sort_index().unstack().fillna(0)\n\ntitanic_age['Survival rate'] = titanic_age[1] \/ (titanic_age[0] + titanic_age[1]) * 100\n\nfig, ax = plt.subplots(1, 2, figsize=(18, 7), dpi=300)\n\n# ax1\nax[0].bar(titanic_age['Survival rate'].index, titanic_age['Survival rate'], color='gray')\nax[0].set_title('Age Band & Survival Rate(Before)')\n\n# ax2\ncolor_map = ['gray' for _ in range(9)]\ncolor_map[0] = color_map[8] = '#3caea3'\nax[1].bar(titanic_age['Survival rate'].index, titanic_age['Survival rate'], alpha=0.7, color=color_map, width=0.6, edgecolor='black', linewidth=1.2)\nax[1].set_title('Age Band & Survival Rate(After)', fontsize=15, fontweight='bold', position=(0.25, 1.0+0.05))\nfor i in titanic_age['Survival rate'].index:\n    ax[1].annotate(f\"{titanic_age['Survival rate'][i]:.02f}%\", \n                   xy=(i, titanic_age['Survival rate'][i] + 2),\n                   va = 'center', ha='center',fontweight='bold', color='#383838'\n                  )\n\nax[1].yaxis.set_major_formatter(FuncFormatter(lambda y, _: f'{y:}%')) \nplt.suptitle('* Focus on survival rates for young and old', x=0.65, y=0.94, color='gray')\nplt.subplots_adjust(left=0.5, right=0.8)\nplt.tight_layout()\nplt.show()","693d513d":"import seaborn as sns\nexam_data = pd.read_csv(\"..\/input\/students-performance-in-exams\/StudentsPerformance.csv\")\nfig, ax = plt.subplots(1, 2, figsize = (15, 7), dpi=150)\n\nax[0].scatter(x='math score', y='reading score',data=exam_data, color='gray')\nax[0].set_title('Before')\n\n# You can use sns.scatterplot + hue parameter\nax[1].scatter(x='math score', y='reading score',data=exam_data[exam_data['gender']=='male'], color='skyblue', alpha=0.5, label='Male', s=70)\nax[1].scatter(x='math score', y='reading score',data=exam_data[exam_data['gender']=='female'], color='salmon', alpha=0.5, label='Female', s=70)\nax[1].set_title('After', fontsize=15, fontweight='bold')\n\nax[1].legend()\n\n# upper & right border remove \nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.show()","e2307ac8":"# preprocessing\nsns.set_style('whitegrid') # plot with grid\n\nmovie = netflix_titles[netflix_titles['type'] == 'Movie']    \nrating_order =  ['G', 'TV-Y', 'TV-G', 'PG', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'PG-13', 'TV-14', 'R', 'NC-17', 'TV-MA']\nmovie_rating = movie['rating'].value_counts()[rating_order]    ","993d6e99":"fig, ax = plt.subplots(1, 1, figsize=(14, 7), dpi=200)\nax.bar(movie_rating.index, movie_rating,  color=\"#d0d0d0\", width=0.6, edgecolor='black')\nax.set_title(f'Distribution of Movie Rating (Before)', fontweight='bold')\nplt.show()","69a23312":"# original code : https:\/\/www.kaggle.com\/subinium\/storytelling-with-data-netflix-ver\n\n\ndef rating_barplot(data, title, height, h_lim=None):\n    fig, ax = plt.subplots(1,1, figsize=(14, 7), dpi=200)\n    if h_lim :\n        ax.set_ylim(0, h_lim)\n    ax.bar(data.index, data,  color=\"#e0e0e0\", width=0.52, edgecolor='black')\n\n    color =  ['green',  'blue',  'orange',  'red']\n    span_range = [[0, 2], [3,  6], [7, 8], [9, 11]]\n\n    for idx, sub_title in enumerate(['Little Kids', 'Older Kids', 'Teens', 'Mature']):\n        ax.annotate(sub_title,\n                    xy=(sum(span_range[idx])\/2 ,height),\n                    xytext=(0,0), textcoords='offset points',\n                    va=\"center\", ha=\"center\",\n                    color=\"w\", fontsize=16, fontweight='bold',\n                    bbox=dict(boxstyle='round4', pad=0.4, color=color[idx], alpha=0.6))\n        ax.axvspan(span_range[idx][0]-0.4,span_range[idx][1]+0.4,  color=color[idx], alpha=0.07)\n    ax.set_title(f'Distribution of {title} Rating (After)', fontsize=15, fontweight='bold', position=(0.20, 1.0+0.03))\n    plt.show()\n    \n\n\nrating_barplot(movie_rating,'Movie', 1200, 1400)","ba13cc87":"import matplotlib\nmatplotlib.font_manager._rebuild()\nwith plt.xkcd():\n    # Based on \"Stove Ownership\" from XKCD by Randall Munroe\n    # https:\/\/xkcd.com\/418\/\n\n    fig = plt.figure()\n    ax = fig.add_axes((0.1, 0.2, 0.8, 0.7))\n    ax.spines['right'].set_color('none')\n    ax.spines['top'].set_color('none')\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_ylim([-30, 10])\n\n    data = np.ones(100)\n    data[70:] -= np.arange(30)\n\n    ax.annotate(\n        'THE DAY I REALIZED\\nI COULD COOK BACON\\nWHENEVER I WANTED',\n        xy=(70, 1), arrowprops=dict(arrowstyle='->'), xytext=(15, -10))\n\n    ax.plot(data)\n\n    ax.set_xlabel('time')\n    ax.set_ylabel('my overall health')\n    fig.text(\n        0.5, 0.05,\n        '\"Stove Ownership\" from xkcd by Randall Munroe',\n        ha='center')","c292ab6c":"with plt.xkcd():\n    # Based on \"The Data So Far\" from XKCD by Randall Munroe\n    # https:\/\/xkcd.com\/373\/\n\n    fig = plt.figure()\n    ax = fig.add_axes((0.1, 0.2, 0.8, 0.7))\n    ax.bar([0, 1], [0, 100], 0.25)\n    ax.spines['right'].set_color('none')\n    ax.spines['top'].set_color('none')\n    ax.xaxis.set_ticks_position('bottom')\n    ax.set_xticks([0, 1])\n    ax.set_xticklabels(['CONFIRMED BY\\nEXPERIMENT', 'REFUTED BY\\nEXPERIMENT'])\n    ax.set_xlim([-0.5, 1.5])\n    ax.set_yticks([])\n    ax.set_ylim([0, 110])\n\n    ax.set_title(\"CLAIMS OF SUPERNATURAL POWERS\")\n\n    fig.text(\n        0.5, -0.05,\n        '\"The Data So Far\" from xkcd by Randall Munroe',\n        ha='center')\n\nplt.show()","b2b979a3":"If you just use span and add text, you can change it as follows.\n(The title bold processing is below.)","0a0bda96":"> many reference & image from [matplotlib cheatsheet](https:\/\/github.com\/rougier\/matplotlib-cheatsheet)\n\n***This is a notebook which organizes various tips and contents of matplotlib which we browse every day.***\n\nI am a developer who loves visualization.\n\nSo far I've built a kernel to share the tips I've gained from doing a lot of visualizations.\n\n**matplotlib** is the most basic visualization tool, and even if you use it well, sometimes you don't need to use the rest of the visualization tools.\n\n### Table of Contents \n\n\n0. **Setting**\n    - dpi\n    - figsize\n    - title\n1. **Alignments**\n    - subplots, tight_layout\n    - subplot2grid\n    - add_axes\n    - add_gridspec\n2. **Colormap**\n    - diverging\n    - qualitative\n    - sequential\n    - scientific\n3. **Text & Annotate & Patch**\n    - parameter\n    - text example\n    - patches example\n4. **Details & Example** \n    - font weight, color, size, etc\n    - Horizontal and Vertical (barplot)\n    - Border(edge) color and thickness\n    - Main Color & Sub Color\n    - Transparency\n    - Span\n5. **MEME**\n    - xkcd style","a888c008":"### Border(Edge) Color & Thickness (Width)\n\nThe point is to make the graph more readable by **drawing separate borders** than simply drawing the graph.\n\nThere are many examples of drawing the borders of graphs in R notebooks, so it's good to refer to those parts as well.\n\nBorders are a good tool because people focus on color, shape, and contrast.\n\nThe border lines should be solid color or the main color series of the graph, and it is better to make the distinction by adjusting the **transparency or brightness**.","624e22ed":"## 0. Setting \n\nSet the resolution through the **dpi** (Dots per Inch) setting of the figure.\nmatplotlib has a low default resolution itself, so setting this up is a bit more professional.\n\n`plt.rcParams['figure.dpi'] = 200` or `dpi=200`\n\nAnd for every plot set **figsize**.\nThe graph gives a very different feeling depending on the ratio. (I think it's best to try this heuristic multiple times.)\n\nThere are many places in matplotlib where you can write **titles** based on objects such as `plt.title ()`, `ax.set_title ()`, `fig.suptitle()`. If you add a title that takes into account font size and font family, fontweight, position, etc., it will be more readable.","5b793ea9":"Here you can change the color of ax or plt itself, such as facecolor, to make it look more dashboard-like.","3b7c3b96":"## 1. Alignments\n\n> The first nine graph plots (3 by 3) are a combination of matplotlib layout and design.\n\n- `subplots`\n- `subplot2grid`\n- `add_axes`\n- `gridspec`, `add_subplot`\n- `inset_axes` (TBD)\n\nTwo or more graphs are much more visually and semantically better than just one.\n\nThe easiest way to do this is to place the rectangles of the same shape.\n\nUsually you can start with the initial size with subplots.","79b36168":"### Qualitative Colormap\n\nA palette of independent colors, often used for **categorical variables**. \n\nIt is recommended to organize up to 10 colors, and to group more and smaller categories with other. \n\nRepeating colors can be confusing, so ***try to avoid overlapping as much as possible.*** It's a good idea to change color to color rather than saturation and brightness.\n\nPersonally, I like `Set2` palette.","62a72b60":"### Transparency\n\nI told you to use transparency above, but transparency is a great tool.\n\nScatter plots also contain important points with many **overlapping** points. That's why it's important to know the overlapping data by adjusting transparency.\n\nWhen **comparing** lineplots or barplots, placing two or more plots together using transparency allows you to hold comparison information.\n\nIf you add transparency to the graph, you can complete the graph with refined colors.\n\n- `alpha` : Parameter name of normal transparency setting","f6b03cab":"Another way is to use gridspec. This allows you to use `add_subplot` together, similar to subplots to grid.\n\nThis approach allows you to take advantage of the concept of `list` to use a developer-friendly grid.","d8afa17b":"### Main Color & Sub Color\n\nIf you draw a plot of seaborn, it is displayed in various colors by default. You can draw various colorful graphs while changing the palette.\n\nBut basically, the visualization should focus on information, so it's not always nice to have a colorful plot.\n\nRather, think about what data you want to focus on.\nIt is better to make a difference between the main color with **strong color** and the sub color of **achromatic color** system.\n\nAlternatively, it is a good idea to choose the palette according to the application mentioned above.\n\nIn the case of a colormap, you can ***select a palette or pass it to a list***, so it is convenient to pass it to a list when highlighting a specific part.","4d45a992":"But should it be the same size depending on the subplot?\nFor example, bar graphs and pie charts are often very different in ratio.\n\nIn this case, the layout should be different.\n\nIn this case, you can easily use the grid system using `plt.subplot2grid`.\nIf you're a ***front-end developer***, it may be easier to understand.","f08b091f":"## 2. Colormap\n\n> [How to Choose Colors for Your Data Visualizations](https:\/\/medium.com\/nightingale\/how-to-choose-the-colors-for-your-data-visualizations-50b2557fa335)\n\nColor is very important in the graph. Of course the matplotlib team has already created a good color palette, and we just need to use it.\n\nThis time, I'll show you the color palette in matplotlib and which graph to use.\n\n- diverging\n- qualitative\n- sequential\n- scientific","9c8ee817":"Using a patch with text is more effective.\n\nExcept for path patches, they are provided by default, so you can use them well.\n\n**Arrow is especially effective.**","1925342c":"## 4. Details & Examples\n\nIn the plot you can make various settings. \n\n> Of course, adding the text or annotate mentioned above is a good idea.\n\n**You can set the following details:**\n\n- Horizontal and Vertical (barplot)\n- Border(edge) color and thickness\n- Main Color & Sub Color\n- Transparency\n- Span\n\n### Font Weight, Color, Family, Size ...\n\nI usually set the details in font weight and size. It is good because it is easy to see just by setting it to bold. Also, if the size of the text is too big or too small, the proportions are strange.\n\nThe fonts do not vary, but the difference between serifs and sans serifs can make a difference.\n\nThe **Tex** syntax is also applicable, so use that as well.\n\n- **keyword** : `fontsize`, `color`, `fontweight`, `fontfamily`\n\n### Horizontal keyboard & Vertical (barplot)\n\nIn general, when the number of x-axes is large, the **readability** of the barplot is significantly lower.\n\nFor example, seaborn's `countplot` often overlaps the x-axis and often makes it less readable.\n\nThis is due to the fact that in a notebook environment, the width is the length of the monitor.\n\nSo in this case, you can place the graph vertically so that the axes are well read and the graph is easier to read.","3cb57df7":"### Diverging Colormap\n\nThis colormap is usually used in visualizations where the median is obvious.\n\nIt is usually visualized on a white background, white in the center, and darker in color toward both ends. In other words, the lighter the value, the closer to the center, the darker, the closer to the end.\n\nUseful for **expressing bias**, such as correlation and political disposition.\n\nCurrently it is a continuous colormap, but you can also use discrete colorpalette depending on the interval.\n\nmatplotlib loads the library's palette with that element in the `cmap` parameter. You can, of course, make it custom.","eb4b1817":"### Span\n\nGood division is enough to give points. Zoning can be added for a variety of reasons, depending on the content or to classify units.\n\n- `axvspan` : vertical span\n- `axhspan` : horizontal span\n\nyou can set color, alpha(transparency), range, etc","12b8be15":"### Scientific Colormap\n\nI don't know why, but it's used a lot in scientific visualization.\nIt is used as a basic colormap of plotly and has high utilization and relatively professional feel.\n\nI've seen it often used in **signal data** like spectrograms when dealing with voice data.","7f7e60b3":"## MEME : xkcd theme\n\n- [xkcd](https:\/\/xkcd.com\/) : Webcomic for Geeks\n\n> Depending on the current kaggle and version, the font is broken, but you can draw a graph like this:","6fa883d9":"### Sequential Colormap\n\nThis palette is appropriate for variables with **numbers or sorted values**. \n\nUsed a lot in **comparison** of figures. Especially effective for expressing density. Take advantage of map graphs for better visualization.\n\nSimilar to diverging, but with a slightly different part because each endpoint is a color criterion, not the median. It usually indicates that light values are dark on dark backgrounds and dark values on light backgrounds. \n\nIt is recommended to use a single hue for the color.\n\n\nLike diverging, it can also be used in **discrete form**.\n\n> `_r` means *'reverse'*.","f50f970c":"It can be used to give a gradual feeling or to check the emphasis of a particular part.\n\nThe following visualizations are possible:","786322d3":"Alternatively, you can use `plt.add_axes()` to create an ax where you want.","be3bb81d":"## 3. Text & Annotate & Patch\n\nMany people often end up with just a picture in the graph, but the detail of the graph comes from the description. Just putting text on a specific part can change the feel of the graph.\n\n`ax.text` and `ax.annotate` are almost similar, but each has a different purpose.\n\n- In `ax.text`, The `first two numbers` represent the ratio coordinates in the graph. \n- In `ax.annotate`, `xy` represent the coordinates in the graph. \n\n- `va`, `ha` is a parameter that determines whether the current coordinate is the center of the text or the left \/ right of the text.\n- `color` stands for color, and you can enter a custom color or rgb value directly.\n- `bbox` sets an element for the box that wraps the text.\n    - Internal color (`facecolor`) and edge color(`edgecolor`) can be set separately.\n    - You can adjust the space by setting `pad`ding like in html.\n    - You can use the `boxstyle` to adjust the end of the rectangle.","45686838":"Personally, I like to use this palette when visualizing after dimension reduction such as t-sne.","4adf9773":"The first of the `plt.subplot()` parameters specifies the number of rows and the second the number of columns.\nThe graph looks a bit frustrating. In this case, you can use `plt.tight_layout()` to solve the frustration."}}