{"cell_type":{"13651f1e":"code","b1c6bc87":"code","87e01579":"code","d9ab7264":"code","574c9f83":"code","42b67bc6":"code","265cd42b":"code","496f7cb6":"code","47de9f96":"code","7f5bfb3f":"code","7caa81dc":"code","94c2b3d4":"code","f8405de3":"code","e232558e":"markdown"},"source":{"13651f1e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport seaborn as sns\nimport matplotlib as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1c6bc87":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv') #train\uc5d0 titanic\/train.csv\ub97c \uc77d\uc74c\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv') #test\uc5d0 titanic\/test.csv\ub97c \uc77d\uc74c\nsubmission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv') #submission(\uc81c\ucd9c)\uc5d0 titanic\/gender_submission.csv\ub97c \uc77d\uc74c","87e01579":"train.head() #\uc5f0\uc2b5\ud560 \ub370\uc774\ud130\uc758 \uc55e\uc5d0\uc11c \ubd80\ud130 1~5\uae4c\uc9c0\ub97c \ud589\ub82c\ub85c \ub098\ud0c0\ub0c4","d9ab7264":"train.isnull().sum()","574c9f83":"train = train.drop(['Cabin', 'Embarked', 'Name', 'Ticket', 'PassengerId'],axis=1)\ntest = test.drop(['Cabin', 'Embarked', 'Name', 'Ticket'],axis=1)","42b67bc6":"train[\"Age\"].fillna(train.groupby(\"Sex\")[\"Age\"].transform(\"mean\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Sex\")[\"Age\"].transform(\"mean\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Sex\")[\"Fare\"].transform(\"median\"), inplace=True)","265cd42b":"train.isnull().sum()","496f7cb6":"sex_mapping = {\"male\": 0, \"female\": 1}\ntrain['Sex'] = train['Sex'].map(sex_mapping)\ntest['Sex'] = test['Sex'].map(sex_mapping)","47de9f96":"ml = LogisticRegression(solver='lbfgs')","7f5bfb3f":"x = train.drop(['Survived', 'Age', 'Parch', 'Fare', 'SibSp'], axis=1)\ny = train['Survived']\nml.fit(x, y)","7caa81dc":"ml.coef_","94c2b3d4":"k_fold = KFold(n_splits=10, shuffle=True, random_state=0)\n\nscoring = 'accuracy'\nscore = cross_val_score(ml, x, y, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)\n\nround(np.mean(score)*100, 2)","f8405de3":"predict = ml.predict(test.drop(['PassengerId', 'Age', 'Parch', 'Fare', 'SibSp'], axis=1))\nresult =pd.DataFrame({\n    'PassengerId': test['PassengerId'],\n    'Survived': predict\n})\nresult.to_csv('result.csv', index=False) ","e232558e":"**\uc6b0\ub9ac\uc758 \ubaa9\ud45c : \uc0dd\uc874\uc790 \uc608\uce21 -> \uc5b4\ub5a0\ud55c \uc694\uc18c\uac00 \uc0dd\uc874\uc5d0 \uc601\ud5a5\uc774 \uac00\ub294\uc9c0 \ud655\uc778**\n\nPassengerId(\uc2b9\uac1d \ubc88\ud638)\n\nSurvived(\uc0dd\uc874 \uc5ec\ubd80)\n\nPclass(\ud2f0\ucf13 \ub4f1\uae09)\n\nName(\uc774\ub984)\n\nSex(\uc131)\n\nAge(\ub098\uc774)\n\nSibSp(\ud568\uaed8 \ud0d1\uc2b9\ud55c \uc790\ub140 \/ \ubc30\uc6b0\uc790 \uc758 \uc218)\n\nParch(\ud568\uaed8 \ud0d1\uc2b9\ud55c \ubd80\ubaa8\ub2d8 \/ \uc544\uc774\ub4e4 \uc758 \uc218)\n\nTicket(\ud2f0\ucf13 \ubc88\ud638)\n\nFare(\ud0d1\uc2b9 \ube44\uc6a9)\n\nCabin(\uac1d\uc2e4\ubc88\ud638)\n\nEmbarked(\ud56d\uad6c \/ \ud0d1\uc2b9 \uc7a5\uc18c) "}}