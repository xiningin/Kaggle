{"cell_type":{"c741e727":"code","0c58eee7":"code","3416d808":"code","3d63139b":"code","8fe84264":"code","b80d57d8":"code","9226bcd3":"code","015b8473":"code","f16f9c96":"code","35738846":"code","fbda4970":"code","59fafbe0":"code","f72a1cab":"code","52603922":"code","6a1d9e60":"code","4b16ee46":"code","ad843477":"code","5f0899cf":"code","66305a94":"markdown","472d37fc":"markdown","eb9a8421":"markdown","884a324f":"markdown","ec9f4c33":"markdown","95301c79":"markdown","3578db42":"markdown","45f71eaf":"markdown"},"source":{"c741e727":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c58eee7":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Dropout\nfrom sklearn.model_selection import train_test_split\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import RegexpTokenizer\nfrom nltk.stem.porter import PorterStemmer\nfrom sklearn.naive_bayes import MultinomialNB, BernoulliNB, GaussianNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport nltk\nimport matplotlib.pyplot as plt \nfrom sklearn.preprocessing import LabelEncoder","3416d808":"dataset = pd.read_csv(\"\/kaggle\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv\")\ndataset.head()","3d63139b":"# Checking our target feature\nnp.unique(dataset.sentiment, return_counts=True)","8fe84264":"# Visualizing data distribution\ntarget_count = dataset.groupby('sentiment').size().reset_index(name='counts')\nplt.bar(target_count.sentiment, target_count.counts)\nplt.xticks([0,1], labels=[\"Negative\", \"Positive\"])\nplt.title(\"Target Distribution\")\nplt.show()","b80d57d8":"def preprocess(reviews):\n    tokenizer = RegexpTokenizer(r'\\w+')\n    review = str(reviews)\n    review = review.lower()\n    review = review.replace(\"<br \/><br \/>\", \"\")\n    tokens = tokenizer.tokenize(review)\n\n    stop_words = set(stopwords.words('english'))\n    stopwords_removed = [i for i in tokens if i not in stop_words]\n\n    ps = PorterStemmer()\n    stem_text = [ps.stem(i) for i in stopwords_removed]\n\n    cleaned_reviews = \" \".join(stem_text)\n    \n    return cleaned_reviews","9226bcd3":"X_preprocessed = [preprocess(i) for i in dataset.review]\n\nle = LabelEncoder()\n\ny = le.fit_transform(dataset.sentiment)","015b8473":"tfidf = TfidfVectorizer(max_features=5000, ngram_range=(1,3))\nX = tfidf.fit_transform(X_preprocessed).toarray()","f16f9c96":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=10)\nprint(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)","35738846":"# Creating NB models\nmodel1 = MultinomialNB()\nmodel2 = GaussianNB()\nmodel3 = BernoulliNB()","fbda4970":"model1.fit(X_train, y_train)\nmodel2.fit(X_train, y_train)\nmodel3.fit(X_train, y_train)","59fafbe0":"model1_acc = model1.score(X_test,y_test)\nmodel2_acc = model2.score(X_test,y_test)\nmodel3_acc = model3.score(X_test, y_test)","f72a1cab":"print('Model 1 Train score', model1.score(X_train,y_train))\nprint('Model 1 Test score', model1.score(X_test,y_test))\nprint()\nprint('Model 2 Train score', model2.score(X_train,y_train))\nprint('Model 2 Test score', model2.score(X_test,y_test))\nprint()\nprint('Model 3 Train score', model3.score(X_train,y_train))\nprint('Model 3 Test score', model3.score(X_test,y_test))","52603922":"# Creating Neural Network Model\nmodel4 = Sequential()\n\nmodel4.add(Dense(16, activation='relu', input_shape=(5000,)))\nmodel4.add(Dense(16, activation='relu'))\nmodel4.add(Dropout(0.2))\nmodel4.add(Dense(1, activation='sigmoid'))\n\nmodel4.summary()","6a1d9e60":"model4.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","4b16ee46":"hist = model4.fit(X_train, y_train, batch_size=256, validation_data=(X_test, y_test), epochs=2)","ad843477":"model4_acc = model4.evaluate(X_test, y_test)[1]","5f0899cf":"models = ['Model1', 'Model2', 'Model3', 'Model4']\n\nacc = [model1_acc, model2_acc, model3_acc, model4_acc]\n\nplt.figure(figsize=(15,5))\nplt.barh(models, acc)\n  \nfor index, value in enumerate(acc):\n    plt.text(value, index,\n             str(\"%.2f\"%value))\nplt.title(\"Model Accuracy\")\nplt.show()","66305a94":"### We have a Balanced Dataset","472d37fc":"# Conclusion","eb9a8421":"# Data Preprocessing","884a324f":"# Splitting the Data into Train and Test","ec9f4c33":"### We can conlcude from the above graph that Model 4 has the highest accuracy which is Neural Network Model\n### Followed by Model 1 that is MultinomialNB","95301c79":"# Creating Different Models","3578db42":"# Visualizing different Model Accuracy","45f71eaf":"# Importing Data and doing Basic Analysis"}}