{"cell_type":{"0c0eae5b":"code","d53937d0":"code","6a6b4bf8":"code","9cdebc68":"code","a1c3aa7c":"code","5e1f3caf":"code","1063b67d":"code","31f7de39":"code","c015fee1":"code","1ad5a238":"code","fe599609":"code","f48de986":"code","2a658261":"code","dd749664":"code","21d8e6f8":"code","3532b247":"code","5502ec4e":"code","8326ba92":"markdown"},"source":{"0c0eae5b":"import pandas as pd\nimport numpy as np\nimport os.path\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom PIL import Image\n\n%matplotlib inline\nfrom keras.applications import ResNet50\nfrom keras.optimizers import Adam\nimport cv2\nfrom tqdm import tqdm\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras import backend as K\nfrom keras import applications\nfrom keras.models import Model\nfrom keras import optimizers\nfrom keras.utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.utils import np_utils\nfrom keras.callbacks import EarlyStopping","d53937d0":"train = pd.read_csv('\/kaggle\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/train.csv')\ntrain.head()","6a6b4bf8":"pd.value_counts(train['Class']).plot.bar()\nplt.xlabel('Class')\nplt.ylabel('Frequency')\ntrain['Class'].value_counts()","9cdebc68":"TRAIN_PATH = '..\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/train\/'\nTEST_PATH = '..\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/test\/'","a1c3aa7c":"IMG_SIZE = 64\n\ndef read_img(img_path):\n    img = cv2.imread(img_path, cv2.IMREAD_COLOR)\n    img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))\n    return img","5e1f3caf":"train_img = []\nfor img_name in tqdm(train['Image'].values):\n    train_img.append(read_img(TRAIN_PATH + img_name ))\n    \nx_train = np.array(train_img, np.float32) \/ 255\nprint(x_train.shape)","1063b67d":"label_list = train['Class'].tolist()\nlabel_numeric = {k: v+1 for v, k in enumerate(set(label_list))}\ny_train = [label_numeric[k] for k in label_list]\ny_train = np.array(y_train)","31f7de39":"y_train = to_categorical(y_train)\nprint(y_train.shape)","c015fee1":"base_model =   applications.ResNet50(weights='imagenet', include_top=False, input_shape=(IMG_SIZE, IMG_SIZE, 3))","1ad5a238":"add_model = Sequential()\nadd_model.add(Flatten(input_shape=base_model.output_shape[1:]))\nadd_model.add(Dropout(0.4))\nadd_model.add(Dense(128, activation='relu'))\nadd_model.add(Dropout(0.3))\nadd_model.add(Dense(y_train.shape[1], activation='softmax'))\n\nmodel = Model(inputs=base_model.input, outputs=add_model(base_model.output))\n\nmodel.compile(loss='categorical_crossentropy', optimizer=optimizers.SGD(lr=1e-4, momentum=0.9),\n              metrics=['accuracy'])\n\nmodel.summary()","fe599609":"batch_size = 64      \nepochs = 20                \n\ntrain_datagen = ImageDataGenerator(\n        rotation_range=30, \n        width_shift_range=0.1, \n        height_shift_range=0.1,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True)\n\ntrain_datagen.fit(x_train)","f48de986":"history = model.fit_generator( train_datagen.flow(x_train, y_train, batch_size=batch_size),\n                               steps_per_epoch=x_train.shape[0] \/\/ batch_size,\n                               epochs=epochs)","2a658261":"import gc\ngc.collect()","dd749664":"test_images = os.listdir(TEST_PATH)\ntest_img = []\nfor image in test_images:\n    test_img.append(read_img(TEST_PATH + image))","21d8e6f8":"x_test = np.array(test_img, np.float32) \/ 255\npredictions = model.predict(x_test)","3532b247":"predictions = np.argmax(predictions, axis=1)\nrev_y = {v:k for k,v in label_numeric.items()}\npred_labels = [rev_y[k] for k in predictions]","5502ec4e":"sub = pd.DataFrame({'Image': test_images, 'Class': pred_labels})\nsub.to_csv('result.csv', index = False)\nsub.head()","8326ba92":"Class_map={'Miscellaneous':0,'Christmas_Tree':1,'Jacket':2,'Candle':3,'Airplane':4,'Snowman':5}\ninverse_map={0:'Miscellaneous',1:'Christmas_Tree',2:'Jacket',3:'Candle',4:'Airplane',5:'Snowman'}\ntrain['Class']=train['Class'].map(Class_map)"}}