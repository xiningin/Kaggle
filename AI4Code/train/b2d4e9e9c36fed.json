{"cell_type":{"fa884631":"code","54f10618":"code","a4369eae":"code","6682bfe4":"code","6a56d8e5":"code","3710d626":"code","123e5a8d":"code","c8c8a0cc":"code","49671d7a":"code","317bf4cc":"code","779b79eb":"markdown","682a8983":"markdown"},"source":{"fa884631":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","54f10618":"!pip install feature_engine","a4369eae":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# from feature-engine\nfrom feature_engine.imputation import (\n    AddMissingIndicator,\n    MeanMedianImputer,\n    CategoricalImputer\n)\nfrom feature_engine.encoding import OrdinalEncoder\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.pipeline import Pipeline","6682bfe4":"NUM_COLUMNS_WITH_MISSING_VALUES = ['wind_speed(m\/s)', 'atmospheric_temperature(\u00b0C)',\n       'shaft_temperature(\u00b0C)', 'blades_angle(\u00b0)', 'gearbox_temperature(\u00b0C)',\n       'engine_temperature(\u00b0C)', 'motor_torque(N-m)',\n       'generator_temperature(\u00b0C)', 'atmospheric_pressure(Pascal)', 'area_temperature(\u00b0C)',\n       'windmill_body_temperature(\u00b0C)', 'wind_direction(\u00b0)', 'resistance(ohm)',\n       'rotor_torque(N-m)', 'blade_length(m)', 'blade_breadth(m)',\n       'windmill_height(m)']\n\nCAT_COLUMNS_WITH_MISSING_VALUES = ['turbine_status', 'cloud_level']\nCAT_COLUMNS = ['turbine_status', 'cloud_level']\n\npipe = Pipeline([\n    ('missing_indicator_imputer', AddMissingIndicator(missing_only=True, variables = NUM_COLUMNS_WITH_MISSING_VALUES)),\n\n    ('meanImputer', MeanMedianImputer(imputation_method='mean',\n                                         variables=NUM_COLUMNS_WITH_MISSING_VALUES)),\n\n    ('missing_cat_imputer', CategoricalImputer(variables=CAT_COLUMNS_WITH_MISSING_VALUES)),\n    \n    ('ord_encoder', OrdinalEncoder(encoding_method='ordered', variables=CAT_COLUMNS)),\n    \n\n#     ('reg', GradientBoostingRegressor(\n#         #n_estimators=500, learning_rate=0.3,\n#         #                               max_features=2, max_depth=2, random_state=0)\n#         #criterion='mse',random_state=0,max_depth=5,n_estimators=500,min_samples_split=2,min_samples_leaf=2 #96.40\n        \n#     ))\n    \n      ('reg',XGBRegressor(\n          n_estimators=500,max_depth=5,booster='gbtree',n_jobs=-1,learning_rate=0.1,reg_lambda=0.01,reg_alpha=0.3 #96.43\n      ))\n])","6a56d8e5":"df_train = pd.read_csv('\/kaggle\/input\/a-fine-windy-day-hackerearth-ml-challenge\/train_data.csv')\n#Dropping rows where target variable is null\ndf_train = df_train[df_train['windmill_generated_power(kW\/h)'].isna() == False]","3710d626":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(\n                df_train.drop(['windmill_generated_power(kW\/h)'], axis=1),\n                df_train['windmill_generated_power(kW\/h)'], test_size=0.2, random_state=0)","123e5a8d":"COLUMNS_TO_DROP = ['tracking_id', 'datetime']\nX_train = X_train.drop(COLUMNS_TO_DROP, axis = 1)\nX_test = X_test.drop(COLUMNS_TO_DROP, axis = 1)","c8c8a0cc":"pipe.fit(X_train, y_train)","49671d7a":"print(pipe.score(X_train, y_train))\nprint(pipe.score(X_test, y_test))","317bf4cc":"df_train = pd.read_csv('\/kaggle\/input\/a-fine-windy-day-hackerearth-ml-challenge\/train_data.csv')\ndf_train = df_train[df_train['windmill_generated_power(kW\/h)'].isna() == False]\n\ndf_test = pd.read_csv('\/kaggle\/input\/a-fine-windy-day-hackerearth-ml-challenge\/test_data.csv')\ndf_sol = df_test[['tracking_id', 'datetime']]\n\ndf_train = df_train.drop(COLUMNS_TO_DROP, axis = 1)\ndf_test = df_test.drop(COLUMNS_TO_DROP, axis = 1)\n\npipe.fit(df_train.drop(['windmill_generated_power(kW\/h)'], axis = 1), df_train['windmill_generated_power(kW\/h)'])\nsol = pipe.predict(df_test)\ndf_sol['windmill_generated_power(kW\/h)'] = sol\ndf_sol.to_csv('submission.csv', index = False)","779b79eb":"**Points:**\n* Trying to learn Machine Learning by participating in the competitions.\n* Achieved accuracy of 96.4%, and trying to further improve it.\n* Beginner in Machine Leraning, so may be there will be naive mistake, **feedbacks are most welcome**.\n* Used feature_engine library. Install it on kaggle using `!pip install feature_engine`\n* Used sklearn pipeline to minimize the code and make it simple","682a8983":"# A Fine Windy Day: HackerEarth Machine Learning challenge"}}