{"cell_type":{"85928786":"code","4ec326ec":"code","206c7207":"code","aefeaedd":"code","e9d7bead":"code","612440ce":"code","4c4f0f4d":"code","afa6a409":"code","1b21af0a":"code","12df9394":"code","a8ea07cb":"code","0f8a1be3":"code","2727c828":"code","8c69ff0d":"markdown","c400584b":"markdown"},"source":{"85928786":"# Imports\nimport torch\nimport torch.nn as nn  # All neural network modules, nn.Linear, nn.Conv2d, BatchNorm, Loss functions\nimport torch.optim as optim  # For all Optimization algorithms, SGD, Adam, etc.\nimport torch.nn.functional as F  # All functions that don't have any parameters\nfrom torch.utils.data import (\n    DataLoader,\n)  # Gives easier dataset managment and creates mini batches\nimport torchvision.datasets as datasets  # Has standard datasets we can import in a nice way\nimport torchvision.transforms as transforms  # Transformations we can perform on our dataset\n","4ec326ec":"class CNN(nn.Module):\n    def __init__(self,in_channels = 1,num_classes = 10):\n        super(CNN, self).__init__()\n        self.conv1 = nn.Conv2d(in_channels = 1,out_channels = 8,kernel_size = (3,3),stride = (1,1),padding = (1,1))\n        self.pool = nn.MaxPool2d(kernel_size = (2,2),stride = (2,2))\n        self.conv2 = nn.Conv2d(in_channels = 8, out_channels = 16,kernel_size = (3,3),stride = (1,1),padding = (1,1))\n        self.fc1 = nn.Linear(16*7*7 , num_classes)\n        \n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = self.pool(x)\n        x = F.relu(self.conv2(x))\n        x = self.pool(x)\n        x = x.reshape(x.shape[0],-1)\n        x = self.fc1(x)\n        \n        return x","206c7207":"# set device\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","aefeaedd":"#Hyperparameter\nin_channel = 1\nnum_classes = 10\nlearning_rate = 0.001\nbatch_size = 64\nnum_epochs = 10\n","e9d7bead":"!mkdir dataset\n!ls","612440ce":"!pwd","4c4f0f4d":"#Load data\ntrain_dataset = datasets.MNIST(root = '\/kaggle\/working\/dataset\/',train = True ,transform =transforms.ToTensor(),download = True)\ntrain_loader = DataLoader(dataset = train_dataset,batch_size = batch_size,shuffle = True)\n","afa6a409":"test_dataset = datasets.MNIST(root = '\/kaggle\/working\/dataset\/',train = False,transform = transforms.ToTensor(),download = True)\ntest_loader = DataLoader(dataset = test_dataset,batch_size = batch_size,shuffle = True)\n","1b21af0a":"# Initialize network\n\nmodel = CNN().to(device)","12df9394":"#loss and optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(),lr = learning_rate)\n","a8ea07cb":"\n# Train Network\nfor epoch in range(num_epochs):\n    for batch_idx, (data, targets) in enumerate(train_loader):\n        # Get data to cuda if possible\n        data = data.to(device=device)\n        targets = targets.to(device=device)\n\n        # forward\n        scores = model(data)\n        loss = criterion(scores, targets)\n\n        # backward\n        optimizer.zero_grad()\n        loss.backward()\n\n        # gradient descent or adam step\n        optimizer.step()\n\n","0f8a1be3":"# Check accuracy on training & test to see how good our model\ndef check_accuracy(loader,model):\n    if loader.dataset.train:\n        print(\"Checking accuracy on training data\")\n    else:\n        print(\"Cehcking accuracy on test data\")\n    \n    num_correct = 0\n    num_samples = 0\n    model.eval()\n    \n    with torch.no_grad():\n        for x,y in loader:\n            x = x.to(device = device)\n            y = y.to(device = device)\n            \n            scores = model(x)\n            _,predictions = scores.max(1)\n            num_correct += (predictions == y).sum()\n            num_samples += predictions.size(0)\n        print(f\"Got {num_correct} \/ {num_samples} with accuracy {float(num_correct)\/float(num_samples)*100:.2f}\")\n    model.train()","2727c828":"\ncheck_accuracy(train_loader, model)\ncheck_accuracy(test_loader, model)","8c69ff0d":"\nExample code of a simple CNN network training on MNIST dataset.\nThe code is intended to show how to create a CNN network as well\nas how to initialize loss, optimizer, etc. in a simple way to get\ntraining to work with function that checks accuracy as well.\n","c400584b":"* Stride denotes how many steps we are moving in each steps in convolution.By default it is one.\n* Padding is a process of adding zeros to the input matrix symmetrically. \n* Kernel size is the size of filter used in convolutions"}}