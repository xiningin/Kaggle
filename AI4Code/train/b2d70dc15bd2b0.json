{"cell_type":{"f61d1d3d":"code","7fc87a20":"code","399cfdbf":"code","a426c9bc":"code","d6eb88b1":"code","5cbf6001":"code","cd4473de":"code","91969b88":"code","ce35192e":"code","a378909a":"code","827ae6cd":"code","a5ba8b68":"code","4f4bb7fb":"code","d40c0b3b":"code","c2d4fadf":"code","971f9667":"code","b7d3f143":"code","17d97a09":"code","64cb61d2":"code","4afdb30d":"code","c899d309":"code","c817d8c4":"code","14f5b0f4":"markdown","5543680e":"markdown","52caf48a":"markdown"},"source":{"f61d1d3d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom fbprophet import Prophet\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7fc87a20":"covid_confirm = pd.read_csv(\"..\/input\/confirmed.csv\")\ncovid_confirm","399cfdbf":"covid_recov = pd.read_csv(\"..\/input\/recovered.csv\")\ncovid_recov","a426c9bc":"covid_death = pd.read_csv(\"..\/input\/death.csv\")\ncovid_death","d6eb88b1":"Country = covid_death['Country\/Region']\nCountry","5cbf6001":"# extracting data only for Canada \nCanada_data = covid_death.loc[Country=='Canada']\nCanada_data","cd4473de":"#pre-processing the dataset\nCanada_deaths = Canada_data.iloc[:, 4:]\nCanada_deaths","91969b88":"#Summation of death each day\nDaily_Deaths = Canada_deaths.sum()\nDaily_Deaths","ce35192e":"# count of death each day\nCanada_deaths.loc['Total Deaths'] = Daily_Deaths\nCanada_deaths","a378909a":"Dates = list(Canada_deaths.columns.values)\nDates_dataf = pd.DataFrame(Dates)\nDates_dataf","827ae6cd":"total_death = list(Canada_deaths.T['Total Deaths'])\ntotal_death = pd.DataFrame(total_death)\ntotal_death","a5ba8b68":"deaths_per_dates = pd.concat([Dates_dataf, total_death], axis =1)\ndeaths_per_dates.columns =['ds', 'y']\ndeaths_per_dates","4f4bb7fb":"# forecasting the death for upcoming 10 days\nprediction = Prophet(interval_width = 0.90)\nprediction.fit(deaths_per_dates)\nFuture_deathtoll = prediction.make_future_dataframe(periods = 10)\nFuture_counts = prediction.predict(Future_deathtoll)\n\nFuture_counts","d40c0b3b":"Future_data = Future_counts[['ds', 'yhat', 'yhat_lower','yhat_upper']]\nFuture_data","c2d4fadf":"prediction.plot(Future_data)","971f9667":"# forecasting the death for upcoming 20 days\nprediction = Prophet(interval_width = 0.90)\nprediction.fit(deaths_per_dates)\nFuture_deathtoll = prediction.make_future_dataframe(periods = 20)\nFuture_counts = prediction.predict(Future_deathtoll)\n\nFuture_data = Future_counts[['ds', 'yhat', 'yhat_lower','yhat_upper']]","b7d3f143":"prediction.plot(Future_data)","17d97a09":"# forecasting the death for upcoming 30 days\nprediction = Prophet(interval_width = 0.90)\nprediction.fit(deaths_per_dates)\nFuture_deathtoll = prediction.make_future_dataframe(periods = 30)\nFuture_counts = prediction.predict(Future_deathtoll)\n\nFuture_data = Future_counts[['ds', 'yhat', 'yhat_lower','yhat_upper']]","64cb61d2":"prediction.plot(Future_data)","4afdb30d":"# forecasting the death for next 1 year\nprediction = Prophet(interval_width = 0.90)\nprediction.fit(deaths_per_dates)\nFuture_deathtoll = prediction.make_future_dataframe(periods = 365)\nFuture_counts = prediction.predict(Future_deathtoll)\n\nFuture_data = Future_counts[['ds', 'yhat', 'yhat_lower','yhat_upper']]","c899d309":"prediction.plot(Future_data)","c817d8c4":"from fbprophet.plot import plot_plotly\nimport plotly.offline as py\npy.init_notebook_mode()\n\n# forecasting the death for next 30 days\nprediction = Prophet(interval_width = 0.90)\nprediction.fit(deaths_per_dates)\nFuture_deathtoll = prediction.make_future_dataframe(periods = 30)\nFuture_counts = prediction.predict(Future_deathtoll)\n\nFuture_data = Future_counts[['ds', 'yhat', 'yhat_lower','yhat_upper']]\n\nfig = plot_plotly(prediction, Future_data)  # This returns a plotly Figure\npy.iplot(fig)","14f5b0f4":"#### Death levels are predicted to rise exponentially after 17 April based on current and past death rates, and this trend will continue in the month of May as well.","5543680e":"# Death Rate Prediction of Canada","52caf48a":"# **Loading and exploring the dataset**"}}