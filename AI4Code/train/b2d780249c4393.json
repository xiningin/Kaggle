{"cell_type":{"8a128662":"code","d6e1fd6f":"code","1d376314":"code","dc6c7678":"code","00574737":"code","b2c8cdb1":"code","e139547d":"code","c8f1ebc1":"code","b518da04":"code","9012c6a6":"code","682f09f1":"code","d4060a8d":"code","4076d3fb":"code","324a5341":"markdown","75bb9991":"markdown","3a34eafc":"markdown","e4763c85":"markdown"},"source":{"8a128662":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d6e1fd6f":"pip install imutils","1d376314":"# importing the necessary packages\nfrom skimage.metrics import structural_similarity\nimport imutils\nimport cv2\n","dc6c7678":"# load the two input images\nimageA = cv2.imread('\/kaggle\/input\/images\/Pre.jpg')\nimageB = cv2.imread('\/kaggle\/input\/images\/Post.jpg')\n# convert the images to grayscale\ngrayA = cv2.cvtColor(imageA, cv2.COLOR_BGR2GRAY)\ngrayB = cv2.cvtColor(imageB, cv2.COLOR_BGR2GRAY)","00574737":"# Plotting the Input Images.\nplt.figure(figsize=(15,10))\nplt.suptitle('Input Pre.jpg Image!', fontsize=14, fontweight='bold')\nplt.title(\"Pre.jpg\")\nplt.imshow(imageA)","b2c8cdb1":"# Plotting the Input Images.\nplt.figure(figsize=(15,10))\nplt.suptitle('Input Post.jpg Image!', fontsize=14, fontweight='bold')\nplt.title(\"Post.jpg\")\nplt.imshow(imageB)","e139547d":"# compute the Structural Similarity Index (SSIM) between the two\n# images, ensuring that the difference image is returned\n(score, diff) = structural_similarity(grayA, grayB, full=True)\ndiff = (diff * 255).astype(\"uint8\")\nprint(\"Similarity: {}\".format(score))\n\n# Threshold the diff image, and find contours which will showcase the regions in the images\n# that are different\nthresh = cv2.threshold(diff, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]\ncnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\ncnts = imutils.grab_contours(cnts)\n\n# loop over the contours and create bounding boxes on our two images\nfor c in cnts:\n    # compute the bounding box of the contour and then draw the\n    # bounding box on both input images to represent where the two images differ\n    (x, y, w, h) = cv2.boundingRect(c)\n    cv2.rectangle(imageA, (x, y), (x + w, y + h), (0, 255, 0), 2)\n    cv2.rectangle(imageB, (x, y), (x + w, y + h), (255, 0, 0 ), 2)\n    \n# showing the output images\n\n# Use below code to display the output into the notebook only.\nplt.figure(figsize=(15,10))\nplt.title(\"Pre Image\")\nplt.imshow(imageA)\n\n'''\n# Use this code to display the output into a separate window if you're using local machine.\ncv2.imshow(\"Original\", imageA)\ncv2.imshow(\"Modified\", imageB)\ncv2.imshow(\"Diff\", diff)\ncv2.imshow(\"Thresh\", thresh)\ncv2.waitKey(0)\n'''","c8f1ebc1":"plt.figure(figsize=(15,10))\nplt.title(\"Post Image\")\nplt.imshow(imageB)","b518da04":"plt.figure(figsize=(15,10))\nplt.suptitle('More darker the shade area is, the Higher image difference is there!', fontsize=14, fontweight='bold')\nplt.title(\"Difference\")\nplt.imshow(diff)","9012c6a6":"\nplt.figure(figsize=(15,10))\nplt.suptitle('The yellowish part is Showing the difference!', fontsize=14, fontweight='bold')\nplt.title(\"Thresh\")\nplt.imshow(thresh)","682f09f1":"from PIL import Image, ImageChops\n\nimage1 = Image.open('\/kaggle\/input\/images\/Pre.jpg')\nimage2 = Image.open('\/kaggle\/input\/images\/Post.jpg')\n\n# It Returns the absolute value of the pixel-by-pixel difference between the two Images.\ndiff = ImageChops.difference(image1, image2)\n\n# Displaying the Result.\nif diff.getbbox():\n    image = diff\n    \nimage.save(\"Difference.jpg\")  # Saving the output file as Image.\nplt.figure(figsize=(15,10))\nplt.suptitle('More Lighter the shade area is, the Higher Image difference is there!', fontsize=14, fontweight='bold')\nplt.title(\"Heatmap Difference between 2 Images!\")\nplt.imshow(image)","d4060a8d":"# It Returns the absolute value of the pixel-by-pixel Multiplication between the two Images.\ndiff = ImageChops.multiply(image1, image2)\n\n# Displaying the Result.\nif diff.getbbox():\n    image = diff\n    \nimage.save(\"Multiply_Difference.jpg\")  # Saving the output file as Image.\nplt.figure(figsize=(15,10))\nplt.suptitle('More Lighter the shade area is, the Higher Image Similarity is there!', fontsize=14, fontweight='bold')\nplt.title(\"Difference between 2 Images!\")\nplt.imshow(image)","4076d3fb":"# It Returns the absolute value of the pixel-by-pixel Subtraction between the two Images.\ndiff = ImageChops.subtract(image1, image2, scale=1.0, offset=0)\n\n# Displaying the Result.\nif diff.getbbox():\n    image = diff\n    \nimage.save(\"Subtraction_Difference.jpg\")  # Saving the output file as Image.\nplt.figure(figsize=(15,10))\nplt.suptitle('More Darker the shade is, the Higher Image difference is there!', fontsize=14, fontweight='bold')\nplt.title(\"Difference between 2 Images!\")\nplt.imshow(image)","324a5341":"# Conclusion!\n\nOne can examine maps at different scales and make observations about the amount of detail one can see. We can compare satellite images with maps and use satellite images to measure and map changing land use. With the use of Computer Vision this task can be done in less time with a great accuracy. \n\n#### Thank You!","75bb9991":"### Task: Write a program in Python to detect the change from the images (Pre.jpg and Post.jpg) of the same map location.\n\n### Solution!\ud83d\udc47","3a34eafc":"# Method 2\n\n#### Finding Image Difference using ImageChops module of Python Imaging Library (PIL)","e4763c85":"# Method 1\n\n### Finding Image Difference using OpenCV and Python."}}