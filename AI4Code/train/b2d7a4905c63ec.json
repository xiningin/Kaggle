{"cell_type":{"5b8964b9":"code","9c0ebc27":"code","5912b365":"code","cb9e0554":"code","edae03b2":"code","59100421":"code","f3cd94e3":"code","6888893b":"code","9ba9602a":"code","79ed93f3":"code","cf8a0b06":"code","9d3ad6ab":"markdown","bf8fe0f1":"markdown","b7d9b55e":"markdown","6c9aab0e":"markdown","418a5489":"markdown"},"source":{"5b8964b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9c0ebc27":"# import movie data set and look at columns\nmovie = pd.read_csv(\"..\/input\/movie.csv\")\nmovie.columns","5912b365":"# what we need is that movie id and title\nmovie = movie.loc[:,[\"movieId\",\"title\"]]\nmovie.head(10)","cb9e0554":"# import rating data and look at columns\nrating = pd.read_csv(\"..\/input\/rating.csv\")\nrating.columns","edae03b2":"# what we need is that user id, movie id and rating\nrating = rating.loc[:,[\"userId\",\"movieId\",\"rating\"]]\nrating.head(10)","59100421":"# then merge movie and rating data\ndata = pd.merge(movie,rating)","f3cd94e3":"# now lets look at our data \ndata.head(10)","6888893b":"data.shape","9ba9602a":"data = data.iloc[:1000000,:]","79ed93f3":"# lets make a pivot table in order to make rows are users and columns are movies. And values are rating\npivot_table = data.pivot_table(index = [\"userId\"],columns = [\"title\"],values = \"rating\")\npivot_table.head(10)","cf8a0b06":"movie_watched = pivot_table[\"Bad Boys (1995)\"]\nsimilarity_with_other_movies = pivot_table.corrwith(movie_watched)  # find correlation between \"Bad Boys (1995)\" and other movies\nsimilarity_with_other_movies = similarity_with_other_movies.sort_values(ascending=False)\nsimilarity_with_other_movies.head()","9d3ad6ab":"# Conclusion\n* **If you like it, Please upvote my kernel.**\n* **If you have any question, I will happy to hear it.**","bf8fe0f1":"# INTRODUCTION\n\n* **In this kernel,we will see Recommendation Systems.**","b7d9b55e":"* As it can be seen data frame that is above, we have 4 features that are movie id, title user id and rating\n* According to these data frame, we will make item based recommendation system\n* Lets look at shape of the data. The number of sample in data frame is 20 million that is too much. There can be problem in kaggle even if their own desktop ide's like spyder or pycharm.\n* Therefore, in order to learn item based recommendation system lets use 1 million of sample in data.","6c9aab0e":"* As it can be seen from table above, rows are users, columns are movies and values are ratings\n* For example user 11 gives 3.5 rating to movie \"Ace Ventura: When Nature Calls (1995)\" and gives 3.0 rating to movie \"Bad Boys (1995)\".\n* Now lets make a scenario, we have movie web site and \"Bad Boys (1995)\" movie are watched and rated by people. The question is that which movie do we recommend these people who watched \"Bad Boys (1995)\" movie.\n* In order to answer this question we will find similarities between \"Bad Boys (1995)\" movie and other movies.\n","418a5489":"* It can be concluded that we need to recommend \"Headless Body in Topless Bar (1995)\" movie to people who watched \"Bad Boys (1995)\".\n* On the other hand even if we do not consider, number of rating for each movie is also important."}}