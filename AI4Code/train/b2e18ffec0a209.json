{"cell_type":{"9eef6ad0":"code","136a8208":"code","7e280465":"code","84da5db8":"code","e2029931":"code","de43f333":"code","034494fc":"code","7548f16f":"code","cb4317e3":"markdown","3c8290f8":"markdown","d3d679c1":"markdown","15799fbe":"markdown","961b64b6":"markdown","f0c340a1":"markdown","0e87a499":"markdown","0f579c60":"markdown","ff79f68e":"markdown","9f0cf1f1":"markdown"},"source":{"9eef6ad0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport keras\n\nimport os\nprint(os.listdir(\"..\/input\"))\ndirectory = \"..\/input\/cell_images\/cell_images\"","136a8208":"lst = [162+i for i in range(4)]\nn_row = 2\nn_col = 2\nfig, axes = plt.subplots(nrows=n_row, ncols=n_col, figsize=(10,10))\nfor i in enumerate(lst):\n    img = plt.imread(\"..\/input\/cell_images\/cell_images\/Parasitized\/C100P61ThinF_IMG_20150918_145042_cell_\"+str(i[1])+\".png\")\n    ax=axes[i[0]\/\/n_row,i[0]%n_col]\n    ax.imshow(img)","7e280465":"lst = [128,131,34,65]\nn_row = 2\nn_col = 2\nfig, axes = plt.subplots(nrows=n_row, ncols=n_col, figsize=(10,10))\nfor i in enumerate(lst):\n    img = plt.imread(\"..\/input\/cell_images\/cell_images\/Uninfected\/C100P61ThinF_IMG_20150918_144104_cell_\"+str(i[1])+\".png\")\n    ax=axes[i[0]\/\/n_row,i[0]%n_col]\n    ax.imshow(img)","84da5db8":"from keras import layers\nfrom keras import models\n\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(120, (3,3), activation='relu', input_shape=(128,128,3)))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(220, (3,3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(220, (3,3), activation='relu'))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(320, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))","e2029931":"from keras import optimizers\nmodel.compile(loss='binary_crossentropy',optimizer=optimizers.RMSprop(lr=1e-4),metrics=['acc'])","de43f333":"from keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(rescale=1.\/255, rotation_range=30,width_shift_range=0.2,\\\n                                  height_shift_range=0.2,shear_range=0.3,zoom_range=0.2)\n\ntrain_generator = train_datagen.flow_from_directory(directory, target_size=(128,128), batch_size=50, class_mode='binary')\nvalidation_generator = train_datagen.flow_from_directory(directory, target_size=(128,128),batch_size=50, class_mode='binary')","034494fc":"history = model.fit_generator(train_generator, steps_per_epoch=100, epochs=30,\\\n                              validation_data=validation_generator,validation_steps=5)","7548f16f":"acur = history.history['acc']\nval_acur = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1,len(acur)+1)\nplt.plot(epochs,acur,'bo',label='Training accuracy')\nplt.plot(epochs, val_acur,'b',label='Validation accuracy')\nplt.legend()\nplt.figure()\n\nplt.plot(epochs,loss,'bo',label='training loss')\nplt.plot(epochs,val_loss,'b',label='validation loss')\nplt.legend()\nplt.show()","cb4317e3":"We construct graphs of changes in losses and accuracy in the learning process.","3c8290f8":"Now compile our model with standard optimizer:","d3d679c1":"Images need preprocessing. For this I will use keras class - ImageDataGenerator for pictures. We need scale images and bring them to the same size. <br>\nAnother part of preprocessing - I will expand our data for better generalization.","15799fbe":"Now fit our model:","961b64b6":"Examples of uninfected images:","f0c340a1":"Import data and visualize examples of parasitized images:","0e87a499":"This kernel is inspired by a wonderful book -  \"Deep Learning\" about the library Keras by Francois Chollet.","0f579c60":"At first glance, the neural network will not be very difficult to classify everything correctly. We can see quite significant differences at the pictures. And these differences are good work for neural networks.","ff79f68e":"## Convolutional neural networks for classification","9f0cf1f1":"Thank you for reading! I hope this kernel was useful for you."}}