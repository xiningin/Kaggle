{"cell_type":{"bd9d4af5":"code","2d6c2973":"code","5b5ee8c4":"code","a162f5c0":"code","2c07c23d":"code","ef361672":"code","77c32d2f":"code","5ba2ceb1":"code","6ba00daa":"code","b34463a0":"code","791f8f62":"code","ad95d9b0":"code","e3bd3891":"code","5376fe60":"code","9c990ee5":"code","b4716b11":"code","802689a1":"code","f9a71bb8":"code","44596b34":"code","126797ca":"code","22d0ce9a":"code","e61680c9":"code","bca283fc":"code","a3e0f3d0":"code","c616b71e":"markdown","47510cd8":"markdown","7f251965":"markdown","f7fff7f0":"markdown","5afb08d2":"markdown","8a7f1a41":"markdown","53a44668":"markdown","beb33bf0":"markdown"},"source":{"bd9d4af5":"### forex_python page https:\/\/forex-python.readthedocs.io\/en\/latest\/usage.html\n! pip install forex_python\n### yfinance page https:\/\/pypi.org\/project\/yfinance\/\n! pip install yfinance","2d6c2973":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nfrom datetime import datetime, date\nfrom forex_python.converter import get_rate\nimport yfinance as yf","5b5ee8c4":"# df = {}\n# df['date'] = []\n# df['USDCHF'] = []\n# df['USDGBP'] = []\n# df['CHFGBP'] = []\n\n# start_date = date(2022, 1, 1)\n# for idate in pd.date_range(start_date, date.today(), freq='5B'):\n#     df['date'].append( pd.to_datetime(idate) )\n#     df['USDCHF'].append(get_rate(\"USD\", \"CHF\", idate))\n#     df['USDGBP'].append(get_rate(\"USD\", \"GBP\", idate))    \n#     df['CHFGBP'].append(get_rate(\"CHF\", \"GBP\", idate))        \n    \n# df = pd.DataFrame(df)\n# df.to_csv('forex_simple.csv')\n# df.head()","a162f5c0":"# sns.lineplot(data=df) #, kind='line') #, x='date', y=['USDCHF', 'USDGBP'])","2c07c23d":"# from forex_python.converter import CurrencyRates\n\n# def downloadRates( currency='USD', start_date=date(2022, 1, 1), frequency='5B' ):\n#     listDf = []\n#     for idate in pd.date_range(start_date, date.today(), freq=frequency):\n#         tmp = pd.DataFrame( [ CurrencyRates().get_rates(currency, idate)] )\n#         tmp['date'] = pd.to_datetime( idate )\n#         listDf.append(tmp)\n#     finalDf = pd.concat(listDf)\n    \n#     finalDf.to_csv(f'{currency}rates_{start_date}_{frequency}.csv')\n#     return finalDf","ef361672":"# downloadRates( currency='USD', start_date=date(2015, 1, 1), frequency='5B' )","77c32d2f":"# downloadRates( currency='CHF', start_date=date(2015, 1, 1), frequency='5B' )","5ba2ceb1":"tmp = pd.read_csv('..\/input\/currency-exchange-from-2015\/USDrates_2015-01-01_5B.csv')\ntmp.drop(columns=['Unnamed: 0', 'LTL', 'ISK', 'ILS'], inplace=True)\ntmp['date'] = pd.to_datetime( tmp['date'] )\ntmp['USD'] = 1.0\ntmp.head()","6ba00daa":"tmp.info()\n# tmp['ILS'].unique()","b34463a0":"plt.figure(figsize=(20,10))\nsns.lineplot(x='date', y='value', hue='variable', data=pd.melt(tmp, ['date'])).set(yscale='log')","791f8f62":"plt.figure(figsize=(20,10))\ntmp1 = tmp.set_index('date')\ntmp1 = tmp1[tmp1<2]\ntmp1.reset_index(inplace=True)\ntmp1.dropna(axis='columns',inplace=True)\n# tmp1\n# tmp1 = tmp[(tmp['date']>'2020-1-1' & tmp>1000)]\nsns.lineplot(x='date', y='value', hue='variable', data=pd.melt(tmp1, ['date'])) #.set(yscale='log')","ad95d9b0":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.metrics import mean_absolute_error","e3bd3891":"rawdata = tmp.select_dtypes('float64').drop(columns='USD')\n\nnormdata = Normalizer().fit_transform(rawdata)\nnormdata = pd.DataFrame(normdata)\nnormdata.set_axis(rawdata.columns.to_list(), axis=1, inplace=True)\nnormdata['date'] = tmp['date']\n\nnormdata['return'] = normdata['CHF'] - normdata['CHF'].shift(-1)\nnormdata['label'] = normdata['return'].shift(-1)\nnormdata['label'] = normdata['label'].apply(lambda x: 1 if x>0.0 else 0)\nnormdata.dropna(axis=0, inplace=True)\nY = normdata['label']\nX = normdata.drop(columns='label')","5376fe60":"normdata.plot(x='date', y='return', figsize=(10,4))","9c990ee5":"x_train, x_test, y_train, y_test = train_test_split(X.drop(columns='date'), Y, train_size=0.8, test_size=0.2, random_state=1)\n\nmodel = make_pipeline( Normalizer(), \n                     LinearRegression())\n# model = LinearRegression()\nmodel.fit(x_train, y_train)\nprint(model.score(x_train, y_train))\ny_predict = model.predict(x_test)\nmean_absolute_error(y_test, y_predict)","b4716b11":"rawdata = yf.download(tickers = 'CHFUSD=X', start='2010-01-01', end=datetime.today(), period ='1d')\nrawdata.reset_index(inplace=True)\n\n# Normalize aclose value\n# We use this value to train model\nrawdata['return'] = rawdata['Adj Close'] - rawdata['Adj Close'].shift(1)\nrawdata['return'] = rawdata['return'] \/ (rawdata['return'].max() - rawdata['return'].min())\n\n# Make label, 1 as rising price, 0 as falling price\nrawdata['label'] = rawdata['return'].shift(-1)\nrawdata['label'] = rawdata['label'].apply(lambda x: 1 if x>0.0 else 0)\nrawdata.drop(columns='Volume', inplace=True)\nrawdata.dropna(inplace=True)\nrawdata.tail()","802689a1":"rawdata = rawdata[ np.abs(rawdata['return'])<0.2 ]\ndata_toPred = rawdata[ rawdata['Date']>'2021-1-1' ]\ndisplay(data_toPred)\ndata = rawdata[ rawdata['Date']<'2021-1-1' ]\ndata.tail()\n# data['test'] = data['High'] -data['Low']\n# data.plot(x='Date', y='test', figsize=(15,5))","f9a71bb8":"data.plot(x='Date', y='Low', figsize=(15,5))","44596b34":"data.plot(x='Date', y='return', figsize=(15,5))","126797ca":"x_train, x_test, y_train, y_test = train_test_split(data.drop(columns=['label','Date']), data['label'], \n                                                    train_size=0.8, test_size=0.2, random_state=1, shuffle=False)\n\n# model = make_pipeline( Normalizer(), \n#                      LinearRegression())\n# model = LinearRegression()\nmodel = LogisticRegression()\nmodel.fit(x_train, y_train)\nprint(model.score(x_train, y_train))\ny_predict = model.predict(x_test)\nmean_absolute_error(y_test, y_predict)","22d0ce9a":"from sklearn.ensemble import GradientBoostingClassifier\nclf = GradientBoostingClassifier(random_state=0, learning_rate=0.01, n_estimators=10000)\n\nclf.fit(x_train, y_train)\nprint(clf.score(x_test, y_test))\ny_predict = clf.predict(x_test)\nmean_absolute_error(y_test, y_predict)","e61680c9":"def calc_profit(row):\n    if row['won']:\n        return abs(row['return'])*contracts - commission\n    else:\n        return -abs(row['return'])*contracts - commission","bca283fc":"# Calculate equity..\n\ncontracts  = 1000.0\ncommission = 0.0\n\n\ndf_trade = data_toPred.drop(columns=['Date','label'])\ndf_trade['pred']   = clf.predict(df_trade)\ndf_trade['label']  = data_toPred['label']\ndf_trade['won']    = df_trade['label'] == df_trade['pred']\ndf_trade['return'] = df_trade['return'].shift(-1) * (rawdata['return'].max() - rawdata['return'].min())\n# df_trade.drop(df_trade.index[len(df_trade)-1], inplace=True)\ndf_trade['pnl'] = df_trade.apply(lambda row: calc_profit(row), axis=1)\ndf_trade['equity'] = df_trade['pnl'].cumsum()\ndf_trade['Date'] = data_toPred['Date']\n\ndisplay(df_trade.tail())\n# df_trade.plot( y='equity', figsize=(15,5), title=f'Backtest with ${contracts} initial capital')\ndf_trade.plot(x='Date', y='equity', figsize=(15,5), title=f'Backtest with ${contracts} initial capital')\nplt.xlabel('Trades')\nplt.ylabel('Equity (USD)')\n# for r in df_trade.iterrows():\n#     if r[1]['won']:\n#         plt.axvline(x=r[0], linewidth=0.5, alpha=0.8, color='g')\n#     else:\n#         plt.axvline(x=r[0], linewidth=0.5, alpha=0.8, color='r')","a3e0f3d0":"df_trade","c616b71e":"The following steps were inspired by [this notebook](https:\/\/github.com\/hayatoy\/ml-forex-prediction\/blob\/master\/Predict%20Future%20Price%20of%20EURUSD%20with%20sklearn%2C%20yahoo%20data.ipynb).","47510cd8":"Here, the cvs dataset was collected from the previous steps but since I didn't want to run again and again the same cells, I include those files as kaggle datasets.","7f251965":"Here, I started using `forex_python` to access forex exchange info. It was very useful since I could access many exchange rates at once for one currency. However, it takes some time to download the data. \nSince later on I found about `yfinance`, which is faster and includes more information, the next cells are commented. I keep them for bookeeping purposes.","f7fff7f0":"### Simple Linear regressions ","5afb08d2":"## Basic forex analysis using `forex_python`","8a7f1a41":"## Simple analysis using `yfinance`","53a44668":"This is a simple example of how to extract finance data, specifically forex exchange data, and to test some simple prediction algoritms. It was intended for my education. Any suggestion\/comment is more than welcomed!.  ","beb33bf0":"## Installing packages and loading general libraries"}}