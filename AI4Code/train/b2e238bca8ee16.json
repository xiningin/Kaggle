{"cell_type":{"ca513a22":"code","2440e19a":"code","999b8693":"code","817c9071":"code","33b074df":"code","6e1c0f93":"code","8fca76b4":"code","d729f92d":"code","7fa57dd9":"code","df01fbf2":"code","b088f130":"code","22631849":"code","d8183ace":"code","24a9ad1d":"code","4d721566":"code","e6ed9f2e":"code","b1c85b7a":"code","164fdd4f":"code","c12ec16e":"code","9d41a9f5":"code","c3e5cd3b":"code","c2b88487":"code","8cafa070":"code","1fb9a8eb":"code","6e40ce10":"code","5dc3305d":"code","5a36c863":"code","65cdba56":"code","e845656a":"code","87f87911":"code","64ebc5f8":"code","b33c3bf7":"code","bc509e12":"code","044fcc0e":"code","cd4290c8":"code","17a5748f":"markdown","1a1a7f7c":"markdown","e99e7913":"markdown","5eef1517":"markdown","cd17c227":"markdown"},"source":{"ca513a22":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2440e19a":"import numpy as np\nfrom keras.datasets import mnist","999b8693":"(xtrain, ytrain), (xtest, ytest) = mnist.load_data()","817c9071":"print(xtrain.shape)\nprint(ytrain.shape)\nprint(xtest.shape)\nprint(ytest.shape)","33b074df":"xtrain","6e1c0f93":"ytrain","8fca76b4":"ytrain = ytrain.reshape(-1,1)\nytest = ytest.reshape(-1,1)","d729f92d":"from keras import models\nfrom keras import layers","7fa57dd9":"n_network = models.Sequential()","df01fbf2":"n_network","b088f130":"n_network.add(layers.Dense(512, activation = \"relu\", input_shape = (28*28,)))\nn_network.add(layers.Dense(10, activation = \"softmax\"))","22631849":"n_network.compile(optimizer = \"rmsprop\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","d8183ace":"xtrain.shape","24a9ad1d":"xtrain = xtrain.reshape((60000, 28*28))","4d721566":"xtrain.shape","e6ed9f2e":"type(xtrain)","b1c85b7a":"xtrain.dtype","164fdd4f":"xtrain","c12ec16e":"xtrain = xtrain.astype(\"float32\")\/255","9d41a9f5":"xtrain.dtype","c3e5cd3b":"xtrain","c2b88487":"xtest.shape","8cafa070":"xtest.dtype","1fb9a8eb":"xtest = xtest.reshape((10000, 28*28))","6e40ce10":"xtest.shape","5dc3305d":"xtest = xtest.astype(\"float32\") \/ 255","5a36c863":"xtest.dtype","65cdba56":"ytrain","e845656a":"from keras.utils import to_categorical","87f87911":"ytrain = to_categorical(ytrain)","64ebc5f8":"ytrain","b33c3bf7":"ytest = to_categorical(ytest)","bc509e12":"ytest","044fcc0e":"n_network.fit(xtrain, ytrain, epochs = 10, batch_size = 128)","cd4290c8":"n_network.evaluate(xtest, ytest)","17a5748f":"According to this information, I am going to create my model:","1a1a7f7c":"We have 2 different dense layers (fully connected layers) and they follow each other. Second layer (last layer) has 10 different outputs and if we sum them up, they give us 1  as a probabilistic value.   ","e99e7913":"Besides, our ytrain and ytest values should be categorical values:","5eef1517":"I am going to convert unit8 (ranged as [0,255]) pixel values to float32 (ranged as [0,1]) data type.","cd17c227":"Let see the results for test set:"}}