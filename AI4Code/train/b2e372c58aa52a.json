{"cell_type":{"86aa4bf0":"code","adc10db3":"code","a885589f":"code","1b3eb5db":"code","db4a72af":"code","b8f0499f":"code","aa3f0d94":"code","4ad8edcc":"code","66164848":"code","cb6efd37":"code","c1bafa35":"code","d1a5e9ef":"code","a1db9877":"code","5ee989aa":"code","ab029c48":"code","513f5d0d":"code","6965b503":"code","9aa248fa":"code","5956ad9b":"code","058e741f":"code","23625119":"code","72c5c678":"code","99e1d089":"code","763f10e9":"code","f08e1d8f":"code","30db7c6e":"code","981993bf":"code","c7bdc2f1":"code","fea88af5":"code","c570650e":"code","9ffb0592":"code","b33fb72c":"code","762b7539":"code","487a0273":"code","39868593":"code","0bbf3f57":"code","2500da44":"code","3ba7d6bd":"code","013ffc63":"code","b5e25626":"code","b8d3ca39":"code","419ec207":"code","6bc86f2e":"code","f25b2489":"code","6d216564":"code","306140f1":"code","aeb1c40f":"code","ac9d06d9":"code","62aeb171":"code","a942d6dc":"code","ac80258d":"code","6f9054c5":"code","72f98ac2":"code","0020c53e":"code","e8a77b6f":"code","5831de03":"code","d8050f72":"code","a6bebda7":"code","34bd5baa":"code","f81ee5e7":"code","728c1387":"code","0727ba69":"code","da3e7e9b":"code","3efb80b7":"code","cace7964":"code","a89cac32":"code","f42a913a":"code","504262d6":"code","1c644fc5":"code","49bbe8b5":"code","2b671986":"code","ca300a49":"code","1bd8269a":"code","4bbb3d3a":"code","a91c7889":"code","1a504fc4":"code","667dff9c":"code","096709a0":"code","5c88c2e7":"code","cc5c4164":"code","e79c4a5d":"code","f929039e":"code","f93e2238":"code","14a97074":"code","9278c2dd":"code","99dc16b1":"code","4fe562e6":"code","e64b1f13":"code","ce44b777":"code","c0275df6":"code","e74ec2b9":"code","43b857c9":"markdown","3b398976":"markdown","e59d318f":"markdown","4b430e43":"markdown","0b4fd50c":"markdown","b92aa3d1":"markdown","a4a225aa":"markdown","250a037e":"markdown","a5a6dc6a":"markdown","bb6ff177":"markdown","eaccbc08":"markdown","66306f17":"markdown","6923231d":"markdown","bb510a80":"markdown","4c7cfeba":"markdown","1fd39198":"markdown","1205c018":"markdown","45c8f411":"markdown"},"source":{"86aa4bf0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings \nfrom scipy import stats\nfrom scipy.stats import norm\nwarnings.filterwarnings('ignore')","adc10db3":"train = pd.read_csv('..\/input\/big-mart-sales-prediction\/Train.csv')\ntrain.head()","a885589f":"test = pd.read_csv('..\/input\/big-mart-sales-prediction\/Test.csv')","1b3eb5db":"print(\"Train : \", train.shape)\nprint(\"Test : \", test.shape)","db4a72af":"train.info()","b8f0499f":"# To look at the unique observations from each of the features\ntrain.nunique()","aa3f0d94":"# To check if there are any null values\ntrain.isnull().sum()","4ad8edcc":"# Total percentage of the missing values\nmissing_data = train.isnull().sum()\ntotal_percentage = (missing_data.sum()\/train.shape[0]) * 100\nprint(f'The total percentage of missing data is {round(total_percentage,2)}%')","66164848":"total = train.isnull().sum().sort_values(ascending=False)\npercent_total = (train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)*100\nmissing = pd.concat([total, percent_total], axis=1, keys=[\"Total\", \"Percentage\"])\nmissing_data = missing[missing['Total']>0]\nmissing_data","cb6efd37":"# Plotting the percentage of missing values\nplt.figure(figsize=(5,5))\nsns.set(style=\"whitegrid\")\nsns.barplot(x=missing_data.index, y=missing_data['Percentage'], data = missing_data)\nplt.title('Percentage of missing data by feature')\nplt.xlabel('Features', fontsize=14)\nplt.ylabel('Percentage', fontsize=14)\nplt.show()","c1bafa35":"# Filling the null values with the mean value\ntrain['Item_Weight'].fillna(train['Item_Weight'].mean(),inplace=True)\ntrain.isnull().sum()","d1a5e9ef":"# Mapping the categorical values and then replacing it with the median value\ntrain['Outlet_Size'] = train['Outlet_Size'].map({'Small':1, 'Medium':2, 'High':3})\n\nprint(\"The median value : \", train['Outlet_Size'].median())\ntrain['Outlet_Size'] = train['Outlet_Size'].fillna(train['Outlet_Size'].median())\ntrain.isnull().sum()","a1db9877":"# Replacing it back into categorical values\ntrain['Outlet_Size'] = train['Outlet_Size'].replace(1.000000,'Small')\ntrain['Outlet_Size'] = train['Outlet_Size'].replace(2.000000,'Medium')\ntrain['Outlet_Size'] = train['Outlet_Size'].replace(3.000000,'High')","5ee989aa":"# Changing the data type of establishment year into a object, as the years are not representing any numerical values but categorical\ntrain['Outlet_Establishment_Year']  = train['Outlet_Establishment_Year'].astype('object')\n\ntrain.info()","ab029c48":"# Statistical description of the data\ntrain.describe()","513f5d0d":"# The minimum value of the item visibility feature is zero(0)\n# Replacing the minimum value with the 2nd minimum value of the feature, as item visibility cannot be zero\ntrain['Item_Visibility'] = train['Item_Visibility'].replace(0.000000,0.003574698)","6965b503":"# Detecting the outliers and then removing it \nplt.title('Box-plot of Item outlet sales')\nsns.boxplot('Item_Outlet_Sales',data=train)","9aa248fa":"train=train[train['Item_Outlet_Sales']<6250]","5956ad9b":"# Plotting the distribution of the feature\nplt.figure(figsize=(10,8))\nsns.distplot(train['Item_Outlet_Sales'], fit = norm, color='red')\nplt.title('Item Outlet Sales Distribution')\nplt.axvline(train['Item_Outlet_Sales'].median(),color='yellow',label='Median')\nplt.axvline(train['Item_Outlet_Sales'].mean(),color='blue',label='Mean')\nplt.legend()","058e741f":"print (\"Skewness :\", train['Item_Outlet_Sales'].skew())\nprint(\"Kurtosis : \", train['Item_Outlet_Sales'].kurt())","23625119":"plt.title('Box-plot of Item outlet sales after removing the outliers')\nsns.boxplot('Item_Outlet_Sales',data=train)","72c5c678":"plt.title('Box-plot of Item visibilty')\nsns.boxplot('Item_Visibility',data=train)","99e1d089":"train=train[train['Item_Visibility']<0.195]","763f10e9":"plt.figure(figsize=(10,8))\nsns.distplot(train['Item_Visibility'], fit = norm, color='red')\nplt.title('Item_Visibility after removing the outliers')\nplt.axvline(train['Item_Visibility'].median(),color='yellow',label='Median')\nplt.axvline(train['Item_Visibility'].mean(),color='blue',label='Mean')\nplt.legend()","f08e1d8f":"print (\"Skewness :\", train['Item_Visibility'].skew())\nprint(\"Kurtosis : \", train['Item_Visibility'].kurt())","30db7c6e":"plt.title('Box-plot of Item visibilty after removing the outliers')\nsns.boxplot('Item_Visibility',data=train)","981993bf":"plt.title('Box-plot of Item MRP')\nsns.boxplot('Item_MRP',data=train)","c7bdc2f1":"plt.figure(figsize=(10,8))\nsns.distplot(train['Item_MRP'], fit = norm, color = 'red')\nplt.title('Item_MRP')\nplt.axvline(train['Item_MRP'].median(),color='yellow',label='Median')\nplt.axvline(train['Item_MRP'].mean(),color='blue',label='Mean')\nplt.legend()","fea88af5":"print (\"Skewness :\", train['Item_MRP'].skew())\nprint(\"Kurtosis : \", train['Item_MRP'].kurt())","c570650e":"plt.title('Box-plot of Item weight')\nsns.boxplot('Item_Weight',data=train)","9ffb0592":"plt.figure(figsize=(10,8))\nsns.distplot(train['Item_Weight'], fit = norm, color = 'red')\nplt.title('Item_Weight')\nplt.axvline(train['Item_Weight'].median(),color='yellow',label='Median')\nplt.axvline(train['Item_Weight'].mean(),color='blue',label='Mean')\nplt.legend()","b33fb72c":"print (\"Skewness :\", train['Item_Weight'].skew())\nprint(\"Kurtosis : \", train['Item_Weight'].kurt())","762b7539":"train['Item_Fat_Content'].value_counts()","487a0273":"# The values LF, low fat and Low Fat are same, similarly reg and Regular. Hence replacing it to avoid confusion\ntrain['Item_Fat_Content'] = train['Item_Fat_Content'].replace('low fat', 'Low Fat')\ntrain['Item_Fat_Content'] = train['Item_Fat_Content'].replace('reg', 'Regular')\ntrain['Item_Fat_Content'] = train['Item_Fat_Content'].replace('LF', 'Low Fat')","39868593":"# Low Fat product has great count which that those product has high preferences\nsns.countplot(x=train['Item_Fat_Content'])","0bbf3f57":"# Fruits and vegetables, Snacks have a great count which says that there is a good demand of these products\nsns.countplot(train['Item_Type'])\nplt.xticks(rotation=90)","2500da44":"sns.countplot(train['Outlet_Establishment_Year'])\nplt.xticks(rotation=90)","3ba7d6bd":"sns.countplot(train['Outlet_Identifier'])\nplt.xticks(rotation=90)","013ffc63":"sns.countplot(train['Outlet_Size'])\nplt.xticks(rotation=90)","b5e25626":"sns.countplot(train['Outlet_Location_Type'])\nplt.xticks(rotation=90)","b8d3ca39":"sns.countplot(train['Outlet_Type'])\nplt.xticks(rotation=90)","419ec207":"plt.figure(figsize=(8,5))\nsns.heatmap(train.corr(), annot=True)","6bc86f2e":"plt.figure(figsize=(8,5))\nsns.scatterplot(x='Item_MRP',y='Item_Outlet_Sales',hue='Item_MRP',data=train)\nplt.axvline(train['Item_MRP'].mean(),color='red',label='Mean')","f25b2489":"plt.figure(figsize=(8,5))\nsns.scatterplot(x='Item_Visibility',y='Item_Outlet_Sales',hue='Item_Visibility', data=train,)","6d216564":"sns.barplot(train['Outlet_Identifier'],train['Item_Outlet_Sales'])\nplt.xticks(rotation=90)","306140f1":"# The breakfast item have good visibilty\nsns.barplot(train['Item_Type'],train['Item_Visibility'])\nplt.xticks(rotation=90)","aeb1c40f":"# Most of the items have good amount of sales\nsns.barplot(train['Item_Type'],train['Item_Outlet_Sales'])\nplt.xticks(rotation=90)","ac9d06d9":"# Outlet Established in 1998 did not have a great sales\nsns.barplot(train['Outlet_Establishment_Year'],train['Item_Outlet_Sales'])\nplt.xticks(rotation=90)","62aeb171":"# After the removal of outliers\ntrain.shape","a942d6dc":"fig,axes=plt.subplots(2,2,figsize=(15,12))\nsns.boxplot(x='Outlet_Establishment_Year',y='Item_Outlet_Sales',ax=axes[0,0],data=train)\nsns.boxplot(x='Outlet_Size',y='Item_Outlet_Sales',ax=axes[0,1],data=train)\nsns.boxplot(x='Outlet_Location_Type',y='Item_Outlet_Sales',ax=axes[1,0],data=train)\nsns.boxplot(x='Outlet_Type',y='Item_Outlet_Sales',ax=axes[1,1],data=train)","ac80258d":"fig,axes=plt.subplots(3,1,figsize=(15,12))\nsns.boxplot(x='Item_Type',y='Item_Outlet_Sales',ax=axes[0],data=train)\nsns.boxplot(x='Outlet_Identifier',y='Item_Outlet_Sales',ax=axes[1],data=train)\nsns.boxplot(x='Item_Fat_Content',y='Item_Outlet_Sales',ax=axes[2],data=train)","6f9054c5":"train.info()","72f98ac2":"# Mapping the binary features\ntrain['Item_Fat_Content'] = train['Item_Fat_Content'].map({'Low Fat': 1, 'Regular': 0})","0020c53e":"# Creating dummy variables of all the other categorical features\nItemtype = pd.get_dummies(train['Item_Type'],prefix='ItemType',drop_first=True)\ntrain = pd.concat([train,Itemtype],axis=1)\n\nOutID = pd.get_dummies(train['Outlet_Identifier'],prefix='OutIden',drop_first=True)\ntrain = pd.concat([train,OutID],axis=1)\n\nOutLoctype = pd.get_dummies(train['Outlet_Location_Type'],prefix='OutLocTy',drop_first=True)\ntrain = pd.concat([train,OutLoctype],axis=1)\n\nOuttype = pd.get_dummies(train['Outlet_Type'],prefix='OutTy',drop_first=True)\ntrain = pd.concat([train,Outtype],axis=1)\n\nOutSz = pd.get_dummies(train['Outlet_Size'],prefix='OutSz',drop_first=True)\ntrain = pd.concat([train,OutSz],axis=1)\n\nOutEYr = pd.get_dummies(train['Outlet_Establishment_Year'],prefix='OutEstYear',drop_first=True)\ntrain = pd.concat([train,OutEYr],axis=1)","e8a77b6f":"train.drop(['Item_Type','Outlet_Identifier','Outlet_Location_Type','Outlet_Type','Outlet_Size','Outlet_Establishment_Year'],axis=1,inplace=True)","5831de03":"X = train.drop(['Item_Identifier','Item_Outlet_Sales'],axis=1)\n\ny = train['Item_Outlet_Sales']","d8050f72":"X.shape","a6bebda7":"from sklearn.ensemble import ExtraTreesRegressor\nmodel = ExtraTreesRegressor()\nmodel.fit(X,y)\n\n# To look at the best features\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest().plot(kind='barh')\nplt.show()","34bd5baa":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","f81ee5e7":"from sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(x_train, y_train)\n\ny_linreg = lin_reg.predict(x_test)","728c1387":"from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\n\nMSE=mean_squared_error(y_test,y_linreg)\nMAE=mean_absolute_error(y_test,y_linreg)\nr2=r2_score(y_test,y_linreg)\nRMSE = np.sqrt(MSE)\nprint(\"R squared value: \", r2)\nprint(\"Root Mean Squared Error : \", RMSE)\nprint(\"Mean Absolute Error : \", MAE)","0727ba69":"from sklearn.ensemble import RandomForestRegressor\nreg=RandomForestRegressor(n_estimators=100)\nreg.fit(x_train,y_train)\n\nfeature_imp = pd.Series(reg.feature_importances_,index=x_train.columns).sort_values(ascending=False)\n\nplt.figure(figsize=(10,15))\nsns.barplot(x=feature_imp, y=feature_imp.index)\n# Add labels to your graph\nplt.xlabel('Feature Importance Score')\nplt.ylabel('Features')\nplt.title(\"Visualizing Important Features\")\nplt.legend()\nplt.show()","da3e7e9b":"rfr_reg=RandomForestRegressor(n_estimators=200)\nrfr_reg.fit(x_train,y_train)\n\ny_rfreg = rfr_reg.predict(x_test)","3efb80b7":"MSE=mean_squared_error(y_test,y_rfreg)\nMAE=mean_absolute_error(y_test,y_rfreg)\nr2=r2_score(y_test,y_rfreg)\nRMSE = np.sqrt(MSE)\nprint(\"R squared value: \", r2)\nprint(\"Root Mean Squared Error : \", RMSE)\nprint(\"Mean Absolute Error : \", MAE)","cace7964":"test.head()","a89cac32":"test.nunique()","f42a913a":"test['Outlet_Establishment_Year']  = test['Outlet_Establishment_Year'].astype('object')\n\ntest.info()","504262d6":"test.isnull().sum()","1c644fc5":"test['Item_Weight'].fillna(test['Item_Weight'].mean(),inplace=True)\ntest.isnull().sum()","49bbe8b5":"test['Outlet_Size'] = test['Outlet_Size'].map({'Small':1, 'Medium':2, 'High':3})\n\ntest['Outlet_Size'] = test['Outlet_Size'].fillna(test['Outlet_Size'].median())\ntest.isnull().sum()","2b671986":"test['Outlet_Size'] = test['Outlet_Size'].replace(1.000000,'Small')\ntest['Outlet_Size'] = test['Outlet_Size'].replace(2.000000,'Medium')\ntest['Outlet_Size'] = test['Outlet_Size'].replace(3.000000,'High')","ca300a49":"test['Item_Visibility'] = test['Item_Visibility'].replace(0.000000,0.003591414)","1bd8269a":"test.describe()","4bbb3d3a":"plt.title('Box-plot of Item visibilty')\nsns.boxplot('Item_Visibility',data=test)","a91c7889":"test=test[test['Item_Visibility']<0.19]","1a504fc4":"plt.title('Box-plot of Item visibilty after removing the outliers')\nsns.boxplot('Item_Visibility',data=test)","667dff9c":"plt.title('Box-plot of Item Weight')\nsns.boxplot('Item_Weight',data=test)","096709a0":"plt.title('Box-plot of Item MRP')\nsns.boxplot('Item_MRP',data=test)","5c88c2e7":"test.shape","cc5c4164":"test.info()","e79c4a5d":"Prediction_LR = pd.DataFrame(test['Item_Identifier'])\nPrediction_LR['Outlet_Identifier'] = test['Outlet_Identifier']","f929039e":"Prediction_RFR = pd.DataFrame(test['Item_Identifier'])\nPrediction_RFR['Outlet_Identifier'] = test['Outlet_Identifier']","f93e2238":"test['Item_Fat_Content'] = test['Item_Fat_Content'].replace('low fat', 'Low Fat')\ntest['Item_Fat_Content'] = test['Item_Fat_Content'].replace('reg', 'Regular')\ntest['Item_Fat_Content'] = test['Item_Fat_Content'].replace('LF', 'Low Fat')","14a97074":"test['Item_Fat_Content'] = test['Item_Fat_Content'].map({'Low Fat': 1, 'Regular': 0})","9278c2dd":"Itemtype = pd.get_dummies(test['Item_Type'],prefix='ItemType',drop_first=True)\ntest = pd.concat([test,Itemtype],axis=1)\n\nOutID = pd.get_dummies(test['Outlet_Identifier'],prefix='OutIden',drop_first=True)\ntest = pd.concat([test,OutID],axis=1)\n\nOutLoctype = pd.get_dummies(test['Outlet_Location_Type'],prefix='OutLocTy',drop_first=True)\ntest = pd.concat([test,OutLoctype],axis=1)\n\nOuttype = pd.get_dummies(test['Outlet_Type'],prefix='OutTy',drop_first=True)\ntest = pd.concat([test,Outtype],axis=1)\n\nOutSz = pd.get_dummies(test['Outlet_Size'],prefix='OutSz',drop_first=True)\ntest = pd.concat([test,OutSz],axis=1)\n\nOutEYr = pd.get_dummies(test['Outlet_Establishment_Year'],prefix='OutEstYear',drop_first=True)\ntest = pd.concat([test,OutEYr],axis=1)","99dc16b1":"test.drop(['Item_Type','Outlet_Identifier','Outlet_Location_Type','Outlet_Type','Outlet_Size','Outlet_Establishment_Year'],axis=1,inplace=True)","4fe562e6":"test.drop('Item_Identifier',axis=1,inplace=True)","e64b1f13":"test.head()","ce44b777":"test.shape","c0275df6":"item_sales_linreg = lin_reg.predict(test)\n\nPrediction_LR['Item_Outlet_Sales'] = item_sales_linreg\nPrediction_LR.head()","e74ec2b9":"item_sales_rfr = rfr_reg.predict(test)\n\nPrediction_RFR['Item_Outlet_Sales'] = item_sales_rfr\nPrediction_RFR.head()","43b857c9":"**Outlet OUT1027 have higher sales.**","3b398976":"**Both of the regression models showed the same features as the best which are Item MRP, Item Visibility, Item weight, Outlet OUT019 and Outlet Establishment Year1998.**","e59d318f":"**Comparing the 2 models we can say that the Random forest model is the best as it has good metrics value.**\n\n**For predicting the test data, we will use both the models.**","4b430e43":"**The Item MRP, Item Visibility and Item weight are the best features including Outlet OUT019 and Outlet Established in 1998.**","0b4fd50c":"# **Problem Description**\n*The data scientists at BigMart have collected 2013 sales data for 1559 products across 10 stores in different cities. Also, certain attributes of each product and store have been defined.*\n\n**The aim is to build a predictive model and find out the sales of each product at a particular store.\nUsing this model, BigMart will try to understand the properties of products and stores which play a key role in increasing sales.**\n","b92aa3d1":"# **Importing the libraries and the datasets**\n\n","a4a225aa":"1. **The distribution is positively skewed which says some of the items are less visible then the mean value.**\n2. **The distribution curve is platykurtic which tells that it is less prone to the outliers.**","250a037e":"**The distribution looks symmetric as the mean and the median value are almost same**","a5a6dc6a":"**The distribution looks symmetric as the mean and the median value are same**","bb6ff177":"**Item MRP and Item outlet sales shows high positive correlation which tells that as the MRP of the item increases the sales of that item also increases.**\n**Similarly we can also notice that the item visibility and item outlet sales are negatively correlated which means that if the item is less visible then the sale of the item is more or if the item is more visible then the sale of the item is less..**","eaccbc08":"**In this analysis, I have focused more on the visualizations part and its interpretation**","66306f17":"# **Data Visualization and Cleaning**","6923231d":"**The outliers in the Item outlet sales features are from 0.195** \n\n**Hence including only those observations which has values < 0.195**","bb510a80":"**The outliers in the Item outlet sales features are from 6250. Hence including only those observations which has values < 6250**","4c7cfeba":"**If the item visibility is less then 0.100, the sales are higher.**","1fd39198":"**By looking at the plot we can say that if the MRP is high, then the sales are high.**\n**If an item has MRP more then the mean value then the its sales are higher.**","1205c018":"# **Testing Phase**\n**The same data cleaning steps will were taken for the test data and then the regression models will be used to predict the Item outlet sale for the unseen data.**","45c8f411":"1. **The distribution is positively skewed which says some of the items have sales less then the mean value.**\n2. **The distribution curve is platykurtic which tells that it is less prone to the outliers.**"}}