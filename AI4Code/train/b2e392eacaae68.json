{"cell_type":{"6f49217d":"code","e47143c6":"code","0f3d2693":"code","de586d8b":"code","933d172f":"code","0f25de2a":"code","a76a28f8":"code","82a9d720":"code","66ba3acc":"code","b1a2e600":"code","b084f44e":"code","c835705a":"code","642e820a":"code","000632d9":"code","0811178d":"code","32c9dd81":"code","a9339ef5":"code","b38c49fe":"code","be1fca7e":"code","7ddb88b4":"code","ccebbf1c":"code","d853842f":"code","7a5eac9e":"code","efce5d84":"code","b4fd7999":"code","bc98b6d0":"code","4e43dce1":"code","9a5d0cce":"code","a6bed15b":"code","fe3c07f6":"code","89fc9a5c":"code","c279b654":"code","88a693d2":"code","48243c19":"code","856cf3f4":"code","5db1871f":"code","fff85f56":"code","c39ce16a":"code","892692c8":"code","9cb33c05":"code","d85f32ec":"code","5afe9e0b":"code","b457ef39":"code","7687b210":"code","f0bdd7b1":"code","7ba87f7a":"code","b3fa9c87":"code","0bd2926b":"code","af509789":"code","e1ef9416":"code","e07af766":"code","1b75a3d6":"code","2fbc2fb4":"code","3eb307e5":"code","21627fec":"code","f6b8ecda":"code","134f256c":"code","62b32ece":"code","b829275b":"code","7af99ce8":"markdown","d374dbe5":"markdown","052b02c7":"markdown","83309e9f":"markdown","976ccdc2":"markdown","fee9179a":"markdown","467a42af":"markdown","b89f0ad8":"markdown","8c7fc6b5":"markdown","ad463c2f":"markdown","737c313b":"markdown","f4b5de0f":"markdown","7a45ef80":"markdown","0cb4ec51":"markdown","ea257c92":"markdown","b2899b02":"markdown","6c03c9e3":"markdown","253bf864":"markdown","48ee20cf":"markdown","e16bc647":"markdown","19b6c5c2":"markdown","94b7801b":"markdown","a8fa90ca":"markdown","1a57aaaf":"markdown","7f4965fa":"markdown","3261ed49":"markdown","d024eed7":"markdown","31d12021":"markdown","d895796b":"markdown"},"source":{"6f49217d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e47143c6":"import matplotlib.pyplot as plt \nimport seaborn as sns \n%matplotlib inline","0f3d2693":"data = pd.read_csv(\"\/kaggle\/input\/HR_Data.csv\")","de586d8b":"data.head()","933d172f":"data = data.rename(columns={'Joining.Bonus':'JoiningBonus','Candidate.relocate.actual':'CandidatRelocateActual','Candidate.Source':'CandidateSource','Rex.in.Yrs':'RexInYrs','Candidate.Ref': 'CandidateRef', 'Duration.to.accept.offer': 'Durationtoacceptoffer','DOJ.Extended': 'DOJExtended', 'Notice.period': 'NoticePeriod','Offered.band':'OfferedBand','Pecent.hike.expected.in.CTC':'PecentHikeExpectedInCTC','Percent.hike.offered.in.CTC':'PercentHikeOfferedInCTC','Percent.difference.CTC':'PercentDifferenceCTC'})","0f25de2a":"data.tail()","a76a28f8":"#Shape of data\ndata.shape","82a9d720":"data.isnull().sum()","66ba3acc":"data.info()","b1a2e600":"left = data.groupby('Status')\nleft.mean()","b084f44e":"data.describe()","c835705a":"sns.countplot(x=data.DOJExtended ,data = data)\nplt.show()","642e820a":"sns.countplot(x=data.OfferedBand ,data = data)\nplt.show()","000632d9":"sns.countplot(x=data.JoiningBonus ,data = data)\nplt.show()","0811178d":"sns.countplot(x=data.CandidatRelocateActual ,data = data)\nplt.show()","32c9dd81":"sns.countplot(x=data.Gender ,data = data)\nplt.show()","a9339ef5":"sns.countplot(x=data.CandidateSource ,data = data)\nplt.show()","b38c49fe":"plt.figure(figsize=(20,10))\nsns.countplot(x=data.LOB ,data = data)\nplt.show()","be1fca7e":"print(\"Location wise employee\")\nplt.figure(figsize=(20,10))\nsns.countplot(x=data.Location ,data = data)\nplt.show()","7ddb88b4":"print(\"Employes joined or not\")\nsns.countplot(x=data.Status,data = data)\nplt.show()","ccebbf1c":"print(\"Gender wise Joined or Not joined Chart\")\nsns.countplot(x = \"Status\",data=data,hue=\"Gender\")\nplt.show()","d853842f":"obj_col = []\nnum_col = []\nfor col in data.columns:\n    if data[col].dtype=='O':\n        obj_col.append(col)\n    else:\n        num_col.append(col)","7a5eac9e":"print(\"This is all the numerical data columns \")\nnum_col","efce5d84":"# Vilon plot\ndef TreatOutliners(col,data):\n    ax = sns.violinplot(x=data[col])\n    plt.show()","b4fd7999":"for i in num_col:\n    TreatOutliners(i,data)","bc98b6d0":"def TreatOutliner(col,data):\n    data.boxplot(column=[col])\n    plt.show()\n    ","4e43dce1":"for i in num_col:\n    TreatOutliner(i,data)","9a5d0cce":"#taking care of Durationintoacceptoffer outliers .\nper99 = np.percentile(data.Durationtoacceptoffer,[99])[0]\ndata = data[(data.Durationtoacceptoffer < per99)]\ndata.boxplot(column=['Durationtoacceptoffer'])\nplt.show()\nprint(data.shape)","a6bed15b":"#taking care of NoticePeriod outliers \nUpperValue = np.percentile(data.NoticePeriod,[99])[0]\ndata = data[(data.NoticePeriod<UpperValue)]\ndata.boxplot(column=['NoticePeriod'])\nplt.show()\nprint(data.shape)","fe3c07f6":"#taking care of PecentHikeExpectedInCTC outliers \nlower_value = np.percentile(data.PecentHikeExpectedInCTC,[1])[0]\ndata = data[(data.PecentHikeExpectedInCTC>lower_value)]\nupper_value = np.percentile(data.PecentHikeExpectedInCTC,[99])[0]\ndata = data[(data.PecentHikeExpectedInCTC < upper_value)]","89fc9a5c":"data.boxplot(column=['PecentHikeExpectedInCTC'])\nplt.show()","c279b654":"# taking care of .PercentHikeOfferedInCTC outliers \nupperValue = np.percentile(data.PercentHikeOfferedInCTC,[99])[0]\nlowerValue = np.percentile(data.PercentHikeOfferedInCTC,[1])[0]\ndata = data[(data.PercentHikeOfferedInCTC <upperValue)]\ndata = data[(data.PercentHikeOfferedInCTC >lowerValue)]\ndata.boxplot(column=['PercentHikeOfferedInCTC'])\nplt.show()\nprint(data.shape)","88a693d2":"# taking care of .PercentDifferenceCTC outliers \nupperValue = np.percentile(data.PercentDifferenceCTC,[95])[0]\nlowerValue = np.percentile(data.PercentDifferenceCTC,[3])[0]\ndata = data[(data.PercentDifferenceCTC <upperValue)]\ndata = data[(data.PercentDifferenceCTC >lowerValue)]\ndata.boxplot(column=['PercentDifferenceCTC'])\nplt.show()","48243c19":"data.shape","856cf3f4":"# taking care of RexInYrs outliers \nupperValue = np.percentile(data.RexInYrs,[99])[0]\ndata = data[(data.RexInYrs < upperValue)]\ndata.boxplot(column=['RexInYrs'])\nplt.show()","5db1871f":"data.describe()","fff85f56":"data = data.drop(['SLNO'],axis=1)\ndata.head()","c39ce16a":"data1 = data.drop(['CandidateRef'],axis=1)\ndata1.head()","892692c8":"data1.shape","9cb33c05":"obj_col","d85f32ec":"from sklearn.preprocessing import LabelEncoder\nlabelEncoder_X = LabelEncoder()\ndata1['DOJExtended'] = labelEncoder_X.fit_transform(data1['DOJExtended'])\ndata1['OfferedBand'] = labelEncoder_X.fit_transform(data1['OfferedBand'])\ndata1['CandidatRelocateActual'] = labelEncoder_X.fit_transform(data1['CandidatRelocateActual'])\ndata1['Gender'] = labelEncoder_X.fit_transform(data1['Gender'])\ndata1['CandidateSource'] = labelEncoder_X.fit_transform(data1['CandidateSource'])\ndata1['LOB'] = labelEncoder_X.fit_transform(data1['LOB'])\ndata1['Location'] = labelEncoder_X.fit_transform(data1['Location'])\ndata1['JoiningBonus'] = labelEncoder_X.fit_transform(data1['JoiningBonus'])","5afe9e0b":"#Attriton is dependent var\nfrom sklearn.preprocessing import LabelEncoder\nlabel_encoder_y=LabelEncoder()\ndata1['Status']=label_encoder_y.fit_transform(data['Status'])","b457ef39":"data1.head()","7687b210":"corr_cols = data1[['DOJExtended', 'Durationtoacceptoffer', 'NoticePeriod', 'OfferedBand',\n       'PecentHikeExpectedInCTC', 'PercentHikeOfferedInCTC',\n       'PercentDifferenceCTC', 'JoiningBonus', 'CandidatRelocateActual',\n       'Gender', 'CandidateSource', 'RexInYrs', 'LOB', 'Location', 'Age',\n       'Status' ]]","f0bdd7b1":"corr = corr_cols.corr()\nplt.figure(figsize=(18,10))\nsns.heatmap(corr, annot = True)\nplt.show()","7ba87f7a":"X = data1.iloc[:,:-1]\ny = data1.iloc[:,-1]","b3fa9c87":"X.head()","0bd2926b":"from sklearn.preprocessing import scale\nX = scale(X)","af509789":"from sklearn.model_selection import train_test_split","e1ef9416":"X_train,X_test,y_train,y_test = train_test_split(X,y, test_size = 0.20,random_state = 30)","e07af766":"from sklearn.ensemble import RandomForestClassifier","1b75a3d6":"model = RandomForestClassifier()","2fbc2fb4":"model.fit(X_train,y_train)","3eb307e5":"predict = model.predict(X_test)","21627fec":"data1.columns","f6b8ecda":"data = ['']","134f256c":"print(predict)","62b32ece":"from sklearn.metrics import accuracy_score, confusion_matrix","b829275b":"accuracy_score(y_test,predict)","7af99ce8":"# Changing columns name to proper name so that it will be easy for us in eda and model building","d374dbe5":"# Chart on some numerical data .","052b02c7":"## After changing the name lets explore the data from tail side","83309e9f":"# Model Evaluation","976ccdc2":"# So we have build our model having 82.19 % accuracy score","fee9179a":"# Predicting our test result .","467a42af":"# Spliting our dataset for train and test .","b89f0ad8":"## From below code we will seperate our numerical data columns and Categorical Data Columns .","8c7fc6b5":"# After removing outlies let's see all the numerical information about our data .","ad463c2f":"# Data exploration about the HR dataset and Model building and model evaluation . ","737c313b":"## Accuracy Score","f4b5de0f":"so there is no any null value in our data","7a45ef80":"# Now we will remove all ouliers for better prediction .","0cb4ec51":"## We are spliting out data into 8:2 ratio . In trainig we are using our 80% data and in testing we are using our 20% data .","ea257c92":"## From this heatmap we can see that RexInYrs and age has highest collinearity ","b2899b02":"## Now We will take care of categorical data ","6c03c9e3":"## Exploring data","253bf864":"# Now we will make Violin plots for all the numerical value . ","48ee20cf":"# Here is boxplot ","e16bc647":"##  Seprating our dependent and independent variable for model training .","19b6c5c2":"# Importing Random Forest Classifier for our model .","94b7801b":"# We are grouping our data by status (employee who joined or Not joined) ","a8fa90ca":"##  From boxplot and Violin plots we can see that  Durationtoacceptoffer , NoticePeroid , PercentHikeExpectedInCTC , PercentHikeOfferedInCTC , PercentDifferenceCTC and RexInYrs has otliners .","1a57aaaf":"## Importing data","7f4965fa":"# Counting the null values in the dataset .","3261ed49":"# Training our model .","d024eed7":"# Now we will change our categorical value using LabelEncoder . ","31d12021":"# From describe we will get all the numerical information about our data such as mean median , count and many more ..","d895796b":"# We will delete candidateRef because it has no any sense in model training ."}}