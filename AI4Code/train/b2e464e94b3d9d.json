{"cell_type":{"c6ed5e09":"code","e32f776c":"code","9eddbd69":"code","3d94fbdd":"code","28140ab1":"code","4e09c84b":"code","25140154":"code","a59de8e5":"code","4d849ddf":"code","65173d1f":"code","015c7137":"code","00b6f89c":"code","a2edb5f6":"code","4a956fb1":"code","7d8eb528":"code","1d49bf31":"code","d862f967":"code","bbf72977":"code","1d202737":"code","cce65f42":"code","27b8ffd8":"code","c5c2f572":"code","90441f76":"code","ab09e4fc":"code","cde14f38":"code","663c02b6":"code","c8f8d9f0":"code","5f64e53f":"code","007cc9f8":"code","669f6410":"code","a73e4ad1":"code","7efb599f":"code","e916350f":"code","cfb7f8d7":"code","09125254":"code","f42e12e5":"code","ef8e6b55":"code","afbce10b":"code","9384f5cc":"code","5a31d03b":"code","791c70d2":"code","e4513154":"code","dc99e668":"code","de1eaac1":"code","b72aabf8":"code","bd5cbbf7":"code","bd5cf8e0":"code","e6f27de3":"code","5deed27e":"code","cd219ee7":"code","7033da52":"code","689ec20c":"code","9e0e0b77":"code","3f25e8ce":"code","f308f866":"code","adaeb548":"code","1920820e":"code","64e368fa":"code","6c5f8486":"code","bf9a304b":"code","de54e3ac":"code","c3b35d50":"code","1218b788":"code","2fa9553e":"code","84c536be":"code","9d66e276":"code","ac96aa3a":"code","48c4f26b":"code","51dc5171":"markdown","67285076":"markdown","91ae4fee":"markdown","b614c524":"markdown","2fd27a5d":"markdown","fab0e061":"markdown","bd9b27f9":"markdown","61e4f450":"markdown","d92723ec":"markdown","e2d6b46c":"markdown","da6a1e26":"markdown","adf26bc7":"markdown","3b3ecd18":"markdown","876f1359":"markdown","54a96b27":"markdown","cd7e67fa":"markdown","9edacfc8":"markdown","3986149c":"markdown","e3d23b24":"markdown","cf31a4ab":"markdown","fa456774":"markdown"},"source":{"c6ed5e09":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats","e32f776c":"df = pd.read_csv('..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')","9eddbd69":"df.head()","3d94fbdd":"df.tail()","28140ab1":"df.shape","4e09c84b":"df.describe().T","25140154":"df.info()","a59de8e5":"fig, axes = plt.subplots(nrows=4, ncols=3, figsize=(18, 14))\nsns.histplot(data=df, x=\"fixed acidity\", kde=True,ax=axes[0][0])\nsns.histplot(data=df, x=\"volatile acidity\", kde=True,ax=axes[0][1])\nsns.histplot(data=df, x=\"citric acid\", kde=True,ax=axes[0][2])\nsns.histplot(data=df, x=\"residual sugar\", kde=True,ax=axes[1][0])\nsns.histplot(data=df, x=\"chlorides\", kde=True,ax=axes[1][1])\nsns.histplot(data=df, x=\"free sulfur dioxide\", kde=True,ax=axes[1][2])\nsns.histplot(data=df, x=\"total sulfur dioxide\", kde=True,ax=axes[2][0])\nsns.histplot(data=df, x=\"density\", kde=True,ax=axes[2][1])\nsns.histplot(data=df, x=\"pH\", kde=True,ax=axes[2][2])\nsns.histplot(data=df, x=\"sulphates\", kde=True,ax=axes[3][0])\nsns.histplot(data=df, x=\"alcohol\", kde=True,ax=axes[3][1])\nsns.histplot(data=df, x=\"quality\", kde=True,ax=axes[3][2])","4d849ddf":"labels =df['quality'].value_counts(sort = True).index\nsizes = df['quality'].value_counts(sort = True)\ncolors = [\"lightblue\",\"yellow\"]\nplt.figure(figsize=(16,12))\nplt.pie(sizes,labels=labels, colors=colors, autopct='%1.1f%%', startangle=20,)\nplt.title('quality pie')\nplt.show()","65173d1f":"PP = sns.pairplot(df, diag_kind=\"kde\",hue=\"quality\")\n","015c7137":"plt.figure(figsize=(16,8))\nsns.heatmap(df.corr(),annot=True)","00b6f89c":"df.columns","a2edb5f6":"plt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"fixed acidity\"],color='lightblue')\ndf=df[(np.abs(stats.zscore(df[\"fixed acidity\"])) < 3)]\nplt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"fixed acidity\"],color='lightblue')","4a956fb1":"plt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"volatile acidity\"],color='lightblue')\ndf=df[(np.abs(stats.zscore(df[\"volatile acidity\"])) < 3)]\nplt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"volatile acidity\"],color='lightblue')","7d8eb528":"plt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"citric acid\"],color='lightblue')\ndf=df[(np.abs(stats.zscore(df[\"citric acid\"])) < 3)]\nplt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"citric acid\"],color='lightblue')","1d49bf31":"plt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"residual sugar\"],color='lightblue')\ndf=df[(np.abs(stats.zscore(df[\"residual sugar\"])) < 3)]\nplt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"residual sugar\"],color='lightblue')","d862f967":"plt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"chlorides\"],color='lightblue')\ndf=df[(np.abs(stats.zscore(df[\"chlorides\"])) < 3)]\nplt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"chlorides\"],color='lightblue')","bbf72977":"plt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"free sulfur dioxide\"],color='lightblue')\ndf=df[(np.abs(stats.zscore(df[\"free sulfur dioxide\"])) < 3)]\nplt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"free sulfur dioxide\"],color='lightblue')","1d202737":"plt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"total sulfur dioxide\"],color='lightblue')\ndf=df[(np.abs(stats.zscore(df[\"total sulfur dioxide\"])) < 3)]\nplt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"total sulfur dioxide\"],color='lightblue')","cce65f42":"plt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"density\"],color='lightblue')\ndf=df[(np.abs(stats.zscore(df[\"density\"])) < 3)]\nplt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"density\"],color='lightblue')","27b8ffd8":"df.columns","c5c2f572":"plt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"pH\"],color='lightblue')\ndf=df[(np.abs(stats.zscore(df[\"pH\"])) < 3)]\nplt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"pH\"],color='lightblue')","90441f76":"plt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"sulphates\"],color='lightblue')\ndf=df[(np.abs(stats.zscore(df[\"sulphates\"])) < 3)]\nplt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"sulphates\"],color='lightblue')","ab09e4fc":"plt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"alcohol\"],color='lightblue')\ndf=df[(np.abs(stats.zscore(df[\"alcohol\"])) < 3)]\nplt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"alcohol\"],color='lightblue')","cde14f38":"plt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"quality\"],color='lightblue')\ndf=df[(np.abs(stats.zscore(df[\"quality\"])) < 3)]\nplt.figure(figsize=(8,4))\nsns.boxplot(data=df,x=df[\"quality\"],color='lightblue')","663c02b6":"df.head()","c8f8d9f0":"df.columns","5f64e53f":"from sklearn import preprocessing\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import roc_auc_score\nfrom collections import Counter\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split","007cc9f8":"robust_sc = preprocessing.RobustScaler()\nstandard_sc = preprocessing.StandardScaler() \nminmax_sc = preprocessing.MinMaxScaler() ","669f6410":"reviews = []\nfor i in df['quality']:\n    if i >= 1 and i <= 5:\n        reviews.append('1')\n    elif i >= 6 and i <= 7:\n        reviews.append('2')\n    elif i >= 8 and i <= 10:\n        reviews.append('3')\ndf['Reviews'] = reviews","a73e4ad1":"X = df.drop([\"quality\",'Reviews'],axis=1)\ny = df[\"Reviews\"]","7efb599f":"resultado = []\nfor x in [robust_sc,standard_sc,minmax_sc]:\n    %time\n    scaler = x.fit(X)\n    X_new = x.transform(X)\n    tree = DecisionTreeClassifier(random_state=42)\n    tree.fit(X_new,y)\n    y_pred = tree.predict(X_new)\n    f1sc=f1_score(y, y_pred, average='weighted')\n    rauc=(y, y_pred)\n    resultado.append(f1sc)\n    print(\"El escalado Utilizado--->\",x)\n    print(\"f1 segun el tipo de estrategia:\",f1sc)\n    print(\"----------------------------------------\")","e916350f":"Counter(df['Reviews'])","cfb7f8d7":"over = SMOTE()\nunder = RandomUnderSampler()\nsteps = [('o', over), ('u', under)]\npipeline = Pipeline(steps=steps)","09125254":"X, y = pipeline.fit_resample(X, y)","f42e12e5":"Counter(y)","ef8e6b55":"X_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.3,random_state=42,stratify=y)","afbce10b":"X_train=standard_sc.fit_transform(X_train)\nX_test=standard_sc.transform(X_test)","9384f5cc":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score","5a31d03b":"dt = DecisionTreeClassifier()\ndt.fit(X_train,y_train)\ndt_predict = dt.predict(X_test)\nprint(classification_report(y_test, dt_predict))","791c70d2":"scores = cross_val_score(dt, X_train, y_train, cv=5)\nprint(\"%0.2f accuracy with a standard deviation of %0.2f\" % (scores.mean(), scores.std()))","e4513154":"rfc = RandomForestClassifier(n_estimators=250)\nrfc.fit(X_train, y_train)\npred_rfc = rfc.predict(X_test)\nprint(classification_report(y_test, pred_rfc))","dc99e668":"scores = cross_val_score(rfc, X_train, y_train, cv=5)\nprint(\"%0.2f accuracy with a standard deviation of %0.2f\" % (scores.mean(), scores.std()))","de1eaac1":"sgd = SGDClassifier(penalty=None)\nsgd.fit(X_train, y_train)\npred_sgd = sgd.predict(X_test)\nprint(classification_report(y_test, pred_sgd))","b72aabf8":"scores = cross_val_score(sgd, X_train, y_train, cv=5)\nprint(\"%0.2f accuracy with a standard deviation of %0.2f\" % (scores.mean(), scores.std()))","bd5cbbf7":"svc = SVC()\nsvc.fit(X_train, y_train)\npred_svc = svc.predict(X_test)\nprint(classification_report(y_test, pred_svc))","bd5cf8e0":"scores = cross_val_score(svc, X_train, y_train, cv=5)\nprint(\"%0.2f accuracy with a standard deviation of %0.2f\" % (scores.mean(), scores.std()))","e6f27de3":"rbf_svc = SVC(kernel='linear')\nrbf_svc.fit(X_train, y_train)\nrbf_svc_res=rbf_svc.predict(X_test)\nprint(classification_report(y_test, rbf_svc_res))","5deed27e":"scores = cross_val_score(rbf_svc, X_train, y_train, cv=5)\nprint(\"%0.2f accuracy with a standard deviation of %0.2f\" % (scores.mean(), scores.std()))","cd219ee7":"from xgboost import XGBClassifier\nfrom sklearn.neural_network import MLPClassifier","7033da52":"gbm = XGBClassifier(verbosity=1)\nparams_xgb = {\n        \"n_estimators\":[500,1000,1500],\n        \"learning_rate\":[0.1,0.3,0.6],\n        'gpu_id': [0],\n        \"predictor\":[\"gpu_predictor\"],\n        'tree_method': ['gpu_hist'],\n        \"updater\":[\"grow_gpu_hist\"],\n        \"sampling_method\":[\"gradient_based\"],\n        \"updater\":[\"grow_gpu_hist\"]\n}","689ec20c":"model_xgb = GridSearchCV(gbm,param_grid=params_xgb, cv=3,n_jobs=-1)\nmodel_xgb.fit(X_train,y_train)","9e0e0b77":"print(\"Best params: \"+str(model_xgb.best_params_))\nprint(\"Best Score: \"+str(model_xgb.best_score_)+'\\n')","3f25e8ce":"scores = pd.DataFrame(model_xgb.cv_results_)\nscores.sort_values(by=\"rank_test_score\")","f308f866":"y_train_pred_xgb = model_xgb.predict(X_train)\ny_test_pred_xgb = model_xgb.predict(X_test)","adaeb548":"print(classification_report(y_test, y_test_pred_xgb))","1920820e":"clf = MLPClassifier(random_state=42)\nparams_MLP = {\n        \"hidden_layer_sizes\":[64,128,256],\n        \"activation\":[\"identity\", \"logistic\", \"tanh\", \"relu\"],\n        'solver': [\"lbfgs\", \"sgd\", \"adam\"],\n        \"learning_rate\":[\"constant\", \"invscaling\", \"adaptive\"],\n        'max_iter': [100,200],\n        \"warm_start\":[True]\n}","64e368fa":"model_MLP = GridSearchCV(clf,param_grid=params_MLP, cv=3,n_jobs=-1)\nmodel_MLP.fit(X_train,y_train)","6c5f8486":"print(\"Best params: \"+str(model_MLP.best_params_))\nprint(\"Best Score: \"+str(model_MLP.best_score_)+'\\n')\n","bf9a304b":"scores = pd.DataFrame(model_MLP.cv_results_)\nscores.sort_values(by=\"rank_test_score\")","de54e3ac":"y_train_pred_MLP = model_MLP.predict(X_train)\ny_test_pred_MLP = model_MLP.predict(X_test)\n","c3b35d50":"print(classification_report(y_test, y_test_pred_MLP))","1218b788":"clf = RandomForestClassifier(random_state=42)\nparams_RF = {\n        \"max_depth\":[250,500,1000],\n        \"criterion\":[\"gini\", \"entropy\"],\n        'min_samples_split': [2,4,6],\n        \"min_samples_leaf\":[1,2,3],\n        \"max_features\":['auto', 'sqrt', 'log2'],\n        'warm_start':[True],\n        'class_weight':['balanced', 'balanced_subsample']\n}","2fa9553e":"model_RF = GridSearchCV(clf,param_grid=params_RF, cv=3,n_jobs=-1)\nmodel_RF.fit(X_train,y_train)","84c536be":"print(\"Best params: \"+str(model_RF.best_params_))\nprint(\"Best Score: \"+str(model_RF.best_score_)+'\\n')","9d66e276":"scores = pd.DataFrame(model_RF.cv_results_)\nscores.sort_values(by=\"rank_test_score\")","ac96aa3a":"y_train_pred_RF = model_RF.predict(X_train)\ny_test_pred_RF = model_RF.predict(X_test)","48c4f26b":"print(classification_report(y_test, y_test_pred_RF))","51dc5171":"#### volatile acidity","67285076":"#### alcohol","91ae4fee":"#### residual sugar","b614c524":"### XGB","2fd27a5d":"#### free sulfur dioxide","fab0e061":"## Conclusion:  Random Forest Wins","bd9b27f9":"### MLP","61e4f450":"#### chlorides","d92723ec":"## EDA","e2d6b46c":"### RandomForest CV","da6a1e26":"#### citric acid","adf26bc7":"### SVC","3b3ecd18":"#### pH","876f1359":"#### fixed acidity","54a96b27":"#### sulphates","cd7e67fa":"#### density","9edacfc8":"### SGDClassifier","3986149c":"#### total sulfur dioxide","e3d23b24":"### DecisionTreeClassifier","cf31a4ab":"#### quality","fa456774":"### RandomForestClassifier"}}