{"cell_type":{"5554420a":"code","3c4e4da5":"code","197632b1":"code","9a264c69":"code","239befa7":"code","6750e641":"code","bc0eb16d":"code","8e6fbc78":"code","b40387da":"code","fd4457fe":"code","07b24a1d":"code","97b871c0":"code","89702d30":"code","f4618370":"code","e15a910c":"code","82180af9":"code","92a674d9":"code","b7b65ef2":"code","ca8f478c":"code","f423fbc4":"code","3e0ab88f":"code","94b5312c":"code","ce49a34a":"code","54913002":"code","62c39105":"code","10286bfa":"code","d94fcc94":"code","592cf4c8":"code","1030509a":"code","b3db6205":"code","55f33596":"code","c8f83147":"code","6b398fa7":"code","740da355":"code","ee5c2158":"code","05ba6f64":"code","a8116339":"code","3032e026":"code","189ec510":"code","7346ba72":"code","cc55b76c":"code","a701d80d":"code","30f21f45":"code","a116a54a":"code","b539e660":"code","8388dc60":"code","fd609318":"code","46a9fb0b":"code","16b22f91":"code","f93992ed":"code","35f0db72":"code","19a7253c":"code","ffaed775":"code","e7f03e90":"code","095b2e2c":"code","d5979f6e":"code","711deb68":"code","e6b37cf3":"code","1e15f2b3":"code","169523fd":"code","29b877f5":"code","1b0cb54b":"code","582f821e":"code","0258c12a":"code","c1749e1d":"code","a2e9a62f":"code","10572db6":"code","cd7a9488":"code","1f79b0bf":"code","9aacb238":"code","7a78dff2":"code","29754ab4":"code","3a09d267":"code","0ef5a2b3":"code","2904fa0d":"code","340ce732":"code","2782834f":"code","157ecbf1":"code","88cc3669":"code","ab2e148c":"code","1d90633a":"code","ee59f016":"code","7636ba80":"code","13587126":"code","db0343a9":"code","71a8c4df":"code","df1fd025":"code","6ef2552c":"code","f2b8edfb":"code","c24d941a":"code","bdbfa999":"code","2edf392d":"code","f65f3640":"code","8cb9bc93":"code","3690d6e8":"code","88da23a7":"code","690839c0":"code","bce65c01":"code","fef29f2d":"code","c6057c38":"code","d2c950fd":"code","06f58c1a":"code","a9f71895":"code","e7005018":"code","d59aac3d":"code","d5c27736":"code","1c0eb0a1":"code","3ee63583":"code","05b80de1":"code","b40752e6":"code","098af762":"code","6b263073":"code","8229beaf":"code","64ee5267":"code","f2bd7200":"code","bde95d76":"code","fdbaf719":"code","0f077bb6":"code","843de4ad":"code","7e3d546a":"code","1537799e":"code","e55a9f4a":"code","145025ea":"code","de1e4976":"code","d98a5f6b":"code","daca55b4":"code","6845d81c":"code","7fa595d3":"code","f2343d7a":"code","267a6d07":"code","9c51dfc9":"code","c01abfc7":"code","79013e35":"code","55a736ca":"code","21b04b82":"code","5182554c":"code","a543c68d":"code","c04b84e1":"code","857f1339":"code","420a16cf":"code","3672aa40":"code","1b0aa7bb":"code","2885b24f":"code","e0c46b79":"code","4dc1290b":"code","9fd200d0":"code","4d8b70a5":"code","b8f417a4":"code","f7391d06":"code","4d59f84a":"code","98870c39":"code","1cc39a55":"code","454bc0d0":"code","22d919ad":"code","f65530ac":"code","483723e2":"code","d9f7c8eb":"code","25aeb9f4":"code","6babba5f":"code","8c51d745":"code","05eef112":"code","0003aabf":"code","18c46975":"code","60b08cae":"code","4c001b9f":"code","643a3afc":"code","e6f97ef5":"code","412af727":"code","16491577":"code","81e8db4a":"code","238b220f":"code","7bcb10d8":"code","e5159ac9":"code","1f31e88b":"code","2f08fd82":"code","725be6d5":"code","2c86f2a9":"code","c6f4758e":"code","b8605c68":"markdown","36b5c414":"markdown","1a591cb2":"markdown","62876c26":"markdown","5e58e976":"markdown","09ff0836":"markdown","749cba0f":"markdown","fe60b3e8":"markdown","65c681ee":"markdown","cad25edf":"markdown","eed20ca0":"markdown","5cdef9fe":"markdown","7ef76cf2":"markdown","9d9aa98e":"markdown","12c2e4af":"markdown","cd8f9273":"markdown","810d0e8c":"markdown","a0de352e":"markdown","3a4728bd":"markdown","fc798d89":"markdown","c056305a":"markdown","c2a6af27":"markdown","6e04d15b":"markdown","aba354e0":"markdown","63af2889":"markdown","986007d6":"markdown","dc708baa":"markdown","50a0cbef":"markdown","3e10bc22":"markdown","4daa3574":"markdown","a50d7baf":"markdown","a50e57e7":"markdown","a88e142c":"markdown","9dc7b69d":"markdown","1f40ef01":"markdown","9d81f176":"markdown","4189733f":"markdown","3a6538eb":"markdown","6776f44d":"markdown","d1bb86e9":"markdown","ff991864":"markdown","3a4a3e12":"markdown","75d005d5":"markdown","2993cdbb":"markdown","2148f7c4":"markdown","e2f5ee09":"markdown","620a3c79":"markdown","3d4bc44d":"markdown","8228a1e9":"markdown","5221f9d0":"markdown","0b39f5b6":"markdown","1d0fddc1":"markdown","566cf5ca":"markdown","38aa9e4b":"markdown","2f079a45":"markdown","c3e64a20":"markdown","26b01ec4":"markdown","31544bae":"markdown","dffe7982":"markdown","8698089b":"markdown","dce13cdc":"markdown","27213fa6":"markdown","574fae76":"markdown","aa300d0f":"markdown","bb2c2e19":"markdown","48852882":"markdown","39acebf7":"markdown","27e08cc9":"markdown","51f2cf06":"markdown","e14531b9":"markdown","22a96f02":"markdown","a327fdc6":"markdown","24774d77":"markdown","bb4c55fb":"markdown","2981b8bf":"markdown","ff607235":"markdown","3862145a":"markdown","71147deb":"markdown","34e770ba":"markdown","48169886":"markdown","9d9e4a39":"markdown","b92aa6f7":"markdown","f2c709a8":"markdown","d77bc761":"markdown","73398748":"markdown","2baaeded":"markdown","2152e037":"markdown","fb85917f":"markdown","5be99c31":"markdown","73e76f68":"markdown","252bdcc1":"markdown","4582dc0a":"markdown","5fe195c1":"markdown","1b64a5ad":"markdown","4b935d07":"markdown","000aebb3":"markdown","2de8016a":"markdown","d0b627a0":"markdown","81bdfb6f":"markdown","9514db1d":"markdown","d4f61cd0":"markdown","8db17144":"markdown","6931df3d":"markdown","73829ef8":"markdown","0fae6826":"markdown","a5cb5bd3":"markdown","96671961":"markdown","fa46a365":"markdown","1f0d44bf":"markdown","c1fdb969":"markdown","45ddd10d":"markdown","7859e2b6":"markdown","043ddfe8":"markdown","7f29f327":"markdown","8ef61c2a":"markdown","1be5b38b":"markdown","607296eb":"markdown","edfec5e4":"markdown","bbc654fd":"markdown","85677ea7":"markdown"},"source":{"5554420a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport re\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\nfrom itertools import combinations\nfrom scipy.stats import ttest_ind\n\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nfrom math import radians, sin, cos, asin, sqrt # \u0434\u043b\u044f \u0440\u0430\u0441\u0441\u0447\u0435\u0442\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\u0438\n\n%matplotlib inline\n\nimport warnings\nwarnings.simplefilter('ignore')\n\nsns.set()\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3c4e4da5":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","197632b1":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","9a264c69":"# \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b\nDATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'sample_submission.csv')\ncities_info = pd.read_csv('\/kaggle\/input\/citiesdata-2\/cities_data.csv')","239befa7":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c data_ta \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0431\u0440\u0430\u043b\u0438 \u0441 TripAdvisor\n# \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0444\u0430\u0439\u043b \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0432 data_ta\ndata_ta = pd.DataFrame()\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/data-ta\/'):\n    for filename in filenames:\n        temp = pd.read_csv(os.path.join(dirname, filename))\n        data_ta = pd.concat([data_ta, temp], ignore_index = True)","6750e641":"df_train.info()","bc0eb16d":"df_train.head(5)","8e6fbc78":"df_test.info()","b40387da":"data_ta.info()","fd4457fe":"cities_info.info()","07b24a1d":"cities_info.head()","97b871c0":"df_test.head(5)","89702d30":"data_ta.head()","f4618370":"sample_submission.head(5)","e15a910c":"sample_submission.info()","82180af9":"# \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","92a674d9":"data.info()","b7b65ef2":"data.sample(5)","ca8f478c":"data.Reviews[1]","f423fbc4":"def intitial_eda_checks(df, missing_percent):\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u0440\u043e\u0433 % \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0445\u043e\u0442\u0438\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c. \n    \u041d\u0430 \u0432\u044b\u0445\u043e\u0434 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0443\u043c\u043c\u0435 \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u043e\u0446\u0435\n    '''\n    if df.isnull().sum().sum() > 0:\n        mask_total = df.isnull().sum().sort_values(ascending=False)\n        total = mask_total[mask_total > 0]\n\n        mask_percent = df.isnull().mean().sort_values(ascending=False)\n        percent = mask_percent[mask_percent > 0]\n\n        series = mask_percent[mask_percent > missing_percent]\n        columns = series.index.to_list()\n\n        missing_data = pd.DataFrame(pd.concat(\n            [total, round(percent*100, 2)], axis=1, keys=['\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e', '%']))\n        print('\u0421\u0443\u043c\u043c\u0430 \u0438 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 NaN:\\n \\n')\n        display(missing_data)\n    else:\n        print('NaN \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b.')","3e0ab88f":"# \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432\u044b\u0432\u043e\u0434\u0430 \u0432\u0441\u0435\u0445 \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nintitial_eda_checks(data, 0)","94b5312c":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\nsns.heatmap(data.isnull(), yticklabels=False, cbar=False, cmap='Blues')","ce49a34a":"# \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0430\u043d\u043d\u044b\u0445\ndata['Price Range'].value_counts(normalize=True)","54913002":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043c\u043e\u0434\u043e\u0439\ndata['Price Range'].fillna(data['Price Range'].mode()[0], inplace = True)","62c39105":"# \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0430\u043d\u043d\u044b\u0445\ndata['Number of Reviews'].hist()\ndata['Number of Reviews'].describe()","10286bfa":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\ndata.groupby(['City'])[\n             'Number of Reviews'].agg(['max', 'min', 'mean', 'median'])","d94fcc94":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\ndata['number_of_rev_is_NAN'] = pd.isna(data['Number of Reviews']).astype('uint8')","592cf4c8":"# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\nmedian_reviews = data.groupby(['City'])['Number of Reviews'].median() # series \u0441 \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c\u0438 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\ndata['Number of Reviews'] = data.apply(lambda x: median_reviews.loc[x['City']] if pd.isna(\n    x['Number of Reviews']) else x['Number of Reviews'], axis=1)","1030509a":"# \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432\u044b\u0432\u043e\u0434\u0430 \u0432\u0441\u0435\u0445 \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nintitial_eda_checks(data, 0)","b3db6205":"data.nunique(dropna=False)","55f33596":"data.Restaurant_id.sample(1)","c8f83147":"# \u041f\u043e\u0447\u0438\u0441\u0442\u0438\u043c \u0444\u043e\u0440\u043c\u0430\u0442 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0441 ID\ndata.Restaurant_id = data.Restaurant_id.apply(lambda x: int(x[3:]))\ndata.ID_TA = data.ID_TA.apply(lambda x: int(x[1:]))\ndata.Restaurant_id.sample(1)","6b398fa7":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n# \u0414\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0432 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u044f \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430\ndata_ta.drop([col for col in data_ta.columns if col.endswith(\n    '\/year')], axis=1, inplace=True)\ndata_ta.drop([col for col in data_ta.columns if col.startswith(\n    'hours\/')], axis=1, inplace=True)  # \u0412\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\ndata_ta.drop(['address', 'phone', 'rankingPosition', 'type', 'webUrl', 'website', 'email',\n              'isClosed', 'isLongClosed', 'rating'], axis=1, inplace=True)  # \u0414\u043e\u043f \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0435\u0448\u0438\u043b\u0430 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u0447\u043d\u043e\n\ndata_ta.sample()","740da355":"# \u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 ID_TA \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u043c\u0435\u0440\u0436\u0430\ndata_ta.rename(columns={\"id\": \"ID_TA\"}, inplace=True)\ndata_ta.sample()","ee5c2158":"# \u0422.\u043a. \u043d\u0430\u0431\u043e\u0440 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0443 \u0440\u0430\u0437\u043d\u044b\u0445 \u0438\u0441\u043f\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u043d\u044b\u0439, \u0442\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443\n# \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u043e\u0434\u0430\n# \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\ncolumns_list = list(data_ta.columns.sort_values())\ndata_ta = data_ta[columns_list]  # \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\ndata_ta.sample()","05ba6f64":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u043d\u0430\u0433\u0440\u0430\u0434\u044b \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\ndata_ta['awards_ta'] = data_ta[data_ta.columns[1:12]].apply(\n    lambda x: ', '.join(x.dropna().astype(str)),\n    axis=1)  # \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c \u0441 \u043d\u0430\u0433\u0440\u0430\u0434\u0430\u043c\u0438, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e\n\ndata_ta['awards_ta'] = data_ta['awards_ta'].apply(\n    lambda x: x.split(\", \"))  # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0433\u0440\u0430\u0434 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","a8116339":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a awards_num, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0433\u0440\u0430\u0434 \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\nlen_cert_list = []\n\nfor i in range(0, len(data_ta)):\n    if data_ta['awards_ta'][i][0] == '':  # \u0435\u0441\u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0433\u0440\u0430\u0434 \u043f\u0443\u0441\u0442\u043e\u0439, \u0442\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c 0\n        len_cert_list.append(0)\n    else:\n        # \u0435\u0441\u043b\u0438 \u043d\u0435\u043f\u0443\u0441\u0442\u043e\u0439, \u0442\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0434\u043b\u0438\u043d\u0443 \u0441\u043f\u0438\u0441\u043a\u0430\n        len_cert_list.append(len(data_ta['awards_ta'][i]))\n\ndata_ta['awards_num'] = len_cert_list  # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a","3032e026":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438 \u043a\u0443\u0445\u043e\u043d\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0443\u0445\u043e\u043d\u044c \u0434\u043b] \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\ndata_ta['cuisine_styles_ta'] = data_ta[data_ta.columns[13:-9]].apply(\n    lambda x: ', '.join(x.dropna().astype(str)),\n    axis=1)  # \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c \u0441 \u043a\u0443\u0445\u043d\u044f\u043c\u0438, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e\n\ndata_ta['cuisine_styles_ta'] = data_ta['cuisine_styles_ta'].apply(\n    lambda x: x.split(\", \"))  # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0443\u0445\u043e\u043d\u044c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","189ec510":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u043e\u0442\u0438\u043c \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 data\ndata_ta_output = data_ta[['ID_TA', 'awards_num',\n                          'cuisine_styles_ta', 'longitude', 'latitude']]\n# \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u0434\u043b\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 (\u0442\u0430\u043a\u0438\u0435 \u0435\u0441\u0442\u044c) \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u0440\u0436\u0430\ndata_ta_output.drop_duplicates(subset=['ID_TA'], inplace=True)\ndata_ta_output.sample(1)","7346ba72":"# \u0421\u043c\u0435\u0440\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 TA\ndata = pd.merge(data, data_ta_output, on=\"ID_TA\",\n                how=\"left\")  # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043f\u043e ID_TA\n\ndata.sample(1)\ndata.info()  # \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043f\u0440\u0435\u0436\u043d\u0438\u043c","cc55b76c":"data.awards_num.hist(bins = 11)\ndata.awards_num.describe()","a701d80d":"# \u0412\u044b\u0437\u043e\u0432\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0443 NA \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nintitial_eda_checks(data, 0)","30f21f45":"# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 NA \u0432 awards_num\ndata.awards_num.fillna(data.awards_num.median(), inplace = True)","a116a54a":"# \u041c\u0435\u0440\u0436\u0438\u043c \u0434\u0432\u0430 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430\ndata = pd.merge(data, cities_info, on=\"City\", how=\"left\")  # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043f\u043e City\ndata.sample(1)","b539e660":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\ndata.City.nunique()","8388dc60":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 \u043a\u043e\u043f\u0438\u0435\u0439 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c, \u0442.\u043a. \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439.\ndata['city_copies'] = data['City']","fd609318":"# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c One-Hot Encoding \u0432 pandas - get_dummies \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u043e\u0432.\ndata = pd.get_dummies(data, columns=[ 'City',], dummy_na=True)","46a9fb0b":"data.head(2)","16b22f91":"def haversine(lon1, lat1, lon2, lat2):\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0433\u043e\u0440\u043e\u0434\u0430 \u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430. \n    \u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442 \u0446\u0435\u043d\u0442\u0440\u0430 \u0433\u043e\u0440\u043e\u0434\u0430 \u0434\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.\n    '''\n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat\/2)**2 + cos(lat1) * cos(lat2) * sin(dlon\/2) ** 2\n    c = 2 * asin(sqrt(a))\n    earth_radius = 6371  # in km\n    return c * earth_radius","f93992ed":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a distance\ndata['distance'] = data.apply(lambda row: \n                                      haversine(lon1 = row['lon_c'], \n                                                lat1 = row['lat_c'],\n                                                lon2 = row['longitude'], \n                                                lat2 = row['latitude']), \n                                      axis=1)","35f0db72":"# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\nmean_distance = data.groupby(['city_copies'])['distance'].mean()\ndata['distance'] = data.apply(lambda x: mean_distance.loc[x['city_copies']] if pd.isna(\n    x['distance']) else x['distance'], axis=1)\n\n# data['distance'].fillna(data['distance'].mean(), inplace = True)","19a7253c":"data['distance'].hist()\ndata['distance'].describe()","ffaed775":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\ndata['reviews_per_ttl_ppl'] = data.apply(lambda row: (\n    row['Number of Reviews']\/(row['citizens']+row['tourists_per_year']))*1000, axis=1)","e7f03e90":"data['reviews_per_ttl_ppl'].hist()","095b2e2c":"data['Price Range'].unique()","d5979f6e":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0442\u044c \u0441 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435\npricerange_dict = {\"nan\": 0, \"$\": 1, \"$$ - $$$\": 2, \"$$$$\": 3}\ndata['price_range_num'] = data['Price Range']\ndata['price_range_num'].replace(\n    to_replace=pricerange_dict, inplace=True)  # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u043c","711deb68":"data.head(2)","e6b37cf3":"# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\ndata['Cuisine Style'].nunique()","1e15f2b3":"# \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445\ndata['Cuisine Style'].sample(5)","169523fd":"# \u0422\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445\ntype(data['Cuisine Style'][0])","29b877f5":"def clean_name(str_val):\n    \"\"\"\n    \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a [list] \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u0443\u0445\u043e\u043d\u044c.\n    \u041d\u0430 \u0432\u0445\u043e\u0434\u0435:\n        - \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u0443\u0445\u043e\u043d\u044c.\n    \u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435:\n        - \u0441\u043f\u0438\u0441\u043e\u043a [list] \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u0443\u0445\u043e\u043d\u044c.\n    \"\"\"\n    if pd.isna(str_val):\n        return ['Unknown']\n    str_val = str_val.strip('[]')  # \u041e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u043c \u0441\u043a\u043e\u0431\u043a\u0438\n    str_val = str_val.replace(\"\\'\", '')  # \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u0430\u0432\u044b\u0447\u043a\u0438 '\n    str_val = str_val.split(\", \")  # \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c \u043a\u0443\u0445\u043e\u043d\u044c\n    return str_val","1b0cb54b":"# \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0444-\u0438\u044e \u043f\u043e \u0447\u0438\u0441\u0442\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\ndata[\"Cuisine Style\"] = data[\"Cuisine Style\"].apply(clean_name)\ndata.sample(5)","582f821e":"def cuisine_nan_replace(row):\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n    \u041d\u0430 \u0432\u044b\u0445\u043e\u0434 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043b\u0438 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u0443\u0445\u043e\u043d\u044c, \u0438\u043b\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441 TA \u0434\u043b\u044f \u0442\u0435\u0445 \u043a\u0443\u0445\u043e\u043d\u044c, \u0433\u0434\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e Unknown.\n    '''\n    if row['Cuisine Style'][0] == 'Unknown':\n        return row['cuisine_styles_ta']\n    else:\n        return row['Cuisine Style']","0258c12a":"# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0441 TA \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438\ndata['Cuisine Style'] = data.apply(cuisine_nan_replace, axis=1)","c1749e1d":"intitial_eda_checks(data, 0)","a2e9a62f":"# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c Unknown\ndata['Cuisine Style'].fillna(\"Unknown\", inplace = True)","10572db6":"def clean_type(str_val):\n    \"\"\"\n    \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 Unknown \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u0443\u0445\u043d\u0438 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a [list].\n    \u041d\u0430 \u0432\u0445\u043e\u0434\u0435:\n        - \u043a\u043e\u043b\u043e\u043d\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u0443\u0445\u043e\u043d\u044c.\n    \u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435:\n        - \u0441\u043f\u0438\u0441\u043e\u043a [list] \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u0443\u0445\u043e\u043d\u044c.\n    \"\"\"\n    if type(str_val) == str:\n        return str_val.split()\n    return str_val","cd7a9488":"# \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e\ndata[\"Cuisine Style\"] = data[\"Cuisine Style\"].apply(clean_type)\ndata.sample(2)","1f79b0bf":"# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\ncount = 0\n\nfor i in range(0, len(data)):\n    count += len(data['Cuisine Style'][i])\n\nround(count\/len(data), 1)","9aacb238":"def data_explode(df, col, cnt=False):\n    \"\"\"\n    \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442 DataFrame df \u0438 '\u0438\u043c\u044f' \u0441\u0442\u043e\u043b\u0431\u0446\u0430 col.\n    \u0415\u0441\u043b\u0438 cnt = True (\"\u0440\u0435\u0436\u0438\u043c value_counts\"):\n        - \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 series \u0442\u0438\u043f\u0430 value_counts \u0434\u043b\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u0430 col.\n    \u0415\u0441\u043b\u0438 cnt = False (\"\u0440\u0435\u0436\u0438\u043c DataFrame\"):\n        - \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 DataFrame c \"\u0440\u0430\u0437\u044a\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u043c\u0438\" \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 col\n    \"\"\"\n    df = df.explode(col)\n    if cnt:\n        return df[col].value_counts()\n    return df","7a78dff2":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u0443\u0445\u043d\u0438, \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0432 \u0444-\u0438\u044e.\ncuisine_count = data.copy() # \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u043e\u043f\u0438\u044e \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430\ndata_explode(cuisine_count, 'Cuisine Style', cnt=True)","29754ab4":"# \u0421\u043e\u0437\u0434\u0430\u043b\u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 df \u0441 \u043a\u0443\u0445\u043d\u044f\u043c\u0438 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 explode\ncuisine_count = data_explode(cuisine_count, 'Cuisine Style', cnt=False)\ncuisine_count.sample(3)","3a09d267":"# \u0421\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n(cuisine_count[\"Cuisine Style\"].value_counts()).hist(bins = 10)","0ef5a2b3":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a cuisine_num\nlen_cuisines_list = []\n\nfor i in range(0, len(data)):\n    if data['Cuisine Style'][i][0] == 'Unknown':\n        len_cuisines_list.append(-1)  # -1 \u0434\u043b\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\n    elif data['Cuisine Style'][i][0] == '':\n        len_cuisines_list.append(0)  # 0, \u0433\u0434\u0435 \u043a\u0443\u0445\u043e\u043d\u044c \u043d\u0435\u0442 \u0438 \u043d\u0430 TA\n    else:\n        len_cuisines_list.append(len(data['Cuisine Style'][i]))\n\ndata['cuisine_num'] = len_cuisines_list","2904fa0d":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\ndata['cuisine_num'].describe()","340ce732":"# data['cuisine_num'].replace(-1, data['cuisine_num'].median(), inplace = True)","2782834f":"data.sample(2)","157ecbf1":"def dietary_restrictions(row):\n    \"\"\"\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430.\n    \u0415\u0441\u043b\u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043a\u0443\u0445\u043e\u043d\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0435\u0441\u0442\u044c \u043e\u0434\u043d\u0430 \u0438\u0437 \u043a\u0443\u0445\u043e\u043d\u044c \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043f\u0435\u0446. \u043a\u0443\u0445\u043e\u043d\u044c, \u0442\u043e\n        - \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c 1\n        - \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c 0.\n    \"\"\"\n    dietary_restrictions = ['Vegetarian Friendly', 'Vegan Options',\n                            'Gluten Free Options', 'Halal', 'Kosher']\n    for i in dietary_restrictions:\n        if i in row['Cuisine Style'] and i != '':\n            return 1\n    return 0","88cc3669":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a dietary_restrictions\ndata['dietary_restrictions'] = data.apply(dietary_restrictions, axis=1)","ab2e148c":"data.sample(2)","1d90633a":"# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c MultiLabelBinarizer() \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n\ns = data['Cuisine Style']\nmlb = MultiLabelBinarizer()\ncuisine_df = pd.DataFrame(mlb.fit_transform(\n    s), columns=mlb.classes_, index=data.index)  # c\u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0434\u0430\u043c\u043c\u0438 \u043a\u0443\u0445\u043d\u044f\u043c\u0438\n\ncuisine_df.head(3)","ee59f016":"# \u0421\u043c\u0435\u0440\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u043e\u043c \u0434\u0430\u043c\u043c\u0438-\u043a\u0443\u0445\u043e\u043d\u044c\ndata = data.merge(cuisine_df, left_index=True, right_index=True)\ndata.info()\ndata.sample(2)","7636ba80":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0441 \u0440\u0435\u0432\u044c\u044e.\ndata.Reviews[1]","13587126":"# \u0422\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 - str\ntype(data.Reviews[1])","db0343a9":"# \u0412 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0435\u0441\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0438\u0445 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u0440\u0435\u0432\u044c\u044e \u043d\u0435\u0442.\ndata['Reviews'].fillna('[[], []]', inplace=True)","71a8c4df":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a review_date \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0430\u0442\u0435\u0440\u043d\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0434\u0430\u0442.\npattern = re.compile('\\d+\\\/\\d+\\\/\\d+')\ndata['review_date'] = data.Reviews.apply(pattern.findall)\n\ndata['review_date'].sample(5)","df1fd025":"# \u041d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u0434\u0430\u0442\u044b, \u0433\u0434\u0435 \u0431\u043e\u043b\u0435\u0435 \u0434\u0432\u0443\u0445 \u0434\u0430\u0442\nfor i in range (0, len(data)):\n    if len(data.review_date[i]) > 2:\n        print(i, len(data.review_date[i]))","6ef2552c":"# \u0427\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0433\u0434\u0435 \u0432 \u043f\u043e\u043b\u0435 review_date \u043f\u043e\u043f\u0430\u043b\u0438 \u0434\u0430\u0442\u044b-\u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f \u0438\u0437 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043e\u0442\u0437\u044b\u0432\u0430.\ndata.review_date = data.review_date.apply(lambda x: [x[-2], x[-1]] if len(x) > 2 else x)","f2b8edfb":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0430\u043d\u043d\u044b\u0445, \u0433\u0434\u0435 \u043c\u0435\u043d\u0435\u0435 \u0434\u0432\u0443\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432. \ncount = 0\nfor i in range (0, len(data)):\n    if len(data.review_date[i]) < 2:\n        count +=1\ncount","c24d941a":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0441\u0440\u0430\u0437\u0443 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 datetime64\ndata['date_rev_1'] = pd.to_datetime(data.review_date.apply(lambda x: x[0] if len(x) >=1 else None))\ndata['date_rev_2'] = pd.to_datetime(data.review_date.apply(lambda x: x[1] if len(x) >=2 else None))\ndata['date_rev_delta'] = (abs(data.date_rev_2-data.date_rev_1))\/ np.timedelta64(1, \"D\")","bdbfa999":"# \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u043e\u0442\u0437\u044b\u0432\u044b \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\ndate_max = data[['date_rev_1', 'date_rev_2']].max(axis =1).max()\ndate_max","2edf392d":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u0440\u043e \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0437\u044b\u0432\u043e\u0432\ndata['date_rev_from_max'] = data.apply(lambda row: None if len(row.review_date) == 0  # \u0435\u0441\u043b\u0438 \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0442\u043e Nan\n                                       # \u0435\u0441\u043b\u0438 \u043e\u0434\u043d\u0430 \u0434\u0430\u0442\u0430, \u0442\u043e \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u0441 \u043f\u0435\u0440\u0432\u044b\u043c \u043e\u0442\u0437\u044b\u0432\u043e\u043c\n                                       else (date_max-row.date_rev_1) if len(row.review_date) == 1\n                                       else ((date_max-row.date_rev_2)), axis=1) \/ np.timedelta64(1, \"D\")  # \u0435\u0441\u043b\u0438 \u0434\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u0430, \u0442\u043e \u0431\u0435\u0440\u0435\u043c \u0432\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u0437\u044b\u0432","f65f3640":"data.sample(3)","8cb9bc93":"# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 ID\ndata.Restaurant_id.nunique()","3690d6e8":"# \u041d\u0430\u0439\u0434\u0435\u043c ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432 value_counts \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a\nin_chain_index = data['Restaurant_id'].value_counts().loc[lambda x: x>1].index","88da23a7":"# \u0437\u0430\u043f\u0438\u0448\u0435\u043c ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0443 \u043a\u043e\u0433\u043e value_counts > 1\ndata['in_chain'] = data['Restaurant_id'].apply(lambda x: 1 if x in in_chain_index else 0)","690839c0":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0435\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ndata['in_chain'].value_counts()","bce65c01":"def get_boxplot_2(column):\n    \"\"\"\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 \u043a\u043e\u0440\u043e\u0431\u043e\u0447\u043d\u043e\u0439 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u043b\u044f \u043d\u0435\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0432\u0435\u043b\u0438\u0447\u0438\u043d.\n    \u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0434\u043b\u044f \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438. \n    \u041e\u0442\u0440\u0438\u0441\u043e\u0432\u044b\u0432\u0430\u0435\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 Rating.\n    \"\"\"\n    fig, ax = plt.subplots(figsize=(14, 4))\n    sns.boxplot(x=column, y='Rating',\n                data=data[data['sample'] == 1],\n                ax=ax)\n    plt.xticks(rotation=45)\n    ax.set_title('Boxplot \u0434\u043b\u044f ' + column)\n    plt.show()","fef29f2d":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\nplt.rcParams['figure.figsize'] = (2,5)\ndata['in_chain'].hist(bins=2)","c6057c38":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0442 \u0442\u043e\u0433\u043e, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0441\u0435\u0442\u0435\u0432\u044b\u043c\nfig, ax = plt.subplots(1, 3, figsize=(20, 10))\nsns.scatterplot(data=data[data['sample'] == 1], x=\"in_chain\", y=\"Rating\", ax=ax[0])\nsns.scatterplot(data=data[data['sample'] == 1], x=\"in_chain\", y=\"Number of Reviews\",ax=ax[1])\nsns.scatterplot(data=data[data['sample'] == 1], x=\"in_chain\", y=\"price_range_num\",ax=ax[2])","d2c950fd":"plt.rcParams['figure.figsize'] = (10,7)\ndf_train['Ranking'].hist(bins=100)","06f58c1a":"df_train['City'].value_counts(ascending=True).plot(kind='barh')","a9f71895":"df_train['Ranking'][df_train['City'] =='London'].hist(bins=100)","e7005018":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\nfor x in (df_train['City'].value_counts())[0:10].index:\n    df_train['Ranking'][df_train['City'] == x].hist(bins=100)\nplt.show()","d59aac3d":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a rank_per_ttl\ndata['rank_per_ttl'] = data.apply(lambda x: x['Ranking']\/x['restaurants_number_TA'], axis = 1)\ndata.sample(1)","d5c27736":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\ndata['rank_per_ttl'].hist()","1c0eb0a1":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\nfig, ax = plt.subplots(1, 3, figsize=(20, 8))\nsns.scatterplot(data=data[data['sample'] == 1], x=\"rank_per_ttl\", y=\"Rating\", ax=ax[0])\nsns.scatterplot(data=data[data['sample'] == 1], x=\"Number of Reviews\", y=\"rank_per_ttl\",ax=ax[1])\nsns.scatterplot(data=data[data['sample'] == 1], x=\"price_range_num\", y=\"rank_per_ttl\",ax=ax[2])","3ee63583":"fig, ax = plt.subplots(1, 3, figsize=(20, 8))\nsns.scatterplot(data=data[data['sample'] == 1], x=\"Ranking\", y=\"Rating\", ax=ax[0])\nsns.scatterplot(data=data[data['sample'] == 1], x=\"Number of Reviews\", y=\"Ranking\",ax=ax[1])\nsns.scatterplot(data=data[data['sample'] == 1], x=\"price_range_num\", y=\"Ranking\",ax=ax[2])","05b80de1":"# \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ndata[\"ranking_num_reviews\"] = data[\"Ranking\"] * data[\"Number of Reviews\"]\ndata[\"ranking_num_cuisines\"] = data[\"Ranking\"] * data[\"cuisine_num\"]","b40752e6":"plt.rcParams['figure.figsize'] = (2,5)\ndata['price_range_num'].hist(bins=3)\ndata['price_range_num'].describe()","098af762":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432 \u043f\u043e \u0446\u0435\u043d\u043e\u0432\u044b\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c.\nget_boxplot_2('price_range_num')","6b263073":"# \u041f\u043e\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\nfig, ax = plt.subplots(1, 2, figsize=(20, 8))\nsns.scatterplot(data=data[data['sample'] == 1], x=\"price_range_num\", y=\"Rating\", ax=ax[0]);\nsns.scatterplot(data=data[data['sample'] == 1], x=\"Number of Reviews\", y=\"price_range_num\", ax=ax[1]);","8229beaf":"plt.rcParams['figure.figsize'] = (10,7)\ndf_train['Number of Reviews'].hist(bins=70)\ndf_train['Number of Reviews'].describe()","64ee5267":"sns.scatterplot(data=df_train, x=\"Number of Reviews\", y=\"Rating\")","f2bd7200":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0441\u0443\u043c\u043c\u044b \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0432\u044c\u044e \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\nreviews_sum = pd.DataFrame(data.groupby(['city_copies'])[\n    'Number of Reviews'].sum().sort_values(ascending=False))\nreviews_sum.rename(\n    columns={\"Number of Reviews\": \"ttl_reviews_per_city\"}, inplace=True)\nreviews_sum","bde95d76":"# \u0421\u043c\u0435\u0440\u0436\u0438\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\ndata = pd.merge(data, reviews_sum, on=\"city_copies\", how=\"left\")\ndata.sample(1)\ndata.info()","fdbaf719":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a reviews_perc_in_city_ttl\ndata['reviews_perc_in_city_ttl'] = data.apply(lambda x: x['Number of Reviews']\/x['ttl_reviews_per_city'], axis = 1)\ndata.sample(1)","0f077bb6":"def iqr_analysis(series, mode = False):\n    \"\"\"\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u0430\u043c\u0446\u0438\u044e \u043e \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430.\n    \u0415\u0441\u043b\u0438 mode = True, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0438 \u043d\u0438\u0436\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432.\n    \"\"\"\n    IQR = series.quantile(0.75) - series.quantile(0.25)\n    perc25 = series.quantile(0.25)\n    perc75 = series.quantile(0.75)\n\n    f=perc25 - 1.5*IQR\n    l=perc75 + 1.5*IQR\n    \n    if mode: \n        return f, l\n    \n    print(\n        '25-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc25),\n        '75-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc75),\n        \"IQR: {}, \".format(IQR),\n        \"\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{f}, {l}].\".format(f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR))","843de4ad":"# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0433\u0440\u0430\u043d\u0438\u0446 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\niqr_analysis(data['Number of Reviews'])","7e3d546a":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\ncols = [\"lower_border\", \"higher_border\"]\nlst = []\n\nfor x in (df_train['City'].value_counts()).index:\n    lst.append(iqr_analysis(\n        df_train['Number of Reviews'][df_train['City'] == x], mode=True))\n\nreviews_IQ = pd.DataFrame(lst, columns=cols)\nreviews_IQ['city'] = df_train['City'].value_counts().index\n\ndisplay(reviews_IQ)\nprint('\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0438 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043f\u043e \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432:', reviews_IQ.higher_border.max())","1537799e":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0434\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u0430\u0441\u0430\ndf_train[df_train['Number of Reviews'] < reviews_IQ.higher_border.max()]['Number of Reviews'].hist(bins=70)\n","e55a9f4a":"# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043f\u0440\u0438 \u0433\u0440\u0430\u043d\u0438\u0446\u0435 \u0432 840\nlen(data[data['Number of Reviews'] > 840]['Number of Reviews'])","145025ea":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0435 data \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u043d\u043e\u0435 \u0437\u043d\u0430\u0435\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\nprint('\u0411\u0443\u0434\u0435\u0442 \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439:', len(data[data['Number of Reviews'] > 840]['Number of Reviews']))\ndata['Number of Reviews'] = data['Number of Reviews'].apply(lambda x: 840 if x >=840 else x)","de1e4976":"sns.scatterplot(data=data[data['sample'] == 1], x=\"Number of Reviews\", y=\"Rating\")","d98a5f6b":"fig, ax = plt.subplots(figsize=(14, 4))\nsns.boxplot(x='Rating', y='Number of Reviews',\n                data=data[data['sample'] == 1],\n                ax=ax)\nplt.xticks(rotation=45)\nax.set_title('Boxplot \u0434\u043b\u044f Reviews\/Rating')\nplt.show()","daca55b4":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c \u0432 %\ndisplay(pd.DataFrame(\n        data['city_copies'].value_counts(normalize=True)*100))","6845d81c":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c.\nget_boxplot_2('city_copies')","7fa595d3":"fig, ax = plt.subplots(figsize=(14, 4))\nsns.boxplot(x='city_copies', y='Number of Reviews',\n                data=data[data['sample'] == 1],\n                ax=ax)\nplt.xticks(rotation=45)\nax.set_title('Boxplot \u0434\u043b\u044f city_copies')\nplt.show()","f2343d7a":"fig, ax = plt.subplots(figsize=(14, 4))\nsns.boxplot(x='city_copies', y='price_range_num',\n                data=data[data['sample'] == 1],\n                ax=ax)\nplt.xticks(rotation=45)\nax.set_title('Boxplot \u0434\u043b\u044f city_copies')\nplt.show()","267a6d07":"fig, ax = plt.subplots(figsize=(14, 4))\nsns.boxplot(x='city_copies', y='date_rev_delta',\n                data=data[data['sample'] == 1],\n                ax=ax)\nplt.xticks(rotation=45)\nax.set_title('Boxplot \u0434\u043b\u044f city_copies')\nplt.show()","9c51dfc9":"fig, ax = plt.subplots(figsize=(14, 4))\nsns.boxplot(x='city_copies', y='Ranking',\n                data=data[data['sample'] == 1],\n                ax=ax)\nplt.xticks(rotation=45)\nax.set_title('Boxplot \u0434\u043b\u044f city_copies')\nplt.show()","c01abfc7":"fig, ax = plt.subplots(1, 3, figsize=(20, 10))\nsns.scatterplot(data=data[data['sample'] == 1], x=\"citizens\", y=\"Ranking\", ax=ax[0])\nsns.scatterplot(data=data[data['sample'] == 1], x=\"tourists_per_year\", y=\"Number of Reviews\",ax=ax[1])\nsns.scatterplot(data=data[data['sample'] == 1], x=\"citizens\", y=\"restaurants_number_TA\",ax=ax[2])","79013e35":"get_boxplot_2('country')","55a736ca":"data['date_rev_delta'].hist()\ndata['date_rev_delta'].describe()","21b04b82":"# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0433\u0440\u0430\u043d\u0438\u0446 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\niqr_analysis(data['date_rev_delta'])","5182554c":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0442\u0437\u044b\u0432\u044b, \u0433\u0434\u0435 \u0434\u0435\u043b\u044c\u0442\u0430 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438 \u0431\u043e\u043b\u0435\u0435 \u0433\u043e\u0434\u0430. \u042d\u0442\u043e \u0447\u0443\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u043f\u043e IQR\ndata[data['date_rev_delta']>365]['date_rev_delta'].count()","a543c68d":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 365*3 \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 (\u0432\u044b\u0431\u0440\u0430\u043d\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u043e)\ndata['date_rev_delta'] = data['date_rev_delta'].apply(lambda x: 1095 if x >1095 else x)","c04b84e1":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c NA \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435\ndata['date_rev_delta'].fillna(data['date_rev_delta'].mean(), inplace = True)","857f1339":"data['date_rev_delta'].hist()\ndata['date_rev_delta'].describe()","420a16cf":"data['date_rev_from_max'].hist()\ndata['date_rev_from_max'].describe()","3672aa40":"# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0433\u0440\u0430\u043d\u0438\u0446 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\niqr_analysis(data['date_rev_from_max'])","1b0aa7bb":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0434\u0430\u043d\u043d\u044b\u0435, \u0433\u0434\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u044b\ndata[data['date_rev_from_max']>1132]['date_rev_from_max'].count()","2885b24f":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 1132 \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\ndata['date_rev_from_max'] = data['date_rev_from_max'].apply(lambda x: 1132 if x >1132 else x)","e0c46b79":"# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u043c\ndata['date_rev_from_max'].fillna(data['date_rev_from_max'].mean(), inplace = True)","4dc1290b":"data.sample()","9fd200d0":"data['cuisine_num'].value_counts(ascending=True).plot(kind='barh')\ndata['cuisine_num'].describe()","4d8b70a5":"# \u041f\u043e\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043a\u0443\u0445\u043e\u043d\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n\nfig, ax = plt.subplots(1, 2, figsize=(20, 8))\nsns.scatterplot(data=data[data['sample'] == 1], x=\"cuisine_num\", y=\"Rating\", ax=ax[0]);\nsns.scatterplot(data=data[data['sample'] == 1], x=\"cuisine_num\", y=\"Number of Reviews\", ax=ax[1]);","b8f417a4":"cuisine_count.sample()","f7391d06":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432 \u043f\u043e \u043a\u0443\u0445\u043d\u044f\u043c \u043d\u0430 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0435, \u0433\u0434\u0435 \u043e\u0442\u0440\u0430\u0431\u043e\u0442\u0430\u043b explode (cuisine_count)\nfig, ax = plt.subplots(figsize=(60, 4))\nsns.boxplot(x='Cuisine Style', y='Rating',\n                data=cuisine_count[cuisine_count['sample'] == 1],\n                ax=ax)\nplt.xticks(rotation=45)\nax.set_title('Boxplot \u0434\u043b\u044f cuisines')\nplt.show()","4d59f84a":"df_train['Rating'].value_counts(ascending=True).plot(kind='barh')\ndf_train['Rating'].describe()","98870c39":"df_train['Rating'].unique()","1cc39a55":"# \u0421\u0444\u043e\u0440\u0441\u043c\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0438\u0437 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430\ncols_to_drop = ['sample', 'city_copies',  'City_Amsterdam',  'City_Athens',  'City_Barcelona', 'City_Berlin',  'City_Bratislava',  'City_Brussels',  'City_Budapest',  'City_Copenhagen',  'City_Dublin',  'City_Edinburgh',  'City_Geneva',  'City_Hamburg',  'City_Helsinki', 'City_Krakow',  'City_Lisbon',  'City_Ljubljana',  'City_London',  'City_Luxembourg',  'City_Lyon',  'City_Madrid',  'City_Milan',  'City_Munich',  'City_Oporto',  'City_Oslo',  'City_Paris', 'City_Prague',  'City_Rome',  'City_Stockholm',  'City_Vienna',  'City_Warsaw',  'City_Zurich',  'City_nan', '',  'Afghani',  'African',  'Albanian',  'American',  'Arabic',  'Argentinean', 'Armenian',  'Asian',  'Australian',  'Austrian',  'Azerbaijani',  'Balti',  'Bangladeshi',  'Bar',  'Barbecue',  'Beer restaurants',  'Belgian',  'Brazilian',  'Brew Pub',  'British',  'Burmese',  'Cafe',  'Cajun & Creole',  'Cambodian',  'Campania',  'Canadian',  'Caribbean',  'Catalan',  'Caucasian',  'Central American',  'Central Asian',  'Central European',  'Central-Italian',  'Chilean',  'Chinese',  'Colombian',  'Contemporary',  'Croatian',  'Cuban',  'Czech',  'Danish',  'Deli',  'Delicatessen',  'Diner',  'Dining bars',  'Dutch',  'Eastern European',  'Ecuadorean',  'Egyptian',  'Emilian',  'Ethiopian',\n                'European', 'Fast Food',  'Filipino',  'French',  'Fruit parlours',  'Fujian',  'Fusion',  'Gastropub',  'Georgian',  'German',  'Gluten Free Options',  'Greek',  'Grill',  'Halal',  'Hawaiian',  'Healthy',  'Hungarian',  'Indian',  'Indonesian',  'International',  'Irish',  'Israeli',  'Italian',  'Jamaican',  'Japanese',  'Japanese Fusion',  'Korean',  'Kosher',  'Latin',  'Latvian',  'Lazio',  'Lebanese',  'Lombard',  'Malaysian',  'Mediterranean',  'Mexican',  'Middle Eastern',  'Minority Chinese',  'Mongolian',  'Moroccan',  'Native American',  'Neapolitan',  'Nepali',  'New Zealand',  'Northern-Italian',  'Norwegian',  'Pakistani',  'Persian',  'Peruvian',  'Pizza',  'Polish',  'Polynesian',  'Portuguese',  'Pub',  'Romagna',  'Romana',  'Romanian',  'Russian',  'Salvadoran',  'Sardinian',  'Scandinavian',  'Scottish',  'Seafood',  'Sicilian',  'Singaporean',  'Slovenian',  'Soups',  'South American',  'Southern-Italian',  'Southwestern',  'Spanish',  'Sri Lankan',  'Steakhouse',  'Street Food',  'Sushi',  'Swedish',  'Swiss',  'Taiwanese',  'Thai',  'Tibetan',  'Tunisian',  'Turkish',  'Tuscan',  'Ukrainian',  'Uzbek',  'Vegan Options',  'Vegetarian Friendly',  'Venezuelan',  'Vietnamese',  'Welsh',  'Wine Bar',  'Xinjiang',  'Yunnan',  'Unknown']","454bc0d0":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439\nplt.figure(figsize=(30, 15))\nheatmap = sns.heatmap(data[data['sample'] == 1].drop(\n    cols_to_drop, axis=1).corr(), vmin=-1, vmax=1, annot=True, cmap='BrBG')\nheatmap.set_title('\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439', fontdict={'fontsize': 18}, pad=12)","22d919ad":"#.\u041f\u043e\u0434\u0441\u0432\u0435\u0442\u0438\u043c \u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0433\u0434\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0440\u043e\u0433\u0430\nplt.figure(figsize=(30, 15))\nheatmap = sns.heatmap(abs(data[data['sample'] == 1].drop(\n    cols_to_drop, axis=1).corr()) > 0.8, vmin=-1, vmax=1, annot=True, cmap='BrBG')\nheatmap.set_title('\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439, \u0433\u0434\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f > 0.8', fontdict={'fontsize':18}, pad=12);","f65530ac":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 Rating, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c\nplt.figure(figsize=(8, 12))\nheatmap = sns.heatmap(data[data['sample'] == 1].drop(\n    cols_to_drop, axis=1).corr()[['Rating']].sort_values(by='Rating', ascending=False), vmin=-1, vmax=1, annot=True, cmap='BrBG')\nheatmap.set_title('\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 Rating', fontdict={'fontsize':18}, pad=16);","483723e2":"# \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0435\u0442 \u0441\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438\ncorrelated_features = set()\n# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0438\u0437 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0446\u0438\u0439, \u0442\u043a \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441 \u043d\u0435\u0439, - \u0445\u043e\u0440\u043e\u0448\u043e \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\ncorrelation_matrix = data[data['sample'] == 1].drop(\n    ['Rating', 'sample'], axis=1).corr()\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(i):\n        if abs(correlation_matrix.iloc[i, j]) > 0.8:\n            colname = correlation_matrix.columns[j]\n            correlated_features.add(colname)\n\nprint('\u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0438\u0437 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438:', correlated_features)","d9f7c8eb":"def get_stat_dif_2(column):\n    \"\"\" \n    \u041f\u043e\u0438\u0441\u043a \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0439 \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0435\u0441\u0442\u0430 \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430.\n    \"\"\"\n    cols = data[data['sample'] == 1].loc[:, column].value_counts().index[:]\n    combinations_all = list(combinations(cols, 2))\n    # \u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0435\u0437 NA \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430, \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c, \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0432 0 \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043e\u043a\n    stud_stat = data[data['sample'] == 1]\n    for comb in combinations_all:\n        if ttest_ind(stud_stat.loc[data[data['sample'] == 1].loc[:, column] == comb[0], 'Rating'],\n                     stud_stat.loc[data[data['sample'] == 1].loc[:, column] == comb[1], 'Rating']).pvalue <= 0.05\/len(combinations_all):  # \u0443\u0447\u043b\u0438 \u043f\u043e\u043f\u0440\u0430\u0432\u043a\u0443 \u0411\u043e\u043d\u0444\u0435\u0440\u043e\u043d\u0438\n            # print('\u041d\u0430\u0439\u0434\u0435\u043d\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438', column)\n            pass\n        else:\n            return column \n            break","25aeb9f4":"# \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0435\u0442 \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nto_remove_features = set()\n\n# \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u043b\u0438 \u0438\u0437 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430\nfor column in cols_to_drop: \n    to_remove_features.add(get_stat_dif_2(column))\n    \nprint('\\n \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0438\u0437 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438:', to_remove_features)","6babba5f":"# \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0435\u0442, \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a, \u0443\u0434\u0430\u043b\u044f\u0435\u043c NAN\ndrop_features = correlated_features.union(to_remove_features)\ndrop_features = list(drop_features)\ndrop_features.remove(None)","8c51d745":"# \u041d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u0437\u0430\u043d\u043e\u0432\u043e \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\nDATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'\/kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'sample_submission.csv')\ncities_info = pd.read_csv('\/kaggle\/input\/citiesdata-2\/cities_data.csv')\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c data_ta \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0431\u0440\u0430\u043b\u0438 \u0441 TripAdvisor\n# \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0444\u0430\u0439\u043b \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0432 data_ta\ndata_ta = pd.DataFrame()\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/data-ta\/'):\n    for filename in filenames:\n        temp = pd.read_csv(os.path.join(dirname, filename))\n        data_ta = pd.concat([data_ta, temp], ignore_index = True)\n\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","05eef112":"def preproc_data(df_input, data_ta_input):\n    '''\u0412\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438.'''\n\n    df_output = df_input.copy()\n    data_ta = data_ta_input.copy()\n\n    #################### 1. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 ##############################################################\n    # \u0421\u043e\u0431\u0435\u0440\u0435\u043c \u0437\u0434\u0435\u0441\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n    def haversine(lon1, lat1, lon2, lat2):\n        '''\n        \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0433\u043e\u0440\u043e\u0434\u0430 \u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430. \n        \u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442 \u0446\u0435\u043d\u0442\u0440\u0430 \u0433\u043e\u0440\u043e\u0434\u0430 \u0434\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.\n        '''\n        lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n        dlon = lon2 - lon1\n        dlat = lat2 - lat1\n        a = sin(dlat\/2)**2 + cos(lat1) * cos(lat2) * sin(dlon\/2) ** 2\n        c = 2 * asin(sqrt(a))\n        earth_radius = 6371  # in km\n        return c * earth_radius\n\n    def clean_name(str_val):\n        \"\"\"\n        \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a [list] \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u0443\u0445\u043e\u043d\u044c.\n        \u041d\u0430 \u0432\u0445\u043e\u0434\u0435:\n            - \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u0443\u0445\u043e\u043d\u044c.\n        \u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435:\n            - \u0441\u043f\u0438\u0441\u043e\u043a [list] \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u0443\u0445\u043e\u043d\u044c.\n        \"\"\"\n        if pd.isna(str_val):\n            return ['Unknown']\n        str_val = str_val.strip('[]')  # \u041e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u043c \u0441\u043a\u043e\u0431\u043a\u0438\n        str_val = str_val.replace(\"\\'\", '')  # \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u0430\u0432\u044b\u0447\u043a\u0438 '\n        str_val = str_val.split(\", \")  # \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c \u043a\u0443\u0445\u043e\u043d\u044c\n        return str_val\n\n    def cuisine_nan_replace(row):\n        '''\n        \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n        \u041d\u0430 \u0432\u044b\u0445\u043e\u0434 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043b\u0438 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u0443\u0445\u043e\u043d\u044c, \u0438\u043b\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441 TA \u0434\u043b\u044f \u0442\u0435\u0445 \u043a\u0443\u0445\u043e\u043d\u044c, \u0433\u0434\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e Unknown.\n        '''\n        if row['Cuisine Style'][0] == 'Unknown':\n            return row['cuisine_styles_ta']\n        else:\n            return row['Cuisine Style']\n\n    def clean_type(str_val):\n        \"\"\"\n        \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 Unknown \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u0443\u0445\u043d\u0438 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a [list].\n        \u041d\u0430 \u0432\u0445\u043e\u0434\u0435:\n            - \u043a\u043e\u043b\u043e\u043d\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u0443\u0445\u043e\u043d\u044c.\n        \u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435:\n            - \u0441\u043f\u0438\u0441\u043e\u043a [list] \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u0443\u0445\u043e\u043d\u044c.\n        \"\"\"\n        if type(str_val) == str:\n            return str_val.split()\n        return str_val\n\n    def dietary_restrictions(row):\n        \"\"\"\n        \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430.\n        \u0415\u0441\u043b\u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043a\u0443\u0445\u043e\u043d\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0435\u0441\u0442\u044c \u043e\u0434\u043d\u0430 \u0438\u0437 \u043a\u0443\u0445\u043e\u043d\u044c \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043f\u0435\u0446. \u043a\u0443\u0445\u043e\u043d\u044c, \u0442\u043e\n            - \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c 1\n            - \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c 0.\n        \"\"\"\n        dietary_restrictions = ['Vegetarian Friendly', 'Vegan Options',\n                                'Gluten Free Options', 'Halal', 'Kosher']\n        for i in dietary_restrictions:\n            if i in row['Cuisine Style'] and i != '':\n                return 1\n        return 0\n\n    def get_stat_dif_2(column):\n        \"\"\" \n        \u041f\u043e\u0438\u0441\u043a \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0439 \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0435\u0441\u0442\u0430 \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430.\n        \"\"\"\n        cols = df_output[df_output['sample'] == 1].loc[:, column].value_counts().index[:]\n        combinations_all = list(combinations(cols, 2))\n        # \u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0435\u0437 NA \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430, \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c, \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0432 0 \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043e\u043a\n        stud_stat = df_output[df_output['sample'] == 1]\n        for comb in combinations_all:\n            if ttest_ind(stud_stat.loc[df_output[df_output['sample'] == 1].loc[:, column] == comb[0], 'Rating'],\n                         stud_stat.loc[df_output[df_output['sample'] == 1].loc[:, column] == comb[1], 'Rating']).pvalue <= 0.05\/len(combinations_all):  # \u0443\u0447\u043b\u0438 \u043f\u043e\u043f\u0440\u0430\u0432\u043a\u0443 \u0411\u043e\u043d\u0444\u0435\u0440\u043e\u043d\u0438\n                # print('\u041d\u0430\u0439\u0434\u0435\u043d\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438', column)\n                pass\n            else:\n                return column\n                break\n\n    # \u041f\u043e\u0447\u0438\u0441\u0442\u0438\u043c \u0444\u043e\u0440\u043c\u0430\u0442 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0441 ID (ID_TA, Restaurant_id), \u0438\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043e\u0432\n    df_output.Restaurant_id = df_output.Restaurant_id.apply(\n        lambda x: int(x[3:]))\n    df_output.ID_TA = df_output.ID_TA.apply(lambda x: int(x[1:]))\n\n    # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 TA\n    # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n    # \u0414\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0432 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u044f \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430\n    data_ta.drop([col for col in data_ta.columns if col.endswith(\n        '\/year')], axis=1, inplace=True)\n    data_ta.drop([col for col in data_ta.columns if col.startswith(\n        'hours\/')], axis=1, inplace=True)  # \u0412\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\n    data_ta.drop(['address', 'phone', 'rankingPosition', 'type', 'webUrl', 'website', 'email',\n                  'isClosed', 'isLongClosed', 'rating'], axis=1, inplace=True)  # \u0414\u043e\u043f \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0435\u0448\u0438\u043b\u0430 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u0447\u043d\u043e\n    # \u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 ID_TA \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u043c\u0435\u0440\u0436\u0430\n    data_ta.rename(columns={\"id\": \"ID_TA\"}, inplace=True)\n    # \u0422.\u043a. \u043d\u0430\u0431\u043e\u0440 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0443 \u0440\u0430\u0437\u043d\u044b\u0445 \u0438\u0441\u043f\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u043d\u044b\u0439, \u0442\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443\n    # \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u043e\u0434\u0430\n    # \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\n    columns_list = list(data_ta.columns.sort_values())\n    data_ta = data_ta[columns_list]  # \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u043d\u0430\u0433\u0440\u0430\u0434\u044b \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\n    data_ta['awards_ta'] = data_ta[data_ta.columns[1:12]].apply(\n        lambda x: ', '.join(x.dropna().astype(str)),\n        axis=1)  # \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c \u0441 \u043d\u0430\u0433\u0440\u0430\u0434\u0430\u043c\u0438, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e\n    data_ta['awards_ta'] = data_ta['awards_ta'].apply(\n        lambda x: x.split(\", \"))  # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0433\u0440\u0430\u0434 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a awards_num, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0433\u0440\u0430\u0434 \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\n    len_cert_list = []\n    for i in range(0, len(data_ta)):\n        if data_ta['awards_ta'][i][0] == '':  # \u0435\u0441\u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0433\u0440\u0430\u0434 \u043f\u0443\u0441\u0442\u043e\u0439, \u0442\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c 0\n            len_cert_list.append(0)\n        else:\n            # \u0435\u0441\u043b\u0438 \u043d\u0435\u043f\u0443\u0441\u0442\u043e\u0439, \u0442\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0434\u043b\u0438\u043d\u0443 \u0441\u043f\u0438\u0441\u043a\u0430\n            len_cert_list.append(len(data_ta['awards_ta'][i]))\n    data_ta['awards_num'] = len_cert_list  # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438 \u043a\u0443\u0445\u043e\u043d\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0443\u0445\u043e\u043d\u044c \u0434\u043b] \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\n    data_ta['cuisine_styles_ta'] = data_ta[data_ta.columns[13:-9]].apply(\n        lambda x: ', '.join(x.dropna().astype(str)),\n        axis=1)  # \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c \u0441 \u043a\u0443\u0445\u043d\u044f\u043c\u0438, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e\n    data_ta['cuisine_styles_ta'] = data_ta['cuisine_styles_ta'].apply(\n        lambda x: x.split(\", \"))  # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0443\u0445\u043e\u043d\u044c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u043e\u0442\u0438\u043c \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 data\n    data_ta_output = data_ta[['ID_TA', 'awards_num',\n                              'cuisine_styles_ta', 'longitude', 'latitude']]\n    # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u0434\u043b\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 (\u0442\u0430\u043a\u0438\u0435 \u0435\u0441\u0442\u044c) \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u0440\u0436\u0430\n    data_ta_output.drop_duplicates(subset=['ID_TA'], inplace=True)\n\n    # \u0421\u043c\u0435\u0440\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 TA\n    df_output = pd.merge(df_output, data_ta_output, on=\"ID_TA\",\n                         how=\"left\")  # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043f\u043e ID_TA\n\n    # \u041c\u0435\u0440\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\n    df_output = pd.merge(df_output, cities_info, on=\"City\",\n                         how=\"left\")  # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043f\u043e City\n\n    # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 \u043a\u043e\u043f\u0438\u0435\u0439 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0434\u0430\u043c\u043c\u0438-\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c, \u0442.\u043a. \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439.\n    df_output['city_copies'] = df_output['City']\n\n    # \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0444-\u0438\u044e \u043f\u043e \u0447\u0438\u0441\u0442\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043a\u0443\u0445\u043e\u043d\u044c\n    df_output[\"Cuisine Style\"] = df_output[\"Cuisine Style\"].apply(clean_name)\n\n    # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0441\u0443\u043c\u043c\u044b \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0432\u044c\u044e \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\n    reviews_sum = pd.DataFrame(df_output.groupby(['city_copies'])[\n        'Number of Reviews'].sum().sort_values(ascending=False))\n    reviews_sum.rename(\n        columns={\"Number of Reviews\": \"ttl_reviews_per_city\"}, inplace=True)\n    # \u0421\u043c\u0435\u0440\u0436\u0438\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\n    df_output = pd.merge(df_output, reviews_sum, on=\"city_copies\", how=\"left\")\n\n    # ################### 2. NAN ##############################################################\n    # \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 Price Range \u043c\u043e\u0434\u043e\u0439\n    df_output['Price Range'].fillna(\n        df_output['Price Range'].mode()[0], inplace=True)\n\n    # \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 NA \u0432 awards_num\n    df_output.awards_num.fillna(df_output.awards_num.median(), inplace=True)\n\n    # \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e \u0442\u0438\u043f\u044b \u043a\u0443\u0445\u043e\u043d\u044c \u0441 TA \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n    df_output['Cuisine Style'] = df_output.apply(cuisine_nan_replace, axis=1)\n    # \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c Unknown, \u0442\u043a \u043d\u0435 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u044b\u043b\u0438 \u043d\u0430 TA\n    df_output['Cuisine Style'].fillna(\"Unknown\", inplace=True)\n    # \u0421\u0442\u0440\u043e\u043a\u0438 \u0441 Unknown \u0442\u0438\u043f\u0430 str, \u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 - list. \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f.\n    df_output[\"Cuisine Style\"] = df_output[\"Cuisine Style\"].apply(clean_type)\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n    df_output['number_of_rev_is_NAN'] = pd.isna(\n        df_output['Number of Reviews']).astype('uint8')\n    # \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 Number of Reviews \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\n    median_reviews = df_output.groupby(\n        ['City'])['Number of Reviews'].median()  # series \u0441 \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c\u0438 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\n    df_output['Number of Reviews'] = df_output.apply(lambda x: median_reviews.loc[x['City']] if pd.isna(\n        x['Number of Reviews']) else x['Number of Reviews'], axis=1)\n\n    # \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0435 data \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u043d\u043e\u0435 \u0437\u043d\u0430\u0435\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n    df_output['Number of Reviews'] = df_output['Number of Reviews'].apply(\n        lambda x: 840 if x >= 840 else x)\n\n    # \u0412 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0435\u0441\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0438\u0445 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u0440\u0435\u0432\u044c\u044e \u043d\u0435\u0442.\n    df_output['Reviews'].fillna('[[], []]', inplace=True)\n\n    # ################### 3. Encoding ##############################################################\n    # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c One-Hot Encoding \u0432 pandas - get_dummies \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u043e\u0432.\n    df_output = pd.get_dummies(df_output, columns=['City', ], dummy_na=True)\n\n    # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c MultiLabelBinarizer() \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f c\u043f\u0438\u0441\u043a\u0430 \u043a\u0443\u0445\u043e\u043d\u044c\n    s = df_output['Cuisine Style']\n    mlb = MultiLabelBinarizer()\n    cuisine_df = pd.DataFrame(mlb.fit_transform(\n        s), columns=mlb.classes_, index=data.index)  # c\u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0434\u0430\u043c\u043c\u0438 \u043a\u0443\u0445\u043d\u044f\u043c\u0438\n    # \u0421\u043c\u0435\u0440\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u043e\u043c \u0434\u0430\u043c\u043c\u0438-\u043a\u0443\u0445\u043e\u043d\u044c\n    df_output = df_output.merge(cuisine_df, left_index=True, right_index=True)\n\n    # ################### 4. Feature Engineering ####################################################\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a distance, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442 \u0446\u0435\u043d\u0442\u0440\u0430 \u0433\u043e\u0440\u043e\u0434\u0430 \u0434\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.\n    df_output['distance'] = df_output.apply(lambda row:\n                                            haversine(lon1=row['lon_c'],\n                                                      lat1=row['lat_c'],\n                                                      lon2=row['longitude'],\n                                                      lat2=row['latitude']),\n                                            axis=1)\n    # \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\n    mean_distance = df_output.groupby(['city_copies'])['distance'].mean()\n    df_output['distance'] = df_output.apply(lambda x: mean_distance.loc[x['city_copies']] if pd.isna(\n        x['distance']) else x['distance'], axis=1)\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\n    # reviews_per_ttl_ppl - \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0432\u044c\u044e \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 1000 \u043b\u044e\u0434\u0435\u0439 (\u0436\u0438\u0442\u0435\u043b\u0438 + \u0442\u0443\u0440\u0438\u0441\u0442\u044b)\n    df_output['reviews_per_ttl_ppl'] = df_output.apply(lambda row: (\n        row['Number of Reviews']\/(row['citizens']+row['tourists_per_year']))*1000, axis=1)\n\n    # Price Range - \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0432 \u0446\u0438\u0444\u0440\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    pricerange_dict = {\"nan\": 0, \"$\": 1, \"$$ - $$$\": 2, \"$$$$\": 3}\n    df_output['price_range_num'] = df_output['Price Range']\n    df_output['price_range_num'].replace(\n        to_replace=pricerange_dict, inplace=True)  # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u043c\n\n    # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a cuisine_num\n    len_cuisines_list = []\n    for i in range(0, len(df_output)):\n        if df_output['Cuisine Style'][i][0] == 'Unknown':\n            len_cuisines_list.append(-1)  # -1 \u0434\u043b\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\n        elif df_output['Cuisine Style'][i][0] == '':\n            len_cuisines_list.append(0)  # 0, \u0433\u0434\u0435 \u043a\u0443\u0445\u043e\u043d\u044c \u043d\u0435\u0442 \u0438 \u043d\u0430 TA\n        else:\n            len_cuisines_list.append(len(df_output['Cuisine Style'][i]))\n    df_output['cuisine_num'] = len_cuisines_list\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a dietary_restrictions\n    df_output['dietary_restrictions'] = df_output.apply(\n        dietary_restrictions, axis=1)\n\n    # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a review_date \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0430\u0442\u0435\u0440\u043d\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0434\u0430\u0442.\n    pattern = re.compile('\\d+\\\/\\d+\\\/\\d+')\n    df_output['review_date'] = df_output.Reviews.apply(pattern.findall)\n    # \u0427\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0433\u0434\u0435 \u0432 \u043f\u043e\u043b\u0435 review_date \u043f\u043e\u043f\u0430\u043b\u0438 \u0434\u0430\u0442\u044b-\u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f \u0438\u0437 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043e\u0442\u0437\u044b\u0432\u0430.\n    df_output.review_date = df_output.review_date.apply(\n        lambda x: [x[-2], x[-1]] if len(x) > 2 else x)\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0441\u0440\u0430\u0437\u0443 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 datetime64\n    df_output['date_rev_1'] = pd.to_datetime(\n        df_output.review_date.apply(lambda x: x[0] if len(x) >= 1 else None))\n    df_output['date_rev_2'] = pd.to_datetime(\n        df_output.review_date.apply(lambda x: x[1] if len(x) >= 2 else None))\n    df_output['date_rev_delta'] = (\n        abs(df_output.date_rev_2-df_output.date_rev_1)) \/ np.timedelta64(1, \"D\")\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u0440\u043e \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n    date_max = df_output[['date_rev_1', 'date_rev_2']].max(axis =1).max()\n    df_output['date_rev_from_max'] = df_output.apply(lambda row: None if len(row.review_date) == 0  # \u0435\u0441\u043b\u0438 \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0442\u043e Nan\n                                                     # \u0435\u0441\u043b\u0438 \u043e\u0434\u043d\u0430 \u0434\u0430\u0442\u0430, \u0442\u043e \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u0441 \u043f\u0435\u0440\u0432\u044b\u043c \u043e\u0442\u0437\u044b\u0432\u043e\u043c\n                                                     else (date_max-row.date_rev_1) if len(row.review_date) == 1\n                                                     else ((date_max-row.date_rev_2)), axis=1) \/ np.timedelta64(1, \"D\")  # \u0435\u0441\u043b\u0438 \u0434\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u0430, \u0442\u043e \u0431\u0435\u0440\u0435\u043c \u0432\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u0437\u044b\u0432\n\n    # \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 365*3 \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 (\u0432\u044b\u0431\u0440\u0430\u043d\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u043e)\n    df_output['date_rev_delta'] = df_output['date_rev_delta'].apply(\n        lambda x: 1095 if x > 1095 else x)\n    # \u0417\u0430\u043c\u0435\u043d\u0438\u043c NA \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435\n    df_output['date_rev_delta'].fillna(\n        df_output['date_rev_delta'].mean(), inplace=True)\n\n    # \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 1132 \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 (\u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u043e IQR)\n    df_output['date_rev_from_max'] = df_output['date_rev_from_max'].apply(\n        lambda x: 1132 if x > 1132 else x)\n    # \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u043c\n    df_output['date_rev_from_max'].fillna(\n        df_output['date_rev_from_max'].mean(), inplace=True)\n\n    # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0441\u0435\u0442\u0435\u0432\u043e\u0439\n    # \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u0439\u0434\u0435\u043c ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432 value_counts \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a\n    in_chain_index = df_output['Restaurant_id'].value_counts().loc[lambda x: x>1].index\n    df_output['in_chain'] = df_output['Restaurant_id'].apply(\n        lambda x: 1 if x in in_chain_index else 0)\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a rank_per_ttl\n    # rank_per_ttl - \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043a \u043e\u0431\u0449\u0435\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0430\u043d\u0433\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443.\n    df_output['rank_per_ttl'] = df_output.apply(\n        lambda x: x['Ranking']\/x['restaurants_number_TA'], axis=1)\n\n    # \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435\u043c\n    df_output[\"ranking_num_reviews\"] = df_output[\"Ranking\"] * \\\n        df_output[\"Number of Reviews\"]\n    df_output[\"ranking_num_cuisines\"] = df_output[\"Ranking\"] * \\\n        df_output[\"cuisine_num\"]\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a reviews_perc_in_city_ttl\n    # reviews_perc_in_city_ttl - \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0432\u044c\u044e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043a \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0435\u0432\u044c\u044e \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u0438\u0437 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n    df_output['reviews_perc_in_city_ttl'] = df_output.apply(\n        lambda x: x['Number of Reviews']\/x['ttl_reviews_per_city'], axis=1)\n\n    # ################### 5. Clean ####################################################\n    # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u043b\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\n    # \u0421\u0444\u043e\u0440\u0441\u043c\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0438\u0437 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430\n    cols_to_drop = ['sample', 'city_copies',  'City_Amsterdam',  'City_Athens',  'City_Barcelona', 'City_Berlin',  'City_Bratislava',  'City_Brussels',  'City_Budapest',  'City_Copenhagen',  'City_Dublin',  'City_Edinburgh',  'City_Geneva',  'City_Hamburg',  'City_Helsinki', 'City_Krakow',  'City_Lisbon',  'City_Ljubljana',  'City_London',  'City_Luxembourg',  'City_Lyon',  'City_Madrid',  'City_Milan',  'City_Munich',  'City_Oporto',  'City_Oslo',  'City_Paris', 'City_Prague',  'City_Rome',  'City_Stockholm',  'City_Vienna',  'City_Warsaw',  'City_Zurich',  'City_nan', '',  'Afghani',  'African',  'Albanian',  'American',  'Arabic',  'Argentinean', 'Armenian',  'Asian',  'Australian',  'Austrian',  'Azerbaijani',  'Balti',  'Bangladeshi',  'Bar',  'Barbecue',  'Beer restaurants',  'Belgian',  'Brazilian',  'Brew Pub',  'British',  'Burmese',  'Cafe',  'Cajun & Creole',  'Cambodian',  'Campania',  'Canadian',  'Caribbean',  'Catalan',  'Caucasian',  'Central American',  'Central Asian',  'Central European',  'Central-Italian',  'Chilean',  'Chinese',  'Colombian',  'Contemporary',  'Croatian',  'Cuban',  'Czech',  'Danish',  'Deli',  'Delicatessen',  'Diner',  'Dining bars',  'Dutch',  'Eastern European',  'Ecuadorean',  'Egyptian',  'Emilian',  'Ethiopian',\n                'European', 'Fast Food',  'Filipino',  'French',  'Fruit parlours',  'Fujian',  'Fusion',  'Gastropub',  'Georgian',  'German',  'Gluten Free Options',  'Greek',  'Grill',  'Halal',  'Hawaiian',  'Healthy',  'Hungarian',  'Indian',  'Indonesian',  'International',  'Irish',  'Israeli',  'Italian',  'Jamaican',  'Japanese',  'Japanese Fusion',  'Korean',  'Kosher',  'Latin',  'Latvian',  'Lazio',  'Lebanese',  'Lombard',  'Malaysian',  'Mediterranean',  'Mexican',  'Middle Eastern',  'Minority Chinese',  'Mongolian',  'Moroccan',  'Native American',  'Neapolitan',  'Nepali',  'New Zealand',  'Northern-Italian',  'Norwegian',  'Pakistani',  'Persian',  'Peruvian',  'Pizza',  'Polish',  'Polynesian',  'Portuguese',  'Pub',  'Romagna',  'Romana',  'Romanian',  'Russian',  'Salvadoran',  'Sardinian',  'Scandinavian',  'Scottish',  'Seafood',  'Sicilian',  'Singaporean',  'Slovenian',  'Soups',  'South American',  'Southern-Italian',  'Southwestern',  'Spanish',  'Sri Lankan',  'Steakhouse',  'Street Food',  'Sushi',  'Swedish',  'Swiss',  'Taiwanese',  'Thai',  'Tibetan',  'Tunisian',  'Turkish',  'Tuscan',  'Ukrainian',  'Uzbek',  'Vegan Options',  'Vegetarian Friendly',  'Venezuelan',  'Vietnamese',  'Welsh',  'Wine Bar',  'Xinjiang',  'Yunnan',  'Unknown']\n    # \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0435\u0442 \u0441\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438\n    correlated_features = set()\n    # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0438\u0437 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0446\u0438\u0439, \u0442\u043a \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441 \u043d\u0435\u0439, - \u0445\u043e\u0440\u043e\u0448\u043e \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\n    correlation_matrix = df_output[df_output['sample'] == 1].drop(\n        ['Rating', 'sample'], axis=1).corr()\n    for i in range(len(correlation_matrix.columns)):\n        for j in range(i):\n            if abs(correlation_matrix.iloc[i, j]) > 0.8:\n                colname = correlation_matrix.columns[j]\n                correlated_features.add(colname)\n\n    # \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0435\u0442 \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n    to_remove_features = set()\n    # \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u043b\u0438 \u0438\u0437 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430\n    for column in cols_to_drop:\n        to_remove_features.add(get_stat_dif_2(column))\n\n    # \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0435\u0442, \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a, \u0443\u0434\u0430\u043b\u044f\u0435\u043c NAN\n    drop_features = correlated_features.union(to_remove_features)\n    drop_features = list(drop_features)\n    drop_features.remove(None)\n\n    df_output.drop(drop_features, axis=1, inplace=True)\n\n    # \u041c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0441 dtypes \"object\" \u043e\u0431\u0443\u0447\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0431\u0443\u0434\u0435\u0442, \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0431\u0435\u0440\u0438\u043c \u0438\u0445 \u0438 \u0443\u0434\u0430\u043b\u0438\u043c\n    object_columns = [\n        s for s in df_output.columns if df_output[s].dtypes in ['object', '<M8[ns]']]\n    df_output.drop(object_columns, axis=1, inplace=True)\n\n    return df_output","0003aabf":"df_preproc = preproc_data(data, data_ta)\ndf_preproc.sample(10)","18c46975":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","60b08cae":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","4c001b9f":"# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","643a3afc":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","e6f97ef5":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","412af727":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","16491577":"# \u0422\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0438\u043c\u0435\u0435\u0442 \u0448\u0430\u0433 0.5, \u043e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435.\ny_pred = np.round(y_pred * 2) \/ 2","81e8db4a":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nMAE = metrics.mean_absolute_error(y_test, y_pred)\nprint('MAE:', MAE)","238b220f":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(20).plot(kind='barh')","7bcb10d8":"test_data.sample(10)","e5159ac9":"test_data = test_data.drop(['Rating'], axis=1)","1f31e88b":"sample_submission","2f08fd82":"predict_submission = model.predict(test_data)","725be6d5":"predict_submission","2c86f2a9":"# \u0422\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0438\u043c\u0435\u0435\u0442 \u0448\u0430\u0433 0.5, \u043e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435.\npredict_submission = np.round(predict_submission * 2) \/ 2","c6f4758e":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","b8605c68":"\u0411\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a price_range_num, \u0442.\u043a. \u043e\u043d \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u0442 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a. \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0443\u0436\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043c\u043e\u0434\u043e\u0439.","36b5c414":"<a id=\"4\"><\/a>\n# 4. EDA ","1a591cb2":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438.","62876c26":" <a id=\"5\"><\/a>\n\n# 5. DATA PREPROCESSING\n\u0422\u0435\u043f\u0435\u0440\u044c, \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u043e\u0434\u0430, \u0437\u0430\u0432\u0435\u0440\u043d\u0435\u043c \u0432\u0441\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0432 \u043e\u0434\u043d\u0443 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e.","5e58e976":"**\u0427\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445**\n\n\u041f\u043e\u0447\u0438\u0441\u0442\u0438\u043c \u043f\u043e\u043a\u0430 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430.","09ff0836":"\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0430\u0436\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438. \n\n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0432\u044b\u043d\u0435\u0441\u0435\u043c \u0432\u0441\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a (number_of_rev_is_NAN).","749cba0f":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a Reviews","fe60b3e8":"\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e 34.72% \u0434\u0430\u043d\u043d\u044b\u0445. \n\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0443 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443, \u0440\u0430\u043d\u0433\u0443, \u043f\u0440\u043e\u0434\u0443\u043c\u0430\u0435\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.","65c681ee":"**\u041d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435**: \u0443 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043a\u0443\u0445\u043e\u043d\u044c, \u043e\u0442\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 TA, \u043a\u0430\u043a Dietary Restrictions \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438 \u0432\u044b\u0448\u0435. \n\u041c\u043e\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u0440\u0435\u0441\u0442\u0430\u0440\u0430\u043d\u044b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0435 \u043e\u043f\u0446\u0438\u0438 \u0443 \u043d\u0435\u0433\u043e \u0438\u043c\u0435\u044e\u0442\u0441\u044f.\n\u041a\u0430\u043a\u0438\u0435 \u043e\u043f\u0446\u0438\u0438 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c:\n* Vegetarian Friendly\n* Vegan Options\n* Halal\n* Kosher\n* Gluten Free Options. ","cad25edf":"\u0423 \u043d\u0430\u0441 \u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u0442\u044f\u0433\u0438\u0432\u0430\u044e\u0442 \u0438 \u0434\u043e 2500 \u043c\u0435\u0441\u0442\u0430 \u0432 \u0441\u0432\u043e\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0435, \u0430 \u0447\u0442\u043e \u0442\u0430\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c?","eed20ca0":"\u041c\u044b \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"in chain\", \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u0435\u0433\u043e.","5cdef9fe":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a AWARDS_NUM","7ef76cf2":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a REVIEWS","9d9aa98e":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u043d\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043e\u0442 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.","12c2e4af":"<a id=\"4.1\"><\/a>\n\n### 4.1 \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","cd8f9273":"<a id=\"3.1\"><\/a>\n## 3.1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NAN ","810d0e8c":"<a id=\"4.3\"><\/a>\n\n### 4.3 \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437.\n\n\u0423\u0434\u0430\u043b\u0438\u043c \u0438\u0437 \u0430\u043d\u0430\u043b\u0438\u0437\u0430:\n* \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u043a\u0443\u0445\u043d\u0438, \u0433\u043e\u0440\u043e\u0434\u0430)\n* sample (\u0441\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a).","a0de352e":"<a id=\"2\"><\/a>\n# 2. DATA","3a4728bd":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043c\u0435\u043d.\n","fc798d89":"<a id=\"6\"><\/a>\n\n# 6. MODEL ","c056305a":"<a id=\"3.2\"><\/a>\n## 3.2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n#### \u041f\u043e\u0438\u0441\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438.","c2a6af27":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a Restaurant_id c\u043e\u0434\u0435\u0440\u0436\u0438\u0442 id_ \u043f\u0435\u0440\u0435\u0434 \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u0438\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430.","6e04d15b":"\u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438\u043c\u0435\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 Rating.","aba354e0":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430. ","63af2889":"\u0412 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u0432\u0441\u0435\u043c \u043f\u0443\u0441\u0442\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 (data). \n\n* \u0412 4 \u0438\u0437 10 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438. \n* \u0412 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 Price Range \u0438 Cuisine Style \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432. \n* \u041f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u043c\u044b \u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c, \u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c.\n\n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043c \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.","986007d6":"\u041d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u044d\u0442\u0430\u043f\u0430\u0445 \u043c\u044b \u0432\u044b\u044f\u0441\u043d\u0438\u043b\u0438, \u0447\u0442\u043e \u043d\u0435 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0438\u0437 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0438\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0431\u044b\u043b\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0448\u0438\u0440\u043e\u0442\u0435 \u0438 \u0434\u043e\u043b\u0433\u043e\u0442\u0435. \n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438. \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e.","dc708baa":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a Restaurant_ID","50a0cbef":"<a id=\"8\"><\/a>\n\n# 8. SUMMARY \n\n\u041f\u043e \u0445\u043e\u0434\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430:\n1. \u0411\u044b\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c \u0438 \u0438\u0437 TA\n2. \u0411\u044b\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n| \u041f\u0440\u0438\u0437\u043d\u0430\u043a | \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 |\n|-: |:- |\n| number_of_rev_is_NAN | \u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 | \n| awards_ta | \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0433\u0440\u0430\u0434 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0441 TA| \n| awards_num | \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0433\u0440\u0430\u0434 \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0441 TA | \n| cuisine_styles_ta | C\u043f\u0438\u0441\u043e\u043a \u0441 \u043a\u0443\u0445\u043d\u044f\u043c\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0441 TA| \n| longitude | \u0413\u0435\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0441 TA | \n| latitude | \u0413\u0435\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0441 TA|\n| country  | \u0421\u0442\u0440\u0430\u043d\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0433\u043e\u0440\u043e\u0434 |\n| citizens | \u041d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0430, \u0447\u0435\u043b |\n| restaurants_number_TA | \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0435 |\n| citizens_per_restaurant | \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0440\u043e\u0436\u0430\u043d \u043d\u0430 \u043e\u0434\u0438\u043d \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d |\n| tourists_per_year| \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0443\u0440\u0438\u0441\u0442\u043e\u0432, \u043f\u043e\u0441\u0435\u0442\u0438\u0432\u0448\u0438\u0445 \u0433\u043e\u0440\u043e\u0434 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0433\u043e\u0434\u0430, \u0447\u0435\u043b |\n| ttl_ppl_per_restaurants | (\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0443\u0440\u0438\u0441\u0442\u043e\u0432 + \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0430) \/ \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 |\n| distance  | \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442 \u0446\u0435\u043d\u0442\u0440\u0430 \u0433\u043e\u0440\u043e\u0434\u0430 \u0434\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 |\n| reviews_per_ttl_ppl | \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0432\u044c\u044e \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u044b\u0445 1000 \u043b\u044e\u0434\u0435\u0439 (\u0436\u0438\u0442\u0435\u043b\u0438 + \u0442\u0443\u0440\u0438\u0441\u0442\u044b) |\n| ttl_reviews_per_city | \u0421\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0432\u044c\u044e \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u0438\u0437 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 |\n| reviews_perc_in_city_ttl | \u041e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0432\u044c\u044e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043a \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0435\u0432\u044c\u044e \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u0438\u0437 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 |\n| price_range_num | \u0426\u0435\u043d\u043e\u0432\u0430\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430: 1, 2, 3 |\n| cuisine_num | \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0438\u043f\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 |\n| dietary_restrictions | \u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0441\u043f\u0435\u0446. \u043e\u043f\u0446\u0438\u0439 \u043f\u043e \u043a\u0443\u0445\u043d\u044f\u043c |\n| review_date | \u0412\u0441\u0435 \u0434\u0430\u0442\u044b \u0440\u0435\u0432\u044c\u044e |\n| date_rev_1 | \u0414\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0440\u0435\u0432\u044c\u044e |\n| date_rev_2 | \u0414\u0430\u0442\u0430 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0440\u0435\u0432\u044c\u044e |\n| in chain | \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c, \u0441\u0435\u0442\u0435\u0432\u043e\u0439 \u043b\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d | \n| rank_per_ttl | \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043a \u043e\u0431\u0449\u0435\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0430\u043d\u0433\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 |\n| ranking_num_reviews | \u0423\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 Ranking \u0438 Number of Reviews |\n| ranking_num_cuisines | \u0423\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 Ranking \u0438 cuisine_num |\n| date_rev_delta | \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0440\u0435\u0432\u044c\u044e |\n| date_rev_from_max | \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043e\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u0434\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0432\u0435\u0436\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 |\n| City | \u0421\u043e\u0437\u0434\u0430\u043d\u044b 31 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 \u0433\u043e\u0440\u043e\u0434\u0430|\n| Cuisine Style | \u0421\u043e\u0437\u0434\u0430\u043d\u044b 146 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 \u0442\u0438\u043f\u0430 \u043a\u0443\u0445\u043d\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0442\u0441\u0443\u0441\u0442\u0432\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0438\u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a |\n3. \u041f\u043e\u0441\u043b\u0435 \u043e\u0442\u0431\u043e\u0440\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u044b\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u0440\u0435\u0437\u0443\u043b\u0442\u0430\u0442:\n    * \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 MAE: 0.1595625\n    * MAE \u043d\u0430 Kaggel (\u0434\u043b\u044f submission): 0.16810 (28 \u043c\u0435\u0441\u0442\u043e \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438).","3e10bc22":"\u0421\u0442\u0430\u0440\u0442\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 MAE: 0.428\n\n\u041f\u0440\u043e\u0433\u0440\u0435\u0441\u0441: \n* 0.214 (\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0441\u043d. \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432)\n* 0.2131 (\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043c\u043c\u0438 \u0438\u043d\u0444\u044b \u043f\u0440\u043e \u043a\u0443\u0445\u043d\u0438)\n* 0.304 (\u0435\u0441\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c Ranking \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c ranking_quantile)\n* 0.2186 (\u0435\u0441\u043b\u0438 \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0438 Ranking, \u0438 ranling_quantile)\n* 0.2186 (\u0443\u0431\u0438\u0440\u0430\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043f\u043e Number of Reviews \u043d\u0438\u043a\u0430\u043a \u043d\u0435 \u043f\u043e\u0432\u043b\u0438\u044f\u043b\u043e)\n* 0.2186 (\u043f\u043e\u0441\u043b\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0430\u043d\u0433\u0430 \u2013 \u0431\u0435\u0437 \u0432\u043b\u0438\u044f\u043d\u0438\u044f)\n* 0.213034375 (\u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0430 ranling_quantile, \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435)\n* 0.21845 (public) - 0.213 - **440** \u043c\u0435\u0441\u0442\u043e \u2013 \u043f\u0440\u043e\u0431\u043d\u044b\u0439 \u0441\u0430\u0431\u043c\u0438\u0442\n* 0.20 - rank_per_ttl (v. 33) - **317** \u043c\u0435\u0441\u0442\u043e - 0.21177\n* 0.206870625 - \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0430 in_chain\n* 0.207 - \u0443\u0431\u0440\u0430\u043b\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 Num of Review \u0438 \u0441\u0442\u0430\u043b\u043e \u0445\u0443\u0436\u0435\n* v.34 - 0.207178125, 0.21202 (\u0441\u0442\u0430\u043b\u043e \u0445\u0443\u0436\u0435) - **318** \u043c\u0435\u0441\u0442\u043e - \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u043e delta-reviews\n* v.35 + ranking_num_reviews, reviews_per_ttl_ppl, ranking_num_cuisines (0.20595999999999998) **317** 0.21161\n* v.36: \u043f\u043e\u0434\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432, \u0447\u0442\u043e\u0431 \u0437\u0430\u0434\u0435\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 (0.20570312499999996)\n* v.38: \u0432\u0435\u0440\u043d\u0443\u043b\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a is_Nan \u0434\u043b\u044f \u0440\u0435\u0432\u044c\u044e 0.20369375 (0.20880)\n* v.39: \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a dietary_restrictions, \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e \u0443\u0445\u0443\u0434\u0448\u0438\u043b\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n*  \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0430 date_rev_from_max 0.199690625 **0.20441** **233 \u043c\u0435\u0441\u0442\u043e**\n* v.40: reviews_perc_in_city_ttl 0.19911312499999997 **0.20427 233 \u043c\u0435\u0441\u0442\u043e**\n* v. 42: awards_num \u0441 TA: 0.196016875, **0.20106 223 \u043c\u0435\u0441\u0442\u043e**\n* v. 43: cousines from TA: 0.19679624999999998, **0.20123, 233 \u043c\u0435\u0441\u0442\u043e** \u0441\u0442\u0430\u043b\u043e \u0445\u0443\u0436\u0435!\n* \u041e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0435 \u0448\u0430\u0433\u0430 \u0432 0.5 0.1659375 0.17125 **0.17125, 65 \u043c\u0435\u0441\u0442\u043e**\n* \u0414\u043e\u0431\u0430\u0432\u0438\u043b\u0430 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0448\u0438\u0440\u043e\u0442\u044b \u0438 \u0434\u043e\u043b\u0433\u043e\u0442\u044b, \u043f\u043e\u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043a\u043e\u043b-\u0432\u0430 \u043a\u0443\u0445\u043e\u043d\u044c (\u043d\u0430 -1) 0.165875\n* \u0417\u0430\u043c\u0435\u043d\u0438\u043b\u0430 -1 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 0.16625 **0.17255** \u0445\u0443\u0436\u0435\n* \u041e\u0442\u043a\u0430\u0442\u0438\u043b\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 **0.17270** \u0422.\u0435. \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0448\u0438\u0440\u043e\u0442\u044b \u0438 \u0434\u043e\u043b\u0433\u043e\u0442\u044b \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n* v. 44 \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 **0.160125** **0.16695 29 \u043c\u0435\u0441\u0442\u043e**\n* \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 distance, 0.161875 \u0445\u0443\u0436\u0435, \u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u0432 \u0444\u0438\u043d\u0430\u043b\u043a\u0435 **0.16675** 28 \u043c\u0435\u0441\u0442\u043e\n* 0.161 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0431\u0430\u0433 \u0441 \u043a\u0443\u0445\u043d\u044f\u043c\u0438  0.16810\n*  0.161937 - \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b\n* v.45: 0.161  0.16810 - 28 \u043c\u0435\u0441\u0442\u043e, \u0444\u0438\u043d\u0430\u043b\u043a\u0430 \u0431\u0435\u0437 \u00ab\u043f\u0440\u0438\u0447\u0435\u0441\u044b\u0432\u0430\u043d\u0438\u044f\u00bb \u043a\u043e\u0434\u0430\n* v. 49 0.1595625 - Your submission scored 0.16810 - 28 \u043c\u0435\u0441\u0442\u043e.\n","4daa3574":"\u0414\u0430\u043d\u043d\u044b\u0439 \u0441 TripAdvisor (TA) \u0431\u044b\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u0447\u0435\u0440\u0435\u0437 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 https:\/\/apify.com\/maxcopell\/tripadvisor#api-usage \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 APIFY. \n\n\u0417\u0430\u043b\u0438\u0442\u044b \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c data_ta.\n\n\u0421 \u0434\u0430\u043d\u043d\u044b\u0445 TA \u043d\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u044f\u0442\u0441\u044f \u0442\u043e\u0447\u043d\u043e:\n* \u0421\u043f\u0438\u0441\u043e\u043a \u043a\u0443\u0445\u043e\u043d\u044c\n* \u041a\u043e\u043b\u0438\u0441\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0433\u0440\u0430\u0434 \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\n* \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 (\u0448\u0438\u0440\u043e\u0442\u0430 \u0438 \u0434\u043e\u043b\u0433\u043e\u0442\u0430).\n\n\u0415\u0441\u043b\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0432\u0440\u0435\u043c\u044f, \u0442\u043e \u0434\u043e\u043f\u043e\u043b\u0438\u043d\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432:\n* Price Range\n* Number of Reviews.\n","a50d7baf":"\u0412\u043d\u0435\u0448\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0438. \n\n\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0430, \u043d\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u043b \u0438\u0441\u0447\u0435\u0440\u043f\u044b\u0432\u0430\u044e\u0449\u0443\u044e \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 (\u0435\u0441\u0442\u044c 41247 \u0438\u0437 50000). \u0411\u0443\u0434\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0434\u0430\u043b\u0435\u0435.","a50e57e7":"\u041f\u043e\u0447\u0438\u0441\u0442\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435.","a88e142c":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u044b \u0441\u043e \u0441\u0442\u0430\u0440\u044b\u043c\u0438.","9dc7b69d":"\u0414\u043e\u0431\u0430\u0432\u0438\u043b\u0438 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 TA \u043f\u0440\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0433\u0440\u0430\u0434.\n\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 awards_num.","1f40ef01":"\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u0434\u0432\u0443\u0445 \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 Ranking.","9d81f176":"#### \"\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\"","4189733f":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438.","3a6538eb":"\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0438 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.","6776f44d":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a DISTANCE\n","d1bb86e9":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 (17.5%) \u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0438\u0445 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443, \u0442.\u0435. \u043d\u0443\u043b\u0438.","ff991864":"\u041a\u0430\u043a \u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 Ranking, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e\u0447\u0435\u043d\u044c \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\/\u0433\u043e\u0440\u043e\u0434\u0430 (\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435, \u043f\u043e\u0442\u043e\u043a \u0442\u0443\u0440\u0438\u0441\u0442\u043e\u0432).\n\n\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u0443\u044e \u043a\u0430\u0440\u0442\u0438\u043d\u0443 \u043e\u0431 \u043e\u0442\u0437\u044b\u0432\u0430\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a:\n* ttl_reviews_per_city - \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e  \u0440\u0435\u0432\u044c\u044e \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u0438\u0437 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n* reviews_perc_in_city_ttl - \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0432\u044c\u044e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043a \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0435\u0432\u044c\u044e \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u0438\u0437 \u0432\u044b\u0431\u043e\u0440\u043a\u0438.","3a4a3e12":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e 146 \u0443\u043d\u0438\u043a\u043b\u044c\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u043e\u0434\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0435 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e (2\/3) \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u0442\u0430\u043a \u0447\u0430\u0441\u0442\u043e, \u043d\u043e \u0438 \u0435\u0441\u0442\u044c \u043e\u0441\u043e\u0431\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u0443\u0445\u043d\u0438. \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u0443\u043c\u0430\u0442\u044c \u043f\u0440\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043a\u0443\u0445\u043e\u043d\u044c \u043f\u043e \u0447\u0430\u0441\u0442\u043e\u0442\u0435 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f.\n\n\u041f\u043e\u043a\u0430 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a cuisine_num, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0438\u043f\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.","75d005d5":"**\u0413\u0440\u0430\u0444\u0438\u043a\u0438:**\n1. \u0447\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u0440\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u0442\u0435\u043c \u0447\u0430\u0449\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433. \u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0441 \u0446\u0435\u043b\u0435\u0432\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c - \u0445\u043e\u0440\u043e\u0448\u043e \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438.\n2. \u0447\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u0440\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432","2993cdbb":"\u0418\u0437 50000 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0442\u043e\u043b\u044c\u043a\u043e 13094 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 ID:\n* 3807 - \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043e\u0434\u043d\u0438\u043c \u0437\u0430\u0432\u0435\u0434\u0435\u043d\u0438\u0435\u043c\n* \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 46193 - \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b.\n\n\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"in chain\", \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \n* 0 - \u0435\u0441\u043b\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u043d\u0435\u0441\u0435\u0442\u0435\u0432\u043e\u0439, \n* 1 - \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0441\u0435\u0442\u0435\u0432\u043e\u0439.","2148f7c4":"\u0412 \u043d\u0430\u0448\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 31 \u0433\u043e\u0440\u043e\u0434. \u041d\u0435 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e.\n\u0414\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c dymmy-\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.","e2f5ee09":"\u0420\u0435\u0439\u0442\u0438\u043d\u0433\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043e\u0442 1 \u0434\u043e 5 \u0441 \u0448\u0430\u0433\u043e\u043c \u0432 0.5.","620a3c79":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a Price Range","3d4bc44d":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430.","8228a1e9":"**\u0412\u044b\u0432\u043e\u0434\u044b \u043f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443**:\n1. \u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439:\n    * \u041c\u0435\u0434\u0438\u0430\u043d\u0430 \u043f\u043e \u0432\u0441\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0430\u043c \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 (4), \u043a\u0440\u043e\u043c\u0435 \u041c\u0438\u043b\u0430\u043d\u0430\n    * \u041a\u0443\u0445\u043d\u044f \u041c\u0438\u043b\u0430\u043d\u0430 \u0441\u0430\u043c\u0430\u044f \u043d\u0438\u0437\u043a\u043e-\u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c\u0430\u044f\n    * \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432 \u0434\u0432\u0443\u0445 \u0442\u0438\u043f\u043e\u0432: \u0430) \u043e\u0442 3.5-4.5 \u0441 \u0434\u043b\u0438\u043d\u043d\u044b\u043c \u0445\u0432\u043e\u0441\u0442\u043e\u043c \u0434\u043e 2 b) 4-4.5 \u0441 \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u043c \u0445\u0432\u043e\u0441\u0442\u043e\u043c \u0434\u043e 3.5.\n\n    \u041d\u0435\u043b\u044c\u0437\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u0431\u0430\u0437\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u043d\u043e \u0445\u043e\u0440\u043e\u0448\u043e \u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0432 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0438 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043d\u0430 2-3 \u0433\u0440\u0443\u043f\u043f\u044b.\n\n2. \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u043e\u0432 \u0438 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0442\u043e\u0436\u0435 \u043e\u0447\u0435\u043d\u044c \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f. \u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a, \u0447\u0442\u043e \u0440\u0430\u043d\u0433 \u0437\u0430\u0432\u044f\u0437\u0430\u043d \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435. \u0427\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0442\u0435\u043c \u0440\u0430\u0437\u043c\u0430\u0448\u0438\u0441\u0442\u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0433\u043e\u0440\u043e\u0434\u0430\u043c\u0438.\n3. \u0414\u0435\u043b\u044c\u0442\u0430 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c\u0438 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u0430 \u043f\u043e \u0441\u0432\u043e\u0435\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e.\n4. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0432\u044c\u044e \u0438\u043c\u0435\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u0440\u0430\u0437\u043c\u0430\u0445 \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432.\n\n**\u0418\u0434\u0435\u0438 \u043f\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**:\n1. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0434\u043e\u043f. \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c: \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435, \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0440\u0430\u043d\u0433\/\u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u0430\u0440\u0430\u043d\u043e\u0432, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0443\u0440\u0438\u0441\u0442\u043e\u0432 \u0432 \u0433\u043e\u0434.\n2. \u041d\u0430\u0439\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c \u0431\u0443\u0434\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043f\u043e\u0445\u043e\u0436\u0435\u0435 \u043d\u0430 \u0433\u043e\u0440\u043e\u0434\/\u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0432 \u0433\u0440\u0443\u043f\u043f\u044b.","5221f9d0":"\u0421\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043b\u044c\u0448\u0435 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (data_ta_output).","0b39f5b6":"\u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0437\u0430\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a distance, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442 \u0446\u0435\u043d\u0442\u0440\u0430 \u0433\u043e\u0440\u043e\u0434\u0430 \u0434\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.","1d0fddc1":"#### \u0427\u0438\u0441\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Restaurant_id","566cf5ca":"\n\u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442:\n* City\n* Price Range\n* Cuisine Style.","38aa9e4b":"**\u0412\u044b\u0432\u043e\u0434\u044b \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443:**\n* \u0415\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b => \u0441\u0438\u043b\u044c\u043d\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443.\n* \u0423 50% \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0432\u044c\u044e \u043e\u0442 7 \u0434\u043e 105. \u041c\u0435\u0434\u0438\u0430\u043d\u0430 - 28\n* \u0415\u0441\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e\/\u043c\u0435\u0434\u0438\u0430\u043d\u044b \u043e\u0442 \u0433\u043e\u0440\u043e\u0434\u0430. \n\n**\u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:**\n1. \u041d\u0430\u0439\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u0445\n2. \u041c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0433\u043e\u0440\u043e\u0434\u0430\n3. \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043d\u0443\u043b\u044f\u043c\u0438","2f079a45":"![](https:\/\/static.tacdn.com\/img2\/brand_refresh\/Tripadvisor_lockup_horizontal_secondary_registered.svg)\n# Predict TripAdvisor Rating\n\n* \u0413\u0438\u043b\u044c \u042e\u043b\u0438\u044f\n* \u0413\u0440\u0443\u043f\u043f\u0430 DSPR-28","c3e64a20":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u043d\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043e\u0442 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.","26b01ec4":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e review_date \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u0434\u043d\u0443 \u0434\u0430\u0442\u0443, \u0434\u0432\u0435 \u0434\u0430\u0442\u044b, \u0442\u0440\u0438 \u0434\u0430\u0442\u044b, \u043d\u0438 \u043e\u0434\u043d\u043e\u0439 \u0434\u0430\u0442\u044b.\n\n\u041a\u043e\u0434\u043e\u043c \u043d\u0438\u0436\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0442\u0430\u043a\u0438\u0435 \u0440\u0435\u0432\u044c\u044e, \u0433\u0434\u0435 \u0434\u0430\u0442\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043b\u0430\u0441\u044c \u0432 \u0441\u0430\u043c\u043e\u043c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0438 \u0441\u043e\u0437\u0434\u0430\u043b\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0442\u0440\u0451\u0445 \u0434\u0430\u0442. \u0414\u0430, \u0442\u0430\u043a\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0435\u0441\u0442\u044c.\n\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043a \u0442\u0430\u043a\u0438\u043c \u043f\u043e\u043b\u044f\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0435\u0440\u0432\u043e\u0435 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435 \u0438\u0437 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043f\u043e\u0447\u0438\u0441\u0442\u0438\u0442.","31544bae":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a CUISINE STYLE","dffe7982":"#### \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 TripAdvisor","8698089b":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c.","dce13cdc":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a Number of Reviews","27213fa6":"\u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u0430 840.","574fae76":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0434\u0430\u043b\u0438\u043c \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438:\n* URL_TA \u2014 URL \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 TripAdvisor;\n* ID_TA \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 TripAdvisor.","aa300d0f":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u0446\u0435\u043b\u043e\u043c \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0438\u043c\u0438.","bb2c2e19":"**\u0412\u044b\u0432\u043e\u0434**: \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438. \u0421\u0430\u043c\u0430\u044f \u043d\u0435\u043c\u043d\u043e\u0433\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c - \u0434\u043e\u0440\u043e\u0433\u0438\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b.","48852882":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 reivews. \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0432\u0430 \u0440\u0435\u0432\u044c\u044e \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u0440\u0435\u0432\u044c\u044e.\n\u041c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u0442\u0430\u0449\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0438\u0437 \u0434\u0430\u0442:\n* review_date: \u0432\u0441\u0435 \u0434\u0430\u0442\u044b \u0440\u0435\u0432\u044c\u044e\n* date_rev_1: \u0434\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0440\u0435\u0432\u044c\u044e\n* date_rev_2: \u0434\u0430\u0442\u0430 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0440\u0435\u0432\u044c\u044e\n* date_rev_delta: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0440\u0435\u0432\u044c\u044e\n* date_rev_from_max: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043e\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u0434\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0432\u0435\u0436\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435.","39acebf7":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a Cuisine Style\t","27e08cc9":"\u041f\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e 'Price Range' \u044d\u0442\u043e - \u0446\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435. \u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e (\u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e \u043d\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a). \u0410 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438.\n\nPrice_range \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0442 1 \u0434\u043e 3:\n* \u041d\u0438\u0437\u043a\u0438\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0446\u0435\u043d - 1 \n* \u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u0441\u0435\u0433\u043c\u0435\u043d\u0442 - 2 \n* \u0412\u044b\u0441\u043e\u043a\u0438\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0446\u0435\u043d - 3\n\n\u041a\u043e\u0434 \u043d\u0438\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a price_range_num.","51f2cf06":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a Price Range","e14531b9":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","22a96f02":"\u0414\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e Ranking \u043a \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 Rating \u0438 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438.","a327fdc6":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a Restaurant_id -> In_Chain","24774d77":"\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432.","bb4c55fb":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c:\n* City: \u0433\u043e\u0440\u043e\u0434 \n* Cuisine Style: \u043a\u0443\u0445\u043d\u044f\n* Ranking: \u0440\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n* Price Range: \u0446\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0432 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445\n* Number of Reviews: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* Reviews: 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* URL_TA: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 'www.tripadvisor.com' \n* ID_TA: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor\n* Rating: \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","2981b8bf":"\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e 23.18% \u0434\u0430\u043d\u043d\u044b\u0445. \n\n\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0441 Trip Advisor, \u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u044d\u0442\u043e \u043f\u043e\u0437\u0436\u0435, \u0432 \u0441\u0435\u043a\u0446\u0438\u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0441\u043c. \u0440\u0430\u0437\u0434\u0435\u043b [3.2 \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#3.2). \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043d\u0435 \u0443\u0434\u0430\u0441\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 'Unknown'.","ff607235":"\u0421\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u043e\u043b\u043b\u0438\u043d\u0435\u0430\u0440\u043d\u044b.\n\n\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0441\u0442\u0430\u0432\u0438\u043c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 0.8 \u0438\u043b\u0438 -0.8.","3862145a":"\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 - \u0441\u0435\u0442\u0435\u0432\u044b\u0435. \u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e\u0442 \u0442\u043e\u0433\u043e, \u0441\u0435\u0442\u0435\u0432\u043e\u0439 \u043b\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d. \u0423 \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0431\u043e\u043b\u044c\u0448\u0435.","71147deb":"\u041f\u043e\u043c\u043d\u0438\u043c, \u0447\u0442\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0443\u0445\u043e\u043d\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 23.18% \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432. \u041f\u0440\u0438 \u0447\u0438\u0441\u0442\u043a\u0435 \u043c\u044b \u0437\u0430\u043c\u0435\u043d\u0438\u043b\u0438 \u0438\u0445 \u043d\u0430 \"Unknown\". \u0414\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0430\u0448\u043b\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043d\u0430 TA, \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0443.","34e770ba":"\u0418 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0448\u0430\u0433 - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0430\u043c\u043c\u0438-\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043a\u0443\u0445\u043e\u043d\u044c.","48169886":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 ID \u0438\u0437 50 000 \u0437\u0430\u043f\u0438\u0441\u0435\u0439.","9d9e4a39":"<a id=\"7\"><\/a>\n\n# 7. SUBMISSION \n\u0413\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 Kaggle.","b92aa6f7":"\u0427\u0438\u0441\u043b\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0441\u0438\u043b\u044c\u043d\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0440\u0430\u043d\u0433\/\u0440\u0435\u0439\u0442\u0438\u043d\u0433. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u0440 \u0432\u0440\u0435\u043c\u044f EDA \u043d\u0438\u0436\u0435 \u0431\u044b\u043b\u043e \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043e, \u0447\u0442\u043e \u0440\u0430\u0437\u0431\u0440\u043e\u0441 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u043e\u0439.\n\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a:\n*  reviews_per_ttl_ppl - \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0432\u044c\u044e \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 1000 \u043b\u044e\u0434\u0435\u0439 (\u0436\u0438\u0442\u0435\u043b\u0438 + \u0442\u0443\u0440\u0438\u0441\u0442\u044b)","f2c709a8":"\u041f\u043e \u0445\u043e\u0434\u0443 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f EDA \u0431\u044b\u043b\u043e \u0437\u0430\u043c\u0435\u0447\u0435\u043d\u043e, \u0447\u0442\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043e\u043f\u0446\u0438\u0438 \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\/\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0432\u044c\u044e.\n\n\u0423 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043a\u0443\u0445\u043e\u043d\u044c, \u043e\u0442\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 TA, \u043a\u0430\u043a Dietary Restrictions \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438 \u0432\u044b\u0448\u0435. \n\u041c\u043e\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u0440\u0435\u0441\u0442\u0430\u0440\u0430\u043d\u044b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0435 \u043e\u043f\u0446\u0438\u0438 \u0443 \u043d\u0435\u0433\u043e \u0438\u043c\u0435\u044e\u0442\u0441\u044f.\n\u041a\u0430\u043a\u0438\u0435 \u043e\u043f\u0446\u0438\u0438 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c:\n* Vegetarian Friendly\n* Vegan Options\n* Halal\n* Kosher\n* Gluten Free Options. \n\n\u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a dietary_restrictions.","d77bc761":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a PRICE RANGE","73398748":"\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e 6.40% \u0434\u0430\u043d\u043d\u044b\u0445. \n\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0443 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443, \u043f\u0440\u043e\u0434\u0443\u043c\u0430\u0435\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.","2baaeded":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0435\u0449\u0435 \u0440\u0430\u0437 \u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c.","2152e037":"#### \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c","fb85917f":"\u042f\u0432\u043d\u043e \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0438\u0445.","5be99c31":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a Ranking","73e76f68":"\u0421\u0442\u0440\u043e\u043a\u0438 \u0441 Unknown \u0442\u0438\u043f\u0430 str, \u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 - list. \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f.","252bdcc1":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a CITY","4582dc0a":"**\u0412\u044b\u0432\u043e\u0434\u044b \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443:** 70% \u043a\u0443\u0445\u043e\u043d\u044c - \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n\n**\u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:**\n1. \u041d\u0430\u0439\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u0445\n2. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u044b.","5fe195c1":"\u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c, \u043a\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u043d\u043e\u0432.\n\n\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 - 2.6 (\u0434\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0441 TA), 2.7 - \u043f\u043e\u0441\u043b\u0435.","1b64a5ad":"<a id=\"4.4\"><\/a>\n\n### 4.4 \u041f\u043e\u0438\u0441\u043a \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0435\u0441\u0442\u0430 \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430","4b935d07":"\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432 \u043d\u0430\u0448\u0443 \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c (\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0435\u043d\u0435\u0442\u0430):\n* country - \u0441\u0442\u0440\u0430\u043d\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0433\u043e\u0440\u043e\u0434\n* citizens - \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0430, \u0447\u0435\u043b\n* restaurants_number_TA - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0435 (TripAdvisor)\n* citizens_per_restaurant - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0440\u043e\u0436\u0430\u043d \u043d\u0430 \u043e\u0434\u0438\u043d \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\n* tourists_per_year - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0443\u0440\u0438\u0441\u0442\u043e\u0432, \u043f\u043e\u0441\u0435\u0442\u0438\u0432\u0448\u0438\u0445 \u0433\u043e\u0440\u043e\u0434 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0433\u043e\u0434\u0430, \u0447\u0435\u043b\n* ttl_ppl_per_restaurants - (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0443\u0440\u0438\u0441\u0442\u043e\u0432 + \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0430) \/ \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432","000aebb3":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e Ranking \u0438\u043c\u0435\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u043f\u0440\u043e\u0441\u0442\u043e \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0438\u0437-\u0437\u0430 \u043c\u044b \u044d\u0442\u043e\u0433\u043e \u0438\u043c\u0435\u0435\u043c \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435.\n\n\u0427\u0442\u043e\u0431\u044b \u0441\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0435\u0433\u043e \u0431\u043e\u043b\u0435\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u043c \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a: \n* rank_per_ttl - \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043a \u043e\u0431\u0449\u0435\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0430\u043d\u0433\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443. \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043b\u0430, \u0447\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0442\u0441\u0432\u043e \u0440\u0430\u043d\u0433\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u0431\u0443\u0434\u0435\u0442 \u0431\u043b\u0438\u0437\u043a\u043e \u043a \u043e\u0431\u0449\u0435\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u043e \u0432\u0435\u0440\u0441\u0438\u0438 TA.\n    \u0427\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0430\u043d\u0433 - \u0442\u0435\u043c \u043b\u0443\u0447\u0448\u0435. \u0427\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 rank_per_ttl - \u0442\u0435\u043c \u043b\u0443\u0447\u0448\u0435 \u0441 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430.","2de8016a":"**\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:**\n1. awards_ta - \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u043d\u0430\u0433\u0440\u0430\u0434\u0430\u043c\u0438\n2. awards_num - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0433\u0440\u0430\u0434 \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\n2. cuisine_styles_ta - \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u043a\u0443\u0445\u043d\u044f\u043c\u0438","d0b627a0":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a City","81bdfb6f":"\u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0441 TA \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c 5% \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432. \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c Unknown.","9514db1d":"\u0413\u0440\u0430\u0444\u0438\u043a\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043b\u0438\u0448\u044c \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u043c, \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0439 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u043e\u0447\u044c \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430. \n\n\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0432 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u043e\u0446\u0435\u043d\u043e\u043a \u043f\u043e \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e **\u0442\u0435\u0441\u0442\u0430 \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430**. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0443\u043b\u0435\u0432\u0443\u044e \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u043f\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c \u043d\u0435\u0440\u0430\u0437\u043b\u0438\u0447\u0438\u043c\u044b.\n\n\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u043e \u0442\u0438\u043f\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u043e \u0438 \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043e\u043a-\u0448\u043f\u0438\u043e\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435, \u043d\u043e \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442 \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a (\u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u044c \u043a \u0433\u043e\u0440\u043e\u0434\u0443, \u0442\u0438\u043f\u0443 \u043a\u0443\u0445\u043d\u0438).","d4f61cd0":"<a id=\"4.2\"><\/a>\n\n### 4.2 \u00a0\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 Rating","8db17144":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430.","6931df3d":"**\u0412\u044b\u0432\u043e\u0434\u044b**:\n* \u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a, \u0447\u0442\u043e \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b.\n* \u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432\u0430\u0440\u044c\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043e\u0442 \u0433\u043e\u0440\u043e\u0434\u0430 \u043a \u0433\u043e\u0440\u043e\u0434\u0443.","73829ef8":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a Cuisines","0fae6826":"<a id=\"1\"><\/a>\n# 1. IMPORT","a5cb5bd3":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a NUMBER OF REVIEWS","96671961":"\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043e\u0447\u0435\u043d\u044c \u043c\u0430\u043b\u043e. \n\n\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0430 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0441\u043c. \u0440\u0430\u0437\u0434\u0435\u043b [3.2 \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#3.2)).","fa46a365":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435:","1f0d44bf":"\u041f\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0432\u044c\u044e \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u0443\u0441\u0442\u0440\u0430\u043d\u0438\u043c \u0438\u0445.","c1fdb969":"\u0422\u0430\u043a\u0436\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c.\n\n\u0412\u0441\u0435\u0433\u043e 125 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c (\u0434\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441 TA), 146 - \u043f\u043e\u0441\u043b\u0435. ","45ddd10d":"# Table of Contents\n\n1. [IMPORT](#1)\n2. [DATA](#2)\n3. [CLEANING AND PREPARING DATA](#3)\n    * [\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NAN ](#3.1)\n    * [\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#3.2)\n4. [EDA](#4)\n    * [\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#4.1)\n    * [\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 Rating](#4.2)\n    * [\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#4.3)\n    * [\u0410\u043d\u0430\u043b\u0438\u0437 \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445](#4.4)\n\n5. [DATA PREPROCESSING](#5)\n6. [MODEL](#6)\n7. [SUBMISSION](#7)\n8. [SUMMARY](#8)\n\n","7859e2b6":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0442 \u0442\u043e\u0433\u043e, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0441\u0435\u0442\u0435\u0432\u044b\u043c.","043ddfe8":"<a id=\"3\"><\/a>\n# 3. CLEANING AND PREPARING DATA","7f29f327":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a Reviews","8ef61c2a":"\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c, \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c  \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\n\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.","1be5b38b":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a Number of Reviews","607296eb":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n* date_rev_1: \u0434\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0440\u0435\u0432\u044c\u044e\n* date_rev_2: \u0434\u0430\u0442\u0430 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0440\u0435\u0432\u044c\u044e\n* date_rev_delta: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0440\u0435\u0432\u044c\u044e\n* date_rev_from_max: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043e\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u0434\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0432\u0435\u0436\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435.\n    \n>     \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441 TA: \u0421\u0432\u0435\u0436\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u044b \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c, \u0447\u0435\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u0432\u043d\u043e. \u041e\u043d\u0438 \u0434\u0430\u044e\u0442 \u0431\u043e\u043b\u0435\u0435 \u0442\u043e\u0447\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u0442\u043e\u043c, \u0447\u0435\u0433\u043e \u0432 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u0442\u043e\u0438\u0442 \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u043e\u0442 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438. \u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u043e\u0442\u0437\u044b\u0432\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0430\u0432\u043d\u043e (\u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u043e\u0442 \u0442\u043e\u0433\u043e, \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u043d\u0438 \u0438\u043b\u0438 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435), \u0438\u043c\u0435\u044e\u0442 \u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u0432\u0435\u0441 \u043f\u0440\u0438 \u0440\u0430\u0441\u0447\u0435\u0442\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0447\u0435\u043c \u043e\u0442\u0437\u044b\u0432, \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u043d\u0435\u0434\u0430\u0432\u043d\u043e. \u041d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u044b \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0442\u0430\u043a\u043e\u0433\u043e \u0436\u0435 \u0432\u0435\u0441\u0430 \u0432 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0435, \u043e\u043d\u0438 \u043f\u043e-\u043f\u0440\u0435\u0436\u043d\u0435\u043c\u0443 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \"\u041e\u0431\u0437\u043e\u0440\" \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0435 \u0438 \u0432 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438.","edfec5e4":"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u043d\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0438\u0437 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432\u044b\u0448\u0435.","bbc654fd":"\u0414\u043b\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u044b\u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0438 \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043b\u0438\u0441\u044c \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0441 TA, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u0443\u0445\u043e\u043d\u044c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435.\n\n\u0422\u0430\u043a\u0438\u0435\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 2442.\n\n\u0417\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0430, \u0442.\u043a. MAE \u043f\u0440\u0438 \u0442\u0430\u043a\u043e\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u0435 \u0445\u0443\u0436\u0435.","85677ea7":"**\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438**:\n1. \u041a\u0430\u043a \u043d\u0438\u0437\u043a\u0438\u0435, \u0442\u0430\u043a \u0438 \u0432\u044b\u0441\u043e\u043a\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432\u043e \u0432\u0441\u0435\u0445 \u0446\u0435\u043d\u043e\u0432\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445\n2. \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u0432\u043e 2-\u043e\u0439 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438. \u041f\u043e 1-\u043e\u0439 \u0438 2-\u043e\u0439 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0445\u043e\u0436\u0438.\n\n\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0442\u0437\u044b\u0432\u043e\u0432. \u0427\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0432\u044b\u0448\u0435, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432."}}