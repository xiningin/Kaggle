{"cell_type":{"92711cee":"code","4affec80":"code","f7d235d2":"code","a7e90fa7":"code","e948b885":"code","5134fe54":"code","00171faa":"code","b949bba7":"code","96fb70e9":"code","f336a4a6":"code","f739bb43":"code","a49ae864":"code","fc4cb29e":"code","81131619":"code","e86eb108":"code","b23306ad":"code","a2586a2b":"code","d5a00e5c":"code","b53b92f9":"code","aded808a":"code","70aa6698":"code","13ef44cd":"code","bf3af3de":"code","d0886cbe":"code","d3c7723f":"code","eec9167e":"code","4ffd07ae":"code","d8f774e4":"code","f4c3a311":"code","bc99635f":"code","16339375":"markdown","0c974d16":"markdown","2a4c54de":"markdown","f58789da":"markdown","e643b6d9":"markdown","4a7ddc35":"markdown","4a6257a5":"markdown","06c114b2":"markdown","33523bc4":"markdown","933a0103":"markdown","aba6d662":"markdown","9304957e":"markdown","4c405e72":"markdown","08ee9058":"markdown","9fa453cd":"markdown","518fd011":"markdown","af122d94":"markdown","d7d20804":"markdown","71ffaa83":"markdown","5bf6397c":"markdown","37e3172a":"markdown","3ea43b78":"markdown","82303e4f":"markdown"},"source":{"92711cee":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns ","4affec80":"df = pd.read_csv('..\/input\/data.csv', encoding = \"ISO-8859-1\")","f7d235d2":"df.head(10)","a7e90fa7":"df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate']) #ubah format InvoiceDate menjadi datetime","e948b885":"print(\"Informasi dari dataset :\")\nprint(\"Jumlah Row \\t\\t:\", df.shape[0]) #check jumlah total rows pada data\nprint(\"Jumlah Column \\t\\t:\", df.shape[1]) #check jumlah total coloumns pada data\nprint(\"Date range from \\t:\", df.InvoiceDate.min(), \" to \", df.InvoiceDate.max()) #check range waktu pada data\nprint(\"#Jumlah Transaksi \\t:\", df.InvoiceNo.nunique()) #check jumlah transaksi\nprint(\"#Unique Customer \\t:\", df.CustomerID.nunique()) #check jumlah unique customer\nprint(\"Range Quantity \\t\\t:\", df.Quantity.min(), \" to \", df.Quantity.max()) #check range Quantity pada data\nprint(\"Range UnitPrice \\t:\", df.UnitPrice.min(), \" to \", df.UnitPrice.max()) #check range UnitPrice pada data","5134fe54":"print(df.isnull().sum().sort_values(ascending=False))","00171faa":"df_new = df.dropna() ## remove null\ndf_new = df_new[df_new.Quantity > 0] ## remove negative value in Quantity column\ndf_new = df_new[df_new.UnitPrice > 0] ## remove negative value in UnitPrice column","b949bba7":"print(df_new.isnull().sum().sort_values(ascending=False))","96fb70e9":"df_new['Revenue'] = df_new['Quantity'] * df_new['UnitPrice'] ## add Revenue (Qty * UnitPrice) column\ndf_new['CustomerID'] = df_new['CustomerID'].astype('int64') #change format CustomerID","f336a4a6":"import datetime as dt\nNOW = dt.datetime(2011,12,10)","f739bb43":"rfmTable = df_new.groupby('CustomerID').agg({'InvoiceDate': lambda x: (NOW - x.max()).days, 'InvoiceNo': lambda x: len(x), 'Revenue': lambda x: x.sum()})\nrfmTable['InvoiceDate'] = rfmTable['InvoiceDate'].astype(int)\nrfmTable.rename(columns={'InvoiceDate': 'recency', \n                         'InvoiceNo': 'frequency', \n                         'Revenue': 'monetary'}, inplace=True)","a49ae864":"rfmTable.head()","fc4cb29e":"quantiles = rfmTable.quantile(q=[0.25,0.5,0.75])\nquantiles = quantiles.to_dict()\nsegmented_rfm = rfmTable","81131619":"def RScore(x,p,d):\n    if x <= d[p][0.25]:\n        return 4\n    elif x <= d[p][0.50]:\n        return 3\n    elif x <= d[p][0.75]: \n        return 2\n    else:\n        return 1\n    \ndef FMScore(x,p,d):\n    if x <= d[p][0.25]:\n        return 1\n    elif x <= d[p][0.50]:\n        return 2\n    elif x <= d[p][0.75]: \n        return 3\n    else:\n        return 4","e86eb108":"segmented_rfm['r_quartile'] = segmented_rfm['recency'].apply(RScore, args=('recency',quantiles,))\nsegmented_rfm['f_quartile'] = segmented_rfm['frequency'].apply(FMScore, args=('frequency',quantiles,))\nsegmented_rfm['m_quartile'] = segmented_rfm['monetary'].apply(FMScore, args=('monetary',quantiles,))\nsegmented_rfm.head()","b23306ad":"segmented_rfm['RFMScore'] = segmented_rfm.r_quartile.map(str)+segmented_rfm.f_quartile.map(str)+segmented_rfm.m_quartile.map(str)\nsegmented_rfm.head()","a2586a2b":"segmented_rfm[segmented_rfm['RFMScore']=='444'].sort_values('monetary', ascending=False).head()\n","d5a00e5c":"top_customer = df_new[df_new['CustomerID'] == 14646]\ntop_customer.head(20)","b53b92f9":"df_new.head()","aded808a":"def get_month(x): return dt.datetime(x.year, x.month, 1)\ndf_new['InvoiceMonth'] = df_new['InvoiceDate'].apply(get_month)\ngrouping = df_new.groupby('CustomerID')['InvoiceMonth']\ndf_new['CohortMonth'] = grouping.transform('min')","70aa6698":"df_new.head()","13ef44cd":"## function untuk extract integer value dari data\ndef get_date_int(df, column):\n    year = df[column].dt.year\n    month = df[column].dt.month\n    day = df[column].dt.day\n    return year, month, day","bf3af3de":"invoice_year, invoice_month, _ = get_date_int(df_new, 'InvoiceMonth')\ncohort_year, cohort_month, _ = get_date_int(df_new, 'CohortMonth')","d0886cbe":"years_diff = invoice_year - cohort_year\nmonths_diff = invoice_month - cohort_month","d3c7723f":"df_new['CohortIndex'] = years_diff * 12 + months_diff + 1","eec9167e":"df_new.head()","4ffd07ae":"## grouping customer berdasarkan masing masing cohort\ngrouping = df_new.groupby(['CohortMonth', 'CohortIndex'])\ncohort_data = grouping['CustomerID'].apply(pd.Series.nunique)\ncohort_data = cohort_data.reset_index()\ncohort_counts = cohort_data.pivot(index='CohortMonth', columns='CohortIndex', values='CustomerID')","d8f774e4":"cohort_counts","f4c3a311":"cohort_sizes = cohort_counts.iloc[:,0]\nretention = cohort_counts.divide(cohort_sizes, axis=0)\nretention.round(2) * 100","bc99635f":"plt.figure(figsize=(15, 8))\nplt.title('Retention rates')\nsns.heatmap(data = retention,\nannot = True,\nfmt = '.0%',\nvmin = 0.0,\nvmax = 0.5,\ncmap = 'BuGn')\nplt.show()","16339375":"### Interpretation :","0c974d16":"Kernel features :\n\n- [Data Wrangling \/ Data Preparation](#data-wrangling)\n- [RFM Segmentation](#rfm-segmentation)\n- [Cohort Analysis](#cohort-analysis)\n\n&nbsp;","2a4c54de":"### Retention Rate","f58789da":"<a name=\"data-wrangling\"><\/a>","e643b6d9":"Let's look at more detailed CustomerID transactions 14646","4a7ddc35":"<a name=\"rfm-segmentation\"><\/a>","4a6257a5":"### Top 5 Customer based on RFMScore","06c114b2":"## Data Wrangling","33523bc4":"The easiest way to create a segment is the quartile method. With this method there will be 4 segments that are easy to understand","933a0103":"Chohort Analysis original source from Datacamp https:\/\/campus.datacamp.com\/courses\/customer-segmentation-in-python\/cohort-analysis?ex=3","aba6d662":"<a name=\"cohort-analysis\"><\/a>","9304957e":"<img src=\"https:\/\/www.mathsisfun.com\/data\/images\/quartiles-c.gif\" \/>","4c405e72":"CohortMonth 2010-12 (Cohort December 2010) has 885 Unique customers who made transactions that month (CohortIndex 1), <br>\n324 customers returned to the transaction the following month (CohortIndex 2), <br>\n286 customers returned again the following month (CohortIndex 3), and so on.","08ee9058":"RFM score: 444 is the best score because it has a low ** recency ** (still active), ** frequency ** high (often making transactions) and ** monetary ** high\n\n&nbsp;","9fa453cd":"Retention rates are often ignored, but they are actually very important. Because the cost of customer acquisition is very expensive we need to do everything to convince the client to return after their first purchase. <p>\n\nIf your retention rate is low you will spend a budget for the acquisition channel so that more customers will arrive. <p>\n\nFrom Cohort Analysis we can see the retention rate or what percentage of customers return in the following months after the first purchase","518fd011":"- Some data has a Negative Quantity and UnitPrice\n- Some data has CustomerID and Description null \/ blank\n\nwe will drop those data","af122d94":"<img src=\"https:\/\/i.imgur.com\/FQn5sDf.png\" \/>","d7d20804":"RFM Segmentation is customer segmentation based on scoring R, F, and M (Recency: Length of day since the last transaction, Frequency: Number of transactions, Monetary: Total Revenue).\n\nBecause the last transaction on the data was December 9, 2011, we will use December 10, 2011 to calculate the recency","71ffaa83":"### Intepretation :","5bf6397c":"Customers with ID 12346 have ** frequency **: 1 (1 time transaction), ** recency **: 325 (325 days of the last transaction), and ** monetary ** 77183.60 (Grand total transactions)\n\u00a0\n\nCustomer with email 12347 has ** frequency **: 182 (182 complete transaction times), ** recency **: 2 (2 days from the last transaction), and ** monetary ** 4310.00 (Grand total transactions)","37e3172a":"## Cohort Analysis","3ea43b78":"## RFM Segmentation","82303e4f":"### Heatmap"}}