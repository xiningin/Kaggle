{"cell_type":{"dd9f2276":"code","b8f0419b":"code","7e834d78":"code","d3e8449a":"code","bae73a6a":"code","cf4f3786":"code","acdd3252":"code","c9d670d9":"code","cf275ef8":"code","eea36a79":"code","727db30d":"code","4dd3f48b":"code","d34bc381":"code","c8b3fdd5":"code","c2284ec8":"code","f34d8c89":"code","2dec593f":"code","4e7cbddf":"code","85d0be25":"code","0732952f":"code","70af8f83":"code","978bce32":"code","912483ec":"code","a642592e":"code","bcea9f18":"code","b2f45b75":"code","ea871b49":"code","6d7352d1":"code","1eff7e57":"code","61a8b12e":"code","b122ed9e":"code","62cd473a":"code","3fe36e81":"code","45a953c1":"code","c37a4876":"code","eda566af":"code","2927a148":"code","74fb8c5d":"code","a02190ac":"code","4cee4bfe":"markdown","e9e48f6d":"markdown","3be72e19":"markdown","6ff96bbf":"markdown","132d3561":"markdown","950778fb":"markdown"},"source":{"dd9f2276":"import pandas as pd\nimport numpy as np\nfrom keras.preprocessing.text import Tokenizer,  text_to_word_sequence\nfrom keras.engine.topology import Layer\nfrom keras import initializers as initializers, regularizers, constraints\nfrom keras.callbacks import Callback, ModelCheckpoint\nfrom keras.utils.np_utils import to_categorical\nfrom keras.layers import Embedding, Input, Dense, LSTM, GRU, Bidirectional, TimeDistributed, Dropout\nfrom keras import backend as K\nfrom keras import optimizers\nfrom keras.models import Model\nimport nltk\nimport re\nimport matplotlib.pyplot as plt\nimport sys\nfrom sklearn.metrics import roc_auc_score\nfrom nltk import tokenize\nimport seaborn as sns","b8f0419b":"def dot_product(x, kernel):\n    \"\"\"\n    Wrapper for dot product operation, in order to be compatibl|e with both\n    Theano and Tensorflow\n    Args:\n        x (): input\n        kernel (): weights\n    Returns:\n    \"\"\"\n    if K.backend() == 'tensorflow':\n        return K.squeeze(K.dot(x, K.expand_dims(kernel)), axis=-1)\n    else:\n        return K.dot(x, kernel)\n\nclass AttentionWithContext(Layer):\n    \"\"\"\n    Attention operation, with a context\/query vector, for temporal data.\n    Supports Masking.\n    Follows the work of Yang et al. [https:\/\/www.cs.cmu.edu\/~diyiy\/docs\/naacl16.pdf]\n    \"Hierarchical Attention Networks for Document Classification\"\n    by using a context vector to assist the attention\n    # Input shape\n        3D tensor with shape: `(samples, steps, features)`.\n    # Output shape\n        2D tensor with shape: `(samples, features)`.\n    How to use:\n    Just put it on top of an RNN Layer (GRU\/LSTM\/SimpleRNN) with return_sequences=True.\n    The dimensions are inferred based on the output shape of the RNN.\n    Note: The layer has been tested with Keras 2.0.6\n    Example:\n        model.add(LSTM(64, return_sequences=True))\n        model.add(AttentionWithContext())\n        # next add a Dense layer (for classification\/regression) or whatever...\n    \"\"\"\n\n    def __init__(self,\n                 W_regularizer=None, u_regularizer=None, b_regularizer=None,\n                 W_constraint=None, u_constraint=None, b_constraint=None,\n                 bias=True, **kwargs):\n\n        self.supports_masking = True\n        self.init = initializers.get('glorot_uniform')\n\n        self.W_regularizer = regularizers.get(W_regularizer)\n        self.u_regularizer = regularizers.get(u_regularizer)\n        self.b_regularizer = regularizers.get(b_regularizer)\n\n        self.W_constraint = constraints.get(W_constraint)\n        self.u_constraint = constraints.get(u_constraint)\n        self.b_constraint = constraints.get(b_constraint)\n\n        self.bias = bias\n        super(AttentionWithContext, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        assert len(input_shape) == 3\n\n        self.W = self.add_weight((input_shape[-1], input_shape[-1],),\n                                 initializer=self.init,\n                                 name='{}_W'.format(self.name),\n                                 regularizer=self.W_regularizer,\n                                 constraint=self.W_constraint)\n        if self.bias:\n            self.b = self.add_weight((input_shape[-1],),\n                                     initializer='zero',\n                                     name='{}_b'.format(self.name),\n                                     regularizer=self.b_regularizer,\n                                     constraint=self.b_constraint)\n\n        self.u = self.add_weight((input_shape[-1],),\n                                 initializer=self.init,\n                                 name='{}_u'.format(self.name),\n                                 regularizer=self.u_regularizer,\n                                 constraint=self.u_constraint)\n\n        super(AttentionWithContext, self).build(input_shape)\n\n    def compute_mask(self, input, input_mask=None):\n        # do not pass the mask to the next layers\n        return None\n\n    def call(self, x, mask=None):\n        uit = dot_product(x, self.W)\n\n        if self.bias:\n            uit += self.b\n\n        uit = K.tanh(uit)\n        ait = dot_product(uit, self.u)\n\n        a = K.exp(ait)\n\n        # apply mask after the exp. will be re-normalized next\n        if mask is not None:\n            # Cast the mask to floatX to avoid float64 upcasting in theano\n            a *= K.cast(mask, K.floatx())\n\n        # in some cases especially in the early stages of training the sum may be almost zero\n        # and this results in NaN's. A workaround is to add a very small positive number \u03b5 to the sum.\n        # a \/= K.cast(K.sum(a, axis=1, keepdims=True), K.floatx())\n        a \/= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())\n\n        a = K.expand_dims(a)\n        weighted_input = x * a\n        return K.sum(weighted_input, axis=1)\n\n    def compute_output_shape(self, input_shape):\n        return input_shape[0], input_shape[-1]","7e834d78":"max_features=200000\nmax_senten_len=40\nmax_senten_num=6\nembed_size=100\nVALIDATION_SPLIT = 0.2","d3e8449a":"from sklearn.utils import shuffle","bae73a6a":"df = shuffle(pd.read_json('..\/input\/news-category-dataset\/News_Category_Dataset_v2.json', lines=True)).reset_index()","cf4f3786":"len(df.category.unique())","acdd3252":"df.head()","c9d670d9":"df.category.unique()","cf275ef8":"df.category = df.category.map(lambda x: \"WORLDPOST\" if x == \"THE WORLDPOST\" else x)","eea36a79":"df['text'] = df['headline'] +'. ' +df['short_description']","727db30d":"df.head()","4dd3f48b":"df = df[['text', 'category']]","d34bc381":"df.info()","c8b3fdd5":"categories = df['category']\ntext = df['text']","c2284ec8":"cates = df.groupby('category')\nprint(\"total categories:\", cates.ngroups)\nprint(cates.size())","f34d8c89":"import re\ndef clean_str(string):\n    \"\"\"\n    Tokenization\/string cleaning for dataset\n    Every dataset is lower cased except\n    \"\"\"\n    string = re.sub(r\"\\\\\", \"\", string)    \n    string = re.sub(r\"\\'\", \"\", string)    \n    string = re.sub(r\"\\\"\", \"\", string)    \n    return string.strip().lower()","2dec593f":"paras = []\nlabels = []\ntexts = []","4e7cbddf":"sent_lens = []\nsent_nums = []\nfor idx in range(df.text.shape[0]):\n    text = clean_str(df.text[idx])\n    texts.append(text)\n    sentences = tokenize.sent_tokenize(text)\n    sent_nums.append(len(sentences))\n    for sent in sentences:\n        sent_lens.append(len(text_to_word_sequence(sent)))\n    paras.append(sentences)","85d0be25":"sns.distplot(sent_lens, bins=200)\nplt.show()","0732952f":"sns.distplot(sent_nums)\nplt.show()","70af8f83":"tokenizer = Tokenizer(num_words=max_features, oov_token=True)\ntokenizer.fit_on_texts(texts)","978bce32":"data = np.zeros((len(texts), max_senten_num, max_senten_len), dtype='int32')\nfor i, sentences in enumerate(paras):\n    for j, sent in enumerate(sentences):\n        if j< max_senten_num:\n            wordTokens = text_to_word_sequence(sent)\n            k=0\n            for _, word in enumerate(wordTokens):\n                try:\n                    if k<max_senten_len and tokenizer.word_index[word]<max_features:\n                        data[i,j,k] = tokenizer.word_index[word]\n                        k=k+1\n                except:\n                    print(word)\n                    pass","912483ec":"data.shape","a642592e":"word_index = tokenizer.word_index\nprint('Total %s unique tokens.' % len(word_index))","bcea9f18":"labels = pd.get_dummies(categories)","b2f45b75":"print('Shape of data tensor:', data.shape)\nprint('Shape of labels tensor:', labels.shape)","ea871b49":"indices = np.arange(data.shape[0])\nnp.random.shuffle(indices)\ndata = data[indices]\nlabels = labels.iloc[indices]\nnb_validation_samples = int(VALIDATION_SPLIT * data.shape[0])\n\nx_train = data[:-nb_validation_samples]\ny_train = labels[:-nb_validation_samples]\nx_val = data[-nb_validation_samples:]\ny_val = labels[-nb_validation_samples:]\nprint('Number of positive and negative reviews in traing and validation set')\nprint(y_train.columns.tolist())\nprint(y_train.sum(axis=0).tolist())\nprint(y_val.sum(axis=0).tolist())","6d7352d1":"REG_PARAM = 1e-13\nl2_reg = regularizers.l2(REG_PARAM)","1eff7e57":"import os","61a8b12e":"GLOVE_DIR = \"..\/input\/glove6b\/glove.6B.100d.txt\"\nembeddings_index = {}\nf = open(GLOVE_DIR)\nfor line in f:\n    try:\n        values = line.split()\n        word = values[0]\n        coefs = np.asarray(values[1:], dtype='float32')\n        embeddings_index[word] = coefs\n    except:\n        print(word)\n        pass\nf.close()\nprint('Total %s word vectors.' % len(embeddings_index))","b122ed9e":"embedding_matrix = np.zeros((len(word_index) + 1, embed_size))\nabsent_words = 0\nfor word, i in word_index.items():\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None:\n        # words not found in embedding index will be all-zeros.\n        embedding_matrix[i] = embedding_vector\n    else:\n        absent_words += 1\nprint('Total absent words are', absent_words, 'which is', \"%0.2f\" % (absent_words * 100 \/ len(word_index)), '% of total words')","62cd473a":"embedding_layer = Embedding(len(word_index) + 1,embed_size,weights=[embedding_matrix], input_length=max_senten_len, trainable=False)","3fe36e81":"word_input = Input(shape=(max_senten_len,), dtype='float32')\nword_sequences = embedding_layer(word_input)\nword_lstm = Bidirectional(LSTM(150, return_sequences=True, kernel_regularizer=l2_reg))(word_sequences)\nword_dense = TimeDistributed(Dense(200, kernel_regularizer=l2_reg))(word_lstm)\nword_att = AttentionWithContext()(word_dense)\nwordEncoder = Model(word_input, word_att)\n\nsent_input = Input(shape=(max_senten_num, max_senten_len), dtype='float32')\nsent_encoder = TimeDistributed(wordEncoder)(sent_input)\nsent_lstm = Bidirectional(LSTM(150, return_sequences=True, kernel_regularizer=l2_reg))(sent_encoder)\nsent_dense = TimeDistributed(Dense(200, kernel_regularizer=l2_reg))(sent_lstm)\nsent_att = Dropout(0.5)(AttentionWithContext()(sent_dense))\npreds = Dense(40, activation='softmax')(sent_att)\nmodel = Model(sent_input, preds)\nmodel.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['acc'])","45a953c1":"checkpoint = ModelCheckpoint('best_model.h5', verbose=0, monitor='val_loss',save_best_only=True, mode='auto') ","c37a4876":"history = model.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=50, batch_size=512, callbacks=[checkpoint])","eda566af":"print(history.history.keys())","2927a148":"# summarize history for accuracy\nplt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","74fb8c5d":"# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","a02190ac":"model.save('han.h5')","4cee4bfe":"### Model","e9e48f6d":"### Data","3be72e19":"### Attention Layer","6ff96bbf":"Since the uprising of Artificial Intelligence, text classification has become one of the most staggering tasks to accomplish. In layman terms, We can say Artificial Intelligence is the field which tries to achieve human-like intelligent models to ease the jobs for all of us. We have an astounding proficiency in text classification but even many sophisticated NLP models are failed to achieve proficiency even close to it. So the question arises is that what we humans do differently? How do we classify text?\n\nFirst of all, we understand words not each and every word but many of them and we can guess even unknown words just by the structure of a sentence. Then we understand the message that those series of words (sentence) conveys. Then from those series of sentences, we understand the meaning of a paragraph or an article. The similar approach is used in Hierarchical Attention model.\n\n**To Learn Hierarchical Attention Network completely go [here](https:\/\/medium.com\/@heetsankesara3\/hierarchical-attention-networks-d220318cf87e)**\n\n** Click [here](https:\/\/github.com\/Hsankesara\/DeepResearch\/tree\/master\/Hierarchical_Attention_Network) to go to the code**\n","132d3561":"### Config","950778fb":"## Plotting time"}}