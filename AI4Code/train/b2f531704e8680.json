{"cell_type":{"0b271720":"code","fdbcffdb":"code","dd8d3115":"code","7b4c00de":"code","9e95efef":"code","70a53149":"code","eae5775b":"code","0cfeb74c":"code","8a8288c2":"code","5a969189":"code","a83081cc":"code","bca15ad5":"code","98ec1f2e":"code","b0a844cc":"code","84081c80":"code","51354939":"code","a380e25d":"code","0d77f7bd":"code","c1c489b8":"code","b086faa7":"code","799f35ea":"code","b4b80fc6":"code","2d8dedd5":"code","23c40d21":"code","186e8340":"code","44e258cb":"code","2ca7dbc8":"code","469da3c2":"markdown","e3cf014a":"markdown","0267ef46":"markdown","70d68b06":"markdown","4b5e0b3f":"markdown","0085fa15":"markdown","0e6d3c70":"markdown"},"source":{"0b271720":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom warnings import filterwarnings\nsns.set(font='Microsoft YaHei',font_scale=1.1,palette = 'Set2')\nfilterwarnings(\"ignore\")\nplt.rcParams['font.sans-serif']=['SimHei']\nplt.rcParams['axes.unicode_minus']=False","fdbcffdb":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","dd8d3115":"train.head()","7b4c00de":"train.info()","9e95efef":"train.isnull().sum()","70a53149":"train.Sex.value_counts()","eae5775b":"train.groupby('Sex').Survived.value_counts()","0cfeb74c":"train['Died']=1-train['Survived']\ntrain.groupby('Sex').agg('count')[['Survived','Died']].plot(kind='bar',figsize=(10,5),stacked=True)","8a8288c2":"train.Pclass.value_counts()","5a969189":"train.groupby('Pclass').Survived.value_counts()","a83081cc":"train[['Pclass','Survived']].groupby(['Pclass'],as_index=True).mean().sort_values(by='Survived',ascending=False)","bca15ad5":"g=sns.FacetGrid(train,col='Survived')\ng.map(plt.hist,'Age',bins=20)","98ec1f2e":"grid=sns.FacetGrid(train,col='Survived',row='Pclass',size=2.2,aspect=1.6)\ngrid.map(plt.hist,'Age',alpha=.5,bins=20)\ngrid.add_legend()","b0a844cc":"train.Embarked[train.Embarked.isnull()==True]=train.Embarked.dropna().mode().values\ntrain.info()","84081c80":"from sklearn.ensemble import RandomForestRegressor\ncols=['Age','Survived','Pclass','SibSp','Parch','Fare']\nage_df=train[cols]\nx_train=age_df[age_df.Age.notnull()][cols[1:]]\ny_train=age_df[age_df.Age.notnull()][cols[0]]\nz_train=age_df[age_df.Age.isnull()][cols[1:]]\n\nrfr=RandomForestRegressor(n_estimators=1000,n_jobs=-1)\nrfr.fit(x_train,y_train)\ny_predict=rfr.predict(z_train)\ntrain.loc[train.Age.isnull(),'Age']=y_predict\ntrain.info()","51354939":"test.Embarked[test.Embarked.isnull()==True]=test.Embarked.dropna().mode().values\ntest.Fare[test.Fare.isnull()==True]=test.Fare.dropna().mode().values\ntest.info()","a380e25d":"cols2=['Age','Pclass','SibSp','Parch','Fare']\nage2_df=test[cols2]\nx_test=age2_df[age2_df.Age.notnull()][cols2[1:]]\ny_test=age2_df[age2_df.Age.notnull()][cols2[0]]\nz_test=age2_df[age2_df.Age.isnull()][cols2[1:]]\n\nrfr2=RandomForestRegressor(n_estimators=1000,n_jobs=-1)\nrfr2.fit(x_test,y_test)\ny_predict2=rfr2.predict(z_test)\ntest.loc[test.Age.isnull(),'Age']=y_predict2\ntest.info()","0d77f7bd":"def set_Cabin_type(df):\n    df.loc[ (df.Cabin.notnull()), 'Cabin' ] = \"Yes\"\n    df.loc[ (df.Cabin.isnull()), 'Cabin' ] = \"No\"\n    return df\ntrain = set_Cabin_type(train)\ntest=set_Cabin_type(test)","c1c489b8":"train.head()","b086faa7":"dummies_Cabin=pd.get_dummies(train['Cabin'],prefix='Cabin')\ndummies_Embarked=pd.get_dummies(train['Embarked'],prefix='Embarked')\ndummies_Sex=pd.get_dummies(train['Sex'],prefix='Sex')\ndummies_Pclass=pd.get_dummies(train['Pclass'],prefix='Pclass')\ndf=pd.concat([train,dummies_Cabin,dummies_Sex,dummies_Pclass],axis=1)\ndf.drop(['Pclass','Name','Sex','Ticket','Cabin','Embarked','Died'],axis=1,inplace=True)\ndf.head()","799f35ea":"dummies_Cabin2=pd.get_dummies(test['Cabin'],prefix='Cabin')\ndummies_Embarked2=pd.get_dummies(test['Embarked'],prefix='Embarked')\ndummies_Sex2=pd.get_dummies(test['Sex'],prefix='Sex')\ndummies_Pclass2=pd.get_dummies(test['Pclass'],prefix='Pclass')\ndf2=pd.concat([test,dummies_Cabin2,dummies_Sex2,dummies_Pclass2],axis=1)\ndf2.drop(['Pclass','Name','Sex','Ticket','Cabin','Embarked'],axis=1,inplace=True)\ndf2.head()","b4b80fc6":"import sklearn.preprocessing as preprocessing\nscaler=preprocessing.StandardScaler()\nage_scaler_param=scaler.fit(df['Age'].values.reshape(-1,1))\ndf['Age_scaled']=scaler.fit_transform(df['Age'].values.reshape(-1,1),age_scaler_param)\nfare_scaler_param=scaler.fit(df['Fare'].values.reshape(-1,1))\ndf['Fare_scaled']=scaler.fit_transform(df['Fare'].values.reshape(-1,1),fare_scaler_param)\ndf.head()","2d8dedd5":"age_scaler_param2=scaler.fit(df2['Age'].values.reshape(-1,1))\ndf2['Age_scaled']=scaler.fit_transform(df2['Age'].values.reshape(-1,1),age_scaler_param2)\nfare_scaler_param2=scaler.fit(df2['Fare'].values.reshape(-1,1))\ndf2['Fare_scaled']=scaler.fit_transform(df2['Fare'].values.reshape(-1,1),fare_scaler_param2)\ndf.head()","23c40d21":"df.drop(['Age','Fare'],axis=1,inplace=True)\ndf2.drop(['Age','Fare'],axis=1,inplace=True)","186e8340":"x_train=df[df.columns[2:]]\ny_train=df['Survived']\nx_test=df2[df2.columns[1:]]","44e258cb":"from sklearn.linear_model import LogisticRegression\nmodel=LogisticRegression()\nmodel.fit(x_train,y_train)","2ca7dbc8":"y_test=model.predict(x_test)\ndf2['Survived']=y_test\ndf2=df2[['PassengerId','Survived']]\ndf2.to_csv('test_result.csv',index=False)","469da3c2":"\u7b2c\u4e00\u90e8\u5206\uff1a\u6570\u636e\u521d\u63a2","e3cf014a":"\u5bf9\u6d4b\u8bd5\u6570\u636e\u96c6\u505a\u540c\u6837\u5904\u7406","0267ef46":"\u7b2c\u4e09\u90e8\u5206\uff1a\u6570\u636e\u6e05\u6d17","70d68b06":"\u7b2c\u4e8c\u90e8\u5206\uff1a\u6570\u636e\u63a2\u7d22&\u53ef\u89c6\u5316","4b5e0b3f":"\u7f3a\u5931\u503c\u586b\u8865","0085fa15":"\u7279\u5f81\u56e0\u5b50\u5316","0e6d3c70":"\u6570\u636e\u6807\u51c6\u5316"}}