{"cell_type":{"438e641b":"code","ec7ce1b1":"code","6de5ab07":"code","030a2d18":"code","1a82f130":"code","f948ad82":"code","588f4f63":"code","155770cf":"code","dbf4e026":"code","9cb96a4e":"code","aabdeac4":"code","5323f711":"code","bb64db04":"code","a47a97d7":"code","541ef37a":"code","1d724ee3":"code","95392519":"code","42e86ad6":"code","12078201":"code","9adc6c13":"code","d00b341a":"code","29c8af6a":"code","ec6691e8":"code","52773d85":"code","9d3d0fa3":"code","fe33cb2e":"code","5f8e6eda":"code","3893535b":"code","f2716d00":"code","a59251b4":"code","0e3e38d7":"code","1bb70e2f":"code","b954b353":"code","838f9c61":"code","273d4d23":"code","1c0bb93d":"markdown"},"source":{"438e641b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom numpy import arange\nimport math\nimport random\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.offline as po\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.express as px","ec7ce1b1":"df = pd.read_csv('..\/input\/zomato-bangalore-restaurants\/zomato.csv')","6de5ab07":"# making copy \ndf_cpy=df","030a2d18":"df.info()","1a82f130":"df.head()","f948ad82":"df.describe()","588f4f63":"# df['votes']= df['votes'].astype(int)","155770cf":"df.isnull().sum()\ndf.dropna(how='any',inplace=True)\ndf.info()","dbf4e026":"# df['online_order'].unique()---------- alright\n# df['book_table'].unique()------------ alright\n\ndf['rate'].unique()","9cb96a4e":"#  remove 'NEW' and '\/5' \ndf['rate'] = df['rate'].replace('NEW',np.NaN)\ndf['rate'] = df['rate'].replace('-',np.NaN)\ndf.dropna(how = 'any', inplace = True)\ndf['rate'] = df.loc[:,'rate'].replace('[ ]','',regex = True)\ndf['rate'] = df['rate'].astype(str)\ndf['rate'] = df['rate'].apply(lambda r: r.replace('\/5',''))\ndf['rate'] = df['rate'].apply(lambda r: float(r))","aabdeac4":"# df['rest_type'].unique() ------- all right\n# df['dish_liked'].unique()\n# df['cuisines'].unique()\n\ndf['dish_liked'] = df['dish_liked'].apply(lambda r: r.replace(\", \",\",\"))\ndf['dish_liked'] = df['dish_liked'].apply(lambda r: r.split(','))\ndf['cuisines'] = df['cuisines'].apply(lambda r: r.replace(\", \",\",\"))\ndf['cuisines'] = df['cuisines'].apply(lambda r: r.split(','))","5323f711":"df['approx_cost(for two people)'].unique()","bb64db04":"# remove comma from approx_cost\ndf['approx_cost(for two people)'] = df['approx_cost(for two people)'].str.replace(',','')\ndf['approx_cost(for two people)'] = df['approx_cost(for two people)'].astype(int)","a47a97d7":"#  dropping inessential columns\ndf.drop(['url','address','phone', 'menu_item', 'reviews_list'],axis=1,inplace=True)","541ef37a":"df['listed_in(city)'].unique()","1d724ee3":"df['location'].unique()","95392519":"#  cleaned data\ndf.head()","42e86ad6":"df.to_csv('cleaned_data.csv',index=False)","12078201":"# Analysis","9adc6c13":"\n Totallocation=df['location'].value_counts().sort_values(ascending=True)\n\n\nfig=plt.figure(figsize=(20,40))\nTotallocation.plot(kind=\"barh\",fontsize=20)\nplt.ylabel(\"Location names\",fontsize=50,color=\"green\",fontweight='bold')\nplt.title(\"LOCATION VS RESTAURANT COUNT\",fontsize=40,color=\"BLACK\",fontweight='bold')\nfor v in range(len(Totallocation)):\n    plt.text(v+Totallocation[v],v,Totallocation[v],fontsize=10,color=\"BLACK\",fontweight='bold')","d00b341a":"fig=plt.figure(figsize=(20,10))\ntemp1=df[(df['approx_cost(for two people)']<=100) & (df['rate']>4)][\"location\"].value_counts().sort_values(ascending=True)\ntemp1.plot(kind=\"barh\",fontsize=20,color=(0.4, 0.2, 0.4, 0.3),edgecolor='blue')\nplt.ylabel(\"No. of Restraunts\",fontsize=40,color=\"black\",fontweight='bold')\nplt.title(\"location-wise Most affordable Restraunts (within \u20b9100 and above 4 rating)\",fontsize=20,color=\"BLACK\",fontweight='normal')\nfor i, v in enumerate(temp1):\n    plt.text(v+0.1, i , str(v), color='blue', fontweight='medium')\n    \n","29c8af6a":"\n\nfinal_rating_list= list(arange(2.0, 5.0, 0.5))\nfinal_rating_list.append(4.8)\n\nrating_to_cost = {}\n\n\nfor rating in final_rating_list:\n    average_cost_in_rated_rest = (df[df['rate']>=rating]['approx_cost(for two people)']).mean()\n    rating_to_cost[rating]= int(average_cost_in_rated_rest)\n\nfig=plt.figure(figsize=(15,10))\n\nx_axis_values = list(arange(2.0, 5.0, 0.5))\ny_axis_values=[]\n\nfor rating in x_axis_values:\n    value=(df[df['rate']>=rating]['approx_cost(for two people)']).mean()\n    y_axis_values.append(int(value))\n    \n\ncost_plotting= list(rating_to_cost.values())\nplt.plot(final_rating_list, cost_plotting)\n\n\nfor i,j in zip(x_axis_values,y_axis_values):\n    plt.plot(i, j,'o')\n    plt.annotate(str(j),xy=(i-0.1 ,j+17))\n\n\nplt.title('Rating Vs Cost of Restaurants (Average cost of dining in a good rated restaurant)',fontsize=20,color=\"black\",fontweight='normal')\nplt.xlabel('Rating of Restaurant',fontsize=20,color=\"black\",fontweight='bold')\nplt.ylabel('Average Dining Cost for two',fontsize=20,color=\"black\",fontweight='bold')\nplt.xticks(list(arange(2.0, 5.5, 0.5)))\nplt.yticks(list(arange(500, 1400, 100)))\nplt.tight_layout()\nplt.show()","ec6691e8":"from collections import Counter\nfig=plt.figure(figsize=(15,10))\ntemp2=df['rest_type'].value_counts()[:10].sort_values(ascending=True)\ntemp2.plot(kind=\"barh\",color='#de5f73',edgecolor=\"black\")\nplt.title(\"Most In-Demand Restaurant Types\",fontsize=20,color=\"black\",fontweight='normal')\nplt.xlabel(\"no of restraunts\",fontsize=20,color=\"black\",fontweight='normal')\nfor i, v in enumerate(temp2):\n    plt.text(v+0.1, i , str(v), color='blue', fontweight='medium')","52773d85":"labels = [\"Yes\",'No']\nvalues = df['online_order'].value_counts()\n\nfig = go.Figure(data=[go.Pie(labels=labels,\n                             values=values,hole=.3)])\nfig.update_traces(textfont_size=20,\n                  marker=dict( line=dict(color='#000111', width=2)))\n\nfig.update_layout(title=\"Online delivery availability \",\n                  titlefont={'size': 20},      \n                  )\nfig.show()","9d3d0fa3":"labels = [\"Yes\",'No']\nvalues = df['book_table'].value_counts()\n\nfig = go.Figure(data=[go.Pie(labels=labels,\n                             values=values,hole=.3)])\nfig.update_traces(textfont_size=20,\n                  marker=dict( line=dict(color='#000111', width=2)))\n\nfig.update_layout(title=\"Table booking availability \",\n                  titlefont={'size': 20},      \n                  )\nfig.show()","fe33cb2e":"\n# values = df['listed_in(type)'].value_counts()\n\n# labels = values.index\n# fig = go.Figure(data=[go.Pie(labels=labels,\n#                              values=values,hole=.3)])\n# fig.update_traces(textfont_size=20,\n#                   marker=dict( line=dict(color='#000111', width=2)))\n\n# fig.update_layout(title=\"\",\n#                   titlefont={'size': 20},      \n#                   )\n# fig.show()","5f8e6eda":"df","3893535b":"cuisines = {}\n\n\ndef add_cuisines(element_list):\n    for element in element_list:\n        element = element.strip()\n        \n        if element in cuisines.keys():\n            cuisines[element] = cuisines[element]+1\n\n        else:\n            cuisines[element] = 1\n    \n\ndf.cuisines.apply(add_cuisines) #function call ------------------------------------------------------------------------------------------\n\ntop_15_cuisines = dict(sorted(cuisines.items(), key=lambda x: x[1], reverse=True)[15::-1])\nbottom_15_cuisines = dict(sorted(cuisines.items(), key=lambda x: x[1], reverse=True)[-15:])\n\n\nkeys =[]\nvalues =[]\nplotting_point=[]\n\n\nfor key in top_15_cuisines.keys():\n    keys.append(key)\n\n\nfor value in top_15_cuisines.values():\n    values.append(value)\n    plotting_point.append(' '+str(round(value*100\/len(df.cuisines),2))+'%')","f2716d00":"all_colors = list(plt.cm.colors.cnames.keys())\nc = random.choices(all_colors, k=len(keys))\n\n\nplt.figure(figsize=(16,8), dpi= 80)\nplt.scatter(keys,values,color=c)\nplt.vlines(ymin=0, ymax=values, x=keys, color=c, alpha=1, linewidth=10)\n\n\nfor i,j,k in zip(values, keys, plotting_point):\n    plt.plot( j,i, \"x\")\n    plt.annotate(str(k),xy=(j,i))\n\n\nplt.title('Top Cuisines Available in Bangalore ', fontsize=22)\nplt.xlabel('Cuisines',fontsize=20,color=\"black\",fontweight='normal')\nplt.ylabel('Percentage of Restaurant listed',fontsize=15,color=\"black\",fontweight='normal')\nplt.plot()","a59251b4":"\nLocation_data = df.filter(['listed_in(city)', 'approx_cost(for two people)', 'rate'])\nLocation_data['total_restaurant'] = 1\n\nLocation_data= Location_data.groupby('listed_in(city)').agg({'approx_cost(for two people)':'mean',\n                                                             'total_restaurant':'sum',\n                                                             'rate':'mean'\n                                                            })\nLocation_data.rate = np.round(Location_data.rate,2)\nLocation_data =Location_data.sort_values('approx_cost(for two people)', ascending=False)\n\nLocation_data['approx_cost(for two people)'] = Location_data['approx_cost(for two people)'].astype(int)\n\nLocation_data= Location_data.sort_values('approx_cost(for two people)', ascending=True)\n","0e3e38d7":"average_cost = (df[df['approx_cost(for two people)']!=0]['approx_cost(for two people)']).mean()\nmin_cost=min(df[df['approx_cost(for two people)']!=0]['approx_cost(for two people)'])\nmax_cost=max(df[df['approx_cost(for two people)']!=0]['approx_cost(for two people)'])\n\naverage_rate=(df[df['rate']!=0]['rate']).mean()\nmin_rate=min(df[df['rate']!=0]['rate'])\nmax_rate=max(df[df['rate']!=0]['rate'])","1bb70e2f":" \nLocation_data['colors_rate'] = ['red' if  x< average_rate else 'darkgreen' for x in Location_data['rate']]\n\n\nplt.figure(figsize=(10,14), dpi= 80)\nplt.scatter(Location_data['approx_cost(for two people)'], Location_data.index, s=450, alpha=.6, color=Location_data.colors_rate)\n#Annotating\nfor x, y, tex in zip(Location_data['approx_cost(for two people)'], Location_data.index, Location_data['rate']):\n    t = plt.text(x, y, round(tex, 1), horizontalalignment='center', \n                 verticalalignment='center', fontdict={'color':'white'})\n\n\n\nplt.gca().spines[\"top\"].set_alpha(.3)\nplt.gca().spines[\"bottom\"].set_alpha(.3)\nplt.gca().spines[\"right\"].set_alpha(.3)\nplt.gca().spines[\"left\"].set_alpha(.3)\n# plt.yticks(df.index, df.cars)\nplt.title('A', fontdict={'size':20})\nplt.xlabel('Price in Rupees')\nplt.grid(linestyle='--', alpha=0.5)\n# plt.xlim(-2.5, 2.5)\nplt.show()","b954b353":"#Creating a dictionary to hold the count of dishes based on the presence of dish in the best dishes column\ndishes_set = {}\n\n#Funtion to keep the dishes count\ndef find_favt_dish(dishes):\n    for dish in dishes:\n        if dish in dishes_set.keys():\n            dishes_set[dish]+=1\n        else:\n            dishes_set[dish]=1\n\ndf.dish_liked.apply(find_favt_dish)\n#Deleting nan value\n# del dishes_set['nan']\n#Sorting the dataframe \nliked_dishes_list = (sorted(dishes_set.items(), key=lambda x: x[1], reverse=True))\n","838f9c61":"top_15_dishes=pd.DataFrame(liked_dishes_list[:15],columns=['Dishes','Count'])\n# plt.barh(top_15_dishes['Dishes'],top_10_dishes['Count'])\n\n\nfig = px.bar(top_15_dishes, x=\"Dishes\", y=\"Count\", text=\"Count\")\n\nfig.update_traces(textposition='inside',marker_color='#de5f30',width=0.5)\n\nfig.update_layout(\n    height=500,\n    title_text='Top Dishes liked by People',\n    plot_bgcolor='#c3eb34'\n)\n\nfig.show()","273d4d23":"sns.set(rc = {'figure.figsize':(15,8)})\nsns.set_style('white')\ny=pd.crosstab(df.rate,df.online_order)\ny.plot(kind='bar',stacked=True)\nplt.title(\"Count of Restraunts accepting Online Orders VS ratings\",fontsize=22)\n","1c0bb93d":"## Data Preprocessing "}}