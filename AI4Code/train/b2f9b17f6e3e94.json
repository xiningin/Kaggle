{"cell_type":{"d2a14aa6":"code","b492443d":"code","13c060d8":"code","3c19d687":"code","e11dd64e":"code","2bc0fc9e":"code","086fbafe":"code","7711dce4":"code","2e6c245a":"code","ed638063":"code","e70d7e32":"code","e2e68050":"code","01eb2a98":"code","c5635ebe":"code","c2dce168":"code","011f6125":"code","e482ad08":"code","9f56f7d8":"code","8113f0dd":"code","be1b4143":"code","862e3351":"code","df9f11d2":"code","f2691745":"code","d9dc40e6":"code","299b6b60":"code","29ca88aa":"code","b88fa2fd":"code","0d960573":"code","4a3f6b17":"code","c9ad1fdb":"code","58ddb2ad":"code","2ea2bcf5":"code","5f5194e5":"code","69842451":"code","76e0cf8b":"code","6e54524f":"code","c98645f4":"code","4cb8c6f5":"markdown","3ea7da34":"markdown","eacc9dec":"markdown","004e48a7":"markdown","6eb67fd3":"markdown","4c98b6f8":"markdown","520b123c":"markdown","f734ddc3":"markdown","690c6683":"markdown","40410337":"markdown","33048da3":"markdown","4f54b8a6":"markdown","05c25183":"markdown","986307a3":"markdown","11e4a7a4":"markdown","fdcfff7f":"markdown","72baa559":"markdown","f55257b0":"markdown","cc58614a":"markdown","68c85c28":"markdown","d20c11d0":"markdown","e6900c5f":"markdown","1069ee3f":"markdown","b46d3b97":"markdown","66ea40a6":"markdown","9cd703a9":"markdown","cb7c256d":"markdown","2b2c94a0":"markdown","db367620":"markdown","f32f5595":"markdown","6225804c":"markdown","c9e9f02e":"markdown","860c3715":"markdown","004d00fa":"markdown"},"source":{"d2a14aa6":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport itertools\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/matches.csv\")\nwinners = df[df.id.isin(df.groupby(\"season\").id.max())]\nwinners[[\"season\", \"winner\"]]","b492443d":"deliveries = pd.read_csv(\"..\/input\/deliveries.csv\")\ndf\ndeliveries = deliveries.merge(df[[\"season\", \"id\"]], left_by = \"id\", right_by =\"match_id\")\ndf.groupby([\"season\", \"match_id\"]).total_runs.sum()","13c060d8":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport itertools\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/deliveries.csv\")\ndf[\"batting_team\"] = np.where((df[\"batting_team\"] == \"Rising Pune Supergiant\"), \"Rising Pune Supergiants\", df[\"batting_team\"])\ndf[\"wicket\"] = np.where(((df.player_dismissed.notnull())&(df.dismissal_kind != \"retired hurt\")&(df.dismissal_kind != \"run out\")), 1, 0)\n\ndef func(x):\n    y = x.groupby(\"bowler\").wicket.agg({\"wicket\":\"sum\"}).reset_index()\n    z = list(map(list, list(itertools.combinations(y[\"bowler\"], 2))))\n    d = pd.DataFrame(data={\"A\":z})\n    d[\"bowler\"] = d.A.map(lambda x: x[0])\n    d[\"bowler2\"] = d.A.map(lambda x: x[1])\n    d.drop(columns = \"A\", inplace = True)\n    d = pd.merge(d, y, on=\"bowler\", how = \"outer\")\n    d = d.rename(columns={\"bowler\": \"bowler1\", \"bowler2\": \"bowler\", \"wicket\":\"wickets\"})\n    d = pd.merge(d, y, on=\"bowler\", how = \"outer\")\n    d[\"total_wickets\"] = d[\"wicket\"]+d[\"wickets\"]\n    d = d.rename(columns={\"bowler\": \"bowler1\", \"bowler\": \"bowler2\"})\n    d = d.drop(columns = [\"wicket\", \"wickets\"])\n    d = d.dropna()\n    #d = d.rename(columns={})\n    return d\n    #print(d)\nbowler_wickets = df.groupby([\"match_id\", \"inning\", \"bowling_team\"])[\"bowler\", \"wicket\"].apply(lambda x: func(x)).reset_index().drop(columns = \"level_3\")\nbowler_wickets[[\"bowler1\", \"bowler2\"]] = np.sort(bowler_wickets[[\"bowler1\", \"bowler2\"]], 1)\nres = bowler_wickets.groupby([\"bowler1\", \"bowler2\"]).total_wickets.sum().reset_index().nlargest(10, \"total_wickets\")#.rename(columns={\"bowler\": \"bowler1\", \"bowler2\": \"bowler\", \"wicket\":\"wickets\"})\nres[\"bowlers\"] = res[\"bowler1\"].astype(str) + \" - \" + res[\"bowler2\"].astype(str)\n#res = res.drop(columns = [\"bowler1\", \"bowler2\"])\nres\nfig = plt.figure()\nax = plt.subplot(111)\nax.bar(res[\"bowlers\"], res[\"total_wickets\"], width=0.5)\nxlocs, xlabs = plt.xticks()\nxlocs= np.arange(0,10)\nplt.xticks(res[\"bowlers\"], res[\"bowlers\"], rotation='vertical')\nfor i, v in enumerate(res[\"total_wickets\"]):\n    plt.text(xlocs[i] - 0.25, v, str(v))\nplt.show()","3c19d687":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport itertools\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/deliveries.csv\")\nmapper = df.groupby(['match_id', 'inning']).batsman.apply(lambda x: dict(zip(x[~x.duplicated()], np.arange(1, len(x[~x.duplicated()])+1)))).reset_index(name = 'batting_position').rename(columns = {'level_2':'batsman'})\ndf = df.merge(mapper, on = ['match_id', 'inning', 'batsman'], how = 'outer')\ndf[\"batting_position\"] = df[\"batting_position\"].replace(2, 1)\ndf = df[df.is_super_over == 0]\ndf[\"wicket\"] = np.where(((df.player_dismissed.notnull())&(df.dismissal_kind != \"retired hurt\")&(df.dismissal_kind != \"run out\")), 1, 0)\ndf[\"wicket_value\"] = np.where(((df[\"batting_position\"] <= 3)&(df[\"wicket\"] == 1)), 1, 0)\ndf[\"wicket_value\"] = np.where(((df[\"batting_position\"] >= 4)&(df[\"batting_position\"] <= 7)&(df[\"wicket\"] == 1)), 0.66, df[\"wicket_value\"])\ndf[\"wicket_value\"] = np.where(((df[\"batting_position\"] > 8)&(df[\"wicket\"] == 1)), 0.33, df[\"wicket_value\"])\n\ndef func(x):\n    bowler_with_wickets = x.groupby(\"bowler\")[\"wicket\", \"wicket_value\"].sum().reset_index()\n    z = list(map(list, list(itertools.combinations(bowler_with_wickets[\"bowler\"], 2))))\n    d = pd.DataFrame(data={\"bowler1\": np.array(z)[:,0], \"bowler2\": np.array(z)[:,1]})\n    d = d.merge(bowler_with_wickets, left_on=\"bowler1\", right_on = \"bowler\", how = \"outer\").drop(columns = \"bowler\").rename(columns = {\"wicket\": \"bowler1_wickets\", \"wicket_value\":\"bowler1_value\"}).merge(bowler_with_wickets, left_on=\"bowler2\", right_on = \"bowler\", how = \"outer\").drop(columns = \"bowler\").rename(columns = {\"wicket\": \"bowler2_wickets\", \"wicket_value\":\"bowler2_value\"}).dropna()\n    d[\"total_wickets\"] = d[\"bowler1_wickets\"]+d[\"bowler2_wickets\"]\n    d[\"total_value\"] = d[\"bowler1_value\"]+d[\"bowler2_value\"]    \n    return d\n    \nbowler_wickets = df.groupby([\"match_id\", \"inning\"])[\"bowler\", \"wicket\", \"wicket_value\"].apply(lambda x: func(x)).reset_index()#.drop(columns = \"level_2\")\nbowler_wickets[[\"bowler1\", \"bowler2\"]] = np.sort(bowler_wickets[[\"bowler1\", \"bowler2\"]], 1)\nres = bowler_wickets.groupby([\"bowler1\", \"bowler2\"])[\"total_wickets\", \"total_value\"].sum().reset_index().nlargest(10, \"total_value\")#.rename(columns={\"bowler\": \"bowler1\", \"bowler2\": \"bowler\", \"wicket\":\"wickets\"}) \nfig = plt.figure()\nax = plt.subplot(111)\nax.bar(res[\"bowler1\"]+\" - \"+res[\"bowler2\"], res[\"total_wickets\"], width=0.5)\nxlocs, xlabs = plt.xticks()\nxlocs= np.arange(0,10)\nplt.xticks(res[\"bowler1\"]+\" - \"+res[\"bowler2\"], res[\"bowler1\"]+\" - \"+res[\"bowler2\"], rotation='vertical')\nfor i, v in enumerate(res[\"total_wickets\"]):\n    plt.text(xlocs[i] - 0.25, v, str(v))\nplt.show()","e11dd64e":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/deliveries.csv\")\ndf_matches = pd.read_csv(\"..\/input\/matches.csv\")\ndf_matches = df_matches.rename(columns = {\"id\":\"match_id\"})\ndf = pd.merge(df, df_matches[[\"match_id\", \"season\"]], on=\"match_id\")\ndef func(x):\n    players = pd.unique(np.concatenate((x.batsman.unique(), x.bowler.unique(), x.fielder.unique()), axis = 0))\n    runs_scored = x.groupby(\"batsman\").batsman_runs.agg({\"runs_scored\": \"sum\"}).reset_index().rename(columns = {\"batsman\":\"player\"})\n    x[\"total_runs\"] = x[\"total_runs\"] - x[\"bye_runs\"] - x[\"legbye_runs\"] - x[\"penalty_runs\"]\n    runs_given = x.groupby(\"bowler\").total_runs.agg({\"runs_given\":\"sum\"}).reset_index().rename(columns = {\"bowler\":\"player\"})\n    fielding = x.groupby(\"fielder\").fielder.agg({\"fielding\":\"count\"}).reset_index().rename(columns = {\"fielder\":\"player\"})\n    x = x[(x[\"dismissal_kind\"] != \"run out\") & (x[\"dismissal_kind\"] != \"obstructing the field\") & (x[\"dismissal_kind\"] != \"retired hurt\")]\n    wickets = x.groupby(\"bowler\").player_dismissed.agg({\"wickets\":\"count\"}).reset_index().rename(columns = {\"bowler\":\"player\"})\n    res = pd.DataFrame(data = {\"player\":players}, index = np.arange(1, len(players)+1))\n    res = res.dropna()\n    res = pd.merge(res, runs_scored, on=\"player\", how = \"outer\")\n    res = pd.merge(res, runs_given, on=\"player\", how = \"outer\")\n    res = pd.merge(res, fielding, on=\"player\", how = \"outer\")\n    res = pd.merge(res, wickets, on=\"player\", how = \"outer\")\n    res = res.fillna(0)\n    return res\n    \nimpact = df.groupby(\"match_id\").apply(lambda x: func(x)).reset_index().drop(columns = \"level_1\")\nimpact[\"points\"] = (impact[\"runs_scored\"]\/30 + impact[\"wickets\"] - impact[\"runs_given\"]\/20 + impact[\"fielding\"]\/2)\nimpact.nlargest(20, \"points\")","2bc0fc9e":"import pandas as pd\nimport numpy as np\nimport warnings\n\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndeliveries = pd.read_csv(\"..\/input\/deliveries.csv\")\nall_players = pd.unique(np.concatenate((deliveries[\"batsman\"].unique(), deliveries[\"bowler\"].unique(), deliveries[\"fielder\"].unique()), axis = 0))\nplayers = pd.DataFrame(data = {\"players\": all_players.tolist()}, index = np.arange(1, len(all_players.tolist())+1))\nbatters = deliveries.groupby(\"batsman\").batsman_runs.sum().reset_index().rename(columns = {\"batsman\":\"players\", \"batsman_runs\":\"Runs\"})\nfielders = deliveries.groupby(\"fielder\").dismissal_kind.agg(\"count\").reset_index().rename(columns = {\"fielder\":\"players\", \"dismissal_kind\":\"fielding\"})\ndeliveries = deliveries[(deliveries[\"dismissal_kind\"] != \"run out\") & (deliveries[\"dismissal_kind\"] != \"obstructing the field\") & (deliveries[\"dismissal_kind\"] != \"retired hurt\")]\nbowlers = deliveries.groupby(\"bowler\")[\"player_dismissed\"].agg({\"wickets\":\"count\"}).reset_index().rename(columns = {\"bowler\":\"players\"})\nplayers = pd.merge(players, batters, on = \"players\", how = \"outer\")\nplayers = pd.merge(players, fielders, on = \"players\", how = \"outer\")\nplayers = pd.merge(players, bowlers, on = \"players\", how = \"outer\").fillna(0)\nplayers[\"points\"] = np.round(players[\"Runs\"]\/30 + players[\"wickets\"] + players[\"fielding\"], 2)\nplayers.nlargest(10,\"points\")","086fbafe":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/matches.csv\")\ndf = df_matches.rename(columns = {\"id\":\"match_id\"})\n\ndef func(x):\n    return x.sort_values(by = \"matches\", ascending=False)#.nlargest(3, \"matches\")\n\nz = df.groupby([\"winner\", \"venue\"])[\"match_id\"].count().reset_index().rename(columns = {\"winner\":\"team\", \"match_id\":\"matches\"})\nz = z.groupby(\"team\").apply(lambda x: func(x)).drop([\"team\"], axis = 1).reset_index().drop(columns = [\"level_1\"])\n\ndef func1(x):\n    teams = np.concatenate((x.team1.values, x.team2.values), axis = 0)\n    return pd.Series(teams).value_counts().reset_index()\n\ny = df.groupby([\"venue\"])[\"match_id\", \"team1\", \"team2\"].apply(lambda x: func1(x)).reset_index().drop(columns = [\"level_1\"]).rename(columns = {\"index\":\"team\", 0:\"played\"})\ny = y.groupby(\"team\")[\"venue\", \"played\"].apply(lambda x: x.sort_values(by = \"played\", ascending=False)).reset_index().drop(columns = [\"level_1\"])\n\n\nmgrd_df = pd.merge(z, y, on = [\"team\", \"venue\"], how = \"outer\")\nmgrd_df.fillna(0, inplace = True)\nmgrd_df[\"win_pct\"] = np.round(mgrd_df[\"matches\"]\/mgrd_df[\"played\"]*100, 2)\nmgrd_df = mgrd_df.sort_values(by = [\"team\", \"matches\"], ascending = [True, False])\n#mgrd_df.to_csv(\"temp.csv\",  sep=',', encoding='utf-8')\nmgrd_df[mgrd_df[\"played\"] > 10].sort_values(by = \"win_pct\", ascending = False)","7711dce4":"from matplotlib import pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\ndf = pd.read_csv(\"..\/input\/matches.csv\")\nplt.subplots(figsize = (10,6))\nsns.countplot(x=\"season\", hue = \"toss_decision\", data = df)\ndf.groupby(\"season\")[\"toss_decision\"].value_counts().unstack()","2e6c245a":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndeliveries = pd.read_csv(\"..\/input\/deliveries.csv\")\nmapper = deliveries.groupby(['match_id', 'inning']).batsman.apply(lambda x: dict(zip(x[~x.duplicated()], np.arange(1, len(x[~x.duplicated()])+1)))).reset_index(name = 'batting_position').rename(columns = {'level_2':'batsman'})\ndeliveries_position = deliveries.merge(mapper, on = ['match_id', 'inning', 'batsman'], how = 'outer')\ndeliveries_position[\"batting_position\"] = deliveries_position[\"batting_position\"].replace(2, 1)\ntemp = deliveries_position.groupby([\"batting_position\", \"batsman\"])[\"batsman_runs\"].agg(\"sum\")\nresult = temp.groupby(level=0).nlargest(3).reset_index(level=0, drop=True).reset_index()\nresult","ed638063":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/matches.csv\")\nplt.subplots(figsize = (10,6))\numps = np.concatenate((df[\"umpire1\"].values, df[\"umpire2\"].values), axis = 0)\nres = pd.Series(umps).value_counts().reset_index().rename(columns = {\"index\": \"Umpire\", 0: \"Matches\"})\nres.nlargest(10, \"Matches\")","e70d7e32":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\n\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/matches.csv\")\ndf[\"venue\"] = np.where((df[\"venue\"] == \"Punjab Cricket Association IS Bindra Stadium, Mohali\"), \"Punjab Cricket Association Stadium, Mohali\", df[\"venue\"])\ngrounds = df[\"venue\"].value_counts().reset_index().rename(columns = {\"index\": \"venues\", \"venue\": \"Matches\"})\ngrounds.nlargest(10, \"Matches\")","e2e68050":"import pandas as pd\nimport numpy as np\nimport warnings\n\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/matches.csv\")\ndf[\"venue\"] = np.where((df[\"venue\"] == \"Punjab Cricket Association IS Bindra Stadium, Mohali\"), \"Punjab Cricket Association Stadium, Mohali\", df[\"venue\"])\ncity = df[\"city\"].value_counts().reset_index().rename(columns = {\"index\": \"city\", \"city\": \"matches\"})\ncity.nlargest(10, \"matches\")","01eb2a98":"import pandas as pd\nimport numpy as np\nimport warnings\n\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/matches.csv\")\ndf[\"venue\"] = np.where((df[\"venue\"] == \"Punjab Cricket Association IS Bindra Stadium, Mohali\"), \"Punjab Cricket Association Stadium, Mohali\", df[\"venue\"])\n#res = df[[\"city\", \"venue\"]].groupby([\"city\"]).venue.nunique().reset_index().sort_values(by = \"venue\", ascending = False)\n#res[res.venue>1]\ndef func(x):\n    if(len(x.venue.unique()) > 1):\n        return pd.DataFrame(data = {\"venues\": x.venue.unique()}, index = np.arange(1, len(x.venue.unique())+1))\n    \nres = df[[\"city\", \"venue\"]].groupby([\"city\"]).apply(lambda x: func(x)).reset_index(level = 1, drop = True)\nres","c5635ebe":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndeliveries = pd.read_csv(\"..\/input\/deliveries.csv\")\ndef func1(x):\n    All = pd.DataFrame(data = {\"Player\": pd.unique(np.concatenate((x.batsman.unique(), x.bowler.unique(), x.fielder.unique())))})\n    return All\n\nmapper = deliveries.groupby('match_id')[\"batsman\", \"bowler\", \"fielder\"].apply(lambda x: func1(x)).reset_index().drop([\"level_1\"], axis = 1).dropna()\nmapper.groupby(\"Player\").match_id.count().reset_index().rename(columns = {\"match_id\":\"matches\"}).nlargest(10,\"matches\")","c2dce168":"import pandas as pd\nimport numpy as np\nimport warnings\n\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/matches.csv\")\ndf.groupby(\"player_of_match\").id.agg(\"count\").reset_index().rename(columns = {\"id\":\"mom\"}).nlargest(10, \"mom\")\n","011f6125":"import pandas as pd\nimport numpy as np\nimport warnings\n\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/matches.csv\")\ndf.groupby([\"player_of_match\", \"season\"]).id.agg(\"count\").reset_index().rename(columns = {\"id\":\"mom\"}).nlargest(10, \"mom\")\n","e482ad08":"import pandas as pd\nimport numpy as np\nimport warnings\n\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/matches.csv\")\ndf.groupby(\"season\").apply(lambda x: x.player_of_match.value_counts().nlargest(1)).reset_index().rename(columns = {\"level_1\":\"player\"})","9f56f7d8":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf1 = pd.read_csv(\"..\/input\/matches.csv\")\ndf = pd.read_csv(\"..\/input\/deliveries.csv\")\ndf1 = df_matches.rename(columns = {\"id\":\"match_id\"})\ndf = pd.merge(df, df1[[\"match_id\", \"season\"]], on = \"match_id\")\ndf = df[(df[\"is_super_over\"] != 1)]\ndef func(x):\n    a = x.total_runs.sum()\/(x.match_id.nunique()*2)\n    b = x.total_runs.where(x.inning == 1).sum()\/(x.match_id.nunique())\n    c = x.total_runs.where(x.inning == 2).sum()\/(x.match_id.nunique())\n    res = pd.DataFrame(data = {\"Match\":a, \"1st innings\":b, \"2nd innings\":c}, index = [1])\n    return res\nresult = df.groupby(\"season\")[\"inning\", \"total_runs\", \"match_id\"].apply(lambda x: func(x)).reset_index().drop(columns = \"level_1\")\nresult","8113f0dd":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\nmatches = pd.read_csv(\"..\/input\/matches.csv\")\ndeliveries = pd.read_csv(\"..\/input\/deliveries.csv\")\nmatches = matches.rename(columns = {\"id\":\"match_id\"})\ndeliveries = pd.merge(deliveries, matches[[\"match_id\", \"season\"]], on = \"match_id\")\ndeliveries = deliveries[(deliveries[\"is_super_over\"] != 1)]\ndeliveries = deliveries[[\"match_id\", \"batting_team\" ,\"season\", \"inning\", \"over\", \"ball\", \"total_runs\", \"player_dismissed\"]]\npowerplay = deliveries[(deliveries.over <= 6)]\nmiddleovers = deliveries[(deliveries.over >= 7) & (deliveries.over <= 14)]\nslogovers = deliveries[(deliveries.over >= 15)]\na = powerplay.groupby([\"season\", \"batting_team\"])[\"total_runs\", \"match_id\", \"player_dismissed\"].apply(lambda x: pd.DataFrame(data = {\"Runrate(1-6)\" : np.round(x.total_runs.sum()\/(x.match_id.nunique()*6),2), \"wickets(1-6)\":np.round(x.player_dismissed.dropna().count()\/(x.match_id.nunique()), 0)}, index = np.arange(1))).reset_index().drop(\"level_2\", axis = 1)\nb = middleovers.groupby([\"season\", \"batting_team\"])[\"total_runs\", \"match_id\", \"player_dismissed\"].apply(lambda x: pd.DataFrame(data = {\"Runrate(7-14)\" : np.round(x.total_runs.sum()\/(x.match_id.nunique()*8),2), \"wickets(7-14)\":np.round(x.player_dismissed.dropna().count()\/(x.match_id.nunique()), 0)}, index = np.arange(1))).reset_index().drop(\"level_2\", axis = 1)\nc = slogovers.groupby([\"season\", \"batting_team\"])[\"total_runs\", \"match_id\", \"player_dismissed\"].apply(lambda x: pd.DataFrame(data = {\"Runrate(15-20)\" : np.round(x.total_runs.sum()\/(x.match_id.nunique()*6),2), \"wickets(15-20)\":np.round(x.player_dismissed.dropna().count()\/(x.match_id.nunique()), 0)}, index = np.arange(1))).reset_index().drop(\"level_2\", axis = 1)\nreport = pd.merge(a, b, on = ([\"season\", \"batting_team\"]))\nreport = pd.merge(report, c, on = ([\"season\", \"batting_team\"]))\nreport.groupby(\"season\").apply(lambda x: x.sort_values(by = \"wickets(7-14)\", ascending=False)[:5]).drop(columns=\"season\")","be1b4143":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/matches.csv\")\ndf = df.rename(columns = {\"id\":\"match_id\"})\nz = df.groupby(\"winner\")[\"toss_winner\", \"winner\"].apply(lambda x: np.where(x.toss_winner == x.winner, 1, 0).sum()).reset_index().rename(columns = {\"winner\":\"team\", 0:\"toss and match wins\"})\ny = df.groupby(\"toss_winner\").apply(lambda x: x.toss_winner.count()).reset_index().rename(columns = {\"toss_winner\":\"team\", 0:\"toss wins\"})\nteam1 = df.groupby(\"team1\").match_id.count().reset_index().rename(columns = {\"team1\":\"team\", \"match_id\":\"a\"})\nteam2 = df.groupby(\"team2\").match_id.count().reset_index().rename(columns = {\"team2\":\"team\", \"match_id\":\"b\"})\nmatches_played = pd.merge(team1, team2, on = \"team\")\nmatches_played[\"played\"] = matches_played[\"a\"] + matches_played[\"b\"]\nmatches_played.drop(columns = [\"a\", \"b\"], inplace = True)\nz = pd.merge(matches_played, z, on = \"team\")\nz = pd.merge(z, y, on = \"team\")\nz[\"toss_win_pct\"] = (z[\"toss wins\"]\/z[\"played\"])*100\nz[\"toss_win_con\"] = (z[\"toss and match wins\"]\/z[\"toss wins\"])*100\nz[z.played>50].sort_values(by = [\"toss_win_con\", \"played\"], ascending=False)","862e3351":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/matches.csv\")\ndef func(x):\n    matches_played = x.groupby(\"team1\").id.agg({\"match\":\"count\"})[\"match\"] + x.groupby(\"team2\").id.agg({\"match\":\"count\"})[\"match\"]\n    matches_played = matches_played.reset_index().rename(columns = {\"team1\":\"team\"})\n    won_batting_first = x.groupby(\"winner\").apply(lambda x: np.count_nonzero(x.win_by_runs)).reset_index().rename(columns = {\"winner\":\"team\", 0:\"won batting 1st\"})\n    won_chasing = x.groupby(\"winner\").apply(lambda x: np.count_nonzero(x.win_by_wickets)).reset_index().rename(columns = {\"winner\":\"team\", 0:\"won chasing\"})\n    res = pd.merge(matches_played, won_batting_first, on = \"team\")\n    res = pd.merge(res, won_chasing, on = \"team\")\n    res[\"wins\"] = res[\"won batting 1st\"] + res[\"won chasing\"] \n    return res.sort_values(by = \"wins\", ascending = False)[:4]\ndf.groupby(\"season\").apply(lambda x: func(x))","df9f11d2":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/deliveries.csv\")\nz = df.groupby(\"batsman\")[\"batsman_runs\"].apply(lambda x: x.value_counts()).unstack().reset_index().fillna(0)\nz[\"Runs\"] = z[1] + z[2]*2 + z[3]*3 + z[4]*4 + z[5]*5 + z[6]*6\nz[\"Balls\"] = z[[0,1,2,3,4,5,6]].sum(1)\nz[\"bndry_pct\"] = np.round((z[4]*4 + z[6]*6)\/z[\"Runs\"]*100, 2)\nz[\"1s-2s_pct\"] = np.round((z[1]+z[2]*2)\/z[\"Runs\"]*100, 2)\nz[\"dots_pct\"] = np.round(z[0]\/z[\"Runs\"]*100, 2)\nz.fillna(0, inplace=True)\n#z.sort_values(by = [\"Runs\", \"dots_pct\"], ascending = [False, False])\n#z.nlargest(20, \"Runs\").nlargest(20, \"dots_pct\")\nz.nlargest(10, \"Runs\")#.nlargest(20, \"bndry_pct\")","f2691745":"import pandas as pd\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/deliveries.csv\")\nd1 = df.groupby([\"batsman\"])[\"batsman_runs\"].agg({\"runs\":\"sum\"}).reset_index()\nd2 = df.groupby(\"player_dismissed\").player_dismissed.agg({\"out\": \"count\"}).reset_index().rename(columns = {\"player_dismissed\":\"batsman\"})\nd3 = df.groupby([\"batsman\"])[\"batsman\"].agg({\"balls\":\"count\"}).reset_index()\ndf2 = pd.merge(d1, d2, on = \"batsman\", how = \"outer\").fillna(0)\ndf2 = pd.merge(df2, d3, on = \"batsman\", how = \"outer\").fillna(0)\ndf2 = df2[df2.runs >= 2000] #minimum 2000 runs\ndf2[\"Average\"] = (df2.runs\/df2.out)\ndf2[\"Strike_Rate\"] = (df2.runs\/df2.balls)*100\ndf2[[\"batsman\", \"Average\", \"Strike_Rate\"]].nlargest(10, \"Average\")","d9dc40e6":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndeliveries = pd.read_csv(\"..\/input\/deliveries.csv\")\nmapper = deliveries.groupby(['match_id', 'inning']).batsman.apply(lambda x: dict(zip(x[~x.duplicated()], np.arange(1, len(x[~x.duplicated()])+1)))).reset_index(name = 'batting_position').rename(columns = {'level_2':'batsman'})\ndeliveries_position = deliveries.merge(mapper, on = ['match_id', 'inning', 'batsman'], how = 'outer')\ndeliveries_position = deliveries_position[(deliveries_position.batting_position == 8) |(deliveries_position.batting_position == 9)\n                                         |(deliveries_position.batting_position == 10) | (deliveries_position.batting_position == 11)]\nasBatsman = deliveries_position.groupby([\"batsman\", \"batting_position\"]).apply(lambda x: pd.DataFrame(data = {\"Runs\": x.batsman_runs.sum(), \"Matches played\":x.match_id.nunique()}, index = [1])).reset_index().drop(columns = \"level_2\")\nasBatsman.nlargest(10, \"Runs\")                                                                              \n#print(deliveries_position)","299b6b60":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/deliveries.csv\")\nmapper = deliveries.groupby(['match_id', 'inning']).batsman.apply(lambda x: dict(zip(x[~x.duplicated()], np.arange(1, len(x[~x.duplicated()])+1)))).reset_index(name = 'batting_position').rename(columns = {'level_2':'batsman'})\ndeliveries_position = deliveries.merge(mapper, on = ['match_id', 'inning', 'batsman'], how = 'outer')\ndeliveries_position[\"batting_position\"] = np.where((deliveries_position[\"batting_position\"] == 2), 1, deliveries_position[\"batting_position\"])\ndeliveries_position = deliveries_position[(deliveries_position.batting_position == 1)]\nasBatsman = deliveries_position.groupby([\"batsman\", \"batting_position\"]).apply(lambda x: pd.DataFrame(data = {\"Runs\": x.batsman_runs.sum(), \"Matches played\":x.match_id.nunique()}, index = [1])).reset_index().drop(columns = \"level_2\")\nasBatsman[[\"batsman\", \"Runs\", ]].nlargest(10, \"Runs\")                                                                     ","29ca88aa":"import pandas as pd\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/deliveries.csv\")\ndf.groupby(\"batsman\")[\"batsman_runs\"].agg({\"runs\":\"sum\"}).nlargest(10, \"runs\")","b88fa2fd":"import pandas as pd\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/deliveries.csv\")\ndf = df[df.inning == 2]\ndf.groupby([\"batsman\"])[\"batsman_runs\"].agg({\"runs\":\"sum\"}).nlargest(10, \"runs\")","0d960573":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf_deliv = pd.read_csv(\"..\/input\/deliveries.csv\")\ndf_match = pd.read_csv(\"..\/input\/matches.csv\")\ndf_match = df_match.rename(columns = {\"id\":\"match_id\"})\ndf_deliv = df_deliv[[\"match_id\", \"batting_team\", \"batsman\", \"batsman_runs\"]]\ndf_deliv = pd.merge(df_deliv, df_match[[\"match_id\", \"winner\"]], on = \"match_id\")\ndf_deliv = df_deliv.drop(df_deliv[df_deliv.batsman_runs == 0].index)\ndf_deliv = df_deliv[df_deliv[\"batting_team\"] == df_deliv[\"winner\"]]\ndf_deliv.groupby(\"batsman\").batsman_runs.agg({\"runs\":\"sum\"}).nlargest(10, \"runs\")","4a3f6b17":"import pandas as pd\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/deliveries.csv\")\ndf = df[[\"batsman\", \"batsman_runs\"]]\ndef func(x):\n    if 6 not in x.batsman_runs.unique():\n        return pd.DataFrame(data = {\"Batsman\": x.batsman.unique(), \"Runs\":x.batsman_runs.sum()}, index=[1])\n\ndf.groupby(\"batsman\").apply(lambda x: func(x)).reset_index().drop(columns = [\"batsman\", \"level_1\"]).nlargest(10, \"Runs\")","c9ad1fdb":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/deliveries.csv\")\ndf[\"bowling_team\"] = np.where((df[\"bowling_team\"] == \"Rising Pune Supergiants\"), \"Rising Pune Supergiant\", df[\"bowling_team\"])\nx = df.groupby([\"bowling_team\", \"batsman\"])[\"batsman_runs\"].agg(\"sum\")\nx.groupby(level = 0).nlargest(1).reset_index(level=0, drop = True).reset_index().sort_values(\"batsman_runs\", ascending = False)","58ddb2ad":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndeliveries = pd.read_csv(\"..\/input\/deliveries.csv\")\nmapper = deliveries.groupby(['match_id', 'inning']).batsman.apply(lambda x: dict(zip(x[~x.duplicated()], np.arange(1, len(x[~x.duplicated()])+1)))).reset_index(name = 'batting_position').rename(columns = {'level_2':'batsman'})\ndeliveries_position = deliveries.merge(mapper, on = ['match_id', 'inning', 'batsman'], how = 'outer')\ndeliveries_position[\"batting_position\"] = np.where((deliveries_position[\"batting_position\"] == 2), 1, deliveries_position[\"batting_position\"])\ndeliveries_position = deliveries_position[(deliveries_position.batting_position == 1)]\ndeliveries_position[['batsman', 'non_striker']] = np.sort(deliveries_position[['batsman', 'non_striker']])\ndeliveries_position.groupby(['batsman', 'non_striker']).batsman_runs.sum().reset_index().nlargest(10, \"batsman_runs\")","2ea2bcf5":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf1 = pd.read_csv(\"..\/input\/deliveries.csv\")\ndf1[[\"batsman\", \"non_striker\"]] = np.sort(df1[[\"batsman\", \"non_striker\"]], 1)\nmapper = df1.groupby([\"batsman\", \"non_striker\"]).batsman_runs.agg({\"runs\":\"sum\"})\nmapper.nlargest(10, \"runs\")","5f5194e5":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndeliveries = pd.read_csv(\"..\/input\/deliveries.csv\")\ndeliveries[\"bowler_runs\"] = deliveries[\"total_runs\"] - deliveries[\"bye_runs\"] - deliveries[\"legbye_runs\"] - deliveries[\"penalty_runs\"]\nRuns_given = deliveries.groupby(\"bowler\").bowler_runs.agg({\"Runs\":\"sum\", \"Balls\":\"count\"})\ndeliveries = deliveries[(deliveries[\"dismissal_kind\"] != \"run out\") & (deliveries[\"dismissal_kind\"] != \"obstructing the field\") & (deliveries[\"dismissal_kind\"] != \"retired hurt\")]\nbowlers = deliveries.groupby(\"bowler\")[\"player_dismissed\"].agg({\"wickets\":\"count\"})\n\nbowlers = pd.merge(Runs_given, bowlers, how = \"outer\", left_index = True, right_index = True)\nbowlers[\"overs\"] = (np.round(bowlers[\"Balls\"]\/6, 0).astype(int)).astype(str) + \".\" +(bowlers[\"Balls\"]%6).astype(str)\nbowlers[\"strike_rate\"] = np.round(bowlers.Balls\/bowlers.wickets, 2)\nbowlers[\"Average\"] = np.round(bowlers.Runs\/bowlers.wickets, 2)\nbowlers[\"Economy\"] = np.round(bowlers.Runs\/(bowlers.Balls\/6), 2)\nbowlers = bowlers.drop(columns = \"Balls\")\n#bowlers.sort_values(by = [\"wickets\", \"Economy\"], ascending = [False, True])\nbowlers.nlargest(10, \"wickets\")","69842451":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/deliveries.csv\")\ndf = df[(df[\"is_super_over\"] != 1)]\ndf[\"bowler_runs\"] = df[\"total_runs\"] - df[\"bye_runs\"] - df[\"legbye_runs\"] - df[\"penalty_runs\"]\ndf[\"legitimate_balls\"] = np.where(((df.noball_runs == 0)&(df.wide_runs == 0)), 1, 0)\nd1 = df.groupby([\"match_id\", \"bowler\"])[\"bowler_runs\"].agg(\"sum\").reset_index().rename(columns = {\"bowler_runs\":\"runs conceded\"})\nd  = df.groupby([\"match_id\", \"bowler\"])[\"legitimate_balls\"].agg(\"sum\").reset_index().rename(columns = {\"legitimate_balls\":\"balls\"})\ndf = df[(df[\"dismissal_kind\"] != \"run out\") & (df[\"dismissal_kind\"] != \"obstructing the field\") & (df[\"dismissal_kind\"] != \"retired hurt\")]\nd2 = df.groupby([\"match_id\", \"bowler\"])[\"player_dismissed\"].agg(\"count\").reset_index().reset_index().rename(columns = {\"player_dismissed\":\"wickets\"})\ndf3 = pd.merge(d1, d2, on = [\"match_id\", \"bowler\"], how = \"outer\").fillna(0).drop(columns = \"index\")\ndf3 = pd.merge(df3, d, on = [\"match_id\", \"bowler\"], how = \"outer\").fillna(0)#.drop(columns = \"index\")\ndf3[\"wickets\"] = df3[\"wickets\"].astype(int)\ndf3[\"overs\"] = ((df3[\"balls\"]\/6).astype(int)).astype(str) + \".\" +(df3[\"balls\"]%6).astype(str)\ndf3.drop(columns = [\"match_id\", \"balls\"], axis = 1, inplace = True)\ndf3.nlargest(10, \"wickets\")","76e0cf8b":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport itertools\nimport warnings\nwarnings.simplefilter(action = \"ignore\", category = FutureWarning)\n\ndf = pd.read_csv(\"..\/input\/deliveries.csv\")\ndf_matches = pd.read_csv(\"..\/input\/matches.csv\")\ndf = df.merge(df_matches[[\"id\", \"season\", \"venue\"]], left_on = \"match_id\", right_on = \"id\").drop(columns = \"id\")\ndf = df[df.is_super_over == 0]\ndf[\"batting_team\"] = np.where((df[\"batting_team\"] == \"Rising Pune Supergiant\"), \"Rising Pune Supergiants\", df[\"batting_team\"])\ndf[\"venue\"] = np.where((df[\"venue\"] == \"Punjab Cricket Association IS Bindra Stadium, Mohali\"), \"Punjab Cricket Association Stadium, Mohali\", df[\"venue\"])\ndf[\"score\"] = df.groupby([\"match_id\", \"inning\"]).total_runs.cumsum()\ndf[\"balls\"] = np.where(((df.wide_runs==0)&(df.noball_runs==0)), 1, 0)\ndf[\"balls_new\"] = df.groupby([\"match_id\", \"inning\"]).balls.cumsum()\ndf[\"run_rate\"] = np.round((df[\"score\"]\/df[\"balls_new\"])*6,2)\n#print(df.total_runs.sum()\/(2*df.match_id.nunique()))\n#par_score = df.groupby([\"venue\", \"season\"]).apply(lambda x: int((x.total_runs.sum()\/x.match_id.nunique())\/2)).unstack().fillna(0)\n#par_score\n","6e54524f":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv(\"..\/input\/matches.csv\")\nwinners = df[df.id.isin(df.groupby(\"season\").id.max())]\nwinners[[\"season\", \"winner\"]]","c98645f4":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv(\"..\/input\/deliveries.csv\")\ndf2 = pd.read_csv(\"..\/input\/matches.csv\")\ndf = df.merge(df2[[\"season\", \"id\"]], how = \"outer\", right_on = \"id\", left_on = \"match_id\")\ndf = df[df.batsman_runs == 6]\nsns.countplot(x = \"season\", data = df)\ndf.groupby(\"season\").batsman_runs.count()","4cb8c6f5":"**Most runs as opener**","3ea7da34":"Most man of the match awards in a season","eacc9dec":"**Most successful bowlers in IPL**","004e48a7":"**Most Useful players in IPL over the years**\n\nplayers are being given points as per below table\n* 1 point    = every 30 runs scored\n* 1 point    = every wicket taken\n* 1 point = every fielding effort in a dismmisal","6eb67fd3":"**Team Run Rate**\n\nRunrate of teams in different phases of the match like powerplay, middle overs and slog overs with wickets lost.","4c98b6f8":"**Toss is the Boss**\n\nTeams winning the toss and winning the match as well.\n* toss_win_pct - percentage of toss wins in total matches played\n* toss_win_con - percentage of matches won after winning the toss.","520b123c":"**Man of the Match**\n\nPlayers with most man of the match awards","f734ddc3":"**Best opening partners**","690c6683":"**Most matches played by a player**","40410337":"**Venues**\n\nMost matches at a stadium\n","33048da3":"**Most runs in Run chases**","4f54b8a6":"**Runs per match in each IPL season**","05c25183":"**Best bowling Combinations**","986307a3":"**Most experienced IPL umpires**","11e4a7a4":"**Top run getters in IPL**","fdcfff7f":"**Highest run getter against each team**","72baa559":"**High impact players**\n\nImpact of a player on a particular match has been calucated based on below parameters\n* 1 point    = every 30 runs scored\n* 1 point    = every wicket taken\n* 0.5 point = every fielding effort in a dismmisal\n* -1 point   = every 20 runs given by a bowler","f55257b0":"Most matches in a city","cc58614a":"**Teams wins batting first and chasing in each seasons**\n\nTop 4 teams in each has been displayed in terms of no. of wins","68c85c28":"**Batsman records**\nNo of runs scored in singles, doubles, boundaries and dots by most successful IPL run getters.","d20c11d0":"Best averages and strike rate for players with more than 2000 runs in IPL","e6900c5f":"**Best batting partners in IPL**","1069ee3f":"Cities with more than 1 stadium\n","b46d3b97":"**IPL season winners**","66ea40a6":"**Most Useful tailenders**","9cd703a9":"**Best batsman in each batting position**\n\nTop 3 batsmen has been displayed with most runs in each batting position","cb7c256d":"**Most runs in wins**","2b2c94a0":"**Team win percentange at different venues**","db367620":"Most man of the match awarrds in each season","f32f5595":"**Most runs without hiting a six in IPL**","6225804c":"**Best bowling performances**","c9e9f02e":"**Par score per season**","860c3715":"**No. of matches won batting first or chasing over all seasons**","004d00fa":"Cricket has always been my favourite sport and being a data science enthusiast playing around with this dataset to get greater insights has been fun all over."}}