{"cell_type":{"4fde8ffd":"code","b2109683":"code","9c1b2bf0":"code","8ac1c78e":"code","6b594bca":"code","c9355907":"code","bdc3c180":"code","6926ef31":"code","53dc32ca":"code","744d1cf4":"code","0482db62":"code","eba0a41a":"code","06e11119":"code","7ddd97c2":"code","d4f1d49d":"code","3ac3b119":"code","3e9a6b8c":"code","b0f558df":"code","168f7773":"code","731ca19c":"code","33620dec":"code","844a9c85":"code","a340fead":"code","428b9224":"code","f07f8f83":"code","781d1686":"code","60b8b69e":"code","afb22fdf":"code","9094af07":"code","145aec8d":"code","9bbeb8b8":"code","b285b32e":"code","0a2425ef":"code","c1df3883":"code","a07388d5":"code","1071dd9c":"code","5c9b56a7":"code","ee6412e8":"code","0748a79e":"code","a9bd6055":"code","3c9ddfd7":"code","933fb5b6":"code","cc932a1d":"code","b8627e7a":"code","a41fe118":"markdown"},"source":{"4fde8ffd":"# Import Libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","b2109683":"# Load the dataset\ntitanic = pd.read_csv('..\/input\/titanic\/train.csv')\n\n# Print the first 5 rows of the data\ntitanic.head()","9c1b2bf0":"# Count the number of rows and columns in the data set\ntitanic.shape","8ac1c78e":"# Create a class column using pclass\ntitanic['Class'] = titanic['Pclass'].map({1:'First', 2:'Second', 3:'Third'})\ntitanic","6b594bca":"# Get some statistics\ntitanic.describe()","c9355907":"# Get a count of the number of survivors\ntitanic['Survived'].value_counts()","bdc3c180":"# Visualize the count of survivors\nsns.countplot(x='Survived', data=titanic);","6926ef31":"titanic.columns","53dc32ca":"# Visualize the count of survivors for columns 'sex', 'pclass', 'sibsp', 'parch', 'embarked'\n\ncols = ['Sex', 'Class', 'SibSp', 'Parch', 'Embarked']\n\nfor col in cols:\n    sns.countplot(x=col, data=titanic, hue='Survived');\n    plt.title(col)\n    plt.legend(loc='upper right')\n    plt.show()","744d1cf4":"# Look at survival rate by sex\ntitanic.groupby('Sex')[['Survived']].mean()","0482db62":"# Look at survival rate by sex and class\ntitanic.pivot_table('Survived', index='Sex', columns='Class')","eba0a41a":"# Look at survival rate by sex and class visually\ntitanic.pivot_table('Survived', index='Sex', columns='Class').plot();","06e11119":"# Plot the survival rate of each class\nsns.barplot(x='Class', y='Survived', data=titanic);","7ddd97c2":"# Look at survival rate by sex, age and class\nage = pd.cut(titanic['Age'], [0, 18, 80])\ntitanic.pivot_table('Survived', ['Sex', age], 'Class')","d4f1d49d":"# Plot the prices paid of each class\nsns.scatterplot(x='Fare', y='Class', data=titanic, color='purple', label='Passenger Paid');\nplt.title('Price of each class');","3ac3b119":"# Count empty values in each column\ntitanic.isna().sum()","3e9a6b8c":"# Look at all values in each column and get a count\n\ncols = ['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Class', 'Embarked']\n\nfor col in cols:\n    print(titanic[col].value_counts())\n    print()","b0f558df":"# Drop the columns\ntitanic.drop(['Cabin', 'Class', 'PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)","168f7773":"# Remove rows with missing values\ntitanic.dropna(subset=['Embarked', 'Age'], inplace=True)","731ca19c":"# Count the new number of rows and columns in the data set\ntitanic.shape","33620dec":"# Look at the data types\ntitanic.dtypes","844a9c85":"# Print unique values in the columns\nprint(titanic['Sex'].unique())\nprint(titanic['Embarked'].unique())","a340fead":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\n# Encode the sex column\ntitanic.iloc[:, 2] = le.fit_transform(titanic.iloc[:, 2].values)\n\n# Encode the embarked column\ntitanic.iloc[:, 7] = le.fit_transform(titanic.iloc[:, 7].values)","428b9224":"# Print unique values in the columns\nprint(titanic['Sex'].unique())\nprint(titanic['Embarked'].unique())","f07f8f83":"# Look at the data types\ntitanic.dtypes","781d1686":"# Split the data into independent 'X' and dependent 'Y' variables\n\nX = titanic.iloc[:, 1:8].values\ny = titanic.iloc[:, 0].values","60b8b69e":"from sklearn.model_selection import train_test_split\n\n# Split the dataset into 80% training and 20% testing\nX_train, X_test, y_train,y_test = train_test_split(X, y, test_size=0.2, random_state=0)","afb22fdf":"# Scale the data\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","9094af07":"# Create a function with many machine learning models\ndef models(X_train, y_train):\n    \n    # Use logistic regression\n    from sklearn.linear_model import LogisticRegression\n    log = LogisticRegression(random_state=0)\n    log.fit(X_train, y_train)\n    \n    # Use KNeighbors\n    from sklearn.neighbors import KNeighborsClassifier\n    knn = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2)\n    knn.fit(X_train, y_train)\n    \n    # Use SVC (linear kernel)\n    from sklearn.svm import SVC\n    svc_lin = SVC(kernel='linear', random_state=0)\n    svc_lin.fit(X_train, y_train)\n    \n    # Use SVC (RBF kernel)\n    from sklearn.svm import SVC\n    svc_rbf = SVC(kernel='rbf', random_state=0)\n    svc_rbf.fit(X_train, y_train)\n    \n    # Use GaussianNB\n    from sklearn.naive_bayes import GaussianNB\n    gauss = GaussianNB()\n    gauss.fit(X_train, y_train)\n    \n    # Use Decision tree\n    from sklearn.tree import DecisionTreeClassifier\n    tree = DecisionTreeClassifier(criterion='entropy', random_state=0)\n    tree.fit(X_train, y_train)\n    \n    # Use RandomForestClassifier\n    from sklearn.ensemble import RandomForestClassifier\n    forest = RandomForestClassifier(n_estimators=10, criterion='entropy', random_state=0)\n    forest.fit(X_train, y_train)\n    \n    # Print the training accuracy for each model\n    print('[0]Logistic Regression Training Accuracy: ', log.score(X_train, y_train))\n    print('[1]K Neighbors Classifier Training Accuracy: ', knn.score(X_train, y_train))\n    print('[2]SVC Linear Training Accuracy: ', svc_lin.score(X_train, y_train))\n    print('[3]SVC RBF Training Accuracy: ', svc_rbf.score(X_train, y_train))\n    print('[4]Gaussian NB Training Accuracy: ', gauss.score(X_train, y_train))\n    print('[5]Decision Tree Training Accuracy: ', tree.score(X_train, y_train))\n    print('[6]Random Forest Training Accuracy: ', forest.score(X_train, y_train))\n    \n    \n    return log, knn, svc_lin, svc_rbf, gauss, tree, forest  \n    ","145aec8d":"# Get and train all of the models\nmodel = models(X_train, y_train)","9bbeb8b8":"# Show the confusion matrix and accuracy for all of the models on the test data\n\nfrom sklearn.metrics import confusion_matrix\n\nfor i in range(len(model)):\n    cm = confusion_matrix(y_test, model[i].predict(X_test))\n    \n    # Extract TN, FP, FN, TP\n    TN, FP, FN, TP = cm.ravel()\n    \n    test_score = (TP + TN) \/ (TP + TN + FN + FP)\n    \n    print(cm)\n    print('Model[{}] Testing Accuracy = \"{}\"'.format(i, test_score))","b285b32e":"# Get feature importance\nforest = model[6]\nimportances = pd.DataFrame({'feature':titanic.iloc[:, 1:8].columns,\n                           'importance': np.round(forest.feature_importances_, 3)})\nimportances = importances.sort_values('importance', ascending=False).set_index('feature')\nimportances","0a2425ef":"# Visualize the importances \nimportances.plot.bar();","c1df3883":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntest","a07388d5":"test.isna().sum()","1071dd9c":"# Drop the columns\ntest.drop(['Cabin', 'Name', 'Ticket'], axis=1, inplace=True)","5c9b56a7":"# Dropping null value rows\ntest.dropna(inplace=True)","ee6412e8":"test.isna().sum()","0748a79e":"# Creating a list of passenger id's\npassenger_id = test.loc[:, 'PassengerId']\npassenger_id","a9bd6055":"# Drop the columns\ntest.drop(['PassengerId'], axis=1, inplace=True)","3c9ddfd7":"# Encode the sex column\ntest.loc[:, 'Sex'] = le.fit_transform(test.loc[:, 'Sex'].values)\n\n# Encode the embarked column\ntest.loc[:, 'Embarked'] = le.fit_transform(test.loc[:, 'Embarked'].values)","933fb5b6":"# Scaling the test data\ntest_scaled = sc.fit_transform(test)","cc932a1d":"# Making predictions on test data\npredictions = model[6].predict(test_scaled)","b8627e7a":"# Making dataframe containing passenger id and survived column\nsubmission = pd.DataFrame({'PassengerId': passenger_id, 'Survived': predictions})\nsubmission.to_csv('submission.csv', index=False)","a41fe118":"Description: This program predicts if a passenger will survive on the titanic."}}