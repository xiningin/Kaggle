{"cell_type":{"741b9961":"code","9c63e26d":"code","2c9cb56f":"code","476e5d87":"code","1bbeba00":"code","33cc3c31":"code","db06c54f":"code","7359d238":"code","c951a750":"code","1d49c4ad":"code","489416e8":"code","104a6cf8":"code","3ce6b7bb":"code","6aa3c797":"code","602b7bff":"code","417ce5f5":"code","12ef1e9d":"code","7078d1ac":"code","7cedf050":"code","c4b5663c":"code","f9e3ef9c":"code","72918cf2":"code","0863b476":"code","a9d8973b":"code","2e647c3a":"code","1c1b6a6a":"code","b86087e3":"code","861a748d":"code","3f710766":"code","335f63ea":"code","01fb1dce":"code","7cb6bf49":"code","46598cfc":"code","7c9fc708":"code","35fc3dba":"code","4d7e6de4":"code","9d9b005d":"code","8a236b75":"code","01c8dd94":"code","07941847":"code","23e58c61":"code","9ffd9121":"code","6a5135c2":"code","626a8eb4":"code","cccf0ba4":"code","8b959b8f":"code","8cd5ee36":"code","9e9361e8":"code","3947d404":"code","92e6cb7e":"code","94836ba1":"code","730b69ec":"code","e40f19e5":"code","2eab12e3":"code","3ffdbad2":"code","5a3821aa":"code","21a15545":"code","d018ddab":"code","cf8dbc8a":"code","07f036cf":"code","cc29c633":"code","4bac4bbb":"code","e7ff5f7b":"code","5603ba24":"code","1054ff4e":"code","40f3e876":"code","1f804044":"code","7402d3e4":"code","4e2c5ab1":"code","a175f256":"code","60112d61":"code","23d402b5":"code","0e2fb42b":"code","2697036f":"code","ec7aaa5f":"code","bb02df6e":"code","a7870950":"code","a5e38552":"code","d94ebf57":"code","6bf29c4c":"code","c77fb677":"code","4e2a27f2":"code","11fad6e9":"code","6974a4bf":"code","29e8a6fd":"markdown","bbc658bb":"markdown","541f261f":"markdown","4da394f4":"markdown","59ffe0c3":"markdown","5918b00d":"markdown","bf9d1a29":"markdown","c9d9661a":"markdown","15b2984c":"markdown","2da945ae":"markdown","2bb45477":"markdown","2451f32e":"markdown","723a324f":"markdown","9e0e58c5":"markdown","3223829f":"markdown"},"source":{"741b9961":"#NumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays.\nimport numpy as np\n#pandas is a software library written for the Python programming language for data manipulation and analysis. In particular, it offers data structures and operations for manipulating numerical tables and time series.\nimport pandas as pd\n\n","9c63e26d":"#Matplotlib is a plotting library for the Python programming language and its numerical mathematics extension NumPy.\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt # For base plotting","2c9cb56f":"#Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.\nimport seaborn as sns # Easier plotting\n\n","476e5d87":"# Misc\nimport os","1bbeba00":"## To Show graphs in same window\n%matplotlib inline","33cc3c31":"# Setting up Matplotlib, Seaborn map styles\nmpl.style.use(\"seaborn\")\nplt.style.use(\"seaborn\")\n\nbtui = [\n    \"#b2182b\", \"#d6604d\", \"#f4a582\", \"#92c5de\", \"#4393c3\", \"#2166ac\", \"#762a83\",\n    \"#9970ab\", \"#c2a5cf\", \"#a6dba0\", \"#5aae61\", \"#1b7837\", \"#c51b7d\", \"#de77ae\",\n    \"#f1b6da\", \"#8c510a\", \"#bf812d\", \"#dfc27d\", \"#80cdc1\", \"#35978f\", \"#01665e\",\n    ]\nimport random\nbtui_reversed = btui[::-1]\nbtui_shuffled=random.sample(btui, len(btui))\n\nsns.set(context=\"notebook\", style=\"darkgrid\", font=\"monospace\", font_scale=1.5, palette=btui)\nsns.color_palette(btui)\nsns.set_palette(btui)\nsns.set(rc={\"figure.figsize\": (14, 10)})","db06c54f":"#gunfile = 'gun-violence-data_01-2013_03-2018.csv'\n#data_gun_violence = pd.read_csv(inputFolder+gunfile)\n\n# Kaggle\n# Read data file\ndata_gun_violence = pd.read_csv(\"..\/input\/gun-violence-data_01-2013_03-2018.csv\")","7359d238":"# Explore data - First 5 records of Gun Violance data\ndata_gun_violence.head()                          # head()","c951a750":"data_gun_violence.columns","1d49c4ad":"data_gun_violence.columns.values","489416e8":"data_gun_violence.values","104a6cf8":"data_gun_violence.dtypes","3ce6b7bb":"data_gun_violence.describe()","6aa3c797":"data_gun_violence.info()","602b7bff":"data_gun_violence.shape","417ce5f5":"# using isnull to find out missing values\ndata_gun_violence.isnull().values.any()\n","12ef1e9d":"data_gun_violence.isnull().sum()\n","7078d1ac":"# using isna to find out missing values","7cedf050":"data_gun_violence.isna().values.any()","c4b5663c":"sum_missing_data=data_gun_violence.isna().sum()\nsum_missing_data","f9e3ef9c":"count_missing_data=data_gun_violence.isna().count()\ncount_missing_data","72918cf2":"percentage_missing_data=(sum_missing_data\/count_missing_data) * 100\npercentage_missing_data","0863b476":"missing_data = pd.concat([sum_missing_data, percentage_missing_data], axis=1)\nmissing_data\n","a9d8973b":"del(sum_missing_data,count_missing_data,percentage_missing_data)","2e647c3a":"from matplotlib import collections as collections\nfrom matplotlib.patches import Rectangle\n","1c1b6a6a":"#To install this package with conda run:\n#conda install -c auto more-itertools \n\n#from itertools import izip as zip  #throwing error\n\nimport itertools\nzip = getattr(itertools, 'izip', zip)\nfrom itertools import cycle","b86087e3":"# https:\/\/stackoverflow.com\/questions\/21925114\/is-there-an-implementation-of-missingmaps-in-pythons-ecosystem\ndef missmap(df, ax=None, colors=None, aspect=4, sort='descending',\n            title=None, **kwargs):\n    \"\"\"\n    Plot the missing values of df.\n\n    Parameters\n    ----------\n    df : pandas DataFrame\n    ax : matplotlib axes\n        if None then a new figure and axes will be created\n    colors : dict\n        dict with {True: c1, False: c2} where the values are\n        matplotlib colors.\n    aspect : int\n        the width to height ratio for each rectangle.\n    sort : one of {'descending', 'ascending', None}\n    title : str\n    kwargs : dict\n        matplotlib.axes.bar kwargs\n\n    Returns\n    -------\n    ax : matplotlib axes\n\n    \"\"\"\n    if ax is None:\n        fig, ax = plt.subplots()\n\n    # setup the axes\n    dfn = pd.isnull(df)\n\n    if sort in ('ascending', 'descending'):\n        counts = dfn.sum()\n        sort_dict = {'ascending': True, 'descending': False}\n        counts.sort_values(ascending=sort_dict[sort])\n        dfn = dfn[counts.index]\n\n    ny = len(df)\n    nx = len(df.columns)\n    # each column is a stacked bar made up of ny patches.\n    xgrid = np.tile(np.arange(nx), (ny, 1)).T\n    ygrid = np.tile(np.arange(ny), (nx, 1))\n    # xys is the lower left corner of each patch\n    xys = (zip(x, y) for x, y in zip(xgrid, ygrid))\n\n    if colors is None:\n        colors = {True: '#EAF205', False: 'k'}\n\n    widths = cycle([aspect])\n    heights = cycle([1])\n\n    for xy, width, height, col in zip(xys, widths, heights, dfn.columns):\n        color_array = dfn[col].map(colors)\n\n        rects = [Rectangle(xyc, width, height, **kwargs)\n                 for xyc, c in zip(xy, color_array)]\n\n        p_coll = collections.PatchCollection(rects, color=color_array,\n                                             edgecolor=color_array, **kwargs)\n        ax.add_collection(p_coll, autolim=False)\n\n    # post plot aesthetics\n    ax.set_xlim(0, nx)\n    ax.set_ylim(0, ny)\n\n    ax.set_xticks(.5 + np.arange(nx))  # center the ticks\n    ax.set_xticklabels(dfn.columns)\n    for t in ax.get_xticklabels():\n        t.set_rotation(90)\n\n    # remove tick lines\n    ax.tick_params(axis='both', which='both', bottom='off', left='off',\n                   labelleft='off')\n    ax.grid(False)\n\n    if title:\n        ax.set_title(title)\n    return ax\n\ncolours = {True: \"#FF7256\", False: \"#ADD8E6\"}\nax = missmap(data_gun_violence, colors = colours)\nplt.show(ax)","861a748d":"data_gun_violence.drop([\n    \"incident_url\",\n    \"sources\",\n    \"source_url\",\n    \"incident_url_fields_missing\",\n    \"location_description\",\n    \"participant_relationship\",\n    ], axis=1, inplace=True)","3f710766":"#Converting object datatype to datetime\ndata_gun_violence[\"date\"] = pd.to_datetime(data_gun_violence[\"date\"])","335f63ea":"data_gun_violence[\"day\"] = data_gun_violence[\"date\"].dt.day\ndata_gun_violence[\"month\"] = data_gun_violence[\"date\"].dt.month\ndata_gun_violence[\"year\"] = data_gun_violence[\"date\"].dt.year\ndata_gun_violence[\"weekday\"] = data_gun_violence[\"date\"].dt.weekday\ndata_gun_violence[\"week\"] = data_gun_violence[\"date\"].dt.week\ndata_gun_violence[\"quarter\"] = data_gun_violence[\"date\"].dt.quarter","01fb1dce":"#Check the datatype of columns now\ndata_gun_violence.dtypes","7cb6bf49":"data_gun_violence[\"gun_type\"].unique()              #which values","46598cfc":"# Created a new column for the total number of persons impacted (injured+killed) as per the data available\ndata_gun_violence[\"total_impacted\"] = data_gun_violence[\"n_killed\"] + data_gun_violence[\"n_injured\"]","7c9fc708":"# Creating multiple columns from Participant's Gender column\ndata_gun_violence[\"participant_gender\"] = data_gun_violence[\"participant_gender\"].fillna(\"0::Unknown\")\n\n\ndef clean_participant_gender(row) :\n    gender_row_values = []\n    gender_row = str(row).split(\"||\")\n    for x in gender_row :\n        gender_row_value = str(x).split(\"::\")\n        if len(gender_row_value) > 1 :\n            gender_row_values.append(gender_row_value[1])\n            \n    return gender_row_values\n\n\nparticipant_genders = data_gun_violence.participant_gender.apply(clean_participant_gender)\ndata_gun_violence[\"participant_gender_total\"] = participant_genders.apply(lambda x: len(x))\ndata_gun_violence[\"participant_gender_male\"] = participant_genders.apply(lambda x: x.count(\"Male\"))\ndata_gun_violence[\"participant_gender_female\"] = participant_genders.apply(lambda x: x.count(\"Female\"))\ndata_gun_violence[\"participant_gender_unknown\"] = participant_genders.apply(lambda x: x.count(\"Unknown\"))\ndel(participant_genders)","35fc3dba":"# Checking for null value of column for guns involved and guns stolen and filling the missing values\ndata_gun_violence[\"n_guns_involved\"] = data_gun_violence[\"n_guns_involved\"].fillna(value =0)\ndata_gun_violence[\"gun_stolen\"] = data_gun_violence[\"gun_stolen\"].fillna(value = \"0::Unknown\")","4d7e6de4":"# Prints a lot but gives all the unique values of a column\n#data_gun_violence[\"gun_stolen\"].unique()\n\ndef clean_gun_stolen(row) :\n    unknownCount = 0\n    stolenCount = 0\n    notstolenCount = 0\n    gunstolen_row_values = []\n    \n    gunstolen_row = str(row).split(\"||\")\n    for x in gunstolen_row :\n            gunstolen_row_value = str(x).split(\"::\")\n            if len(gunstolen_row_value) > 1 :\n                gunstolen_row_values.append(gunstolen_row_value[1])\n                if \"Stolen\" in gunstolen_row_value :\n                    stolenCount += 1\n                elif \"Not-stolen\" in gunstolen_row_value :\n                    notstolenCount += 1\n                else :\n                    unknownCount += 1\n                    \n    return gunstolen_row_values\n\n\ngunstolenvalues = data_gun_violence.gun_stolen.apply(clean_gun_stolen)\ndata_gun_violence[\"gun_stolen_stolen\"] = gunstolenvalues.apply(lambda x: x.count(\"Stolen\"))\ndata_gun_violence[\"gun_stolen_notstolen\"] = gunstolenvalues.apply(lambda x: x.count(\"Not-stolen\"))\ndel(gunstolenvalues)","9d9b005d":"# Checking values for new columns added\ndata_gun_violence.head()","8a236b75":"# Checking the dimensions\ndata_gun_violence.shape","01c8dd94":"# Jointplot between Number of Person Killed Vs Injured in all incidences\nsns.jointplot(\"n_injured\",\n              \"n_killed\",\n              data_gun_violence,\n              kind='scatter',      # kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }, optional\n              s=200, color='m', edgecolor=\"skyblue\", linewidth=2)","07941847":"# Jointplot to identify Maximum Number of Person Injured in which incidence\nsns.jointplot(\"incident_id\",\n              \"n_injured\",\n              data_gun_violence,\n              kind='scatter'      # kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }, optional\n              )","23e58c61":"# Jointplot to identify Maximum Number of Person Killed in which incidence\nsns.jointplot(\"incident_id\",\n              \"n_killed\",\n              data_gun_violence,\n              kind='scatter',      # kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }, optional\n              color=\"Red\",\n              marginal_kws={'color': 'red'})","9ffd9121":"# Jointplot to identify the number guns involved and the number of guns stolen\nsns.jointplot(x=data_gun_violence[\"n_guns_involved\"], y=data_gun_violence[\"gun_stolen_stolen\"], kind=\"scatter\", color=\"#D81B60\")","6a5135c2":"# Jointplot to identify the number guns involved and the number of guns not stolen\nsns.jointplot(x=data_gun_violence[\"n_guns_involved\"], y=data_gun_violence[\"gun_stolen_notstolen\"], kind=\"scatter\", color=\"#1E88E5\")","626a8eb4":"# Jointplot to identify the number of people killed based on gender wise participant total\nsns.jointplot(x=data_gun_violence.participant_gender_total, y=data_gun_violence.n_killed, data=data_gun_violence, space=0, dropna=True, color=\"#D81B60\")","cccf0ba4":"# Jointplot to identify the number of people injured based on gender wise participant total\nsns.jointplot(x=data_gun_violence.participant_gender_total, y=data_gun_violence.n_injured, data=data_gun_violence, space=0, dropna=True, color=\"#1E88E5\")","8b959b8f":"# Jointplot to see the number of guns involved along with the number of people killed\nsns.jointplot(x=data_gun_violence.n_guns_involved, y=data_gun_violence.n_killed, data=data_gun_violence, space=0, dropna=True, color=\"#D81B60\")","8cd5ee36":"# Histogram for Top 10 Cities with maximum incidents of Gun Violence\ncitywise_total = data_gun_violence[[\"incident_id\"]].groupby(data_gun_violence[\"city_or_county\"]).count()\ntop_cities = citywise_total.sort_values(by='incident_id', ascending=False).head(10)\nprint(top_cities)\ntop_cities.plot.barh()\ndel(top_cities)","9e9361e8":"# Histogram for Top 10 States with maximum incidents of Gun Violence\nstatewise_total = data_gun_violence[[\"incident_id\"]].groupby(data_gun_violence[\"state\"]).count()\ntop_states = statewise_total.sort_values(by='incident_id', ascending=False).head(10)\nprint(top_states)\ntop_states.plot.barh()\ndel(top_states)","3947d404":"# Histogram for Weekday wise Incidents\nweekwise_total = data_gun_violence[[\"incident_id\"]].groupby(data_gun_violence[\"weekday\"]).count()\nweekwise_total.plot.barh()\ndel(weekwise_total)\n# Here, for weekdays 0 is for Monday and 6 is for Sunday.","92e6cb7e":"# Histogram showing the crime rate state wise\nstate_vs_crimecount=sns.countplot(x=data_gun_violence[\"state\"],data=data_gun_violence,order=data_gun_violence[\"state\"].value_counts().index)\nstate_vs_crimecount.set_xticklabels(state_vs_crimecount.get_xticklabels(),rotation=90)\nstate_vs_crimecount.set_title(\"State Vs Crime Rate\")","94836ba1":"# Histogram showing the the top 10 cities with high crime rate\ncity_vs_crimerate=data_gun_violence['city_or_county'].value_counts().head(10)\ncity_vs_crimerate=sns.barplot(x=city_vs_crimerate.index,y=city_vs_crimerate)\ncity_vs_crimerate.set_xticklabels(city_vs_crimerate.get_xticklabels(),rotation=45)\ncity_vs_crimerate.set_title(\"Top 10 Cities having high crime rate\")","730b69ec":"# unique states\ndata_gun_violence['state'].unique()","e40f19e5":"# state wise crime count for top 10 states\nstate_vs_crimecount=data_gun_violence['state'].value_counts().head(10)\nstate_vs_crimecount","2eab12e3":"# Pie chart showing Top 10 States having high crime rate\nplt.pie(state_vs_crimecount,labels=state_vs_crimecount.index,shadow=True)\nplt.title(\"Top 10 States having high crime rate\")\nplt.axis(\"equal\")","3ffdbad2":"# the same graph in another way\nplt.pie(state_vs_crimecount, labels=state_vs_crimecount.index, colors=btui, autopct=\"%1.1f%%\", shadow=True, startangle=195)\nplt.title(\"Top 10 States having high crime rate\")\nplt.axis(\"equal\")","5a3821aa":"# state wise crime rate for all the states\nstatewise_crime_rate = data_gun_violence[\"state\"].value_counts()\nstatewise_crime_rate","21a15545":"# Pie chart showing state wise crime rate for all the states\nplt.pie(statewise_crime_rate, labels=statewise_crime_rate.index, colors=btui, autopct=\"%1.1f%%\", shadow=True, startangle=195)\nplt.title(\"State-wise Gun Violence Percentage\")\nplt.axis(\"equal\")","d018ddab":"# Top 50 cities having highest crime rate\ntopcitywise_crime_rate = data_gun_violence[\"city_or_county\"].value_counts().head(50)\ntopcitywise_crime_rate","cf8dbc8a":"# Pie chart showing Top 50 cities having highest crime rate\nplt.pie(topcitywise_crime_rate, labels=topcitywise_crime_rate.index, colors=btui, autopct=\"%1.1f%%\", shadow=True, startangle=195)\nplt.title(\"City-wise Gun Violence Percentage\")\nplt.axis(\"equal\")","07f036cf":"# Density plot for genderwise participant\ngenderwise_total = data_gun_violence[[\"participant_gender_total\", \"participant_gender_male\", \"participant_gender_female\", \"participant_gender_unknown\"]].groupby(data_gun_violence[\"year\"]).sum()\ndp_gen_plot=sns.kdeplot(genderwise_total[\"participant_gender_male\"], shade=True, color=\"r\")\ndp_gen_plot=sns.kdeplot(genderwise_total[\"participant_gender_female\"], shade=True, color=\"b\")\ndp_gen_plot=sns.kdeplot(genderwise_total['participant_gender_unknown'], shade=True, color=\"g\")\ndel(genderwise_total)","cc29c633":"# Density plot for person injured vs killed on all weekdays\ninj_kill_weektotal = data_gun_violence[[\"n_injured\",\"n_killed\"]].groupby(data_gun_violence[\"weekday\"]).sum()\ndp_inj_kill_plot=sns.kdeplot(inj_kill_weektotal['n_injured'], shade=True, color=\"r\")\ndp_inj_kill_plot=sns.kdeplot(inj_kill_weektotal['n_killed'], shade=True, color=\"b\")\ndel(inj_kill_weektotal)","4bac4bbb":"# Point plot showing yearly no of persons Killed \nyearly_vs_killed=data_gun_violence.groupby(data_gun_violence[\"year\"]).apply(lambda x: pd.Series(dict(No_Killed=x.n_killed.sum())))\nyearly_vs_killed_plot=sns.pointplot(x=yearly_vs_killed.index, y=yearly_vs_killed.No_Killed, data=yearly_vs_killed,label=\"yearly_vs_killed\")\nyearly_vs_killed","e7ff5f7b":"# Point plot showing yearly no of persons Injured\nyearly_vs_injured=data_gun_violence.groupby(data_gun_violence[\"year\"]).apply(lambda x: pd.Series(dict(No_Injured=x.n_injured.sum())))\nyearly_vs_injured_plot=sns.pointplot(x=yearly_vs_injured.index, y=yearly_vs_injured.No_Injured, data=yearly_vs_injured,label=\"yearly_vs_injured\")\nyearly_vs_injured","5603ba24":"# Point plot showing monthly no of people Killed \nmonthly_vs_killed=data_gun_violence.groupby(data_gun_violence[\"month\"]).apply(lambda x: pd.Series(dict(No_Killed=x.n_killed.sum())))\nmonthly_vs_killed_plot=sns.pointplot(x=monthly_vs_killed.index, y=monthly_vs_killed.No_Killed, data=monthly_vs_killed,label=\"monthly_vs_killed\")\nmonthly_vs_killed","1054ff4e":"# Point plot showing monthly no of people injured\nmonthly_vs_injured=data_gun_violence.groupby(data_gun_violence[\"month\"]).apply(lambda x: pd.Series(dict(No_Injured=x.n_injured.sum())))\nmonthly_vs_injured_plot=sns.pointplot(x=monthly_vs_injured.index, y=monthly_vs_injured.No_Injured, data=monthly_vs_injured,label=\"monthly_vs_injured\")\nmonthly_vs_injured","40f3e876":"# Violin Plot for Year wise no of people injured\nyear_vs_injured_plot = sns.violinplot(\"year\", \"n_injured\", data=data_gun_violence,split=True, inner=\"quartile\")\nyear_vs_injured_plot.set_title(\"Persons injured in the incidents per Year\")","1f804044":"# Violin Plot for Year wise no of people killed\nyear_vs_killed_plot = sns.violinplot(\"year\", \"n_killed\",\n               data=data_gun_violence,\n               split=True,         # If hue variable has two levels, draw half of a violin for each level.\n               inner=\"quartile\"    #  Options: \u201cbox\u201d, \u201cquartile\u201d, \u201cpoint\u201d, \u201cstick\u201d, None \n               )\nyear_vs_killed_plot.set_title(\"Persons killed in the incidents per Year\")","7402d3e4":"# Violin Plot for total num of persons Impacted(Killed\/Injured) during gun violence\nImpacted_persons_total = data_gun_violence[[\"total_impacted\", \"n_injured\", \"n_killed\"]].groupby(data_gun_violence[\"year\"]).sum()\nprint(Impacted_persons_total)\n","4e2c5ab1":"year_impacted_plot = sns.violinplot(data=Impacted_persons_total,\n               split=True,         # If hue variable has two levels, draw half of a violin for each level.\n               inner=\"quartile\"    #  Options: \u201cbox\u201d, \u201cquartile\u201d, \u201cpoint\u201d, \u201cstick\u201d, None \n               )\nyear_impacted_plot.set_title(\"Total number of persons Impacted(Killed\/Injured) during gun violence\")\ndel(Impacted_persons_total)","a175f256":"# Violin Plot for Genderwise total number of persons involved\/impacted during gun violence\ngenderwise_total = data_gun_violence[[\"participant_gender_total\", \"participant_gender_male\", \"participant_gender_female\", \"participant_gender_unknown\"]].groupby(data_gun_violence[\"year\"]).sum()\nprint(genderwise_total)\n","60112d61":"year_genderwise_plot = sns.violinplot(data=genderwise_total,\n               split=True,         # If hue variable has two levels, draw half of a violin for each level.\n               inner=\"quartile\"    #  Options: \u201cbox\u201d, \u201cquartile\u201d, \u201cpoint\u201d, \u201cstick\u201d, None \n               )\nyear_genderwise_plot.set_title(\"Genderwise total number of persons involved\/impacted during gun violence\")\ndel(genderwise_total)","23d402b5":"# State Vs No of People Killed\nstatewise_vs_killed=data_gun_violence.groupby(data_gun_violence[\"state\"]).apply(lambda x: pd.Series(dict(No_Killed=x.n_killed.sum())))\nstatewise_vs_killed","0e2fb42b":"# Box plot for total number of persons killed State wise\nsns.boxplot('state','n_killed',data=data_gun_violence)","2697036f":"#State Vs No of people Injured\nstatewise_vs_injured=data_gun_violence.groupby(data_gun_violence[\"state\"]).apply(lambda x: pd.Series(dict(No_Injured=x.n_injured.sum())))\nstatewise_vs_injured","ec7aaa5f":"# Box plot for total number of persons injured State wise\nsns.boxplot('state','n_injured',data=data_gun_violence)","bb02df6e":"# Box Plot for Monthwise total number of Persons Killed\nmonthwise_killed_plot = sns.boxplot(\"month\", \"n_killed\", data= data_gun_violence)\nmonthwise_killed_plot.set_title(\"Person killed in incidents per month\")","a7870950":"# Box Plot for Monthwise total number of Persons Injured\nmonth_injured_plot = sns.boxplot(\"month\", \"n_injured\", data= data_gun_violence)\nmonth_injured_plot.set_title(\"Person injured in incidents per month\")","a5e38552":"# Count Plot for Statewise incidences of Gun Violence\nstatewise_inc_plot = sns.countplot(x=data_gun_violence[\"state\"], data = data_gun_violence,palette=btui,order=data_gun_violence[\"state\"].value_counts().index)\nstatewise_inc_plot.set_title(\"Statewise incidence of Gun Violence\")\nstatewise_inc_plot.set_xticklabels(statewise_inc_plot.get_xticklabels(), rotation=90)","d94ebf57":"# Count plot for statewise crime rate \nstatewise_crime_rate = sns.countplot(x=data_gun_violence[\"state\"], data=data_gun_violence, palette=btui, order=data_gun_violence[\"state\"].value_counts().index)\nstatewise_crime_rate.set_xticklabels(statewise_crime_rate.get_xticklabels(), rotation=90)\nstatewise_crime_rate.set_title(\"State(s) with highest number of Gun Violence\")","6bf29c4c":"# Count Plot for State House District wise\nstate_housewise_inc_plot = sns.countplot(\"state_house_district\", data = data_gun_violence,palette=btui,order=data_gun_violence[\"state_house_district\"].value_counts().index)\nstate_housewise_inc_plot.set_title(\"State House District wise incidence of Gun Violence\")\nstate_housewise_inc_plot.set_xticklabels(state_housewise_inc_plot.get_xticklabels(),rotation=90)","c77fb677":"# Count Plot for State Senate District wise\nstate_incident_plot = sns.countplot(\"state_senate_district\", data = data_gun_violence,palette=btui,order=data_gun_violence[\"state_house_district\"].value_counts().index)\nstate_incident_plot.set_title(\"State Senate District wise incidence of Gun Violence\")\nstate_incident_plot.set_xticklabels(state_incident_plot.get_xticklabels(),rotation=90)","4e2a27f2":"# Facet Grid Graph for Male\/ Female Partipant per Year\ng = sns.FacetGrid(data_gun_violence, hue=\"year\", palette=\"Set1\", size=5, hue_kws={\"marker\": [\"^\", \"v\",\"*\",\">\",\"<\",\"+\"]})\ng.map(plt.scatter, \"participant_gender_male\", \"participant_gender_female\", s=100, linewidth=.5, edgecolor=\"white\")\ng.add_legend();","11fad6e9":"# Facet Grid Graphh for Person killed and Injured per Year\ng = sns.FacetGrid(data_gun_violence, hue=\"year\", palette=\"Set1\", size=5, hue_kws={\"marker\": [\"^\", \"v\",\"*\",\">\",\"<\",\"o\"]})\ng.map(plt.scatter, \"n_injured\", \"n_killed\", s=100, linewidth=.5, edgecolor=\"white\")\ng.add_legend();","6974a4bf":"# Facet Grid Graphh for Person killed and Injured on Particular days of the week\ng = sns.FacetGrid(data_gun_violence, hue=\"weekday\", palette=\"Set1\", size=5, hue_kws={\"marker\": [\"^\", \"v\",\"h\",\"o\",\"+\",\">\",\"d\"]})\ng.map(plt.scatter, \"n_injured\", \"n_killed\", s=100, linewidth=.5, edgecolor=\"white\")\ng.add_legend();","29e8a6fd":"**APPLYING FEATURE ENGINEERING ON THE GUN VIOLENCE DATASET**","bbc658bb":"**iv) Kernel Density plots**","541f261f":"**ii) Histograms**","4da394f4":"**vii) Box plot**","59ffe0c3":"**i)   Joint Distribution plots:**\n","5918b00d":"**v) Point plots**","bf9d1a29":"**viii) Count plot**","c9d9661a":"# Gun Violence Data Exploration using python","15b2984c":"**Now let's start with the exercise.....!!!**","2da945ae":"Database Content File Name : gun-violence-data_01-2013_03-2018.csv The CSV file contains data for all recorded gun violence incidents in the US between January 2013 and March 2018, inclusive. Gun Violence Archive (GVA) is a not for profit corporation formed in 2013 to provide free online public access to accurate information about gun-related violence in the United States. GVA will collect and check for accuracy, comprehensive information about gun-related violence in the U.S. and then post and disseminate it online.","2bb45477":"**The following graphs have been used to describe the gun violence data :**\n* **    i)      Joint Distribution plots**\n* **    ii)     Histograms**\n* **    iii)    Pie chart**\n* **    iv)    Kernel Density plots**\n* **    v)     Point plots**\n* **    vi)    Violin plots**\n* **    vii)   Box plots**\n* **    viii)  Count plots**\n* **    ix)    Facet Grid plots**","2451f32e":"**iii) Pie chart**","723a324f":"**DATA EXPLORATION WITH THE HELP OF GRAPHS**","9e0e58c5":"**vi) Violin plot**","3223829f":"**ix) Facet grid graph**"}}