{"cell_type":{"098edc68":"code","9fa776e2":"code","43c4bc5e":"code","0e059f70":"code","1563d104":"code","fa321f87":"code","a108f3b4":"code","85386185":"code","fadba2b2":"code","38734de2":"code","f67927fd":"code","26a1e3ae":"code","61ad712e":"code","5d8c2ad8":"code","ddb4ed43":"code","bdd74302":"code","8584acec":"code","1d496d74":"code","166149f7":"code","a658c24a":"code","111ef955":"code","48539826":"code","5f0968ec":"code","d01a06c6":"code","8ea67ef4":"code","e0840d48":"code","6aa13e79":"code","7fbefcb4":"code","0db52af5":"code","3fa1b0fb":"code","beca2b22":"markdown","abc60d1f":"markdown","81db7907":"markdown","bdce4b35":"markdown","6fae3611":"markdown","c82d648a":"markdown","650fbf99":"markdown","7b4ed74e":"markdown","fce84e36":"markdown","963bef9c":"markdown","980e76f2":"markdown","9b45f03f":"markdown","1f043890":"markdown","5c1142ee":"markdown","147e90fd":"markdown","e6154fc6":"markdown","95554f40":"markdown","c88d7e4f":"markdown","e3063a0e":"markdown","9ba3287f":"markdown"},"source":{"098edc68":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","9fa776e2":"loans = pd.read_csv('..\/input\/lending-club-loan-data-analysis\/loan_data.csv')","43c4bc5e":"loans.info()","0e059f70":"loans.describe()","1563d104":"loans.head()","fa321f87":"plt.figure(figsize=(10,6))\nloans[loans['credit.policy']==1]['fico'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='Credit.Policy=1')\nloans[loans['credit.policy']==0]['fico'].hist(alpha=0.5,color='red',\n                                              bins=30,label='Credit.Policy=0')\nplt.legend()\nplt.xlabel('FICO')","a108f3b4":"plt.figure(figsize=(10,6))\nloans[loans['not.fully.paid']==1]['fico'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='not.fully.paid=1')\nloans[loans['not.fully.paid']==0]['fico'].hist(alpha=0.5,color='red',\n                                              bins=30,label='not.fully.paid=0')\nplt.legend()\nplt.xlabel('FICO')","85386185":"plt.figure(figsize=(11,7))\nsns.countplot(x='purpose',hue='not.fully.paid',data=loans,palette='Set1')","fadba2b2":"sns.jointplot(x='fico',y='int.rate',data=loans,color='purple')","38734de2":"plt.figure(figsize=(11,7))\nsns.lmplot(y='int.rate',x='fico',data=loans,hue='credit.policy',\n           col='not.fully.paid',palette='Set1')","f67927fd":"loans.info()","26a1e3ae":"cat_feats = ['purpose']","61ad712e":"final_data = pd.get_dummies(loans,columns=cat_feats,drop_first=True)","5d8c2ad8":"final_data.info()","ddb4ed43":"from sklearn.model_selection import train_test_split","bdd74302":"X = final_data.drop('not.fully.paid',axis=1)\ny = final_data['not.fully.paid']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)","8584acec":"from sklearn.tree import DecisionTreeClassifier","1d496d74":"dtree = DecisionTreeClassifier()","166149f7":"dtree.fit(X_train,y_train)","a658c24a":"predictions = dtree.predict(X_test)","111ef955":"from sklearn.metrics import classification_report,confusion_matrix","48539826":"print(classification_report(y_test,predictions))","5f0968ec":"print(confusion_matrix(y_test,predictions))","d01a06c6":"from sklearn.ensemble import RandomForestClassifier","8ea67ef4":"rfc = RandomForestClassifier(n_estimators=600)","e0840d48":"rfc.fit(X_train,y_train)","6aa13e79":"predictions = rfc.predict(X_test)","7fbefcb4":"from sklearn.metrics import classification_report,confusion_matrix","0db52af5":"print(classification_report(y_test,predictions))","3fa1b0fb":"print(confusion_matrix(y_test,predictions))","beca2b22":"** Create a similar figure, except this time select by the not.fully.paid column.**","abc60d1f":"**Now use pd.get_dummies(loans,columns=cat_feats,drop_first=True) to create a fixed larger dataframe that has new feature columns with dummy variables. Set this dataframe as final_data.**","81db7907":"** Create a countplot using seaborn showing the counts of loans by purpose, with the color hue defined by not.fully.paid. **","bdce4b35":"**Show the Confusion Matrix for the predictions.**","6fae3611":"## Categorical Features\n\n\n**Create a list of 1 element containing the string 'purpose'. Call this list cat_feats.**","c82d648a":"**Now create a classification report from the results. Do you get anything strange or some sort of warning?**","650fbf99":"# Setting up the Data\n\nLet's get ready to set up our data for our Random Forest Classification Model!\n\n**Check loans.info() again.**","7b4ed74e":"## Train Test Split\n\nNow its time to split our data into a training set and a testing set!\n\n** Use sklearn to split your data into a training set and a testing set as we've done in the past.**","fce84e36":"## Get the Data\n\n** Use pandas to read loan_data.csv as a dataframe called loans.**","963bef9c":"** Let's see the trend between FICO score and interest rate. Recreate the following jointplot.**","980e76f2":"# Exploratory Data Analysis\n","9b45f03f":"## Training a Decision Tree Model\n\nLet's start by training a single decision tree first!\n\n** Import DecisionTreeClassifier**","1f043890":"**Create an instance of DecisionTreeClassifier() called dtree and fit it to the training data.**","5c1142ee":"# Import Libraries\n\n","147e90fd":"___\n\n<a href='http:\/\/www.pieriandata.com'> <img src='..\/Pierian_Data_Logo.png' \/><\/a>\n___\n# Random Forest Project \n\nUsing lending data from 2007-2010 and be trying to classify and predict whether or not the borrower paid back their loan in full. \n\nHere are what the columns represent:\n* credit.policy: 1 if the customer meets the credit underwriting criteria of LendingClub.com, and 0 otherwise.\n* purpose: The purpose of the loan (takes values \"credit_card\", \"debt_consolidation\", \"educational\", \"major_purchase\", \"small_business\", and \"all_other\").\n* int.rate: The interest rate of the loan, as a proportion (a rate of 11% would be stored as 0.11). Borrowers judged by LendingClub.com to be more risky are assigned higher interest rates.\n* installment: The monthly installments owed by the borrower if the loan is funded.\n* log.annual.inc: The natural log of the self-reported annual income of the borrower.\n* dti: The debt-to-income ratio of the borrower (amount of debt divided by annual income).\n* fico: The FICO credit score of the borrower.\n* days.with.cr.line: The number of days the borrower has had a credit line.\n* revol.bal: The borrower's revolving balance (amount unpaid at the end of the credit card billing cycle).\n* revol.util: The borrower's revolving line utilization rate (the amount of the credit line used relative to total credit available).\n* inq.last.6mths: The borrower's number of inquiries by creditors in the last 6 months.\n* delinq.2yrs: The number of times the borrower had been 30+ days past due on a payment in the past 2 years.\n* pub.rec: The borrower's number of derogatory public records (bankruptcy filings, tax liens, or judgments).","e6154fc6":"## Predictions and Evaluation\n\nLet's predict off the y_test values and evaluate our model.\n\n** Predict the class of not.fully.paid for the X_test data.**","95554f40":"** Check out the info(), head(), and describe() methods on loans.**","c88d7e4f":"## Training the Random Forest model\n\nNow its time to train our model!\n\n**Create an instance of the RandomForestClassifier class and fit it to our training data from the previous step.**","e3063a0e":"** Create the following lmplots to see if the trend differed between not.fully.paid and credit.policy. Check the documentation for lmplot() if you can't figure out how to separate it into columns.**","9ba3287f":"## Predictions and Evaluation of Decision Tree\n**Create predictions from the test set and create a classification report and a confusion matrix.**"}}