{"cell_type":{"c985f1b2":"code","b1955d5e":"code","415eaba5":"code","533a506e":"code","446528aa":"code","7aaec66c":"code","3f7e8bd0":"code","2b91b0a3":"markdown","68086d27":"markdown","e7d9618f":"markdown","82868ca5":"markdown"},"source":{"c985f1b2":"# Import Packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split","b1955d5e":"warnings.filterwarnings('ignore')","415eaba5":"# read data\ndiab_data = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\n","533a506e":"# Exploratory Data Analysis\n\ndef data_eda(dataset):\n    \"\"\"\n    INPUT:\n    dataset - a pandas dataframe holding comma-separated values(csv)\n\n    OUTPUT:\n    return\n\n    This function perform the exploratory data analysis for the dataset and\n    provides the summary statistics and data visualisations to provide a general view of the dataset.\n\n    \"\"\"\n    # summary statistics\n    # information about the dataset (index data type, columns, non-null values, memory usage)\n    dataset.info(verbose=True)\n    # missing values of the dataset\n    print('\\nEDA-Missing values\\n{}'.format(dataset.isnull().sum()))\n    # number of values in 'outcome' category\n    print('\\nEDA-Response Variable\\n{}'.format(dataset['Outcome'].value_counts()))\n    # summary of each numerical attribute\n    print('\\nEDA-Dataset Description\\n{}'.format(dataset.describe().T))\n\n    # data visualisation\n    # histogram showing the general trends of the dataset\n    dataset.hist(bins=50, figsize=(20,15))\n    plt.show()\n    dataset.boxplot(figsize=(20,15))\n    plt.show()\n\n    return","446528aa":"show_eda = data_eda(diab_data)\nprint(show_eda)","7aaec66c":"# Model Data\ndef ml_model(df, response_var, test_size=.3, rand_state=42):\n    \"\"\"\n    INPUT:\n    df - a dataframe holding all the variables of interest\n    response_col - a string holding the name of the column\n    test_size - a float between [0,1] about what proportion of data should be in the test dataset\n    rand_state - an int that is provided as the random state for splitting the data into training and test\n\n    OUTPUT:\n    X - cleaned X matrix\n    y - cleaned response\n    my_model - model object from sklearn\n    X_train, X_test, y_train, y_test - output from sklearn train test split used for optimal model\n\n    This function models the data and provides the accuracy scores for the output.\n    \"\"\"\n    # Split into explanatory and response variables\n    X = df.drop(response_var, axis=1)\n    y = df[response_var]\n\n    # Split into train and test\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=rand_state)\n    \n    list_1 = []\n    classifiers = ['Logistic Regression', 'SGD Classifier','K Neighbors Classifier','SVM', 'Decision Tree']\n    models = [LogisticRegression(), SGDClassifier(), KNeighborsClassifier(),LinearSVC(), DecisionTreeClassifier()]\n    \n    for model in models:\n        model.fit(X_train,y_train # Fit\n        y_test_preds = model.predict(X_test)  # Predict\n        list_1.append(metrics.accuracy_score(y_test_preds, y_test)) # Evaluate\n    models_dataframe = pd.DataFrame(list_1, index=classifiers, columns=['Accuracy'])\n    \n    return models_dataframe","3f7e8bd0":"show_model = ml_model(diab_data,['Outcome'])\nprint(show_model)","2b91b0a3":"#### model data","68086d27":"#### model data","e7d9618f":"### Helper Functions","82868ca5":"#### perform EDA"}}