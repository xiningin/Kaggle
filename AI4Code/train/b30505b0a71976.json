{"cell_type":{"eda74f66":"code","6747830a":"code","4a6e5a8b":"code","2c21e0f7":"code","8425967b":"code","25462630":"code","a97a4f6b":"code","0de27f2d":"code","255ea56d":"code","8224255f":"code","9673e9ea":"code","8c588ed2":"code","7b3e8e54":"code","6b6f4af3":"code","1ec9fa4d":"code","e042f99f":"code","4109cc9c":"code","ec119b2a":"code","02007017":"code","d36d73cb":"code","e27da8d8":"code","82c1653b":"code","aa097915":"code","2a393da6":"code","55386361":"code","c42b49c7":"code","c0c9ef4c":"code","a1b4e1a9":"code","a7a56f6b":"code","1890fa1f":"code","c661ebe5":"code","0ff04db5":"code","e6916fe0":"code","a2451e5d":"code","1c070f77":"code","4102816c":"code","8d12b773":"code","c8c13613":"code","ada785a8":"code","b6fa4e30":"code","7dc6e4dc":"code","68392665":"markdown","61dbd8e4":"markdown","6ee9ad41":"markdown","2c8760cb":"markdown","1ffe2cc6":"markdown","fde925ed":"markdown","1d08756a":"markdown","30482218":"markdown","329ece6d":"markdown","df871722":"markdown","5c0f38c5":"markdown","93a761d7":"markdown","62306dd7":"markdown","a2bf0013":"markdown","2e2d1833":"markdown","bfac91ad":"markdown","39ded116":"markdown","78ca3c71":"markdown","86e530b5":"markdown","c64175ec":"markdown","29873598":"markdown","84e907ef":"markdown","cd94ccf3":"markdown","91c6884b":"markdown","19b1b6e5":"markdown","7d345d08":"markdown","ac808769":"markdown","6d332754":"markdown"},"source":{"eda74f66":"%load_ext autoreload\n%autoreload 2\n\n%matplotlib inline","6747830a":"import pandas as pd\nimport numpy as np\nfrom structured import *\nimport warnings\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn import metrics \n\nwarnings.filterwarnings('ignore')","4a6e5a8b":"! unzip ..\/input\/bluebook-for-bulldozers\/Train.zip","2c21e0f7":"df_raw = pd.read_csv('.\/Train.csv',low_memory=False,\n                    parse_dates=[\"saledate\"])\ndf_raw.head()","8425967b":"df_raw.saledate","25462630":"#since the kaggle competition evaluation metric is the RMSLE(Root mean square log error)\ndf_raw.SalePrice=np.log(df_raw.SalePrice)","a97a4f6b":"df_raw.saledate #datatype is datetime","0de27f2d":"add_datepart(df_raw, 'saledate')","255ea56d":"df_raw.head()","8224255f":"df_raw.columns","9673e9ea":"df_raw.info()","8c588ed2":"train_cats(df_raw) #converts most of these objects into categories","7b3e8e54":"df_raw.info() #how most objects have been turned to category","6b6f4af3":"df_raw.UsageBand","1ec9fa4d":"df_raw.UsageBand.cat.categories #gives you the categories for the usage band feature","e042f99f":"df_raw.UsageBand.cat.set_categories(['High', 'Medium', 'Low'], ordered=True, inplace=True)\n#order it so the splitting gets the maximum benifit from it ","4109cc9c":"df_raw.UsageBand.cat.categories","ec119b2a":"df_raw.UsageBand.cat.codes","02007017":"df_raw.head() #usage band still says high or low but behind the scenes they've been made into numbers","d36d73cb":"df_raw.to_feather(('bulldozers-raw'))","e27da8d8":"df_raw = pd.read_feather('bulldozers-raw')","82c1653b":"df, y, nas = proc_df(df_raw, 'SalePrice')","aa097915":"def split_vals(a,n): \n    return a[:n].copy(), a[n:].copy()\n\nn_valid = 12000  # same as Kaggle's test set size\nn_trn = len(df)-n_valid\n# raw_train, raw_valid = split_vals(df_raw, n_trn)\nX_train, X_valid = split_vals(df, n_trn)\ny_train, y_valid = split_vals(y, n_trn)\n\nX_train.shape, y_train.shape, X_valid.shape","2a393da6":"import math\n#let's track the metrics we're interested in \ndef rmse(x,y): return math.sqrt(((x-y)**2).mean())\n\ndef print_score(m):\n    res = [rmse(m.predict(X_train), y_train), rmse(m.predict(X_valid), y_valid),\n                m.score(X_train, y_train), m.score(X_valid, y_valid)]\n    if hasattr(m, 'oob_score_'): res.append(m.oob_score_)\n    print(res)","55386361":"m = RandomForestRegressor() \n%time m.fit(X_train, y_train)\nprint_score(m) #training rmse, valid rmse, training accuracy and validation accuracy respectively","c42b49c7":"len(df_raw)","c0c9ef4c":"df_trn, y_trn, nas = proc_df(df_raw, 'SalePrice', subset=50_000) \nX_train, _ = split_vals(df_trn, 40_000) \ny_train, _ = split_vals(y_trn, 40_000) ","a1b4e1a9":"m = RandomForestRegressor()\n%time m.fit(X_train, y_train)\nprint_score(m)","a7a56f6b":"preds = np.stack([t.predict(X_valid) for t in m.estimators_])\npreds[:,0], np.mean(preds[:,0]), y_valid[0]","1890fa1f":"preds.shape","c661ebe5":"m = RandomForestRegressor(n_estimators=20, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m) #prev was 81","0ff04db5":"m = RandomForestRegressor(n_estimators=40, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","e6916fe0":"m = RandomForestRegressor(n_estimators=50, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","a2451e5d":"m = RandomForestRegressor(n_estimators=75, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","1c070f77":"m = RandomForestRegressor(n_estimators=100, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","4102816c":"m = RandomForestRegressor(n_estimators=125, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","8d12b773":"m = RandomForestRegressor(n_estimators=160, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","c8c13613":"m = RandomForestRegressor(n_estimators=170, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","ada785a8":"m = RandomForestRegressor(n_estimators=160, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m) #final output is oob error","b6fa4e30":"df_trn, y_trn, nas = proc_df(df_raw, 'SalePrice')\nX_train, X_valid = split_vals(df_trn, n_trn)\ny_train, y_valid = split_vals(y_trn, n_trn)","7dc6e4dc":"m = RandomForestRegressor(n_estimators=150, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","68392665":"This requires using the set_rf_samples method, that changes sklearn source code \nTo see the its implementation check \nhttps:\/\/github.com\/VishakBharadwaj94\/bluebook_for_bulldozers\/blob\/master\/bluebook_for_bulldozers.ipynb","61dbd8e4":"The basic idea is this: rather than limit the total amount of data that our model can access, let's instead limit it to a different random subset per tree. That way, given enough trees, the model can still see all the data, but for each individual tree it'll be just as fast as if we had cut down our dataset as before.","6ee9ad41":"The categorical variables are currently stored as strings, which is inefficient, and doesn't provide the numeric coding required for a random forest. Therefore we call **train_cats** to convert strings to pandas categories.","2c8760cb":"This dataset\/competition has been chosen because of the closeness of the data to the realtime workplace.\n\nLink here : https:\/\/www.kaggle.com\/c\/bluebook-for-bulldozers","1ffe2cc6":"## Initial processing","fde925ed":"Use that subset which takes around 8-10 seconds to compute\n\nnote that as you increase the size of the subset, the accuracy of the model increases meaning you can try out the hyperparameters here, and then go back to the bigger dataset after you find the best ones","1d08756a":"To make things easier for the random forest, we rearrange the categories in the UsageBand feature to make more sense to split on","30482218":"2 mins is too long and anything more than 10 secs will slow down the iteration process. so use proc_df to reduce the size of the training set. Proc_df has a subset attribute that handles it","329ece6d":"The **add_datepart** method extracts particular date fields from a complete datetime for the purpose of constructing categoricals. You should always consider this feature extraction step when working with date-time. Without expanding your date-time into these additional fields, you can't capture any trend\/cyclical behavior as a function of time at any of these granularities.","df871722":"Creating a validation set","5c0f38c5":"### Modelling","93a761d7":"We will be looking at the Blue Book for Bulldozers Kaggle Competition: \"The goal of the contest is to predict the sale price of a particular piece of heavy equiment at auction based on it's usage, equipment type, and configuration. The data is sourced from auction result postings and includes information on usage and equipment configurations.\"","62306dd7":"Normally, pandas will continue displaying the text categories, while treating them as numerical data internally. Optionally, we can replace the text categories with numbers, which will make this variable non-categorical, like so:.","a2bf0013":"### Out-of-bag (OOB) score","2e2d1833":"you need to drop the target variable convert the categorical variables to numbers and then fit ","bfac91ad":"Each tree is stored in estimators_ so run the validation set through each tree \nSo for every row you have 1 prediction per tree, so 12000 pedictions per tree and there are 10(will change to 100 as default) trees","39ded116":"# Bluebook for Bulldozers","78ca3c71":"## Reducing over-fitting","86e530b5":"**Note** :Category is a pandas datatype","c64175ec":"## pre-processing","29873598":"### 1. Dealing with dates","84e907ef":"Score decreases at 170. So let's revert to 160","cd94ccf3":"With the model now at near 90% accuracy, we can dig deep in for further insights\n\nFor model Interpretation. Have a look at :\n\nhttps:\/\/github.com\/VishakBharadwaj94\/bluebook_for_bulldozers\/blob\/master\/rf_interp.ipynb","91c6884b":"The dataset has both continous and categorical variables like the datetime thing etc which you can use.\nAnd you need a piece of feature engineering to get info out of this","19b1b6e5":"This shows that our validation set time difference is making an impact, as is model over-fitting.","7d345d08":"It turns out that one of the easiest ways to avoid over-fitting is also one of the best ways to speed up analysis: subsampling. Let's return to using our full dataset, so that we can demonstrate the impact of this technique.","ac808769":"### 2. Convert strings to numbers for pandas","6d332754":" what proc_df does :\n proc_df takes a data frame df and splits off the response variable, and\n changes the df into an entirely numeric dataframe. For each column of df \n which is not in skip_flds nor in ignore_flds, na values are replaced by the\nmedian value of the column.\n\n 1. fix_missing - Fill missing data in a column of df with the median, and add a {name}_na column\n    which specifies if the data was missing.\n 2. scale_vars(if needed)\n 3. numericalize - Changes the column col from a categorical type to it's integer codes."}}