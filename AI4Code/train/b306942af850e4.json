{"cell_type":{"219fdfa7":"code","9f1246fa":"code","57d576d9":"code","6a1f3d45":"code","1e08ba8d":"code","527e5821":"code","dd49ec60":"code","b4dce5b2":"code","3e1e6b8d":"code","fc0bb93a":"code","88b82d45":"code","6fab2fba":"code","ecd711c7":"code","9b982675":"code","ac2986b2":"code","d5cb7f65":"code","20fa002a":"code","57531ecc":"code","f5597dfa":"code","87771af9":"code","f7d5a671":"code","05a795de":"code","dba075e3":"code","81b41b9b":"code","5020880a":"code","87113f3f":"code","e97de55e":"code","5b23fb81":"code","f78bbb07":"code","d1b0015e":"code","6ecaa3d3":"code","f81e6f8c":"code","03f98ec6":"code","87ae9336":"code","10f1fa46":"code","4441138c":"code","8f070588":"code","9e081e87":"code","b6afa608":"code","d70f7496":"code","be4ce64c":"code","553e506f":"code","c35cac4d":"code","561be34b":"code","e539c226":"code","5a4e6b89":"code","540a0a98":"code","02ae7366":"code","159c9eb1":"code","9157820f":"code","8e71db86":"code","21afdc25":"code","45ad5e2d":"markdown","2d7ebe24":"markdown","16772007":"markdown","ba1b3b1e":"markdown","44dd4d42":"markdown","ea7fe98a":"markdown","621d69fd":"markdown","9ac79086":"markdown","bfc41b56":"markdown","259c555e":"markdown","fbd6caf4":"markdown","90d426a3":"markdown","ff048e94":"markdown","f2563582":"markdown","83f7bd21":"markdown","360976fc":"markdown","14123193":"markdown","40218764":"markdown","4c444f42":"markdown","2320f3a4":"markdown","be18e9fc":"markdown","a03f7843":"markdown","1f6e96db":"markdown","fedb6785":"markdown","05713251":"markdown","863ad383":"markdown","10fd1cca":"markdown","0fdb251d":"markdown","855fd863":"markdown","b15c4962":"markdown","2ec876aa":"markdown","d098e707":"markdown"},"source":{"219fdfa7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom statistics import mean\n\nfrom collections import Counter\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9f1246fa":"high_s = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv', encoding=('windows-1252'))\nmedian_i = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/MedianHouseholdIncome2015.csv', encoding=('windows-1252'))\nshare_r = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv', encoding=('windows-1252'))\nkilled = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv', encoding=('windows-1252'))\nbelow_p = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv', encoding=('windows-1252'))","57d576d9":"below_p.info()","6a1f3d45":"below_p.poverty_rate.value_counts()","1e08ba8d":"below_p['Geographic Area'].unique()\n# len(below_p['Geographic Area'].unique())","527e5821":"below_p.poverty_rate.replace(['-'], 0.0, inplace=True)","dd49ec60":"below_p.poverty_rate = below_p.poverty_rate.astype('float')","b4dce5b2":"below_p.poverty_rate.value_counts()","3e1e6b8d":"area_list = list(below_p['Geographic Area'].unique())\narea_powerty_ratio = []\n\nfor i in area_list:\n    x = below_p[below_p['Geographic Area'] == i]\n    area_powerty_rate = mean(x.poverty_rate)\n    area_powerty_ratio.append(area_powerty_rate)\n\ndata = pd.DataFrame({'area_list': area_list, 'area_powerty_ratio': area_powerty_ratio})\nnew_index = (data.area_powerty_ratio.sort_values(ascending=False)).index.values\nsorted_data = data.reindex(new_index)\n\n# vis\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['area_list'],y=sorted_data['area_powerty_ratio'])\nplt.xticks(rotation = 60)\nplt.xlabel('States')\nplt.ylabel('Powerty ratio')\nplt.title('Powerty given states')\nplt.show()","fc0bb93a":"killed.head()","88b82d45":"killed.info()","6fab2fba":"killed.name.value_counts()","ecd711c7":"# Most common 15 name or surname of killed people\nseparate = killed.name[killed.name != 'TK TK'].str.split()\na, b = zip(*separate)\nname_list = a + b\nname_count = Counter(name_list)\nmost_common_names = name_count.most_common(15)\nx, y = zip(*most_common_names)\nx, y = list(x), list(y)\n\n# hue=None, data=None, order=None, hue_order=None, \n# estimator=<function mean at 0x000001AF9BDD6670>, \n# ci=95, n_boot=1000, units=None, seed=None, \n# orient=None, color=None, palette=None, saturation=0.75, \n# errcolor='.26', errwidth=None, capsize=None, dodge=True\n\nplt.figure(figsize=(15, 10))\nsns.barplot(x=x, y=y, palette = sns.cubehelix_palette(len(x), reverse=True), saturation=0.9)\nplt.xlabel('Name or Surname of killed people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 name or Surname of killed people')\nplt.show()","9b982675":"high_s.head()\nhigh_s.info()","ac2986b2":"high_s.percent_completed_hs.replace(['-'], 0.0, inplace=True)","d5cb7f65":"high_s.percent_completed_hs = high_s.percent_completed_hs.astype('float')\naria_list = high_s['Geographic Area'].unique()\narea_highschool = []\nfor i in aria_list:\n    x = high_s[high_s['Geographic Area'] == i]\n    area_highschool_rate = mean(x.percent_completed_hs)\n    area_highschool.append(area_highschool_rate)\n\n# sorting\ndata = pd.DataFrame({ 'aria_list': aria_list, 'area_highschool_ratio': area_highschool })\nnew_index = (data.area_highschool_ratio.sort_values(ascending=True)).index.values\nsorted_data2 = data.reindex(new_index)\n\n# viz\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2.aria_list, y=sorted_data2.area_highschool_ratio)\nplt.xticks(rotation=60)\nplt.xlabel('States')\nplt.ylabel('High_School Graduate Rate')\nplt.title(\"Percentage of Given State's Population Above 25 that Has Graduated High School\")\nplt.show()","20fa002a":"share_r.head(10)","57531ecc":" share_r.info()","f5597dfa":"# share_r.replace(['-'], 0.0, inplace=True)\nshare_r.replace([\"(X)\"], 0.0, inplace=True)\nshare_r.share_white = share_r.share_white.astype('float')\nshare_r.iloc[:, 2:] = share_r.iloc[:, 2:].astype(float)\naria_list = share_r['Geographic area'].unique()\n\nshare_white           = []\nshare_black           = []\nshare_native_american = []\nshare_asian           = []\nshare_hispanic        = []\n\nfor i in aria_list:\n    x = share_r[share_r['Geographic area'] == i]\n    share_white.append(mean(x.share_white))\n    share_black.append(mean(x.share_black))\n    share_native_american.append(mean(x.share_native_american))\n    share_asian.append(mean(x.share_asian))\n    share_hispanic.append(mean(x.share_hispanic))\n\n# vizualization \nf, ax = plt.subplots(figsize = (10, 15))\n# (<Figure size 1080x1080 with 1 Axes>,                       = f\n#  <matplotlib.axes._subplots.AxesSubplot at 0x7f56a1c0aa90>) = ax\n\nsns.barplot(x = share_white,           y = aria_list, color = 'green',  alpha = 0.8, label = 'White')\nsns.barplot(x =share_black,            y = aria_list, color = 'blue',   alpha = 0.7, label = 'Black')\nsns.barplot(x =share_native_american,  y = aria_list, color = 'yellow', alpha = 0.8, label = 'Native American')\nsns.barplot(x =share_asian,            y = aria_list, color = 'cyan',   alpha = 0.8, label = 'Asian')\nsns.barplot(x =share_hispanic,         y = aria_list, color = 'red',    alpha = 0.6, label = 'Hispanic')\n\nax.legend(loc='lower right', frameon=True) # legendary's alpha\nax.set(xlabel='Percentage of Races', ylabel = 'States', title = \"Percentage of State's population\")\nplt.show()","87771af9":"# high school graduation rate vs Poverty rate of each state\nsorted_data['area_powerty_ratio'] = sorted_data['area_powerty_ratio'] \/ max(sorted_data['area_powerty_ratio'])\nsorted_data2['area_highschool_ratio'] = sorted_data2['area_highschool_ratio'] \/ max(sorted_data2['area_highschool_ratio'])\n\ndata = pd.concat([sorted_data, sorted_data2['area_highschool_ratio']], axis = 1)\ndata.sort_values('area_powerty_ratio', inplace = True)\n\n# Vizualization\nf, ax = plt.subplots(figsize = (20, 10))\nsns.pointplot(x = 'area_list', y = 'area_powerty_ratio',    data = data, color = 'lime', label = 'Area Powert Ratio')\nsns.pointplot(x = 'area_list', y = 'area_highschool_ratio', data = data, color = 'red',  label = 'Area Highschool Ratio')\nplt.text(40, 0.35, 'high school graduation ratio', color = 'red', fontsize = 16, style = 'italic')\nplt.text(40, 0.3,  'poverty ratio', color = 'lime', fontsize = 16, style = 'italic')\nplt.xlabel('States', fontsize = 15, color = 'blue')\nplt.ylabel('Values', fontsize = 15, color = 'blue')\nplt.title('High School Graduate VS Povert Ratio', fontsize = 20, color = 'blue')\nplt.grid()","f7d5a671":"data.head(10)","05a795de":"g = sns.jointplot(data.area_powerty_ratio, data.area_highschool_ratio, kind = 'kde', size = 7)\n# plt.savefig('graph.png') # saving to computer\nplt.show()","dba075e3":"g = sns.jointplot('area_powerty_ratio', 'area_highschool_ratio', data = data, size = 7, ratio = 3, color='r')\n# plt.savefig('graph.png') # saving to computer\nplt.show()","81b41b9b":"g = sns.jointplot('area_powerty_ratio', 'area_highschool_ratio', data = data, kind = 'reg', size = 7, ratio = 3, color='r')\n# plt.savefig('graph.png') # saving to computer\nplt.show()","5020880a":"g = sns.jointplot('area_powerty_ratio', 'area_highschool_ratio', data = data, kind = 'hex', size = 7, ratio = 3, color='r')\n# plt.savefig('graph.png') # saving to computer\nplt.show()","87113f3f":"killed.race.head()","e97de55e":"killed.race.value_counts()","5b23fb81":"# Race rates according in killed data -- irqi(white, native american, black, asian, hispanic)\nkilled.race.dropna(inplace = True)\nlabels = killed.race.value_counts().index\ncolors = ['grey', 'blue', 'red', 'yellow', 'green', 'brown']\nexplode = [0, 0, 0, 0, 0, 0]\nsizes = killed.race.value_counts().values\n\n# vizual\nplt.figure(figsize = (10, 10))\nplt.pie(sizes, explode = explode, labels = labels, colors = colors, autopct = '%1.1f%%')\nplt.title('Killed People According to Races', color = 'blue', fontsize = 15)\nplt.show()","f78bbb07":"data.head()","d1b0015e":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# lmplot \n# Show the results of a linear regression within each dataset\nsns.lmplot(x = 'area_powerty_ratio', y = 'area_highschool_ratio', data = data)\nplt.show()","6ecaa3d3":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# cubehelix plot\nsns.kdeplot(data.area_powerty_ratio, data.area_highschool_ratio, shade = True, cut = 3)\nplt.show()","f81e6f8c":"# Show each distribution with both violins and points\n# Use cubehelix to get a custom sequential palette\npal = sns.cubehelix_palette(2, rot = -.5, dark = .3)\nplt.figure(figsize = (10, 7))\nsns.violinplot(data = data, palette = pal, inner = 'points')\nplt.show()","03f98ec6":"# correlation map\n# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\nf, ax = plt.subplots(figsize = (10, 8))\nsns.heatmap(data.corr(), annot = True, linewidths = 0.5, linecolor = 'gray', fmt = '.1f', ax = ax)\nplt.show()","87ae9336":"killed.manner_of_death.unique()","10f1fa46":"# manner of death\n# gender\n# age\n# Plot the orbital period with horizontal\nsns.boxplot(x=\"gender\", y=\"age\", hue=\"manner_of_death\", data=killed, palette=\"PRGn\")\nplt.show()","4441138c":"# swarm plot\n# manner of death\n# gender\n# age\nsns.swarmplot(x=\"gender\", y=\"age\", hue=\"manner_of_death\", data=killed)\nplt.show()","8f070588":"data.head()","9e081e87":"# pair plot\nsns.pairplot(data)\nplt.show()","b6afa608":"killed.gender.value_counts()","d70f7496":"killed.head()","be4ce64c":"# kill properties\nsns.countplot(killed.gender)\nplt.title(\"Gender\",color = 'blue',fontsize=15)\nplt.show()","553e506f":"# Manner of death\nsns.countplot(killed.manner_of_death)\nplt.title(\"Manner of death\",color = 'red',fontsize=15)\nplt.show()","c35cac4d":"# kill weapon\narmed = killed.armed.value_counts()\n# print(armed)\nplt.figure(figsize = (10, 7))\nsns.barplot(x = armed[:7].index, y = armed[:7].values)\nplt.ylabel('Number of Weapon')\nplt.xlabel('Weapon Types')\nplt.title('Kill weapon',color = 'green',fontsize=15)\nplt.show()","561be34b":"# age of killed people\nabove25 = ['above25' if i >=25 else 'below25' for i in killed.age]\ndf = pd.DataFrame({ 'age': above25 })\nsns.countplot(x = df.age)\nplt.ylabel('Number of Killed People')\nplt.title('Age of killed people',color = 'blue', fontsize=15)\nplt.show()","e539c226":"# Race of killed people -- irqi(white, native american, black, asian, hispanic)\nsns.countplot(data = killed, x = 'race')\nplt.title('Race of killed people',color = 'green',fontsize=15)\nplt.show()","5a4e6b89":"# Most dangerous cities\ncity = killed.city.value_counts()\nplt.figure(figsize = (10, 7))\nsns.barplot(x = city[:12].index, y = city[:12].values)\nplt.xticks(rotation = 45)\nplt.title('Most dangerous cities',color = 'blue',fontsize=15)\nplt.show()","540a0a98":"# Most dangerous states\nstate = killed.state.value_counts()\nplt.figure(figsize = (10, 7))\nsns.barplot(x = state[:20].index, y = state[:20].values)\nplt.xticks(rotation = 45)\nplt.title('Most dangerous states',color = 'green',fontsize=15)\nplt.show()","02ae7366":"# Having mental ilness or not for killed people\nsns.countplot(killed.signs_of_mental_illness)\nplt.xlabel('Mental illness')\nplt.ylabel('Number of Mental illness')\nplt.title('Having mental illness or not', color = 'red', fontsize = 15)\nplt.show()","159c9eb1":"# Threat types\nsns.countplot(killed.threat_level)\nplt.xlabel('Threat Types')\nplt.title('Threat types', color = 'blue', fontsize = 15)\nplt.show()","9157820f":"# Flee types\nsns.countplot(killed.flee)\nplt.xlabel('Flee Types')\nplt.title('Flee types', color = 'red', fontsize = 15)\nplt.show()","8e71db86":"# Having body cameras or not for police\nsns.countplot(killed.body_camera)\nplt.xlabel('Having Body Cameras')\nplt.title('Having body cameras or not on Police', color = 'blue',fontsize = 15)\nplt.show()","21afdc25":"# Kill numbers from states in kill data\nsta = killed.state.value_counts().index[:10]\nsns.barplot(x=sta,y = killed.state.value_counts().values[:10])\nplt.title('Kill Numbers from States',color = 'green',fontsize=15)\nplt.show()","45ad5e2d":"<a id=\"25\"><\/a><br>\n# 6. Kde Plot -- kernel density estimation","2d7ebe24":"<a id=\"17\"><\/a><br>\n## Having body cameras or not for police","16772007":"<a id=\"12\"><\/a><br>\n## Most dangerous cities","ba1b3b1e":"# Introduction -- Kirish\nThis notebook shows some usefull ways to vizualize fatal police shootings data in the USA by helping of seaborn libriary\n\nBu notebookda AQShda politsiya otib o'ldirilish datasini seaborn kutubxonasi yordami bilan vizualayz qilishni bir qancha yo'llarini ko'rsatadi\n\n## Content: -- Mundarija:\n1. [Read Datas -- Datani o'qish](#1)\n1. [Poverty rate of each state -- Har bir shtataning kambag'allik ko'rsatkichi](#2)\n1. [Most common 15 Name or Surname of killed people -- o'ldirilgan odamlarning 15 ta eng ko'p ishlatilgan ism yoki familiyasi](#3)\n1. [High school graduation rate of the population that is older than 25 in states -- ](#4)\n1. [Percentage of state\u2019s population according to races that are black.white,native american, asian and hispanic](#5)\n1. [High school graduation rate vs Poverty rate of each state](#6)\n1. [Kill properties](#7)\n     * [Manner of death](#8)\n     * [Kill weapon](#9)\n     * [Age of killed people](#10)\n     * [Race of killed people](#11)\n     * [Most dangerous cities](#12)\n     * [Most dangerous states](#13)\n     * [Having mental ilness or not for killed people](#14)\n     * [Threat types](#15)\n     * [Flee types](#16)\n     * [Having body cameras or not for police](#17)\n1. [Race rates according to states in kill data](#18)\n1. [Kill numbers from states in kill data](#19)\n\n## Plot Contents:\n1. [Bar Plot](#20)\n1. [Point Plot](#21)\n1. [Joint Plot](#22)\n1. [Pie Chart](#23)\n1. [Lm Plot](#24)\n1. [Kde Plot](#25)\n1. [Violin Plot](#26)\n1. [Heatmap](#27)\n1. [Box Plot](#28)\n1. [Swarm Plot](#29)\n1. [Pair Plot](#30)\n1. [Count Plot](#31)","44dd4d42":"<a id=\"10\"><\/a><br>\n## Age of killed people","ea7fe98a":"<a id=\"29\"><\/a><br>\n# 10. Swarm Plot\n\n<font style=\"margin-left: 30px; font-size: 18px;\"><b>*seaborn.swarmplot*<\/b>(x=None, y=None, hue=None, data=None, order=None, <br> \n<font style=\"margin-left: 30px;\">hue_order=None, dodge=False, orient=None, color=None, palette=None, <br>\n<font style=\"margin-left: 30px;\">size=5, edgecolor='gray', linewidth=0, ax=None, **kwargs)<br>","621d69fd":"<a id=\"16\"><\/a><br>\n## Flee types","9ac79086":"<a id=\"2\"><\/a><br>\n## Poverty rate of each state","bfc41b56":"<a id=\"1\"><\/a><br>\n# 1. Read Datas","259c555e":"<a id=\"24\"><\/a><br>\n# 5. Lm Plot","fbd6caf4":"<a id=\"22\"><\/a><br>\n# 3. Joint Plot\n\n<font style=\"margin-left: 30px; font-size: 18px;\"><b>*seaborn.jointplot*<\/b>(x, y, data=None, kind='scatter', stat_func=None, color=None,<br> \n<font style=\"margin-left: 30px;\">height=6, ratio=5, space=0.2, dropna=True, xlim=None, ylim=None, joint_kws=None, <br>\n<font style=\"margin-left: 30px;\">marginal_kws=None, annot_kws=None, **kwargs)<br>\n<br>Itself normalizes data -- O'zi normalize qiladi","90d426a3":"<a id=\"27\"><\/a><br>\n# 8. Heatmap","ff048e94":"<a id=\"4\"><\/a><br>\n## High school graduation rate of the population that is older than 25 in states","f2563582":"<a id=\"23\"><\/a><br>\n# 4. Pie Chart","83f7bd21":"<a id=\"7\"><\/a><br>\n# Kill properties","360976fc":"<a id=\"3\"><\/a><br>\n## Most common 15 Name or Surname of killed people","14123193":"<a id=\"28\"><\/a><br>\n# 9. Box plot","40218764":"<a id=\"19\"><\/a><br>\n## Kill numbers from states in kill data","4c444f42":"<a id=\"30\"><\/a><br>\n# 11. Pair Plot","2320f3a4":"<a id=\"18\"><\/a><br>\n## Race rates according to states in kill data","be18e9fc":"<a id=\"13\"><\/a><br>\n## Most dangerous states","a03f7843":"<a id=\"15\"><\/a><br>\n## Threat types","1f6e96db":"<a id=\"5\"><\/a><br>\n## Percentage of state's population according to races that are black,white,native american, asian and hispanic","fedb6785":"<a id=\"26\"><\/a><br>\n# 7. Violin Plot","05713251":"<a id=\"8\"><\/a><br>\n## Manner of death","863ad383":"<a id=\"20\"><\/a><br>\n# 1. Bar Plot","10fd1cca":"<a id=\"5\"><\/a><br>\n## High school graduation rate vs Poverty rate of each state","0fdb251d":"<a id=\"9\"><\/a><br>\n## Kill weapon","855fd863":"<a id=\"11\"><\/a><br>\n## Race of killed people","b15c4962":"<a id=\"21\"><\/a><br>\n# 2. Point Plot\n\n<font style=\"margin-left: 30px; font-size: 18px;\"><b>*seaborn.pointplot*<\/b>(*x*=None, *y*=None, hue=None, data=None, order=None, hue_order=None,<br>\n<font style=\"margin-left: 30px;\">estimator=<function mean at 0x105c7d9e0>, ci=95, n_boot=1000, units=None, seed=None, markers='o',<br>\n<font style=\"margin-left: 30px;\">linestyles='-', dodge=False, join=True, scale=1, orient=None, color=None, palette=None, errwidth=None, <br>\n<font style=\"margin-left: 30px;\">capsize=None, ax=None, **kwargs)","2ec876aa":"<a id=\"14\"><\/a><br>\n## Having mental ilness or not for killed people","d098e707":"<a id=\"31\"><\/a><br>\n# 12. Count Plot"}}