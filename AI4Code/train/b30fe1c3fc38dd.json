{"cell_type":{"de618b5a":"code","c927154c":"code","3bd39223":"code","51e8dab6":"code","cc0223bb":"code","1cd37ecf":"code","382b3199":"code","ba63cea0":"code","039175eb":"code","d072e69c":"code","2255f291":"code","47978bcf":"code","7b32c733":"code","3796dd34":"code","32225460":"code","bf888ecf":"code","5fec09f8":"code","245c63a9":"markdown","d46db4e2":"markdown","02876f27":"markdown","977d56d7":"markdown","9bb95122":"markdown","cb4aca23":"markdown"},"source":{"de618b5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c927154c":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import (\n    LinearRegression,\n    Ridge,\n    Lasso\n)\n%matplotlib inline","3bd39223":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv') #\u8a13\u7df4\u30c7\u30fc\u30bf\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv') #\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30de\u30fc\u30b8\ntrain['WhatIsData'] = 'Train'\ntest['WhatIsData'] = 'Test'\ntest['SalePrice'] = 9999999999\nalldata = pd.concat([train,test],axis=0).reset_index(drop=True)\nprint('The size of train is : ' + str(train.shape))\nprint('The size of test is : ' + str(test.shape))","51e8dab6":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u72b6\u6cc1\ntrain.isnull().sum()[train.isnull().sum()>0].sort_values(ascending=False)","cc0223bb":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u72b6\u6cc1\ntest.isnull().sum()[test.isnull().sum()>0].sort_values(ascending=False)","1cd37ecf":"# \u6b20\u640d\u3092\u542b\u3080\u30ab\u30e9\u30e0\u306e\u30c7\u30fc\u30bf\u578b\u3092\u78ba\u8a8d\nna_col_list = alldata.isnull().sum()[alldata.isnull().sum()>0].index.tolist() # \u6b20\u640d\u3092\u542b\u3080\u30ab\u30e9\u30e0\u3092\u30ea\u30b9\u30c8\u5316\nalldata[na_col_list].dtypes.sort_values() #\u30c7\u30fc\u30bf\u578b","382b3199":"# \u30c7\u30fc\u30bf\u578b\u306b\u5fdc\u3058\u3066\u6b20\u640d\u5024\u3092\u88dc\u5b8c\u3059\u308b\n# float\u306e\u5834\u5408\u306f0\n# object\u306e\u5834\u5408\u306f'NA'\nna_float_cols = alldata[na_col_list].dtypes[alldata[na_col_list].dtypes=='float64'].index.tolist() #float64\nna_obj_cols = alldata[na_col_list].dtypes[alldata[na_col_list].dtypes=='object'].index.tolist() #object\n# float64\u578b\u3067\u6b20\u640d\u3057\u3066\u3044\u308b\u5834\u5408\u306f0\u3092\u4ee3\u5165\nfor na_float_col in na_float_cols:\n    alldata.loc[alldata[na_float_col].isnull(),na_float_col] = 0.0\n# object\u578b\u3067\u6b20\u640d\u3057\u3066\u3044\u308b\u5834\u5408\u306f'NA'\u3092\u4ee3\u5165\nfor na_obj_col in na_obj_cols:\n    alldata.loc[alldata[na_obj_col].isnull(),na_obj_col] = 'NA'","ba63cea0":"# \u30de\u30fc\u30b8\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u72b6\u6cc1\nalldata.isnull().sum()[alldata.isnull().sum()>0].sort_values(ascending=False)","039175eb":"# \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u7279\u5fb4\u91cf\u3092\u30ea\u30b9\u30c8\u5316\ncat_cols = alldata.dtypes[alldata.dtypes=='object'].index.tolist()\n# \u6570\u5024\u5909\u6570\u306e\u7279\u5fb4\u91cf\u3092\u30ea\u30b9\u30c8\u5316\nnum_cols = alldata.dtypes[alldata.dtypes!='object'].index.tolist()\n# \u30c7\u30fc\u30bf\u5206\u5272\u304a\u3088\u3073\u63d0\u51fa\u6642\u306b\u5fc5\u8981\u306a\u30ab\u30e9\u30e0\u3092\u30ea\u30b9\u30c8\u5316\nother_cols = ['Id','WhatIsData']\n# \u4f59\u8a08\u306a\u8981\u7d20\u3092\u30ea\u30b9\u30c8\u304b\u3089\u524a\u9664\ncat_cols.remove('WhatIsData') #\u5b66\u7fd2\u30c7\u30fc\u30bf\u30fb\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u533a\u5225\u30d5\u30e9\u30b0\u9664\u53bb\nnum_cols.remove('Id') #Id\u524a\u9664\n# \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u3092\u30c0\u30df\u30fc\u5316\nalldata_cat = pd.get_dummies(alldata[cat_cols])\n# \u30c7\u30fc\u30bf\u7d71\u5408\nall_data = pd.concat([alldata[other_cols],alldata[num_cols],alldata_cat],axis=1)","d072e69c":"sns.distplot(train['SalePrice'])","2255f291":"#\u5bfe\u6570\u5909\u63db\nsns.distplot(np.log(train['SalePrice']))","47978bcf":"#Lasso\u56de\u5e30\u3092\u7528\u3044\u305f\u4e88\u6e2c\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9","7b32c733":"# \u30de\u30fc\u30b8\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\ntrain_ = all_data[all_data['WhatIsData']=='Train'].drop(['WhatIsData','Id'], axis=1).reset_index(drop=True)\ntest_ = all_data[all_data['WhatIsData']=='Test'].drop(['WhatIsData','SalePrice'], axis=1).reset_index(drop=True)\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u5185\u306e\u5206\u5272\ntrain_x = train_.drop('SalePrice',axis=1)\ntrain_y = np.log(train_['SalePrice'])\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u5185\u306e\u5206\u5272\ntest_id = test_['Id']\ntest_data = test_.drop('Id',axis=1)","3796dd34":"scaler = StandardScaler()  #\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\nparam_grid = [0.001, 0.01, 0.1, 1.0, 10.0,100.0,1000.0] #\u30d1\u30e9\u30e1\u30fc\u30bf\u30b0\u30ea\u30c3\u30c9\ncnt = 0\nfor alpha in param_grid:\n    ls = Lasso(alpha=alpha) #Lasso\u56de\u5e30\u30e2\u30c7\u30eb\n    pipeline = make_pipeline(scaler, ls) #\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u751f\u6210\n    X_train, X_test, y_train, y_test = train_test_split(train_x, train_y, test_size=0.3, random_state=0)\n    pipeline.fit(X_train,y_train)\n    train_rmse = np.sqrt(mean_squared_error(y_train, pipeline.predict(X_train)))\n    test_rmse = np.sqrt(mean_squared_error(y_test, pipeline.predict(X_test)))\n    if cnt == 0:\n        best_score = test_rmse\n        best_estimator = pipeline\n        best_param = alpha\n    elif best_score > test_rmse:\n        best_score = test_rmse\n        best_estimator = pipeline\n        best_param = alpha\n    else:\n        pass\n    cnt = cnt + 1\n    \nprint('alpha : ' + str(best_param))\nprint('test score is : ' +str(best_score))","32225460":"#\u30e2\u30c7\u30eb\u306e\u691c\u8a3c","bf888ecf":"plt.subplots_adjust(wspace=0.4)\nplt.subplot(121)\nplt.scatter(np.exp(y_train),np.exp(best_estimator.predict(X_train)))\nplt.subplot(122)\nplt.scatter(np.exp(y_test),np.exp(best_estimator.predict(X_test)))","5fec09f8":"# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u751f\u6210\n# test_id\nls = Lasso(alpha = 0.01)\npipeline = make_pipeline(scaler, ls)\npipeline.fit(train_x,train_y)\ntest_SalePrice = pd.DataFrame(np.exp(pipeline.predict(test_data)),columns=['SalePrice'])\ntest_Id = pd.DataFrame(test_id,columns=['Id'])\n#sub = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\n#sub['SalePrice'] = list(map(int, test_SalePrice))\npd.concat([test_Id, test_SalePrice],axis=1).to_csv('output.csv',index=False)","245c63a9":"#\u4e88\u6e2c\u7d50\u679c\u306e\u63d0\u51fa","d46db4e2":"#\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u8fbc\u307f","02876f27":"#\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u30c0\u30df\u30fc\u5316","977d56d7":"#\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","9bb95122":"#\u76ee\u7684\u5909\u6570\u306e\u5206\u5e03\u5909\u63db","cb4aca23":"#\u6b20\u640d\u5024\u306e\u88dc\u5b8c\uff08\u5b66\u7fd2\u30c7\u30fc\u30bf\uff09"}}