{"cell_type":{"0745245c":"code","6105e571":"code","876770c7":"code","e7dfd754":"code","fb1073ad":"code","7c7f8ec3":"code","f8c0df37":"code","779bd941":"code","bbf21036":"code","f06ba976":"markdown","2cffe1c1":"markdown","fb4d6c77":"markdown"},"source":{"0745245c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6105e571":"dtype = {\n    'store_nbr': 'category',\n    'family': 'category',\n    'sales': 'float32',\n    'onpromotion': 'uint64',\n}\n\nstore_sales = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/train.csv',\n                dtype=dtype,\n                parse_dates=[\"date\"],\n                infer_datetime_format=True,\n                )\n\nstore_sales = store_sales.set_index('date').to_period('D')\ngrocery = store_sales[store_sales['family'] == 'GROCERY I']\ngrocery_sales = grocery.groupby('date').sum()['sales']\ngrocery_sales = grocery_sales.to_frame()","876770c7":"import matplotlib.pyplot as plt\n\n# Set Matplotlib defaults\nplt.style.use(\"seaborn-whitegrid\")\nplt.rc(\"figure\", autolayout=True, figsize=(11, 4))\nplt.rc(\n    \"axes\",\n    labelweight=\"bold\",\n    labelsize=\"large\",\n    titleweight=\"bold\",\n    titlesize=14,\n    titlepad=10,\n)\nplot_params = dict(\n    color=\"0.75\",\n    style=\".-\",\n    markeredgecolor=\"0.25\",\n    markerfacecolor=\"0.25\",\n    legend=False,\n)\n%config InlineBackend.figure_format = 'retina'","e7dfd754":"ax = grocery_sales.plot(**plot_params)\nax.set(title=\"Grocery Sales\", ylabel=\"Millions of Dollars\");","fb1073ad":"trend = grocery_sales.rolling(\n    window=365,       # 365-day window\n    center=True,      # puts the average at the center of the window\n    min_periods=183,  # choose about half the window size\n).mean() \n\n# Make a plot\nax = grocery_sales.plot(**plot_params, alpha=0.5)\nax = trend.plot(ax=ax, linewidth=3)","7c7f8ec3":"from statsmodels.tsa.deterministic import DeterministicProcess\n\ny = grocery_sales.copy()\n\ndp = DeterministicProcess(\n    index=y.index,  # dates from the training data\n    order=3,             # order of the polynomial\n)\n\n# Create the feature set for the dates given in y.index\nX = dp.in_sample()\n\n# Create features for a 30-day forecast.\nX_fore = dp.out_of_sample(steps=30)","f8c0df37":"print(X)","779bd941":"from sklearn.linear_model import LinearRegression\nimport pandas as pd\n\nmodel = LinearRegression()\nmodel.fit(X, y)\n\ny_pred = pd.Series(model.predict(X)[:,0], index=X.index)\ny_fore = pd.Series(model.predict(X_fore)[:,0], index=X_fore.index)\n\nax = y.plot(**plot_params, title=\"Grocery Sales\", ylabel=\"items sold\")\nax = y_pred.plot(ax=ax, linewidth=3, label=\"Trend\", color='C0')\nax = y_fore.plot(ax=ax, linewidth=3, label=\"Trend Forecast\", color='C3')","bbf21036":"from pyearth import Earth\n\nfrom pyearth import Earth\n\n# Target and features are the same as before\ny = grocery_sales.copy()\ndp = DeterministicProcess(index=y.index, order=1)\nX = dp.in_sample()\nX_fore = dp.out_of_sample(steps=30)\n\n# Fit a MARS model with `Earth`\nmodel = Earth()\nmodel.fit(X, y)\n\ny_pred = pd.Series(model.predict(X), index=X.index)\ny_fore = pd.Series(model.predict(X_fore), index=X_fore.index)\n\nax = y.plot(**plot_params, title=\"Grocery Sales\", ylabel=\"items sold\")\nax = y_pred.plot(ax=ax, linewidth=3, label=\"Trend\", color='C0')\nax = y_fore.plot(ax=ax, linewidth=3, label=\"Trend Forecast\", color='C3')","f06ba976":"## Create a Trend Feature\n\nUse `DeterministicProcess` to create a feature set for a cubic trend model. Also create features for a 30-day forecast.","2cffe1c1":"## Fit trend with splines\n\n*Splines* are a nice alternative to polynomials when you want to fit a trend. The *Multivariate Adaptive Regression Splines* (MARS) algorithm in the `pyearth` library is powerful and easy to use.","fb4d6c77":"## Determine trend with a moving average plot"}}