{"cell_type":{"d2fab1cc":"code","8225d406":"code","0e788b5a":"code","6d199709":"code","cb47789d":"code","afb4274a":"code","ec07692e":"code","cdcc3f06":"code","e8f602e7":"code","6fe56d05":"code","7b64e36e":"code","892b1b38":"code","a61ac57e":"code","2fdca875":"code","b1260831":"code","473f1b36":"code","89eacb2d":"code","930d3521":"code","c23156fe":"markdown","648711ca":"markdown","ecfa3246":"markdown","d310d205":"markdown","a9d4c3ad":"markdown","0dab6458":"markdown","ea73b1a7":"markdown","63acf7c3":"markdown","99718de6":"markdown","19fe3715":"markdown","a8ab9f61":"markdown","7a439270":"markdown","602cd92b":"markdown","8d633cf0":"markdown","6dc3d6fa":"markdown","b7df73ed":"markdown"},"source":{"d2fab1cc":"import numpy as np, pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, precision_recall_curve, plot_precision_recall_curve\nimport nltk\nfrom nltk.corpus import stopwords\nfrom bs4 import BeautifulSoup\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom imblearn.over_sampling import SMOTE\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8225d406":"df = pd.read_csv(\"\/kaggle\/input\/sentiment-analysis-on-movie-reviews\/train.tsv.zip\", sep=\"\\t\")\ndf.head()","0e788b5a":"print(\"Unique Values of Sentiment are: {}\".format(\", \".join(list(map(str,df[\"Sentiment\"].unique())))))","6d199709":"X = df[\"Phrase\"].tolist()\nY = df[\"Sentiment\"].apply(lambda i: 0 if i <= 2 else 1)","cb47789d":"Y.value_counts()","afb4274a":"lemmatizer = WordNetLemmatizer()\ndef proc_text(messy): #input is a single string\n    first = BeautifulSoup(messy, \"lxml\").get_text() #gets text without tags or markup, remove html\n    second = re.sub(\"[^a-zA-Z]\",\" \",first) #obtain only letters\n    third = second.lower().split() #obtains a list of words in lower case\n    fourth = set([lemmatizer.lemmatize(str(x)) for x in third]) #lemmatizing\n    stops = set(stopwords.words(\"english\")) #faster to search through a set than a list\n    almost = [w for w in fourth if not w in stops] #remove stop words\n    final = \" \".join(almost)\n    return final","ec07692e":"X = [proc_text(i) for i in X]","cdcc3f06":"X_train, X_test, y_train, y_test = train_test_split(X, Y, random_state=100, test_size=0.2, stratify=Y)","e8f602e7":"print(\"Training Set has {} Positive Labels and {} Negative Labels\".format(sum(y_train), len(y_train) - sum(y_train)))\nprint(\"Test Set has {} Positive Labels and {} Negative Labels\".format(sum(y_test), len(y_test) - sum(y_test)))","6fe56d05":"pos_weights = (len(y_train) - sum(y_train)) \/ (sum(y_train)) \npipeline_tf = Pipeline([\n    ('tfidf', TfidfVectorizer()),\n    ('classifier', DecisionTreeClassifier(random_state=100, class_weight={0: 1, 1: pos_weights}))\n])","7b64e36e":"pipeline_tf.fit(X_train, y_train)","892b1b38":"predictions = pipeline_tf.predict(X_test)\npredicted_proba = pipeline_tf.predict_proba(X_test)","a61ac57e":"print(\"Accuracy Score Before Thresholding: {}\".format(accuracy_score(y_test, predictions)))\nprint(\"Precision Score Before Thresholding: {}\".format(precision_score(y_test, predictions)))\nprint(\"Recall Score Before Thresholding: {}\".format(recall_score(y_test, predictions)))\nprint(\"F1 Score Before Thresholding: {}\".format(f1_score(y_test, predictions)))\nprint(\"ROC AUC Score: {}\".format(roc_auc_score(y_test, predicted_proba[:, -1])))","2fdca875":"y_actual = pd.Series(y_test, name='Actual')\ny_predict_tf = pd.Series(predictions, name='Predicted')\ndf_confusion = pd.crosstab(y_actual, y_predict_tf, rownames=['Actual'], colnames=['Predicted'], margins=True)\nprint(df_confusion)","b1260831":"precision_, recall_, proba = precision_recall_curve(y_test, predicted_proba[:, -1])\n\ndisp = plot_precision_recall_curve(pipeline_tf, X_test, y_test)\ndisp.ax_.set_title('Precision-Recall curve')","473f1b36":"optimal_proba_cutoff = sorted(list(zip(np.abs(precision_ - recall_), proba)), key=lambda i: i[0], reverse=False)[0][1]\nroc_predictions = [1 if i >= optimal_proba_cutoff else 0 for i in predicted_proba[:, -1]]","89eacb2d":"print(\"Accuracy Score Before and After Thresholding: {}, {}\".format(accuracy_score(y_test, predictions), accuracy_score(y_test, roc_predictions)))\nprint(\"Precision Score Before and After Thresholding: {}, {}\".format(precision_score(y_test, predictions), precision_score(y_test, roc_predictions)))\nprint(\"Recall Score Before and After Thresholding: {}, {}\".format(recall_score(y_test, predictions), recall_score(y_test, roc_predictions)))\nprint(\"F1 Score Before and After Thresholding: {}, {}\".format(f1_score(y_test, predictions), f1_score(y_test, roc_predictions)))","930d3521":"y_actual = pd.Series(y_test, name='Actual')\ny_predict_tf = pd.Series(roc_predictions, name='Predicted')\ndf_confusion = pd.crosstab(y_actual, y_predict_tf, rownames=['Actual'], colnames=['Predicted'], margins=True)\nprint (df_confusion)","c23156fe":"## Obtain Optimal Probability Thresholds with PR Curve <a class=\"anchor\" id=\"10\"><\/a>\n\nIn this notebook, we will be obtaining the optimal probability threshold based on minimizing the distance between precision and recall scores.","648711ca":"## PR Curve <a class=\"anchor\" id=\"9\"><\/a>\n\nThe curve is plots values of precision scores (y-axis) against those of recall scores (x-axis) and these values are plotted at various probability thresholds.\n\nThere can be two ways of obtaining a more optimal probability threshold for the positive class:\n\n1. Minimize the difference between precision and recall scores\n    - Select the probability threshold of which precision and recall scores are closest to each other\n   \n2. Euclidean Distance\n    - The most optimal point on the PR curve should be (1,1), i.e. precision and recall scores of 1.\n    - Select the probability threshold as the most optimal one if precision and recall scores are closest fo the ones mentioned in the previous point in terms of Euclidean distance, i.e. $$ d(recall, precision) = \\sqrt{({recall_1 - recall_2})^{2} + {precision_1 - precision_2})^{2}}. $$","ecfa3246":"## Import Packages <a class=\"anchor\" id=\"1\"><\/a>","d310d205":"## Preprocess Texts <a class=\"anchor\" id=\"4\"><\/a>\n\nSome typical text preprocessing steps will be performed:\n\n1. Removal of markup, html\n2. Obtain only words in lower case\n3. Lemmatization\n4. Removal of stop words","a9d4c3ad":"## Feature Extraction and Train Model <a class=\"anchor\" id=\"6\"><\/a>\n\nFeatures will be built using tfidf.\n\nModel selected here is the RandomForestClassifier, larger weight is given to the positive class since the number of samples with positive labels are significantly smaller. The weights would be calculated as \n\n$$ W_p = \\frac{N_n}{N_p}, $$\n\nwhere $ W_p $ is a float indicating the weight for positive class, $ N_n $ is the number of negative samples and $ N_p $ is the number of positive samples. The output of this computation will be included in the *class_weight* parameter of RandomForestClassifier.\n\nThese steps will be collated by using sklearn's Pipeline.","0dab6458":"## Extracting X, Y <a class=\"anchor\" id=\"3\"><\/a>\n\nFor this dataset, we shall let sentiment values above 2 represent positive ones. As a result, positive movie reviews make up less than 50% of the dataset. ","ea73b1a7":"# Obtain Optimal Probability Threshold Using PR Curve\n\nThe aim of this notebook is to demonstrate how to use the Precision Recall (PR) curve to obtain optimal probability threshold to improve the predictive capability of a machine learning model.\n\nThis notebook is similar to https:\/\/www.kaggle.com\/nicholasgah\/obtain-optimal-probability-threshold-using-roc, just that now, the curve used is that of precision-recall (PR).","63acf7c3":"## Evaluate Model (After Thresholding) <a class=\"anchor\" id=\"11\"><\/a>","99718de6":"## Table of Contents\n\n1. [Import Packages](#1)\n2. [Import Data](#2)\n3. [Extracting X, Y](#3)\n4. [Preprocess Texts](#4)\n5. [Train Test Split](#5)\n6. [Feature Extraction and Train Model](#6)\n7. [Evaluate Model (Before Thresholding)](#7)\n8. [Confusion Matrix of Model (Before Thresholding)](#8)\n9. [PR Curve](#9)\n10. [Obtain Optimal Probability Thresholds with PR Curve](#10)\n11. [Evaluate Model (After Thresholding)](#11)\n12. [Confusion Matrix of Model (After Thresholding)](#12)\n13. [Conclusion](#13)\n14. [References](#14)","19fe3715":"## Conclusion <a class=\"anchor\" id=\"13\"><\/a>\n\nObtaining optimal probability thresholds using the PR curves is one way of maximizing the predictive capability of your machine learning model. There are a few ways of obtaining these thresholds and they do not necessarily have the same effects on performance. Of course, you can pick probability thresholds manually with the aim of maximizing either precision or recall, which depends on the problem you are trying to solve.\n\nExample problems which exemplify the need to maximize precision or recall are as follows:\n\n- **Minimize number of false positives, i.e. maximize precision**: You have a model which identifies spam and non-spam emails. This model should focus on reducing the number of falsely identified spam emails as this would increase the possibility of users missing out on important emails.\n\n- **Minimize number of false negatives, i.e. maximize recall**: You have a model which identifies cancer and non-cancer cases. This model should focus on reducing the number of false identified non-cancer cases since this would prevent concerned parties from seeking early treatment for cancer.\n\nAnother important point to note is that when obtaining optimal probability thresholds, precision-recall (PR) curves are normally preferred as compared to receiver operating characteristic (ROC) curves when dealing with datasets with **severe class imbalance**. PR curves focus more on the minority class whereas ROC curves attempts to place equal emphasis on both classes.","a8ab9f61":"## References <a class=\"anchor\" id=\"14\"><\/a>\n\n- https:\/\/github.com\/nicholaslaw\/roc-optimal-cutoff\n- https:\/\/www.kaggle.com\/nicholasgah\/obtain-optimal-probability-threshold-using-roc\n- https:\/\/machinelearningmastery.com\/roc-curves-and-precision-recall-curves-for-imbalanced-classification\/\n- https:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_precision_recall.html#sphx-glr-auto-examples-model-selection-plot-precision-recall-py","7a439270":"## Import Data <a class=\"anchor\" id=\"2\"><\/a>\n\nWith respect to the dataset, we will only focus on the columns named \"Phrase\" and \"Sentiment\". The unique values in \"Sentiment\" are 0, 1, 2, 3, 4, where increasing values would represent more positive sentiment. Hence, this would make this a binary classification problem.\n\n**For this notebook, we shall just focus on the training set as the main objective is to showcase the retrieval of optimal probability thresholds using the PR Curve.**","602cd92b":"## Confusion Matrix of Model (Before Thresholding) <a class=\"anchor\" id=\"8\"><\/a>","8d633cf0":"## Train Test Split <a class=\"anchor\" id=\"5\"><\/a>","6dc3d6fa":"## Confusion Matrix of Model (After Thresholding) <a class=\"anchor\" id=\"12\"><\/a>","b7df73ed":"## Evaluate Model (Before Thresholding) <a class=\"anchor\" id=\"7\"><\/a>"}}