{"cell_type":{"dfde4850":"code","b423ea07":"code","e74aef2e":"code","01858af5":"code","3c93af97":"code","57f9840c":"code","3d479a9b":"code","58f56a57":"code","69ae1e53":"code","f0ddc50d":"code","1a79ee4d":"code","5d034b1a":"code","d7817ec4":"code","a2612e1a":"code","86dc795b":"code","611b8ae8":"code","49db27eb":"code","d9066124":"code","9920fdd6":"markdown","dee1e0ed":"markdown","4c2f4fb5":"markdown"},"source":{"dfde4850":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b423ea07":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport time\nimport seaborn as sn","e74aef2e":"dtrain = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/train.csv\")\ndtest = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/test.csv\")","01858af5":"dtrain.tail()","3c93af97":"dtest.tail()","57f9840c":"print(\"Data NULL: \\n\", dtrain.isnull().sum())\nprint(\"\\nData duplicated: \", dtrain.duplicated().sum())","3d479a9b":"round(dtrain.describe(),1)","58f56a57":"dtrain.info()","69ae1e53":"dtrain['date'] = pd.to_datetime(dtrain.date)","f0ddc50d":"dtrain.family.unique()","1a79ee4d":"bread_df = dtrain[dtrain.family == 'BREAD\/BAKERY']\nbread_df","5d034b1a":"data = dtrain[dtrain.family == 'BREAD\/BAKERY']\ndata = data[['date','sales']]\ndata['date'] = pd.to_datetime(data['date']) - pd.to_timedelta(7, unit='d')\ndata = data.groupby(pd.Grouper(key='date', freq='W-MON'))['sales'].mean().reset_index().sort_values('date')\ndata.set_index('date',inplace=True)\n\ntemp = data['sales']\nT = 10\nX = []\nY = []\n\nfor i in range(len(temp)-T):\n    x = temp[i:i+T]\n    X.append(x)\n    y = temp[i+T]\n    Y.append(y)\n    \nX = np.array(X).reshape(-1, T)\nY = np.array(Y)\n\nprint(X.shape)\nprint(Y.shape)","d7817ec4":"#sample = bread_df['sales'].resample('4W').mean()\n\nplt.figure(figsize=(20,5))\nplt.plot(data['sales'], lw=3)\nplt.xlabel('Month')\nplt.ylabel('Sales')\nplt.title(\"Sales 2013-2017\")\nplt.grid()\nplt.show()","a2612e1a":"### Autoregressive LINEAR MODEL\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import layers, callbacks\n\nN = int(0.2 * len(X))\ni = layers.Input(shape=(T,))\nx = layers.Dense(1)(i)\nmodel = Model(i, x)\nmodel.compile(loss='mse', \n              optimizer=Adam(0.001), \n              metrics=['mae'])\n\nearly_stopping = callbacks.EarlyStopping(\n    monitor =\"val_loss\", \n    mode =\"min\", \n    patience=5\n)\n\n# train the RNN\nr = model.fit(X[:-N], Y[:-N], \n              epochs=200, \n              validation_data=(X[-N:], Y[-N:]), \n              callbacks=[early_stopping], shuffle=True)","86dc795b":"# Plot loss per iteration\nplt.figure(figsize=(10,5))\nplt.plot(r.history['loss'], label='loss')\nplt.plot(r.history['val_loss'], label='val_loss')\nplt.legend()","611b8ae8":"N = int(0.2 * len(X))\noutputs = model.predict(X[-N:])\nprint(outputs.shape)\npredictions = outputs.reshape(-1)\n\nplt.figure(figsize=(20,5))\nplt.plot(Y[-N:], label='Observation')\nplt.plot(predictions, label='predictions')\nplt.title(\"Linear Regression Predictions\")\nplt.legend()\nplt.show()","49db27eb":"# Plot the data\nN = int(0.2*len(X))\ntrain = data[:-N]\nvalid = data[-N:]\nvalid['Predictions'] = predictions","d9066124":"# Visualize the data\nplt.figure(figsize=(20,5))\n#title = stock + ' Model Forecast'\n#ylabel = stock + ' Close Price USD ($)'\n\nplt.plot(train['sales'])\nplt.plot(valid[['sales','Predictions']])\n\nplt.xlabel('Date', fontsize=14)\nplt.ylabel('Sales ($)', fontsize=14)\nplt.title('Prediction using Linear Model', fontsize=16)\nplt.grid()\nplt.legend(['Training Data', 'Validated Data', 'Predicted Data'], loc='upper left')\n\nplt.show()","9920fdd6":"## Model","dee1e0ed":"### Prediction","4c2f4fb5":"### Training the model"}}