{"cell_type":{"d47511b1":"code","bc038ffa":"code","2c561e1b":"code","e0ed82ad":"code","292f57d8":"code","0b964379":"code","20ae4e0d":"code","ede70dc6":"code","7d4f0eec":"code","5cfce765":"code","b09a28b5":"code","bf01ceab":"code","c427dd66":"code","959f7066":"code","8c3e1865":"code","edbcef5f":"code","ec3a9427":"code","4e012ca5":"code","2010ca8f":"code","958ae070":"code","d714dc5e":"code","e5f27967":"code","89ae26fe":"code","8cf8f959":"code","09c5cc99":"code","daf2693d":"code","220f7fdb":"code","6124c3bf":"code","3e15d9cd":"code","41884849":"code","ddce290b":"markdown","1d369566":"markdown","2b3372b6":"markdown","d40721a1":"markdown","b2f7859e":"markdown","535214ce":"markdown","d3a3c429":"markdown","e303cd00":"markdown","d2858df8":"markdown","744f90d7":"markdown","f9fd4c14":"markdown","c34e98ca":"markdown","4e966c91":"markdown","5bfb0571":"markdown","644a2cb8":"markdown","fd8baa5c":"markdown","1d4b8cd1":"markdown","da4ceb08":"markdown","61bf6be6":"markdown","f545388b":"markdown","fac77d46":"markdown","a2509cc4":"markdown","274eeb4f":"markdown","deeb6503":"markdown","304ef71f":"markdown","8a268f55":"markdown","a0781f02":"markdown","437bba76":"markdown","bea16062":"markdown","228daeaa":"markdown","717728ee":"markdown","1ab5ecba":"markdown","71eda792":"markdown","5e6d7485":"markdown","7a67f062":"markdown","bc197bc6":"markdown","041f5c3b":"markdown","461754e3":"markdown","f8e997b3":"markdown","f6282a18":"markdown","e4141123":"markdown","47078d4a":"markdown","902d5d68":"markdown","b427ad73":"markdown","adbc63d2":"markdown","13a8872e":"markdown"},"source":{"d47511b1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n\nimport warnings\nfrom termcolor import colored\nwarnings.filterwarnings(\"ignore\")","bc038ffa":"df = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","2c561e1b":"print(f\"Shape of dataset: {colored(df.shape, 'yellow')}\")","e0ed82ad":"df.head()","292f57d8":"df = df.rename(columns = {'DiabetesPedigreeFunction':'DPF'})","0b964379":"dict = {}\nfor i in list(df.columns):\n    dict[i] = df[i].value_counts().shape[0]\n\npd.DataFrame(dict,index=[\"unique count\"]).transpose()","20ae4e0d":"con_cols = list(df.drop('Outcome',axis=1).columns)\ntarget = ['Outcome']\nprint(f\"The columns are : {colored(con_cols, 'yellow')}\")\nprint(f\"The target is   : {colored(target,'yellow')}\")","ede70dc6":"df[con_cols].describe().transpose()","7d4f0eec":"df.isnull().sum()","5cfce765":"fig = plt.figure(figsize=(18,7))\ngs = fig.add_gridspec(1,2)\ngs.update(wspace=0.3, hspace=0.15)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\n\nbackground_color = \"#c9c9ee\"\ncolor_palette = [\"#f56476\",\"#ff8811\",\"#001427\",\"#6369d1\",\"#f0f66e\"]\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color)\n\n# Title of the plot\nax0.text(0.5,0.5,\"Count of the target\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\n\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\n\n# Target Count\nax1.text(0.45,510,\"Output\",fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax1, data=df, x = 'Outcome',palette = color_palette)\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\nax1.set_xticklabels([\"Low chances of diabetes(0)\",\"High chances of diabetes(1)\"])\n\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax1.spines[\"top\"].set_visible(False)\nax1.spines[\"left\"].set_visible(False)\nax1.spines[\"right\"].set_visible(False)","b09a28b5":"fig = plt.figure(figsize=(18,15))\ngs = fig.add_gridspec(3,3)\ngs.update(wspace=0.5, hspace=0.25)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[0,2])\nax3 = fig.add_subplot(gs[1,0])\nax4 = fig.add_subplot(gs[1,1])\nax5 = fig.add_subplot(gs[1,2])\nax6 = fig.add_subplot(gs[2,0])\nax7 = fig.add_subplot(gs[2,1])\nax8 = fig.add_subplot(gs[2,2])\n\nbackground_color = \"#c9c9ee\"\n# c9c9ee\ncolor_palette = [\"#f56476\",\"#ff8811\",\"#ff0040\",\"#ff7f6c\",\"#f0f66e\",\"#990000\"]\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color)\nax2.set_facecolor(background_color)\nax3.set_facecolor(background_color)\nax4.set_facecolor(background_color)\nax5.set_facecolor(background_color)\nax6.set_facecolor(background_color)\nax7.set_facecolor(background_color)\nax8.set_facecolor(background_color)\n\n# Title of the plot\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax0.tick_params(left=False, bottom=False)\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.text(0.5,0.5,\n         'Boxenplot plot for various\\n features\\n_________________',\n         horizontalalignment='center',\n         verticalalignment='center',\n         fontsize=18, fontweight='bold',\n         fontfamily='serif',\n         color=\"#000000\")\n\n# Pregnancies \nax1.text(-0.18, 19, 'Pregnancies', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax1,y=df['Pregnancies'],palette=[\"#f56476\"],width=0.6)\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\n\n# Glucose \nax2.text(-0.1, 217, 'Glucose', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax2,y=df['Glucose'],palette=[\"#ff8811\"],width=0.6)\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\n\n# BloodPressure \nax3.text(-0.20, 132, 'BloodPressure', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax3.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax3,y=df['BloodPressure'],palette=[\"#ff0040\"],width=0.6)\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\n\n# SkinThickness \nax4.text(-.2, 110, 'SkinThickness', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax4.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax4,y=df['SkinThickness'],palette=[\"#ff7f6c\"],width=0.6)\nax4.set_xlabel(\"\")\nax4.set_ylabel(\"\")\n\n# Insulin \nax5.text(-0.10, 900, 'Insulin', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax5.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax5,y=df['Insulin'],palette=[\"#f0f66e\"],width=0.6)\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\n\n# BMI \nax6.text(-0.08, 77, 'BMI', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax6.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax6,y=df['BMI'],palette=[\"#990000\"],width=0.6)\nax6.set_xlabel(\"\")\nax6.set_ylabel(\"\")\n\n# DPF \nax7.text(-0.065, 2.8, 'DPF', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax7.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax7,y=df['DPF'],palette=[\"#3339FF\"],width=0.6)\nax7.set_xlabel(\"\")\nax7.set_ylabel(\"\")\n\n# Age \nax8.text(-0.08, 86, 'Age', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax8.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax8,y=df['Age'],palette=[\"#34495E\"],width=0.6)\nax8.set_xlabel(\"\")\nax8.set_ylabel(\"\")\n\n\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)\n    ax6.spines[s].set_visible(False)\n    ax7.spines[s].set_visible(False)\n    ax8.spines[s].set_visible(False)","bf01ceab":"fig = plt.figure(figsize=(18,15))\ngs = fig.add_gridspec(3,3)\ngs.update(wspace=0.5, hspace=0.25)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[0,2])\nax3 = fig.add_subplot(gs[1,0])\nax4 = fig.add_subplot(gs[1,1])\nax5 = fig.add_subplot(gs[1,2])\nax6 = fig.add_subplot(gs[2,0])\nax7 = fig.add_subplot(gs[2,1])\nax8 = fig.add_subplot(gs[2,2])\n\nbackground_color = \"#c9c9ee\"\n# c9c9ee\ncolor_palette = [\"#f56476\",\"#ff8811\",\"#ff0040\",\"#ff7f6c\",\"#f0f66e\",\"#990000\"]\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color)\nax2.set_facecolor(background_color)\nax3.set_facecolor(background_color)\nax4.set_facecolor(background_color)\nax5.set_facecolor(background_color)\nax6.set_facecolor(background_color)\nax7.set_facecolor(background_color)\nax8.set_facecolor(background_color)\n\n# Title of the plot\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax0.tick_params(left=False, bottom=False)\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.text(0.5,0.5,\n         'Histogram for various\\n features\\n_________________',\n         horizontalalignment='center',\n         verticalalignment='center',\n         fontsize=18, fontweight='bold',\n         fontfamily='serif',\n         color=\"#000000\")\n\n# Pregnancies \nax1.text(4, 260, 'Pregnancies', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax1,x=df['Pregnancies'],color=\"#f56476\",kde=True)\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\n\n# Glucose \nax2.text(55, 105, 'Glucose', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax2,x=df['Glucose'],color=\"#ff8811\",kde=True)\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\n\n# BloodPressure \nax3.text(35, 115, 'BloodPressure', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax3.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax3,x=df['BloodPressure'],color=\"#ff0040\",kde=True)\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\n\n# SkinThickness \nax4.text(25, 250, 'SkinThickness', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax4.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax4,x=df['SkinThickness'],color=\"#ff7f6c\",kde=True)\nax4.set_xlabel(\"\")\nax4.set_ylabel(\"\")\n\n# Insulin \nax5.text(250, 430, 'Insulin', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax5.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax5,x=df['Insulin'],color=\"#f0f66e\",kde=True)\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\n\n# BMI \nax6.text(25, 100, 'BMI', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax6.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax6,x=df['BMI'],palette=[\"#990000\"],kde=True)\nax6.set_xlabel(\"\")\nax6.set_ylabel(\"\")\n\n# DPF \nax7.text(1, 150, 'DPF', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax7.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax7,x=df['DPF'],color=\"#3339FF\",kde=True)\nax7.set_xlabel(\"\")\nax7.set_ylabel(\"\")\n\n# Age \nax8.text(40, 230, 'Age', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax8.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax8,x=df['Age'],color=\"#34495E\",kde=True)\nax8.set_xlabel(\"\")\nax8.set_ylabel(\"\")\n\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)\n    ax6.spines[s].set_visible(False)\n    ax7.spines[s].set_visible(False)\n    ax8.spines[s].set_visible(False)","c427dd66":"df_corr = df.corr().transpose()\ndf_corr","959f7066":"fig = plt.figure(figsize=(10,10))\ngs = fig.add_gridspec(1,1)\ngs.update(wspace=0.3, hspace=0.15)\nax0 = fig.add_subplot(gs[0,0])\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \n\ndf_corr = df[con_cols].corr().transpose()\nmask = np.triu(np.ones_like(df_corr))\nax0.text(2,-0.1,\"Correlation Matrix\",fontsize=22, fontweight='bold', fontfamily='serif', color=\"#000000\")\nsns.heatmap(df_corr,mask=mask,fmt=\".1f\",annot=True)\nplt.show()","8c3e1865":"fig = plt.figure(figsize=(18,25))\ngs = fig.add_gridspec(8,2)\ngs.update(wspace=0.5, hspace=0.5)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[1,0])\nax3 = fig.add_subplot(gs[1,1])\nax4 = fig.add_subplot(gs[2,0])\nax5 = fig.add_subplot(gs[2,1])\nax6 = fig.add_subplot(gs[3,0])\nax7 = fig.add_subplot(gs[3,1])\nax8 = fig.add_subplot(gs[4,0])\nax9 = fig.add_subplot(gs[4,1])\nax10 = fig.add_subplot(gs[5,0])\nax11 = fig.add_subplot(gs[5,1])\nax12 = fig.add_subplot(gs[6,0])\nax13 = fig.add_subplot(gs[6,1])\nax14 = fig.add_subplot(gs[7,0])\nax15 = fig.add_subplot(gs[7,1])\n\n\nbackground_color = \"#c9c9ee\"\ncolor_palette = [\"#f56476\",\"#ff8811\",\"#ff0040\",\"#ff7f6c\",\"#f0f66e\",\"#990000\"]\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color) \nax2.set_facecolor(background_color)\nax3.set_facecolor(background_color)\nax4.set_facecolor(background_color)\nax5.set_facecolor(background_color) \nax6.set_facecolor(background_color) \nax7.set_facecolor(background_color)\nax8.set_facecolor(background_color)\nax9.set_facecolor(background_color)\nax10.set_facecolor(background_color)\nax11.set_facecolor(background_color)\nax12.set_facecolor(background_color)\nax13.set_facecolor(background_color)\nax14.set_facecolor(background_color)\nax15.set_facecolor(background_color)\n\n# Pregnancies title\nax0.text(0.5,0.5,\"Distribution of Pregnancies\\naccording to\\n target variable\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax0.spines[\"bottom\"].set_visible(False)\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\n\n# Pregnancies\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(ax=ax1, data=df, x='Pregnancies',hue=\"Outcome\", fill=True,palette=[\"#ff8811\",\"#3339FF\"], alpha=.5, linewidth=0)\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\n\n# Glucose title\nax2.text(0.5,0.5,\"Distribution of Glucose\\naccording to\\n target variable\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax2.spines[\"bottom\"].set_visible(False)\nax2.set_xticklabels([])\nax2.set_yticklabels([])\nax2.tick_params(left=False, bottom=False)\n\n# Glucose\nax3.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(ax=ax3, data=df, x='Glucose',hue=\"Outcome\", fill=True,palette=[\"#ff8811\",\"#3339FF\"], alpha=.5, linewidth=0)\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\n\n# BloodPressure title\nax4.text(0.5,0.5,\"Distribution of BloodPressure\\naccording to\\n target variable\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax4.spines[\"bottom\"].set_visible(False)\nax4.set_xticklabels([])\nax4.set_yticklabels([])\nax4.tick_params(left=False, bottom=False)\n\n# BloodPressure\nax5.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(ax=ax5, data=df, x='BloodPressure',hue=\"Outcome\", fill=True,palette=[\"#ff8811\",\"#3339FF\"], alpha=.5, linewidth=0)\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\n\n# SkinThickness title\nax6.text(0.5,0.5,\"Distribution of SkinThickness\\naccording to\\n target variable\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax6.spines[\"bottom\"].set_visible(False)\nax6.set_xticklabels([])\nax6.set_yticklabels([])\nax6.tick_params(left=False, bottom=False)\n\n# SkinThickness\nax7.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(ax=ax7, data=df, x='SkinThickness',hue=\"Outcome\", fill=True,palette=[\"#ff8811\",\"#3339FF\"], alpha=.5, linewidth=0)\nax7.set_xlabel(\"\")\nax7.set_ylabel(\"\")\n\n# Insulin title\nax8.text(0.5,0.5,\"Distribution of Insulin\\naccording to\\n target variable\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax8.spines[\"bottom\"].set_visible(False)\nax8.set_xticklabels([])\nax8.set_yticklabels([])\nax8.tick_params(left=False, bottom=False)\n\n# Insulin\nax9.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(ax=ax9, data=df, x='Insulin',hue=\"Outcome\", fill=True,palette=[\"#ff8811\",\"#3339FF\"], alpha=.5, linewidth=0)\nax9.set_xlabel(\"\")\nax9.set_ylabel(\"\")\n\n# BMI title\nax10.text(0.5,0.5,\"Distribution of BMI\\naccording to\\n target variable\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax10.spines[\"bottom\"].set_visible(False)\nax10.set_xticklabels([])\nax10.set_yticklabels([])\nax10.tick_params(left=False, bottom=False)\n\n# BMI\nax11.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(ax=ax11, data=df, x='BMI',hue=\"Outcome\", fill=True,palette=[\"#ff8811\",\"#3339FF\"], alpha=.5, linewidth=0)\nax11.set_xlabel(\"\")\nax11.set_ylabel(\"\")\n\n# DPF title\nax12.text(0.5,0.5,\"Distribution of DPF\\naccording to\\n target variable\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax12.spines[\"bottom\"].set_visible(False)\nax12.set_xticklabels([])\nax12.set_yticklabels([])\nax12.tick_params(left=False, bottom=False)\n\n# DPF\nax13.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(ax=ax13, data=df, x='DPF',hue=\"Outcome\", fill=True,palette=[\"#ff8811\",\"#3339FF\"], alpha=.5, linewidth=0)\nax13.set_xlabel(\"\")\nax13.set_ylabel(\"\")\n\n# Age title\nax14.text(0.5,0.5,\"Distribution of Age\\naccording to\\n target variable\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax14.spines[\"bottom\"].set_visible(False)\nax14.set_xticklabels([])\nax14.set_yticklabels([])\nax14.tick_params(left=False, bottom=False)\n\n# Age\nax15.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(ax=ax15, data=df, x='Age',hue=\"Outcome\", fill=True,palette=[\"#ff8811\",\"#3339FF\"], alpha=.5, linewidth=0)\nax15.set_xlabel(\"\")\nax15.set_ylabel(\"\")\n\n\n\nfor i in [\"top\",\"left\",\"right\"]:\n    ax0.spines[i].set_visible(False)\n    ax1.spines[i].set_visible(False)\n    ax2.spines[i].set_visible(False)\n    ax3.spines[i].set_visible(False)\n    ax4.spines[i].set_visible(False)\n    ax5.spines[i].set_visible(False)\n    ax6.spines[i].set_visible(False)\n    ax7.spines[i].set_visible(False)\n    ax8.spines[i].set_visible(False)\n    ax9.spines[i].set_visible(False)\n    ax10.spines[i].set_visible(False)\n    ax11.spines[i].set_visible(False)\n    ax12.spines[i].set_visible(False)\n    ax13.spines[i].set_visible(False)\n    ax14.spines[i].set_visible(False)\n    ax15.spines[i].set_visible(False)\n","edbcef5f":"sns.pairplot(df,hue='Outcome',palette = [\"#ff8811\",\"#3339FF\"])\nplt.show()","ec3a9427":"fig = px.scatter_3d(df, x='Age', y='Glucose', z='BloodPressure',\n              color='Outcome',size_max=18,color_continuous_scale=[\"#3339FF\", \"#ff8811\"])\nfig.update_layout({\"template\":\"plotly_dark\"})\nfig.show()","4e012ca5":"fig = px.scatter_3d(df, x='Glucose', y='Insulin', z='DPF',\n              color='Outcome',size_max=18,color_continuous_scale=[\"#3339FF\", \"#ff8811\"])\nfig.update_layout({\"template\":\"plotly_dark\"})\nfig.show()","2010ca8f":"print(f\"Shape of dataset: {colored(df.shape, 'yellow')}\")","958ae070":"df.drop(df[df[\"Pregnancies\"] > 14].index,inplace=True)\ndf.drop(df[df[\"Glucose\"] < 50].index,inplace=True)\ndf.drop(df[df[\"BloodPressure\"] > 120].index,inplace=True)\ndf.drop(df[df[\"SkinThickness\"] > 80].index,inplace=True)\ndf.drop(df[df[\"Insulin\"] > 600].index,inplace=True)\ndf.drop(df[df[\"BMI\"] > 55].index,inplace=True)\ndf.drop(df[df[\"DPF\"] > 2].index,inplace=True)\ndf.drop(df[df[\"Age\"] > 70].index,inplace=True)\n\nprint(f\"Shape of dataset: {colored(df.shape, 'yellow')}\")","d714dc5e":"sns.kdeplot(df['Insulin'],color='Orange',fill=True)","e5f27967":"df['Insulin'] = df['Insulin'].map(lambda i : np.log(i) if i > 0 else 0)\nsns.kdeplot(df['Insulin'],color='Orange',fill=True)","89ae26fe":"# importing the scaler\nfrom sklearn.preprocessing import StandardScaler\n\n# creating a copy of dataframe\ndf1 = df\ncol_cols = list(df1.columns)\n\n# removing the target variable from the columns list\ncol_cols.pop() \n\n# separating the features and target \nX = df1.drop(['Outcome'],axis=1)\ny = df1[['Outcome']]\n\n# instantiating the scaler\nscaler = StandardScaler()\nX[col_cols] = scaler.fit_transform(X[col_cols])\nprint(\"The first 5 rows of X are\")\nX.head()","8cf8f959":"# Train test split\nfrom sklearn.model_selection import train_test_split\n\n# Base Models\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\n\n# Ensembling and Boosting\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\n\n# Metrics\nfrom sklearn.metrics import accuracy_score, classification_report, roc_curve\n\n# Cross Validation\nfrom sklearn.model_selection import cross_val_score\n\n# Hyper-parameter tuning\nfrom functools import partial\nfrom skopt import gp_minimize\nfrom skopt import space\nfrom sklearn import model_selection\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV","09c5cc99":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y , test_size = 0.2, random_state = 42)\nprint(f\"The shape of X_train is      {colored(X_train.shape,'yellow')}\")\nprint(f\"The shape of X_test is       {colored(X_test.shape,'yellow')}\")\nprint(f\"The shape of y_train is      {colored(y_train.shape,'yellow')}\")\nprint(f\"The shape of y_test is       {colored(y_test.shape,'yellow')}\")","daf2693d":"models = [\n    ('SVC', SVC()),\n    ('DecisionTreeClassifier',DecisionTreeClassifier()),\n    ('KNeighborsClassifier',KNeighborsClassifier()),\n    ('LogisticRegression',LogisticRegression()),\n    ('RandomForestClassifier',RandomForestClassifier()),\n    ('AdaBoostClassifier',AdaBoostClassifier()),\n    ('GradientBoostingClassifier',GradientBoostingClassifier())\n]\n\nprint(\"The accuracy scores of the models are :\")\nfor model_name, model in models:\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    print(f\"{colored(model_name,'blue')}\")\n    print(f\"{colored(accuracy_score(y_test,y_pred), 'yellow')}\\n\")","220f7fdb":"# define the model\nclassifier = DecisionTreeClassifier()\n\n# define a grid of parameters\nparam_grid = {'criterion':['gini','entropy'],\n              'splitter':['best','random'],\n              'max_depth':[2,3,4,5,6,7,8],\n              'max_features':['auto','sqrt','log2'],\n             }\n\n# initialize grid search\nmodel = GridSearchCV(\nestimator=classifier, param_grid=param_grid, scoring=\"accuracy\", verbose=10,\nn_jobs=1,\ncv=5 )\n\n# fit the model and extract best score\nmodel.fit(X,y)","6124c3bf":"print(f\"{colored('Decision Tree Classifier', 'blue')}\")\nprint(f\"Best score : {colored(model.best_score_,'yellow')}\")\n\nprint(\"Best parameters set:\")\nbest_parameters = model.best_estimator_.get_params()\nfor param_name in sorted(param_grid.keys()):\n    print(f\"\\t{param_name}: {colored(best_parameters[param_name],'yellow')}\")","3e15d9cd":"# define the model\nclassifier = KNeighborsClassifier()\n\n# define a grid of parameters\nparam_grid = {'n_neighbors':[2,3,4,5,6,7,8],\n              'weights':['uniform','distance'],\n              'algorithm':['auto','ball_tree','kd_tree','brute'],\n              'leaf_size':[26,27,28,29,30,31]\n             }\n\n# initialize grid search\nmodel = GridSearchCV(\nestimator=classifier, param_grid=param_grid, scoring=\"accuracy\", verbose=10,\nn_jobs=1,\ncv=5 )\n\n# fit the model and extract best score\nmodel.fit(X,y)","41884849":"print(f\"{colored('K Neighbors Classifier', 'blue')}\")\nprint(f\"Best score : {colored(model.best_score_,'yellow')}\")\n\nprint(\"Best parameters set:\")\nbest_parameters = model.best_estimator_.get_params()\nfor param_name in sorted(param_grid.keys()):\n    print(f\"\\t{param_name}: {colored(best_parameters[param_name],'yellow')}\")","ddce290b":"#### 1.3 Task <a id=4><\/a>\nTo predict the onset of diabetes based on diagnostic measures.","1d369566":"#### 5.2 Train\/test split <a id=19><\/a>","2b3372b6":"##### 3.2.4 Scatter plot of BloodPressure vs Glucose vs Age wrt Outcome ","d40721a1":"#### 4.3 Removing the skewness <a id=15><\/a>","b2f7859e":"#### 5.3 Base Modeling <a id=20><\/a>","535214ce":"##### 2.3.2 Preview of the first five rows of the data","d3a3c429":"##### 3.2.1 Correlation matrix of features","e303cd00":"#### 4.2 Removing the outliers <a id=14><\/a>","d2858df8":"### 3. Exploratory Data Analysis <a id=9><\/a>","744f90d7":"##### 3.2.5 Scatter plot of Glucose vs Insulin vs DPF wrt Outcome ","f9fd4c14":"#### 4.4 Making features model ready <a id=16><\/a>","c34e98ca":"#### 5.1 Packages <a id=18><\/a>","4e966c91":"##### 5.4.2 K Neighbors Classifier tuning","5bfb0571":"##### 2.3.6 Missing values","644a2cb8":"##### 3.2.2 Distribution of features according to target variable","fd8baa5c":"#### 5.4 Hyperparameter tuning using GridSearchCV <a id=21><\/a>","1d4b8cd1":"#### 1.1 Context <a id=2><\/a>\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.","da4ceb08":"### 5. Modeling <a id=17><\/a>","61bf6be6":"<h1 style=\"color:Orange;\"><center>Pima Indians Diabetes - EDA and Prediction<\/center><\/h1> ","f545388b":"##### 3.2.3 Pair plot - one plot to rule them all","fac77d46":"##### 2.3.5 Separating into features and targets","a2509cc4":"#### 2.1 Packages <a id=6><\/a>","274eeb4f":"##### 4.3.1 Checking the distribution of `Insulin`","deeb6503":"### 2. Preparation <a id=5><\/a>","304ef71f":"Table of Contents:\n1. [Introduction](#1)\n    - 1.1 [Context](#2)\n    - 1.2 [Data Dictionary](#3)\n    - 1.3 [Task](#4)\n2. [Preparation](#5)\n    - 2.1 [Packages](#6)\n    - 2.2 [Data](#7)\n    - 2.3 [Understanding Data](#8)\n3. [Exploratory Data Analysis](#9)\n    - 3.1 [Univariate Analysis](#10)\n    - 3.2 [Bivariate Analysis](#11)\n4. [Data Preprocessing](#12)\n    - 4.1 [Conclusions from EDA](#13)\n    - 4.2 [Removing the outliers](#14)\n    - 4.3 [Removing the skewness](#15)\n    - 4.4 [Making features model ready](#16)\n5. [Modeling](#17)\n    - 5.1 [Packages](#18)\n    - 5.1 [Train\/test split](#19)\n    - 5.2 [Base Modeling](#20)\n    - 5.3 [Hyperparameter tuning using GridSearchCV](#21)\n    - 5.4 [Bayesian Optimization with gausian process](#22)","8a268f55":"##### 2.3.6 Summary statistics","a0781f02":"##### 5.3.1 Training the data with base models without any hyper-parameter tuning","437bba76":"#### 3.1 Univariate Analysis <a id=10><\/a>","bea16062":"##### 5.4.1 Decision Tree Classifier tuning","228daeaa":"##### 3.1.2 Boxenplot of features","717728ee":"##### 2.3.1 The shape of the data","1ab5ecba":"##### 3.1.3 Histogram of features","71eda792":"##### 2.3.4 Checking the number of unique values in each column","5e6d7485":"##### 3.1.1 Count of target variable","7a67f062":"### If you like the notebook, consider giving an upvote.\nCheck out my other notebooks\n1. https:\/\/www.kaggle.com\/namanmanchanda\/star-wars-classifier\n2. https:\/\/www.kaggle.com\/namanmanchanda\/gradient-descent-101\n3. https:\/\/www.kaggle.com\/namanmanchanda\/cat-vs-dog-classifier-10-lines-of-code-fast-ai","bc197bc6":"### 1. Introduction <a id=1><\/a>","041f5c3b":"#### 4.1 Conclusions from EDA <a id=13><\/a>\n1. There are no NaN values in the data.\n2. They are a very less number of outliers in all features.\n3. There is no apparent linear correlation between feature variable according to the heatmap.\n4. The distribution curve of `insulin` and `DPF` is right skewed.\n5. The distribution curve of `Glucose` wrt `Outcome` shows that there are less number of people with high Glucose level but they have higher chances of diabetes.\n6. The `BloodPressure` lies between 40 and 100, and there are less number of people with diabetes in this range.\n7. The plots `3.2.3` tells the following -\n    - Over the `Pregnancy` range, females with high glucose have Diabetes.\n    - As `Insulin` increase, and as `Glucose`, there are higher chances of Diabetes.\n    - As `BMI` increase, and as `Glucose`, there are higher chances of Diabetes.\n    - `Age` alone isn't really an indicator of Diabetes.\n8. Middle aged people with high `Glucose` level and high `BloodPressure` level have higher chances of Diabetes which is quite intuitive as well.\n","461754e3":"#### 2.2 Data <a id=7><\/a>","f8e997b3":"#### 2.3 Understanding Data <a id=8><\/a>","f6282a18":"#### 3.2 Bivariate Analysis <a id=11><\/a>","e4141123":"##### 2.3.3 Renaming `DiabetesPedigreeFunction` to `DPF` for better consistency","47078d4a":"##### 4.2.2 Removing the outliers and checking the shape","902d5d68":"### 4. Data Preprocessing <a id=12><\/a>","b427ad73":"##### 4.2.1 The shape of dataset before removing the outliers","adbc63d2":"#### 1.2 Data Dictionary <a id=3><\/a>\n`Pregnancies` - Number of times pregnant\n\n`Glucose` - Plasma glucose concentration - 2 hours in an oral glucose tolerance test\n\n`BloodPressure` - Diastolic blood pressure (mm Hg)\n\n`SkinThickness` - Triceps skin fold thickness (mm)\n\n`Insulin` - 2-Hour serum insulin (mu U\/ml)\n\n`BMI` - Body mass index\n\n`DiabetesPedigreeFunction` - Diabetes pedigree function\n\n`Age` - Age (years)\n\n`Outcome` - Class variable (0 or 1)","13a8872e":"##### 4.3.2 Removing the skewness using a log function and checking the distribution again"}}