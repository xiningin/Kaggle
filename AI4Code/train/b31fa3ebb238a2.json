{"cell_type":{"044cd187":"code","db76628d":"code","70d0dc95":"code","86e5aadb":"code","4ddbbb2f":"code","73d427df":"code","29bc7132":"code","fa3a34f5":"code","bdb9b08c":"code","c67b8b9a":"code","6cb71e4e":"code","33a9d656":"code","565044ef":"code","8e0a3596":"code","bb881e59":"code","d4168123":"code","7396b30d":"code","5f9b9da5":"code","2a51954e":"code","d402496b":"code","0730737b":"markdown","5bef4063":"markdown","01f651d2":"markdown","6aa4db57":"markdown","5ba1f5d9":"markdown","bea2cb27":"markdown","3b02d30e":"markdown","4daddb43":"markdown","438a5eeb":"markdown","8fb0bf58":"markdown","8dee3383":"markdown","b50d40b7":"markdown","70da00e8":"markdown","b3fd6099":"markdown","6c637bda":"markdown","6d3d8e56":"markdown","ef952706":"markdown","427df940":"markdown","1ef1db08":"markdown","0ab5972f":"markdown"},"source":{"044cd187":"!pip install --upgrade --no-cache-dir --quiet lightautoml","db76628d":"import pandas as pd\nfrom lightautoml.automl.presets.tabular_presets import (\n    TabularAutoML,\n    TabularUtilizedAutoML,\n)\nfrom lightautoml.tasks import Task\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.model_selection import train_test_split","70d0dc95":"data = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")","86e5aadb":"data.info()","4ddbbb2f":"data.head(3)","73d427df":"data.describe()","29bc7132":"data[\"claim\"].value_counts()","fa3a34f5":"RANDOM_STATE = 42\nTIMEOUT = 7200\nN_FOLDS = 10","bdb9b08c":"data_train, data_valid = train_test_split(\n    data,\n    test_size=0.2,\n    stratify=data[\"claim\"],\n    random_state=RANDOM_STATE,\n)","c67b8b9a":"def f1_prob_score(y_true, y_pred):\n    return f1_score(y_true, (y_pred > 0.5).astype(int))\n\n\ndef accuracy_prob_score(y_true, y_pred):\n    return accuracy_score(y_true, (y_pred > 0.5).astype(int))","6cb71e4e":"task = Task(\"binary\", metric=f1_prob_score)","33a9d656":"roles = {\"target\": \"claim\", \"drop\": [\"id\"]}","565044ef":"automl = TabularAutoML(\n    task=task,\n    timeout=TIMEOUT,\n    cpu_limit=4,\n    general_params={\n        \"use_algos\": [\n            [\"lgb\", \"lgb_tuned\", \"linear_l2\", \"cb\", \"cb_tuned\"],\n        ],\n    },\n    reader_params={\n        \"cv\": N_FOLDS,\n        \"random_state\": RANDOM_STATE,\n    },\n)","8e0a3596":"oof_pred = automl.fit_predict(data_train, roles=roles)","bb881e59":"pred_valid = automl.predict(data_valid)\n\nprint(\"Accuracy\")\nprint(\"OOF:\", accuracy_prob_score(data_train[\"claim\"].values, oof_pred.data[:, 0]))\nprint(\"VAL:\", accuracy_prob_score(data_valid[\"claim\"].values, pred_valid.data[:, 0]))","d4168123":"automl = TabularUtilizedAutoML(\n    task=task,\n    timeout=TIMEOUT,\n    cpu_limit=4,\n    general_params={\n        \"use_algos\": [\n            [\"lgb\", \"lgb_tuned\", \"linear_l2\", \"cb\", \"cb_tuned\"],\n            [\"lgb\", \"lgb_tuned\", \"linear_l2\", \"cb\", \"cb_tuned\"],\n        ],\n    },\n    reader_params={\n        \"cv\": N_FOLDS,\n        \"random_state\": RANDOM_STATE,\n    },\n)","7396b30d":"oof_pred = automl.fit_predict(data_train, roles=roles)","5f9b9da5":"pred_valid = automl.predict(data_valid)\n\nprint(\"Accuracy\")\nprint(\"OOF:\", accuracy_prob_score(data_train[\"claim\"].values, oof_pred.data[:, 0]))\nprint(\"VAL:\", accuracy_prob_score(data_valid[\"claim\"].values, pred_valid.data[:, 0]))","2a51954e":"automl = TabularUtilizedAutoML(\n    task=task,\n    timeout=TIMEOUT,\n    cpu_limit=4,\n    general_params={\n        \"use_algos\": [\n            [\"lgb\", \"lgb_tuned\", \"linear_l2\", \"cb\", \"cb_tuned\"],\n            [\"lgb\", \"lgb_tuned\", \"linear_l2\", \"cb\", \"cb_tuned\"],\n        ],\n    },\n    reader_params={\n        \"cv\": N_FOLDS,\n        \"random_state\": RANDOM_STATE,\n    },\n)\n\noof_pred = automl.fit_predict(data, roles=roles)\n\npred_test = automl.predict(test)","d402496b":"submission = pd.DataFrame({\"id\": test.id, \"claim\": (pred_test.data[:, 0] > 0.5).astype(int)})\n\nsubmission.to_csv(\"submission.csv\", index=False)","0730737b":"Role contains information about the column, which determines how it is processed ([doc](https:\/\/lightautoml.readthedocs.io\/en\/latest\/_modules\/lightautoml\/dataset\/roles.html)).","5bef4063":"### Step 2. Create task","01f651d2":"---","6aa4db57":"TabularAutoML with TimeUtilization ([src](https:\/\/github.com\/sberbank-ai-lab\/LightAutoML\/blob\/master\/lightautoml\/automl\/presets\/tabular_presets.py)).","5ba1f5d9":"### Step 4. Setup TabularAutoML, predict to valid data and check scores","bea2cb27":"## Write submission","3b02d30e":"### Step 0. Split data for train and validation","4daddb43":"# Tabular Playground Series - Sep 2021 : LightAutoML Baseline","438a5eeb":"### Step 1. Create metrics for LightAutoML","8fb0bf58":"---","8dee3383":"In this notebook we will use cross-validation for 10 folds with a timeout of 1200 seconds. ","b50d40b7":"Specify task (binary classification, multiclass classification, regression), metrics, losses ([doc](https:\/\/lightautoml.readthedocs.io\/en\/latest\/generated\/lightautoml.tasks.base.Task.html#lightautoml.tasks.base.Task)).","70da00e8":"## LightAutoML","b3fd6099":"Classic preset - work with tabular data. Supported data roles - numbers, dates, categories ([src](https:\/\/github.com\/sberbank-ai-lab\/LightAutoML\/blob\/master\/lightautoml\/automl\/presets\/tabular_presets.py)).","6c637bda":"### Step 5. Setup TabularUtilizedAutoML, predict to valid data and check scores","6d3d8e56":"### Data info","ef952706":"### Step 3. Setup roles","427df940":"### Step 6. Fit TabularUtilizedAutoML on full train data and predict to test data","1ef1db08":"## Load data","0ab5972f":"---"}}