{"cell_type":{"b325637b":"code","7756911c":"code","563afe8c":"code","d0cc08a1":"code","9a2054a0":"code","73907ed3":"code","8b2d5199":"code","28e54298":"code","f64edee5":"code","ec2d0d50":"code","05210d49":"code","fb5710f4":"code","df2586c1":"code","5d091a09":"code","645cb7a0":"code","83ac3f88":"code","8efff218":"code","8adff0db":"code","e0508dde":"code","8da19b40":"code","ec528c1b":"code","5b8e1294":"code","9d7b0135":"code","8ceafa55":"code","b773e72a":"code","626bc772":"code","3ad12638":"code","5764f753":"code","cf58a96b":"code","e8ad4b2a":"code","9311ff97":"code","602593b2":"code","8760d20c":"code","e0bb555a":"code","c5f3a472":"code","9301914c":"code","b08f6984":"code","5167730c":"code","8a380421":"code","63206552":"code","86479def":"code","84544729":"code","2f141389":"code","5a04349e":"code","238953c0":"code","e73221d8":"code","2f271171":"code","364a1707":"code","92ae963c":"code","bb31e4d0":"code","361e3225":"code","b86d7bc3":"code","a6f6d045":"code","a6333728":"code","25e76f2b":"code","fe5ab917":"code","77b9b39f":"code","4aa9c637":"code","1bf8f292":"code","c17aecd4":"code","a15bb134":"code","1b1aab29":"code","a233df97":"code","8da381a3":"code","aa005d97":"code","4e5be8b7":"code","4522ad91":"code","560d11eb":"code","608bdd31":"code","c99c22c8":"code","d68d8c52":"code","2b8997fd":"code","10ee5a8c":"code","b78c7a83":"code","06578f98":"code","d4d673ef":"code","be7c6e5b":"code","152e110c":"code","30300fab":"code","b9d835bf":"code","ab247489":"code","7219c308":"code","738ead01":"code","ad2968c7":"code","6ffd56c5":"code","8a37db72":"code","2ea0621f":"code","2511378f":"code","ba2ef635":"code","059880ed":"code","e54fd237":"code","63e70e16":"code","ff02ce9b":"code","15d921e3":"code","70cd494d":"code","e4885493":"code","b361e009":"code","2ff3e685":"code","2a236d92":"markdown","dbe59a59":"markdown","5263e00d":"markdown","600d714f":"markdown","fdf33ff1":"markdown","d842eaba":"markdown","bcd3cd56":"markdown","bc641974":"markdown","75853182":"markdown","48f4a20a":"markdown","e4421c2d":"markdown","f544a925":"markdown","468f0cae":"markdown","27664b5d":"markdown","c7f9921a":"markdown","b6479af3":"markdown","dca9e8aa":"markdown","dac5a564":"markdown"},"source":{"b325637b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7756911c":"import pandas as pd","563afe8c":"import numpy as np","d0cc08a1":"import os","9a2054a0":"import matplotlib.pyplot as plt","73907ed3":"print(os.listdir(\"..\/input\"))","8b2d5199":"df=pd.read_csv(\"..\/input\/data.csv\")","28e54298":"df.head()","f64edee5":"df.info()","ec2d0d50":"df.shape","05210d49":"df.columns","fb5710f4":"df.isnull()","df2586c1":"df.isnull().sum()","5d091a09":"df['diagnosis'].isnull()","645cb7a0":"df.isnull().sum()","83ac3f88":"y=df['diagnosis']","8efff218":"X= df.loc[:,'radius_mean':'fractal_dimension_worst']","8adff0db":"X.head()","e0508dde":"y=y.map({'M':1,'B':0})","8da19b40":"y.head()","ec528c1b":"from sklearn.preprocessing import StandardScaler as ss","5b8e1294":"scale= ss()","9d7b0135":"stand_scale = scale.fit_transform(X)","8ceafa55":"from sklearn.decomposition import PCA","b773e72a":"pca = PCA()","626bc772":"out= pca.fit_transform(stand_scale)","3ad12638":"out.shape","5764f753":"pca.explained_variance_ratio_.cumsum()","cf58a96b":"X= stand_scale[:, 0:10]","e8ad4b2a":"X.shape","9311ff97":"from sklearn.model_selection import train_test_split","602593b2":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,shuffle=True)","8760d20c":"X_train.shape,X_test.shape,y_train.shape,y_test.shape","e0bb555a":"from sklearn.ensemble import RandomForestClassifier","c5f3a472":"from sklearn.ensemble import GradientBoostingClassifier","9301914c":"from xgboost.sklearn import XGBClassifier","b08f6984":"from sklearn.tree import DecisionTreeClassifier","5167730c":"from sklearn.ensemble import ExtraTreesClassifier","8a380421":"from sklearn.neighbors import KNeighborsClassifier","63206552":"dt = DecisionTreeClassifier()","86479def":"rf = RandomForestClassifier(n_estimators= 100)","84544729":"gbm = GradientBoostingClassifier()","2f141389":"xg = XGBClassifier()","5a04349e":"knc=KNeighborsClassifier()","238953c0":"etc=ExtraTreesClassifier(n_estimators=100)","e73221d8":"dt1 = dt.fit(X_train,y_train)","2f271171":"rf1 = rf.fit(X_train,y_train)","364a1707":"xg1 = xg.fit(X_train,y_train)","92ae963c":"gbm1 = gbm.fit(X_train,y_train)","bb31e4d0":"knc1=knc.fit(X_train,y_train)","361e3225":"etc1=etc.fit(X_train,y_train)","b86d7bc3":"from sklearn.metrics import accuracy_score","a6f6d045":"from sklearn.metrics import auc, roc_curve","a6333728":"from sklearn.metrics import confusion_matrix","25e76f2b":"from sklearn.metrics import precision_recall_fscore_support","fe5ab917":"y_pred_dt = dt1.predict(X_test)","77b9b39f":"y_pred_rf = rf1.predict(X_test)","4aa9c637":"y_pred_xg= xg1.predict(X_test)","1bf8f292":"y_pred_gbm= gbm1.predict(X_test)","c17aecd4":"y_pred_etc=etc1.predict(X_test)","a15bb134":"y_pred_knc=knc1.predict(X_test)","1b1aab29":"print(\"Accuracy_DecisionTree =\",accuracy_score(y_test,y_pred_dt))\nprint(\"Accuracy_RandomForest =\",accuracy_score(y_test,y_pred_rf))\nprint(\"Accuracy_XG =\",accuracy_score(y_test,y_pred_xg))\nprint(\"Accuracy_GBM =\",accuracy_score(y_test,y_pred_gbm))\nprint(\"Accuracy_ETC =\",accuracy_score(y_test,y_pred_etc))\nprint(\"Accuracy_KNC =\",accuracy_score(y_test,y_pred_knc))","a233df97":"dt_cm=confusion_matrix(y_test,y_pred_dt)","8da381a3":"xg_cm=confusion_matrix(y_test,y_pred_xg)","aa005d97":"gbm_cm=confusion_matrix(y_test,y_pred_gbm)","4e5be8b7":"rf_cm=confusion_matrix(y_test,y_pred_rf)","4522ad91":"etc_cm=confusion_matrix(y_test,y_pred_etc)","560d11eb":"knc_cm=confusion_matrix(y_test,y_pred_knc)","608bdd31":"dt_cm","c99c22c8":"rf_cm","d68d8c52":"xg_cm","2b8997fd":"gbm_cm","10ee5a8c":"etc_cm","b78c7a83":"knc_cm","06578f98":"def plot_confusion_matrix(cm, classifier):\n    plt.clf()\n    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.ocean_r)\n\n    classNames = ['B','M']\n\n    plt.ylabel('Actual', size='large')\n\n    plt.xlabel('Predicted',size='large')\n    \n    tick_marks = np.arange(len(classNames))\n    \n    plt.xticks(tick_marks, classNames, size='x-large')\n    plt.yticks(tick_marks, classNames, size='x-large')\n    \n    s = [['TN','FP'], ['FN', 'TP']]\n    plt.text(-0.25,0.05, str(s[0][0])+\" = \"+str(cm[0][0]), size='x-large')\n    plt.text(0.8,0.05, str(s[0][1])+\" = \"+str(cm[0][1]), size='x-large')\n    plt.text(-0.25,1.05, str(s[1][0])+\" = \"+str(cm[1][0]), size='x-large')\n    plt.text(0.8,1.05, str(s[1][1])+\" = \"+str(cm[1][1]), size='x-large')\n    plt.text(1.6,0.05,str(s[0][0])+\" + \"+str(s[0][1])+\" = \"+str(cm[0][0]+cm[0][1]),size='large')\n    plt.text(1.6,1.05,str(s[1][0])+\" + \"+str(s[1][1])+\" = \"+str(cm[1][0]+cm[1][1]),size='large')\n    plt.text(-0.25,2,str(s[0][0])+\" + \"+str(s[1][0])+\" = \"+str(cm[0][0]+cm[1][0]),size='large')\n    plt.text(0.8,2,str(s[0][1])+\" + \"+str(s[1][1])+\" = \"+str(cm[0][1]+cm[1][1]),size='large')\n    plt.title(classifier)\n    plt.show()","d4d673ef":"plot_confusion_matrix(dt_cm, \"Decision Tree\")\nplot_confusion_matrix(rf_cm, \"Random Forest\")\nplot_confusion_matrix(xg_cm, \"XGBoost\")\nplot_confusion_matrix(gbm_cm, \"GBM\")\nplot_confusion_matrix(etc_cm, \"Extra Trees\")\nplot_confusion_matrix(knc_cm, \"KNeighbors\")","be7c6e5b":"prf_dt=precision_recall_fscore_support(y_test, y_pred_dt)\nprf_rf=precision_recall_fscore_support(y_test, y_pred_rf)\nprf_xg=precision_recall_fscore_support(y_test, y_pred_xg)\nprf_gbm=precision_recall_fscore_support(y_test, y_pred_gbm)\nprf_etc=precision_recall_fscore_support(y_test, y_pred_etc)\nprf_knc=precision_recall_fscore_support(y_test, y_pred_knc)","152e110c":"print(\"Precision_Recall_FScore_DecisionTree =\",prf_dt)\nprint(\"Precision_Recall_FScore_RandomForest =\",prf_rf)\nprint(\"Precision_Recall_FScore_XG =\",prf_xg)\nprint(\"Precision_Recall_FScore_GBM =\",prf_gbm)\nprint(\"Precision_Recall_FScore_ETC =\",prf_etc)\nprint(\"Precision_Recall_FScore_KNC =\",prf_knc)","30300fab":" y_pred_dt_prob = dt1.predict_proba(X_test)","b9d835bf":"fpr_dt, tpr_dt, thresholds = roc_curve(y_test,\n                                 y_pred_dt_prob[: , 1],\n                                 pos_label= 1\n                                 )","ab247489":" y_pred_rf_prob = rf1.predict_proba(X_test)","7219c308":"fpr_rf, tpr_rf, thresholds = roc_curve(y_test,\n                                 y_pred_rf_prob[: , 1],\n                                 pos_label= 1\n                                 )","738ead01":"y_pred_xg_prob = xg1.predict_proba(X_test)","ad2968c7":"fpr_xg, tpr_xg, thresholds = roc_curve(y_test,\n                                 y_pred_xg_prob[: , 1],\n                                 pos_label= 1\n                                 )","6ffd56c5":"y_pred_gbm_prob = gbm1.predict_proba(X_test)","8a37db72":"fpr_gbm, tpr_gbm, thresholds = roc_curve(y_test,\n                                 y_pred_gbm_prob[: , 1],\n                                 pos_label= 1\n                                 )","2ea0621f":"y_pred_etc_prob = etc1.predict_proba(X_test)","2511378f":"fpr_etc, tpr_etc, thresholds = roc_curve(y_test,\n                                 y_pred_etc_prob[: , 1],\n                                 pos_label= 1\n                                 )","ba2ef635":"y_pred_knc_prob = knc1.predict_proba(X_test)","059880ed":"fpr_knc, tpr_knc, thresholds = roc_curve(y_test,\n                                 y_pred_knc_prob[: , 1],\n                                 pos_label= 1\n                                 )","e54fd237":"fpr_knc, tpr_knc","63e70e16":"fpr_etc, tpr_etc","ff02ce9b":"fpr_gbm, tpr_gbm","15d921e3":"fpr_xg, tpr_xg","70cd494d":"fpr_rf, tpr_rf","e4885493":"fpr_dt, tpr_dt","b361e009":"print(\"AUC_DecisionTree = \",auc(fpr_dt,tpr_dt))\nprint(\"AUC_RandomForest = \",auc(fpr_rf,tpr_rf))\nprint(\"AUC_XG = \",auc(fpr_xg,tpr_xg))\nprint(\"AUC_GBM = \",auc(fpr_gbm,tpr_gbm))\nprint(\"AUC_ETC = \",auc(fpr_etc,tpr_etc))\nprint(\"AUC_KNC = \",auc(fpr_knc,tpr_knc))","2ff3e685":"fig = plt.figure(figsize=(12,10))   # Create window frame\nax = fig.add_subplot(111)   # Create axes\n\n# Connect diagonals\nax.plot([0, 1], [0, 1], ls=\"--\")  # Dashed diagonal line\n\n# Labels \nax.set_xlabel('False Positive Rate')  # Final plot decorations\nax.set_ylabel('True Positive Rate')\nax.set_title('ROC curve for models')\n\n#Set graph limits\nax.set_xlim([0.0, 1.0])\nax.set_ylim([0.0, 1.0])\n\n#Plot each graph now\nax.plot(fpr_dt, tpr_dt, label = \"dt\")\nax.plot(fpr_rf, tpr_rf, label = \"rf\")\nax.plot(fpr_xg, tpr_xg, label = \"xg\")\nax.plot(fpr_gbm, tpr_gbm, label = \"gbm\")\nax.plot(fpr_etc, tpr_etc, label = \"etc\")\nax.plot(fpr_knc, tpr_knc, label = \"knc\")\n\n#Set legend and show plot\nax.legend(loc=\"lower right\")\nplt.show()","2a236d92":"Data Slicing","dbe59a59":"Looking at Column names","5263e00d":"Reading the file","600d714f":"Information about data columns","fdf33ff1":"Import Libraries for numpy, pandas and os","d842eaba":"Drawing Confusion Matrix","bcd3cd56":"Accuracy:","bc641974":"true positive rate (TPR) and false positive rate (FPR) for ROC curve","75853182":"Confusion Matrix for six different models:","48f4a20a":"Mapping Target values","e4421c2d":"Only retaining as many principal components (PCs) as explain 95% variance","f544a925":"AUC values for different models:","468f0cae":"Shape of the data","27664b5d":"Looking at first five rows","c7f9921a":"ROC curve plotting:","b6479af3":"Precision, Recall and F1 Score","dca9e8aa":"Using Standard Scalar to normalize data","dac5a564":"Instantiate object with default classifier "}}