{"cell_type":{"f5e661e6":"code","efde37bd":"code","5f5d3652":"code","80772b5f":"code","fa54f0f8":"code","30798c57":"code","7447ec30":"code","0018f291":"code","af5e377a":"code","c0648c7d":"code","5fd559e2":"code","fa8bd29a":"code","3defb40c":"code","66634bfa":"code","b50a7d66":"code","fe7cbc1c":"code","714c12ae":"code","d6aff12c":"code","84d2a3d3":"markdown","95a8a16e":"markdown","6d910d6c":"markdown","b0d69082":"markdown","ecf1f920":"markdown","35f76ed1":"markdown","98bcb018":"markdown","89693ea3":"markdown","f27c6930":"markdown","bc5fbb6f":"markdown","e032be82":"markdown","e024d61f":"markdown","4c8f3ba9":"markdown","78620f93":"markdown"},"source":{"f5e661e6":"# Libraries\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport glob\nfrom pandas import DataFrame\nfrom matplotlib.lines import Line2D\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nfrom tqdm.notebook import tqdm\n\n# Image processing and Computer Vision\nfrom skimage import exposure\nimport cv2\n# Package designed to manipulate data elements in DICOM files \n\nimport pydicom\n#Image Transformation\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\n\nfrom fastai.vision.all import *\nfrom fastai.medical.imaging import *\n\n","efde37bd":"#train_image\ntrain_image_df = pd.read_csv('..\/input\/siim-covid19-detection\/train_image_level.csv')\ntrain_image_df.head(2)","5f5d3652":"#train_study\ntrain_study_df = pd.read_csv('..\/input\/siim-covid19-detection\/train_study_level.csv')\ntrain_study_df.head()","80772b5f":"# Bar plot function defination\ndef viz_bar_plot(df,x,x_title,y,title,colors=None,text=None):\n    fig = px.bar(x=x,\n                 y=y,\n                 text=text,\n                 labels={x: x_title.title()},   \n                 data_frame=df,\n                 color=colors,\n                 barmode='group',\n                 template=\"simple_white\")\n    texts = [df[col].values for col in y]\n    for i, t in enumerate(texts):\n        fig.data[i].text = t\n        fig.data[i].textposition = 'inside'  \n    fig['layout'].title=title\n    fig.update_layout(title_font_size=19)\n    fig.update_layout(title_font_family='Droid Serif')\n    fig.update_layout(width=800,height=500)\n    for trace in fig.data:\n        trace.name = trace.name.replace('_',' ').title()\n    fig.update_yaxes(tickprefix=\"\", showgrid=True)\n    fig.show()","fa54f0f8":"# Study Data\n# create 'target' column in train_study_df dataset\ntrain_study_df['target']='Negative for Pneumonia'\ntrain_study_df.loc[train_study_df['Typical Appearance']==1,'target']='Typical Appearance'\ntrain_study_df.loc[train_study_df['Indeterminate Appearance']==1,'target']='Indeterminate Appearance'\ntrain_study_df.loc[train_study_df['Atypical Appearance']==1,'target']='Atypical Appearance'\n","30798c57":"train_study_df1=train_study_df.groupby(['target']).size().reset_index(name='counts')\ntrain_study_df1","7447ec30":"# Bar Visulaization of label categories\nviz_bar_plot(train_study_df1,\n         'target',\n         'target',\n         ['counts'],\n         title='Target Label Count')","0018f291":"# Image Data\ntrain_image_df['class'] = train_image_df.label.apply(lambda x: x.split()[0])\ntrain_study_df2=train_image_df.groupby(['class']).size().reset_index(name='counts')\nviz_bar_plot(train_study_df2,\n         'class',\n         'class',\n         ['counts'],\n         title='Class')","af5e377a":"# Split label column and extract the values of x_min, y_min,x_max, y_max \ntrain_image_df['x_min'] = train_image_df.label.apply(lambda x: float(x.split()[2]))\ntrain_image_df['y_min'] = train_image_df.label.apply(lambda x: float(x.split()[3]))\ntrain_image_df['x_max'] = train_image_df.label.apply(lambda x: float(x.split()[4]))\ntrain_image_df['y_max'] = train_image_df.label.apply(lambda x: float(x.split()[5]))\ntrain_image_df.head(3)","c0648c7d":"# merge study and image dataset on id column\ntrain_study_df['StudyInstanceUID'] = train_study_df['id'].apply(lambda x: x.replace('_study', ''))\ndel train_study_df['id']\ntrain_image_df = train_image_df.merge(train_study_df, on='StudyInstanceUID')\ntrain_image_df.head(2)","5fd559e2":"# Label classes probablity distribution\nfig, ax = plt.subplots(2,2,figsize=(18,15))\nsns.kdeplot(train_image_df[\"Negative for Pneumonia\"], shade=True,ax=ax[0,0],color=\"#5DADE2\")\nax[0,0].set_title(\"Negative for Pneumonia Distribution\",font=\"Serif\", fontsize=15)\nax[0,0].set(xlabel=None)\nsns.kdeplot(train_image_df[\"Typical Appearance\"], shade=True,ax=ax[0,1],color=\"#27AE60\")\nax[0,1].set_title(\"Typical Appearance Distribution\",font=\"Serif\", fontsize=15)\nax[0,1].set(xlabel=None)\nsns.kdeplot(train_image_df[\"Indeterminate Appearance\"], shade=True,ax=ax[1,0],color=\"#E74C3C\")\nax[1,0].set_title(\"Indeterminate Appearance Distribution\",font=\"Serif\", fontsize=15)\nax[1,0].set(xlabel=None)\nsns.kdeplot(train_image_df[\"Atypical Appearance\"], shade=True,ax=ax[1,1],color=\"#FFBA08\")\nax[1,1].set_title(\"Atypical Appearance Distribution\",font=\"Serif\", fontsize=15)\nax[1,1].set(xlabel=None)\nplt.show()","fa8bd29a":"def dicom2array(path, voi_lut=True, fix_monochrome=True):\n    dicom = pydicom.read_file(path)\n    # 'VOI LUT' is used to transform raw DICOM data to \"human-friendly\" view.\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n    # depending on this value, X-ray may look inverted -> fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n    return data\n        \n    \ndef plot_img(img, size=(5, 5), is_rgb=True, title=\"\", cmap='gray'):\n    plt.figure(figsize=size)\n    plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()\n\n\ndef plot_imgs(imgs, cols=4, size=5, is_rgb=True, title=\"\", cmap='gray', img_size=(300,300)):\n    rows = len(imgs)\/\/cols + 1\n    fig = plt.figure(figsize=(cols*size, rows*size))\n    for i, img in enumerate(imgs):\n        if img_size is not None:\n            img = cv2.resize(img, img_size)\n        fig.add_subplot(rows, cols, i+1)\n        plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()","3defb40c":"dicom_paths = get_dicom_files('..\/input\/siim-covid19-detection\/train')\nimgs = [dicom2array(path) for path in dicom_paths[-12:]]\nplot_imgs(imgs)","66634bfa":"train_image_df = train_image_df[~train_image_df.boxes.isnull()] \nclass_names = ['Typical Appearance', 'Indeterminate Appearance', 'Atypical Appearance'] # we have 3 positive classes\nunique_classes = np.unique(train_image_df[class_names].values, axis=0)","b50a7d66":"from termcolor import colored\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\ndef custom_palette(custom_colors):\n    customPalette = sns.set_palette(sns.color_palette(custom_colors))\n    sns.palplot(sns.color_palette(custom_colors),size=0.5)\n    plt.tick_params(axis='both', labelsize=0, length = 0)\n\nprint(colored('1.Typical Appearance', 'blue'))\nprint(colored('2.Indeterminate Appearance', 'red'))\nprint(colored('3.Atypical Appearance', 'yellow'))\n\npalette = [\"#4209ff\",\"#f72545\",\"#FFBA08\"]\ncustom_palette(palette)","fe7cbc1c":"from glob import glob\nimgs = []\nlabel2color = {\n    '[1, 0, 0]': [66,9,255], # Typical Appearance\n    '[0, 1, 0]': [247,37,69], # Indeterminate Appearance\n    '[0, 0, 1]': [255,186,8], # Atypical Appearance\n}\nthickness = 3\nscale = 6\n\nfor _, row in train_image_df[train_image_df['Negative for Pneumonia']==0].iloc[12:20].iterrows():\n    study_id = row['StudyInstanceUID']\n    img_path = glob(f'..\/input\/siim-covid19-detection\/train\/{study_id}\/*\/*')[0]\n    img = dicom2array(path=img_path)\n    img = cv2.resize(img, None, fx=1\/scale, fy=1\/scale)\n    img = np.stack([img, img, img], axis=-1)\n    \n    claz = row[class_names].values\n    color = label2color[str(claz.tolist())]\n\n    bboxes = []\n    bbox = []\n    for i, l in enumerate(row['label'].split(' ')):\n        if (i % 6 == 0) | (i % 6 == 1):\n            continue\n        bbox.append(float(l)\/scale)\n        if i % 6 == 5:\n            bboxes.append(bbox)\n            bbox = []    \n    \n    for box in bboxes:\n        img = cv2.rectangle(\n            img,\n            (int(box[0]), int(box[1])),\n            (int(box[2]), int(box[3])),\n            color, thickness\n    )\n    img = cv2.resize(img, (600,600))\n    imgs.append(img)\n    \nplot_imgs(imgs, cmap=None)\n","714c12ae":"imgs = []\n\nfor _, row in train_image_df[train_image_df['Indeterminate Appearance'] == 1].iloc[2:6].iterrows():\n    study_id = row['StudyInstanceUID']\n    img_path = glob(f'..\/input\/siim-covid19-detection\/train\/{study_id}\/*\/*')[0]\n    img = dicom2array(path=img_path)\n    img = cv2.resize(img, None, fx=1\/scale, fy=1\/scale)\n    img = np.stack([img, img, img], axis=-1)\n    \n    claz = row[class_names].values\n    color = label2color[str(claz.tolist())]\n\n    bboxes = []\n    bbox = []\n    for i, l in enumerate(row['label'].split(' ')):\n        if (i % 6 == 0) | (i % 6 == 1):\n            continue\n        bbox.append(float(l)\/scale)\n        if i % 6 == 5:\n            bboxes.append(bbox)\n            bbox = []    \n    \n    for box in bboxes:\n        img = cv2.rectangle(\n            img,\n            (int(box[0]), int(box[1])),\n            (int(box[2]), int(box[3])),\n            color, thickness\n    )\n    img = cv2.resize(img, (600,600))\n    imgs.append(img)\n    \nplot_imgs(imgs, cmap=None)","d6aff12c":"imgs = []\n\nfor _, row in train_image_df[train_image_df['Atypical Appearance'] == 1].iloc[0:4].iterrows():\n    study_id = row['StudyInstanceUID']\n    img_path = glob(f'..\/input\/siim-covid19-detection\/train\/{study_id}\/*\/*')[0]\n    img = dicom2array(path=img_path)\n    img = cv2.resize(img, None, fx=1\/scale, fy=1\/scale)\n    img = np.stack([img, img, img], axis=-1)\n    \n    claz = row[class_names].values\n    color = label2color[str(claz.tolist())]\n\n    bboxes = []\n    bbox = []\n    for i, l in enumerate(row['label'].split(' ')):\n        if (i % 6 == 0) | (i % 6 == 1):\n            continue\n        bbox.append(float(l)\/scale)\n        if i % 6 == 5:\n            bboxes.append(bbox)\n            bbox = []    \n    \n    for box in bboxes:\n        img = cv2.rectangle(\n            img,\n            (int(box[0]), int(box[1])),\n            (int(box[2]), int(box[3])),\n            color, thickness\n    )\n    img = cv2.resize(img, (600,600))\n    imgs.append(img)\n    \nplot_imgs(imgs, cmap=None)","84d2a3d3":"#### Indeterminate Appearance","95a8a16e":"![download.jfif](attachment:c0a946d2-c315-4f17-ad03-ec8deb4c3966.jfif)","6d910d6c":"<h3>Data Description<\/h3>\n    \n    \n<ol>\n  <li><b>Train Data:<\/b> The train dataset comprises 6,334 chest scans in DICOM format. Train Data has two .csv files (refer above)-<\/li>\n    <ul>\n        <li><b>train_study_level:<\/b> The study ID here relates directly to the study-level predictions.The train study-level metadata, with one row for each study, includes correct labels.<\/li>\n        <h5>Columns:-<\/h5><ol>\n            <li><b>id:<\/b>unique study identifier<\/li>\n            <li><b>Negative for Pneumonia:<\/b>1 if the study is negative for pneumonia, 0 otherwise<\/li>\n            <li><b>Typical Appearance:<\/b>1 if the study has this appearance, 0 otherwise<\/li>\n            <li><b>Indeterminate Appearance:<\/b>1 if the study has this appearance, 0 otherwise<\/li>\n            <li><b>Atypical Appearance:<\/b>1 if the study has this appearance, 0 otherwise<\/li>\n        <\/ol>\n        <br>\n        <li><b>train_image_level:<\/b>The image ID is the ID used for image-level predictions.The train image-level metadata, with one row for each image, includes both correct labels and any bounding boxes in a dictionary format. Some images in both test and train have multiple bounding boxes.<\/li> \n        <h5>Columns:-<\/h5>\n        <ol>\n            <li><b>id:<\/b>unique image identifier<\/li>\n            <li><b>boxes:<\/b>bounding boxes in easily-readable dictionary format<\/li>\n            <li><b>label:<\/b>the correct prediction label for the provided bounding boxes<\/li>\n            <br>\n        In <b>Label Column<\/b>, the format is as follows: `[class ID] [confidence score] [bounding box]`\n            <ul>\n                <li><b>Class ID:<\/b> Either opacity or none<\/li>\n                <li><b>Confidence score:<\/b> confidence from your neural network model. If none, the confidence is 1.<\/li>\n                <li><b>Bounding box:<\/b>typical xmin ymin xmax ymax format. If class ID is none,bounding box is 1 0 0 1 1.<\/li>\n                The bounding boxes are also provided in easily readable dictionary format in column <b>boxes<\/b>\n            <\/ul>\n        <\/ol>\n     <\/ul>\n    <br>\n  <li><b>Test folder:<\/b>The test dataset is of roughly the same scale as the training dataset.<\/li>\n  <li><b>sample_submission.csv:<\/b> A sample submission file contains all image- and study-level IDs.<\/li>\n<\/ol>\n        ","b0d69082":"#### Image Visualization","ecf1f920":"<h3><center>2. Exploratory Data Analysis (EDA)<\/center><\/h3>","35f76ed1":"<h1><center>SIIM-FISABIO-RSNA COVID-19 Detection<\/center><\/h1>\n<h2><center>Identify and localize COVID-19 abnormalities on chest radiographs<\/center><\/h2>","98bcb018":"#### Atypical Appearance","89693ea3":"<h2><center>3. Model<\/center><\/h2>","f27c6930":"<h3><center>1. Understand the Competition<\/center><\/h3>\n<ul>\n  <li>COVID-19 looks very similar to other viral and bacterial pneumonias on chest radiographs, which makes it difficult to diagnose. <\/li>\n  <li>Currently, COVID-19 can be diagnosed via polymerase chain reaction to detect genetic material from the virus or chest radiograph. However, it can take a few hours and sometimes days before the molecular test results are back. By contrast, chest radiographs can be obtained in minutes. <\/li>\n  <li>In this competition, we\u2019ll identify and localize COVID-19 abnormalities on chest radiographs. In particular, we'll categorize the radiographs as negative for pneumonia or typical, indeterminate, or atypical for COVID-19. <\/li>\n  <li><b>In simple words, we hope to develop a model to help radiologists diagnose the millions of COVID-19 patients more confidently and quickly.<\/b><\/li>\n<\/ul>","bc5fbb6f":"#### Now let's Understand the DATA....","e032be82":"#### Plot images with Bounding Box","e024d61f":"#### All Classes","4c8f3ba9":"![COVID_19_iS1210596217_hero.jpg](attachment:83b1270b-0b54-4c96-9459-1bd98c7f073c.jpg)","78620f93":"#### In Progress.."}}