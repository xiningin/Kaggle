{"cell_type":{"969cbf94":"code","d76e5022":"code","9abd7b8c":"code","7fa5b0c3":"code","eaa6b05b":"code","017ada93":"code","977e18cb":"code","8f2614d0":"code","7d31c20c":"code","e49a9c4b":"code","c1d2e5bc":"code","6e66223e":"code","ff6124e3":"code","ca8c92ac":"code","f598e3a9":"code","9dd559cb":"code","0cc21dc1":"markdown","a038fe08":"markdown","25cedb10":"markdown"},"source":{"969cbf94":"import numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import ShuffleSplit\n\nimport lightgbm as lgbm","d76e5022":"data = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")\ndata[0:2]","9abd7b8c":"n=len(data)\nprint(n)","7fa5b0c3":"N=[]\nfor i in range(n):\n    N+=[i]\nrandom.shuffle(N)","eaa6b05b":"datay=data['target']\ndata2=data.drop('target',axis=1)","017ada93":"data2=np.array(data2)\ndatay=np.array(datay)","977e18cb":"train=data2[N[0:(n\/\/10)*8]]\ntest=data2[N[(n\/\/10)*8:]]\ntrainy=datay[N[0:(n\/\/10)*8]]\ntesty=datay[N[(n\/\/10)*8:]]","8f2614d0":"X = train\ny = trainy","7d31c20c":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","e49a9c4b":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","c1d2e5bc":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n}","6e66223e":"from sklearn.model_selection import KFold\n\nfold = KFold(n_splits=10, shuffle=True, random_state=71)\ncv = list(fold.split(X, y))\noof, models = fit_lgbm(X, y, cv, params=params, verbose=10000)","ff6124e3":"def revert_to_real(preda):\n    predb = pd.Series(preda).apply(lambda x:round(x))\n    return predb","ca8c92ac":"pred0 = np.array([model.predict(test) for model in models])\npred1 = np.mean(pred0, axis=0)\npred2 = revert_to_real(pred1)\nPRED=np.array(pred2)\nPRED[0:20]","f598e3a9":"ANS=testy\nANS[0:20]","9dd559cb":"accuracy=accuracy_score(ANS,PRED)\nprint(accuracy)","0cc21dc1":"# Modeling","a038fe08":"# Predict","25cedb10":"# Data Process"}}