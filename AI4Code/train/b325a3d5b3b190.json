{"cell_type":{"7739cdc1":"code","0e55ea27":"code","66774e6c":"code","775c2bc8":"code","260991d3":"code","9744a2ba":"code","cf533307":"code","25bd8745":"code","d77a46a2":"code","711f406b":"code","63c51dd7":"code","8958531a":"code","e14c1bfd":"markdown","66ba43ae":"markdown","3d81664a":"markdown","0b4cf191":"markdown","be2878a4":"markdown","cb07cf42":"markdown","a8d074f5":"markdown","9baa4e92":"markdown","de01b6b1":"markdown"},"source":{"7739cdc1":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom pandas_profiling import ProfileReport\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.svm import SVC\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nplt.style.use('ggplot')","0e55ea27":"df = pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")\ndf.index.rename('id', inplace = True)\ndf.drop_duplicates(inplace = True)\ndf.sample(10)","66774e6c":"#Amount of Missing Data\npercent_missing = df.isnull().sum() * 100 \/ len(df)\nmissing_value_df = pd.DataFrame({'column_name': df.columns,\n                                 'percent_missing': percent_missing})\nmissing_value_df","775c2bc8":"#Disribution of Target\nprint(df.target.value_counts())\nsns.countplot(df['target'])","260991d3":"#Distibution of Continous Variables\ndf.hist(figsize = (10,10))","9744a2ba":"#Split Train and Test Data\nx = df.drop(columns = \"target\")\ny = df[\"target\"]\nx_train,x_test,y_train,y_test=train_test_split(x, y, test_size=0.25,random_state= 37)","cf533307":"#Standardize Data\nSS = StandardScaler()\nSS.fit(x_train)\nx_train = SS.transform(x_train)\nx_test = SS.transform(x_test)","25bd8745":"# #Normalize Data\n# Norm = MinMaxScaler()\n# Norm.fit(x_train)\n# x_train = Norm.transform(x_train)\n# x_test = Norm.transform(x_test)","d77a46a2":"train_accuracy = []\ntest_accuracy = []\nfor i in range(2,10):\n    KN_model = KNeighborsClassifier(n_neighbors = i)\n    KN_model.fit(x_train,y_train)\n    KN_predictions = KN_model.predict(x_test)\n    \n    train_accuracy.append(KN_model.score(x_train, y_train))\n    test_accuracy.append(KN_model.score(x_test, y_test))\n    \n    print(\"for n =\",i ,\":\",accuracy_score(y_test,KN_predictions))\nprint(classification_report(y_test, KN_predictions))\n\n#Generate plot\nplt.title('k-NN Varying number of neighbors')\nplt.plot(range(2,10), test_accuracy, label='Testing Accuracy')\nplt.plot(range(2,10), train_accuracy, label='Training accuracy')\nplt.legend()\nplt.xlabel('Number of neighbors')\nplt.ylabel('Accuracy')\nplt.show()","711f406b":"SVM_model = SVC()\nSVM_model.fit(x_train, y_train)\nSVM_predictions = SVM_model.predict(x_test)\nprint(accuracy_score(y_test,SVM_predictions))\nprint(classification_report(y_test, SVM_predictions))","63c51dd7":"RF_model = RandomForestClassifier()\nRF_model.fit(x_train, y_train)\nRF_predictions = RF_model.predict(x_test)\nprint(accuracy_score(y_test,RF_predictions))\nprint(classification_report(y_test, RF_predictions))","8958531a":"DT_model = DecisionTreeClassifier()\nDT_model.fit(x_train,y_train)\nDT_predictions = DT_model.predict(x_test)\nprint(accuracy_score(y_test,DT_predictions))\nprint(classification_report(y_test, DT_predictions))","e14c1bfd":"## Support Vector Machine(SVM)","66ba43ae":"# Data Preprocessing","3d81664a":"# Data Distribution","0b4cf191":"## Random Forrest","be2878a4":"## K Neighbor","cb07cf42":"## Decision Tree","a8d074f5":"# Split data to Train and Test","9baa4e92":"# Train Model","de01b6b1":"# Data Scaling"}}