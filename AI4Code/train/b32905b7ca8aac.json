{"cell_type":{"b32cd51a":"code","77aa7c1f":"code","3f3e7efc":"code","26ab3f2c":"code","c4f635e6":"code","d0ec76d0":"code","efd51c0e":"code","d55606c7":"code","cdee418b":"code","a06fcf9a":"code","e75792f9":"code","568c892b":"code","12091b41":"code","83fe219e":"code","dc7271fb":"code","54761c9d":"code","7e0d2310":"code","b60a308f":"code","be866cac":"code","b1f927a5":"code","56aa033b":"code","5f166ee3":"code","83f212bc":"code","0a1255ad":"code","8b79b058":"code","3d83706b":"code","6bb215b9":"code","d3330de0":"code","5a263d91":"code","8e5f9b9b":"code","cf6406ee":"code","58722cd6":"code","73422094":"code","c67a7589":"code","30627f6c":"code","08e92cf7":"code","10a4e371":"code","ec2b02f9":"code","f4d3b538":"code","9a67a268":"code","9059e5f7":"code","8a2a739d":"code","2aa6a60b":"code","a7f8ce57":"code","36984f69":"code","21853470":"code","9412124e":"code","d29684cd":"markdown","74e79ad4":"markdown","ccb37342":"markdown","ce5df28c":"markdown","e70ed592":"markdown","984e8ebf":"markdown"},"source":{"b32cd51a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport matplotlib.pyplot as plt","77aa7c1f":"#image = cv2.imread('\/kaggle\/input\/operations-with-opencv\/1Trump.jpg')\nimage = cv2.imread('\/kaggle\/input\/opencv-samples-images\/someshapes.jpg')\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) \nplt.imshow(image)","3f3e7efc":"#grayscale\ngray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)","26ab3f2c":"# Find Canny edges\nedged = cv2.Canny(gray, 30, 200)\nplt.imshow(edged)","c4f635e6":"# Finding Contours\ncontours, hierarchy = cv2.findContours(edged, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)\nplt.imshow(edged)","d0ec76d0":"print(\"Number of Contours found = \" + str(len(contours)))","efd51c0e":"cv2.drawContours(image, contours, -1, (0,255,0), 3)\n\nplt.imshow(image)","d55606c7":"# Load our image\nimage = cv2.imread('\/kaggle\/input\/operations-with-opencv\/1bunchofshapes.jpg')\nplt.imshow( image)","cdee418b":"# Create a black image with same dimensions as our loaded image\nblank_image = np.zeros((image.shape[0], image.shape[1], 3))","a06fcf9a":"# Create a copy of our original image\norginal_image = image","e75792f9":"# Grayscale our image\ngray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)","568c892b":"# Find Canny edges\nedged = cv2.Canny(gray, 50, 200)\nplt.imshow(edged)","12091b41":"# Find contours and print how many were found\ncontours, hierarchy = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)\nprint (\"Number of contours found = \", len(contours))","83fe219e":"#Draw all contours\ncv2.drawContours(blank_image, contours, -1, (0,255,0), 3)\nplt.imshow(blank_image)","dc7271fb":"# Draw all contours over blank image\ncv2.drawContours(image, contours, -1, (0,255,0), 3)\nplt.imshow(image)","54761c9d":"# Draw all contours over blank image\ncv2.drawContours(image, contours, -1, (15,8,12), 3)\nplt.imshow(image)","7e0d2310":"# Load our image\nimage = cv2.imread('\/kaggle\/input\/opencv-samples-images\/house.jpg')\nplt.imshow( image)","b60a308f":"orig_image = image.copy()\nplt.imshow( orig_image)","be866cac":"# Grayscale and binarize\ngray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\nret, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY_INV)","b1f927a5":"# Find contours \ncontours, hierarchy = cv2.findContours(thresh.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)","56aa033b":"# Iterate through each contour and compute the bounding rectangle\nfor c in contours:\n    x,y,w,h = cv2.boundingRect(c)\n    cv2.rectangle(orig_image,(x,y),(x+w,y+h),(0,0,255),2)    \n    plt.imshow(orig_image)\n","5f166ee3":"# Iterate through each contour and compute the approx contour\nfor c in contours:\n    # Calculate accuracy as a percent of the contour perimeter\n    accuracy = 0.03 * cv2.arcLength(c, True)\n    approx = cv2.approxPolyDP(c, accuracy, True)\n    cv2.drawContours(image, [approx], 0, (0, 255, 0), 2)\n    plt.imshow( image)","83f212bc":"# Load our image\nimage = cv2.imread('\/kaggle\/input\/opencv-samples-images\/hand.jpg')\nplt.imshow( image)","0a1255ad":"gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\nplt.imshow( image)","8b79b058":"# Threshold the image\nret, thresh = cv2.threshold(gray, 176, 255, 0)","3d83706b":"# Find contours \ncontours, hierarchy = cv2.findContours(thresh.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)","6bb215b9":"# Sort Contors by area and then remove the largest frame contour\nn = len(contours) - 1\ncontours = sorted(contours, key=cv2.contourArea, reverse=False)[:n]\n","d3330de0":"# Iterate through contours and draw the convex hull\nfor c in contours:\n    hull = cv2.convexHull(c)\n    cv2.drawContours(image, [hull], 0, (0, 255, 0), 2)\n    plt.imshow(image)\n","5a263d91":"# Load our image\nimage = cv2.imread('\/kaggle\/input\/operations-with-opencv\/1chess.jpg')\nplt.imshow(image)","8e5f9b9b":"# Grayscale and Canny Edges extracted\ngray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\nedges = cv2.Canny(gray, 100, 170, apertureSize = 3)","cf6406ee":"plt.imshow(edges)\n","58722cd6":"lines = cv2.HoughLines(edges, 1, np.pi\/180, 200)\n","73422094":"# We iterate through each line and convert it to the format\n# required by cv.lines (i.e. requiring end points)\nfor line in lines:\n    rho, theta = line[0]\n    a = np.cos(theta)\n    b = np.sin(theta)\n    x0 = a * rho\n    y0 = b * rho\n    x1 = int(x0 + 1000 * (-b))\n    y1 = int(y0 + 1000 * (a))\n    x2 = int(x0 - 1000 * (-b))\n    y2 = int(y0 - 1000 * (a))\n    cv2.line(image, (x1, y1), (x2, y2), (255, 0, 0), 2)","c67a7589":"plt.imshow(image)\n","30627f6c":"### Probabilistic Hough Lines","08e92cf7":"# Grayscale and Canny Edges extracted\nimage = cv2.imread('\/kaggle\/input\/operations-with-opencv\/1chess.jpg')\ngray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\nedges = cv2.Canny(gray, 100, 170, apertureSize = 3)","10a4e371":"lines = cv2.HoughLinesP(edges, 1, np.pi \/ 180, 200, 5, 10)\nprint(lines.shape)","ec2b02f9":"for line in lines:\n    for x1,y1,x2,y2 in line:\n        cv2.line(image, (x1, y1), (x2, y2),(0, 255, 0), 3)\nplt.imshow(image)","f4d3b538":"image = cv2.imread('\/kaggle\/input\/operations-with-opencv\/1bottlecaps.jpg')\ngray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\nplt.imshow(gray)","9a67a268":"blur = cv2.medianBlur(gray, 5)\n\ncircles = cv2.HoughCircles(blur, cv2.HOUGH_GRADIENT, 1.5, 10,\n                           param1=100,param2=100,minRadius=25,maxRadius=60)\n\ncircles = np.uint16(np.around(circles))","9059e5f7":"for i in circles[0,:]:\n    # draw the outer circle\n    cv2.circle(image,(i[0], i[1]), i[2], (255, 0, 0), 2)\n    \n    # draw the center of the circle\n    cv2.circle(image, (i[0], i[1]), 2, (0, 255, 0), 5)","8a2a739d":"plt.imshow( image)","2aa6a60b":"image = cv2.imread('\/kaggle\/input\/operations-with-opencv\/1Sunflowers.jpg')\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nplt.imshow(image)","a7f8ce57":"# Set up the detector with default parameters.\ndetector = cv2.SimpleBlobDetector_create()","36984f69":"# Detect blobs.\nkeypoints = detector.detect(image)","21853470":"# Draw detected blobs as red circles.\n# cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS ensures the size of\n# the circle corresponds to the size of blob\nblank = np.zeros((1,1)) \nblobs = cv2.drawKeypoints(image, keypoints, blank, (13,15,170),\n                                      cv2.DRAW_MATCHES_FLAGS_DEFAULT)","9412124e":"plt.imshow(blobs)","d29684cd":"Hi Everyone and Welcome My Notebook !\nNowadays I was eager to learn opencv. This is the third kernel about OpenCV. But more to come.\nThe topics are as follows\n- Contours\n- Sorting Contours\n- Approximating Contours and Convex Hull \n- Line Detection - Using Hough Lines\n- Circle Detection - Hough Cirlces\n- Blob Detection\n\n\n\n\n\nIf You like, Pls upvote ! Have a nice day!\n- Mielek :)","74e79ad4":"   ## Line Detection - Using Hough Lines","ccb37342":"## Approximating Contours and Convex Hull \n","ce5df28c":"## Sorting Contours\n","e70ed592":"## Convex Hull\n","984e8ebf":"# Contours"}}