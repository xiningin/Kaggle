{"cell_type":{"2921bd19":"code","0c37b245":"code","256f8419":"code","73e4c081":"code","9679a773":"code","a721c884":"code","b15dab6f":"code","de1b6c1d":"code","b74d741e":"code","4f75a622":"code","7fd5d056":"code","447b7400":"code","c4160ed9":"code","b0a7653e":"code","15f9e56c":"code","13c13fd8":"code","71e12df0":"code","ae93face":"code","d4aab219":"code","c8e449a0":"code","50c287a1":"code","aed3547c":"code","8f72d4be":"code","1a7a209b":"code","d3b059ea":"code","d6ebfe09":"code","851488b7":"code","0aaea549":"code","d2725d04":"code","f14e5042":"code","2aad4640":"code","b3491c4b":"code","08793bf7":"code","198866d6":"code","7a43acbf":"code","418d709c":"code","e53fb91d":"code","83418924":"code","cbfe31d2":"code","b1a46667":"code","7587371e":"code","54716866":"code","d18cfcc7":"code","91276f2e":"code","4cf6a3d2":"code","5a2af060":"code","4460c078":"code","c4c6bb48":"code","07d00195":"code","009f1840":"code","9aa16ad2":"code","b2a254d7":"code","f3157b45":"code","89e9e8f6":"code","a38e607a":"code","7bdd1dc5":"markdown","76c9cf9e":"markdown","bbb09cd6":"markdown","3e8a1e48":"markdown","f63d94e6":"markdown","0b931be8":"markdown","dc4e897f":"markdown","4bd6f591":"markdown","23b16bb3":"markdown","f02d5972":"markdown","d890656e":"markdown","dd795ffd":"markdown","eb630cde":"markdown","51c19ca0":"markdown","42f30eb0":"markdown","1df55767":"markdown","4c34310f":"markdown","49a37863":"markdown","4ca796d5":"markdown","39fb1a6e":"markdown","1ad796a1":"markdown","1966c85c":"markdown","86d74ffa":"markdown","d7217a52":"markdown","99e1261b":"markdown","4d65fed2":"markdown","2418946c":"markdown","be84a73b":"markdown","88992ba3":"markdown","ca08bf26":"markdown","7e1b5d47":"markdown","d21ba2b9":"markdown","447dfb31":"markdown","2bebf31d":"markdown","825394a1":"markdown","31240ab8":"markdown","a08137aa":"markdown","a979fd64":"markdown","73e02a68":"markdown","9ca6a99d":"markdown","0f439df6":"markdown","05e0ce7d":"markdown","33c0e337":"markdown","831e8c9c":"markdown","1eca101e":"markdown","96463a88":"markdown","1ac2bd07":"markdown","47f081a8":"markdown","f1cea174":"markdown","4dedbb01":"markdown","b85a05cc":"markdown","3ddccc85":"markdown","627f702f":"markdown"},"source":{"2921bd19":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0c37b245":"import numpy as np\nimport pandas as pd","256f8419":"df_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")","73e4c081":"df_train.sample(15, random_state=1)","9679a773":"df_train.info()","a721c884":"df_train.describe()","b15dab6f":"df_test.describe()","de1b6c1d":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nsns.set_style('darkgrid')\nsns.set_palette(\"pastel\")","b74d741e":"def viz_barh(value_counts):\n    fig, ax = plt.subplots()\n    value_counts.unstack().plot.barh(stacked=True, ax=ax)\n    ax.legend([\"Died\", \"Survived\"])","4f75a622":"train = pd.DataFrame()\ntest = pd.DataFrame()","7fd5d056":"df_train[\"Age_group\"] = pd.cut(df_train[\"Age\"], bins=[0,16,60,100], labels=[\"child\", \"adult\", \"senior\"])\nvalue_counts = df_train[\"Survived\"].groupby(df_train[\"Age_group\"]).value_counts(normalize=True)\nviz_barh(value_counts)","447b7400":"mean_age = round(df_train[\"Age\"].mean())\ndf_train[\"Age\"] = df_train[\"Age\"].fillna(mean_age)\ndf_test[\"Age\"] = df_test[\"Age\"].fillna(mean_age)","c4160ed9":"train[\"Age\"] = df_train[\"Age\"]\ntest[\"Age\"] = df_test[\"Age\"]","b0a7653e":"value_counts = df_train[\"Survived\"].groupby(df_train[\"Pclass\"]).value_counts(normalize=True)\nviz_barh(value_counts)","15f9e56c":"def transform_class(main_df, mod_df, pclasses):\n    for pclass in pclasses:\n        mod_df[str(\"pClass_\" + str(pclass))] = main_df[\"Pclass\"].apply(lambda x: 1 if x == pclass else 0)\n    return mod_df","13c13fd8":"pclasses = df_train[\"Pclass\"].unique().tolist()\ntrain = transform_class(df_train, train, pclasses)\ntest = transform_class(df_test, test, pclasses)","71e12df0":"value_counts = df_train[\"Survived\"].groupby(df_train[\"Sex\"]).value_counts(normalize=True)\nviz_barh(value_counts)","ae93face":"df_train[\"Sex\"] = df_train[\"Sex\"].apply(lambda x: 1 if x == \"female\" else 0)\ndf_test[\"Sex\"] = df_test[\"Sex\"].apply(lambda x: 1 if x == \"female\" else 0)","d4aab219":"train[\"Sex\"] = df_train[\"Sex\"]\ntest[\"Sex\"] = df_test[\"Sex\"]","c8e449a0":"def transform_family(main_df, mod_df):\n    mod_df[\"SibSp\"] = main_df[\"SibSp\"]\n    mod_df[\"Parch\"] = main_df[\"Parch\"]\n    mod_df[\"familySize\"] = main_df[\"SibSp\"] + main_df[\"Parch\"] + 1\n    mod_df[\"kid_with_parch\"] = np.where((main_df[\"Age\"] <= 16) & (main_df[\"Parch\"] > 1), 1, 0)\n    mod_df[\"parch_with_kid\"] = np.where((main_df[\"Age\"] > 16) & (main_df[\"SibSp\"] > 1), 1, 0)\n    return mod_df","50c287a1":"df_train = transform_family(df_train, df_train)","aed3547c":"value_counts = df_train[\"Survived\"].groupby(df_train[\"familySize\"]).value_counts(normalize=True)\nviz_barh(value_counts)","8f72d4be":"train = transform_family(df_train, train)\ntest = transform_family(df_test, test)","1a7a209b":"train[\"Fare\"] = round(df_train[\"Fare\"].apply(lambda x: x if pd.notnull(x) else 0))\ntest[\"Fare\"] = round(df_test[\"Fare\"].apply(lambda x: x if pd.notnull(x) else 0))","d3b059ea":"sns.stripplot(x=df_train[\"Survived\"], y=df_train[\"Fare\"])","d6ebfe09":"df_train[\"Cabin\"] = df_train[\"Cabin\"].apply(lambda x: 1 if pd.notnull(x) else 0)\ndf_test[\"Cabin\"] = df_test[\"Cabin\"].apply(lambda x: 1 if pd.notnull(x) else 0)","851488b7":"value_counts = df_train[\"Survived\"].groupby(df_train[\"Cabin\"]).value_counts(normalize=True)\nviz_barh(value_counts)","0aaea549":"train[\"Cabin\"] = df_train[\"Cabin\"]\ntest[\"Cabin\"] = df_test[\"Cabin\"]","d2725d04":"df_train[\"Embarked\"] = df_train[\"Embarked\"].apply(lambda x: x if pd.notnull(x) else \"N\")\ndf_test[\"Embarked\"] = df_test[\"Embarked\"].apply(lambda x: x if pd.notnull(x) else \"N\")","f14e5042":"value_counts = df_train[\"Survived\"].groupby(df_train[\"Embarked\"]).value_counts(normalize=True)\nviz_barh(value_counts)","2aad4640":"def transform_embark(main_df, mod_df, embarkations):\n    for embark in embarkations:\n        mod_df[str(\"embarked_\" + str(embark))] = main_df[\"Embarked\"].apply(lambda x: 1 if x == embark else 0)\n    return mod_df","b3491c4b":"embarkations = df_train[\"Embarked\"].unique().tolist()\ntrain = transform_embark(df_train, train, embarkations)\ntest = transform_embark(df_test, test, embarkations)","08793bf7":"def name_to_title(df):\n    df[\"Title\"] = df[\"Name\"].apply(lambda x :x.split(\", \")[1])\n    df[\"Title\"] = df[\"Title\"].apply(lambda x :x.split(\" \")[0])\n    return df","198866d6":"df_train = name_to_title(df_train)\ndf_test = name_to_title(df_test)","7a43acbf":"value_counts = df_train[\"Survived\"].groupby(df_train[\"Title\"]).value_counts(normalize=True)\nviz_barh(value_counts)","418d709c":"def transform_title(df, df_mod, titles):\n    for title in titles:\n        df_mod[str(\"title_\" + str(title))] = df[\"Title\"].apply(lambda x: 1 if x == title else 0)\n    return df_mod","e53fb91d":"title_list = df_train[\"Title\"].unique().tolist()\ntrain = transform_title(df_train, train, title_list)\ntest = transform_title(df_test, test, title_list)","83418924":"train.sample(10, random_state=1)","cbfe31d2":"test.sample(10, random_state=1)","b1a46667":"X_train, X_test, y_train = train, test, df_train[\"Survived\"]","7587371e":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)","54716866":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RandomizedSearchCV","d18cfcc7":"n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\nmin_samples_split = [2, 5, 10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]","91276f2e":"random_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}","4cf6a3d2":"rf = RandomForestClassifier()","5a2af060":"rf_random = RandomizedSearchCV(estimator=rf, param_distributions=random_grid, n_iter=100, cv=3, verbose=2, random_state=42, n_jobs=-1)","4460c078":"result = rf_random.fit(X_train, y_train)","c4c6bb48":"print('Best Score: %s' % result.best_score_)\nprint('Best Hyperparameters: %s' % result.best_params_)","07d00195":"pred_full = rf_random.best_estimator_.predict(X_test)","009f1840":"features = X_train.columns.tolist()\nimportances = result.best_estimator_.feature_importances_\nindices = np.argsort(importances)[-15:]","9aa16ad2":"plt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","b2a254d7":"from sklearn.tree import export_graphviz","f3157b45":"export_graphviz(result.best_estimator_[5], out_file='tree.dot',\n                feature_names = X_test.columns,\n                class_names = [\"Died\", \"Survived\"],\n                rounded = True, proportion = False, \n                precision = 2, filled = True)","89e9e8f6":"from subprocess import call\ncall(['dot', '-Tpng', 'tree.dot', '-o', 'tree.png', '-Gdpi=600'])\n\nfrom IPython.display import Image\nImage(filename = 'tree.png')","a38e607a":"submission = pd.DataFrame(pred_full, index=df_test[\"PassengerId\"], columns=[\"Survived\"])\nsubmission.to_csv(\"titanic_submission.csv\")","7bdd1dc5":"# 4. Prediction submission","76c9cf9e":"# 3. Random Forest","bbb09cd6":"## 3.2. Random Forest Classifier \/ RandomSearchCV","3e8a1e48":"Let's define a random grid to be used by the RandomSearchCV.","f63d94e6":"First, we can represent passengers by age group. I would expect child to survive more than senior ... Let's see! ","0b931be8":"Looks family with more members have more difficulties to survive the disaster ...","dc4e897f":"Now, let's represent passengers by sex group. What's your view?","4bd6f591":"We can then add the \"Age\" field to our *train* and *test* dataframes (remember, these will be used later as input vectors for the Random Forest).","23b16bb3":"We can then create a function that loops through the different classes and split them into different columns.","f02d5972":"We can fix NaN *Age* fields with the mean value coming from the Training set.","d890656e":"Some columns do have some null values that we will need to clean up (example: \"Age\", \"Cabin\" or \"Embarked\").","dd795ffd":"We can first replace NaN values with a syntetic embarkation point (\"N\").","eb630cde":"Looks it's better to be in 1st class than in 3rd one ... but that was kind of expected!","51c19ca0":"We can now transform the Cabin column to show whether you had a cabin or not (no matter where it was located).","42f30eb0":"Now, let's try to represent passengers by class group. Do you expect rich or poor people to survive more?","1df55767":"First, let's build a function that creates 3 new features: \n   * FamilySize = size of the entire family\n   * kid_with_parch = are you a kid with a parent aboard?\n   * parch_with_kid = are you a parent with a kid aboard?","4c34310f":"Same goes for the Test data.","49a37863":"Let's use sklearn capabilities to plot our decision tree! (don't hesitate to download the .png file to zoom in)","4ca796d5":"Again, would people paying more be more likely to survive?","39fb1a6e":"Not all features are as important to consider when making a decision! The following graph should help us understand which ones are more useful for our model. ","1ad796a1":"Let's create two *train* and *test* dataframes which will take up certain features of our *df_train* and *df_test*","1966c85c":"Huge difference ... Looks the saying \"Women and children first\" holds in this case.","86d74ffa":"Let's now define our RandomForestClassifier and fit the X_train and y_train data.","d7217a52":"# 2. Features Overview & Features Engineering","99e1261b":"This is a simple horizontal bar chart representation function.","4d65fed2":"Strangely, it seems that all those whose embarkation point we don't know ... survived!","2418946c":"## 2.5. What's your trip fare?","be84a73b":"... Indeed, looks it's better to be a child than a senior on the Titanic!","88992ba3":"# More?\n\nIf you liked the Notebook, don't hesitate to up it and to visit [www.AIOutsider.com](https:\/\/www.aioutsider.com)\n\nAny comment or improvement more than welcomed! \ud83d\ude03\n\n**AIOutsider**\n\n<img style=\"float:left\" alt=\"www.aioutsider.com\" src=\"https:\/\/static.wixstatic.com\/media\/85f433_0a80e32e33c04402ae9e39fc719ad339~mv2.png\/v1\/fill\/w_84,h_84,al_c,q_85,usm_0.66_1.00_0.01\/Logo_new.webp\">","ca08bf26":"## 2.6. Do you have a cabin?","7e1b5d47":"## 3.3. Score and Hyperparameters ","d21ba2b9":"Alright! What does our data look like? ","447dfb31":"Let's first import our train and test data from Kaggle, and see what's inside.","2bebf31d":"... not sure!","825394a1":"Several parameters have been computed by the RandomSearchCV. We will only focus on the best one in this case, and use it to predict our X_test set.","31240ab8":"## 2.1. What's your age?","a08137aa":"The captain died ... after all, it's his duty!","a979fd64":"Well ... looks you had higher chances to survive if you had a cabin.","73e02a68":"## 2.4. What's the size of your family?","9ca6a99d":"Let's just round fares before we plot them.","0f439df6":"Let's just convert the column to a binary value (1 for female and 0 for male).","05e0ce7d":"![(From Unsplash)](https:\/\/images.unsplash.com\/photo-1476514525535-07fb3b4ae5f1?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=2550&q=80)\n\nOk ok ... maybe the view was not exactly the same for Titanic passengers, but you get the idea! Let us now dive into one of the most famous disasters of the beginning of the 20th century!\n\n","33c0e337":"## 3.5. Tree visualization","831e8c9c":"## 3.1. Train\/Test data","1eca101e":"# 1. A look at data","96463a88":"## 2.2. What's your passenger class?","1ac2bd07":"And voil\u00e0! We can finally create our submission DataFrame and upload it to check our performance!","47f081a8":"## 2.8. Do you have any title?","f1cea174":"## 2.7. What's your boarding point?","4dedbb01":"First, let's split the Name and keep only the title.","b85a05cc":"## 2.3. What's your sex?","3ddccc85":"## 3.4. Features Importance","627f702f":"Should family with more or less member survive? What about people traveling alone?"}}