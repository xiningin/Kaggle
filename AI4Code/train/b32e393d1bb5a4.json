{"cell_type":{"9c178510":"code","75f21719":"code","7fde0d00":"code","d6da510b":"code","87047e01":"code","22ef7f04":"code","edaa2db8":"code","607d8c52":"code","fbfee976":"code","2fae4680":"code","4b9a2a4d":"code","9279102e":"code","3f89bce1":"code","0a9dbd85":"code","fb7cadc7":"code","60141696":"code","ada0d8f9":"code","91006c5e":"code","ec884e08":"code","cb5103ca":"code","84566cfb":"code","076d8281":"code","9bd1e9c7":"code","16893b65":"code","a507d8d5":"code","4a5080a8":"code","4866df43":"code","245f1200":"code","dc632b8b":"code","28255a58":"code","d0f18b33":"code","0cc39f54":"code","808f38b9":"markdown","b8abdc7c":"markdown","172add2d":"markdown","2ea24a58":"markdown","735a17d2":"markdown","01767203":"markdown"},"source":{"9c178510":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# datayi CSV veya baska kaynaklardan okutmak icin kullaniyoruz\nimport seaborn as sns # Korelasyon \u0131s\u0131 haritas\u0131 g\u00f6sterimi i\u00e7in kullan\u0131yoruz\nimport matplotlib.pyplot as plt # Korelasyonu y\u00fcksek olan iki \u00f6zniteli\u011fin plotting i\u015flemi i\u00e7in kullan\u0131yoruz\n\n# sag tarafta draft environment bolumu var\n# o bolumde input klasorumuze sistemden veya disardan ekledigimiz data dosyasi var\n# yol tanimi ..\/input\/train_distance_matrix.csv     seklinde\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n#import os\n#print(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","75f21719":"veriyolu = '..\/input\/train_distance_matrix.csv' # dizini veriyolu olarak degiskene atadik \ndata = pd.read_csv(veriyolu) #pandas'la read metoduyla yolunu yazdigimiz dosyayi aktardik \ndata.describe() # bakalim neler aktarmisiz describe ile ilk bir kac satiri gorelim","7fde0d00":"data.columns  # veride hangi kolonlar var gorelim","d6da510b":"# tum veri data degiskeninde oradan alacagimiz kolonlari tanimlayalim \nsecilen_features = ['passenger_count', 'gc_distance', 'store_and_fwd_flag','trip_duration', 'google_distance', 'google_duration']\n# simdi bu diziyi kullanarak X (tanimlayan kolonlar) ve Y (tahmin kolonu, price) sekline gecelim\n# X degerlerini data dan elde edelim\nX = data[secilen_features]","87047e01":"X.describe() # sectigimiz featurelar la veri kumesini gorelim","22ef7f04":"data.info() #bellek kullan\u0131m\u0131 ve veri t\u00fcrleri\"","edaa2db8":"data.head() #ilk 5 sat\u0131r\"","607d8c52":"data.tail() #son 5 sat\u0131r  ","fbfee976":"data.shape # sat\u0131r, s\u00fctun say\u0131s\u0131","2fae4680":"hist = data.hist(bins=5) # histogram bakma","4b9a2a4d":"data.isnull().sum().sum() # bo\u015f de\u011ferlerin say\u0131s\u0131n\u0131 yazd\u0131rma","9279102e":"data.isnull().sum() # sutunlarda bo\u015f de\u011ferleri kontrol etme\n","3f89bce1":"data.corr() # korelasyon sonu\u00e7lar\u0131n\u0131n tabloda g\u00f6r\u00fclmesi","0a9dbd85":"#Korelasyon, D\u00fcz metin ve seaborn \u0131s\u0131 haritas\u0131 ile g\u00f6sterilmesi\ncorr = data.corr()\nsns.heatmap(corr, \n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values)","fb7cadc7":"# Korelasyonu y\u00fcksek olan iki tane \u00f6znitelik i\u00e7in plotting-\u00e7izim i\u015flemi- ger\u00e7ekle\u015ftrilmesi\n\ndata.plot(x='passenger_count', y='pickup_longitude', style='o')  \nplt.title('passenger_count - pickup_longitude')  \nplt.xlabel('passenger_count')  \nplt.ylabel('pickup_longitude')  \nplt.show() ","60141696":"# Ba\u015far\u0131y\u0131 etkilemeyen \u00f6zniteliklerin tablodan \u00e7\u0131kar\u0131lmas\u0131\ndata = data.drop(columns = ['google_duration'])","ada0d8f9":"data['durak'] = data.mean(numeric_only=True, axis=1)","91006c5e":"# max. durak say\u0131s\u0131n\u0131 g\u00f6rmek i\u00e7in durak \u00f6zniteli\u011fi kullan\u0131larak max \u00f6zniteli\u011fi eklenmesi\ndef max_durak(trip_duration):\n    return (trip_duration >= 500)\n\ndata['max'] = data['durak'].apply(max_durak)","ec884e08":"data # \u00e7\u0131kar\u0131lan ve yeni eklenen \u00f6zniteliklerle tabloyu g\u00f6rme","cb5103ca":"# \u00d6n i\u015fleme\/\/U\u00e7 de\u011ferleri bulma\nimport seaborn as sns\nsns.boxplot(x=data['trip_duration'])","84566cfb":"# \u00d6n i\u015fleme\/\/U\u00e7 de\u011ferleri bulma\nimport seaborn as sns\nsns.boxplot(x=data['dropoff_latitude'])\n","076d8281":"# \u00d6n i\u015fleme\/\/U\u00e7 de\u011ferleri bulma\nimport seaborn as sns\nsns.boxplot(x=data['pickup_longitude'])","9bd1e9c7":"# \u00d6n i\u015fleme\/\/U\u00e7 de\u011ferleri bulma\nP = np.percentile(data.trip_duration, [10, 100])\nP","16893b65":"# U\u00e7 de\u011ferlerin \u00e7\u0131karma\nnew_data = data[(data.trip_duration > P[0]) & (data.trip_duration < P[1])]\nnew_data","a507d8d5":"# Veri normalle\u015ftirme\nfrom sklearn import preprocessing\n\n# trip_duration \u00f6zniteli\u011finin normalle\u015ftirmesi\nx = data[['trip_duration']].values.astype(float)\n\n# Normalle\u015ftirme i\u00e7in MinMax normalle\u015ftirme y\u00f6ntemini kullan\u0131yor\nmin_max_scaler = preprocessing.MinMaxScaler()\nx_scaled = min_max_scaler.fit_transform(x)\ndata['trip_duration2'] = pd.DataFrame(x_scaled)","4a5080a8":"data # Veri normalle\u015ftirme sonras\u0131 data","4866df43":"# Tahmin ve s\u0131n\u0131f i\u00e7in kullan\u0131lacak \u00f6zniteliklerin belirlenmesi\nfeaturesForFit = ['dropoff_latitude', 'pickup_latitude']\nX = data[featuresForFit]\ny = data['max']","245f1200":"# Tahmin ve s\u0131n\u0131f i\u00e7in kullan\u0131lacak \u00f6zniteliklerin belirlenmesi\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","dc632b8b":"# Karar a\u011fa\u00e7lar\u0131 ile s\u0131n\u0131fland\u0131rma ve ACC de\u011ferini yazd\u0131rma\nfrom sklearn.tree import DecisionTreeClassifier\n\nclf = DecisionTreeClassifier().fit(X_train, y_train)\n\nprint('Accuracy of Decision Tree classifier on training set: {:.2f}'\n     .format(clf.score(X_train, y_train)))\nprint('Accuracy of Decision Tree classifier on test set: {:.2f}'\n     .format(clf.score(X_test, y_test)))","28255a58":"# Karar a\u011fac\u0131 i\u00e7in confusion matrix, precision, recall, f-measure g\u00f6sterimi\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\npred = clf.predict(X_test)\nprint(confusion_matrix(y_test, pred))\nprint(classification_report(y_test, pred))","d0f18b33":"# Knn kom\u015fuluk ile s\u0131n\u0131fland\u0131rma ve ACC de\u011ferini yazd\u0131rma\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\n\nprint('Accuracy of K-NN classifier on training set: {:.2f}'\n     .format(knn.score(X_train, y_train)))\nprint('Accuracy of K-NN classifier on test set: {:.2f}'\n     .format(knn.score(X_test, y_test)))","0cc39f54":"# Knn kom\u015fuluk i\u00e7in confusion matrix, precision, recall, f-measure g\u00f6sterimi\npred = knn.predict(X_test)\nprint(confusion_matrix(y_test, pred))\nprint(classification_report(y_test, pred))","808f38b9":"S\u0131n\u0131fland\u0131rma algoritmalar\u0131n\u0131n ba\u015far\u0131m\u0131nda accuracy-ACC-Do\u011fruluk  \"do\u011fru tahmin edebildikleri \u00f6rnek say\u0131s\u0131n\u0131n t\u00fcm \u00f6rnek say\u0131s\u0131na b\u00f6l\u00fcnmesi\" \u00e7ok kullan\u0131lan bir metriktir, ancak tek ba\u015f\u0131na de\u011ferlendirilmesi yanl\u0131\u015flara sebep olur.","b8abdc7c":"Confusion Matrix(Karma\u015f\u0131kl\u0131k matrisi): S\u0131n\u0131fland\u0131rma ba\u015far\u0131m\u0131 hakk\u0131nda b\u00fct\u00fcnc\u00fcl bir yakla\u015f\u0131mla bilgi veren bir matris modelidir. CM yap\u0131s\u0131, s\u0131n\u0131fland\u0131r\u0131c\u0131n\u0131n ba\u015far\u0131m\u0131 ve yap\u0131lan test ile yak\u0131ndan ilgilidir.","172add2d":"Tahmin yapmak i\u00e7in t\u00fcm kolonlar\u0131 kullanmayacagiz.. Tahmin etmek icin en onemli kolonlar \n ['passenger_count', 'gc_distance', 'store_and_fwd_flag','trip_duration', 'google_distance', 'google_duration'] baslikli kolonlar olsun. Buna gore tahminde kullan\u0131lacak kolonlar, feature lar  secilmelidir","2ea24a58":"S\u0131n\u0131fland\u0131rma model ba\u015far\u0131m\u0131n\u0131 baz\u0131 kriterleri kullanarak \u00f6l\u00e7ebiliri.\nACC(Accuracy-Do\u011fruluk), Error Ratio(Hata oran\u0131), Recall(Anma), Precision(Duyarl\u0131l\u0131k), F-measure(f-\u00f6\u00e7\u00fct\u00fc),ROC,AUC","735a17d2":"* Art\u0131k verilere ulasabiliyoruz. Bu verilerden price tahmini yapmak istiyoruz. Yan taraflardaki ifadeler( count, mean, std...) ne anlama geliyor\n","01767203":"\"New York City Taxi Trip\" verisetine uygulanan 'Karar a\u011fac\u0131' ve 'Knn kom\u015fuluk' s\u0131n\u0131fland\u0131rmalar\u0131 sonu\u00e7lar\u0131n\u0131 elde ettik.\nDecision Tree- Knn s\u0131n\u0131fland\u0131rmas\u0131n\u0131n ba\u015far\u0131m\u0131n\u0131 de\u011ferlendirirken \u00f6l\u00e7\u00fctleri ayr\u0131 ayr\u0131 de\u011ferlendirmek gerekmektedir.\nGenel olarak \u00f6l\u00e7\u00fctler incelendi\u011finde KNN S\u0131n\u0131fland\u0131rma algoritmas\u0131n\u0131n ba\u015far\u0131m\u0131 daha y\u00fcksektir, bu sebeple Decision Tree S\u0131n\u0131fland\u0131rma algoritmas\u0131na g\u00f6re k\u0131yasland\u0131\u011f\u0131nda KNN S\u0131n\u0131fland\u0131rma algoritmas\u0131 tercih edilir."}}