{"cell_type":{"17098622":"code","0e77fb2a":"code","05fea96f":"code","4bebefb5":"code","9b6f510b":"code","d88b9679":"code","0854a484":"code","5106cb46":"code","c1d6a0c2":"code","d55cc67a":"code","2079630d":"code","63e06204":"code","f752b75e":"code","17b39828":"code","ad0ecea8":"markdown","dc0b17ba":"markdown","84ae036c":"markdown","78064860":"markdown","8e627b5d":"markdown","dabd943e":"markdown"},"source":{"17098622":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.tri as mtri\nfrom IPython.display import Image, display, SVG, clear_output, HTML\nplt.rcParams[\"figure.figsize\"] = (6, 6)\nplt.rcParams[\"figure.dpi\"] = 125\nplt.rcParams[\"font.size\"] = 14\nplt.rcParams['font.family'] = ['sans-serif']\nplt.rcParams['font.sans-serif'] = ['DejaVu Sans']\nplt.style.use('ggplot')\nsns.set_style(\"whitegrid\", {'axes.grid': False})\nplt.rcParams['image.cmap'] = 'gray' # grayscale looks better","0e77fb2a":"import h5py\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nfrom skimage.io import imread\nfrom skimage.filters import threshold_isodata, median\nfrom skimage.morphology import opening, disk","05fea96f":"image_list = list(Path('..\/input').glob('**\/*.tif'))\nfig, m_axs = plt.subplots(len(image_list), 3, figsize=(16, 8))\nimage_dict = {}\nfor (c_ax, h_ax, d_ax), c_img_path in zip(m_axs, image_list):\n    c_img = imread(c_img_path)\n    c_ax.imshow(c_img)\n    c_ax.set_title('Raw Image')\n    c_ax.axis('off')\n    \n    d_img = median(c_img)\n    d_val = threshold_isodata(d_img)\n    image_dict[c_img_path] = {'image': d_img, 'mask': opening(d_img>d_val, disk(4))}\n    h_ax.hist(c_img.ravel())\n    h_ax.axvline(d_val, color='k')\n    h_ax.set_title('Distribution')\n    \n    d_ax.imshow(image_dict[c_img_path]['mask'])\n    d_ax.axis('off')","4bebefb5":"from scipy.ndimage import distance_transform_edt as distmap\nfrom scipy.ndimage import label","9b6f510b":"fig, m_axs = plt.subplots(len(image_list), 4, figsize=(16, 8))\nfor (c_ax, d_ax, f_ax, g_ax), c_img_path in zip(m_axs, image_list):\n    c_img = image_dict[c_img_path]['image']\n    c_mask = image_dict[c_img_path]['mask']\n    label_img, _ = label(c_mask)\n    c_ax.imshow(label_img, cmap=plt.cm.nipy_spectral)\n    c_ax.set_title('Labeled Particles')\n    \n    c_map, (x_idx, y_idx) = distmap(~c_mask, return_indices=True, return_distances=True)\n    rev_c_map = distmap(c_mask, return_indices=False, return_distances=True)\n    c_map[c_mask>0] = -1*rev_c_map[c_mask>0] # negative values on the inside\n    grow_labels = label_img[x_idx.ravel(), y_idx.ravel()].reshape(label_img.shape)\n    d_ax.imshow(grow_labels, cmap=plt.cm.nipy_spectral)\n    d_ax.set_title('Territories for each particle')\n    shell_region = grow_labels*(c_map<5)*(c_map>0)\n    f_ax.imshow(shell_region, cmap=plt.cm.nipy_spectral)\n    f_ax.set_title('5 pixel shell')\n    \n    bound_d_map = c_map.copy()\n    bound_d_map[np.abs(bound_d_map)>10] = np.NAN    \n    g_ax.imshow(bound_d_map, cmap='RdBu')\n    g_ax.set_title('Distance Map')\n    \n    image_dict[c_img_path]['labels'] = label_img\n    image_dict[c_img_path]['dist'] = c_map\n    image_dict[c_img_path]['label_regions'] = grow_labels","d88b9679":"fig, m_axs = plt.subplots(1, len(image_list), figsize=(16, 8))\ndf_list = []\nfor (c_ax), c_img_path in zip(m_axs, image_list):\n    c_img = image_dict[c_img_path]['image']\n    label_img = image_dict[c_img_path]['labels']\n    c_dist = image_dict[c_img_path]['dist']\n    grow_labels = image_dict[c_img_path]['label_regions']\n    for k in np.unique(label_img[label_img>0]):\n        x_val = c_dist[grow_labels==k]\n        y_val = c_img[grow_labels==k]\n        df_list.append(pd.DataFrame({'distance': x_val, 'intensity': y_val, 'particle': k, 'image': c_img_path}))\n        c_ax.plot(x_val, y_val, '.', label=str(k), ms=0.2)\n        c_ax.set_xlim(-5, 20)\n    c_ax.set_xlabel('Distance from Particle Surface')\n    c_ax.set_ylabel('Intensity')","0854a484":"all_df = pd.concat(df_list)\nall_df.to_csv('intensity_decay_curve.csv', index=False)\nall_df.sample(3)","5106cb46":"sns.catplot(x='distance',\n            y='intensity',\n            hue='particle',\n            col='image',\n            kind='swarm',\n            data=all_df.query('distance>-5').query('distance<5').query('particle==1'))","c1d6a0c2":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfor c_grp, c_rows in all_df.\\\n        groupby(['image', \n                 'particle', \n                 (all_df['distance']*2).astype(int).rename('rounded_dist')]).\\\n        agg('mean').\\\n        reset_index().\\\n        query('abs(distance)<20').\\\n        groupby(['image', 'particle']):\n        ax1.plot(c_rows['distance'], c_rows['intensity'], label=str(c_grp))\n        ax1.set_title('Raw Values')\n        ax2.plot(c_rows['distance'], c_rows['intensity']\/c_rows['intensity'].max(), label=str(c_grp))\n        ax2.set_title('Normalized')","d55cc67a":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfor c_grp, c_rows in all_df.\\\n        groupby(['image', \n                 (all_df['distance']*1).astype(int).rename('rounded_dist')]).\\\n        agg('mean').\\\n        reset_index().\\\n        query('abs(distance)<40').\\\n        groupby(['image']):\n        ax1.plot(c_rows['distance'], c_rows['intensity'], '.-', label=str(c_grp))\n        ax1.set_title('Raw Values')\n        ax2.plot(c_rows['distance'], c_rows['intensity']\/c_rows['intensity'].max(), '.-', label=str(c_grp))\n        ax2.set_title('Normalized')\n        ax1.legend()\n        ax1.axvline(0, color='k')\n        ax2.legend()\n        ax2.axvline(0, color='k')","2079630d":"from scipy.interpolate import interp1d\ndist_vals = np.linspace(0, 20, 10)\nout_rows = []\nfor (c_path, c_idx), raw_rows in all_df.groupby(['image', 'particle']):\n    # average duplicates and sort\n    c_rows = raw_rows.groupby('distance').agg('mean').reset_index().sort_values('distance')\n    i_func = interp1d(x=c_rows['distance'].values, \n                      y=c_rows['intensity'].values, \n                      bounds_error=False, \n                      fill_value='extrapolate', \n                      kind='cubic', \n                      assume_sorted=True)\n    out_rows.append({'image': c_path, 'particle': c_idx, 'distance': dist_vals, 'intensity': i_func(dist_vals)})\nstd_df = pd.DataFrame(out_rows)\nstd_df.sample(2)","63e06204":"plt.plot(np.stack(std_df['intensity'], 1));","f752b75e":"from sklearn.cluster import KMeans\nkm = KMeans(n_clusters=4)\nstd_df['cluster'] = np.argmin(km.fit_transform(np.stack(std_df['intensity'], 0)), -1)+1\nstd_df['cluster'].value_counts()","17b39828":"from skimage.color import label2rgb\nfig, m_axs = plt.subplots(1, len(image_list), figsize=(16, 8))\nfor (c_ax), c_img_path in zip(m_axs, image_list):\n    raw_image = image_dict[c_img_path]['image']\n    raw_labels = image_dict[c_img_path]['labels']\n    clusters = np.zeros_like(raw_labels)\n    for _, c_row in std_df[std_df['image']==c_img_path][['particle', 'cluster']].iterrows():\n        clusters[raw_labels==c_row['particle']] = c_row['cluster']\n    norm_img = np.clip(raw_image\/(raw_image.mean()+2*raw_image.std()), 0, 1)\n    n_img = label2rgb(image=norm_img, label=clusters, bg_label=0)\n    c_ax.imshow(n_img)","ad0ecea8":"# Overview\nThe notebook shows how to\n- take an image of nanoparticles\n- segment the individual particles\n- label each particle\n- measure the signed distance from the surface (negative is inside, positive is outside)\n- show the image intensity at each point to quantify the shell thickness","dc0b17ba":"## Use distance maps to get the geometric shells\n- Positive distances are outside the particle\n- Negative distances are inside the particle","84ae036c":"# Cluster Curves\nGrab the curve for each particle and cluster them into groups","78064860":"# Show Average Curves","8e627b5d":"# Load and Preprocess\nHere we load the images, perform some filtering and morphological operations to identify the individual particles","dabd943e":"### Show clusters on original images\nWe mainly see that one of the groups has a significantly reduced decay from the others"}}