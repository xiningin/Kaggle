{"cell_type":{"e1e25bcc":"code","d8e8d377":"code","b5651e41":"code","f41434fe":"code","95afbe21":"code","067d247e":"code","4e8ec8c4":"code","10cf9f40":"code","b66a8a62":"code","2d90ddc3":"code","7250bf85":"code","28f1be4f":"code","21cbbde6":"code","b35d2773":"code","524b36b2":"code","c2fdd485":"code","e74864e0":"code","7a918bd7":"code","430bb12e":"code","8bb44c76":"code","b18c7085":"code","ecca6c31":"code","7026ebc1":"code","1bd5e992":"code","1c32aaad":"code","a3903fb0":"code","1c6d69fc":"code","53b0f565":"code","a27fbcd1":"code","7cac0a86":"code","bf83aef4":"code","5e080298":"code","e170b31e":"code","35b1ece5":"code","9d73131e":"code","da92ff5c":"code","619d39e6":"code","7fba0146":"code","3fc83e0a":"code","57b2c999":"code","82fff2b5":"code","9f20be86":"code","f450a42d":"code","5e2afe40":"markdown","80085f53":"markdown","893cf1c0":"markdown","80e14d41":"markdown","3eb146d6":"markdown","d8ba8e83":"markdown","fa4f69ef":"markdown","34c00f10":"markdown","b1517061":"markdown","99f1c221":"markdown","6f6c2a5f":"markdown","53688660":"markdown","78d2a6cd":"markdown","86370bee":"markdown","d9880ae7":"markdown","c5955d80":"markdown","f4a8707d":"markdown","7bd77e4b":"markdown","211bf12c":"markdown","33ec5c72":"markdown","628c4640":"markdown","40a238cd":"markdown","2724d471":"markdown","9291e22b":"markdown","c4436a5a":"markdown","0f08fcd5":"markdown","f77f46ce":"markdown","8e5e935b":"markdown","a66a4c5e":"markdown","9d1dced8":"markdown","145aa2de":"markdown","bccc4466":"markdown","d5d9468f":"markdown","8d5063eb":"markdown","297c9b3a":"markdown","f227fd33":"markdown","60333857":"markdown","f690537d":"markdown","f201bf70":"markdown","b0700c5b":"markdown","106674a2":"markdown","3b8e1226":"markdown","63d9c9e3":"markdown","7a6f87b6":"markdown","69d9a843":"markdown","286e341f":"markdown"},"source":{"e1e25bcc":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn import svm\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV","d8e8d377":"df = pd.read_csv(\"..\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv\")","b5651e41":"df.head()","f41434fe":"df.shape","95afbe21":"df.isnull().sum()","067d247e":"total_cells = np.product(df.shape)\ntotal_missing = df.isnull().sum().sum()\n\npercent_missing = (total_missing\/total_cells) * 100\nprint(percent_missing,\"% of data is missing from total data\")","4e8ec8c4":"df.info()","10cf9f40":"s = (df.dtypes == 'object')\nobject_cols = list(s[s].index)\nobject_cols","b66a8a62":"n = ((df.dtypes == \"int64\" ) | (df.dtypes == \"float64\"))\nnumerical_cols = list(n[n].index)\nnumerical_cols","2d90ddc3":"len(object_cols) + len(numerical_cols)","7250bf85":"df_cat = df[object_cols]\ndf_cat","28f1be4f":"data = df.copy()\nfor col_name in data.select_dtypes(\"object\"):\n    data[col_name] , _ = data[col_name].factorize()\ndiscrete_features = list(data.dtypes == \"int\")\ndata.head()","21cbbde6":"lst = []\nfor col_name in data.columns:\n    if(data[col_name].dtypes == \"int\"):\n        lst.append(col_name)\nlst","b35d2773":"plt.figure(figsize = (7 , 7))\nplt.title(\"Does Females get more salary than Men or vice versa?\")\nsns.barplot(x = data[\"gender\"] , y = data[\"salary\"])\nplt.xlabel(\"Gender ( 0 : Male , 1 : Female)\")\nplt.ylabel(\"Salary\")","524b36b2":"df.degree_t.unique()","c2fdd485":"plt.figure(figsize = (10 , 10))\nsns.scatterplot(x = data[\"degree_t\"] , y = data[\"salary\"] , hue = data[\"gender\"])\nplt.xlabel(' 0 : Science&Tech           1:Comm&Mgmt           2: Others ')","e74864e0":"data.columns","7a918bd7":"sns.jointplot(x = data[\"gender\"] , y = data['status'] , kind ='kde' , shade = True )","430bb12e":"df_clus = df.loc[ : ,[\"hsc_p\" ,\"degree_p\" , \"ssc_p\"]]\nkmeans = KMeans(n_clusters= 1)\ndf_clus[\"Cluster\"] = kmeans.fit_transform(df_clus)\ndf_clus['Cluster']  = df_clus[\"Cluster\"].astype(\"int\")\ndf_clus\n\nplt.figure(figsize=(10 ,10))\nsns.relplot(\n    x=\"hsc_p\", y=\"degree_p\", hue=\"Cluster\", data=df_clus, height=6,\n);\n\n","8bb44c76":"print(df.gender.nunique())\nprint(df.ssc_b.nunique())\nprint(df.workex.nunique())\nprint(df.specialisation.nunique())\nprint(df.status.nunique())\nprint(df.degree_t.nunique())\nprint(df.hsc_s.nunique())","b18c7085":"df[\"specialisation\"].unique()","ecca6c31":"df_cat.isnull().sum()","7026ebc1":"le = LabelEncoder()","1bd5e992":"df[\"gender_Encoded\"] = le.fit_transform(df[\"gender\"])\ndf[\"ssc_b_Encoded\"] = le.fit_transform(df[\"ssc_b\"])\ndf[\"hsc_b_Encoded\"] = le.fit_transform(df[\"hsc_b\"])\ndf[\"workex_Encoded\"] = le.fit_transform(df[\"workex\"])\ndf[\"specialisation_Encoder\"] = le.fit_transform(df[\"specialisation\"])\ndf[\"status_Encoded\"] = le.fit_transform(df[\"status\"])","1c32aaad":"df","a3903fb0":"onc = OneHotEncoder(handle_unknown= 'ignore' , sparse= False)\ncols_encoded = pd.DataFrame(onc.fit_transform(df[[\"degree_t\" , \"hsc_s\"]]))\ncols_encoded.index = df.index","1c6d69fc":"d= {\n    0:\"Comm&Mgmt\",\n    1:\"Others\",\n    2:\"Sci&Tech\" ,\n    3:\"Arts\", \n    4:\"Commerce\" ,\n    5:\"Science\" }\ncols_encoded.rename(columns =d ,inplace = True)","53b0f565":"cols_encoded.head()","a27fbcd1":"df_semifinal  =pd.concat([df , cols_encoded] , axis=\"columns\")\ndf_semifinal.head()","7cac0a86":"df_semifinal.drop(['gender',\n 'ssc_b',\n 'hsc_b',\n 'hsc_s',\n 'degree_t',\n 'workex',\n 'specialisation',\n 'status'] , axis =\"columns\" , inplace= True)","bf83aef4":"df_semifinal.head()","5e080298":"df_semifinal.isnull().sum()","e170b31e":"df_semifinal[\"salary\"].fillna(value = df_semifinal[\"salary\"].mean() , inplace = True)","35b1ece5":"df_semifinal.isnull().sum()","9d73131e":"df_semifinal.columns","da92ff5c":"sc = StandardScaler()\nencoded_num =pd.DataFrame(sc.fit_transform(df_semifinal[['ssc_p', 'hsc_p', 'degree_p', 'etest_p', 'mba_p', 'salary']]))","619d39e6":"encoded_num.rename({\n    0:\"ssc_p\",\n    1:\"hsc_p\",\n    2:\"degree_p\",\n    3:\"etest_p\",\n    4:\"mba_p\",\n    5:\"salary\"\n    \n} , axis =\"columns\" , inplace= True)","7fba0146":"df_final = pd.concat([encoded_num, df_semifinal[['gender_Encoded', 'ssc_b_Encoded', 'hsc_b_Encoded', 'workex_Encoded',\n       'specialisation_Encoder', 'status_Encoded', 'Comm&Mgmt', 'Others',\n       'Sci&Tech', 'Arts', 'Commerce', 'Science']]] ,axis =\"columns\")","3fc83e0a":"df_final","57b2c999":"X = df_final.drop(\"status_Encoded\" , axis = \"columns\")\ntargets = df_final.status_Encoded","82fff2b5":"model_params  ={ \n    'svm' : {\n        'model' : svm.SVC(gamma = 'auto'),\n        'params' : {\n            'C' : [1 , 10  , 20] , \n            'kernel' : ['rbf' , 'linear']\n        }\n    },\n    \n    'random_forest' : {\n        \n        'model' : RandomForestClassifier(),\n        'params' : {\n            'n_estimators' : [1 ,5 , 10]\n        }\n        \n    },\n\n\n'logistic_regression' : {\n    \n    'model' : LogisticRegression(solver = 'liblinear' , multi_class='auto'),\n    'params' :{\n        'C': [1 , 5 , 10]\n    }\n   }\n}","9f20be86":"scores = []\nfor model_name  , mp in model_params.items():\n    clf = GridSearchCV(mp['model'] , mp['params'] , cv = 5 , return_train_score=False)\n    clf.fit(X, targets)\n    scores.append({\n        'model' : model_name ,\n        'best_score' :clf.best_score_ ,\n        'best_params' :clf.best_params_\n    })","f450a42d":"results = pd.DataFrame(scores , columns=['model' , 'best_score' , 'best_params'])\nresults","5e2afe40":"Now we can see that salary is of float64 data type","80085f53":"### df.isnull()sum() \n##### This statement will give the total number of null values in respected columns\nAfter Running the below cell we can see that there are 67 null values in salary columns","893cf1c0":"#### Run the below Cells to get the name of the columns which have float or numrical type ","80e14d41":"#### NOPE! ,  ACCORDING TO DATSET","3eb146d6":"## df.info()\n\n#### Now after getting information about the Null values we will check for the datatype for each columns \nRun the cell below","d8ba8e83":"# Categorical Values\n\n## What are Categorical Values ?\n![](https:\/\/miro.medium.com\/max\/1400\/1*wYbTRM0dgnRzutwZq63xCg.png)","fa4f69ef":"## Importing all libraries","34c00f10":"### Total % of missing Values","b1517061":"### So we have to drop the columns with categorical values\n## **df.drop([column_names] , axis = \"colums\")**\n\n### inplace = True will change the values in the real df also , without it the operation will not get shown in a real dataset","99f1c221":"# Creating Independent Variables and Dependent Variable","6f6c2a5f":"### Here I thought of handling Categorical and Numerical Data Seperately ","53688660":"![](https:\/\/i.gifer.com\/origin\/ba\/baa8eae8c2ffd547652b428b46937c01.gif)","78d2a6cd":"## Create a Dict like given below ,,just change the model and your desired params \n","86370bee":"### What is Cardinality ??\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRVz7kw5ZQvxEqtPz-KVe0Ee-U-8ismSi1g7Z_We8Sn2kxyuY2KV9viIMa-cNvPsCSPPhU&usqp=CAU)\n\n#### In a simnple words he cardinality of a set means the number of its elements. For example, the set A = {2, 4, 6} contains 3 elements, and therefore A has a cardinality of 3\n\n### df.column.nunique()\n#### will give you the number of unique values in a particular column\n\n### df.column.unique()\n#### will give you the unique values in a particular  column","d9880ae7":"#### Categorical values are those data which are of type object in our DataFrame. In Order to get maximum out of our data we have to convert the categorical data in a way in which it is understandable by our models.\n\n#### They are of 2 type :\n* Nominal\n    for example : Male and Female , True and False etc\n* Ordinal\n    for example : Hot , Hotter , Coldest , Colder etc ","c5955d80":"#### This plots is showing that Males are Placed more than Females , According to the dataset ","f4a8707d":"## Using Standard Scaler","7bd77e4b":"# What is Standard Scaler\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBUVEhcUFBUXFxcXFxoaFxgaGBoXGxoaFxoYGBoaGhcbICwkGx0pIBoXJTglKS4wMzMzGiI5PjkyPSwyMzABCwsLEA4QHhISHjMpIikyMjI7NTQyMjIyNTIyMjIzMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMv\/AABEIAOAA4QMBIgACEQEDEQH\/xAAbAAEAAgMBAQAAAAAAAAAAAAAAAwQBBQYCB\/\/EAEgQAAIBAwIDBQQFCQUGBwEAAAECAwAEERIhBTFBBhMiUWEycYGRFCNCUqEHM2JygpKxwdEVQ6Ky8BZ0g6Oz4TQ1VHPC0uIk\/8QAGgEAAQUBAAAAAAAAAAAAAAAAAAECAwQFBv\/EACoRAAICAQMEAgAHAQEAAAAAAAABAgMRBBIhEzFBUQVhFCIyQnGRscEV\/9oADAMBAAIRAxEAPwDQ21uqDCjHn1JPmT1qesGsFq0eEVe56zXktVJ78E4jGs+fJR72\/pmoGiZ\/zjZ\/RGy\/Ec2+NNc0GUu5NJxEZ0RjW3PnhRjY5br05ZqIxs\/5xsj7g2T4j7Xx+VJk2BUbpuo5Z819xH8qlRwwDDkRkVHlvuNc+OD0or1msUoGDNM0rfcD7ISXdq9xHcKrIZF7oxavEmSoL6x7S6Dy21U2UlHuLCDl2NDmma29j2YkfhZ4i86xDupJO77rUcJq0gMXG76QRt9oVvLL8m0skUcn0xBrRXx3BONSg4\/OetN6kR\/RkcZms1sj2cl\/tX+zRMhOlXMvdnZTGzn6vXv4go59a2\/HewE1tbS3Aukk7qNpNHcldQQaiM94cbDnR1Ih0ZHK5pmui7MdjXvbf6Qtysal2UL3RfZDjOrWOfPlTs\/2KlurRbn6SqZ1+DuSfzbsvPvOun8aOogVUmc7mmar2U5eNHbGWGTjlVipEyNrDwM0zSlAgzTNKUAM0zSlADNM0oKAK9zkYcc0396n2h\/ryqcN1B26UIqvbHTmP7u6\/qnp8Dt8qTyO7os5pXmlKNwJL8ZxGNZ8x7I97f0qFo2f842f0Rsvy5t8amVccq9UNtjnP0eVTGw5V6pSgQwarr4X0\/Zc5X0bqPjz9+aknuVQZY4ydqxKgdefPBBHQ8wRSColzVSXiEakjJJHPAJx8qnhk1LvswOGHkR\/rPxrTXkPdyHybcfzH+vOkk3jKFjFZNvBco\/stnHMdflX0D8lV9pmntzykRZVHmyYjf8AAxfKvkoyDqU4I5H+vmK7T8nV4W4la4OCXlVx6fR5Wx7sqp+A8qjlLK5JILElg6r8qbi34XDYxnHessfl9XCA7H5hfnXVXXD3uOFCCN+7eS2RVfcaTpXfw71wH5XnJvoVPJbSRgPIs+CfiAPlXeX9tNLwju7clZntkEZDaCG0ryfp76jxwTp84OG7AcFkg43NHKVd4LY6pFLnUZTEUB1knZdXWvofei6W+gO4V2g+D28TEfOQ1y35NeCXFvc3bXQPessAy0pmJH1u5kO\/QDHoK63gzW3e3QgbL99quBljiQoq\/a2HhVeW21IxUc5+R4EcJjDZyJZQc88hyK33AuD\/AESy+j69egSHVp051s78snlqx8KqdgrXureWPGNF3cgD071iv4YqLsLcPJwpHd2dj32WYlicSSAbnfkAKBT4fwi3Ld0A5UumFzupZcnBHqM7jyq\/4lYo6lXHTzHmp6irHDOzF89pbyxxR6XMfdv3oB1M2EJXTtvsd+tby84DeTyPbm1QSxIkmoXC+ASF1UqdG+TG2R\/Wmuc4TW1ZT7\/Q5VV2Qe54ku32c+DSq1rOWBDDS6khh6hipIPUZB3qzmrkWmsoz5RcXhilKZpRopWCagnukT2mGfLmfkKBcZLGaxmteb12\/Np8W2\/AV5Nu7\/nHOPIeEfhQOVbLM14i82GfIbn5CqrzyOymNNOM+JuoIwRgdOR+FTxWyL7Kip8UYz3JFBIp\/XffX93\/AL0q5Sjah2ETUpSgrChpWDQBpuKNmUD7q\/5ic\/wFWOFzbd2fs8vVf+39Kr8SXEufvKPwJz\/KoVcqQ45qfmOo+VRZxImxlYNu50MH6HCv6eTfD+B9Kxf22tMfaG6n1qYEMvmGHzBqO2Y7o3NeR81+yf4j4U\/6Gf8ADSI3z6irvBrqSG6jlhfu5EDFW0hgCVKnKtsfCzD41i\/tT3ilASXONI3JbzA91brh3Zlsh5JCpwfAmMjPm5z+AqpdfCr9TLmn01l36EOJ3k11KJbmXvHWMouESPCk6jso3Oa2lv2t4iiKi3QCooVQYYzsowN8b7UXgEXUyH\/iuP8AKRQ8Ah6CQe6WT+bVW\/8ASo7YZcXxWo75RlO13EQzMLoZbGfqIugwOlUuHcbvIHmeK4w9xJrlJijbU++4BHh58hVh+AL9mWRfirD\/ABKaqTcImX2WSQeR+rb+Y\/hUsNdp58ZwRT+P1MOe5ueBdob50kIuwp71y4EER8Rwc7jqCPxqbh095bwiCK7KxjVgGGJj4yWbcjPNjWp7PxSK8muNkB0EZxuQCDggnPIfOt5WVqtXZGxqEuDY0ujrlUnOPJo5uK3tssVslx9Smgw5ijJDIdQViRuevrVjhPHr17iaT6VpkKRqSIYyGRS5TYjAIZ5Pwq3f2iyRmNuR5HqCOTD1BrQ8CJW5ZGHjEbK\/vRlII9CDn41Zhq3ZRLnEkVp6NV3x4zF+PRsLjgwMSqrfWJqKyEDJZ2LMGA+ySTt8q0qMdww0spwy+RH8R1B8q7Cuc7U2WQsqkrghZNJwSp2UnHkT8iaZ8frZKe2b4f8Ao75LQxlDdFYa\/wANfNdIvtMB6cz8hvVZr5m2jjJ9W2Hy517itEXko99TgV0ODnlBIpdxI\/tyHHkvhH4bmpobVF5KKnpS4Q8YpilKAFKZoTQApTNKOAJqUpTSsKUpQBS4jbl029pdx6+Y\/wBeVavBAUspXUMrkbEHyPWugIq5wQqwe3kUMu7oGGRhj4xv5Nv+1VXVTdcdyWfZd0lcbZbG8PwaHhU3OM9N19x5j4H+NW5kYsndjVIThV+8D7QJ6Drn0rY3XZkBg8DaSDnQ2Sp8wDzH41d4Pw5oyZJMd42wAOQq+QPmeZPuqpP5KtVNxfPouV\/F2dZKXYm4Xw0RjUfFIR4n8v0VHRa2AFZpXP2Wysluk+TpKqo1R2xXApSlMJBWMVmlAGMVmlKABFQC3TWX0jWRpLdSPKp6U5Sa7CNJ9wKgvIBIjoeTqQfiKnrBojLa8oJRUk0ziLdiVGrmNj+sNj+INS16uo9E8q9NeoftgN\/HNRu4HM499dnTPfBS+jjLobJtemeqVXF0D7AZ\/wBUbfM7VIsMrfdQevib5DA\/GpSM9k1C92gOM5PkPEfkKsLw5T7bM\/vOB+6NqsxRKowoAHoMUYYmUa9e8b2Y9Pq5x\/hG9SrYsfbkJ9EGkfPc1exWaXaJuKP9mx+R\/ff+tKvUo2oTcyvSlKYQilKhuJCuOQycFiCQo8zjfFI2kssdGLk8IkdwBknA9dqm4XE7zRyIpCIxLOfCCCpBVQd2ycem1X+G8MiIEhcTHo2QUH6qjYe85NbgCsTWfI5ThFf2dBofi9rU5P8AoyKzSlYZvisM2KzUN1bq6srDKsMHpSrGeRJN44IG4nCNjLH+8KlivI39mRG9zA1f4DeKrC3lVNX93JoUBwB7LADAcD58x1rdT8Jgf24Ymz5oufnir34WDWU2UvxE08NHO5oDWzk7LQ\/3bSxH9CQkfuvqFVH4BcL7E0bjyeMqT+0hx+FRy0b\/AGsetUvKIKV4ktLpPag1+scit\/hbBqs9+qbSLJH5642QfvEafxqOWnsXgmjfB+S5So4Z1cZRlYfokH+Fes1E4tdyRNPseqwaZqO4mVEZ2OFUZJ9BSRTk8IG0llnLcUgL3UuHKjCZwBknT5mvCcPjByV1HzY6j+PKpoSWLSMMNIxYjyH2V+C4qau000NlcYv0cZqbN9kmu2TyFrOKzSpyuKUpQIKUpQApSlAFesZqgbqRvYTA+85\/+I\/rXlrVm\/OOzeg2X5CoxFW\/JYlvY12zk+S+I\/hUJuZG9lAo823P7o\/rUsUCr7IAqXFLtJFFIq29uyNrEjh\/NTpHy5H41ubLjEutI3RZNRxlcowHMkruNh7qoGtl2dgy8khHs\/Vp+Bcj44HwrO+QhVGpyceTT+PnY7FFPg6AVmgpXLnTmGqjZfSJJGjHdGQZZY21JqTPtJJ4g3TIKjBPxq\/Ve4hJwyHTIh1Rv91h\/EHcEdQTU9E4qWJLKZFdGTWYvsQXjADROjwkkaWYDSGGCrJKMrkHBG4NdP2e4g0sZEmO9jbRJjk22VcejDB+dScJvluISXUBgSksZwQHGMjfmpGCPQivdhweGF3eKMRmQAMFJC+HOMLnA5nkK0YxjFNIz5SlJps2NMUFKQUYryyZGMZHrXqlAmDWXXAbaQ5aFNX3lGlv3lwaoP2YQfm5pk9CyyD\/ABgn8a6KlLn2J\/B8844Li1kSPvI5FkVmDGMqcoRlSA+CcMD0rUzPJIQZXDYOQijSgPnjJJPvNfROP8IW5j0atDqdUb4zpbluOqkbEeRr5\/NE8cjRSALImMgHKspzpZT5HB+RrQ0ddL\/asmdrLLo8ZeDAFZoKVqGSKUpQApSlAClKUAKUpQBRxWcVgmo5J1X2mA+P8qaSklCagWRm9iNj6nwj5nf8KkS0kb2nCjyQb\/vN\/SjIB3AGSce+uj7PRYto\/NgXPvclv5itAbBACdOo4O7HUeXrXTcI\/wDDw\/8AtJ\/lFY3zEmoJfZr\/ABCTm39FylKVzx0IoaUoA8Wdz3FwkmfBJpjl8gSfA\/wJ0n0b0rsga4q6gDoyH7QIz5eRFdFwC9MtujN7Yykn66HS3zxn41o6ee6GH3Rn3w2yz4ZtKVStL0SPKgBHdOEJ8yUDnHu1AV7vL+OIZkkSMebsF\/jU+19iHcsZLVYatLJ2qs1UsZhpHNgrFd+XiAxUi9oISAw70qRkMIZCCDyIOncU7py9DOrH2SWnEG70wyqEk3aMg5R0B5qfvDbKmtmDXL8X4tbyR4WUJLGdcRcNGdaA7DWBkMMqR5NV227SwyIpj1ysVUlIo2lKlgDpbSMKfeac62+yGq2K7s3Rrju0HZuZ375JjK6qw7t1RcoTqwrIBuOmrPPnXRLPdN+bsZcebvHEPkWJ\/Cta3HpRd\/Qza5n7vXoWVD4fLJAGrG+M0+uNkHlIjsnVYsNnERyZ6EEHBBGCpHMMDyIqSr\/agMLtWaCSEyxEsHAGpkKjIKkg7Ng+4VQrZrm5xTZjWRUZNIUpSpCIUpSgBSlKAFKUoAoJYk+3IT6KNA\/r+NTw2qJuqgHzxk\/PnVilGEOcmzGKzilKBphhtWw7Py\/UiM+1GdBHoPYPxXH41rzXhHaN+8j3OMMvIOvl7xvg1R1+md1eF3RoaDU9GzL7M6mlV7O6WRA6HY8wdiD1BHQ1YzXJyi4vDOsjJSWUM1jNQzykFVRS8jnCINsnmST0UDcmtjD2bZgDLcOHI9mPSij3ZBLe8\/Kpq9PKxZ7IisvjB48lQmrXZh9M1xH56JB+0GRvxQfOqd5bSW8irIxkjk2SQgAh\/uOF2yeh67j3y8FfF9gfbt2z+w6Y\/wA5qemuVc2n5RXtsjZBNezMriO8njeaSNJCkixwxl5ZCy6GCvyRRo32+0NxV+yQodVtw+KNiPzt1JrlPqQoYn3FxV29s2M0U0ZAZNSPnI1RvuR7wyqR8fOtgKv9XCWDP6Ck3lmj41w26vIGguLiMRsQWWKDTupBGGZz1HlU1nw+5ijSOO+lCxqFUd1FgBRgc13rb0pOtL2P\/DwXg1N9cXgicStbXMehtSyxGM4AO+tSwz+zWp7LcUuXtoreOaK27uJBoETGRgAPGTJhfkD763vFrRpY+7D6VZh3mPaKdVU9M7AnyzXniHDElRQcqybxOmzoRsCp\/DHIjY05XPGGyN6eOcpHl+Hyv+cvbpvRXWIf8tRVb\/ZuPvBMJbgShdIl75i4U\/Zy2dvSvUfEJ4xomt5JGH95FoZHHRtBYMp8xj3VBedpgiMwtrpmA2TuXGT6sAQBRun4Y7ZWl2Od7W6xdRI88k2iJz49BK62XAyqjnpPPyrW1EtyZXeR21SOcvzGnyTSd1AG2DUgrYpTUEmYt7Tm8IzSlKlIRSlKAFKUoAUpSgBSlKAFKUoAVgis0oAiAZG1xtofr1VvRl6+\/Y1sYOOKNpVMZ+8Msn7wGV+IqnWCKp6jQ1X8tYfsvabXWU8J8ejp+zMiSXUjqyuEhQKVII+sdixGPPQo+FeU4L31yguC4kCNM5DsrZZ2jSNWU+FEUbheZwSfPQcIvRa3Amx4GBSUAfYJyHx1Knf3Fq7q+tmk7u4t2TvEB0k7o6PglGI3AOxBGcEcjuKozqdD2+MF+FyvW7z6IP7Kdklt5GZ4iFMUjMC6NvkZ5nSQrBjvvjfFavszHIbt+8UhoYjG5wdJd3Byp6gqgb9qulspJSpM0aRtnYJIZAR55KLjfpVrTVdvnksJccdj1SlKYSClKUAKYpSgBWDVK+u3jICQyS5+4UAH6xdhj4A1V+l3p5WsQ\/Wuf4hYzT1FvkY5JGn7d2sYSKYKBL3qpqAwWVg2VbzxjPwrmVq72huLh7ju7kqO7w8aRg6CGGNeo7sR4l6e6qQrZ0kWocsw9XJOx4RmlKVZKopSlAClKUAKUpQApSlAClKUAKUpQApSlAGCKksLuWDPcSaFPNCNcefMIT4T7sV4rBps4RmsSQ+E5ReYs7DsneyTq8ksmp0YxtGqqiDkytjcklSOvnXTV8\/7I3JS8KfZliOfLXF4l+Oln+VfQKxNTDZNo3dLZvgmKUpVcsilKUAKUpQAxSlKAOf7V8HM8YeMfWxZKfpA+0h9\/T1ArhopMjO\/kQdiCNiCDyIr6yRXI9q+AZ1XMI8YGZUHJ1X7QH3wPnjHlV\/Saja9suxnazTbvzR7nMUrxG4IBByCMg+hr3WsZApSlAgpSlAClKUAKUpQApSlAClKUAKUpQApSo5ZQoLMcAdaBUsl3gh\/\/utv13\/6b19LzXyfgczNe2xxpXvTjPtHKOMnyHpX1gVjaySlPKNzRwlCGJIzSlKplwUpSgDW3HGERzGqSyuOaxxlse9zhR7s14\/thv8A0tx+6n\/3ra4rFOyvQzD9mnn47oUs1tcgDckRq34KxJqhH24t2AYRzEEZB7sbg\/tU432qWMtHbgSyjYtn6tD+k32mHPSPjiuNt4tChck4HM9T1Jq9p9KprMlgo6jVODxF5Owk7bRfZhnb9lF\/i1UeI9r3kjaOKFo2YFS8hUhQRgkKpOo+\/FaHFZxVqOjrTKktbY1gjhjCqFHJQAPcKkoKVbKYpSlAgpSlAClKUAKUpQApUVyMoR5kA4JGxYA7jcbGu14x2e4XbX9tbPayMLlSqaZZcK+tRqYmQHGG6ZqOdm14JIQ3I4\/FK6HtJa8GtLo28ltIpSJpGbvJir6lOhFxJq1lh5Dkd9qv2\/ZvhkFnbSXUbOssKtJdmSU6GKoynKnwBixxjA8IByTuzrfQ7pfZx9Kt9leGJdXiWzM7wap2DhirSRRNpjy4wQGDISRgkD1rZdreFWCWs0loUtrq3lZBGJsmQI\/dkNEzHOQdQ2zy3NOdyQirbNCa17t3j5+wh8P6TcifcNx7819R\/wBh+HiVbMxSNI1u0hue9cSZRkQnngEl84A07cq0vZHgPC5rafXayM9nlJnMki946BizIqyYGdJ8udQ22OawuCzpttclKSzg5js6NfEIEx7LF\/kj\/wBK+rAVy3ZDhnCL3vWjspo2iVWJaWRSVl1ldJWY9EOc4qfsfwfh97FJc91MsTT6IVeecEAJGCPDKc5cueZqlKjd5L0tY222joqxiuVjt8LJaMXKJxJYca31dzJJG6Jr1a8aHAzmtvxLszbIt0IBPbyQQiRJhcTMpYrIwBV3KsBo8QI5MOVRx07eeR0tWo447m0xSuSfhtnDwm3vJre5mkliQsY5py2t4y5dl70ALkb486tcE4Yt1Jaw3LNIkdiJH0yuuqR2jVXLxsC2ySbk9TQ9O00siLVppvHY6M1wvabjzSO9vCxWNSVlkU4ZyOaIRyHQnnsQKs9qpo+GSP8ARg+me0DRK0kkg7xXIZgXYkeB1OAfsVdi7NcMt7W3kuYiyyxB5LsyS+F2VGByh8Gsu2CMDw75JqWqpQlmXJFde5RW3jJxccYUYUAAcgK9AV0XZ\/gFl9Ce8nVrxTcmKEM7KojM4gRsLgMxzqLEZ5DarT9ioBxlbbSzWrWzT90ZH8LK4jwHDBtOSpAJO5NaHWXozem\/ZylK6ni3ZGzXifDo4o2+jXSTmRBJKQ5jiMiHUXyPaB2I9mqfB+zNq\/HLqzeNjBFHqjj7yQBWKW5zqD6j7bcyedHW+g6X2aKldPF2Kt5LC4kjjYTR3NwEYSSk93DcONAGvB+rUr5\/Gry9hrNuKNEEcQJaxSGISS6XkeWZcsxYtgBPZBwdvidb6DpfZxVK2faG3sRBa3VmUieV1SW2WUSYV1c5KEkqysqjIA9retZUsJ7lkZKO1ilKU4YKUpQApSlAEVx7PxX\/ADLXedu\/\/OuFfrH\/AKkdcM6BgQdwedRvbgkMzSMw9lmkdmXfPgYtldwOWKisrcnwSwmoo3v5QyRxS4I5\/R4ce\/EmK7LsPYPHbWqpI9xazwlnEmgiIsisFTABKkl1KHOMdMb\/ADJYwCWyzMcZZ3Z2IHIamJOBk7VDNIIlIDyKHP5tJHRXJ5\/VqwBz1299MlW9q57D4yzLCR0\/YsxxcaZEIEYku4ot9vaR1RfQaZAP1a6PtfZ6eF3zywxB1kkaNgq6yjTBkYtucnJ8thXytINWNQ0hcaEU4CY5EEfa9elTSRltWt5H1gB9UjtrC7qGy3iAycA+ZqpO6OTTr+OtksvCPuRiLX0d0pUw\/RJF7zUMZaSJ168tKsc8q4L8nLhrbi7LurySOp81ZHZT8QQa4NsjTEHkERDExh2CHcfYB04yT0qwqbHSzqGGGCOyBgBjcKQDttvTXch0fjZvPKOx\/I97N5\/u9t\/luK3HYiKOLg1l3shQPOjKQM6necsinY7E4GfKvmZjwD3bPGSoXKOybDOnOkjOMnn5101rwl34fDdd3CyNJHGlvrukIZpRApWQTaUbUdWQm3SnVzUkQ6yiVUsvydBxhNHFJU6ST8PmHvLmJj\/yxXW8UtjILpbkK1oYF0htOAQJTKT1GPqzk8iNq+d3vYq5hS4kS6hndI0eSBu8LKilnQJM0hdT4XKnbJHSrVl2SmmiiZ3t1aZBIltKbmcEAK2GZ5cbakzhSAT16u5WSu8NLk3Vul23ArNbLT3hgiD68Ad2YiGwSDhuWKrdg2R1uJRqWJbK1jVjuyhUlkbOBgsBIhrQWfAp5LaSdTHCsUrwmEPdMFZHEbaWWZV05JwAo22q7N2OnNz9EElumbfXqRLhFKqREFKLPhjjG5zsMUnLaeA4SayefymorWnD7iJi6aHRGYYLLJCroxBAwT3Y2x1NdJ2K4e8VvbIkjXFpNCWfvNDCIsqFUTABKEl10nOMdOvzrtBwwQBIe9jl7jujrjeUqNfexaHjeR1VgVBGAuMkYrWxghSqu6K2dSJI6Kc88qrAHPupJTUXyWqdNK6H5WuGfR7ThiXHCbiztcMq3roVVgNKC7WRgCeWIySPcOdW+yvZy3tOJzrbs7aLWMOXfWVaWSQ6c9NolOPdXyN2MLq8ZkQEaXEcjRnA3X2CNWN9vWrttEm7xvINe7MkjqX57uVYFjuee+5qWtb1lFbUVuiWJH1q2hjdeESQu0kcbsiOwwzIbO4UMwwMHKL061V4XwaWLj89w4Xup4WMZDZJ0C2Vsr03FfM44MABXlUL7KrLIoXmPCA2BzPLzr0YjkHvJsjIB76XIBxkA69uQ+QqToyK\/UR9Q4BxIQW2pvZfidxEf+LdSov+IrV2G4UcalQsAz2EJVepCTXGrHnjUPnXx76IuNJaQrq1aTLIRqznVjVjVnfPPO9ejbjWJCZDIMaZDI5dcZ2WQtqUbnketHRkHUR2XbKw7vhVl3kUccyzwq+hVBBEcmxYZzsATvXJ1F9HGclpG8WvxSO418tZDMQWx151LU1cHFckc5KT4FKUqQjFKUoAUpimKAFYJrJFVLqcg6EGXIzvyUeZ\/kOtJKSissfXXKctse4ubrSdKjU55DoB5segqGKHB1MdTHm38lHQV7hg0jqSeZPMnzNS4rKu1Dm8LsdPotBGlbpcyPIFZNZxWCKrmiVm\/Or+o34lasiq396NucZ\/zLVnFKxkPP8AJhq7iLvP9nIe5x3v0mPus8tf00ac56asVxGKtS8cuhZCzQxiNHDowVhKCsvfLhy2jOoD7NSUySbyUfkapTitqzg+hcXsfp8MyuJbO+jhUyCOU6XUiQorlG0yRkrKMN4lyeWd4+Aq91aW1rfo8EzQ5tp4ZgGZVRMsGQ5R9JQlWyrYz6C3YC9vLZXW5tVjnjAaZLdxMUwQRhpCquMuOoBJwKt23CL6BUhgntnjiUJE88LtMiAAaS0bqr4AAzhc4Gc1aME03Z2zaHhVzE7l2jvZFZycliJ08RJ6nn8a6Y\/+bj\/cT\/1hWrsOzV3aq4guo5e9cyTLcxFlaVjl3Tu2UoDhfCdQGBWY+A363JvBdwPM8fdsrwP3SIGDqI1WUMN9RJYnOelAHEXMdvMnFfokZjRFjdo2kDO08M8jSSCPWzKpGBnYelc4rV9bl4NcF5ri5khdvocsCLDE8a4chyzapGJOVA2xzNfH7MkxofNV\/gKguXY1\/i5ctGbiPUpHXp6Ebg\/OoYJtGHHsNguPun73p61cIqrbr7a42DH\/ABAH+ZqOuxweUXdTRG1Yfk2ams1RsnK6ozzUZXPVOny5VszDvgMDvjdcfbKfePUcuua142KUUzlbKXCbi\/BFSpVg3xq3LAewerBN8nbc8v49fKxnSrc9Sa8BSxx4Nhv4va3PTSadvRHtZ4pUpgO+DnDaPZO58I89ue2eeDyo0BBxkk5IICZ5KjjA1bthuXod9tzeg2sipXruzkDI31ZIBIAVmXz39n051JFb5xlsAso2XJ8QUjbOAfENvQ7+ZvQbWQ0qHW3kf3P\/ANUo3oNrP\/\/Z)\n### In simple words Standard Scaler  scales the value of your data in simple range , lets say -1 to 1\n[Click Here to get Information about Standard Scaler](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.StandardScaler.html)","211bf12c":"[Check out this link to get more info about NaN values and different way to Remove them ](https:\/\/www.geeksforgeeks.org\/working-with-missing-data-in-pandas\/)\n","33ec5c72":"# Handling Categorical Columns","628c4640":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBQUFBgVFBQYGBgYGxgbGxsZGhgaGhgaGBsaGhgZGRgbIS0kGx0qHxgYJTclKi4xNDQ0GiM6PzozPi0zNDEBCwsLEA8QHRISHTMqIiExMzMzMzEzPjMxMzQzMTEzNDExNDQzMzQzPz48MzM+MTMzPDMxMzMzMzEzOT42MTMxM\/\/AABEIANAA8gMBIgACEQEDEQH\/xAAcAAAABwEBAAAAAAAAAAAAAAAAAQIDBAUGBwj\/xABCEAACAQMCAwUGAgYJBAMBAAABAhEAAwQSIQUxQQYTIlFhFDJxgZGhUrEHFSNCc8EkYnKCkrKz0fAzQ1PhFqLCNP\/EABkBAQEBAQEBAAAAAAAAAAAAAAABAgMEBf\/EACERAQEAAgIDAQADAQAAAAAAAAABAhESIQMxQVETQmEi\/9oADAMBAAIRAxEAPwDrefn2rCa7txUWQupjAljCifU1T\/8AzXhuln9tswrBSdYO5mIHMjY7jbY1F\/SRw98jC7u3ba4TdskqoklRcBYx5RNV+XwNm4hn3O4JS5hC2jaRDsVKsinqYCCPQUGnzu0GLZtJeu5FtbbgFHLCHBEgrHvbEHalfr3G7j2nv7fcf+TWNHOInznaOc7Vz3D4Zk4v6tynxbt9LGM9q5aRVa7ZdpIdLbEaifdMHYD6xrvZvLOO18YpAPEUzPZNtZsqCGXT7usz7nl8hQbPhXbC3k5j2bTW3sJjre71W6l9LK3RQBvvBqxwe0uJkBxjX7d1kVmKq0kAdY5lZgSNt6wWbwrJzcjPuW8S7jjIwlRDdCK1xwyki5DEIzBSkEzABMU\/2Z4beuX7bvZzUOPjPam+uPbtyy6e5RbdsNdSfEGnbT67hs+yvHDlYVvLuKtvWrMwBJVQrMDufRZrLcP7e3L4ybls4a27VwIge44dlNxUFxzp0hGBOmOu3rVl2HN7Gw8HGuYt3U63Q7QALOlmZe8ncapgVnr\/AAHI\/VmVbGO+t89nVQvia331tgwH4YBPyoNbidsse5m38PUoNhQdZYHWwDG6qqBtoC7mec7bb117tfkJhWs844aw9wl1GrvLeMz6bd3qGaBqI294ctzULO4feGfxFRj3CMvGC2rqqDbVksurB3nwksYHU0g3si\/wjCxcO2xORZt2rl2PBYRUCXWY\/iMMAOfPrFBouzvaRs3IvdyinEtQi3pM3bkAsEHLSAefw89tBl5KWrbXLjBURSzMeQVRJJ+VY7sTw\/I4fduYDI9zGE3Me\/GwDbvauEDZtUkH4+YFbS8mpSImQRv6igy\/Ae3WJkYq5Ny6lgM7IVdxKEF9AdtgGZF1R0B5mJqbe7Y4CW0utlWgtydBLe8FYqSBEwGBEx0rnfDuC5DYGDivh3Q2Nn2ze1oNDWy91y6mfGgDAE+vWtD2ssZPtgW1Yui02OyLcxbVg3GdmJNq5eug91b2B2gGefkGlv8AGgb+Klq5Ya3kC40m542CqGU2VGzjz32FBe1uAXS2MuyWc6VXWJLaiseh1AjfmaxXAeC5KvwQvYdRjrli7Kx3ZdSE1fE8qZ\/+PXxwjuxjN33tneFdPj0997\/+Dr5UHWayeV2q9mzHx8xVt2mtNds3pMOLYm4jA8nAkwOYHqBVxhcV7zIv2O7dTYFs62jTcFwMQVgzsVYb+VZ79J3B2ysW2qWTddb9owBJCSQ5+GnnQWvZHi17Lse0XbQtJcYm0skubX7jv0BbnA2iD1o+1\/aS3w\/HN5xqJZVRdWnWxPnBgASx25A1d20CgAAAAAADYADkAPKsv+knAuX+H3EtW2uOGtMFUSxC3FLaR1OkHagn5PazBTRryrS61V0lhLK5hWUdQSD9KO52qwVveztlWhdkLoLCdRMBCeQaTETNUOBgte4suU2O6Wzgoq96gBS4bpJRhuFcKeVZTjGBnXe8RsXIVlyxd0WbVhcYoHEXdYHeXrhAkmSecxQdEt8fVLmV39ywlrHNoag51L3g\/wC8pEISYiOc09h9osXJZ7WNk2rl1VY6Q2qI2BIB8SgkTBrD9ouCZNxONBLDsb7YZtQv\/UCadejziDNaA8LdeJ4lxLRW2mJctsyrCqZXQhI+cCgueyvGPa8ZLrLpfxJcT8FxCUdfhqBI9CKuqxv6Nkmzk3R7l\/NyrtvyKF9II+aNWyoBQoUKAUKFCgFChQoBRTWL\/SsJ4eQGKk3scalMMs3F3U9COc1mMrsxi+28QsaW7lcRbot63096VYd6QW3caeZndiaDrZNHXG++S4nChxF29ibGJJZ3VHyB7ovMDvCqCs9Z6TUS5db2BlVrv6tHEVTVL\/8A8MkOFY+I2tUAHz25zQdZt8bttlvhhX7xLS3SYXQVZtIAMzM+ketWN24FUt0UEmPQTXGtVtcniP6qYkDAHd92zMFIuLr7hpmANRGnk0xvUjsUtsZCHFuWArYrm+ll8i4bg0+B72pQiXQ\/mQYY0HT+AcYTMx7eTbVlS4CVDgBhBK7hSRzB61ZE1hP0ccWs2uH4Fl3i5fW8Lawx1927s+4ELAPUiudW3xRguyOw4imSfZgHfvAWvAAWkmNBBeYG7TO8UHoGoXD8C3YVktLpVne4VliAzsWcgMTpBYkwIAnYVz\/h3BreTxfiFy4uq5j+yPaXUwRb3dEhyoMEgqImeZrM9kyWvYlwXbSZjZDC+S+Q+VcGpu+t37QTSi6VEE7DSNxuaDq3a\/Ix7eJdfKR2tIFZlQlXMMsaSGXqR1FVvCuD4YyALeLkKyIl1bjvfNo6uShmuEM46qRXNOO+yti8QbJd\/wBY+0OoBa4H7sOuhVXkbOiTuI5eS1p865eXJzmx570cMslNMlp33UDfVExHWKDqDNAJ8udQuD8VtZVlb9li1t9WliCshSVJhgCBIPOucdmcXhNzu7eMbj3b+K4vqjuUcFRrOTvKvqYwRG5+FW\/6HExxw5e6094WY3gCSQ8sF1AnY6AvKKDoFV3GuKJi2LmRcDMltdTBACxEx4QSBO\/nWf8A0nXLi4BKlwneWu+KTqFjUO83XeIiY6T0mspxEcOXD4kvDmcp3CF9LFsYMSANBJP7QjnQdPwRbK97bQL3wW4x0gFiyqAWI5tpCjryFTK4z2su49xhauJaD28G2UfJuXYbWkhcawkarkgDVqmehimeIut2xw57mRju3sn\/AE83vRYeCAzreWB3wjTBM8vOg6vxXgWPklWvIzFQQIuXEgHczoYTy60OF8Bx8ZmayjKWEGblx9gZ5OxA+Vcw4let38HhzlksKDeCWcw37mLd0yAXv8xCglNXRoHKmMjPL8MsKloWsZc02r03bzY9xByIubsuMWMbSAQKDtYNN3ryqpZiAqgkk8gAJJPpFcet2kODmouVbTG7+zoFoZF3HttsblsvpBNlzpnSYWfXdvCyYwuKWrVqyCthWa5iXbj4rSCGCqxhG0yTHPeYgUHQbfbOx\/RS1q8iZhItXGVdAMnQHIaVLjSVEcmHKDEzh3HbWXcyLNtLhWw3dvc2W2XI8SI6tqLL1MCPPcTlO3F63dw8bhthVuXspbPdDeLVtApN8kbgBQY8\/Fzggzf0ZZK27T8PdFt5OI7C4o\/7gc6lvgndgwIn5cgQKDWWbVrFsAKAlmymw3IREWfUmAOe5NL4bnJftJetklLihlJBBKtuDB3G1Qe1uIt3CybbLqBtOY33ZVLLy394A1yvh\/DcS\/Y4PZtkFLj3hkBHYE3DYQ3VYgysrpBAjZvWg7bNQG4jGQtjurp1IX7wJ+xEHToa5Oz9YjlXJe29vFW5kYy2rSNi4yJabIuXSxGgsi4loHdwQAXLHxbkETVnwy+XysN2YszcHlmJJJbaSSeZmZNB1aarOE8WTIN1QGVrN1rTq0SGXdWEc1ZSrA+R8wa5Lwrh1u1icGy01C++XatNc1uSbbu6m3BMBdKhdIHKfMzvOBR+ueI6OXd4fef29D6f\/pQbKhQoUFTlcaxV8Ny4o9GB6fKl\/rTGJnWssOcHdfjG4rnnaBl9ph50iZj4mrBIlNPu6D8Y2rnM92x0uEkl\/Wx\/WeKyhdakNyBBgxvyikWuNYr6kW4p0iCsGABtEREVkren9np5bx9Ki8Ot2wzkNLnVI8tzWraswllbFe0WEvK6ggRspEAdNhypKdpMBZ03UGrcwrCT5mF3rmOgsSB1mptnhAIlmPy\/3rnj5Mr8dMvFjProI7TYAiLyeHl4W2nnG21VvZ29w\/DtaFyA413HDOpkG4dTAELsKyn6ot+R+tB+G+HSD61vlXK4z46AvaTCBJF5JPMw0mOUmN6IdocEMWF1NR5nSZI8iYmuZX8F16T8KjW3\/wCeVZ51OLrScZw3JIuIxIgnSZI8jI5VIHE8cGdag8pgzHlMcq5Zwq54iKvwa6S7jNbO3xHGUkq6gtuYUiT5mBvVPxTJtswFnPOMdywt2rTayf3mL2232PLzqk1VCyboRpKaiYHwFTK6myTbVcKzUts3e8QbIDCAr27ahfMjukUnbberC1xbE0lVdAJ3AUgT8IrCh4BjYnl6UziahOvnUmWX2Go32XxzDTSz3EEbKSpJHmBttSrPFcO4g0ujJ0Gk6fkCtct7TXN0HoTUvhGXotqIraOmXOKYpWGdSvkVJG3oRSbfGMVhoV0IiNOkxHlERFc9vZZcRyFTOHgAT50G4HE8ZRp1qBygKQPpEVHucSwjba2WTQ4ZWUKQpDCGBAHUGsvccVW5TxV0m2z4HdxcazbtC+H7pAiuw8RRfdBIHQQPlTPG+LY5ACZvszyCXREdmUAjSe8RhEkHz8IrK4X4iRHlVJ2mYG4sfhore8MzAHV24s95RMo1qwqvIIEsloMIJB2PSrtOIYojSyCCSIWIJ5kbc65twoeFaulioNieJYxIYupIBAJUkgHmJijHEMYcmUQIHhOw8uXKseBS6DW\/rDG2GpYBkDSdj5jbY1A4SMaw15++1vfutcdiCDyCogAHuqgAH161Q0KDoFChQoOQcS4jbOU5K6lBZYPmCRS\/10upYQgAEEehrO8UzFF+6u+zOZjb3jtTFriSHRJ97l\/7rz3LKPbMcLrbWjjFuUhWAWfvTJz0VWNtTraZJ5Cf51nrWcjRpMy2kfGrvHw\/PnWsMssu6x5Jjj1j9SOFWJ3arUxTdm3pWKU1WuUEzUg0emgBRo2RVdmYIaSuzfY\/GrQim3WiaZzFyu7uaHEEzWis5akDeqritrw96FDMg6jmKzD9oL3IEL8BW8fTnl7b9rw86Z1hid6w2BnXrlwDU5k\/L1rTYpNvwmfnWmR30b2hCCYgz5belWLP4vlUZ8oDyqpzchnMo0RQFxx5ufACp+KoCj4CqBmJbxGTIq\/tHaiJ62E23O9S0UCoaOJXfpUkuCB8azug728xtFRWxyTE+VSUcb+pigpEkz6U5USLdlVWelY\/iz6rp8torR5OTsVrJZl2HLHzrQ0vDxyq2WqPh2Vq3CNHnFWZygBJBA86KmKaTdvBR69BUVeIWz+8KZI7xy08uVZyuosm6ddmbYtHwpPeG3uWJqFfyGW4qr1E\/TY0\/ko0CTzP2qY5TXftcpd9Os0KTQrbLj2daD3bkgRrfp\/WNRExbZ\/cH0qwzD4rn8R\/8xpvHPhNYaRrXD7YIIQA85q6xkjeoqINh8KmM1WB7XRGm0ml1itwdFSLl1V94gVBvcbtLtqk+lF2sDSGWmLOcr8qb4hl6FJ60CrqCCKyORkLbZlt46SCRLb8qlXc6+xnYL61S5WtnJ16SdzPL6itYsZJ1nPySwAVUH9UD86lcSyCoHPfrzqjRr37rzHkQaO5cyDzBP0rTA7ubcP4iKewMslgoVt+ZgxUI3ro5p9qkYebeGy25+RrMx1Wrls9k5qW3KsYIpacZTpcqLfs3CSzWT5mosJ1tn6VthdpxYdLg+tSE4s3Rx9RWaNu0f3ftRez2v8Ak0GrXir+YpxOKv6fWsj7Lb6OR8zQ9m8rjD+9Qa9+JE8x96rbhBZdXLUJ+E1Si3cHK6ftTuP3moan1Cg37lbir3T7DnH5Ueen7Eq0mdjVFw3iItLB6manXeMd4umKKgJhJ0kfM1YWrxUjxQKjqaazMrQsgSelTL0s9r98q2qg8z086h5Ge7CQIUVnTxj8QYH4TS7vFQ0CG3gGNtq5447byunoGhQoV1c3CuKXiLtwBtu8f\/O1P8Evarqo24aZ+hpviFhWvXIK\/wDUed\/65qMSLZBGx6EVz5\/47Tw\/lbO\/iIFLAEEDz8qqr2WFJ3G3OTufgB0qJwDNuOr6m1eIKJ3gR5ev8qss4eDYbjfb71eUqXCwizxW2QAWinXzUAJDA7edHhuGQbD6U61sHpU6JGYvZguMRu\/w2orWKxBZbaLB\/ekk1drhIHbYAtDT9j\/L604cUVNmlbbW4ilhoMAmNJ3jeJBqNxJ79wK\/daF2nxSQD1irPJxQzoJO3TpHUn8qsQoIiqrMW+HrBkFiep6etPDAUONhyHQVYNCNpKn0IGxFReIZBQBtPoPzpL2zlOlTftKLj6REsf8AajVKK04b41JVa25mdFT+Gj3hA5fOmgtPWJEkDkN\/hQO2IOsxyH86Z9lV58PQ9KmY3hDSIldvrR4w+4NUUf6ttk+4Klp2etEe79zU9LYmrOygigzV3sxagkah86rm7MmJ1\/KtmrhlJKmN+omBUZ7qd2DpeI9JoMeezNzowpLdm7w5EfU1sUvKYgN9BTmsf1v8NBhm4Dkjl+dJ\/VeWvKfrW4N5JjVB+BpYVSJDA+nI\/KaGmE7vNE7MY58jTb3MnqjH+7W5uXERXZtgAv3JpvDZHEgyDQYNr9wc7Z\/wmg3ED+8kfaui9yPKsx24tAW0IAB1fyqaHfqFChVHBuLaReugQQWf5PraaisV6CNh1+9HxV\/293+Jc\/ztUMvWdRv+TL4u+zlxEuaeWuD\/AHlkj7TWmTmSfM\/7Vz9LhBBBgjcH1Fa7hfHLbrFxtDjn5GOoqXH8axz37DGuaXKnryqzBqgzr6lgyH4fnVhhZgYCedZWJ7w0enWkNan95vrFJ1xRXLkKSTsBTaiXSvIbdT1PzoLlqPOqm\/xZYKr0ms82ZcLEqzT5c5qptrMjLDN4eh3qBxpwUj4EVQ2nuaiQD6+dO5mUzKJ6bVJ1Ut3CbZKmaurQBAPnVJjtIq64YZt\/AkV0vrbkeFulIIDeWwpZpToAq+ZEn58qkodv39TJ6KAflS3UKAB61FnYGOVP3XVRJO3Oa0DFTcdtqgrcUiZEVJx7y9GH1oDsvNs\/3h+dRP8As\/Kmmz1t2m6kswA+ZqsbijRoERUtkWRe4w934CpGms7Z4swA2Gwinhxpvwipzi6qe4\/aN\/ZH51LRRKf2lqiHFQXJK8wBUvG4mGuIoEeIb0liWK\/tRleC5bH9QH5NNR+y+VHgPTeqvNulxeY\/+Qj6MaY4blFHB+tVHSDWW7dCbaAfj\/kat8PiiPCiZqu7U4j3RbS3z1fQRzqjudCjoUHnfiz\/ALe9\/Euf52qEbtDjD\/0i9\/Fu\/wCo1QtdQ0mi5Q7yoQuUO8qjQI+pQR0\/KhjZJUyDyqHwhu8cWxzIP2E0rKOliIrFjpKvE4pvS+K5n7NdPJj+VZZr8Cnm4gSsdARWbF5LfC4e5GqAQfrVjbw4Ech\/zrUXh3EQVAB+VRc3OuCYJ\/8AVVdxMOCluSDuSTWfyrks1L9quEnUTVe7EtNNM2pWPcIIrScB3DjyIP1rLdQat8HiBtSR+8PyrfxzrR5FkAHzNRm2qLj5rOpZuZ5DoBSb1xjAHzpMet1rHSbZf3QTE05xS2Om8iKrbzyAJ5HpVk1gm2x32jeZNVm+1Oq+D6rUFLCjzHwJq3ayBZc8ypDeu+1UN7IjlzNBKXcqgkknlzJ3qTfxGFxlVG23iOlV112S4joYYAEH41OyeNZNu6xZgWjyEbiscY1yMBG0k6TA9KJiYE8jR2+0F4W2SFIYySRTlztC7aAbaeD051OEXmIpvtM+tKxlIcHyNLXtGhul2sKQREU5hcRS4GXuIZjIYchvvVmCXJXHFm3c32NwfUzUcYYG4M1YWcO41tliNT6t\/TlT1jhFz99x8hUuN+LLEbAyVS4NRArX4zq8MCCOhqiXg9udRGo+tT7aBQFXYDpWpj0zvt2ehQoVpHmHjL\/0i\/8Axbv+o1QdVSuMn+kX\/wCNe\/1GqDNRosGlA01Navs7wWIu3BvzRT08mNS9NYYXKrXsnwcW5uXPfK8vwgnl8ahdosEo8j3TyNX+NfhgfkamZuMtxSrDnWZW88OPTmL0F5VM4pw57TsCD6HoRVeGrTkcS6ynwk1YpmyCG51VF96UzdKaNpd29A51DAnc0g3KB5UPa0wLa3NmmB5Vb4+EoaT4gBVdw3HKpqHOrLGf5HqKzysr04+KXHtJFqOQH+1P5Kqg8MaooIwo2UEQRNa52+2L4JPSvS34SZE9fKtLhZCXLbW197QSR8BVE1nSCAOdP8LLW7gfTMSCOUgiK1HnssUuflm2rDVz2MeXlVEuXbJBJ61rMvhIuE6tgegosfgFhP3J+NBG7RXLTG13Lo3gElJMH19agXOH3bjnxz\/Wj0rSjHVRCIuolVUcgWYhVBPQaiN6XctogdmJbRae\/E3RcuW1coHTQRat6iGKowuHTp1EzADMpwdljvLirOwmPEfSasLXARqVQGd3JCqukEkKzndiANlPM+laTh\/DSzaDquG6M\/Fe6p027BQlEDKFIV2Ko0swILQsxFQlzMdbePdsLba4pxLsKyDIVlK+0q6IvePK65Nwhd00SYkIGHi2m0C3bLMw1IsaSywW1gvA0QCdc6dudThb0nSyaGhWAlCCjzpdWQlWU6TuCeR8qkXswmVXvLyG5klvaAU1WMhdBx0OpnQGA+qFgqvh5gMAk6fCEVF0IgYvpBdndi5VSzM7E8gAAAAN5A6FHRVQVGKFCoOx0KFCg8s8ZP8ASL\/8a9\/qPUOalcZP9IyP417\/AFHq67OcB1xcuDw81U9fU+lS3TeGNyuoV2a4LqIu3BsN0U9f6x9PKtXq3NGTBjyplmg\/GK52vZhhxmjTP4j671aYWTqGkncfcVVXhyPrv86NSQQR0qLnjyi5yLCusMARWS4t2bYEtbMjyPMfCtPj5gYQdm\/On2WrK82WOvblhQo24PrP+1OXrRJlQa3uTw625llE\/Cjt4CDkoFXkxxYPH4bcc+7Hqan2eFFWhulbBraqCTsBVWfExPnUtdvH45ezdq1HLlTptDn1pYFCaPR6P28VtIZtp+9PrbFKu39UAcgKJWrpJI8OfkytGEo4ogaVWnMkiipdFQNOkiASDsQRzUgyrD1BAPyp32u4DqUMjhWWUNkSjMX7sXbltrlu3rYsFhis7NsKEUKCEvD7fjm2njYMygEoSAAshidREA6mkkyx3JqVy26UoCgRQFRRS4oiKBFGRR0CKBNCKVRRQdhoUKFQeesPgfeZN+5cHgF+9pB\/ePeNv8K07+GPKpOQVFx4\/G\/y8Rpm4oYRXOvbhjxiNc5g01c50Ncj1G1CPv8A8isOsC4sqRTNppAJ58qeFNaYY+u\/8j+VFE1PWs112mR5H\/ekRRFKJZL7S\/1ivVSPhvRHiA6An7VC0Ukoa0x\/Hicychn57DyFIRevKjVKVUbk1Biio4ojVgdQ0tWppOVKBrq+fl7PhqUGpkGlhqrJ2aOmwaVqqhVFQoTQCKOio6IFFR0VAIoUQNHQCKICjoVB16hQoVFcnz7Q7xyDB1vv8zUTvyNuv51Mz2\/aP\/bf8zUF0muT6GE67NMnUdOn\/OtGzSAR0ph1iSJH\/PvRox5n5+vqP51G9HTSbo3B+X1pQoPuPlQDTQiNqMHlQYSKqCIpNKFGVoUmkmlx9ql6ULiQBAVvRpAO\/kfsaSMZZ8UZ7BVQTG\/1HLn5c6ewxbOzjc0saXtyTGoyT5XJI39CPyFQmkHyIP5Vb0ky5Q9kIFYgcqbpzJPi+IFM10np4svZYNKBpANGKIcBpQNNA0qaodBow1Ng0c1UOzQpsGjmgXNETQmimgMUdJmjmgOgKKaKaDsFChQrKuS53\/Uf+2\/+Y0RxZCwZZgCF892B+yz86Gcf2j\/23\/zGkJlaWQx7gI57mSx\/\/X2rzeTl\/V9HH0avYlwCWGwEzIO3KdjuPOmrOJcceFdwdtwJMchPMQfvUlMkaQsckdP8RJnl60eBdVdGsjwMxXxEEg7ldMGd+W9c8s88cd2NIvcNo1hfDz6SATzjnE7TT5w7gIBXn4do5+R8tqJssEe6dTW9EztAEHaOcetOrn+LVp964H58tIO33qcvL+BkYriFIG8xusQD5zFBbTltOncc\/SOcnlFO4+UAANMxq3kSNRBkSD5R86I5Uu7FTDiCJ3jbkY8xVmXk\/EB8JgQAJlVYyVABYkATMdKRZxWckCAV5hiBHTrTz5SsoUodIC8m38M9Y6hqbTLi4bhAOqZHoen5Uxvk13EOrwttRVmVTvtvz0lh09Kg5ltxe0gBvCg95QGBUCVJO+\/l5VZPmEWS7QYDLzAJZgQCCeUDoJqnPEwjqGQkqqANqGrYlokgwDqAPXam\/LO9OOV3dU9jobenvCAlzXtIkaZ\/dmZkD4HnTuc6AoLgYOdoQKxY7c99jvyqmzc7vAPCQVZyDOxV2LREcxPOnzxObiOFMp1Ygs2+xYgD4TW8P5Pv+s7m+ltkYzFgABOkbFln4c+fpSfZPDMmdBaI6h9MUsZSIQVQ8lI8QkRvE6eXL6UP1jvIXeD16l9f\/qly819Rzsx+mBi3JjT59RAjnJmBHrS7+OVKjqyg8xzJPXl0pxs+Z2bSwIIkdfwkKPLrNIOUupDo2QAQTMxO8xz3+1axy8u+4zrEg2GDBY3MRuDM8oPKnfZLkgaZJmNweXMbdR5UpMoNcRjIC6QSTOwYmTAHnRjLUbKu3j5tJl10+XIU5+XqSGsTbY7gSRsN+Y5cpgHl60Vq0ze6JiOoHPkN+tL9rEe74tISZ2iImI5x605j3tUi4REq0kwZEjoDI35Vbn5JLbDWOzZsMJ292Z3EiOe0zS\/ZLn4fTmvPoDvzPQdadfOHjhfe17yBIeYJETInzps5m5Onm6Pz5aZ2+9SZ+a\/DWJsWWiY2+8DYmOcUpsdwwQjxHptS3zZWIIMEbEQQSTvtPXzpHtX7TvI\/e1R\/Ka1jl5bvcSzEbYzgSRtE8xy6n5dfKj9lf8P3E7iQCOm3nSUyoAEcldef453+U0ts3csqwzFSTMiVM7CNt6nLzfhrEhLLGCBsd5JAHOOvqCPlSCCDB2IO4qR7fu3hhTpgAiV0zHMH8R+tRbtyTO8ySSTMyfhWvHlnv\/qdJZPjsVChQrqj\/9k=)","40a238cd":"## Model Selection","2724d471":"### Here we can see that there are 67 null values in salary columns","9291e22b":"#### If you will check the above example you will notice that....for example lets say if there are 3 categorical values in a particular column then this one-hot encoder or pd.get_dummies() will create 3 different columns to represent those 3 fifferent  values.\n\n#### So i just renamed the column for better understanding ","c4436a5a":"![](https:\/\/i.imgflip.com\/ppry6.jpg)","0f08fcd5":"## Splitting Categorical Data and Numerical Data","f77f46ce":"#### Creating Clusters to find the relation between the Higher Secondary Education percentage and Degree Percentage \n\nYou can learn About K-Means Clustering [using this link](https:\/\/www.kaggle.com\/ryanholbrook\/clustering-with-k-means)\n\n**NOTE: This effort is useless in this case but still for demonstration purpose I plot this regplot using *K_Means Clusters*** ","8e5e935b":"## Handling Numerical Values","a66a4c5e":"#### Creating a DataFrame with Categorical Value","9d1dced8":"### In Pandas missing data is represented by two value:\n\n    None: None is a Python singleton object that is often used for missing data in Python code.\n    NaN : NaN (an acronym for Not a Number), is a special floating-point value recognized by all systems that use the standard IEEE floating-point representation\n    ","145aa2de":"# Removing Null Values","bccc4466":"### You can use **df[column_name].fillna(value = df[column_name].mean() , inplace = True)** to change NaN values to mean of the whole column \n\n### You can also select \n* Mean\n* Median\n* Mode","d5d9468f":"## Reading Datset","8d5063eb":"## Encoding Categorical Values using Label Encoder and One-Hot Encoder","297c9b3a":" #### Males from Comms&Mgmt are getting Higesht paid Job according to dataset","f227fd33":"## Data Visualization\n\n### **This part is little bit complex and i have done it for my reference and practice you can skip this data visualization part and  learn about data visualization in Kaggle courses**\n\n##### Data visualization is the graphical representation of information and data. By using visual elements like charts, graphs, and maps, data visualization tools provide an accessible way to see and understand trends, outliers, and patterns in data. ","60333857":"### df.head( )\ndf.head() will give you the first 5 rows from your dataset","f690537d":"### What is Label Encoder\n\n#### Encode target labels with value between 0 and n_classes-1.\n##### In simple words Label Encoder just gives your particular unique value a number , For example if you have a column with a nominal categorical data let say Male and female so Label Encoder with give them 0 and 1 values respectively\n\n#### You can check out this link for more info on Label Encoder \n[Click here for more info on LabelEncoder](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.LabelEncoder.html)","f201bf70":"# Checking Cardinality","b0700c5b":"### One mistake that i wil like to point out that i used the original df and implement my transformation on my original df. \n\n## **NOTE : If you transform your columns in any way , you should always create a copy of your df and then implement whatever you want**\n\n**df_copy = df.copy()**","106674a2":"It returns the columns with numerical indexes so you can rename your column in this way","3b8e1226":"# About This Notebook\nThis notebook is for those people who are completely new to Machine Learning.\nThis notebook will teach you **step-by-step** how to create and test many machine learning models to get a good accuracy.\nI will strongly suggest you to check out the courses provided by Kaggle if you are new to this whole Machine learning thing.In addittion to that you have to explore different Things all by yourself, You can take help of YouTube and Various free documentation\n\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBUUFBgVFRQZGBgaGyAdGxsbHBsbGx4bGh0aGxsbHRobIC0kHR0pIBgbJjcmKS4wNDQ0GiM5PzkyPi0yNDABCwsLEA8QHRISHTIpIykyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwMjIyMjIyMjIyMjIyMjIyMjIyMv\/AABEIAPEA0QMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAAFAAMEBgcCAQj\/xABKEAACAAQEAwUEBwYDBQcFAAABAgADBBEFEiExBkFREyJhcYEHMpGhFEJSscHR8BUjM3Ky4WLC8TRTc5OjY3SDkqKz0hckNVSC\/8QAGAEAAwEBAAAAAAAAAAAAAAAAAAECAwT\/xAAhEQACAgIDAQADAQAAAAAAAAAAAQIRITESQVEDEyJxYf\/aAAwDAQACEQMRAD8Azz9qVH\/7E7\/mzP8A5RYeC8NqsSnPKWumysiZ7lpj37wW1u0W28VONF9iP+2z\/wDgD+tYtkLZPkcBVhqZkj9pzLJLlvnyub9o0xcuXtdLdkTe\/PaGaXhesatm0YxB\/wB1KSYZhVyDnNgmTtdOet+W0a6rp74Au1lvzNi1h6Fm+cAsLp7YjXTbXukhR17qOx+OZfhEPJVGeY3w9W09TTUq1jTXqc4Vu\/LVOzCs5YdoxYBWJ0ttaCGJezyrWW7SsUmPMRcxQ50B0JtdZhK3tpcGD3F0+cgw2rSQ0yak2zSlFnImyJnaAA\/WAU\/CCGK0j1cpplJPmUtQVFwVCkkA5UmowNtyAw+LAWgCkU+k9m9W6K4xeYMyhrZZhtcA2v23jHlL7O6t2mAYtM7jhb5ZhBuiPf8Ajae\/b0iT7GbfsqpsLfvpmn\/gyokex4KcIcObL2k3Mf8ADlW\/ygCkD6LgSreZNljFG\/dlRmyOc2dQ3++0te0QOJcDrKFEmNWGdLdgmZS6FWYEqbF2BU23B3t1i2+zCVSoKwUbF6cTkyMcxJvJllveAPvFuUQPaAq\/s2kWnt9HzygGYtmCZT2dgRrc2vfXw6Jg0gdgXB9XVyJdQuJsgcZsuV2K6kWLdqL7dBEheAqtpjS\/2o3dVWvkf6zOtrdt\/g+cO+yehaVUVgZSuZJDai1wTO1+UP8AsykZa7FT9qdf\/rVQ\/CEqCgBP4Tq0pXqv2k5CM65Mri+SaZV83a6Xtfbw8YIYjwLVyJUyacUZsiM+XI4LZFLZb9sbXtvrFt4jEv8AZ07sfczH7Xv9v+897X3834aRC9p1NRvTr9KZg6iYacDN3poS4Byg8wN7CKCkZ3wzQ1WIT+xWrmSrSjMLEzHGjIoWwddTnJvf6pgjjfDFZSz6WQcQmTPpLsgezqEK5Tcr2pzXzHS492Cvsfpz21U5Huy5SepMxm09Fiy8Qy2mrhs1lIdaqUzgixGdHVhbkcxEAksFdm+z2tAOTFM7gXCssxb72uwmkqDY62O0c4XwTWzZUuYcSKF0VmQo7FCwuULdqLkHS9htGhgJ9IcrrO7JLg3C5M0zJrb7Wa+52ii+x\/NfEC4Af6Sc4GwbvZgDzF72gHRU+JZNVR1C030p57OiMpUul2d2lqljMbW6jW\/OLQnAFZlAbFCs4qWCAOU0tfXtAxUFgM1uY05Rn+FywKqSQAL1su\/j\/wDcCN4nf7fK\/wC7Tv8A3KaECM1wPg+tqkdnr3kMkx5bJZ5ljLNiwftFuDuNNoA4hh9TKxBKD6dMYu0tRNBcAdoCfc7Q3tb7UazhaoZNcJhtLM+fnIvopUZjprteMewyTTJjFOtGxam+kSsjHNc3QFtWAPvZoYMtFfwHWSnkIMTmN20wpmyzBktLmTM1u1N9JZFtN46qeBKuXOkyf2m57XP3sr93Iobbttb3jVnysdbXQ5h4EqRf4MwgPiLXraE9VnH4okAUYzxBKqKKqenasmzCio2cNMQHOL2y52284aOJTrfxpn\/Mf84I+07\/APKTv+HK\/pMAJb6RLJY\/+0J3+\/m\/8x\/zhQ1bwjyGADEWr2f8TSsOqJk2akxleWEAlhSQcwbXOy6WEVUGPbxYtGq0vtNkhZamTPJWomO1ll6y2eayAXme8A0u\/LQ67XISPaZTK051pqq8xgw7krSyIgv+96qfjGRU7QUkPEPA+TL7M9pQ+jyA8ic9TLMtnJWUqM6gLNIKvdcyl7d3cjQCJlR7UaFA82VIntPdVBVlyi6BsgZsxUAZjqt9+cZxUbQInnWGg5F04F43k0NJOkTpc53mTHcMioV76ImpZ1N8ynlsREj2fca09DRmlnSJ8xmdmORUZCrAC3emKeRvpGfqII4fLO4Fydh4Dc+UOg5GmYHxtR07TRIoKhEcqwRJcldQuUkqJtrnTzh6TXNOpqWlNLPUyTKLu4l5CJS2bLlmFiTyuvwiDw1SZJfazbXbRdAAo13PWLYiKwGtrc\/7RnKQlJsjJX9hVzpySJ09ZqS0CyghZTLMwnMHdbDvi1r7GIfD8udRTqme1JPmCpbMqyxLLIO0nzLPmmKAbTV2J2MGLgfw9x00v5wbo5xYWbRrRnza0UmUyqq5z0j0ooqkM7OwYiVkAec00AkTL3ym22\/xghimILVALMwqqcrmyM6U5CswtmB7YkctRFmamU6tc+pt8BDsu2w0g\/IyilcPS5uH9orUk+c01kYtJEsqMstEIOeYpvmDHQW1iEeMHEmTKq6SrNQjS2mMEkhWeW6sxX94uhym1gN40VVtziHiWGS562dQSPda2qnwMOP0rYNeFITj6T9Jab9FqrNKRAAsnNdXdibdrtZx84D8HcQrQtVPMkT3+kTmmqEEslVJY2bNMGveG1x4wbr+EpmtmBsdL2G53uPxgLU4VMlnMyXUAhjyIOmqxsnF6IuRTXDy2DgWdZvaoG2uJnaLe3oDaNKHtKozlnNT1AnqjIECgizlCyh8wQgmWpudbDblFLr6RlAIBK766nXmPCBU\/TlyhPA0y2UHtBlpTVMudIm9rPac\/cCMi9qCFGZnVjbQE5eUUXAaoU0+mmuGZZTo7BLFiF3CgkC\/mRDU46w5Q0cyc4ly0Z3OyqLn+w8YL9CzRK32nyWNSUkVH7ySqSwyyxaYBNBLWmGy9+XqLnQ6dXJ\/tJpmnU0wSKjLJDhhllXOdVUZf3muo8Irr8OyaNc1bMLPuJMsj\/1vy9I8kYrREZRhoI69pMzfGIf0igtjnHXEtHXBWk0syXOEwF5rpLUsio65MyuxOpU227sVWW9osdXh9JNQmSZkl7XEuaQUb\/Cr2BB6XisRUZKSwJkvNCiLmhRVCBsKEYQigJVOLwTp0MQaQQXliwiZMQxUtYQJc6wRrW0gW28KIxxEPL\/SLTw\/QZ8q6rfukje17n1tATDaQFrubAa25noIvmChUysBY2O\/+LUmKeFZMn0W6hppYUSmHd6cgBtHlTh81SSpHZX0I1IHlziDR1Nzck+F\/wC8WGRPVU7zA+ZA845m2hqiDSVSWI90ddLxzPxEIy9m2dhoV3Py1hydhqzCJkvRbd5bb+R8Y5ocQlySZbJk9LHzvu0Jj\/oQpsQmuP4ZS\/1mDD5ERMk0gPezsb+Nh8tYYp8QQ6FgVPO\/yiBUYospmXPpfTqBv6wlFsfJFilpbmT5m8eE3OjekV9+JpSy8xYdNT98Uyq4vMtiJYAUnUgk38bnWCvSuXhp9TKzDxgfUUgsbrdrEAjn6RnUjjqcDvfz2i\/8M4wtVJDm2ZTZh9x8oF+uilK9oDNgfaZgFseXPlzFh8oEV\/AsyYndADX2Gg8+9axjRKiqCLm006RlHE\/FNUZjojsi37o52voflGvN0S0MpwB2ZzVdSktBuF7z+PgPnDlZxHT0ssyaBMn2pp1ZvG+5+6K01PMmd93LE6x2KO3nGTk2Kl2My0ec5d2JJ1JP3mGausy9yWbAbnr\/AGiRiE0y1ybEwDvF\/OF5ehtjrTCdyTHgjmO5axvhEnWWFDuWFC5BQIePFEdPHiRQgjSiJ4bSIFK0THbSIbsKI1W14j0fvi0dT3iXhtOZjqAALWNhz5c4qKE3gO4XS3bOb295QdN9oscmcktmuRmOlrciecN0tCcoAHunUDoOV\/P7o7qaEEZiLORfw0G3SH9NYIWdkxZYYF1upW1+m9r2g7hqy177DMftNqB\/KDoIo8mqMvMzMbWAt4wOqcbYg2JA6XjDFZKV3g1aZxNJTc3+EC8bxeRUS7JvyO1j+UZpTU0+b3lGVftMco9L7w49JMli+YN\/KfwO8TjpFU+2TpuLzJZtqbH9bRFr6yZMOclgD5mIquWYDx\/V4sEgZgBkL8gM2VvMKCAPU3gjnAPABNSbBfev8STBvCcHknWcC7DcZ8ktfAsdz5XgZUSRLm3IZbciO9+vGOKnHzLBMqWrlOZF0TxtzbxhJWyna0W8cL0kwdy4PIoZpH\/mZSp+AghwnhrUk50LXRluDa2xGhG1\/XlpGeYRxFX1E3L9KdN7Cwtp4dIvvDFXXTGAnyQ4zWMxSoNj9ZkO1+otpyhShSsuL6HuI8QmLMEtbbkgWsSPPwMZ+svtJjvlN787n4aRf8XmMky1iW5jS+nMdb6RCw2l7QEFchLaBlsQP0fONqTiRJFdSntpbXl6w81L2SmbMFhbQH74M4rNp6fQuWe2mgtfy5RQcexiZNazE2HKIUbYqBldVGZMLfDyhgQmHMR4I3SpUB2IkyViMgidKWJkx0dQodtCiLCifQYpSpKVJdFKeYPfed3yx55VJsBHsvFqYN+9wyR45M6H0Aa0VVjbWC1Hi9wFmAOOp0YeRiJxknaGmqDrYpQ7y8O+Mx\/uzQ6uN0JHfw5QfB5gH9UDp1CrJnTvLztuPOB4oxyY6+MZ292FIs9LUYTMB7WkKG11yzJhF+h10iVR4phssgLSrfxZm+RPKKkmG5uZI8YaqaMSwbeR\/K8VFsXFGryeI6Z7dmVUfZA5c9v1pECvno18jHL8hvpGa080SwCV1GxBIP5QWoMR7QEa7gDW5+Xn8o3jlENUOcSTbqtusQKCSMwL2sNbHbzPWJ9YlwL2NuR\/CBE6oKk5NSvXYHr4xlscdF5pMakyhmcqg+0wDOf5V5RAxXiiTPzCWs51A1JCZb\/ayWv8DFJnIkxLu\/7y9yWOnl4QW4eVJRKyz2jnmdJa87m+rRbpbDiTllk2a1gdrggnxsYt2CIqAA90eFs3qTeANY2SX2pOclhr1PM+UAK7H3Zjlaw6WO\/gYiLSdsTTlo0XiHAJU9Q6OCwGl7bdDbQxQZkkybgBLHQ6HKeoIELDGqqg2DtbYm\/KLRiuC9moaUcxAGdG3Om4vzhNq7RWVhlNk4nMlH912cu+7Iozf+Y3MaRwPUhpeeYzWBJuSbs3Nj9w1igdpKvrLAI8OccVWMzRYISAOQ009IXJaZSvo0jiXFklukwDMhOU+Fr2YdDrbWG24jkzAFve+1xqDy1EUvBHaqOWaWyLvbXyEGMQwRUlq8sWUHca2PRvzjT5ptf4OWsgfGqoNOzN9XYHkL6\/jFTqWuxN7i+hgviqv7\/obbgi4N\/A6QGdeuxjWkiENmPAYUKKAdlQRkwNlGJ8oxnMaJEKOc8exFDA7iGAdYfvDMyNiQlh+JvLOjH8D4EQdp6ulm\/xA0puq95SfLlFQQxJRiNoyn8\/B2XqmwxXF5M5Zlvqaq394E4rJNrFSp2N9D8IC0mIFGuGynqDFiXiMTAFmqr22POI4tbBOiu1EgjTvX5aafG8PUQ7MZrG\/e15cgbQTqqqUVNhqd+f62gXUVNu6Nh+MUpUF3gIS6rMuu4+EegZj08rD4npAvUC8erVEbRAOPhJqqPUlbN5w5SU7mwYhF52iGsx25m\/hDyzCBa+sQ5Dpljp5yzHCAdxBYD8TEqZKVVsVBv4QGpKhZK3bVjvCrcaW9lIFjud9RDIrwtuBIqHSwuNjzifUYggzZl907k7X6eEZ62PkZctyw6RGq6+ZMuzzCC31F6HkTDsai+w3j4kdpewN+QNvW42iszpgVrAaeO8OmZYWPSI1yTrEWaqJceD3AR9NNCfL9CCNVVmTMZfelsCd9GDXOviLxC4bQypQe18x1HhtD+NhWVbe7rl8jrbTl90dPyxEUinYq\/7xwhJAJOp3H4mAzHx5xJrFa+tvTT5RDMaEnUeR4DHsBI7LibKiHKETZYjObGhy8KFaFE2MEiG5kOiGpkakjSNrE5fdgfeJcl9IctCG5kEqZwAAwBv6kesQXI5i8TcLS7rfb74FkGwzT4ejEMU9Lkx5iFMhHdVR5fLWJc+oCnKNudvujh5qG1pfpfT+5iWkLkwM5KixiI7c4tcnh6oqyRLl3C8zoOthFPqVKEqQQQSCDuCNxGMo0zVOx8VmXbeOkn\/AFiYHM4Gu5jztbwuI0FJKKQWbvE9bm3ha8dpVZBpLTXw1+cDEcw8rg+cLIq9JL1DWFrDyFoVMhINl9Y8NjsbfP1jlakg5RBxxkSfg\/Pewt8Y6phc3iIe8bmJtNPVSC3urqfIakev4xDNS24ee4wGvhy22t0tEXEysyWVDEEagbeY87iLxhFDQ1UlJsu8vOtygOoI33idP4MpZjZ+8NNQDpfr5xvGaSJcWzBahiTqYaa8bPO9mFOZb2mO0w3yMdACdrgbxmGP8O1FEwWamUN7rA3VrdCPxio\/RMhxoCwgYREJRGpJJlROQRBkiJqGMZFHdoULNHkTQwSI4cRPl0sSloLxT+iRKQAKGHpSGDYw+O0pREv7IfAENLJifhiWOYi9vhE4UYtE\/BsJ7SaqjzPkIcfqm6JcWcYdRvOmBEUsWO0aVg3BcmVZppzv0+qIdw6glUikSxlYjU7nyvEWuxnJsYqm9AqWyy1OJSpCMTYKi3sOgj5yxzERUz5szKFzuWsPGNCxbHzNVpbLa496MtxCkaWxO1jb06wuJSlYwwMeDSOkcHUfCEWEMo7Vo93MMhxDqODEtMDtd9SYfVwPzhhGF94edxtEPYxxZ4A\/V44LNMuqiwPPkBz9YgOxvvpBGgcZgNlvf\/WG1SsqKtml0mG9nTSWp3KzVl3tfRlJbu+dxBvAeLRMcI\/cmA2ZCbfLrAzgabMny5xIzCXZE58y5t8RBDFeF5dYomSiJdQnPa9vqt184jofZbp2IqjWY2uLjb7oZrDIqpfZzFDow1DDa+lweRBijpibT5T0k\/8AdVcsdwnmRyzeMCnxCokrle6OuhB1Jud79PGIB6G+KPZzMkWenJmozWsbBlvtc7W8Yo8yQyMVYWZTYjxEbpwhignS8j94G4IYaevKKp7TeFWQiqlAZLBXAHu9GPUG9o6Iz6Zk4mdS4kiI8uH1gYHt4UeWhQCOFqgInya4Wius8c9oYb+aFbD8\/EREdK+5gG7mPZT6wfiVDtlyo5ueyjc7ecX\/AAGjaRLJZQHPlcDlrFO4LwtmZZzgZFF73G\/K4i6PVXv3r3\/W8Hz+Si7IlJsi11abnUwArag66\/GClSN9tYBV73BG1o1kwK\/V4gxOh22iVXSRMUqQLkfCBM+bY+vhBqW+YB+QA84yTKaKNUyjLcoeUNh\/GLFxVRjSYtuWYjx2\/XjFaCxoUjrP4x6r+MeCV4x0JHjCwM7Vx1+EdzZ2w5Q2tP4w4kkQnRWRsPEtE0ufSHqaRLvq0OTcudV2VdSYm7wOqNQ9keLoEalICspLDqb\/AHxpqSQDtr1jE+AKPtq5HRyqyxd22zcggPUn4WjcybePLmYxkmFlU4x4bWrl9oFyT0ByMu5tspPMRVsEzVMs0tSrFgCFmG2ZTyF+YjVggOtoE1+FoGExFAbn5RNByKdh9A9I4R7WJuCNmHW94vVRJFTIdDs6FfiLXio8WVqrLW+UlSCpv42YG0FuE8Z7aWTYKBoBrY23MWtCezF8cwt6Se8l7FltqNiDqCIjIY0n2uUIKSqgJY3yM1+ouARz2++MzlmNE7RGh+0KOYUILATPHGeE6GF2cb0QmIvHinWPezh+mpyzBRqSQB6wBZqPCaFKRBNFs1zfnYnS4goyCWCVu2\/T4RHs4QBR3gALbja0OzZlkvM7p8OXibRT8IQOqWbmLeECaxgQbjW0HDNFr235\/raAlc\/e01HOMZKik8lPq0s2u19YO4e4Zip1B1HT9flA2vk2Yjkdj\/eGMLqikxUY2106H8ohGrygziUrOjKfs29eUUI6GNGmEFS24HLoIAVeCy3zMjMrE311XyBsI0TRKK4rR4zwSnYFOUbBh4H87REqKN5di6MoOxI0Pkee8MuyPmMIZomSJel7RLlovQRLlRSjYHs3jBGlw55pVQQLkC5O5Jt6w5UkCwUDWH8LMwzZYVcxDA22Gh3J5Abw1KyWqLxhDzJdR2VMF7KmsJjELeZMA5seRa3kF6mNApuIxMVtW7o3tYsVF81vGx08Yz+cyqpRQwzG76klmOpa\/jDMzFDKayEgKd+p\/WkROcbJhFmrJjgITXcA66bi+vxEBcV4wlylzMDoG8b76eMZ5Nx95gsjEtz0NvjtpEWRlcOZrC4BOp\/OMbNUhvFuJHqM9yuUEBQosN7kwT4PxFxMRMxBIvvuL6gD9bRS0AucpuLk+kFcKBM1VHhpe2+8aUQzcsbw1a2iaWTrbMh\/xKNDryvpGDqtiR0jfOG2vLynUAAa7xlfGvDsylns5F5cx2ZGG2pvY9DrBp0DK1eFHkKHYgPmEPIukRBvExTpHSZDLtF59nWFS5geomqSJZGU8ielucUiVTNMmLLQXZjYDxMbNSYWaSiSWVAbL3iAAMx5n84BMB1NSMzFWI162N\/LnDMvFiTaYbW0uNLjow5ax7UzpYIDAfzDf84FT0DMQut+emW3Q3I1jJsEFZ1WAb3sDtba\/PzuPuhp5Ie5FiLW3v4k7wOlOB3DcqdNRa3lHJnNKaxHd+8RLn6UokDG6XKLrygM12CvzU6xYKxwyk8usV+W+pAGhiTRE\/tyo0Y5Tr+hD0qoJvaYpPIHQ\/PSA9HMzMZZP8v5QRSnym7AW+fnaB2gpB6Uj2vnFudxmX4jUehhmc90ZHWW6fWUGzWP1gDsR9qBpfTuuRY7E6ekRK6oIsCMrciLjnvaHfgJFo4f4blzzYSy6AXzgsCF+yQNn+R3i0VfstkvKvKd5T23fvL6jf4RI9mmPyZkvsiyo9tV0FzzNom1HGfZzpsqcFTISL6kMBqCB4ix9Yxc3ZTtGPcQ8PVFFNAnJpujrqjgWvlPXXY6xJ4dLNOGTS6m\/lpp4a2i9YfiMvE5LS6gDIT3Ap76OvuuOmlx4iLDw9hdJTgokkBnYWZrOzC3MnbnoOkaRk2iHNaKPUplBN9vKBDyw1\/O94v8zBUrVmGShllHKn7DFdCB0N\/SM3rZk1XZBJckEgFVLC40I0G8ZU28GsWqGq+qWnl5U7ztuTy5wBpZ\/eu\/eUnW\/LxhuYGJOe+YHUHQ+oO0eARsopKhrOSdUSMjaHumCfDHeqFF7Aam\/hyHjECju47NveAuviv9osfB2DzGmXZdzobjl4cvXrDXhE1WTYMA0RdAB56j484LYpQS6mU0qYAwI+B5GA2Ey7XQqP1vzg7RqLEqb6xEn+wqwZl\/9Op32F\/5n9oUapr4QoLFR8kqYlodIiIYlyo60YsOcF0suZWoJjEWOZbc2WxAjWeLJ3cGl9NfL84yPhOeJdZLY3sWtoLnvaRsHEiF5BKqTYW0106wnsTM0xymmS2Bscj7HX7z4QxS1KzLK4OgsLWvvf4coueFT0mSzJmWKtca6+Wlop2JYWaeaUJ0v3D1HhGMotZRcWmeTZWUm17brzI8NeUcP35djclOuloeWaUsGBtztuBHcylzgTF111Ph4jrEFASXVnVSbCBx0JPKxiViKlWOlr\/rnEGS\/f1hotHEulOZDe2Zvh0g9MnBF7+\/xgFWVRIItY3uCPCGGq3YWLaRdNoVZCFZUgEWO6gi\/O\/P74jVldmFr36fdDvDtVLk1EuZMXOgPeBAOjAg6HfeLNNxKiQM0qmQOSSSVzC3VeSr5ROEwcmkVWTmChwCGOi2++DGFUBqZhE6oKX0LkM+uwBPKOJtYZneIuTsB0g7RULnvJJduRIVrMAL205RlKV6RpFKslh4W4aZZrS0VXCAFpgNr3vbe+u+njFpDijRsxu7toW5abActorPs74gyzJsqYCjDWzCxAGliDrpFS4m4qefON\/dViFsLG199efSCN0zKUP2wXTAOMB2liLC5253Jv6wXqqpaKY83MPo1S9z3QRLmka5uqOATfkb9YzGjwd5ksz6VzMC6vLItMXqbD3h5fCLVw5jCTpT01T3kcZbaXXowPUGxv4RLGouP8COOcA01chqKN1SY3eYA3lu3+Q+WkZVieETaeY0qahR1PPY+KnmD1EanwlWTKSY1JNAuNZbA5VmSydGB2B6jwEXZ5cmaAk2Wkxb90uoJG2movvzi8lxlR85TEYIrqbMh3G9ot\/BlRMnTAxGWw7zKPetyI5Dyi7477M5E0N9HdpLMdQe+libnTceGtolcOcEGlUBpq+JA\/OHF+hKV6C1EezlCYi6nkdSTB2lFl2I\/V4ZWaktN9FF\/QbmIlZi2UhVGa\/zBF\/SJvsWwp269RCiu5X+wfiY9g5D4nzRLibKEQEMTZbR2xOeQXwLEpciYWdbkiyvzS+5Asb6RrvC2LpOQA3ZG+1rob8uWgjCnMXLgPGBK0LkAG55+VtLWiZCrsveM4MtM5moQJNiWXfK3IgbneBeLUq1sm8sjtU1U2tf\/CT4xe6OqSbLAZbgjUef9oq+KcLvI\/eUt2BJOW+ovroSdozT6YzPpc\/SzizKbHrmF4nYdPW+ml97325xKxzDu2Hby1740mJ\/Lz\/mit00+zCx9IzlhmkcoI8Q0XdEy1\/1rFSnmxNtyPlGy4JgKzpYaouEbZNiR102i1UXDNGiFEkrlZCjE6kr0Jim0hRs+aaTDps2\/ZS3fKLtkUtYdTYaRe+GfZZUTskyfaXLJuUa\/aZdeXK\/jGw4Pw\/T0qslMnZgnMdzqfE8onZZgvsRCf08KKTL9muHg2dGPIa5ed9WGpOtvIQamcOUMuWUEhAhADALrpsb7nyiZPMxNl1PMnbwtDmbtE78tdeW5v5wnfYkVWsxEUzGVLppa5QCpsozLyIsNoD1nHEw2HZKCuoII9bgwY4mwaZVy0MpMk2XcWY2uvTNbXWMuxygn07Dt5Ly76Xt3T5MDa8K6ZLjYbxerlVDLMUlZlrHlvy8RHOB8AfSGLz6oIpJ0Vbv8zYRWKDEuycMPwg7UcUK65gSjjpqD4+cJ8i4ujQcK4Io6Nu0l1cwMNyzS8p8wFH3wB4lwuU5appHRymszJoDb3mA5MNzaM1xLF5s7RnYrfa9gfMCLp7Np4MzsyRlIIIOxHP74iUWlbNoVLA7jmP3lSJg1aUwDPbdSCHX5iLFw9jcuauV73OoOo1B0cEbbDTwiq49w+8uZNlbS\/flnqp1Hw29IicJzdSpsMpG+lx\/aNPm+Ri\/1NfkY+qhQzqxuVNrk3GxOkGZFSJigi19yIoc1SUJABYWJIta48jba0FaCpbKDmIIF9NuhFjFSgNMN1+HiYLK2VhsOX+kQaPCJma8xjp7uXbTnCnVRb3XFwNdtQeeXz09YkYbindFzcDQk3BH5mM6ZVhbsT1+X94UefSR1hQBbPkhTE6SdIgCJkgx2xOeR3MgvgiZQWOl\/wAIG00gzHCDnFjqaUoVvsNPS0ZzBF14XxjKoTOL2+sbc9vGL1SYsraEjz0jEqaaVa\/IQfpsS1XONOdtL22iMS2GUaXV0FO51sjNzBtfwioN7PUNWJuZBT75Ab3boCdgflHfCySq+qnpPlrMSXKlFFYEhSzTMx337o18IBPikmRVTVqUZ6SVNnp2ajNl74CaEjQAHnDcP9LRpTS5a2LzF02GYX8BvEGp4klLmCkd3nfT+UQO4yoMNo5IzUozTby5ZRb2cqcpJzCwB5xxxnQ4XQysz0a55gdZbIgNnCEgklhYeMPguwrwlPxaBaxXXlDa8W3N2bKupNrXsDp6Q7wrwdRvR0zzqWW815SM7OLsWZQxv46wC4F4YkP9Mm1MoTuwqJslEfvIFla3ynRmN7Xa9sota5h8F4Kn6GcTx+ZNkOaQ2YJmztYrcsBk1+tYk+kP8PY\/MmS7TpeSYmj7CW9vrI23pEOt4bpHFFUSZCylmunaS17qOkyWzBWRe7mDZdR47wTlcKUf0l0NKnZiVLYCxyZy84MRrbNYLf0ifxorIYMxHAmK1tP7RTcWxhJhmSprSioJGVlzX16XgLgUwza5KNwDT\/SKpcmtiqdtkU+C5Vt5RcaXg6haonhqOWVXJluumqnNYnxhL55Bu0ZfxDwpJRVmy2ABtmQEgWPNQSbeUAK+klKqKFtcnvAm9+V7xrHDvD1JLopdRUU61DzZksXcB8onTllIFV7hVUOt7amxidK4Iw9Kx1NNLZZkpXVGF1Rkcq5QE90NnS4Gnd8YtRxQqdmATaco1r3HWCOBYmaeYHBtY3jZKHgek+hTi9LLM3NUhWK6gCbNWXY+ChLdLRXfaTw7SUmGSDLp5azneWhcDvGyMzG\/iV184mULWS4yoiY1xnLrJIQIM6bMDrbnp9kxVsOOpYEA3O5tuD+vSA1JOVRYqVP2lFz6jmIn07gDpzPnGcYcWEnZpWA1iLLVZmxAAsRy0+MWOhlhQzE3AO4FmAOl7AaxmOG1YUKr6jQ2Gmg19douuE4xLCXBYAixJNjrraxOpGvyjRq0QmFKuhKu0xSCStibD05RHSVqWtqdbb9dSOkGaZxMHdNwbak6kEaaERw3ZoCuYB9u9a\/z5Rlbs1QK7ab4fP8AOFBm8vqnxH5x5BY6PmWJEl4KU\/DE9whQyznVWUZrNZgDt5kD+0SavhKfLK2KOrEAMpsLm\/Ii\/Lz12jrTMGmOcJpecW+yvzO0WHEsJmWz6kc94GYNhs2mbPMCBTYWDAsddBbp+UabKpRNlZdVJG43EZzJWGZnkt4fraHpRLWMWLGsAmSzdbsPSAVPIcZsym\/lsIzoqy4+yv8A2uq\/4Ur+qbFM4sTv15\/7ed\/WYIYTWz6aY708wIzqqtdA9whYjRtveMez6MzFmdpdmmszO1gAWc3JAGgi7VBeC2e2Ifu6P\/vH+RoM+0WqqVpGl01MZ3bJMlva\/cVkYZ9POKTjEyqqwgnTO0CMWQLLVbPa1zbffaCCYxizaGaNf+wX4Q+SHZoaUwQyEDhQilQvNrKFFteQBOxgZg9PkOIoBvUMw8e0p5Df1Fh6RUKlsUd5c0zQZkvMU\/dIAC65GuOekMU2IVyTGntVojMoWYHRezOS+W6gg5hci4IJFgdhDtBaCGFcNvTpQTXrap7vJHYTHvLBZCcoQi4y2NhyyxfJdYTUPJsLLLR787u8xSLdBkHxjHOIOJZzTJUxqsO8o50VJYWWrkFcxQkljlY7k2vpa5iBJ9oVaJxmPOQZlVGYSkNlUuV083aFzV0MO8MWOLJZrkVVYGU7i\/bkEHoRy6iNWpqotNmyyAAmSx5nMpJv8IwPDMSmJUidLmr2gmTHzhQys03PmIU7XznTleJuI8dYhImzCk5GY2DEyl1yiwt00MHJAlZpFEpfCqUKCSJlLoATolVJLHTkApJ6AGJtbPC4tTLf3qWeP+pIb\/IYxTh7j2to1EuW6MjFmCOmYIWJZipUggEkm17aw1O4urPpQrDNBqFBRSVGRUNxkVNgNSetzDsD6ImT0WYtPp+8Sa4H8rJm+c2M09u9SFlUkvq7tb+RVX\/PFHqfaDiDTpc9piZ5auqHs1AtMy57jn7i\/CBPEvE9TXlGqXVjLBCZVCAZiM22\/uiAAffKM3K4v6xMVuURZ5HYnrmX8YIYcueUDvbTxEQ1gLJNM4I1003g1hswqb3FtAb9D5+UAZndW\/8ArErDA8xrKxXS5OpNlBOijVj0AgTE0aNR4oSiDuXF7W3uuxF\/O\/pAvE5sxrTXsxmSxm3UEpcf5jAZ5dSH1KGx0IY62JHeGQ5SQDe\/xNjZ2pqZyo4YI6S9zmbvXVT3QyjQXsfEbQSQ02TvpZ\/3f\/qEKKx+22\/3a\/GFEcWVbAHC3+1L\/K\/9DRAf+Cn88z+mVChRuiSRw\/8Ax084+hMJ9wfrpChREiHsnVGxgQPr\/wAv5woUSgA1V73pFhwv+EvlChQmAZlco4xP3R6woUJbG9FWxTYeY\/CKDxR73\/iH8Y8hRXYIA1\/vn0+4QPmQoUQtl9Bbhv3f\/wCj90N4l\/EfyH3QoUVIcNsCN\/EX0+6JFRy84UKNCSPMjibtChQwJU7+C38y\/jBThb3H8\/yhQonoTH673\/SO8G\/iy\/5v8phQokEDMR\/jTP52\/qh2T9X1hQobGTIUKFCGf\/\/Z)\n\n[Click here to get the Playlist for Understanding this Platform and Courses ](https:\/\/www.youtube.com\/watch?v=_55G24aghPY&list=PL98nY_tJQXZnP-k3qCDd1hljVSciDV9_N)\n\n\n#### This Notebook will cover these following topics\n* **Basics of Pandas**\n* **Handling Categorcial Values**\n* **Handling NaN Values**\n* **Label Encoder**\n* **One Hot Encoder**\n* **Standard Scaler**\n* **Grid Search Cv**\n* **Model Selection** \n* **Hyperparameter Tuning**\n\n\n  ![](https:\/\/www.expert.ai\/wp-content\/uploads\/2017\/03\/machine-learning-definition.jpeg)\n\n","63d9c9e3":"#### Run the below Cells to get the name of the columns which have object type ","7a6f87b6":"## Finally we combine our preprocessed data in one DataFrame \n\n#### Use this combine two dataset\n\n## **pd.concat([column_1 , column_2 , ....] , axis = columns)**","69d9a843":"## What is OneHotEncoder ?\n\n#### Instead of understanding what is one-hot encoding.I really want you to check out pd.get_dummies() method . This method works similar to OneHotEncoding and is really very easy to understand\n\n## Why not LabelEncoding or BionomialEncoding This time ??\n\n#### Actually when you have more than 2 and less than 10 unique values in your particular column i would suggest you to use OneHotEncoder instead of Label Encoder\n\n[Click Here to get the info about pd.get_dummies() method](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.get_dummies.html)\n\nYou just have to see the example and understand how it works \n","286e341f":"### df_semifinal df(DataFrame) contains my encoded values with the original columns with the categorical values"}}