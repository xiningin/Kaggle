{"cell_type":{"bcd582e5":"code","2cec147b":"code","745ece02":"code","e48687fa":"code","72bf9675":"code","bf68f5f3":"code","103f9eb3":"code","7a991a04":"code","4327fa7b":"code","9840c70b":"code","4352aa74":"code","db89290a":"code","34f745dd":"code","13f55a5d":"code","b674339c":"code","04762a61":"code","136e0f4d":"code","4ae1e958":"code","ba9fd79a":"code","dd730518":"code","0ee5f93a":"code","0ae8ab8f":"code","affd9d32":"code","1d15979d":"code","32b9878a":"code","864ee9ae":"code","748235bb":"code","74e2e6d2":"code","c706612a":"code","274b0d45":"code","d435796e":"code","a71d0ff4":"code","e99369d3":"code","acbd8183":"code","f98425c6":"code","d7b8e2fd":"code","6e2efd1d":"code","4378dcec":"code","f27f799d":"code","064097bb":"code","af811d50":"code","2c73454b":"code","a264f618":"code","f5856447":"code","74e41f3a":"code","085882ab":"code","e993f5a1":"code","0a2562f8":"code","5f2c2c89":"code","4edf889e":"code","513d3029":"code","d91b7ea1":"code","4b5fb7bc":"code","8173aa3f":"code","e5be3f29":"code","ceac773f":"code","545ac997":"code","d39ed50b":"code","43ee5912":"code","649f0409":"code","74aef675":"code","52d56ca7":"code","899315fa":"code","4424c226":"code","33e5f985":"code","31965aa3":"code","311194e1":"code","699241ba":"code","a9e56058":"code","b2e9af8c":"code","36745dd0":"code","36bb21c3":"code","755120f6":"code","1d2677e0":"code","3a03c595":"code","ce398c5c":"code","e2d3987b":"code","9e3e1c2c":"code","b4d47225":"code","23411ceb":"code","caac8124":"code","8caada3d":"code","a1f9611e":"code","e492377b":"code","81a2eff1":"code","bedd7de4":"code","e4c457dc":"code","8b95dc82":"code","f52af761":"code","9ceddd90":"code","cfe4cf02":"markdown"},"source":{"bcd582e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2cec147b":"countries_df = pd.read_csv(\"\/kaggle\/input\/countries-of-the-world\/countries of the world.csv\")","745ece02":"df = pd.read_csv(\"\/kaggle\/input\/co2-ghg-emissionsdata\/co2_emission.csv\")","e48687fa":"df.head()","72bf9675":"df.describe()","bf68f5f3":"recent_df = df[df[\"Year\"] == 2017]","103f9eb3":"recent_df.head()","7a991a04":"df = df.rename(columns={\"Annual CO\u2082 emissions (tonnes )\": \"Co2\"})","4327fa7b":"recent_df = df[df[\"Year\"] == 2017]","9840c70b":"df[\"Co2\"]","4352aa74":"from matplotlib import pyplot as plt","db89290a":"plt.boxplot(df[\"Co2\"], vert=False)","34f745dd":"bins = []","13f55a5d":"descr = df[\"Co2\"].describe()","b674339c":"max_co2 = descr[\"max\"]","04762a61":"min_co2 = descr[\"min\"]","136e0f4d":"min_co2","4ae1e958":"step = int(max_co2 \/ 20)","ba9fd79a":"bins = list([i for i in range(0, int(max_co2), step)])","dd730518":"plt.hist(df[\"Co2\"], bins, rwidth=0.9, log=True)","0ee5f93a":"def log_bins(x):\n    return 10**x","0ae8ab8f":"bins = list([log_bins(i) for i in range(10)])","affd9d32":"recent_df.head()","1d15979d":"recent_df_sorted = recent_df.sort_values(\"Co2\", ascending=False)","32b9878a":"recent_df_sorted.head()","864ee9ae":"countries_co2 = list(recent_df_sorted[[\"Entity\", \"Co2\"]].values)[:5]","748235bb":"countries, co2 = zip(*countries_co2)","74e2e6d2":"countries = list(countries)\nco2 = list(co2)","c706612a":"rest = co2[0] - sum(co2[1:5])","274b0d45":"rest","d435796e":"co2[0]","a71d0ff4":"countries.append(\"Rest of the world\")\nco2.append(rest)","e99369d3":"countries.pop(0)\nco2.pop(0)","acbd8183":"countries","f98425c6":"colors = [\"red\", \"blue\", \"green\", \"blue\", \"grey\"]","d7b8e2fd":"plt.pie(co2, labels=countries, colors=colors)","6e2efd1d":"recent_2years = df[df[\"Year\"] > 2015]","4378dcec":"recent_2years.head()","f27f799d":"recent_2years[\"LastYearCo2\"] = [0 for i in range(444)]","064097bb":"recent_2years.head()","af811d50":"\"\"\"\n\nfor code in list(recent_2years[\"Code\"].unique()):\n    code_df = recent_2years[recent_2years[\"Code\"] == code]\n    last_year = code_df[code_df[\"Year\" == 2016]]\n    recent_2years.where(recent_2years[\"Code\"] == code and recent_2years[\"Year\"] == 2017)[\"LastYearCo2\"] = last_year\n    \n\"\"\"","2c73454b":"values_last_year = []\nfor i in range(1, len(recent_2years)):\n    last_year = recent_2years.values[i-1][3]\n    values_last_year.append(last_year)","a264f618":"recent_2years[\"LastYearCo2\"] = [0] + values_last_year","f5856447":"recent_2years.head()","74e41f3a":"year_change = recent_2years[recent_2years[\"Year\"] == 2017]","085882ab":"year_change","e993f5a1":"percent_change = []\nfor i in range(len(year_change)):\n    current = list(year_change[\"Co2\"])[i]\n    last = list(year_change[\"LastYearCo2\"])[i]\n    percent_change.append((current \/ last - 1) * 100)","0a2562f8":"percent_change = list(map(lambda x : round(x, 2), percent_change))","5f2c2c89":"year_change[\"Percent Change\"] = percent_change","4edf889e":"year_change.head()","513d3029":"plt.boxplot(year_change[\"Percent Change\"])","d91b7ea1":"countries_df.head()","4b5fb7bc":"year_change.rename(columns = {'Entity':'Country'}, inplace = True)","8173aa3f":"year_change.head()","e5be3f29":"countries = list(countries_df[\"Country\"])","ceac773f":"countries = list(map(lambda x: x.strip(),countries))","545ac997":"countries_df[\"Country\"] = countries","d39ed50b":"merged_df = pd.merge(year_change, countries_df, on=\"Country\")","43ee5912":"merged_df.head()","649f0409":"countries_df.head()","74aef675":"merged_df.head()","52d56ca7":"for co2_row in year_change.values:\n    columns = year_change.columns\n    co2_row\n    row_values = {k:v for k, v in zip(columns, co2_row)}\n    \n    country_data = countries_df[countries_df[\"Country\"] == row_values[\"Country\"]]\n    if len(country_data.values) > 0:\n        country_data_row = list(country_data.values[0])\n        country_columns = country_data.columns\n        country_data_row_dict = {k:v for k, v in zip(country_columns, country_data_row)}\n        new_row = dict(row_values, **country_data_row_dict)\n    else:\n        new_row = row_values\n        co_columns = countries_df.columns\n        co_data = {c: None for c in co_columns}\n        new_row = dict(new_row, **co_data)\n    merged_df = merged_df.append(new_row, ignore_index=True)\n    print(\"lol\")\n","899315fa":"merged_df.head(20)","4424c226":"year_change.head()","33e5f985":"merged_df.columns","31965aa3":"populations = merged_df[\"Population\"]\ncountry_names = merged_df[\"Country\"]\nco2_values = merged_df[\"Co2\"]","311194e1":"populations","699241ba":"co2_per_capita = []\nfor i in range(len(populations)):\n    try:\n        co2_per_capita.append(co2_values[i] \/ populations[i])\n    except TypeError:\n        co2_per_capita.append(np.nan)","a9e56058":"merged_df[\"Co2 per Capita\"] = co2_per_capita","b2e9af8c":"mean_co2 = merged_df[\"Co2 per Capita\"].mean()","36745dd0":"import random","36bb21c3":"random.random()","755120f6":"mean_co2","1d2677e0":"fig, ax = plt.subplots(figsize=(16,9))\ncolors = []\nsizes = []\ncountries_diagramm = []\nax.set_yscale('log')\n\n\nfor x, y, label in zip(populations, co2_values, country_names):\n    if type(x) == float and type(y) == float:\n        if y > 500_000_000 or (y \/ x) > 100 or y \/ x < 0.1:\n\n            # this method is called for each point\n            ax.annotate(label, # this is the text\n                         (x,y), # this is the point to label\n                         textcoords=\"offset points\", # how to position the text\n                         xytext=(random.randint(-5, 5),random.randint(0, 15)), # distance from text to points (x,y)\n                         ha='center')\n            countries_diagramm.append(label)\n        \n\ncolors, sizes ,x , y , _ = zip(*list(map(lambda x: [\"red\", 4] + list(x) if x[2] in countries_diagramm else [\"blue\", 0.8] + list(x), filter(lambda x: x[2] in countries_diagramm or random.random() > 0.8, zip(populations, co2_values, country_names)))))\nax.scatter(x, y, s=sizes, c=colors)\n\nregression_xs = list([i for i in range(1, int(1.4 * 10**9), 10**6)])\ndef get_regr_y(x):\n    return x * mean_co2\nregression_ys = list(map(get_regr_y ,regression_xs))\nax.plot(regression_xs, regression_ys, label=\"best fit line\")\nax.legend()","3a03c595":"import numpy as np","ce398c5c":"merged_df.head()","e2d3987b":"merged_df.columns","9e3e1c2c":"gdp = merged_df[\"GDP ($ per capita)\"]","b4d47225":"plt.scatter(gdp, co2_per_capita, s=2)","23411ceb":"gdp, co2_per_capita = zip(*list(filter(lambda x: type(x[0]) == float, zip(gdp, co2_per_capita))))\n","caac8124":"r = np.corrcoef(gdp, co2_per_capita)","8caada3d":"merged_df.isnull().sum()","a1f9611e":"from copy import copy","e492377b":"merged_df_cor = merged_df.copy()","81a2eff1":"merged_df_cor[\"Region\"].replace(np.nan, \"\", inplace=True)","bedd7de4":"merged_df_cor[\"Population\"].replace(np.nan, , inplace=True)","e4c457dc":"merged_df_cor.isnull().sum()","8b95dc82":"merged_df.head()","f52af761":"merged_df.cov()","9ceddd90":"for column in merged_df.columns:\n    new_df = merged_df[[\"Co2 per Capita\", column]]\n    new_df.dropna(inplace=True)\n    co2 = list(new_df[\"Co2 per Capita\"])\n    other_column = list(new_df[column])\n    try:\n        r = np.corrcoef(co2, other_column)[0][1]\n        print(f\"{column}: {r}\")\n    except:\n        pass","cfe4cf02":"# Mehr Geld mehr Co2\n"}}