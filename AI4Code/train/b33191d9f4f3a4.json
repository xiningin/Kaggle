{"cell_type":{"58737483":"code","11a4e41f":"code","c7113e21":"code","fd623960":"code","6e47c63c":"code","24537d02":"code","15b8b827":"code","89e527d7":"code","2149e7c4":"code","db988141":"code","d05fcd2a":"code","9e5a93f9":"code","d01e8cde":"code","bea85e16":"code","84897b9e":"code","379a3611":"code","80754de2":"markdown","62416594":"markdown","f0be7f79":"markdown","0538b49c":"markdown","5e35d591":"markdown","efee7761":"markdown","6d0537c5":"markdown","4a744062":"markdown","175cfbec":"markdown","80768067":"markdown","1506dbf0":"markdown","4d83faa9":"markdown","bac3e50f":"markdown","1d2db490":"markdown"},"source":{"58737483":"!pip install split-folders","11a4e41f":"splitfolders.ratio(\"..\/input\/plant-diseases\/dataset_itr2\/test\", output=\".\/dataset\", seed=7, ratio=(0.50, 0.50))","c7113e21":"os.rename('.\/dataset\/train', '.\/dataset\/test')","fd623960":"count = 0 \n\nfor folder in os.listdir('.\/dataset'):\n  for f in os.listdir('.\/dataset\/' + folder):\n    for image in os.listdir('.\/dataset\/' + folder + '\/' + f):\n      try :\n        img = PIL.Image.open('.\/dataset\/' + folder + '\/' + f + '\/' + image)\n      except:\n        print(image + ' is Courapted from folder ' + folder)\n        os.remove('.\/dataset\/' + folder + '\/' + f + '\/' + image)\n        count += 1\n      if img.format != 'JPG' and img.format != 'JPEG':\n        print(img.format)\n         \ncount","6e47c63c":"from keras.preprocessing.image import ImageDataGenerator , load_img , img_to_array\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, Flatten, MaxPool2D, Dense\nimport matplotlib.pyplot as plt\n\nimport numpy as np\nfrom skimage import transform\nimport splitfolders\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_recall_fscore_support\nimport seaborn as sns\nimport PIL\n\nimport os\nimport shutil\nimport splitfolders","24537d02":"fig, ax = plt.subplots(1, 38, figsize=(120, 120))\nax = ax.ravel()\nindex = 0\nfor f in os.listdir('.\/dataset\/val'):\n    img_count = 0\n    for image in os.listdir('.\/dataset\/val\/' + '\/' + f):\n      if img_count < 1 and index < 38:\n        img = load_img('.\/dataset\/val\/' + '\/' + f + '\/' + image)\n        ax[index].imshow(img)\n        ax[index].axis(False)\n        ax[index].set_title(f)\n        count += 1\n        index += 1\n        break","15b8b827":"train_datagen = ImageDataGenerator(rescale=1\/255)\nvalid_datagen = ImageDataGenerator(rescale=1\/255)\ntest_datagen = ImageDataGenerator(rescale=1\/255)\n\ntrain_dataset = train_datagen.flow_from_directory('..\/input\/plant-diseases\/dataset_itr2\/train',\n                                                  target_size=(200, 200),\n                                                  class_mode='categorical', \n                                                  batch_size=200,\n                                                  )\n\ntest_dataset = test_datagen.flow_from_directory('.\/dataset\/test',\n                                                target_size=(200, 200),\n                                                class_mode='categorical',\n                                                batch_size=100,\n                                                shuffle=False,\n                                                )\n\nvalid_dataset = valid_datagen.flow_from_directory('.\/dataset\/val',\n                                                  target_size=(200, 200),\n                                                  class_mode='categorical',\n                                                  batch_size=100,\n                                                  )\n","89e527d7":"model = Sequential()\n\nmodel.add(Conv2D(32, (3,3), activation='relu', input_shape=train_dataset.image_shape))\nmodel.add(MaxPool2D(2))\n\nmodel.add(Conv2D(32, (3,3), activation='relu'))\nmodel.add(MaxPool2D(2))\n\n\nmodel.add(Conv2D(64, (3,3), activation='relu'))\nmodel.add(MaxPool2D(2))\n\nmodel.add(Conv2D(64, (3,3), activation='relu'))\nmodel.add(MaxPool2D(2))\n\n\nmodel.add(Conv2D(128, (3,3), activation='relu'))\nmodel.add(MaxPool2D(2))\n\nmodel.add(Conv2D(128, (3,3), activation='relu'))\nmodel.add(MaxPool2D(2))\n\n\nmodel.add(Flatten())\n\nmodel.add(Dense(512, activation='relu'))\n\n\nmodel.add(Dense(38, activation='softmax'))\n\nmodel.summary()","2149e7c4":"import keras\nMETRICS = [\n        'accuracy',\n        keras.metrics.Precision(name='precision'),\n        keras.metrics.Recall(name='recall')\n    ]\n    \nmodel.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=METRICS)","db988141":"Info = model.fit(\n                 train_dataset,\n                 validation_data=valid_dataset,\n                 epochs=5,\n                 )","d05fcd2a":"fig, ax = plt.subplots(1, 4, figsize=(20, 3))\nax = ax.ravel()\n\nfor i, met in enumerate(['precision', 'recall', 'accuracy', 'loss']):\n    ax[i].plot(Info.history[met])\n    ax[i].plot(Info.history['val_' + met])\n    ax[i].set_title('Model {}'.format(met))\n    ax[i].set_xlabel('epochs')\n    ax[i].set_ylabel(met)\n    ax[i].legend(['train', 'val'])","9e5a93f9":"predictions = model.predict(test_dataset)","d01e8cde":"diseases_labels = []\n\nfor key, value in train_dataset.class_indices.items():\n   diseases_labels.append(key)","bea85e16":"def evaluate(actual, predictions):\n  pre = []\n  for i in predictions:\n    pre.append(np.argmax(i))\n\n  accuracy = (pre == actual).sum() \/ actual.shape[0]\n  print(f'Accuracy: {accuracy}')\n\n  precision, recall, f1_score, _ = precision_recall_fscore_support(actual, pre, average='macro')\n  print(f'Precision: {precision}')\n  print(f'Recall: {recall}')\n  print(f'F1_score: {f1_score}')\n\n  fig, ax = plt.subplots(figsize=(20,20))\n  conf_mat = confusion_matrix(actual, pre)\n  sns.heatmap(conf_mat, annot=True, fmt='.0f', cmap=\"YlGnBu\", xticklabels=diseases_labels, yticklabels=diseases_labels).set_title('Confusion Matrix Heat map')\n  plt.show()","84897b9e":"evaluate(test_dataset.classes,predictions)","379a3611":"model.evaluate(test_dataset)","80754de2":"**Remove Corrupted Files Form The Dataset**","62416594":"**Evaluate The Model Accuracy In Test Dataset**","f0be7f79":"**Store The Diseases Labels in List**","0538b49c":"**Draw The Model Metrics Graph**","5e35d591":"**Load Images From Directorys Using ImageDataGenerator Class**","efee7761":"**Compile The Model**","6d0537c5":"**Fit The Model With The Data And Train**","4a744062":"**Call The Confusion Matrix Function On The Prediction and The Real Test Dataset Classes**","175cfbec":"**Confusion Matrix Heat Map Function**","80768067":"**Important Note** we can get better accuracy by increase the number of epochs i reach about 97 with 20 epoch in colab","1506dbf0":"**Build Model Architecture**","4d83faa9":"**Split The Test Dataset into Two Parts Validation and Test**","bac3e50f":"****Import All Necessary Librarys****","1d2db490":"**Generate Prediction On Test Data**"}}