{"cell_type":{"d54c0c0a":"code","7abd9dc0":"code","09bedc07":"code","cb0029cd":"code","bf0f6d0a":"code","72779368":"code","aad42be6":"code","e307f242":"code","1f9a18e1":"code","494850f8":"code","f15abede":"code","e22fe4db":"code","39ad7450":"code","6c6ad0df":"code","412816b0":"code","2eb52e1f":"code","7c5dc496":"code","0b3894d8":"code","7cf743e0":"code","c0e832ac":"code","e83a7786":"code","a2f3dcea":"code","e772e21a":"code","f6a9b97b":"code","a93d5639":"code","65d76570":"code","157340b3":"code","15cb3941":"code","39520372":"code","ce43ac67":"code","6d4988b4":"code","1b0c1cb2":"code","8e33b514":"code","90864517":"code","f5344ddd":"code","2254e418":"code","3395edb2":"code","4b92bd86":"code","ecf1deb0":"code","f8611dee":"code","37107501":"code","050308f4":"code","7a73a6c1":"code","35ac93dc":"code","cb13c64d":"code","454e654a":"code","f2f9ff0b":"code","13732cad":"code","737ad6e4":"code","b5bddc8a":"code","80ef023e":"code","45987c32":"code","5ffed485":"code","851b99a9":"code","17d4c563":"code","27f9cb76":"code","0b15293f":"code","0ababdab":"code","ea26d3ba":"code","a42f8b30":"code","9f03e485":"code","c8e90dc5":"code","a26257d5":"code","28d50fbe":"code","99f70a27":"code","ecdc9473":"code","d66ae799":"code","a5298fb8":"code","b85c78c7":"code","9ccf71a8":"code","3c40b2f8":"code","f860a4e4":"code","57a1be03":"code","9564a216":"code","72a33336":"code","05f93ac4":"code","a91a1a6c":"code","6e0e9d27":"code","dfc9e85f":"code","c9bcb0b7":"markdown","c62e1e75":"markdown","d13acc7b":"markdown","7d1cddc9":"markdown","adb6218e":"markdown","8a2d2c09":"markdown","85f20781":"markdown","6f46ab0c":"markdown","2c51c0b0":"markdown","a9ed46b5":"markdown","c60060ad":"markdown","ff7dac21":"markdown","23106af2":"markdown","276a464c":"markdown","2787bd51":"markdown","5dd77078":"markdown","724e31de":"markdown","650a1e6e":"markdown","7929c71e":"markdown","9652b6f7":"markdown","a197c80a":"markdown","a11cae83":"markdown","da223d0c":"markdown","f2a53487":"markdown","a6b23bc2":"markdown","dbf33f44":"markdown","558b9cbe":"markdown","797877cf":"markdown","93f85571":"markdown","90e1bcc5":"markdown","6c2c665e":"markdown","e25c4582":"markdown","56e46133":"markdown","1de8f48d":"markdown","83e3cf0b":"markdown","e304e883":"markdown","48e1e086":"markdown","480a103a":"markdown","67a4335a":"markdown","92375ef6":"markdown","7c918aa4":"markdown","d4f0a8e7":"markdown","64d7326c":"markdown","b9f989b4":"markdown","db3cbd4c":"markdown","e1b509bb":"markdown"},"source":{"d54c0c0a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\nfrom subprocess import check_output\n#print(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\ndata = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')\n#data.info()\ndata.head()","7abd9dc0":"data.tail()","09bedc07":"data.columns","cb0029cd":"data.shape","bf0f6d0a":"data.info()","72779368":"print(data['Type 1'].value_counts(dropna =False))  # if there are nan values that also be counted\n# As it can be seen below there are 112 water pokemon or 70 grass pokemon","aad42be6":"data.describe() #ignore null entries","e307f242":"data.corr()","1f9a18e1":"#correlation map\nf,ax = plt.subplots(figsize=(9, 9))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","494850f8":"data.boxplot(column='Attack',by = 'Legendary')\n# For example: compare attack of pokemons that are legendary  or not\n# Black line at top is max\n# Blue line at top is 75%\n# Red line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers","f15abede":"data_new = data.head()    # I only take 5 rows into new data\ndata_new","e22fe4db":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'Name', value_vars= ['Attack','Defense'])\nmelted","39ad7450":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'Name', columns = 'variable',values='value')","6c6ad0df":"# Firstly lets create 2 data frame\ndata1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","412816b0":"data1 = data['Attack'].head()\ndata2= data['Defense'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) # axis = 0 : adds dataframes in row\nconc_data_col","2eb52e1f":"print(data.dtypes)\n#data['Type 1'] = data['Type 1'].astype('category')\n#data['Speed'] = data['Speed'].astype('float')\n#print(data.dtypes)","7c5dc496":"# Lets chech Type 2\ndata[\"Type 2\"].value_counts(dropna =False) \n# As you can see, there are 386 NAN value","0b3894d8":"# Lets drop nan values\ndata1=data.copy()   # also we will use data to fill missing value so I assign it to data1 variable\ndata1[\"Type 2\"].dropna(inplace = True)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\nassert  data1['Type 2'].notnull().all() # returns nothing because we drop nan values\ndata1[\"Type 2\"].fillna('empty',inplace = True) # \u0131stersen empty \u0131le de doldurab\u0131l\u0131r\u0131z\n# # With assert statement we can check a lot of thing. For example\n# assert data.columns[1] == 'Name'\n# assert data.Speed.dtypes == np.int","7cf743e0":"# We can make one of the column as index. I actually did it at the beginning of manipulating data frames with pandas section\n# It was like this\ndata= data.set_index(\"#\")\n# also you can use \n# data.index = data[\"#\"]\nprint(data.index.name)\ndata.index.name = \"index_name\" # lets change it\ndata.head()","c0e832ac":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata.head()\n# first copy of our data to data3 then change index \ndata3 = data.copy()\n# lets make index start from 100. It is not remarkable change but it is just example\ndata3.index = range(100,900,1)\ndata3.head()","e83a7786":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"Type 1\",\"Type 2\"]) \ndata1.head(10)\n# data1.loc[\"Fire\",\"Flying\"] # howw to use indexes","a2f3dcea":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","e772e21a":"# pivoting\ndf.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")","f6a9b97b":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1\n# lets unstack it","a93d5639":"# level determines indexes\ndf1.unstack(level=0)","65d76570":"df1.unstack(level=1)","157340b3":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","15cb3941":"df","39520372":"# df.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")\npd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])","ce43ac67":"# We will use df\ndf","6d4988b4":"#according to treatment take means of other features\ndf.groupby(\"treatment\").mean()   # mean is aggregation \/ reduction method\n# there are other methods like sum, std,max or min","1b0c1cb2":"# we can only choose one of the feature\ndf.groupby(\"treatment\").age.max() ","8e33b514":"df.groupby(\"treatment\")[[\"age\",\"response\"]].min() ","90864517":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n\npercentage_people_below_poverty_level = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\nkill = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv', encoding=\"windows-1252\")\npercent_over_25_completed_highSchool = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv', encoding=\"windows-1252\")","f5344ddd":"percentage_people_below_poverty_level.head()","2254e418":"# Poverty rate of each state\npercentage_people_below_poverty_level.poverty_rate.replace(['-'],0.0,inplace = True)\npercentage_people_below_poverty_level.poverty_rate = percentage_people_below_poverty_level.poverty_rate.astype(float)\narea_list = list(percentage_people_below_poverty_level['Geographic Area'].unique())\narea_poverty_ratio = []\nfor i in area_list:\n    x = percentage_people_below_poverty_level[percentage_people_below_poverty_level['Geographic Area']==i]\n    area_poverty_rate = sum(x.poverty_rate)\/len(x)\n    area_poverty_ratio.append(area_poverty_rate)\ndata = pd.DataFrame({'area_list': area_list,'area_poverty_ratio':area_poverty_ratio})\nnew_index = (data['area_poverty_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data.reindex(new_index)\n\n# visualization\nplt.figure(figsize=(10,5))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_poverty_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('States')\nplt.ylabel('Poverty Rate')\nplt.title('Poverty Rate Given States')","3395edb2":"kill.head()","4b92bd86":"# Most common 15 Name or Surname of killed people\nseparate = kill.name[kill.name != 'TK TK'].str.split() \na,b = zip(*separate)                    \nname_list = a+b                         \nname_count = Counter(name_list)         \nmost_common_names = name_count.most_common(15)  \nx,y = zip(*most_common_names)\nx,y = list(x),list(y)\n# \nplt.figure(figsize=(10,5))\nax= sns.barplot(x=x, y=y,palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Name or Surname of killed people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Name or Surname of killed people')","ecf1deb0":"percent_over_25_completed_highSchool.percent_completed_hs.replace(['-'],0.0,inplace = True)\npercent_over_25_completed_highSchool.percent_completed_hs = percent_over_25_completed_highSchool.percent_completed_hs.astype(float)\narea_list = list(percent_over_25_completed_highSchool['Geographic Area'].unique())\narea_highschool = []\nfor i in area_list:\n    x = percent_over_25_completed_highSchool[percent_over_25_completed_highSchool['Geographic Area']==i]\n    area_highschool_rate = sum(x.percent_completed_hs)\/len(x)\n    area_highschool.append(area_highschool_rate)\n# sorting\ndata = pd.DataFrame({'area_list': area_list,'area_highschool_ratio':area_highschool})\nnew_index = (data['area_highschool_ratio'].sort_values(ascending=True)).index.values\nsorted_data2 = data.reindex(new_index)","f8611dee":"# high school graduation rate vs Poverty rate of each state\nsorted_data['area_poverty_ratio'] = sorted_data['area_poverty_ratio']\/max( sorted_data['area_poverty_ratio'])\nsorted_data2['area_highschool_ratio'] = sorted_data2['area_highschool_ratio']\/max( sorted_data2['area_highschool_ratio'])\ndata = pd.concat([sorted_data,sorted_data2['area_highschool_ratio']],axis=1)\ndata.sort_values('area_poverty_ratio',inplace=True)\n\n# visualize\nf,ax1 = plt.subplots(figsize =(10,5))\nsns.pointplot(x='area_list',y='area_poverty_ratio',data=data,color='lime',alpha=0.8)\nsns.pointplot(x='area_list',y='area_highschool_ratio',data=data,color='red',alpha=0.8)\nplt.text(40,0.6,'high school graduate ratio',color='red',fontsize = 17,style = 'italic')\nplt.text(40,0.55,'poverty ratio',color='lime',fontsize = 18,style = 'italic')\nplt.xlabel('States',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('High School Graduate  VS  Poverty Rate',fontsize = 20,color='blue')\nplt.grid()","37107501":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# joint kernel density\n# pearsonr= if it is 1, there is positive correlation and if it is, -1 there is negative correlation.\n# If it is zero, there is no correlation between variables\n# Show the joint distribution using kernel density estimation \ng = sns.jointplot(data.area_poverty_ratio, data.area_highschool_ratio, kind=\"kde\", size=7)\nplt.savefig('graph.png')\nplt.show()","050308f4":"# you can change parameters of joint plot\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# Different usage of parameters but same plot with previous one\ng = sns.jointplot(\"area_poverty_ratio\", \"area_highschool_ratio\", data=data,size=5, ratio=3, color=\"r\")","7a73a6c1":"# Race rates according in kill data \nkill.race.dropna(inplace = True)\nlabels = kill.race.value_counts().index\ncolors = ['grey','blue','red','yellow','green','brown']\nexplode = [0,0,0,0,0,0]\nsizes = kill.race.value_counts().values\n\n# visual\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Killed People According to Races',color = 'blue',fontsize = 15)","35ac93dc":"data.head()","cb13c64d":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# lmplot \n# Show the results of a linear regression within each dataset\nsns.lmplot(x=\"area_poverty_ratio\", y=\"area_highschool_ratio\", data=data)\nplt.show()","454e654a":"sns.kdeplot(data.area_poverty_ratio, data.area_highschool_ratio, shade=True, cut=3)\nplt.show()","f2f9ff0b":"# Show each distribution with both violins and points\n# Use cubehelix to get a custom sequential palette\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=data, palette=pal, inner=\"points\")\nplt.show()","13732cad":"#correlation map\n# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\nf,ax = plt.subplots(figsize=(5, 5))\nsns.heatmap(data.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","737ad6e4":"# manner of death(olum sekli) : ates edilerek, ates edilerek ve sok tabancasiyla\n# gender cinsiyet\n# age: yas\n# Plot the orbital period with horizontal boxes\nsns.boxplot(x=\"gender\", y=\"age\", hue=\"manner_of_death\", data=kill, palette=\"PRGn\")\nplt.show()","b5bddc8a":"# swarm plot\n# manner of death(olum sekli) : ates edilerek, ates edilerek ve sok tabancasiyla\n# gender cinsiyet\n# age: yas\nsns.swarmplot(x=\"gender\", y=\"age\",hue=\"manner_of_death\", data=kill)\nplt.show()","80ef023e":"# pair plot\nsns.pairplot(data)\nplt.show()","45987c32":"# kill properties\n# Manner of death\nsns.countplot(kill.gender)\n#sns.countplot(kill.manner_of_death)\nplt.title(\"gender\",color = 'blue',fontsize=15)","5ffed485":"# kill weapon\narmed = kill.armed.value_counts()\n#print(armed)\nplt.figure(figsize=(10,7))\nsns.barplot(x=armed[:7].index,y=armed[:7].values)\nplt.ylabel('Number of Weapon')\nplt.xlabel('Weapon Types')\nplt.title('Kill weapon',color = 'blue',fontsize=15)","851b99a9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n\n# Load data that we will use.\ntimesData = pd.read_csv(\"..\/input\/world-university-rankings\/timesData.csv\")\ntimesData.head()","17d4c563":"# prepare data frame\ndf = timesData.iloc[:10,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.citations,\n                    mode = \"lines\",\n                    name = \"citations\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df.university_name)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.teaching,\n                    mode = \"lines+markers\",\n                    name = \"teaching\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df.university_name)\ndata = [trace1, trace2]\nlayout = dict(title = 'Citation and Teaching vs World Rank of Top 100 Universities',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","27f9cb76":"# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:10,:]\ndf2015 = timesData[timesData.year == 2015].iloc[:10,:]\ndf2016 = timesData[timesData.year == 2016].iloc[:10,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df2014.world_rank,\n                    y = df2014.citations,\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df2014.university_name)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2015.world_rank,\n                    y = df2015.citations,\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2015.university_name)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df2016.world_rank,\n                    y = df2016.citations,\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df2016.university_name)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Citation vs world rank of top 100 universities with 2014, 2015 and 2016 years',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Citation',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","0b15293f":"# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\ndf2014","0ababdab":"# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.citations,\n                name = \"citations\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)\n# create trace2 \ntrace2 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.teaching,\n                name = \"teaching\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","ea26d3ba":"# data preparation\ndf2016 = timesData[timesData.year == 2016].iloc[:7,:]\npie1 = df2016.num_students\npie1_list = [float(each.replace(',', '.')) for each in df2016.num_students]  # str(2,4) => str(2.4) = > float(2.4) = 2.4\nlabels = df2016.university_name\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1_list,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Number Of Students Rates\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Universities Number of Students rates\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Number of Students\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","a42f8b30":"# data preparation\ndf2016 = timesData[timesData.year == 2016].iloc[:20,:]\nnum_students_size  = [float(each.replace(',', '.')) for each in df2016.num_students]\ninternational_color = [float(each) for each in df2016.international]\ndata = [\n    {\n        'y': df2016.teaching,\n        'x': df2016.world_rank,\n        'mode': 'markers',\n        'marker': {\n            'color': international_color,\n            'size': num_students_size,\n            'showscale': True\n        },\n        \"text\" :  df2016.university_name    \n    }\n]\niplot(data)","9f03e485":"# prepare data\nx2011 = timesData.student_staff_ratio[timesData.year == 2011]\nx2012 = timesData.student_staff_ratio[timesData.year == 2012]\n\ntrace1 = go.Histogram(\n    x=x2011,\n    opacity=0.75,\n    name = \"2011\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=x2012,\n    opacity=0.75,\n    name = \"2012\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title=' students-staff ratio in 2011 and 2012',\n                   xaxis=dict(title='students-staff ratio'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","c8e90dc5":"# data prepararion\nx2011 = timesData.country[timesData.year == 2011]\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(x2011))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","a26257d5":"# data preparation\nx2015 = timesData[timesData.year == 2015]\n\ntrace0 = go.Box(\n    y=x2015.total_score,\n    name = 'total score of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=x2015.research,\n    name = 'research of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","28d50fbe":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\ndataframe = timesData[timesData.year == 2015]\ndata2015 = dataframe.loc[:,[\"research\",\"international\", \"total_score\"]]\ndata2015[\"index\"] = np.arange(1,len(data2015)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data2015, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","99f70a27":"# first line plot\ntrace1 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.teaching,\n    name = \"teaching\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.income,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"income\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Income and Teaching vs World Rank of Universities'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","ecdc9473":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=dataframe.world_rank,\n    y=dataframe.research,\n    z=dataframe.citations,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,0,0)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","d66ae799":"trace1 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.research,\n    name = \"research\"\n)\ntrace2 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.citations,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"citations\"\n)\ntrace3 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.income,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"income\"\n)\ntrace4 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.total_score,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"total_score\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Research, citation, income and total score VS World Rank of Universities'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","a5298fb8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # visualization library\nimport plotly.plotly as py # visualization library\nfrom plotly.offline import init_notebook_mode, iplot # plotly offline mode\ninit_notebook_mode(connected=True) \nimport plotly.graph_objs as go # plotly graphical object\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport warnings            \nwarnings.filterwarnings(\"ignore\") ","b85c78c7":"data = pd.read_csv(\"..\/input\/earthquake-database\/database.csv\")\ndata = data.drop([3378,7512,20650])\ndata[\"year\"]= [int(each.split(\"\/\")[2]) for each in data.iloc[:,0]]\ndata.head()","9ccf71a8":"dataset = data.loc[:,[\"Date\",\"Latitude\",\"Longitude\",\"Type\",\"Depth\",\"Magnitude\",\"year\"]]\ndataset.head()","3c40b2f8":"years = [str(each) for each in list(data.year.unique())]  # str unique years\n# make list of types\ntypes = ['Earthquake', 'Nuclear Explosion', 'Explosion', 'Rock Burst']\ncustom_colors = {\n    'Earthquake': 'rgb(189, 2, 21)',\n    'Nuclear Explosion': 'rgb(52, 7, 250)',\n    'Explosion': 'rgb(99, 110, 250)',\n    'Rock Burst': 'rgb(0, 0, 0)'\n}\n# make figure\nfigure = {\n    'data': [],\n    'layout': {},\n    'frames': []\n}\n\nfigure['layout']['geo'] = dict(showframe=False, showland=True, showcoastlines=True, showcountries=True,\n               countrywidth=1, \n              landcolor = 'rgb(217, 217, 217)',\n              subunitwidth=1,\n              showlakes = True,\n              lakecolor = 'rgb(255, 255, 255)',\n              countrycolor=\"rgb(5, 5, 5)\")\nfigure['layout']['hovermode'] = 'closest'\nfigure['layout']['sliders'] = {\n    'args': [\n        'transition', {\n            'duration': 400,\n            'easing': 'cubic-in-out'\n        }\n    ],\n    'initialValue': '1965',\n    'plotlycommand': 'animate',\n    'values': years,\n    'visible': True\n}\nfigure['layout']['updatemenus'] = [\n    {\n        'buttons': [\n            {\n                'args': [None, {'frame': {'duration': 500, 'redraw': False},\n                         'fromcurrent': True, 'transition': {'duration': 300, 'easing': 'quadratic-in-out'}}],\n                'label': 'Play',\n                'method': 'animate'\n            },\n            {\n                'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',\n                'transition': {'duration': 0}}],\n                'label': 'Pause',\n                'method': 'animate'\n            }\n        ],\n        'direction': 'left',\n        'pad': {'r': 10, 't': 87},\n        'showactive': False,\n        'type': 'buttons',\n        'x': 0.1,\n        'xanchor': 'right',\n        'y': 0,\n        'yanchor': 'top'\n    }\n]\n\nsliders_dict = {\n    'active': 0,\n    'yanchor': 'top',\n    'xanchor': 'left',\n    'currentvalue': {\n        'font': {'size': 20},\n        'prefix': 'Year:',\n        'visible': True,\n        'xanchor': 'right'\n    },\n    'transition': {'duration': 300, 'easing': 'cubic-in-out'},\n    'pad': {'b': 10, 't': 50},\n    'len': 0.9,\n    'x': 0.1,\n    'y': 0,\n    'steps': []\n}\n\n# make data\nyear = 1695\nfor ty in types:\n    dataset_by_year = dataset[dataset['year'] == year]\n    dataset_by_year_and_cont = dataset_by_year[dataset_by_year['Type'] == ty]\n    \n    data_dict = dict(\n    type='scattergeo',\n    lon = dataset['Longitude'],\n    lat = dataset['Latitude'],\n    hoverinfo = 'text',\n    text = ty,\n    mode = 'markers',\n    marker=dict(\n        sizemode = 'area',\n        sizeref = 1,\n        size= 10 ,\n        line = dict(width=1,color = \"white\"),\n        color = custom_colors[ty],\n        opacity = 0.7),\n)\n    figure['data'].append(data_dict)\n    \n# make frames\nfor year in years:\n    frame = {'data': [], 'name': str(year)}\n    for ty in types:\n        dataset_by_year = dataset[dataset['year'] == int(year)]\n        dataset_by_year_and_cont = dataset_by_year[dataset_by_year['Type'] == ty]\n\n        data_dict = dict(\n                type='scattergeo',\n                lon = dataset_by_year_and_cont['Longitude'],\n                lat = dataset_by_year_and_cont['Latitude'],\n                hoverinfo = 'text',\n                text = ty,\n                mode = 'markers',\n                marker=dict(\n                    sizemode = 'area',\n                    sizeref = 1,\n                    size= 10 ,\n                    line = dict(width=1,color = \"white\"),\n                    color = custom_colors[ty],\n                    opacity = 0.7),\n                name = ty\n            )\n        frame['data'].append(data_dict)\n\n    figure['frames'].append(frame)\n    slider_step = {'args': [\n        [year],\n        {'frame': {'duration': 300, 'redraw': False},\n         'mode': 'immediate',\n       'transition': {'duration': 300}}\n     ],\n     'label': year,\n     'method': 'animate'}\n    sliders_dict['steps'].append(slider_step)\n\n\nfigure[\"layout\"][\"autosize\"]= True\nfigure[\"layout\"][\"title\"] = \"Earthquake\"       \n\nfigure['layout']['sliders'] = [sliders_dict]\n\niplot(figure)","f860a4e4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib_venn as venn\nfrom math import pi\nfrom pandas.tools.plotting import parallel_coordinates\nimport plotly.graph_objs as go\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")","57a1be03":"data = pd.read_csv('..\/input\/iris\/Iris.csv')\ndata = data.drop(['Id'],axis=1)\n# Make the plot\nplt.figure(figsize=(15,10))\nparallel_coordinates(data, 'Species', colormap=plt.get_cmap(\"Set1\"))\nplt.title(\"Iris data class visualization according to features (setosa, versicolor, virginica)\")\nplt.xlabel(\"Features of data set\")\nplt.ylabel(\"cm\")\nplt.savefig('graph.png')\nplt.show()","9564a216":"# Calculate the correlation between individuals.\ncorr = data.iloc[:,0:4].corr()\ncorr","72a33336":"# import networkx library\nimport networkx as nx\n\n# Transform it in a links data frame (3 columns only):\nlinks = corr.stack().reset_index()\nlinks.columns = ['var1', 'var2','value']\n\n# correlation\nthreshold = -1\n\n# Keep only correlation over a threshold and remove self correlation (cor(A,A)=1)\nlinks_filtered=links.loc[ (links['value'] >= threshold ) & (links['var1'] != links['var2']) ]\n \n# Build your graph\nG=nx.from_pandas_dataframe(links_filtered, 'var1', 'var2')\n \n# Plot the network\nnx.draw_circular(G, with_labels=True, node_color='orange', node_size=300, edge_color='red', linewidths=1, font_size=10)","05f93ac4":"# venn2\nfrom matplotlib_venn import venn2\nsepal_length = data.iloc[:,0]\nsepal_width = data.iloc[:,1]\npetal_length = data.iloc[:,2]\npetal_width = data.iloc[:,3]\n# First way to call the 2 group Venn diagram\nvenn2(subsets = (len(sepal_length)-15, len(sepal_width)-15, 15), set_labels = ('sepal_length', 'sepal_width'))\nplt.show()","a91a1a6c":"# donut plot\nfeature_names = \"sepal_length\",\"sepal_width\",\"petal_length\",\"petal_width\"\nfeature_size = [len(sepal_length),len(sepal_width),len(petal_length),len(petal_width)]\n# create a circle for the center of plot\ncircle = plt.Circle((0,0),0.2,color = \"white\")\nplt.pie(feature_size, labels = feature_names, colors = [\"red\",\"green\",\"blue\",\"cyan\"] )\np = plt.gcf()\np.gca().add_artist(circle)\nplt.title(\"Number of Each Features\")\nplt.show()","6e0e9d27":"# spider graph\ncategories = list(data)[:4]\nN = len(categories)\nangles = [ n \/ float(N)*2*pi for n in range(N)]\nangles = angles + angles[:1]\nplt.figure(figsize = (10,10))\nax = plt.subplot(111,polar = True)\nax.set_theta_offset(pi\/2)\nax.set_theta_direction(-1)\nplt.xticks(angles[:-1],categories)\nax.set_rlabel_position(0)\nplt.yticks([0,2,4,6],[\"0\",\"2\",\"4\",\"6\"],color= \"red\", size = 7)\nplt.ylim(0,6)\n\nvalues = data.loc[0].drop(\"Species\").values.flatten().tolist()\nvalues = values + values[:1]\nax.plot(angles,values,linewidth = 1,linestyle=\"solid\",label =\"setosa\" )\nax.fill(angles,values,\"b\",alpha=0.1)\n\nvalues = data.loc[1].drop(\"Species\").values.flatten().tolist()\nvalues = values + values[:1]\nax.plot(angles,values,linewidth = 1,linestyle=\"solid\",label =\"versicolor\" )\nax.fill(angles,values,\"orange\",alpha=0.1)\nplt.legend(loc = \"upper left\",bbox_to_anchor = (0.1,0.1))\nplt.show()","dfc9e85f":"# cluster map (dendogram and tree)\ndf = data.loc[:,[\"SepalLengthCm\",\"SepalWidthCm\",\"PetalLengthCm\",\"PetalWidthCm\"]]\ndf1 = data.Species\nx = dict(zip(df1.unique(),\"rgb\"))\nrow_colors = df1.map(x)\ncg = sns.clustermap(df,row_colors=row_colors,figsize=(12, 12),metric=\"correlation\")\nplt.setp(cg.ax_heatmap.yaxis.get_majorticklabels(),rotation = 0,size =8)\nplt.show()","c9bcb0b7":"\n<a class=\"anchor\" id=\"22.\"><\/a> \n# Heatmap","c62e1e75":"\n<a class=\"anchor\" id=\"11.\"><\/a> \n# Pivoting data frames","d13acc7b":"<a class=\"anchor\" id=\"8.\"><\/a> \n# Missing data and testing with assert","7d1cddc9":"# Manipulating Data Frames with Pandas\n<a class=\"anchor\" id=\"9.\"><\/a> \n# Index objects and labeled data","adb6218e":"\n<a class=\"anchor\" id=\"26.\"><\/a> \n# Count Plot","8a2d2c09":"\n<a class=\"anchor\" id=\"12.\"><\/a> \n# Stacking and unstacking data frames","85f20781":"\n<a class=\"anchor\" id=\"39.\"><\/a> \n# Animation Plot","6f46ab0c":"\n<a class=\"anchor\" id=\"38.\"><\/a> \n# Multiple Subplots","2c51c0b0":"\n<a class=\"anchor\" id=\"35.\"><\/a> \n# Scatter Plot Matrix","a9ed46b5":"\n<a class=\"anchor\" id=\"13.\"><\/a> \n# Melting data frames","c60060ad":"\n<a class=\"anchor\" id=\"18.\"><\/a> \n# Pie Plot","ff7dac21":"\n<a class=\"anchor\" id=\"45.\"><\/a> \n# Cluster Map (seaborn)","23106af2":"\n<a class=\"anchor\" id=\"14.\"><\/a> \n# Categoricals and groupby","276a464c":"\n<a class=\"anchor\" id=\"43.\"><\/a> \n# Donut Plot (matplotlib)","2787bd51":"It is the kernel that I have tried and compiled from the courses of [DATAI Team](https:\/\/www.udemy.com\/user\/datai-team\/) (Language of the courses is Turkish: [Data Science ve Python: S\u0131f\u0131rdan Uzmanl\u0131\u011fa Veri Bilimi (2)](https:\/\/www.udemy.com\/data-science-sfrdan-uzmanlga-veri-bilimi-2\/) and [Data Visualization: A'dan Z'ye Veri G\u00f6rselle\u015ftirme (3)](https:\/\/www.udemy.com\/data-visualization-adan-zye-veri-gorsellestirme-3\/)), which is [Grandmaster on Kaggle](https:\/\/www.kaggle.com\/kanncaa1) and has more than 15 courses on Udemy.\n\n![](https:\/\/iili.io\/J11aa9.png)\n\n# **Content**\n\n## Cleaning Data\n* [Diagnose data for cleaning](#1.)\n* [Exploratory data analysis  (EDA)](#2.)\n* [Visual exploratory data analysis](#3.)\n* [Tidy data](#4.)\n* [Pivoting data](#5.)\n* [Concatenating data](#6.)\n* [Data types](#7.)\n* [Missing data and testing with assert](#8.)\n\n\n## Manipulating Data Frames with Pandas\n\n* [Index objects and labeled data](#9.)\n* [Hierarchical indexing](#10.)\n* [Pivoting data frames](#11.)\n* [Stacking and unstacking data frames](#12.)\n* [Melting data frames](#13.)\n* [Categoricals and groupby](#14.)\n\n## Seaborn\n\n* [Bar Plot](#15.)\n* [Point Plot](#16.)\n* [Joint Plot](#17.)\n* [Pie Plot](#18.)\n* [Lm Plot](#19.)\n* [Kde Plot](#20.)\n* [Violin Plot](#21.)\n* [Heatmap](#22.)\n* [Box Plot](#23.)\n* [Swarm Plot](#24.)\n* [Pair Plot](#25.)\n* [Count Plot](#26.)\n\n## Plotly\n\n* [Line Plot](#27.)\n* [Scatter Plot](#28.)\n* [Bar Plot](#29.)\n* [Pie Plot](#30.)\n* [Bubble Plot](#31.)\n* [Histogram](#32.)\n* [Word Cloud](#33.)\n* [Box Plot](#34.)\n* [Scatter Plot Matrix](#35.)\n* [Inset Plot](#36.)\n* [3D Scatter Plot](#37.)\n* [Multiple Subplots](#38.)\n* [Animation Plot](#39.)\n\n\n## Visualization Tools\n* [Parallel Plots (Pandas)](#40.)\n* [Network Charts (networkx)](#41.)\n* [Venn Diagram (matplotlib)](#42.)\n* [Donut Plot (matplotlib)](#43.)\n* [Spyder Chart (matplotlib)](#44.)\n* [Cluster Map (seaborn)](#45.)\n","5dd77078":"\n<a class=\"anchor\" id=\"41.\"><\/a> \n# Network Charts (networkx)","724e31de":"\n<a class=\"anchor\" id=\"24.\"><\/a> \n# Swarm Plot","650a1e6e":"\n<a class=\"anchor\" id=\"33.\"><\/a> \n# Word Cloud","7929c71e":"\n<a class=\"anchor\" id=\"42.\"><\/a> \n# Venn Diagram (matplotlib)","9652b6f7":"<a class=\"anchor\" id=\"6.\"><\/a> \n# Concatenating data","a197c80a":"<a class=\"anchor\" id=\"10.\"><\/a> \n# Hierarchical indexing","a11cae83":"\n<a class=\"anchor\" id=\"19.\"><\/a> \n# Lm Plot","da223d0c":"# Cleaning Data\n\n<a class=\"anchor\" id=\"1.\"><\/a> \n# Diagnose data for cleaning","f2a53487":"\n<a class=\"anchor\" id=\"34.\"><\/a> \n# Box Plot","a6b23bc2":"\n<a class=\"anchor\" id=\"30.\"><\/a> \n# Pie Plot","dbf33f44":"\n<a class=\"anchor\" id=\"29.\"><\/a> \n# Bar Plot","558b9cbe":"<a class=\"anchor\" id=\"7.\"><\/a> \n# Data types","797877cf":"# Seaborn\n\n<a class=\"anchor\" id=\"15.\"><\/a> \n# Bar Plot","93f85571":"<a class=\"anchor\" id=\"2.\"><\/a> \n#  Exploratory data analysis (EDA)","90e1bcc5":"\n<a class=\"anchor\" id=\"37.\"><\/a> \n# 3D Scatter Plot","6c2c665e":"# Plotly\n\n<a class=\"anchor\" id=\"27.\"><\/a> \n# Line Plot\n","e25c4582":"\n<a class=\"anchor\" id=\"20.\"><\/a> \n# Kde Plot","56e46133":"\n<a class=\"anchor\" id=\"44.\"><\/a> \n# Spyder Chart (matplotlib)","1de8f48d":" \n<a class=\"anchor\" id=\"16.\"><\/a> \n# Point Plot","83e3cf0b":" \n <a class=\"anchor\" id=\"23.\"><\/a> \n# Box Plot","e304e883":"<a class=\"anchor\" id=\"3.\"><\/a> \n# Visual exploratory data analysis","48e1e086":"\n<a class=\"anchor\" id=\"36.\"><\/a> \n# Inset Plot","480a103a":"\n<a class=\"anchor\" id=\"31.\"><\/a> \n# Bubble Plot","67a4335a":" \n<a class=\"anchor\" id=\"25.\"><\/a> \n# Pair Plot","92375ef6":" \n<a class=\"anchor\" id=\"17.\"><\/a> \n# Joint Plot","7c918aa4":"<a class=\"anchor\" id=\"4.\"><\/a> \n# Tidy data","d4f0a8e7":"# Visualization Tools\n\n<a class=\"anchor\" id=\"40.\"><\/a> \n# Parallel Plots (Pandas)","64d7326c":"\n<a class=\"anchor\" id=\"32.\"><\/a> \n# Histogram","b9f989b4":"<a class=\"anchor\" id=\"5.\"><\/a> \n# Pivoting data","db3cbd4c":"\n<a class=\"anchor\" id=\"21.\"><\/a> \n# Violin Plot","e1b509bb":"\n<a class=\"anchor\" id=\"28.\"><\/a> \n# Scatter Plot"}}