{"cell_type":{"fb230dc7":"code","b4e33ccc":"code","970ec33d":"code","cfaffd14":"code","a153e3ae":"code","59641277":"code","c9d94f9b":"code","e30d6dd1":"code","5315ea3e":"code","20c84520":"code","92cf9231":"code","801fe80d":"code","f2f0f499":"code","c59e1301":"code","d699cf23":"code","0baac1db":"code","1e0f11b6":"code","6c67388e":"code","9931cd6a":"code","0a09b9ff":"code","3d009f87":"code","5bae3bb1":"code","71b36cec":"code","4f9991cb":"code","94924231":"code","068b9959":"code","5f6c9afc":"code","a236455b":"code","b12412c2":"code","419d3929":"code","cf362446":"code","6375e122":"code","68a6ae2b":"code","3b8798b1":"code","afe893b4":"code","fd708cd2":"code","30f063bd":"code","d34cd8fc":"code","6d2961c9":"code","78d51d8d":"code","aad2c611":"markdown","5af8a165":"markdown","d7f41814":"markdown","8c74ea28":"markdown","b8a995b7":"markdown","d60d7a44":"markdown","d79d1df0":"markdown","33523433":"markdown","e5c14522":"markdown","9e6ff418":"markdown","7fe77168":"markdown","1f7ab838":"markdown","88058ba2":"markdown","0cde572d":"markdown","9ffa59af":"markdown","68527880":"markdown","7a22bde2":"markdown","c7821f73":"markdown","731b0fcb":"markdown"},"source":{"fb230dc7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport os\n","b4e33ccc":"# import warnings filter\nfrom warnings import simplefilter\n# ignore all future warnings\nsimplefilter(action='ignore')","970ec33d":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","cfaffd14":"df = pd.read_csv('..\/input\/used-cars-data-pakistan\/OLX_Car_Data_CSV.csv',encoding='unicode_escape')","a153e3ae":"df.head()","59641277":"print(f\"The value counts of Car Brands:\\n{df['Brand'].value_counts()}\")","c9d94f9b":"df['Model'].nunique()","e30d6dd1":"df['Transaction Type'].unique()","5315ea3e":"sns.heatmap(pd.DataFrame(df.isnull().sum()),annot=True,\n            cmap=sns.color_palette(\"cool\"),linewidth=1)","20c84520":"df[df.isnull().any(axis=1)].shape","92cf9231":"df = df.fillna(df.mode().iloc[0])","801fe80d":"df.info()","f2f0f499":"# Categorical Features\nto_drop = []\ncat_features = ['Brand','Model','Registered City']\ndown_limit = 0.02 * len(df)\nfor feature in cat_features:\n    unique_values = df[feature].unique()\n    \n    # Fill low frequents with 'Others'\n    to_drop = [val for val in unique_values if (list(df[feature]).count(val) < down_limit)]\n    print('\\n', to_drop, 'are now Other')\n    \n    #replace low count values with 'Others' \n    df[feature].mask(df[feature].isin(to_drop), 'Others', inplace=True)\n    \n    # To categorical\n    # Creating one-hot features using 'get_dummies' function\n    temp_df = pd.get_dummies(df[feature], prefix=feature, dtype=np.float64)\n    df = pd.concat([df, temp_df], axis=1).drop([feature], axis=1)\n    print('{} Categorized'.format(feature), '\\n')","c59e1301":"df.columns","d699cf23":"df.head()","0baac1db":"sns.distplot(df['Price'])","1e0f11b6":"f, (ax1, ax2) = plt.subplots(1,2, sharey=True, figsize=(15,3))\nax1.scatter(df['Year'], df['Price'])\nax1.set_title('Price vs Year')\nax2.scatter(df['KMs Driven'], df['Price'])\nax2.set_title('Price vs KMs Driven')","6c67388e":"data_with_dummies = pd.get_dummies(df)\ndata_with_dummies.head()","9931cd6a":"data_with_dummies.columns","0a09b9ff":"len(df.loc[df[\"Price\"] > 2000000].index)","3d009f87":"data_with_dummies.drop(data_with_dummies[data_with_dummies['Price'] > 2000000].index,inplace=True)\ndata_with_dummies.info()","5bae3bb1":"from pylab import rcParams\n\nrcParams['figure.figsize'] = 12.7, 8.27\ng = sns.kdeplot(data_with_dummies['Price'], color=\"red\", shade = True)\ng.set_xlabel(\"Price\")\ng.set_ylabel(\"Frequency\")\nplt.title('Distribution of Price',size = 20)","71b36cec":"data_with_dummies[\"Price Period\"] = pd.cut(data_with_dummies.Price,\n                                    5,\n                                    labels=['Very cheap',\n                                            'Cheap', 'Normal',\n                                            'Expensive', 'Very expensive'])\n\ndata_with_dummies.head()","4f9991cb":"data_with_dummies = data_with_dummies.drop(axis=1,columns='Price')\ndata_with_dummies.head()","94924231":"data_with_dummies['Price Period'].unique()","068b9959":"sns.catplot(x=\"Price Period\", y=\"Year\", data=data_with_dummies);\nplt.xticks(rotation=45)","5f6c9afc":"data_with_dummies = data_with_dummies.sample(frac=1).reset_index(drop=True)\n","a236455b":"df_Target = data_with_dummies.iloc[:,35:36]\ncol_no_price = data_with_dummies.drop(columns='Price Period')","b12412c2":"X = np.array(col_no_price.values.tolist())\ny = np.array(df_Target.values.tolist())\nprint(X)\nprint(y)","419d3929":"\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size = 0.2,\n                                                    random_state = 0)\n\nprint(X_train.shape)\nprint(Y_train.shape)\nprint(X_test.shape)\nprint(Y_test.shape)","cf362446":"from sklearn.tree import DecisionTreeClassifier\nimport sklearn.metrics as metrics\n\ntree_model = DecisionTreeClassifier()\ntree_model.fit(X_train, Y_train)\nprint(\"training accuracy :\", tree_model.score(X_train, Y_train))\nprint(\"testing accuracy :\", tree_model.score(X_test, Y_test))\n","6375e122":"print(tree_model.tree_.max_depth)","68a6ae2b":"from sklearn.tree import export_graphviz\nimport graphviz\n\ndot_file = export_graphviz(tree_model,out_file=None,filled=True\n                           ,feature_names=col_no_price.columns,rounded=True,max_depth=5)\n\ngraphviz.Source(dot_file)","3b8798b1":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, Y_train)\nprint(\"testing accuracy :\",knn.score(X_train, Y_train))\nprint(\"testing accuracy :\",knn.score(X_test, Y_test))\n\n","afe893b4":"from sklearn.svm import SVC\n\nsvc_model = SVC(kernel = \"rbf\", C = 1.0, gamma = 0.1)\nsvc_model.fit(X_train, Y_train)\nprint(\"training accuracy :\", svc_model.score(X_train, Y_train))\nprint(\"testing accuracy :\", svc_model.score(X_test, Y_test))","fd708cd2":"from sklearn.ensemble import RandomForestClassifier\n\nRF = RandomForestClassifier(n_estimators=9)\nRF.fit(X_train, Y_train)\nprint(\"training accuracy :\", RF.score(X_train, Y_train))\nprint(\"testing accuracy :\", RF.score(X_test, Y_test))","30f063bd":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\npred = knn.predict(X_test)\nprint(confusion_matrix(Y_test, pred))\nprint(classification_report(Y_test, pred))","d34cd8fc":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\npred = svc_model.predict(X_test)\nprint(confusion_matrix(Y_test, pred))\nprint(classification_report(Y_test, pred))","6d2961c9":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\npred = tree_model.predict(X_test)\nprint(confusion_matrix(Y_test, pred))\nprint(classification_report(Y_test, pred))","78d51d8d":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\npred = RF.predict(X_test)\nprint(confusion_matrix(Y_test, pred))\nprint(classification_report(Y_test, pred))","aad2c611":"seprating target with data","5af8a165":"We have 303 model of cars","d7f41814":"Showing the heatmap of null values","8c74ea28":"**The Price of cars are not categorical objects so I make the price into equal periods **","b8a995b7":"You can change the max_depth of the model in 'DecisionTreeClassifier'","d60d7a44":"Reading data","d79d1df0":"create other features as one-hot features","33523433":"Create train and test data(we use 80% of data as training sample)","e5c14522":"As you see the scores are satisfying, now we do the Final evaluation on each model:","9e6ff418":"Starting to run algorithms:","7fe77168":"shuffling data","1f7ab838":"**Predicting the approximate  price of cars using KNN, SVM, Decision Tree**","88058ba2":"before that we remove outlier data","0cde572d":"removing price column for good","9ffa59af":"**IMPORTANT**: Now that we'v got rid of nulls, we start to categorize our features but as you know there are lots of unique values in the 'Brand','Model','Registered City' that may ruin our processing for classification, so we change the values that have low value counts(lower that 2% of all values) as 'Othres'.\n","68527880":"replacing null values the most common values","7a22bde2":"First of all we import the considerable libraries we need","c7821f73":"**Preprocessing:**","731b0fcb":"kaggle prerequisite to read data in notebook"}}