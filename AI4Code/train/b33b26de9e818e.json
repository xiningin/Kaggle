{"cell_type":{"17d23ac6":"code","ee5298f6":"code","9a86233d":"code","b52111d2":"code","7a1c75f4":"code","019af999":"code","1ad41905":"code","7c5720ad":"code","df2ec72a":"code","520a020d":"code","3726e55e":"markdown","32aaf2c8":"markdown"},"source":{"17d23ac6":"from keras.preprocessing.image import ImageDataGenerator\n\n\ntrain_datagen = ImageDataGenerator(\n    rescale = 1. \/ 255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True)\n\ntrain_generator = train_datagen.flow_from_directory(\n    '..\/input\/sartorius-cell-instance-segmentation\/LIVECell_dataset_2021\/images\/livecell_train_val_images',\n    target_size=(32, 32),\n    batch_size=64,\n    class_mode='categorical')\n\nprint(train_generator.image_shape)\n\ntest_datagen = ImageDataGenerator(\n    rescale = 1. \/ 255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True)\n\ntest_generator = test_datagen.flow_from_directory(\n    '..\/input\/sartorius-cell-instance-segmentation\/LIVECell_dataset_2021\/images\/livecell_test_images',\n    target_size=(32, 32),\n    batch_size=64,\n    class_mode='categorical')\n\nprint(test_generator.image_shape)","ee5298f6":"#plot images :)\n\nimport numpy as np\n\nfrom matplotlib import pyplot\n\nx=np.concatenate([train_generator.next()[0] for i in range(train_generator.__len__())])\n\n# plot, first of few images\nfor i in range(9):\n\t# define of subplot\n\tpyplot.subplot(330 + 1 + i)\n\t# plot, raw pixel of data\n\tpyplot.imshow(x[i], cmap=pyplot.get_cmap('gray'))\n# show of the figure\npyplot.show()","9a86233d":"import keras\nfrom keras import layers\nfrom keras import utils\nfrom keras import Sequential\n\nfunction = Sequential()\n\ndef make_model(input_shape, num_classes):\n    inputs = keras.Input(shape=input_shape)\n\n    x = function(inputs)\n\n\n    x = layers.Rescaling(1.0 \/ 255)(x)\n    x = layers.Conv2D(32, 3, strides=2, padding=\"same\")(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation(\"relu\")(x)\n\n    x = layers.Conv2D(64, 3, padding=\"same\")(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation(\"relu\")(x)\n\n    previous_block_activation = x \n\n    for size in [128, 256, 552, 945]:\n        x = layers.Activation(\"relu\")(x)\n        x = layers.SeparableConv2D(size, 3, padding=\"same\")(x)\n        x = layers.BatchNormalization()(x)\n\n        x = layers.Activation(\"relu\")(x)\n        x = layers.SeparableConv2D(size, 3, padding=\"same\")(x)\n        x = layers.BatchNormalization()(x)\n\n        x = layers.MaxPooling2D(3, strides=2, padding=\"same\")(x)\n\n        \n        residual = layers.Conv2D(size, 1, strides=2, padding=\"same\")(\n            previous_block_activation\n        )\n        x = layers.add([x, residual]) \n        previous_block_activation = x \n\n    x = layers.SeparableConv2D(1540, 3, padding=\"same\")(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation(\"relu\")(x)\n\n    x = layers.GlobalAveragePooling2D()(x)\n    if num_classes == 2:\n        activation = \"sigmoid\"\n        units = 1\n    else:\n        activation = \"softmax\"\n        units = num_classes\n\n    x = layers.Dropout(0.5)(x)\n    outputs = layers.Dense(units, activation=activation)(x)\n    return keras.Model(inputs, outputs)\n\nfrom keras.utils.vis_utils import plot_model\n\nmodel = make_model(input_shape=(32,32,3), num_classes=9)\nplot_model(model, show_shapes=True)","b52111d2":"model.compile(\n       optimizer='adam',\n       loss=\"categorical_crossentropy\",\n       metrics=['accuracy'])\n\nprint(train_generator)\n\nmodel.fit(train_generator,batch_size=16,epochs=200,shuffle=True)\n\nmodel.save('submission.csv')\n\n\nmodel.summary()","7a1c75f4":"filenames = test_generator.filenames\nnb_samples = len(filenames)\n\npredict = model.predict(test_generator,nb_samples)\n\nprint(predict)","019af999":"import cv2\nfrom keras.models import load_model\n\nimport numpy as np\n\nimg = cv2.imread('..\/input\/sartorius-cell-instance-segmentation\/LIVECell_dataset_2021\/images\/livecell_test_images\/BV2\/BV2_Phase_A4_1_00d00h00m_2.tif')\nimg = cv2.resize(img,(32,32))\nimg = np.reshape(img,[1,32,32,3])\n\nmodell = load_model('.\/submission.csv')\n\n\nclasses = modell.predict(img)\n\n\nfor class_name in classes[0]:\n  if 1.0 == classes[0][0]:\n    print(\"Image in A172 Class\")\n  elif 1.0 == classes[0][1]:\n    print(\"Image in BT474 Class\")\n  elif 1.0 == classes[0][2]:\n    print(\"Image in BV2 Class\")\n    break\n  elif 1.0 == classes[0][3]:\n    print(\"Image in Huh7 Class\")\n  elif 1.0 == classes[0][4]:\n    print(\"Image in MCF7 Class\")\n  elif 1.0 == classes[0][5]:\n    print(\"Image in RatC6 Class\")\n  elif 1.0 == classes[0][6]:\n    print(\"Image in SHSY5Y Class\")\n  elif 1.0 == classes[0][7]:\n    print(\"Image in SkBr3 Class\")\n  else:\n    print(\"Image in SKOV3 Class\")","1ad41905":"!pip install pixellib","7c5720ad":"import pixellib\nfrom pixellib.semantic import semantic_segmentation \nsegment_image = semantic_segmentation()","df2ec72a":"imgg = cv2.imread('..\/input\/sartorius-cell-instance-segmentation\/LIVECell_dataset_2021\/images\/livecell_test_images\/MCF7\/MCF7_Phase_H4_1_00d00h00m_3.tif')\nimgg = cv2.resize(imgg,(704,520))\nprint(imgg.shape)\n\nfrom PIL import Image\nimport numpy as np\n\nimage = Image.fromarray(imgg)\nimage.save('testtt.png')\nimage.show()\n","520a020d":"from keras.models import load_model\n\nmodels = load_model('.\/submission.csv')\n\nmodelss = semantic_segmentation(models)\n\nmodelss.segmentAsPascalvoc(\".\/testtt.png\", output_image_name = \"image_new.png\")","3726e55e":"## Cell Instance Segmentation - Deep Learning Project - Emirhan BULUT","32aaf2c8":"Hello!\n\nI am Emirhan! I am Machine Learning and Deep Learning Engineer. I am very pleased to present to you the artificial intelligence software that I have carefully prepared for the 'Sartorius - Cell Instance Segmentation' competition on Kaggle. This software; Thanks to the high accuracy and low loss system it contains, it detects single neuronal cells in microscopy images according to the rules set by the artificial neuronal networks I have created. In addition, I present the schematic of the model I developed in a .png format with high resolution.\n\nIn addition, although the software took a long time to complete due to the insufficient hardware I have, I waited for this time to end for the people in the world and completed the artificial intelligence software.\n\nThe artificial intelligence software I developed was first in a 9-pack.\n\nFinally, I developed deep learning (Artificial neural networks) software segmentation that can detect different objects of interest with 97.19% accuracy in biological images showing neuronal cell types."}}