{"cell_type":{"3ec87820":"code","9fa65d88":"code","5d5c3cb6":"code","dc8e011d":"code","214dc560":"code","caec3741":"code","4150c259":"code","ca709ecc":"code","f656944a":"code","c1c5a151":"code","d7c40c0b":"code","d658bb2e":"code","e7a874ef":"code","0e261dc6":"code","93359230":"code","ba31dfb5":"code","fe3c92bf":"code","2945c142":"code","8235a637":"code","ba453cf2":"code","69731f06":"code","88be49d6":"code","ca870b78":"code","f37a7fb0":"markdown","724fbe7b":"markdown","d28a2e47":"markdown"},"source":{"3ec87820":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9fa65d88":"paths=[\"..\/input\/pytorch-image-models\/pytorch-image-models-master\",\"..\/input\/image-fmix\/FMix-master\"]\nbase_dir=\"..\/input\/cassava-leaf-disease-classification\"\nimport sys\nfor pat in paths:\n    sys.path.append(pat)","5d5c3cb6":"from fmix import sample_mask,binarise_mask,make_low_freq_image","dc8e011d":"import timm\nimport os\nimport glob as glob\nimport cv2\nimport skimage as io\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time \nfrom datetime import datetime\nimport random\nfrom tqdm import tqdm,tqdm_notebook\ntqdm.pandas()\n\nimport sklearn\nfrom sklearn import metrics\nfrom sklearn.model_selection import GroupKFold,StratifiedKFold\nfrom sklearn.metrics import roc_auc_score,log_loss\n\nimport pydicom\nimport joblib\nimport warnings\nimport json\nimport pickle\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torchvision\nimport torchvision.transforms as transforms\n\nfrom torch.utils.data import Dataset,DataLoader\nfrom torch.utils.data.sampler import SequentialSampler,RandomSampler\nfrom torch.cuda.amp import autocast,GradScaler\n\nfrom scipy.ndimage.interpolation import zoom\nfrom torch.nn.modules.loss import _WeightedLoss\n","214dc560":"CFG = {\n    'fold_num': 5,\n    'seed': 719,\n    'model_arch': 'tf_efficientnet_b4_ns',\n    'img_size': 512,\n    'epochs': 10,\n    'train_bs': 16,\n    'valid_bs': 32,\n    'T_0': 10,\n    'lr': 1e-4,\n    'min_lr': 1e-6,\n    'weight_decay':1e-6,\n    'num_workers': 4,\n    'accum_iter': 2,\n    'verbose_step': 1,\n    'device': 'cuda:0'\n}","caec3741":"train=pd.read_csv(\"..\/input\/cassava-leaf-disease-classification\/train.csv\")\ntrain.head()","4150c259":"train.info","ca709ecc":"train.label.value_counts()","f656944a":"submission=pd.read_csv(\"..\/input\/cassava-leaf-disease-classification\/sample_submission.csv\")\nsubmission","c1c5a151":"def seeder(seed):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.benchmark=True\n    torch.backends.cudnn.deterministic=True\n    os.environ[\"PYTHONHASHSEED\"]=str(seed)","d7c40c0b":"def get_img(path):\n    image=cv2.imread(path)\n    image=image[:,:,::-1]\n    return image\nplt.figure(figsize=(15,15))\nplt.imshow(get_img('..\/input\/cassava-leaf-disease-classification\/train_images\/1000015157.jpg'))\nplt.title('1000015157.jpg')\nplt.axis('off')\nplt.show()","d658bb2e":"def rand_bbox(size,lam):\n    W=size[0]\n    H=size[1]\n    cut_rat=np.sqrt(1.-lam)\n    cut_w=np.int(W*cut_rat)\n    cut_h=np.int(H*cut_rat)\n    \n    c_x=np.random.randint(W)\n    c_y=np.random.randint(H)\n    \n    bbx1=np.clip((c_x-cut_w)\/\/2,0,W)\n    bbx2=np.clip((c_x+cut_w)\/\/2,0,W)\n    \n    bby1=np.clip((c_y-cut_h)\/\/2,0,H)\n    bby2=np.clip((c_y+cut_h)\/\/2,0,H)\n    \n    return bbx1,bby1,bbx2,bby2","e7a874ef":"class CassavaDataset(Dataset):\n    def __init__(self, df, data_root, \n                 transforms=None, \n                 output_label=True, \n                 one_hot_label=False,\n                 do_fmix=False, \n                 fmix_params={\n                     'alpha': 1., \n                     'decay_power': 3., \n                     'shape': (CFG['img_size'], CFG['img_size']),\n                     'max_soft': True, \n                     'reformulate': False\n                 },\n                 do_cutmix=False,\n                 cutmix_params={\n                     'alpha': 1,\n                 }\n                ):\n        \n        super().__init__()\n        self.df = df.reset_index(drop=True).copy()\n        self.transforms = transforms\n        self.data_root = data_root\n        self.do_fmix = do_fmix\n        self.fmix_params = fmix_params\n        self.do_cutmix = do_cutmix\n        self.cutmix_params = cutmix_params\n        \n        self.output_label = output_label\n        self.one_hot_label = one_hot_label\n        \n        if output_label == True:\n            self.labels = self.df['label'].values\n            \n            \n            if one_hot_label is True:\n                self.labels = np.eye(self.df['label'].max()+1)[self.labels]\n            \n    def __len__(self):\n        return self.df.shape[0] # return len(df.shape) also works\n    \n    def __getitem__(self, index: int):\n        \n        # get labels\n        if self.output_label:\n            target = self.labels[index]\n          \n        img=get_img(\"{}\/{}\".format(self.data_root, self.df.loc[index]['image_id']))\n        \n\n        if self.transforms:\n            img = self.transforms(image=img)\n            img = img[\"image\"]\n        \n        if self.do_fmix and np.random.uniform(0., 1., size=1)[0] > 0.5:\n            with torch.no_grad():\n                \n                lam = np.clip(np.random.beta(self.fmix_params['alpha'], self.fmix_params['alpha']),0.6,0.7)\n                \n                mask = make_low_freq_image(self.fmix_params['decay_power'], self.fmix_params['shape'])\n                mask = binarise_mask(mask, lam, self.fmix_params['shape'], self.fmix_params['max_soft'])\n    \n                fmix_ix = np.random.choice(self.df.index, size=1)[0]\n                fmix_img=get_img(\"{}\/{}\".format(self.data_root, self.df.iloc[fmix_ix]['image_id']))\n\n                if self.transforms:\n                    fmix_img = self.transforms(image=fmix_img)[\"image\"]\n\n                mask_torch = torch.from_numpy(mask)\n                \n                img = mask_torch*img+(1.-mask_torch)*fmix_img\n\n                rate = mask.sum()\/CFG['img_size']\/CFG['img_size']\n                target = rate*target + (1.-rate)*self.labels[fmix_ix]\n                \n        if self.do_cutmix and np.random.uniform(0., 1., size=1)[0] > 0.5:\n            with torch.no_grad():\n                \n                lam = np.clip(np.random.beta(self.cutmix_params['alpha'], self.cutmix_params['alpha']),0.3,0.4)                \n                cutmix_idx = np.random.choice(self.df.index, size=1)[0]\n                cutmix_img=get_img(\"{}\/{}\".format(self.data_root, self.df.iloc[cutmix_idx]['image_id']))\n                \n                if self.transforms:\n                    cutmix_img = self.transforms(image=cutmix_img)[\"image\"]\n\n                \n                bbx1,bby1,bbx2,bby2=rand_bbox((CFG['img_size'],CFG['img_size']),lam)\n                img[:,bbx1:bbx2,bby1:bby2]=cutmix_img[:,bbx1:bbx2,bby1:bby2]\n                rate=1-((bbx2-bbx1)*(bby2-bby1))\/(CFG['img_size']*CFG['img_size'])\n                \n                target=rate*target+(1-rate)*self.labels[cutmix_idx]\n                \n        if self.output_label==True:\n            return img,torch.tensor(target,dtype=torch.double)\n        else:\n            return img\n                \n\n\n\n                    \n                \n\n        \n\n","0e261dc6":"from albumentations import (HorizontalFlip,\n                            VerticalFlip,\n                            CLAHE,\n                            ShiftScaleRotate,\n                            IAAPerspective,\n                            IAAAdditiveGaussianNoise,\n                            GaussNoise,\n                            IAAPiecewiseAffine,\n                            IAASharpen,\n                            IAAEmboss,\n                            RandomRotate90,\n                            Blur,\n                            MotionBlur,\n                            MedianBlur,\n                            HueSaturationValue,\n                            Transpose,\n                            OpticalDistortion,\n                            GridDistortion,\n                            RandomResizedCrop,\n                            RandomBrightnessContrast,\n                            CoarseDropout,\n                            Resize,\n                            Flip,\n                            OneOf,\n                            Compose,\n                            Cutout,\n                            Normalize,\n                            CenterCrop\n                            )\n\n\nfrom albumentations.pytorch import ToTensorV2\n\ndef get_train_transforms():\n    return Compose([\n            RandomResizedCrop(CFG['img_size'], CFG['img_size']),\n            Transpose(p=0.5),\n            HorizontalFlip(p=0.5),\n            VerticalFlip(p=0.5),\n            ShiftScaleRotate(p=0.5),\n            HueSaturationValue(hue_shift_limit=0.2, sat_shift_limit=0.2, val_shift_limit=0.2, p=0.5),\n            RandomBrightnessContrast(brightness_limit=(-0.1,0.1), contrast_limit=(-0.1, 0.1), p=0.5),\n            Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225], max_pixel_value=255.0, p=1.0),\n            CoarseDropout(p=0.5),\n            Cutout(p=0.5),\n            ToTensorV2(p=1.0),\n        ], p=1.)\n\ndef get_valid_transforms():\n    return Compose([\n            CenterCrop(CFG['img_size'], CFG['img_size'], p=1.),\n            Resize(CFG['img_size'], CFG['img_size']),\n            Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225], max_pixel_value=255.0, p=1.0),\n            ToTensorV2(p=1.0),\n        ], p=1.)\n","93359230":"class CassvaImgClassifier(nn.Module):\n    def __init__(self, model_arch, n_class, pretrained=False):\n        super().__init__()\n        self.model = timm.create_model(model_arch, pretrained=pretrained)\n        n_features = self.model.classifier.in_features\n        self.model.classifier = nn.Linear(n_features, n_class)\n        \n    def forward(self, x):\n        x = self.model(x)\n        return x\n","ba31dfb5":"def prepare_dataloader(df,trn_idx,val_idx,data_root=\"..\/input\/cassava-leaf-disease-classification\/train_images\"):\n    \n    _train=df.loc[trn_idx,:].reset_index(drop=True)\n    _valid=df.loc[val_idx,:].reset_index(drop=True)\n    \n    train_ds=CassavaDataset(_train,\n                            data_root,\n                            transforms=get_train_transforms(),\n                            output_label=True,\n                            one_hot_label=False,\n                            do_fmix=True,\n                            do_cutmix=True)\n    \n    valid_ds=CassavaDataset(_valid,\n                            data_root,\n                            transforms=get_valid_transforms(),\n                            output_label=True)\n    \n    train_loader=torch.utils.data.DataLoader(train_ds,\n                                             shuffle=True,\n                                             batch_size=CFG[\"train_bs\"],\n                                             pin_memory=False,\n                                             drop_last=False,\n                                             num_workers=CFG[\"num_workers\"])\n    \n    valid_loader=torch.utils.data.DataLoader(valid_ds,\n                                             shuffle=False,\n                                             batch_size=CFG[\"valid_bs\"],\n                                             pin_memory=False,\n                                             num_workers=CFG[\"num_workers\"])\n    \n    return train_loader,valid_loader\n\n\n\n    ","fe3c92bf":"def train_one_epoch(epoch, model, loss_fn, optimizer, train_loader, device, scheduler=None, schd_batch_update=False):\n    model.train()\n\n    t = time.time()\n    running_loss = None\n\n    pbar = tqdm(enumerate(train_loader), total=len(train_loader))\n    for step, (imgs, image_labels) in pbar:\n        imgs = imgs.to(device).float()\n        image_labels = image_labels.to(device).long()\n        #print(\"Input shape\")\n        #print(image_labels.shape,imgs.shape)\n        with autocast():\n            image_preds = model(imgs)   #output = model(input)\n            #print(\"OUTput shape\",image_preds.shape)\n\n            loss = loss_fn(image_preds, image_labels)\n            \n            scaler.scale(loss).backward()\n\n            if running_loss is None:\n                running_loss = loss.item()\n            else:\n                running_loss = running_loss * .99 + loss.item() * .01\n\n            if ((step + 1) %  CFG['accum_iter'] == 0) or ((step + 1) == len(train_loader)):\n                # may unscale_ here if desired (e.g., to allow clipping unscaled gradients)\n\n                scaler.step(optimizer)\n                scaler.update()\n                optimizer.zero_grad() \n                \n                if scheduler is not None and schd_batch_update:\n                    scheduler.step()\n\n            if ((step + 1) % CFG['verbose_step'] == 0) or ((step + 1) == len(train_loader)):\n                description = f'epoch {epoch} loss: {running_loss:.4f}'\n                \n                pbar.set_description(description)\n                \n    if scheduler is not None and not schd_batch_update:\n        scheduler.step()\n","2945c142":"def valid_one_epoch(epoch, model, loss_fn, valid_loader, device, scheduler=None, schd_loss_update=False):\n    model.eval()\n\n    t = time.time()\n    \n    loss_sum = 0\n    sample_num = 0\n    image_preds_all = []\n    image_targets_all = []\n    \n    pbar = tqdm(enumerate(valid_loader), total=len(valid_loader))\n    for step, (imgs, image_labels) in pbar:\n        \n        imgs = imgs.to(device).float()\n        image_labels = image_labels.to(device).long()\n        \n        image_preds = model(imgs)\n        \n        image_preds_all += [torch.argmax(image_preds, 1).detach().cpu().numpy()]\n        image_targets_all += [image_labels.detach().cpu().numpy()]        \n\n        \n        loss = loss_fn(image_preds, image_labels)\n        \n        loss_sum += loss.item()*image_labels.shape[0]\n        sample_num += image_labels.shape[0]  \n\n        if ((step + 1) % CFG['verbose_step'] == 0) or ((step + 1) == len(val_loader)):\n            description = f'epoch {epoch} loss: {loss_sum\/sample_num:.4f}'\n            pbar.set_description(description)\n    \n    image_preds_all = np.concatenate(image_preds_all)\n    image_targets_all = np.concatenate(image_targets_all)\n    print('Multiclass VAlidation Accuracy = {:.4f}'.format((image_preds_all==image_targets_all).mean()))\n    \n    if scheduler is not None:\n        if schd_loss_update:\n            scheduler.step(loss_sum\/sample_num)\n        else:\n            scheduler.step()\n                \n\n\n\n","8235a637":"class MyCrossEntropyLoss(_WeightedLoss):\n    def __init__(self, weight=None, reduction='mean'):\n        super().__init__(weight=weight, reduction=reduction)\n        self.weight = weight\n        self.reduction = reduction\n\n    def forward(self, inputs, targets):\n        lsm = F.log_softmax(inputs, -1)\n\n        if self.weight is not None:\n            lsm = lsm * self.weight.unsqueeze(0)\n\n        loss = -(targets * lsm).sum(-1)\n\n        if  self.reduction == 'sum':\n            loss = loss.sum()\n        elif  self.reduction == 'mean':\n            loss = loss.mean()\n\n        return loss\n","ba453cf2":"if __name__ == '__main__':\n\n    seeder(CFG['seed'])\n    \n    sfr = StratifiedKFold(n_splits=CFG['fold_num'], shuffle=True, random_state=CFG['seed'])\n    folds = sfr.split(np.arange(train.shape[0]), train.label.values)\n    \n    for fold, (trn_idx, val_idx) in enumerate(folds):\n\n        if fold > 0:\n            break \n\n        print('Training started with {}th fold'.format(fold))\n\n        print(len(trn_idx), len(val_idx))\n        train_loader, val_loader = prepare_dataloader(train, trn_idx, val_idx, data_root='..\/input\/cassava-leaf-disease-classification\/train_images\/')\n\n        device = torch.device(CFG['device'])\n        \n        model = CassvaImgClassifier(CFG['model_arch'], train.label.nunique(), pretrained=True).to(device)\n        \n        scaler = GradScaler()   \n        \n        optimizer = torch.optim.Adam(model.parameters(), lr=CFG['lr'], weight_decay=CFG['weight_decay'])\n        \n        #scheduler = torch.optim.lr_scheduler.StepLR(optimizer, gamma=0.1, step_size=CFG['epochs']-1)\n        \n        scheduler = torch.optim.lr_scheduler.CosineAnnealingWarmRestarts(optimizer, T_0=CFG['T_0'], T_mult=1, eta_min=CFG['min_lr'], last_epoch=-1)\n        \n        #scheduler = torch.optim.lr_scheduler.OneCycleLR(optimizer=optimizer, pct_start=0.1, div_factor=25,max_lr=CFG['lr'], epochs=CFG['epochs'], steps_per_epoch=len(train_loader))\n        \n        loss_tr = nn.CrossEntropyLoss().to(device)\n        loss_vl = nn.CrossEntropyLoss().to(device)\n    \n        for epoch in range(CFG['epochs']):\n            train_one_epoch(epoch, model, loss_tr, optimizer, train_loader, device, scheduler=scheduler, schd_batch_update=False)\n\n            with torch.no_grad():\n                valid_one_epoch(epoch, model, loss_vl, val_loader, device, scheduler=None, schd_loss_update=False)\n\n            #torch.save(model.state_dict(),'{}_fold_{}_{}'.format(CFG['model_arch'], fold, epoch))\n            \n        #torch.save(model.cnn_model.state_dict(),'{}\/cnn_model_fold_{}_{}'.format(CFG['model_path'], fold, CFG['tag']))\n        \n        #del model, optimizer, train_loader, val_loader, scaler, scheduler\n        #torch.cuda.empty_cache()\n\n\n                \n\n\n           \n        \n","69731f06":"test_ds=CassavaDataset(submission, data_root=\"..\/input\/cassava-leaf-disease-classification\/test_images\", \n                       transforms=get_valid_transforms(),\n                       output_label=False, \n                       one_hot_label=False,\n                       do_fmix=False, \n                       fmix_params={\n                       'alpha': 1., \n                       'decay_power': 3., \n                       'shape': (CFG['img_size'], CFG['img_size']),\n                       'max_soft': True, \n                       'reformulate': False},\n                       do_cutmix=False,\n                       cutmix_params={'alpha': 1}\n                       )\ntest_loader=torch.utils.data.DataLoader(test_ds,\n                                        shuffle=False,\n                                        batch_size=CFG[\"train_bs\"],\n                                        pin_memory=False,\n                                        drop_last=False,\n                                        num_workers=CFG[\"num_workers\"])\n\ndef pred_output(model,test_loader,device=CFG[\"device\"]):\n    img_preds_all=[]\n    for img in test_loader:\n        img=img.to(device).float()\n        img_preds=model(img)\n        img_preds_all += [torch.argmax(img_preds, 1).detach().cpu().numpy()]\n    img_preds_all=np.concatenate(img_preds_all)\n    return img_preds_all","88be49d6":"submission_df=pd.DataFrame({\"image_id\":submission.image_id.values.tolist(),\"label\":pred_output(model,test_loader).tolist()})\nsubmission_df","ca870b78":"submission_df.to_csv(\"submission.csv\",index=False)","f37a7fb0":"**LOADING THE SUBMISSION CSV FILE**","724fbe7b":"**LOADING THE TRAINING CSV FILE**","d28a2e47":"**LOADING THE EFFICIENTNET MODEL DATASET TO CURRENT SYS**"}}