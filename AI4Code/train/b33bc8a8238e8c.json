{"cell_type":{"62913537":"code","702c0186":"code","d5f3786b":"code","8370ef37":"code","fe3661b7":"code","09ded23e":"code","468ac887":"code","ad5fe6c7":"code","ee3944be":"code","a9f8fc0a":"code","8ca7800b":"code","5c02ac2e":"code","2cc8d9be":"code","45c8f3a2":"code","ed5e5823":"code","faeaff33":"markdown","7f7a0a2f":"markdown","4eaaacc5":"markdown","fbdd6df0":"markdown"},"source":{"62913537":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pylab as plt\n\n%matplotlib inline\n","702c0186":"!ls ..\/input\/","d5f3786b":"types = ['containership', 'cruiser', 'destroyer','coastguard', 'smallfish', 'methanier', 'cv', 'corvette', 'submarine', 'tug']\ntypes_id = dict(zip(types, range(len(types))))\n\nships = np.load('..\/input\/ships2020.pnz')\nX_data = ships['X']\nY_data = ships['Y']","8370ef37":"len(X_data)","fe3661b7":"from keras.utils import np_utils\n\nran = np.random.randint(len(X_data), size = len(X_data)\/\/10)\nfiltre = np.array([True,] * len(X_data))\nfiltre[ran] = False\n\nX_train = X_data[filtre]\nY_train = np_utils.to_categorical(Y_data[filtre])","09ded23e":"len(X_train)","468ac887":"i = np.random.randint(len(Y_data))\nprint(\"Ship #%d is a %s\" % (i,types[Y_data[i]]))\nprint(Y_data[i])\nplt.imshow(X_data[i])","ad5fe6c7":"from keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, Flatten\n\ninputs = Input(shape=X_train[0].shape, name='cnn_input')\nx = Flatten()(inputs)\nx = Dense(256, activation='relu')(x)\nx = Dropout(0.5)(x)\noutputs = Dense(len(types), activation='softmax')(x)\n\nmodel = Model(inputs, outputs)","ee3944be":"model.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy']\n              )\n\nmodel.fit(X_train, Y_train, epochs=1, batch_size=8, validation_split=0.1)","a9f8fc0a":"\nX_test = X_data[~filtre]\nY_test = np_utils.to_categorical(Y_data[~filtre])\n\n","8ca7800b":"score = model.evaluate(X_test, Y_test, verbose=0)\nprint('Test score:', score[0])\nprint('Test accuracy:', score[1])","5c02ac2e":"from sklearn.metrics import classification_report, confusion_matrix\n\nres = model.predict(X_test).argmax(axis=1)\nconfu = confusion_matrix(Y_test.argmax(axis=1), res)\npd.DataFrame({types[i][:3]:confu[:,i] for i in range(len(types))}, index=types)","2cc8d9be":"print(classification_report(Y_test.argmax(axis=1), res, target_names=types))","45c8f3a2":"res","ed5e5823":"# predict results\nres = model.predict(X_test).argmax(axis=1)\ndf = pd.DataFrame({\"Category\":res})\ndf.to_csv(\"reco_nav.csv\", index_label=\"Id\")","faeaff33":"## Les donn\u00e9es","7f7a0a2f":"## Soumission des r\u00e9sultats\n\n\n\nLe fichier suivant sert \u00e0 soumettre son r\u00e9sultat \u00e0 la comp\u00e9tition. Pour cela vous devez regarder les Output de votre Kernel (pour cela il semble qu'il faille avoir commit\u00e9 sa feuille sinon le r\u00e9sultat est dans ..\/input\/working) et cliquer sur le bouton Submit to competition.\n","4eaaacc5":"## Analyse des r\u00e9sultats","fbdd6df0":"## Mon r\u00e9seau\n\nC'est un exemple minimaliste qui ne classera rien. A vous d'ajouter des couches pour en faire quelque chose qui marche."}}