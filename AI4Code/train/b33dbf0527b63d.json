{"cell_type":{"d3e5cf25":"code","55d45765":"code","4997bdb9":"code","74aa6ea7":"code","79f0a2e5":"code","0aabb570":"code","eb530fee":"code","7a9acb5d":"code","c7cb8695":"code","b11abbdc":"code","d644c588":"code","267ddaee":"code","1fed0b30":"code","8fa3f431":"code","adcf5056":"code","fecbf004":"markdown"},"source":{"d3e5cf25":"# Imports\nfrom keras import backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom keras.utils import np_utils\n\nimport numpy as np\nimport pandas as pd\nimport kerastuner as kt\nimport tensorflow as tf","55d45765":"# Read both CSV\ntrain = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\n\ntrain.head()","4997bdb9":"target = train['label'].copy()\ntrain = train.iloc[:, 1:].copy()\n\n# Set seed\nnp.random.seed(0)\n\n# Set image information\nchannels = 1\nheight = 28\nwidth = 28\nnumber_of_classes = len(target.unique())\n\n# Reshape training image data into features\ntrain_data = np.array(train)\ntrain_data = train_data.reshape(train_data.shape[0], channels, height, width)\n\n# Reshape test image data into features\nvalidation = np.array(test)\nvalidation = validation.reshape(validation.shape[0], channels, height, width)\n\n# One-hot encode target\ntarget = np_utils.to_categorical(target)\n\n# Rescale pixel intensity to between 0 and 1\ntrain_data = train_data \/ 255\nvalidation = validation \/ 255\n\nprint(train_data.shape, validation.shape)","74aa6ea7":"# Set that the color channel value will be first\nK.set_image_data_format(\"channels_first\")\n\n# Check GPU\ngpus = tf.config.list_physical_devices('GPU')\nif gpus:\n    # Restrict TensorFlow to only allocate 8GB of memory on the first GPU\n    try:\n        tf.config.set_logical_device_configuration(\n            gpus[0],\n            [tf.config.LogicalDeviceConfiguration(memory_limit=8192)])\n\n        logical_gpus = tf.config.list_logical_devices('GPU')\n        print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n        \n    except RuntimeError as e:\n        # Virtual devices must be set before GPUs have been initialized\n        print(e)","79f0a2e5":"def create_network(hp):\n    # Start neural network\n    network = Sequential()\n    \n    # Add convolutional layer with 64 filters, a 5x5 window, and ReLU activation function\n    network.add(Conv2D(filters=hp.Choice('filters', [16, 32, 64, 128]), # Filters for tuner\n                       kernel_size=(5,5),\n                       input_shape=(channels, width, height),\n                       activation=hp.Choice('conv_activations', ['relu', 'tanh', 'sigmoid']) # Activation functions for tuner (conv layer)\n                      ))            \n\n    # Add max pooling layer with a 2x2 window\n    network.add(MaxPooling2D(pool_size=(2, 2)))\n\n    # Add dropout layer\n    network.add(Dropout(0.5))\n\n    # Add layer to flatten input\n    network.add(Flatten())\n\n    # # Add fully connected layer of 128 units with a ReLU activation function\n    network.add(Dense(hp.Choice('dense_units', [32, 64, 128, 256]), # Units for tuner\n                      activation=hp.Choice('dense_activations', ['relu', 'tanh', 'sigmoid'])) # Activation functions for tuner (dense layer)\n               )\n\n    # Add dropout layer\n    network.add(Dropout(0.5))\n\n    # Add fully connected layer with a softmax activation function\n    network.add(Dense(number_of_classes, activation=\"softmax\"))\n\n    # Compile neural network\n    network.compile(loss=\"categorical_crossentropy\",  # Cross-entropy\n                    optimizer=hp.Choice('optimizer', values=['adam','rmsprop','SGD']),  # Optimizers for tuner\n                    metrics=[\"accuracy\"] # Accuracy performance metric\n                   )\n\n    return network","0aabb570":"! mkdir tuner_dir\n! ls -al","eb530fee":"# Initialize tuner\ntuner = kt.RandomSearch(\n    create_network,\n    objective=\"val_accuracy\",\n    max_trials=50,\n    executions_per_trial=2,\n    overwrite=True,\n    directory=\"tuner_dir\",\n    project_name=\"cnn_digits\"\n)\n\ntuner.search_space_summary()","7a9acb5d":"# Start the search\ntuner.search(train_data, # Features\n             target, # Target\n             epochs=10, # Number of epochs\n             verbose=1, # Don't print description after each epoch\n             batch_size=10, # Number of observations per batch\n             validation_split=0.2 # Split data for train\/valid\n            )","c7cb8695":"# Results\ntuner.results_summary()","b11abbdc":"# Best model\nbest_model = tuner.get_best_models(num_models=1)\nbest_model[0].summary()","d644c588":"# Save best model\nbest_model[0].save('tuner_dir\/best_model')","267ddaee":"!cd tuner_dir && ls -al","1fed0b30":"# Predict labels\npredictions = best_model[0].predict(validation)\npred_classes = np.argmax(predictions,axis=1)\nprint(pred_classes)","8fa3f431":"# Create submission dataframe\npred_df = pd.DataFrame(np.arange(1,validation.shape[0] + 1), columns=['ImageId'])\npred_df['Label'] = pred_classes\npred_df.head()","adcf5056":"# Save submission\npred_df.to_csv(\"submission_v2.csv\",index=False)","fecbf004":"## MNIST Digits recognition - CNN with Keras tuner\n\nI'll build a simple convolutional neural network with `keras` here and then tune some hyperparameters. I'll rely on this [official docs](https:\/\/keras.io\/guides\/keras_tuner\/getting_started\/).\n\nHope, someone will find this notebook helpful \ud83d\ude0a"}}