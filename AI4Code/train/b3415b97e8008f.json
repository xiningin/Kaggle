{"cell_type":{"6ecc0edb":"code","c97dd036":"code","297b4332":"code","c4c94a9d":"code","dad2aca5":"code","8dc830ec":"markdown","531abac0":"markdown","89f5d24b":"markdown","faa8c6ca":"markdown"},"source":{"6ecc0edb":"!pip install git+https:\/\/github.com\/EasyArray\/phosphorus#egg=phosphorus\n    \n%load_ext phosphorus","c97dd036":"Rule.deregister() #Deletes current rules (in case you're playing around)\nrule PQ: \u03b1p\u03b2q\u03b3 => \"\u03b1p\u03b2-q\u03b3-\"\n    \nstep(\"-p--q---\")\nstep(\"-p-q--\")\n","297b4332":"def maketree(name,children):\n    return tree[(\"_\"+name) (*children)]\n\ndef growtree(x):\n    if not x.type() == \"tree\":\n        return maketree(x,step(x))\n    # The rest only runs when we do have a tree:\n    newchildren = []\n    for child in x:\n        newchildren += [growtree(child)]\n    return maketree(x.name,newchildren)\n\nrepeat(growtree, \"-p-q--\", 5)","c4c94a9d":"axiom   = REPLACE_THIS_TEXT\nRule.deregister()\nrule PQ1: \u03b1p\u03b2q\u03b3 => \"\u03b1p\u03b2-q\u03b3-\"\nrule PQ2: REPLACE => THESE\n\n\"---TESTS----------------\"\nstep(axiom)\nrepeat(growtree,axiom,3)\nrepeat(step,axiom,10,True)","dad2aca5":"axiom = REPLACE_THIS\n\nRule.deregister()\nrule TQ1 \u03b1t\u03b2q\u03b3 => REPLACE\nrule TQ2 \u03b1t\u03b2q\u03b3 => THESE\n\n\"---TESTS----------------\"\nstep(axiom)\nrepeat(growtree,axiom,3)\nrepeat(step,axiom,10,True)","8dc830ec":"#### \ud83e\udd14 Additional Exercises\n1. Provide full derivations (bottom-up and top-down) for the following theorem: **---p----q-------**. Use your PQ system in the cell above to help verify your derivation. Copy\/paste code from your MIU derivations and follow the same formatting as those derivations.\n\n\n2. Why precisely is the string **-p-p-p-q----** not a theorem? Explain how overuse of I-mode might make you think it is a theorem.\n\n\n3. Is **p-q-** a theorem in your PQ system with two rules? How about **-pq-**? These should both be theorems in order to accurately represent addition. If either one is not, therefore, how would you change your pq system to make it a theorem? (Feel free to test in the cell above.)\n\n4. In the next cell, create a system that derive multiplication. (Replace **p** with **t** in your new system.) Show the steps required to get from your axiom to a theorem representing 2 &times; 3.\n\n5. What do these formal systems have to do with meaning?","531abac0":"With our helper functions from last time, we can visualize this:","89f5d24b":"# PQ\n\nThis notebook continues working with Hofstadter's formal systems using Phosphorus. Here is a definition of the p,q system rule.\n>Remember: The greek letters inside constants\/strings denote variables over strings. In this case, the alpha &alpha;, beta &beta;, and gamma &gamma; each represent a string of dashes.\n\n\ud83e\udd14 Why is the output in quotes?","faa8c6ca":"### Axiom Schemas in Phosphorus\n\nThere is no way to implement an infinite axiom schema directly in Phosphorus. But, we can change the PQ system to have a single axiom and two rules (the original rule plus one new rule) and achieve the same result. \n\n\ud83e\udd14 As an exercise, complete this new version of PQ in the following cell. First, replace `REPLACE_THIS_TEXT` with the correct axiom. Then, replace `REPLACE` and `THESE` to create the correct new rule."}}