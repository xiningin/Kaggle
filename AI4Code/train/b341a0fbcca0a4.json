{"cell_type":{"3584bbd3":"code","212983f2":"code","d79ecaa4":"code","ec4b055b":"code","426f8e6b":"code","191fc712":"code","5a40ecba":"code","a09fe313":"code","482695d7":"code","3ac1d407":"code","41b23cf1":"code","3ce54c6c":"code","b6b818e6":"code","764cfd53":"code","e5a3e8e3":"code","5e46ef28":"code","f42bf627":"code","4efa1c94":"code","d89b57f9":"code","c2e736d2":"code","cc06bce8":"code","149d4969":"code","5e9e6690":"code","91253595":"code","be9b9c29":"code","fec008a4":"code","e8b1c641":"code","d3e5f01f":"code","43b15bd1":"code","a0ef1421":"code","26c20c60":"code","00e53fc8":"code","617c9063":"code","fbbf40ea":"code","3e9b80b5":"code","dd57fb07":"code","c4cb11f1":"code","e454b100":"code","81e9865e":"code","e4556479":"code","4b768bc4":"code","cf8a083e":"code","0f5f4d0b":"code","3376632e":"code","ddd4c9de":"code","845039b7":"code","3286fa78":"code","c6e37a25":"code","3c45c04b":"markdown"},"source":{"3584bbd3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import pyplot\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\n\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\n\nfrom sklearn.inspection import permutation_importance\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import VotingClassifier\n\nfrom sklearn.metrics import accuracy_score \nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix","212983f2":"# Import Data\nhotel_data = pd.read_csv('..\/input\/hotel-booking-demand\/hotel_bookings.csv')","d79ecaa4":"# Show first 10 rows\n\nhotel_data.head(10)","ec4b055b":"# Data summary\n\nhotel_data.info()","426f8e6b":"# Hotel types details\n\nplt.figure(figsize=(10,10))\nsns.countplot(x='hotel', data = hotel_data, palette='gist_earth')\nplt.title('Hotel Types', weight='bold')\nplt.xlabel('Hotel', fontsize=12)\nplt.ylabel('Count', fontsize=12)","191fc712":"# `is_canceled` graph\n\nplt.figure(figsize=(10,10))\nsns.countplot(y='is_canceled', data= hotel_data, palette='gist_stern', orient = 'v')\nplt.title('Canceled Situation', weight='bold')\nplt.xlabel('Count', fontsize=12)\nplt.ylabel('Canceled or Not Canceled', fontsize=12)","5a40ecba":"# `arrival_date_year` vs `lead_time` vs `is_canceled` exploration with violin plot\n\nplt.figure(figsize=(10,10))\nsns.violinplot(x='arrival_date_year', y ='lead_time', hue=\"is_canceled\", data=hotel_data, palette=\"Set3\", bw=.2,\n               cut=2, linewidth=2, iner= 'box', split = True)\nsns.despine(left=True)\nplt.title('Arrival Year vs Lead Time vs Canceled Situation', weight='bold')\nplt.xlabel('Year', fontsize=12)\nplt.ylabel('Lead Time', fontsize=12)","a09fe313":"#`arrival_date_month` names converted to the numbers\n\nhotel_data['arrival_date_month'].replace({'January' : '1',\n        'February' : '2',\n        'March' : '3',\n        'April' : '4',\n        'May' : '5',\n        'June' : '6',\n        'July' : '7',\n        'August' : '8',\n        'September' : '9', \n        'October' : '10',\n        'November' : '11',\n        'December' : '12'}, inplace=True)","482695d7":"#`arrival_date_month` exploration \n\nplt.figure(figsize=(15,10))\nsns.countplot(x='arrival_date_month', data = hotel_data,\n              order=pd.value_counts(hotel_data['arrival_date_month']).index, palette='YlOrBr_r')\nplt.title('Arrival Month', weight='bold')\nplt.xlabel('Month', fontsize=12)\nplt.ylabel('Count', fontsize=12)","3ac1d407":"# Table of `stay_in_weekend` and `stay_in_week_nights` features\n\npd.crosstab(index = hotel_data['stays_in_week_nights'],columns=hotel_data['stays_in_weekend_nights'], margins=True, margins_name = 'Total').iloc[:10]","41b23cf1":"## Creating new feature: `Weekday vs Weekend` \n\npd.options.mode.chained_assignment = None\ndef week_function(feature1, feature2, data_source):\n    data_source['weekend_or_weekday'] = 0\n    for i in range(0, len(data_source)):\n        if feature2.iloc[i] == 0 and feature1.iloc[i] > 0:\n            hotel_data['weekend_or_weekday'].iloc[i] = 'stay_just_weekend'\n        if feature2.iloc[i] > 0 and feature1.iloc[i] == 0:\n            hotel_data['weekend_or_weekday'].iloc[i] = 'stay_just_weekday'\n        if feature2.iloc[i] > 0 and feature1.iloc[i] > 0:\n            hotel_data['weekend_or_weekday'].iloc[i] = 'stay_both_weekday_and_weekend'\n        if feature2.iloc[i] == 0 and feature1.iloc[i] == 0:\n            hotel_data['weekend_or_weekday'].iloc[i] = 'undefined_data'\n\n            \nweek_function(hotel_data['stays_in_weekend_nights'],hotel_data['stays_in_week_nights'], hotel_data)","3ce54c6c":"# Table of `stay_in_weekend` and `stay_in_week_nights` features\n\npd.crosstab(index = hotel_data['stays_in_week_nights'],columns=hotel_data['stays_in_weekend_nights'], margins=True, margins_name = 'Total').iloc[:10]","b6b818e6":"#`arrival_date_month` vs `weekend_or_weekday` graph \n\nhotel_data['arrival_date_month']= hotel_data['arrival_date_month'].astype('int64')\ngroup_data = hotel_data.groupby([ 'arrival_date_month','weekend_or_weekday']).size().unstack(fill_value=0)\ngroup_data.sort_values('arrival_date_month', ascending = True).plot(kind='bar',stacked=True, cmap='Set2',figsize=(15,10))\nplt.title('Arrival Month vs Staying Weekend or Weekday', weight='bold')\nplt.xlabel('Arrival Month', fontsize=12)\nplt.xticks(rotation=360)\nplt.ylabel('Count', fontsize=12)","764cfd53":"# Create new feature:`all_children` with merge children and baby features\n\nhotel_data['all_children'] = hotel_data['children'] + hotel_data['babies']\npd.crosstab(hotel_data['adults'], hotel_data['all_children'], margins=True, margins_name = 'Total').iloc[:10]","e5a3e8e3":"# `Meal` feature donut chart\n\nmeal_labels= ['BB','HB', 'SC', 'Undefined', 'FB']\nsize = hotel_data['meal'].value_counts()\nplt.figure(figsize=(10,10))\ncmap =plt.get_cmap(\"Pastel2\")\ncolors = cmap(np.arange(3)*4)\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\nplt.pie(size, labels=meal_labels, colors=colors, wedgeprops = { 'linewidth' : 5, 'edgecolor' : 'white' })\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.title('Meal Types', weight='bold')\nplt.show()","5e46ef28":"# Groupby `Meal` and `Hotel` features\n\ngroup_meal_data = hotel_data.groupby(['hotel','meal']).size().unstack(fill_value=0).transform(lambda x: x\/x.sum())\ngroup_meal_data.applymap('{:.2f}'.format)","f42bf627":"# Create Top 10 Country of Origin graph\n\nplt.figure(figsize=(10,10))\nsns.countplot(x='country', data=hotel_data, \n              order=pd.value_counts(hotel_data['country']).iloc[:10].index, palette=\"brg\")\nplt.title('Top 10 Country of Origin', weight='bold')\nplt.xlabel('Country', fontsize=12)\nplt.ylabel('Count', fontsize=12)","4efa1c94":"# `Market_segment` feature exploration\n\nplt.figure(figsize=(10,10))\nsns.countplot(hotel_data['market_segment'], palette='spring_r', \n              order=pd.value_counts(hotel_data['market_segment']).index)\nplt.title('Market Segment Types', weight='bold')\nplt.xlabel('Market Segment', fontsize=12)\nplt.ylabel('Count', fontsize=12)","d89b57f9":"# Reserved vs Assigned room types table\n\npd.crosstab(index = hotel_data['reserved_room_type'], \n            columns = hotel_data['assigned_room_type'],normalize='index').round(2)*100","c2e736d2":"# `Arrival Month` vs `ADR` vs `Booking Cancellation Status`\n\nhotel_data['adr'] = hotel_data['adr'].astype(float)\nplt.figure(figsize=(15,10))\nsns.barplot(x='arrival_date_month', y='adr', hue='is_canceled', dodge=True, palette= 'PuBu_r', data=hotel_data)\nplt.title('Arrival Month vs ADR vs Booking Cancellation Status', weight='bold')\nplt.xlabel('Arrival Month', fontsize=12)\nplt.ylabel('ADR', fontsize=12)","cc06bce8":" #Group by `total_of_special_requests` and `is_canceled` features\n\ngroup_adr_request = hotel_data.groupby([ 'total_of_special_requests', 'is_canceled']).size().unstack(fill_value=0)\ngroup_adr_request.plot(kind='bar', stacked=True, cmap='vlag', figsize=(10,10))\nplt.title('Total Special Request vs Booking Cancellation Status', weight='bold')\nplt.xlabel('Number of Special Request', fontsize=12)\nplt.xticks(rotation=360)\nplt.ylabel('Count', fontsize=12)","149d4969":"## Display sum of null data\n\nhotel_data.isnull().sum()","5e9e6690":"# Fill missing data\n\nhotel_data['children'] =  hotel_data['children'].fillna(0)\nhotel_data['all_children'] =  hotel_data['all_children'].fillna(0)\nhotel_data['country'] = hotel_data['country'].fillna(hotel_data['country'].mode().index[0])\nhotel_data['agent']= hotel_data['agent'].fillna('0')\nhotel_data=hotel_data.drop(['company'], axis =1)","91253595":"# Change data structure\n\nhotel_data['agent']= hotel_data['agent'].astype(int)\nhotel_data['country']= hotel_data['country'].astype(str)","be9b9c29":"#Using Label Encoder method for categorical features\n\nlabelencoder = LabelEncoder()\nhotel_data['hotel'] = labelencoder.fit_transform(hotel_data['hotel'])\nhotel_data['arrival_date_month'] = labelencoder.fit_transform(hotel_data['arrival_date_month'])\nhotel_data['meal'] = labelencoder.fit_transform(hotel_data['meal'])\nhotel_data['country'] = labelencoder.fit_transform(hotel_data['country'])\nhotel_data['market_segment']= labelencoder.fit_transform(hotel_data['market_segment'])\nhotel_data['distribution_channel']=labelencoder.fit_transform(hotel_data['distribution_channel'])\nhotel_data['is_repeated_guest'] = labelencoder.fit_transform(hotel_data['is_repeated_guest'])\nhotel_data['reserved_room_type'] = labelencoder.fit_transform(hotel_data['reserved_room_type'])\nhotel_data['assigned_room_type'] = labelencoder.fit_transform(hotel_data['assigned_room_type'])\nhotel_data['deposit_type'] = labelencoder.fit_transform(hotel_data['deposit_type'])\nhotel_data['agent'] = labelencoder.fit_transform(hotel_data['agent'])\nhotel_data['customer_type'] = labelencoder.fit_transform(hotel_data['customer_type'])\nhotel_data['reservation_status'] = labelencoder.fit_transform(hotel_data['reservation_status'])\nhotel_data['weekend_or_weekday'] = labelencoder.fit_transform(hotel_data['weekend_or_weekday'])","fec008a4":"#Create new dataframe for categorical data\n\nhotel_data_categorical = hotel_data[['hotel','is_canceled','arrival_date_month','meal',\n                                     'country','market_segment','distribution_channel', \n                                     'is_repeated_guest', 'reserved_room_type',\n                                     'assigned_room_type','deposit_type','agent',\n                                     'customer_type','reservation_status', \n                                     'weekend_or_weekday']]\nhotel_data_categorical.info()","e8b1c641":"#Create new dataframe for numerical data\n\nhotel_data_numerical= hotel_data.drop(['hotel','is_canceled', 'arrival_date_month','meal',\n                                       'country','market_segment','distribution_channel', \n                                       'is_repeated_guest', 'reserved_room_type', \n                                       'assigned_room_type','deposit_type','agent', \n                                       'customer_type','reservation_status',\n                                       'weekend_or_weekday'], axis = 1)\nhotel_data_numerical.info()","d3e5f01f":"# Correlation Matrix with Spearman method\n\nplt.figure(figsize=(15,15))\ncorr_categorical=hotel_data_categorical.corr(method='spearman')\nmask_categorical = np.triu(np.ones_like(corr_categorical, dtype=np.bool))\nsns.heatmap(corr_categorical, annot=True, fmt=\".2f\", cmap='BrBG', vmin=-1, vmax=1, center= 0,\n            square=True, linewidths=2, cbar_kws={\"shrink\": .5}).set(ylim=(15, 0))\nplt.title(\"Correlation Matrix Spearman Method- Categorical Data \",size=15, weight='bold')","43b15bd1":"# Correlation Matrix with pearson method\n\nplt.figure(figsize=(15,15))\ncorr_numerical=hotel_data_numerical.corr(method='pearson')\nmask_numerical = np.triu(np.ones_like(corr_numerical, dtype=np.bool))\nsns.heatmap(corr_numerical, annot=True, fmt=\".2f\", cmap='RdBu', mask= mask_numerical, vmin=-1, vmax=1, center= 0,\n            square=True, linewidths=2, cbar_kws={\"shrink\": .5}).set(ylim=(17, 0))\nplt.title(\"Correlation Matrix Pearson Method- Numerical Data \",size=15, weight='bold')","a0ef1421":"# Finding high correlated features\n\ncorr_mask_categorical = corr_categorical.mask(mask_categorical)\ncorr_values_categorical = [c for c in corr_mask_categorical.columns if any (corr_mask_categorical[c] > 0.90)]\ncorr_mask_numerical = corr_numerical.mask(mask_numerical)\ncorr_values_numerical = [c for c in corr_mask_numerical.columns if any (corr_mask_numerical[c] > 0.90)]\nprint(corr_values_categorical, corr_values_numerical)","26c20c60":"# `reservation_status` vs `is_canceled` table\n\npd.crosstab(columns = hotel_data['reservation_status'], index = hotel_data['is_canceled'],\n           margins=True, margins_name = 'Total')","00e53fc8":"# `reservation_status` vs `is_canceled` table\n\npd.crosstab(columns = hotel_data['reservation_status'], index = hotel_data['is_canceled'],\n           margins=True, margins_name = 'Total')","617c9063":"#Copying data to used next parts\n\nhotel_data_model = hotel_data","fbbf40ea":"# Seperate target variable\n\nhotel_data_tunning = hotel_data\ny = hotel_data_tunning.iloc[:,1]\nX = pd.concat([hotel_data_tunning.iloc[:,0],hotel_data_tunning.iloc[:,2:30]], axis=1)","3e9b80b5":"# Permutation Importance graph with XGB Classifier algorithm.\n\nparams = {\n    'criterion': 'giny', \n    'learning_rate': 0.01, \n    'max_depth': 5,\n    'n_estimators': 100, \n    'objective': 'binary:logistic', \n}\nmodel = XGBClassifier(parameters=params)\n# fit the model\nmodel.fit(X, y)\n# perform permutation importance\nresult = permutation_importance(model, X, y, scoring='accuracy', n_repeats = 5, n_jobs=-1)\nsorted_idx = result.importances_mean.argsort()","dd57fb07":"# Feature scores table\n\nfor i,v in enumerate(sorted_idx):\n    print('Feature: %0d, Score: %.5f' % (i,v))","c4cb11f1":"#Permutation Importance graph \n\nfig, ax = plt.subplots(figsize=(20,15))\n\nax.boxplot(result.importances[sorted_idx].T,\n           vert=False, labels=X.columns[sorted_idx])\nax.set_title(\"Permutation Importance\")\nfig.tight_layout()\nplt.show()","e454b100":"# Drop `baby` feature from data\n\nhotel_data_model = hotel_data_model.drop(['babies'], axis=1)","81e9865e":"# Seperate target variable for model building \n\ny_model = hotel_data_model.iloc[:,1]\nX_model = pd.concat([hotel_data_tunning.iloc[:,0],hotel_data_tunning.iloc[:,2:30]], axis=1)\ny_model.describe()","e4556479":"# Split to train and test with 70-30 ratio\n\nX_train, X_test, y_train, y_test = train_test_split(X_model, y_model, test_size=0.3, random_state=42, stratify = y)","4b768bc4":"# Implement standart scaler method\n\nstandardScalerX = StandardScaler()\nX_train = standardScalerX.fit_transform(X_train)\nX_test = standardScalerX.fit_transform(X_test)","cf8a083e":"# Stratified K-Fold Cross Validation Method\n\nkfold_cv=StratifiedKFold(n_splits=5, random_state=42, shuffle=True)\n\nfor train_index, test_index in kfold_cv.split(X_model,y_model):\n    X_train, X_test = X_model.iloc[train_index], X_model.iloc[test_index]\n    y_train, y_test = y_model.iloc[train_index], y_model.iloc[test_index]","0f5f4d0b":"# Decision Tree Model Building\n\ndtc_model = DecisionTreeClassifier(criterion= 'gini', min_samples_split=8,\n                                  min_samples_leaf = 4, max_features = 'auto')\n# fit the model\ndtc_model.fit(X_train, y_train)\n\n#Predict Model\npredict_dtc = dtc_model.predict(X_test)","3376632e":"# Random Forest Model Building\n\nrf_model = RandomForestClassifier(min_samples_leaf = 6, min_samples_split=6,\n                                  n_estimators = 100)\n\n# fit the model\nestimator= rf_model.fit(X_train, y_train)\n#Predict Model\npredict_rf = rf_model.predict(X_test)","ddd4c9de":"# Extra Treees Classsifier Model Building\n\netc_model = ExtraTreesClassifier(min_samples_leaf = 7, min_samples_split=2,\n                                  n_estimators = 100)\n# fit the model\netc_model.fit(X_train, y_train)\n\n#Predict Model\npredict_etc = etc_model.predict(X_test)\n","845039b7":"# Extreme Gradient Boosting Model Building\n\nxgb_model = XGBClassifier(criterion = 'giny', learning_rate = 0.01, max_depth = 5, n_estimators = 100,\n                          objective ='binary:logistic', subsample = 1.0)\n# fit the model\nxgb_model.fit(X_train, y_train)\n#Predict Model\npredict_xgb = xgb_model.predict(X_test)","3286fa78":"# Classification Reports \n\nprint(\"RF\", classification_report(y_test, predict_rf))\nprint(\"DTC\",classification_report(y_test, predict_dtc))\nprint(\"ETC\", classification_report(y_test, predict_etc))\nprint(\"XGB\", classification_report(y_test, predict_xgb))","c6e37a25":"# Confusion Matrix \n\nDTC_matrix = confusion_matrix(y_test, predict_dtc)\nRF_matrix = confusion_matrix(y_test, predict_rf)\nETC_matrix = confusion_matrix(y_test, predict_etc)\nXGB_matrix = confusion_matrix(y_test, predict_xgb) \n\nfig, ax = plt.subplots(1, 2, figsize=(15, 8))\nsns.heatmap(RF_matrix,annot=True, fmt=\"d\", cbar=False, cmap=\"Pastel2\",  ax = ax[0]).set_ylim([0,2])\nax[0].set_title(\"Random Forest\", weight='bold')\nax[0].set_xlabel('Predicted Labels')\nax[0].set_ylabel('Actual Labels')\nsns.heatmap(DTC_matrix,annot=True, fmt=\"d\" ,cbar=False, cmap=\"tab20\", ax = ax[1]).set_ylim([0,2])\nax[1].set_title(\"Decision Tree\", weight='bold')\nax[1].set_xlabel('Predicted Labels')\nax[1].set_ylabel('Actual Labels')\n\nfig, axe = plt.subplots(1, 2, figsize=(15, 8))\nsns.heatmap(ETC_matrix,annot=True, fmt=\"d\", cbar=False, cmap=\"Paired\", ax = axe[0]).set_ylim([0,2])\naxe[0].set_title(\"Extra Tree Classifier\", weight='bold')\naxe[0].set_xlabel('Predicted Labels')\naxe[0].set_ylabel('Actual Labels')\nsns.heatmap(XGB_matrix,annot=True, fmt=\"d\", cbar=False, cmap=\"Pastel1\", ax = axe[1]).set_ylim([0,2])\naxe[1].set_title(\"Gradient Boosting\", weight='bold')\naxe[1].set_xlabel('Predicted Labels')\naxe[1].set_ylabel('Actual Labels')","3c45c04b":"2. Dealing with Missing Data and Correlation Matrix"}}