{"cell_type":{"411b3898":"code","df5fb596":"code","c3516598":"code","306d02eb":"code","47b10544":"code","40664f26":"code","3d8a86cb":"code","ebe5837b":"code","4c1ce06f":"code","98662aae":"code","4d0d43f4":"code","b0cbf398":"code","968d562e":"code","6df8b549":"code","9b730dc0":"code","2b0f0c75":"code","72747cc2":"code","61b2f428":"code","546ce84b":"code","c41445c8":"code","69abc6f2":"code","ab9a0c30":"code","ee7a4330":"code","423ab396":"code","2c71df18":"code","de5b23af":"code","69fa2056":"code","2488ff06":"code","2b18dd0d":"code","fbb92ef2":"code","5ec7acda":"code","6fb7bb59":"code","6b4f35ba":"code","f0a8005b":"code","1e4b56c9":"code","f0d867dd":"code","93b4450a":"code","08ae4c1b":"code","3d0a7a2c":"code","be04ee59":"code","07ae1714":"code","b83be027":"code","37aed944":"code","2bfc14bd":"code","0c5bec51":"code","d4007db9":"code","453dca09":"code","df8bb5a7":"code","db207e00":"code","224481cd":"code","52473611":"code","4d19401c":"code","47f43f80":"code","83beafbb":"code","3b01f4b0":"markdown","3216d123":"markdown","2268cb0f":"markdown","614adfb0":"markdown","131787ae":"markdown","c41e7330":"markdown","e59d70d2":"markdown"},"source":{"411b3898":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","df5fb596":"import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nimport numpy as np","c3516598":"train=pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Training.csv\")","306d02eb":"ipl1=pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv\")\nipl2=pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv\")","47b10544":"ipl2.head()","40664f26":"ipl2['season'] = '2020'","3d8a86cb":"ipl2.head()","ebe5837b":"print(train.head())\nprint(\"_\"*100)\nprint(ipl1.head())\nprint(\"_\"*100)\nprint(ipl2.head())","4c1ce06f":"ipl=pd.concat([ipl1,ipl2])\n#concatenating is fine, in this case as see null values will help to filter out the data later","98662aae":"ipl.head()","4d0d43f4":"test=pd.read_csv(\"..\/input\/ipl-2020-player-performance\/sample_submission.csv\")","b0cbf398":"test.head()","968d562e":"test['player_name']=test['Id']\ntest['match_id']=test['Id']","6df8b549":"for i in range(len(test)):\n    test['player_name'][i]=test['Id'][i].split('_')[1]","9b730dc0":"for i in range(len(test)):\n    test['match_id'][i]=int(test['Id'][i].split('_')[0])","2b0f0c75":"test=pd.merge(test,ipl,how='inner',on='match_id')","72747cc2":"test.head()","61b2f428":"test.isnull().sum()","546ce84b":"test.drop(['toss_winner', 'toss_decision', 'result',\n       'dl_applied', 'winner', 'win_by_runs', 'win_by_wickets',\n       'player_of_match','umpire1', 'umpire2', 'umpire3'],axis=1,inplace=True)","c41445c8":"test.isnull().sum()","69abc6f2":"train['player_name']=train['Id']\ntrain['match_id']=train['Id']","ab9a0c30":"for i in range(len(train)):\n    train['player_name'][i]=train['Id'][i].split('_')[1]","ee7a4330":"for i in range(len(train)):\n    train['match_id'][i]=int(train['Id'][i].split('_')[0])","423ab396":"train.head()","2c71df18":"train.drop(['Runs', 'Boundaries', 'Six', 'Fifty', 'Hundred', 'Duck',\n       'Batting_Points', 'Wickets', '4W_Haul', '5W_Haul', 'Maidens',\n       'Bowling_Points'],axis=1)","de5b23af":"train.isnull().sum()","69fa2056":"train=pd.merge(train,ipl,how='inner',on='match_id')","2488ff06":"train.head()","2b18dd0d":"train.drop(['Runs', 'Boundaries', 'Six', 'Fifty', 'Hundred', 'Duck',\n       'Batting_Points', 'Wickets', '4W_Haul', '5W_Haul', 'Maidens',\n       'Bowling_Points', 'toss_winner', 'toss_decision', 'result',\n       'dl_applied', 'winner', 'win_by_runs', 'win_by_wickets',\n       'player_of_match', 'umpire1', 'umpire2', 'umpire3'],axis=1,inplace=True)","fbb92ef2":"print(train.isnull().sum())\nprint(test.isnull().sum())","5ec7acda":"train = train.dropna()\ntest = test.dropna()","6fb7bb59":"train.head()","6b4f35ba":"test.head()","f0a8005b":"sar=['season', 'city','date', 'team1', 'team2', 'venue']\nfor i in sar:\n    ord_enc = OrdinalEncoder()\n    train[i] = ord_enc.fit_transform(train[[i]])\ntrain.head(11)","1e4b56c9":"sar=['season', 'city','date', 'team1', 'team2', 'venue']\nfor i in sar:\n    ord_enc = OrdinalEncoder()\n    test[i] = ord_enc.fit_transform(test[[i]])\ntest.head(11)","f0d867dd":"print(train.head())\nprint(\"-\"*100)\nprint(train.head())","93b4450a":"#scaler = StandardScaler()","08ae4c1b":"X=train.drop(['Total Points','Id','player_name'],axis=1)\ny=train['Total Points']","3d0a7a2c":"RFR=RandomForestRegressor()\nRFR.fit(X,y)","be04ee59":"RFR_pred=RFR.predict(X)\nnp.unique(y_pred)","07ae1714":"print('MSE:',mean_squared_error(y, RFR_pred))\nprint('r2_Score:',r2_score(y, RFR_pred))\nprint('RMSE:',np.sqrt(mean_squared_error(y, RFR_pred)))","b83be027":"X_test=test.drop(['Total Points','Id','player_name'],axis=1)","37aed944":"testRFR_pred=RFR.predict(X_test)\ntestRFR_pred","2bfc14bd":"print('MSE:',mean_squared_error(y[:1283], testRFR_pred))\nprint('r2_Score:',r2_score(y[:1283], testRFR_pred))\nprint('RMSE:',np.sqrt(mean_squared_error(y[:1283], testRFR_pred)))","0c5bec51":"DTR = DecisionTreeRegressor()\nDTR.fit(X,y)","d4007db9":"testDTR_pred=DTR.predict(X_test)\ntestDTR_pred","453dca09":"print('MSE:',mean_squared_error(y[:1283], testDTR_pred))\nprint('r2_Score:',r2_score(y[:1283], testDTR_pred))\nprint('RMSE:',np.sqrt(mean_squared_error(y[:1283], testDTR_pred)))","df8bb5a7":"regressor = SVR(kernel = 'rbf')\nregressor.fit(X, y)","db207e00":"testSVR_pred=regressor.predict(X_test)\ntest_pred","224481cd":"print('MSE:',mean_squared_error(y[:1283], testSVR_pred))\nprint('r2_Score:',r2_score(y[:1283], testSVR_pred))\nprint('RMSE:',np.sqrt(mean_squared_error(y[:1283], testSVR_pred)))","52473611":"submission=test[['Id']]\nsubmission['Total Points']=testRFR_pred[:1283]\nsubmission.head()\nsubmission.to_csv('RFR.csv',index=False)","4d19401c":"submission=test[['Id']]\nsubmission['Total Points']=testDTR_pred[:1283]\nsubmission.head()\nsubmission.to_csv('DTR.csv',index=False)","47f43f80":"submission=test[['Id']]\nsubmission['Total Points']=testSVR_pred[:1283]\nsubmission.head()\nsubmission.to_csv('SVR.csv',index=False)","83beafbb":"#atlast I could have loop to make the process easier, But left that for future improvements :)\n#Thank you","3b01f4b0":"# Submission csv","3216d123":"# An effort by Sarvesh Kumar Thapa","2268cb0f":"# Support Vector Regressor","614adfb0":"# Label encoding for fitting the model","131787ae":"# Random forest regressor","c41e7330":"# preparaing training data","e59d70d2":"# Decision tree regressor"}}