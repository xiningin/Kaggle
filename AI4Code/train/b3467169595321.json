{"cell_type":{"611d28cd":"code","11fe59bd":"code","9ed7ccda":"code","e2a42479":"code","32582993":"code","747d0c87":"code","939f6523":"code","66c4799e":"code","77e1dec2":"code","e3f673c6":"code","a427fbcc":"code","44310c37":"code","926a2827":"code","9f3236f3":"markdown","a338bb61":"markdown","034cf078":"markdown","a3a86d94":"markdown","5ee960a1":"markdown","675f323c":"markdown","4262f733":"markdown","31181a05":"markdown","f61b450b":"markdown","6a8d7f49":"markdown","642c4d1b":"markdown","8dbb675d":"markdown"},"source":{"611d28cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n# Import our Libraries \n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/\"))\n# Any results you write to the current directory are saved as output.","11fe59bd":"swing = pd.read_csv(\"..\/input\/swingClassification.csv\")\nswing.head()","9ed7ccda":"swing['Ax'].describe()","e2a42479":"acceleration_data = swing.drop(columns=['Swing'])\nacceleration_data.head()","32582993":"%matplotlib inline \nimport matplotlib as plt\n\n\nacceleration_data.plot(y='Az')","747d0c87":"swing_prediction = pd.read_csv(\"..\/input\/swingClassification.csv\")\nswing_prediction.head()","939f6523":"from sklearn import metrics\nfrom sklearn.neighbors import KNeighborsClassifier","66c4799e":"feature_cols = ['Ax','Ay','Az']\n\n#Input Data\nX = swing_prediction[feature_cols]\n\n#Output Data\ny = swing_prediction['Swing']","77e1dec2":"knn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X,y)","e3f673c6":"y_predict = knn.predict(X)\nprint(metrics.accuracy_score(Y, y_predict))","a427fbcc":"for swing in y_predict:\n    if swing: print(\"Swinging\")\n    else: print(\"Not Swinging\")\n","44310c37":"import matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\n\nn_neighbors = 1\n# Create color maps\ncmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', ])\ncmap_bold  = ListedColormap(['#FF0000', '#00FF00', ])\n\nfor weights in ['uniform', 'distance']:\n    #Create a matrix\n    X_mat = X[['Ax', 'Ay']].as_matrix()\n    y_mat = Y.as_matrix()\n    \n    # we create an instance of Neighbours Classifier and fit the data.\n    clf = KNeighborsClassifier(n_neighbors, weights=weights)\n    clf.fit(X, y)\n\n    h = .02  # step size in the mesh\n    \n    #Plot the decision boundary. For that, we will assign a color to each\n    # point in the mesh [x_min, x_max]x[y_min, y_max].\n    x_min, x_max = X_mat[:, 0].min() - 1, X_mat[:, 0].max() + 1\n    y_min, y_max = X_mat[:, 1].min() - 1, X_mat[:, 1].max() + 1\n    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),\n                         np.arange(y_min, y_max, h))\n    vrb = np.c_[xx.ravel(), yy.ravel()]\n    print(vrb.shape)\n    print(vrb)\n    Z = clf.predict(vrb)\n\n    # Put the result into a color plot\n    Z = Z.reshape(xx.shape)\n    plt.figure()\n    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)\n\n    # Plot also the training points\n    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold,\n                edgecolor='k', s=20)\n    plt.xlim(xx.min(), xx.max())\n    plt.ylim(yy.min(), yy.max())\n    plt.title(\"3-Class classification (k = %i, weights = '%s')\"\n              % (n_neighbors, weights))\n\n\nplt.show()","926a2827":"x_min, x_max = X.min() - 1, X.max() + 1\ny_min, y_max = Y.min() - 1, Y.max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h),\n                         np.arange(y_min, y_max, h))\nprint(xx)\nprint(yy)\nnp.meshgrid(x_min)\n\nclf.predict(xx,yy)\n#X.min()['Ax']\n#clf.predict(np.c_[xx.ravel(), yy.ravel()])","9f3236f3":"# Print Results\n","a338bb61":"## Import Data\n### We first see Acceleration in the X, Y, and Z plane","034cf078":"# Give Your Machine Learning a Color Map ","a3a86d94":"# Import Data","5ee960a1":"# Setup Knn Model Classifier","675f323c":"## Drop Unecessary Columns","4262f733":"# Predict the Outcome ","31181a05":"## Predict Swings with Machine Learning\n![Ken Griffey Swing](https:\/\/media.giphy.com\/media\/3o7TKQVvClrMdt7mSs\/giphy.gif)\nThis will be a basic tutorial over using machine for sports performance purpose. We will be leveraging sensor data that is classified based on when someon is swinging a baseball bat, and when they are not swinging a baseball bat. This is one of the first steps when we are looking to optimize our performance, and hit homeruns like Ken Griffey Junior! \n\nOnce we have our swings tracked automatically we can then figure out what are the flaws in our swing to be on track for greater performance. Let's roll tide","f61b450b":"# Import Machine Learning Libraries SciKit Learn\n### We are going to use the model of KNN nearest neighbor model to identifty class classification of models \n\nThe end goal demonstration of this project will be to model scatter and group different swing types based on color. \nOur Classification will only have two states if someone is swinging or not.\n\n![Image Classification Model](https:\/\/scikit-learn.org\/stable\/_images\/sphx_glr_plot_classification_001.png)","6a8d7f49":"# Establish Training Data\nWe want to estable some training data so that our model will know how to perform.","642c4d1b":"## Basic Line Visualization","8dbb675d":"## Stastical descripition"}}