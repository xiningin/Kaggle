{"cell_type":{"d4dc9e41":"code","11093f65":"code","5b4b6c0f":"code","c818ac12":"code","913f2927":"code","eb823b88":"code","2f39dc15":"code","48a08e37":"code","19d24945":"code","23404b16":"code","9b78f870":"code","d63c427d":"code","7686b2fc":"code","64134124":"code","dcebc260":"code","7414a210":"code","b148fe1e":"code","1d34bb07":"code","f022e9af":"code","218b9559":"code","2ee7de51":"code","dc241a8c":"code","011e257d":"code","8efe278e":"code","865d4d93":"markdown"},"source":{"d4dc9e41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","11093f65":"import geopandas as gpd","5b4b6c0f":"districts_data = gpd.read_file('\/kaggle\/input\/moscow-districts\/mo.csv', encoding='utf-8')\nschools_data = pd.read_csv('\/kaggle\/input\/moscow-schools\/school_data.csv')","c818ac12":"districts_data.head()","913f2927":"schools_data.head()","eb823b88":"drop_list = ['\u0420\u043e\u0433\u043e\u0432\u0441\u043a\u043e\u0435', '\u0412\u043e\u0440\u043e\u043d\u043e\u0432\u0441\u043a\u043e\u0435', '\u041a\u0438\u0435\u0432\u0441\u043a\u0438\u0439', '\u041d\u043e\u0432\u043e\u0444\u0451\u0434\u043e\u0440\u043e\u0432\u0441\u043a\u043e\u0435',\n            '\u041c\u0438\u0445\u0430\u0439\u043b\u043e\u0432\u043e-\u042f\u0440\u0446\u0435\u0432\u0441\u043a\u043e\u0435', '\u041a\u043b\u0451\u043d\u043e\u0432\u0441\u043a\u043e\u0435', '\u041a\u0440\u0430\u0441\u043d\u043e\u043f\u0430\u0445\u043e\u0440\u0441\u043a\u043e\u0435', '\u041f\u0435\u0440\u0432\u043e\u043c\u0430\u0439\u0441\u043a\u043e\u0435', \n             '\u0422\u0440\u043e\u0438\u0446\u043a', '\u041c\u0430\u0440\u0443\u0448\u043a\u0438\u043d\u0441\u043a\u043e\u0435', '\u0412\u043d\u0443\u043a\u043e\u0432\u0441\u043a\u043e\u0435', '\u0412\u043d\u0443\u043a\u043e\u0432\u043e', '\u0414\u0435\u0441\u0451\u043d\u043e\u0432\u0441\u043a\u043e\u0435', \n             '\u0424\u0438\u043b\u0438\u043c\u043e\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u0435', '\u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u0438\u0439', '\u0421\u043e\u0441\u0435\u043d\u0441\u043a\u043e\u0435', '\u0429\u0430\u043f\u043e\u0432\u0441\u043a\u043e\u0435', '\u0420\u044f\u0437\u0430\u043d\u0441\u043a\u043e\u0435',\n             '\u041a\u043e\u043a\u043e\u0448\u043a\u0438\u043d\u043e', '\u0412\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u0441\u043a\u043e\u0435', '\u0420\u044f\u0437\u0430\u043d\u043e\u0432\u0441\u043a\u043e\u0435', '\u0421\u0435\u0432\u0435\u0440\u043d\u043e\u0435 \u0411\u0443\u0442\u043e\u0432\u043e', \n             '\u042e\u0436\u043d\u043e\u0435 \u0411\u0443\u0442\u043e\u0432\u043e', '\u0429\u0435\u0440\u0431\u0438\u043d\u043a\u0430', '\u0420\u044f\u0437\u0430\u043d\u043e\u0432\u0441\u043a\u043e\u0435', '\u041d\u043e\u0432\u043e-\u041f\u0435\u0440\u0435\u0434\u0435\u043b\u043a\u0438\u043d\u043e', '\u0421\u043e\u043b\u043d\u0446\u0435\u0432\u043e',\n             '\u0421\u0438\u043b\u0438\u043d\u043e', '\u041a\u0440\u044e\u043a\u043e\u0432\u043e', '\u0421\u0442\u0430\u0440\u043e\u0435 \u041a\u0440\u044e\u043a\u043e\u0432\u043e', '\u0421\u0430\u0432\u0451\u043b\u043a\u0438', '\u041c\u0430\u0442\u0443\u0448\u043a\u0438\u043d\u043e', '\u0412\u043e\u0441\u0442\u043e\u0447\u043d\u044b\u0439', '\u041c\u043e\u043b\u0436\u0430\u043d\u0438\u043d\u043e\u0432\u0441\u043a\u0438\u0439',\n             '\u041d\u0435\u043a\u0440\u0430\u0441\u043e\u0432\u043a\u0430', '\u0421\u0435\u0432\u0435\u0440\u043d\u044b\u0439']\n\ndistricts_data = districts_data.loc[~districts_data['NAME'].isin(drop_list), :]","2f39dc15":"from bokeh.plotting import ColumnDataSource, figure, output_file, show\nfrom bokeh.io import output_notebook\nfrom bokeh.models import GeoJSONDataSource\nfrom bokeh.plotting import figure\nimport pandas as pd\nfrom bokeh.colors import RGB","48a08e37":"lat = schools_data['lattitude'].values\nlong = schools_data['longitude'].values\n\nsource = ColumnDataSource(data=dict(x=long, y=lat, name=schools_data['name'], adres=schools_data['adress']))\n\ndistricts_data.crs = {'init' :'epsg:32633'}\ndistricts_data = districts_data.to_crs({'init' :'epsg:32633'})\n\ngeo_source = GeoJSONDataSource(geojson=districts_data.to_json())\n\nTOOLTIPS = [('name', '@NAME'),]\n\np = figure(tooltips=TOOLTIPS, y_range=[55.55, 55.95], x_range=[37.2, 38], plot_height=380, plot_width=380)\np.patches('xs', 'ys', alpha=0.9, source=geo_source, color=RGB(16,24,32), line_color = 'gray')\np.circle('x', 'y', size=6, color=RGB(242,170,76), alpha=0.7, source=source)\noutput_notebook()\nshow(p)","19d24945":"import numpy as np\nfrom shapely.geometry import Point","23404b16":"# \u041f\u043e\u0434\u0441\u0447\u0451\u0442 \u0447\u0438\u0441\u043b\u0430 \u0448\u043a\u043e\u043b\nnum_schools = np.zeros(districts_data.shape[0])\n\nfor i in range(0, districts_data.shape[0]):\n    district = districts_data['geometry'].iloc[i]\n    for j in range(0, schools_data.shape[0]):\n        school = Point(tuple([schools_data['longitude'].iloc[j], schools_data['lattitude'].iloc[j]]))\n        if district.contains(school):\n            num_schools[i] += 1\n\ndistricts_data['num_schools'] = num_schools","9b78f870":"districts_data.head()","d63c427d":"import seaborn as sns\nimport matplotlib.pyplot as plt","7686b2fc":"sns.set(style=\"whitegrid\")\n\nf, axis = plt.subplots(2, figsize=(10, 7))\nsns.boxplot(x=districts_data['num_schools'], linewidth=2.5, ax=axis[0]).set_xticks(range(0, 16, 1))\nsns.distplot(districts_data['num_schools'], ax=axis[1], kde=False).set_xticks(range(0, 16, 1))\n\nmean = districts_data['num_schools'].mean()\nmedian = districts_data['num_schools'].median()\nmode = districts_data['num_schools'].mode().values[0]\n\n\nfor ax in axis:\n    ax.axvline(mean, color='r',)\n    ax.axvline(median, color='orange')\n    ax.axvline(mode, color='green', linestyle='--')\n    ax.xaxis.label.set_visible(False)\n\naxis[1].legend({'Mean': mean, 'Median': median, 'Mode': mode}, fontsize=17)\naxis[0].set_title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0448\u043a\u043e\u043b', fontsize=20, pad=10)\nplt.show()","64134124":"from bokeh.io import output_notebook, show\nfrom bokeh.models import ColumnDataSource, LinearColorMapper, ColorBar\nfrom bokeh.plotting import figure\nfrom bokeh.palettes import inferno, linear_palette, Viridis256, brewer\nfrom bokeh.transform import factor_cmap\nfrom bokeh.layouts import gridplot\nfrom bokeh.layouts import column","dcebc260":"# \u0423\u0434\u0430\u043b\u0438\u043c \u0440\u0430\u0439\u043e\u043d\u044b \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0448\u043a\u043e\u043b\ndistricts_data = districts_data.loc[districts_data['num_schools']!=0, :]\n\ndistricts_data = pd.DataFrame(districts_data)\ndistricts_data = districts_data.sort_values(by=['num_schools'])\ndistricts_data = districts_data.dropna()","7414a210":"source = ColumnDataSource(data=dict(district=districts_data['NAME'], num_schools=districts_data['num_schools']))\nTOOLTIPS = [('\u0420\u0430\u0439\u043e\u043d:', '@district'),\n            ('\u0427\u0438\u0441\u043b\u043e \u0448\u043a\u043e\u043b:', '@num_schools'),]\np1 = figure(x_range=districts_data['NAME'], plot_height=300, plot_width=700,tooltips=TOOLTIPS)\np1.vbar(top='num_schools', x='district', source=source, width=0.9,\n       fill_color=factor_cmap('district', palette=linear_palette(Viridis256, 120), factors=districts_data['NAME']))\n#p1.yaxis.major_label_text_font_size = \"9px\"\np1.xgrid.grid_line_color = None\np1.xaxis.visible = False\n\n\ndistricts_data=gpd.GeoDataFrame(districts_data)\ngeo_source = GeoJSONDataSource(geojson=districts_data.to_json())\ncolor_mapper = LinearColorMapper(palette=linear_palette(Viridis256, 120))\n\n\nTOOLTIPS = [('\u0420\u0430\u0439\u043e\u043d', '@NAME'), \n            ('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u043a\u043e\u043b:', '@num_schools'),]\np2 = figure(plot_height=700, plot_width=700,tooltips=TOOLTIPS, y_range=[55.55, 55.95], x_range=[37.2, 38])\np2.patches('xs', 'ys', alpha=0.9, source=geo_source, fill_color={'field': 'num_schools', 'transform': color_mapper}, \n          line_color = 'black', line_width = 0.6, fill_alpha = 1)\n\ncolor_bar = ColorBar(color_mapper=color_mapper, orientation='horizontal', location=(0,0), padding=0)\np2.add_layout(color_bar, 'below')\n\nshow(column(p2, p1))","b148fe1e":"p = sns.catplot(x='ABBREV_AO', y='num_schools', data=districts_data, kind='box')\np.fig.set_size_inches(10, 5)","1d34bb07":"# \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0440\u0430\u0439\u043e\u043d\u043e\u0432 \u0432 \u043a\u0432 \u043a\u043c\ndistricts_data['area']=gpd.GeoDataFrame(districts_data)['geometry'].area\/10**6\ndistricts_data = districts_data.sort_values(by=['area'])","f022e9af":"f, axis = plt.subplots(2, figsize=(15, 9))\n\nsns.boxplot(x=districts_data['area'], ax=axis[0], linewidth=2.5)\nsns.distplot(districts_data['area'], ax=axis[1], kde=False)\n\nmean = districts_data['area'].mean()\nmedian = districts_data['area'].median()\nmode = districts_data['area'].mode().values[0]\n\nfor ax in axis:\n    ax.axvline(mean, color='r',)\n    ax.axvline(median, color='orange')\n    ax.axvline(mode, color='green', linestyle='--')\n    ax.xaxis.label.set_visible(False)\n\naxis[1].legend({'Mean': mean, 'Median': median, 'Mode': mode}, fontsize=17)\naxis[0].set_title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0440\u0430\u0439\u043e\u043d\u043e\u0432', fontsize=20, pad=10)\nplt.show()","218b9559":"source = ColumnDataSource(data=dict(district=districts_data['NAME'], area=districts_data['area']))\n\np = figure(y_range=districts_data['NAME'], x_axis_location='above', plot_height=1000, plot_width=550)\n\np.hbar(y='district', right='area', source=source, height=0.9, \n       fill_color=factor_cmap('district', palette=linear_palette(Viridis256, 120), factors=districts_data['NAME']))\n\np.xaxis.axis_label = '\u041f\u043b\u043e\u0449\u0430\u0434\u044c'\np.yaxis.major_label_text_font_size='12px'\np.ygrid.grid_line_color = None\nshow(p)","2ee7de51":"# \u041d\u0430\u0439\u0434\u0451\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u043a\u043e\u043b \u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0440\u0430\u0439\u043e\u043d\u0430\ndistricts_data['schools_on_area'] = districts_data['num_schools']\/districts_data['area']\ndistricts_data = districts_data.sort_values(by='schools_on_area', ascending=False)","dc241a8c":"#sns.scatterplot(x=districts_data['area']*10**9, y=districts_data['num_schools'])\np = sns.jointplot('area', 'num_schools', data=districts_data, height=7)\np.set_axis_labels('area', 'num_schools', fontsize=17, fontweight='bold')\np.annotate(stats.pearsonr, fontsize=14)","011e257d":"from scipy import stats\n\nfiltered_data = districts_data.loc[~pd.Series(districts_data['area']>6*10**(-9)), :]\nfiltered_data['area'] = np.log(filtered_data['area'])\np = sns.jointplot('area', 'num_schools', data=filtered_data, color='b', height=7)\np.set_axis_labels('log(area)', 'num_schools', fontsize=15, fontweight='bold')\np.annotate(stats.pearsonr, fontsize=14)","8efe278e":"source = ColumnDataSource(data=dict(district=districts_data['NAME'], schools_on_area=districts_data['schools_on_area']))\np = figure(x_range=districts_data['NAME'], plot_height=500, plot_width=1100)\np.vbar(x='district', top='schools_on_area', width=0.8, source=source,\n       fill_color=factor_cmap('district', palette=linear_palette(Viridis256, 120), factors=districts_data['NAME']))\n\n\np.xaxis.major_label_orientation = 1\np.xaxis.major_label_text_font_size = '12px'\np.xgrid.grid_line_color = None\nshow(p)","865d4d93":"**Delete districts places abrode of MKAD**"}}