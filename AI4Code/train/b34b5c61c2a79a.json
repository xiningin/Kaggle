{"cell_type":{"33e803e4":"code","7b38c5be":"code","4bde54ea":"code","7442f6b8":"code","0099838a":"code","91f4e5ac":"code","fb6249b4":"code","ccc77862":"code","d777b46f":"code","f6b94f9d":"code","7bd370a8":"code","156a750b":"code","1865da66":"code","0bb799f7":"code","26e78880":"code","8e44ecf1":"code","644806ed":"code","c6b56f45":"code","205cbff5":"markdown","4d7fff61":"markdown","ad336cd5":"markdown","302043a1":"markdown","ddb7bcaf":"markdown","410584db":"markdown","0e4b9577":"markdown","337239b7":"markdown","35864a99":"markdown","a7461430":"markdown","fe48b6c0":"markdown","b25a2ccd":"markdown","06e2eb90":"markdown","e765116a":"markdown"},"source":{"33e803e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n# Any results you write to the current directory are saved as output.\nimport os\nprint(os.listdir(\"..\/input\"))","7b38c5be":"# Importing data\ndata = pd.read_csv('..\/input\/pokemon.csv')\ncopied_data = data.copy()","4bde54ea":"data.info()","7442f6b8":"data.isnull().sum()","0099838a":"data.sample(10)","91f4e5ac":"# Droping \"#\" column\ndata.drop(['#'], axis=1, inplace = True)","fb6249b4":"# Starting index from 1 & assigning an index name\ndata.index = range(1,801,1)\ndata.index.name = \"New Index\"       \ndata.head(10) # let's check it now.\n\n# An alternative and easy way to do the same thing:\n#data.set_index('#', inplace = True)","ccc77862":"# Correlation map through heatmap\nf, ax = plt.subplots(figsize = (10,10))\nsns.heatmap(data.corr('spearman'),linewidths=1, linecolor='black', cmap='Reds', annot = True, fmt='.2f',ax=ax)\nplt.xticks(rotation = 45)\nplt.yticks(rotation = 45)\nplt.show()              # you don't need to write this, but if you don't write, an information script will be show up and visually ruins your kernel.","d777b46f":"trace1 =go.Scatter(\n                    x = data.Attack,\n                    y = data.Defense,\n                    mode = \"markers\",\n                    name = \"Attack\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= data['Type 1'])\n\ntrace2 =go.Scatter(\n                    x = data.Attack,\n                    y = data.Speed,\n                    mode = \"markers\",\n                    name = \"Defense\",\n                    marker = dict(color = 'rgba(15, 200, 30, 0.4)'),\n                    text= data['Type 1'])\n\ndata2 = [trace1, trace2]\nlayout = dict(title = 'Defense and Speed values with respect to Attack',\n              xaxis= dict(title= 'Attack',ticklen= 5,zeroline= False), # ticklen : eksenlerdeki de\u011ferlerin ticklerinin uzunlu\u011fu\n              yaxis= dict(title= 'Defense & Speed',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data2, layout = layout)\niplot(fig)","f6b94f9d":"plt.figure(figsize=(10,10))\nsns.barplot(x= data['Type 1'].value_counts().index, y= data['Type 1'].value_counts().values)\nplt.xticks(rotation=45)\nplt.show()","7bd370a8":"bar = go.Bar(\n                x= data['Type 1'].value_counts().index,\n                y= data['Type 1'].value_counts().values,\n                marker = dict(color = 'rgba(21, 180, 255, 0.7)',\n                             line=dict(color='rgb(104,32,0)',width=1.5)),\n                text = data['Type 1'].value_counts().index)\ndatabar = [bar]\nlayout = dict(title = 'Value Counts of Type 1 Pokemons',\n             xaxis =dict(title='Species' ),\n              yaxis =dict(title='Counts' )\n             )\nfig = go.Figure(data = databar, layout = layout)\niplot(fig)","156a750b":"data_new = data.copy()\ndata_new.dropna(subset=['Type 2'], inplace = True)\ndata_new.index = range(1,415,1)\ndata_new.index.name = 'Dropped'\ndata_new.head()","1865da66":"fig = {\n  \"data\": [\n    {\n      \"values\": data_new['Type 2'].value_counts().values,\n      \"labels\": data_new['Type 2'].value_counts().index,\n      \"type\": \"pie\"\n    }],\n  \"layout\": {\n        \"title\":\"Percentages of Legendary Pokemons w.r.t. Types\"\n    }\n}\niplot(fig)","0bb799f7":"data.sort_values('Attack',inplace=True,ascending=False)\ndatarank = data.copy()\ndatarank.index = range(0,800,1)\n\nnums = copied_data['#'].iloc[:50]\n\nsorted_data = pd.concat([datarank,nums], axis=1).iloc[:50]","26e78880":"sorted_data.head()","8e44ecf1":"data_bubble = [ dict(x=sorted_data['#'],\n         y=sorted_data['Attack'],\n         mode= 'markers',\n         marker = dict(size = datarank.Defense\/3, color = datarank.Speed, showscale = True),\n                 \n         text = sorted_data.Name)]\niplot(data_bubble)","644806ed":"data['Type 1'].nunique()\ntypes = []\nc = ['hsl('+str(h)+',50%'+',50%)' for h in np.linspace(0, 255, 18)]\n\nfor i in range(18):\n    violins = {\n            \"type\": 'violin',\n            \"y\": data.Attack[data['Type 1'] == data['Type 1'].value_counts(ascending=False).index[i]],\n            \"name\": data['Type 1'].value_counts(ascending=False).index[i],\n            \"marker\":{\n                \"color\":c[i]},\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            }\n        }\n    types.append(violins)\niplot(types)","c6b56f45":"# Splitting Data\ndata_water = data[data['Type 1']=='Water']\ndata_grass = data[data['Type 1']=='Grass']\ndata_fire = data[data['Type 1']=='Fire']\ndata_bug = data[data['Type 1']=='Bug']\ndata_psychic = data[data['Type 1']=='Psychic']\n\nbox1 = go.Box(\n                y= data_water.Attack,\n                name= 'Water Pokemons',\n                marker = dict(color = 'rgb(12, 128, 128)'),\n                boxmean='sd',\n                boxpoints='all')\nbox2 = go.Box(\n                y= data_grass.Attack,\n                name= 'Grass Pokemons',\n                marker = dict(color = 'rgb(100, 12, 38)'),\n                boxmean='sd',\n                boxpoints='all')\nbox3 = go.Box(\n                y= data_fire.Attack,\n                name= 'Fire Pokemons',\n                marker = dict(color = 'rgb(12, 128, 128)'),\n                boxmean='sd',\n                boxpoints='all')\nbox4 = go.Box(\n                y= data_bug.Attack,\n                name= 'Bug Pokemons',\n                marker = dict(color = 'rgb(50, 40, 100)'),\n                boxmean='sd',\n                boxpoints='all')\nbox5 = go.Box(\n                y= data_psychic.Attack,\n                name= 'Psychic Pokemons',\n                marker = dict(color = 'rgb(45, 179, 66)'),\n                boxmean='sd',\n                boxpoints='all')\n\ndata_boxes = [box1,box2,box3,box4,box5]\niplot(data_boxes)","205cbff5":"* Now let's drop NaN values of \"Type 2\" column.\n\n**While dropping you have to specify the columns having nan values through \"subset\", otherwise it won't work so nan values won't have been dropped**","4d7fff61":"* If you don't have a ruler close by you, it's better to plot with Pyplot to see absolute numbers of pokemons.","ad336cd5":"* Before checking the correlations between the features and making the data more interpretable with some plots, firstly let's drop the \"#\" column and instead of that column, **make the indices start from 1**.","302043a1":"* Plotting a pieplot which shows the percentage of legendary of any type.\n\n**Pie charts are usually not preferred since they're less visually informative. **","ddb7bcaf":"* **The biggest advantage of using Plotly in violin plots within boxes is to be able to observe both  estimates of location and distribution due to its interactive plotting features.**","410584db":"* As you see above, among all almost full columns,  only \"Type 2\" has 386 null objects. Therefore, we will have to deal with it later.","0e4b9577":"Now let's see how \"Defense\" and \"Speed\" change with respect to \"Attack\"","337239b7":"*** BONUS** : A redneck plot","35864a99":"* I'll be thankful if you upvote this kernel in case you like it, thanks in advance.\n\n\n# **END**","a7461430":"Lastly, we're visualizing statistics of different types of pokemons via a rainbow violin plot from greatest to.","fe48b6c0":"* With the heatmap of Seaborn visualization library, let's see the correlations among features.\n* Since correlation is about quantitative values, you can only see correlations of numerical features.\n* At first sight, it seems that features have non-linear relationships among each other. Therefore, I'd rather use **\"spearman\"** than** \"pearson\"** as a correlation coefficient since also that's a small dataset.","b25a2ccd":"* Using a \"bubble plot\" we can visualize multiple dimensions of our data. \n* Here, after sorting the attacks of first 50 greatest pokemons descending, size of the bubbles will represent the magnitude of defense and colors will correspond to magnitude of speed with respect to a colorscale. \n\n**If the indices of dataframes which will be concatenated don't pair off each other,  concatenated dataframe will not be sorted as you want, so watch out!**","06e2eb90":"# Introduction \n* In this kernel you will see some visualizations for a statistically better comprehension of pokemon data.","e765116a":"* It's time to see how many pokemons there are from each Type1 features with seaborn's barplot."}}