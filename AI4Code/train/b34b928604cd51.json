{"cell_type":{"e8ad28b7":"code","646ce5ad":"code","01d216fe":"code","c185c402":"code","edbfb441":"code","31899996":"code","4955081d":"code","20bc14a2":"markdown"},"source":{"e8ad28b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","646ce5ad":"# \ud604\uc7ac opencv \ucf54\ub4dc\ub294 3.4.2.17 \uc5d0 \ub9de\ucdb0\uc11c \uc791\uc131\ub418\uc5b4 \uc788\uc5b4 \ubc84\uc804\uc744 \ub9de\ucd94\ub294 \uc791\uc5c5\uc774 \ud544\uc694\ud558\ub2e4. \n! yes | pip3 uninstall opencv-python\n! yes | pip3 uninstall opencv-contrib-python\n! yes | pip3 install opencv-python==3.4.2.17\n! yes | pip3 install opencv-contrib-python==3.4.2.17","01d216fe":"import cv2\ncv2.__version__","c185c402":"import os\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nimport torch \n\n","edbfb441":"dataroot=\"\/kaggle\/input\/2021-ai-w11-p1\/\"\ncsvpath=os.path.join(dataroot,\"Label2Names.csv\")\ndf_data=pd.read_csv(csvpath,header=None)\ndataroottrain=os.path.join(dataroot,\"train_csv_v2\")\ndataroottest=os.path.join(dataroot,\"test_csv_v2\")","31899996":"# -------------------------------------\n# \ud559\uc2b5\ub370\uc774\ud130, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 \n# -------------------------------------\nimport torch\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import DataLoader\n\nclass trainDataset(Dataset):\n    def __init__(self, dataroottrain):\n        \n        self.trainlabel=[]\n        self.trainpath=[]\n        for classname in tqdm(os.listdir(dataroottrain)):\n            ## class name to index\n            if classname ==\"BACKGROUND_Google\":\n                labelindex=102\n            else:\n                labelindex=(df_data.index[df_data[1]==classname]+1).tolist()[0]\n            \n            for csvname in os.listdir(os.path.join(dataroottrain,classname)):\n                self.trainlabel.append(labelindex-1)\n                ## \ub370\uc774\ud130 \uacbd\ub85c \uc800\uc7a5 \n                csvpath=os.path.join(dataroottrain,classname,csvname)\n                self.trainpath.append(csvpath)\n\n    def __getitem__(self, idx):\n        ## index \uc5d0 \ud574\ub2f9\ud558\ub294 label \uac12 \uacfc \uc601\uc0c1 \ub370\uc774\ud130 \ubc1b\uc544\uc624\uae30 \n        csvpath=self.trainpath[idx]\n        label=self.trainlabel[idx]\n        ## 1D \ub370\uc774\ud130\ub97c \uc601\uc0c1\uc73c\ub85c \ubcc0\ud658 \n        img=np.array(pd.read_csv(csvpath)).reshape((256,256,3))\n        img=img.transpose((2,0,1))\n        ## numpy \ub370\uc774\ud130\ub97c tensor \ud615\ud0dc\ub85c \ubcc0\ud658 \n        img=torch.from_numpy(img).float()\n        label=torch.tensor(label)\n        return img, label\n    \n    def __len__(self):\n        return len(self.trainpath)\n    \nclass testDataset(Dataset):\n    def __init__(self, dataroottest):\n\n        self.testlabel=[]\n        self.testpath=[]\n        testsort=sorted(os.listdir(dataroottest))\n        for csvname in tqdm(testsort):\n            ## \uc601\uc0c1 \uacbd\ub85c \uc800\uc7a5 \n            csvpath=os.path.join(dataroottest,csvname)\n            self.testpath.append(csvpath)\n            self.testlabel.append(csvname)\n            \n    def __getitem__(self, idx):\n        csvpath=self.testpath[idx]\n        label=self.testlabel[idx]\n        ## 1D \ub370\uc774\ud130\ub97c \uc601\uc0c1\uc73c\ub85c \ubcc0\ud658 \n        img=np.array(pd.read_csv(csvpath)).reshape((256,256,3))\n        img=img.transpose((2,0,1))\n        ## numpy \ub370\uc774\ud130\ub97c tensor \ud615\ud0dc\ub85c \ubcc0\ud658 \n        img=torch.from_numpy(img).float()\n\n        return img,label\n    \n    def __len__(self):\n        return len(self.testpath)\n\n","4955081d":"train_data = trainDataset(dataroottrain)\ntest_data = testDataset(dataroottest)\ntrain_loader = DataLoader(train_data, batch_size=16, shuffle=True, num_workers=16)\ntest_loader = DataLoader(test_data, batch_size=16, shuffle=False, num_workers=4)","20bc14a2":"# >> \ud544\uc694\ud55c \ubaa8\ub4c8 \ubd80\ubd84 (function \ubd80)"}}