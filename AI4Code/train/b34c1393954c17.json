{"cell_type":{"decd03c1":"code","7cd98901":"code","f96c01e5":"code","b8d8c48b":"code","37de9022":"code","7a918207":"code","4f900963":"code","a7e457c9":"code","b2794e74":"code","c0a4286c":"code","3825922f":"code","8f0e473c":"code","b436d81b":"code","74bb1ffc":"code","cd393ba1":"code","65f858fd":"code","6eb97436":"code","c46e0b20":"code","68452df5":"code","61de8735":"code","92bca74d":"code","4959649b":"code","406da685":"code","6708fbce":"code","012765be":"code","e6d039e9":"code","ae776c43":"code","8b2022e8":"code","a6b6da74":"code","7e4540e1":"code","eed239eb":"code","89dbf3d2":"code","74fb7759":"code","5da54d0b":"code","2fbae9aa":"code","c71516fa":"code","4b24d1d7":"code","a3ed937e":"code","6f67c074":"code","fb15b5fc":"code","d6d56193":"code","b897926e":"code","e12b6bf9":"code","5ac4cf9b":"code","7e82861b":"code","110a0333":"code","48458ccf":"code","499f5c53":"code","126bcc59":"code","0ba45394":"code","867fcb33":"code","3c4d7077":"code","733e98d2":"code","82cf326c":"code","da4c46f7":"code","2109fc53":"code","042895d0":"code","5e9f2d77":"code","3b4d04cf":"code","b02361cf":"code","4b93680a":"code","ccca6f62":"code","63cd6028":"code","09a1a5cd":"code","db9dc5e0":"code","b89738e0":"code","0b12b439":"code","664956f5":"code","9785146a":"code","9adafa1b":"code","b6f90c59":"code","180c780a":"code","ffa39b54":"code","42cf2322":"code","e616662e":"code","6542b2e6":"code","6eae9ef4":"code","a01af716":"code","9e77d0c4":"code","a695b8dc":"code","0b551436":"code","dbb3dd90":"code","3253fcd7":"code","c1c86fd0":"code","8d5b28fc":"code","9d8f3f9c":"code","1543a96d":"code","0782578c":"code","2d17fdd8":"code","073be1e0":"code","0cf9c61b":"code","f3452c38":"code","6ae672fd":"code","d9442d9b":"code","6ed4acc2":"code","f2f57b4f":"code","618b4167":"code","f3b4c78e":"code","292b7059":"code","ad4a41b1":"code","a18f2ce8":"code","78921646":"markdown"},"source":{"decd03c1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\npd.set_option('display.max_columns', 500)\npd.set_option('max_colwidth', None)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","7cd98901":"training = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","f96c01e5":"training.head()","b8d8c48b":"test.head()","37de9022":"training.groupby('Sex')[['Survived']].mean()","7a918207":"training.info()","4f900963":"training.describe()","a7e457c9":"test.info()","b2794e74":"test.describe()","c0a4286c":"training['Pclass']=training['Pclass'].apply(str)\ntest['Pclass']=test['Pclass'].apply(str)","3825922f":"\ndf_num=[i for i in training.columns if training.dtypes[i] != 'object']\ndf_cat=[f for f in training.columns if training.dtypes[f] == 'object']\ndf_num.remove('PassengerId')\ndf_num.remove('Survived')\ndf_cat.append('Survived')","8f0e473c":"#distributions for all numeric variables \nfor i in df_num:\n    plt.hist(training[i])\n    plt.title(i)\n    plt.show()","b436d81b":"print(training[df_num].corr())\nsns.heatmap(training[df_num].corr())","74bb1ffc":"pd.pivot_table(training,index='Survived',values= [i for i in training[df_num]])","cd393ba1":"for i in df_cat:\n    sns.barplot(training[i].value_counts().index,training[i].value_counts()).set_title(i)\n    plt.show()","65f858fd":"print(pd.pivot_table(training,index='Survived',values= 'Ticket',aggfunc='count',columns='Pclass'))\nprint()\nprint(pd.pivot_table(training,index='Survived',values= 'Ticket',aggfunc='count',columns='Embarked'))\nprint()\nprint(pd.pivot_table(training,index='Survived',values= 'Ticket',aggfunc='count',columns='Sex'))","6eb97436":"training.Cabin.head(50)","c46e0b20":"\ntraining['cabin_multiple']=training.Cabin.apply(lambda x: 0 if pd.isna(x) else len(x.split(' ')))\ntraining['cabin_multiple'].value_counts()","68452df5":"print(pd.pivot_table(training,index='Survived',values= 'Ticket',aggfunc='count',columns='cabin_multiple'))","61de8735":"training['cabin_alphabet'] = training.Cabin.apply(lambda x: str(x)[0])\nprint(training.cabin_alphabet.value_counts())","92bca74d":"pd.pivot_table(training,index='Survived',columns='cabin_alphabet', values = 'Name', aggfunc='count')","4959649b":"training.Ticket.head(15)","406da685":"len(training.Ticket.value_counts())","6708fbce":"training['numeric_ticket']=training.Ticket.apply(lambda x: 1 if x.isnumeric() else 0)\ntraining['alphabet_ticket']=training.Ticket.apply(lambda x: ''.join(x.split(' ')[:-1]).replace('.','').replace('\/','').lower() if len(x.split(' ')[:-1])>0 else 0) ","012765be":"training['numeric_ticket'].value_counts()","e6d039e9":"pd.set_option('max_rows',None)\ntraining['alphabet_ticket'].value_counts()","ae776c43":"pd.pivot_table(training,index='Survived',columns='numeric_ticket', values = 'Ticket', aggfunc='count')","8b2022e8":"pd.pivot_table(training,index='Survived',columns='alphabet_ticket',aggfunc='count',values='Ticket')","a6b6da74":"training.Name.head(15)","7e4540e1":"training['name_title']=training.Name.apply(lambda x: x.split(',')[1].split('.')[0].strip())","eed239eb":"training['name_title'].value_counts()","89dbf3d2":"\ntrain['train_test'] = 1\ntest['train_test'] = 0\ny_train=train['Survived']\ntrain=train.drop(['Survived'],axis=1)\nall_data = pd.concat([train,test])\nall_data=all_data.drop(['PassengerId'],axis=1)\n%matplotlib inline\nall_data.columns","74fb7759":"all_data.describe()","5da54d0b":"all_data.info()","2fbae9aa":"len(all_data)","c71516fa":"nan=pd.DataFrame(all_data.isna().sum(),columns=['Nan_sum'])\nnan['feat']=nan.index\nnan=nan[nan['Nan_sum']>0]\nnan['Percentage of total data']=(nan['Nan_sum']\/1309)*100\nnan=nan.sort_values(by=['Nan_sum'])\nnan.insert(0,'Serial No.',range(1,len(nan)+1))\nnan","4b24d1d7":"train.Embarked.mode()","a3ed937e":"all_data['cabin_multiple']=all_data.Cabin.apply(lambda x: 0 if pd.isna(x) else len(x.split(' ')))\nall_data['cabin_alphabet'] = all_data.Cabin.apply(lambda x: str(x)[0])\nall_data['name_title']= all_data.Name.apply(lambda x: x.split(',')[1].split('.')[0].strip())\nall_data.Age=all_data.Age.fillna(train.Age.median())\nall_data.Fare=all_data.Fare.fillna(train.Fare.median())\nall_data.Embarked=all_data.Embarked.fillna('S')\n","6f67c074":"all_data['Family_Size']=all_data['SibSp']+all_data['Parch']","fb15b5fc":"\nall_data.Pclass=all_data.Pclass.astype(str)\nall_data['Age']=all_data['Age'].apply(np.int64)\nall_dummies = pd.get_dummies(all_data[['Pclass','name_title','Sex','Age','SibSp','Parch','Fare',\n                                       'Embarked','cabin_multiple','cabin_alphabet','Family_Size','train_test']])\nX_train = all_dummies[all_dummies.train_test == 1].drop(['train_test'], axis =1)\nX_test = all_dummies[all_dummies.train_test == 0].drop(['train_test'], axis =1)\n","d6d56193":"from scipy.stats import skew\nnumeric_features = all_dummies.dtypes[all_dummies.dtypes != object].index\nskewed_features = all_dummies[numeric_features].apply(lambda x: skew(x)).sort_values(ascending=False)\nhigh_skew = skewed_features[skewed_features > 0.5]\nskew_index = high_skew.index","b897926e":"skew_index","e12b6bf9":"for i in skew_index:\n    all_dummies[i] = np.log1p(all_dummies[i] )","5ac4cf9b":"from scipy import stats\nfor i in skew_index:\n    shap = stats.shapiro(all_dummies[i])\n    print(i)\n    print('Skewness : %f' % abs(all_dummies[i]).skew())\n    print('Kurtosis : %f' % abs(all_dummies[i]).kurt())\n    print('')","7e82861b":"X_train.head()","110a0333":"all_dummies.head()","48458ccf":"# Scale data \nfrom sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\nall_dummies_scaled = all_dummies.copy()\nall_dummies_scaled[['Age','SibSp','Parch','Fare','Family_Size']]= scale.fit_transform(all_dummies_scaled[['Age','SibSp','Parch','Fare','Family_Size']])\nall_dummies_scaled.head()","499f5c53":"\nX_train_scaled = all_dummies_scaled[all_dummies_scaled.train_test == 1].drop(['train_test'], axis =1)\nX_test_scaled = all_dummies_scaled[all_dummies_scaled.train_test == 0].drop(['train_test'], axis =1)\n\nlen(y_train)","126bcc59":"len(X_train_scaled.columns)","0ba45394":"len(X_test_scaled.columns)","867fcb33":"y_train.dtype","3c4d7077":"y_train=y_train.apply(int)\ny_train.dtype","733e98d2":"nan=pd.DataFrame(X_train_scaled.isna().sum(),columns=['Nan_sum'])\nnan['feat']=nan.index\nnan=nan[nan['Nan_sum']>0]\nnan['Percentage of total data']=(nan['Nan_sum']\/891)*100\nnan=nan.sort_values(by=['Nan_sum'])\nnan.insert(0,'Serial No.',range(1,len(nan)+1))\nnan","82cf326c":"nan=pd.DataFrame(X_test_scaled.isna().sum(),columns=['Nan_sum'])\nnan['feat']=nan.index\nnan=nan[nan['Nan_sum']>0]\nnan['Percentage of total data']=(nan['Nan_sum']\/418)*100\nnan=nan.sort_values(by=['Nan_sum'])\nnan.insert(0,'Serial No.',range(1,len(nan)+1))\nnan","da4c46f7":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\nfrom catboost import CatBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import KFold","2109fc53":"kf = KFold(n_splits=6, random_state=42, shuffle=True)\ncv_scores = []\ncv_mean = []\n\nbaseline_models = ['Logistic_Reg.','Random_Forest_Reg.', 'XGB.','KNN.','SVC','Cat_Boost.']","042895d0":"lr = LogisticRegression(max_iter = 2000)\ncv = cross_val_score(lr,X_train_scaled,y_train,cv=5)\nprint(cv)\ncv_scores.append(cv.max())\ncv_mean.append(cv.mean())","5e9f2d77":"rf = RandomForestClassifier(random_state = 1)\ncv = cross_val_score(rf,X_train_scaled,y_train,cv=5)\nprint(cv)\ncv_scores.append(cv.max())\ncv_mean.append(cv.mean())","3b4d04cf":"xgb = XGBClassifier(random_state =1)\ncv = cross_val_score(xgb,X_train_scaled,y_train,cv=5)\nprint(cv)\ncv_scores.append(cv.max())\ncv_mean.append(cv.mean())","b02361cf":"knn = KNeighborsClassifier()\ncv = cross_val_score(knn,X_train_scaled,y_train,cv=5)\ncv_scores.append(cv.max())\ncv_mean.append(cv.mean())","4b93680a":"svc = SVC(probability = True)\ncv = cross_val_score(svc,X_train_scaled,y_train,cv=5)\nprint(cv)\ncv_scores.append(cv.max())\ncv_mean.append(cv.mean())","ccca6f62":"# Cat Boost \n\ncat = CatBoostClassifier()\ncv = cross_val_score(cat,X_train_scaled,y_train,cv=5)\ncv_scores.append(cv.max())\ncv_mean.append(cv.mean())","63cd6028":"final_cv_score = pd.DataFrame(baseline_models, columns = ['Classifiers'])\nfinal_cv_score['CV_max'] = cv_scores\nfinal_cv_score['CV_mean'] = cv_mean","09a1a5cd":"final_cv_score","db9dc5e0":"plt.figure(figsize = (12,8))\nsns.barplot(final_cv_score['Classifiers'],final_cv_score['CV_mean'])\nplt.xlabel('Classifiers', fontsize = 12)\nplt.ylabel('CV_Mean', fontsize = 12)\nplt.xticks(rotation=40)\nplt.show()","b89738e0":"cat.fit(X_train_scaled,y_train)","0b12b439":"feat_imp = cat.get_feature_importance(prettified=True)\nfeat_imp.head()","664956f5":"# Plotting top 30 features' importance\n\nplt.figure(figsize = (12,8))\nsns.barplot(feat_imp['Importances'][:40],feat_imp['Feature Id'][:30], orient = 'h')\nplt.show()","9785146a":"y_hat_base_vc = cat.predict(X_test_scaled).astype(int)\nbasic_submission = {'PassengerId': test.PassengerId, 'Survived': y_hat_base_vc}\nbase_submission = pd.DataFrame(data=basic_submission)\nbase_submission.to_csv('cat_submission.csv', index=False)","9adafa1b":"kf = KFold(n_splits=9, random_state=42, shuffle=True)\ncv_scores = []\ncv_mean = []\n\nbaseline_models = ['SoftVoting.','HardVoting', 'XGB_CAT.','CAT_SVC.','CAT_KNN','Knn_SVC.','LR_Cat','LR_SVC','Lr_XGB']","b6f90c59":"from sklearn.ensemble import VotingClassifier\nvoting_clf = VotingClassifier(estimators = [('cat',cat),('svc',svc),('xgb',xgb),('knn',knn)], voting = 'soft') ","180c780a":"cv = cross_val_score(voting_clf,X_train_scaled,y_train,cv=5)\n","ffa39b54":"print(cv)\ncv_scores.append(cv.max())\ncv_mean.append(cv.mean())","42cf2322":"voting_clf.fit(X_train_scaled,y_train)\ny_hat_base_vc = voting_clf.predict(X_test_scaled).astype(int)\nbasic_submission = {'PassengerId': test.PassengerId, 'Survived': y_hat_base_vc}\nbase_submission = pd.DataFrame(data=basic_submission)\nbase_submission.to_csv('softvoting_submission.csv', index=False)","e616662e":"voting_clf = VotingClassifier(estimators = [('cat',cat),('svc',svc),('xgb',xgb),('knn',knn)], voting = 'hard') \ncv = cross_val_score(voting_clf,X_train_scaled,y_train,cv=5)","6542b2e6":"print(cv)\ncv_scores.append(cv.max())\ncv_mean.append(cv.mean())","6eae9ef4":"voting_clf.fit(X_train_scaled,y_train)\ny_hat_base_vc = voting_clf.predict(X_test_scaled).astype(int)\nbasic_submission = {'PassengerId': test.PassengerId, 'Survived': y_hat_base_vc}\nbase_submission = pd.DataFrame(data=basic_submission)\nbase_submission.to_csv('hardvoting_submission.csv', index=False)","a01af716":"voting_clf = VotingClassifier(estimators = [('cat',cat),('xgb',xgb)], voting = 'hard') \ncv = cross_val_score(voting_clf,X_train_scaled,y_train,cv=5)","9e77d0c4":"print(cv)\ncv_scores.append(cv.max())\ncv_mean.append(cv.mean())","a695b8dc":"\nvoting_clf.fit(X_train_scaled,y_train)\ny_hat_base_vc = voting_clf.predict(X_test_scaled).astype(int)\nbasic_submission = {'PassengerId': test.PassengerId, 'Survived': y_hat_base_vc}\nbase_submission = pd.DataFrame(data=basic_submission)\nbase_submission.to_csv('hardvoting_cat_xgb_submission.csv', index=False)","0b551436":"voting_clf = VotingClassifier(estimators = [('cat',cat),('svc',svc)], voting = 'hard') \ncv = cross_val_score(voting_clf,X_train_scaled,y_train,cv=5)","dbb3dd90":"print(cv)\ncv_scores.append(cv.max())\ncv_mean.append(cv.mean())","3253fcd7":"\nvoting_clf.fit(X_train_scaled,y_train)\ny_hat_base_vc = voting_clf.predict(X_test_scaled).astype(int)\nbasic_submission = {'PassengerId': test.PassengerId, 'Survived': y_hat_base_vc}\nbase_submission = pd.DataFrame(data=basic_submission)\nbase_submission.to_csv('hardvoting_cat_svc_submission.csv', index=False)","c1c86fd0":"voting_clf = VotingClassifier(estimators = [('knn',knn),('cat',cat)], voting = 'hard')\ncv = cross_val_score(voting_clf,X_train_scaled,y_train,cv=5)","8d5b28fc":"print(cv)\ncv_scores.append(cv.max())\ncv_mean.append(cv.mean())","9d8f3f9c":"voting_clf.fit(X_train_scaled,y_train)\ny_hat_base_vc = voting_clf.predict(X_test_scaled).astype(int)\nbasic_submission = {'PassengerId': test.PassengerId, 'Survived': y_hat_base_vc}\nbase_submission = pd.DataFrame(data=basic_submission)\nbase_submission.to_csv('hardvoting_knn_cat_submission.csv', index=False)","1543a96d":"voting_clf = VotingClassifier(estimators = [('knn',knn),('svc',svc)], voting = 'hard')\ncv = cross_val_score(voting_clf,X_train_scaled,y_train,cv=5)","0782578c":"print(cv)\ncv_scores.append(cv.max())\ncv_mean.append(cv.mean())","2d17fdd8":"voting_clf.fit(X_train_scaled,y_train)\ny_hat_base_vc = voting_clf.predict(X_test_scaled).astype(int)\nbasic_submission = {'PassengerId': test.PassengerId, 'Survived': y_hat_base_vc}\nbase_submission = pd.DataFrame(data=basic_submission)\nbase_submission.to_csv('hardvoting_knn_svc_submission.csv', index=False)","073be1e0":"voting_clf = VotingClassifier(estimators = [('LR',lr),('cat',cat)], voting = 'hard')\ncv = cross_val_score(voting_clf,X_train_scaled,y_train,cv=5)","0cf9c61b":"print(cv)\ncv_scores.append(cv.max())\ncv_mean.append(cv.mean())","f3452c38":"voting_clf.fit(X_train_scaled,y_train)\ny_hat_base_vc = voting_clf.predict(X_test_scaled).astype(int)\nbasic_submission = {'PassengerId': test.PassengerId, 'Survived': y_hat_base_vc}\nbase_submission = pd.DataFrame(data=basic_submission)\nbase_submission.to_csv('hardvoting_lr_cat_submission.csv', index=False)","6ae672fd":"voting_clf = VotingClassifier(estimators = [('LR',lr),('SVC',svc)], voting = 'hard')\ncv = cross_val_score(voting_clf,X_train_scaled,y_train,cv=5)","d9442d9b":"print(cv)\ncv_scores.append(cv.max())\ncv_mean.append(cv.mean())","6ed4acc2":"voting_clf.fit(X_train_scaled,y_train)\ny_hat_base_vc = voting_clf.predict(X_test_scaled).astype(int)\nbasic_submission = {'PassengerId': test.PassengerId, 'Survived': y_hat_base_vc}\nbase_submission = pd.DataFrame(data=basic_submission)\nbase_submission.to_csv('hardvoting_lr_svc_submission.csv', index=False)","f2f57b4f":"voting_clf = VotingClassifier(estimators = [('LR',lr),('xgb',xgb)], voting = 'hard')\ncv = cross_val_score(voting_clf,X_train_scaled,y_train,cv=5)","618b4167":"print(cv)\ncv_scores.append(cv.max())\ncv_mean.append(cv.mean())","f3b4c78e":"voting_clf.fit(X_train_scaled,y_train)\ny_hat_base_vc = voting_clf.predict(X_test_scaled).astype(int)\nbasic_submission = {'PassengerId': test.PassengerId, 'Survived': y_hat_base_vc}\nbase_submission = pd.DataFrame(data=basic_submission)\nbase_submission.to_csv('hardvoting_lr_xgb_submission.csv', index=False)","292b7059":"final_cv_score = pd.DataFrame(baseline_models, columns = ['Classifiers'])\nfinal_cv_score['CV_max'] = cv_scores\nfinal_cv_score['CV_mean'] = cv_mean","ad4a41b1":"final_cv_score","a18f2ce8":"plt.figure(figsize = (12,8))\nsns.barplot(final_cv_score['Classifiers'],final_cv_score['CV_mean'])\nplt.xlabel('Classifiers', fontsize = 12)\nplt.ylabel('CV_Mean', fontsize = 12)\nplt.xticks(rotation=40)\nplt.show()","78921646":"As Pclass is showing us the class of passengers we are going to convert it into String so it can be considered as categorical data"}}