{"cell_type":{"b8236552":"code","7741140c":"code","5518d0cc":"code","27c6e180":"code","c330b440":"code","e7e598db":"code","9b4849a3":"code","cbc32288":"code","ac60b8ee":"code","6b4c6054":"code","eb817294":"code","ea8d46e6":"code","45c673e5":"markdown","29b924cb":"markdown","8b636f38":"markdown","aac31327":"markdown","ba296512":"markdown","cb3560db":"markdown","68d70e23":"markdown","d550ad98":"markdown","f318a186":"markdown","c0878586":"markdown"},"source":{"b8236552":"import numpy as np \nimport pandas as pd \n\nfrom sklearn import ensemble\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_validate,GridSearchCV","7741140c":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","5518d0cc":"#1. delete unnecessary columns\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\n#2.find null data and fill new data \ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n#3.one hot encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","27c6e180":"train.info()","c330b440":"y = train['Survived']\nX = train.drop(['Survived'], axis=1)\nX_test = test","e7e598db":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(  X, y, test_size=0.25, random_state=42)","9b4849a3":"parameters = {'base_estimator__max_depth':[i for i in range(2,11,2)],\n              'base_estimator__min_samples_leaf':[5,10],\n              'n_estimators':[10,50,250,1000],\n              'learning_rate':[0.01,0.1]}","cbc32288":"adb_est = ensemble.AdaBoostClassifier(base_estimator=DecisionTreeClassifier())\n\ngr_adb_est = GridSearchCV(adb_est, parameters,cv=5,verbose=3,scoring='roc_auc',n_jobs=-1)\ngr_adb_est.fit(X_train,y_train)","ac60b8ee":"gr_adb_est.fit(X_train, y_train)","6b4c6054":"y_pred = gr_adb_est.best_estimator_.predict(X_val)\nprint(accuracy_score(y_val, y_pred))","eb817294":"pred_test = gr_adb_est.best_estimator_.predict(X_test)","ea8d46e6":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = (pred_test > 0.5).astype(int)\nsubmission.to_csv('sub.csv', index=False)\nsubmission.head()","45c673e5":"# submit predicted data","29b924cb":"# use model ( predict test set)","8b636f38":"# evaluate model (predict validation set) ","aac31327":"# preprocess","ba296512":"# Search List","cb3560db":"# import libraries","68d70e23":"# split data (train set \/ validation set)","d550ad98":"# build model (AdaBoost GridSearchCV)","f318a186":"# split data( input data \/ label data)","c0878586":"# load data"}}