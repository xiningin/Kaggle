{"cell_type":{"f2cf5785":"code","8e9e2a3b":"code","a423ea76":"code","763c5b37":"code","6e33be23":"code","0ea7922e":"code","623df884":"code","ba6dc44d":"code","3c3998bf":"code","c15ec8b7":"code","73ba3389":"code","fe56f8c1":"code","879bbae7":"code","c8a14979":"code","a487004d":"code","ee2bd023":"code","33dc6a47":"code","d39d573a":"markdown","e8d2d4eb":"markdown","c9f29ad1":"markdown","14a9c23e":"markdown","30b1fa95":"markdown","809bcb4c":"markdown","f5327b30":"markdown","e2a96ba0":"markdown","4d2ff807":"markdown","96a76a45":"markdown","52dbec71":"markdown","80179d23":"markdown","e630f512":"markdown","b7512565":"markdown","90aba440":"markdown","5e6ee2eb":"markdown","94297423":"markdown"},"source":{"f2cf5785":"import cv2\nimport numpy as np\nfrom scipy import misc\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline","8e9e2a3b":"image = misc.ascent()\nplt.imshow(image, cmap='gray')\nplt.axis('off')\nplt.show()","a423ea76":"image","763c5b37":"image.shape","6e33be23":"new_image = np.copy(image)\nnew_image.shape","0ea7922e":"x = new_image.shape[0]\ny = new_image.shape[1]","623df884":"vertical_filter = [[1, 0, -1],[1, 0, -1], [1, 0,-1]]\nhorizontal_filter = [[1, 1, 1],[0, 0, 0],[-1, -1, -1]]\nsobel_filter = [[1, 0, -1],[2, 0, -2], [1, 0, -1]]","ba6dc44d":"filters = [vertical_filter, horizontal_filter, sobel_filter]","3c3998bf":"filter = filters[0]\nweight  = 1\n\nfor i in range(1, x-1):\n    for j in range(1, y-1):\n        conv = 0.0\n        conv = conv + image[i-1, j-1]*filter[0][0]\n        conv = conv + image[i-1, j]*filter[0][1]\n        conv = conv + image[i-1, j+1]*filter[0][2]\n        conv = conv + image[i, j-1]*filter[1][0]        \n        conv = conv + image[i, j]*filter[1][1]\n        conv = conv + image[i, j+1]*filter[1][2]\n        conv = conv + image[i+1, j-1]*filter[2][0]        \n        conv = conv + image[i+1, j]*filter[2][1]\n        conv = conv + image[i+1, j|+1]*filter[2][2]\n        conv = conv* weight\n        if(conv < 0):\n            conv = 0\n        if(conv > 255):\n            conv = 255\n        new_image[i, j] = conv","c15ec8b7":"plt.figure(figsize=(8,8))\nplt.imshow(new_image, cmap='gray')\nplt.show()","73ba3389":"filter = filters[1]\nweight  = 1\n\nfor i in range(1, x-1):\n    for j in range(1, y-1):\n        conv = 0.0\n        conv = conv + image[i-1, j-1]*filter[0][0]\n        conv = conv + image[i-1, j]*filter[0][1]\n        conv = conv + image[i-1, j+1]*filter[0][2]\n        conv = conv + image[i, j-1]*filter[1][0]        \n        conv = conv + image[i, j]*filter[1][1]\n        conv = conv + image[i, j+1]*filter[1][2]\n        conv = conv + image[i+1, j-1]*filter[2][0]        \n        conv = conv + image[i+1, j]*filter[2][1]\n        conv = conv + image[i+1, j|+1]*filter[2][2]\n        conv = conv* weight\n        if(conv < 0):\n            conv = 0\n        if(conv > 255):\n            conv = 255\n        new_image[i, j] = conv\n\nplt.figure(figsize=(8,8))\nplt.imshow(new_image, cmap='gray')\nplt.show()","fe56f8c1":"filter = filters[2]\nweight  = 1\n\nfor i in range(1, x-1):\n    for j in range(1, y-1):\n        conv = 0.0\n        conv = conv + image[i-1, j-1]*filter[0][0]\n        conv = conv + image[i-1, j]*filter[0][1]\n        conv = conv + image[i-1, j+1]*filter[0][2]\n        conv = conv + image[i, j-1]*filter[1][0]        \n        conv = conv + image[i, j]*filter[1][1]\n        conv = conv + image[i, j+1]*filter[1][2]\n        conv = conv + image[i+1, j-1]*filter[2][0]        \n        conv = conv + image[i+1, j]*filter[2][1]\n        conv = conv + image[i+1, j|+1]*filter[2][2]\n        conv = conv* weight\n        if(conv < 0):\n            conv = 0\n        if(conv > 255):\n            conv = 255\n        new_image[i, j] = conv\n\nplt.figure(figsize=(8,8))\nplt.imshow(new_image, cmap='gray')\nplt.show()","879bbae7":"pool_type = 'max'\n\nnew_x = int(x\/2)\nnew_y = int(y\/2)\n\npool_image = np.zeros((new_x, new_y))\n\nfor i in range(0, x, 2):\n    for j in range(0, y, 2):\n        pixels = []\n        # add the 4 pixels to find the max among them\n        pixels.append(new_image[i, j])\n        pixels.append(new_image[i, j+1])        \n        pixels.append(new_image[i+1, j])        \n        pixels.append(new_image[i+1, j+1])\n        \n        if pool_type=='max':\n            pool_image[int(i\/2), int (j\/2)] = max(pixels)\n        else:\n            pool_image[int(i\/2), int (j\/2)] = np.mean(pixels)","c8a14979":"pool_image.shape","a487004d":"plt.figure(figsize=(8,8))\nplt.imshow(pool_image, cmap='gray')\nplt.show()","ee2bd023":"pool_type = 'avg'\n\nnew_x = int(x\/2)\nnew_y = int(y\/2)\n\npool_image = np.zeros((new_x, new_y))\n\nfor i in range(0, x, 2):\n    for j in range(0, y, 2):\n        pixels = []\n        # add the 4 pixels to find the max among them\n        pixels.append(new_image[i, j])\n        pixels.append(new_image[i, j+1])        \n        pixels.append(new_image[i+1, j])        \n        pixels.append(new_image[i+1, j+1])\n        \n        if pool_type=='max':\n            pool_image[int(i\/2), int (j\/2)] = max(pixels)\n        else:\n            pool_image[int(i\/2), int (j\/2)] = np.mean(pixels)","33dc6a47":"plt.figure(figsize=(8,8))\nplt.imshow(pool_image, cmap='gray')\nplt.show()","d39d573a":"You can clearly see that all the features are maintained\/enhanced while the size of the image being reduced by half","e8d2d4eb":"<img src=\"https:\/\/nico-curti.github.io\/NumPyNet\/NumPyNet\/images\/maxpool.gif\">\n","c9f29ad1":"## Horizontal edges detected","14a9c23e":"The image is just a 2-D array of shape 512x512 with numbers between 0-255","30b1fa95":"<img src=\"https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/20190721030705\/Screenshot-2019-07-21-at-3.05.56-AM.png\">","809bcb4c":"## Max pooling","f5327b30":"## Sobel filter for enhanced vertical edge detection","e2a96ba0":"# Visualizing Pooling\npooling helps us to reduce the size of the image while keeping the features intact","4d2ff807":"### Size changed from 512 x 512 to 256 x 256, keeping the features intact","96a76a45":"## Vertical edges detected","52dbec71":"<img src=\"https:\/\/media0.giphy.com\/media\/i4NjAwytgIRDW\/giphy.gif?cid=ecf05e4735uqcor3cvwi5mqnkedf1zt10adlovu6alw3hygu&rid=giphy.gif&ct=g\">","80179d23":"## Create a copy of the image","e630f512":"## Read a 512 x 512 image from misc in scipy","b7512565":"# Exploring convolutions and pooling","90aba440":"# Create some filters\nfeel free to try your own filters","5e6ee2eb":"## Average Pooling","94297423":"# Create the convolutions"}}