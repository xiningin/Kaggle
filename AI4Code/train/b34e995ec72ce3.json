{"cell_type":{"69bb72af":"code","628e13de":"code","fa946825":"code","e5789488":"code","79b231bb":"code","4d4803d5":"code","46682bca":"code","cbef437a":"code","c00d271d":"code","7c546943":"code","850554ed":"code","8ce0f658":"code","f957ea4b":"code","46454adb":"code","1426a8d6":"code","a8fa44a1":"code","4dd44769":"code","5648149d":"code","ddfe961a":"code","a89d1fb3":"code","bcee2827":"code","9c422c20":"code","9e98b0b5":"code","12ff3646":"code","f64990ef":"code","04c4d512":"code","ec0b29ab":"code","2208b798":"code","edb74747":"code","2fa86078":"code","59602b7e":"code","4e832719":"code","99230f7d":"code","6ec693ff":"code","f48110ea":"markdown","6ee396cc":"markdown","37276698":"markdown","19cf6c05":"markdown","eef76494":"markdown","adaac979":"markdown","82bc706e":"markdown","7c6b3c72":"markdown"},"source":{"69bb72af":"# Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Handle table-like data and matrices\nimport numpy as np\nimport pandas as pd\nimport math \n# Modelling Algorithms\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier , GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Modelling Helpers\nfrom sklearn.preprocessing import Imputer , Normalizer , scale\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import RFECV\nimport datetime as dt\n\n# Visualisation\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\nimport seaborn as sns\nimport keras\nfrom keras import backend as K\n\n# Configure visualisations\n%matplotlib inline\nmpl.style.use( 'ggplot' )\nsns.set_style( 'white' )\npylab.rcParams[ 'figure.figsize' ] = 8 , 6\nfrom random import randint","628e13de":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","fa946825":"df = train.copy()","e5789488":"df.head()","79b231bb":"print(df.shape , test.shape)","4d4803d5":"df.columns","46682bca":"y = df.label.values.astype('int32')\ndf = df[df.columns[1:]].values.astype('float32')\n\nX_train , X_test , y_train , y_test = train_test_split(df , y , test_size = 0.2 , random_state = 100)","cbef437a":"print ( X_train.shape , y_train.shape)","c00d271d":"test = test.values.astype('float32')","7c546943":"X_train = X_train.reshape( -1 , 28 , 28 , 1)\nX_test = X_test.reshape( -1 , 28 , 28 , 1)\ntest = test.reshape( -1 , 28 , 28 , 1)","850554ed":"X_train.shape","8ce0f658":"new = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","f957ea4b":"new.describe()","46454adb":"label_counter = new.label.value_counts()\nprint (label_counter)","1426a8d6":"plt.subplots(figsize = (8,5))\nplt.title('Count of different digits as labeled in the datset')\nsns.countplot(x=new.label , data=new)\nplt.show()","a8fa44a1":"X_train = X_train \/ 255\nX_test = X_test \/ 255\ntest = test \/ 255","4dd44769":"y_train = keras.utils.to_categorical(y_train, 10)\ny_test = keras.utils.to_categorical(y_test, 10)  #  10 is used because we have to classify images in 10 groups","5648149d":"from keras.models import Sequential, load_model\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","ddfe961a":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), activation='relu', padding='same',input_shape=(28 , 28 , 1)))\nmodel.add(Conv2D(32, (3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(64, (3, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(64, (3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(100, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10, activation='softmax'))      #  10 is used because we have to classify images in 10 groups","a89d1fb3":"print (model.summary())","bcee2827":"model.compile(optimizer = RMSprop(lr=0.001),loss='categorical_crossentropy', metrics=['accuracy'])","9c422c20":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.0, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","9e98b0b5":"batch_size = 64\nepochs = 10\nlr_reduce = ReduceLROnPlateau(monitor='val_acc', factor=0.1, epsilon=0.0001, patience=1, verbose=1)","12ff3646":"model.fit_generator(datagen.flow(X_train, y_train, batch_size=batch_size),\n                    steps_per_epoch=X_train.shape[0] \/\/ batch_size,\n                    callbacks=[lr_reduce],\n                    validation_data=(X_test, y_test),\n                    epochs = epochs, verbose = 2)","f64990ef":"score = model.evaluate(X_test, y_test, verbose=0)\nprint('valid loss:', score[0])\nprint('valid accuracy:', score[1])","04c4d512":"pred = model.predict(test)","ec0b29ab":"pred.shape","2208b798":"pred","edb74747":"pred_digits = np.argmax(pred , axis = 1)\nImageId = range( 1 , len(pred_digits)+1 )","2fa86078":"pred_digits","59602b7e":"len(ImageId)","4e832719":"context = {\"ImageId\" : ImageId , \"Label\" : pred_digits }\nans = pd.DataFrame(context)","99230f7d":"ans.head()","6ec693ff":"ans.to_csv(\"Predictions by CNN.csv\", index=None)","f48110ea":"**MNIST digit recognition using CNN with Keras**","6ee396cc":"Now we have 33,600 images with dimensions of 28 x 28 x 1 in X_train .","37276698":"\nConverting y_train and y_test into one hot encoder , eg. 3--> [0,0,0,1,0,0,0,0,0,0]","19cf6c05":"Making the model with convolutional layers , maxpool layers and dropout layers to enhance regularization and generalization with further avoidance to overfitting .","eef76494":"pred_digits contains the predicted labels of the digits .\nargmax(axis = 1) is converting the one hot encoder back to the labels along the row axis .","adaac979":"**# Normalizing**","82bc706e":"ans is the predicted dataframe by CNN","7c6b3c72":"Converting the dataframe to csv file"}}