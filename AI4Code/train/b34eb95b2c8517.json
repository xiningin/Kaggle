{"cell_type":{"a0aab4cc":"code","8aff5200":"code","7b952ed3":"code","ff0a3732":"code","bb515108":"code","2e9209d5":"code","4c9a49cc":"code","3f5d1a30":"code","5e535e50":"code","0572a135":"code","9ff14dc0":"code","cebfabf2":"code","54aa0241":"code","92b7d2c8":"code","c5d2b9f6":"code","f2778809":"code","9b2dbd25":"code","d65c99ee":"code","1db1ba8d":"code","05639c93":"code","bfeee23d":"code","f8671e16":"code","64dba5c1":"code","1e54be13":"code","6926c0e9":"code","dfe69ba3":"code","5901680c":"code","72fd9d97":"code","de936b76":"markdown","692520f7":"markdown","64a332e0":"markdown","5ed3df91":"markdown","a08d61b2":"markdown","a6e36fae":"markdown","23aeb521":"markdown"},"source":{"a0aab4cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n'''\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n'''\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8aff5200":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nimport tensorflow as keras\nfrom keras_preprocessing.image import ImageDataGenerator\nimport os\nfrom tensorflow.keras.optimizers import Adam, RMSprop","7b952ed3":"path = '..\/input\/insects-recognition'","ff0a3732":"batch_size = 100\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255, validation_split=0.2,\n                                   rotation_range=40, horizontal_flip=True,\n                                   fill_mode='nearest')\n\ntrain_gen = train_datagen.flow_from_directory(path, target_size=(150,150),\n                    class_mode='categorical', batch_size=batch_size, \n                                              subset='training')\n\nval_gen = train_datagen.flow_from_directory(path, target_size=(150,150),\n                class_mode='categorical', batch_size=batch_size,\n                                            subset='validation')","bb515108":"labels = ['Butterfly', 'Dragonfly', 'Grasshopper', 'Ladybird', 'Mosquito']\nn_classes = len(labels)\nfor i in range(15):\n    if i%5==0:\n        fig, ax = plt.subplots(ncols=5, figsize=(15,15))\n    img, lbl = train_gen.next()\n    ax[i%5].imshow(img[2])\n    ax[i%5].set_title(labels[np.argmax(lbl[2])])\n    ax[i%5].grid(False)\n    ax[i%5].axis(False)","2e9209d5":"model = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu',\n                input_shape=(150, 150, 3), padding='same'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.3),\n    \n    \n    tf.keras.layers.Conv2D(64, (3,3), activation='relu',\n                input_shape=(150, 150, 3), padding='same'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.3),\n    \n    tf.keras.layers.Conv2D(128, (3,3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.3),\n    \n    tf.keras.layers.Conv2D(256, (3,3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.3),\n    \n    tf.keras.layers.Conv2D(512, (3,3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.3),\n        \n    tf.keras.layers.Conv2D(512, (3,3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.3),\n    \n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(1024, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    \n    tf.keras.layers.Dense(n_classes, activation='softmax')     \n])\n\n\"\"\"\n#Original - \nmodel.compile(loss = 'categorical_crossentropy', optimizer='adam', \n              metrics=['accuracy'])\n\"\"\"\n#secundario\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=RMSprop(),\n              metrics=['accuracy'])","4c9a49cc":"model.summary()","3f5d1a30":"steps, val_steps = train_gen.n\/batch_size, val_gen.n\/batch_size\nnum_epochs = 100","5e535e50":"#Guardar o melhor modelo  \ncallbacks_list = [\n    tf.keras.callbacks.ModelCheckpoint(\n        filepath='model.h5',\n        monitor='val_loss', save_best_only=True, verbose=1),\n    tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10,verbose=1)\n]","0572a135":"history = model.fit(train_gen, \n                    validation_data=val_gen,\n                    epochs=num_epochs,\n                    steps_per_epoch=steps, \n                    validation_steps=val_steps,\n                   callbacks = callbacks_list\n                   )","9ff14dc0":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\n\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Training and validation accuracy')\nplt.legend(loc=4)\nplt.grid(axis='both')\n\nplt.show() ","cebfabf2":"# Using the validation dataset\nscore = model.evaluate_generator(val_gen)\nprint('Val loss:', score[0])\nprint('Val accuracy:', score[1])","54aa0241":"\"\"\"\n# Vendo alguns reports\n# Usando sklearn\n\n# Classificando toda base de teste\ny_pred = model.predict_classes(x_val)\n# voltando pro formato de classes\nimport numpy as np\ny_test_c = np.argmax(y_val, axis=1)\n\nprint('Confusion Matrix')\nprint(confusion_matrix(y_test_c, y_pred))\nprint('Classification Report')\ntarget_names = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nprint(classification_report(y_test_c, y_pred, target_names=target_names))\"\"\"","92b7d2c8":"# General Libs\nfrom tensorflow import keras\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\n#from tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3,preprocess_input\nfrom tensorflow.keras.applications.inception_resnet_v2 import InceptionResNetV2, preprocess_input\nfrom tensorflow.keras.layers import Dense, Flatten,Dropout\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam, RMSprop\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\n%matplotlib inline","c5d2b9f6":"\n'''\ntrain_datagen = ImageDataGenerator(rescale=1.\/255, validation_split=0.4,\n                                   rotation_range=40, horizontal_flip=True,\n                                   fill_mode='nearest')\n\ntrain_gen = train_datagen.flow_from_directory(path, target_size=(150,150),\n                    class_mode='categorical', batch_size=batch_size, \n                                              subset='training')\n\nval_gen = train_datagen.flow_from_directory(path, target_size=(150,150),\n                class_mode='categorical', batch_size=batch_size,\n                                            subset='validation')\n\n\n\n# Alguns par\u00e2metros para leitura do dataset\nim_shape = (299,299)\n\nTRAINING_DIR = '..\/input\/amazon-fruits-small\/ds_frutas_am\/train'\nTEST_DIR = '..\/input\/amazon-fruits-small\/ds_frutas_am\/test'\n\nseed = 10\n\n#BATCH_SIZE = 16\n'''\n","f2778809":"path = '..\/input\/insects-recognition'\nteste = '..\/input\/imgteste'\n\nBATCH_SIZE = 100\nim_shape = (150,150)\nseed = 10","9b2dbd25":"#Using keras ImageGenerator and flow_from_directoty\n\n# Image dataset without augmentation\n#data_generator = ImageDataGenerator(preprocessing_function=preprocess_input, validation_split=0.2)\n# With augmentation\ndata_generator = ImageDataGenerator(\n        validation_split=0.2,\n        rotation_range=40,\n        #width_shift_range=0.2,\n        #height_shift_range=0.2,\n        preprocessing_function=preprocess_input,\n        #shear_range=0.2,\n        #zoom_range=0.2,\n        horizontal_flip=True,\n        fill_mode='nearest')\nval_data_generator = ImageDataGenerator(preprocessing_function=preprocess_input,validation_split=0.2)","d65c99ee":"# Generator para parte train\ntrain_generator = data_generator.flow_from_directory(path, target_size=im_shape, shuffle=True, seed=seed,\n                                                     class_mode='categorical', batch_size=BATCH_SIZE, subset=\"training\")\n# Generator para parte valida\u00e7\u00e3o\nvalidation_generator = val_data_generator.flow_from_directory(path, target_size=im_shape, shuffle=False, seed=seed,\n                                                     class_mode='categorical', batch_size=BATCH_SIZE, subset=\"validation\")\n\n# Generator para dataset de teste verificar aqui n\u00e9 \ntest_generator = ImageDataGenerator(preprocessing_function=preprocess_input)\ntest_generator = test_generator.flow_from_directory(teste, target_size=im_shape, shuffle=False, seed=seed,\n                                                     class_mode='categorical', batch_size=BATCH_SIZE)\n\nnb_train_samples = train_generator.samples\nnb_validation_samples = validation_generator.samples\nnb_test_samples = test_generator.samples\nclasses = list(train_generator.class_indices.keys())\nprint('Classes: '+str(classes))\nnum_classes  = len(classes)","1db1ba8d":"nb_test_samples","05639c93":"# Visualizando alguns exemplos do dataset por meio do Generator criado\nplt.figure(figsize=(15,15))\nfor i in range(9):\n    #gera subfigures\n    plt.subplot(330 + 1 + i)\n    batch = train_generator.next()[0]*255\n    image = batch[0].astype('uint8')\n    plt.imshow(image)\nplt.show()","bfeee23d":"#base_model = InceptionV3(weights='imagenet', include_top=False, input_shape=(im_shape[0], im_shape[1], 3))\nbase_model = InceptionResNetV2(weights='imagenet', include_top=False, input_shape=(im_shape[0], im_shape[1], 3))\n\nx = base_model.output\nx = Flatten()(x)\nx = Dense(300, activation='relu')(x)\n#x = Dropout(.3)(x)\n#x = Dropout(0.3)(x)\n#x = Dense(25, activation='relu')(x)\nx = Dropout(0.2)(x)\nx = Dense(100, activation='relu')(x)\nx = Dropout(0.2)(x)\nx = Dense(200, activation='relu')(x)\npredictions = Dense(num_classes, activation='softmax', kernel_initializer='random_uniform')(x)\n\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\n# Freezing pretrained layers\nfor layer in base_model.layers:\n    layer.trainable=False\n    \n#original\noptimizer = Adam()\nmodel.compile(optimizer=optimizer,loss='categorical_crossentropy',metrics=['accuracy'])\n\n#secundario\n\"\"\"model.compile(loss='categorical_crossentropy',\n              optimizer=RMSprop(),\n              metrics=['accuracy'])\"\"\"","f8671e16":"epochs = 100\n\n# Saving the best model\ncallbacks_list = [\n    keras.callbacks.ModelCheckpoint(\n        filepath='modelBugsLife.h5',\n        monitor='val_loss', save_best_only=True, verbose=1),\n    keras.callbacks.EarlyStopping(monitor='val_loss',patience=20,verbose=1)\n    # patience=15,\n]\n\nhistory = model.fit(\n        train_generator,\n        steps_per_epoch=nb_train_samples \/\/ BATCH_SIZE,\n        epochs=epochs,\n        callbacks = callbacks_list,\n        validation_data=validation_generator,\n        verbose = 1,\n        validation_steps=nb_validation_samples \/\/ BATCH_SIZE)","64dba5c1":"#Vamos ver como foi o treino?\nimport matplotlib.pyplot as plt\n\nhistory_dict = history.history\nloss_values = history_dict['loss']\nval_loss_values = history_dict['val_loss']\n\nepochs_x = range(1, len(loss_values) + 1)\nplt.figure(figsize=(10,10))\nplt.subplot(2,1,1)\nplt.plot(epochs_x, loss_values, 'bo', label='Training loss')\nplt.plot(epochs_x, val_loss_values, 'b', label='Validation loss')\nplt.title('Training and validation Loss and Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\n#plt.legend()\nplt.subplot(2,1,2)\nacc_values = history_dict['accuracy']\nval_acc_values = history_dict['val_accuracy']\nplt.plot(epochs_x, acc_values, 'bo', label='Training acc')\nplt.plot(epochs_x, val_acc_values, 'b', label='Validation acc')\n#plt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Acc')\nplt.legend()\nplt.show()","1e54be13":"from tensorflow.keras.models import load_model\n# Load the best saved model\nmodel = load_model('modelBugsLife.h5')","6926c0e9":"# Using the validation dataset\nscore = model.evaluate_generator(validation_generator)\nprint('Val loss:', score[0])\nprint('Val accuracy:', score[1])","dfe69ba3":"# Using the test dataset\n# score = model.evaluate_generator(test_generator)\n# print('Test loss:', score[0])\n# print('Test accuracy:', score[1])","5901680c":"import itertools\n\n#Plot the confusion matrix. Set Normalize = True\/False\ndef plot_confusion_matrix(cm, classes, normalize=True, title='Confusion matrix', cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.figure(figsize=(10,10))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        cm = np.around(cm, decimals=2)\n        cm[np.isnan(cm)] = 0.0\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","72fd9d97":"# Some reports\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport numpy as np\n\n#Confution Matrix and Classification Report\nY_pred = model.predict_generator(test_generator)#, nb_test_samples \/\/ BATCH_SIZE, workers=1)\ny_pred = np.argmax(Y_pred, axis=1)\ntarget_names = classes\n\n#Confution Matrix\ncm = confusion_matrix(test_generator.classes, y_pred)\nplot_confusion_matrix(cm, target_names, normalize=False, title='Confusion Matrix')\nprint('Classification Report')\nprint(classification_report(test_generator.classes, y_pred, target_names=target_names))","de936b76":"# Transfer Learning from a Deep Model","692520f7":"# Flik's recognition - transfer learning","64a332e0":"# Chucrute recongnition CNN","5ed3df91":"# Optimizer adam \n* Val loss: 0.611824095249176\n* Val accuracy: 0.7894144058227539\n\n# Optmizer RMSprop\n* Val loss: 0.7564347982406616\n* Val accuracy: 0.7331081032752991\n","a08d61b2":"rede original 300 100 300","a6e36fae":"Libary","23aeb521":"# Segundo trabalho do modulo de deep learning - Universidade do Estado do Amazonas\n## A bug's life .\n## Equipe:\n- Felipe Brasil\n- Franklin Perseu de Lima e Lima"}}