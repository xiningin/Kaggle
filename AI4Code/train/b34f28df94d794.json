{"cell_type":{"9d30ead7":"code","ddf8c5b5":"code","29cfa8b5":"code","ad31cd9b":"code","39717178":"code","61a42cdd":"code","6a10d7eb":"code","56c421de":"code","d5d5711b":"markdown","d3985f1e":"markdown","a78c64e7":"markdown"},"source":{"9d30ead7":"import os\nimport numpy as np\nimport pandas as pd\nimport pydicom\nimport matplotlib.pyplot as plt","ddf8c5b5":"series_names = ['FLAIR','T1w','T1wCE','T2w']\ndirectory = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/'\nlabels_df = pd.read_csv('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv')","29cfa8b5":"# Get an image path from a series, we'll return only the tenth image in the series directory\ndef get_series_list(study_id, series_name):\n \n    files = [os.path.join(directory + '' + study_id + \"\/\" + series_name, f) for f in os.listdir(directory + '' + study_id + \"\/\" + series_name) if \n    os.path.isfile(os.path.join(directory + '' + study_id + \"\/\" + series_name, f))]\n    return files[10], len(files)","ad31cd9b":"# Convert the Image Orientation Patient tag cosine values into a text string of the plane.\n# This is a simple method to represent the plane the image is 'closest to' .. it does not explain any obliqueness.\n# There is a more complex (and complete) way to do this, but this is all we need here since all the planes in this dataset are orthogonal.\ndef get_image_plane(loc):\n\n    row_x = round(loc[0])\n    row_y = round(loc[1])\n    row_z = round(loc[2])\n    col_x = round(loc[3])\n    col_y = round(loc[4])\n    col_z = round(loc[5])\n    if (row_x, row_y, col_x, col_y) == (1,0,0,0):\n        return \"Coronal\"\n    if (row_x, row_y, col_x, col_y) == (0,1,0,0):\n        return \"Sagittal\"\n    if (row_x, row_y, col_x, col_y) == (1,0,0,1):\n        return \"Axial\"\n    return \"Unknown\"","39717178":"# Iterate over the labels_df\nfor index, row in labels_df.iterrows():\n    images = []\n    study_id = str(row['BraTS21ID']).zfill(5)\n    \n    # Get a list of one image from each series\n    for ser in series_names:\n        img_list, series_count = get_series_list(study_id, ser)\n        images.append([img_list,series_count])\n\n    # Iterate through the images list and check the plane of each\n    for img in images:\n\n        image = pydicom.dcmread(img[0])\n        \n        # Get the IOP tag for this image\n        image_orientation_patient = image[0x0020,0x0037]\n        \n        # Get the plane for this image\/series\n        plane = get_image_plane(image_orientation_patient)\n\n        # Add the plane data to the labels dataframe\n        img_temp = img[0].split(\"\/\")\n        labels_df.at[index,'plane_' + img_temp[5]] = plane\n        labels_df.at[index,'count_' + img_temp[5]] = img[1]","61a42cdd":"labels_df.head(50)","6a10d7eb":"print(\"FLAIR: \", labels_df['plane_FLAIR'].unique())\nprint(\"T1w: \", labels_df['plane_T1w'].unique())\nprint(\"T1wCE: \", labels_df['plane_T1wCE'].unique())\nprint(\"T2w: \", labels_df['plane_T2w'].unique())","56c421de":"labels_df.to_csv(\"train_labels_with_planes.csv\", index=False)","d5d5711b":"#### We see that most of the columns have different planes. Let's check unique values to see if *any* are in the same plane across the entire dataset.","d3985f1e":"<div class='alert alert-info' style='text-align: center;'><h1>RSNA-MICCAI Brain Tumor Image Planes and Counts<\/h1><\/div>\n                                                  \n#### This notebook gets all the image planes and slice counts for each series in the train set and appends them to the labels dataframe.\n\n- The same technique can be applied to the test set to ensure coplanar comparissons.\n- You can run it yourself, or just D\/L the output of this notebook and import into your own.\n- Here, we'll get an image from each series and check the plane.","a78c64e7":"#### Now we can see that none of the series are all in the same plane, as they all have *some* series in each plane.\n\n- Export the updated labels dataframe to CSV."}}