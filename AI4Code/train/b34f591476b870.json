{"cell_type":{"f1400f51":"code","a6fd4630":"code","3ebc359a":"code","514c77f3":"code","d6eab967":"code","2207b143":"code","435f7ea1":"code","aff5edfc":"markdown"},"source":{"f1400f51":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a6fd4630":"import numpy as np\nimport pandas as pd\nfrom sklearn.datasets import load_boston\n\nimport matplotlib.pyplot as plt\nfrom sklearn import metrics\nfrom sklearn.linear_model import LinearRegression","3ebc359a":"boston = load_boston()\nprint(boston.data)\nbos = pd.DataFrame(boston.data)","514c77f3":"bos.columns = boston.feature_names\nbos['price'] = boston.target\nX=bos.drop('price', axis=1)","d6eab967":"model = LinearRegression()\nmodel.fit(X,bos.price)\nprint('number of slopes',len(model.coef_))\nprint('slopes are ',model.coef_)\nprint('Intercept is ',model.intercept_)\nfrom sklearn.model_selection import train_test_split","2207b143":"x_train,x_test,y_train,y_test = train_test_split(boston.data,boston.target,test_size=0.3 ,random_state = 5)\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)\nmodel = LinearRegression()\nmodel.fit(x_train,y_train)\npred = model.predict(x_test)\nprint('mse of the model is ',metrics.mean_squared_error(pred,y_test))\nprint('R2 of the model is ',metrics.r2_score(pred,y_test))","435f7ea1":"plt.scatter(bos.RM,bos.price)\nplt.xlabel('average number of rooms per dwelling')\nplt.ylabel('price of the house')\nplt.title('Relationship bw price and no of rooms')\nplt.show()","aff5edfc":"Linear regression should not be the choise for this data"}}