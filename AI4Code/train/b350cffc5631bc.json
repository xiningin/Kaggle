{"cell_type":{"62c064fe":"code","6c5ad0b3":"code","e4f79f58":"code","7c921dcf":"code","f3a0b805":"code","c99dfa2b":"code","de323f7d":"code","4f18192e":"code","007682d9":"code","7fe50c99":"code","85f5275e":"code","1aefb910":"code","bcb560f5":"code","ccbb39cc":"code","da64d52a":"code","90288aa2":"code","fff49f86":"code","4a7bf617":"code","276a4b4c":"code","1c8d053c":"code","49556ea6":"code","bf124aca":"code","500eef3e":"code","aa1cba5e":"code","2c7b5f21":"code","8cae84f7":"code","b13894d4":"code","7f1fd2ed":"markdown","92a7ee56":"markdown","e72b8d74":"markdown","28a7271c":"markdown","af844f54":"markdown","4b9860b7":"markdown","d3f22c00":"markdown"},"source":{"62c064fe":"import tensorflow.keras.layers as Layers\nimport tensorflow.keras.activations as Activations\nimport tensorflow.keras.models as Models\nimport tensorflow.keras.optimizers as Optimizer\nimport tensorflow.keras.metrics as Metrics\nimport tensorflow.keras.utils as Utils\nimport keras\nfrom keras.preprocessing.image import ImageDataGenerator \nimport os\nimport matplotlib.pyplot as plt\nimport cv2\nimport numpy as np\nimport pandas as pd\nfrom sklearn.utils import shuffle\nfrom IPython.display import SVG\nimport seaborn as sns\n","6c5ad0b3":"def get_images(directory):\n    Images = []\n    Labels = []\n    \n    for labels in os.listdir(directory):\n        if labels == 'glacier': \n            label = 2\n        elif labels == 'sea':\n            label = 4\n        elif labels == 'buildings':\n            label = 0\n        elif labels == 'forest':\n            label = 1\n        elif labels == 'street':\n            label = 5\n        elif labels == 'mountain':\n            label = 3\n        \n        for image_file in os.listdir(directory+'\/'+labels): \n            image = cv2.imread(directory+ '\/'+labels+'\/'+image_file) \n            image = cv2.resize(image,(150,150)) \n            Images.append(image)\n            Labels.append(label)\n    \n    return shuffle(Images,Labels,random_state=1000) \n","e4f79f58":"def get_category(x):\n    labels = {2:'glacier', 4:'sea', 0:'buildings', 1:'forest', 5:'street', 3:'mountain'}\n    return labels[x]","7c921dcf":"Images,Labels = get_images('..\/input\/intel-image-classification\/seg_train\/seg_train')\nImages = np.array(Images)\nLabels = np.array(Labels)","f3a0b805":"category = ['mountain', 'street', 'glacier', 'buildings', 'sea', 'forest']\n_,count = np.unique(Labels, return_counts = True)\npd.DataFrame({\"train\": count}, index = category).plot.bar()\nplt.show()\n","c99dfa2b":"plt.pie(count,explode=(0, 0, 0, 0, 0, 0),labels = category,autopct='%1.1f%%')\nplt.axis('equal')\nplt.title(\"Propotion\")\nplt.show()","de323f7d":"def display_image(image,label):\n    fig = plt.figure(figsize = (10,10))\n    fig.suptitle('15 Images from the Dataset', fontsize = 20)\n    for i in range(15):\n        index = np.random.randint(Images.shape[0])\n        plt.subplot(5,5,i+1)\n        plt.imshow(image[index])\n        plt.xticks([]) #Scale doesn't appear\n        plt.yticks([]) #Scale doesn't apper\n        plt.title(get_category(label[index]))\n        plt.grid(False)\n    plt.show()\n #Maximum 25 images can only be displayed.   ","4f18192e":"display_image(Images, Labels)","007682d9":"print(Images.shape)\nprint(Labels.shape)","7fe50c99":"model = Models.Sequential()\n\nmodel.add(Layers.Conv2D(256,kernel_size=(3,3),activation='relu',input_shape=(150,150,3)))\nmodel.add(Layers.Conv2D(128,kernel_size=(3,3),activation='relu'))\nmodel.add(Layers.MaxPool2D(3,3))\nmodel.add(Layers.Conv2D(256,kernel_size=(3,3),activation='relu'))\nmodel.add(Layers.Conv2D(128,kernel_size=(3,3),activation='relu'))\nmodel.add(Layers.MaxPool2D(3,3))\nmodel.add(Layers.Conv2D(128,kernel_size=(3,3),activation='relu'))\nmodel.add(Layers.Conv2D(64,kernel_size=(3,3),activation='relu'))\nmodel.add(Layers.MaxPool2D(3,3))\nmodel.add(Layers.Flatten())\nmodel.add(Layers.Dense(180,activation='relu'))\nmodel.add(Layers.Dense(128,activation='relu'))\nmodel.add(Layers.Dense(64,activation='relu'))\nmodel.add(Layers.Dropout(rate=0.5))\nmodel.add(Layers.Dense(6,activation='softmax'))\nmodel.compile(optimizer=Optimizer.Adam(lr=0.0001),loss='sparse_categorical_crossentropy',metrics=['accuracy'])\nmodel.summary()\n\n\n\n","85f5275e":"trained = model.fit(Images,Labels,epochs=30,validation_split=0.30)","1aefb910":"plt.plot(trained.history['accuracy'])\nplt.plot(trained.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(trained.history['loss'])\nplt.plot(trained.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","bcb560f5":"train_generator = ImageDataGenerator(rescale = 1\/255, zoom_range = 0.3, horizontal_flip = True, rotation_range = 30)\ntrain_generator = train_generator.flow(Images, Labels, batch_size = 64, shuffle = False)","ccbb39cc":"history = model.fit_generator(train_generator, epochs = 30, shuffle = False)","da64d52a":"plt.plot(history.history['accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train'], loc='upper left')\nplt.show()","90288aa2":"test_Images,test_Labels = get_images('..\/input\/intel-image-classification\/seg_test\/seg_test')\ntest_Images = np.array(test_Images)\ntest_Labels = np.array(test_Labels)","fff49f86":"test_generator = ImageDataGenerator(rescale = 1\/255)\ntest_generator = test_generator.flow(test_Images, test_Labels, batch_size = 64, shuffle = False)","4a7bf617":"evaluate = model.evaluate(test_Images, test_Labels, verbose = 1)","276a4b4c":"print( \"Accuracy: \"  + str(evaluate[1] * 100) + \"%\")","1c8d053c":"evaluate2 = model.evaluate_generator(test_generator, verbose = 1)","49556ea6":"print(\"Accuracy:\" + str(evaluate2[1] * 100) + \"%\")","bf124aca":"def get_pred(directory):\n    Images = []\n    Labels = []\n    label = 0\n    \n    for image_file in os.listdir(directory): \n        image = cv2.imread(directory+ '\/' +image_file) \n        image = cv2.resize(image,(150,150)) \n        Images.append(image)\n        Labels.append(label)\n    \n    return shuffle(Images,Labels,random_state=1000) ","500eef3e":"pred_Images,pred_Labels = get_pred(\"..\/input\/intel-image-classification\/seg_pred\/seg_pred\")\npred_Images = np.array(pred_Images)","aa1cba5e":"print(pred_Images.shape)","2c7b5f21":"pred_generator = ImageDataGenerator(rescale = 1\/255)\npred_generator = pred_generator.flow(pred_Images, batch_size = 64, shuffle = False)","8cae84f7":"prediction = model.predict_generator(pred_generator, verbose=1)","b13894d4":"prediction.shape","7f1fd2ed":"**Neural Network Architecture**","92a7ee56":"**Distribution of Images across each category**","e72b8d74":"**Now we will fit the model**","28a7271c":"**Using Image Augmentation**","af844f54":"**Overfitting is clearly visible**","4b9860b7":"**Getting Images from the directory**","d3f22c00":"**Importing all the necessary libraries**"}}