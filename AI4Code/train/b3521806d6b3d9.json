{"cell_type":{"dea8f1b1":"code","d9892300":"code","78a233a5":"code","58e6a550":"code","5beff464":"code","c7149789":"code","c6ac7506":"code","44329d4b":"code","3afb237b":"code","569703d9":"code","bc04008e":"code","96d983c6":"code","6477c333":"code","b823833e":"code","5bca5169":"code","b5218720":"code","8c9046e8":"code","94a47928":"code","d53665ef":"code","5754c2f2":"code","5715d426":"code","cf57c6f4":"code","7d3e85eb":"code","56239e6a":"code","90f27948":"code","9f82769a":"code","9647b1f6":"code","054e9971":"code","13c19dd9":"code","f718f082":"code","ed1a23c0":"code","837c3afc":"code","40da6d7e":"code","d606823b":"code","6d16a4b1":"code","5ea9f67a":"code","e5f33d12":"code","cadde8b0":"code","49c4c321":"code","4eaf614d":"code","90dda4bd":"code","d8ee51c3":"code","64f35158":"code","cfb12634":"code","58be788e":"code","749fc3ff":"code","1711fe71":"code","5692f5a3":"code","2bc3c646":"code","9109f0d0":"code","cad5a0bf":"markdown","f381922e":"markdown","a75d0ae7":"markdown","9827b32a":"markdown","c721695a":"markdown","09bed376":"markdown","8abee7a0":"markdown","0af48618":"markdown","d7e18534":"markdown","20c01df0":"markdown","dafb34d0":"markdown","655153dc":"markdown","10344bbd":"markdown","b36bc8a3":"markdown","5732a31c":"markdown","26e64cff":"markdown","955d4f77":"markdown","537deb10":"markdown","a190d1ff":"markdown","ed4ca0e2":"markdown"},"source":{"dea8f1b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9892300":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, RandomizedSearchCV\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, VotingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.preprocessing import LabelEncoder, RobustScaler\n!pip install xgboost\n!pip install lightgbm\n!pip install catboost\nimport warnings\nfrom scipy import stats\nfrom scipy.stats import shapiro","78a233a5":"pd.set_option('display.max_columns', None)\npd.set_option('display.width', 500)\nwarnings.filterwarnings('ignore')","58e6a550":"train =  pd.read_csv(\"..\/input\/house-prices-dataset\/train.csv\")\ntest =  pd.read_csv(\"..\/input\/house-prices-dataset\/test.csv\")\ndf = train.append(test).reset_index(drop=True)\ndf.head()","5beff464":"df.shape\n\n","c7149789":"train.shape\n","c6ac7506":"test.shape","44329d4b":"#Say\u0131sal De\u011fi\u015fkenlerin Betimsel \u0130statistikleri\ndf.describe()","3afb237b":"df.head()","569703d9":"#Kategorik De\u011fi\u015fken Analizi\ncat_cols = [col for col in df.columns if df[col].dtypes == \"O\"]\n\nnum_but_cat = [col for col in df.columns if df[col].nunique() < 10 and df[col].dtypes != \"O\"]\n\ncat_but_car = [col for col in df.columns if df[col].nunique() > 20 and df[col].dtypes == \"O\"]\n\ncat_cols = cat_cols + num_but_cat\n\ncat_cols = [col for col in cat_cols if col not in cat_but_car]\n\ndf[cat_cols].nunique()","bc04008e":"def cat_summary(dataframe, col_name, plot=False):\n\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                        \"Ratio\": 100 * dataframe[col_name].value_counts() \/ len(dataframe)}))\n    print(\"##########################################\")\n\n    if plot:\n        sns.countplot(x=dataframe[col_name], data=dataframe)\n        plt.show()\n","96d983c6":"cat_summary(df, \"SalePrice\", plot=True)","6477c333":"#Kategorik De\u011fi\u015fkenlerin G\u00f6rselle\u015ftirilmesi\nfor col in cat_cols:\n    cat_summary(df, col, plot=True)","b823833e":"# SalePrice Hedef De\u011fi\u015fkeninin Kategorik De\u011fi\u015fkenler ile Analizi\n\ndef target_summary_with_cat(dataframe, target, categorical_col):\n\n    print(pd.DataFrame({\"TARGET_MEAN\": dataframe.groupby(categorical_col)[target].mean()}), end=\"\\n\\n\\n\")\n","5bca5169":"for col in cat_cols:\n    target_summary_with_cat(df, \"SalePrice\", col)","b5218720":"# Say\u0131sal De\u011fi\u015fken Analizi\nnum_cols = [col for col in df.columns if df[col].dtypes != 'O']\n\nnum_cols = [col for col in df.columns if df[col].dtypes != 'O' and col not in [\"Id\", \"SalePrice\"]]\n\nnum_cols = [col for col in num_cols if col not in cat_cols]","8c9046e8":"def num_summary(dataframe, numerical_col, plot=False):\n\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n\n    print(dataframe[numerical_col].describe(quantiles).T)\n\n    if plot:\n        dataframe[numerical_col].hist(bins=20)\n        plt.xlabel(numerical_col)\n        plt.title(numerical_col)\n        plt.show()\n\n\n","94a47928":"# Say\u0131sal De\u011fi\u015fkenlerin G\u00f6rselle\u015ftirilmesi\nfor col in num_cols:\n    num_summary(df, col, plot=True)","d53665ef":"# SalePrice Hedef De\u011fi\u015fkeninin Say\u0131sal De\u011fi\u015fkenler ile Analizi\ndef target_summary_with_num(dataframe, target, numerical_col):\n    print(dataframe.groupby(target).agg({numerical_col: \"mean\"}), end=\"\\n\\n\\n\")\n\nfor col in num_cols:\n    target_summary_with_num(df, \"SalePrice\", col)","5754c2f2":"# SalePrice Hedef De\u011fi\u015fkeninin G\u00f6rselle\u015ftirilmesi\nplt.subplots(figsize=(12,9))\nsns.distplot(train['SalePrice'], fit=stats.norm)\n\n(mu, sigma) = stats.norm.fit(train['SalePrice'])\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)], loc='best')\nplt.ylabel('Frequency')\nplt.show()\n\nplt.hist(df[\"SalePrice\"])\nplt.show()","5715d426":"# Eksik G\u00f6zlemlerin G\u00f6rselle\u015ftirilmesi\na = df.isnull().sum()\na = a[a != 0].sort_values(ascending=False)\nf, ax = plt.subplots(figsize=(15, 10))\nplt.xticks(rotation='90')\nsns.barplot(x=a.index, y=a)\nplt.title(\"De\u011fi\u015fkenlerin Eksik G\u00f6zlem Say\u0131s\u0131\")\nplt.show()","cf57c6f4":"#Kategorik De\u011fi\u015fkenlerdeki Eksik Verilerin \u00c7\u00f6z\u00fcm\u00fc\ncat_cols , num_cols, cat_but_car =  grab_col_names(df)\ndf = df.apply(lambda x: x.fillna(x.mode()[0]) if (x.dtype == \"O\" and len(x.unique()) <= 20) else x, axis=0)\ndf[cat_cols].isnull().sum()\n","7d3e85eb":"# Say\u0131sal De\u011fi\u015fkenlerdeki Eksik Verilerin \u00c7\u00f6z\u00fcm\u00fc\ndf[\"LotFrontage\"].fillna(0, inplace =  True)\ndf[\"MasVnrArea\"].fillna(0, inplace =  True)\ndf[\"GarageYrBlt\"].fillna(0, inplace =  True)\ndf[\"PoolQC\"].fillna(0, inplace =  True)\ndf[\"PoolArea\"].fillna(0, inplace =  True)\ndf[\"Alley\"].fillna(0, inplace =  True)\ndf[\"MiscFeature\"].fillna(0, inplace =  True)\ndf[\"Fence\"].fillna(0, inplace =  True)\ndf[\"FireplaceQu\"].fillna(0, inplace =  True)\ndf[\"GarageQual\"].fillna(0, inplace =  True)\ndf[\"GarageFinish\"].fillna(0, inplace =  True)\ndf[\"GarageYrBlt\"].fillna(0, inplace =  True)\ndf[\"BsmtExposure\"].fillna(0, inplace =  True)\n\ndf[num_cols].isnull().sum()","56239e6a":"#Eksik Say\u0131s\u0131 Az Olan G\u00f6zlemlerin Silinmesi\ndf = df.dropna(subset=[\"TotalBsmtSF\", \"BsmtFinSF2\",\"BsmtFinSF1\",\"BsmtUnfSF\",\"TotalBsmtSF\",\n                       \"GarageArea\",\"GarageCars\",\"BsmtFullBath\",\n                       \"BsmtHalfBath\",\"Exterior2nd\",\"GarageCars\"])","90f27948":"def missing_values_table(dataframe, na_name=False):\n    na_columns = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0]\n    n_miss = dataframe[na_columns].isnull().sum().sort_values(ascending=False)\n    ratio = (dataframe[na_columns].isnull().sum() \/ dataframe.shape[0] * 100).sort_values(ascending=False)\n    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=['n_miss', 'ratio'])\n    print(missing_df, end=\"\\n\")\n    if na_name:\n        return na_columns\n    \n","9f82769a":"# Eksik Veri Kontrol\u00fc\nmissing_values_table(df)","9647b1f6":"def outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.05)\n    quartile3 = dataframe[variable].quantile(0.95)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\ndef check_outlier(dataframe, col_name):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n        return True\n    else:\n        return False","054e9971":"for col in num_cols:\n    print(col, check_outlier(df, col))","13c19dd9":"# Ayk\u0131r\u0131 De\u011ferlerin Bask\u0131nlamas\u0131","f718f082":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n","ed1a23c0":"for col in num_cols:\n    print(col, replace_with_thresholds(df, col))","837c3afc":"# Baz\u0131 De\u011fi\u015fkenlerdeki Ayk\u0131r\u0131 De\u011ferlerin Bask\u0131land\u0131ktan Sonraki Sa\u00e7\u0131l\u0131m Grafikleri\n\nfig, ax = plt.subplots()\nax.scatter(x = df['GrLivArea'], y = df['SalePrice'])\nplt.ylabel('SalePrice', fontsize=7)\nplt.xlabel('GrLivArea', fontsize=7)\nplt.show()\n\n\nfig, ax = plt.subplots()\nax.scatter(x = df['LotArea'], y = df['SalePrice'])\nplt.ylabel('SalePrice', fontsize=7)\nplt.xlabel('LotArea', fontsize=7)\nplt.show()\n\nfig, ax = plt.subplots()\nax.scatter(x = df['1stFlrSF'], y = df['SalePrice'])\nplt.ylabel('SalePrice', fontsize=7)\nplt.xlabel('1stFlrSF', fontsize=7)\nplt.show()","40da6d7e":"corr=df.corr().abs()\nn_most_correlated=20\nmost_correlated_feature=corr['SalePrice'].sort_values(ascending=False)[:n_most_correlated].drop('SalePrice')\nmost_correlated_feature_name=most_correlated_feature.index.values\nf, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=most_correlated_feature_name, y=most_correlated_feature)\nplt.title(\"SalePrice  ba\u011f\u0131ml\u0131 de\u011fi\u015fkeni ile en fazla korelasyona sahip de\u011fi\u015fkenler\")\nplt.show()","d606823b":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    return cat_cols, num_cols, cat_but_car","6d16a4b1":"def one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n    return dataframe\ncat_cols , num_cols, cat_but_car =  grab_col_names(df)\ndf = one_hot_encoder(df, cat_cols)\ndf.head()\n","5ea9f67a":"for col in num_cols:\n    if col!=\"SalePrice\":\n        transformer=RobustScaler().fit(df[[col]])\n        df[col]=transformer.transform(df[[col]])\n\ndf.head()\n","e5f33d12":"# Train-Test Ayr\u0131m\u0131\n\ntrain = df[df['SalePrice'].notnull()]\ntest = df[df['SalePrice'].isnull()].drop(\"SalePrice\", axis=1)\n\ncols = [col for col in train.columns if col not in [\"ID\", \"SalePrice\"]]\n\ny = train['SalePrice']\nX = train[cols]","cadde8b0":"models = [('LR', LinearRegression()),\n          (\"Ridge\", Ridge()),\n          (\"Lasso\", Lasso()),\n          (\"ElasticNet\", ElasticNet()),\n          ('KNN', KNeighborsRegressor()),\n          ('CART', DecisionTreeRegressor()),\n          ('RF', RandomForestRegressor()),\n          ('SVR', SVR()),\n          ('GBM', GradientBoostingRegressor()),\n          (\"XGBoost\", XGBRegressor(objective='reg:squarederror')),\n          (\"LightGBM\", LGBMRegressor()),\n          (\"CatBoost\", CatBoostRegressor(verbose=False))]\n\n\n\nfor name, regressor in models:\n    rmse = np.mean(np.sqrt(-cross_val_score(regressor, X, y, cv=10, scoring=\"neg_mean_squared_error\")))\n    print(f\"RMSE: {round(rmse, 4)} ({name}) \")","49c4c321":"df[\"NEW_OVERALLQUAL*OVERALLCOUND\"]=df[\"OverallQual\"] * df[\"OverallCond\"]\ndf.YearRemodAdd = np.where(df.YearBuilt > df.YearRemodAdd, df.YearBuilt, df.YearRemodAdd)\ndf.YrSold = np.where(df.YearBuilt > df.YrSold, df.YearBuilt, df.YrSold)\ndf.YrSold = np.where(df.YearRemodAdd > df.YrSold, df.YearRemodAdd, df.YrSold)\n\n# Age Features\ndf[\"NEW_HOUSEAGE\"] = df.YrSold - df.YearBuilt\ndf[\"NEW_REMODAGE\"] = df.YrSold - df.YearRemodAdd\ndf[\"NEW_GARAGEAGE\"] = df.YrSold - df.GarageYrBlt\ndf[\"NEW_REMODBLTAGE\"] = df.YearRemodAdd - df.YearBuilt\ndf[\"NEW_GARAGEBLTAGE\"] = df.GarageYrBlt - df.YearBuilt\ndf[\"NEW_REMODELED\"] = np.where(df.YearBuilt == df.YearRemodAdd, 0 ,1)\ndf[\"NEW_ISNEWHOUSE\"] = np.where(df.YearBuilt == df.YrSold, 1 ,0)\n\n# Create Cluster\ndf[\"NEW_CLUSTER_YEARBUILT\"] = np.where(df.YearBuilt <= 1940, 1, 2)\ndf[\"NEW_CLUSTER_YEARBUILT\"] = np.where(df.YearBuilt >= 1980, 3, df[\"NEW_CLUSTER_YEARBUILT\"])\ndf[\"NEW_CLUSTER_GARAGEBUILT\"] = np.where(df.GarageYrBlt <= 1940, 1, 2)\ndf[\"NEW_CLUSTER_GARAGEBUILT\"] = np.where(df.GarageYrBlt >= 1980, 3, df[\"NEW_CLUSTER_GARAGEBUILT\"])\ndf[\"NEW_CLUSTER_YEARREMODADD\"] = np.where(df.YearRemodAdd >= 1980, 2, 1)\n\n\ndf[\"NEW_TOTALBATH\"] = df.BsmtFullBath + df.BsmtHalfBath*0.5 + df.FullBath + df.HalfBath*0.5\ndf[\"NEW_TOTALFULLBATH\"] = df.BsmtFullBath + df.FullBath\ndf[\"NEW_TOTALHALFBATH\"] = df.BsmtHalfBath + df.HalfBath\ndf[\"NEW_ROOMABVGR\"] = df.BedroomAbvGr + df.KitchenAbvGr\ndf[\"NEW_RATIO_ROOMABVGR\"] = df[\"NEW_ROOMABVGR\"] \/ df.TotRmsAbvGrd\n\ndf[\"NEW_GrLivArea\/LotArea\"]=df[\"GrLivArea\"]\/df[\"LotArea\"]\ndf[\"NEW_GarageCars\"] = np.where(df.GarageCars > 2, 3, df.GarageCars)\ndf['NEW_PoolArea']=[1 if i>0 else 0 for i in df['PoolArea']]\ndf['NEW_3']=[1 if i>0 else 0 for i in df['GarageCars']]\ndf['NEW_Fireplaces']=[1 if i>0 else 0 for i in df['Fireplaces']]\ndf[\"NEW_CentralAir\"]=[1 if i==\"Y\" else 0 for i in df[\"CentralAir\"]]\ndf[\"NEW_MiscFeature\"]=[0 if i==\"None\" else 1 for i in df[\"MiscFeature\"]]\n\n\n#Baz\u0131 kategorik de\u011fi\u015fkenlerin say\u0131sal olarak s\u0131n\u0131fland\u0131r\u0131lmas\u0131\ndef new_sorting(df,col,old,new):\n    maps={}\n    n=len(old)\n    for i in range(n):\n        maps.setdefault(old[i],new[i])\n    df[col] = df[col].map(maps).astype(int)\n\nnew_sorting(df,\"BsmtFinType1\",['GLQ', 'ALQ', 'Unf', 'Rec', 'BLQ', 'LwQ'],[5,4,1,3,3,2])\nnew_sorting(df,\"BsmtFinType2\",['GLQ', 'ALQ', 'Unf', 'Rec', 'BLQ' ,'LwQ'],[5,4,1,3,3,2])\nnew_sorting(df,\"GarageQual\",[\"TA\",\"Fa\",\"Gd\",\"Po\", \"Ex\"],[5,4,3,2,1])\nnew_sorting(df,\"LotShape\",[\"Reg\",\"IR1\",\"IR2\",\"IR3\"],[4,3,2,1])\nnew_sorting(df,\"LandContour\",[\"Lvl\",\"Bnk\",\"HLS\",\"Low\"],[4,3,2,1])\nnew_sorting(df,\"PavedDrive\",[\"Y\",\"P\",\"N\"],[3,2,1])\nnew_sorting(df,'BldgType',['1Fam', '2fmCon', 'Duplex', 'TwnhsE', 'Twnhs'],[1,2,2,3,3])\nnew_sorting(df,\"HouseStyle\",['2Story', '1Story', '1.5Fin', '1.5Unf', 'SFoyer', 'SLvl', '2.5Unf','2.5Fin'],[7,6,3,1,2,5,4,8])\nnew_sorting(df,\"RoofStyle\",['Gable', 'Hip', 'Gambrel', 'Mansard', 'Flat', 'Shed'],[4,2,2,1,3,1])\nnew_sorting(df,\"SaleCondition\",['Normal', 'Abnorml', 'Partial', 'AdjLand', 'Alloca', 'Family'],[4,2,5,1,3,2])\nnew_sorting(df,\"Foundation\",['PConc', 'CBlock', 'BrkTil', 'Wood', 'Slab', 'Stone'],[5,2,1,4,0,3])\n","4eaf614d":"# Yeni eklenen de\u011fi\u015fkenlerden sonra eksik g\u00f6zlem kontrol\u00fc;\n\ndef missing_values_table(dataframe, na_name=False):\n    na_columns = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0]\n    n_miss = dataframe[na_columns].isnull().sum().sort_values(ascending=False)\n    ratio = (dataframe[na_columns].isnull().sum() \/ dataframe.shape[0] * 100).sort_values(ascending=False)\n    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=['n_miss', 'ratio'])\n    print(missing_df, end=\"\\n\")\n    if na_name:\n        return na_columns\n\n\nmissing_values_table(df)","90dda4bd":"# Yeni eklenen de\u011fi\u015fkenlerden sonra One-hot Encoding ve Scale \u0130\u015fleminin Yap\u0131lmas\u0131\n#One-Hot Encoding\ndef one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n    return dataframe\ncat_cols , num_cols, cat_but_car =  grab_col_names(df)\ndf = one_hot_encoder(df, cat_cols)\n\n# Robust Scaler\nfor col in num_cols:\n    if col!=\"SalePrice\":\n        transformer=RobustScaler().fit(df[[col]])\n        df[col]=transformer.transform(df[[col]])\n\ndf.head()\n","d8ee51c3":"# Train-Test Ayr\u0131m\u0131\ntrain = df[df['SalePrice'].notnull()]\ntest = df[df['SalePrice'].isnull()].drop(\"SalePrice\", axis=1)\n\ncols = [col for col in train.columns if col not in [\"Id\", \"SalePrice\", \"Neighborhood\"]]\n\ny = train['SalePrice']\nX = train[cols]","64f35158":"# LightGBM Optimizasyon\n\nlgbm_model = LGBMRegressor(random_state=46)\nlgbm_params = {\"learning_rate\": [0.01, 0.02, 0.1],\n                \"n_estimators\": [3500,5000,10000,15000],\n                \"colsample_bytree\": [0.1, 0.2, 0.3, 0.5, 0.6, 0.8]}\nlgbm_gs_best = GridSearchCV(lgbm_model,\n                            lgbm_params,\n                            cv=5,\n                            n_jobs=-1,\n                            verbose=True).fit(X, y)\n\nlightgbm_final= lgbm_model.set_params(**lgbm_gs_best.best_params_).fit(X, y)\n\nrmse = np.mean(np.sqrt(-cross_val_score(lightgbm_final, X, y, cv=5, scoring=\"neg_mean_squared_error\")))","cfb12634":"rmse","58be788e":"# CatBoost Optimizasyon\ncatboost_model = CatBoostRegressor(verbose=False)\ncatboost_params = {\"iterations\": [ 100,250,400,500,600],\n                   \"learning_rate\": [0.01, 0.1, 0.2,0.5],\n                   \"depth\": [4,5,6,7,8]}\n\ncatboost_best_grid = GridSearchCV(catboost_model, \n                                  catboost_params, \n                                  cv=5, \n                                  n_jobs=-1, \n                                  verbose=True).fit(X, y)\n\ncatboost_final = catboost_model.set_params(**catboost_best_grid.best_params_).fit(X, y)\n\nrmse=np.mean(np.sqrt(-cross_val_score(catboost_final, X, y, cv=5, scoring=\"neg_mean_squared_error\")))","749fc3ff":"rmse","1711fe71":"def plot_importance(model, features, num=len(X), save=False):\n    feature_imp = pd.DataFrame({'Value': model.feature_importances_, 'Feature': features.columns})\n    plt.figure(figsize=(10, 10))\n    sns.set(font_scale=1)\n    sns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\",\n                                                                     ascending=False)[0:num])\n    plt.title('Features')\n    plt.tight_layout()\n    plt.show()\n    if save:\n        plt.savefig('importances.png')\n\n\n\nplot_importance(lightgbm_final, X, 20)","5692f5a3":"plot_importance(catboost_final, X, 20)","2bc3c646":"voting_reg = VotingRegressor(estimators=[('CAT', catboost_final),\n                                         ('LightGBM', lightgbm_final)])\n\nvoting_reg.fit(X, y)\nrmse = np.mean(np.sqrt(-cross_val_score(voting_reg, X, y, cv=5, scoring=\"neg_mean_squared_error\")))","9109f0d0":"rmse","cad5a0bf":"# Veri Okuma ve Gerekli Ayarlar\u0131n Yap\u0131lmas\u0131","f381922e":"* Optimizasyon \u00f6ncesinde LightGBM RMSE de\u011feri 32156.7574, optimizasyon sonras\u0131 25107.5095\n* Optimizasyon \u00f6ncesinde Catboost RMSE de\u011feri 30681.7717, optimizasyon sonras\u0131 24728.2712\n","a75d0ae7":"# Gerekli K\u00fct\u00fcphaneler","9827b32a":"# Veri \u0130nceleme Ve \u00d6ni\u015fleme","c721695a":"## Veri Setinde Yer Alan De\u011fi\u015fkenlerin Tan\u0131mlar\u0131\n\nSalePrice - m\u00fclk\u00fcn dolar cinsinden sat\u0131\u015f fiyat\u0131. Bu, tahmin etmeye \u00e7al\u0131\u015f\u0131lan hedef\nde\u011fi\u015fkendir.\n\nMSSubClass: \u0130n\u015faat s\u0131n\u0131f\u0131\n\nMSZoning: Genel imar s\u0131n\u0131fland\u0131rmas\u0131\n\nLotFrontage: M\u00fclkiyetin cadde ile do\u011frudan ba\u011flant\u0131s\u0131n\u0131n olup olmamas\u0131\n\nLotArea: Parsel b\u00fcy\u00fckl\u00fc\u011f\u00fc\n\nStreet: Yol eri\u015fiminin tipi\n\nAlley: Sokak giri\u015fi tipi\n\nLotShape: M\u00fclk\u00fcn genel \u015fekli\n\nLandContour: M\u00fclk\u00fcn d\u00fczl\u00fc\u011f\u00fc\n\nUtulities: Mevcut hizmetlerin t\u00fcr\u00fc\n\nLotConfig: Parsel yap\u0131land\u0131rmas\u0131\n\nLandSlope: M\u00fclk\u00fcn e\u011fimi\n\nNeighborhood: Ames \u015fehir s\u0131n\u0131rlar\u0131 i\u00e7indeki fiziksel konumu\n\nCondition1: Ana yol veya tren yoluna yak\u0131nl\u0131k\n\nCondition2: Ana yola veya demiryoluna yak\u0131nl\u0131k (e\u011fer ikinci bir yer varsa)\n\nBldgType: Konut tipi\n\nHouseStyle: Konut sitili\n\nOverallQual: Genel malzeme ve biti\u015f kalitesi\n\nOverallCond: Genel durum de\u011ferlendirmesi\n\nYearBuilt: Orijinal yap\u0131m tarihi\n\nYearRemodAdd: Yeniden d\u00fczenleme tarihi\n\nRoofStyle: \u00c7at\u0131 tipi\n\nRoofMatl: \u00c7at\u0131 malzemesi\n\nExterior1st: Evdeki d\u0131\u015f kaplama\n\nExterior2nd: Evdeki d\u0131\u015f kaplama (birden fazla malzeme varsa)\n\nMasVnrType: Duvar kaplama t\u00fcr\u00fc\n\nMasVnrArea: Kare ayakl\u0131 duvar kaplama alan\u0131\n\nExterQual: D\u0131\u015f malzeme kalitesi\n\nExterCond: Malzemenin d\u0131\u015fta mevcut durumu\n\nFoundation: Vak\u0131f tipi\n\nBsmtQual: Bodrumun y\u00fcksekli\u011fi\n\nBsmtCond: Bodrum kat\u0131n\u0131n genel durumu\n\nBsmtExposure: Y\u00fcr\u00fcy\u00fc\u015f veya bah\u00e7e kat\u0131 bodrum duvarlar\u0131\n\nBsmtFinType1: Bodrum bitmi\u015f alan\u0131n\u0131n kalitesi\n\nBsmtFinSF1: Tip 1 bitmi\u015f alan\u0131n metre karesi\n\nBsmtFinType2: \u0130kinci bitmi\u015f alan\u0131n kalitesi (varsa)\n\nBsmtFinSF2: Tip 2 bitmi\u015f alan\u0131n metre karesi\n\nBsmtUnfSF: Bodrumun bitmemi\u015f alan\u0131n metre karesi\n\nTotalBsmtSF: Bodrum alan\u0131n\u0131n toplam metre karesi\n\nHeating: Is\u0131tma tipi\n\nHeatingQC: Is\u0131tma kalitesi ve durumu\n\nCentralAir: Merkezi klima\n\nElectrical: elektrik sistemi\n\n1stFlrSF: Birinci Kat metre kare alan\u0131\n\n2ndFlrSF: \u0130kinci kat metre kare alan\u0131\n\nLowQualFinSF: D\u00fc\u015f\u00fck kaliteli bitmi\u015f alanlar (t\u00fcm katlar)\n\nGrLivArea: \u00dcst\u00fc (zemin) oturma alan\u0131 metre karesi\n\nBsmtFullBath: Bodrum kat\u0131ndaki tam banyolar\n\nBsmtHalfBath: Bodrum kat\u0131ndaki yar\u0131m banyolar\n\nFullBath: \u00dcst katlardaki tam banyolar\n\nHalfBath: \u00dcst katlardaki yar\u0131m banyolar\n\nBedroomAbvGr: Bodrum seviyesinin \u00fcst\u00fcnde yatak odas\u0131 say\u0131s\u0131\n\nKitchenAbvGr: Bodrum seviyesinin \u00fcst\u00fcnde mutfak Say\u0131s\u0131\n\nKitchenQual: Mutfak kalitesi\n\nTotRmsAbvGrd: \u00dcst katlardaki toplam oda (banyo i\u00e7ermez)\n\nFunctional: Ev i\u015flevselli\u011fi de\u011ferlendirmesi\n\nFireplaces: \u015e\u00f6mineler\n\nFireplaceQu: \u015e\u00f6mine kalitesi\n\nGarage T\u00fcr\u00fc: Garaj yeri\n\nGarageYrBlt: Garaj\u0131n yap\u0131m y\u0131l\u0131\n\nGarageFinish: Garaj\u0131n i\u00e7 y\u00fczeyi\n\nGarageCars: Ara\u00e7 kapasitesi\n\nGarageArea: Garaj\u0131n alan\u0131\n\nGarageQual: Garaj kalitesi\n\nGarageCond: Garaj durumu\n\nPavedDrive: Garajla yol aras\u0131ndaki yol\n\nWoodDeckSF: Ayakl\u0131 ah\u015fap g\u00fcverte alan\u0131\n\nOpenPorchSF: Kap\u0131 \u00f6n\u00fcndeki a\u00e7\u0131k veranda alan\u0131\n\nEnclosedPorch: Kap\u0131 \u00f6n\u00fcndeki kapal\u0131 veranda alan\n\n3SsPorch: \u00dc\u00e7 mevsim veranda alan\u0131\n\nScreenPorch: Veranda \u00f6rt\u00fc alan\u0131\n\nPoolArea: Havuzun metre kare alan\u0131\n\nPoolQC: Havuz kalitesi\n\nFence: \u00c7it kalitesi\n\nMiscFeature: Di\u011fer kategorilerde bulunmayan \u00f6zellikler\n\nMiscVal: \u00c7e\u015fitli \u00f6zelliklerin de\u011feri\n\nMoSold: Sat\u0131ld\u0131\u011f\u0131 ay\n\nYrSold: Sat\u0131ld\u0131\u011f\u0131 y\u0131l\n\nSaleType: Sat\u0131\u015f T\u00fcr\u00fc\n\nSaleCondition: Sat\u0131\u015f Durumu\n","09bed376":"## Robust Scaler","8abee7a0":"# Stacking & Ensemble Learning\n\n* \u0130ki model birle\u015ftirilerek en d\u00fc\u015f\u00fck RMSE ..... de\u011feri elde dildi.","0af48618":"Ba\u011f\u0131ml\u0131 de\u011fi\u015fken olan Sale Price de\u011fi\u015fkeninin standart sapmas\u0131 79442.502883. Bu bilgi RMSE (hata de\u011ferini) de\u011ferlendirirken i\u015fimize yarayacak.","d7e18534":"Train setinde 1460 g\u00f6zlem 81 de\u011fi\u015fken, test setinde 1459 g\u00f6zlem ve 80 de\u011fi\u015fken bulunmaktad\u0131r.","20c01df0":"# Korelasyon Analizi","dafb34d0":"# Projenin Amac\u0131\n\nBu \u00e7al\u0131\u015fma kapsam\u0131nda;\n\nPiyasada sat\u0131\u015fa sunulan evlerin \u00f6zellik ve fiyat bilgilerinin bulundu\u011fu house-prices \n\ndataseti kullan\u0131larak, farkl\u0131 \u00f6zelliklere sahip evlerin fiyatlar\u0131n\u0131n tahmin edilmesi \n\nhedeflenmi\u015ftir. \n","655153dc":"# Feature Engineering\n\n## \u00d6zellik M\u00fchendisli\u011fi Kapsam\u0131nda;\n\n* Ordinalite i\u00e7eren kategorik de\u011fi\u015fkenler, say\u0131sal de\u011fi\u015fkenlere d\u00f6n\u00fc\u015ft\u00fcr\u00fclm\u00fc\u015ft\u00fcr.\n* Eve ve garaja ait in\u015faat ya da tadilat y\u0131l\u0131n\u0131 i\u00e7eren de\u011fi\u015fkenlerden, belirli matematiksel i\u015flemler yolu ile yeni de\u011fi\u015fkenler t\u00fcretilmi\u015ftir.\n* Ayn\u0131 matematiksel i\u015flemler evin sahip oldu\u011fu farkl\u0131 \u00f6zelliklere de uygulanarak yeni de\u011fi\u015fkenler t\u00fcretilmi\u015ftir.\n","10344bbd":"# Hiperparametre Optimizasyonu \n\n## LightGBM ve Catboost\n\n* Base model sonu\u00e7lar\u0131nda d\u00fc\u015f\u00fck hata veren LightGBM ve Catboost modelleri i\u00e7in  hiperparametre optimizasyonu yap\u0131ld\u0131.","b36bc8a3":"# Feature Importance\n\n* \u0130ki model i\u00e7in de de\u011fi\u015fken \u00f6nem d\u00fczeylerine bak\u0131ld\u0131.","5732a31c":"# MODELLEME\n\n## Base Model","26e64cff":"# Kategorik Ve Say\u0131sal De\u011fi\u015fken Analizi","955d4f77":"# One-Hot Encoding","537deb10":"## Veri Setindeki Ayk\u0131r\u0131 De\u011ferlerin Saptanmas\u0131 Ve \u00c7\u00f6z\u00fcm\u00fc","a190d1ff":"Eksik g\u00f6zlem yok","ed4ca0e2":"## Veri Setindeki Eksik G\u00f6zlemlerin Saptanmas\u0131 ve \u00c7\u00f6z\u00fcm\u00fc"}}