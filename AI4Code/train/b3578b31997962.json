{"cell_type":{"1c97e3af":"code","d07a13be":"code","cf5b0296":"code","e726be84":"code","41dc55c3":"code","519fc717":"code","1e854169":"code","6b922968":"code","3c06ffed":"code","8f359e61":"markdown","954c9099":"markdown","dc4cbfdb":"markdown","6e29aee6":"markdown","8793d269":"markdown","1e39d7db":"markdown"},"source":{"1c97e3af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d07a13be":"train_set = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_set.head()","cf5b0296":"train_set.info()","e726be84":"features = train_set[['Pclass', 'Age', 'Sex']]\nlabel = train_set['Survived']\nfeatures.info()","41dc55c3":"features['Age'].fillna(features['Age'].mean(), inplace=True)\nfeatures['Sex'].replace('male', 0, inplace=True)\nfeatures['Sex'].replace('female', 1, inplace=True)\nfeatures.head()","519fc717":"from sklearn.model_selection import train_test_split\nfeatures_train, features_test, label_train, label_test = train_test_split(\n    features, label, test_size=0.25, random_state=33)","1e854169":"from sklearn.feature_extraction import DictVectorizer\nvec = DictVectorizer(sparse=False)\n\nfeatures_train = vec.fit_transform(features_train.to_dict(orient='record'))\nfeatures_test = vec.fit_transform(features_test.to_dict(orient='record'))\nprint(vec.feature_names_)","6b922968":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(features_train, label_train)\nlabel_predict = dtc.predict(features_test)\nlabel_predict","3c06ffed":"from sklearn.metrics import classification_report\nprint(dtc.score(features_test, label_test))\nprint(classification_report(label_predict, label_test,\n                            target_names=['died', 'survived']))","8f359e61":"### Character Feature Converter","954c9099":"### Read datasets","dc4cbfdb":"### Data process","6e29aee6":"### Train and test dataset split","8793d269":"### Decision tree model","1e39d7db":"### Select features of dataset"}}