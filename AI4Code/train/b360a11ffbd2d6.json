{"cell_type":{"19eda3f7":"code","72f713ef":"code","e7f65f45":"code","ca3903aa":"code","020bed7a":"code","af7dd1f9":"code","89a9f760":"code","c4e911bd":"code","735a810f":"code","a998d1e5":"code","ddb1a989":"code","f7ee5572":"code","5c7dfab7":"code","d55a15ef":"code","d10b72b4":"code","c26e0501":"code","6cbd0040":"markdown","88d830ef":"markdown","3def3c23":"markdown","8f8ea308":"markdown","86a39a56":"markdown","d356b069":"markdown","689e0a03":"markdown","fe1bc1d5":"markdown"},"source":{"19eda3f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","72f713ef":"data = pd.read_csv(\"..\/input\/train.csv\")\n\ndata.head(5)","e7f65f45":"data.shape","ca3903aa":"label = data['label']\nfinal_data= data.drop('label', axis=1)","020bed7a":"fig = plt.figure(figsize=(20,15))\n\nfor i in range(1,10,1):\n    \n    plt.subplot(3,3,i)\n    image = final_data.iloc[i].as_matrix().reshape(28,28)\n    plt.imshow(image, cmap='gray')  \n    plt.xlabel(label[i])\nplt.show()","af7dd1f9":"# STEP-1\nstd_data = StandardScaler().fit_transform(final_data)\nprint(std_data.shape)","89a9f760":"# STEP-2\nCoVMat = np.matmul(std_data.T , std_data)\nprint(CoVMat.shape)","c4e911bd":"# STEP-3\nfrom scipy.linalg import eigh\n\n# the parameter 'eigvals' is defined (low value to heigh value) \n# eigh function will return the eigen values in asending order\n# this code generates only the top 2 (782 and 783) eigenvalues.\nvalues, vectors = eigh(CoVMat , eigvals=(782,783)) \n\nprint(\"The shape of Eigen Vectors\", vectors.shape)","735a810f":"#STEP-4\nnew_data = np.matmul(vectors.T , std_data.T)\nprint(\"The shape of new data\", new_data.shape)","a998d1e5":"stacking = np.vstack((new_data , label)).T\ndataframe = pd.DataFrame(data=stacking , columns=(\"1st component\", \"2nd Component\" , \"Labels\"))\n\ndataframe.head(5)","ddb1a989":"import seaborn as sns\nsns.FacetGrid(dataframe , hue='Labels', height=8).map(plt.scatter, '1st component' , '2nd Component').add_legend()\nplt.show()","f7ee5572":"pca = PCA(n_components=2).fit_transform(std_data)\nprint(\"The shape of PCA reduced \" ,pca.shape)","5c7dfab7":"stacking = np.vstack((pca.T , label)).T\ndataframe = pd.DataFrame(data=stacking , columns=(\"1st component\", \"2nd Component\" , \"Labels\"))\ndataframe.head(5)","d55a15ef":"sns.FacetGrid(dataframe , hue='Labels', height=8).map(plt.scatter, '1st component' , '2nd Component').add_legend()\nplt.show()","d10b72b4":"pca = PCA(n_components=784).fit(std_data)\n#print(\"The shape of PCA reduce\", pca.shape)","c26e0501":"pca_variance = pca.explained_variance_ratio_\ncumsum_var = np.cumsum(pca_variance)\n\nplt.figure(figsize=(8,6))\nplt.clf()\nplt.plot(cumsum_var, linewidth=2)\nplt.xlabel('n_components')\nplt.ylabel('Cumulative_explained_pca')\nplt.grid()\nplt.axis('tight')\n","6cbd0040":"# Visualising data samples","88d830ef":"## Plotting the data","3def3c23":"# Load The Data ","8f8ea308":"# PCA using Scikit Learn","86a39a56":"## Seperating labels from original data","d356b069":"# 2D visualisation of Data using PCA\n\n*  First we will standardise the data.\n*  Then compute the Co-Variance Matrix of the data\n*  Then Compute Eigen values and Eigen Vectors\n*  projecting the original data sample on the plane formed by two principal eigen vectors by vector-vector multiplication.","689e0a03":"## Creating new dataframe from new coordinates ","fe1bc1d5":"# PCA for dimensionality reduction (Not Visualisation)"}}