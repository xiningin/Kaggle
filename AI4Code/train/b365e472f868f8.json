{"cell_type":{"d2c77ba3":"code","96bcce9a":"code","cfc1b461":"code","7027b546":"code","0ec3261b":"code","11c36ed3":"code","899e1f51":"code","8e1090e8":"code","f746e433":"code","bf0bb455":"code","baf512e8":"code","669dc67c":"code","60f0f05b":"code","765d1769":"code","a7de150a":"code","7a478f30":"code","7a5dc111":"code","c2a617ed":"code","87e62e73":"code","d0c155eb":"code","bac312d8":"code","32b823a4":"code","c297aa51":"code","9c1f62b1":"code","c2a6ffa5":"code","63cedfb3":"code","2e8192c4":"code","e97fa7be":"code","ca1735c1":"code","e62fc0e8":"code","7e9cd9ae":"code","0b7ae023":"code","9d4bb1db":"code","b6fe790b":"code","2964f067":"code","c684fa99":"code","c4bba203":"code","39e16759":"code","0230765a":"code","ed8ce331":"code","512ec09f":"code","c6147e45":"code","0217076b":"code","a603fcc3":"code","daceca24":"code","4969cbf0":"code","51d09002":"code","311a9ef0":"code","c13d0a0e":"code","64afeec4":"code","d3d7a0bf":"code","dc28dfd1":"markdown","0f312306":"markdown","d37fe7ec":"markdown","0ead393b":"markdown","2c783176":"markdown","0c1ac637":"markdown","d77f8014":"markdown","6be2e6ea":"markdown","0a048c81":"markdown","f51e0b40":"markdown","5c7be223":"markdown","72d0889d":"markdown"},"source":{"d2c77ba3":"import numpy as np\nimport pandas as pd \nimport tensorflow as tf\nimport seaborn as sns","96bcce9a":"df = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')\ndf","cfc1b461":"df.info()","7027b546":"print(\"Dataset shape:\", data.shape)","0ec3261b":"data.isnull().sum()","11c36ed3":"data.describe()","899e1f51":"sns.countplot(data=data,x='cap-shape')","8e1090e8":"from sklearn.preprocessing import LabelEncoder\ndf1 = data.copy()\nle = LabelEncoder()\ndf.head()","f746e433":"for col in df1.columns:\n    df1[col] = le.fit_transform(df1[col]) \n    \ndf1","bf0bb455":"df1.describe()","baf512e8":"df1.columns","669dc67c":"count = df1['class'].value_counts()\nplt.figure(figsize=(8,7))\nsns.barplot(count.index, count.values, alpha=0.8, palette=\"prism\")\nplt.ylabel('count', fontsize=12)\nplt.xlabel('class', fontsize=12)\nplt.title('Number of poisonous\/edible mushrooms')\nplt.savefig(\"mushrooms1.png\", format='png', dpi=500)\nplt.show()","60f0f05b":"shape_dict = {\"bell\":\"b\",\"conical\":\"c\",\"convex\":\"x\",\"flat\":\"f\", \"knobbed\":\"k\",\"sunken\":\"s\"}\nlabels = ('convex', 'bell', 'sunken', 'flat', 'knobbed', 'conical')\nplot_col(col='cap-shape', hue='class', labels=labels)","765d1769":"color_dict = {\"brown\":\"n\",\"yellow\":\"y\", \"blue\":\"w\", \"gray\":\"g\", \"red\":\"e\",\"pink\":\"p\",\n              \"orange\":\"b\", \"purple\":\"u\", \"black\":\"c\", \"green\":\"r\"}\nplot_col(col='cap-color', color=color_dict.keys(), labels=color_dict)","a7de150a":"mush = df1[\"veil-type\"].unique()\nmush","7a478f30":"df1.drop([\"veil-type\"],axis=1)","7a5dc111":"df1.info()","c2a617ed":"df1.shape","87e62e73":"df1['class'].unique()","d0c155eb":"df1['class'].value_counts()","bac312d8":"plt.figure(figsize = (17, 10))\nplt.style.use('seaborn-white')\nax=plt.subplot(4,5,1)\nsns.boxplot(x='class',y='population',data=df1)\nax.set_title('population  ')\nax=plt.subplot(4,5,2)\nsns.boxplot(x='class',y='cap-surface',data=df1)\nax.set_title('cap-surfac')\nax=plt.subplot(4,5,3)\nsns.boxplot(x='class',y='habitat',data=df1)\nax.set_title('habitat')\nax=plt.subplot(4,5,4)\nsns.boxplot(x='class',y='bruises',data=df1)\nax.set_title('bruises')\nax=plt.subplot(4,5,5)\nsns.boxplot(x='class',y='odor',data=df1)\nax.set_title('odor ')\nax=plt.subplot(4,5,6)\nsns.boxplot(x='class',y='gill-attachment',data=df1)\nax.set_title('gill-attachment')\nax=plt.subplot(4,5,7)\nsns.boxplot(x='class',y='gill-spacing',data=df1)\nax.set_title('gill-spacing')\nax=plt.subplot(4,5,8)\nsns.boxplot(x='class',y='gill-size',data=df1)\nax.set_title('gill-size ')\nax=plt.subplot(4,5,9)\nsns.boxplot(x='class',y='gill-color',data=df1)\nax.set_title('gill-color')\nax=plt.subplot(4,5,10)\nsns.boxplot(x='class',y='stalk-shape',data=df1)\nax.set_title('stalk-shape  ')\nax=plt.subplot(4,5,11)\nsns.boxplot(x='class',y='stalk-root',data=df1)\nax.set_title('stalk-root')\nax=plt.subplot(4,5,12)\nsns.boxplot(x='class',y='stalk-surface-above-ring',data=df1)\nax.set_title('stalk-surface-above-ring ')\nax=plt.subplot(4,5,13)\nsns.boxplot(x='class',y='stalk-surface-below-ring',data=df1)\nax.set_title('stalk-surface-below-ring')\nax=plt.subplot(4,5,14)\nsns.boxplot(x='class',y='stalk-color-above-ring',data=df1)\nax.set_title('stalk-color-above-ring')\nax=plt.subplot(4,5,15)\nsns.boxplot(x='class',y='stalk-color-below-ring',data=df1)\nax.set_title('stalk-color-below-ring ')\nax=plt.subplot(4,5,16)\nsns.boxplot(x='class',y='veil-type',data=df1)\nax.set_title('sveil-type  ')\nax=plt.subplot(4,5,17)\nsns.boxplot(x='class',y='veil-color',data=df1)\nax.set_title('veil-color')\nax=plt.subplot(4,5,18)\nsns.boxplot(x='class',y='ring-number',data=df1)\nax.set_title('ring-number')\nax=plt.subplot(4,5,19)\nsns.boxplot(x='class',y='ring-type',data=df1)\nax.set_title('ring-type')\nax=plt.subplot(4,5,20)\nsns.boxplot(x='class',y='spore-print-color',data=df1)\nax.set_title('spore-print-color')","32b823a4":"sns.countplot(x=df1['habitat'])","c297aa51":"sns.countplot(x=df1['population'])","9c1f62b1":"\nimport matplotlib.pyplot as plt\nplt.figure(figsize = (15, 10))\nsns.heatmap(df1.corr(), annot = True)","c2a6ffa5":"x = df1.drop(['class'] , axis = 1)\ny = df1['class']\n","63cedfb3":"from sklearn.model_selection import train_test_split\nx_train , x_test , y_train , y_test = train_test_split(x,y,test_size = 0.3 , random_state = 0)","2e8192c4":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(random_state = 0 , max_depth = 5)\ndt.fit(x_train , y_train)","e97fa7be":"dt.score(x_train , y_train)","ca1735c1":"predictions = dt.predict(x_test)","e62fc0e8":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test , predictions)","7e9cd9ae":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(max_depth = 5)","0b7ae023":"rf.fit(x_train , y_train)\nrf.score(x_train , y_train)","9d4bb1db":"predictions = rf.predict(x_test)\nrf.score(x_test , y_test)","b6fe790b":"accuracy_score(y_test , predictions)","2964f067":"from sklearn.neighbors import KNeighborsClassifier\nclassifier_KNN = KNeighborsClassifier(3)\nclassifier_KNN.fit(x_train,y_train)","c684fa99":"prediction_KNN = classifier_KNN.predict(x_test)\nclassifier_KNN.score(x_test , y_test)","c4bba203":"from sklearn.svm import SVC\nclassifier_svm = SVC()\nclassifier_svm.fit(x_train,y_train)","39e16759":"prediction_svm = classifier_svm.predict(x_test)\nclassifier_svm.score(x_test , y_test)","0230765a":"from sklearn.ensemble import GradientBoostingClassifier as gbc\nclassifier_gbc = gbc()\nclassifier_gbc.fit(x_train,y_train)","ed8ce331":"prediction_gbc = classifier_gbc.predict(x_test)\nclassifier_gbc.score(x_test , y_test)","512ec09f":"from sklearn.ensemble import  AdaBoostClassifier as abc\nclassifier_abc = abc()\nclassifier_abc.fit(x_train,y_train)","c6147e45":"prediction_abc = classifier_abc.predict(x_test)\nclassifier_abc.score(x_test , y_test)","0217076b":"from sklearn.naive_bayes import GaussianNB as gnb\nclassifier_gnb = gnb()\nclassifier_gnb.fit(x_train,y_train)","a603fcc3":"prediction_gnb = classifier_gnb.predict(x_test)\nclassifier_gnb.score(x_test , y_test)","daceca24":"names = ['Decision', 'Random', 'KNN','SVM','GBC','ABC', 'GNB' ]\nscores = [0.9778403095321843, 0.9899753781217024, 0.9987694831829368, 0.9897456931911403, 1.0, 1.0, 0.9150943396226415]","4969cbf0":"sc = pd.DataFrame()\nsc['names'] = names\nsc['scores'] = scores\nsc","51d09002":"classifier_GBC = gbc()\nclassifier_gbc.fit(x_train,y_train)","311a9ef0":"y_pred = classifier_gbc.predict(x_test)\ny_pred","c13d0a0e":"from sklearn.metrics import classification_report,roc_auc_score,roc_curve,auc\nreport = classification_report(y_test,y_pred)\nprint(report)","64afeec4":"roc_auc_score(y_test,y_pred)","d3d7a0bf":"fpr,tpr,threshold =roc_curve(y_test,y_pred)\nauc = auc(fpr,tpr)\nplt.figure(figsize=(5,5),dpi=100)\nplt.plot(fpr,tpr,linestyle='-',label = \"(auc = %0.3f)\" % auc)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend()\nplt.show()","dc28dfd1":"# Accuracy prediction","0f312306":"# Gaussian Naive Bayes","d37fe7ec":"## Outlier Detection","0ead393b":"# Gradient Boosting Classifier","2c783176":"# K Nearest Neighbour","0c1ac637":"# Support Vector Machine","d77f8014":"# Attribute Information: (classes: edible=e, poisonous=p)\ncap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n\ncap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n\ncap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n\nbruises: bruises=t,no=f\n\nodor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n\ngill-attachment: attached=a,descending=d,free=f,notched=n\n\ngill-spacing: close=c,crowded=w,distant=d\n\ngill-size: broad=b,narrow=n\n\ngill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n\nstalk-shape: enlarging=e,tapering=t\n\nstalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n\nstalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nstalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nveil-type: partial=p,universal=u\n\nveil-color: brown=n,orange=o,white=w,yellow=y\n\nring-number: none=n,one=o,two=t\n\nring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n\nspore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n\npopulation: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n\nhabitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d","6be2e6ea":"# Ada Boost Classifier","0a048c81":"# Decision Tree Model","f51e0b40":"# Problem Statement\nTo predict whether the mushroom is edible or poisonous","5c7be223":"The .describe() method will give you the statistics of the columns.\n\ncount - shows the number of responses.\nunique - shows the number of unique categorical values.\ntop - shows the highest-occurring categorical value.\nfreq - shows the frequency\/count of the highest-occurring categorical value.","72d0889d":"# Random Forest Model"}}