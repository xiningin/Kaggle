{"cell_type":{"1abd8ac3":"code","1f6c3db5":"code","58b47bb7":"code","b58d8614":"code","9c57c0f1":"code","93de3b94":"code","7c01c123":"code","0a126a11":"code","39a5a67f":"code","53e376c0":"code","8aa71736":"code","8178186c":"code","8e684c63":"code","2c4032c7":"code","b10efd75":"code","28d3d88e":"code","1adc1ebe":"markdown","cefbdf29":"markdown","1d402f3d":"markdown","fdefa679":"markdown","d21b6a8e":"markdown","5ad570f7":"markdown","8aced3e6":"markdown","b847785d":"markdown","344d7f7a":"markdown","3e5186f3":"markdown","38431607":"markdown","8cb66176":"markdown","d57ed044":"markdown","b69b6378":"markdown","942a8efa":"markdown","6a2df94c":"markdown","c322e78f":"markdown"},"source":{"1abd8ac3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1f6c3db5":"import pandas as pd","58b47bb7":"nba_contracts = pd.read_csv(\"..\/input\/nba-contracts\/nba-contracts.csv\")\nnba_players_stats = pd.read_csv(\"..\/input\/nba-contracts\/stats.csv\")\nnba_salaries = pd.read_csv(\"..\/input\/nba-contracts\/salaries.csv\")\n\nnba_salaries.describe()","b58d8614":"nba_players_stats = nba_players_stats.drop(columns=[\"Unnamed: 0\", \"DD2\", \"TD3\", \"FP\"])\nnba_contracts = nba_contracts.drop(columns=[\"web-scraper-order\", \"web-scraper-start-url\", \"name-href\"])\nnba_salaries = nba_salaries.drop(columns=[\"web-scraper-order\", \"web-scraper-start-url\", \"year-href\"])\nnba_players_stats.head()\n","9c57c0f1":"nba_contracts.head(20)","93de3b94":"nba_contracts = nba_contracts[~nba_contracts.contract_years.str.contains(\"Retained\")]\nnba_contracts = nba_contracts[~nba_contracts.contract_years.str.contains(\"Entry Level\")]\nnba_contracts.contract_years.unique()","7c01c123":"nba_contracts[['contract_start','contract_end']] = nba_contracts.contract_years.str.split(\"-\",expand=True,)\nnba_contracts = nba_contracts.drop(columns=[\"contract_years\"])\nnba_contracts[[\"contract_start\", \"contract_end\"]] = nba_contracts[[\"contract_start\", \"contract_end\"]].apply(pd.to_numeric)\nnba_contracts = nba_contracts[nba_contracts['contract_start'] > 2010]\nnba_contracts = nba_contracts[nba_contracts['contract_start'] != nba_contracts['contract_end']]\n\n\nnba_contracts\n","0a126a11":"nba_salaries['year'] = nba_salaries['year'].str.split('\/').str[0]\nnba_salaries['salary'] = nba_salaries['salary'].str.replace('$', '')\nnba_salaries['salary'] = nba_salaries['salary'].str.replace(',', '')\nnba_salaries[[\"year\", \"salary\"]] = nba_salaries[[\"year\", \"salary\"]].apply(pd.to_numeric)\nnba_salaries.head(10)","39a5a67f":"nba_salaries.groupby(['year','name']).size().reset_index().rename(columns={0:'count'}).sort_values(by=['count'], ascending=False)","53e376c0":"nba_salaries = nba_salaries.drop_duplicates(subset=['year', 'name'])\nnba_salaries.groupby(['year','name']).size().reset_index().rename(columns={0:'count'}).sort_values(by=['count'], ascending=False)","8aa71736":"avg_salaries = []\nfor contract in nba_contracts.itertuples():\n    salary = 0\n    iteration = 0\n    \n    #Small loop less than 5 iterations maximum    \n    for year in range(contract.contract_start, contract.contract_end + 1):   \n        salary_row = nba_salaries.loc[(nba_salaries.year == year) & (nba_salaries.name == contract.name)]\n        if not salary_row.empty:\n            salary += salary_row.iloc[0]['salary']\n            iteration += 1\n            \n    if iteration == 0:\n        avg_salaries.append(0)\n    else:\n        avg_salaries.append(salary \/ iteration)\n    \nnba_contracts[\"avg_salary\"] = avg_salaries\nnba_contracts.head()\n    \n    \n    ","8178186c":"nba_contracts = pd.merge(nba_contracts, nba_players_stats,  how='left', left_on=['name','contract_start'], right_on = ['PLAYER','Year'])\nnba_contracts = nba_contracts.drop(columns=[\"PLAYER\", \"TEAM\", \"Year\"])\nnba_contracts.columns = [x.upper() for x in nba_contracts.columns]\nnba_contracts.head()","8e684c63":"nba_contracts = nba_contracts.dropna(subset=[\"AGE\", \"MIN\"])\nnba_contracts.head()","2c4032c7":"nba_contracts = nba_contracts[nba_contracts.AVG_SALARY != 0]\n\nmissing_values_count = nba_contracts.isnull().sum()\nmissing_values_count","b10efd75":"s = (nba_contracts.dtypes == 'object')\nobject_cols = list(s[s].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","28d3d88e":"nba_contracts.to_csv('contracts.csv',index=False)","1adc1ebe":"# Dropping useless columns","cefbdf29":"As you can see there are a lot contract where stats where not asigned. It might be because its first contract of the player and he was undrafted, so his contract wasn't marked as \"Entry level\". The other reason might be that player was out of the league and now her returns. We will drop those rows.","1d402f3d":"As we can see there is only one player with in this situation, so we will just drop this one row.","fdefa679":"# Exporting data to csv file","d21b6a8e":"Delete cotracts that havee \"AVG_SALARY\" equal to 0. Than we need to check if there are any other missing values.","5ad570f7":"Thre is posibility that player can have more salaries in one year.","8aced3e6":"Checking if there are categorical variables.","b847785d":"# Missing values","344d7f7a":"# Reading data files","3e5186f3":"Column \"NAME\" is the only categorical variable and we are going to leave it.","38431607":"First we need to clean \"contract_years\" column. As you can see there is more information included in this column than we need. We want it to include only information about years. Let's start with deleting records which contain strings \"Entry Level\" or \"Retained\" next to years. They won't be needed, because \"Entry Level\" means that its first contract of a player, and the \"Retained\" contracts can be deleted without loosing substantial amount of information.","8cb66176":"Now we need to create new column in \"nba_contracts\" and name it \"avg_salary\". It will represent average salary player is paid per year on a specific contract.","d57ed044":"Last thing we need to do is adding stats player averaged during his contract and arrange dateframe.","b69b6378":"We want to change format of column \"year\" in \"nba_salairs\". We want it to provide only the year when season started. After that we want to remove dollar sign from the values in \"salary\" column and also change it to numeric.","942a8efa":"# Initial data manipulation","6a2df94c":"Now in contract_years column there is only contract time span in years. Next we need to split this column into: \"contract_start\" and \"contract_end\" columns and change their type to numeric. The contracts that start before 2010 will also be droped. The contracts which start and end in the same year will also be dropped.","c322e78f":"# Further data cleansing"}}