{"cell_type":{"467dabe0":"code","ea5598f8":"code","575eb6fa":"code","42f7bf66":"code","07e08270":"code","b232f5e6":"code","7ef0408d":"code","c3bcb38f":"code","06914afb":"code","f9e76ff7":"code","1c78211d":"code","f6990d01":"code","0bfab38e":"code","597dcffa":"code","b3b90480":"markdown","5a2f85d6":"markdown","ef53b8b0":"markdown","671f28f7":"markdown","f4fc8e75":"markdown","b82969e1":"markdown"},"source":{"467dabe0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea5598f8":"df = pd.read_csv(\"\/kaggle\/input\/pokemon-type-matchup-data\/PokeTypeMatchupData.csv\")\ndf.head(20)","575eb6fa":"df.columns","42f7bf66":"df[df.columns] = df.apply(lambda x: x.str.strip(\"*\"))\ndf","07e08270":"types = df.iloc[:,2:]\ntypes = types.astype(\"float\")\ntypes","b232f5e6":"print(types[\"Fire\"].dtypes)","7ef0408d":"types.insert(loc=0, column='Pokemon', value=df[\"Name\"])\ntypes","c3bcb38f":"#balbasaurs stats\ntypes.iloc[:1,:]","06914afb":"types.iloc[:1,1:].values","f9e76ff7":"types.columns.value_counts().sum()","1c78211d":"for i in range(18):\n    x = types.iloc[:1,1:].values[0][i]\n    if x > 1:\n        print(\"Your Pokemon is WEAK   against to this type:\",types.iloc[:1,1:].columns[i])\n    elif 0 < x < 1:\n        print(\"Your Pokemon is STRONG against to this type:\",types.iloc[:1,1:].columns[i])\n    elif x == 1:\n        print(\"Your Pokemon has EQUAL power to this   type:\",types.iloc[:1,1:].columns[i])","f6990d01":"def your_pokemon_stats(row):\n    \n    a = types.iloc[row-1:row,:1].values[0][0]\n    \n    for i in range(18): \n        x = types.iloc[row-1:row,1:].values[0][i]\n        if x > 1:\n            print(a,\"is  WEAK   against to this type:\",types.iloc[:1,1:].columns[i])\n        elif 0 < x < 0.5:\n            print(a,\"is  STRONG against to this type:\",types.iloc[:1,1:].columns[i])\n        elif 0.5 <= x < 1:\n            print(a,\"is  HALF-STRONG against to this type:\",types.iloc[:1,1:].columns[i])\n        elif x == 1:\n            print(a,\"has EQUAL power to this   type:\",types.iloc[:1,1:].columns[i])\n","0bfab38e":"#input your pokemons row number+1\nyour_pokemon_stats(9)","597dcffa":"your_pokemon_stats(6)","b3b90480":"**Test some pokemons**","5a2f85d6":"*See how many types there are*","ef53b8b0":"> Here are 2 pokemon test, you can check the table if you want :)\n**Thanks for reading**","671f28f7":"*Ejecting the asterisks from the data set*","f4fc8e75":"# *Find your favourite pokemon in the list and find out which types are weak against yours*","b82969e1":"*Making all the data set values object to float*"}}