{"cell_type":{"93fe4a04":"code","79ff2f00":"code","037dcd3d":"code","ea766645":"code","134ba979":"code","d30fc73a":"code","f2ac095a":"code","80ad8abf":"code","eb257919":"code","01cf395f":"code","9358f307":"code","4decc5dc":"code","1dd7d18e":"code","4df20c6d":"code","06084c09":"code","3c7834a6":"code","aeba85ed":"code","0a21ed02":"code","027ed446":"code","be413ecf":"code","a49b188f":"code","36eefaea":"code","48120b51":"code","9a89b92d":"markdown","05084c47":"markdown","057f35ff":"markdown","8c0a2bc2":"markdown","e0832c07":"markdown","2575a6bd":"markdown","1b5a7d67":"markdown","c2c02b0b":"markdown","245e8f20":"markdown","e49583d1":"markdown","603fecb8":"markdown","5bd212ad":"markdown","7de778d8":"markdown","99a35bf7":"markdown","d4ce1bd7":"markdown","77b47944":"markdown"},"source":{"93fe4a04":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = [16, 8]\npd.set_option('display.max_columns', None)","79ff2f00":"sub_df = pd.read_csv('\/kaggle\/input\/bri-data-hackathon-people-analytic\/sample_submission.csv')\ntrain_df = pd.read_csv('\/kaggle\/input\/bri-data-hackathon-people-analytic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/bri-data-hackathon-people-analytic\/test.csv')\n\nprint('Train shape:', train_df.shape)\nprint('Test shape:', test_df.shape)","037dcd3d":"# number_of_dependences is enough, add male \/ female will be redundant\ntrain_df = train_df.drop(['number_of_dependences (male)', 'number_of_dependences (female)'], axis=1)\ntest_df = test_df.drop(['number_of_dependences (male)', 'number_of_dependences (female)'], axis=1)\n\ntrain_df['age'] = 2020 - train_df['age']\ntest_df['age'] = 2020 - test_df['age']","ea766645":"null_col = train_df.columns[train_df.isna().any()]\n\nnull_df = train_df[null_col].isna().sum().rename('missing rows').to_frame()\nnull_df['percentage'] = round(null_df['missing rows'] \/ train_df.shape[0] * 100, 3)\nnull_df['percentage'] = null_df['percentage'].astype('str')\n\nnull_df.sort_values('missing rows', ascending=False).style.background_gradient('Blues')","134ba979":"if test_df.isna().any().sum() == 0:\n    print('Test dataset does not have missing values')\nelse:\n    print('Test dataset have missing values')","d30fc73a":"print('Total duplicated rows:', train_df.duplicated().sum())\n\ntrain_df.drop_duplicates(inplace=True)","f2ac095a":"best_performance_comparison = train_df['Best Performance'].value_counts()\n\nplt.pie(best_performance_comparison.values,\n        labels=best_performance_comparison.index,\n        autopct='%.1f%%',\n        textprops={'fontsize': 20, 'color': 'white'},\n        labeldistance=None,\n        explode=(0.1, 0)\n)\n\nplt.title('Average & Best Employee comparison', fontsize=24)\nplt.legend(['Average', 'Best'], fontsize=20)\nplt.axis('equal')\nplt.tight_layout()\nplt.show()","80ad8abf":"plt.figure(figsize=(16, 10))\naxes = sns.countplot(train_df['gender'], hue=train_df['Best Performance'], palette=['#d96548', 'dodgerblue'])\naxes.set_title('Performance base on Gender', fontsize=26, pad=18)\n\nfor val in axes.patches:\n    pct = '{:.2f}%'.format(100 * val.get_height() \/ train_df.shape[0])\n    xpos = val.get_x() + val.get_width() \/ 2.\n    ypos = val.get_height()\n    axes.annotate(pct, (xpos, ypos), ha='center', va='center', fontsize=18, xytext=(0, 12), textcoords='offset points')\n\naxes.set_xlabel(None)\n\nplt.legend(['Average', 'Best'], fontsize=18)\nplt.tight_layout()\nplt.show()","eb257919":"print(\"Best Female at work\", round(3.27 \/ (22.57 + 3.27), 3))\nprint(\"Best Male at work\", round(8.91 \/ (65.25 + 8.91), 3))","01cf395f":"plt.figure(figsize=(16, 10))\naxes = sns.countplot(train_df['marital_status_maried(Y\/N)'], hue=train_df['Best Performance'], palette=['#d96548', 'dodgerblue'])\naxes.set_title('Performance base on Marital Status', fontsize=26, pad=18)\n\nfor val in axes.patches:\n    pct = '{:.2f}%'.format(100 * val.get_height() \/ train_df.shape[0])\n    xpos = val.get_x() + val.get_width() \/ 2.\n    ypos = val.get_height()\n    axes.annotate(pct, (xpos, ypos), ha='center', va='center', fontsize=18, xytext=(0, 12), textcoords='offset points')\n\naxes.set_xlabel(None)\n\nplt.legend(['Average', 'Best'], fontsize=18)\nplt.tight_layout()\nplt.show()","9358f307":"print(\"Already married at work\", round(9.96 \/ (61.44 + 9.96), 3))\nprint(\"Have not married at work\", round(2.23 \/ (26.37 + 2.23), 3))","4decc5dc":"emp_count = train_df['Employee_type'].value_counts()\n\nfig = plt.figure()\nfig.patch.set_facecolor('black')\n\nplt.pie(emp_count.values,\n        labels=emp_count.index,\n        autopct='%1.1f%%',\n        pctdistance=0.8,\n        textprops={'color': 'black', 'fontsize': 22},\n        wedgeprops={'linewidth': 1, 'edgecolor': 'black'},\n        labeldistance=None,\n        startangle=185\n)\n\ncentre_circle = plt.Circle((0, 0), 0.5, edgecolor='black',\n                           facecolor='black', fill=True, linewidth=0.25)\n\np = plt.gcf()\np.gca().add_artist(centre_circle)\n\nplt.legend(['type_A - Mantri Kupedes', 'type_B - Mantri KUR', 'type_C - Mantri Briguna'])\nplt.axis('equal')\nplt.show()","1dd7d18e":"train_df.groupby('Employee_type')['Best Performance'].mean().round(3).sort_values(ascending=False).multiply(100)","4df20c6d":"plt.figure(figsize=(16, 10))\naxes = sns.countplot(train_df['Employee_status'], hue=train_df['Best Performance'], palette=['#d96548', 'dodgerblue'])\naxes.set_title('Performance base on Employee status', fontsize=26, pad=18)\n\nfor val in axes.patches:\n    pct = '{:.2f}%'.format(100 * val.get_height() \/ train_df.shape[0])\n    xpos = val.get_x() + val.get_width() \/ 2.\n    ypos = val.get_height()\n    axes.annotate(pct, (xpos, ypos), ha='center', va='center', fontsize=18, xytext=(0, 12), textcoords='offset points')\n    \naxes.set_xlabel(None)\n\nplt.legend(['Average', 'Best'], fontsize=18, loc=1)\nplt.tight_layout()\nplt.show()","06084c09":"train_df[train_df['Employee_status'] == 'Contract']['Best Performance'].sum()","3c7834a6":"ed_level = train_df.groupby('Education_level').size().sort_values(ascending=False)\ned_level.rename(index={'level_0': 'Internal course',\n                       'level_1': 'SLTA',\n                       'level_2': 'D1',\n                       'level_3': 'D3\/D4',\n                       'level_4': 'S1',\n                       'level_5': 'S2'}, inplace=True)\n\ned_level","aeba85ed":"ed_level_perform = train_df.groupby('Education_level')['Best Performance'].mean().round(3).sort_values(ascending=False).multiply(100)\n\ned_level_perform.rename(index={'level_0': 'Internal course',\n                       'level_1': 'SLTA',\n                       'level_2': 'D1',\n                       'level_3': 'D3\/D4',\n                       'level_4': 'S1',\n                       'level_5': 'S2'}, inplace=True)\n\ned_level_perform","0a21ed02":"plt.style.use('bmh')\nfor col in ['job_duration_in_current_job_level', 'job_duration_in_current_person_level', 'job_duration_in_current_branch', 'age', 'number_of_dependences', 'GPA']:\n    \n    try:\n        sns.distplot(train_df[col], hist=False, label='Train')\n        sns.distplot(test_df[col], hist=False, label='Test')\n        \n        plt.xlabel(None)\n        plt.title(col, pad=15)\n        plt.tight_layout()\n        plt.show()\n        \n    except:\n        continue","027ed446":"jobdur_from_training_under12 = train_df[train_df['job_duration_from_training'] <= 12]['Best Performance'].value_counts()\njobdur_from_training_up12un24 = train_df[(train_df['job_duration_from_training'] > 12) & (train_df['job_duration_from_training'] < 24)]['Best Performance'].value_counts()\njobdur_from_training_up24 = train_df[train_df['job_duration_from_training'] >= 24]['Best Performance'].value_counts()\n\nfig, (ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=3, figsize=(18, 8))\n\nax1.pie(jobdur_from_training_under12.values,\n        labels=jobdur_from_training_under12.index,\n        autopct='%.1f%%',\n        textprops={'fontsize': 20, 'color': 'white'},\n        labeldistance=None,\n        explode=(0.1, 0)\n)\n\nax2.pie(jobdur_from_training_up12un24.values,\n        labels=jobdur_from_training_up12un24.index,\n        autopct='%.1f%%',\n        textprops={'fontsize': 20, 'color': 'white'},\n        labeldistance=None,\n        explode=(0.1, 0)\n)\n\nax3.pie(jobdur_from_training_up24.values,\n        labels=jobdur_from_training_up24.index,\n        autopct='%.1f%%',\n        textprops={'fontsize': 20, 'color': 'white'},\n        labeldistance=None,\n        explode=(0.1, 0)\n)\n\nax1.set_title('Below 12 ', fontsize=20)\nax2.set_title('12 - 24', fontsize=20)\nax3.set_title('Above 24', fontsize=20)\n\nax2.legend(['Average', 'Best'], fontsize=16, loc=8)\n\nax1.axis('equal')\nax2.axis('equal')\nax3.axis('equal')\n\nplt.tight_layout()\nplt.show()","be413ecf":"print('Minimal value:', train_df['job_duration_as_permanent_worker'].min())\nprint('Maximal value:', train_df['job_duration_as_permanent_worker'].max())\nprint('--------------------------------------------------------------------------------------------------------------')\nprint('job_duration_as_permanent_worker (below 12):', train_df[train_df['job_duration_as_permanent_worker'] <= 12]['Best Performance'].mean() * 100)\nprint('job_duration_as_permanent_worker (12 to 24):', train_df[(train_df['job_duration_as_permanent_worker'] > 12) & (train_df['job_duration_from_training'] < 24)]['Best Performance'].mean() * 100)\nprint('job_duration_as_permanent_worker (above 24):', train_df[train_df['job_duration_as_permanent_worker'] >= 24]['Best Performance'].mean() * 100)","a49b188f":"import re\n\ndef remove_redundant_feat_1(text):\n    \n    text = re.sub(r'achiev_< 50%', 'Pencapaian < 50%', text)\n    text = re.sub(r'achiev_50%-100%', 'Pencapaian 50%-100%', text)\n    text = re.sub(r'achiev_100%-150%', 'Pencapaian 100%-150%', text)\n    text = re.sub(r'achiev_> 1.5', 'Pencapaian > 1.5', text)\n    \n    return text\n    \n\n# train_df['achievement_target_1'] = train_df['achievement_target_1'].apply(remove_redundant_feat)\n# train_df['achievement_target_2'] = train_df['achievement_target_2'].apply(remove_redundant_feat)\n# train_df['achievement_target_3'] = train_df['achievement_target_3'].apply(lambda x: re.sub(r'not_reached', 'not reached', x))\n\n# test_df['achievement_target_1'] = test_df['achievement_target_1'].apply(remove_redundant_feat)\n# test_df['achievement_target_2'] = test_df['achievement_target_2'].apply(remove_redundant_feat)\n# test_df['achievement_target_3'] = test_df['achievement_target_3'].apply(lambda x: re.sub(r'not_reached', 'not reached', x))","36eefaea":"##############################################################################################################","48120b51":"from IPython.display import YouTubeVideo\n\nYouTubeVideo('tNu6on8dk2o', width=800, height=450)","9a89b92d":"Become best employee in workplace isn't easy, it depends on a lot of factors like passion, company leadership, environment and a lot of things. Only few people from each company can give best performance. That's why we only have 12.2 % best performance employee this dataset","05084c47":"### Remove duplicated rows","057f35ff":"## How about Education Level? Does it affect employee performance?\n\n* This dataset show to us, SLTA (highschool) can became best performance employee, even better than S1 & S2\n* Anyway this is because we only have 192 people with SLTA degree in this dataset, compare with 15192 people with S1 degree\n* I personally believe education degree is very important, but love our job (passion) and work hard are more important","8c0a2bc2":"### Why NONE of the workers on the contract period can give best performance?\n\nIn my opinion, employee on the contract should work more seriously to become a permanent employee, this is weird","e0832c07":"### But test dataset does not have missing values","2575a6bd":"### Features that have missing values - Train data","1b5a7d67":"* 14.1 % Mantri Kupedes have a best performance, better than others\n* Although we only have 3.4% Mantri Briguna in dataset, but 12.4% from them have a best performance","c2c02b0b":"## Simple EDA for get insight\n\nTerima kasih banyak kepada team BRI Data Hackathon yang sudah menyelenggarakan event ini. Notebook ini dibuat hanya untuk sharing, tanpa ada maksud lain. Semoga ada banyak peserta lainnya yang mensharingkan notebooknya agar kita semua bisa belajar :)","245e8f20":"### Distribution in some training data & test data are different\n\n* Different distribution maybe will affect our model prediction\n* Anyway prediction on test data will calculate only 50%\n* We don't know about distribution in private dataset, don't overfit to test dataset","e49583d1":"## PASSION in WORK\n\nHope this video can help a lot of people to be able to find their passion in workplace","603fecb8":"## We also have different values with same meaning in our dataset","5bd212ad":"### Mantri = Marketing dan Analisis Mikro BRI\n\nMantri adalah petugas lapangan yang menangani masalah kredit pada BRI Unit, juga mempromosikan produk BRI dan mengajak masyarakat untuk berhubungan dengan BRI\n\nAda 3 tipe mantri pada dataset:\n* Mantri Kupedes\n* Mantri KUR\n* Mantri Briguna\n\n[More detail here](https:\/\/e-jurnal.stienobel-indonesia.ac.id\/index.php\/akmen\/article\/download\/162\/167\/)","7de778d8":"## EDA for analysis","99a35bf7":"### We got quite significant difference, married people are more productive at workplace\n\nMarried people have a family that depending on them, this makes them more serious & productive at workplace, this make sense","d4ce1bd7":"## We need process to become best employee, sometimes this takes time\n\n* job_duration_from_training : lama bekerja mulai dari training\n* job_duration_as_permanent_worker : lama bekerja sebagai pekerja tetap\n\nThis dataset show to us, more employee give their best performance (on average) after reach 24 in job_duration_from_training & job_duration_as_permanent_worker","77b47944":"* It's seems that MALE are more productive than FEMALE, because we have more MALE in this dataset\n* But if we calculate it, FEMALE are A LITTLE BIT MORE PRODUCIVE than MALE at work\n* But this difference is not significant"}}