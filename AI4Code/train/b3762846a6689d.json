{"cell_type":{"b0f76a93":"code","f3be6c18":"code","d3e6749e":"code","b93a815d":"code","cbf59018":"code","eadd19bf":"code","00337fc3":"code","c2737f36":"code","05f59af2":"code","abca1566":"code","918ad27b":"code","44b365c1":"code","234cc0e0":"code","36db4aac":"code","c24c3a04":"code","4b361b22":"code","e0bb345a":"code","0a4c8320":"code","20bd0e27":"code","291d78ae":"code","8c3ed1f2":"code","415b76a7":"code","9313d4d3":"code","b392ddaa":"code","7367ba99":"code","5ee78373":"code","86d55cfb":"code","67947ded":"code","b53513c7":"code","804751e6":"code","e2850167":"code","3fa5730e":"code","e1afd5bb":"code","a5c0d0eb":"code","229d7faa":"code","82079c39":"code","3888d2bd":"code","b147b8b7":"code","73aa62e6":"code","35284750":"code","2241acd7":"code","07c35c3b":"code","76121075":"code","ca33b449":"code","c669b53a":"code","75143ebc":"code","60937ab9":"code","8b5dcd90":"code","8a54d4f6":"code","47af9e75":"code","9b7a44b0":"code","9975eac2":"code","8ddfa575":"code","13165ac0":"code","790c16a8":"code","248d7c7c":"code","1000ae78":"code","2d71cb7e":"code","72aaa017":"code","ff5aa5b2":"code","aa1d3db8":"code","94d3ec0f":"code","906d8c2c":"code","815f9527":"code","5f3a8bd5":"code","eae36a14":"code","d2ddd451":"code","e6ee1360":"code","65f7fefc":"code","3ce0c999":"code","47d3edfc":"code","0e4cc36f":"code","9c7a3655":"code","8691bf78":"code","5a4af5ba":"code","1e80c6c2":"code","557d289c":"code","224f9b8c":"code","0250f920":"code","68fc7bad":"code","405ec6c0":"code","c361b8c1":"code","2a126347":"code","cdc139fd":"code","b8750d1b":"code","36ea4e99":"code","58cec2e3":"code","b8db5ab2":"code","0f5e4b27":"code","2ea906fe":"code","fed4f3a5":"code","e5ddf034":"code","a6b3061f":"code","95a0a64d":"code","6c5cdbeb":"code","21c92818":"code","e570e201":"code","7e6c134e":"code","b3d78939":"code","87883d3f":"code","dfc75e73":"code","9f043db4":"code","2b614ee0":"code","c7d543c2":"code","8cbf7769":"code","9f2e9aac":"code","55316dbe":"code","ed0d94a2":"code","93f9bfe2":"code","3f6b7348":"code","6b51562f":"code","79ce2560":"code","145b9a7b":"code","b72eafa0":"code","ac49b3fd":"code","d7864350":"code","64641a95":"code","638540bc":"code","ceedbb81":"code","aecf69e2":"code","3380c9db":"code","d9f9f53b":"code","8a75c626":"code","64578ed3":"code","44ed021f":"code","5b89603f":"code","65dfaef5":"code","5633bf02":"code","5bde93e2":"code","612f7321":"code","5ac32f60":"code","1a47799e":"code","0cd07b34":"code","e93f072f":"code","231ae574":"code","5b94e50a":"code","326e2db2":"code","187f7374":"code","1852e46e":"code","e8d81d0d":"code","da1f69a6":"code","6ee80f21":"code","2f670731":"code","eedf9a13":"code","467ff4ea":"code","c79e858d":"code","75a813cf":"code","25953615":"code","4bad2d12":"code","f06843c7":"code","5f83fb44":"code","2267146c":"code","1799f01e":"code","877ef876":"code","81433820":"code","306190e7":"code","c67cdd84":"code","e1ac1645":"code","0e29d5a7":"code","d7f9891d":"code","fd16f2b6":"code","ec8c6a9c":"code","e947a975":"code","b6e4026f":"code","165fb64d":"code","856408bd":"code","6dfc4fd1":"code","49237345":"code","25c12a02":"code","3f09bd04":"code","3457f211":"code","21dc33ad":"code","d7228220":"code","45069247":"code","5be0565e":"code","86aee3a2":"code","cc7fb02f":"markdown","4f36e400":"markdown","2367b5e4":"markdown","398bf663":"markdown","f31139c0":"markdown","2d572028":"markdown","c73b0334":"markdown","def39802":"markdown","f615ad91":"markdown","593a996d":"markdown","d46aab37":"markdown"},"source":{"b0f76a93":"import pandas as pd\nimport seaborn as sns\nimport numpy as np","f3be6c18":"!pip install pixiedust","d3e6749e":"import pixiedust","b93a815d":"ConsolidationTcLong=pd.read_csv(\"\/kaggle\/input\/unis-ice-measurements-2019\/2019.08.05_consolidation_Tc_long.csv\")\nConsolidationTcShort=pd.read_csv(\"\/kaggle\/input\/unis-ice-measurements-2019\/2019.08.05_consolidation_Tc_short.csv\")\nConsolidationTi=pd.read_csv(\"\/kaggle\/input\/unis-ice-measurements-2019\/2019.08.05_consolidation_Ti.csv\")\nDirectMeasurement=pd.read_csv(\"\/kaggle\/input\/unis-ice-measurements-2019\/directMeasurement.csv\")\nShortplasticstringcalibration=pd.read_csv(\"\/kaggle\/input\/unis-ice-measurements-2019\/Shortplasticstringcalibration.csv\")","cbf59018":"DirectMeasurement.head()","eadd19bf":"Shortplasticstringcalibration.head()","00337fc3":"ConsolidationTi.head()","c2737f36":"ConsolidationTcLong.head()","05f59af2":"ConsolidationTcShort.head()","abca1566":"def moveRow0toHeader(dataset):\n    new_header =dataset.iloc[0]\n    dataset = dataset[1:] \n    dataset.columns = new_header \n    return dataset","918ad27b":"ConsolidationTcLong=moveRow0toHeader(ConsolidationTcLong)\nConsolidationTcShort=moveRow0toHeader(ConsolidationTcShort)\nConsolidationTi=moveRow0toHeader(ConsolidationTi)","44b365c1":"ConsolidationTi.describe()","234cc0e0":"ConsolidationTi=ConsolidationTi[2:]","36db4aac":"ConsolidationTi","c24c3a04":"import matplotlib.pyplot as plt","4b361b22":"def objectToFloat(dataset,startcol):\n    for column in dataset.columns[startcol:]:\n        dataset[column]=dataset[column].astype(float)\n    return dataset","e0bb345a":"ConsolidationTi=objectToFloat(ConsolidationTi,1)","0a4c8320":"ConsolidationTi['TIMESTAMP'] = pd.to_datetime(ConsolidationTi['TIMESTAMP'])","20bd0e27":"ConsolidationTi.dtypes","291d78ae":"ConsolidationTcShort.head()","8c3ed1f2":"ConsolidationTcShort.keys()","415b76a7":"ConsolidationTcShort.rename(columns={'      Time': 'Time','      #3;Dig.Temp;oC': 'Sensor1', '      #4;Dig.Temp;oC': 'Sensor2', '      #5;Dig.Temp;oC': 'Sensor3','      #6;Dig.Temp;oC': 'Sensor4','      #7;Dig.Temp;oC': 'Sensor5', '      #8;Dig.Temp;oC': 'Sensor6','      #9;Dig.Temp;oC': 'Sensor7','      #10;Dig.Temp;oC': 'Sensor8','      #11;Dig.Temp;oC': 'Sensor9','      #12;Dig.Temp;oC': 'Sensor10', '      #HK-Bat;V': 'Battery'}, inplace=True)\n","9313d4d3":"ConsolidationTcShort.head()","b392ddaa":"ConsolidationTcShort=objectToFloat(ConsolidationTcShort,2)\n","7367ba99":"sns.lineplot(x=ConsolidationTcShort.Time,y=ConsolidationTcShort.Sensor1)\nsns.lineplot(x=ConsolidationTcShort.Time,y=ConsolidationTcShort.Sensor2)\nsns.lineplot(x=ConsolidationTcShort.Time,y=ConsolidationTcShort.Sensor3)\nsns.lineplot(x=ConsolidationTcShort.Time,y=ConsolidationTcShort.Sensor4)\nsns.lineplot(x=ConsolidationTcShort.Time,y=ConsolidationTcShort.Sensor5)\n#sns.lineplot(x=ConsolidationTcShort.Time,y=ConsolidationTcShort.Sensor6)\n#sns.lineplot(x=ConsolidationTcShort.Time,y=ConsolidationTcShort.Sensor7)\n#sns.lineplot(x=ConsolidationTcShort.Time,y=ConsolidationTcShort.Sensor8)\n#sns.lineplot(x=ConsolidationTcShort.Time,y=ConsolidationTcShort.Sensor9)\n#sns.lineplot(x=ConsolidationTcShort.Time,y=ConsolidationTcShort.Sensor10)\n\n","5ee78373":"ConsolidationTcLong.keys()","86d55cfb":"ConsolidationTcLong.rename(columns={'#1:oC': 'Sensor1','#2:oC': 'Sensor2','#3:oC': 'Sensor3','#4:oC': 'Sensor4','#5:oC': 'Sensor5','#6:oC': 'Sensor6','#7:oC': 'Sensor7','#8:oC': 'Sensor8','#9:oC': 'Sensor9','#10:oC': 'Sensor10','#11:oC': 'Sensor11','#12:oC': 'Sensor12','#13:oC': 'Sensor13','#14:oC': 'Sensor14','#15:oC': 'Sensor15','#16:oC': 'Sensor16','#17:oC': 'Sensor17','#18:oC': 'Sensor18','#19:oC': 'Sensor19','#20:oC': 'Sensor20','#21:oC': 'Sensor21','#22:oC': 'Sensor22','#23:oC': 'Sensor23','#24:oC': 'Sensor24','#25:oC': 'Sensor25','#26:oC': 'Sensor26','#27:oC': 'Sensor27','#28:oC': 'Sensor28','#HK-Bat:V': 'Battery','#HK-Temp:oC': 'HK-Temp','#HK-rH:%': 'HK-Humidity'},inplace=True)","67947ded":"ConsolidationTcLong.head()","b53513c7":"ConsolidationTcLong=objectToFloat(ConsolidationTcLong,2)\n","804751e6":"#display(ConsolidationTcLong)","e2850167":"x=ConsolidationTcShort['Sensor1'].values\nfreezeBool=x< - 2\nfreezeBool=freezeBool[12:]\nfreezingRow = np.where(freezeBool)\nfreezingNumpy=np.asarray(freezingRow)\nfreezingPointTcShortSensor1 = freezingNumpy[0][0]\nfreezingPointTcShortSensor1","3fa5730e":"x=ConsolidationTcShort['Sensor2'].values\nfreezeBool=x< - 2\nfreezeBool=freezeBool[12:]\nfreezingRow = np.where(freezeBool)\nfreezingNumpy=np.asarray(freezingRow)\nfreezingPointTcShortSensor2 = freezingNumpy[0][0]\nfreezingPointTcShortSensor2","e1afd5bb":"x=ConsolidationTcShort['Sensor3'].values\nfreezeBool=x< -2\nfreezeBool=freezeBool[12:]\nfreezingRow = np.where(freezeBool)\nfreezingNumpy=np.asarray(freezingRow)\nfreezingPointTcShortSensor3 = freezingNumpy[0][0]\nfreezingPointTcShortSensor3","a5c0d0eb":"x=ConsolidationTcShort['Sensor4'].values\nfreezeBool=x< -2\nfreezeBool=freezeBool[12:]\nfreezingRow = np.where(freezeBool)\nfreezingNumpy=np.asarray(freezingRow)\nfreezingPointTcShortSensor4 = freezingNumpy[0][0]\nfreezingPointTcShortSensor4","229d7faa":"x=ConsolidationTcShort['Sensor5'].values\nfreezeBool=x< -2\nfreezeBool=freezeBool[12:]\nfreezingRow = np.where(freezeBool)\nfreezingNumpy=np.asarray(freezingRow)\nfreezingPointTcShortSensor5 = freezingNumpy[0][0]\nfreezingPointTcShortSensor5","82079c39":"sensorH=[[1,0],[2,-3],[3,-6],[4,-9],[5,-12],[6,-15],[7,-18],[8,-28.8],[9,-39],[10,-48]]","3888d2bd":"SensorShortThermistor = pd.DataFrame(sensorH, columns = ['Sensor', 'cm from top']) ","b147b8b7":"SensorShortThermistor","73aa62e6":"SensorShortThermistorBelowSurface=SensorShortThermistor['cm from top']+5.8","35284750":"SensorShortThermistorBelowSurface","2241acd7":"freezingFromShortThermistor=[freezingPointTcShortSensor2,freezingPointTcShortSensor3,freezingPointTcShortSensor4,freezingPointTcShortSensor5]","07c35c3b":"freezingFromShortThermistor","76121075":"ConsolidationTcShort['Time']","ca33b449":"height=SensorShortThermistorBelowSurface[2:6]\nheight","c669b53a":"NumpyTime=ConsolidationTcShort['Nr'].values","75143ebc":"#interpolated=np.interp(NumpyTime,freezingFromShortThermistor,height)","60937ab9":"ConsolidationTcShort.shape","8b5dcd90":"frozenPlot=np.zeros(shape=464,dtype=np.float)\nfrozenPlot.fill(np.nan)","8a54d4f6":"frozenPlot[freezingFromShortThermistor[0]]=SensorShortThermistorBelowSurface[2]\nfrozenPlot[freezingFromShortThermistor[1]]=SensorShortThermistorBelowSurface[3]\nfrozenPlot[freezingFromShortThermistor[2]]=SensorShortThermistorBelowSurface[4]\nfrozenPlot[freezingFromShortThermistor[3]]=SensorShortThermistorBelowSurface[5]\nfrozenPlot","47af9e75":"from scipy import interpolate\n","9b7a44b0":"f = interpolate.interp1d(ConsolidationTcShort['Time'], frozenPlot)","9975eac2":"len(frozenPlot)","8ddfa575":"ConsolidationTcShort['Nr']","13165ac0":"plt.plot_date(ConsolidationTcShort['Time'],frozenPlot)","790c16a8":"ConsolidationTcShort['Time']","248d7c7c":"def freezingPoint(dataset,startcol,endcol):\n    freezingPoint=[]\n    for column in dataset.columns[startcol:endcol]:\n        x=dataset[column].values\n        freezeBool=x< -2\n        freezingRow = np.where(freezeBool)\n        freezingNumpy=np.asarray(freezingRow)\n        freezingPoint = freezingNumpy[0]\n        freezingPoint.append(column)\n    return freezingPoint","1000ae78":"ConsolidationTcShort['EstimatedFreezingShortThermistor']=frozenPlot","2d71cb7e":"ConsolidationTcShort['Time'] = pd.to_datetime(ConsolidationTcShort['Time'])","72aaa017":"DirectMeasurement=DirectMeasurement.rename(columns={\"ice level\": \"level_ice\"})\nDirectMeasurement","ff5aa5b2":"DirectMeasurement['IceThickness']=[0,-1.2,-2.1,-2.5,-4.4,-5,-5.7,-7.5,-8]","aa1d3db8":"DirectMeasurement","94d3ec0f":"plt.plot(ConsolidationTcShort['Time'],ConsolidationTcShort['EstimatedFreezingShortThermistor'],'ro')","906d8c2c":"ConsolidationTcShort['Time']=ConsolidationTcShort['Time'].astype(str)","815f9527":"ConsolidationTcShort['Time'][402]","5f3a8bd5":"DirectMeasurement['Time']","eae36a14":"ConsolidationTcShort['Time'].head()","d2ddd451":"ConsolidationTcShort['Time'] = pd.to_datetime(ConsolidationTcShort['Time'])","e6ee1360":"DirectMeasurement['Time']= pd.to_datetime(DirectMeasurement['Time'])","65f7fefc":"len(DirectMeasurement)","3ce0c999":"Timestamp1=np.where(ConsolidationTcShort['Time']==DirectMeasurement['Time'][0])\nTimestamp2=np.where(ConsolidationTcShort['Time']==DirectMeasurement['Time'][1])\nTimestamp3=np.where(ConsolidationTcShort['Time']==DirectMeasurement['Time'][2])\nTimestamp4=np.where(ConsolidationTcShort['Time']==DirectMeasurement['Time'][3])\nTimestamp5=np.where(ConsolidationTcShort['Time']==DirectMeasurement['Time'][4])\nTimestamp6=np.where(ConsolidationTcShort['Time']==DirectMeasurement['Time'][5])\nTimestamp7=np.where(ConsolidationTcShort['Time']==DirectMeasurement['Time'][6])\nTimestamp8=np.where(ConsolidationTcShort['Time']==DirectMeasurement['Time'][7])\nTimestamp9=np.where(ConsolidationTcShort['Time']==DirectMeasurement['Time'][8])","47d3edfc":"Timestamp1=Timestamp1[0]\nTimestamp2=Timestamp2[0]\nTimestamp3=Timestamp3[0]\nTimestamp4=Timestamp4[0]\nTimestamp5=Timestamp5[0]\nTimestamp6=Timestamp6[0]\nTimestamp7=Timestamp7[0]\nTimestamp8=Timestamp8[0]\nTimestamp9=Timestamp9[0]","0e4cc36f":"DirectMeasurement","9c7a3655":"ConsolidationTcShort.shape","8691bf78":"measureArray=np.zeros(shape=464)\nmeasureArray.fill(np.nan)","5a4af5ba":"measureArray[Timestamp1]=DirectMeasurement['IceThickness'][0]\nmeasureArray[Timestamp2]=DirectMeasurement['IceThickness'][1]\nmeasureArray[Timestamp3]=DirectMeasurement['IceThickness'][2]\nmeasureArray[Timestamp4]=DirectMeasurement['IceThickness'][4]\nmeasureArray[Timestamp5]=DirectMeasurement['IceThickness'][5]\nmeasureArray[Timestamp6]=DirectMeasurement['IceThickness'][5]\nmeasureArray[Timestamp7]=DirectMeasurement['IceThickness'][6]\nmeasureArray[Timestamp8]=DirectMeasurement['IceThickness'][7]\nmeasureArray[Timestamp9]=DirectMeasurement['IceThickness'][8]","1e80c6c2":"ConsolidationTcShort['MeasuredIceThickness']=measureArray","557d289c":"ConsolidationTcShort.head()","224f9b8c":"plt.plot(ConsolidationTcShort['Nr'],ConsolidationTcShort['EstimatedFreezingShortThermistor'], 'bx')\n#plt.plot(ConsolidationTcShort['Nr'],ConsolidationTcShort['MeasuredIceThickness'],'ro')\nplt.show()","0250f920":"ConsolidationTcShort","68fc7bad":"ConsolidationTcShort['Time'][462]","405ec6c0":"len(ConsolidationTcShort)","c361b8c1":"MeasuredConsolidatedIce=np.zeros(464)\nMeasuredConsolidatedIce.fill(np.nan)\nMeasuredConsolidatedIce[460]=-15","2a126347":"MeasuredConsolidatedIce","cdc139fd":"ConsolidationTcShort['MeasuredConsolidatedIce']=MeasuredConsolidatedIce","b8750d1b":"plt.plot(ConsolidationTcShort['Nr'],ConsolidationTcShort['MeasuredConsolidatedIce'], 'bx')\nplt.plot(ConsolidationTcShort['Nr'],ConsolidationTcShort['MeasuredIceThickness'], 'ro')","36ea4e99":"ConsolidationTcShort['EstimatedFreezingShortThermistor'].head()","58cec2e3":"type(ConsolidationTcShort['Nr'])","b8db5ab2":"TestConsolidationTcShort=ConsolidationTcShort\nTestConsolidationTcShort['EstimatedFreezingShortThermistor'].dropna().index","0f5e4b27":"TestMIT=TestConsolidationTcShort['EstimatedFreezingShortThermistor'].dropna().values.reshape(-1, 1)\nTestNR=TestConsolidationTcShort['EstimatedFreezingShortThermistor'].dropna().index.values.reshape(-1, 1)","2ea906fe":"len(TestMIT)","fed4f3a5":"len(TestNR)","e5ddf034":"testtid=np.arange(1,464)","a6b3061f":"from scipy import interpolate","95a0a64d":"from sklearn.linear_model import LinearRegression","6c5cdbeb":"lm=LinearRegression()","21c92818":"lm.fit(TestNR,TestMIT)","e570e201":"lm.coef_","7e6c134e":"lm.intercept_","b3d78939":"y=lm.coef_* x +lm.intercept_","87883d3f":"x = np.array(range(464))\n","dfc75e73":"y=y.reshape(-1,1)","9f043db4":"y=y.ravel()","2b614ee0":"y.shape","c7d543c2":"x.shape","8cbf7769":"y","9f2e9aac":"plt.plot(ConsolidationTcShort['Nr'],ConsolidationTcShort['EstimatedFreezingShortThermistor'], 'bx')\n\nplt.plot(ConsolidationTcShort['Nr'],ConsolidationTcShort['MeasuredIceThickness'],'ro')\nplt.show()","55316dbe":"#sns.lineplot(ConsolidationTcShort.EstimatedFreezingShortThermistor)","ed0d94a2":"plt.plot(x,y)\nplt.plot(x, ConsolidationTcShort['MeasuredConsolidatedIce'],'gx')\nplt.plot(x, ConsolidationTcShort['EstimatedFreezingShortThermistor'],'ro')","93f9bfe2":"lm.coef_* 464 +lm.intercept_","3f6b7348":"x","6b51562f":"ConsolidationTcShort['Time'].tail()","79ce2560":"# #############################################################################\n# Display results\nplt.plot(x, y , \"r-\", color='C0',label=r'$h_{c-thermistor}$') #r- lager en kontinuerlig \"strek\" av xnew og ypredict\nplt.plot(x, ConsolidationTcShort['EstimatedFreezingShortThermistor'],'ro', color='C5',label=r'$T_{thermistor}>-2\u2103$')\nplt.plot(x, ConsolidationTcShort['MeasuredConsolidatedIce'],'gx',label=r'$h_{c-measured}$')\n#plt.axis([0,1.0,0, -12.5]) #Setter aksene p\u00e5 plottet\nplt.xlabel('Time') #Setter navn p\u00e5 x-akse\nplt.xticks([])\nplt.ylabel('Under ice surface (cm)') #Setter navn p\u00e5 y-akse\nplt.title(r'Estimated ice thickness using short thermistor - group 2') #Setter navn p\u00e5 plottet\nplt.legend(loc='upper right')\nplt.savefig('EstimatedIceThicknessShortThermistorGroup2.png')\n","145b9a7b":"display()","b72eafa0":"# The code was removed by Watson Studio for sharing.","ac49b3fd":"consolidation_Tc_short_all=pd.read_csv(\"\/kaggle\/input\/unis-ice-measurements-2019\/consolidation_Tc_short_all.csv\")","d7864350":"consolidation_Tc_short_all.head()","64641a95":"consolidation_Tc_short_all=moveRow0toHeader(consolidation_Tc_short_all)","638540bc":"consolidation_Tc_short_all.head()","ceedbb81":"consolidation_Tc_short_all=consolidation_Tc_short_all.replace(r'<NO VALUE>', np.nan, regex=True)","aecf69e2":"consolidation_Tc_short_all=objectToFloat(consolidation_Tc_short_all,2)","3380c9db":"consolidation_Tc_short_all['      Time']","d9f9f53b":"consolidation_Tc_short_all.rename(columns={'      Time': 'Time','      #3;Dig.Temp;oC': 'Sensor1', '      #4;Dig.Temp;oC': 'Sensor2', '      #5;Dig.Temp;oC': 'Sensor3','      #6;Dig.Temp;oC': 'Sensor4','      #7;Dig.Temp;oC': 'Sensor5', '      #8;Dig.Temp;oC': 'Sensor6','      #9;Dig.Temp;oC': 'Sensor7','      #10;Dig.Temp;oC': 'Sensor8','      #11;Dig.Temp;oC': 'Sensor9','      #12;Dig.Temp;oC': 'Sensor10', '      #HK-Bat;V': 'Battery'}, inplace=True)\n","8a75c626":"consolidation_Tc_short_all['Time'] = pd.to_datetime(consolidation_Tc_short_all['Time'])","64578ed3":"type(consolidation_Tc_short_all)","44ed021f":"wrongtextindex=consolidation_Tc_short_all['Nr']==\"<Parameters changed ('A70396_0265_310719.par')>\"","5b89603f":"np.where(wrongtextindex)","65dfaef5":"consolidation_Tc_short_all['Nr'][2]='NaN'","5633bf02":"consolidation_Tc_short_all['Nr'][29]='NaN'","5bde93e2":"consolidation_Tc_short_all['Nr'][36]='NaN'","612f7321":"consolidation_Tc_short_all['Nr']","5ac32f60":"consolidation_Tc_short_all.dtypes","1a47799e":"np.where(consolidation_Tc_short_all['Nr']==\"<Parameters changed ('A70396_0267_020819.par')>\")","0cd07b34":"consolidation_Tc_short_all['Nr']=consolidation_Tc_short_all['Nr'].astype(str).astype(float)","e93f072f":"consolidation_Tc_short_all.dtypes","231ae574":"#display(consolidation_Tc_short_all)","5b94e50a":"plt.plot_date(consolidation_Tc_short_all['Time'],consolidation_Tc_short_all['Sensor1'])","326e2db2":"sns.scatterplot(consolidation_Tc_short_all['Time'],consolidation_Tc_short_all['Sensor1'])","187f7374":"consolidation_Tc_short_all['Time']","1852e46e":"#sns.lineplot([consolidation_Tc_short_all.Sensor1, consolidation_Tc_short_all.Sensor3])","e8d81d0d":"np.where(consolidation_Tc_short_all['Time']=='2019-05-08 15:00:00')","da1f69a6":"len(consolidation_Tc_short_all['Time'])","6ee80f21":"OtherGroups=consolidation_Tc_short_all[499:]","2f670731":"#display(OtherGroups)","eedf9a13":"len(ConsolidationTcShort['Sensor1'])","467ff4ea":"#freezeP=np.ones(464)*-1.6","c79e858d":"FDD_a=np.trapz(ConsolidationTcShort['Sensor5']-ConsolidationTcShort['Sensor1'])","75a813cf":"FDD_a_cumsum=np.cumsum(ConsolidationTcShort['Sensor5']-ConsolidationTcShort['Sensor1'])\nFDD_a_cumsum.tail()","25953615":"plt.plot(ConsolidationTcShort['Sensor1'],color='blue')\nplt.plot(ConsolidationTcShort['Sensor5'], color='maroon', label='Freezing point')\nplt.fill_between(x,ConsolidationTcShort['Sensor5'],ConsolidationTcShort['Sensor1'],color='lightgrey')\nplt.legend(loc='upper right')\nplt.title(r'$FDD_a$')\nplt.show()","4bad2d12":"FDD_i = np.trapz(ConsolidationTcShort['Sensor5']-ConsolidationTcShort['Sensor3'])","f06843c7":"FDD_i_cumsum=np.cumsum(ConsolidationTcShort['Sensor5']-ConsolidationTcShort['Sensor3'])\nFDD_i_cumsum.tail()","5f83fb44":"FDD_i","2267146c":"plt.plot(ConsolidationTcShort['Sensor3'], color='blue')\nplt.plot(ConsolidationTcShort['Sensor5'], color='maroon', label='Freezing point')\nplt.fill_between(x,ConsolidationTcShort['Sensor5'],ConsolidationTcShort['Sensor3'],color='lightgrey')\nplt.legend(loc='upper right')\nplt.title(r'$FDD_i$')\nplt.show()","1799f01e":"import math","877ef876":"k_i = 2.1 #Thermal conductivity of ice\nrho_i=916.7 #\nl_i=333.4*(10**3) #Latent heat\n","81433820":"del1=math.sqrt((2 * k_i)\/(rho_i*l_i))","306190e7":"stephan=del1*FDD_i_cumsum*(60\/10)*24*(3+5\/24)","c67cdd84":"#plt.plot(ConsolidationTcShort['Sensor5'])\n#plt.plot(ConsolidationTcShort['Sensor3'])\nplt.plot(stephan,label='Stefan\u00b4s law')\nplt.legend()","e1ac1645":"max(stephan)","0e29d5a7":"consolidation_Tc_short_all.dropna(subset=['Nr'], inplace=true)","d7f9891d":"consolidation_Tc_short_all=consolidation_Tc_short_all[23:]\nconsolidation_Tc_short_all","fd16f2b6":"plt.plot(consolidation_Tc_short_all['Sensor3'])","ec8c6a9c":"#display(ConsolidationTcShort[5:])","e947a975":"plt.plot(ConsolidationTcShort['Sensor1'][17:])","b6e4026f":"ConsolidationTcShort[['Time','MeasuredIceThickness','EstimatedFreezingShortThermistor']][16:].to_csv(r'MeasuredIceAndShortThermistor.csv')\n#ConsolidationTcShort[['Time','MeasuredIceThickness','EstimatedFreezingShortThermistor']][16:]","165fb64d":"plt.plot(ConsolidationTcShort['EstimatedFreezingShortThermistor'],'ro')\n#plt.plot(ConsolidationTcShort['EstimatedFreezingShortThermistor'],'bx')\nplt.plot(ConsolidationTcShort['MeasuredIceThickness'],'bx')","856408bd":"Fix=pd.read_csv(\"MeasuredIceAndShortThermistor.csv\")","6dfc4fd1":"Fix2=pd.read_csv(\"MeasuredIceAndShortThermistor.csv\")","49237345":"Fix.dropna(subset=['MeasuredIceThickness'], inplace=true)","25c12a02":"Fix=Fix[['Time','MeasuredIceThickness']]","3f09bd04":"Fix.to_csv('measuredIceThickness.csv')","3457f211":"Fix2.dropna(subset=['EstimatedFreezingShortThermistor'],inplace=true)","21dc33ad":"Fix2.to_csv('ShortThermistor.csv')","d7228220":"Fix2=Fix2[['Time','EstimatedFreezingShortThermistor']]","45069247":"Fix2.to_csv('ShortThermistor.csv')","5be0565e":"Fix","86aee3a2":"ConsolidationTcLong.head()","cc7fb02f":"x=ConsolidationTcShort['Sensor9'].values\nfreezeBool=x< -2\nfreezeBool=freezeBool[12:]\nfreezingRow = np.where(freezeBool)\nfreezingNumpy=np.asarray(freezingRow)\nfreezingPointTcShortSensor9 = freezingNumpy[0][0]\nfreezingPointTcShortSensor9","4f36e400":"## Short consolidation thermistor - all groups","2367b5e4":"## Short sensor\n#### Senor 1","398bf663":"x=ConsolidationTcShort['Sensor10'].values\nfreezeBool=x< -2\nfreezeBool=freezeBool[12:]\nfreezingRow = np.where(freezeBool)\nfreezingNumpy=np.asarray(freezingRow)\nfreezingPointTcShortSensor10 = freezingNumpy[0][0]\nfreezingPointTcShortSensor10","f31139c0":"x=ConsolidationTcShort['Sensor6'].values\nfreezeBool=x< - 2\nfreezeBool=freezeBool[12:]\nfreezingRow = np.where(freezeBool)\nfreezingNumpy=np.asarray(freezingRow)\nfreezingPointTcShortSensor6 = freezingNumpy[0][0]\nfreezingPointTcShortSensor6","2d572028":"x=ConsolidationTcShort['Sensor8'].values\nfreezeBool=x< -2\nfreezeBool=freezeBool[12:]\nfreezingRow = np.where(freezeBool)\nfreezingNumpy=np.asarray(freezingRow)\nfreezingPointTcShortSensor8 = freezingNumpy[0][0]\nfreezingPointTcShortSensor8","c73b0334":"x=ConsolidationTcShort['Sensor7'].values\nfreezeBool=x< -2\nfreezeBool=freezeBool[12:]\nfreezingRow = np.where(freezeBool)\nfreezingNumpy=np.asarray(freezingRow)\nfreezingPointTcShortSensor7 = freezingNumpy[0][0]\nfreezingPointTcShortSensor7","def39802":"### Stefan's law (level ice):","f615ad91":"### Consolidated ice - all measurement","593a996d":"### FDDi Short thermistor","d46aab37":"### FDDa Short thermistor"}}