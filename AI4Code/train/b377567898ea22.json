{"cell_type":{"564c5064":"code","a04f8ae7":"code","d70f21a3":"code","6c77cc23":"code","163001b7":"code","4ecc1d7a":"code","77719dc9":"code","56f67698":"code","a2690e5e":"code","4a79d9e3":"code","467e9c56":"code","7fc12464":"code","f4bbc9f4":"code","9affbfb2":"code","4b9cd8d5":"code","f2532dbe":"code","6f0bca37":"code","82125561":"code","0f8d7404":"code","9bdcecf9":"code","a28a75b5":"code","488ac865":"code","bc5b1cf6":"code","ec5db9fe":"code","be121016":"code","32e64ddd":"code","d5c42411":"code","9babc48f":"code","6a6aaadc":"code","12476bdf":"code","94e9285a":"code","094dc181":"code","52a01bd1":"code","6788b9d2":"code","9ea28c5a":"code","427f5960":"code","7601c2b3":"code","26fe1880":"code","105538ee":"code","9bfa5d64":"code","13bb75c7":"code","1f47024c":"code","c38b2741":"code","2043a6c2":"code","53522b64":"code","89941ebe":"code","b41b58cd":"code","bfaedacc":"code","c6ef7870":"code","01d23c31":"code","5a53df8f":"code","6dddbcd0":"code","03797909":"code","e52ad369":"code","1927b7b5":"code","c4bafc5e":"code","6acb84c4":"code","e614ba87":"code","e66b153a":"code","c3fe0abd":"code","452f32d8":"code","08a5bdc6":"code","a5c7a96b":"code","0f0084ee":"code","41d48879":"code","8791ef25":"code","e79f7ab9":"code","0e659bfa":"code","e560a060":"code","f76dd22b":"code","ee3d0be0":"code","2ef4d7c9":"code","b3bc7993":"code","67a95c60":"code","4347b721":"code","2754ecec":"markdown","10e8afbe":"markdown","63dd0e83":"markdown","a4f70627":"markdown","91b58e9c":"markdown","cb55c854":"markdown","729c71b1":"markdown","b01581b2":"markdown","da5e553a":"markdown","6d64996d":"markdown","673d5fea":"markdown","89c73722":"markdown","3f66ac61":"markdown","69dcf888":"markdown","7f95c1a1":"markdown","b615fad9":"markdown","31ef8b28":"markdown"},"source":{"564c5064":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a04f8ae7":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.pandas.set_option('display.max_columns',None)\n%matplotlib inline","d70f21a3":"data=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndata.head()","6c77cc23":"data.shape","163001b7":"features_with_null=[features for features in data.columns if data[features].isnull().sum()>0]\nfor feature in features_with_null:\n    print(feature,'{} Null values'.format(data[feature].isnull().sum()))","4ecc1d7a":"dataset=data.copy()\nfor feature in features_with_null:\n    dataset[feature]=np.where(data[feature].isnull(),1,0)\n    dataset.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.show()","77719dc9":"data.head()","56f67698":"categorical_features=[features for features in data.columns if data[features].dtype=='O']\nprint(len(categorical_features),'categorical features')\n","a2690e5e":"numerical_features=[features for features in data.columns if data[features].dtype!='O' and features !='Id']\nprint(len(numerical_features),'Numerical features')\n","4a79d9e3":"date_feature=[feature for feature in numerical_features if 'Year' in feature or 'Yr' in feature]\ndate_feature","467e9c56":"for feature in date_feature:\n    print(len(data[feature].unique()),'Unique value in {}'.format(feature))","7fc12464":"\ndata.groupby('YrSold')['SalePrice'].median().plot()\nplt.show()","f4bbc9f4":"for feature in date_feature:\n    dataset=data.copy()\n    if feature!='YrSold':\n        dataset[feature]=dataset['YrSold']- dataset[feature]\n        dataset.groupby(feature)['SalePrice'].median().plot()\n        plt.show()","9affbfb2":"discreate_features=[feature for feature in numerical_features if len(data[feature].unique())<25 and feature!='YrSold']\ndiscreate_features","4b9cd8d5":"continuous_features=[]\nfor feature in numerical_features:\n    if feature not in discreate_features:\n        if feature not in date_feature:\n            continuous_features.append(feature)\ncontinuous_features","f2532dbe":"dataset=data.copy()\nfor feature in discreate_features:\n    dataset.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.show()","6f0bca37":"dataset=data.copy()\nfor feature in continuous_features:\n    dataset[feature].hist(bins=25)\n    plt.xlabel(feature)\n    plt.ylabel('count')\n    plt.show()","82125561":"dataset=data.copy()\ndataset['SalePrice']=np.log(dataset['SalePrice'])\nfor feature in continuous_features:\n    if 0 in dataset[feature].unique():\n        pass\n    else:\n        dataset[feature]=np.log(dataset[feature])\n        plt.scatter(dataset[feature],dataset['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('Sale price')\n        plt.show()\n        \n    ","0f8d7404":"dataset=data.copy()\nfor feature in continuous_features:\n    plt.scatter(dataset[feature],dataset['SalePrice'])\n    plt.xlabel(feature)\n    plt.ylabel('saleprice')\n    plt.show()","9bdcecf9":"from scipy import stats\nz=np.abs(stats.zscore(dataset[continuous_features]))\nz","a28a75b5":"print(np.where((z>3)))\nprint(len(np.where((z>3)[0])))","488ac865":"dataset[continuous_features][(z < 3).all(axis=1)]","bc5b1cf6":"dataset.head()","ec5db9fe":"\ndataset[continuous_features].head()","be121016":"dataset[continuous_features].shape","32e64ddd":"dataset.shape","d5c42411":"dataset=data.copy()\nfor feature in continuous_features:\n    dataset.boxplot(feature)\n    plt.ylabel(feature)\n    plt.show()","9babc48f":"data[categorical_features].head()","6a6aaadc":"for feature in categorical_features:\n    print(feature,'has {} different unique values'.format(len(data[feature].unique())))","12476bdf":"dataset=data.copy()\nfor feature in categorical_features:\n    dataset.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('Sale Price')\n    plt.show()\n    ","94e9285a":"for feature in categorical_features:\n    print(feature,data[feature].isnull().sum())","094dc181":"data.head()","52a01bd1":"data.drop(['Alley','PoolQC','Fence','MiscFeature'],inplace=True,axis=1)","6788b9d2":"data.drop('FireplaceQu',axis=1,inplace=True)","9ea28c5a":"cat_feat_with_null=[feature for feature in data.columns if data[feature].isnull().sum()>0 and data[feature].dtype =='O']\nfor feature in cat_feat_with_null:\n        \n        data[feature]=data[feature].fillna('Missing')\nprint(cat_feat_with_null)","427f5960":"for feature in cat_feat_with_null:\n    data.groupby(feature)[feature].count().sort_values(ascending=False).plot.bar()\n    plt.show()","7601c2b3":"for feature in cat_feat_with_null:\n    frequent_occuring=data[feature].value_counts().sort_values(ascending=False).index[0]\n    data[feature]=data[feature].replace('Missing',frequent_occuring)\n    data.groupby(feature)[feature].count().sort_values(ascending=False).plot.bar()\n    plt.show()\n    ","26fe1880":"data[cat_feat_with_null].head()","105538ee":"data[cat_feat_with_null].isnull().sum()","9bfa5d64":"data[numerical_features].isnull().sum()","13bb75c7":"numer_feat_with_null=[feature for feature in numerical_features if data[feature].isnull().sum()>0 and data[feature].dtype!='O']\nprint(numer_feat_with_null)","1f47024c":"for feature in numer_feat_with_null:\n    median=data[feature].median()\n    data[feature]=data[feature].fillna(median)\ndata[numer_feat_with_null].isnull().sum()","c38b2741":"data.isnull().sum()","2043a6c2":"transform_feature=[]\nfor feature in continuous_features:\n    if feature not in date_feature and 0 not in data[feature].unique():\n        transform_feature.append(feature)\n        print(feature)","53522b64":"data.head()","89941ebe":"for feature in transform_feature[1:len(transform_feature)]:\n    dataset[feature]=np.log(dataset[feature])\ndataset.head()","b41b58cd":"for feature in ['YearBuilt','YearRemodAdd','GarageYrBlt']:\n    dataset[feature]=dataset['YrSold']- dataset[feature]\ndataset[date_feature].head()","bfaedacc":"for feature in transform_feature:\n    dataset=data.copy()\n    dataset[feature].hist(bins=10)\n    plt.xlabel(feature)\n    plt.show()","c6ef7870":"categorical_features=[feature for feature in dataset.columns if data[feature].dtype=='O']\nfor feature in categorical_features:\n    print(data[feature].value_counts())","01d23c31":"categorical_features=[feature for feature in dataset.columns if data[feature].dtype=='O']\nfor feature in categorical_features:\n    labels_ordered=dataset.groupby([feature])['SalePrice'].mean().sort_values().index\n    labels_ordered={k:i for i,k in enumerate(labels_ordered,0)}\n    dataset[feature]=dataset[feature].map(labels_ordered)","5a53df8f":"dataset.head()","6dddbcd0":"scaled_features=[feature for feature in dataset.columns if feature not in ['Id','SalePrice']]\nprint(scaled_features)","03797909":"from sklearn.preprocessing import MinMaxScaler\nmms=MinMaxScaler()\nfit=mms.fit(dataset[scaled_features])\ndataset[scaled_features]=fit.transform(dataset[scaled_features])\ndataset[scaled_features].head()","e52ad369":"dataset=pd.concat([dataset[scaled_features],dataset['SalePrice']],axis=1)","1927b7b5":"dataset.head()","c4bafc5e":"dataset.shape","6acb84c4":"dataset.head()","e614ba87":"dataset.drop('YrSold',axis=1,inplace=True)","e66b153a":"from sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.model_selection import train_test_split","c3fe0abd":"x=dataset.iloc[:,:-1]\ny=dataset['SalePrice']","452f32d8":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,random_state=0)","08a5bdc6":"ls=Lasso(alpha=0.005,normalize=True)\nls.fit(x_train,y_train)","a5c7a96b":"y_pred=ls.predict(x_test)\nls.score(x_test,y_test)","0f0084ee":"ls.get_params()","41d48879":"x_test.shape","8791ef25":"feature_sel_model = SelectFromModel(Lasso(alpha=0.005,random_state=0))\nfeature_sel_model.fit(x_train,y_train)","e79f7ab9":"feature_sel_model.get_support()","0e659bfa":"selected_features=x_train.columns[feature_sel_model.get_support()]\nselected_features","e560a060":"print('total no of features {}'.format(x_train.shape[1]))\nprint('no of selected features {}'.format(len(selected_features)))\n","f76dd22b":"plt.figure(figsize=(15,9))\nfrom sklearn.linear_model import LinearRegression\nlg=LinearRegression()\npredictors=x_train.columns \nlg.fit(x_train,y_train)\ncoef=pd.Series(lg.coef_,predictors).sort_values()\ncoef.plot.bar()","ee3d0be0":"y_pred=lg.predict(x_test)\nmse=np.mean((y_test-y_pred)**2)\nmse","2ef4d7c9":"lg_score=lg.score(x_test,y_test)\nlg_score","b3bc7993":"from sklearn.linear_model import Ridge\nalpha=[0.05,0.005,1,4,5,10,15]\nmse=[]\nridge_score=[]\nfor i in alpha:\n    ridge=Ridge(alpha=i,normalize=True)\n    ridge.fit(x_train,y_train)\n    y_pred=ridge.predict(x_test)\n    mse.append(np.mean((y_pred-y_test)**2))\n    ridge_score.append(ridge.score(x_test,y_test))\nplt.plot(alpha,ridge_score,linestyle='dashed',color='blue',marker='o',markersize='10',markerfacecolor='red')\n\nplt.xlabel('alpha')\nplt.ylabel('ridge score')\nplt.show()\n","67a95c60":"plt.plot(alpha,mse,linestyle='dashed',color='blue',marker='o',markersize='10',markerfacecolor='red')\nplt.xlabel('alpha')\nplt.ylabel('mean squared error')\nplt.show()\n","4347b721":"alpha=[0.05,0.005,1,4,5,10,15]\npredictors=x_train.columns\nfor i in alpha:\n    plt.figure(figsize=(15,9))\n    ridge=Ridge(alpha=i)\n    ridge.fit(x_train,y_train)\n    ridge_coeff=pd.Series(ridge.coef_,predictors).sort_values()\n    ridge_coeff.plot.bar()\n    plt.show()","2754ecec":"# Linear Regression","10e8afbe":"# Feature Engineering","63dd0e83":"# skewed numerical features","a4f70627":"handling categorical missing values","91b58e9c":"# by changing alpha value how co-efficients magnitude changes","cb55c854":"# selecting right value of alpha","729c71b1":"# Ridge Regression","b01581b2":"# handling numerical missing values","da5e553a":"transforming skewed data by logarithmic normal distribution ","6d64996d":"# after applying log transformation","673d5fea":"# outlier","89c73722":"# removing outliers","3f66ac61":"# kind of label encoder ","69dcf888":"# Lasso Regression","7f95c1a1":"# Handling categorical Features","b615fad9":"# using z score to detect outliers","31ef8b28":"# model building"}}