{"cell_type":{"6b3ed8ca":"code","d7bd076d":"code","ba8e7ef7":"code","2ae0d6a8":"code","60549a48":"code","ebfa56f2":"code","8de871a7":"code","a4670d75":"code","29ec918e":"code","96e8723f":"code","f18efbd1":"code","776b3409":"code","c09bcc84":"code","075ae5c1":"code","1e28f1e9":"code","2517253e":"code","9c863599":"code","626464ff":"code","7a3ddf80":"code","40fffa01":"code","4071b055":"code","ae1a799e":"code","3df083d9":"code","34d67a8e":"code","4809f6ed":"code","37b5505e":"code","855940eb":"code","d677063d":"code","de836b7f":"code","a9779d71":"code","46bc3438":"code","1b1334a9":"code","3bd28433":"code","9b246c73":"code","44a6d7b0":"code","fb27f387":"code","d10c83cf":"code","68a03e3b":"code","a87718e1":"code","47d87e66":"code","7adf5e8e":"code","b6010fa5":"code","bea6bf3b":"code","0eec960b":"code","91e884d9":"code","91d6cfe6":"code","91f5013d":"code","893679b9":"code","b9835584":"code","c3df3608":"code","a1fe528a":"code","84a22b0c":"code","82bbd19a":"code","95ca47bd":"code","d120e8d0":"code","83dc05d3":"code","1db60fde":"code","8f15b5e3":"code","e80c5b37":"code","47825c91":"code","213dd829":"code","7a747ead":"code","6047701b":"code","e88e8417":"code","10d83de5":"code","cca4f326":"code","13d96e96":"code","8a2bd605":"code","e0c79259":"code","6155db8f":"code","2dc7ea6a":"code","21639aa1":"code","3b7b8283":"code","d9986af0":"code","dccf8c91":"code","b2762312":"code","af85fd71":"code","d01515c7":"code","2e752258":"code","341b1854":"code","b029da42":"code","2ec439fe":"code","a6b55415":"code","45475bc6":"code","011f5b70":"code","3f6f8270":"code","fb93e262":"code","eb341e75":"code","ae5188bc":"code","e6e878b0":"code","51d9f5df":"code","d489f317":"code","ea602ce8":"markdown","312c3001":"markdown","767d13f2":"markdown","9ed5fdf9":"markdown","a4401df6":"markdown","6fe83503":"markdown","c3c9bd4a":"markdown","6ed00758":"markdown","cd4fd3e1":"markdown","3a84e182":"markdown","94e721d0":"markdown","11a3809e":"markdown","a6129c47":"markdown","18149d65":"markdown","2892d658":"markdown"},"source":{"6b3ed8ca":"import numpy as np \nimport pandas as pd \nfrom glob import glob \nimport matplotlib.pyplot as plt\nimport os\nimport pandas as pd\nfrom PIL import Image\nimport seaborn as sns","d7bd076d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebraa99a2d2d-fbe2-46f9-bd57-2e8a5c7d14ba\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ba8e7ef7":"import tensorflow as tf","2ae0d6a8":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Input, Lambda, Dense, Flatten\nfrom tensorflow.keras.models import Model,Sequential\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing import image\n\nfrom skimage.util import montage as montage2d\nfrom skimage.io import imread\nfrom sklearn.model_selection import train_test_split","60549a48":"fields = ['Image Index', 'Finding Labels']\ntall_xray_df = pd.read_csv('..\/input\/data\/Data_Entry_2017.csv', skipinitialspace=True, usecols=fields)\ntall_xray_df.head(5)","ebfa56f2":"fields = ['Image Index', 'Finding Labels']\nall_xray_df = pd.read_csv('..\/input\/data\/Data_Entry_2017.csv', skipinitialspace=True, usecols=fields)\nall_xray_df.head(5)","8de871a7":"print(all_xray_df['Finding Labels'].value_counts())","a4670d75":"all_image_paths = {os.path.basename(x): x for x in glob(os.path.join('..', 'input', 'data',  'images*', '*', '*.png'))}\nprint(len(all_image_paths), all_xray_df.shape[0])","29ec918e":"all_xray_df['path'] = all_xray_df['Image Index'].map(all_image_paths.get)\nall_xray_df['Cardiomegaly'] = all_xray_df['Finding Labels'].map(lambda x: 'Cardiomegaly' in x)\nall_xray_df.head(5)","96e8723f":"all_xray_df.info()","f18efbd1":"temp_hold = all_xray_df","776b3409":"positive_cases = np.sum(temp_hold['Cardiomegaly']==True)\nprint(positive_cases)","c09bcc84":"p_c_half = positive_cases \/\/ 2","075ae5c1":"p_c_half","1e28f1e9":"print(temp_hold['Cardiomegaly'].value_counts())","2517253e":"more_balanced_df = temp_hold.groupby(['Cardiomegaly']).apply(lambda x: x.sample(min(4*p_c_half, x.shape[0]), \n                                                                                   replace = False)\n                                                      ).reset_index(drop = True)\n\nprint(more_balanced_df['Cardiomegaly'].value_counts())","9c863599":"more_balanced_df.info()","626464ff":"raw_train_df, test_valid_df = train_test_split(more_balanced_df, \n                                   test_size = 0.30, \n                                   random_state = 42,\n                                   stratify = more_balanced_df[['Cardiomegaly']])","7a3ddf80":"valid_df, test_df = train_test_split(test_valid_df, \n                                   test_size = 0.40, \n                                   random_state = 42,\n                                   stratify = test_valid_df[['Cardiomegaly']])","40fffa01":"print(raw_train_df['Finding Labels'].value_counts())","4071b055":"print('Train:', raw_train_df.shape[0], 'Validation:', valid_df.shape[0], 'Test:', test_df.shape[0])\nprint(\"--------------\")\nprint('Train CM values\\n', raw_train_df['Cardiomegaly'].value_counts())\nprint(\"--------------\")\nprint('Test CM Values\\n', test_df['Cardiomegaly'].value_counts())\nraw_train_df.sample(1)","ae1a799e":"train_df = raw_train_df.groupby(['Cardiomegaly']).apply(lambda x: x.sample(1943, replace = True)\n                                                      ).reset_index(drop = True)\nprint('New Data Size:', train_df.shape[0], 'Old Size:', raw_train_df.shape[0])","3df083d9":"print('New CM values\\n', train_df['Cardiomegaly'].value_counts())","34d67a8e":"print(train_df['Finding Labels'].value_counts())","4809f6ed":"IMG_SIZE = (512, 512) \nidg = ImageDataGenerator(samplewise_center=False, \n                              samplewise_std_normalization=False, \n                              horizontal_flip=False, \n                              vertical_flip=False, \n                              height_shift_range=0.1, \n                              width_shift_range=0.1, \n                              brightness_range=[0.7, 1.5],\n                              rotation_range=3, \n                              shear_range=0.01,\n                              fill_mode='nearest',\n                              zoom_range=0.125,\n                             preprocessing_function=preprocess_input)","37b5505e":"def flow_from_dataframe(img_data_gen, in_df, path_col, y_col, **dflow_args):\n    df_gen = img_data_gen.flow_from_dataframe(in_df,\n                                              x_col=path_col,\n                                              y_col=y_col,\n                                     class_mode = 'raw',\n                                    **dflow_args)\n    return df_gen","855940eb":"train_gen = flow_from_dataframe(idg, train_df, \n                             path_col = 'path',\n                            y_col = 'Cardiomegaly', \n                            target_size = IMG_SIZE,\n                             color_mode = 'rgb',\n                            batch_size = 8)","d677063d":"val_X, val_Y = next(flow_from_dataframe(idg, \n                               valid_df, \n                             path_col = 'path',\n                            y_col = 'Cardiomegaly', \n                            target_size = IMG_SIZE,\n                             color_mode = 'rgb',\n                            batch_size = 400)) ","de836b7f":"valid_gen = flow_from_dataframe(idg, valid_df, \n                             path_col = 'path',\n                            y_col = 'Cardiomegaly', \n                            target_size = IMG_SIZE,\n                             color_mode = 'rgb',\n                            batch_size = 256) \n\nval_X, val_Y = next(flow_from_dataframe(idg, \n                               valid_df, \n                             path_col = 'path',\n                            y_col = 'Cardiomegaly', \n                            target_size = IMG_SIZE,\n                             color_mode = 'rgb',\n                            batch_size = 400)) ","a9779d71":"print(len(ttest_X))","46bc3438":"print(len(t2test_X))","1b1334a9":"vval_X, vval_Y = next(flow_from_dataframe(idg, \n                               valid_df, \n                             path_col = 'path',\n                            y_col = 'Cardiomegaly', \n                            target_size = IMG_SIZE,\n                             color_mode = 'rgb',\n                            batch_size = 800)) ","3bd28433":"ttest_X, ttest_Y = next(flow_from_dataframe(idg, \n                               test_df, \n                             path_col = 'path',\n                            y_col = 'Cardiomegaly', \n                            target_size = IMG_SIZE,\n                             color_mode = 'rgb',\n                            batch_size = 800))","9b246c73":"t2test_X, t2test_Y = flow_from_dataframe(idg, \n                               test_df, \n                             path_col = 'path',\n                            y_col = 'Cardiomegaly', \n                            target_size = IMG_SIZE,\n                             color_mode = 'rgb',\n                            batch_size = 1000)","44a6d7b0":"test_X, test_Y = next(flow_from_dataframe(idg, \n                               test_df, \n                             path_col = 'path',\n                            y_col = 'Cardiomegaly', \n                            target_size = IMG_SIZE,\n                             color_mode = 'rgb',\n                            batch_size = 400)) ","fb27f387":"t_x, t_y = next(train_gen)\nfig, m_axs = plt.subplots(2, 4, figsize = (16, 8))\nfor (c_x, c_y, c_ax) in zip(t_x, t_y, m_axs.flatten()):\n    c_ax.imshow(c_x[:,:,0], cmap = 'bone', vmin = -127, vmax = 127)\n    c_ax.set_title('%s' % ('Cardiomegaly' if c_y>0.5 else 'Healthy or Non CM'))\n    c_ax.axis('off')","d10c83cf":"resnet = ResNet50(input_shape=[512,512,3], weights='imagenet', include_top=False)","68a03e3b":"for layer in resnet.layers:\n  layer.trainable = False","a87718e1":"x = Flatten()(resnet.output)\nprediction = Dense(1, activation='sigmoid')(x)\nmodel = Model(inputs=resnet.input, outputs=prediction)\nmodel.summary()","47d87e66":"model.summary()","7adf5e8e":"model.compile(\n  loss='binary_crossentropy',\n  optimizer='adam',\n  metrics=['accuracy']\n)","b6010fa5":"trained_model_path = 'trained_model_ep10_cm'\ntrained_model_dir = os.path.dirname(trained_model_path)","bea6bf3b":"!ls {trained_model_dir}","0eec960b":"cm_model = tf.keras.models.load_model('..\/input\/trained-model-ep20-cm\/cardiomegaly_20epoch.h5')","91e884d9":"cm_model.summary()","91d6cfe6":"checkpoint_path = 'training_cm_30\/cp-{epoch:04d}.ckpt'\ncheckpoint_dir = os.path.dirname(checkpoint_path)","91f5013d":"print(checkpoint_dir)","893679b9":"!ls {checkpoint_dir}","b9835584":"latest = tf.train.latest_checkpoint(checkpoint_dir)","c3df3608":"latest","a1fe528a":"cp_path = 'training_2\/cp-0027.ckpt'","84a22b0c":"cp_callback =  tf.keras.callbacks.ModelCheckpoint(checkpoint_path,\n                                                 verbose=1,\n                                                 save_weights_only=True,\n                                                 period=1)","82bbd19a":"gpus = tf.config.experimental.list_physical_devices('GPU')\nfor gpu in gpus:\n    print(\"Name:\", gpu.name, \"  Type:\", gpu.device_type)","95ca47bd":"tf.test.is_gpu_available()","d120e8d0":"r = cm_model.fit_generator(\n  train_gen,\n  validation_data=(val_X, val_Y),\n  epochs=10,\n  steps_per_epoch=train_gen.n\/\/train_gen.batch_size,\n    callbacks = [cp_callback]\n)","83dc05d3":"h_loss =[19.148658752441406,\n 19.115676879882812,\n 15.537498474121094,\n 17.413969039916992,\n 15.073995590209961,\n 14.934189796447754,\n 12.899909019470215,\n 12.756266593933105,\n 14.394132614135742,\n 13.752437591552734,\n 19.57802391052246,\n 17.76913070678711,\n 16.895435333251953,\n 16.295095443725586,\n 14.818182945251465,\n 15.619745254516602,\n 14.87256145477295]","1db60fde":"h_loss = h_loss + r.history['loss']","8f15b5e3":"h_loss","e80c5b37":"del h_loss[-8]","47825c91":"h_v_loss = [25.633033752441406,\n 18.852336883544922,\n 23.433317184448242,\n 29.9117488861084,\n 22.974931716918945,\n 27.35152816772461,\n 28.098167419433594,\n 27.102066040039062,\n 33.347721099853516,\n 26.273008346557617,\n 29.15365982055664,\n 30.170188903808594,\n 33.01416778564453,\n 37.49050521850586,\n 58.71733093261719,\n 28.727680206298828,\n 30.895044326782227]","213dd829":"h_v_loss = h_v_loss + r.history['val_loss']","7a747ead":"h_v_loss","6047701b":"del h_v_loss[-8]","e88e8417":"h_v_loss[12]","10d83de5":"#loss\nplt.plot(h_loss, label='train loss')\nplt.plot(h_v_loss, label='val loss')\nplt.legend()\nplt.show()","cca4f326":"r.history['loss']","13d96e96":"r.history['val_loss']","8a2bd605":"#loss\nplt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()","e0c79259":"h_acc = [0.6511088013648987,\n 0.7251160144805908,\n 0.7653429508209229,\n 0.7774626016616821,\n 0.8009282946586609,\n 0.8076328039169312,\n 0.8249097466468811,\n 0.8313563466072083,\n 0.8277462720870972,\n 0.8352243304252625,\n 0.8022176623344421,\n 0.8176895380020142,\n 0.8210417628288269,\n 0.8280041217803955,\n 0.8455389142036438,\n 0.8429602980613708,\n 0.8483754396438599]\n\nh_acc = h_acc + r.history['accuracy']\n\nh_acc","6155db8f":"del h_acc[-8]","2dc7ea6a":"h_v_acc =[0.612500011920929,\n 0.7350000143051147,\n 0.6924999952316284,\n 0.6324999928474426,\n 0.6825000047683716,\n 0.7174999713897705,\n 0.6725000143051147,\n 0.7450000047683716,\n 0.7074999809265137,\n 0.7724999785423279,\n 0.7475000023841858,\n 0.737500011920929,\n 0.7400000095367432,\n 0.6899999976158142,\n 0.6399999856948853,\n 0.7574999928474426,\n 0.7799999713897705]\n\nh_v_acc = h_v_acc + r.history['val_accuracy']\n\nh_v_acc","21639aa1":"del h_v_acc[-8]","3b7b8283":"# accuracies\nplt.plot(h_acc, label='train accuracy')\nplt.plot(h_v_acc, label='val accuracy')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","d9986af0":"r.history['accuracy']","dccf8c91":"r.history['val_accuracy']","b2762312":"# accuracies\nplt.plot(r.history['accuracy'], label='train accuracy')\nplt.plot(r.history['val_accuracy'], label='val accuracy')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","af85fd71":"cm_model.save('cardiomegaly_30epoch.h5')","d01515c7":"from sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import roc_curve, roc_auc_score","2e752258":"import seaborn as sn","341b1854":"print(len(val_X))","b029da42":"pred_Y = cm_model.predict(val_X, \n                          batch_size = 16, \n                          verbose = True)","2ec439fe":"confusion_matrix(val_Y, pred_Y>0.5)","a6b55415":"sn.heatmap(confusion_matrix(val_Y, pred_Y>0.5), annot=True)","45475bc6":"print(classification_report(val_Y, pred_Y>0.5, target_names = ['Non CM', 'Cardiomegaly']))","011f5b70":"fpr, tpr, _ = roc_curve(val_Y, pred_Y)\nfig, ax1 = plt.subplots(1,1, figsize = (5, 5), dpi = 250)\nax1.plot(fpr, tpr, 'b.-', label = 'Resnet-Model on val-data (AUC:%2.2f)' % roc_auc_score(val_Y, pred_Y))\nax1.legend(loc = 4)\nax1.set_xlabel('False Positive Rate')\nax1.set_ylabel('True Positive Rate');","3f6f8270":"final_pred_Y = cm_model.predict(ttest_X, \n                                verbose = True, \n                                batch_size = 4)","fb93e262":"confusion_matrix(ttest_Y, final_pred_Y>0.5)","eb341e75":"sn.heatmap(confusion_matrix(ttest_Y, final_pred_Y>0.5), annot=True)","ae5188bc":"print(classification_report(ttest_Y, final_pred_Y>0.5, target_names = ['Non CM', 'Cardiomegaly']))","e6e878b0":"fpr, tpr, _ = roc_curve(ttest_Y, final_pred_Y)\nfig, ax1 = plt.subplots(1,1, figsize = (5, 5), dpi = 250)\nax1.plot(fpr, tpr, 'b.-', label = 'Resnet-Model (AUC:%2.2f)' % roc_auc_score(ttest_Y, final_pred_Y))\nax1.legend(loc = 4)\nax1.set_xlabel('False Positive Rate')\nax1.set_ylabel('True Positive Rate');","51d9f5df":"checkpoint_path = 'training_cm_30\/cp-{epoch:04d}.ckpt'\ncheckpoint_dir = os.path.dirname(checkpoint_path)\n\ncp_callback =  tf.keras.callbacks.ModelCheckpoint(checkpoint_path,\n                                                 verbose=1,\n                                                 save_weights_only=True,\n                                                 period=1)","d489f317":"r2 = cm_model.fit_generator(\n  train_gen,\n  validation_data=(val_X, val_Y),\n  epochs=10,\n  steps_per_epoch=train_gen.n\/\/train_gen.batch_size,\n    callbacks = [cp_callback]\n)","ea602ce8":"### checking gpu is being used","312c3001":"### LOSS","767d13f2":"# Splitting Dataset","9ed5fdf9":"# INF vs non INF","a4401df6":"## test data","6fe83503":"# Accuracy and stoof","c3c9bd4a":"# Balance training set","6ed00758":"# Training and loading and training and loading and.... ","cd4fd3e1":"### Would not have been possible without immense help from : https:\/\/www.kaggle.com\/kmader\/cardiomegaly-pretrained-vgg16","3a84e182":"# Preprocessing shizz","94e721d0":"# Resnet Model","11a3809e":"### accuracy","a6129c47":"## validation results","18149d65":"### im using losses from previous epochs of model trained, as kaggle keeps hanging for me after 10 epochs, so these arays are losses from previous training that i had stored\/","2892d658":"# training more"}}