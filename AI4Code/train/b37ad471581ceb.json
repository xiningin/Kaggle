{"cell_type":{"713deafe":"code","f0cd9201":"code","3901cdc2":"code","485d3d95":"code","15ebd6b3":"code","11e22d45":"code","9ab512ed":"code","5993b32d":"code","4e7cc64a":"code","e047cc7d":"code","f91f59cc":"code","ab769303":"code","8f6a01b1":"code","94444912":"code","b9db9540":"code","15aa1d72":"code","5a21a831":"code","7b4d3e79":"code","f3b2bf61":"code","f7614119":"code","2bc5ca8b":"code","e2ef07cb":"code","8105fc3a":"code","60424554":"code","5edf6148":"code","85749534":"code","400e3bd3":"code","852be0bc":"code","5515574b":"code","25a740d7":"code","d1c93e5e":"code","3a6af7e9":"code","cd085322":"code","e8d887f6":"code","1f6945f7":"code","8bf54b81":"code","73a7f4ef":"code","f10c8537":"code","40164173":"code","ccb9e4c7":"code","3493229a":"code","c4efb5db":"code","7e531e5b":"markdown","028cf0a6":"markdown","93479f7b":"markdown","b7c0b202":"markdown","f0f18fa7":"markdown","8ced3a35":"markdown","09f88986":"markdown"},"source":{"713deafe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f0cd9201":"training = pd.read_csv('..\/input\/titanic\/train.csv')\ntest =   pd.read_csv('..\/input\/titanic\/test.csv') \n\ntraining['train_test'] = 1\ntest['train_test'] = 0\ntest['survived'] = np.NaN\nall_data = pd.concat([training,test])\n\n%matplotlib inline\nall_data.columns","3901cdc2":"# understand the nature of the data .info() .describe()\n# Histograms and boxplots\n# Values Count\n# Missing data\n# Correlation between the metrics\n# Explore intresting themes\n  # Wealthy survive?\n  # By location\n  # Age scatterplot with ticket price\n  # Young and wealthy variable?\n  # Total spent??\n# Feature engineering \n# preprocess data together or use a transformer?\n  # Use label for train and test\n    \n# Scaling?\n\n# Model Baseline\n# Model Comparision with Cv","485d3d95":"# See our Data types and Null counts\ntraining.info()","15ebd6b3":"# For Better understand the numeric data, we want to use the describe() method. Thos gives us the understanding of the central tendencies of the data\n\ntraining.describe()","11e22d45":"# Seperate Numeric Columns\n\ntraining.describe().columns","9ab512ed":"# See the numeric and  ctagorical values seperately\ndf_num = training [['Age', 'SibSp', 'Parch', 'Fare']]\ndf_cat = training[['Survived', 'Pclass', 'Sex', 'Ticket', 'Cabin', 'Embarked']]\n","5993b32d":"# Distributions for all numeric Variables\nfor i in df_num.columns:\n    plt.hist(df_num[i])\n    plt.title(i)\n    plt.show()       ","4e7cc64a":"print(df_num.corr())\nsns.heatmap(df_num.corr())","e047cc7d":"# Compare survival rate accoss Age. Sibsp, Parch, and Fare\n\npd.pivot_table(training, index = 'Survived', values = ['Age', 'SibSp', 'Parch', 'Fare'])","f91f59cc":"for i in df_cat.columns:\n    sns.barplot(df_cat[i].value_counts().index,df_cat[i].value_counts()).set_title(i)\n    plt.show()","ab769303":"# Compare Survival and each of these vategory variables.\nprint(pd.pivot_table(training, index = 'Survived', columns = 'Pclass', values = 'Ticket' , aggfunc = 'count'))\nprint(pd.pivot_table(training, index = 'Survived', columns = 'Sex', values = 'Ticket' , aggfunc = 'count'))\nprint(pd.pivot_table(training, index = 'Survived', columns = 'Embarked', values = 'Ticket' , aggfunc = 'count'))\n","8f6a01b1":"df_cat.Cabin\ntraining['cabin_multiple'] = training.Cabin.apply(lambda x : 0 if pd.isna(x) else len(x.split()))\n\n# After see this , we may want to look at cabin by letter or by number. Let's create some categories for this\n# Letters\n# Multiple Letters\n\ntraining['cabin_multiple'].value_counts()","94444912":"pd.pivot_table(training, index = 'Survived', columns = 'cabin_multiple', values = 'Ticket', aggfunc = 'count')","b9db9540":"# Creates categories based on the cabin letter (n stand for null)\n# In this case we will treat null value as its' on category\n\ntraining['cabin_adv'] = training.Cabin.apply(lambda x : str(x)[0])","15aa1d72":"# Compare Survival rate for Cabing\n\nprint(training.cabin_adv.value_counts())\npd.pivot_table(training, index = 'Survived', columns = 'cabin_adv' , values = 'Name', aggfunc = 'count')","5a21a831":"# Understand ticket value letter\n# Numeric vs non Numeric\n\ntraining['numeric_ticket'] = training.Ticket.apply(lambda x : 1 if x.isnumeric() else 0)\ntraining['numeric_letters'] = training.Ticket.apply(lambda x : ''.join (x.split()[:-1]).replace('.','' ).replace('\/','' ).lower() if len(x.split()[:-1]) > 0 else 0)\n","7b4d3e79":"training['numeric_ticket'].value_counts()","f3b2bf61":"# Lets us view all rows in dataframe through scrolling . For convience\n\npd.set_option(\"max_rows\", None)\ntraining['ticket_letters'].value_counts()","f7614119":"# Difference in numeric and non numeric tickets in survival rate\n\npd.pivot_table(training, index = 'Survived', columns = 'numeric_ticket', values = 'Ticket', aggfunc = 'count')","2bc5ca8b":"# Survival rate across different ticket types\n\npd.pivot_table(training, index = 'Survived', columns = 'numeric_letters', values = 'Ticket', aggfunc = 'count')","e2ef07cb":"# Feature Engineering on person's Title\n\ntraining.Name.head(50)\ntraining['name_title'] = training.Name.apply(lambda x: x.split(',')[1].split('.')[0].strip())\n\n# Mr , Mrs, E.T.C","8105fc3a":"training['name_title'].value_counts()","60424554":"#create all categorical variables that we did above for both training and test sets \nall_data['cabin_multiple'] = all_data.Cabin.apply(lambda x: 0 if pd.isna(x) else len(x.split(' ')))\nall_data['cabin_adv'] = all_data.Cabin.apply(lambda x: str(x)[0])\nall_data['numeric_ticket'] = all_data.Ticket.apply(lambda x: 1 if x.isnumeric() else 0)\nall_data['ticket_letters'] = all_data.Ticket.apply(lambda x: ''.join(x.split(' ')[:-1]).replace('.','').replace('\/','').lower() if len(x.split(' ')[:-1]) >0 else 0)\nall_data['name_title'] = all_data.Name.apply(lambda x: x.split(',')[1].split('.')[0].strip())\n\n#impute nulls for continuous data \n#all_data.Age = all_data.Age.fillna(training.Age.mean())\nall_data.Age = all_data.Age.fillna(training.Age.median())\n#all_data.Fare = all_data.Fare.fillna(training.Fare.mean())\nall_data.Fare = all_data.Fare.fillna(training.Fare.median())\n\n#drop null 'embarked' rows. Only 2 instances of this in training and 0 in test \nall_data.dropna(subset=['Embarked'],inplace = True)\n\n#tried log norm of sibsp (not used)\nall_data['norm_sibsp'] = np.log(all_data.SibSp+1)\nall_data['norm_sibsp'].hist()\n\n# log norm of fare (used)\nall_data['norm_fare'] = np.log(all_data.Fare+1)\nall_data['norm_fare'].hist()\n\n# converted fare to category for pd.get_dummies()\nall_data.Pclass = all_data.Pclass.astype(str)\n\n#created dummy variables from categories (also can use OneHotEncoder)\nall_dummies = pd.get_dummies(all_data[['Pclass','Sex','Age','SibSp','Parch','norm_fare','Embarked','cabin_adv','cabin_multiple','numeric_ticket','name_title','train_test']])\n\n#Split to train test again\nX_train = all_dummies[all_dummies.train_test == 1].drop(['train_test'], axis =1)\nX_test = all_dummies[all_dummies.train_test == 0].drop(['train_test'], axis =1)\n\n\ny_train = all_data[all_data.train_test==1].Survived\ny_train.shape","5edf6148":"# Scale data \nfrom sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\nall_dummies_scaled = all_dummies.copy()\nall_dummies_scaled[['Age','SibSp','Parch','norm_fare']]= scale.fit_transform(all_dummies_scaled[['Age','SibSp','Parch','norm_fare']])\nall_dummies_scaled\n\nX_train_scaled = all_dummies_scaled[all_dummies_scaled.train_test == 1].drop(['train_test'], axis =1)\nX_test_scaled = all_dummies_scaled[all_dummies_scaled.train_test == 0].drop(['train_test'], axis =1)\n\ny_train = all_data[all_data.train_test==1].Survived","85749534":"from sklearn.model_selection import cross_val_score\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import tree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC","400e3bd3":"# I usually use Naive Bayes as a baseline for my classification tasks \ngnb = GaussianNB()\ncv = cross_val_score(gnb,X_train_scaled,y_train,cv=5)\nprint(cv)\nprint(cv.mean())","852be0bc":"lr = LogisticRegression(max_iter = 2000)\ncv = cross_val_score(lr,X_train,y_train,cv=5)\nprint(cv)\nprint(cv.mean())","5515574b":"lr = LogisticRegression(max_iter = 2000)\ncv = cross_val_score(lr,X_train_scaled,y_train,cv=5)\nprint(cv)\nprint(cv.mean())","25a740d7":"dt = tree.DecisionTreeClassifier(random_state = 1)\ncv = cross_val_score(dt,X_train,y_train,cv=5)\nprint(cv)\nprint(cv.mean())","d1c93e5e":"dt = tree.DecisionTreeClassifier(random_state = 1)\ncv = cross_val_score(dt,X_train_scaled,y_train,cv=5)\nprint(cv)\nprint(cv.mean())","3a6af7e9":"knn = KNeighborsClassifier()\ncv = cross_val_score(knn,X_train,y_train,cv=5)\nprint(cv)\nprint(cv.mean())","cd085322":"knn = KNeighborsClassifier()\ncv = cross_val_score(knn,X_train_scaled,y_train,cv=5)\nprint(cv)\nprint(cv.mean())","e8d887f6":"rf = RandomForestClassifier(random_state = 1)\ncv = cross_val_score(rf,X_train,y_train,cv=5)\nprint(cv)\nprint(cv.mean())","1f6945f7":"rf = RandomForestClassifier(random_state = 1)\ncv = cross_val_score(rf,X_train_scaled,y_train,cv=5)\nprint(cv)\nprint(cv.mean())","8bf54b81":"svc = SVC(probability = True)\ncv = cross_val_score(svc,X_train_scaled,y_train,cv=5)\nprint(cv)\nprint(cv.mean())","73a7f4ef":"from xgboost import XGBClassifier\nxgb = XGBClassifier(random_state =1)\ncv = cross_val_score(xgb,X_train_scaled,y_train,cv=5)\nprint(cv)\nprint(cv.mean())","f10c8537":"#Voting classifier takes all of the inputs and averages the results. For a \"hard\" voting classifier each classifier gets 1 vote \"yes\" or \"no\" and the result is just a popular vote. For this, you generally want odd numbers\n#A \"soft\" classifier averages the confidence of each of the models. If a the average confidence is > 50% that it is a 1 it will be counted as such\nfrom sklearn.ensemble import VotingClassifier\nvoting_clf = VotingClassifier(estimators = [('lr',lr),('knn',knn),('rf',rf),('gnb',gnb),('svc',svc),('xgb',xgb)], voting = 'soft') ","40164173":"cv = cross_val_score(voting_clf,X_train_scaled,y_train,cv=5)\nprint(cv)\nprint(cv.mean())","ccb9e4c7":"voting_clf.fit(X_train_scaled,y_train)\ny_hat_base_vc = voting_clf.predict(X_test_scaled).astype(int)\nbasic_submission = {'PassengerId': test.PassengerId, 'Survived': y_hat_base_vc}\nbase_submission = pd.DataFrame(data=basic_submission)\nbase_submission.to_csv('base_submission.csv', index=False)","3493229a":"#simple performance reporting function\ndef clf_performance(classifier, model_name):\n    print(model_name)\n    print('Best Score: ' + str(classifier.best_score_))\n    print('Best Parameters: ' + str(classifier.best_params_))","c4efb5db":"lr = LogisticRegression()\nparam_grid = {'max_iter' : [2000],\n              'penalty' : ['l1', 'l2'],\n              'C' : np.logspace(-4, 4, 20),\n              'solver' : ['liblinear']}\n\nclf_lr = GridSearchCV(lr, param_grid = param_grid, cv = 5, verbose = True, n_jobs = -1)\nbest_clf_lr = clf_lr.fit(X_train_scaled,y_train)\nclf_performance(best_clf_lr,'Logistic Regression')","7e531e5b":"# **Light Data Exploration**\n\n1    **Numeric data**\n\n   *  Made histograms to understand distributions\n   *  Corrplot\n   *  Pivot table comparing survival rate accross           numeric variables \n   \n2    **Catagorical data**\n\n  * Make bar charts to understand balance of classes\n  * Make pivot tables to understand relationship with     survival\n","028cf0a6":"# **Data Preprocessing for Model**\n\n1) Drop null values from Embarked (only 2)\n2) Include only relevant variables (Since we have limited data, I wanted to exclude things like name and passanger ID so that we could have a reasonable number of features for our models to deal with)\n\n**Variables: 'Pclass', 'Sex','Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'cabin_adv', 'cabin_multiple', 'numeric_ticket', 'name_title'**\n\n3) Do categorical transforms on all data. Usually we would use a transformer, but with this approach we can ensure that our traning and test data have the same colums. We also may be able to infer something about the shape of the test data through this method. I will stress, this is generally not recommend outside of a competition (use onehot encoder).\n4) Impute data with mean for fare and age (Should also experiment with median)\n5) Normalized fare using logarithm to give more semblance of a normal distribution\n6) Scaled data 0-1 with standard scaler","93479f7b":"# **Model Building (Baseline Validation Performance)**\n\nBefore going further, I like to see how various different models perform with default parameters. I tried the following models using 5 fold cross validation to get a baseline. With a validation set basline, we can see how much tuning improves each of the models. Just because a model has a high basline on this validation set doesn't mean that it will actually do better on the eventual test set.\n\nNaive Bayes (72.6%)\nLogistic Regression (82.1%)\nDecision Tree (77.6%)\nK Nearest Neighbor (80.5%)\nRandom Forest (80.6%)\nSupport Vector Classifier (83.2%)\nXtreme Gradient Boosting (81.8%)\nSoft Voting Classifier - All Models (82.8%)","b7c0b202":"# **Feature Engineering**\n\n1)  Cabin : - Simplify cabins (evaluated if cabin letter(cabin_adv) or the purchase of tickets accross multiple cabins (cabin_multiple) impacted survival)\n\n2)  Tickets : - Do different ticket types impact survival rates?\n\n3)  Does a person's title relate to survival rates?","f0f18fa7":"**Here we import the data for this analysis. We will be exclusively working with training dataset. We will be validating based on data from the training dataset as well. For our final submission, we will make the pridiction on the test dataset.**","8ced3a35":"# **Model Tuned Performance**\n\nAfter getting the baselines, let's see if we can improve on the indivdual model results!I mainly used grid search to tune the models. I also used Randomized Search for the Random Forest and XG boosted model to simplify testing time.\n\nModel\tBaseline\tTuned Performance\nNaive Bayes\t72.6%\tNA\nLogistic Regression\t82.1%\t82.6%\nDecision Tree\t77.6%\tNA\nK Nearest Neighbor\t80.5%\t83.0%\nRandom Forest\t80.6%\t83.6\nSupport Vector Classifier\t83.2%\t83.2%\nXtreme Gradient Boosting\t81.8%\t85.3%","09f88986":"# **Project Planning**\nWhen starting any project , I like to outline the steps that i plan to take. Below is the rough outline of this project usimg commented cells. "}}