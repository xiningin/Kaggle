{"cell_type":{"81abeba2":"code","c8aab508":"code","d36bf9ca":"code","9062456b":"code","9f9360a0":"code","e0f5c5ab":"code","ae4ef04d":"code","3e0cb633":"code","c5c7ec0b":"code","2d411f1d":"code","894fd08c":"code","5c989286":"code","68e41244":"code","09b2170a":"code","e2d91f3d":"code","a22dfd2c":"code","c2fa0392":"code","79c77d57":"code","40f198d9":"code","cc36caf8":"code","8463a702":"markdown"},"source":{"81abeba2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport tensorflow as tf","c8aab508":"df = pd.read_csv('..\/input\/spam-text-message-classification\/SPAM text message 20170820 - Data.csv')","d36bf9ca":"df.head(10)","9062456b":"import string\nimport re","9f9360a0":"def preprocess_text(sen):\n    # Remove punctuations and numbers\n    sentence = re.sub('[^a-zA-Z]', ' ', sen)\n\n    # Single character removal\n    sentence = re.sub(r\"\\s+[a-zA-Z]\\s+\", ' ', sentence)\n\n    # Removing multiple spaces\n    sentence = re.sub(r'\\s+', ' ', sentence)\n    return sentence.lower()\ndf['Message'] = df['Message'].apply(preprocess_text)","e0f5c5ab":"df.head()","ae4ef04d":"from tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences","3e0cb633":"msg = df['Message']","c5c7ec0b":"vocab_size = 10000\nembedding_dim = 16\nmax_length = 32\ntrunc_type = 'post'\npad_type = 'post'\noov_tok = '<OOV>'","2d411f1d":"token = Tokenizer(num_words= vocab_size, oov_token= oov_tok)\ntoken.fit_on_texts(df['Message'])\nword_index = token.word_index\nword_index","894fd08c":"sens = token.texts_to_sequences(df['Message'])\npadded = pad_sequences(sequences= sens, maxlen= max_length, padding= 'post', truncating= trunc_type)","5c989286":"df['Category'] = df['Category'].map({'spam': 0, 'ham': 1})","68e41244":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(padded, df['Category'], test_size = 0.2)","09b2170a":"print(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","e2d91f3d":"# Model Definition with LSTM\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n    tf.keras.layers.Bidirectional(tf.keras.layers.GRU(64, return_sequences=True)),\n    tf.keras.layers.Bidirectional(tf.keras.layers.GRU(32)),\n    tf.keras.layers.Dense(6, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nmodel.summary()\n","a22dfd2c":"history = model.fit(x_train, y_train, epochs= 5, validation_data= (x_test, y_test))","c2fa0392":"import matplotlib.pyplot as plt\n\n\ndef plot_graphs(history, string):\n  plt.plot(history.history[string])\n  plt.plot(history.history['val_'+string])\n  plt.xlabel(\"Epochs\")\n  plt.ylabel(string)\n  plt.legend([string, 'val_'+string])\n  plt.show()\n\nplot_graphs(history, 'accuracy')\nplot_graphs(history, 'loss')","79c77d57":"# Model Definition with LSTM\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64, return_sequences=True)),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32)),\n    tf.keras.layers.Dense(6, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nmodel.summary()\n","40f198d9":"history = model.fit(x_train, y_train, epochs= 5, validation_data= (x_test, y_test))","cc36caf8":"import matplotlib.pyplot as plt\n\n\ndef plot_graphs(history, string):\n  plt.plot(history.history[string])\n  plt.plot(history.history['val_'+string])\n  plt.xlabel(\"Epochs\")\n  plt.ylabel(string)\n  plt.legend([string, 'val_'+string])\n  plt.show()\n\nplot_graphs(history, 'accuracy')\nplot_graphs(history, 'loss')","8463a702":"Normalizaiton"}}