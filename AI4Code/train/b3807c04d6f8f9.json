{"cell_type":{"385e5e5e":"code","5fc5f208":"code","8576e3b4":"code","1933b1dd":"code","d8cce88c":"code","e196ce6c":"code","a064eda3":"code","c38a89ca":"code","4f6d31e6":"code","93a24798":"code","292ea5c4":"code","a8037a99":"code","241c2cd3":"markdown","8228d86d":"markdown","cb4467c6":"markdown","f2a9ff6a":"markdown","8e8333ce":"markdown"},"source":{"385e5e5e":"import numpy as np\nimport pandas as pd\nimport datatable as dt\nimport gc\nfrom numba import njit\n\nfrom scipy.optimize import minimize\nfrom sklearn.neighbors import KernelDensity\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5fc5f208":"train_df = dt.fread('..\/input\/jane-street-market-prediction\/train.csv').to_pandas()","8576e3b4":"# Snippets from Marco Lopez de Prado, 2020\n\ndef mpPDF(var,q,pts):\n    # Marcenko-Pastur pdf\n    # q=T\/N\n    eMin, eMax = var*(1-(1.\/q)**.5)**2, var*(1+(1.\/q)**.5)**2\n    eVal = np.linspace(eMin,eMax,pts)\n    pdf = q\/(2*np.pi*var*eVal)*((eMax-eVal)*(eVal-eMin))**.5\n    pdf = pd.Series(pdf.reshape(-1,), index=eVal.reshape(-1,))\n    return pdf\n\n\ndef getPCA(matrix):\n    # Get eVal,eVec from a Hermitian matrix\n    eVal,eVec = np.linalg.eigh(matrix)\n    indices=eVal.argsort()[::-1] # arguments for sorting eVal desc\n    eVal,eVec=eVal[indices],eVec[:,indices]\n    eVal=np.diagflat(eVal)\n    return eVal,eVec\n\ndef fitKDE(obs,bWidth=.25,kernel='gaussian',x=None):\n    # Fit kernel to a series of obs, and derive the prob of obs\n    # x is the array of values on which the fit KDE will be evaluated\n    if len(obs.shape)==1:\n        obs=obs.reshape(-1,1)\n    kde=KernelDensity(kernel=kernel,bandwidth=bWidth).fit(obs)\n    if x is None:\n        x=np.unique(obs).reshape(-1,)\n    if len(x.shape)==1:\n        x=x.reshape(-1,1)\n    logProb=kde.score_samples(x) # log(density)\n    pdf=pd.Series(np.exp(logProb),index=x.flatten())\n    return pdf\n\ndef cov2corr(cov):\n    # Derive the correlation matrix from a covariance matrix\n    std=np.sqrt(np.diag(cov))\n    corr=cov\/np.outer(std,std)\n    corr[corr<-1],corr[corr>1]=-1,1 # numerical error\n    return corr\n\ndef errPDFs(var,eVal,q,bWidth,pts=1000):\n    # Fit error\n    pdf0=mpPDF(var,q,pts) # theoretical pdf\n    pdf1=fitKDE(eVal,bWidth,x=pdf0.index.values) # empirical pdf\n    sse=np.sum((pdf1-pdf0)**2)\n    return sse\n\ndef findMaxEval(eVal,q,bWidth):\n    # Find max random eVal by fitting Marcenko\u2019s dist\n    out=minimize(lambda *x:errPDFs(*x),.5,args=(eVal,q,bWidth),\n    bounds=((1E-5,1-1E-5),))\n    if out['success']:\n        var=out['x'][0]\n    else:\n        var=1\n    eMax=var*(1+(1.\/q)**.5)**2\n    return eMax,var\n\ndef denoisedCorr(eVal,eVec,nFacts):\n    # Remove noise from corr by fixing random eigenvalues\n    eVal_=np.diag(eVal).copy()\n    eVal_[nFacts:]=eVal_[nFacts:].sum()\/float(eVal_.shape[0] - nFacts)\n    eVal_=np.diag(eVal_)\n    corr1=np.dot(eVec,eVal_).dot(eVec.T)\n    corr1=cov2corr(corr1)\n    return corr1\n\ndef denoisedCorr2(eVal,eVec,nFacts,alpha=0):\n    # Remove noise from corr through targeted shrinkage\n    eValL,eVecL=eVal[:nFacts,:nFacts],eVec[:,:nFacts]\n    eValR,eVecR=eVal[nFacts:,nFacts:],eVec[:,nFacts:]\n    corr0=np.dot(eVecL,eValL).dot(eVecL.T)\n    corr1=np.dot(eVecR,eValR).dot(eVecR.T)\n    corr2=corr0+alpha*corr1+(1-alpha)*np.diag(np.diag(corr1))\n    return corr2","1933b1dd":"from sklearn.base import BaseEstimator, TransformerMixin\n\n@njit\ndef fillna_npwhere_njit(array, values):\n    if np.isnan(array.sum()):\n        array = np.where(np.isnan(array), values, array)\n    return array\n\nclass RMTDenoising(BaseEstimator, TransformerMixin):\n    \n    def __init__(self, bWidth=.01, alpha=.5, feature_0=True, sample=0.3, seed=2021):\n        self.bWidth = bWidth\n        self.alpha = alpha\n        self.feature_0 = feature_0\n        self.sample = sample\n        self.seed = seed\n    \n    def denoise(self, X):\n        sample = X.sample(frac=self.sample, random_state=self.seed)\n        q = X.shape[0] \/ X.shape[1]\n        cov = sample.cov().values\n        corr0 = cov2corr(cov)\n\n        eVal0, eVec0 = getPCA(corr0)\n        eMax0, var0 = findMaxEval(np.diag(eVal0), q, bWidth=self.bWidth)\n        nFacts0 = eVal0.shape[0] - np.diag(eVal0)[::-1].searchsorted(eMax0)\n        corr1 = denoisedCorr2(eVal0,eVec0,nFacts0,alpha=self.alpha)\n        eVal1, eVec1 = getPCA(corr1)\n        #result = np.hstack((np.diag(eVal1), var0))\n        #name = [f'eigen_{i+1}' for i in range(len(eVal1))] + ['var_explained']\n        return eVec1[:, :nFacts0]\n    \n    def fit(self, X, y=None):\n        if self.feature_0:\n            self.cols_ = [c for c in X.columns if c != 'feature_0']\n        else:\n            self.cols_ = list(X.columns)\n        X_ = X[self.cols_]\n        self.W_ = self.denoise(X_)\n        self.dim_W_ = self.W_.shape[1]\n        return self\n    \n    def transform(self, X, y=None):\n        X_ = X.copy()\n        names = [f'proj_{i}' for i in range(self.dim_W_)]\n        projection = pd.DataFrame(fillna_npwhere_njit(X_[self.cols_].values, 0).dot(self.W_), columns=names)\n        if self.feature_0:\n            projection['feature_0'] = X['feature_0']\n        return projection\n","d8cce88c":"import numpy as np\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection._split import _BaseKFold, indexable, _num_samples\nfrom sklearn.utils.validation import _deprecate_positional_args\n\n# modified code for group gaps; source\n# https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\nclass PurgedGroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Allows for a gap in groups to avoid potentially leaking info from\n    train into test if the model has windowed or lag features.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_group_size : int, default=Inf\n        Maximum group size for a single training set.\n    group_gap : int, default=None\n        Gap between train and test\n    max_test_group_size : int, default=Inf\n        We discard this number of groups from the end of each train split\n    \"\"\"\n\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_group_size=np.inf,\n                 max_test_group_size=np.inf,\n                 group_gap=None,\n                 verbose=False\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_group_size = max_train_group_size\n        self.group_gap = group_gap\n        self.max_test_group_size = max_test_group_size\n        self.verbose = verbose\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        group_gap = self.group_gap\n        max_test_group_size = self.max_test_group_size\n        max_train_group_size = self.max_train_group_size\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n\n        group_test_size = min(n_groups \/\/ n_folds, max_test_group_size)\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n\n            group_st = max(0, group_test_start - group_gap - max_train_group_size)\n            for train_group_idx in unique_groups[group_st:(group_test_start - group_gap)]:\n                train_array_tmp = group_dict[train_group_idx]\n                \n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n\n            train_end = train_array.size\n \n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n\n            test_array  = test_array[group_gap:]\n            \n            \n            if self.verbose > 0:\n                    pass\n                    \n            yield [int(i) for i in train_array], [int(i) for i in test_array]","e196ce6c":"from sklearn.pipeline import Pipeline\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score","a064eda3":"# target\nth = 0\ntrain_df['action'] = (train_df.resp * train_df.weight) > 0\n\n# features\nfeature_cols = [c for c in train_df.columns if c.startswith('feature_')]\n\nX = train_df[feature_cols]\ny = train_df['action']\ngroups = train_df.date.values\neps = 1e-3\nwgts = (train_df['weight'] + eps).values # proxy for risk\n\ndel train_df\ngc.collect()","c38a89ca":"# params\nparams = dict(\n    n_estimators=150,\n    learning_rate=.2,\n    gamma=1.2,\n    max_depth=3,\n    reg_lambda=1.8,\n    subsample=.63,\n    colsample_bytree=.8,\n    random_state=2021,\n    tree_method='gpu_hist',\n    min_child_weight=0.03,\n    n_jobs=-1,\n    predictor='gpu_predictor'\n)\n\nmodel = Pipeline([\n    ('denoise', RMTDenoising(sample=0.8)),\n    ('clf', XGBClassifier(**params))\n], verbose=True)","4f6d31e6":"# cv params\nFOLDS = 5\ncv = PurgedGroupTimeSeriesSplit(n_splits=FOLDS, \n                                group_gap=10,\n                                #max_train_group_size=10000,\n                                max_test_group_size=10000)\n\n# cross_validate\nscores = cross_val_score(\n    model, X, y, cv=cv, groups=groups, \n    fit_params=dict(clf__sample_weight=wgts),\n    scoring='roc_auc', verbose=10)\n\nprint(np.mean(scores), np.std(scores))\nprint(scores)","93a24798":"# fit\nmodel.fit(X, y, clf__sample_weight=wgts)","292ea5c4":"import janestreet\nfrom tqdm import tqdm\n\nenv = janestreet.make_env()","a8037a99":"for (test_df, pred_df) in tqdm(env.iter_test()):\n    if test_df['weight'].item() > 0:\n        x_tt = test_df[feature_cols]\n        pred = model.predict(x_tt)\n        pred_df.action = pred\n    else:\n        pred_df.action = 0\n    pred_df.action = pred_df.action.astype('int')\n    env.predict(pred_df)","241c2cd3":"# Submission","8228d86d":"# Modelling","cb4467c6":"# Load data","f2a9ff6a":"## Cross validation","8e8333ce":"# Denoising Correlation matrix"}}