{"cell_type":{"1645bd45":"code","f1623138":"code","2c574ed4":"code","674a97d7":"code","301886fe":"code","54ad0bc7":"code","1e01d4f2":"code","419f6e0c":"code","1c252af3":"code","cb0b790e":"code","428df1dc":"code","fb816930":"code","afca99b3":"code","d8a43af6":"code","0a904c40":"markdown"},"source":{"1645bd45":"import numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nimport pathlib\nfrom PIL import Image\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import accuracy_score\nimport cv2\nfrom PIL import Image\n\n\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, array_to_img, load_img\nfrom keras.models import Sequential\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, array_to_img, load_img\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout\nfrom tensorflow.keras.models import Sequential\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom tensorflow.keras.optimizers import Adam\n\n\n\n\nplt.rcParams[\"figure.figsize\"] = (16,10) #Make the plots bigger by default\nplt.rcParams[\"lines.linewidth\"] = 2 #Setting the default line width\nplt.style.use(\"ggplot\")","f1623138":"data_dir = '..\/input\/gtsrb-german-traffic-sign'\ntrain_path = '..\/input\/gtsrb-german-traffic-sign\/Train'\ntest_path = '..\/input\/gtsrb-german-traffic-sign\/'\nIMG_HEIGHT = 30\nIMG_WIDTH = 30","2c574ed4":"# Number of Classes\nNUM_CATEGORIES = len(os.listdir(train_path))\nNUM_CATEGORIES","674a97d7":"# Visualizing all the different Signs\nimg_dir = pathlib.Path(train_path)\nplt.figure(figsize=(14,14))\nindex = 0\nfor i in range(NUM_CATEGORIES):\n    plt.subplot(7, 7, i+1)\n    plt.grid(False)\n    plt.xticks([])\n    plt.yticks([])\n    sign = list(img_dir.glob(f'{i}\/*'))[0]\n    img = load_img(sign, target_size=(IMG_WIDTH, IMG_HEIGHT))\n    plt.imshow(img)\nplt.show()\n    ","301886fe":"# Label Overview\nclasses = { 0:'Speed limit (20km\/h)',\n            1:'Speed limit (30km\/h)', \n            2:'Speed limit (50km\/h)', \n            3:'Speed limit (60km\/h)', \n            4:'Speed limit (70km\/h)', \n            5:'Speed limit (80km\/h)', \n            6:'End of speed limit (80km\/h)', \n            7:'Speed limit (100km\/h)', \n            8:'Speed limit (120km\/h)', \n            9:'No passing', \n            10:'No passing veh over 3.5 tons', \n            11:'Right-of-way at intersection', \n            12:'Priority road', \n            13:'Yield', \n            14:'Stop', \n            15:'No vehicles', \n            16:'Veh > 3.5 tons prohibited', \n            17:'No entry', \n            18:'General caution', \n            19:'Dangerous curve left', \n            20:'Dangerous curve right', \n            21:'Double curve', \n            22:'Bumpy road', \n            23:'Slippery road', \n            24:'Road narrows on the right', \n            25:'Road work', \n            26:'Traffic signals', \n            27:'Pedestrians', \n            28:'Children crossing', \n            29:'Bicycles crossing', \n            30:'Beware of ice\/snow',\n            31:'Wild animals crossing', \n            32:'End speed + passing limits', \n            33:'Turn right ahead', \n            34:'Turn left ahead', \n            35:'Ahead only', \n            36:'Go straight or right', \n            37:'Go straight or left', \n            38:'Keep right', \n            39:'Keep left', \n            40:'Roundabout mandatory', \n            41:'End of no passing', \n            42:'End no passing veh > 3.5 tons' }","54ad0bc7":"folders = os.listdir(train_path)\n\n\ntrain_number = []\nclass_num = []\n\nfor folder in folders:\n    train_files = os.listdir(train_path + '\/' + folder)\n    train_number.append(len(train_files))\n    class_num.append(classes[int(folder)])\n\n\n\nplt.figure(figsize=(21,10))  \nplt.bar(class_num, train_number)\nplt.xticks(class_num, rotation='vertical')\nplt.show()","1e01d4f2":"def load_data(data_dir):\n\n\n    images = list()\n    labels = list()\n    for category in range(NUM_CATEGORIES):\n        categories = os.path.join(data_dir, str(category))\n        for img in os.listdir(categories):\n            img = load_img(os.path.join(categories, img), target_size=(30, 30))\n            image = img_to_array(img)\n            images.append(image)\n            labels.append(category)\n    \n    return images, labels\n        ","419f6e0c":"images, labels = load_data(train_path)","1c252af3":"labels = to_categorical(labels)\n","cb0b790e":"x_train, x_test, y_train, y_test = train_test_split(np.array(images), labels, test_size=0.3)","428df1dc":"model = Sequential()\n\n# First Convolutional Layer\nmodel.add(Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=(IMG_HEIGHT,IMG_WIDTH,3)))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(rate=0.25))\n\n# Second Convolutional Layer\nmodel.add(Conv2D(filters=64, kernel_size=3, activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(rate=0.25))\n\n# Third Convolutional Layer\nmodel.add(Conv2D(filters=64, kernel_size=3, activation='relu'))\n\nmodel.add(Flatten())\nmodel.add(Dense(units=64, activation='relu'))\nmodel.add(Dense(NUM_CATEGORIES, activation='softmax'))\n\n# Compiling the model\n\n\nlr = 0.001\nepochs = 30\nmodel.compile(loss='categorical_crossentropy',optimizer=\"adam\",metrics=['accuracy'])\n\nmodel.summary()","fb816930":"\nhistory = model.fit(x_train, \n                    y_train,\n                    validation_data = (x_test, y_test), \n                    epochs=40, \n                    steps_per_epoch=60\n                   )","afca99b3":"loss, accuracy = model.evaluate(x_test, y_test)\n\nprint('test set accuracy: ', accuracy * 100)","d8a43af6":"plt.figure(0)\nplt.plot(history.history['accuracy'], label='training accuracy')\nplt.plot(history.history['val_accuracy'], label='val accuracy')\nplt.title('Accuracy')\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.legend()\n\nplt.figure(1)\nplt.plot(history.history['loss'], label='training loss')\nplt.plot(history.history['val_loss'], label='val loss')\nplt.title('Loss')\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.legend()","0a904c40":"## Assigning Path for Dataset"}}