{"cell_type":{"e0060ff8":"code","b8a37b60":"code","47e4043e":"code","29bece4c":"code","e820fc69":"code","cf92d8a6":"code","e7f034ab":"code","97280c40":"code","053d0a23":"code","a94adbf8":"code","497a2b6b":"code","4c05e025":"code","8403f2bb":"code","06f18a72":"code","a3dc97b3":"code","c19a6635":"code","a6c4ad3f":"code","b638fe1d":"code","aa66e3f7":"code","2f035627":"code","8188654d":"code","17d3a2c6":"code","0e983ac1":"code","ea95125b":"code","8dd56479":"code","734b7c08":"code","3714db42":"code","04d30973":"code","c45696d9":"code","8c4d6253":"code","88b9e187":"code","fc9489d2":"code","dbb3b692":"code","3442bfcd":"code","7c64b727":"code","6d2c39f9":"code","d5614428":"code","853c3ae5":"code","0a645678":"code","3b18c901":"code","365558fa":"code","d00d710f":"code","9d9aca21":"code","e8e5a3d7":"code","b6f68e93":"code","d4b0a010":"code","788d1182":"code","38255954":"code","a08fa3be":"code","e75de3cc":"code","2023ddd0":"code","a4d26408":"code","21e7f408":"code","c9e03bd1":"code","c1250b9c":"code","cea6e266":"code","db7126ff":"code","7234bca0":"code","a80272fb":"code","f0bbdfb9":"code","5f399ee8":"code","38d00bef":"code","1ae518a3":"code","970b353e":"code","e985686b":"code","9a68900e":"code","6c39f8b9":"code","df04c49c":"code","282e830d":"code","af79fb54":"code","d6707547":"code","d5e00169":"code","e318afd6":"code","2e34baca":"code","5923c447":"code","92db2696":"code","87ef3e24":"code","7a919ec8":"code","79a832ad":"code","925862e3":"code","ce802664":"code","16808b25":"code","b2bcd7ea":"code","b26ad371":"code","e263b4a3":"code","8b556611":"code","0f5ffed8":"code","0a69fb8e":"code","64e8f8c2":"code","bf8a8be1":"code","5f9840bf":"code","eccdf3ff":"code","3561bade":"code","b100bbc2":"code","4f4b428d":"code","5713eaf9":"code","8ff45d4c":"code","8faab8f4":"code","9539e6a1":"code","d5ea576a":"code","637ea5c5":"code","dd0adbac":"code","b799d97c":"code","e22809d8":"code","2381c043":"code","c4d25e4e":"code","2e5297e5":"markdown","1125e2fd":"markdown","e30e92ea":"markdown","3bf78e66":"markdown","da62e6a9":"markdown","4434fef6":"markdown","0335a611":"markdown","6fedef56":"markdown","281b75b8":"markdown","919a30bb":"markdown","5da3e4b0":"markdown","187069fd":"markdown","0f64cb5e":"markdown","5886cb51":"markdown","e6d7ad6f":"markdown","fab644c4":"markdown","ba286b91":"markdown","3591786f":"markdown","b5e9da66":"markdown","3a190ae8":"markdown","dcd04c16":"markdown","2c1a5d78":"markdown","ef2ce136":"markdown","0badc4fb":"markdown","69856b29":"markdown","64bec25b":"markdown"},"source":{"e0060ff8":"#load the packages\nimport numpy as np\nimport pandas as pd\nimport os\n#visualization imports\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n#consistent sized plots\nfrom pylab import rcParams\nrcParams['figure.figsize']=12,5\nrcParams['axes.labelsize']=12\nrcParams['xtick.labelsize']=12\nrcParams['ytick.labelsize']=12\n#display all columns \npd.options.display.max_columns = None\n#handle unwanted warnings\nimport warnings\nwarnings.filterwarnings(action='ignore',category=DeprecationWarning)\nwarnings.filterwarnings(action='ignore',category=FutureWarning)","b8a37b60":"#load the data\ntrain = pd.read_csv('\/kaggle\/input\/machinehack-music-genre-hackathon\/train.csv',delimiter=',',encoding='IBM862',engine='python')\ntest = pd.read_csv('\/kaggle\/input\/machinehack-music-genre-hackathon\/test.csv',delimiter=',',encoding='IBM862',engine='python')","47e4043e":"#view the top rows\ntrain.head()","29bece4c":"#check for duplicates \nlen(train[train.duplicated()==True])","e820fc69":"#trim artist name and track name of leading white spaces and convert to lower case\ntrain['Artist Name'] = train['Artist Name'].str.strip()\ntest['Artist Name'] =  test['Artist Name'].str.strip()\n\ntrain['Track Name'] = train['Track Name'].str.strip()\ntest['Track Name'] =  test['Track Name'].str.strip()\n\ntrain['Artist Name'] = train['Artist Name'].str.lower()\ntest['Artist Name'] =  test['Artist Name'].str.lower()\n\ntrain['Track Name'] = train['Track Name'].str.lower()\ntest['Track Name'] =  test['Track Name'].str.lower()","cf92d8a6":"#check the info \ntrain.info()","e7f034ab":"#check the basic stats\ntrain.describe().transpose()","97280c40":"#check the various classes \/ labels\ntrain['Class'].unique()","053d0a23":"#check the number of different class types\ntrain['Class'].value_counts().sort_values(ascending=False)","a94adbf8":"#plot of the Class \/ Music Genre count\nplt.figure(figsize=(14,4))\nsns.countplot(y=train['Class'])\nplt.title('Distribution of the Music Genre')\nplt.ylabel('Genres')\nplt.xlabel('Count of Genres')\nplt.grid()\nplt.show()","497a2b6b":"#import train test split and create the X features and y labels \nfrom sklearn.model_selection import train_test_split\nX = train.drop('Class',axis=1)\ny = train[['Class']]\ntest_size = 0.1\nseed = 41\n\n#split the dataset\nX_train,X_dev,y_train,y_dev = train_test_split(X,y,test_size=test_size,random_state=seed,stratify=train['Class'],shuffle=True)","4c05e025":"#check top rows of X_train\nX_train.head(2)","8403f2bb":"y_train.head(2)","06f18a72":"#check the correlation map\nsns.heatmap(X_train.corr())\nplt.show()","a3dc97b3":"#check for the null values\nsns.heatmap(X_train.isna(),yticklabels=False,cbar=False)\nplt.title('Visualize Features with Null Values')\nplt.show()\n","c19a6635":"#check the top 10 artists in the dataset \nX_train['Artist Name'].value_counts().sort_values(ascending=False)[:10]","a6c4ad3f":"#check the unique track names in the dataset\nX_train['Track Name'].nunique()","b638fe1d":"len(X_train)","aa66e3f7":"#list down the track names in the descending order of their frequency\nX_train['Track Name'].value_counts().sort_values(ascending=False)","2f035627":"#check one of the repeated tracks\nX_train[X_train['Track Name']=='runaway']","8188654d":"#check another of repeated tracks to spot any new observation .. \nX_train[X_train['Track Name']=='dreams']","17d3a2c6":"#get rid of the absolute duplicate records from the dataset \nindices_duplicated_xtrain = X_train[X_train.duplicated(keep='first')==True].index\nindices_duplicated_xdev = X_dev[X_dev.duplicated(keep='first')==True].index","0e983ac1":"warnings.filterwarnings(action='ignore')\n\n#drop the duplicates\nX_train.drop_duplicates(keep='first',inplace=True)\nX_dev.drop_duplicates(keep='first',inplace=True)","ea95125b":"indices_retain_xtrain = X_train.index\nindices_retain_xdev = X_dev.index","8dd56479":"indices_retain_xtrain","734b7c08":"#remove the corresponding labels from y_train and y_dev\ny_train = y_train.loc[indices_retain_xtrain]\ny_dev = y_dev.loc[indices_retain_xdev]","3714db42":"#check the length of the X_train and y_train --> one way to confirm \nlen(X_train), len(y_train)","04d30973":"#check the match in indices --> first few indices, a more robust algo can also be written\nprint(X_train.index[:10])\nprint(y_train.index[:10])","c45696d9":"X_train.head()","8c4d6253":"X_train['Track Name'].value_counts().sort_values(ascending=False)","88b9e187":"X_train[X_train['Track Name']=='Runaway']","fc9489d2":"plt.figure(figsize=(12,5))\nplt.hist(X_train['duration_in min\/ms'],bins=50)\nplt.title('Duration of the music')\nplt.grid()\nplt.show()","dbb3b692":"def duration_min(duration):\n    '''This function will convert the millisecond duration music in minutes'''\n    if duration > 1000: #1000 is a safe lower limit\n        duration = duration \/ 60000\n    return duration","3442bfcd":"#convert the duration in minutes\nX_train['duration_in min\/ms'] = X_train['duration_in min\/ms'].apply(duration_min)","7c64b727":"#convert the duration in minutes in the dev set\nX_dev['duration_in min\/ms'] = X_dev['duration_in min\/ms'].apply(duration_min)","6d2c39f9":"X_train.head(2)","d5614428":"#apply the changes in the test dataset\ntest['duration_in min\/ms'] = test['duration_in min\/ms'].apply(duration_min)","853c3ae5":"plt.figure(figsize=(12,5))\nplt.hist(X_train['duration_in min\/ms'],bins=50)\nplt.title('Duration of the music in minutes')\nplt.grid()\nplt.show()","0a645678":"#select only the numerical features\nnumerical_features =  X_train.select_dtypes(exclude='object')","3b18c901":"#create histogram of all the numerical features \nnumerical_features.hist(bins=50, figsize=(20,15))\nplt.show()","365558fa":"categorical_features = X_train.select_dtypes(include='object').columns.tolist()","d00d710f":"categorical_features","9d9aca21":"X_train['mode'].value_counts()","e8e5a3d7":"X_train.info()","b6f68e93":"#check how many similar track names still appear\nX_train['Track Name'].value_counts().sort_values(ascending=False)","d4b0a010":"X_train['Artist Name'].nunique()","788d1182":"#label encode the categorical features\nfrom sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ntrain_cat_features = ['Artist Name']\nfor col in train_cat_features:\n    encoder.fit(list(X_train[col].values) + list(X_dev[col].values) + list(test[col].values))\n    X_train[col] = encoder.transform(list(X_train[col].values))\n    X_dev[col] =   encoder.transform(list(X_dev[col].values))\n    test[col] =    encoder.transform(list(test[col].values))","38255954":"X_train.head(3)","a08fa3be":"X_dev.head(3)","e75de3cc":"test.head(2)","2023ddd0":"X_train.columns","a4d26408":"numeric_columns = ['Popularity', 'danceability', 'energy',\n       'key', 'loudness', 'mode', 'speechiness', 'acousticness',\n       'instrumentalness', 'liveness', 'valence', 'tempo',\n       'duration_in min\/ms', 'time_signature']","21e7f408":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer","c9e03bd1":"#carve out only the numerical features \nX_train_num = X_train[numeric_columns]\nX_dev_num = X_dev[numeric_columns]\ntest_num = test[numeric_columns]","c1250b9c":"#impute the values in the numerical features\nimputer = IterativeImputer()\ntrain_imputed = imputer.fit_transform(X_train_num)\nX_train_num = pd.DataFrame(data=train_imputed,columns=numeric_columns)","cea6e266":"#apply the impute transform on the dev and the test set\ndev_imputed = imputer.transform(X_dev_num)\ntest_imputed = imputer.transform(test_num)\n\nX_dev_num = pd.DataFrame(data=dev_imputed,columns=numeric_columns)\ntest_num = pd.DataFrame(data=test_imputed,columns=numeric_columns)","db7126ff":"X_train.drop(numeric_columns,axis=1,inplace=True)\nX_dev.drop(numeric_columns,axis=1,inplace=True)\ntest.drop(numeric_columns,axis=1,inplace=True)","7234bca0":"X_train","a80272fb":"#add the imputed columns\nfor feature in numeric_columns:\n    X_train[feature] = X_train_num[feature].values\n    X_dev[feature] = X_dev_num[feature].values\n    test[feature] = test_num[feature].values    ","f0bbdfb9":"X_train.head()","5f399ee8":"X_train.isna().sum().sum()","38d00bef":"X_dev.isna().sum().sum()","1ae518a3":"test.isna().sum().sum()","970b353e":"import string\n#remove the special characters \/ punctuations from the track name\nX_train['Track Name'] = X_train['Track Name'].str.replace('[{}]'.format(string.punctuation),'')","e985686b":"X_dev['Track Name'] = X_dev['Track Name'].str.replace('[{}]'.format(string.punctuation),'')\ntest['Track Name'] = test['Track Name'].str.replace('[{}]'.format(string.punctuation),'')","9a68900e":"#remove all the digits\nX_train['Track Name'] = X_train['Track Name'].str.replace(r'[\\d]*','',regex=True)\nX_dev['Track Name'] = X_dev['Track Name'].str.replace(r'[\\d]*','',regex=True)\ntest['Track Name'] = test['Track Name'].str.replace(r'[\\d]*','',regex=True)","6c39f8b9":"X_train.head()","df04c49c":"from nltk.corpus import stopwords\nstop_words = stopwords.words('english')","282e830d":"from nltk.tokenize import word_tokenize\ndef rem_stopword(text):\n    '''function to remove the stopwords from a text column of a dataframe'''\n    words = ' '.join([word for word in word_tokenize(text) if word not in stop_words])\n    return words","af79fb54":"X_train['Track Name'] = X_train['Track Name'].apply(rem_stopword)","d6707547":"X_dev['Track Name'] = X_dev['Track Name'].apply(rem_stopword)\ntest['Track Name'] = test['Track Name'].apply(rem_stopword)","d5e00169":"X_train.head(3)","e318afd6":"#!pip install --upgrade tensorflow_hub\nimport tensorflow_hub as hub\n#download the model\nembed = hub.load(\"https:\/\/tfhub.dev\/google\/universal-sentence-encoder-large\/5\")","2e34baca":"#generate embeddings\nembeddings = embed(X_train['Track Name'])\n#create list from np arrays\nuse= np.array(embeddings).tolist()\n#add lists as dataframe column\nX_train['Track Name Embeddings'] = use\n#check dataframe\nX_train.head(2)","5923c447":"#generate embeddings\nembeddings = embed(X_dev['Track Name'])\n#create list from np arrays\nuse= np.array(embeddings).tolist()\n#add lists as dataframe column\nX_dev['Track Name Embeddings'] = use\n#check dataframe\nX_dev.head(2)","92db2696":"#generate embeddings\nembeddings = embed(test['Track Name'])\n#create list from np arrays\nuse= np.array(embeddings).tolist()\n#add lists as dataframe column\ntest['Track Name Embeddings'] = use\n#check dataframe\ntest.head(2)","87ef3e24":"!pip install texthero","7a919ec8":"#load texthero\nimport texthero as hero","79a832ad":"X_train['tsneuse'] = hero.tsne(X_train['Track Name Embeddings'])","925862e3":"X_train.head(2)","ce802664":"#create scatter plot of uni. sent. enc.\nhero.scatterplot(X_train, col='tsneuse',title=\"Track Name on 2-Dimension Embedding using Universal Sentence Encoder\",color='Popularity')","16808b25":"#perform dimensionality reduction using t-SNE on the dev and the test set \nX_dev['tsneuse'] = hero.tsne(X_dev['Track Name Embeddings'])\ntest['tsneuse'] = hero.tsne(test['Track Name Embeddings'])","b2bcd7ea":"X_train['tsneuse'].dtype","b26ad371":"X_train.info()","e263b4a3":"X_train['tsneuse'] = X_train['tsneuse'].apply(np.sum)","8b556611":"X_dev['tsneuse'] = X_dev['tsneuse'].apply(np.sum)\ntest['tsneuse'] = test['tsneuse'].apply(np.sum)","0f5ffed8":"X_train.head(3)","0a69fb8e":"#drop the track name and track name embeddings column\nX_train.drop(['Track Name','Track Name Embeddings'],axis=1,inplace=True)\nX_dev.drop(['Track Name','Track Name Embeddings'],axis=1,inplace=True)\ntest.drop(['Track Name','Track Name Embeddings'],axis=1,inplace=True)","64e8f8c2":"X_train.head(1)","bf8a8be1":"from sklearn.preprocessing import PowerTransformer\n#instantiate power transformer object, will use yeo-johnson as the data is both positive as well as negative\npt = PowerTransformer(method='yeo-johnson')","5f9840bf":"#Apply power transformation to make the features more Gaussian like\nX_train = pt.fit_transform(X_train)\nX_dev = pt.transform(X_dev)\ntest = pt.transform(test)","eccdf3ff":"#apply standard scaler\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nX_train = scaler.fit_transform(X_train)\nX_dev = scaler.transform(X_dev)\ntest = scaler.transform(test)","3561bade":"#apply PCA transformation\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=0.95)\n\nX_train = pca.fit_transform(X_train)\nX_dev = pca.transform(X_dev)\ntest = pca.transform(test)","b100bbc2":"#make y_train into numpy arrays\ny_train = y_train.values\ny_dev = y_dev.values","4f4b428d":"#import modeling packages\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier","5713eaf9":"#clf = RandomForestClassifier(random_state=seed,n_estimators=100,max_features=0.5,criterion='entropy',\n                            #warm_start=True)\n#clf = XGBClassifier(random_state=41,n_estimators=200,subsample=0.5,learning_rate=0.005)\n                   \nclf = SVC(random_state=seed,probability=True,kernel='poly',degree=3,decision_function_shape='ovr')\n         \n\n#clf = LogisticRegression(random_state=seed,solver='liblinear',penalty='l1') 0.43721\n\nclf.fit(X_train,y_train)","8ff45d4c":"dev_predictions = clf.predict(X_dev)","8faab8f4":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import classification_report","9539e6a1":"print(accuracy_score(y_dev,dev_predictions))","d5ea576a":"print(confusion_matrix(y_dev,dev_predictions))","637ea5c5":"print(classification_report(y_dev,dev_predictions))","dd0adbac":"y_train_predictions = clf.predict(X_train)\nprint(classification_report(y_train,y_train_predictions))","b799d97c":"print(confusion_matrix(y_train,y_train_predictions))","e22809d8":"print(accuracy_score(y_train,y_train_predictions))","2381c043":"test_predictions = clf.predict_proba(test)","c4d25e4e":"test_predictions","2e5297e5":"<a id='3-3-3'><\/a>\n## _t-SNE Non Linear Dimensionality Reduction using texthero_","1125e2fd":"_The same artist name and same track name could result due to date merging from different apps where the music is listed. It is unlikely that the same artist may have the same track name. One possibility is if the same track is listed again with a different musical background. For example it is very common to spot unplugged version, altered version with higher beats, remix etc. These differences can be noiticed with the other features of the dataset like energy, danceability, valence, loudness and acousticness. A musician would be better positioned to spot the differences_","e30e92ea":"## _Load the Data_","3bf78e66":"<a id='3-3-4'><\/a>\n## _Visualize Embeddings_","da62e6a9":"<a id='2'><\/a>\n## _Basic Exploratory Data Analysis_","4434fef6":"_According to this there are no duplicates. We would test this out more when the dataset is analyzed separately without the class labels. Key question is whether the same music can land up in different genres based on the values of the other features like energy, danceability. Perhaps yes, if it is an unplugged version or a remix version_","0335a611":"- _There is correlation between some of the features. Example loudness, energy and acouticness are highly correlated_\n- _Similarly danceability and valence is also correlated_\n\nUsing a dimensionality reduction technique would help to reduce the features before feeding into the model.","6fedef56":"# _Music Genre Predictive Model_\n\n## _Overview_\nMusic has been an important part of our lives since time immemorial. Every artist has a signature, making music a subjective art. We have scales\/metrics to measure the quality of music. But, is it possible to train a machine learning model to predict the genre and quality of the music?\n\nCurrently, many music aggregator applications rely on machine learning to power their recommendation engine, and curate playlists. MachineHack is challenging data scientists and machine learning practitioners to build a highly scalable ML model for a music aggregator app (Company ABC) to accurately predict the genre of songs in the dataset.\n\nAbout Dataset:\n\nTraining dataset: 17,996 rows with 17 columns \n\nColumn details: artist name; track name; popularity; \u2018danceability\u2019; energy; key; loudness; mode; \u2018speechiness\u2019; \u2018acousticness\u2019; \u2018instrumentalness\u2019; liveness; valence; tempo; duration in milliseconds and time_signature. \n\nTarget Variable: 'Class\u2019 such as Rock, Indie, Alt, Pop, Metal, HipHop, Alt_Music, Blues, Acoustic\/Folk, Instrumental, Country, Bollywood, \n\nTest dataset: 7,713 rows with 16 columns ","281b75b8":"_The duration is either in minutes or in milliseconds and hence the histogram is so highly skewed. It would be better to convert them to a single unit measure in minutes_","919a30bb":"<a id='1'><\/a>\n## _1 - Import Libraries_","5da3e4b0":"<b> _Before proceeding further, lets split the dataset into train and dev set. While we would explore the train set, the dev set would be used to validate the model performance and generalization_ <\/b>","187069fd":"_The number of unique tracks is lesser than the total number of rows in the X_train. There are either duplicate tracks or two artist seem to have a similar track name_","0f64cb5e":"<a id='3-3-1'><\/a>\n### _Clean the Text_","5886cb51":"<a id='2-2'><\/a>\n## _Harmonizing Duration Feature_","e6d7ad6f":"- _There are clear duplicate records in the dataset. Observe the row index 15513 and 9102_\n- _The same track name is repeated for different artists as well.One way to handle such instance would be to combine the artist name and the track name together_","fab644c4":"<a id='3-3'><\/a>\n## _Handle the text field Track Name_\n\n- _Clean the text_ \n- _Apply Universal Sentence Encoder Large to generate the embeddings_","ba286b91":"<a id='3-2'><\/a>\n## _Handling the missing values using Iterative Imputer_","3591786f":"<a id='4'><\/a>\n## _Conclusion_\n-  Vectorizing text data can be done via Word2Vec, Doc2Vec model using gensim libraries, Bag of Words\/Tf-IDF approach as well. In this notebook, the approach using google's universal senetence encoder is demonstrated. Check https:\/\/tfhub.dev\/google\/universal-sentence-encoder-large\/5\n- texthero is a convenient package. Check for more information here https:\/\/texthero.org\/\n\n- This notebook is inspired from the article https:\/\/towardsdatascience.com\/how-to-vectorize-text-in-dataframes-for-nlp-tasks-3-simple-techniques-82925a5600db","b5e9da66":"<a id='2-1'><\/a>\n## _An insight into spotting the Duplicate records_","3a190ae8":"<a id='4'><\/a>\n## _Modeling_","dcd04c16":"<a id='3-3-2'><\/a>\n## _Generate embeddings using tensorflow hub universal sentence encoder_\n","2c1a5d78":"<a id='3'><\/a>\n## _Data Preparation_\n***","ef2ce136":"<a id='3-1'><\/a>\n## _Label Encode the Artist Name_\n_Test dataset contains artist names not in the train dataset and hence the below approach is a workaround. This is not the preferred way to label encode when launching model into production. In real scenario we may not even know what the test data is going to contain. Handling of this scenario is beyond the scope of this notebook_ ","0badc4fb":"## Table of Contents\n\n- [1 - Import Libraries and Load Data](#1)\n- [2 - Basic Exploratory Data Analysis](#2)\n    - [2.1 - An ingisht into Spotting Duplicate Records (Visible only when you split)](#2-1)\n    - [2.2 - Harmonizing the Duration Feature Values](#2-2)\n    \n- [3 - Data Preparation](#3)\n    - [3.1 - Handling Missing Values using Iterative Imputer](#3-1)\n    - [3.2 - Label Encode the Artist Name](#3-2)\n    - [3.3 - Handling Text Data in Track Name](#3-3)\n        - [3.3.1 - Clean the Text Data](#3-3-1)\n        - [3.3.2 - Generate Embeddings using Tensorflow Universal Sentence Encoder](#3-3-2)\n        - [3.3.3 - t-SNE Non Linear Dimensionality Reduction using texthero package](#3-3-3)\n        - [3.3.4 - Visualizing the Embeddings on 2Dimensions](#3-3-4)\n- [ 4 - Conclusion](#4)\n","69856b29":"- _There are 17,996 observations in the dataset_\n- _Features \"key\" and \"intrumentalness\" have missing values_\n- _Artist Name and Track Name are the only string features. Remaining all the features are of numerical type_","64bec25b":"_This is an imbalanced dataset. For model training, it would be appropriate to split based on stratification on the Class label_"}}