{"cell_type":{"78c1aad6":"code","ca97d90a":"code","11d5282a":"code","acc3fdba":"code","978d8816":"code","57ea1f1f":"code","4d9008a0":"code","7d366b7f":"code","fd44a5ff":"code","b5f85380":"code","4869be96":"code","729ca69a":"code","1a0b51bc":"code","db4a9599":"code","5b3ac6e3":"code","9ccd9f61":"code","7a07f8fb":"code","65c4eafe":"code","a40a2d26":"code","9e502c17":"code","3560f0b0":"code","889f0d8d":"code","2a488dc4":"code","17e132ab":"code","65d831fc":"code","5da51921":"code","ef23fee4":"code","c21b62a3":"code","9215df0b":"code","f90952c5":"code","2af48593":"code","860b68a9":"code","2e5aca21":"code","2e2e750f":"code","83fce156":"code","e591922a":"code","f51aec1b":"code","fe7fe858":"code","cd83785a":"code","98d038c3":"code","21830571":"code","1f483b89":"code","74e4f5bb":"code","2cf12fe2":"code","aab25629":"code","e3c35a84":"code","c8720d73":"code","fe6b5e7d":"code","f448726b":"code","97f7d277":"code","d0c458bb":"code","480ff385":"code","15a5b45f":"code","f87da2e6":"markdown","97959f44":"markdown","adb942a5":"markdown","f5fb8617":"markdown","7cd4ae26":"markdown","28c12b92":"markdown","d20f298c":"markdown","afbb8beb":"markdown"},"source":{"78c1aad6":"import numpy as np\nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nimport re\n\nfrom IPython.core.display import display, HTML","ca97d90a":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","11d5282a":"question_df = pd.read_csv('\/kaggle\/input\/kaggle-survey-2019\/questions_only.csv')\nquestions = ''.join([f'<li>{i}<\/li>' for i in question_df.T[0][1:]])\ndisplay(HTML(f'<h3 style=\"color:green\">Question List:<\/h3><ol>{questions}<\/ol>'))","acc3fdba":"multiple_choice_responses_file = '\/kaggle\/input\/kaggle-survey-2019\/multiple_choice_responses.csv'","978d8816":"df = pd.read_csv(multiple_choice_responses_file, skiprows=(1,1))\ndf.head()","57ea1f1f":"df.shape","4d9008a0":"columns_text = [col for col in list(df.columns) if 'TEXT' in col]\nprint(len(columns_text))\nprint(columns_text)","7d366b7f":"columns_multiple = [col for col in list(df.columns) if re.search('Part_\\d{1,2}$', col)]\n# print(len(columns_multiple))\n# print(columns_multiple)","fd44a5ff":"multiple_columns_list = [ [col]+col.split('_') for col in columns_multiple ]\nds_multiple = pd.DataFrame(multiple_columns_list).groupby([1])[0].apply(list)","b5f85380":"question_numbers_list = sorted([int(i.split('Q')[1]) for i in list(ds_multiple.index)])\nquestion_list = [ 'Q{}'.format(i) for i in question_numbers_list]\nquestions = ''.join([f'<li>{i}<\/li>' for i in question_list])\ndisplay(HTML(f'<h3 style=\"color:green\">Multiple Choice Question<\/h3><ol>{questions}<\/ol>'))","4869be96":"columns_simple = [col for col in list(df.columns) if re.search('Q\\d{1,2}$', col)]\n# print(len(columns_simple))\n# print(columns_simple)\nquestions = ''.join([f'<li>{i}<\/li>' for i in columns_simple])\ndisplay(HTML(f'<h3 style=\"color:green\">Simple Question<\/h3><ol>{questions}<\/ol>'))","729ca69a":"df_simple = df[columns_simple]","1a0b51bc":"def countplot_top(data, col, xlabel, ylabel, fs, top, title=''):\n    \n    plt.figure(figsize=(10, 10))\n        \n    ax = sns.countplot(y=col, data=data, order=data[col].value_counts().iloc[:top].index, color='green')\n    plt.title(title, fontsize=fs)\n    plt.xlabel(xlabel, fontsize=fs)\n    plt.ylabel(ylabel, fontsize=fs)\n    plt.grid(axis='x', linestyle='-.')\n\n    sns.despine()\n    \n    for patch, value in zip(ax.patches, data[col].value_counts()):  \n        ax.text(patch.get_width() + 100, patch.get_y() + (patch.get_bbox().y1-patch.get_y())\/2,\n            value,\n            ha=\"left\", va='center',\n            fontsize=18)\n        \n    new_ytickslabel = []\n    for i in ax.get_yticklabels():\n        new_ytickslabel.append( ''.join([l + '\\n' * (n % 50 == 49) for n, l in enumerate(list(i.get_text()))]) ) \\\n                if len(i.get_text())>50 else new_ytickslabel.append(' '*(50-len(i.get_text()))+i.get_text())\n    ax.set_yticklabels(new_ytickslabel)\n    ax.tick_params(axis='both', which='major', labelsize=18)\n","db4a9599":"xlabel='# of Respondents'\nylabel=''\nfntsz=20\ntop=15","5b3ac6e3":"column='Q1'\nprint(question_df[column][0])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","9ccd9f61":"column='Q2'\nprint(question_df[column][0])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","7a07f8fb":"country_dict = {'United States of America':'USA', \n                'United Kingdom of Great Britain and Northern Ireland':'UK'}\ndf_simple['Q3'] = df_simple['Q3'].replace(country_dict)","65c4eafe":"column = 'Q3'\nprint(question_df[column][0])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","a40a2d26":"column = 'Q4'\nprint(question_df[column][0])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","9e502c17":"column = 'Q5'\nprint(question_df[column][0])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","3560f0b0":"column = 'Q6'\nprint(question_df[column][0])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","889f0d8d":"column = 'Q7'\nprint(question_df[column][0])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","2a488dc4":"column = 'Q8'\nprint(question_df[column][0])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","17e132ab":"column = 'Q10'\nprint(question_df[column][0])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","65d831fc":"column = 'Q11'\nprint(question_df[column][0])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","5da51921":"column = 'Q14'\nprint(question_df[column][0])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","ef23fee4":"column = 'Q15'\nprint(question_df[column][0])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","c21b62a3":"column = 'Q19'\nprint(question_df[column][0])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","9215df0b":"column = 'Q22'\nprint(question_df[column][0])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","f90952c5":"column = 'Q23'\nprint(question_df[column][0])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","2af48593":"def get_multiple_question_data(question, ds_multiple, data):\n    columns_list = ds_multiple[question]\n    data = data[columns_list]\n    data_list = [ data[col].value_counts().to_dict() for col in data.columns ]\n    data_dict = { k:v for values in data_list for k, v in values.items() }\n    return pd.DataFrame.from_dict(data_dict, orient='index').sort_values(0, ascending=False)","860b68a9":"def barplot_top(data, xlabel, ylabel, fs, title=''):\n    \n    plt.figure(figsize=(10, 10))\n\n    ax = sns.barplot(data[0], data.index, color='green')\n    plt.title('{}\\n'.format(title), fontsize=22, color='blue')\n    plt.xlabel(xlabel, fontsize=fs)\n    plt.ylabel(ylabel, fontsize=fs)\n    plt.grid(axis='x', linestyle='-.')\n    sns.despine()\n\n    for patch, value in zip(ax.patches, data[0]):\n        ax.text(patch.get_width() + 100, patch.get_y() + (patch.get_bbox().y1-patch.get_y())\/2,\n                value,\n                ha=\"left\", va='center',\n                fontsize=18)\n\n    new_ytickslabel = []\n    for i in ax.get_yticklabels():\n        new_ytickslabel.append( ''.join([l + '\\n' * (n % 50 == 49) for n, l in enumerate(list(i.get_text()))]) ) \\\n                if len(i.get_text())>50 else new_ytickslabel.append(' '*(50-len(i.get_text()))+i.get_text())\n    ax.set_yticklabels(new_ytickslabel)\n    ax.tick_params(axis='both', which='major', labelsize=18)\n","2e5aca21":"xlabel='# of Respondents'\nylabel=''\nfntsz=20","2e2e750f":"# question_numbers_list = sorted([int(i.split('Q')[1]) for i in list(ds_multiple.index)])\n# for question in question_numbers_list:\n#     question = 'Q{}'.format(question)\n#     data=get_multiple_question_data(question, ds_multiple, df)\n#     barplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz, title=question_df.T.loc[question][0])","83fce156":"question = 'Q9'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","e591922a":"question = 'Q12'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","f51aec1b":"question = 'Q13'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","fe7fe858":"question = 'Q16'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","cd83785a":"question = 'Q17'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","98d038c3":"question = 'Q18'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","21830571":"question = 'Q20'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","1f483b89":"question = 'Q21'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","74e4f5bb":"question = 'Q24'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","2cf12fe2":"question = 'Q25'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","aab25629":"question = 'Q26'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","e3c35a84":"question = 'Q27'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","c8720d73":"question = 'Q28'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","fe6b5e7d":"question = 'Q29'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","f448726b":"question = 'Q30'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","97f7d277":"question = 'Q31'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","d0c458bb":"question = 'Q32'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","480ff385":"question = 'Q33'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","15a5b45f":"question = 'Q34'\nprint(question_df.T.loc[question][0][:-42])\ndata=get_multiple_question_data(question, ds_multiple, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","f87da2e6":"# Part1. Respondents Distribution for Simple Questions\u00b6","97959f44":"# Import and Data\u00b6","adb942a5":"Almost all answers are located in `\/kaggle\/input\/kaggle-survey-2019\/multiple_choice_responses.csv`","f5fb8617":"![](http:\/\/)There are 19717 rows and **246** columns. But if all columns are correct?\n\nAfter additional checking, I realized that all columns with pattern `TEXT` in column names contain wrong data for analysis. It is **28** columns.\n\nThere are **15** columns that describe simple questions and **202** columns for multiple choice questions. Lists of columns below.","7cd4ae26":"There are 4 different files with data for this competition.","28c12b92":"Kaggle\u2019s State of Machine Learning and Data Science 2019 survey is **34** different questions that fully describe the area.\n\nI conditionally devided questins in **3 types**: \n- Simple as Q1, Q3, Q4, etc.\n- Sipmle with Selected Choice as Q2, Q5, etc.\n- Multiple Choice (Select all that apply) as Q9, Q12, Q13, etc.\n\nYou can find a full list of questions in `\/kaggle\/input\/kaggle-survey-2019\/questions_only.csv` ","d20f298c":"# Conclusion\nTo be continued...","afbb8beb":"# Part2. Respondents Distribution for Multiple Choice Question\u00b6\n"}}