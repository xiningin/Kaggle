{"cell_type":{"d431f898":"code","b230aaac":"code","4665891e":"code","1e690058":"code","a5c7030c":"code","88bb88ea":"code","b3daddce":"code","9a28e2a0":"code","fde6d428":"code","3d49ced6":"code","3d25a17d":"code","c4011b8d":"code","8b69a396":"code","0a853073":"code","16190115":"code","9fed6e09":"code","57ab5918":"code","a72cacdf":"code","70c1d42d":"code","c0cf2646":"code","988a3fdf":"code","cfe0ac6d":"code","a323cb85":"code","a96584f3":"code","bfa4017a":"code","3881f568":"code","ab323521":"code","6d0266af":"code","101273a7":"code","5b9eb6c0":"code","1487067c":"code","5e3c042b":"code","510d7fb1":"code","046d196d":"code","8ee9ed4f":"code","8241d2ff":"code","5c1bc0d8":"code","ed37b00e":"code","0cea17f3":"code","751d03e3":"code","cb2db36a":"code","fe15d000":"code","8cf5fa32":"code","1b7cd1b9":"code","6ea7446e":"code","0bcc4d54":"code","0a71961e":"code","23ce3f75":"code","42ed6232":"code","d5cef3d6":"markdown","bdbed3da":"markdown","2a0febe1":"markdown","3ff24d2b":"markdown","c8e90f17":"markdown"},"source":{"d431f898":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b230aaac":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","4665891e":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","1e690058":"train.head()","a5c7030c":"train.info()","88bb88ea":"test.info()","b3daddce":"train.describe()","9a28e2a0":"train[\"Name\"] = train[\"Name\"].str.extract(r\"([a-zA-Z]+)\\.\")\ntest[\"Name\"] = test[\"Name\"].str.extract(r\"([a-zA-Z]+)\\.\")","fde6d428":"plt.figure(figsize=(12, 6))\nsns.countplot(train[\"Name\"], hue=train[\"Survived\"])","3d49ced6":"plt.figure(figsize=(12,6))\nsns.stripplot(train[\"Name\"], train[\"Age\"])","3d25a17d":"def arrangename(name):\n    if name == \"Mr\" or name == \"Mrs\" or name == \"Miss\" or name == \"Master\":\n        return name\n    else:\n        return \"Others\"","c4011b8d":"train[\"Name\"] = train[\"Name\"].apply(arrangename)\ntest[\"Name\"] = test[\"Name\"].apply(arrangename)","8b69a396":"train.loc[(train[\"Name\"]==\"Mr\")&(train[\"Age\"].isnull()), \"Age\"] = train.loc[train[\"Name\"]==\"Mr\",\"Age\"].mean()\ntrain.loc[(train[\"Name\"]==\"Mrs\")&(train[\"Age\"].isnull()), \"Age\"] = train.loc[train[\"Name\"]==\"Mrs\",\"Age\"].mean()\ntrain.loc[(train[\"Name\"]==\"Miss\")&(train[\"Age\"].isnull()), \"Age\"] = train.loc[train[\"Name\"]==\"Miss\",\"Age\"].mean()\ntrain.loc[(train[\"Name\"]==\"Master\")&(train[\"Age\"].isnull()), \"Age\"] = train.loc[train[\"Name\"]==\"Master\",\"Age\"].mean()\ntrain.loc[(train[\"Name\"]==\"Others\")&(train[\"Age\"].isnull()), \"Age\"] = train[\"Age\"].mean()\n\ntest.loc[(test[\"Name\"]==\"Mr\")&(test[\"Age\"].isnull()), \"Age\"] = train.loc[train[\"Name\"]==\"Mr\",\"Age\"].mean()\ntest.loc[(test[\"Name\"]==\"Mrs\")&(test[\"Age\"].isnull()), \"Age\"] = train.loc[train[\"Name\"]==\"Mrs\",\"Age\"].mean()\ntest.loc[(test[\"Name\"]==\"Miss\")&(test[\"Age\"].isnull()), \"Age\"] = train.loc[train[\"Name\"]==\"Miss\",\"Age\"].mean()\ntest.loc[(test[\"Name\"]==\"Master\")&(test[\"Age\"].isnull()), \"Age\"] = train.loc[train[\"Name\"]==\"Master\",\"Age\"].mean()\ntest.loc[(test[\"Name\"]==\"Others\")&(test[\"Age\"].isnull()), \"Age\"] = train[\"Age\"].mean()","0a853073":"test[\"Fare\"].fillna(train[\"Fare\"].mean(), inplace=True)","16190115":"train[\"Cabin\"].unique()","9fed6e09":"train[\"Cabin\"] = train[\"Cabin\"].str.extract(r\"([A-Z])\")\ntest[\"Cabin\"] = test[\"Cabin\"].str.extract(r\"([A-Z])\")","57ab5918":"sns.countplot(train[\"Cabin\"], hue=train[\"Survived\"])","a72cacdf":"def cabintoint(cabin):\n    if cabin == \"B\" or cabin == \"C\" or cabin == \"D\" or cabin == \"E\":\n        return 1\n    else:\n        return 0","70c1d42d":"train[\"Cabin\"] = train[\"Cabin\"].apply(cabintoint)\ntest[\"Cabin\"] = test[\"Cabin\"].apply(cabintoint)","c0cf2646":"train[\"Embarked\"].value_counts()","988a3fdf":"train[\"Embarked\"].fillna(\"S\", inplace=True)","cfe0ac6d":"train.drop(\"PassengerId\", axis=1, inplace=True)","a323cb85":"sns.countplot(train[\"Pclass\"], hue=train[\"Survived\"])","a96584f3":"sns.countplot(train[\"Name\"], hue=train[\"Survived\"])","bfa4017a":"tmp = pd.get_dummies(train[\"Name\"])\ntrain.drop(\"Name\", axis=1, inplace=True)\ntrain = pd.concat((train, tmp), axis=1)\ntrain.drop([\"Others\"], axis=1, inplace=True)\n\ntmp = pd.get_dummies(test[\"Name\"])\ntest.drop(\"Name\", axis=1, inplace=True)\ntest = pd.concat((test, tmp), axis=1)\ntest.drop([\"Others\"], axis=1, inplace=True)","3881f568":"sns.countplot(train[\"Sex\"], hue=train[\"Survived\"])","ab323521":"train[\"Sex\"].replace({\"male\": 0, \"female\": 1}, inplace=True)\ntest[\"Sex\"].replace({\"male\": 0, \"female\": 1}, inplace=True)","6d0266af":"sns.countplot(train[\"Age\"].apply(lambda x: int(x\/\/5*5)), hue=train[\"Survived\"])","101273a7":"sns.countplot(train[\"SibSp\"], hue=train[\"Survived\"])","5b9eb6c0":"sns.countplot(train[\"Parch\"], hue=train[\"Survived\"])","1487067c":"train[\"FamSize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntrain[\"IsAlone\"] = train[\"FamSize\"].apply(lambda x: 0 if x==1 else 1)\ntrain.drop([\"SibSp\", \"Parch\"], axis=1, inplace=True)\n\ntest[\"FamSize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1\ntest[\"IsAlone\"] = test[\"FamSize\"].apply(lambda x: 0 if x==1 else 1)\ntest.drop([\"SibSp\", \"Parch\"], axis=1, inplace=True)","5e3c042b":"train.drop(\"Ticket\", axis=1, inplace=True)\ntest.drop(\"Ticket\", axis=1, inplace=True)","510d7fb1":"plt.figure(figsize=(10, 6))\nsns.countplot(train[\"Fare\"].apply(lambda x: int(x\/\/5*5)), hue=train[\"Survived\"])","046d196d":"sns.countplot(train[\"Cabin\"], hue=train[\"Survived\"])","8ee9ed4f":"sns.countplot(train[\"Embarked\"], hue=train[\"Survived\"])","8241d2ff":"train.replace({\"S\": 0, \"C\": 1, \"Q\": 2}, inplace=True)\ntest.replace({\"S\": 0, \"C\": 1, \"Q\": 2}, inplace=True)","5c1bc0d8":"X_train = train.drop(\"Survived\", axis=1)\ncolumns = X_train.columns\ny_train = train[\"Survived\"]\nId = test[\"PassengerId\"]\ntest = test.drop(\"PassengerId\", axis=1)","ed37b00e":"from sklearn.preprocessing import StandardScaler\n\nstd = StandardScaler()\nX_train = std.fit_transform(X_train)\ntest = std.transform(test)","0cea17f3":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import GridSearchCV","751d03e3":"def modeling(params, estimator):\n    '''\n    receive hyper paramaters and a model,\n    execute GridSearchCV using 10 folds and print best hyper paramaters\n    print accuracy about the model using the hyper paramater by testing validation data\n    return accuracy and the model\n    '''\n    \n    grid = GridSearchCV(estimator, params, scoring=\"accuracy\", n_jobs=-1, cv=10)\n    grid.fit(X_train, y_train)\n    \n    print(\"paramater:\", grid.best_params_)\n    print(\"accuracy:\", grid.best_score_)\n    \n    return grid.best_score_, grid.best_estimator_","cb2db36a":"params = {\"n_estimators\": [10, 20, 25, 30],\n         \"max_depth\": [3, 5, 7, 9, None],\n         \"max_features\": [\"auto\", \"sqrt\", \"log2\", None]}\n\nrfc_accuracy, rfc_clf = modeling(params, RandomForestClassifier())\nimportance = pd.DataFrame({\"feature\": columns, \"importance\": rfc_clf.feature_importances_})\nimportance.sort_values(by=\"importance\", ascending=False)","fe15d000":"params = {\"C\": [0.5, 1.0, 1.5],\n         \"gamma\": [0.01, 0.05, 0.1],\n         \"probability\": [True]}\n\nsvc_accuracy, svc_clf = modeling(params, SVC())","8cf5fa32":"params =  {\"C\": [0.1, 1, 10],\n          \"max_iter\": [50, 100, 200]}\n\nlr_accuracy, lr_clf = modeling(params, LogisticRegression())","1b7cd1b9":"params = {\"n_neighbors\": [2, 3, 4, 5, 10, 15],\n         \"leaf_size\": [20, 30, 50]}\n\nknc_accuracy, knc_clf = modeling(params, KNeighborsClassifier())","6ea7446e":"params = {}\n\ngnb_accuracy, gnb_clf = modeling(params, GaussianNB())","0bcc4d54":"params = {\"C\": [0.005, 0.01, 0.5, 1.0]}\n    \nlsvc_accuracy, lsvc_clf = modeling(params, LinearSVC())","0a71961e":"accuracy = pd.DataFrame({\"model\": [\"RandomForestClassifier\", \"SVC\", \"LogisticRegression\", \"KNeighborsClassifier\", \"GaussianNB\", \"LinearSVC\"],\n                        \"accuracy\": [rfc_accuracy, svc_accuracy, lr_accuracy, knc_accuracy, gnb_accuracy, lsvc_accuracy]})\naccuracy.sort_values(by=\"accuracy\", ascending=False)","23ce3f75":"from sklearn.ensemble import VotingClassifier\nfrom sklearn.model_selection import cross_val_score\n\nvt_clf = VotingClassifier(estimators=[(\"svc\", svc_clf), (\"rfc\", rfc_clf), (\"lsvc\", lsvc_clf), (\"lr\", lr_clf), (\"knc\", knc_clf)])\nprint(\"accuracy:\", np.mean(cross_val_score(vt_clf, X_train, y_train, cv=5, n_jobs=-1)))","42ed6232":"rfc_clf.fit(X_train, y_train)\nsubmission_predictions = rfc_clf.predict(test)\nsubmission = pd.DataFrame({\"PassengerId\": Id, \"Survived\": submission_predictions})\nsubmission.to_csv(\"submission.csv\", index=False)","d5cef3d6":"I made this kernel for myself to organize my knowledge, so I don't guarantee the quality of kernel. If you want to see great kernels, I recommend other kernels\uff1a\uff09  For example, [this kernel](https:\/\/www.kaggle.com\/samsonqian\/titanic-guide-with-sklearn-and-eda\/notebook) is very helpful.","bdbed3da":"train models","2a0febe1":"Investigate and arrange all attributes in terms of \"Survived\"","3ff24d2b":"fill missing values","c8e90f17":"arrange data to put them in models"}}