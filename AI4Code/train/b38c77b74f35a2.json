{"cell_type":{"d641e433":"code","f9a12541":"code","6968d034":"code","e0a31f43":"code","d4f922a5":"code","362f8f01":"code","18bf5bb3":"code","7a16e4e3":"code","5c699520":"code","09bab027":"code","a79db724":"code","8b6886e7":"code","e214b646":"code","3e7c5b7a":"code","ebf6e936":"code","3bb5ea20":"code","31f8d153":"code","86cb3ad9":"code","e0213523":"code","c0e0a9d2":"code","2872d453":"code","eb06c3eb":"code","e86caabd":"code","f5ae957e":"code","893c982a":"code","196444bc":"code","190de453":"code","ab00b527":"code","590d10ca":"code","db98515f":"code","94e6c477":"code","33396643":"code","e7645369":"code","46e8f578":"code","506184f3":"code","2b94f26d":"code","ad261564":"code","92d093df":"code","33c97dc5":"code","1a174ee5":"code","4b75ce78":"code","0c64ddd3":"code","1403091f":"code","681777f0":"code","7817e304":"code","ea260e17":"code","95de6485":"code","74273e0b":"code","7ded8de9":"code","7edd9c51":"code","47c61f21":"code","42c9988d":"code","9bdd70c6":"code","78e6145e":"code","79e19492":"markdown","dc3550b5":"markdown","8341cd52":"markdown","ea133406":"markdown","6d3da253":"markdown","5556c788":"markdown","8dd4c5aa":"markdown","843ad8b6":"markdown","ac7c3a8c":"markdown","38d5de3b":"markdown","a2e287cd":"markdown","02867233":"markdown","9ef608f7":"markdown","8e649810":"markdown","44562192":"markdown","0378ef35":"markdown","33c69337":"markdown","e554ee45":"markdown","570ed486":"markdown","838666ba":"markdown","95175f71":"markdown","50ff8337":"markdown","7aa22bb2":"markdown","ec61edf0":"markdown","767566d3":"markdown"},"source":{"d641e433":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","f9a12541":"df_orig = pd.read_csv(\"..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv\")","6968d034":"df_orig.head(5)","e0a31f43":"df_orig.shape","d4f922a5":"df_orig.info()","362f8f01":"df_orig.describe()","18bf5bb3":"missing_values = df_orig.isnull().sum()\ndf_miss = pd.DataFrame(missing_values).rename(columns={0:'count'})\ndf_miss['percent'] = (missing_values \/ len(df_orig)) * 100\ndf_miss.loc[df_miss['count'] > 0]","7a16e4e3":"print(\"Skew of price column:\", df_orig['price'].skew())\nprint(\"Kurtosis of price column:\", df_orig['price'].kurt())","5c699520":"df_test_price = pd.DataFrame(np.log1p(df_orig['price']))\ndf_test_price.describe()","09bab027":"#change the mean to median which will be right way\ncond1=list(df_orig.loc[df_orig['price'] == 0, 'host_id'])\n\ndef fill_na_with_mode(ds, hostid):\n    fill_value = np.int(ds.loc[ds['host_id'] == hostid]['price'].median())\n    condit = ((ds['host_id'] == hostid) & (ds['price'] == 0))\n    ds.loc[condit, 'price'] = fill_value\n\nfor h in cond1:\n    fill_na_with_mode(df_orig, h)","a79db724":"zero_fill_neigh1 = np.int(df_orig.loc[(df_orig['neighbourhood'] == 'Williamsburg') & (df_orig['price'] > 0) & (df_orig['room_type'] == 'Entire home\/apt')]['price'].mean())\nzero_fill_neigh2 = np.int(df_orig.loc[(df_orig['neighbourhood'] == 'Murray Hill') & (df_orig['price'] > 0) & (df_orig['room_type'] == 'Entire home\/apt')]['price'].mean())\n\n#replaced the single zero value of neighbouhood 'williamsburg' with mean of other property\ncond1 = (df_orig['price'] == 0) & (df_orig['neighbourhood'] == 'Williamsburg')\ndf_orig.loc[cond1, 'price'] = zero_fill_neigh1\n\n#replaced the single zero value of neighbouhood 'Murray Hill' with mean of other property\ncond2 = (df_orig['price'] == 0) & (df_orig['neighbourhood'] == 'Murray Hill')\ndf_orig.loc[cond2, 'price'] = zero_fill_neigh2","8b6886e7":"df_orig = df_orig[np.log1p(df_orig['price']) < 8]\ndf_orig = df_orig[np.log1p(df_orig['price']) > 3]","e214b646":"from scipy.stats import norm\n\nplt.figure(figsize=(5,5))\nsns.distplot(df_orig['price'], fit=norm)\nplt.show()","3e7c5b7a":"df_orig.shape","ebf6e936":"df_orig['last_review'] = df_orig['last_review'].fillna(0)\ndf_orig['reviews_per_month'] = df_orig['reviews_per_month'].fillna(0)","3bb5ea20":"fig = plt.figure(figsize=(16,5))\nfig.add_subplot(1,2,1)\np1 = sns.distplot(df_orig['latitude'])\np1.set_title('Latitude of listings')\n\nfig.add_subplot(1,2,2)\np2 = sns.distplot(df_orig['longitude'])\np2.set_title('Longitude of listings')\n\nplt.show()","31f8d153":"fig = plt.figure(figsize=(16,5))\nfig.add_subplot(1,2,1)\np1 = sns.distplot(df_orig['minimum_nights'])\np1.set_title('Minimum nights stay')\n\nfig.add_subplot(1,2,2)\np2 = sns.distplot(df_orig['availability_365'])\np2.set_title('Rooms availability')\n\nplt.show()","86cb3ad9":"df_orig['minimum_nights'] = df_orig['minimum_nights'].apply(lambda x: 7 if x > 7 else x)","e0213523":"non_availability = (len(df_orig[df_orig['availability_365'] == 0])\/len(df_orig))*100\nfull_availability = (len(df_orig[df_orig['availability_365'] == 365])\/len(df_orig))*100\nprint(f'Percent of rooms non availability: {non_availability:.2f}%')\nprint(f'Percent of rooms full availability : {full_availability:.2f}%')","c0e0a9d2":"df_orig['rooms_not_available'] = df_orig['availability_365'].apply(lambda x: 1 if x == 0 else 0)\ndf_orig['rooms_full_available'] = df_orig['availability_365'].apply(lambda x: 1 if x == 365 else 0)\ndf_orig['rooms_high_available'] = df_orig['availability_365'].apply(lambda x: 1 if x < 365 and x > 182 else 0)\ndf_orig['rooms_low_available'] = df_orig['availability_365'].apply(lambda x: 1 if x < 182 and x > 0 else 0)","2872d453":"fig = plt.figure(figsize=(18,5))\nfig.subplots_adjust(wspace=0.2)\nfig.add_subplot(1,3,1)\np1 = sns.distplot(df_orig['number_of_reviews'])\np1.set_title('Number of reviews')\n\nfig.add_subplot(1,3,2)\np2 = sns.distplot(df_orig['reviews_per_month'])\np2.set_title('Reviews per month')\n\nfig.add_subplot(1,3,3)\np3 = sns.distplot(df_orig['calculated_host_listings_count'])\np3.set_title('Total host listings count')\n\nplt.show()","eb06c3eb":"factor = 3\nnum_review_ulimit = df_orig['number_of_reviews'].mean() + df_orig['number_of_reviews'].std() * factor\nreviews_per_month_ulimit = df_orig['reviews_per_month'].mean() + df_orig['reviews_per_month'].std() * factor\ncalculated_host_list_ulimit = df_orig['calculated_host_listings_count'].mean() + df_orig['calculated_host_listings_count'].std() * factor","e86caabd":"df_orig = df_orig[(df_orig['number_of_reviews'] < num_review_ulimit) & (df_orig['number_of_reviews'] >= 0)]\ndf_orig = df_orig[(df_orig['reviews_per_month'] < reviews_per_month_ulimit) & (df_orig['reviews_per_month'] >= 0)]\ndf_orig = df_orig[(df_orig['calculated_host_listings_count'] <= calculated_host_list_ulimit) & (df_orig['calculated_host_listings_count'] >= 0)]","f5ae957e":"from datetime import date\n\ndf_orig['last_review'] = pd.to_datetime(df_orig.last_review, errors='coerce', format=\"%Y-%m-%d\")\ndf_orig['last_review_year'] = df_orig['last_review'].dt.year\ndf_orig['last_review_month'] = df_orig['last_review'].dt.month\ndf_orig['last_review_dayofweek'] = df_orig['last_review'].dt.dayofweek","893c982a":"cond1 = (df_orig['last_review_year'] == 1970)\ndf_orig.loc[cond1,'last_review_dayofweek'] = 0\ndf_orig.loc[cond1,'last_review_month'] = 0\ndf_orig.loc[cond1,'last_review_year'] = 0","196444bc":"ext_corre = df_orig[['price','latitude', 'minimum_nights', 'number_of_reviews', 'reviews_per_month',\n                    'calculated_host_listings_count', 'rooms_not_available', 'rooms_full_available',\n                    'rooms_high_available', 'rooms_low_available', 'last_review_year', 'last_review_month','last_review_dayofweek']]\next_corre = ext_corre.corr()\next_corre","190de453":"plt.figure(figsize = (18, 6))\n# Heatmap of correlations\nsns.heatmap(ext_corre, cmap = plt.cm.RdYlBu_r, vmin = -0.25, annot = True, vmax = 0.6)\nplt.title('Correlation Heatmap')","ab00b527":"fig = plt.figure(figsize=(16,6))\nfig.subplots_adjust(wspace=0.2, hspace=0.2)\nfig.add_subplot(1,2,1)\np1 = sns.countplot(x='room_type', data=df_orig)\np1.set_title('Room Type')\n\nfig.add_subplot(1,2,2)\np2 = sns.countplot(x='neighbourhood_group', data=df_orig, hue='room_type')\np2.set_title('Neighbourhodd Groups')\nplt.show()","590d10ca":"fig = plt.figure(figsize=(16,6))\n\nfig.add_subplot(1,2,1)\np1 = sns.boxplot(x=df_orig['room_type'], y=np.log1p(df_orig['price']))\np1.set_title('Room type vs Price')\np1.set_xlabel('Room Type')\np1.set_ylabel('Price')\n\nfig.add_subplot(1,2,2)\np2 = sns.boxplot(x=df_orig['neighbourhood_group'], y=np.log1p(df_orig['price']))\np2.set_title('Neighbourhood Group vs Price')\np2.set_xlabel('Neighbourhood_group')\np2.set_ylabel('Price')\n\nplt.show()","db98515f":"fig = plt.figure(figsize=(16,6))\nfig.add_subplot(1,2,1)\np1 = sns.scatterplot(x=df_orig['number_of_reviews'], y=np.log1p(df_orig['price']))\np1.set_title('Reviews vs Price')\np1.set_xlabel('Reviews')\np1.set_ylabel('Price')\n\nfig.add_subplot(1,2,2)\np2 = sns.boxplot(y=np.log1p(df_orig['calculated_host_listings_count']))\np2.set_title('Host listings')\np2.set_xlabel('host listing count')\nplt.show()","94e6c477":"total_host_listing = df_orig.groupby('neighbourhood_group')['calculated_host_listings_count'].sum()\ntotal_host_listing = pd.DataFrame(total_host_listing).reset_index()\nfig = plt.figure(figsize=(18,6))\nfig.add_subplot(1,2,1)\np1 = sns.barplot(x=total_host_listing['neighbourhood_group'], y=total_host_listing['calculated_host_listings_count'])\np1.set_title('Neighbourhood_group and host listings count')\n\ntotal_neighbourhood = df_orig.groupby('neighbourhood_group')['neighbourhood'].nunique()\ntotal_neighbourhood = pd.DataFrame(total_neighbourhood).reset_index()\nfig.add_subplot(1,2,2)\np2 = sns.barplot(x=total_neighbourhood['neighbourhood_group'], y=total_neighbourhood['neighbourhood'])\np2.set_title('Neighbourhood_group & total listed neigbourhoods')\np2.set_xlabel('neighbourhood_group')\np2.set_ylabel('total neighbourhood')\nplt.show()","33396643":"df_orig.groupby('neighbourhood')['calculated_host_listings_count'].sum()","e7645369":"def splitListingNeighbour(df, neighbourGroup):\n    #Collecting host listings of neighbourhood group like 'Bronx'\n    total_neighbour_listing = df.groupby(['neighbourhood_group', 'neighbourhood', 'room_type'])['calculated_host_listings_count'].sum()\n    total_neighbour_listing = pd.DataFrame(total_neighbour_listing).reset_index()\n    neigh_listing = total_neighbour_listing.loc[total_neighbour_listing['neighbourhood_group'] == neighbourGroup, ['neighbourhood','room_type','calculated_host_listings_count']]\n\n    #Splitting the output of listings as each type of room\n    neigh_type_df = neigh_listing.pivot_table('calculated_host_listings_count','neighbourhood','room_type')\n    #conv_df.rename({'room_type':'neighbour'})\n    neigh_type_df.reset_index(inplace=True)\n    neigh_type_df = neigh_type_df.fillna(0)\n    neigh_type_df['Entire home\/apt'] = pd.to_numeric(neigh_type_df['Entire home\/apt'])\n    neigh_type_df['Private room'] = pd.to_numeric(neigh_type_df['Private room'])\n    neigh_type_df['Shared room'] = pd.to_numeric(neigh_type_df['Shared room'])\n    return neigh_type_df","46e8f578":"'''''neighbour_list = ['Allerton','Baychester']\nentire_home_apt = [39, 5]\nprivate_room = [77, 7]\n'''\ndef plotNeighbourListing(neigh_listing_room_type_df, neighbour_name):\n    neighbour_list = list(neigh_listing_room_type_df['neighbourhood'])\n    entire_home_apt = []\n    private_room = []\n    shared_room = []\n\n    for i in neighbour_list:\n        x = neigh_listing_room_type_df[neigh_listing_room_type_df['neighbourhood'] == i]\n        entire_home_apt.append(int(x['Entire home\/apt']))\n        private_room.append(int(x['Private room']) + int(x['Entire home\/apt']))\n        shared_room.append(int(x['Shared room']) + int(x['Entire home\/apt']) + int(x['Private room']))\n\n    #colors = iter(sns.color_palette('Set1', n_colors=6, desat=.75))\n    f,ax = plt.subplots(figsize=(9,20))\n    sns.barplot(x=entire_home_apt, y=neighbour_list, color='blue', edgecolor='black', label='Entire home\/apt')\n    sns.barplot(x=private_room, y=neighbour_list, color='red', alpha=0.3, edgecolor='black', label='Private room')\n    sns.barplot(x=shared_room, y=neighbour_list, color='white', alpha=0.2, edgecolor='black', label='Shared room')\n    ax.legend(loc='lower right', frameon=True)\n    ax.set(xlabel='Total type of listings', ylabel='neighbourhood', title='Total listings of neigbourhood group '+ neighbour_name)\n    #sns.despine(left=True, bottom=True)\n    plt.show()","506184f3":"bronx_type_df = splitListingNeighbour(df_orig, 'Bronx')\nplotNeighbourListing(bronx_type_df, 'Bronx')","2b94f26d":"brooklyn_type_df = splitListingNeighbour(df_orig, 'Brooklyn')\nplotNeighbourListing(brooklyn_type_df, 'Brooklyn')","ad261564":"manhattan_type_df = splitListingNeighbour(df_orig, 'Manhattan')\nplotNeighbourListing(manhattan_type_df, 'Manhattan')","92d093df":"queens_type_df = splitListingNeighbour(df_orig, 'Queens')\nplotNeighbourListing(queens_type_df, 'Queens')","33c97dc5":"staten_island_type_df = splitListingNeighbour(df_orig, 'Staten Island')\nplotNeighbourListing(staten_island_type_df, 'Staten Island')","1a174ee5":"def boxplot_neighbourhood_price(df, neighbour_name):\n    plt.figure(figsize=(9,18))\n    p1 = sns.boxplot(x=df['price'], y=df['neighbourhood'])\n    p1.set_title('Neigbourhood of Neigbourhood_group '+ neighbour_name +' vs price')\n    p1.set_xlabel('Price')\n    p1.set_ylabel('Neighbourhood')\n    plt.show()","4b75ce78":"df_bronx_price = df_orig.loc[df_orig['neighbourhood_group'] == 'Bronx', ['neighbourhood', 'price']]\ndf_bronx_price = df_bronx_price.reset_index()\nboxplot_neighbourhood_price(df_bronx_price, 'Bronx')","0c64ddd3":"df_bronx_price = df_orig.loc[df_orig['neighbourhood_group'] == 'Brooklyn', ['neighbourhood', 'price']]\ndf_bronx_price = df_bronx_price.reset_index()\nboxplot_neighbourhood_price(df_bronx_price, 'Brooklyn')","1403091f":"df_bronx_price = df_orig.loc[df_orig['neighbourhood_group'] == 'Manhattan', ['neighbourhood', 'price']]\ndf_bronx_price = df_bronx_price.reset_index()\nboxplot_neighbourhood_price(df_bronx_price, 'Manhattan')","681777f0":"df_bronx_price = df_orig.loc[df_orig['neighbourhood_group'] == 'Queens', ['neighbourhood', 'price']]\ndf_bronx_price = df_bronx_price.reset_index()\nboxplot_neighbourhood_price(df_bronx_price, 'Queens')","7817e304":"df_bronx_price = df_orig.loc[df_orig['neighbourhood_group'] == 'Staten Island', ['neighbourhood', 'price']]\ndf_bronx_price = df_bronx_price.reset_index()\nboxplot_neighbourhood_price(df_bronx_price, 'Staten Island')","ea260e17":"df_orig.columns","95de6485":"df_orig['price'] = np.log1p(df_orig['price'])","74273e0b":"df_x_cols = ['latitude','longitude','minimum_nights', 'number_of_reviews', 'reviews_per_month', 'calculated_host_listings_count', \n             'rooms_not_available', 'rooms_full_available', 'rooms_high_available', 'rooms_low_available', 'last_review_year', \n             'last_review_month','last_review_dayofweek','neighbourhood_group','room_type']\ndf_y_col = ['price'] \n\ndf_x = df_orig[df_x_cols]\ndf_y = df_orig[df_y_col]","7ded8de9":"df_x_after_dummy = pd.get_dummies(df_x,columns=['neighbourhood_group','room_type'])\ndf_x_after_dummy = pd.get_dummies(df_x_after_dummy,drop_first=True)","7edd9c51":"df_x_final = (df_x_after_dummy - df_x_after_dummy.mean()) \/ df_x_after_dummy.std()","47c61f21":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\nlm = LinearRegression()\nX_train, X_test, y_train, y_test = train_test_split(df_x_final, df_y, test_size=0.22, random_state=42)\nreg = lm.fit(X_train, y_train)","42c9988d":"y_predict = reg.predict(X_test)\ny_predict","9bdd70c6":"from sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\n\nmae = mean_absolute_error(y_test, y_predict)\nmse = mean_squared_error(y_test, y_predict)\nr2 = r2_score(y_test, y_predict)\n\nprint('Mean absolute error: ', mae)\nprint('Mean squared error:', mse)\nprint('r2 score:', r2)","78e6145e":"reg.score(X_test,y_test)","79e19492":"Replaced the zero values in price column, with median of the other properties of same \"host_id\"","dc3550b5":"* Minimum nights is more skewed left.\n* The availablity days also not distiributed well","8341cd52":"Thanks for reading.\nI'm a beginner, please provide your valuable suggestions\/comments\/improvements about the methods to improve better. ","ea133406":"* Normalizing all the columns to maintain a equal range.","6d3da253":"* Reduced the outlier by choosing the data in between the upper limit & lower limit","5556c788":"1. Seperated the both x & y columns","8dd4c5aa":"* Almost 35% of rooms are not available during this data collection, so it will affect the price\n* So let us fill categorical values as non_availability, full_availability, high_availability & low_availability.","843ad8b6":"1. About 100 outlier rows are removed","ac7c3a8c":"* converted the categorical features to numeric using pandas get_dummies\n* dropped neighbourhood column, because it was reducing the prediction score.","38d5de3b":"* All the columns number of reviews, reviews per month & total host lisitings are not distributed well","a2e287cd":"* Created year, month & day of week columns from last_review date variable ","02867233":"* Created 4 new columns based on rooms availability_365","9ef608f7":"1. Replaced the NaN values in last review & reviews per month with zero, because the number of reviews is also zero for these rows. So the reivew may not be written hence replaced with zero. ","8e649810":"* Calculated the upper limit of the 3 columns to remove outliers beyond the upper limit.\n* The lower limit will be 0","44562192":"1. More outliers in neigbourhood price values ","0378ef35":"* As found earlier let us fix a week (7 days) as the maximum value for this column.","33c69337":"* To reduce the skewness excluded values which are extreme outliers.","e554ee45":"* Removed the default year 1970 inserted for 0 in the last_review date column.","570ed486":"1. Price having minimum value as zero, maximum is higher seems to have more outliers\n2. minimum_nights amount have much difference between min & max values also have outlier. But the 75% of values is upto 5 days so this seems to be an acceptable condition.","838666ba":"1. last_review & review_per_month columns have equal number of missing values","95175f71":"* last_review_year and last_review_month have correlation\n* number_of_reviews and reviews_per_month have correlation of 61%, we can use any one variable.\n* rooms_not_available and reviews_per_month have negative correlation, which means if room was not available more then reviews will be low.","50ff8337":"The target variable is skewed left, this will affect the prediction.","7aa22bb2":"* Latitude is normally distributed than longitude","ec61edf0":"* After taking log the target variable is better distributed","767566d3":"1. Price column have zero value to be avoided\n2. Need to avoid the most outliers to get better result"}}