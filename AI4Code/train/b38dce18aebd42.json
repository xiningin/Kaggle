{"cell_type":{"a577120c":"code","f65998dd":"code","c020b643":"code","a447962c":"code","cd5b2f87":"code","2c7c5a58":"code","4baa0325":"code","c6203d7c":"code","b1e9efbe":"code","401fd4e5":"code","d349296c":"code","43bd01fc":"code","418691a5":"code","8867567b":"code","533857c6":"code","6a1f944f":"code","c87bb851":"code","2e52bcaa":"code","5b311c22":"code","85af8fb8":"code","8c79cbb4":"code","4066a109":"code","8d97b8c0":"code","caabb37d":"code","e1d0be2f":"code","5eba7e0b":"code","ec2c8491":"markdown","3127bbb2":"markdown","30752945":"markdown","adc6c663":"markdown","ca10820a":"markdown","582a154b":"markdown","a902e26e":"markdown","062afc3b":"markdown","23e5f2d5":"markdown","b49f1eb7":"markdown","c1e8ef50":"markdown","7f5a2812":"markdown"},"source":{"a577120c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport cufflinks as cf\ninit_notebook_mode(connected=True)\ncf.go_offline()\nfrom sklearn.tree import DecisionTreeClassifier\nfrom IPython.display import Image  \nfrom sklearn.externals.six import StringIO  \nfrom sklearn.tree import export_graphviz\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f65998dd":"df = pd.read_excel('\/kaggle\/input\/covid19\/dataset.xlsx')\ndf.head(5)","c020b643":"df_cleaned = pd.concat([df['SARS-Cov-2 exam result'], df['Patient age quantile'], df['Eosinophils'],\n                       df['Leukocytes'], df['Lymphocytes']],\n                      axis = 1)","a447962c":"df_cleaned.head(5)","cd5b2f87":"df_cleaned['SARS-Cov-2 exam result'] = df_cleaned['SARS-Cov-2 exam result'].map(lambda r: 1 if r == 'positive' else 0 )","2c7c5a58":"def clean_nan(col, datafr):\n    i = 0\n    while i < len(col):\n        if pd.isnull(col[i]):\n            datafr.drop(i, axis = 0, inplace = True)\n        i+=1\nclean_nan(df_cleaned['Eosinophils'], df_cleaned)","4baa0325":"df_cleaned.head(10)","c6203d7c":"sns.set_style('darkgrid')","b1e9efbe":"sns.countplot(x ='Patient age quantile',data=df_cleaned,hue='SARS-Cov-2 exam result' )","401fd4e5":"sns.countplot(x ='Patient age quantile',data=df_cleaned[df_cleaned['Patient age quantile'] == 0],hue='SARS-Cov-2 exam result' )","d349296c":"#Here we see that the 0 age quantile doesn't have any covid-positive case, so we'll drop it\nnull_covid = df_cleaned[df_cleaned['Patient age quantile'] == 0]\nfor i in null_covid.index:\n    df_cleaned.drop(i, axis = 0, inplace = True)","43bd01fc":"sns.countplot(x ='Patient age quantile',data=df_cleaned,hue='SARS-Cov-2 exam result' )","418691a5":"##Seting a threshold for accuracy\n\nn_covid = len(df_cleaned[df_cleaned['SARS-Cov-2 exam result'] == 0].index)\ny_covid = len(df_cleaned[df_cleaned['SARS-Cov-2 exam result'] == 1].index)\nprint('Min Accuracy for 0: ', n_covid\/(n_covid + y_covid))\nprint('Min Accuracy for 1: ', y_covid\/(n_covid + y_covid)) ","8867567b":"sns.pairplot(df_cleaned, hue = 'SARS-Cov-2 exam result')","533857c6":"sns.heatmap(df_cleaned.drop('SARS-Cov-2 exam result', axis = 1).corr(),annot=True)\n\n#We'll only see the \"intra-feature\" correlation in this graph","6a1f944f":"#It seems that the features(above) and the features and the target(below) are weakly pair-correlated\nsns.heatmap(df_cleaned.corr(),annot=True)","c87bb851":"#Splitting the train\/test sets\nX_train, X_test, y_train, y_test = train_test_split(df_cleaned.drop(['SARS-Cov-2 exam result','Lymphocytes'], axis = 1),\n                                                    df_cleaned['SARS-Cov-2 exam result'],\n                                                    test_size=0.30, random_state = 42)","2e52bcaa":"#Choosing a good k value\nerror_rate = []\nfor i in range(1,30):\n    knn_model = KNeighborsClassifier(n_neighbors = i)\n    knn_model.fit(X_train, y_train)\n    predictions = knn_model.predict(X_test)\n    error_rate.append(np.mean(predictions != y_test))\nnewdf = pd.DataFrame(error_rate, columns = ['Error Rate'])\nnewdf['IDX'] = range(1,30)","5b311c22":"newdf.plot.line(x = 'IDX', y = 'Error Rate', figsize = (12,6))\n#From the plot above, we can see that K = 5 is the minimum K that minimizes the error rate, dropping it to 0.11","85af8fb8":"#Final KNN model\n\nknn_model = KNeighborsClassifier(n_neighbors = 5)\nknn_model.fit(X_train, y_train)","8c79cbb4":"predictions = knn_model.predict(X_test)\nprint('WITH K = 5')\nprint('\\n')\nprint(confusion_matrix(predictions, y_test))\nprint('\\n')\nprint(classification_report(predictions,y_test))\n\n# By  the data below, we can see that this isn't a good model from the 'minimize the False-Negatives' perspective.\n# Out of 173 patients, we predicted 4 False-Negative and 15 False-Positives","4066a109":"df_cleaned[df_cleaned['SARS-Cov-2 exam result']==1]['Eosinophils'].sort_values()","8d97b8c0":"df_cleaned[df_cleaned['SARS-Cov-2 exam result']==1]['Leukocytes'].sort_values()","caabb37d":"#The number of patients with a 'Leukocytes' level greater than 1.0 is 66. We could classify all this patients as \n#covid-negative, with a 1,5% porcentage of false-negatives\nlen(df_cleaned[df_cleaned['Leukocytes'] > 1.0])","e1d0be2f":"#The number of patients with a 'Leukocytes' level greater than 1.0 is 71. We could classify all this patients as \n#covid-negative, with a 1,4% porcentage of false-negatives\nlen(df_cleaned[df_cleaned['Eosinophils'] > 1.0])","5eba7e0b":"#Finally, let's count how many patients had both levels greater than 1.0\n(df_cleaned[df_cleaned['Leukocytes'] > 1.0]['Eosinophils'] > 1.0).sort_values()","ec2c8491":"For this intersection hypothesis, as we can see above, we've only reached 4 patients, however with zero rate of false negatives","3127bbb2":"## Strategy ##\n\nFirst we'll use seaborn to get some visualization, for each age quantile, of the level of leukocytes, lymphocytes and eosinophils, hued by positive\/negative results in the Sars-Cov-2 test.\n\nIf the different age quantiles have similar blood information\/covid information correlation, we'll use an unique Decision Tree model, without separating by age.\n\nIf some quantiles present similar behaviour in the above aspect, we'll make more than one model, one for each group of similar quantiles.\n\nThe Decision Tree model, although not so good in the performance, is a very visual, intuitive model, which is good for the purpose of this work: be used by non-specialists in Data Science.","30752945":"*By the plots above, we can have some intuition about what's going on*:\n\n#1 Covid positive patients *never* reachs a high-medium level of eosinophils\n#2 Except for a (it seems) outlier, the same conclusion applies to the Leukocytes level\n#3 The Lymphocytes level looks pretty similar for the covid-negative and covid-positive patients. We'll drop it, since it doesn't give useful information to differentiate a covid-positive from a covid-negative patients","adc6c663":"## Is this conclusion useful? ##\n\nOne could ask: if the levels (of Eosinophils and Leukocytes) of ALL PATIENTS are generally below 1.0, this model isn't useful.\nLet's count how many patients had a level greater than 1.0","ca10820a":"## Exploratory Data Analysis ##","582a154b":"## Motivation ##\n\nAfter researching similar articles about the clinical characteristics of covid-positive and covid-negative pneumonia patients, I found that:\n\n*First study*:\n\n105 patients, almost 50\/50 positive\/negative patients with a similar age and a similar division by gender. \n\nEusinopenia (low number of eusinophils) were present in 78.8% of positive-patients and in only 35.8% of negative-patients.\nBoth patients, however, had shown fever and respiratory symptons.\n\nhttps:\/\/www.medrxiv.org\/content\/10.1101\/2020.02.13.20022830v1.full.pdf+html\n\n*Second study*:\n\n140 covid-positive patients study shows 75.4% had lymphopenia and 52.9% eusinopenia with a similar division by gender but with different ages:\n\nhttps:\/\/onlinelibrary.wiley.com\/doi\/full\/10.1111\/all.14238\n\n*Third Study*:\n\nAnd this other study with 291 covid-positive patients shows that  Leukopenia, lymphopenia and eosinopenia occurred in 36.1%, 22.7% and 50.2% patients respectively. The division by gender is almost 50\/50, but here, there are people with different ages.\n\nhttps:\/\/www.medrxiv.org\/content\/10.1101\/2020.03.03.20030353v1\n\n*Fourth Study*:\n\nThis notebook only took the hemogram data and had a good performance, with a very low number of FP and FN.\n\nhttps:\/\/www.kaggle.com\/guidorzi93\/modelagem-utilizando-dados-de-hemograma","a902e26e":"From a previous study (https:\/\/www.kaggle.com\/carlosasdesouza\/40-nan-classes-in-features) we know that our 3 blood variables belong to Category 4, with 5042 Nan values out of 5643 entries. So we'll use only the non-Nan data, i.e: 601 patients.","062afc3b":"## Setting lower bounds\/Conclusion ##\n\n* Pick a random patient out of a population of 601. If he or she has a level of Eosinophils greater than 1.0 (in this standardized scale) and a Leukocytes level greater than 1.0, what is the probability of this patient being covid-19 positive?*\n\nAnswer: zero. The only covid-positive patient with a Eosinophils level greater than 1.0 is patient 3779. On the other side, the only covid-positive patient with a Leukocytes level greater than 1.0 is patient 5169.\n\n* Pick a random patient out of a population of 601. If he or she has a level of Eosinophils greater than 1.0 (in this standardized scale) or a Leukocytes level greater than 1.0, what is the probability of this patient being covid-19 positive?*\n\nAnswer: 2\/601 ~= 0,3%","23e5f2d5":"## Threshold for Eosinophils and Leukocytes ##\n\nAlthough the model above can be used to a quick classification of patients, it stills give a large number of False positives.\nA more safe clinical approach could be setting lower bounds for the Eosinophils and Leukocytes level - and patients with values above this level would have almost 100% of probability of being covid-negatives (we'll determine this probability below *for this subset*). We don't know yet how representative this set is compared to the whole population, making a professional statistical inference impossible with this data.","b49f1eb7":"## Preliminary note ##\n\nFor some functions and reasoning of this notebook, I had consulted the following notebooks, already available at the Kernel:\n\nhttps:\/\/www.kaggle.com\/brandao\/setting-a-limit-for-false-negatives-covid19\n\nhttps:\/\/www.kaggle.com\/ossamum\/exploratory-data-analysis-and-feature-importance\n\nhttps:\/\/www.kaggle.com\/nazeboan\/null-values-exploration-logreg-67-acc\n\nhttps:\/\/www.kaggle.com\/endelgs\/98-accuracy-at-covid-19\n\nhttps:\/\/www.kaggle.com\/rodrigofragoso\/exploring-nans-and-the-impact-of-unbalanced-data\n\nhttps:\/\/www.kaggle.com\/eduardosmorgan\/quick-data-exploration-and-svm-cv\n\nhttps:\/\/www.kaggle.com\/andrewmvd\/lightgbm-baseline\n\nhttps:\/\/www.kaggle.com\/dmvieira\/overfitting-ward-semi-intensive-or-intensive-unit\n\nhttps:\/\/www.kaggle.com\/dmvieira\/94-precision-on-covid-19\n\nhttps:\/\/www.kaggle.com\/rspadim\/eda-first-try-python-lgb-shap","c1e8ef50":"## Training a KNN Model ##\n\nI've made this decision because of the eosinophilis\/leukocytes characteristic of concentrating the positive cases in one region","7f5a2812":"## Reading and Cleaning the data ##"}}