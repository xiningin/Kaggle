{"cell_type":{"5895028a":"code","88b793b6":"code","ca245d7a":"code","34be5856":"code","53a03dd3":"code","3a847cce":"code","c3335a8f":"code","a79a4999":"code","2b10ecba":"code","b88b4d15":"code","22cc31a2":"code","0e8f8983":"code","de1372aa":"code","189d5af0":"code","96f8b0b7":"code","46f2298d":"code","c9ce6543":"code","f5506223":"code","1932c3c2":"code","e43cc6b7":"code","1f690689":"code","d609a49c":"code","0f16f132":"code","a3ab44a5":"code","eb511e29":"code","8e7c3cea":"code","3edd102b":"code","5cd83b6b":"markdown","bc466800":"markdown","a8ab7d27":"markdown","41baa5a4":"markdown","141a941b":"markdown","73d71daa":"markdown","b62929c5":"markdown","91337222":"markdown","f0bc8745":"markdown","d4ed9bdc":"markdown","c305a7f1":"markdown","527dc4a2":"markdown","cd647bb2":"markdown","8b369497":"markdown","967bb440":"markdown","6c842683":"markdown","206fd5cf":"markdown","347275b1":"markdown","68928f1c":"markdown","72be76b2":"markdown","c49400f4":"markdown","0191f8a2":"markdown","123f0c78":"markdown","0f12a5a8":"markdown"},"source":{"5895028a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport plotly.express as px\nfrom IPython.display import display\npd.options.display.max_columns = None\nimport random\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt","88b793b6":"train = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\ntrain['dataset'] = 'train'\ntest = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\ntest['dataset'] = 'test'\ndf = pd.concat([train, test])","ca245d7a":"train.head()","34be5856":"test.head()","53a03dd3":"print('Shape of Training set :{} and Shape of Test set : {}'.format(train.shape,test.shape))","3a847cce":"df.info()","c3335a8f":"sns.set(rc={'figure.figsize':(11.7,8.27)})\nds = df.groupby(['cp_type', 'dataset'])['sig_id'].count().reset_index()\nds.columns = ['cp_type', 'dataset', 'count']\nsns.barplot(x='cp_type',\n            hue='dataset',\n            y='count',\n            data=ds).set_title('Train\/Test Count : Cp_type')","a79a4999":"ds = df.groupby(['cp_time', 'dataset'])['sig_id'].count().reset_index()\nds.columns = ['cp_time', 'dataset', 'count']\nsns.barplot(x='cp_time',\n            hue='dataset',\n            y='count',\n            data=ds).set_title('Train\/Test Count : Cp_time')","2b10ecba":"ds = df.groupby(['cp_dose', 'dataset'])['sig_id'].count().reset_index()\nds.columns = ['cp_dose', 'dataset', 'count']\nsns.barplot(x='cp_dose',\n            hue='dataset',\n            y='count',\n            data=ds).set_title('Train\/Test Count : Cp_dose')","b88b4d15":"train_columns = train.columns.to_list()\ng_list = [i for i in train_columns if i.startswith('g-')]\nc_list = [i for i in train_columns if i.startswith('c-')]","22cc31a2":"import ipywidgets as widgets\nfrom scipy import stats\nfrom ipywidgets import interact, interact_manual\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.set(color_codes=True)\n@interact\ndef distribution_colum(column = g_list):\n    sns.distplot(train[column],kde=True)","0e8f8983":"import ipywidgets as widgets\nfrom scipy import stats\nfrom ipywidgets import interact, interact_manual\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.set(color_codes=True)\n@interact\ndef distribution_colum(column = c_list):\n    sns.distplot(train[column],kde=True)","de1372aa":"sns.set(rc={'figure.figsize':(19.7,15.27)})\ncolumns = g_list + c_list\nfor_correlation = [columns[random.randint(0, len(columns)-1)] for i in range(40)]\ndata = train[for_correlation]\nsns.heatmap(data.corr())","189d5af0":"import itertools\ncols = ['cp_time'] + columns\ncorr_matrix = train[cols].corr().abs()\nhigh_corr_var=np.where(corr_matrix>0.9)\nhigh_corr_var=[(corr_matrix.columns[x],corr_matrix.columns[y]) for x,y in zip(*high_corr_var) if x!=y and x<y]","96f8b0b7":"sns.heatmap(train[list(set(itertools.chain(*high_corr_var)))].corr())","46f2298d":"sns.set(rc={'figure.figsize':(10.7,8.27)})\n@interact\ndef distribution_colum(column = list(set(itertools.chain(*high_corr_var)))):\n    sns.distplot(train[column],kde=True)","c9ce6543":"train_target = pd.read_csv(\"..\/input\/lish-moa\/train_targets_scored.csv\")\n\nprint('Number of rows : ', train_target.shape[0])\nprint('Number of cols : ', train_target.shape[1])\ntrain_target.head()","f5506223":"x = train_target.drop(['sig_id'], axis=1).sum(axis=0).sort_values().reset_index()\nx.columns = ['column', 'nonzero_records']\n@interact \ndef selct_number_of_columns(top_n = [10,50,100,150,200]):\n    sns.barplot(x='nonzero_records',y='column',data=x.tail(top_n),orient='h')","1932c3c2":"sns.set(rc={'figure.figsize':(15.7,19.27)})\nx = train_target.drop(['sig_id'], axis=1).sum(axis=0).sort_values(ascending=False).reset_index()\nx.columns = ['column', 'count']\nx['count'] = x['count'] * 100 \/ len(train_target)\n\nsns.barplot(x='count',y='column',data=x.head(50)).set_title('Percent of positive records for every column in target')","e43cc6b7":"data = train_target.drop(['sig_id'], axis=1).astype(bool).sum(axis=1).reset_index()\ndata.columns = ['row', 'count']\ndata = data.groupby(['count'])['row'].count().reset_index()\n\nfig = px.bar(\n    data, \n    y=data['row'], \n    x=\"count\", \n    title='Number of activations in targets for every sample', \n    width=800, \n    height=500\n)\nfig.show()","1f690689":"data = train_target.drop(['sig_id'], axis=1).astype(bool).sum(axis=1).reset_index()\ndata.columns = ['row', 'count']\ndata = data.groupby(['count'])['row'].count().reset_index()\nfig = px.pie(\n    data, \n    values=100 * data['row']\/len(train_target), \n    names=\"count\", \n    title='Number of activations in targets for every sample (Percent)', \n    width=800, \n    height=500\n)\nfig.show()","d609a49c":"train_target.describe()","0f16f132":"import time\nstart = time.time()\n\ncorrelation_matrix = pd.DataFrame()\nfor t_col in train_target.columns:\n    corr_list = list()\n    if t_col == 'sig_id':\n        continue\n    for col in columns:\n        res = train[col].corr(train_target[t_col])\n        corr_list.append(res)\n    correlation_matrix[t_col] = corr_list\n    \nprint(time.time()-start)","a3ab44a5":"correlation_matrix['train_features'] = columns\ncorrelation_matrix = correlation_matrix.set_index('train_features')\ncorrelation_matrix","eb511e29":"maxCol=lambda x: max(x.min(), x.max(), key=abs)\nhigh_scores = correlation_matrix.apply(maxCol, axis=0).reset_index()\nhigh_scores.columns = ['column', 'best_correlation']\n\nfig = px.bar(\n    high_scores, \n    x='column', \n    y=\"best_correlation\", \n    orientation='v', \n    title='Best correlation with train columns for every target column', \n    width=1200,\n    height=800\n)\nfig.show()","8e7c3cea":"col_df = pd.DataFrame()\ntr_cols = list()\ntar_cols = list()\nfor col in correlation_matrix.columns:\n    tar_cols.append(col)\n    tr_cols.append(correlation_matrix[col].abs().sort_values(ascending=False).reset_index()['train_features'].head(1).values[0])\n\ncol_df['column'] = tar_cols\ncol_df['train_best_column'] = tr_cols\n\ntotal_scores = pd.merge(high_scores, col_df)\ntotal_scores","3edd102b":"count_features = total_scores['train_best_column'].value_counts().reset_index().sort_values('train_best_column')\ncount_features.columns = ['column', 'count']\nfig = px.bar(\n    count_features.tail(33), \n    x='count', \n    y=\"column\", \n    orientation='h', \n    title='Columns from training set with number of high correlations with target columns', \n    width=800,\n    height=700\n)\nfig.show()","5cd83b6b":"## We can see that at least 50 target columns have number pf positive samples less than 20 (about 0.1%) !!!","bc466800":"### Time to find pairs of features with high correlation","a8ab7d27":"## We can see here that about 40% of sample have zeros in all columns and more than 50% have only one active target column.","41baa5a4":"### In total we have 35 columns that have correlation with at least another 1 higher than 0.9. Let's visualize them.","141a941b":"<a id=\"2\"><\/a>\n<h2 style='background:#0088c2; border:0; color:white'><center>2. Categorical Variable Visualization<\/center><h2>","73d71daa":"<h1><center>Data Analysis and Interactive Visualization : MoA<\/center><\/h1>\n\n<center><img src=\"https:\/\/img.etimg.com\/thumb\/width-640,height-480,imgsize-523232,resizemode-1,msid-71344481\/industry\/healthcare\/biotech\/pharmaceuticals\/dop-lists-options-to-rationalise-drug-trade-margins-for-niti-aayog\/1.jpg\"><\/center>\n","b62929c5":"### Take a look into training and test sets.","91337222":"## Time to find the most correlated features for every target column","f0bc8745":"## The biggest number of positive samples for 1 target column is 3.5%. So we deal here with highly imbalanced data.","d4ed9bdc":"## 2.3 Cp_dose feature","c305a7f1":"## Now let's see what columns from training set have the higher number of \"high\" correlations with target columns. Every row from chart means that column `A` `N` times has the best value of correlation with different target columns. ","527dc4a2":"### Correaltion between Top-40 Variable","cd647bb2":"<a id=\"4\"><\/a>\n<h2 style='background:blue; border:0; color:white'><center>4. Target Variable analysis<\/center><h2>","8b369497":"## 2.2 Cp_time feature","967bb440":"### Some distribution of randomly selected columns","6c842683":"## And we have large correlation matrix","206fd5cf":"<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h2 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:#0088c2; border:0; color:white' role=\"tab\" aria-controls=\"home\"><center>Quick navigation<\/center><\/h2>\n\n* [1. Basic Data Overview](#1)\n* [2. Categorical Variable Visualization](#2)\n* [3. Correlation](#3)\n* [4. Target Variable Analysis](#4)","347275b1":"### Visualization for HIghly Correalted Variables","68928f1c":"### Let's visualize them","72be76b2":"<a id=\"3\"><\/a>\n<h2 style='background:blue; border:0; color:white'><center>3.Correlation<\/center><h2>","c49400f4":"### We can see that we have 872 float features 1 integer (cp_time) and 3 categorical (sig_id, cp_type and cp_dose)","0191f8a2":"<a id=\"1\"><\/a>\n<h2 style='background:#0088c2; border:0; color:white'><center>1. Basic Data Overview<\/center><h2>","123f0c78":"## 2.1 cp_type feature","0f12a5a8":"## Let's see what is the higher value (absolute) of correlation for target columns with every column from train set. Every column on chart is max correlation of current target column with all of columns from training set."}}