{"cell_type":{"41d6937c":"code","bb97b4a2":"code","be511ff5":"code","a56b807c":"code","cfe9cb48":"code","074d1d42":"code","23080eeb":"code","640fa0f0":"code","6f667a0b":"code","7f1846e1":"code","3e4c3295":"code","21088a8e":"code","faeabe78":"code","92f54e2a":"code","937a91ff":"code","46e76566":"code","396e49a1":"code","3602a10a":"code","e35679c0":"code","5a8e19bf":"code","d943d7ab":"code","b3487400":"code","6d7ef5ae":"code","67dd49e3":"code","890ebd76":"code","63ef5abb":"code","e3ad2c02":"code","fd6a9181":"markdown","2f5dbaa2":"markdown","f52074db":"markdown","80781705":"markdown","d7c437e2":"markdown","40c8a091":"markdown"},"source":{"41d6937c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","bb97b4a2":"# load data\ndiabetes_data = pd.read_csv('..\/input\/diabetes-classification\/train.csv')\ndiabetes_data.head()","be511ff5":"diabetes_data.info(verbose=True)","a56b807c":"diabetes_data.describe()","cfe9cb48":"diabetes_data.shape","074d1d42":"# Data visualization for number of people with diabetes and no diabetes\nprint(diabetes_data.diabetes.value_counts())\np = diabetes_data.diabetes.value_counts().plot(kind='bar')","23080eeb":"diabetes_data = diabetes_data.drop('p_id',axis=1)\ndiabetes_data","640fa0f0":"# draw pairplot for \u2018diabetes\u2019 and other indicators\nsns.pairplot(diabetes_data,hue=\"diabetes\")\nplt.show()","6f667a0b":"colume = ['glucose_concentration','blood_pressure','skin_fold_thickness','serum_insulin']\ndiabetes_data[colume] = diabetes_data[colume].replace(0,np.nan)","7f1846e1":"# use missingno function to find 'NaN'\nimport missingno as msno\nmsno.bar(diabetes_data)\nplt.show()","3e4c3295":"thresh_count = diabetes_data.shape[0]*0.8\ndiabetes_data = diabetes_data.dropna(thresh=thresh_count,axis=1)\nmsno.bar(diabetes_data)\nplt.show()","21088a8e":"from sklearn.impute import SimpleImputer\nimr = SimpleImputer()\ncolume_2 = ['glucose_concentration','blood_pressure']\ndiabetes_data[colume_2] = imr.fit_transform(diabetes_data[colume_2])","faeabe78":"msno.bar(diabetes_data)\nplt.show()","92f54e2a":"# check data coefficient\nplt.figure(figsize=(10,10))\nsns.heatmap(diabetes_data.corr(),annot=True)\nplt.show()","937a91ff":"x = diabetes_data.drop('diabetes',axis=1)\ny = diabetes_data['diabetes']","46e76566":"from sklearn.metrics import accuracy_score\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,BaggingClassifier\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3,stratify=y)","396e49a1":"classifiers = [\n    KNeighborsClassifier(3),\n    LogisticRegression(),\n    MLPClassifier(hidden_layer_sizes=(20,20),max_iter=100),\n    RandomForestClassifier(max_depth=5,min_samples_split=3),\n    AdaBoostClassifier(),\n    BaggingClassifier(),\n    ]\n\nlog = []\nfor clf in classifiers:\n    clf.fit(x_train,y_train)\n    name = clf.__class__.__name__\n    print('='*30)\n    print(name)\n    print('****Result****')\n    predictions = clf.predict(x_test)\n    acc = accuracy_score(y_test,predictions)\n    print('Accuracy:{:.4%}'.format(acc))\n    log.append([name,acc*100])\n\nprint('='*30)","3602a10a":"log = pd.DataFrame(log)\nlog.rename(columns = {0:'Classifier',1:'Accuracy'},inplace=True)\nlog","e35679c0":"sns.barplot(x='Accuracy', y='Classifier',data=log,color='g')\nplt.xlabel('Accruacy %')\nplt.title('Classifier Accuracy')\nplt.show()\nprint('The best model is :',log.max())","5a8e19bf":"test_data = pd.read_csv('..\/input\/diabetes-classification\/test.csv')\ntest_data","d943d7ab":"# keep the size as same as diabetes_data\n# drop columns \u2192'p_id','skin_fold_thickness','serum_insulin'\nx_test = test_data.drop(['p_id','skin_fold_thickness','serum_insulin'],axis=1)\nx_test","b3487400":"sample_submission = pd.read_csv('..\/input\/diabetes-classification\/sample_submission.csv')\nsample_submission","6d7ef5ae":"x_test.shape","67dd49e3":"x_train.shape","890ebd76":"RT = RandomForestClassifier(max_depth=5,min_samples_split=3)\nRT.fit(x_train,y_train)\nfin_predictions = RT.predict(x_test)","63ef5abb":"fin_predictions","e3ad2c02":"output = pd.DataFrame({'p_id':test_data.p_id,'diabetes':fin_predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","fd6a9181":"### Load bunch of sklearn models","2f5dbaa2":"### There are only a few NaN values in the list\n### use sklearn SimpleImputer fill it","f52074db":"### Load test_data and make prediction\n - 1.Adjust test file\n - 2.use the hightest socre model witch is RandomForestClassifier to make prediciton","80781705":"#### We found the sample_submission and that the sequence is the same as test_data\n#### Big relief \uff1a\uff09","d7c437e2":"### 'skin_fold_thickness' and 'serum_insulin' are full of 'NaN'\n### drop it","40c8a091":"### We looked at the chart and found some anomalies \n### Some indicators like \u2018BMI\u2019\uff0c\u2018Insulin\u2019 should not be zero \n### We should use \u2018NaN\u2019 fill to these zero"}}