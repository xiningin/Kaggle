{"cell_type":{"4f998cdf":"code","cfcf2f34":"code","c724cb6f":"code","885c9fee":"code","0e5e2032":"code","5ee5b90e":"code","058b7a8f":"code","f43971a6":"code","0727b022":"code","04758f1f":"code","9483cd90":"code","28b7d7d1":"code","afc23c8d":"code","0266fad8":"code","6e493229":"code","ef357321":"code","b9b39277":"code","4e10cd9c":"code","6834a1ce":"code","4730e6e4":"code","42109b15":"code","880ce101":"code","1b778847":"code","944443fb":"code","aa642732":"code","6fc55b15":"code","e8bd7c23":"code","786414a1":"markdown","e9047279":"markdown","857de09f":"markdown"},"source":{"4f998cdf":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom lightgbm import LGBMRegressor\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cfcf2f34":"train_price = pd.read_csv('\/kaggle\/input\/stock-market-prediction\/price_train.csv')\ntest_price = pd.read_csv('\/kaggle\/input\/stock-market-prediction\/price_test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/stock-market-prediction\/sample_submission.csv')","c724cb6f":"train_price['datetime'] = pd.to_datetime(train_price['date'])\ntrain_price.sort_values(['symbol','datetime'],inplace=True)","885c9fee":"test_price.drop(columns=['close'],inplace=True)","0e5e2032":"symbols = test_price['symbol'].unique()","5ee5b90e":"df_horizontal_symbols = pd.pivot_table(train_price,\n               index = 'date',\n               columns = 'symbol',\n               values = 'close',\n               aggfunc = {\n                   'close': lambda x: x\n               }\n              )","058b7a8f":"df_horizontal_symbols.index = pd.to_datetime(df_horizontal_symbols.index)","f43971a6":"idx = pd.date_range(min(df_horizontal_symbols.index), max(df_horizontal_symbols.index))","0727b022":"df_horizontal_symbols = df_horizontal_symbols.reindex(idx,method='ffill')","04758f1f":"check_null = {}\nfor symbol in symbols:\n    check_null[symbol] = df_horizontal_symbols[symbol].isnull()","9483cd90":"df_horizontal_symbols.fillna(method='ffill',inplace=True)","28b7d7d1":"def make_feature(feat_14_day):\n    mean_14_day = np.mean(feat_14_day)\n    std_14_day = np.std(feat_14_day)\n    max_14_day = np.max(feat_14_day)\n    min_14_day = np.min(feat_14_day)\n    \n    feat_7_day = feat_14_day[7:]\n    mean_7_day = np.mean(feat_7_day)\n    std_7_day = np.std(feat_7_day)\n    max_7_day = np.max(feat_7_day)\n    min_7_day = np.min(feat_7_day)\n\n    log_return = list(np.diff(np.log(feat_14_day)))\n    \n    return feat_14_day + [std_14_day, max_14_day, min_14_day, mean_7_day, std_7_day, max_7_day, min_7_day] + log_return\n\ncolumn_names = [f'day-{i}' for i in range(14,0,-1)] + ['std_14_day','max_14_day', 'min_14_day','mean_7_day','std_7_day', 'max_7_day', 'min_7_day'] + [f'log_return_day-{i}' for i in range(13,0,-1)]\n","afc23c8d":"X_train = []\nX_valid = []\ny_train = []\ny_valid = []\nX_train_symbol = []\nX_valid_symbol = []\nfor symbol in symbols:\n    print(symbol)\n    check = check_null[symbol]\n    values = df_horizontal_symbols[symbol].values\n    x = []\n    y = []\n    for i in range(0,df_horizontal_symbols.shape[0]-14):\n        if not check[i+14]:\n            feat_14_day = list(values[i:i+14])\n            feats = make_feature(feat_14_day)\n            x.append(feats)\n            y.append(values[i+14])\n        else:\n            print('meow')\n    a = int(len(x)*0.75)\n    X_train.extend(x[:a])\n    X_valid.extend(x[a:])\n    y_train.extend(y[:a])\n    y_valid.extend(y[a:])\n    X_train_symbol.extend([symbol]*a)\n    X_valid_symbol.extend([symbol]*(len(x)-a))","0266fad8":"X_train = np.array(X_train)\nX_valid = np.array(X_valid)\ny_train = np.array(y_train)\ny_valid = np.array(y_valid)\n\nX_train = pd.DataFrame(X_train)\nX_train.columns =column_names\nX_train['symbol'] = X_train_symbol\nX_valid = pd.DataFrame(X_valid)\nX_valid.columns = column_names\nX_valid['symbol'] = X_valid_symbol\n\nX_train['symbol'] = X_train['symbol'].astype('category')\nX_valid['symbol'] = X_valid['symbol'].astype('category')","6e493229":"model = LGBMRegressor(random_state=42)","ef357321":"model.fit(\n          X_train, y_train,\n          eval_set=[(X_train, y_train),(X_valid, y_valid)],\n          eval_metric=['MAPE'],\n          categorical_feature=['symbol'])","b9b39277":"df_feature_importance = (\n    pd.DataFrame({\n        'feature': model.feature_name_,\n        'importance': model.feature_importances_,\n    })\n    .sort_values('importance', ascending=False)\n)\nplt.figure(figsize=(17,10))\nsns.barplot(x='importance', y='feature', data=df_feature_importance)","4e10cd9c":"future_dates = pd.date_range('2021-10-30', '2021-11-30')","6834a1ce":"for date in future_dates:\n    print(date)\n    X_test = []\n    X_test_symbol = []\n    for symbol in symbols:\n        feat_14_day = df_horizontal_symbols.tail(14)[symbol].to_list()\n        feats = make_feature(feat_14_day)\n        X_test.append(feats)\n        X_test_symbol.append(symbol)\n    X_test = pd.DataFrame(X_test)\n    X_test.columns = column_names\n    X_test['symbol'] = X_test_symbol\n    X_test['symbol'] = X_test['symbol'].astype('category')\n    nextday = pd.DataFrame({'symbol': symbols,\n                        'Predicted': model.predict(X_test),\n                        'date': [date]*len(symbols)})\n    nextday_horizontal_symbols = pd.pivot_table(nextday,\n               index = 'date',\n               columns = 'symbol',\n               values = 'Predicted',\n               aggfunc = {\n                   'Predicted': lambda x: x\n               }\n              )\n    df_horizontal_symbols = pd.concat([df_horizontal_symbols, nextday_horizontal_symbols])","4730e6e4":"df_horizontal_symbols.reset_index(inplace=True)\ndf_horizontal_symbols.rename(columns={'index':'date'},inplace=True)","42109b15":"predictions = df_horizontal_symbols.tail(30).melt(id_vars=['date'],value_name='Predicted')\npredictions['Id'] = predictions['date'].astype(str) + ':' + predictions['symbol']","880ce101":"test_price['Id'] = test_price['date'].astype(str) + ':' + test_price['symbol']\ntest_price = test_price.merge(predictions[['Id','Predicted']],how='left',on='Id')","1b778847":"mean_all = ['TCH','SSI','MWG','HDB', 'REE','HPG', 'BID']\nothers = set(symbols)  - set(mean_all)\nmean_full_predict = train_price[train_price['symbol'].isin(mean_all)].groupby(['symbol'])['close'].apply(lambda x: np.mean(list(x))).reset_index()\nmean_full_predict.columns = ['symbol', 'topping']\nmean_last14_predict = train_price[train_price['symbol'].isin(others)].groupby(['symbol'])['close'].apply(lambda x: np.mean(list(x)[-14:])).reset_index()\nmean_last14_predict.columns = ['symbol', 'topping']","944443fb":"topping = pd.concat([mean_full_predict, mean_last14_predict],axis=0).fillna(0)","aa642732":"test_price = test_price.merge(topping,how='left',on='symbol')","6fc55b15":"test_price['Predicted'] = (test_price['Predicted'] + test_price['topping']) \/ 2","e8bd7c23":"test_price[['Id','Predicted']].to_csv('sub.csv',index=False)","786414a1":"## Model","e9047279":"## Predict","857de09f":"## Add topping"}}