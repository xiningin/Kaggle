{"cell_type":{"a0dd2c15":"code","002c9df3":"code","b13f2e96":"code","66a61538":"code","ea14a5bf":"code","e1cca5af":"code","4336224c":"code","c0190043":"code","cc3bcd38":"code","1cac220e":"code","77fee1f8":"code","f23eedfc":"code","08f00acf":"code","c9ca3fa8":"code","91553c35":"code","34960257":"code","82de10d9":"code","b796a99b":"code","89f9e61f":"code","e54203c9":"code","6b403c52":"code","8208a663":"code","020050c7":"code","9a239d34":"code","6af087d2":"code","0d1c8ae8":"code","f68eb1ad":"code","a615eada":"code","c9cd8e44":"code","84e45b78":"code","bffc7b8f":"code","3292a464":"code","67a1e634":"code","06ecc32c":"code","33646dd6":"code","cb451de2":"code","07d266d8":"code","583933b8":"code","8dc83361":"code","32f02c07":"code","8bafc88b":"code","38016758":"code","8305eff4":"code","c276d43b":"code","fb5451b8":"code","63f56a9d":"code","9c29c0f7":"code","c452f631":"code","7cc57f9a":"code","f8d42171":"code","6404b35e":"code","c7606214":"code","3eab20f3":"code","d3ca1032":"code","ca206c56":"code","7c0de2d5":"code","5114d1b0":"code","a165f220":"code","d6f51b17":"code","ba4e2665":"code","3f154ec8":"code","413c03a7":"code","143564fc":"code","32b0a0fb":"code","13d76601":"code","d0f0b91a":"code","3fa8adb5":"code","a4f0648e":"code","344243d8":"code","5a74a8df":"code","ac9b92c2":"code","2e8a916e":"code","c71a1c54":"code","44d06552":"code","45c24481":"code","56b31ca0":"code","223317a9":"code","ae3892fa":"code","93febc97":"code","69871fd0":"code","81e3e338":"code","17ce35fd":"code","268052ac":"code","2aafbb77":"code","a2de9031":"code","493cc6ed":"code","52ce8f74":"code","3e06ea37":"code","74254640":"code","6e3d7671":"code","3bdf5a94":"code","6fd0c6fa":"code","626ec683":"code","de1b3232":"code","3931cb87":"code","f6987481":"code","65aead1f":"code","256d5ef5":"code","bc9c43f2":"code","2156d5c9":"code","795b1151":"code","4ad7f7fa":"code","71032351":"code","a44f867d":"code","139054ad":"code","793fe43b":"code","b7eeec54":"code","85d8c2c2":"code","bdf24007":"code","b233d284":"code","76384cb4":"code","0cf22312":"code","535e8a95":"code","44af2f20":"code","f0cf6a30":"code","b4e4f5b0":"code","0c8c3035":"code","c754e619":"code","39464801":"code","c8c61e3b":"markdown","d6c43bd0":"markdown","9d7480b4":"markdown","f45dc0f8":"markdown","c1188900":"markdown","8b446ec8":"markdown","1400051e":"markdown","2616becd":"markdown","cdfb33a5":"markdown","738eece5":"markdown","f3c7f0b1":"markdown","eaa0d423":"markdown","fb39cebc":"markdown"},"source":{"a0dd2c15":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","002c9df3":"data=pd.read_csv(\"..\/input\/bda-ml-exam\/traindata_SJC.csv\")\n","b13f2e96":"data.info()","66a61538":"data.shape","ea14a5bf":"data.head()","e1cca5af":"data = data.iloc[1:]\ndata.head()","4336224c":"data.isnull().sum()","c0190043":"data.describe()","cc3bcd38":"data.columns","1cac220e":"data['WeeklyWages']=data['WeeklyWages'].fillna(data['WeeklyWages'].mean())","77fee1f8":"data['HoursWorkedPerWeek']=data['HoursWorkedPerWeek'].fillna(data['HoursWorkedPerWeek'].mean())","f23eedfc":"data['MaritalStatus']=data['MaritalStatus'].fillna(\"U\")","08f00acf":"data.isnull().sum()","c9ca3fa8":"data.head()","91553c35":"dt=data","34960257":"dt.info()","82de10d9":"dt1=dt.select_dtypes(exclude=\"object\")\ndt1","b796a99b":"cat_data=dt.select_dtypes(include=\"object\")\ncat_data","89f9e61f":"dt1.shape","e54203c9":"dt1.isnull().sum()","6b403c52":"cat_data.shape","8208a663":"cat_data.isnull().sum()","020050c7":"dt_2=dt1.fillna(dt1.mean())\ndt_2","9a239d34":"dt_2.isnull().sum()","6af087d2":"dt_2.shape","0d1c8ae8":"dt_2.columns","f68eb1ad":"data.plot.box(figsize=(16,10))\nplt.xticks(rotation=90)\n","a615eada":"dt1","c9cd8e44":"dt1.plot.box()\nplt.xticks(rotation=90)\n","84e45b78":"data_outlier = dt1.drop(['UltimateIncurredClaimCost'],axis=1)\ndata_outlier.plot.box()\nplt.xticks(rotation=90)","bffc7b8f":"data_outlier.shape","3292a464":"data.columns","67a1e634":"#Outcome variable 'UltimateIncurredClaimCost'                    \n\ndata['ClaimNumber'].value_counts()","06ecc32c":"sns.distplot(data['Age'],bins=20,color='g')\nplt.title(\"Age\")\nplt.show()\n","33646dd6":"plt.figure(figsize=(10,5))\nsns.countplot(data['Gender'])        \nplt.title('Gender')\nplt.show()","cb451de2":"data['Gender'].value_counts(normalize=True)*100","07d266d8":"#In percentage\n(data['Gender'].value_counts(normalize=True)*100).plot(kind='bar')     \nplt.show()","583933b8":"plt.figure(figsize=(16,8))\nsns.countplot(data['MaritalStatus'])                        \nplt.title(\"Marriage  Status \")\nplt.show()","8dc83361":"# In pecentage\ndata['MaritalStatus'].value_counts(normalize=True)*100","32f02c07":"plt.figure(figsize=(16,8))\nsns.countplot(data['DependentChildren'])                        \nplt.title('Dependent Children')\nplt.show()","8bafc88b":"# In pecentage\ndata['DependentChildren'].value_counts(normalize=True)*100","38016758":"plt.figure(figsize=(16,8))\nsns.countplot(data['DependentsOther'])                        \nplt.title('Dependent Other')\nplt.show()","8305eff4":"# In pecentage\ndata['DependentsOther'].value_counts(normalize=True)*100","c276d43b":"plt.figure(figsize=(10,8))\nsns.distplot(data['WeeklyWages'],color='r')\nplt.title(\"Weekly Wages\")\nplt.show()\n","fb5451b8":"plt.figure(figsize=(10,5))\nsns.countplot(data['PartTimeFullTime'])        \nplt.title('Part Time Or Full Time')\nplt.show()","63f56a9d":"# In pecentage\ndata['PartTimeFullTime'].value_counts(normalize=True)*100","9c29c0f7":"plt.figure(figsize=(10,8))\nsns.distplot(data['HoursWorkedPerWeek'],color='g')\nplt.title(\"Hours Worked Per Week\")\nplt.show()\n","c452f631":"plt.figure(figsize=(16,8))\nsns.countplot(data[\"DaysWorkedPerWeek\"])                        \nplt.title('Days Worked Per Week')\nplt.show()","7cc57f9a":"# In pecentage\ndata['DaysWorkedPerWeek'].value_counts(normalize=True)*100","f8d42171":"plt.figure(figsize=(10,8))\nsns.distplot(data['InitialIncurredCalimsCost'],color='g')\nplt.title(\"Initial Incurred Calims Cost\")\nplt.show()\n","6404b35e":"sns.boxplot(data=dt_2,x='InitialIncurredCalimsCost')","c7606214":"plt.figure(figsize=(10,8))\nsns.distplot(data['UltimateIncurredClaimCost'],color='g')\nplt.title(\"Ultimate Incurred Claim Cost\")\nplt.show()","3eab20f3":"sns.boxplot(data=dt_2,x='UltimateIncurredClaimCost')","d3ca1032":"sns.catplot(data=dt_2,x='UltimateIncurredClaimCost',kind='violin')\n","ca206c56":"data.columns","7c0de2d5":"df=['ClaimNumber', 'DateTimeOfAccident', 'Age', 'Gender',\n       'MaritalStatus', 'DependentChildren', 'DependentsOther', 'WeeklyWages',\n       'PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'InitialIncurredCalimsCost','UltimateIncurredClaimCost']","5114d1b0":"sns.heatmap(data[df].corr(),square=True)","a165f220":"sns.pairplot(data[df],diag_kind=\"kde\")","d6f51b17":"dt1.columns","ba4e2665":"sns.heatmap(data[dt1.columns].corr(),square=True)","3f154ec8":"sns.pairplot(data[dt1.columns],diag_kind=\"kde\")","413c03a7":"cat_data.columns","143564fc":"data_1=['ClaimNumber', 'DateTimeOfAccident', 'Date Reported', 'Age', 'Gender']\ndata_2=['MaritalStatus', 'DependentChildren', 'DependentsOther', 'WeeklyWages','PartTimeFullTime']\ndata_3=['HoursWorkedPerWeek', 'DaysWorkedPerWeek','ClaimDescription', 'InitialIncurredCalimsCost',\n       'UltimateIncurredClaimCost']","32b0a0fb":"sns.heatmap(data[data_2].corr(),square=True)","13d76601":"sns.pairplot(data[data_2],diag_kind=\"kde\")","d0f0b91a":"sns.heatmap(data[data_3].corr(),square=True)","3fa8adb5":"sns.pairplot(data[data_3],diag_kind=\"kde\")","a4f0648e":"correlation=data.corr()","344243d8":"plt.figure(figsize=(14,10))\nsns.heatmap(correlation,square=True)\n","5a74a8df":"import sklearn.preprocessing as pre\nimport sklearn.model_selection as ms","ac9b92c2":"le=pre.LabelEncoder()\nfor x in dt_2.select_dtypes(exclude=['int','float']).columns.tolist():\n    dt_2[x]=le.fit_transform(dt_2[x])","2e8a916e":"pre.OrdinalEncoder()\n","c71a1c54":"dt_2.info()","44d06552":"dt_2.head()","45c24481":"X_scale=pre.minmax_scale(dt_2.drop('UltimateIncurredClaimCost',axis=1))","56b31ca0":"Y=data['UltimateIncurredClaimCost']","223317a9":"Y.describe()","ae3892fa":"Y_scale=pre.minmax_scale(data['UltimateIncurredClaimCost'])","93febc97":"Y_scale","69871fd0":"x_train,x_test,y_train,y_test=ms.train_test_split(X_scale,Y,test_size=0.3,random_state=1234456)","81e3e338":"x_train.shape,x_test.shape,y_train.shape,y_test.shape\n","17ce35fd":"import sklearn.linear_model as lm","268052ac":"glm=lm.LinearRegression()","2aafbb77":"glm.fit(x_train,y_train)","a2de9031":"glm.score(x_test,y_test)","493cc6ed":"glm.score(x_train,y_train)","52ce8f74":"from sklearn.tree import DecisionTreeRegressor\nfrom matplotlib import pyplot\nmodel=DecisionTreeRegressor(random_state=1234456)\n\n# Fit the model\nmodel.fit(x_train,y_train)\n\n# Get importance\nimportance= model.feature_importances_\n\n# Summarize feature importance\nfor i,v in enumerate(importance):\n    print(\"Feature: %0d, Score : %0.5f\" %(i,v))\n    \n# Plot feature importance\npyplot.bar([x for x in range(len(importance))],importance)\npyplot.show()","3e06ea37":"a=dt_2.columns.tolist()\na.remove('UltimateIncurredClaimCost')\nprint(a)","74254640":"dict(zip(a,glm.coef_))","6e3d7671":"imp=dict(zip(a,importance))","3bdf5a94":"imp_dt1=pd.DataFrame(list(imp.items()),columns=[\"feature\",\"importance\"])","6fd0c6fa":"imp_data=imp_dt1.sort_values(by = 'importance')\nimp_data","626ec683":"col=dt_2.columns\ncol\n","de1b3232":"def feature_train_test_score(dataset,list_columns_drop):\n    X_scale=pre.minmax_scale(dataset.drop(list_columns_drop,axis=1))\n    Y=dt_2['UltimateIncurredClaimCost']\n    x_train,x_test,y_train,y_test=ms.train_test_split(X_scale,Y,test_size=0.3,random_state=1234456)\n    glm=lm.LinearRegression()\n    glm.fit(x_train,y_train)\n    diction={}\n    diction['Test score']=glm.score(x_test,y_test)\n    diction['Train score']=glm.score(x_train,y_train)\n    return(diction)","3931cb87":"# Function to find test and train scores by including \n#  features that have importance greater than a given threshold\ndef scores(dataset,a):\n    unimportant_features=imp_data.feature[0:a+1].tolist()\n    unimportant_features.append('UltimateIncurredClaimCost')\n    features=(np.setdiff1d(col,unimportant_features)).tolist()\n    n=len(features)\n    scores=feature_train_test_score(dataset,unimportant_features)\n    output={}\n    output['Number of features']=n\n    output['Features']=features\n    output['scores']=scores\n    return(output)","f6987481":"# for i in range(-1,79):\n#     print(scores(dt_2,i),\"\\n \\n\")","65aead1f":"import sklearn.preprocessing as pre\nimport sklearn.model_selection as ms","256d5ef5":"le=pre.LabelEncoder()\nfor x in dt_2.select_dtypes(exclude=['int','float']).columns.tolist():\n    dt_2[x]=le.fit_transform(dt_2[x])","bc9c43f2":"pre.OrdinalEncoder()\n","2156d5c9":"dt_2.info()","795b1151":"X_scale=pre.minmax_scale(dt_2.drop('UltimateIncurredClaimCost',axis=1))","4ad7f7fa":"Y=data['UltimateIncurredClaimCost']","71032351":"Y.describe()","a44f867d":"Y_scale=pre.minmax_scale(data['UltimateIncurredClaimCost'])","139054ad":"Y_scale","793fe43b":"x_train,x_test,y_train,y_test=ms.train_test_split(X_scale,Y,test_size=0.3,random_state=1234456)","b7eeec54":"x_train.shape,x_test.shape,y_train.shape,y_test.shape\n","85d8c2c2":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 50,random_state = 0)\nregressor.fit(x_train, y_train)\n","bdf24007":"regressor.score(x_train,y_train)","b233d284":"regressor.score(x_test,y_test)","76384cb4":"y_pred = regressor.predict(x_test)","0cf22312":"from sklearn import metrics","535e8a95":"print(np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","44af2f20":"a=dt_2.columns.tolist()\na.remove('UltimateIncurredClaimCost')\nprint(a)","f0cf6a30":"def feature_train_test_score(dataset,list_columns_drop):\n    X_scale=pre.minmax_scale(dataset.drop(list_columns_drop,axis=1))\n    Y=dt_2['UltimateIncurredClaimCost']\n    x_train,x_test,y_train,y_test=ms.train_test_split(X_scale,Y,test_size=0.3,random_state=1234456)\n\n    regressor.fit(x_train,y_train)\n    diction={}\n    diction['Test score']=regressor.score(x_test,y_test)\n    diction['Train score']=regressor.score(x_train,y_train)\n    return(diction)","b4e4f5b0":"def scores(dataset,a):\n    unimportant_features=imp_data.feature[0:a+1].tolist()\n    unimportant_features.append('UltimateIncurredClaimCost')\n    features=(np.setdiff1d(col,unimportant_features)).tolist()\n    n=len(features)\n    scores=feature_train_test_score(dataset,unimportant_features)\n    output={}\n    output['Number of features']=n\n    output['Features']=features\n    output['scores']=scores\n    return(output)","0c8c3035":"# #for i in range(-1,79):\n#     print(scores(dt_2,i),\"\\n \\n\")","c754e619":"# csv = pd.read_csv(\"..\/input\/bda-exam\/sample_submission_csv.csv\")\n# csv[\"UltimateIncurredClaimCost\"]=y_pred\n","39464801":"# csv.to_csv(\"Sample Submission.csv\", index = False)","c8c61e3b":"# Model","d6c43bd0":"Among the insurers most of them are males that is almost 77%.\nAnd only 225-23% are females.\n","9d7480b4":"Among the insurers most of their marital status that is almost 48% are single and only 41% are married.","f45dc0f8":"## Data analysis","c1188900":"### There are 15 rows and 36177 columns. ","8b446ec8":"Majority of them work 5 days per week .i.e, almost 90%","1400051e":"## Missing value imputation\n","2616becd":"# Preprocessing\n","cdfb33a5":"Almost 91% of the insurers are having full time jobs and the rest 9% are having parttime job","738eece5":"### Random Forest","f3c7f0b1":"### Linear Regression is not  a good model","eaa0d423":"### Outliyer Analysis","fb39cebc":"Most of the people belong to the age group between 18 to 55"}}