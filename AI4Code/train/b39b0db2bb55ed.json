{"cell_type":{"756efd29":"code","33598494":"code","3063c133":"code","4fc2c70e":"code","cb08e958":"code","dc2a6d6b":"code","7ecf5678":"code","f9d3df0d":"code","49ba86c0":"code","27ae1a3b":"code","b215fccd":"code","f7c9a7ef":"code","ca21eba2":"code","fa124098":"code","f29cd4c2":"code","621f6343":"code","66fa9ce1":"code","188ba84e":"code","d322d447":"code","8b67706f":"code","2449bbeb":"code","5de0757c":"code","f001d0ba":"code","a85b893a":"code","f83e9624":"code","59731dd0":"code","3ecfa8fe":"code","0e9dd810":"code","c86a9474":"code","98d3fa63":"code","2539b293":"code","a1022237":"code","6a52db76":"code","c641e33e":"code","08e0ee45":"code","7cb7b265":"code","784da571":"code","19cebd2b":"code","ea6fa4cd":"code","62ccec0f":"code","9e2be701":"code","7b0afc57":"code","ab6e3538":"code","83522adc":"code","60e45c3c":"code","9ce556f9":"code","74dce9d9":"code","a3394b02":"code","b6d1ea90":"code","1e856d32":"code","4317d5c9":"code","61890d77":"code","011a04b7":"code","a0768547":"code","9251496e":"code","18825491":"code","ba0c3906":"code","f3f2a6a5":"code","44f754c8":"code","8072e9f7":"code","8c364e1d":"code","0a3557b3":"code","ae39a6da":"code","7bd028b6":"code","9e3bba1d":"code","d721ea79":"code","36c454a7":"code","7e28b90b":"code","5f1a3faa":"code","c76320c7":"code","47d647c5":"code","66dbdf3b":"code","ae424e38":"code","dbba0416":"code","1b3b1114":"code","1f2434e6":"code","8eb02439":"code","d38d504d":"code","5c28a4df":"code","9e9057d4":"code","3845605a":"code","3c279fce":"code","00274fad":"code","7877168a":"code","f4e51311":"code","f32a947e":"code","67f839cc":"code","925cdebc":"code","135777b8":"code","b8a8288f":"code","069625c3":"code","6481e658":"code","fba272c7":"code","91f7b4cb":"code","e394e228":"code","bde89056":"code","d5adc6a9":"code","a457bf40":"code","603e89e2":"code","0a9f1abc":"code","7a25b474":"code","51e49c96":"code","c3de4c42":"code","30aa6c36":"code","57d2b3d0":"code","d5124fa6":"code","c3d79176":"code","45a1cf03":"code","8c55ef63":"code","eac7e13b":"code","a0b5b7d9":"code","b5ea390a":"code","d2deb74c":"code","4a96a6c8":"code","ca2f2f96":"code","8de1fcea":"code","3b4d51f2":"code","6a95369d":"code","611170aa":"code","00b8913e":"code","6096320b":"code","b7148983":"code","579292d2":"code","55c357da":"code","891f3e23":"code","6bb41526":"code","a0b7b0fd":"code","d6740bef":"code","01b984cf":"code","34ee7461":"code","f1ef7cc1":"code","1fe3b2cc":"code","a412fb77":"code","87254296":"code","5d8c81f7":"code","34228a7f":"code","2bff6c0b":"code","66d8d019":"code","d6c32023":"code","edc4583e":"code","e4bb51b0":"code","190fc120":"code","23d8829e":"code","4a7df828":"code","6748e3c7":"code","a04ba4b6":"markdown","84083952":"markdown","eb7cb92c":"markdown","b9484e27":"markdown","d9f0b18b":"markdown","83e755da":"markdown","49431c91":"markdown","9e39e152":"markdown","509bd41d":"markdown","9b3d321b":"markdown","59423a7a":"markdown","cae099ac":"markdown","0d232aaa":"markdown","18d6d822":"markdown","42a5d482":"markdown","bb69b5dc":"markdown","54b51a1a":"markdown","bc762008":"markdown","68d67307":"markdown","80c5a643":"markdown","39540c3f":"markdown","49fb833a":"markdown","8a807b4c":"markdown","2c98dd8c":"markdown","60c83792":"markdown","41cbcf62":"markdown","945710e1":"markdown","b7a1f627":"markdown","cdac9d00":"markdown","bd7484ca":"markdown","9ae40ca0":"markdown","5572ad94":"markdown","00a38a5a":"markdown","9a05309a":"markdown","6545ed0a":"markdown","045a4eea":"markdown","9671606b":"markdown","c2012a4f":"markdown","64622cf1":"markdown","2d0b694f":"markdown","0397594d":"markdown","02f8630e":"markdown","7437ead6":"markdown","cf26607f":"markdown","2a38672f":"markdown"},"source":{"756efd29":"from subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Import the necessary packages\nimport numpy as np\nimport pandas as pd\n\nimport warnings\nwarnings.simplefilter(action =\"ignore\")\n\nfrom collections import Counter\n\n# Data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scikitplot.plotters import plot_learning_curve\nfrom mlxtend.plotting import plot_learning_curves\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.model_selection import ShuffleSplit\nfrom yellowbrick.model_selection import FeatureImportances\n\n# Algorithms\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn import metrics\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn import svm\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.metrics import mean_squared_error","33598494":"# Load Dataset\ntrain = pd.read_csv('..\/input\/forest-cover-type-prediction\/train.csv')\ntest  = pd.read_csv('..\/input\/forest-cover-type-prediction\/test.csv')","3063c133":"train.head()","4fc2c70e":"train.columns.values","cb08e958":"test.head()","dc2a6d6b":"test.columns.values","7ecf5678":"# Analyse statically insight of train data\ntrain.describe()","f9d3df0d":"# Analyse statically insight of test data\ntest.describe()","49ba86c0":"train.info()","27ae1a3b":"test.info()","b215fccd":"print(f\"The train data size: {train.shape}\")\nprint(f\"The test data size: {test.shape}\")","f7c9a7ef":"diff_train_test = set(train.columns) - set(test.columns)\ndiff_train_test","ca21eba2":"train[\"Cover_Type\"].describe()","fa124098":"plt.figure(figsize=(22,6), dpi= 80)\nax = sns.countplot(y=train[\"Cover_Type\"], hue=\"Cover_Type\", data=train)","f29cd4c2":"numeric_data=train.select_dtypes(exclude=\"object\")\nnumeric_corr=numeric_data.corr()\nf,ax=plt.subplots(figsize=(19,1))\nsns.heatmap(numeric_corr.sort_values(by=[\"Cover_Type\"], ascending=False).head(1), cmap=\"Greens\")\nplt.title(\"Numerical features correlation with the Cover_Type\", weight=\"bold\", fontsize=18, color=\"darkgreen\")\nplt.yticks(weight=\"bold\", color=\"darkgreen\", rotation=0)\n\nplt.show()","621f6343":"Num_feature=numeric_corr[\"Cover_Type\"].sort_values(ascending=False).head(20).to_frame()\n\ncm = sns.light_palette(\"forestgreen\", as_cmap=True)\n\nstyle = Num_feature.style.background_gradient(cmap=cm)\nstyle","66fa9ce1":"# Draw Plot\nplt.figure(figsize=(16,10), dpi= 80)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 1, \"Elevation\"], shade=True, color=\"#4169E1\", label=\"Cover=1\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 2, \"Elevation\"], shade=True, color=\"#FF8C00\", label=\"Cover=2\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 3, \"Elevation\"], shade=True, color=\"#FF4500\", label=\"Cover=3\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 4, \"Elevation\"], shade=True, color=\"#BDB76B\", label=\"Cover=4\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 5, \"Elevation\"], shade=True, color=\"#8B4513\", label=\"Cover=5\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 6, \"Elevation\"], shade=True, color=\"#9400D3\", label=\"Cover=6\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 7, \"Elevation\"], shade=True, color=\"#006400\", label=\"Cover=7\", alpha=.7)\n\n# Decoration\nplt.title(\"The distribution of the attribute Elevation\", color=\"#006400\", fontsize=22)\nplt.legend()\nplt.show()","188ba84e":"g = sns.catplot(x=\"Elevation\", hue=\"Cover_Type\", col=\"Cover_Type\",\n                data=train, kind=\"count\",\n                height=4, aspect=.7);","d322d447":"# Draw Plot\nplt.figure(figsize=(15,8))\nsns.boxplot(x=\"Cover_Type\", y=\"Elevation\", data=train, hue=\"Cover_Type\")\n\n# Decoration\nplt.title(\"Box Plot of Elevation by Cover_Type\", fontsize=22, color=\"#006400\")\nplt.legend(title=\"Cover\")\nplt.show()","8b67706f":"# Draw Plot\nplt.figure(figsize=(16,10), dpi= 80)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 1, \"Aspect\"], shade=True, color=\"#4169E1\", label=\"Cover=1\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 2, \"Aspect\"], shade=True, color=\"#FF8C00\", label=\"Cover=2\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 3, \"Aspect\"], shade=True, color=\"#FF4500\", label=\"Cover=3\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 4, \"Aspect\"], shade=True, color=\"#BDB76B\", label=\"Cover=4\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 5, \"Aspect\"], shade=True, color=\"#8B4513\", label=\"Cover=5\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 6, \"Aspect\"], shade=True, color=\"#9400D3\", label=\"Cover=6\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 7, \"Aspect\"], shade=True, color=\"#006400\", label=\"Cover=7\", alpha=.7)\n\n# Decoration\nplt.title(\"The distribution of the attribute Aspect\", color=\"#006400\", fontsize=22)\nplt.legend()\nplt.show()","2449bbeb":"g = sns.catplot(x=\"Aspect\", hue=\"Cover_Type\", col=\"Cover_Type\",\n                data=train, kind=\"count\",\n                height=4, aspect=.7);","5de0757c":"# Draw Plot\nplt.figure(figsize=(15,8))\nsns.boxplot(x=\"Cover_Type\", y=\"Aspect\", data=train, hue=\"Cover_Type\")\n\n# Decoration\nplt.title(\"Box Plot of Aspect by Cover_Type\", fontsize=22, color=\"#006400\")\nplt.legend(title=\"Cover\")\nplt.show()","f001d0ba":"# Draw Plot\nplt.figure(figsize=(16,10), dpi= 80)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 1, \"Slope\"], shade=True, color=\"#4169E1\", label=\"Cover=1\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 2, \"Slope\"], shade=True, color=\"#FF8C00\", label=\"Cover=2\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 3, \"Slope\"], shade=True, color=\"#FF4500\", label=\"Cover=3\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 4, \"Slope\"], shade=True, color=\"#BDB76B\", label=\"Cover=4\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 5, \"Slope\"], shade=True, color=\"#8B4513\", label=\"Cover=5\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 6, \"Slope\"], shade=True, color=\"#9400D3\", label=\"Cover=6\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 7, \"Slope\"], shade=True, color=\"#006400\", label=\"Cover=7\", alpha=.7)\n\n# Decoration\nplt.title(\"The distribution of the attribute Slope\", color=\"#006400\", fontsize=22)\nplt.legend()\nplt.show()","a85b893a":"g = sns.catplot(x=\"Slope\", hue=\"Cover_Type\", col=\"Cover_Type\",\n                data=train, kind=\"count\",\n                height=4, aspect=.7);","f83e9624":"# Draw Plot\nplt.figure(figsize=(15,8))\nsns.boxplot(x=\"Cover_Type\", y=\"Slope\", data=train, hue=\"Cover_Type\")\n\n# Decoration\nplt.title(\"Box Plot of Slope by Cover_Type\", fontsize=22, color=\"#006400\")\nplt.legend(title=\"Cover\")\nplt.show()","59731dd0":"# Draw Plot\nplt.figure(figsize=(16,10), dpi= 80)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 1, \"Horizontal_Distance_To_Hydrology\"], shade=True, color=\"#4169E1\", label=\"Cover=1\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 2, \"Horizontal_Distance_To_Hydrology\"], shade=True, color=\"#FF8C00\", label=\"Cover=2\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 3, \"Horizontal_Distance_To_Hydrology\"], shade=True, color=\"#FF4500\", label=\"Cover=3\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 4, \"Horizontal_Distance_To_Hydrology\"], shade=True, color=\"#BDB76B\", label=\"Cover=4\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 5, \"Horizontal_Distance_To_Hydrology\"], shade=True, color=\"#8B4513\", label=\"Cover=5\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 6, \"Horizontal_Distance_To_Hydrology\"], shade=True, color=\"#9400D3\", label=\"Cover=6\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 7, \"Horizontal_Distance_To_Hydrology\"], shade=True, color=\"#006400\", label=\"Cover=7\", alpha=.7)\n\n# Decoration\nplt.title(\"The distribution of the attribute Horizontal_Distance_To_Hydrology\", color=\"#006400\", fontsize=22)\nplt.legend()\nplt.show()","3ecfa8fe":"g = sns.catplot(x=\"Horizontal_Distance_To_Hydrology\", hue=\"Cover_Type\", col=\"Cover_Type\",\n                data=train, kind=\"count\",\n                height=4, aspect=.7);","0e9dd810":"# Draw Plot\nplt.figure(figsize=(15,8))\nsns.boxplot(x=\"Cover_Type\", y=\"Horizontal_Distance_To_Hydrology\", data=train, hue=\"Cover_Type\")\n\n# Decoration\nplt.title(\"Box Plot of Horizontal_Distance_To_Hydrology by Cover_Type\", fontsize=22, color=\"#006400\")\nplt.legend(title=\"Cover\")\nplt.show()","c86a9474":"# Draw Plot\nplt.figure(figsize=(16,10), dpi= 80)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 1, \"Vertical_Distance_To_Hydrology\"], shade=True, color=\"#4169E1\", label=\"Cover=1\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 2, \"Vertical_Distance_To_Hydrology\"], shade=True, color=\"#FF8C00\", label=\"Cover=2\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 3, \"Vertical_Distance_To_Hydrology\"], shade=True, color=\"#FF4500\", label=\"Cover=3\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 4, \"Vertical_Distance_To_Hydrology\"], shade=True, color=\"#BDB76B\", label=\"Cover=4\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 5, \"Vertical_Distance_To_Hydrology\"], shade=True, color=\"#8B4513\", label=\"Cover=5\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 6, \"Vertical_Distance_To_Hydrology\"], shade=True, color=\"#9400D3\", label=\"Cover=6\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 7, \"Vertical_Distance_To_Hydrology\"], shade=True, color=\"#006400\", label=\"Cover=7\", alpha=.7)\n\n# Decoration\nplt.title(\"The distribution of the attribute Vertical_Distance_To_Hydrology\", color=\"#006400\", fontsize=22)\nplt.legend()\nplt.show()","98d3fa63":"# Draw Plot\nplt.figure(figsize=(15,8))\nsns.boxplot(x=\"Cover_Type\", y=\"Vertical_Distance_To_Hydrology\", data=train, hue=\"Cover_Type\")\n\n# Decoration\nplt.title(\"Box Plot of Vertical_Distance_To_Hydrology by Cover_Type\", fontsize=22, color=\"#006400\")\nplt.legend(title=\"Cover\")\nplt.show()","2539b293":"# Draw Plot\nplt.figure(figsize=(16,10), dpi= 80)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 1, \"Horizontal_Distance_To_Roadways\"], shade=True, color=\"#4169E1\", label=\"Cover=1\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 2, \"Horizontal_Distance_To_Roadways\"], shade=True, color=\"#FF8C00\", label=\"Cover=2\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 3, \"Horizontal_Distance_To_Roadways\"], shade=True, color=\"#FF4500\", label=\"Cover=3\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 4, \"Horizontal_Distance_To_Roadways\"], shade=True, color=\"#BDB76B\", label=\"Cover=4\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 5, \"Horizontal_Distance_To_Roadways\"], shade=True, color=\"#8B4513\", label=\"Cover=5\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 6, \"Horizontal_Distance_To_Roadways\"], shade=True, color=\"#9400D3\", label=\"Cover=6\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 7, \"Horizontal_Distance_To_Roadways\"], shade=True, color=\"#006400\", label=\"Cover=7\", alpha=.7)\n\n# Decoration\nplt.title(\"The distribution of the attribute Horizontal_Distance_To_Roadways\", color=\"#006400\", fontsize=22)\nplt.legend()\nplt.show()","a1022237":"# Draw Plot\nplt.figure(figsize=(15,8))\nsns.boxplot(x=\"Cover_Type\", y=\"Horizontal_Distance_To_Roadways\", data=train, hue=\"Cover_Type\")\n\n# Decoration\nplt.title(\"Box Plot of Horizontal_Distance_To_Roadways by Cover_Type\", fontsize=22, color=\"#006400\")\nplt.legend(title=\"Cover\")\nplt.show()","6a52db76":"# Draw Plot\nplt.figure(figsize=(16,10), dpi= 80)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 1, \"Hillshade_9am\"], shade=True, color=\"#4169E1\", label=\"Cover=1\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 2, \"Hillshade_9am\"], shade=True, color=\"#FF8C00\", label=\"Cover=2\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 3, \"Hillshade_9am\"], shade=True, color=\"#FF4500\", label=\"Cover=3\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 4, \"Hillshade_9am\"], shade=True, color=\"#BDB76B\", label=\"Cover=4\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 5, \"Hillshade_9am\"], shade=True, color=\"#8B4513\", label=\"Cover=5\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 6, \"Hillshade_9am\"], shade=True, color=\"#9400D3\", label=\"Cover=6\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 7, \"Hillshade_9am\"], shade=True, color=\"#006400\", label=\"Cover=7\", alpha=.7)\n\n# Decoration\nplt.title(\"The distribution of the attribute Hillshade_9am\", color=\"#006400\", fontsize=22)\nplt.legend()\nplt.show()","c641e33e":"# Draw Plot\nplt.figure(figsize=(15,8))\nsns.boxplot(x=\"Cover_Type\", y=\"Hillshade_9am\", data=train, hue=\"Cover_Type\")\n\n# Decoration\nplt.title(\"Box Plot of Hillshade_9am by Cover_Type\", fontsize=22, color=\"#006400\")\nplt.legend(title=\"Cover\")\nplt.show()","08e0ee45":"# Draw Plot\nplt.figure(figsize=(16,10), dpi= 80)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 1, \"Hillshade_Noon\"], shade=True, color=\"#4169E1\", label=\"Cover=1\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 2, \"Hillshade_Noon\"], shade=True, color=\"#FF8C00\", label=\"Cover=2\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 3, \"Hillshade_Noon\"], shade=True, color=\"#FF4500\", label=\"Cover=3\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 4, \"Hillshade_Noon\"], shade=True, color=\"#BDB76B\", label=\"Cover=4\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 5, \"Hillshade_Noon\"], shade=True, color=\"#8B4513\", label=\"Cover=5\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 6, \"Hillshade_Noon\"], shade=True, color=\"#9400D3\", label=\"Cover=6\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 7, \"Hillshade_Noon\"], shade=True, color=\"#006400\", label=\"Cover=7\", alpha=.7)\n\n# Decoration\nplt.title(\"The distribution of the attribute Hillshade_Noon\", color=\"#006400\", fontsize=22)\nplt.legend()\nplt.show()","7cb7b265":"# Draw Plot\nplt.figure(figsize=(15,8))\nsns.boxplot(x=\"Cover_Type\", y=\"Hillshade_Noon\", data=train, hue=\"Cover_Type\")\n\n# Decoration\nplt.title(\"Box Plot of Hillshade_Noon by Cover_Type\", fontsize=22, color=\"#006400\")\nplt.legend(title=\"Cover\")\nplt.show()","784da571":"# Draw Plot\nplt.figure(figsize=(16,10), dpi= 80)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 1, \"Hillshade_3pm\"], shade=True, color=\"#4169E1\", label=\"Cover=1\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 2, \"Hillshade_3pm\"], shade=True, color=\"#FF8C00\", label=\"Cover=2\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 3, \"Hillshade_3pm\"], shade=True, color=\"#FF4500\", label=\"Cover=3\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 4, \"Hillshade_3pm\"], shade=True, color=\"#BDB76B\", label=\"Cover=4\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 5, \"Hillshade_3pm\"], shade=True, color=\"#8B4513\", label=\"Cover=5\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 6, \"Hillshade_3pm\"], shade=True, color=\"#9400D3\", label=\"Cover=6\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 7, \"Hillshade_3pm\"], shade=True, color=\"#006400\", label=\"Cover=7\", alpha=.7)\n\n# Decoration\nplt.title(\"The distribution of the attribute Hillshade_3pm\", color=\"#006400\", fontsize=22)\nplt.legend()\nplt.show()","19cebd2b":"# Draw Plot\nplt.figure(figsize=(15,8))\nsns.boxplot(x=\"Cover_Type\", y=\"Hillshade_3pm\", data=train, hue=\"Cover_Type\")\n\n# Decoration\nplt.title(\"Box Plot of Hillshade_3pm by Cover_Type\", fontsize=22, color=\"#006400\")\nplt.legend(title=\"Cover\")\nplt.show()","ea6fa4cd":"# Draw Plot\nplt.figure(figsize=(16,10), dpi= 80)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 1, \"Horizontal_Distance_To_Fire_Points\"], shade=True, color=\"#4169E1\", label=\"Cover=1\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 2, \"Horizontal_Distance_To_Fire_Points\"], shade=True, color=\"#FF8C00\", label=\"Cover=2\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 3, \"Horizontal_Distance_To_Fire_Points\"], shade=True, color=\"#FF4500\", label=\"Cover=3\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 4, \"Horizontal_Distance_To_Fire_Points\"], shade=True, color=\"#BDB76B\", label=\"Cover=4\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 5, \"Horizontal_Distance_To_Fire_Points\"], shade=True, color=\"#8B4513\", label=\"Cover=5\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 6, \"Horizontal_Distance_To_Fire_Points\"], shade=True, color=\"#9400D3\", label=\"Cover=6\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 7, \"Horizontal_Distance_To_Fire_Points\"], shade=True, color=\"#006400\", label=\"Cover=7\", alpha=.7)\n\n# Decoration\nplt.title(\"The distribution of the attribute Horizontal_Distance_To_Fire_Points\", color=\"#006400\", fontsize=22)\nplt.legend()\nplt.show()","62ccec0f":"# Draw Plot\nplt.figure(figsize=(15,8))\nsns.boxplot(x=\"Cover_Type\", y=\"Horizontal_Distance_To_Fire_Points\", data=train, hue=\"Cover_Type\")\n\n# Decoration\nplt.title(\"Box Plot of Horizontal_Distance_To_Fire_Points by Cover_Type\", fontsize=22, color=\"#006400\")\nplt.legend(title=\"Cover\")\nplt.show()","9e2be701":"# Draw Plot\nplt.figure(figsize=(16,10), dpi= 80)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 1, \"Wilderness_Area1\"], shade=True, color=\"#4169E1\", label=\"Cover=1\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 2, \"Wilderness_Area1\"], shade=True, color=\"#FF8C00\", label=\"Cover=2\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 3, \"Wilderness_Area1\"], shade=True, color=\"#FF4500\", label=\"Cover=3\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 4, \"Wilderness_Area1\"], shade=True, color=\"#BDB76B\", label=\"Cover=4\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 5, \"Wilderness_Area1\"], shade=True, color=\"#8B4513\", label=\"Cover=5\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 6, \"Wilderness_Area1\"], shade=True, color=\"#9400D3\", label=\"Cover=6\", alpha=.7)\nsns.kdeplot(train.loc[train[\"Cover_Type\"] == 7, \"Wilderness_Area1\"], shade=True, color=\"#006400\", label=\"Cover=7\", alpha=.7)\n\n# Decoration\nplt.title(\"The distribution of the attribute Wilderness_Area1\", color=\"#006400\", fontsize=22)\nplt.legend()\nplt.show()","7b0afc57":"cols = train.columns\n\n#number of rows=r , number of columns=c\nr,c = train.shape\n\n#Create a new dataframe with r rows, one column for each encoded category, and target in the end\ndata = pd.DataFrame(index=np.arange(0, r),columns=['Wilderness_Area','Soil_Type','Cover_Type'])\n\n#Make an entry in 'data' for each r as category_id, target value\nfor i in range(0,r):\n    w=0;\n    s=0;\n    # Category1 range\n    for j in range(10,14):\n        if (train.iloc[i,j] == 1):\n            w=j-9  #category class\n            break\n    # Category2 range        \n    for k in range(14,54):\n        if (train.iloc[i,k] == 1):\n            s=k-13 #category class\n            break\n    #Make an entry in 'data' for each r as category_id, target value        \n    data.iloc[i]=[w,s,train.iloc[i,c-1]]\n\n#Plot for Category1    \nsns.countplot(x=\"Wilderness_Area\", hue=\"Cover_Type\", data=data)\nplt.show()\n#Plot for Category2\nplt.rc(\"figure\", figsize=(25, 10))\nsns.countplot(x=\"Soil_Type\", hue=\"Cover_Type\", data=data)\nplt.show()","ab6e3538":"ntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train[\"Cover_Type\"].to_frame()\n\n#Combine train and test sets\nconcat_data = pd.concat((train, test), sort=False).reset_index(drop=True)\n#Drop the target \"Cover_Type\" and Id columns\nconcat_data.drop([\"Cover_Type\"], axis=1, inplace=True)\nconcat_data.drop([\"Id\"], axis=1, inplace=True)\nprint(\"Total size is :\",concat_data.shape)","83522adc":"concat_data.head()","60e45c3c":"concat_data.tail()","9ce556f9":"concat_data.info()","74dce9d9":"# Count the null columns\nnull_columns = concat_data.columns[concat_data.isnull().any()]\nconcat_data[null_columns].isnull().sum()","a3394b02":"numeric_features = concat_data.select_dtypes(include=[np.number])\ncategoricals = concat_data.select_dtypes(exclude=[np.number])\n\nprint(f\"Numerical features: {numeric_features.shape}\")\nprint(f\"Categorical features: {categoricals.shape}\")","b6d1ea90":"concat_data.columns","1e856d32":"# we split the combined dataset to the original train and test sets\nTrainData = concat_data[:ntrain] \nTestData = concat_data[ntrain:]","4317d5c9":"TrainData.shape, TestData.shape","61890d77":"TrainData.info()","011a04b7":"TestData.info()","a0768547":"target = train[[\"Cover_Type\"]]","9251496e":"print(\"We make sure that both train and target sets have the same row number:\")\nprint(f\"Train: {TrainData.shape[0]} rows\")\nprint(f\"Target: {target.shape[0]} rows\")","18825491":"# Remove any duplicated column names\nconcat_data = concat_data.loc[:,~concat_data.columns.duplicated()]","ba0c3906":"x = TrainData\ny = np.array(target)","f3f2a6a5":"from sklearn.model_selection import train_test_split\n# Split the data set into train and test sets \nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)","44f754c8":"x_train.shape, x_test.shape, y_train.shape, y_test.shape","8072e9f7":"scaler = RobustScaler()\n\n# transform \"x_train\"\nx_train = scaler.fit_transform(x_train)\n# transform \"x_test\"\nx_test = scaler.transform(x_test)\n#Transform the test set\nX_test= scaler.transform(TestData)","8c364e1d":"# Baseline model of Logistic Regression with default parameters:\n\nlogistic_regression = linear_model.LogisticRegression()\nlogistic_regression_mod = logistic_regression.fit(x_train, y_train)\nprint(f\"Baseline Logistic Regression: {round(logistic_regression_mod.score(x_test, y_test), 3)}\")\n\npred_logistic_regression = logistic_regression_mod.predict(x_test)","0a3557b3":"cv_method = StratifiedKFold(n_splits=3, \n                            random_state=42\n                            )","ae39a6da":"# Cross validate Logistic Regression model\nscores_Logistic = cross_val_score(logistic_regression, x_train, y_train, cv =cv_method, n_jobs = 2, scoring = \"accuracy\")\n\nprint(f\"Scores(Cross validate) for Logistic Regression model:\\n{scores_Logistic}\")\nprint(f\"CrossValMeans: {round(scores_Logistic.mean(), 3)}\")\nprint(f\"CrossValStandard Deviation: {round(scores_Logistic.std(), 3)}\")","7bd028b6":"params_LR = {\"tol\": [0.0001,0.0002,0.0003],\n            \"C\": [0.01, 0.1, 1, 10, 100],\n            \"intercept_scaling\": [1, 2, 3, 4]\n              }","9e3bba1d":"GridSearchCV_LR = GridSearchCV(estimator=linear_model.LogisticRegression(), \n                                param_grid=params_LR, \n                                cv=cv_method,\n                                verbose=1, \n                                n_jobs=2,\n                                scoring=\"accuracy\", \n                                return_train_score=True\n                                )","d721ea79":"# Fit model with train data\nGridSearchCV_LR.fit(x_train, y_train);","36c454a7":"best_estimator_LR = GridSearchCV_LR.best_estimator_\nprint(f\"Best estimator for LR model:\\n{best_estimator_LR}\")","7e28b90b":"best_params_LR = GridSearchCV_LR.best_params_\nprint(f\"Best parameter values for LR model:\\n{best_params_LR}\")","5f1a3faa":"print(f\"Best score for LR model: {round(GridSearchCV_LR.best_score_, 3)}\")","c76320c7":"# Test with new parameter for LogisticRegression model\nlogistic_regression = linear_model.LogisticRegression(C=10, intercept_scaling=1, tol=0.0001, penalty=\"l2\", solver=\"liblinear\", random_state=42)\nlogistic_regression_mod = logistic_regression.fit(x_train, y_train)\npred_logistic_regression = logistic_regression_mod.predict(x_test)\n\nmse_logistic_regression = mean_squared_error(y_test, pred_logistic_regression)\nrmse_logistic_regression = np.sqrt(mean_squared_error(y_test, pred_logistic_regression))\nscore_logistic_regression_train = logistic_regression_mod.score(x_train, y_train)\nscore_logistic_regression_test = logistic_regression_mod.score(x_test, y_test)","47d647c5":"print(f\"Mean Square Error for Logistic Regression = {round(mse_logistic_regression, 3)}\")\nprint(f\"Root Mean Square Error for Logistic Regression = {round(rmse_logistic_regression, 3)}\")\nprint(f\"R^2(coefficient of determination) on training set = {round(score_logistic_regression_train, 3)}\")\nprint(f\"R^2(coefficient of determination) on testing set = {round(score_logistic_regression_test, 3)}\")","66dbdf3b":"print(\"Classification Report\")\nprint(classification_report(y_test, pred_logistic_regression))","ae424e38":"print(\"Confusion Matrix:\")\nprint(confusion_matrix(y_test, pred_logistic_regression))","dbba0416":"# Baseline model of K-Nearest Neighbors with default parameters:\n\nknn = KNeighborsClassifier()\nknn_mod = knn.fit(x_train, y_train)\nprint(f\"Baseline K-Nearest Neighbors: {round(knn_mod.score(x_test, y_test), 3)}\")\n\npred_knn = knn_mod.predict(x_test)","1b3b1114":"# Cross validate K-Nearest Neighbors model\nscores_knn = cross_val_score(knn, x_train, y_train, cv = cv_method, n_jobs = 2, scoring = \"accuracy\")\n\nprint(f\"Scores(Cross validate) for K-Nearest Neighbors model:\\n{scores_knn}\")\nprint(f\"CrossValMeans: {round(scores_knn.mean(), 3)}\")\nprint(f\"CrossValStandard Deviation: {round(scores_knn.std(), 3)}\")","1f2434e6":"params_knn = {\"leaf_size\": list(range(1,30)),\n              \"n_neighbors\": list(range(1,21)),\n              \"p\": [1,2]}","8eb02439":"GridSearchCV_knn = GridSearchCV(estimator=KNeighborsClassifier(), \n                                param_grid=params_knn, \n                                cv=cv_method,\n                                verbose=1, \n                                n_jobs=-1,\n                                scoring=\"accuracy\", \n                                return_train_score=True\n                                )","d38d504d":"# Fit model with train data\nGridSearchCV_knn.fit(x_train, y_train);","5c28a4df":"best_estimator_knn = GridSearchCV_knn.best_estimator_\nprint(f\"Best estimator for KNN model:\\n{best_estimator_knn}\")","9e9057d4":"best_params_knn = GridSearchCV_knn.best_params_\nprint(f\"Best parameter values:\\n{best_params_knn}\")","3845605a":"best_score_knn = GridSearchCV_knn.best_score_\nprint(f\"Best score for GNB model: {round(best_score_knn, 3)}\")","3c279fce":"# Test with new parameter for KNN model\nknn = KNeighborsClassifier(leaf_size=1, n_neighbors=1 , p=1)\nknn_mod = knn.fit(x_train, y_train)\npred_knn = knn_mod.predict(x_test)\n\nmse_knn = mean_squared_error(y_test, pred_knn)\nrmse_knn = np.sqrt(mean_squared_error(y_test, pred_knn))\nscore_knn_train = knn_mod.score(x_train, y_train)\nscore_knn_test = knn_mod.score(x_test, y_test)","00274fad":"print(f\"Mean Square Error for K_Nearest Neighbor  = {round(mse_knn, 3)}\")\nprint(f\"Root Mean Square Error for K_Nearest Neighbor = {round(rmse_knn, 3)}\")\nprint(f\"R^2(coefficient of determination) on training set = {round(score_knn_train, 3)}\")\nprint(f\"R^2(coefficient of determination) on testing set = {round(score_knn_test, 3)}\")","7877168a":"print(\"Classification Report\")\nprint(classification_report(y_test, pred_knn))","f4e51311":"print(\"Confusion Matrix:\")\nprint(confusion_matrix(y_test, pred_knn))","f32a947e":"gaussianNB = GaussianNB()\ngaussianNB_mod = gaussianNB.fit(x_train, y_train)\nprint(f\"Baseline Gaussin Navie Bayes: {round(gaussianNB_mod.score(x_test, y_test), 3)}\")\n\npred_gaussianNB = gaussianNB_mod.predict(x_test)","67f839cc":"# Cross validate Gaussian Naive Bayes model\nscores_GNB = cross_val_score(gaussianNB, x_train, y_train, cv = cv_method, n_jobs = 2, scoring = \"accuracy\")\n\nprint(f\"Scores(Cross validate) for Gaussian Naive Bayes model:\\n{scores_GNB}\")\nprint(f\"CrossValMeans: {round(scores_GNB.mean(), 3)}\")\nprint(f\"CrossValStandard Deviation: {round(scores_GNB.std(), 3)}\")","925cdebc":"params_GNB = {\"C\": [0.1,0.25,0.5,1],\n              \"gamma\": [0.1,0.5,0.8,1.0],\n              \"kernel\": [\"rbf\",\"linear\"]}","135777b8":"GridSearchCV_GNB = GridSearchCV(estimator=svm.SVC(), \n                                param_grid=params_GNB, \n                                cv=cv_method,\n                                verbose=1, \n                                n_jobs=-1,\n                                scoring=\"accuracy\", \n                                return_train_score=True\n                                )","b8a8288f":"# Fit model with train data\nGridSearchCV_GNB.fit(x_train, y_train);","069625c3":"best_estimator_GNB = GridSearchCV_GNB.best_estimator_\nprint(f\"Best estimator for DT model:\\n{best_estimator_GNB}\")","6481e658":"best_params_GNB = GridSearchCV_GNB.best_params_\nprint(f\"Best parameter values:\\n{best_params_GNB}\")","fba272c7":"best_score_GNB = GridSearchCV_GNB.best_score_\nprint(f\"Best score for GNB model: {round(best_score_GNB, 3)}\")","91f7b4cb":"mse_gaussianNB = mean_squared_error(y_test, pred_gaussianNB)\nrmse_gaussianNB = np.sqrt(mean_squared_error(y_test, pred_gaussianNB))\nscore_gaussianNB_train = gaussianNB_mod.score(x_train, y_train)\nscore_gaussianNB_test = gaussianNB_mod.score(x_test, y_test)","e394e228":"print(f\"Mean Square Error for Gaussian Naive Bayes = {round(mse_gaussianNB, 3)}\")\nprint(f\"Root Mean Square Error for Gaussian Naive Bayes = {round(rmse_gaussianNB, 3)}\")\nprint(f\"R^2(coefficient of determination) on training set = {round(score_gaussianNB_train, 3)}\")\nprint(f\"R^2(coefficient of determination) on testing set = {round(score_gaussianNB_test, 3)}\")","bde89056":"print(\"Classification Report\")\nprint(classification_report(y_test, pred_gaussianNB))","d5adc6a9":"print(\"Confusion Matrix:\")\nprint(confusion_matrix(y_test, pred_gaussianNB))","a457bf40":"svc = SVC()\nsvc_mod = svc.fit(x_train, y_train)\nprint(f\"Baseline Support Vector Machine: {round(svc_mod.score(x_test, y_test), 3)}\")\n\npred_svc = svc_mod.predict(x_test)","603e89e2":"# Cross validate SVC model\nscores_SVC = cross_val_score(svc, x_train, y_train, cv = cv_method, n_jobs = 2, scoring = \"accuracy\")\n\nprint(f\"Scores(Cross validate) for SVC model:\\n{scores_SVC}\")\nprint(f\"CrossValMeans: {round(scores_SVC.mean(), 3)}\")\nprint(f\"CrossValStandard Deviation: {round(scores_SVC.std(), 3)}\")","0a9f1abc":"params_SVC = {\"C\": [0.1, 1, 10, 100, 1000],  \n              \"gamma\": [1, 0.1, 0.01, 0.001, 0.0001], \n              \"kernel\": [\"rbf\"]\n              }","7a25b474":"GridSearchCV_SVC = GridSearchCV(estimator=SVC(), \n                                param_grid=params_SVC, \n                                cv=cv_method,\n                                verbose=1, \n                                n_jobs=-1,\n                                refit = True,\n                                scoring=\"accuracy\", \n                                return_train_score=True\n                                )","51e49c96":"# Fit model with train data\nGridSearchCV_SVC.fit(x_train, y_train);","c3de4c42":"best_estimator_SVC = GridSearchCV_SVC.best_estimator_\nprint(f\"Best estimator for SVC model:\\n{best_estimator_SVC}\")","30aa6c36":"best_params_SVC = GridSearchCV_SVC.best_params_\nprint(f\"Best parameter values:\\n{best_params_SVC}\")","57d2b3d0":"best_score_SVC = GridSearchCV_SVC.best_score_\nprint(f\"Best score for SVC model: {round(best_score_SVC, 3)}\")","d5124fa6":"# Test with new parameter for SVC model\nsvc = SVC(C=100, gamma=0.1, kernel=\"rbf\" , random_state=42)\nsvc_mod = svc.fit(x_train, y_train)\npred_svc = svc_mod.predict(x_test)\n\nmse_svc = mean_squared_error(y_test, pred_svc)\nrmse_svc = np.sqrt(mean_squared_error(y_test, pred_svc))\nscore_svc_train = svc_mod.score(x_train, y_train)\nscore_svc_test = svc_mod.score(x_test, y_test)","c3d79176":"print(f\"Mean Square Error for Linear Support Vector Machine = {round(mse_svc, 3)}\")\nprint(f\"Root Mean Square Error for Linear Support Vector Machine = {round(rmse_svc, 3)}\")\nprint(f\"R^2(coefficient of determination) on training set = {round(score_svc_train, 3)}\")\nprint(f\"R^2(coefficient of determination) on testing set = {round(score_svc_test, 3)}\")","45a1cf03":"print(\"Classification Report\")\nprint(classification_report(y_test, pred_svc))","8c55ef63":"print(\"Confusion Matrix:\")\nprint(confusion_matrix(y_test, pred_svc))","eac7e13b":"decision_tree = DecisionTreeClassifier(random_state= 42)\ndecision_tree_mod = decision_tree.fit(x_train, y_train)\nprint(f\"Baseline Decision Tree: {round(decision_tree_mod.score(x_test, y_test), 3)}\")\n\npred_decision_tree = decision_tree_mod.predict(x_test)","a0b5b7d9":"# Cross validate Decision Tree model\nscores_DT = cross_val_score(decision_tree, x_train, y_train, cv = cv_method, n_jobs = 2, scoring = \"accuracy\")\n\nprint(f\"Scores(Cross validate) for Decision Tree model:\\n{scores_DT}\")\nprint(f\"CrossValMeans: {round(scores_DT.mean(), 3)}\")\nprint(f\"CrossValStandard Deviation: {round(scores_DT.std(), 3)}\")","b5ea390a":"params_DT = {\"criterion\": [\"gini\", \"entropy\"],\n             \"max_depth\": [1, 2, 3, 4, 5, 6, 7, 8],\n             \"min_samples_split\": [2, 3]}","d2deb74c":"GridSearchCV_DT = GridSearchCV(estimator=DecisionTreeClassifier(), \n                                param_grid=params_DT, \n                                cv=cv_method,\n                                verbose=1, \n                                n_jobs=-1,\n                                scoring=\"accuracy\", \n                                return_train_score=True\n                                )","4a96a6c8":"# Fit model with train data\nGridSearchCV_DT.fit(x_train, y_train);","ca2f2f96":"best_estimator_DT = GridSearchCV_DT.best_estimator_\nprint(f\"Best estimator for DT model:\\n{best_estimator_DT}\")","8de1fcea":"best_params_DT = GridSearchCV_DT.best_params_\nprint(f\"Best parameter values:\\n{best_params_DT}\")","3b4d51f2":"best_score_DT = GridSearchCV_DT.best_score_\nprint(f\"Best score for DT model: {round(best_score_DT, 3)}\")","6a95369d":"decision_tree = DecisionTreeClassifier(criterion=\"gini\", max_depth=8, min_impurity_split=2, min_samples_leaf=0.4, random_state=42)\ndecision_tree_mod = decision_tree.fit(x_train, y_train)\npred_decision_tree = decision_tree_mod.predict(x_test)\n\nmse_decision_tree = mean_squared_error(y_test, pred_decision_tree)\nrmse_decision_tree = np.sqrt(mean_squared_error(y_test, pred_decision_tree))\nscore_decision_tree_train = decision_tree_mod.score(x_train, y_train)\nscore_decision_tree_test = decision_tree_mod.score(x_test, y_test)","611170aa":"print(f\"Mean Square Error for Decision Tree = {round(mse_decision_tree, 3)}\")\nprint(f\"Root Mean Square Error for Decision Tree = {round(rmse_decision_tree, 3)}\")\nprint(f\"R^2(coefficient of determination) on training set = {round(score_decision_tree_train, 3)}\")\nprint(f\"R^2(coefficient of determination) on testing set = {round(score_decision_tree_test, 3)}\")","00b8913e":"print(\"Classification Report\")\nprint(classification_report(y_test, pred_decision_tree))","6096320b":"print(\"Confusion Matrix:\")\nprint(confusion_matrix(y_test, pred_decision_tree))","b7148983":"random_forest = RandomForestClassifier()\nrandom_forest_mod = random_forest.fit(x_train, y_train)\nprint(f\"Baseline Random Forest: {round(random_forest_mod.score(x_test, y_test), 3)}\")\n\npred_random_forest = random_forest_mod.predict(x_test)","579292d2":"# Cross validate Random forest model\nscores_RF = cross_val_score(random_forest, x_train, y_train, cv = cv_method, n_jobs = 2, scoring = \"accuracy\")\n\nprint(f\"Scores(Cross validate) for Random forest model:\\n{scores_RF}\")\nprint(f\"CrossValMeans: {round(scores_RF.mean(), 3)}\")\nprint(f\"CrossValStandard Deviation: {round(scores_RF.std(), 3)}\")","55c357da":"params_RF = {\"min_samples_split\": [2, 6, 20],\n              \"min_samples_leaf\": [1, 4, 16],\n              \"n_estimators\" :[100,200,300,400],\n              \"criterion\": [\"gini\"]             \n              }","891f3e23":"GridSearchCV_RF = GridSearchCV(estimator=RandomForestClassifier(), \n                                param_grid=params_RF, \n                                cv=cv_method,\n                                verbose=1, \n                                n_jobs=2,\n                                scoring=\"accuracy\", \n                                return_train_score=True\n                                )","6bb41526":"# Fit model with train data\nGridSearchCV_RF.fit(x_train, y_train);","a0b7b0fd":"best_estimator_RF = GridSearchCV_RF.best_estimator_\nprint(f\"Best estimator for RF model:\\n{best_estimator_RF}\")","d6740bef":"best_params_RF = GridSearchCV_RF.best_params_\nprint(f\"Best parameter values for RF model:\\n{best_params_RF}\")","01b984cf":"best_score_RF = GridSearchCV_RF.best_score_\nprint(f\"Best score for RF model: {round(best_score_RF, 3)}\")","34ee7461":"random_forest = RandomForestClassifier(criterion=\"gini\", n_estimators=400, min_samples_leaf=1, min_samples_split=2, random_state=42)\nrandom_forest_mod = random_forest.fit(x_train, y_train)\npred_random_forest = random_forest_mod.predict(x_test)\n\nmse_random_forest = mean_squared_error(y_test, pred_random_forest)\nrmse_random_forest = np.sqrt(mean_squared_error(y_test, pred_random_forest))\nscore_random_forest_train = random_forest_mod.score(x_train, y_train)\nscore_random_forest_test = random_forest_mod.score(x_test, y_test)","f1ef7cc1":"print(f\"Mean Square Error for Random Forest = {round(mse_random_forest, 3)}\")\nprint(f\"Root Mean Square Error for Random Forest = {round(rmse_random_forest, 3)}\")\nprint(f\"R^2(coefficient of determination) on training set = {round(score_random_forest_train, 3)}\")\nprint(f\"R^2(coefficient of determination) on testing set = {round(score_random_forest_test, 3)}\")","1fe3b2cc":"print(\"Classification Report\")\nprint(classification_report(y_test, pred_random_forest))","a412fb77":"print(\"Confusion Matrix:\")\nprint(confusion_matrix(y_test, pred_random_forest))","87254296":"plt.figure(figsize=(16,10))\nviz = FeatureImportances(random_forest)\nviz.fit(x_train, y_train)\nviz.show()","5d8c81f7":"# Plot learning curve\ndef plot_learning_curve(estimator, title, x, y, ylim=None, cv=None,\n                        n_jobs=-1, train_sizes=np.linspace(.1, 1.0, 5)):\n    \n    plt.figure()\n    plt.title(title)\n    if ylim is not None:\n        plt.ylim(*ylim)\n        \n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, x, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.grid()\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1,\n                     color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"#80CBC4\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"#00897B\",\n             label=\"Cross-validation score\")\n\n    plt.legend(loc=\"best\")\n    return plt","34228a7f":"# Logistic Regression\nplot_learning_curve(GridSearchCV_LR.best_estimator_,title = \"Logistic Regressionr learning curve\", x = x_train, y = y_train, cv = cv_method);","2bff6c0b":"# KNN Classifier\nplot_learning_curve(GridSearchCV_knn.best_estimator_,title = \"KNN Classifier learning curve\", x = x_train, y = y_train, cv = cv_method);","66d8d019":"# Gaussian Naive Bayes\nplot_learning_curve(GridSearchCV_GNB.best_estimator_,title = \"Gaussian Naive Bayes learning curve\", x = x_train, y = y_train, cv = cv_method);","d6c32023":"# Support Vector Machine(SVM)\nplot_learning_curve(GridSearchCV_SVC.best_estimator_,title = \"Support Vector Machine(SVM) learning curve\", x = x_train, y = y_train, cv = cv_method);","edc4583e":"# Decision Tree\nplot_learning_curve(GridSearchCV_DT.best_estimator_,title = \"Decision Tree learning curve\", x = x_train, y = y_train, cv = cv_method);","e4bb51b0":"# Random Forest\nplot_learning_curve(GridSearchCV_RF.best_estimator_,title = \"Random Forest learning curve\", x = x_train, y = y_train, cv = cv_method);","190fc120":"results = pd.DataFrame({\n                        \"Model\": [\"Logistic Regression\",\n                                    \"KNN Classifier\",\n                                    \"Gaussian Naive Bayes\",\n                                    \"Support Vector Machine(SVM)\",\n                                    \"Decision Tree\",\n                                    \"Random Forest\"],\n                        \"Score\": [logistic_regression_mod.score(x_train, y_train),\n                                    knn_mod.score(x_train, y_train),\n                                    gaussianNB_mod.score(x_train, y_train),\n                                    svc_mod.score(x_train, y_train),\n                                    decision_tree_mod.score(x_train, y_train),\n                                    random_forest_mod.score(x_train, y_train)]\n                        })\nresult_df = results.sort_values(by=\"Score\", ascending=False)\nresult_df = result_df.set_index(\"Score\")\nresult_df.head(10)","23d8829e":"vote = VotingClassifier([(\"Random Forest\", random_forest_mod), (\"KNN Classifier\", knn_mod)])\nvote_mod = vote.fit(x_train, y_train.ravel())\nvote_pred = vote_mod.predict(x_test)\n\nprint(f\"Root Mean Square Error test for ENSEMBLE METHODS: {round(np.sqrt(mean_squared_error(y_test, vote_pred)), 3)}\")","4a7df828":"test[\"Id\"].value_counts()","6748e3c7":"Final_Submission_ForestCoverType = pd.DataFrame({\n        \"Id\": test[\"Id\"],\n        \"Cover_Type\": vote_mod.predict(X_test)})\n\nFinal_Submission_ForestCoverType.to_csv(\"Final_Submission_ForestCoverType.csv\", index=False)\nFinal_Submission_ForestCoverType.head(10)","a04ba4b6":"6. Attribute Horizontal_Distance_To_Roadways vs Cover_Type","84083952":"2. K-Nearest Neighbors Classifier","eb7cb92c":"### ENSEMBLE METHODS","b9484e27":"8.  Attribute Hillshade_Noon vs Cover_Type","d9f0b18b":"> Box plots are a great way to visualize the distribution, keeping the median, 25th 75th quartiles and the outliers in mind. ","83e755da":"### Import Necessary Libraries and Data Sets.","49431c91":"### The principal of this challenge is, Predict Cover_Type in the Roosevelt National Forest of northern Colorado. So get the info about the column of \"Cover_Type\":","9e39e152":"### Let's do analysis of data and Check which features could contribute to a high Cover_Type rate:","509bd41d":"#### As we can see in Top plot, each Cover_Type has same amount of records.","9b3d321b":"1. Attribute Elevation vs Cover_Type\n> Plotting the distribution of the attribute Elevation for each tree","59423a7a":"5. Random Forest","cae099ac":"# Building Machine Learning Models\n1. Logistic Regression","0d232aaa":"# Data Exploration\/ Analysis\/ Visualizing","18d6d822":"### Next step, we'll ckeck the important features that our model used to make predictions.","42a5d482":"### Plotting the learning curve","bb69b5dc":"### Missing Values","54b51a1a":"> Goal:\n* The goal of this competition is to predict Forest Cover Type. We will practice Classification Algorithms to achieve the lowest prediction error.","bc762008":"4. Decision Tree","68d67307":"* Combine train and test sets","80c5a643":"7.  Attribute Hillshade_9am vs Cover_Type","39540c3f":"9.  Attribute Hillshade_3pm vs Cover_Type","49fb833a":"11.  Attribute Wilderness_Area1 vs Cover_Type","8a807b4c":"# Predicting Forest Cover Type","2c98dd8c":"4. Attribute Horizontal_Distance_To_Hydrology vs Cover_Type","60c83792":"3. Gaussian Naive Bayes","41cbcf62":"5. Attribute Vertical_Distance_To_Hydrology vs Cover_Type","945710e1":"3. Attribute Slope vs Cover_Type","b7a1f627":"#### Submission to Kaggle","cdac9d00":"* Grouping Wilderness_Area and Soil_Type vs Cover_Type","bd7484ca":"10.  Attribute Horizontal_Distance_To_Fire_Points vs Cover_Type","9ae40ca0":"> As we can see the Elevation feature has an important weight, Three covers with numbers 4,5 and 7 have already specified.\n* Use catplot() to combine a countplot() and a FacetGrid. This allows grouping \"Cover_Type\" and \"Elevation\".","5572ad94":"### Lets check that test dataset has all the columns in train dataset except Cover_Type","00a38a5a":"*There are no missing values in this dataset. Let's go define numerical and categorical features.*","9a05309a":"# Which is the best Model ?","6545ed0a":"4. Support Vector Machine(SVM)","045a4eea":"> Scince we have outliers for scaling data using the mean and variance of the data is likely to not work very well. In this case, we can use robust_scale and RobustScaler as drop-in replacements instead.","9671606b":"### Data Exploration\/Analysis","c2012a4f":"### Thank you for opening this kernel!","64622cf1":"> To improve this score(0.704), we want to search the set of \"hyperparameters\" by using common approach \"Grid search\". GridSearch exhaustively searches through all possible combinations of hyperparameters during training the phase. Before we proceed further, we shall cover other cross-validation (CV) methods since tuning hyperparameters via grid search is usually cross-validated to avoid overfitting. we are using the StratifiedKFold function with a stratified 3-fold (n_splits = 3) cross-validation.","2d0b694f":"*Thank you for taking the time to read through my kernel.\nFor the moment, let me know if you found this notebook useful or you just liked it: I would really appreciate it!*","0397594d":"> PROJECT CONTENT:\n1. Import Necessary Libraries\n2. Data Exploration\/ Analysis\/ Visualizing\n3. Correlation & Correlation Matrix\n4. Predictive Modeling\n5. Confusion Matrix\n6. Precision and Recall\n7. Hyperparameters Tuning\n8. Ensemble Methods","02f8630e":"> Correlation & Correlation Matrix\n##### Let's have a look first at the correlation between numerical features and the target \"Cover_Type\", in order to have a first idea of the connections between features. Just by looking at the heatmap below we can see many dark colors, many features have high correlation with the target.","7437ead6":"* NOTE:For accelerating the running GridSearchCV we set: n-splits=3, n_jobs=2","cf26607f":"2. Attribute Aspect vs Cover_Type","2a38672f":"# Predictive Modeling:\n1. Logistic Regression\n2. KNN Classifier\n3. Gaussian Naive Bayes\n4. Support Vector Machine(SVM)\n5. Decision Tree\n6. Random Forest"}}