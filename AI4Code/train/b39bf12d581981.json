{"cell_type":{"05706806":"code","62ea18b4":"code","27f13e2f":"code","3c995d7a":"code","0c11b42c":"code","2fd6d404":"code","af28b0af":"code","c56a7406":"code","322dd14d":"code","0fabf335":"code","cd1c5e3b":"code","f514ead3":"code","9b2e57d4":"code","a62a7c33":"code","aa8833a4":"code","2e82c18f":"code","5d4599d5":"code","1c756a56":"code","ff291125":"code","e068a8d0":"code","c674bd8a":"code","007b7f3f":"code","60ec8c49":"code","30ee5412":"code","42b8cbbb":"code","16816043":"code","43f57d8f":"code","f6f647d3":"code","fb6e4c9a":"code","8807ae04":"code","c556301d":"code","27bcda0b":"markdown","b7a0dfe9":"markdown","7c4e521b":"markdown","a4dce823":"markdown","de40f85c":"markdown"},"source":{"05706806":"import gc\nimport sys\nimport warnings\nfrom pathlib import Path\n\nimport os\n\nimport ipywidgets as widgets\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom tqdm import tqdm\n#warnings.simplefilter(\"ignore\")","62ea18b4":"# Helper function to unpack json found in daily data\ndef unpack_json(json_str):\n    return np.nan if pd.isna(json_str) else pd.read_json(json_str)\n\n# helper function to add is_played column\ndef is_played_games(row):\n    if pd.isnull(row['gameDate']):\n        is_played = 0\n    else:\n        is_played = 1\n    return is_played\n\n# helper function to add bmi column\ndef BMI(row):\n    '''\n    Calculate BMI for players.csv\n    '''\n    height_in = row['heightInches']\n    mass_lb = row['weight']\n    bmi = (mass_lb\/height_in**2)*703\n    \n    return bmi","27f13e2f":"# Helper function to unpack json found in daily data\ndef unpack_json(json_str):\n    return np.nan if pd.isna(json_str) else pd.read_json(json_str)\n\n# helper function to add is_played column\ndef is_played_games(row):\n    if pd.isnull(row['gameDate']):\n        is_played = 0\n    else:\n        is_played = 1\n    return is_played","3c995d7a":"# def age_now(row):\n#     '''\n#     Calculate Age (in years) at Given Day\n#     [modified]\n#     '''\n#     date = row['gameDate']\n#     given_day = pd.to_datetime(date)\n#     dob = row[\"DOB\"] #should be datetime formated already\n#     age = (given_day - dob).days\/365\n    \n#     return age\n\ndef age_now(row):\n    '''\n    Calculate Age (in days) at Given Day\n    '''\n    date = row['date']\n    given_day = pd.to_datetime(date,format='%Y%m%d')\n    dob = row[\"DOB\"] #should be datetime formated already\n    age = (given_day - dob).days\/365\n    \n    return age\n\ndef age_now_d(row):\n    '''\n    Calculate Age (in days) from date_playerId\n    '''\n    date = row['date_playerId'].split('_')[0]\n    given_day = pd.to_datetime(date,format='%Y%m%d')\n    dob = row[\"DOB\"] #should be datetime formated already\n    age = (given_day - dob).days\/365\n    \n    return age\n\ndef mlbDebutDays_now(row):\n    '''\n    Calculate mlbDebutDays at Given Day\n    '''\n    date = row['date']\n    given_day = pd.to_datetime(date,format='%Y%m%d')\n    dob = pd.to_datetime(row[\"mlbDebutDate\"])\n    mlbDebutDays = (given_day - dob).days\n    \n    return mlbDebutDays","0c11b42c":"def evalYear(row):\n    year = pd.to_datetime(row.date, format='%Y%m%d').year\n    return year","2fd6d404":"def player_data_process(dataset):\n    '''\n    This fucntion process the players.csv\n    New Columns : age, bmi\n    '''\n    temp = dataset.copy()\n    temp[\"DOB\"] = pd.to_datetime(temp[\"DOB\"]) # death of birth\n    temp['bmi'] = temp.apply(BMI,axis=1)\n    \n    return temp","af28b0af":"test = pd.read_csv(\"..\/input\/mlb-player-digital-engagement-forecasting\/example_test.csv\")\nplayers = pd.read_csv(\"..\/input\/mlb-player-digital-engagement-forecasting\/players.csv\")\nmean_target_by_player = pd.read_csv(\"..\/input\/derived-data\/mean_target_by_player.csv\")\nrosters = pd.read_pickle('..\/input\/mlb-pdef-train-dataset\/rosters_train.pkl')","c56a7406":"rosters","322dd14d":"import tensorflow as tf\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping\nfrom keras import optimizers","0fabf335":"def make_model(n_in):\n    inp = L.Input(name=\"inputs\", shape=(n_in,))\n    x = L.Dense(50, activation=\"relu\", name=\"d3\")(inp)\n#     x = L.Dropout(0.2)(x)\n    x = L.Dense(50, activation=\"relu\", name=\"d4\")(x)\n#     x = L.Dropout(0.2)(x)\n    preds = L.Dense(4, activation=\"linear\", name=\"preds\")(x)\n    \n    model = M.Model(inp, preds, name=\"ANN\")\n    model.compile(loss=\"mean_absolute_error\", optimizer=optimizers.Adamax(lr=0.001, decay=1e-3))\n    return model","cd1c5e3b":"model = make_model(7)","f514ead3":"# Loads the weights\nmodel.load_weights(\"..\/input\/weights\/model_ANN2.cpkt\")","9b2e57d4":"print(model.summary())","a62a7c33":"FECOLS = ['t1_m','t2_m','t3_m','t4_m','is_played','age','bmi'] #feature columns \nTGTCOLS = ['target1', 'target2', 'target3', 'target4']  #target columns","aa8833a4":"def add_date_playerid(row):\n\n    given_day = pd.to_datetime(row['date'],format='%Y%m%d') #taking timestamp of the given day\n    next_day = given_day + pd.DateOffset(1) # next date\n                                   \n    next_day = str(next_day).split(\" \")[0].replace(\"-\",\"\")\n    playerId = row['playerId']\n    date_playerId = next_day+\"_\"+str(playerId)\n\n    return date_playerId","2e82c18f":"#not used here, might be removed \ndef process_prediction(test_df,sub_mode=True):\n    append = False #flag for append to new_df\n    \n    for i in range(test_df.shape[0]):\n        #test dataframe that is provided for submission has no formal date column\n        if sub_mode:\n            date = test_df.index[i]\n        else:\n            date = test_df.date.iloc[i] #taking the date where we are expanding json\n        \n        roster = unpack_json(test_df.rosters.iloc[i])\n        roster.insert(0,'date',date) #inserting the given date\n        \n        if append==False:\n            append= True\n            new_df = roster\n        else:\n            new_df = new_df.append(roster,ignore_index=True)\n            \n    \n    new_df['date_playerId'] = new_df.apply(add_date_playerid,axis=1)\n    return new_df","5d4599d5":"#processing players data\nplayers_processed = player_data_process(players)","1c756a56":"# tempx = process_prediction(test,sub_mode=False)\n# tempx","ff291125":"# tempx[tempx.is_played==0]\n# tempx[tempx.playerId==596049]","e068a8d0":"# X = tempx[FECOLS].values\n# preds = model.predict(X)","c674bd8a":"# tempx[TGTCOLS] = np.clip(preds,0,100)\n# tempx","007b7f3f":"# gc.collect()","60ec8c49":"# #to debug submission process\n# sample_pred_temp = pd.DataFrame(columns=['date_playerId', 'target1', 'target2', 'target3', 'target4'])\n# test_temp = pd.DataFrame(columns=['date_playerId', 'playerId', 'gameDate', 'teamId', 'statusCode',\n#        'status', 'bmi', 'DOB', 'age', 'is_played', 'Unnamed: 0', 't1_m',\n#        't2_m', 't3_m', 't4_m'])","30ee5412":"import mlb\nenv = mlb.make_env() # initialize the environment\niter_test = env.iter_test() # iterator which loops over each date in test set","42b8cbbb":"for (test_df, sample_prediction_df) in iter_test:\n    \n    sample_prediction_df = sample_prediction_df.reset_index(drop=True)\n    sample_prediction_df.drop(TGTCOLS,axis=1,inplace=True)\n    sample_prediction_df['playerId'] = sample_prediction_df['date_playerId']\\\n                                        .map(lambda x: int(x.split('_')[1]))\n    \n    \n    # Dealing with missing values\n    if test_df['rosters'].iloc[0] == test_df['rosters'].iloc[0]:\n        test_rosters = pd.DataFrame(eval(test_df['rosters'].iloc[0]))\n    else:\n        test_rosters = pd.DataFrame({'playerId': sample_prediction_df['playerId']})\n        for col in rosters.columns:\n            if col == 'playerId': continue\n            test_rosters[col] = np.nan\n    \n    #test_df extention here (added from rosters)\n    test = sample_prediction_df.copy()\n    test = test.merge(players_processed[['playerId','bmi','DOB']],on='playerId',how='left')\n    test = test.merge(test_rosters, on='playerId', how='left')\n    test['is_played'] = test.apply(is_played_games,axis=1)\n    test['age'] = test.apply(age_now_d,axis=1)\n    test = test.merge(mean_target_by_player,how='inner', left_on=[\"playerId\"],right_on=[\"playerId\"]) #or (how='left')\n     \n    \n    #making predictions : preds\n    X = test[FECOLS].fillna(0.).values #extracting all features\n    preds = model.predict(X) #model prediction\n    \n#     #to debug\n#     sample_pred_temp = sample_pred_temp.append(sample_prediction_df)#,ignore_index=True)\n#     test_temp = test_temp.append(test) #ignore_index=True)\n#     #\n    \n    #merging prediction to submission dataframe\n    sample_prediction_df[TGTCOLS] = np.clip(preds,0,100)\n    sample_prediction_df = sample_prediction_df.fillna(0.)\n    \n    del sample_prediction_df['playerId']\n   \n    env.predict(sample_prediction_df)\n    ","16816043":"sample_prediction_df","43f57d8f":"# sample_pred_temp","f6f647d3":"# test_temp","fb6e4c9a":"# # to check if any date_playerId is missing in submission\n# list(test_temp.date_playerId)==list(sample_pred_temp.date_playerId)","8807ae04":"# # to reset env.predict() to work\n# example_sample_submission = pd.read_csv(\"..\/input\/mlb-player-digital-engagement-forecasting\/example_sample_submission.csv\")\n# example_sample_submission\n# env.predict(example_sample_submission) ","c556301d":"# # to check if any date_playerId is missing in submission\n# list(example_sample_submission.date_playerId)==list(sample_pred_temp.date_playerId)","27bcda0b":"## Loading Data","b7a0dfe9":"## Submission","7c4e521b":"## Loading Model","a4dce823":"## Prediction Task","de40f85c":" In this notebook only inference and submission task will be performed."}}