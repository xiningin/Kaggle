{"cell_type":{"c738879b":"code","25a556da":"code","a5283e9f":"code","55340443":"code","b99dd243":"code","0511df53":"code","76a959a6":"code","319ee9be":"code","b4784acb":"code","f286e636":"code","067bdf6b":"code","ebdcd767":"code","20f81c03":"code","690db911":"markdown","3d72f873":"markdown","f7ca1a8e":"markdown","9f834c8b":"markdown","97adfe93":"markdown","c195ea60":"markdown"},"source":{"c738879b":"\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow\n\nfrom PIL import Image\nfrom keras import layers, models, optimizers\nfrom keras.preprocessing.image import ImageDataGenerator\n\n","25a556da":"def display_grid(data, path, w =10, h =10, columns = 4, rows = 5):\n    fig=plt.figure(figsize=(12, 8))\n    for i in range(1, columns*rows +1):\n        file = data[i]\n        file = os.path.join(path, file)\n        img = Image.open(file)\n        fig.add_subplot(rows, columns, i)\n        imshow(img)\n    plt.show()\n    \ndef plot_results(history):\n    acc = history.history['acc']\n    val_acc = history.history['val_acc']\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n\n    epochs = range(1, len(acc) + 1)\n\n    plt.figure(figsize = (24, 6))\n    plt.subplot(1,2,1)\n    plt.plot(epochs, acc, 'b', label = 'Training Accuracy')\n    plt.plot(epochs, val_acc, 'r', label = 'Validation Accuracy')\n    plt.grid(True)\n    plt.legend()\n    plt.xlabel('Epoch')\n    \n\n\n    plt.subplot(1,2,2)\n    plt.plot(epochs, loss, 'b', label = 'Training Loss')\n    plt.plot(epochs, val_loss, 'r', label = 'Validation Loss')\n    plt.grid(True)\n    plt.legend()\n    plt.xlabel('Epoch')\n    plt.show()\n \ndef get_best_epcoh(history):\n    valid_acc = history.history['val_acc']\n    best_epoch = valid_acc.index(max(valid_acc)) + 1\n    best_acc =  max(valid_acc)\n    print('Best Validation Accuracy Score {:0.5f}, is for epoch {}'.format( best_acc, best_epoch))\n    return best_epoch","a5283e9f":"base_dir = '\/kaggle\/input\/cars-wagonr-swift\/data\/'\ntrain_swift = os.listdir(os.path.join(base_dir, 'train\/swift') )\nval_swift  = os.listdir(os.path.join(base_dir, 'validation\/swift') )\ntest_swift  =  os.listdir(os.path.join(base_dir, 'test\/swift') )\nprint('Instances for Class Swift: Train {}, Validation {} Test {}'.format(len(train_swift), len(val_swift), len(test_swift)))","55340443":"#Sanity checks: no overlaping bteween train test and validation sets\nval_train = [x for x in val_swift if x in train_swift]\ntest_train = [x for x in test_swift if x in train_swift]\nval_test =  [x for x in test_swift if x in val_swift]\nlen(val_train), len(test_train), len(val_test)","b99dd243":"display_grid(data = train_swift, path = os.path.join(base_dir, 'train\/swift'), w =10, h =10, columns = 8, rows = 5)","0511df53":"train_wr = os.listdir(os.path.join(base_dir, 'train\/wagonr') )\nval_wr  = os.listdir(os.path.join(base_dir, 'validation\/wagonr') )\ntest_wr  =  os.listdir(os.path.join(base_dir, 'test\/wagonr') )\nprint('Instances for Class Wagonr: Train {}, Validation {} Test {}'.format(len(train_swift), len(val_swift), len(test_swift)))","76a959a6":"#Sanity checks: no overlaping bteween train test and validation sets\nval_train = [x for x in val_wr if x in train_wr]\ntest_train = [x for x in test_wr if x in train_wr]\nval_test =  [x for x in test_wr if x in val_wr]\nlen(val_train), len(test_train), len(val_test)","319ee9be":"display_grid(data = train_wr, path = os.path.join(base_dir, 'train\/wagonr'), w =10, h =10, columns = 8, rows = 5)","b4784acb":"def build_cnn(display_summary =False):\n    model = models.Sequential()\n    model.add( layers.Conv2D(32, (3,3),  activation= 'relu', input_shape = (150, 150, 3)) )\n    model.add(layers.MaxPooling2D((2,2)))\n\n    model.add( layers.Conv2D(64, (3,3),  activation= 'relu') )\n    model.add(layers.MaxPooling2D((2,2)))\n\n    model.add( layers.Conv2D(128, (3,3),  activation= 'relu') )\n    model.add(layers.MaxPooling2D((2,2)))\n\n    model.add( layers.Conv2D(128, (3,3),  activation= 'relu') )\n    model.add(layers.MaxPooling2D((2,2)))\n\n    model.add(layers.Flatten())\n    model.add(layers.Dense(512, activation= 'relu'))\n    model.add(layers.Dense(1, activation= 'sigmoid'))\n\n    model.compile(loss = 'binary_crossentropy',\n                  optimizer = optimizers.RMSprop(lr = 1e-4),\n                  metrics = ['acc']\n                  )\n    if display_summary:\n       model.summary()\n    return model","f286e636":"\ntrain_dir = os.path.join(base_dir, 'train')\nvalidation_dir = os.path.join(base_dir, 'validation' )\n\n\ntrain_datagen = ImageDataGenerator(rescale= 1.\/255)\ntest_datagen = ImageDataGenerator(rescale= 1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(\n                                                   train_dir,              \n                                                   target_size = (150,150), #Resize images to 150 X 150\n                                                   batch_size  = 20,\n                                                   class_mode = 'binary'\n                                                   )\nvalidation_generator = test_datagen.flow_from_directory(\n                                                   validation_dir,              \n                                                   target_size = (150,150), #Resize images to 150 X 150\n                                                   batch_size  = 20,\n                                                   class_mode = 'binary'\n                                                   )\n\nfor data_batch, labels_batch, in train_generator:\n    print('Data Batch shape:', data_batch.shape)\n    print('Labels Batch shape:', labels_batch.shape)\n    break","067bdf6b":"model = build_cnn(display_summary = True)\n","ebdcd767":"%%time\nhistory = model.fit_generator(\n                            train_generator,\n                            steps_per_epoch = 120,  # = num_train_images\/batch size(2400\/20)\n                            epochs = 50,\n                            validation_data = validation_generator,\n                            validation_steps = 40  # = num_valid_images\/batch_size\n                             )\nmodel.save('cat_and_dogs.h5')","20f81c03":"plot_results(history)\nbest_epoch =get_best_epcoh(history)","690db911":"## Class Swift","3d72f873":"## Class Wagonr","f7ca1a8e":"### Fit Model","9f834c8b":"## Train using Convolution: ","97adfe93":"### Data Preprocessing","c195ea60":"### Train Vs Validation Accuracy\/Loss"}}