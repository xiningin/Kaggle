{"cell_type":{"1de8397e":"code","db6f1e36":"code","49cdecc9":"code","89fa7471":"code","965299ce":"code","23b44836":"code","446056fa":"code","13bd8f11":"code","35571095":"code","26fe96f0":"code","f82d47fc":"code","dfb67a22":"code","fefc1cf9":"code","d716637e":"code","ab6a2667":"code","ff5898b5":"code","195cbbf2":"code","1d6579c0":"code","5f58924d":"code","ce7df3fa":"code","12c25044":"code","5d9360fc":"code","2c7e4afa":"code","83ca80f1":"code","783ec023":"code","7ff3d919":"code","8010bfce":"code","c91deb35":"code","4a131f0d":"code","6e107fa2":"code","5bac794d":"code","0cbb05a9":"code","a29dba62":"code","2eecbcf2":"code","30eb7640":"code","7cd9571d":"code","a4a787f8":"code","852f7ed6":"code","d637c81a":"code","39a8cfc9":"code","1a0c257e":"code","2f84f493":"code","cc0bfb0a":"code","2516cbef":"code","579b411d":"code","668bfcff":"code","808351ff":"code","e2091c89":"code","a7833a74":"code","65f49aba":"code","ad2663db":"code","858e49ca":"code","e2779183":"code","eea81cc2":"code","5a7405dc":"code","53a4f9d2":"code","89457b6f":"code","4761208c":"code","71debecc":"code","e9b570a3":"code","ecf9436e":"code","694fd608":"code","983338b9":"code","2da0e20b":"code","2b6c5586":"code","329a20d0":"code","6fd24ab7":"code","bacceb1b":"code","d9d6c7bb":"code","ab644633":"code","b65d14a3":"code","e1c597fe":"code","4fcb9159":"code","9d414b86":"code","fbbfa7e4":"markdown","ebe4f253":"markdown","dff461e4":"markdown","d603a08d":"markdown","dddeaadb":"markdown","dc3f6a3e":"markdown","a9389d8b":"markdown","f4cb9a31":"markdown","757a80e5":"markdown","c0052500":"markdown","bc28497c":"markdown","a543ef09":"markdown","13058a9d":"markdown","cab5eeb3":"markdown","9f4e3c9a":"markdown","328f867f":"markdown","647dbd98":"markdown","766e4003":"markdown","aaddef53":"markdown","c2f86218":"markdown","8a0045ed":"markdown","5b83bd84":"markdown","277ff535":"markdown","e243b653":"markdown","1132b91d":"markdown","7878ecbb":"markdown","02c8f4a7":"markdown","c01b3c8f":"markdown","8eec0a95":"markdown","57787d69":"markdown","fd4e2306":"markdown","f7c70987":"markdown"},"source":{"1de8397e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\nimport sklearn.metrics as sklm\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom scipy.stats import mannwhitneyu, pearsonr, gmean\nimport geopy.distance\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom matplotlib.ticker import PercentFormatter\nimport geopandas as gpd\nimport geoplot\nimport seaborn as sns\nimport statsmodels.api as sm\nfrom sklearn.model_selection import cross_val_score, GridSearchCV, KFold, RandomizedSearchCV, train_test_split, RandomizedSearchCV\npd.options.mode.chained_assignment = None","db6f1e36":"berlin = pd.read_csv('..\/input\/airbnb-berlin-july-2021\/listings_berlin.csv')","49cdecc9":"berlin","89fa7471":"berlin['last_review'] = berlin['last_review'].str.slice(stop=4).astype('float64')","965299ce":"print('Missing values for number of reviews: ' + str(berlin['number_of_reviews'].isna().sum()))\nprint('Missing values for last review: ' + str(berlin['last_review'].isna().sum()))\ndate_isna = berlin[berlin['number_of_reviews'] == 0]\nprint('Missing values for last review and zero total reviews: ' + str(date_isna['last_review'].isna().sum()))","23b44836":"berlin","446056fa":"centre = (52.5251, 13.3694) #Berlin central station","13bd8f11":"berlin['dist_to_centre'] = np.nan\nfor i in berlin.index:\n    berlin['dist_to_centre'][i] = geopy.distance.distance(centre, (berlin['latitude'][i], berlin['longitude'][i])).km","35571095":"berlin['neighbourhood_group'].value_counts()","26fe96f0":"berlin['neighbourhood'].value_counts()","f82d47fc":"# districts that belonged to East Berlin\neast = ['Treptow - K\u00f6penick', 'Marzahn - Hellersdorf', 'Lichtenberg', 'Pankow', 'Mitte']","dfb67a22":"berlin['region'] = 'west'\nfor e in east:\n    berlin['region'][berlin['neighbourhood_group'] == e] = 'east'\nberlin['region'][berlin['neighbourhood_group'] == 'Friedrichshain-Kreuzberg'] = 'Friedrichshain-Kreuzberg'","fefc1cf9":"# neighbourhoods that belong to Friedrichshain\nfriedrichshain = ['Karl-Marx-Allee-S\u00fcd', 'Karl-Marx-Allee-Nord', 'Frankfurter Allee Nord', 'Frankfurter Allee S\u00fcd FK']","d716637e":"# disentangling Friedrichshain-Kreuzberg\nfor f in friedrichshain:\n    berlin['region'][berlin['neighbourhood'] == f] = 'east'\n    berlin['neighbourhood_group'][berlin['neighbourhood'] == f] = 'Friedrichshain'\nberlin['region'][berlin['neighbourhood_group'] == 'Friedrichshain-Kreuzberg'] = 'west'\nberlin['neighbourhood_group'][berlin['neighbourhood_group'] == 'Friedrichshain-Kreuzberg'] = 'Kreuzberg'","ab6a2667":"berlin['neighbourhood_group'].unique()","ff5898b5":"berlin['neighbourhood_group'].value_counts()","195cbbf2":"berlin['neighbourhood'].value_counts()","1d6579c0":"berlin['n_missing'] = berlin.isna().sum(axis=1)","5f58924d":"berlin[berlin['price'] <= 0]","ce7df3fa":"berlin[berlin['price'] >= 300]","12c25044":"berlin['price'].isna().sum()","5d9360fc":"berlin = berlin[berlin['price'] <= 300]\nberlin = berlin[berlin['price'] > 0]","2c7e4afa":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfig.suptitle('calculated_host_listings_count')\nax1.scatter(berlin['calculated_host_listings_count'], berlin['price'])\nax2.hist(berlin['calculated_host_listings_count'], bins = 50)\nplt.show()","83ca80f1":"pearsonr(berlin['calculated_host_listings_count'], berlin['price'])","783ec023":"last_rev = pd.DataFrame()\nlast_rev['lr'] = berlin['last_review']\nlast_rev['p'] = berlin['price']\nlast_rev = last_rev.dropna()","7ff3d919":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfig.suptitle('last_review')\nax1.scatter(last_rev['lr'], last_rev['p'])\nax2.hist(berlin['last_review'], bins = 50)\nplt.show()","8010bfce":"pearsonr(last_rev['lr'], last_rev['p'])","c91deb35":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfig.suptitle('dist_to_centre')\nax1.scatter(berlin['dist_to_centre'], berlin['price'])\nax2.hist(berlin['dist_to_centre'], bins = 50)\nplt.show()","4a131f0d":"pearsonr(berlin['dist_to_centre'], berlin['price'])","6e107fa2":"fig, ax = plt.subplots(figsize=(15,10))\nsns.violinplot(x=\"n_missing\", y=\"price\", data=berlin)\nplt.show()","5bac794d":"fig, ax = plt.subplots(figsize=(30,10))\nsns.violinplot(x=\"neighbourhood_group\", y=\"price\", data=berlin)\nplt.show()","0cbb05a9":"fig, ax = plt.subplots(figsize=(15,10))\nsns.violinplot(x=\"room_type\", y=\"price\", data=berlin)\nplt.show()","a29dba62":"plt.hist(berlin['price'], bins = 50)\nplt.show()","2eecbcf2":"berlin_gjsn = gpd.read_file('..\/input\/airbnb-berlin-july-2021\/neighbourhoods.geojson')","30eb7640":"geoplot.polyplot(berlin_gjsn, facecolor = 'grey', figsize=(20, 20)) \nplt.scatter(berlin['longitude'], berlin['latitude'], c=berlin['price'], cmap = 'viridis')","7cd9571d":"geoplot.polyplot(berlin_gjsn, facecolor = 'grey', figsize=(20, 20))\nplt.scatter(berlin['longitude'], berlin['latitude'], c=np.log(berlin['price']), cmap = 'viridis')","a4a787f8":"east_berlin = berlin[berlin['region'] == 'east']\nwest_berlin = berlin[berlin['region'] == 'west']","852f7ed6":"fig, ax = plt.subplots(figsize=(15,10))\nplt.hist(east_berlin['price'], bins = 40, alpha=0.5, color = 'purple', weights=np.ones(len(east_berlin)) \/ len(east_berlin))\nplt.hist(west_berlin['price'], bins = 40, alpha=0.5, color = 'blue', weights=np.ones(len(west_berlin)) \/ len(west_berlin))\nplt.gca().yaxis.set_major_formatter(PercentFormatter(1))\nplt.show()","d637c81a":"print('Median East-Berlin: ' + str(east_berlin['price'].median()))\nprint('Mean East-Berlin: ' + str(east_berlin['price'].mean()))\nprint('Geometric mean East-Berlin: ' +str(gmean(east_berlin['price'])))\nprint('Std East-Berlin: ' + str(east_berlin['price'].std()))\nprint('Median West-Berlin: ' + str(west_berlin['price'].median()))\nprint('Mean West-Berlin: ' + str(west_berlin['price'].mean()))\nprint('Geometric mean West-Berlin: ' +str(gmean(west_berlin['price'])))\nprint('Std West-Berlin: ' + str(west_berlin['price'].std()))","39a8cfc9":"mannwhitneyu(west_berlin['price'], east_berlin['price'],alternative='two-sided')","1a0c257e":"fig, ax = plt.subplots(figsize=(15,10))\nplt.hist(east_berlin['dist_to_centre'], bins = 25, alpha=0.5, color = 'purple', weights=np.ones(len(east_berlin)) \/ len(east_berlin))\nplt.hist(west_berlin['dist_to_centre'], bins = 25, alpha=0.5, color = 'blue', weights=np.ones(len(west_berlin)) \/ len(west_berlin))\nplt.gca().yaxis.set_major_formatter(PercentFormatter(1))\nplt.show()","2f84f493":"mannwhitneyu(west_berlin['dist_to_centre'], east_berlin['dist_to_centre'],alternative='greater')","cc0bfb0a":"berlin_y = berlin.pop('price')\nberlin = berlin[['minimum_nights', 'latitude', 'longitude', 'reviews_per_month','neighbourhood_group', 'number_of_reviews', 'availability_365', 'room_type', \n                 'dist_to_centre', 'n_missing', 'region', 'calculated_host_listings_count','last_review']] ","2516cbef":"berlin_f_analysis = berlin[['dist_to_centre', 'room_type', 'region','minimum_nights','availability_365', 'calculated_host_listings_count']]","579b411d":"berlin_f_analysis = pd.get_dummies(berlin_f_analysis, columns = ['room_type', 'region'])\nprint(berlin.shape)","668bfcff":"berlin_f_analysis['y'] = berlin_y # assumption of normality is technically not met\nberlin_f_analysis = berlin_f_analysis.dropna()\nberlin_f_analysis_y = berlin_f_analysis.pop('y')","808351ff":"berlin_f_analysis = berlin_f_analysis.drop(['region_west'], axis = 1)","e2091c89":"berlin_f_analysis = sm.tools.add_constant(berlin_f_analysis)","a7833a74":"sm_lin = sm.OLS(berlin_f_analysis_y, berlin_f_analysis).fit()","65f49aba":"print(sm_lin.summary())","ad2663db":"berlin = pd.get_dummies(berlin, columns = ['room_type', 'neighbourhood_group','n_missing', 'region']) # , 'cluster''neighbourhood', 'n_missing', ","858e49ca":"X_train, X_test, y_train, y_test = train_test_split(berlin, berlin_y, test_size=0.30, random_state=420)","e2779183":"simple_imputer = SimpleImputer() \nX_train = pd.DataFrame(simple_imputer.fit_transform(X_train), columns = X_train.columns, index=X_train.index)\nX_test = pd.DataFrame(simple_imputer.fit_transform(X_test), columns = X_test.columns, index=X_test.index)","eea81cc2":"lin_mod = sm.OLS(y_train, X_train).fit()\nprint(lin_mod.summary())\nlin_pred = lin_mod.predict(X_train)\nlin_pred_t = lin_mod.predict(X_test)","5a7405dc":"print('RMSE train: ' + str(math.sqrt(sklm.mean_squared_error(lin_pred, y_train))))\nprint('RMSE test: ' + str(math.sqrt(sklm.mean_squared_error(lin_pred_t, y_test))))","53a4f9d2":"berlin_y.std()","89457b6f":"knn_model = KNeighborsRegressor(n_neighbors=20)\nknn_model.fit(X_train, y_train)\nknn_pred = knn_model.predict(X_train)\nknn_pred_t = knn_model.predict(X_test)\nprint('RMSE train: ' + str(math.sqrt(sklm.mean_squared_error(knn_pred, y_train))))\nprint('RMSE test: ' + str(math.sqrt(sklm.mean_squared_error(knn_pred_t, y_test))))","4761208c":"scl = StandardScaler() # worked better than MinMaxScaler\nX_train = pd.DataFrame(scl.fit_transform(X_train), columns=X_train.columns, index=X_train.index)\nX_test =  pd.DataFrame(scl.transform(X_test), columns=X_test.columns, index=X_test.index)","71debecc":"knn_model = KNeighborsRegressor(n_neighbors=15)","e9b570a3":"# I came up with this selection of features by trying different combinations so there is probably a combination out there that performs better\nselected_feat = ['latitude', 'longitude', 'room_type_Entire home\/apt', 'room_type_Hotel room', 'room_type_Private room', 'room_type_Shared room', 'availability_365', \n                 'number_of_reviews', 'dist_to_centre',  'minimum_nights', 'calculated_host_listings_count', 'last_review'] #'reviews_per_month', 'number_of_reviews',","ecf9436e":"knn_model.fit(X_train[selected_feat], y_train)\nknn_pred = knn_model.predict(X_train[selected_feat])\nknn_v_pred = knn_model.predict(X_test[selected_feat])","694fd608":"print('RMSE train: ' + str(math.sqrt(sklm.mean_squared_error(knn_pred, y_train))))\nprint('RMSE test: ' + str(math.sqrt(sklm.mean_squared_error(knn_v_pred, y_test))))","983338b9":"params = {'n_neighbors': [int(x) for x in np.linspace(start = 5, stop = 50, num = 45)],\n          'weights': ['uniform', 'distance']}\n\nknn_par = GridSearchCV(estimator=KNeighborsRegressor(), param_grid=params, cv = 5, n_jobs = -1, verbose = 2)\nknn_par.fit(X_train[selected_feat], y_train)","2da0e20b":"knn_par.best_params_","2b6c5586":"knn_pred = knn_par.predict(X_train[selected_feat])\nknn_pred_t = knn_par.predict(X_test[selected_feat])","329a20d0":"print('RMSE train: ' + str(math.sqrt(sklm.mean_squared_error(knn_pred, y_train))))\nprint('RMSE test: ' + str(math.sqrt(sklm.mean_squared_error(knn_pred_t, y_test))))","6fd24ab7":"rf = RandomForestRegressor()\nrf.fit(X_train, y_train)","bacceb1b":"rf_pred_v = rf.predict(X_test)\nrf_pred = rf.predict(X_train)","d9d6c7bb":"print('RMSE train: ' + str(math.sqrt(sklm.mean_squared_error(rf_pred, y_train))))\nprint('RMSE test: ' + str(math.sqrt(sklm.mean_squared_error(rf_pred_v, y_test))))","ab644633":"\nn_estimators = [int(x) for x in np.linspace(start = 50, stop = 1500, num = 50)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(0, 500, num = 50)]\nmin_samples_split = [2, 5, 10, 50]\nmin_samples_leaf = [1, 2, 4, 10]\n\nbootstrap = [True, False]\n\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}","b65d14a3":"rf = RandomForestRegressor()\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)\nrf_random.fit(X_train, y_train) ","e1c597fe":"rf_random.best_params_","4fcb9159":"rf_pred_t = rf_random.predict(X_test)\nrf_pred = rf_random.predict(X_train)","9d414b86":"print('RMSE train: ' + str(math.sqrt(sklm.mean_squared_error(rf_pred, y_train))))\nprint('RMSE test: ' + str(math.sqrt(sklm.mean_squared_error(rf_pred_t, y_test))))","fbbfa7e4":"**Exploring the effect of specific features on the price**","ebe4f253":"The RMSE for the trainings data is so low because it doesn't exclude itself from the data when searching the nearest neighbours and we also weight by distance so it assigns the largest weights to itself","dff461e4":"**Hyperparameter tuning**\n\nUsing a randomized hyperparameter search to find good hyperparameters.","d603a08d":"# Intital Data Exploration","dddeaadb":"# OLS as a benchmark model","dc3f6a3e":"There is a weak but highly significant positive correlation between the number of listings per host and the price. This may be because there are also hotel rooms among the listings.","a9389d8b":"**Last review as a feature**\n\nI reduce the date of the last review to the year to get a usable feature. You could get more detailed information by converting the date to seconds. But only using the year will be sufficient for my purposes. Nan-values occur when there hasn't been a review yet. This information could be useful when imputing the missing values.","f4cb9a31":"The RMSE for the test data is 41.2489 which is pretty bad. It's only slightly lower than the standard deviation, meaning that it's only a little bit better than using the mean to predict the prices. So what went wrong? KNN-Regression is distance based. The features need to be scaled and unimportant features need to be left out. ","757a80e5":"The apartments in East Berlin are on average significantly closer to the centre","c0052500":"**Creating a feature for former East and West German districts**","bc28497c":"**Figuring out whether to use neighbourhoods or neighbourhood_groups as a feature for predictions**\n\nNeighbourhood groups encompasses 12 districts with differing sizes. The largest one 'Friedrichshain-Kreuzberg' contains 4197 properties. The smallest one 'Spandau' contains 138 properties. Neighbourhoods are the subdistricts to the neighbourhood groups. This feature has 138 unique values. The smallest two neighbourhoods only have a single properties each. Thus I will be mostly using neighbourhood groups.","a543ef09":"**Hypothesis tests**\n\nWe can't use the t-test as the assumption of normality isn't met. The Mann-Whitney-U test is a popular nonparametric alternative when the data doesn't follow a normal distribution. However, it requires the two distributions to follow the same shape. Their similarity is debatable. Nevertheless I will perform this test.","13058a9d":"I had two goals: The first one was to find out whether or not there is a price difference for Airbnb rentals in East and West Berlin and the second one was to build a price prediction model.\n\nFor the price differences I found that Airbnb rentals in East Berlin cost 3,5821\u20ac more than Airbnb rentals in West Berlin, after controlling for the distance to the centre and some room specific attributes. \n\nThe first predictive model was an OLS-Regression. It's RMSE of 38.1653 on the test data served as benchmark-value. The second model I built was a KNN-Regression. The initial result was fairly bad with an RMSE of 41.2489. I was able to get this down to 35.5609 by scaling, selecting the right features and finding the right hyperparameters. Lastly, I made use of a Random Forest Regressor. Right out of the box and without changing any parameters it scored an RMSE of 34.2355. A randomized hyperparameter search resulted in a minor improvement with an RMSE of 34.0003.","cab5eeb3":"**Removing outliers**","9f4e3c9a":"The district Friedrichshain-Kreuzberg is composed of Kreuzberg which was formerly West Berlin and Friedrichshain which was in East Berlin. We need to disentangle this district in order to compare former West and East Berlin. However Friedrichshain-Kreuzberg has the most properties overall (4197). Thus separating them will give us more detailed information for predictive models. (This could also be done for other large districts for example 'Mitte' (4173 properties))","328f867f":"The properties in East Berlin are clearly closer to the centre. Which isn't surprising as East-Berlin contains 'Mitte' (the most central district). This may partly explain the price difference and I will later control for the distance to the centre.","647dbd98":"# Random Forest Regression","766e4003":"**Removing properties with high prices**\n\n246 properties cost more than 300\u20ac per night I will remove them in order to get a model that's better at predicting more common property types. The properties with prices over 300\u20ac are often for entire buildings, penthouses and other large apartment types.","aaddef53":"The results after scaling and selecting the features are already much better, but we can further improve the model by finding the optimal number of neighbours and the optimal method of weighting with the help of hyperparameter tuning.","c2f86218":"**Distance to the city centre as a new feature**\n\nThe value of a property generally increases the more central it is. So including the diastance may be beneficial. I proxied the city centre by using the coordinates for the central station, but other locations could be better. I didn't use the arithmetic mean because the rooms are most likely not symmetrically distributed across space.","8a0045ed":"The RMSE of 38.1653 for the test data and the standard deviation of 45.8298 should serve as benchmark-values.","5b83bd84":"**Results**\n\nEven after controlling for the distance to the city centre and a few room specific characteristics a significant difference of 3,5821\u20ac still remains. Excluding 'Mitte' from this analysis brings both regions closer together but the general tendency is still there. It's noteworthy that the standard deviation is larger for East Berlin than for West Berlin. One would need to look at the specific neighbourhoods that make up East and West Berlin to get to a more definitive conclusion. I won't investigate this any further.","277ff535":"# East-West-Analysis","e243b653":"There is also a weak and significant positive relationship between the year the last review was posted in and the price. This relationship is also clearly visible.","1132b91d":"The hypothesis that there isn't a difference in prices can be rejected. Airbnb prices in East Berlin seem to be higher than in West Germany.\nThis however doesn't consider that the Airbnb apartments may be spatially distributed very differently in both regions. Thus, I will take a look at how central the apartments are in East and West Berlin.","7878ecbb":"# KNN-Regression ","02c8f4a7":"From this months Tabular Playground Competition I learned the value of missing values as feature itself. (https:\/\/www.kaggle.com\/c\/tabular-playground-series-sep-2021)\n\nI don't know who to credit as I don't remember where I saw it first.","c01b3c8f":"The correlation between the price and distance to the centre is negative and significant but weak.","8eec0a95":"All features except for reviews_per_month and number_of_reviews are highly significant.","57787d69":"# Overview","fd4e2306":"7 listings have a price of 0.","f7c70987":"looking at the log-prices makes the spatial clustering of similarly priced rooms slightly more visible"}}