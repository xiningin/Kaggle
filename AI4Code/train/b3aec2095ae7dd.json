{"cell_type":{"219737f5":"code","3327358a":"code","74be00d3":"code","2bc1148b":"code","d55ab8ec":"code","cc16185e":"code","6d888827":"code","f2100bff":"code","6ec29845":"code","0c560980":"code","4f6d1343":"code","66e9b59b":"code","1db380ee":"code","d6d8b856":"code","c19d64e3":"code","e6ed28b4":"code","604f9f06":"code","ac0281ed":"code","7623f768":"code","452b7634":"code","e41e3a41":"code","324c4f09":"code","69303110":"code","3a9cbccc":"code","7cbe88ef":"code","2cf0cc1a":"code","cfa1e67a":"code","dfba7f38":"code","2cb57299":"code","e5b38861":"code","b2e2622f":"code","943d76eb":"code","0745d522":"code","96365b7a":"code","e5dd2a9b":"code","8c74e30a":"code","7d9c7987":"code","7d26de1f":"code","a2cf3615":"code","eb8cbc38":"code","bc9647b0":"code","0d099a37":"code","e85105f1":"code","f9d1fd86":"code","80b45723":"code","3800b664":"code","cbd5caa7":"code","118c492c":"code","63146866":"code","9e700348":"code","19ad6133":"markdown","e2e6d727":"markdown","2bedd60f":"markdown","d2a229da":"markdown","8936b09e":"markdown","ec7992d3":"markdown","a1088b30":"markdown","a5c223c6":"markdown","18ea7967":"markdown","0522355e":"markdown","859af6fc":"markdown","52c4dc4b":"markdown","905f065a":"markdown","30af1658":"markdown","20ba79e7":"markdown","b2d4f45c":"markdown","3b058e27":"markdown","73fb04e1":"markdown","274c663b":"markdown"},"source":{"219737f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3327358a":"train_df=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-5\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv\")","74be00d3":"train_df[train_df[\"Country_Region\"]==\"India\"]","2bc1148b":"def removenegative(x):\n    if x<0:\n        x=0\n    return x\n    \n    \ntrain_df[\"TargetValue\"]=train_df[\"TargetValue\"].apply(removenegative)","d55ab8ec":"\nindia_df=train_df[train_df[\"Country_Region\"]==\"India\"]\n\n#india_df[\"day\"]=india_df[\"Date\"].apply(lambda x:int(x[-2:]) )\n#india_df[\"Month\"]=india_df[\"Date\"].apply(months )\nindia_df[\"TargetValue\"]=india_df[\"TargetValue\"].apply(lambda x: int(x))","cc16185e":"from datetime import datetime\nindia_df[\"Date\"]=india_df['Date'].apply(lambda x:datetime.strptime(x, '%Y-%m-%d'))\n\n    \n    ","6d888827":"\nindia_df[india_df[\"Target\"]==\"ConfirmedCases\"][\"TargetValue\"].sum()\n","f2100bff":"\n\nindia_df[\"week\"]=\"week_\"+ str(india_df[\"Date\"].dt.week)\n","6ec29845":"india_df[\"week\"]=india_df[\"Date\"].dt.week.apply(lambda x: x)\n","0c560980":"\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nf,ax=plt.subplots(1,2,figsize=(26,16))\n#f=plt.figure(figsize=(26,16))\nax[0].bar(india_df[india_df[\"Target\"]==\"ConfirmedCases\"][\"week\"],india_df[india_df[\"Target\"]==\"ConfirmedCases\"][\"TargetValue\"])\nax[0].title.set_text(\"Weeks VS ConfirmedCases of India \")\nax[0].title.set_fontsize(24)\nax[1].bar(india_df[india_df[\"Target\"]==\"ConfirmedCases\"][\"week\"],india_df[india_df[\"Target\"]==\"Fatalities\"][\"TargetValue\"])\nax[1].title.set_text(\"Weeks VS Fatalities of India \")\nax[1].title.set_fontsize(24)\n#fig.set_size_inches(12, 18)\nindia_df.head()","4f6d1343":"#train_df[\"day\"]=train_df[\"Date\"].apply(lambda x:int(x[-2:]) )\n#train_df[\"Month\"]=train_df[\"Date\"].apply(months )\n#train_df[\"ConfirmedCases\"]=train_df[\"ConfirmedCases\"].apply(lambda x: int(x))","66e9b59b":"train_df[train_df[\"Country_Region\"]==\"India\"]","1db380ee":"train_df=train_df.drop(\"Province_State\",axis=1)\nfrom datetime import datetime\nfrom datetime import datetime\ntrain_df[\"Date\"]=train_df['Date'].apply(lambda x:datetime.strptime(x, '%Y-%m-%d'))\n\ntrain_df[\"week\"]=\"week_\"+ str(train_df[\"Date\"].dt.week)\ntrain_df[\"week\"]=train_df[\"Date\"].dt.week.apply(lambda x: x)\ntrain_df[\"day\"]=train_df[\"Date\"].dt.day.apply(lambda x: x)\ntrain_df[\"month\"]=train_df[\"Date\"].dt.month.apply(lambda x: int(x))","d6d8b856":"train_df=train_df.drop(\"Date\",axis=1)","c19d64e3":"country_df=train_df[train_df[\"Target\"]==\"ConfirmedCases\"].groupby(['Country_Region']).sum().reset_index().sort_values('week', ascending=False).drop([\"Population\"],axis=1)\n\ncountry_df = country_df.drop_duplicates(subset = ['Country_Region'])\ncountry_df = country_df[country_df['TargetValue']>0]\ncountry_df.head()\n#train_df.head()","e6ed28b4":"\nimport numpy as np \nimport pandas as pd \nimport plotly as py\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\n\ndata = dict(type='choropleth',\nlocations = country_df['Country_Region'],\nlocationmode = 'country names', z = country_df['TargetValue'],\ntext = country_df['Country_Region'], colorbar = {'title':'CONFIRMED CASES'},\ncolorscale=[[0, 'rgb(224,255,255)'],\n            [0.01, 'rgb(166,206,227)'], [0.02, 'rgb(31,120,180)'],\n            [0.03, 'rgb(178,223,138)'], [0.05, 'rgb(51,160,44)'],\n            [0.10, 'rgb(251,154,153)'], [0.20, 'rgb(255,255,0)'],\n            [1, 'rgb(227,26,28)']],    \nreversescale = False\n           )\nlayout = dict(title='COVID-19 CASES AROUND THE WORLD',\ngeo = dict(showframe = True, projection={'type':'mercator'}))\nchoromap = go.Figure(data = [data], layout = layout)\niplot(choromap, validate=False)","604f9f06":"df_countrydate = train_df[train_df['Target']==\"ConfirmedCases\"]\ndf_countrydate = df_countrydate.groupby(['week','Country_Region']).sum().drop([\"Population\",\"Id\",\"Weight\",\"day\",\"month\"],axis=1).groupby(level=1).cumsum().reset_index()\ndf_countrydate[df_countrydate[\"Country_Region\"]==\"India\"]","ac0281ed":"\n\nfig = px.choropleth(df_countrydate, \n                    locations=\"Country_Region\", \n                    locationmode = \"country names\",\n                    color=\"TargetValue\", \n                    hover_name=\"Country_Region\", \n                    animation_frame=\"week\",\n                   color_continuous_scale=[(0.00, \"white\"),   (0.009, \"grey\"),(0.009, \"pink\"),  \n                                           (0.05, \"pink\"),(0.05, \"orange\"),  \n                                           (0.15, \"orange\"),(0.15, \"green\"),   (0.33, \"green\"),\n                                                    (0.33, \"blue\"), (0.66, \"blue\"),\n                                                     (0.66, \"red\"),  (1.00, \"red\")]\n\n                    \n                   )\nfig.update_layout(\n    title_text = 'Global Spread of Coronavirus',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nfig.show()","7623f768":"df_india=pd.read_csv(\"\/kaggle\/input\/covid19-in-india\/covid_19_india.csv\")\n\ndf_india[\"Date\"]=df_india['Date'].apply(lambda x:datetime.strptime(x, '%d\/%m\/%y'))\n\ndf_india[\"week\"]=\"week_\"+ str(df_india[\"Date\"].dt.week)\ndf_india[\"week\"]=df_india[\"Date\"].dt.week.apply(lambda x: x)\ndf_india.head()\ndf_india_grouped=df_india.groupby([\"State\/UnionTerritory\",\"week\"]).max().reset_index().sort_values(\"week\",ascending=False)\ndf_india_grouped=df_india_grouped.drop_duplicates(subset=[\"State\/UnionTerritory\"])\n","452b7634":"df_india_grouped\nfig = px.scatter(df_india_grouped, x=\"Confirmed\", y=\"State\/UnionTerritory\", \n                 title=\"COVID CASES CONFIRMED IN INDIAN STATES\",\n                 labels={\"COVID CASES CONFIRMED IN INDIAN STATES\"} # customize axis label\n                )\n\nfig = px.bar(df_india_grouped, x='Confirmed', y='State\/UnionTerritory',\n             hover_data=['Confirmed', 'State\/UnionTerritory'], color='Confirmed', orientation='h',\n             text=\"Confirmed\", height=1400)\nfig.update_traces( textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='show')\nfig.show()\n","e41e3a41":"df_india_grouped[\"pending\"]=df_india_grouped[\"Confirmed\"]-df_india_grouped[\"Deaths\"]-df_india_grouped[\"Cured\"]","324c4f09":"'''df_india_grouped\nlabels=df_india_grouped[\"State\/UnionTerritory\"]\nvalues=df_india_grouped[\"Confirmed\"]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.show()'''\n\n\nl=list(df_india_grouped[\"State\/UnionTerritory\"])\nfig = make_subplots(rows=11, cols=3,subplot_titles=l,specs=[[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}]])\na=1\nb=1\n\nfor i in l:\n    \n    \n    temp_df=df_india_grouped[df_india_grouped[\"State\/UnionTerritory\"]==i]\n    #print(int(temp_df[\"Deaths\"]))\n    values=[int(temp_df[\"Deaths\"]),int(temp_df[\"Cured\"]),int(temp_df[\"pending\"])]\n    labels=[\"Deaths\",\"Cured\",\"pending\"]\n \n    #annot.append(dict(text=i,font_size=10, showarrow=False))\n    \n    fig.add_trace(go.Pie(labels=labels, textposition=\"inside\",values=values, name=i),a, b)\n    \n    if b==3 and a<11:\n        a=a+1\n   \n      \n    if b+1>3:\n        b=1\n    else:\n        b=b+1\n   \n    fig.update_traces(hole=.4)\n\nfig.update_layout(\n    \n    height=1900,width=1000\n)\nfig.update(layout_title_text='StateWise analysis of Positive cases')\n\n\n#fig = go.Figure(fig)\nfig.show()\n#iplot(fig)   \n","69303110":"testing_df=pd.read_csv(\"\/kaggle\/input\/covid19-in-india\/StatewiseTestingDetails.csv\")","3a9cbccc":"testing_df.dropna(inplace=True)","7cbe88ef":"testing_df_grouped[testing_df_grouped[\"State\"]==\"Gujarat\"]","2cf0cc1a":"testing_df[\"Date\"]=testing_df['Date'].apply(lambda x:datetime.strptime(x, '%Y-%m-%d'))\n\ntesting_df[\"week\"]=\"week_\"+ str(testing_df[\"Date\"].dt.week)\ntesting_df[\"week\"]=testing_df[\"Date\"].dt.week.apply(lambda x: x)\ntesting_df.head()\ntesting_df_grouped=testing_df.groupby([\"State\",\"week\"]).max().reset_index().sort_values(\"week\",ascending=False)\n","cfa1e67a":"testing_df_grouped=testing_df_grouped.drop_duplicates(subset=[\"State\"])","dfba7f38":"states=list(testing_df_grouped[\"State\"])\n\nfig = go.Figure(data=[\n    \n    go.Bar(name='TotalSamples', x=states, y=list(testing_df_grouped[\"TotalSamples\"])),\n    go.Bar(name='Negative', x=states, y=list(testing_df_grouped[\"Negative\"])),\n])\n\n#fig.update_layout(barmode='')\nfig.show()\n","2cb57299":"import geopandas as gpd\nshapefile=\"\/kaggle\/input\/india-shape\/ind_shape\/IND_adm1.shp\"\ngdf=gpd.read_file(shapefile)[[\"NAME_1\",\"geometry\"]]\n\ngdf.columns = ['states','geometry']\ngdf.loc[31,\"states\"]=\"Telengana\"\ngdf.loc[34,\"states\"]=\"Uttarakhand\"\ngdf.loc[25,\"states\"]=\"Odisha\"\n\n#gdf[gdf[\"states\"]==\"Orissa\"]","e5b38861":"df_india_grouped","b2e2622f":"merged_grouped = gdf.merge(df_india_grouped, left_on = 'states', right_on = 'State\/UnionTerritory').drop([\"Date\"],axis=1)\nimport json\nmerged_json_grouped = json.loads(merged_grouped.to_json())\njson_data_grouped = json.dumps(merged_json_grouped)","943d76eb":"from bokeh.io import output_notebook, show, output_file\nfrom bokeh.plotting import figure\nfrom bokeh.models import GeoJSONDataSource, LinearColorMapper, ColorBar,LabelSet\nfrom bokeh.palettes import brewer\nfrom bokeh.models import Slider, HoverTool\ngeosource = GeoJSONDataSource(geojson = json_data_grouped)\npalette = brewer['YlGnBu'][8]\npalette = palette[::-1]\ncolor_mapper = LinearColorMapper(palette = palette, low = 0, high = max(merged_grouped[\"Confirmed\"]))\n\ntick_labels = {'0': '0', '100': '100', '200':'200', '400':'400', '800':'800', '1200':'1200', '1400':'1400','1800':'1800', '2000': '2000'}\nhover = HoverTool(tooltips = [ ('states','@states'),('Confirmed_Cases', '@Confirmed')])\ncolor_bar = ColorBar(color_mapper=color_mapper, label_standoff=8,width = 500, height = 20,\nborder_line_color=None,location = (0,0), orientation = 'horizontal', major_label_overrides = tick_labels)\n\np = figure(title = 'CoronaVirus Confirmed States(HOVER MOUSE FOR INFO)', plot_height = 600 , plot_width = 950, toolbar_location = None,tools=[hover])\np.xgrid.grid_line_color = None\np.ygrid.grid_line_color = None\n\n\np.patches('xs','ys', source = geosource,fill_color = {'field' :'Confirmed', 'transform' : color_mapper},name=\"states\",\n          line_color = 'black', line_width = 0.25, fill_alpha = 1)\nlabels = LabelSet(x='xs', y='ys', text='states',\n              x_offset=5, y_offset=5, source=geosource)\n\np.add_layout(color_bar, 'below')\noutput_notebook()\n#Display figure.\nshow(p)","0745d522":"country_df=df_india.groupby([\"week\",\"State\/UnionTerritory\"]).max().reset_index()\ncountry_df.drop([\"Date\",\"ConfirmedIndianNational\",\"ConfirmedForeignNational\",\"Deaths\",\"Cured\",\"Time\"],axis=1,inplace=True)","96365b7a":"\nshapefile=\"\/kaggle\/input\/india-shape\/ind_shape\/IND_adm1.shx\"\ngdf=gpd.read_file(shapefile)[[\"NAME_1\",\"geometry\"]]\ngdf[\"geometry\"]=gdf[\"geometry\"].simplify(0.02, preserve_topology=True)\ngdf\ngdf.columns = ['states','geometry']\ngdf.loc[31,\"states\"]=\"Telengana\"\ngdf.loc[34,\"states\"]=\"Uttarakhand\"\ngdf.loc[25,\"states\"]=\"Odisha\"\nmerged_grouped = gdf#.merge(df_india_grouped[[\"State\/UnionTerritory\",\"geo\"]], left_on = 'states', right_on = 'State\/UnionTerritory')\n\nmerged_json_grouped = json.loads(merged_grouped.to_json())\njson_data_grouped = json.dumps(merged_json_grouped)\nfor i in merged_json_grouped[\"features\"]:\n    i[\"id\"]=i[\"properties\"][\"states\"]\n","e5dd2a9b":"country_df=df_india.groupby([\"State\/UnionTerritory\",\"week\"]).max().reset_index().sort_values(\"week\",ascending=True)\n\ncountry_df=country_df.drop(['Sno', 'Date', 'Time',\n       'ConfirmedIndianNational', 'ConfirmedForeignNational', 'Cured',\n       'Deaths',],axis=1)","8c74e30a":"merged_json_grouped","7d9c7987":"fig = px.choropleth(country_df, geojson=merged_json_grouped,\n                    locations=\"State\/UnionTerritory\", \n                    \n                    color=\"Confirmed\", \n                    hover_name=\"State\/UnionTerritory\", \n                    animation_frame=\"week\",\n                   color_continuous_scale=[\"lightblue\",\"yellow\",\"orange\",\"red\"]\n                     #labels={'Confirmed':'Confirmed'}\n                    \n                \n                         \n                      \n                   )\nfig.update_geos(fitbounds=\"locations\", visible=False,projection_type=\"natural earth\")   \nfig.update_layout(\n    title_text = 'India Spread of Coronavirus',\n    title_x = 0.5,\n    geo=dict(\n        showframe = True,\n        showcoastlines =False,\n    ))\n \nfig.show()\n\n\n","7d26de1f":"train_df.head()\n\n","a2cf3615":"train_df.columns","eb8cbc38":"from sklearn.preprocessing import LabelEncoder,StandardScaler,MinMaxScaler\ntrain_df['TargetValue'] = train_df['TargetValue'].apply(int)\n\ncases = train_df.TargetValue\n\n\nlb = LabelEncoder()\n\ndel train_df[\"TargetValue\"]\n\n#del train_df[\"Id\"]\ntrain_df['Country_Region'] = lb.fit_transform(train_df['Country_Region'])\ntrain_df[\"Target\"]=lb.fit_transform(train_df[\"Target\"])\nscaler = MinMaxScaler()\nX_train = scaler.fit_transform(train_df.drop(['County', 'day', 'month'],axis=1).values)\n\n","bc9647b0":"from xgboost import XGBRegressor\nmodel = XGBRegressor(n_estimators = 500 , random_state = 0 , max_depth = 27)\nmodel.fit(X_train,cases)","0d099a37":"model.score(X_train,cases)","e85105f1":"newtestdf=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv\")\nnewtestdf[\"Date\"]=newtestdf['Date'].apply(lambda x:datetime.strptime(x, '%Y-%m-%d'))\nnewtestdf1=newtestdf\nnewtestdf2=newtestdf\nnewtestdf3=newtestdf\nnewtestdf1[\"ForecastId\"]=newtestdf1[\"ForecastId\"].apply(lambda x: str(x)+\"_0.05\")\nnewtestdf2[\"ForecastId\"]=newtestdf2[\"ForecastId\"].apply(lambda x: str(x)+\"_0.50\")\nnewtestdf3[\"ForecastId\"]=newtestdf3[\"ForecastId\"].apply(lambda x: str(x)+\"_0.95\")\nnewtestdf=pd.concat([newtestdf1,newtestdf2,newtestdf3])\n\nnewtestdf[\"week\"]=\"week_\"+ str(newtestdf[\"Date\"].dt.week)\nnewtestdf[\"week\"]=newtestdf[\"Date\"].dt.week.apply(lambda x: x)\nnewtestdf[\"day\"]=newtestdf[\"Date\"].dt.day.apply(lambda x: x)\nnewtestdf[\"month\"]=newtestdf[\"Date\"].dt.month.apply(lambda x: int(x))\nnewtestdf[\"Target\"]=lb.fit_transform(newtestdf[\"Target\"])\nnewtestdf['Country_Region'] = lb.fit_transform(newtestdf['Country_Region'])\n#newtestdf['ForecastId'] = lb.fit_transform(newtestdf['ForecastId'])\nnewtestdf[\"ForecastId\"]=newtestdf.index\nnewtestdf=newtestdf.drop([\"Province_State\",\"Date\",\"month\",\"day\",\"County\"],axis=1)\nnewtestdf","f9d1fd86":"newtestdf.ForecastId.rename(\"Id\",inplace=True)","80b45723":"X_test = scaler.fit_transform(newtestdf.values)\ncases_pred = model.predict(X_test)","3800b664":"cases_pred = np.around(cases_pred,decimals = 0)\n","cbd5caa7":"\nsubmission = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-5\/submission.csv\")\nsubmission['TargetValue'] = cases_pred\n\nsubmission.to_csv(\"submission.csv\" , index = False)","118c492c":"submission","63146866":"THANK YOU!!!!","9e700348":"newtestdf","19ad6133":"Now we go for modelling our data , I am going to use XGBOOST although I am still working and on different models so this could be updated again , If you have any suggestions please do tell me in the comments :D","e2e6d727":"I have used Bokeh instaed of plotly  here instead of plotly to demonstarte another method that we can create Choropleth map although we can see it requires more code and can get complicated","2bedd60f":"Below I have merged the Geopandas dataframe containing geometry and state names with our dataset of covid-19 indian states and used a json converted to convert it into json","d2a229da":"**The Bar Plot provides info About the Statewise Confirmed Cases, You can hover on them **","8936b09e":"Below I have used Plotly to create a CHOROPLETH Map of The CoronaVirus to the latest week ","ec7992d3":"We scale using minmaxscaler and also transform the country data into numeric using label encoding(not get_dummies as i did not get a good score before :D)","a1088b30":"**Hello** Welcome to my kernel this is my first **Proper** kernel with some EDA and choropleth maps  DO UPVOTE IF YOU LIKE IT :D\nlet's dive into what I have done below i have simply loaded the kaggle provided datasets\n<h1>Please Upvote thank you !!!! :D<\/h1>","a5c223c6":"This again using plotly I have created the map which you can interact with the slider to see how the spread of coronavirus has affected the Countries starting from the 4th week of the year that was in January and till now in April** YOU CAN HOVER FOR INFO OF THE CASES**","18ea7967":"**Below I have taken the india part out of the dataframe provided and did some plotting**","0522355e":"Below I have made a week column and added it to the dataframe and did some simple plottings I have done  using SEABORN CATPLOT","859af6fc":"using inbuilt pandas encoder i encoded the names of the country regions","52c4dc4b":"I would like to thank Mr. SRK for the dataset on COVID-19 IN INDIA ===>  https:\/\/www.kaggle.com\/sudalairajkumar\/covid19-in-india which i have used below","905f065a":"Now over here the same way we created the animation of the world map before , we want to create it similary for inidian states, we are using plotly instead of Bokeh because for Bokeh we needed to create a bokeh server to get that interactivity , but we can simply get it more easily with plotly\nALSO NOTE:**** Below in the code i have used geoseries function SIMPLIFY() as the plot created was very laggy due to the multiploygon geometry of the indian states so using SIMPLIFY(Tolerance=0.02) which kind of straightens some wiggles and curves to a line, but still I think a 0.02 tolerance provides an accurate shape of the map ","30af1658":"This Map created using plotly is interactive starting from week 4 , we can see it started from kerala and within few week it was massively spread over the Indian States","20ba79e7":"Now it is time to plot another choropleth map but this time for India staetwise, for this I added a dataset containing the shape files indian state ","b2d4f45c":"**NOW IN THIS WHOLE NOTEBOOK I HAVE SPLIT THE DATE INTO WEEKS.....IF YOU SEE WEEK 4 IT MEANS IT IS THE 4th WEEK OF THE YEAR!!!!! NOT MONTH**\n","3b058e27":"Here I have added a new column called ***pending*** which is basically how many patients are still being treated , I am going to use this in the below piechart I have created for each state depicting the states and how many cases are cured, deaths and pending","73fb04e1":"THANK YOU :D PLEASE DO UPVOTE!!!!!","274c663b":"I took inspiration of the hyperparamters from here https:\/\/www.kaggle.com\/pradeepkumarrajkumar\/xgb-regressor\n"}}