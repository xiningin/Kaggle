{"cell_type":{"019a3922":"code","950fcc28":"code","db3c05b7":"code","8c8a83c7":"code","a0256ba6":"code","9fed3bbe":"code","f152def9":"code","f0f10d00":"code","baf8576d":"code","06ad52e9":"code","e858bab9":"code","ee5f4484":"code","54154969":"code","c5c512b6":"code","35d3d2cb":"code","940a561c":"code","a305c779":"code","f8f9fb31":"code","f0037be5":"code","db994632":"code","3623057f":"code","93085850":"code","7bc041bc":"code","b2536f36":"code","0ec55a03":"code","5d729d27":"code","72556bfa":"code","0904ec66":"code","d4ef1484":"code","28f07eaf":"code","d86d9b83":"code","bc843718":"code","8f406e70":"code","d537f602":"code","9b263c74":"code","4180ca79":"code","ff2656a8":"markdown","c05633c7":"markdown","10e6455c":"markdown","e79427aa":"markdown","720ef653":"markdown","a12871d0":"markdown"},"source":{"019a3922":"from datetime import datetime\nimport numpy as np             #for numerical computations like log,exp,sqrt etc\nimport pandas as pd            #for reading & storing data, pre-processing\nimport matplotlib.pylab as plt #for visualization\n#for making sure matplotlib plots are generated in Jupyter notebook itself\n%matplotlib inline             \nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom matplotlib.pylab import rcParams","950fcc28":"df=pd.read_csv('..\/input\/air-passengers\/AirPassengers.csv')","db3c05b7":"df.head()","8c8a83c7":"df.shape","a0256ba6":"df.isnull().sum()","9fed3bbe":"df.isna().sum()","f152def9":"# Convert Month into Datetime\ndf['Month']=pd.to_datetime(df['Month'])","f0f10d00":"df.head()","baf8576d":"df.set_index('Month',inplace=True)","06ad52e9":"df.head()","e858bab9":"df.describe()","ee5f4484":"df.plot()","54154969":"### Testing For Stationarity\n\nfrom statsmodels.tsa.stattools import adfuller","c5c512b6":"#Ho: It is non stationary\n#H1: It is stationary\n\ndef adfuller_test(sales):\n    result=adfuller(sales)\n    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations Used']\n    for value,label in zip(result,labels):\n        print(label+' : '+str(value) )\n    if result[1] <= 0.05:\n        print(\"strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data has no unit root and is stationary\")\n    else:\n        print(\"weak evidence against null hypothesis, time series has a unit root, indicating it is non-stationary \")","35d3d2cb":"adfuller_test(df['#Passengers'])","940a561c":"#Determine rolling statistics\nrolmean = df.rolling(window=12).mean() #window size 12 denotes 12 months, giving rolling mean at yearly level\nrolstd = df.rolling(window=12).std()","a305c779":"#Plot rolling statistics\norig = plt.plot(df, color='blue', label='Original')\nmean = plt.plot(rolmean, color='red', label='Rolling Mean')\nplt.legend(loc='best')\nplt.title('Rolling Mean & Standard Deviation')\nplt.show(block=False)","f8f9fb31":"#Estimating trend\ndf_logScale = np.log(df)\nplt.plot(df_logScale)","f0037be5":"#The below transformation is required to make series stationary\nmovingAverage = df_logScale.rolling(window=12).mean()\nmovingSTD = df_logScale.rolling(window=12).std()\nplt.plot(df_logScale)\nplt.plot(movingAverage, color='red')","db994632":"df_logScale_ma = df_logScale - movingAverage\ndf_logScale_ma.head(12)","3623057f":"#Remove NAN values\ndf_logScale_ma.dropna(inplace=True)\ndf_logScale_ma.head(10)","93085850":"## Again test dickey fuller test\nadfuller_test(df_logScale_ma)","7bc041bc":"df_logScale_ma.plot()","b2536f36":"df_logScale_shift = df_logScale - df_logScale.shift()\nplt.plot(df_logScale_shift)","0ec55a03":"df_logScale_shift.dropna(inplace=True)\ndf_logScale_shift.plot()","5d729d27":"## Again test dickey fuller test\nadfuller_test(df_logScale_shift)","72556bfa":"from statsmodels.graphics.tsaplots import plot_acf,plot_pacf","0904ec66":"import statsmodels.api as sm\n\nfig = plt.figure(figsize=(12,8))\nax1 = fig.add_subplot(211)\nfig = sm.graphics.tsa.plot_acf(df_logScale_shift.values.squeeze(),lags=40,ax=ax1)\nax2 = fig.add_subplot(212)\nfig = sm.graphics.tsa.plot_pacf(df_logScale_shift,lags=40,ax=ax2)","d4ef1484":"model=ARIMA(df,order=(2,1,2))\nmodel_fit=model.fit()","28f07eaf":"model_fit.summary()","d86d9b83":"model_fit.aic","bc843718":"df['forecast']=model_fit.predict(start=90,end=103,dynamic=True)\ndf[['#Passengers','forecast']].plot(figsize=(12,8))","8f406e70":"model=sm.tsa.statespace.SARIMAX(df['#Passengers'],order=(2,1,2),seasonal_order=(2,1,2,12))\nresults=model.fit()","d537f602":"results.aic","9b263c74":"results.summary()","4180ca79":"df['forecast']=results.predict(start=90,end=800,dynamic=True)\ndf[['#Passengers','forecast']].plot(figsize=(12,8))","ff2656a8":"## Step 1: Understanding the Data","c05633c7":"#### Time Shift Transformation ","10e6455c":"## Step 3: Differencing","e79427aa":"## Step-3 : Final Thoughts on Autocorrelation and Partial Autocorrelation\u00b6\n\n* Identification of an AR model is often best done with the PACF.\n    * For an AR model, the theoretical PACF \u201cshuts off\u201d past the order of the model. The phrase \u201cshuts off\u201d means that in theory the partial autocorrelations are equal to 0 beyond that point. Put another way, the number of non-zero partial autocorrelations gives the order of the AR model. By the \u201corder of the model\u201d we mean the most extreme lag of x that is used as a predictor.\n\n* Identification of an MA model is often best done with the ACF rather than the PACF.\n    * For an MA model, the theoretical PACF does not shut off, but instead tapers toward 0 in some manner. A clearer pattern for an MA model is in the ACF. The ACF will have non-zero autocorrelations only at lags involved in the model.","720ef653":"# ARIMA and Seasonal ARIMA\n## Autoregressive Integrated Moving Averages\nThe general process for ARIMA models is the following:\n\n* Visualize the Time Series Data\n* Make the time series data stationary\n* Plot the Correlation and AutoCorrelation Charts\n* Construct the ARIMA Model or Seasonal ARIMA based on the data\n* Use the model to make predictions\n\nLet's go through these steps!","a12871d0":"## Step 2: Visualize the Data"}}