{"cell_type":{"406d91ac":"code","753e517d":"code","6adb071a":"code","70b3076f":"code","c4e6086f":"code","da9f7240":"code","debad1b8":"code","bb5c0f7f":"code","1f38ea3d":"code","14ea00bb":"code","a4f950a2":"code","78cd13d8":"code","ce01cf09":"code","e5c47ff8":"code","a37c1dfe":"code","53b80906":"code","44a8d999":"code","4a76cd90":"code","cb454315":"code","452841c6":"code","37cf0c48":"code","a9d31ba7":"code","0d9da499":"code","f59f3b97":"code","3b62884a":"code","d4357631":"code","5c41ed8a":"code","40b53906":"code","a9a28f6a":"code","61f2985a":"code","d73f8bca":"code","7d661e7d":"code","f0150353":"code","69d15595":"code","c48c0951":"code","d32db614":"code","579de8b9":"code","68c70c83":"code","7e5d305a":"code","9b7ef143":"code","ff115427":"code","b3a0378a":"code","ab3b566a":"code","a5cc3e2e":"code","faf39804":"code","08b66b59":"code","8ae23aef":"code","9d76d584":"code","c85beb5d":"code","2f0bfec8":"code","365b5016":"code","7ec658cf":"markdown","effb4776":"markdown","00693017":"markdown","f09f1716":"markdown","f9d94893":"markdown","2d860c50":"markdown","84e48233":"markdown","1cc2865b":"markdown","6e15767b":"markdown","a7d8a39a":"markdown","c01a37ea":"markdown","5662ed80":"markdown","5c4525d7":"markdown","5aa26ec4":"markdown","86837a8e":"markdown","8bfe20ed":"markdown","a564e3d2":"markdown","93d605b2":"markdown","35420fc9":"markdown","8d2ccbbc":"markdown","261f6c78":"markdown","2ad72d96":"markdown","720a0364":"markdown","4e035f36":"markdown","6fa08766":"markdown","497fac5e":"markdown","cfb8c6ac":"markdown","0014443a":"markdown","010ba64e":"markdown","5a9c1a9a":"markdown","d9df8b97":"markdown","5ac4b5a8":"markdown"},"source":{"406d91ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","753e517d":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport matplotlib.gridspec as gridspec\nfrom termcolor import colored\nimport gc\n\nplt.style.use('seaborn-whitegrid')\nimport warnings\nwarnings.simplefilter(\"ignore\")\npd.set_option('display.float_format', lambda x: '%.2f' % x)","6adb071a":"# file paths\nDIR_PATH = '\/kaggle\/input\/competitive-data-science-predict-future-sales'\nTRAIN_SALES_CSV = '\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv'\nSHOPS_CSV = '\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv'\nITEMS_CSV= '\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv'\nITEM_CATEGORY_CSV = '\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv'\nTEST_CSV = '\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv'","70b3076f":"def show_data(df_train,heading='TRAIN DATA'):\n    \n    \"\"\"\n    function which gives basic data information\n    Args:\n        df_train: pandas dataframe\n        heading: deading to display\n    Returns:\n        None\n    \"\"\"\n\n    print(colored(heading,'red'))\n    print('')\n    print('Date shape')\n    print(f'shape:{df_train.shape}')\n    print('')\n    print('--'*50)\n    print('')\n    print('Sample:')\n    print(df_train.head(3).to_markdown())\n    print('')\n    print('--'*50)\n    print('')\n    print('Columns and data types:')\n    print('')\n    print(df_train.info())","c4e6086f":"df_train = pd.read_csv(TRAIN_SALES_CSV)\ndf_shop = pd.read_csv(SHOPS_CSV)\ndf_item = pd.read_csv(ITEMS_CSV)\ndf_itemcat = pd.read_csv(ITEM_CATEGORY_CSV)\n\nshow_data(df_train,heading='TRAIN DATA')\nprint('')\nprint('__'*40)\nprint('')\nshow_data(df_shop,heading='SHOP DATA')\nprint('')\nprint('__'*40)\nprint('')\nshow_data(df_item,heading='ITEM DETAILS DATA')\nprint('__'*40)\nprint('')\nshow_data(df_itemcat,heading='ITEM CATEGORY DATA')","da9f7240":"df_test = pd.read_csv(TEST_CSV)\nshow_data(df_test,heading='TEST DATA')","debad1b8":"### Merging all dataframes together\ndff = df_train.merge(df_item,on=\"item_id\")\ndff = dff.merge(df_itemcat,on=\"item_category_id\")\ndff = dff.merge(df_shop,on=\"shop_id\")\ndff = dff.drop(columns=[\"item_name\"])\ndff.to_csv('merged_original.csv',index=False)","bb5c0f7f":"#masking a copy\ndf = dff.copy()\n# df.to_csv('merged_original.csv',index=False)\ndf.head()","1f38ea3d":"df.describe()","14ea00bb":"df[\"date\"]=  pd.to_datetime(df[\"date\"], format='%d.%m.%Y')\ndf.sort_values(by=\"date\", ascending=True, inplace=True)\nprint(f'Minimum data present: {df[\"date\"].min()}')\nprint(f'Maximum date present: {df[\"date\"].max()}')","a4f950a2":"# sorting dataframe based on date\ndf = df.sort_values(by='date').reset_index(drop=True)\ndf.head()","78cd13d8":"fig,axes = plt.subplots(1,2,figsize=(15,5))\nsns.boxplot(df['item_cnt_day'],ax=axes[0])\naxes[0].set_title('Boxplot')\nsns.distplot(df['item_cnt_day'],ax=axes[1])\naxes[1].set_title('Distribution')\nplt.suptitle('No of units sold(Item Cnt day)',fontsize=\"20\")\nplt.show()","ce01cf09":"df['item_cnt_day'].describe()","e5c47ff8":"print(f'Minimum value {df[\"item_cnt_day\"].min()}')\nprint(f'Maximum value {df[\"item_cnt_day\"].max()}')","a37c1dfe":"# Let us print percentile values\nfor i in range(0,101,10):\n    print(f'{i}th percentile value for item_cnt_day is {np.percentile(df[\"item_cnt_day\"],i)}')\n    \nprint('--'*50)\n\nfor i in range(90,100):\n    print(f'{i}th percentile value for item_cnt_day is {np.percentile(df[\"item_cnt_day\"],i)}')\n    \nprint('--'*50)\n\nfor i in range(1,10):\n    k = 99 + i\/10 \n    print(f'{k}th percentile value for item_cnt_day is {np.percentile(df[\"item_cnt_day\"],k)}')","53b80906":"# we will remove some extreme out layers\ndf[df['item_cnt_day'] > df['item_cnt_day'].quantile(0.95)]","44a8d999":"df[df['item_cnt_day'] < 0]","4a76cd90":"print(f'shape of data after before outliers: {df.shape}')\ndf = df[df['item_cnt_day'] >= 0]\nupper_quantile = df['item_cnt_day'].quantile(0.95)\nprint(f'Removing values greater that upper_quantile {upper_quantile} and less than 0')\ndf['item_cnt_day'] = np.where(df['item_cnt_day'] > upper_quantile, upper_quantile, df['item_cnt_day'])\n\nprint(f'shape of data after removing outliers: {df.shape}')\nprint(f'Minimum units of product sold a time {df[\"item_cnt_day\"].min()}')\nprint(f'Maximum units of product sold a time {df[\"item_cnt_day\"].max()}')","cb454315":"fig,axes = plt.subplots(1,2,figsize=(15,5))\nsns.boxplot(df['item_price'],ax=axes[0])\naxes[0].set_title('Boxplot')\nsns.distplot(df['item_price'],ax=axes[1])\naxes[1].set_title('Distribution')\nplt.suptitle('Item Price per unit',fontsize=\"20\")\nplt.show()","452841c6":"df['item_price'].describe()","37cf0c48":"# Let us print percentile values\nfor i in range(0,101,10):\n    print(f'{i}th percentile value for item_price is {np.percentile(df[\"item_price\"],i)}')\n    \nprint('--'*50)\n\nfor i in range(90,100):\n    print(f'{i}th percentile value for item_price is {np.percentile(df[\"item_price\"],i)}')\n    \nprint('--'*50)\n\nfor i in range(1,10):\n    k = 99 + i\/10 \n    print(f'{k}th percentile value for item_price is {np.percentile(df[\"item_price\"],k)}')","a9d31ba7":"# we have an extreme outlier value in item price. Let us remove it\n\nprint(f'shape of data before removing outliers: {df.shape}')\ndf = df[df['item_price'] >= 0]\nupper_quantile = df['item_price'].quantile(0.95)\ndf['item_price'] = np.where(df['item_price'] > upper_quantile, upper_quantile, df['item_price'])\nprint(f'shape of data after removing outliers: {df.shape}')\n\nprint(f'Minimum price of a single item {df[\"item_price\"].min()}')\nprint(f'Maximum price ofa single item {df[\"item_price\"].max()}')","0d9da499":"df_tmp = df[df['shop_id'] == 31][['date','item_id','item_price']].reset_index(drop=True)\nitems = df_tmp['item_id'].unique()[0:8]\n\nfig,axes = plt.subplots(1,1,figsize=(25,8))\ncolors = ['red','orange','blue','green','yellow','purple','cyan','brown']\nfor i,item in enumerate(items):\n    dprice = df_tmp[df_tmp['item_id'] == item][['item_price','date']]\n    \n    sns.lineplot(x=dprice['date'],y=dprice['item_price'],ax=axes,color=colors[i],label=item)\n    \naxes.set_title('Price development of items - shop_id 31',fontsize=\"28\")\naxes.legend()\nplt.show()\n\n\ndf_tmp = df[df['shop_id'] == 28][['date','item_id','item_price']].reset_index(drop=True)\nitems = df_tmp['item_id'].unique()[0:8]\n\nfig,axes = plt.subplots(1,1,figsize=(25,8))\ncolors = ['red','orange','blue','green','yellow','purple','cyan','brown']\nfor i,item in enumerate(items):\n    dprice = df_tmp[df_tmp['item_id'] == item][['item_price','date']]\n    \n    sns.lineplot(x=dprice['date'],y=dprice['item_price'],ax=axes,color=colors[i],label=item)\n    \naxes.set_title('Price development of items - shop_id 28',fontsize=\"28\")\naxes.legend()\nplt.show()\n\n\n\ndf_tmp = df[df['shop_id'] == 21][['date','item_id','item_price']].reset_index(drop=True)\nitems = df_tmp['item_id'].unique()[0:8]\n\nfig,axes = plt.subplots(1,1,figsize=(25,8))\ncolors = ['red','orange','blue','green','yellow','purple','cyan','brown']\nfor i,item in enumerate(items):\n    dprice = df_tmp[df_tmp['item_id'] == item][['item_price','date']]\n    \n    sns.lineplot(x=dprice['date'],y=dprice['item_price'],ax=axes,color=colors[i],label=item)\n    \naxes.set_title('Price development of items - shop_id 21',fontsize=\"28\")\naxes.legend()\nplt.show()","f59f3b97":"# creating a new feature\ndf['Sales_per_item'] = df['item_cnt_day'] * df['item_price']","3b62884a":"fig = plt.figure(figsize=(25,7))\ngs = fig.add_gridspec(1, 3)\nax00 = fig.add_subplot(gs[0,0])\nax01 = fig.add_subplot(gs[0,1])\nax02 = fig.add_subplot(gs[0,2])\n# setting size of xlabel and ylabel\nax00.tick_params(axis='both', labelsize=15)\nax01.tick_params(axis='both', labelsize=15)\nax02.tick_params(axis='both', labelsize=15)\nax00.set_title('Sales per item', fontsize=20)\nax01.set_title('Item price distribution', fontsize=20)\nax02.set_title('Item count distribution', fontsize=20)\nsns.histplot(data = df ,x=\"Sales_per_item\", kde=True, bins=50,ax=ax00, color=\"violet\")\nsns.histplot(data = df ,x=\"item_price\", kde=True, ax=ax01, bins=50, color=\"tomato\")\nsns.histplot(data = df ,x=\"item_cnt_day\", kde=False, ax=ax02, bins=20, color=\"cornflowerblue\")\n\nfig.subplots_adjust(top=0.8)\nfig.suptitle('Sales Feature Distributions per Day', fontsize=\"28\");","d4357631":"train_shop_ids = set(df['shop_id'].unique())\ntest_shop_ids = set(df_test['shop_id'].unique())\n\ntrain_item_ids = set(df['item_id'].unique())\ntest_item_ids = set(df_test['item_id'].unique())\n\nprint(f'There are about {len(train_shop_ids)} unique shop ids in train data and {len(test_shop_ids)} shop ids in test data')\nprint(f'There are about {len(train_item_ids)} unique item ids in train data and {len(test_item_ids)} item ids in test data')\nprint('--'*50)\n\ndf['pair'] = df[['shop_id','item_id']].apply(lambda x: str(x['shop_id'])+'_'+str(x['item_id']),axis=1)\ndf_test['pair'] = df_test[['shop_id','item_id']].apply(lambda x: str(x['shop_id'])+'_'+str(x['item_id']),axis=1)\ntrain_pair_ids = set(df['pair'].unique())\ntest_pair_ids = set(df_test['pair'].unique())\n\nprint(f'There are {len(train_shop_ids - test_shop_ids)} shop ids present in train data which are not in test data')\nprint(f'There are {len(train_item_ids - test_item_ids)} item ids present in train data which are not in test data')\nprint(f'There are {len(train_pair_ids - test_pair_ids)} shop id item id pairs present in train data which are not in test data')\n\nprint('--'*50)\n\nprint(f'There are {len(test_item_ids - train_item_ids)} item ids present in test data which are not in train data')\nprint(f'There are {len(test_shop_ids - train_shop_ids)} shop ids present in test data which are not in train data')\nprint(f'There are {len(test_pair_ids - train_pair_ids)} shop id item id pairs present in test data which are not in train data')","5c41ed8a":"print(f'Total number of unique shop ids: {df[\"shop_id\"].nunique()}')\ndf_tmp = df[[\"shop_id\",\"Sales_per_item\",\"item_cnt_day\"]]\ndf_tmp= pd.pivot_table(data=df_tmp,index=[\"shop_id\"],aggfunc={\"item_cnt_day\":np.sum,\"Sales_per_item\":np.sum}).reset_index()\n\n\nfig, axes = plt.subplots(2,1,figsize=(20,10))\nsns.barplot(x=df_tmp[\"shop_id\"],y=df_tmp[\"item_cnt_day\"],ax=axes[0])\naxes[0].set_title(\"Total number of units sold among various shops\")\nsns.barplot(x=df_tmp[\"shop_id\"],y=df_tmp[\"Sales_per_item\"],ax=axes[1])\naxes[1].set_title('Total turn over in various shops')\nplt.suptitle('Shop id', fontsize=\"28\")\nplt.show()","40b53906":"print(f'Total number of unique item ids: {df[\"item_id\"].nunique()}')\n\ndf_tmp = df[[\"item_id\",\"Sales_per_item\",\"item_cnt_day\"]]\ndf_tmp= pd.pivot_table(data=df_tmp,index=[\"item_id\"],aggfunc={\"item_cnt_day\":np.sum,\"Sales_per_item\":np.sum}).reset_index()\ndf_tmp_sales = df_tmp.sort_values(by=['Sales_per_item'],ascending=False).head(50).reset_index(drop=True)\ndf_tmp_count = df_tmp.sort_values(by=['item_cnt_day'],ascending=False).head(50).reset_index(drop=True)\n\nfig, axes = plt.subplots(2,1,figsize=(20,15))\nsns.barplot(x=df_tmp_count[\"item_id\"],y=df_tmp_count[\"item_cnt_day\"],ax=axes[0])\naxes[0].set_title(\"Top selling items of no of units sold\")\naxes[0].set_xticklabels(axes[0].get_xticklabels(),rotation=45)\nsns.barplot(x=df_tmp_sales[\"item_id\"],y=df_tmp_sales[\"Sales_per_item\"],ax=axes[1])\naxes[1].set_title('Top selling items in terms of Turn over')\naxes[1].set_xticklabels(axes[1].get_xticklabels(),rotation=45)\nplt.suptitle('Item id', fontsize=\"28\")\nplt.show()\n# del df_tmp,df_tmp_count,df_tmp_sales","a9a28f6a":"print(f'Total number of unique item categorical ids: {df[\"item_category_id\"].nunique()}')\n\ndf_tmp = df[[\"item_category_id\",\"Sales_per_item\",\"item_cnt_day\"]]\ndf_tmp= pd.pivot_table(data=df_tmp,index=[\"item_category_id\"],aggfunc={\"item_cnt_day\":np.sum,\"Sales_per_item\":np.sum}).reset_index()\ndf_tmp_sales = df_tmp.sort_values(by=['Sales_per_item'],ascending=False).head(50).reset_index(drop=True)\ndf_tmp_count = df_tmp.sort_values(by=['item_cnt_day'],ascending=False).head(50).reset_index(drop=True)\n\nfig, axes = plt.subplots(2,1,figsize=(20,15))\nsns.barplot(x=df_tmp_count[\"item_category_id\"],y=df_tmp_count[\"item_cnt_day\"],ax=axes[0])\naxes[0].set_title(\"Top selling items of no of units sold\")\naxes[0].set_xticklabels(axes[0].get_xticklabels(),rotation=45)\nsns.barplot(x=df_tmp_sales[\"item_category_id\"],y=df_tmp_sales[\"Sales_per_item\"],ax=axes[1])\naxes[1].set_title('Top selling items in terms of Turn over')\naxes[1].set_xticklabels(axes[1].get_xticklabels(),rotation=45)\nplt.suptitle('Item Categorical id', fontsize=\"28\")\nplt.show()\ndel df_tmp,df_tmp_count,df_tmp_sales","61f2985a":"item_categories = df['item_category_id'].unique()\ntmp = df[['item_id','item_category_id']].groupby(by=\"item_id\").nunique().reset_index()\ntmp.head()","d73f8bca":"tmp['item_category_id'].unique()","7d661e7d":"#creating some new features\ndf[\"Year\"] = df[\"date\"].dt.year\ndf[\"Month\"] = df[\"date\"].dt.month\ndf[\"day_of_month\"] = df[\"date\"].dt.day\ndf[\"day_of_week\"] = df[\"date\"].dt.day_of_week","f0150353":"fig,axes = plt.subplots(2,1,figsize=(25,12))\ndf_tmp = df[['date_block_num','Month','Sales_per_item']].groupby(by=['date_block_num']).aggregate(\"sum\").reset_index()\nsns.lineplot(x=df_tmp['date_block_num'],y=df_tmp['Sales_per_item'],ax=axes[0])\naxes[0].set_title('Total turn over (Total Sales)',fontsize=\"25\")\naxes[0].set_xlabel('Date',fontsize=\"20\")\naxes[0].set_ylabel('Turn over per month',fontsize=\"20\")\n\n\ndf_tmp = df[['date_block_num','Month','item_cnt_day']].groupby(by=['date_block_num']).aggregate(\"sum\").reset_index()\nsns.lineplot(x=df_tmp['date_block_num'],y=df_tmp['item_cnt_day'],ax=axes[1])\naxes[1].set_title('Total units sold',fontsize=\"25\")\naxes[1].set_xlabel('Date',fontsize=\"20\")\naxes[1].set_ylabel('Turn over per month',fontsize=\"20\")\n\nplt.tight_layout()\ndel df_tmp\nplt.show()","69d15595":"fig,axes = plt.subplots(1,2,figsize=(25,8))\ndf_tmp = df[['Year','Month','Sales_per_item']].pivot_table(index=['Month'],columns=['Year'],aggfunc={\"Sales_per_item\":np.sum})\naxes[0].plot(df_tmp)\naxes[0].set_title('Total turn over (Total Sales)')\naxes[0].legend(labels=[i[1] for i in df_tmp.columns])\n\ndf_tmp = df[['Year','Month','item_cnt_day']].pivot_table(index=['Month'],columns=['Year'],aggfunc={\"item_cnt_day\":np.sum})\naxes[1].plot(df_tmp)\naxes[1].set_title('Total no of units sold')\naxes[1].legend(labels=[i[1] for i in df_tmp.columns])\nplt.suptitle('Monthly Sales - Yearly',fontsize=\"28\")\nplt.show()","c48c0951":"df_tmp = df[['date_block_num','shop_id','item_cnt_day']]\ndf_tmp.groupby(by='date_block_num').aggregate({'shop_id':'nunique'}).reset_index()","d32db614":"df_tmp = df[['date_block_num','shop_id','item_cnt_day']]\ndt = pd.pivot_table(index='date_block_num',data=df_tmp,columns='shop_id',aggfunc=\"sum\").reset_index(drop=True)\ndt = dt.item_cnt_day\ndt.columns.name = 'Month'\ndt","579de8b9":"def remove_outliers(df):\n    #remove outliers from item_cnt_day\n    df = df[df['item_cnt_day'] >= 0]\n    upper_quantile = df['item_cnt_day'].quantile(0.95)\n    df['item_cnt_day'] = np.where(df['item_cnt_day'] > upper_quantile, upper_quantile, df['item_cnt_day'])\n    \n    df = df[df['item_price'] >= 0]\n    upper_quantile = df['item_price'].quantile(0.95)\n    df['item_price'] = np.where(df['item_price'] > upper_quantile, upper_quantile, df['item_price'])\n    return df","68c70c83":"#load the merged data\ndf_train = pd.read_csv('merged_original.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\nprint(df_train.shape,df_test.shape)","7e5d305a":"#removing outliers as per our analysis\ndf_train = remove_outliers(df_train)\ndf_train.shape","9b7ef143":"#clippping values as per kaggle discussion\ndf_train['item_cnt_day'] = df_train['item_cnt_day'].clip(0,20)","ff115427":"# creating train data\ndf = df_train[['date_block_num','shop_id','item_id','item_cnt_day']]\ndata = pd.pivot_table(data=df,index=['shop_id','item_id'],columns=['date_block_num'],fill_value=0,values='item_cnt_day',aggfunc=\"sum\")\ndata = data.reset_index()\ndata.columns.name = None\nprint(df.shape)\nprint(data.shape)\ndata.head(4)","b3a0378a":"# Generating test data\n#merge\ntest_data = df_test.drop(columns=['ID'])\ntest_data = test_data.merge(data,on=['shop_id','item_id'],how=\"left\")\ntest_data.fillna(0,inplace=True)\ntest_data = test_data.drop(columns=['shop_id','item_id'])\ntest_data.head()","ab3b566a":"# train_data -> columns 0 to 32\nX_train = data.drop(columns=['shop_id','item_id',33,32],axis=1)\ny_train = data[32]\n\n# val_data -> columns 1 to 32\nX_val = data.drop(columns=['shop_id','item_id',0,33],axis=1)\ny_val = data[33]\n\n#test data-> columns 2 to 33\nX_test = test_data.drop(columns=[0,1])\n\nprint(X_train.shape,X_val.shape,X_test.shape)","a5cc3e2e":"df_corr = X_train.corr()\nplt.figure(figsize=(20,20))\n\nsns.heatmap(df_corr,annot=True)\nplt.show()","faf39804":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error","08b66b59":"# from itertools import product\n# # params\n# max_depth = [2,5,10]\n# n_estimators = [50,100,150,300]\n# min_samples_split = [2,4]\n\n# params =  [max_depth,n_estimators,min_samples_split]\n# parameters = list(product(*params))\n# min_rmse = float('inf')\n# best_params = parameters[0]\n# for p in parameters:\n#     depth = p[0]\n#     estimators = p[1]\n#     min_sample_split = p[2]\n    \n#     print(f\"Fitting params -> max_depth: {depth},n_estimators: {estimators} , min_samples_split:{min_sample_split}\")\n#     model = RandomForestRegressor(random_state=42,max_depth=depth,n_estimators=estimators,min_samples_split=min_sample_split)\n#     model.fit(X_train,y_train)\n#     y_train_pred = model.predict(X_train)\n#     y_val_pred = model.predict(X_val)\n    \n#     train_rmse = mean_squared_error(y_train,y_train_pred,squared=False)\n#     val_rmse = mean_squared_error(y_val,y_val_pred,squared=False)\n    \n#     print(f'Train rmse: {train_rmse}')\n#     print(f'Val rmse: {val_rmse}')\n    \n#     if val_rmse < min_rmse:\n#         min_rmse = val_rmse\n#         best_params = p\n        \n#     print('--'*50)\n\n    \n# print(f'Found following best parameters: max_depth: {best_params[0]},\\\n# n_estimators: {best_params[1]} , min_samples_split:{best_params[2]} with validation loss {min_rmse}')","8ae23aef":"#model\n# parameters found by grid search\n\n\nmodel = RandomForestRegressor(random_state=42,max_depth=5,n_estimators=50,min_samples_split=4)\nmodel.fit(X_train,y_train)\ny_train_pred = model.predict(X_train)\ny_val_pred = model.predict(X_val)\ny_test_pred = model.predict(X_test)\n\ntrain_rmse = mean_squared_error(y_train,y_train_pred,squared=False)\nval_rmse = mean_squared_error(y_val,y_val_pred,squared=False)\n\nprint(f'Train rmse: {train_rmse}')\nprint(f'Val rmse: {val_rmse}')","9d76d584":"import xgboost as xgb","c85beb5d":"# import xgboost as xgb\n# from itertools import product\n# import random\n\n# #params\n# booster = 'gbtree'\n# silent = 0\n\n# eta = [0.01,0.1,0.2,0.3]  #learning rate in gbm\n# min_child_weight = [1,2,0.5]  #minimum sum of weights of all observations required in a child\n# max_depth = [3,6,8]  #maximum depth of the tree\n# gamma = [0,1]  #a split will occur only when reduction in loss function > gamma \n# subsample = [0.5,0.7,1] #fraction of rows to be sampled to make a decision tree\n# colsample_bytree = [0.5,0.7,1] #fraction of columns to be sampled to make a decision tree\n# # lambda_ = [0.4,0.8,1] #L2 regularization weights\n# alpha = [0,1]  #L1 reg weights\n\n\n\n# params =  [eta,min_child_weight,max_depth,gamma,subsample,colsample_bytree,alpha]\n# parameters = list(product(*params))\n# parameters = random.sample(parameters,100)\n# len(parameters)\n\n\n# min_rmse = float('inf')\n# best_params = parameters[0]\n# for p in parameters:\n#     eta = p[0]\n#     min_child_weight = p[1]\n#     max_depth = p[2]\n#     gamma = p[3]\n#     subsample = p[4]\n#     colsample_bytree = p[5]\n#     alpha = p[6]\n\n#     print('Random Search On Hyperparamters Xgboost')\n#     print(f\"Fitting params -> eta: {eta},\\\n# min_child_weight: {min_child_weight} , max_depth:{max_depth}, gamma: {gamma}, subsample : {subsample}, \\\n# col_sample_bytree: {colsample_bytree:},alpha: {alpha}\")\n#     model = xgb.XGBRegressor(random_state=42,booster = 'gbtree',verbosity=0,\n#                              eta=eta,min_child_weight=min_child_weight,max_depth=max_depth,gamma=gamma,\n#                              subsample=subsample,colsample_bytree=colsample_bytree,alpha=alpha)\n    \n#     model.fit(X_train,y_train)\n#     y_train_pred = model.predict(X_train)\n#     y_val_pred = model.predict(X_val)\n    \n#     train_rmse = mean_squared_error(y_train,y_train_pred,squared=False)\n#     val_rmse = mean_squared_error(y_val,y_val_pred,squared=False)\n    \n#     print(f'Train rmse: {train_rmse}')\n#     print(f'Val rmse: {val_rmse}')\n    \n#     if val_rmse < min_rmse:\n#         min_rmse = val_rmse\n#         best_params = p\n        \n#     print('--'*50)\n\n    \n# print(f'Found following best parameters: eta: {best_params[0]},\\\n# min_child_weight: {best_params[1]} , max_depth:{best_params[2]}, gamma: {best_params[3]}, subsample : {best_params[4]}, \\\n# col_sample_bytree: {best_params[5]},alpha: {best_params[6]} with validation loss {min_rmse}')","2f0bfec8":"eta = 0.01\nmin_child_weight = 2\nmax_depth = 8\ngamma = 0\nsubsample  = 1\ncolsample_bytree = 0.5\nalpha = 1\n\nmodel = xgb.XGBRegressor(random_state=42,booster = 'gbtree',verbosity=0,\n                             eta=eta,min_child_weight=min_child_weight,max_depth=max_depth,gamma=gamma,\n                             subsample=subsample,colsample_bytree=colsample_bytree,alpha=alpha)\nmodel.fit(X_train,y_train)\ny_train_pred = model.predict(X_train)\ny_val_pred = model.predict(X_val)\ny_test_pred = model.predict(X_test)\n    \ntrain_rmse = mean_squared_error(y_train,y_train_pred,squared=False)\nval_rmse = mean_squared_error(y_val,y_val_pred,squared=False)\n    \nprint(f'Train rmse: {train_rmse}')\nprint(f'Val rmse: {val_rmse}')","365b5016":"submission = pd.DataFrame({'ID':df_test['ID'],'item_cnt_month':y_test_pred})\nsubmission.to_csv('submission.csv',index=False)\nsubmission.head(10)","7ec658cf":"# Submission","effb4776":"# 1. Introduction\n## Understanding Business Objective\nHere we will work with a challenging time-series dataset consisting of daily sales data, provided by one of the largest Russian software firms - 1C Company. We are given sales for 34 months from 2013-Jan to 2015 October.We need to predict no of each of the item that will gets sold in the month of november 2015 for given shop.ie, We will have a shop_id(unique identifier of a shop) and an item_id(unique identifier of an item) and we have to predict the number of units that item will gets sold in the month of november.\n\n\nNote: Note that the list of shops and products slightly changes every month. Creating a robust model that can handle such situations is part of the challenge.\n\n\n# 2. Importing Libraries\n","00693017":"Hyper parameter tuning and modeling","f09f1716":"Before getting in to let us take a sample of items which are getting sold on each day. Also it is important to note that there might be price change for the same item in different shops.So let us consider price development of sample of items in the same shop.","f9d94893":"Observation:\n- We have maxium units sold as well as maxiumum sales in shop id 31.\n- We have maximum units sold for item 20949. But maximum sales in terms of Turn over is for item number 3732. Its more over like selling of chocolate and television.\n- Similarly for item categories, we have maximum number of unit sold for item_category_id 40 while maximum sales in terms of turn over occured to category id 19.\n\nQuestion:\nAre there any items which are more than in one category.ie Do an item belongs to single category or not?","2d860c50":"# 5. Modeling","84e48233":"## Analysis On Item Price","1cc2865b":"Ok. Now we have our merged data. Let us go through each of the features\n\n\n## Analysis On Date","6e15767b":"## Observation:\nAs discussed earlier for test data we just have shop id and item id. Train data is spread over 4 files. From above samples we know that there are common ids on multiple files.It will be great to move forward once we merge those train files based on common id.","a7d8a39a":"## Train validation Split\nWe must be cautious while doing a train validation split. We have data from 2013 Jan to 2015 October and we need to predict Sales of month November.ie we have data of 34 months and we need to predict sales of 35th month.\n\n- Here we will take data from 1st month to 32nd month as train data (and we will predict 33nd month) \n- We will take data from 2nd month to 33nd month as validation data (and we will predict 34nd month) \n- Finally we will have data from 3rd to 34th month as test data","c01a37ea":"Observation:\n- We are looking at sales figure on daily basis. It is different from our target distribution\n- In most of the days only 1 item is sold.\n- We are also getting a clear idea on price range(after removing top 5% items.)","5662ed80":"Observation:\n- We can see that price of the same item is not same over the time(for some items).\n- Some items are also not selling on shops after some time.(might have stopped selling those product)\n- It increases and decreases over time.\n- During feature engineering it may be useful, if we can flag some items whose price remain constant over time\n- Here we can see that item price is dependent on time. This is the beauty of time series.","5c4525d7":"Observation:\n\n- Our 'date' was not in date time format.We have converted it to datetime and sorted our dataframe based on that.","5aa26ec4":"## Analysis on number of units sold (item_cnt_day)\nitem_cnt_day is the number of units of that item sold in that shop on a particular day.","86837a8e":"Observation:\n- We have about 60 unique shop ids 21807 unique item ids present in train data\n- It is important to note that about 363 item ids present in test data is not present in train data. So we have approximatly 363*60(no of unique shop ids)=102796 pairs which are note present in train data. So we can say that our model needs to be robust to capture this unseen patterns.\n\nQuestion:\nWhich shop id, item id and item category id have maximum sales?","8bfe20ed":"# 4. Exploratory Data Analysis\nBasic Analysis","a564e3d2":"Question:\nHow does sales over each day looks like?\n\nLet us see how sales distribution looks for a single day. Before that let us create a new feature which is the turn over for an item.We can consider it as total sales for an item from a particular shop on a particular day.","93d605b2":"Question:\nDo price of an item develop over time?","35420fc9":"Observation:\n* We can see that number of products sold as well as total turnover over the months follow almost same pattern.\n* We have maximum sales in the month of november and december.\n* Since we are predicting sales for november 2015 , we expect a raise in no of units sold\n\nQuestion:\n* Do all the shops sold items on all months from 2013 Jan to 2015 Oct?\n* Do some shops is deactive on mean time and become active again?","8d2ccbbc":"Hyperparameter tuning (Random Search)","261f6c78":"Let us take a sample of shops and plot the number of total items sold on each month. This gives an idea about the status of the shop in that month","2ad72d96":"Observation:\n- We have a total of 60 shops.But all of them are note active during all the months\n- For example in case of shop id 9 , it is active only in 9th 21th and 33th month. Shop id 0 and shop id 1 is only active in first two months. Shop id 52 is active on all the months.(From above pivot table) - We can see that some of the shops are not active in certain months and again they become active - On feature engineering we can create lag average of sales on shops as a feature.","720a0364":"Observation:\n- We have some item price less that zeros which ideally should not present.\n- Also we have some extreme outliers. After some analysis, we decide to remove all those values > 0.95 percentile similar to item_cnt_day.\n- After removing outliers, We have some products with price low as 0.07(Might be some chocolate). Also we have some item which costs about 2683(Might be a chair)","4e035f36":"Observation:\n- Most of the items are only sold 1 in quantity.Even 75th percentile value is 1.\n- We have some values less that zeros which ideally should not present. ie, no of units sold cannot be less than or equal to zero.Also we have some extreme outliers. After some analysis, we decide to remove all those values > 0.95 percentile.","6fa08766":"Observation:\n- We can see that there is only 1 category corresponding to a item_id\n\nQuestion:\nWhat about Monthly Sales?","497fac5e":"# 3. Data Overview\nWe have mainly 5 files:","cfb8c6ac":"# PREDICT FUTURE SALES\n## INDEX\n1. Introduction\n2. Import Libraries\n3. Data Overwiew\n4. Exploratory Data Analysis\n* Basic Analysis\n* Analysis On Date\n* Analysis on Number of Units Sold(item_cnt_day)\n* Analysis On Item Price\n* Q. How does sales over each day looks like?\n* Q. Do price of an item changer over time?\n* Analysis On Shop_id, item_id and item_category_id\n* Q. Do all item ids and shop ids present in train is present in test?\n* Q. Which shop id, item id and item category id have maximum sales?\n* Q. Are there any items which are more than in one category.ie Do an item belongs to single category or not?\n* Q. What about Monthly Sales?\n* Q. Do all the shops sold items on all months from 2013 Jan to 2015 Oct?\n5. Modeling\n\n* Train validation Split\n* Checking Coorelation Among Train Features\n* Baseline models\n\n* Random Forest Model\n* Xgboost Model\n* Submission","0014443a":"1. train.csv  -> showing item price and number of items sold on each date. \n2. shop.csv -> Details of shops corresponding to shop id in train.csv.\n3. item.csv -> Details of items corresponding to item id in train.csv\n4. item_categories.csv -> Details of item category corresponding to category id in item.csv\n5. test.csv -> test data for prediction\n\nLet us give an glimpse on each of the files\n\ntrain.csv\n--------\n\n- date: date in format dd\/mm\/yy.\n- date_block_num: a consecutive month number, used for convenience. January 2013 is 0, February 2013 is 1 and so on.\n- shop_id: unique identifier of a shop.\n- item_id: unique identifier of a product.\n- item_price: current price of an item.\n- item_cnt_day: number of products sold. We are predicting a monthly amount of this measure.\n\n\nshop.csv\n--------\n- shop_name: shop name corresponding to shop id in train.csv\n- shop_id\n\nitem.csv\n--------\n- item_name: item name corresponding to item id in train.csv\n- item_id\n- item_category_id: category id of item\n\n\nitem_category.csv\n-----------------\n- item_category_name: category name of item cooresponding to item_category_id in item.csv \n- item_category_id\n\ntest.csv\n----------\n- ID - an Id that represents a (Shop, Item) tuple within the test set\n- shop_id\n- item_id","010ba64e":"## Checking Coorelation Among Train Features","5a9c1a9a":"Observation:\n- We donot found any strong coorelated features\n\n### Baseline models\n### Random Forest\nAs of now we have enough information for going towards modeling. Let us create a baseline model to work with.We will go with a Random Forest model.","d9df8b97":"## Xgboost Model","5ac4b5a8":"Analysis On Shop_id, item_id and item_category_id\n\nQuestion:\n* Do all shop id present in test data present in train data and viceversa?\n* Do all item id present in test data present in train data and viceversa?\n* Do all shop id - item id pairs present in test data present in train data and viceversa?"}}