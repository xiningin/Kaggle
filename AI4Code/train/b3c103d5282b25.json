{"cell_type":{"c86ebd01":"code","cf093222":"code","7286740b":"code","1fa92ab8":"code","148e561d":"code","31fb5834":"code","f3e562c8":"code","8d72c77a":"code","1d94574a":"code","89182d1d":"code","473f4432":"code","3f72154e":"code","a07c6b99":"code","1173184a":"code","611aaa31":"code","39a64bc2":"code","f83c5c97":"code","b328c743":"code","663c542c":"code","0c2f0ce5":"code","15e21c8e":"code","8c469474":"code","e7a8d342":"code","fc4598f3":"code","3b85b192":"code","940c0178":"code","c52baba8":"code","fc861f51":"code","03dd9a7a":"code","88a2559e":"code","a145680a":"code","88ec7bee":"code","47f3459b":"code","1f3d0352":"code","354d7ab7":"code","75c36f00":"code","cbbb4bff":"code","b2605605":"code","fab831fe":"code","36b5ee67":"code","3686ba5e":"code","7ffaa56a":"code","dfb0e3db":"code","ce6baf1e":"code","80216c21":"code","97a4e0b6":"code","ddbed2fa":"code","56e7a3ec":"code","3b99ff0a":"code","e8fa69b1":"code","afc19419":"code","28d821e8":"code","08183623":"code","a2d8c2bb":"code","e0d6b965":"code","7c37a2be":"code","358f0fcb":"code","1a8bfbdb":"code","e03cba47":"code","045ddac4":"code","122aa317":"code","3e21d9c4":"code","f22969dc":"code","0c899eb8":"code","c4ce6fd9":"code","001ca71f":"code","a4c923d4":"code","e5dfc9c1":"code","52eef7bf":"markdown","ee1150e9":"markdown","3777d0f6":"markdown","85f54920":"markdown","c4a4e542":"markdown","4a167425":"markdown","de58780d":"markdown","d31d6c77":"markdown","1898a616":"markdown","54ea1fcc":"markdown","59f21e79":"markdown","4d468268":"markdown","0e48b5b6":"markdown","9e8817b8":"markdown","7eab6e90":"markdown","7f23ec83":"markdown"},"source":{"c86ebd01":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cf093222":"import pandas as pd\nimport numpy as np\nfrom collections import Counter\nfrom datetime import datetime\nfrom google.cloud import bigquery\nimport matplotlib.pyplot as plt\nimport os","7286740b":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')","1fa92ab8":"train.rename(columns = {'Province_State':'Province','Country_Region':'Country'},inplace = True)\ntest.rename(columns = {'Province_State':'Province','Country_Region':'Country'},inplace = True)","148e561d":"for i in range(len(train)):\n    if train.Province[i] is np.NaN:\n        train.Province[i] = train.Country[i]\nfor i in range(len(test)):\n    if test.Province[i] is np.NaN:\n        test.Province[i] = test.Country[i]","31fb5834":"def get_days(x):\n    x = datetime.strptime(x,'%Y-%m-%d')\n    first = datetime.strptime('2020-01-01','%Y-%m-%d')\n    diff = (x - first).days\n    return diff","f3e562c8":"train['Days_After_1stJan'] = train.Date.apply(lambda x :get_days(x))\ntest['Days_After_1stJan'] = test.Date.apply(lambda x :get_days(x))","8d72c77a":"train.head()","1d94574a":"test.head()","89182d1d":"def get_dt(x):\n    x = datetime.strptime(x,'%Y-%m-%d')\n    return x\ndef get_dayofweek(x):\n    return x.dayofweek\ndef get_month(x):\n    return x.month\ndef get_day(x):\n    return x.day","473f4432":"train['Date'] = train.Date.apply(lambda x:get_dt(x))\ntest['Date'] = test.Date.apply(lambda x:get_dt(x))\ntrain['Dayofweek'] = train.Date.apply(lambda x:get_dayofweek(x))\ntest['Dayofweek'] = test.Date.apply(lambda x:get_dayofweek(x))\ntrain['Month'] = train.Date.apply(lambda x:get_month(x))\ntest['Month'] = test.Date.apply(lambda x:get_month(x))\ntrain['Day'] = train.Date.apply(lambda x:get_day(x))\ntest['Day'] = test.Date.apply(lambda x:get_day(x))","3f72154e":"country_info = pd.read_csv('\/kaggle\/input\/population\/population_by_country_2020.csv')","a07c6b99":"population = pd.DataFrame(country_info.iloc[:,[0,1,4,5,6,8,9]])\npopulation.columns = ['Country','Population','Density','Land_Area','Migrants','MedAge','UrbanPopRate']","1173184a":"for i in range(len(population)):\n    if np.isnan(population.Migrants[i]):\n        population.Migrants[i] = np.nanmedian(population.Migrants)\n    if population.MedAge[i] == 'N.A.':\n        population.MedAge[i] = 19\n    if population.UrbanPopRate[i] == 'N.A.':\n        population.UrbanPopRate[i] = '57%'","611aaa31":"kosovo = pd.DataFrame([['Kosovo'],[2000700],[168],[10887],[0],[19],['57%']])\nkosovo = kosovo.T\nkosovo.columns = population.columns\n\n\npopulation = population.append(kosovo)","39a64bc2":"westbank = pd.DataFrame([['West Bank and Gaza'],[2697687],[485],[5559],[0],[19],['57%']])\nwestbank = westbank.T\nwestbank.columns = population.columns\n\npopulation = population.append(westbank)","f83c5c97":"DP = pd.DataFrame(['Diamond Princess',2666,191522,0.01392,2666,19,'100%'])\nDP = DP.T\nDP.columns = population.columns\n\npopulation = population.append(DP)","b328c743":"Shangdan = pd.DataFrame(['MS Zaandam',1432,189618,0.007552,1432,19,'100%'])\nShangdan = Shangdan.T\nShangdan.columns = population.columns\n\npopulation = population.append(Shangdan)","663c542c":"Congo = population[population.Country == 'Congo']\nCongo['Country'] = 'Congo (Brazzaville)'\nnew1 = Congo.copy()\nCongo['Country'] = 'Congo (Kinshasa)'\nnew2 = Congo.copy()\n\npopulation = population.append(new1)\npopulation = population.append(new2)","0c2f0ce5":"population.Country[population.Country == 'United States'] = 'US'\npopulation.Country[population.Country == 'Taiwan'] = 'Taiwan*'\npopulation.Country[population.Country == 'South Korea'] = 'Korea, South'\npopulation.Country[population.Country == 'C\u00f4te d\\'Ivoire'] = 'Cote d\\'Ivoire'\npopulation.Country[population.Country == 'Czech Republic (Czechia)'] = 'Czechia'\npopulation.Country[population.Country == 'Myanmar'] = 'Burma'\npopulation.Country[population.Country == 'St. Vincent & Grenadines'] = 'Saint Vincent and the Grenadines'\npopulation.Country[population.Country == 'Saint Kitts & Nevis']  = 'Saint Kitts and Nevis'\npopulation.Country[population.Country == 'Sao Tome & Principe']  = 'Sao Tome and Principe'","15e21c8e":"train = pd.merge(train,population,left_on = 'Country',right_on='Country',how='left')\ntest = pd.merge(test,population,left_on = 'Country',right_on='Country',how = 'left')","8c469474":"train.head()","e7a8d342":"test.head()","fc4598f3":"temperature = pd.read_csv('\/kaggle\/input\/weather-data-for-covid19-data-analysis\/training_data_with_weather_info_week_4.csv')\ntemperature.rename(columns = {'Province_State':'Province','Country_Region':'Country'},inplace = True)","3b85b192":"# fill NAN of Province with Country name\nfor i in range(len(temperature)):\n    if temperature.Province[i] is np.NaN:\n        temperature.Province[i] = temperature.Country[i]","940c0178":"#delete useless features \ndel temperature['ConfirmedCases']\ndel temperature['Fatalities']\ndel temperature['country+province']\ndel temperature['day_from_jan_first']","c52baba8":"#transform date to datetime type\ntemperature.Date = temperature.Date.apply(lambda x:get_dt(x))","fc861f51":"day1 = datetime.strptime('2020-04-09','%Y-%m-%d')\nday2 = datetime.strptime('2020-04-10','%Y-%m-%d')\nday3 = datetime.strptime('2020-04-11','%Y-%m-%d')\nday4 = datetime.strptime('2020-04-12','%Y-%m-%d')","03dd9a7a":"index_delete = []\nfor i in range(len(train)):\n    if (train.Date[i] == day1) or (train.Date[i] == day2) or (train.Date[i] == day3) or (train.Date[i] == day4):\n        index_delete.append(i)\n        \ntrain = (train.drop(index = index_delete)).reset_index(drop = True)","88a2559e":"train = pd.merge(train,temperature,on=['Country','Province','Date'],how='left')","a145680a":"#fill NAN\ntrain['Lat'][train['Lat'].isnull()] = np.nanmedian(train['Lat'])\ntrain['Long'][train['Long'].isnull()] = np.nanmedian(train['Long'])\ntrain['temp'][train['temp'].isnull()] = np.nanmedian(train['temp'])\ntrain['min'][train['min'].isnull()] = np.nanmedian(train['min'])\ntrain['max'][train['max'].isnull()] = np.nanmedian(train['max'])\ntrain['slp'][train['slp'].isnull()] = np.nanmedian(train['slp'])\ntrain['dewp'][train['dewp'].isnull()] = np.nanmedian(train['dewp'])\ntrain['rh'][train['rh'].isnull()] = np.nanmedian(train['rh'])\ntrain['ah'][train['ah'].isnull()] = np.nanmedian(train['ah'])\ntrain['stp'][train['stp'].isnull()] = np.nanmedian(train['stp'])\ntrain['wdsp'][train['wdsp'].isnull()] = np.nanmedian(train['wdsp'])\ntrain['prcp'][train['prcp'].isnull()] = np.nanmedian(train['prcp'])\ntrain['fog'][train['fog'].isnull()] = np.nanmedian(train['fog'])","88ec7bee":"!pip install pmdarima","47f3459b":"import pmdarima","1f3d0352":"#the outlier 'inf' will make the auto_arima come to an error,so it's replaced by 0\ntrain.replace(np.inf,0,inplace=True)","354d7ab7":"#Using arima to predict the weather information for future\ndate_pred_df = pd.DataFrame(sorted(list(set(test.Date))),columns=['Date'])\ndate_pred_df = date_pred_df[7:]\ndate_pred_df.reset_index(inplace = True)\ndel date_pred_df['index']\n\nnperiods = (datetime.strptime('2020-05-14','%Y-%m-%d')-datetime.strptime('2020-04-08','%Y-%m-%d')).days\n\nweather_feature = ['temp', 'min', 'max', 'stp', 'slp', 'dewp', 'rh', 'ah','wdsp', 'prcp', 'fog']\nweather_pred = pd.DataFrame(columns=['Date','temp', 'min', 'max', 'stp', 'slp', 'dewp', 'rh', 'ah','wdsp', 'prcp', 'fog'])\nfor prov in list(set(train.Province)):\n    df = train[train.Province == prov]\n    province_pred = date_pred_df.copy()\n    for feature in weather_feature:\n        ts = df[feature]\n        model = pmdarima.auto_arima(ts)\n        pred = model.predict(n_periods = nperiods)\n        province_pred[feature] = pred\n    province_pred['Province'] = prov\n    weather_pred = pd.concat([weather_pred,province_pred],axis = 0)","75c36f00":"test","cbbb4bff":"for i in range(len(test)):\n    if test.Date[i]<datetime.strptime('2020-04-09','%Y-%m-%d'):\n        test.drop(i,inplace=True)","b2605605":"#get longitude and latitude dataframe and merge it into test df\ndf_longlat = pd.DataFrame(columns = ['Province','Lat','Long'])\nfor i in range(len(train)):\n    if train.Province[i] not in list(df_longlat.Province):\n        df_longlat = df_longlat.append(train.iloc[i][['Province','Lat','Long']])\n        \ntest = pd.merge(test,df_longlat,on = 'Province',how = 'left')","fab831fe":"#adding weather feature to test data\ntest = pd.merge(test,weather_pred,on = ['Province','Date'],how = 'left')","36b5ee67":"train.head()","3686ba5e":"test.head()","7ffaa56a":"API_beds = pd.read_csv('\/kaggle\/input\/newest-bed-api-for-each-country\/Newest_avg_bed_API.csv')","dfb0e3db":"#merge\ntrain = pd.merge(train,API_beds,left_on='Country',right_on='Country',how='left')\ntest = pd.merge(test,API_beds,left_on='Country',right_on='Country',how='left')","ce6baf1e":"#fill NAN\ntrain.API_beds[train.API_beds.isnull()] = np.nanmedian(train.API_beds)\ntest.API_beds[test.API_beds.isnull()] = np.nanmedian(test.API_beds)","80216c21":"train.head()","97a4e0b6":"test.head()","ddbed2fa":"X = train.copy()\nX_test = test.copy()\n\nProvince_set = set(X.Province)\nCountry_set = set(X.Country)\n\nX = pd.concat([X,pd.get_dummies(X.Country)],axis=1)\nX_test = pd.concat([X_test,pd.get_dummies(X_test.Country)],axis=1)\nX = pd.concat([X,pd.get_dummies(X.Province)[Province_set - Country_set]],axis=1)\nX_test = pd.concat([X_test,pd.get_dummies(X_test.Province)[Province_set - Country_set]],axis=1)\n\ny_confirm = X.ConfirmedCases\ny_fata = X.Fatalities\n","56e7a3ec":"del X['ConfirmedCases']\ndel X['Fatalities']\ndel X['Id_x']\ndel X['Date']\ndel X['Id_y']\ndel X['Province']\ndel X['Country']","3b99ff0a":"ForecastId = X_test.ForecastId","e8fa69b1":"def get_percent(x):\n    x = str(x)\n    x = x.strip('%')\n    x = float(x)\/100\n    return x","afc19419":"X['UrbanPopRate'] = X.UrbanPopRate.apply(lambda x:get_percent(x))\nX_test['UrbanPopRate'] = X_test.UrbanPopRate.apply(lambda x:get_percent(x))","28d821e8":"del X_test['ForecastId']\ndel X_test['Date']\ndel X_test['Province']\ndel X_test['Country']","08183623":"X = pd.DataFrame(X,dtype=float)\nX_test = pd.DataFrame(X_test,dtype=float)","a2d8c2bb":"order = X.columns\nX_test = X_test[order]","e0d6b965":"X.head()","7c37a2be":"X_test.head()","358f0fcb":"import xgboost as xgb","1a8bfbdb":"reg_confirm = xgb.XGBRegressor()\nreg_confirm.fit(X,y_confirm)","e03cba47":"pred_confirm = reg_confirm.predict(X_test)","045ddac4":"reg_fata = xgb.XGBRegressor()\nreg_fata.fit(X,y_fata)","122aa317":"pred_fata = reg_fata.predict(X_test)","3e21d9c4":"submit = pd.DataFrame(ForecastId)\nsubmit['ConfirmedCases']=pred_confirm\nsubmit['Fatalities']=pred_fata","f22969dc":"temp_submit_df = submit.copy()\ntemp_submit_df['Province'] = test.Province\ntemp_submit_df['Date'] = test['Date']\ndel temp_submit_df['ForecastId']","0c899eb8":"original_train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')\nnew_test = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')","c4ce6fd9":"original_train.Date = original_train.Date.apply(lambda x:get_dt(x))\noriginal_train.rename(columns = {'Province_State':'Province','Country_Region':'Country'},inplace = True)\nfor i in range(len(original_train)):\n    if original_train.Province[i] is np.NaN:\n        original_train.Province[i] = original_train.Country[i]\n        \nfor i in range(len(original_train)):\n    if original_train.Date[i]<datetime.strptime('2020-04-02','%Y-%m-%d') or original_train.Date[i]>datetime.strptime('2020-04-08','%Y-%m-%d'):\n        original_train.drop(i,inplace=True)\n        \ndel original_train['Id']\ndel original_train['Country']","001ca71f":"final = pd.concat([temp_submit_df,original_train],axis = 0)\nfinal = final.sort_values(by=['Province','Date'])\nfinal_submit = pd.DataFrame(new_test.ForecastId,columns=['ForecastId'])\nfinal_submit['Confirmed'] = final.ConfirmedCases.values\nfinal_submit['Fatalities'] = final.Fatalities.values","a4c923d4":"final_submit","e5dfc9c1":"final_submit.to_csv('\/kaggle\/working\/submission.csv',index=False)","52eef7bf":"### fill NAN with median and mode","ee1150e9":"### fill the missing 'Province' with 'Country'","3777d0f6":"# Preprocessing","85f54920":"# XGBoost Training","c4a4e542":"# Merge population information for each country","4a167425":"### Change names of countries to match names in train dataframe","de58780d":"### transform date to days","d31d6c77":"### since the weather data only contains information up to 2020-04-08,I delete the data of last 4days in the train dataframe","1898a616":"# Add weather information","54ea1fcc":"### Add Date Features","59f21e79":"# Adding Index of Beds per person","4d468268":"### Use auto arima to forecast weather data","0e48b5b6":"### Collect data for countries without population info manually","9e8817b8":"# Set train data for XGBoost","7eab6e90":"### merge df","7f23ec83":"### Select wanted features from table"}}