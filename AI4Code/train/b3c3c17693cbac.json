{"cell_type":{"4cf8e15d":"code","cf94a605":"code","d0a6a510":"code","f012ab66":"code","e4212fe4":"code","f33ed657":"code","97230991":"code","0e68b103":"code","7d834ab4":"code","135945c7":"code","50157339":"code","52f92231":"code","2e58f30c":"code","d2651451":"code","c4bac864":"code","2b4a822c":"code","7b492de4":"code","8a660454":"code","22ac7e5b":"code","1cfff774":"code","4376a700":"code","5b6e7845":"code","962a78b9":"code","3375a330":"code","51139e80":"code","dc065989":"code","3ee69658":"code","cd7f7543":"code","c0ae7c78":"code","29b7258c":"code","d9568318":"code","98748127":"code","ea8342ff":"code","a1267af4":"code","6f71675e":"code","137b0c97":"code","5fc5f3ba":"code","5c1ce438":"code","86598f47":"code","9e307bf9":"code","d6630800":"code","ace41b0a":"code","0d603093":"code","ee488744":"code","ceeedd08":"code","9600b1fc":"code","e6a6ec89":"code","9b713c05":"code","5ace0974":"code","246c9945":"code","f3660d37":"code","0d553201":"code","b676bd93":"code","9e5ea1be":"code","b4f75f60":"code","c9aeeef9":"code","fa8b0028":"code","9026417e":"code","9ce558a2":"markdown","f45eb27b":"markdown","43890dbb":"markdown","1368f0f5":"markdown","5438c351":"markdown","36c6aa75":"markdown","8b61866d":"markdown","5d06b93e":"markdown","f6efb653":"markdown","28961dc7":"markdown","e255d327":"markdown","e988ca41":"markdown","7309489e":"markdown","81462d66":"markdown","e6dab9f1":"markdown"},"source":{"4cf8e15d":"#In this notebook, I tried to understand the relationship between variables and classify who survived and  who did not . with help of  (1 - data visualization  2 - feature Engineering  3 - model building )\n\n\n## Overview \n### 1) Understand the data (Shape , missing values , data types , ...)\n\n### 2) Data Visualization  (Histograms,box plots)\n\n### 3) Data Preprocessing and Feature Engineering\n\n### 4) Model Building ","cf94a605":"!pip install  xgboost==1.4.1","d0a6a510":"# Data Visualization \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# Data PreProcessing and Feature Engineering\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import OneHotEncoder\nimport re\n\n\n# Model Building \nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom  xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\n# import dataset\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\nimport warnings  # For hiding warnings\nfrom termcolor import cprint # For making colorful printing texts\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nsns.set_style(\"darkgrid\")","f012ab66":"# import  datasets in (csv) format using pandas \n\ntrain = pd.read_csv('..\/input\/titanic\/train.csv') # reading training set (data use for training model)\n\ntest  = pd.read_csv('..\/input\/titanic\/test.csv')  # reading testing set (data use for testing model)\n\ndataset = train.append(test, ignore_index=True) # combine train and test data to preprocessing data easier","e4212fe4":"# Showing first samples of train set\ntrain.head()","f33ed657":"# Showing first samples of test data\ntest.head()","97230991":"# Showing Count of null Values and Data type of Train & Test data\ntrain.info()\n\ncprint('*'*42,'green')  # print colorfull text with cprint \n\ntest.info()","0e68b103":"# using .describe() to understand better  numeric data of train data\ntrain.describe()","7d834ab4":"test.describe()\n","135945c7":"cprint('Null Values in Training Data :','green')\nprint(train.isnull().sum()) # showing null values of train data\ncprint('Null Values in Test Data :','green')\nprint(test.isnull().sum()) # showing null values  of test data\n\nplt.figure(figsize=(18,18))\n\n# using .heatmap() from seaborn to visualize null values\nplt.subplot(221)\nsns.heatmap(train.isnull(), yticklabels = False, cmap='plasma')\nplt.title('Null Values Of Train Data ',size=15);\nplt.subplot(222)\nsns.heatmap(test.isnull(), yticklabels = False)\nplt.title('Null Values Of Test Data',size=15);","50157339":"cprint('Percent Of Survived :','green')\n# Showing  Percentage of survivors of Both gender Male\/Female\nprint(train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False))\n\ncprint('Count Of Male\/Female :','green')\n# Showing  Count of Both gender Male\/Female\nprint(train.groupby('Sex').size())\n\nfig, (axis1,axis2) = plt.subplots(1,2,figsize=(14,6))\n\n# using .countplot() from seaborn to visualize  Count of each gender and survived percent\nsns.countplot(x = 'Survived', hue='Sex', data=train, ax =  axis1)\naxis2.set_title('Number of passenger Survived By Gender')\n\nsns.countplot(x='Sex',data=train,hue='Sex', ax = axis2)\naxis1.set_title('Number of passenger did\/didnt Survived By Gender')","52f92231":"sns.catplot(x = 'Sex', y = 'Survived', data = train, kind = 'bar', col = 'Pclass')\n","2e58f30c":"cprint('Percent Of Survived :','green')\n\n# Showing  Percentage of survivors of Each Embarked\nprint(train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False))\n\ncprint('Count Of Each Embarked  :','green')\n\n# Showing  Count  of Pepole  of Each Embarked\nprint(train.groupby('Embarked').size())\n\nfig, (axis1,axis2) = plt.subplots(1,2,figsize=(14,6))\n\n# Showing  count of survived of Each Embarked\nsns.countplot('Embarked', hue = 'Survived', data = train,ax=axis1)\naxis1.set_title('Number of passenger did\/didnt Survived in each Pclass')\nsns.countplot(x='Survived',data=train,hue='Embarked', ax = axis2)\naxis2.set_title('Number of passenger Survived in each Pclass')\n","d2651451":"sns.catplot(x = 'Embarked', y = 'Survived', kind = 'bar', data = train, col = 'Sex')\n","c4bac864":"plt.figure(figsize = (14, 6))\n# showing distribute of age column with .distplot() of seaborn\nsns.distplot(train['Age'])\nplt.title('Age Distribution of passengers',)","2b4a822c":"# showing mean age of Male\/Female using boxplot\nsns.catplot(x = 'Sex', y = 'Age', kind = 'box', data = train, height = 5, aspect = 2)\nplt.title('Mean Value of Age of each gender',)","7b492de4":"# showing mean age of each geneder of each Ticket class (Pclass) using boxplot\nsns.catplot(x = 'Sex', y = 'Age', kind = 'box', data = train, col = 'Pclass')\n#plt.title('Mean Value of Age of each male\/femlae in  Pclasses')\nplt.suptitle('Mean Value of Age of each male\/femlae in  Pclasses')","8a660454":"plt.figure(figsize = (14, 6))\n# showing mean age of each Ticket class (Pclass) using boxplot\nsns.boxplot(x='Pclass',y='Age',data=train)\nplt.title('Mean Value of Age of each  Pclass Passengers (Train Data)',)","22ac7e5b":"plt.figure(figsize = (14, 6))\n# showing mean age of each Ticket class (Pclass) using boxplot for test data\nsns.boxplot(x='Pclass',y='Age',data=test)\nplt.title('Mean Value of Age of each  Pclass Passengers (Test Data)',)","1cfff774":"plt.figure(figsize = (14, 6))\n# showing histogram of Paid Fare using .hist() of matplotlib \nplt.hist('Fare',data=train, bins = 60)\nplt.title('Difference in the amount of \u00a0Fare paid')","4376a700":"cprint('Percent Of Survived :','green')\n# Showing  Percentage of survivors of Siblings or  couples \nprint(train[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False))\ncprint('Count Of Each Embarked  :','green')\n# Showing  count of   Siblings or  couples \nprint(train.groupby('SibSp').size())\nplt.figure(figsize = (14, 6))\n# using .countplot() of seaborn to  visualize  Count survived Siblings or  couples \nsns.countplot(x = 'SibSp', data = train, hue = 'Survived')\nplt.title('Number of Siblings or  couples  Survived by gender')","5b6e7845":"cprint('Percent Of Survived :','green')\n# Showing  Percentage of survivors of Parents \/children   \nprint(train[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False))\ncprint('Count Of Each Embarked  :','green')\n# Showing  count of   Parents \/children   \nprint(train.groupby('Parch').size())\n# using .countplot() of seaborn to  visualize  Count survived Siblings or  couples \nsns.catplot(x = 'Parch', y = 'Survived', data = train, hue = 'Sex', kind = 'bar', height = 6, aspect = 2)\nplt.title('Number of Siblings or  couples  Survived')","962a78b9":"plt.figure(figsize = (10, 6))\n# using .heatmap() of seaborn to understand better relationship of variables \nsns.heatmap(train.corr(), annot=True)\nplt.title('Corelation Matrix');","3375a330":"train.head()","51139e80":"# replace Gender with 0 and 1  in test & train data\n\ndataset.Sex[dataset.Sex == 'male'] = 0 # repalce male with 0\ndataset.Sex[dataset.Sex == 'female'] = 1 # repalce female with 1","dc065989":"\n# Convert Embarked into dummies using pd.get_dummies()\ndummies  = pd.get_dummies(dataset.Embarked)\ndataset = pd.concat([dataset,dummies],axis='columns')\ndataset.drop(['Embarked'],axis='columns',inplace=True)","3ee69658":"# replace Nan values of Cabin with U (Unknown)\ndataset.Cabin = dataset.Cabin.fillna('U')","cd7f7543":"\n# Using Regex to find letters and categories better cabin \ndataset.Cabin = dataset.Cabin.map(lambda x:re.compile(\"([a-zA-Z])\").search(x).group())\n\ndataset.groupby('Cabin').size()","c0ae7c78":"# replace Cabins with numbers \ncabin_dictionary = {'A':1 , 'B':2, 'C':3 , 'D':4 , 'E':5 , 'F':6 , 'G':7 , 'T':8 , 'U':9}\n\ndataset = dataset.replace({'Cabin':cabin_dictionary})\n","29b7258c":"# combaine number of siblings and  spouses  to get  FamilySize \ndataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n","d9568318":"# replace missing Fare value of test data with median of Fares \ndataset.Fare = dataset.Fare.fillna(dataset.Fare.median())","98748127":"# drop unused columns of test and train data \ndataset = dataset.drop(['Name','SibSp', 'Parch', 'Ticket'], axis = 1)","ea8342ff":"# split train  and test set \ntrain_main = dataset[dataset['Survived'].notna()] # train set Survived != null\ntest_main  = dataset[dataset['Survived'].isnull()] # train set Survived == null","a1267af4":"# replace Missing values of age row with mean age of each Ticket class (Pclass) of train data\ndef clean_training_age(columns) :\n    Age = columns[0]\n    Pclass = columns[1]\n    \n    if pd.isnull(Age):\n        if Pclass ==1 :\n            return 37\n        elif  Pclass == 2 :\n            return 29\n        else : \n            return 24\n    else : \n        return Age","6f71675e":"# replace Missing values of age  with mean age of each Ticket class (Pclass) of test data\ndef clean_test_age(columns) :\n    Age = columns[0]\n    Pclass = columns[1]\n    \n    if pd.isnull(Age):\n        if Pclass ==1 :\n            return 44\n        elif  Pclass == 2 :\n            return 27\n        else : \n            return 23\n    else : \n        return Age","137b0c97":"# fill age missing values with mean age of each Pclass according to the  boxplot\ntrain_main.Age = train_main[['Age','Pclass']].apply(clean_training_age,axis=1) \ntest_main.Age = test_main[['Age','Pclass']].apply(clean_test_age,axis=1) ","5fc5f3ba":"# drop Survived of  test data \ntest_main.drop('Survived',axis =1,inplace=True)","5c1ce438":"train_main.head()","86598f47":"test_main.head()","9e307bf9":"# split independent and dependent variables\nX_train = train_main.drop('Survived',axis=1) # independent\ny_train = train_main.Survived # dependent","d6630800":"# scale our independent variables  with help  StandardScaler\nfrom sklearn.preprocessing import StandardScaler \nscaler = StandardScaler()\nX_train_scale = scaler.fit_transform(X_train)\ntest_main_scale  = scaler.fit_transform(test_main) ","ace41b0a":"lrc = LogisticRegression()\nlrc.fit(X_train_scale,y_train)","0d603093":"y_pred_lrc = lrc.predict(test_main_scale).astype(int)","ee488744":"svm = SVC()\nsvm.fit(X_train_scale,y_train)\n","ceeedd08":"y_pred_svm = svm.predict(test_main_scale).astype(int)","9600b1fc":"knn = KNeighborsClassifier()\nknn.fit(X_train_scale,y_train)","e6a6ec89":"y_pred_knn = knn.predict(test_main_scale).astype(int)\n","9b713c05":"nb = GaussianNB()\nnb.fit(X_train,y_train)","5ace0974":"y_pred_nb = nb.predict(test_main).astype(int)","246c9945":"dt = DecisionTreeClassifier()\ndt.fit(X_train,y_train)","f3660d37":"y_pred_dt = dt.predict(test_main).astype(int)","0d553201":"rf = RandomForestClassifier()\nrf.fit(X_train,y_train)","b676bd93":"y_pred_rf = rf.predict(test_main).astype(int)","9e5ea1be":"gbc = GradientBoostingClassifier()\ngbc.fit(X_train,y_train)","b4f75f60":"y_pred_gbc = gbc.predict(test_main).astype(int)\n","c9aeeef9":"xgb = XGBClassifier(colsample_bylevel= 0.9,\n                    colsample_bytree = 0.8, \n                    gamma=0.99,\n                    max_depth= 5,\n                    min_child_weight= 1,\n                    n_estimators= 8,\n                    nthread= 5,\n                    random_state= 0,\n                    )\nxgb.fit(X_train_scale,y_train)","fa8b0028":"y_pred_xgb = xgb.predict(test_main_scale).astype(int)","9026417e":"final_data_1 = {'PassengerId': test_main.PassengerId, 'Survived': y_pred_xgb}\nsubmission_1 = pd.DataFrame(data=final_data_1)\nsubmission_1.to_csv('submission_xgb.csv',index =False)","9ce558a2":"## [Support vector machine](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.svm.SVC.html)","f45eb27b":"## [K nearest neighbors](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neighbors.KNeighborsClassifier.html)","43890dbb":"## Output\n### save output as csv","1368f0f5":"# Data Visualization \nthis part realy helped me to understand data better especially for (feature engineering and data cleaning) for example what's the percent of survived and mean age of each Pclass and ... , with help of seaborn and matplotlib to visualize the data","5438c351":"# Building and Evaluating Model\nNow it's time to sell our fresh house and our house  buyers or customers are Models  (ML algorithms) whoever offers a higher price (more accuracy) can buy the house, note that house customers based on the house (data) and house features (data features) and house usage purpose (classification or regression)","36c6aa75":"# Understanding The Data \nIn this part , I tried to get a background of the data that im gonna use like what is the data types , how many missing values our data have ,  and describe the numeric variables of the data wuth help of (Pandas,Numpy,Python)","8b61866d":"## [Decision Tree](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.tree.DecisionTreeClassifier.html)","5d06b93e":"## [RandomForest](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestClassifier.html)","f6efb653":"## Cleaning and  Data Preprocessing and Feature Engineering Data \n\n This is the most important part of the project in my opinion, your data  can be compared to a dirty and old house that you have to clean and change its decoration and add new rooms to it , The more beautiful and new and bigger  your house is ,  higher (more accurate)  it will be sold :D\n#### 1) OneHot Encoding Gender \n\n#### 2) Convert Embarked into dummies\n\n#### 3) Fill Missing Values of Cabin and categorise it better\n\n#### 4) Convert Cabins into numbers \n\n#### 5) Create a new feature as FamilySize\n\n#### 6) Drop unused columns\n\n#### 7) Fill Missing Values of Fare\n\n#### 8) Fill Missing Values of Age\n","28961dc7":"## [GradientBoostingClassifier](http:\/\/scikitlearn.org\/stable\/modules\/generated\/sklearn.ensemble.GradientBoostingClassifier.html)","e255d327":"## [LogisticRegression](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LogisticRegression.html)","e988ca41":"## [Naive Bayes](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.naive_bayes.GaussianNB.html)","7309489e":"## [XGBClassifier](https:\/\/xgboost.readthedocs.io\/en\/latest\/index.html)","81462d66":"## Scaling Data\nTip : usually we dont StandardScale data with dummies and OneHot encoded varibels include but  in this case it doesn't matter use the standardscaler  because the scaling is independently for each colum","e6dab9f1":"# Libraries used in the project\n\n- [seaborn](https:\/\/seaborn.pydata.org\/)\n- [matplotlib](https:\/\/matplotlib.org\/)\n- [numpy](https:\/\/numpy.org\/)\n- [pandas](https:\/\/pandas.pydata.org\/)\n- [termcolor](https:\/\/pypi.org\/project\/termcolor\/)\n- [sklearn](https:\/\/scikit-learn.org\/stable\/)\n- [xgboost](https:\/\/xgboost.readthedocs.io\/en\/latest\/index.html)\n- re\n- warnings"}}