{"cell_type":{"f1f32545":"code","6f66c15a":"code","3fb52206":"code","f49a57e5":"code","634435ec":"code","00b29656":"code","b8ee5522":"code","59f3ab6b":"code","16dc73c4":"code","71ec68c4":"code","dc81e6ba":"code","bf8c4408":"code","20fc5caa":"code","8e4bba58":"code","2f710383":"code","f3df177c":"markdown","595b13ce":"markdown","fd3753ea":"markdown","71b317de":"markdown"},"source":{"f1f32545":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.metrics import confusion_matrix\nimport numpy as np\n\nfrom keras.layers import Lambda, Dense, Activation, Conv2D, MaxPooling2D, Flatten, Dropout, BatchNormalization, Input, GlobalAveragePooling2D\n\nfrom keras.models import Model\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom glob import glob\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6f66c15a":"!ls ..\/input\/fruits-360_dataset\/fruits-360\n#Explore the files by changing folder names in above code","3fb52206":"train_path = '..\/input\/fruits-360_dataset\/fruits-360\/Training'\ntest_path = '..\/input\/fruits-360_dataset\/fruits-360\/Test'","f49a57e5":"#Just to disply the a roandom image. \nimage_files = glob(train_path + '\/*\/*.jp*g')\nimport matplotlib.pyplot as plt\n# look at an image for fun\nplt.imshow(image.load_img(np.random.choice(image_files)))\nplt.show()","634435ec":"# The database is gettting updated very frequently. So better keep a code to find the number of classes.\nfolders = glob(train_path + '\/*')\nlen(folders)","00b29656":"IMAGE_SIZE = [100, 100] \n\n# training config:\nepochs = 5\nbatch_size = 32","b8ee5522":"# A very simple convolutional NN using keras, Batch Normalisation is used\ninp = Input(shape=(100,100,3))\nx = Conv2D(128, (3, 3), padding='same')(inp)\nx =BatchNormalization()(x) \nx =Activation('relu')(x)\nx =MaxPooling2D(strides = (1,1))(x)\n\n\nx = Conv2D(64, (3, 3), padding='same')(x)\nx=BatchNormalization()(x)\nx=Activation('relu')(x)\nx=MaxPooling2D(strides = (1,1))(x)\n\n# Global average pooling is said to be better than Flatten\nx= GlobalAveragePooling2D()(x)\n\n\nx= Dense(2000, activation = 'relu')(x)\nx= Dropout(0.5, noise_shape=None, seed=None)(x)\n\nx= Dense(250, activation = 'relu')(x)\nx= Dropout(0.3, noise_shape=None, seed=None)(x)\nout = Dense(len(folders),activation = 'softmax')(x)\n\nmodel = Model(inp,out )\nmodel.summary()","59f3ab6b":"#compile the model\nmodel.compile(loss = 'categorical_crossentropy',\n             optimizer = 'Adam',\n             metrics = ['accuracy'])","16dc73c4":"#Image generator augments image. Here its also used for train, validation split.\ndatagen = ImageDataGenerator(rotation_range = 20,\n                              width_shift_range=0.1,\n                              height_shift_range=0.1,\n                              shear_range=0.1,\n                              zoom_range=0.2,\n                              horizontal_flip=True,\n                              vertical_flip=True,\n                              #preprocessing_function=preprocess_input,\n                              validation_split=0.2,\n)","71ec68c4":"#Image generator is used to call images using flow from directory. the images are given in format \n#suited for flow_from_directory. Images are given in seperate folders which represents different classes\ntrain_generator = datagen.flow_from_directory(train_path,\n                                             target_size = IMAGE_SIZE,\n                                             shuffle = 'True',\n                                             subset = 'training',\n                                             batch_size = batch_size,\n                                             class_mode = 'categorical')\nvalid_generator = datagen.flow_from_directory(train_path,\n                                             target_size = IMAGE_SIZE,\n                                             shuffle = 'True',\n                                             batch_size = 32,\n                                             class_mode = 'categorical',\n                                             subset = 'validation'\n                                             )","dc81e6ba":"#generator function to fit the model in batches. Run the model for more than 5 epochs \n#to get results above 90\nmodel.fit_generator(train_generator,\n                   validation_data = valid_generator,\n                    epochs = epochs,\n                    steps_per_epoch = train_generator.n \/\/ batch_size,\n                    validation_steps = valid_generator.n \/\/batch_size,\n                    )","bf8c4408":"#Test data are not augmented\ntest_datagen = ImageDataGenerator(rotation_range = 0,\n                              width_shift_range=0.0,\n                              height_shift_range=0.0,\n                              shear_range=0.0,\n                              zoom_range=0.0,\n                              horizontal_flip=False,\n                              vertical_flip=False,\n                              #preprocessing_function=preprocess_input,\n                              )","20fc5caa":"#Test \ntest_generator = test_datagen.flow_from_directory(test_path,\n                                                 target_size = IMAGE_SIZE,\n                                                 shuffle = 'False',\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical',)","8e4bba58":"#Evaluate\nmodel.evaluate_generator(test_generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=1)","2f710383":"model.metrics_names","f3df177c":"### Generate batches of tensor image data with real-time data augmentation. The data will be looped over (in batches).\nhttps:\/\/keras.io\/preprocessing\/image\/","595b13ce":"### A Simple CNN implementation using Keras\nUsed only the very necessary commands for excecuting the network. \nAchived above 90% accuracy using the simple model. Run for more than 5 epochs to get the accuracy.","fd3753ea":"### Used keras Model (functional API) for building the model (not sequential). \nhttps:\/\/keras.io\/models\/model\/","71b317de":"### Flow from directory can be used for datasets of this format.  Images are given in seperate folders which represents different classes\nhttps:\/\/keras.io\/preprocessing\/image\/#flow_from_directory"}}