{"cell_type":{"260cdebd":"code","08818cb8":"code","b24f0253":"code","b291c3cc":"code","0daa9625":"code","0160fe6c":"code","9b06fc33":"code","2fadbae6":"code","5b9d00a8":"code","d738ea98":"code","88080a1d":"code","b87810e5":"code","49b2bf15":"code","7615883d":"code","6ccfc279":"code","512bb791":"code","21f3f9ba":"code","b25775db":"code","4b4db7a6":"code","93b56122":"code","ca968b47":"code","51c67679":"code","acfbfbea":"code","89ca9e3c":"code","64dcfb72":"code","cf3845ce":"code","30e76339":"code","b8fcee76":"code","8be9b740":"code","9ef0004c":"code","39d04efc":"code","69b53bce":"code","d272eb4b":"code","b99e45b6":"code","b711894a":"code","50264f8e":"code","019c7944":"code","0d093929":"code","48376a73":"code","ed92f02b":"code","93377d0d":"markdown","5a3783e9":"markdown","ee8c0574":"markdown","3bb25abb":"markdown","238e4179":"markdown","8b79f9d1":"markdown","d5dad6c1":"markdown","df8000bf":"markdown","7f1f1a86":"markdown","fb77f548":"markdown","76589138":"markdown"},"source":{"260cdebd":"import pandas as pd #Biblioteca utilizada para manipula\u00e7\u00e3o do dataframe\nimport seaborn as sns # Biblioteca utilizada para explorar as caracter\u00edsticas (Features) das vari\u00e1veis\nimport matplotlib.pyplot as plt #Biblioteca utilizada para cria\u00e7\u00e3o\/visualiza\u00e7\u00e3o de gr\u00e1ficos\nimport tensorflow as tf #Biblioteca utilizada para implementa\u00e7\u00e3o da Rede Neural Densa\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","08818cb8":"df = pd.read_excel('\/kaggle\/input\/covid19\/dataset.xlsx')","b24f0253":"df.shape","b291c3cc":"df.head()","0daa9625":"#Usando a vari\u00e1vel 'SARS-Cov-2 exam result', para criar a variavel 'Target', onde negative =0 e positive=1\ntarget = []\nfor i in range(df.shape[0]):\n    if df['SARS-Cov-2 exam result'][i]=='negative':\n        target.append(0)\n    else:\n        target.append(1)\n        \ndfTarget  =pd.DataFrame({'Target': target})\n\n#juntar o df com o dfTarget\ndf = pd.concat([df, dfTarget], sort=False, axis=1)\ndf","0160fe6c":"#Nome das vari\u00e1veis\nvariaveis =list(df.columns)\nvariaveis\n","9b06fc33":"# criaremos uma nova lista (varExcluir) a partir da lista variaveis, \n# apenas usaremos o '#' para selecionar as vari\u00e1veis que pretendemos \n# usar. Essa \"flexibilidade\" nos permite testar outras vari\u00e1veis, (com os devidos ajustes)\n\nvarExcluir = ['Patient ID', \n #'Patient age quantile',\n #'SARS-Cov-2 exam result',\n 'Patient addmited to regular ward (1=yes, 0=no)',\n 'Patient addmited to semi-intensive unit (1=yes, 0=no)',\n 'Patient addmited to intensive care unit (1=yes, 0=no)',\n #'Hematocrit',\n #'Hemoglobin',\n #'Platelets',\n #'Mean platelet volume ',\n #'Red blood Cells',\n #'Lymphocytes',\n #'Mean corpuscular hemoglobin concentration\\xa0(MCHC)',\n #'Leukocytes',\n #'Basophils',\n #'Mean corpuscular hemoglobin (MCH)',\n #'Eosinophils',\n #'Mean corpuscular volume (MCV)',\n #'Monocytes',\n #'Red blood cell distribution width (RDW)',\n #'Serum Glucose',\n 'Respiratory Syncytial Virus',\n 'Influenza A',\n 'Influenza B',\n 'Parainfluenza 1',\n 'CoronavirusNL63',\n 'Rhinovirus\/Enterovirus',\n 'Mycoplasma pneumoniae',\n 'Coronavirus HKU1',\n 'Parainfluenza 3',\n 'Chlamydophila pneumoniae',\n 'Adenovirus',\n 'Parainfluenza 4',\n 'Coronavirus229E',\n 'CoronavirusOC43',\n 'Inf A H1N1 2009',\n 'Bordetella pertussis',\n 'Metapneumovirus',\n 'Parainfluenza 2',\n #'Neutrophils',\n #'Urea',\n 'Proteina C reativa mg\/dL',\n #'Creatinine',\n #'Potassium',\n #'Sodium',\n 'Influenza B, rapid test',\n 'Influenza A, rapid test',\n #'Alanine transaminase',\n #'Aspartate transaminase',\n #'Gamma-glutamyltransferase\\xa0',\n #'Total Bilirubin',\n #'Direct Bilirubin',\n #'Indirect Bilirubin',\n #'Alkaline phosphatase',\n 'Ionized calcium\\xa0',\n 'Strepto A',\n 'Magnesium',\n 'pCO2 (venous blood gas analysis)',\n 'Hb saturation (venous blood gas analysis)',\n 'Base excess (venous blood gas analysis)',\n 'pO2 (venous blood gas analysis)',\n 'Fio2 (venous blood gas analysis)',\n 'Total CO2 (venous blood gas analysis)',\n 'pH (venous blood gas analysis)',\n 'HCO3 (venous blood gas analysis)',\n 'Rods #',\n 'Segmented',\n 'Promyelocytes',\n 'Metamyelocytes',\n 'Myelocytes',\n 'Myeloblasts',\n 'Urine - Esterase',\n 'Urine - Aspect',\n 'Urine - pH',\n 'Urine - Hemoglobin',\n 'Urine - Bile pigments',\n 'Urine - Ketone Bodies',\n 'Urine - Nitrite',\n 'Urine - Density',\n 'Urine - Urobilinogen',\n 'Urine - Protein',\n 'Urine - Sugar',\n 'Urine - Leukocytes',\n 'Urine - Crystals',\n 'Urine - Red blood cells',\n 'Urine - Hyaline cylinders',\n 'Urine - Granular cylinders',\n 'Urine - Yeasts',\n 'Urine - Color',\n 'Partial thromboplastin time\\xa0(PTT)\\xa0',\n 'Relationship (Patient\/Normal)',\n 'International normalized ratio (INR)',\n 'Lactic Dehydrogenase',\n 'Prothrombin time (PT), Activity',\n 'Vitamin B12',\n 'Creatine phosphokinase\\xa0(CPK)\\xa0',\n 'Ferritin',\n 'Arterial Lactic Acid',\n 'Lipase dosage',\n 'D-Dimer',\n 'Albumin',\n 'Hb saturation (arterial blood gases)',\n 'pCO2 (arterial blood gas analysis)',\n 'Base excess (arterial blood gas analysis)',\n 'pH (arterial blood gas analysis)',\n 'Total CO2 (arterial blood gas analysis)',\n 'HCO3 (arterial blood gas analysis)',\n 'pO2 (arterial blood gas analysis)',\n 'Arteiral Fio2',\n 'Phosphor',\n 'ctO2 (arterial blood gas analysis)']\n","2fadbae6":"#vizualiza\u00e7\u00e3o das vari\u00e1veis que ser\u00e3o exluidas\nvarExcluir\n","5b9d00a8":"#excluindo as variaveis\ndf.drop(varExcluir, axis=1, inplace=True)","d738ea98":"#checando se existem miss values\ndf.isnull().sum()","88080a1d":"# infelizmente, esse dataset possui poucas informa\u00e7\u00f5es completas...n\u00e3o seria conveniente preencher os valores vazios com \"m\u00e9dias\"\n# manteremos apenas as observa\u00e7\u00f5es que contem todos os valores. Assim, excluiremos as linhas que tiverem miss values\n\ndf=df.dropna()\n     ","b87810e5":"#checando se ainda ficaram algum miss values\ndf.isnull().sum()","49b2bf15":"#Checando as quantidades entre as Classes\nplt.figure(figsize=(12,6))\n\ncont1 = sns.countplot(x=df['SARS-Cov-2 exam result'])\nplt.title(\"Contagem de pacientes que testaram para COVID -19 \")\nplt.xlabel('Contagem de testes Negativos (0) e Positivos (1) ')\nplt.ylabel('Contagem ')\n#trecho para exibir a contagem na parte superior das barras\ncont1.set_xticklabels(cont1.get_xticklabels(),rotation=0)\ni=0\nfor p in cont1.patches:\n    height = p.get_height()\n    cont1.text(p.get_x()+p.get_width()\/2., height + 0.1,\n        df['SARS-Cov-2 exam result'].value_counts()[i],ha=\"center\")\n    i += 1","7615883d":"#mapa de calor, da correla\u00e7\u00e3o entre as vari\u00e1vies\nplt.figure(figsize=(10,10))\nsns.heatmap(df.corr())","6ccfc279":"#separando as vari\u00e1veis independentes da vari\u00e1vel dependente \nX = df.drop(['SARS-Cov-2 exam result', 'Target'], axis=1)\nY = df['Target']","512bb791":"#separando os dados entre dados de treino e de teste\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.30)","21f3f9ba":"#instanciando a rede neural\ndnn = tf.keras.models.Sequential()","b25775db":"#exibindo o numedo de reun\u00f4nios na camada de entrada\nX.shape[1] ","4b4db7a6":"#camada de entrada \n\nneuroniosEnt =X.shape[1] \n\n#camada oculta 1 \n#28-17-\ndnn.add(tf.keras.layers.Dense(units=17,kernel_initializer='uniform',activation='relu', input_dim=neuroniosEnt))\n\n#camada oculta 2 \n#28-17-17\ndnn.add(tf.keras.layers.Dense(units=17,kernel_initializer='uniform',activation='relu'))\n\n#camada oculta 3 \n#28-17-17-15\ndnn.add(tf.keras.layers.Dense(units=15,kernel_initializer='uniform',activation='relu'))\n\n#camada oculta 4 \n#28-17-17-15-15\ndnn.add(tf.keras.layers.Dense(units=15,kernel_initializer='uniform',activation='relu'))\n\n#camada oculta 5 \n#28-17-17-15-15-8\n#dnn.add(tf.keras.layers.Dense(units=8,kernel_initializer='uniform',activation='relu'))\n\n#camada oculta 6 \n#28-17-17-15-15-8-8\n#dnn.add(tf.keras.layers.Dense(units=8,kernel_initializer='uniform',activation='relu'))\n\n\n#camada de saida\n#28-17-17-15-15-8-8-1\ndnn.add(tf.keras.layers.Dense(units=1,kernel_initializer='uniform',activation='sigmoid'))","93b56122":"#desenho da rede\ndnn.summary()","ca968b47":"#compilando a rede\ndnn.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","51c67679":"#treinando o modelo\nbatch=32\nepocas = 400\n\ndnn.fit(X_train,Y_train, batch_size=batch, epochs=epocas)","acfbfbea":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report, confusion_matrix\n    \n# Testando a performance\ny_pred_train = dnn.predict(X_train)\ny_pred_train= (y_pred_train>0.5)\ny_true_train = Y_train\nprint(\"Acur\u00e1cia treino: {0}\".format(accuracy_score(y_true_train, y_pred_train).round(2)))\ny_pred_test = dnn.predict(X_test)\ny_pred_test = (y_pred_test>0.5)\ny_true_test = Y_test\nprint(\"Acur\u00e1cia teste : {0}\".format(accuracy_score(y_true_test, y_pred_test).round(2)))\n\n# Mas nos bastidores...\nprint('\\n')\nprint('Relat\u00f3rio de Classifica\u00e7\u00e3o')\nprint('\\n')\nprint(classification_report(Y_test, y_pred_test))\n\n#Matriz de confus\u00e3o \nprint('\\n')\nprint('Matriz de Confus\u00e3o ')\n\nprint( confusion_matrix(Y_test, y_pred_test))","89ca9e3c":"#selecionando as variaveis que mais se correlacionam com o Target\ncorr = df.corr()['Target']\ncorr = abs(corr)\ncorr.reset_index()\ncorr = pd.DataFrame( corr.sort_values(ascending=True))\ncorr = corr[corr['Target']<0.1]","64dcfb72":"#lista com os valores das vari\u00e1veis com valor absoluto menor que 0.1\ncorr","cf3845ce":"listaCorr = corr.index\nlistaCorr","30e76339":"#criando um dataframe, excluindo as vari\u00e1veis menos relevantes (<0.1)\nnX = X.drop(listaCorr, axis=1)","b8fcee76":"# exibindo o dataframe\nnX ","8be9b740":"#vari\u00e1veis\nnX.columns","9ef0004c":"nX.shape","39d04efc":"#separando os dados entre dados de treino e de teste\nX_train, X_test, Y_train, Y_test = train_test_split(nX,Y, test_size=0.30, random_state=42)","69b53bce":"#instanciando a rede neural\ndnn = tf.keras.models.Sequential()","d272eb4b":"#exibindo o numedo de reun\u00f4nios na camada de entrada\nnX.shape[1] ","b99e45b6":"#camada de entrada \nneuroniosEnt =nX.shape[1] ","b711894a":"#camada oculta 1 \n#17-17-\ndnn.add(tf.keras.layers.Dense(units=17,kernel_initializer='uniform',activation='relu', input_dim=neuroniosEnt))\n\n#camada oculta 2 \n#17-17-17\ndnn.add(tf.keras.layers.Dense(units=17,kernel_initializer='uniform',activation='relu'))\n\n#camada oculta 3 \n#17-17-17-15\ndnn.add(tf.keras.layers.Dense(units=15,kernel_initializer='uniform',activation='relu'))\n\n#camada oculta 4 \n#17-17-17-15-15\ndnn.add(tf.keras.layers.Dense(units=15,kernel_initializer='uniform',activation='relu'))\n\n#camada de saida\n#17-17-17-15-15-1\ndnn.add(tf.keras.layers.Dense(units=1,kernel_initializer='uniform',activation='sigmoid'))","50264f8e":"#desenho da rede\ndnn.summary()\n","019c7944":"#compilando a rede\ndnn.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","0d093929":"#treinando o modelo\nbatch=32\nepocas = 330\n\ndnn.fit(X_train,Y_train, batch_size=batch, epochs=epocas)","48376a73":"# Testando a performance\ny_pred_train = dnn.predict(X_train)\ny_pred_train= (y_pred_train>0.5)\ny_true_train = Y_train\nprint(\"Acur\u00e1cia treino: {0}\".format(accuracy_score(y_true_train, y_pred_train).round(2)))\ny_pred_test = dnn.predict(X_test)\ny_pred_test = (y_pred_test>0.5)\ny_true_test = Y_test\nprint(\"Acur\u00e1cia teste : {0}\".format(accuracy_score(y_true_test, y_pred_test).round(2)))\n\n# Nos bastidores...\nprint('\\n')\nprint('Relat\u00f3rio de Classifica\u00e7\u00e3o')\nprint('\\n')\nprint(classification_report(Y_test, y_pred_test))\n\n#Matriz de confus\u00e3o \nprint('\\n')\nprint('Matriz de Confus\u00e3o ')\nprint( confusion_matrix(Y_test, y_pred_test))","ed92f02b":"# Testando todo dataset\n\ny_pred_test = dnn.predict(nX)\ny_pred_test = (y_pred_test>0.5)\ny_true_test = Y\nprint(\"Acur\u00e1cia no dataset : {0}\".format(accuracy_score(y_true_test, y_pred_test).round(2)))\n\n# Nos bastidores..\nprint('\\n')\nprint('Relat\u00f3rio de Classifica\u00e7\u00e3o')\nprint('\\n')\nprint(classification_report(Y, y_pred_test))\n\n# Matriz de confus\u00e3o\nprint('\\n')\nprint('Matriz de Confus\u00e3o ')\n\nprint( confusion_matrix(Y, y_pred_test))","93377d0d":"## Obtendo dados\nUtilizaremos a biblioteca Pandas para ler o arquivo \"*dataset.xlsx*\" e armazenar em um dataframe chamado *df*","5a3783e9":"## Implementa\u00e7\u00e3o do modelo\nCome\u00e7aremos a montar a Rede Neural Densa","ee8c0574":"Vamos usar a vari\u00e1vel  *SARS-Cov-2 exam result* como vari\u00e1vel de resposta (*Target*). Para isso, vamos criar uma nova vari\u00e1vel, *Target*","3bb25abb":"## Importando as bibliotecas \nEssas ser\u00e3o as bibliotecas utilizadas\n\nObs: utilizaremos o Scikit-Learn quando implementar a rede neural e para avaliar o modelo","238e4179":"Esse dataset possui 5644 linhas, com 11 vari\u00e1veis.","8b79f9d1":"## Conclus\u00e3o\nAparentemente promissora a possibilidade da detec\u00e7\u00e3o da COVID-19 com o modelo proposto. A verificar com um dataset com mais observa\u00e7\u00f5es, se poss\u00edvel.","d5dad6c1":"## An\u00e1lise do DataSet\nVamos explorar algumas informa\u00e7\u00f5es do dataset","df8000bf":"# Diagnosis of COVID-19 \n\n\n*por Alex Alves da Silva*\n\n-----------\n## Resumo\n\nEste relat\u00f3rio cont\u00e9m estudo obtido atrav\u00e9s da an\u00e1lise do arquivo  \"*dataset.xlsx*\", disponibilizado na p\u00e1gina do Kaggle Einsten Data4u. Consiste na tentativa de obter um modelo preditivo baseado em t\u00e9cnicas de Deep Learning.\n\nSer\u00e3o consideradas as substancias (vari\u00e1veis) contidas em testes de Hemograma (s\u00e9rie branca e s\u00e9rie vermelha) e em testes Bioqu\u00edmicos ( subst\u00e2ncias eletrol\u00edcicas  e n\u00e3o eletrol\u00edticas)","7f1f1a86":"## Implementa\u00e7\u00e3o do novo modelo\nCome\u00e7aremos a montar a Rede Neural Densa, agora com o dataframe *nX*, contendo as vari\u00e1veis mais correlacionadas.","fb77f548":"## Melhorando os resultados\nVamos remover as vari\u00e1veis menos correlacionadas com o modelo. Para isso, estabeleceremos como par\u00e2metro o \u00edndice de corre\u00e7\u00e3o entre a i-\u00e9sima vari\u00e1vel e o *Target*","76589138":"## Agradeciemnto\nObrigado ao Hospital Albert Einstein pela disponibiliza\u00e7\u00e3o dos dados."}}