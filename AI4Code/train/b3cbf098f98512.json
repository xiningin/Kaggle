{"cell_type":{"e064e424":"code","2040a884":"code","3d0ddf3e":"code","61986659":"markdown"},"source":{"e064e424":"import pandas as pd\nimport numpy as np\nfrom tqdm.auto import tqdm\nfrom string import ascii_lowercase, ascii_uppercase\nfrom flashtext import KeywordProcessor\n\ntrain = pd.read_csv(\"..\/input\/train.csv\", index_col='index', usecols=['index', 'text'])\ntest = pd.read_csv('..\/input\/test.csv', index_col='ciphertext_id')\nsub = pd.read_csv('..\/input\/sample_submission.csv', index_col='ciphertext_id')\n\ndef decode_level_1(text, key):\n    key = [ord(x) - 97 for x in key]\n    i = 0\n    def substitute(char):\n        nonlocal i\n        if char in ascii_lowercase and char != 'z':\n            char = chr((ord(char) - 97 - key[i]) % 25 + 97)\n            i = (i + 1) % len(key)\n        if char in ascii_uppercase and char != 'Z':\n            char = chr((ord(char) - 65 - key[i]) % 25 + 65)\n            i = (i + 1) % len(key)\n        return char\n    return ''.join([substitute(x) for x in text])\n\ntest1 = test[test[\"difficulty\"] == 1].reset_index()\ntest1[\"text\"] = test1[\"ciphertext\"].map(lambda x: decode_level_1(x, 'pyle'))\nprint(test1[\"text\"][0])","2040a884":"keyword_processor = KeywordProcessor(case_sensitive=True)\nkeyword_processor.set_non_word_boundaries(set())\n\nfor index, text in tqdm(train.itertuples()):\n    if len(text) < 3:\n        continue\n    keyword_processor.add_keyword(text, index)\nprint(len(keyword_processor))","3d0ddf3e":"def good_match(match, text):\n    d = (len(text) - len(match)) \/\/ 2\n    return match == text[d:d+len(match)]\n\nmatched, unmatched = 0, 0\nfor row in tqdm(test1.itertuples()):\n    matches0 = keyword_processor.extract_keywords(row.text)\n    matches = [x for x in matches0 if good_match(train.loc[x]['text'], row.text)]\n    if len(matches) == 1:\n        matched += 1\n        sub.loc[row.ciphertext_id] = matches[0]\n    else:\n        unmatched += 1\n        print(row.text, matches0, [train.loc[x]['text'] for x in matches0])\nprint(f\"Matched {matched}   Unmatched {unmatched}\")\n\nsub.to_csv('submit-level-1.csv')","61986659":"I definitely took some code (how to match decoded and plain strings) from [https:\/\/www.kaggle.com\/tarobxl\/cipher-challenge-iii-level-2](https:\/\/www.kaggle.com\/tarobxl\/cipher-challenge-iii-level-2), and changed to improve performance (Thanks to the awesome [flashtext](https:\/\/github.com\/vi3k6i5\/flashtext) library)\n\nDecoding itself comes from my previos Kernel: [https:\/\/www.kaggle.com\/elvenmonk\/difficulty-1-reverse-engineering-no-ml](https:\/\/www.kaggle.com\/elvenmonk\/difficulty-1-reverse-engineering-no-ml)\n\nI hope it can be useful to speedup cracking next Difficulty levels!"}}