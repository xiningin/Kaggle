{"cell_type":{"22125c38":"code","4e4b23fb":"code","9ec8505f":"code","d5c4dbca":"code","3f899b75":"code","40efafc0":"code","fbbc8859":"code","f8749e07":"code","17847eff":"code","6da03582":"code","6dbf795b":"code","14001c9a":"code","cae571e2":"code","ded7d4aa":"code","5dae1155":"code","45192e6d":"code","9261cd30":"code","5005f0d9":"code","debc5caa":"code","2d7eec75":"markdown","52164c54":"markdown","46ceb630":"markdown","58618341":"markdown","48f69153":"markdown","d17f56c0":"markdown","c63f0ea1":"markdown","ed1bc263":"markdown"},"source":{"22125c38":"# Data manipulation\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\n\n# Neural\/conv & Co networks\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","4e4b23fb":"from PIL import ImageFile\nImageFile.LOAD_TRUNCATED_IMAGES = True\n\n#\u00a0Constants\nDIM = 256\nIMG_DIM = (DIM, DIM)\nIMG_SHAPE = (DIM, DIM, 3)\nPREFIX  = \"..\/input\/rakuten-multimodal-colour-extraction\/images\/images\/\"\n\ndef image_to_array(path_image):\n    # Load image as a PIL Image\n    raw_img = keras.preprocessing.image.load_img(PREFIX+path_image, target_size=IMG_DIM)\n    \n    try:\n        # Convert PIL Image to NumPy array\n        img_array = keras.preprocessing.image.img_to_array(raw_img)\n    except:\n        return np.nan\n    \n    return img_array","9ec8505f":"def encode(encoder, colors):\n    # Encode colors to numerical array\n    indexes = encoder.transform(colors)\n    \n    #\u00a0Create an array with 0s\n    encoded = np.zeros(len(encoder.classes_))\n    \n    # Put 1s at the specified indexes\n    encoded[indexes] = 1\n    \n    return encoded\n    \ndef decode(encoder, encoded):\n    #\u00a0Decode the encoded\n    decoded = np.where(encoded == 1)[0].ravel()\n            \n    #\u00a0Get the colors\n    return encoder.inverse_transform(decoded)\n\ndef extract_colors(col):\n    colors = set()\n    \n    #\u00a0Loop over the rows\n    for row in col.values:\n        # Some cleaning & list transformation\n        row = row[1:-1].split(', ')\n        # Loop over the elements of the list\n        for color in row:\n            # Quick clean\n            color = color.replace(\"'\", \"\")\n            # Add to the set\n            colors.add(color)\n        \n    return list(colors)\n\nclean_tags = lambda x: [e.replace(\"'\", \"\")  for e in x[1:-1].split(', ')]\nclean_extension = lambda x: x.replace('.gif', '.jpg') if '.gif' in x else x","d5c4dbca":"%%time\nfrom sklearn.preprocessing import LabelEncoder\n\n# Load X_train.csv, y_train.csv into one DataFrame\ntrain = pd.concat([\n    pd.read_csv('..\/input\/rakuten-multimodal-colour-extraction\/X_train.csv', index_col=0),\n    pd.read_csv('..\/input\/rakuten-multimodal-colour-extraction\/y_train.csv', index_col=0)\n], axis=1)\n\n\n# Get colors\ncolors = extract_colors(train['color_tags'])\n\n# Prepare the encoder for color tags\nencoder = LabelEncoder()\nencoder = encoder.fit(colors)","3f899b75":"%%time\n\n# Clean\ntrain[\"color_tags\"] = train[\"color_tags\"].apply(clean_tags)\n\n#\u00a0Create column encoded which are the encoded colors\ntrain[\"encoded\"] = train[\"color_tags\"].apply(lambda x: encode(encoder, x))","40efafc0":"%%time\n\ntest = pd.read_csv('..\/input\/rakuten-multimodal-colour-extraction\/X_test.csv', index_col=0)","fbbc8859":"for i in range(1, 6):\n    print(f\"Greater than {i} colours: {round(train[train['color_tags'].apply(len) > i].shape[0] \/ train.shape[0] * 100, 2)}%\")\n    print(f\"Less e. than {i} colours: {round(train[train['color_tags'].apply(len) <= i].shape[0] \/ train.shape[0] * 100, 2)}%\")\n    print()","f8749e07":"#\u00a0Delete outliers: More than 5 colors\ntrain = train[train[\"color_tags\"].apply(len) < 5]","17847eff":"%%time\n\n#\u00a0Create column image_array which are the numerical representation of images\n# images = np.array([image_to_array(x) for x in train[\"image_file_name\"]])","6da03582":"from keras_preprocessing.image import ImageDataGenerator\nfrom keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization, Concatenate\nfrom keras.layers import Conv2D, MaxPooling2D, Lambda, Input, Convolution2D\nfrom keras import regularizers, optimizers\nfrom keras.applications import VGG19, DenseNet201","6dbf795b":"%%time\n\ndatagen = ImageDataGenerator(\n    rescale=1.\/255.,\n    horizontal_flip=False\n)\n\ntrain_generator = datagen.flow_from_dataframe(\n    dataframe=train,\n    directory=\"..\/input\/rakuten-multimodal-colour-extraction\/images\/images\/\",\n    x_col=\"image_file_name\",\n    y_col=\"color_tags\",\n    class_mode=\"categorical\",\n    classes=colors,\n    seed=42,\n    target_size=IMG_DIM\n)","14001c9a":"%%time\n\ndatagen = ImageDataGenerator(\n    rescale=1.\/255.,\n)\n\ntest_generator = datagen.flow_from_dataframe(\n    dataframe=test,\n    directory=\"..\/input\/rakuten-multimodal-colour-extraction\/images\/images\/\",\n    class_mode=\"input\",\n    x_col=\"image_file_name\",\n    target_size=IMG_DIM\n)","cae571e2":"from keras import Sequential\n\nmodel = keras.Sequential()\nmodel.add(DenseNet201(include_top=False, input_shape=IMG_SHAPE, pooling='avg'))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(1024, activation='relu'))\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(len(colors), activation='sigmoid'))","ded7d4aa":"model.summary()","5dae1155":"from keras import backend as K\n\ndef f1(y_true, y_pred):\n    def recall(y_true, y_pred):\n        \"\"\"Recall metric.\n\n        Only computes a batch-wise average of recall.\n\n        Computes the recall, a metric for multi-label classification of\n        how many relevant items are selected.\n        \"\"\"\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\n    def precision(y_true, y_pred):\n        \"\"\"Precision metric.\n\n        Only computes a batch-wise average of precision.\n\n        Computes the precision, a metric for multi-label classification of\n        how many selected items are relevant.\n        \"\"\"\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n    precision = precision(y_true, y_pred)\n    recall = recall(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))","45192e6d":"from keras import Sequential\n    \nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=[\"accuracy\", f1]\n)","9261cd30":"EPOCHS = 10\n\ncallbacks = [keras.callbacks.ModelCheckpoint(\"save_at_{epoch}.h5\")]\n\nhistory = model.fit(\n    train_generator,\n    epochs=EPOCHS,\n    callbacks=callbacks,\n)","5005f0d9":"# list all data in history\nprint(history.history.keys())\n# summarize history for accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['f1'])\nplt.title('model accuracy & f1')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['accuracy', 'f1'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train'], loc='upper left')\nplt.show()","debc5caa":"test['color_tags'] = list()\n\ntest.loc[test['image_file_name'].str.endswith('.gif'), \"color_tags\"] = model.predict(test_generator)\n\ntest[\"color_tags\"].to_csv()","2d7eec75":"# Generate datasets","52164c54":"# Rakuten Multi-modal Colour Extraction\n- Creation of a *classifier* similar to this one [here](https:\/\/keras.io\/examples\/vision\/image_classification_from_scratch\/).\n- Details:\n  - Issue: **Classification**\n  - Input: **images**\n  - Output: **list of strings (colors)**\n  - Metric: **f1_score** (best `1.0` and worst `0.0`)","46ceb630":"# Build model","58618341":"# Setup\nPackages imports...","48f69153":"# Make submissions","d17f56c0":"## Miscellaneous function","c63f0ea1":"# Visualize the data","ed1bc263":"# Train model"}}