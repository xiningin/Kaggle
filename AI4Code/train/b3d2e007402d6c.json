{"cell_type":{"9efbafa8":"code","4a9f172a":"code","7ab8ee1c":"code","ae02317c":"code","7ac6b2ee":"code","1942100f":"code","b8135846":"code","b48af764":"code","50f2beb9":"code","cb4ec959":"code","4015e607":"code","4c626ae1":"code","2e890456":"code","0e744f71":"code","6aafc57a":"code","3249e7c8":"code","53f3fb4f":"code","fd634728":"code","9d1c9d95":"code","e7b0e399":"code","8ca52673":"code","31636217":"code","00272413":"code","746f0fce":"code","3d5a2514":"code","3dcd8f4c":"code","58e489ee":"code","807529cd":"code","eec630a0":"code","3f58fc95":"code","fcedd44a":"code","375daccb":"code","25a6469f":"code","853dc5a3":"code","cf92c6a0":"code","9f1500de":"code","c6828b61":"code","98f84d7f":"code","452efa31":"code","d1032611":"code","947acf16":"code","0f0b91df":"code","a17371b7":"code","a833379a":"markdown","145bbf86":"markdown","9866a107":"markdown","a1dfb760":"markdown","ae002065":"markdown","7156ea27":"markdown","944f9a68":"markdown","27118707":"markdown","263a0d16":"markdown","8f863a99":"markdown","d3e8e30f":"markdown","3128835f":"markdown","cda5e1ce":"markdown","37d3cf5a":"markdown","a5fa99e1":"markdown","cc400c66":"markdown","ac12bf7c":"markdown"},"source":{"9efbafa8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4a9f172a":"import numpy as np \nimport pandas as pd \nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings('ignore')","7ab8ee1c":"# import train data and understand the data\ndf_train=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv\")\ndf_train.head()","ae02317c":"df_train.sample(6)","7ac6b2ee":"# Number of rows and columns\ndf_train.shape","1942100f":"# Columns names\ndf_train.columns","b8135846":"# Type of columns\ndf_train.dtypes","b48af764":"# Do the same thing on the test data\ndf_test=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv\")\ndf_test.head()","50f2beb9":"df_test.shape","cb4ec959":"df_test.columns","4015e607":"# Names of the countries\ndf_train[\"Country_Region\"].unique()","4c626ae1":"len(df_train[\"Country_Region\"].unique())","2e890456":"df_train[\"Country_Region\"].value_counts()","0e744f71":"fig_reg = px.bar(df_train[df_train['Date']==\"2020-04-08\"], x='Country_Region', y='ConfirmedCases')\n\nfig_reg.show()","6aafc57a":"df = df_train.fillna('NA').groupby(['Country_Region','Province_State','Date'])['ConfirmedCases'].sum().groupby(['Country_Region','Province_State']).max().sort_values().groupby(['Country_Region']).sum().sort_values(ascending=False)\ntop_conf_count = pd.DataFrame(df)\ntop_conf_count1 = pd.DataFrame(df.head(10))\nfig_reg = px.bar(top_conf_count1,x=top_conf_count1.index, y='ConfirmedCases',color='ConfirmedCases')\nfig_reg.update_layout(\n    title=\"Confirmed Cases by Country\",\n    xaxis_title=\" Countries\",\n    yaxis_title=\"numbre of Confirmed Cases \",\n    )\nfig_reg.show()","3249e7c8":"top_conf_count.head(10)","53f3fb4f":"df_d = df_train.fillna('NA').groupby(['Country_Region','Province_State','Date'])['Fatalities'].sum().groupby(['Country_Region','Province_State']).max().sort_values().groupby(['Country_Region']).sum().sort_values(ascending=False)\ntop_death_count = pd.DataFrame(df_d)\ntop_death_count","fd634728":"top_death_count1 = pd.DataFrame(df_d.head(10))\nfig_reg_fat = px.bar(top_death_count1,x=top_death_count1.index, y='Fatalities',color='Fatalities')\nfig_reg_fat.update_layout(\n    title=\"Fatalities by Country\",\n    xaxis_title=\" Countries\",\n    yaxis_title=\"numbre of Fatalities \",\n    )\nfig_reg_fat.show()","9d1c9d95":"# Ordrening the countries by number of fatalities\ntop_count = pd.concat([top_conf_count , top_death_count],axis=1)\ntop_count = top_count.sort_values(['ConfirmedCases'],ascending=False)[:10]\ntop_count","e7b0e399":"import plotly.graph_objects as go\nfig = go.Figure(data=[\n    go.Bar(name='ConfirmedCases',x=top_count.index, y=top_count['ConfirmedCases']),\n    go.Bar(name='Fatalities',x=top_count.index, y=top_count['Fatalities'])\n])\n# Change the bar mode\nfig.update_layout(barmode='group',title=\"Confirmed Cases and Fatalities by Country\",\n    xaxis_title=\" Countries\",\n    yaxis_title=\"number of Confirmed Cases and Fatalities \",)\nfig.show()","8ca52673":"# Visualize tunisia dataframe\ndf_train[df_train[\"Country_Region\"]==\"Tunisia\"]","31636217":"fig_tun_fatal = px.line(df_train[df_train[\"Country_Region\"]==\"Tunisia\"], x=\"Date\", y=\"Fatalities\", title='Tunisia Covid-19 Fatalities')\nfig.update_layout(barmode='group',\n    xaxis_title=\" Date \",\n    yaxis_title=\" Fatalities \",)\nfig_tun_fatal.show()","00272413":"fig_tun_confirmed = px.line(df_train[df_train[\"Country_Region\"]==\"Tunisia\"], x=\"Date\", y=\"ConfirmedCases\", title='Tunisia Covid-19 confirmed cases')\nfig.update_layout(\n    xaxis_title=\" Date \",\n    yaxis_title=\" Confirmed Cases\",)\nfig_tun_confirmed.show()","746f0fce":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    y=df_train[df_train[\"Country_Region\"]==\"Tunisia\"][\"ConfirmedCases\"],\n    x=df_train[df_train[\"Country_Region\"]==\"Tunisia\"][\"Date\"],\n    name = 'ConfirmedCases', \n    connectgaps=True \n))\nfig.add_trace(go.Scatter(\n    y=df_train[df_train[\"Country_Region\"]==\"Tunisia\"][\"Fatalities\"],\n    x=df_train[df_train[\"Country_Region\"]==\"Tunisia\"][\"Date\"],\n    name='Fatalities',\n))\nfig.update_layout(title=' ConfirmedCases & Fatalities Covid-19 in Tunisia', xaxis_title=\" Date \",yaxis_title=\" Confirmed Cases & Fatalities\",)\nfig.show()","3d5a2514":"df_train[df_train[\"Country_Region\"]==\"US\"]","3dcd8f4c":"sort=df_train[df_train[\"Country_Region\"]==\"US\"].sort_values(by=[\"ConfirmedCases\"],ascending=False)[:400]\nsort_fat=df_train[df_train[\"Country_Region\"]==\"US\"].sort_values(by=[\"Fatalities\"],ascending=False)[:400]","58e489ee":"fig = px.line(sort, x=\"Date\", y=\"ConfirmedCases\",color='Province_State', title='US confirmed cases by state')\nfig.update_layout( xaxis_title=\" Date \",yaxis_title=\" Confirmed Cases & Fatalities\",)\n\nfig.show()","807529cd":"fig_fat = px.line(sort_fat, x=\"Date\", y=\"Fatalities\",color='Province_State', title='US Fatalities cases by state')\nfig.update_layout(xaxis_title=\" Date \",yaxis_title=\"Fatalities\",)\nfig_fat.show()","eec630a0":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    y=df_train[df_train[\"Country_Region\"]==\"US\"].fillna('NA').groupby(['Date'])[\"ConfirmedCases\"].sum(),\n    x=df_train[df_train[\"Country_Region\"]==\"US\"][\"Date\"],\n    name = 'ConfirmedCases', \n    connectgaps=True \n))\nfig.add_trace(go.Scatter(\n    y=df_train[df_train[\"Country_Region\"]==\"US\"].fillna('NA').groupby(['Date'])['Fatalities'].sum(),\n    x=df_train[df_train[\"Country_Region\"]==\"US\"][\"Date\"],\n    name='Fatalities',\n))\nfig.update_layout(title=' ConfirmedCases & Fatalities in USA')\nfig.show()","3f58fc95":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    y=df_train[df_train[\"Country_Region\"]==\"Italy\"][\"ConfirmedCases\"],\n    x=df_train[df_train[\"Country_Region\"]==\"Italy\"][\"Date\"],\n    name = 'ConfirmedCases', \n    connectgaps=True\n))\nfig.add_trace(go.Scatter(\n    y=df_train[df_train[\"Country_Region\"]==\"Italy\"][\"Fatalities\"],\n    x=df_train[df_train[\"Country_Region\"]==\"Italy\"][\"Date\"],\n    name='Fatalities',\n))\nfig.update_layout(title=' ConfirmedCases & Fatalities in Italy')\nfig.show()","fcedd44a":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    y=df_train[df_train[\"Country_Region\"]==\"France\"].fillna('NA').groupby(['Date'])[\"ConfirmedCases\"].sum(),\n    x=df_train[df_train[\"Country_Region\"]==\"France\"][\"Date\"],\n    name = 'ConfirmedCases', \n    connectgaps=True \n))\nfig.add_trace(go.Scatter(\n    y=df_train[df_train[\"Country_Region\"]==\"France\"].fillna('NA').groupby(['Date'])['Fatalities'].sum(),\n    x=df_train[df_train[\"Country_Region\"]==\"France\"][\"Date\"],\n    name='Fatalities',\n))\nfig.update_layout(title=' ConfirmedCases & Fatalities in France')\nfig.show()","375daccb":"country_df = df_train.groupby(['Date', 'Country_Region'])[['ConfirmedCases', 'Fatalities']].sum().reset_index()\ncountry_df.tail()","25a6469f":"data = (\n    df_train.groupby([\"Country_Region\",\"Date\"])\n    .agg({\"ConfirmedCases\": \"sum\", \"Fatalities\": \"sum\"})\n    .reset_index()\n)\ntest_data = (\n    df_test.groupby([\"Date\", \"Country_Region\"])\n    .last()\n    .reset_index()[[\"Date\", \"Country_Region\"]]\n)","853dc5a3":"data[\"Date\"] = pd.to_datetime(data.Date)\ntest_data[\"Date\"] = pd.to_datetime(test_data.Date)","cf92c6a0":"countries = data[\"Country_Region\"].unique()\ntest_countries = test_data[\"Country_Region\"].unique()","9f1500de":"df_train1 = df_train.fillna('NA').groupby(['Country_Region','Date']).sum()\ndf_train1\ndf_train1.reset_index(inplace=True)\ndf_train1","c6828b61":"import plotly.graph_objects as go\n\nfrom plotly.offline import iplot\n\n\nfor i in range(1, len(countries)):\n  \n    _data = df_train1[df_train1[\"Country_Region\"] == countries[i - 1]]\n    trace1 = go.Scatter(\n        x=_data.Date,\n        y=_data.ConfirmedCases,\n        name= \"Confirmed Cases\"\n    )\n    trace2 = go.Scatter(\n        x=_data.Date,\n        y=_data.Fatalities,\n        name=\"Confirmed Fatalities\"\n        )\n    data1 = [trace1, trace2]\n    layout = go.Layout(title = countries[i - 1], xaxis = {'title':'Date'}, yaxis = {'title':'value'})\n    fig = go.Figure(data=data1,layout=layout)\n    iplot(fig)","98f84d7f":"country_df['Date'] = country_df['Date'].apply(str)\n\nfig = px.scatter_geo(country_df, locations=\"Country_Region\", locationmode='country names', \n                     color=\"ConfirmedCases\", size='ConfirmedCases', hover_name=\"Country_Region\",\n                     hover_data=['ConfirmedCases', 'Fatalities'],\n                     range_color= [0, top_count['ConfirmedCases'].max()], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='COVID-19: Confirmed cases spread Over Time', color_continuous_scale=\"portland\" , size_max=80)\nfig.show()","452efa31":"def getColumnInfo(df):\n    #n_province =  df['Province_State'].nunique()\n    n_country  =  df['Country_Region'].nunique()\n    n_days     =  df['Date'].nunique()\n    start_date =  df['Date'].unique()[0]\n    end_date   =  df['Date'].unique()[-1]\n    return  n_country, n_days, start_date, end_date\n\nn_count_train, n_train_days, start_date_train, end_date_train = getColumnInfo(df_train1)\nn_count_test,  n_test_days,  start_date_test,  end_date_test  = getColumnInfo(df_test)\n\n\ndf_test = df_test.loc[df_test.Date > '2020-04-10']\noverlap_days = n_test_days - df_test.Date.nunique()\n","d1032611":"from sklearn.linear_model import Ridge\nfrom sklearn.preprocessing import PolynomialFeatures \nfrom sklearn.pipeline import make_pipeline\nfrom tqdm import tqdm\nimport plotly.graph_objects as go\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","947acf16":"    countries_pred = 'US'\n\n# Take the 1st day as 2020-02-23\n    df = df_train1.loc[df_train1.Date >= '2020-02-23']\n    n_days_europe = df.Date.nunique()\n\n#for i in range(1, len(countries_pred)): \n    df_country_train = df_train1[df_train1['Country_Region']==countries_pred ]\n    df_country_test = df_test[df_test['Country_Region']==countries_pred]  \n    df_country_train = df_country_train.reset_index()[df_country_train.reset_index().Date > '2020-02-22']\n    \n    x_train = np.arange(1, n_days_europe+1).reshape((-1,1))\n    x_test  = (np.arange(1,n_test_days+1+overlap_days)).reshape((-1,1)) \n\n# ****************** Fatalities ****************************\n    y_train_f = df_country_train['Fatalities']\n    model_f = make_pipeline(PolynomialFeatures(degree=3), Ridge(fit_intercept=False)) \n    model_f = model_f.fit(x_train, y_train_f)\n    y_predict_f = model_f.predict(x_test) \n\n# ******************* Cases ******************************\n    y_train_c = df_country_train['ConfirmedCases'] \n    model_c = make_pipeline(PolynomialFeatures(degree=3), Ridge(fit_intercept=False)) \n    model_c = model_c.fit(x_train, y_train_c)\n    y_predict_c = model_c.predict(x_test)\n\n# ***************** Figure **************************\n    plt.rcParams.update({'font.size': 12})\n    fig,(ax0,ax1) = plt.subplots(2,1,figsize=(20, 20))\n\n\n    \n    ax0.plot(x_test, y_predict_c,linewidth=2, label='predict_Cases_'+countries_pred)\n    ax0.plot(x_train, y_train_c, linewidth=2, color='r', linestyle='dotted', label='train_Cases_'+countries_pred)\n    ax0.set_title( \" Predicted vs Confirmed Cases : \" +countries_pred)\n    ax0.set_xlabel(\"Number of days\")\n    ax0.set_ylabel(\"Confirmed Cases\")\n    ax0.legend(loc='center left',bbox_to_anchor=(1.0, 0.5))\n    \n    ax1.plot(x_test, y_predict_f,linewidth=2, label='predict_Fatalities_'+countries_pred)\n    ax1.plot(x_train, y_train_f, linewidth=2, color='r', linestyle='dotted', label='train_Fatalities_'+countries_pred)\n    ax1.set_title(\"Predicted vs Confirmed Fatalities : \" + countries_pred)\n    ax1.set_xlabel(\"Number of days\")\n    ax1.set_ylabel(\"Fatalities\")\n    ax1.legend(loc='center left',bbox_to_anchor=(1.0, 0.5))\n","0f0b91df":"    countries_pred = 'Italy'\n\n# Take the 1st day as 2020-02-23\n    df = df_train1.loc[df_train1.Date >= '2020-02-23']\n    n_days_europe = df.Date.nunique()\n\n#for i in range(1, len(countries_pred)): \n    df_country_train = df_train1[df_train1['Country_Region']==countries_pred ]\n    df_country_test = df_test[df_test['Country_Region']==countries_pred]  \n    df_country_train = df_country_train.reset_index()[df_country_train.reset_index().Date > '2020-02-22']\n    \n    x_train = np.arange(1, n_days_europe+1).reshape((-1,1))\n    x_test  = (np.arange(1,n_test_days+1+overlap_days)).reshape((-1,1)) \n\n# ****************** Fatalities ****************************\n    y_train_f = df_country_train['Fatalities']\n    model_f = make_pipeline(PolynomialFeatures(degree=3), Ridge(fit_intercept=False)) \n    model_f = model_f.fit(x_train, y_train_f)\n    y_predict_f = model_f.predict(x_test) \n\n# ******************* Cases ******************************\n    y_train_c = df_country_train['ConfirmedCases'] \n    model_c = make_pipeline(PolynomialFeatures(degree=3), Ridge(fit_intercept=False)) \n    model_c = model_c.fit(x_train, y_train_c)\n    y_predict_c = model_c.predict(x_test)\n\n# ***************** Figure **************************\n    plt.rcParams.update({'font.size': 12})\n    fig,(ax0,ax1) = plt.subplots(2,1,figsize=(20, 20))\n\n\n    \n    ax0.plot(x_test, y_predict_c,linewidth=2, label='predict_Cases_'+countries_pred)\n    ax0.plot(x_train, y_train_c, linewidth=2, color='r', linestyle='dotted', label='train_Cases_'+countries_pred)\n    ax0.set_title( \" Predicted vs Confirmed Cases : \" +countries_pred)\n    ax0.set_xlabel(\"Number of days\")\n    ax0.set_ylabel(\"Confirmed Cases\")\n    ax0.legend(loc='center left',bbox_to_anchor=(1.0, 0.5))\n    \n    ax1.plot(x_test, y_predict_f,linewidth=2, label='predict_Fatalities_'+countries_pred)\n    ax1.plot(x_train, y_train_f, linewidth=2, color='r', linestyle='dotted', label='train_Fatalities_'+countries_pred)\n    ax1.set_title(\"Predicted vs Confirmed Fatalities : \" + countries_pred)\n    ax1.set_xlabel(\"Number of days\")\n    ax1.set_ylabel(\"Fatalities\")\n    ax1.legend(loc='center left',bbox_to_anchor=(1.0, 0.5))\n","a17371b7":"    countries_pred = 'Tunisia'\n\n# Take the 1st day as 2020-02-23\n    df = df_train1.loc[df_train1.Date >= '2020-02-23']\n    n_days_europe = df.Date.nunique()\n\n#for i in range(1, len(countries_pred)): \n    df_country_train = df_train1[df_train1['Country_Region']==countries_pred ]\n    df_country_test = df_test[df_test['Country_Region']==countries_pred]  \n    df_country_train = df_country_train.reset_index()[df_country_train.reset_index().Date > '2020-02-22']\n    \n    x_train = np.arange(1, n_days_europe+1).reshape((-1,1))\n    x_test  = (np.arange(1,n_test_days+1+overlap_days)).reshape((-1,1)) \n\n# ****************** Fatalities ****************************\n    y_train_f = df_country_train['Fatalities']\n    model_f = make_pipeline(PolynomialFeatures(degree=3), Ridge(fit_intercept=False)) \n    model_f = model_f.fit(x_train, y_train_f)\n    y_predict_f = model_f.predict(x_test) \n\n# ******************* Cases ******************************\n    y_train_c = df_country_train['ConfirmedCases'] \n    model_c = make_pipeline(PolynomialFeatures(degree=3), Ridge(fit_intercept=False)) \n    model_c = model_c.fit(x_train, y_train_c)\n    y_predict_c = model_c.predict(x_test)\n\n# ***************** Figure **************************\n    plt.rcParams.update({'font.size': 12})\n    fig,(ax0,ax1) = plt.subplots(2,1,figsize=(20, 20))\n\n\n    \n    ax0.plot(x_test, y_predict_c,linewidth=2, label='predict_Cases_'+countries_pred)\n    ax0.plot(x_train, y_train_c, linewidth=2, color='r', linestyle='dotted', label='train_Cases_'+countries_pred)\n    ax0.set_title( \" Predicted vs Confirmed Cases : \" +countries_pred)\n    ax0.set_xlabel(\"Number of days\")\n    ax0.set_ylabel(\"Confirmed Cases\")\n    ax0.legend(loc='center left',bbox_to_anchor=(1.0, 0.5))\n    \n    ax1.plot(x_test, y_predict_f,linewidth=2, label='predict_Fatalities_'+countries_pred)\n    ax1.plot(x_train, y_train_f, linewidth=2, color='r', linestyle='dotted', label='train_Fatalities_'+countries_pred)\n    ax1.set_title(\"Predicted vs Confirmed Fatalities : \" + countries_pred)\n    ax1.set_xlabel(\"Number of days\")\n    ax1.set_ylabel(\"Fatalities\")\n    ax1.legend(loc='center left',bbox_to_anchor=(1.0, 0.5))\n","a833379a":"### Confirmed Cases and Fatalities Covid-19 by country","145bbf86":"### From the first interaction with the data, we can affirm that it includes 187 countries for the past 78 days. We can note that there are some countries that have more precise visualization for each State such as US and France.","9866a107":"## France Case","a1dfb760":"#### first of all we import the covid_19 data and we prepare the packages that we are going to use later","ae002065":"## Tunisia Case","7156ea27":" ## Covid-19 spread over time","944f9a68":"## Explory Data Analysis ","27118707":"## Italy Case","263a0d16":"## From the last graphs and visualisation, we can say that US and the European continent are the most country affected by Covid-19. Meanwhile, China,where the virus began,become at rank 6 by the number of confirmed cases   ","8f863a99":"### Fatalities Covid-19 by country","d3e8e30f":"According to the graphs above, we can affirm that the state new york is the most afffected so far comparing by the other states and then we find New jersey","3128835f":"## United states Case","cda5e1ce":"From the above graph, we can say that Italy and Spain has until now the most Fatalities of Covid-19. we can also notice that the number of fatalities in US has increased exponentially from tha last week","37d3cf5a":"# **Ridge**","a5fa99e1":"### Confirmed Covid-19 by country","cc400c66":"### Focus on each country case","ac12bf7c":"## Import Data"}}