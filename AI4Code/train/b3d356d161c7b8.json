{"cell_type":{"5e1a3426":"code","b18a2dc5":"code","b6d110f2":"code","fffb7a72":"code","f456157b":"code","d6a08414":"code","fe646299":"code","f7f1275d":"code","8c53d80a":"code","0fa55436":"code","a16993b8":"markdown","ef66c84b":"markdown","0e891c18":"markdown","eb1d4c7b":"markdown","44bde005":"markdown","f58ee5ca":"markdown"},"source":{"5e1a3426":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.preprocessing import OneHotEncoder\n\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mc\nfrom matplotlib import cm\nimport seaborn as sns\nimport colorsys\n\nimport math\n\n!conda install -y -c bioconda forgi\n!conda install -y -c bioconda viennarna\n\nimport forgi.graph.bulge_graph as fgb\nimport forgi.visual.mplotlib as fvm\nimport forgi.threedee.utilities.vector as ftuv\nimport forgi\n\nimport RNA\n\nimport os\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nPATH = \"..\/input\/stanford-covid-vaccine\/\"\n\ntrain = pd.read_json(os.path.join(PATH, 'train.json'), lines=True)\ntest = pd.read_json(os.path.join(PATH, 'test.json'), lines=True)\nsubmission = pd.read_csv(os.path.join(PATH, 'sample_submission.csv'))","b18a2dc5":"train = train[['id', 'sequence', 'structure', 'predicted_loop_type',\n       'signal_to_noise', 'SN_filter', 'seq_length', 'seq_scored',\n       'reactivity_error', 'deg_error_Mg_pH10', 'deg_error_pH10',\n       'deg_error_Mg_50C', 'deg_error_50C', 'reactivity', 'deg_Mg_pH10',\n       'deg_pH10', 'deg_Mg_50C', 'deg_50C']]\n\ntrain['reactivity_min'] = train['reactivity'].apply(lambda x: np.min(x))\ntrain['deg_Mg_pH10_min'] = train['deg_Mg_pH10'].apply(lambda x: np.min(x))\ntrain['deg_pH10_min'] = train['deg_pH10'].apply(lambda x: np.min(x))\ntrain['deg_Mg_50C_min'] = train['deg_Mg_50C'].apply(lambda x: np.min(x))\ntrain['deg_50C_min'] = train['deg_50C'].apply(lambda x: np.min(x))\n\ntrain['reactivity_max'] = train['reactivity'].apply(lambda x: np.max(x))\ntrain['deg_Mg_pH10_max'] = train['deg_Mg_pH10'].apply(lambda x: np.max(x))\ntrain['deg_pH10_max'] = train['deg_pH10'].apply(lambda x: np.max(x))\ntrain['deg_Mg_50C_max'] = train['deg_Mg_50C'].apply(lambda x: np.max(x))\ntrain['deg_50C_max'] = train['deg_50C'].apply(lambda x: np.max(x))\n\ntrain['reactivity_mean'] = train['reactivity'].apply(lambda x: np.mean(x))\ntrain['deg_Mg_pH10_mean'] = train['deg_Mg_pH10'].apply(lambda x: np.mean(x))\ntrain['deg_pH10_mean'] = train['deg_pH10'].apply(lambda x: np.mean(x))\ntrain['deg_Mg_50C_mean'] = train['deg_Mg_50C'].apply(lambda x: np.mean(x))\ntrain['deg_50C_mean'] = train['deg_50C'].apply(lambda x: np.mean(x))\n\ntrain['reactivity_std'] = train['reactivity'].apply(lambda x: np.std(x))\ntrain['deg_Mg_pH10_std'] = train['deg_Mg_pH10'].apply(lambda x: np.std(x))\ntrain['deg_pH10_std'] = train['deg_pH10'].apply(lambda x: np.std(x))\ntrain['deg_Mg_50C_std'] = train['deg_Mg_50C'].apply(lambda x: np.std(x))\ntrain['deg_50C_std'] = train['deg_50C'].apply(lambda x: np.std(x))\n\ntest = test[['id', 'sequence', 'structure', 'predicted_loop_type', 'seq_length', 'seq_scored']]\n\nall_data = train.append(test).reset_index(drop=True)\n\nprint(f\"{len(train)} train data points + {len(test)} test data points = {len(all_data)} overall data point\")\n#all_data = all_data.reset_index()\nprint(f\"\\nSequences are fully unique ({all_data.sequence.nunique()}\/{len(all_data)} uniques)\")\nprint(f\"Structures are NOT fully unique ({all_data.structure.nunique()}\/{len(all_data)} uniques)\")\n\ntemp = all_data.structure.value_counts()\ntemp = temp.to_frame().reset_index()\ntemp.columns = ['structure', 'counts']\ntemp = temp[temp.counts > 1]\nprint(f\"\\nThere are {len(temp)} reoccuring structures. Most re-occuring structures are duplicates or can re-occur up to 9 times in the dataset. \\nLet's have a look at the most re-occuring structures:\")\n\nfig, ax = plt.subplots(nrows=1, ncols=3, figsize=(20, 6))\n\nfor i in range(3):\n\n    common_structure = temp.loc[i].structure\n    \"\"\"\n    Edited from:\n    * https:\/\/www.kaggle.com\/erelin6613\/openvaccine-rna-visualization\/\n    * https:\/\/www.kaggle.com\/ricopue\/second-structure-plot-and-info-with-forgi\n    \"\"\"\n    sequence = all_data[all_data.structure == common_structure].iloc[0].sequence\n    structure = all_data[all_data.structure == common_structure].iloc[0].structure\n    bg = fgb.BulgeGraph.from_fasta_text(f'>rna1\\n{structure}\\n{sequence}')[0]\n    fvm.plot_rna(bg, lighten=0.5, text_kwargs={\"fontweight\":None}, ax=ax[i])\n    \n    ax[i].set_title(f\"Re-occurs {temp.loc[i].counts} times in dataset.\")","b6d110f2":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(20, 10))\n\nidx = 0\nsequence = all_data.iloc[idx].sequence\nstructure = all_data.iloc[idx].structure\nbg = fgb.BulgeGraph.from_fasta_text(f'>rna1\\n{structure}\\n{sequence}')[0]\n\nfvm.plot_rna(bg, lighten=0.5, text_kwargs={\"fontweight\":None}, ax=ax[0])\nax[0].set_title(\"i0 is a Bulge (no opposite bulge), but i1 and i2 are internal loops\", fontsize=16)\n\nidx = 68\nsequence = all_data.iloc[idx].sequence\nstructure = all_data.iloc[idx].structure\nbg = fgb.BulgeGraph.from_fasta_text(f'>rna1\\n{structure}\\n{sequence}')[0]\n\nfvm.plot_rna(bg, lighten=0.5, text_kwargs={\"fontweight\":None}, ax=ax[1])\nax[1].set_title(\"m3 is an external loop, but m1 and m2 are multi loops\", fontsize=16)\nplt.show()\n","fffb7a72":"def get_bprna_features(df):\n    \n    df['E'] = 0\n    df['S'] = 0\n    df['H'] = 0\n    df['B'] = 0\n    df['I'] = 0\n    df['M'] = 0\n    df['X'] = 0\n    prev_c = ''\n    segment = ''\n    segments = []\n    for c in df.predicted_loop_type:\n        if prev_c == c:\n            segment = segment + c\n        else:\n            if 'E' in segment:\n                df['E'] = df['E'] + 1\n            elif 'S' in segment:\n                df['S'] = df['S'] + 1\n            elif 'H' in segment:\n                df['H'] = df['H'] + 1\n            elif 'B' in segment:\n                df['B'] = df['B'] + 1\n            elif 'I' in segment:\n                df['I'] = df['I'] + 1\n            elif 'M' in segment:\n                df['M'] = df['M'] + 1\n            elif 'X' in segment:\n                df['X'] = df['X'] + 1\n            segment = c\n        prev_c = c\n    if 'E' in segment:\n        df['E'] = df['E'] + 1\n    elif 'S' in segment:\n        df['S'] = df['S'] + 1\n    elif 'H' in segment:\n        df['H'] = df['H'] + 1\n    elif 'B' in segment:\n        df['B'] = df['B'] + 1\n    elif 'I' in segment:\n        df['I'] = df['I'] + 1\n    elif 'M' in segment:\n        df['M'] = df['M'] + 1\n    elif 'X' in segment:\n        df['X'] = df['X'] + 1\n        \n    df['S'] = df['S'] \/ 2 # always has a matching partner\n    df['I'] = df['I'] \/ 2 # always has a matching partner\n    return df[['E', 'S', 'H', 'B', 'I', 'M', 'X']]\n\ndef get_forgi_features(df):\n    sequence = df.sequence\n    structure = df.structure\n    bg = fgb.BulgeGraph.from_fasta_text(f'>rna1\\n{structure}\\n{sequence}')[0]\n    \n    df['fiveprimes'] = len(list(bg.floop_iterator()))\n    df['threeprimes'] = len(list(bg.tloop_iterator()))\n    df['stems'] = len(list(bg.stem_iterator()))\n    df['interior_loops'] = len(list(bg.iloop_iterator()))\n    df['multiloops'] = len(list(bg.mloop_iterator()))\n    df['hairpin_loops'] = len(list(bg.hloop_iterator()))\n    \n    return df[['fiveprimes', 'threeprimes', 'stems', 'interior_loops', 'multiloops', 'hairpin_loops']]\n\nall_data[['E', 'S', 'H', 'B', 'I', 'M', 'X']] = all_data.apply(lambda x: get_bprna_features(x), axis=1)\n\nall_data[['fiveprimes', 'threeprimes', 'stems', 'interior_loops', 'multiloops', 'hairpin_loops']] = all_data.apply(lambda x: get_forgi_features(x), axis=1)\n\nprint(f\"Stems: {len(all_data[all_data.S != all_data.stems])} deviations between forgi and bpRNA.\")\nprint(f\"Hairpin Loops: {len(all_data[all_data.hairpin_loops != all_data.H])} deviations between forgi and bpRNA.\")\nprint(f\"Dangling End (Fiveprimes & Threeprimes): {len(all_data[all_data.E != (all_data.fiveprimes + all_data.threeprimes)])} deviations between forgi and bpRNA.\")\nprint(f\"Internal Loops and Bulges (Interior Loops): {len(all_data[all_data.interior_loops != (all_data.I + all_data.B)])} deviations between forgi and bpRNA.\")\nprint(f\"Multiloops and External Loops (Multiloop segment): {len(all_data[all_data.multiloops != (all_data.M + all_data.X)])} deviations between forgi and bpRNA.\")\n","f456157b":"fig, ax = plt.subplots(nrows=2, ncols=3, figsize=(20, 10))\n\nsns.countplot(x=all_data.stems, ax=ax[0,0])\nax[0,0].set_title('Stems', fontsize=16)\n\nsns.countplot(x=all_data.I, ax=ax[0,1])\nax[0,1].set_title('Internal Loops', fontsize=16)\n\nsns.countplot(x=all_data.B, ax=ax[0,2])\nax[0,2].set_title('Bulges', fontsize=16)\n\nsns.countplot(x=all_data.H, ax=ax[1,0])\nax[1,0].set_title('Hairpin Loops', fontsize=16)\n\nsns.countplot(x=all_data.M, ax=ax[1,1])\nax[1,1].set_title('Multi Loop', fontsize=16)\n\nsns.countplot(x=all_data.X, ax=ax[1,2])\nax[1,2].set_title('external loop', fontsize=16)\n\nplt.show()\n","d6a08414":"correlation_matrix = all_data[~all_data.reactivity_min.isna()][['stems', 'H', 'B', 'I', 'interior_loops', 'M', 'X', 'multiloops', 'E', 'fiveprimes']].corr()\nmatrix = np.triu(correlation_matrix)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(20, 6))\n\nax[0].set_title('Correlation Matrix of Structure Segments', fontsize=16)\n\nsns.heatmap(correlation_matrix, vmin=-1, vmax=1, annot = True, cmap='coolwarm', mask=matrix, ax=ax[0])\n\ncorrelation_matrix = all_data[~all_data.reactivity_min.isna()][['stems', 'H', 'B', 'I', 'M', 'X', ]].corr()\nmatrix = np.triu(correlation_matrix)\nax[1].set_title('Condensed Correlation Matrix of Structure Segments', fontsize=16)\n\nsns.heatmap(correlation_matrix, vmin=-1, vmax=1, annot = True, cmap='coolwarm', mask=matrix, ax=ax[1])\nplt.show()","fe646299":"def custom_plot_rna(cg, coloring, ax=None):\n    '''\n    Edited from https:\/\/github.com\/ViennaRNA\/forgi\/blob\/master\/forgi\/visual\/mplotlib.py\n    '''\n    RNA.cvar.rna_plot_type = 1\n    coords = []\n    bp_string = cg.to_dotbracket_string()\n    if ax is None:\n        ax = plt.gca()\n    vrna_coords = RNA.get_xy_coordinates(bp_string)\n    \n    for i, _ in enumerate(bp_string):\n        coord = (vrna_coords.get(i).X, vrna_coords.get(i).Y)\n        coords.append(coord)\n    coords = np.array(coords)\n    \n    # Now plot circles\n    for i, coord in enumerate(coords):\n        if i < len(coloring):\n            c = cm.coolwarm(coloring[i])\n        else: \n            c = 'grey'\n        h,l,s = colorsys.rgb_to_hls(*mc.to_rgb(c))\n        c=colorsys.hls_to_rgb(h,l,s)\n        circle = plt.Circle((coord[0], coord[1]),color=c)\n        ax.add_artist(circle)\n\n    datalim = ((min(list(coords[:, 0]) + [ax.get_xlim()[0]]),\n                min(list(coords[:, 1]) + [ax.get_ylim()[0]])),\n               (max(list(coords[:, 0]) + [ax.get_xlim()[1]]),\n                max(list(coords[:, 1]) + [ax.get_ylim()[1]])))\n\n    width = datalim[1][0] - datalim[0][0]\n    height = datalim[1][1] - datalim[0][1]\n\n    ax.set_aspect('equal', 'datalim')\n    ax.update_datalim(datalim)\n    ax.autoscale_view()\n    ax.set_axis_off()\n\n    return (ax, coords)\n\ndef plot_structure_with_target_var(idx):\n    sequence = all_data.iloc[idx].sequence\n    structure = all_data.iloc[idx].structure\n\n    fig, ax = plt.subplots(nrows=1, ncols=5, figsize=(16, 4))\n\n    coloring = all_data.iloc[idx].reactivity\n    coloring = [min(max(((c-(-np.percentile(train.reactivity_max, 90)))\/(np.percentile(train.reactivity_max, 90)-(-np.percentile(train.reactivity_max, 90)))), 0),1) for c in coloring] \n    bg = fgb.BulgeGraph.from_fasta_text(f'>rna1\\n{structure}\\n{sequence}')[0]\n    custom_plot_rna(bg, coloring, ax=ax[0])\n    ax[0].set_title('reactivity', fontsize=16)\n\n    coloring = all_data.iloc[idx].deg_Mg_pH10\n    coloring = [min(max(((c-(-np.percentile(train.deg_Mg_pH10_max, 90)))\/(np.percentile(train.deg_Mg_pH10_max, 90)-(-np.percentile(train.deg_Mg_pH10_max, 90)))), 0),1) for c in coloring] \n    bg = fgb.BulgeGraph.from_fasta_text(f'>rna1\\n{structure}\\n{sequence}')[0]\n    custom_plot_rna(bg, coloring, ax=ax[1])\n    ax[1].set_title('deg_Mg_pH10', fontsize=16)\n\n    coloring = all_data.iloc[idx].deg_pH10\n    coloring = [min(max(((c-(-np.percentile(train.deg_pH10_max, 90)))\/(np.percentile(train.deg_pH10_max, 90)-(-np.percentile(train.deg_pH10_max, 90)))), 0),1) for c in coloring] \n    bg = fgb.BulgeGraph.from_fasta_text(f'>rna1\\n{structure}\\n{sequence}')[0]\n    custom_plot_rna(bg, coloring, ax=ax[2])\n    ax[2].set_title('deg_pH10', fontsize=16)\n\n    coloring = all_data.iloc[idx].deg_Mg_50C\n    coloring = [min(max(((c-(-np.percentile(train.deg_Mg_50C_max, 90)))\/(np.percentile(train.deg_Mg_50C_max, 90)-(-np.percentile(train.deg_Mg_50C_max, 90)))), 0),1) for c in coloring] \n    bg = fgb.BulgeGraph.from_fasta_text(f'>rna1\\n{structure}\\n{sequence}')[0]\n    custom_plot_rna(bg, coloring, ax=ax[3])\n    ax[3].set_title('deg_Mg_50C', fontsize=16)\n\n    coloring = all_data.iloc[idx].deg_50C\n    coloring = [min(max(((c-(-np.percentile(train.deg_50C_max, 90)))\/(np.percentile(train.deg_50C_max, 90)-(-np.percentile(train.deg_50C_max, 90)))), 0),1) for c in coloring] \n    bg = fgb.BulgeGraph.from_fasta_text(f'>rna1\\n{structure}\\n{sequence}')[0]\n    custom_plot_rna(bg, coloring, ax=ax[4])\n    ax[4].set_title('deg_50C', fontsize=16)\n\n    plt.show()\n\nfor i in range(3):\n    plot_structure_with_target_var(i)","f7f1275d":"train_seqpos = pd.DataFrame(columns=[ 'id_seqpos', 'predicted_loop_type', 'sequence', 'reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C'])\n\nfor i in range(len(train)):\n    df = train.loc[i]\n    new_df = pd.DataFrame(data={'id': df.id, 'pos': list(range(df.seq_scored)), \n                                'predicted_loop_type': list(df.predicted_loop_type)[:(df.seq_scored)],\n                                'sequence': list(df.sequence)[:(df.seq_scored)],\n                                'reactivity': list(df.reactivity)[:(df.seq_scored)], \n                                'deg_Mg_pH10': list(df.deg_Mg_pH10)[:(df.seq_scored)],\n                                'deg_pH10': list(df.deg_pH10)[:(df.seq_scored)],\n                                'deg_Mg_50C': list(df.deg_Mg_50C)[:(df.seq_scored)],\n                                'deg_50C': list(df.deg_50C)[:(df.seq_scored)]})\n\n    new_df['id_seqpos'] = new_df.apply(lambda x: f\"{x['id']}_{x['pos']}\", axis=1)\n    new_df = new_df.drop(['id', 'pos'], axis=1)\n    new_df = new_df[[ 'id_seqpos', 'predicted_loop_type', 'sequence', 'reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']] \n    train_seqpos = train_seqpos.append(new_df)\n\ntrain_seqpos = train_seqpos.reset_index(drop=True)\n\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\nOH_cols_train = pd.DataFrame(OH_encoder.fit_transform(train_seqpos[['predicted_loop_type', 'sequence']]))\n\nOH_cols_train.columns = OH_encoder.get_feature_names(['predicted_loop_type', 'sequence'])\n\nOH_cols_train.index = train_seqpos.index\n\ntrain_seqpos = pd.concat([train_seqpos, OH_cols_train], axis=1)\n\nfig, ax = plt.subplots(figsize=(12, 10))\n\ncorrelation_matrix = train_seqpos.corr()\nmatrix = np.triu(correlation_matrix)\n\nsns.heatmap(correlation_matrix, vmin=-1, vmax=1, annot = True, cmap='coolwarm', mask=matrix)\nplt.show()\n\ntrain_seqpos.head()","8c53d80a":"outliers = train[((train.reactivity_max == 0) & (train.reactivity_min == 0)) \n                 | ((train.deg_Mg_50C_max == 0) & (train.deg_Mg_50C_min == 0))\n                 | ((train.deg_Mg_pH10_max == 0) & (train.deg_Mg_pH10_min == 0))\n                | ((train.deg_pH10_max == 0) & (train.deg_pH10_min == 0))\n                | ((train.deg_50C_max == 0) & (train.deg_50C_min == 0))]\nprint(f\"There are {len(outliers)} data points where at least one of reactivity, deg_Mg_pH10, deg_pH10, deg_Mg_50C, or deg_50C is fully zero.\")\nprint(outliers.id)\n\nfor i in outliers.index:\n    plot_structure_with_target_var(i)","0fa55436":"# Garbage collection of code for later usage\n\"\"\"\n\n\nfig, ax = plt.subplots(nrows=1, ncols=5, figsize=(20, 3))\nfig.suptitle('Distribution of Min. Values', fontsize=16, y=1.2)\n\nsns.kdeplot(data = train.reactivity_min, ax= ax[0])\nax[0].set_title('reactivity')\n\nsns.kdeplot(data = train.deg_Mg_pH10_min, ax= ax[1])\nax[1].set_title('deg_Mg_pH10')\n\nsns.kdeplot(data = train.deg_pH10_min, ax= ax[2])\nax[2].set_title('deg_pH10')\n\nsns.kdeplot(data = train.deg_Mg_50C_min, ax= ax[3])\nax[3].set_title('deg_Mg_50C')\n\nsns.kdeplot(data = train.deg_50C_min, ax= ax[4])\nax[4].set_title('deg_50C')\n\nplt.show()\n\nfig, ax = plt.subplots(nrows=1, ncols=5, figsize=(20, 3))\nfig.suptitle('Distribution of Max. Values', fontsize=16, y=1.2)\n\nsns.kdeplot(data = train.reactivity_max, ax= ax[0])\nax[0].set_title('reactivity')\n\nsns.kdeplot(data = train.deg_Mg_pH10_max, ax= ax[1])\nax[1].set_title('deg_Mg_pH10')\n\nsns.kdeplot(data = train.deg_pH10_max, ax= ax[2])\nax[2].set_title('deg_pH10')\n\nsns.kdeplot(data = train.deg_Mg_50C_max, ax= ax[3])\nax[3].set_title('deg_Mg_50C')\n\nsns.kdeplot(data = train.deg_50C_max, ax= ax[4])\nax[4].set_title('deg_50C')\n\nplt.show()\n\n'''fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(20, 10))\nfig.suptitle('Count Distribution according to seq_scored (68 or 91)', fontsize=16)\nsns.kdeplot(data=all_data[all_data.seq_scored == 68].stems, ax=ax[0,0])\nsns.kdeplot(data=all_data[all_data.seq_scored == 91].stems, ax=ax[0,0])\nax[0,0].set_title('Stems', fontsize=16)\nax[0,0].legend(title='Seq_scored', loc='upper left', labels=['68', '91'])\n\nsns.kdeplot(data=all_data[all_data.seq_scored == 68].interior_loops, ax=ax[0,1])\nsns.kdeplot(data=all_data[all_data.seq_scored == 91].interior_loops, ax=ax[0,1])\nax[0,1].set_title('Interior Loops', fontsize=16)\nax[0,1].legend(title='Seq_scored', loc='upper left', labels=['68', '91'])\n\nsns.kdeplot(data=all_data[all_data.seq_scored == 68].multiloops, ax=ax[1,0])\nsns.kdeplot(data=all_data[all_data.seq_scored == 91].multiloops, ax=ax[1,0])\nax[1,0].set_title('Multiloops', fontsize=16)\nax[1,0].legend(title='Seq_scored', loc='upper left', labels=['68', '91'])\n\nsns.kdeplot(data=all_data[all_data.seq_scored == 68].hairpin_loops, ax=ax[1,1])\nsns.kdeplot(data=all_data[all_data.seq_scored == 91].hairpin_loops, ax=ax[1,1])\nax[1,1].set_title('Hairpin Loops', fontsize=16)\nax[1,1].legend(title='Seq_scored', loc='upper left', labels=['68', '91'])\nplt.show()'''\n\ntemp_df = train[(train.reactivity_max > 20) & (train.reactivity_min < -20)]\n\nprint(f\"There are {len(temp_df)} training datapoints with an absolute min.\/max. reactivity over 20.\")\nprint(f\"Within these {len(temp_df)}, there are {temp_df.structure.nunique()} unique structures.\")\n\nfig, ax = plt.subplots(nrows=2, ncols=4, figsize=(20, 10))\n\ntemp = temp_df.structure.value_counts()\ntemp = temp.to_frame().reset_index()\ntemp.columns = ['structure', 'counts']\n\nfor i in range(temp_df.structure.nunique()):\n    col =  i % 4\n    row = i \/\/ 4\n    \n    common_structure = temp.loc[i].structure\n\n    sequence = train[train.structure == common_structure].iloc[0].sequence\n    structure = train[train.structure == common_structure].iloc[0].structure\n    bg = fgb.BulgeGraph.from_fasta_text(f'>rna1\\n{structure}\\n{sequence}')[0]\n    fvm.plot_rna(bg, lighten=0.5, text_kwargs={\"fontweight\":None}, ax=ax[row, col])\n    \n    ax[row, col].set_title(f\"Re-occurs {temp.loc[i].counts} times in dataset.\")\n    \n    \n    \n    \n    #####\n\n\ndef plot_structure_with_forgi(idx):\n\n    plt.figure(figsize=(8,8))\n    sequence = train.loc[idx, 'sequence']\n    structure = train.loc[idx, 'structure']\n    bg = fgb.BulgeGraph.from_fasta_text(f'>rna1\\n{structure}\\n{sequence}')[0]\n    fvm.plot_rna(bg, lighten=0.5)\n    plt.show()\n    \ndef convert_to_grouped_structure(structure_string):\n    grouped_structure = np.zeros(len(structure_string))\n    for idx, char in enumerate(structure_string):\n        if char == '.':\n            if idx != 0:\n                grouped_structure[idx] = grouped_structure[idx-1]\n            else:\n                grouped_structure[idx] = 0\n        elif char == \"(\":\n            grouped_structure[idx] = grouped_structure[idx-1] + 1\n        else:\n            grouped_structure[idx] = grouped_structure[idx-1] - 1\n    return grouped_structure\n\ndef plot_structures(idx):\n    fig, ax = plt.subplots(nrows=1, ncols=5, figsize=(20, 3))\n    df = pd.DataFrame({'structure' : convert_to_grouped_structure(train.structure.loc[idx])[:68], \n                       'reactivity': train.reactivity.loc[idx], \n                       'deg_Mg_pH10': train.deg_Mg_pH10.loc[idx],\n                       'deg_pH10': train.deg_pH10.loc[idx],\n                       'deg_Mg_50C': train.deg_Mg_50C.loc[idx],\n                       'deg_50C': train.deg_50C.loc[idx]})\n    sns.scatterplot(y=df['structure'], \n                    x=df.index, \n                    hue=df.reactivity, \n                    marker='o', \n                    s=20,\n                    palette = 'cool', \n                    hue_norm = matplotlib.colors.Normalize(vmin=np.percentile(train['reactivity_min'], 10), vmax=np.percentile(train['reactivity_max'], 90), clip=True), \n                    ax= ax[0])\n    ax[0].legend([],[], frameon=False)\n    ax[0].set_title('reactivity')\n\n    sns.scatterplot(y=df['structure'], \n                    x=df.index, \n                    hue=df.deg_Mg_pH10, \n                    marker='o', \n                    s=20,\n                    palette = 'cool', \n                    hue_norm = matplotlib.colors.Normalize(vmin=np.percentile(train['deg_Mg_pH10_min'], 10), vmax=np.percentile(train['deg_Mg_pH10_max'], 90), clip=True), \n                    ax= ax[1])\n    ax[1].legend([],[], frameon=False)\n    ax[1].set_title('deg_Mg_pH10')\n\n    sns.scatterplot(y=df['structure'], \n                    x=df.index, \n                    hue=df.deg_pH10, \n                    marker='o', \n                    s=20,\n                    palette = 'cool', \n                    hue_norm = matplotlib.colors.Normalize(vmin=np.percentile(train['deg_pH10_min'], 10), vmax=np.percentile(train['deg_pH10_max'], 90), clip=True), \n                    ax= ax[2])\n    ax[2].legend([],[], frameon=False)\n    ax[2].set_title('deg_pH10')\n\n    sns.scatterplot(y=df['structure'], \n                    x=df.index, \n                    hue=df.deg_Mg_50C, \n                    marker='o', \n                    s=20,\n                    palette = 'cool', \n                    hue_norm = matplotlib.colors.Normalize(vmin=np.percentile(train['deg_Mg_50C_min'], 10), vmax=np.percentile(train['deg_Mg_50C_max'], 90), clip=True), \n                    ax= ax[3])\n    ax[3].legend([],[], frameon=False)\n    ax[3].set_title('deg_Mg_50C')\n\n    sns.scatterplot(y=df['structure'], \n                    x=df.index, \n                    hue=df.deg_50C, \n                    marker='o', \n                    s=20,\n                    palette = 'cool', \n                    hue_norm = matplotlib.colors.Normalize(vmin=np.percentile(train['deg_50C_min'], 10), vmax=np.percentile(train['deg_50C_max'], 90), clip=True), \n                    ax= ax[4])\n    ax[4].legend([],[], frameon=False)\n    ax[4].set_title('deg_50C')\n    plt.suptitle(f\"{train.structure.loc[idx][:68]}\\n{train.sequence.loc[idx][:68]}\", fontsize=16, y=1.2)\n\n    plt.show()\n    \nfor i in range(5):\n    plot_structures(i)\n    plot_structure_with_forgi(i)\n    \noutliers = train[(train.reactivity_max > 20) | (train.reactivity_min < -20) \n                 | (train.deg_Mg_pH10_max < -10) | (train.deg_Mg_pH10_min < -10)\n                 | (train.deg_pH10_max < -40) | (train.deg_pH10_min < -40)\n                 | (train.deg_Mg_50C_max < -20) | (train.deg_Mg_50C_min < -20) \n                 | (train.deg_50C_max < -40) | (train.deg_50C_min < -40)]\n\noutliers[['reactivity_max', 'reactivity_min', 'deg_Mg_pH10_max', 'deg_Mg_pH10_min', 'deg_pH10_max', 'deg_pH10_min', 'deg_Mg_50C_max', 'deg_Mg_50C_min', 'deg_50C_max', 'deg_50C_min']]\n\n\nall_data['seq_length_check'] = all_data['sequence'].apply(lambda x: len(x))\nprint(f\"seq_length has {len(all_data[all_data.seq_length != all_data.seq_length_check][['sequence', 'seq_length', 'seq_length_check']])} implausible entries.\")\n\ndef check_seq_scored_for_plausibility(feature):\n    train['check'] = train[feature].apply(lambda x: len(x))\n    print(f\"{feature} has {len(train[train.check != train.seq_scored][['check', 'seq_scored']])} implausible entries for seq_scored.\")\n\ncheck_seq_scored_for_plausibility('reactivity')\ncheck_seq_scored_for_plausibility('reactivity_error')\n\ncheck_seq_scored_for_plausibility('deg_pH10')\ncheck_seq_scored_for_plausibility('deg_error_pH10')\n\ncheck_seq_scored_for_plausibility('deg_Mg_pH10')\ncheck_seq_scored_for_plausibility('deg_error_Mg_pH10')\n\ncheck_seq_scored_for_plausibility('deg_50C')\ncheck_seq_scored_for_plausibility('deg_error_50C')\n\ncheck_seq_scored_for_plausibility('deg_Mg_50C')\ncheck_seq_scored_for_plausibility('deg_error_Mg_50C')\n\n\n\nim = np.load(os.path.join(PATH, \"bpps\/id_00073f8be.npy\"))\n\ndef check_seq_scored_for_plausibility(feature):\n    test['check'] = test[feature].apply(lambda x: len(x))\n    print(f\"{feature} has {len(test[test.check != test.seq_scored][['check', 'seq_scored']])} implausible entries for seq_scored.\")\n\ncheck_seq_scored_for_plausibility('reactivity')\ncheck_seq_scored_for_plausibility('deg_Mg_pH10')\ncheck_seq_scored_for_plausibility('deg_pH10')\ncheck_seq_scored_for_plausibility('deg_Mg_50C')\ncheck_seq_scored_for_plausibility('deg_50C')\"\"\"","a16993b8":"# Max. Error and Zeroed Values","ef66c84b":"# Other Cool Stuff from Forgi You Can Use for Feature Engineering\nhttps:\/\/viennarna.github.io\/forgi\/graph_tutorial.html\n\n> The secondary structure of an RNA molecule can be divided into five different types of \u2018elements\u2019. Each element is assigned a name that can be used to refer to it and to determine its identity:\n* fiveprime: The unpaired nucleotides at the 5\u2019 end of a molecule\/ chain. Name always starts with \u2018f\u2019 (e.g. \u2018f0\u2019).\n* threeprime: The unpaired nucleotides at the 3\u2019 end of a molecule\/ chain. Name always start with \u2018t\u2019 (e.g. \u2018t0\u2019)\n* stem: Regions of contiguous canonical Watson-Crick base-paired nucleotides. By default, stems have at least 2 consecutive basepairs. Always start with \u2018s\u2019 (e.g., \u2018s0\u2019, \u2018s1\u2019, \u2018s2\u2019, \u2026)\n* interior loop: Bulged out nucleotides and interior loops. An interior loop can contain unpaired bases on either strand or on both strands, flanked by stems on either side. Always start with \u2018i\u2019 (\u2018i0\u2019, \u2018i1\u2019, \u2018i2\u2019,\u2026)\n* multiloop segment: Single-stranded regions bewteen two stems. Always start with \u2018m\u2019. (\u2018m0\u2019, \u2018m1\u2019, \u2018m2\u2019\u2026) \n* hairpin loop: Always starts with \u2018h\u2019.\n\n## What is the difference to the bpRNA_documentation?\nThanks to [@sidneyng](https:\/\/www.kaggle.com\/sidneyng), who pointed out this question to me.\n\n**bpRNA_documentation**\n* S: paired \"Stem\" \n* M: Multiloop \n* I: Internal loop \n* B: Bulge \n* H: Hairpin loop \n* E: dangling End \n* X: eXternal loop\n\n**Mapping between Forgi and bpRNA_documentation**\n\n| Forgi | bpRNA |\n| --- | --- | \n| Stem (s) | Stem (S) |\n| Hairpin loop (h) | Hairpin loop (H) |\n| Fiveprime (f) or threeprime (t) | dangling End (E) |\n| Interior loop (i) | Internal loop (I) or Bulge (B) |\n| Multiloop segment (m) | Multiloop (M) or eXternal loop (X)|\n\n\nBelow you can see one example for each:\n* Interior loop (i) vs. Internal loop (I) or Bulge (B): Two opposite bulges are an internal loop \n* Multiloop segment (m) vs. Multiloop (M) or eXternal loop (X)","0e891c18":"# Visualizing Structures according to `reactivity`, `deg_Mg_pH10`, `deg_pH1`, `deg_Mg_50C`, and `deg_50C`\n\nLet's visualize some samples.\n\nThe following code is copied and then customized from https:\/\/github.com\/ViennaRNA\/forgi\/blob\/master\/forgi\/visual\/mplotlib.py\n","eb1d4c7b":"Thanks to [@erelin6613](https:\/\/www.kaggle.com\/erelin6613\/) and [@ricopue](https:\/\/www.kaggle.com\/ricopue\/) for their amazing notebooks on how to plot the structures with forgi! You can find them here:\n\n* https:\/\/www.kaggle.com\/erelin6613\/openvaccine-rna-visualization\/\n* https:\/\/www.kaggle.com\/ricopue\/second-structure-plot-and-info-with-forgi\n\n\n# Top 3 Most Common Structures","44bde005":"* Threeprimes only have one unique value, so this is probably not a very interesting new feature.\n* Fiveprimes are directly correlated to the dangling ends but both are not really correlated to any other segments in the structures.\n* It looks like we have **slightly more Interior Loops and Stems when the sequence becomes longer** - keep this in mind since this is one of the big differences between train and test set.\n* From above mapping table obviously `interior_loops` is highly correlated with `B` and `I` and `multiloops` is highly correlated with `M` and `X`","f58ee5ca":"## New Features: Stems, Interior Loops, Hairpin Loops, etc.\n\nLet's have a look at the new features and their characteristics!\n\nFirst, let's do a sanity check to see if the forgi features and the bpRNA features are indicating the same structure.\n* For the stems, forgi and the retrieved values from `predicted_loop_type` have some deviations. This is because forgi already takes into account where a new stem begins. Here, I would recommend preferring the forgi values (unless your method of retrieving the stems is more advanced than mine).\n* A similar effect can be seen for the multiloop segments. When 'SSSSSSSSSSSSS' would represent parts of two stems, forgi creates a multiloop segment for the break between those two. Therefore, I would probably prefer the retrieved values from `predicted_loop_type` in this case."}}