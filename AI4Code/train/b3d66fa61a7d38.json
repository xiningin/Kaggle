{"cell_type":{"8c333fb4":"code","22faefa3":"code","cd55355b":"code","74462c89":"code","9c647bc1":"code","5b0f8e6c":"code","68f5f2ac":"code","4cac88d5":"code","9c4d6494":"code","942aaf20":"code","660ef823":"code","0cf4434b":"code","85485ae9":"code","84830c68":"code","385e3030":"code","f304c636":"code","d4098914":"code","cdbfa083":"code","6d686cc6":"code","63b1980a":"code","e2cb0b27":"code","a0617694":"code","9e29eb44":"code","61629559":"markdown","632ee325":"markdown","7a19df9e":"markdown","1faee778":"markdown","aed27d63":"markdown","14a9ce94":"markdown","1d14de97":"markdown","aa173c41":"markdown","c5c1826e":"markdown","4178faa0":"markdown","cf594eb8":"markdown","f12fa4b1":"markdown","9b1d8fea":"markdown","faeb05fe":"markdown","6323f917":"markdown","49ea4d5b":"markdown","7c004b85":"markdown","f17639be":"markdown","7fae8f3f":"markdown","c4f5172a":"markdown","18fa70bd":"markdown","4e0a61d1":"markdown","b354b0ee":"markdown","94782b72":"markdown","3e822639":"markdown","313e87c1":"markdown","6bf8e889":"markdown","301cccab":"markdown","450d8a4f":"markdown","bfb76265":"markdown"},"source":{"8c333fb4":"# Importing libraries\n\nimport pandas as pd\nimport numpy as np\nimport altair as alt\n#alt.data_transformers.enable('default', max_rows=None) ","22faefa3":"music = pd.read_csv(\"..\/input\/data-analytics-to-study-music-streaming-patterns\/spotify.csv\", index_col=0)\nmusic.head()","cd55355b":"# Source: https:\/\/www.kaggle.com\/omegaji\/altair-render-script\/notebook\n\nimport json\nfrom IPython.display import HTML\n\nKAGGLE_HTML_TEMPLATE = \"\"\"\n<style>\n.vega-actions a {{\n    margin-right: 12px;\n    color: #757575;\n    font-weight: normal;\n    font-size: 13px;\n}}\n.error {{\n    color: red;\n}}\n<\/style>\n<div id=\"{output_div}\"><\/div>\n<script>\nrequirejs.config({{\n    \"paths\": {{\n        \"vega\": \"{base_url}\/vega@{vega_version}?noext\",\n        \"vega-lib\": \"{base_url}\/vega-lib?noext\",\n        \"vega-lite\": \"{base_url}\/vega-lite@{vegalite_version}?noext\",\n        \"vega-embed\": \"{base_url}\/vega-embed@{vegaembed_version}?noext\",\n    }}\n}});\nfunction showError(el, error){{\n    el.innerHTML = ('<div class=\"error\">'\n                    + '<p>JavaScript Error: ' + error.message + '<\/p>'\n                    + \"<p>This usually means there's a typo in your chart specification. \"\n                    + \"See the javascript console for the full traceback.<\/p>\"\n                    + '<\/div>');\n    throw error;\n}}\nrequire([\"vega-embed\"], function(vegaEmbed) {{\n    const spec = {spec};\n    const embed_opt = {embed_opt};\n    const el = document.getElementById('{output_div}');\n    vegaEmbed(\"#{output_div}\", spec, embed_opt)\n      .catch(error => showError(el, error));\n}});\n<\/script>\n\"\"\"\n\nclass KaggleHtml(object):\n    def __init__(self, base_url='https:\/\/cdn.jsdelivr.net\/npm'):\n        self.chart_count = 0\n        self.base_url = base_url\n        \n    @property\n    def output_div(self):\n        return \"vega-chart-{}\".format(self.chart_count)\n        \n    def __call__(self, spec, embed_options=None, json_kwds=None):\n        # we need to increment the div, because all charts live in the same document\n        self.chart_count += 1\n        embed_options = embed_options or {}\n        json_kwds = json_kwds or {}\n        html = KAGGLE_HTML_TEMPLATE.format(\n            spec=json.dumps(spec, **json_kwds),\n            embed_opt=json.dumps(embed_options),\n            output_div=self.output_div,\n            base_url=self.base_url,\n            vega_version=alt.VEGA_VERSION,\n            vegalite_version=alt.VEGALITE_VERSION,\n            vegaembed_version=alt.VEGAEMBED_VERSION\n        )\n        return {\"text\/html\": html}\n    \nalt.renderers.register('kaggle', KaggleHtml())\nprint(\"Define and register the kaggle renderer. Enable with\\n\\n\"\n      \"    alt.renderers.enable('kaggle')\")\nalt.renderers.enable('kaggle')  ","74462c89":"chart = alt.Chart(music)","9c647bc1":"alt.Chart(music).mark_bar().encode(\n    x='Danceability',\n    y='Energy'\n)","5b0f8e6c":"alt.Chart(music).mark_boxplot().encode(\n    x='Genre',\n    y='Speechiness'\n)","68f5f2ac":"alt.Chart(music).mark_boxplot(extent=2.0).encode(\n    x='Genre',\n    y='Speechiness'\n)","4cac88d5":"alt.Chart(music).mark_circle(\n    color='red',\n    opacity=0.3\n).encode(\n    x='Genre',\n    y='Speechiness'\n)","9c4d6494":"alt.Chart(music).mark_point().encode(\n    y='Positivity',\n    x='Artist', \n    color='Genre'\n)","942aaf20":"alt.Chart(music).mark_point().encode(\n    y='Length(seconds):O',\n    x='Artist:N', \n    color='Speechiness:N'\n)","660ef823":"alt.Chart(music).mark_point().encode(\n    y='Length(seconds):O',\n    x='Artist:N', \n    color='Speechiness:Q'\n) ","0cf4434b":"alt.Chart(music).mark_bar().encode(\n    alt.X('Positivity', bin=True),\n    y='count()'\n )   ","85485ae9":"alt.Chart(music).mark_square().encode(\n    alt.X('Beats per minute', bin=alt.Bin(maxbins=20)),\n    alt.Y('Positivity', bin=True),\n    size='count()',\n    color='Artist:N'\n  )","84830c68":"alt.Chart(music).mark_square().encode(\n    alt.X('Beats per minute', bin=alt.Bin(maxbins=20)),\n    alt.Y('Positivity', bin=True),\n    size='count()',\n    color='mean(Popularity):Q'\n  )","385e3030":"alt.Chart(music).mark_point().encode(\n    x='Positivity:Q',\n    y='Popularity:Q',\n    color='Artist:N',\n    tooltip='Genre'\n).interactive()","f304c636":"interval = alt.selection_interval()","d4098914":"alt.Chart(music).mark_point().encode(\n    x='Danceability:Q',\n    y='Positivity:Q',\n    color='Artist:N'\n).add_selection(\n    interval\n)","cdbfa083":"alt.Chart(music).mark_point().encode(\n    x='Danceability:Q',\n    y='Positivity:Q',\n    color=alt.condition(\n        interval, 'Artist:N', alt.value('lightgray'))\n).add_selection(\n     interval \n) ","6d686cc6":"single = alt.selection_single()","63b1980a":"alt.Chart(music).mark_point().encode(\n    x='Danceability:Q',\n    y='Positivity:Q',\n    color=alt.condition(\n        single, 'Artist:N', alt.value('lightgray'))\n).add_selection(\n     single \n) ","e2cb0b27":"alt.Chart(music).mark_bar().encode(\n    y='Genre:N',\n    color='Artist:N',\n    x='count(Genre):Q'\n)","a0617694":"base = alt.Chart(music).mark_point().encode(\n    y='Popularity',\n    color=alt.condition(interval, 'Artist', alt.value('lightgray')),\n    tooltip='Genre'\n).properties(\n    selection=interval\n)\nbase.encode(x='Positivity') | base.encode(x='Speechiness')","9e29eb44":"points = alt.Chart(music).mark_point().encode(\n    x='Danceability:Q',\n    y='Positivity:Q',\n    color=alt.condition(\n        interval, 'Artist:N', alt.value('grey'))\n).add_selection(\n     interval \n) \n\nbars = alt.Chart(music).mark_bar().encode(\n    y='Genre:N',\n    color='Artist:N',\n    x='count(Genre):Q'\n).transform_filter(\n    interval\n)\n\npoints & bars","61629559":"\n\n### 2.) Chart\n\nThe fundamental object in Altair is the Chart, which takes a dataframe as a single argument:","632ee325":"To understand the Altair and learn more about it, check the [official documentation](https:\/\/altair-viz.github.io\/index.html).","7a19df9e":"# Let's understand Altair\n\nAltair is a declarative statistical visualization library for Python, based on Vega and Vega-Lite which are both visualization grammar that allows you to describe the visual appearance and interactive behavior of a visualization in a JSON format.\n\n> Declarative visualization lets you think about the relationships within the data rather than mechanics of the visualization like axis limits, legends, etc.\n\nAltair produces Vega-Lite visualizations, which require a Javascript frontend to display the charts. Because notebook environments combine a Python backend with a Javascript frontend.\n\nThe key idea is that you are declaring links between `data columns` and `visual encoding channels`, such as the x-axis, y-axis, color, etc. The rest of the plot details are handled automatically.","1faee778":"\nSo far, we have defined the Chart object which itself has no meaning, and we have not yet told the chart what to do anything with the data. That will come next.","aed27d63":"You can access the detailed lists from [official documentation](https:\/\/altair-viz.github.io\/user_guide\/marks.html).","14a9ce94":"This selection doesn't do anything yet. Now, let's `condition` the color on this selection which helps to highlight the points in the selection.","1d14de97":"### 4.) Encodings\n\nOnce we have the data and how it is represented - we want to specify where to represent it. That is, set up the positions, size, color, etc. This is where we use encodings. \n\nIn Altair, encodings is the mapping of data to visual properties such as axis, color of marker, shape of marker etc. The encoding method `Chart.encode()` defines various properties of chart display and it is the most important function to create meaningful visualization. The following are the most basic encoding properties and knowing them should be enough for you to create basic charts.\n\n#### \u2022 Encoding Channels\n\nSome `encoding channels` that is mostly used:\n\n- x: the x-axis value\n- y: the y-axis value\n- row: The row of a faceted plot\n- column: the column of a faceted plot\n\nYou can access the full list of encoding channels from [here](https:\/\/altair-viz.github.io\/user_guide\/encoding.html).\n\nTo visually separate the points from the code, we can map various encoding channels, or channels for short, to columns in the dataset.","aa173c41":"In addition to basic marks, it also provides the `compound marks` like box_plot, error_band and error_bar.","c5c1826e":"Other than `mean` and `count`, you can use various aggregation functions built into Altair. You can access the full list from [here](https:\/\/altair-viz.github.io\/user_guide\/encoding.html#binning-and-aggregation).","4178faa0":"We can now `bind` this interval to our chart by setting the `selection` property:","cf594eb8":"### 3.) Marks\n\nNow, we would like the data to be visualized. This is done via the `mark` attribute of the chart object, which is most conveniently accessed via the `Chart.mark_*` methods.\n\n\nAfter selecting data, you need to choose various charts such as bar charts, line charts, area charts, scatter charts, histograms, and maps. The mark property is what specifies how exactly those attribute should be represented on the plot.\n\nAltair provides a number of `basic mark properties` that can be used like point, circle, square, bar, etc. ","f12fa4b1":"Let's create a bar chart:","9b1d8fea":"Let's create an interval selection using the `selection_interval()` function:","faeb05fe":"#### \u2022 Encoding Data Types\n\nFor data specified as a DataFrame, Altair can automatically determine the correct data type for each encoding, and creates appropriate scales and legends to represent the data.\n\n- quantitative: shorthand code Q, a continuous real-valued quantity\n- ordinal: shorthand code O, a discrete ordered quantity\n- nominal: shorthand code N, a discrete unordered category\n- temporal: shorthand code T, a time or date value","6323f917":"Note that the default behavior is to display outliers as points, where an outlier is defined as any point more than 1.5 IQRs from the box. \nWe can also adjust the threshold using the `extent` property of the mark.","49ea4d5b":"## Interactions\n\nOne of the unique features of Altair is that users can interact with charts, including controls such as panning, zooming, and selecting a range of data.\n\nThere are three main concepts which make the chart interactive:\n\n- **Selection** - the `selection()` object captures the interactions through inputs like mouse click, drag, slider, etc. to effect the chart. \n\n- **Condition** - Selection can't do anything alone. So, to make the chart respond, the `condition()` function takes the selection input and reference it in some ways within the chart.\n\n- **Binding** - the `bind` property of the selection establishes a two-way binding between the selection and an input element of your chart.\n\nAltair provides the `interactive()` method which is the simplest way of interaction.","7c004b85":"From the above two plots, it is clear that how color scale depends on the data type specified which decides whether a discrete or continuous legend is used.","f17639be":"We can also ignore outliers completely using `extent=max-min`.\n\n**Mark Properties**\n\nAltair also provides mark properties which is passed as an arguments to `mark_*()` methods like opacity, color, font, size, etc.","7fae8f3f":"### Selection types\n\nAltair provides a general `selection` API for creating interactive plots. There are three types of selections available in Altair.\n\n- **Interval Selection** - Altair provides `alt.selection_interval()` function which allows you to select chart elements by clicking and dragging.\n\n- **Single Selection** - Altair provides `alt.selection_single()` function which allows you to select a single chart element at a time using mouse actions. By default, points are selected on click.\n\n- **Multiple Selection** - Altair provides `alt.selection_multi()` function which allows you to select multiple chart objects at once. ","c4f5172a":"For composing multiple selection chart, we need to create variable for each of the chart and use logical composition operands like `&(AND)`, `|(OR)`, and `~(NOT)` to combine the charts. Above plot is the result of this operation.","18fa70bd":"Let's create an interval selection using the `selection_single()` function:","4e0a61d1":"### **Binning and Aggregation**\n\nAltair uses Split-Apply-Combine Strategy for visualizing data, where we split data based on some conditions, aggregation is applied within each group, and then combine the data back together. \n\nLet's build a histogram where we take 1D data and split the data based on the bin it falls in, using the count of the data, we aggregate the results within each bin then combines the results back together.","b354b0ee":"In above plot `Count` aggregation has been used which doesn't require any other field.\n\nYou can also specify the bin value by using `alt.Bin` as bin parameter. By default it accepts only boolean types i.e. True or False. Let's see how it works:","94782b72":"## Altair Basic Guide\n\nI'll talk about the basic process which will help you to create an interactive chart.\n\n### 1.) Data\n\nThe data used internally by Altair is built around the Pandas DataFrame. The data  can be specified in one of the following ways:\n\n- as a Pandas DataFrame\n-\u00a0as a Data or related object\n- as a url string pointing to a json or csv formated file\n- as an object that supports the geo_interface (eg. Geopandas GeoDataFrame, Shapely Geometries, GeoJSON Objects)","3e822639":"When you hover over a point, it will bring up a tooltip with a name of the Genre.","313e87c1":"Kaggle does not work with altair provided 'notebook' renderer. We need to create custom renderer for kaggle. \n\nThere is a well written [python script](https:\/\/www.kaggle.com\/omegaji\/altair-render-script\/notebook). This kernel will help you to get started with Altair on Kaggle. Kernel: https:\/\/www.kaggle.com\/omegaji\/altair-render-script\/notebook","6bf8e889":"Let's create compound chart where we don't need transformation methods.","301cccab":"Here, `count` is used to specify the size of squares to indicate the counts.","450d8a4f":"First one is pretty straightforward as most of us are familiar with data manipulations in Python which requires much more flexibility. \n\nNow, we are going to make compound chart, so I'll be using second approach which helps us to specify data transformation within the chart specification itself. \n\nAltair provides `transform_*` methods to accomplish this tasks.\n\nYou can access the full list from [here](https:\/\/altair-viz.github.io\/user_guide\/transform\/index.html)\n\nI'll be using `transform_filter()` method which selects a subset of data based on a condition. We will be using this method to associate bar chart with the scatter chart.","bfb76265":"### **Data Transformations**\n\nThere are times when we filter or transform data for visualization, and there are two ways we can do this in Altair:\n\n1. Before the chart definition, using standard Pandas data transformations.\n\n2. Within the chart definition, using Vega-Lite\u2019s data transformation tools."}}