{"cell_type":{"e56a18ae":"code","d25f0185":"code","c8bca4cf":"code","ba1d5aff":"code","7aaf45c2":"code","2c91c6d6":"code","102e89eb":"code","c5b444b1":"code","c70abd98":"code","3b5b8302":"code","e71c16c3":"code","0061e1fe":"code","41259ddd":"code","643979f8":"code","430ec253":"code","1dc8d834":"code","d4986be4":"code","aa50d5a3":"code","e83ed927":"code","5a8ebd9c":"code","5aafa752":"code","da2c6cf1":"code","ca9dd789":"code","ee169813":"code","0ee011f2":"code","2af6608c":"code","3ea8d253":"code","e8523b41":"code","69aba591":"markdown"},"source":{"e56a18ae":"import pandas as pd\nimport numpy as np\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport seaborn as sns\nsns.set_style('darkgrid')\nimport matplotlib.pyplot as plt\n\nfrom fbprophet import Prophet\n\n!pip install openpyxl","d25f0185":"# upload the df\ndf = pd.read_excel('..\/input\/cub-sp-r16n-en\/CUB_SP_R16N_en.xlsx')","c8bca4cf":"# create date column\ndf['date'] = df['year'].map(str) + '-' + df['month'].map(str)\ndf['date'] = pd.to_datetime(df['date'], format = '%Y-%m')","ba1d5aff":"df.head()","7aaf45c2":"df.info()","2c91c6d6":"# Visualization of GLOBAL cost (BRL - R$\/m\u00b2)\nfig, (ax1, ax2) = plt.subplots(2,1,figsize=(12,10))\n\nsns.lineplot(x= 'date', y = 'global_cost', data=df, ax = ax1)\nsns.boxplot(x = 'year', y = 'global_cost', data=df, ax = ax2, palette = 'viridis');","102e89eb":"# GLOBAL COST - pattern of variation of values in the year\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(4,1,figsize=(12,16))\n\nsns.lineplot(x= 'date', y = 'global_cost', data=df.loc[df['year']==2013], ax = ax1)\nsns.lineplot(x= 'date', y = 'global_cost', data=df.loc[df['year']==2014], ax = ax2, color='purple')\nsns.lineplot(x= 'date', y = 'global_cost', data=df.loc[df['year']==2015], ax = ax3, color='orange')\nsns.lineplot(x= 'date', y = 'global_cost', data=df.loc[df['year']==2016], ax = ax4, color='green');","c5b444b1":"# Visualization of MANPOWER COST (BRL - R$\/m\u00b2)\nfig, (ax1, ax2) = plt.subplots(2,1,figsize=(12,10))\n\nsns.lineplot(x= 'date', y = 'manpw_cost', data=df, ax = ax1)\nsns.boxplot(x = 'year', y = 'manpw_cost', data=df, ax = ax2, palette = 'viridis');","c70abd98":"# Visualization of MATERIAL COST (BRL - R$\/m\u00b2)\nfig, (ax1, ax2) = plt.subplots(2,1,figsize=(12,10))\n\nsns.lineplot(x= 'date', y = 'material_cost', data=df, ax = ax1)\nsns.boxplot(x = 'year', y = 'material_cost', data=df, ax = ax2, palette = 'viridis');","3b5b8302":"# Visualization of MANAGEMENT COST (BRL - R$\/m\u00b2)\nfig, (ax1, ax2) = plt.subplots(2,1,figsize=(12,10))\n\nsns.lineplot(x= 'date', y = 'manag_cost', data=df, ax = ax1)\nsns.boxplot(x = 'year', y = 'manag_cost', data=df, ax = ax2, palette = 'viridis');","e71c16c3":"# Train set - values form 2007-01-01 to 2018-12-01 | Test set - values from 2019-01-01 to 2019-08-01\ndf_train = df.loc[df['year'] <= 2018]\ndf_test = df.loc[df['year'] == 2019]","0061e1fe":"df_train.tail()","41259ddd":"df_test","643979f8":"# Prediction of GLOBAL COST\ndf_1 = df_train[['date', 'global_cost']]\n\n# Fbprophet dataset pattern\ndf_1.columns = ['ds', 'y']\n\ndf_1.info()","430ec253":"# Fit model\/Predict\nm1 = Prophet(yearly_seasonality=True, weekly_seasonality=False, daily_seasonality=False).fit(df_1)\nfuture1 = m1.make_future_dataframe(periods=12, freq='M')\nfcst1 = m1.predict(future1)\nfig1 = m1.plot(fcst1)","1dc8d834":"fig2 = m1.plot_components(fcst1)","d4986be4":"model1 = fcst1[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]\nmodel1 = model1.round(2)\nmodel1.tail(11)","aa50d5a3":"# Model Evaluation\nmodel1 = model1.loc[model1['ds'] >= '2019-01-01']","e83ed927":"model1['year'] = model1['ds'].dt.year\nmodel1['month'] = model1['ds'].dt.month\n\nmodel1 = model1.loc[model1['month']<=8]\n\nmodel1","5a8ebd9c":"# Date format similar to original dataset to evaluation of yhat\nmodel1['date'] = model1['year'].map(str) + '-' + model1['month'].map(str)\nmodel1['ds'] = pd.to_datetime(model1['date'], format = '%Y-%m')\n\nmodel1.drop(['year', 'month', 'date'], axis=1, inplace=True)\n\nmodel1","5aafa752":"df_test1 = df_test[['date', 'global_cost']]\ndf_test1.columns = ['ds', 'y']","da2c6cf1":"# Merge real values of test set and prevision\ndf_val = pd.merge(df_test1, model1, on='ds')\ndf_val","ca9dd789":"# Error\ndf_val['dif'] = df_val['y'] - df_val['yhat']\ndf_val","ee169813":"df_val.describe().round(2)","0ee011f2":"df_val['month'] = df_val['ds'].dt.month","2af6608c":"# Error analysis - between -R$10 and R$16\nfig, ax = plt.subplots(figsize=(12,6))\nplt.ylim(-19,19)\nplt.xlim(0.5,8.5)\nref = 0\nref2 = [*range(0, 10)]\nsns.scatterplot(x = 'month', y = 'dif', data=df_val)\nsns.lineplot(x = ref2, y = ref, color = 'red', alpha=0.5);","3ea8d253":"print('Error Sum: R$', df_val['dif'].sum().round(2))\nprint('Error Mean: R$', df_val['dif'].mean().round(2))","e8523b41":"# Plot of real value (BLUE) and Prediction (RED)\nfig, ax = plt.subplots(figsize=(12,6))\nplt.ylim(1200,1500)\n\nsns.lineplot(x='ds', y='y', data=df_val)\nsns.lineplot(x='ds', y='yhat', data=df_val, color='red')\nax.fill_between(df_val['ds'], df_val['yhat_upper'], df_val['yhat_lower'], color='red', alpha=0.06);","69aba591":"# Construction Cost Prediction S\u00e3o Paulo\/Brazil\n\n__Aim:__ Forecasting the cost of civil construction using CUB values - Monthly values published by the union of the State of S\u00e3o Paulo\/Brazil.\n\n__Data:__ Data - https:\/\/sindusconsp.com.br\/cub\/ From 2007 to 2019\n\n__Method:__ fbprophet - https:\/\/facebook.github.io\/prophet\/docs\/quick_start.html"}}