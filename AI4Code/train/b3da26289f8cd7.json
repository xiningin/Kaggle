{"cell_type":{"1bba2fd7":"code","8f3e534c":"code","8d6ab66e":"code","2ba59b6e":"code","180fc590":"code","c7476387":"code","fb5e778d":"code","0e1bdbf8":"code","b67348c3":"code","a811be33":"code","064e5a24":"code","a1be5094":"code","74a4eae7":"code","05949482":"code","e810191c":"code","9699c711":"code","2c865308":"code","1dbeb6e4":"code","cf4197ca":"code","bcf1e42f":"code","7be52a9e":"code","97630087":"markdown","c8c0a507":"markdown","d2272500":"markdown","613b6f2e":"markdown","9fa79ee1":"markdown","cac37937":"markdown","ed6b1ac0":"markdown","35f41040":"markdown","a08ef243":"markdown","05d8ea29":"markdown"},"source":{"1bba2fd7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8f3e534c":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn import preprocessing\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBRegressor\nimport plotly.graph_objects as go\n\n\n%matplotlib inline","8d6ab66e":"train = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/train.csv')\nprint('Train shape: ', train.shape)\ntest = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/test.csv')\nprint('Test shape: ', test.shape)\nsubmisison = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/sample_submission.csv')","2ba59b6e":"train.head()","180fc590":"test.head()","c7476387":"train.dtypes","fb5e778d":"train['breath_id'].value_counts()","0e1bdbf8":"train[train['breath_id']==1]['time_step'].value_counts()","b67348c3":"eda_columns = ['breath_id','R','C','time_step', 'u_in','u_out','pressure']","a811be33":"train[eda_columns].hist(figsize = (12,10))\nplt.show()","064e5a24":"fig = go.Figure()\nfor id_ in list(set(train['breath_id']))[:10]:\n    fig.add_trace(go.Scatter(x=train[train['breath_id']==id_]['time_step'], y=train[train['breath_id']==id_]['pressure'],\n                        mode='lines',\n                        name=str(id_)))\n    \nfig.update_layout(title='Pressure v\/s Timestamp',\n                   xaxis_title='Timestamp',\n                   yaxis_title='Pressure')\n\nfig.show()","a1be5094":"fig = go.Figure()\nfor id_ in list(set(train['breath_id']))[:10]:\n    fig.add_trace(go.Scatter(x=train[train['breath_id']==id_]['time_step'], y=train[train['breath_id']==id_]['u_in'],\n                        mode='lines',\n                        name=str(id_)))\n    \nfig.update_layout(title='u_in v\/s timestamp',\n                   xaxis_title='Timestamp',\n                   yaxis_title='u_in')\n\nfig.show()","74a4eae7":"fig = go.Figure()\nfor id_ in list(set(train['breath_id']))[:10]:\n    fig.add_trace(go.Scatter(x=train[train['breath_id']==id_]['time_step'], y=train[train['breath_id']==id_]['u_out'],\n                        mode='lines',\n                        name=str(id_)))\n    \nfig.update_layout(title='u_out v\/s timestamp',\n                   xaxis_title='Timestamp',\n                   yaxis_title='u_out')\n\nfig.show()","05949482":"corr_matrix = train[eda_columns].corr()\nplt.figure(figsize=(14,10))\nsns.heatmap(corr_matrix, annot=True)","e810191c":"## Train test Split\ninp_col = ['breath_id', 'R', 'C', 'time_step', 'u_in', 'u_out']\nout_col = ['pressure']\nx_train, x_test, y_train, y_test = train_test_split(train[inp_col], train[out_col])","9699c711":"x_train.shape","2c865308":"y_train.shape","1dbeb6e4":"linear_model = LinearRegression()\nlinear_model.fit(x_train, y_train)","cf4197ca":"linear_pred = linear_model.predict(x_test)\nmean_absolute_error(y_test, linear_pred)","bcf1e42f":"%%time\nxgb_model = XGBRegressor(objective ='reg:linear',n_estimators = 10)\nxgb_model.fit(x_train,y_train)","7be52a9e":"xgboost_pred = xgb_model.predict(x_test) \nmean_absolute_error(y_test, xgboost_pred)","97630087":"As we can see from above correlation plot, **Pressure** is highly correlated with **u_out** and **time_steps**.","c8c0a507":"## EDA","d2272500":"## Linear Regression","613b6f2e":"## Train Test Split","9fa79ee1":"- All the breath id have same counts i.e. 80.\n- Every breath id have unique timestamps. Every breath id contain 80 different timestamps","cac37937":"## XGBoost Regressor","ed6b1ac0":"# Ventilation Pressure Prediction\n\n### Introduction\n\nkaggle: https:\/\/www.kaggle.com\/c\/ventilator-pressure-prediction\/overview\n\nIn this competition, you\u2019ll simulate a ventilator connected to a sedated patient's lung. The best submissions will take lung attributes **compliance and resistance** into account.\n\n**Compliance**: Compliance is volume divided by change in pressure\n\n**Resistance**: Resistance is the change in pressure divided by flow\n\n### Evaluation\n\nThe competition will be scored as the mean absolute error between the predicted and actual pressures during the inspiratory phase of each breath. The expiratory phase is not scored. The score is given by:\n\n                |\ud835\udc4b\u2212\ud835\udc4c|\n                \nwhere \ud835\udc4b is the vector of predicted pressure and \ud835\udc4c is the vector of actual pressures across all breaths in the test set.\n\n![image.png](attachment:902e3389-3b20-4c36-b0eb-49ce4b59e761.png)\n\n### Variables Description\n\n   - **id** - globally-unique time step identifier across an entire file\n    \n   - **breath_id** - globally-unique time step for breaths\n   - **R** - lung attribute indicating how restricted the airway is (in cmH2O\/L\/S). Physically, this is the change in pressure per change in flow (air volume per time). Intuitively, one can imagine blowing up a balloon through a straw. We can change R by changing the diameter of the straw, with higher R being harder to blow.\n   - **C** - lung attribute indicating how compliant the lung is (in mL\/cmH2O). Physically, this is the change in volume per change in pressure. Intuitively, one can imagine the same balloon example. We can change C by changing the thickness of the balloon\u2019s latex, with higher C having thinner latex and easier to blow.\n   - **time_step** - the actual time stamp.\n   - **u_in(%)** - the control input for the inspiratory solenoid valve. Ranges from 0 to 100.The first control input is a continuous variable from 0 to 100 representing the percentage the inspiratory solenoid valve is open to let air into the lung (i.e., 0 is completely closed and no air is let in and 100 is completely open).\n   - **u_out** - the control input for the exploratory solenoid valve. Either 0 or 1. The second control input is a binary variable representing whether the exploratory valve is open (1) or closed (0) to let air out.\n   - **pressure** - the airway pressure measured in the respiratory circuit, measured in cmH2O.","35f41040":"Variable **'R'**, **'C'** and **'u_out'** are categorical variables here as we can see in above graphs.","a08ef243":"## Read Data","05d8ea29":"## ML Models"}}