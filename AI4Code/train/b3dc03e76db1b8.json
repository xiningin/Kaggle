{"cell_type":{"9f6d9025":"code","d4ad5c7f":"code","e22e9c4e":"code","23429a4e":"code","c20fa634":"code","aa980ce2":"code","4b59bc5e":"code","e5ab5aa9":"code","2ea357a1":"code","1b1a411d":"code","436440f9":"code","9b39efd6":"code","d4fb6f3e":"code","794f484f":"code","e5dfb0c1":"code","2555c712":"code","33c5a206":"markdown","08661053":"markdown","dda9c732":"markdown","375b60e3":"markdown","12a7eead":"markdown","a96cd439":"markdown","9b428be8":"markdown","02bcca17":"markdown"},"source":{"9f6d9025":"# importing required libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d4ad5c7f":"# load the data\ndata = pd.read_csv(\"..\/input\/iriscsv\/Iris.csv\")\ndata.head(10)","e22e9c4e":"data.tail()","23429a4e":"data.isna().sum()","c20fa634":"data.Species.value_counts()","aa980ce2":"data.describe()","4b59bc5e":"data.drop([\"Id\"], axis=1, inplace=True)","e5ab5aa9":"sns.pairplot(data, hue=\"Species\")","2ea357a1":"# separating features and labels\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values","1b1a411d":"# label encoding the output\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny = le.fit_transform(y)","436440f9":"# performing train test split\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20)","9b39efd6":"# importing Decision Tree Classifier from sklearn library, training the model using training sets\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion='gini',random_state=None)   # instantiating library\nclassifier.fit(X_train,y_train)","d4fb6f3e":"# prediction for the test data\n\ny_pred = classifier.predict(X_test)\ny_pred = le.inverse_transform(y_pred)\ny_test = le.inverse_transform(y_test)","794f484f":"y_pred","e5dfb0c1":"from sklearn.metrics import accuracy_score,confusion_matrix\ncm = confusion_matrix(y_test,y_pred)\nprint(\"Confusion_Matrix is: \\n\", cm)\nac = accuracy_score(y_test,y_pred)\nprint(\"Accuracy_Score is:\", ac)","2555c712":"from sklearn import tree\n\nplt.figure(figsize=(25,20))\ndot_data = tree.plot_tree(classifier, \n                                feature_names=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm'],  \n                                class_names=['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'],\n                                filled=True)\nplt.title(\"Decision Tree Visualization\")\nplt.show()","33c5a206":"## **Prediction :**","08661053":"# Visualising Graphically :","dda9c732":"## **Data Preprocessing:**","375b60e3":"# **Task 6 - Prediction using Decision Tree Algorithm**\n## **Problem**\n\nCreate the Decision Tree classifier and visualize it graphically.\n\nThe purpose is if we feed any new data to this classifier, it would be able to\npredict the right class accordingly.","12a7eead":"# **Navaneethan** **S**","a96cd439":"# DATA SCIENCE AND BUSINESS ANALYTICS INTERN @TSF - MARCH2021","9b428be8":"# Done Task-6 Thank_You!","02bcca17":"## **Training the model:**"}}