{"cell_type":{"b70e5d21":"code","0d3e0e6e":"code","0e160a3f":"code","858eb04d":"code","e01cb50e":"code","a1d4baa6":"code","fe8ea739":"code","5e1046f5":"code","6044107c":"code","bd521877":"code","b895b481":"code","42f50381":"code","9c630ab9":"code","7bc18519":"code","e73c8a4b":"code","1d9ab118":"code","7033236b":"code","5c5b29be":"code","92cb2414":"code","6297ae82":"code","9b245212":"code","17462d9c":"code","4a559315":"markdown"},"source":{"b70e5d21":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d3e0e6e":"# LOAD DATASET\ndef load_dataset():\n    df = pd.read_csv(\"\/kaggle\/input\/persona-data\/persona.csv\")\n    return df\n\ndf = load_dataset()","0e160a3f":"# CHECK DF\ndef check_df(dataframe, head=5):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(head))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(head))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n\ncheck_df(df)","858eb04d":"# UNIQUE SOURCES AND FREQUENCIES\nsources_and_freq = pd.DataFrame({\"SOURCES\" : df[\"SOURCE\"].unique() , \"FREQUENCIES\" : df[\"SOURCE\"].value_counts()})\nsources_and_freq","e01cb50e":"# UNIQUE PRICES\ndf[\"PRICE\"].nunique()","a1d4baa6":"# HOW MANY SALES MADE FROM WHICH PRICE\ndf[\"PRICE\"].value_counts()","fe8ea739":"# HOW MANY SALES MADE FROM WHICH COUNTRY\ndf[\"COUNTRY\"].value_counts()","5e1046f5":"# HOW MUCH MONEY WAS MADE FROM EACH COUNTRY\ndf[\"PRICE\"].groupby(df[\"COUNTRY\"]).sum()\ndf.groupby(\"COUNTRY\").agg({\"PRICE\" : \"sum\"})","6044107c":"# NUMBER OF SALES MADE BY SOURCES\ndf.groupby(\"SOURCE\").agg({\"PRICE\" : \"sum\"})","bd521877":"# MEAN PRICES FOR EACH COUNTRY\ndf.groupby(\"COUNTRY\").agg({\"PRICE\" : \"mean\"})","b895b481":"# MEAN PRICES FOR EACH COUNTRY AND SOURCE\ndf.groupby([\"SOURCE\",\"COUNTRY\"]).agg({\"PRICE\" : \"mean\"})","42f50381":"# MEAN PRICES FOR COUNTRY, SOURCE, AGE, SEX\ndf.groupby([\"COUNTRY\",\"SOURCE\",\"AGE\",\"SEX\"]).agg({\"PRICE\" : \"mean\"})","9c630ab9":"# SORT VALUES BY PRICE\nagg_df = df.groupby([\"COUNTRY\",\"SOURCE\",\"AGE\",\"SEX\"]).agg({\"PRICE\" : \"mean\"}).sort_values(by = \"PRICE\", ascending=True)\nagg_df.head()","7bc18519":"# CONVERT INDICES TO COLUMNS\nagg_df = agg_df.reset_index()\nagg_df.head()","e73c8a4b":"# SET AGE AS CATEGORICAL AND SAVE IT AS NEW COLUMN\nbins = [0, 19, 24, 31, 41, agg_df[\"AGE\"].max()]\n\n# SET LABELS\nmylabels = ['0_18', '19_24', '24_30', '30_40', '40_' + str(agg_df[\"AGE\"].max())]\nagg_df[\"CAT_AGE\"] = pd.cut(df[\"AGE\"], bins , labels = mylabels)\nagg_df.head()","1d9ab118":"# CREATE CUSTOMER LEVEL BASED COLUMN\nagg_df[\"CUSTOMER_LEVEL_BASED\"] = [row[0].upper() + \"_\" + row[1].upper() + \"_\" + row[3].upper() + \"_\" + row[-1].upper() for row in agg_df.values]\nagg_df.head()","7033236b":"# REMOVE UNNECESSARY COLUMNS\nagg_df = agg_df[[\"CUSTOMER_LEVEL_BASED\",\"PRICE\"]]\nagg_df.head()","5c5b29be":"# GROUP BY LEVELS\nagg_df = agg_df.groupby(\"CUSTOMER_LEVEL_BASED\").agg({\"PRICE\" : \"mean\"})\n\nagg_df = agg_df.reset_index()\n\nagg_df.head()","92cb2414":"# SEGMENTATION BY PRICE\nagg_df[\"SEGMENT\"] = pd.qcut(agg_df[\"PRICE\"], 4, [\"D\",\"C\",\"B\",\"A\"])\nagg_df.head()","6297ae82":"# SOME STATISTICS ABOUT SEGMENTS\nagg_df.groupby(\"SEGMENT\").agg({\"PRICE\" : [\"mean\",\"max\",\"sum\"]})","9b245212":"# WHICH SEGMENT DOES A 33 YEARS OLD TURKISH WOMAN USING ANDROID BELONG TO ?\nnew_user = \"TUR_ANDROID_FEMALE_30_40\"\nagg_df[agg_df[\"CUSTOMER_LEVEL_BASED\"] == new_user]","17462d9c":"# WHICH SEGMENT DOES A 35 YEARS OLD FRENCH WOMAN USING IOS BELONG TO ?\nnew_user = \"FRA_IOS_FEMALE_30_40\"\nagg_df[agg_df[\"CUSTOMER_LEVEL_BASED\"] == new_user]","4a559315":"# THE CASE: \n* **A MOBILE GAME DEV COMPANY WANTS TO CREATE LEVEL BASED NEW CUSTOMERS DEFINITIONS (PERSONA) BY USING USER DATA**\n* **CREATE NEW SEGMENTS ACCORDING TO THESE NEW DEFINITIONS**\n* **WANTS TO KNOW HOW MUCH MONEY AN UPCOMING USER WILL PAY.**\n"}}