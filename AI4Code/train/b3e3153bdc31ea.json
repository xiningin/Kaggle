{"cell_type":{"256cf7e2":"code","899bc0fa":"code","155464b2":"code","77404538":"code","f7d8fd24":"code","70cf11c1":"code","749cd44b":"code","7c65a09a":"code","b87a61a6":"code","f0786b2b":"code","4f9c5caa":"code","001dc953":"markdown","a6c00cc4":"markdown","2afc3af1":"markdown"},"source":{"256cf7e2":"%%capture filelist\nimport os\n\nprint(\"os.walk in \/kaggle\/input\")\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames[0:1]:\n        print(os.path.join(dirname, filename))\n","899bc0fa":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nplt.style.use('bmh') # or use 'classic'","155464b2":"train_labels = pd.read_csv('..\/input\/seti-breakthrough-listen\/train_labels.csv')\nsample_submission = pd.read_csv('..\/input\/seti-breakthrough-listen\/sample_submission.csv')\ntrain_labels['first_letter'] = train_labels['id'].str[0]\ndisplay(train_labels.head(3))","77404538":"# 50k Training Samples\n# Largely unbalanced training set (implement solutions later)\n\nprint(train_labels.shape)\nprint(train_labels['target'].value_counts())\n","f7d8fd24":"!ls -GFlash ..\/input\/seti-breakthrough-listen\/train\/0\/ | head -n 5","70cf11c1":"# A trivially easy case where the radio signal from _moving_ star is clearly visible (Doppler)\n# images 0 and 2 (on the left), show the doppler shifted signal from a moving star\n# images 1 and 3 (on the right), are measures when the radio telescope is pointed away from the star,\n# it should _not_ have the signal.\nmyid = \"186553639bc8\"\nfl = myid[0]\ndata = np.load(f'..\/input\/seti-breakthrough-listen\/train\/{fl}\/{myid}.npy')\nprint(data.shape)\nfig, axs = plt.subplots(2, 2, figsize=(8, 8))\naxs = axs.flatten()\nfor plt_idx in range(0,4):\n    tr = data[plt_idx,:,:]\n    print(tr.shape)\n    axs[plt_idx].imshow(tr.astype('float32'))\n    axs[plt_idx].set_title(f\"{myid} : {plt_idx}\")\nplt.show()","749cd44b":"# Define a narrowband transform\n# Signals of _nearly_ constant frequency will show nearly vertical _positive_ lines.\n# We build a non-linear filter that accentuates the vertical lines, and avoids the negative values, just next to it.\n\nimport torch\nimport torch.nn.functional as F\n\n'''Narrowband transform'''\ndef transform_1(image, H=3, W=3):\n    H_padding = H\/\/2\n    W_padding = W\/\/2\n    two_D_input_tensor = torch.from_numpy(image)\n    # Avoid the problem that with padding 0, the end of the slice is -0\n    H_end_padding = -H_padding if (H_padding > 0) else None\n    W_end_padding = -W_padding if (W_padding > 0) else None\n    without_padding_tensor = two_D_input_tensor[H_padding:H_end_padding,W_padding:W_end_padding]  \n    input_tensor = two_D_input_tensor.unsqueeze(0).unsqueeze(0)\n\n    # make a weight tensor like\n    # [[[[-0.33, 1, -0.33],\n    #    [-0.33, 1, -0.33],\n    #    [-0.33, 1, -0.33]]]]\n    middle = W\/\/2\n    matrix = np.full((H, W), (-1.0\/H), dtype=float)\n    matrix[:,middle] = W\/H\n    weight = torch.tensor([[matrix]], dtype=torch.float)\n    \n    tr_linear = torch.nn.functional.conv2d(input_tensor, weight, padding=0)\n    tr_clipped = torch.maximum(tr_linear[0,0,:,:], without_padding_tensor)    \n    return tr_clipped\n\n\n# Validation tests on the filter function (with a bottom clipping on the original value)\n# all 1 and 3*3 filter\ntest_input = np.full((5,5), 1, dtype=float).astype('float32')\ntest_output = transform_1(test_input, 3, 3)\nprint(test_output)\nassert test_output.min() > 0.999\nassert test_output.max() < 1.001\n\n# all 1 and 5*3 filter\ntest_input = np.full((5,5), 1, dtype=float).astype('float32')\ntest_output = transform_1(test_input, 5, 3)\nprint(test_output)\nassert test_output.min() > 0.999\nassert test_output.max() < 1.001\n\n# all 0,0,1,0,0 and 3*3 filter\ntest_input = np.array([\n    [0,0,1,0,0],\n    [0,0,1,0,0],\n    [0,0,1,0,0],\n    [0,0,1,0,0],\n    [0,0,1,0,0],\n], dtype=float).astype('float32')\ntest_output = transform_1(test_input, 3, 3)\nprint(test_output)\nassert test_output.min() == 0\nassert test_output.max() == 3\n\n\n","7c65a09a":"# Apply the CNN transform with height 7, width 3 on the easy data\nmyid = \"186553639bc8\"\nfl = myid[0]\ndata = np.load(f'..\/input\/seti-breakthrough-listen\/train\/{fl}\/{myid}.npy')\nprint(data.shape)\n\nscan = data[0,:,:].astype('float32')\n\nprint(scan[50:55,100:106])\nprint()\nprint(scan[50:55,107:113])\nprint()\n\ntr_1 = transform_1(scan, W=3, H=7)\n\n# results shifted left 1 and up by 3 because of padding 0 in conv2D\nprint(tr_1[49:54,97:103])\nprint()\nprint(tr_1[49:54,104:110])\nprint()\n\nfig, axs = plt.subplots(2, 1, figsize=(10, 20))\naxs = axs.flatten()\n\nplt_idx = 0\naxs[plt_idx].imshow(scan)\naxs[plt_idx].set_title(f\"{myid} : original scan\")\naxs[plt_idx].grid(False)\n\n\nplt_idx = 1\naxs[plt_idx].imshow(tr_1)\naxs[plt_idx].set_title(f\"{myid} : transform 1\")\naxs[plt_idx].grid(False)\n\nplt.show()","b87a61a6":"# Concatenate the 6 channels in 1 long image (with a spacer in-between)\n# Visually inspect some training images to understand the data\n# Do _not_ inspect the test set manually (that should be treated as a hold-out set)\n\n# easy examples (narrow-band, straight needles)\neasy = [\n#    \"186553639bc8\",\n#    \"f098ff7a25ee\",\n#    \"3da2528c4bab\",\n#    \"6fd8c81abdc7\",\n#    \"4181d5db287c\",\n#    \"ef7ccee06215\"\n]\n\n# hard to see examples\nhard = [\n#     \"45a0df3ad0e9\",\n#     \"d9ce02b70721\",\n    \"df2cda2db96b\",  # on the right 225 - 230, weak signal, near vertical\n#     \"54647281189a\",  # are these whirls also a valid signal ??\n#     \"525fb1193cd6\",  # are these whirls also a valid signal ??\n#     \"a75c854be430\",  # are these whirls also a valid signal ??\n#     \"8e820adfd5d8\",  # left top narrowband line + whirls, what is the signal ?\n#     \"23588827c92a\",  # so much noise ?? not found with human eye yet\n#     \"994bc0cbdd77\",  # not found with human eye yet\n#     \"bf8e4f2540b7\",  # not analysed yet\n#     \"96f475bbf2b7\",  # not analysed yet\n#     \"cec5bb2d16fa\",  # not analysed yet\n]\n\nN = len(easy) + len(hard)\nSIZE = 6\nH_filter = 21\nW_filter = 3\nCLAMP_MIN = -0.5\nCLAMP_MAX = 2.5\n\nremaining_width = 256 - 2 * (W_filter\/\/2)\nfor myid in easy + hard:\n    fl = myid[0]\n    data = np.load(f'..\/input\/seti-breakthrough-listen\/train\/{fl}\/{myid}.npy')\n    target = train_labels.loc[train_labels['id'] == myid]['target'].values[0]\n    print(myid, target)\n    concatenated = torch.tensor([[]])\n    for i in range(0,6):\n        scan = data[i,:,:].astype('float32')\n        tr_1 = transform_1(scan, H=H_filter, W=W_filter)\n        clamped_display = torch.clamp(tr_1, CLAMP_MIN, CLAMP_MAX)\n        plt_idx += 1\n        print(plt_idx, tr_1.min(), tr_1.max())\n        if i == 0:\n            concatenated = clamped_display\n        else:\n            if i % 2 == 1:\n                horizontal_line = torch.full([1, remaining_width], CLAMP_MIN, dtype=torch.float)\n            else:    \n                horizontal_line = torch.ones([1, remaining_width], dtype=torch.float)\n                \n            concatenated = torch.cat((concatenated, horizontal_line), 0)\n            concatenated = torch.cat((concatenated, clamped_display), 0)\n\nprint(concatenated.shape)\n\nfig = plt.figure(figsize=(1*SIZE, 2*3*N*SIZE))\nim1 = plt.imshow(concatenated)\nplt.grid(False)\nplt.show()","f0786b2b":"# Sample N_SAMPLES random files with needles (target == 1) and 6 plots per file\nN_SAMPLES = 30\nSIZE = 10\nfig, axs = plt.subplots(3*N_SAMPLES, 1, figsize=(SIZE, 3 * N_SAMPLES * SIZE))\naxs = axs.flatten()\nplt_idx = 0\nfor _, row in (train_labels.loc[train_labels['target'] == 1]).sample(N_SAMPLES).iterrows():\n    fl = row['first_letter']\n    myid = row['id']\n    label = row['target']\n    data = np.load(f'..\/input\/seti-breakthrough-listen\/train\/{fl}\/{myid}.npy')\n    print(myid)\n    for i in range(0,3):\n        tr = data[ 2 * i,:,:]\n        axs[plt_idx].imshow(tr.astype('float32'))\n        axs[plt_idx].set_title(f\"{myid} : {label} : {plt_idx}\")\n        axs[plt_idx].grid(False)\n        plt_idx += 1\nplt.show()","4f9c5caa":"# Sample some files and find min and max and histogram of distributions\nfrom matplotlib import pyplot\nbins = np.linspace(-10, 30, 81)\n\nN_SAMPLES = 25\nfor _, row in (train_labels.loc[train_labels['target'] == 1]).sample(N_SAMPLES).iterrows():\n    fl = row['first_letter']\n    myid = row['id']\n    label = row['target']\n    data = np.load(f'..\/input\/seti-breakthrough-listen\/train\/{fl}\/{myid}.npy')\n    print(myid, data.min(), data.max())\n    data_flat = data.flatten()\n    pyplot.hist(data_flat, bins, alpha=0.5, label=row)\n\nprint(data_flat.shape)\npyplot.legend(loc='upper right')\nfig = pyplot.gcf()\nfig.set_size_inches(20, 10)\naxes = pyplot.gca()\naxes.set_yscale('log', basey=10)\n\npyplot.show()","001dc953":"# Plot some training files.","a6c00cc4":"# SETI Signal search by peterv1 - Exploratory Data Analysis\n\n\"In this competition, use your data science skills to help identify anomalous signals in scans of Breakthrough Listen targets.\"\n\nVersion 8:\n* narrowband filtering in W, H and zero padding with min protection\n* clipping on a min, max to improve contrast in mid range.\n* manually found a number of easy cases in the training set\n* manually found a number of hard linear cases by filter enhancement\n* some hard cases with whirls or is it still hidden for the human eye ?\n* some hard case without explanation yet ... (maybe the CNN will find them, very curious about the explainability)\n* clean-up for public sharing\n\nVersion 9:\n* examine the data range of the training data (min, max, histogram)\n\nOriginal version by Rob Mulla : https:\/\/www.kaggle.com\/robikscube\/e-t-phone-home","2afc3af1":"# Training data\n- Folders based on the id's first letter\n- npy files\n- Each file is ~820K\n- Numpy array's are in the shape (6, 273, 256)"}}