{"cell_type":{"7a2205c3":"code","79b481c9":"code","c12bf928":"code","470b13ce":"code","13abd931":"code","145e824e":"code","d60b86cc":"code","2cb715e9":"code","4be00d86":"code","b186f7d0":"code","b5f88394":"code","a76e7620":"code","1ae552ad":"code","63d0d64b":"code","61c92e9d":"code","cf7d613a":"code","9e4d8dd2":"code","e686bef5":"code","af030118":"code","ee84333e":"code","c8450486":"code","ff93178d":"code","3d8ca2f0":"code","1e5f6094":"code","be96fec5":"code","9a95a698":"code","f9e5cd38":"code","4570ec59":"code","7e55a4af":"code","80c402d0":"code","05c8f465":"code","b7a984d5":"code","5f584a28":"code","d99455db":"code","deb20f72":"code","fbc79938":"markdown","26eec19f":"markdown","4790efbb":"markdown","66a4cecd":"markdown","6d3f61d9":"markdown","afe30fa9":"markdown","fec131cb":"markdown"},"source":{"7a2205c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # basic plotting\nimport seaborn as sns # for prettier plots\nimport datetime # manipulating date formats\n\n#Maps\nimport folium\nfrom folium.plugins import HeatMap\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# settings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\n\n# Any results you write to the current directory are saved as output.","79b481c9":"#Load Data\ncrimes = pd.read_csv(\"..\/input\/crime.csv\", encoding='Windows-1252')","c12bf928":"#Building DF Districts\ndata = {'DISTRICT':['A1','A15','A7', 'B2','B3', 'C11', 'C6', 'D14', 'D4', 'E13', 'E18', 'E5',''], 'NAMES':['Downtwon','Charlestown','East Boston','Roxbury', 'Mattapan', 'Dorchester', 'South Boston', 'Brighton', 'South End', \n                           'Jamaica Plain', 'Hyde Park', 'West Roxbury', 'Unknown Location']} \n  \n# Create DataFrame \ndistricts = pd.DataFrame(data) \n  \n# Print new DF \ndistricts","470b13ce":"#Simple Preview \ncrimes.head(5)","13abd931":"districts.head(5)","145e824e":"#Create dataframe with Day Period\nhour_day = ['Daybreak']*6 + ['Morning']*6 + ['Evening']*6 + ['Night']*6\n\nhour = [list(range(0,24))]\nfor cont in hour:\n    df = [(cont * 1),hour_day]\n    \ndf2 = pd.DataFrame.from_dict(df)\n\nperiod = df2.transpose()\nperiod.columns = [\"HOUR\", \"HDAY_NAME\"]\nperiod.head()","d60b86cc":"#Let's add the Column 'District Name'(\"vlookup\" between Crimes and District)\ncrimes = crimes.merge(districts, on = 'DISTRICT')","2cb715e9":"period['HOUR']=period['HOUR'].astype(int)","4be00d86":"#Let's add the Column 'District Name'(\"vlookup\" between Crimes and Period)\ncrimes = crimes.merge(period, on = 'HOUR')\ncrimes.head()","b186f7d0":"#Some columns not be use in this example. So let's drop two: \n\ncrimes = crimes.drop([\"INCIDENT_NUMBER\", \"OFFENSE_DESCRIPTION\"], axis=1)\n\n#other way to delete some columns, could be \n#del crimes['INCIDENT_NUMBER']\n#del crimes['OFFENSE_DESCRIPTION']","b5f88394":"#Reorder Columns to better visualization.\ncrimes = crimes[['OCCURRED_ON_DATE','OFFENSE_CODE','OFFENSE_CODE_GROUP','DISTRICT','NAMES','REPORTING_AREA',\n                 'SHOOTING', 'YEAR', 'MONTH', 'DAY_OF_WEEK', 'HOUR','HDAY_NAME', 'UCR_PART','STREET', 'Lat', 'Long', 'Location']]","a76e7620":"#Fill NaN values on Shooting\ncrimes[['SHOOTING']] = crimes[['SHOOTING']].fillna(value='Not Informed')","1ae552ad":"crimes.head(5)","63d0d64b":"#View type data\ncrimes.dtypes","61c92e9d":"print(\"\\nData size (line x column): {} \".format(crimes.shape)) ","cf7d613a":"#Applying a crosstab to see general data by Year\nview_by_Month = pd.crosstab(crimes[\"MONTH\"], crimes[\"YEAR\"], margins = True)\nview_by_Month","9e4d8dd2":"crimes['datetime'] = pd.to_datetime(crimes['OCCURRED_ON_DATE'])\ncrimes = crimes.set_index('datetime')\ncrimes.drop(['OCCURRED_ON_DATE'], axis=1, inplace=True)\ncrimes.head()","e686bef5":"crimes_2017 = crimes['2017-01-01':'2017-12-31']","af030118":"#Applying a crosstab to see general data by Month\nview_by_Month = pd.crosstab(crimes_2017[\"MONTH\"], crimes_2017[\"YEAR\"], margins = True)\nview_by_Month","ee84333e":"#Cross by District Name x Month\nview_by_District = pd.crosstab(crimes_2017[\"NAMES\"], crimes_2017[\"MONTH\"], margins = True)\nview_by_District","c8450486":"#This command drop the column and line sum(do this if necessary)\nview_by_District = view_by_District.drop('All',axis=1)\nview_by_District = view_by_District.drop('All',axis=0)\n\nview_by_District","ff93178d":"#View barplots by District x Month\nview_by_District.plot(kind=\"bar\", figsize=(17,6), stacked=True)","3d8ca2f0":"#Applying a crosstab to see general data - 12 Months\nview_by_Year = pd.crosstab(crimes_2017[\"YEAR\"], crimes_2017[\"NAMES\"], margins = True)\nview_by_Year","1e5f6094":"# NaN Info: replace -1 values in Lat\/Long\ncrimes_2017.Lat.replace(-1, None, inplace=True)\ncrimes_2017.Long.replace(-1, None, inplace=True)","be96fec5":"# Plot districts \"Segmentations\"\nsns.scatterplot(x='Lat', y='Long', hue='NAMES', alpha=0.01,data=crimes_2017)\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2)","9a95a698":"grid = sns.FacetGrid(crimes_2017, col='HDAY_NAME', row='YEAR', size=8.7, aspect=1.3,  col_order=[\"Daybreak\", \"Morning\", \"Evening\", \"Night\"])\ngrid.map(plt.hist, 'MONTH', alpha=.7, bins=12)\ngrid.add_legend();","f9e5cd38":"#Unified Info by Hour.\nplt.subplots(figsize=(27,5))\nsns.countplot(x='HOUR', data=crimes_2017)\nplt.title('CRIME AND REQUESTS HOURS')","4570ec59":"#Applying a crosstab to see general data by Period\nview_by_HDAY = pd.crosstab(crimes_2017[\"HDAY_NAME\"], crimes_2017[\"MONTH\"], margins = True)\nview_by_HDAY.sort_values(by=['All'], ascending=True)","7e55a4af":"#Applying a crosstab to see general data by Period\nview_by_CrimeGroup = pd.crosstab(crimes_2017[\"OFFENSE_CODE_GROUP\"], crimes_2017[\"HDAY_NAME\"], margins = True)\nview_by_CrimeGroup.sort_values(by=['All'], ascending=True)\nview_by_CrimeGroup.head(10)","80c402d0":"# 10 Main Crimes and Requests\/Day Period\nview_by_CrimeGroup.nlargest(11, ['All']) ","05c8f465":"#Folium crime map\n#To other view options, explore documentation tiles.\nmap_Crime = folium.Map(location=[42.3125,-71.0875], tiles = \"OpenStreetMap\", zoom_start = 11)\n\n# Add data for heatmp \nheatmap_Info = crimes_2017[crimes_2017.YEAR == 2017]\nheatmap_Info = crimes_2017[['Lat','Long']]\nheatmap_Info = crimes_2017.dropna(axis=0, subset=['Lat','Long'])\nheatmap_Info = [[row['Lat'],row['Long']] for index, row in heatmap_Info.iterrows()]\nHeatMap(heatmap_Info, radius=10).add_to(map_Crime)\n\n# Plot Map\nmap_Crime","b7a984d5":"#Select a period...\ncrimes_ts = crimes['2017-01-01':'2017-06-30']","5f584a28":"#Delete not relevant columns...\ncrimes_ts = crimes_ts.drop([\"OFFENSE_CODE\", \"DISTRICT\",\"NAMES\",\"REPORTING_AREA\", \"SHOOTING\",\"YEAR\",\"MONTH\",\"DAY_OF_WEEK\",\"HOUR\",\"HDAY_NAME\",\n                            \"UCR_PART\",\t\"STREET\",\"Lat\",\"Long\",\"Location\"], axis=1)","d99455db":"#\"Group by\"Dat(D)\nts = crimes_ts.resample('D').count()\nts.head()","deb20f72":"ts.plot(figsize=(30,4), grid=True)\nplt.title('TIME SERIES: JAN-JUN')","fbc79938":"How many data we have?","26eec19f":"Depeding your analysis, will be necessary delete some informations. For example, we can select the period between 2017-01-01 until 2019-12-31. Let's create another dataframe to maitain the principal df.\n\nBefore some manipulations on datetime, we need convert column date to datetime index.","4790efbb":"...And after you need validate if this timeseries it's a Stationary or not. This issue needs more time, because envolve more details explanation.\n\nThanks for read!","66a4cecd":"******Start with Timeseries**","6d3f61d9":"After load data, it's possible that some informations dont' be relevant. So, in this case we'll delete 2 columns.","afe30fa9":"Now, let's view the completeness:","fec131cb":"If you would to start an exploration with Timeseries, you can do this for example..."}}