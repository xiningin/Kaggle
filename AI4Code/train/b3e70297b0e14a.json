{"cell_type":{"988b5001":"code","ff90dcba":"code","1112aa1d":"code","1d5a6b1e":"code","be276953":"code","29afbe94":"code","9a9198b7":"code","5961dca4":"code","0ed3fc50":"code","793c895a":"code","16fd9ea1":"markdown","1c3d04f8":"markdown","5c00ddc2":"markdown","fd69bf3d":"markdown","8cc76e84":"markdown"},"source":{"988b5001":"import numpy as np\nimport pandas as pd","ff90dcba":"titanic_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","1112aa1d":"# I remove columns with duplicate semantics and category columns\ntitanic_df.drop(['Name', 'Cabin', 'Fare', 'Ticket', 'Embarked', 'PassengerId'], axis=1, inplace=True)\n# I change category type str to int \ntitanic_df.loc[titanic_df['Sex']=='male','Sex'] = 1\ntitanic_df.loc[titanic_df['Sex']=='female', 'Sex'] = 0\n# 'Age'column's null data is replaced by mean of the column\ntitanic_df['Age'].fillna(titanic_df['Age'].mean(), inplace=True)","1d5a6b1e":"# I split the data into feature columns and target columns.  \ntrain_features = titanic_df.drop('Survived', axis=1)\ntrain_target = titanic_df['Survived']","be276953":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\n\nDT = DecisionTreeClassifier()\nLR = LogisticRegression()\nRF = RandomForestClassifier(n_estimators=1000)\n\nmodel = [DT, LR, RF]\n\n# DecisionTree\nparameters_dt = {\n    'max_depth':[1, 3, 5, 10],\n    'min_samples_leaf':[1, 3, 5, 10]\n}\ngrid_cv_dt = GridSearchCV(model[0], param_grid=parameters_dt, scoring='accuracy', cv=5)\ngrid_cv_dt.fit(train_features, train_target)\n\n# LogisticRegression\nparameters_lr = {\n    'C':[0.1, 1, 3, 5, 10]\n}\ngrid_cv_lr = GridSearchCV(model[1], param_grid=parameters_lr, scoring='accuracy', cv=5)\ngrid_cv_lr.fit(train_features, train_target)\n\n# RandomForest\nparameters_rf = {\n    'max_depth':[1, 3, 5, 10],\n    'min_samples_leaf':[1, 3, 5, 10]\n}\ngrid_cv_rf = GridSearchCV(model[2], param_grid=parameters_rf, scoring='accuracy', cv=5)\ngrid_cv_rf.fit(train_features, train_target)","29afbe94":"# print performences\n\nprint(grid_cv_dt.best_estimator_.__class__.__name__)\nprint(grid_cv_dt.best_params_)\nprint(grid_cv_dt.best_score_)\nprint('-----')\n\nprint(grid_cv_lr.best_estimator_.__class__.__name__)\nprint(grid_cv_lr.best_params_)\nprint(grid_cv_lr.best_score_)\nprint('-----')\n\nprint(grid_cv_rf.best_estimator_.__class__.__name__)\nprint(grid_cv_rf.best_params_)\nprint(grid_cv_rf.best_score_)\nprint('-----')","9a9198b7":"best_clf = grid_cv_rf.best_estimator_","5961dca4":"titanic_df_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n# I remove columns with duplicate semantics and category columns\ntitanic_df_test.drop(['Name', 'Cabin', 'Fare', 'Ticket', 'Embarked', 'PassengerId'], axis=1, inplace= True)\n# I change category type str to int \ntitanic_df_test.loc[titanic_df_test['Sex']=='male','Sex'] = 1\ntitanic_df_test.loc[titanic_df_test['Sex']=='female', 'Sex'] = 0\n# 'Age'column's null data is replaced by mean of the column\ntitanic_df_test['Age'].fillna(titanic_df_test['Age'].mean(), inplace=True)\n\n# I rename titanic_df_test\ntest_features = titanic_df_test","0ed3fc50":"predicted_survived = best_clf.predict(test_features)","793c895a":"test = pd.read_csv('..\/input\/titanic\/test.csv')\nmy_submission = pd.DataFrame({'PassengerId': test.PassengerId,\n                             'Survived': predicted_survived})\nmy_submission.to_csv('submission.csv', index=False)","16fd9ea1":"### **Test.csv preprocessing**","1c3d04f8":"### **Submit Answer**","5c00ddc2":"### **Find Proper Classifier**","fd69bf3d":"### **Predict Label using test features**","8cc76e84":"### **Train.csv preprocessing**"}}