{"cell_type":{"7c30cbee":"code","f3acb70d":"code","8718fb7a":"code","6e555563":"code","25882a97":"code","20dc9475":"code","82bac237":"code","0d7d37a9":"code","3fcee3fb":"code","fa705601":"code","8cefbc38":"code","6c75438a":"code","3bdbf47c":"code","0edd2103":"code","ee7f4737":"code","399d61e4":"code","4c03d02a":"code","95bedb38":"code","fe076516":"code","9b0ac850":"code","8b10c8d9":"code","a415c5b6":"code","056e207d":"code","e3634f26":"code","d16ca84a":"code","03edce60":"code","480dcf1c":"code","dbb28812":"code","700e38ca":"code","5bbaf6a8":"code","024d049a":"code","5d18311f":"code","9f8089fa":"code","36e3c487":"code","089f96de":"code","0a1215b9":"code","add30142":"code","e70fec3d":"code","49bb048a":"code","a9dea567":"code","4e3eb667":"code","397dd8a5":"code","50aa66e3":"code","a6bca030":"markdown","cbb62900":"markdown","6f7bf5ec":"markdown","9529deb3":"markdown","cb39c96f":"markdown","11cfe9ae":"markdown","92abbb24":"markdown","ead57bc4":"markdown","c740444b":"markdown"},"source":{"7c30cbee":"#@title\n# importing the required libraries\nimport pandas as pd\nimport numpy as np\nimport datetime \ntoday = datetime.date.today()\nyesterday = today - datetime.timedelta(days = 1)\nworld_file = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/{:%m-%d-%Y}.csv'.format(yesterday)\n\n# Visualisation libraries\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly\n#plotly.io.renderers.default = 'colab'\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport folium \nfrom folium import plugins\n\n# Manipulating the default plot size\nplt.rcParams['figure.figsize'] = 10, 12\n\n# Disable warnings \nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Google Drive\n#from google.colab import auth\n#auth.authenticate_user()\n#import gspread\n#from oauth2client.client import GoogleCredentials\n#gc = gspread.authorize(GoogleCredentials.get_application_default())\n\n# File reads\n# df_india = pd.read_excel('data\/Covid cases in India.xlsx')\n# df_json = pd.read_json (r'https:\/\/raw.githubusercontent.com\/covid19india\/api\/master\/raw_data.json')\ndf_india = pd.read_excel('https:\/\/github.com\/MkVats\/COVID-19\/blob\/master\/Covid%20-%20India.xlsx?raw=true', sheet_name='Statewise Total')\ndf_india_map = pd.read_excel('https:\/\/github.com\/MkVats\/COVID-19\/blob\/master\/Covid%20-%20India.xlsx?raw=true', sheet_name='Cordinates')\ndf_all = pd.read_csv('https:\/\/raw.githubusercontent.com\/MkVats\/COVID-19\/master\/covid_19_data.csv')\n\ndf_world = pd.read_csv(world_file)\ndf_world_confirmed = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\")\ndf_world_recovered = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv\")\ndf_world_deaths = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv\")\n\ndef Country_Timeline(country):\n  if country=='All':\n    return df_all\n  else:\n    #df_world[df_world.Country_Region == \"India\"]\n    return df_all.loc[df_all['Country\/Region'] == country]\n\ndf_china_timeline = Country_Timeline(\"Mainland China\")\ndf_italy_timeline = Country_Timeline(\"Italy\")\ndf_spain_timeline = Country_Timeline(\"Spain\")\ndf_iran_timeline = Country_Timeline(\"Iran\")\ndf_skorea_timeline = Country_Timeline(\"South Korea\")\ndf_pakistan_timeline = Country_Timeline(\"Pakistan\")\ndf_us_timeline = Country_Timeline(\"US\")\ndf_india_timeline = Country_Timeline(\"India\")\ndf_russia_timeline = Country_Timeline(\"Russia\")","f3acb70d":"#@title \nprint('Latest Cases in India till date')\ndf_world.query('Country_Region==\"India\"').groupby(\"Last_Update\")[['Confirmed', 'Deaths', 'Recovered']].sum().reset_index()","8718fb7a":"df_india","6e555563":"#@title\ndf_india['Total cases'] = df_india['Total Confirmed cases (Indian National)'] + df_india['Total Confirmed cases ( Foreign National )']\ntotal_cases = df_india['Total cases'].sum()\nlast_date = df_india.at[0,'Last_Updated_Time']\ndf_india['Total Active'] = df_india['Total cases'] - (df_india['Death'] + df_india['Cured\/\\nDischarged\/Migrated'])\ntotal_active = df_india['Total Active'].sum()\nprint('Total number of active COVID-19 cases in India till ', last_date, 'is', total_active)\nprint('Total number of confirmed COVID-19 cases in India till ', last_date, 'is', total_cases)\ndf_india.groupby('Name of State \/ UT')['Total Active'].sum().sort_values(ascending=False).to_frame()\n#df_active = pd.merge(df_india,total_active,on='Name of State \/ UT')\n#df_active.groupby('Name of State \/ UT')['Total Active'].sum().sort_values(ascending=False).to_frame()\ndf_india.style.background_gradient(cmap='Reds')","25882a97":"#@title \ndf_map = pd.merge(df_india_map,df_india,on='Name of State \/ UT')\nmap = folium.Map(location=[20, 70], zoom_start=5,tiles='Stamenterrain')\nfor lat, lon, value, name in zip(df_map['Latitude'], df_map['Longitude'], df_map['Total cases'], df_map['Name of State \/ UT']):\n    folium.CircleMarker([lat, lon], radius=value*0.01, popup = ('<strong>State<\/strong>: ' + str(name).capitalize() + '<br>''<strong>Total Cases<\/strong>: ' + str(value) + '<br>'),color='red',fill_color='red',fill_opacity=0.3 ).add_to(map)\nmap","20dc9475":"#@title \nimport IPython\n\nIPython.display.HTML(\"<div class='tableauPlaceholder' id='viz1585145553118' style='position: relative'><noscript><a href='#'><img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Bo&#47;Book1_31496&#47;Dashboard3&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='Book1_31496&#47;Dashboard3' \/><param name='tabs' value='no' \/><param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Bo&#47;Book1_31496&#47;Dashboard3&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><param name='filter' value='publish=yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1585145553118');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.minWidth='420px';vizElement.style.maxWidth='650px';vizElement.style.width='100%';vizElement.style.minHeight='587px';vizElement.style.maxHeight='887px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.minWidth='420px';vizElement.style.maxWidth='650px';vizElement.style.width='100%';vizElement.style.minHeight='587px';vizElement.style.maxHeight='887px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else { vizElement.style.width='100%';vizElement.style.height='727px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>\")","82bac237":"#@title \ndf_india.rename(columns={'Name of State \/ UT':'State','Total Confirmed cases (Indian National)':'ConfInd','Total Confirmed cases ( Foreign National )':'ConfFor'}, inplace=True)\n\ndef India_BarPlot_SNS():\n  f, ax = plt.subplots(figsize=(20, 8))\n  data = df_map[['Name of State \/ UT','Total cases','Cured\/\\nDischarged\/Migrated','Death']]\n  data.sort_values('Total cases',ascending=False,inplace=True)\n  sns.set_color_codes()\n  sns.barplot(x=\"Total cases\", y=\"Name of State \/ UT\", data=data,label=\"Total\", color=\"b\")\n\n  sns.set_color_codes(\"muted\")\n  sns.barplot(x=\"Cured\/\\nDischarged\/Migrated\", y=\"Name of State \/ UT\", data=data, label=\"Cured\", color=\"g\")\n\n  sns.set_color_codes(\"pastel\")\n  sns.barplot(x=\"Death\", y=\"Name of State \/ UT\", data=data, label=\"Death\", color=\"r\")\n\n  ax.legend(ncol=2, loc=\"lower right\", frameon=True)\n  ax.set(xlim=(0, 10000), ylabel=\"\",xlabel=\"Cases\")\n  sns.despine(left=True, bottom=True)\n\n\ndef India_BarPlot_IndFor():\n  plt.figure(figsize=(10,6))\n  plt.title(\"Total Confirmed cases by State\")\n  sns.set_style(style=\"white\")\n  sns.barplot(df_india.State, df_india.ConfInd, color='red', label=\"Indian National\")\n  sns.barplot(df_india.State, df_india.ConfFor, color='blue', label=\"Foreign National\",bottom=df_india.ConfInd)\n  plt.legend()\n  plt.xticks(rotation=90)\n  plt.show()\n\ndef India_Donut_States():\n  df_india[\"ConfTot\"]=df_india.ConfInd+df_india.ConfFor\n  x=df_india.ConfTot\n  labels=df_india.State\n  explode=np.zeros(df_india.shape[0],)\n  explode=explode+0.1\n  plt.figure(figsize=(12,12))\n  plt.title(\"Total Confirmed cases  by State\", fontsize=16)\n  plt.pie(x, labels=labels, explode=explode,wedgeprops=dict(width=0.5),autopct='%1.1f%%', startangle=0, )\n  plt.show()\n\ndef India_Pie_IndFor():\n  x=[df_india.ConfInd.sum(),df_india.ConfFor.sum()]\n  labels=[\"Indians\",\"Foreign Nationals\"]\n  explode=[0.1,0.1]\n\n  plt.figure(figsize=(8,8))\n  plt.title(\"Total confirmed cases in India (Indians vs Foreigners)\", fontsize=16)\n  plt.pie(x, labels=labels, explode=explode,\n          autopct='%1.1f%%')\n  plt.legend()\n  plt.show()\n\ndef India_Timeline_All():\n  confirmed = df_india_timeline.groupby('ObservationDate').sum()['Confirmed'].reset_index()\n  deaths = df_india_timeline.groupby('ObservationDate').sum()['Deaths'].reset_index()\n  recovered = df_india_timeline.groupby('ObservationDate').sum()['Recovered'].reset_index()\n\n  fig = go.Figure()\n  fig.add_trace(go.Scatter(x=confirmed['ObservationDate'], y=confirmed['Confirmed'], mode='lines+markers', name='Confirmed',line=dict(color='blue', width=2)))\n  fig.add_trace(go.Scatter(x=deaths['ObservationDate'], y=deaths['Deaths'], mode='lines+markers', name='Deaths', line=dict(color='Red', width=2)))\n  fig.add_trace(go.Scatter(x=deaths['ObservationDate'], y=(confirmed['Confirmed']-recovered['Recovered']-deaths['Deaths']), mode='lines+markers', name='Active', line=dict(color='Orange', width=2)))\n  fig.add_trace(go.Scatter(x=recovered['ObservationDate'], y=recovered['Recovered'], mode='lines+markers', name='Recovered', line=dict(color='Green', width=2)))\n  fig.update_layout(title='Timline of Cases in India<br>\u0907\u0928 \u0906\u0902\u0915\u095c\u094b\u0902 \u0915\u0947 \u0935\u093f\u0936\u094d\u0932\u0947\u0937\u0923 \u0938\u0947 \u092e\u0947\u0930\u0947 \u0905\u0928\u0941\u0938\u093e\u0930 \u092d\u093e\u0930\u0924 \u092e\u0947\u0902 \u0915\u0941\u0932 \u092a\u0941\u0937\u094d\u091f\u093f \u092e\u093e\u092e\u0932\u094b\u0902 \u0915\u0940 \u0938\u0902\u0916\u094d\u092f\u093e:<br>30 \u092e\u093e\u0930\u094d\u091a \u0924\u0915 1250, 8-10 \u0905\u092a\u094d\u0930\u0948\u0932 \u0924\u0915 6000-6500, 20 \u0905\u092a\u094d\u0930\u0948\u0932 \u0924\u0915 15000-17000 \u090f\u0935\u0902 30 \u0905\u092a\u094d\u0930\u0948\u0932 \u0924\u0915 30000-32000 \u0939\u094b \u0938\u0915\u0924\u0947 \u0939\u0948|', xaxis_tickfont_size=14,yaxis=dict(title='Number of Cases'))\n\n  fig.show()\n\ndef India_Reports():\n  India_BarPlot_SNS()\n  India_BarPlot_IndFor()\n  India_Donut_States()\n  India_Pie_IndFor()\n\n\n","0d7d37a9":"India_BarPlot_IndFor()","3fcee3fb":"India_Pie_IndFor()","fa705601":"India_Donut_States()","8cefbc38":"India_BarPlot_SNS()","6c75438a":"India_Timeline_All()","3bdbf47c":"df_india_timeline.style.background_gradient(cmap='Reds')","0edd2103":"df_world.head()","ee7f4737":"df_world_confirmed.head()","399d61e4":"df_world_recovered.head()","4c03d02a":"df_world_recovered.head()","95bedb38":"df_world.style.background_gradient(cmap='Reds')","fe076516":"#@title \ndef World_Map(df_all, df_world_confirmed):\n  df_world_confirmed.rename(columns={'Country\/Region':'Country'}, inplace=True)\n  df_all.rename(columns={'Country\/Region':'Country'}, inplace=True)\n  df_world_confirmed = df_world_confirmed[[\"Province\/State\",\"Lat\",\"Long\",\"Country\"]]\n  df_temp = df_all.copy()\n  df_temp['Country'].replace({'Mainland China': 'China'}, inplace=True)\n  df_latlong = pd.merge(df_temp, df_world_confirmed, on=[\"Country\", \"Province\/State\"])\n\n  fig = px.density_mapbox(df_latlong, lat=\"Lat\", lon=\"Long\", hover_name=\"Country\", hover_data=[\"Confirmed\",\"Deaths\",\"Recovered\"], animation_frame=\"ObservationDate\", color_continuous_scale=\"Portland\", radius=7, zoom=0,height=700)\n  fig.update_layout(title='Worldwide Corona Virus Cases Time Lapse - Confirmed, Deaths, Recovered')\n\n  fig.update_layout(mapbox_style=\"open-street-map\", mapbox_center_lon=0)\n  fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\n  fig.show()\n\ndef World_Timeline_All():\n  confirmed = df_all.groupby('ObservationDate').sum()['Confirmed'].reset_index()\n  deaths = df_all.groupby('ObservationDate').sum()['Deaths'].reset_index()\n  recovered = df_all.groupby('ObservationDate').sum()['Recovered'].reset_index()\n\n  fig = go.Figure()\n  fig.add_trace(go.Scatter(x=confirmed['ObservationDate'], y=confirmed['Confirmed'], mode='lines+markers', name='Confirmed',line=dict(color='blue', width=2)))\n  fig.add_trace(go.Scatter(x=deaths['ObservationDate'], y=deaths['Deaths'], mode='lines+markers', name='Deaths', line=dict(color='Red', width=2)))\n  fig.add_trace(go.Scatter(x=deaths['ObservationDate'], y=(confirmed['Confirmed']-recovered['Recovered']-deaths['Deaths']), mode='lines+markers', name='Active', line=dict(color='Orange', width=2)))\n  fig.add_trace(go.Scatter(x=recovered['ObservationDate'], y=recovered['Recovered'], mode='lines+markers', name='Recovered', line=dict(color='Green', width=2)))\n  fig.update_layout(title='Timline of Cases in World', xaxis_tickfont_size=14,yaxis=dict(title='Number of Cases'))\n\n  fig.show()\n\nWorld_Map(df_all, df_world_confirmed)","9b0ac850":"World_Timeline_All()","8b10c8d9":"#@title \ndef Country_Bar_Time(df, Country):\n  fig = px.bar(df.groupby('ObservationDate', as_index=False)['Confirmed'].sum(), x=\"ObservationDate\", y=\"Confirmed\", color='Confirmed', orientation='v', height=500, title='Confirmed Cases in '+Country, color_discrete_sequence = px.colors.cyclical.HSV)\n  fig.update_layout(plot_bgcolor='rgb(230, 230, 230)')\n  fig.show()\n\nCountry_Bar_Time(df_china_timeline, 'China')","a415c5b6":"Country_Bar_Time(df_italy_timeline, 'Italy')","056e207d":"Country_Bar_Time(df_spain_timeline, 'Spain')","e3634f26":"Country_Bar_Time(df_us_timeline, 'USA')","d16ca84a":"Country_Bar_Time(df_iran_timeline, 'Iran')","03edce60":"Country_Bar_Time(df_skorea_timeline, 'South Korea')","480dcf1c":"Country_Bar_Time(df_pakistan_timeline, 'Pakistan')","dbb28812":"Country_Bar_Time(df_india_timeline, 'India')","700e38ca":"Country_Bar_Time(df_russia_timeline, 'Russia')","5bbaf6a8":"#@title \nfrom plotly.subplots import make_subplots\n\ndef Country_Active_Cases(df):\n  return df['Confirmed'] - df['Deaths'] - df['Recovered']\n\n\nfig = make_subplots(rows=2, cols=2, specs=[[{}, {}], [{\"colspan\": 2}, None]], subplot_titles=(\"South Korea\",\"China\",\"India\"))\n\nfig.add_trace(go.Scatter(x=df_skorea_timeline['ObservationDate'], y=Country_Active_Cases(df_skorea_timeline), marker=dict(color='Orange', coloraxis=\"coloraxis\")), 1, 1)\n#fig.add_trace(go.Scatter(x=df_skorea_timeline['ObservationDate'], y=df_skorea_timeline['Deaths'], marker=dict(color='Red', coloraxis=\"coloraxis\")), 1, 1)\n#fig.add_trace(go.Scatter(x=df_skorea_timeline['ObservationDate'], y=df_skorea_timeline['Confirmed'], marker=dict(color='Blue', coloraxis=\"coloraxis\")), 1, 1)\n#fig.add_trace(go.Scatter(x=df_skorea_timeline['ObservationDate'], y=df_skorea_timeline['Recovered'], marker=dict(color='Green', coloraxis=\"coloraxis\")), 1, 1)\n\nfig.add_trace(go.Scatter(x=df_china_timeline['ObservationDate'], y=Country_Active_Cases(df_china_timeline), marker=dict(color=df_china_timeline['Confirmed'], coloraxis=\"coloraxis\")), 1, 2)\n\nfig.add_trace(go.Scatter(x=df_india_timeline['ObservationDate'], y=Country_Active_Cases(df_india_timeline), marker=dict(color=df_india_timeline['Confirmed'], coloraxis=\"coloraxis\")), 2, 1)\n\nfig.update_layout(coloraxis=dict(colorscale='Bluered_r'), showlegend=False,title_text=\"Active Cases\")\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.show()","024d049a":"#@title \nconfirmed = df_china_timeline.groupby('ObservationDate').sum()['Confirmed'].reset_index()\ndeaths = df_china_timeline.groupby('ObservationDate').sum()['Deaths'].reset_index()\nrecovered = df_china_timeline.groupby('ObservationDate').sum()['Recovered'].reset_index()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=confirmed['ObservationDate'], y=confirmed['Confirmed'], mode='lines+markers', name='Confirmed',line=dict(color='blue', width=2)))\nfig.add_trace(go.Scatter(x=deaths['ObservationDate'], y=deaths['Deaths'], mode='lines+markers', name='Deaths', line=dict(color='Red', width=2)))\nfig.add_trace(go.Scatter(x=deaths['ObservationDate'], y=(confirmed['Confirmed']-recovered['Recovered']-deaths['Deaths']), mode='lines+markers', name='Active', line=dict(color='Orange', width=2)))\nfig.add_trace(go.Scatter(x=recovered['ObservationDate'], y=recovered['Recovered'], mode='lines+markers', name='Recovered', line=dict(color='Green', width=2)))\nfig.update_layout(title='Timline of Cases in China', xaxis_tickfont_size=14,yaxis=dict(title='Number of Cases'))\n\nfig.show()\n\nconfirmed = df_skorea_timeline.groupby('ObservationDate').sum()['Confirmed'].reset_index()\ndeaths = df_skorea_timeline.groupby('ObservationDate').sum()['Deaths'].reset_index()\nrecovered = df_skorea_timeline.groupby('ObservationDate').sum()['Recovered'].reset_index()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=confirmed['ObservationDate'], y=confirmed['Confirmed'], mode='lines+markers', name='Confirmed',line=dict(color='blue', width=2)))\nfig.add_trace(go.Scatter(x=deaths['ObservationDate'], y=deaths['Deaths'], mode='lines+markers', name='Deaths', line=dict(color='Red', width=2)))\nfig.add_trace(go.Scatter(x=deaths['ObservationDate'], y=(confirmed['Confirmed']-recovered['Recovered']-deaths['Deaths']), mode='lines+markers', name='Active', line=dict(color='Orange', width=2)))\nfig.add_trace(go.Scatter(x=recovered['ObservationDate'], y=recovered['Recovered'], mode='lines+markers', name='Recovered', line=dict(color='Green', width=2)))\nfig.update_layout(title='Timline of Cases in South Korea', xaxis_tickfont_size=14,yaxis=dict(title='Number of Cases'))\n\nfig.show()","5d18311f":"#@title \nconfirmed = df_italy_timeline.groupby('ObservationDate').sum()['Confirmed'].reset_index()\ndeaths = df_italy_timeline.groupby('ObservationDate').sum()['Deaths'].reset_index()\nrecovered = df_italy_timeline.groupby('ObservationDate').sum()['Recovered'].reset_index()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=confirmed['ObservationDate'], y=confirmed['Confirmed'], mode='lines+markers', name='Confirmed',line=dict(color='blue', width=2)))\nfig.add_trace(go.Scatter(x=deaths['ObservationDate'], y=deaths['Deaths'], mode='lines+markers', name='Deaths', line=dict(color='Red', width=2)))\nfig.add_trace(go.Scatter(x=deaths['ObservationDate'], y=(confirmed['Confirmed']-recovered['Recovered']-deaths['Deaths']), mode='lines+markers', name='Active', line=dict(color='Orange', width=2)))\nfig.add_trace(go.Scatter(x=recovered['ObservationDate'], y=recovered['Recovered'], mode='lines+markers', name='Recovered', line=dict(color='Green', width=2)))\nfig.update_layout(title='Timline of Cases in Italy', xaxis_tickfont_size=14,yaxis=dict(title='Number of Cases'))\n\nfig.show()\n\nconfirmed = df_spain_timeline.groupby('ObservationDate').sum()['Confirmed'].reset_index()\ndeaths = df_spain_timeline.groupby('ObservationDate').sum()['Deaths'].reset_index()\nrecovered = df_spain_timeline.groupby('ObservationDate').sum()['Recovered'].reset_index()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=confirmed['ObservationDate'], y=confirmed['Confirmed'], mode='lines+markers', name='Confirmed',line=dict(color='blue', width=2)))\nfig.add_trace(go.Scatter(x=deaths['ObservationDate'], y=deaths['Deaths'], mode='lines+markers', name='Deaths', line=dict(color='Red', width=2)))\nfig.add_trace(go.Scatter(x=deaths['ObservationDate'], y=(confirmed['Confirmed']-recovered['Recovered']-deaths['Deaths']), mode='lines+markers', name='Active', line=dict(color='Orange', width=2)))\nfig.add_trace(go.Scatter(x=recovered['ObservationDate'], y=recovered['Recovered'], mode='lines+markers', name='Recovered', line=dict(color='Green', width=2)))\nfig.update_layout(title='Timline of Cases in Spain', xaxis_tickfont_size=14,yaxis=dict(title='Number of Cases'))\n\nfig.show()","9f8089fa":"#@title \nconfirmed = df_us_timeline.groupby('ObservationDate').sum()['Confirmed'].reset_index()\ndeaths = df_us_timeline.groupby('ObservationDate').sum()['Deaths'].reset_index()\nrecovered = df_us_timeline.groupby('ObservationDate').sum()['Recovered'].reset_index()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=confirmed['ObservationDate'], y=confirmed['Confirmed'], mode='lines+markers', name='Confirmed',line=dict(color='blue', width=2)))\nfig.add_trace(go.Scatter(x=deaths['ObservationDate'], y=deaths['Deaths'], mode='lines+markers', name='Deaths', line=dict(color='Red', width=2)))\nfig.add_trace(go.Scatter(x=deaths['ObservationDate'], y=(confirmed['Confirmed']-recovered['Recovered']-deaths['Deaths']), mode='lines+markers', name='Active', line=dict(color='Orange', width=2)))\nfig.add_trace(go.Scatter(x=recovered['ObservationDate'], y=recovered['Recovered'], mode='lines+markers', name='Recovered', line=dict(color='Green', width=2)))\nfig.update_layout(title='Timline of Cases in USA', xaxis_tickfont_size=14,yaxis=dict(title='Number of Cases'))\n\nfig.show()","36e3c487":"#@title \nfrom fbprophet import Prophet\nconfirmed = df_all.groupby('ObservationDate').sum()['Confirmed'].reset_index()\ndeaths = df_all.groupby('ObservationDate').sum()['Deaths'].reset_index()\nrecovered = df_all.groupby('ObservationDate').sum()['Recovered'].reset_index()\n\nconfirmed.columns = ['ds','y']\nconfirmed['ds'] = pd.to_datetime(confirmed['ds'])\nconfirmed.tail()","089f96de":"#@title \nmk_confirm = Prophet(interval_width=1)\nmk_confirm.fit(confirmed)\nfuture = mk_confirm.make_future_dataframe(periods=7)\nfuture.tail()\nforecast = mk_confirm.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","0a1215b9":"confirmed_forecast_plot = mk_confirm.plot(forecast)\nconfirmed_forecast_plot =mk_confirm.plot_components(forecast)","add30142":"#@title \ndeaths.columns = ['ds','y']\ndeaths['ds'] = pd.to_datetime(deaths['ds'])\n#mk_death = Prophet(interval_width=0.95)\nmk_death = Prophet(interval_width=1)\nmk_death.fit(deaths)\nfuture = mk_death.make_future_dataframe(periods=7)\nfuture.tail()\nforecast = mk_death.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","e70fec3d":"deaths_forecast_plot = mk_death.plot(forecast)\ndeaths_forecast_plot = mk_death.plot_components(forecast)","49bb048a":"#@title \nrecovered.columns = ['ds','y']\nrecovered['ds'] = pd.to_datetime(recovered['ds'])\n#mk_recover = Prophet(interval_width=0.95)\nmk_recover = Prophet(interval_width=1)\nmk_recover.fit(recovered)\nfuture = mk_recover.make_future_dataframe(periods=7)\nfuture.tail()\nforecast = mk_recover.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","a9dea567":"recovered_forecast_plot = mk_recover.plot(forecast)\nrecovered_forecast_plot = mk_recover.plot_components(forecast)","4e3eb667":"#@title \nconfirmed = df_india_timeline.groupby('ObservationDate').sum()['Confirmed'].reset_index()\ndeaths = df_india_timeline.groupby('ObservationDate').sum()['Deaths'].reset_index()\nrecovered = df_india_timeline.groupby('ObservationDate').sum()['Recovered'].reset_index()\n\nconfirmed.columns = ['ds','y']\nconfirmed['ds'] = pd.to_datetime(confirmed['ds'])\nconfirmed.tail()","397dd8a5":"#@title \n#mk_india_confirm = Prophet(interval_width=0.95)\nmk_india_confirm = Prophet(interval_width=0.95)\nmk_india_confirm.fit(confirmed)\nfuture = mk_india_confirm.make_future_dataframe(periods=5)\nfuture.tail()\nforecast = mk_india_confirm.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","50aa66e3":"IPython.display.HTML('<iframe src=\"https:\/\/mkvats.science\/COVID-19\/Stats\" frameborder=\"0\" width=\"640\" height=\"370\"><\/iframe>')","a6bca030":"###\u092d\u093e\u0930\u0924\u0940\u092f \u0906\u0902\u0915\u095c\u094b\u0902 \u0915\u093e \u092a\u0942\u0930\u094d\u0935\u093e\u0928\u0941\u092e\u093e\u0928","cbb62900":"##**\u0938\u092e\u094d\u092c\u0928\u094d\u0927:**\n\n\u092e\u0947\u0930\u0947 \u0907\u0938 \u092a\u0947\u091c \u0915\u094b \u0926\u0947\u0916\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0927\u0928\u094d\u092f\u0935\u093e\u0926| \u0906\u0936\u093e \u0939\u0948 \u0915\u093f \u092f\u0939\u093e\u0902 \u092a\u0930 \u0915\u093f\u092f\u0947 \u0917\u090f \u0915\u094b\u0930\u094b\u0928\u093e \u0935\u093e\u092f\u0930\u0938 \u0915\u0947 \u0907\u0928 \u092d\u092f\u093e\u0935\u0939 \u0906\u0902\u0915\u095c\u094b\u0902  \u0935\u093f\u0936\u094d\u0932\u0947\u0937\u0923 \u0938\u0947 \u0906\u092a \u0938\u092e\u091d \u092a\u093e\u090f \u0939\u094b\u0902\u0917\u0947 \u0915\u093f \u0905\u0917\u0930  \u0939\u092e\u0928\u0947 \u0935\u0958\u094d\u0924 \u0930\u0939\u0924\u0947 \u0938\u0930\u0915\u093e\u0930 \u0915\u0947 \u0938\u0916\u094d\u0924 \u0906\u0926\u0947\u0936\u094b\u0902 \u090f\u0935\u0902 \u0928\u093f\u0930\u094d\u0926\u0947\u0936\u094b \u091c\u0948\u0938\u0947 \u0932\u0949\u0915-\u0921\u093e\u0909\u0928, \u092f\u093e \u0916\u0941\u0926 \u0915\u094b \u0938\u092c\u0938\u0947 \u0926\u0942\u0930 \u0930\u0916\u0928\u093e \u0907\u0924\u094d\u092f\u093e\u0926\u093f (\u091c\u094b \u0915\u093f \u091c\u0928 \u0939\u093e\u0928\u093f \u0930\u094b\u0915\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0939\u0940 \u0939\u0948\u0902) \u0915\u093e \u092a\u093e\u0932\u0928 \u0928\u0939\u0940\u0902 \u0915\u093f\u092f\u093e \u0924\u094b \u092d\u093e\u0930\u0924 \u092e\u0947\u0902 \u092d\u0940 \u091a\u0940\u0928, \u0907\u091f\u0932\u0940 \u092f\u093e \u0938\u094d\u092a\u0947\u0928 \u091c\u0948\u0938\u0940 \u0938\u094d\u0924\u093f\u0925\u093f \u0909\u0924\u094d\u092a\u0928 \u0939\u094b \u091c\u093e\u092f\u0917\u0940|\n\n\u0939\u092e\u0947 \u0907\u0928 \u0906\u0902\u0915\u095c\u094b\u0902 \u0938\u0947 \u0921\u0930\u0928\u093e \u0928\u0939\u0940\u0902 \u0939\u0948 \u092c\u0938 \u0938\u092e\u091d\u0928\u093e \u0939\u0948 (\u092d\u0935\u093f\u0937\u094d\u092f \u0915\u0947 \u092a\u0930\u093f\u0923\u093e\u092e \u0915\u0947 \u0932\u093f\u090f)| \n\n\u0916\u0941\u0926 \u0938\u0941\u0930\u0915\u094d\u0937\u093f\u0924 \u0930\u0939\u0947, \u0905\u092a\u0928\u094b\u0902 \u0915\u094b \u0938\u0941\u0930\u0915\u094d\u0937\u093f\u0924 \u0930\u0916\u0947| \n\u0905\u092a\u0928\u0947 \u0932\u093f\u090f, \u0926\u0942\u0938\u0930\u094b\u0902 \u0915\u0947 \u0932\u093f\u090f, \u0939\u092e \u0938\u092c \u0915\u0947 \u0932\u093f\u090f|| \n\n\u092e\u0947\u0930\u093e \u0928\u093e\u092e \u092e\u094b\u0939\u093f\u0924 \u0915\u0941\u092e\u093e\u0930 \u0935\u0924\u094d\u0938 \u0939\u0948| \u092a\u0947\u0936\u0947\u0902 \u0938\u0947 \u0938\u0949\u092b\u094d\u091f\u0935\u0947\u092f\u0930 \u0907\u0902\u091c\u0940\u0928\u093f\u092f\u0930 \u0939\u0942\u0901, \u0938\u093e\u0925 \u0939\u0940 Full Stack Web Developer, Certified ERP Manager \u090f\u0935\u0902 Certified Data Scientist \u092d\u0940 \u0939\u0942\u0901| \n\n\u0907\u0938 \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f \u0915\u0940 \u0905\u0927\u093f\u0915 \u091c\u093e\u0928\u0915\u093e\u0930\u0940 \u0915\u0947 \u0932\u093f\u090f \u0907\u0938 \u0935\u0947\u092c\u0938\u093e\u0907\u091f \u092a\u0930 \u091c\u093e\u092f\u0947 => https:\/\/mkvats.science\/COVID-19","6f7bf5ec":"#3) \u0935\u093f\u0936\u094d\u0935 \u0915\u0947 \u0915\u0941\u091b \u0905\u0928\u094d\u092f \u0926\u0947\u0936\u094b\u0902 \u0915\u0947 \u0906\u0902\u0915\u095c\u094b\u0902 \u0915\u0940 \u0924\u0941\u0932\u0928\u093e","9529deb3":"\u0915\u0943\u092a\u092f\u093e \u0927\u094d\u092f\u093e\u0928 \u0926\u0947! - \u0907\u0938 \u0935\u0947\u092c\u092a\u0947\u091c \u092a\u0930 \u0926\u093f\u0916\u093e\u090f \u091c\u093e \u0930\u0939\u0947 \u0938\u092d\u0940 \u0906\u0902\u0915\u095c\u0947, \u0905\u0932\u0917 \u0905\u0932\u0917 \u091c\u0917\u0939 \u0938\u0947 \u0932\u093f\u090f \u091c\u093e \u0930\u0939\u0947 \u0939\u0948, \u091c\u093f\u0928\u0915\u094b \u092c\u0939\u0941\u0924 \u0938\u0947 \u0939\u092e \u091c\u0948\u0938\u0947 Open Source Community Contributors \u0932\u0917\u093e\u0924\u093e\u0930 \u0938\u092e\u092f \u0938\u092e\u092f \u092a\u0930 \u0905\u092a\u0921\u0947\u091f \u0915\u0930 \u0930\u0939\u0947 \u0939\u0948\u0902 | \u092b\u093f\u0930 \u092d\u0940 \u0905\u0917\u0930 \u0906\u0902\u0915\u095c\u094b\u0902 \u092e\u0947\u0902 \u0915\u094b\u0908 \u092d\u093f\u0902\u0924\u093e \u092a\u093e\u092f\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948 \u0924\u094b \u0915\u0943\u092a\u092f\u093e \u0907\u0902\u0924\u095b\u093e\u0930 \u0915\u0930\u0947| \u0905\u0917\u0930 \u0932\u0917\u093e\u0924\u093e\u0930 \u0926\u094b (2) \u0926\u093f\u0928\u094b\u0902 \u0924\u0915 \u0921\u0947\u091f\u093e \u0905\u092a\u0921\u0947\u091f \u0928\u093e \u0939\u094b\u0928\u0947 \u0915\u0940 \u0938\u094d\u0924\u093f\u0925\u093f \u092e\u0947\u0902 \u0906\u092a \u092e\u0941\u091d\u0947 \u0938\u0942\u091a\u093f\u0924 \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902| \n\n###Data Resources:\n- https:\/\/www.mohfw.gov.in\/\n- https:\/\/github.com\/CSSEGISandData\/COVID-19\n- https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset","cb39c96f":"#2)  \u0935\u0948\u0936\u094d\u0935\u093f\u0915 \u0938\u094d\u0924\u0930 \u092a\u0930 \u0906\u0902\u0915\u095c\u094b \u0915\u093e \u0935\u093f\u0936\u094d\u0932\u0947\u0937\u0923 \u0915\u0941\u091b \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0939\u0948:\n","11cfe9ae":"#4) \u0906\u0902\u0915\u095c\u094b\u0902 \u0915\u093e \u092a\u0942\u0930\u094d\u0935\u093e\u0928\u0941\u092e\u093e\u0928","92abbb24":"# 1) \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u092e\u0947\u0902, \u092d\u093e\u0930\u0924 \u092e\u0947\u0902 \u0915\u094b\u0930\u094b\u0928\u093e \u0935\u093e\u092f\u0930\u0938 \u0915\u0947 \u0906\u0902\u0915\u095c\u094b \u0915\u093e \u0935\u093f\u0936\u094d\u0932\u0947\u0937\u0923 \u0915\u0941\u091b \u0907\u0938 \u092a\u094d\u0930\u0915\u093e\u0930 \u0939\u0948:\n","ead57bc4":"# \u092d\u093e\u0930\u0924\u0940\u092f \u0906\u0902\u0915\u095c\u094b\u0902 \u0915\u093e \u0935\u093f\u0936\u094d\u0932\u0947\u0937\u0923 (\u0921\u0947\u091f\u093e \u0935\u093f\u091c\u093c\u0941\u0905\u0932\u093e\u0907\u091c\u093c\u0947\u0936\u0928)\n\n\u0907\u0938 \u092a\u0943\u0937\u094d\u0920 \u092a\u0930 \u092e\u0948\u0902 \u0906\u092a \u0932\u094b\u0917\u094b\u0902 \u0915\u0947 \u0938\u092e\u0915\u094d\u0937, \n- \u092a\u094d\u0930\u0925\u092e \u092d\u093e\u0917 \u092e\u0947\u0902, \u0930\u093e\u091c\u094d\u092f\u094b\u0902 \u0915\u0947 \u0905\u0928\u0941\u0938\u093e\u0930 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u092e\u0947\u0902 \u0915\u094b\u0930\u094b\u0928\u093e \u0935\u093e\u092f\u0930\u0938 \u0938\u0947 \u092a\u0941\u0937\u094d\u091f\u093f \u0939\u0941\u090f \u092e\u093e\u092e\u0932\u094b \u0915\u0940 \u0915\u0941\u0932 \u0938\u0902\u0916\u094d\u092f\u093e, \u0909\u0928\u092e\u0947\u0902 \u0938\u0947 \u0938\u0939\u0940 \u0939\u0941\u090f \u092e\u093e\u092e\u0932\u094b\u0902 \u0915\u0940 \u0938\u0902\u0916\u094d\u092f\u093e, \u0909\u0928\u092e\u0947\u0902 \u0938\u0947 \u092e\u093e\u0930\u0947 \u091c\u093e \u091a\u0941\u0915\u0947 \u092e\u093e\u092e\u0932\u094b\u0902 \u0915\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0906\u0926\u093f \u0915\u0947 \u092c\u0940\u091a \u091c\u094d\u092f\u093e\u0926\u093e \u0938\u0947 \u091c\u094d\u092f\u093e\u0926\u093e \u0917\u094d\u0930\u093e\u092b \u090f\u0935\u0902 \u091a\u093e\u0930\u094d\u091f\u094d\u0938 \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u092a\u094d\u0930\u0926\u0930\u094d\u0936\u093f\u0924 \u0915\u0930 \u0930\u0939\u093e \u0939\u0942\u0901 | \n\n\n- \u090f\u0935\u0902 \u0926\u0942\u0938\u0930\u0947 \u092d\u093e\u0917 \u092e\u0947\u0902, \u0915\u094b\u0930\u094b\u0928\u093e \u0935\u093e\u092f\u0930\u0938 \u0915\u0947 \u0935\u093f\u0936\u094d\u0935\u094d\u092f\u093e\u092a\u0940 \u092e\u093e\u092e\u0932\u094b\u0902 \u0915\u093e \u092d\u0940 \u0906\u0902\u0915\u0932\u0928 \u092d\u0940 \u0917\u094d\u0930\u093e\u092b \u090f\u0935\u0902 \u091a\u093e\u0930\u094d\u091f\u094d\u0938 \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u092a\u094d\u0930\u0926\u0930\u094d\u0936\u093f\u0924 \u0915\u0930 \u0930\u0939\u093e \u0939\u0942\u0901 |\n\n\n- \u0935\u0939\u0940 \u0924\u0940\u0938\u0930\u0947 \u092d\u093e\u0917 \u092e\u0947\u0902, \u092d\u093e\u0930\u0924 \u092e\u0947\u0902 \u0907\u0938 \u092e\u0939\u093e\u092e\u093e\u0930\u0940 \u0915\u0947 \u0906\u0902\u0915\u095c\u094b\u0902 \u0915\u0940 \u0924\u0941\u0932\u0928\u093e \u0935\u093f\u0936\u094d\u0935 \u0915\u0947 \u0915\u0941\u091b \u0905\u0928\u094d\u092f \u0926\u0947\u0936\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u0915\u0930\u0928\u0947 \u0915\u093e \u092a\u094d\u0930\u092f\u093e\u0938 \u0915\u0930 \u0930\u0939\u093e \u0939\u0942\u0901 |\n\n\n- \u0938\u093e\u0925 \u0939\u0940 \u091a\u094c\u0925\u0947 \u090f\u0935\u0902 \u0905\u0902\u0924\u093f\u092e \u092d\u093e\u0917 \u092e\u0947\u0902, \u0921\u093e\u091f\u093e \u0938\u093e\u0907\u0902\u0938 \u0915\u0940 \u0908\u091c\u093e\u0926 \u0924\u0915\u0928\u093f\u0915\u0940 \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947, \u0910\u0924\u093f\u0939\u093e\u0938\u093f\u0915 \u0906\u0902\u0915\u095c\u094b\u0902 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u092d\u0935\u093f\u0937\u094d\u092f \u092e\u0947\u0902 \u0906\u0928\u0947 \u0935\u093e\u0932\u0947 \u092e\u093e\u092e\u0932\u094b\u0902 \u090f\u0935\u0902 \u092e\u0930\u0928\u0947 \u0935\u093e\u0932\u094b \u0915\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0915\u093e \u092a\u0942\u0930\u094d\u0935\u093e\u0928\u0941\u092e\u093e\u0928 \u0932\u0917\u093e\u0928\u0947 \u0915\u093e \u092a\u094d\u0930\u092f\u093e\u0938 \u0915\u0930 \u0930\u0939\u093e \u0939\u0942\u0901 | ","c740444b":"#![alt text](https:\/\/imgur.com\/gOteoZe.jpg)\n"}}