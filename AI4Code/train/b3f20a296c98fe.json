{"cell_type":{"e7db5398":"code","e0679fe2":"code","ffa30ddc":"code","f5dcea60":"code","53c20a9d":"code","055b2066":"code","912c977a":"code","2d89eed4":"code","5608b431":"code","beb437d3":"code","795e6cbb":"code","42b1b480":"code","fe87fee7":"code","158e9ae1":"code","3242753c":"code","1b5d2c12":"code","63e8c8c2":"code","d6417a94":"code","d837bea5":"code","a54e378e":"code","671b5361":"code","f04175ca":"code","6e45cec7":"code","56b4ca57":"code","2821131e":"code","7519705d":"code","856908d1":"code","3eb22b8a":"code","d191e018":"code","3532a126":"code","4181d5fd":"code","752e260b":"code","bcb3abea":"code","a1b57a11":"code","2c505d45":"code","d9409b98":"code","16eeb9c2":"code","de8d38cc":"code","d3c47704":"code","27c2f5b8":"code","55b5b79d":"code","ed942c3c":"code","906b2f2b":"code","8ff2dee0":"code","28e178cd":"code","c2a32a0b":"code","a8bc2bfa":"code","f2249e46":"code","d2e158f1":"markdown","12ccb40c":"markdown","1a3348e1":"markdown","b301424d":"markdown","c950e99d":"markdown","2cebe98a":"markdown","dd422fea":"markdown","53f7ee92":"markdown","6374eb1f":"markdown","f30272bf":"markdown","9f953bb6":"markdown","478be624":"markdown","e16bedf6":"markdown","fff07353":"markdown","f06e6319":"markdown","ca48ef60":"markdown","93d04dcd":"markdown","276d3cf8":"markdown","06a09fc3":"markdown","8b7a9d4a":"markdown","45bf6b12":"markdown","b65c3858":"markdown","da179d71":"markdown","19455077":"markdown","78ecac9a":"markdown","68ea5a40":"markdown","cec9704d":"markdown","781c735d":"markdown","1c75fdca":"markdown","b27a5ee7":"markdown","68c7f24c":"markdown","ae01b277":"markdown","55e1a054":"markdown","66ea6e5e":"markdown","078c54c0":"markdown","df37dba2":"markdown","534743e3":"markdown","88984783":"markdown","ba2b8903":"markdown","8b6adec3":"markdown","9a37bb87":"markdown","f49080ab":"markdown","88d55a94":"markdown","aab223e4":"markdown","6fe2b1f8":"markdown","5d31a89f":"markdown","ed65b5a5":"markdown","7719365d":"markdown","92a9ac4d":"markdown","b5fa3836":"markdown","fc3444ff":"markdown","d5012d68":"markdown","325e9fa9":"markdown","4e5ab39f":"markdown","b823173b":"markdown"},"source":{"e7db5398":"pip install funpymodeling","e0679fe2":"pip install reverse_geocoder","ffa30ddc":"import pandas as pd\nfrom funpymodeling.exploratory import freq_tbl, status, profiling_num, cat_vars, num_vars\nfrom pandas_profiling import ProfileReport\nimport reverse_geocoder as rg","f5dcea60":"# Cargamos los datos\ndata = pd.read_csv(\"..\/input\/ufo-sightings\/scrubbed.csv\", sep=\",\")","53c20a9d":"status(data)","055b2066":"# Veamos algunos datos\ndata.head()","912c977a":"data['datetime_dat']=data['datetime'].astype('datetime64')\n# No permite hacer la conversion porque aparentemente algunas fechas tienen la hora como '24:00'\n# Entonces vamos a reemplazarlo por '00:00'\n","2d89eed4":"# verifico si efectivamente hay registros con la hora cargada como '24:00'\ndata[data['datetime'].str.contains(\"24:00\")]\n# hay 694 regirstros con hora '24:00'","5608b431":"# donde encuentra un '24:00' le asigna '00:00'\ndata['datetime_dat'] = data['datetime'].replace({'24:00': '00:00'}, regex=True)","beb437d3":"# Probemos ahora la conversi\u00f3n al tipo de datos datetime\ndata['datetime_dat']=data['datetime_dat'].astype('datetime64')","795e6cbb":"data['latitude_num']=data['latitude'].astype('float64')\n# no lo permite porque encontr\u00f3 un registro donde aparece una letra 'q'. \n# desconozco si es algo propio de la codificacion de las latitudes. Pero como es solo un registro, lo elimino ","42b1b480":"# veamos qu\u00e9 registro es\ndata[data['latitude'].str.contains('[A-Za-z]', na=False)]  \n# es el registro 43782. Vemos que en latitud aparece una 'q' en el medio","fe87fee7":"# Vemos que es el 43782. Vamos a eliminarlo con su \u00edndice \ndata= data.drop([43782])","158e9ae1":"# MUY IMPORTANTE\n# en este punto, es recomendable reiniciar el \u00edndice de la tabla, \n# ya que luego obtendremos los pa\u00edses faltantes a traves de reverse_geocoding.\ndata = data.reset_index(drop=True)","3242753c":"# probemos otra vez la conversi\u00f3n de object a numerico\ndata['latitude_num']=data['latitude'].astype('float64')\n# ahora si nos permiti\u00f3","1b5d2c12":"# me quedo con la que muestra en segundos (probablemente al final la transformemos a minutos para facilitar el analisis)\n# entonces, tomamos 'duration (seconds)' y la transformamos a float64\ndata['duration(seconds)_num']=data['duration (seconds)'].astype('float64')\n# No lo puede converir porque encuentra valores como '2`', es decir tienen caracteres no numericos","63e8c8c2":"# veamos cu\u00e1les son esos registros que traen apostrofe\ndata[data['duration (seconds)'].str.contains(\"`\",na=False)]\n# son 3, podriamos borrarlos. O mejor aun, probemos otra cosa\n# vamos a editarle el valor, como hicimos en la 1\u00b0observaci\u00f3n (reemplazar '24:00' por '00:00')","d6417a94":"# le asigno a cada combinacion de fila\/columna, el valor sin apostrofe.\ndata.loc[27822,'duration (seconds)'] = 2\ndata.loc[35692,'duration (seconds)'] = 8\ndata.loc[58590,'duration (seconds)'] = 0.5","d837bea5":"# ahora si, procedemos a convertir el tipo de datos a float64\n\ndata['duration(seconds)_num']=data['duration (seconds)'].astype('float64')","a54e378e":"data['datePosted_dat']=data['date posted'].astype('datetime64')\n#este no dio problemas. Ya tenemos la conversi\u00f3n","671b5361":"status(data)","f04175ca":"# creo una variable con la tupla de lat y long (para pasarle a reverse_geocoding y haga su magia)\ncoordinates = list(zip(data['latitude_num'], data['longitude ']))","6e45cec7":"import reverse_geocoder as rg","56b4ca57":"# le paso al geocoding mis coordenadas para que me devuelva pa\u00edses en una lista\nresults = rg.search(coordinates) # default mode = 2\n# print(results)","2821131e":"data.loc[1,['latitude','longitude ','city','state','country']]\n# los datos coinciden. Este avistamiento fue en Lackland afb(AirForce Base), Texas.\n# latitud y longitud vemos que es la misma practicamente (es lo que usa para encontrar pa\u00edses)\n# a partir de ahi obtuve su pa\u00eds (aparece como cc), y tambien su estado(admin1) y ciudad(name)","7519705d":"# ahora unimos nuestra data con lo que nos interesa de la lista. Primero convertimos esa lista en un dataframe\nresults_df = pd.DataFrame(results)","856908d1":"# ahora simplemente seleccionamos que columnas queremos agregar de results_df a nuestros datos\n# \u00bfse acuerdan que reiniciamos el indice cuando eliminamos un registro en el 2\u00b0 problema? Fue para hacer esta union facilmente\n\ndata['country_c']=results_df['cc']\ndata['city_c']=results_df['name']\ndata['state_c'] = results_df['admin1']","3eb22b8a":"# et voil\u00e0, tenemos data de todos esos paises que eran aparecian nulos, a partir de sus coordenadas\n(data[['country','country_c','state','state_c','city','city_c']])\n# por ejemplo para el registro 1, venia pa\u00eds nulo. Sin embargo ahora sabemos que es de US. Lo confirma que el estado es Texas","d191e018":"import numpy as np","3532a126":"# primero los pasamos a nulo\ndata['state_c'] = data['state_c'].replace({'': np.nan})\n\n# y ahora a esos nulos le asignamos el nombre de la ciudad\ndata['state_c'] = data['state_c'].fillna(data['city_c'])","4181d5fd":"# Enfoque: aca si no podemos hacer nada por estos nulos, solo le asignaremos un string 'No data'\ndata['shape'] = data['shape'].fillna(\"No data\")\ndata['comments'] = data['comments'].fillna(\"No data\")","752e260b":"# 'columna en segundos' \/ 60 = 'columna en minutos'\ndata['duration(minutes)_num']=data['duration(seconds)_num'] \/60","bcb3abea":"data=data.drop(['datetime','latitude','duration (seconds)','date posted','country','state','city','duration(seconds)_num'],axis=1)\n# elimino  tambien duration (hours\/min) \ndata=data.drop(['duration (hours\/min)'],axis=1)","a1b57a11":"data = data.rename(columns={\"datetime_dat\": \"datetime\", \n                             \"latitude_num\": \"latitude\", \n                             'datePosted_dat' : 'datePosted',\n                             'country_c':'country',\n                             'state_c':'state',\n                             'city_c': 'city',\n                             'duration(minutes)_num': 'duration(minutes)',\n                             'longitude ': 'longitude' })\n\ndata = data[[\"datetime\", \"country\", \"state\",\"city\",\"shape\",\"duration(minutes)\",\"comments\", \"datePosted\",\"latitude\",\"longitude\"]]","2c505d45":"status(data)","d9409b98":"countryNames = pd.read_csv('..\/input\/country-code-and-names\/Comtrade Country Code and ISO list v1.2.csv', sep =';')","16eeb9c2":"# Me quedo con las unicas columnas que me van a interesar\ncountryNames = countryNames.drop(['Country Code','Country Name, Full ','Country Comments','ISO3-digit Alpha','Start Valid Year','End Valid Year'],axis=1)","de8d38cc":"# Asi qued\u00f3 mi tabla de pa\u00edses\ncountryNames","d3c47704":"data_final = data.merge(countryNames, left_on='country', right_on='ISO2-digit Alpha', how='left')","27c2f5b8":"# Y vemos otra vez el status (...God bless status...)\nstatus(data_final)","55b5b79d":"# todavia hay nulos en Country Name, Abbreviation\n# probablemente este sucediendo porque hay codigos de paises en nuestra data principal, que no figuran en nuestra tabla de paises\n# entonces, vemos a decirle que si es nulo, muestre el codigo del pais de la tabla principal\ndata_final['Country Name, Abbreviation'] = data_final['Country Name, Abbreviation'].fillna(data_final['country'])\n","ed942c3c":"# Nota: hay un inconveniente con el pa\u00eds Namibia, Africa\n# su codigo es NA, y me parece que se genera una confusion con NAN (nulo)\n# para solucionarlo momentaneamente voy a cambiar a mano el valor a \"Namibia\"\ndata_final['Country Name, Abbreviation'] = data_final['Country Name, Abbreviation'].replace({'NA': 'Namibia'}, regex=True)","906b2f2b":"# Eliminamos las columnas que no nos sirven\ndata_final = data_final.drop(['country','ISO2-digit Alpha'],axis=1)","8ff2dee0":"# Renombramos nuestra columna para que quede com 'country'\ndata_final = data_final.rename(columns={\"Country Name, Abbreviation\": \"country\"})","28e178cd":"# Reordenamos\ndata_final = data_final[[\"datetime\", \"country\", \"state\",\"city\",\"shape\",\"duration(minutes)\",\"comments\", \"datePosted\",\"latitude\",\"longitude\"]]","c2a32a0b":"status(data_final)","a8bc2bfa":"# Nota: hay punto y coma en el campo de comments. Cuando lo transformo a csv me lo toma como separador de columna\n# a pesar de que le declaro que separe solo por comas.\n# esto lo soluciona momentaneamente:\ndata_final['comments'] = data_final['comments'].replace({';': ' '}, regex=True)","f2249e46":"data_final.to_csv('clean Data UFO.csv', index=False, sep =',')\n#quotechar=\"'\"","d2e158f1":"Este notebook se realiza aplicando los conocimientos aprendidos en el curso \"Ciencia de datos 360 en Python\" de la Escuela de Datos Vivos<br>\nhttps:\/\/escueladedatosvivos.ai\/courses<br>\nHay cursos muy accesibles y algunos completamente gratuitos","12ccb40c":"Terminamos por el momento con las conversiones de datos. Proximo paso: tratamiento de nulos","1a3348e1":"Por ejemplo, para el registro 1 nos devuelve:<br>\n'lat' : '29.38663':<br>\n'lon' : '-98.61797':<br>\n'name': 'Lackland Air Force Base':<br>\n'admin1': 'Texas':<br>\n'admin2': 'Bexar County' (este campo no lo vamos a usar)<br>\n'cc': 'US':<br>","b301424d":"Datos: https:\/\/www.kaggle.com\/NUFORC\/ufo-sightings<br>\nEs un registro de avistamientos de OVNI llevado a cabo por National UFO Reporting Center (NUFORC)<br>\nContiene registros de avistamientos desde 1906 hasta 2014<br>\nEn este notebook haremos una peque\u00f1a preparaci\u00f3n de datos para dejar un set limpio para analizar luego con visualizaciones. Por ese motivo no va a ser un notebook muy entretenido. Las visualizaciones las hare en otro notebook<br>\n2\u00b0 Parte: https:\/\/www.kaggle.com\/leogenzano\/ufo-sightings-2-parte-analisis-exploratorio\/<br>","c950e99d":"Consegu\u00ed esta tabla googleando unos minutos","2cebe98a":"#ULTIMOS PASOS","dd422fea":"*************************","53f7ee92":"#7\u00b0 OBSERVACI\u00d3N: CREAR NUEVA COLUMNA DE TIEMPO DE AVISTAMIENTO (MINUTOS)<br>\nEnfoque: Crearemos la columna a partir de la columna de segundos, que tiene datos consistentes","6374eb1f":"Eliminamos todas esas columnas originales que fueron tratadas","f30272bf":"****************************************************************************************","9f953bb6":"Solucionamos los ultimos detalles:","478be624":"# **CONVERSION DE TIPO DE DATOS**","e16bedf6":"#5\u00b0 OBSERVACI\u00d3N: NULOS EN COUNTRY, STATE y CITY<br>\n<br>\nEnfoque: obtenerlos a partir de sus coordenadas","fff07353":"Hacemos el join (left)","f06e6319":"Ahora veamos que tiene el primer registro de nuestros datos","ca48ef60":"![The kaggle logo][1]\n[1]: https:\/\/cdn.forbes.com.mx\/2015\/03\/Internet-XFiles-Mulder.jpg","93d04dcd":"<img src=\"https:\/\/i.pinimg.com\/originals\/a5\/42\/48\/a5424852abc98df69ebd4b4e366e1b6f.gif\">","276d3cf8":"**********************","06a09fc3":"Consideraciones:\n* voy a estar utilizando algunas funciones de la libreria funpymodeling, que nos ayuda sobretodo con el analisis exploratorio y la preparaci\u00f3n de datos https:\/\/pypi.org\/project\/funpymodeling\/\n* Tambien voy a usar la libreria reverse_geocoding para encontrar nombres de pa\u00edses a partir de sus coordenadas https:\/\/github.com\/thampiman\/reverse-geocoder\n* en algunos casos donde el c\u00f3digo rompe por algun motivo, oculte el output para no hacer largo el notebook. Podes verlo presionando el boton Output arriba a la derecha de cada celda\n* Este notebook no fue realizado por un experto. Seguramente haya mejores maneras de afrontar las mismas problematicas. Quedo atento a cualquier comentario o sugerencia ","8b7a9d4a":"***********************************************************************","45bf6b12":"#OTRAS TRANSFORMACIONES","b65c3858":"Nota: hay algunos estados en esta nueva columna state_c que vienen vacios, a pesar de que los obtuvimos con geocoding<br>\nVamos a reemplazarlos por el mismo valor que aparezca en ciudad","da179d71":"**Importamos librerias que vamos a utilizar y cargamos los datos en un dataframe**","19455077":"# **An\u00e1lisis inicial**","78ecac9a":"#4\u00b0 OBSERVACI\u00d3N. DATE POSTED FIGURA COMO OBJECT<br>\n<br>\nEnfoque: convertirlo a datetime64","68ea5a40":"Y comprobamos una ultima vez.. se ve bien","cec9704d":"#(EDIT) 8\u00b0 OBSERVACI\u00d3N: ASIGNAR NOMBRE AMIGABLE A LOS PAISES","781c735d":"Veamos como estan nuestros datos","1c75fdca":"#3\u00b0 OBSERVACI\u00d3N. TENEMOS DOS COLUMNAS PARA EL TIEMPO DE AVISTAMIENTO. AMBAS FIGURAN COMO OBJECT<br>\n<br>\nEnfoque: eliminar la que muestra en minutos, ya que tiene muchisimos caracteres no numericos (lo haremos al final del notebook)","b27a5ee7":"**********************","68c7f24c":"#1\u00b0 OBSERVACI\u00d3N: 'DATETIME' TIENE COMO TIPO DE DATOS: OBJECT<br>\n<br>\nEnfoque: convertirlo a datetime64","ae01b277":"* No voy a estar reemplazando las variables originales, les asignare otro nombre y las eliminare al final cuando este seguro de que me quedo como quiero","55e1a054":"![The kaggle logo][2]\n[2]: https:\/\/i.ytimg.com\/vi\/FtyEo-8OWNA\/hqdefault.jpg","66ea6e5e":"Por: [Leonardo Genzano](https:\/\/www.linkedin.com\/in\/leonardo-genzano-1b275193\/)","078c54c0":"Hay 9669 nulos en country. Podriamos eliminarlos...<br>\n..Pero si yo tengo correctamente las coordenadas, podr\u00eda obtener su pa\u00eds a traves de ellas<br>\nEsto se logra gracias a reverse_geocoding","df37dba2":"Y tenemos nuestro set de datos un poco m\u00e1s ordenado ","534743e3":"ALGUNAS ACLARACIONES","88984783":"\u00bfQu\u00e9 hacemos ahora?","ba2b8903":"#TRATAMIENTO DE NULOS","8b6adec3":"INDICE<br>\n<br>\nCONVERSI\u00d3N DE TIPO DE DATOS<br>\n* 1\u00b0 OBSERVACI\u00d3N: 'DATETIME' TIENE COMO TIPO DE DATOS: OBJECT<br>\n* 2\u00b0 OBSERVACI\u00d3N. 'LATITUDE' TIENE COMO TIPO DE DATOS: OBJECT<br>\n* 3\u00b0 OBSERVACI\u00d3N. TENEMOS DOS COLUMNAS PARA EL TIEMPO DE AVISTAMIENTO. AMBAS FIGURAN COMO OBJECT<br>\n* 4\u00b0 OBSERVACI\u00d3N. DATE POSTED FIGURA COMO OBJECT<br>\n<br>\nTRATAMIENTO DE NULOS<br>\n* 5\u00b0 OBSERVACI\u00d3N: NULOS EN COUNTRY, STATE y CITY<br>\n* 6\u00b0 OBSERVACI\u00d3N: NULOS EN SHAPE Y COMMENTS<br>\n<br>\nOTRAS TRANSFORMACIONES<br>\n* 7\u00b0 OBSERVACI\u00d3N: CREAR NUEVA COLUMNA DE TIEMPO DE AVISTAMIENTO (MINUTOS)<br>\n<br>\nULTIMOS PASOS<br>\n* (EDIT) 8\u00b0 OBSERVACI\u00d3N: ASIGNAR NOMBRE AMIGABLE A LOS PAISES<br>","9a37bb87":"#2\u00b0 OBSERVACI\u00d3N: 'LATITUDE' TIENE COMO TIPO DE DATOS: OBJECT<br>\n<br>\nEnfoque: convertirlo a float64","f49080ab":"****************","88d55a94":"* recordemos que estamos duplicando las columnas, al final eliminaremos las originales que ya tienen su \"arreglo\"\n* vemos que hay nulos en state, country, shape y comments","aab223e4":"Cambiamos los nombres de las nuevas columnas, y las reordenamos","6fe2b1f8":"Mientras revisaba los ultimos detalles este notebook, se me ocurrio que para visualizar, estaria bueno tener los nombres de los pa\u00edses<br>\nEn teor\u00eda es simple... seria buscar una tabla de pa\u00edses y hacer el join. Veremos que sale","5d31a89f":"**********************","ed65b5a5":"#6\u00b0 OBSERVACI\u00d3N: NULOS EN SHAPE Y COMMENTS","7719365d":"Guardamos el set limpio","92a9ac4d":"Aca continuaremos el analisis: https:\/\/www.kaggle.com\/leogenzano\/ufo-sightings-2-parte-analisis-exploratorio\/","b5fa3836":"![The kaggle logo][3]\n[3]: https:\/\/elcomercio.pe\/resizer\/CMBy5GAqgqFYqvWBHQFqMM58u7A=\/580x330\/smart\/filters:format(jpeg):quality(75)\/cloudfront-us-east-1.images.arcpublishing.com\/elcomercio\/3RKS3OTR4BFUBIXJOKYADRE4AI.jpg","fc3444ff":"# **THE TRUTH IS OUT THERE 1\u00b0parte** ","d5012d68":"<img src=\"https:\/\/thumbs.gfycat.com\/DelightfulDisfiguredHamadryad-size_restricted.gif\">","325e9fa9":"Variables de los datos\n* datetime: fecha y hora del avistamiento\n* country: pa\u00eds\n* state: estado\/provincia\/region\n* city: ciudad\n* shape: forma del ovni\n* duration(seconds): duraci\u00f3n en segundos del avistamiento\n* duration (hours\/min): duraci\u00f3n en horas y minutos del avistamiento\n* comments: descripci\u00f3n \n* datePosted: fecha en que fue cargado el registro\n* latitude & longitude: coordenadas geogr\u00e1ficas","4e5ab39f":"Con la funci\u00f3n status de funpymodeling, verificamos el estado de salud de los datos\n* Tipos de datos: excepto por longitude, todos vienen en object.\n* Hay muchisimos nulos en country y shape. Esto a pesar de tener registrado por ejemplo el estado o ciudad\n* Tambien tenemos nulos en city, state, shape y comments.\n* Tenemos dos columnas que muestran el tiempo que dur\u00f3 el avistamiento. Nos quedaremos con la de segundos ya que tiene solo numeros, pero al final la transformaremos a minutos.","b823173b":"****************************************************************************************"}}