{"cell_type":{"3933adab":"code","068db248":"code","7b4698a9":"code","63ba58ad":"code","b6327265":"code","b14b3e6a":"code","bf650436":"code","8f1e8adb":"code","a369aa9a":"code","609ff286":"code","4f560e34":"code","b99007e7":"code","232b9878":"code","34ef7cb5":"code","24b468e1":"code","439c02c0":"code","e86b89e1":"code","3e39e5ec":"code","e5745c17":"code","8cd9060b":"code","13547f63":"code","956a9d0d":"code","e2803940":"code","52ce36c7":"code","84570b83":"markdown","50e4d7a7":"markdown","e25c8e0f":"markdown","eff23b93":"markdown","bc150038":"markdown","1673ecae":"markdown","f680af11":"markdown","a4368f50":"markdown","af93b802":"markdown","1d7a3e47":"markdown","27d8b88d":"markdown"},"source":{"3933adab":"import pandas as pd\nimport numpy as np\nimport os\nfrom tqdm import notebook","068db248":"os.listdir(\"\/kaggle\/input\/optiver-realized-volatility-prediction\")","7b4698a9":"train_df = pd.read_csv(\"\/kaggle\/input\/optiver-realized-volatility-prediction\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/optiver-realized-volatility-prediction\/test.csv\")","63ba58ad":"print(f\"Train shape: {train_df.shape}, Test shape: {test_df.shape}\")","b6327265":"print(f\"Book train: {len(os.listdir('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_train.parquet'))}\")\nprint(f\"Trade train: {len(os.listdir('\/kaggle\/input\/optiver-realized-volatility-prediction\/trade_train.parquet'))}\")\nprint(f\"Book test: {len(os.listdir('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_test.parquet'))}\")\nprint(f\"Trade test: {len(os.listdir('\/kaggle\/input\/optiver-realized-volatility-prediction\/trade_test.parquet'))}\")","b14b3e6a":"train_df.head()","bf650436":"train_df.tail()","8f1e8adb":"test_df.head()","a369aa9a":"print(f\"Train stock_id: {train_df.stock_id.nunique()}, Test stock_id: {test_df.stock_id.nunique()}\")\nprint(f\"Train time_id: {train_df.time_id.nunique()}, Test time_id: {test_df.time_id.nunique()}\")","609ff286":"train_df.info()","4f560e34":"test_df.info()","b99007e7":"book_01_df = pd.read_parquet('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0')\ntrade_01_df =  pd.read_parquet('\/kaggle\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=0')","232b9878":"print(f\"book_01 shape: {book_01_df.shape}, trade_01 shape: {trade_01_df.shape}\")","34ef7cb5":"book_01_df.head()","24b468e1":"trade_01_df.head()","439c02c0":"book_01_df.info()","e86b89e1":"trade_01_df.info()","3e39e5ec":"print(f\"Book time_ids: {book_01_df.time_id.nunique()}\")\nprint(f\"Trade time_ids: {trade_01_df.time_id.nunique()}\")","e5745c17":"path = '\/kaggle\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/'\nlist_stocks = os.listdir(path)\ntrade_d_list = []\nfor stock_id in notebook.tqdm(list_stocks):\n    df = pd.read_parquet(f\"\/kaggle\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/{stock_id}\")\n    trade_d_list.append((stock_id, df.shape[0], df.time_id.nunique(), df.price.min(), df.price.max(), df.price.mean(), df.price.var())) ","8cd9060b":"path = '\/kaggle\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/'\nlist_stocks = os.listdir(path)\nbook_d_list = []\nfor stock_id in notebook.tqdm(list_stocks):\n    df = pd.read_parquet(f\"\/kaggle\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/{stock_id}\")\n    book_d_list.append((stock_id, df.shape[0], df.time_id.nunique(),\n                        df.bid_price1.min(), df.bid_price1.max(), df.bid_price1.mean(), df.bid_price1.var(),\n                        df.bid_price2.min(), df.bid_price2.max(), df.bid_price2.mean(), df.bid_price2.var(),\n                        df.ask_price1.min(), df.ask_price1.max(), df.ask_price1.mean(), df.ask_price1.var(),\n                        df.ask_price2.min(), df.ask_price2.max(), df.ask_price2.mean(), df.ask_price2.var())) ","13547f63":"trade_train_df = pd.DataFrame(trade_d_list)\ntrade_train_df.columns = ['stock_id', 'rows', 'time_id_count', 'min_price', 'max_price', 'avg_price', 'var_price']\ntrade_train_df.head()","956a9d0d":"book_train_df = pd.DataFrame(book_d_list)\nbook_train_df.columns = ['stock_id', 'rows', 'time_id_count',\n                         'min_bid_price1', 'max_bid_price1', 'avg_bid_price1', 'var_bid_price1',\n                         'min_bid_price2', 'max_bid_price2', 'avg_bid_price2', 'var_bid_price2',\n                         'min_ask_price1', 'max_ask_price1', 'avg_ask_price1', 'var_ask_price1',\n                         'min_ask_price2', 'max_ask_price2', 'avg_ask_price2', 'var_ask_price2']\nbook_train_df.head()","e2803940":"print(f\"Trade data: {sum(trade_train_df.rows)\/1_000_000} Million rows\")\nprint(f\"Book data: {sum(book_train_df.rows)\/1_000_000} Million rows\")","52ce36c7":"print(f\"Trade data: {trade_train_df.time_id_count.nunique()}: {trade_train_df.time_id_count.unique()}\")\nprint(f\"Book data: {book_train_df.time_id_count.nunique()}: {book_train_df.time_id_count.unique()}\")","84570b83":"Let's check how many different time_id counts we have for the data.","50e4d7a7":"# Analysis preparation","e25c8e0f":"# Introduction\n\nWe will take a quick look to the Optiver competition data.","eff23b93":"Apparently, there are cases when for a specific trade data, we do not have the corresponding book data aligned.","bc150038":"## Train and test","1673ecae":"# Few takeovers\n\nYou can explore easily the data using pandas.\n\nData is quite clean, does not have missing values.\n\nData ingestion from the parquet files is very fast.\n\nIf you will aggregate the trade and book data for your preliminary models, you will not need to store all the data, you can process it on the fly.\n\n","f680af11":"Let's see how many rows we do have in the training parquet data.","a4368f50":"## Read parquet data\n\nLet's start by reading one couple of parquet files. We can use **read_parquet** function from pandas for this.","af93b802":"# Quick data exploration","1d7a3e47":"## Parse all parquet files and get some statistical values","27d8b88d":"Let's check how many time_id we have for book & trade data."}}