{"cell_type":{"32d9708e":"code","54e3691f":"code","e7f34fdf":"code","955f734e":"code","4c40d6ed":"code","83e35675":"code","c873ed84":"code","7a5893c4":"code","824878d8":"code","ac006bc5":"code","a87a8098":"code","c5ade899":"code","3247b568":"code","d91628ce":"markdown","ed066b29":"markdown","4862ec5d":"markdown","cb470b0a":"markdown","933697b2":"markdown","df6307d9":"markdown","4a0931dc":"markdown","086278e2":"markdown"},"source":{"32d9708e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom wordcloud import WordCloud\nimport seaborn as sns\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","54e3691f":"df=pd.read_csv(\"..\/input\/honeyproduction.csv\")","e7f34fdf":"df.head()#5 samples in data","955f734e":"df.info() #features and data types","4c40d6ed":"#heatmap correlation of features\nf,ax=plt.subplots(figsize=(10,10))\nsns.heatmap(df.corr(),annot=True,fmt=\".2f\",ax=ax,linecolor=\"red\")\nplt.xticks(rotation=45)\nplt.yticks(rotation=45)\nplt.show()","83e35675":"\n#Bubble Chart\ny=df[df.year==2008].sort_values(\"numcol\",ascending=False).iloc[:5,:]\ntotal_numcol  = [each\/max(y.numcol)*100 for each in y.numcol]\ninternational_color = [each for each in y.yieldpercol]\ndata = [\n    {\n        'y': y.prodvalue,\n        'x': y.totalprod,\n        'mode': 'markers',\n        'marker': {\n            'color': international_color,\n            'size': total_numcol,\n            'showscale': True\n        },\n        \"text\" :  y.state    \n    }\n]\niplot(data)\n","c873ed84":"\n#Histogram\nx1998=df.priceperlb[df.year==1998]\nx2012=df.priceperlb[df.year==2012]\n\ntrace1 = go.Histogram(\n    x=x1998,\n    opacity=0.75,\n    name = \"1998\",\n    marker=dict(color='rgba(171,100, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=x2012,\n    opacity=0.75,\n    name = \"2012\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title=' priceperlb rates for 1998 and 2012',\n                   xaxis=dict(title='priceperlb'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","7a5893c4":"#Pie-Chart\nprod=df[df.year==2011].sort_values(\"totalprod\",ascending=False).iloc[:5,:]\nprod.num_stocks=[int(each) for each in prod.stocks]\nlabels=prod.state\nfig = {\n  \"data\": [\n    {\n      \"values\": prod.num_stocks,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Percent Of Stocks Rates\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\",\n    },],\n  \"layout\": {\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Percent of Stocks\",\n                \"x\": 0.40,\n                \"y\": 1.2\n            },\n        ]\n    }\n}\niplot(fig)","824878d8":"#Bar Chart\nx2010=df[df.year==2010].sort_values(\"prodvalue\",ascending=True).iloc[:3,:]\ntrace1=go.Bar(\n        x=x2010.state,\n        y=x2010.totalprod,\n        name=\"Total Production\",\n        marker=dict(color=\"rgba(175, 174, 200, 0.5)\",\n                     line=dict(color=\"rgb(0,0,0)\",width=1.5)),\n        text=x2010.state)\n        \ntrace2=go.Bar(\n        x=x2010.state,\n        y=x2010.stocks,\n        name=\"Stocks\",\n        text=x2010.state,\n        marker=dict(color=\"rgba(150, 175, 128, 0.5)\",\n                    line=dict(color=\"rgb(0,0,0)\",width=1.5)))        \n\ndata=[trace1,trace2]\nlayout=go.Layout(barmode=\"group\")\nfig=go.Figure(data=data,layout=layout)\niplot(fig)","ac006bc5":"#Word Cloud\nx2009 = df[df.year == 2009].sort_values(\"numcol\",ascending=False).iloc[:20,:]\nplt.subplots(figsize=(8,8))\na = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(x2009.state))\nplt.imshow(a)\nplt.axis('off')\nplt.show()","a87a8098":"#Scatter Plot Matrix\nimport plotly.figure_factory as ff\n# prepare data\ndataframe = df[df.year == 1999].sort_values(\"priceperlb\",ascending=False).iloc[:20,:]\ndata1999 = dataframe.loc[:,[\"numcol\",\"totalprod\", \"stocks\"]]\ndata1999[\"index\"] = np.arange(1,len(data1999)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data1999, diag='box', index='index',colormap='Portland',\n                                  colormap_type='seq',\n                                  height=700, width=700)\nplt.savefig('graph.png')\niplot(fig)\n","c5ade899":"#3D Scatter \n# totalprod,yieldpercol,numcol\ndataframe=df[df.year==2000]\ntrace1 = go.Scatter3d(\n    x=dataframe.numcol,\n    y=dataframe.totalprod,\n    z=dataframe.yieldpercol,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,120,50)',        \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )  \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","3247b568":"#Multiple Subplots\ndataframe=df[df.year==2002]\ntrace1 = go.Scatter(\n    x=dataframe.state,\n    y=dataframe.numcol,\n    name = \"numcol\"\n)\ntrace2 = go.Scatter(\n    x=dataframe.state,\n    y=dataframe.totalprod,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Total Prod.\"\n)\ntrace3 = go.Scatter(\n    x=dataframe.state,\n    y=dataframe.stocks,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"Stocks\"\n)\ntrace4 = go.Scatter(\n    x=dataframe.state,\n    y=dataframe.priceperlb,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"Price Per Lb\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Numcol, Total Prod., Stocks and Pricce Per Lb score VS State'\n)\nfig = go.Figure(data=data, layout=layout)\nplt.savefig('graph.png')\niplot(fig)","d91628ce":"**State names according to numcol value in 2009**","ed066b29":"**Comparison of prodvalue, totalprod, yieldperproduct and numcol values \nof 5 states with the highest numcol value in 2008**","4862ec5d":"**Comparison of numcol, totalprod and stocks values in 1999**","cb470b0a":"**Comparing totalprod and stocks of 3 state with the lowest prodvalues in 2010**","933697b2":"**Numcol, Total Prod., Stocks and Pricce Per Lb score VS State in 2002**","df6307d9":"\n** This was my practice for my class. I hope you like it. Waiting for comments and suggestions.**","4a0931dc":"\n**Comparison of the values \u200b\u200bof stocks of 5 states with the highest totalprod in 2011 in pie chart**","086278e2":"\n**Priceperlb rates for 1998 and 2012**.**You can easily see the change in price**"}}