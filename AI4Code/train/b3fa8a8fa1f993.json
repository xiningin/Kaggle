{"cell_type":{"4532341b":"code","28bbcad6":"code","dfbf635a":"code","5e65152e":"code","0b8b51d6":"code","508ea239":"code","4fb6839c":"code","cc808cf6":"code","f96a8ea3":"code","065e3d45":"code","348a2f78":"code","90697b6d":"code","f6d952e7":"code","baf532ae":"code","7c0b67fc":"code","9665ed20":"code","cf997437":"code","9f32878d":"code","0aa7e6a9":"code","ac7fa2c1":"code","2d2f15a6":"code","da5aca51":"code","b1f1c979":"code","bf891c71":"code","96241cc4":"code","033b84dc":"code","134fbaba":"code","4504b9c7":"code","e2142cdb":"code","21c69287":"markdown","948c71ac":"markdown","3a0ad288":"markdown","c492e3ea":"markdown","80fdcd42":"markdown"},"source":{"4532341b":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport optuna\n","28bbcad6":"adopt0=[ 'f_165', 'f_197', 'f_231', 'f_225', 'f_249', \n       'f_250', 'f_73', 'f_175', 'f_61', 'f_170', 'f_145', 'f_3', 'f_7', \n       'f_153', 'f_67', 'f_182', 'f_42', 'f_233', 'f_292', 'f_25', 'f_299', \n       'f_179', 'f_63', 'f_137', 'f_127', 'f_275', 'f_184', 'f_240', 'f_110', \n       'f_19', 'f_200', 'f_122', 'f_265', 'f_60', 'f_264', 'f_128', 'f_202', \n       'f_270', 'f_251', 'f_149', 'f_16', 'f_22', 'f_26', 'f_125', 'f_64', ]","dfbf635a":"data0a = pd.read_csv('..\/input\/ubiquant-market-train-data-splitting\/train0a.csv')\ndata0a2=data0a[adopt0+['target']]\ndel data0a\ndata0b = pd.read_csv('..\/input\/ubiquant-market-train-data-splitting\/train0b.csv')\ndata0b2=data0b[adopt0+['target']]\ndel data0b\ndata0c = pd.read_csv('..\/input\/ubiquant-market-train-data-splitting\/train0c.csv')\ndata0c2=data0c[adopt0+['target']]\ndel data0c\ndata0d = pd.read_csv('..\/input\/ubiquant-market-train-data-splitting\/train0d.csv')\ndata0d2=data0d[adopt0+['target']]\ndel data0d","5e65152e":"data0 = pd.concat([data0a2,data0b2,data0c2,data0d2],axis=0)\nprint(data0.shape)","0b8b51d6":"df=data0.copy()\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","508ea239":"data1=df\ndata1[0:2].T","4fb6839c":"data1.info()","cc808cf6":"target=['target']\ndataY=data1['target']\ndataX=data1.drop('target',axis=1)","f96a8ea3":"trainX=np.array(dataX)\ntrainY=np.array(dataY)\nprint(trainX.shape)\nprint(trainY.shape)","065e3d45":"df_columns = list(dataX.columns)\nprint(df_columns)","348a2f78":"train_df=pd.DataFrame(trainX)\n#test_df=pd.DataFrame(test)\ntrain_df.columns=df_columns\n#test_df.columns=df_columns\nprint(train_df.shape)","90697b6d":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","f6d952e7":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","baf532ae":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","7c0b67fc":"train_feat_df = to_feature(train_df)\n#test_feat_df = to_feature(test_df)\nprint(train_feat_df.shape)","9665ed20":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","cf997437":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","9f32878d":"y = trainY\nydf=pd.DataFrame(y)","0aa7e6a9":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_ylabel('Predicted target',fontsize=12)\n    ax.set_xlabel('Actual target',fontsize=12)\n    ax.scatter(oof,y)\n","ac7fa2c1":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[0:100]\n    \n    adopt=order.tolist()\n    print('The importance 100')\n    print(adopt)\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","2d2f15a6":"fold = KFold(n_splits=5, shuffle=True, random_state=71)\nydfi=ydf.iloc[:,0]\ny=np.array(ydfi)\ncv = list(fold.split(train_feat_df, y))\noof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\nfig, ax = visualize_importance(models, train_feat_df)\nax.set_title('Target Imortance',fontsize=20)","da5aca51":"fig,ax = plt.subplots(figsize=(16,6))\nax.set_title('f_165 vs target',fontsize=20)\nax.set_xlabel('f_165',fontsize=12)\nax.set_ylabel('target',fontsize=12)\nax.scatter(data0['f_165'],data0['target'])\nplt.show()","b1f1c979":"fig,ax = plt.subplots(figsize=(16,6))\nax.set_title('f_249 vs target',fontsize=20)\nax.set_xlabel('f_249',fontsize=12)\nax.set_ylabel('target',fontsize=12)\nax.scatter(data0['f_249'],data0['target'])\nplt.show()","bf891c71":"test0=pd.read_csv('..\/input\/ubiquant-market-prediction\/example_test.csv')\nsubmit=pd.read_csv('..\/input\/ubiquant-market-prediction\/example_sample_submission.csv')","96241cc4":"test0=test0[adopt0]\nprint(test0.shape)","033b84dc":"df=test0.copy()\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","134fbaba":"test1=df\nprint(test1.columns.tolist())","4504b9c7":"models","e2142cdb":"import ubiquant\nenv = ubiquant.make_env()   # initialize the environment\niter_test = env.iter_test()    # an iterator which loops over the test set and sample submission\n\nfor (test_df, sample_prediction_df) in iter_test:\n    \n    test_df['target'] = 0\n    \n    for model in models:\n        test_df['target'] += model.predict(test_df[adopt0])\n    \n    test_df['target'] \/= len(models)\n    env.predict(test_df[['row_id','target']])","21c69287":"# Data preparation","948c71ac":"# Ubiquant Market Visualize Importance & Predict","3a0ad288":"# Visualize Importance","c492e3ea":"# Model","80fdcd42":"# Target setting"}}