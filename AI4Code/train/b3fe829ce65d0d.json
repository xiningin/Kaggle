{"cell_type":{"560139aa":"code","7626fe93":"code","11303628":"code","a7bfc0cd":"code","ddfe226c":"code","b79c500d":"code","9dceac31":"code","979d07fc":"code","a2ac877f":"code","cc67e58d":"code","50650f1c":"code","47c974f4":"code","1db0cf7f":"code","85ae0f7c":"code","d8152302":"code","ad9a460e":"code","f19b7441":"code","3831aa8b":"code","81a22d86":"code","1167910e":"code","00cf7372":"code","f736202b":"code","e56d8c5a":"code","f11d5513":"code","7a3d4ea5":"code","304e6276":"code","15c76dc3":"code","463d57a7":"code","685eaaf5":"code","e3a8a1ef":"code","ca4425c8":"code","ca0a83df":"code","a9a913cc":"code","0fc9424d":"code","5d02c9a9":"code","3368cd2b":"code","8f178f59":"code","626d211b":"code","099fe14f":"code","66f328cb":"code","9500e2fc":"code","c17c98a8":"code","cc7ac2bb":"code","a8e7b4f9":"code","1ef8cbf0":"code","f9701907":"code","05b76e6f":"code","b21088ae":"code","1288406c":"code","bf897496":"code","5647fb11":"code","614e4478":"code","21696699":"code","af545298":"code","7353fa83":"code","fb34ebf4":"code","9402cd1f":"code","f49a6044":"code","214d4c5c":"markdown","61c00e24":"markdown","9304b308":"markdown","185dfa15":"markdown","359ca197":"markdown","4204ffd9":"markdown","174a42ba":"markdown","7761751f":"markdown","d85a9a3f":"markdown","f7772225":"markdown","c7a50ff3":"markdown","6ecdfef3":"markdown","889f8d30":"markdown","fbb30d8e":"markdown","6ff212f6":"markdown","ab824a33":"markdown","5bac7169":"markdown","fbc73c2c":"markdown"},"source":{"560139aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nfrom wordcloud import WordCloud\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7626fe93":"data = pd.read_csv(\"..\/input\/tmdb_5000_movies.csv\")","11303628":"data.columns","a7bfc0cd":"data.info()","ddfe226c":"del data[\"homepage\"]\ndel data[\"id\"]\ndel data[\"keywords\"]\ndel data[\"overview\"]\ndel data[\"production_companies\"]\ndel data[\"spoken_languages\"]\ndel data[\"status\"]\ndel data[\"tagline\"]\ndel data[\"title\"]","b79c500d":"data.columns","9dceac31":"data.head()","979d07fc":"import json \n\ndata[\"genres\"] = data[\"genres\"].apply(json.loads)\ndata[\"production_countries\"]= data[\"production_countries\"].apply(json.loads)\n\n\ndef pipe_flatten_names(keywords):\n    return '|'.join([x['name'] for x in keywords])\n\n\ndata['genres'] = data['genres'].apply(pipe_flatten_names)\ndata[\"production_countries\"]=data[\"production_countries\"].apply(pipe_flatten_names)\n\n\n","a2ac877f":"data.loc[:8,[\"original_title\",\"genres\",\"production_countries\"]] #Let's see if it's arrangeddata.","cc67e58d":"data.index.name=\"index\"\ndata.tail()","50650f1c":"data.describe()","47c974f4":"data.dtypes #release_date is object ","1db0cf7f":"data.loc[:20,\"original_title\"] #First twenty movie","85ae0f7c":"df = data.head(7) \nmelted = pd.melt(frame=df,id_vars = \"original_title\",value_vars=[\"genres\"]) #we melted the df \nmelted","d8152302":"melted.pivot(index=\"original_title\",columns= \"variable\",values = \"value\") #We returned the melt data","ad9a460e":"overall_average_rating= sum(data.vote_average)\/len(data.original_title) # the average number of movies and total number of films \ndata[\"vote_level\"] = [ \"high_level\" if each>overall_average_rating else \"down_level\"  for each in data.vote_average] #We have defined a new column according to the average vote.\n\ndata.loc[:5,[\"original_title\",\"vote_level\",\"vote_average\"]] #let's  see that","f19b7441":"data3 = data[data.vote_average > 9] # we may find top 6 movie\ndata3.loc[:,[\"original_title\",\"vote_average\"]] #let's see top 6 movie ","3831aa8b":"data.original_language.unique() #see the tongues of films","81a22d86":"data.original_language.value_counts(dropna = False) #let's look at the frequency of the languages of the films","1167910e":"c=pd.Series([\"2\" if each == 0 else 1 for each in data.budget]) #See the invalid construction fees\nc.value_counts()","00cf7372":"average_cost_of_living = int(sum(data.budget)\/3766)\ndata.budget.replace([0],average_cost_of_living,inplace=True) #In our graphics, we are editing the data so that it does not cause anomalies.\ndata.tail()","f736202b":"d=pd.Series([\"2\" if each == 0 else 1 for each in data.revenue])\nd.value_counts()","e56d8c5a":"average = int(sum(data.revenue)\/3376)\ndata.revenue.replace([0], average, inplace = True)\ndata.tail()","f11d5513":"#I will draw a graphic that shows film popularity according to languages. We need to get the first data ready for this.\n#Seaborn\ndf=data.copy()\n\nunique = list(df.original_language.unique())\nlist_ratio=[]\nfor each in unique:\n    x= df[df[\"original_language\"] == each]\n    ratio_popularity=sum(x.popularity)\/len(x)\n    list_ratio.append(ratio_popularity)\n    \ndf2 = pd.DataFrame({\"language\":unique,\"ratio\":list_ratio})\nnew_index = (df2.ratio.sort_values(ascending = False)).index.values\nsorted_data= df2.reindex(new_index)\n\n#Visualization\nplt.figure(figsize = (20,12))\nsns.barplot(x= sorted_data[\"language\"],y  = sorted_data[\"ratio\"])\nplt.xticks(rotation= 90)\nplt.xlabel(\"Language\",fontsize=15)\nplt.ylabel(\"Popularity\",fontsize= 15)\nplt.title(\"Language and Filmin popularity\",fontsize= 20)","7a3d4ea5":"sorted_data.head(7)","304e6276":"#Seaborn\nfrom collections import Counter\n\ndf = data.genres.copy()\n\nlist_kind = df.str.split(\"|\")\na = []\nfor each in list_kind:\n    for i in each:\n        a.append(i)\n        \nc=[]\nfor each in a:\n    if each != \"\":\n         c.append(each)        \n        \nf= dict(Counter(c))\n\ndf3 = pd.DataFrame(list(f.items()),columns = [\"kind\",\"ratio\"])\nnew_index =( df3.ratio.sort_values(ascending=False)).index.values\nnew = df3.reindex(new_index)\n\n\n\nplt.figure( figsize = (15,10))\nsns.barplot(x=\"kind\",y=\"ratio\",data=new,palette = sns.cubehelix_palette(len(x)))\nplt.xticks(rotation = 90)\nplt.xlabel(\"Kind Of Movie\",fontsize=15)\nplt.ylabel(\"Count\",fontsize=15)\nplt.title(\"Number of movie types\",fontsize = 20)\n","15c76dc3":"new.head(7)","463d57a7":"#Seaborn\nplt.figure(figsize = (17,10))\n   \nsns.barplot(x = \"budget\", y = \"original_title\",data= data.head(10),color= \"red\", alpha=0.5,label =\"Budget\")\nsns.barplot(x = \"revenue\",y= \"original_title\", data=  data.head(10),color=\"green\",alpha=0.5,Label=\"Revenue\")\n\nplt.text(2500000000,8.5,\"Revenue\",color=\"green\",fontsize = 17 ,style =\"italic\")\nplt.text(2500000000,9,\"Budget\", color=\"red\",  fontsize = 17 ,style =\"italic\")\n\nplt.xlabel(\"\u0130ncome And Expensive\",fontsize= 15)\nplt.ylabel(\"Movie\",fontsize= 15)\nplt.title(\"The First 10 Movie income and expense\",fontsize = 20)\n","685eaaf5":"#Plotly\ntrace1 = go.Bar(\n    x = sorted_data.language,\n    y = sorted_data.ratio,\n    name = \"Ratio\",\n    marker = dict(\n        color = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],\n        colorscale = \"Bluered\")\n)\n\ndata1= [trace1]\nlayout = dict( \n    autosize = False,\n    width = 1378,\n    height = 720,\n    barmode = \"group\")\nfig  = dict (data = data1, layout = layout)\niplot ( fig)","e3a8a1ef":"#Seaborn\nf,ax1 =plt.subplots(figsize = (50,20))\n                    \nsns.pointplot(x =\"original_title\",y = \"runtime\",    data= data.head(50),color = \"red\")\nsns.pointplot(x =\"original_title\",y = \"popularity\", data= data.head(50), color = \"green\")\n\nplt.xticks(rotation = 85,fontsize = 25)\nplt.yticks(fontsize=25)\n\nax1.text(45,400,\"Runtime\",color =\"red\",fontsize= 35 , style =\"italic\")\nax1.text(45,385,\"Popularity\",color = \"green\",fontsize = 35,style =\"italic\")\n\nax1.set_xlabel(\"Original Title\",    fontsize = 30,color=\"blue\")\nax1.set_ylabel(\"Runtime and Popularity\",fontsize=30,color=\"blue\")\nax1.set_title(\"Runtime vs Popularity\",fontsize = 40,color=\"blue\")\n   \n  \n\nplt.grid()\n","ca4425c8":"#Plotly\nimport plotly.graph_objs as go \n\ndf = data.head(100).copy()\n\ntrace1 =go.Scatter(\n    x =df.index,\n    y = df.popularity,\n    mode =\"lines\",\n    name = \" Popularity\",\n    marker = dict(color = \"rgb(242, 99, 74,0.7)\"),\n    text = df.original_title\n)\ntrace2 = go.Scatter(\n    x = df.index,\n    y = df.runtime,\n    mode = \"lines + markers\",\n    name = \"Runtime\",\n    marker = dict( color = \"rgb(144, 211, 74,0.5)\"),\n    text = df.original_title\n)\ntrace3 = go.Scatter(\n    x = df.index,\n    y = df.vote_average,\n    mode = \"markers\",\n    name = \"Vote Averge\",\n    marker = dict(color = \"rgb(118, 144, 165)\"),\n    text = df.original_title\n)\ndata1=[trace1,trace2,trace3]\nlayout = dict(\n    title = \"Runtime vs Popularity\"\n)\nfig = dict ( data = data1 , layout = layout)\niplot(fig)","ca0a83df":"#Seaborn\nplt.figure( figsize = (15,5))\nsns.regplot( data.vote_average.head(200),data.vote_count.head(200), color = \"g\" )\nplt.show()","a9a913cc":"#Plotly\ndf = data.head(200).copy()\n\ntrace1 = go.Scatter(\n    x = df.index,\n    y = df.vote_average,\n    mode = \"markers\",\n    name = \"Vote Average\",\n    marker =dict( color = \"rgb(120, 171, 200,0)\"),\n    text = df.original_title\n)\ntrace2 = go.Scatter(\n    x = df.index,\n    y = df.vote_count,\n    mode =\"markers\",\n    name = \" Vote Count\",\n    marker =dict (\n        color = \"rgb(168, 229, 183)\",\n        size = 10,\n        line = dict(\n            color = \"rgb(251, 203, 251)\",\n            width = 2\n        )\n    ),\n    text = df.original_title\n)\ndata1 = [trace1,trace2]\nlayout = dict( title = \" Vote Average and Vote Count\")\nfig = dict ( data = data1 , layout = layout)\niplot( fig)","0fc9424d":"#Seaborn\nsns.jointplot(data.vote_average.head(100),data.vote_count.head(100),kind =\"reg\",size=8,color=\"grey\")\nplt.show()","5d02c9a9":"#Seaborn\nsns.jointplot(data.vote_average.head(100),data.vote_count.head(100),kind =\"kde\",size=8,color=\"g\")\nplt.show()","3368cd2b":"#Seaborn\ndf= data.loc[:,[\"vote_count\",\"popularity\"]]\nsns.pairplot(df)\nplt.show()","8f178f59":"#Plotly\nimport plotly.figure_factory as ff\ndata1 = data.loc[:,[\"vote_average\",\"vote_count\"]]\ndata1[\"index\"] = np.arange(1,len(data1)+1)\n\nfig = ff.create_scatterplotmatrix(data1,diag= \"box\", index = \"index\",colormap = \"Portland\",colormap_type = \"cat\",\n                                 height = 800,width=1200)\niplot(fig)","626d211b":"data1.head(7)","099fe14f":"#Matplotlib(I could not find a pie plot drawn with Seaborn.)\na=[]\nfor each in data.production_countries.str.split(\"|\"):\n    for i in each:\n        a.append(i)\n        \nb = dict(Counter(a))\n\nkeys=[]\nvalues=[]\n\nfor key,value in b.items() :\n    if value > 30 and key != \"\":\n        keys.append(key)\n        values.append(value)\n\n       \nlabels = keys\ncolors = sns.color_palette()\nexplode =[0,0,0,0,0,0,0,0,0,0,0,0,0]\nsizes= values\n    \nplt.figure(figsize = (15,15))\n\nplt.pie(sizes,explode = explode,labels=labels,colors = colors,autopct='%1.1f%%',textprops= {\"fontsize\": 10},shadow = False)\n\nplt.show()","66f328cb":"keys","9500e2fc":"values","c17c98a8":"#Plotly\ntrace1 = go.Pie(\n    labels = keys,\n    values = values,\n    name = \"Movie Percent\",\n    hoverinfo = \"label+percent+name\",\n    domain = dict ( x = [0,1]),\n    hole = .2\n)\ndata1 = [trace1]\nlayout = dict(title = \"Film Production Rates According To Countries\")\nfig = dict ( data = data1,layout= layout)\niplot(fig)","cc7ac2bb":"#Seaborn\nf,ax = plt.subplots(figsize = (10,10))\nsns.heatmap (data.corr(), annot = True,linewidths =0.75,linecolor = \"White\",fmt = \".2f\",ax = ax,center = -0.1)\nplt.show()","a8e7b4f9":"data.corr()","1ef8cbf0":"#Plotly(I just wanted to show you that you can draw)\ntrace1=go.Heatmap(\n    x=[\"vote_count\",\"vote_average\",\"runtime\"],\n    y=[\"vote_count\",\"vote_average\"],\n    z=[[1.00,0.31,0.27],[0.31,1.00,0.38]],\n    colorscale= \"viridis\"\n)\niplot([trace1])","f9701907":"#Plotly\ntrace1= go.Box(\n    x =data.vote_average,\n    name = \"Vote Average\",\n    marker = dict ( color = \"#666699\")\n)\n\niplot([trace1])","05b76e6f":"#Seaborn\nplt.figure(figsize = (20,9))\nsns.boxplot(x = \"original_language\", y =\"vote_average\",hue = \"vote_level\",data = data)\n\nplt.xlabel (\"Original language\", fontsize = 20,color = \"red\")\nplt.ylabel (\"Vote average\", fontsize = 20,color = \"green\")\nplt.xticks( rotation = 45,fontsize = 15)\nplt.yticks( fontsize = 15)\nplt.show()","b21088ae":"#Seaborn\nplt.figure( figsize = (15,9))\nsns.swarmplot(x = \"original_language\", y =\"vote_average\",hue = \"vote_level\",data = data.head(1000))\nplt.show()","1288406c":"#Seaborn\ndf = data.loc[:,[\"runtime\",\"popularity\"]].copy()\nplt.figure( figsize = (10,10))\nsns.violinplot(data=df , palette = sns.cubehelix_palette(dark = 0.8,light = 0.6,reverse = True),inner =\"points\")\nplt.show()","bf897496":"#Seaborn\ndates = [ str(each).split(\"-\")[0]  for each in data.release_date]\nplt.figure(figsize = (20,10))\nsns.countplot(dates)\nplt.xticks(rotation= 90,fontsize = 12)\nplt.xlabel(\"Movies release date\",fontsize =17)\nplt.ylabel(\"Number of movies\",fontsize = 17)\nplt.show()","5647fb11":"dates[:5]","614e4478":"#Seaborn\nsns.countplot(data.vote_level)\nplt.show()","21696699":"#Seaborn\nplt.figure(figsize = (20,10))\nsns.countplot(data.original_language)\nplt.xticks(rotation = 45,fontsize = 12)\nplt.show()","af545298":"#Plotly\ntrace1= go.Histogram(\n    x = dates,\n    opacity= 0.80,\n    marker = dict ( color = \"yellowgreen\")\n)\ndata1 = [trace1]\nfig =go.Figure( data = data1)\niplot(fig)","7353fa83":"#Plotly\ndata1= [{\n    \"x\":data.original_title,\n    \"y\":data.vote_average.head(25),\n    \"mode\":\"markers\",\n    \"marker\": {\n        \"color\":\"rgb(200,155,120)\",\n        \"size\":data.popularity.head(25),\n        \"showscale\":True\n    },\n    \"text\":data.original_title.head(25)\n}\n]\niplot(data1)","fb34ebf4":"#Plotly\nplt.subplots( figsize = (20,12))\nwordcould = WordCloud(\n    background_color= \"black\",\n    width= 2160,\n    height = 720,\n).generate(\",\".join(c))\nplt.imshow(wordcould)\nplt.axis(\"off\")\nplt.show()","9402cd1f":"c[:5]","f49a6044":"#Plotly\ntrace1=go.Scatter3d(\n    x =data.original_title.head(100),\n    y = data.vote_count.head(100),\n    z= data.vote_average.head(100),\n    mode = \"markers\",\n    marker= dict(\n        color= data.vote_average.head(100),\n        colorscale = \"Viridis\",\n        size = 10\n    )\n)\ndata1 = [trace1]\nlayout = go.Layout(\n    margin = dict (\n        l=0,\n        r=0,\n        b=0,\n        t=0\n    )\n)\n\nfig = dict( data = data1,layout = layout)\niplot(fig)","214d4c5c":"<a id=\"2\"><\/a>\n<h1> VISUALIZATION<\/h1>","61c00e24":"I will use both seaborn and plotly in visualization. I tried to use the same data to make comparison.\nThere are clues under the graphics to get a better idea of the data.","9304b308":"<a id=\"11\"><\/a>\n<h2> Others<\/h2>","185dfa15":"<a id=\"9\"><\/a>\n<h2>Box Graphs<\/h2>","359ca197":"<a id=\"8\"><\/a>\n<h2> Heatmap Graphs<\/h2>","4204ffd9":"<a id=\"5\"><\/a>\n<h2> Scatter Graphs(or similar)<\/h2>","174a42ba":"<a id=\"10\"><\/a>\n<h2>Histogram Graph And The Like<\/h2>","7761751f":"okey let's this data is analyz","d85a9a3f":"<a id=\"4\"><\/a>\n<h2> Line Graphs<\/h2>","f7772225":"Hello there,\nI used 2 different libraries to visualize this kernel: Seaborn and Plotly.\nYou can go to the graphics that I visualized the same or similar data as the links you see below. I tried to compare 2 libraries as much as possible.\n\nNote= This kernel is not at a professional level. My first visualization with  this libraries.\n\nThank you very much to [Kaan Can](http:\/\/www.kaggle.com\/kanncaa1)  for free udemy course  and  great kernels.","c7a50ff3":"<a id=\"6\"><\/a>\n<h2> Side-by-side and top-up graphics(or something else)<\/h2>","6ecdfef3":"# CONCLUSION\n\nThank you for reading. ","889f8d30":"<a id=\"3\"><\/a>\n<h2>Bar Graphs<\/h2>","fbb30d8e":"\u0130 want in table  that columns =\n* budget\n* original_title\n* original_language\n* popularity\n* genres\n* production_countries\n* release_date\n* vote_count\n* vote_average\n* revenue\n* runtime","6ff212f6":"<a id=\"1\"><\/a>\n# ANALYZ\u0130NG THE DATA","ab824a33":"<p>we can not use Genres and production_countries this way.<\/p>\n<p>we need regulate them<p>","5bac7169":"# \u0130NTRODUCT\u0130ON\n\n<br>Content:\n1. [ANALYZ\u0130NG THE DATA](#1)\n1. [VISUALIZATION](#2)\n   * [Bar Graphs](#3)\n   1. [Line Graphs](#4)\n   1. [ Scatter Graphs(or similar)](#5)\n   1. [Side-by-side and top-up graphics(or something else)](#6)\n   1. [Pie Graphs](#7)\n   1. [Heatmap Graphs](#8)\n   1. [Box Graphs](#9)\n   1. [Histogram Graph And The Like](#10)\n   1. [Other](#11)\n","fbc73c2c":"<a id=\"7\"><\/a>\n<h2>Pie Graphs<\/h2>"}}