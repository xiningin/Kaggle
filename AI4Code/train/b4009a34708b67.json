{"cell_type":{"d2b69fb9":"code","0b506f5c":"code","b8cc2eb4":"code","4db6b360":"code","bed67887":"code","d7f337bc":"code","7a985aa2":"code","a83ed88a":"code","20784feb":"code","5c7aef80":"code","2c630188":"code","35bad99c":"code","5c7b20b3":"code","f1b8052a":"code","becef5f5":"code","4748b0aa":"code","d89994c8":"code","840cd945":"code","8f2ad1bc":"code","99505303":"code","b00d0835":"code","ac9aeddb":"code","f303d65d":"code","ade35d72":"code","8a7dea57":"code","3b8364df":"code","4c9f7ea7":"code","47066bcc":"markdown","2c065ba6":"markdown","05dbf44d":"markdown","b3621c31":"markdown","dd78ce9e":"markdown","3210a972":"markdown","7d7c0c11":"markdown","0a5f88ca":"markdown","0423f7f9":"markdown"},"source":{"d2b69fb9":"import pandas as pd\nimport os\nimport json","0b506f5c":"df_train = pd.read_csv(\"\/kaggle\/input\/coleridgeinitiative-show-us-the-data\/train.csv\")","b8cc2eb4":"df_train.head()","4db6b360":"def clean_text(txt):\n    return re.sub('[^A-Za-z0-9]+', ' ', str(txt).lower()).strip()","bed67887":"set_of_data = set()","d7f337bc":"for data_name in df_train[\"cleaned_label\"]:\n    set_of_data.add(data_name.strip())\n    set_of_data.add(data_name.strip().lower())","7a985aa2":"len(set_of_data)","a83ed88a":"# set_of_data","20784feb":"prefix_test = \"\/kaggle\/input\/coleridgeinitiative-show-us-the-data\/test\/\"","5c7aef80":"test_path = []\nfor dirname, _, filenames in os.walk(prefix_test):\n    for filename in filenames:\n        # print(os.path.join(dirname, filename))\n        test_path.append(os.path.join(dirname, filename))","2c630188":"pub_list = []\npub_id = []\nfor p in test_path:\n    with open(p, \"r\") as f:\n        pub = json.loads(f.read())\n        pub_list.append(pub)\n        pub_id.append(p.split(\"\/\")[-1].split(\".\")[0])","35bad99c":"# pub_list[0]","5c7b20b3":"section_list = []\nfor pid, pub in zip(pub_id, pub_list):\n    for sec in pub:\n        section_list.append(sec)\n        sec[\"id\"] = pid","f1b8052a":"import re\n\ntxt = \"The rain in Spain\"\nx = re.search(\"x\", txt)\ny = re.search(\"Spain\", txt)\nprint(x) #this will print an object\nprint(y)\nprint(y.span())\nprint(txt[y.span()[0]:y.span()[1]])","becef5f5":"# section_list","4748b0aa":"for sec in section_list:\n    sec[\"clean_text\"] = clean_text(sec[\"text\"])","d89994c8":"import re","840cd945":"result = {}\nfor sec in section_list:\n    if not result.get(sec[\"id\"], None):\n        result[sec[\"id\"]] = \"\"","8f2ad1bc":"\nfor sec in section_list:\n    for data_name in set_of_data:\n        clean_text = sec[\"clean_text\"]\n        x = re.search(data_name, clean_text)\n        if x: \n            # print(sec[\"id\"], data_name)\n            if not result.get(sec[\"id\"], None) or result.get(sec[\"id\"], None) == \"\":\n                result[sec[\"id\"]] = data_name\n            else:\n                result[sec[\"id\"]] = result[sec[\"id\"]] + \"|\" + data_name\n\n\n                ","99505303":"# result","b00d0835":"pidlist = []\nexcerptlist = []\nfor pid in result.keys():\n    pidlist.append(pid)\n    excerptlist.append(result[pid])","ac9aeddb":"# excerptlist","f303d65d":"sort_excerptlist = []\nfor ex in excerptlist:\n    ex_str_list = ex.split(\"|\")\n    ex_str_list.sort()\n    n_ex = \"|\".join(ex_str_list)\n    sort_excerptlist.append(n_ex)","ade35d72":"# sort_excerptlist","8a7dea57":"result_pd = pd.DataFrame(data={\"Id\":pidlist, \"PredictionString\": sort_excerptlist})","3b8364df":"result_pd.head()","4c9f7ea7":"result_pd.to_csv(\"submission.csv\", index=False)","47066bcc":"Load Test data","2c065ba6":"# read data","05dbf44d":"# Read test data","b3621c31":"We create a dict of result. \n\nAll id must be include in submission.csv, including empty line with only id.\n\n","dd78ce9e":"We create clean text for each section list ","3210a972":"format into section","7d7c0c11":"# What is this ?","0a5f88ca":"We sort excerpt by alphabet value","0423f7f9":"In this baseline, we match exactly. "}}