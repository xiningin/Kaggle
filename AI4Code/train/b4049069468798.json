{"cell_type":{"ba858c79":"code","12131bdd":"code","8a01aed2":"code","72d02a9d":"code","25722553":"code","1eae3117":"code","f9e95055":"code","17baea28":"code","e92d7aa5":"code","5850608e":"code","803a857f":"code","1202c4a0":"code","28e27950":"code","d0477648":"code","c9d795af":"code","59b8f42a":"code","b7f625b9":"code","2a4b9c72":"code","6d9550de":"code","988c2208":"code","becf4a2b":"code","71bfd26e":"code","ed092d4e":"code","d05392a7":"code","4a2f2aad":"markdown","f68c6a8e":"markdown","e62a606b":"markdown","52a33ef2":"markdown","87d65681":"markdown","38319ed0":"markdown","9436d95b":"markdown","31020c74":"markdown","c8d259f6":"markdown","332a3e14":"markdown","8a7e5acf":"markdown","7f11700e":"markdown","20596ea5":"markdown","8ce4f644":"markdown","7238b12f":"markdown","45acb36a":"markdown","71d1fe9b":"markdown","2bc378a8":"markdown","acd62764":"markdown"},"source":{"ba858c79":"!ls ..\/input\/google-smartphone-decimeter-challenge\/train","12131bdd":"!ls ..\/input\/google-smartphone-decimeter-challenge\/test","8a01aed2":"!ls ..\/input\/google-smartphone-decimeter-challenge\/train\/2020-05-14-US-MTV-1","72d02a9d":"!ls ..\/input\/google-smartphone-decimeter-challenge\/train\/2020-05-14-US-MTV-1\/Pixel4","25722553":"!ls ..\/input\/google-smartphone-decimeter-challenge\/train\/2020-05-14-US-MTV-1\/Pixel4\/supplemental","1eae3117":"!ls ..\/input\/google-smartphone-decimeter-challenge\/metadata","f9e95055":"!pip install pynmea2\nimport glob\nimport itertools\nimport json\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport geopandas as gpd\nfrom geopandas import GeoDataFrame\nimport geoplot as gplt\nimport matplotlib.pyplot as plt\nimport numpy as np \nimport pandas as pd\nimport plotly.express as px\nimport pynmea2\nimport requests\nimport seaborn\nfrom shapely.geometry import Point, shape\nimport shapely.wkt\n\n%matplotlib inline","17baea28":"train_file=pd.read_csv('..\/input\/google-smartphone-decimeter-challenge\/baseline_locations_train.csv')\ntrain_file.head()","e92d7aa5":"test_file=pd.read_csv('..\/input\/google-smartphone-decimeter-challenge\/baseline_locations_test.csv')\ntest_file.head()","5850608e":"print(f'Number of unique phone names in training data: {train_file[\"phoneName\"].nunique()}')\nprint(f'Number of unique phone names in test data: {test_file[\"phoneName\"].nunique()}')\nprint(f'Number of unique collections in training data: {train_file[\"collectionName\"].nunique()}')\nprint(f'Number of unique collections in test data: {test_file[\"collectionName\"].nunique()}')\nprint(f'Number of unique phones in training data: {train_file[\"phone\"].nunique()}')\nprint(f'Number of unique phones in test data: {test_file[\"phone\"].nunique()}')","803a857f":"train_file[\"phone\"].value_counts()","1202c4a0":"test_file[\"phone\"].value_counts()","28e27950":"train_file.info()","d0477648":"sample_submission=pd.read_csv('..\/input\/google-smartphone-decimeter-challenge\/sample_submission.csv')\nsample_submission.head()","c9d795af":"derived=pd.read_csv('..\/input\/google-smartphone-decimeter-challenge\/train\/2020-05-14-US-MTV-1\/Pixel4\/Pixel4_derived.csv')\nderived.head()","59b8f42a":"derived.info()","b7f625b9":"ground_truth=pd.read_csv('..\/input\/google-smartphone-decimeter-challenge\/train\/2020-05-14-US-MTV-1\/Pixel4\/ground_truth.csv')\nground_truth.head()","2a4b9c72":"ground_truth.info()","6d9550de":"# from https:\/\/www.kaggle.com\/sohier\/loading-gnss-logs\ndef gnss_log_to_dataframes(path):\n    print('Loading ' + path, flush=True)\n    gnss_section_names = {'Raw','UncalAccel', 'UncalGyro', 'UncalMag', 'Fix', 'Status', 'OrientationDeg'}\n    with open(path) as f_open:\n        datalines = f_open.readlines()\n\n    datas = {k: [] for k in gnss_section_names}\n    gnss_map = {k: [] for k in gnss_section_names}\n    for dataline in datalines:\n        is_header = dataline.startswith('#')\n        dataline = dataline.strip('#').strip().split(',')\n        # skip over notes, version numbers, etc\n        if is_header and dataline[0] in gnss_section_names:\n            gnss_map[dataline[0]] = dataline[1:]\n        elif not is_header:\n            datas[dataline[0]].append(dataline[1:])\n\n    results = dict()\n    for k, v in datas.items():\n        results[k] = pd.DataFrame(v, columns=gnss_map[k])\n    # pandas doesn't properly infer types from these lists by default\n    for k, df in results.items():\n        for col in df.columns:\n            if col == 'CodeType':\n                continue\n            results[k][col] = pd.to_numeric(results[k][col])\n\n    return results","988c2208":"gnss=gnss_log_to_dataframes('..\/input\/google-smartphone-decimeter-challenge\/train\/2020-05-14-US-MTV-1\/Pixel4\/Pixel4_GnssLog.txt')\nprint(gnss.keys())","becf4a2b":"gnss['Raw'].head()","71bfd26e":"#from https:\/\/www.kaggle.com\/nayuts\/let-s-visualize-dataset-to-understand\ndef visualize_trafic(df, center, zoom=9):\n    fig = px.scatter_mapbox(df,\n                            \n                            # Here, plotly gets, (x,y) coordinates\n                            lat=\"latDeg\",\n                            lon=\"lngDeg\",\n                            \n                            #Here, plotly detects color of series\n                            color=\"phoneName\",\n                            labels=\"phoneName\",\n                            \n                            zoom=zoom,\n                            center=center,\n                            height=600,\n                            width=800)\n    fig.update_layout(mapbox_style='stamen-terrain')\n    fig.update_layout(margin={\"r\": 0, \"t\": 0, \"l\": 0, \"b\": 0})\n    fig.update_layout(title_text=\"GPS trafic\")\n    fig.show()","ed092d4e":"#Visualizing the baseline locations for the training data\ndf_sample_trail_gt = pd.read_csv(\"..\/input\/google-smartphone-decimeter-challenge\/baseline_locations_train.csv\")\ncenter = {\"lat\":37.423576, \"lon\":-122.091232}\nvisualize_trafic(df_sample_trail_gt, center)","d05392a7":"#Visualizing the baseline locations for the training data\ndf_sample_trail_test = pd.read_csv(\"..\/input\/google-smartphone-decimeter-challenge\/baseline_locations_test.csv\")\ncenter = {\"lat\":37.423576, \"lon\":-122.091232}\nvisualize_trafic(df_sample_trail_test, center)","4a2f2aad":"![image.png](attachment:9d0f6540-fc1c-4922-a7a0-2062244cc477.png)\n\n<a href =\"https:\/\/www.kaggle.com\/google\/android-smartphones-high-accuracy-datasets?select=ION+GNSS+2020+Android+Raw+GNSS+Measurement+Datasets+for+Precise+Positioning.pdf\" title = \"Message types in GNSSLog\" style = \"font-size:20px,color: dimgrey, text-align:left,font-family:serif\">Image Source: Message types in GNSSLog <\/a>","f68c6a8e":"local estimate of GPS time (signal arrival time) =\nTimeNanos - (FullBiasNanos + BiasNanos).\n\nMeasurements should be discarded if:\n* FullBiasNanos is zero or invalid\n* Arrival time is negative or unrealistically large\n* TimeNanos is empty\n* BiasUncertaintyNanos is too large\n* State is neither STATE_TOW_DECODED nor STATE_TOW_KNOWN\n* ReceivedSvTimeUncertaintyNanos is high\n* AccumulatedDeltaRangeState violates this condition:\n * ADR_STATE_VALID == 1 &\n * ADR_STATE_RESET == 0 &\n * ADR_STATE_CYCLE_SLIP == 0\n* AccumulatedDeltaRangeUncertaintyMeters is too large\n","e62a606b":"<a id=\"2\"><\/a>\n# Let's explore the data a bit!","52a33ef2":"GNSS logs contain 5 types of messages.","87d65681":"There are no missing values,lattitude and longitude are float values.Also,from the data description, millisSinceGpsEpoch is \"an integer number of milliseconds since the GPS epoch (1980\/1\/6 midnight UTC)","38319ed0":" As we can see, all the tracks are running along almost the same roads in both training and test data with the exception of a few outliers to the south-east of these paths","9436d95b":"There are no null values ","31020c74":"Let's first understand how data is structured. \nThere are 3 main folders \n1. Metadata\n2. test\n3. train \n\nand 3 files\n1. baseline_locations_test.csv- contains the coordinates estimated using a simple approach\n2. baseline_locations_train.csv\n3. sample_submission.csv\n\nLet's first look at the test and train folders. \n* Both these folders contain sub-folders. These subfolders have been named according to the following format-\"YYYY-MM-DD-{Country code in 2 letters}-{Region}-{Collection index}\". For eg. 2020-05-14-US-MTV-1. The phones were mounted on the dashboard, while the \"ground truth\" gps location was collected by a much larger gps antenna in the back seat.\n\n","c8d259f6":"All the phones have enough data and especially in the test set.","332a3e14":"There are no null values and the constellationType values can be mapped to their actual names through the constellation_type_mapping.csv given in metadata","8a7e5acf":"This notebook focuses on the EDA and visualization of the data. The goal of this competition is to compute location (latDeg and lngDeg) down to decimeter or even centimeter resolution, if possible for each test phone and time. So, our target variables are latDeg and longDeg.\n\n## Contents\n* [Overview of the data](#1)\n* [Let's explore the data a bit](#2)\n   * [Reading GNSS logs](#2-1)\n* [Visualizing the tracks](#3)\n\n","7f11700e":"<a id=\"2-1\"><\/a>\n**Reading GNSS logs**","20596ea5":"* Each of these subfolders contain a few subfolders which have the name of a phone which was used for getting the measurements. ","8ce4f644":"* The file \"Phonename_GnssLog.txt\" contains the logs or measurements as generated by the GnssLogger App.\n* The file \"Phonename_derived.csv\" contains GNSS intermediate values derived from raw GNSS measurements, provided for convenience.\n* the file \"groundtruth.csv\" contains reference locations at expected timestamps, i.e. the actual locations at the given timestamps.\n* The sub-folder \"supplemental\" contains .20o\/.21o and .nmea files whic contain equivalent data to the GNSS logs in other formats used by the GPS community. Since .nmea file is equivalent to the groundtruth it's not present in the test set.","7238b12f":"* Each of the phone subfolders contain a sub-folder \"supplemental\" and 3 files in case of train folder and 2 in case of test folder.","45acb36a":"<a id=\"1\"><\/a>\n# OVERVIEW OF THE DATA","71d1fe9b":"In the NMEA file, each location is described jointly by a pair of GGA and RMC sentences, as depicted in the figure given below\n![image.png](attachment:989319fe-a204-4748-96ac-6ac5968e84ab.png)","2bc378a8":"<a id=\"3\"><\/a>\n# VISUALIZING THE TRACKS","acd62764":"* Metadata contains 3 files:- all three files are used as mappings for the various variables in the GNSS measurements."}}