{"cell_type":{"191502e3":"code","d26fd908":"code","d41d8bfd":"code","f541c0f7":"code","2b100606":"code","a28e3bd5":"code","9e301889":"code","bb22b30c":"code","8ef71459":"code","5d5e3cd1":"code","ae61a715":"code","6c1d9fac":"code","5997a8c3":"code","c99f4409":"code","79ee04ff":"code","5f4796e0":"code","7ab02c5c":"code","46e6e26c":"code","06e75146":"code","8b6fbc69":"code","2f346c72":"code","6826add7":"code","34621fc4":"code","6dd8c522":"code","399f7613":"code","6b6eacf7":"code","27b7222d":"code","5e35d464":"code","6a343147":"code","e2b41996":"code","ac139a70":"code","c2a3e5cf":"code","2ddab421":"code","ec4506d1":"code","98e45c76":"code","84138796":"code","cef9cfea":"code","3fefa797":"code","6596986b":"markdown","cfb707be":"markdown","075d7d39":"markdown","dc75738e":"markdown","203fbd61":"markdown","7749b50a":"markdown","f5eada70":"markdown","b8add6bb":"markdown","305cb82a":"markdown","592537c8":"markdown","78234fa5":"markdown","e795d4aa":"markdown","c99581c8":"markdown"},"source":{"191502e3":"import math\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport re\nimport seaborn as sns\nimport scipy\nimport shutil\nimport time\nimport warnings\n\nfrom datetime import date, datetime\nfrom git import Repo\nfrom plotly.subplots import make_subplots\nfrom scipy import stats\nfrom tqdm import tqdm\nfrom typing import Dict, List, Tuple\n\nDate = datetime.date","d26fd908":"# Progress bar features.\ntqdm.pandas()\n\n# Make random numbers and Python hashes consistent.\nnp.random.seed(0)\n%env PYTHONHASHSEED=0\n\nwarnings.filterwarnings(\"ignore\")","d41d8bfd":"def get_date(seconds_since_epoch):\n    return time.strftime(\"%a %d %b %Y\", time.gmtime(seconds_since_epoch))","f541c0f7":"latest_data = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/nychealth\/coronavirus-data\/master\/data-by-modzcta.csv\")","2b100606":"latest_data","a28e3bd5":"latest_data = latest_data.set_index('MODIFIED_ZCTA')\nlatest_data","9e301889":"REPO_NAME = 'repo'","bb22b30c":"repo = Repo.clone_from('https:\/\/github.com\/nychealth\/coronavirus-data.git', REPO_NAME, branch='master')\nrepo","8ef71459":"# Master branch commit\nhead_commit = repo.commit('HEAD')\nhead_commit","5d5e3cd1":"get_date(head_commit.committed_date)\nhead_commit.committed_date","ae61a715":"# The first date where the data is available is May 18:\n# https:\/\/github.com\/nychealth\/coronavirus-data\/commit\/50e60ee5c8f36198abc9b697761128dd29f10fc9.\nFIRST_DATE = date(2020, 5, 18)\nLATEST_DATE = date.today()\n\nMAX_NUM_COMMITS_BACK = (LATEST_DATE - FIRST_DATE).days + 1\nprint(\"Number of commits to process \/ x-points: \", MAX_NUM_COMMITS_BACK)\n\n# Note: The date is brittly fetched as the commit date is not necessarily the date the CSV \n# info is for.\n# It would be better if they had METADATA to read in the file.\ndates = pd.date_range(end=get_date(head_commit.committed_date), periods=MAX_NUM_COMMITS_BACK)\n\n# Verify that early dates appear first, and later dates appear later.\nfor i in range(len(dates) - 1):\n    assert(dates[i] < dates[i + 1])\n\ndates","6c1d9fac":"FILE = 'https:\/\/raw.githubusercontent.com\/nychealth\/coronavirus-data\/%s\/data-by-modzcta.csv'\ndata_by_date = []\nfor i in range(MAX_NUM_COMMITS_BACK):\n    # Read data from recent commits, starting with the oldest.\n    past_commit = repo.commit('HEAD~' + str(MAX_NUM_COMMITS_BACK - i - 1))\n    data_from_one_date = pd.read_csv(FILE % past_commit.hexsha)\n    reindexed_data_by_zip = data_from_one_date.set_index('MODIFIED_ZCTA')\n    data_by_date.append(reindexed_data_by_zip)\n    ","5997a8c3":"full_series = pd.Series(data_by_date, index=dates)\nlen(full_series.index)","c99f4409":"ZIPS = [\n    # UWS - 59th-76th St.\n    10023,\n    # UWS - 76th to 91st St.\n    # 10024,\n    # 48th-59th St, West side to 5th Ave.\n    10019,\n    # Times Sq\n    10036,\n    # LIC near Court Sq.\n    # 11101,\n    # Washington Sq Park.\n    # 10012,\n    # Chelsea.\n    # 10011\n    # East Village\n    10009\n]","79ee04ff":"# Inspect testing rates.\ndef ComputeCovidTestsPerDay(total_covid_tests_by_date: List[Tuple[Date, int]]) -> List[int]:\n    test_counts = [date_and_count[1] for date_and_count in total_covid_tests_by_date]\n    tests_per_day = []\n    for i in range(len(test_counts) - 1):\n        tests_per_day.append(test_counts[i + 1] - test_counts[i])\n    return tests_per_day\n\n# Currently not needed. May use in the future.\ndef LinearlyExtrapolate():\n    # Column was only added in mid-June, so we linearly extrapolate backwards.\n    pass\n    \n    # TODO: linear model.\n    # Ensure we have this many entries.\n    NUM_ENTRIES_EXPECTED = (LATEST_DATE - FIRST_DATE).days\n    xi = range(len(pd.date_range(FIRST_DATE, LATEST_DATE)))\n    print('xi:', xi)\n    yi = [date_and_count[1] for date_and_count in total_covid_tests_by_date]\n    print('yi:', yi)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(x=xi, y=yi)\n    line = slope*xi + intercept\n    print(line)\n\n# Just for debugging.\ndef TestCovidTestPerDayFunctions():\n    zcta = 10019\n    total_covid_tests_by_date: List[Tuple[Date, int]] = []\n    for date in dates:\n        if 'TOTAL_COVID_TESTS' in full_series[date].columns:\n            total_covid_tests_by_date.append((date, full_series[date].at[zcta, 'TOTAL_COVID_TESTS']))\n    tests_per_day: List[int] = ComputeCovidTestsPerDay(total_covid_tests_by_date)\n\n    xi = range(len(tests_per_day))\n    print('xi:', xi)\n    yi = tests_per_day\n    print('yi:', yi)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(x=xi, y=yi)\n    line = slope*xi + intercept\n    print('line y-values:', line)\n    print('slope:', slope)\n\n    fig = make_subplots(rows=1, cols=2)\n\n    y_cumulative = [date_and_count[1] for date_and_count in total_covid_tests_by_date]\n    fig.append_trace(go.Scatter(\n        name='Cumulative Tests',\n        x=list(range(len(y_cumulative))),\n        y=y_cumulative,\n        mode='markers',\n    ), row=1, col=1)\n\n    fig.append_trace(go.Scatter(\n        name='Covid Tests Per Day',\n        x=list(range(len(tests_per_day))),\n        y=tests_per_day,\n        mode='markers',\n    ), row=1, col=2)\n\n    fig.update_layout(height=400, width=700, title_text=str(zcta) + \" Test Count By Day\")\n    fig.show()\n    return px.scatter(x=list(range(len(tests_per_day))), y=tests_per_day, trendline='ols')\n\nTestCovidTestPerDayFunctions()","5f4796e0":"def ComputeCaseCountDeltasForZip(case_counts: List[int]) -> List[int]:\n    deltas = []\n    for i in range(len(case_counts) - 1):  # One fewer because these are deltas.\n        # Get deltas between case counts. Use max() to clamp any negative numbers to 0 \n        # (negative numbers indicate data corrections).\n        deltas.append(max(0, case_counts[i + 1] - case_counts[i]))\n    return deltas","7ab02c5c":"def BuildZipToStatsDict(zctas) -> Tuple[Dict[str, int], Dict[str, int],\n                                        Dict[str, int], Dict[str, int]]:\n    zip_to_case_counts = {}\n    zip_to_case_rates = {}\n    zip_to_case_count_deltas = {}\n    zip_to_covid_tests_per_day = {}\n    \n    for zcta in zctas:\n        case_counts_for_zip = []\n        case_rates_for_zip = []\n        total_covid_tests_by_date: List[Tuple[Date, int]] = []\n        for date in dates:\n            case_counts_for_zip.append(full_series[date].at[zcta, 'COVID_CASE_COUNT'])\n            case_rates_for_zip.append(full_series[date].at[zcta, 'COVID_CASE_RATE'])\n            \n            if 'TOTAL_COVID_TESTS' in full_series[date].columns:\n                total_covid_tests_by_date.append((date, full_series[date].at[zcta, 'TOTAL_COVID_TESTS']))\n        \n        zip_to_case_counts[zcta] = case_counts_for_zip\n        zip_to_case_rates[zcta] = case_rates_for_zip\n        \n        zip_to_case_count_deltas[zcta] = ComputeCaseCountDeltasForZip(case_counts_for_zip)\n        zip_to_covid_tests_per_day[zcta] = ComputeCovidTestsPerDay(total_covid_tests_by_date)\n        \n    return (zip_to_case_counts, zip_to_case_rates, zip_to_case_count_deltas, zip_to_covid_tests_per_day)\n\n# The Central Indexed Data.\nzip_to_case_counts, zip_to_case_rates, zip_to_case_count_deltas, zip_to_covid_tests_per_day = BuildZipToStatsDict(ZIPS)","46e6e26c":"def BasicGraphZip(zcta):\n    date_and_case_count_series = pd.Series(zip_to_case_counts[zcta], index=dates)\n    date_and_case_rate_series = pd.Series(zip_to_case_rates[zcta], index=dates)\n\n    combined_df = pd.concat([date_and_case_count_series, date_and_case_rate_series], axis=1)\n    combined_df.plot(subplots=True, grid=True, \n                     title=['Cumulative COVID Case Count for Zip ' + str(zcta), \n                            'Cumulative COVID Case Rate per 100,000 people '],\n                     legend=False)\n\nfor zcta in ZIPS:\n    BasicGraphZip(zcta)","06e75146":"def GraphDeltas(case_count_deltas: List[int], tests_per_day: List[int], ax1, ax2, ax3):\n    ## ax1: Bar Plot\n    \n    # First create a series indexed by date.\n    assert(len(case_count_deltas) >= 20)\n    start_index = len(case_count_deltas) - 20  # Inspect last n days to reduce bar plot size.\n    \n    # Skip 1 value because delta means we're counting the \"spaces in between\" counts.\n    deltas_to_use = case_count_deltas[start_index:]\n    delta_series = pd.Series(deltas_to_use, index=dates[start_index + 1:])\n    \n    delta_series.plot(kind='bar', ax=ax1)\n    \n    ax1.set(yticks=range(max(deltas_to_use) + 2))\n    \n    ## ax2: Linear Plot\n    delta_df = pd.DataFrame(case_count_deltas, columns=['count'])\n    # Add an artificial x column describing the index.\n    delta_df['x'] = range(len(delta_df.index))\n    \n    # Labels.\n    (r, p) = stats.pearsonr(delta_df['x'], delta_df['count'])\n    r2 = np.round(r**2, 2)\n    r = np.round(r, 2)\n    p = np.round(p, 2)\n    text = 'r=%s, r^2=%s, p=%s' % (r, r2, p)\n    ax2.text(.2, .8, # x, y relative position\n             text, \n             transform=ax2.transAxes,\n             fontsize=14)\n    \n    sns.regplot(data=delta_df, x='x', y='count', fit_reg=True, ci=90, ax=ax2)\n    ax2.set(yticks=range(max(case_count_deltas) + 2))\n    \n    ## ax3: Linear Plot for Tests per Day.\n    tests_per_day_df = pd.DataFrame(tests_per_day, columns=['test_count'])\n    tests_per_day_df['x'] = range(len(tests_per_day_df))\n    \n    # Labels.\n    (r, p) = stats.pearsonr(tests_per_day_df['x'], tests_per_day_df['test_count'])\n    r2 = np.round(r**2, 2)\n    r = np.round(r, 2)\n    p = np.round(p, 2)\n    text = 'r=%s, r^2=%s, p=%s' % (r, r2, p)\n    ax3.text(.2, .8, # x, y relative position\n             text, \n             transform=ax3.transAxes,\n             fontsize=14)\n    \n    sns.regplot(data=tests_per_day_df, x='x', y='test_count', fit_reg=True, ci=90, ax=ax3)\n    \n\ndef GatherCombinedZipData(zip_to_metric: Dict[int, List]):\n    arbitrary_entry = ZIPS[0]\n    result = [0] * len(zip_to_metric[arbitrary_entry])\n    print('Start: ', result)\n    for zcta in ZIPS:\n        print('Other: ', zip_to_metric[zcta])\n        for i in range(len(zip_to_metric[zcta])):\n            result[i] += zip_to_metric[zcta][i]\n    return result\n\nPREV_ZIPS_COMBINED_KEY = 'Previous Zips Combined'\n\nprint('Combining case count data.')\ncombined_zip_case_count_data = GatherCombinedZipData(zip_to_case_count_deltas)\nprint('Combined:', combined_zip_case_count_data)\nzip_to_case_count_deltas[PREV_ZIPS_COMBINED_KEY] = combined_zip_case_count_data\n\nprint()\n\nprint('Combining test count data.')\ncombined_test_count_data = GatherCombinedZipData(zip_to_covid_tests_per_day)\nprint('Combined:', combined_test_count_data)\nzip_to_covid_tests_per_day[PREV_ZIPS_COMBINED_KEY] = combined_test_count_data\n\nfor zcta in ZIPS + [PREV_ZIPS_COMBINED_KEY]:\n    fig, (ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=3, figsize=(14,5))\n    fig.suptitle(str(zcta) + ' Stats')\n\n    # TODO: parameterize \"num-days-back\".\n    GraphDeltas(zip_to_case_count_deltas[zcta], zip_to_covid_tests_per_day[zcta], ax1, ax2, ax3)\n    \n    ax1.set_title('Case Count Change')\n\n    ax2.set_title('Linear plot of Case Count Change')\n    ax2.set(xlabel='days')\n\n    ax3.set_title('Linear plot of Covid Tests Administered')\n    ax3.set(xlabel='days')","8b6fbc69":"# Ensure the number of entries for each zip is identical.\nnum_entries = len(zip_to_case_count_deltas[next(iter(zip_to_case_count_deltas))])\nfor zip_code in zip_to_case_count_deltas:\n    assert(len(zip_to_case_count_deltas[zip_code]) == num_entries)","2f346c72":"fig = make_subplots(rows=1, cols=1)\n\nfig.append_trace(go.Bar(\n    name='10023',\n    x=pd.date_range(FIRST_DATE, LATEST_DATE),\n    y=zip_to_case_count_deltas[10023],\n#     mode='markers',\n), row=1, col=1)\n\n# xi = range(len(pd.date_range(FIRST_DATE, LATEST_DATE)) - 1)\n# slope, intercept, r_value, p_value, std_err = stats.linregress(x=xi, y=zip_to_case_count_deltas[10023])\n# line = slope*xi + intercept\n# print(line)\n\n# fig.append_trace(go.Scatter(\n#     name='trend line',\n#     x=list(xi),\n#     y=line\n# ), row=1, col=1)\n\nfig.append_trace(go.Bar(\n    name='10019',\n    x=pd.date_range(FIRST_DATE, LATEST_DATE),\n    y=zip_to_case_count_deltas[10019],\n#     mode='markers',\n), row=1, col=1)\n\n\nfig.update_layout(height=600, width=600, title_text=\"Bar Graphs of Case Counts\", yaxis = {'dtick': 1})\n","6826add7":"# Gather case count data for one zip code.\nTARGET_ZIP = 10023\nfull_series[dates[0]].at[TARGET_ZIP, 'COVID_CASE_COUNT']","34621fc4":"case_counts_for_zip = []\nfor date in dates:\n    case_counts_for_zip.append(full_series[date].at[TARGET_ZIP, 'COVID_CASE_COUNT'])\ncase_counts_for_zip","6dd8c522":"case_rates_for_zip = []\nfor i, date in enumerate(dates):\n    case_rates_for_zip.append(full_series[date].at[TARGET_ZIP, 'COVID_CASE_RATE'])","399f7613":"date_and_case_count_series = pd.Series(case_counts_for_zip, index=dates)\ndate_and_case_rate_series = pd.Series(case_rates_for_zip, index=dates)\n\ncombined_df = pd.concat([date_and_case_count_series, date_and_case_rate_series], axis=1)\ncombined_df","6b6eacf7":"combined_df.plot(subplots=True, grid=True, title=['Cumulative COVID Case Count for Zip ' + str(TARGET_ZIP),\n                                                  'Cumulative COVID Case Rate per 100,000 people '])","27b7222d":"date_and_case_rate_series.plot(grid=True, title='COVID Case Rate per 100,000 people', subplots=True)","5e35d464":"date_and_case_count_series.plot(grid=True, title='COVID Case Counts for ' + str(TARGET_ZIP)) #, yticks=range(530,580,5))","6a343147":"case_counts_for_zip","e2b41996":"# Get deltas between case counts. Use max() to clamp any negative numbers to 0\n# (negative numbers indicate data corrections).\ndeltas = []\nfor i in range(len(case_counts_for_zip) - 1):\n    deltas.append(max(0, case_counts_for_zip[i + 1] - case_counts_for_zip[i]))\ndeltas","ac139a70":"# First we havea Series indexed by date. There are no column names in Series.\nstart = 10\n# Skip 1 value because delta implies -1 data point.\ndelta_series = pd.Series(deltas[start:], index=dates[start + 1:])\ndelta_series.plot(kind='bar')","c2a3e5cf":"# Instead of being indexed by date, reset the index to the default whole numbers.\ndelta_df = delta_series.to_frame()\ndelta_df = delta_df.reset_index()\ndelta_df","2ddab421":"delta_df = delta_df.rename(columns={'index': 'date', 0: 'count'})\ndelta_df.index","ec4506d1":"print(len(delta_df.index))\ndelta_df['x'] = range(len(delta_df.index))\ndelta_df","98e45c76":"# Linear regression\ng = sns.lmplot(data=delta_df, x='x', y='count')\ng = g.set(yticks=range(4))\ntype(g)","84138796":"# Plot with Pearson's correlation coefficient.\ndef r2(x, y):\n    r, p_value = stats.pearsonr(x, y)\n    return r**2\n\ndef r(x, y):\n    return stats.pearsonr(x, y)[0]\n\ndef r(x, y):\n    r, p_value = stats.pearsonr(x, y)\n    return (r, p_value)\n\nsns.jointplot(data=delta_df, x='x', y='count', kind=\"reg\", stat_func=r2, xlim=(0,30), ylim=(0,5))","cef9cfea":"!ls -la","3fefa797":"# Clean-up\ndir_to_delete = REPO_NAME\ntry:\n    shutil.rmtree(dir_to_delete)\n    print('Deleted', dir_to_delete)\nexcept OSError as e:\n    print('Error: %s : %s' % (dir_to_delete, e.strerror))","6596986b":"# Introduction","cfb707be":"## Load and inspect latest data","075d7d39":"Read data from https:\/\/github.com\/nychealth\/coronavirus-data\/blob\/HEXSHA\/data-by-modzcta.csv where HEXSHA is of the form **b6ae2b94fb0f32283201433147a6f07d0aa14815**. This is the **hexsha** property of the commit.","dc75738e":"## Install and import libraries","203fbd61":"# Scratch Notes \/ Playground","7749b50a":"# Example debugging - looking at one zip","f5eada70":"# Main Code: Inspect Specific Zip Code Areas","b8add6bb":"## Load historical data from GitHub","305cb82a":"## Utils","592537c8":"# Clean-up","78234fa5":"# Setup","e795d4aa":"## Goals\n\n1. **Provide an example of analyzing Covid trends by Zip Code for NYC.**\n2. **Provide simple examples of reading GitHub data from https:\/\/github.com\/nychealth\/coronavirus-data using GitPython.**\n\nNote: Technically, the data is organized by [Zip Code Tabulation Area (ZCTA)](https:\/\/github.com\/nychealth\/coronavirus-data#geography-zip-codes-and-zctas).\nAlso, \"rates per 100,000 people\" are calculated using interpolated population estimates to be meaningful when interpreted in a ZCTA-context ([info](https:\/\/github.com\/nychealth\/coronavirus-data#rates-per-100000-people)).\n\nData sources: https:\/\/github.com\/nychealth\/coronavirus-data\/blob\/master\/data-by-modzcta.csv","c99581c8":"# Experimental\n\nMore advanced plotting with plotly."}}