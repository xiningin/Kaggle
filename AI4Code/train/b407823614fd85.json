{"cell_type":{"eb6e1c3c":"code","6f19f021":"code","0ed5cd4b":"code","76f6cb4a":"code","724e031d":"code","17e23627":"code","137f1df5":"code","beb6ada4":"code","64d889d1":"code","e65ece26":"code","9e815f37":"code","5416411b":"code","1e4fb0d8":"code","1184b43a":"markdown","7b94ee32":"markdown","56cac4fb":"markdown","87b0f76a":"markdown","6aae8823":"markdown","b8485e10":"markdown","236b0893":"markdown","b1960593":"markdown","b674761d":"markdown","1883d950":"markdown","a2296800":"markdown","912edc70":"markdown","dcf5f2b7":"markdown"},"source":{"eb6e1c3c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom keras.models import Model\nfrom keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing import sequence\nfrom keras.utils import to_categorical\nfrom keras.callbacks import EarlyStopping\n%matplotlib inline","6f19f021":"df = pd.read_csv('..\/input\/spam.csv',delimiter=',',encoding='latin-1')\ndf.head()","0ed5cd4b":"df.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'],axis=1,inplace=True)\ndf.info()","76f6cb4a":"sns.countplot(df.v1)\nplt.xlabel('Label')\nplt.title('Number of ham and spam messages')","724e031d":"X = df.v2\nY = df.v1\nle = LabelEncoder()\nY = le.fit_transform(Y)\nY = Y.reshape(-1,1)\nY[:4]","17e23627":"X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.15)","137f1df5":"max_words = 1000\nmax_len = 150\ntok = Tokenizer(num_words=max_words)\ntok.fit_on_texts(X_train)\nsequences = tok.texts_to_sequences(X_train)\nsequences_matrix = sequence.pad_sequences(sequences,maxlen=max_len)","beb6ada4":"def RNN():\n    inputs = Input(name='inputs',shape=[max_len])\n    layer = Embedding(max_words,50,input_length=max_len)(inputs)\n    layer = LSTM(64)(layer)\n    layer = Dense(256,name='FC1')(layer)\n    layer = Activation('relu')(layer)\n    layer = Dropout(0.5)(layer)\n    layer = Dense(1,name='out_layer')(layer)\n    layer = Activation('sigmoid')(layer)\n    model = Model(inputs=inputs,outputs=layer)\n    return model","64d889d1":"model = RNN()\nmodel.summary()\nmodel.compile(loss='binary_crossentropy',optimizer=RMSprop(),metrics=['accuracy'])","e65ece26":"model.fit(sequences_matrix,Y_train,batch_size=128,epochs=10,\n          validation_split=0.2,callbacks=[EarlyStopping(monitor='val_loss',min_delta=0.0001)])","9e815f37":"test_sequences = tok.texts_to_sequences(X_test)\ntest_sequences_matrix = sequence.pad_sequences(test_sequences,maxlen=max_len)","5416411b":"accr = model.evaluate(test_sequences_matrix,Y_test)","1e4fb0d8":"print('Test set\\n  Loss: {:0.3f}\\n  Accuracy: {:0.3f}'.format(accr[0],accr[1]))","1184b43a":"Drop the columns that are not required for the neural network.","7b94ee32":"Process the test set data.","56cac4fb":"Understand the distribution better.","87b0f76a":"Evaluate the model on the test set.","6aae8823":"The model performs well on the validation set and this configuration is chosen as the final model.","b8485e10":"Split into training and test data.","236b0893":"Call the function and compile the model.","b1960593":"### Process the data\n* Tokenize the data and convert the text to sequences.\n* Add padding to ensure that all the sequences have the same shape.\n* There are many ways of taking the *max_len* and here an arbitrary length of 150 is chosen.","b674761d":"Fit on the training data.","1883d950":"# Import the necessary libraries","a2296800":"### RNN\nDefine the RNN structure.","912edc70":"### Load the data into Pandas dataframe","dcf5f2b7":"* Create input and output vectors.\n* Process the labels."}}