{"cell_type":{"b41021da":"code","4e6bdec0":"code","f834a427":"code","c8517709":"code","fbddcd28":"code","d1f99cf8":"code","a368583b":"code","2ea14394":"code","3bb8ce70":"code","09b1bef7":"code","4244f15f":"code","09ff16e4":"code","ee28a55a":"code","36034214":"code","11b6c907":"code","729ad097":"code","454fbcca":"code","bc2b99ba":"code","1f440147":"code","1d58b633":"code","af882efe":"code","ebfeb692":"code","f773170c":"code","20f1b847":"code","b4ccb802":"code","11a60614":"code","60d32e40":"code","8325452c":"code","c00ef883":"code","850fe76e":"code","4f999008":"code","59299e14":"code","12905ffb":"code","9f85ad73":"code","c884ab71":"code","05eff757":"code","1c2cdf3c":"code","1cf9ca0f":"code","cf24b572":"code","9c3766d0":"code","dfa4abb0":"code","0c78c9a6":"code","baf7c4c1":"code","036fbd01":"code","e7221de0":"code","1f7f9371":"code","357e5db7":"code","6c1b7352":"code","dac4e9cc":"code","14a7f2a1":"code","5eff124d":"code","a0ae0f59":"code","5167ea64":"code","7e0b6c55":"code","31344d69":"code","6fd6e329":"code","68cffd4c":"code","3b40b389":"code","3b47ab22":"code","3ede62a1":"code","8fa6c612":"code","bc7e14dd":"code","7a78e3a0":"code","6eb1b9a2":"code","07ee8f51":"code","6c5a2f48":"code","5c4ede85":"code","f8f0046c":"code","cb85b783":"code","70c68fea":"code","fde90d0e":"code","1e8ac3d8":"code","b0173130":"code","999724a8":"code","2f389d54":"code","168c0631":"code","92a9fde8":"code","d0d5f4f3":"code","d5ceee64":"code","08f6651d":"code","dcc00865":"code","fb584712":"code","e5ffd19a":"code","c7be3dc2":"code","9f74925f":"code","399fe7d4":"code","b76b96da":"code","7db6f58d":"code","98436a5e":"code","d47fbc04":"code","c93f5b6f":"code","c6b3b5a0":"code","3bb4158a":"code","667d705b":"code","3d4dff1d":"code","dff81e80":"code","6d50c585":"code","7dbaabff":"code","b9d9ed4a":"code","5e5268f3":"code","862379c6":"code","c9159c2c":"code","090d5780":"code","8e32fccd":"code","05313b77":"code","8b0a24b8":"code","ff814266":"code","d3dd51cb":"code","33f7163a":"code","beb688a3":"code","e42d7a83":"code","2833f181":"code","49ac25e6":"code","d1e6c1fd":"code","8c4171e0":"code","b591cd99":"code","72b48bd9":"markdown","d9e5361b":"markdown","7ec1f929":"markdown","ee513801":"markdown","63153e74":"markdown","a6245330":"markdown","d6e4aa83":"markdown","9e6c9312":"markdown","3289af8e":"markdown","b227f8d7":"markdown","8ca5823a":"markdown","4a59a6c1":"markdown","5b88ae9e":"markdown","1fad6e43":"markdown","2d9485f4":"markdown","bdf53904":"markdown","51271f19":"markdown","be9de0cc":"markdown","e762c80d":"markdown"},"source":{"b41021da":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()","4e6bdec0":"main_data = pd.read_csv('..\/input\/attritiondata\/Attrition_data.csv')","f834a427":"main_data.head()","c8517709":"location_clean = pd.read_csv('..\/input\/attritiondata\/location_clean.csv')\nlocation_clean.head()","fbddcd28":"data = pd.merge(main_data, location_clean, how= 'inner',left_on = 'S.No', right_on='id' )\ndata.drop('id',axis =1, inplace = True)\n# data.head()","d1f99cf8":"assert location_clean.shape[0] == data.shape[0]","a368583b":"data.shape","2ea14394":"data = data.rename(columns = {'Engagement Score (% Satisfaction)':'sat_score'})\ndata['sat_score'] = data['sat_score'].apply(lambda x:x[:-1])\n# data.head()","3bb8ce70":"data['sat_score'] = data['sat_score'].astype('int')","09b1bef7":"# np.where(data['Location'].isna())\n# data.loc[[48,111],:]\n# data.drop([48,111],axis = 0, inplace= True) #For now\n# data.isna().sum().sum()","4244f15f":"data.isna().sum()","09ff16e4":"# data = data[data['doubtful']=='NO']\n# data.isna().sum()","ee28a55a":"# np.where(data.isna())","36034214":"# data.iloc[[  2,  23,  63, 193],:]","11b6c907":"data['Last Rating'] = data['Last Rating'].apply(lambda x: str(x))\n# data.info()","729ad097":"def to_float(x):\n    try:\n        return float(x)\n    except ValueError as v:\n        return float(x.replace(' ',''))\ndata['Tenure'] = data['Tenure'].apply(to_float)\n# data.head()","454fbcca":"from datetime import datetime\ndef converter(x):\n    try:\n        return datetime.strptime(x, '%d-%b-%y')\n    except:\n        return datetime.strptime(x, '%d-%m-%y')  # for these values in DOJ column '''05-07-10,02-09-10,01-08-11,12-03-04,05-07-10,,01-06-11,09-08-07,05-05-08,12-10-09,07-02-11'''\n\ndata['DOL_date'] = data['In Active Date'].apply(converter)\ndata['DOJ_date'] = data['DOJ'].apply(converter)\n# data.head()","bc2b99ba":"data.drop(['DOJ','In Active Date'], axis = 1, inplace =True)","1f440147":"def safe_strip(x):\n    try:\n        return x.strip()\n    except AttributeError as e:\n#         print(x)\n        return x\n    \nfor col in data.columns:\n    if data[col].dtype == 'object':\n        data[col] = data[col].apply(safe_strip) ## Some values in the Designation column had extra spaces ","1d58b633":"data.groupby('Designation')['Grade'].apply(lambda x: x.unique())\n### OR data[['Designation','Grade']].drop_duplicates().sort_values('Grade')","af882efe":"data['Zone'] = data['Zone'].apply(lambda x: x.lower()) ## CENTRAL and central, north and North, south and South pairs were present\ndata['Zone'].value_counts()","ebfeb692":"data['Marital Status'].value_counts()","f773170c":"data['Gender'].value_counts()","20f1b847":"data['Education'].value_counts()","b4ccb802":"data.columns","11a60614":"data.drop(['EmpID','Emp Name','Attrition ','Designation'],axis =1 , inplace =True)\ndata.head()","60d32e40":"data['tenure_days'] = (data['DOL_date'] - data['DOJ_date']).apply(lambda x:x.days)\n# data.head()","8325452c":"data.columns","c00ef883":"data = data.rename(columns = {'S.No':'id', 'Last Rating':'rating','Monthly Income':'income','Marital Status': 'marital_status'})\n# data.head()","850fe76e":"data.columns = [col.lower() for col in data.columns]\n# data.head()","4f999008":"# data.columns","59299e14":"data = data.drop(['doubtful','location','changed'] ,axis = 1)","12905ffb":"data.head()","9f85ad73":"data.shape","c884ab71":"data.to_csv('data_complete_location.csv', index= False)","05eff757":"numeric_col = [col for col in data.columns if data[col].dtype in ['int64','int32','float64'] and col not in ['id','tenure']]\nnumeric_col","1c2cdf3c":"data[numeric_col].hist(figsize=(16, 8));","1cf9ca0f":"_, axes = plt.subplots(nrows=2, ncols=2, figsize=(16, 8))\ni = 0\nj = 0\nfor col in numeric_col:\n    _=sns.distplot(data[col], ax=axes[i][j]);\n    _=plt.xticks(rotation=90)\n    j+=1\n    if j==2:\n        i+=1\n        j=0","cf24b572":"_, axes = plt.subplots(nrows=2, ncols=2, figsize=(16, 8))\ni = 0\nj = 0\nfor col in numeric_col:\n    _=sns.boxplot(data[col], ax=axes[i][j]);\n    _=plt.xticks(rotation=90)\n    j+=1\n    if j==2:\n        i+=1\n        j=0","9c3766d0":"cat_cols = [col for col in data.columns if data[col].dtype == 'object']\ncat_cols","dfa4abb0":"%matplotlib inline\n_, axes = plt.subplots(nrows=5, ncols=2,sharey=True, figsize=(16, 24))\n# plt.subplot_tool() ## Works for interactive\nplt.subplots_adjust(hspace=0.8)\ni = 0\nj = 0\nfor col in cat_cols:\n    if col == 'location': continue\n    g=sns.countplot(x=col, data=data, ax=axes[i][j], order = list(data[col].value_counts().reset_index()['index']));\n    if col in  ['remarks','corrected_location','district','state']:\n        _=g.set_xticklabels(g.get_xticklabels(), rotation=90)\n#     _ = plt.xticks(rotation=90)\n    j+=1\n    if j==2:\n        i+=1\n        j=0\n","0c78c9a6":"corr_matrix = data[numeric_col].corr()\nsns.heatmap(corr_matrix, annot = True);","baf7c4c1":"# `pairplot()` may become very slow with the SVG or retina format\n%config InlineBackend.figure_format = 'png'\nsns.pairplot(data[numeric_col]);\n%config InlineBackend.figure_format = 'retina'","036fbd01":"numeric_col","e7221de0":"cat_cols","1f7f9371":"_, axes = plt.subplots(nrows=5, ncols=2,sharey=True, figsize=(16, 30))\nplt.subplots_adjust(hspace=0.8)\n\ni = 0\nj = 0\nfor col in cat_cols:\n    if col == 'location': continue\n    g=sns.boxplot(x=col,y='tenure_days', data=data, ax=axes[i][j]);\n    if col in  ['remarks','corrected_location','district','state']:\n        _=g.set_xticklabels(g.get_xticklabels(), rotation=90)\n#     _ = plt.xticks(rotation=90)\n    j+=1\n    if j==2:\n        i+=1\n        j=0\n","357e5db7":"# _, axes = plt.subplots(2, 4, sharey=True, figsize=(12, 8))\nplt.figure(figsize= (8,6))\nsns.boxplot(x='grade', y='income', data=data[data['income']<1e5], order = sorted(data['grade'].unique()));","6c1b7352":"%reset -f","dac4e9cc":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline \nimport seaborn as sns\nsns.set()","14a7f2a1":"data = pd.read_csv('..\/input\/attritiondata\/data_complete_location.csv')\ndata.head()","5eff124d":"from sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\n# Filter data\nleft_emp =  data[['sat_score', 'rating']]\n# Create groups using K-means clustering.\n\nss= StandardScaler()\nleft_emp_scaled = ss.fit_transform(left_emp)\nleft_emp_scaled.shape\nkmeans = KMeans(n_clusters = 4, random_state = 10).fit(left_emp_scaled)","a0ae0f59":"left_emp['label'] = kmeans.labels_\n# Draw scatter plot\n_ = plt.scatter(left_emp['sat_score'], left_emp['rating'], c=left_emp['label'],cmap='Accent')\n_ = plt.xlabel('Satisfaction Level')\n_ = plt.ylabel('Last Evaluation')\n_ = plt.title('4 Clusters of employees who left')\nplt.show()","5167ea64":"left_emp =  data[['tenure', 'income']]\nleft_emp = left_emp[left_emp['income']<1e5]\n# Create groups using K-means clustering.\n\nss= StandardScaler()\nleft_emp_scaled = ss.fit_transform(left_emp)\nleft_emp_scaled.shape\nkmeans = KMeans(n_clusters =4 , random_state = 10).fit(left_emp_scaled)\n\nleft_emp['label'] = kmeans.labels_\n# Draw scatter plot\n_ = plt.scatter(left_emp['tenure'], left_emp['income'], c=left_emp['label'],cmap='Accent')\n_ = plt.xlabel('Tenure')\n_ = plt.ylabel('Income')\n_ = plt.title('4 Clusters of employees who left')\nplt.show()","7e0b6c55":"left_emp =  data[['age', 'income']]\nleft_emp = left_emp[left_emp['income']<1e5]\n# Create groups using K-means clustering.\n\nss= StandardScaler()\nleft_emp_scaled = ss.fit_transform(left_emp)\nleft_emp_scaled.shape\nkmeans = KMeans(n_clusters =6 , random_state = 10).fit(left_emp_scaled)\n\nleft_emp['label'] = kmeans.labels_\n# Draw scatter plot\n_=plt.scatter(left_emp['age'], left_emp['income'], c=left_emp['label'],cmap='Accent')\n_=plt.xlabel('Age')\n_=plt.ylabel('Income')\n_=plt.title('6 Clusters of employees who left')\nplt.show()","31344d69":"%reset -f","6fd6e329":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline \nimport seaborn as sns\nsns.set()","68cffd4c":"data = pd.read_csv('..\/input\/attritiondata\/data_complete_location.csv')\ndata.head()","3b40b389":"grade_int = {'E1':1,'E2':2,'M1':3,'M2':4,'M3':5,'M4':6,'CXO':7}\ndata['grade_int'] = data['grade'].apply(lambda x: grade_int[x])","3b47ab22":"not_required =  ['grade','dol_date','doj_date','id','corrected_location','district']","3ede62a1":"selected_cats = [ col for col in data.columns if data[col].dtype=='object' and col not in not_required]\nselected_cats","8fa6c612":"selected_nums = [col for col in data.columns if col not in selected_cats+not_required]","bc7e14dd":"selected_nums","7a78e3a0":"sns.distplot(data['tenure'])","6eb1b9a2":"sns.distplot(data['sat_score'])","07ee8f51":"def sat_binner(x):\n    return x\/\/20 + 1 if not x%20 == 0 else x\/\/20\ndata['sat_binned'] = data['sat_score'].apply(sat_binner).astype('object')","6c5a2f48":"def tenure_binner(x):\n    return x\/\/2 + 1 if not x%2 == 0 else x\/\/2\ndata['tenure_binned'] = data['tenure'].apply(tenure_binner).astype('object')","5c4ede85":"cols_for_frequent_items = ['grade','gender','education','rating','marital_status','zone','remarks','tenure_binned','sat_binned']","f8f0046c":"data_fp = data[cols_for_frequent_items]\n# data_fp.head()","cb85b783":"data_fp_enc = pd.get_dummies(data_fp, columns = data_fp.columns)\ndata_fp_enc.head()","70c68fea":"pd.set_option('max_colwidth', 100)\n# pd.set_option('max_rows',200)","fde90d0e":"from mlxtend.frequent_patterns import apriori\n\nfreq_pattern = apriori(data_fp_enc, min_support=0.20, use_colnames=True)\nfreq_pattern['length'] = freq_pattern['itemsets'].apply(lambda x: len(x) )\nfreq_pattern[freq_pattern['length']>=4].sort_values('support',ascending= False)","1e8ac3d8":"fp2 = data[(data['gender']== 'Male') & (data['grade']=='E1') & (data['education'] =='Bachelors') & (data['tenure']<=2) ]\nfp2.groupby('remarks').size().sort_values(ascending = False)\n# fp2.groupby('zone').size().sort_values(ascending = False)\n# fp2.groupby('rating').size().sort_values(ascending = False)\n# fp2.groupby('sat_binned').size().sort_values(ascending = False)\n# fp2.groupby('marital_status').size().sort_values(ascending = False)","b0173130":"# Interesting FP \nfp1 = data[(data['gender']== 'Male') & (data['grade']=='E1') & (data['education'] =='Bachelors') & (data['remarks']=='Issues with the Manager') ]\n\n# Not so interesting other features\n# fp1.groupby('marital_status').size().sort_values(ascending = False)\n# fp1.groupby('zone').size().sort_values(ascending = False)\n# fp1.groupby('rating').size().sort_values(ascending = False)\n# fp1.groupby('sat_binned').size().sort_values(ascending = False)\n# fp1.groupby('tenure_binned').size().sort_values(ascending = False)\n","999724a8":"#Not very interesting\n# fp3 = data[(data['gender']== 'Male') & (data['grade']=='E1') & (data['education'] =='Bachelors') & (data['remarks']=='Issues with the Manager') &  (data['tenure']<=2)]\n# fp3.groupby('zone').size().sort_values(ascending = False)\n# fp3.groupby('rating').size().sort_values(ascending = False)\n# fp3.groupby('sat_binned').size().sort_values(ascending = False)\n# fp3.groupby('marital_status').size().sort_values(ascending = False)","2f389d54":"%reset -f","168c0631":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","92a9fde8":"from sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge\n# from sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.dummy import DummyRegressor\n# from sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error","d0d5f4f3":"from math import sqrt\nnp.random.seed(42)","d5ceee64":"data = pd.read_csv('..\/input\/attritiondata\/data_complete_location.csv')\ndata.head()","08f6651d":"# data_used = data.drop(['corrected_location','district','state','doj_date','dol_date','tenure_days'], axis =1)\ndata_pred = data[['id','grade','tenure','gender','education','age','rating','income','sat_score','marital_status',\\\n                 'zone','remarks']]\n# data_pred.info()","dcc00865":"X = data_pred.drop(['id','tenure'], axis =1)\ny = data_pred['tenure']","fb584712":"selected_cats = [col for col in X.columns if X[col].dtype == 'object']\nselected_nums = [col for col in X.columns if col  not in selected_cats]","e5ffd19a":"X = pd.get_dummies(X, columns = selected_cats)","c7be3dc2":"train_samples = int(0.9*data_pred.shape[0])\ntrain_indices = list(range(train_samples))\nval_indices = list(range(train_samples, data_pred.shape[0]))\ntrain_X = X.loc[train_indices, : ]\ntrain_y = y.loc[train_indices]\nval_X = X.loc[val_indices, : ]\nval_y = y.loc[val_indices]\n\ntrain_X.shape\ntrain_y.shape\nval_X.shape\nval_y.shape","9f74925f":"ss= StandardScaler()\ntrain_X_scaled = pd.DataFrame(ss.fit_transform(train_X), columns = train_X.columns)\ntrain_y_logged = np.log1p(train_y)\nval_X_scaled = pd.DataFrame(ss.transform(val_X), columns = val_X.columns)\n# val_y = np.log1p(val_y)","399fe7d4":"def fit_model(model):\n    if model == DecisionTreeRegressor:\n        reg = model(random_state = 291)\n    else:\n        reg = model()\n    reg.fit(train_X_scaled, train_y_logged)\n    val_y_hat = np.expm1(reg.predict(val_X_scaled))\n    print(f'MAE: {mean_absolute_error(val_y_hat, val_y)}')\n    print(f'RMSE: {sqrt(mean_squared_error(val_y_hat, val_y))}')\n#     return sqrt(mean_squared_error(val_y_hat, val_y))\n    fig, ax = plt.subplots(1,2, figsize=(16,4))\n    \n    ax[0].plot(list(range(len(val_y))), val_y_hat, label= 'Predicted Tenure (in yrs)')\n    ax[0].plot(list(range(len(val_y))), val_y, label = 'Original  Tenure (in yrs)')\n    ax[0].legend(loc = 'best')\n    ax[0].set_title('Predictions')\n    \n    print(f'Using model : {model}')\n    if model in [Lasso, Ridge, LinearRegression]:\n        coeff_df = pd.DataFrame(reg.coef_, train_X_scaled.columns, columns=['Coefficient'])  \n\n    elif model in [XGBRegressor,DecisionTreeRegressor]:\n        coeff_df = pd.DataFrame(reg.feature_importances_, train_X_scaled.columns, columns=['Coefficient'])  \n        \n    else:\n        print(\"No feature importance graph for DummyRegressor\")\n        return \n    \n    coeff_df[\"abs\"] = coeff_df.Coefficient.apply(np.abs)\n    coeff_df = coeff_df.sort_values(by=\"abs\", ascending=False).drop(\"abs\", axis=1)\n    \n    ax[1].bar(coeff_df.index[:15],coeff_df['Coefficient'][:15])\n    _ = plt.xticks(rotation=90)\n    ax[1].set_title('Feature importance')\n","b76b96da":"fit_model(DummyRegressor)","7db6f58d":"fit_model(LinearRegression)","98436a5e":"fit_model(DecisionTreeRegressor)","d47fbc04":"## To visualize the Decision Tree - But the tree is too big\n\n# dt =DecisionTreeRegressor()\n# dt.fit(train_X_scaled, train_y_logged)\n# from sklearn.tree import export_graphviz\n# export_graphviz(dt, out_file ='tree.dot', \n#                feature_names =train_X_scaled.columns)  ","c93f5b6f":"fit_model(XGBRegressor)","c6b3b5a0":"def plot_ensemble(model1, model2):\n    if model1 == DecisionTreeRegressor:\n        m1  = model1(random_state=291)\n    else:\n        m1 = model1()\n    m1.fit(train_X_scaled, train_y_logged)\n    m2 = model2()\n    m2.fit(train_X_scaled, train_y_logged)\n    val_y_hat = (np.expm1(m1.predict(val_X_scaled)) + np.expm1(m2.predict(val_X_scaled)))\/2.0\n    print(f'MAE: {mean_absolute_error(val_y_hat, val_y)}')\n    print(f'RMSE: {sqrt(mean_squared_error(val_y_hat, val_y))}')\n    \n    fig, ax = plt.subplots(1,1)\n    \n    ax.plot(list(range(len(val_y))), val_y_hat, label= 'Predicted Tenure (in yrs)')\n    ax.plot(list(range(len(val_y))), val_y, label = 'Original  Tenure (in yrs)')\n    ax.legend(loc = 'best')\n    ax.set_title('Predictions')","3bb4158a":"plot_ensemble(LinearRegression, XGBRegressor)","667d705b":"plot_ensemble(DecisionTreeRegressor, XGBRegressor)","3d4dff1d":"%reset -f","dff81e80":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","6d50c585":"from sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.dummy import DummyClassifier\nfrom sklearn.metrics import f1_score, accuracy_score, precision_score, recall_score","7dbaabff":"from math import sqrt\nfrom scipy.stats import mode\nnp.random.seed(42)","b9d9ed4a":"data = pd.read_csv('..\/input\/attritiondata\/data_complete_location.csv')\ndata.head()","5e5268f3":"X = data[['dol_date']].copy()\nX['Count'] = 1\n# X.head()","862379c6":"# data_used = data.drop(['corrected_location','district','state','doj_date','dol_date','tenure_days'], axis =1)\nX['dol_date'] = pd.to_datetime(X[\"dol_date\"], format=\"%Y-%m-%d\")","c9159c2c":"X.set_index('dol_date', inplace = True)","090d5780":"X_comp =  X.Count.resample('D').sum().reset_index()","8e32fccd":"X_comp[\"date\"] = X_comp[\"dol_date\"].apply(lambda x: x.day)\nX_comp[\"month\"] = X_comp[\"dol_date\"].apply(lambda x: x.month)\nX_comp[\"quarter\"] = X_comp[\"dol_date\"].apply(lambda x: x.quarter)\nX_comp[\"year\"] = X_comp[\"dol_date\"].apply(lambda x: x.year)\nX_comp[\"weekday\"] = X_comp[\"dol_date\"].apply(lambda x: x.dayofweek)\nX_comp[\"dayofyear\"] = X_comp[\"dol_date\"].apply(lambda x: x.dayofyear)\nX_comp[\"weekofyear\"] = X_comp[\"dol_date\"].apply(lambda x: x.weekofyear)\n# X_comp.head()\n# X_comp[\"day_count\"] = X_comp[\"dol_date\"].apply(lambda x: x.toordinal())","05313b77":"X_comp['fired'] = X_comp['Count'].apply(lambda x: 1 if x>=1 else 0)","8b0a24b8":"y = X_comp['fired']\nX_comp.drop(['fired','Count','dol_date'],axis = 1, inplace =True)\n# X_comp.head()","ff814266":"y.value_counts()","d3dd51cb":"train_samples = int(0.9*X_comp.shape[0])\ntrain_indices = list(range(train_samples))\nval_indices = list(range(train_samples, X_comp.shape[0]))\ntrain_X = X_comp.loc[train_indices, : ]\ntrain_y = y.loc[train_indices]\nval_X = X_comp.loc[val_indices, : ]\nval_y = y.loc[val_indices]\n\ntrain_X.shape\ntrain_y.shape\nval_X.shape\nval_y.shape","33f7163a":"ss= StandardScaler()\ntrain_X_scaled = pd.DataFrame(ss.fit_transform(train_X), columns = train_X.columns)\n# train_y_logged = np.log1p(train_y)\nval_X_scaled = pd.DataFrame(ss.transform(val_X), columns = val_X.columns)\n# val_y = np.log1p(val_y)","beb688a3":"def fit_model(model):\n    if model == DecisionTreeClassifier:\n        reg = model(random_state = 1)\n       \n    elif model == DummyClassifier:\n        reg = model(strategy = 'constant' ,constant=1)\n\n    elif model == XGBClassifier:\n        reg = model()\n#         base_score=0.5, booster='gbtree', colsample_bylevel=1,\n#               colsample_bytree=0.6, gamma=0.25, learning_rate=0.4,\n#               max_delta_step=0, max_depth=10, min_child_weight=1, missing=None,\n#               n_estimators=100, n_jobs=1, nthread=None,\n#               objective='binary:logistic', random_state=0, reg_alpha=0,\n#               reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,\n#               subsample=1\n    else:\n        reg = model()\n    reg.fit(train_X_scaled, train_y) #Changed var name\n    val_y_hat = reg.predict(val_X_scaled)\n    \n#     return f1_score(val_y_hat, val_y)\n    \n    print(f'F1: {f1_score(val_y_hat, val_y)}')\n    print(f'Accuracy: {accuracy_score(val_y_hat, val_y)}')\n    print(f'Precision: {precision_score(val_y_hat, val_y)}')\n    print(f'Recall: {recall_score(val_y_hat, val_y)}')\n\n    \n    fig, ax = plt.subplots(1,2, figsize=(16,4))\n    \n    ax[0].plot(list(range(len(val_y))), val_y_hat, label= 'Predicted Firing') #Removed exponentiation\n    ax[0].plot(list(range(len(val_y))), val_y, label = 'Data') #Removed exponentiation\n    ax[0].legend(loc = 'best')\n    ax[0].set_title('Predictions')\n    \n    print(f'Using model : {model}')\n    if model == LogisticRegression:\n        coeff_df = pd.DataFrame(reg.coef_[0], train_X_scaled.columns, columns=['Coefficient'])  \n\n    elif model in [XGBClassifier,DecisionTreeClassifier]:\n        coeff_df = pd.DataFrame(reg.feature_importances_, train_X_scaled.columns, columns=['Coefficient'])  \n        \n    else:\n        print(\"No feature importance graph for DummyRegressor\")\n        return \n    \n    coeff_df[\"abs\"] = coeff_df.Coefficient.apply(np.abs)\n    coeff_df = coeff_df.sort_values(by=\"abs\", ascending=False).drop(\"abs\", axis=1)\n    \n    ax[1].bar(coeff_df.index[:15],coeff_df['Coefficient'][:15])\n    _ = plt.xticks(rotation=90)\n    ax[1].set_title('Feature importance')\n","e42d7a83":"fit_model(DummyClassifier)","2833f181":"fit_model(LogisticRegression)","49ac25e6":"fit_model(DecisionTreeClassifier)","d1e6c1fd":"fit_model(XGBClassifier)","8c4171e0":"def plot_ensemble(model1, model2, model3):\n    m1 = model1(random_state=11)\n    m1.fit(train_X_scaled, train_y)\n    m2 = model2()\n    m2.fit(train_X_scaled, train_y)\n    m3 = model3()\n    m3.fit(train_X_scaled, train_y)    \n    val_y_hat = mode([m1.predict(val_X_scaled),m2.predict(val_X_scaled), m3.predict(val_X_scaled)])[0][0]\n    \n    print(f'F1: {f1_score(val_y_hat, val_y)}')\n    print(f'Accuracy: {accuracy_score(val_y_hat, val_y)}')\n    print(f'Precision: {precision_score(val_y_hat, val_y)}')\n    print(f'Recall: {recall_score(val_y_hat, val_y)}')\n\n    \n    fig, ax = plt.subplots(1,1, figsize=(6,4))\n    \n    ax.plot(list(range(len(val_y))), val_y_hat, label= 'Predicted Firing') #Removed exponentiation\n    ax.plot(list(range(len(val_y))), val_y, label = 'Data') #Removed exponentiation\n    ax.legend(loc = 'best')\n    ax.set_title('Predictions')","b591cd99":"plot_ensemble(DecisionTreeClassifier, XGBClassifier,LogisticRegression)","72b48bd9":"> The 4 admin locations have to be handled for districts","d9e5361b":"# DATA PREPARATION","7ec1f929":"> Dropping EmpID, Emp Name as they are redundant in the presence of a S.No. \n\n> Attrition is always \"YES\"\n\n> Designation is redundant in presence of grade","ee513801":"# FREQUENT PATTERN MINING","63153e74":"# FORECAST COUNT","a6245330":"# CLUSTERING","d6e4aa83":"### Multivariate visualization","9e6c9312":"### Univariate visualization","3289af8e":"### Converting the columns into right datatypes and extracting data","b227f8d7":"### Feature Engineering","8ca5823a":"> Use the below statement when modelling or when null values can create problem","4a59a6c1":"## Frequent Item Sets","5b88ae9e":"Some points to be noted:\n\n1. Income is dependent on the grade of the employee.\n2. Age and income are positively correlated\n3. Due to the above two points, only grade is considered for the frequent item sets calculation\n4. Tenure and sat_score are binned so as to be used for frequent itemset calculation purpose.","1fad6e43":"> Use `corrected_location` instead of `location`\n\n> No need of `changed` as `location` column has been dropped\n\n> Leave `doubtful` in the dataset ","2d9485f4":"# TENURE PREDICTION","bdf53904":"> 1:1 relation between designation and grade. SO one can be dropped. Dropping Designation as it is easy to find order in Grade","51271f19":"# EXPLORATORY DATA ANALYSIS","be9de0cc":"**There are a hell lot of things that one can do while analysing his or her data. Don't believe me? Just go through this notebook once and you will realise the extents to which one can go while analysing a data as short as 300 rows.**\n\n**Below is an analysis of a small data on Attrition of employees. It includes the following:**\n\n1. Data Preparation \n2. Exploratory data analysis\n3. Clustering to find patterns\n4. Frequent pattern mining\n5. Forecasting and Predictions","e762c80d":"### Final Check \n1. S.No\n2. EmpID - To be dropped. Useless\n3. Emp Name - To be dropped. Useless*\n4. Designation - Stripped Extra space and then dropped - Has 1 to 1 with 'Grade'\n5. Grade - Has 1 to 1 with 'Designation'\n6. Attrition - To be dropped. Useless\n7. *Location ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ TO BE WORKED UPON*\n8. Tenure - Converted datatype. Fixed some values having space in between\n9. Gender \n10. Education\n11. Age\n12. Last Rating - changed dtype to object\n13. Monthly Income\n14. sat_score - Removed % sign and converted to int\n15. Marital Status\n16. Zone - Lower cased values\n17. Remarks \n18. In Active Date- dropped. Instead created DOL_date having datetime datatype\n19. DOJ - dropped . Instead created DOJ_date having datetime datatype."}}