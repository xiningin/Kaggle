{"cell_type":{"a0e91693":"code","2a32effd":"code","d1d24220":"code","c7966d33":"code","43ed145a":"code","efc7a4af":"code","073ccc98":"code","6d1c7bfa":"code","43e2593d":"code","d447a6fd":"code","a3f36519":"code","d3283767":"code","c5a1ae8d":"code","eed65282":"code","2a05080d":"code","e3139010":"code","f898eb80":"code","58a6d62c":"code","73318179":"markdown","ad9794e6":"markdown","77598938":"markdown","b592ae12":"markdown"},"source":{"a0e91693":"import numpy as np\nimport pandas as pd","2a32effd":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","d1d24220":"train_data[:10]","c7966d33":"train_data.describe(include='all')","43ed145a":"women = train_data[train_data['Sex'] == 'female']['Survived']\nrate_women = sum(women)\/len(women)\nprint('% of women who survived:', rate_women)","efc7a4af":"men = train_data[train_data.Sex == 'male']['Survived']\nrate_men = sum(men)\/len(men)\nprint('% of men who survived:', rate_men)","073ccc98":"# alternative way of computing the above\ntrain_data[['Sex', 'Survived']].groupby(['Sex']).mean()","6d1c7bfa":"train_data[['Pclass', 'Survived']].groupby(['Pclass']).mean()","43e2593d":"train_data[['Fare', 'Survived']].groupby(['Fare']).mean()","d447a6fd":"train_data[['SibSp', 'Survived']].groupby(['SibSp']).mean()","a3f36519":"train_data[['Parch', 'Survived']].groupby(['Parch']).mean()","d3283767":"# generate correlation data (larger values signify a clear positive\/negative correlation between row\/column labels)\ntrain_data.corr()","c5a1ae8d":"count = 0\nsurvived_count = 0\nbest = 0\nbesti = 0\nfor i in range(1,60):\n    count = 0\n    survived_count = 0\n    for idx, row in train_data.iterrows():\n        if(row['Sex'] == 'female' and row['Pclass']==3 and row['Age']>i):\n            count += 1\n            if row['Survived'] == 0:\n                survived_count += 1\n    if(count != 0):\n        result = survived_count \/ count\n    else:\n        result = 0\n    if(result>best):\n        best = result\n        besti = i\nprint(best)\nprint(besti)","eed65282":"count = 0\nsurvived_count = 0\nfor idx, row in train_data.iterrows():\n    if(row['Sex'] == 'female' and row['Pclass']==3 and row['Age']>38):\n        count += 1\n        if row['Survived'] == 0:\n            survived_count += 1\nif(count != 0):\n    print(survived_count \/ count)","2a05080d":"predictions = []\nfor idx, row in test_data.iterrows():\n    # make your changes in this cell!\n    if (row['Sex'] == 'female'):\n        if(row['Pclass']==3 and row['Age']>38):\n            predictions.append(0)\n        else:\n            predictions.append(1)\n\n    else:  \n        if(row['Pclass']<=2 and row['Age'] <= 15):\n            predictions.append(1)\n        elif(row['SibSp']<=1 and row['Age']<=14):\n            predictions.append(1)\n        elif(row['Fare']>100 and row['Age']<=16):\n            predictions.append(1)\n        else:\n            predictions.append(0)\n","e3139010":"assert len(predictions) == len(test_data), 'Number of predictions must match number of test data rows!'","f898eb80":"test_data['Survived'] = predictions","58a6d62c":"test_data[['PassengerId', 'Survived']].to_csv('submission.csv', index=False)","73318179":"# Working with rows manually","ad9794e6":"# Basic analysis","77598938":"# Making predictions","b592ae12":"# Loading and examining data"}}