{"cell_type":{"de593c6e":"code","208e7deb":"code","8dba7021":"code","20ee025f":"code","88ef40ea":"code","1d0b4db7":"code","a8502fc1":"code","f982960c":"code","a93ceca3":"code","183d17f3":"code","bee22896":"code","a8717a03":"code","a589299a":"code","106c6e99":"code","8ef942c2":"code","56314bcf":"code","69a6f75c":"code","264111a9":"code","65c73110":"code","67585d64":"code","b26a02fe":"code","38db1918":"code","7b4067f2":"code","07824061":"code","43b672a8":"code","e14578e8":"code","26ff4556":"code","f5e57746":"code","f3a8eb9e":"code","5ccb7c25":"code","d79d1e1f":"code","0c461531":"code","8db25ea8":"code","2849a63f":"code","9b076982":"code","8ce81521":"code","f90fb121":"markdown","110112b7":"markdown","d784e276":"markdown","74f190e8":"markdown","b2fb1c5b":"markdown","c30e4c8f":"markdown","61205be4":"markdown","aabf542c":"markdown","b253ff68":"markdown","902ba5c3":"markdown","9a12fce4":"markdown","4eefad9a":"markdown","13ae4c56":"markdown","33dbdd34":"markdown","873465ae":"markdown","870dbd3c":"markdown","6027443d":"markdown","90e4d234":"markdown","36baca20":"markdown","2e3c10b3":"markdown","dff63f0e":"markdown","0d9ffb02":"markdown","87d74ba8":"markdown"},"source":{"de593c6e":"# import neccessary libraries\n!conda install -c conda-forge geopy --yes \nfrom geopy.geocoders import Nominatim # module to convert an address into latitude and longitude values\nimport requests # library to handle requests\nimport pandas as pd # library for data analsysis\nimport numpy as np # library to handle data in a vectorized manner\nimport random # library for random number generation\n\n# libraries for displaying images\nfrom IPython.display import Image \nfrom IPython.core.display import HTML \n    \n# tranforming json file into a pandas dataframe library\nfrom pandas.io.json import json_normalize\n\n!conda install -c conda-forge folium=0.5.0 --yes\nimport folium # plotting library\n\nprint('Folium installed')\nprint('Libraries imported.')","208e7deb":"# Define Foursquare Credentials and Version\n\nCLIENT_ID = 'SLDDVV4ZMUHC2TGZ113CKT1XF3MJZRBZNRL4QSYVDRGLW3XJ' # your Foursquare ID\nCLIENT_SECRET = 'VDOU35CORKHKU3PPHIMZDFZDLYSHH4HRZAQGVZGYIENPRHNA' # your Foursquare Secret\nVERSION = '20180604'\nLIMIT = 30\nprint('Your credentails:')\nprint('CLIENT_ID: ' + CLIENT_ID)\nprint('CLIENT_SECRET:' + CLIENT_SECRET)","8dba7021":"address = '365 5th Ave, New York, NY 10016'\n\ngeolocator = Nominatim()\nlocation = geolocator.geocode(address)\nlatitude = location.latitude\nlongitude = location.longitude\nprint(latitude, longitude)","20ee025f":"search_query = 'Japanese'\nradius = 500\nprint(search_query + ' .... OK!')","88ef40ea":"# create the api url\nurl = 'https:\/\/api.foursquare.com\/v2\/venues\/search?client_id={}&client_secret={}&ll={},{}&v={}&query={}&radius={}&limit={}'.format(CLIENT_ID, CLIENT_SECRET, latitude, longitude, VERSION, search_query, radius, LIMIT)\nurl","1d0b4db7":"# get the data result in json\nresults = requests.get(url).json()\nresults","a8502fc1":"# assign relevant part of JSON to venues\nvenues = results['response']['venues']\n\n# tranform venues into a dataframe\ndataframe = json_normalize(venues)\ndataframe.head()","f982960c":"# keep only columns that include venue name, and anything that is associated with location\nfiltered_columns = ['name', 'categories'] + [col for col in dataframe.columns if col.startswith('location.')] + ['id']\ndataframe_filtered = dataframe.loc[:, filtered_columns]\n\n# function that extracts the category of the venue\ndef get_category_type(row):\n    try:\n        categories_list = row['categories']\n    except:\n        categories_list = row['venue.categories']\n        \n    if len(categories_list) == 0:\n        return None\n    else:\n        return categories_list[0]['name']\n\n# filter the category for each row\ndataframe_filtered['categories'] = dataframe_filtered.apply(get_category_type, axis=1)\n\n# clean column names by keeping only last term\ndataframe_filtered.columns = [column.split('.')[-1] for column in dataframe_filtered.columns]\n\ndataframe_filtered","a93ceca3":"dataframe_filtered.info()","183d17f3":"dataframe_filtered.describe()","bee22896":"dataframe_filtered.name","a8717a03":"venues_map = folium.Map(location=[latitude, longitude], zoom_start=13) # generate map centred around the CUNY\n\n# add a red circle marker to represent the CUNY\nfolium.features.CircleMarker(\n    [latitude, longitude],\n    radius=10,\n    color='red',\n    popup='CUNY',\n    fill = True,\n    fill_color = 'red',\n    fill_opacity = 0.6\n).add_to(venues_map)\n\n# add the Japanese restaurants as blue circle markers\nfor lat, lng in zip(dataframe_filtered.lat, dataframe_filtered.lng):\n    folium.features.CircleMarker(\n        [lat, lng],\n        radius=5,\n        color='blue',\n        fill = True,\n        fill_color='blue',\n        fill_opacity=0.6\n    ).add_to(venues_map)\n\n# display map\nvenues_map","a589299a":"venue_id = '4e4e4ad5bd4101d0d7a7002d' # ID of Ten Sushi Restaurant\nurl = 'https:\/\/api.foursquare.com\/v2\/venues\/{}?client_id={}&client_secret={}&v={}'.format(venue_id, CLIENT_ID, CLIENT_SECRET, VERSION)\nurl","106c6e99":"result = requests.get(url).json()\nprint(result['response']['venue'].keys())\nresult['response']['venue']","8ef942c2":"try:\n    print(result['response']['venue']['rating'])\nexcept:\n    print('This venue has not been rated yet.')","56314bcf":"venue_id = '4c44df40429a0f47c660491e' # ID of Sariku Japanese Restaurant\nurl = 'https:\/\/api.foursquare.com\/v2\/venues\/{}?client_id={}&client_secret={}&v={}'.format(venue_id, CLIENT_ID, CLIENT_SECRET, VERSION)\n\nresult = requests.get(url).json()\ntry:\n    print(result['response']['venue']['rating'])\nexcept:\n    print('This venue has not been rated yet.')","69a6f75c":"# get the number of tips\nresult['response']['venue']['tips']['count']","264111a9":"## Sariku Tips - create the url\nlimit = 15 # set limit to be greater than or equal to the total number of tips\nurl = 'https:\/\/api.foursquare.com\/v2\/venues\/{}\/tips?client_id={}&client_secret={}&v={}&limit={}'.format(venue_id, CLIENT_ID, CLIENT_SECRET, VERSION, limit)\n\n# get the url in json\nresults = requests.get(url).json()\nresults","65c73110":"tips = results['response']['tips']['items']\n\ntip = results['response']['tips']['items'][0]\ntip.keys()","67585d64":"pd.set_option('display.max_colwidth', -1)\n\ntips_df = json_normalize(tips) # json normalize tips\n\n# columns to keep\nfiltered_columns = ['text', 'agreeCount', 'disagreeCount', 'id', 'user.firstName', 'user.lastName', 'user.gender', 'user.id']\ntips_filtered = tips_df.loc[:, filtered_columns]\n\n# display tips\ntips_filtered","b26a02fe":"user_id = '8785316' # user ID of Andrew Buck\n\n# create the url\nurl = 'https:\/\/api.foursquare.com\/v2\/users\/{}?client_id={}&client_secret={}&v={}'.format(user_id, CLIENT_ID, CLIENT_SECRET, VERSION) # define URL\n\n# send GET request\nresults = requests.get(url).json()\nuser_data = results['response']['user']\n\n# display features associated with user\nuser_data.keys()","38db1918":"# full information on Andrew Buck\nprint('First Name: ' + user_data['firstName'])\nprint('Last Name: ' + user_data['lastName'])\nprint('Home City: ' + user_data['homeCity'])","7b4067f2":"# figuring out how many tips have been submitted.\nuser_data['tips']","07824061":"# define tips URL\nurl = 'https:\/\/api.foursquare.com\/v2\/users\/{}\/tips?client_id={}&client_secret={}&v={}&limit={}'.format(user_id, CLIENT_ID, CLIENT_SECRET, VERSION, limit)\n\n# send GET request and get user's tips\nresults = requests.get(url).json()\ntips = results['response']['tips']['items']\n\n# format column width\npd.set_option('display.max_colwidth', -1)\n\ntips_df = json_normalize(tips)\n\n# filter columns\nfiltered_columns = ['text', 'agreeCount', 'disagreeCount', 'id']\ntips_filtered = tips_df.loc[:, filtered_columns]\n\n# display user's tips\ntips_filtered","43b672a8":"user_friends = json_normalize(user_data['friends']['groups'][0]['items'])\nuser_friends","e14578e8":"# getting users profile image\nuser_data","26ff4556":"# we can pull the image \nImage(url='https:\/\/fastly.4sqi.net\/img\/user\/300x300\/KRKQK1XSOZZSATJB.jpg')","f5e57746":"# umi restaurant latitude and longitude are as below\nlatitude=40.744587\nlongitude=-73.981918","f3a8eb9e":"# define the url\nurl = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?client_id={}&client_secret={}&ll={},{}&v={}&radius={}&limit={}'.format(CLIENT_ID, CLIENT_SECRET, latitude, longitude, VERSION, radius, LIMIT)\nurl\n\n# get the url in json\nresults = requests.get(url).json()\n'There are {} around Umi restaurant.'.format(len(results['response']['groups'][0]['items']))","5ccb7c25":"# get the relevant part of the JSON\nitems = results['response']['groups'][0]['items']\nitems[0]","d79d1e1f":"# create a clean dataframe\ndataframe = json_normalize(items) # flatten JSON\n\n# filter columns\nfiltered_columns = ['venue.name', 'venue.categories'] + [col for col in dataframe.columns if col.startswith('venue.location.')] + ['venue.id']\ndataframe_filtered = dataframe.loc[:, filtered_columns]\n\n# filter the category for each row\ndataframe_filtered['venue.categories'] = dataframe_filtered.apply(get_category_type, axis=1)\n\n# clean columns\ndataframe_filtered.columns = [col.split('.')[-1] for col in dataframe_filtered.columns]\n\ndataframe_filtered.head(10)","0c461531":"# visualize the items on the map\nvenues_map = folium.Map(location=[latitude, longitude], zoom_start=15) # generate map centred around Umi Restaurant\n\n\n# add Umi Restaurant as a red circle mark\nfolium.features.CircleMarker(\n    [latitude, longitude],\n    radius=10,\n    popup='Umi Restaurant',\n    fill=True,\n    color='red',\n    fill_color='red',\n    fill_opacity=0.6\n    ).add_to(venues_map)\n\n\n# add popular spots to the map as blue circle markers\nfor lat, lng, label in zip(dataframe_filtered.lat, dataframe_filtered.lng, dataframe_filtered.categories):\n    folium.features.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        fill=True,\n        color='blue',\n        fill_color='blue',\n        fill_opacity=0.6\n        ).add_to(venues_map)\n\n# display map\nvenues_map","8db25ea8":"# define URL\nurl = 'https:\/\/api.foursquare.com\/v2\/venues\/trending?client_id={}&client_secret={}&ll={},{}&v={}'.format(CLIENT_ID, CLIENT_SECRET, latitude, longitude, VERSION)\n\n# send GET request and get trending venues\nresults = requests.get(url).json()\nresults","2849a63f":"# check if there are any venues trending at this time.\nif len(results['response']['venues']) == 0:\n    trending_venues_df = 'No trending venues are available at the moment!'\n    \nelse:\n    trending_venues = results['response']['venues']\n    trending_venues_df = json_normalize(trending_venues)\n\n    # filter columns\n    columns_filtered = ['name', 'categories'] + ['location.distance', 'location.city', 'location.postalCode', 'location.state', 'location.country', 'location.lat', 'location.lng']\n    trending_venues_df = trending_venues_df.loc[:, columns_filtered]\n\n    # filter the category for each row\n    trending_venues_df['categories'] = trending_venues_df.apply(get_category_type, axis=1)","9b076982":"# display trending venues\ntrending_venues_df","8ce81521":"# lets visualize \nif len(results['response']['venues']) == 0:\n    venues_map = 'Cannot generate visual as no trending venues are available at the moment!'\n\nelse:\n    venues_map = folium.Map(location=[latitude, longitude], zoom_start=15) # generate map centred around Ecco\n\n\n    # add Ecco as a red circle mark\n    folium.features.CircleMarker(\n        [latitude, longitude],\n        radius=10,\n        popup='Umi',\n        fill=True,\n        color='red',\n        fill_color='red',\n        fill_opacity=0.6\n    ).add_to(venues_map)\n\n\n    # add the trending venues as blue circle markers\n    for lat, lng, label in zip(trending_venues_df['location.lat'], trending_venues_df['location.lng'], trending_venues_df['name']):\n        folium.features.CircleMarker(\n            [lat, lng],\n            radius=5,\n            poup=label,\n            fill=True,\n            color='blue',\n            fill_color='blue',\n            fill_opacity=0.6\n        ).add_to(venues_map)\n        \n# display map\nvenues_map","f90fb121":"We can get more specific and get the rating of Ten Sushi Restaurant.","110112b7":"# Data Exploration and Visualization","d784e276":"Below are the list of available restaurants\n\n- Ten Sushi Japanese Restaurant\n- Umi Japanese Restaurant\n- Waka Japanese Dining\n- Hapon Japanese Restaurant\n- Sariku","74f190e8":"We want to look at the foot traffic around Umi Restaurant and get the trending venues around Umi.","b2fb1c5b":"It looks like Ten Sushi Restaurant has no ratings. Let's try a different Japanese Restaurant. Sariku Japanese Restaurant is the second closest.","c30e4c8f":"# About the Data Set\n\nFoursquare allows developers to be able to create an app and use their service to connect the data collected and available by Foursquare. In this case, we will be using their free foresquare developer account option with certain limitations however it is possible to become a premium member and get full access to the Foresquare API. Data variables are as explained below;\n\n#### Name: Name of the Venue\n#### Categories: Category of the Venue\n#### Address: Address of the Venue\n#### CC: Country Code\n#### City: City of the Venue\n#### Country: Country of the Venue\n#### Cross Street: Cross street of the Venue\n#### distance: Distance from the provided location\n#### formattedAddress: Address of the venue\n#### labeledLatLngs\t: Label of the venue\n#### lat: Latitude of the venue\n#### lng: longtitude of the venue\n#### postalCode: Zip code of the venue\n#### state: State of the venu\n#### id: unique id for the venue","61205be4":"In order to get more detailed data from a specific venue, we can use the Foresquare API with below format to get all the data in JSON format.\n> `https:\/\/api.foursquare.com\/v2\/venues\/`**VENUE_ID**`?client_id=`**CLIENT_ID**`&client_secret=`**CLIENT_SECRET**`&v=`**VERSION**","aabf542c":"Based on the distance variable, closest venue is Ten Sushi Place. Let's explore that venue further.","b253ff68":"We want to eat Japanese food for lunch so we can add that as part of our query.","902ba5c3":"Unfortunately Sariku Restaurant does not have any rating as well. But we can further look at details for this specific venue. We can review the tips variable via the data collected from Foursquare API.","9a12fce4":"# Contents\n\n1- Introduction\n\n2- About the Data Set\n\n3- Data Collection and Understanding\n\n4- Data Exploration \n\n5- Conclusion","4eefad9a":"We are currently at City University of New York which is located at 365 5th Ave, New York, NY 10016. We would want to have lunch close by.","13ae4c56":"In order to do this, we need to set up our api url structure like this\n> `https:\/\/api.foursquare.com\/v2\/users\/`**USER_ID**`?client_id=`**CLIENT_ID**`&client_secret=`**CLIENT_SECRET**`&v=`**VERSION**","33dbdd34":"We can further research the foresquare user and see if he is a fan of Japanese food or if it was a one of tip he left as a comment for the Umi Restaurant.","873465ae":"We need the below format in order to get the tips detail.\n> `https:\/\/api.foursquare.com\/v2\/venues\/`**VENUE_ID**`\/tips?client_id=`**CLIENT_ID**`&client_secret=`**CLIENT_SECRET**`&v=`**VERSION**`&limit=`**LIMIT**","870dbd3c":"# Conclusion\n\nBased on our data analysis we dont have great feedback from the users in regards to a decent Japanese Restaurant. All the Japanese restaurants within the area are not rated. However, we are able to see from the User Feedback that Sariku Restaurant is a good candiate for a decent Japanese food. ","6027443d":"# Data Collection and Understanding\n\nIn order to use the Foursquare API and collect and analyze the available data, we need to create a Foursqaure Developer Account, and create an app. ","90e4d234":"The way the Foresqaure API is structured, we can search for a specific venue category data via JSON as below structure\n\n> `https:\/\/api.foursquare.com\/v2\/venues\/`**search**`?client_id=`**CLIENT_ID**`&client_secret=`**CLIENT_SECRET**`&ll=`**LATITUDE**`,`**LONGITUDE**`&v=`**VERSION**`&query=`**QUERY**`&radius=`**RADIUS**`&limit=`**LIMIT**","36baca20":"We can also look at the Foresquare User's connections and friends. ","2e3c10b3":"As you can see we can get full information of the user left feedback for Umi Japanese Restaurant. Please the reason we only received 3 of the restaurants tip instead of more is because we are using free developer account. Premium members can get more information.","dff63f0e":"To answer the second part of our question on where else we can go once we are done with lunch, we can explore the location. In order to do that we need to have the api url structure as below\n> `https:\/\/api.foursquare.com\/v2\/venues\/`**explore**`?client_id=`**CLIENT_ID**`&client_secret=`**CLIENT_SECRET**`&ll=`**LATITUDE**`,`**LONGITUDE**`&v=`**VERSION**`&limit=`**LIMIT**","0d9ffb02":"# Introduction\n\nThis report analyzes user restaurant reviews based on a geographic location in an effort to provide possible lunch options for future planning. We will be leveraging Foursquare API in order to collect and analyze data for specific type of venues, users, geographical location and get trending venues around specific location. \n\nThe problem in question that we are trying to solve is \"What should we eat for lunch?\" & \"If time permits, we would like to go some other popular spots. What other places we can go to after lunch?\"","87d74ba8":"Now we found a Japanese Restaurant, places to go after lunch, we can further analyze the other venues to see which ones are trending within FoureSquare users. We need to structure our url as follows;\n> `https:\/\/api.foursquare.com\/v2\/venues\/`**trending**`?client_id=`**CLIENT_ID**`&client_secret=`**CLIENT_SECRET**`&ll=`**LATITUDE**`,`**LONGITUDE**`&v=`**VERSION**"}}