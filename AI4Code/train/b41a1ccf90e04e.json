{"cell_type":{"cc0745ab":"code","da1c16b7":"code","009c4425":"code","b05fa358":"code","433d0bef":"code","7ccc7192":"code","b5bd9496":"code","83095525":"code","e3afe6f7":"code","7d732d1b":"code","d55780ad":"code","b48c0842":"code","54d2def3":"code","90851674":"code","cd5e80bb":"code","d5b9e92d":"code","e5efdeb6":"code","0a674218":"code","0f0ef01d":"code","b67ae690":"markdown","742f01fb":"markdown","d5b9e016":"markdown","bb058b2b":"markdown"},"source":{"cc0745ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","da1c16b7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport os\nprint(os.listdir(\"..\/input\"))","009c4425":"matches_data = pd.read_csv(r\"..\/input\/WorldCupMatches.csv\")\nplayers_data = pd.read_csv(r\"..\/input\/WorldCupPlayers.csv\")\ncups_data = pd.read_csv(r\"..\/input\/WorldCups.csv\")","b05fa358":"matches_data.describe() #20 cols\n#players_data.info() #9 cols\n#cups_data.info()    #10 cols","433d0bef":"matches_data.columns","7ccc7192":"players_data.columns","b5bd9496":"matches_data.head()\n#cups_data.head()","83095525":"sns.heatmap(matches_data.corr())\nmatches_data.corr()","e3afe6f7":"matches_data['Home Team Name'] = matches_data['Home Team Name'].replace('Germany FR','Germany')\nmatches_data['Away Team Name'] = matches_data['Away Team Name'].replace('Germany FR','Germany')\nmatches_data['Home Team Name'] = matches_data['Home Team Name'].replace('C\ufffdte d\\'Ivoire','C\u00f4te d\\'Ivoire')\nmatches_data['Away Team Name'] = matches_data['Away Team Name'].replace('C\ufffdte d\\'Ivoire','C\u00f4te d\\'Ivoire')\nmatches_data['Home Team Name'] = matches_data['Home Team Name'].replace('rn\">Trinidad and Tobago','Trinidad and Tobago')\nmatches_data['Away Team Name'] = matches_data['Away Team Name'].replace('rn\">Trinidad and Tobago','Trinidad and Tobago')\nmatches_data['Home Team Name'] = matches_data['Home Team Name'].replace('rn\">United Arab Emirates','United Arab Emirates')\nmatches_data['Away Team Name'] = matches_data['Away Team Name'].replace('rn\">United Arab Emirates','United Arab Emirates')\nmatches_data['Home Team Name'] = matches_data['Home Team Name'].replace('rn\">Serbia and Montenegro','Serbia and Montenegro')\nmatches_data['Away Team Name'] = matches_data['Away Team Name'].replace('rn\">Serbia and Montenegro','Serbia and Montenegro')\nmatches_data['Home Team Name'] = matches_data['Home Team Name'].replace('rn\">Bosnia and Herzegovina','Bosnia and Herzegovina')\nmatches_data['Away Team Name'] = matches_data['Away Team Name'].replace('rn\">Bosnia and Herzegovina','Bosnia and Herzegovina')\nmatches_data['Home Team Name'] = matches_data['Home Team Name'].replace('German DR','Germany')\nmatches_data['Away Team Name'] = matches_data['Away Team Name'].replace('German DR','Germany')\nmatches_data['Home Team Name'] = matches_data['Home Team Name'].replace('IR Iran','Iran')\nmatches_data['Away Team Name'] = matches_data['Away Team Name'].replace('IR Iran','Iran')\nmatches_data['Home Team Name'] = matches_data['Home Team Name'].replace('rn\">Republic of Ireland','Republic of Ireland')\nmatches_data['Away Team Name'] = matches_data['Away Team Name'].replace('rn\">Republic of Ireland','Republic of Ireland')\nmatches_data['Home Team Name'] = matches_data['Home Team Name'].replace('Korea DPR','Korea Republic')\nmatches_data['Away Team Name'] = matches_data['Away Team Name'].replace('Korea DPR','Korea Republic')","7d732d1b":"total_cups_won = cups_data[\"Winner\"].value_counts().reset_index()","d55780ad":"plt.figure(figsize=(11,11))\nplt.subplot(211)\nexplode = (0.1, 0, 0, 0,0.0, 0, 0, 0,0)\nplt.pie(x=total_cups_won['Winner'],labels=total_cups_won['index'],autopct='%1.1f%%',explode=explode,startangle=90,shadow=True)\nplt.title(\"Pie Chart showing Leading Team with most world cup wins\")\nplt.show()\n\nplt.figure(figsize=(12,10))\nplt.subplot(212)\nsns.barplot(data=total_cups_won,x = 'index',y= 'Winner')\nplt.xlabel(\"Country\")\nplt.ylabel(\"number of wins\")\nplt.title(\"Bar Plot showing Leading Team with most world cup wins\")\nplt.show()","b48c0842":"cups_data[cups_data['Country'] == cups_data['Winner']][['Year','Country','Winner']]","54d2def3":"matches_data=matches_data.drop_duplicates(subset=['MatchID'])#as there are duplicate matches \nmatches_data=matches_data.dropna(axis=0,subset=['Year'])\nmatches_attendance = matches_data.groupby(\"Year\")[\"Attendance\"].sum().reset_index()\nplt.figure(figsize=(15,7))\nsns.set_style(style='darkgrid')\nplt.grid(b=True,axis='both') \nsns.barplot(data=matches_attendance,x='Year',y='Attendance')\nplt.title(\"Number of People attended per Year\")\nplt.show()","90851674":"players_dataNoPor = players_data[~(players_data['Team Initials'] == 'POR')]#Removed POR team as Ronaldo (name) is in both BRA and POR Teams\nmax_played = players_dataNoPor['Player Name'].value_counts().reset_index().head()\nplt.figure(figsize=(7,5))\nsns.barplot(data=max_played,x='index',y = 'Player Name')\nplt.xlabel(\"Player Names\")\nplt.ylabel(\"matches played\")\nplt.title(\"Top 5 players who played maximum matches in world cup\")\nplt.show()","cd5e80bb":"winners_home = (matches_data['Home Team Goals'] > matches_data['Away Team Goals'])\nwinners_away = (matches_data['Home Team Goals'] < matches_data['Away Team Goals'])\n\nmatches_equal_goals = matches_data[matches_data['Home Team Goals']==matches_data['Away Team Goals']]\n\ndraw_matches = matches_equal_goals[matches_equal_goals['Win conditions'].str.len()<=1]\nwinners_overall = winners_home | winners_away\n\nwinners_other = matches_data['Win conditions'].str.len()>1 #.str converts series to string element wise\n\nwin_team_home = np.where(winners_home, matches_data['Home Team Name'], '') # parameters are condition, Incase if true, incase if false\nwin_team_away = np.where(winners_away, matches_data['Away Team Name'], '')","d5b9e92d":"not_draw_matches = matches_equal_goals[matches_equal_goals['Win conditions'].str.len()>1]\nwl = not_draw_matches['Win conditions'].str.split('(').str[1]\nHome_goals_Penalty = wl.str.split('-').str[0]\nsecond = wl.str.split('-').str[1]\nAway_goals_Penalty= second.str.split(\"\\)\").str[0]\n\n# splitted the win conditions column to find out who won beacuse the home team goals and away team goals are equal.so they are\n# not a draw mathces \n\nnot_draw_matches = pd.concat([not_draw_matches,Home_goals_Penalty,Away_goals_Penalty],axis=1)\nnot_draw_matches.columns = ['Year', 'Datetime', 'Stage', 'Stadium', 'City', 'Home Team Name',\n       'Home Team Goals', 'Away Team Goals', 'Away Team Name',\n       'Win conditions', 'Attendance', 'Half-time Home Goals',\n       'Half-time Away Goals', 'Referee', 'Assistant 1', 'Assistant 2',\n       'RoundID', 'MatchID', 'Home Team Initials', 'Away Team Initials',\n       'Home_goals_Penalty', 'Away_goals_Penalty']#renaming the column names of the peanlty goals\n\nwinner_by_penalty_home = not_draw_matches['Home_goals_Penalty'].astype(str).astype(int)>not_draw_matches['Away_goals_Penalty'].astype(str).astype(int)\nwinners_home_Penalty = not_draw_matches[winner_by_penalty_home]['Home Team Name']\nnot_draw_matches['winner'] = winners_home_Penalty\n\n\nwinner_by_penalty_away= not_draw_matches['Home_goals_Penalty'].astype(str).astype(int)<not_draw_matches['Away_goals_Penalty'].astype(str).astype(int)\nwinners_away_Penalty= not_draw_matches[winner_by_penalty_away]['Away Team Name']\n\nlosers_home_Penalty = not_draw_matches[winner_by_penalty_home]['Away Team Name']\nnot_draw_matches['loser'] = losers_home_Penalty\n\nlosers_away_Penalty = not_draw_matches[winner_by_penalty_away]['Away Team Name']\nnot_draw_matches['loser'] = losers_away_Penalty\n","e5efdeb6":"matches_data['winner'] = not_draw_matches['winner']\nmatches_data['winner'] = matches_data['winner'].fillna(value = matches_data[winners_home]['Home Team Name'] )\nmatches_data['winner'] = matches_data['winner'].fillna(value = matches_data[winners_away]['Away Team Name'] )\nmatches_data['winner'] = matches_data['winner'].fillna(value = 'Draw' )\n\nmatches_data['loser'] = not_draw_matches['loser']\nmatches_data['loser'] = matches_data['loser'].fillna(value = matches_data[winners_home]['Away Team Name'] )\nmatches_data['loser'] = matches_data['loser'].fillna(value = matches_data[winners_away]['Home Team Name'] )\nmatches_data['loser'] = matches_data['loser'].fillna(value = 'Draw' )","0a674218":"most_matches_won = matches_data['winner'].value_counts().reset_index()\nfig = plt.figure(figsize=(16,10))\nplt.grid(b=True,axis='both')\nsns.set_style(\"darkgrid\", {'grid.linestyle': '-'})\nwin_plt = sns.barplot(data=most_matches_won,x='index',y='winner')\nfor item in win_plt.get_xticklabels():\n    item.set_rotation(90)\nplt.xlabel(\"Countries\")\nplt.ylabel(\"number of matches\")\nplt.title('Total matches won by Teams and matches that are a draw')\nplt.show()","0f0ef01d":"top_10_teams = most_matches_won.drop(0,axis=0).head(10)\nfig = plt.figure(figsize=(12,12))\nplt.subplot(211)\nax = sns.barplot(\"winner\",\"index\",data=top_10_teams,\n                 linewidth=1,edgecolor=\"k\"*25)\nplt.grid(True)\nplt.title(\"Teams with the most win matches\")\nfor i,j in enumerate(\"Matches Won  : \" + top_10_teams[\"winner\"].astype(str)):\n    ax.text(0.5,i,j,fontsize=15,color=\"white\")\nplt.xlabel(\"\")\nplt.ylabel(\"\")\nplt.show()\n\nmost_matches_lost = matches_data['loser'].value_counts().reset_index()\nbottom_10_teams = most_matches_lost.drop(0,axis=0).head(10)\nfig = plt.figure(figsize=(12,12))\nplt.subplot(212)\nax = sns.barplot(\"loser\",\"index\",data=bottom_10_teams,palette=\"gnuplot_r\",\n                 linewidth=1,edgecolor=\"k\"*25)\nplt.grid(True)\nplt.title(\"Teams with the most lost matches\")\nfor i,j in enumerate(\"Matches Lost  : \" + bottom_10_teams[\"loser\"].astype(str)):\n    ax.text(0.5,i,j,fontsize=15,color=\"white\")\nplt.xlabel(\"\")\nplt.ylabel(\"\")\nplt.show()","b67ae690":"Home Team Goals and half time Home Goals have a high correlation, means the games where the team leads at halftime has won in most cases. That is , if the home team leads the game at halftime, there is high chance that home team wins, similarly if the away team leads, it will be away team who wins\n\nExtra Info about covariance and correlation: A measure used to indicate the extent to which two random variables change in tandem is known as covariance. A measure used to represent how strongly two random variables are related known as correlation. The value of correlation takes place between -1 and +1. Conversely, the value of covariance lies between -\u221e and +\u221e Covariance is affected by the change in scale, correlation is not influenced by the change in scale. Correlation is a special case of covariance which can be obtained when the data is standardized\n\nLet's Visualize the data","742f01fb":"Now We have a winner column which satisfies all the conditions(has winning team name and if the match is a draw), that is Teams who won by penalties(because their scorers were equal and they cannot be a draw), matches that were a draw and teams that lost","d5b9e016":" we can add a few columns for easier interpretation, winner,draw","bb058b2b":"6 countries have managed to win the world cup when they have hosted the tournament"}}