{"cell_type":{"2454aa52":"code","77a67555":"code","55db1f9c":"code","b766e1a9":"code","e0f596f4":"code","6e8814f2":"code","a107cd64":"code","741f8a6f":"markdown","2f082ca9":"markdown","7a697d7a":"markdown","5f2d1df1":"markdown","e59efad2":"markdown"},"source":{"2454aa52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\nimport re\n# Any results you write to the current directory are saved as output.","77a67555":"data_dictionary = pd.read_csv('..\/input\/cityofla\/CityofLA\/Additional data\/kaggle_data_dictionary.csv')\ndata_dictionary[data_dictionary['Field Name'] == 'ENTRY_SALARY_GEN']","55db1f9c":"sample_output = pd.read_csv('..\/input\/cityofla\/CityofLA\/Additional data\/sample job class export template.csv')\nsample_output.head()","b766e1a9":"bulletins_dir = 'cityofla\/CityofLA\/Job Bulletins\/'","e0f596f4":"all_files = glob.glob('..\/input\/' + bulletins_dir + \"\/*.txt\")","6e8814f2":"rows = []\nfor filename in all_files:\n    row = {}\n    fileValue = filename.split('\/')[5]\n    values = [x for x in re.split('(-?\\d+\\.?\\d*)', fileValue) if x != '']\n    try:\n        # Hardcoding alert! Swapping the data specific parsing\n        if 'DIRECTOR' in values[1]:\n            values[0] = values[0]+values[1]\n            values[1] = values[2]\n            values[3] = values[4]\n        row['FILE_NAME'] = fileValue\n        row['JOB_CLASS_TITLE'] = values[0]\n        row['JOB_CLASS_NO'] = values[1]\n        row['OPEN_DATE'] = values[3].replace('.', '')\n        rows.append(row)\n        with open(filename, encoding = \"ISO-8859-1\") as bulletinFile:\n            bulletinData = bulletinFile.read()\n            # Read annual salary, this will need to be processed further to map to the sample output\n            row['ANNUAL_SALARY'] = re.search('ANNUAL SALARY(\\W+)(.*\\n)', bulletinData).group(2)\n            # Open data is embedded both as file name and in the bulletin, change here based on content within the file\n            row['OPEN_DATE'] = re.search('Open Date(\\W+)(.*\\n)', bulletinData).group(2).split('\\n')[0]\n            # Get job duties\n            row['JOB_DUTIES'] = re.search('DUTIES(\\W+)(.*\\n)', bulletinData).group(0).split('\\n\\n')[1]\n            # Processing of educational qualifications needs population of a section. There is no common header for this,\n            # processing various flavors of this header\n            requirements = re.search('(REQUIREMENTS\/MINIMUM QUALIFICATIONS|REQUIREMENTS|REQUIREMENT\/MINIMUM QUALIFICATION)(\\W+)(.*\\n)', bulletinData).group(0).split('\\n\\n')[1]\n            row['QUALIFICATIONS'] = requirements\n            # Process notes looks to be the section related to driver's license, so lets pull that in\n            processNotes = re.search('PROCESS NOTES(\\W+)(.*\\n)', bulletinData).group(0).split('\\n\\n')[1]\n            row['PROCESS_NOTES'] = processNotes\n    except IndexError as e:\n        pass\n    except AttributeError as e1:\n        pass\ndf = pd.DataFrame(rows)\ndf.head()","a107cd64":"df['QUALIFICATIONS'] = df['QUALIFICATIONS'].fillna('')\ndf['PROCESS_NOTES'] = df['PROCESS_NOTES'].fillna('')\n# Set the open_data as date time (there is one bulletin that has some data issue which causes a failure in setting the data type)\ndf['OPEN_DATE'] = pd.to_datetime(df['OPEN_DATE'], errors='ignore')\ndf['DEGREE_NEEDED'] = ['Y' if 'degree' in x else 'N' for x in df['QUALIFICATIONS']]\n#df['DRIVERS_LICENSE_REQ'] = ['P' if 'driver\\'s license' in x else 'N' for x in df['PROCESS_NOTES']]\ndf['DRIVERS_LICENSE_REQ'] = ['R' if 'driver\\'s license is required' in x else 'N' for x in df['PROCESS_NOTES']]\nprint(df[df['DRIVERS_LICENSE_REQ'] == 'R'][['PROCESS_NOTES', 'DRIVERS_LICENSE_REQ']])","741f8a6f":"**Initial post processing**\n\nLet's set the license required based on values for the process notes","2f082ca9":"**Data Dictionary**\n\nLets take a look at the samples provided. First, the kaggle data dictionary. This gives some clues on how to relate expected output with the bulletin data.\nFor example, ENTRY_SALARY_GEN explains what should go into this entry.","7a697d7a":"**Process the data**\n\nFile name has embeded the job title, class code and the open date of the job. Using this information, FILE_NAME, JOB_CLASS_TITLE and JOB_CLASS_NO can be populated. One of the job title is 311 DIRECTOR which failed the splitting logic, so tweaked the processing to fix it. Input data is pre-processed and incremental data set is created. ","5f2d1df1":"**Sample Output**\n\n\"sample job class export template\" looks to be the final goal of CSV expected out of this kernel.","e59efad2":"**Let's get to work**\n\nDefine a variable pointing to the directory location of the job bulletins"}}