{"cell_type":{"b35b9308":"code","ee49d934":"code","776e59af":"code","6c0ded48":"code","8a6ca6ce":"code","1922840b":"code","04ebc95c":"code","bbf027c8":"code","1243e604":"code","a44bf876":"code","a4d96fba":"code","b6ca6dff":"code","96ebc056":"code","472b767d":"code","ee1a4487":"code","dd43ec4e":"code","1a3d3fd4":"code","e54ec5f8":"code","7b470cc2":"code","74512adc":"code","e022448c":"code","ee2008e8":"code","aeb6d9d6":"code","a33be8fd":"code","b648a7cf":"code","35963868":"code","d7338aae":"code","4d999c0c":"code","fc3b90da":"code","aa8b230d":"code","2df53c6a":"code","87c1160e":"code","41fdf52e":"code","f49207c4":"code","a6c371cc":"code","2e05d8a1":"code","a378165a":"code","24e16c0b":"code","5e70bf8c":"markdown","52746e3e":"markdown","d6444428":"markdown","c0abd947":"markdown","d05578ae":"markdown","c956a53e":"markdown","662d239d":"markdown","8f35d8ce":"markdown","f6524ff1":"markdown","9fb5c988":"markdown","5cbc3d27":"markdown","24e59994":"markdown","8d57f138":"markdown","e0ba44d3":"markdown","5cc0cce6":"markdown","ac60f0b2":"markdown","1a090d70":"markdown","2f14878b":"markdown","1fc7141a":"markdown","55689463":"markdown","3b356278":"markdown","465683a0":"markdown","64a26abb":"markdown","e76f51bd":"markdown","39e3eb6d":"markdown","6b2765eb":"markdown","bc1824b0":"markdown","f7bbe7e3":"markdown","d79d253f":"markdown","851279f5":"markdown","88a7ff49":"markdown","eaabc2da":"markdown","c2d8aefb":"markdown","1131f9e5":"markdown","e5403b3c":"markdown"},"source":{"b35b9308":"name = 'Bond'\n\n# Using the old .format() method:\nprint('The name is {var}.'.format(var=name))\n\n# Using f-strings:\nprint(f'The name is {name}.')\n\n# Pass !r to get the string representation:\nprint(f'The name is {name!r}')\n\nprint('\\n')\n\n# pass arguments inside a nested set of curly braces to set a minimum width for the field, \n# the alignment and even padding characters.\nBooks = [('Author', 'Topic', 'Pages'), ('Twain', 'Rafting', 601), ('Feynman', 'Physics', 95), ('Hamilton', 'Mythology', 144)]\nprint('The Book Data \\n')\nfor book in Books:\n    print(f'{book[0]:{10}} {book[1]:{8}} {book[2]:{7}}')\n    \nprint('\\n')\nprint('Date Time Formatting \\n')   \n# Date time formatting     \nfrom datetime import datetime\n\ntoday = datetime(year=2019, month=2, day=10)\n\nprint(f'{today:%B %d, %Y}')    ","ee49d934":"%%writefile test.txt\nHello, this is a quick test file.\nThis is the second line of the file.","776e59af":"# Open the text.txt file we created earlier\nfirst_file = open('..\/input\/test.txt')","6c0ded48":"# output shows that the file is now an object in memory\nfirst_file","8a6ca6ce":"# We can now read the file\nfirst_file.read()","1922840b":"# What if we try to read it again?\nfirst_file.read()","04ebc95c":"# Seek to the start of file (index 0)\nfirst_file.seek(0)","bbf027c8":"first_file.read()","1243e604":"# Readlines returns a list of the lines in the file\nfirst_file.seek(0)\nfirst_file.readlines()","a44bf876":"# closing the file once the operations are done. Not closing it might \n# cause issues when we try to edit the file through an editor outside python and \n# it could show errors like \"This file is being used\"\nfirst_file.close()","a4d96fba":"# We can use context managers to make file closing an automatic step and avoid problems like forgetting to close file\n\nwith open('..\/input\/test.txt','r') as txt:\n    all_lines = txt.readlines()\n    \nprint(all_lines)","b6ca6dff":"# Add a second argument to the function, 'w' which stands for write.\n# Passing 'w+' lets us read and write to the file\n\nfirst_file = open('test1.txt','w+')\n# Write to the file\nfirst_file.write('This is a new first line')\n# Read the file\nfirst_file.seek(0)\nfirst_file.read()","96ebc056":"first_file.close()  # always do this when you're done with a file","472b767d":"first_file = open('test1.txt','a+')\nfirst_file.write('\\nThis line is being appended to test.txt')\nfirst_file.write('\\nAnd another line here.')","ee1a4487":"first_file.seek(0)\nprint(first_file.read())","dd43ec4e":"first_file.close()  # always do this when you're done with a file","1a3d3fd4":"# with end argument\nwith open('..\/input\/test.txt','r') as txt:\n    for line in txt:\n        print(line, end='')  # the end='' argument removes extra linebreaks","e54ec5f8":"# without end argument\nwith open('..\/input\/test.txt','r') as txt:\n    for line in txt:\n        print(line)","7b470cc2":"try:\n    import PyPDF2\nexcept:\n    !pip install PyPDF2\n    import PyPDF2","74512adc":"# Notice we read it as a binary with 'rb'\nf = open('..\/input\/US_Declaration.pdf','rb')","e022448c":"pdf_reader = PyPDF2.PdfFileReader(f)\npdf_reader.numPages","ee2008e8":"# getting a page and extracting text from it\npage_one = pdf_reader.getPage(0)\npage_one_text = page_one.extractText()","aeb6d9d6":"print(page_one_text[:200])","a33be8fd":"f.close()","b648a7cf":"f = open('..\/input\/US_Declaration.pdf','rb')\npdf_reader = PyPDF2.PdfFileReader(f)\nfirst_page = pdf_reader.getPage(0)\npdf_writer = PyPDF2.PdfFileWriter()\npdf_writer.addPage(first_page)\npdf_output = open(\"Some_New_Doc.pdf\",\"wb\")\npdf_writer.write(pdf_output)\npdf_output.close()\nf.close()","35963868":"import re\n\ntext = \"The corn fields are ready. Call at 408-555-1234 for distribution!\"\npattern = 'corn'\nre.search(pattern,text)","d7338aae":"match = re.search(pattern,text)\n# the start and end index of match is contained in th output\nmatch","4d999c0c":"# we can output span tuple like this\nmatch.span()","fc3b90da":"print(match.start())\nprint(match.end())","aa8b230d":"## In case of more than one match case?","2df53c6a":"text = \"The corn fields are ready. Call at 408-555-1234 for distribution of corn!\"\npattern = 'corn'\nre.search(pattern,text)","87c1160e":"matches = re.findall(\"corn\",text)\nmatches","41fdf52e":"# to get match objects with better details\nprint('word matched  index \\n')\n\nfor match in re.finditer(\"corn\",text):\n    print(f'{match.group():{10}} {match.span()}')","f49207c4":"result=re.findall(r'\\w+','AV is largest Analytics community of India')\nprint(result[0])","a6c371cc":"result=re.findall(r'\\b\\w.','AV is largest Analytics community of India')\nprint (result)","2e05d8a1":"result=re.findall(r'\\d{2}-\\d{2}-\\d{4}','Amit 34-3456 12-05-2007, XYZ 56-4532 11-11-2011, ABC 67-8945 12-01-2009')\nprint (result)","a378165a":"result=re.findall(r'\\b[aeiouAEIOU]\\w+','AV is largest Analytics community of India')\nprint (result )","24e16c0b":"line = 'asdf fjdk;afed,fjek,asdf,foo' # String has multiple delimiters (\";\",\",\",\" \").\nresult= re.split(r'[;,\\s]', line)\nprint (result )","5e70bf8c":"Success! So always keep this cursor context in mind while working with files.","52746e3e":"<a id=\"1.1\"><\/a>\n## Formatted String Literals (f-strings)\nIntroduced in Python 3.6, <strong>f-strings<\/strong> offer several benefits over the older `.format()` string method. <br>For one, you can bring outside variables immediately into to the string rather than pass them through as keyword arguments:","d6444428":"### We can see that search gets the first occurance only. Then we have an alternative.","c0abd947":"<a id=\"3\"><\/a>\n# Working with PDF Files\n## Working with PyPDF2\n\nShowing the basics of the PyPDF2 library.","d05578ae":"<a id=\"4\"><\/a>\n# Regular Expressions\n\nRegular Expressions (sometimes called regex for short) allow a user to search for strings using almost any sort of rule they can come up with. For example, finding all capital letters in a string, or finding a phone number in a document. \n\nThe regular expression strange syntax is a byproduct of their flexibility. Regular expressions have to be able to filter out any string pattern you can imagine, which is why they have a complex string pattern format.\n\nRegular expressions are handled using Python's built-in **re** library. See [the docs](https:\/\/docs.python.org\/3\/library\/re.html) for more information.","c956a53e":"More formats available here https:\/\/docs.python.org\/3\/reference\/lexical_analysis.html#f-strings","662d239d":"It gives out what it matches with but here we have a plain text in search so we know what's going to come out. We need the position of the matches.","8f35d8ce":"It gives out blank because we can imagine the reading \"cursor\" is at the end of the file after having read it. So there is nothing left to read. We can reset the \"cursor\" like this:","f6524ff1":"### A Big Thanks to:\n* https:\/\/www.analyticsvidhya.com\/blog\/2015\/06\/regular-expression-python\/\n\n### Those without whom this tutorial wouldn't be possible\n* Pierian Data\n* https:\/\/www.udemy.com\/user\/joseportilla\/\n* https:\/\/www.linkedin.com\/in\/jmportilla\/\n* https:\/\/www.kaggle.com\/ashishsaxena2209","9fb5c988":"<a id=\"2.3\"><\/a>\n## Writing to a File\n\nBy default, the `open()` function will only allow us to read the file. We need to pass the argument `'w'` to write over the file.\n<div class=\"alert alert-danger\" style=\"margin: 20px\">**Use caution!**<br>\nOpening a file with 'w' or 'w+' *truncates the original*, meaning that anything that was in the original file **is deleted**!<\/div>","5cbc3d27":"### Q. Split a string with multiple delimiters","24e59994":"### More and more regex patterns can be made and captured using a combination of identifiers and quantifiers. Some of them are given in the tables below. The following article is recommended for quick but thorough understanding of regex. Here practice is the only bell that rings!\nhttps:\/\/www.analyticsvidhya.com\/blog\/2015\/06\/regular-expression-python\/","8d57f138":"<a id=\"2.1\"><\/a>\n## Creating a File with IPython\n#### Trick for jupyter notebooks!","e0ba44d3":"<a id=\"2.4\"><\/a>\n## Appending to a File\nPassing the argument `'a'` opens the file and puts the pointer at the end, so anything written is appended. Like `'w+'`, `'a+'` lets us read and write to a file. If the file does not exist, one will be created.","5cc0cce6":"<table><tr><th>Character<\/th><th>Description<\/th><th>Example Pattern Code<\/th><th >Exammple Match<\/th><\/tr>\n\n<tr ><td><span >\\d<\/span><\/td><td>A digit<\/td><td>file_\\d\\d<\/td><td>file_25<\/td><\/tr>\n\n<tr ><td><span >\\w<\/span><\/td><td>Alphanumeric<\/td><td>\\w-\\w\\w\\w<\/td><td>A-b_1<\/td><\/tr>\n\n\n\n<tr ><td><span >\\s<\/span><\/td><td>White space<\/td><td>a\\sb\\sc<\/td><td>a b c<\/td><\/tr>\n\n\n\n<tr ><td><span >\\D<\/span><\/td><td>A non digit<\/td><td>\\D\\D\\D<\/td><td>ABC<\/td><\/tr>\n\n<tr ><td><span >\\W<\/span><\/td><td>Non-alphanumeric<\/td><td>\\W\\W\\W\\W\\W<\/td><td>*-+=)<\/td><\/tr>\n\n<tr ><td><span >\\S<\/span><\/td><td>Non-whitespace<\/td><td>\\S\\S\\S\\S<\/td><td>Yoyo<\/td><\/tr><\/table>","ac60f0b2":"<table><tr><th>Character<\/th><th>Description<\/th><th>Example Pattern Code<\/th><th >Exammple Match<\/th><\/tr>\n\n<tr ><td><span >+<\/span><\/td><td>Occurs one or more times<\/td><td>\tVersion \\w-\\w+<\/td><td>Version A-b1_1<\/td><\/tr>\n\n<tr ><td><span >{3}<\/span><\/td><td>Occurs exactly 3 times<\/td><td>\\D{3}<\/td><td>abc<\/td><\/tr>\n\n\n\n<tr ><td><span >{2,4}<\/span><\/td><td>Occurs 2 to 4 times<\/td><td>\\d{2,4}<\/td><td>123<\/td><\/tr>\n\n\n\n<tr ><td><span >{3,}<\/span><\/td><td>Occurs 3 or more<\/td><td>\\w{3,}<\/td><td>anycharacters<\/td><\/tr>\n\n<tr ><td><span >\\*<\/span><\/td><td>Occurs zero or more times<\/td><td>A\\*B\\*C*<\/td><td>AAACC<\/td><\/tr>\n\n<tr ><td><span >?<\/span><\/td><td>Once or none<\/td><td>plurals?<\/td><td>plural<\/td><\/tr><\/table>","1a090d70":"<a id=\"2\"><\/a>\n# Files\n\nPython uses file objects to interact with external files on your computer.","2f14878b":"#### Table of Contents\n[1. Working with Strings](#1)\n\n* [Formatted String Literals (f-strings)](#1.1)\n\n[2. Files](#2)\n\n* [Creating a File with IPython](#2.1)\n\n* [Reading a File](#2.2)\n\n* [Writing to a File](#2.3)\n\n* [Appending to a File](#2.4)\n\n[3. Working with PDF Files](#3)\n* [Reading PDFs](#3.1)\n* [Adding to PDFs](#3.2)\n\n[4. Regular Expressions](#4)\n* [Searching for basic patterns](#4.1)\n* [Match Object](#4.2)\n* [Identifiers](#4.3)\n* [Quantifiers](#4.4)\n* [Example Problems and Solutions](#4.5)\n\n\n\n","1fc7141a":"### Q. Return the first two character of each word","55689463":"<a id=\"4.4\"><\/a>\n## Quantifiers","3b356278":"### Using the end argument","465683a0":"<a id=\"1\"><\/a>\n# Working with Strings\nThis section contains\n * Working with f-strings (formatted string literals) to format printed text\n * Working with Files - opening, reading, writing and appending files","64a26abb":"Now we've seen that re.search() will take the pattern, scan the text, and then returns a Match object. If no pattern is found, a None is returned.","e76f51bd":"<a id=\"3.2\"><\/a>\n## Adding to PDFs\n\nWe can not write to PDFs using Python because of the differences between the single string type of Python, and the variety of fonts, placements, and other parameters that a PDF could have.\n\nWhat we *can* do is copy pages and append pages to the end.","39e3eb6d":"<a id=\"4.2\"><\/a>\n## Match Object","6b2765eb":"# Introduction \n## This is the first notebook in a series of notebooks designed to cover NLP from basic to high level.","bc1824b0":"### Q. Return all words of a string those starts with vowel","f7bbe7e3":"<a id=\"2.2\"><\/a>\n## Reading a File","d79d253f":"<a id=\"4.5\"><\/a>\n## Some Example Problems from Analytics Vidhya \n###### (personal opinion: great resource for DS and ML)","851279f5":"### Q. Return date from given string","88a7ff49":"<a id=\"3.1\"><\/a>\n## Reading PDFs\n\nFirst we open a pdf, then create a reader object for it. Notice how we use the binary method of reading , 'rb', instead of just 'r'.","eaabc2da":"### This Segment ends here. In the next notebook we'll go through the basics of NLP.","c2d8aefb":"<a id=\"4.1\"><\/a>\n## Searching for basic patterns","1131f9e5":"<a id=\"4.3\"><\/a>\n## Identifiers","e5403b3c":"### Q. Return the first word of a given string\n"}}