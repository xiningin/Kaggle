{"cell_type":{"97b5b768":"code","0bfebefe":"code","31944d1a":"code","21fed467":"code","9e9d63fc":"code","e6fb5295":"code","200dd387":"code","11ee1d8d":"code","dd6bdb9a":"code","0f00b998":"code","978fdde3":"code","3302511a":"code","038af1f6":"code","13c83aaa":"code","605442d7":"code","3df1977c":"code","e4d911b2":"code","87d79898":"code","76268ea1":"code","b7e666d2":"code","d89929a4":"code","28db5668":"code","6f5e0a3f":"code","a91e3265":"code","4a7edd1f":"code","342b41ea":"code","85aa83af":"code","350e1b84":"code","1f7d85b8":"code","adcdaef1":"code","d830a71d":"code","57a77ce7":"code","af4ff039":"code","be749df4":"code","fb1dbba0":"code","0bec8d71":"code","03aba801":"code","942f2ec7":"code","22bb0cd2":"code","810b8793":"code","d8de185d":"code","54595cb7":"code","b8762770":"code","246d7c09":"code","c92f1f98":"code","617e255f":"code","989da757":"code","f9aceaa0":"code","e42b227e":"code","8491d5ca":"markdown","1868903a":"markdown","f7e4d484":"markdown","2d12e70b":"markdown","b9491ea7":"markdown","48303aef":"markdown"},"source":{"97b5b768":"from datetime import datetime, timedelta,date\nimport pandas as pd\n%matplotlib inline\nfrom sklearn.metrics import classification_report,confusion_matrix\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\n","0bfebefe":"import chart_studio.plotly as py\nimport plotly.offline as pyoff\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff","31944d1a":"import sklearn\nimport xgboost as xgb\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nimport warnings\nwarnings.filterwarnings(\"ignore\")","21fed467":"pyoff.init_notebook_mode()","9e9d63fc":"#create hv segment\ndf_hv = pd.DataFrame()\ndf_hv['customer_id'] = np.array([count for count in range(20000)])\ndf_hv['segment'] = np.array(['high-value' for _ in range(20000)])\ndf_hv['group'] = 'control'\ndf_hv.loc[df_hv.index<10000,'group'] = 'test' \n","e6fb5295":"df_hv.loc[df_hv.group == 'test', 'purchase_count'] = np.random.poisson(0.6, 10000)\ndf_hv.loc[df_hv.group == 'control', 'purchase_count'] = np.random.poisson(0.5, 10000)","200dd387":"df_hv.group.value_counts()","11ee1d8d":"df_hv.head(10)","dd6bdb9a":"df_hv.tail(10)","0f00b998":"test_results = df_hv[df_hv.group == 'test'].purchase_count\ncontrol_results = df_hv[df_hv.group == 'control'].purchase_count\n\nhist_data = [test_results, control_results]\n\ngroup_labels = ['test', 'control']\n\n# Create distplot with curve_type set to 'normal'\nfig = ff.create_distplot(hist_data, group_labels, bin_size=.5,\n                         curve_type='normal',show_rug=False)\n\nfig.layout = go.Layout(\n        title='High Value Customers Test vs Control',\n        plot_bgcolor  = 'rgb(243,243,243)',\n        paper_bgcolor  = 'rgb(243,243,243)',\n    )\n\n\n# Plot!\npyoff.iplot(fig)","978fdde3":"from scipy import stats \ntest_result = stats.ttest_ind(test_results, control_results)\nprint(test_result)","3302511a":"def eval_test(test_results,control_results):\n    test_result = stats.ttest_ind(test_results, control_results)\n    if test_result[1] < 0.05:\n        print('result is significant')\n    else:\n        print('result is not significant')\n        ","038af1f6":"eval_test(test_results,control_results)","13c83aaa":"#create hv segment\ndf_hv = pd.DataFrame()\ndf_hv['customer_id'] = np.array([count for count in range(20000)])\ndf_hv['segment'] = np.array(['high-value' for _ in range(20000)])\ndf_hv['prev_purchase_count'] = np.random.poisson(0.9, 20000)\n\n\ndf_lv = pd.DataFrame()\ndf_lv['customer_id'] = np.array([count for count in range(20000,100000)])\ndf_lv['segment'] = np.array(['low-value' for _ in range(80000)])\ndf_lv['prev_purchase_count'] = np.random.poisson(0.3, 80000)\n\ndf_customers = pd.concat([df_hv,df_lv],axis=0)\n","605442d7":"df_customers.head()","3df1977c":"df_customers.tail()","e4d911b2":"len(df_customers)","87d79898":"df_test = df_customers.sample(frac=0.9)\ndf_control = df_customers[~df_customers.customer_id.isin(df_test.customer_id)]","76268ea1":"df_test.segment.value_counts()","b7e666d2":"df_control.segment.value_counts()","d89929a4":"df_test_hv = df_customers[df_customers.segment == 'high-value'].sample(frac=0.9)\ndf_test_lv = df_customers[df_customers.segment == 'low-value'].sample(frac=0.9)\n\ndf_test = pd.concat([df_test_hv,df_test_lv],axis=0)\ndf_control = df_customers[~df_customers.customer_id.isin(df_test.customer_id)]","28db5668":"df_test.segment.value_counts()","6f5e0a3f":"df_control.segment.value_counts()","a91e3265":"#create hv segment\ndf_hv = pd.DataFrame()\ndf_hv['customer_id'] = np.array([count for count in range(30000)])\ndf_hv['segment'] = np.array(['high-value' for _ in range(30000)])\ndf_hv['group'] = 'A'\ndf_hv.loc[df_hv.index>=10000,'group'] = 'B' \ndf_hv.loc[df_hv.index>=20000,'group'] = 'C' \n","4a7edd1f":"df_hv.group.value_counts()","342b41ea":"df_hv.loc[df_hv.group == 'A', 'purchase_count'] = np.random.poisson(0.4, 10000)\ndf_hv.loc[df_hv.group == 'B', 'purchase_count'] = np.random.poisson(0.6, 10000)\ndf_hv.loc[df_hv.group == 'C', 'purchase_count'] = np.random.poisson(0.2, 10000)","85aa83af":"a_stats = df_hv[df_hv.group=='A'].purchase_count\nb_stats = df_hv[df_hv.group=='B'].purchase_count\nc_stats = df_hv[df_hv.group=='C'].purchase_count\n\nhist_data = [a_stats, b_stats, c_stats]\n\ngroup_labels = ['A', 'B','C']\n\n# Create distplot with curve_type set to 'normal'\nfig = ff.create_distplot(hist_data, group_labels, bin_size=.5,\n                         curve_type='normal',show_rug=False)\n\nfig.layout = go.Layout(\n        title='Test vs Control Stats',\n        plot_bgcolor  = 'rgb(243,243,243)',\n        paper_bgcolor  = 'rgb(243,243,243)',\n    )\n\n\n# Plot!\npyoff.iplot(fig)","350e1b84":"def one_anova_test(a_stats,b_stats,c_stats):\n    test_result = stats.f_oneway(a_stats, b_stats, c_stats)\n    if test_result[1] < 0.05:\n        print('result is significant')\n    else:\n        print('result is not significant')\n        ","1f7d85b8":"one_anova_test(a_stats,b_stats,c_stats)","adcdaef1":"df_hv.loc[df_hv.group == 'A', 'purchase_count'] = np.random.poisson(0.5, 10000)\ndf_hv.loc[df_hv.group == 'B', 'purchase_count'] = np.random.poisson(0.5, 10000)\ndf_hv.loc[df_hv.group == 'C', 'purchase_count'] = np.random.poisson(0.5, 10000)","d830a71d":"a_stats = df_hv[df_hv.group=='A'].purchase_count\nb_stats = df_hv[df_hv.group=='B'].purchase_count\nc_stats = df_hv[df_hv.group=='C'].purchase_count\n\nhist_data = [a_stats, b_stats, c_stats]\n\ngroup_labels = ['A', 'B','C']\n\n# Create distplot with curve_type set to 'normal'\nfig = ff.create_distplot(hist_data, group_labels, bin_size=.5,\n                         curve_type='normal',show_rug=False)\n\nfig.layout = go.Layout(\n        title='Test vs Control Stats',\n        plot_bgcolor  = 'rgb(243,243,243)',\n        paper_bgcolor  = 'rgb(243,243,243)',\n    )\n\n\n# Plot!\npyoff.iplot(fig)","57a77ce7":"one_anova_test(a_stats,b_stats,c_stats)","af4ff039":"#create hv segment\ndf_hv = pd.DataFrame()\ndf_hv['customer_id'] = np.array([count for count in range(20000)])\ndf_hv['segment'] = np.array(['high-value' for _ in range(20000)])\ndf_hv['group'] = 'control'\ndf_hv.loc[df_hv.index<10000,'group'] = 'test' \ndf_hv.loc[df_hv.group == 'control', 'purchase_count'] = np.random.poisson(0.6, 10000)\ndf_hv.loc[df_hv.group == 'test', 'purchase_count'] = np.random.poisson(0.8, 10000)\n\n\ndf_lv = pd.DataFrame()\ndf_lv['customer_id'] = np.array([count for count in range(20000,100000)])\ndf_lv['segment'] = np.array(['low-value' for _ in range(80000)])\ndf_lv['group'] = 'control'\ndf_lv.loc[df_lv.index<40000,'group'] = 'test' \ndf_lv.loc[df_lv.group == 'control', 'purchase_count'] = np.random.poisson(0.2, 40000)\ndf_lv.loc[df_lv.group == 'test', 'purchase_count'] = np.random.poisson(0.3, 40000)\n\ndf_customers = pd.concat([df_hv,df_lv],axis=0)\n","be749df4":"df_customers.head()","fb1dbba0":"import statsmodels.formula.api as smf \nfrom statsmodels.stats.anova import anova_lm\nmodel = smf.ols(formula='purchase_count ~ segment + group ', data=df_customers).fit()\naov_table = anova_lm(model, typ=2)","0bec8d71":"print(np.round(aov_table,4))","03aba801":"#create hv segment\ndf_hv = pd.DataFrame()\ndf_hv['customer_id'] = np.array([count for count in range(20000)])\ndf_hv['segment'] = np.array(['high-value' for _ in range(20000)])\ndf_hv['group'] = 'control'\ndf_hv.loc[df_hv.index<10000,'group'] = 'test' \ndf_hv.loc[df_hv.group == 'control', 'purchase_count'] = np.random.poisson(0.8, 10000)\ndf_hv.loc[df_hv.group == 'test', 'purchase_count'] = np.random.poisson(0.8, 10000)\n\n\ndf_lv = pd.DataFrame()\ndf_lv['customer_id'] = np.array([count for count in range(20000,100000)])\ndf_lv['segment'] = np.array(['low-value' for _ in range(80000)])\ndf_lv['group'] = 'control'\ndf_lv.loc[df_lv.index<40000,'group'] = 'test' \ndf_lv.loc[df_lv.group == 'control', 'purchase_count'] = np.random.poisson(0.2, 40000)\ndf_lv.loc[df_lv.group == 'test', 'purchase_count'] = np.random.poisson(0.2, 40000)\n\ndf_customers = pd.concat([df_hv,df_lv],axis=0)\n","942f2ec7":"import statsmodels.formula.api as smf \nfrom statsmodels.stats.anova import anova_lm\nmodel = smf.ols(formula='purchase_count ~ segment + group ', data=df_customers).fit()\naov_table = anova_lm(model, typ=2)","22bb0cd2":"print(np.round(aov_table,4))","810b8793":"from statsmodels.stats import power\nss_analysis = power.TTestIndPower()","d8de185d":"#create hv segment\ndf_hv = pd.DataFrame()\ndf_hv['customer_id'] = np.array([count for count in range(20000)])\ndf_hv['segment'] = np.array(['high-value' for _ in range(20000)])\ndf_hv['prev_purchase_count'] = np.random.poisson(0.7, 20000)\n","54595cb7":"df_hv.head()","b8762770":"purchase_mean = df_hv.prev_purchase_count.mean()\npurchase_std = df_hv.prev_purchase_count.std()","246d7c09":"print(np.round(purchase_mean,4),np.round(purchase_std,4))","c92f1f98":"effect_size = (0.75 - purchase_mean)\/purchase_std","617e255f":"alpha = 0.05\npower = 0.8\nratio = 1","989da757":"ss_result = ss_analysis.solve_power(effect_size=effect_size, power=power,alpha=alpha, ratio=ratio , nobs1=None) \nprint(ss_result)","f9aceaa0":"def calculate_sample_size(c_data, column_name, target,ratio):\n    value_mean = c_data[column_name].mean()\n    value_std = c_data[column_name].std()\n    \n    value_target = value_mean * target\n    \n    effect_size = (value_target - value_mean)\/value_std\n    \n    power = 0.8\n    alpha = 0.05\n    ss_result = ss_analysis.solve_power(effect_size=effect_size, power=power,alpha=alpha, ratio=ratio , nobs1=None) \n    print(int(ss_result))","e42b227e":"calculate_sample_size(df_hv, 'prev_purchase_count', 1.05,1)","8491d5ca":"## CREATE DATA","1868903a":"# T-test","f7e4d484":"# One-way Anova","2d12e70b":"# Two-way Anova","b9491ea7":"# Calculation sample size","48303aef":"# Blocking"}}