{"cell_type":{"6d7fc582":"code","c17f2427":"code","1e6c23c4":"code","8785a42a":"code","b230e346":"code","dee2da99":"code","15b8f9e3":"code","04e88f3a":"code","12b22575":"code","fd8613d9":"code","0e572cf4":"code","b0d24883":"code","20d252d9":"code","eb1aeb31":"code","54b02f2c":"code","8c365bbb":"code","1330348c":"code","99fe8b89":"code","e32b724e":"code","ab960a30":"code","5f4407a9":"code","8b6fb640":"code","09208b48":"code","5211b17b":"code","f2c4750e":"code","cc4fa20c":"code","00f74e5d":"code","7abf1e35":"code","b1b72ed0":"code","44c451c2":"code","6d442423":"code","af7d7bf0":"code","3ce114e1":"code","92af0ceb":"code","33ba11f2":"code","41ed4277":"code","508565b5":"code","adf62097":"code","7cf55b80":"code","1acdde85":"code","e5d720ea":"code","ba28125d":"code","251a38bc":"code","4a76d31b":"code","d00a458f":"code","97216dbe":"code","d0c087c3":"code","b910ca27":"code","7ffcf23e":"code","ffcef6ca":"code","e3c460dd":"code","30d112c5":"code","bc59c515":"code","04188e29":"markdown","fa04c9f3":"markdown","af41ccfb":"markdown","2a16703d":"markdown","440d7e7d":"markdown","6f0e4c42":"markdown","c27ab4fb":"markdown","fa7d6573":"markdown","0650a4cd":"markdown","be67e6fe":"markdown","c52ffdae":"markdown","56aa288d":"markdown","c0badd56":"markdown","7e3182f9":"markdown"},"source":{"6d7fc582":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c17f2427":"def print_full(x):\n    pd.set_option('display.max_rows', len(x))\n    print(x)\n    pd.reset_option('display.max_rows')","1e6c23c4":"data = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')","8785a42a":"data.head()","b230e346":"model_data = data.copy()","dee2da99":"clutter = ['Unnamed: 0','ID','Photo','Flag','Club Logo','Jersey Number','Joined','Special','Loaned From','Body Type', 'Release Clause',\n               'Weight','Height','Contract Valid Until','Wage','Value','Name','Club']\nmodel_data.drop(clutter, axis=1, inplace=True)","15b8f9e3":"model_data.info()","04e88f3a":"model_data.drop(model_data.iloc[:, 11:37], axis=1, inplace=True)","12b22575":"tempwork = model_data[\"Work Rate\"].str.split(\"\/ \", n = 1, expand = True)\nmodel_data[\"WorkRate1\"]= tempwork[0]\nmodel_data[\"WorkRate2\"]= tempwork[1]\n\nmodel_data.drop('Work Rate', axis=1, inplace = True)","fd8613d9":"def wage(val):\n    try:\n        act = float(val[1:-1])\n        end = val[-1:]\n        \n        if end.lower() == 'k':\n            act = act*1000\n        elif end.lower() == 'm':\n            act = act*10000000\n    except ValueError:\n        act = 0\n    return act\n\ndata['Value'] = data['Value'].apply(wage)\ndata['Wage'] = data['Wage'].apply(wage)","0e572cf4":"def club_details(club_name):\n    return data[data['Club'] == club_name].sort_values(by='Potential', ascending=False).head(5)","b0d24883":"club_details('Tranmere Rovers')","20d252d9":"import plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\n\ninit_notebook_mode(connected = True)\nimport plotly.graph_objs as go","eb1aeb31":"\n\npotential = pd.DataFrame(data[['Nationality','Potential']].sort_values(by = 'Potential', ascending=False)).head(100)\n\ntrace = [go.Choropleth(\n            locationmode = 'country names',\n            locations = potential['Nationality'],\n            text = potential['Nationality'],\n            z = potential['Potential'],\n)]\n\nlayout = go.Layout(title = 'Country of top 100 players in Fifa 19')\n\nfig = go.Figure(data = trace, layout = layout)\npy.iplot(fig)\n\n","54b02f2c":"x = data.groupby(by='Nationality', sort=False)['Overall'].max().head()\nx","8c365bbb":"data[['Name','Wage']].sort_values(by='Wage', ascending=False).head(15)\n#This will give Highest of them all.\n#data.loc[data['Wage'].idxmax()][1] ","1330348c":"count_age_overall = data.sort_values(by = 'Overall', ascending=False).head(15)[['Name','Overall', 'Age']]\ncount_age_overall","99fe8b89":"comparing_aspects = ['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys',\n       'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl',\n       'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance',\n       'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n       'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties',\n       'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving',\n       'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\n\nfor i in comparing_aspects:\n    print('{0}: {1}'.format(i, data.loc[data[i].idxmax()][1]))","e32b724e":"pot = data.sort_values(by='Potential')\ndiff = pd.DataFrame(data= [pot['Potential']-pot['Overall'], pot['Name']], index=['Potential  left', 'name']).T\ndiff = diff.sort_values(by = 'Potential  left', ascending=False).head(15)\ndiff","ab960a30":"plt.figure(figsize=(12,10))\nsb.distplot(data['Overall'])\nplt.title(\"Overall is normally distributed.\")","5f4407a9":"plt.figure(figsize=(12,10))\nsb.jointplot(data['Age'].head(500), data['Potential'].head(500), kind='hex')","8b6fb640":"sb.jointplot(data['Age'].head(500), data['Overall'].head(500), kind='hex', color='green')","09208b48":"count_age = data.sort_values(by = 'Potential', ascending=False).head(100)[['Name','Potential', 'Age']]\ncount_age\nsb.countplot(count_age['Age'])","5211b17b":"count_age_overall = data.sort_values(by = 'Overall', ascending=False).head(100)[['Name','Potential', 'Age']]\nsb.countplot(count_age_overall['Age'])","f2c4750e":"sb.lineplot(x=data['Age'], y=data['Overall'])","cc4fa20c":"age_data = data.copy()\ndef age_class(x):\n    if x<20:\n        x = 'Under 20'\n    elif x>=20 and x<25:\n        x = '21 to 25'\n    elif x>=25 and x<30:\n        x = '25 to 30'\n    elif x>=30 and x<35:\n        x = '30 to 30'\n    elif x>=35:\n        x = 'Over 35'\n    return x\n\nage_class = age_data['Age'].apply(age_class)","00f74e5d":"sb.boxplot(age_class, 'Wage', data = age_data)","7abf1e35":"plt.figure(figsize=(12,10))\nsb.distplot(data['Wage'])","b1b72ed0":"position_remap = {'LWB':'side_def',\n                  'LB':'side_def',\n                  'RB':'side_def',\n                  'RWB':'side_def',\n\n                  'LCB':'cent_def',\n                  'CB':'cent_def',\n                  'RCB':'cent_def',\n                  \n                  'LDM':'cent_mid',\n                  'CDM':'cent_mid',\n                  'RDM':'cent_mid',\n\n                  'LCM':'cent_mid',\n                  'CM':'cent_mid',\n                  'RCM':'cent_mid',\n                  'CAM':'cent_mid',\n\n                  'LW':'side_mid',\n                  'LM':'side_mid',\n                  'RM':'side_mid',\n                  'RW':'side_mid',\n                  'LAM':'side_mid',\n                  'RAM':'side_mid',\n\n                  'LF':'side_fwd',\n                  'LS':'side_fwd', \n                  'RS':'side_fwd',\n                  'RF':'side_fwd',\n                  'CF':'cent_fwd',\n                  'ST':'cent_fwd'\n                 }  \ndata['Position'] = data['Position'].map(position_remap)\nposition_group = data['Position']\nposition_group.dropna(axis=0)","44c451c2":"plt.figure(figsize=(18,10))\nsb.heatmap(data.groupby(position_group).mean()[comparing_aspects], annot=True)","6d442423":"remap_remap = {'side_mid':'mid',\n              'side_fwd':'fwd',\n              'side_def':'def',\n              'cent_def':'def',\n              'cent_mid':'mid',\n              'cent_fwd':'fwd'}\ndata['Position'] =  data['Position'].map(remap_remap)\nposition_group_remap = data['Position']\nposition_group_remap.dropna(axis=0)","af7d7bf0":"data['Position']","3ce114e1":"sb.boxenplot(data[data['Position']=='def']['Overall'], data[data['Position']=='def']['Position'])","92af0ceb":"sb.boxenplot(data[data['Position']=='fwd']['Overall'], data[data['Position']=='fwd']['Position'])","33ba11f2":"sb.boxenplot(data[data['Position']=='mid']['Overall'], data[data['Position']=='mid']['Position'])","41ed4277":"sb.stripplot(x='Position', y=\"Dribbling\", data=data.head(900), jitter=True,palette='Set1',dodge=True)","508565b5":"sb.stripplot(x='WorkRate1', y=\"Crossing\", data=model_data.head(900), jitter=True,palette='Set1',dodge=True)","adf62097":"sb.stripplot(x='WorkRate2', y=\"Dribbling\", data=model_data.head(900), jitter=True,palette='Set1',dodge=True)","7cf55b80":"sb.lmplot('Crossing', 'Dribbling', data.head(900), col='Position')","1acdde85":"sb.countplot(data['Preferred Foot'],hue=data['Position'])","e5d720ea":"sb.countplot(data['Preferred Foot'],hue=data['Weak Foot'] )","ba28125d":"differ = pd.DataFrame(data= [pot['Potential']-pot['Overall'], pot['Name'], pot['Potential'], pot['Overall']], index=['diff', 'name', 'potential', 'overall']).T\ndiffer = differ.sort_values(by = 'diff', ascending=False).head(15)\n\nplt.figure(figsize=(18,6))\nplt.bar(differ['name'], differ['potential'])\nplt.bar(differ['name'], differ['overall'])\nplt.title('15 players with the highest remaining potential left to grow')","251a38bc":"plt.figure(figsize=(12,10))\nplt.plot(data.groupby('Age').mean()['Potential'])\nplt.plot(data.groupby('Age').mean()['Overall'])\nplt.title(\"The potential meets overall somewhere near at 29 years old.\")\nplt.grid(linestyle='--')\nplt.xlabel('Age')\nplt.ylabel('Rating')","4a76d31b":"model_data['Nationality'].unique()","d00a458f":"model_data.drop('Nationality', axis=1, inplace=True)","97216dbe":"model_data = pd.get_dummies(model_data)","d0c087c3":"print_full(model_data.isna().sum())","b910ca27":"model_data.dropna(inplace=True)","7ffcf23e":"print_full(model_data.isna().sum())","ffcef6ca":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import r2_score, mean_absolute_error, auc","e3c460dd":"X = model_data.drop('Overall', axis=1)\ny = model_data.Overall\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","30d112c5":"model1 = LinearRegression()\nmodel2 = SVR()\nmodels = [model1, model2]","bc59c515":"for model in models:\n    model.fit(X_train, y_train)\n    preds = model.predict(X_test)\n    print(\"For model {} r2 score is {}\\n\".format(model, r2_score(y_test, preds)))\n    print(\"For model {} mean absolute error is {}\\n\".format(model, mean_absolute_error(y_test, preds)))","04188e29":"Position","fa04c9f3":"# Feature Engineering\nThe data for player Wage is in String format with annotations 'K' as in thousand, 'M' as in million.","af41ccfb":"# Modelling","2a16703d":"Retrieving the data of given club name.","440d7e7d":"**Preferred Foot**","6f0e4c42":"**Top 15 highest paid player**","c27ab4fb":"**Players with the highest potential left to grow**","fa7d6573":"1. Lets have glimpse of the data that we have.","0650a4cd":"**Highest potential of players in each nation**","be67e6fe":"This shows that wage in our dataset is highly skewed. To confirm this hypothesis we'll plot distribution of wage.","c52ffdae":"**Highest Overall Potential Players**","56aa288d":"# Exploratory analysis","c0badd56":"# Data Cleaning","7e3182f9":"# Data Analysis"}}