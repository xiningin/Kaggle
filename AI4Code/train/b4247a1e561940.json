{"cell_type":{"f8af2e2f":"code","7fdeda87":"code","429b998e":"code","b82da83a":"code","553fef84":"code","a2f7c5bd":"code","bad32103":"code","72cfc7cf":"code","50d5962d":"code","025356f8":"code","23311dae":"code","73fe8eef":"code","60d40e89":"code","e7f39709":"code","9325bb9b":"code","667c4f9e":"code","9691f22e":"code","bb3d410a":"code","d5c7e998":"code","0fc2afff":"code","2e44a15f":"code","56edff55":"code","621ff132":"code","926719a6":"code","333f5d2f":"code","1b7d07a9":"code","a1fd929b":"code","fd72f732":"code","61488ff6":"code","996aa9f3":"code","355d9152":"code","a0ff918d":"code","9702cc2c":"code","776f6180":"code","1cad9f31":"code","52ed3cf8":"code","9cad1936":"code","ebeadafa":"code","b550d636":"code","736b771f":"code","1138f456":"code","5b49d04a":"code","e99259c0":"code","5218756f":"code","46c7417e":"code","4259dcb0":"code","d496b659":"code","05830485":"code","bc03f1ae":"code","bf77fc9d":"code","414ecfea":"code","3bc5f32c":"code","cf0089ca":"code","85c4cf78":"code","474b1ec5":"code","43bd01e3":"code","51bbe35b":"code","310a1287":"code","aa4c1d58":"code","70898637":"code","5bfa999a":"markdown","9d91423a":"markdown","898ead41":"markdown","7c77bcc9":"markdown","6f70c476":"markdown","4931602c":"markdown","4e6b5455":"markdown","0ec51027":"markdown","fee3ed84":"markdown","1c38ab31":"markdown","f3a90056":"markdown","2514cb7b":"markdown","bfd4325f":"markdown","ddd60bb3":"markdown","75c3c360":"markdown","f2582c90":"markdown","f8d855d6":"markdown","18a4a6d8":"markdown"},"source":{"f8af2e2f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\nimport warnings \nwarnings.filterwarnings('ignore')","7fdeda87":"df = pd.read_csv(\"..\/input\/used-bike-price-in-india\/bikes.csv\")\ndf.sample(8)","429b998e":"df.info()","b82da83a":"df.shape","553fef84":"#Checking for null values\n\ndf.isnull().sum()","a2f7c5bd":"#Dropping null values\ndf.dropna(inplace=True)","bad32103":"df.duplicated().sum()","72cfc7cf":"df.shape","50d5962d":"#Removing values where price==0\n#Because price can't be 0\ndf = df[df['price']>0]","025356f8":"df.shape","23311dae":"sns.distplot(df['price'])","73fe8eef":"df['model_name'] = df['model_name'].str.replace('Royal Enfield','Royal-Enfield')","60d40e89":"#Extracting first str(word) from model_name\n#This gives the company of the vehicle\ndf['company'] = df['model_name'].apply(lambda x:\" \".join(x.split()[0:1]))","e7f39709":"freq_company = df['company'].value_counts()[df['company'].value_counts()>=25].index.tolist()\ndf = df[df['company'].isin(freq_company)]","9325bb9b":"df['company'].value_counts()","667c4f9e":"# sns.countplot(df['company'])\n# plt.xticks(rotation='vertical')\n# plt.show()\n\ndf['company'].value_counts().plot(kind='bar')","9691f22e":"sns.barplot(x=df['company'],y=df['price'],palette='magma')\nplt.xticks(rotation='vertical')\nplt.show()","bb3d410a":"#Extracting 2nd word to get the bike's model\ndf['model'] = df['model_name'].apply(lambda x:\" \".join(x.split()[1:2]))","d5c7e998":"#Taking model which appeared in data 10 or more times\nfreq_model = df['model'].value_counts()[df['model'].value_counts()>=10].index.tolist()\ndf = df[df['model'].isin(freq_model)]","0fc2afff":"df.model.value_counts()","2e44a15f":"plt.figure(figsize=(14,8))\ndf['model'].value_counts().plot(kind='bar')","56edff55":"plt.figure(figsize=(14,8))\nsns.barplot(x=df['model'],y=df['price'],palette='mako')\nplt.xticks(rotation='vertical')\nplt.show()","621ff132":"sns.countplot(df['model_year'],palette='viridis')\nplt.xticks(rotation='vertical')\nplt.show()","926719a6":"plt.subplot(1,2,1)\nsns.regplot(y=df['price'],x=df['model_year'])\nplt.subplot(1,2,2)\nsns.scatterplot(y=df['price'],x=df['model_year'])","333f5d2f":"#Checking for unique values in kms_driven\ndf.kms_driven.unique()","1b7d07a9":"df['kms_driven'] = df['kms_driven'].str.replace('Km','')\n\n#Removing rows containing Mileage in kms_driven\ndf = df[df['kms_driven'].apply(lambda x : True if x.find(\"Mil\") == -1 else False)] \n\ndf = df[df['kms_driven'] != 'Yes ']\n#Converting the str values to int type\ndf['kms_driven'] = df['kms_driven'].astype(int)","a1fd929b":"df.shape","fd72f732":"sns.distplot(df['kms_driven'])","61488ff6":"sns.scatterplot(y=df['price'],x=df['kms_driven'])","996aa9f3":"df.owner.unique()","355d9152":"#Extracting the first word\n#This gives the number in str type (like second,third)\n#They can be converted easily into numeric data\ndf['owner'] = df['owner'].apply(lambda x:\" \".join(x.split()[0:1]))","a0ff918d":"df['owner'].value_counts().plot(kind='bar')","9702cc2c":"# plt.figure(figsize=(10,4))\n\nsns.barplot(y=df['price'],x=df['owner'])\nplt.xticks(rotation='vertical')\nplt.show()","776f6180":"df.mileage.unique()","1cad9f31":"#Removing (\\n,kmpl,KMPL etc) to get the numeric data\ndf['mileage'] = df['mileage'].str.replace(\"\\n\",'')\ndf['mileage'] = df['mileage'].str.replace(\"kmpl\",'')\ndf['mileage'] = df['mileage'].str.replace(\"KMPL\",'')\ndf = df[df['mileage'] != ' Liquid Cooled']\ndf = df[df['mileage'] != ' ']","52ed3cf8":"#Taking mean of the values given in a range (eg. 45-60 kmpl)\n#If splitting gives 2 str then we convert them into int and take their mean\n#If splitting gives 1 str then it used as it is after conversion\n\ndf['mileage'] = df['mileage'].apply(lambda x : float(x) if len(x.split(\"-\")) == 1  else  (int(x.split(\"-\")[0]) + int(x.split(\"-\")[1])) \/2 )","9cad1936":"sns.distplot(df['mileage'])","ebeadafa":"sns.boxplot(df['mileage'])","b550d636":"sns.regplot(y=df['price'],x=df['mileage'])","736b771f":"df['power'].unique()","1138f456":"#Converting the unit to hp(bhp)","5b49d04a":"df['power'] = df['power'].astype(\"str\")\ndf['power'] = df['power'].apply(lambda x : x.upper().replace(\"BHP\",'').strip())\n\n# Handling 29.9 hp \/ 22 kW type data\ndf['power']  = df['power'].apply(lambda x : x if x.find(\"HP\") == -1 else str(float(x[:x.find(\"HP\")-1])))\n#1 kw = 1.34hp\ndf['power'] = df['power'].apply(lambda x : x if x.find(\"KW\") == -1 else str(float(x[:x.find(\"KW\")-1])*1.34))\n#1 ps = 0.98592 hp\ndf['power'] = df['power'].apply(lambda x : x if x.find(\"PS\") == -1 else str(float(x[:x.find(\"PS\")-1])*0.98592))\n\ndf['power'] = df['power'].astype(float)\n#Taking figure upto 2 decimal palces\ndf['power'] = round(df['power'],2)","e99259c0":"sns.distplot(df['power'],bins=25)","5218756f":"sns.boxplot(df['power'])","46c7417e":"sns.regplot(y=df['price'],x=df['power'])","4259dcb0":"df['location'].unique()","d496b659":"freq_location = df['location'].value_counts()[df['location'].value_counts()>=10].index.tolist()\ndf = df[df['location'].isin(freq_location)]","05830485":"plt.figure(figsize=(14,8))\nsns.barplot(x=df['location'],y=df['price'],palette='mako')\nplt.xticks(rotation='vertical')\nplt.show()","bc03f1ae":"df = df.drop(['model_name'],axis=1)","bf77fc9d":"sns.pairplot(df)","414ecfea":"plt.figure(figsize=(10,5))\nsns.heatmap(df.corr(),annot=True)","3bc5f32c":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder,OrdinalEncoder,MinMaxScaler\n\ncategory_transformer = ColumnTransformer([\n    (\"min_max_scaler\",MinMaxScaler(),['kms_driven','mileage','power','model_year']),\n    (\"owner_ordinal_enc\",OrdinalEncoder(categories=[['fourth','third','second','first']],dtype=np.int16),['owner']),\n    (\"brand_location_ohe\",OneHotEncoder(sparse=False,handle_unknown='error',drop='first',),['location','model','company'])\n],remainder='passthrough')","cf0089ca":"from sklearn.pipeline import Pipeline\n# from sklearn.metrics import r2_score,mean_absolute_error\nfrom sklearn.model_selection import  RandomizedSearchCV   #GridSearchCV can also be used instead of RandomizedSearchCV","85c4cf78":"X = df.drop(columns=['price'])\ny = df['price']\n# y = np.log(df['price'])\n\n#Splitting dataset into two parts\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.20,random_state=2)","474b1ec5":"#Importing Regression Model Algorithms\n\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor,AdaBoostRegressor,ExtraTreesRegressor\nfrom sklearn.svm import SVR\nfrom xgboost import XGBRegressor","43bd01e3":"pipeline_lr=Pipeline([('col_tnf',category_transformer),\n                      ('linear',LinearRegression())])","51bbe35b":"pipeline_las=Pipeline([('col_tnf1',category_transformer),\n                     ('lasso',Lasso())])\n\npipeline_ridge=Pipeline([('col_tnf2',category_transformer),\n                     ('ridge',Ridge())])\n\npipeline_knn=Pipeline([('col_tnf3',category_transformer),\n                     ('knn',KNeighborsRegressor())])\n\npipeline_dt=Pipeline([('col_tnf4',category_transformer),\n                     ('dt',DecisionTreeRegressor())])\n\npipeline_svm=Pipeline([('col_tnf5',category_transformer),\n                     ('svm',SVR())])\n\npipeline_rf=Pipeline([('col_tnf6',category_transformer),\n                      ('rf',RandomForestRegressor())])\n\npipeline_gbr=Pipeline([('col_tnf7',category_transformer),\n                     ('gbr',GradientBoostingRegressor())])\n\npipeline_abr=Pipeline([('col_tnf8',category_transformer),\n                     ('abr',AdaBoostRegressor())])\n\npipeline_etr=Pipeline([('col_tnf9',category_transformer),\n                     ('etr',ExtraTreesRegressor())])\n\npipeline_xgb=Pipeline([('col_tnf10',category_transformer),\n                     ('xgb',XGBRegressor())])","310a1287":"pipelines = [pipeline_lr, pipeline_las,pipeline_ridge,pipeline_knn, pipeline_dt,pipeline_svm,pipeline_rf,pipeline_gbr,pipeline_abr,pipeline_etr,pipeline_xgb]","aa4c1d58":"pipe_dict = {0: 'Linear Regression',1: 'Lasso Regression',2: 'Ridge Regression',3: 'KNN',\n             4: 'Decision Tree', 5: 'SVM', 6: 'RandomForest' , 7: 'Gradient Boost',\n             8: 'Ada Boost' , 9 : 'Extra Tree', 10: 'XGBoost'}\n\n# Fit the pipelines\nfor pipe in pipelines:\n    pipe.fit(X_train, y_train)","70898637":"for i,model in enumerate(pipelines):\n    print(\"{} Test Accuracy: {}\".format(pipe_dict[i],model.score(X_test,y_test)))","5bfa999a":"# **Data Preprocessing + EDA**","9d91423a":"#### **Model_Year**","898ead41":"# **Data Cleaning**","7c77bcc9":"# **Feature Engineering and Selection**","6f70c476":"# Model Training","4931602c":"# Model Building","4e6b5455":"Taking all columns into account as every feature is showing co-relation to Price","0ec51027":"#### **Previous Owners**","fee3ed84":"* Above cell of code selects the company which appeared 25 or more times in the dataset\n* And dataset is sliced according to it","1c38ab31":"#### **Location**","f3a90056":"### **Hope it helps**","2514cb7b":"# **Loading Dataset**","bfd4325f":"#### **Power**","ddd60bb3":"#### **Bike's Model**","75c3c360":"# **Multivariate Analysis**","f2582c90":"#### **KMS Driven**","f8d855d6":"#### **Bike's Company**","18a4a6d8":"#### **Mileage**"}}