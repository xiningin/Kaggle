{"cell_type":{"6e213a9e":"code","14c382bc":"code","f48ee76c":"code","c783435d":"code","d2782c45":"code","8e3854af":"code","e47feaf3":"code","4a230904":"code","32711493":"code","a815fd0d":"code","e0cb1b96":"code","05d4086a":"code","5f4f0ec7":"code","4c400937":"code","03fc30f5":"code","2df13df9":"code","e6465d2a":"code","dd2af3d7":"code","d6f69759":"code","b82e63d5":"code","4f0e9496":"code","fb11d21e":"code","af07cd6b":"code","6cf1dfce":"code","30088f0a":"code","6a8b8fd7":"code","421038da":"code","a3cd9a6e":"code","84a514b4":"code","cb5f4733":"code","5ef11128":"code","8532b258":"code","62e161d1":"code","3f10d280":"code","11287d28":"code","d568ffd4":"code","e576ad91":"code","5e0e2ed1":"code","f9ece2e3":"code","443dfb03":"code","8ad403bf":"code","6d5e12b6":"code","5230ef8b":"code","c53029ee":"markdown","e12a3052":"markdown","753f8e34":"markdown","dce08eaa":"markdown","56eba0d7":"markdown","e0347014":"markdown","8819d051":"markdown","88e311dc":"markdown","5737668f":"markdown"},"source":{"6e213a9e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","14c382bc":"data = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\ndata.head()","f48ee76c":"rating = pd.DataFrame(data.groupby('rating').show_id.count()).reset_index()\nrating","c783435d":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(20,6))\nsns.barplot(x=\"rating\", y=\"show_id\", data=rating)","d2782c45":"# consider which countries are making films\nimport re\n\ncountry = pd.DataFrame(data.country.value_counts()).reset_index()\ncountry_unique = set()\nfor val in list(country['index']):\n    country = re.findall(r\"[\\&\\w\\s\\-]+\", val)\n    for unique in country:\n        country_unique.add(unique.lstrip())\n\ncountry_cinema = pd.DataFrame()\ncountry_cinema['country'] = list(country_unique)\ncountry_cinema[\"count\"] = [0 for i in country_cinema['country']]\ncountry_cinema","8e3854af":"country_cinema[country_cinema.country == \"Armenia\"].index[0]","e47feaf3":"for country in country_cinema.country:\n    i = country_cinema[country_cinema.country == country].index[0]\n    for val in data.country:\n        val = str(val)\n        if val.count(country) > 0:\n            country_cinema[\"count\"][i] += 1\n            \ncountry_cinema        ","4a230904":"# most of all movies were shot\nprint(country_cinema[country_cinema[\"count\"] == country_cinema[\"count\"].max()])","32711493":"plt.figure(figsize=(60,12))\nsns.barplot(x=country_cinema[\"country\"], y=country_cinema[\"count\"])","a815fd0d":"data_nan = pd.DataFrame(data.isnull().sum()).reset_index()\ndata_nan = data_nan.rename(columns={\"index\":\"col\", 0:\"count_nan\"})\ndata_nan[\"%\"] = data_nan.count_nan \/ data.shape[0] * 100 \ndata_nan","e0cb1b96":"count_type = pd.DataFrame(data.groupby('type').show_id.count()).reset_index()\ncount_type","05d4086a":"sns.barplot(x=count_type.type, y=count_type.show_id)","5f4f0ec7":"year = pd.DataFrame(data.groupby(['type','release_year']).type.count())\nyear = year.rename(columns={'type':'count'}).reset_index()\nyear","4c400937":"plt.figure(figsize=(20,6))\n\nsns.lineplot(x=\"release_year\", y=\"count\", hue=\"type\", data=year)","03fc30f5":"cast = pd.DataFrame(data.cast.value_counts()).reset_index()\ncast","2df13df9":"list(data.cast.unique())","e6465d2a":"actors_unique = set()\nfor val in list(cast['index']):\n    actors = val.split(\",\")\n    for unique in actors:\n        actors_unique.add(unique.lstrip())\n\ndata_actors = pd.DataFrame()\ndata_actors['actor'] = list(actors_unique)\ndata_actors[\"count_cinema\"] = [0 for i in data_actors['actor']]\ndata_actors","dd2af3d7":"for actor in data_actors.actor:\n    i = data_actors[data_actors.actor == actor].index[0]\n    for vals in data.cast:\n        vals = str(vals).split(\",\")\n        for val in vals:\n            if val == actor:\n                data_actors.count_cinema[i] += 1\n            \ndata_actors ","d6f69759":"name = data_actors[data_actors.count_cinema == data_actors.count_cinema.max()].actor.values[0]\ncount_cinema = data_actors[data_actors.count_cinema == data_actors.count_cinema.max()].count_cinema.values[0]","b82e63d5":"# most popular actor is ....\nprint(\"most popular actor is \", name, \" in \", count_cinema, \" cinema\")","4f0e9496":"data.dtypes","fb11d21e":"def Type_cinema(column, name_new_columns):\n    cinema = []\n    \n    if name_new_columns == \"Movie\":\n        i = [1,0]\n    else:\n        i = [0,1]\n        \n    for val in column:\n        if val == \"Movie\":\n            cinema.append(i[0])\n        else :\n            cinema.append(i[1])\n    return cinema","af07cd6b":"X = pd.DataFrame()\nX[\"show_id\"] = data.show_id\nX[\"Movie\"] = Type_cinema(data.type, \"Movie\")\nX[\"TV_Show\"] = Type_cinema(data.type, \"TV_Show\")\nX","6cf1dfce":"# break the release date into intervals\n\nmin_year = data.release_year.min()\nmax_year = data.release_year.max()\nn = data.release_year.count()\nprint(min_year, max_year, n)\n\nimport math\n\n# to determine the size of the interval, we use the Sturges formula\n\nh = round((max_year - min_year) \/ (1 + math.log(n,2))) \n\nprint(h)\n\n# we divide the initial data into m intervals\n\nm = round(1 + math.log(n,2))\n\nprint(m)\n\n# initial value\n\nx_start = min_year - math.floor(h\/2)\n\nprint(x_start)\n\n# we get intervals\n\nintervals = []\nfor i in range(m):\n    \n    interval = [x_start, x_start + h]\n    intervals.append(interval)\n    x_start = interval[1]\n\nprint(intervals)","30088f0a":"i = 0\nfor interval in intervals:\n    i = i + 1\n    value = []\n    if i == m:\n        for value_col in data.release_year:\n            if value_col <= int(interval[1]) and value_col >= int(interval[0]):\n                val = 1\n            else:\n                val = 0\n            value.append(val)\n    else:\n        for value_col in data.release_year:\n            if value_col < int(interval[1]) and value_col >= int(interval[0]):\n                val = 1\n            else:\n                val = 0\n            value.append(val)\n    \n    X[\"[\"+str(interval[0])+\" ,\"+str(interval[1]) + \")\"] = value","6a8b8fd7":"X","421038da":"# whether we split the data into a series or not\n\nserials = []\nfor val in data.duration:\n    if val.count(\"Season\") > 0:\n        serials.append(1)\n    else:\n        serials.append(0)","a3cd9a6e":"X[\"Serial\"] = serials","84a514b4":"X","cb5f4733":"# add time\npattern = r\"[\\d]+\"\n\ntime_min = []\nfor val in data.duration:\n    if val.count(\"min\") > 0:\n        time_min.append(re.findall(pattern, val)[0])\n    else:\n        time_min.append(None)","5ef11128":"X[\"time\"] = time_min","8532b258":"X","62e161d1":"X.dtypes","3f10d280":"# let's try to figure out the genre\n\nlisted_in_unique = set()\nfor val in list(data.listed_in.unique()):\n    listed = re.findall(r\"[\\&\\w\\s\\-]+\\'[\\&\\w\\s\\-]+|[\\&\\w\\s\\-]+\", val)\n    for unique in listed:\n        listed_in_unique.add(unique.lstrip())\nlisted_in_unique\n","11287d28":"for genre in listed_in_unique:\n    a = []\n    for val in data.listed_in:\n        if val.count(genre) > 0:\n            a.append(1)\n        else:\n            a.append(0)\n    X[genre] = a ","d568ffd4":"X","e576ad91":"# Reting cinema \ndata.rating.unique()","5e0e2ed1":"# parents will not be considered\nratings = {\"0+\":['TV-PG', 'TV-Y', 'TV-G', 'PG', 'G' ], \n           \"7+\":['TV-Y7-FV', 'TV-Y7'], \n           \"13+\":['TV-14', 'PG-13'], \n           \"17+\":['NC-17', 'TV-MA', 'R'],\n           \"not_rated\":['NR', None, 'UR']}\n\n\nfor category in ratings:\n    \n    a = []\n    for val in data.rating:\n        i = 0\n        for rating in ratings[category]:\n            if val == rating:\n                i = 1\n        if i == 1:\n            a.append(1)\n        else :\n            a.append(0)\n    \n    X[category] = a","f9ece2e3":"X.head()","443dfb03":"X.shape[0] == data.shape[0]","8ad403bf":"data_nan = pd.DataFrame(X.isnull().sum()).reset_index()\ndata_nan = data_nan.rename(columns={\"index\":\"col\", 0:\"count_nan\"})\ndata_nan[\"%\"] = data_nan.count_nan \/ data.shape[0] * 100 \ndata_nan","6d5e12b6":"show = data.groupby('country').show_id.count()\nshow[show ==","5230ef8b":"data[data.title == \"Love\"]","c53029ee":"answer: 'TV-MA' --- 17+ or with parents","e12a3052":"# Reting cinema \n\n* 'TV-PG' --- 0+ but parents\n* 'TV-MA' --- 17+ or with parents\n* 'TV-Y7-FV' --- 7+\n* 'TV-Y7' --- 7+\n* 'TV-14' --- 13+\n* 'R' --- 17+ or with parents\n* 'TV-Y' --- 0+\n* 'NR' --- not rated\n* 'PG-13' --- 13+\n* 'TV-G' --- 0+\n* 'PG' (Parental quidance) --- 0+ but parents\n* 'G' (General) --- 0+\n* 'UR' (unrated) --- before rating introduction\n* 'NC-17' --- 17+","753f8e34":"What more Movie or TV Show?","dce08eaa":"Percent values = nan in rating ","56eba0d7":"# most popular actor","e0347014":"# what percentage no data?","8819d051":"Type data:","88e311dc":"# I don\u2019t know yet why calculations at the bottom","5737668f":"# which films are made more\n\n"}}