{"cell_type":{"03632c70":"code","913a1ff2":"code","505a183a":"code","92ddab9b":"code","9d4a16b4":"code","8a028a39":"code","2b669864":"code","c993e1e5":"code","486e8f3f":"code","53e67d50":"code","e9551a51":"code","833d45a5":"code","d327e7ea":"code","d75c9b45":"code","5134de6d":"code","711cc417":"code","fff74f0d":"code","b0dad28f":"code","1e022e76":"code","2d44d6b9":"code","e113471a":"code","37c06fee":"code","22603a10":"code","1a448a29":"code","4912ff87":"code","1371946c":"code","925db5d4":"code","fb0e0a8d":"code","0f48a2bc":"code","0526e8bf":"markdown","dd52fa03":"markdown","0e7973a0":"markdown","b955569a":"markdown","055e89ac":"markdown","bef22a2a":"markdown","c9d7a4c7":"markdown","99c28e1a":"markdown","d992c43c":"markdown"},"source":{"03632c70":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","913a1ff2":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nplt.style.use('fivethirtyeight')\nsns.set_style('darkgrid')","505a183a":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, GlobalMaxPooling1D, LSTM, Bidirectional, Embedding, Dropout","92ddab9b":"df = pd.read_csv(\"\/kaggle\/input\/200000-jeopardy-questions\/JEOPARDY_CSV.csv\")\ndf = df[df[' Value'] != 'None']","9d4a16b4":"display(df.head(3))\ndisplay(df.tail(3))","8a028a39":"print(\"Dataset has \" + str(df.shape[0]) + \" rows \\nAnd \" + str(df.shape[1]) + \" columns\")\nprint(\"\\nFeatures :\\n\", df.columns.tolist())\nprint(\"\\nMissing Values :\", df.isnull().values.sum())","2b669864":"df.info()","c993e1e5":"df.isnull().sum()","486e8f3f":"df[' Answer'].value_counts().to_frame()","53e67d50":"df[' Answer'] = df[' Answer'].fillna(df[' Answer'].mode()[0])","e9551a51":"df[' Air Date'] = pd.to_datetime(df[' Air Date'])","833d45a5":"df[' Round'].value_counts().to_frame()","d327e7ea":"df[' Category'].value_counts().to_frame()","d75c9b45":"df[' Answer'].value_counts().to_frame()","5134de6d":"df['ValueNum'] = df[' Value'].apply(\n    lambda value: int(value.replace(',', '').replace('$', ''))\n)","711cc417":"def binning(value):\n    if value < 1000:\n        return np.round(value, -2)\n    elif value < 10000:\n        return np.round(value, -3)\n    else:\n        return np.round(value, -4)\n\ndf['ValueBins'] = df['ValueNum'].apply(binning)","fff74f0d":"print(\"Total number of categories:\", df[' Value'].unique().shape[0])\nprint(\"Number of categories after binning:\", df['ValueBins'].unique().shape[0])\nprint(\"\\nBinned Categories:\", df['ValueBins'].unique())","b0dad28f":"show_numbers = df['Show Number'].unique()\ntrain_shows, test_shows = train_test_split(show_numbers, test_size=0.2, random_state=2019)\n\ntrain_mask = df['Show Number'].isin(train_shows)\ntest_mask = df['Show Number'].isin(test_shows)\n\ntrain_labels = df.loc[train_mask, 'ValueBins']\ntrain_questions = df.loc[train_mask, ' Question']\ntest_labels = df.loc[test_mask, 'ValueBins']\ntest_questions = df.loc[test_mask, ' Question']","1e022e76":"%%time\nbow = CountVectorizer(stop_words='english', max_features=2000)\nbow.fit(df[' Question'])","2d44d6b9":"X_train = bow.transform(train_questions)\nX_test = bow.transform(test_questions)\n\ny_train = train_labels\ny_test = test_labels\n\nprint(\"Shape of X_train:\", X_train.shape)\nprint(\"Shape of X_test:\", X_test.shape)\nprint(\"Shape of y_train:\", y_train.shape)\nprint(\"Shape of y_test:\", y_test.shape)","e113471a":"%%time\nlr = LogisticRegression(solver='saga', multi_class='multinomial', max_iter=200)\nlr.fit(X_train, y_train)","37c06fee":"y_pred = lr.predict(X_test)\n\nprint(classification_report(y_test, y_pred))","22603a10":"tokenizer = Tokenizer(num_words=50000)\ntokenizer.fit_on_texts(df[' Question'])\n\ntrain_sequence = tokenizer.texts_to_sequences(train_questions)\ntest_sequence = tokenizer.texts_to_sequences(test_questions)\n\nprint(\"Original text:\", train_questions[0])\nprint(\"Converted sequence:\", train_sequence[0])","1a448a29":"X_train = pad_sequences(train_sequence, maxlen=50)\nX_test = pad_sequences(test_sequence, maxlen=50)\n\nprint(X_train.shape)\nprint(X_test.shape)","4912ff87":"le = LabelEncoder()\nle.fit(df['ValueBins'])\n\ny_train = le.transform(train_labels)\ny_test = le.transform(test_labels)\n\nprint(y_train.shape)\nprint(y_test.shape)","1371946c":"num_words = tokenizer.num_words\noutput_size = len(le.classes_)","925db5d4":"model = Sequential([\n    Embedding(input_dim=num_words, \n              output_dim=200, \n              mask_zero=True, \n              input_length=50),\n    Bidirectional(LSTM(150, return_sequences=True)),\n    GlobalMaxPooling1D(),\n    Dense(300, activation='relu'),\n    Dropout(0.5),\n    Dense(output_size, activation='softmax')\n    \n])\n\nmodel.compile('adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\nmodel.summary()","fb0e0a8d":"model.fit(X_train, y_train, epochs=10, batch_size=1024, validation_split=0.1)","0f48a2bc":"y_pred = model.predict(X_test, batch_size=1024).argmax(axis=1)\nprint(classification_report(y_test, y_pred))","0526e8bf":"###  Logistic Regression","dd52fa03":"## Category","0e7973a0":"## Answer","b955569a":"## Simple Linear Model","055e89ac":"## Answer","bef22a2a":"## Round","c9d7a4c7":"## Value","99c28e1a":"## Tokenization","d992c43c":"## Air Date"}}