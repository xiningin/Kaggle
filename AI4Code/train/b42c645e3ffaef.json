{"cell_type":{"bc4b592d":"code","afa105de":"code","9b940961":"code","7ce4586c":"code","a35cdbd5":"code","63d7a120":"code","a925bfe9":"code","86bac234":"code","960d6616":"code","5028c6c1":"code","b071176c":"code","5df95f0f":"code","605f717a":"code","9548e120":"code","5bfee0d5":"code","3e9180cb":"code","9f6ec1fb":"code","102ea4e0":"code","fa4352a2":"code","eb97cc00":"code","9d344441":"code","b584ac91":"code","984d004a":"code","86e5e9c3":"code","5b24847c":"code","89235c8a":"code","263951ed":"code","d9f42ebd":"code","484b37ce":"code","ccc87e37":"code","5ec15560":"code","a651b828":"code","4eb90ff3":"code","47620a73":"code","521fd3aa":"code","258e3cd6":"code","63f6752d":"code","d840c3c1":"code","94e243e7":"code","77c0ee3d":"code","602a2677":"code","df12325c":"code","60dd46b0":"code","5fd75ca7":"code","5daa7517":"code","c22f4e5c":"code","c68cf4e3":"code","e77c9676":"code","528864ce":"markdown","e16a72d8":"markdown","8bb34774":"markdown","30165a0f":"markdown","94de2c19":"markdown","8fd6eb97":"markdown","dfb5bca2":"markdown","e8254944":"markdown","7a253994":"markdown","7fdb92f0":"markdown","c6711197":"markdown","50f18739":"markdown","442d4acf":"markdown","074f2c86":"markdown","1f19e3e3":"markdown","1966bb82":"markdown","eba38107":"markdown","564078c1":"markdown","36fc4c92":"markdown","30983034":"markdown","162432aa":"markdown","8c391501":"markdown","9d5d9a02":"markdown","33a6b8fc":"markdown","2d657ad6":"markdown","db372e9f":"markdown","35a62c2a":"markdown","532e0a01":"markdown","af3d9be7":"markdown","2c48359b":"markdown","dc262ce1":"markdown","2b290039":"markdown","e870b19e":"markdown","aa21e7d8":"markdown","219fab0b":"markdown","c5a47e5d":"markdown","a058daca":"markdown","7590a725":"markdown","446b3189":"markdown"},"source":{"bc4b592d":"import numpy as np    # linear algebra\nimport pandas as pd   # data processing\/feature engineering\nimport matplotlib.pyplot as plt       # Data visualization\nimport seaborn as sns                 # Enhanced Data Visualization\n\n%matplotlib inline\n\nfrom sklearn.linear_model import LogisticRegression # Logistic Regression Model","afa105de":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","9b940961":"train_df.head(2)","7ce4586c":"train_df.describe()","a35cdbd5":"train_df.info()","63d7a120":"test_df.head(2)","a925bfe9":"test_df.describe()","86bac234":"test_df.info()","960d6616":"sns.heatmap(train_df.isnull(), yticklabels=False, cbar=False, cmap='viridis')","5028c6c1":"sns.set_style('whitegrid')\nsns.countplot(train_df['Survived'], palette='RdBu_r')","b071176c":"survived = train_df[train_df['Survived']==1]['Survived'].sum()\nsurvived","5df95f0f":"sns.countplot(train_df['Survived'], hue=train_df['Sex'], palette='rainbow')","605f717a":"sns.countplot(train_df['Survived'], hue=train_df['Pclass'], palette='rainbow')","9548e120":"train_df['Age'].hist(color='darkred', bins=30, alpha=0.6)","5bfee0d5":"train_df['Fare'].hist(color='purple', bins=30, figsize=(8,4))","3e9180cb":"plt.figure(figsize=(12,7))\nsns.boxplot(x=train_df['Pclass'], y=train_df['Age'], palette='winter')","9f6ec1fb":"sns.boxplot(x=train_df['Pclass'], y=train_df['Fare'])","102ea4e0":"train_df.isnull().sum()","fa4352a2":"meanAge = train_df.groupby('Pclass').mean()['Age']\nmeanAge","eb97cc00":"# Defining a function for calculating mean age\ndef imputeAge(cols):\n    Age = cols[0]\n    Class = cols[1]\n    \n    if pd.isnull(Age):\n        \n        if Class == 1:\n            return meanAge[1]\n        elif Class == 2:\n            return meanAge[2]\n        else:\n            return meanAge[3]\n    else:\n        return Age        ","9d344441":"# Applying above function in Age column\ntrain_df['Age'] = train_df[['Age', 'Pclass']].apply(imputeAge, axis=1)","b584ac91":"train_df.drop('Cabin', axis=1, inplace=True)","984d004a":"train_df['Embarked'] = train_df['Embarked'].fillna(train_df['Embarked'].mode()[0])","86e5e9c3":"train_df.isnull().sum()","5b24847c":"test_df.isnull().sum()","89235c8a":"meanAge_test = test_df.groupby('Pclass').mean()['Age']\nmeanAge_test","263951ed":"def imputAge_test(cols):\n    Age = cols[0]\n    Class = cols[1]\n    \n    if pd.isnull(Age):\n        if Class == 1:\n            return meanAge_test[1]\n        elif Class == 2:\n            return meanAge_test[2]\n        else:\n            return meanAge_test[3]\n    else:\n        return Age","d9f42ebd":"test_df['Age'] = test_df[['Age', 'Pclass']].apply(imputAge_test, axis=1)","484b37ce":"meanFare_test = test_df.groupby('Pclass').mean()['Fare']\nmeanFare_test","ccc87e37":"# Check the number of missing values\ntest_df['Fare'].isnull().sum()","5ec15560":"test_df[test_df['Fare'].isnull() == True]['Pclass']","a651b828":"test_df['Fare'] = test_df['Fare'].fillna(meanFare_test[3])","4eb90ff3":"test_df.drop('Cabin',axis=1, inplace=True)","47620a73":"test_df.isnull().sum()","521fd3aa":"sex = pd.get_dummies(train_df['Sex'], drop_first=True)\nembark = pd.get_dummies(train_df['Embarked'], drop_first=True)","258e3cd6":"train_df.drop(['Sex', 'Embarked', 'Name', 'Ticket'], axis =1, inplace=True)","63f6752d":"train_df = pd.concat([train_df, sex, embark], axis=1)","d840c3c1":"train_df.head(2)","94e243e7":"sex = pd.get_dummies(test_df['Sex'], drop_first=True)\nembark = pd.get_dummies(test_df['Embarked'], drop_first=True)","77c0ee3d":"test_df.drop(['Sex', 'Embarked', 'Name', 'Ticket'], axis= 1, inplace=True)","602a2677":"test_df.head(2)","df12325c":"test_df = pd.concat([test_df, sex, embark], axis =1)","60dd46b0":"test_df.head(2)","5fd75ca7":"X_train = train_df.drop(['Survived','PassengerId'], axis=1)\ny_train = train_df['Survived']\nX_test = test_df.drop('PassengerId', axis=1)\n\nX_train.shape, y_train.shape, X_test.shape","5daa7517":"logmodel = LogisticRegression(max_iter=150)","c22f4e5c":"logmodel.fit(X_train, y_train)","c68cf4e3":"predictions = logmodel.predict(X_test)","e77c9676":"submission = pd.DataFrame({\n    'PassengerId': test_df['PassengerId'],\n    'Survived': predictions\n})\n\nsubmission.to_csv('submission.csv', index = False)\nsubmission.head()","528864ce":"### Shape, head, Center","e16a72d8":"### Test Data Imputations","8bb34774":"### File Submission","30165a0f":"### How many passengers survived ?","94de2c19":"# Model Building and Training","8fd6eb97":"### Fill Missing Values","dfb5bca2":"### Load Data","e8254944":"### Fare distribution according to class","7a253994":"### Predicting Survival in test data","7fdb92f0":"- Creating dummy variables for 'Sex' and 'Embarked'.\n- 'PassengerId' , 'Name', 'ticket' shall be dropped.","c6711197":"### How many males and females amongst survivals ?","50f18739":"### Actual count of passengers survival","442d4acf":"### Import Libraries","074f2c86":"### Notebook Contents:\n\n- Loading libraries and datasets\n    1. Exploring the data variables\n- Exploratory Data analysis\n    1. Exploring the spread and center of variables\n    2. Exploring the survival of passengers\n- Feature Engineering\n    1. Imputing missing variables\n    2. Converting Categorical variables\n- Training Model and predictions\n    1. Logistic Regression\n    \n### To do:\n - Improve the models","1f19e3e3":"- 'Age' variable shall be imputed with mean values according to class.\n- 'Fare' variable shall be imputed with mean value according to class.\n- 'Cabin' and all variables which were removed from training data shall be dropped from test data as well.","1966bb82":"#### Drop the 'Cabin' Variable","eba38107":"#### Impute 'Embarked' variable","564078c1":"#### Mean Age according to class (Test data)","36fc4c92":"### Overall Age distribution of passengers on Titanic","30983034":"The training data and test data have some missing values in several columns. Let's explore them further and some other properties\/relations of variables with some visual plots.","162432aa":"### Model preprocessing","8c391501":"#### Fitting the model on training data","9d5d9a02":"#### Test Data","33a6b8fc":"### Age distribution according to class","2d657ad6":"# Simple Logistic Regression Approach","db372e9f":"### Converting the Categorical Variables","35a62c2a":"### Creating an instance of logistic model","532e0a01":"#### Training data\n","af3d9be7":"#### Check the class of passenger with missing 'Fare'","2c48359b":"## Exploratory Data Analysis","dc262ce1":"- 'Age' shall be imputed with mean values according to class since it is a numerical variable. \n- 'Cabin' shall be removed as it is not really required.\n- 'Embarked' shall be imputed with mode values as it is a categorical variable. ","2b290039":"## Feature Engineering","e870b19e":"### Test data conversions","aa21e7d8":"### Fare distribution among the passengers","219fab0b":"### Survival according to the class","c5a47e5d":"### Fare imputation (Test data)","a058daca":"### Missing data","7590a725":"#### Mean Age per class","446b3189":"#### Drop the 'Cabin' variable"}}