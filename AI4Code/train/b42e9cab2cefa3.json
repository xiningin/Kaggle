{"cell_type":{"700714e7":"code","bb069b7e":"code","cb8858d3":"code","85fc8ca5":"code","686af3c3":"code","94ef042e":"code","66d589e2":"code","611884ef":"code","36b02f2f":"code","9127b657":"code","66a7e7e4":"code","ac6e1989":"code","70566e2b":"code","c54ba9a9":"code","ca58293a":"code","18251a16":"code","29e4cf23":"code","6098a0ee":"code","51ecc116":"code","def19611":"code","3d3ac02c":"code","73655c4d":"code","5fa4ad89":"code","6445a8b1":"code","332792b8":"code","2ad8939f":"code","fc361c75":"code","25ac1807":"code","715548d0":"code","c46fbe2a":"code","d1128ffd":"code","e13166b1":"code","e73763ba":"code","09a098c1":"code","4ee7935c":"code","ddc1a139":"code","b5486157":"code","f378eb39":"code","6632e9c2":"code","ea855e93":"code","23987974":"code","f0634df7":"code","021df322":"code","bd79577a":"code","509d6cec":"code","55d0de10":"code","19233a2e":"code","997e9a6d":"code","f0cbaf6c":"code","0c4461e1":"code","dc648ad0":"markdown","50828767":"markdown","951caf9c":"markdown","695bf288":"markdown","2bb2fa8b":"markdown","8e2dd549":"markdown","354263dd":"markdown","07f71e38":"markdown","c976a1db":"markdown","9ac348e0":"markdown","965360c7":"markdown","0a255d90":"markdown","764de96b":"markdown","5c25ed1d":"markdown","024023c2":"markdown","69615e9b":"markdown","21d5cef6":"markdown","79270cc1":"markdown","8bdde40d":"markdown","d1e8c9d2":"markdown","45b3e5fa":"markdown","c2bd80db":"markdown","a2a8359e":"markdown","6498107e":"markdown","2f9b10a0":"markdown","cb3eadf3":"markdown","f8574c73":"markdown","da52bd56":"markdown","844240ba":"markdown","b3c1c642":"markdown","2779c0d2":"markdown","2efa725b":"markdown","8e195759":"markdown","8f0104d8":"markdown","6aab0c43":"markdown","e955f984":"markdown","885dc480":"markdown","0b8c5942":"markdown","da7ae1ef":"markdown","360aa49e":"markdown","be5d7d21":"markdown","4eb6af0c":"markdown","381a8c60":"markdown"},"source":{"700714e7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly\nimport plotly.graph_objects as go\nimport datetime","bb069b7e":"df = pd.read_csv('..\/input\/daily-temperature-of-major-cities\/city_temperature.csv',low_memory=False)\ndf.head(5)","cb8858d3":"df = df.drop_duplicates()\ndf.isnull().sum()","85fc8ca5":"plt.figure(figsize = (8,10))\nsns.boxplot(data = df,y = 'AvgTemperature')\n_=plt.title(\"Boxplot of Average Temperature\")","686af3c3":"df = df[df['AvgTemperature']>-70]","94ef042e":"df.sort_values(['Year','Month','Day'])","66d589e2":"df = df[df['Year']<2020]","611884ef":"data = df[['Year','AvgTemperature']].groupby('Year').mean()\nlinfit = np.polyfit(data.index,data['AvgTemperature'],deg=1)\nlinfit = linfit[0]*data.index + linfit[1]\n\nfig = px.line(data,title='Average Temperature of the World from 1995 to 2019')\nfig.add_trace(go.Scatter(x=data.index,y=linfit,name='Linear Fit'))","36b02f2f":"data = df[['Region','AvgTemperature','Year']].groupby(['Region','Year']).mean()\ndata = data.reset_index(level=0)\n\n#plotting\nsns.set_style('darkgrid')\nplt.figure(figsize=(12,8))\nsns.lineplot(data=data,hue='Region',x='Year',y='AvgTemperature')\n_=plt.title('Average temperature across different regions')\nplt.tight_layout()","9127b657":"#Preparing data\ndata = df[['Region','Month','AvgTemperature']]\ndata = data.groupby(['Region','Month']).mean()\n\nmonths = {1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:'Jun',7:'Jul',8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:\"Dec\"}\ndata = data.reset_index(level=1)\n\n#Changing the month label from integer to name\ndata['Month'] = data.loc[:,'Month'].map(months)\ndata.head(3)","66a7e7e4":"#plotting\nregions = df['Region'].unique()\nplot_holder = []\ncolors = ['green','red','firebrick','blue','teal','black','orange']\nfor i,region in enumerate(regions):\n    plot = go.Bar(x=data.loc[region,'Month'],y=data.loc[region,'AvgTemperature'],name=region,visible = (i==0),marker_color=colors[i])\n    plot_holder.append(plot)\nfig = go.Figure(data = plot_holder)\n\nbuttons = [dict(label=region,method='update',args=[{'title':region,'visible':[True if j==i else False for j in range(len(regions))]}]) for i,region in enumerate(regions)]\nupdatemenus = list([\n    dict(\n    buttons=buttons,\n    yanchor='top',\n    xanchor='left')\n])\nfig.update_layout(updatemenus=updatemenus)","ac6e1989":"data1=df.sort_values(by=['AvgTemperature'],ascending=False).head(1)\ndata2=df.sort_values(by=['AvgTemperature'],ascending=True).head(1)\ndata = pd.concat([data1,data2],)\ndata.index = ['Highest','Lowest']\ndata","70566e2b":"px.scatter_geo(lat=[29.3117,64.8378],lon=[29.3117,147.7164],text=['Kuwait','Fairbanks'],size=[0.5,0.5],color=[110,-50],color_continuous_scale='bluered')","c54ba9a9":"data = df[['Country','AvgTemperature']].groupby('Country').mean().sort_values('AvgTemperature')\nprint('The top five coldest countries in the world are: ',data.index[:5].to_list())\nprint('The top five hottest countries in the world are: ',data.index[-5:].to_list())","ca58293a":"data = df[['Country','Year','AvgTemperature']].groupby(['Year','Country']).mean().sort_values('AvgTemperature').reset_index()\ndata = data.groupby('Year').apply(lambda group: group.iloc[:5]).reset_index(drop=True)\npx.choropleth(data_frame=data,locationmode='country names',locations='Country',color='AvgTemperature',animation_frame='Year',title=\"Top five coldest countries over the years\")","18251a16":"data = df[['Country','Year','AvgTemperature']].groupby(['Year','Country']).mean().sort_values('AvgTemperature',ascending=False).reset_index()\ndata = data.groupby('Year').apply(lambda group: group.iloc[:5]).reset_index(drop=True)\npx.choropleth(data_frame=data,locationmode='country names',locations='Country',color='AvgTemperature',animation_frame='Year',title=\"Top five hottest countries over the years\")","29e4cf23":"data = df[['Country','Year','AvgTemperature']].groupby(['Country','Year']).mean().reset_index()\npx.choropleth(data_frame=data,locations=\"Country\",locationmode='country names',animation_frame=\"Year\",color='AvgTemperature',color_continuous_scale = 'Turbo',title=\"Choropleth plot of countrywise average temperature over the years 1995 to 2019\")","6098a0ee":"data = df[df['Country'] == 'India']\nbom = data.loc[data['City'] == 'Bombay (Mumbai)',['Month','Day','Year','AvgTemperature']].reset_index(drop=True)\nbom.head(3)","51ecc116":"size = bom.groupby(['Year','Month']).size().reset_index()\nsize_max = size[0].max()\nsize_min = size[0].min()\nn = size_max - size_min +1\ncmap = sns.color_palette(\"deep\",n)\nsize = size.pivot(index='Year',columns='Month',values=0)\nsize.head(3)","def19611":"plt.figure(figsize=(8,8))\nsns.heatmap(size,cmap=cmap)\n_=plt.title('Number of recorded data points monthly from year 1995 to 2019 in Bombay')\ncolorbar = plt.gca().collections[0].colorbar\n\nr = colorbar.vmax - colorbar.vmin\ncolorbar.set_ticks([colorbar.vmin + (r\/n*(i+0.5)) for i in range(n)])\ncolorbar.set_ticklabels(range(size_min,size_max+1))","3d3ac02c":"bom['Date'] = bom[['Year','Month','Day']].apply(lambda row:'-'.join([str(row['Year']),str(row['Month']),str(row['Day'])]),axis=1)\nbom['Date'] = pd.to_datetime(bom['Date'])\nbom = bom.drop(columns=['Month','Day','Year']).set_index('Date')\nbom.head(3)","73655c4d":"px.line(data_frame=bom,color_discrete_sequence=['grey'],title=\"Daily Average Temperature - Bombay (1995-2019)\")","5fa4ad89":"roll_mean = bom.rolling(window=31).mean()\nroll_mean2 = bom.rolling(window=365).mean()\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=bom.index,y=bom['AvgTemperature'],marker=dict(color='grey'),name='Daily'))\nfig.add_trace(go.Scatter(x=roll_mean.index,y=roll_mean['AvgTemperature'],marker=dict(color='red'),name='31DaysRolling'))\nfig.add_trace(go.Scatter(x=roll_mean2.index,y=roll_mean2['AvgTemperature'],marker=dict(color='green'),name='365DaysRolling'))\nfig.update_layout(dict(title='Rolling Mean'))","6445a8b1":"roll_mean = bom.rolling(window=31).std()\nroll_mean2 = bom.rolling(window=365).std()\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=roll_mean.index,y=roll_mean['AvgTemperature'],marker=dict(color='red'),name='31DaysRolling'))\nfig.add_trace(go.Scatter(x=roll_mean2.index,y=roll_mean2['AvgTemperature'],marker=dict(color='green'),name='365DaysRolling'))\nfig.update_layout(dict(title='Rolling Std'))","332792b8":"from statsmodels.tsa.seasonal import seasonal_decompose","2ad8939f":"decompose = seasonal_decompose(bom,period=365)\ndecompose.plot();","fc361c75":"from statsmodels.tsa.stattools import adfuller","25ac1807":"adf = adfuller(x=bom['AvgTemperature'])\nprint('pvalue:',adf[1])\nprint('adf:',adf[0])\nprint('usedlag:',adf[2])\nprint('nobs:',adf[3])\nprint('critical_values:',adf[4])\nprint('icbest:',adf[5])","715548d0":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM,Dense\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.callbacks import EarlyStopping","c46fbe2a":"test = bom[bom.index>'2019']\ntrain = bom[bom.index<'2019']","d1128ffd":"scaler = MinMaxScaler()\ntrain = scaler.fit_transform(train)\ntest = scaler.transform(test)","e13166b1":"time_steps = 20\nfeatures = 1\n\ntrain_gen = TimeseriesGenerator(train,train,time_steps,batch_size=32)\ntest_gen = TimeseriesGenerator(test,test,time_steps,batch_size=32)","e73763ba":"model = Sequential()\nmodel.add(LSTM(64,activation='relu',input_shape=(time_steps,features),return_sequences=True))\nmodel.add(LSTM(32,activation='relu'))\nmodel.add(Dense(1,activation='relu'))\nmodel.compile(optimizer='adam',loss='mse')\n\nmodel.summary()","09a098c1":"early_stop = EarlyStopping(patience=5)","4ee7935c":"model.fit(x=train_gen,epochs=40,callbacks=[early_stop],validation_data=test_gen)\n\n#Save the model\nmodel.save('LSTMAvgTemp.h5')","ddc1a139":"predict = model.predict(test_gen)\ntest_targets = test_gen.targets[test_gen.start_index:test_gen.end_index+1]","b5486157":"predict = scaler.inverse_transform(predict).ravel()\ntest_targets = scaler.inverse_transform(test_targets).ravel()","f378eb39":"from sklearn.metrics import mean_squared_error","6632e9c2":"_,ax=plt.subplots(1,1,figsize=(12,8))\nsns.lineplot(x=range(len(predict)),y=predict,ax=ax,label='Predictions')\nsns.lineplot(x=range(len(test_targets)),y=test_targets,ax=ax,label='Actual')\nplt.legend()\n_=plt.title('Comparison - Predictions vs Actual Target Temperatures - Bombay (2019)')","ea855e93":"print('The RMSE Score is:',format(np.sqrt(mean_squared_error(predict,test_targets)),'.2f'))","23987974":"data = bom.iloc[-time_steps:].to_numpy() #2D Array\ndata = scaler.transform(data)\n\n#expand to include batch dimension\ndata = np.expand_dims(data,0)\n\n#record the last date of observartion from the data\ndate = bom.index[-1]\n\ndate_store = bom.iloc[-time_steps:].index.to_list()\n\n#forecasting\nforecasts=10\nfor i in range(forecasts):\n    predicted = model.predict(data[:,-20:,:])\n    date = date+datetime.timedelta(days=1)\n    data = np.append(data,[predicted],axis=1)\n    date_store.append(date)\ndata = scaler.inverse_transform(data.reshape(1,-1))\nforecast_df = pd.DataFrame(index=date_store[time_steps-1:],data={'AvgTemperature':data.ravel()[time_steps-1:]})","f0634df7":"forecast_df","021df322":"_,ax=plt.subplots(1,1,figsize=(12,8))\nsns.lineplot(data=bom.iloc[-100:,:],y='AvgTemperature',x=bom.iloc[-100:,:].index,color='blue',ax=ax,label='AvgTemp - 2019 end')\nsns.lineplot(data=forecast_df,y='AvgTemperature',x=forecast_df.index,color='red',ax=ax,label= 'AvgTemp - 2020 forecasted')\n_=plt.title(f'Temperature Forecasting - {forecasts} days (2020)')","bd79577a":"!pip3 install -q pmdarima\nfrom pmdarima.arima import auto_arima\nfrom dateutil.relativedelta import relativedelta","509d6cec":"bom_monthly = bom.resample('M').mean()\nbom_monthly.head(5)","55d0de10":"data =[go.Scatter(x=bom.index,y=bom['AvgTemperature'],name='AvTemperature-Daily',marker=dict(color='grey')),go.Scatter(x= bom_monthly.index,y=bom_monthly['AvgTemperature'],name='AvgTemperature-Monthly',marker=dict(color='red'))]\nfig = go.Figure(data)\n\nbuttons = [dict(label='Both',method='restyle',args=[{'visible':[True,True]}]),\n           dict(label='Daily',method='restyle',args=[{'visible':[True,False]}]),\n           dict(label='Monthly',method='restyle',args=[{'visible':[False,True]}])]\n\nupdatemenus=[dict(type=\"buttons\",direction='down',buttons=buttons)]\nfig.update_layout(updatemenus=updatemenus,title='Average Temperature - Daily and Monthly - Bombay')","19233a2e":"#using default auto_arima arguments\nmodel = auto_arima(bom_monthly,seasonal=True,m=12)","997e9a6d":"date = bom_monthly.index[-1]\nlast_val = bom_monthly.iloc[-1].to_numpy()","f0cbaf6c":"forecasts=5\ndate_store = [(date + relativedelta(months=i)) for i in range(0,forecasts+1)]\n\npredict = model.predict(forecasts)\npredict =  np.append(last_val,predict)\nforecast_df = pd.DataFrame(data=predict,index=date_store,columns=['AvgTemperature'])\nforecast_df.head(5)","0c4461e1":"_,ax=plt.subplots(1,1,figsize=(10,10))\nsns.lineplot(data=forecast_df['AvgTemperature'],ax=ax,color='red')\nsns.lineplot(data=bom_monthly['AvgTemperature'][-4*12:],ax=ax,color='blue')\n_=plt.title(f'Forecast - Monthly Temperature Average (2020) - First {forecasts} months')","dc648ad0":"**Let's print and plot the forecast_df**\n\n**The first datapoint in forecast_df is not predicted. It is borrowed from the given data to ensure continuity while plotting**","50828767":"### Let's narrow the analysis to Mumbai city in India\n\n**Selecting data points of mumbai city**","951caf9c":"**Plot - Top five coldest countries over the years**","695bf288":"**Forecasting for the first 5 months in 2020**","2bb2fa8b":"**The auto arima function can automatically determine arima parameters and model**\n\n**The data is seasonal with the frequency of 12 months**","8e2dd549":"**Plot - Top five hottest countries over the years**","354263dd":"## Exploratory Data Analysis\n\n**Reading data and printing the first five rows**","07f71e38":"**Kuwait on 1st August 2012 recorded the highest temperature of 110\u00b0F and Fairbanks on 31st December 1999 recorded the lowest.** ","c976a1db":"## LSTM Model Creation","9ac348e0":"**Plot above shows the average temperatures labelled by region. Africa and Middle east are the hottest regions, and europe is the coldest.**\n\n### Plot - Yearly average temperature graphs for different regions","965360c7":"**Let's check the range of Year-Month-Day in the dataset**","0a255d90":"**Defining Callbacks**","764de96b":"**Let's check if the temperature is recorded every day properly**","5c25ed1d":"## Forecasting beyond 2019","024023c2":"**Let's input X values in the test generator to the model and collect it's predictions**\n\n**Let's also collect the original targets from the test generator**","69615e9b":"**Storing date and temperature of the last row so that forecast plot can be made continuous**","21d5cef6":"### Dickey Fuller Test\n**Let's perform a Dickey Fuller test to verify the stationarity**\n\n**Null hypothesis: The time series data is non stationary**","79270cc1":"## Seasonal Decompose","8bdde40d":"**Train - Test - Split: Choosing 2019 data for testing and remaining for training**","d1e8c9d2":"# Daily Average Temperatures - Time Series Analysis\n\n#### Description of the data:\n\n**A dataset on the average daily temperature (\u00b0F) of major cities in the world**\n\n#### Objective: To analyse the time series data and forecast temperatures\n**Models used: LSTM, Seasonal ARIMA**","45b3e5fa":"### Choropleth plot of countrywise average temperature over the years 1995 to 2019","c2bd80db":"### Rolling Statistics","a2a8359e":"**State column has many null values. That is okay in the scope of the current analysis**","6498107e":"**The data should be downsampled to train the Seasonal ARIMA model faster. So here we are downsampling the data from daily to monthly frequency. If downsampling is not performed, the model created will be very huge in this case**","2f9b10a0":"# Thank You","cb3eadf3":"### Plot of average temperature of the city of mumbai (1995-2019)","f8574c73":"**Outliers are present and can be seen in the figure above. Let's choose all the rows having *'AvgTemperature'* greater than -70\u00b0F** ","da52bd56":"**The overall trend of average temperature increases due to global warming**","844240ba":"**Dropping any duplicate rows and checking for Null values**","b3c1c642":"**Let's inverse transform the scaled results**","2779c0d2":"## Model Evaluation\n\n**The predictions of the model for the year 2019 are plotted with the actual target values of 2019**","2efa725b":"**The data spans from Jan 1995 to May 2020**\n\n**Since 2020 is incomplete, let's strip it off for the current analysis**","8e195759":"**Select the last 'time_steps' values of average temperature from test data. It can be used to forecast further.**","8f0104d8":"**Scaling train data and test data for LSTM Input**","6aab0c43":"**The pvalue is very small, close to 0. Hence we can reject our null hypothesis. The data is stationary**","e955f984":"## Seasonal ARIMA Model","885dc480":"### Average temperature of the world over the years 1995 to 2019","0b8c5942":"### Top 5 coldest and hottest countries overall","da7ae1ef":"**Defining a sequential model**","360aa49e":"**Fitting the model**","be5d7d21":"**February column (Month = 2) shows leap years, but in certain other months, you can see the color mismatches. This is because some data is missing for that particular month**\n\n**Let's create a datetime column and drop the month, year and day column** ","4eb6af0c":"**Plotting results**","381a8c60":"**Africa and central america has nearly the same average temperature throught the year, Australia shows a reverse trend than others.**\n\n**Let's display the highest and lowest recorded temperature in this dataset (1995 to 2020)**"}}