{"cell_type":{"bdbf8e26":"code","9fda280a":"code","96b4f045":"code","8bec2c98":"code","641e2b61":"code","cfce73f0":"code","62aefd29":"code","65cd5313":"code","ed2c3d09":"code","7d422370":"code","0df53474":"code","2973fa54":"code","c0adb4be":"code","287901b4":"code","73b7a9f3":"code","4fb2905d":"code","5564e1dc":"code","ed9dff75":"code","81aaa884":"code","b846d20f":"code","1d046ad0":"code","c74105a6":"code","e597c40e":"code","5c1c7154":"code","d288f9b0":"code","1556ba5f":"code","43140639":"code","299d6848":"code","04a6cd92":"code","3bb1dce2":"code","5a21f239":"code","df7008ab":"code","493e510e":"code","27952287":"code","8ee32f77":"code","c764ee54":"code","d11ecf36":"code","e92f56f6":"code","374d2aa7":"code","ce963b63":"code","4a89d8fb":"code","90bb8634":"code","2afd0499":"code","b4097dd3":"code","0c7766ef":"code","f6353fed":"code","0a8c50ea":"code","5966573f":"code","a0fe2fb2":"code","a99822c4":"code","11437cf5":"code","27ce992b":"code","91752abc":"code","d2ea6a1e":"code","4ed616a4":"code","742df6e8":"code","a2d0d7c7":"code","746ad607":"code","880b10ed":"code","db2d92a3":"code","3671d435":"code","d025b0e2":"code","706b9f45":"code","2ee30c54":"code","3d2a672e":"code","5f4831fb":"code","a79166b6":"code","3e9bfad3":"code","baf7446d":"code","762dbe74":"code","91ac6958":"code","6925a185":"code","ed7de26b":"code","04dca690":"code","117ea5d9":"code","a6a586b8":"markdown","67489d53":"markdown","6eb40a31":"markdown","8572c92b":"markdown","838d8fb4":"markdown","65c3e8c1":"markdown","cb5d4503":"markdown","e5d4aff8":"markdown","d8df6a4d":"markdown","9f7ee0c9":"markdown","c32a391a":"markdown","1a95989d":"markdown","ef0a9000":"markdown","2cec23f0":"markdown","673bd51e":"markdown","e98f73c3":"markdown","b5ae5350":"markdown","cb0aa032":"markdown","2229cf67":"markdown","adea5427":"markdown","cc24fb68":"markdown","6ba85f85":"markdown","d33156ca":"markdown","d7d683ed":"markdown","3c200790":"markdown"},"source":{"bdbf8e26":"import numpy as np\nimport pandas as pd","9fda280a":"# Link do colab\nhttps:\/\/colab.research.google.com\/drive\/1_qUZDKNdRrH9ZboKHSGfkc6jlseQHVXS?usp=sharing\n","96b4f045":"# Mount pra acessar os dados do drive\nfrom google.colab import drive\n# drive.mount(\"\/content\/drive\", force_remount=True)","8bec2c98":"#Muda o nome da colunas, de acordo com o seu tipo\ndef change_column_name(df, f_type):\n    for feature in df:\n        if feature != 'user_id' and feature != 'tweet_id' and feature != 'tweet_user_id':\n           df = df.rename(columns={feature: f_type +'_' + feature})\n\n    return df","641e2b61":"#carrega os csvs do user e d\u00e1 merge nas tabelas\ndef upload_users():\n    path = '\/content\/drive\/MyDrive\/Colab Notebooks\/task 5\/Dataset\/Users\/'\n\n    users = pd.read_csv(path + 'users.csv')\n    \n    users_vectorized_descriptions = pd.read_csv(path + 'user_vectorized_descriptions.csv')\n    users_vectorized_descriptions = change_column_name(users_vectorized_descriptions, 'descrip')\n\n    users_vectorized_profile_images = pd.read_csv(path + 'user_vectorized_profile_images.csv')\n    users_vectorized_profile_images = change_column_name(users_vectorized_profile_images, 'prof_img')\n\n    #merge das tabelas\n    users = users.merge(users_vectorized_descriptions, on='user_id', how='left')\n    users = users.merge(users_vectorized_profile_images, on='user_id', how='left')\n\n    return users","cfce73f0":"df_users = upload_users()","62aefd29":"df_users.head()","65cd5313":"#carrega os csv dos tweets e d\u00e1 merge nas tabelas\ndef upload_tweets(df_type):\n    path = '\/content\/drive\/MyDrive\/Colab Notebooks\/task 5\/Dataset\/Tweets\/'\n    tweets = pd.read_csv(path + df_type + '_tweets.csv')\n    tweets_vectorized_media = pd.read_csv(path + df_type + '_tweets_vectorized_media.csv')\n\n    tweets_vectorized_text = pd.read_csv(path + df_type + '_tweets_vectorized_text.csv')\n    tweets_vectorized_text = change_column_name(tweets_vectorized_text, 'text')\n\n    #Calcula a quantidade de imagens por tweet\n    num_imgs = tweets_vectorized_media.groupby('tweet_id').size().reset_index()\n    num_imgs.columns = ['tweet_id', 'num_imgs']\n\n    #merge das tabelas\n    tweets = tweets.merge(num_imgs, on='tweet_id', how='left')\n    tweets = tweets.merge(tweets_vectorized_text, on='tweet_id', how='left')\n\n    return tweets","ed2c3d09":"#carrega os datasets de treino e test dos tweets\ndf_tweets = upload_tweets('train')\ntest_tweets = upload_tweets('test')","7d422370":"df_tweets.sample(10)","0df53474":"#junta o dataset dos users com os tweets, tanto pra treino como pra teste\ndf = pd.merge(df_tweets, df_users, how='left', left_on='tweet_user_id', right_on='user_id')\ntest = pd.merge(test_tweets, df_users, how='left', left_on='tweet_user_id', right_on='user_id')","2973fa54":"#remove os ids\ndf.drop(['tweet_id', 'user_id', 'tweet_user_id'], axis=1, inplace=True)","c0adb4be":"df.sample(10)","287901b4":"df.isnull().sum()","73b7a9f3":"df.shape","4fb2905d":"df_processing = df.copy()","5564e1dc":"#Checa quais colunas n\u00e3o s\u00e3o num\u00e9ricas para serem tratadas\ncategorical_features = (df_processing.select_dtypes(include='object').columns).tolist()\ncategorical_features\n","ed9dff75":"#remove a coluna 'tweet_topic_ids'\ndf_processing.drop(['tweet_topic_ids'], axis=1, inplace=True)","81aaa884":"df_processing.drop(['tweet_attachment_class'], axis=1, inplace=True)","b846d20f":"df_processing.drop(['tweet_created_at_day'], axis=1, inplace=True)","1d046ad0":"df_processing.drop(['tweet_created_at_hour'], axis=1, inplace=True)","c74105a6":"df_processing.drop(['tweet_language_id'], axis=1, inplace=True)","e597c40e":"df_processing.sample(5)","5c1c7154":"#Preenche os valores NaN com 0\ndef fill_num_imgs(df):\n    filled_num_imgs = []\n\n    for num_img in df.loc[:, 'num_imgs']:\n\n        if pd.isna(num_img):\n            num_img = 0\n            filled_num_imgs.append(num_img)\n        \n        else:\n            filled_num_imgs.append(num_img)\n\n    df.loc[:, 'num_imgs'] = filled_num_imgs\n\n    return df","d288f9b0":"df_processing = fill_num_imgs(df_processing)","1556ba5f":"df_processing.sample(10)","43140639":"# corr = df_processing.corr().abs()","299d6848":"# upper = corr.where(np.triu(np.ones(corr.shape), k=1).astype(np.bool))","04a6cd92":"# to_drop = [column for column in upper.columns if any(upper[column] > 0.90)]\n# print(to_drop)","3bb1dce2":"# df_pearson = df_processing.drop(df_processing[to_drop], axis=1)","5a21f239":"# df_pearson.shape[1]","df7008ab":"from sklearn.model_selection import train_test_split\ny = df_processing['virality']\nX = df_processing.drop('virality', axis=1)","493e510e":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler","27952287":"scaler = StandardScaler()\nX_sc = scaler.fit_transform(X)","8ee32f77":"pca_ = PCA() \npca_.fit(X_sc) \nfor i in range(1, len(pca_.explained_variance_ratio_) + 1): \n  print(\"First {} components variance: {}\".format(i, pca_.explained_variance_ratio_[:i].sum()))","c764ee54":"pca = PCA(n_components=90)\nX_pca = pca.fit_transform(X_sc)","d11ecf36":"print(pca.explained_variance_ratio_.sum())","e92f56f6":"X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.33, random_state=42)","374d2aa7":"from sklearn.model_selection import cross_validate\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import make_scorer","ce963b63":"# Definindo m\u00e9tricas de score pro CV\n\nscoring = {'accuracy' : make_scorer(accuracy_score), \n       'f1_score' : make_scorer(f1_score, average = 'weighted')}\nf1_score = make_scorer(f1_score, average = 'weighted')","4a89d8fb":"from xgboost import XGBClassifier ","90bb8634":"xgb = XGBClassifier(verbosity = 0, objective='multi:softmax')\nxgb_cv = cross_validate(xgb, X_pca, y, cv=10, scoring=scoring, return_train_score=True)","2afd0499":"print(xgb_cv['test_f1_score'].mean(), xgb_cv['test_accuracy'].mean())","b4097dd3":"from sklearn.ensemble import AdaBoostClassifier","0c7766ef":"adaboost = AdaBoostClassifier()\nadaboost_cv = cross_validate(adaboost, X_pca, y, cv=10, scoring=scoring, return_train_score=True)","f6353fed":"print(adaboost_cv['test_f1_score'].mean(), adaboost_cv['test_accuracy'].mean())","0a8c50ea":"from sklearn.naive_bayes import GaussianNB","5966573f":"nb = GaussianNB()\nnb_cv = cross_validate(nb, X_pca, y, cv= 10, scoring=scoring, return_train_score=True)","a0fe2fb2":"print(nb_cv['test_f1_score'].mean(), nb_cv['test_accuracy'].mean())","a99822c4":"from sklearn.ensemble import RandomForestClassifier","11437cf5":"rf = RandomForestClassifier(random_state=42)\nrf_cv = cross_validate(rf, X_pca, y, cv=10, scoring=scoring, return_train_score=True)","27ce992b":"print(rf_cv['test_f1_score'].mean(), rf_cv['test_accuracy'].mean())","91752abc":"# from sklearn.feature_selection import RFE","d2ea6a1e":"# selector = RFE(rf, step=1)\n# X_fs = selector.fit_transform(X_pca, y)","4ed616a4":"from sklearn.model_selection import GridSearchCV","742df6e8":"#Grid Search\n#comentado para n\u00e3o ficar rodando toda hora\n# parameters = {\n#     'bootstrap': [True],\n#     'max_depth': [80],\n#     'max_features': [3],\n#     'min_samples_leaf': [3],\n#     'n_estimators': [200]\n# }\n\n# grid_search = GridSearchCV(estimator=rf, param_grid=parameters, scoring=f1_score, cv=10 )\n# grid_search.fit(X_pca, y)\n\n# best_f1 = grid_search.best_score_\n# best_params = grid_search.best_params_\n\n# print(\"Best f1: {:.2f} %\".format(best_f1*100))\n# print(\"Best params: \", best_params)","a2d0d7c7":"#Salva os ids do dataset do teste\nids = test['tweet_id'].copy()","746ad607":"#Remo\u00e7\u00e3o dos ids\ndf_envio = test.drop(['tweet_id', 'user_id', 'tweet_user_id'], axis=1).copy()","880b10ed":"df_envio.head()","db2d92a3":"df_envio.drop(['tweet_topic_ids'], axis=1, inplace=True)","3671d435":"df_envio = encode_values(df_envio)","d025b0e2":"df_envio.head()","706b9f45":"df_envio = fill_num_imgs(df_envio)","2ee30c54":"df_envio.head()","3d2a672e":"df_envio.drop(['tweet_created_at_day'], axis=1, inplace=True)","5f4831fb":"df_envio.drop(['tweet_created_at_hour'], axis=1, inplace=True)","a79166b6":"df_envio.drop(['tweet_language_id'], axis=1, inplace=True)","3e9bfad3":"df_envio.drop(['tweet_attachment_class'], axis=1, inplace=True)","baf7446d":"# df_envio = df_envio.drop(df_envio[to_drop], axis=1)","762dbe74":"scaler_envio = StandardScaler()\ntest_sc = scaler.transform(df_envio)","91ac6958":"test_pca = pca.transform(test_sc)","6925a185":"rf_final = RandomForestClassifier(random_state=42, \n                                    bootstrap = True,\n                                    max_depth=80,\n                                    max_features=3,\n                                    min_samples_leaf=3,\n                                    n_estimators=200\n                                  )\n\n# selector = RFE(rf_final, step=1)\n# X_fs = selector.fit_transform(X_pca, y)\n\n#Fitando o modelo\nrf_final.fit(X_pca, y)","ed7de26b":"# rfe_envio = selector.transform(test_pca)","04dca690":"envio = pd.DataFrame()\nenvio['tweet_id'] = ids\nenvio['virality'] = rf_final.predict(test_pca)\nenvio.head(5)","117ea5d9":"# csv = envio.to_csv('task5.csv', index = False)\n# from google.colab import files\n# files.download('task5.csv')","a6a586b8":"Inicialmente, tentamos manter as colunas de media e diminu\u00ed-las filtrando pela correla\u00e7\u00e3o, por\u00e9m, como s\u00e3o imagens diferentes, n\u00e3o conseguimos diminuir a dimens\u00e3o, por isso, optamos por transformar em uma nova feature que representa o n\u00famero de imagens que o tweet possui.","67489d53":"Observamos algumas features, e resolvemos remov\u00ea-las por achar que n\u00e3o influenciavam tanto no predi\u00e7\u00e3o da viralidade. Fizemos o teste com e sem elas e no final, a remo\u00e7\u00e3o dessas realmente melhorou o modelo.\n\n\n\n*   'tweet_created_at_day' e 'tweet_created_at_hour': supomos que n\u00e3o iria influenciar na viralidade do tweet.\n*   'tweet_language_id': a maioria dos valores era 0, o que fez com que essa feature n\u00e3o nos dissesse muito.\n\n","6eb40a31":"### Random Forest","8572c92b":"### PCA\n","838d8fb4":"#### RFE","65c3e8c1":"#### Grid Search","cb5d4503":"### Naive Bayes","e5d4aff8":"### Correla\u00e7\u00e3o","d8df6a4d":"## Envio","9f7ee0c9":"## Modelos\n\nNessa etapa, testamos alguns modelos, como o XGBoost Classifier, Adaboost, Random Forest e Naive Bayes. O que apresentou o melhor resultado foi o Random Forest, por isso, resolvemos us\u00e1-lo. Em seguida, fizemos um Grid-Search para a escolha de hiperpar\u00e2metros. ","c32a391a":"### xgboost\n","1a95989d":"### Separando dados","ef0a9000":"### Preparando o envio","2cec23f0":"## Analisando o dataset","673bd51e":" ### Separando dados pro treino e teste","e98f73c3":"## Carregando o dataset\n\nPrimeiramente, carregamos o dataset e damos merge nos dados. Como t\u00ednhamos v\u00e1rias colunas de diferentes arquivos com o mesmo nome, resolvemos mudar os nomes de tais colunas de acordo com o seu tipo. ","b5ae5350":"O modelo que nos apresentou o melhor resultado foi o apresentado nesse notebook, que nos gerou o seguinte resultado na competi\u00e7\u00e3o:![task5.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAABHUAAABqCAIAAAC9P\/onAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAACFESURBVHhe7d1vTBznncDxfdEXfXEv8jIv8uKQDgmkSmykE6qlxkosIXS2L1JAljAKkrekxi4qceRYcUNsV2BbpsdZyNm7cMHHqfTWJ9IlPofi2lwJsoLWjmJ2e4Ku63JgBL5sAqq3UFu7FxNxz\/PMv2d2Z\/FiT7Bxvh+NbHaYeeaZZ56ZeX47zzwEVldXb3+xKP4FAAAAADw0EViZ8RUTExMTExMTExMTExPTI048vwIAAAAAHxBfAQAAAIA\/iK8AAAAAwB\/EVwAAAADgD+IrAAAAAPAH8RUAAAAA+IP4CgAAAAD8QXwFAAAAAP4gvgIAAAAAfxBfAQAAAIA\/iK8AAAAAwB\/EVwAAAADgD+IrAAAAAPAH8RUAAAAA+IP4CgAAAAD8QXwFAAAAAP4gvgIAAAAAfxBfAQAAAIA\/iK8AAAAAwB\/EVwAAAADgD+IrAAAAAPAH8RUAAAAA+IP4CgAAAAD8QXwFAAAAAP4gvgIAAAAAfxBfAQAAAIA\/iK8AAAAAwB\/EVwAAAADgD+IrAAAAAPAH8RUAAAAA+IP4CgAAAAD8QXwFAMCTZ8X8H4+KkgSwsfyPrzLZ\/xOp3ZyZ\/8P0XDGTWFIsL9Yy1wcA4Fsu2V1V3TWeNT\/hUUx276jqSlCWADaMz\/GVCJNEvJRe+svXX39tznoQsaRYXqxFiLURMumZG8nkfNr8CAB48kyGq7aGk+YHPIqVZPjFqvCE+QkANoDP8ZVIRwRL5of1EGv5lYenT2bibM13AtvPxDPmDCl18WB5wK2qM75W3JSZ+ej49mfMZZ\/ddXzolp4enjz3pvuP7a6sKC+peKH2WHTqnjnbHyvzox1NMvHSSj3x8Y7yULToM\/F6R0lpx7j5wdNif2P5ievmB1v2ZvRo3QtlpeVlL+w+Ojhvzl1dnRvpCL0QLCktr9jV3n\/T+rp5ZTEWbqmqlFmt+nHv+JI5e3Vl+dLhB+R2fRvSLVwLN8kVSyp37AtfW7D6FxVK8Ak32VNT5v0wJHGitKk\/ZX7YjBaiTSUdCfNDMZK9Oyt2dD7yw4zsRG+9rJNNFxZWF843lVW+M6pq5rrz4yl77WhFTd+0+vlesmdPpairofOb7RYprg+N0QXzw8MR53hlWdPgoySSHWsveyUyZX5amw+b+yb4U6mKkYqGNssF4cnJajbRWR0MRXNvB9lEV1VFU\/9t86Om8FX3zvBb1q\/kQRc3IGdyVpG3oV3ymiBvQ9Fp61qWnRq072uH+hLL5mw8Jj7HVzdn5ot\/cqUTa4l1zQ9Pq8XY2UPNrb1rBkFe1oivSqrqG0ONxtTcNpAsHNvKRP4qEPhe\/fEzZ8NH6ktEiBWKzBBhPbmWL70RLGuKTKaWl1LJvqZg2RvDdmTxyIzEu8dnZeL9h3eU7IpMqRBiI+KrO8OvV+x4K5pcuLM8d707VFF14rq8QSxdPFRW0RS+Pr90Z3Ey+k5V6W6jfTnZvaOsrismszp9oW2H0WIT+TTuOmvldp0bcqwkw9XltR3X5u4sL81e66wLVnWrJwkFEnzyiTIsqXjnkkcA4Fd89djitGKanq5lkt1VpcG3hh+x8SHOoPLa3uTSneXsyupcZLdn8a7vbNIsDbaIU3LO+PnioZJdvZOiKj5EXZNt0LXP0G\/SQ8ZXel2SV6qS6t7ioiNPyxdaymsjRbYuHn1z34hiKrk\/iK\/Wb6pvt8fdeWW6b1fw9Yue1xnPq6WY6Yqj5EFvuyKuMPYkLjWSvA1Vvd4vb0MLE9G3qs2tqG95WnrUfW1qsL2qdAfPvx8vn+OrP0wbd4SH8Sjrbg7zQ81lged\/OpK+b84oUuH4asvxT4oM1jIzffWBQPnBj9SJm5kZ+NEzgb9pHnraQ9rNTF5tnchkOrKztH3Ur8b87Wh9acuFO+Yn9WV5sFPdvrUWYREt5oeKr8RtoKQhap\/tsZPlW2X0Mt\/fUL5v0L4bZWNtwbIukadEZ0X5iavmXJXzQ7Ihe0\/eb0bb1mq\/rnNDmulI6JWumFXa8j6nmokFEtwkrEdw7rZaEUe5KH6ls27FND1zl\/FhtIPcip21ngDr23rY+Gq+b5dTRYvZwYI2fXylDtajHK\/ZSK1+rXugR9zcN+OR6sC6EF+t1+1o6MWOWF7vkrn+pq0nrxW4Y2s1XDtHsjKIunLU+lWhg750pWPnj53bkPyqUS6Wc1+THYxz72vYWMRXGyQzNdDasO3ZQCDw3Lb6Hx08+1l69X46eTHcur+xcX9r+Fwk\/NPmg6dHUiL0yqRifcebfyTnn\/1YPmHS46v01bNileafD306IOKrksafn+081Nz4o+bjvSPJNUOtTGomOZFMqQdcmfmh1h8EAi8dj+Wskk4Ovd9qbno4acSBmVR84OcH5fOxn4aHptKp4c7m\/QfDV801M\/MjnW80H3w\/tt6gEQ8i21hVHdeWcm\/27saHc3VWDb6RZI\/q1Vaxq\/2SR7cES25c5DQWHza+WjNXOc+vXOS3y2qLIgXXkt53l4nurRUd41aZrKf9+sANZce7dpS93DuZU+Ar8\/1N1vMrFzvBx08+7rAbsqKISq2uZavTfa8Ej45l7SMib8bmt6RGIagDd3VY9TYJVjb1TtoNBaeHpNMFxX1QrIMrGzpWsnY2bLODHj0qVd\/XCrF8xQshp\/ulXodFvcr56GSp7IWm8FWz5F1ZshaQ9f+q2fzy3mWzrmanou21spuf2PfumJl1fbtep5K+v0ZSToW38yMTcS0ju7mqHrmuXdbKXz+CFe0qvNcTMSqbnWFXt17PHVenp7W6zJK+43knqVbOdu8j796z9o5oFcPz0OjF4p3myvJ4j7vrb15d8jy+rk2rrcQuqmIRZduT1HMsW5ltVjNXLhm51LtHVLyyl9+5dHt5KnJI7IjIc8+EtR\/25tZM1qQVu7NTVt1WyV6xrzYq5eil1hq5\/J7eyaXF0Q65mFbBck7GjtFZY75eCAUqgGbharfqJCYWGI71m98NFXOmuyqPS04t9cyDqkXR4bdelpuu70kuLVw5IbclszFnXVStvNkllh09FtSeLsqLqgwSvE+WYrK6wRYvNMndEbtZ9WP7AiKq8WBI9r3P7V5u0c5E7RxRnF\/Jg34yesm4TuoVXrd07YT5\/Epc6suPXnEWmeqrKfGzzwvWjfhqg2QSnduMN5+k8oOD\/z1ycrv6+flt31P\/BwLfbYjMZDLxMzXi5\/K\/r6\/5W\/H\/tuOfpO34auazs\/XPBQLB5oGpTP77V8\/sDj+w66FMylx8W+tH7u6B6Xh4l\/pNcEuJ+r\/+\/WQmMxMJiajw2W27arY8I3518PzVgca\/tvsWZuL\/LNJ7vnX4MV\/knk631b1KXKA7ouO37eumdmkWnKuzvL2JRkP\/xKLZn\/Bw4WurWOtJiK\/ETbRrd1l1x7i8Q4sUXEu62lXKUlL2hdC7uRcbXxW1oeVLh4Ml1d1afCWXFPfIyjcG7faByZXgEyDrfOs52V1VUVm50wiwpiM7jZa6fUTuLU\/27TG6najeJmIfgxV7VPfL2StHq8uretSK6o2C2i7ZQ9LogmIUu\/ugWAd3Jau+dt3Tl1xeyunEph6NhvqMriyRUIXRZUU2SqoOR2XfV6P7ZYfxOpSqw5V7Osfml+6IGe6PstNmMNSdUFkSSZm9Op0s5eT55WCZUSYeu2yWlexRU61OmTvz2gFV213jVJL7m+xrKD86YnXacSq8k5\/skny+Wt9n9iGU3VytHrkizVozApblb27LKrrxjqA9soVIxM68+L3s2lrdfmFaZni0bUfZMdWeKrTjIp\/JSH1p+6hY16z5BU9Sp5xVJ9ijg9OyE+xIe1VF+2hOJU90lb3YfklWmOGjL+7ouSk25H1onE0USFP2q6xuHxVJGbsjmoN5dang8bUvBWIrFZX1ar5MvFRlybCSOFGhjWyhltwna+N0vzisDXuO9oqf5abt3pjO5tZI1jLeFdwqggexwHD7VrNXobtu76kUwYBxtZEpV9ScGJlfSok2cXltQ8vRYfGzqmBmBKhVBqNCWgVl58q7AmjUOz+71aGUnZ93VgSto1zcmW5XHhdXLS2QB+OsETHh8sJYR1Xp7voWWUlUfVBf8eTlzXw3aaJ764vWVXc2UquuV94nS1FZ3VCqKIwLxfSFk\/Y7rrKXqVEHFqYHT7wczBu7UjsTndPQ4PxKHvTSyn0R1R19rKtWXEj1NzCtbyJqwwnj6iQ7gYuzSa0rTnwR4BXdLRbfCOKrDaT1DzTinPL9EfnG1P10sq9ZhDQyvvpLaugnJYHnGiOJdPrG2ZpnAttOx79Q8VV5Q3NNWSDwXL189iVOLhVflf9EpZCZGToiwrdnG8894I2qzK2hzp801rwkH6RtaxtJOUtnZs41PitS6I3LJ1HpeOffBwI\/OB67GWv9fiDwSmcslZn5UGTy+db\/mh1p2xII1IQTmdXF2PEfiN+G4w8zpgmKkp1NXug5VFsZ3Gleo7VLs+BcneXtzekecLWjRNy0zA95xFqF4yv1bZw2Ga0NT046a+VKD2YsxjegwZ2t0Umz6SpS8Ax7jA\/qa8vKPeEx15WqiPhqnRtykx02ZABQuTNs3yDzE3wSZEePGUWRDL\/Y1D8WqVXtxam+mjK7sWjdxd37K0rDaYDO9e8xvvKU7\/y0DDr7Z7SBctfVD667AlhkOlrrYW64q0ccwaTWohLuDO4z+nyqBM3IUHJ\/FGtpoxSIXTM6Z9pZ8siz3lJx7bIxP2dYOfndufomWG73QaeSu2IXKF6tfopt2Q8VVdxrpilro\/6ts4pId\/dZDy4ELUH50pezsAyqZbmtseOqEWaf6e5j5D5J7XKWqTmtdlmvct8hkYevY1T2uMvOJa7Jr34KHBp7EwXSFGUSdMpwKdHXNTgpF3Llc63ja5Sh2IpTnWQvKTvDcmQLK3CSjCWNn8VhLe2IGWvJXsdmKTml7Z2sPF7qwihzONldtfXkFdnFIDs\/PpaYE5n3qNtmPZEpW88T5Ilm9zQWOTEPhEjcDEUU5wm5lSvvCqCRC+R0EtMSL+5M1yuJSe61td1CeZC1yCp5WVz1\/WbjPnbS2AuPvBkdtvt2mXttjZnpfbIUl9WN5L6ArEz3vKJKIKcO3OzdmXuY7FrkTPkX0uztROz6vF0bZB2wLjKS\/CbC+KKhct+gusjIh37y2ayZZv43I9hYxFcbSIuvUjJWKXce+yyOtAaN51erqY+PG0+6nv27xuPnRFzjeuh0\/GNzlXRiKNI3ELcSyCTC2wOBLW2F+ull0reSyRupjPHb+6mhQ8+LGOnshBVg3U+PHNkSeLY+MmXOSc+L5WfSmXT8jIjyhO9uC7n6K245MhQ\/J\/aipPmDBwR1eBji6qk\/ClgQ9+kq9aW2c\/2VnHtzXoPPFUG55f5WW1e916Qm61tk\/Rp9Zzo2Nu3cKZx0isuVSfbEK6lsEYmbMyR5y9GXdBo6sq9FcOfJK3m9LB4YX61zQxZ5Y7uprXK9w+yf5p3gE0E2JUXjQ9zaZclP970i2uii4WLd\/sWRsu7N7v11HTj7Fj4ernSViWymt8iB8lzrylaUVZLuCmDJL1thQe\/NKIl1K8NyqZzakl+lneaInFTK9ia88mxmyXuX5TnlyrOoThUyH8WcSnnLeBWvVj9lrXPn3+vEEY1IbWQLg5ag3Kg7EbnuGju+VnxV4CSVm3NtwuMUW0hEO9\/cvbPuUM+Iav8VODR2sRRIM3ffLa759u4XqpN64Rv7YmVYxieur\/D1JWWerZLRSskp7QLJqpdk5CSfW64sjke7Xq+rqX2zd3RWloRX3TbLVjuO6mc9J+bPuQUi6o+xirWudwXQJMKVWrV0bSivVNX8tSqPQ1+3UB70WqQfBfss8MpbixyqUfwgn+DJh43GNwuy0NybkEenuKxuoLwMGHuqlbkh97AKdi1aGmkvaYhMmo\/WBWfhueGuvuuu25BRDks31ZcaltzNiZbD9a6q0kJDa2DjEF9tID2+kk+fSpo\/nDF+k7k10Piciq\/SqdiHkbN9A0MfhFt3yw6ANf8cTzvxVaDmtBFBZZK98gGYHaGlPzm+JRDYfto1Bobjfmpgv3osZoZPmfgZGY4dv5pevZ9Jp2XQFD+9PfAdO+LKzHw8EPlgZGY2PnTubOSDoYH3jzd+X2xf9leUw2P8RD482\/I38hnXiD91B26ioawPaLFyzbpPi+uvEWhJso+1eW3Vb2\/u1kO+wuNbaDzuCjkrZq+0W98HF5crg\/xON2\/IvtzXc51hJ+QbFHndYAxa+9XLOjdkk1+U6gM62\/GVd4JPBnkQD53oqDEKRByCUFt7rf01qtZYlPdjp5niOsr2rbrQswK5gN2nX351bR9cr9qSl45oGcSm877flaXqfAWu1Rb3R7FWnRpGz57yuk4V+nq7wC6v9fzqQadS3jJexavVT7Gt3T0TWuZlB0ghp9xcI1sYtATVo4PhRS0R2Sxb63t9LXIo8iSVqR0bXtA2kdPlc2n6mvntw8p8X6MaibHAobGLpUCa7vKXj4CSC3J+Xp0sdHyNi49W+Ma+mGWeP7KFvqR+WNcTX2mWp65emzLSn42EjAEkPeq2WbZ6xZA\/6zkxfxY7XsTzq7wKoFn7+ZW7VNX8tSqPQ1+3UB70WuQqLussKPT8yiillv6o+oZIfvY+WYrL6gaSF0CP51fmbdE+Lh7PrzSuaiY4RT3ZXVVy2Lnxyc60akk5X7shuuqSJMo5+AT+jYFvIeKrDaQeUgVeah24Gk9e\/eDg3wYC32sMX4zHPxsKh2QoJeOrxWT4lUDg+wcHEqmUettKxGNf\/E4+L9rWFgnvF4uVGF345EOkvxJLNocvxuLDZw++JBLY3qm6Dnoxuv8Fyhs6h67GYx901v+1fJlq6H9mZNwlAq2PUyJC2yYWCIWHPovHP+qUL3q9Ek78d0QEfuX7z8bnU8kPjJhQnvrGwkJ9b5KHV98IObpredXhiOyDbr4cYvTtlrcuY9z2hYnIW9X27VO\/vWmth5u9VaVBu6uGxbgEe4zPrnHdjy362wWyE7\/1GklxuVLk7cd4J8SeVGtM3D69hk2Xr+0aL7HYk92ksNuvUz07Sir29Gu9qoR1bkh7\/+retRMvmh39xW7aHegLJfiEGO8IOt9nywEny50\/UKvdxeUoiLu6x8URlNXJu9W1xrsuZaU7jo6Iopsfbdu99UX74CY6K4KvD4r59n1fWf\/7V1ptcX80XvJRSam6Z41KbDY98\/NcbpdGoV1e4\/0rj1PJJW8Zu3jt\/Igj0hUse3NQ5EfUWPVKifpzC\/a7RnIR91kmmozmyBYOPUFZdc0XlhYn+0TmVXUtvOOrC4Oh0t3h68bLXTLPDz5JjXel5CHWD5ljafgdMw+pZI9oRp9fLHRonGIpkKbH+1dytqsuFT6+2vtXVuEb+2JcE+T3MvbIFgZ9Sf2wPmx8Ja4YVW1XVH56Q+ovoYklc+p2yTrjq2Lev8qtAJrcd5xK7SFnijzTtcrjcK1bIA96LXIVl32V9n7\/SpJfcpVosaX3yVJUVjeUeuXJev+qTfys7tHqz3vY71\/JV93k7SP\/\/V7FVc0Erahlxw3X+1dmt8zborqafyZEnE37Kl3vZWWvdsiwc43RrbBRiK820P3USJs5yMX2M\/HZTzpr5GtQBtkF7xmjf+CwGbpI39needUZ3yK9GD\/bINZ5\/qDskpeZ+bDVWTLwfHOfOeKft8zMUJsxoobybE3nx6nMX5Jn5ZgWz8o+fvfTsTP1To6eq5eDBMqZRv9A5aXWEePMFyvu\/m7gewcZ4f0bZP99YffYRNnp6OtyCKZg5RuRqRH76uxuJNmth9lovUjBdQVXCvx9YY275WezR37L+cO7xeRKkbd2p+OHmqxmh9ef\/RXZcC+s5cq+c8\/17ynL68i0zg25xw9cuBb+8Y6c3VwjwSeCCH6crmUiLnUeVrju4vcSYTWSmyquAq0u+cFrrLbV5Zga9EzMPHEloR\/cufNyKDaPUMQZP7DpxIh1vVhj\/ECntuRVHq8syTzbR0EbXqx\/RDZ5zV0ruMv2SGh54wfmn0ouectY5ebKz+1BdVKoJe0h0VxnnCszopXphMQWV4LeGS6846JWh1U5q+wVeZJqf71UGwzQJgf9M8d2c4aG86wtWrF4p6mNH1j7ZsQe0U6vS57Ht9BWjH2RR1kG9vrDSUVfUj+sDxlfiVAjYQwyKcfGvJhbt9WeDq67f2Cx4we6K4BGGz8wOtprb+jBZ3pe5bG51i2QB70WuYpLe4qbP36gxXgaad1NCpwsxWR1Y8l82gNgus\/H3NtHgfFpXdVMcBW1PGusi6d+Jmrz3eMKqtDO+tITjxnx1ca6n0ndSCYnkjPGyBLpmfjwwMBwfGYxnZpKJm\/JjnpCJpWMfRSJfBRLLqoZmfTMDWuVv6TE6vabVJnFmdjFgYGLsaTx2\/up2AfhztOd7il89qL5lCk9FR\/6IDLwcdwYqF1Kp2amrPeyxKdb8ZEPIyJLzgJi81MxsdbQJ+bw7gY54PutB41XiCdBsndngf51T5PJnhrnrWtg08kmenbt0Ue2wEPLJnpr97heY9sMcsIYAJsY8dXTJTMz8NP67X+3PWdqPMPfp\/q2ut5RUlHjjH73lBrvKC97uVv1nwSAzYj4Cnh6EF8BT7WVrPsF6KfUPUIrAJsa8RXw9CC+AgAAeLyIr4CnB\/EVAAAAAPjD5\/jq5sz8119\/bX5YD7GWWNf8AAAAAACbkM\/xlUgnvaSNMVc0sZZfeQAAAACAx8Ln+CqT\/b+bM\/MiWCr+KZZYUiwv1hLrmrMAAAAAYBPyOb4SRJgkUhPx0h+m54qZxJJieYIrAAAAAJud\/\/EVAAAAAHw7EV8BAAAAgD+IrzbU3Znhf2lrbnh1b91rb576aOKu8YdfJ96rE3O0qXdCzdf96dP+f3xTrhhqPvKvo7etvxh7d2bo3cMywYb9b797JX+A+3jvq8cu28f2i6Ejob1HfiMW+\/zyz5zNNew\/9svfUQEAfDOud5Q0RhfMDwAAPOWIrzbQoghvmtuj8dvLS1\/ODr\/bsnfff9yQ80V81fqrW8tLd63pKyt8MmUmelv2trw\/fGtx6e7\/xvvb9jb8w2hazP\/z6KnQgdOXb3y5vHR74tyR0IHeia+MNSxafHUvLhI5cn76rvwg46t3Y8bmFm9dObPv1bd\/\/b9qMQDwF\/EVAODbhPhq43z5m7frTg3LuMhw8xc\/DJ2dFD+I+OpnQ18aMz397r26\/b\/4ox10\/Xm4\/dX2y39aTf+2va71P+0VE+\/v\/aERsDms+EoFV\/v+La6CK0HGV9pTss9\/3br33c9yYjMA8APxFQDg24T4auPcPv9m3T+NOUHM\/K9aXj01tmzEV+c+jh77YUh1\/\/v3T9Pu51dffXqm7uCvbpufVlczY+++euCXU+Yny9LHp\/Yeufy5+cmk4qsvPr\/ctrehbehLJ1lXfHV35tyRULvTjRDAZpO9GT26q7KkNFjZ1B2zQ5mFa+GmF8pKyyt2tV+6Gg2VNvWnxNzF\/sbyE9Hht14OlpRW1vcklxaunJDrVtYeG54zrxLZqWh7bWW5mhmdumfMdJkbbK99QaQQrKxrvzBrzrS3WFK5+2h0OmvMdOKrxAkzD4ozv4gsqYVjF1WuKl4I9SSNxL13HACAx4f4agNN\/WLfqwfejamiXr7xYdveusMqalLvX7W8Pyb7DU4NnW7Zu6\/P3c9P9gPce+T8Dfm+1sri2HsH6kJnPs2Yv5RWFhN9bze0vDeZ2wwS8dWBw60H3MGV4Hr\/qu7Vt\/tneHgFbF6LF5rKQ73JhTuLk71NZYeHl8S8bKKzOljbdW3uzvLCRFSELmVafFX2csfo7PLCWEdV6e76lvZL4ueJSKgieHRMhi1LFw+VVbdfmF5cujM\/2raj7NgVM1KyZMfayyqa+ibEAouTfU1l1d2T4gqTs8XqYCg6L5cuLr5aO0ty4YrKepX43Eh7VemOnptyRY8dBwDgsSK+2lDp3\/3i8GtOYPPupyoe+vN0In7DeWY18V5D6D3ZWNHcnRk6fcBZ8eD5afMXq\/duXT5z8LW9LWeGbi2bszRrxVf2+1d\/PN\/uFZsB2CyWL71RHopMZ8Vpfmc6NjYtwgwRI5W0DDrxxkT3Vi2+ev2icb2Y728or+9XUdDqauxkeSgq7gUytaN2SJW9crT00CVX4KI2J5c0zF\/q6o2lvLb4YrfsAl1cfLVmltTCIjXzOiaXUct77DgAAI8X8dVj8NVy\/Jct1hgVInb6\/X\/2fqIN\/bc4dEQf9E+X+fzyP+yta7Hfxfpqsu9A3Wvtv54p1Kgoqn+g8f7VqU9omQCb1r350Uh76OWafR3RcRWyjIcrSzoS6ndKyt0\/8LoxV\/5sR0rjHcbPcmZJqT5pQZGkp+Dw2mLLBZGZQvHVVVd8tWaW9EQEbZm8HQcA4PEivnoM0p+catDed7r7yam6g+duWcHPV5+dyX9+ZVI9DHt\/b\/XlkwNdvP2h+T2vp3WMb3Hkt9QBYHPKLk6OJebUA6elsY6t1b1TD3p+tWYwo55fDS8u3Vm2J\/mAyCEX2DdoPzFfnhq7NrVU5POrqnBS\/iRM9dU8anzlteMAADxexFcb7t6n\/7J\/75HfaANRmMOvO+9fGd3\/bkUP1IVOjf3ZWGh1deXzX\/9s7w\/f\/9SKkdS4F6+eGdMGdr+byXmNyoqvhMLjs\/\/x8ul9+oYAbDLTPdXBUF9y4c7y3HD71oqucTEv920o+zHUg4MZ4\/2r0VkRWWmvV2ke9v0rubmypshkSr5b9VZ11aPGV547DgDAY0V8tdH++B8H5LAWOY+n\/vTpL08eMP7u8LuXjRBo9cvftje8dtoOe9RTrzPGG1uGLy8fs9\/IMqd\/i5u\/M2nxlVDo7ws3t\/f\/ns6BwGY2O6iG0SuvqG7pmbBendLGD+wf6S26f6Bgjx9YcFw+Z\/zApo5Re3jTB4wfuJqdjr5urPVGZGrEFXc9VHxVYMcBAHh8iK8AAAAAwB\/EVwAAAADgD+IrAAAAAPAH8RUAAAAA+IP4CgAAAAD8QXwFAAAAAP4gvgIAAAAAfxBfAQAAAIA\/iK8AAAAAwB\/EVwAAAADgD+IrAAAAAPAH8RUAAAAA+IP4CgAAAAD8QXwFAAAAAP4gvgIAAAAAfxBfAQAAAIA\/iK8AAAAAwB\/EVwAAAADgD+IrAAAAAPAH8RUAAAAA+IP4CgAAAAD8QXwFAAAAAP4gvgIAAAAAfxBfAQAAAIA\/iK8AAAAAwB\/EVwAAAADgD+IrAAAAAPAH8RUAAAAA+IP4CgAAAAD8QXwFAAAAAP4gvgIAAAAAfxBfAQAAAIA\/iK8AAAAAwB\/EVwAAAADgD+IrAAAAAPCHE18xMTExMTExMTExMTExPeLE8ysAAAAA8AHxFQAAAAD4g\/gKAAAAAPxx+4vF\/wfretrAonNKPAAAAABJRU5ErkJggg==)","cb0aa032":"## Conclus\u00e3o","2229cf67":"### Definindo m\u00e9tricas pro cross_validate","adea5427":"## Dimensionality Reduction\n\nNo in\u00edcio, t\u00ednhamos o seguinte setup para reduzir a dimensionalidade do dataset:\n\n\n1.   Filtrar as features com correla\u00e7\u00e3o acima de 90%\n2.   Aplicar o PCA\n3.   Feature Selection com RFE\n\nPor\u00e9m ap\u00f3s testar algumas combina\u00e7\u00f5es, observamos que o modelo apresentou melhor resultado aplicando somente o PCA, por isso resolvemos retirar o filtragem por correla\u00e7\u00e3o e o RFE e manter apenas o PCA.\n\nAssim, aplicamos o PCA para diminuir a dimensionalidade do dataset. \n\nPrimeiro, escolhemos analisar a vari\u00e2ncia explicada, para decidirmos qual seria o melhor n\u00famero de componentes no PCA. Em seguida, aplicamos um scaler nos dados e rodamos o PCA com n_components = 90.","cc24fb68":"### adaboost","6ba85f85":"#### Preenchendo os valores NaN da coluna 'num_imgs' com 0\n\nTransformamos os valores NaN da coluna 'num_imgs' em 0 para n\u00e3o afetar o PCA.","d33156ca":"##Feature Engeneering","d7d683ed":"### Tratamento de colunas\n\nPrimeiro, verificamos quais as colunas s\u00e3o categ\u00f3ricas para serem tratadas. Como apenas as colunas 'tweet_attachment_class' e 'tweet_topic_ids' s\u00e3o categ\u00f3ricas, resolvemos trat\u00e1-las da seguinte maneira:\n\n*    'tweet_topic_ids': tentamos transform\u00e1-la para num\u00e9rica, mas estava muito complicada de converter, ent\u00e3o achamos melhor remov\u00ea-la, uma vez que n\u00e3o conseguir\u00edamos extrair o que significa cada t\u00f3pico.\n*    'tweet_attachment_class': dava o tipo do attachment, mas n\u00e3o era poss\u00edvel saber o que cada classe significava, ent\u00e3o achamos melhor remover.","3c200790":"### Aplicando o mesmo pr\u00e9-processamento do treino"}}