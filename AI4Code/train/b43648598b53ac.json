{"cell_type":{"367d6b81":"code","1287925b":"code","faf16e83":"code","a73d60b2":"code","488f6383":"code","f463ad8f":"code","88e641f3":"code","77f50d6e":"code","d1b4c3d1":"code","ca2d457f":"code","91267f5e":"code","5be77a90":"code","47bfdba6":"code","6d3df4f3":"code","383cc336":"code","75c3be0f":"code","b56a18f0":"code","4e57b08c":"code","16e6ecd5":"code","1bf4b838":"code","c45056c1":"code","ab710a71":"code","cf763250":"code","8b7fe23a":"code","9126da73":"code","f829cc7a":"code","0298c6e1":"code","8d1ed439":"code","1462c0f0":"code","b286a0df":"code","41b5ba22":"code","bca456ad":"code","84c5b7f3":"code","d0eb2db3":"code","28077a38":"code","fbe58323":"code","ea64474c":"code","70dd705b":"code","ac1328b5":"code","d5dd3da7":"code","9063709b":"code","fa14ef48":"markdown","9c985395":"markdown","dcf7f955":"markdown","ccb76a9c":"markdown"},"source":{"367d6b81":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1287925b":"#https:\/\/www.datacamp.com\/community\/tutorials\/recommender-systems-python\nimport pandas as pd\n","faf16e83":"metadata = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/movies_metadata.csv')","a73d60b2":"metadata = metadata[:20000]\nprint(metadata.shape)","488f6383":"C = metadata['vote_average'].mean()\nprint(C)","f463ad8f":"m = metadata['vote_count'].quantile(0.90)\nprint(m)","88e641f3":"q_movies = metadata.copy().loc[metadata['vote_count']>m]","77f50d6e":"q_movies.shape","d1b4c3d1":"def weighted_rating(data,m=m,c=C):\n    v = data['vote_count']\n    R = data['vote_average']\n    # Calculation based on the IMDB formula\n    return (v\/(v+m) * R) + (m\/(m+v) * C)","ca2d457f":"q_movies['score'] = q_movies.apply(weighted_rating,axis = 1)","91267f5e":"q_movies.sort_values(by = 'score',ascending = False,inplace = True)","5be77a90":"q_movies[['title', 'vote_count', 'vote_average', 'score']].head(20)\n#This is the simple recommmender","47bfdba6":"metadata['overview'].head()\n","6d3df4f3":"#Import TfIdfVectorizer from scikit-learn\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n#Define a TF-IDF Vectorizer Object. Remove all english stop words such as 'the', 'a'\ntfidf = TfidfVectorizer(stop_words='english')\n\n#Replace NaN with an empty string\nmetadata['overview'] = metadata['overview'].fillna('')\n\n#Construct the required TF-IDF matrix by fitting and transforming the data\ntfidf_matrix = tfidf.fit_transform(metadata['overview'])\n\n#Output the shape of tfidf_matrix\ntfidf_matrix.shape","383cc336":"#Array mapping from feature integer indices to feature name.\ntfidf.get_feature_names()[5000:5010]","75c3be0f":"# Import linear_kernel\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# Compute the cosine similarity matrix\ncosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)","b56a18f0":"cosine_sim.shape\n","4e57b08c":"cosine_sim[1]","16e6ecd5":"#Construct a reverse map of indices and movie titles\nindices = pd.Series(metadata.index, index=metadata['title']).drop_duplicates()","1bf4b838":"indices","c45056c1":"# Function that takes in movie title as input and outputs most similar movies\ndef get_recommendations(title, cosine_sim=cosine_sim):\n    # Get the index of the movie that matches the title\n    idx = indices[title]\n    print(idx)\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    \n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    \n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n    \n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n    \n    # Return the top 10 most similar movies\n    return metadata['title'].iloc[movie_indices]","ab710a71":"get_recommendations('The Dark Knight Rises')\n","cf763250":"list(enumerate(cosine_sim[18252]))","8b7fe23a":"get_recommendations('The Godfather')\n","9126da73":"# Load keywords and credits\ncredits = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/credits.csv')\nkeywords = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/keywords.csv')\ncredits.head()","f829cc7a":"keywords.head()","0298c6e1":"# Remove rows with bad IDs.\nmetadata = metadata.drop([19730])\n\n# Convert IDs to int. Required for merging\nkeywords['id'] = keywords['id'].astype('int')\ncredits['id'] = credits['id'].astype('int')\nmetadata['id'] = metadata['id'].astype('int')\n\n# Merge keywords and credits into your main metadata dataframe\nmetadata = metadata.merge(credits, on='id')\nmetadata = metadata.merge(keywords, on='id')","8d1ed439":"metadata","1462c0f0":"# Parse the stringified features into their corresponding python objects\nfrom ast import literal_eval\n\nfeatures = ['cast', 'crew', 'keywords', 'genres']\nfor feature in features:\n    metadata[feature] = metadata[feature].apply(literal_eval)","b286a0df":"metadata","41b5ba22":"def get_director(x):\n    for i in x:\n        if i['job'] == 'Director':\n            return i['name']\n    return np.nan","bca456ad":"def get_list(x):\n    if isinstance(x, list):\n        names = [i['name'] for i in x]\n        #Check if more than 3 elements exist. If yes, return only first three. If no, return entire list.\n        if len(names) > 3:\n            names = names[:3]\n        return names\n\n    #Return empty list in case of missing\/malformed data\n    return []","84c5b7f3":"# Define new director, cast, genres and keywords features that are in a suitable form.\nmetadata['director'] = metadata['crew'].apply(get_director)\n\nfeatures = ['cast', 'keywords', 'genres']\nfor feature in features:\n    metadata[feature] = metadata[feature].apply(get_list)","d0eb2db3":"metadata[['title', 'cast', 'director', 'keywords', 'genres']].head(3)","28077a38":"#Function to convert all strings to lower case and strip names of spaces\ndef clean_data(x):\n    if isinstance(x, list):\n        return [str.lower(i.replace(\" \", \"\")) for i in x]\n    else:\n        #Check if director exists. If not, return empty string\n        if isinstance(x, str):\n            return str.lower(x.replace(\" \", \"\"))\n        else:\n            return ''","fbe58323":"# Apply clean_data function to your features.\nfeatures = ['cast', 'keywords', 'director', 'genres']\n\nfor feature in features:\n    metadata[feature] = metadata[feature].apply(clean_data)","ea64474c":"def create_soup(x):\n    return ' '.join(x['keywords']) + ' ' + ' '.join(x['cast']) + ' ' + x['director'] + ' ' + ' '.join(x['genres'])\n","70dd705b":"# Create a new soup feature\nmetadata['soup'] = metadata.apply(create_soup, axis=1)","ac1328b5":"metadata[['soup']].head(2)","d5dd3da7":"# Import CountVectorizer and create the count matrix\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(metadata['soup'])","9063709b":"count_matrix.shape\n","fa14ef48":"# Compute the Cosine Similarity matrix based on the count_matrix\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)","9c985395":"metadata = metadata.reset_index()\nindices = pd.Series(metadata.index, index=metadata['title'])","dcf7f955":"# WeightedRating(WR)=((v\/v+m)\u22c5R)+((m\/v+m)\u22c5C)\n\nIn the above equation,\n\nv is the number of votes for the movie;\n\nm is the minimum votes required to be listed in the chart;\n\nR is the average rating of the movie;\n\nC is the mean vote across the whole report.","ccb76a9c":"get_recommendations('The Dark Knight Rises', cosine_sim2)\n"}}