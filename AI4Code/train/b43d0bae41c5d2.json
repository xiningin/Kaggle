{"cell_type":{"dfd00889":"code","10240ac6":"code","112fed3b":"code","70d3d4ff":"code","424d6a8c":"code","f2ab87c6":"code","fd7200d0":"code","0a03d96e":"code","71895195":"code","fcc3bf83":"code","c56a1767":"code","566e4b7c":"code","cedb614b":"code","e9f0e7e4":"code","e937f195":"code","02fa7469":"code","e1bee9e7":"code","9f95fcfa":"code","4e4d6861":"code","b0adc750":"code","f37f6940":"code","ef5d3946":"code","3f589c5b":"code","2ffdc6ec":"code","6037d9eb":"code","c6065f62":"code","4d47902a":"code","d9c7ab8b":"code","32fa99c2":"code","bcea962c":"code","42151e3b":"code","d5b7f283":"code","64c661f3":"code","f7c0c944":"code","793c35d3":"code","107a0078":"code","3e47fbff":"code","462179ca":"code","50156235":"code","63ec7219":"code","78cc4f87":"code","87c9e424":"code","74d20c9e":"code","32545cdc":"code","8bde9009":"code","6505f061":"code","e851a1b1":"code","196489ab":"code","0b95eacd":"code","b3e79966":"code","2b06f7dd":"code","bbb29dcd":"code","7d81ee02":"code","26a646a7":"code","527b18b5":"code","b5d18d1f":"code","b8acf733":"code","687c25ee":"code","12ea0555":"code","1be9bc5d":"code","c5804d84":"code","fc519f31":"code","df01dcf3":"code","141acbed":"code","309dec66":"markdown","5b28719f":"markdown","7ea87f3c":"markdown","2f083043":"markdown","29f96b50":"markdown","834dff4d":"markdown","b6835e55":"markdown","666d6079":"markdown","27d90122":"markdown","0673f94f":"markdown","648fcfe0":"markdown","7b600b13":"markdown","60e48ea9":"markdown","3dbd46f5":"markdown","e1c83b16":"markdown"},"source":{"dfd00889":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","10240ac6":"import pandas as pd\nimport numpy as np\nimport json\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\nfrom datetime import time\nimport glob\n%matplotlib inline","112fed3b":"ca = pd.read_csv('\/kaggle\/input\/youtube-new\/CAvideos.csv')","70d3d4ff":"ca.head()","424d6a8c":"with open('\/kaggle\/input\/youtube-new\/US_category_id.json') as f:\n    categories = json.load(f)['items']","f2ab87c6":"category_name = {}\nfor category in categories:\n    category_name[int(category['id'])] = category['snippet']['title']\nca['category_name'] = ca['category_id'].map(category_name)","fd7200d0":"print(category_name)","0a03d96e":"ca.info()","71895195":"ca.isnull().sum()\n# we see some nulls in the description and category name, let's find out why\n# re ran to double check","fcc3bf83":"ca['description'].fillna(value='None',inplace=True)","c56a1767":"# converted object to dt obj\nca['publish_time'] = pd.to_datetime(ca['publish_time'], format = '%Y-%m-%dT%H:%M:%S.%fZ')","566e4b7c":"# getting months the video was published in\nca['publish_month'] = ca['publish_time'].dt.month","cedb614b":"# trending date -> datetime\nca['trending_date'] = pd.to_datetime(ca['trending_date'],format = '%y.%d.%m')\nca['trending_month'] = ca['trending_date'].dt.month","e9f0e7e4":"ca.columns","e937f195":"# lets see how many videos are in each category\nca['category_name'].value_counts()","02fa7469":"like_percent = pd.DataFrame((ca['likes'] \/ ca['views']) * 100)\ndislike_percent = pd.DataFrame((ca['dislikes'] \/ ca['views']) * 100)\nca['like_percent'] = like_percent\nca['dislike_percent'] = dislike_percent","e1bee9e7":"ca['positive_or_negative'] = ca['like_percent'] > ca['dislike_percent']","9f95fcfa":"# comparing the likes to dislikes \nvideo_feel = []\nfor item in ca['positive_or_negative']:\n    if item == True:\n        video_feel.append(1)\n    else:\n        video_feel.append(0)","4e4d6861":"ca['positive_or_negative'] = video_feel","b0adc750":"ca.head()","f37f6940":"# reorganize df\nca = ca[['video_id','trending_date','trending_month','title','channel_title',\n        'category_id','category_name','publish_time','publish_month','views','positive_or_negative',\n        'likes','like_percent','dislikes','dislike_percent','comment_count','thumbnail_link','comments_disabled',\n        'ratings_disabled','video_error_or_removed','description']]","ef5d3946":"ca.head()","3f589c5b":"f, ax = plt.subplots(3,1,figsize=(20,15))\ng = sns.barplot(x=ca['publish_month'],y=ca['views'],data=ca,ax=ax[0])\ng.set_title('Views across published months')\ng1 = sns.barplot(x=ca['publish_month'],y=ca['likes'],data=ca,ax=ax[1])\ng1.set_title('Likes across published months')\ng2 = sns.barplot(x=ca['publish_month'],y=ca['dislikes'],data=ca,ax=ax[2])\ng2.set_title('Dislikes across published months')\nplt.tight_layout()","2ffdc6ec":"f, ax = plt.subplots(3,1,figsize=(20,15))\ng = sns.barplot(x=ca['trending_month'],y=ca['views'],data=ca,ax=ax[0])\ng.set_title('Views across trending months')\ng1 = sns.barplot(x=ca['trending_month'],y=ca['likes'],data=ca,ax=ax[1])\ng1.set_title('Likes across trending months')\ng2 = sns.barplot(x=ca['trending_month'],y=ca['dislikes'],data=ca,ax=ax[2])\ng2.set_title('Dislikes across trending months')\nplt.tight_layout()","6037d9eb":"plt.figure(figsize=(15,10))\ng = sns.barplot(x=ca['category_name'],y=ca['comment_count'],data=ca)\ng.set_xticklabels(g.get_xticklabels(),rotation=30)\nplt.title('Comments within Categories')\nplt.tight_layout()\n# it looks like non profits seem to have the most 'comment' activities","c6065f62":"plt.figure(figsize=(15,10))\nax = sns.heatmap(ca.corr(),annot=True)\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)","4d47902a":"corr_list = ca[['views','likes','dislikes','comment_count']]","d9c7ab8b":"plt.figure(figsize=(15,10))\nax = sns.heatmap(data=corr_list.corr(),cmap='YlGnBu',annot=True)\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\n","32fa99c2":"f, ax = plt.subplots(2,2,figsize=(20,15))\n# 1st chart (likes : views)\ng = sns.scatterplot(x=ca['likes'],y=ca['views'],data=ca,ax=ax[0][0])\ng.set_title('Correlation of Likes and Views')\n# 2nd chart (likes : communt_count)\ng1 = sns.scatterplot(x=ca['likes'],y=ca['comment_count'],data=ca,ax=ax[0][1])\ng1.set_title('Correlation of Likes and Comment Counts')\n# 3rd chart (comment_count : dislikes)\ng2 = sns.scatterplot(x=ca['dislikes'],y=ca['comment_count'],data=ca,ax=ax[1][0])\ng2.set_title('Correlation of Dislikes and Comment Counts')\n# 4th chart (likes : dislikes)\ng3 = sns.scatterplot(x=ca['likes'],y=ca['dislikes'],data=ca,ax=ax[1][1])\ng3.set_title('Correlation of Likes and Dislikes')","bcea962c":"plt.figure(figsize=(15,10))\ng = sns.boxplot(x=ca['category_name'],y=np.log(ca['views']),data=ca)\ng.set_xticklabels(g.get_xticklabels(),rotation=30)\nplt.title('Views across categories')\nplt.show()","42151e3b":"f, ax = plt.subplots(2,1,figsize=(15,20))\ng1 = sns.boxplot(x=ca['category_name'],y=(np.log(ca['like_percent'])),data=ca,ax=ax[0])\ng1.set_xticklabels(g.get_xticklabels(),rotation=30)\ng1.set_title('Like % across categories')\nplt.tight_layout()\ng2 = sns.boxplot(x=ca['category_name'],y=(np.log(ca['dislike_percent'])),data=ca,ax=ax[1])\ng2.set_xticklabels(g.get_xticklabels(),rotation=30)\nplt.title('Dislike % amongst categories')\nplt.tight_layout()","d5b7f283":"plt.figure(figsize=(15,10))\ng = sns.barplot(x=ca['category_name'],y=ca['views'],hue=ca['positive_or_negative'],data=ca)\ng.set_xticklabels(g.get_xticklabels(),rotation=30)\nplt.title('Positive vs. Negative Videos amongst Categories')\nplt.tight_layout()","64c661f3":"ca.head()","f7c0c944":"# so this gives us the hour, min, and seconds of the videos that are published\nca[['hours','minutes','seconds']] = ca['publish_time'].dt.time.astype(str).str.split(':', expand=True)","793c35d3":"f, ax = plt.subplots(2,2,figsize=(25,20))\ng = sns.lineplot(x=ca['hours'],y=ca['views'],data=ca,marker = 'o',ci=None,ax=ax[0][0])\ng.set_title('Views across hours')\ng1 = sns.lineplot(x=ca['hours'],y=ca['likes'],data=ca,marker = 'o',ci=None,ax=ax[0][1])\ng1.set_title('Likes across hours')\ng2 = sns.lineplot(x=ca['hours'],y=ca['dislikes'],data=ca,marker = 'o',ci=None,ax=ax[1][0])\ng2.set_title('Dislikes across hours')\ng3 = sns.lineplot(x=ca['hours'],y=ca['comment_count'],data=ca,marker = 'o',ci=None,ax=ax[1][1])\ng3.set_title('Comment counts across hours')","107a0078":"f, ax = plt.subplots(2,1,figsize=(20,15))\ng = sns.boxplot(x=ca['publish_month'],y=np.log(ca['likes']),data=ca,ax=ax[0])\ng.set_title('Published videos likes by Month')\ng1 = sns.boxplot(x=ca['publish_month'],y=np.log(ca['views']),data=ca,ax=ax[1])\ng1.set_title('Amount of views by Month')","3e47fbff":"f, ax = plt.subplots(2,1,figsize=(20,15))\ng = sns.boxplot(x=(ca['hours']),y=np.log(ca['likes']),data=ca,ax=ax[0])\ng.set_title('Distribution of likes by Hour')\ng1 = sns.boxplot(x=ca['hours'],y=np.log(ca['views']),data=ca,ax=ax[1])\ng1.set_title('Distribution of views by Hour')","462179ca":"ca.head(1)","50156235":"ca.describe()","63ec7219":"ca.columns\n# our x & y\n# the y will be -> likes\n# the x will be -> trending month, publish month, views, disklikes, and comment_count","78cc4f87":"df = ca[['category_id','trending_date','trending_month','publish_time','publish_month','category_id','views','likes','dislikes',\n         'positive_or_negative','comment_count']]","87c9e424":"df['views_log'] = np.log(df['views'])\ndf['likes_log'] = np.log(df['likes'])\ndf['dislikes_log'] = np.log(df['dislikes'])\ndf['comment_count_log'] = np.log(df['comment_count'])","74d20c9e":"df.head()","32545cdc":"X = df[['trending_month','publish_month','category_id','positive_or_negative',\n        'views','dislikes','comment_count']]\ny = df['likes']","8bde9009":"from sklearn.model_selection import train_test_split","6505f061":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","e851a1b1":"from sklearn.linear_model import LinearRegression","196489ab":"lm = LinearRegression()","0b95eacd":"fit_model = lm.fit(X_train,y_train)","b3e79966":"print(lm.intercept_)","2b06f7dd":"lm.coef_","bbb29dcd":"X_train.columns","7d81ee02":"cdf = pd.DataFrame(lm.coef_,index = X_train.columns,columns=['Coefficients'])","26a646a7":"cdf","527b18b5":"predictions = lm.predict(X_test)","b5d18d1f":"predictions","b8acf733":"plt.figure(figsize=(15,10))\ng = sns.regplot(y_test,predictions,fit_reg=True)\nplt.xlabel('Y Test (Actual)')\nplt.ylabel('Predictions')\ng.set(xlim=(-100000,5000000),ylim=(-100000,5000000))\nplt.show(g)","687c25ee":"residuals = (y_test - predictions)\nprint(residuals)","12ea0555":"residuals.mean()","1be9bc5d":"g = sns.distplot(residuals,bins=30)\ng.set(xlim=(-500000,500000))","c5804d84":"plt.figure(figsize=(15,10))\nsns.regplot(x=predictions,y=residuals,fit_reg=True)","fc519f31":"from sklearn import metrics","df01dcf3":"lm.score(X_test,y_test)","141acbed":"print('MAE :',metrics.mean_absolute_error(y_test,predictions))\nprint('MSE :',metrics.mean_squared_error(y_test,predictions))\nprint('RMSE :',np.sqrt(metrics.mean_squared_error(y_test,predictions)))","309dec66":"This is my first post on Kaggle, please leave any feedback \/ areas to improve!","5b28719f":"The most useful way to plot residuals is predicted (x - axis) and residuals (y - axis)\nPositive values for the residual (on the y - axis) means that the predicition was too low, and the negative values mean that the prediction was too high, ","7ea87f3c":"this is our r^2\nthis indicates the % of the variance in the dependent variable that the independent variables explain\nso in our case -> the % of 'views' that are dependent on the features 'X' (likes, views, comment count, etc)\nscale is 0-100% scale, we can also have a negative as well","2f083043":"# Visualizations","29f96b50":"# Finding what hour videos are usually 'published'","834dff4d":"# Predicting amount of likes for a video","b6835e55":"A higher r^2 means that smaller differences between the observed data and the fitted values, however having a higher R^2 does not always mean that the model is a good fit","666d6079":"Import libraries","27d90122":"so here we see a clear different in 'people & blogs', 'sports', and 'Autos & Vehicles'\nit looks like videos in these categories are generally more negative than positive","0673f94f":"# Strong correlation -> \nlikes : views, \nlikes : comment_count\nmedium  correlation -> \nviews : comment_count,\ndislikes : comment_count\nlow correlation -> \nlikes : dislikes\n","648fcfe0":"In this notebook, we'll cover some basics of data visualizations, feature engineering, and looking into some CA video patterns.\nWe'll plot out following\n1. the most common types of videos\n2. Likes across published months \/ trending months\n3. Correlation between columns\n4. Views \/ likes \/ dislikes across hours\n\nPlease feel free to leave any feedback \/ areas of improvement that you come across!","7b600b13":"It looks like views, likes, dislikes and comment_count are all relativley correlated, lets take a deeper look","60e48ea9":"Will continue this kernal after learning more about text analysis \/ NLP, please leave any feedback for this notebook!","3dbd46f5":"If all other variables are fixed, this means that one unit increase is associated with the change of one 'coefficient' per category","e1c83b16":"It looks like music category seems to have the highest engagment rate of all\nIn the dislike % we see a few outliers in 'people & blogs' -> besides that the dislike % is relatively low"}}