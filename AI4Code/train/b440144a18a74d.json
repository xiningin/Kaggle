{"cell_type":{"56a85b9e":"code","001c7f77":"code","4fe11af5":"code","50de8b45":"markdown","bbc37116":"markdown","83eef958":"markdown","6bcbd53d":"markdown"},"source":{"56a85b9e":"import pandas as pd\nimport numpy as np\nimport csv\nfrom numba import njit\nfrom numba.typed import Dict\n\ninput_filename  = \"\/kaggle\/input\/open-2-shopee-code-league-order-brushing\/order_brush_order.csv\"\noutput_filename = \"submission.csv\"\n\nDEFAULT_USERID = '0'\nCONCENTRATE_THRESHOLD = 3\nONE_HOUR = np.timedelta64(1, 'h')","001c7f77":"def format_users(userids):\n    ''' Returns formatted userids as string '''\n    return '&'.join([str(userid) for userid in sorted(userids)])\n\ndef get_top_suspicious_users(tally):\n    ''' Extracts top userids from dictionary tally and returns formatted string '''\n    if not tally: return DEFAULT_USERID\n    m = max(tally.values())\n    return format_users(filter(lambda k: tally[k]==m, tally))\n\n@njit\ndef flag_suspicious(flag, shopid, userid, event_time):\n    ''' Returns a column of whether the given order is in an order brush period '''\n    curr_shopid = shopid[0]\n    prev_time = event_time[0] - ONE_HOUR\n    for i in range(len(flag)):\n        if shopid[i] != curr_shopid:\n            curr_shopid = shopid[i]\n            prev_time = event_time[i] - ONE_HOUR\n        curr_time = event_time[i]\n        j = i+1\n        users = {userid[i]: 1}\n        while j < len(flag) and shopid[j] == curr_shopid and event_time[j] - curr_time <= ONE_HOUR:\n            if userid[j] not in users: users[userid[j]] = 0\n            users[userid[j]] += 1\n            j += 1\n        while j-i < CONCENTRATE_THRESHOLD*len(users) and event_time[j-1] - prev_time > ONE_HOUR:\n            j -= 1\n            users[userid[j]] -= 1\n            if users[userid[j]] == 0: users.pop(userid[j])\n        if j-i >= CONCENTRATE_THRESHOLD*len(users):\n            flag[i:j] = 1\n        prev_time = curr_time\n    return flag\n@njit\ndef tally_suspicious(flag, shopid, userid):\n    ''' Returns a dictionary containing shopid as key and userid value_counts as value '''\n    result = Dict.empty(key_type=0,value_type={0:0})\n    curr_shopid = shopid[0]\n    shop_tally = Dict.empty(key_type=0,value_type=0)\n    for i in range(len(shopid)):\n        if shopid[i] != curr_shopid:\n            result[curr_shopid] = shop_tally.copy()\n            curr_shopid = shopid[i]\n            shop_tally.clear()\n        if flag[i]:\n            if userid[i] not in shop_tally:\n                shop_tally[userid[i]] = 0\n            shop_tally[userid[i]] += 1\n    result[curr_shopid] = shop_tally\n    return result\n\ndef write_csv(filename, header, data):\n    with open(filename, 'w') as f:\n        writer = csv.writer(f)\n        writer.writerow(header)\n        writer.writerows(data)","4fe11af5":"%%time\n\n# 1. Read in the data\ndf = pd.read_csv(input_filename, parse_dates=['event_time'], usecols = ['shopid','userid','event_time'])\n\n# 2. Sort data by shopid, event_time\ndf.sort_values(by=['shopid', 'event_time'], inplace=True)\n\nshopid = df['shopid'].values\nuserid = df['userid'].values\nevent_time = df['event_time'].values\n\n# 3. Flag all orders that are found within valid-order brushed periods\nflag = flag_suspicious(np.zeros(shopid.shape, dtype=int), shopid, userid, event_time)\n\n# 4. Get the userid frequency counts for each shopid\nall_shopid_tally = tally_suspicious(flag, shopid, userid)\n\n# 5. For each shopid, get the top suspicious userid(s) if any\ndata = ([shopid_, get_top_suspicious_users(tally)] for shopid_, tally in all_shopid_tally.items())\n\n# 6. Write the result to file\nwrite_csv(filename=output_filename, header=['shopid', 'userid'], data=data)","50de8b45":"# Step 3: Execute logic\n\n1. Read in the data\n2. Sort data by `shopid`, then by `event_time`\n3. Flag all orders that are found within valid order-brushed periods\n4. Get the `userid` frequency counts for each `shopid`\n5. For each `shopid`, get the top suspicious `userid`(s)\n5. Write the result to file","bbc37116":"# Step 2: Define helper functions\n\n`get_top_suspicious_users(tally)` will take in the frequency counts of suspicious users and return `\"userid1&userid2\"` or `\"0\"` string format.  \n`flag_suspicious` takes in numpy arrays of sorted data and flags out all orderids that are found within valid order-brushed instances  \n`tally_suspicious` takes in numpy arrays and will return the frequency counts of suspicious users per shopid  ","83eef958":"# Step 1: Import statements + Define constants to be used","6bcbd53d":"# Optimized Python Solution (Execution time ~6s on kaggle kernel)\n\n#### Libraries required\n```bash\npip install pandas numba\n```"}}