{"cell_type":{"8e880dfa":"code","f719f60a":"code","2aaa588b":"code","79da833c":"code","ff1d477d":"code","8dccfad2":"code","6361a164":"code","c9a0c632":"code","764cbf6c":"code","23adfd36":"code","451a3056":"code","807683a1":"code","fc0f9439":"code","89573d52":"code","0cfba7aa":"code","55495b7c":"code","a932a93f":"code","5078058a":"code","f09e9c1e":"code","7231b9ea":"code","9c7b18f5":"code","e0345df1":"code","65414f2d":"code","6dbcf339":"code","8a76289c":"code","574254d4":"code","f55ba443":"code","8aafd670":"code","1de43637":"code","c346524b":"code","72742977":"code","7aa98bc6":"code","19dab7e8":"code","adf2ce95":"code","5e776882":"code","e22d169d":"code","6ab5b7bd":"code","d8179711":"code","6dd506e0":"code","8b17135b":"code","b4cddada":"code","abfb63d7":"code","54fc0a4b":"code","2561c0f6":"code","309bf432":"code","8c88c72a":"code","e3bf85ec":"code","ce0dee2b":"code","9e03bf0d":"code","c3c427ff":"code","1f1ae7e5":"code","76cf1310":"code","5cb99c7d":"code","534eac43":"code","678ed273":"code","18c19973":"code","8460dff2":"code","e0a69db2":"code","084b52ed":"code","2b63f576":"code","6fd6e116":"code","4d78f1bb":"code","d2380cc9":"code","8a9741b3":"code","0395577d":"code","3912abe3":"code","cb424d3f":"code","a08a98ad":"code","50015039":"code","cdcafe7d":"code","6c731571":"code","190f62d3":"code","188e6e5e":"code","ae9dde36":"code","cd261b0a":"code","0b37b610":"code","578141ef":"code","b8726c62":"code","0063bc4f":"code","d1ea2cf1":"code","79c31b02":"code","11e93706":"code","55a3937b":"code","64606986":"code","00658f58":"code","0d0387a7":"code","a6d8edaa":"code","1fe67e06":"code","44feeb3c":"code","04672e4e":"code","6cac67fd":"code","a61a012c":"code","f626605f":"code","2c5e3946":"code","6bb2fe71":"code","d7c9f17f":"code","97953be2":"code","4fac365e":"code","cb4aa01d":"code","25af57cc":"code","a77214a1":"code","812c1bfc":"code","9b269b47":"code","87fa9c7e":"code","d0831411":"code","e7821998":"code","9af804ad":"code","d9e6ecd0":"code","72744aa4":"code","52e9c38f":"code","e2271cfe":"code","42cb8d90":"code","94aeab00":"code","f696bbdf":"code","9d846e15":"code","135731c6":"code","495ca1fa":"code","16cc9c40":"code","2e233c02":"code","54ce837a":"code","99ca6b48":"code","d0fb2f75":"code","6dab1f44":"code","80e1bfdb":"code","99ac0f58":"code","df2c8f4a":"code","aa96a7d9":"code","3fb16f17":"code","2dcb3436":"code","f97d810c":"code","0a4f331d":"code","6782ba4e":"code","e7bf4801":"code","019ae2cd":"code","45cd2197":"code","80568fbe":"code","2df1d02c":"code","ac2e820c":"markdown","d2ed0ac5":"markdown","8429554d":"markdown","ebb7bc11":"markdown","cfd2741c":"markdown","89da9c00":"markdown","e5b9062a":"markdown","c96b7b76":"markdown","f9fd9ef8":"markdown","f75c0d21":"markdown","77a9758c":"markdown","df257b40":"markdown","d512c69f":"markdown","26e3a14d":"markdown"},"source":{"8e880dfa":"# import warnings\n# warnings.filterwarnings('ignore')\n\n# import pandas as pd\n# import numpy as np\n# import geopandas as gpd\n\n# from sklearn.model_selection import train_test_split\n# from sklearn.metrics import mean_absolute_error\n# from sklearn.linear_model import LinearRegression\n\n# import requests\n# import json\n# import time\n# from geopy.geocoders import Nominatim\n# import re\n\n# from geopy import distance\n# from shapely.geometry import Point\n# from matplotlib import pyplot as plt","f719f60a":"# train = pd.read_csv('data\/mf_geo_train.csv')","2aaa588b":"# test = pd.read_csv('data\/mf_geo_test.csv')\n# list(test)","79da833c":"#list(train)\n# lon - \u0434\u043e\u043b\u0433\u043e\u0442\u0430\n# lat - \u0448\u0438\u0440\u043e\u0442\u0430","ff1d477d":"# # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\n# y = train['lat'].astype('str')\n# x = train['lon'].astype('str')\n# s = y+\", \"+x\n# train['coordinate'] = s","8dccfad2":"# # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\n# y = test['lat'].astype('str')\n# x = test['lon'].astype('str')\n# s = y+\", \"+x\n# test['coordinate'] = s","6361a164":"# overpass_url = \"http:\/\/overpass-api.de\/api\/interpreter?data=[out:json];node(1);out;\"\n\n# overpass_query1 = \"\"\"  \n# [out:json];\n# area[\"name\"=\"\u0420\u043e\u0441\u0441\u0438\u044f\"][admin_level=2];\n# (node[\"place\"=\"city\"](area););\n# out center; \"\"\"\n# response1 = requests.get(overpass_url, \n#                         params={'data': overpass_query1})\n# data1 = response1.json()","c9a0c632":"# # \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0432 \u0420\u043e\u0441\u0441\u0438\u0438\n# Russia = pd.json_normalize(data1['elements'])\n# all_names = list(set(Russia['tags.name']))","764cbf6c":"# \u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0432\u0435\u0441\u044c \u043a\u043e\u0434, \u0437\u0430\u043c\u0435\u043d\u0430\n## train = test.copy()","23adfd36":"def function_name(j, x):\n    name = None\n    \n    # \u0421\u0430\u043c\u044b\u0435 \u0447\u0430\u0441\u0442\u044b\u0435 \u0433\u043e\u0440\u043e\u0434\u0430\n    \n    if '\u041c\u043e\u0441\u043a\u0432\u0430' in x:\n        print('\u041c\u043e\u0441\u043a\u0432\u0430')\n        return '\u041c\u043e\u0441\u043a\u0432\u0430'\n        \n    if '\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433' in x:\n        print('\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433')\n        return '\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433'\n    \n    for k in x:\n        low_sum = sum(i.isupper() for i in k)\n        \n        if (k!='\u0420\u043e\u0441\u0441\u0438\u044f') and  not k.isdigit() :\n            if k in all_names:\n                print(k)\n                return k","451a3056":"def all_city_names_trainNew2(data):\n    all_city = []\n    \n    for i in range(len(data)):\n        coord = data['coordinate'][i]\n        geolocator = Nominatim(user_agent=overpass_url)\n        location = geolocator.reverse(coord)\n        s = location.address\n        x = s.split(', ')\n        all_city.append(function_name(i, x))\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u043e\u0442\u0435\u0440\u044f\u043b\u043e\u0441\u044c \u043f\u043e \u0434\u043e\u0440\u043e\u0433\u0435\n        if len(all_city)<i:\n            print(i)\n            break\n    return all_city","807683a1":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\n#train['city'] = all_city_names_trainNew2(train)","fc0f9439":"#test['city'] = all_city_names_trainNew2(test)","89573d52":"# \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u044c\n#train.to_csv('data\/trainNew2')","0cfba7aa":"# \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u044c\n#test.to_csv('data\/testNew2')","55495b7c":"# \u041c\u043e\u0436\u043d\u043e \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0435\u0440\u0435\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u0433\u043e\u0440\u043e\u0434\u0430\n\ndef all_city_names_trainNew1(data):\n    \n    all_city = []\n    \n    for i in range(len(train)):\n        coord = train['coordinate'][i]\n        geolocator = Nominatim(user_agent=overpass_url)\n        location = geolocator.reverse(coord)\n        s = location.address\n        x = s.split(', ')\n        n = len(x)\/\/2\n        # \u0427\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0430 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0435\n        some = x[n-1:]\n        # \u041c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0441\u0430\u043c\u044b\u0435 \u0447\u0430\u0441\u0442\u044b\u0435 \u0433\u043e\u0440\u043e\u0434\u0430\n        if '\u041c\u043e\u0441\u043a\u0432\u0430' in x:\n            all_city.append('\u041c\u043e\u0441\u043a\u0432\u0430')\n            #print(i, ' ', '\u041c\u043e\u0441\u043a\u0432\u0430')\n        elif '\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433' in x:\n            all_city.append('\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433')\n            #print(i, ' ', '\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433')\n        elif '\u041d\u0438\u0436\u043d\u0438\u0439 \u041d\u043e\u0432\u0433\u043e\u0440\u043e\u0434' in x:\n            all_city.append('\u041d\u0438\u0436\u043d\u0438\u0439 \u041d\u043e\u0432\u0433\u043e\u0440\u043e\u0434')\n        elif '\u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0431\u0443\u0440\u0433' in x:\n            all_city.append('\u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0431\u0443\u0440\u0433')\n        elif '\u0421\u0430\u043c\u0430\u0440\u0430' in x:\n            all_city.append('\u0421\u0430\u043c\u0430\u0440\u0430')\n        elif '\u0423\u0444\u0430' in x:\n            all_city.append('\u0423\u0444\u0430')\n            #print(i, ' ', '\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433')\n        else:     \n            for k in some:\n                l = k.split(' ')\n                # \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0433\u043e\u0440\u043e\u0434\u0430 \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u043d \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430\n                # \u0418\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0446\u0438\u0444\u0440\u044b \u0438 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b\n                if (len(l)== 1) and (l[0]!='\u0420\u043e\u0441\u0441\u0438\u044f') and not (re.search(r'[^a-zA-Z\u0430-\u044f\u0410-\u042f-]',l[0] )):\n                    all_city.append(l[0])\n                    print(i, ' ', l[0])\n                    break\n        if len(all_city)<i:\n            print(i)\n    return all_city","a932a93f":"#train['city'] = all_city_names_trainNew1(train)","5078058a":"#test['city'] = all_city_names_trainNew1(test)","f09e9c1e":"# \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u044c\n##train.to_csv('data\/trainNew1')","7231b9ea":"# \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u044c\n##test.to_csv('data\/testNew1')","9c7b18f5":"#trainNew1 = pd.read_csv('data\/trainNew1').drop('Unnamed: 0', axis = 1)\n#trainNew2 = pd.read_csv('data\/trainNew2').drop('Unnamed: 0', axis = 1) # api","e0345df1":"##trainNew1 = pd.read_csv('data\/testNew1').drop('Unnamed: 0', axis = 1)\n##trainNew2 = pd.read_csv('data\/testNew2').drop('Unnamed: 0', axis = 1) # api","65414f2d":"# \u0421\u0440\u0430\u0432\u043d\u0438\u043c \u0442\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f","6dbcf339":"# x = ((trainNew1['city']!=trainNew2['city'])*1)\n# for j in range(len(x)):\n#     if x[j] == 1:\n#         print(j)\n#         print(trainNew1['city'][j], ' ', trainNew2['city'][j])","8a76289c":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e api, \u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439.\n# overpass_url = \"http:\/\/overpass-api.de\/api\/interpreter?data=[out:json];node(1);out;\"\n\n# overpass_query2 = \"\"\"  \n# [out:json][timeout:25];\n# \/\/ gather results by freeExec\n# (\n#   is_in( {}) -> .b;\n  \n#   (way(pivot.b)[\"place\"=\"city\"];\n#    rel(pivot.b)[\"place\"=\"city\"];\n#    )-> .c;\n  \n# );\n# .c out body;\n# >;\n# out skel qt; \"\"\".format(coord)\n\n# coord = trainNew1['coordinate'][137]\n# response2 = requests.get(overpass_url, \n#                         params={'data': overpass_query2})\n# data2 = response2.json()","574254d4":"#data2['elements'][0]['tags']['name']","f55ba443":"# coord = trainNew1['coordinate'][137]\n# geolocator = Nominatim(user_agent=overpass_url)\n# location = geolocator.reverse(coord)\n# s = location.address\n# s","8aafd670":"#trainNew1 = pd.read_csv('data\/trainNew1').drop('Unnamed: 0', axis = 1) # Nominatim\n#trainNew2 = pd.read_csv('data\/trainNew2').drop('Unnamed: 0', axis = 1) # api","1de43637":"##trainNew1 = pd.read_csv('data\/testNew1').drop('Unnamed: 0', axis = 1) # Nominatim\n##trainNew2 = pd.read_csv('data\/testNew2').drop('Unnamed: 0', axis = 1) # api","c346524b":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u0443\u044e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0443 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0433\u043e\u0440\u043e\u0434\u0430 - \u0446\u0435\u043d\u0442\u0440 \u0433\u043e\u0440\u043e\u0434\u0430.\ndef string_req_center(coord):\n    overpass_query = \"\"\"  \n    [out:json];\n    area[name=\"{}\"];\n    (node[\"place\"=\"city\"](area););\n    out center; \"\"\".format(coord)\n    \n    return overpass_query","72742977":"#towns = list(set(trainNew1['city']))\n#len(towns)","7aa98bc6":"overpass_url = \"http:\/\/overpass-api.de\/api\/interpreter?data=[out:json];node(1);out;\"\n\n# dict_name = {}\n\n# for i in range(len(towns)):\n#     print('sleep', i)\n#     city = towns[i]\n    \n#     response = requests.get(overpass_url, \n#                         params={'data': string_req_center(city)})\n#     data = response.json()\n        \n#     if len(data['elements']) == 0:\n#         dict_name[city] = 0\n#         print(city, ' ', 0)\n#     else:\n        \n#         frame = pd.json_normalize(data['elements'])\n#         center = (float(frame[frame['tags.name'] == city]['lat']) , float(frame[frame['tags.name'] == city]['lon']))\n\n#         dict_name[towns[i]]=center\n#         print(city, ' ', center)\n#         time.sleep(3)","19dab7e8":"# x_lat = []\n# x_lon = []\n# for name in trainNew1['city']:\n#     x_lat.append(str(dict_name[name][0]))\n#     x_lon.append(str(dict_name[name][1]) )\n# trainNew1['lat_center'] = x_lat\n# trainNew1['lon_center'] = x_lon","adf2ce95":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u0443\u044e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0443 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0433\u043e\u0440\u043e\u0434\u0430 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0437\u0435\u043c\u043d\u044b\u0445 \u0436\u0435\u043b\u0435\u0437\u043d\u043e\u0434\u043e\u0440\u043e\u0436\u043d\u044b\u0445 \u0441\u0442\u0430\u043d\u0446\u0438\u0439.\ndef string_req_town(coord):\n    overpass_query = \"\"\"  \n    [out:json];\n    area[name=\"{}\"];\n    nwr(area)[railway=station];\n    out; \"\"\".format(coord)\n    \n    return overpass_query","5e776882":"# overpass_url = \"http:\/\/overpass-api.de\/api\/interpreter?data=[out:json];node(1);out;\"\n\n# towns = list(set(trainNew1['city']))\n# dict_rail = {}\n\n# for i in range(len(towns)):\n#     print('sleep', i)\n#     time.sleep(10)\n#     city = towns[i]\n    \n#     response = requests.get(overpass_url, \n#                         params={'data': string_req_town(city)})\n#     data = response.json()\n        \n#     if len(data['elements']) == 0:\n#         dict_rail[city]=0\n#         print(city, ' ', 0)\n#     else:\n#         dff = pd.json_normalize(data['elements'])\n#         if 'tags.layer' in list(dff):\n#             dff['tags.layer']=dff['tags.layer'].fillna(0)\n#             n = len(dff[dff['tags.layer']==0]['tags.name'])\n#         else:\n#             n = len(dff)\n#         dict_rail[towns[i]]=n\n#         print(city, ' ', n)","e22d169d":"# x = []\n# for name in trainNew1['city']:\n#     x.append(dict_rail[name])\n# trainNew1['Number_of_rs'] = x","6ab5b7bd":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u0443\u044e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0443 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0433\u043e\u0440\u043e\u0434\u0430 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0435\u043b\u0435\u0439 \u0438 \u0445\u043e\u0441\u0442\u0435\u043b\u043e\u0432.\ndef string_req_hotel(coord):\n    overpass_query = \"\"\"  \n    [out:json];\n    area[name=\"{}\"];\n    nwr(area)[tourism=hotel];\n    out; \"\"\".format(coord)\n    \n    return overpass_query\n\ndef string_req_hostel(coord):\n    overpass_query = \"\"\"  \n    [out:json];\n    area[name=\"{}\"];\n    nwr(area)[tourism=hostel];\n    out; \"\"\".format(coord)\n    \n    return overpass_query\n\ndef string_req_guest(coord):\n    overpass_query = \"\"\"  \n    [out:json];\n    area[name=\"{}\"];\n    nwr(area)[tourism=guest_house];\n    out; \"\"\".format(coord)\n    \n    return overpass_query","d8179711":"# dict_rail = {}\n# begin = 0","6dd506e0":"# overpass_url = \"http:\/\/overpass-api.de\/api\/interpreter?data=[out:json];node(1);out;\"\n\n# towns = list(set(trainNew1['city']))\n\n# for i in range(begin, len(towns)):\n#     print('sleep', i)\n    \n    \n#     city = towns[i]\n    \n#     my_sum = 0\n    \n#     response = requests.get(overpass_url, \n#                         params={'data': string_req_hotel(city)})\n#     try:\n#         data = response.json()\n#     except:\n#         begin = i\n#         break\n        \n#     if len(data['elements']) == 0:\n#         my_sum += 0\n#         print(city, ' ', 0)\n#     else:\n#         n = len(data['elements'])\n#         my_sum +=n\n    \n#     time.sleep(5)\n    \n#     response = requests.get(overpass_url, \n#                         params={'data': string_req_hostel(city)})\n#     try:\n#         data = response.json()\n#     except:\n#         begin = i\n#         break\n        \n#     if len(data['elements']) == 0:\n#         my_sum += 0\n#         print(city, ' ', 0)\n#     else:\n#         n = len(data['elements'])\n#         my_sum +=n\n    \n#     time.sleep(5)\n    \n#     response = requests.get(overpass_url, \n#                         params={'data': string_req_guest(city)})\n    \n#     try:\n#         data = response.json()\n#     except:\n#         begin = i\n#         break\n        \n#     if len(data['elements']) == 0:\n#         my_sum += 0\n#         print(city, ' ', 0)\n#     else:\n#         n = len(data['elements'])\n#         my_sum +=n\n    \n#     dict_rail[towns[i]]=my_sum\n#     print(city, ' ', my_sum)\n#     time.sleep(10)","8b17135b":"# x = []\n# for name in trainNew1['city']:\n#     x.append(dict_rail[name])\n# trainNew1['Number_of_tourism'] = x","b4cddada":"##trainNew1.to_csv('data\/testDf')","abfb63d7":"##trainNew1.to_csv('data\/trainDf')","54fc0a4b":"#df = pd.read_csv('data\/trainDf').drop('Unnamed: 0', axis = 1)","2561c0f6":"##df = pd.read_csv('data\/testDf').drop('Unnamed: 0', axis = 1)","309bf432":"# \u041f\u0440\u0438\u0435\u0437\u0436\u0438\u0435 \u043c\u043e\u0433\u0443\u0442 \u043a\u0443\u043f\u0438\u0442\u044c \u0442\u0435\u043b\u0435\u0444\u043e\u043d \u043d\u0430 \u0441\u0442\u0430\u043d\u0446\u0438\u0438\n# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0430\u043d\u0446\u0438\u0439 \u0432 \u043e\u043a\u0440\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438 600 \u043c\u0435\u0442\u0440\u043e\u0432 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b\ndef str_req(city, coord):\n    overpass_query = \"\"\"\n    [out:json];\n    area[name=\"{}\"];\n    nwr(area)[railway=station](around:600.0,{});\n    out;\n    \"\"\".format(city, coord)\n    \n    return overpass_query","8c88c72a":"# begin = 0\n# number = []","e3bf85ec":"# \u0414\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043e\u043b\u0433\u0438\u0439, \u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u0440\u043e\u0441.\n# overpass_url = \"http:\/\/overpass-api.de\/api\/interpreter?data=[out:json];node(1);out;\"\n\n\n# for i in range(begin, len(df)):\n    \n#     coord = df['coordinate'][i]\n#     city = df['city'][i]\n    \n#     print('sleep', i)\n    \n#     response = requests.get(overpass_url, \n#                         params={'data': str_req(city, coord)})\n#     try:\n#         data = response.json()\n#     except:\n#         begin = i\n#         break\n    \n#     if len(data['elements']) == 0:\n#         n = 0\n#     else:\n#         n = len(data['elements'])\n        \n#     number.append(n)\n#     print(coord, ' ', city, ' ', n)\n#     time.sleep(10)","ce0dee2b":"#df['num_rail'] = number","9e03bf0d":"##df.to_csv('data\/trainDf')","c3c427ff":"##df.to_csv('data\/testDf')","1f1ae7e5":"# \u041f\u0440\u0438\u0435\u0437\u0436\u0438\u0435 \u043c\u043e\u0433\u0443\u0442 \u043a\u0443\u043f\u0438\u0442\u044c \u0442\u0435\u043b\u0435\u0444\u043e\u043d \u0443 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u044d\u0442\u0438 \u0442\u043e\u0447\u043a\u0438 \u0442\u043e\u0436\u0435\ndef str_hotel(city, coord):\n    overpass_query = \"\"\"\n    [out:json];\n    area[name=\"{}\"];\n    nwr(area)[tourism=hotel](around:600.0,{});\n    out;\n    \"\"\".format(city, coord)\n    \n    return overpass_query\n\ndef str_hostel(city, coord):\n    overpass_query = \"\"\"\n    [out:json];\n    area[name=\"{}\"];\n    nwr(area)[tourism=hostel](around:600.0,{});\n    out;\n    \"\"\".format(city, coord)\n    \n    return overpass_query\n\ndef str_guest(city, coord):\n    overpass_query = \"\"\"\n    [out:json];\n    area[name=\"{}\"];\n    nwr(area)[tourism=guest_house](around:600.0,{});\n    out;\n    \"\"\".format(city, coord)\n    \n    return overpass_query","76cf1310":"#begin = 0\n#number = []","5cb99c7d":"# overpass_url = \"http:\/\/overpass-api.de\/api\/interpreter?data=[out:json];node(1);out;\"\n\n\n# for i in range(begin, len(df)):\n    \n    \n#     coord = df['coordinate'][i]\n#     city = df['city'][i]\n#     my_sum = 0\n    \n#     print('sleep', i)\n    \n#     response = requests.get(overpass_url, \n#                         params={'data': str_hotel(city, coord)})\n#     try:\n#         data = response.json()\n#     except:\n#         begin = i\n#         break\n    \n#     if len(data['elements']) == 0:\n#         n = 0\n#     else:\n#         n = len(data['elements'])\n#     my_sum+=n\n    \n#     time.sleep(5)    \n#     response = requests.get(overpass_url, \n#                         params={'data': str_hostel(city, coord)})\n    \n#     try:\n#         data = response.json()\n#     except:\n#         begin = i\n#         break\n    \n#     if len(data['elements']) == 0:\n#         n = 0\n#     else:\n#         n = len(data['elements'])\n#     my_sum+=n\n    \n#     time.sleep(5)    \n#     response = requests.get(overpass_url, \n#                         params={'data': str_guest(city, coord)})\n    \n#     try:\n#         data = response.json()\n#     except:\n#         begin = i\n#         break\n    \n#     if len(data['elements']) == 0:\n#         n = 0\n#     else:\n#         n = len(data['elements'])\n#     my_sum+=n\n    \n    \n#     number.append(my_sum)\n#     print(coord, ' ', city, ' ', my_sum)\n#    time.sleep(10)","534eac43":"#df['num_tourism'] = number","678ed273":"##df.to_csv('data\/trainDf')","18c19973":"##df.to_csv('data\/testDf')","8460dff2":"# \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0435 \u0438 \u0430\u0432\u0442\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432. \u041b\u043e\u0433\u0438\u043a\u0430 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043f\u0440\u0438 \u0442\u0430\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043a\u043d\u043e\u043f\u043e\u0447\u043d\u044b\u0439 \u0442\u0435\u043b\u0435\u0444\u043e\u043d \u0443\u0434\u043e\u0431\u043d\u0435\u0435.\n# \u041d\u0443 \u0438\u043b\u0438 \u0442\u0430\u043c \u043c\u0430\u0445\u0438\u043d\u0430\u0446\u0438\u0438 \u043a\u0430\u043a\u0438\u0435.\ndef str_wash(city, coord):\n    overpass_query = \"\"\"\n    [out:json];\n    area[name=\"{}\"];\n    nwr(area)[amenity=car_wash](around:600.0,{});\n    out;\n    \"\"\".format(city, coord)\n    \n    return overpass_query\n\ndef str_repair(city, coord):\n    overpass_query = \"\"\"\n    [out:json];\n    area[name=\"{}\"];\n    nwr(area)[shop=car_repair](around:600.0,{});\n    out;\n    \"\"\".format(city, coord)\n    \n    return overpass_query","e0a69db2":"#begin = 0\n#number = []","084b52ed":"# overpass_url = \"http:\/\/overpass-api.de\/api\/interpreter?data=[out:json];node(1);out;\"\n\n\n# for i in range(begin, len(df)):\n    \n    \n#     coord = df['coordinate'][i]\n#     city = df['city'][i]\n#     my_sum = 0\n    \n#     print('sleep', i)\n    \n#     response = requests.get(overpass_url, \n#                         params={'data': str_wash(city, coord)})\n    \n#     try:\n#         data = response.json()\n#     except:\n#         begin = i\n#         break\n    \n#     if len(data['elements']) == 0:\n#         n = 0\n#     else:\n#         n = len(data['elements'])\n#     my_sum+=n\n    \n#     time.sleep(5)    \n#     response = requests.get(overpass_url, \n#                         params={'data': str_repair(city, coord)})\n    \n#     try:\n#         data = response.json()\n#     except:\n#         begin = i\n#         break\n    \n#     if len(data['elements']) == 0:\n#         n = 0\n#     else:\n#         n = len(data['elements'])\n#     my_sum+=n\n    \n    \n#     number.append(my_sum)\n#     print(coord, ' ', city, ' ', my_sum)\n#     time.sleep(5)","2b63f576":"#df['num_car_rep'] = number","6fd6e116":"##df.to_csv('data\/trainDf')","4d78f1bb":"##df.to_csv('data\/testDf')","d2380cc9":"# \u041f\u0440\u0438\u0435\u0437\u0436\u0438\u0435 \u043c\u043e\u0433\u0443\u0442 \u043a\u0443\u043f\u0438\u0442\u044c \u0442\u0435\u043b\u0435\u0444\u043e\u043d \u0442\u0430\u043c, \u0433\u0434\u0435 \u0445\u043e\u0442\u044f\u0442 \u0432\u0437\u044f\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c\ndef str_rental(city, coord):\n    overpass_query = \"\"\"\n    [out:json];\n    area[name=\"{}\"];\n    nwr(area)[amenity=car_rental](around:600.0,{});\n    out;\n    \"\"\".format(city, coord)\n    \n    return overpass_query\n\ndef str_sharing(city, coord):\n    overpass_query = \"\"\"\n    [out:json];\n    area[name=\"{}\"];\n    nwr(area)[amenity=car_sharing](around:600.0,{});\n    out;\n    \"\"\".format(city, coord)\n    \n    return overpass_query","8a9741b3":"#begin = 0\n#number = []","0395577d":"# overpass_url = \"http:\/\/overpass-api.de\/api\/interpreter?data=[out:json];node(1);out;\"\n\n\n# for i in range(begin, len(df)):\n    \n    \n#     coord = df['coordinate'][i]\n#     city = df['city'][i]\n#     my_sum = 0\n    \n    \n#     print('sleep', i)\n    \n#     response = requests.get(overpass_url, \n#                         params={'data': str_rental(city, coord)})\n    \n#     try:\n#         data = response.json()\n#     except:\n#         begin = i\n#         break\n    \n#     if len(data['elements']) == 0:\n#         n = 0\n#     else:\n#         n = len(data['elements'])\n#     my_sum+=n\n    \n#     time.sleep(5)    \n#     response = requests.get(overpass_url, \n#                         params={'data': str_sharing(city, coord)})\n    \n#     try:\n#         data = response.json()\n#     except:\n#         begin = i\n#         break\n    \n#     if len(data['elements']) == 0:\n#         n = 0\n#     else:\n#         n = len(data['elements'])\n#     my_sum+=n\n    \n    \n#     number.append(my_sum)\n#     print(coord, ' ', city, ' ', my_sum)\n#     time.sleep(10)","3912abe3":"#df['num_car_shar'] = number\n#108 133 81 193 237 239 256 317 343 373 380 411\n# r   r  s   r   r  r    r   r  r    r   r   r","cb424d3f":"# i = 411\n# coord = df['coordinate'][i]\n# city = df['city'][i]\n\n# response = requests.get(overpass_url, \n#                         params={'data': str_rental(city, coord)})\n\n# data = response.json()\n# print(df['num_car_shar'][i])\n# data","a08a98ad":"##df.to_csv('data\/trainDf')","50015039":"##df.to_csv('data\/testDf')","cdcafe7d":"def str_food(city, coord):\n    overpass_query = \"\"\"\n    [out:json];\n    area[name=\"{}\"];\n    nwr(area)[amenity=fast_food](around:600.0,{});\n    out;\n    \"\"\".format(city, coord)\n    \n    return overpass_query","6c731571":"# begin = 0\n# number = []","190f62d3":"# overpass_url = \"http:\/\/overpass-api.de\/api\/interpreter?data=[out:json];node(1);out;\"\n\n\n# for i in range(begin, len(df)):\n    \n    \n#     coord = df['coordinate'][i]\n#     city = df['city'][i]\n#     my_sum = 0\n    \n    \n#     print('sleep', i)\n    \n#     response = requests.get(overpass_url, \n#                         params={'data': str_food(city, coord)})\n    \n#     try:\n#         data = response.json()\n#     except:\n#         begin = i\n#         break\n    \n#     if len(data['elements']) == 0:\n#         n = 0\n#     else:\n#         n = len(data['elements'])\n#     my_sum+=n\n    \n    \n#     number.append(my_sum)\n#     print(coord, ' ', city, ' ', my_sum)\n#     time.sleep(5)","188e6e5e":"#df['num_food'] = number","ae9dde36":"##df.to_csv('data\/trainDf')","cd261b0a":"##df.to_csv('data\/testDf')","0b37b610":"def str_attraction(city, coord):\n    overpass_query = \"\"\"\n    [out:json];\n    area[name=\"{}\"];\n    nwr(area)[tourism=attraction](around:600.0,{});\n    out;\n    \"\"\".format(city, coord)\n    \n    return overpass_query","578141ef":"# begin = 0\n# number = []","b8726c62":"# overpass_url = \"http:\/\/overpass-api.de\/api\/interpreter?data=[out:json];node(1);out;\"\n\n# for i in range(begin, len(df)):\n    \n    \n#     coord = df['coordinate'][i]\n#     city = df['city'][i]\n#     my_sum = 0\n    \n#     print('sleep', i)\n    \n#     response = requests.get(overpass_url, \n#                         params={'data': str_attraction(city, coord)})\n    \n#     try:\n#         data = response.json()\n#     except:\n#         begin = i\n#         break\n    \n#     if len(data['elements']) == 0:\n#         n = 0\n#     else:\n#         n = len(data['elements'])\n#     my_sum+=n\n    \n    \n#     number.append(my_sum)\n#     print(coord, ' ', city, ' ', my_sum)\n#     time.sleep(10)","0063bc4f":"#df['num_attraction'] = number","d1ea2cf1":"##df.to_csv('data\/trainDf')","79c31b02":"##df.to_csv('data\/testDf')","11e93706":"##df = pd.read_csv('data\/trainDf').drop('Unnamed: 0', axis = 1)","55a3937b":"##df = pd.read_csv('data\/testDf').drop('Unnamed: 0', axis = 1)","64606986":"# \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442 \u0446\u0435\u043d\u0442\u0440\u0430.\n# \u0422\u0435\u043f\u0435\u0440\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0449\u0438\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f.\n# from geopy import distance\n# dist = []\n# for i in range(len(df)):\n#     a = (float(df['lat'][i]), float(df['lon'][i]))\n#     b = (float(df['lat_center'][i]), float(df['lon_center'][i]))\n#     d = distance.geodesic(a, b).km\n#     dist.append(d)","00658f58":"#df['dist_center'] = dist","0d0387a7":"##df.to_csv('data\/trainDf')","a6d8edaa":"##df.to_csv('data\/testDf')","1fe67e06":"#df = pd.read_csv('data\/trainDf').drop('Unnamed: 0', axis = 1)","44feeb3c":"##df = pd.read_csv('data\/testDf').drop('Unnamed: 0', axis = 1)","04672e4e":"#towns = list(set(df['city']))\n#overpass_url = \"http:\/\/overpass-api.de\/api\/interpreter?data=[out:json];node(1);out;\"","6cac67fd":"#len(towns)","a61a012c":"\n# \u041f\u0440\u0438\u0435\u0437\u0436\u0438\u0435 \u043c\u043e\u0433\u0443\u0442 \u043a\u0443\u043f\u0438\u0442\u044c \u0442\u0435\u043b\u0435\u0444\u043e\u043d \u043d\u0430 \u0441\u0442\u0430\u043d\u0446\u0438\u0438\n\noverpass_rail = \"\"\"\n[out:json];\narea[name=\"{}\"];\nnwr(area)[railway=station];\nout;\n\"\"\"\n\n# \u041f\u0440\u0438\u0435\u0437\u0436\u0438\u0435 \u043c\u043e\u0433\u0443\u0442 \u043a\u0443\u043f\u0438\u0442\u044c \u0442\u0435\u043b\u0435\u0444\u043e\u043d \u0443 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u044d\u0442\u0438 \u0442\u043e\u0447\u043a\u0438 \u0442\u043e\u0436\u0435\n\noverpass_hotel = \"\"\"\n[out:json];\narea[name=\"{}\"];\nnwr(area)[tourism=hotel];\nout;\n\"\"\"\n\noverpass_guest = \"\"\"\n[out:json];\narea[name=\"{}\"];\nnwr(area)[tourism=guest_house];\nout;\n\"\"\"\n\n# \u041e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0445\u043e\u0441\u0442\u0443\u043b\u044b, \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043d\u0435\u0441\u0442\u0438 \u043a \u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u043e\u043c\u0443 \u0446\u0435\u043d\u043e\u0432\u043e\u043c\u0443 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0443\noverpass_hostel = \"\"\"\n[out:json];\narea[name=\"{}\"];\nnwr(area)[tourism=hostel];\nout;\n\"\"\"\n\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u0430\u043a \u0436\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0439\u043a\u0438 \u0438 \u043f\u043e\u0447\u0438\u043d\u043a\u0443 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0420\u0430\u0431\u043e\u0447\u0438\u043c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u043d\u043e\u043f\u043e\u0447\u043d\u044b\u043c\u0438 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430\u043c\u0438\n# \u0420\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043d\u0430 \u0442\u0435\u043a\u0443\u0447\u043a\u0443 \u043a\u0430\u0434\u0440\u043e\u0432 \u0438 \u043d\u0435\u0447\u0438\u0441\u0442\u044b\u0435 \u043c\u0430\u0445\u0438\u043d\u0430\u0446\u0438\u0438 :)\noverpass_wash = \"\"\"\n[out:json];\narea[name=\"{}\"];\nnwr(area)[shop=car_wash];\nout;\n\"\"\"\n\noverpass_repair = \"\"\"\n[out:json];\narea[name=\"{}\"];\nnwr(area)[shop=car_repair];\nout;\n\"\"\"\n\n# \u0415\u0441\u0442\u044c \u0432\u0441\u0435\u0433\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u043e\u0447\u0435\u043a, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043d\u0430\u043f\u0440\u043e\u043a\u0430\u0442. \u042d\u0442\u043e \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u043f\u0440\u0438\u0435\u0437\u0436\u0438\u0445.\noverpass_rental = \"\"\"\n[out:json];\narea[name=\"{}\"];\nnwr(area)[amenity=car_rental];\nout;\n\"\"\"\n\noverpass_sharing = \"\"\"\n[out:json];\narea[name=\"{}\"];\nnwr(area)[amenity=car_sharing];\nout;\n\"\"\"\n# \u0422\u0430\u043c \u0433\u0434\u0435 \u043c\u043d\u043e\u0433\u043e \u0435\u0434\u044b - \u043e\u0436\u0438\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0440\u0430\u0439\u043e\u043d \u0438 \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0431\u043e\u0447\u0438\u0445.\noverpass_food = \"\"\"\n[out:json];\narea[name=\"{}\"];\nnwr(area)[amenity=fast_food];\nout;\n\"\"\"\n# \u0414\u043e\u0441\u0442\u043e\u043f\u0440\u0438\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 - \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u0443 \u0442\u0443\u0440\u0438\u0441\u0442\u043e\u0432.\noverpass_attraction = \"\"\"\n[out:json];\narea[name=\"{}\"];\nnwr(area)[tourism=attraction];\nout;\n\"\"\"   ","f626605f":"def Response_str(city, overpass_str, overpass_url):\n    \n    response = requests.get(overpass_url, \n                        params={'data': overpass_str.format(city)})\n        \n    try:\n        data = response.json()\n    except:\n        print('sleep')\n        time.sleep(10)\n            \n        response = requests.get(overpass_url, \n                        params={'data': overpass_str.format(city)})\n        data = response.json()\n            \n    if len(data['elements']) == 0:\n        dff = pd.DataFrame(data = [])\n    else:\n        dff = pd.json_normalize(data['elements'])\n    return dff","2c5e3946":"\ndef Return_dict_amenity (towns, overpass_str1 = '', overpass_str2 = ''):\n    \n    overpass_url = \"http:\/\/overpass-api.de\/api\/interpreter?data=[out:json];node(1);out;\"\n    \n    dict_x = {}\n\n    for i in range(len(towns)):\n        print('sleep', i)\n        city = towns[i]\n        my_sum = 0\n        \n        if (len(overpass_str1)!=0 and  len(overpass_str2)!=0):\n            dff1 = Response_str(city, overpass_str1, overpass_url)\n            dff2 = Response_str(city, overpass_str2, overpass_url)\n            dff = pd.concat([dff1, dff2], axis = 0)\n            columns = dff.columns\n            dff = pd.concat([dff1, dff2], axis = 0, ignore_index=True)\n            dff.columns = columns\n        elif len(overpass_str1)!=0:\n            dff = Response_str(city, overpass_str1, overpass_url)\n        elif len(overpass_str2)!=0:\n            dff = Response_str(city, overpass_str2, overpass_url)\n        \n        dict_x[towns[i]]= dff\n        \n        print(city, ' ', len(dff))\n        time.sleep(5)\n    return dict_x","6bb2fe71":"#dict_rail = Return_dict_amenity (towns,  overpass_rail)","d7c9f17f":"#dict_hotel = Return_dict_amenity (towns,  overpass_hotel, overpass_guest)","97953be2":"#dict_hostel = Return_dict_amenity (towns,  overpass_hostel)","4fac365e":"#dict_repair = Return_dict_amenity (towns,  overpass_repair, overpass_wash)","cb4aa01d":"#dict_rental = Return_dict_amenity (towns,  overpass_rental, overpass_sharing)","25af57cc":"#dict_food = Return_dict_amenity(towns,  overpass_food)","a77214a1":"#dict_attraction = Return_dict_amenity(towns,  overpass_attraction)","812c1bfc":"def Dist_Search_for(df, dict_x):\n    \n    dist = []\n    B = 0.6\n    \n    for i in range(len(df)):\n        \n        buffer = 0\n        \n        a = (float(df['lat'][i]), float(df['lon'][i]))\n        city = df['city'][i]\n        flag= 0\n        \n        dff = dict_x[city]\n        \n        if ('lat' in list(dff)) and ('lon' in list(dff)):\n            df_new = dff[['lat', 'lon']].copy()\n            df_new = df_new.dropna()\n        else:\n            min_dist = -1\n            dist.append(min_dist)\n            continue\n        \n\n        for j in df_new.index:\n        \n            b = (float(df_new['lat'][j]), float(df_new['lon'][j]) )\n            d = distance.geodesic(a, b).km\n            \n            if flag==0:\n                min_dist = d\n                flag = 1\n            elif min_dist > d:\n                min_dist = d\n            \n            if d<= B:\n                buffer+=1\n        \n        dist.append(min_dist)\n        print(i, ' ', city, ' ', min_dist, ' ', buffer)\n        \n    return dist, buffer","9b269b47":"#dist_rail, buf_rail = Dist_Search_for(df, dict_rail)","87fa9c7e":"#dist_hotel, buf_hotel = Dist_Search_for(df, dict_hotel)","d0831411":"#dist_hostel, buf_hostel = Dist_Search_for(df, dict_hostel)","e7821998":"#dist_repair, buf_repair = Dist_Search_for(df, dict_repair)","9af804ad":"#df['num_car_rep'][:10]","d9e6ecd0":"#dist_rental, buf_rental = Dist_Search_for(df, dict_rental)","72744aa4":"#dist_food, buf_food = Dist_Search_for(df, dict_food)","52e9c38f":"#dist_attraction, buf_attraction = Dist_Search_for(df, dict_attraction)","e2271cfe":"# df['dist_rail'] = dist_rail\n# df['dist_hotel']  = dist_hotel\n# df['dist_hostel'] = dist_hostel\n# df['dist_repair'] = dist_repair\n# df['dist_rental'] = dist_rental\n# df['dist_food'] = dist_food\n# df['dist_attraction'] = dist_attraction","42cb8d90":"##df.to_csv('data\/trainDf')","94aeab00":"##df.to_csv('data\/testDf')","f696bbdf":"##df = pd.read_csv('data\/trainDf').drop('Unnamed: 0', axis = 1)","9d846e15":"##df = pd.read_csv('data\/testDf').drop('Unnamed: 0', axis = 1)","135731c6":"# from shapely.geometry import Point\n# import numpy as np\n\n# x = df['lat'].astype(float)\n# y = df['lon'].astype(float)\n\n# p = []\n# for i in range(len(x)):\n#     p.append(Point(x[i],y[i]))\n    \n# empire = gpd.GeoDataFrame( geometry=p, crs={'init': 'epsg:4326'})\n# empire.plot();","495ca1fa":"# from matplotlib import pyplot as plt\n\n# plt.scatter(df['lat'], df['lon'])","16cc9c40":"# import folium\n# from folium.plugins import HeatMap","2e233c02":"# m = folium.Map(location=[55, 60 ], zoom_start=4, tiles='cartodbpositron')\n\n# #heat_data = [[row['lat'],row['lon']] for index, row in df.iterrows()]\n\n# heat_data = [[row['lat'],row['lon']] for index, row in df.iterrows()]\n# HeatMap(heat_data, radius=15).add_to(m)\n# m.save(\"map_Russia.html\")\n# m","54ce837a":"# city = df['city'][3]\n# lat_center = df['lat_center'][3]\n# lon_center = df['lon_center'][3]\n# print(city, ' ', lat_center, ' ', lon_center)","99ca6b48":"# data_rail = dict_rail[city]\n# data_rail = data_rail[['lat', 'lon']].copy()\n# data_rail = data_rail.dropna()\n\n# m = folium.Map(location=[lat_center, lon_center], zoom_start=11, tiles='cartodbpositron')\n\n# #heat_data = [[row['lat'],row['lon']] for index, row in df.iterrows()]\n\n# heat_data = [[row['lat'],row['lon']] for index, row in data_rail.iterrows()]\n# HeatMap(heat_data, radius=7).add_to(m)\n# m.save(\"map_rail_Moscow.html\")\n# m","d0fb2f75":"# data_hotel = dict_hotel[city]\n# data_hotel = data_hotel[['lat', 'lon']].copy()\n# data_hotel = data_hotel.dropna()\n\n# m = folium.Map(location=[lat_center, lon_center], zoom_start=11, tiles='cartodbpositron')\n\n# #heat_data = [[row['lat'],row['lon']] for index, row in df.iterrows()]\n\n# heat_data = [[row['lat'],row['lon']] for index, row in data_hotel.iterrows()]\n# HeatMap(heat_data, radius=15).add_to(m)\n# m.save(\"map_hotel_Moscow.html\")\n# m","6dab1f44":"##train = pd.read_csv('data\/mf_geo_train.csv')\n##test = pd.read_csv('data\/mf_geo_test.csv')","80e1bfdb":"# dr = ['Unnamed: 0', 'lon', 'lat', 'coordinate', 'lat_center', 'lon_center', 'city']\n# train = pd.read_csv('data\/trainDf').drop(dr, axis = 1)\n# test = pd.read_csv('data\/testDf').drop(dr, axis = 1)","99ac0f58":"#train.head(2)","df2c8f4a":"#test.head(2)","aa96a7d9":"# X_train, X_valid, y_train, y_valid = train_test_split(train.drop('target', axis=1), train[['target']])\n# model = LinearRegression().fit(X_train.drop('point_id', axis=1), y_train)","3fb16f17":"# y_predict = model.predict(X_valid.drop('point_id', axis=1))\n# mean_absolute_error(y_valid, y_predict)","2dcb3436":"# 0.5896087308315079\n# 0.6829291814484125\n# 0.7155210087935402\n# 0.740531431840494","f97d810c":"def Mean(train):\n    X_train, X_valid, y_train, y_valid = train_test_split(train.drop('target', axis=1), train[['target']])\n    model = LinearRegression().fit(X_train.drop('point_id', axis=1), y_train)\n    y_predict = model.predict(X_valid.drop('point_id', axis=1))\n    return mean_absolute_error(y_valid, y_predict)","0a4f331d":"# N = 10\n# x = 0\n# for i in range(N):\n#     x+=Mean(train)\n# print('Mean ', x\/N)","6782ba4e":"# import shap\n# X = shap.sample(X_valid.drop('point_id', axis=1), 10)","e7bf4801":"# shap_values = shap.LinearExplainer(model, X).shap_values(X)\n# shap.summary_plot(shap_values, X,\n#                       max_display=25, auto_size_plot=True)","019ae2cd":"#shap.dependence_plot(\"num_food\", shap_values, X)","45cd2197":"#shap.dependence_plot(\"dist_repair\", shap_values, X)","80568fbe":"# submission = pd.read_csv('data\/sample_submission.csv')\n# submission['target'] = model.predict(X_valid.drop('point_id', axis=1))\n# submission.to_csv('data\/MaryIzo_submission_3.csv', index=False)","2df1d02c":"# my_submission = pd.read_csv('data\/MaryIzo_submission_2.csv')\n# my_submission[:20]","ac2e820c":"### Make submission","d2ed0ac5":"1) \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441\u0432\u0435\u0440\u0445\u0443 \u0432\u043d\u0438\u0437.  \n2) \u041d\u0430 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0430 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430.  \n3) \u041a\u0440\u0430\u0441\u043d\u044b\u0439 \u0446\u0432\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u044b\u0441\u043e\u043a\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435, \u0441\u0438\u043d\u0438\u0439 \u0446\u0432\u0435\u0442 \u043d\u0438\u0437\u043a\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435.  \n4) \u0412\u044b\u0441\u043e\u043a\u043e\u0435 \u043f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 - \u044d\u0442\u043e \u0435\u0441\u043b\u0438 \u0441\u043f\u0440\u0430\u0432\u0430 \u043c\u043d\u043e\u0433\u043e \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u0442\u043e\u0447\u0435\u043a.  ","8429554d":"### \u0417\u0430\u0434\u0430\u0447\u0430:\n\n\u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u043f\u0440\u043e\u0434\u0430\u0436 \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 [\u0444\u0438\u0447\u0435\u0440\u0444\u043e\u043d\u043e\u0432](https:\/\/ru.wikipedia.org\/wiki\/%D0%A4%D0%B8%D1%87%D0%B5%D1%80%D1%84%D0%BE%D0%BD) (\u043d\u0430 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 \u043d\u0438\u0436\u0435 \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u0445\u043e\u0436\u0435\u0433\u043e \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430) \u0432 \u0441\u0430\u043b\u043e\u043d\u0430\u0445 \u041c\u0435\u0433\u0430\u0424\u043e\u043d\u0430\n![](https:\/\/39.img.avito.st\/640x480\/8468720439.jpg)","ebb7bc11":"### \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0440\u0435\u0448\u0435\u043d\u0438\u044e \u0438 \u0441\u043e\u0432\u0435\u0442\u044b:\n\n\u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0430\u0436\u043d\u044b\u0445 \u043f\u0443\u043d\u043a\u0442\u043e\u0432, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043f\u0443\u043d\u043a\u0442\u043e\u0432 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0438\u0442\u043e\u0433\u043e\u0432\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u0443\u043d\u043a\u0442\u043e\u0432 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438, \u0441\u0430\u043c\u044b\u043c \u043b\u0443\u0447\u0448\u0438\u043c \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u043a\u043e\u0433\u0434\u0430 \u0432\u0441\u0451 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0443\u0434\u0443\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043d\u0430 \u041f\u0438\u0442\u043e\u043d\u0435 (\u043f\u0440\u0438\u043c\u0435\u0440: \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 OSM \u0447\u0435\u0440\u0435\u0437 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 overpass-turbo \u0438\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a `overpass`\/`requests`. \u041e\u0431\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0447\u0442\u0435\u043d\u044b, \u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0431\u0430\u043b\u043b\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435)\n\n\n\n1. \u0421\u0430\u043b\u043e\u043d\u044b \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0440\u0430\u0437\u043d\u044b\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445, \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e **\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0433\u043e\u0440\u043e\u0434 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0430\u043b\u043e\u043d\u0430** (\u044d\u0442\u043e \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0432\u043e \u043c\u043d\u043e\u0433\u0438\u0445 \u0447\u0430\u0441\u0442\u044f\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). \u041a \u044d\u0442\u043e\u043c\u0443 \u0435\u0441\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 [\u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435 \u0433\u0435\u043e\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435](https:\/\/en.wikipedia.org\/wiki\/Reverse_geocoding) \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0433\u0435\u043e\u043a\u043e\u0434\u0435\u0440\u0430 [Nominatim](https:\/\/nominatim.org\/), \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0433\u043e \u0447\u0435\u0440\u0435\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 `geopy` \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0432\u043e\u0442 \u0442\u0430\u043a:\n```python\nfrom geopy.geocoders import Nominatim\ngeolocator = Nominatim(user_agent=\"specify_your_app_name_here\")\nlocation = geolocator.reverse(\"52.509669, 13.376294\")\nprint(location.address)\n```\n\u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0432\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0430\u0434\u0440\u0435\u0441\u0430, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0430. \u0422\u0430\u043a\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0438\u0437 OSM \u0438\u043b\u0438 \u043d\u0430\u0439\u0442\u0438 \u0432 \u043b\u044e\u0431\u043e\u043c \u0434\u0440\u0443\u0433\u043e\u043c \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u043e \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0433\u0440\u0430\u043d\u0438\u0446 \u0420\u043e\u0441\u0441\u0438\u0438 \u0438 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u044c \u0441 \u043d\u0438\u043c\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e `geopandas.sjoin` (\u044d\u0442\u043e\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0431\u043e\u043b\u0435\u0435 \u043d\u0430\u0434\u0435\u0436\u043d\u044b\u0439, \u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0441 \u0442\u0435\u043c, \u043a\u0430\u043a \u0443\u0441\u0442\u0440\u043e\u0435\u043d\u044b \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0410\u0422\u0414 \u0432 OSM, \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 [\u044d\u0442\u043e\u0442 \u0442\u0435\u0433](https:\/\/wiki.openstreetmap.org\/wiki\/Key:admin_level))","cfd2741c":"\u041c\u043e\u0436\u043d\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442 \u0446\u0435\u043d\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u044b \u0440\u0430\u043d\u0435\u0435.","89da9c00":"3. **\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**: \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0430\u043b\u043e\u043d\u0430 \u041c\u0435\u0433\u0430\u0424\u043e\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u0442\u0430\u043d\u0446\u0438\u0439 \u043c\u0435\u0442\u0440\u043e \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438 - \u043d\u0430\u0439\u0442\u0438 ***\u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u043e \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0435\u0439 \u0441\u0442\u0430\u043d\u0446\u0438\u0438***, \u0438\u043b\u0438 \u0436\u0435 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0430\u043d\u0446\u0438\u0439 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 ***500 \u043c\u0435\u0442\u0440\u043e\u0432\u0443\u044e \u0431\u0443\u0444\u0435\u0440\u043d\u0443\u044e \u0437\u043e\u043d\u0443*** \u0432\u043e\u043a\u0440\u0443\u0433 \u0441\u0430\u043b\u043e\u043d\u0430. \u0422\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0431\u0443\u0434\u0443\u0442 \u043d\u0435\u0441\u0442\u0438 \u0440\u0430\u0437\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e. \u0422\u0430\u043a \u0436\u0435 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043f\u043e\u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u0440\u0430\u0437\u043c\u0435\u0440\u0430\u043c\u0438 \u0431\u0443\u0444\u0435\u0440\u043d\u044b\u0445 \u0437\u043e\u043d (\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435, \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0430\u0442 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0434\u0438\u0443\u0441\u044b 100, 500, 1000 \u043c\u0435\u0442\u0440\u043e\u0432). \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u043e \u0446\u0435\u043d\u0442\u0440\u0430 \u0433\u043e\u0440\u043e\u0434\u0430, \u0434\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.","e5b9062a":"\n2. **\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 OSM**: \u043f\u043e\u0434\u0443\u043c\u0430\u0439\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u0432\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u0444\u0438\u0447\u0435\u0440\u0444\u043e\u043d\u043e\u0432. \u0413\u0438\u043f\u043e\u0442\u0435\u0437\u0430: \u0442\u0430\u043a\u0438\u0435 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u044b \u043f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043b\u044e\u0434\u0438, \u043f\u0440\u0438\u0435\u0437\u0436\u0430\u044e\u0449\u0438\u0435 \u0432 \u0433\u043e\u0440\u043e\u0434 \u0438\u043b\u0438 \u0441\u0442\u0440\u0430\u043d\u0443 \u043d\u0435\u043d\u0430\u0434\u043e\u043b\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0442\u0443\u0434\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0441\u0438\u043c\u043a\u0430\u0440\u0442\u0443 \u0434\u043b\u044f \u0440\u043e\u0443\u043c\u0438\u043d\u0433\u0430. \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0436\u0435\u043b\u0435\u0437\u043d\u043e\u0434\u043e\u0440\u043e\u0436\u043d\u044b\u0445 \u0432\u043e\u043a\u0437\u0430\u043b\u043e\u0432 (\u0438\u0437\u0443\u0447\u0438\u0442\u0435 [\u044d\u0442\u043e\u0442 \u0442\u0435\u0433](https:\/\/wiki.openstreetmap.org\/wiki\/Tag:railway%3Dstation)). \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b 5 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438\u0437 OSM. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0432\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043a\u0430\u0447\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 OSM \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 (\u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u043b\u044f \u041d\u044c\u044e-\u0419\u043e\u0440\u043a\u0430 \u0438\u0437 \u043b\u0435\u043a\u0446\u0438\u0438)\n","c96b7b76":"4. **\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438**: \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u0442\u0435 2-3 \u043a\u0430\u0440\u0442\u044b \u0434\u043b\u044f \u043a\u0430\u043a\u043e\u0433\u043e \u043d\u0438\u0431\u0443\u0434\u044c \u0438\u0437 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 - \u043a\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435 \u0442\u0430\u0440\u0433\u0435\u0442, \u0433\u0434\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0432\u0430\u043c\u0438 \u0438\u0437 OSM. \u041c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 - \u043e\u0431\u044b\u0447\u043d\u044b\u0439 `plot()`, `folium`, `keplergl`. \u0415\u0441\u043b\u0438 \u0432\u044b\u0431\u0435\u0440\u0435\u0442\u0435 \u041a\u0435\u043f\u043b\u0435\u0440, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0432 \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0444\u0438\u0433 \u043a\u0430\u0440\u0442\u044b, \u0447\u0442\u043e\u0431\u044b \u0435\u0435 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0441\u0442\u0438. \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u043e\u0442 \u0442\u0430\u043a:\n\n```python\nimport json\njson_data = kepler_map.config\nwith open('kepler_config.json', 'w') as outfile:\n    json.dump(json_data, outfile)\n```\n","f9fd9ef8":"\u0412\u044b\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e rail, hotel, hostel, repair, rental, food, attraction \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430, \u0430 \u043d\u0435 \u043f\u043e \u043e\u043a\u0440\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0432\u043e\u043a\u0440\u0443\u0433 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b. \u042d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0434\u043e\u043b\u0433\u043e.  \n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0442\u043e\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043e\u043a\u0440\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u0432\u043e\u043a\u0440\u0443\u0433 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430 \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0438 600 \u043c\u0435\u0442\u0440\u043e\u0432, \u043e\u0434\u043d\u0430\u043a\u043e \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0443 \u043c\u043d\u043e\u0433\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u043e\u0442\u043b\u0438\u0447\u0430\u0442\u044c\u0441\u044f.","f75c0d21":"### Fit model","77a9758c":"5. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043e \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u043c\u0438 \u0432\u044b\u0448\u0435 \u043f\u0443\u043d\u043a\u0442\u0430\u043c\u0438, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043d\u0430\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043d\u0430\u0439\u0442\u0438 \u0432 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0432 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u043a\u043e\u0434\u0443 \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u0440\u0435\u0441\u0443\u0440\u0441, \u043e\u0442\u043a\u0443\u0434\u0430 \u0432\u0437\u044f\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435)\n\n6. \u042d\u0442\u043e \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 - \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439, \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0441\u0432\u043e\u0435\u0439 \u043f\u0440\u0438\u0440\u043e\u0434\u0435 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u0435\u0441\u0442\u043e \u0438 \u0441\u043a\u043e\u0440 \u043d\u0430 Kaggle \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u0433\u0440\u0430\u0442\u044c \u0440\u0435\u0448\u0430\u044e\u0449\u0443\u044e \u0440\u043e\u043b\u044c \u0432 \u043e\u0446\u0435\u043d\u043a\u0435, \u043d\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0442 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0431\u0430\u043b\u043b\u044b","df257b40":"1) Feature importance: Variables are ranked in descending order.  \n2) Impact: The horizontal location shows whether the effect of that value is associated with a higher or lower prediction.  \n3) Original value: Color shows whether that variable is high (in red) or low (in blue) for that observation.  \n4) Correlation: A high level of the \u201calcohol\u201d content has a high and positive impact on the quality rating.   \n    The \u201chigh\u201d comes from the red color, and the \u201cpositive\u201d impact is shown on the X-axis.   \n    Similarly, we will say \u201cvolatile acidity\u201d is negatively correlated with the target variable.  ","d512c69f":"### Read data","26e3a14d":"### \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\n\u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f:\n\n1. `point_id` - \u0418\u043d\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0430\u043b\u043e\u043d\u0430\n2. `lon` - \u0414\u043e\u043b\u0433\u043e\u0442\u0430 \u0442\u043e\u0447\u043a\u0438\n3. `lat` - \u0428\u0438\u0440\u043e\u0442\u0430 \u0442\u043e\u0447\u043a\u0438\n4. `target` - \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u0430\u0440\u0433\u0435\u0442\u0430, \u0443\u0441\u0440\u0435\u0434\u043d\u0435\u043d\u043d\u043e\u0435 \u0437\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0438 \u043e\u0442\u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435"}}