{"cell_type":{"bb7059b5":"code","cecbefc1":"code","e6c1af3a":"code","e04daa6d":"code","6593b248":"code","e5b33c78":"code","e6b9a305":"code","191575d3":"code","9b90a976":"code","3cad8681":"code","19de3a7a":"code","e0c58a57":"code","eeee9ac6":"code","607b394c":"code","7179967b":"code","8c9f1a17":"code","68c1ce77":"code","601bf58c":"code","9993ad44":"code","14f6534f":"code","44e6daff":"code","e276a3e5":"code","4c395d39":"markdown","18076e13":"markdown","9fdcc2ea":"markdown","8fef5fc5":"markdown","af04a334":"markdown","133768a9":"markdown","16cd6903":"markdown","942fdbab":"markdown","ff45e2c1":"markdown","1100fae9":"markdown"},"source":{"bb7059b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cecbefc1":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set()\n\nimport lightgbm\nimport xgboost as xgb\n\nfrom lightgbm import LGBMRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import metrics","e6c1af3a":"df = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2021\/train.csv\")\ndf.head()","e04daa6d":"df_test = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2021\/test.csv\")\ndf_test.head()","6593b248":"df_test.isnull().sum().sum()","e5b33c78":"def high_correlation(df,threshold):  \n    corr_list = []\n    corr = df.corr()\n    for i in range(len(corr)):\n        for j in range(i):        \n            if corr.iloc[i,j] >= threshold:                \n                print(f\"Correlation between {corr.columns[i]} and {corr.columns[j]} is {corr.iloc[i,j] * 100:.2f}\")            ","e6b9a305":"high_correlation(df,0.7) ","191575d3":"print(f\"{df[df.duplicated()].shape[0]} ligne(s) dupliqu\u00e9e(s)\")","9b90a976":"corr = df.corr()\n\nplt.figure(figsize=(20,20))\nx = sns.heatmap(corr)\nplt.show()","3cad8681":"def algorithm_pipeline(X_train_data, X_test_data, y_train_data, y_test_data, \n                       model, param_grid, cv=10, scoring_fit='neg_mean_squared_error',\n                       do_probabilities = False):\n    gs = GridSearchCV(\n        estimator=model,\n        param_grid=param_grid, \n        cv=cv, \n        n_jobs=-1, \n        scoring=scoring_fit,\n        verbose=2\n    )\n    fitted_model = gs.fit(X_train_data, y_train_data)\n    \n    if do_probabilities:\n        pred = fitted_model.predict_proba(X_test_data)\n    else:\n        pred = fitted_model.predict(X_test_data)\n    \n    return fitted_model, pred","19de3a7a":"y = df['target']\nX = df.drop(['target','id'], axis=1)","e0c58a57":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=6311)","eeee9ac6":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)        \nX_test = scaler.transform (X_test)     ","607b394c":"def model_lightgbm():\n    model = lightgbm.LGBMRegressor(n_jobs=-1,random_state=6311)\n    model.fit(X_train,y_train)\n    y_pred = model.predict(X_test)\n    print(\"Base test\")\n    print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\n    print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\n    print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\n    \n    model = lightgbm.LGBMRegressor(n_jobs=-1,random_state=6311)\n    #param_grid = {\n    #    'num_leaves': [7, 14, 21, 28, 31, 50],\n    #    'learning_rate': [0.1, 0.03, 0.003],\n    #    'max_depth': [-1, 3, 5],\n    #    'n_estimators': [50, 100, 200, 500],\n    #} \n\n    param_grid = {\n        'learning_rate': [0.1], \n        'max_depth': [5], \n        'n_estimators': [500], \n        'num_leaves': [28]\n    }\n        \n    \n    model_lightgbm, pred = algorithm_pipeline(X_train, X_test, y_train, y_test, model, param_grid, cv=5)\n    print(model_lightgbm.best_estimator_)\n    print(model_lightgbm.best_params_)\n    print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, pred))\n    print('Mean Squared Error:', metrics.mean_squared_error(y_test, pred))\n    print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, pred)))\n\n\n    X_test_lightgbm = scaler.transform (df_test.drop('id', axis=1)) \n    return model_lightgbm.predict(X_test_lightgbm), pred\n","7179967b":"preds_lightgbm, pred_test_lightgbm = model_lightgbm()","8c9f1a17":"print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, pred_test_lightgbm)))","68c1ce77":"def model_XGBoost():\n    #model = xgb.XGBRegressor(n_estimators  = 400,max_depth=3)\n    #model.fit(X_train,y_train)\n    #y_pred = model.predict(X_test)\n    print(\"Base test\")\n    #print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\n    #print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\n    #print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\n    \n    model = xgb.XGBRegressor(n_estimators  = 400,max_depth=3, learning_rate=0.15)\n    param_grid={\n        \"learning_rate\": [0.15, 0.20],\n        \"max_depth\": [ 3, 4],\n        \"min_child_weight\": [3, 5],\n        \"gamma\":[ 0.1, 0.2],\n        \"colsample_bytree\":[ 0.3, 0.4]\n    }\n\n    param_grid={\n        \n    }\n\n    \n    model_xgb, pred = algorithm_pipeline(X_train, X_test, y_train, y_test, model, param_grid, cv=5)\n    print(model_xgb.best_estimator_)\n    print(model_xgb.best_params_)\n    print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, pred))\n    print('Mean Squared Error:', metrics.mean_squared_error(y_test, pred))\n    print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, pred)))\n\n\n    X_test_xgb = scaler.transform (df_test.drop('id', axis=1)) \n    return model_xgb.predict(X_test_xgb), pred","601bf58c":"preds_xgb, pred_test_xgb = model_XGBoost()","9993ad44":"new_preds = (pred_test_lightgbm + pred_test_lightgbm + pred_test_xgb ) \/ 3\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, new_preds)))","14f6534f":"new_preds = preds_xgb","44e6daff":"submission = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2021\/sample_submission.csv\")\nsubmission['target'] = new_preds\nsubmission.to_csv(\"submissio_l_x.csv\", index=False)","e276a3e5":"submission","4c395d39":"# High correlation","18076e13":"# Check for null values","9fdcc2ea":"# Scale data","8fef5fc5":"# Make submission","af04a334":"# Load dataset","133768a9":"# Prepare data","16cd6903":"# LGBMRegressor","942fdbab":"# Correlation matrix\nMaybe check to delete high correlation","ff45e2c1":"# Check for duplicates","1100fae9":"# XGBoost"}}