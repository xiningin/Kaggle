{"cell_type":{"011c0584":"code","59b447e4":"code","70a1aaee":"code","7c753a77":"code","c78cca6b":"code","e2da9aed":"code","f9536aa2":"code","13b89d67":"code","03ebab9a":"code","a3e574db":"code","3d58b02b":"code","e636d885":"code","3461bf53":"code","50464ed0":"code","fe61d077":"code","ae4708ee":"code","da1b98fa":"code","022ff51f":"code","6d715512":"code","e15519dd":"code","e04c8813":"code","58954527":"code","edf7d322":"code","feb7f525":"code","c1a17ada":"code","b0045fb1":"code","4382104c":"code","2adf8394":"code","3f3cfaec":"code","9c459de4":"code","ab40aa8c":"code","d6904f8e":"code","50165383":"code","8c887bf4":"code","a97fb35f":"code","4dfbb678":"code","d92ef371":"code","56320883":"code","0035e9e6":"code","2a9d0b8b":"code","28c8c3c8":"code","f54a7167":"code","4a8c4d12":"code","122c512c":"code","967397c0":"code","401c6adb":"code","d9bfbcfe":"code","dd88a5ee":"code","eff3794e":"code","859d82c4":"code","2bb9cacf":"code","2791c1f1":"code","efa8027e":"code","0e8bf13f":"code","bf5c598c":"code","35b923f9":"code","4e080a28":"code","d7bc7ebb":"code","7c2a765f":"code","52493bd8":"code","89d7bf37":"code","a19f6e5c":"code","88ef772b":"code","1b99f3e5":"code","9b675e01":"code","e722536a":"code","0669b7be":"code","d9cc0c32":"code","b9de6da3":"code","47b3c682":"code","38b6b9bf":"code","96d4604b":"code","a976827d":"code","13e59fb2":"code","461a4253":"code","24aae45c":"code","c42f21c6":"code","7abf2ec5":"code","71e2cde5":"code","076b160a":"markdown","2a80acea":"markdown","a75757e9":"markdown","3ccd117d":"markdown","915e543b":"markdown","fa5d3845":"markdown","3ae446aa":"markdown","a7242a65":"markdown","5533c579":"markdown","9db289f0":"markdown","d91c471f":"markdown","eb5763b9":"markdown","5bebf634":"markdown","6e41f68f":"markdown","93b39d70":"markdown","75109f72":"markdown","79a3b098":"markdown","e885782e":"markdown","055d42a4":"markdown","5ed5fcea":"markdown","d4ea64a3":"markdown","4bda5823":"markdown","c66a5b4e":"markdown","d6f8e44b":"markdown","4ebd213a":"markdown"},"source":{"011c0584":"from IPython.display import Image\nImage(url = \"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/6\/6e\/St%C3%B6wer_Titanic.jpg\")","59b447e4":"import pandas as pd\nimport numpy as np\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ngender_sub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","70a1aaee":"train.head(50)","7c753a77":"test.head()","c78cca6b":"train.shape","e2da9aed":"test.shape","f9536aa2":"train.info()","13b89d67":"test.info()","03ebab9a":"train.isnull().sum()","a3e574db":"train['Pclass'].unique()","3d58b02b":"test.isnull().sum()","e636d885":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set() # setting seaborn default for plots\ndef bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))\nbar_chart('Sex')","3461bf53":"bar_chart('Pclass')","50464ed0":"bar_chart('SibSp')","fe61d077":"bar_chart('Parch')","ae4708ee":"bar_chart('Embarked')","da1b98fa":"train.head(10)","022ff51f":"train_test_data = [train, test] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","6d715512":"train['Title'].value_counts()","e15519dd":"test['Title'].value_counts()","e04c8813":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","58954527":"train.head()","edf7d322":"test.head()","feb7f525":"bar_chart('Title')","c1a17ada":"train.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)","b0045fb1":"train.head()","4382104c":"test.head()","2adf8394":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","3f3cfaec":"train['Sex'].value_counts()","9c459de4":"bar_chart('Sex')","ab40aa8c":"train.head(10)","d6904f8e":"train[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","50165383":"train.head(10)","8c887bf4":"train.groupby(\"Title\")[\"Age\"].transform(\"median\")","a97fb35f":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\n \nplt.show()","4dfbb678":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","d92ef371":"train.head(10)","56320883":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","0035e9e6":"train.head()","2a9d0b8b":"bar_chart('Age')","28c8c3c8":"Pclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","f54a7167":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","4a8c4d12":"train.head()","122c512c":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","967397c0":"train.head()","401c6adb":"train[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntrain.head(50)","d9bfbcfe":"\nfacet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\n \nplt.show()","dd88a5ee":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","eff3794e":"\nfacet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0)","859d82c4":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","2bb9cacf":"train.head()","2791c1f1":"train['Cabin'].value_counts()","efa8027e":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]\n","0e8bf13f":"train.head()","bf5c598c":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","35b923f9":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","4e080a28":"# fill missing Fare with median fare for each Pclass\ntrain[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","d7bc7ebb":"train.head()","7c2a765f":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","52493bd8":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, train['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","89d7bf37":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","a19f6e5c":"train.head()","88ef772b":"test.head()","1b99f3e5":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)","9b675e01":"train_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_data.shape, target.shape","e722536a":"target.value_counts()","0669b7be":"train.head()","d9cc0c32":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np","b9de6da3":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","47b3c682":"\nclf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","38b6b9bf":"# kNN Score\nround(np.mean(score)*100, 2)","96d4604b":"\nclf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","a976827d":"# decision tree Score\nround(np.mean(score)*100, 2)","13e59fb2":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","461a4253":"# Random Forest Score\nround(np.mean(score)*100, 2)","24aae45c":"\nclf = SVC()\nclf.fit(train_data, target)\n\ntest_data = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)","c42f21c6":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('.\/submission.csv', index=False)","7abf2ec5":"submission = pd.read_csv('submission.csv')\nsubmission.head()","71e2cde5":"submission['Survived'].value_counts()","076b160a":"# Task 4. Feature Engineering","2a80acea":"from IPython.display import Image\nImage(\"url = https:\/\/www.nationalgeographic.org\/media\/sinking-of-the-titanic\/\", )","a75757e9":"# Task 5. Modeling","3ccd117d":"### 4.5 Fare\n fill missing Fare with median fare for each Pclass","915e543b":"### 4.6 Cabin","fa5d3845":"### Title Map\n  1. Mr : 0\n  2. Miss : 1\n  3. Mrs: 2\n  4. Others: 3","3ae446aa":"### 4.2 Sex\nmale : 0  \nfemale : 1","a7242a65":"### delete unnecessary feature from dataset","5533c579":"### 4.7 Family Size","9db289f0":"### fill missing age with median age for each title (Mr, Mrs, Miss, Others)","d91c471f":"## Data dictionary\n1. Pclass:Ticket Class 1 = 1st, 2 = 2nd, 3 = 3rd\n2. SibSp : # of siblings \/ spouses aboard the Titanic\n3. Parch : # of parents \/ children aboard the Titanic\n4. embarked: Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton\n5. Ticket : ticket number\n6. Cabin : Cabin number","eb5763b9":"# Task 2. Importing data set","5bebf634":"### 5.1.3 Random Forest","6e41f68f":"# Task 6. Testing","93b39d70":"### 5.1 Cross Validation (K-fold)","75109f72":"1. more than 50% of 1st class are from S embark\n2. more than 50% of 2nd class are from S embark\n3. more than 50% of 3rd class are from S embark","79a3b098":"## 4.1 Name","e885782e":"### 5.1.1 kNN","055d42a4":"### 4.4 Embarked\n","5ed5fcea":"### 5.1.2 Decision Tree","d4ea64a3":"### 4.3 Age","4bda5823":"# Task 3. Exploratory data analysis","c66a5b4e":"### 4.3.1 Binning\nBinning\/Converting Numerical Age to Categorical Variable\n\nfeature vector map:\nchild: 0  young: 1  adult: 2  mid-age: 3   senior: 4","d6f8e44b":"### fill out missing embark with S embark","4ebd213a":"# Task 1. Understanding the problem statement\n1. predicts which passengers survived the Titanic shipwreck. \n2. ask to use machine learning to create a model for prediction."}}