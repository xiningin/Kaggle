{"cell_type":{"f73abb44":"code","99c183ab":"code","86df59fe":"code","45434d57":"code","07be5a98":"code","48474148":"code","831a3b5b":"code","34bbfe3f":"code","2267b20c":"code","ee780b0b":"code","41edafc2":"code","2b588b86":"markdown","eeae8662":"markdown","5dd9a9b9":"markdown"},"source":{"f73abb44":"#import libs\nimport numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n#df_train = pd.read_csv(\"train.csv\")\n#df_test = pd.read_csv(\"test.csv\")\n\n# Load Data\ndf_train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-3\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-3\/test.csv')\n","99c183ab":"#pandas profiling over data to check for NaNs etc\nimport pandas_profiling as pp\n\npp.ProfileReport(df_train)\n","86df59fe":"#fix data based off of pandas profiling report\ndef fillState(state, country):\n    if state == \"NA\": return country\n    return state\n\ndef fixData(input_set):\n    input_set['Province_State'].fillna(\"NA\", inplace=True)\n    input_set['Province_State'] = input_set.loc[:, ['Province_State', 'Country_Region']].apply(lambda x : fillState(x['Province_State'], x['Country_Region']), axis=1)\n\n    input_set['Date'] = pd.to_datetime(input_set['Date'], infer_datetime_format=True)\n    input_set.loc[:, 'Date'] = input_set.Date.dt.strftime(\"%m%d\")\n    input_set[\"Date\"]  = input_set[\"Date\"].astype(int)\n    return input_set\n","45434d57":"#prep data for train\nX_train = df_train\nX_test = df_test\n#y1_train = df_train.iloc[:, -2]\n#y2_train = df_train.iloc[:, -1]\n\n\nX_train = fixData(X_train)\nX_test = fixData(X_test)\n\nX_train.head()","07be5a98":"#fit_data\n#from sklearn import preprocessing\n\n#label_encoder = preprocessing.LabelEncoder()\n\n#X_train.Country_Region = label_encoder.fit_transform(X_train.Country_Region)\n#X_train['Country_Region'] = label_encoder.fit_transform(X_train['Province_State'])\n\n#X_train.head()\n\n#X_test.Country_Region = label_encoder.fit_transform(X_test.Country_Region)\n#X_test['Country_Region'] = label_encoder.fit_transform(X_test['Province_State'])\n\n#X_test.head()\n\n#X_train.head()\n#X_train.loc[X_train.Country_Region == 'Afghanistan', :]\n#X_test.tail()\n","48474148":"from sklearn import preprocessing\n\nlabel_encoder = preprocessing.LabelEncoder()\n\nfrom xgboost import XGBRegressor\n\ncountries = X_test.Country_Region.unique()","831a3b5b":"#Predict data and Create submission file from test data\nsub = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})\n\nsub = []\nfor country in countries:\n    province_list = X_train.loc[X_train['Country_Region'] == country].Province_State.unique()\n    for province in province_list:\n        X_train2 = X_train.loc[(X_train['Country_Region'] == country) & (X_train['Province_State'] == province),['Date']].astype('int')\n        Y_train21 = X_train.loc[(X_train['Country_Region'] == country) & (X_train['Province_State'] == province),['ConfirmedCases']]\n        Y_train22 = X_train.loc[(X_train['Country_Region'] == country) & (X_train['Province_State'] == province),['Fatalities']]\n        X_test2 = X_test.loc[(X_test['Country_Region'] == country) & (X_test['Province_State'] == province), ['Date']].astype('int')\n        X_forecastId2 = X_test.loc[(X_test['Country_Region'] == country) & (X_test['Province_State'] == province), ['ForecastId']]\n        X_forecastId2 = X_forecastId2.values.tolist()\n        X_forecastId2 = [v[0] for v in X_forecastId2]\n        model2 = XGBRegressor(n_estimators=1020)\n        model2.fit(X_train2, Y_train21)\n        Y_pred2 = model2.predict(X_test2)\n        model3 = XGBRegressor(n_estimators=1020)\n        model3.fit(X_train2, Y_train22)\n        Y_pred3 = model3.predict(X_test2)\n        for j in range(len(Y_pred2)):\n            dic = { 'ForecastId': X_forecastId2[j], 'ConfirmedCases': Y_pred2[j], 'Fatalities': Y_pred3[j]}\n            sub.append(dic)\n        ","34bbfe3f":"#submission.ForecastId = sub.ForecastId.astype('int')\n#submission.to_csv('submission.csv', index=False)\nsubmission = pd.DataFrame(sub)\nsubmission[['ForecastId','ConfirmedCases','Fatalities']].to_csv(path_or_buf='submission.csv',index=False)","2267b20c":"#from xgboost import plot_importance\n#import matplotlib.pyplot as plt\n\n# plot feature importance\n#plot_importance(model2)\n#pyplot.show()","ee780b0b":"\"\"\"\nfrom sklearn.model_selection import train_test_split\n# split data into train and test sets\nseed = 7\ntest_size = 0.1\nX_train, X_test, y_train, y_test = train_test_split(X_train, y1_train, test_size=test_size, random_state=seed)\n\n\ny1_train = df_train.iloc[:, -2]\ny2_train = df_train.iloc[:, -1]\n\n#import XGBoost\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import accuracy_score\n\n#create model and train\nmodel = XGBRegressor(learning_rate = 0.05, n_estimators=1000, max_depth=5)\nmodel.fit(X_train_CS, y1_X_train_CS)\n\"\"\"\n","41edafc2":"\"\"\"\n# make predictions for test set\ny_pred = model.predict(X_test)\npredictions = [round(value) for value in y_pred]\n\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n\"\"\"","2b588b86":"These are just some of the non-working code snippets I used during prototyping on my private machine.","eeae8662":"I started with typical import\/preparation as well as pandas_profiling to see what I would have to change.","5dd9a9b9":"I found that for some reason label encoders really affected the final score, so during my testing stages on my private machine I found it best to leave it out this time."}}