{"cell_type":{"c2698dc5":"code","0021c8c2":"code","db403dd5":"code","1f247921":"code","7362cf5b":"code","b916c2ca":"code","43192cf9":"code","9dacc3e1":"code","6af939ae":"code","282dd32e":"code","82d77453":"code","80874a65":"code","bfb3c2fd":"code","01f3ebb2":"code","0a6f3cc9":"code","7ab9351b":"code","bdb7ca0c":"code","9adc03af":"code","d1a87cb9":"code","d745429d":"code","cd1981d1":"code","47716b2b":"code","48a6d34e":"code","d55e96fc":"code","f3d3bf9b":"code","652d799d":"code","bb669777":"code","a412062d":"code","1e1f7119":"code","c1d81065":"code","fd8aff01":"code","d0ff9cf9":"code","36b77a24":"code","96cd8e2b":"code","bd327945":"code","26f807cc":"code","15f4efdb":"code","d0306962":"code","8de440c8":"code","49688ea2":"code","e6311005":"code","3f87c6c5":"code","16e3bb6e":"code","ee862b07":"code","e05460fe":"code","4a4e21e5":"code","fc61b230":"code","52812cbd":"code","da0026d7":"code","73b9763a":"code","6137d50a":"code","e597fe5b":"code","5f9d6e90":"code","dc496c76":"code","cd03e926":"markdown","57af3772":"markdown","7977112b":"markdown","ea534cd1":"markdown","8fa16fc3":"markdown","861546f0":"markdown","3c5a6f1b":"markdown","fae1c518":"markdown","9e8c5989":"markdown","a6160e09":"markdown","035ff692":"markdown","89fa71e7":"markdown","e50f538b":"markdown","fa2f9660":"markdown","82be90f4":"markdown","4367a3ef":"markdown","4c0870a2":"markdown","1103ca05":"markdown","b82cdc96":"markdown","02fd8c0f":"markdown","f2f7b491":"markdown","cab0dcbb":"markdown","a841268f":"markdown","7efe3108":"markdown","1be9baf0":"markdown","7be1931f":"markdown","dd2952a3":"markdown","ec218334":"markdown","7fec78a4":"markdown","72130535":"markdown","67a7b9ed":"markdown","4a9647be":"markdown","f2d05c8e":"markdown","3f25952a":"markdown","0981e0d0":"markdown","8b8f349e":"markdown","6ccfae4e":"markdown","671514c8":"markdown"},"source":{"c2698dc5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns","0021c8c2":"df_train = pd.read_csv(\"..\/input\/costa-rican-household-poverty-prediction\/train.csv\")","db403dd5":"df_train.head()","1f247921":"features = ['escolari', 'SQBmeaned', 'hogar_nin', 'hogar_total', 'area1',\n            'lugar1', 'cielorazo', 'pisonotiene', 'v14a', 'abastaguano', 'v2a1',\n            'hacdor', 'rez_esc', 'meaneduc', 'SQBovercrowding', 'abastaguadentro',\n            'tipovivi1', 'Target']","7362cf5b":"base = df_train[features]","b916c2ca":"base.head()","43192cf9":"base = base.astype(np.float)\nbase.shape","9dacc3e1":"corrmat = base.corr()\nsns.set()\nplt.figure(figsize=(13,9))\nsns.heatmap(corrmat)","6af939ae":"total = base.isnull().sum().sort_values(ascending = False)\npercent = ((base.isnull().sum()\/base.isnull().count())*100).sort_values(ascending = False)\nmissing_data = pd.concat([total, percent], axis = 1, keys = ['Total', '%'])\nmissing_data.head()","282dd32e":"base = base.drop(['v2a1', 'rez_esc'], axis = 1)","82d77453":"base['SQBmeaned'].plot(kind = 'box')","80874a65":"base['meaneduc'].plot(kind = 'box')","bfb3c2fd":"col = 'SQBmeaned'\nbase[col] = base[col].fillna(base[col].describe().mean())\n\ncol = 'meaneduc'\nbase[col] = base[col].fillna(base[col].describe().mean())","01f3ebb2":"total = base.isnull().sum().sort_values(ascending = False)\npercent = ((base.isnull().sum()\/base.isnull().count())*100).sort_values(ascending = False)\nmissing_data = pd.concat([total, percent], axis = 1, keys = ['Total', '%'])\nmissing_data.head()","0a6f3cc9":"base.head()","7ab9351b":"cols = ['escolari', 'SQBmeaned', 'area1', 'lugar1', 'hogar_nin', 'hogar_total', 'SQBovercrowding']\n\nsns.set()\nsns.pairplot(base, hue = 'Target', vars = cols)","bdb7ca0c":"var2 = 'escolari'\nvar1 = 'Target'\n\ndata = pd.concat([df_train[var2], df_train[var1]], axis=1)\n\nf, ax = plt.subplots(figsize=(10, 8))\n\nsns.boxplot(x=var1, y=var2, data=data)\nplt.title('Boxplot of escolari over Target')","9adc03af":"var2 = 'hogar_nin'\nvar1 = 'Target'\n\ndata = pd.concat([df_train[var2], df_train[var1]], axis=1)\n\nf, ax = plt.subplots(figsize=(10, 8))\n\nsns.boxplot(x=var1, y=var2, data=data)\nplt.title('Boxplot of hogar_nin over Target')","d1a87cb9":"var2 = 'SQBmeaned'\nvar1 = 'Target'\n\ndata = pd.concat([df_train[var2], df_train[var1]], axis=1)\n\nf, ax = plt.subplots(figsize=(10, 8))\n\nsns.boxplot(x=var1, y=var2, data=data)\nplt.title('Boxplot of escolari over Target')","d745429d":"base.hist(column='cielorazo', by ='Target', figsize=(10,10), color = 'coral')","cd1981d1":"base.hist(column='pisonotiene', by ='Target', figsize=(10,10), color = 'coral')","47716b2b":"base.hist(column='v14a', by ='Target', figsize=(10,10), color = 'coral')","48a6d34e":"# Author: https:\/\/www.kaggle.com\/willkoehrsen\/a-complete-introduction-and-walkthrough\n\ndef plot_categoricals(x, y, data, annotate = True):\n    \"\"\"Plot counts of two categoricals.\n    Size is raw count for each grouping.\n    Percentages are for a given value of y.\"\"\"\n    \n    # Raw counts \n    raw_counts = pd.DataFrame(data.groupby(y)[x].value_counts(normalize = False))\n    raw_counts = raw_counts.rename(columns = {x: 'raw_count'})\n    \n    # Calculate counts for each group of x and y\n    counts = pd.DataFrame(data.groupby(y)[x].value_counts(normalize = True))\n    \n    # Rename the column and reset the index\n    counts = counts.rename(columns = {x: 'normalized_count'}).reset_index()\n    counts['percent'] = 100 * counts['normalized_count']\n    \n    # Add the raw count\n    counts['raw_count'] = list(raw_counts['raw_count'])\n    \n    plt.figure(figsize = (14, 10))\n    # Scatter plot sized by percent\n    plt.scatter(counts[x], counts[y], edgecolor = 'k', color = 'lightgreen',\n                s = 100 * np.sqrt(counts['raw_count']), marker = 'o',\n                alpha = 0.6, linewidth = 1.5)\n    \n    if annotate:\n        # Annotate the plot with text\n        for i, row in counts.iterrows():\n            # Put text with appropriate offsets\n            plt.annotate(xy = (row[x] - (1 \/ counts[x].nunique()), \n                               row[y] - (0.15 \/ counts[y].nunique())),\n                         color = 'navy',\n                         s = f\"{round(row['percent'], 1)}%\")\n        \n    # Set tick marks\n    plt.yticks(counts[y].unique())\n    plt.xticks(counts[x].unique())\n    \n    # Transform min and max to evenly space in square root domain\n    sqr_min = int(np.sqrt(raw_counts['raw_count'].min()))\n    sqr_max = int(np.sqrt(raw_counts['raw_count'].max()))\n    \n    # 5 sizes for legend\n    msizes = list(range(sqr_min, sqr_max,\n                        int(( sqr_max - sqr_min) \/ 5)))\n    markers = []\n    \n    # Markers for legend\n    for size in msizes:\n        markers.append(plt.scatter([], [], s = 100 * size, \n                                   label = f'{int(round(np.square(size) \/ 100) * 100)}', \n                                   color = 'lightgreen',\n                                   alpha = 0.6, edgecolor = 'k', linewidth = 1.5))\n        \n    # Legend and formatting\n    plt.legend(handles = markers, title = 'Counts',\n               labelspacing = 3, handletextpad = 2,\n               fontsize = 16,\n               loc = (1.10, 0.19))\n    \n    plt.annotate(f'* Size represents raw count while % is for a given y value.',\n                 xy = (0, 1), xycoords = 'figure points', size = 10)\n    \n    # Adjust axes limits\n    plt.xlim((counts[x].min() - (6 \/ counts[x].nunique()), \n              counts[x].max() + (6 \/ counts[x].nunique())))\n    plt.ylim((counts[y].min() - (4 \/ counts[y].nunique()), \n              counts[y].max() + (4 \/ counts[y].nunique())))\n    plt.grid(None)\n    plt.xlabel(f\"{x}\"); plt.ylabel(f\"{y}\"); plt.title(f\"{y} vs {x}\");","d55e96fc":"base.columns","f3d3bf9b":"plot_categoricals('hogar_nin', 'Target', base)","652d799d":"plot_categoricals('area1', 'Target', base)","bb669777":"plot_categoricals('hacdor', 'Target', base)","a412062d":"plot_categoricals('tipovivi1', 'Target', base)","1e1f7119":"target = base['Target']\naux1 = pd.DataFrame({'Target | %': target.value_counts(normalize=True)})\naux1","c1d81065":"base.shape","fd8aff01":"sem_chao = base[base['pisonotiene'] == 1.0]\nsem_chao.shape","d0ff9cf9":"batch = 32\nn_batchs = int(500\/batch)\nbase_aux = sem_chao.sample(batch)\nfor i in range(n_batchs):\n    base_aux = pd.concat([base_aux, sem_chao.sample(batch)], axis = 0)","36b77a24":"base = pd.concat([base, base_aux], axis = 0)","96cd8e2b":"base.hist(column='pisonotiene', by ='Target', figsize=(10,10), color = 'coral')","bd327945":"corrmat = base.corr()\nsns.set()\nplt.figure(figsize=(13,10))\nsns.heatmap(corrmat)","26f807cc":"base = base.drop(['cielorazo', 'v14a', 'abastaguano', 'tipovivi1', 'hacdor'], axis = 1)","15f4efdb":"base.head()","d0306962":"from sklearn.preprocessing import StandardScaler","8de440c8":"X = base.drop('Target', axis = 1)\ny = base['Target']","49688ea2":"scaler_x = StandardScaler()\n\nX = scaler_x.fit_transform(X)","e6311005":"from sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier","3f87c6c5":"scores_mean = []\nscores_std = []\n\nk_lim_inf = 1\nk_lim_sup = 30\n\nfolds = 5\n\nk_max = None\nmax_acc = 0\n\ni = 0\nprint('Finding best k...')\nfor k in range(k_lim_inf, k_lim_sup):\n    \n    KNNclf = KNeighborsClassifier(n_neighbors=k)\n    \n    score = cross_val_score(KNNclf, X, y, cv = folds)\n    \n    scores_mean.append(score.mean())\n    scores_std.append(score.std())\n    \n    if scores_mean[i] > max_acc:\n        k_max = k\n        max_acc = scores_mean[i]\n    i += 1\n    if not (k%3):\n        print('   K = {0} | Best CV acc = {1:2.2f}% (best k = {2})'.format(k, max_acc*100, k_max))\nprint('\\nBest k: {}'.format(k_max))","16e3bb6e":"plt.figure(figsize=(15, 7))\nplt.errorbar(np.arange(k_lim_inf, k_lim_sup), scores_mean, scores_std,\n             marker = 'o', markerfacecolor = 'purple' , linewidth = 3,\n             markersize = 10, color = 'coral', ecolor = 'purple', elinewidth = 1.5)\n\n\nyg = []\nx = np.arange(0, k_lim_sup+1)\nfor i in range(len(x)):\n    yg.append(max_acc)\nplt.plot(x, yg, '--', color = 'purple', linewidth = 1)\nplt.xlabel('k')\nplt.ylabel('accuracy')\nplt.title('KNN performed on several values of k')\nplt.axis([0, k_lim_sup, min(scores_mean) - max(scores_std), max(scores_mean) + 1.5*max(scores_std)])","ee862b07":"k = 16\nKNNclf = KNeighborsClassifier(n_neighbors=k)\nKNNclf.fit(X, y)","e05460fe":"df_test = pd.read_csv(\"..\/input\/costa-rican-household-poverty-prediction\/test.csv\")","4a4e21e5":"features = ['escolari', 'SQBmeaned', 'hogar_nin', 'hogar_total', 'area1',\n            'lugar1', 'pisonotiene', 'meaneduc', 'SQBovercrowding', 'abastaguadentro']","fc61b230":"base_test = df_test[features]\nbase_test.head()","52812cbd":"total = base_test.isnull().sum().sort_values(ascending = False)\npercent = ((base_test.isnull().sum()\/base_test.isnull().count())*100).sort_values(ascending = False)\nmissing_data = pd.concat([total, percent], axis = 1, keys = ['Total', '%'])\nmissing_data.head()","da0026d7":"col = 'SQBmeaned'\nbase_test = base_test.astype(np.float)\nbase_test[col] = base_test[col].fillna(base_test[col].describe().mean())\n\ncol = 'meaneduc'\nbase_test = base_test.astype(np.float)\nbase_test[col] = base_test[col].fillna(base_test[col].describe().mean())","73b9763a":"total = base_test.isnull().sum().sort_values(ascending = False)\npercent = ((base_test.isnull().sum()\/base_test.isnull().count())*100).sort_values(ascending = False)\nmissing_data = pd.concat([total, percent], axis = 1, keys = ['Total', '%'])\nmissing_data.head()","6137d50a":"X_test = scaler_x.transform(base_test)","e597fe5b":"previews = KNNclf.predict(X_test)\npreviews = previews.astype(np.int)\npreviews = pd.DataFrame({'Target': previews})\npreviews = pd.concat([df_test['Id'], previews], axis = 1)","5f9d6e90":"previews.head()","dc496c76":"previews.to_csv('submission.csv', index = False)","cd03e926":"### 3.1 Pairplot","57af3772":"### 3.3 Histograms","7977112b":"# 3. Visualiza\u00e7\u00e3o dos dados","ea534cd1":"Proporcionalmente, classe 4, diferente das 1, 2 e 3; h\u00e1 bastante popula\u00e7\u00e3o na \u00e1rea urbana","8fa16fc3":"# 6. Classificador k-NN","861546f0":"### 6.1 Sele\u00e7\u00e3o dos hiperpar\u00e2metros por CV","3c5a6f1b":"### 2.1 Determinando dados faltantes","fae1c518":"### 3.4 Outros plots","9e8c5989":"Similar \u00e0 *escolari*","a6160e09":"O percentual de casas sem banheiro parece aumentar tamb\u00e9m com o aumento do n\u00edvel socioecon\u00f4mico, mas s\u00e3o poucos exemplos.","035ff692":"### 1.1 Importando algumas bibliotecas","89fa71e7":"# 2. Limpeza dos dados","e50f538b":"Maior a escolaridade, maior o n\u00edvel social (em m\u00e9dia)","fa2f9660":"# 7. Leitura da base teste e submiss\u00e3o dos resultados","82be90f4":"N\u00e3o parece haver muita destin\u00e7\u00e3o entre as classes, a n\u00e3o ser por quantidade.","4367a3ef":"Nivel socioecon\u00f4mico descresce com aumento de crian\u00e7as","4c0870a2":"### 4.1 Atributo: *pisonotiene*","1103ca05":"Education:\n\n    escolari, years of schooling ####\n    SQBmeaned, square of the mean years of education of adults (>=18) in the household ###\n\nPeople:\n    \n    hogar_nin, Number of children 0 to 19 in household ####\n    dependency, Dependency rate, calculated = (number of members of the household younger than 19 or older than 64)\/(number of member of household between 19 and 64) ###\n    hogar_total, # of total individuals in the household ##\n\nRegion:\n    \n    area1, =1 zona urbana ####\n    lugar1, =1 region Central ###\n\nFisical:\n\n    cielorazo, =1 if the house has ceiling ####\n    pisonotiene, =1 if no floor at the household ###\n    v14a, =1 has bathroom in the household #####\n    \n    \nServi\u00e7os:\n\n    abastaguano, =1 if no water provision ###\n    v2a1, Monthly rent payment #####\n    \nOvercrowd:\n    \n    hacdor, =1 Overcrowding by bedrooms ####","b82cdc96":"### 7.4 Previs\u00e3o das classes","02fd8c0f":"### 7.1 Leitura da base teste","f2f7b491":"                           Escola Polit\u00e9cnica da Universidade de S\u00e3o Paulo\n                                         Data: 29\/09\/2019\n#       PMR3508 - Aprendizado de M\u00e1quina e Reconhecimento de Padr\u00f5es\n### An\u00e1lise e aplica\u00e7\u00e3o do k-NN a base *household Costa Rica*\n#### Autor: Lucas Nunes Sequeira","cab0dcbb":"### 5.1 Sele\u00e7\u00e3o dos melhores atributos","a841268f":"### 2.2 Fazendo altera\u00e7\u00f5es sobre a base","7efe3108":"Vemos que quanto maior o n\u00edvel socioecon\u00f4mico, h\u00e1 percentualmente menos jovens por casa.","1be9baf0":"# 4. Imputar dados","7be1931f":"### 1.3 Sele\u00e7\u00e3o de dados por intui\u00e7\u00e3o","dd2952a3":"### 7.4 Submiss\u00e3o dos dados","ec218334":"Aparentemente o percentual de casas sem ch\u00e3o decresce com aumento do n\u00edvel socioecon\u00f4mico, mas s\u00e3o poucos casos.","7fec78a4":"# 5. Sele\u00e7\u00e3o e escalonamento dos dados","72130535":"### 7.3 Escalonamento dos dados","67a7b9ed":"### 6.2 Treinamento do classificador","4a9647be":"Vemos que com o aumento do n\u00edvel socioecon\u00f4mico, h\u00e1 menos lota\u00e7\u00e3o por quarto.","f2d05c8e":"### 3.2 Boxplot","3f25952a":"Percentual de casas com teto aumenta com aumento do n\u00edvel socioecon\u00f4mico","0981e0d0":"# 1. Avaliando a base de dados","8b8f349e":"### 5.2 Escalonamento dos dados","6ccfae4e":"### 1.2 Importando dados","671514c8":"### 7.2 Dados faltantes"}}