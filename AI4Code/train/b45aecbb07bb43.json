{"cell_type":{"c8e801b5":"code","135dc5ed":"code","5a8a7008":"code","b3d12140":"code","1aa293f2":"code","15d2dbc9":"code","5a19b2e8":"code","3c43510a":"code","25336e3e":"code","1fb65491":"code","942fc814":"code","06ab937f":"code","556ba0f9":"code","34bfe675":"code","f38a702e":"code","3067de35":"code","e2136874":"code","64cecda0":"code","ebc18c14":"code","d0e744ee":"code","98787603":"code","941c6b1c":"code","3bc725fa":"code","43c6d01e":"code","494c1c82":"code","486eca9b":"code","769a5211":"code","445e7aa6":"code","c2cf7199":"code","cb124828":"code","5eea145d":"code","e4f5448a":"code","596f5a22":"code","9bd0bf3d":"code","bdce2f92":"code","1e08b722":"code","eea5625a":"code","cc3388e7":"code","f86efc83":"code","39051070":"code","27c45c6b":"code","441aff6d":"code","457df272":"code","d1978230":"code","e55ea743":"code","75b325cf":"code","3971434e":"code","68007dd0":"code","e943cd43":"code","a55e90a6":"code","107325c5":"code","a9080f93":"code","cca968e9":"code","4e7f0e7f":"code","c214ab57":"code","deb941cd":"code","58dc435b":"code","39ccc770":"code","b7f0e417":"code","d8530c5b":"code","555bebfe":"code","c06eda2d":"code","25d7c163":"code","7a1e4179":"code","22e73833":"code","02c9e409":"code","3d4fb303":"code","c215a0d7":"code","b79c28b8":"code","c8589caa":"code","cdb749de":"code","ddd53649":"code","e93dcc74":"code","2d247d2d":"markdown","05d20629":"markdown","fe59ed45":"markdown","70227b56":"markdown","0a4edc8c":"markdown","c5bda1ac":"markdown","90188bd5":"markdown","d93655f0":"markdown","c209b5c0":"markdown","17159f60":"markdown","e1fc5096":"markdown","db70d65f":"markdown","440fc681":"markdown"},"source":{"c8e801b5":"import pandas as pd\nimport numpy as np\nimport datetime as dt\nfrom matplotlib import pyplot as plt \nimport matplotlib\n%matplotlib inline","135dc5ed":"#Read data from the given flight_data.csv file.","5a8a7008":"df_nyc_flight_data=pd.read_csv('\/kaggle\/input\/flight_data.csv')","b3d12140":"# Head method is used to verify sample top 5 records for the given flight_data set.\n# Observations: Data consists of flight number,origin,destination,depature time, arrival time, delay in depatures,\n                #delay in arrivals, air_time, \n# travel distance with date and time stamps.","1aa293f2":"df_nyc_flight_data.head(1)","15d2dbc9":"# Info method is used to get a concise summary of the dataframe.\n# Observations: Total record count is not matching for dep_time, dep_delay, arr_time, arr_delay, airtime","5a19b2e8":"df_nyc_flight_data.info()","3c43510a":"# Describe method is used to view some basic statistical details like percentile, mean, std etc. of a data frame of numeric values.\n# Observations: Total record count is not matching for dep_time, dep_delay, arr_time, arr_delay, airtime","25336e3e":"df_nyc_flight_data.describe()","1fb65491":"#Identify Null values and Handle it.","942fc814":"df_nyc_flight_data.isnull()","06ab937f":"#Count all NaN in a DataFrame (both columns & Rows)\n#Observations: Total 46595 values were missing in the given dataset.","556ba0f9":"df_nyc_flight_data.isnull().sum().sum()","34bfe675":"#Count total NaN at each column in DataFrame\n#Observations:   a) total 8255 records not having dep_time which matches dep_delay records count.\n               # b) total 8713 records not having arr_time information which we can calculate for (8713 -8255 = 458 records)\n               # c) arr_delay and air_time record count is matching.\n               # d) total 2512 records for tailnum is missing need to check whether we can able to fill those tailnum or not.\n#Conclusions:    a) Dep_time  : 8255, Assuming 8255 flights has cancelled due to some reasons and dropped those records from analysis.\n               # b) Dep_delay : 8255, Assuming 8255 flights has cancelled due to some reasons and dropped those records from analysis.\n               # c) Arr_time  : 8713, (8713 - 8255 = 458) From the above point a & b, For rest of 458 records will calculate arr_time based on sched_arr_time and arr_delay.\n               # d) Arr_delay : 9430, (9430 - 8255 = 1175) From the above point a & b, For rest of 1175 records will calculate arr_delay based on dep_time and arr_time.        \n               # e) tailnum   : 2512, From the above point a & b, Assuming tailnum records will be 0 and having flight number details which is sufficient to proceed.\n               # f) Airtime   : 9430, (9430 - 8255 = 1175) From the above point a & b, For rest of 1175 records will calculate air_time based on mean.        \n        ","f38a702e":"df_nyc_flight_data.isnull().sum()","3067de35":"# Below task is going to perform mentioned above as conclusions.\n# Analyze Dep_time and Dep_delay null values \n#Conclusions:    a) Dep_time  : 8255, Assuming 8255 flights has cancelled due to some reasons and dropped those records from analysis.\n               # b) Dep_delay : 8255, Assuming 8255 flights has cancelled due to some reasons and dropped those records from analysis.\n\n#Implementation: Used Dropna function.","e2136874":"df_nyc_flight_data = df_nyc_flight_data.dropna(axis=0,subset=['dep_time','dep_delay'])","64cecda0":"df_nyc_flight_data.isnull().sum()","ebc18c14":"# Analyze arr_delay null values \ndisplay_arr_delay_null = pd.isnull(df_nyc_flight_data[\"arr_delay\"])\ndf_nyc_flight_data[display_arr_delay_null]","d0e744ee":"# Deep dive to understand one flight data which contains null values. e.g.,flight no: 464\ndf_nyc_flight_data_flight464 = df_nyc_flight_data[df_nyc_flight_data['flight'] == 464]\ndf_nyc_flight_data_flight464","98787603":"# Time validation function used to calculate time. For the given dataset, if we add two time values (e.g., 1430+40 = 1470) \n# but as per time, it should be 1510 and also 2340+40 = 10 early moring hours\ndef time_validation(hours):\n    num_hours=hours\n    minutes=num_hours%100\n    print(num_hours,minutes)\n    if(minutes>59):\n         hours=(num_hours - minutes)\n         hours+=100\n         #print('in if:', hours)\n         if(hours>=2400):hours=hours-2400\n         #print('in 2400:',hours)\n         hours=hours+(minutes-60)\n         #print('in hours+:',hours)\n    else:\n        if(hours>=2400):\n            hours=hours-2400\n            #print('in hours>24:',hours)\n    return str(hours)\n#print(time_validation(780))","941c6b1c":"# Fill all arr_time NULL values by adding sched_arr_time + dep_delay values.\narr_time_nulldata=df_nyc_flight_data[df_nyc_flight_data[\"arr_time\"].isnull()]\narr_time_nulldata['arr_time'].fillna(arr_time_nulldata['sched_arr_time']+arr_time_nulldata['dep_delay'],inplace=True)\narr_time_nulldata['arr_time'] = arr_time_nulldata.apply(lambda row : time_validation(row['arr_time']), axis = 1) \ndf_nyc_flight_data['arr_time'].fillna(value=arr_time_nulldata['arr_time'],inplace=True)\ndf_nyc_flight_data[df_nyc_flight_data[\"arr_time\"].isnull()]","3bc725fa":"# No missing values for arr_time column\ndf_nyc_flight_data.isnull().sum()","43c6d01e":"# Fill all arr_delay NULL values by subtracting arr_time - sched_arr_time\ndf_nyc_flight_data['arr_time'] = pd.to_numeric(df_nyc_flight_data['arr_time'])\narr_delay_nulldata=df_nyc_flight_data[df_nyc_flight_data[\"arr_delay\"].isnull()]\narr_delay_nulldata['arr_delay'].fillna(arr_delay_nulldata['arr_time']-arr_delay_nulldata['sched_arr_time'],inplace=True)\narr_delay_nulldata['arr_delay'] = arr_delay_nulldata.apply(lambda row : time_validation(row['arr_delay']), axis = 1) \ndf_nyc_flight_data['arr_delay'].fillna(value=arr_delay_nulldata['arr_delay'],inplace=True)\ndf_nyc_flight_data[df_nyc_flight_data[\"arr_delay\"].isnull()]","494c1c82":"# No missing values for arr_delay column\ndf_nyc_flight_data.isnull().sum()","486eca9b":"# Fill all air_time NULL values by subtracting arr_time - dep_time by multiplying with 65% percent of complete duration.\nair_time_nulldata=df_nyc_flight_data[df_nyc_flight_data[\"air_time\"].isnull()]\nair_time_nulldata['air_time'].fillna(value=round((air_time_nulldata['arr_time']-air_time_nulldata['dep_time'])*.65),inplace=True)\nair_time_nulldata['air_time'] = air_time_nulldata.apply(lambda row : time_validation(row['air_time']), axis = 1) \ndf_nyc_flight_data['air_time'].fillna(value=air_time_nulldata['air_time'],inplace=True)\ndf_nyc_flight_data[df_nyc_flight_data[\"air_time\"].isnull()]","769a5211":"# No missing values for air_time column\ndf_nyc_flight_data.isnull().sum()","445e7aa6":"# findday function has created to find the day name for the given date and populate it for each and every row.\nimport datetime \nimport calendar \n  \ndef findDay(date): \n    full_day = datetime.datetime.strptime(date, '%d-%m-%Y').weekday() \n    return (calendar.day_name[full_day]) \n\n#date = '03-02-2019'\n#print(findDay(date))","c2cf7199":"# flight_date column created to populate day name for each and every row.\ndf_nyc_flight_data['flight_date'] = df_nyc_flight_data['day'].map(str) + '-' + df_nyc_flight_data['month'].map(str) + '-' + df_nyc_flight_data['year'].map(str)\ndf_nyc_flight_data.head(1)","cb124828":"# day_name column created to populate day name for each and every row.\ndf_nyc_flight_data['day_name'] = df_nyc_flight_data.apply(lambda row : findDay(row['flight_date']),axis=1)\ndf_nyc_flight_data.head(1)","5eea145d":"# aircraft_speed column created to populate aircraft speed for each and every row\ndf_nyc_flight_data['air_time']= pd.to_numeric(df_nyc_flight_data['air_time'])\naircraft_speed = df_nyc_flight_data['distance']\/(df_nyc_flight_data['air_time']\/60)\ndf_nyc_flight_data['aircraft_speed'] = aircraft_speed\ndf_nyc_flight_data.head(1)","e4f5448a":"# Convert dep_time,sched_dep_time,arr_time,sched_arr_time into hh:mm time format.\ndf_nyc_flight_data['dep_time'] = df_nyc_flight_data.dep_time[~df_nyc_flight_data.dep_time.isna()].astype(np.int64).apply('{:0>4}'.format)\ndf_nyc_flight_data['dep_time'] = pd.to_timedelta(df_nyc_flight_data.dep_time.str[:2]+':'+df_nyc_flight_data.dep_time.str[2:]+':00')\n\ndf_nyc_flight_data['sched_dep_time'] = df_nyc_flight_data.sched_dep_time[~df_nyc_flight_data.sched_dep_time.isna()].astype(np.int64).apply('{:0>4}'.format)\ndf_nyc_flight_data['sched_dep_time'] = pd.to_timedelta(df_nyc_flight_data.sched_dep_time.str[:2]+':'+df_nyc_flight_data.sched_dep_time.str[2:]+':00')\n\ndf_nyc_flight_data['arr_time'] = df_nyc_flight_data.arr_time[~df_nyc_flight_data.arr_time.isna()].astype(np.int64).apply('{:0>4}'.format)\ndf_nyc_flight_data['arr_time'] = pd.to_timedelta(df_nyc_flight_data.arr_time.str[:2]+':'+df_nyc_flight_data.arr_time.str[2:]+':00')\n\ndf_nyc_flight_data['sched_arr_time'] = df_nyc_flight_data.sched_arr_time[~df_nyc_flight_data.sched_arr_time.isna()].astype(np.int64).apply('{:0>4}'.format)\ndf_nyc_flight_data['sched_arr_time'] = pd.to_timedelta(df_nyc_flight_data.sched_arr_time.str[:2]+':'+df_nyc_flight_data.sched_arr_time.str[2:]+':00')\n\ndf_nyc_flight_data.head(1)","596f5a22":"# Created two new columns dep_status and arr_status.\n# dep_status column used to store information based on the flight depatured before_ontime, ontime, Dep_Actualdelay information.\n# arr_status column used to store information based on the flight depatured before_ontime, ontime, Arr_Actualdelay information.\ndf_nyc_flight_data.loc[df_nyc_flight_data.dep_delay < 0, \"dep_status\"]=\"Before_OnTime\"\ndf_nyc_flight_data.loc[df_nyc_flight_data.dep_delay == 0, \"dep_status\"]=\"OnTime\"\ndf_nyc_flight_data.loc[df_nyc_flight_data.dep_delay > 0, \"dep_status\"]=\"Dep_ActualDelay\"\ndf_nyc_flight_data['arr_delay'] = pd.to_numeric(df_nyc_flight_data['arr_delay'])\ndf_nyc_flight_data.loc[df_nyc_flight_data.arr_delay < 0, \"arr_status\"]=\"Before_OnTime\"\ndf_nyc_flight_data.loc[df_nyc_flight_data.arr_delay == 0, \"arr_status\"]=\"OnTime\"\ndf_nyc_flight_data.loc[df_nyc_flight_data.arr_delay > 0, \"arr_status\"]=\"Arr_ActualDelay\"\n\ndf_nyc_flight_data.head(1)","9bd0bf3d":"#Created one new column quarter to fill quarter values from time_hour date column\n#Convert datatypes into datetime for the required columns\ndf_nyc_flight_data['flight_date']= pd.to_datetime(df_nyc_flight_data['flight_date']) \ndf_nyc_flight_data['time_hour']= pd.to_datetime(df_nyc_flight_data['time_hour'])\ndf_nyc_flight_data['quarter'] = df_nyc_flight_data['time_hour'].dt.quarter","bdce2f92":" #Convert datatypes into category for the required columns\ndf_nyc_flight_data[['month','day', 'carrier', 'origin', 'dest', 'day_name','dep_status','arr_status','quarter']] = df_nyc_flight_data[['month','day', 'carrier', 'origin', 'dest', 'day_name','dep_status','arr_status','quarter']].apply(lambda x: x.astype('category'))","1e08b722":"df_nyc_flight_data.head(1)","eea5625a":"#Verify all columns datatypes and convert it as per the data visualization requirement.\ndf_nyc_flight_data.dtypes","cc3388e7":"#Verify whether we have any missingvalues for all columns\ndf_nyc_flight_data.isnull().sum()","f86efc83":"# To verify maximum aircraft_speed for the individual carrier.\n# Observation: Interestingly found 'inf' value as maximum for carrier 'MQ'\ncarrier_speed = df_nyc_flight_data.groupby(['carrier'])['aircraft_speed'].max()\ncarrier_speed","39051070":"# Observation: Interestingly found 'inf' value as maximum for carrier 'MQ'\n# Interesting Facts: Noticied that, Dep_time and Arr_time for this flight '3678' is same and which should not be the case\n# in real-time.\ndf_nyc_flight_data.sort_values(by='aircraft_speed',ascending=False).head(2)","27c45c6b":"# Observation: Interestingly found 'inf' value as maximum for carrier 'MQ'\n# Interesting Facts: Noticied that, Dep_time and Arr_time for this flight '3678' is same and which should not be the case\n# in real-time.\n#df_nyc_flight_data_flight = df_nyc_flight_data[df_nyc_flight_data['flight'] == 3678]\ndf_nyc_flight_data_flight = df_nyc_flight_data[df_nyc_flight_data['air_time'] == 0]\ndf_nyc_flight_data_flight.head(2)\n","441aff6d":"# Observation: Interestingly found 'inf' value as maximum for carrier 'MQ'\n# Interesting Facts: Noticied that, Dep_time and Arr_time for this flight '3678' is same and which should not be the case\n# in real-time.\n# Conclusion:Dropped this flight so that, can able to analyze problem statement 'Aircraft speed analysis' for all carriers.\ndf_nyc_flight_data = df_nyc_flight_data.drop([259244]) \ndf_nyc_flight_data_flight = df_nyc_flight_data[df_nyc_flight_data['flight'] == 0]\ndf_nyc_flight_data_flight.head(2)\n#df_nyc_flight_data[df_nyc_flight_data['aircraft_speed'].isin([np.inf, -np.inf])]\n#df_nyc_flight_data.at[259244,'aircraft_speed']=325.83 # mean value","457df272":"#Verify whether data displays values correct or not.\ncarrier_speed = df_nyc_flight_data.groupby(['carrier'])['aircraft_speed'].max()\ncarrier_speed","d1978230":"# Calculate minimum and maximum dep_delay values for the given NYC flight data set.\nmin_dep_delay = min(df_nyc_flight_data.dep_delay)\nprint(min_dep_delay)\nmax_dep_delay = max(df_nyc_flight_data.dep_delay)\nprint(max_dep_delay)","e55ea743":"# Visualizations Heading: Identify Departure Delay information based on Origin and Carrier\n# Plot Used   : Relational Plot\n# Description : Fetched all records whose dep_delay > 0 and plotted graph based on Origin and Carrier\n# Outcome     : a) Carrier HA, Origin JFK, is the one whose maximum dep_delay is high > 1200\n#               b) Carrier OO, Origin LGA, is the one whose dep_delay is very less.\n#               c) Carrier AS, Origin EWR, is the one whose dep_delay is very less.\nimport seaborn as sns\ndf_nyc_flight_data_dep_actualdelay=df_nyc_flight_data[df_nyc_flight_data[\"dep_status\"]==\"Dep_ActualDelay\"]\nsns.relplot(x=\"carrier\", y=\"dep_delay\", hue=\"origin\", data=df_nyc_flight_data_dep_actualdelay);","75b325cf":"# Visualizations Heading: Identify Depature Delay information based on Origin and Day_name\n# Plot Used   : Categorical Plot\n# Description : Fetched all records whose dep_delay > 0 and plotted graph based on Origin and Day_name.\n# Outcome     : a) Day: Wednesday, Origin JFK, is the one whose maximum dep_delay is around > 1200\n#               b) Day: Saturday, Origin JFK, is the second whose maxmimum dep_delay is around > 1100\n#               c) Day: Tuesday, Less number of delays on this day.\nsns.catplot(x=\"day_name\", y=\"dep_delay\", hue=\"origin\", jitter=False, aspect=2,data=df_nyc_flight_data_dep_actualdelay);","3971434e":"# Calculate total counts of flight depature delay based on dep_status == Dep_ActualDelay\ndepDelay_count = df_nyc_flight_data[df_nyc_flight_data[\"dep_status\"]==\"Dep_ActualDelay\"]\ndepDelay_count['dep_status'].value_counts()","68007dd0":"# Due to huge data set, Calculate top 2500 flight depature delay based on dep_status == Dep_ActualDelay by descending order\nTop2500_DepDelays = depDelay_count.sort_values(by='dep_delay',ascending=False).head(2500)\nTop2500_DepDelays['dep_status'].value_counts()","e943cd43":"# Visualizations Heading: Identify Top 2500 Depature Delay information based on Origin and Carrier\n# Plot Used   : Relational Plot\n# Description : Fetched all records whose dep_delay > 0 and plotted graph based on Origin and Carrier\n# Outcome     : a) Carrier HA, Origin JFK, is the one whose maximum dep_delay is around > 1200\n#               b) Carrier MQ, Origin JFK, is the second whose maxmimum dep_delay is around > 1100.\n#               c) Carrier AS, Origin EWR, is the one whose dep_delay is very less.\nsns.relplot(x=\"carrier\", y=\"dep_delay\", hue=\"origin\", data=Top2500_DepDelays,aspect=2);","a55e90a6":"# Visualizations Heading: Identify Top2500 Depature Delay information based on Origin and Day_name\n# Plot Used   : Categorical Plot\n# Description : Fetched all records whose dep_delay > 0 and plotted graph based on Origin and Day_name.\n# Outcome     : a) Day: Wednesday, Origin JFK, is the one whose maximum dep_delay is around > 1200\n#               b) Day: Saturday, Origin JFK, is the second whose maxmimum dep_delay is around > 1100\n#               c) Day: Tuesday, Less number of delays on this day.\nsns.catplot(x=\"day_name\", y=\"dep_delay\", hue=\"origin\", jitter=False, aspect=2,data=Top2500_DepDelays);","107325c5":"# Calculate total flight counts, Percentage based on Origin and dep_status = OnTime\ndep_OnTime = df_nyc_flight_data.groupby('origin')['origin'].count().reset_index(name='total')\nOnTimeFlights = df_nyc_flight_data.loc[df_nyc_flight_data['dep_status']=='OnTime'].groupby(['origin','dep_status'])['dep_status'].count().unstack('dep_status')\ndep_OnTime['OnTime'] = OnTimeFlights['OnTime'].values \ndep_OnTime['percentage'] = (dep_OnTime['OnTime']\/dep_OnTime['total'])*100\ndep_OnTime","a9080f93":"# Calculate total flight counts, Percentage based on Origin and dep_status = Before_OnTime\ndep_Before_OnTime = df_nyc_flight_data.groupby('origin')['origin'].count().reset_index(name='total')\nBefore_OnTimeFlights = df_nyc_flight_data.loc[df_nyc_flight_data['dep_status'] == 'Before_OnTime'].groupby(['origin','dep_status'])['dep_status'].count().unstack('dep_status')\ndep_Before_OnTime['Before_OnTime'] = Before_OnTimeFlights['Before_OnTime'].values\ndep_Before_OnTime['percentage'] = (dep_Before_OnTime['Before_OnTime']\/dep_Before_OnTime['total'])*100\ndep_Before_OnTime","cca968e9":"# Calculate total flight counts, Percentage based on Origin and dep_status = Dep_Actualdelay\ndep_ActualDelay = df_nyc_flight_data.groupby('origin')['origin'].count().reset_index(name='total')\nActualDelay_Flights = df_nyc_flight_data.loc[df_nyc_flight_data['dep_status'] == 'Dep_ActualDelay'].groupby(['origin','dep_status'])['dep_status'].count().unstack('dep_status')\ndep_ActualDelay['Dep_ActualDelay'] = ActualDelay_Flights['Dep_ActualDelay'].values\ndep_ActualDelay['percentage'] = (dep_ActualDelay['Dep_ActualDelay']\/dep_ActualDelay['total'])*100\ndep_ActualDelay","4e7f0e7f":"# Merge above all 3 dataframes and display total flight counts, Percentage based on Origin and dep_status in (<0,==0,>0)\nmerged_inner1 = pd.merge(left=dep_OnTime, right=dep_Before_OnTime, left_on='origin', right_on='origin')\nmerged_inner1.shape\nmerged_inner_final = pd.merge(left=merged_inner1, right=dep_ActualDelay, left_on='origin', right_on='origin')\nmerged_inner_final.shape\nmerged_inner_final","c214ab57":"# Rename columns with meaning full names for the merged dataframe and display final result set.\nmerged_inner_final = merged_inner_final.drop(['total_y', 'total'], axis = 1) \nmerged_inner_final.rename(columns = {'total_x':'total'}, inplace = True) \nmerged_inner_final.rename(columns = {'percentage_x':'OnTime_percentage'}, inplace = True) \nmerged_inner_final.rename(columns = {'percentage_y':'BeforeOnTime_percentage'}, inplace = True) \nmerged_inner_final.rename(columns = {'percentage':'ActualDepDelay_percentage'}, inplace = True) \nmerged_inner_final","deb941cd":"# Visualizations Heading: Identify Best origin airports on basis of time departure Percentage.\n# Plot Used   : Pie Plot\n# Description : Pie Chart plotted based on time departure from the origin.\n# Outcome     : a) Pie 1: OnTime Flights Percentage based on Origin. Origin JFK is highest percentage with 37.83%\n#               b) Pie 2: Before_OnTime Flights Percentage based on Origin. Origin LGA is highest percentage with 36.91%\n#               c) Pie 3: ActualDepDelay Flights Percentage based on Origin. Origin EWR is highest percentage with 38.50%\n#               d) Pie 4: Total number of Flights Percentage based on Origin. Origin EWR is highest percentage with 35.80%\n# Make figure and axes\nfig, axs = plt.subplots(2, 2,figsize=(10,5))\n\n# A standard pie plot\naxs[0,0].set_title('OnTime Flights Percentage based on Origin')\naxs[0,0].pie(merged_inner_final['OnTime_percentage'], labels=merged_inner_final['origin'], autopct='%1.2f%%', shadow=True,explode=(0.1, 0, 0))\n\naxs[0,1].set_title('Before_OnTime Flights Percentage based on Origin')\naxs[0,1].pie(merged_inner_final['BeforeOnTime_percentage'], labels=merged_inner_final['origin'], autopct='%1.2f%%', shadow=True,explode=(0.1, 0, 0))\n\naxs[1,0].set_title('ActualDepDelay Flights Percentage based on Origin')\naxs[1,0].pie(merged_inner_final['ActualDepDelay_percentage'], labels=merged_inner_final['origin'], autopct='%1.2f%%', shadow=True,explode=(0.1, 0, 0))\n\naxs[1,1].set_title('Total number of Flights Percentage based on Origin')\naxs[1, 1].pie(merged_inner_final['total'], labels=merged_inner_final['origin'], autopct='%1.2f%%', shadow=True,explode=(0.1, 0, 0))\n\nplt.show()","58dc435b":"# Visualizations Heading: Identify TotalNumberofFlights departure from Origin (i.e,Best Airports.)\n# Plot Used   : Bar Plot\n# Description : Bar Chart plotted to show total number of flights departure from the origin.\n# Outcome     : a) Origin JFK is one of the highest number OnTime Flights timely departure \n#               b) Origin LGA is one of the highest number Before_OnTime Flights timely departure\n#               c) Origin EWR is one of the highest number Dep_ActualDelay Flights timely departure\nimport numpy as np\n\nx = np.arange(len(merged_inner_final['origin']))  # the label locations\nwidth = 0.25  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(10,5))\nrects1 = ax.bar(x, merged_inner_final['OnTime'], width,alpha=0.5,color='#EE3224', label='OnTime')\nrects2 = ax.bar([p + width for p in x], merged_inner_final['Before_OnTime'], width,alpha=0.5, color='#F78F1E',label='Before_OnTime')\nrects3 = ax.bar([p + width*2 for p in x], merged_inner_final['Dep_ActualDelay'], width, alpha=0.5,color='#FFC222',label='Dep_ActualDelay')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Total Number of Flights')\nax.set_title('TotalNumberofFlights departure from Origin i.e,Best Airports')\nax.set_xticks([p + 1.5 * width for p in x])\nax.set_xticklabels(merged_inner_final['origin'])\nax.legend()\n\nplt.xlim(min(x)-width, max(x)+width*4)\nplt.ylim([0, max(merged_inner_final['OnTime'] + merged_inner_final['Before_OnTime'] + merged_inner_final['Dep_ActualDelay'])] )\n\nfig.tight_layout()\nplt.grid()\nplt.show()\n","39ccc770":"# Visualizations Heading: Identify TotalNumberofFlights departure from Origin (i.e,Best Airports.)\n# Plot Used   : line Plot\n# Description : line Chart plotted to show total number of flights departure from the origin.\n# Outcome     : a) Origin EWR,JFK,LGA is having similar number (slightly differ) OnTime Flights timely departure \n#               b) Before_OnTime Flights  timely departure count decreases from EWR,JFK,LGA\n#               c) Dep_ActualDelay Flights timely departure count increases from EWR,JFK,LGA\nax = plt.gca()\n\nmerged_inner_final.plot(kind='line',x='origin',y='OnTime',color='#EE3224', ax=ax)\nmerged_inner_final.plot(kind='line',x='origin',y='Before_OnTime', color='#F78F1E', ax=ax)\nmerged_inner_final.plot(kind='line',x='origin',y='Dep_ActualDelay', color='#FFC222', ax=ax)\nplt.show()","b7f0e417":"# Visualizations Heading: Identify Aircraft_Speed based on airtime, distance and Origin. \n# Plot Used   : Pair Plot\n# Description : Pair Plot plotted to show how the aircraft_speed increases based on air_time and distance.\n# Outcome     : a) Origin LGA is having high aircraft_speed which travels shorter distance.\n#               b) Origin LGA is having consistent aircraft_speed for distance <1800\n#               c) Origin EWR is having inconsistent aircraft_speed for distance <2500\nimport seaborn as sns\norigin_speed = sns.pairplot(df_nyc_flight_data,height = 3,vars = ['distance','air_time','aircraft_speed'],hue='origin',palette=\"husl\",markers=[\"o\", \"s\", \"D\"])\nplt.show(origin_speed)","d8530c5b":"# Calculate mean of aircraft_speed by applying group by on carrier.\ncarrier_speed = df_nyc_flight_data.groupby(['carrier'])['aircraft_speed'].mean()\ncarrier_speed","555bebfe":"# Calculate mean of distance by applying group by on carrier.\ncarrier_distance = df_nyc_flight_data.groupby(['carrier'])['distance'].mean()\ncarrier_distance","c06eda2d":"# Merge above two dataframes to display records for Carrier, aircraft_speed and distance.\nmerged_inner = pd.merge(left=carrier_speed, right=carrier_distance, left_on='carrier', right_on='carrier')\nmerged_inner.shape\nmerged_inner.info()","25d7c163":"# reset index for the above dataframe records.\nmerged_inner.reset_index(level=0,drop=False,inplace=True)\nmerged_inner.head(1)","7a1e4179":"# Visualizations Heading: Identify Aircraft_Speed based on distance and Origin. \n# Plot Used   : Scatter Plot\n# Description : Scatter Plot plotted to show how the aircraft_speed increases based on distance for carrier.\n# Outcome     : a) Carrier HA is having high aircraft_speed for the distance covered around 5000\n#               b) Carrier YU is having low aircraft_speed for the distance covered around 400\n#               c) Most of the Carrier is having consistent aircraft_speed for the similar distance covered.\nf, ax = plt.subplots(figsize=(6.5, 6.5))\nsns.set(style=\"ticks\")\nsns.despine(f, left=True, bottom=True)\nsns.scatterplot(x=\"distance\", y=\"aircraft_speed\",\n                hue=\"carrier\", \n                palette=\"dark\",\n                sizes=(1, 8), linewidth=0,\n                data=merged_inner, ax=ax)\n","22e73833":"#Calculate count of OnTime,Before_OnTime,Arr_ActualDelay arrival count by grouping with arr_status column\narr_Status = df_nyc_flight_data.groupby('arr_status')['arr_status'].count()\nprint('arr_Status complete list:')\nprint(arr_Status)","02c9e409":"# Visualizations Heading: Visualize the Ontime arrival percentage and count.\n# Plot Used   : Count Plot and Pie Plot\n# Description : Count Plot plotted to show the count of number of flights based on OnTime,Before_OnTime,Arr_ActualDelay arrival status.\n#             : Pie Plot plotted to show the percentage of number of flights arrivals based on OnTime,Before_OnTime,Arr_ActualDelay arrival status.\n# Outcome     : a) Around 189038 number of flights has arrived Before_OnTime with 57.54%\n#               b) Around 134057 number of flights has arrived Arr_ActualDelay with 40.81%\n#               c) Around 5425 number of flights has arrived OnTime with 1.65%\n# Setting up the chart area\nf,ax=plt.subplots(1,2,figsize=(14,7))\n\n# setting up chart \ndf_nyc_flight_data['arr_status'].value_counts().plot.pie(explode=[0,0,0.2], autopct='%1.2f%%',ax=ax[1], shadow=False)   \n \n# setting title for pei chart\nax[1].set_title('On time arrival % Analysis')\nax[1].set_ylabel('')\n\n# setting up data for barchart\nsns.countplot('arr_status',order = df_nyc_flight_data['arr_status'].value_counts().index, data=df_nyc_flight_data,ax=ax[0])\nax[0].set_title('Arrival Status of total flights (in numbers)')\nax[0].set_ylabel('Number of Flights')\n\nplt.show()\n","3d4fb303":"# Calculate maximum number of flights to particular destination.\ndf_nyc_flight_data['dest'].value_counts()\n","c215a0d7":"# Calculate maximum number of flights to started from particular origin.\ndf_nyc_flight_data['origin'].value_counts()","b79c28b8":"# Calculate Top 25 Maximum number of flights from origin to destination by applying group by on origin and dest.\nTop25_MaxFlights_Dest = df_nyc_flight_data.groupby('origin')['dest'].value_counts().to_frame()\n#Top25_MaxFlights_Dest.dtypes\nTop25_MaxFlights_Dest.rename(columns = {'dest':'dest_count'}, inplace = True) \nTop25_MaxFlights_Dest.reset_index(level=1,drop=False,inplace=True)\nTop25_MaxFlights_Dest.reset_index(level=0,drop=False,inplace=True)\n#sum_flight1.head(40)\nTop25_MaxFlights_Dest = Top25_MaxFlights_Dest.sort_values(by='dest_count',ascending=False).head(25)\nTop25_MaxFlights_Dest.reset_index(level=0,drop=False,inplace=True)\nTop25_MaxFlights_Dest.head(3)","c8589caa":"# Visualizations Heading: Visualize Top 25 Maximum number of flights headed to some particular destination.\n# Plot Used   : Relational Plot\n# Description : Relational Plot plotted to show Top 25 Maximum number of flights headed to some particular destination.\n# Outcome     : a) Top 1  : Origin JFK is having maximum number of flights headed towards LAX destination\n#               b) Top 10 : Origin EWR is having maximum number of flights headed towards BOS destination\n#               c) Top 25 : Origin EWR is having maximum number of flights headed towards FLL destination\npalette = sns.cubehelix_palette(light=.8, n_colors=3)\nsns.relplot(x=\"dest\", y=\"dest_count\", hue=\"origin\", height=6, aspect=3, data=Top25_MaxFlights_Dest);","cdb749de":"# Visualizations Heading: Visualize Top 25 Maximum number of flights headed to some particular destination.\n# Plot Used   : Catergorical Plot\n# Description : Catergorical Plot plotted to show Top 25 Maximum number of flights headed to some particular destination.\n# Outcome     : a) Top 1  : Origin JFK is having maximum number of flights headed towards LAX destination\n#               b) Top 10 : Origin EWR is having maximum number of flights headed towards BOS destination\n#               c) Top 25 : Origin EWR is having maximum number of flights headed towards FLL destination\ng = sns.catplot(x=\"dest\", y=\"dest_count\", hue=\"origin\", data=Top25_MaxFlights_Dest,\n                height=5, kind=\"bar\", palette=\"muted\", aspect=4)\ng.despine(left=True)\ng.set_ylabels(\"Total Number of Flights\")","ddd53649":"# Visualizations Heading: Visualize  Month-Wise mean analysis about the Flight Departure and Arrival Status.\n# Plot Used   : line Plot\n# Description : line Plot plotted to show month-wise analysis  dep_delay and arr_delay .\n# Outcome     : a) left-side line plot shows 3,5,9 month is having earlier arrivals and 4,9 month is having earlier departure.\n#               b) right-side line plot shows 4,6,7 month is having arrivals delays and 4,6,7 month is having departure delays.\n\nf,ax=plt.subplots(1,2,figsize=(20,8))\n\ndep_Ontime = df_nyc_flight_data[df_nyc_flight_data[\"dep_status\"]!=\"Dep_ActualDelay\"]\ndep_Ontime[['month','arr_delay','dep_delay']].groupby(['month']).mean().plot(ax=ax[0],marker='*',linestyle='dashed',color = 'b'+'r',linewidth=2, markersize=12)\n\ndf_nyc_flight_data_dep_actualdelay[['month','arr_delay','dep_delay']].groupby(['month']).mean().plot(ax=ax[1],marker='*',linestyle='dashed',color = 'b'+'r',linewidth=2, markersize=12)\n\n","e93dcc74":"# Visualizations Heading: Visualize Quarter-Wise analysis of Flight mean Depature Delays by Carriers.\n# Plot Used   : Heat Map\n# Description : Heat Map plotted to show  Quarter-Wise analysis of Flight mean Depature Delays by Carriers.\n# Outcome     : a) Quarter 1: Carrier EV is having highest (24.3) & Carrier US is having lowest (2.7) mean depature delay.\n#               b) Quarter 2: Carrier F9 is having highest (26.6) & Carrier HA is having lowest (0.3) mean depature delay.\n#               c) Quarter 3: Carrier FL is having highest (21.9) & Carrier AS is having lowest (5.1) mean depature delay.\n#               d) Quarter 4: Carrier FL is having highest (21.7) & Carrier OO is having lowest (0.8) mean depature delay.\nimport seaborn as sns\nplt.figure(figsize=(18,10))\nplt.title(\"Quarter-Wise flight depature delays by carriers\")\nplt.tight_layout()\nhmap = pd.pivot_table(df_nyc_flight_data,values='dep_delay',aggfunc='mean',index='carrier',columns='quarter')\nsns.heatmap(hmap,annot=True,cmap=\"YlGnBu\",center=0,linewidths=.2,fmt='g')\nplt.show()","2d247d2d":"Step 3: Data Cleaning Activity","05d20629":"Step 2: Understanding Flight Data Set","fe59ed45":"Problem Statement 3: Aircraft speed analysis","70227b56":"Problem Statement 7: Quarter-Wise analysis of Flight Mean Depature Delays by Carriers.","0a4edc8c":"Problem Statement 5: Maximum number of flights headed to some particular destination.","c5bda1ac":"Problem Statement 4: On time arrival % analysis","90188bd5":"Problem Statement 6: Month-Wise analysis of Flight Departure and Arrival Status.","d93655f0":"Step 1: Reading Flight Data from the DataSet.","c209b5c0":"Step 4: Missing Data Analysis ","17159f60":"Problem Statement 1: Departure delays","e1fc5096":"Step 5: Data Visualizations","db70d65f":"Domain : Airlines Project Name : Analyze NYC - Flight Data ","440fc681":"Problem Statement 2: Best Airport in terms of time departure %"}}