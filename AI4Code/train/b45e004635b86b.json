{"cell_type":{"409943a7":"code","d5763c02":"code","9bb21273":"code","64b3699b":"code","352e0e4c":"code","39b66bb5":"code","409208a8":"code","8c77f67b":"code","58e07e55":"code","3562e4af":"code","c5f05405":"code","03c24105":"code","5de7d0a7":"code","62276399":"code","c36ccc07":"code","fb3cc9e5":"code","87157ed7":"code","fd02b389":"code","2c863386":"code","fd2b1f56":"code","baa7f600":"code","215c9c24":"code","482fbd06":"code","973aceeb":"code","6e88fbc7":"code","ce8c272e":"code","badb8e7d":"code","3ecafa70":"code","5949f06c":"code","08dc6322":"code","9ced2030":"code","b2815a33":"code","b9993bfd":"code","29d43035":"markdown","f5bb5c04":"markdown","6286c37a":"markdown","3de322fe":"markdown","7d2991c3":"markdown","9c5c54fa":"markdown","36013793":"markdown","a21e5f70":"markdown","78a756cd":"markdown","c801cd6b":"markdown","17ddee77":"markdown","bc935772":"markdown","ea867693":"markdown","7ba32279":"markdown","7338d342":"markdown","3fa36e31":"markdown"},"source":{"409943a7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime\nimport calendar","d5763c02":"jan = pd.read_csv('..\/input\/monthly-sales-data\/Sales_April_2019.csv')\nfeb = pd.read_csv('..\/input\/monthly-sales-data\/Sales_February_2019.csv')\nmar = pd.read_csv('..\/input\/monthly-sales-data\/Sales_March_2019.csv')\napr = pd.read_csv('..\/input\/monthly-sales-data\/Sales_April_2019.csv')\nmay = pd.read_csv('..\/input\/monthly-sales-data\/Sales_May_2019.csv')\njun = pd.read_csv('..\/input\/monthly-sales-data\/Sales_June_2019.csv')\njul = pd.read_csv('..\/input\/monthly-sales-data\/Sales_July_2019.csv')\naug = pd.read_csv('..\/input\/monthly-sales-data\/Sales_August_2019.csv')\nsep = pd.read_csv('..\/input\/monthly-sales-data\/Sales_September_2019.csv')\noct = pd.read_csv('..\/input\/monthly-sales-data\/Sales_October_2019.csv')\nnov = pd.read_csv('..\/input\/monthly-sales-data\/Sales_November_2019.csv')\ndec = pd.read_csv('..\/input\/monthly-sales-data\/Sales_December_2019.csv')\njan.head()","9bb21273":"sales=pd.concat([jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec])\nsales.head()","64b3699b":"sales.isnull().sum()","352e0e4c":"sales.dropna(subset = ['Order ID'], inplace=True)","39b66bb5":"sales.isnull().sum()","409208a8":"sales.info()","8c77f67b":"# Adding a month column\nsales['Month'] = sales['Order Date'].str[:2]\nsales = sales.loc[sales['Month']!= 'Or'] # to overcome the error invalid literal for int() with base 10: 'Or'\nsales['Month'] = sales['Month'].astype('int32')\nsales['Month Name'] = sales['Month'].apply(lambda x: calendar.month_name[x])","58e07e55":"# Convert column to correct type\nsales['Price Each'] = sales['Price Each'].astype('float')\nsales.info()","3562e4af":"sales['Quantity Ordered'] = sales['Quantity Ordered'].astype('int32') #Convert column to correct type\nsales['Total Sales'] = sales['Price Each']*sales['Quantity Ordered']\nsales.head()","c5f05405":"per_month = sales.groupby(['Month Name','Month'])\n# Making a Dataframe with total sales per month\nsales_per_month = per_month['Total Sales'].sum().reset_index()\nsales_per_month.sort_values('Month', inplace=True)","03c24105":"plt.figure(figsize=(6,4))\nplt.bar(sales_per_month['Month Name'],sales_per_month['Total Sales'])\nplt.xticks(rotation='vertical')\nplt.xlabel('Month')\nplt.ylabel('Sales per Month in $')\nplt.title('Sales distribution per month')\nplt.show()","5de7d0a7":"# Extracting the City from the address\nsales['Purchase Address'] = sales['Purchase Address'].str.split(',')\nsales['City'] = sales['Purchase Address'].apply(lambda x: x[1])\nsales.head()","62276399":"# Putting the Address field to as it was before, see the difference in the values covered with [] \nsales['Purchase Address'] = sales['Purchase Address'].str.join(',')","c36ccc07":"sales.head()","fb3cc9e5":"per_city = sales.groupby(['City'])\n# Making a Dataframe with total sales per month\nsales_per_city = per_city['Total Sales'].sum().reset_index()\n\nplt.figure(figsize=(6,4))\nplt.bar(sales_per_city['City'],sales_per_city['Total Sales'])\nplt.xticks(rotation='vertical')\nplt.xlabel('City')\nplt.ylabel('Sales per City in $')\nplt.title('Sales distribution per city in the US')\nplt.show()","87157ed7":"sales.head()","fd02b389":"#Converting Order Date Column from String to Date-time data type\nsales['Order Date'] = pd.to_datetime(sales['Order Date'])","2c863386":"sales.info()   #Notice the change in Order Date type","fd2b1f56":"sales.head()   ","baa7f600":"sales['Order Hour'] = sales['Order Date'].dt.hour\nsales['Order Minute'] = sales['Order Date'].dt.minute\nsales.head()","215c9c24":"per_hour = sales.groupby(['Order Hour'])\n# Making a Dataframe with total sales per month\nsales_per_hour = per_hour['Total Sales'].sum().reset_index()\n\nplt.figure(figsize=(8,4))\nplt.plot(sales_per_hour['Order Hour'],sales_per_hour['Total Sales'])\nplt.grid()\nplt.xlabel('Hour')\nplt.xticks(sales_per_hour['Order Hour'])\nplt.ylabel('Sales per hour in $')\nplt.title('Sales distribution throughout the day')\nplt.show()","482fbd06":"per_hour_per_city = sales.groupby(['City','Order Hour'])\n# Making a Dataframe with total sales per month\nsales_per_hour = per_hour_per_city['Total Sales'].sum().reset_index()\nsales_per_hour.head()","973aceeb":"sales_per_hour['City'].unique()","6e88fbc7":"plt.figure(figsize=(18,12))\n\nplt.subplot(331)\nplt.title('Atlanta')\nx= sales_per_hour['Order Hour'].loc[sales_per_hour['City']== ' Atlanta']\ny= sales_per_hour['Total Sales'].loc[sales_per_hour['City']== ' Atlanta']\nplt.plot(x,y)\n\nplt.subplot(332)\nplt.title('Austin')\nx= sales_per_hour['Order Hour'].loc[sales_per_hour['City']== ' Austin']\ny= sales_per_hour['Total Sales'].loc[sales_per_hour['City']== ' Austin']\nplt.plot(x,y)\n\nplt.subplot(333)\nplt.title('Boston')\nx= sales_per_hour['Order Hour'].loc[sales_per_hour['City']== ' Boston']\ny= sales_per_hour['Total Sales'].loc[sales_per_hour['City']== ' Boston']\nplt.plot(x,y)\n\nplt.subplot(334)\nplt.title('Dallas')\nx= sales_per_hour['Order Hour'].loc[sales_per_hour['City']== ' Dallas']\ny= sales_per_hour['Total Sales'].loc[sales_per_hour['City']== ' Dallas']\nplt.plot(x,y)\n\nplt.subplot(335)\nplt.title('Los Angeles')\nx= sales_per_hour['Order Hour'].loc[sales_per_hour['City']== ' Los Angeles']\ny= sales_per_hour['Total Sales'].loc[sales_per_hour['City']== ' Los Angeles']\nplt.plot(x,y)\n\nplt.subplot(336)\nplt.title('New York City')\nx= sales_per_hour['Order Hour'].loc[sales_per_hour['City']== ' New York City']\ny= sales_per_hour['Total Sales'].loc[sales_per_hour['City']== ' New York City']\nplt.plot(x,y)\n\nplt.subplot(337)\nplt.title('Portland')\nx= sales_per_hour['Order Hour'].loc[sales_per_hour['City']== ' Portland']\ny= sales_per_hour['Total Sales'].loc[sales_per_hour['City']== ' Portland']\nplt.plot(x,y)\n\nplt.subplot(338)\nplt.title('San Francisco')\nx= sales_per_hour['Order Hour'].loc[sales_per_hour['City']== ' San Francisco']\ny= sales_per_hour['Total Sales'].loc[sales_per_hour['City']== ' San Francisco']\nplt.plot(x,y)\n\nplt.subplot(339)\nplt.title('Seattle')\nx= sales_per_hour['Order Hour'].loc[sales_per_hour['City']== ' Seattle']\ny= sales_per_hour['Total Sales'].loc[sales_per_hour['City']== ' Seattle']\nplt.plot(x,y)\nplt.show()","ce8c272e":"sales.head()","badb8e7d":"df = sales[sales['Order ID'].duplicated(keep=False)]\ndf['Grouped'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))","3ecafa70":"df.head()","5949f06c":"df = df[['Order ID','Grouped']].drop_duplicates()","08dc6322":"df.head()","9ced2030":"from itertools import combinations\nfrom collections import Counter\n\ncount = Counter()\n\nfor row in df['Grouped']:\n    row_list = row.split(',')\n    count.update(Counter(combinations(row_list, 2)))\n\nfor key,value in count.most_common(10):\n    print(key, value)","b2815a33":"prod_group = sales.groupby('Product')","b9993bfd":"quantity_per_prod = prod_group['Quantity Ordered'].sum().reset_index()\nprice_per_prod = prod_group['Price Each'].mean().reset_index()\n\nfig, ax1 = plt.subplots()\nax2 = ax1.twinx()\nax1.bar(quantity_per_prod['Product'],quantity_per_prod['Quantity Ordered'], color='green')\nax2.plot(price_per_prod['Product'],price_per_prod['Price Each'],'r-')\nax1.set_xlabel('Product Name')\nax1.set_ylabel('Quantity Ordered',color='green')\nax2.set_ylabel('Price in $',color='red')\nax1.set_xticklabels(quantity_per_prod['Product'],rotation='vertical')\nplt.title('Price and Quantity Sold')\nplt.show()","29d43035":"### Question 3: What products are most often sold together?","f5bb5c04":"# Sales Analysis","6286c37a":"#### Merging 12 months of Sales Data into a single file","3de322fe":"#### As we can see, the highest sales was in December","7d2991c3":"Do all the cities have similar trend?","9c5c54fa":"### So a good time to advertise would be at 10-11am and at 6-7pm","36013793":"#### Clean up the Data","a21e5f70":"### Question 1: What was the best month for sales and how much money was earned in that month?","78a756cd":"The trend of timing seems to exists across cities","c801cd6b":"## Question 4: What product is sold the most? And Why?","17ddee77":"As we can see that the cheaper items are sold more than the costlier items","bc935772":"### As we can see, San Francisco has the highest Sales","ea867693":"### So, as we can see 'iPhone' and 'Lightning Charging Cable' comination is sold together the most","7ba32279":"### Question 2: Which city had highest sales?","7338d342":"### Question 3: What time should we display advertisements to maximize the likelihood of customers buying","3fa36e31":"We can use the Order Time to see during what time of the day, there are higher number of orders"}}