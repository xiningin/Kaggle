{"cell_type":{"9c4af3dd":"code","981e892f":"code","beaed7f3":"code","c5d5f431":"code","f162b2b5":"code","d6b8a406":"code","45fa72f9":"markdown"},"source":{"9c4af3dd":"import os\nimport gc\nfrom functools import partial, wraps\nfrom datetime import datetime as dt\nimport warnings\nwarnings.simplefilter('ignore', FutureWarning)\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\n\nimport lightgbm as lgb","981e892f":"TARGET = 'HasDetections'\nTARGET_INDEX = 'MachineIdentifier'\n\n\ndef modeling_cross_validation(params, X, y, nr_folds=5):\n    clfs = list()\n    oof_preds = np.zeros(X.shape[0])\n    # Split data with kfold\n    kfolds = StratifiedKFold(n_splits=nr_folds, shuffle=False, random_state=42)\n    for n_fold, (trn_idx, val_idx) in enumerate(kfolds.split(X, y)):\n        X_train, y_train = X.iloc[trn_idx], y.iloc[trn_idx]\n        X_valid, y_valid = X.iloc[val_idx], y.iloc[val_idx]\n\n        print(\"Fold {}\".format(n_fold+1))\n        \n        model = lgb.LGBMClassifier(**params)\n        model.fit(\n            X_train, y_train,\n            eval_set=[(X_valid, y_valid)],\n            verbose=200, eval_metric='auc',\n            early_stopping_rounds=150\n        )\n\n        clfs.append(model)\n        oof_preds[val_idx] = model.predict(X_valid, num_iteration=model.best_iteration_)\n        \n    score = roc_auc_score(y, oof_preds)\n    print(score)\n    return clfs, score","beaed7f3":"def predict_cross_validation(test, clfs):\n    sub_preds = np.zeros(test.shape[0])\n    for i, model in enumerate(clfs, 1):    \n        test_preds = model.predict_proba(test, num_iteration=model.best_iteration_)\n        sub_preds += test_preds[:,1]\n\n    sub_preds = sub_preds \/ len(clfs)\n    ret = pd.Series(sub_preds, index=test.index)\n    ret.index.name = test.index.name\n    return ret","c5d5f431":"def predict_test_chunk(features, clfs, dtypes, filename='tmp.csv', chunks=100000):\n    \n    for i_c, df in enumerate(pd.read_csv('..\/input\/test.csv', \n                                         chunksize=chunks, \n                                         dtype=dtypes, \n                                         iterator=True)):\n        \n        df.set_index(TARGET_INDEX, inplace=True)\n        preds_df = predict_cross_validation(df[features], clfs)\n        preds_df = preds_df.to_frame(TARGET)\n\n        if i_c == 0:\n            preds_df.to_csv(filename, header=True, mode='a', index=True)\n        else:\n            preds_df.to_csv(filename, header=False, mode='a', index=True)\n    \n        del preds_df\n        gc.collect()","f162b2b5":" # cf Theo Viel https:\/\/www.kaggle.com\/theoviel\/load-the-totality-of-the-data\ndtypes = {\n        #'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float16',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int32',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float32',\n        'LocaleEnglishNameIdentifier':                          'int32',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float32',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float64',\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float32',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float32',\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float32',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float32',\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float32',\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int32',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int32',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float32',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float32',\n        'HasDetections':                                        'int8'\n    }\n        \n# Some of these might be redundant, tried to reduce overfitting (num_leaves < 2^max_depth)\nmodel_params = {\n            'device': 'cpu', \n        \"objective\": \"binary\",\n        \"boosting_type\": \"gbdt\", \n        \"learning_rate\": 0.05,\n        \"max_depth\": 8,\n        \"num_leaves\": 120,\n        \"n_estimators\": 1000,\n        \"bagging_fraction\": 0.7,\n        \"feature_fraction\": 0.7,\n        \"bagging_freq\": 5,\n        \"bagging_seed\": 2018,\n        'min_child_samples': 80, \n        'min_child_weight': 100.0, \n        'min_split_gain': 0.1, \n        'reg_alpha': 0.005, \n        'reg_lambda': 0.1, \n        'subsample_for_bin': 25000, \n        'min_data_per_group': 100, \n        'max_cat_to_onehot': 4, \n        'cat_l2': 25.0, \n        'cat_smooth': 2.0, \n        'max_cat_threshold': 32, \n        \"random_state\": 1,\n        \"silent\": True,\n        \"metric\": \"auc\",\n    }","d6b8a406":"train_features = list()\n    \ntrain = pd.read_csv('..\/input\/train.csv', nrows=2000000, dtype=dtypes).set_index(TARGET_INDEX)\ntrain_features = [f for f in train.columns if f != TARGET]\n    \n# modeling\nclfs, score = modeling_cross_validation(model_params, train[train_features], train[TARGET])\nfilename = 'subm_{:.6f}_{}_{}.csv'.format(score, 'LGBM', dt.now().strftime('%Y-%m-%d-%H-%M'))\npredict_test_chunk(train_features, clfs, dtypes, filename=filename, chunks=100000)","45fa72f9":"* > https:\/\/www.kaggle.com\/theoviel\/load-the-totality-of-the-data\n* > https:\/\/www.kaggle.com\/cttsai\/forked-lightgbm-msft-malware-predictor\n* > https:\/\/www.kaggle.com\/fabiendaniel\/detecting-malwares-with-lgbm"}}