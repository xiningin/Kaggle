{"cell_type":{"822b6f89":"code","d96242bf":"code","b876c160":"code","b74bd00d":"code","aedcf4b1":"code","34f4b72e":"code","5bdfa23f":"code","46d007d9":"code","163b6424":"code","ba5ca395":"code","f6c73a63":"code","ca908c1e":"code","8143440d":"code","d7dc127a":"code","4d94baed":"code","fa782b15":"code","204fa2ba":"code","4703a862":"code","fd1d8069":"code","381b2a4b":"code","d589e9db":"code","77889d16":"code","a475ec79":"code","59bdbcae":"code","00f96a94":"code","3272b09c":"code","baf80f4d":"code","dee31401":"code","b3e0cab3":"code","15260a80":"code","0f5185b5":"code","81602e2a":"code","75006238":"code","0266c1ab":"code","9de8eecc":"code","23e23b5f":"code","690579db":"code","b6424865":"code","893b73ad":"code","a8cd2905":"code","6686e436":"code","a4d3e472":"code","053b54c8":"code","1576595a":"code","7010d60c":"code","4b381b96":"code","45e92ca1":"code","400396ce":"code","d6070ee2":"code","f0ae4c71":"code","4191dfb5":"code","769f4d30":"code","d0f9c734":"code","964d8026":"code","6fd83575":"code","bbad3371":"code","d80cba31":"code","f4510753":"code","d79223fa":"code","5ab5fc2b":"code","532875c4":"code","c7cd15c2":"code","946504c7":"code","568994a9":"code","5943ab23":"code","ccfc2a94":"code","5807e6c7":"code","00010ee2":"code","abca2ea8":"code","37e4b797":"code","a682f63d":"code","743308db":"code","cb7663a4":"code","f1b6c67d":"code","e89fc722":"code","1bf1b25d":"code","b91646d0":"code","537c354d":"code","b7014012":"code","d3e910bf":"code","799410d6":"code","0671e141":"code","f0b8fdba":"code","7b692199":"code","d0bb1768":"code","eed15e81":"code","3465707d":"code","3802636e":"code","7d95b645":"code","3739d133":"code","6775bd06":"code","0eb7793b":"code","1779e02c":"code","31fc311b":"code","848afc3b":"code","245e56c2":"code","6871751b":"code","28c2bb65":"code","f7eb61e0":"code","6b11204d":"code","fe69d70c":"code","01ca0492":"code","64df1152":"code","9d8b77a4":"code","e6b1e0cc":"code","86994669":"code","ad4cc293":"code","76b56f92":"code","4cc04507":"code","df45ea96":"code","9f9ed70b":"code","d85609e4":"code","6569cc65":"code","2923b908":"markdown","4d03e2ca":"markdown","88a63878":"markdown","2cbe0528":"markdown","b997fa7a":"markdown","3eabf292":"markdown","9dfb38e6":"markdown","f6b52731":"markdown","a2e1c1fc":"markdown","a1b2a643":"markdown","1fce8f3e":"markdown","06bf85f5":"markdown","cde6a6b4":"markdown","eea59b3c":"markdown","1ae98374":"markdown","42782ced":"markdown","d54da8da":"markdown","321e395e":"markdown","4f4b2a03":"markdown","2fe375ab":"markdown","db712e1f":"markdown"},"source":{"822b6f89":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d96242bf":"pwd","b876c160":"df=pd.read_csv('..\/input\/air-passengers\/AirPassengers.csv')","b74bd00d":"df.head()","aedcf4b1":"df.tail()","34f4b72e":" df.shape","5bdfa23f":"df.info()","46d007d9":"df.isnull().sum()","163b6424":"df=pd.read_csv('..\/input\/air-passengers\/AirPassengers.csv',index_col='Month',parse_dates=True)","ba5ca395":"df.head()","f6c73a63":"df.index","ca908c1e":"df.index.freq='MS'","8143440d":"df.index","d7dc127a":"df.plot(figsize=(8,5))","4d94baed":"df['#Passengers'].resample('Y').mean().plot(kind='bar')","fa782b15":"df['#Passengers'].iloc[:12].mean()","204fa2ba":"df['#Passengers'].plot(figsize=(8,5),legend=True)\ndf['#Passengers'].rolling(window=7).mean().plot(legend=True)","4703a862":"df['#Passengers'].plot(figsize=(8,5),legend=True)\ndf['#Passengers'].rolling(window=14).mean().plot(legend=True)","fd1d8069":"df['#Passengers'].plot(figsize=(8,5),legend=True)\ndf['#Passengers'].expanding().mean().plot(legend=True)","381b2a4b":"from statsmodels.tsa.filters.hp_filter import hpfilter","d589e9db":"pas_cycle,pas_trend=hpfilter(df['#Passengers'],lamb=1600)","77889d16":"df1=df.copy()","a475ec79":"df1['trend']=pas_trend","59bdbcae":"df1[['#Passengers','trend']].plot(figsize=(12,10))","00f96a94":"from statsmodels.tsa.seasonal import seasonal_decompose\nfrom pylab import rcParams\nrcParams['figure.figsize']=12,5","3272b09c":"result=seasonal_decompose(df['#Passengers'],model='additive')","baf80f4d":"result.plot();","dee31401":"result=seasonal_decompose(df['#Passengers'],model='multiplicative')","b3e0cab3":"result.plot();","15260a80":"df1['6 month-SMA']=df1['#Passengers'].rolling(window=6).mean()\ndf1['12 month-SMA']=df1['#Passengers'].rolling(window=12).mean()\ndf1['EWMA-6']=df1['#Passengers'].ewm(span=6,adjust=False).mean()\ndf1['EWMA-12']=df1['#Passengers'].ewm(span=12,adjust=False).mean()\n","0f5185b5":"df1[['#Passengers','6 month-SMA','12 month-SMA','EWMA-6','EWMA-12']]['1959-01-01':'1961-01-01'].plot(figsize=(12,10))","81602e2a":"from statsmodels.tsa.holtwinters import SimpleExpSmoothing","75006238":"span=12\nalpha=2\/(span+1)","0266c1ab":"df1['EWMA12']=df1['#Passengers'].ewm(alpha=alpha,adjust=False).mean()\ndf1.head()","9de8eecc":"model=SimpleExpSmoothing(df['#Passengers']).fit(smoothing_level=alpha,optimized=False)\n#fitted_model=model.fit(df['#Passengers'])\ndf1['SES12']=model.fittedvalues.shift(-1)\n#model.","23e23b5f":"df1.head()","690579db":"from statsmodels.tsa.holtwinters import ExponentialSmoothing","b6424865":"df1['DES_add_12']=ExponentialSmoothing(df1['#Passengers'],trend='add').fit().fittedvalues.shift(-1)","893b73ad":"df1[['#Passengers','SES12','DES_add_12']].plot(figsize=(12,10))","a8cd2905":"df1['TES_mul_12']=ExponentialSmoothing(df1['#Passengers'],trend='mul',seasonal='mul',seasonal_periods=12).fit().fittedvalues","6686e436":"df1[['#Passengers','SES12','TES_mul_12']].plot(figsize=(12,10))","a4d3e472":"# DES is performing better","053b54c8":"train=df.iloc[:109]\ntest=df.iloc[108:]\n","1576595a":"from statsmodels.tsa.holtwinters import ExponentialSmoothing","7010d60c":"fitted_model=ExponentialSmoothing(train['#Passengers'],trend='mul',seasonal='mul').fit()","4b381b96":"test_pred=fitted_model.forecast(36)","45e92ca1":"test_pred.tail()","400396ce":"train['#Passengers'].plot(legend=True,figsize=(12,10),label='TRAIN')\ntest['#Passengers'].plot(legend=True,label='TEST')\ntest_pred.plot(legend=True,label='TES Predictions')\nplt.show()","d6070ee2":"#using holt-winters (DES) method to forecast for the future ","f0ae4c71":"fitted_modeld=ExponentialSmoothing(train['#Passengers'],trend='add',seasonal='add').fit() #.fittedvalues.shift(-1)","4191dfb5":"test_predd=fitted_modeld.forecast(36)","769f4d30":"train['#Passengers'].plot(legend=True,figsize=(12,10),label='TRAIN')\ntest['#Passengers'].plot(legend=True,label='TEST')\ntest_predd.plot(legend=True,label='DES Predictions')\nplt.show()","d0f9c734":"# EVALUATION ","964d8026":"from sklearn.metrics import mean_squared_error","6fd83575":"mean_squared_error(test['#Passengers'],test_pred) #TES","bbad3371":"mean_squared_error(test['#Passengers'],test_predd) #DES","d80cba31":"# DES method worked well!","f4510753":"# Now forecasting into future","d79223fa":"final_modeld=ExponentialSmoothing(df['#Passengers'],trend='add',seasonal='add').fit() #.fittedvalues.shift(-1)","5ab5fc2b":"final_predd=final_modeld.forecast(36)","532875c4":"train['#Passengers'].plot(legend=True,figsize=(12,10),label='TRAIN')\ntest['#Passengers'].plot(legend=True,label='TEST')\nfinal_predd.plot(legend=True,label='DES Predictions')\nplt.show()","c7cd15c2":"# Time series data is stationary when there is no trend and seasonality\n#method 1: by differencing\n#method 2: by dickey fuller test\n    ","946504c7":"from statsmodels.tsa.statespace.tools import diff","568994a9":"df1['d2']=diff(df['#Passengers'],k_diff=2) #.plot()","5943ab23":"from statsmodels.tsa.stattools import adfuller","ccfc2a94":"def adf_test(series,title=''):\n    print(f'Augmentted Dickey Fuller Test : {title}')\n    result=adfuller(series.dropna(),autolag='AIC')\n    labels=['ADF test statistic','p-value','# lags used','# observations']\n    out=pd.Series(result[0:4],index=labels)\n    for key,val in result[4].items():\n        out[f'critical value({key})']=val\n    print(out.to_string())\n    \n    if result[1]<=0.05:\n        print('strong evidence against the null hypothesis')\n        print('reject the null hypothesis')\n        print('data has no unit roots and is stationary')\n\n    else:\n        print('weak evidence against the null hypothesis')\n        print('fail to reject the null hypothesis')\n        print('data has a unit root and is non-stationary')\n\n        ","5807e6c7":"adf_test(df1['#Passengers'])","00010ee2":"adf_test(df1['d2'])","abca2ea8":"# ACF PLOT:","37e4b797":"from statsmodels.graphics.tsaplots import plot_acf,plot_pacf","a682f63d":"title='Autocorrelation: No.of Air Passengers'\nlags=40\nplot_acf(df['#Passengers'],title=title,lags=lags);","743308db":"# This plot indicates non stationary data as there are large number of lags before ACF Values drop off.","cb7663a4":"# PACF plot:","f1b6c67d":"# PACF works best with stationary data.Hence apply differencing and make data stationary","e89fc722":"df1['d1']=diff(df1['#Passengers'],k_diff=1)","1bf1b25d":"plot_pacf(df1['d1'].dropna(),title=title,lags=np.arange(lags));","b91646d0":"from statsmodels.tsa.ar_model import AR,ARResults","537c354d":"model=AR(train['#Passengers'])\nAR1fit=model.fit(maxlag=1)","b7014012":"AR1fit.params","d3e910bf":"start=len(train)\nend=len(train)+len(test)-1\n","799410d6":"pred1=AR1fit.predict(start=start,end=end).rename('AR1 Predictions')","0671e141":"test.plot(figsize=(8,5),legend=True)\npred1.plot(legend=True)","f0b8fdba":"model=AR(df1['#Passengers'])\nAR2fit=model.fit(maxlag=2)\npred2=AR2fit.predict(start,end).rename('AR2 Predictions')\n","7b692199":"test.plot(figsize=(8,5),legend=True)\npred2.plot(legend=True)","d0bb1768":"model=AR(df1['#Passengers'])\nARfit=model.fit(ic='t-stat')  # we can choose order p for no.of lags using statsmodels","eed15e81":"ARfit.params  # 13 lags","3465707d":"pred13=ARfit.predict(start,end).rename('AR13 Predictions')","3802636e":"test.plot(figsize=(8,5),legend=True)\npred1.plot(legend=True)\npred2.plot(legend=True)\npred13.plot(legend=True)","7d95b645":"labels=['AR1','AR2','AR13']\npreds=[pred1,pred2,pred13]\n","3739d133":"import numpy as np\nfor i in range(3):\n    error=np.sqrt(mean_squared_error(test['#Passengers'],preds[i]))\n    print(f'{labels[i]} MSE was :{error}')","6775bd06":"# AR13 performed well lets build final model and forecast","0eb7793b":"model=AR(df1['#Passengers'])\nARfit=model.fit(maxlag=None)\nforecasted_values=ARfit.predict(start=len(df1),end=len(df1)+36).rename('Forecast')\n","1779e02c":"df1['#Passengers'].plot(legend=True,figsize=(12,10))\nforecasted_values.plot(legend=True)","31fc311b":"#!pip install pmdarima","848afc3b":"from pmdarima import auto_arima\nimport warnings\nwarnings.filterwarnings('ignore')","245e56c2":"stepwise_fit=auto_arima(df1['#Passengers'],start_p=0,start_q=0,max_p=6,max_q=3,seasonal=True,trace=True,m=12)","6871751b":"stepwise_fit.summary()","28c2bb65":"# building model:\nfrom statsmodels.tsa.arima_model import ARMA,ARIMA,ARMAResults,ARIMAResults\nmodel=ARIMA(train['#Passengers'],order=(1,1,1))\nresults=model.fit()\nresults.summary()","f7eb61e0":"# predictions\npredictions=results.predict(start,end,typ='levels').rename('ARIMA(1,1,1) Predictions')","6b11204d":"test['#Passengers'].plot(legend=True)\npredictions.plot(legend=True)","fe69d70c":"from statsmodels.tools.eval_measures import rmse\n","01ca0492":"error=rmse(test['#Passengers'],predictions)","64df1152":"error","9d8b77a4":"test['#Passengers'].mean()","e6b1e0cc":"# Forecast into future\nmodel=ARIMA(df1['#Passengers'],order=(1,1,1))\nresults=model.fit()\nfcast=results.predict(start=len(df1),end=len(df1)+36,typ='levels').rename('ARIMA(1,1,1) forecast')","86994669":"df1['#Passengers'].plot(legend=True,figsize=(8,5))\nfcast.plot(legend=True)","ad4cc293":"from statsmodels.tsa.statespace.sarimax import SARIMAX","76b56f92":"model=SARIMAX(train['#Passengers'],order=(1,1,1),seasonal_order=(1,0,0,12))\nresults=model.fit()\nresults.summary()\n","4cc04507":"predictions1=results.predict(start,end,typ='levels').rename('SARIMA Predictions')\n","df45ea96":"test['#Passengers'].plot(legend=True,figsize=(8,5))\npredictions1.plot(legend=True)","9f9ed70b":"error1=rmse(test['#Passengers'],predictions1)\nerror1","d85609e4":"# Forecast into future\nmodel=SARIMAX(df1['#Passengers'],order=(1,1,1),seasonal_order=(1,0,0,12))\nresults=model.fit()\nfcast=results.predict(start=len(df1),end=len(df1)+36,typ='levels').rename('SARIMA Forecast')","6569cc65":"df1['#Passengers'].plot(legend=True,figsize=(8,5))\nfcast.plot(legend=True)","2923b908":"### ROLLING WINDOWS","4d03e2ca":"## Checking for stationarity :","88a63878":"### ETS DECOMPOSITION","2cbe0528":"### EXPANDING WINDOWS","b997fa7a":"## ACF & PACF ","3eabf292":"## GENERAL FORECASTING METHODS:","9dfb38e6":"### DoubleExpSmoothing","f6b52731":"##### method 2 :using statsmodels","a2e1c1fc":"### TIME RESAMPLING","a1b2a643":"### Triple Exponential Smoothing","1fce8f3e":"# DATASET LOADING","06bf85f5":"### HOLT-WINTERS METHOD","cde6a6b4":"#### method 1","eea59b3c":"# SARIMA","1ae98374":"### EWMA MODELS","42782ced":"## using holt-winters method to forecast for the future ","d54da8da":"## AUTOREGRESSION with Statsmodels","321e395e":" ### Hodrick-Prescott Filter","4f4b2a03":"## AUTO-ARIMA","2fe375ab":"#### Simple Exponential Smoothing","db712e1f":" ### TES method"}}