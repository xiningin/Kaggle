{"cell_type":{"a40958e3":"code","82953edc":"code","8cbc009a":"code","dfb60f81":"code","38850879":"code","966e7426":"code","4a200165":"code","b7c2504c":"code","ca2ab714":"code","2c66074a":"code","bfe0179f":"code","680425fd":"code","aee92d98":"code","2a261add":"code","39f3e359":"code","1f1d2618":"code","78bd7fdf":"code","4557579c":"code","986db547":"code","728083cf":"code","8131d70b":"code","0c1adc37":"code","9516d022":"markdown","4cfedb20":"markdown","2acbe54c":"markdown"},"source":{"a40958e3":"import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport random\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport matplotlib.patches as patches\nimport tensorflow as tf\nimport pylab as pl\nfrom PIL import Image\nimport math\n\n#from tensorflow.keras.utils import to_categorical\n#from tensorflow.keras.preprocessing.image import load_img, img_to_array\n#from tensorflow.python.keras.preprocessing.image import ImageDataGenerator\n\n#from sklearn.metrics import classification_report, log_loss, accuracy_score\n#from sklearn.model_selection import train_test_split","82953edc":"data_dir = '..\/input\/iwildcam2021-fgvc8\/train'\ntest_dir = '..\/input\/iwildcam2021-fgvc8\/test'","8cbc009a":"sample=pd.read_csv('..\/input\/iwildcam2021-fgvc8\/sample_submission.csv')\nsample[0:3]","dfb60f81":"with open('..\/input\/iwildcam2021-fgvc8\/metadata\/iwildcam2021_train_annotations.json') as json_data:\n    train_anno = json.load(json_data)\n    print(train_anno.keys())","38850879":"with open('..\/input\/iwildcam2021-fgvc8\/metadata\/iwildcam2021_test_information.json') as json_data:\n    test_anno = json.load(json_data)\n    print(test_anno.keys())","966e7426":"with open('..\/input\/iwildcam2021-fgvc8\/metadata\/iwildcam2021_megadetector_results.json') as json_data:\n    megadetect = json.load(json_data)\n    print(megadetect.keys())","4a200165":"df_detect = pd.DataFrame(megadetect[\"images\"])\ndf_detect\n#### YOLO info for train and test","b7c2504c":"with open('..\/input\/iwildcam2021-fgvc8\/metadata\/iwildcam2021_test_information.json') as json_data:\n    test_info = json.load(json_data)\n    print(test_info.keys())","ca2ab714":"df_test_info=pd.DataFrame(test_info['images'])\ndf_test_info[0:3]","2c66074a":"df_anno=pd.DataFrame(train_anno['annotations'])\ndf_anno[0:3]","bfe0179f":"df_cat = pd.DataFrame(train_anno[\"categories\"])\ndf_cat[0:3]","680425fd":"N=[]\nfor i in range(205):\n    N+=[i]\n    \ncat_id=df_cat['id']\nName=df_cat['name']\n\nNM2NU_mapping=dict(zip(Name,N))\nNU2NM_mapping=dict(zip(N,Name))\nNM2ID_mapping=dict(zip(Name,cat_id)) \nID2NM_mapping=dict(zip(cat_id,Name))\nNU2ID_mapping=dict(zip(N,cat_id))\nID2NU_mapping=dict(zip(cat_id,N))  ","aee92d98":"# for train data\n\ndef draw_bbox(img_path):\n    \n    img_id=img_path.split('\/')[-1].split('.')[0] \n    img=mpimg.imread(img_path)\n    detects=df_detect[df_detect.id==img_id].detections.values[0]   \n    if detects==[]:\n        return None\n    else:\n        anno=df_anno[df_anno.image_id==img_id]    ### name\n        cat_id=anno.category_id\n        name=ID2NM_mapping[int(cat_id)]\n        _ = plt.figure(figsize = (10,10))\n        _ = plt.axis('off')\n        ax = plt.gca()\n        ax.text(10,100,f'{name}',fontsize=20,color='fuchsia')\n        for detect in detects:\n            x0,y0,w0,h0=detect['bbox']    \n            H,W,_=img.shape\n            x=x0*W\n            y=y0*H\n            w=w0*W\n            h=h0*H\n            cat='animal' if detect['category']==\"1\" else 'human'\n            bbox=patches.FancyBboxPatch((x,y),w,h,alpha=0.8,capstyle='projecting',edgecolor='fuchsia',facecolor=\"none\")\n            ax.text(x+1.5,y-8,f'{cat} {detect[\"conf\"]}',fontsize=10,bbox=dict(facecolor='fuchsia',alpha=0.8,edgecolor=\"none\"))\n            ax.add_patch(bbox)\n\n    _ = plt.imshow(img)","2a261add":"# for test data\n\ndef draw_test_bbox(img_path):\n    \n    img_id=img_path.split('\/')[-1].split('.')[0] \n    img=mpimg.imread(img_path)\n    detects=df_detect[df_detect.id==img_id].detections.values[0]   \n    if detects==[]:\n        return None\n    else:\n        _ = plt.figure(figsize = (10,10))\n        _ = plt.axis('off')\n        ax = plt.gca()\n        ax.text(10,100,f'test',fontsize=20,color='fuchsia')\n        for detect in detects:\n            x0,y0,w0,h0=detect['bbox']    \n            H,W,_=img.shape\n            x=x0*W\n            y=y0*H\n            w=w0*W\n            h=h0*H\n            cat='animal' if detect['category']==\"1\" else 'human'\n            bbox=patches.FancyBboxPatch((x,y),w,h,alpha=0.8,capstyle='projecting',edgecolor='fuchsia',facecolor=\"none\")\n            ax.text(x+1.5,y-8,f'{cat} {detect[\"conf\"]}',fontsize=10,bbox=dict(facecolor='fuchsia',alpha=0.8,edgecolor=\"none\"))\n            ax.add_patch(bbox)\n\n    _ = plt.imshow(img)","39f3e359":"img = \"..\/input\/iwildcam2021-fgvc8\/train\/86760c00-21bc-11ea-a13a-137349068a90.jpg\"\n_ = plt.figure(figsize = (10,10))\n_ = plt.axis('off')\n_ = plt.imshow(mpimg.imread(img)[100:-100])","1f1d2618":"draw_bbox('..\/input\/iwildcam2021-fgvc8\/train\/86760c00-21bc-11ea-a13a-137349068a90.jpg')","78bd7fdf":"# for train data\n\nobjects=[]\nobjlabels=[]\n\ndef extract_obj(img_path, show=False):\n\n    img_id = img_path.split('\/')[-1].split('.')[0]\n    img = mpimg.imread(img_path)\n    if df_detect[df_detect.id==img_id].detections.values.size!=0:      ######     \n        detects = df_detect[df_detect.id==img_id].detections.values[0]\n        if detects==[]:\n            return None\n        else:\n            anno=df_anno[df_anno.image_id==img_id]\n            cat_id=anno.category_id\n            name=ID2NM_mapping[int(cat_id)]\n            for idx,detect in enumerate(detects):\n                x0,y0,w0,h0=detects[idx]['bbox']    \n                H,W,_=img.shape\n                if w0*W>100 and h0*H>100:           \n                    x=math.floor(x0*W)\n                    y=math.floor(y0*H)\n                    w=math.floor(w0*W)\n                    h=math.floor(h0*H)\n                    obj=img[int(y):int(y+h),int(x):int(x+w)]\n                    obj1 = Image.fromarray(np.uint8(obj))\n                    obj2 = np.asarray(obj1.resize((32,32))) \n                    objects.append(obj2\/255.0)\n                    objlabels.append(name)\n\n                    if show:\n                        _ = plt.figure(figsize=(3,3))\n                        _ = plt.xticks([])\n                        _ = plt.yticks([])\n                        _ = plt.imshow(obj)\n\n    return None","4557579c":"# for test data\n\ntobjects=[]\ntestid=[]\n\ndef extract_test_obj(img_path, show=False):\n\n    img_id = img_path.split('\/')[-1].split('.')[0]\n    img = mpimg.imread(img_path)\n    if df_detect[df_detect.id==img_id].detections.values.size!=0:      ###### \n        detects = df_detect[df_detect.id==img_id].detections.values[0]\n        if detects==[]:\n            return None\n        else:\n            for idx,detect in enumerate(detects):\n                x0,y0,w0,h0=detects[idx]['bbox']    \n                H,W,_=img.shape\n                if w0*W>100 and h0*H>100:\n                    x=math.floor(x0*W)\n                    y=math.floor(y0*H)\n                    w=math.floor(w0*W)\n                    h=math.floor(h0*H)\n                    obj=img[int(y):int(y+h),int(x):int(x+w)]\n                    obj1 = Image.fromarray(np.uint8(obj))\n                    obj2 = np.asarray(obj1.resize((32,32))) \n                    tobjects.append(obj2\/255.0)\n                    testid.append(img_id)\n\n                    if show:\n                        _ = plt.figure(figsize=(3,3))\n                        _ = plt.xticks([])\n                        _ = plt.yticks([])\n                        _ = plt.imshow(obj)\n            \n    return None","986db547":"draw_bbox('..\/input\/iwildcam2021-fgvc8\/train\/86760c00-21bc-11ea-a13a-137349068a90.jpg')","728083cf":"extract_obj('..\/input\/iwildcam2021-fgvc8\/train\/86760c00-21bc-11ea-a13a-137349068a90.jpg', show=True)","8131d70b":"draw_test_bbox('..\/input\/iwildcam2021-fgvc8\/test\/8676fd72-21bc-11ea-a13a-137349068a90.jpg')","0c1adc37":"extract_test_obj('..\/input\/iwildcam2021-fgvc8\/test\/8676fd72-21bc-11ea-a13a-137349068a90.jpg', show=True)","9516d022":"# Check Data Structure","4cfedb20":"# Function to show image and YOLO rectangle","2acbe54c":"# Function to extract rectangle image"}}