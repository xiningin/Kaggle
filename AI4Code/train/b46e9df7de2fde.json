{"cell_type":{"48a51c44":"code","50ac9d57":"code","83f0b675":"code","49b65d61":"code","8ab9da77":"code","035188fe":"code","350c89fb":"code","aa840fc3":"code","0f631042":"code","2f77577a":"code","fee674b3":"code","b555355f":"code","15bc5e28":"code","cebb9886":"code","c99ca078":"code","cf371f15":"code","20638f82":"markdown","c3f61890":"markdown"},"source":{"48a51c44":"# Let's pip install effcientnet libarary\n!pip install -q efficientnet","50ac9d57":"# Import all the libraries \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nimport shutil\nfrom PIL import Image, ImageOps  \nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style('white')\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport datetime\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.io as pio\npio.templates.default = 'plotly_white'\nfrom plotly.subplots import make_subplots\ninit_notebook_mode(connected=True)\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation, Dropout, Concatenate, Flatten, MaxPooling2D, Conv2D\nfrom  tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport tensorflow_addons as tfa\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import binary_crossentropy\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras import metrics\nimport efficientnet.tfkeras as efn\nfrom tqdm import tqdm_notebook","83f0b675":"# Reading through the metadata\nsummary = pd.read_csv('\/kaggle\/input\/coronahack-chest-xraydataset\/Chest_xray_Corona_dataset_Summary.csv')\ndf = pd.read_csv('\/kaggle\/input\/coronahack-chest-xraydataset\/Chest_xray_Corona_Metadata.csv')\nprint(df.head())\n\nreplace_dict = {'Pnemonia':1,\n                'Normal':0}\ndf['Label'] = df['Label'].replace(replace_dict)\n\ntrain_df = df[df.Dataset_type=='TRAIN']\nprint(train_df.head())\ntest_df = df[df.Dataset_type=='TEST']\nprint(test_df.head())\n","49b65d61":"colors = ['gold', 'mediumturquoise']\n\nfig = go.Figure(data=[go.Pie(labels=['Pneumonia', 'Normal'],\n                             values=[df.Label.value_counts()[1], df.Label.value_counts()[0]])])\n\nfig.update_traces(hoverinfo='label+value', textinfo='percent+label', textfont_size=14,\n                  marker=dict(colors=colors,\n                           line=dict(color='#000000',width=2)))\nfig.update_layout(title_text='Distributions of classes', font_size=14)\nfig.show()","8ab9da77":"# Inside the Pneumonia idagnosed data how many are covid positive\ndf_pneumonia = df[df.Label==1]\ndf_pneumonia_covid = df_pneumonia[df_pneumonia.Label_2_Virus_category=='COVID-19']\npneumonia_covid_images = df_pneumonia_covid.X_ray_image_name.values.tolist()","035188fe":"plt.figure(figsize=(12,12))\nfor index, fn in enumerate(pneumonia_covid_images[:4]):\n    print(fn)\n    path = '..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/train\/' + str(fn)\n    image = Image.open(path)\n    image = ImageOps.grayscale(image)\n    image.thumbnail((224,224))\n    plt.subplot(2,2,index+1)\n    plt.imshow(image)\n\nplt.tight_layout()","350c89fb":"# Defining the path to Train and Test directories\ntraining_data_path = '..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/train'\ntesting_data_path = '..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/test'","aa840fc3":"# Funtions for Making nd Removing subdirectories\ndef create_dir():\n    try:\n        os.makedirs('\/kaggle\/working\/train\/Pneumonia')\n        os.makedirs('\/kaggle\/working\/train\/Normal')\n        os.makedirs('\/kaggle\/working\/test\/Pneumonia')\n        os.makedirs('\/kaggle\/working\/test\/Normal')\n    except:\n        pass\ndef remove_dir():\n    try:\n        shutil.rmtree('\/kaggle\/working\/train')\n        shutil.rmtree('\/kaggle\/working\/test')    \n    except:\n        pass","0f631042":"# Seperate dataframes for different labels in test and train\ntrain_pneumonia_df = train_df[train_df.Label==1]\ntrain_normal_df = train_df[train_df.Label==0]\ntest_pneumonia_df = test_df[test_df.Label==1]\ntest_normal_df = test_df[test_df.Label==0]","2f77577a":"# Copying the files to newly created locations. You may use Flow from dataframe attribute and skip all these steps. But I prefer to use flow from directory \nremove_dir()\ncreate_dir()\n\ntraining_images_pneumonia = train_pneumonia_df.X_ray_image_name.values.tolist()\ntraining_images_normal = train_normal_df.X_ray_image_name.values.tolist()\ntesting_images_pneumonia = test_pneumonia_df.X_ray_image_name.values.tolist()\ntesting_images_normal = test_normal_df.X_ray_image_name.values.tolist()\n\nfor image in training_images_pneumonia:\n    train_image_pneumonia = os.path.join(training_data_path, str(image))\n    shutil.copy(train_image_pneumonia, '\/kaggle\/working\/train\/Pneumonia')\n    \nfor image in training_images_normal:\n    train_image_normal = os.path.join(training_data_path, str(image))\n    shutil.copy(train_image_normal, '\/kaggle\/working\/train\/Normal')\n    \nfor image in testing_images_pneumonia:\n    test_image_pneumonia = os.path.join(testing_data_path, str(image))\n    shutil.copy(test_image_pneumonia, '\/kaggle\/working\/test\/Pneumonia')\n\nfor image in testing_images_normal:\n    test_image_normal = os.path.join(testing_data_path, str(image))\n    shutil.copy(test_image_normal, '\/kaggle\/working\/test\/Normal')","fee674b3":"# VisualaiCzing the Pneumonia affected Xrays\nplt.figure(figsize=(12,12))\nfor index, fn in enumerate(training_images_pneumonia[:4]):\n    path = '\/kaggle\/working\/train\/Pneumonia\/' + str(fn)\n    image = Image.open(path)\n    image = ImageOps.grayscale(image)\n    image.thumbnail((224,224))\n    plt.subplot(2,2,index+1)\n    plt.imshow(image)\n\nplt.tight_layout()","b555355f":"# VisualaiCzing the Normal  Xrays\nplt.figure(figsize=(12,12))\nfor index, fn in enumerate(training_images_normal[:4]):\n    path = '\/kaggle\/working\/train\/Normal\/' + str(fn)\n    image = Image.open(path)\n    image = ImageOps.grayscale(image)\n    image.thumbnail((224,224))\n    plt.subplot(2,2,index+1)\n    plt.imshow(image)\n\nplt.tight_layout()","15bc5e28":"# Model configuration\nbatch_size = 64\nimg_width, img_height, img_num_channels = 224,224,3\nno_epochs = 15\nverbosity = 1\ninput_shape = (img_width, img_height, img_num_channels)","cebb9886":"#Creating an EffNet model\nmodel_B7 = efn.EfficientNetB7(weights='imagenet', input_shape=input_shape, include_top=False)","c99ca078":"# Function to build, compile and train the model\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,\n                                   shear_range=0.2,\n                                   rotation_range=0.2,\n                                   width_shift_range=0.2,\n                                   height_shift_range=0.2,\n                                   zoom_range=0.2,\n                                   horizontal_flip=True,\n                                   vertical_flip=True,\n                                   fill_mode='nearest')\ntrain_generator = train_datagen.flow_from_directory('\/kaggle\/working\/train',\n                                                    target_size=(224,224),\n                                                    batch_size=batch_size,\n                                                    class_mode='binary')\n\nvalid_datagen = ImageDataGenerator(rescale=1.\/255)\nvalid_generator = valid_datagen.flow_from_directory('\/kaggle\/working\/test',\n                                                    target_size=(224,224),\n                                                    batch_size=batch_size,\n                                                    class_mode='binary')\n\npretrained_model = model_B7\npretrained_model.trainable=True\nset_trainable=False\n\nfor layer in pretrained_model.layers:\n    if layer.name == 'block7c_project_conv':\n        set_trainable=True\n    if set_trainable:\n        layer.trainable=True\n    else:\n        layer.trainable=False\n\n\nmodel=Sequential()\nmodel.add(pretrained_model)\nmodel.add(MaxPooling2D(name=\"MaxPool_\"))\nmodel.add(Dropout(0.2, name=\"dropout_out\"))\nmodel.add(Flatten())\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss=binary_crossentropy,\n              optimizer=Adam(),\n              metrics=[metrics.AUC(name='auc'), 'accuracy'])\n\nes_callback = EarlyStopping(monitor='val_auc', mode='max', patience=8,\n                                              verbose=1, min_delta=0.0001, restore_best_weights=True)\n\nhistory = model.fit(train_generator,\n                    steps_per_epoch=train_generator.samples\/\/batch_size,\n                    epochs = no_epochs,\n                    validation_data=valid_generator,\n                    validation_steps=valid_generator.samples\/\/batch_size,\n                    callbacks= [es_callback],\n                    verbose=verbosity)","cf371f15":"#Plotting the evaluation metrics\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=list(range(1,11)), y=history.history['auc'],\n                         line=dict(color='firebrick', width=2, dash='dash'), name='AUC'))\nfig.add_trace(go.Scatter(x=list(range(1,11)), y=history.history['val_auc'],\n                         line=dict(color='turquoise', width=2), name='validation AUC'))\n\nfig.add_trace(go.Scatter(x=list(range(1,11)), y=history.history['accuracy'],\n                         line=dict(color='orange', width=2, dash='dash'), name='accuracy'))\nfig.add_trace(go.Scatter(x=list(range(1,11)), y=history.history['val_accuracy'],\n                         line=dict(color='green', width=2), name='validation accuracy'))\n\nfig.update_layout(title_text='Plot of evaluation metrics', font_size=15, xaxis_title='Epochs')\nfig.show()","20638f82":"#### _I hope you will like the kernel. Consider upvoting if it was helpful!_","c3f61890":"The metrics will improve if trained for more epochs. The class imbalance is affecting the model. I will use oversampling methods sometimes later to overcome the class imbalance or might employ a stratified kfold. Overfitting also has to be taken care of."}}