{"cell_type":{"254c629b":"code","a74dbfd9":"code","71a5dd24":"code","6d85abe6":"code","0da82451":"code","9b13264e":"code","16fb4b67":"code","5006d1fc":"code","484d6c12":"code","55de2170":"code","e9584046":"code","f38cbc95":"code","54a96208":"code","6d628248":"code","02b3f8be":"code","15aecb80":"code","212ed5aa":"markdown","26a42b63":"markdown","c19f3739":"markdown","400eedaa":"markdown","d5e46040":"markdown","830f3e59":"markdown","a21c13bd":"markdown","1ec9a754":"markdown"},"source":{"254c629b":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import validation_curve\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score","a74dbfd9":"train_df = pd.read_csv('\/kaggle\/input\/data-science-london-scikit-learn\/train.csv', header=None)\ntrainLabels_df = pd.read_csv('\/kaggle\/input\/data-science-london-scikit-learn\/trainLabels.csv', header=None)\ntest_df = pd.read_csv ('\/kaggle\/input\/data-science-london-scikit-learn\/test.csv', header=None)","71a5dd24":"train_df.head()","6d85abe6":"train_df.shape, test_df.shape, trainLabels_df.shape","0da82451":"train_df.describe()","9b13264e":"X = train_df\ny = trainLabels_df\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","16fb4b67":"## SVM ##\nfrom sklearn.svm import SVC\nsvc_clf = SVC(random_state=0, gamma='auto', C=1).fit(X_train, y_train.values.ravel())\ny_svc_predict = svc_clf.predict(X_test)\nprint('SVM: ', accuracy_score(y_test, y_svc_predict))\n\n## Decision Tree ##\nfrom sklearn.tree import DecisionTreeClassifier\n''' # Run validation for best max_depth\nparam_range = np.arange(3, 10)\ntrain_scores, test_scores = validation_curve(DecisionTreeClassifier(random_state=0),\n                                             X, y,\n                                             param_name='max_depth', param_range=param_range,\n                                             cv=5)\nmax_depth_best = param_range[np.argmax(test_scores.mean(axis=1), axis=0)] # 5'''\n\ndt_clf = DecisionTreeClassifier(max_depth=5, random_state=0).fit(X_train, y_train)\ny_dt_predict = dt_clf.predict(X_test)\nprint('Decision Tree: ', accuracy_score(y_test, y_dt_predict))\n\n## KNeighborsClassifier ##\nfrom sklearn.neighbors import KNeighborsClassifier\nknn_clf = KNeighborsClassifier(n_neighbors = 5).fit(X_train,y_train.values.ravel())\ny_knn_predict = knn_clf.predict(X_test)\n\nprint('KNN',accuracy_score(y_test, y_knn_predict))","5006d1fc":"from sklearn.preprocessing import StandardScaler, Normalizer\n\nnorm = Normalizer()\nX_norm = norm.fit_transform(X)\ny_norm = y.values.ravel()","484d6c12":"## SVM ##\nfrom sklearn.svm import SVC\nsvc_clf = SVC(random_state=0, gamma='auto', C=1)\nprint('SVC: ', cross_val_score(svc_clf, X_norm, y_norm, cv=10).mean())\n\n## Decision Tree ##\nfrom sklearn.tree import DecisionTreeClassifier\ndt_clf = DecisionTreeClassifier(max_depth=5, random_state=0)\nprint('Decision Tree: ', cross_val_score(dt_clf, X_norm, y_norm, cv=10).mean())\n\n## KNeighborsClassifier ##\nfrom sklearn.neighbors import KNeighborsClassifier\nknn_clf = KNeighborsClassifier(n_neighbors = 5)\nprint('KNN: ', cross_val_score(knn_clf, X_norm, y_norm, cv=10).mean())","55de2170":"from sklearn.decomposition import PCA\npca = PCA(n_components=12)\nX_pca = pca.fit_transform(X)\ny_pca = y.values.ravel()\n\nX_pca.shape","e9584046":"## SVM ##\nfrom sklearn.svm import SVC\nsvc_clf = SVC(random_state=0, gamma='auto', C=1)\nprint('SVC: ', cross_val_score(svc_clf, X_pca, y_pca, cv=10).mean())\n\n## Decision Tree ##\nfrom sklearn.tree import DecisionTreeClassifier\ndt_clf = DecisionTreeClassifier(max_depth=5, random_state=0)\nprint('Decision Tree: ', cross_val_score(dt_clf, X_pca, y_pca, cv=10).mean())\n\n## KNeighborsClassifier ##\nfrom sklearn.neighbors import KNeighborsClassifier\nknn_clf = KNeighborsClassifier(n_neighbors = 5)\nprint('KNN: ', cross_val_score(knn_clf, X_pca, y_pca, cv=10).mean())","f38cbc95":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.mixture import GaussianMixture\n\nfull_df = np.r_[train_df, test_df]\nfull_df.shape","54a96208":"## Gaussian Mixture Model ##\nlowest_bic = np.infty\nbic = []\nn_components_range = range(1,7)\ncv_types = ['spherical', 'tied', 'diag', 'full']\nbest_gmm = None\nfor cv_type in cv_types:\n    for n_components in n_components_range:\n        gmm = GaussianMixture(n_components=n_components, covariance_type=cv_type)\n        gmm.fit(full_df)\n        bic.append(gmm.aic(full_df))\n        if bic[-1] < lowest_bic:\n            lowest_bic = bic[-1]\n            best_gmm = gmm\nprint(best_gmm)\n\nbest_gmm.fit(full_df)\ngmm_train = best_gmm.predict_proba(train_df)\ngmm_test = best_gmm.predict_proba(test_df)","6d628248":"## SVM ##\nfrom sklearn.svm import SVC\nsvc = SVC(kernel='rbf')\n\nparam_grid = [{'kernel': ['linear'], 'C': [1, 10, 100]},\n              {'kernel': ['rbf'], 'C': [1, 10, 100], 'gamma': [0.0001, 0.001, 0.01, 0.1]}]\ngrid_search_svc = GridSearchCV(estimator=svc, param_grid=param_grid, cv=10, n_jobs=-1, scoring='accuracy' \n                              ).fit(gmm_train, y.values.ravel())\nsvc_clf = grid_search_svc.best_estimator_\n\nprint('SVM Best Score: ', grid_search_svc.best_score_)\nprint('SVM Best Params: ', grid_search_svc.best_params_)\nprint('SVM: ', cross_val_score(svc_clf, gmm_train, y.values.ravel(), cv=10).mean())\nprint()\n\n## KNeighborsClassifier ##\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\n\nn_neighbors = np.arange(3, 10, 2)\nparam_grid = dict(n_neighbors=n_neighbors)\ngrid_search_knn = GridSearchCV(estimator=knn, param_grid=param_grid, cv=10, n_jobs=-1, scoring='accuracy'\n                                  ).fit(gmm_train, y.values.ravel())\nknn_clf = grid_search_knn.best_estimator_\n\nprint('KNN Best Score: ', grid_search_knn.best_score_)\nprint('KNN Best Params: ',grid_search_knn.best_params_)\nprint('KNN: ', cross_val_score(knn_clf, gmm_train, y.values.ravel(), cv=10).mean())","02b3f8be":"knn_clf.fit(gmm_train, y.values.ravel())\npredict = knn_clf.predict(gmm_test)\n\npredict_df = pd.DataFrame(predict, columns=['Solution'], index=np.arange(1,9001))\npredict_df.index.name = 'Id'\npredict_df.reset_index(drop=False, inplace=True)\n\npredict_df.head()","15aecb80":"predict_df.to_csv('submission.csv', index=False)","212ed5aa":"### Pre-Processing","26a42b63":"### Feature Scaling","c19f3739":"### Gaussian Mixture & Grid Search","400eedaa":"### Principal Component Analysis","d5e46040":"### Import Data","830f3e59":"### Import Libraries","a21c13bd":"### Classification Models","1ec9a754":"### Submission"}}