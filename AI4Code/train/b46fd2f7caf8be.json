{"cell_type":{"c60e9890":"code","7543ce95":"code","6912b933":"code","2d5d59b2":"code","6167083f":"code","069767a4":"code","dcf01b05":"code","8b0bf795":"code","9b74a609":"code","52960a7b":"code","b8a9afa2":"code","9b6c83fb":"code","26489d46":"code","e9c55436":"code","0b0e74af":"code","0449ff25":"code","3d232751":"code","83f46f12":"code","a64b8ae3":"code","6971f15c":"code","fbbde2ac":"code","6cd13176":"code","dcd12b9d":"code","078cb545":"code","0ab10ff5":"code","c4b56c76":"code","0ade934b":"code","42586ee5":"code","906d5229":"code","849f3f06":"code","bbedc271":"code","2ffa3134":"code","19919808":"code","c4504d45":"code","85a15e6a":"code","55da6543":"code","913818ea":"code","5b12cddf":"code","e1f41b55":"code","87e6b1ad":"code","cc4df964":"code","b799a363":"code","daeb9d40":"markdown","10b0a1e8":"markdown","99767b92":"markdown","d512f4b9":"markdown","10b53467":"markdown","48976616":"markdown","decbddb0":"markdown","e30a9601":"markdown","1dad84d8":"markdown","0d416032":"markdown"},"source":{"c60e9890":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7543ce95":"filename = '\/kaggle\/input\/titanic\/train.csv'\ndf = pd.read_csv(filename)\ndf.head()","6912b933":"df.shape","2d5d59b2":"df.describe()","6167083f":"#list of columns\ndf.columns","069767a4":"#checking for null values\ndf.isnull().sum().sort_values(ascending=False)","dcf01b05":"#droping cabin column from the dataset as more than 50% of it is null values\ndf=df.drop(columns=['Cabin'])\ndf","8b0bf795":"import matplotlib.pyplot as plt\nimport seaborn as sns","9b74a609":"sns.heatmap(df.corr(),annot=True)","52960a7b":"sns.jointplot(x=\"Age\", y=\"Pclass\", data=df,kind=\"hex\",height=8,color=\"g\") \nplt.show()","b8a9afa2":"#using median value grouped by pclass to replace missing values\nage_group = df.groupby('Pclass')[\"Age\"]\nage_group.median()","9b6c83fb":"#replacing null age values using median grouped by Pclass\ndf.loc[df.Age.isnull(),'Age']=df.groupby('Pclass').Age.transform('median')\nprint(df.Age.isnull().sum())","26489d46":"from statistics import mode\n#filling embarked with mode value as only 2 values of embarked are missing\ndf['Embarked'] = df.Embarked.fillna(mode(df['Embarked']))\ndf.isnull().sum()","e9c55436":"sns.countplot('Survived',data=df)","0b0e74af":"sns.countplot('Sex',hue='Survived',data=df)","0449ff25":"sns.barplot(x='Pclass',y='Survived',data=df)","3d232751":"sns.barplot(x='Embarked',y='Survived',hue='Sex',data=df)","83f46f12":"# https:\/\/www.kaggle.com\/konohayui\/titanic-data-visualization-and-models\n\n#df.loc[df['Survived']==1,'Age']\n\nsns.distplot(a=df.loc[df['Survived']==1,'Age'])\nsns.distplot(a=df.loc[df['Survived']==0,'Age'])\nplt.legend(labels=['Survived','dead'])\nplt.show()","a64b8ae3":"sns.distplot(a=df.loc[df['Survived']==1,'Fare'])\nsns.distplot(a=df.loc[df['Survived']==0,'Fare'])\nplt.legend(labels=['Survived','dead'])\nplt.show()","6971f15c":"#dividing age into bands\ndf.AgeCut=pd.cut(df.Age,5)\nprint(df.AgeCut)\ndf.AgeCut.value_counts().sort_index()","fbbde2ac":"# replace agebands with ordinals\ndf.loc[df.Age<=16.136,'AgeCut']=1\ndf.loc[(df.Age>16.136)&(df.Age<=32.102),'AgeCut']=2\ndf.loc[(df.Age>32.102)&(df.Age<=48.068),'AgeCut']=3\ndf.loc[(df.Age>48.068)&(df.Age<=64.034),'AgeCut']=4\ndf.loc[df.Age>64.034,'AgeCut']=5","6cd13176":"df.FareCut=pd.qcut(df.Fare,5)\ndf.FareCut.value_counts().sort_index()\n\n","dcd12b9d":"df.loc[df.Fare<=7.854,'FareCut']=1\ndf.loc[(df.Fare>7.854)&(df.Fare<=10.5),'FareCut']=2\ndf.loc[(df.Fare>10.5)&(df.Fare<=21.558),'FareCut']=3\ndf.loc[(df.Fare>21.558)&(df.Fare<=41.579),'FareCut']=4\ndf.loc[df.Fare>41.579,'FareCut']=5\n#df['FareCut']","078cb545":"#label encoding Sex column\ndf.loc[df.Sex=='male','Sex']=0\ndf.loc[df.Sex=='female','Sex']=1\ndf","0ab10ff5":"df.loc[df.Sex=='male','Sex']=0\ndf.loc[df.Sex=='female','Sex']=1\ndf.loc[df.Embarked=='C','Embarked']=0\ndf.loc[df.Embarked=='S','Embarked']=1\ndf.loc[df.Embarked=='Q','Embarked']=2\ndf.Embarked.value_counts()","c4b56c76":"df.columns.values","0ade934b":"X=df[['Sex','AgeCut','SibSp','Parch','FareCut','Embarked','Pclass']]\ny=df[['Survived']]\nX.head()\n\n#y","42586ee5":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)\n","906d5229":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nLR = LogisticRegression(C=0.01,solver='lbfgs')\nLR.fit(X_train,y_train)\nLR","849f3f06":"yhat=LR.predict(X_test)\nprint(yhat[0:5],y_test[0:5])\n","bbedc271":"from sklearn.metrics import f1_score\nfrom sklearn.metrics import log_loss\n","2ffa3134":"LR_f1= f1_score(y_test, yhat, average='weighted')\nprint (\"Logistic Regression f1 score: %.2f\" % LR_f1)\n","19919808":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nLR1 = LogisticRegression(C=0.01,solver='lbfgs')\nLR1.fit(X,y)\nLR1","c4504d45":"test_filename='\/kaggle\/input\/titanic\/test.csv'\ntest = pd.read_csv(test_filename)\ntest.head()","85a15e6a":"test.isnull().sum()","55da6543":"test.loc[test.Age.isnull(),'Age']=test.groupby('Pclass').Age.transform('median')\ntest['Fare'] = df.Fare.fillna(mode(test['Fare']))\n\ntest.isnull().sum()","913818ea":"#age\ntest.loc[test.Age<=16.136,'AgeCut']=1\ntest.loc[(test.Age>16.136)&(test.Age<=32.102),'AgeCut']=2\ntest.loc[(test.Age>32.102)&(test.Age<=48.068),'AgeCut']=3\ntest.loc[(test.Age>48.068)&(test.Age<=64.034),'AgeCut']=4\ntest.loc[test.Age>64.034,'AgeCut']=5\ntest.AgeCut\n","5b12cddf":"#fare\ntest.loc[test.Fare<=7.854,'FareCut']=1\ntest.loc[(test.Fare>7.854)&(test.Fare<=10.5),'FareCut']=2\ntest.loc[(test.Fare>10.5)&(test.Fare<=21.558),'FareCut']=3\ntest.loc[(test.Fare>21.558)&(test.Fare<=41.579),'FareCut']=4\ntest.loc[test.Fare>41.579,'FareCut']=5","e1f41b55":"test.loc[test.Sex=='male','Sex']=0\ntest.loc[test.Sex=='female','Sex']=1\ntest.loc[test.Embarked=='C','Embarked']=0\ntest.loc[test.Embarked=='S','Embarked']=1\ntest.loc[test.Embarked=='Q','Embarked']=2\ntest.Embarked.value_counts()","87e6b1ad":"X_test=test[['Sex','AgeCut','SibSp','Parch','FareCut','Embarked','Pclass']]\nX.head()","cc4df964":"yhat1=LR1.predict(X_test)\nyhat1","b799a363":"outcome = pd.DataFrame(yhat1)\npass_id = pd.read_csv(test_filename)[['PassengerId']]\nresult = pd.concat([pass_id,outcome], axis=1)\nresult.columns = ['PassengerId','Survived']\nresult.to_csv('result.csv',encoding='utf-8', columns=['PassengerId','Survived'], index=False)\n","daeb9d40":"## Feature Engineering","10b0a1e8":"### all the null values have been handled","99767b92":"People embarking from port C have highest chances of survival.","d512f4b9":"more number of females survived then males","10b53467":"## 2. Exploratory Data Analysis","48976616":"Applying Logistic regression","decbddb0":"more number of people pclass=1 survived","e30a9601":"## *from the heatmap we can see that age has highest(negative) correlation with pclass. So using pclass to fill the missing values of age*","1dad84d8":"## Handling Null Values","0d416032":"APPLYING THE MODEL ON test.csv"}}