{"cell_type":{"db880281":"code","fc7cd309":"code","4f818745":"code","1447df17":"code","07063327":"code","3f47672b":"code","8c645ea2":"code","70481f97":"code","5e8826f0":"code","36498a14":"code","2284ee6e":"code","a3f51fd2":"code","b9ef2a73":"code","15c4988f":"code","5c4b91c6":"code","84ac38c5":"code","a2a0902f":"markdown","6b3f22b8":"markdown","6bab09e2":"markdown","b0c8c042":"markdown","3d0e0e8d":"markdown","95e666ee":"markdown","e0cff8d4":"markdown"},"source":{"db880281":"import os\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom keras.preprocessing import image\nfrom keras_preprocessing.image import ImageDataGenerator\nfrom keras.models import Model, load_model\nfrom keras.optimizers import Adam\nfrom keras.applications.resnet50 import ResNet50\nfrom keras import layers as KL\nfrom keras.callbacks import ReduceLROnPlateau, ModelCheckpoint","fc7cd309":"TRAIN_PATH = '\/kaggle\/input\/histopathologic-cancer-detection\/train\/'\nTRAIN_LABELS = '\/kaggle\/input\/histopathologic-cancer-detection\/train_labels.csv'\nSIZE_IMG = 96\nEPOCHS = 10\n\nmodel_path = '..\/input\/resnet-cancer-detection\/cancer_detection_resnet.h5'\nsaved_model = os.path.isfile(model_path)","4f818745":"df = pd.read_csv(TRAIN_LABELS)\n\n#remove unwanted data detected by other kaggle users\ndf = df[df['id'] != 'dd6dfed324f9fcb6f93f46f32fc800f2ec196be2']\ndf = df[df['id'] != '9369c7278ec8bcc6c880d99194de09fc2bd4efbe']\n\nprint(df['label'].value_counts(), \n      '\\n\\n', df.describe(), \n      '\\n\\n', df.head())","1447df17":"def display_random_data(dataframe, path, rows):\n\n    imgs = dataframe.sample(rows *2)\n    fig, axarr = plt.subplots(2, rows, figsize=(rows*10, rows*4))\n\n    for i in range(1,rows*2+1):\n        img_path = path + imgs.iloc[i-1]['id'] + '.tif'\n        img = image.load_img(img_path, target_size=(96, 96))\n        img = image.img_to_array(img)\/255\n        axarr[i\/\/(rows+1),i%rows].imshow(img)\n        axarr[i\/\/(rows+1),i%rows].set_title(imgs.iloc[i-1]['label'], fontsize=35)\n        axarr[i\/\/(rows+1),i%rows].axis('off')\n        \ndisplay_random_data(df,TRAIN_PATH, 5)","07063327":"#add .tif to ids in the dataframe to use flow_from_dataframe\ndf[\"id\"]=df[\"id\"].apply(lambda x : x +\".tif\")\ndf.head()","3f47672b":"if saved_model:\n    val = 0\nelse:\n    val = 0.15\n    \ndatagen= ImageDataGenerator(\n            rescale=1.\/255,\n            samplewise_std_normalization= True,\n            horizontal_flip=True,\n            vertical_flip=True,\n            rotation_range=90,\n            zoom_range=0.2, \n            width_shift_range=0.1,\n            height_shift_range=0.1,\n            shear_range=0.05,\n            channel_shift_range=0.1,\n            validation_split=val)\n\ntrain_generator=datagen.flow_from_dataframe(\n    dataframe=df,\n    directory=TRAIN_PATH,\n    x_col=\"id\",\n    y_col=\"label\",\n    subset=\"training\",\n    batch_size=64,\n    shuffle=True,\n    class_mode=\"binary\",\n    target_size=(96,96))\n\nvalid_generator=datagen.flow_from_dataframe(\n    dataframe=df,\n    directory=TRAIN_PATH,\n    x_col=\"id\",\n    y_col=\"label\",\n    subset=\"validation\",\n    batch_size=64,\n    shuffle=True,\n    class_mode=\"binary\",\n    target_size=(96,96))","8c645ea2":"def build_model():\n    input_shape = (SIZE_IMG, SIZE_IMG, 3)\n    inputs = KL.Input(input_shape)\n    resnet = ResNet50(include_top=False, input_shape=input_shape) \n    x  = KL.GlobalAveragePooling2D()(resnet(inputs))\n    x = KL.Dropout(0.5)(x)\n    outputs = KL.Dense(1, activation='sigmoid')(x)\n\n    return Model(inputs, outputs)","70481f97":"def first_training():\n    '''\n    train the model and save it if the val_acc test is better than the precedent epoch\n    '''\n    model = build_model()\n    \n    model.compile(optimizer=Adam(lr=0.0001, decay=0.00001),\n                  loss='binary_crossentropy',\n                  metrics=['accuracy'])\n\n    reduce_lr = ReduceLROnPlateau(monitor='val_acc', factor=0.5, patience=2, \n                                       verbose=1, mode='max', min_lr=0.000001)\n    \n    checkpoint = ModelCheckpoint(\"resnet_cancer_detection.h5\", monitor='val_acc', verbose=1, \n                              save_best_only=True, mode='max')\n\n    history = model.fit_generator(train_generator,\n                              steps_per_epoch=train_generator.n\/\/train_generator.batch_size, \n                              validation_data=valid_generator,\n                              validation_steps=valid_generator.n\/\/valid_generator.batch_size,\n                              epochs=EPOCHS,\n                              callbacks=[checkpoint,reduce_lr])\n    \n    return history, model","5e8826f0":"def second_training():\n    '''\n    Tune the model using all available data and a small learning rate\n    '''\n    model = load_model(model_path)\n    \n    model.compile(optimizer=Adam(lr=0.000001, decay=0.00001),\n                  loss='binary_crossentropy',\n                  metrics=['accuracy'])\n    \n    history = model.fit_generator(train_generator,\n                              steps_per_epoch=train_generator.n\/\/train_generator.batch_size, \n                              epochs=10)\n    \n    return history, model","36498a14":"if saved_model:\n    history, model = second_training()\nelse:\n    history, model = first_training()","2284ee6e":"def analyse_results(epochs):\n    metrics = ['loss', \"acc\", 'val_loss','val_acc']\n        \n    plt.style.use(\"ggplot\")\n    (fig, ax) = plt.subplots(1, 4, figsize=(30, 5))\n    fig.subplots_adjust(hspace=0.1, wspace=0.3)\n\n    for (i, l) in enumerate(metrics):\n        title = \"Loss for {}\".format(l) if l != \"loss\" else \"Total loss\"\n        ax[i].set_title(title)\n        ax[i].set_xlabel(\"Epoch #\")\n        ax[i].set_ylabel(l.split('_')[-1])\n        ax[i].plot(np.arange(0, epochs), history.history[l], label=l)\n        ax[i].legend() \n\nif EPOCHS > 1 and saved_model == False:        \n    analyse_results(EPOCHS)","a3f51fd2":"test_path = '\/kaggle\/input\/histopathologic-cancer-detection\/test\/'\ndf_test = pd.read_csv('..\/input\/histopathologic-cancer-detection\/sample_submission.csv')\ndf_test[\"id\"]=df_test[\"id\"].apply(lambda x : x +\".tif\")","b9ef2a73":"test_datagen = ImageDataGenerator(rescale=1.\/255,\n                                 samplewise_std_normalization= True)\n\ntest_generator = test_datagen.flow_from_dataframe(\n    dataframe=df_test,\n    directory=test_path,\n    x_col=\"id\",\n    y_col=None,\n    target_size=(96, 96),\n    color_mode=\"rgb\",\n    batch_size=64,\n    class_mode=None,\n    shuffle=False,\n)  ","15c4988f":"test_generator.reset()\npred=model.predict_generator(test_generator,verbose=1).ravel()","5c4b91c6":"results = dict(zip(test_generator.filenames, pred))\n\nlabel = []\nfor i in range(len(df_test[\"id\"])):\n    label.append(results[df_test[\"id\"][i]])\n    \ndf_test[\"id\"]=df_test[\"id\"].apply(lambda x : x[:-4])","84ac38c5":"submission=pd.DataFrame({\"id\":df_test[\"id\"],\n                      \"label\":label})\nsubmission.to_csv(\"submission.csv\",index=False)\nsubmission.head()","a2a0902f":"# **CSV submission**\nPredictions of the test generator are not in the right order so it needs to be rearranged it in the label list before to be passed it to the submission data frame.","6b3f22b8":"# **Data processing**","6bab09e2":"Test generator doesn't need to be shuffled and no class_mode are passed as an argument.","b0c8c042":"# **Note**\nIn the notebook, the model is first trained with a validation subset so the best model can be saved. Once the model is saved and the notebook is restarted, the model will be retrained with a small learning rate on all available data.","3d0e0e8d":"# **Init Keras data generator**","95e666ee":"# **Build model**","e0cff8d4":"# **Predictions**"}}