{"cell_type":{"cc1680ba":"code","b6f11735":"code","55dd54ac":"code","3c315b1d":"code","4cce218b":"code","770825fc":"code","430cf88d":"code","aa769048":"code","0b1aa26e":"code","afbe657a":"code","e0309f51":"code","77df2e13":"code","7979e86b":"code","6007494f":"code","8f8f235a":"code","1a48be5e":"code","66b94ea1":"code","e012a6ba":"code","fc2557f8":"code","ee8eec78":"code","3d5fe65f":"code","12981231":"code","9159c434":"code","799ad06a":"markdown","cfeed686":"markdown"},"source":{"cc1680ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b6f11735":"import cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\nfrom tensorflow.keras.utils import to_categorical, plot_model\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras import layers","55dd54ac":"pd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)","3c315b1d":"train_path = '..\/input\/digit-recognizer\/train.csv'\ntest_path = '..\/input\/digit-recognizer\/test.csv'\nsubmission_path = '..\/input\/digit-recognizer\/sample_submission.csv'","4cce218b":"train = pd.read_csv(train_path)\ntest = pd.read_csv(test_path)\nsubmission = pd.read_csv(submission_path)","770825fc":"x_train = train.drop(['label'], axis=1)\nY_train = train['label']","430cf88d":"#normalizing\nX_train = x_train\/255.0\nX_test = test\/255.0","aa769048":"x_train, x_test, y_train, y_test = train_test_split(X_train, Y_train, test_size=0.2, random_state=42)","0b1aa26e":"x_train = x_train.values.reshape(-1, 28, 28, 1)\nx_test = x_test.values.reshape(-1, 28, 28, 1)","afbe657a":"y_train = to_categorical(y_train, num_classes=10)","e0309f51":"#tensorflow sequential model\nmodel = Sequential()\nmodel.add(layers.Conv2D(filters=32, kernel_size=(5,5), padding='same', input_shape=(28,28,1)))\nmodel.add(layers.Activation('relu'))\nmodel.add(layers.Conv2D(filters=32, kernel_size=(5,5), padding='same'))\nmodel.add(layers.Activation('relu'))\nmodel.add(layers.MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(layers.Conv2D(filters=64, kernel_size=(5,5), padding='same'))\nmodel.add(layers.Activation('relu'))\nmodel.add(layers.Conv2D(filters=64, kernel_size=(5,5), padding='same'))\nmodel.add(layers.Activation('relu'))\nmodel.add(layers.MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(layers.Dropout(0.25))\nmodel.add(layers.Flatten())\n\nmodel.add(layers.Dense(units=256, activation='relu'))\nmodel.add(layers.Dense(units=10, activation='softmax'))\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","77df2e13":"model.summary()","7979e86b":"plot_model(model, to_file='model_chart.png', show_shapes=True)","6007494f":"#data augmentation\n\ndatagen = ImageDataGenerator(featurewise_center=False,  # set input mean to 0 over the dataset\n                    samplewise_center=False,  # set each sample mean to 0\n                    featurewise_std_normalization=False,  # divide inputs by std of the dataset\n                    samplewise_std_normalization=False,  # divide each input by its std\n                    zca_whitening=False,  # apply ZCA whitening\n                    rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n                    zoom_range = 0.1, # Randomly zoom image \n                    width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n                    height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n                    horizontal_flip=False,  # randomly flip images\n                    vertical_flip=False)\n\ndatagen.fit(x_train)","8f8f235a":"#fitting\nhist = model.fit_generator(datagen.flow(x_train, y_train, batch_size=64),\n                           epochs=7,\n                           validation_data=(x_test, y_test),\n                           steps_per_epoch=len(x_train)\/\/64)","1a48be5e":"y_pred = model.predict_classes(x_test)","66b94ea1":"y_test = y_test.to_list()\ny_test = np.array(y_test)","e012a6ba":"print('accuracy score: ',accuracy_score(y_test, y_pred))","fc2557f8":"print('confusion matrix: ')\nprint(confusion_matrix(y_test, y_pred))","ee8eec78":"X_test = X_test.values.reshape(-1, 28, 28, 1)\ny_submission_pred = model.predict_classes(X_test)","3d5fe65f":"y_preds = pd.Series(y_submission_pred)\nimage_id = pd.Series(np.arange(1,28001))","12981231":"data = {'ImageId':image_id,\n        'Label':y_preds}\n\nfinal = pd.DataFrame(data)","9159c434":"final.to_csv('submission.csv', index=False)","799ad06a":"**TESTING**","cfeed686":"**GENERATING SUBMISSION.CSV**"}}