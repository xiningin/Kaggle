{"cell_type":{"0c14b450":"code","a629b8d5":"code","cddc06e5":"code","cfa0d749":"code","8be80154":"code","52ef3ab0":"code","6bd8ec98":"code","10e5f132":"code","8683cce5":"code","fa9984f0":"code","512d6810":"code","2e4f4e8e":"code","22fb8ec2":"code","ab16bb94":"code","ae9a8585":"code","969ef2c5":"code","56169628":"code","cfd0ac66":"code","c272d568":"code","2f84eca5":"code","377ca19b":"code","66497379":"code","094ff6e2":"code","912c2e5a":"code","4fbc8ab2":"code","1fa54d7e":"code","c4592f22":"code","b443be3c":"code","7989e6c8":"code","cd0b011c":"code","0e5e38aa":"code","023dd30c":"code","235232c0":"code","d975f414":"code","4e5f2a5a":"code","e76392c1":"code","71ce1829":"code","35b7dc5f":"code","9a308c53":"code","6856044c":"markdown","fdc53a8b":"markdown","a30c9a67":"markdown","fe14b75e":"markdown","956c7689":"markdown","ea503732":"markdown","5a048c0d":"markdown","bd68bf27":"markdown","dd292edf":"markdown","7484540e":"markdown","ebe8ce06":"markdown","1da2c4b1":"markdown","34473609":"markdown","03a1167a":"markdown","77a68ec4":"markdown","b7328cb8":"markdown","87ddfd83":"markdown","5dd962b9":"markdown"},"source":{"0c14b450":"%%HTML\n<div class='tableauPlaceholder' id='viz1638280355335' style='position: relative'><noscript><a href='#'><img alt='Dashboard 1 ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;ca&#47;california_housing_16351188075760&#47;Dashboard1&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='california_housing_16351188075760&#47;Dashboard1' \/><param name='tabs' value='no' \/><param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;ca&#47;california_housing_16351188075760&#47;Dashboard1&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><param name='language' value='pt-BR' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1638280355335');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.width='1000px';vizElement.style.height='827px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.width='1000px';vizElement.style.height='827px';} else { vizElement.style.width='100%';vizElement.style.height='1677px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","a629b8d5":"#basics\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n#visualizing missing values\nimport missingno as msno\n\n#machine learning\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","cddc06e5":"df = pd.read_csv(\"..\/input\/california-housing-prices\/housing.csv\")\ndf","cfa0d749":"#basic info\ndf.info()","8be80154":"#check missing values\nmsno.matrix(df)","52ef3ab0":"#percentage of missing values\ndf.isnull().sum()\/df.shape[0]","6bd8ec98":"#correlation matrix to get initial idea of which columns are more correlated\nplt.figure(figsize=(6,6))\nsns.heatmap(df.corr(), cmap='coolwarm', annot=True)\nplt.xticks(rotation=80)\nplt.show()","10e5f132":"#histograms for numerical columns\ndf.hist(bins=50, figsize=(10,10))\nplt.show()","8683cce5":"#the one we want to predict: median_house_value\nplt.figure(figsize=(8,3))\nsns.histplot(x='median_house_value',data=df,kde=True,color='purple')\nplt.show()","fa9984f0":"#housing_median_age also has a weird peak\nplt.figure(figsize=(8,3))\nsns.histplot(x='housing_median_age', data=df, kde=True, color='purple')\nplt.show()","512d6810":"#median_house_value peak examination\nfor bins in [10,25,50,75,100]:\n  plt.figure(figsize=(6,2))\n  sns.histplot(x='median_house_value', data=df, kde=True, color='blue', bins=bins)\n  plt.title('n bins = {}'.format(bins))\n  plt.show()","2e4f4e8e":"#housing_median_age peak examination\nfor bins in [10,25,50,75,100]:\n  plt.figure(figsize=(6,2))\n  sns.histplot(x='housing_median_age', data=df, kde=True, color='blue', bins=bins)\n  plt.title('n bins = {}'.format(bins))\n  plt.show()","22fb8ec2":"#scatter with marginal point (jointplot)\nplt.figure(figsize=(8,3))\nsns.jointplot(x=\"median_house_value\", y=\"housing_median_age\", data=df, kind='hex')\nplt.show()","ab16bb94":"#check median_house_value most common values\ndf.median_house_value.value_counts().head(5)","ae9a8585":"#check housing_median_age most common values\ndf.housing_median_age.value_counts().head(5)","969ef2c5":"df.ocean_proximity.value_counts()","56169628":"#histogram of columns for ocean_proximity\ndf['ocean_proximity'].hist(bins=50,figsize=(6,6))\nplt.title('ocean_proximity')\nplt.show()","cfd0ac66":"df.groupby('ocean_proximity').mean()","c272d568":"df.groupby('ocean_proximity').median()","2f84eca5":"df.groupby('ocean_proximity').std()","377ca19b":"#ocean_proximity by median_house_value\nplt.figure(figsize=(6,6))\nsns.boxplot(data=df, x=\"ocean_proximity\", y=\"median_house_value\")","66497379":"#ocean_proximity by median_house_value\nplt.figure(figsize=(6,6))\nsns.stripplot(data=df,x='ocean_proximity',y='median_house_value',jitter=0.4,alpha=0.1)","094ff6e2":"#one hot encoding for better visualization\none_hot = pd.get_dummies(df.ocean_proximity)\ndf = df.drop('ocean_proximity',axis=1)\ndf = df.join(one_hot)\ndf","912c2e5a":"#see median_house_value distribution by location\nfig, ax = plt.subplots(1,5,figsize=(20,10))\ni=0\nfor loc in ['INLAND', '<1H OCEAN', 'NEAR BAY', 'NEAR OCEAN', 'ISLAND']:\n    ax[i].hist(df[df[loc]==1.0]['median_house_value'],bins=50,alpha=1)\n    ax[i].set_title(loc)\n    ax[i].set_xlim([0,500000])\n    ax[i].set_ylim([0,700])\n    if i==4:\n        ax[i].set_ylim([0,3])\n    i+=1\nplt.show()","4fbc8ab2":"#pearson correlation matrix\nfrom scipy import stats\ndf_corr = df.corr(method='pearson')\nplt.figure(figsize=(12,6))\nsns.heatmap(df_corr,cmap='coolwarm',annot=True)\nplt.xticks(rotation=75)\nplt.title('pearson correlation')\nplt.show()","1fa54d7e":"#spearman correlation matrix\ndf_corr = df.corr(method='spearman')\nplt.figure(figsize=(12,6))\nsns.heatmap(df_corr,cmap='coolwarm',annot=True)\nplt.title('spearman correlation')\nplt.show()","c4592f22":"#we see a pattern on median_house_value distribution by location\n#we join this 5 categories in a new NEAR WATER category\n\ndef f(row):\n    if row['INLAND']:\n      return 0\n    if row['<1H OCEAN']:\n      return 1\n    if row['NEAR BAY'] or row[ 'NEAR OCEAN']:\n      return 2\n    else:\n        return 0\ndf['water_proximity'] = df.apply(f,axis=1)\ndf = df.drop(['<1H OCEAN', 'INLAND', 'NEAR BAY', 'NEAR OCEAN', 'ISLAND'],axis=1)","b443be3c":"df","7989e6c8":"#correlation matrix\ndf_corr = df.corr()\nplt.figure(figsize=(12,6))\nsns.heatmap(df_corr,cmap='coolwarm',annot=True)\nplt.show()","cd0b011c":"#sorted correlation values\ndf_corr[\"median_house_value\"].sort_values(ascending=False)","0e5e38aa":"#histogram of columns that seem more important\natributes= [ 'housing_median_age', 'total_rooms','water_proximity','median_income','median_house_value']\nmatr = pd.plotting.scatter_matrix(df[atributes],figsize=(10,6),alpha=0.3)    ","023dd30c":"#relation with ocean_proximity\natributes= ['total_rooms','housing_median_age','median_income','median_house_value']\nfor atribute in atributes:\n    plt.figure(figsize=(5,5))\n    sns.boxplot(data=df, x='water_proximity', y=atribute)\n    plt.show()","235232c0":"#relation with median_house_value\natributes= ['median_income','total_rooms','housing_median_age','water_proximity']\nfor atribute in atributes:\n    df.plot(kind='scatter',x='median_house_value',y=atribute,alpha=0.25)","d975f414":"#visualizing geographical data with radius of circle s proportional to population and color c represents price\ndf.plot(kind='scatter',x='longitude',y='latitude',alpha=0.5,figsize=(10,10),\n             s=df['population']\/100,label='population',\n             c='median_house_value',cmap=plt.get_cmap('jet'),colorbar=True)","4e5f2a5a":"#fill total_bedrooms with median\ndf.fillna(df.median(),inplace=True)","e76392c1":"parameter_models = [\n    {'C': 98444.24602802457, 'gamma': 0.33196206472681455, 'kernel': 'rbf'},\n    {'C' : 96600.0, 'gamma' : 0.8560715796670523, 'kernel':'rbf'},\n    {'C': 99448.59278046171, 'kernel': 'rbf', 'gamma': 0.34392791061008}\n]","71ce1829":"#split in train and test\nX_train, X_test, y_train, y_test = train_test_split(df.drop('median_house_value', axis=1),df.median_house_value, test_size=0.25)","35b7dc5f":"#apply standard scaler\nscaler = StandardScaler().fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","9a308c53":"for params in parameter_models:\n  print(params)\n  model = SVR(**params)\n  model.fit(X_train, y_train)\n  acc_train = model.score(X_train, y_train)\n  acc_test = model.score(X_test, y_test)\n  print(\"Accuracy Train: %s\" % acc_train)\n  print(\"Accuracy Test: %s\" % acc_test)\n  print('\\n')","6856044c":"# 3 - Feature Engineering","fdc53a8b":"Plotting median_house_value and housing_median_age with a jointplot we see that they're not really very correlated","a30c9a67":"## To end feature engineering: dealing with total_bedrooms\n- Since only a few values from total_bedrooms have missing values and it's very correlated with other attributes, we simply replace null values by the median\n","fe14b75e":"Here I noticed that usind df.hist or sns.histplot gave different aspects at the end of housing_median_age (probalby due to bin number), so it's interesting to look at it with different bins and into the data itself.","956c7689":"## About data: we must be aware of this 2 points to fix them\n- Only ocean_proximity is object, the rest is float\n- Missing values of total_bedrooms\n","ea503732":"## Analyse features that seem more important\n- The only feature where we can see a direct relation is median_income and median_house_value\n- But, if we look at the distribution of the values of each column, we can see more relationships","5a048c0d":"## Create Model: Support Vector Machine\nAfter doing hyperparameter optimization with different libraries as shown in [this notebook](https:\/\/www.kaggle.com\/pavansanagapati\/automated-hyperparameter-tuning), I obtained the following parameters that fit well:\n- Hyperopt: {'C': 98444.24602802457, 'gamma': 0.33196206472681455, 'kernel': 1}\n- TPOTClassifier: {'C' : 96600.0, 'gamma' : 0.8560715796670523, 'kernel':'rbf'}\n- Optuna: {'C': 99448.59278046171, 'kernel': 'rbf', 'gamma': 0.34392791061008}\n\nFor more info, check  out the complete project on my [Github](). Here I tested this combinations of hyperparameters and select the best one. The Optuna method was better.","bd68bf27":"## See distribution of values: numerical\n\n- There's a weird peak on the end of housing_median_age and median_house_values","dd292edf":"## See relation between columns and correlation matrix: ocean_prox joined\n\n- Joining ocean_prox according as described previously.\n- Proximity to the ocean\/bay is correlated positively to median_house_value, house_median_age and median_income\n","7484540e":"# 2 - Exploratory data analysis","ebe8ce06":"## See distribution of values: categorical\n\n- There are too few ISLAND items\n- Houses INLAND seem to be cheaper than the rest\n- Important: ocean_proximity values seem to have two similar types distribution: one for <1H OCEAN and INLAND, other for NEAR BAY and NEAR OCEAN. However, <1H OCEAN an INLAND aren't similar enogh to join (as seen on mean, median and std here), while NEAR BAY and NEAR OCEAN are similar enough.\n- Therefore, it seems valid to create an ordered categorical column with 1 ad INLAND, 2 as <1H OCEAN and 3 as NEAR BAY aor NEAR OCEAN.","1da2c4b1":"# 1 - Loading libraries and data","34473609":"Also check out a dashboard I made on tableau:\n\nhttps:\/\/public.tableau.com\/app\/profile\/victor.foscarini.almeida3130\/viz\/california_housing_16351188075760\/Dashboard1","03a1167a":"Checking values on dataframe","77a68ec4":"## Location: latitude and longitude\n- Looks like the map of california\n- There are clearly more expensive houses close to the ocean\n- Metropolitan regions of San Francisco and Los Angeles are where most expensive houses are located.\n- Can't think of a way to improve or make a better analysis of the meaning of locations, maybe the ML algorithm deal with it\n- I can't find a trivial meaning of having high\/small latitude and longitude, but they may help the algorithm considering that some regions are clearly more expensive, but it's not a linear relationship, it would be a more complicated function (a tree-based algorithm or support vector machine, for example, could do the job by selection a range of latitude and longitude where houses are more likely to be expensive)","b7328cb8":"I found that Optuna gave the best hyperparameters after optimizing the Support Vector Machine model as seen by the accuracy in the test data.","87ddfd83":"## See relation between columns and correlation matrix: ocean_prox divided\n\n- total_bedrooms is extremely correlated positively with households (0.98)\n- total_rooms, total_bedrooms, population and households are very correlated + with each other and housing_median_age has some - correlation with them\n- maybe it'd be a good idea to delete total_bedrooms then or simply fill with median values\n- median_income is the only one very correlated (+) with median_house_value\n- Proximity to the ocean\/bay is related to median_house_price, as expected. Note that, as seen before, categoricals are imbalanced\n- obs: Pearson correlation is default","5dd962b9":"# 4 - Machine Learning"}}