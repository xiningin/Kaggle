{"cell_type":{"1b04a276":"code","0ca74d0c":"code","50f1ef96":"code","d8080097":"code","7d60d713":"code","53a7e27f":"code","1f6795b6":"code","c8115c13":"code","3ce6db17":"code","c16f1891":"code","17947205":"code","7ba441eb":"code","faa5c5c9":"code","5e30062d":"code","755cd25d":"code","ba7b04ec":"code","71a43768":"code","0641385d":"code","2606c516":"code","2736bda6":"code","393e72dd":"code","e957b6f4":"code","b1102afd":"code","053c067a":"code","cae39d73":"code","2a922f7e":"code","a17f86e8":"code","e2df315e":"code","5d23706d":"code","45377bae":"code","cf1f3e62":"code","05b21fa3":"code","66626667":"code","38ccf9ba":"code","4bbb69ce":"code","2266f028":"code","36eba76b":"code","872ecb3d":"code","ddf59ed2":"code","9f3badfb":"code","7f929de4":"code","5eb4c69f":"code","3ae563d3":"code","bf45bc91":"code","bc66c07c":"code","f1de63ff":"code","ac79d12a":"code","5c101c82":"code","5db1d91a":"code","4b7c274e":"code","902f82c9":"code","c4b1be60":"code","0be70133":"code","7c77d247":"code","85c7b5d6":"code","8e731d94":"markdown","f47b9b1e":"markdown","2bccd40e":"markdown","ab9bf290":"markdown","f6af0228":"markdown","f398590d":"markdown","cd7e9e68":"markdown","d33fad42":"markdown"},"source":{"1b04a276":"import pandas as pd\nimport numpy as np","0ca74d0c":"trainRaw = pd.read_csv(\"..\/input\/train_V2.csv\")","50f1ef96":"testRaw = pd.read_csv(\"..\/input\/test_V2.csv\")","d8080097":"trainRaw[trainRaw['winPlacePerc'].isnull()]","7d60d713":"train = trainRaw.drop(2744604, axis=0)","53a7e27f":"train.shape","1f6795b6":"train['headshotRate'] = train['headshotKills'] \/ train['kills']\ntrain['headshotRate'] = train['headshotRate'].fillna(0)","c8115c13":"groupMax = train[['groupId', 'assists', 'walkDistance', 'kills', 'DBNOs']].groupby('groupId').max()\ngroupMin = train[['groupId', 'assists', 'walkDistance', 'kills', 'DBNOs']].groupby('groupId').min()","3ce6db17":"groupMax = groupMax.rename(columns = {'assists': 'assistsMax', 'walkDistance': 'walkDistanceMax', 'kills': 'killsMax', 'DBNOs': 'DBNOsMax'})\ngroupMin = groupMin.rename(columns = {'assists': 'assistsMin', 'walkDistance': 'walkDistanceMin', 'kills': 'killsMin', 'DBNOs': 'DBNOsMin'})","c16f1891":"groupMax.head()","17947205":"groupMin.head()","7ba441eb":"dataAll = pd.merge(train, groupMax, on = 'groupId')\ndataAll = pd.merge(dataAll, groupMin, on = 'groupId')","faa5c5c9":"dataAll.shape","5e30062d":"dataAll.head()","755cd25d":"dataAll.tail()","ba7b04ec":"# matchRanks = train[['matchId', 'assists', 'boosts', 'damageDealt', 'heals', 'killStreaks', 'longestKill', 'walkDistance', \\\n#      'swimDistance', 'rideDistance']].groupby('matchId').rank(ascending = False)","71a43768":"# matchRanks.head()","0641385d":"# matchRanks = matchRanks.rename(columns = {'assists': 'assistsPlace', 'boosts': 'boostsPlace', \n#                                          'damageDealt': 'damageDealtPlace', \n#                                          'heals': 'heals', 'killStreaks': 'killStreaksPlace', \n#                                          'longestKill': 'longestKillPlace', 'walkDistance': 'walkDistancePlace', \n#                                          'swimDistance': 'swimDistancePlace', 'rideDistance': 'rideDistancePlace'})","2606c516":"# matchRanks['matchId'] = train['matchId']","2736bda6":"# matchRanks.head()","393e72dd":"# matchRanks.tail()","e957b6f4":"# matchRanks.shape","b1102afd":"# dataAll = pd.concat([dataAll.reset_index(drop=True),matchRanks.reset_index(drop=True)], axis=1)","053c067a":"dataAll.shape","cae39d73":"dataAll.tail()","2a922f7e":"dataAll.head()","a17f86e8":"features = pd.get_dummies(dataAll.drop(['Id', 'groupId', 'matchId', 'winPlacePerc'], axis = 1))\nlabels = np.array(dataAll['winPlacePerc'])","e2df315e":"labels[np.isnan(labels)]","5d23706d":"features.head()","45377bae":"print('features', features.shape, 'labels', labels.shape)","cf1f3e62":"from sklearn.ensemble import RandomForestRegressor","05b21fa3":"RFmodel = RandomForestRegressor(n_estimators=80, random_state=1937, n_jobs=3, min_samples_leaf=3, max_features='sqrt')","66626667":"print('start training')","38ccf9ba":"RFmodel.fit(features, labels)","4bbb69ce":"test = testRaw.copy()","2266f028":"test['headshotRate'] = test['headshotKills'] \/ test['kills']\ntest['headshotRate'] = test['headshotRate'].fillna(0)","36eba76b":"groupMaxTest = test[['groupId', 'assists', 'walkDistance', 'kills', 'DBNOs']].groupby('groupId').max()\ngroupMinTest = test[['groupId', 'assists', 'walkDistance', 'kills', 'DBNOs']].groupby('groupId').min()","872ecb3d":"groupMaxTest = groupMaxTest.rename(columns = {'assists': 'assistsMax', 'walkDistance': 'walkDistanceMax', 'kills': 'killsMax', 'DBNOs': 'DBNOsMax'})\ngroupMinTest = groupMinTest.rename(columns = {'assists': 'assistsMin', 'walkDistance': 'walkDistanceMin', 'kills': 'killsMin', 'DBNOs': 'DBNOsMin'})","ddf59ed2":"test = pd.merge(test, groupMaxTest, on = 'groupId')","9f3badfb":"test = pd.merge(test, groupMinTest, on = 'groupId')","7f929de4":"# matchRanksTest = test[['matchId', 'assists', 'boosts', 'damageDealt', 'heals', 'killStreaks', 'longestKill', 'walkDistance', \\\n#      'swimDistance', 'rideDistance']].groupby('matchId').rank()","5eb4c69f":"# matchRanksTest = matchRanksTest.rename(columns = {'assists': 'assistsPlace', 'boosts': 'boostsPlace', \n#                                           'damageDealt': 'damageDealtPlace', \n#                                           'heals': 'heals', 'killStreaks': 'killStreaksPlace', \n#                                           'longestKill': 'longestKillPlace', 'walkDistance': 'walkDistancePlace', \n#                                           'swimDistance': 'swimDistancePlace', 'rideDistance': 'rideDistancePlace'})","3ae563d3":"# test = pd.concat([test.reset_index(drop=True),matchRanksTest.reset_index(drop=True)], axis=1)","bf45bc91":"test.head()","bc66c07c":"features.shape","f1de63ff":"test = test.drop(['Id', 'groupId', 'matchId'],axis=1)","ac79d12a":"test = pd.get_dummies(test)","5c101c82":"test.shape","5db1d91a":"features.head()","4b7c274e":"test.head()","902f82c9":"prediction = RFmodel.predict(test)","c4b1be60":"submission = pd.DataFrame({\"Id\":testRaw['Id'], \"winPlacePerc\":prediction})","0be70133":"submission.head()","7c77d247":"submission.tail()","85c7b5d6":"submission.to_csv(\"submission.csv\", index=False)","8e731d94":"Drop the NaN observation","f47b9b1e":"This notebook is going to use Random Forest Algorithm","2bccd40e":"Train Model\n\nTODO: Use cross-validation to play around and tweak parameters","ab9bf290":"Prepare test data","f6af0228":"By the inspiration from killPlace, we think it might be helpful to get ranks in a match for more features.","f398590d":"![](http:\/\/)Headshot Rate might be an important feature. Idea brought from [this kernel](https:\/\/www.kaggle.com\/rejasupotaro\/cheaters-and-zombies).","cd7e9e68":"Submission !!!","d33fad42":"If there are more than one people in the group, then all people's rank will depend on the last died one. We find maximum and minimum values for 'assists', 'walkDistance', 'kills', 'DBNOs' columns then put them back to our data."}}