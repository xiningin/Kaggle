{"cell_type":{"e7a705ed":"code","88050b8d":"code","5af5171b":"code","eff0b1b0":"code","0b9b4784":"code","5824c7ef":"code","223e86c3":"code","727d14b0":"code","b8ff5f71":"code","4fe27ef8":"code","be366283":"code","9442f6eb":"code","2e2592e2":"code","977d45f7":"code","c60d606d":"code","808780cf":"code","63671718":"code","7e7fe757":"code","a4b8dd1d":"code","00a60e49":"code","edf9c370":"code","1c7226fa":"code","48b5f283":"code","993cd685":"code","f7ddb22b":"code","f9769da3":"markdown"},"source":{"e7a705ed":"import numpy as np\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.utils import np_utils\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import Pipeline\nfrom keras import backend as K\nimport tensorflow as tf\nfrom category_encoders.binary import BinaryEncoder\nimport category_encoders as ce\nimport os\n# adapted from https:\/\/machinelearningmastery.com\/multi-class-classification-tutorial-keras-deep-learning-library\/","88050b8d":"K.tensorflow_backend._get_available_gpus()","5af5171b":"config = tf.ConfigProto( device_count = {'GPU': 1 , 'CPU': 8} ) \nsess = tf.Session(config=config) \nK.set_session(sess)","eff0b1b0":"# fix random seed for reproducibility\nseed = 42\nnp.random.seed(seed)","0b9b4784":"kfold = KFold(n_splits=10, shuffle=True, random_state=seed)","5824c7ef":"print(os.listdir(\"..\/input\"))","223e86c3":"url = \"..\/input\/train_features.csv\"\ndf = pd.read_csv(url, parse_dates=['date_recorded'],index_col='id' )","727d14b0":"df['timestamp'] = df.date_recorded.apply(lambda d: d.timestamp()\/ 10 ** 9)\ndf_ = df.drop(['date_recorded', 'region_code', 'district_code', 'region'], inplace = False, axis=1)\n# df_ = df.drop(['date_recorded', 'district_code', 'region'], inplace = False, axis=1)\ndf_['region_district'] = df.apply(lambda row: f'{row.region}_{row.district_code}' , axis=1)\n# df_ = df_.apply(lambda x: x.astype(str).str.lower())\ntrain_input_columns = list(df_.columns)\ntrain_numeric_columns = df_.select_dtypes(exclude=['object']).columns\ndf_.head()","b8ff5f71":"dc = 'status_group'","4fe27ef8":"yurl = '..\/input\/train_labels.csv'\ndfy = pd.read_csv(yurl, index_col='id' )\ndfy.shape\ny = dfy[dc]","be366283":"encoder = LabelEncoder()\nencoder.fit(y)\nencoded_Y = encoder.transform(y)\n# convert integers to dummy variables (i.e. one hot encoded)\ndummy_y = np_utils.to_categorical(encoded_Y)","9442f6eb":"oc = df_.select_dtypes(include=['object']).columns\noc","2e2592e2":"hot = []\nbinary = []\nfor o in oc:\n    if df_[o].unique().shape[0] > 127:\n        print(df_[o].unique().shape[0], o)\n        binary.append(o)\n    else:\n        hot.append(o)","977d45f7":"test_url = \"..\/input\/test_features.csv\"\ndf = pd.read_csv(test_url, parse_dates=['date_recorded'],index_col='id' )\ndf['timestamp'] = df.date_recorded.apply(lambda d: d.timestamp()\/ 10 ** 9)\ndft = df.drop(['date_recorded', 'region_code', 'district_code', 'region'], inplace = False, axis=1)\n#dft = df.drop(['date_recorded', 'district_code', 'region'], inplace = False, axis=1)\ndft['region_district'] = df.apply(lambda row: f'{row.region}_{row.district_code}' , axis=1)\n# dft = dft.apply(lambda x: x.astype(str).str.lower())\ntest_input_columns = list(dft.columns)\n# dft[dc] = ['fuctional'] * dft.shape[0]\ndft.head()","c60d606d":"test__ = list(dft.columns)\nfor c in train_input_columns:\n    if c not in test_input_columns:\n        print(f'{c} not in test')\n    else:\n        test__.remove(c)\nprint(test__)\n        ","808780cf":"encoders = Pipeline([\n#                 ('vect', tfidf),\n                ('binary', BinaryEncoder(cols=binary)),\n                ('onehot', ce.OneHotEncoder(use_cat_names=True,cols=hot))\n            ])\ndf_l = df_.shape[0]\nboth = pd.concat([df_,dft])\nprint(df_l)\nboth.head()","63671718":"both_  = encoders.fit_transform(both)","7e7fe757":"df__  = both_.iloc[0:df_l]\ndft_ = both_.iloc[df_l:]\ndf_l, both_.shape, df__.shape, dft_.shape","a4b8dd1d":"def pump_baseline_model():\n\t# create model\n\tmodel = Sequential()\n\tmodel.add(Dense(8, input_dim=404, activation='relu'))\n\tmodel.add(Dense(3, activation='softmax'))\n\t# Compile model\n\tmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\treturn model","00a60e49":"estimator = KerasClassifier(build_fn=pump_baseline_model, epochs=6000, batch_size=5, verbose=0)","edf9c370":"# results = cross_val_score(estimator, df__, dummy_y, cv=kfold)\n# print(\"Baseline: %.2f%% (%.2f%%)\" % (results.mean()*100, results.std()*100))","1c7226fa":"model = pump_baseline_model()\nmodel.fit(x=df__, y=dummy_y,epochs=6) # tried 6000, result were disappionting 77% train 75% test ","48b5f283":"p = model.predict(dft_, batch_size=None, verbose=0, steps=None)\np","993cd685":"p.shape","f7ddb22b":"with open('testxgb.keras.csv', 'w') as f:\n    f.write('id,status_group\\n')\n    for f_,i in zip(p, dft_.index):\n        index = np.argmax(f_)\n        d = 'non functional' if index == 2 else ('functional' if index == 0 else 'functional needs repair')\n        f.write(f\"{i},{d}\")\n        f.write('\\n')","f9769da3":"Your submission scored 0.75915"}}