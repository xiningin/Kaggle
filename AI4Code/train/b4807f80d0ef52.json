{"cell_type":{"bd9bd17c":"code","7719f2c3":"code","7dc8b425":"code","8c2187af":"code","95f28b3c":"code","3304896d":"code","337e1adc":"code","bc64241e":"code","0ca54b2d":"code","5e56e2d0":"code","ed61f27d":"code","99208c20":"code","1f064e8c":"code","211cf869":"code","c096ecfe":"code","87098a0b":"code","a758a43d":"code","84bb6dbc":"code","a3cf3f01":"code","4c3c9ce0":"code","45266351":"markdown","9158a6bd":"markdown","e67c3b25":"markdown","1221bcde":"markdown","22bdbc9f":"markdown"},"source":{"bd9bd17c":"!pip install nb_black -q","7719f2c3":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport math","7dc8b425":"%load_ext nb_black","8c2187af":"from plotly import figure_factory as ff, graph_objects as go\nfrom sklearn.metrics import (\n    log_loss,\n    accuracy_score,\n    confusion_matrix,\n    f1_score,\n    precision_score,\n    recall_score,\n)\n\n\ndef metrics(y_true, y_pred, y_pred_class):\n    ac = accuracy_score(y_true, y_pred)\n    ll = log_loss(y_true, y_pred_class)\n    f1 = f1_score(y_true, y_pred, zero_division=1)\n    ps = precision_score(y_true, y_pred)\n    mc = confusion_matrix(y_true, y_pred)\n    rc = recall_score(y_true, y_pred)\n\n    header = [\"Metric\", \"Accuracy\", \"Loss(log)\", \"F1\", \"Precision\", \"Recall\"]\n    score = [\n        \"Score\",\n        round(ac, 3),\n        round(ll, 3),\n        round(f1, 3),\n        round(ps, 3),\n        round(rc, 3),\n    ]\n\n    x = [\"Real 0\", \"Real 1\"]\n    y = [\"Predict 0\", \"Predict 1\"]\n\n    fig = ff.create_table([header, score], height_constant=20)\n    fig.show()\n\n    fig = ff.create_annotated_heatmap(z=mc, x=x, y=y, colorscale=\"Blues\")\n    fig.show()","95f28b3c":"data = pd.read_csv(\"..\/input\/churn-dataset\/churn_data.csv\")\ndata.shape","3304896d":"data.isna().sum()","337e1adc":"data.drop([\"rewards_earned\", \"credit_score\", \"zodiac_sign\"], axis=1, inplace=True)\ndata.dropna(inplace=True)","bc64241e":"data.isna().sum()","0ca54b2d":"def plot_hists(df, labels):\n    row = 1\n    col = 1\n    num_graphs = len(labels)\n    rows = math.ceil(num_graphs \/ 2)\n    fig = make_subplots(rows=rows, cols=2, subplot_titles=labels)\n\n    index = []\n    for row in range(1, rows + 1):\n        for col in range(1, 3):\n            index.append({\"row\": row, \"col\": col})\n\n    graphs = []\n    pos_g = 0\n    for label in labels:\n        local_data = df[label].value_counts()\n        x = list(local_data.index)\n        y = list(local_data)\n        fig.add_trace(\n            go.Histogram(x=df[label]), row=index[pos_g][\"row\"], col=index[pos_g][\"col\"],\n        )\n        pos_g = pos_g + 1\n\n    fig.update_layout(\n        autosize=False,\n        height=300 * rows,\n        margin=dict(l=50, r=50, b=100, t=100, pad=4),\n        #         paper_bgcolor=\"LightSteelBlue\",\n    )\n\n    fig.show()","5e56e2d0":"col = list(data.columns)\ncol.remove(\"user\")","ed61f27d":"plot_hists(data, col[:9])","99208c20":"plot_hists(data, col[9:18])","1f064e8c":"plot_hists(data, col[18:])","211cf869":"with sns.axes_style(\"white\"):\n    table = data.corr().round(2)\n    mask = np.zeros_like(table)\n    mask[np.triu_indices_from(mask)] = True\n    plt.figure(figsize=(20, 20))\n    sns.heatmap(\n        table,\n        cmap=\"Reds\",\n        mask=mask,\n        center=0,\n        linewidths=0.5,\n        annot=True,\n        annot_kws={\"size\": 10},\n    )","c096ecfe":"def to_bin(serie):\n    return [0 if value == 0 else 1 for value in serie]\n\n\nto_bin_cols = [\n    \"deposits\",\n    \"withdrawal\",\n    \"purchases_partners\",\n    \"purchases\",\n    \"cc_taken\",\n    \"cc_recommended\",\n    \"cc_disliked\",\n    \"cc_liked\",\n    \"cc_application_begin\",\n]\nfor col in to_bin_cols:\n    data[col] = to_bin(data[col])\n\ndata.head()","87098a0b":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import MinMaxScaler\n\nenc = OneHotEncoder()\nscaler = MinMaxScaler()\nformat_columns = [\"reward_rate\", \"age\"]\n\ndummies_coulmns = [\"housing\", \"registered_phones\", \"payment_type\"]\nX = np.concatenate(\n    (\n        ## OHE\n        enc.fit_transform(data[dummies_coulmns]).toarray(),\n        ## BIN\n        data.drop(format_columns + dummies_coulmns + [\"churn\", \"user\"], axis=1).values,\n        ## FMT\n        scaler.fit_transform(data[format_columns]),\n    ),\n    axis=1,\n)\n\nY = data.churn.values\nX.shape","a758a43d":"from xgboost import XGBClassifier\nfrom scipy import stats\n\nmodel = XGBClassifier(objective=\"binary:logistic\")\ngrid = {\n    \"n_estimators\": stats.randint(150, 1000),\n    \"learning_rate\": stats.uniform(0.01, 1.5),\n    \"subsample\": stats.uniform(0.2, 0.95),\n    \"max_depth\": [3, 4, 5, 6, 7, 8, 9, 10],\n    \"colsample_bytree\": stats.uniform(0.2, 1.5),\n    \"min_child_weight\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n}","84bb6dbc":"from sklearn.model_selection import RandomizedSearchCV\n\nrscv = RandomizedSearchCV(\n    estimator=model, param_distributions=grid, n_iter=400, cv=5, verbose=5, n_jobs=-1,\n).fit(X, Y)\n\nrscv.best_score_","a3cf3f01":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.1)\n\nmodel = rscv.best_estimator_\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\ny_pred_class = model.predict_proba(X_test)","4c3c9ce0":"metrics(y_test, y_pred, y_pred_class)","45266351":"# Churn Prediction using XGBoost\n","9158a6bd":"# Columns visualization","e67c3b25":"## Handling missing values\n\nIn the columns **age** I'll drop the lines. The columns **rewards_earned** and **credit_score** will be dropped.               \n","1221bcde":"# The model XGBClassifier","22bdbc9f":"# EDA \/ Data Clean"}}