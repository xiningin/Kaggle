{"cell_type":{"3933373f":"code","eb029b8f":"code","f4040e37":"code","28fdf35f":"code","f382df4a":"code","a393ecf6":"code","318246f1":"code","56d778d2":"code","4645dfe0":"code","86adf998":"code","586ce640":"code","4334220e":"code","94405467":"code","dea30000":"code","01ee108c":"code","db780f62":"code","93581378":"code","ac4dfc66":"code","7f9b64a0":"code","e313e219":"code","bf1cf3aa":"code","6d005b5a":"code","0b90de3f":"markdown","1d0157ae":"markdown","75d7b84a":"markdown","9947226f":"markdown","e1f458b5":"markdown","44bf8757":"markdown","81ff71a6":"markdown","b5f3934e":"markdown","ad6632fa":"markdown","fdee23e2":"markdown","2b1b1ad1":"markdown","af9da99e":"markdown","fd5ffcea":"markdown","0d917e76":"markdown","5a75d67f":"markdown","4abb852b":"markdown","b90885f6":"markdown","c99a3abe":"markdown","99cb72d4":"markdown","54f307b7":"markdown","9787f3b2":"markdown","732ed1b8":"markdown","81f48ec4":"markdown","692180ac":"markdown","422b2d96":"markdown","6b496854":"markdown","56a3e489":"markdown","001d14aa":"markdown"},"source":{"3933373f":"%%javascript\nIPython.OutputArea.prototype._should_scroll = function(lines) {\n    return false;\n}","eb029b8f":"import numpy as np\nimport pandas as pd\nimport requests\nfrom bs4 import BeautifulSoup\nimport time\nimport re\nimport json\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom geopy.geocoders import Photon\nfrom geopy.extra.rate_limiter import RateLimiter\n\nfrom geopandas.tools import geocode\nimport folium\nfrom folium import Marker\nfrom folium.plugins import MarkerCluster\n\nfrom IPython.display import display, HTML\n        \nKAGGLE_BASE_URL = 'https:\/\/kaggle.com\/'\nTOP_N = 10","f4040e37":"datasets = pd.read_csv('\/kaggle\/input\/meta-kaggle\/Datasets.csv', \n                       parse_dates=['CreationDate', 'ReviewDate', 'FeatureDate',\n                                    'LastActivityDate'], infer_datetime_format=True\n                      )\ndataset_versions = pd.read_csv('\/kaggle\/input\/meta-kaggle\/DatasetVersions.csv', \n                               parse_dates=['CreationDate'], \n                               infer_datetime_format=True\n                              )\n\nkernels = pd.read_csv('\/kaggle\/input\/meta-kaggle\/Kernels.csv', \n                      parse_dates=['CreationDate', 'EvaluationDate',\n                                   'MadePublicDate', 'MedalAwardDate'],\n                      infer_datetime_format=True\n                     )\nkernel_versions = pd.read_csv('\/kaggle\/input\/meta-kaggle\/KernelVersions.csv', \n                              parse_dates=['CreationDate', 'EvaluationDate'],\n                              infer_datetime_format=True\n                             )\n\nmessages = pd.read_csv('\/kaggle\/input\/meta-kaggle\/ForumMessages.csv', \n                       parse_dates=['PostDate', 'MedalAwardDate'], \n                       infer_datetime_format=True\n                      )\ntopics = pd.read_csv('\/kaggle\/input\/meta-kaggle\/ForumTopics.csv', \n                     parse_dates=['CreationDate', 'LastCommentDate'], \n                     infer_datetime_format=True\n                    )\n\nusers = pd.read_csv('\/kaggle\/input\/meta-kaggle\/Users.csv',\n                    parse_dates=['RegisterDate'], \n                    infer_datetime_format=True\n                   )\nuser_followers = pd.read_csv('\/kaggle\/input\/meta-kaggle\/UserFollowers.csv', \n                             parse_dates=['CreationDate'], \n                             infer_datetime_format=True\n                            )","28fdf35f":"gms = (users[users['PerformanceTier'] == 4]\n       .copy()\n       .reset_index(drop=True)\n       .drop(columns=['PerformanceTier'])\n      )","f382df4a":"string = f\"There are currently {gms.shape[0]} Grandmasters.\"\ndisplay(HTML(string))","a393ecf6":"def display_html(df, cols=None, num_rows=0):\n    \"\"\"Display columns cols and num_rows rows of the data \n    frame df in HTML.\n    \"\"\"\n    \n    if num_rows != 0:\n        df_to_display = df.head(num_rows)\n    else:\n        df_to_display = df\n    \n    df_html = df_to_display.to_html(columns=cols, index=False, na_rep='',\n                              escape=False, render_links=True)\n    display(HTML(df_html))","318246f1":"for index in gms.index:\n    time.sleep(2)\n    row = gms.iloc[index]\n    \n    username = row.UserName\n    profile_url = f'{KAGGLE_BASE_URL}{username}'\n    displayname = row.DisplayName\n    \n    result = requests.get(profile_url)\n    src = result.text\n    soup = BeautifulSoup(src, 'html.parser').find_all(\"div\", id=\"site-body\")[0].find(\"script\")\n    \n    user_info = re.search('Kaggle.State.push\\(({.*})', str(soup)).group(1)\n    user_dict = json.loads(user_info)\n    \n    city = user_dict['city']\n    region = user_dict['region']\n    country = user_dict['country']\n    avatar_url = user_dict['userAvatarUrl']\n    occupation = user_dict['occupation']\n    organization = user_dict['organization']\n    num_followers = user_dict['followers']['count']\n    num_following = user_dict['following']['count']\n    num_posts = user_dict['discussionsSummary']['totalResults']\n    num_datasets = user_dict['datasetsSummary']['totalResults']\n    num_kernels = user_dict['scriptsSummary']['totalResults']\n    num_comps = user_dict['competitionsSummary']['totalResults']\n    \n    \n    gms.loc[index, 'Image'] = f'<a href=\"{profile_url}\" target=\"_blank\" title=\"{displayname}\"><img src=\"{avatar_url}\" width=\"100\" height=\"100\"><\/a>'\n    \n    if city and region and country:\n        gms.loc[index, 'Location'] = f'{city}, {region}, {country}'\n        \n    if occupation and organization:\n        gms.loc[index, 'Occupation'] = f'{occupation} at {organization}'\n    elif organization:\n        gms.loc[index, 'Occupation'] = organization\n    elif occupation:\n        gms.loc[index, 'Occupation'] = occupation\n    \n    gms.loc[index, 'NumFollowers'] = num_followers\n    gms.loc[index, 'NumFollowing'] = num_following\n    gms.loc[index, 'NumPosts'] = num_posts\n    gms.loc[index, 'NumDatasets'] = num_datasets\n    gms.loc[index, 'NumKernels'] = num_kernels\n    gms.loc[index, 'NumCompetitions'] = num_comps\n\ngms = gms.convert_dtypes()\ndisplay_html(gms, cols=['UserName', 'DisplayName', 'RegisterDate', 'Image', 'Location', 'Occupation'])","56d778d2":"geolocator = Photon(timeout=15)\ngeocode = RateLimiter(geolocator.geocode,\n                      min_delay_seconds=3,\n                      max_retries=3,\n                      error_wait_seconds=30\n                     )\nm = folium.Map(location=[0, 30], tiles='OpenStreetMap', zoom_start=1)\nmc = MarkerCluster()\nlocations = {}\nfor index in gms[gms.Location.notna()].index:\n    row = gms.iloc[index]\n    displayname = row.DisplayName\n    location = row.Location\n    popup = f'{displayname}; {location}'\n    tooltip = f'{displayname}; {location}'\n    \n    if location in locations:\n        lat, long = locations[location]\n    else:\n        point = geocode(location)\n        lat, long = point.latitude, point.longitude\n        locations[location] = [lat, long]\n   \n    mc.add_child(Marker([lat, long], popup=popup, tooltip=tooltip))\n    \nm.add_child(mc)","4645dfe0":"followers = gms.nlargest(TOP_N, 'NumFollowers').copy()\ndisplay_html(followers, cols=['UserName', 'DisplayName', 'Image', \n                              'Occupation', 'NumFollowers', 'NumFollowing'])","86adf998":"following = gms.nlargest(TOP_N, 'NumFollowing').copy()\ndisplay_html(following, cols=['UserName', 'DisplayName', 'Image', \n                              'Occupation', 'NumFollowing', 'NumFollowers'])","586ce640":"gms_following_tier = (user_followers[['UserId', 'FollowingUserId']]\n                      .merge(gms['Id'], left_on='UserId', right_on='Id')\n                      .drop(columns='Id')\n                      .merge(users, left_on='FollowingUserId', right_on='Id')\n                      .drop_duplicates('Id')\n                      .groupby('PerformanceTier')\n                      .size()\n                     )\nplt.figure(figsize=(8, 5))\nplt.title('Number of follows by grandmasters, by performance tier')\nax = sns.barplot(gms_following_tier.index, gms_following_tier.values, color='steelblue')","4334220e":"tier_counts = users['PerformanceTier'].value_counts()\ntier_counts","94405467":"gms_following_tier_prop = gms_following_tier \/ tier_counts\nplt.figure(figsize=(8, 5))\nplt.title('Proportion of users followed by at least one grandmaster, by performance tier')\nax = sns.barplot(gms_following_tier_prop.index, gms_following_tier_prop.values, color='steelblue')","dea30000":"gms_followers_tier = (pd.merge(user_followers[['UserId', 'FollowingUserId']], gms['Id'], left_on='FollowingUserId', right_on='Id')\n                      .drop(columns='Id')\n                      .merge(users, left_on='UserId', right_on='Id')\n                      .drop_duplicates('Id')\n                      .groupby('PerformanceTier')\n                      .size()\n                     )\nplt.figure(figsize=(8, 5))\nplt.title('Number of users that follow at least one grandmaster, by performance tier')\nax = sns.barplot(gms_followers_tier.index, gms_followers_tier.values, color='SeaGreen')","01ee108c":"gms_followers_tier_prop = gms_followers_tier \/ tier_counts\nplt.figure(figsize=(8, 5))\nplt.title('Proportion of users that follow at least one grandmaster, by performance tier')\nax = sns.barplot(gms_followers_tier_prop.index, gms_followers_tier_prop.values, color='SeaGreen')","db780f62":"gms_posts = gms[['UserName', 'DisplayName', 'Image', 'Occupation', 'NumPosts']].nlargest(TOP_N, 'NumPosts').copy()\ndisplay_html(gms_posts)","93581378":"forum_topics = (topics[topics.KernelId.isna()]\n                .merge(messages[['Id', 'PostUserId']], left_on='FirstForumMessageId', right_on='Id')\n                .merge(gms, left_on='PostUserId', right_on='Id')\n                .nlargest(TOP_N, 'Score')\n               )\n\ndisplay_html(forum_topics,\n             cols=['UserName', 'DisplayName', 'Image', 'Occupation', 'Score', 'Title']\n            )","ac4dfc66":"gms_comps = gms[['UserName', 'DisplayName', 'Image', 'Occupation', 'NumCompetitions']].nlargest(TOP_N, 'NumCompetitions').copy()\ndisplay_html(gms_comps)","7f9b64a0":"gms_kernels = gms[['UserName', 'DisplayName', 'Image', 'Occupation', 'NumKernels']].nlargest(TOP_N, 'NumKernels').copy()\ndisplay_html(gms_kernels)","e313e219":"gms_kernels = (pd.merge(gms[['Id', 'UserName', 'DisplayName', 'Image']],\n                        kernels[['Id', 'AuthorUserId', 'CurrentKernelVersionId', 'TotalVotes', 'CurrentUrlSlug']],\n                        left_on='Id', right_on='AuthorUserId')\n               .nlargest(TOP_N, 'TotalVotes')\n               .merge(kernel_versions[['Title', 'Id']], left_on='CurrentKernelVersionId', right_on='Id')\n              )\ngms_kernels['url'] = KAGGLE_BASE_URL + gms_kernels.UserName + '\/' + gms_kernels.CurrentUrlSlug\ndisplay_html(gms_kernels, cols=['UserName', 'DisplayName', 'Image', 'TotalVotes', 'Title', 'url'])","bf1cf3aa":"gms_data = gms[['UserName', 'DisplayName', 'Image', 'Occupation', 'NumDatasets']].nlargest(TOP_N, 'NumDatasets').copy()\ndisplay_html(gms_data)","6d005b5a":"gms_datasets = (datasets[datasets.OwnerUserId.notna() & datasets.OwnerUserId.eq(datasets.CreatorUserId)]\n                .merge(gms[['Id', 'UserName', 'DisplayName', 'Image']], left_on='CreatorUserId', right_on='Id')\n                .nlargest(TOP_N, 'TotalVotes')\n                .merge(dataset_versions[['Id', 'Title', 'Slug']], left_on='CurrentDatasetVersionId', right_on='Id')\n               )\ngms_datasets['url'] = KAGGLE_BASE_URL + gms_datasets.UserName + '\/' + gms_datasets.Slug\ndisplay_html(gms_datasets, cols=['UserName', 'DisplayName', 'Image', 'TotalVotes', 'Title', 'url'])","0b90de3f":"### Popular topics by grandmasters\nFirst place solutions to competitions can become very popular.","1d0157ae":"# Meet The Grandmasters","75d7b84a":"# Datasets\n### Number of datasets","9947226f":"# Discussions\n### Number of posts by grandmasters\nCPMP dominates in terms of post count.","e1f458b5":"# Followers\n\n### Who has the most followers?","44bf8757":"## Table of contents\n1. [The Grandmasters](#grandmasters)\n1. [Where are Grandmasters located?](#location)\n1. [Followers](#followers)\n1. [Discussions](#discussions)\n1. [Competitions](#comps)\n1. [Kernels](#kernels)\n1. [Datasets](#datasets)","81ff71a6":"# The Grandmasters\nThe images in the table below link to the grandmaster's profile. A missing location or occupation in the table indicates that the user has not filled in this information in their profile.","b5f3934e":"# Where are grandmasters located?","ad6632fa":"Of all users followed by at least one grandmaster, most are experts. We'll divide the counts by the number of users in that tier and visualize the proportion of users in a tier that are followed by at least one grandmaster.","fdee23e2":"# Kernels\n### Number of kernels","2b1b1ad1":"As expected, most users that follow the grandmasters are novices. That's not surprising since most users are novices. Similar to the above, we'll visualize the proportion of users that follow at least one grandmaster, by performance tier.","af9da99e":"Most grandmasters and Kaggle team members are followed by at least one grandmaster.","fd5ffcea":"### Popular kernels by grandmasters","0d917e76":"<a id=\"followers\"><\/a>\n[Return to table of contents](#table-of-contents)","5a75d67f":"### Who follows other users the most?","4abb852b":"[Meta Kaggle](https:\/\/kaggle.com\/kaggle\/meta-kaggle) is \"Kaggle's public data on competitions, users, submission scores, and kernels\". After I wrote a notebook titled [Meet The Kaggle Team](https:\/\/kaggle.com\/sahidvelji\/meet-the-kaggle-team), I realized I could reuse much of my code to create one for grandmasters as well.","b90885f6":"<a id=\"datasets\"><\/a>\n[Return to table of contents](#table-of-contents)","c99a3abe":"<a id=\"location\"><\/a>\n[Return to table of contents](#table-of-contents)","99cb72d4":"### Who follows the grandmasters?","54f307b7":"<a id=\"table-of-contents\"><\/a>","9787f3b2":"About half of all grandmasters follow at least one grandmaster.","732ed1b8":"<a id=\"grandmasters\"><\/a>\n[Return to table of contents](#table-of-contents)","81f48ec4":"<a id=\"comps\"><\/a>\n[Return to table of contents](#table-of-contents)","692180ac":"Next, we will break down followers and follows by tiers.\n### Who do the grandmasters follow?","422b2d96":"# Competitions\n### Number of competitions","6b496854":"<a id=\"discussions\"><\/a>\n[Return to table of contents](#table-of-contents)","56a3e489":"<a id=\"kernels\"><\/a>\n[Return to table of contents](#table-of-contents)","001d14aa":"### Popular datasets by grandmasters"}}