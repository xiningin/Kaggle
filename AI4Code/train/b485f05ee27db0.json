{"cell_type":{"30f56059":"code","2f5874e8":"code","39a37a69":"code","b54bdd93":"code","72a58938":"code","731db79c":"code","fd260d97":"code","f3167ac9":"code","388d144d":"code","517c8a82":"code","b349bea9":"code","72387de1":"code","b74ed28e":"code","258ca171":"code","b085e341":"code","61ccc86b":"code","eddc12a6":"code","c51256f1":"code","d6aaf4fe":"code","c51ebbcd":"code","6ce4e0c8":"code","a96069b2":"code","ff817bd3":"code","9561f8b8":"code","bbeb5400":"code","b29f7c55":"code","925345c1":"code","f94d67ee":"code","326aaac8":"code","a5058de0":"code","1cd977c9":"markdown","64e46353":"markdown","f9686215":"markdown","269cd684":"markdown","a3d8eade":"markdown","c3613e51":"markdown","76657e6d":"markdown"},"source":{"30f56059":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2f5874e8":"data = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/train.csv')\nstore = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\ntest = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/test.csv')\nprint(data.shape)\nprint(store.shape)\nprint(test.shape)","39a37a69":"store.head()","b54bdd93":"data.head()","72a58938":"test.head()","731db79c":"data.info()","fd260d97":"data['Date']=pd.to_datetime(data['Date'],format='%Y-%m-%d')\n#store_id=data.Store.unique()[0]\n#print(store_id)\nstore_rows=data[data['Store']==1]\nprint(store_rows.shape)\nstore_rows.resample('1D',on='Date')['Sales'].sum().plot.line(figsize=(14,4))","f3167ac9":"#CHECKING THE STARTING AND END DATE\nprint(data['Date'].min())\nprint(data['Date'].max())","388d144d":"data['Sales'].plot.hist()    #right skewed","517c8a82":" # CHECKING MISSING VALUES\nstore.isna().sum()","b349bea9":"store = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\n\nstore['Promo2SinceWeek'] = store['Promo2SinceWeek'].fillna(0)\nstore['Promo2SinceYear'] = store['Promo2SinceYear'].fillna(store['Promo2SinceYear'].mode().iloc[0])\nstore['PromoInterval'] = store['PromoInterval'].fillna(store['PromoInterval'].mode().iloc[0])\n\nstore['CompetitionDistance']=store['CompetitionDistance'].fillna(store['CompetitionDistance'].max())\nstore['CompetitionOpenSinceMonth']=store['CompetitionOpenSinceMonth'].fillna(store['CompetitionOpenSinceMonth'].mode().iloc[0])\nstore['CompetitionOpenSinceYear']=store['CompetitionOpenSinceYear'].fillna(store['CompetitionOpenSinceYear'].mode().iloc[0])","72387de1":"store['Promo2SinceYear'].mode().iloc[0]","b74ed28e":"data_merged = data.merge(store,on='Store',how='left')\ndata_merged.head()","258ca171":"#partitioning the date into day,month,year\ndata_merged['day'] = data_merged['Date'].dt.day\ndata_merged['month'] = data_merged['Date'].dt.month\ndata_merged['year'] = data_merged['Date'].dt.year\n#data_merged['Date'].dt.strftime('%a')-","b085e341":"#CATEGORICAL-stateholiday,storetype,assortment,promointerval\ndata_merged['StateHoliday'] = data_merged['StateHoliday'].map({'0':0,0:0,'a':1,'b':2,'c':3})\ndata_merged['StateHoliday'] = data_merged['StateHoliday'].astype(int)","61ccc86b":"data_merged['Assortment'] = data_merged['Assortment'].map({'a':1,'b':2,'c':3})\ndata_merged['Assortment'] = data_merged['Assortment'].astype(int)","eddc12a6":"data_merged['StoreType'] = data_merged['StoreType'].map({'a':1,'b':2,'c':3,'d':4})\ndata_merged['StoreType'] = data_merged['StoreType'].astype(int)","c51256f1":"map_promo={'Jan,Apr,Jul,Oct':1,'Feb,May,Aug,Nov':2,'Mar,Jun,Sept,Dec':3}\ndata_merged['PromoInterval']=data_merged['PromoInterval'].map(map_promo)\ndata_merged['PromoInterval'] = data_merged['PromoInterval'].astype(int)","d6aaf4fe":"# Train & Test split\nfrom sklearn.model_selection import train_test_split\nX=data_merged.drop(['Date','Sales'],axis=1)\ny=np.log(data_merged['Sales']+1)\ntrain_x,validate_x,train_y,validate_y = train_test_split(X,y,test_size=0.20,random_state=1)\ntrain_x.shape,validate_x.shape,train_y.shape,validate_y.shape","c51ebbcd":"from sklearn.tree import DecisionTreeRegressor\n\nmodel_dt=DecisionTreeRegressor(max_depth=10,random_state=1)\nmodel_dt.fit(train_x,train_y)","6ce4e0c8":"#Code for RMSPE Value\ndef ToWeight(y):\n    w = np.zeros(y.shape, dtype=float)\n    ind = y != 0\n    w[ind] = 1.\/(y[ind]**2)\n    return w\n\ndef rmspe(y, yhat):\n    w = ToWeight(y)\n    rmspe = np.sqrt(np.mean( w * (y - yhat)**2 ))\n    return rmspe","a96069b2":"from sklearn.metrics import r2_score, mean_squared_error\ny_pred=model_dt.predict(validate_x)\ny_pred_exp=np.exp(y_pred)-1\nvalidate_y_exp=np.exp(validate_y)-1\nprint(\"R-squared:\", r2_score(validate_y_exp, y_pred_exp))\nprint(\"RMSE:\", np.sqrt(mean_squared_error(validate_y_exp, y_pred_exp)))\nprint('RMSPE',rmspe(validate_y_exp, y_pred_exp))\n","ff817bd3":"#checking the feature which has most importance\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(20,5))\nplt.bar(X.columns,model_dt.feature_importances_)","9561f8b8":"stores_avg_cust=data.groupby(['Store'])['Customers'].mean().reset_index().astype(int)\nstores_avg_cust\ntest_1=test.merge(stores_avg_cust,on='Store',how='left')\ntest_merg=test_1.merge(store,on='Store',how='left')\ntest_merg['Open']=test_merg['Open'].fillna(1)\ntest_merg['Date']=pd.to_datetime(test_merg['Date'],format='%Y-%m-%d')\ntest_merg['day'] = test_merg['Date'].dt.day\ntest_merg['month'] = test_merg['Date'].dt.month\ntest_merg['year'] = test_merg['Date'].dt.year","bbeb5400":"test_merg.describe()","b29f7c55":"#CATEGORICAL-stateholiday,storetype,assortment,promointerval\ntest_merg['StateHoliday'] = test_merg['StateHoliday'].map({'0':0,0:0,'a':1,'b':2,'c':3})\ntest_merg['StateHoliday'] = test_merg['StateHoliday'].astype(int)\n\ntest_merg['Assortment'] = test_merg['Assortment'].map({'a':1,'b':2,'c':3})\ntest_merg['Assortment'] = test_merg['Assortment'].astype(int)\n\ntest_merg['StoreType'] = test_merg['StoreType'].map({'a':1,'b':2,'c':3,'d':4})\ntest_merg['StoreType'] = test_merg['StoreType'].astype(int)\n\nmap_promo={'Jan,Apr,Jul,Oct':1,'Feb,May,Aug,Nov':2,'Mar,Jun,Sept,Dec':3}\ntest_merg['PromoInterval']=test_merg['PromoInterval'].map(map_promo)\ntest_merg['PromoInterval'] = test_merg['PromoInterval'].astype(int)","925345c1":"test_merged=test_merg.drop(['Id','Date'],axis=1)\ntest_merged.describe()","f94d67ee":"test_pred=model_dt.predict(test_merg[X.columns])\ntest_pred_inv=np.exp(test_pred)-1\nsubmission_predict = pd.DataFrame({'ID':test['Id'],'Sales':test_pred_inv})","326aaac8":"submission_predict","a5058de0":"submission_predict.to_csv('submission.csv',index=False)","1cd977c9":"**MISSING VALUE TREATMENT**","64e46353":"**JOINING STORE AND TRAIN SET**","f9686215":"**BUILDING DECISION TREE MODEL**","269cd684":"**LABEL ENCODING THE CATEGORICAL COLUMNS**","a3d8eade":"**READING THE DATA**","c3613e51":"***CONVERTING DATE COLUMN TO DATETIME***\n\n**ANALYSING SALES FOR STORE 1**","76657e6d":"**PREDICTING THE TEST DATA SET SALES**"}}