{"cell_type":{"cdef0cd1":"code","cc09d3af":"code","57bb4d3a":"code","27fe06c5":"code","018030ab":"code","5c02c908":"code","c2cf23dc":"code","f30b53f8":"code","975caa19":"code","d824658a":"code","54a50f5c":"code","41a9de5b":"code","561b1879":"code","5e881ea9":"code","f62ffd17":"code","e49ac634":"code","5c2377cf":"code","9818ae7c":"code","91e0422a":"code","84b18860":"code","4ff6e8b0":"markdown","63d0cc20":"markdown","fe18eeca":"markdown","1cdb9d0d":"markdown","830a7bc2":"markdown","fa05e154":"markdown","64e39de1":"markdown","fe0c5093":"markdown","bd7427f6":"markdown","83822d96":"markdown","c4074f90":"markdown","9890c7de":"markdown","e6614968":"markdown","24fe5635":"markdown","ff269d8d":"markdown","cf84c862":"markdown","43cdee13":"markdown","0acb2a72":"markdown","ac96ad8a":"markdown","cd3d7200":"markdown","737ab768":"markdown"},"source":{"cdef0cd1":"import seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","cc09d3af":"column_names=['user_id','item_id','rating','timestamp']\ndf =pd.read_csv('..\/input\/movielens\/u.data.csv',sep='\\t',names=column_names)\nmovieT=pd.read_csv('..\/input\/movie-titles\/Movie_Id_Titles')\ndf.head(6)","57bb4d3a":"#Similarly,\nmovieT.head(5) #To check first 5 rows of the DataFrame.","27fe06c5":"merger=pd.merge(df,movieT,on='item_id')\nmerger.head(5)","018030ab":"merger.groupby('title')['rating'].mean().sort_values(ascending=False).head()","5c02c908":"merger.groupby('title')['rating'].count().sort_values(ascending=False).head()","c2cf23dc":"ratings = pd.DataFrame(merger.groupby('title')['rating'].mean())\nratings.head()","f30b53f8":"ratings['NumofRatings'] = pd.DataFrame(merger.groupby('title')['rating'].count())\nratings.head()","975caa19":"plt.figure(figsize=(10,4))\nratings['NumofRatings'].hist(bins=80,color='black') \nplt.title(\"Count of Rating given by the user\")\nplt.figure(figsize=(10,4))\nratings['rating'].hist(bins=50,color='black') \nplt.title(\"Rating provided by the user\")","d824658a":"sns.jointplot(x='rating',y='NumofRatings',data=ratings,alpha=0.3,color='k',kind='scatter',marker=\"*\",)","54a50f5c":"moviematrix = merger.pivot_table(index='user_id',columns='title',values='rating')\nmoviematrix.head(5)","41a9de5b":"ratings.sort_values('NumofRatings',ascending=False).head(10)","561b1879":"starwars_Uratings = moviematrix['Star Wars (1977)']\nliarliar_Uratings = moviematrix['Liar Liar (1997)']\nstarwars_Uratings.head(), liarliar_Uratings.head(), print(\"The object type is: {}\".format(type(starwars_Uratings))) #Returns a Pandas series object\n","5e881ea9":"similar_starwars = moviematrix.corrwith(starwars_Uratings)\nsimilar_liarliar = moviematrix.corrwith(liarliar_Uratings)","f62ffd17":"corr1starwars = pd.DataFrame(similar_starwars,columns=['Correlation_StarWars'])\ncorr1starwars.dropna(inplace=True)\ncorr1starwars.head()","e49ac634":"corr1starwars.sort_values('Correlation_StarWars',ascending=False).head(50)","5c2377cf":"corr1starwars = corr1starwars.join(ratings['NumofRatings'])","9818ae7c":"Recommendations_StarWars=corr1starwars[corr1starwars['NumofRatings']>100].sort_values('Correlation_StarWars',ascending=False).head(10)","91e0422a":"print(\"Recommendations based on Star Wars (1977) movie are\")\nRecommendations_StarWars","84b18860":"corr1liarliar = pd.DataFrame(similar_liarliar,columns=['Correlation_liarliar'])\ncorr1starwars.dropna(inplace=True)\ncorr1liarliar.head()\ncorr1liarliar.sort_values('Correlation_liarliar',ascending=False).head(50)\ncorr1liarliar = corr1liarliar.join(ratings['NumofRatings'])\nRecommendations_liarliar=corr1liarliar[corr1liarliar['NumofRatings']>100].sort_values('Correlation_liarliar',ascending=False).head(10)\nprint(\"Recommendations based on Liar Liar (1997) movie are:\")\nRecommendations_liarliar","4ff6e8b0":">Table Description as follows:\n\n* **user_id**: ID of the user.<br>\n* **item_id**: ID of the item (in this case it's movies).<br>\n* **rating**: Rating given to a movie.<br>\n* **timestamp**: The time at which the rating was given.\n\n","63d0cc20":">The first plot with the title: **Count of Rating given by the user** gives us an overview that most of the times ratings are provided to 0 or 1 rated movies.<br>\nThe second plot wih the title: **Rating provided by the user** gives us an overview that users have provided ratings mostly between 3-4 to a movie.","fe18eeca":"> ## Recommender System using Python","1cdb9d0d":">The  __[corrwith](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.corrwith.html)__ method is used to compute pairwise correlation between rows or columns of two data frame objects instead of index for columns of the data frame.","830a7bc2":">Same is applicable to **Liar Liar (1997)** as follows:","fa05e154":" >Imported some main and useful Libraries:","64e39de1":">Clean the data **similar_starwars** & **similar_liarliar** by removing NaN values and using a DataFrame instead of a series. The below data provides a value in the **Correlation_StarWars** column that shows how other movies ratings in the data set are correlated the **Star Wars (1977)**.","fe0c5093":">The below statement groups the **title** column and do the average (mean) at the **rating** column.<br>\nNote: This returns a series object.","bd7427f6":">Similarly making a new column as **NumofRatings** .","83822d96":">The below statement groups the **title** column and do the count at the **rating** column and returns the highest rating along with the title.<br>\nNote: This returns a series object.","c4074f90":">For movies having **NumberofRatings>100** we can sort at **Correlation_StarWars** to give movies recommendations to user as follows: ","9890c7de":">The joint plot can be used to analyze the relationship between **rating** and **number of ratings**  which is directly proportional to each other as describe below.","e6614968":">Converting the DataFrame into matrix form using __[Pivot](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.pivot.html)__ method.<br>\nEach cell will consist of the rating the user gave to that movie. Note there will be a lot of NaN values, because most people have not seen most of the movies\n","24fe5635":">Based on the above data we can sort out similar movies to **Star Wars (1977)** as: <br>\n\"1.0 for perfectly correlated\"<br>\n>We can relate NumberofRatings as:<br>`ratings['NumofRatings'] = pd.DataFrame(merger.groupby('title')['rating'].count())`\n<br>Joining the two DataFrames using join  __[join](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.join.html)__\n method as <br>`corr1starwars = corr1starwars.join(ratings['NumofRatings'])` <br>Output will be:","ff269d8d":"Based on Linear Algebra the recommendation system are broadly classified into two categories:\n- Content Based: **Filtering based on the similarity between items.**\n\n* Collaborative Based (which are further classified into two sub categories): **Filtering based on the user preferences.**\n    * Memory Based.\n    * Model Based.\n    \n","cf84c862":">Most rated movies:","43cdee13":">## **Content Based** Recommender System example:","0acb2a72":">Converting it into a DataFrame objectnamed as **rating** by the below statement.","ac96ad8a":">Let's choose two movies: **Star Wars** and **Liar Liar**.<br>\nThe user ratings for the above movies can be analyzed using below statements:","cd3d7200":">Now used `pd.merge` to merge **movieT** and **df** DataFrames,<br>\n\n`merger['rating'].value_counts()` Prints out unique records per entry in the **rating** column.<br>\n\n`merger[merger['rating']==5].count()` Counts in the DF which is **merger**, where \"rating=5\".<br><br>\n     The above two statements can be used for calculating some useful stats out the data.<br>\n     For more documentation on Pandas merge method:\n      __[Click here](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.merge.html)__\n","737ab768":"> The column_names statement will decide the columns of our DataFrame, separated by the tab and used `pd.read_csv`."}}