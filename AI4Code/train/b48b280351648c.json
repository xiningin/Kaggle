{"cell_type":{"e7c4aca2":"code","e4cab850":"code","d97bdd09":"code","484f354d":"code","c43b7bf5":"code","21373dd3":"code","9da1e90b":"code","63dd8fae":"code","b5f9134d":"code","1414d45c":"code","8685845a":"code","536e4c72":"code","ff9b4b9b":"code","e2132763":"code","b6add602":"code","219376f4":"code","a7b7ff7a":"code","3926579f":"code","ec9af11e":"code","a23b3003":"code","68b6ffad":"code","5d0250e2":"code","0ac2792e":"markdown","bb6be88e":"markdown","ba15bfe9":"markdown","9284cfc7":"markdown","2dbcea13":"markdown","bd1a2286":"markdown","e8f9c354":"markdown","44203f2e":"markdown","01fae848":"markdown","c55421b6":"markdown"},"source":{"e7c4aca2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e4cab850":"import tensorflow.keras as keras\nimport matplotlib.pyplot as plt\n","d97bdd09":"from keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPool2D,BatchNormalization\nfrom keras.models import Sequential\nfrom keras.utils import to_categorical\n","484f354d":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')","c43b7bf5":"train.shape","21373dd3":"train.head()\n","9da1e90b":"train_1 = train.iloc[:,1:785]\ntrain_1.head()","63dd8fae":"train_y = train[\"label\"]\ntrain_y.head()\n","b5f9134d":"train_n =train_1.to_numpy()\n\ntrain_yn = train_y.to_numpy()","1414d45c":"train_n = train_n\/255\n","8685845a":"\ntrain_n = train_n.reshape((train_n.shape[0],28,28,1))","536e4c72":"model = Sequential()","ff9b4b9b":"model.add(Conv2D(64,(3,3),activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64,(3,3),activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64,(5,5),activation = 'relu',strides=True,padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\n\nmodel.add(Conv2D(128,(3,3),activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128,(3,3),activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128,(5,5),activation = 'relu',strides=True,padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n          \nmodel.add(Conv2D(256,(4,4),activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Flatten())\nmodel.add(Dropout(0.4))\n\nmodel.add(Dense(10,activation = 'softmax'))","e2132763":"history = model.compile(optimizer = 'adam',loss = 'sparse_categorical_crossentropy',metrics = ['accuracy'])","b6add602":"history =  model.fit(train_n,train_yn,epochs=40,batch_size =32,verbose=0)","219376f4":"model.summary()","a7b7ff7a":"plt.figure(figsize=[8,6])\nplt.plot(history.history['accuracy'],'b')\nplt.legend(['Training Accuracy','Validation Accuracy'])\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('learning curves')\nplt.show()","3926579f":"test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\ntest.shape","ec9af11e":"test_n = test.to_numpy()\ntest_n = test_n \/ 255\ntest_n = test_n.reshape((test_n.shape[0],28,28,1))\ntest_n.shape","a23b3003":"preds = model.predict(test_n)\npreds = np.asarray([np.argmax(pred) for pred in preds])\npreds.shape","68b6ffad":"predictions = pd.DataFrame(preds).rename(columns={0:\"Label\"})\npredictions.index.names = [\"ImageID\"]\npredictions.index +=1\npredictions.head(25)","5d0250e2":"predictions.shape\npredictions.to_csv(\"Y_Predictions1.csv\")","0ac2792e":"**Saving the predictions as a Data Frame**","bb6be88e":"Normalise the data","ba15bfe9":"- Loading the test data\n- Data Preprocessing of the same","9284cfc7":"- Predictions","2dbcea13":"- Splitting the labels","bd1a2286":"# Data Visualisation","e8f9c354":"> Importing the necessary libraries","44203f2e":"CNN Model","01fae848":"- Convert it into numpy arrays from pandas dataframe for normalization","c55421b6":"# Define the model and Compile it\n- `Adam as optimizer` \n- `categorical crossentropy` as loss function"}}