{"cell_type":{"203a6ea0":"code","c8f02c65":"code","ca3ef61f":"code","702a97cd":"code","d5bb1bd5":"code","b7b98c29":"code","71004745":"code","4f961a98":"code","ceefd928":"code","bb29ecf2":"code","69f4fef3":"code","195046a4":"code","8de728a3":"code","a5cb4dbf":"code","0bdcd5fb":"code","a444da21":"code","8198dc42":"code","7e9aa7be":"code","c9e3bafd":"code","a8821277":"code","ebed2929":"code","cbab911f":"code","861293cf":"code","49e2c75d":"code","bb9180ed":"markdown"},"source":{"203a6ea0":"import lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error","c8f02c65":"train0 = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/test.csv\")","ca3ef61f":"train0.head()","702a97cd":"test.head()","d5bb1bd5":"n=len(train0)\nprint(n)\nN=list(range(n))\nrandom.seed(2021)\nrandom.shuffle(N)","b7b98c29":"train=train0.iloc[N[0:10000],:]","71004745":"target = train['target']\ndata = train.drop(['target','id'],axis=1)\ntest = test.drop('id',axis=1)","4f961a98":"print(len(data))\nprint(len(train))\nprint(len(test))","ceefd928":"columns=data.columns.to_list()\nprint(columns)","bb29ecf2":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param =   {\n        'num_leaves': trial.suggest_int('num_leaves', 2, 200),\n        'objective': trial.suggest_categorical('objective',['regression','rmse']),  \n        'max_depth': trial.suggest_int('max_depth', 2, 10),\n        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-1, 1.0),\n        \"boosting\": \"gbdt\",\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 1e-3),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-3, 10.0),\n        'bagging_freq': trial.suggest_int('bagging_freq', 2, 10),\n        'bagging_fraction': trial.suggest_uniform('bagging_fraction', 0.1, 1.0),\n        \"feature_fraction\": trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        \"verbosity\": -1,\n    }\n    model = lgb.LGBMClassifier(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","69f4fef3":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=8)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","195046a4":"study.trials_dataframe()","8de728a3":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","a5cb4dbf":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","0bdcd5fb":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","a444da21":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['num_leaves','learning_rate','bagging_freq'])","8198dc42":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","7e9aa7be":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","c9e3bafd":"Best_trial=study.best_trial.params\nprint(Best_trial)","a8821277":"sample = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv\")\nsample","ebed2929":"preds = np.zeros((sample.shape[0]))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(train[columns],target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target.iloc[trn_idx],target.iloc[test_idx]\n    model = lgb.LGBMClassifier(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict(test[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","cbab911f":"model","861293cf":"print(preds.shape)","49e2c75d":"subm = sample\nsubm['target'] = np.where(preds<0.5,0,1).astype(int)\nsubm.to_csv('submission.csv',index=False)\nsubm","bb9180ed":"# LightGBM Prediction with Optuna tuning\n* doc: \nhttps:\/\/github.com\/optuna\/optuna"}}