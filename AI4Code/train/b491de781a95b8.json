{"cell_type":{"1c65714a":"code","f71d0237":"code","ac047f8e":"code","9befcdac":"code","0fcf4dff":"code","6d4d1607":"code","898d3814":"code","273dfd96":"code","766167ed":"code","71a4aa10":"code","9f5ca925":"code","2175905e":"code","f6b4f1e5":"code","eb4cc8a5":"code","6af08d22":"code","b094e7fa":"code","8d3ce863":"code","7ecc7739":"code","90bc3a59":"code","65dc66a2":"code","b7746ccc":"code","7d61880f":"code","5e2698eb":"code","6648013b":"code","c9296326":"code","4800e025":"code","cb63d053":"code","57c1667d":"code","f73093f4":"markdown","0694611a":"markdown","0be2e9f4":"markdown","8f73b65b":"markdown"},"source":{"1c65714a":"# Importing the necessary libraries\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom keras.applications import VGG16\nfrom keras.applications import imagenet_utils\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nfrom sklearn.cluster import KMeans","f71d0237":"DATASET_PATH = \"..\/input\/datasetavantari\/dataset\"","ac047f8e":"Images_list = os.listdir(DATASET_PATH)","9befcdac":"def show_imgs_in_dataset(Images,base_path):\n    '''\n    Display's the images in our dataset in 4*4 grid i.e 16 images\n    \n    Arguments:\n    X: list of images names (dtype : List)\n    base_path : Path to the base dataset (dtype : String)\n    \n    Returns: None \n    '''\n    k=0\n    row = 4 # can change later\n    col = 4 # can change later\n    plt.figure(figsize=(8, 8))\n    # loop over row and col\n    for i in range(0,row):\n        for j in range(0,col):\n            # joining image name to base path\n            path = base_path + \"\/\"+Images[k]\n            # loading and resize the image\n            image = load_img(path, target_size=(224, 224))\n            # specify where to plot the subplot\n            plt.subplot2grid((row,col),(i,j))\n            # show image in particular subgrid\n            plt.imshow(image)\n            k = k+1\n    # show the plot\n    plt.show()","0fcf4dff":"show_imgs_in_dataset(Images_list,DATASET_PATH)","6d4d1607":"# input shape\nINPUT_SHAPE = (224,224,3) # can change later. NOTE : More Computation Power req if it is high","898d3814":"# load the VGG16 network\n# remove the top dense layers, include_top=False\nmodel = VGG16(weights=\"imagenet\", include_top=False,input_shape = INPUT_SHAPE)\n# let's see the layers behind our model\nmodel.summary()","273dfd96":"def create_features(Images,base_path, pre_model):\n    '''\n    Generates features for all the images in the dataset \n    provided using pretrained model\n    \n    Arguments \n    base_path : Path that specifies our dataset (dtype : String)\n    pre_model : instance of our pre-trained model (dtype : keras.Model)\n    \n    Returns : Returns the n-D array of 1-D array feature \n              for each image (dtype : numpy.ndarray)\n    \n    '''\n    \n    x_scratch = []\n    for image in Images:\n        #appending image name to the base path\n        imagePath = base_path+\"\/\"+image\n        # Loading and resizing image\n        image = load_img(imagePath, target_size=INPUT_SHAPE)\n        # Convert the image pixels to a numpy array\n        image = img_to_array(image)\n        # expanding the dimensions ex our image shape is (224,224,3) so far \n        # but if we expand the dimensions it becomes (1, 224, 224, 3)\n        image = np.expand_dims(image, axis=0)\n        # subtracting the mean RGB pixel intensity from the ImageNet dataset\n        image = imagenet_utils.preprocess_input(image)\n        # add the image to the batch\n        x_scratch.append(image)\n    #to get (n, 224, 224, 3) as the dim of images \n    # where n is the number of images processed\n    # it will return n-d array of features with shape (4738, 224, 224, 3) \n    # note:our dataset size is 4738\n    x = np.vstack(x_scratch)\n    # Pass x into pre_model to get encoded features\n    features = pre_model.predict(x, batch_size=32)\n    # if we pass one image through our model\n    # it will give you the feature array of shape (7, 7, 512)\n    # we need to convert the feature matrix to 1-D array \n    # which shape is (25088,) NOTE : 7*7*512 = 25088\n    features_flatten = features.reshape((features.shape[0], 7 * 7 * 512))\n    return features_flatten","766167ed":"train_features_flatten = create_features(Images_list,DATASET_PATH, model)","71a4aa10":"cost =[]\nk = []\nfor i in range(5,11):\n    KM = KMeans(n_clusters = i,  random_state=0) \n    KM.fit(train_features_flatten) \n\t# calculates squared error \n\t# for the clustered points\n    cost.append(KM.inertia_)\n    k.append(i)\n# plot the cost against K values \nplt.plot(range(5,11), cost, color ='g', linewidth ='3') \nplt.xlabel(\"Value of K\") \nplt.ylabel(\"Sqaured Error (Cost)\")\nplt.show() # clear the plot ","9f5ca925":"#initalize KMeans \nKM = KMeans(n_clusters = 8,  random_state=0)\n#fit our features to Kmeans\nKM.fit(train_features_flatten)","2175905e":"# this will store key as cluster and  value as respective \n# indexes of our Imagelist in dictionary\nd = {i: np.where(KM.labels_ == i) for i in range(KM.n_clusters)}","f6b4f1e5":"# storing all the values of above d in list\nall=[]\nfor i in range(KM.n_clusters):\n    all.append(list(d[i][0]))","eb4cc8a5":"def show_imgs(Images,base_path,clus_index,clus):\n    '''\n    Displays the images of Image list where index belongs to clus_index list \n    \n    Arguments\n    Images : List of all images paths (dtype : list)\n    base_path : Path that specifies our dataset (dtype : String)\n    clus_index : list of index values (dtype : list)\n    clus : cluster name (dtype : String)\n    \n    Returns : None\n    \n    '''\n    plt.figure(figsize=(15,15))\n    k = 0\n    for i in range(0,2):\n        for j in range(0,10):\n            p = base_path + \"\/\"+Images[clus_index[k]]\n            image = load_img(p, target_size=(224, 224))\n            plt.title(clus)\n            plt.subplot2grid((10,10),(i,j))\n            plt.imshow(image)\n            k = k+1\n    plt.show()","6af08d22":"show_imgs(Images_list,DATASET_PATH,all[0],\"cluster \"+str(0))","b094e7fa":"show_imgs(Images_list,DATASET_PATH,all[1],1)","8d3ce863":"show_imgs(Images_list,DATASET_PATH,all[2],2)","7ecc7739":"show_imgs(Images_list,DATASET_PATH,all[3],3)","90bc3a59":"show_imgs(Images_list,DATASET_PATH,all[4],4)","65dc66a2":"show_imgs(Images_list,DATASET_PATH,all[5],5)","b7746ccc":"show_imgs(Images_list,DATASET_PATH,all[6],6)","7d61880f":"show_imgs(Images_list,DATASET_PATH,all[7],7)","5e2698eb":"def get_paths(Images,base_path,clus_index,clus):\n    '''\n    creates a data frame with columns image and cluster \n    image value as the path of image and the respective cluster  \n    \n    Arguments\n    Images : List of all images paths (dtype : list)\n    base_path : Path that specifies our dataset (dtype : String)\n    clus_index : list of index values (dtype : list)\n    clus : cluster value (dtype : int)\n    \n    Returns : Data Frame ['image','cluster'] (dtype : pandas.dataframe)\n    \n    '''\n    d = []\n    k=0\n    # iterate through each index of respective cluster\n    for i in clus_index:\n        x = base_path + \"\/\"+Images[i]\n        y = str(clus)\n        d.append([x,y])\n    df=pd.DataFrame(d,columns=['image','cluster'])\n    return df","6648013b":"#collecting data frames for each cluster\nclus = 0\nfinal_clus = []\nfor i in all:\n    paths = get_paths(Images_list,DATASET_PATH,i,clus)\n    final_clus.append(paths)\n    clus = clus+1","c9296326":"# concatinate the all data frames vertically \nresult = pd.concat(final_clus,axis=0)","4800e025":"# length of data frame\nlen(result)","cb63d053":"# let's see what result data frame got\nresult.head()","57c1667d":"# save the data frame to csv for further implementation\nresult.to_csv('label-data-avantari.csv',index=False)","f73093f4":"# What's happening below? \n# Let's see\n### I have provided a dataset ~5k images,yeah it is unlabelled data.So I'm going to label the data! <br> Wait,are you going to do it manually ? <br> oh dude you're so brave!! <br> <img src=\"https:\/\/github.com\/naveenjoshii\/gifsss\/blob\/master\/no.gif?raw=true\" width=\"300\" height=\"150\"> <br> My program will do that for me !!\n","0694611a":"<img src=\"https:\/\/github.com\/naveenjoshii\/gifsss\/blob\/master\/v1done.gif?raw=true\">","0be2e9f4":"#### Here we can see the drop in the sum of squared distance starts to slow down after k=8. <br> Hence 8 is the optimal number of clusters for our analysis","8f73b65b":"<!-- <img src=\"https:\/\/github.com\/naveenjoshii\/gifsss\/blob\/master\/wow.gif?raw=true\"> -->\n<table><tr><td><img src='https:\/\/github.com\/naveenjoshii\/gifsss\/blob\/master\/wow.gif?raw=true' style=\"height:200px;width:200px\"><\/td><td><img src='https:\/\/github.com\/naveenjoshii\/gifsss\/blob\/master\/dude.gif?raw=true' style=\"height:200px;width:200px\"><\/td><\/tr><\/table>"}}