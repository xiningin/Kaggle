{"cell_type":{"120349d2":"code","d26cb951":"code","ca5e5386":"code","ed306f69":"code","814481b3":"code","0a8b785e":"code","6d0d3779":"markdown","545a9897":"markdown","2428b8ca":"markdown","77a92923":"markdown","66c12dce":"markdown"},"source":{"120349d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d26cb951":"from google.cloud import bigquery\n\nclient = bigquery.Client()\n\ndataset_reference = client.dataset(\"google_analytics_sample\", project = \"bigquery-public-data\")\n\ntable_reference = dataset_reference.table(\"ga_sessions_20170801\")\n\ntable = client.get_table(table_reference)\n\nclient.list_rows(table, max_results=5).to_dataframe()","ca5e5386":"print(\"SCHEMA field for the 'totals' column:\\n\")\nprint(table.schema[5])\n\nprint(\"\\nSCHEMA field for the 'device' column:\\n\")\nprint(table.schema[7])","ed306f69":"# query to count the total number of transactions grouped by browser type\nquery = \"\"\"\n        SELECT device.browser AS browser,\n            SUM(totals.transactions) AS total_transactions\n        FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`\n        GROUP BY browser\n        ORDER BY total_transactions DESC\n        \"\"\"\n\nresult = client.query(query).to_dataframe()\nresult.head()","814481b3":"# a quick preview of the schema for the hits column\nprint(\"Schema field for the hits STRUCT\\n\")\nprint(table.schema[10])","0a8b785e":"# a query to determine the most popular landing pages\nquery2 =\"\"\"\n        SELECT hits.page.pagePath as path,\n            COUNT(hits.page.pagePath) as counts\n        FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`, \n            UNNEST(hits) as hits\n        WHERE hits.type=\"PAGE\" and hits.hitNumber=1\n        GROUP BY path\n        ORDER BY counts DESC\n        \"\"\"\n\nresults2 = client.query(query2).result().to_dataframe()\nresults2.head()","6d0d3779":"For a description of each field, refer to this [data dictionary](https:\/\/support.google.com\/analytics\/answer\/3437719?hl=en).\n\nThe table has many nested fields, which you can verify by looking at either the [data dictionary](https:\/\/support.google.com\/analytics\/answer\/3437719?hl=en) (hint: search for appearances of 'RECORD' on the page) or the table preview above.\n\nIn our first query against this table, we'll work with the *totals* and *device* columns.","545a9897":"Since all of the information is stored in a single table as **types** and **repeatable** information, this makes our memory usage much more efficient (as opposed to having to have multiple tables that contain the information joined by keys, which would then require memomry-intensive joins).\n\nNext, we will be working with the `hits` column since it is an example of a *repeated* as well as *nested* data.\n* `hits` is a `STRUCT` since it has data that is nested as well as repeated.\n* `hitNumber`, `page`, and `type` are all nested and repeated within the `hits` column.\n* `pagePath` is further nested in the `page` field.\n\nLets's query some of this in the upcoming cell!","2428b8ca":"## Advanced SQL Practice 3\n\nJust some code to learn using SQL integrated within the Kaggle environment.\n\nIn this practice notebook, we will be working with **nested** as well as **repeated** data within tables. We will be using the information provided by 3rd module in the [Advanced SQL Course](https:\/\/www.kaggle.com\/alexisbcook\/nested-and-repeated-data) offered by Kaggle, where the nested and repeated data is explained in more detail.\n\nAs always, let's start with setting up our client and connection to the *Google bigquery* cloud server and use our API calls to fetch the data.","77a92923":"This table now shows us the most frequent landing pages, of which `\/home` seems to be the higest (using *Google Analytics* website traffic data).","66c12dce":"We refer to the **browser** field (which is nested in the **device** column) and the **transactions** field (which is nested inside the **totals** column) as device.browser and totals.transactions in the query below:"}}