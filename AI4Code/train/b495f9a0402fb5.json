{"cell_type":{"d5f2072a":"code","f476962c":"code","5a0ed943":"code","22d35c2b":"code","fb2e875e":"code","ae910c69":"code","1d78cc17":"code","02edd8de":"code","c4875ad8":"code","cb11ad28":"code","2412649d":"code","68ca569d":"code","ebf1412e":"code","bf1aaf93":"code","ebb1c66e":"code","790340c5":"code","56949812":"code","5e2d0455":"code","cb87d3f1":"code","fec6f314":"code","85f2b5c4":"code","54079baf":"code","04efe397":"code","c0c15f75":"code","ff124f13":"code","4df77570":"code","63e8208d":"code","63e48607":"code","ec5236ae":"code","9c62b82d":"markdown","b5aa539e":"markdown","c0eb6147":"markdown","60ebaede":"markdown","86b9b020":"markdown","936d2eaa":"markdown","a8102251":"markdown","cda846de":"markdown","44616825":"markdown","3527941a":"markdown","fdc91abb":"markdown","2db290f8":"markdown","d3fb5063":"markdown","00580e69":"markdown","7c77ec12":"markdown"},"source":{"d5f2072a":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\n# _______________________________________\n\n# Kernels Data (Public Score & File Path)\n\nked = pd.DataFrame({      \n    'Kernel ID': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H','I','J','K','L','M'],\n    'Symbol':    ['SoliSet', '[Inference] ResNest RFCX Audio Detection',  'notebookba481ef16a', 'All-in-one RFCX baseline for beginners', 'RFCX: train resnet50 with TPU',  'RFCX Resnet50 TPU', 'ResNet34 More Augmentations+Mixup+TTA (Inference)', '[Inference][TPU] RFCX Audio Detection Fast++','RFX Bagging Different Weights','resnetwavenet','bestbag','pytorch adas optimizer','pytorch adas better'],\n    'Score':     [ 0.589 , 0.594 , 0.613 , 0.748 , 0.793 , 0.824 , 0.845 , 0.861, 0.876, 0.877,0.877,0.825, 0.849 ],\n    'File Path': ['..\/input\/audio-detection-soliset-201\/submission.csv', '..\/input\/inference-resnest-rfcx-audio-detection\/submission.csv', '..\/input\/minimal-fastai-solution-score-0-61\/submission.csv', '..\/input\/all-in-one-rfcx-baseline-for-beginners\/submission.csv', '..\/input\/rfcx-train-resnet50-with-tpu\/submission.csv', '..\/input\/rfcx-resnet50-tpu\/submission.csv', '..\/input\/resnet34-more-augmentations-mixup-tta-inference\/submission.csv', '..\/input\/inference-tpu-rfcx-audio-detection-fast\/submission.csv','..\/input\/rfcx-bagging-with-different-weights-0-876-score\/submission.csv','..\/input\/resnet-wavenet-my-best-single-model-ensemble\/submission.csv','..\/input\/bagging-rainforest\/submission_best.csv','..\/input\/rfcx-adas-optimizer-pytorch\/submission.csv','..\/input\/pytorch-training-rfcx-adas-optimizer-resnest\/submission.csv'],        \n    'Note'     : ['xgboost & cuml(https:\/\/rapids.ai)', 'torch & resnest50', 'fastai.vision & torchaudio', 'torch & resnest50', 'tensorflow & tf.keras.Sequential', 'tensorflow & tf.keras.Sequential', 'tensorflow & classification_models.keras', 'torch & resnest50', 'bagging','0.877','0.877','0.825','0.849']\n})    \n    \nked    ","f476962c":"class Kernel():    \n    '''\n       Class Kernel V 1.0\n       Input Argument:       \n       - symbol      (kernel name OR author)       \n       - score       (Score for the kernel)\n       - file_path   (CSV file address)\n    ''' \n      \n    def __init__(self, symbol, score, file_path):  \n        \n        self.symbol = symbol\n        self.score = score\n        \n        self.file_path = file_path\n        self.sub = pd.read_csv(self.file_path)\n        \n            \n    def __str__(self):\n        return f'Kernel: {self.symbol}\\t| Score: {self.score}'\n\n    \n    def __repr__(self):\n        return f'Class: {self.__class__.__name__}\\nName: {repr(self.symbol)}\\t| Score: {self.score}'   \n\n        \n    def print_head(self):\n        print(self)\n        print(f'\\nHead:\\n')\n        print(self.sub.head())        \n    \n    \n    def print_description(self):\n        print(self)      \n        print(f'\\nDescription:\\n')\n        print(self.sub.describe())\n        \n        \n    def generation(self, other, coeff):\n        g1 = self.sub.copy()\n        g2 = self.sub.copy()\n        g3 = self.sub.copy()\n        g4 = self.sub.copy() \n        \n        if isinstance(other, Kernel):             \n            for i in self.sub.columns[1:]: \n                \n                lm, Is = [], []                \n                lm = self.sub[i].tolist()\n                ls = other.sub[i].tolist()        \n                res1, res2, res3, res4 = [], [], [], []  \n                \n                for j in range(len(self.sub)): \n                    \n                    res1.append(max(lm[j] , ls[j]))\n                    res2.append(min(lm[j] , ls[j]))\n                    res3.append((lm[j] + ls[j]) \/ 2)\n                    res4.append((lm[j] * coeff) + (ls[j] * (1.- coeff)))        \n        \n                g1[i] = res1\n                g2[i] = res2\n                g3[i] = res3\n                g4[i] = res4\n                \n        return g1,g2,g3,g4   \n    \n# ____________________________________________\n    \n# Seven instance of \"Kernel\" class is defined.\n\nfor i in range(13):   \n    ked.iloc[i, 0] = Kernel(ked.iloc[i, 1], ked.iloc[i, 2], ked.iloc[i, 3])     \n#    ked.iloc[i, 0].print_head() \n#    ked.iloc[i, 0].print_description() \n","5a0ed943":"print(ked.iloc[0, 0])\nked.iloc[0, 0].sub.describe()","22d35c2b":"print(ked.iloc[1, 0])\nked.iloc[1, 0].sub.describe()","fb2e875e":"print(ked.iloc[2, 0])\nked.iloc[2, 0].sub.describe()","ae910c69":"print(ked.iloc[3, 0])\nked.iloc[3, 0].sub.describe()","1d78cc17":"print(ked.iloc[4, 0])\nked.iloc[4, 0].sub.describe()","02edd8de":"print(ked.iloc[5, 0])\nked.iloc[5, 0].sub.describe()","c4875ad8":"print(ked.iloc[6, 0])\nked.iloc[6, 0].sub.describe()","cb11ad28":"print(ked.iloc[7, 0])\nked.iloc[7, 0].sub.describe()","2412649d":"print(ked.iloc[8, 0])\nked.iloc[8, 0].sub.describe()","68ca569d":"print(ked.iloc[9, 0])\nked.iloc[9, 0].sub.describe()","ebf1412e":"# Auxiliary function\ndef generate(main, support, coeff):\n    g1 = main.copy()\n    g2 = main.copy()\n    g3 = main.copy()\n    g4 = main.copy()\n    \n    for i in main.columns[1:]:\n        lm, Is = [], []                \n        lm = main[i].tolist()\n        ls = support[i].tolist() \n        \n        res1, res2, res3, res4 = [], [], [], []          \n        for j in range(len(main)):\n            res1.append(max(lm[j] , ls[j]))\n            res2.append(min(lm[j] , ls[j]))\n            res3.append((lm[j] + ls[j]) \/ 2)\n            res4.append((lm[j] * coeff) + (ls[j] * (1.- coeff)))\n            \n        g1[i] = res1\n        g2[i] = res2\n        g3[i] = res3\n        g4[i] = res4\n        \n    return g1,g2,g3,g4\n","bf1aaf93":"g1,g2,g3,g4 = generate(ked.iloc[10, 0].sub, ked.iloc[12, 0].sub, 0.8)\n\n# g1,g2,g3,g4 = ked.iloc[6, 0].generation(ked.iloc[5, 0], 0.8)","ebb1c66e":"print('Maximum function    | Score: 0.828')\ng1.describe()","790340c5":"print('Minimum function    | Score: 0.848')\ng2.describe()","56949812":"print('Mean function    | Score: 0.845')\ng3.describe()","5e2d0455":"print('Coefficient function (Coeff: 0.8, 0.2)    | Score: 0.847')\ng4.describe()","cb87d3f1":"# Version 1\n# We have now selected the minimum function.\n# sub = g2","fec6f314":"f1,f2,f3,f4 = generate(ked.iloc[9, 0].sub, g2, 0.8)\n","85f2b5c4":"print('Maximum function    | Score: 0.000')\nf1.describe()","54079baf":"print('Minimum function    | Score: 0.866')\nf2.describe()","04efe397":"print('Mean function    | Score: 0.000')\nf3.describe()","c0c15f75":"print('Coefficient function (Coeff: 0.8, 0.2)    | Score: 0.000')\nf4.describe()","ff124f13":"# We have selected the minimum function.\nsub = f2","4df77570":"sub.to_csv(\"submission.csv\", index=False)\nf1.to_csv(\"submission1.csv\", index=False)\nf2.to_csv(\"submission2.csv\", index=False)\nf3.to_csv(\"submission3.csv\", index=False)\nf4.to_csv(\"submission4.csv\", index=False)\n\n!ls","63e8208d":"h1,h2,h3,h4 = generate(ked.iloc[12, 0].sub, g2, 1.0)","63e48607":"sub = h2","ec5236ae":"sub.to_csv(\"submission.csv\", index=False)\nh1.to_csv(\"submission1.csv\", index=False)\nh2.to_csv(\"submission2.csv\", index=False)\nh3.to_csv(\"submission3.csv\", index=False)\nh4.to_csv(\"submission4.csv\", index=False)\n\n!ls","9c62b82d":"<div class=\"alert alert-success\">  \n<\/div>","b5aa539e":"<div class=\"alert alert-success\">  \n<\/div>","c0eb6147":"### Example: 2\nTo increase the score of the best kernel (Score: 0.876), we get help from the g2 kernel with a score of 0.861.","60ebaede":"> <div class=\"alert alert-success\">  \n<\/div>","86b9b020":"<div class=\"alert alert-success\">  \n<\/div>","936d2eaa":"<div class=\"alert alert-success\">  \n<\/div>","a8102251":"### Kernel Class & Instances","cda846de":"<div class=\"alert alert-success\">  \n<\/div>","44616825":"### Import & Data Set","3527941a":"### For example:\nTo increase the score of the best kernel (Score: 0.845), we get help from the kernel with a score of 0.824.","fdc91abb":"<div>\n    <h1 align=\"center\">\"AutoML in Kaggle Kernels\"<\/h1><\/h1>\n    <h1 align=\"center\">Rainforest Connection Species Audio Detection<\/h1>\n    <h4 align=\"center\">By: Somayyeh Gholami & Mehran Kazeminia<\/h4>\n<\/div>","2db290f8":"<div class=\"alert alert-success\">  \n<\/div>","d3fb5063":"### Example: 2\nTo increase the score of the best kernel (Score: 0.861), we get help from the g2 kernel with a score of 0.848.","00580e69":"<div class=\"alert alert-success\">  \n<\/div>","7c77ec12":"### Increase the best score.\nCan the results of the better kernels support each other? YES:)"}}