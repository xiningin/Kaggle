{"cell_type":{"40bfc917":"code","f856994e":"code","0b161da3":"code","0053e5b8":"code","61d59a50":"code","1dde475e":"code","db9df2f4":"code","ada7cd02":"code","894f79d6":"code","5273a5c7":"code","a71264df":"code","a7d7467f":"code","6436b0f1":"code","26f6f8be":"code","4c43f33e":"code","c76804e5":"code","b3507ef1":"code","274943a4":"markdown","4befe2d4":"markdown","04d32bec":"markdown"},"source":{"40bfc917":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f856994e":"import pandas as pd\nimport numpy as np\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom lightgbm import LGBMClassifier\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import  GridSearchCV","0b161da3":"filepath= '\/kaggle\/input\/forest-cover-type-prediction\/train.csv'\nfilepath1= '\/kaggle\/input\/forest-cover-type-prediction\/test.csv'\ntestdata= pd.read_csv(filepath1)\ntestdata2=testdata\ntraindata= pd.read_csv(filepath)\ntraindata.head()","0053e5b8":"#We remove the id column in both the training and testing datasets.\ntraindata=traindata.drop('Id',axis=1)\ntestdata=testdata.drop('Id',axis=1)","61d59a50":"#working with numeric features (They are all numerical features)\nnumeric_features = traindata.select_dtypes(include=[np.number])\nnumeric_features.dtypes","1dde475e":"#Checking the correlation between each column with the Cover_Type\ncorr = numeric_features.corr()\nprint (corr['Cover_Type'].sort_values(ascending=False)[:5], '\\n')\nprint (corr['Cover_Type'].sort_values(ascending=False)[-5:])","db9df2f4":"#We see how various features compare with the Cover type\n\ncolumn_names=['Elevation','Aspect','Slope','Horizontal_Distance_To_Hydrology','Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways','Hillshade_9am','Hillshade_Noon','Hillshade_3pm','Horizontal_Distance_To_Fire_Points']                \n\n\nfor i in column_names:\n    feature = traindata.pivot_table(index='Cover_Type',\n                  values=i, aggfunc=np.median)\n    feature.plot(kind='bar', color='blue')\n    plt.xlabel(i)\n    plt.ylabel('Median Cover_Type')\n    plt.xticks(rotation=0)\n    plt.show()\n       ","ada7cd02":"#We will define the training and testing data here:\n\ny=traindata['Cover_Type']\nx=traindata.drop('Cover_Type',axis=1)\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.70,test_size=0.30, random_state=0)","894f79d6":"##Now we will run a few machine learning techiniques to see which one is the most applicable\n\n#Linear Regression\nlinearRegressor = LinearRegression()\nlinearRegressor.fit(x_train, y_train)\ny_predicted = linearRegressor.predict(x_test)\nmse = mean_squared_error(y_test, y_predicted)\nr = r2_score(y_test, y_predicted)\nmae = mean_absolute_error(y_test,y_predicted)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)","5273a5c7":"# Random Forest\nrf = RandomForestClassifier()\nrf.fit(x_train,y_train);\ny_predicted_r = rf.predict(x_test)\nmse = mean_squared_error(y_test, y_predicted_r)\nr = r2_score(y_test, y_predicted_r)\nmae = mean_absolute_error(y_test,y_predicted_r)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)","a71264df":"# Decision Tree - CART\nregressor = DecisionTreeRegressor(random_state = 0)\nregressor.fit(x_train, y_train)\ny_predicted_d = regressor.predict(x_test)\nmse = mean_squared_error(y_test, y_predicted_d)\nr = r2_score(y_test, y_predicted_d)\nmae = mean_absolute_error(y_test,y_predicted_d)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)","a7d7467f":"#Polynomial Regression\npolynomial_features= PolynomialFeatures(degree=2)\nx_poly = polynomial_features.fit_transform(x_train)\nx_poly_test = polynomial_features.fit_transform(x_test)\nmodel = LinearRegression()\nmodel.fit(x_poly, y_train)\ny_predicted_p = model.predict(x_poly_test)\nmse = mean_squared_error(y_test, y_predicted_p)\nr = r2_score(y_test, y_predicted_p)\nmae = mean_absolute_error(y_test,y_predicted_p)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)","6436b0f1":"#Ridge Regression\nridgereg = Ridge(normalize=True)\nridgereg.fit(x_train, y_train)\ny_pred = ridgereg.predict(x_test)\nmse = mean_squared_error(y_test, y_pred)\nr = r2_score(y_test, y_pred)\nmae = mean_absolute_error(y_test,y_pred)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)","26f6f8be":"# LGBMClassifier\nlgb_clf = LGBMClassifier(random_state=17)\nlgb_clf.fit(x_train, y_train)\ny_pred = lgb_clf.predict(x_test)\nmse = mean_squared_error(y_test, y_pred)\nr = r2_score(y_test, y_pred)\nmae = mean_absolute_error(y_test,y_pred)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)","4c43f33e":"#GridSearchCV\nparam_grid = {'num_leaves': [7, 15, 31, 63], \n              'max_depth': [3, 4, 5, 6, -1]}\ngrid_searcher = GridSearchCV(estimator=lgb_clf, param_grid=param_grid, \n                             cv=5, verbose=1, n_jobs=4)\ngrid_searcher.fit(x_train, y_train)\nmse = mean_squared_error(y_test, y_pred)\nr = r2_score(y_test, y_pred)\nmae = mean_absolute_error(y_test,y_pred)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)","c76804e5":"# Random Forest\nrf = RandomForestClassifier()\nrf.fit(x,y);\nPrediction = rf.predict(testdata)","b3507ef1":"predictionlist=Prediction.tolist()\nPassengerid=testdata2['Id'].tolist() \noutput=pd.DataFrame(list(zip(Passengerid, predictionlist)),\n              columns=['Id','Cover_type'])\noutput.head()\noutput.to_csv('my_submission(ForestCoverTypePrediction).csv', index=False)","274943a4":"Thus we can see that Random Forest was the best model ..so we use it for the test data.","4befe2d4":"Finally, we convert the predictions to a csv file for submission.","04d32bec":"Data Visualization."}}