{"cell_type":{"3228e40a":"code","59a98f81":"code","84d16238":"code","68892f1f":"code","57131887":"code","887f3480":"markdown","4428e873":"markdown","ee66a8e0":"markdown","92b88800":"markdown","b361a35e":"markdown","43bb889a":"markdown"},"source":{"3228e40a":"%matplotlib inline\n%config InlineBackend.figure_format = 'svg' \nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport datetime\nfrom math import ceil\nfrom plotnine import * # use python's ggplot2\n\nts = pd.date_range('1\/1\/2020', periods = 366) # generate 2020 all year data, sum up 366 days\nts = pd.Series(ts).apply(str) # convert Datetime into string\nnew = ts.str.split(\" \", n = 1, expand = True) # extract YYYY-MM-DD date \nts = new[0]\nts","59a98f81":"month = ts.apply(lambda x: int(x[5:7])) # slicing month from YYYY-MM-DD format\nmday = ts.apply(lambda x: int(x[8:10]))\n\n\ndef week_day(date):\n    '''generate week days from YYYY-MM-DD format'''\n    year, month, day = (int(x) for x in date.split('-'))   \n    answer = datetime.date(year, month, day).weekday() \n    answer = int(answer) + 1\n    return answer\n\nweekdays = ts.apply(week_day)\nweekdays","84d16238":"df = pd.DataFrame({'date_time': ts, 'weekdays':weekdays,\n              'mday':mday,'month': month,\n              'val': np.random.randn(366)}) # val is random numbers\n\nnum_weekdays = {1:'Mon',2:'Tue',3: 'Wed',4:'Thu',5 :'Fri',6:'Sat', 7 : 'Sun'} # map between number and weekdays\nnum_mont = {1:'Jan',2:'Feb',3:'Mar',4:'Apr', 5: 'May',6:'Jun', 7:'Jul', 8:'Aug',\n            9:'Sep',10:'Oct',11:'Nov', 12:'Dec'}\n\ndf['weekdays'] = df['weekdays'].map(num_weekdays)\ndf['month'] = df['month'].map(num_mont)\n\ndf","68892f1f":"wdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'] # set factor order level\nwdays.reverse() # order reverse \nmont = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug','Sep','Oct','Nov','Dec']\n\ndef recode_ordered(array,level):\n    '''recode string data to ordered factors\n    '''\n    cate = pd.api.types.CategoricalDtype(categories=level, ordered= True)\n    array = array.astype(cate)\n    return array\n\ndf['month'] = recode_ordered(df['month'], mont)\ndf['weekdays'] = recode_ordered(df['weekdays'], wdays)\n\ndef week_of_month(date):\n    '''Returns the week of the month for the specified date.\n    '''\n    year, month, day = (int(x) for x in date.split('-'))   \n    dt = datetime.date(year, month, day)\n    first_day = dt.replace(day=1)\n    adjusted_dom = dt.day + first_day.weekday()\n    return int(ceil(adjusted_dom\/7.0))\n\ndf['monthweek'] =  df['date_time'].apply(week_of_month)\ndf.to_csv('df.csv', index=False, header=True)\ndf   ","57131887":"(ggplot(df, aes('monthweek','weekdays',fill = 'val')) +\n  geom_tile(color ='gray') +\n  geom_text(aes(label = 'mday'),size=5,color = 'black')+\n  facet_wrap('~month' ,nrow=3) +\n  labs(title = 'Record',x='week of month',y = ' ',fill = 'Times') + \n  scale_x_continuous() \n)","887f3480":"The column `val` could be any record generated by days.","4428e873":"Dates and Times are essentially string vectors, beginners should not depend too much on libraries but to practice manipulating string data.","ee66a8e0":"Xiao Song  \n\n\nPython has multiple ways to tackle dates and times, including `datetime`, `calendar` and `pd.date_range`. I use this notebook to show how to create calendar plot using python's `ggplot2`: `plotnine`. It's also a great way to learn how to handle dates and times via Python. ","92b88800":"Using R will be more convenient because it contains many tools to handle date\/time. Here is an example in R using `data.table`: \n\n\n```r\nlibrary(data.table)\nlibrary(ggplot2)\n\ndate0 = seq.Date(from=as.Date('2020-01-01'),\n                to=as.Date('2020-12-31'), by='1 day')\n\ndate = as.POSIXlt(date0)\nmonth = date$mon +1\nweekdays = date$wday\nmday = date$mday\ndatx = data.table(date0,month,weekdays,mday)\ndatx[, week:= as.numeric(format(date,\"%W\"))]\n\ndatx[,`:=`(val = runif(366),\n           weekdays = ifelse(weekdays==0, 7, weekdays))]\ndatx[,monthweek:= week - min(week) + 1,by=.(month)]\n\ndatx[,`:=`(month = factor(month,levels=as.character(1:12), # as ordered factors\n                          labels=c(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\n                                   \"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"),ordered=T),\n           weekdays = factor(weekdays,levels=rev(1:7),\n                             labels=c(\"Sun\",\"Sat\",\"Fri\",\"Thu\",\"Wed\",\"Tue\",\"Mon\"),ordered=T)\n           )]\n\ndatx = datx[,.(monthweek,weekdays,mday,month,val)]\n\nggplot(datx, aes(monthweek,weekdays,fill = val)) +\n  geom_tile(col ='white') +\n  geom_text(label = mday,size=2)+\n  facet_wrap(~month ,nrow=3) +\n  scale_fill_viridis_c(guide = \"colourbar\",\n                       aesthetics = \"fill\") +\n  labs(title = 'Record',x='week of month',y=' ',fill = 'Times')+ \n  scale_x_continuous(breaks = 1:6)\n```","b361a35e":"<font size=5 >Calendar Plot, Dates & Times (Python & R)<\/font>","43bb889a":"![80Dsqx.png](https:\/\/s1.ax1x.com\/2020\/03\/18\/80Dsqx.png)"}}