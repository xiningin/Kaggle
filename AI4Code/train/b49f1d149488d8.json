{"cell_type":{"a5983105":"code","2357202a":"code","355f29a0":"code","638e48aa":"code","2b3c5c3c":"code","11d15566":"code","3789d9e4":"code","7b4b6aa0":"code","544586ee":"code","31647901":"code","b6213b3c":"code","90b4687c":"code","482ccce4":"code","0436647b":"markdown","a61818da":"markdown"},"source":{"a5983105":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2357202a":"#Get data\nbase_directory = '\/kaggle\/input\/if4074-praktikum-1-cnn\/P1_dataset'\nprint(base_directory)\n\ntrain_directory = os.path.join(base_directory, 'train')\nprint(train_directory)\n\ntest_directory = os.path.join(base_directory, 'test')\nprint(test_directory)\n\ntrain_cloudy_data = os.path.join(train_directory, '1')\nprint(train_cloudy_data)\ntrain_rain_data = os.path.join(train_directory, '2')\nprint(train_rain_data)\ntrain_shine_data = os.path.join(train_directory, '3')\nprint(train_shine_data)\ntrain_sunrise_data = os.path.join(train_directory, '4')\nprint(train_sunrise_data)\n\ntotal_trained = len(os.listdir(train_cloudy_data)) + len(os.listdir(train_rain_data)) + len(os.listdir(train_shine_data)) + len(os.listdir(train_sunrise_data))\nprint(\"total train data : \" + str(total_trained))\n\ntotal_test = len(os.listdir(test_directory))\nprint(\"total test data : \" + str(total_test))","355f29a0":"# TensorFlow and tf.keras\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import preprocessing\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\n\n# Helper libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n","638e48aa":"train_ds = image_dataset_from_directory(\ndirectory=train_directory,\nlabels='inferred',\nlabel_mode='categorical',\ncolor_mode= 'rgb',\nbatch_size=64,\nimage_size=(256, 256))","2b3c5c3c":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten\nmodel = Sequential([Conv2D(64, 3, input_shape=(256, 256, 3)),\n                    Conv2D(64, 3, input_shape=(256, 256, 64)),\n                    MaxPooling2D(pool_size=(112, 112), strides=(2,2), padding='valid'),\n                    Flatten(),\n                    Dense(512),\n                    Dense(512),\n                    Dense(4, activation='softmax'),\n])","11d15566":"model.compile(\n  'adam',\n  loss='categorical_crossentropy',\n  metrics=['accuracy'],\n)","3789d9e4":"model.fit(\n  train_ds, epochs=10\n)","7b4b6aa0":"data = []\nfor directory, _, filenames in os.walk('\/kaggle\/input\/if4074-praktikum-1-cnn\/P1_dataset\/test'):\n    for filename in filenames:\n        img_path = directory + '\/' + filename\n        img = keras.preprocessing.image.load_img(\n            img_path, target_size=(256, 256)\n        )\n        img_array = keras.preprocessing.image.img_to_array(img)\n        img_array = tf.expand_dims(img_array, 0) # Create a batch\n\n        predictions = model.predict(img_array)\n        score = tf.nn.softmax(predictions[0])\n        row = [filename, np.argmax(score)]\n        data.append(row)\n    print(data)","544586ee":"df = pd.DataFrame(data, columns=['id', 'label'])\ndf","31647901":"df.to_csv ('P1_13516060_13517092_13517112.csv', index = False, header=True)","b6213b3c":"from tensorflow.keras.layers import Conv2D, MaxPooling3D, Dense, Flatten\nmodel2 = Sequential([Conv2D(64, 3, input_shape=(256, 256, 3)),\n                    MaxPooling2D(pool_size=(112, 112), strides=(2,2), padding='valid'),\n                    Flatten(),\n                    Dense(512),\n                    Dense(512),\n                    Dense(4, activation='softmax'),\n])\nmodel2.compile(\n  'adam',\n  loss='categorical_crossentropy',\n  metrics=['accuracy'],\n)\nmodel2.fit(\n  train_ds, epochs=10\n)","90b4687c":"data2 = []\nfor directory, _, filenames in os.walk('\/kaggle\/input\/if4074-praktikum-1-cnn\/P1_dataset\/test'):\n    for filename in filenames:\n        img_path = directory + '\/' + filename\n        img = keras.preprocessing.image.load_img(\n            img_path, target_size=(256, 256)\n        )\n        img_array = keras.preprocessing.image.img_to_array(img)\n        img_array = tf.expand_dims(img_array, 0) # Create a batch\n\n        predictions = model2.predict(img_array)\n        score = tf.nn.softmax(predictions[0])\n        row = [filename, np.argmax(score)]\n        data2.append(row)\n    print(data2)","482ccce4":"df2 = pd.DataFrame(data2, columns=['id', 'label'])\ndf.to_csv ('P1_13516060_13517092_13517112_2.csv', index = False, header=True)\ndf2","0436647b":"# MODIFIKASI ARSITEKTUR","a61818da":"# Penjelasan Arsitektur\na. Modifikasi yang dilakukan adalah dengan memindahkan urutan yang semula dijalankan convolutional layer sebanyak dua kali lalu dijalankan max pooling dan dilanjutkan dengan flatten dan dense layer menjadi arsitektur dengan max pooling yang dilakukan tepat setelah menjalankan convolutional layer. Hal tersebut diduga memengaruhi kinerja sebab pada umumnya setelah dijalankan convolutional layer akan dilakukan pooling untuk menurunkan sampling yang diproses pada layer setelahnya.\n\nb. Parameter tiap arsitektur :\n    \n    b.1 ripVGG:\n        - convolution : jumlah filter=64, ukuran filter=(3,3), ukuran masukan=(256,256,3)\n        - convolution : jumlah filter=64, ukuran filter=(3,3), ukuran masukan=(256,256,64)\n        - max pooling : ukuran pooling=(112,112), ukuran strides=(2,2), padding=valid\n        - flatten\n        - dense : jumlah unit=512\n        - dense : jumlah unit=512\n        - dense : jumlah unit=4, activation=softmax\n        - epoch : 10\n    b.2 modifikasi:\n        - convolution : jumlah filter=64, ukuran filter=(3,3), ukuran masukan=(256,256,3)\n        - max pooling : ukuran pooling=(112,112), ukuran strides=(2,2), padding=valid\n        - flatten\n        - dense : jumlah unit=512\n        - dense : jumlah unit=512\n        - dense : jumlah unit=4, activation=softmax\n        - epoch : 10"}}