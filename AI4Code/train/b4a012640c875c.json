{"cell_type":{"92618856":"code","6f084841":"code","55f3f0b3":"code","f28cb023":"code","2e493f99":"code","70ca238b":"code","aa364c1a":"code","d45b0fcf":"code","47ce25fc":"code","9c1113e2":"code","c2bd5799":"code","8588dfef":"code","e1b4e9b7":"code","eca5b50f":"code","0e24d1cd":"code","bc4d5571":"code","58720f37":"code","dbdfacca":"code","22363205":"code","45066a2a":"code","fac1cdc3":"code","f16ca2ff":"code","79050e2d":"code","595ba31d":"code","a9112f7d":"code","ab6a5e2d":"code","4d432877":"code","68927e0c":"code","2aab8a2e":"code","989b4924":"code","65ab27f3":"code","ada3b46c":"code","3876ea9f":"code","87bb3826":"code","256a787c":"code","3f3a1e42":"code","2683a956":"code","04f2e0ee":"code","56103046":"code","26dc216e":"code","8c33d810":"code","cb718461":"code","431c8487":"code","9e762c1c":"code","99ce7a5d":"code","1c0d3afb":"code","74f09e1b":"code","c262fb76":"code","184e5d71":"code","0648b8f3":"code","a7e93b7d":"code","25c95819":"code","c968a200":"code","4a953801":"code","9f2a284d":"code","b155f3c4":"code","6e5cf95a":"code","1c10f78f":"code","40247ae7":"code","97f51d8b":"code","83bf6db0":"code","37fdfad9":"code","7991e361":"code","42aea2ac":"code","18f1c964":"code","ad104ba9":"code","904e2cbf":"code","913c305f":"code","71ebe5fd":"markdown","e8188c8c":"markdown","dc5eb220":"markdown","a090e8c2":"markdown","a694e5e2":"markdown","fe42fc8c":"markdown","50e843c0":"markdown"},"source":{"92618856":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6f084841":"# ML libraries\n\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score, roc_curve, precision_recall_curve, precision_score, recall_score, accuracy_score\nimport category_encoders as ce\nfrom sklearn.model_selection import GridSearchCV\n\n# Visualisation libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns","55f3f0b3":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\n\ntrain.shape, test.shape","f28cb023":"train.head(3)","2e493f99":"train.info()","70ca238b":"f, ax = plt.subplots(ncols=2,figsize=(18,6))\n\nsns.distplot(train[train['Survived']==0]['Age'],ax=ax[0],label='Not Survived')\nsns.distplot(train[train['Survived']==1]['Age'],ax=ax[0],label='Survived')\nax[0].legend()\nsns.boxplot(x='Survived',y='Age',data=train,ax=ax[1])\nax[1].legend()","aa364c1a":"train['Age'].fillna(train['Age'].median(),inplace=True)\ntrain['Embarked'].fillna(train['Embarked'].mode()[0],inplace=True)","d45b0fcf":"train.info()","47ce25fc":"test.info()","9c1113e2":"test['Age'].fillna(train['Age'].median(),inplace=True)\ntest['Fare'].fillna(train['Fare'].median(),inplace=True)","c2bd5799":"fig, ax = plt.subplots(ncols=2, figsize=(18,6))\nsns.boxplot(data = train, x = 'Survived', y = 'Fare', showfliers=False, ax=ax[0])\nsns.boxplot(data = train, x = 'Survived', y = 'Age', showfliers=False, ax=ax[1])","8588dfef":"train.describe()","e1b4e9b7":"fare_bins = ['0-10','11-30','31-50','51-100','101-250','251+']\nage_bins = ['0-5','6-10','11-17','17-25','26-30','31-35','36-40','41-45','46-50','51-55','56-65','70+']\n\ndef fare_bins_func(row, fare_bins):\n    for bin in fare_bins[:-1]:\n        ind = bin.index('-')\n        if row['Fare'] >= int(bin[:ind]) and row['Fare'] <= int(bin[ind+1:]):\n            flag = 1\n            val = bin\n            break\n        else:\n            flag = 0\n            val = fare_bins[-1]\n    return val\n        \ndef age_bins_func(row, age_bins):\n    for bin in age_bins[:-1]:\n        ind = bin.index('-')\n        if row['Age'] >= int(bin[:ind]) and row['Age'] <= int(bin[ind+1:]):\n            val = bin\n            break\n        else:\n            val = age_bins[-1]\n    return val","eca5b50f":"dataset = [train, test]\n\nfor df in dataset:\n    df['fare_bin'] = df.apply(fare_bins_func, args = [fare_bins],axis = 1)\n    df['age_bin'] = df.apply(age_bins_func, args = [age_bins],axis = 1)","0e24d1cd":"fig,ax = plt.subplots(ncols=2,figsize=(18,6))\nsns.countplot(x='fare_bin',data=train,ax=ax[0],hue='Survived',order=fare_bins)\nsns.countplot(x='age_bin',data=train,ax=ax[1],hue='Survived',order=age_bins)","bc4d5571":"train['fare_plus_age'] = train['Fare'] + train['Age']\ntest['fare_plus_age'] = test['Fare'] + test['Age']\ntrain['fare_into_age'] = train['Fare']*train['Age']\ntest['fare_into_age'] = test['Fare']*test['Age']","58720f37":"le = LabelEncoder()\ntrain['fare_bin_label'] = le.fit_transform(train['fare_bin'])\ntest['fare_bin_label'] = le.transform(test['fare_bin'])\ntrain['age_bin_label'] = le.fit_transform(train['age_bin'])\ntest['age_bin_label'] = le.transform(test['age_bin'])","dbdfacca":"l_train = [name.split(',')[1] for name in train['Name'].values.tolist()]\nl_test = [name.split(',')[1] for name in test['Name'].values.tolist()]","22363205":"titles_train = []\ntitles_test = []\nfor val in l_train:\n    ind = val.index('.')\n    titles_train.append(val[1:ind])\n    \nfor val in l_test:\n    ind = val.index('.')\n    titles_test.append(val[1:ind])","45066a2a":"np.unique(titles_train), np.unique(titles_test)","fac1cdc3":"train['title'] = titles_train\ntest['title'] = titles_test","f16ca2ff":"test['title'] = np.where(test['title'] == 'Dona','Don',test['title'])","79050e2d":"np.unique(train['title']), np.unique(test['title'])","595ba31d":"sex_enc = LabelEncoder()\nsex_enc.fit(train['Sex'])\nsex_enc.classes_","a9112f7d":"sex_labels_train = sex_enc.transform(train['Sex'].values)\nsex_labels_test = sex_enc.transform(test['Sex'].values)\ntrain['sex'] = sex_labels_train\ntest['sex'] = sex_labels_test","ab6a5e2d":"def sex_category(row):\n    if row['sex'] == 0 :\n        if row['title'] != 'Miss' and row['Age'] >= 18:\n            return 'mrs'\n        elif row['title'] == 'Miss':\n            return 'miss'\n        else:\n            return 'msc'\n    elif row['title'] == 'Master':\n        return 'mtr'\n    elif row['title'] == 'Mr':\n        return 'mr'\n    else:\n        return 'msc'","4d432877":"dataset = [train, test]","68927e0c":"for df in dataset:\n    df['encoded_title'] = df.apply(sex_category, axis=1)\n    ","2aab8a2e":"np.unique(train['encoded_title']), np.unique(test['encoded_title'])","989b4924":"for df in dataset:\n    df['title_sex'] = df['encoded_title'] + '_' + df['sex'].astype('str')","65ab27f3":"train['Embarked'].value_counts()","ada3b46c":"train.head(3)","3876ea9f":"le = LabelEncoder()\nle.fit(train['title_sex'])\nfor df in dataset:\n    df['title_sex_label'] = le.transform(df['title_sex'])","87bb3826":"np.unique(train['title_sex']),np.unique(test['title_sex'])","256a787c":"sns.countplot(x='title_sex',data=train,hue='Survived')","3f3a1e42":"le = LabelEncoder()\nle.fit(train['Embarked'])\n\ntrain['embarked'] = le.transform(train['Embarked'])\ntest['embarked'] = le.transform(test['Embarked'])","2683a956":"encoding = train.groupby('Embarked').size()\n# get frequency of each category\nencoding = encoding\/len(train)\ntrain['enc'] = train.Embarked.map(encoding)\n\nencoding = test.groupby('Embarked').size()\n# get frequency of each category\nencoding = encoding\/len(test)\ntest['enc'] = test.Embarked.map(encoding)","04f2e0ee":"train['family_size'] = train['SibSp'] + train['Parch'] + 1\ntest['family_size'] = test['SibSp'] + test['Parch'] + 1","56103046":"train['isAlone'] = np.where(train['family_size'] == 1, 0, 1)\ntest['isAlone'] = np.where(test['family_size'] == 1, 0, 1)","26dc216e":"train.info()","8c33d810":"fig, ax = plt.subplots(ncols=3, figsize=(18,6))\nsns.countplot(x='embarked',data=train,hue='Survived',ax=ax[0])\nsns.countplot(x='Pclass',data=train,hue='Survived',ax=ax[1])\nsns.countplot(x='title_sex_label',data=train,hue='Survived',ax=ax[2])","cb718461":"columns = list(train.describe().columns)\ncolumns.remove('PassengerId')\ncolumns_test = columns\nprint(columns)\ntrain_data = train[columns]\ncolumns_test.remove('Survived')\ntrain_X_data = train_data[columns_test]\ntrain_y_data = train_data[['Survived']]\ntest_X = test[columns_test]","431c8487":"train_X_data.isna().sum(), test_X.isna().sum()","9e762c1c":"train_X_data.describe()","99ce7a5d":"train_X,validation_X,train_y,validation_y = train_test_split(train_X_data,train_y_data,test_size=0.25)","1c0d3afb":"train_X.shape, validation_X.shape,train_y.shape,validation_y.shape","74f09e1b":"rf = RandomForestClassifier(n_estimators=200,max_depth=20,max_features=10,n_jobs=-1,random_state=42)","c262fb76":"rf.fit(train_X,train_y)","184e5d71":"import eli5\nfrom eli5.sklearn import PermutationImportance\n\nperm = PermutationImportance(rf, random_state=1).fit(validation_X, validation_y)\neli5.show_weights(perm, feature_names = validation_X.columns.tolist())","0648b8f3":"cols_removed = ['age_bin_label','fare_bin_label']\ntrain_X = train_X.drop(cols_removed,1)\nvalidation_X = validation_X.drop(cols_removed,1)\ntest_X = test_X.drop(cols_removed,1)","a7e93b7d":"xgb = XGBClassifier(n_estimators=1000,early_stop_round=10,\n                   eval_set=[validation_X,validation_y], learning_rate=0.05, \n                    max_depth=10,n_jobs=-1,random_state=42)\nrf = RandomForestClassifier(n_estimators=1000,max_depth=20,max_features=10,n_jobs=-1,random_state=42)","25c95819":"xgb.fit(train_X,train_y)\nrf.fit(train_X,train_y)","c968a200":"train_X.shape","4a953801":"xgb_train_proba = xgb.predict_proba(train_X)[:,1]\nrf_train_proba = rf.predict_proba(train_X)[:,1]\n\nxgb_val_proba = xgb.predict_proba(validation_X)[:,1]\nrf_val_proba = rf.predict_proba(validation_X)[:,1]","9f2a284d":"train_prec_xgb, train_rec_xgb, train_thresholds_xgb_1 = precision_recall_curve(train_y, xgb_train_proba)\ntrain_fpr_xgb, train_tpr_xgb, train_thresholds_xgb_2 = roc_curve(train_y, xgb_train_proba)\ntrain_prec_rf, train_rec_rf, train_thresholds_rf_1 = precision_recall_curve(train_y, rf_train_proba)\ntrain_fpr_rf, train_tpr_rf, train_thresholds_rf_2 = roc_curve(train_y, rf_train_proba)","b155f3c4":"prec_xgb, rec_xgb, thresholds_xgb_1 = precision_recall_curve(validation_y, xgb_val_proba)\nfpr_xgb, tpr_xgb, thresholds_xgb_2 = roc_curve(validation_y, xgb_val_proba)\nprec_rf, rec_rf, thresholds_rf_1 = precision_recall_curve(validation_y, rf_val_proba)\nfpr_rf, tpr_rf, thresholds_rf_2 = roc_curve(validation_y, rf_val_proba)","6e5cf95a":"f, ax = plt.subplots(2,2,figsize=(18,10))\nax[0][0].plot(train_fpr_xgb, train_tpr_xgb, color='orange', label='xgb')\nax[0][0].plot(train_fpr_rf, train_tpr_rf, color='darkblue', label='rf')\nax[0][0].plot([0, 1], [0, 1], color='darkblue', linestyle='--')\nax[0][0].set_xlabel('FPR')\nax[0][0].set_ylabel('TPR')\nax[0][0].set_title('ROC value')\nax[0][0].legend()\nax[0][1].plot(train_rec_xgb, train_prec_xgb,color='orange',label='xgb')\nax[0][1].plot(train_rec_rf, train_prec_rf,color='darkblue',label='rf')\nax[0][1].set_xlabel('Recall')\nax[0][1].set_ylabel('Precision')\nax[0][1].set_title('Recall vs Precision')\nax[0][1].legend()\nax[1][0].plot(train_thresholds_xgb_1,train_prec_xgb[:-1],color='orange',label='xgb')\nax[1][0].plot(train_thresholds_rf_1,train_prec_rf[:-1],color='darkblue',label='rf')\nax[1][0].set_xlabel('Threshold')\nax[1][0].set_ylabel('Precision')\nax[1][0].set_title('Threshold vs Precision')\nax[1][0].legend()\nax[1][1].plot(train_thresholds_xgb_1,train_rec_xgb[:-1],color='orange',label='xgb')\nax[1][1].plot(train_thresholds_rf_1,train_rec_rf[:-1],color='darkblue',label='rf')\nax[1][1].set_xlabel(\"Thresholds\")\nax[1][1].set_ylabel(\"Recall\")\nax[1][1].set_title(\"Threshold vs Recall\")\nax[1][1].legend()\nplt.show()","1c10f78f":"f, ax = plt.subplots(2,2,figsize=(18,10))\nax[0][0].plot(fpr_xgb, tpr_xgb, color='orange', label='xgb')\nax[0][0].plot(fpr_rf, tpr_rf, color='darkblue', label='rf')\nax[0][0].plot([0, 1], [0, 1], color='darkblue', linestyle='--')\nax[0][0].set_xlabel('FPR')\nax[0][0].set_ylabel('TPR')\nax[0][0].set_title('ROC value')\nax[0][0].legend()\nax[0][1].plot(rec_xgb,prec_xgb,color='orange',label='xgb')\nax[0][1].plot(rec_rf,prec_rf,color='darkblue',label='rf')\nax[0][1].set_xlabel('Recall')\nax[0][1].set_ylabel('Precision')\nax[0][1].set_title('Recall vs Precision')\nax[0][1].legend()\nax[1][0].plot(thresholds_xgb_1,prec_xgb[:-1],color='orange',label='xgb')\nax[1][0].plot(thresholds_rf_1,prec_rf[:-1],color='darkblue',label='rf')\nax[1][0].set_xlabel('Threshold')\nax[1][0].set_ylabel('Precision')\nax[1][0].set_title('Threshold vs Precision')\nax[1][0].legend()\nax[1][1].plot(thresholds_xgb_1,rec_xgb[:-1],color='orange',label='xgb')\nax[1][1].plot(thresholds_rf_1,rec_rf[:-1],color='darkblue',label='rf')\nax[1][1].set_xlabel(\"Thresholds\")\nax[1][1].set_ylabel(\"Recall\")\nax[1][1].set_title(\"Threshold vs Recall\")\nax[1][1].legend()\nplt.show()","40247ae7":"def class_predict(prob, thresh):\n    a = np.where(prob >= thresh, 1, 0)\n    return a","97f51d8b":"test_X = test[train_X.columns.tolist()]","83bf6db0":"train_proba = rf.predict_proba(train_X)[:,1]\nval_proba = rf.predict_proba(validation_X)[:,1]\ntest_proba = rf.predict_proba(test_X)[:,1]","37fdfad9":"thresh = 0.6\n\ntrain_pred = class_predict(train_proba, thresh)\nval_pred = class_predict(val_proba, thresh)\ntest_pred = class_predict(test_proba, thresh)\n\nprint(\"Precision : \",round(precision_score(train_y, train_pred),3),\n      \" Recall : \",round(recall_score(train_y, train_pred),3),\n      \" Accuracy : \",round(accuracy_score(train_y,train_pred),3),\n     \"AUC-ROC : \",round(roc_auc_score(train_y,train_proba),3))\n\nprint(\"Precision : \",round(precision_score(validation_y, val_pred),3),\n      \" Recall : \",round(recall_score(validation_y, val_pred),3),\n      \" Accuracy : \",round(accuracy_score(validation_y,val_pred),3),\n     \"AUC-ROC : \",round(roc_auc_score(validation_y,val_proba),3))\n\n","7991e361":"thresholds = np.linspace(0,1,1000)\nprec = []\nrec = []\nacc = []\nfor thresh in thresholds:\n    pred = class_predict(val_proba,thresh)\n    p = precision_score(validation_y,pred)\n    r = recall_score(validation_y,pred)\n    a = accuracy_score(validation_y,pred)\n    prec.append(p)\n    rec.append(r)\n    acc.append(a)","42aea2ac":"fig, ax = plt.subplots(ncols=3,figsize=(18,6))\n\nax[0].plot(thresholds,prec)\nax[1].plot(thresholds,rec)\nax[2].plot(thresholds,acc)\nax[0].set_xlabel('thresh')\nax[1].set_xlabel('thresh')\nax[2].set_xlabel('thresh')\nax[0].set_ylabel('precision')\nax[1].set_ylabel('recall')\nax[2].set_ylabel('accuracy')\nax[0].set_title('Threshold vs precision')\nax[1].set_title('Threshold vs recall')\nax[2].set_title('Threshold vs accuracy')\nplt.show()","18f1c964":"ind = acc.index(max(acc))\nprint(thresholds[ind],prec[ind],rec[ind],acc[ind])","ad104ba9":"test_pred = class_predict(test_proba, thresholds[ind])","904e2cbf":"submission = test[['PassengerId']]\nsubmission['Survived'] = test_pred","913c305f":"submission.to_csv('\/kaggle\/working\/submssion.csv',index=False)","71ebe5fd":"rf_param_grid = { \n    'n_estimators': [200, 500, 1000],\n    'max_features': ['auto', 'sqrt', 'log2'],\n    'max_depth' : [7,8,9,10],\n    'criterion' :['gini', 'entropy']\n}\n\nxgb_param_grid = {'max_depth':[5,8,10],\n                 'learning_rate':[0.01,0.025,0.05],\n                 'booster':['gbtree']\n                 }","e8188c8c":"We don't see a clear separation between either Fare and Age's survived values. However for Fare the median value is very high which shows that passengers who were had a higher fare had a higher probability of surviving. For Age, we can't really infer much.","dc5eb220":"rf = GridSearchCV(estimator=rf_clf, param_grid=rf_param_grid, cv= 5)\nxgb = GridSearchCV(estimator=xgb_clf, param_grid=xgb_param_grid, cv= 5)","a090e8c2":"rf_clf = RandomForestClassifier(n_jobs=-1,random_state=42)\nxgb_clf = XGBClassifier(n_jobs=-1,random_state=42)","a694e5e2":"Clearly the label 'mr_1' which means men of title 'Mr' were less likely to survive compared to any other combination of sex and title.","fe42fc8c":"We see that there are a total of 891 records in train data and only Age, Embarked and Cabin has null values in them. We won't be using Cabin feature so we don't populate these null values. Now since Age is a numeric field and Embarked is a categorical field, we populate Age null values with its median values and Embarked with its Mode value.","50e843c0":"Let's recheck for Age and Embarked."}}