{"cell_type":{"e9b45666":"code","29a4c6e9":"code","004b4c34":"code","6b28a0fe":"code","f8cc5f06":"code","2ee3193a":"code","4f8cc8ab":"code","8676ac92":"code","2d8a8e61":"markdown","e624bc84":"markdown","722fc533":"markdown","9a549c21":"markdown","9065a6d1":"markdown","0557b3b9":"markdown"},"source":{"e9b45666":"# Depth first search in search of target - Using Recursion\n\ndef dfs(src,target,limit,visited_states):\n    # Base case if Target found\n    \n    \n    \n    # Base case if limit exceeded\n\n    \n    \n    # Add source to visited_states\n\n    \n    \n    # Find possible slides up, down, left right to current empty site\n    ### Jump to possible_moves function\n       \n        \n        \n        \n    # For all possible moves gotten from the possible moves function\n    # Check if src equals to new targets\n    # Return True if target found in given depth limit\n    pass","29a4c6e9":"def possible_moves(state,visited_states): \n    # Find index of empty spot and assign it to b\n    b = None  \n    \n    #'d' for down, 'u' for up, 'r' for right, 'l' for left - directions array\n    d = []\n                                    \n    #Add all possible direction into directions array - Hint using if statements\n    \n    \n    \n    # If direction is possible then add state to move\n    pos_moves = []\n    \n    # for all possible directions find the state if that move is played\n    ### Jump to gen function to generate all possible moves in the given directions\n    \n    # return all possible moves only if the move not in visited_states\n    pass\n\n\n\n","004b4c34":"def gen(state, m, b): # m(move) is direction to slide, b(blank) is index of empty spot\n    # create a copy of current state to test the move\n    temp = None                                \n    \n    # if move is to slide empty spot to the left and so on\n    \n    \n    \n    \n    \n    # return new state with tested move to later check if \"src == target\"\n    return temp","6b28a0fe":"def iddfs(src,target,depth):\n    \n    # Return Min depth at which the target was found\n    pass\n","f8cc5f06":"#Test 1\nsrc = [1,2,3,-1,4,5,6,7,8]\ntarget = [1,2,3,4,5,-1,6,7,8]         \n       \n\n\ndepth = 1\niddfs(src, target, depth) # Minimum depth should be 2","2ee3193a":"# Test 2\nsrc = [1,2,3,-1,4,5,6,7,8] \ntarget=[1,2,3,6,4,5,-1,7,8]\n\ndepth = 1\niddfs(src, target, depth) # Minimum depth is 1","4f8cc8ab":"# Test 3\n# Try to create a source and target that reaches large minimum required depth \nsrc = None\ntarget = None\n\n\n\n\n\n\niddfs(src, target, depth) # I have reached 25 in the next cell, Lets see if u can beat that","8676ac92":"# Maximum Change \n# An Experiemnt I did to try and find the maximum required depth assuming \n# that this was the biggest possible change from src to target\n\n## Uncomment to try\n# src = [1, 2, 3, 4, 5, 6, 7, 8, -1]\n# target = [-1, 1, 2, 3, 4, 5, 6, 7, 8]\n\n# for i in range(1, 100):\n#     val = iddfs(src,target,i)\n#     print(i, val)\n#     if val == True:\n#         break","2d8a8e61":"BMS College of Engineering - Dr Kavitha Sooda <br \/>\nBMS College of Engineering - Dr Nagarathna N <br \/>\nBMS College of Engineering - Prof G R Asha  <br \/>\n##### Class 5C","e624bc84":"Lets Start with a DFS function to traverse only to the given depth limit, where it checks if source equals target\n\n![](https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/puzzle-1.jpg)","722fc533":"## Objective\n\n Given a 3\u00d73 board with 8 tiles and one empty space \n - Move the numbers around to match the final configuration using the empty spot \n - You can slide the numbers from above, below, left and right tiles into the empty space.\n\n![](https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/puzzle8init.jpg)","9a549c21":"# 8 Puzzle Problem","9065a6d1":"### Iterative Deepening Depth First Search","0557b3b9":"In the next function:\n- Start with a depth of 1 until given depth see if target is reached To find the least depth required to find target\n- Create a visited_stated array to keep a check in all visited sites \n- Call DFS function for given depth limit"}}