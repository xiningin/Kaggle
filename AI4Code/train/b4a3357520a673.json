{"cell_type":{"c8f43a03":"code","436ff427":"code","ed15bae8":"code","0548d59e":"code","0c4b191d":"code","cc52ed2a":"code","149a8ff1":"code","4f63cec7":"code","bcaeb928":"code","5328f950":"code","8b69d255":"code","05e587db":"code","3ad99a62":"code","6015a79e":"code","fae54207":"code","64479e8a":"code","132abed3":"code","fea476f8":"code","48e71c9c":"markdown","8fc309eb":"markdown","3a40a67a":"markdown","67d61361":"markdown","848f45a1":"markdown","154f3e82":"markdown","7f6a83b8":"markdown","97aeadaf":"markdown","0c97f538":"markdown"},"source":{"c8f43a03":"pip install SPARQLWrapper","436ff427":"#importing libraries\nimport numpy as np\nimport pandas as pd\n\nfrom SPARQLWrapper import SPARQLWrapper, JSON\nfrom tqdm import tqdm","ed15bae8":"# Specify the DBPedia endpoint\nsparql = SPARQLWrapper(\"http:\/\/dbpedia.org\/sparql\")","0548d59e":"#specifying the query\n\nsparql.setQuery(\"\"\"\n    PREFIX rdfs: <http:\/\/www.w3.org\/2000\/01\/rdf-schema#>\n    PREFIX  dbpedia-owl:  <http:\/\/dbpedia.org\/ontology\/>\n    \n    SELECT ?film_title ?star_name ?nameDirector ?link WHERE {\n      {  \n        SELECT DISTINCT ?movies ?film_title\n        WHERE {\n           ?movies rdf:type <http:\/\/dbpedia.org\/ontology\/Film>; \n           rdfs:label ?film_title.\n        } \n      }. \n      ?movies dbpedia-owl:starring ?star;\n      foaf:isPrimaryTopicOf ?link;\n      dbpedia-owl:director ?director. \n      ?director foaf:name ?nameDirector.\n      ?star foaf:name ?star_name.\n      FILTER LANGMATCHES(LANG(?film_title), 'en')\n    }\n\"\"\")","0c4b191d":"%%time\n\n# Convert results to JSON format\nsparql.setReturnFormat(JSON)\nresult = sparql.query().convert()","cc52ed2a":"result.keys()","149a8ff1":"#attributes \nresult['head']['vars']","4f63cec7":"attributes = list(result['results']['bindings'][0].keys())\n\ndf = pd.DataFrame(columns=attributes)\ndf","bcaeb928":"n_examples = len(result['results']['bindings'])\nn_examples","5328f950":"for idx, example in tqdm(enumerate(result['results']['bindings']), total=n_examples):\n    for attr in attributes:\n        df.loc[idx,attr] = example[attr]['value']","8b69d255":"df.head()","05e587db":"df.isnull().sum()","3ad99a62":"def find_smallest_string(df,label):\n    return min(map(lambda x: len(x), df[label]))\n\nprint('Smallest string - film_title: ', find_smallest_string(df,'film_title'))\nprint('Smallest string - star_name: ', find_smallest_string(df,'star_name'))\nprint('Smallest string - nameDirector: ', find_smallest_string(df,'nameDirector'))","6015a79e":"df[df['star_name']==''].head(5)","fae54207":"df = df.replace('',np.nan)","64479e8a":"df.isnull().sum()","132abed3":"total_null_values = np.sum(df.isnull().sum()) \ntotal_values = df.shape[0] * df.shape[1]\n\nmissing_perc = total_null_values \/ total_values * 100\nprint(f'Percentage of missing values {missing_perc.round(2)} %')","fea476f8":"df.to_csv('movie_dbpedia.csv',index=False)","48e71c9c":"### SPARQL \nSPARQL is a recursive acronym for **SPARQL Protocol and RDF Query Language**. It is a semantic query language for databases i.e. we are able to retrieve and manipulate data stored in RDF format. ","8fc309eb":"The result is a dictionary and consists of two key-value pairs. \n\n1. The first key describes the attributes, which in our case is movie title, actors'list, directors' list, url.\n2. The second key encapsulates the results.","3a40a67a":"### RDF \n\nRDF stands for **Resource Description Framework**. RDF lets you describe data using a collection of three part statements. We call it as a triple, and we call its three parts as subject (entity identifier), predicate (attribute name) and object (attribute value). \n\nThe subject and predicate are actually represented using URIs (Uniform Resource Identifiers), similar to URLs (Uniform Resource Locators).","67d61361":"Some notes:\n\n1. We see that only 10000 results were returned inspite of having no LIMIT clause. This is because users might unknowingly download the whole repository otherwise. In order to retrieve more results, we need to modify the <code>ResultSetMaxRows<\/code> in the virtuoso.ini file.\n2. Additional movie attributes such as studio, producer, cinematography etc. can be extracted using the url links mentioned in the above table. I will work on this and create another notebook extracting these attributes.\n    ","848f45a1":"### DBpedia\n\nIn this notebook, we look at a sample case of extracting movies' data from **DBpedia**.\n\nDBpedia is aimed to extract structured content from Wikipedia. DBpedia uses RDF framework to represent extracted information and consists of billions of RDF triples.","154f3e82":"**Capturing the data in a structured manner using a dataframe.**","7f6a83b8":"We can see that there are some strings of length zero i.e. missing data. We replace these strings with NaN values, to have an accurate understanding of number of missing values.","97aeadaf":"For this example, we are interested in finding movie title, actors, directors and dbpedia_url for movies. \n\nAccordingly, we need to write our query.","0c97f538":"Although it seems that there aren't any missing values from the above output, checking the shortest string across each column to check if there exist missing values or not. "}}