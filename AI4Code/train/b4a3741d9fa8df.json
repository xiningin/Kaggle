{"cell_type":{"bdf6c9a7":"code","282a5abc":"code","6bab77a2":"code","09477a90":"code","5df0c202":"code","d294bef0":"code","8ce66948":"code","65052830":"code","d44108cf":"code","b3224694":"code","e1ec73cd":"code","a4a1ea16":"code","8e587c81":"code","4a9c84b8":"code","86f8d8a3":"markdown","eca3c5bd":"markdown","1b7878f6":"markdown","d98308e6":"markdown","c359ccd1":"markdown","d8acf26e":"markdown","da84009b":"markdown","14957cbc":"markdown","b649635a":"markdown","d1595ae5":"markdown","cfdb7420":"markdown","b0384835":"markdown","3c7754bc":"markdown"},"source":{"bdf6c9a7":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/creditscreening\/credit.data'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport numpy as np \nimport pandas as pd\nimport os\nimport sklearn.datasets as dt\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nsn.set()","282a5abc":"import pandas as pd\nnomes = [\"A1\",\"A2\",\"A3\",\"A4\",\"A5\",\"A6\",\"A7\",\"A8\",\"A9\",\"A10\",\"A11\",\"A12\",\"A13\",\"A14\",\"A15\",\"A16\"]\ndf = pd.read_csv(\"\/kaggle\/input\/creditscreening\/credit.data\", sep = \",\", names = nomes, na_values = '?')\ndf.head()","6bab77a2":"df.describe()","09477a90":"df.isnull().sum()","5df0c202":"lista = ['A1','A4','A5','A6','A7']\nfor i in lista: \n    df[i]=df[i].fillna(value=df[i].mode)","d294bef0":"lista = ['A2','A14']\nfor i in lista: \n    df[i]=df[i].fillna(value=df[i].mean)","8ce66948":"lista = ['A1','A4','A5','A6','A7','A9','A10','A12','A13']\nfor i in lista:\n    df[i] = df[i].astype(str)\n    df[i] = df[i].astype('category')","65052830":"df['A16'] = df['A16'].astype('category')\ndf['A16'].cat.codes","d44108cf":"df = pd.get_dummies(df,columns=['A1','A4','A5','A6','A7','A9','A10','A12','A13'])","b3224694":"dic = dt.load_digits()\ndic.keys()","e1ec73cd":"X = dic.data\ny = dic.target\n\nfrom sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2)\nX_train.shape","a4a1ea16":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3)\nmodelo = knn.fit(X_train,y_train)\ny_pred = modelo.predict(X_test)\ny_score = modelo.score(X_test,y_test)\ny_score","8e587c81":"compara = pd.DataFrame(y_test)\ncompara['predictKNN'] = y_pred\ncompara.head(100)","4a9c84b8":"from sklearn.tree import DecisionTreeClassifier, export_graphviz\ndtc = DecisionTreeClassifier()\nmodelo = dtc.fit(X_train,y_train)\ny_train = modelo.predict(X_test)\n#guarde o resultado da predi\u00e7\u00e3o em uma nova coluna \"predictAD\"\nimport graphviz as gpz\ndot_data = export_graphviz(dtc)\ngraph = gpz.Source(dot_data)\ngraph","86f8d8a3":"10 - Execute o algoritmo dos K vizinhos mais pr\u00f3ximos com K=3, guarde o resultado da predi\u00e7\u00e3o em uma nova coluna do dataframe \"predictKNN\"","eca3c5bd":"9 - utilize train_test_split para criar bases de treino e teste","1b7878f6":"2 - Execute a fun\u00e7\u00e3o describe para ver um resumo estat\u00edstico descritivo","d98308e6":"3 - utilize   df.isnull().sum() para saber em quais colunas h\u00e1 valores faltantes NaN\n","c359ccd1":"5 - Preencha os campos faltantes das colunas com valores cont\u00ednuos com a m\u00e9dia\n        * Colunas com valores cont\u00ednuos com valores faltantes:  A2 e A14","d8acf26e":"7 - Transforme a coluna objetivo  A16 primeiro para o tipo category e depois fa\u00e7a a codifica\u00e7\u00e3o num\u00e9rica utiliando a fun\u00e7ao df[\"A16\"].cat.codes","da84009b":"4 - Preencha os campos das colunas com valores categ\u00f3ricos com a moda dos valores da coluna, para isso use a fun\u00e7\u00e3o fillna( ) e moda( )\n    * defina um vetor com as colunas a serem alteradas\n    * use um la\u00e7o para varrer o vetor   (for n in colunas: df.fillna...)","14957cbc":"8 - utilize a fun\u00e7\u00e3o pd.get_dummies para transformar todas as colunas categ\u00f3ricas para indicadores de vari\u00e1veis. \n### df = pd.get_dummies( df, columns=['A1','A4','A5','A6','A7','A9','A10','A12','A13'])","b649635a":"1 - Importar arquivo (credit-screening.data) procure o dataset no Kaggle, caso n\u00e3o encontre, importe o arquivo dispon\u00edvel no Google Classroom. Importe o arquivo substituindo valores faltantes \"?\" por NaN e inserir o nome das colunas utilizando o vetor abaixo.\n\n#### nomes = [\"A1\",\"A2\",\"A3\",\"A4\",\"A5\",\"A6\",\"A7\",\"A8\",\"A9\",\"A10\",\"A11\",\"A12\",\"A13\",\"A14\",\"A15\",\"A16\"]5 - ","d1595ae5":"11 - Execute o algoritmo de \u00c1rvore de Decis\u00e3o, guarde o resultado da predi\u00e7\u00e3o em uma nova coluna predictAD","cfdb7420":"1. Title: Credit Approval\n2. Sources: \n    (confidential)\n    Submitted by quinlan@cs.su.oz.au\n3.  Past Usage:\n    See Quinlan,\n    * \"Simplifying decision trees\", Int J Man-Machine Studies 27, Dec 1987, pp. 221-234.\n    * \"C4.5: Programs for Machine Learning\", Morgan Kaufmann, Oct 1992\n4.  Relevant Information:\n    This file concerns credit card applications.  All attribute names\n    and values have been changed to meaningless symbols to protect\n    confidentiality of the data.\n    This dataset is interesting because there is a good mix of\n    attributes -- continuous, nominal with small numbers of\n    values, and nominal with larger numbers of values.  There\n    are also a few missing values.\n5.  Number of Instances: 690\n6.  Number of Attributes: 15 + class attribute\n7.  Attribute Information:\n    A1:\tb, a.\n    A2:\tcontinuous.\n    A3:\tcontinuous.\n    A4:\tu, y, l, t.\n    A5:\tg, p, gg.\n    A6:\tc, d, cc, i, j, k, m, r, q, w, x, e, aa, ff.\n    A7:\tv, h, bb, j, n, z, dd, ff, o.\n    A8:\tcontinuous.\n    A9:\tt, f.\n    A10:\tt, f.\n    A11:\tcontinuous.\n    A12:\tt, f.\n    A13:\tg, p, s.\n    A14:\tcontinuous.\n    A15:\tcontinuous.\n    A16: +,-         (class attribute)\n8.  Missing Attribute Values:\n    37 cases (5%) have one or more missing values.  The missing\n    values from particular attributes are:\n    A1:  12 ; A2:  12; A4:   6;  A5:   6; A6:   9;   A7:   9;    A14: 13\n9.  Class Distribution\n      +: 307 (44.5%)    -: 383 (55.5%)","b0384835":"*  Colunas Categ\u00f3ricas: A1, A4, A5, A6, A7, A9, A10, A12, A13\n*  Colunas Categ\u00f3ricas com valores faltantes : A1, A4, A5, A6, A7 preencher com a moda (valor que mais aparece na coluna)\n*  Colunas com valores cont\u00ednuos: A2, A3, A8, A11, A14, A15\n*  Colunas com valores cont\u00ednuos com valores faltantes:  A2 e A14 preencher com m\u00e9dia","3c7754bc":"6 - transforme todas as colunas com valores categ\u00f3ricos para o tipo \"category\"  use a fun\u00e7\u00e3o astype\n        * Colunas Categ\u00f3ricas: A1, A4, A5, A6, A7, A9, A10, A12, A13"}}