{"cell_type":{"11655bba":"code","48b9fd58":"code","7bd08240":"code","4a0269f6":"code","91374548":"code","a7bb29b2":"code","a94e8c06":"code","24c78821":"code","692bfa58":"code","e576fda7":"code","bf291b24":"markdown","e21b9583":"markdown","c819c17f":"markdown","da872ad5":"markdown","b1830de8":"markdown","7c38d62b":"markdown","d81aaa09":"markdown","ec88f38b":"markdown"},"source":{"11655bba":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nimport tensorflow as tf","48b9fd58":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","7bd08240":"# 1. delete insignificant feature\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\n# 2. check null and fill new data\ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n# 3.one hot encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","4a0269f6":"y = train['Survived']\nX = train.drop(['Survived'], axis=1)\nX_test = test\nRANDOM_SEED = 2021\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.25,random_state = RANDOM_SEED )","91374548":"model = tf.keras.models.Sequential([\ntf.keras.layers.Flatten(input_shape=X_train.shape[1:]),\ntf.keras.layers.Dense(50, activation=\"relu\"),\ntf.keras.layers.Dense(1,activation=\"sigmoid\")\n])\n\nopt = tf.keras.optimizers.SGD(learning_rate=0.001)\nmodel.compile(loss='binary_crossentropy', optimizer=opt, metrics=['mae'])\n\nmodel.fit(X_train, y_train, epochs=1000, validation_data=(X_val, y_val))","a7bb29b2":"model.evaluate(X_val,y_val)","a94e8c06":"y_pred = model.predict(X_test)","24c78821":"y_pred[:5]","692bfa58":"submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nsubmission.Survived = (y_pred > 0.5).astype(int)\nsubmission.to_csv(\"submission.csv\",index=False)","e576fda7":"submission.head()","bf291b24":"# load data","e21b9583":"# preprocessing","c819c17f":"# evaluate validation set","da872ad5":"# make tensorflow model","b1830de8":"# predict test data","7c38d62b":"# submission","d81aaa09":"# a.splite input data adn target data  \n# b.splite train set adn validation set  ","ec88f38b":"# import libraries"}}