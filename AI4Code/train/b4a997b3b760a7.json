{"cell_type":{"5c062c06":"code","d9942dc1":"code","518cf490":"code","8ded1605":"code","4d28171d":"code","4dbed61f":"code","3f921356":"code","93699cbd":"code","43dd3e63":"code","6c70fb19":"code","6cefff88":"code","84f19068":"code","977234bd":"code","51f7b380":"code","6cdcb9b8":"code","e94672b5":"code","97889cd0":"code","ebd79489":"code","2886b83d":"code","9c575a6f":"code","ce77dcd9":"code","16ad6155":"code","a6832e1e":"code","67e17d46":"code","c3f8a124":"code","024e5597":"code","215f8b8f":"code","028841d8":"code","33993f6a":"code","37a4bddd":"code","a26e7b70":"code","c2d37438":"code","e22b0156":"code","68806f13":"code","931bb97e":"code","3a43378c":"code","9a237ec4":"code","dbddfc78":"code","593f0104":"code","c389289d":"code","f10430c1":"code","e1ebdbed":"code","885f50d8":"code","5626e8a7":"code","92e0d512":"code","e447af9c":"code","6c383951":"markdown","7b98c39c":"markdown","5fbc4691":"markdown","25a9a6fc":"markdown","cace0c7f":"markdown","ba254dab":"markdown","a7b3559a":"markdown","6f5497cf":"markdown","739d00e7":"markdown","2b0802eb":"markdown","4206fdcd":"markdown","e024545f":"markdown","629aa5b8":"markdown","9d7ad85d":"markdown","a95f48cc":"markdown","f9f0399e":"markdown","0bcbdd8c":"markdown","231b206e":"markdown","2e24bb47":"markdown","c91b79b5":"markdown","2e31501c":"markdown","7223d730":"markdown"},"source":{"5c062c06":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d9942dc1":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import linear_model\n","518cf490":"df=pd.read_csv(\"..\/input\/a-fine-windy-day-hackerearth-ml-challenge\/train_data.csv\")\ntest = pd.read_csv(\"..\/input\/a-fine-windy-day-hackerearth-ml-challenge\/test_data.csv\")","8ded1605":"df.head()","4d28171d":"df.describe()","4dbed61f":"df.isnull().sum()","3f921356":"df.columns","93699cbd":"corr_data = df.corr()\n\nplt.figure(figsize=(20,12))\nsns.heatmap(corr_data.abs(), annot=True, fmt='.3f',cmap='hot',square=True)\nplt.show()","43dd3e63":"sns.distplot(df['windmill_generated_power(kW\/h)'])","6c70fb19":"df['wind_speed(m\/s)']=df['wind_speed(m\/s)'].fillna(df['wind_speed(m\/s)'].median())\ndf['atmospheric_temperature(\u00b0C)']=df['atmospheric_temperature(\u00b0C)'].fillna(df['atmospheric_temperature(\u00b0C)'].median())\ndf['shaft_temperature(\u00b0C)']=df['shaft_temperature(\u00b0C)'].fillna(df['shaft_temperature(\u00b0C)'].median())\ndf['blades_angle(\u00b0)']=df['blades_angle(\u00b0)'].fillna(df['blades_angle(\u00b0)'].median())\ndf['gearbox_temperature(\u00b0C)']=df['gearbox_temperature(\u00b0C)'].fillna(df['gearbox_temperature(\u00b0C)'].median())\ndf['engine_temperature(\u00b0C)']=df['engine_temperature(\u00b0C)'].fillna(df['engine_temperature(\u00b0C)'].median())\ndf['motor_torque(N-m)']=df['motor_torque(N-m)'].fillna(df['motor_torque(N-m)'].median())\ndf['generator_temperature(\u00b0C)']=df['generator_temperature(\u00b0C)'].fillna(df['generator_temperature(\u00b0C)'].median())\ndf['atmospheric_pressure(Pascal)']=df['atmospheric_pressure(Pascal)'].fillna(df['atmospheric_pressure(Pascal)'].median())\ndf['windmill_body_temperature(\u00b0C)']=df['windmill_body_temperature(\u00b0C)'].fillna(df['windmill_body_temperature(\u00b0C)'].median())\ndf['wind_direction(\u00b0)']=df['wind_direction(\u00b0)'].fillna(df['wind_direction(\u00b0)'].median())\ndf['resistance(ohm)']=df['resistance(ohm)'].fillna(df['resistance(ohm)'].median())\ndf['rotor_torque(N-m)']=df['rotor_torque(N-m)'].fillna(df['rotor_torque(N-m)'].median())\ndf['rotor_torque(N-m)']=df['rotor_torque(N-m)'].fillna(df['rotor_torque(N-m)'].median())\ndf['turbine_status']=df['turbine_status'].fillna(\"Unknown\")\ndf['cloud_level']=df['cloud_level'].fillna(\"Unknown\")\ndf['blade_length(m)']=df['blade_length(m)'].fillna(df['blade_length(m)'].median())\ndf['windmill_height(m)']=df['windmill_height(m)'].fillna(df['windmill_height(m)'].median())","6cefff88":"test['wind_speed(m\/s)']=test['wind_speed(m\/s)'].fillna(test['wind_speed(m\/s)'].median())\ntest['atmospheric_temperature(\u00b0C)']=test['atmospheric_temperature(\u00b0C)'].fillna(test['atmospheric_temperature(\u00b0C)'].median())\ntest['shaft_temperature(\u00b0C)']=test['shaft_temperature(\u00b0C)'].fillna(test['shaft_temperature(\u00b0C)'].median())\ntest['blades_angle(\u00b0)']=test['blades_angle(\u00b0)'].fillna(test['blades_angle(\u00b0)'].median())\ntest['gearbox_temperature(\u00b0C)']=test['gearbox_temperature(\u00b0C)'].fillna(test['gearbox_temperature(\u00b0C)'].median())\ntest['engine_temperature(\u00b0C)']=test['engine_temperature(\u00b0C)'].fillna(test['engine_temperature(\u00b0C)'].median())\ntest['motor_torque(N-m)']=test['motor_torque(N-m)'].fillna(test['motor_torque(N-m)'].median())\ntest['generator_temperature(\u00b0C)']=test['generator_temperature(\u00b0C)'].fillna(test['generator_temperature(\u00b0C)'].median())\ntest['atmospheric_pressure(Pascal)']=test['atmospheric_pressure(Pascal)'].fillna(test['atmospheric_pressure(Pascal)'].median())\ntest['windmill_body_temperature(\u00b0C)']=test['windmill_body_temperature(\u00b0C)'].fillna(test['windmill_body_temperature(\u00b0C)'].median())\ntest['wind_direction(\u00b0)']=test['wind_direction(\u00b0)'].fillna(test['wind_direction(\u00b0)'].median())\ntest['resistance(ohm)']=test['resistance(ohm)'].fillna(test['resistance(ohm)'].median())\ntest['rotor_torque(N-m)']=test['rotor_torque(N-m)'].fillna(test['rotor_torque(N-m)'].median())\ntest['rotor_torque(N-m)']=test['rotor_torque(N-m)'].fillna(test['rotor_torque(N-m)'].median())\ntest['turbine_status']=test['turbine_status'].fillna(\"Unknown\")\ntest['cloud_level']=test['cloud_level'].fillna(\"Unknown\")\ntest['blade_length(m)']=test['blade_length(m)'].fillna(test['blade_length(m)'].median())\ntest['windmill_height(m)']=test['windmill_height(m)'].fillna(test['windmill_height(m)'].median())\ntest['area_temperature(\u00b0C)']=test['area_temperature(\u00b0C)'].fillna(test['area_temperature(\u00b0C)'].median())","84f19068":"df.describe()","977234bd":"df = df.dropna(how='any',axis=0) \n","51f7b380":"df.isnull().sum()","6cdcb9b8":"test.isnull().sum()","e94672b5":"labelencoder = LabelEncoder()\ndf['turbine_status'] = labelencoder.fit_transform(df['turbine_status'])\ndf['cloud_level'] = labelencoder.fit_transform(df['cloud_level'])\ntest['turbine_status'] = labelencoder.fit_transform(test['turbine_status'])\ntest['cloud_level'] = labelencoder.fit_transform(test['cloud_level'])","97889cd0":"## Converting the feature \"datetime\" into pandas datetime format\ndf['datetime'] = pd.to_datetime(df['datetime'])\ntest['datetime'] = pd.to_datetime(test['datetime'])","ebd79489":"## Extracting some informations for the feature \"datetime\" and making new features from it\ndf['dmonth'] = df['datetime'].dt.month\ndf['dday'] = df['datetime'].dt.day\ndf['ddayofweek'] = df['datetime'].dt.dayofweek\n\ntest['dmonth'] = test['datetime'].dt.month\ntest['dday'] = test['datetime'].dt.day\ntest['ddayofweek'] = test['datetime'].dt.dayofweek","2886b83d":"X = df.drop(columns=['windmill_generated_power(kW\/h)','tracking_id', 'datetime'],axis=1)\ny = df['windmill_generated_power(kW\/h)']\ny = y.values.ravel()","9c575a6f":"X_TEST = test.drop(columns=['tracking_id', 'datetime'],axis=1)","ce77dcd9":"#scaler = RobustScaler()\n#X = scaler.fit_transform(X)\n#X_TEST = scaler.transform(X_TEST)","16ad6155":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state=1)\nprint(X.shape,y.shape)\nprint(X_train.shape,y_train.shape)\nprint(X_test.shape,y_test.shape)","a6832e1e":"model=LinearRegression()","67e17d46":"model_1=model.fit(X_train,y_train)","c3f8a124":"print('Accuracy score for training: {:.4f}'.format(model_1.score(X_train,y_train)))\nprint('Accuracy score for testing: {:.4f}'.format(model_1.score(X_test,y_test)))","024e5597":"gb = GradientBoostingRegressor(criterion='mse',random_state=0,max_depth=5,n_estimators=500,min_samples_split=2,min_samples_leaf=2)\ngb_1 = gb.fit(X_train,y_train)","215f8b8f":"print('Accuracy score for training: {:.4f}'.format(gb_1.score(X_train,y_train)))\nprint('Accuracy score for testing: {:.4f}'.format(gb_1.score(X_test,y_test)))","028841d8":"rf = RandomForestRegressor()\nrf_2 = rf.fit(X_train,y_train)","33993f6a":"print('Accuracy score for training: {:.4f}'.format(rf_2.score(X_train,y_train)))\nprint('Accuracy score for testing: {:.4f}'.format(rf_2.score(X_test,y_test)))","37a4bddd":"et = ExtraTreesRegressor(criterion='mse', random_state=0, n_jobs=-1, min_samples_leaf=1, max_depth=20, min_samples_split=3, n_estimators=1000)\n\net_1 = et.fit(X_train, y_train)\n","a26e7b70":"print('Accuracy score for training: {:.4f}'.format(et_1.score(X_train,y_train)))\nprint('Accuracy score for testing: {:.4f}'.format(et_1.score(X_test,y_test)))","c2d37438":"#xgb = XGBRegressor(colsample_bytree=1,gamma=0.5,max_depth=10,min_child_weight=5,subsample=0.8)\n#xgb_1 = xgb.fit(X_train,y_train)\n#print('Accuracy score for training: {:.4f}'.format(xgb_1.score(X_train,y_train)))\n#print('Accuracy score for testing: {:.4f}'.format(xgb_1.score(X_test,y_test)))","e22b0156":"#setting parameter grid for hyperparameter tuning\n#param_grid = {\n       'learning_rate': [0.01, 0.1],\n        'max_depth': [3, 5, 7, 10],\n        'min_child_weight': [1, 3, 5],\n        'subsample': [0.5, 0.7],\n        'colsample_bytree': [0.5, 0.7],\n        'n_estimators' : [100, 200, 500],\n        'objective': ['reg:squarederror']\n        }","68806f13":"#r2 = XGBRegressor(random_state= 11)\n#grid_search2 = GridSearchCV(estimator = r2, param_grid = param_grid,cv = 3, n_jobs = -1)\n#grid_search2.fit(X_train, y_train)","931bb97e":"#grid_search2.best_params_","3a43378c":"#xgb = XGBRegressor(colsample_bytree=1,gamma=0.5,max_depth=5,min_child_weight=1,subsample=1)\n#xgb_1 = xgb.fit(X_train,y_train)\n#print('Accuracy score for training: {:.4f}'.format(xgb_1.score(X_train,y_train)))\n#print('Accuracy score for testing: {:.4f}'.format(xgb_1.score(X_test,y_test)))","9a237ec4":"#xgb = XGBRegressor(colsample_bytree=0.7,max_depth=7,learning_rate = 0.1,min_child_weight=3,subsample=0.7,n_estimators = 200,objective= 'reg:squarederror')\n#xgb_1 = xgb.fit(X_train,y_train)\n#print('Accuracy score for training: {:.4f}'.format(xgb_1.score(X_train,y_train)))\n#print('Accuracy score for testing: {:.4f}'.format(xgb_1.score(X_test,y_test)))","dbddfc78":"xgb = XGBRegressor(n_estimators=500,max_depth=5,booster='gbtree',n_jobs=-1,learning_rate=0.1,reg_lambda=0.01,reg_alpha=0.3)\nxgb_1 = xgb.fit(X_train,y_train)\nprint('Accuracy score for training: {:.4f}'.format(xgb_1.score(X_train,y_train)))\nprint('Accuracy score for testing: {:.4f}'.format(xgb_1.score(X_test,y_test)))","593f0104":"meta_model = linear_model.Lasso(alpha=0.1,tol = 0.001, random_state= 0)","c389289d":"y_pred_train_1 = gb_1.predict(X_train).reshape(-1,1)\ny_pred_train_2 = xgb_1.predict(X_train).reshape(-1,1)\ny_pred_train_3 = rf_2.predict(X_train).reshape(-1,1)\nX_stack_train = np.concatenate([y_pred_train_1,\n                                    y_pred_train_2,\n                                    y_pred_train_3], axis=1)\n    \ny_pred_test_1 = gb_1.predict(X_test).reshape(-1,1)\ny_pred_test_2 = xgb_1.predict(X_test).reshape(-1,1)\ny_pred_test_3 = rf_2.predict(X_test).reshape(- 1,1)\nX_stack_test = np.concatenate([y_pred_test_1,\n                                   y_pred_test_2,\n                                   y_pred_test_3], axis=1)\n    \nmeta_model_1=meta_model.fit(X_stack_train, y_train)","f10430c1":"print('Accuracy score for training: {:.4f}'.format(meta_model_1.score(X_stack_train,y_train)))\nprint('Accuracy score for testing: {:.4f}'.format(meta_model_1.score(X_stack_test,y_test)))","e1ebdbed":"sub = test[['tracking_id','datetime']]","885f50d8":"predictions = xgb.predict(X_TEST)","5626e8a7":"predictions","92e0d512":"sub['windmill_generated_power(kW\/h)'] = predictions","e447af9c":"sub.to_csv('.\/s3.csv',header=True,index=False)\nsub","6c383951":"### Generating heatmap through correlations","7b98c39c":"### Predicting test data and exporting it","5fbc4691":"### Parameters after hyperparameter tuning using gridsearch","25a9a6fc":"rf = RandomForestRegressor(n_estimators = 12, max_features = 'auto', max_depth = 10, bootstrap = True)\nrf_1 = rf.fit(X_train,y_train)","cace0c7f":"### Implementing Extra trees regressor","ba254dab":"### Checking for null values","a7b3559a":"### Implementing Gradient Boosting","6f5497cf":"### Importing all the required libraries","739d00e7":"### Implementing Random Forest","2b0802eb":"### Using label encoder for categorical variables","4206fdcd":"### Reading the data","e024545f":"### Implementing XGBoost Regressor(Vanilla)","629aa5b8":"### Generating train and test datasets","9d7ad85d":"### Implementing Stacking","a95f48cc":"print('Accuracy score for training: {:.4f}'.format(rf_1.score(X_train,y_train)))\nprint('Accuracy score for testing: {:.4f}'.format(rf_1.score(X_test,y_test)))","f9f0399e":"n_estimators = [int(x) for x in np.linspace(start = 5 , stop = 15, num = 10)] # returns 10 numbers \n\nmax_features = ['auto', 'log2']\n\n\nbootstrap = [True, False]\n\nr_grid = {'n_estimators': n_estimators,\n\n               'max_features': max_features,\n\n               'max_depth': [3,5,8,10],\n\n               'bootstrap': bootstrap}\n\nprint(r_grid)","0bcbdd8c":"### Implementing Linear Regressor","231b206e":"print(rfr_random.best_params_)","2e24bb47":"### Hyperparameter tuning by RandomsearchCV (Not much effective)  ","c91b79b5":"### Handling missing data through mean, median and mode","2e31501c":"### Distribution of dependent variable(power generated by windmill)","7223d730":"rfr = RandomForestRegressor(random_state = 1)\n\nrfr_random = RandomizedSearchCV(estimator=rfr, param_distributions=r_grid, n_iter = 20, scoring='neg_mean_absolute_error', cv = 3, verbose=2, random_state=42, n_jobs=-1, return_train_score=True)\n\nrfr_random.fit(X_train, y_train);"}}