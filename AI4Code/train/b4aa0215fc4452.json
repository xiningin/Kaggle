{"cell_type":{"13f2b07b":"code","cc3d67f0":"code","92310f6c":"code","561e2d78":"code","437094ab":"code","be28f622":"code","ce984ad8":"code","30f85bab":"code","518c3a07":"code","8fed56c3":"code","681384c2":"code","272cc590":"code","3d85abd2":"code","b22cba8f":"code","678b5c78":"code","a79f079b":"code","c80039af":"code","89eb4704":"code","af0b1655":"code","078c49b8":"code","d74ef4fb":"code","aed81c66":"code","67479deb":"code","82281615":"code","62e37e2d":"code","6f9a33fa":"code","caa66f1f":"code","deafe597":"code","18c6287c":"code","9dd0109e":"code","03fd8f1a":"code","077bfb9a":"code","95c755ec":"code","51904244":"code","f0fd136e":"code","85f3543c":"code","c556e2f0":"code","9c282e32":"code","bfa9f7d5":"markdown","447729be":"markdown","929d2489":"markdown","cbe90faf":"markdown","35663ad9":"markdown","b61cd9f1":"markdown","a25b041a":"markdown","e89df25b":"markdown","314b1c8c":"markdown","75bab7ce":"markdown","922a26b8":"markdown","effb0eac":"markdown","837c8011":"markdown","9ac95f54":"markdown","ad3ecde4":"markdown","276b60c1":"markdown","bc375bc7":"markdown"},"source":{"13f2b07b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nsns.set_theme(style=\"darkgrid\")","cc3d67f0":"df = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","92310f6c":"df","561e2d78":"df.info()","437094ab":"df['stroke'] = df['stroke'].astype(\"int64\")\ndf['hypertension'] = df['hypertension'].astype(\"int64\")\ndf['heart_disease'] = df['heart_disease'].astype(\"int64\")","be28f622":"numeric = ['age', 'avg_glucose_level', 'bmi']","ce984ad8":"df.describe()","30f85bab":"df[['gender', 'id']].groupby('gender').count().reset_index()","518c3a07":"df = df[df['gender'] != 'Other']","8fed56c3":"bmi_mean = df['bmi'].mean()\ndf['bmi'] = df['bmi'].apply(lambda x: bmi_mean if np.isnan(x) else x)\ndf['bmi'].head()","681384c2":"fig, ax = plt.subplots(1, 2, figsize=(14,5))\nsns.countplot(x='gender', data=df, ax=ax[0])\nax[0].set(xlabel=None, title='Gender')\nsns.histplot(data=df, x=\"age\", hue=\"gender\", multiple ='stack', ax=ax[1])\nax[1].set(xlabel=None, title='Age')","272cc590":"fig, ax = plt.subplots(2, 2, figsize=(12,7), sharex=True)\nfig.suptitle(\"People Characteristic\")\nsns.countplot(y='work_type', data=df, ax=ax[0,0])\nax[0,0].set(xlabel=None, ylabel=None, title='Work Type', yticklabels=['Private', 'Self-employed', 'Govt Job', 'Children', 'Never Worked'])\nsns.countplot(y='smoking_status', data=df, ax=ax[0,1])\nax[0,1].set(xlabel=None, ylabel=None, title='Smoking Status', yticklabels=['Formerly Smoked', 'Never Smoked', 'Smokes', 'Unknown'])\nsns.countplot(y='ever_married', data=df, ax=ax[1,0])\nax[1,0].set(xlabel=None, ylabel=None, title='Marriage Status', yticklabels=['Married', 'Single'])\nsns.countplot(y='Residence_type', data=df, ax=ax[1,1])\nax[1,1].set(xlabel=None, ylabel=None, title='Residence Type', yticklabels=['Urban', 'Rural'])\nfig.tight_layout()","3d85abd2":"fig, ax = plt.subplots(1,2, figsize=(10, 4), sharey=True)\nsns.kdeplot(df['bmi'], shade=True, ax=ax[0])\nax[0].set(xlabel=None, title='BMI')\nsns.kdeplot(df['avg_glucose_level'], shade=True, ax=ax[1])\nax[1].set(xlabel=None, title='Glucose Level')\nfig.tight_layout()","b22cba8f":"fig, ax = plt.subplots(1,2, figsize=(10, 6), sharey=True)\nsns.boxplot(x='gender', y='age', data=df[df['hypertension']==1], ax=ax[0])\nax[0].set(xlabel=None, title='Hypertension')\nsns.boxplot(x='gender', y='age', data=df[df['heart_disease']==1], ax=ax[1])\nax[1].set(xlabel=None, ylabel=None, title='Heart Disease')\nfig.tight_layout()","678b5c78":"stroke_df = df[df['stroke']==1]\nstroke_df","a79f079b":"stroke_df_by_gender = stroke_df.groupby('gender').count()[['stroke']].reset_index()\ndf_by_stroke = df.groupby('stroke').count()[['id']].reset_index()\nstroke_colors =[px.colors.qualitative.Set2[7], px.colors.qualitative.Dark2[7]]\ngender_colors = [px.colors.qualitative.Plotly[1], px.colors.qualitative.Plotly[0]]\n\nfig = make_subplots(\n    rows=1, cols=2,\n    subplot_titles=('', 'Stroke data Gender-Wised'),\n    specs=[[{'type':'domain'}, {'type':'bar'}]]\n)\n\nfig.add_trace(\n    go.Pie(labels=['Healthy','Stroke'],\n           values=df_by_stroke['id'],\n           hoverinfo='percent+label+value',\n           marker=dict(colors=stroke_colors),\n           rotation=100\n           ),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Bar(y=stroke_df_by_gender['gender'], \n           x=stroke_df_by_gender['stroke'],\n           texttemplate='%{x} Cases',\n           textposition ='inside',\n           orientation='h',\n           hoverinfo='x+y',\n           marker=dict(color=gender_colors)),\n    row=1, col=2\n)\n\nfig.update_layout(height=600, width=800, \n                  showlegend=False,\n                  title_text=\"Stroke Count\",\n                 )\nfig.show()","c80039af":"labels = ['0-10', '10-20', '20-30', '30-40', '40-50', '50-60', '60-70', '70-80', '80-90']\nmale_stroke_df = stroke_df[stroke_df['gender']=='Male']\nmale_stroke_df = male_stroke_df.groupby(pd.cut(male_stroke_df[\"age\"], np.arange(0, 100, 10),labels=labels)).size().reset_index(name='stroke')\n\nfemale_stroke_df = stroke_df[stroke_df['gender']=='Female']\nfemale_stroke_df = female_stroke_df.groupby(pd.cut(female_stroke_df[\"age\"], np.arange(0, 100, 10),labels=labels)).size().reset_index(name='stroke')\n\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=male_stroke_df['age'],\n    y=male_stroke_df['stroke'],\n    name='Male',\n    marker_color=px.colors.qualitative.Plotly[0]\n))\nfig.add_trace(go.Bar(\n    x=female_stroke_df['age'],\n    y=female_stroke_df['stroke'],\n    name='Female',\n    marker_color=px.colors.qualitative.Plotly[1]\n))\n\n\nfig.update_layout(barmode='group', title='Stroke data Age-Wised')\nfig.show()","89eb4704":"parameter = pd.get_dummies(df[['gender','work_type', 'Residence_type', 'smoking_status', 'ever_married']])\nparameter['stroke'] = df['stroke']\ncount_by_parameter = parameter.groupby('stroke').sum().transpose()\ncount_by_parameter.columns = ['non_stroke','stroke']\ncount_by_parameter = count_by_parameter.reset_index()\ncount_by_parameter['p_stroke'] = count_by_parameter['stroke']\/(count_by_parameter['non_stroke']+count_by_parameter['stroke']) * 100\ncount_by_parameter['index'] = ['Female', 'Male', 'Govt Job', 'Never Worked', 'Private', 'Self-employed', 'Children', 'Rural', 'Urban', 'Unknown', 'Formely Smoked', 'Never Smoked', 'Smokes', 'Single', 'Married']","af0b1655":"count_by_parameter\n\nfig = make_subplots(\n    rows=2, cols=2,\n    subplot_titles=('Work Type', 'Residence Type', 'Smoking Status', 'Marriage Status'),\n    specs=[[{'type':'bar'}, {'type':'bar'}], [{'type':'bar'}, {'type':'bar'}]],\n    shared_xaxes=True,\n)\nfor x in ['non_stroke', 'stroke']:\n    if x == 'non_stroke':\n        m_color = px.colors.qualitative.Plotly[2]\n    else:\n        m_color = px.colors.qualitative.Plotly[1]\n        \n    fig.add_trace(\n        go.Bar(y=count_by_parameter['index'][2:7],\n               x=count_by_parameter[x][2:7],\n               marker_color = m_color,\n               name= x,\n               orientation='h',\n              ), \n        row=1, col=1\n    )\n\n    fig.add_trace(\n        go.Bar(y=count_by_parameter['index'][7:9],\n               x=count_by_parameter[x][7:9],\n               marker_color = m_color,\n               name= x,\n               orientation='h',\n              ),\n        row=1, col=2\n    )\n\n    fig.add_trace(\n        go.Bar(y=count_by_parameter['index'][9:13],\n               x=count_by_parameter[x][9:13],\n               marker_color = m_color,\n               name= x,\n               orientation='h',\n              ),\n        row=2, col=1\n    )\n\n    fig.add_trace(\n        go.Bar(y=count_by_parameter['index'][13:15],\n               x=count_by_parameter[x][13:15],\n               marker_color = m_color, \n               name= x,\n               orientation='h',\n              ),\n        row=2, col=2\n    )\n\n\nfig.update_layout(barmode='stack', title='Stroke Cases Category-Wised', showlegend=False\n                 )","078c49b8":"stroke_df = df[df['stroke']==1]\nnon_stroke_df = df[df['stroke']==0]\n\nfig = make_subplots(\n    rows=1, cols=2,\n    specs=[[{'type':'xy'}, {'type':'xy'}]],\n    subplot_titles=['Avg Glucose Level','BMI']\n)\n\nfig.add_trace(\n    go.Box(x=non_stroke_df['avg_glucose_level'],\n           boxpoints='all', \n           name='Healthy',\n           marker=dict(color=px.colors.qualitative.Plotly[2])), \n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Box(x=stroke_df['avg_glucose_level'],\n           boxpoints='all',\n           name='Stroke',\n           marker=dict(color=px.colors.qualitative.Plotly[1])), \n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Box(x=non_stroke_df['bmi'],\n           boxpoints='all',\n           name='Healthy',\n           marker=dict(color=px.colors.qualitative.Plotly[2])), \n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Box(x=stroke_df['bmi'],\n           boxpoints='all',\n           name='Stroke',\n           marker=dict(color=px.colors.qualitative.Plotly[1])), \n    row=1, col=2\n)\n\nfig.update_layout(showlegend=False)\nfig.show()","d74ef4fb":"data = df[['hypertension', 'heart_disease', 'stroke']]\ndata.columns = ['Hypertension', 'Heart Disease', 'Stroke']\nfig = px.parallel_categories(data, color='Stroke',  color_continuous_scale=px.colors.sequential.Brwnyl,\n                             title = 'Stroke data Disease-Wised')\nfig.update_layout(coloraxis_showscale=False)\nfig.show()","aed81c66":"sns.pairplot(df[numeric + ['stroke']], hue='stroke')","67479deb":"df['ever_married'] = df['ever_married'].apply(lambda x : 1 if x == 'Yes' else 0)","82281615":"work_type = pd.get_dummies(df['work_type'])\nresidence_type = pd.get_dummies(df['Residence_type'])\nsmoking_status = pd.get_dummies(df['smoking_status'])\ngender = pd.get_dummies(df['gender'])\ndf = df.join(work_type)\ndf = df.join(residence_type)\ndf = df.join(smoking_status)\ndf = df.join(gender)\ndf = df.drop(['work_type', 'Residence_type', 'smoking_status', 'gender'], axis=1)","62e37e2d":"plt.figure(figsize=(15,15))\nsns.heatmap(df.corr(), annot=True, fmt='.2f')","6f9a33fa":"from imblearn.over_sampling import SMOTE","caa66f1f":"balance = SMOTE(sampling_strategy = 'auto', random_state = 0, k_neighbors = 5)\nX, y = balance.fit_resample(df.drop(['id'], axis =1), df['stroke'])","deafe597":"y.value_counts()","18c6287c":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix, precision_score, accuracy_score","9dd0109e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","03fd8f1a":"from sklearn import tree","077bfb9a":"clf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train, y_train)","95c755ec":"print('Train set:\\n') #performance on training set\ny_predict = clf.predict(X_train)\nprint(classification_report(y_train, y_predict))\n\nacc_score_train = np.round(accuracy_score(y_train, y_predict), 4)\nprecision_score_train = np.round(precision_score(y_train, y_predict), 4)\n\nprint('\\nTest set:\\n') #performance on test set\ny_predict = clf.predict(X_test)\nprint(classification_report(y_test, y_predict))\n\nacc_score_test = np.round(accuracy_score(y_test, y_predict), 4)\nprecision_score_test = np.round(precision_score(y_test, y_predict), 4)","51904244":"confusion_matrix(y_test, y_predict)","f0fd136e":"from catboost import CatBoostClassifier","85f3543c":"catboost = CatBoostClassifier()\ncatboost.fit(X_train,y_train)","c556e2f0":"print('Train set:\\n') #performance on training set\ny_predict = catboost.predict(X_train)\nprint(classification_report(y_train, y_predict))\n\nacc_score_train = np.round(accuracy_score(y_train, y_predict), 4)\nprecision_score_train = np.round(precision_score(y_train, y_predict), 4)\n\nprint('\\nTest set:\\n') #performance on test set\ny_predict = catboost.predict(X_test)\nprint(classification_report(y_test, y_predict))\n\nacc_score_test = np.round(accuracy_score(y_test, y_predict), 4)\nprecision_score_test = np.round(precision_score(y_test, y_predict), 4)","9c282e32":"confusion_matrix(y_test, y_predict)","bfa9f7d5":"# Model","447729be":"Distribution of people affected by stroke is wider than health's in terms of average glucose level values. <br>\nBut in terms of BMI values, is quite narrow.","929d2489":"There are 249 stroke cases, with more cases on Female than Male.","cbe90faf":"# Data Preprocessing","35663ad9":"# Catboost","b61cd9f1":"People with private job have most cases, 149. <br>\nPeople live in urban residence are more risk than live in rural residence. <br>\nNever smoked people have most cases, 90. <br>\nPeople who is married are more risk than who is single.","a25b041a":"The largest contributor to people who have a stroke is from people who do not have hypertension and heart disease (249 people).","e89df25b":"# Decision Tree","314b1c8c":"Most cases happen to who is around the age of 70-80 for both gender.","75bab7ce":"There are 4 categories in this data <br>\nWork Type       : Private is the one with most data. <br>\nSmoking Status  : Never Smoked is number one with most data, then Unknown as second. <br>\nMarriage Status : We have more married's data than single's. <br>\nResidence Type  : Almost balance in residence type data.","922a26b8":"Female with Hypertension between 51 - 72 years old, and Male's between 52 - 77 years old. <br>\nIn Heart Diease,  Female between 63 - 79 years old, and Male's between 60 - 78 years old.","effb0eac":"# Oversampling","837c8011":"# Visualization of Stroke's Data","9ac95f54":"# Feature Enginering","ad3ecde4":"# Data Composition","276b60c1":"We have highest density BMI in around 30, and Glucose Levl in around 75.","bc375bc7":"We have more Female's data than Male's with age range between 0 - 80 years old."}}