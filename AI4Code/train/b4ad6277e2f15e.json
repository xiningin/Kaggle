{"cell_type":{"0dc943c0":"code","5f7a771c":"code","c93f97fc":"code","7355965b":"code","8ff9bbc2":"code","495669eb":"code","cee8005e":"code","77f6cebe":"code","60e9ae27":"code","88b8a460":"code","df17b4a6":"code","f0bd5051":"code","b6078fcc":"code","098acd71":"code","90427d00":"code","78ae237d":"code","ae8125b8":"code","5b0144ac":"code","aecf94d1":"code","fa9a6852":"code","9483f067":"code","1efed64b":"code","674bc975":"code","c702f4d7":"code","da7f824e":"code","609b76c8":"code","59663e6f":"code","4ed44551":"code","765b7bd5":"code","f1f85527":"code","eff9ca09":"code","9abf3b5a":"code","c630ba30":"code","1a5eaa7d":"code","2a807ae4":"code","fcec5adb":"code","03feb1e3":"markdown","9b701abb":"markdown","9677481d":"markdown","b47ab8cd":"markdown","efbc6447":"markdown","64fb1a2b":"markdown","1c2c21ba":"markdown"},"source":{"0dc943c0":"import os\nfrom xml.etree import ElementTree\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder","5f7a771c":"dataset_path = '\/kaggle\/input\/car-crashes-severity-prediction\/'\n\ndf = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\n\nprint(\"The shape of the dataset is {}.\\n\\n\".format(df.shape))\n\ndf.head()","c93f97fc":"weather_df = pd.read_csv(os.path.join(dataset_path, 'weather-sfcsv.csv'))\nprint(\"The shape of the dataset is {}.\\n\\n\".format(weather_df.shape))\n\nweather_df.head()","7355965b":"tree = ElementTree.parse(os.path.join(dataset_path, 'holidays.xml'))\nroot = tree.getroot()\n\nholidays = []\nfor row in root:\n    try:\n        holidays.append(row[0].text)\n    except Exception as ex:\n        pass\nlen(holidays)","8ff9bbc2":"df.info()","495669eb":"df.drop(columns='ID').describe()","cee8005e":"for c in df.columns:\n    if df[c].dtype in ['object', 'bool']:\n        print(df[c].value_counts(), '\\n')","77f6cebe":"df['Severity'].value_counts()","60e9ae27":"weather_df.info()","88b8a460":"weather_df.describe()","df17b4a6":"for c in weather_df.columns:\n    if weather_df[c].dtype in ['object', 'bool']:\n        print(weather_df[c].value_counts(), '\\n')","f0bd5051":"counts = weather_df['Weather_Condition'].value_counts()\nmask = weather_df['Weather_Condition'].isin(counts[counts < 20].index)\nweather_df['Weather_Condition'][mask] = 'Other'\nprint(weather_df.value_counts('Weather_Condition'))","b6078fcc":"X = weather_df[['Wind_Chill(F)', 'Precipitation(in)', 'Temperature(F)', 'Humidity(%)', 'Wind_Speed(mph)', 'Visibility(mi)']]\nsns.heatmap(X.corr(), annot = True)\nplt.show()","098acd71":"weather_df = weather_df.drop(columns=['Selected', 'Wind_Chill(F)', 'Precipitation(in)'])","90427d00":"weather_df = weather_df.fillna(weather_df.mean())\nweather_df = weather_df.fillna(weather_df.mode().iloc[0])\nweather_df = weather_df.drop_duplicates(['Year','Month', 'Day', 'Hour'])","78ae237d":"duplicateDFRow = df[df.duplicated()]\ndf.drop(duplicateDFRow.index)\nprint(len(duplicateDFRow))","ae8125b8":"def merge_weather(df):\n    merge_list = ['Year','Month', 'Day', 'Hour']\n    new_df = df.merge(weather_df,  how='left', on=merge_list)\n    return new_df","5b0144ac":"def add_is_holiday(df):\n    df['holiday'] = df['timestamp'].dt.date.isin(holidays)\n    return df","aecf94d1":"def add_time_cols(df):\n    df['timestamp'] = pd.to_datetime(df['timestamp'])\n    df['Hour'] = df['timestamp'].apply(lambda x : x.hour)\n    df['Day'] = df['timestamp'].apply(lambda x : x.day)\n    df['DayOfWeek'] = df['timestamp'].apply(lambda x : x.dayofweek)\n    df['Month'] = df['timestamp'].apply(lambda x : x.month)\n    df['Year'] = df['timestamp'].apply(lambda x : x.year)\n    return df","fa9a6852":"df_class_1 = df[df['Severity'] == 1]\ndf_class_2 = df[df['Severity'] == 2]\ndf_class_3 = df[df['Severity'] == 3]\ndf_class_4 = df[df['Severity'] == 4]\ndf_class_1_under = df_class_1.sample(len(df_class_4))\ndf_class_2_under = df_class_2.sample(len(df_class_4))\ndf_class_3_under = df_class_3.sample(len(df_class_4))\ndf_balanced_under = pd.concat([df_class_1_under, df_class_2_under, df_class_3_under, df_class_4])\ndf_balanced_under['Severity'].value_counts()","9483f067":"X = add_time_cols(df_balanced_under)\nX = merge_weather(X)\nX.columns","1efed64b":"object_col = [c for c in X.columns if X[c].dtype == 'object']\nfig, ax = plt.subplots(1,len(object_col), figsize = (20,10))\nfor i, c in enumerate(object_col):\n    sns.histplot(binwidth=0.5, x=c, hue=\"Severity\", data=X, stat=\"count\", multiple=\"stack\", ax=ax[i])\nplt.xticks(rotation=90)\nplt.show()","674bc975":"bool_col = [c for c in X.columns if X[c].dtype == 'bool']\nfig, ax = plt.subplots(1, len(bool_col), figsize = (20,10))\nfor i, c in enumerate(bool_col):\n    sns.countplot(x=c, hue=\"Severity\", data=X,ax=ax[i])\nplt.xticks(rotation=90)\nplt.show()","c702f4d7":"sns.boxplot(x=\"Severity\", y=\"Temperature(F)\", data=X) #,ax=ax[i])\nplt.xticks(rotation=90)\nplt.show()","da7f824e":"sns.boxplot(x=\"Severity\", y='Visibility(mi)', data=X)\nplt.xticks(rotation=90)\nplt.show()","609b76c8":"sns.boxplot(x=\"Severity\", y='Wind_Speed(mph)', data=X) #,ax=ax[i])\nplt.xticks(rotation=90)\nplt.show()","59663e6f":"sns.boxplot(x=\"Severity\", y='Humidity(%)', data=X)\nplt.xticks(rotation=90)\nplt.show()","4ed44551":"encoder = OneHotEncoder(handle_unknown='ignore')\n\ndef encode(df, is_train=False):\n    object_cols = [c for c in df.columns if df[c].dtype == 'object']\n    if is_train:\n        encoder.fit(df[object_cols])\n    X = pd.DataFrame(encoder.transform(df[object_cols]).toarray(), columns=encoder.get_feature_names(object_cols))\n    df = df.drop(columns=object_cols)\n    df = pd.concat([df, X], axis=1)\n    return df\n\ndef pipline(df, my_list, is_train=False):\n    df = add_time_cols(df)\n    df = merge_weather(df)\n    df = add_is_holiday(df)\n    df = df[my_list]\n    df = encode(df, is_train)\n    return df","765b7bd5":"X.columns","f1f85527":"from sklearn.model_selection import train_test_split\n\ntrain_df, val_df = train_test_split(df, test_size=0.2, shuffle =True, random_state=42, stratify=df['Severity'])\n\nX_train = train_df.drop(columns=['ID', 'Severity'])\ny_train = train_df['Severity']\n\nX_val = val_df.drop(columns=['ID', 'Severity'])\ny_val = val_df['Severity']\n","eff9ca09":"from sklearn.ensemble import RandomForestClassifier\n\n# Create an instance of the classifier\nclassifier = RandomForestClassifier(max_depth=2, random_state=0)","9abf3b5a":"from itertools import combinations\nfrom copy import deepcopy\n\ncols = ['Crossing', 'Stop', 'Month', 'Year', 'Hour' ,'Humidity(%)', 'Wind_Speed(mph)']\n\nmax_score = 0\nbest_features = []\nbest_classifier = None\nx = 1\nfor i in range(len(cols) + 1):\n    for j in combinations(cols, i):\n        \n        my_list = ['Lat', 'Lng', 'Distance(mi)']\n        my_list += list(j)\n        \n        X_train_curr = pipline(X_train, my_list, True)\n        X_val_curr = pipline(X_val, my_list)\n        \n        # Train the classifier\n        classifier.fit(X_train_curr, y_train)\n        \n        score = classifier.score(X_val_curr, y_val)\n        \n        if max_score < score:\n            max_score = score\n            best_features = my_list\n            best_classifier = deepcopy(classifier)\n\nprint(\"The best accuracy of the classifier on the validation set is \", max_score)\nprint(\"Features List \", best_features)","c630ba30":"plt.figure(figsize = (20,10))\nimportances_rf = pd.Series(best_classifier.feature_importances_, index = pipline(X_train, best_features, encoder).columns) \nsorted_importances_rf = importances_rf.sort_values() \nsorted_importances_rf.plot(kind='barh', color='lightgreen')\nplt.show()","1a5eaa7d":"test_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\ntest_df.head()","2a807ae4":"X_test = test_df.drop(columns=['ID'])\n\nX_test = pipline(X_test, best_features)\n\ny_test_predicted = best_classifier.predict(X_test)\n\ntest_df['Severity'] = y_test_predicted\n\ntest_df.head()","fcec5adb":"test_df[['ID', 'Severity']].to_csv('\/kaggle\/working\/submission.csv', index=False)","03feb1e3":"# Merge & Data Manipulation","9b701abb":"# EDA","9677481d":"# Model Traning","b47ab8cd":"# Exploratory Data Analysis","efbc6447":"# Model Selection","64fb1a2b":"# Pipline","1c2c21ba":"# Submission File Generation"}}