{"cell_type":{"84f038c8":"code","1ed240e4":"code","5b766483":"code","e87cc58e":"code","64068660":"code","6afed7a7":"code","e9c13488":"code","78a73046":"code","fd9f432c":"code","4e49e760":"code","002468dc":"code","88e09ed9":"code","9e038650":"code","7f7dd490":"code","068f8f79":"code","00f7ab8d":"code","0f75e370":"code","34f98e38":"markdown","43579973":"markdown","e5151347":"markdown","76acfbb3":"markdown","2155d0b6":"markdown","28289888":"markdown","fc8ef56c":"markdown","a24e6410":"markdown","9d6f8c75":"markdown","f6fb48bb":"markdown","f52d71a9":"markdown","50787606":"markdown","5a824bf3":"markdown","da7c4b28":"markdown","66be3438":"markdown"},"source":{"84f038c8":"!pip install pydot\n!pip install graphviz","1ed240e4":"# Basic data manipulation packages\nimport numpy as np \nimport pandas as pd \nimport os\n\n# Visualization\nimport matplotlib.pyplot as plt\nfrom keras.utils import plot_model\n\n# Data Pre-processing\nfrom sklearn.preprocessing import MinMaxScaler\n\n# LSTM Model Construction\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\n","5b766483":"dataset_train = pd.read_csv(\"..\/input\/googledta\/trainset.csv\")\ndataset_train","e87cc58e":"trainset = dataset_train.iloc[:,1:2].values\ntrainset","64068660":"sc = MinMaxScaler(feature_range = (0,1))\ntraining_scaled = sc.fit_transform(trainset)\ntraining_scaled","6afed7a7":"x_train = []\ny_train = []\nfor i in range(60,1259):\n    x_train.append(training_scaled[i-60:i, 0])\n    y_train.append(training_scaled[i,0])\nx_train,y_train = np.array(x_train),np.array(y_train)","e9c13488":"x_train.shape","78a73046":"x_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))\nprint(x_train.shape)","fd9f432c":"## LSTM Model","4e49e760":"model = Sequential()\nmodel.add(LSTM(units = 50,return_sequences = True,input_shape = (x_train.shape[1],1)))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units = 50,return_sequences = True))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units = 50,return_sequences = True))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units = 50))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units = 1))\nmodel.summary()","002468dc":"plot_model(model, show_shapes=True, show_layer_names=True)","88e09ed9":"model.compile(optimizer = 'adam',loss = 'mean_squared_error')\nmodel.fit(x_train,y_train,epochs = 100, batch_size = 32)","9e038650":"dataset_test = pd.read_csv(\"..\/input\/googledta\/testset.csv\")\nreal_stock_price = dataset_test.iloc[:,1:2].values\ndataset_total = pd.concat((dataset_train['Open'],dataset_test['Open']),axis = 0)\ndataset_total","7f7dd490":"inputs = dataset_total[len(dataset_total) - len(dataset_test)-60:].values\ninputs = inputs.reshape(-1,1)\ninputs = sc.transform(inputs)\ninputs.shape","068f8f79":"x_test = []\nfor i in range(60,185):\n    x_test.append(inputs[i-60:i,0])\n\nx_test = np.array(x_test)\nx_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))\nx_test.shape","00f7ab8d":"predicted_price = model.predict(x_test)\npredicted_price = sc.inverse_transform(predicted_price)\npredicted_price","0f75e370":"plt.plot(real_stock_price,color = 'green', label = 'Actual Price')\nplt.plot(predicted_price, color = 'red', label = 'Predicted Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show()","34f98e38":"### Training the LSTM Model","43579973":"### model predicition visualization","e5151347":"### Pre-processing the data","76acfbb3":"### Predict the prices ","2155d0b6":"# Google Stock Predicition using LSTM","28289888":"### Perform Min Max scaling ","fc8ef56c":"## Testing the trained model","a24e6410":"## Necessary Imports","9d6f8c75":"### Model Structure","f6fb48bb":"## Loading and Pre-processing the data","f52d71a9":"### Load the training data","50787606":"## Necessary downloads","5a824bf3":"### Split data in 60 parts for LSTM input","da7c4b28":"### Model Constrcuction","66be3438":"### Loading the test data"}}