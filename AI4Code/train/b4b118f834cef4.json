{"cell_type":{"c979544e":"code","bcc26ed3":"code","064a6a92":"code","c9a273bc":"code","90765b7f":"code","ed9e2e00":"code","f8c23d49":"code","31a3156f":"code","f2a7f34f":"code","203ec098":"code","a7f96188":"code","e8e230aa":"code","2afee32a":"code","edcd16ca":"code","ad9a59c6":"code","300bd983":"code","fba73387":"code","89cd618d":"code","dfcb4997":"code","49f1e2fa":"code","4776b181":"code","a2af5101":"code","7b5eb067":"code","94368cfa":"code","2afded73":"code","bb439b70":"code","a621d355":"code","34065dc4":"code","1f104fe3":"code","348a69be":"code","3e538226":"code","e74fee1a":"code","64920efb":"code","f9dc9472":"code","d4699612":"code","f0312485":"code","a8573e59":"code","8a54e0f8":"code","09af9a87":"code","f3b8bc38":"code","ce65bbe5":"code","6477043d":"code","11cd3b40":"code","485df861":"code","4f7ca3ac":"code","dbeaf59e":"code","71258ca0":"code","87648834":"code","33a64707":"code","20018db7":"code","8d82224d":"code","f568cec2":"code","c3fc3123":"code","0f198893":"code","84140457":"code","66e606ac":"code","d2cec889":"code","ce4bd8e1":"code","657dfdb9":"code","9cff8eb8":"code","adee4e9e":"code","d101caf2":"code","765ee557":"code","bf2fff0f":"code","0e3c2540":"code","42fc2f59":"code","55c0dca0":"code","cef9cb42":"code","ad5a65ec":"code","d32dcdee":"code","f3389743":"code","8e9b28c5":"code","a5d539b0":"code","0813aecd":"code","b3fb3a52":"code","490e46d3":"code","5b1e06b6":"code","ec09ae94":"code","c32ea1b4":"code","0925593a":"code","31c95607":"code","4bcc672a":"code","0d275683":"code","f3e073a1":"markdown","e3e18a76":"markdown","0eb1c189":"markdown","16b58302":"markdown","510a225f":"markdown","b0dfc6be":"markdown","7a1d9814":"markdown","c0337e54":"markdown","dd1e2fe9":"markdown","9b244f66":"markdown","7921fa26":"markdown","42d29cb6":"markdown","7ea70dd8":"markdown","08f6a6c5":"markdown","fbbf2f06":"markdown","3ef9678a":"markdown","8fe603b8":"markdown","3aa33bfe":"markdown","4372f825":"markdown","d7f10daa":"markdown","7a5185c7":"markdown","91ce9d7c":"markdown","9056ce7d":"markdown","491b2e95":"markdown","6423f96c":"markdown","c84e1b13":"markdown","77dc85a3":"markdown","27ca02ff":"markdown","5dcd943e":"markdown","1e50c6d1":"markdown","841440ba":"markdown","ca0e9906":"markdown","46c8326f":"markdown","d51b4a56":"markdown","cf4f6a0a":"markdown"},"source":{"c979544e":"import os\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set()","bcc26ed3":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","064a6a92":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","c9a273bc":"train.info()","90765b7f":"train.head()","ed9e2e00":"train['Survived'].value_counts(normalize=True)","f8c23d49":"sns.countplot(train['Survived'])","31a3156f":"train['Survived'].groupby(train['Pclass']).mean()","f2a7f34f":"sns.countplot(train['Pclass'], hue=train['Survived'])","203ec098":"train.info()","a7f96188":"train.head(80)","e8e230aa":"test.head()","2afee32a":"train.shape","edcd16ca":"test.shape","ad9a59c6":"train.info()","300bd983":"test.info()","fba73387":"train.isnull().sum()","89cd618d":"test.isnull().sum()","dfcb4997":"train_test_data = [train, test] \n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","49f1e2fa":"train['Name'].head()","4776b181":"train['Name_Title'] = train['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])\ntrain['Name_Title'].value_counts()","a2af5101":"train['Survived'].groupby(train['Name_Title']).mean()","7b5eb067":"train['Name_Len'] = train['Name'].apply(lambda x: len(x))\ntrain['Survived'].groupby(pd.qcut(train['Name_Len'],5)).mean()","94368cfa":"pd.qcut(train['Name_Len'],5).value_counts()","2afded73":"train['Sex'].value_counts(normalize=True)","bb439b70":"train['Survived'].groupby(train['Sex']).mean()","a621d355":"bar_chart('Sex')","34065dc4":"#vz\u0165ah medzi vekom a pre\u017eit\u00edm\ntrain['Survived'].groupby(train['Age'].isnull()).mean()","1f104fe3":"train['Survived'].groupby(pd.qcut(train['Age'],5)).mean()","348a69be":"pd.qcut(train['Age'],5).value_counts()","3e538226":"train[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","e74fee1a":"train.head(30)\ntrain.groupby(\"Title\")[\"Age\"].transform(\"median\")","64920efb":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\n \nplt.show() ","f9dc9472":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","d4699612":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(20, 30)","f0312485":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(30, 40)","a8573e59":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","8a54e0f8":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(60)","09af9a87":"train['Survived'].groupby(train['SibSp']).mean()","f3b8bc38":"train['SibSp'].value_counts()","ce65bbe5":"bar_chart('SibSp')","6477043d":"train['Survived'].groupby(train['Parch']).mean()","11cd3b40":"train['Parch'].value_counts()","485df861":"bar_chart('Parch')","4f7ca3ac":"train['Ticket'].head(n=10)","dbeaf59e":"train['Ticket_Len'] = train['Ticket'].apply(lambda x: len(x))","71258ca0":"train['Ticket_Len'].value_counts()","87648834":"train['Ticket_Lett'] = train['Ticket'].apply(lambda x: str(x)[0])","33a64707":"train['Ticket_Lett'].value_counts()","20018db7":"train.groupby(['Ticket_Lett'])['Survived'].mean()","8d82224d":"pd.qcut(train['Fare'], 3).value_counts()","f568cec2":"train['Survived'].groupby(pd.qcut(train['Fare'], 3)).mean()","c3fc3123":"pd.crosstab(pd.qcut(train['Fare'], 5), columns=train['Pclass'])","0f198893":"train['Cabin_Letter'] = train['Cabin'].apply(lambda x: str(x)[0])","84140457":"train['Cabin_Letter'].value_counts()","66e606ac":"train['Survived'].groupby(train['Cabin_Letter']).mean()","d2cec889":"train['Cabin_num'] = train['Cabin'].apply(lambda x: str(x).split(' ')[-1][1:])\ntrain['Cabin_num'].replace('an', np.NaN, inplace = True)\ntrain['Cabin_num'] = train['Cabin_num'].apply(lambda x: int(x) if not pd.isnull(x) and x != '' else np.NaN)","ce4bd8e1":"pd.qcut(train['Cabin_num'],3).value_counts()","657dfdb9":"train['Survived'].groupby(pd.qcut(train['Cabin_num'], 3)).mean()","9cff8eb8":"train['Survived'].corr(train['Cabin_num'])","adee4e9e":"train['Embarked'].value_counts()","d101caf2":"train['Embarked'].value_counts(normalize=True)","765ee557":"train['Survived'].groupby(train['Embarked']).mean()","bf2fff0f":"sns.countplot(train['Embarked'], hue=train['Pclass'])","0e3c2540":"bar_chart('Embarked')","42fc2f59":"train.head()","55c0dca0":"train.head(15)","cef9cb42":"def names(train, test):\n    for i in [train, test]:\n        i['Name_Len'] = i['Name'].apply(lambda x: len(x))\n        i['Name_Title'] = i['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])\n        del i['Name']\n    return train, test","ad5a65ec":"def age_impute(train, test):\n    for i in [train, test]:\n        i['Age_Null_Flag'] = i['Age'].apply(lambda x: 1 if pd.isnull(x) else 0)\n        data = train.groupby(['Name_Title', 'Pclass'])['Age']\n        i['Age'] = data.transform(lambda x: x.fillna(x.mean()))\n    return train, test","d32dcdee":"def fam_size(train, test):\n    for i in [train, test]:\n        i['Fam_Size'] = np.where((i['SibSp']+i['Parch']) == 0 , 'Solo',\n                           np.where((i['SibSp']+i['Parch']) <= 3,'Nuclear', 'Big'))\n        del i['SibSp']\n        del i['Parch']\n    return train, test","f3389743":"def ticket_grouped(train, test):\n    for i in [train, test]:\n        i['Ticket_Lett'] = i['Ticket'].apply(lambda x: str(x)[0])\n        i['Ticket_Lett'] = i['Ticket_Lett'].apply(lambda x: str(x))\n        i['Ticket_Lett'] = np.where((i['Ticket_Lett']).isin(['1', '2', '3', 'S', 'P', 'C', 'A']), i['Ticket_Lett'],\n                                   np.where((i['Ticket_Lett']).isin(['W', '4', '7', '6', 'L', '5', '8']),\n                                            'Low_ticket', 'Other_ticket'))\n        i['Ticket_Len'] = i['Ticket'].apply(lambda x: len(x))\n        del i['Ticket']\n    return train, test","8e9b28c5":"def cabin(train, test):\n    for i in [train, test]:\n        i['Cabin_Letter'] = i['Cabin'].apply(lambda x: str(x)[0])\n        del i['Cabin']\n    return train, test","a5d539b0":"def cabin_num(train, test):\n    for i in [train, test]:\n        i['Cabin_num1'] = i['Cabin'].apply(lambda x: str(x).split(' ')[-1][1:])\n        i['Cabin_num1'].replace('an', np.NaN, inplace = True)\n        i['Cabin_num1'] = i['Cabin_num1'].apply(lambda x: int(x) if not pd.isnull(x) and x != '' else np.NaN)\n        i['Cabin_num'] = pd.qcut(train['Cabin_num1'],3)\n    train = pd.concat((train, pd.get_dummies(train['Cabin_num'], prefix = 'Cabin_num')), axis = 1)\n    test = pd.concat((test, pd.get_dummies(test['Cabin_num'], prefix = 'Cabin_num')), axis = 1)\n    del train['Cabin_num']\n    del test['Cabin_num']\n    del train['Cabin_num1']\n    del test['Cabin_num1']\n    return train, test","0813aecd":"def embarked_impute(train, test):\n    for i in [train, test]:\n        i['Embarked'] = i['Embarked'].fillna('S')\n    return train, test","b3fb3a52":"test['Fare'].fillna(train['Fare'].mean(), inplace = True)","490e46d3":"def dummies(train, test, columns = ['Pclass', 'Sex', 'Embarked', 'Ticket_Lett', 'Cabin_Letter', 'Name_Title', 'Fam_Size']):\n    for column in columns:\n        train[column] = train[column].apply(lambda x: str(x))\n        test[column] = test[column].apply(lambda x: str(x))\n        good_cols = [column+'_'+i for i in train[column].unique() if i in test[column].unique()]\n        train = pd.concat((train, pd.get_dummies(train[column], prefix = column)[good_cols]), axis = 1)\n        test = pd.concat((test, pd.get_dummies(test[column], prefix = column)[good_cols]), axis = 1)\n        del train[column]\n        del test[column]\n    return train, test","5b1e06b6":"def drop(train, test, bye = ['PassengerId']):\n    for i in [train, test]:\n        for z in bye:\n            del i[z]\n    return train, test","ec09ae94":"train = train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain, test = names(train, test)\ntrain, test = age_impute(train, test)\ntrain, test = cabin_num(train, test)\ntrain, test = cabin(train, test)\ntrain, test = embarked_impute(train, test)\ntrain, test = fam_size(train, test)\ntest['Fare'].fillna(train['Fare'].mean(), inplace = True)\ntrain, test = ticket_grouped(train, test)\ntrain, test = dummies(train, test, columns = ['Pclass', 'Sex', 'Embarked', 'Ticket_Lett',\n                                                                     'Cabin_Letter', 'Name_Title', 'Fam_Size'])\ntrain, test = drop(train, test)","c32ea1b4":"print(len(train.columns))","0925593a":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(criterion='gini', \n                             n_estimators=700,\n                             min_samples_split=10,\n                             min_samples_leaf=1,\n                             max_features='auto',\n                             oob_score=True,\n                             random_state=1,\n                             n_jobs=-1)\nrf.fit(train.iloc[:, 1:], train.iloc[:, 0])\nprint(\"%.4f\" % rf.oob_score_)","31c95607":"round(np.mean(rf.oob_score_)*100, 2)","4bcc672a":"pd.concat((pd.DataFrame(train.iloc[:, 1:].columns, columns = ['variable']), \n           pd.DataFrame(rf.feature_importances_, columns = ['importance'])), \n          axis = 1).sort_values(by='importance', ascending = False)[:20]","0d275683":"predictions = rf.predict(test)\npredictions = pd.DataFrame(predictions, columns=['Survived'])\ntest = pd.read_csv(os.path.join('..\/input\/titanic\/test.csv'))\npredictions = pd.concat((test.iloc[:, 0], predictions), axis = 1)\npredictions.to_csv('vysledok.csv', sep=\",\", index = False)","f3e073a1":"\u017deny maju v\u00e4\u010d\u0161iu mieru pre\u017eitia ako mu\u017ei. ","e3e18a76":"**Parch**\n\nPo\u010det(Parch): po\u010det rodi\u010dov \/ det\u00ed na palube Titanicu","0eb1c189":"Po vytvoren\u00ed pomocn\u00fdch funkci\u00ed ich teraz m\u00f4\u017eeme spusti\u0165, aby sme mohli zostavi\u0165 n\u00e1\u0161 s\u00fabor \u00fadajov.","16b58302":"Zhrnutie v\u0161etk\u00fdch \u00fadajov ","510a225f":"M\u00f4\u017eeme vidie\u0165 \u017ee n\u00e1\u0161 kone\u010dn\u00fd s\u00fabor \u00fadajov m\u00e1 45 st\u013apcov, ktor\u00e9 sa skladaj\u00fa z n\u00e1\u0161ho cie\u013eov\u00e9ho st\u013apca a 44 predik\u010dn\u00fdch premenn\u00fdch. ","b0dfc6be":"Na\u0161a posledn\u00e1 pomocn\u00e1 funkcia zru\u0161\u00ed v\u0161etky st\u013apce, ktor\u00e9 e\u0161te neboli zru\u0161en\u00e9. V na\u0161om pr\u00edpade sta\u010d\u00ed zru\u0161i\u0165 st\u013apec PassengerId.","7a1d9814":"**VEK** ","c0337e54":" \u010c\u00cdSLO KAJUTY\n\n","dd1e2fe9":"Vid\u00edme \u017ee sk\u00f3re je 82,94%","9b244f66":"Po\u010det pre\u017eiv\u0161\u00edch pod\u013ea veku.","7921fa26":"Trieda zohrala d\u00f4le\u017eit\u00fa \u00falohu v pre\u017eit\u00ed, miera pre\u017eitia klesla pre najni\u017e\u0161iu triedu.","42d29cb6":"T\u00e1to funkcia vytv\u00e1ra dva samostatn\u00e9 st\u013apce: \n\n*   \u010d\u00edselny st\u013apec\n*   kategorick\u00fd st\u013apec\n\n","7ea70dd8":"**Hodonotenie Modelu**","08f6a6c5":"**Potrebn\u00e9 d\u00e1ta ktor\u00e9 budeme potrebova\u0165 si m\u00f4\u017eeme stiahnu\u0165 na adrese: https:\/\/www.kaggle.com\/c\/titanic\/data**","fbbf2f06":"**KAJUTA**\n","3ef9678a":"**S\u00daRODENCI(SibSp)**  \nPo\u010det s\u00farodencov \/ man\u017eelov na palube Titanicu","8fe603b8":"Pod\u013ea grafu m\u00f4\u017eeme us\u00fadi\u0165 \u017ee osob\u00e1 ktor\u00e1 bola naloden\u00e1 s viac ako 2 s\u00farodencami alebo s man\u017eelom (man\u017eelkou) pravdepodobne pre\u017eila. Osoba naloden\u00e1 na palubu bez s\u00farodencov alebo man\u017eela (man\u017eelky) s v\u00e4\u010d\u0161ou pravdepodobnos\u0165ou umrela.","3aa33bfe":"St\u013apce SibSp a Parch kombinujeme do nov\u00e9j premenn\u00e9j, ktor\u00e1 ozna\u010duje ve\u013ekos\u0165 rodiny a premenn\u00fa ve\u013ekosti rodiny zoskupujeme do troch kateg\u00f3ri\u00ed. ","4372f825":"Pod\u013ea grafu m\u00f4\u017eeme us\u00fadi\u0165 \u017ee viacej pre\u017eilo \u017eien ako mu\u017eov. ","d7f10daa":"**CESTOVN\u00c9**\n\n","7a5185c7":"\u013dudia s dlh\u0161\u00edmi menami boli pravdepodobne d\u00f4le\u017eitej\u0161\u00ed preto\u017ee ich pre\u017eilo viacej. ","91ce9d7c":"3I0203 UI1","9056ce7d":"*   **Pre\u017eili(Survived):** 0 = Nie, 1 = \u00c1no\n*   **pclass: Trieda l\u00edstkov** 1 = 1., 2 = 2., 3 = 3.\n*   **S\u00farodenci(SibSp):** po\u010det s\u00farodencov \/ man\u017eelov na palube Titanicu\n*   **Po\u010det(Parch):** po\u010det rodi\u010dov \/ det\u00ed na palube Titanicu \n*   **Listok(Ticket):** \u010c\u00edslo l\u00edstka\n*   **kab\u00edna(Cabin):** \u010c\u00edslo kab\u00edny\n*   **Nalodenie(Embarked):** Pr\u00edstav nalodenia C = Cherbourg, Q = Queenstown, S = Southampton\n\n","491b2e95":"Preto\u017ee pou\u017e\u00edvame scikit-learn, mus\u00edme previes\u0165 na\u0161e st\u013apce do fikt\u00edvnych premenn\u00fdch pomocou nasleduj\u00facej funkcie. ","6423f96c":"Po prieskume v\u0161etk\u00fdch premmen\u00fdch m\u00e1me celkom dobru predstavu o tom ako chceme transformova\u0165 premenn\u00e9 na kone\u010dn\u00fd s\u00fabor \u00fadajov. ","c84e1b13":"Pod\u013ea grafu m\u00f4\u017eeme us\u00fadi\u0165 \u017ee osobi naloden\u00e9 na palubu s rodi\u010dmi alebo de\u0165mi s v\u00e4\u010d\u0161ou pravdepodobnos\u0165ou pre\u017eili ako osoby ktor\u00e9 sa nalodili sam\u00e9.","77dc85a3":"Pri poh\u013eade na vz\u0165ah medzi triedou a cestovn\u00fdm m\u00f4\u017eeme vidie\u0165 jasn\u00fd vz\u0165ah. ","27ca02ff":"**POHLAVIE**","5dcd943e":"Pod\u013ea tabu\u013eky m\u00f4\u017eeme vidie\u0165 po\u010det pre\u017ei\u0161\u00edch pod\u013ea titulu. ","1e50c6d1":"**MEN\u00c1**","841440ba":"Graf zn\u00e1zor\u0148uj\u00faci po\u010det pre\u017eit\u00fdch a mrtv\u00fdch \u013eud\u00ed pod\u013ea miesta nalodenia.","ca0e9906":"**LISTOK**  \n\nJedna te\u00f3ria spo\u010d\u00edva v tom, \u017ee ur\u010dit\u00e1 charakteristika cestovn\u00e9ho l\u00edstka by mohla nazna\u010dova\u0165 umiestnenie miestnosti pre cestuj\u00facich, \u010do by mohlo by\u0165 rozhoduj\u00facim faktorom pri \u00fanikovej ceste.","46c8326f":"Tieto dve funkcie extrahuj\u00fa prv\u00e9 p\u00edsmeno st\u013apca kab\u00edny a jeho \u010d\u00edslo.  ","d51b4a56":"**NALODENIE (Embarked)**","cf4f6a0a":"St\u013apec Ticket sa pou\u017e\u00edva na vytvorenie dvoch nov\u00fdch st\u013apcov: \n\n\n*   Ticket_Lett (ozna\u010duje prv\u00e9 p\u00edsmeno l\u00edstka)\n*   Ticket_Len (d\u013a\u017eku po\u013ea Ticket)\n\n"}}