{"cell_type":{"0d536446":"code","7bcd2aad":"code","95205fa8":"code","32cacf2c":"code","07ebe6aa":"code","a4a4d6f3":"code","bb0850c5":"code","431749a2":"code","713ea371":"code","32e3fc97":"code","3af11de2":"code","3d145876":"code","7e283538":"code","39e1db90":"code","d5a742fb":"code","13c9e068":"code","6186fec4":"code","fbd24090":"code","dad9c041":"code","b87840fc":"code","8bfba577":"code","48deed73":"code","85f7544a":"code","1ba91a8e":"code","3d6b35f0":"code","3dfa245f":"code","0bcc0710":"code","daeba429":"code","7a27b1a7":"code","5baf8414":"code","b162170c":"code","5c79e054":"code","cebd1f5e":"code","d65d4ce2":"code","03319811":"code","f9273aa5":"code","ede986f1":"code","ac35f9e4":"code","d099c30c":"code","71a68c0f":"markdown","47fef831":"markdown","95f12686":"markdown","0ed9ac5a":"markdown","ea5289ba":"markdown","2a53db25":"markdown","b992aafd":"markdown"},"source":{"0d536446":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.metrics import mean_squared_error, r2_score, accuracy_score\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.impute import KNNImputer\nfrom sklearn.tree import DecisionTreeClassifier\nimport warnings\nfrom sklearn.exceptions import ConvergenceWarning\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(\"ignore\", category=ConvergenceWarning)\npd.pandas.set_option(\"display.max_columns\", None)\npd.set_option(\"display.float_format\", lambda x: '%.4f' % x)","7bcd2aad":"# Import\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n\n# Bind rows\ndf = train.append(test).reset_index()\n\n# Num of dtypes\nprint(\"Num of Object Variables:\", df.select_dtypes(object).shape[1])\nprint(\"Num of Integer Variables:\", df.select_dtypes(\"integer\").shape[1])\nprint(\"Num of Float Variables:\", df.select_dtypes(\"float\").shape[1])\n\n# Dimensions\nprint(\"df.shape:\"+ str(df.shape), \"train.shape:\"+ str(train.shape),\"test.shape:\"+ str(test.shape))\n\n# DataFrame\ndf.head()","95205fa8":"# Train datas\u0131 \u00fczerinde tespit edilen baz\u0131 i\u015flemler. \ntrain = train[train.GrLivArea * train.TotRmsAbvGrd < 45000]\ntrain = train[train.GrLivArea < 4500]\ntrain = train[train.GarageArea * train.GarageCars < 3700]\ntrain = train[(train.FullBath + (train.HalfBath*0.5) + train.BsmtFullBath + (train.BsmtHalfBath*0.5))<5]\ntrain = train.loc[~(train.SalePrice==392500.0)]\ntrain = train.loc[~((train.SalePrice==275000.0) & (train.Neighborhood=='Crawfor'))]\ndf.head()","32cacf2c":"class_freq_num = 25  # Kategorik de\u011fi\u015fkenleri se\u00e7mek i\u00e7in frekans s\u0131n\u0131r de\u011feri\n\nlow_q1 = 0.25  # Ayk\u0131r\u0131 de\u011fer bulurken kullan\u0131lacak alt quantile s\u0131n\u0131r\u0131\n\nupper_q3 = 0.75  # Ayk\u0131r\u0131 de\u011fer bulurken kullan\u0131lacak \u00fcst quantile s\u0131n\u0131r\u0131\n\ncorrelation_limit = 0.60  # Korelasyon incelenirken kullan\u0131lacak olan s\u0131n\u0131r de\u011fer","07ebe6aa":"# Korelasyon\nplt.figure(figsize=(8,8))\nplt.title('Correlation matrix with SalePrice')\nselected_columns = ['OverallQual', 'GarageCars', 'GrLivArea', 'YearBuilt', 'FullBath', '1stFlrSF', 'TotalBsmtSF', 'GarageArea']\na = sns.heatmap(train[selected_columns + ['SalePrice']].corr(), annot=True, square=True)","a4a4d6f3":"def check_dataframe(dataframe):\n    \"\"\"\n    -> Veriye genel bak\u0131\u015f sa\u011flar.\n    :param dataframe: Genel bak\u0131\u015f yap\u0131lacak dataframe\n    \"\"\"\n\n    print(\"Data Frame Raws Lenght : \", dataframe.shape[0],\n          \"\\nData Frame Columns Lenght : \", dataframe.shape[1])\n\n    print(\"\\nData Frame Columns Names : \", list(dataframe.columns))\n\n    print(\"\\nIs data frame has null value? : \", dataframe.isnull().any())\n\n    print(\"\\nHow many missing values are in which columns? :\\n\", dataframe.isnull().sum())\n\n    cat_names = [col for col in dataframe.columns if dataframe[col].dtype == \"O\"]\n    num_names = [col for col in dataframe.columns if dataframe[col].dtype != \"O\"]\n\n    print(\"\\nHow many columns are in the object type? : \", len(cat_names), \"\\n\", cat_names)\n\n    print(\"\\nHow many columns are in the numerical type? : \", len(num_names), \"\\n\", num_names)","bb0850c5":"def get_categorical_and_numeric_columns(dataframe, exit_columns, number_of_unique_classes=class_freq_num):\n    \"\"\"\n    -> Kategorik ve say\u0131sal de\u011fi\u015fkenleri belirler.\n    :param dataframe: \u0130\u015flem yap\u0131lacak dataframe\n    :param exit_columns: Dikkate al\u0131nmayacak de\u011fi\u015fken ismi\n    :param number_of_unique_classes: De\u011fi\u015fkenlerin s\u0131n\u0131flar\u0131n\u0131n frekans s\u0131n\u0131r\u0131\n    :return: \u0130lk de\u011fer olarak kategorik s\u0131n\u0131flar\u0131n ad\u0131n\u0131, ikinci de\u011fer olarak say\u0131sal de\u011fi\u015fkenlerin ad\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr.\n    \"\"\"\n\n    categorical_columns = [col for col in dataframe.columns\n                           if len(dataframe[col].unique()) <= number_of_unique_classes]\n\n    numeric_columns = [col for col in dataframe.columns if len(dataframe[col].unique()) > number_of_unique_classes\n                       and dataframe[col].dtype != \"O\"\n                       and col not in exit_columns]\n\n    return categorical_columns, numeric_columns","431749a2":"def cat_summary(dataframe, categorical_columns, target, plot=False):\n    \"\"\"\n    -> Kategorik de\u011fi\u015fkenlerin s\u0131n\u0131flar\u0131n\u0131n oran\u0131n\u0131 ve targettaki medyan\u0131 g\u00f6sterir.\n    :param dataframe: \u0130\u015flem yap\u0131lacak dataframe\n    :param categorical_columns: Kategorik de\u011fi\u015fkenlerin adlar\u0131\n    :param target: Dataframe'de ilgilendi\u011fimiz de\u011fi\u015fken.\n    :param plot: Grafik \u00e7izdirmek i\u00e7in arg\u00fcman : True\/False\n    \"\"\"\n    for col in categorical_columns:\n        print(col, \" : \", dataframe[col].nunique(), \" unique classes.\\n\")\n\n        print(col, \" : \", dataframe[col].value_counts().sum(), \"\\n\")\n\n        print(pd.DataFrame({\"COUNT\": dataframe[col].value_counts(),\n                            \"RATIO ( % )\": 100 * dataframe[col].value_counts() \/ len(dataframe),\n                            \"TARGET_MEDIAN\": dataframe.groupby(col)[target].median()}), end=\"\\n\\n\\n\")\n\n        if plot:\n            sns.countplot(x=col, data=dataframe)\n\n            plt.show()","713ea371":"def hist_for_numeric_columns(dataframe, numeric_columns):\n    \"\"\"\n    -> Say\u0131sal de\u011fi\u015fkenlerin histogram\u0131n\u0131 \u00e7izdirir.\n    :param dataframe: \u0130\u015flem yap\u0131lacak dataframe.\n    :param numeric_columns: Say\u0131sal de\u011fi\u015fkenlerin adlar\u0131\n    \"\"\"\n    col_counter = 0\n\n    data = dataframe.copy()\n\n    for col in numeric_columns:\n        data[col].hist(bins=20)\n\n        plt.xlabel(col)\n\n        plt.title(col)\n\n        plt.show()\n\n        col_counter += 1\n\n    print(col_counter, \"variables have been plotted!\")","32e3fc97":"def find_correlation(dataframe, numeric_columns, target, corr_limit=correlation_limit):\n    \"\"\"\n    -> Say\u0131sal de\u011fi\u015fkenlerin targetla olan korelasyonunu inceler.\n    :param dataframe: \u0130\u015flem yap\u0131lacak dataframe\n    :param numeric_columns: Say\u0131sal de\u011fi\u015fken adlar\u0131\n    :param target: Korelasyon ili\u015fkisinde bak\u0131lacak hedef de\u011fi\u015fken\n    :param corr_limit: Korelasyon s\u0131n\u0131r\u0131. S\u0131n\u0131rdan a\u015fa\u011f\u0131s\u0131 d\u00fc\u015f\u00fck, yukar\u0131s\u0131 y\u00fcksek korelasyon\n    :return: \u0130lk de\u011fer d\u00fc\u015f\u00fck korelasyona sahip de\u011fi\u015fkenler, ikinci de\u011fer y\u00fcksek korelasyona sahip de\u011fi\u015fkenler\n    \"\"\"\n    high_correlations = []\n\n    low_correlations = []\n\n    for col in numeric_columns:\n        if col == target:\n            pass\n\n        else:\n            correlation = dataframe[[col, target]].corr().loc[col, target]\n\n            if abs(correlation) > corr_limit:\n                high_correlations.append(col + \" : \" + str(correlation))\n\n            else:\n                low_correlations.append(col + \" : \" + str(correlation))\n\n    return low_correlations, high_correlations","3af11de2":"\ndef target_summary_with_categorical_columns(dataframe, categorical_columns, target):\n    \"\"\"\n    -> Kategorik de\u011fi\u015fkenlere g\u00f6re target analizi yapar.\n    :param dataframe: \u0130\u015flem yap\u0131lacak dataframe\n    :param categorical_columns: Kategorik de\u011fi\u015fken adlar\u0131\n    :param target: Analizi yap\u0131lacak hedef de\u011fi\u015fkenin ad\u0131\n    :return:\n    \"\"\"\n    for col in categorical_columns:\n        if col != target:\n            print(pd.DataFrame({\"Target_Median\": dataframe.groupby(col)[target].median()}), end=\"\\n\\n\\n\")","3d145876":"def target_summary_with_numeric_columns(dataframe, numeric_columns, exit_columns, target):\n    \"\"\"\n    -> Say\u0131sal de\u011fi\u015fkenlere g\u00f6re target analizi\n    :param dataframe: \u0130\u015flem yap\u0131lacak dataframe\n    :param numeric_columns: Say\u0131sal de\u011fi\u015fken adlar\u0131\n    :param exit_columns: Bak\u0131lmas\u0131 istenmeyen de\u011fi\u015fkenin ad\u0131\n    :param target: Analizi yap\u0131lacak hedef de\u011fi\u015fkenin ad\u0131\n    :return:\n    \"\"\"\n\n    for col in numeric_columns:\n        if col != target or col != exit_columns:\n            print(dataframe.groupby(target).agg({col: np.median}), end=\"\\n\\n\\n\")","7e283538":"def outlier_thresholds(dataframe, variable, low_quantile=low_q1, up_quantile=upper_q3):\n    \"\"\"\n    -> Verilen de\u011ferin alt ve \u00fcst ayk\u0131r\u0131 de\u011ferlerini hesaplar ve d\u00f6nd\u00fcr\u00fcr.\n    :param dataframe: \u0130\u015flem yap\u0131lacak dataframe\n    :param variable: Ayk\u0131r\u0131 de\u011feri yakalanacak de\u011fi\u015fkenin ad\u0131\n    :param low_quantile: Alt e\u015fik de\u011ferin hesaplanmas\u0131 i\u00e7in bak\u0131lan quantile de\u011feri\n    :param up_quantile: \u00dcst e\u015fik de\u011ferin hesaplanmas\u0131 i\u00e7in bak\u0131lan quantile de\u011feri\n    :return: \u0130lk de\u011fer olarak verilen de\u011fi\u015fkenin alt s\u0131n\u0131r de\u011ferini, ikinci de\u011fer olarak \u00fcst s\u0131n\u0131r de\u011ferini d\u00f6nd\u00fcr\u00fcr\n    \"\"\"\n    quantile_one = dataframe[variable].quantile(low_quantile)\n\n    quantile_three = dataframe[variable].quantile(up_quantile)\n\n    interquantile_range = quantile_three - quantile_one\n\n    up_limit = quantile_three + 1.5 * interquantile_range\n\n    low_limit = quantile_one - 1.5 * interquantile_range\n\n    return low_limit, up_limit","39e1db90":"def has_outliers(dataframe, numeric_columns, plot=False):\n    \"\"\"\n    -> Say\u0131sal de\u011fi\u015fkenlerde ayk\u0131r\u0131 g\u00f6zlem var m\u0131?\n    -> Varsa iste\u011fe g\u00f6re box plot \u00e7izdirme g\u00f6revini yapar.\n    -> Ayr\u0131ca ayk\u0131r\u0131 g\u00f6zleme sahip de\u011fi\u015fkenlerin ismini g\u00f6nd\u00fcr\u00fcr.\n    :param dataframe:  \u0130\u015flem yap\u0131lacak dataframe\n    :param numeric_columns: Ayk\u0131r\u0131 de\u011ferleri bak\u0131lacak say\u0131sal de\u011fi\u015fken adlar\u0131\n    :param plot: Boxplot grafi\u011fini \u00e7izdirmek i\u00e7in bool de\u011fer al\u0131r. True\/False\n    :return: Ayk\u0131r\u0131 de\u011ferlere sahip de\u011fi\u015fkenlerin adlar\u0131n\u0131 d\u00f6ner\n    \"\"\"\n    variable_names = []\n\n    for col in numeric_columns:\n        low_limit, up_limit = outlier_thresholds(dataframe, col)\n\n        if dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].any(axis=None):\n            number_of_outliers = dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].shape[0]\n\n            print(col, \" : \", number_of_outliers, \" ayk\u0131r\u0131 g\u00f6zlem.\")\n\n            variable_names.append(col)\n\n            if plot:\n                sns.boxplot(x=dataframe[col])\n                plt.show()\n\n    return variable_names\n","d5a742fb":"def remove_outliers(dataframe, numeric_columns):\n    \"\"\"\n     Dataframede, verilen say\u0131sal de\u011fi\u015fkenlerin ayk\u0131r\u0131 g\u00f6zlemlerini siler ve dataframe d\u00f6ner.\n    :param dataframe: \u0130\u015flem yap\u0131lacak dataframe\n    :param numeric_columns: Ayk\u0131r\u0131 g\u00f6zlemleri silinecek say\u0131sal de\u011fi\u015fken adlar\u0131\n    :return: Ayk\u0131r\u0131 g\u00f6zlemleri silinmi\u015f dataframe d\u00f6ner\n    \"\"\"\n\n    for variable in numeric_columns:\n        low_limit, up_limit = outlier_thresholds(dataframe, variable)\n\n        dataframe_without_outliers = dataframe[~((dataframe[variable] < low_limit) | (dataframe[variable] > up_limit))]\n\n    return dataframe_without_outliers","13c9e068":"def replace_with_thresholds(dataframe, numeric_columns):\n    \"\"\"\n    Bask\u0131lama y\u00f6ntemi\n    Silmemenin en iyi alternatifidir.\n    Loc kullan\u0131ld\u0131\u011f\u0131ndan dataframe i\u00e7inde i\u015flemi uygular.\n    :param dataframe: \u0130\u015flem yap\u0131lacak dataframe\n    :param numeric_columns: Ayk\u0131r\u0131 de\u011ferleri bask\u0131lanacak say\u0131sal de\u011fi\u015fkenlerin adlar\u0131\n    \"\"\"\n    for variable in numeric_columns:\n        low_limit, up_limit = outlier_thresholds(dataframe, variable)\n\n        dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n\n        dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","6186fec4":"def missing_values_table(dataframe):\n    \"\"\"\n     Eksik de\u011ferlere sahip de\u011fi\u015fkenleri g\u00f6sterir ve bu de\u011ferleri d\u00f6nd\u00fcr\u00fcr.\n    :param dataframe: \u0130\u015flem yap\u0131lacak dataframe\n    :return: Eksik de\u011ferlere sahip de\u011fi\u015fkenlerin adlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr.\n    \"\"\"\n    variables_with_na = [col for col in dataframe.columns\n                         if dataframe[col].isnull().sum() > 0]\n\n    n_miss = dataframe[variables_with_na].isnull().sum().sort_values(ascending=False)\n\n    ratio = (dataframe[variables_with_na].isnull().sum() \/ dataframe.shape[0] * 100).sort_values(ascending=False)\n\n    # ratio = (100 * dataframe[variables_with_na].isnull().sum() \/ dataframe.shape[0]).sort_values(ascending=False)\n\n    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=[\"n_miss\", \"ratio\"])\n\n    print(missing_df)\n\n    return variables_with_na","fbd24090":"def missing_vs_target(dataframe, target, variable_with_na):\n    \"\"\"\n    Bu fonksiyon, eksik de\u011ferlere sahip de\u011fi\u015fkenlerin target a\u00e7\u0131s\u0131ndan etkisine bakmam\u0131z\u0131 sa\u011flar.\n    Yeni bir de\u011fi\u015fken olu\u015fturur : incelenen de\u011fer + _NA_FLAG\n    Bu yeni de\u011fi\u015fkene, incelenen de\u011fi\u015fkende eksik g\u00f6rd\u00fc\u011f\u00fcnde 1, eksik yoksa 0 de\u011ferlerini atar.\n    Daha sonra bu de\u011fi\u015fkenlere g\u00f6re gruplama yap\u0131p, target incelenir.\n    :param dataframe: \u0130\u015flem yap\u0131lacak dataframe\n    :param target: Analizi yap\u0131lacak hedef de\u011fi\u015fkenin ad\u0131\n    :param variable_with_na: Eksik de\u011ferlere sahip de\u011fi\u015fkenlerin ad\u0131.\n    \"\"\"\n    temp_df = dataframe.copy()\n\n    for variable in variable_with_na:\n        temp_df[variable + \"_NA_FLAG\"] = np.where(temp_df[variable].isnull(), 1, 0)\n\n    flags_na = temp_df.loc[:, temp_df.columns.str.contains(\"_NA_\")].columns\n\n    for variable in flags_na:\n        print(pd.DataFrame({\"TARGET_MEDIAN\": temp_df.groupby(variable)[target].median()}),\n              end=\"\\n\\n\\n\")\n","dad9c041":"def label_encoder(dataframe, categorical_columns):\n    \"\"\"\n    2 s\u0131n\u0131fl\u0131 kategorik de\u011fi\u015fkeni 0-1 yapma\n    :param dataframe: \u0130\u015flem yap\u0131lacak dataframe\n    :param categorical_columns: Label encode yap\u0131lacak kategorik de\u011fi\u015fken adlar\u0131\n    :return:\n    \"\"\"\n    labelencoder = preprocessing.LabelEncoder()\n\n    for col in categorical_columns:\n\n        if dataframe[col].nunique() == 2:\n            dataframe[col] = labelencoder.fit_transform(dataframe[col])\n\n    return dataframe","b87840fc":"def one_hot_encoder(dataframe, categorical_columns, nan_as_category=False):\n    \"\"\"\n    Drop_first do\u011frusal modellerde yap\u0131lmas\u0131 gerekli\n    A\u011fa\u00e7 modellerde gerekli de\u011fil ama yap\u0131labilir.\n    dummy_na eksik de\u011ferlerden de\u011fi\u015fken t\u00fcrettirir.\n    :param dataframe: \u0130\u015flem yap\u0131lacak dataframe\n    :param categorical_columns: One-Hot Encode uygulanacak kategorik de\u011fi\u015fken adlar\u0131\n    :param nan_as_category: NaN de\u011fi\u015fken olu\u015ftursun mu? True\/False\n    :return: One-Hot Encode yap\u0131lm\u0131\u015f dataframe ve bu i\u015flem sonras\u0131 olu\u015fan yeni de\u011fi\u015fken adlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr.\n    \"\"\"\n    original_columns = list(dataframe.columns)\n\n    dataframe = pd.get_dummies(dataframe, columns=categorical_columns,\n                               dummy_na=nan_as_category, drop_first=True)\n\n    new_columns = [col for col in dataframe.columns if col not in original_columns]\n\n    return dataframe, new_columns","8bfba577":"def rare_analyser(dataframe, categorical_columns, target, rare_perc):\n    \"\"\"\n     Data frame de\u011fi\u015fkenlerinin herhangi bir s\u0131n\u0131f\u0131, verilen e\u015fik de\u011ferden d\u00fc\u015f\u00fck frekansa sahipse bu de\u011fi\u015fkenleri g\u00f6sterir.\n    :param dataframe: \u0130\u015flem yap\u0131lacak dataframe\n    :param categorical_columns: Rare analizi yap\u0131lacak kategorik de\u011fi\u015fken adlar\u0131\n    :param target: Analizi yap\u0131lacak hedef de\u011fi\u015fken ad\u0131\n    :param rare_perc: Rare i\u00e7in s\u0131n\u0131r de\u011fer. Alt\u0131nda olanlar rare kategorisine girer.\n    :return:\n    \"\"\"\n    rare_columns = [col for col in categorical_columns\n                    if (dataframe[col].value_counts() \/ len(dataframe) < rare_perc).any(axis=None)]\n\n    for var in rare_columns:\n        print(var, \" : \", len(dataframe[var].value_counts()))\n\n        print(pd.DataFrame({\"COUNT\": dataframe[var].value_counts(),\n                            \"RATIO\": dataframe[var].value_counts() \/ len(dataframe),\n                            \"TARGET_MEAN\": dataframe.groupby(var)[target].mean(),\n                            \"TARGET_MEDIAN\": dataframe.groupby(var)[target].median()}),\n              end=\"\\n\\n\\n\")\n\n    print(len(rare_columns), \" adet rare s\u0131n\u0131fa sahip de\u011fi\u015fken var.\")\n","48deed73":"def rare_encoder(dataframe, categorical_columns, rare_perc):\n    \"\"\"\n    -> Nadir s\u0131n\u0131flar\u0131 rare olarak d\u00f6n\u00fc\u015ft\u00fcr\u00fcr.\n    -> Verilen kategorik de\u011fi\u015fkenlerden, rare s\u0131n\u0131r\u0131 alt\u0131nda herhangi bir s\u0131n\u0131f\u0131 olan de\u011fi\u015fkenleri yakalar.\n    -> Daha sonra bu s\u0131n\u0131flar i\u00e7inde, rare s\u0131n\u0131r\u0131n\u0131n alt\u0131nda olan s\u0131n\u0131flar\u0131n indexlerini yakalar.\n    -> Yakalanan indexleri kullanarak, ge\u00e7ici dataframe i\u00e7inde bu indexlere sahip olan s\u0131n\u0131flara \"Rare\" yazar.\n    -> Olu\u015fan ge\u00e7ici dataframe'i d\u00f6nd\u00fcr\u00fcr.\n    :param dataframe: \u0130\u015flem yap\u0131lacak dataframe\n    :param rare_perc: Rare i\u00e7in s\u0131n\u0131r de\u011fer. Alt\u0131nda olanlar rare kategorisine girer.\n    :param categorical_columns: Rare analizi yap\u0131lacak kategorik de\u011fi\u015fken adlar\u0131\n    :return: Rare yaz\u0131lm\u0131\u015f s\u0131n\u0131flara sahip ge\u00e7ici dataframe'i d\u00f6nd\u00fcr\u00fcr.\n    \"\"\"\n    temp_df = dataframe.copy()\n\n    rare_columns = [col for col in categorical_columns\n                    if (dataframe[col].value_counts() \/ len(dataframe) < rare_perc).any(axis=None)]\n\n    for var in rare_columns:\n        tmp = temp_df[var].value_counts() \/ len(temp_df)\n\n        rare_labels = tmp[tmp < rare_perc].index\n\n        temp_df[var] = np.where(temp_df[var].isin(rare_labels), \"Rare\", temp_df[var])\n\n    return temp_df","85f7544a":"def robust_scaler(variable):\n    var_median = variable.median()\n    quartile1 = variable.quantile(0.25)\n    quartile3 = variable.quantile(0.75)\n    interquantile_range = quartile3 - quartile1\n    if int(interquantile_range) == 0:\n        quartile1 = variable.quantile(0.05)\n        quartile3 = variable.quantile(0.95)\n        interquantile_range = quartile3 - quartile1\n        if int(interquantile_range) == 0:\n            quartile1 = variable.quantile(0.10)\n            quartile3 = variable.quantile(0.99)\n            interquantile_range = quartile3 - quartile1\n            z = (variable - var_median) \/ interquantile_range\n            return round(z, 3)\n\n        z = (variable - var_median) \/ interquantile_range\n        return round(z, 3)\n    else:\n        z = (variable - var_median) \/ interquantile_range\n    return round(z, 3)","1ba91a8e":"# Ad\u0131m 1 - Genel Bak\u0131\u015f\ncheck_dataframe(df)","3d6b35f0":"# Ad\u0131m 2 - Kategorik ve Say\u0131sal De\u011fi\u015fkenleri Elde Etme\ncategorical_columns, numerical_columns = get_categorical_and_numeric_columns(df, \"Id\")\nprint(\"\\nCategorical columns : \", categorical_columns,\n      \"\\n\\nNumeric Columns : \", numerical_columns)","3dfa245f":"# Ad\u0131m 3 - Kategorik De\u011fi\u015fken vs Target Analizi\ncat_summary(df, categorical_columns, \"SalePrice\")","0bcc0710":"# Ad\u0131m 4 - Say\u0131sal De\u011fi\u015fkenler \u0130\u00e7in Histogram \u00c7izdirimi\nhist_for_numeric_columns(df, numerical_columns)","daeba429":"# Ad\u0131m 5 - Korelasyon Analizi\nlow_corr_list, up_corr_list = find_correlation(df, numerical_columns, \"SalePrice\")\nprint(\"\\nHighly correlated list : \", len(up_corr_list))\nfor up in up_corr_list:\n    print(up)\nprint(\"\\nLow correlated list : \", len(low_corr_list))\nfor low in low_corr_list:\n    print(low)","7a27b1a7":"# Ad\u0131m 6 - Eksik De\u011fer Analizi\nmiss_values = missing_values_table(df)","5baf8414":"# Eksik de\u011ferlerin doldurulmas\u0131\ndf['Exterior1st'] = df['Exterior1st'].fillna(df['Exterior1st'].mode()[0])\n\ndf['MSZoning'] = df.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))\n\ndf[\"LotFrontage\"] = df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))\n\ndf[\"Functional\"] = df[\"Functional\"].fillna(\"Typ\")\n\nfill_none_col = [\"PoolQC\",\"MiscFeature\",\"Alley\",\"Fence\",\"FireplaceQu\",\"GarageType\",\"GarageFinish\",\"GarageQual\",\"GarageCond\",\n                 \"BsmtQual\",\"GarageCond\",\"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinType2\",\"MasVnrType\",\"MSSubClass\"]\nfor col in fill_none_col:\n    df[col] = df[col].fillna(\"None\")\n\nfill_0_col = [\"GarageYrBlt\",\"GarageArea\",\"GarageCars\",\"BsmtFinSF1\",\"BsmtFinSF2\",\"BsmtUnfSF\",\"TotalBsmtSF\",\"BsmtFullBath\",\"BsmtHalfBath\",\"MasVnrArea\"]\nfor col in fill_0_col:\n    df[col] = df[col].fillna(0)\n\nfill_mod_col = [\"Electrical\",\"KitchenQual\",\"Exterior2nd\",\"SaleType\"]\nfor col in fill_mod_col:\n    df[col] = df[col].fillna(df[col].mode()[0])\n    \n# Eksik de\u011fer check\nnew_miss_values = missing_values_table(df)\n","b162170c":"# Ad\u0131m 10 - Rare Analizi\nrare_analyser(df, categorical_columns, \"SalePrice\", 0.02)","5c79e054":"df['haspool'] = df['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\ndf['has2ndfloor'] = df['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\ndf['hasgarage'] = df['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\ndf['hasbsmt'] = df['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\ndf['hasfireplace'] = df['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\n\n# Bu de\u011fi\u015fkenlerde %96 ve \u00fcst\u00fcnde sadece bir s\u0131n\u0131f var. Bu y\u00fczden bunlar bizim i\u00e7in bilgi ta\u015f\u0131m\u0131yor.\nfirst_drop_list = [\"Street\",'LotFrontage','GarageYrBlt', \"Utilities\", \"Condition2\", \"RoofMatl\", \"PoolQC\", \"MiscFeature\",\"KitchenAbvGr\"]\nfor col in first_drop_list:\n    df.drop(col, axis=1, inplace=True)\n\n\nnew_categorical_columns, new_numerical_columns = get_categorical_and_numeric_columns(df, \"Id\")\nprint(\"\\nCategorical columns : \", new_categorical_columns,\n      \"\\n\\nNumeric Columns : \", new_numerical_columns)","cebd1f5e":"\"\"\"rare_labels = [\"TA\", \"Fa\",\"Gd\"]\ndf[\"BsmtQual\"] = np.where(df[\"BsmtQual\"].isin(rare_labels),\"TF\",df[\"BsmtQual\"])\nrare_labels = [\"Gd\", \"TA\"]\ndf[\"BsmtCond\"] = np.where(df[\"BsmtCond\"].isin(rare_labels),\"GT\",df[\"BsmtCond\"])\ndf.BsmtExposure.replace(['Av','Gd','Mn','No'], [1,1,1, 0], inplace=True)\nrare_labels = [\"ALQ\", \"BLQ\",\"LwQ\",\"Rec\",\"Unf\"]\ndf[\"BsmtFinType1\"] = np.where(df[\"BsmtFinType1\"].isin(rare_labels),\"Rare\",df[\"BsmtFinType1\"])\nrare_labels = [\"LwQ\",\"Rec\"]\ndf[\"BsmtFinType2\"] = np.where(df[\"BsmtFinType2\"].isin(rare_labels),\"Rare\",df[\"BsmtFinType2\"])\nrare_labels = [\"ALQ\", \"GLQ\",\"Unf\"]\ndf[\"BsmtFinType2\"] = np.where(df[\"BsmtFinType2\"].isin(rare_labels),\"R\",df[\"BsmtFinType2\"])\nrare_labels = [\"Unf\", \"RFn\"]\ndf[\"GarageFinish\"] = np.where(df[\"GarageFinish\"].isin(rare_labels),\"Urf\",df[\"GarageFinish\"])\nrare_labels = [\"Fa\", \"Po\"]\ndf[\"GarageQual\"] = np.where(df[\"GarageQual\"].isin(rare_labels),\"R\",df[\"GarageQual\"])\nrare_labels = [\"Gd\", \"Ex\"]\ndf[\"GarageQual\"] = np.where(df[\"GarageQual\"].isin(rare_labels),\"ge\",df[\"GarageQual\"])\nrare_labels = [\"Attchd\", \"BuiltIn\"]\ndf[\"GarageType\"] = np.where(df[\"GarageType\"].isin(rare_labels),\"AB\",df[\"GarageType\"])\nrare_labels = [\"CarPort\", \"Detchd\"]\ndf[\"GarageType\"] = np.where(df[\"GarageType\"].isin(rare_labels),\"cd\",df[\"GarageType\"])\nrare_labels = [3,4]\ndf[\"GarageCars\"] = np.where(df[\"GarageCars\"].isin(rare_labels),3,df[\"GarageCars\"])\nrare_labels = [1,2]\ndf[\"GarageCars\"] = np.where(df[\"GarageCars\"].isin(rare_labels),1,df[\"GarageCars\"])\nrare_labels = [\"Ex\", \"TA\",\"Gd\"]\ndf[\"ExterCond\"] = np.where(df[\"ExterCond\"].isin(rare_labels),\"EGT\",df[\"ExterCond\"])\nrare_labels = [\"Fa\",\"Po\"]\ndf[\"ExterCond\"] = np.where(df[\"ExterCond\"].isin(rare_labels),\"FP\",df[\"ExterCond\"])\nrare_labels = [\"Floor\",\"Wall\",\"Grav\"]\ndf[\"Heating\"] = np.where(df[\"Heating\"].isin(rare_labels),\"FWG\",df[\"Heating\"])\nrare_labels = [\"Lvl\",\"Bnk\"]\ndf[\"LandContour\"] = np.where(df[\"LandContour\"].isin(rare_labels),\"LB\",df[\"LandContour\"])\nrare_labels = [\"CulDSac\",\"FR3\"]\ndf[\"LotConfig\"] = np.where(df[\"LotConfig\"].isin(rare_labels),\"CF\",df[\"LotConfig\"])\nrare_labels = [\"Corner\",\"FR2\",\"Inside\"]\ndf[\"LotConfig\"] = np.where(df[\"LotConfig\"].isin(rare_labels),\"CF2I\",df[\"LotConfig\"])\n# MSZoning - RH, RMY'ye eklenir\ndf.loc[df[\"MSZoning\"] == \"RH\", [\"MSZoning\"]] = \"RM\"\n# LotShape - IR3, IR2 ye kat\u0131labilir. IR3 d\u00fczensiz, IR2 orta d\u00fczensiz demek. IR2-3 IR1 ile birle\u015fsin\ndf.loc[df[\"LotShape\"] == \"IR3\", [\"LotShape\"]] = \"IR1\"\ndf.loc[df[\"LotShape\"] == \"IR2\", [\"LotShape\"]] = \"IR1\"\n# LandSlope - Sev, Mod a kat\u0131labilir. Sev arazi \u015fiddetli e\u011fimli, Mod orta e\u011fimli\ndf.loc[df[\"LandSlope\"] == \"Sev\", [\"LandSlope\"]] = \"Mod\"\n# Neighborhood dikkatli incelemek laz\u0131m. M\u00fclkiyetin Ames \u015fehrindeki konumu\n# df.loc[df[\"Neighborhood\"] == \"Sev\"] = \"Mod\"\n# Condition1 - PosA, PosN ile birle\u015febilir. RRAn ile RRAe birle\u015febilir. Biri kuzey-g\u00fcney demir yoluna biti\u015fiklik, di\u011feri Do\u011fubat\u0131 demiriyoluna\ndf.loc[df[\"Condition1\"] == \"PosA\", [\"Condition1\"]] = \"NEW_PosAN\"\ndf.loc[df[\"Condition1\"] == \"PosN\", [\"Condition1\"]] = \"NEW_PosAN\"\ndf.loc[df[\"Condition1\"] == \"RRNe\", [\"Condition1\"]] = \"NEW_RRANe\"\ndf.loc[df[\"Condition1\"] == \"RRAe\", [\"Condition1\"]] = \"NEW_RRANe\"\ndf.loc[df[\"Condition1\"] == \"RRAn\", [\"Condition1\"]] = \"NEW_RRANn\"\ndf.loc[df[\"Condition1\"] == \"RRNn\", [\"Condition1\"]] = \"NEW_RRANn\"\n# HouseStyle - 2Story + 2.5 Fin birle\u015fecek. 1.5 lerde bi ekleme yap\u0131labilir\ndf.loc[df[\"HouseStyle\"] == \"2.5Fin\", [\"HouseStyle\"]] = \"2Story\"\n# OverallQual - 9 ve 10 birle\u015febilir. 1 2 ve 3, 4 ile birle\u015febilir. Genel malzeme ve biti\u015f de\u011ferlendirmesi. 10 en iyi\ndf.loc[df[\"OverallQual\"] == 10, [\"OverallQual\"]] = 8\ndf.loc[df[\"OverallQual\"] == 9, [\"OverallQual\"]] = 8\ndf.loc[df[\"OverallQual\"] == 1, [\"OverallQual\"]] = 4\ndf.loc[df[\"OverallQual\"] == 2, [\"OverallQual\"]] = 4\ndf.loc[df[\"OverallQual\"] == 3, [\"OverallQual\"]] = 4\n# RoofStyle - Shed silinebilir. Mansard, flat, hipe eklenebilir. Gambdrel Gable ye eklenebilir.\ndf.loc[df[\"RoofStyle\"] == \"Mansard\", [\"RoofStyle\"]] = \"Hip\"\ndf.loc[df[\"RoofStyle\"] == \"Flat\", [\"RoofStyle\"]] = \"Hip\"\ndf.loc[df[\"RoofStyle\"] == \"Gambrel\", [\"RoofStyle\"]] = \"Gable\"\n# MasVnrType - BrkCmn, None a eklenir.\ndf.loc[df[\"MasVnrType\"] == \"BrkCmn\", [\"MasVnrType\"]] = \"None\"\n# ExterQual - Fa TA ya eklenir\ndf.loc[df[\"ExterQual\"] == \"Fa\", [\"ExterQual\"]] = \"TA\"\n# Foundation - Stone,Slab, CBlock a eklenir.\ndf.loc[df[\"Foundation\"] == \"Stone\", [\"Foundation\"]] = \"CBlock\"\ndf.loc[df[\"Foundation\"] == \"Slab\", [\"Foundation\"]] = \"CBlock\"\n# BedroomAbvGr - 0 ve 8 4e eklenir. 5 3 e eklenir. 6 2, 1 e eklenir\ndf.loc[df[\"BedroomAbvGr\"] == 8, [\"BedroomAbvGr\"]] = 4\ndf.loc[df[\"BedroomAbvGr\"] == 5, [\"BedroomAbvGr\"]] = 4\ndf.loc[df[\"BedroomAbvGr\"] == 6, [\"BedroomAbvGr\"]] = 4\ndf.loc[df[\"BedroomAbvGr\"] == 2, [\"BedroomAbvGr\"]] = 1\n# TotRmsAbvGrd - 2 silinir. 11 10a eklenir. 14 8 e eklenir. 3 4e eklenir\ndf.loc[df[\"TotRmsAbvGrd\"] == 11, [\"TotRmsAbvGrd\"]] = 10\ndf.loc[df[\"TotRmsAbvGrd\"] == 14, [\"TotRmsAbvGrd\"]] = 8\ndf.loc[df[\"TotRmsAbvGrd\"] == 3, [\"TotRmsAbvGrd\"]] = 4\n# TotRmsAbvGrd -\ndf = df[~(df[\"TotRmsAbvGrd\"] == 0)]\ndf.loc[df[\"TotRmsAbvGrd\"] == 11, [\"TotRmsAbvGrd\"]] = 10\ndf.loc[df[\"TotRmsAbvGrd\"] == 14, [\"TotRmsAbvGrd\"]] = 8\ndf.loc[df[\"TotRmsAbvGrd\"] == 12, [\"TotRmsAbvGrd\"]] = 8\n# Functional - Typ hari\u00e7 hepsi birle\u015fecek\ndf.loc[df[\"Functional\"] == \"Maj1\", [\"Functional\"]] = \"NEW_Others\"\ndf.loc[df[\"Functional\"] == \"Maj2\", [\"Functional\"]] = \"NEW_Others\"\ndf.loc[df[\"Functional\"] == \"Min1\", [\"Functional\"]] = \"NEW_Others\"\ndf.loc[df[\"Functional\"] == \"Min2\", [\"Functional\"]] = \"NEW_Others\"\ndf.loc[df[\"Functional\"] == \"Mod\", [\"Functional\"]] = \"NEW_Others\"\n# FireplaceQu - Po No ya eklenecek. Fa Ta ya eklenecek. Ex Gd ye eklenecek\ndf.loc[df[\"FireplaceQu\"] == \"Po\", [\"FireplaceQu\"]] = \"No\"\ndf.loc[df[\"FireplaceQu\"] == \"Fa\", [\"FireplaceQu\"]] = \"TA\"\ndf.loc[df[\"FireplaceQu\"] == \"Ex\", [\"FireplaceQu\"]] = \"Gd\"\n# GarageCond - Po, Fa No ya eklenecek. Ex Gd TA ya eklenecek\ndf.loc[df[\"GarageCond\"] == \"Po\", [\"GarageCond\"]] = \"No\"\ndf.loc[df[\"GarageCond\"] == \"Fa\", [\"GarageCond\"]] = \"No\"\ndf.loc[df[\"GarageCond\"] == \"Ex\", [\"GarageCond\"]] = \"TA\"\ndf.loc[df[\"GarageCond\"] == \"Gd\", [\"GarageCond\"]] = \"TA\"\n# Fence - MnWw MnPrv ye eklenecek\ndf.loc[df[\"Fence\"] == \"GdPrv\", [\"Fence\"]] = \"NEW_Fence\"\ndf.loc[df[\"Fence\"] == \"GdWo\", [\"Fence\"]] = \"NEW_Fence\"\ndf.loc[df[\"Fence\"] == \"MnPrv\", [\"Fence\"]] = \"NEW_Fence\"\ndf.loc[df[\"Fence\"] == \"MnWw\", [\"Fence\"]] = \"NEW_Fence\"\n# SaleType - ConL\u0131, ConLw COD a eklenecek. Con Newe eklenecek. CWD WD ye eklenecek\ndf.loc[df[\"SaleType\"] == \"ConLI\", [\"SaleType\"]] = \"Con\"\ndf.loc[df[\"SaleType\"] == \"ConLw\", [\"SaleType\"]] = \"Con\"\ndf.loc[df[\"SaleType\"] == \"ConLD\", [\"SaleType\"]] = \"Con\"\ndf.loc[df[\"SaleType\"] == \"Oth\", [\"SaleType\"]] = \"Con\"\ndf.loc[df[\"SaleType\"] == \"CWD\", [\"SaleType\"]] = \"WD\"\n# SaleCondition - Adjland Abnormala eklenecek. Alloca ve Family Normal e eklenecek\ndf.loc[df[\"SaleCondition\"] == \"AdjLand\", [\"SaleCondition\"]] = \"Normal\"\ndf.loc[df[\"SaleCondition\"] == \"Alloca\", [\"SaleCondition\"]] = \"Abnorml\"\ndf.loc[df[\"SaleCondition\"] == \"Family\", [\"SaleCondition\"]] = \"Normal\"\n\"\"\"\n","d65d4ce2":"last_miss = missing_values_table(df)\ndf.head()","03319811":"df['New_TotalSF'] = df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF']\ndf[\"NEW_TotalBathRoom\"] = df[\"FullBath\"] + df[\"HalfBath\"]*0.5 + df[\"BsmtFullBath\"] + df[\"BsmtHalfBath\"]*0.5\ndf[\"NEW_TotalFeet\"]= df[\"GrLivArea\"] + df[\"TotalBsmtSF\"]\ndf[\"New_Relation\"] = (df[\"OpenPorchSF\"]+df[\"EnclosedPorch\"] + df[\"ScreenPorch\"] + df[\"WoodDeckSF\"]) \/ (df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF'])","f9273aa5":"df_temp = df\n\ndf, new_cols_ohe = one_hot_encoder(df, new_categorical_columns)\n\noutlier_columns = has_outliers(df, new_numerical_columns)\n\nreplace_with_thresholds(df, new_numerical_columns)","ede986f1":"like_num = [col for col in df.columns if df[col].dtypes != 'O' and len(df[col].value_counts()) < 20]\ncols_need_scale = [col for col in df.columns if col not in new_cols_ohe\n                   and col not in \"Id\"\n                   and col not in \"SalePrice\"\n                   and col not in like_num]\n\nfor col in cols_need_scale:\n    df[col] = robust_scaler(df[col])","ac35f9e4":"train_df = df[df['SalePrice'].notnull()]\ntest_df = df[df['SalePrice'].isnull()]\n\ntrain_df.to_pickle(\"train_df.pkl\")\ntest_df.to_pickle(\"test_df.pkl\")","d099c30c":"X_train = train_df.drop('SalePrice', axis=1)\ny_train = train_df[[\"SalePrice\"]]\n\nX_test = test_df.drop('SalePrice', axis=1)\ny_test = test_df[[\"SalePrice\"]]\n\nt = df[df[\"Id\"]>1460]\nt= t.drop(\"SalePrice\", axis=1)\nlen(t)\n\nRidge_model = Ridge()\nRidge_model.fit(X_train, y_train)\npredictions = Ridge_model.predict(X_test)\n\nC = []\n\nfor i in predictions:\n    C.append(i[0])\n\nmy_submission = pd.DataFrame({'Id': t.Id,'SalePrice': C})\nmy_submission.to_csv('submission.csv', index=False)","71a68c0f":"<a id='ar'><\/a>\n<h1 style=\"color:forestgreen\" >6. Modelleme<\/h1> ","47fef831":"<a id='libraries'><\/a>\n<h1 style=\"color:forestgreen\" >1. Paketler<\/h1> ","95f12686":"<a id='myfunction'><\/a>\n<h1 style=\"color:forestgreen\" >5. Feature Engineering<\/h1> ","0ed9ac5a":"<a id='load'><\/a>\n<h1 style=\"color:forestgreen\" >2. Data<\/h1> ","ea5289ba":"<a id='tidydata'><\/a>\n<h1 style=\"color:forestgreen\" >3. Fonksiyonlar<\/h1> ","2a53db25":"<center> <h1 style=\"background-color:seagreen; color:white\" >House Price<\/h1> \n    \n![housesbanner.png](attachment:housesbanner.png)\n    \n<br>    \n    \n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n  <h3 class=\"list-group-item list-group-item-action active\" style=\"background-color:seagreen; color:white\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">Notebook \u0130\u00e7eri\u011fi!<\/h3>  \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#libraries\" role=\"tab\" aria-controls=\"profile\" style=\"color:forestgreen\">Paketler<span class=\"badge badge-primary badge-pill\" style=\"background-color:khaki; color:gray\">1<\/span><\/a>\n  <a id=\"section2\" class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#load\" role=\"tab\" aria-controls=\"messages\" style=\"color:forestgreen\"> Data <span class=\"badge badge-primary badge-pill\" style=\"background-color:khaki; color:gray\">2<\/span><\/a>\n  <a class=\"list-group-item list-group-item-action\"  data-toggle=\"list\" href=\"#tidydata\" role=\"tab\" aria-controls=\"settings\" style=\"color:forestgreen\">Fonksiyonlar<span class=\"badge badge-primary badge-pill\" style=\"background-color:khaki; color:gray\">3<\/span><\/a>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#step\" role=\"tab\" aria-controls=\"settings\" style=\"color:forestgreen\">Analizler<span class=\"badge badge-primary badge-pill\" style=\"background-color:khaki; color:gray\">4<\/span><\/a> \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#myfunction\" role=\"tab\" aria-controls=\"settings\" style=\"color:forestgreen\">Feature Engineering<span class=\"badge badge-primary badge-pill\" style=\"background-color:khaki; color:gray\">5<\/span><\/a>\n    <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#ar\" role=\"tab\" aria-controls=\"settings\" style=\"color:forestgreen\">Modelleme<span class=\"badge badge-primary badge-pill\" style=\"background-color:khaki; color:gray\">6<\/span><\/a>","b992aafd":"<a id='step'><\/a>\n<h1 style=\"color:forestgreen\" >4. Analizler<\/h1> "}}