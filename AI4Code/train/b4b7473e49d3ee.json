{"cell_type":{"470cf765":"code","2e011813":"code","4fe1bbe2":"code","a84db7bc":"code","2772c212":"code","fe4fe537":"code","d3b16b7d":"code","17579af4":"code","146b1f78":"code","ed65734b":"code","1dba7e4b":"code","f8def25f":"code","aa6f78e7":"code","2cc40067":"code","3e561d61":"code","545f4721":"code","00bb026f":"code","f8906d34":"code","03d42b2a":"code","35462bad":"code","a6c45ac2":"code","b5c248fa":"code","cfad1f63":"code","a0e37377":"code","d4b0973d":"code","77ab22a3":"code","c1c11ae2":"code","ec00724b":"code","74ab47a8":"code","b9ae44d5":"markdown","85d6c85f":"markdown","794e1142":"markdown","b3af79ef":"markdown","fb8e046b":"markdown","331e94f8":"markdown","237b6102":"markdown","2d9e0f1d":"markdown","4991554b":"markdown","3b037518":"markdown","27a03032":"markdown"},"source":{"470cf765":"!git clone https:\/\/github.com\/udacity\/CarND-Advanced-Lane-Lines.git","2e011813":"from distutils.dir_util import copy_tree\nimport shutil\ncopy_tree(\".\/CarND-Advanced-Lane-Lines\/test_images\", \".\/test_images\")\nshutil.move(\".\/CarND-Advanced-Lane-Lines\/project_video.mp4\", \".\/project_video.mp4\")\nshutil.move(\".\/CarND-Advanced-Lane-Lines\/challenge_video.mp4\", \".\/challenge_video.mp4\")\nshutil.move(\".\/CarND-Advanced-Lane-Lines\/harder_challenge_video.mp4\", \".\/harder_challenge_video.mp4\")\nshutil.rmtree('.\/CarND-Advanced-Lane-Lines', ignore_errors=False, onerror=None)","4fe1bbe2":"import numpy as np\nimport cv2\nimport glob\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n%matplotlib inline","a84db7bc":"# Define a class to receive the characteristics of each line detection\nclass Line():\n    def __init__(self):\n        # was the line detected in the last iteration?\n        self.detected = False  \n        # x values of the last n fits of the line\n        self.recent_xfitted = [] \n        #average x values of the fitted line over the last n iterations\n        self.bestx = None     \n        #polynomial coefficients averaged over the last n iterations\n        self.best_fit = None  \n        #polynomial coefficients for the most recent fit\n        self.current_fit = [np.array([False])]  \n        #radius of curvature of the line in some units\n        self.radius_of_curvature = None \n        #distance in meters of vehicle center from the line\n        self.line_base_pos = None \n        #difference in fit coefficients between last and new fits\n        self.diffs = np.array([0,0,0], dtype='float') \n        #x values for detected line pixels\n        self.allx = None  \n        #y values for detected line pixels\n        self.ally = None","2772c212":"def perspective_transformer():\n    global src, dst, M, Minv\n    \n#     src = np.float32([\n#         [678, 440],[1279, 720],\n#         [0, 720],[595, 440]])\n\n#     # Four desired coordinates\n#     dst = np.float32([\n#         [1180, 0],[1180, 720],\n#         [100, 720],[100, 0]])\n    \n    # Define the perspective transformation area\n    img_width = 1280\n    img_height = 720\n\n    bot_width = .76 # percent of bottom\n    mid_width = .17 #.17\n    height_pct = .66 #.66\n    bottom_trim = .935\n    src = np.float32([\n        [img_width*(.5-mid_width\/2), img_height*height_pct],\n        [img_width*(.5+mid_width\/2), img_height*height_pct],\n        [img_width*(.5+bot_width\/2), img_height*bottom_trim],\n        [img_width*(.5-bot_width\/2), img_height*bottom_trim]\n    ])\n    \n    offset = img_width*.2\n    \n    dst = np.float32([\n        [offset, 0],\n        [img_width-offset, 0],\n        [img_width-offset, img_height],\n        [offset, img_height]\n    ])\n    \n    \n    M = cv2.getPerspectiveTransform(src, dst)\n    Minv = cv2.getPerspectiveTransform(dst, src)","fe4fe537":"# Threshold pipeline\n# \n\ndef abs_sobel_thresh(img, orient='x', sobel_kernel=3, thresh=(0, 255)):\n    # Calculate directional gradient\n    \n    # 1) Convert to grayscale\n    gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n    \n    # 2) Take the derivative in x or y given orient = 'x' or 'y'\n    if orient == 'x':\n        sobel = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=sobel_kernel)\n    if orient == 'y':\n        sobel = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=sobel_kernel)\n        \n    # 3) Take the absolute value of the derivative or gradient\n    abs_sobel = np.absolute(sobel)\n    \n    # 4) Scale to 8-bit (0 - 255) then convert to type = np.uint8\n    scaled_sobel = np.uint8(255*abs_sobel\/np.max(abs_sobel))\n    \n    # 5) Create a mask of 1's where the scaled gradient magnitude \n            # is > thresh_min and < thresh_max\n    grad_binary = np.zeros_like(scaled_sobel)\n    grad_binary[(scaled_sobel >= thresh[0]) & (scaled_sobel <= thresh[1])] = 1\n    \n    return grad_binary\n\ndef mag_thresh(image, sobel_kernel=3, mag_thresh=(0, 255)):\n    # Calculate gradient magnitude\n    # 1) Convert to grayscale\n    gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n    # 2) Take the gradient in x and y separately\n    sobelx = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=sobel_kernel)\n    sobely = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=sobel_kernel)\n    # 3) Calculate the magnitude \n    abs_sobelxy = np.sqrt(sobelx**2+sobely**2)\n    # 4) Scale to 8-bit (0 - 255) and convert to type = np.uint8\n    scaled_sobel = np.uint8(255*abs_sobelxy\/np.max(abs_sobelxy))\n    # 5) Create a binary mask where mag thresholds are met\n    mag_binary = np.zeros_like(scaled_sobel)\n    mag_binary[(scaled_sobel >= mag_thresh[0]) & (scaled_sobel <= mag_thresh[1])] = 1\n    \n    return mag_binary\n\ndef dir_thresh(image, sobel_kernel=3, thresh=(0, np.pi\/2)):\n    # Calculate gradient direction\n    # 1) Convert to grayscale\n    gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n    # 2) Take the gradient in x and y separately\n    sobelx = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=sobel_kernel)\n    sobely = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=sobel_kernel)\n    # 3) Take the absolute value of the x and y gradients\n    abs_sobelx = np.absolute(sobelx)\n    abs_sobely = np.absolute(sobely)\n    # 4) Use np.arctan2(abs_sobely, abs_sobelx) to calculate the direction of the gradient \n    gradient_direction = np.arctan2(abs_sobely, abs_sobelx)\n    # 5) Create a binary mask where direction thresholds are met\n    dir_binary = np.zeros_like(gradient_direction)\n    dir_binary[(gradient_direction>=thresh[0])&(gradient_direction<=thresh[1])] = 1\n    \n    return dir_binary\n\ndef color_thresh(img, s_thresh=(0,255), v_thresh=(0,255)):\n    # Convert to HLS color space and separate the S channel\n    hls = cv2.cvtColor(img, cv2.COLOR_RGB2HLS)\n    s_channel = hls[:,:,2]\n    s_binary = np.zeros_like(s_channel)\n    s_binary[(s_channel>=s_thresh[0]) & (s_channel<=s_thresh[1])] = 1\n    \n    # Convert to HSV color space and separate the V channel\n    hsv = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)\n    v_channel = hsv[:,:,2]\n    v_binary = np.zeros_like(v_channel)\n    v_binary[(v_channel>=v_thresh[0]) & (v_channel<=v_thresh[1])] = 1   \n    \n    c_binary = np.zeros_like(s_channel)\n    c_binary[(s_binary==1) & (v_binary==1)] = 1\n    \n    return c_binary\n    \n\ndef thresh_pipeline(img, gradx_thresh=(0,255), grady_thresh=(0,255), s_thresh=(0, 255), v_thresh=(0, 255)):\n    \n    gradx = abs_sobel_thresh(img, orient='x', thresh=gradx_thresh)\n    grady = abs_sobel_thresh(img, orient='y', thresh=grady_thresh)\n    c_binary = color_thresh(img, s_thresh=s_thresh, v_thresh=v_thresh)\n    \n    \n    # Combine these thresholded binary images\n    thresh_binary = np.zeros_like(img[:,:,0])\n    thresh_binary[(gradx==1) & (grady==1) | (c_binary==1)] = 255\n#     thresh_binary[c_binary==1] = 255\n#     thresh_binary[(sxbinary==1)|(s_binary==1)] = 1 \n    \n    return thresh_binary","d3b16b7d":"def warper(img, src, dst):\n\n    # Compute and apply perpective transform\n    img_size = (img.shape[1], img.shape[0])\n    M = cv2.getPerspectiveTransform(src, dst)\n    warped = cv2.warpPerspective(img, M, img_size, flags=cv2.INTER_NEAREST)  # keep same size as input image\n\n    return warped","17579af4":"def sliding_windows_search(img):\n    # input: binary warped image\n    # 5. Detect lane pixels and fit to find the lane boundary.\n\n    # binary_warped = mpimg.imread('test_images\/warped-example.jpg')\n    binary_warped = img.astype('uint8')\n\n    # Assuming you have created a warped binary image called \"binary_warped\"\n    # Take a histogram of the bottom half of the image\n    histogram = np.sum(binary_warped[binary_warped.shape[0]\/\/2:,:], axis=0)\n    # Create an output image to draw on and  visualize the result\n    out_img = np.dstack((binary_warped, binary_warped, binary_warped))\n    # Find the peak of the left and right halves of the histogram\n    # These will be the starting point for the left and right lines\n    midpoint = np.int(histogram.shape[0]\/2)\n    \n    leftx_base = np.argmax(histogram[:midpoint])\n    rightx_base = np.argmax(histogram[midpoint:]) + midpoint\n\n    # Choose the number of sliding windows\n    nwindows = 9\n    # Set height of windows\n    window_height = np.int(binary_warped.shape[0]\/nwindows)\n    # Identify the x and y positions of all nonzero pixels in the image\n    nonzero = binary_warped.nonzero()\n    nonzeroy = np.array(nonzero[0])\n    nonzerox = np.array(nonzero[1])\n    # Current positions to be updated for each window\n    leftx_current = leftx_base\n    rightx_current = rightx_base\n    # Set the width of the windows +\/- margin\n    margin = 100\n    # Set minimum number of pixels found to recenter window\n    minpix = 50\n    # Create empty lists to receive left and right lane pixel indices\n    left_lane_inds = []\n    right_lane_inds = []\n\n    # Step through the windows one by one\n    for window in range(nwindows):\n        # Identify window boundaries in x and y (and right and left)\n        win_y_low = binary_warped.shape[0] - (window+1)*window_height\n        win_y_high = binary_warped.shape[0] - window*window_height\n        win_xleft_low = leftx_current - margin\n        win_xleft_high = leftx_current + margin\n        win_xright_low = rightx_current - margin\n        win_xright_high = rightx_current + margin\n        # Draw the windows on the visualization image\n        cv2.rectangle(out_img,(win_xleft_low,win_y_low),(win_xleft_high,win_y_high),(0,255,0), 2) \n        cv2.rectangle(out_img,(win_xright_low,win_y_low),(win_xright_high,win_y_high),(0,255,0), 2) \n        # Identify the nonzero pixels in x and y within the window\n        good_left_inds = ((nonzeroy >= win_y_low) & (nonzeroy < win_y_high) & (nonzerox >= win_xleft_low) & (nonzerox < win_xleft_high)).nonzero()[0]\n        good_right_inds = ((nonzeroy >= win_y_low) & (nonzeroy < win_y_high) & (nonzerox >= win_xright_low) & (nonzerox < win_xright_high)).nonzero()[0]\n        # Append these indices to the lists\n        left_lane_inds.append(good_left_inds)\n        right_lane_inds.append(good_right_inds)\n        # If you found > minpix pixels, recenter next window on their mean position\n        if len(good_left_inds) > minpix:\n            leftx_current = np.int(np.mean(nonzerox[good_left_inds]))\n        if len(good_right_inds) > minpix:        \n            rightx_current = np.int(np.mean(nonzerox[good_right_inds]))\n\n    # Concatenate the arrays of indices\n    left_lane_inds = np.concatenate(left_lane_inds)\n    right_lane_inds = np.concatenate(right_lane_inds)\n\n    # Extract left and right line pixel positions\n    leftx = nonzerox[left_lane_inds]\n    lefty = nonzeroy[left_lane_inds] \n    rightx = nonzerox[right_lane_inds]\n    righty = nonzeroy[right_lane_inds] \n\n    # Fit a second order polynomial to each\n    left_fit = np.polyfit(lefty, leftx, 2)\n    right_fit = np.polyfit(righty, rightx, 2)\n    \n    out_img[nonzeroy[left_lane_inds], nonzerox[left_lane_inds]] = [255, 0, 0]\n    out_img[nonzeroy[right_lane_inds], nonzerox[right_lane_inds]] = [0, 0, 255]\n    \n    return left_fit, right_fit, out_img","146b1f78":"def lane_tracking(img, left_fit, right_fit):\n    # Assume you now have a new warped binary image \n    # from the next frame of video (also called \"binary_warped\")\n    # It's now much easier to find line pixels!\n\n    # Now we already have left_fit, right_fit\n    \n    binary_warped = img.astype('uint8')\n\n    # Create an output image to draw on and  visualize the result\n    out_img = np.dstack((binary_warped, binary_warped, binary_warped))\n    window_img = np.zeros_like(out_img)\n    \n    nonzero = binary_warped.nonzero()\n    nonzeroy = np.array(nonzero[0])\n    nonzerox = np.array(nonzero[1])\n    margin = 100\n\n    left_lane_inds = ((nonzerox > (left_fit[0]*(nonzeroy**2) + left_fit[1]*nonzeroy + left_fit[2] - margin)) \n                      & (nonzerox < (left_fit[0]*(nonzeroy**2) + left_fit[1]*nonzeroy + left_fit[2] + margin))) \n\n    right_lane_inds = ((nonzerox > (right_fit[0]*(nonzeroy**2) + right_fit[1]*nonzeroy + right_fit[2] - margin)) \n                       & (nonzerox < (right_fit[0]*(nonzeroy**2) + right_fit[1]*nonzeroy + right_fit[2] + margin)))  \n\n    # Again, extract left and right line pixel positions\n    leftx = nonzerox[left_lane_inds]\n    lefty = nonzeroy[left_lane_inds] \n    rightx = nonzerox[right_lane_inds]\n    righty = nonzeroy[right_lane_inds]\n\n    # Fit a second order polynomial to each\n    left_fit = np.polyfit(lefty, leftx, 2)\n    right_fit = np.polyfit(righty, rightx, 2)\n\n    # Generate x and y values for plotting\n    ploty = np.linspace(0, binary_warped.shape[0]-1, binary_warped.shape[0] )\n    left_fitx = left_fit[0]*ploty**2 + left_fit[1]*ploty + left_fit[2]\n    right_fitx = right_fit[0]*ploty**2 + right_fit[1]*ploty + right_fit[2]\n\n    out_img[nonzeroy[left_lane_inds], nonzerox[left_lane_inds]] = [255, 0, 0]\n    out_img[nonzeroy[right_lane_inds], nonzerox[right_lane_inds]] = [0, 0, 255]\n    \n    # Generate a polygon to illustrate the search window area\n    # And recast the x and y points into usable format for cv2.fillPoly()\n    left_line_window1 = np.array([np.transpose(np.vstack([left_fitx-margin, ploty]))])\n    left_line_window2 = np.array([np.flipud(np.transpose(np.vstack([left_fitx+margin, ploty])))])\n    left_line_pts = np.hstack((left_line_window1, left_line_window2))\n    right_line_window1 = np.array([np.transpose(np.vstack([right_fitx-margin, ploty]))])\n    right_line_window2 = np.array([np.flipud(np.transpose(np.vstack([right_fitx+margin, ploty])))])\n    right_line_pts = np.hstack((right_line_window1, right_line_window2))\n    \n    # Draw the lane onto the warped blank image\n    cv2.fillPoly(window_img, np.int_([left_line_pts]), (0,255, 0))\n    cv2.fillPoly(window_img, np.int_([right_line_pts]), (0,255, 0))\n    result = cv2.addWeighted(out_img, 1, window_img, 0.3, 0)\n   \n    \n    return left_fit, right_fit, result","ed65734b":"def cal_curvature(ploty, left_fitx, right_fitx):\n    \n    y_eval = np.max(ploty)\n    \n    # Define conversions in x and y from pixels space to meters\n    global ym_per_pix, xm_per_pix\n    ym_per_pix = 30\/720 # meters per pixel in y dimension\n    xm_per_pix = 3.7\/505\/1.2054\/0.97 # meters per pixel in x dimension\n    # Fit new polynomials to x,y in world space\n    left_fit_cr = np.polyfit(ploty*ym_per_pix, left_fitx*xm_per_pix, 2)\n    right_fit_cr = np.polyfit(ploty*ym_per_pix, right_fitx*xm_per_pix, 2)\n    # Calculate the new radii of curvature\n    left_curverad = ((1 + (2*left_fit_cr[0]*y_eval*ym_per_pix + left_fit_cr[1])**2)**1.5) \/ np.absolute(2*left_fit_cr[0])\n    right_curverad = ((1 + (2*right_fit_cr[0]*y_eval*ym_per_pix + right_fit_cr[1])**2)**1.5) \/ np.absolute(2*right_fit_cr[0])\n    # Now our radius of curvature is in meters\n#     print(left_curverad, 'm', right_curverad, 'm')\n    # Example values: 632.1 m    626.2 m\n    \n    # Calculate the offset of the car on the road\n    \n    lane_center = (left_fitx[-1]+right_fitx[-1])\/2\n        \n    center_diff = (640-lane_center)*xm_per_pix\n    \n    return left_curverad, right_curverad, center_diff","1dba7e4b":"def lane_mask(img_undist, binary_warped, Minv, ploty, left_fitx, right_fitx):\n    # 7. Warp the detected lane boundaries back onto the original image.\n\n    # Create an image to draw the lines on\n    warp_zero = np.zeros_like(binary_warped).astype(np.uint8)\n    color_warp = np.dstack((warp_zero, warp_zero, warp_zero))\n\n    # Recast the x and y points into usable format for cv2.fillPoly()\n    pts_left = np.array([np.transpose(np.vstack([left_fitx, ploty]))])\n    pts_right = np.array([np.flipud(np.transpose(np.vstack([right_fitx, ploty])))])\n    pts = np.hstack((pts_left, pts_right))\n\n    # Draw the lane onto the warped blank image\n    cv2.fillPoly(color_warp, np.int_([pts]), (0,255, 0))\n    \n    middle_x = (left_fitx + right_fitx)\/2\n    middle_pts = np.transpose(np.vstack((middle_x, ploty))).astype(np.int32)\n    \n#     print(middle_pts.shape)\n#     print(middle_pts)\n#     plt.plot((left_fitx+right_fitx)\/2, ploty, color='yellow')\n    cv2.polylines(color_warp, np.int32([middle_pts]), False, (0, 0, 255), thickness=10)\n    cv2.polylines(color_warp, np.int32([pts_left]), False, (0, 0, 255), thickness=15)\n    cv2.polylines(color_warp, np.int32([pts_right]), False, (0, 0, 255), thickness=15)\n    \n    cv2.arrowedLine(color_warp, (640, 719), (640,690), (255,0,255), 5, tipLength=0.25)\n    \n    # Warp the blank back to original image space using inverse perspective matrix (Minv)\n    newwarp = cv2.warpPerspective(color_warp, Minv, (img_undist.shape[1], img_undist.shape[0])) \n    # Combine the result with the original image\n    result = cv2.addWeighted(img_undist, 1, newwarp, 0.3, 0)\n    \n    \n    debug_canvas = (np.dstack((binary_warped, binary_warped, binary_warped))*255).astype(np.uint8)\n    debug_result = cv2.addWeighted(debug_canvas, 1, color_warp, 0.4, 0)\n    \n    return result","f8def25f":"def lane_quality(ploty, left_fitx, right_fitx):\n\n    \n    lane_width = (right_fitx - left_fitx)\n    lane_width_mean = np.mean(lane_width)*xm_per_pix\n    lane_width_var = np.var(lane_width)\n    \n    return lane_width_mean, lane_width_var","aa6f78e7":"   \ndef lane_finding(img_orig):\n    \n    # 1. Compute the camera calibration matrix and distortion coefficients given a set of chessboard images.        \n    # mtx, dist are global variables\n    \n    # 2. Apply a distortion correction to raw images.\n    img_undist = cv2.undistort(img_orig, mtx, dist, None, mtx)\n    \n    # 3. Use color transforms, gradients, etc., to create a thresholded binary image.\n    img_thresh = thresh_pipeline(img_undist, gradx_thresh=(25,255), grady_thresh=(10,255), s_thresh=(100, 255), v_thresh=(0, 255))\n    \n    # 4. Apply a perspective transform to rectify binary image (\"birds-eye view\").\n    # src, dst, M, Minv are global variables\n\n    img_birdeye = warper(img_thresh, src, dst)\n    img_birdeye_color = warper(img_undist, src, dst)\n    \n    # 5. Detect lane pixels and fit to find the lane boundary. \n        \n    if (not line_l.detected) or (not line_r.detected):\n        # Run a sliding windows search\n        left_fit, right_fit, img_search = sliding_windows_search(img_birdeye)\n        \n        cv2.putText(img_search, 'Searching', \n            (550, 350), cv2.FONT_HERSHEY_SIMPLEX, 2, (0,255,0), 5)\n  \n    else:\n#         print(line_l.recent_xfitted[-1][0], line_r.recent_xfitted[-1][0])\n        \n        left_fit, right_fit, img_search = lane_tracking(img_birdeye, \n                                                        line_l.recent_xfitted[-1][0], \n                                                        line_r.recent_xfitted[-1][0]) \n        cv2.putText(img_search, 'Tracking', \n                    (550, 350), cv2.FONT_HERSHEY_SIMPLEX, 2, (0,255,0), 5)\n    \n    line_l.current_fit = [left_fit]\n    line_r.current_fit = [right_fit]\n\n    line_l.bestx = None\n    line_r.bestx = None\n    \n    line_l.recent_xfitted.append([left_fit])\n    line_r.recent_xfitted.append([right_fit])  \n\n    if len(line_l.recent_xfitted)>1:\n        \n        line_l.best_fit = np.mean(np.array(line_l.recent_xfitted[-20:-1]),\n                                axis=0) \n        line_r.best_fit = np.mean(np.array(line_r.recent_xfitted[-20:-1]),\n                                axis=0)    \n    else:\n        line_l.best_fit = line_l.recent_xfitted[-1][0]\n        line_r.best_fit = line_r.recent_xfitted[-1][0]  \n            \n    # 6. Determine the curvature of the lane and vehicle position with respect to center.\n    # Generate x and y values for plotting\n    ploty = np.linspace(0, img_birdeye.shape[0]-1, img_birdeye.shape[0] )\n    left_fitx = left_fit[0]*ploty**2 + left_fit[1]*ploty + left_fit[2]\n    right_fitx = right_fit[0]*ploty**2 + right_fit[1]*ploty + right_fit[2]\n    \n    left_curverad, right_curverad, center_diff = cal_curvature(ploty, left_fitx, right_fitx)\n    lane_width_mean, lane_width_var = lane_quality(ploty, left_fitx, right_fitx)\n    \n    # Sanity chec\n#     print(left_fit)\n#     print(line_l.best_fit)\n    \n    line_l.diffs = left_fit - line_l.best_fit\n    \n    line_r.diffs = right_fit - line_r.best_fit\n    \n#     print(np.sum(line_l.diffs**2)+np.sum(line_r.diffs))\n    \n    lane_continue = np.sum(line_l.diffs**2)+np.sum(line_r.diffs)\n    \n    if (not 3<lane_width_mean<5) or (lane_width_var>500) or (lane_continue>6000):\n        \n        line_l.detected = False\n        line_r.detected = False\n        \n        del line_l.recent_xfitted[-1]\n        \n        del line_r.recent_xfitted[-1]\n        \n        left_fit, right_fit = line_l.best_fit[0], line_r.best_fit[0]\n        \n        cv2.putText(img_search, '------', \n            (550, 350), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,0,0), 5)\n        \n        cv2.putText(img_search, 'Keeping', \n            (550, 450), cv2.FONT_HERSHEY_SIMPLEX, 2, (0,255,0), 5)\n                \n    else:\n#         left_fit, right_fit = line_l.current_fit[0], line_r.current_fit[0]\n        line_l.detected = True\n        line_r.detected = True\n\n        line_l.best_fit = np.mean(np.array(line_l.recent_xfitted[-20:]),\n                                axis=0) \n        line_r.best_fit = np.mean(np.array(line_r.recent_xfitted[-20:]),\n                                axis=0)\n    \n\n    \n    # Recalculate the curvature and lane_width\n#     print(left_fit, right_fit)\n    left_fitx = left_fit[0]*ploty**2 + left_fit[1]*ploty + left_fit[2]\n    right_fitx = right_fit[0]*ploty**2 + right_fit[1]*ploty + right_fit[2]\n    \n    left_curverad, right_curverad, center_diff = cal_curvature(ploty, left_fitx, right_fitx)\n    lane_width_mean, lane_width_var = lane_quality(ploty, left_fitx, right_fitx)\n        \n\n    # 7. Warp the detected lane boundaries back onto the original image.\n    result = lane_mask(img_undist, img_birdeye, Minv, ploty, left_fitx, right_fitx)\n    cv2.putText(result, 'Radius of Curvature (L) = '+str(round(left_curverad, 1))+'(m)', \n                (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)\n    cv2.putText(result, 'Radius of Curvature (R) = '+str(round(right_curverad, 1))+'(m)', \n                (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)\n    cv2.putText(result, 'Vehicle is '+str(round(center_diff, 2))+'(m) off center', \n                (50, 150), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)\n    cv2.putText(result, 'Lane width '+str(round(lane_width_mean, 2))+'(m) Var:'+str(round(lane_width_var)), \n                (50, 200), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)\n    \n    # Output visual display of the lane boundaries and numerical estimation of lane curvature and vehicle position.\n    canvas = np.zeros([960,1280,3], dtype=np.uint8)\n    \n    canvas[0:720, 0:1280, :] = result   \n        \n    ## Plot 1 \n#     color_thresh_binary = np.dstack(( np.zeros_like(img_thresh), img_thresh, np.zeros_like(img_thresh) ))\n#     color_thresh_binary = (color_thresh_binary*255).astype(np.uint8)\n    img_debug = img_thresh\n    color_debug = np.dstack(( img_debug, img_debug, img_debug ))\n#     color_debug = (color_debug*255).astype(np.uint8)\n    cv2.polylines(color_debug, np.int32([src]), True, (0, 255, 0), thickness=4)\n    plot1 = cv2.resize(color_debug, (426, 240))\n    \n    ## Plot 3: bird eye view (binary) \n    img_debug = img_birdeye\n    color_debug = np.dstack(( img_debug, img_debug, img_debug ))\n#     color_debug = (color_debug*255).astype(np.uint8)\n    plot3 = cv2.resize(color_debug, (426, 240))\n    \n    ## Plot 4: the searching process\n    plot4 = img_search\n    left_pts = np.transpose(np.vstack((left_fitx, ploty))).astype(np.int32)    \n    right_pts = np.transpose(np.vstack((right_fitx, ploty))).astype(np.int32)\n#     print(left_pts.shape);print(left_pts)\n#     print(right_pts.shape);print(right_pts)\n    cv2.polylines(plot4, np.int32([left_pts]), False, (255, 255, 0), thickness=5)\n    cv2.polylines(plot4, np.int32([right_pts]), False, (255, 255, 0), thickness=5)\n    plot4 = cv2.resize(img_search, (426, 240))\n    \n    ## Plot 2: bird eye view (color)\n    cv2.polylines(img_birdeye_color, np.int32([dst]), True, (0, 255, 0), thickness=4)\n    plot2 = cv2.resize(img_birdeye_color, (426, 240))\n    \n    # Plot the three contents\n    canvas[720:960, 0:426, :] = plot1\n    canvas[720:960, 427:427+426, :] = plot2\n    canvas[720:960, -427:-1, :] = plot4\n    \n    return canvas","2cc40067":"!wget \"https:\/\/www.kaggleusercontent.com\/kf\/22717527\/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..hFNng1yFKymqHz8EFJvVvw.AZoIDMKbHjspKBbQ0wy-_gz2A0ZOtsLWEdJdXWiajqn1oLZ6udBuJYRE2vhtTYZUVpsm816sL2ZkmXe-j9vXJqDbFE89QI1BahE1UTompmYJOh5Bcjr1f14sXfm9SwlfN1nYsj7ndAZTariF0FTm8h8mOdh4_K4dCHCErF6SKcc.eoMHjBFozmzgz18va-__1g\/calibration_pickle.p\"","3e561d61":"# Read in the saved objpoints and imgpoints\nimport pickle\nglobal mtx, dist\ncalibration_pickle = pickle.load( open( \".\/calibration_pickle.p\", \"rb\" ) )\nmtx = calibration_pickle[\"mtx\"]\ndist = calibration_pickle[\"dist\"]","545f4721":"perspective_transformer()\nprint('src: {}; dst:{}'.format(src, dst))","00bb026f":"# Undistort image\nimg_orig = mpimg.imread('.\/test_images\/test1.jpg')\n\nimg_undist = cv2.undistort(img_orig, mtx, dist, None, mtx)\n\n# Visualize undistortion\nf, (ax1, ax2) = plt.subplots(1, 2, figsize=(20,10))\nf.tight_layout()\nax1.set_title('Original Image', fontsize=50)\nax1.imshow(img_orig)\nax2.set_title('Undistorted image', fontsize=50)\nax2.imshow(img_undist)\nplt.subplots_adjust(left=0., right=1, top=0.9, bottom=0.)","f8906d34":"img_thresh = img_thresh = thresh_pipeline(img_undist, \n                                          gradx_thresh=(25,255), \n                                          grady_thresh=(10,255), \n                                          s_thresh=(100, 255), \n                                          v_thresh=(0, 255))\nplt.imshow(img_thresh, cmap='gray'); plt.title('Threshold Output'); plt.show()","03d42b2a":"img_birdeye_color = warper(img_undist, src, dst)\n\ncv2.polylines(img_undist, np.int32([src]), \n              True, (0, 255, 0), thickness=4)\ncv2.polylines(img_birdeye_color, np.int32([dst]), \n              True, (0, 255, 0), thickness=4)\n\n# Visualize undistortion\nf, (ax1, ax2) = plt.subplots(1, 2, figsize=(20,10))\nf.tight_layout()\nax1.set_title('Undistorted Image with Source Points Drawn', fontsize=25)\nax1.imshow(img_undist)\nax2.set_title('Warped Result with Dest. Points Drawn', fontsize=25)\nax2.imshow(img_birdeye_color)\nplt.subplots_adjust(left=0., right=1, top=0.9, bottom=0.)","35462bad":"img_birdeye = warper(img_thresh, src, dst)\nleft_fit, right_fit, img_search = sliding_windows_search(img_birdeye)\n\nploty = np.linspace(0, img_birdeye.shape[0]-1, img_birdeye.shape[0] )\nleft_fitx = left_fit[0]*ploty**2 + left_fit[1]*ploty + left_fit[2]\nright_fitx = right_fit[0]*ploty**2 + right_fit[1]*ploty + right_fit[2]\n\nleft_pts = np.transpose(np.vstack((left_fitx, ploty))).astype(np.int32)    \nright_pts = np.transpose(np.vstack((right_fitx, ploty))).astype(np.int32)\n\ncv2.polylines(img_search, np.int32([left_pts]), False, (255, 255, 0), thickness=5)\ncv2.polylines(img_search, np.int32([right_pts]), False, (255, 255, 0), thickness=5)\n  \nplt.imshow(img_search)\nplt.title('Identified Lane-line Px. and Fitted Poly.')\nplt.show()","a6c45ac2":"line_l = Line()\nline_r = Line()\n\n# Make a list of test images\ntest_files = '.\/test_images\/test*.jpg'\nimages = glob.glob(test_files)\n\n# Step through the list and search for chessboard corners\nfor fname in images:\n    \n    line_l.detected = False\n    line_r.detected = False\n    \n    img_orig = cv2.imread(fname)\n    img_orig = cv2.cvtColor(img_orig, cv2.COLOR_BGR2RGB)\n#     img_orig = mpimg.imread('test_images\/straight_lines.jpg') # 'straight_lines2.jpg'\n    img_output = lane_finding(img_orig)\n    plt.figure(figsize=(12,9))\n    plt.imshow(img_output); plt.axis('off'); plt.show()","b5c248fa":"!pip install moviepy","cfad1f63":"# Import everything needed to edit\/save\/watch video clips\nfrom moviepy.editor import VideoFileClip\nfrom IPython.display import HTML","a0e37377":"line_l = Line()\nline_r = Line()\n\nvideo1_output = 'project_video_output_try17.mp4'\nclip1 = VideoFileClip(\"project_video.mp4\")\nvideo1_clip = clip1.fl_image(lane_finding) #NOTE: this function expects color images!!\n%time video1_clip.write_videofile(video1_output, audio=False)","d4b0973d":"HTML(\"\"\"\n<video width=\"960\" height=\"540\" controls>\n  <source src=\"{0}\">\n<\/video>\n\"\"\".format(video1_output))","77ab22a3":"line_l = Line()\nline_r = Line()\nvideo2_output = 'challenge_video_output_try3.mp4'\nclip2 = VideoFileClip(\"challenge_video.mp4\")\nvideo2_clip = clip2.fl_image(lane_finding) #NOTE: this function expects color images!!\n%time video2_clip.write_videofile(video2_output, audio=False)","c1c11ae2":"HTML(\"\"\"\n<video width=\"960\" height=\"540\" controls>\n  <source src=\"{0}\">\n<\/video>\n\"\"\".format(video2_output))","ec00724b":"line_l = Line()\nline_r = Line()\nvideo3_output = 'harder_challenge_video_output_try3.mp4'\nclip3 = VideoFileClip(\"harder_challenge_video.mp4\")\nvideo3_clip = clip3.fl_image(lane_finding) #NOTE: this function expects color images!!\n%time video3_clip.write_videofile(video3_output, audio=False)","74ab47a8":"HTML(\"\"\"\n<video width=\"960\" height=\"540\" controls>\n  <source src=\"{0}\">\n<\/video>\n\"\"\".format(video3_output))","b9ae44d5":"## Def functions","85d6c85f":"## Build a lane finding pipeline","794e1142":"#### Note:\n> Automatically determining if your detected lines are the real thing Ok, so your algorithm found some lines, but before moving on, you should check that the detection makes sense. To confirm that your detected lane lines are real, you might consider:\n\n> * Checking that they have similar curvature\n> * Checking that they are separated by approximately the right distance horizontally\n> * Checking that they are roughly parallel","b3af79ef":"## 1. Camera Calibration","fb8e046b":"## 5. Video Output:","331e94f8":"## 2. Define the Perspective Transformation","237b6102":"# Advanced Lane Finding","2d9e0f1d":"## 4. Test this Pipeline on the testing images","4991554b":"## 3. Test this Pipeline on single image","3b037518":"## Harder Challenge","27a03032":"## Define a Line class"}}