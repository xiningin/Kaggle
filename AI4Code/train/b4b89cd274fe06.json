{"cell_type":{"98383811":"code","c81e0640":"code","a350684a":"code","c8571a97":"code","779e0e72":"code","c9fd0f9a":"code","558fce6f":"code","1716821d":"code","0ce439a5":"code","d5a10757":"code","c0870947":"code","c7127e4d":"code","2076645e":"code","d6690865":"code","c2c6d29c":"code","44a8731c":"code","ea88aa8b":"code","0a8e5560":"code","43fd5d23":"markdown"},"source":{"98383811":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport pydicom as dicom\nimport cv2\nimport ast\nfrom glob import glob\nimport warnings\nfrom collections import Counter\nimport seaborn as sns\nfrom scipy import ndimage, misc\nimport pydicom\nwarnings.filterwarnings('ignore')","c81e0640":"path = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/'\ntrain_path = os.path.join(path, 'train')\ntest_path = os.path.join(path, 'test')\n\n\ndef getFullId(id):\n    return str(id).zfill(5)\n\nos.listdir(path)","a350684a":"train_df = pd.read_csv(path + 'train_labels.csv')\ntrain_df.describe()","c8571a97":"train_df['MGMT_value'].plot.hist()","779e0e72":"train_df.head()","c9fd0f9a":"def resize_volume(img):\n    \n    desired_depth = 32\n    desired_width = 128\n    desired_height = 128\n\n    current_depth = img.shape[0]\n    current_width = img.shape[1]\n    current_height = img.shape[2]\n \n    depth = current_depth \/ desired_depth\n    width = current_width \/ desired_width\n    height = current_height \/ desired_height\n    \n    depth_factor = 1 \/ depth\n    width_factor = 1 \/ width\n    height_factor = 1 \/ height\n    \n    img = ndimage.zoom(img, (depth_factor, width_factor, height_factor), order=1)\n    return img\n","558fce6f":"!mkdir Train_Image_array Test_Image_array ","1716821d":"import cv2\n\ndef load_dicom(path):\n    dicom = pydicom.read_file(path)\n    data = dicom.pixel_array\n#     print(data.shape)\n    if np.min(data)==np.max(data):\n        data = np.zeros((128,128))\n        return data\n    data = data - np.min(data)\n    if np.max(data) != 0:\n        data = data \/ np.max(data)\n    \n    data = (data * 255).astype(np.uint8)\n    data = cv2.resize(data, (128, 128))\n    \n    return data\n\ndef load_dicom_line(path):\n    t_paths = sorted(\n        glob(os.path.join(path, \"*\")), \n        key=lambda x: int(x[:-4].split(\"-\")[-1]),\n    )\n    images = []\n    for filename in t_paths:\n        data = load_dicom(filename)\n#         print(data.shape)\n        if data.max() == 0:\n            data = np.zeros((128,128))\n        images.append(data)\n#         print(len(images))\n    images = np.array(images)\n#     print(images.shape)\n        \n    return images","0ce439a5":"%%time\nid =0\ndef get_image(id):\n    \n    img = []\n    _id = getFullId(id)\n    for t in ( \"T1w\", \"T1wCE\", \"FLAIR\", \"T2w\"):\n        path = os.path.join(train_path, _id, t)\n        frames = np.array(load_dicom_line(path))\n#         print(frames.shape)\n        img.append(resize_volume(np.array(frames)))\n        np.save('.\/Train_Image_array\/'+str(_id)+'.npy', np.array(img).astype(np.uint8))\n    return np.array(img)\n\n# img = get_image(0)","d5a10757":"# get_image(train_df['BraTS21ID'][81]).shape","c0870947":"%%time\nfrom joblib import Parallel, delayed\nfrom tqdm import tqdm\n    \nresults = Parallel(n_jobs = 8, prefer=\"threads\")(delayed(get_image)(id) for id in tqdm(train_df['BraTS21ID']))","c7127e4d":"# def get_image(id):\n    \n#     img = []\n#     _id = getFullId(id)\n#     for t in ( \"T1w\", \"T1wCE\", \"FLAIR\", \"T2w\"):\n#         path = os.path.join(test_path, _id, t)\n#         frames = np.array(load_dicom_line(path))\n# #         print(np.array(frames).shape)\n#         img.append(resize_volume(np.array(frames)))\n#         np.save('Test_Image_array\/'+str(_id)+'.npy', np.array(img))\n#     return np.array(img)\n","2076645e":"# %%time\n# from joblib import Parallel, delayed\n# from tqdm import tqdm\n    \n# results = Parallel(n_jobs = 8, prefer=\"threads\")(delayed(get_image)(id) for id in tqdm(os.listdir(test_path)))","d6690865":"# from matplotlib import animation, rc\n# rc('animation', html='jshtml')\n\n\n# def create_animation(ims):\n#     fig = plt.figure(figsize=(6, 6))\n#     plt.axis('off')\n#     im = plt.imshow(ims[0])\n\n#     def animate_func(i):\n#         im.set_array(ims[i])\n#         return [im]\n\n#     return animation.FuncAnimation(fig, animate_func, frames = len(ims), interval = 1000\/\/24)\n\n# create_animation(img[0])","c2c6d29c":"# from sys import getsizeof\n# getsizeof(frames)","44a8731c":"# %%time\n# id =0\n# def get_image(id):\n    \n#     img = []\n#     _id = getFullId(id)\n#     for t in ( \"T1w\", \"T1wCE\", \"FLAIR\", \"T2w\"):\n#         path = os.path.join(train_path, _id, t)\n#         frames =[]\n#         file_names = sorted(os.listdir(path),\n#         key=lambda x: int(x[:-4].split(\"-\")[-1]),)\n#         l = len(file_names)\n#         if l < 32:\n#                 r = range(x)\n#         else:\n#             d = l \/\/ 32\n#             r = range(d, 32*d , d)\n#         for i in r:\n#             img_path = os.path.join(path, file_names[i])\n# #             print(img_path)\n#             img_2d_scaled = get3ScaledImage(img_path)\n# #             print(img_2d_scaled.shape)\n#             frames.append(img_2d_scaled)\n# #         print(np.array(frames).shape)\n# #         img.append(resize_volume(np.array(frames)))\n#         img.append(np.array(frames))\n# #         np.save('Image_3d_array\/'+str(_id)+'.npy', np.array(img))\n#     return np.array(img)\n\n# img = get_image(0)","ea88aa8b":"# def plot_slices(num_rows, num_columns, size, data):\n\n#     fig_width = 13\n#     fig_height = (fig_width \/ num_columns) \/ (size[1] \/ size[0]) * num_rows\n    \n#     fig, ax = plt.subplots(nrows=num_rows, ncols=num_columns, figsize=(fig_width, fig_height))\n#     for i in range(num_rows):\n#         for j in range(num_columns):\n#             ax[i, j].imshow(data[i*num_columns+j])\n#             ax[i, j].axis(\"off\")\n#     plt.subplots_adjust(wspace=0, hspace=0, left=0, right=1, bottom=0, top=1)\n#     plt.show()\n\n# id = 0\n\n# nb_flair = countFlairFiles(id)\n# path_flair = getFlairPath(id)\n# frames_flair = []\n\n# for i in range(nb_flair):\n#     file_name = 'Image-' + str(i+1) + '.dcm'\n#     img_path = os.path.join(path_flair, file_name)\n#     img_2d_scaled, size = get3ScaledImage(img_path)\n#     frames_flair.append(img_2d_scaled)\n    \n# plot_slices(3, 4, size, frames[90:103])","0a8e5560":"# def plot_slices(num_rows, num_columns, size, data):\n\n#     fig_width = 13\n#     fig_height = (fig_width \/ num_columns) \/ (size[1] \/ size[0]) * num_rows\n    \n#     fig, ax = plt.subplots(nrows=num_rows, ncols=num_columns, figsize=(fig_width, fig_height))\n#     for i in range(num_rows):\n#         for j in range(num_columns):\n#             ax[i, j].imshow(data[i*num_columns+j])\n#             ax[i, j].axis(\"off\")\n#     plt.subplots_adjust(wspace=0, hspace=0, left=0, right=1, bottom=0, top=1)\n#     plt.show()\n\n    \n# plot_slices(4, 4, size, resized[24:])","43fd5d23":"* ****RSNA-MICCAI Brain Tumor Radiogenomic Classification resized Dataset in .npy formate****"}}