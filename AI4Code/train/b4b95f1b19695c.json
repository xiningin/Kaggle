{"cell_type":{"b14b9b6a":"code","7c330cfa":"code","1662dbf6":"code","6e234bd0":"code","f24dbbab":"code","ed764f99":"code","6715abba":"code","5e9a5591":"code","99374485":"code","8304dcba":"code","c1f7da50":"code","b25b4b62":"code","15b3e944":"markdown","efe81426":"markdown","e74b9928":"markdown","c7fa72a5":"markdown","08f2fddc":"markdown","23ba239b":"markdown","73b9b474":"markdown","5031303e":"markdown","72baa0e1":"markdown","1e317f76":"markdown","6cfe8959":"markdown","4342781e":"markdown","367ad712":"markdown"},"source":{"b14b9b6a":"import numpy as np # importing numpy for numerical computation\nfrom sklearn.datasets import load_boston # here we are using sklearn's boston dataset\nfrom sklearn.metrics import mean_squared_error # importing mean_squared_error metric\n\nimport random\nfrom sklearn.tree import DecisionTreeRegressor\n\nboston = load_boston()\nx=boston.data #independent variables\ny=boston.target #target variable\n\nprint(\"x.shape \", x.shape)\nprint(\"y.shape \", y.shape)","7c330cfa":"x[:5]","1662dbf6":"def generating_samples(input_data, target_data): \n  \n  # random.choice to generate random indices without replacement\n  # selecting 303 random row indices from the input_data, without replacement\n  rows_selected = np.random.choice(len(input_data), 303, replace=False)\n  \n  # now we will replicate 203 points from above selected rows\n  # Replacing Rows => Extracting 206 reandom row indices from the abvoe rows_selected\n  rows_203_extracted_from_rows_selected = np.random.choice(rows_selected, 203, replace=False)\n  \n  # Now get 3 to 13 random column indices from input_data\n  number_of_columns_to_select = random.randint(3, 13)\n  columns_selected = np.array(random.sample(range(0, 13), number_of_columns_to_select ))\n  \n  sample_data = input_data[rows_selected[:, None], columns_selected]\n  \n  target_of_sample_data = target_data[rows_selected]\n  \n  # Now Replication of Data for 203 data points out of 303 selected points\n  \n  replicated_203_sample_data_points = input_data[rows_203_extracted_from_rows_selected[:, None], columns_selected ]\n  \n  target_203_replicated_sample_data = target_data[rows_203_extracted_from_rows_selected]\n  \n  # Concatenating data\n  \n  final_sample_data = np.vstack((sample_data, replicated_203_sample_data_points ))\n  \n  final_target_data = np.vstack((target_of_sample_data.reshape(-1, 1), target_203_replicated_sample_data.reshape(-1, 1) ))\n  \n  return final_sample_data, final_target_data, rows_selected, columns_selected\n  ","6e234bd0":"def grader_samples(a,b,c,d):\n    length = (len(a)==506  and len(b)==506)\n    sampled = (len(a)-len(set([str(i) for i in a]))==203)\n    rows_length = (len(c)==303)\n    column_length= (len(d)>=3)\n    assert(length and sampled and rows_length and column_length)\n    return True\n  \na,b,c,d = generating_samples(x, y)\nprint(a.shape)\nprint(b.shape)\nprint(c.shape)\nprint(d.shape)\ngrader_samples(a,b,c,d)","f24dbbab":"# Use generating_samples function to create 30 samples \n# store these created samples in a list\nlist_input_data =[]\nlist_output_data =[]\nlist_selected_row= []\nlist_selected_columns=[]\n\nfor i in range (0, 30):\n  a, b, c, d = generating_samples(x, y)\n  list_input_data.append(a)\n  list_output_data.append(b)\n  list_selected_row.append(c)\n  list_selected_columns.append(d)","ed764f99":"def grader_30(a):\n    assert(len(a)==30 and len(a[0])==506)\n    return True\ngrader_30(list_input_data)","6715abba":"list_of_all_models_decision_tree = []\nfor i in range(0, 30):\n  model_i = DecisionTreeRegressor(max_depth=None)\n  model_i.fit(list_input_data[i], list_output_data[i])\n  list_of_all_models_decision_tree.append(model_i)","5e9a5591":"from sklearn.metrics import mean_squared_error\nfrom statistics import median\n\narray_of_Y = []\n\nfor i in range(0, 30):\n  data_point_i = x[:, list_selected_columns[i]]\n  target_y_i = list_of_all_models_decision_tree[i].predict(data_point_i)\n  array_of_Y.append(target_y_i)\n  \n  \npredicted_array_of_target_y = np.array(array_of_Y)\npredicted_array_of_target_y = predicted_array_of_target_y.transpose()\n\n# print(predicted_array_of_target_y.shape)\n\n# Now to calculate MSE, first calculate the Median of Predicted Y\n# passing axis=1 will make sure the medians are computed along axis=1\nmedian_predicted_y = np.median(predicted_array_of_target_y, axis=1)\nmedian_predicted_y.shape\n\nprint(\"MSE : \", mean_squared_error(y, median_predicted_y ))","99374485":"# First noting that our earlier definded variable list_selected_row and list_selected_columns \n# which has the list of selected rows and columns\n# e.g. list_selected_row is a 2D array of the form [[], [], []...] each inner-array represnting selected row numbers\n# for a specific sample. and len(list_selected_row) is 30 reprsenting the 30 samples we have selected for bootstrapping\n# print(\"list_selected_row[10] \", list_selected_row[10])\n# print(list_selected_columns)\n\ny_predicted_oob_median_list = []\n\nfor i in range(0, 506):\n  indices_for_oob_models = []\n  \n  # For each of i-th row I shall build a list, of sample size 30\n  # ONLY condition being that this i-th row should not be part of the list_selected_row[i-th]\n  # e.g. say for i = 469 and index_oob in below loop is 10 then \n  # list_selected_row[10] (which is an array of row-numbers) should not contain the 469-th row\n  for index_oob in range(0, 30):\n    if i not in list_selected_row[index_oob]:\n      indices_for_oob_models.append(index_oob)\n      \n  y_predicted_oob_list = []\n  \n  for oob_model_index in indices_for_oob_models:\n    model_oob = list_of_all_models_decision_tree[oob_model_index]\n    \n    row_oob = x[i]\n    # print('oob_model_index ', oob_model_index)\n    \n    # Now extract ONLY those specific columns\/featues that were selected during the bootstrapping\n    x_oob_data_point = [row_oob[columns] for columns in list_selected_columns[oob_model_index] ]\n    # print('np.array(x_oob_data_point) ', np.array(x_oob_data_point))\n    x_oob_data_point = np.array(x_oob_data_point).reshape(1, -1)\n    \n    y_predicted_oob_data_point = model_oob.predict(x_oob_data_point)\n    y_predicted_oob_list.append(y_predicted_oob_data_point)\n    # \n  y_predicted_oob_list = np.array(y_predicted_oob_list)\n  \n  y_predicted_median = np.median(y_predicted_oob_list)\n  y_predicted_oob_median_list.append(y_predicted_median)\n  \n\ndef calculate_oob_score(num_rows):\n  oob_score = 0\n  for i in range(0, num_rows):\n    oob_score += ((y[i] - y_predicted_oob_median_list[i] ) ** 2)\n  final_oob_score = oob_score\/506\n  return final_oob_score\n\nprint(\"final_oob_score is \", calculate_oob_score(506))   \n  ","8304dcba":"# Function to build the entire bootstrapping steps that we did above and\n# Reurning from the function the MSE and oob score\ndef bootstrapping_and_oob(x, y):\n\n  # Use generating_samples function to create 30 samples \n  # store these created samples in a list\n  list_input_data =[]\n  list_output_data =[]\n  list_selected_row= []\n  list_selected_columns=[]\n  \n  for i in range (0, 30):\n    a, b, c, d = generating_samples(x, y)\n    list_input_data.append(a)\n    list_output_data.append(b)\n    list_selected_row.append(c)\n    list_selected_columns.append(d)\n  \n  # building regression trees\n  list_of_all_models_decision_tree = []\n  for i in range(0, 30):\n    model_i = DecisionTreeRegressor(max_depth=None)\n    model_i.fit(list_input_data[i], list_output_data[i])\n    list_of_all_models_decision_tree.append(model_i)\n  \n  # calculating MSE\n  array_of_Y = []\n\n  for i in range(0, 30):\n    data_point_i = x[:, list_selected_columns[i]]\n    target_y_i = list_of_all_models_decision_tree[i].predict(data_point_i)\n    array_of_Y.append(target_y_i)\n    \n    \n  predicted_array_of_target_y = np.array(array_of_Y)\n  predicted_array_of_target_y = predicted_array_of_target_y.transpose()\n\n  # print(predicted_array_of_target_y.shape)\n\n  # Now to calculate MSE, first calculate the Median of Predicted Y\n  # passing axis=1 will make sure the medians are computed along axis=1\n  median_predicted_y = np.median(predicted_array_of_target_y, axis=1)\n  \n  # And now the final MSE\n  MSE = mean_squared_error(y, median_predicted_y )\n  \n  # Calculating OOB Score\n  y_predicted_oob_median_list = []\n\n  for i in range(0, 506):\n    indices_for_oob_models = []\n    \n    # For each of i-th row I shall build a list of sample size 30\n    # ONLY condition being that this ith row should not be part of\n    # the list_selected_row\n    for index_oob in range(0, 30):\n      if i not in list_selected_row[index_oob]:\n        indices_for_oob_models.append(index_oob)\n        \n    y_predicted_oob_list = []\n    \n    for oob_model_index in indices_for_oob_models:\n      model_oob = list_of_all_models_decision_tree[oob_model_index]\n      \n      row_oob = x[i]\n      # print('oob_model_index ', oob_model_index)\n      \n      x_oob_data_point = [row_oob[col] for col in list_selected_columns[oob_model_index] ]\n      # print('np.array(x_oob_data_point) ', np.array(x_oob_data_point))\n      x_oob_data_point = np.array(x_oob_data_point).reshape(1, -1)\n      \n      y_predicted_oob_data_point = model_oob.predict(x_oob_data_point)\n      y_predicted_oob_list.append(y_predicted_oob_data_point)\n      # \n    y_predicted_oob_list = np.array(y_predicted_oob_list)\n    \n    y_predicted_median = np.median(y_predicted_oob_list)\n    y_predicted_oob_median_list.append(y_predicted_median)\n    \n\n  oob_score = 0\n\n  for i in range(0, 506):\n    # oob_score = (oob_score + (y[i] - y_predicted_oob_median_list[i] ) ** 2)\n    # 13.828377285079045\n    oob_score += (y[i] - y_predicted_oob_median_list[i] ) ** 2\n\n  final_oob_score = oob_score\/506\n  \n  return MSE, final_oob_score\n\nprint(bootstrapping_and_oob(x, y))\n  ","c1f7da50":"import scipy\n\nx=boston.data #independent variables\ny=boston.target #target variable\n\nmse_boston_35_times_arr = []\noob_score_boston_35_times_arr = []\n\n# Repeat Task 1 for 35 times, and for each iteration store the Train MSE and OOB score\nfor i in range(0, 35):\n  mse, oob_score = bootstrapping_and_oob(x, y)\n  mse_boston_35_times_arr.append(mse)\n  oob_score_boston_35_times_arr.append(oob_score)\n\n\nmse_boston_35_times_arr = np.array(mse_boston_35_times_arr)\noob_score_boston_35_times_arr = np.array(oob_score_boston_35_times_arr)\n\nconfidence_level = 0.95\ndegrees_of_freedom = 34 # sample.size - 1\n\nmean_of_sample_mse_35 = np.mean(mse_boston_35_times_arr)\nstandard_error_of_sample_mse_35 = scipy.stats.sem(mse_boston_35_times_arr)\n\n\n# Per document - https:\/\/www.kite.com\/python\/answers\/how-to-compute-the-confidence-interval-of-a-sample-statistic-in-python\n# confidence_interval = scipy.stats.t.interval(confidence_level, degrees_freedom, sample_mean, sample_standard_error)\nconfidence_interval_mse_35 = scipy.stats.t.interval(confidence_level, degrees_of_freedom, mean_of_sample_mse_35, standard_error_of_sample_mse_35 )\nprint(\"confidence_interval_mse_35 \", confidence_interval_mse_35)\n\n# Now calculate confidence inter for oob score\nmean_of_sample_oob_score_35 = np.mean(oob_score_boston_35_times_arr)\nstandard_error_of_sample_oob_score_35 = scipy.stats.sem(oob_score_boston_35_times_arr)\n\nconfidence_interval_oob_score_35 = scipy.stats.t.interval(confidence_level, degrees_of_freedom, mean_of_sample_oob_score_35, standard_error_of_sample_oob_score_35 )\nprint(\"confidence_interval_oob_score_35 \", confidence_interval_oob_score_35)\n","b25b4b62":"def predict_y_given_x_bootstrap(x_query):\n  y_predicted_array_30_sample = []\n  \n  for i in range(0, 30):\n    model_i = list_of_all_models_decision_tree[i]\n    # Extract x for ith data point with specific number of featues from list_selected_columns\n    x_data_point_i = [x_query[column] for column in list_selected_columns[i]]\n    x_data_point_i = np.array(x_data_point_i).reshape(1, -1)\n    y_predicted_i = model_i.predict(x_data_point_i)\n    y_predicted_array_30_sample.append(y_predicted_i)\n    \n  y_predicted_array_30_sample = np.array(y_predicted_array_30_sample)\n  y_predicted_median = np.median(y_predicted_array_30_sample)\n  return y_predicted_median\n\n\nxq= [0.18,20.0,5.00,0.0,0.421,5.60,72.2,7.95,7.0,30.0,19.1,372.13,18.60] \ny_predicted_for_xq = predict_y_given_x_bootstrap(xq)\ny_predicted_for_xq    ","15b3e944":"<font color='Orange'><b>Algorithm<\/b><\/font>\n\n![alt text](https:\/\/i.imgur.com\/BTVYXQ1.jpg\/)","efe81426":"### Further notes on above OOB calculation\n\nThe key point is that the OOB sample rows were passed through every Decition Treee that did not contain those specific OOB sample rows during the bootstrapping of training data.\n\nOOB error is simply the error on samples that were not seen during training. \n\nOOB Scoring is very useful when I dont have a large dataset and thereby if I split that dataset into training and validation set - will result in loss of useful data that otherwise could have been used for training the models. Hence in this case, we decide to extract some of the training data as the validation set by using only those data-points that were not used for training a particular sample-set.\n\n---\n\n# Task 2\n\n* Computing CI of OOB Score and Train MSE\n* Repeat Task 1 for 35 times, and for each iteration store the Train MSE and OOB score\n* After this we will have 35 Train MSE values and 35 OOB scores\n* using these 35 values (assume like a sample) find the confidence intravels of MSE and OOB Score\n* we need to report CI of MSE and CI of OOB Score\n* Note: Refer the Central_Limit_theorem.ipynb to check how to find the confidence intravel\n","e74b9928":"## Flowchart for calculating MSE\n\n![alt text](https:\/\/i.imgur.com\/sPEE618.png)","c7fa72a5":"### Generating samples","08f2fddc":"## Observation \/ Interpretation of above Confidence Interval\n\nBy definition we know the interpretation of a 95% confidence interval for the population mean as  -  If repeated random samples were taken and the 95% confidence interval was computed for each sample, 95% of the intervals would contain the population mean.\n\nSo in this case\n\n- MSE - There is a 95% chance that the confidence interval of (0.05732086175441538, 0.11667646077442519) contains the true population mean of MSE.\n- OOB Score - There is a 95% chance that the confidence interval of (13.274222499705303, 14.427942855729313) contains the true population mean of OOB Score.\n\n# Task 3 (send query point \"xq\" to 30 models)\n\n## We created 30 models by using 30 samples in TASK-1. Here, we need send query point \"xq\" to 30 models and perform the regression on the output generated by 30 models\n\n## Flowchart for Task 3\n\n![alt text](https:\/\/i.imgur.com\/Y5cNhQk.png)","23ba239b":"# Step - 3 of Task-1\n\n### Calculating the OOB score\n\n*  Predicted house price of $i^{th}$ data point $y^{i}_{pred} =  \\frac{1}{k}\\sum_{\\text{k= model which was buit on samples not included } x^{i}}(\\text{predicted value of } x^{i} \\text{ with } k^{th} \\text{ model})$.\n*  Now calculate the $OOB Score =  \\frac{1}{506}\\sum_{i=1}^{506}(y^{i} - y^{i}_{pred})^{2}$.\n\n\n### Given a single query point predict the price of house\n\nConsider xq= [0.18,20.0,5.00,0.0,0.421,5.60,72.2,7.95,7.0,30.0,19.1,372.13,18.60] \nPredict the house price for this point as mentioned in the step 2 of Task 1.\n\n## Flowchart for calculating OOB score\n\n![alt text](https:\/\/i.imgur.com\/95S5Mtm.png)\n\n## Now calculate the $OOB Score =  \\frac{1}{506}\\sum_{i=1}^{506}(y^{i} - y^{i}_{pred})^{2}$.","73b9b474":"<font color='cyan'> <b>Grader function - 2 <\/b><\/font>","5031303e":"\n# First a note on Ensemble Learning\n\nThe general principle of ensemble methods is to construct a linear combination of some model \ufb01tting method, instead of using a single \ufb01t of the method. The main principle behind the ensemble model is that a group of weak learners come together to form a strong learner, thus increasing the accuracy of the model.When we try to predict the target variable using any machine learning technique, the main causes of difference in actual and predicted values are noise, variance, and bias. Ensemble helps to reduce these factors (except noise, which is irreducible error). The noise-related error is mainly due to noise in the training data and can't be removed. However, the errors due to bias and variance can be reduced.\nThe total error can be expressed as follows: \n\n### Total Error = Bias + Variance + Irreducible Error \n\n![Imgur](https:\/\/imgur.com\/q4Egoes.png)\n\n# Why we do Bootstrap re-sampling\n\nBootstrapping resamples the original dataset with replacement many thousands of times to create simulated datasets. This process involves drawing random samples from the original dataset. Through bootstrapping you are simply taking samples over and over again from the same group of data (your sample data) to estimate how accurate your estimates about the entire population (what really is out there in the real world) is.\n\nIf you were to take one sample and make estimates on the real population, you might not be able to estimate how accurate your estimates are - we only have one estimate and have not identified how this estimate varies with different samples that we might have encountered.\n\n### Bootstrap Aggregation (or Bagging for short), is a simple and very powerful ensemble method.\n\nAn ensemble method is a technique that combines the predictions from multiple machine learning algorithms together to make more accurate predictions than any individual model.\n\nBootstrap Aggregation is a general procedure that can be used to reduce the variance for those algorithm that have high variance. An algorithm that has high variance are decision trees, like classification and regression trees (CART).\n\nDecision trees are sensitive to the specific data on which they are trained. If the training data is changed (e.g. a tree is trained on a subset of the training data) the resulting decision tree can be quite different and in turn the predictions can be quite different.\n\nBagging is the application of the Bootstrap procedure to a high-variance machine learning algorithm, typically decision trees.\n\nAnother major drawback associated with the tree classifiers is that they are unstable. That is, a small\nchange in the training data set can result in a very different tree. The reason for this lies in the\nhierarchical nature of the tree classifiers. An error that occurs in a node at a high level of the tree\npropagates all the way down to the leaves below it.\n\n\nAnd so Bagging (bootstrap aggregating) can reduce the variance and improve the\ngeneralization error performance. The basic idea is to create B variants, $X_1$, $X_2 , . . . , X_B$ , of the\ntraining set X, using bootstrap techniques, by uniformly sampling from X with replacement. For\neach of the training set variants Xi , a tree Ti is constructed. The final decision for the classification\nof a given point is in favor of the class predicted by the majority of the subclassifiers $T_i , wher i = 1, 2, . . . , B$.\n\n# Finally Principle of Random Forest with Bootstrapping\n\nThe below text is taken from [this](https:\/\/ieeexplore.ieee.org\/stamp\/stamp.jsp?tp=&arnumber=8950481) source\n\nFirstly, using Bootstrap resampling technique, multiple samples are randomly selected from the original training sample set x to generate a new training sample set. Then, multiple decision trees are constructed to form random forest. Finally, the random forest averages the output of each decision tree to determine the final filling result y. Due to the Bootstrap used in the random decision tree generation process, all samples are not used in a decision tree and the unused samples are called out of band (OOB). Through out of band, the accuracy of the tree can be evaluated. The other trees are evaluated according to the principle and finally average the results\n\n![Imgur](https:\/\/imgur.com\/qj2c3ur.png)\n\n---\n\n### Now our Code Implementations\n\n### There will be some functions that start with the word \"grader\" ex: grader_sampples(), grader_30().. etc, we should not change those function definition. Every Grader function has to return True.","72baa0e1":"### Creating 30 samples\n\n![alt text](https:\/\/i.imgur.com\/p8eZaWL.jpg)","1e317f76":"<font color='cyan'> <b> Grader function - 1 <\/b> <\/fongt>","6cfe8959":"# Step - 2 of Task-1\n\n\n## Building High Variance Models on each of the sample and finding train MSE value\n\n\n*  Build a regression trees on each of 30 samples.\n*  Computed the predicted values of each data point(506 data points) in our corpus.\n*  Predicted house price of $i^{th}$ data point $y^{i}_{pred} =  \\frac{1}{30}\\sum_{k=1}^{30}(\\text{predicted value of } x^{i} \\text{ with } k^{th} \\text{ model})$\n*  Now calculate the $MSE =  \\frac{1}{506}\\sum_{i=1}^{506}(y^{i} - y^{i}_{pred})^{2}$\n\n## Flowchart for Building regression trees\n\n![alt text](https:\/\/i.imgur.com\/pcXfSmp.png)","4342781e":"After getting predicted_y for each data point, we can use sklearns mean_squared_error to calculate the MSE between predicted_y and actual_y.\n\n# Calculating MSE","367ad712":"## Task 1\n\n*  <font color='blue'><b>Creating samples<\/b><\/font><br>\n    <b> Randomly create 30 samples from the whole boston data points<\/b>\n    *  Creating each sample: Consider any random 303(60% of 506) data points from whole data set and then replicate any 203 points from the sampled points\n    \n     For better understanding of this procedure lets check this examples, assume we have 10 data points [1,2,3,4,5,6,7,8,9,10], first we take 6 data points randomly , consider we have selected [4, 5, 7, 8, 9, 3] now we will replicate 4 points from [4, 5, 7, 8, 9, 3], consder they are [5, 8, 3,7] so our final sample will be [4, 5, 7, 8, 9, 3, 5, 8, 3,7]\n* <font color='blue'><b> Create 30 samples <\/b><\/font>\n    *  Note that as a part of the Bagging when we are taking the random samples <b>make sure each of the sample will have different set of columns<\/b><br>\nEx: Assume we have 10 columns[1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10] for the first sample we will select [3, 4, 5, 9, 1, 2] and for the second sample  [7, 9, 1, 4, 5, 6, 2] and so on...\nMake sure each sample will have atleast 3 feautres\/columns\/attributes\n\n### Step - 1 - Creating samples"}}