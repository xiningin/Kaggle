{"cell_type":{"ab5714be":"code","6bcd1224":"code","aa6877e0":"code","85f59181":"code","72274b2b":"code","3c2a48df":"code","99324421":"code","a8a5a9b0":"code","bc09102f":"code","47942f8c":"code","68a8c1d4":"code","cc2834f4":"code","412896f9":"code","71570667":"code","96827f44":"code","d9d4f062":"markdown"},"source":{"ab5714be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6bcd1224":"covid_data = pd.read_csv('..\/input\/symptoms-and-covid-presence\/Covid Dataset.csv')","aa6877e0":"print(np.shape(covid_data))\ncovid_data.head()","85f59181":"covid_data.describe().T","72274b2b":"#Preprocessing the data\nfrom sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ncovid_data = covid_data.apply(LabelEncoder().fit_transform)","3c2a48df":"covid_data.head()","99324421":"# Extract X and Y from the dataset\nX_total = covid_data.iloc[:, 0:20].values\ny_total = covid_data.iloc[:,20].values","a8a5a9b0":"#SPLIT THE DATA INTO TRAIN AND TEST DATA\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_total, y_total, test_size = 0.3, random_state = 0)","bc09102f":"#LOGISTIC REGRESSION\n\nfrom sklearn.linear_model import LogisticRegression\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score\n\n\n# fit data to LR model\nlr = LogisticRegression()\nlr.fit(X_train, y_train)\n\n\n# Importance of X-features\nimportance = lr.coef_[0]\nplt.figure(figsize=(20,10))\n\n\n#PLOT THE IMPORTANCE GRAPH\nplt.title('LOGISTIC REGRESSION FEATURE IMPORTANCE', color ='blue')\nplt.xlabel('FEATURES', color ='blue')\nplt.ylabel('LR - IMPORTANCE', color ='blue')\nsns.barplot([i for i in range(len(importance))], importance)\nplt.show()\n\n\n#PREDICT ON THE X-TEST VALUES\ny_pred = lr.predict(X_test)\n\n\n#CHECK THE ACCURACY OF THE NB MODEL\nprint('Misclassified samples: %d' % (y_test != y_pred).sum())\nprint('Accuracy: %.2f' % accuracy_score(y_test, y_pred))","47942f8c":"#DECISION TREE CLASSIFIER(DT)\nfrom sklearn.tree import DecisionTreeClassifier\n\n#TRAIN THE DATA WITH DT MODEL\ndtree = DecisionTreeClassifier(max_depth=4, random_state=42)\ndtree.fit(X_train, y_train)\n\n\n# Importance of X-features\nimportance = dtree.feature_importances_\nplt.figure(figsize=(20,10))\n\n\n#PLOT THE IMPORTANCE GRAPH \nplt.title('DECISION TREE CLASSIFIER FEATURE IMPORTANCE', color ='blue')\nplt.xlabel('FEATURES', color ='blue')\nplt.ylabel('DT - IMPORTANCE', color ='blue')\nsns.barplot([i for i in range(len(importance))], importance)\nplt.show()\n\n\n#PREDICT ON THE X-TEST VALUES\ny_pred = dtree.predict(X_test)\n\n\n#CHECK THE ACCURACY OF THE DT MODEL\nprint('Misclassified samples: %d' % (y_test != y_pred).sum())\nprint('Accuracy: %.2f' % accuracy_score(y_test, y_pred))","68a8c1d4":"#KNeighbors Classifier(KNN)\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\n# to calculate importance \nfrom sklearn.inspection import permutation_importance\n\n\n#TRAIN THE DATA WITH DT MODEL\nknn = KNeighborsClassifier(n_neighbors=3, p=2, metric='minkowski')\nknn.fit(X_train, y_train)\n\n\n# Importance of X-features\nresults = permutation_importance(knn, X_train, y_train, scoring='neg_mean_squared_error')\nimportance = results.importances_mean\nplt.figure(figsize=(20,10))\n\n\n#PLOT THE IMPORTANCE GRAPH\nplt.title('KNeighbors Classifier FEATURE IMPORTANCE', color ='blue')\nplt.xlabel('FEATURES', color ='blue')\nplt.ylabel('KNN - IMPORTANCE', color ='blue')\nsns.barplot([i for i in range(len(importance))], importance)\nplt.show()\n\n\n#PREDICT ON THE X-TEST VALUES\ny_pred = knn.predict(X_test)\n\n\n#CHECK THE ACCURACY OF THE DT MODEL\nprint('Misclassified samples: %d' % (y_test != y_pred).sum())\nprint('Accuracy: %.2f' % accuracy_score(y_test, y_pred))","cc2834f4":"#Gradient Boosting Classifier (GB)\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n#TRAIN THE DATA WITH GB MODEL\ngb = model = GradientBoostingClassifier()\ngb.fit(X_train, y_train)\n\n\n# Importance of X-features\nimportance = gb.feature_importances_\nplt.figure(figsize=(20,10))\n\n\n#PLOT THE IMPORTANCE GRAPH\nplt.title('Gradient Boosting Classifier FEATURE IMPORTANCE', color ='blue')\nplt.xlabel('FEATURES', color ='blue')\nplt.ylabel('GB - IMPORTANCE', color ='blue')\nsns.barplot([i for i in range(len(importance))], importance)\nplt.show()\n\n\n#PREDICT ON THE X-TEST VALUES\ny_pred = gb.predict(X_test)\n\n\n#CHECK THE ACCURACY OF THE DT MODEL\nprint('Misclassified samples: %d' % (y_test != y_pred).sum())\nprint('Accuracy: %.2f' % accuracy_score(y_test, y_pred))","412896f9":"#Gaussian Naive Bais(NB)\nfrom sklearn.naive_bayes import GaussianNB\n\n\n#TRAIN THE DATA WITH NB MODEL\nnb = GaussianNB()\nnb.fit(X_train, y_train)\n\n\n# Importance of X-features\nresults = permutation_importance(nb, X_train, y_train, scoring='neg_mean_squared_error')\nimportance = results.importances_mean\nplt.figure(figsize=(20,10))\n\n\n#PLOT THE IMPORTANCE GRAPH\nplt.title('Gaussian Naive Bais FEATURE IMPORTANCE', color ='blue')\nplt.xlabel('FEATURES', color ='blue')\nplt.ylabel('NB - IMPORTANCE', color ='blue')\nsns.barplot([i for i in range(len(importance))], importance)\nplt.show()\n\n\n#PREDICT ON THE X-TEST VALUES\ny_pred = nb.predict(X_test)\n\n\n#CHECK THE ACCURACY OF THE NB MODEL\nprint('Misclassified samples: %d' % (y_test != y_pred).sum())\nprint('Accuracy: %.2f' % accuracy_score(y_test, y_pred))","71570667":"#Support Vector Machines(SVM)\nfrom sklearn import svm\n\n\n#TRAIN THE DATA WITH SVM MODEL\nsvc = svm.SVC()\nsvc.fit(X_train, y_train)\n\n\n# Importance of X-features\nresults = permutation_importance(svc, X_train, y_train, scoring='neg_mean_squared_error')\nimportance = results.importances_mean\nplt.figure(figsize=(20,10))\n\n\n#PLOT THE IMPORTANCE GRAPH\nplt.title('Support Vector Machines FEATURE IMPORTANCE', color ='blue')\nplt.xlabel('FEATURES', color ='blue')\nplt.ylabel('SVM - IMPORTANCE', color ='blue')\nsns.barplot([i for i in range(len(importance))], importance)\nplt.show()\n\n\n#PREDICT ON THE X-TEST VALUES\ny_pred = svc.predict(X_test)\n\n\n#CHECK THE ACCURACY OF THE SVM MODEL\nprint('Misclassified samples: %d' % (y_test != y_pred).sum())\nprint('Accuracy: %.2f' % accuracy_score(y_test, y_pred))","96827f44":"#Random Forrest Classifier(RF)\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n#TRAIN THE DATA WITH RF MODEL\nrf = RandomForestClassifier(n_estimators=10, random_state =0)\nrf.fit(X_train, y_train)\n\n\n# Importance of X-features\nimportance = rf.feature_importances_\nplt.figure(figsize=(20,10))\n\n\n\n#PLOT THE IMPORTANCE GRAPH\nplt.title('Random Forrest Classifier FEATURE IMPORTANCE', color ='blue')\nplt.xlabel('FEATURES', color ='blue')\nplt.ylabel('RF - IMPORTANCE', color ='blue')\nsns.barplot([i for i in range(len(importance))], importance)\nplt.show()\n\n\n#PREDICT ON THE X-TEST VALUES\ny_pred = rf.predict(X_test)\n\n\n#CHECK THE ACCURACY OF THE RF MODEL\nprint('Misclassified samples: %d' % (y_test != y_pred).sum())\nprint('Accuracy: %.2f' % accuracy_score(y_test, y_pred))","d9d4f062":"**KNN GIVES THE HIGHEST ACCURACY BUT THE RANDOM FORREST CLASSIFIER IS THE BEST MODEL TAKING INTO ACCOUNT ALL THE FEATURES AS THEY SHOULD BE. **\n"}}