{"cell_type":{"23514bfc":"code","568f5cc6":"code","7b6b286c":"code","7e674743":"code","e4306adb":"code","9d553a2d":"code","491f109d":"code","77b33286":"code","41f0288a":"code","baaa532d":"code","dcdf4614":"code","7d09089a":"code","1616d557":"code","5c706d89":"code","f5f891d2":"markdown"},"source":{"23514bfc":"import pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns","568f5cc6":"df = pd.read_csv(\"..\/input\/kdd99-dataset\/kddcup99_csv.csv\")","7b6b286c":"df.shape","7e674743":"df.columns","e4306adb":"df.info()","9d553a2d":"input_cols = list(df.columns)[1:-1]\ntarget_col = 'label'\nnumeric_cols = df.select_dtypes(include=np.number).columns.tolist()[:-1]","491f109d":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(df[numeric_cols])\ndf[numeric_cols] = scaler.transform(df[numeric_cols])","77b33286":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\ntarget = df['label']\ndf['label'] = le.fit_transform(target)\ndf['protocol_type'] = le.fit_transform(df['protocol_type'])\ndf['service'] = le.fit_transform(df['service'])\ndf['flag'] = le.fit_transform(df['flag'])","41f0288a":"from sklearn.model_selection import train_test_split\ntrain_df, test_df = train_test_split(df, test_size=0.3, random_state=42)\nprint(train_df.shape)\nprint(test_df.shape)","baaa532d":"train_inputs = train_df[input_cols].copy()\ntrain_targets = train_df[target_col].copy()\ntest_inputs = test_df[input_cols].copy()\ntest_targets = test_df[target_col].copy()","dcdf4614":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import SelectFromModel\nsel = SelectFromModel(RandomForestClassifier(n_estimators = 5, random_state=42))\nsel.fit(train_inputs, train_targets)\nselected_feat = train_inputs.columns[(sel.get_support())]\nprint(selected_feat)\nprint(len(selected_feat))","7d09089a":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 1000, random_state = 42)\nrf.fit(train_inputs[selected_feat], train_targets);\npreds_rf = rf.predict(test_inputs[selected_feat])\nfrom sklearn.metrics import accuracy_score\nscore_rf = accuracy_score(test_targets, preds_rf)\nscore_rf\n","1616d557":"from sklearn.tree import DecisionTreeClassifier\ndc = DecisionTreeClassifier()\ndc.fit(train_inputs[selected_feat], train_targets);\npreds_dc = dc.predict(test_inputs[selected_feat])\nscore_dc = accuracy_score(test_targets, preds_dc)\nscore_dc","5c706d89":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=7)\nknn.fit(train_inputs[selected_feat], train_targets)\npreds_knn = knn.predict(test_inputs[selected_feat])\nscore_knn = accuracy_score(test_targets, preds_knn)\nscore_knn","f5f891d2":"df.drop_duplicates(keep= 'first', inplace=True)\ndf.shape"}}