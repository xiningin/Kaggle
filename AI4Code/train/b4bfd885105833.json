{"cell_type":{"965a99d4":"code","53e9d33e":"code","e943e870":"code","8bed8682":"code","b0c4707b":"code","f861f7a3":"code","dae7d1c9":"code","ce48e7ee":"code","bb8353c6":"code","2803044a":"code","d5fd3893":"code","021a06b0":"code","d3a9253d":"code","ae1d0bdf":"code","a200b32b":"code","57c6d4f1":"code","98fe8634":"code","6b8ad20a":"code","bb4a364c":"code","daa2466e":"code","cf516c5e":"code","52dac31b":"code","2a05c0ea":"code","f2802e65":"code","7c96d5f0":"code","4e7763c4":"code","262ed133":"code","7564ef3e":"code","7fb21d1e":"code","19624fd2":"code","ec311462":"code","543e13c0":"code","c685afb7":"code","22932e9f":"code","ecdd618f":"code","f6863342":"code","bbbc60f4":"code","a87e1fcf":"code","6bf315e1":"markdown","f0f24fc4":"markdown","a72b5865":"markdown","588309e5":"markdown","0028aa32":"markdown","a7b97391":"markdown","83df4a5d":"markdown","64115d7e":"markdown","19b90be4":"markdown","ad65d5dc":"markdown","8441f927":"markdown","9df2da20":"markdown"},"source":{"965a99d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingClassifier, AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import GridSearchCV\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","53e9d33e":"df1 = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf1.head()","e943e870":"test_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_df.head()","8bed8682":"survival_df = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\nsurvival_df.head()","b0c4707b":"df2 = test_df.merge(survival_df, on='PassengerId')\ndf2.head()","f861f7a3":"df =  pd.concat([df1, df2])\ndf.head()","dae7d1c9":"df.info()","ce48e7ee":"df.drop(['Ticket', 'Cabin'], axis=1, inplace=True)","bb8353c6":"df['Age'].fillna(method ='ffill', inplace=True)\ndf.dropna(inplace=True)","2803044a":"df.isna().sum()","d5fd3893":"df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","021a06b0":"df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False).plot()","d3a9253d":"df[['Sex', 'Survived']].groupby(['Sex'], as_index=False)['Survived'].mean()","ae1d0bdf":"sns.barplot(x='Sex', y='Survived', data=df[['Sex', 'Survived']].groupby(['Sex'], as_index=False)['Survived'].mean())","a200b32b":"sns.catplot(x='Sex', y='Survived', hue='Pclass', data=df, kind='bar')\nplt.ylabel('Survival %')\nplt.title('Sex and Pclass VS Survival')\nplt.show()","57c6d4f1":"df['Title'] = df.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(df['Title'], df['Sex'])","98fe8634":"for i in df:\n    df['Title'] = df['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n    'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    df['Title'] = df['Title'].replace('Mlle', 'Miss')\n    df['Title'] = df['Title'].replace('Ms', 'Miss')\n    df['Title'] = df['Title'].replace('Mme', 'Mrs')\n    \ndf[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","6b8ad20a":"sns.catplot(x='Title', y='Survived', data=df, kind='bar')\nplt.ylabel('Survival %')\nplt.title('Title VS Survival')\nplt.show()","bb4a364c":"sns.catplot(x='Title', y='Survived', data=df, kind='point', kde=False, ci=None)\nplt.ylabel('Survival %')\nplt.title('Title VS Survival')\nplt.show()","daa2466e":"sns.displot(df['Age'], kde=True)\nplt.show()","cf516c5e":"ranges = [0, 10, 20, 30, 40, 50, 60, np.inf]\nlabel = ['0-10', '10-20', '20-30', '30-40', '40-50', '50-60', '60+']\n\ndf['Age group'] = pd.cut(df['Age'], bins=ranges, labels=label)","52dac31b":"df.groupby('Age group')['Survived'].mean()","2a05c0ea":"sns.catplot(x='Age group', y='Survived', data=df.groupby('Age group', as_index=False)['Survived'].mean(), kind='bar')\nplt.show()","f2802e65":"df['FamilySize'] = df['SibSp'] + df['Parch'] + 1\n\ndf[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)","7c96d5f0":"sns.catplot(x='FamilySize', y='Survived', data=df, kind='bar', ci=None)\nplt.show()","4e7763c4":"df['IsAlone'] = 0\ndf.loc[df['FamilySize'] == 1, 'IsAlone'] = 1\n\ndf[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()","262ed133":"sns.catplot(x='IsAlone', y='Survived', data=df, kind='point')","7564ef3e":"train_df = df.drop(['PassengerId', 'Name'], axis=1)","7fb21d1e":"train_df['Age group'] = train_df['Age group'].astype('object')","19624fd2":"from sklearn.preprocessing import LabelEncoder\n\n# Instantiate LabelEncoder\nle=LabelEncoder()\n\n# Iterate over all the values of each column and extract their dtypes\nfor col in train_df.columns:\n    # Compare if the dtype is object\n    if train_df[col].dtypes=='object':\n    # Use LabelEncoder to do the numeric transformation\n        train_df[col]=le.fit_transform(df[col])","ec311462":"train_df.info()","543e13c0":"from sklearn.ensemble import RandomForestClassifier\n\nX = train_df.drop('Survived', axis=1)\ny = train_df.Survived\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","c685afb7":"model = RandomForestClassifier(n_estimators=200)\n\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)","22932e9f":"print(\"Train score:\")\nprint(model.score(X_train, y_train))\n\nprint(\"Test score:\")\nprint(model.score(X_test, y_test))","ecdd618f":"test_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\ntest_df.head()\n\ntest_df.drop(['Ticket', 'Cabin'], axis=1, inplace=True)\n\ntest_df.fillna(method ='ffill', inplace=True)\n#df.dropna(inplace=True)\n\ntest_df.isna().sum()\n\ntest_df['Title'] = test_df.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(test_df['Title'], test_df['Sex'])\n\nfor i in test_df:\n    test_df['Title'] = test_df['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n    'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    test_df['Title'] = test_df['Title'].replace('Mlle', 'Miss')\n    test_df['Title'] = test_df['Title'].replace('Ms', 'Miss')\n    test_df['Title'] = test_df['Title'].replace('Mme', 'Mrs')\n\nranges = [0, 10, 20, 30, 40, 50, 60, np.inf]\nlabel = ['0-10', '10-20', '20-30', '30-40', '40-50', '50-60', '60+']\n\ntest_df['Age group'] = pd.cut(test_df['Age'], bins=ranges, labels=label)\n\ntest_df['FamilySize'] = test_df['SibSp'] + test_df['Parch'] + 1\n\ntest_df['Age group'] = test_df['Age group'].astype('object')\n\nfrom sklearn.preprocessing import LabelEncoder\n\n# Instantiate LabelEncoder\nle=LabelEncoder()\n\n# Iterate over all the values of each column and extract their dtypes\nfor col in test_df.columns:\n    # Compare if the dtype is object\n    if test_df[col].dtypes=='object':\n    # Use LabelEncoder to do the numeric transformation\n        test_df[col]=le.fit_transform(test_df[col])\n\ntest_df.drop('Name', axis=1, inplace=True)\n\ntest_df.drop('PassengerId', axis=1, inplace=True)\n\ntest_df['IsAlone'] = 0\ntest_df.loc[test_df['FamilySize'] == 1, 'IsAlone'] = 1\n\ny_pred = model.predict(test_df)\n\nsub = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\nsub.head()\n\naccuracy_score(y_pred, sub['Survived'])","f6863342":"model.feature_importances_","bbbc60f4":"coeff_df = pd.DataFrame(model.feature_importances_, X.columns, columns=['Coefficient'])\ncoeff_df.sort_values(by='Coefficient', ascending=False)","a87e1fcf":"names = train_df.drop('Survived', axis=1).columns\nimportance = model.fit(X, y).feature_importances_\n_ = plt.plot(range(len(names)), importance)\n_ = plt.xticks(range(len(names)), names, rotation=90)\n_ = plt.ylabel('Coefficients')\nplt.grid(True)\nplt.show()","6bf315e1":"#### Ans: Family with 4 members have highest chamce of survival","f0f24fc4":"## Q. Which Family size have highest chances of survival?","a72b5865":"## Q. Which age group have highest chances of survived?","588309e5":"#### Ans: No, it Doesn't have any significant impact","0028aa32":"#### Ans: Ladies and Kids survived the most","a7b97391":"#### Ans: There is negative corelaton between Pclass and Survival rate, suviaval rate is decreasing with increase in Pclass. And females have highest chances of survival as male send female first.","83df4a5d":"#### Sex, Fare and Age impacts survival most ","64115d7e":"## Q. Does pclass or sex have any effect on survival rate?","19b90be4":"## Model","ad65d5dc":"## Q. Which group of people survived the most?","8441f927":"#### Ans: Age grop of people 0-10 have highest chance of survival","9df2da20":"## Q. Is being alone increase chances of survival?"}}