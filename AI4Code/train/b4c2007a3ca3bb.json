{"cell_type":{"f56244de":"code","94a0296b":"code","bf09507d":"code","1ada2de4":"code","d8b28671":"code","43d7fd3a":"code","ed9d89b1":"code","9dc7db64":"code","cdae54c5":"code","08eed129":"code","89a3e376":"code","01f12b15":"code","515340e9":"code","d3872a35":"code","ec13637b":"code","0c4aa858":"code","2017e659":"code","a9bcffc7":"code","594663af":"code","64796e60":"code","0ac9eee4":"code","aa089f2a":"code","c2a7849c":"code","2fd19727":"code","dd0a1bb8":"code","d9e32bc3":"code","5e19cb25":"code","d554fe2d":"code","1e8a7158":"code","b4006644":"code","25337875":"code","5fd54242":"code","609740c4":"code","3d1ff0a4":"code","ac936df4":"code","b0f1308f":"code","53d1539e":"code","9528c30c":"code","84311325":"code","758fa2e3":"code","f2a66be6":"code","18075986":"code","41047c91":"code","54222fc2":"code","e68de068":"code","e1bcc160":"code","f71a51fa":"code","c2668b6e":"code","2da2cd6c":"code","9d49fa5c":"code","5dc1f38d":"code","99706037":"code","17cb10ae":"code","109fbfc8":"code","669c34f0":"code","bba4590a":"code","943933d6":"code","3d1aee2b":"code","3b99e56c":"code","1bce0d11":"code","f654e0de":"code","f71eb58e":"code","d5c47a75":"markdown","79cd7399":"markdown","385ede24":"markdown","56c46a88":"markdown","8913d4f2":"markdown","297f577f":"markdown","324ae9c2":"markdown","8e5477f6":"markdown","c5482035":"markdown","84a64586":"markdown","a64b7c3c":"markdown","090d215f":"markdown","f491ee7d":"markdown","fcaf57d2":"markdown","a6697665":"markdown","7a641188":"markdown","434f6833":"markdown","f9668db0":"markdown","3730a5dd":"markdown","e708658f":"markdown","54e6314d":"markdown","fcf76902":"markdown","7eac3849":"markdown","ced0981d":"markdown","f6a6b7b7":"markdown","255fe57c":"markdown","627bb1d8":"markdown","4858cd6a":"markdown","f538e065":"markdown","d997b32d":"markdown","28fb6329":"markdown","63741a73":"markdown","b24390cb":"markdown","78a80a2a":"markdown","070af51d":"markdown","07bc33bc":"markdown","b60e458c":"markdown","f669583b":"markdown","79c7a818":"markdown","5dc7b7a8":"markdown","18c6bc13":"markdown","ee31fd4d":"markdown","0026310b":"markdown","18d53a61":"markdown","856f225f":"markdown","3ea246f8":"markdown","772a1d39":"markdown","a553fa57":"markdown","fd901925":"markdown"},"source":{"f56244de":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\nsns.color_palette(\"crest\", as_cmap=True)\n\n#Lecture du dossier data Kaggle\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","94a0296b":"data_2015 = pd.read_csv(\"..\/input\/sea-building-energy-benchmarking\/2015-building-energy-benchmarking.csv\")\ndata_2015.head()","bf09507d":"data_2016 = pd.read_csv(\"..\/input\/sea-building-energy-benchmarking\/2016-building-energy-benchmarking.csv\")\ndata_2016.head()","1ada2de4":"def compare_colums(df1,df2):\n    columns_1 = list(df1.columns) \n    columns_2 = list(df2.columns)\n    same_columns=[]\n    diff_columns_2=[]\n    diff_columns_1=[]\n\n    for col in columns_2:\n        if col in columns_1:\n            same_columns.append(col)\n        else:\n            diff_columns_2.append(col)\n    for col in columns_1:\n        if col not in columns_2:\n            diff_columns_1.append(col)\n    return diff_columns_1, diff_columns_2","d8b28671":"diff_columns_2015, diff_columns_2016 = compare_colums(data_2015,data_2016)\ndiff_columns_2015","43d7fd3a":"diff_columns_2016","ed9d89b1":"data_2015['Location'][0]","9dc7db64":"import ast\ndata_2015['Location'] = [ast.literal_eval(str(item)) for index, item in data_2015.Location.iteritems()]\ndata_2015 = pd.concat([data_2015.drop(['Location'], axis=1), data_2015['Location'].apply(pd.Series)], axis=1)\ndata_2015['human_address'] = [ast.literal_eval(str(item)) for index, item in data_2015.human_address.iteritems()]\ndata_2015 = pd.concat([data_2015.drop(['human_address'], axis=1), data_2015['human_address'].apply(pd.Series)], axis=1)\ndata_2015.head()","cdae54c5":"data_2015 = data_2015.rename(columns={\"latitude\":\"Latitude\", \"longitude\":\"Longitude\",\n                                      \"address\":\"Address\", \"city\":\"City\", \n                                      \"state\":\"State\", \"zip\":\"ZipCode\"})","08eed129":"diff_columns_2015, diff_columns_2016 = compare_colums(data_2015,data_2016)\ndiff_columns_2015","89a3e376":"diff_columns_2016","01f12b15":"print(f\"Description de la variable TotalGHGEmissions 2016 : \\n\\n\",data_2016['TotalGHGEmissions'].describe(),\n     f\"\\n\\nDescription de la variable GHGEmissions(MetricTonsCO2e) 2015 : \\n\\n\", data_2015['GHGEmissions(MetricTonsCO2e)'].describe())","515340e9":"data_2015 = data_2015.rename(columns={'GHGEmissions(MetricTonsCO2e)':'TotalGHGEmissions',\n                                     'GHGEmissionsIntensity(kgCO2e\/ft2)':'GHGEmissionsIntensity',\n                                     'Comment':'Comments'})\ndata_2015.drop(['OtherFuelUse(kBtu)','2010 Census Tracts',\n                'Seattle Police Department Micro Community Policing Plan Areas',\n                'City Council Districts','SPD Beats', 'Zip Codes'], axis=1, inplace=True)","d3872a35":"diff_columns_2015, diff_columns_2016 = compare_colums(data_2015,data_2016)\nprint(diff_columns_2015,diff_columns_2016)","ec13637b":"data = pd.concat([data_2015[data_2016.columns],data_2016], axis = 0).sort_values([\"DataYear\", \"OSEBuildingID\"])\ndata.shape","0c4aa858":"data['BuildingType'].unique()","2017e659":"data = data[~data['BuildingType'].str.contains(\"Multifamily\")]\ndata['BuildingType'].unique()","a9bcffc7":"print(\"Le jeu de donn\u00e9es compte \u00e0 pr\u00e9sent {} lignes et {} colonnes.\".format(data.shape[0],data.shape[1]))","594663af":"mean_columns = ['NumberofBuildings', 'NumberofFloors', 'PropertyGFATotal',\n                'PropertyGFAParking', 'PropertyGFABuilding(s)',\n                'LargestPropertyUseTypeGFA', 'SecondLargestPropertyUseTypeGFA',\n                'ThirdLargestPropertyUseTypeGFA', 'ENERGYSTARScore', 'SiteEUI(kBtu\/sf)',\n                'SiteEUIWN(kBtu\/sf)', 'SourceEUI(kBtu\/sf)', 'SourceEUIWN(kBtu\/sf)',\n                'SiteEnergyUse(kBtu)', 'SiteEnergyUseWN(kBtu)', 'SteamUse(kBtu)',\n                'Electricity(kWh)', 'Electricity(kBtu)', 'NaturalGas(therms)',\n                'NaturalGas(kBtu)', 'TotalGHGEmissions', 'GHGEmissionsIntensity']\nOSEBuilding_means = data[['OSEBuildingID']+mean_columns].groupby('OSEBuildingID').mean()\nOSEBuilding_means.head()","64796e60":"duplicate_building = data.drop_duplicates(subset=['OSEBuildingID'], keep='last')\nduplicate_building.drop(mean_columns, axis=1, inplace=True)\ndata = pd.merge(duplicate_building, OSEBuilding_means, how='left', on='OSEBuildingID')","0ac9eee4":"data.info()","aa089f2a":"def search_componant(df, suffix=None):\n  componant = []\n  for col in df.columns:\n      if suffix in col: \n        componant.append(col)\n  return componant","c2a7849c":"#Suppression des variables WN\ndata.drop(search_componant(data,'WN'), axis=1, inplace=True)","2fd19727":"#Suppression des variables redondantes\nredundant_features = ['NaturalGas(therms)','Electricity(kWh)']\ndata.drop(redundant_features, axis=1, inplace=True)","dd0a1bb8":"data.describe()","d9e32bc3":"data = data[~((data['SiteEnergyUse(kBtu)'].isnull()) | (data['TotalGHGEmissions'].isnull()))]","5e19cb25":"data.drop(\"Comments\", axis=1, inplace=True)","d554fe2d":"data = data[~data[\"Outlier\"].isnull()==False]\ndata.drop('Outlier', axis=1, inplace=True)","1e8a7158":"building_type = data.groupby(by='BuildingType')['OSEBuildingID'].nunique()\n\nfont_title = {'family': 'serif',\n              'color':  '#1d479b',\n              'weight': 'bold',\n              'size': 18,\n             }\n\nfig, ax = plt.subplots(figsize=(8,8))\nax.pie(building_type.values, labels=building_type.index, \n       autopct='%1.1f%%', shadow=True, startangle=30,\n       textprops=dict(color=\"black\",size=12, weight=\"bold\"))\nax.axis('equal')\nax.set_title(\"R\u00e9partition des types de b\u00e2timents du Dataset\", fontdict=font_title)\nplt.show()","b4006644":"data.loc[(data['BuildingType']==\"NonResidential\"),'PrimaryPropertyType'].value_counts()","25337875":"import re\nregex = re.compile(r'[\\n\\r\\t]')\ndata['PrimaryPropertyType'] = [regex.sub(\"\", item) for index, item in data.PrimaryPropertyType.iteritems()]\ndata.loc[(data['BuildingType']==\"NonResidential\"),'PrimaryPropertyType'].value_counts()","5fd54242":"fig = plt.figure(figsize=(12,8))\nax = sns.histplot(data=data, x='YearBuilt', bins=int((data.YearBuilt.max() - data.YearBuilt.min())\/5))\nax.set_xlabel(\"Ann\u00e9e de construction\")\nax.set_ylabel(\"Nombre de b\u00e2timents\")\nplt.title(f\"Distribution des ann\u00e9es de construction des b\u00e2timents\\n\", fontdict=font_title)\nplt.show()","609740c4":"data['BuildingAge'] = data['DataYear'] - data['YearBuilt']\ndata.drop('YearBuilt', axis=1, inplace=True)\n\nfig = plt.figure(figsize=(12,8))\nax = sns.histplot(data=data, x='BuildingAge', bins=int((data.BuildingAge.max() - data.BuildingAge.min())\/5))\nax.set_xlabel(\"Age du b\u00e2timent\")\nax.set_ylabel(\"Nombre de b\u00e2timents\")\nplt.title(f\"Distribution de l'\u00e2ge des b\u00e2timents\\n\", fontdict=font_title)\nplt.show()","3d1ff0a4":"corr = data.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nfig, ax = plt.subplots(figsize=(15,15))\nax = sns.heatmap(corr, annot=True, fmt=\".2f\", annot_kws={'size':8}, \n                 mask=mask, center=0, cmap=\"coolwarm\")\nplt.title(f\"Heatmap des corr\u00e9lations lin\u00e9aires\\n\", \n          fontdict=font_title)\nplt.show()","ac936df4":"threshold = 0.7\ncorr_pairs = corr.unstack().sort_values(kind=\"quicksort\")\nstrong_corr = (pd.DataFrame(corr_pairs[(abs(corr_pairs) > threshold)])\n               .reset_index().rename(columns={0:'corr_coeff'}))\nstrong_corr = strong_corr[(strong_corr.index%2 == 0) & (strong_corr['level_0'] != strong_corr['level_1'])]\nstrong_corr.sort_values('corr_coeff', ascending=False)","b0f1308f":"def split_words(df, column = None):\n  list_words = set()\n  for word in df[column].str.split(','):\n    if isinstance(word, float):\n      continue\n    list_words = set().union(word, list_words)\n  return list(list_words)\n\nlist_use_type = split_words(data, 'ListOfAllPropertyUseTypes')\nprint(\"Nombre de type d'usages dans la base : {}\".format(len(list_use_type)))","53d1539e":"data['TotalUseTypeNumber'] = [str(word).count(\",\") + 1 for word in data['ListOfAllPropertyUseTypes'].str.split(',')]\ndata.drop('ListOfAllPropertyUseTypes', axis=1, inplace=True)","9528c30c":"gfa_features = search_componant(data, suffix='GFA')\ndata[['TotalUseTypeNumber'] + gfa_features].head(10)","84311325":"#On calcule les ratios\ndata['GFABuildingRate'] = (round((data['PropertyGFABuilding(s)'].fillna(0)\n                                  \/data['PropertyGFATotal'].fillna(0)),5))\ndata['GFAParkingRate'] = (round((data['PropertyGFAParking'].fillna(0)\n                                 \/data['PropertyGFATotal'].fillna(0)),5))\n\n#On supprime les variables inutiles\ndata.drop(['LargestPropertyUseTypeGFA', \n           'SecondLargestPropertyUseTypeGFA',\n           'SecondLargestPropertyUseType',\n           'ThirdLargestPropertyUseTypeGFA',\n           'ThirdLargestPropertyUseType',\n           'PropertyGFAParking',\n           'PropertyGFABuilding(s)'],\n         axis=1, inplace=True)\n\n#On compl\u00e8te les usages de la partie la plus large\ndata['LargestPropertyUseType'] = data['LargestPropertyUseType'].fillna(\"Unknown\")\ndata['NumberofFloors'] = data['NumberofFloors'].fillna(1)","758fa2e3":"data['GFAPerBuilding'] = round((data['PropertyGFATotal'] \/ data['NumberofBuildings']),3)\ndata['GFAPerFloor'] = round((data['PropertyGFATotal'] \/ data['NumberofFloors']),3)","f2a66be6":"data.info()","18075986":"corr = data.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nfig, ax = plt.subplots(figsize=(15,15))\nax = sns.heatmap(corr, annot=True, fmt=\".2f\", annot_kws={'size':8}, \n                 mask=mask, center=0, cmap=\"coolwarm\")\nplt.title(f\"Heatmap des corr\u00e9lations lin\u00e9aires\\n\", \n          fontdict=font_title)\nplt.show()","41047c91":"threshold = 0.7\ncorr_pairs = corr.unstack().sort_values(kind=\"quicksort\")\nstrong_corr = (pd.DataFrame(corr_pairs[(abs(corr_pairs) > threshold)])\n               .reset_index().rename(columns={0:'corr_coeff'}))\nstrong_corr = strong_corr[(strong_corr.index%2 == 0) & (strong_corr['level_0'] != strong_corr['level_1'])]\nstrong_corr.sort_values('corr_coeff', ascending=False)","54222fc2":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\nstrong_corr_features = list(set(list(strong_corr['level_0'].values) + list(strong_corr['level_1'].values)))\nX = data[strong_corr_features].replace([np.inf, -np.inf], np.nan)\nX = X.dropna()\n\nvif_data = pd.DataFrame()\nvif_data[\"feature\"] = X.columns\nvif_data[\"VIF\"] = [variance_inflation_factor(X.values, i) \n                   for i in range(len(X.columns))]\nvif_data[vif_data['VIF'] > 5]","e68de068":"Eui_features = search_componant(data, suffix='EUI(kBtu\/sf)') + ['GHGEmissionsIntensity']\ndata.drop(Eui_features, axis=1, inplace=True)","e1bcc160":"import scipy.stats as stats\n\nfig, axes = plt.subplots(nrows=1, ncols=2, sharex=False, sharey=False, figsize=(20,8))\nleft, width = 0, 1\nbottom, height = 0, 1\nright = left + width\ntop = bottom + height\n\nsns.histplot(data=data, x=\"TotalGHGEmissions\", kde=True, ax=axes[0], color=\"#9C3E2D\", alpha=0.6)\naxes[0].set_title(\"Donn\u00e9es d'emission de CO2 globales\", color='#2cb7b0')\n\n#Test de Kolmogorov-Smirnov\nkstest = stats.kstest(data['TotalGHGEmissions'].notnull(),'norm')\naxes[0].text(right, top, 'Test Kolmogorov-Smirnov \\n Pvalue: {:.2} \\n Stat: {:.2}'.format(kstest.pvalue, kstest.statistic),\n            horizontalalignment='right',\n            verticalalignment='top',\n            style='italic', transform=axes[0].transAxes, fontsize = 12,\n            bbox={'facecolor':'#00afe6', 'alpha':0.5, 'pad':0})\n\nsns.histplot(data=data[(data['TotalGHGEmissions']< 1000)], x=\"TotalGHGEmissions\", kde=True, ax=axes[1], color=\"#9C3E2D\", alpha=0.6)\naxes[1].set_title(\"Donn\u00e9es d'emission de CO2 zoom\u00e9es\", color='#2cb7b0')\n\nplt.suptitle(\"Distribution des emissions de CO2 relev\u00e9es (2015-2016)\", \n             fontdict=font_title, fontsize=22)\nplt.show()","f71a51fa":"fig, axes = plt.subplots(nrows=1, ncols=2, sharex=False, sharey=False, figsize=(20,8))\n\nsns.histplot(data=data, x=\"SiteEnergyUse(kBtu)\", kde=True, ax=axes[0], color=\"#6D9C0E\", alpha=0.6)\naxes[0].set_title(\"Donn\u00e9es de consommation d'\u00e9nergie globales\", color='#2cb7b0')\n\n#Test de Kolmogorov-Smirnov\nkstest = stats.kstest(data['SiteEnergyUse(kBtu)'].notnull(),'norm')\naxes[0].text(right, top, 'Test Kolmogorov-Smirnov \\n Pvalue: {:.2} \\n Stat: {:.2}'.format(kstest.pvalue, kstest.statistic),\n            horizontalalignment='right',\n            verticalalignment='top',\n            style='italic', transform=axes[0].transAxes, fontsize = 12,\n            bbox={'facecolor':'#00afe6', 'alpha':0.5, 'pad':0})\n\nsns.histplot(data=data[(data['SiteEnergyUse(kBtu)']< 0.3*10**8)], x=\"SiteEnergyUse(kBtu)\", kde=True, ax=axes[1], color=\"#6D9C0E\", alpha=0.6)\naxes[1].set_title(\"Donn\u00e9es de consommation d'\u00e9nergie zoom\u00e9es\", color='#2cb7b0')\n\nplt.suptitle(\"Distribution des consommation d'\u00e9nergie relev\u00e9es (2015-2016)\", \n             fontdict=font_title, fontsize=22)\nplt.show()","c2668b6e":"fig, axes = plt.subplots(nrows=1, ncols=2, sharex=False, sharey=False, figsize=(20,8))\nsns.scatterplot(data=data, x=\"TotalGHGEmissions\", y=\"SiteEnergyUse(kBtu)\", ax=axes[0])\naxes[0].set_title(\"Donn\u00e9es globales\", color='#2cb7b0')\nsns.scatterplot(data=data[(data['TotalGHGEmissions'] < 5000)], x=\"TotalGHGEmissions\", y=\"SiteEnergyUse(kBtu)\", ax=axes[1])\naxes[1].set_title(\"Donn\u00e9es zoom\u00e9es\", color='#2cb7b0')\nplt.suptitle(\"R\u00e9partition des donn\u00e9es de consommation d'\u00e9nergie vs emissions de CO2\", fontdict=font_title, fontsize=22)\nplt.show()","2da2cd6c":"from math import radians, cos, sin, asin, sqrt\n\n#Coordonn\u00e9es du centre de Seattle\nseattle_lat = 47.6062\nseattle_lon = -122.3321\n\ndef haversine_distance(lat1, lng1, lat2, lng2, degrees=True):\n    r = 3956 # rayon de la Terre en miles\n    \n    if degrees:\n        lat1, lng1, lat2, lng2 = map(radians, [lat1, lng1, lat2, lng2])\n    \n    # Formule Haversine\n    dlng = lng2 - lng1 \n    dlat = lat2 - lat1 \n    a = sin(dlat\/2)**2 + cos(lat1) * cos(lat2) * sin(dlng\/2)**2\n    d = 2 * r * asin(sqrt(a))  \n\n    return d","9d49fa5c":"#Calcul des distance au centre de Seattle pour chaque point\ndata['harvesine_distance'] = [haversine_distance(seattle_lat, seattle_lon, x, y) \n                              for x, y in zip(data.Latitude.astype(float), data.Longitude.astype(float))]","5dc1f38d":"fig, axes = plt.subplots(nrows=1, ncols=2, sharex=False, sharey=False, figsize=(20,8))\nsns.scatterplot(data=data, y=\"TotalGHGEmissions\", x=\"harvesine_distance\", color=\"#9C3E2D\", ax=axes[0])\naxes[0].set_title(\"Donn\u00e9es globales\", color='#2cb7b0')\nsns.histplot(data=data[(data['TotalGHGEmissions'] < 2500)], y=\"TotalGHGEmissions\", \n                x=\"harvesine_distance\", color=\"#9C3E2D\", ax=axes[1])\naxes[1].set_title(\"Donn\u00e9es zoom\u00e9es\", color='#2cb7b0')\nplt.suptitle(\"R\u00e9partition des donn\u00e9es d'emissions de CO2 en fonction des coordonn\u00e9es g\u00e9ographiques\", \n             fontdict=font_title, fontsize=22)\nplt.show()","99706037":"fig, axes = plt.subplots(nrows=1, ncols=2, sharex=False, sharey=False, figsize=(20,8))\nsns.scatterplot(data=data, y=\"SiteEnergyUse(kBtu)\", x=\"harvesine_distance\", color=\"#6D9C0E\", ax=axes[0])\naxes[0].set_title(\"Donn\u00e9es globales\", color='#2cb7b0')\nsns.histplot(data=data[(data['SiteEnergyUse(kBtu)'] < 2*10**8)], y=\"SiteEnergyUse(kBtu)\", \n                x=\"harvesine_distance\", color=\"#6D9C0E\", ax=axes[1])\naxes[1].set_title(\"Donn\u00e9es zoom\u00e9es\", color='#2cb7b0')\nplt.suptitle(\"R\u00e9partition des donn\u00e9es d'emissions de CO2 en fonction des coordonn\u00e9es g\u00e9ographiques\", \n             fontdict=font_title, fontsize=22)\nplt.show()","17cb10ae":"fig, axes = plt.subplots(nrows=1, ncols=2, sharex=False, sharey=False, figsize=(20,8))\nsns.barplot(x='BuildingType',y='TotalGHGEmissions',data=data, ax=axes[0])\nsns.barplot(x='BuildingType',y='SiteEnergyUse(kBtu)',data=data, ax=axes[1])\nplt.suptitle(\"R\u00e9partition de la consommation d'\u00e9nergie et emissions de CO2 en fonction du type de b\u00e2timent\", \n             fontdict=font_title, fontsize=18)\nplt.show()","109fbfc8":"bins = pd.IntervalIndex.from_tuples([(0, 10), (10, 20), (20, 30), (30, 40), (40, 50), \n                                     (50, 60), (60, 70), (70,80), (80,90), (90,100), \n                                     (100,110), (110,120)])\n\nsns.catplot(\n    data=data, kind=\"bar\",\n    x=pd.cut(data['BuildingAge'], bins=bins), y=\"TotalGHGEmissions\",\n    ci=None, color=\"#9C3E2D\", alpha=.6,\n    height=7, aspect=2\n)\nplt.title(\"Influence de l'\u00e2ge des b\u00e2timents sur les \u00e9missions de CO2\", fontdict=font_title)\nplt.show()","669c34f0":"sns.catplot(\n    data=data, kind=\"bar\",\n    x=pd.cut(data['BuildingAge'], bins=bins), y=\"SiteEnergyUse(kBtu)\",\n    ci=None, color=\"#6D9C0E\", alpha=.6,\n    height=7, aspect=2\n)\nplt.title(\"Influence de l'\u00e2ge des b\u00e2timents sur les consommations d'\u00e9nergie\", fontdict=font_title)\nplt.show()","bba4590a":"data.info()","943933d6":"data['ComplianceStatus'].unique()","3d1aee2b":"print(\"Nombre de ligne identifi\u00e9es comme non conforme : {}.\".format(data[data['ComplianceStatus'] != \"Compliant\"].shape[0]))","3b99e56c":"data = data[data['ComplianceStatus'] == \"Compliant\"]","1bce0d11":"data = data.drop(['DefaultData','ComplianceStatus', 'City',\n                  'TaxParcelIdentificationNumber','CouncilDistrictCode'], axis=1)","f654e0de":"import folium\nimport folium.plugins\n\nseattle_map = folium.Map(location=[seattle_lat, seattle_lon], zoom_start=11)\n\n#Clusters\nmarker_cluster = folium.plugins.MarkerCluster().add_to(seattle_map)\nfor lat, lng, in zip(data.Latitude, data.Longitude):\n    folium.Marker(location=[lat, lng]).add_to(marker_cluster)\n\nseattle_map","f71eb58e":"data = data.drop(['Latitude','Longitude'], axis=1)\ndata.set_index(\"OSEBuildingID\").to_csv(\"building-energy-cleaned.csv\")","d5c47a75":"### <font color=\"#2cb7b0\" id=\"section_2_3\">2.3. Les corr\u00e9lations lin\u00e9aires<\/font>","79cd7399":"Puis regardons \u00e0 nouveau les diff\u00e9rences de colonnes entre les 2 dataframes :","385ede24":"Nous allons \u00e0 pr\u00e9sent convertir les diff\u00e9rentes surfaces (Buildings et Parking) en **pourcentage de la surface totale** et nous conserverons uniquement ces 2 variables en supprimant les variables `LargestPropertyUseTypeGFA`, `SecondLargestPropertyUseTypeGFA`, `ThirdLargestPropertyUseTypeGFA` :","56c46a88":"Et pour finir, nous supprimons les variables `Latitude` et `Longitude` puis **nous exportons le fichier clean\u00e9 pour les mod\u00e9lisations qui seront effectu\u00e9es dans un second Notebook** (https:\/\/www.kaggle.com\/michaelfumery\/sea-building-energy-and-ghg-prediction)","8913d4f2":"Les b\u00e2timents de moins de 30 ans semblent avoir des consommations d'\u00e9nergie et rejets de CO2 plus important que les buildings anciens, alors m\u00eame que la variable `BuildingAge` n'est pas fortement corr\u00e9l\u00e9e \u00e0 d'autres features *(comme la taille des b\u00e2timents par exemple)*.","297f577f":"Ici, on remarque que des cat\u00e9gories sont des **doublons avec un caract\u00e8re d'\u00e9chappement**. Nous allons corriger ce probl\u00e8me :","324ae9c2":"**Les variables des 2 datasets \u00e9tant \u00e0 pr\u00e9sent identiques**, nous allons pouvoir les regrouper en un unique jeu de donn\u00e9es :","8e5477f6":"On remarque \u00e9galement des variables suffix\u00e9es **GFA** : Elles repr\u00e9sente la surface au sol *(Ground Floor Area)*. Nous les conservons donc pour la suite des analyses.","c5482035":"## <font color=\"#337da4\" id=\"section_1\">1. Chargement et adaptation des donn\u00e9es de rel\u00e8ves<\/font>","84a64586":"la majeur partie des b\u00e2timents sont typ\u00e9s **\"NonResidential\"**. Nous pouvons visualiser les diverses cat\u00e9gories repr\u00e9sent\u00e9es dans ce type de b\u00e2timents :","a64b7c3c":"V\u00e9rifions la variable `ComplianceStatus` qui repr\u00e9sente la conformit\u00e9 des donn\u00e9es relev\u00e9es :","090d215f":"Nous allons \u00e0 pr\u00e9sent regarder la r\u00e9partition de ces 2 variables en fonction du type de b\u00e2tiement.","f491ee7d":"## <font color=\"#337da4\" id=\"section_3\">3. Derni\u00e8res \u00e9tapes de nettoyage<\/font>\n\nNous allons \u00e9liminer certaines variables qui ne seront pas utiles pour nos mod\u00e9lisations et v\u00e9rifier les donn\u00e9es incompl\u00e8tes identifi\u00e9es dans le jeu de donn\u00e9es initial.","fcaf57d2":"Nous allons ensuite supprimer les variables `DefaultData`, `ComplianceStatus`, `TaxParcelIdentificationNumber`, `CouncilDistrictCode`, `City` ","a6697665":"Les odres de grandeur des 2 variables sont identiques entre 2015 et 2016. Nous allons donc simplement renomer les colonnes \u00e0 l'identique. Nous supprimons \u00e9galement les colonnes de 2015 n'ayant pas d'\u00e9quivalent en 2016:","7a641188":"### <font color=\"#2cb7b0\" id=\"section_2_4\">2.4. Analyse des variables \u00e0 pr\u00e9dire<\/font>\n\nPour rappel, les 2 variables \u00e0 pr\u00e9dire dans le cadre de notre mission sont :\n- `TotalGHGEmissions`\n- `SiteEnergyUse(kBtu)`\n\nNous allons donc r\u00e9aliser quelques analyses exploratoires sur ces features :","434f6833":"La variable identifiant les outliers peut \u00eatre interessante pour nos analyses, cependant, dans la documentation, nous ne savons pas r\u00e9\u00e9llement \u00e0 quoi correspondent ces outliers. Nous allons donc supprimer les lignes mentionnant ces outliers.","f9668db0":"### <font color=\"#2cb7b0\" id=\"section_1_1\">1.1. Comparaison des colonnes des datasets<\/font>","3730a5dd":"Nous allons \u00e9galement regarder s'il existe des **doublons sur l'identifiant** `OSEBuildingID`. On effet, nos mod\u00e9lisations devront porter sur un b\u00e2tiement unique *(ce n'est pas une mod\u00e9lisation temporelle)*. Nous prendrons donc en valeur la moyenne des variables sur les 2 ann\u00e9es :","e708658f":"# <font color=\"#1d479b\">Sommaire<\/font>\n\n1. [Chargement et adaptation des donn\u00e9es de rel\u00e8ves](#section_1)     \n    1.1. [Comparaison des colonnes des datasets](#section_1_1)     \n    1.2. [D\u00e9compactage des donn\u00e9es de localisation de 2015](#section_1_2)     \n    1.3. [Description et nettoyage des donn\u00e9es](#section_1_3)     \n2. [Analyse exploratoire & Feature Engineering](#section_2)      \n    2.1. [Les types de b\u00e2timents](#section_2_1)     \n    2.2. [Les ann\u00e9es de construction](#section_2_2)     \n    2.3. [Les corr\u00e9lations lin\u00e9aires](#section_2_3)     \n    2.4. [Analyse des variables \u00e0 pr\u00e9dire](#section_2_4)\n3. [Derni\u00e8res \u00e9tapes de nettoyage](#section_3)\n4. [Projection des \u00e9tablissements sur la carte de Seattle](#section_4)","54e6314d":"### <font color=\"#2cb7b0\" id=\"section_1_3\">1.3. Description et nettoyage des donn\u00e9es<\/font>","fcf76902":"En se basant sur les projections obtenus et les r\u00e9sultats des tests de Kolmogorov-Smirnov *(Pvalue < au niveau de test de 5%)* on rejette donc l'hypoth\u00e8se de normalit\u00e9 des distributions de ces variables. \n\nProjettons \u00e0 pr\u00e9sent les scatterplots des distribition de ces 2 variables entre elles :","7eac3849":"Apr\u00e8s avoir visualis\u00e9 les premi\u00e8res lignes de ces 2 datasets, on remarque d\u00e9j\u00e0 que les colonnes ne sont pas identiques. Identifions les diff\u00e9rences :","ced0981d":"On remarque que les donn\u00e9es de localisation pour le jeu de donn\u00e9es de 2015 sont \"compact\u00e9es\" dans une sorte de double dictionnaire. Nous allons donc travailler cette variable pour extraire chacune des variables imbriqu\u00e9es :","f6a6b7b7":"Dans le cadre de nos mod\u00e9lisations, les variables \u00e0 pr\u00e9dire sont la **consommation d'\u00e9nergie du b\u00e2timent** (`SiteEnergyUse(kBtu)`) et ses **\u00e9missions de CO2** (`TotalGHGEmissions`). Certaines lignes comportent des manquants sur ces variables, nous allons donc les supprimer :","255fe57c":"Les bureaux de petite et moyenne taille repr\u00e9sentent la plus grande part des b\u00e2timents non r\u00e9sidentiels.\n\n### <font color=\"#2cb7b0\" id=\"section_2_2\">2.2. Les ann\u00e9es de construction<\/font>\nNous allons regarder les distribution des ann\u00e9es de construction des b\u00e2timents de Seattle :","627bb1d8":"On remarque que les variables suffix\u00e9es GFA pr\u00e9sentent de fortes corr\u00e9lations avec plusieurs autres variables. Nous allons donc **cr\u00e9er de nouvelles variables** pour tenter de gommer ces corr\u00e9lations lin\u00e9aires :","4858cd6a":"Nous allons pour le moment conserver les autres variables en l'\u00e9tat. Une courte analyse exploratoire nous en apprendra plus sur les donn\u00e9es \u00e0 conserver.","f538e065":"![banniere.jpg](attachment:4dbde187-75c8-40df-8c7e-81bad382a3ec.jpg)","d997b32d":"Plus que l'ann\u00e9e de construction, il serait int\u00e9ressant de traiter l'**age des b\u00e2timents** pour r\u00e9duire la dispersion des donn\u00e9es et lier l'ann\u00e9e des relev\u00e9s. Nous allons donc cr\u00e9er cette nouvelle variable et supprimer l'ann\u00e9e de construction :","28fb6329":"### <font color=\"#2cb7b0\" id=\"section_1_2\">1.2. D\u00e9compactage des donn\u00e9es de localisation de 2015<\/font>","63741a73":"R\u00e9aliser un OneHotEncoder sur 117 types d'usage ne serait pas oportun. Nous allons donc cr\u00e9er une variable nous donnant le **nombre total d'usage du b\u00e2timent**, puis supprimer la liste compl\u00e8te des usages :","b24390cb":"V\u00e9rification de **multicolin\u00e9arit\u00e9 avec le VIF** *(Variance Inflation Factor)* : $VIF = \\frac{1}{1-R^2}$","78a80a2a":"Pour les varaibles \u00e0 pr\u00e9dire `TotalGHGEmissions` et `SiteEnergyUse(kBtu)`, on remarque des corr\u00e9lations lin\u00e9aires quasi similaires avec les variables de relev\u00e9s (les consommations) mais \u00e9galement avec le nombre de batiments ou d'\u00e9tages ains que les surfaces au sol. \n\nOn remarque sur ce Heatmap de fortes corr\u00e9lations lin\u00e9aires entre variables. Ces corr\u00e9lations peuvent amener des probl\u00e8mes de colin\u00e9arit\u00e9 dans nos futurs mod\u00e8les. Isolons donc les **paires de variables avec des corr\u00e9lations de Pearson sup\u00e9rieurs \u00e0 0.7** :","070af51d":"Les **donn\u00e9es de localisation** ont \u00e9volu\u00e9 entre 2015 et 2016. On retrouve en plus l'adresse, la ville et la localisation GPS a \u00e9t\u00e9 segment\u00e9e en `Latitude` et `Longitude`. Certaines autres variables comme `GHGEmissions(MetricTonsCO2e)` ont chang\u00e9 de nom *(il faudra v\u00e9rifier si l'odre de grandeur des donn\u00e9es \u00e0 changer comparativement \u00e0* `TotalGHGEmissions` *de 2016)*.","07bc33bc":"Les donn\u00e9es sont \u00e0 pr\u00e9sent bien compl\u00e9t\u00e9es. Nous allons v\u00e9rifier l'impact de ce feature engineering sur la matrice des corr\u00e9lations lin\u00e9aires :","b60e458c":"Nous avons \u00e0 pr\u00e9sent les colonnes correspondant \u00e0 celles de 2016 : `latitude`, `longitude`, `address`, `city`, `state` et `zip`. Renommons les de la m\u00eame fa\u00e7on :","f669583b":"## <font color=\"#337da4\" id=\"section_2\">2. Analyse exploratoire & Feature Engineering<\/font>\n\nDans un premier temps, nous allons regarder la r\u00e9partition des divers types de b\u00e2timents \u00e0 \u00e9tudier :\n\n### <font color=\"#2cb7b0\" id=\"section_2_1\">2.1. Les types de b\u00e2timents<\/font>","79c7a818":"Il est pr\u00e9cisi\u00e9 dans le projet que **seuls les b\u00e2timents non destin\u00e9s \u00e0 l'habitation seront \u00e9tudi\u00e9s**. Nous allons donc supprimer toutes les lignes correspondant \u00e0 des habitations en nous basant sur la variable `BuildingType`","5dc7b7a8":"Le jeu de donn\u00e9es ne compte \u00e0 pr\u00e9sent plus de doublons sur la variable `OSEBuildingID`.\n\nRegardons \u00e0 pr\u00e9sent les infos et descriptions du dataset :","18c6bc13":"La variable `Comments`, tr\u00e8s peu renseign\u00e9e \u00e9galement, peux \u00eatre supprim\u00e9e :","ee31fd4d":"## <font color=\"#337da4\" id=\"section_4\">4. Projection des \u00e9tablissements sur la carte de Seattle<\/font>","0026310b":"on remarque ici que la r\u00e9partion des donn\u00e9es d'emission de CO2 en fonction de la consommation d'\u00e9nergie ne suivent pas uniquement 1 seule droite de r\u00e9gression lin\u00e9aire si l'on zoom sur les donn\u00e9es les plus repr\u00e9sent\u00e9es.\n\nRegardons \u00e0 pr\u00e9sent si les **coordonn\u00e9es g\u00e9ographiques** ont un impact sur les rejets et consommations. Pour cela, afin d'\u00e9viter les corr\u00e9lations fortes entre Latitude et Longitude, nous allons calculer la **distance Harversine entre chaque point de coordonn\u00e9es et le centre de Seattle** :","18d53a61":"Nous pouvons \u00e9galement calculer la **surface moyenne par b\u00e2timent et par \u00e9tage** :","856f225f":"# <font color=\"#1d479b\">Contexte<\/font>\n\nPour atteindre l'objectif de **ville neutre en \u00e9missions de carbone en 2050**, la ville de **Seattle** s\u2019int\u00e9resse de pr\u00e8s aux \u00e9missions des b\u00e2timents non destin\u00e9s \u00e0 l\u2019habitation.\n\nDes relev\u00e9s minutieux ont \u00e9t\u00e9 effectu\u00e9s en 2015 et en 2016. Cependant, ces relev\u00e9s sont co\u00fbteux \u00e0 obtenir, et \u00e0 partir de ceux d\u00e9j\u00e0 r\u00e9alis\u00e9s, nous devons tenter de pr\u00e9dire les \u00e9missions de CO2 et la consommation totale d\u2019\u00e9nergie de b\u00e2timents pour lesquels elles n\u2019ont pas encore \u00e9t\u00e9 mesur\u00e9es.\n\n<hr width=\"50%\" align=\"center\"\/>\n\nDans cette premi\u00e8re partie, nous allons r\u00e9aliser une **courte analyse exploratoire** apr\u00e8s avoir nettoy\u00e9 les donn\u00e9es si besoin. Le but sera de d\u00e9terminer les variables pertinentes ou d'en cr\u00e9er de nouvelles *(feature engineering)*.","3ea246f8":"Des scores VIF sup\u00e9rieur \u00e0 5 indiquent g\u00e9n\u00e9ralement une forte multicolin\u00e9arit\u00e9. Ces variables fortement corr\u00e9l\u00e9es risquent d'impacter nos mod\u00e8les.       \nLes features suffix\u00e9es `EUI(kBtu\/sf)`, sont des variables dont les valeurs sont ramen\u00e9es \u00e0 la surface par \u00e9tage. Nous allons les supprimer car nous avons cr\u00e9er des variables pouvant permettre de ramener nos donn\u00e9es \u00e0 l'\u00e9tage ou au building. Idem pour la variable `GHGEmissionsIntensity` ","772a1d39":"Dans la visualisation ci-dessus, certaines variables apparaissent d\u00e9j\u00e0 comme redondantes :\n- `Electricity(kWh)` et `Electricity(kBtu)`,\n- `NaturalGas(therms)` et `NaturalGas(kBtu)`\n- Les suffixes **WN** : \"Weather Normalized\" - Ce sont les mesures normalis\u00e9es avec les conditions climatiques. Dans le cadre de notre analyse, la m\u00e9t\u00e9o ne rentrera pas en compte.\n\nNous allons donc commencer par supprimer ces variables :","a553fa57":"Sur ces diagrammes en barre, les campus se d\u00e9marquent largement en terme de consommation et de rejets de CO2. Regardons \u00e0 pr\u00e9sent si l'\u00e2ge des b\u00e2timents a un impact sur les \u00e9missions de CO2 :","fd901925":"En regardant ces projections, il semble que **les coordonn\u00e9es g\u00e9ographiques *(donc les adresses des b\u00e2timents)* puissent avoir un impact sur les consommations d'\u00e9gergie et rejets de CO2**.\n\nD'autre part, la latitude et la longitude \u00e9tant 2 variables fortement corr\u00e9l\u00e9es dans notre jeu de donn\u00e9es, **nous allons supprimer ces 2 colonnes pour conserver uniquement ce point de coordonn\u00e9e unique Harvesine** *(en fin de Notebook)*."}}