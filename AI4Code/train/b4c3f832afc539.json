{"cell_type":{"42a5a8c2":"code","c89dd9a6":"code","029fb6b8":"code","df29f996":"code","eb34197c":"code","8361681c":"code","c5a1da20":"code","5c3d671c":"code","c2d0ad64":"code","9fdb457d":"code","11e88b89":"markdown","a7ee4469":"markdown"},"source":{"42a5a8c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c89dd9a6":"from pathlib import Path\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\nroot = '..\/input'\n\ntrain_dir = Path(f'{root}\/training\/training\/')\ntest_dir = Path(f'{root}\/validation\/validation\/')","029fb6b8":"#label info\ncols = ['Label','Latin Name', 'Common Name','Train Images', 'Validation Images']\nlabel_df = pd.read_csv(f\"{root}\/monkey_labels.txt\", names=cols, skiprows=1)\nlabel_df","df29f996":"labels = label_df['Common Name']\nlabels","eb34197c":"def image_show(num_image,label):\n    from matplotlib import pyplot as plt\n    import random\n    import cv2\n    import os\n    for i in range(num_image):\n        imgdir = Path(f'{root}\/training\/training\/' + label)\n        imgfile = random.choice(os.listdir(imgdir))\n        img = cv2.imread(f'{root}\/training\/training\/'+ label +'\/'+ imgfile)\n        plt.figure(i)\n        plt.imshow(img)\n        plt.title(imgfile)\n    plt.show()","8361681c":"print(labels[4])\nimage_show(3,'n4')","c5a1da20":"from keras.preprocessing.image import ImageDataGenerator\n\nheight = 150\nwidth = 150\nbatch_size = 64\nseed = 100\n\n# Training generator\ntrain_datagen = ImageDataGenerator(\n    rescale=1. \/ 255,\n    rotation_range=40,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest')\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size=(height, width),\n    batch_size=batch_size,\n    seed=seed,\n    shuffle=True,\n    class_mode='categorical')\n\n# Test generator\ntest_datagen = ImageDataGenerator(rescale=1. \/ 255)\nvalidation_generator = test_datagen.flow_from_directory(\n    test_dir,\n    target_size=(height, width),\n    batch_size=batch_size,\n    seed=seed,\n    shuffle=False,\n    class_mode='categorical')\n\ntrain_num = train_generator.samples\nvalidation_num = validation_generator.samples ","5c3d671c":"def get_net(num_classes):\n    from keras.models import Sequential\n    from keras.layers import Conv2D, Activation, BatchNormalization, GlobalAvgPool2D, MaxPooling2D, Dropout\n\n    model = Sequential()\n    model.add(Conv2D(32, (3, 3), input_shape=(150, 150, 3), strides=2))\n    model.add(Activation('relu'))\n\n    model.add(BatchNormalization())\n    model.add(Conv2D(32, (3, 3), strides=2))\n    model.add(Activation('relu'))\n\n    model.add(BatchNormalization())\n    model.add(Conv2D(64, (3, 3)))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(64, (3, 3), strides=2))\n    model.add(Activation('relu'))\n\n    model.add(Conv2D(512, (1, 1), strides=2))\n    model.add(Activation('relu'))\n    model.add(Conv2D(num_classes, (1, 1)))\n    model.add(GlobalAvgPool2D())\n    model.add(Activation('softmax'))\n    return model\n\nnum_classes = 10\nnet = get_net(num_classes)\nnet.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['acc'])\nnet.summary()","c2d0ad64":"from keras.callbacks import ModelCheckpoint, EarlyStopping\nfilepath=(\"monkey.h5f\")\ncheckpoint = ModelCheckpoint(filepath, monitor='val_acc', verbose=1, save_best_only=True, mode='max')\n# = EarlyStopping(monitor='val_acc', patience=15)\ncallbacks_list = [checkpoint]#, stopper]\n\nepochs = 200\n\nhistory = net.fit_generator(train_generator,\n                              steps_per_epoch= train_num \/\/ batch_size,\n                              epochs=epochs,\n                              validation_data=train_generator,\n                              validation_steps= validation_num \/\/ batch_size,\n                              callbacks=callbacks_list, \n                              verbose = 1\n                             )","9fdb457d":"def visualized_history(history):\n    acc = history.history['acc']\n    val_acc = history.history['val_acc']\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n    epochs = range(1, len(acc) + 1)\n\n    plt.title('Training and validation accuracy')\n    plt.plot(epochs, acc, 'red', label='Training acc')\n    plt.plot(epochs, val_acc, 'blue', label='Validation acc')\n    plt.legend()\n\n    plt.figure()\n    plt.title('Training and validation loss')\n    plt.plot(epochs, loss, 'red', label='Training loss')\n    plt.plot(epochs, val_loss, 'blue', label='Validation loss')\n    plt.legend()\n    \n    plt.show()\n    \nvisualized_history(history)","11e88b89":"## \u5efa\u7acb\u6a21\u578b","a7ee4469":"## \u6570\u636e\u9884\u5904\u7406"}}