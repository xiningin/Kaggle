{"cell_type":{"bd4ca5ea":"code","d78098e5":"code","90453d0c":"code","cd3a82ef":"code","354c946e":"code","d850e56c":"code","e635ecc2":"code","9156afce":"code","78d4d02e":"code","c3b87fae":"code","bdd40938":"code","b83bba8b":"code","99f5fd2d":"code","76ef6f5d":"code","e039fbe4":"code","a446b380":"code","ad0d51f6":"code","9a99ba42":"code","50ed4c1f":"code","f7d98ccf":"code","72e1c87e":"code","82803bdb":"code","ba3a6e98":"code","1b5bc1af":"code","c46003b8":"code","eada6f80":"code","a0c20bd4":"code","bd74fe57":"code","b6aa05f5":"code","14e45db9":"code","adafe4e7":"code","7ea31340":"code","5bbb33d0":"code","65394b44":"code","78f2a348":"code","f90e9053":"code","5fc745e5":"code","96665013":"code","283369ed":"code","92353f2a":"code","d6c1bab2":"code","90c407d7":"code","3aaf5259":"code","9d82230d":"code","a2e1e5be":"code","1f63a9cb":"markdown","d7ac377f":"markdown","6c96fa96":"markdown","eace704a":"markdown","ee3fccb8":"markdown","c102787f":"markdown","5fa379ca":"markdown","b3a905fb":"markdown","bbe4e914":"markdown","e4468a7e":"markdown","928d248c":"markdown","11112645":"markdown","3d0bce17":"markdown","30058d74":"markdown","91d3ce35":"markdown","7a39c2e3":"markdown","4105a883":"markdown","c768a420":"markdown","0af8d0f7":"markdown","13b57099":"markdown","d65c7ef0":"markdown","a1786a28":"markdown","1fcca43a":"markdown","c7001b21":"markdown","e667ddcf":"markdown","1bc37b46":"markdown","a2b9575a":"markdown","e10d1f7f":"markdown","f0cf2cdf":"markdown","478f0128":"markdown","389fe94a":"markdown","10f1786e":"markdown","d4d28cdf":"markdown","d8ee19a2":"markdown","469417ca":"markdown","8e7cc5f9":"markdown","31f750d0":"markdown","90d01c2e":"markdown","a50b3650":"markdown","87344098":"markdown","3b3b21dc":"markdown","96628eaf":"markdown","eb3a8334":"markdown","a54cdcc8":"markdown","df020161":"markdown","a7512984":"markdown","84289ced":"markdown","c8466f91":"markdown","783faa5a":"markdown","5bbd8ceb":"markdown","0449ce6b":"markdown","9742c8f3":"markdown","7422c65b":"markdown","f5a65923":"markdown","82f3bfb5":"markdown","2bf08e87":"markdown","50f91e4f":"markdown","bf472943":"markdown","af13ce5e":"markdown","7ebaff68":"markdown","707b4519":"markdown","e015c638":"markdown"},"source":{"bd4ca5ea":"import os\nimport sys\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nmatplotlib.style.use(\"Solarize_Light2\")\n\n%matplotlib inline","d78098e5":"def check_null(df):\n    \"\"\"\n    Returns percentage of rows containing missing data\n    \"\"\"\n    return df.isna().sum() * 100\/len(df)\n\n\ndef get_missing_dates(series, start_date, end_date, freq=\"D\"):\n    \"\"\"\n    Returns the dates which are missing in the series\n    date_sr between the start_date and end_date\n    \n    series: Series consisting of date\n    start_date: Start date in String format\n    end_date: End date in String format\n    \"\"\"\n    return pd.date_range(\n        start=start_date, end=end_date, freq=freq).difference(series)\n\n\ndef check_duplicate(df, subset):\n    \"\"\"\n    Returns if there are any duplicate rows in the DataFrame.\n    \n    df: DataFrame under consideration\n    subset: Optional List of feature names based on which \n            duplicate rows are being identified. \n    \"\"\"\n    if subset is not None: \n        return df.duplicated(subset=subset, keep=False).sum()\n    else:\n        return df.duplicated(keep=False).sum()\n\n\ndef create_date_features(source_df, target_df, feature_name):\n    '''\n    Create new features related to dates\n    \n    source_df : DataFrame consisting of the timestamp related feature\n    target_df : DataFrame where new features will be added\n    feature_name : Name of the feature of date type which needs to be decomposed.\n    '''\n    target_df.loc[:, 'year'] = source_df.loc[:, feature_name].dt.year.astype('uint16')\n    target_df.loc[:, 'month'] = source_df.loc[:, feature_name].dt.month.astype('uint8')\n    target_df.loc[:, 'quarter'] = source_df.loc[:, feature_name].dt.quarter.astype('uint8')\n    target_df.loc[:, 'weekofyear'] = source_df.loc[:, feature_name].dt.isocalendar().week.astype('uint8')\n    \n    target_df.loc[:, 'hour'] = source_df.loc[:, feature_name].dt.hour.astype('uint8')\n    \n    target_df.loc[:, 'day'] = source_df.loc[:, feature_name].dt.day.astype('uint8')\n    target_df.loc[:, 'dayofweek'] = source_df.loc[:, feature_name].dt.dayofweek.astype('uint8')\n    target_df.loc[:, 'dayofyear'] = source_df.loc[:, feature_name].dt.dayofyear.astype('uint8')\n    target_df.loc[:, 'is_month_start'] = source_df.loc[:, feature_name].dt.is_month_start\n    target_df.loc[:, 'is_month_end'] = source_df.loc[:, feature_name].dt.is_month_end\n    target_df.loc[:, 'is_quarter_start']= source_df.loc[:, feature_name].dt.is_quarter_start\n    target_df.loc[:, 'is_quarter_end'] = source_df.loc[:, feature_name].dt.is_quarter_end\n    target_df.loc[:, 'is_year_start'] = source_df.loc[:, feature_name].dt.is_year_start\n    target_df.loc[:, 'is_year_end'] = source_df.loc[:, feature_name].dt.is_year_end\n    \n    # This is of type object\n    target_df.loc[:, 'month_year'] = source_df.loc[:, feature_name].dt.to_period('M')\n    \n    return target_df\n\n\ndef plot_boxh_groupby(df, feature_name, by):\n    \"\"\"\n    Box plot with groupby\n    \n    df: DataFrame\n    feature_name: Name of the feature to be plotted\n    by: Name of the feature based on which groups are created\n    \"\"\"\n    df.boxplot(column=feature_name, by=by, vert=False, \n                              figsize=(10, 6))\n    plt.title(f'Distribution of {feature_name} by {by}')\n    plt.show()\n    \n\ndef plot_hist(df, feature_name, kind='hist', bins=100, log=True):\n    \"\"\"\n    Plot histogram.\n    \n    df: DataFrame\n    feature_name: Name of the feature to be plotted.\n    \"\"\"\n    if log:\n        df[feature_name].apply(np.log1p).plot(kind='hist', \n                                              bins=bins, \n                                              figsize=(15, 5), \n                                              title=f'Distribution of log1p[{feature_name}]')\n    else:\n        df[feature_name].plot(kind='hist', \n                              bins=bins, \n                              figsize=(15, 5), \n                              title=f'Distribution of {feature_name}')\n    plt.show()\n\n\ndef plot_ts(series, figsize=(20, 6), title=None, xlabel=\"\", ylabel=\"\"):\n    \"\"\"\n    Plot Time Series data. The series object should have date or time as index.\n    \n    series: Series object to be plotted.\n    \"\"\"\n    series.plot(figsize=figsize, title=title)\n    plt.xlabel(xlabel)\n    plt.ylabel(ylabel)\n    plt.show()\n\n\ndef plot_barh(df, feature_name, normalize=True, \n              kind='barh', figsize=(15,5), sort_index=False, title=None):\n    \"\"\"\n    Plot barh for a particular feature\n    \n    kind : Type of the plot\n    \n    \"\"\"\n    if sort_index==True:\n        df[feature_name].value_counts(\n                normalize=normalize, dropna=False).sort_index().plot(\n                kind=kind, figsize=figsize, grid=True,\n                title=title)\n    else:   \n        df[feature_name].value_counts(\n                normalize=normalize, dropna=False).sort_values().plot(\n                kind=kind, figsize=figsize, grid=True,\n                title=title)\n    \n    plt.legend()\n    plt.show()\n\n\ndef plot_boxh(df, feature_name, kind='box', log=True):\n    \"\"\"\n    Box plot\n    \"\"\"\n    if log:\n        df[feature_name].apply(np.log1p).plot(kind='box', vert=False, \n                                                  figsize=(10, 6), \n                                                  title=f'Distribution of log1p[{feature_name}]')\n    else:\n        df[feature_name].plot(kind='box', vert=False, \n                              figsize=(10, 6), \n                              title=f'Distribution of {feature_name}')\n    plt.show()\n    \n\ndef plot_scatter(df, feature_x, feature_y, figsize=(10,10), \n                 title=None, xlabel=None, ylabel=None):\n    \"\"\"\n    Plot satter     \n    \"\"\"\n    df.plot.scatter(feature_x, feature_y, \n                    figsize=(8, 6), title=title, \n                    legend=None)\n    plt.xlabel(xlabel)\n    plt.ylabel(ylabel)\n    plt.show()","90453d0c":"# Read the data\nDATA_DIR = \"\/kaggle\/input\/microsoft-azure-predictive-maintenance\/\"\n\ntelemetry_df = pd.read_csv(f\"{DATA_DIR}\/PdM_telemetry.csv\")\nerrors_df = pd.read_csv(f\"{DATA_DIR}\/PdM_errors.csv\")\nmaint_df = pd.read_csv(f\"{DATA_DIR}\/PdM_maint.csv\")\nfailures_df = pd.read_csv(f\"{DATA_DIR}\/PdM_failures.csv\")\nmachines_df = pd.read_csv(f\"{DATA_DIR}\/PdM_machines.csv\")\n\n# Format date & time. Sort based on date for better readability\ntables = [telemetry_df, maint_df, failures_df, errors_df]\nfor df in tables:\n    df[\"datetime\"] = pd.to_datetime(df[\"datetime\"], format=\"%Y-%m-%d %H:%M:%S\")\n    df.sort_values([\"datetime\", \"machineID\"], inplace=True, ignore_index=True)\n","cd3a82ef":"print(f\"Shape of the Telemetry Records: {telemetry_df.shape}\")\nprint(\"\\n\")\ntelemetry_df.head()","354c946e":"telemetry_df[telemetry_df.machineID == 1].head()","d850e56c":"telemetry_df.machineID.nunique()","e635ecc2":"telemetry_df.datetime.describe(datetime_is_numeric=True)","9156afce":"get_missing_dates(telemetry_df.datetime, \n                  start_date=\"2015-01-01 06:00:00\", \n                  end_date=\"2016-01-01 06:00:00\", \n                  freq='H')","78d4d02e":"check_duplicate(telemetry_df, ['datetime', 'machineID'])","c3b87fae":"check_null(telemetry_df)","bdd40938":"# Let's plot Vibrarion of Machine 1 for 2015\ndf_vib_machine_1 = telemetry_df[\n    telemetry_df.machineID == 1][[\"datetime\", \"vibration\"]].set_index(\"datetime\")\nplot_ts(df_vib_machine_1, title=\"Vibration of Machine 1\", xlabel=\"Time\", ylabel=\"Vibration\")","b83bba8b":"# Let's plot voltage of Machine 2 for 1st two weeks of 2015\ndf_vib_machine_1 = telemetry_df[\n    (telemetry_df.machineID == 2) & (\n        telemetry_df.datetime.dt.isocalendar().week.isin(\n            [1, 2, 3]))][[\"datetime\", \"volt\"]].set_index(\"datetime\")\nplot_ts(df_vib_machine_1, title=\"Volatage of Machine 2\", xlabel=\"Time\", ylabel=\"Voltage\")","99f5fd2d":"telemetry_df = create_date_features(telemetry_df, telemetry_df, \"datetime\")\ntelemetry_df.head()","76ef6f5d":"plot_boxh_groupby(telemetry_df, feature_name=\"volt\", by=\"month_year\")","e039fbe4":"plot_boxh_groupby(telemetry_df[telemetry_df.machineID == 80], feature_name=\"volt\", by=\"month_year\")","a446b380":"plot_hist(telemetry_df, feature_name=\"volt\", log=False, bins=1000)","ad0d51f6":"for name in ['rotate', 'pressure', 'vibration']:\n    plot_hist(telemetry_df, feature_name=name, log=False, bins=1000)","9a99ba42":"print(f\"Shape of the Error Records: {errors_df.shape}\")\nprint(\"\\n\")\nerrors_df.head()","50ed4c1f":"# Sort the Error based \"datetime\", \"machineID\", \"errorID\" for better readability\nerrors_df = errors_df.sort_values([\"datetime\", \"machineID\", \"errorID\"]).reset_index(drop=True)","f7d98ccf":"errors_df.machineID = errors_df.machineID.astype('category')\nerrors_df.errorID = errors_df.errorID.astype('category')","72e1c87e":"errors_df.datetime.describe(datetime_is_numeric=True)","82803bdb":"check_duplicate(errors_df, ['datetime', 'machineID', 'errorID'])","ba3a6e98":"check_null(errors_df)","1b5bc1af":"plot_barh(errors_df, \n          feature_name=\"errorID\", \n          figsize=(10, 6), \n          normalize=False,\n          title=\"Different Types of Errors\")","c46003b8":"plot_barh(errors_df, \"machineID\", figsize=(6, 20), normalize=False, title=\"Number of errors across MachineID\")","eada6f80":"df_errors = errors_df.groupby([\"machineID\", \"errorID\"]).size().reset_index()\ndf_errors.columns = [\"machineID\", \"errorID\", \"errorValues\"]\n#df_errors_pivot = pd.pivot(df_errors, index=\"machineID\", columns=\"errorID\", values=\"errorValues\").reset_index().rename_axis(None, axis=1)\ndf_errors_pivot = pd.pivot(df_errors, index=\"machineID\", columns=\"errorID\", values=\"errorValues\").rename_axis(None, axis=1)\n\ndf_errors_pivot.plot.bar(stacked=True, figsize=(20, 6), title=\"Count of Errors for different Machines\")\nplt.xlabel(\"Machine ID\")\nplt.ylabel(\"Number of Errors\");","a0c20bd4":"plot_ts(\n    errors_df.datetime.dt.date.value_counts().sort_index(), \n    figsize=(20, 6), \n    title=\"Number of Errors Across Days\", \n    xlabel=\"Time\",\n    ylabel=\"Number of Errors\")","bd74fe57":"df_temp = errors_df[errors_df.machineID.isin([1, 2])].datetime.dt.date.value_counts().sort_index()\ndf_temp.plot(style=\"k.\", figsize=(8, 4), title=\"Number of Errors Across Days for Machine 1 & 2\")\nplt.ylabel(\"Count of Errors\")\nplt.xlabel(\"Time\")\nplt.show()","b6aa05f5":"errors_df['date'] = errors_df.datetime.dt.date\n\nerrors_df.groupby('date').size().hist(bins=20, figsize=(10, 6))\nplt.title(\"Distribution of Number of Errors Per Day\")\nplt.xlabel(\"Number of Errors on a Particular Day\")\nplt.ylabel(\"Frequency\")\nplt.show()","14e45db9":"print(f\"Shape of the Maintenance Records: {maint_df.shape}\")\nprint(\"\\n\")\nmaint_df.head()","adafe4e7":"for name in [\"machineID\", \"comp\"]:\n    maint_df[name] = maint_df[name].astype(\"category\")\n    \nmaint_df.sort_values([\"datetime\", \"machineID\", \"comp\"], inplace=True)\n\n# Add date related features.\nmaint_df = create_date_features(maint_df, maint_df, \"datetime\")","7ea31340":"maint_df.datetime.describe(datetime_is_numeric=True)","5bbb33d0":"get_missing_dates(maint_df.datetime, \n                  start_date=\"2014-06-01 06:00:00\", \n                  end_date=\"2016-01-01 06:00:00\", \n                  freq='H')","65394b44":"plot_barh(maint_df, \"month_year\", normalize=False, sort_index=True)","78f2a348":"plot_barh(maint_df, \n          feature_name=\"comp\", \n          figsize=(10, 6), \n          normalize=False,\n          title=\"Components Replaced\")","f90e9053":"plot_barh(maint_df, \"machineID\", \n          figsize=(6, 20), \n          normalize=False, \n          title=\"Number of Maintenance Records across MachineID\", \n          sort_index=True)","5fc745e5":"df_maint = maint_df.groupby([\"machineID\", \"comp\"]).size().reset_index()\ndf_maint.columns = [\"machineID\", \"comp\", \"num_comp\"]\ndf_maint_pivot = pd.pivot(df_maint, index=\"machineID\", columns=\"comp\", values=\"num_comp\").rename_axis(None, axis=1)\n\ndf_maint_pivot.plot.bar(stacked=True, figsize=(20, 6), title=\"Count of Components Replaced for different Machines\")\nplt.xlabel(\"Machine ID\")\nplt.ylabel(\"Number of Components Replaced\");","96665013":"maint_df.datetime.dt.date.value_counts().plot(\n    style=\"k.\", \n    figsize=(20, 4), \n    title=\"Number of Maintenance Records Across Time\")\nplt.ylabel(\"Number of Maintenance Records\")\nplt.xlabel(\"Time\")\nplt.show()","283369ed":"print(f\"Shape of the Machines Data: {machines_df.shape}\")\nprint(\"\\n\")\nmachines_df.head()","92353f2a":"plot_boxh(machines_df, feature_name=\"age\", log=False)","d6c1bab2":"# Create a DF with number of errors, maintenance records and failure records across machines\n\n# Create a DF consisting of number of erros across Machines\nerros_across_machine = errors_df.groupby(\"machineID\").size()\nerros_across_machine = pd.DataFrame(erros_across_machine, columns=[\"num_errors\"]).reset_index()\n\nmachines_errors_df = pd.merge(machines_df, erros_across_machine, how='left', on=\"machineID\")\n\n# Create a DF consisting of number of maintenance records across Machines\nmaint_across_machine = maint_df.groupby(\"machineID\").size()\nmaint_across_machine = pd.DataFrame(maint_across_machine, columns=[\"num_maint\"]).reset_index()\n\nmachines_errors_df = pd.merge(machines_errors_df, maint_across_machine, how='left', on=\"machineID\")\n\n# Create a DF consisting of number of failure records across Machines\nfailure_across_machine = failures_df.groupby(\"machineID\").size()\nfailure_across_machine = pd.DataFrame(failure_across_machine, columns=[\"num_failure\"]).reset_index()\n\nmachines_errors_df = pd.merge(machines_errors_df, failure_across_machine, how='left', on=\"machineID\")\n\nmachines_errors_df.head()","90c407d7":"plot_scatter(machines_errors_df, \"age\", \"num_errors\", \n             title=\"Age vs Number of Errors\", \n             xlabel=\"Age\", ylabel=\"Number of Errors\")","3aaf5259":"plot_scatter(machines_errors_df, \"age\", \"num_maint\", \n             title=\"Age vs Number of Maintenance Records\", \n             xlabel=\"Age\", ylabel=\"Number of Maintenance Records\")","9d82230d":"plot_scatter(machines_errors_df, \"age\", \"num_failure\", \n             title=\"Age vs Number of Failure Records\", \n             xlabel=\"Age\", ylabel=\"Number of Failure Records\")","a2e1e5be":"machines_errors_df.corr()","1f63a9cb":"### Let's plot number of maintenance records across months","d7ac377f":"# Failure Data","6c96fa96":"### Plot the distribution of age of the Machines","eace704a":"### Let's plot the number of Maintenance Records Across Machines","ee3fccb8":"Error data is distributed between 1st Jan 2015 to 1st Jan 2016.\n\nAlso data is captured in hourly fashion.","c102787f":"### Display the first few rows of the Telemetry data for Machine 1","5fa379ca":"### Are there any duplicates?\n\nOne Machine should not have multiple errors with the same time stamp.","b3a905fb":"There are no duplicates in the telemetry data.","bbe4e914":"### What is the duration of the data?","e4468a7e":"### Let's check the number of components replaced","928d248c":"# Exploratory Data Analysis for Predictive Maintenance (PdM)\n\n\n### This notebook explores the data related to Predictive Maintenance ([link](https:\/\/www.kaggle.com\/arnabbiswas1\/microsoft-azure-predictive-maintenance)) provided by Microsoft Azure.\n\n\n# What is Predictive Maintenance?\n\nOur world is full of equipment. For example:\n* Aircraft consists of different equipments\n* HVAC (Heating, Ventilation, Air Conditioning) equipment consists of various parts\n\nAll these equipments or their parts meet failures and hence need maintenance. Thus maintenance is a big industry by itself. Maintenance is done either by replacing parts at regular intervals even when those are working (**Preventive Maintenance**) or by replacing the parts only when there is failure (**Reactive Maintenance**). **Predictive Maintenance** avoids the drawbacks of Preventive Maintenance (under utilization of a part's life) and Reactive Maintenance (unscheduled downtime). Based on the health of an equipment in the past, future point of failure can be predicted in Predictive Maintenance. Thus, replacement of parts can be scheduled just before the actual failure. \n\nTraditionally, predictive maintenance is being done using rule based techniques. With the advent of connected sensors (IoT), data from equipment is continuously collected and fed to Machine Learning based systems to predict its future health.","11112645":"### Are there any duplicates?\n\nOne Machine should not have multiple rows with the same time stamp.","3d0bce17":"# Static Data of Machines","30058d74":"### Plot the distribution of voltage across various months. Ideally there should be some amount seasonality in the data","91d3ce35":"Telemetry data is distributed between 1st Jan 2015 to 1st Jan 2016","7a39c2e3":"Number of components replaced in the year 2015 are considerably higher compared to the 2014. \n\nAgain, we can ignore the data for 2016 (since we have only one day's data)","4105a883":"There are no missing values in the data","c768a420":"### Are there any Null values in the data?","0af8d0f7":"This kind of shows the same thing. There is not much variation of voltage across months.","13b57099":"### Plot number of Maintenance Issues reaised per day","d65c7ef0":"For Machine 1 & 2, for most of the days, number of error is 1. But there are few days when number of errors are more than 1.","a1786a28":"There are no duplicates in the error data.","1fcca43a":"### Let's plot the distribution of Voltage across Machines.","c7001b21":"# Data Description\n\nThere are 5 CSV files consisting of:\n\n- **Telemetry Time Series Data** (PdM_telemetry.csv): It consists of hourly average of voltage, rotation, pressure, vibration collected from 100 machines for the year 2015.\n\n- **Error** (PdM_errors.csv): These are errors encountered by the machines while in operating condition. Since, these errors don't shut down the machines, these are not considered as failures. The error date and times are rounded to the closest hour since the telemetry data is collected at an hourly rate.\n\n- **Maintenance** (PdM_maint.csv): If a component of a machine is replaced, that is captured as a record in this table. Components are replaced under two situations:\n    - During the regular scheduled visit, the technician replaced it (Proactive Maintenance)\n    - A component breaks down and then the technician does an unscheduled maintenance to replace the component (Reactive  Maintenance). This is considered as a failure and corresponding data is captured under Failures.\n    Maintenance data has both 2014 and 2015 records. This data is rounded to the closest hour since the telemetry data is collected at an hourly rate.\n    \n    \n\n- **Failures** (PdM_failures.csv): Each record represents replacement of a component due to failure. This data is a subset of Maintenance data. This data is rounded to the closest hour since the telemetry data is collected at an hourly rate.\n\n- **Metadata of Machines** (PdM_Machines.csv): Model type & age of the Machines.","e667ddcf":"This data set includes some information about the machines: model type and age (years in service).","1bc37b46":"### Let's plot Vibrarion of Machine 1 for 2015","a2b9575a":"It shows the voltage across Machines are not varying over month. \n\nWe can ignore the entry for 2016 since we only have data for one day in 2016.\n\n#### Let's plot it just for Machine 80.","e10d1f7f":"### Let's add date related features to the telemetry data","f0cf2cdf":"### Plot Number of Errors across Machine Age","478f0128":"### Are there any missinge days in the data?","389fe94a":"### How does the error distribution looks for a particluar machine?","10f1786e":"### How does the Machine to type of error distribution looks like?","d4d28cdf":"This indicates that there is a drastic difference between the number of maintenance records in 2014 vs 2015.","d8ee19a2":"### How many Machines are there?","469417ca":"# Maintenance Data","8e7cc5f9":"The age of the Machines is distributed between 0 to 20. The median age is to ~12.5. There are no outliers. Another indication that this is a synthetic data.","31f750d0":"# Error Data\n\nThis data includes the errors encountered by the machines while in operating condition. Since, these errors don't shut down the machines, these are not considered as failures. The error date and times are rounded to the closest hour since the telemetry data is collected at an hourly rate.","90d01c2e":"### Plot Age vs Number of Failure Records","a50b3650":"### Plot different types of errors","87344098":"It seems that the data is having hourly frequency.\n\nLet's check if there are missing rows.","3b3b21dc":"### How does the Machine to different component replaced looks like?","96628eaf":"# Telemetry Data\n\n### This data consists of hourly average of voltage, rotation, pressure, vibration collected from 100 machines for the year 2015.","eb3a8334":"Wow! The distribution is a perfect normal curve. **This indicates the possibility of synethetically generated data.**\n\nLet's verify it by plotting histogram of other parameters.","a54cdcc8":"### Plot number of errors across Machines over days","df020161":"### What is the duration of the data?","a7512984":"As expected, different machines has encountered, different number of errors.","84289ced":"## Observations about Telemetry Data\n- This may be synthetically generated data distributed between 1st Jan 2015 to 1st Jan 2016.\n- Each row represents the state of a machine on a particular hour. Voltage, vibration, pressure & rotation of a machine have been averaged hourly.\n- There are 100 unique Machines.\n- There are no duplicates or missing values in the dataset.\n- The four parameters voltage, vibration, pressure & rotation are normally distributed.","c8466f91":"Type 1 & 2 errors are most frequent","783faa5a":"### Plot Age vs Number of Maintenance Records","5bbd8ceb":"### Let's plot voltage of Machine 2 for 1st two weeks of 2015","0449ce6b":"#### From the above three plots, it appears only Number of Failures is slightly correlated with Age.\n\nLet's verify it with a correlation values.","9742c8f3":"### Let's check if the failures are uniformly occuring across machines.","7422c65b":"### Plot Age vs Number of Failures","f5a65923":"Maintenance data is present June 2014 onwards. This is different from other data which are present between 2014 and 2015.","82f3bfb5":"### Are there any Null values in the data?","2bf08e87":"There are 3919 errors in total.","50f91e4f":"### What is the duration of the data?","bf472943":"If a component of a machine is replaced, that is captured as a record in this table. Components are replaced under two situations:\n\n- During the regular scheduled visit, the technician replaced it (Proactive Maintenance)\n- A component breaks down and then the technician does an unscheduled maintenance to replace the component (Reactive Maintenance). This is considered as a failure and corresponding data is captured under Failures. Maintenance data has both 2014 and 2015 records. This data is rounded to the closest hour since the telemetry data is collected at an hourly rate.\n","af13ce5e":"Vibration, rotation and pressure are also normally distributed. This verifies what we suspected.\n\n#### This data may be normally distributed. :-)","7ebaff68":"### Let's plot the distribution of the number of errors per day across Machine.","707b4519":"There is no missing data.","e015c638":"Four types components are replaced almost in the same numbers."}}