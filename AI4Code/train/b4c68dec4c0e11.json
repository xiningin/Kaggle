{"cell_type":{"0db56d37":"code","7f58c9d0":"code","0c16791f":"code","e196e432":"code","ecd92d9f":"code","635f0251":"code","dddf4027":"code","f1bba105":"code","8afe78c1":"code","6df2268c":"code","9f48a68f":"code","14dfb45d":"code","ee3afba1":"code","2618f365":"code","ba0df59c":"code","2887004e":"code","3fec32b0":"code","4f8b4d49":"code","82162a22":"code","40194a29":"code","1cf3e7ec":"code","cc11d271":"code","01b240e7":"code","b076d4c9":"code","278a387d":"code","bd37b272":"code","7f193615":"code","1003fa09":"code","fdc1b826":"code","4dd8ef36":"code","991947bf":"code","33088793":"code","f459fdd0":"code","d449eb9d":"code","5739b0fc":"code","aed7776a":"code","1f55da71":"markdown","23594c4d":"markdown","c8b57955":"markdown","c8399930":"markdown","e10bb78c":"markdown","2e5e7432":"markdown","02ad0aa5":"markdown","89234681":"markdown","a1c85685":"markdown","314039a9":"markdown","f66036f2":"markdown","faa74953":"markdown","f6c95c3e":"markdown","622cf8b3":"markdown","3358de7c":"markdown","ac0187f9":"markdown","e38288ea":"markdown","e5601564":"markdown","5a94c5d9":"markdown","2f2ae2b1":"markdown","a2e62f39":"markdown"},"source":{"0db56d37":"import numpy as np\nimport pandas as pd\n\ndf = pd.read_csv(\"..\/input\/adult.csv\")\ndf.head()","7f58c9d0":"df.dtypes","0c16791f":"df.isnull().sum()","e196e432":"df.columns.isna()","ecd92d9f":"df.isin(['?']).sum()","635f0251":"df = df.replace('?', np.NaN)\ndf.head()","dddf4027":"df = df.dropna()\ndf.head()","f1bba105":"df['income'] = df['income'].map({'<=50K':0, '>50K':1})\ndf.income.head()","8afe78c1":"numerical_df = df.select_dtypes(exclude=['object'])\nnumerical_df.columns","6df2268c":"import seaborn as sns\nimport matplotlib.pyplot as plt","9f48a68f":"plt.hist(df['age'], edgecolor='black')\nplt.title('Age Histogram')\nplt.axvline(np.mean(df['age']), color='yellow', label='average age')\nplt.legend()","14dfb45d":"age50k = df[df['income']==1].age\nagel50k = df[df['income']==0].age\n\nfig, axs = plt.subplots(2, 1)\n\naxs[0].hist(age50k, edgecolor='black')\naxs[0].set_title('Distribution of Age for Income > 50K')\n\naxs[1].hist(agel50k, edgecolor='black')\naxs[1].set_title('Distribution of Age for Income <= 50K')\nplt.tight_layout()","ee3afba1":"df['marital.status'].unique()","2618f365":"ax = sns.countplot(df['marital.status'], hue=df['income'])\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nplt.tight_layout()","ba0df59c":"df['marital.status'] = df['marital.status'].replace(['Widowed', 'Divorced', 'Separated', 'Never-married'], 'single')\n\ndf['marital.status'] = df['marital.status'].replace(['Married-spouse-absent', 'Married-civ-spouse', 'Married-AF-spouse'], 'married')","2887004e":"categorical_df = df.select_dtypes(include=['object'])\ncategorical_df.columns","3fec32b0":"sns.countplot(df['marital.status'], hue=df['income'])","4f8b4d49":"from sklearn.preprocessing import LabelEncoder\nenc = LabelEncoder()","82162a22":"ax = sns.countplot(df['income'], hue=df['race'])\nax.set_title('')","40194a29":"categorical_df = categorical_df.apply(enc.fit_transform)\ncategorical_df.head()","1cf3e7ec":"df = df.drop(categorical_df.columns, axis=1)\ndf = pd.concat([df, categorical_df], axis=1)\ndf.head()","cc11d271":"sns.factorplot(data=df, x='education', y='hours.per.week', hue='income', kind='point')","01b240e7":"sns.FacetGrid(data=df, hue='income', size=6).map(plt.scatter, 'age', 'hours.per.week').add_legend()","b076d4c9":"plt.figure(figsize=(15,12))\ncor_map = df.corr()\nsns.heatmap(cor_map, annot=True, fmt='.3f', cmap='YlGnBu')","278a387d":"from sklearn.model_selection import train_test_split\n\nX = df.drop('income', axis=1)\ny = df['income']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=24)","bd37b272":"from sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(n_estimators=100, random_state=24)\nclf.fit(X_train, y_train)","7f193615":"y_pred = clf.predict(X_test)\nfrom sklearn.metrics import accuracy_score\n\nprint(\"Random Forests accuracy\", accuracy_score(y_test, y_pred))","1003fa09":"from sklearn.tree import DecisionTreeClassifier\n\ndtree = DecisionTreeClassifier(criterion='gini', random_state=21, max_depth=10)\n\ndtree.fit(X_train, y_train)\ntree_pred = dtree.predict(X_test)\n\nprint(\"Decision Tree accuracy: \", accuracy_score(y_test, tree_pred))","fdc1b826":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV, KFold\n\nn_estimators = np.arange(100, 1000, 100)\nmax_features = np.arange(1, 10, 1)\nmin_samples_leaf = np.arange(2, 10, 1)\nkfold = KFold(n_splits = 3)\nstart_grid = {\n    'n_estimators': n_estimators,\n    'max_features': max_features,\n    'min_samples_leaf': min_samples_leaf,\n    }\n\nrf = RandomForestClassifier()\n\ntest_rf = RandomizedSearchCV(estimator=rf, param_distributions=start_grid, cv=kfold)\nprint(start_grid)","4dd8ef36":"'''\nCommented out since takes a long time to run. \n\n------------------------------\nOPTIMIZED PARAMETERS:\nmax_features = 3\nmin_samples_leaf = 5\nn_estimators = 100\n------------------------------\n\n\ntest_rf.fit(X_train, y_train)\ntest_rf.best_params_\n'''","991947bf":"'''\nCommented out since takes about 25 minutes to run\n----------------------------------\nOPTIMIZED HYPERPARAMETERS:\n\nmax_features = 3\nmin_samples_leaf = 3\nn_estimators = 450\n-----------------------------------\n\nkfold_gs = KFold(n_splits=3)\nn_estimators = np.arange(100, 500, 50)\nmax_features = np.arange(1, 5, 1)\nmin_samples_leaf = np.arange(2, 5, 1)\n\ngs_grid = {\n    'n_estimators': n_estimators,\n    'max_features': max_features,\n    'min_samples_leaf': min_samples_leaf\n}\n\ntest_grid = GridSearchCV(estimator = rf, param_grid=gs_grid, cv=kfold_gs)\nres = test_grid.fit(X_train, y_train)\nprint(res.best_params_)\nprint(res.best_score_)\n'''","33088793":"final_model = RandomForestClassifier(n_estimators=450, min_samples_leaf=3, max_features=3, random_state=24)\nfinal_model.fit(X_train, y_train)","f459fdd0":"predictions = final_model.predict(X_test)\nprint(accuracy_score(y_test, predictions))\n","d449eb9d":"from sklearn.metrics import roc_curve, auc\nn_estimators = np.arange(100, 1000, 100)\n\ntrain_results = []\ntest_results = []\nfor n_est in n_estimators:\n   rf = RandomForestClassifier(n_estimators = n_est)\n   rf.fit(X_train, y_train)\n\n   train_pred = rf.predict(X_train)\n\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   train_results.append(roc_auc)\n\n   y_pred = rf.predict(X_test)\n\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   test_results.append(roc_auc)\n\nfrom matplotlib.legend_handler import HandlerLine2D\n\nline1, = plt.plot(n_estimators, train_results, 'b', label='Train AUC')\nline2, = plt.plot(n_estimators, test_results, 'r', label='Test AUC')\n\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\n\nplt.ylabel('AUC score')\nplt.xlabel('n_estimators')\n","5739b0fc":"from sklearn.metrics import roc_curve, auc\nmax_features = np.arange(1, 10, 1)\n\ntrain_results = []\ntest_results = []\nfor max_f in max_features:\n   rf = RandomForestClassifier(max_features=max_f)\n   rf.fit(X_train, y_train)\n\n   train_pred = rf.predict(X_train)\n\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   train_results.append(roc_auc)\n\n   y_pred = rf.predict(X_test)\n\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   test_results.append(roc_auc)\n\nfrom matplotlib.legend_handler import HandlerLine2D\n\nline1, = plt.plot(max_features, train_results, 'b', label='Train AUC')\nline2, = plt.plot(max_features, test_results, 'r', label='Test AUC')\n\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\n\nplt.ylabel('AUC score')\nplt.xlabel('max_features')\n","aed7776a":"from sklearn.metrics import roc_curve, auc\nmin_samples_leafs = np.arange(2, 10, 1)\n\ntrain_results = []\ntest_results = []\nfor min_samples_leaf in min_samples_leafs:\n   rf = RandomForestClassifier(min_samples_leaf=min_samples_leaf)\n   rf.fit(X_train, y_train)\n\n   train_pred = rf.predict(X_train)\n\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   train_results.append(roc_auc)\n\n   y_pred = rf.predict(X_test)\n\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   test_results.append(roc_auc)\n\nfrom matplotlib.legend_handler import HandlerLine2D\n\nline1, = plt.plot(min_samples_leafs, train_results, 'b', label='Train AUC')\nline2, = plt.plot(min_samples_leafs, test_results, 'r', label='Test AUC')\n\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\n\nplt.ylabel('AUC score')\nplt.xlabel('min samples leaf')\n\n","1f55da71":"#### n_estimators","23594c4d":"# Adult Data Income Classification Notebook","c8b57955":"#### Inferences: \n    1. Maximum people between the age of 25 to 80 earn more than 50K as income\n    2. Most people which work atleast 36 to 70 hours a week earn more than 50K\n    3. Most people under the age of 20 earn less than as m50K income","c8399930":"### 1. Data Preprocessing and Visualization","e10bb78c":"#### Encoding categorical variables numerically for classification ","2e5e7432":"The previous Random Forest Classifier without tuning gave an accuracy score of 0.851\nThe tuned model gives an accuracy score of 0.86\n\nBy tuning the model, we are able to get an improvement of 0.01 or 1%.","02ad0aa5":"#### Methodology\nFirst we do a Randomized Search to narrow down the possibilites and then perform a Grid Search to further optimize the model. This approach is more suited since directly running a Grid Search is computationally intensive.\n\nI found this article about Random and Grid Search particularly useful: https:\/\/www.kaggle.com\/willkoehrsen\/intro-to-model-tuning-grid-and-random-search\n\n#### 1. Randomized Search  ","89234681":"#### Inference:\n\nMarried people are more likely to earn more than 50K as income","a1c85685":"### Appendix\n\nThe appendix has graphs for when the hyperparameters are under-fitting or over-fitting. \nThis can be used when determining the range of values for the hyperparameters. \n\nAUC (Area Under Curve) is used as the evaluation metric. For binary classification problems, AUC is a good evaluation metric.\n\n\nThis article explains how hyperparameters should be tuned for Random Forest:\nhttps:\/\/medium.com\/all-things-ai\/in-depth-parameter-tuning-for-random-forest-d67bb7e920d \n\n(I have used the code from this article to visualize overfitting and underfitting in training and testing case.)","314039a9":"Both the Random Forest and Decision Tree return similar prediction accuracy scores. \nHowever, Random Forest is marginally better and thus, it is the selected model. \n\nWe will now optimize the Random Forest Classifier by tuning the Hyperparameters.","f66036f2":"Checking for null and\/or missing values","faa74953":"#### min_samples_leaf\n\nThis is a case of underfitting. Increasing this value can cause underfitting.","f6c95c3e":"The Goal is to predict whether a person has an income of more than 50K a year or not. This is basically a binary classification problem where a person is classified into the >50K group or <=50K group. I have used Random Forests and Decision Tree to tackle this problem. \nThe dataset is taken from the UCI Machine Learning Repository. The link to the same is the following: https:\/\/archive.ics.uci.edu\/ml\/datasets\/census+income\n### This Notebook covers the following aspects:\n   #### 1. Data Preprocessing and Visualization\n   #### 2. Classification Task\n   #### 3. Hyperparameter Tuning\n   #### 4. Building the Final Model\n   #### Appendix - Additional Information and graphs about hyperparameter tuning of Random Forests","622cf8b3":"Mapping the income labels numerically","3358de7c":"### 3. Hyperparameter Tuning\n\nThe random forest hyperparameters we will tune are the following: \n\n1. n_estimators: represents the number of trees in the forest. More trees translates to better learning from the data, however at the cost of performance. Thus, a careful consideration must be placed on what is the optimal value.\n\n2. max_features: the number of features to consider before making a split. A high value causes overfitting. Thus, an optimized value must be found.\n\n3. min_samples_leaf: the minimum number of samples needed for a node to be considered a leaf node. Increasing this value can cause underfitting. \n\nMore about this in the Appendix.","ac0187f9":"#### max_features\n\nA case of overfitting. It is quite unexpected that the model is over-fitting for all values of max_features. However, the scikit-learn documentation states that until a valid parition node is not found, the splitting does not stop even if it exceeds the value of max_features features.","e38288ea":"### 2. Classification Task","e5601564":"#### Inferences:\n\nFor Income > 50K, Age is almost normally distributed\n\nFor Income <=50K, Age is positively skewed. More people in the 20s and 30s have income <= 50K.","5a94c5d9":"### 4. Building the Model","2f2ae2b1":"#### 2. Grid Search","a2e62f39":"#### Converting marital.status to 2 categories\n\nIt seems better to reduce the number of categories for marital status to better visualize the effect of marital status on income. \nWe need to convert the following into 2 distinct categories namely, \"married\" and \"single\""}}