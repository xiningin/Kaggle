{"cell_type":{"951f61ae":"code","3368330c":"code","22485a44":"code","0c7b2e8e":"code","c3728dad":"code","397791b6":"code","3b75d9bb":"code","b77b74b8":"markdown","88204c24":"markdown","46abdeb8":"markdown"},"source":{"951f61ae":"import numpy as np \nimport pandas as pd \nimport os\nimport math\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import cohen_kappa_score","3368330c":"xtrain = pd.read_csv('..\/input\/liverpool-ion-switching\/train.csv')\nxtest = pd.read_csv('..\/input\/liverpool-ion-switching\/test.csv')","22485a44":"# add group info\nn_groups = 100\nxtrain[\"group\"] = 0\nfor i in range(n_groups):\n    ids = np.arange(i*50000, (i+1)*50000)\n    xtrain.loc[ids,\"group\"] = i\n    \nn_groups = 40\nxtest[\"group\"] = 0\nfor i in range(n_groups):\n    ids = np.arange(i*50000, (i+1)*50000)\n    xtest.loc[ids,\"group\"] = i    ","0c7b2e8e":"# min-max standarization\nxtrain['signal_2'] = 0\nxtest['signal_2'] = 0\n\nn_groups = 100\nfor i in range(n_groups):\n    sub = xtrain[xtrain.group == i]\n    signals = sub.signal.values\n    imax, imin = np.max(signals), np.min(signals)\n    signals = (signals - np.min(signals))\/(np.max(signals) - np.min(signals))\n    signals = signals*(imax-imin)\n    xtrain.loc[sub.index,\"signal_2\"] = [0,] +list(np.array(signals[:-1]))\n    \nn_groups = 40\nfor i in range(n_groups):\n    sub = xtest[xtest.group == i]\n    signals = sub.signal.values\n    imax, imin = np.max(signals), np.min(signals)\n    signals = (signals - np.min(signals))\/(np.max(signals) - np.min(signals))\n    signals = signals*(imax-imin)\n    xtest.loc[sub.index,\"signal_2\"] = [0,] +list(np.array(signals[:-1]))","c3728dad":"# min-max standarization\nxtrain['signal_3'] = 0\nxtest['signal_3'] = 0\n\nn_groups = 100\nfor i in range(n_groups):\n    sub = xtrain[xtrain.group == i]\n    signals = sub.signal.values\n    mx, mv = signals.mean(), signals.std()\n    signals = (signals - mx)\/mv\n    xtrain.loc[sub.index,\"signal_3\"] = [0,] +list(np.array(signals[:-1]))\n    \nn_groups = 40\nfor i in range(n_groups):\n    sub = xtest[xtest.group == i]\n    signals = sub.signal.values\n    mx, mv = signals.mean(), signals.std()\n    signals = (signals - mx)\/mv\n    xtest.loc[sub.index,\"signal_3\"] = [0,] +list(np.array(signals[:-1]))","397791b6":"xtrain['fold'] = xtrain.group \/\/ 10\nmvalid = np.zeros((xtrain.shape[0],1))\nmfull = np.zeros((xtest.shape[0],1))\n\n# features to use\nfeature_list = ['signal_2', 'signal_3']","3b75d9bb":"for fold in range(10):\n    id0 = np.where(xtrain.fold != fold)[0]\n    id1 = np.where(xtrain.fold == fold)[0]\n    \n    x0 = xtrain[feature_list].iloc[id0]\n    x1 = xtrain[feature_list].iloc[id1]\n    y0 = xtrain[['open_channels']].iloc[id0]\n    y1 = xtrain[['open_channels']].iloc[id1]\n    \n    model = Ridge(alpha= 2)\n    model.fit(x0, y0)\n    \n    xpred = np.clip(model.predict(x1), 0, 10).astype(int)\n    mvalid[id1,:] = xpred\n    print(cohen_kappa_score(xpred, y1, weights = 'quadratic'))\n    \nprint('final')\nprint(cohen_kappa_score(mvalid, xtrain[['open_channels']], weights = 'quadratic'))","b77b74b8":"# Data","88204c24":"# FE","46abdeb8":"# Model"}}