{"cell_type":{"01b090b3":"code","95f2362d":"code","131c764a":"code","d9dea3e6":"code","68e92b3c":"code","779a592a":"code","0926184a":"code","533fc242":"code","b4ef8622":"code","eb9d36e7":"code","a0a73930":"code","937cdfad":"code","f6dee937":"code","dc552c71":"code","125113c9":"markdown","09dac2c3":"markdown","c953ff7b":"markdown","0a2539f0":"markdown","3c8a54f1":"markdown","ad3e927d":"markdown","4dd15a3b":"markdown","feee8698":"markdown","8916c500":"markdown","339ce80a":"markdown","874c0207":"markdown","521cedf8":"markdown","fd1b5895":"markdown","3a46e458":"markdown"},"source":{"01b090b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","95f2362d":"data = pd.read_csv('..\/input\/fifa19\/data.csv')","131c764a":"data","d9dea3e6":"data.columns","68e92b3c":"new_data = data[['Name','Age','Nationality','Overall','Potential','Club','Value','Preferred Foot','Weak Foot','Skill Moves','Position','BallControl']]","779a592a":"df = new_data.set_index('Club')\ndf","0926184a":"df1 = df.loc[['FC Barcelona','Juventus','Paris Saint-Germain',\n              'Manchester United','Manchester City','Chelsea',\n              'Atl\u00e9tico Madrid','FC Bayern M\u00fcnchen','Real Madrid',\n             'Lazio','Inter','Liverpool','Tottenham Hotspur','Milan']]\ndf1","533fc242":"df2 = df1.groupby(by = 'Club').mean()\ndf2","b4ef8622":"df2['Overall'] = df2['Overall'].astype(int)\ndf2['Potential'] = df2['Potential'].astype(int)\ndf2['Age'] = df2['Age'].astype(int)\ndf2['Skill Moves'] = df2['Skill Moves'].astype(int)\ndf2['BallControl'] = df2['BallControl'].astype(int)\ndf2","eb9d36e7":"fig,ax = plt.subplots(figsize = (10,7))\nchart = sns.barplot(x = df2.index , y = df2['Age'])\nchart.set_xticklabels(chart.get_xticklabels() , rotation = 45)\nplt.title('Average age of squad' , pad = 20)\nplt.xlabel('Club' , labelpad = 20)\nplt.ylabel('Age' , labelpad = 20)","a0a73930":"fig,ax = plt.subplots(figsize = (10,7))\nchart = sns.barplot(x = df2.index , y = df2['Age'])\nchart.set_xticklabels(chart.get_xticklabels() , rotation = 45)\nplt.title('Average age of squad' , pad = 20)\nplt.xlabel('Club' , labelpad = 20)\nplt.ylabel('Age' , labelpad = 20)\nfor p in chart.patches:\n        chart.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.show()","937cdfad":"fig,ax = plt.subplots()\nfig1 = ax.bar(df2.index , df2['Potential'])\nfig2 = ax.bar(df2.index , df2['Overall'])\nplt.gcf()\nplt.xticks(rotation = 90)","f6dee937":"x = np.arange(len(df2.index))\nfig,ax = plt.subplots(figsize = (16,8))\nbar_width = 0.3\n\nb1 = ax.bar(x , df2['Overall'] , width = bar_width)\nb2 = ax.bar(x + bar_width , df2['Potential'] , width = bar_width)\nax.set_xticks(x + bar_width\/2)\nax.set_xticklabels(df2.index)\nplt.xticks(rotation = 45)\nax.set_title('Ratings comparison' , pad = 20)\nplt.legend(['Overall' , 'Potential'])\nplt.xlabel('Club')\nplt.ylabel('Ratings' , labelpad = 20)\nplt.ylim(0,130)\ndef autolabel(figure , xpos = 'center'):\n    \"\"\"\n    Attach a text label above each bar in *fig*, displaying its height.\n\n    *xpos* indicates which side to place the text w.r.t. the center of\n    the bar. It can be one of the following {'center', 'right', 'left'}.\n    \"\"\"\n    xpos = xpos.lower()\n    ha = {'center' : 'center' , 'left' : 'left' , 'right' : 'right'}\n    offset = {'center' : 0.5 , 'left' : 0.43 , 'right' : 0.57}\n    \n    for fig in figure :\n        height = fig.get_height()\n        ax.text(fig.get_x() + fig.get_width()*offset[xpos] , 1.01*height,\n               '{}'.format(height) , ha = ha[xpos] , va = 'bottom')\n\nautolabel(b1)\nautolabel(b2)","dc552c71":"x = np.arange(len(df2.index))\nfig,ax = plt.subplots(figsize = (16,8))\nwidth = 0.4\n\nb1 = ax.bar(x , df2['Skill Moves'] , width = width)\nb2 = ax.bar(x + width, df2['Weak Foot'] , width = width)\nax.set_xticks(x+width\/2)\nax.set_xticklabels(df2.index)\nplt.xticks(rotation = 45)\nplt.legend(['Skill Moves' , 'Weak Foot'])\nplt.title('Skills and Weak Foot' , pad = 10)\nplt.xlabel('Club' , labelpad = 20)\nplt.ylabel('Ratings' , labelpad = 20)","125113c9":"#  **loading the data file**","09dac2c3":"No surprises here :)","c953ff7b":"# Simple viz using Seaborn and Matplotlib","0a2539f0":"Let's compare Overall and Potential ratings of Clubs","3c8a54f1":"looks like Ronaldo's Juve & Messi's Barca are dominating :)","ad3e927d":"Let's calculate average age of the clubs(squad)!","4dd15a3b":"computing mean for visualization simplicity","feee8698":"now, we got to know why juventus is always called as 'old lady' :|","8916c500":"Doesn't look beautiful right?....","339ce80a":"selecting top clubs ","874c0207":"# Selecting,Indexing,Grouping","521cedf8":"where's the value of every bar? :(","fd1b5895":"Let's dive into ball control and skills ","3a46e458":"**selecting specific columns**"}}