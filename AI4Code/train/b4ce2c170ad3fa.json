{"cell_type":{"7b0f0d30":"code","d1c9b086":"code","6080b30c":"code","f1907962":"code","620fc9ef":"code","8402c112":"code","9769525c":"code","96c0365f":"code","414fcecc":"code","3d5a0ebe":"code","73a53013":"code","0b441c7a":"code","7d3f1158":"markdown","d2d18026":"markdown","62e7dcfe":"markdown"},"source":{"7b0f0d30":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os, json\nfrom pandas.io.json import json_normalize\nimport lightgbm as lgb\nfrom sklearn.feature_selection import RFE\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d1c9b086":"# configurations\nFILE_DIR = \"..\/input\"\nfile_name = \"train.csv\"\nnrows = None\nJSON_COLS_TO_PARSE = ['device', 'geoNetwork', 'totals', 'trafficSource']\nfile_path = os.path.join(FILE_DIR, file_name)","6080b30c":"# data load\ndf = pd.read_csv(file_path,\n    converters={column: json.loads for column in JSON_COLS_TO_PARSE}, \n    dtype={'fullVisitorId': 'str'},  # Important!!\n    nrows=nrows) ","f1907962":"df.info()","620fc9ef":"#json parsing\nfor cols in JSON_COLS_TO_PARSE:\n    column_as_df = json_normalize(df[cols])\n    column_as_df.columns = [f\"{cols}_{subcolumn}\" for subcolumn in column_as_df.columns]\n    df = df.drop(cols, axis=1).merge(column_as_df, right_index=True, left_index=True)\n","8402c112":"df.info()","9769525c":"# select columns to transform\n\n# numeric cols\nnumeric_cols_to_transform = ['totals_hits'\n                ,'totals_pageviews'\n                ,'visitNumber'\n                ,'totals_newVisits'\n                ,'totals_bounces'\n                ,'totals_transactionRevenue']\n#object cols\nobj_cols_to_transform = list(df.select_dtypes(include=['object', 'bool']).columns)\n","96c0365f":"# transfer numeric columns as float\ndf[numeric_cols_to_transform] = df[numeric_cols_to_transform].fillna(0)\nfor col in numeric_cols_to_transform:\n    df[col] = df[col].astype('float')\n                        \n# transfer object columns as category cols\nfor col in obj_cols_to_transform:\n    df[col] =  df[col].astype('category').cat.codes","414fcecc":"df.info()","3d5a0ebe":"# split train and target variables\ntrain = df.drop('totals_transactionRevenue', axis=1)\ntarget = df.totals_transactionRevenue","73a53013":"# Feature importance\n\n#lightGBM model fit\ngbm = lgb.LGBMRegressor()\ngbm.fit(train, target)\ngbm.booster_.feature_importance()\n\n# importance of each attribute\nfea_imp_ = pd.DataFrame({'cols':train.columns, 'fea_imp':gbm.feature_importances_})\nfea_imp_.loc[fea_imp_.fea_imp > 0].sort_values(by=['fea_imp'], ascending = False)\n","0b441c7a":"#Recursive Feature Elimination(RFE)\n\n# create the RFE model and select 10 attributes\nrfe = RFE(gbm, 10)\nrfe = rfe.fit(train, target)\n\n# summarize the selection of the attributes\nprint(rfe.support_)\n\n# summarize the ranking of the attributes\nfea_rank_ = pd.DataFrame({'cols':train.columns, 'fea_rank':rfe.ranking_})\nfea_rank_.loc[fea_rank_.fea_rank > 0].sort_values(by=['fea_rank'], ascending = True)\n","7d3f1158":"**Feature Importance**","d2d18026":"**Select Features Before Model Building (LightGBM):**  \nFeature selection methods from  scikit-learn Python library.\n\n1) Feature Importance  \n2)  Recursive Feature Elimination (RFE) ","62e7dcfe":"**Recursive Feature Elimination(RFE)**"}}