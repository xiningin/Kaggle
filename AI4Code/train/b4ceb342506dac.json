{"cell_type":{"00ea0de8":"code","a36b8aff":"code","e07fc8c5":"code","92f1b897":"code","72bc51a4":"code","ad88e885":"code","b60c0722":"code","ce9ab0ca":"code","e80ea621":"code","b27229c1":"code","fa48c205":"code","a7ba7e35":"code","9891586d":"code","4be21daa":"code","6fb3df6f":"code","718ba682":"code","993ba02b":"code","fb3242d2":"code","4e9a4c7c":"markdown"},"source":{"00ea0de8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a36b8aff":"train_df = pd.read_csv(\"..\/input\/data-boot-camp-challenge\/train.csv\")\nsubmission_test_df = pd.read_csv(\"..\/input\/data-boot-camp-challenge\/test.csv\")","e07fc8c5":"#Get the number of rows and columns for each df\nprint(f\"train is: {len(train_df)}\")\nprint(f\"test is: {len(submission_test_df)}\")\nprint(f\"train shape is: {train_df.shape}\")\nprint(f\"test shape is: {submission_test_df.shape}\")","92f1b897":"print(train_df.columns)\nprint(submission_test_df.columns)","72bc51a4":"train_df","ad88e885":"#Remove PassengeriD\n#Remove Name\n\n\ntrain_df = train_df[['PassengerId','Survived','Name','Pclass','Sex', 'Age', 'SibSp', 'Parch','Ticket',\n       'Fare', 'Cabin', 'Embarked']]\ntrain_df = train_df.copy()\n#12\n\n#Replace NaN values in Embarked\ntrain_df['Embarked'] = train_df['Embarked'].astype(str)\ntrain_df[\"Embarked\"] = train_df[\"Embarked\"].map(lambda x: \"S\" if \"S\" in x \\\n                                           else \"C\" if \"C\" in x \\\n                                           else \"Q\" if \"Q\" in x \\\n                                           else \"X\")\n\n#Replace NaN values for Age as the mean\nmean_age = train_df[\"Age\"].mean()\ntrain_df[\"Age\"].fillna(mean_age, inplace=True)\n\n#Replace NaN values for Fare as the mean\nmedian_fare = train_df[\"Fare\"].median()\ntrain_df[\"Fare\"].fillna(mean_age, inplace=True)\n\n#Reformat the cabin, if contains \"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\", or else \"Z\"\ntrain_df['Cabin'] = train_df['Cabin'].astype(str)\ntrain_df[\"Cabin\"] = train_df[\"Cabin\"].map(lambda x: \"A\" if \"A\" in x \\\n                                           else \"B\" if \"B\" in x \\\n                                           else \"C\" if \"C\" in x \\\n                                           else \"D\" if \"D\" in x \\\n                                           else \"E\" if \"E\" in x \\\n                                           else \"F\" if \"F\" in x \\\n                                           else \"G\" if \"G\" in x \\\n                                           else \"X\")\n\n#convert Sex to male = 1, female =0\ntrain_df['Sex'] = train_df['Sex'].astype(str)\ntrain_df[\"Sex\"] = train_df[\"Sex\"].map(lambda x: \"0\" if \"female\" in x \\\n                                           else \"1\" if \"male\" in x \\\n                                           else \"2\")\ntrain_df['Sex'] = train_df['Sex'].astype(int)\n#Replace unkown Deck and Room with Z and 00\n\ntrain_df.shape","b60c0722":"train_df.head()","ce9ab0ca":"train_df.shape","e80ea621":"X = train_df\ny = train_df[\"Survived\"]\nX = X.drop([\"Survived\",\"Name\",\"Ticket\"], axis=1)\n\nX.head()","b27229c1":"X = pd.get_dummies(data=X, columns=['Cabin', 'Embarked'])\nX.columns","fa48c205":"X.info()","a7ba7e35":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=5)\nscaler = StandardScaler().fit(X_train)\nX_train = scaler.transform(X_train)\nX.shape","9891586d":"from sklearn.linear_model import LogisticRegression\n#classifier = LogisticRegression(solver=\"liblinear\")\n\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train_scaled, y_train)\n\nclassifier.fit(X_train,y_train)\nprint(\"Train:\", classifier.score(X_train, y_train))","4be21daa":"submission_test_df.shape","6fb3df6f":"X_submit = submission_test_df\n\nX_submit = X_submit[['PassengerId','Name','Pclass','Sex', 'Age', 'SibSp', 'Parch','Ticket',\n       'Fare', 'Cabin', 'Embarked']]\n\n#11\n\n#Replace NaN values in Embarked\nX_submit['Embarked'] = X_submit['Embarked'].astype(str)\nX_submit[\"Embarked\"] = X_submit[\"Embarked\"].map(lambda x: \"S\" if \"S\" in x \\\n                                           else \"C\" if \"C\" in x \\\n                                           else \"Q\" if \"Q\" in x \\\n                                           else \"\")\n\n#Replace NaN values for Age as the mean\nmean_age = X_submit[\"Age\"].mean()\nX_submit[\"Age\"].fillna(mean_age, inplace=True)\n\n#Replace NaN values for Fare as the mean\nmedian_fare = X_submit[\"Fare\"].median()\nX_submit[\"Fare\"].fillna(mean_age, inplace=True)\n\n#Reformat the cabin, if contains \"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\", or else \"Z\"\nX_submit['Cabin'] = X_submit['Cabin'].astype(str)\nX_submit[\"Cabin\"] = X_submit[\"Cabin\"].map(lambda x: \"A\" if \"A\" in x \\\n                                           else \"B\" if \"B\" in x \\\n                                           else \"C\" if \"C\" in x \\\n                                           else \"D\" if \"D\" in x \\\n                                           else \"E\" if \"E\" in x \\\n                                           else \"F\" if \"F\" in x \\\n                                           else \"G\" if \"G\" in x \\\n                                           else \"X\")\n\nprint(X_submit.shape)\n#11\n\n#convert Sex to male = 1, female =0\nX_submit['Sex'] = X_submit['Sex'].astype(str)\nX_submit[\"Sex\"] = X_submit[\"Sex\"].map(lambda x: \"0\" if \"female\" in x \\\n                                           else \"1\" if \"male\" in x \\\n                                           else \"2\")\nX_submit['Sex'] = X_submit['Sex'].astype(int)\n\nX_submit = pd.get_dummies(data=X_submit, columns=['Cabin', 'Embarked'])\n\nprint(X_submit.shape)\n#19\n\nX_submit = X_submit.drop([\"Name\",\"Ticket\"], axis=1)\nX_submit.shape","718ba682":"X_submit['Cabin_F'] = 0\nX_submit['Embarked_X']=0\nX_submit.shape","993ba02b":"submit_predictions = classifier.predict(X_submit)\nsubmission = pd.DataFrame({\"PassengerId\": X_submit[\"PassengerId\"], \"Survived\": submit_predictions})\nprint(len(submission))\nsubmission.head()","fb3242d2":"submission.to_csv('submission.csv', index=False)","4e9a4c7c":"Assigning the target (y) as train[\"Survived\"]\nDropping the string columns and survived from X "}}