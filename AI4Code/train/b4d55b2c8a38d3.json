{"cell_type":{"66061361":"code","5baf9c0a":"code","09f335af":"code","076d05c6":"code","9e552665":"code","c7d91ddf":"code","8cddd32f":"code","8e023b19":"code","d81ba090":"code","dc6df03f":"code","7f0fc8a7":"code","8fa7892a":"code","ca238963":"code","7d9dfd46":"code","3e95c1f7":"code","55d8f600":"code","f759dcb3":"code","50f8b6b1":"code","6b6fe54a":"code","c004b8dc":"code","3fc7a5af":"code","50598a39":"code","05524fb4":"code","1e4a8642":"code","4d678124":"code","9f11a053":"code","930e6605":"code","9aa89a9e":"code","1ee256dd":"code","7715ee90":"code","b0f963da":"code","474e8426":"code","c25b3efc":"code","3734495e":"code","4a11113c":"code","c7165bb2":"code","ddfd8b7c":"code","bd4e3104":"code","36b3f67d":"code","64ad7b0f":"code","3625b390":"code","aae8d95c":"code","4aba8f93":"code","3b5417c0":"code","c8827b79":"code","ce61498b":"code","c6ab4ebd":"code","056572ff":"code","12c68107":"code","a018089a":"code","59beb722":"code","e620580c":"code","2d389bd0":"code","2c86f3b9":"code","2c492488":"code","1bc826a7":"code","2dd70699":"code","1169c2c6":"code","0fd7357b":"code","4d88e7ca":"code","9e749d0c":"code","30cbd917":"code","567d862a":"code","55a257e3":"code","cb9e819e":"code","d889622c":"code","0c94bc2b":"code","1009020f":"code","e9de7624":"code","7cb6689a":"code","0ed46168":"code","a4acf2f5":"code","69791c09":"code","751558fd":"code","314c54ce":"code","03a97357":"code","16d60e5c":"code","e6685c54":"code","977dee81":"code","dc2eba59":"code","3b664cb7":"code","8301f444":"code","809aa858":"code","9a821365":"code","efac77a2":"code","9aa490a0":"code","77eafd86":"markdown","832cdc61":"markdown","00cb9525":"markdown","0e1956c8":"markdown","3f8b9ea1":"markdown","780bf99a":"markdown","784c525d":"markdown","9f797ada":"markdown","38448c63":"markdown","18522a3c":"markdown","afa0c077":"markdown","c78325eb":"markdown","31df572f":"markdown","bfdc3df0":"markdown","613bd26a":"markdown","dfe83187":"markdown","e02851f6":"markdown","ca4496c1":"markdown"},"source":{"66061361":"# Loading packages\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Statistic lib packages\nfrom scipy import stats\nfrom scipy.stats import skew, norm\n\n# Utils packages\nimport pandasql as ps\nimport re \nimport math, string, os\nimport datetime\nfrom IPython.display import Image\n\n# Options\nimport warnings\nwarnings.filterwarnings('ignore')\npd.options.display.max_seq_items = 8000\npd.options.display.max_rows = 8000\npd.set_option('display.max_columns', None)\nimport gc\ngc.enable()","5baf9c0a":"# Loading train data\ntrain = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv')\nprint (\"Data is loaded !!\")","09f335af":"Image(url = 'https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F3258%2F820e86013d48faacf33b7a32a15e814c%2FIncreasing%20Dir%20and%20O.png?generation=1572285857588233&alt=media')","076d05c6":"# Viewing first dataset rows\ntrain.head()","9e552665":"# Viewing feature types\ntrain.dtypes","c7d91ddf":"# Viewing statistical data of numerical variables\ntrain.describe().T","8cddd32f":"# Function to create missing feature dataset\ndef percent_missing(df):\n    data = pd.DataFrame(df)\n    df_cols = list(pd.DataFrame(data))\n    dict_x = {}\n    for i in range(0, len(df_cols)):\n        dict_x.update({df_cols[i]: round(data[df_cols[i]].isnull().mean()*100,2)})\n    \n    return dict_x","8e023b19":"# Checking columns with missing data\nmissing = percent_missing(train)\ndf_miss = sorted(missing.items(), key=lambda x: x[1], reverse=True)\nprint('Percent of missing data')\ndf_miss[0:50]","d81ba090":"# Plot setup\nsns.set_style(\"white\")\nf, ax = plt.subplots(figsize=(8, 7))\nsns.set_color_codes(palette='deep')\n\n# Identifying missing values\nmissing = round(train.isnull().mean()*100,2)\nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\nmissing.plot.bar(color=\"b\")\n\n# Visual presentation\nax.xaxis.grid(False)\nax.set(ylabel=\"Percent of missing values\")\nax.set(xlabel=\"Features\")\nax.set(title=\"Percent missing data by feature\")\nsns.despine(trim=True, left=True)","dc6df03f":"# Function to handle missing data of each feature\ndef fill_na(data):\n    data['WindDirection'].fillna('unknown',inplace=True)\n    data['OffenseFormation'].fillna('unknown',inplace=True)\n    data['StadiumType'].fillna('unknown',inplace=True)\n    data['GameWeather'].fillna('unknown',inplace=True)\n    data['FieldPosition'].fillna('NA',inplace=True)\n    data['Temperature'].fillna(data['Temperature'].mean(), inplace=True)\n    data['Humidity'].fillna(data['Humidity'].mean(), inplace=True)\n    data['DefendersInTheBox'].fillna(math.ceil(data['DefendersInTheBox'].mean()),inplace=True)\n    \n# Function to group descriptions of stadium types\ndef agrupar_tipo_estadio(StadiumType):\n    outdoor       = ['Outdoor', 'Outdoors', 'Cloudy', 'Heinz Field', 'Outdor', 'Ourdoor', 'Outside', 'Outddors', 'Outdoor Retr Roof-Open', 'Oudoor', 'Bowl']\n    indoor_closed = ['Indoors', 'Indoor', 'Indoor, Roof Closed', 'Indoor, Roof Closed', 'Retractable Roof', 'Retr. Roof-Closed', 'Retr. Roof - Closed', 'Retr. Roof Closed']\n    indoor_open   = ['Indoor, Open Roof', 'Open', 'Retr. Roof-Open', 'Retr. Roof - Open']\n    dome_closed   = ['Dome', 'Domed, closed', 'Closed Dome', 'Domed', 'Dome, closed']\n    dome_open     = ['Domed, Open', 'Domed, open']\n    \n    if StadiumType in outdoor:\n        return 'outdoor'\n    elif StadiumType in indoor_closed:\n        return 'indoor_closed'\n    elif StadiumType in indoor_open:\n        return 'indoor_open'\n    elif StadiumType in dome_closed:\n        return 'dome_closed'\n    elif StadiumType in dome_open:\n        return 'dome_open'\n    else:\n        return 'unknown'\n    \n# Function to group stadium descriptions\ndef agrupar_estadio(Stadium):\n    if Stadium == 'Broncos Stadium at Mile High':\n        return 'Broncos Stadium At Mile High'\n    elif Stadium in ('CenturyField', 'CenturyLink'):\n        return 'CenturyLink Field'\n    elif Stadium == 'EverBank Field':\n        return 'Everbank Field'\n    elif Stadium in ('FirstEnergy', 'FirstEnergy Stadium', 'FirstEnergyStadium'):\n        return 'First Energy Stadium'\n    elif Stadium == 'Lambeau field':\n        return 'Lambeau Field'\n    elif Stadium == 'Los Angeles Memorial Coliesum':\n        return 'Los Angeles Memorial Coliseum'\n    elif Stadium in ('M & T Bank Stadium', 'M&T Stadium'):\n        return 'M&T Bank Stadium'\n    elif Stadium in ('Mercedes-Benz Dome', 'Mercedes-Benz Superdome'):\n        return 'Mercedes-Benz SuperDome'\n    elif Stadium in ('MetLife Stadium', 'Metlife Stadium', 'MetLife'):\n        return 'MetLife Stadium' \n    elif Stadium == 'NRG':\n        return 'NRG Stadium' \n    elif Stadium == 'Oakland-Alameda County Coliseum':\n        return 'Oakland Alameda-County Coliseum' \n    elif Stadium == 'Paul Brown Stdium':\n        return 'Paul Brown Stadium' \n    elif Stadium == 'Twickenham':\n        return 'Twickenham Stadium' \n    else:\n        return Stadium\n    \n# Function to group stadium and game location\ndef agrupar_local(Location):\n    if Location == \"Arlington, Texas\":\n        return \"Arlington, TX\"\n    elif Location in (\"Baltimore, Maryland\",\"Baltimore, Md.\"):\n        return \"Baltimore, MD\"\n    elif Location == \"Charlotte, North Carolina\":\n        return \"Charlotte, NC\"\n    elif Location == \"Chicago. IL\":\n        return \"Chicago, IL\"\n    elif Location == \"Cincinnati, Ohio\":\n        return \"Cincinnati, OH\"\n    elif Location in (\"Cleveland\",\"Cleveland Ohio\",\"Cleveland, Ohio\",\"Cleveland,Ohio\"):\n        return \"Cleveland, OH\"\n    elif Location == \"Detroit\":\n        return \"Detroit, MI\"\n    elif Location == \"E. Rutherford, NJ\" or Location == \"East Rutherford, N.J.\":\n        return \"East Rutherford, NJ\"\n    elif Location == \"Foxborough, Ma\":\n        return \"Foxborough, MA\"\n    elif Location == \"Houston, Texas\":\n        return \"Houston, TX\"\n    elif Location in (\"Jacksonville Florida\",\"Jacksonville, Fl\",\"Jacksonville, Florida\"):\n        return \"Jacksonville, FL\"\n    elif Location == \"London\":\n        return \"London, England\"\n    elif Location == \"Los Angeles, Calif.\":\n        return \"Los Angeles, CA\"\n    elif Location == \"Miami Gardens, Fla.\":\n        return \"Miami Gardens, FLA\"\n    elif Location in (\"New Orleans\",\"New Orleans, La.\"):\n        return \"New Orleans, LA\"\n    elif Location == \"Orchard Park NY\":\n        return \"Orchard Park, NY\"\n    elif Location == \"Philadelphia, Pa.\":\n        return \"Philadelphia, PA\"\n    elif Location == \"Pittsburgh\":\n        return \"Pittsburgh, PA\"\n    elif Location == \"Seattle\":\n        return \"Seattle, WA\"\n    else:\n        return Location\n    \n# Function to group the stadium turf\ndef agrupar_gramado(Turf):\n    if Turf == 'Artifical':\n        return 'Artificial'\n    \n    elif Turf in ('FieldTurf', 'Field turf'):\n        return 'Field Turf'\n\n    elif Turf in ('FieldTurf360', 'FieldTurf 360'):\n        return 'Field Turf 360'\n\n    elif Turf in ('Natural', 'Natural grass', 'Naturall Grass', 'grass', 'natural grass', 'SISGrass', 'Natural Grass'):\n        return \"Grass\"\n\n    elif Turf == \"UBU Sports Speed S5-M\":\n        return \"UBU Speed Series-S5-M\"\n\n    else:\n        return Turf\n\n# Function to group wind direction\ndef agrupa_wind_direction(WindDirection):\n    wd = str(WindDirection).upper()\n    \n    if wd == 'N' or 'FROM N' in wd:\n        return 'north'\n    if wd == 'S' or 'FROM S' in wd:\n        return 'south'\n    if wd == 'W' or 'FROM W' in wd:\n        return 'west'\n    if wd == 'E' or 'FROM E' in wd:\n        return 'east'\n    \n    if 'FROM SW' in wd or 'FROM SSW' in wd or 'FROM WSW' in wd:\n        return 'south west'\n    if 'FROM SE' in wd or 'FROM SSE' in wd or 'FROM ESE' in wd:\n        return 'south east'\n    if 'FROM NW' in wd or 'FROM NNW' in wd or 'FROM WNW' in wd:\n        return 'north west'\n    if 'FROM NE' in wd or 'FROM NNE' in wd or 'FROM ENE' in wd:\n        return 'north east'\n    \n    if 'NW' in wd or 'NORTHWEST' in wd:\n        return 'north west'\n    if 'NE' in wd or 'NORTH EAST' in wd:\n        return 'north east'\n    if 'SW' in wd or 'SOUTHWEST' in wd:\n        return 'south west'\n    if 'SE' in wd or 'SOUTHEAST' in wd:\n        return 'south east'\n\n    return 'unknown'\n\n# Function to group climate descriptions\ndef agrupar_clima(GameWeather):\n    chuva   = ['Rainy', 'Rain Chance 40%', 'Showers',\n               'Cloudy with periods of rain, thunder possible. Winds shifting to WNW, 10-20 mph.',\n               'Scattered Showers', 'Cloudy, Rain', 'Rain shower', 'Light Rain', 'Rain']\n    nublado = ['Cloudy, light snow accumulating 1-3\"', 'Party Cloudy', 'Cloudy, chance of rain',\n               'Coudy', 'Cloudy, 50% change of rain', 'Rain likely, temps in low 40s.',\n               'Cloudy and cold', 'Cloudy, fog started developing in 2nd quarter',\n               'Partly Clouidy', '30% Chance of Rain', 'Mostly Coudy', 'Cloudy and Cool',\n               'cloudy', 'Partly cloudy', 'Overcast', 'Hazy', 'Mostly cloudy', 'Mostly Cloudy',\n               'Partly Cloudy', 'Cloudy']\n    limpo   = ['Partly clear', 'Sunny and clear', 'Sun & clouds', 'Clear and Sunny',\n               'Sunny and cold', 'Sunny Skies', 'Clear and Cool', 'Clear and sunny',\n               'Sunny, highs to upper 80s', 'Mostly Sunny Skies', 'Cold',\n               'Clear and warm', 'Sunny and warm', 'Clear and cold', 'Mostly sunny',\n               'T: 51; H: 55; W: NW 10 mph', 'Clear Skies', 'Clear skies', 'Partly sunny',\n               'Fair', 'Partly Sunny', 'Mostly Sunny', 'Clear', 'Sunny']\n    neve    = ['Heavy lake effect snow', 'Snow']\n    none    = ['N\/A Indoor', 'Indoors', 'Indoor', 'N\/A (Indoors)', 'Controlled Climate']\n\n    if GameWeather in chuva:\n        return 'chuva'\n    elif GameWeather in nublado:\n        return 'nublado'\n    elif GameWeather in limpo:\n        return 'limpo'\n    elif GameWeather in neve:\n        return 'neve'\n    elif GameWeather in none:\n        return 'none'\n    else:\n        return 'none'\n    \n# Function to convert wind speed\ndef convert_wind_speed(WindSpeed):\n    ws = str(WindSpeed)\n    if ws.isdigit():\n        return int(ws)\n    if '-' in ws:\n        return int(ws.split('-')[0])\n    if ws.split(' ')[0].isdigit():\n        return int(ws.split(' ')[0])\n    if 'mph' in ws.lower():\n        return int(ws.lower().split('mph')[0])\n    else:\n        return 0\n    \n# Function to convert height from feet-inches to centimeters\ndef convert_to_cm(ft_in):\n    h_ft   = int(ft_in.split('-')[0])\n    h_inch = int(ft_in.split('-')[1])\n    h_inch += h_ft * 12\n    h_cm = round(h_inch * 2.54, 1)   \n    return h_cm\n\n# Function to convert weight in lbs to kg\ndef convert_to_kg(lbs):\n    kg = lbs * 0.45359237\n    return kg\n\n# Function to convert temperature Fahrenheit to Celsius\ndef convert_to_celsius(fah):\n    celsius = (fah - 32) * 5.0\/9.0\n    return celsius\n\n# Function to convert date features and extract day, month, year, hour, minute, second\ndef convert_data(data):\n    data['PlayerBirthDate'] = data['PlayerBirthDate'].apply(lambda x: datetime.datetime.strptime(x, \"%m\/%d\/%Y\"))\n    data['PlayerBirthDate_day'] = data['PlayerBirthDate'].dt.day.astype(int)\n    data['PlayerBirthDate_month'] = data['PlayerBirthDate'].dt.month.astype(int)\n    data['PlayerBirthDate_year'] = data['PlayerBirthDate'].dt.year.astype(int)\n\n    data['TimeSnap'] = data['TimeSnap'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n    data['TimeSnap_min'] = data['TimeSnap'].dt.minute.astype(int)\n    data['TimeSnap_seg'] = data['TimeSnap'].dt.second.astype(int)\n    \n    data['TimeHandoff'] = data['TimeHandoff'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n    data['TimeHandoff_min'] = data['TimeHandoff'].dt.minute.astype(int)\n    data['TimeHandoff_seg'] = data['TimeHandoff'].dt.second.astype(int)\n    \n    \n# Function to convert a time string in seconds\ndef str_to_seconds(time):\n    time = time.split(':')\n    sec = int(time[0])*60 + int(time[1]) + int(time[2])\/60\n    return sec\n    \n# Function to create a distribution plot for each feature\ndef plot_distribution(dataset, cols=5, width=20, height=25, hspace=0.4, wspace=0.5):\n    \"\"\"\n    Plot distributions for each column in a dataset.\n    Seaborn countplots are used for categorical data and distplots for numerical data\n\n    args:\n    ----\n    dataset {dataframe} - the data that will be plotted\n    cols {int} - how many distributions to plot for each row\n    width {int} - how wide each plot should be\n    height {int} - how tall each plot should be\n    hspace {float} - horizontal space between plots\n    wspace {float} - vertical space between plots \n    \"\"\"\n    # plot styling\n    plt.style.use('fivethirtyeight')\n    fig = plt.figure(figsize=(width, height))\n    fig.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=wspace, hspace=hspace)\n    # calculate rows needed\n    rows = math.ceil(float(dataset.shape[1]) \/ cols)\n    # create a countplot for top 20 categorical values\n    # and a distplot for all numerical values\n    for i, column in enumerate(dataset.columns):\n        ax = fig.add_subplot(rows, cols, i + 1)\n        ax.set_title(column)\n        if dataset.dtypes[column] == np.object:\n            # grab the top 10 for each countplot\n            g = sns.countplot(y=column, \n                              data=dataset,\n                              order=dataset[column].value_counts().index[:10])\n            # make labels only 20 characters long and rotate x labels for nicer displays\n            substrings = [s.get_text()[:20] for s in g.get_yticklabels()]\n            g.set(yticklabels=substrings)\n            plt.xticks(rotation=25)\n        else:\n            g = sns.distplot(dataset[column])\n            plt.xticks(rotation=25)","7f0fc8a7":"# Fix missing values\nfill_na(train)\n\n# Convert date features\nconvert_data(train)\n\n# Convert player height to cm\ntrain['PlayerHeight'] = train['PlayerHeight'].apply(convert_to_cm)\n\n# Convert player height to cm\ntrain['PlayerWeight'] = train['PlayerWeight'].apply(convert_to_kg)\n\n# Convert temperature to Celsius\ntrain['Temperature'] = train['Temperature'].apply(convert_to_celsius)\n\n# Grouping the stadium types\ntrain['StadiumType'] = train['StadiumType'].apply(agrupar_tipo_estadio)\n\n# Grouping the stadium\ntrain['Stadium'] = train['Stadium'].apply(agrupar_estadio)\n\n# Grouping locations\ntrain['Location'] = train['Location'].apply(agrupar_local)\n\n# Grouping turf\ntrain['Turf'] = train['Turf'].apply(agrupar_gramado)\n\n# Grouping wind direction\ntrain['WindDirection'] = train['WindDirection'].apply(agrupa_wind_direction)\n\n# Converting wind speed to numeric\ntrain['WindSpeed'] = train['WindSpeed'].apply(convert_wind_speed)\n\n# grouping game weather\ntrain['GameWeather'] = train['GameWeather'].apply(agrupar_clima)\n\n# Convert game time to seconds\ntrain['GameClock'] = train['GameClock'].apply(str_to_seconds)","8fa7892a":"# Pearson Correlations\ncor_mat = train.corr(method = 'pearson')\n\n# Heatmap plot\nf, ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(cor_mat,linewidths=.1,fmt= '.3f',ax=ax,square=True,cbar=True,annot=False)","ca238963":"# Definition: A unique play identifier\n# There are 22 records by PlayId\n# So there are 11 home team players and 11 home team players\ntrain['PlayId'].value_counts().head()","7d9dfd46":"# Linking NFLid and NFLidRusher\ntrain_jog = train[train['NflId'] == train['NflIdRusher']]\nprint(train_jog.shape)","3e95c1f7":"# When connecting NflId and NflIdRusher it's possible see that every play now has a unique record\ntrain_jog['PlayId'].value_counts().head()","55d8f600":"# Example the sequence of moves of a game that counted yard change (+ or -)\n# It is possible to identify that this sequence is increasing, and registered in PlayId\n# Using the 2017 GameId filter\ntrain_jog[train_jog['GameId'] == 2017090700].head(10)","f759dcb3":"# Description: The number of yards won in play (variable to be predicted)\ntrain_jog['Yards'].describe()","50f8b6b1":"# Analyzing the target variable 'Yards'\nsns.set_style(\"white\")\nsns.set_color_codes(palette='deep')\nf, ax = plt.subplots(figsize=(18, 8))\n\n# Fit a Normal Distribution\nmu, std = norm.fit(train_jog[\"Yards\"])\n\n# Checking the frequency distribution of the variable Yards\nsns.distplot(train_jog[\"Yards\"], color=\"b\", fit = stats.norm)\nax.xaxis.grid(False)\nax.set(ylabel=\"Frequency\")\nax.set(xlabel=\"Yards\")\nax.set(title=\"Yards distribution: mu = %.2f,  std = %.2f\" % (mu, std))\nsns.despine(trim=True, left=True)\n\n# Adding Skewness and Kurtosis\nax.text(x=1.1, y=1, transform=ax.transAxes, s=\"Skewness: %f\" % train_jog[\"Yards\"].skew(),\\\n        fontweight='demibold', fontsize=10, verticalalignment='top', horizontalalignment='right',\\\n        backgroundcolor='white', color='xkcd:poo brown')\nax.text(x=1.1, y=0.95, transform=ax.transAxes, s=\"Kurtosis: %f\" % train_jog[\"Yards\"].kurt(),\\\n        fontweight='demibold', fontsize=10, verticalalignment='top', horizontalalignment='right',\\\n        backgroundcolor='white', color='xkcd:dried blood')\n\nplt.show()","6b6fe54a":"# Distribution plot for each player feature\ncolumns_to_plot = ['PlayerHeight', 'PlayerWeight', 'PlayerBirthDate_year', 'PlayerCollegeName', 'JerseyNumber', 'Position']\nplot_distribution(train_jog[columns_to_plot], cols=3, width=30, height=20, hspace=0.45, wspace=0.5)","c004b8dc":"# Display scatterPlot between Player Height to Yards\nplt.figure(figsize=(18, 8))\nsns.regplot(x='PlayerHeight', y='Yards', data=train_jog, color='b', x_jitter=1)\nplt.xlabel('Player Height')\nplt.ylabel('Yards')\nplt.title('Player Height vs Yards', fontsize=20)\nplt.show()","3fc7a5af":"# Display scatterPlot between Player Weight to Yards\nplt.figure(figsize=(18, 8))\nsns.regplot(x='PlayerWeight', y='Yards', data=train_jog, color='b', x_jitter=1)\nplt.xlabel('Player Weight')\nplt.ylabel('Yards')\nplt.title('Player Weight vs Yards', fontsize=20)\nplt.show()","50598a39":"# Display scatterPlot between Player Height to Player Weight\n# It's a positive regression relationship where the taller the player, the heavier the player\nplt.figure(figsize=(18, 8))\nsns.regplot(x='PlayerHeight', y='PlayerWeight', data=train_jog, color='g', x_jitter=1)\nplt.xlabel('Height')\nplt.ylabel('Weight')\nplt.title('Height vs Weight', fontsize=20)\nplt.show()","05524fb4":"# Checking players over 140kg\n# Found only 1 player: Akiem Hicks\n# The image below shows this player\ntrain_jog[train_jog['PlayerWeight'] >= 140.00].head()","1e4a8642":"# Yeah, this guy is big\nImage(url = 'https:\/\/radioimg.s3.amazonaws.com\/wscram\/styles\/nts_image_cover_tall_775x425\/s3\/Akiem_Hicks_6.jpg?BOAlCf3Wc4ySX4yP9hqxL4r3e6OIKdL_&itok=-QTENpoi&c=ae8001fe2a7c6e1ccd639801892a4486',width=400,height=400)","4d678124":"# Checking players under 70kg\n# Found only 1 player: JoJo Natson\n# The image below shows this player\ntrain_jog[train_jog['PlayerWeight'] <= 70.00].head()","9f11a053":"Image(url = 'https:\/\/ssl.c.photoshelter.com\/img-get2\/I0000ajxYOXxxUQg\/fit=1000x750\/g=G0000TtQ9QQoRy9c\/RAMS-CHARGERS-0923-0791.jpg',width=200,height=200)","930e6605":"# Display scatterPlot between Player Birth Date Year to Yards\nplt.figure(figsize=(18, 8))\nsns.regplot(x='PlayerBirthDate_year', y='Yards', data=train_jog, color='b', x_jitter=2)\nplt.xlabel('Year')\nplt.ylabel('Yards')\nplt.title('Player Birth Date (Year) vs Yards', fontsize=20)\nplt.show()","9aa89a9e":"# Display catPlot between Season to Yards\ng = sns.catplot(x='PlayerCollegeName', y='Yards', hue='Season', data=train_jog, height=8, aspect=2)\ng.set_xticklabels(rotation=90)","1ee256dd":"# Display scatterPlot between Jersey Number to Yards\nplt.figure(figsize=(18, 8))\nsns.regplot(x='JerseyNumber', y='Yards', data=train_jog, color='b', x_jitter=2)\nplt.xlabel('Jersey Number')\nplt.ylabel('Yards')\nplt.title('Jersey Number vs Yards', fontsize=20)\nplt.show()","7715ee90":"train_jog['Position'].value_counts()","b0f963da":"# Display catPlot between Position to Yards\ng = sns.catplot(x='Position', y='Yards', hue='Season', data=train_jog, kind=\"box\", height=8, aspect=2)\ng.set_xticklabels(rotation=90)","474e8426":"# Display linear plot between Player Weight, Position and Yards\ng = sns.lmplot(x='PlayerWeight', y='Yards', data=train_jog, \n               x_jitter=.2, col=\"Position\" , height=6, aspect=1, col_wrap=5)","c25b3efc":"# Distribution plot for each game feature\ncolumns_to_plot = ['Season', 'Week', 'Team', 'StadiumType', 'Stadium', \n                   'Location', 'Turf', 'GameClock', 'HomeTeamAbbr', 'VisitorTeamAbbr']\nplot_distribution(train_jog[columns_to_plot], cols=3, width=30, height=20, hspace=0.45, wspace=0.5)","3734495e":"# Display linear plot between Season and Yards\ng = sns.lmplot(x='Season', y='Yards', hue='Season', data=train_jog, x_jitter=.2, col=\"Season\" , height=10)","4a11113c":"# Display linear plot between Season, Week and Yards\ng = sns.lmplot(x='Week', y='Yards', hue='Season', data=train_jog, x_jitter=.2, col=\"Season\" , height=10)","c7165bb2":"# Season has a correlation of 1.0 with GameId and PlayId. Example below with 2017 and 2018\n# GameId and PlayId contain year and some more info\n# Seems to be month and day plus one identifier\n# You might need to leave the GameId and PlayId variables only with the individual indicator.\ntmp = train_jog.set_index('Season')\nprint(tmp.loc[[2017], ['GameId','PlayId']].head(1))\nprint(tmp.loc[[2018], ['GameId','PlayId']].head(1))","ddfd8b7c":"# Checking which stadium are undefined type\n# There are three stadium\n# I'll have a look to see if you have a set type for them\nq1 = \"\"\"SELECT StadiumType, Stadium\n          FROM train\n        WHERE StadiumType = 'unknown'\n        GROUP BY StadiumType, Stadium\"\"\"\nps.sqldf(q1, locals())","bd4e3104":"# To MetLife Stadium\n# I'll try to fix\nq1 = \"\"\"SELECT StadiumType, Stadium\n          FROM train\n        WHERE Stadium IN ('MetLife Stadium', 'StubHub Center', 'TIAA Bank Field')\n        GROUP BY StadiumType, Stadium\n        ORDER BY Stadium, StadiumType\"\"\"\nps.sqldf(q1, locals())","36b3f67d":"# MetLife Stadium only has OUTDOOR\n# I'll fix this, assigning outdoor\nImage(url = 'https:\/\/upload.wikimedia.org\/wikipedia\/commons\/0\/04\/Metlife_stadium_%28Aerial_view%29.jpg',width=400,height=400)","64ad7b0f":"# StubHub Center only has OUTDOOR\n# I'll fix this, assigning outdoor\nImage(url = 'https:\/\/media.bizj.us\/view\/img\/4273531\/111813stubhubcenterga0014*750xx5184-2916-0-270.jpg',width=400,height=400)","3625b390":"# Fixing a feature Stadium\ntrain_jog.loc[train_jog['Stadium'] == 'MetLife Stadium', 'StadiumType'] = 'outdoor'\ntrain_jog.loc[train_jog['Stadium'] == 'StubHub Center', 'StadiumType'] = 'outdoor'","aae8d95c":"# View of Mercedes Benz stadium where there are several types of game modes\nImage(url = 'https:\/\/cdn.vox-cdn.com\/thumbor\/FV1og2Kh9y8VwyrImv3tAM21vdM=\/0x0:2740x1824\/1200x800\/filters:focal(1151x693:1589x1131)\/cdn.vox-cdn.com\/uploads\/chorus_image\/image\/56280377\/999476412.jpg.1504558796.jpg',width=400,height=400)","4aba8f93":"# Display linear plot between Season, Week and Yards\ng = sns.lmplot(x='Week', y='Yards', hue='Season', data=train_jog, \n               x_jitter=.2, col=\"StadiumType\" , height=8, col_wrap=3)","3b5417c0":"# Display catPlot between Stadium to Yards\ng = sns.catplot(x='Stadium', y='Yards', hue='Season', data=train_jog, \n                kind=\"violin\", split=True, height=8, aspect=2)\ng.set_xticklabels(rotation=90)","c8827b79":"# Display catPlot between Location to Yards\ng = sns.catplot(x='Location', y='Yards', hue='Season', data=train_jog, \n                kind=\"violin\", split=True, height=8, aspect=2)\ng.set_xticklabels(rotation=90)","ce61498b":"# Description of the field surface\ntrain_jog.groupby('Turf').size()","c6ab4ebd":"# Display catPlot between Turf to Yards\ng = sns.catplot(x='Turf', y='Yards', hue='Season', data=train_jog, kind=\"box\", height=8, aspect=2)\ng.set_xticklabels(rotation=90)","056572ff":"# Display the distribution plot of the GameClock feature.\ng = sns.distplot(train_jog['GameClock'])","12c68107":"# Distribution plot for each Environment feature\ncolumns_to_plot = ['GameWeather', 'Temperature', 'Humidity', 'WindDirection', 'WindSpeed']\nplot_distribution(train_jog[columns_to_plot], cols=3, width=30, height=20, hspace=0.45, wspace=0.5)","a018089a":"# Display catPlot between Weather to Yards\ng = sns.catplot(x='GameWeather', y='Yards', hue='Season', data=train_jog, kind=\"box\", height=8, aspect=2)\ng.set_xticklabels(rotation=90)","59beb722":"# Display scatterPlot between Temperature to Yards\nplt.figure(figsize=(18, 8))\nsns.regplot(x='Temperature', y='Yards', data=train_jog, color='b', x_jitter=2)\nplt.xlabel('Temperature')\nplt.ylabel('Yards')\nplt.title('Temperature(Celsius) vs Yards', fontsize=20)\nplt.show()","e620580c":"# Display linear plot between Temperature, Weather and Yards\ng = sns.lmplot(x='Temperature', y='Yards', data=train_jog, \n               x_jitter=.2, col=\"GameWeather\" , height=6, aspect=1)","2d389bd0":"# Has too many records with moisture 0\n# Maybe it's better to see this\ntrain_jog['Humidity'].value_counts().head()","2c86f3b9":"g = sns.distplot(train_jog['Humidity'])","2c492488":"# Display scatterPlot between Humidity to Yards\nplt.figure(figsize=(18, 8))\nsns.regplot(x='Humidity', y='Yards', data=train_jog, color='b', x_jitter=2)\nplt.xlabel('Humidity')\nplt.ylabel('Yards')\nplt.title('Humidity vs Jardas', fontsize=20)\nplt.show()","1bc826a7":"# Display linear graph with relationship between Humidity, Weather and Yards\n# Most of humidity 0 is in NONE climate\ng = sns.lmplot(x='Humidity', y='Yards', data=train_jog, \n               x_jitter=.2, col=\"GameWeather\" , height=6, aspect=1)","2dd70699":"train_jog['WindDirection'].value_counts()","1169c2c6":"# Display linear plot with relationship between Temperature, WindDirection and Yards\ng = sns.lmplot(x='Temperature', y='Yards', data=train_jog, \n               x_jitter=.2, col=\"WindDirection\" , height=6, aspect=1, col_wrap=3)","0fd7357b":"train_jog['WindSpeed'].value_counts().head()","4d88e7ca":"# Display scatterPlot between Speed to Yards\nplt.figure(figsize=(18, 8))\nsns.regplot(x='WindSpeed', y='Yards', data=train_jog, color='b', x_jitter=2)\nplt.xlabel('Wind Speed')\nplt.ylabel('Yards')\nplt.title('Wind Speed vs Yards', fontsize=20)\nplt.show()","9e749d0c":"# Display linear plot with relationship between Wind Speed, Weather and Yards\n# Most of humidity 0 is in NONE climate\ng = sns.lmplot(x='WindSpeed', y='Yards', data=train_jog, \n               x_jitter=.2, col=\"GameWeather\" , height=6, aspect=1)","30cbd917":"# Display the linear plot with the relationship between Wind Speed, Wind Direction and Yards\ng = sns.lmplot(x='WindSpeed', y='Yards', data=train_jog, \n               x_jitter=.2, col=\"WindDirection\" , height=6, aspect=1, col_wrap=3)","567d862a":"# Distribution plot for each Play feature\ncolumns_to_plot = ['HomeScoreBeforePlay', 'VisitorScoreBeforePlay', 'PossessionTeam', 'FieldPosition', 'Quarter',\n                   'PlayDirection','OffensePersonnel','DefensePersonnel','OffenseFormation','DefendersInTheBox',\n                   'Down','Distance','Dis','YardLine','X','A']\nplot_distribution(train_jog[columns_to_plot], cols=4, width=30, height=20, hspace=0.8, wspace=0.5)","55a257e3":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(18, 8))\n\nax1.set_title('Visitor Score Before Play')\nsns.regplot(x='VisitorScoreBeforePlay', y='Yards', data=train_jog, color='b', x_jitter=2, ax=ax1)\n\nax2.set_title('Home Score Before Play')\nsns.regplot(x='HomeScoreBeforePlay', y='Yards', data=train_jog, color='g', x_jitter=2, ax=ax2)\n\nplt.show()","cb9e819e":"# Display catPlot with the relationship between PossessionTeam and Yards\ng = sns.catplot(x='PossessionTeam', y='Yards', data=train_jog, kind=\"box\", height=8, aspect=2)\ng.set_xticklabels(rotation=90)","d889622c":"# Display catPlot with the relationship between FieldPosition and Yards\ng = sns.catplot(x='FieldPosition', y='Yards', data=train_jog, kind=\"box\", height=8, aspect=2)\ng.set_xticklabels(rotation=90)","0c94bc2b":"# Display catPlot chart with the relationship between Distance and Yards (by Quarter)\ng = sns.lmplot(x='Distance', y='Yards', data=train_jog, x_jitter=.2, col=\"Quarter\" , height=6, aspect=1)","1009020f":"# Display catPlot with the relationship between Distance and Yards (by PlayDirection)\ng = sns.lmplot(x='Distance', y='Yards', data=train_jog, x_jitter=.2, col=\"PlayDirection\" , height=10)","e9de7624":"# Display catPlot with the relationship between OffensePersonnel and Yards\ng = sns.catplot(x='OffensePersonnel', y='Yards', data=train_jog, kind=\"violin\", height=8, aspect=2)\ng.set_xticklabels(rotation=90)","7cb6689a":"# Display catPlot with the relationship between DefensePersonnel and Yards\ng = sns.catplot(x='DefensePersonnel', y='Yards', data=train_jog, kind=\"violin\", height=8, aspect=2)\ng.set_xticklabels(rotation=90)","0ed46168":"# Display catPlot with the relationship between OffenseFormation and Yards\ng = sns.catplot(x='OffenseFormation', y='Yards', data=train_jog, kind=\"violin\", height=8, aspect=2)\ng.set_xticklabels(rotation=90)","a4acf2f5":"# Display scatterPlot plot with the relationship between DefendersInTheBox and Yards\nplt.figure(figsize=(18, 8))\nsns.regplot(x='DefendersInTheBox', y='Yards', data=train_jog, color='b', x_jitter=2)\nplt.xlabel('Defenders In The Box')\nplt.ylabel('Yards')\nplt.title('Defenders In The Box vs Yards', fontsize=20)\nplt.show()","69791c09":"# UTC time of the snap\ntrain_jog['TimeSnap'].value_counts().head()","751558fd":"# UTC time of the handoff\ntrain_jog['TimeHandoff'].value_counts().head()","314c54ce":"# Display the linear plot with the relationship between Distance, Down and Yards\ng = sns.lmplot(x='Distance', y='Yards', data=train_jog, x_jitter=.2, col=\"Down\" , height=6, aspect=1)","03a97357":"# Display the scatterPlot between Distance and Yards\nplt.figure(figsize=(18, 8))\nsns.regplot(x='Distance', y='Yards', data=train_jog, color='b', x_jitter=2)\nplt.xlabel('Distance')\nplt.ylabel('Yards')\nplt.title('Distance vs Yards', fontsize=20)\nplt.show()","16d60e5c":"# Display the scatterPlot between Dis and Yards\nplt.figure(figsize=(18, 8))\nsns.regplot(x='Dis', y='Yards', data=train_jog, color='b', x_jitter=2)\nplt.xlabel('Dis')\nplt.ylabel('Yards')\nplt.title('Dis vs Yards', fontsize=20)\nplt.show()","e6685c54":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(18, 8))\n\nax1.set_title('Distance')\nsns.regplot(x='Distance', y='Yards', data=train_jog, color='b', x_jitter=2, ax=ax1)\n\nax2.set_title('Dis')\nsns.regplot(x='Dis', y='Yards', data=train_jog, color='g', x_jitter=2, ax=ax2)\n\nplt.show()","977dee81":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(18, 8))\n\nax1.set_title('Acelera\u00e7\u00e3o')\nsns.regplot(x='A', y='Yards', data=train_jog, color='b', x_jitter=2, ax=ax1)\n\nax2.set_title('Velocidade')\nsns.regplot(x='S', y='Yards', data=train_jog, color='g', x_jitter=2, ax=ax2)\n\nplt.show()","dc2eba59":"# Display the scatterPlot between A and S\nplt.figure(figsize=(18, 8))\nsns.regplot(x='A', y='S', data=train_jog, color='b', x_jitter=2)\nplt.xlabel('Acceleration')\nplt.ylabel('Speed')\nplt.title('Acceleration vs Speed', fontsize=20)\nplt.show()","3b664cb7":"# Distribution plot for each Position feature\ncolumns_to_plot = ['X', 'Y', 'PossessionTeam', 'Orientation', 'Dir']\nplot_distribution(train_jog[columns_to_plot], cols=3, width=30, height=20, hspace=0.8, wspace=0.5)","8301f444":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(18, 8))\n\nax1.set_title('Angle X')\nsns.regplot(x='X', y='Yards', data=train_jog, color='b', x_jitter=2, ax=ax1)\n\nax2.set_title('Angle Y')\nsns.regplot(x='Y', y='Yards', data=train_jog, color='g', x_jitter=2, ax=ax2)\n\nplt.show()","809aa858":"# Display the scatterPlot with the relationship between angle X and Y\nplt.figure(figsize=(18, 8))\nsns.regplot(x='X', y='Y', data=train_jog, color='b', x_jitter=2)\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Angle (X vs Y)', fontsize=20)\nplt.show()","9a821365":"train_jog['Orientation'].value_counts().head()","efac77a2":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(18, 8))\n\nax1.set_title('Orientation')\nsns.regplot(x='Orientation', y='Yards', data=train_jog, color='b', x_jitter=2, ax=ax1)\n\nax2.set_title('Dir')\nsns.regplot(x='Dir', y='Yards', data=train_jog, color='g', x_jitter=2, ax=ax2)\n\nplt.show()","9aa490a0":"# Display the scatterPlot with the relationship between Orientation and Dir\nplt.figure(figsize=(18, 8))\nsns.regplot(x='Orientation', y='Dir', data=train_jog, color='b', x_jitter=2)\nplt.xlabel('Orientation')\nplt.ylabel('Dir')\nplt.title('Orientation x Dir', fontsize=20)\nplt.show()","77eafd86":"# Kaggle Competition: NFL Big Data Bowl\n\n# NFL EDA on train dataset\n\nThis is my first EDA notebook here at Kaggle and aims to explore training dataset features and some relationships\n\nI plotted some graphs for viewing\n\nI hope you enjoy and vote :)","832cdc61":"# 4. SOLVING MISSING VALUES AND CLEANING DATA","00cb9525":"### 6.2 Analyzing PLAYER Variables\n- ***PlayerHeight:*** player height in feet-inches\n- ***PlayerWeight:*** player weight in lbs\n- ***PlayerBirthDate:*** Player's date of birth\n- ***PlayerCollegeName:*** college the player attended\n- ***Position:*** Player's main position\n- ***JerseyNumber:***\n   - Refers to players' uniform numbers ranging from 1 to 99. Attackers use 50 to 79 and are not allowed to handle a scrimmage play unless they report to the referee that they are playing out of position.","0e1956c8":"### 6.4 Analyzing the general variables of the ENVIRONMENT\n- ***GameWeather:*** weather\n- ***Temperature:*** environment temperature\n- ***Humidity:*** Air Humidity\n- ***WindDirection:*** Wind Direction\n- ***WindSpeed:*** Wind Speed","3f8b9ea1":"### 6.5 Analyzing the general variables of PLAY\n- ***HomeScoreBeforePlay:*** home team score before play starts\n- ***VisitorScoreBeforePlay:*** visiting team score before play starts\n- ***PossessionTeam:*** team with possession\n- ***FieldPosition:*** Which side of the field is the play going on\n- ***Quarter:*** quarter of the game (1-5, 5 = overtime)\n- ***PlayDirection:*** direction of play\n- ***OffensePersonnel:*** Offensive team grouping position\n- ***DefensePersonnel:*** defensive team grouping position\n- ***OffenseFormation:*** Offensive formation\n- ***DefendersInTheBox:*** number of defenders aligned near scrimmage line, spanning offensive line width\n- ***TimeSnap:*** Time (UTC) of the moment the ball is thrown\n- ***TimeHandoff:*** time (UTC) from the moment the runner catches the thrown ball\n- ***Down:*** The period of action that begins when the ball is put in play and ends when the ball is declared dead.\n- ***Distance:*** yards the team needs to make the first downhill\n- ***Dis:***\n- ***YardLine:*** the yard line of the scrimmage line\n- ***X:*** speed (in yards \/ second)\n- ***A:*** acceleration (in yards \/ second ^ 2)","780bf99a":"# 1. GENERAL ANALYSIS","784c525d":"### 6. General observations\n- 1. It is possible to observe that the mean is 4.21 and the standard deviation is 6.44\n- 2. Skewness = 4.18\n- 3. Kurtosis = 32.84\n- 4. The min value is -14 and the max value is 99\n\n- ***Skewness*** is a measure of the asymmetry of the probability distribution of a real-valued random variable about its mean\n- ***Kurtosis*** is a measure of the \"tailedness\" of the probability distribution of a real-valued random variable","9f797ada":"### 1. General observations\n- 1. The dataset contain observations that repeat over 22 rows group by GameId and PlayId.\n- 2. There are many categorical features in the dataset.\n- 3. There are 509.762 rows in total\n- 4. Yards is the variable to be predicted.","38448c63":"# 5. ANALYZING CORRELATIONS","18522a3c":"# Image about NFL","afa0c077":"# 6. ANALYZING ALL DATASET FEATURES\n- At this time the analyzes will be based on a new dataset.\n- This dataset will be based on the PLAYID\n- This analysis has been identified after checking the NflId and NflIdRusher features.\n- These two features are linked, where it is possible to get the player participating in the play and get the amount of yards won or lost.","c78325eb":"# 3. CLEANING AND CONVERSION FUNCTIONS","31df572f":"# 2. DATA MISSING","bfdc3df0":"### 2. General observations\n- 1. The dataset contains nine features with missing data.\n- 2. The largest amount of missing data is in the features: WindDirection, WindSpeed\n- 3. For numerical features, let's fill with the mean value\n- 4. For categorical features, let's fix with 'unknown' values","613bd26a":"### 6.1. Analyzing the target variable 'Yards'\n- Extracting the statistical data, checks the distribution is between -14 to 99\n- This means that in some moves there is a gain in yards and in other lost yards\n- Half of the records are in 3 yards won.","dfe83187":"### 5. General observations\n- 1. It's possible to observe strong positive correlation between Dis and S\n- 2. Strong negative correlation can be observed between Distance and Down, Temperature and Week\n- 3. Let's check all these correlations below","e02851f6":"### 6.6 Analyzing  POSITION Variables\n- ***X:*** position along the long axis of the field\n- ***Y:*** position along the short axis of the field\n- ***Orientation:*** Player Orientation\n- ***Dir:*** movement angle","ca4496c1":"### 6.3 Analyzing the general variables of GAME\n- ***Season:*** Season Year\n- ***Week:*** Game Week\n- ***Team:*** Team Details: Home Owners or Visitor (home or away)\n- ***StadiumType:*** Stadium type name\n- ***Stadium:*** Stadium brand name\n- ***Location:*** Stadium location\n- ***Turf:*** Stadium Turf Surface\n- ***GameClock:*** Game time\n- ***HomeTeamAbbr:*** Home Team Abbreviation\n- ***VisitorTeamAbbr:*** short for visiting team"}}