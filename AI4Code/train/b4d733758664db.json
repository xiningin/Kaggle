{"cell_type":{"0abdf1ed":"code","249d4be5":"code","9bc2cd4f":"code","fb862f29":"code","ef04ff18":"code","ce444a8f":"code","d9e49571":"code","a8e0b57b":"code","36d8b1de":"code","40ffaaaf":"code","680dc9cf":"code","365a6bfe":"code","e695a80a":"code","8d6e0881":"code","a30baa96":"code","28b0f1f4":"code","f7ae3d3b":"code","3270cc0f":"code","70f44b57":"code","861846c8":"code","5b1fbe38":"code","42432aca":"code","bec00877":"code","508735e9":"code","b524642b":"code","79ba4763":"code","5415c158":"code","03241647":"code","bdd2ad9f":"code","c5105688":"code","e8801eed":"code","40532ae5":"code","63eacec1":"code","fe6616b8":"code","16915a3e":"code","3132191d":"code","bb635593":"code","9e5e0406":"code","1d23b56c":"code","4be71316":"code","5bf93181":"code","af0319e2":"code","b32ae409":"code","6dfa5b52":"code","7842a444":"code","8b988a4f":"code","bbeed755":"code","e53c118e":"code","76e2cf46":"code","d65a9ea9":"code","69540332":"code","001d8c41":"code","94584f09":"code","9f4161bc":"code","18e739c2":"code","2f56333b":"code","8b219df9":"code","b6a5ec92":"code","12b55e73":"code","a2808baa":"code","007e60ed":"code","a602cbc7":"code","cfbe7cc6":"code","decf36df":"code","4dae3a84":"code","38bba1d8":"code","d2119873":"code","30793b3c":"code","7e4e0cce":"code","596cab99":"code","98250924":"code","257e7019":"code","008d922a":"code","16ae8a63":"code","0a9f66f5":"code","1c8ae35b":"code","34daac34":"code","113b6b19":"code","e0bd1ff3":"code","7decb028":"code","4711b729":"code","32d2f47a":"code","ca7162fa":"code","f0be9f35":"code","78993fed":"code","022f8fee":"code","8757f758":"code","56d95431":"code","9c876cf1":"code","268842ad":"code","d4b21591":"code","ff753399":"code","e090f568":"code","3b92dc81":"code","e7b1960d":"code","ecdb0854":"code","d061c69c":"code","55bca301":"code","ca878b77":"code","594fb8b5":"code","287c8c4d":"code","86c3172b":"code","d4959776":"code","46e4d6a9":"code","c0a878c0":"code","ae0c69d9":"code","1d56077a":"code","919d87b5":"code","8afeeb20":"code","26ca411e":"code","56425fbe":"code","2ff4a77b":"code","edf3baf6":"code","303d600c":"code","7734bb37":"code","1c4fa2aa":"code","64f5bb51":"code","6d00dee1":"code","44b81daf":"code","14c508cf":"code","36c92459":"code","b44ed21b":"code","c0207618":"code","5197e4a9":"code","ee2c4d91":"code","744e931a":"code","e97cae68":"code","6b89ce40":"code","1215a4b8":"code","247106f3":"code","f2c9b754":"code","c866a0ea":"code","b5e24e94":"code","da3a3e96":"code","21a4e427":"code","be2e57df":"code","bc5dcd20":"code","da266217":"code","21793e28":"code","30b44a2a":"code","38481c1a":"code","56821e25":"code","20376bff":"code","1b6da689":"code","e9ed4040":"code","21f63ba9":"code","a541f5d6":"code","5bb7eca3":"code","63b11461":"code","c74b63b4":"code","cb61dff9":"code","0bbbf293":"code","c2e01c86":"code","8d5b16cf":"code","a154628d":"code","450a0dc8":"code","5fef1ca3":"code","935cdf40":"code","121b0a81":"code","c6746a7e":"code","a5bf47fc":"code","891a6f8e":"code","dc960ff5":"code","a249dc21":"code","b85b58dd":"code","c469bd35":"code","9d0c358f":"code","fac84b30":"code","2231b2cd":"code","9758dcba":"code","1eb9f24c":"code","a403dba7":"code","4c4fde1b":"code","948272c7":"code","7f0e74b9":"code","f9e80e35":"code","55dfe393":"code","5b43f7ed":"code","914d0b35":"code","33f226fe":"code","448a4f29":"code","7e3519aa":"code","674500b7":"code","1c37a2b7":"code","cf80d70f":"code","576bfe5f":"code","3ba5df23":"code","f3f91160":"code","594b78e3":"code","dc99421a":"code","8fdcd1da":"code","93e830cd":"code","5ef66a36":"code","1f03d83d":"code","eeaac33d":"code","c3c0eb87":"code","0d80d674":"code","afb62449":"code","7ca761ac":"code","c8cc530c":"code","85533a08":"code","c0fbde3a":"code","c2d8732d":"code","2c8ea82e":"code","9e02ed65":"code","af2768d0":"code","e1abde0a":"code","3651020d":"code","e21e2f7e":"code","d11a7b16":"code","bb3ff1d5":"code","73016af5":"code","c11c64be":"code","89ed7f84":"code","eeb41ae1":"code","08c1c35f":"code","19502cb6":"code","4b681181":"code","f35f6d7c":"code","d2ff8a6b":"code","575fe5fe":"code","b567e920":"code","068cc4b8":"code","07e32fc7":"code","e6ba2f43":"code","1316e8e7":"code","d4f646e0":"code","9147d184":"code","b59f5a7d":"code","8bb0dd11":"code","8d092b5e":"code","d80ffe7d":"code","5804db5f":"code","b58870d1":"code","2a4a72e9":"code","e5d77fb6":"code","c287176b":"code","c9a224dd":"code","17a9ed8b":"code","3dfd821c":"code","286432ca":"code","83ba8321":"code","34c44f4c":"code","cba79ce6":"code","091bf315":"code","94e870f9":"code","df3f2cc7":"code","2fd3ba1f":"code","34399043":"code","f20f7299":"code","b28c1cd2":"code","f733db30":"code","fe4a247a":"code","3fdf1250":"code","8c6eacc0":"code","aa4a20f2":"code","d0080e27":"code","32c21b52":"code","ecc42cb8":"code","b76cc9b3":"code","6150e94e":"code","69e8c905":"code","abcb88e0":"code","407c3005":"code","5fe90316":"code","16574e20":"code","3a68e5cc":"code","ac121736":"code","247b8e68":"code","9921ce4e":"code","bdccf5f1":"code","2140f67f":"code","b17bf89e":"code","70c0eaad":"code","8253686b":"code","488447da":"code","43e5cf51":"code","475f3ccf":"code","565bfbfa":"code","b0321a6b":"code","e0838269":"code","afa4dfca":"code","30e8c8a6":"code","2015818c":"code","cac7f0e0":"code","a98c507d":"code","896e16d0":"code","479889a7":"code","c1732689":"code","3c5aa118":"code","4adc4b53":"code","fc96cf24":"code","d51aeea0":"code","6b92571a":"code","78f9c458":"code","4bc5427b":"code","fcdb5a58":"code","7bcbdfc9":"code","3a1290cd":"code","3e3f08aa":"code","93abec7e":"code","a163eb17":"code","6a3fb0cf":"code","c06b7c9f":"code","8830aa51":"code","3348aee5":"code","6c82739b":"code","d890c94c":"code","bf398268":"code","3bf1f5d2":"code","fa7a4b3f":"code","3c9ca033":"code","2063eb45":"code","0b946f71":"code","424b21af":"code","a5a1b3ee":"code","fddf0916":"code","eb4a1747":"code","78c683dc":"code","a76d0c39":"code","3e7b9f3f":"code","e67c65b9":"code","465772d8":"code","dcbb3b8e":"code","8b7f49f1":"code","881bf0f5":"code","cf9c7e1c":"code","2d63abab":"code","a9a0abc3":"code","72b63ca9":"code","edf6ae05":"code","1766afac":"code","dec817a8":"code","08bf4e64":"code","eb18848e":"code","18eee7df":"code","8cff68e0":"code","566bd3fb":"code","5414b624":"code","501b5edb":"code","2aad3153":"code","cff82776":"code","fa5d680c":"code","9cea63d2":"code","23f9ff49":"code","47654c0f":"code","02e612ba":"code","d5ae36c3":"code","cebbb857":"code","e8d90f79":"code","affb6248":"code","85f6e7f0":"code","0d81efaa":"code","0ab14c19":"code","1761f275":"code","9f84a7ff":"code","6cd55b23":"code","9864b12f":"code","826fecdc":"code","05031d84":"code","c2dfc7fd":"code","2fbc81a5":"code","bf04012e":"code","6f35f56d":"code","edceaf2b":"code","cc990d68":"code","206a2445":"code","f6290a3e":"code","c6a01705":"code","77273f72":"code","b2d7b889":"code","b855e0dd":"code","f7eae07d":"code","21b1fbaa":"code","fc947cb0":"code","3aa2be88":"code","1b2470a5":"code","94da1306":"code","187d35a4":"code","bbdac17b":"code","97a3f930":"code","f47e2f19":"code","20feab56":"code","8ce51927":"code","3211239b":"code","6581d979":"code","6c1fa1f2":"code","42ad03d6":"code","2544d69e":"code","6337b6ac":"code","705c62f5":"code","cbbac06d":"code","e90659f0":"code","aef06e47":"code","7b122a74":"code","504b136c":"code","536dd66e":"code","7a98eefc":"code","4f25cdd6":"code","6b638e3d":"code","879b4f98":"code","665ce400":"code","63fc3398":"code","6e176696":"code","ba6b1ab8":"code","3d2e1a4f":"code","22009e33":"code","ae2b02c3":"code","13cb5b63":"code","e632b77e":"code","d0f03244":"code","4c6842d8":"code","300e71dc":"code","0b117dda":"code","10207d1e":"code","54a3cf93":"code","7c5f2186":"code","ea4e36d6":"code","2bb4c83f":"code","a9a83b0c":"code","d8c3d405":"code","fc0e0090":"code","26d03d63":"code","1ad1ccaa":"code","2d173ce4":"code","71b0ec3f":"code","3d50955a":"code","a2bf4479":"code","27c88429":"code","72d0498f":"code","fc402087":"code","004b8323":"code","fb57ae2b":"code","a322c627":"code","daffa274":"code","aaa98a9c":"code","11de6c38":"code","8b19cc06":"code","14f733d2":"code","8d0b585d":"code","861a8ee5":"code","46db263f":"code","08e9eed7":"code","7f376662":"code","0e737227":"code","3055ef07":"code","ddfbf4d2":"code","25e44347":"code","e44e8465":"code","1f4aeb52":"code","aa4fefc6":"code","94a985e9":"code","b3d149b2":"code","f80097d1":"code","afc62cca":"code","bfc840e2":"code","8148764c":"code","5b934ed6":"code","4b31ac7d":"code","2c7e2ee8":"code","69660913":"code","de0c905b":"code","08c40ca6":"code","53417f3a":"code","9fda7706":"code","303ad2be":"code","33fe9ffc":"code","2bee056c":"code","cf56a252":"code","800e59ce":"code","d9b82eae":"code","9293bcf8":"code","f9f7b2b0":"code","19f7565d":"code","c5ab45bc":"code","00b62aaa":"code","464b5a0a":"code","381fd765":"code","123757a4":"code","aae869a9":"code","a5e09c88":"code","d03fbe25":"code","0c4cfe5c":"code","c664e09b":"code","7a6f2470":"code","a740c182":"code","e3b55bb3":"code","f1e1f87c":"code","75cf7c57":"code","23c021c6":"code","109e4d15":"code","0dbb1b8e":"code","09c79840":"code","be0577fb":"code","c6c7af8e":"code","8bd0d396":"code","5bb6f85c":"code","6873f48a":"code","a7bdf8b4":"markdown","4d7e6261":"markdown","bcbebcde":"markdown","249ac15a":"markdown","0fbe1d7e":"markdown","1d5038e6":"markdown","a8c86f1d":"markdown","9fcb75b8":"markdown","96ee36a4":"markdown","daa69860":"markdown","9bee58d0":"markdown","67bc2745":"markdown","fa87a51e":"markdown","9202f503":"markdown","682a5b3a":"markdown","58f8a4c9":"markdown","5555cf05":"markdown","1bd44673":"markdown","ee40cd15":"markdown","9cba4f90":"markdown","c6b5e14d":"markdown","a9f0bc26":"markdown","4a0760b0":"markdown","88283c7e":"markdown","c8b1fffb":"markdown","3536b9ca":"markdown","49583ab2":"markdown","bbfd888b":"markdown","ed3a1416":"markdown","935ea895":"markdown","42da62f3":"markdown","94be41cd":"markdown","34952611":"markdown","a7bdcac0":"markdown","d0c038b7":"markdown","44ba77b9":"markdown","864da927":"markdown","1d890792":"markdown","aa4a6704":"markdown","6e935535":"markdown","7ef47ea5":"markdown","78d8b39b":"markdown","29c7afc2":"markdown","75abeec1":"markdown","92c38e67":"markdown","ca48f933":"markdown","2f4d2ed1":"markdown","e8d9fd9f":"markdown","b2d17fef":"markdown","1a67845b":"markdown","1f7eaef1":"markdown","1b7bbaa8":"markdown","df1fc9b3":"markdown","086203f4":"markdown","c5caa0db":"markdown","7286dad4":"markdown","59c59f3b":"markdown","bc6daca2":"markdown","cfe53eaf":"markdown","6819cc41":"markdown","2f20b910":"markdown","3401a9ae":"markdown","66d7cdd5":"markdown","d156015a":"markdown","216ef634":"markdown","6e97e52e":"markdown","0d3dd2ae":"markdown","e6009326":"markdown","ec52f7cf":"markdown","602190c8":"markdown","80a80e31":"markdown","3b04a120":"markdown","7dc40f5d":"markdown","e05e2362":"markdown","475c919d":"markdown","48803da7":"markdown","ddf51302":"markdown","52d47e39":"markdown","ee5ba3a6":"markdown","d1d88b9e":"markdown","b2515135":"markdown","9ae34043":"markdown","0fa4193c":"markdown","a5d8476e":"markdown","5dc55a71":"markdown","4dd97f2d":"markdown","4416eb61":"markdown","c6a2cbb2":"markdown","b0f64bcb":"markdown","d907e13a":"markdown","10fafcfa":"markdown","e97995d4":"markdown","de49b6df":"markdown","7222bbc4":"markdown","5ff2ce14":"markdown","1bc00f3e":"markdown","dba40716":"markdown","b3005f93":"markdown","d549b437":"markdown","823b439e":"markdown","cfa4d8cb":"markdown","2f8892be":"markdown","cb5a1d21":"markdown","7a829347":"markdown","c8512d83":"markdown","8532cde6":"markdown","a0b49ad7":"markdown","aad66bbc":"markdown","653e440c":"markdown","35a6569f":"markdown","e0794b99":"markdown","24b701fb":"markdown","d32dcbcf":"markdown","36920754":"markdown","2e6e8694":"markdown","60460d44":"markdown","0850947c":"markdown","e127f650":"markdown","8ba1df4e":"markdown","6626d917":"markdown","e56c676e":"markdown","c44e156b":"markdown","563229a2":"markdown","f926c372":"markdown","72c216e8":"markdown","e0c986e6":"markdown","4d4d0b0e":"markdown","5c60d2e2":"markdown","c7af0b3a":"markdown","1dc196dc":"markdown","37a6d478":"markdown","6ae5ec39":"markdown","1f056260":"markdown","d92591fb":"markdown","3819aba4":"markdown","a05f05ff":"markdown","cb66303e":"markdown","ce716896":"markdown","c25cd2ba":"markdown","02f18137":"markdown","329a08db":"markdown","6e0f6e81":"markdown","828da001":"markdown","1153f430":"markdown","3b4a75a5":"markdown","4b703ed5":"markdown","99e9dc94":"markdown","11f84147":"markdown","718af93f":"markdown","d885ffa4":"markdown","887d2f15":"markdown","285be419":"markdown","aa73eae1":"markdown","113dd3e3":"markdown","2f8e5020":"markdown","d3367c9d":"markdown","9409fda9":"markdown","8cad8c21":"markdown","c20c0107":"markdown","d5e06b73":"markdown","2256769e":"markdown","54ba4462":"markdown","808d1dc1":"markdown","f4757321":"markdown","762a6e4e":"markdown","feb8ff51":"markdown","de2fbc69":"markdown","7a7ec5a9":"markdown","106ef3d5":"markdown","962b87dc":"markdown","e97e40c1":"markdown","70e54b6d":"markdown","cb20950d":"markdown","614983ad":"markdown","03567d51":"markdown","d6e57b34":"markdown","a7c10fce":"markdown","9e80d967":"markdown","5f893d74":"markdown","dd17a135":"markdown","25d9ca7e":"markdown","35cee2ac":"markdown","95242623":"markdown","d315b098":"markdown","61246f9b":"markdown","9e29c66c":"markdown","cbfb4460":"markdown","3fbda663":"markdown","f39cba97":"markdown","b8a22951":"markdown","da2cac48":"markdown","32d93a2e":"markdown","a62147b1":"markdown","039f6889":"markdown","b56dc955":"markdown","68a24574":"markdown","bfc2b30a":"markdown","f75175b2":"markdown","e6b5b07e":"markdown","1f89ffb5":"markdown","a8d69d04":"markdown","fee319de":"markdown","c93a0d5f":"markdown","8fe3d85b":"markdown","2a073262":"markdown","e938630a":"markdown","1e983bf2":"markdown","2b3f63bb":"markdown","a51f85d9":"markdown","e96edb90":"markdown","572d217d":"markdown","634f8b16":"markdown","d0a15678":"markdown","a6ad1644":"markdown","0e0925bc":"markdown","13a562cb":"markdown","2843fcc4":"markdown","1fe05482":"markdown","88d4ee9c":"markdown","4f93e116":"markdown","1620a026":"markdown","3165668b":"markdown","179df800":"markdown","9c2fd153":"markdown","b9357ed7":"markdown","f5d4c36f":"markdown","b5bb4381":"markdown","0ca03614":"markdown"},"source":{"0abdf1ed":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\nimport warnings\nwarnings.filterwarnings('ignore')","249d4be5":"house=pd.read_csv(r'\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\nhouse.head()","9bc2cd4f":"house.shape","fb862f29":"house.info()","ef04ff18":"# Missing values are there","ce444a8f":"house.describe()","d9e49571":"house.Id.dtype","a8e0b57b":"house.Id.nunique()","36d8b1de":"house.Id.isnull().sum()","40ffaaaf":"# They are all unique & not required for prediction ","680dc9cf":"house.drop('Id',axis=1,inplace=True)\nhouse.head()","365a6bfe":"house.shape","e695a80a":"house.MSSubClass.dtype","8d6e0881":"house.MSSubClass.isnull().sum()","a30baa96":"house.MSSubClass.value_counts(ascending=False)","28b0f1f4":"house.MSSubClass.isnull().sum()","f7ae3d3b":"house.MSSubClass=house.MSSubClass.astype('object')\nhouse.info()","3270cc0f":"house.MSZoning.dtype","70f44b57":"house.MSZoning.isnull().sum()","861846c8":"house.MSZoning.value_counts(ascending=False)","5b1fbe38":"house.LotFrontage.dtype","42432aca":"house.LotFrontage.isnull().sum()","bec00877":"# Missing value treatment will be needed ","508735e9":"house.LotFrontage.describe()","b524642b":"house.LotArea.dtype","79ba4763":"house.LotArea.isnull().sum()","5415c158":"house.LotArea.describe()","03241647":"house.Street.dtype","bdd2ad9f":"house.Street.isnull().sum()","c5105688":"house.Street.value_counts(ascending=False)","e8801eed":"house.Alley.dtype","40532ae5":"house.Alley.value_counts(ascending=False)","63eacec1":"house.Alley.isnull().sum(),house.Alley.notnull().sum(),len(house)","fe6616b8":"house['Alley'].fillna('No Alley', inplace=True)","16915a3e":"house.Alley.isnull().sum()","3132191d":"house.Alley.value_counts(ascending=False)","bb635593":"house.LotShape.dtype","9e5e0406":"house.LotShape.value_counts(ascending=False)","1d23b56c":"house.LotShape.isnull().sum()","4be71316":"house.LandContour.dtype","5bf93181":"house.LandContour.value_counts(ascending=False)","af0319e2":"house.LandContour.isnull().sum()","b32ae409":"house.Utilities.dtype","6dfa5b52":"house.Utilities.value_counts(ascending=False)","7842a444":"house.Utilities.isnull().sum()","8b988a4f":"house.LotConfig.dtype","bbeed755":"house.LotConfig.value_counts(ascending=False)","e53c118e":"house.LotConfig.isnull().sum()","76e2cf46":"house.LandSlope.dtype","d65a9ea9":"house.LandSlope.value_counts(ascending=False)","69540332":"house.LandSlope.isnull().sum()","001d8c41":"house.Neighborhood.dtype","94584f09":"house.Neighborhood.value_counts(ascending=False)","9f4161bc":"house.Neighborhood.isnull().sum()","18e739c2":"house.Condition1.dtype","2f56333b":"house.Condition1.value_counts(ascending=False)","8b219df9":"house.Condition1.isnull().sum()","b6a5ec92":"house.Condition2.dtype","12b55e73":"house.Condition2.value_counts(ascending=False)","a2808baa":"house.Condition2.isnull().sum()","007e60ed":"house.BldgType.dtype","a602cbc7":"house.BldgType.value_counts(ascending=False)","cfbe7cc6":"house.BldgType.isnull().sum()","decf36df":"house.HouseStyle.dtype","4dae3a84":"house.HouseStyle.value_counts(ascending=False)","38bba1d8":"house.HouseStyle.isnull().sum()","d2119873":"house.OverallQual.dtype","30793b3c":"house.OverallQual.value_counts(ascending=False)","7e4e0cce":"house.OverallQual.isnull().sum()","596cab99":"#For ordinal type categorical variables using Label Encoder","98250924":"import sklearn\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nhouse.OverallQual = le.fit_transform(house.OverallQual)\nhouse.OverallQual.dtype","257e7019":"house.OverallQual.value_counts(ascending=False)","008d922a":"house.OverallCond.dtype","16ae8a63":"house.OverallCond.value_counts(ascending=False)","0a9f66f5":"house.OverallCond.isnull().sum()","1c8ae35b":"#For ordinal type categorical variables using Label Encoder","34daac34":"house.OverallCond = le.fit_transform(house.OverallCond)\nhouse.OverallCond.dtype","113b6b19":"house.OverallCond.value_counts(ascending=False)","e0bd1ff3":"house.YearBuilt.dtype","7decb028":"house.YearBuilt.value_counts(ascending=False)","4711b729":"house.YearBuilt.isnull().sum()","32d2f47a":"house.YearRemodAdd.dtype","ca7162fa":"house.YearRemodAdd.value_counts(ascending=False)","f0be9f35":"house.YearRemodAdd.isnull().sum()","78993fed":"house.RoofStyle.dtype","022f8fee":"house.RoofStyle.value_counts(ascending=False)","8757f758":"house.RoofStyle.isnull().sum()","56d95431":"house.RoofMatl.dtype","9c876cf1":"house.RoofMatl.value_counts(ascending=False)","268842ad":"house.RoofMatl.isnull().sum()","d4b21591":"house.Exterior1st.dtype","ff753399":"house.Exterior1st.value_counts(ascending=False)","e090f568":"house.Exterior1st.isnull().sum()","3b92dc81":"house.Exterior2nd.dtype","e7b1960d":"house.Exterior2nd.value_counts(ascending=False)","ecdb0854":"house.Exterior2nd.isnull().sum()","d061c69c":"house.MasVnrType.dtype","55bca301":"house.MasVnrType.value_counts(ascending=False)","ca878b77":"house.MasVnrType.isnull().sum()","594fb8b5":"# Missing value found","287c8c4d":"house.MasVnrArea.dtype","86c3172b":"house.MasVnrArea.describe()","d4959776":"house.MasVnrArea.isnull().sum()","46e4d6a9":"# Missing values are there","c0a878c0":"house.ExterQual.dtype","ae0c69d9":"house.ExterQual.value_counts(ascending=False)","1d56077a":"house.ExterQual.isnull().sum()","919d87b5":"#For ordinal type categorical variables using Label Encoder","8afeeb20":"house.ExterQual = le.fit_transform(house.ExterQual)\nhouse.ExterQual.dtype","26ca411e":"house.ExterQual.value_counts(ascending=False)","56425fbe":"house.ExterCond.dtype","2ff4a77b":"house.ExterCond.value_counts(ascending=False)","edf3baf6":"house.ExterCond.isnull().sum()","303d600c":"#For ordinal type categorical variables using Label Encoder","7734bb37":"house.ExterCond = le.fit_transform(house.ExterCond)\nhouse.ExterCond.dtype","1c4fa2aa":"house.ExterCond.value_counts(ascending=False)","64f5bb51":"house.Foundation.dtype","6d00dee1":"house.Foundation.value_counts(ascending=False)","44b81daf":"house.Foundation.isnull().sum()","14c508cf":"house.BsmtQual.dtype","36c92459":"house.BsmtQual.value_counts(ascending=False)","b44ed21b":"house.BsmtQual.isnull().sum(),house.BsmtQual.notnull().sum(),len(house)","c0207618":"# Here, NA is No Basement. But dataframe consider it as missing value. So, replace with a new value,'No Basement' instead of NA","5197e4a9":"house['BsmtQual'].fillna('No Basement', inplace=True)","ee2c4d91":"house.BsmtQual.dtype","744e931a":"house.BsmtQual.value_counts(ascending=False)","e97cae68":"#For ordinal type categorical variables using Label Encoder","6b89ce40":"house['BsmtQual'] = house.BsmtQual.map({'No Basement':0,'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5})\nhouse.BsmtQual.dtype","1215a4b8":"house.BsmtQual.value_counts(ascending=False)","247106f3":"house.BsmtCond.dtype","f2c9b754":"house.BsmtCond.value_counts(ascending=False)","c866a0ea":"house.BsmtCond.isnull().sum(),house.BsmtCond.notnull().sum(),len(house)","b5e24e94":"house['BsmtCond'].fillna('No Basement', inplace=True)","da3a3e96":"house.BsmtCond.value_counts(ascending=False)","21a4e427":"house.BsmtCond.isnull().sum()","be2e57df":"#For ordinal type categorical variables using Label Encoder","bc5dcd20":"house['BsmtCond'] = house.BsmtCond.map({'No Basement':0,'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5})\nhouse.BsmtCond.dtype","da266217":"house.BsmtCond.value_counts(ascending=False)","21793e28":"house.BsmtExposure.dtype","30b44a2a":"house.BsmtExposure.value_counts(ascending=False)","38481c1a":"house.BsmtExposure.isnull().sum(),house.BsmtExposure.notnull().sum(),len(house)","56821e25":"house['BsmtExposure'].fillna('No Basement', inplace=True)","20376bff":"house.BsmtExposure.value_counts(ascending=False)","1b6da689":"house.BsmtExposure.isnull().sum()","e9ed4040":"#For ordinal type categorical variables using Label Encoder","21f63ba9":"house['BsmtExposure'] = house.BsmtExposure.map({'No Basement':0,'No':1,'Mn':2,'Av':3,'Gd':4})","a541f5d6":"house.BsmtExposure.value_counts(ascending=False)","5bb7eca3":"house.BsmtFinType1.dtype","63b11461":"house.BsmtFinType1.value_counts(ascending=False)","c74b63b4":"house.BsmtFinType1.isnull().sum(),house.BsmtFinType1.notnull().sum(),len(house)","cb61dff9":"house['BsmtFinType1'].fillna('No Basement', inplace=True)","0bbbf293":"house.BsmtFinType1.value_counts(ascending=False)","c2e01c86":"house.BsmtFinType1.isnull().sum()","8d5b16cf":"#For ordinal type categorical variables using Label Encoder","a154628d":"house['BsmtFinType1'] = house.BsmtFinType1.map({'No Basement':0,'Unf':1,'LwQ':2,'Rec':3,'BLQ':4,'ALQ':5,'GLQ':6})\nhouse.BsmtFinType1.dtype","450a0dc8":"house.BsmtFinType1.value_counts(ascending=False)","5fef1ca3":"house.BsmtFinSF1.dtype","935cdf40":"house.BsmtFinSF1.describe()","121b0a81":"house.BsmtFinSF1.isnull().sum()","c6746a7e":"house.BsmtFinType2.dtype","a5bf47fc":"house.BsmtFinType2.value_counts(ascending=False)","891a6f8e":"house.BsmtFinType2.isnull().sum(),house.BsmtFinType2.notnull().sum(),len(house)","dc960ff5":"house['BsmtFinType2'].fillna('No Basement', inplace=True)","a249dc21":"house.BsmtFinType2.value_counts(ascending=False)","b85b58dd":"house.BsmtFinType2.isnull().sum()","c469bd35":"#For ordinal type categorical variables using Label Encoder","9d0c358f":"house['BsmtFinType2'] = house.BsmtFinType2.map({'No Basement':0,'Unf':1,'LwQ':2,'Rec':3,'BLQ':4,'ALQ':5,'GLQ':6})\nhouse.BsmtFinType2.dtype","fac84b30":"house.BsmtFinType2.value_counts(ascending=False)","2231b2cd":"house.BsmtFinSF2.dtype","9758dcba":"house.BsmtFinSF2.describe()","1eb9f24c":"house.BsmtFinSF2.isnull().sum()","a403dba7":"house.BsmtUnfSF.dtype","4c4fde1b":"house.BsmtUnfSF.describe()","948272c7":"house.BsmtUnfSF.isnull().sum()","7f0e74b9":"house.TotalBsmtSF.dtype","f9e80e35":"house.TotalBsmtSF.describe()","55dfe393":"house.TotalBsmtSF.isnull().sum()","5b43f7ed":"house.Heating.dtype","914d0b35":"house.Heating.value_counts(ascending=False)","33f226fe":"house.Heating.isnull().sum()","448a4f29":"house.HeatingQC.dtype","7e3519aa":"house.HeatingQC.value_counts(ascending=False)","674500b7":"house.HeatingQC.isnull().sum()","1c37a2b7":"#For ordinal type categorical variables using Label Encoder","cf80d70f":"house['HeatingQC'] = house.HeatingQC.map({'Po':0,'Fa':1,'TA':2,'Gd':3,'Ex':4})\nhouse.HeatingQC.dtype","576bfe5f":"house.HeatingQC.value_counts(ascending=False)","3ba5df23":"house.CentralAir.dtype","f3f91160":"house.CentralAir.value_counts(ascending=False)","594b78e3":"house.CentralAir.isnull().sum()","dc99421a":"house.Electrical.dtype","8fdcd1da":"house.Electrical.value_counts(ascending=False)","93e830cd":"house.Electrical.isnull().sum()","5ef66a36":"# Missing value treatment will be needed ","1f03d83d":"house['1stFlrSF'].dtype","eeaac33d":"house['1stFlrSF'].describe()","c3c0eb87":"house['1stFlrSF'].isnull().sum()","0d80d674":"house['2ndFlrSF'].dtype","afb62449":"house['2ndFlrSF'].describe()","7ca761ac":"house['2ndFlrSF'].isnull().sum()","c8cc530c":"house['LowQualFinSF'].dtype","85533a08":"house['LowQualFinSF'].describe()","c0fbde3a":"house['LowQualFinSF'].isnull().sum()","c2d8732d":"house.GrLivArea.dtype","2c8ea82e":"house.GrLivArea.describe()","9e02ed65":"house.GrLivArea.isnull().sum()","af2768d0":"house.BsmtFullBath.dtype","e1abde0a":"house.BsmtFullBath.value_counts()","3651020d":"house.BsmtFullBath.isnull().sum()","e21e2f7e":"house.BsmtHalfBath.dtype","d11a7b16":"house.BsmtHalfBath.value_counts()","bb3ff1d5":"house.BsmtHalfBath.isnull().sum()","73016af5":"house.FullBath.dtype","c11c64be":"house.FullBath.value_counts()","89ed7f84":"house.FullBath.isnull().sum()","eeb41ae1":"house.HalfBath.dtype","08c1c35f":"house['HalfBath'].value_counts()","19502cb6":"house['HalfBath'].isnull().sum()","4b681181":"house.BedroomAbvGr.dtype","f35f6d7c":"house.BedroomAbvGr.value_counts()","d2ff8a6b":"house.BedroomAbvGr.isnull().sum()","575fe5fe":"house.KitchenAbvGr.dtype","b567e920":"house['KitchenAbvGr'].value_counts()","068cc4b8":"house.KitchenAbvGr.isnull().sum()","07e32fc7":"house.KitchenQual.dtype","e6ba2f43":"house.KitchenQual.value_counts()","1316e8e7":"house.KitchenQual.isnull().sum()","d4f646e0":"#For ordinal type categorical variables using Label Encoder","9147d184":"house['KitchenQual'] = house.KitchenQual.map({'Po':0,'Fa':1,'TA':2,'Gd':3,'Ex':4})\nhouse.KitchenQual.dtype","b59f5a7d":"house.KitchenQual.value_counts()","8bb0dd11":"house.TotRmsAbvGrd.dtype","8d092b5e":"house.TotRmsAbvGrd.value_counts()","d80ffe7d":"house.TotRmsAbvGrd.isnull().sum()","5804db5f":"house.Functional.dtype","b58870d1":"house.Functional.value_counts()","2a4a72e9":"house.Functional.isnull().sum()","e5d77fb6":"house.Fireplaces.dtype","c287176b":"house.Fireplaces.describe()","c9a224dd":"house.Fireplaces.isnull().sum()","17a9ed8b":"house.FireplaceQu.dtype","3dfd821c":"house.FireplaceQu.value_counts()","286432ca":"house.FireplaceQu.isnull().sum(),house.FireplaceQu.notnull().sum(),len(house)","83ba8321":"house.FireplaceQu.fillna('No Fireplace', inplace=True)","34c44f4c":"house.FireplaceQu.value_counts()","cba79ce6":"house.FireplaceQu.isnull().sum()","091bf315":"#For ordinal type categorical variables using Label Encoder","94e870f9":"house['FireplaceQu'] = house.FireplaceQu.map({'No Fireplace':0,'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5})\nhouse.FireplaceQu.dtype","df3f2cc7":"house.FireplaceQu.value_counts()","2fd3ba1f":"house.GarageType.dtype","34399043":"house.GarageType.value_counts()","f20f7299":"house.GarageType.isnull().sum(),house.GarageType.notnull().sum(),len(house)","b28c1cd2":"house.GarageType.fillna('No Garage', inplace=True)","f733db30":"house.GarageType.value_counts()","fe4a247a":"house.GarageType.isnull().sum()","3fdf1250":"house.GarageYrBlt.dtype","8c6eacc0":"house.GarageYrBlt.describe()","aa4a20f2":"house.GarageYrBlt.isnull().sum()","d0080e27":"# missing value found","32c21b52":"house.GarageFinish.dtype","ecc42cb8":"house.GarageFinish.value_counts()","b76cc9b3":"house.GarageFinish.isnull().sum(),house.GarageFinish.notnull().sum(),len(house)","6150e94e":"house['GarageFinish'].fillna('No Garage', inplace=True)","69e8c905":"house.GarageFinish.value_counts()","abcb88e0":"house.GarageFinish.isnull().sum()","407c3005":"house.GarageCars.dtype","5fe90316":"house.GarageCars.value_counts()","16574e20":"house.GarageCars.isnull().sum()","3a68e5cc":"house.GarageArea.dtype","ac121736":"house.GarageArea.describe()","247b8e68":"house.GarageArea.isnull().sum()","9921ce4e":"house.GarageQual.dtype","bdccf5f1":"house.GarageQual.value_counts()","2140f67f":"house.GarageQual.isnull().sum(),house.GarageQual.notnull().sum(),len(house)","b17bf89e":"house['GarageQual'].fillna('No Garage', inplace=True)","70c0eaad":"house.GarageQual.value_counts()","8253686b":"house.GarageQual.isnull().sum()","488447da":"#For ordinal type categorical variables using Label Encoder","43e5cf51":"house['GarageQual'] = house.GarageQual.map({'No Garage':0,'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5})\nhouse.GarageQual.dtype","475f3ccf":"house.GarageQual.value_counts()","565bfbfa":"house.GarageCond.dtype","b0321a6b":"house.GarageCond.value_counts()","e0838269":"house.GarageCond.isnull().sum(),house.GarageCond.notnull().sum(),len(house)","afa4dfca":"house['GarageCond'].fillna('No Garage', inplace=True)","30e8c8a6":"house.GarageCond.value_counts()","2015818c":"house.GarageCond.isnull().sum()","cac7f0e0":"#For ordinal type categorical variables using Label Encoder","a98c507d":"house['GarageCond'] = house.GarageCond.map({'No Garage':0,'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5})\nhouse.GarageCond.dtype","896e16d0":"house.GarageCond.value_counts()","479889a7":"house.PavedDrive.dtype","c1732689":"house.PavedDrive.value_counts()","3c5aa118":"house.PavedDrive.isnull().sum()","4adc4b53":"house.WoodDeckSF.dtype","fc96cf24":"house.GrLivArea.describe()","d51aeea0":"house.WoodDeckSF.isnull().sum()","6b92571a":"house.OpenPorchSF.dtype","78f9c458":"house.OpenPorchSF.describe()","4bc5427b":"house.OpenPorchSF.isnull().sum()","fcdb5a58":"house.EnclosedPorch.dtype","7bcbdfc9":"house.EnclosedPorch.describe()","3a1290cd":"house.EnclosedPorch.isnull().sum()","3e3f08aa":"house['3SsnPorch'].dtype","93abec7e":"house['3SsnPorch'].describe()","a163eb17":"house['3SsnPorch'].isnull().sum()","6a3fb0cf":"house.ScreenPorch.dtype","c06b7c9f":"house.ScreenPorch.describe()","8830aa51":"house.ScreenPorch.isnull().sum()","3348aee5":"house.PoolArea.dtype","6c82739b":"house.PoolArea.describe()","d890c94c":"house.PoolArea.isnull().sum()","bf398268":"house.PoolQC.dtype","3bf1f5d2":"house.PoolQC.value_counts()","fa7a4b3f":"house.PoolQC.isnull().sum(),house.PoolQC.notnull().sum(),len(house)","3c9ca033":"house['PoolQC'].fillna('No Pool', inplace=True)","2063eb45":"house.PoolQC.value_counts()","0b946f71":"house.PoolQC.isnull().sum()","424b21af":"#For ordinal type categorical variables using Label Encoder","a5a1b3ee":"house['PoolQC'] = house.PoolQC.map({'No Pool':0,'Fa':1,'TA':2,'Gd':3,'Ex':4})\nhouse.PoolQC.dtype","fddf0916":"house.PoolQC.value_counts()","eb4a1747":"house.Fence.dtype","78c683dc":"house.Fence.value_counts()","a76d0c39":"house.Fence.isnull().sum(),house.Fence.notnull().sum(),len(house)","3e7b9f3f":"house['Fence'].fillna('No Fence', inplace=True)","e67c65b9":"house.Fence.value_counts()","465772d8":"house.Fence.isnull().sum()","dcbb3b8e":"house.MiscFeature.dtype","8b7f49f1":"house.MiscFeature.value_counts()","881bf0f5":"house.MiscFeature.isnull().sum(),house.MiscFeature.notnull().sum(),len(house)","cf9c7e1c":"house['MiscFeature'].fillna('None', inplace=True)","2d63abab":"house.MiscFeature.value_counts()","a9a0abc3":"house.GarageQual.isnull().sum()","72b63ca9":"house.MiscVal.dtype","edf6ae05":"house.MiscVal.describe()","1766afac":"house.MiscVal.isnull().sum()","dec817a8":"house.MoSold.dtype","08bf4e64":"house.MoSold.value_counts()","eb18848e":"house.MoSold.isnull().sum()","18eee7df":"house.YrSold.dtype","8cff68e0":"house.YrSold.describe()","566bd3fb":"house.YrSold.isnull().sum()","5414b624":"house.SaleType.dtype","501b5edb":"house.SaleType.value_counts()","2aad3153":"house.SaleType.isnull().sum()","cff82776":"house.SaleCondition.dtype","fa5d680c":"house.SaleCondition.value_counts()","9cea63d2":"house.SaleCondition.isnull().sum()","23f9ff49":"house.SalePrice.dtype","47654c0f":"house.SalePrice.describe()","02e612ba":"sns.distplot(house.SalePrice)\nplt.xticks(rotation = 90)\nplt.show()","d5ae36c3":"house['SalePrice'].skew()","cebbb857":"from scipy import stats\nhouse['SalePrice']=stats.boxcox(house['SalePrice'])[0]","e8d90f79":"sns.distplot(house.SalePrice)\nplt.show()","affb6248":"house['SalePrice'].skew()","85f6e7f0":"house.head()","0d81efaa":"house.shape","0ab14c19":"house.info()","1761f275":"# Create a new column named IsRemodelled - This column would determine whether the house has been remodelled or not based on \n# the difference between remodelled and built years\n\ndef checkForRemodel(row):\n    if(row['YearBuilt'] == row['YearRemodAdd']):\n        return 0\n    else:\n        return 1\n    \nhouse['IsRemodelled'] = house.apply(checkForRemodel, axis=1)\nhouse['IsRemodelled']=house['IsRemodelled'].astype('object')\nhouse.head()","9f84a7ff":"house['IsRemodelled'].dtype","6cd55b23":"import datetime\nnow = datetime.datetime.now()\nnow","9864b12f":"house['Age of Building'] = now.year - house['YearBuilt']\nhouse.head()","826fecdc":"house['Age of Building'].dtype","05031d84":"house['Age of Building'].isnull().sum()","c2dfc7fd":"house['Age of Building'].describe()","2fbc81a5":"house.drop('YearBuilt',axis=1,inplace=True)\nhouse.head()","bf04012e":"plt.figure(figsize = (20,5))\nplt.grid()\nax=sns.distplot(house[\"Age of Building\"],kde=False)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 45)\nax.set_yscale('log')\nplt.show()","6f35f56d":"house['Last Sold'] = now.year - house['YrSold']\nhouse.head()","edceaf2b":"house['Last Sold'].dtype","cc990d68":"house['Last Sold'].value_counts()","206a2445":"house.drop('YrSold',axis=1,inplace=True)\nhouse.head()","f6290a3e":"house['Age of Garage'] = now.year - house['GarageYrBlt']\nhouse.head()","c6a01705":"house['Age of Garage'].dtype","77273f72":"house['Age of Garage'].describe()","b2d7b889":"house.drop('GarageYrBlt',axis=1,inplace=True)\nhouse.head()","b855e0dd":"house['Last Remodelled'] = now.year - house['YearRemodAdd']\nhouse.head()","f7eae07d":"house['Last Remodelled'].dtype","21b1fbaa":"house['Last Remodelled'].describe()","fc947cb0":"house.drop('YearRemodAdd',axis=1,inplace=True)\nhouse.head()","3aa2be88":"house['Last Remodelled'].isnull().sum()","1b2470a5":"plt.figure(figsize = (20,5))\nax=sns.countplot(data=house, x=\"Last Remodelled\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 45)\n\nplt.show()","94da1306":"house.info()","187d35a4":"houseo=house.copy()\nhouseo.drop_duplicates(subset=None, inplace=True)\nhouseo.shape","bbdac17b":"\nhouse.shape","97a3f930":"house.isnull().sum().sort_values(ascending=False)[:8]","f47e2f19":"(house.isnull().sum()*100 \/ len(house)).sort_values(ascending=False)[:8]","20feab56":"house.columns[house.isnull().any()]","8ce51927":"house['LotFrontage'].describe()","3211239b":"house['LotFrontage'].isnull().sum()","6581d979":"house['LotFrontage'].fillna(house['LotFrontage'].min(), inplace=True) ","6c1fa1f2":"house['LotFrontage'].isnull().sum()","42ad03d6":"house['LotFrontage'].describe()","2544d69e":"house['MasVnrType'].value_counts()","6337b6ac":"house['MasVnrType'].isnull().sum()","705c62f5":"house['MasVnrType'].fillna('None', inplace=True)","cbbac06d":"house['MasVnrType'].isnull().sum()","e90659f0":"house['MasVnrArea'].describe()","aef06e47":"house['MasVnrArea'].isnull().sum()","7b122a74":"house['MasVnrArea'].fillna(house['MasVnrArea'].min(), inplace=True) ","504b136c":"house['MasVnrArea'].isnull().sum()","536dd66e":"house['Electrical'].isnull().sum()","7a98eefc":"house['Electrical'].describe()","4f25cdd6":"house['Electrical'].value_counts()","6b638e3d":"# Since, there is 1 missing value, better to drop NA ","879b4f98":"house = house[house['Electrical'].notna()]\nhouse['Electrical'].isnull().sum()","665ce400":"house.columns","63fc3398":"house['Age of Garage'].isnull().sum()","6e176696":"house['Age of Garage'].nunique()","ba6b1ab8":"house[house.isnull().any(axis=1)][:5]","3d2e1a4f":"house['Age of Garage'].describe()","22009e33":"plt.figure(figsize = (20,5))\nplt.grid()\nax=sns.distplot(house[\"Age of Garage\"],bins=11,kde=False)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 45)\nax.set_yscale('log')\nplt.show()","ae2b02c3":"list0=list(range(0,10))\nlist1=list(range(10,20))\nlist2=list(range(20,30))\nlist3=list(range(30,40))\nlist4=list(range(40,50))\nlist5=list(range(50,60))\nlist6=list(range(60,70))\nlist7=list(range(70,80))\nlist8=list(range(80,90))\nlist9=list(range(90,100))\nlist10=list(range(100,110))\nlist11=list(range(110,120))\nlist12=list(range(120,130))\nlist13=list(range(130,140))\nlist14=list(range(140,150))\nlist15=list(range(150,160))\nlist16=list(range(160,170))\nlist17=list(range(170,180))\nlist18=list(range(180,190))\nlist19=list(range(190,200))","13cb5b63":"house['Age of Garage']=house['Age of Garage'].replace(list0,'in0s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list1,'in10s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list2,'in20s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list3,'in30s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list4,'in40s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list5,'in50s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list6,'in60s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list7,'in70s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list8,'in80s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list9,'in90s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list10,'in100s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list11,'in110s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list12,'in120s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list13,'in130s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list14,'in140s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list15,'in150s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list16,'in160s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list17,'in170s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list18,'in180s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list19,'in190s')\n","e632b77e":"house['Age of Garage'].value_counts()","d0f03244":"house['Age of Garage'].dtype","4c6842d8":"plt.figure(figsize = (20,5))\nax=sns.countplot(data=house, x=\"Age of Garage\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 45)\nax.set_yscale('log')\n\nplt.show()","300e71dc":"house['Age of Garage'].fillna('No Garage', inplace=True) ","0b117dda":"house['Age of Garage'].isnull().sum()","10207d1e":"plt.figure(figsize = (20,5))\nax=sns.countplot(data=house, x=\"Age of Garage\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\n\nplt.show()","54a3cf93":"#For ordinal type categorical variables using Label Encoder","7c5f2186":"house['Age of Garage'] = house['Age of Garage'].map({'No Garage':0,'in10s':2,'in20s':3,'in30s':4,'in40s':5,\n                                                     'in50s':6,'in60s':7,'in70s':8,'in80s':9,\n                                                     'in90s':10,'in100s':11,'in110s':12,'in120s':13,\n                                                     'in130s':14,'in140s':15,'in150s':16,'in160s':17,\n                                                     'in170s':18,'in180s':19,'in190s':20,'in0s':1})\nhouse['Age of Garage'].dtype","ea4e36d6":"house['Age of Garage'].value_counts()","2bb4c83f":"house.isnull().sum().sort_values(ascending=False)[:8]","a9a83b0c":"(house.isnull().sum()*100 \/ len(house)).sort_values(ascending=False)[:8]","d8c3d405":"#No Missing values in columns","fc0e0090":"house.isnull().sum(axis=1).sort_values(ascending=False)[:5]","26d03d63":"(house.isnull().sum(axis=1)*100 \/ len(house)).sort_values(ascending=False)[:5]","1ad1ccaa":"#No Missing values in rows ","2d173ce4":"def getHighValueCounts():\n    column = []\n    for col in (house.columns):\n        if(house[col].value_counts().max() >= (0.85*len(house))):\n            column.append(col)\n    return column\n\n           \ncolumnsToBeRemoved =getHighValueCounts()\n\nhouse.drop(columnsToBeRemoved, axis = 1, inplace = True)\nhouse.head()","71b0ec3f":"len(house.columns)","3d50955a":"print('Available Rows % after imputations   : ',round(len(house)*100\/len(houseo),2))\nprint('Available Columns % after imputations: ',round(len(house.columns)*100\/len(houseo.columns),2))","a2bf4479":"house.shape","27c88429":"#Dependent Variable\nX=house.drop('SalePrice',axis=1)","72d0498f":"X.shape","fc402087":"# Check the correlation of numerical columns\n\nplt.figure(figsize = (30, 10))\nsns.heatmap(X.corr(), annot = True, cmap=\"rainbow\")\nplt.show()","004b8323":"house.drop(['GarageArea','TotRmsAbvGrd','1stFlrSF','Fireplaces'], axis = 1, inplace = True)\nX.drop(['GarageArea','TotRmsAbvGrd','1stFlrSF','Fireplaces'], axis = 1, inplace = True)","fb57ae2b":"# Check the correlation of numerical columns\n\nplt.figure(figsize = (30, 10))\nsns.heatmap(house.corr(), annot = True, cmap=\"rainbow\")\nplt.show()","a322c627":"X.shape","daffa274":"def scatterplot(features, rows, cols):\n    fig=plt.figure(figsize=(20,80))\n    for i, feature in enumerate(features):\n        ax=fig.add_subplot(rows,cols,i+1)\n        sns.scatterplot(x=feature,y='SalePrice',data=house)\n        plt.xticks(rotation = 45)\n        ax.set_title(feature+\" v\/s SalePrice\",color='red')\n       \n    fig.tight_layout()  \n    plt.show()","aaa98a9c":"scatterplot(X.columns,16, 3)","11de6c38":"def boxplot(features, rows, cols):\n    fig=plt.figure(figsize=(20,40))\n    for i, feature in enumerate(features):\n        ax=fig.add_subplot(rows,cols,i+1)\n        sns.boxplot(x=feature,y='SalePrice',data=house)\n        plt.xticks(rotation = 90)\n        ax.set_title(\"Boxplot for \" + feature,color='blue')\n       \n    fig.tight_layout()  \n    plt.show()","8b19cc06":"features=list((X.dtypes[X.dtypes == np.object]).index)\nlen(features)","14f733d2":"boxplot(features,6, 3)","8d0b585d":"def boxplot_n(features, rows, cols):\n    fig=plt.figure(figsize=(20,40))\n    for i, feature in enumerate(features):\n        ax=fig.add_subplot(rows,cols,i+1)\n        sns.boxplot(y=feature,data=house)\n        plt.xticks(rotation = 90)\n        ax.set_title(\"Boxplot for \" + feature,color='green')\n       \n    fig.tight_layout()  \n    plt.show()","861a8ee5":"features_n=list((X.dtypes[X.dtypes != np.object]).index)\nlen(features_n)","46db263f":"boxplot_n(features_n,10, 3)","08e9eed7":"dummies = []\nfor i in house.columns:\n    if (house[i].dtype=='object'):\n        dummies.append(i)\ndummies","7f376662":"status =  pd.get_dummies(house[dummies],drop_first=True) ## one hot encoding on all variables\nhouse = pd.concat([house,status],axis=1)\nhouse.drop(dummies,axis=1,inplace=True)\nhouse.head()","0e737227":"house.shape","3055ef07":"from sklearn.model_selection import train_test_split\n\n# We should specify 'random_state' so that the train and test data set always have the same rows, respectively\n\nnp.random.seed(0)\ntrain, test = train_test_split(house, train_size = 0.7, random_state = 42)","ddfbf4d2":"train.shape,test.shape","25e44347":"X_train=train.drop('SalePrice',axis=1)\nX_test=test.drop('SalePrice',axis=1)\ny_train=train['SalePrice']\ny_test=test['SalePrice']","e44e8465":"X_train.head()","1f4aeb52":"house.info()","aa4fefc6":"num_col =list((X_train.dtypes[house.dtypes != np.uint8]).index)\nlen(num_col)","94a985e9":"from sklearn.preprocessing import PowerTransformer\nscaler = PowerTransformer()\nX_train[num_col] = scaler.fit_transform(X_train[num_col])\nX_train.head()","b3d149b2":"X_test[num_col] = scaler.transform(X_test[num_col])\nX_test.head()","f80097d1":"len(X_train.columns)","afc62cca":"from sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LinearRegression\n# Running RFE with the output number of the variable equal to 50\nlm = LinearRegression()\nlm.fit(X_train, y_train)\n\nrfe = RFE(lm, 50)             # running RFE\nrfe = rfe.fit(X_train, y_train)","bfc840e2":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","8148764c":"col = X_train.columns[rfe.support_]\ncol","5b934ed6":"X_train.columns[~rfe.support_]","4b31ac7d":"#Assign the 50 columns to X_train_rfe\n\nX_train_rfe = X_train[col]","2c7e2ee8":"#Associate the new 50 columns to X_train and X_test for further analysis\n\nX_train = X_train_rfe[X_train_rfe.columns]\nX_test =  X_test[X_train.columns]","69660913":"X_test =  X_test[X_train.columns]\nX_test.shape","de0c905b":"from sklearn.linear_model import Ridge, Lasso\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import GridSearchCV\nparams = {'alpha': np.arange(1, 1001,0.1).tolist()}\n\nridge = Ridge()\n\n# cross validation\n\nfolds = 5\nridge_model_cv = GridSearchCV(estimator = ridge, \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1,n_jobs=-1)            \nridge_model_cv.fit(X_train, y_train)","08c40ca6":"# display the mean scores\n\nridge_cv_results = pd.DataFrame(ridge_model_cv.cv_results_)\nridge_cv_results = ridge_cv_results[ridge_cv_results['param_alpha']<=50]\nridge_cv_results[['param_alpha', 'mean_train_score', 'mean_test_score', 'rank_test_score']].sort_values(by = ['rank_test_score'])[:30]","53417f3a":"# plotting mean test and train scoes with alpha \n\nridge_cv_results['param_alpha'] = ridge_cv_results['param_alpha'].astype('int')\n\n# plotting\nplt.figure(figsize=(20,10))\nplt.plot(ridge_cv_results['param_alpha'], ridge_cv_results['mean_train_score'])\nplt.plot(ridge_cv_results['param_alpha'], ridge_cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.ylabel('Negative Mean Absolute Error')\nplt.title(\"Negative Mean Absolute Error and alpha\")\nplt.grid()\nplt.legend(['train score', 'test score'], loc='upper right')\nplt.show()","9fda7706":"# get the best estimator for lambda\n\nridge_model_cv.best_estimator_","303ad2be":"# check the coefficient values with lambda = 5.5\n\nalpha =5.5\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","33fe9ffc":"# Check the mean squared error\n\nmean_squared_error(y_test, ridge.predict(X_test))","2bee056c":"# Put the Features and coefficienst in a dataframe\n\nridge_df = pd.DataFrame({'Features':X_train.columns, 'Coefficient':ridge.coef_.round(4)})\nridge_df['ABS Coefficients']=abs(ridge.coef_)\nridge_df.sort_values(by=['ABS Coefficients'],ascending=False,inplace = True)\nridge_df.reset_index(drop=True, inplace=True)\nridge_df","cf56a252":"# Assign the Features and their coefficient values to a dictionary which would be used while plotting the bar plot\n\nridge_coeff_dict = dict(pd.Series(ridge.coef_.round(4), index = X_train.columns))\nridge_coeff_dict","800e59ce":"ridge_10 = ridge_df.head(10)\nridge_10","d9b82eae":"# bar plot to determine the variables that would affect pricing most using ridge regression\n\nplt.figure(figsize=(30,20))\nplt.subplot(4,3,1)\nsns.barplot(y = 'Features', x='Coefficient', palette='Set1', data = ridge_10)\nplt.show()\n","9293bcf8":"r2_ridgetrain=sklearn.metrics.r2_score(y_train,ridge.predict(X_train))\nr2_ridgetrain","f9f7b2b0":"import sklearn.metrics\nscore_ridge=ridge.score(X_test,y_test)\nevs_ridge=sklearn.metrics.explained_variance_score(y_test,ridge.predict(X_test))\nme_ridge=sklearn.metrics.max_error(y_test,ridge.predict(X_test))\nmae_ridge=sklearn.metrics.mean_absolute_error(y_test,ridge.predict(X_test))\nmse_ridge=sklearn.metrics.mean_squared_error(y_test,ridge.predict(X_test))\nmsle_ridge=sklearn.metrics.mean_squared_log_error(y_test,ridge.predict(X_test))\nMae_ridge=sklearn.metrics.median_absolute_error(y_test,ridge.predict(X_test))\nr2_ridge=sklearn.metrics.r2_score(y_test,ridge.predict(X_test))\nmpd_ridge=sklearn.metrics.mean_poisson_deviance(y_test,ridge.predict(X_test))\nmgd_ridge=sklearn.metrics.mean_gamma_deviance(y_test,ridge.predict(X_test))\nmtd_ridge=sklearn.metrics.mean_tweedie_deviance(y_test,ridge.predict(X_test))\nprint('Score for Ridge Regression                   :',score_ridge)\nprint('Explained Variance Score for Ridge Regression:',evs_ridge)\nprint('Max Error for Ridge Regression               :',me_ridge)\nprint('Mean Absolute Error for Ridge Regression     :',mae_ridge)\nprint('Mean Square Error for Ridge Regression       :',mse_ridge)\nprint('Mean Squared Log Error for Ridge Regression  :',msle_ridge)\nprint('Median Absolute Error for Ridge Regression   :',Mae_ridge)\nprint('R2 Score for Ridge Regression                :',r2_ridge)\nprint('Mean Poisson Deviance for Ridge Regression   :',mpd_ridge)\nprint('Mean Gamma Deviance for Ridge Regression     :',mgd_ridge)\nprint('Mean Tweedie Deviance for Ridge Regression   :',mtd_ridge)","19f7565d":"# n is number of rows in X\n\nn = X_test.shape[0]\n\n\n# Number of features (predictors, p) is the shape along axis 1\np = X_test.shape[1]\n\n# We find the Adjusted R-squared using the formula\n\nadjusted_r2_ridge = 1-(1-r2_ridge)*(n-1)\/(n-p-1)\nprint('R2 Score for Ridge Regression         :',r2_ridge)\nprint('Adjusted R2 Score for Ridge Regression:',adjusted_r2_ridge)","c5ab45bc":"lasso = Lasso()\n\n# list of alphas\n\nparams = {'alpha': np.arange(0, 1, 0.0001).tolist()}\n\n# cross validation\n\nfolds = 5\nlasso_model_cv = GridSearchCV(estimator = lasso,                         \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1,n_jobs=-1)            \n\nlasso_model_cv.fit(X_train, y_train)\n","00b62aaa":"# display the mean scores\n\nlasso_cv_results = pd.DataFrame(lasso_model_cv.cv_results_)\nlasso_cv_results = lasso_cv_results[lasso_cv_results['param_alpha']<=.01]\nlasso_cv_results[['param_alpha', 'mean_train_score', 'mean_test_score', 'rank_test_score']].sort_values(by = ['rank_test_score'])[:15]","464b5a0a":"# plotting mean test and train scoes with alpha \n\nlasso_cv_results['param_alpha'] = lasso_cv_results['param_alpha'].astype('float64')\n\n# plotting\nplt.figure(figsize=(20,10))\nplt.plot(lasso_cv_results['param_alpha'], lasso_cv_results['mean_train_score'])\nplt.plot(lasso_cv_results['param_alpha'], lasso_cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.ylabel('Negative Mean Absolute Error')\nplt.grid()\nplt.title(\"Negative Mean Absolute Error and alpha\")\nplt.legend(['train score', 'test score'], loc='upper right')\nplt.show()","381fd765":"# get the best estimator for lambda\n\nlasso_model_cv.best_estimator_\n","123757a4":"# check the coefficient values with lambda = 0.0002\n\nalpha = 0.0002\n\nlasso = Lasso(alpha=alpha)\n        \nlasso.fit(X_train, y_train) \nlasso.coef_","aae869a9":"# Check the mean squared error\n\nmean_squared_error(y_test, lasso.predict(X_test))","a5e09c88":"# Put the shortlisted Features and coefficienst in a dataframe\n\nlasso_df=pd.DataFrame()\nlasso_df['Features'] = X_train.columns\nlasso_df['Coefficients']=lasso.coef_\nlasso_df['ABS Coefficients'] = abs(lasso.coef_)\nlasso_df.sort_values(by=['ABS Coefficients'],ascending=False,inplace = True)\nlasso_df","d03fbe25":"# Put the Features and Coefficients in dictionary\n\nlasso_coeff_dict = dict(pd.Series(lasso.coef_, index = X_train.columns))\nlasso_coeff_dict","0c4cfe5c":"lasso_10_o= lasso_df.head(10)\nlasso_10_o","c664e09b":"#bar plot to determine the variables that would affect pricing most using ridge regression\n\nplt.figure(figsize=(40,20))\nplt.subplot(4,3,1)\nsns.barplot(y = 'Features', x='Coefficients', palette='Set1', data = lasso_10_o)\nplt.show()","7a6f2470":"r2_lassotrain=sklearn.metrics.r2_score(y_train,lasso.predict(X_train))\nr2_lassotrain","a740c182":"import sklearn.metrics\nscore_lasso=lasso.score(X_test,y_test)\nevs_lasso=sklearn.metrics.explained_variance_score(y_test,lasso.predict(X_test))\nme_lasso=sklearn.metrics.max_error(y_test,lasso.predict(X_test))\nmae_lasso=sklearn.metrics.mean_absolute_error(y_test,lasso.predict(X_test))\nmse_lasso=sklearn.metrics.mean_squared_error(y_test,lasso.predict(X_test))\nmsle_lasso=sklearn.metrics.mean_squared_log_error(y_test,lasso.predict(X_test))\nMae_lasso=sklearn.metrics.median_absolute_error(y_test,lasso.predict(X_test))\nr2_lasso=sklearn.metrics.r2_score(y_test,lasso.predict(X_test))\nmpd_lasso=sklearn.metrics.mean_poisson_deviance(y_test,lasso.predict(X_test))\nmgd_lasso=sklearn.metrics.mean_gamma_deviance(y_test,lasso.predict(X_test))\nmtd_lasso=sklearn.metrics.mean_tweedie_deviance(y_test,lasso.predict(X_test))\nprint('Score for Lasso Regression                   :',score_lasso)\nprint('Explained Variance Score for Lasso Regression:',evs_lasso)\nprint('Max Error for Lasso Regression               :',me_lasso)\nprint('Mean Absolute Error for Lasso Regression     :',mae_lasso)\nprint('Mean Square Error for Lasso Regression       :',mse_lasso)\nprint('Mean Squared Log Error for Lasso Regression  :',msle_lasso)\nprint('Median Absolute Error for Lasso Regression   :',Mae_lasso)\nprint('R2 Score for Lasso Regression                :',r2_lasso)\nprint('Mean Poisson Deviance for Lasso Regression   :',mpd_lasso)\nprint('Mean Gamma Deviance for Lasso Regression     :',mgd_lasso)\nprint('Mean Tweedie Deviance for Lasso Regression   :',mtd_lasso)","e3b55bb3":"print('Score for Lasso Regression                   :',score_lasso)\nprint('Score for Ridge Regression                   :',score_ridge)","f1e1f87c":"print('Explained Variance Score for Lasso Regression:',evs_lasso)\nprint('Explained Variance Score for Ridge Regression:',evs_ridge)","75cf7c57":"print('Max Error for Lasso Regression               :',me_lasso)\nprint('Max Error for Ridge Regression               :',me_ridge)","23c021c6":"print('Mean Absolute Error for Lasso Regression     :',mae_lasso)\nprint('Mean Absolute Error for Ridge Regression     :',mae_ridge)","109e4d15":"print('Mean Square Error for Lasso Regression       :',mse_lasso)\nprint('Mean Square Error for Ridge Regression       :',mse_ridge)","0dbb1b8e":"print('Mean Squared Log Error for Lasso Regression  :',msle_lasso)\nprint('Mean Squared Log Error for Ridge Regression  :',msle_ridge)","09c79840":"print('Median Absolute Error for Lasso Regression   :',Mae_lasso)\nprint('Median Absolute Error for Ridge Regression   :',Mae_ridge)","be0577fb":"print('R2 Score for Lasso Regression                :',r2_lasso)\nprint('R2 Score for Ridge Regression                :',r2_ridge)","c6c7af8e":"print('Mean Poisson Deviance for Lasso Regression   :',mpd_lasso)\nprint('Mean Poisson Deviance for Ridge Regression   :',mpd_ridge)","8bd0d396":"print('Mean Gamma Deviance for Lasso Regression     :',mgd_lasso)\nprint('Mean Gamma Deviance for Ridge Regression     :',mgd_ridge)","5bb6f85c":"print('Mean Tweedie Deviance for Lasso Regression   :',mtd_lasso)\nprint('Mean Tweedie Deviance for Ridge Regression   :',mtd_ridge)","6873f48a":"# n is number of rows in X\n\nn = X_test.shape[0]\n\n\n# Number of features (predictors, p) is the shape along axis 1\np = X_test.shape[1]\n\n# We find the Adjusted R-squared using the formula\n\nadjusted_r2_lasso = 1-(1-r2_lasso)*(n-1)\/(n-p-1)\nprint('R2 Score for Lasso Regression         :',r2_lasso)\nprint('Adjusted R2 Score for Lasso Regression:',adjusted_r2_lasso)","a7bdf8b4":"## MSSubClass","4d7e6261":"# ScreenPorch","bcbebcde":"As per data description, MiscVal: $Value of miscellaneous feature","249ac15a":"# 3SsnPorch","0fbe1d7e":"Here, C (all) means a group where  A,C,FV,RH i.e. Agriculture, Commercial, Floating Village Residential, & Industrial are part of it.","1d5038e6":"# GarageYrBlt","a8c86f1d":"As per data description, BsmtCond: Evaluates the general condition of the basement\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical - slight dampness allowed\n       Fa\tFair - dampness or some cracking or settling\n       Po\tPoor - Severe cracking, settling, or wetness\n       NA\tNo Basement","9fcb75b8":"This is a reference field , needs to be used for a derived field ","96ee36a4":"As per data description, LowQualFinSF: Low quality finished square feet (all floors)","daa69860":"As per data description, OpenPorchSF: Open porch area in square feet","9bee58d0":"As per data description, FireplaceQu: Fireplace quality\n\n       Ex\tExcellent - Exceptional Masonry Fireplace\n       Gd\tGood - Masonry Fireplace in main level\n       TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n       Fa\tFair - Prefabricated Fireplace in basement\n       Po\tPoor - Ben Franklin Stove\n       NA\tNo Fireplace","67bc2745":"Here, NA is No Basement. But dataframe consider it as missing value. So, replace with a new value,'No Basement' instead of NA","fa87a51e":"Removing following columns which shows high correlation between dependent variables (>0.80)\n- TotalBsmtSF and 1stFlrSF shows 0.82\n- Garage Area and Garage Cars shows 0.88\n- TotRmsAbvGrd and GrLivArea shows 0.83\n- Fireplaces and FireplaceQu shows 0.86","9202f503":"# BldgType","682a5b3a":"As per data description, BsmtFullBath: Basement full bathrooms","58f8a4c9":"# HalfBath","5555cf05":"## Mean Absolute Error","1bd44673":"# YearBuilt","ee40cd15":"# GarageFinish","9cba4f90":"# Foundation","c6b5e14d":"# BsmtExposure","a9f0bc26":"As per data description, BsmtFinType1: Rating of basement finished area\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement","4a0760b0":"As per data description, MSZoning: Identifies the general zoning classification of the sale.\n\t\t\n       A\tAgriculture\n       C\tCommercial\n       FV\tFloating Village Residential\n       I\tIndustrial\n       RH\tResidential High Density\n       RL\tResidential Low Density\n       RP\tResidential Low Density Park \n       RM\tResidential Medium Density","88283c7e":"# GarageArea","c8b1fffb":"# GarageCond","3536b9ca":"# LotArea","49583ab2":"As per data description, Exterior2nd: Exterior covering on house (if more than one material)\n\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles","bbfd888b":"- Sale price is also increasing with more cars in garages.\n-   Sale price increasing with OverallQual: Overall material(9) and finish quality but few high selling houses don't have max OverallQual: Overall material and finish quality (5)\n- Sale price increasing with more fireplace and more rooms.\n- Sale price increasing with max FullBath: Full bathrooms above grade.\n","ed3a1416":"# Electrical","935ea895":"As per data description, BsmtFinType2: Rating of basement finished area (if multiple types)\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement","42da62f3":"# 2ndFlrSF","94be41cd":"As per data description, GarageQual: Garage quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage","34952611":"# LotFrontage","a7bdcac0":"# BsmtFinType2","d0c038b7":"# EDA","44ba77b9":"As per data description, 3SsnPorch: Three season porch area in square feet","864da927":"Here, NA is No Garage. But dataframe consider it as missing value. So, replace with a new value, 'No Pool' instead of NA","1d890792":"# Derived Fields ","aa4a6704":"# OverallQual","6e935535":"Here, NA is None. But dataframe consider it as missing value. So, replace with a new value, 'None' instead of NA","7ef47ea5":"# CentralAir","78d8b39b":"# LowQualFinSF","29c7afc2":"As per data description, 2ndFlrSF: Second floor square feet","75abeec1":"# MiscFeature","92c38e67":"As per data description, LotConfig: Lot configuration\n\n       Inside\tInside lot\n       Corner\tCorner lot\n       CulDSac\tCul-de-sac\n       FR2\tFrontage on 2 sides of property\n       FR3\tFrontage on 3 sides of property","ca48f933":"This is a reference field , needs to be used for a derived field ","2f4d2ed1":"# LotFrontage","e8d9fd9f":"#  Electrical","b2d17fef":"Here, NA is No Garage. But dataframe consider it as missing value. So, replace with a new value, 'No Garage' instead of NA","1a67845b":"# MasVnrType","1f7eaef1":"# Fireplaces","1b7bbaa8":"As per data description, Functional: Home functionality (Assume typical unless deductions are warranted)\n\n       Typ\tTypical Functionality\n       Min1\tMinor Deductions 1\n       Min2\tMinor Deductions 2\n       Mod\tModerate Deductions\n       Maj1\tMajor Deductions 1\n       Maj2\tMajor Deductions 2\n       Sev\tSeverely Damaged\n       Sal\tSalvage only","df1fc9b3":"As per data description, Electrical: Electrical system\n\n       SBrkr\tStandard Circuit Breakers & Romex\n       FuseA\tFuse Box over 60 AMP and all Romex wiring (Average)\t\n       FuseF\t60 AMP Fuse Box and mostly Romex wiring (Fair)\n       FuseP\t60 AMP Fuse Box and mostly knob & tube wiring (poor)\n       Mix\tMixed","086203f4":"# Duplicate Check ","c5caa0db":"# BsmtFinSF2","7286dad4":"## Mean Poisson Deviance","59c59f3b":"# BsmtCond","bc6daca2":"As per data description, GrLivArea: Above grade (ground) living area square feet","cfe53eaf":"As per data description, Exterior1st: Exterior covering on house\n\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\t\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles","6819cc41":"# Mean Square Error","2f20b910":"When Linear feet of street connected to property is NA, it's safe to replace with min value available, assuming that it's legal complaince needs to be followed by Building owners \/ builders in Australia ","3401a9ae":"As per data description, Fence: Fence quality\n\t\t\n       GdPrv\tGood Privacy\n       MnPrv\tMinimum Privacy\n       GdWo\tGood Wood\n       MnWw\tMinimum Wood\/Wire\n       NA\tNo Fence","66d7cdd5":"As per data description,\nMSSubClass: Identifies the type of dwelling involved in the sale.\t\n\n        20\t1-STORY 1946 & NEWER ALL STYLES\n        30\t1-STORY 1945 & OLDER\n        40\t1-STORY W\/FINISHED ATTIC ALL AGES\n        45\t1-1\/2 STORY - UNFINISHED ALL AGES\n        50\t1-1\/2 STORY FINISHED ALL AGES\n        60\t2-STORY 1946 & NEWER\n        70\t2-STORY 1945 & OLDER\n        75\t2-1\/2 STORY ALL AGES\n        80\tSPLIT OR MULTI-LEVEL\n        85\tSPLIT FOYER\n        90\tDUPLEX - ALL STYLES AND AGES\n       120\t1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n       150\t1-1\/2 STORY PUD - ALL AGES\n       160\t2-STORY PUD - 1946 & NEWER\n       180\tPUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\n       190\t2 FAMILY CONVERSION - ALL STYLES AND AGES\n","d156015a":"# YearRemodAdd","216ef634":"Values are field & distict ","6e97e52e":"As per data description, BedroomAbvGr: Bedrooms above grade (does NOT include basement bedrooms)","0d3dd2ae":"As per data description, RoofMatl: Roof material\n\n       ClyTile\tClay or Tile\n       CompShg\tStandard (Composite) Shingle\n       Membran\tMembrane\n       Metal\tMetal\n       Roll\tRoll\n       Tar&Grv\tGravel & Tar\n       WdShake\tWood Shakes\n       WdShngl\tWood Shingles","e6009326":"# GarageQual","ec52f7cf":"As per data description, TotalBsmtSF: Total square feet of basement area","602190c8":"# BsmtFinType1","80a80e31":"As per data description, YearRemodAdd: Remodel date (same as construction date if no remodeling or additions)","3b04a120":"As per data description, MasVnrArea: Masonry veneer area in square feet","7dc40f5d":"As per data description, KitchenQual: Kitchen quality","e05e2362":"As per data description, 1stFlrSF: First Floor square feet","475c919d":"# BsmtFullBath","48803da7":"# ExterCond","ddf51302":"# Id","52d47e39":"## Explained Variance Score","ee5ba3a6":"Here, NA is No Garage. But dataframe consider it as missing value. So, replace with a new value, 'No Garage' instead of NA","d1d88b9e":"Here, NA is No Fireplace. But dataframe consider it as missing value. So, replace with a new value, 'No Fireplace' instead of NA","b2515135":"# Fence","9ae34043":"Here, NA is No Basement. But dataframe consider it as missing value. So, replace with a new value,'No Basement' instead of NA","0fa4193c":"As per data description, KitchenAbvGr: Kitchens above grade","a5d8476e":"As per data description, GarageCars: Size of garage in car capacity","5dc55a71":"As per data description, Utilities: Type of utilities available\n\t\t\n       AllPub\tAll public Utilities (E,G,W,& S)\t\n       NoSewr\tElectricity, Gas, and Water (Septic Tank)\n       NoSeWa\tElectricity and Gas Only\n       ELO\tElectricity only","4dd97f2d":"# GrLivArea","4416eb61":"# HeatingQC","c6a2cbb2":"# MoSold","b0f64bcb":"You are required to model the price of houses with the available independent variables. This model will then be used by the management to understand how exactly the prices vary with the variables. They can accordingly manipulate the strategy of the firm and concentrate on areas that will yield high returns. Further, the model will be a good way for management to understand the pricing dynamics of a new market.\n\n","d907e13a":"## Max Error","10fafcfa":"As per data description, CentralAir: Central air conditioning\n\n       N\tNo\n       Y\tYes","e97995d4":"# Condition2","de49b6df":"As per data description, GarageYrBlt: Year garage was built","7222bbc4":"As per data description, BsmtFinSF2: Type 2 finished square feet","5ff2ce14":"# MasVnrType","1bc00f3e":"As per data description, MiscFeature: Miscellaneous feature not covered in other categories\n\t\t\n       Elev\tElevator\n       Gar2\t2nd Garage (if not described in garage section)\n       Othr\tOther\n       Shed\tShed (over 100 SF)\n       TenC\tTennis Court\n       NA\tNone","dba40716":"As per data description, SaleType: Type of sale\n\t\t\n       WD \tWarranty Deed - Conventional\n       CWD\tWarranty Deed - Cash\n       VWD\tWarranty Deed - VA Loan\n       New\tHome just constructed and sold\n       COD\tCourt Officer Deed\/Estate\n       Con\tContract 15% Down payment regular terms\n       ConLw\tContract Low Down payment and low interest\n       ConLI\tContract Low Interest\n       ConLD\tContract Low Down\n       Oth\tOther","b3005f93":"# YrSold","d549b437":"As per data description, FullBath: Full bathrooms above grade","823b439e":"# BsmtQual","cfa4d8cb":"As per data description, Heating: Type of heating\n\t\t\n       Floor\tFloor Furnace\n       GasA\tGas forced warm air furnace\n       GasW\tGas hot water or steam heat\n       Grav\tGravity furnace\t\n       OthW\tHot water or steam heat other than gas\n       Wall\tWall furnaceacking, settling, or wetness\n       NA\tNo Basement","2f8892be":"- There are few reference fields, that will needed to used to derive new columns\n- There are few fields where missing values are there, they needs to imputed.\n- There are few fields where outliers are there, Outlier Treatment needs to be done. \n- There are few fields where datatypes were incorrect. Now, they are correctedly mapped.","cb5a1d21":"# ExterQual","7a829347":"As per data description, GarageCond: Garage condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage","c8512d83":"## Mean Tweedie Deviance","8532cde6":"As per data description, BsmtFinSF1: Type 1 finished square feet","a0b49ad7":"# RoofMatl","aad66bbc":"# Evaluation ","653e440c":"## Mean Squared Log Error","35a6569f":"As per data description, Alley: Type of alley access to property\n\n       Grvl\tGravel\n       Pave\tPaved\n       NA \tNo alley access","e0794b99":"As per data description, PoolQC: Pool quality\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       NA\tNo Pool","24b701fb":"# Alley","d32dcbcf":"As per data description, LotShape: General shape of property\n\n       Reg\tRegular\t\n       IR1\tSlightly irregular\n       IR2\tModerately Irregular\n       IR3\tIrregular","36920754":"##  Row Check","2e6e8694":"Datatype is not correct , it should be categorical ","60460d44":"As per data description, GarageFinish: Interior finish of the garage\n\n       Fin\tFinished\n       RFn\tRough Finished\t\n       Unf\tUnfinished\n       NA\tNo Garage","0850947c":"# PavedDrive","e127f650":"# Functional","8ba1df4e":"# LotShape","6626d917":"As per data description, RoofStyle: Type of roof\n\n       Flat\tFlat\n       Gable\tGable\n       Gambrel\tGabrel (Barn)\n       Hip\tHip\n       Mansard\tMansard\n       Shed\tShed","e56c676e":"# EnclosedPorch","c44e156b":"As per data description, BsmtHalfBath: Basement half bathrooms","563229a2":"As per data description, GarageArea: Size of garage in square feet","f926c372":"# SalePrice","72c216e8":"# Utilities","e0c986e6":"This is a reference field , needs to be used for a derived field ","4d4d0b0e":"Here, NA is No Garage. But dataframe consider it as missing value. So, replace with a new value, 'No Garage' instead of NA","5c60d2e2":"# Bedroom","c7af0b3a":"As per data description, TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)","1dc196dc":"# PoolArea","37a6d478":"Here, NA is No Basement. But dataframe consider it as missing value. So, replace with a new value,'No Basement' instead of NA","6ae5ec39":"As per data description,LotArea: Lot size in square feet","1f056260":"# WoodDeckSF","d92591fb":"# MiscVal","3819aba4":"# SaleCondition","a05f05ff":"# LandSlope","cb66303e":"When Masonry veneer area in square feet is NA, it's safe to replace with min value, i.e. 0","ce716896":"As per data description, Condition1: Proximity to various conditions\n\t\n       Artery\tAdjacent to arterial street\n       Feedr\tAdjacent to feeder street\t\n       Norm\tNormal\t\n       RRNn\tWithin 200' of North-South Railroad\n       RRAn\tAdjacent to North-South Railroad\n       PosN\tNear positive off-site feature--park, greenbelt, etc.\n       PosA\tAdjacent to postive off-site feature\n       RRNe\tWithin 200' of East-West Railroad\n       RRAe\tAdjacent to East-West Railroad Gas Only\n       ELO\tElectricity only","c25cd2ba":"# Heating","02f18137":"# Business Goal","329a08db":"Here, NA is No alley access. But dataframe consider it as missing value. So, replace with a new value, 'No Alley' instead of NA","6e0f6e81":"# MasVnrArea","828da001":"Here, NA is No Basement. But dataframe consider it as missing value. So, replace with a new value,'No Basement' instead of NA","1153f430":"# LandContour","3b4a75a5":"# Conclusion","4b703ed5":"# OpenPorchSF","99e9dc94":"As per data description, HeatingQC: Heating quality and condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor","11f84147":"As per data description, BsmtExposure: Refers to walkout or garden level walls\n\n       Gd\tGood Exposure\n       Av\tAverage Exposure (split levels or foyers typically score average or above)\t\n       Mn\tMimimum Exposure\n       No\tNo Exposure\n       NA\tNo Basement","718af93f":"As per data description, SaleCondition: Condition of sale\n\n       Normal\tNormal Sale\n       Abnorml\tAbnormal Sale -  trade, foreclosure, short sale\n       AdjLand\tAdjoining Land Purchase\n       Alloca\tAllocation - two linked properties with separate deeds, typically condo with a garage unit\t\n       Family\tSale between family members\n       Partial\tHome was not completed when last assessed (associated with New Homes)","d885ffa4":"As per data description, BsmtUnfSF: Unfinished square feet of basement area","887d2f15":"As per data description, ExterQual: Evaluates the quality of the material on the exterior \n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor","285be419":"A US-based housing company named Surprise Housing has decided to enter the Australian market. The company uses data analytics to purchase houses at a price below their actual values and flip them on at a higher price. For the same purpose, the company has collected a data set from the sale of houses in Australia. \n\n \n\nThe company is looking at prospective properties to buy to enter the market. You are required to build a regression model using regularisation in order to predict the actual value of the prospective properties and decide whether to invest in them or not.\n\n \n\nThe company wants to know:\n\n- Which variables are significant in predicting the price of a house, and\n\n- How well those variables describe the price of a house.","aa73eae1":"#Rightly Skewed ","113dd3e3":"# Missing Value Check","2f8e5020":"# YearBuilt","d3367c9d":"As per data description, ExterCond: Evaluates the present condition of the material on the exterior\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor","9409fda9":"# HouseStyle","8cad8c21":"# YearRemodAdd","c20c0107":"As per data description, PoolArea: Pool area in square feet","d5e06b73":"- Median for MoSols is 6, i.e. June \n- Median for Last Remodelled is about 28 years \n- Median for Age of Garage is 4 years\n","2256769e":"# 1stFlrSF","54ba4462":"# BsmtFinSF1","808d1dc1":"As per data description, LandSlope: Slope of property\n\t\t\n       Gtl\tGentle slope\n       Mod\tModerate Slope\t\n       Sev\tSevere Slope","f4757321":"## R2 Score","762a6e4e":"# FireplaceQu","feb8ff51":"## MSZoning","de2fbc69":"# OverallCond","7a7ec5a9":"# BsmtUnfSF","106ef3d5":"Lets understand what's inside each column","962b87dc":"# TotRmsAbvGrd","e97e40c1":"As per data description, MoSold: Month Sold (MM)","70e54b6d":"# Problem Statement ","cb20950d":"# MasVnrArea","614983ad":"# Exterior1st","03567d51":"As per data description, MasVnrType: Masonry veneer type\n\n       BrkCmn\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       None\tNone\n       Stone\tStone","d6e57b34":"# GarageYrBlt","a7c10fce":"As per data description, OverallCond: Rates the overall condition of the house\n\n       10\tVery Excellent\n       9\tExcellent\n       8\tVery Good\n       7\tGood\n       6\tAbove Average\t\n       5\tAverage\n       4\tBelow Average\t\n       3\tFair\n       2\tPoor\n       1\tVery Poor","9e80d967":"# Age of Garage","5f893d74":"As per data description, BldgType: Type of dwelling\n\t\t\n       1Fam\tSingle-family Detached\t\n       2FmCon\tTwo-family Conversion; originally built as one-family dwelling\n       Duplx\tDuplex\n       TwnhsE\tTownhouse End Unit\n       TwnhsI\tTownhouse Inside Unit","dd17a135":"We found YrSold,GarageYrBlt,YearRemodAdd & YearBuilt are reference fields, they need to be used for new Derived Fields ","25d9ca7e":"No Duplicates Found ","35cee2ac":"As per data description, LotFrontage: Linear feet of street connected to property","95242623":"As per data description, HouseStyle: Style of dwelling\n\t\n       1Story\tOne story\n       1.5Fin\tOne and one-half story: 2nd level finished\n       1.5Unf\tOne and one-half story: 2nd level unfinished\n       2Story\tTwo story\n       2.5Fin\tTwo and one-half story: 2nd level finished\n       2.5Unf\tTwo and one-half story: 2nd level unfinished\n       SFoyer\tSplit Foyer\n       SLvl\tSplit Level","d315b098":"# Column Check ","61246f9b":"# RoofStyle","9e29c66c":"# GarageCars","cbfb4460":"As per data description, WoodDeckSF: Wood deck area in square feet","3fbda663":"## Conclusion :\nThe optimal lambda value in case of Ridge and Lasso is as below:\n\n- Ridge - 5.5\n- Lasso - 0.0002\n\nThe Mean Squared error in case of Ridge and Lasso are:\n\n- Ridge - 0.0033343817816064232\n- Lasso - 0.0033371423769771964\n\n\nThe Mean Squared Error of Lasso is slightly higher than that of Ridge\n\nAlso, since Lasso helps in feature reduction (as the coefficient value of one of the feature became 0), Lasso has a better edge over Ridge.\n\nHence based on Lasso, the factors that generally affect the price are \n- Neighborhood_StoneBr\t\n- Neighborhood_Crawfor\n- GrLivArea\t\n- Foundation_Slab\n- Neighborhood_NoRidge\n- Neighborhood_NridgHt\n- Age of Building\n- Exterior1st_BrkFace\n- SaleCondition_Alloca\n- MSSubClass_90\n\n\n\nTherefore, the variables predicted by Lasso in the above bar chart as significant variables for predicting the price of a house.","f39cba97":"# Conclusion ","b8a22951":"# Street","da2cac48":"As per data description, BsmtQual: Evaluates the height of the basement\n\n       Ex\tExcellent (100+ inches)\t\n       Gd\tGood (90-99 inches)\n       TA\tTypical (80-89 inches)\n       Fa\tFair (70-79 inches)\n       Po\tPoor (<70 inches\n       NA\tNo Basement","32d93a2e":"# BsmtHalfBath","a62147b1":"# Exterior2nd","039f6889":"# Mean Gamma Deviance","b56dc955":"- 4 Columns are removed from Original dataframe i.e. YrSold,GarageYrBlt,YearRemodAdd & YearBuilt\n- 5 Derived columns are added to Original Dataframe i.e. IsRemodelled , Age of Building,Last Sold,Age of Garage & Last Remodelled","68a24574":"# YrSold","bfc2b30a":"As per data description, Condition2: Proximity to various conditions (if more than one is present)\n\t\t\n       Artery\tAdjacent to arterial street\n       Feedr\tAdjacent to feeder street\t\n       Norm\tNormal\t\n       RRNn\tWithin 200' of North-South Railroad\n       RRAn\tAdjacent to North-South Railroad\n       PosN\tNear positive off-site feature--park, greenbelt, etc.\n       PosA\tAdjacent to postive off-site feature\n       RRNe\tWithin 200' of East-West Railroad\n       RRAe\tAdjacent to East-West Railroad","f75175b2":"# Condition1","e6b5b07e":"# FullBath","1f89ffb5":"As per data description, Fireplaces: Number of fireplaces","a8d69d04":"As per data description, Foundation: Type of foundation\n\t\t\n       BrkTil\tBrick & Tile\n       CBlock\tCinder Block\n       PConc\tPoured Contrete\t\n       Slab\tSlab\n       Stone\tStone\n       Wood\tWood","fee319de":"Here, NA is No Fence. But dataframe consider it as missing value. So, replace with a new value, 'No Fence' instead of NA","c93a0d5f":"## Column Wise","8fe3d85b":"# SaleType","2a073262":"# KitchenQual","e938630a":"When Masonry veneer type is NA,  it's safe to replace with 'None'","1e983bf2":"## Score","2b3f63bb":"# GarageType","a51f85d9":"## Median Absolute Error","e96edb90":"As per data description, ScreenPorch: Screen porch area in square feet","572d217d":"As per data description, YearBuilt: Original construction date","634f8b16":"As per data description, Street: Type of road access to property\n\n       Grvl\tGravel\t\n       Pave\tPaved","d0a15678":"- Median SalePrice for SaleCondition as Partial is higher than others\n- Median SalePrice for IsRemodel as No(0) is slighty higher than IsRemodel as Yes (1)\n- Median SalePrice for Fence as MnWw is least than others\n- Median SalePrice for GarageFinish as Fin is higher than others\n- Median SalePrice for GarageType as BuiltIn is higher than others","a6ad1644":"As per data description, YrSold: Year Sold (YYYY)","0e0925bc":"# Neighborhood","13a562cb":"# LotConfig","2843fcc4":"As per data description, PavedDrive: Paved driveway\n\n       Y\tPaved \n       P\tPartial Pavement\n       N\tDirt\/Gravel","1fe05482":"As per data description, HalfBath: Half baths above grade","88d4ee9c":"# Conclusion ","4f93e116":"As per data description, OverallQual: Rates the overall material and finish of the house\n\n       10\tVery Excellent\n       9\tExcellent\n       8\tVery Good\n       7\tGood\n       6\tAbove Average\n       5\tAverage\n       4\tBelow Average\n       3\tFair\n       2\tPoor\n       1\tVery Poor","1620a026":"Here, NA is No Garage. But dataframe consider it as missing value. So, replace with a new value, 'No Garage' instead of NA","3165668b":"As per data description, Neighborhood: Physical locations within Ames city limits\n\n       Blmngtn\tBloomington Heights\n       Blueste\tBluestem\n       BrDale\tBriardale\n       BrkSide\tBrookside\n       ClearCr\tClear Creek\n       CollgCr\tCollege Creek\n       Crawfor\tCrawford\n       Edwards\tEdwards\n       Gilbert\tGilbert\n       IDOTRR\tIowa DOT and Rail Road\n       MeadowV\tMeadow Village\n       Mitchel\tMitchell\n       Names\tNorth Ames\n       NoRidge\tNorthridge\n       NPkVill\tNorthpark Villa\n       NridgHt\tNorthridge Heights\n       NWAmes\tNorthwest Ames\n       OldTown\tOld Town\n       SWISU\tSouth & West of Iowa State University\n       Sawyer\tSawyer\n       SawyerW\tSawyer West\n       Somerst\tSomerset\n       StoneBr\tStone Brook\n       Timber\tTimberland\n       Veenker\tVeenker","179df800":"# PoolQC","9c2fd153":"As per data description, EnclosedPorch: Enclosed porch area in square feet","b9357ed7":"As per data description, GarageType: Garage location\n\t\t\n       2Types\tMore than one type of garage\n       Attchd\tAttached to home\n       Basment\tBasement Garage\n       BuiltIn\tBuilt-In (Garage part of house - typically has room above garage)\n       CarPort\tCar Port\n       Detchd\tDetached from home\n       NA\tNo Garage","f5d4c36f":"# Kitchen","b5bb4381":"As per data description, LandContour: Flatness of the property\n\n       Lvl\tNear Flat\/Level\t\n       Bnk\tBanked - Quick and significant rise from street grade to building\n       HLS\tHillside - Significant slope from side to side\n       Low\tDepression","0ca03614":"# TotalBsmtSF"}}