{"cell_type":{"89f481a2":"code","24fc743e":"code","9713b161":"code","ff35730a":"code","4bad89da":"code","1bc0dac9":"code","4361c396":"code","de725ac1":"code","3ff54580":"code","e3f133d9":"code","cfbb0b9a":"code","989971a5":"code","46c2b580":"code","230e54b9":"code","8fa0ef45":"code","e185fb67":"code","2ee88729":"code","c091c171":"code","18bde5c9":"code","6fc7b460":"code","ffd0d200":"code","4d551b38":"code","24abdab1":"code","0f8516ef":"code","e1fae643":"code","f715cec4":"code","1d540b1f":"code","46c5997e":"code","bcb13b0e":"code","4266e0ff":"code","b8d70bf4":"code","3df78adc":"markdown","7ed54530":"markdown","6a0d267a":"markdown"},"source":{"89f481a2":"import pandas as pd\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","24fc743e":"load_dir = \"\/kaggle\/input\/movierecommenderdataset\/\"\nMovies = pd.read_csv(load_dir + \"movies.csv\")\nRatings = pd.read_csv(load_dir + \"ratings.csv\")\n","9713b161":"Movies.shape","ff35730a":"Movies.keys()","4bad89da":"Ratings.shape","1bc0dac9":"Ratings.keys()","4361c396":"Ratings.head(20)","de725ac1":"Movies.head()","3ff54580":"df = pd.merge(Movies, Ratings, on=\"movieId\")","e3f133d9":"df.head()","cfbb0b9a":"def Convert(title):\n    return title.lower()","989971a5":"df.title = df.title.apply(Convert)","46c2b580":"df","230e54b9":"df.title.value_counts()","8fa0ef45":"### Calculate mean Reating of All Movies\ngroup = df.groupby('title')['rating'].mean().sort_values(ascending = False).head()\ngroup","e185fb67":"dfNew = pd.DataFrame(df.groupby('title')['rating'].mean())\ndfNew[\"NumOfRatings\"] = df.groupby('title')[\"rating\"].count()","2ee88729":"dfNew.head()","c091c171":"df.head(10)","18bde5c9":"movieTitle = df.pivot_table(index=\"userId\", columns='title', values=\"rating\")","6fc7b460":"movieTitle.head(5)","ffd0d200":"def Rec():\n    movieName = input(\"Enter Movie Name\").lower()\n    userRatings = movieTitle[movieName]\n    similar_movies = movieTitle.corrwith(userRatings)\n    corr_movie = pd.DataFrame(similar_movies, columns=[\"Correlation\"])\n    corr_movie.dropna(inplace=True)\n    corr_movie = corr_movie.join(dfNew.NumOfRatings)\n    Sugg = corr_movie[corr_movie.NumOfRatings > 100].sort_values(\"Correlation\", ascending = False)\n    Sugg[:5]","4d551b38":"A = \"Python Ml Python\"","24abdab1":"B = \"Ml Python ML\"","0f8516ef":"data = [A, B]","e1fae643":"from sklearn.feature_extraction.text import CountVectorizer","f715cec4":"cv = CountVectorizer()","1d540b1f":"count = cv.fit_transform(data)","46c5997e":"count.toarray()","bcb13b0e":"from sklearn.metrics.pairwise import cosine_similarity","4266e0ff":"score = cosine_similarity(count)","b8d70bf4":"score","3df78adc":"## Content Based","7ed54530":"### <center>------- Movie Recommendation System - Project ---------<\/center>","6a0d267a":"### Filtering Based System"}}