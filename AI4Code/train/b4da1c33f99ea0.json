{"cell_type":{"b43a04c2":"code","bc2e5442":"code","2127da00":"code","ccf64fb5":"code","ea5fee32":"code","fd0994ab":"code","74ba5ea7":"code","f6d2bea7":"code","a28ff5c5":"code","b0d5c6fe":"code","9636f3dd":"code","27e0480f":"code","fa9374aa":"code","76f184d4":"code","4fa1c59b":"code","2a51a029":"code","08254ef1":"code","a590cae4":"code","24ebe80a":"code","2a947df5":"code","e7a215b0":"code","5996d840":"code","2d16edd4":"code","e068641b":"markdown"},"source":{"b43a04c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc2e5442":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os # Create Directory","2127da00":"Train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv',index_col=\"PassengerId\")\nTest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv',index_col=\"PassengerId\")\nSubmission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv',index_col=\"PassengerId\")","ccf64fb5":"dtype={\"Survived\":np.int32,\"Pclass\":np.int32,\"SibSp\":np.int32,\"Parch\":np.int32,\"Fare\":np.float64}\n","ea5fee32":"Train.head()","fd0994ab":"Train.describe()","74ba5ea7":"Train.Pclass = Train.Pclass.astype(int)\nTrain.Survived = Train.Survived.astype(int)","f6d2bea7":"Test.head()","a28ff5c5":"Test.describe()","b0d5c6fe":"Submission.head()","9636f3dd":"Train = Train.drop([\"Name\",\"Cabin\",\"Ticket\"], axis=1)\nTest = Test.drop([\"Name\",\"Cabin\",\"Ticket\"], axis=1)","27e0480f":"Train.Age = Train.Age.fillna(Train.Age.mean())\nTest.Age = Test.Age.fillna(Test.Age.mean())","fa9374aa":"from sklearn.preprocessing import OneHotEncoder\n\n# Apply one-hot encoder to each column with categorical data\nOHE = OneHotEncoder(handle_unknown='ignore', sparse=False)","76f184d4":"def OneHotEncode(DFTrain,DFTest,Columns):\n    for Column in Columns:\n        NewCol1 = pd.DataFrame(OHE.fit_transform(DFTrain[[Column]].replace(np.nan, 'N\/A', regex=True)))\n        NewCol2 = pd.DataFrame(OHE.fit_transform(DFTest[[Column]].replace(np.nan, 'N\/A', regex=True)))\n        \n        NewCol1.index = DFTrain.index\n        NewCol2.index = DFTest.index\n        \n        NewCol1 = NewCol1.rename(columns={x:f\"{Column} {x}\" for x in NewCol1.columns})\n        NewCol2 = NewCol2.rename(columns={x:f\"{Column} {x}\" for x in NewCol2.columns})\n        \n        DFTrain = pd.concat([DFTrain.drop([Column], axis=1), NewCol1], axis=1)\n        DFTest = pd.concat([DFTest.drop([Column], axis=1), NewCol2], axis=1)\n    return DFTrain, DFTest","4fa1c59b":"Train, Test = OneHotEncode(Train, Test,[\"Sex\",\"Embarked\"])","2a51a029":"# DivideData From Question 1\ndef DivideData(Data,SetOfData=10):\n    EmptySeries = pd.Series({x:None for x in Data.columns});\n    while len(Data) % SetOfData != 0:\n        Data = Data.append(EmptySeries,ignore_index = True)\n    TmpData = np.array(Data).reshape(len(Data)\/\/SetOfData,SetOfData,len(Data.columns))\n    TenSetData = [pd.DataFrame(TmpData[:,i],columns=Data.columns).dropna(how='all') for i in range(SetOfData)]\n    \n    return TenSetData\n# SimpleTTS From Question 1\ndef SimpleTTS(Data,TrainSize):\n    TrainSize = round(TrainSize * len(Data))\n    return Data.iloc[:TrainSize], Data.iloc[TrainSize:]","08254ef1":"Train.describe()","a590cae4":"Train.isnull().sum()","24ebe80a":"# Generate 5 Fold Cross Validation\nFiveFoldTrain = DivideData(Train)","2a947df5":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nModels = [GaussianNB,DecisionTreeClassifier,MLPClassifier]\nfrom sklearn.metrics import mean_absolute_error","e7a215b0":"def true(TrueY, PredY): return TrueY == PredY\ndef false(TrueY, PredY): return TrueY != PredY\ndef positive(PredY,Class=1): return PredY == Class\ndef negative(PredY,Class=1): return PredY != Class","5996d840":"def EvaluateModel(Data,idx):\n    TrainX = Train[[x for x in Train.columns if x != \"Survived\"]]\n    TrainY = Train['Survived']\n    Results = [];\n    for model in Models:\n        TX, VX = SimpleTTS(TrainX, 0.9)\n        TY, VY = SimpleTTS(TrainY.astype(int), 0.9)\n        Model = model()\n        Model.fit(TX,TY)\n        Prediction = Model.predict(VX)\n        Results.append((Model,Prediction,np.array(VY)))\n        directory = f\"{idx}\/Model Prediction {Model}\/\".replace(\"(\",\"\").replace(\")\",\"\")\n        if not os.path.exists(directory):\n            os.makedirs(directory)\n        pd.DataFrame(VY).to_csv(directory+\"Validation.csv\")\n        pd.DataFrame(Prediction, index=VX.index, columns=[\"Survived\"]).to_csv(directory+\"\/Prediction.csv\")\n#         print(f\"Model Prediction {Model} Prediction: {Prediction} True: {np.array(VY)}\")\n#         print(\"---------------------------------------------------------------------------------------------------------------------------------------\")\n    for i, (Model, PredVal, TrueVal) in enumerate(Results):\n        PositiveClass = 0\n        TP = sum( true(TrueVal, PredVal) & positive(PredVal,PositiveClass))\n        TN = sum( true(TrueVal, PredVal) & negative(PredVal,PositiveClass))\n        FP = sum(false(TrueVal, PredVal) & positive(PredVal,PositiveClass))\n        FN = sum(false(TrueVal, PredVal) & negative(PredVal,PositiveClass))\n        Precision = TP\/(TP+FP);\n        Recal = TP\/(TP+FN);\n        FMeasure1 = 2 * (Precision * Recal) \/ (Precision + Recal);\n        print(f\"\"\"Result in {Model} (Index = {i})\n    ------------------------------------------------------------------------------------------\n    Class 0\n    ---------------------------------------------\n    True  Positive: {TP}\n    True  Negative: {TN}\n    False Positive: {FP}\n    False Negative: {TN}\n    ---------------------------------------------\n    Precision: {Precision:.4f}\n    Recal: {Recal:.4f}\n    F-Measure: {FMeasure1:.4f}\n    ------------------------------------------------------------------------------------------\n    \"\"\");\n        PositiveClass = 1\n        TP = sum( true(TrueVal, PredVal) & positive(PredVal,PositiveClass))\n        TN = sum( true(TrueVal, PredVal) & negative(PredVal,PositiveClass))\n        FP = sum(false(TrueVal, PredVal) & positive(PredVal,PositiveClass))\n        FN = sum(false(TrueVal, PredVal) & negative(PredVal,PositiveClass))\n        Precision = TP\/(TP+FP);\n        Recal = TP\/(TP+FN);\n        FMeasure2 = 2 * (Precision * Recal) \/ (Precision + Recal);\n        print(f\"\"\"Class 1\n    ---------------------------------------------\n    True  Positive: {TP}\n    True  Negative: {TN}\n    False Positive: {FP}\n    False Negative: {TN}\n    ---------------------------------------------\n    Precision: {Precision:.4f}\n    Recal: {Recal:.4f}\n    F-Measure: {FMeasure2:.4f}\n    ------------------------------------------------------------------------------------------\"\"\");\n        print(f\"Average F-Measure = {(FMeasure1+FMeasure2)\/2:.4f}\")\n        print(\"---------------------------------------------------------------------------------------------------------------------------------------\")","2d16edd4":"EvaluateModel(FiveFoldTrain[0],0)","e068641b":"22p21s0397_Sirasit_W2HW2_27092020"}}