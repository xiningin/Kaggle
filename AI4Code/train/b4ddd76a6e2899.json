{"cell_type":{"74441e3a":"code","54ccd542":"code","ff2f89b1":"code","7413b659":"code","98c947c7":"code","caa10303":"code","63b2f68a":"code","cc825377":"code","91b1a59f":"code","8aef39ae":"code","335f319d":"code","12357261":"code","fb7f3b16":"code","99c6cef9":"code","d9cfea6d":"code","5727e6bb":"code","aa5b2cb4":"code","61f9d132":"code","6f74f2b1":"code","18647c73":"code","69018f85":"code","1d0d2e79":"code","65073edf":"code","aa7a8e1b":"code","a7b92f86":"code","a8530072":"code","99e0a949":"code","50631acd":"code","fe171c79":"code","44701de8":"code","c106dd50":"code","35aa151e":"code","ea126a77":"code","4455ab16":"code","dfff58dd":"code","20c22240":"code","d707d0d2":"code","8c9c9308":"code","853aaf3f":"code","d3aa94dc":"code","3a1d4c0a":"code","dbdba41d":"code","485b0424":"code","0ed3f93f":"code","3836e080":"code","5ad7792f":"code","dbc567db":"code","57149449":"code","32b48ad9":"code","116fd3a3":"code","a5de2544":"code","f78ddc42":"code","5e69491d":"code","68d9b4e1":"code","83b49c78":"code","afd91aab":"code","3cc59c9a":"code","56606709":"code","55bc239c":"code","c077133f":"code","7d531d85":"code","7325b5e7":"code","321e88ec":"code","7ab3271a":"code","47ac3d29":"code","505e9eda":"code","2846f745":"code","2da9e6f8":"code","e3f20a50":"code","85b7d5d0":"code","f671c965":"code","16a28dfa":"code","91939594":"code","cebc019d":"code","3facab2a":"code","3cc3aadb":"code","20c4cb28":"code","b1769f33":"code","b02b2321":"code","2d90ba86":"code","b036effa":"code","01fca541":"code","8b4e7106":"code","20e26550":"code","58ade840":"code","44702b4e":"code","53b46a5b":"code","13556757":"code","0a991986":"code","085f22ab":"code","e9699cf0":"code","c32f6d35":"markdown","88997898":"markdown","efecd6b1":"markdown","3cf6d029":"markdown","d80b72e3":"markdown","0c17d991":"markdown","e485c4ce":"markdown","7f715e8c":"markdown","3b52ffcc":"markdown","fc983624":"markdown","53fa49dd":"markdown","143b9984":"markdown","2fc672d6":"markdown"},"source":{"74441e3a":"# Testing how fast are nd_array operations\nimport numpy as np\na = np.arange(1000000)\nl = list(range(1000000))","54ccd542":"%timeit for _ in range(200): a2 = a * 2","ff2f89b1":"%timeit for _ in range(200): l2 = l * 2","7413b659":"import numpy as np\n\ndata = [1,2,3,4,5]\na1 = np.array(data)\na1","98c947c7":"data2 = [[1,2,3],[4,5,6]]\na2 = np.array(data2)\na2","caa10303":"data = [1,2,3]\na3 = np.array(data2, dtype = np.float64)\na3","63b2f68a":"print(a1.shape, a1.dtype, a1.ndim)","cc825377":"print(a2.shape, a2.dtype, a2.ndim)","91b1a59f":"np.arange(10)","8aef39ae":"np.ones((2,3))","335f319d":"np.zeros((3,3))","12357261":"np.full((2,3), fill_value = 5)","fb7f3b16":"np.empty(5)","99c6cef9":"np.eye(4)","d9cfea6d":"np.arange(5, dtype = np.int32)","5727e6bb":"np.arange(5, dtype = np.float32)","aa5b2cb4":"# Casting using astype()\na = np.array([1.2, 2.5, 6])\nb = a.astype(np.int32)\nb","61f9d132":"a1 = np.array([[2,2,2],[3,3,3]])\na1 + 2","6f74f2b1":"a1 + a1","18647c73":"a2 = a1 * 2\na2","69018f85":"a2 \/\/ 2","1d0d2e79":"a2 \/\/ a1","65073edf":"6 \/ a1","aa7a8e1b":"a1 ** 2","a7b92f86":"a1 > a2","a8530072":"a1 < a2","99e0a949":"a = np.arange(10)\na","50631acd":"a[5]","fe171c79":"a[5:8]","44701de8":"a[:]","c106dd50":"a[-1::-1]","35aa151e":"a[::2]","ea126a77":"a = np.arange(10)\na[:3] = 11\na","4455ab16":"b = a[7:]\nb","dfff58dd":"b[:] = 22\nb","20c22240":"a","d707d0d2":"c = a.copy()\nc","8c9c9308":"c[:] = 5\nprint(c,a)","853aaf3f":"a2 = np.array([[1,2,3,4],[5,6,7,8]])\na2[0]","d3aa94dc":"a2[0][2]","3a1d4c0a":"a2[1][1:]","dbdba41d":"a2[0,2]","485b0424":"a = np.arange(10)\nmask = a % 3 == 0\nmask","0ed3f93f":"a[mask]","3836e080":"a = np.arange(16)\na1 = a.reshape((4,4))\na1","5ad7792f":"a1.T","dbc567db":"b = a.reshape((2,2,4))\nb","57149449":"np.dot(a1,a1.T)","32b48ad9":"a1.swapaxes(1,0)","116fd3a3":"a = np.array([3,4,2,1,9,8,6,7,0,5])\na.sort()\na","a5de2544":"np.square(a)","f78ddc42":"np.sqrt([4,9,16])","5e69491d":"np.abs([-1,-2,4])","68d9b4e1":"a1 = np.array([4,6,8,9])\na2 = np.array([2,3,4,3])\nnp.add(a1,a2)","83b49c78":"np.subtract(a1,a2)","afd91aab":"np.multiply(a1,a2)","3cc59c9a":"np.divide(a1,a2)","56606709":"np.maximum(a1,a2)","55bc239c":"np.minimum(a1,a2)","c077133f":"np.power(a1,a2)","7d531d85":"np.greater(a1,a2)","7325b5e7":"np.less(a1,a2)","321e88ec":"np.concatenate((a1,a2))","7ab3271a":"a = np.array([3,4,5,6,7,8])\na.mean()","47ac3d29":"np.mean(a)","505e9eda":"a.sum()","2846f745":"a.min()","2da9e6f8":"a.max()","e3f20a50":"a.var()","85b7d5d0":"a.std()","f671c965":"a.cumsum()","16a28dfa":"a.cumprod()","91939594":"a = np.arange(25)","cebc019d":"a = a.reshape(5,5)\na","3facab2a":"a.mean(axis=1)","3cc3aadb":"a.mean(axis = 0)","20c4cb28":"a1 = np.array([[2,2,2],[4,4,4],[6,6,6]])\na2 = np.array([[3,3,3],[5,5,5],[7,7,7]])\na1.dot(a2)","b1769f33":"np.dot(a1,a2)","b02b2321":"a1.trace()","2d90ba86":"from numpy.linalg import det, inv, eig","b036effa":"a = np.arange(16).reshape(4,4)\na","01fca541":"det(a)","8b4e7106":"inv(a)","20e26550":"eig(a)","58ade840":"eig(a1)","44702b4e":"a = np.random.randn(10)\na","53b46a5b":"np.random.randint(10)","13556757":"np.random.rand(10)","0a991986":"np.random.normal()","085f22ab":"np.random.binomial([1,2,3,4],1)","e9699cf0":"np.random.shuffle(a)\na","c32f6d35":"#### Array slices are views on original array , changes on slices are reflected on original array(broadcasting)","88997898":"    np.array(), np.arange(), np.ones(), np.zeros(), np.full(), np.empty(), np.eye() \/ identity()","efecd6b1":"# 1.Creating ndarrays","3cf6d029":"# 7. Basic Mathematical and Statistical Functions","d80b72e3":"# 5.Reshaping, Transposing and Swapping","0c17d991":"#### Linear algebra","e485c4ce":"## 2.DataTypes\n    int(8,16,32,64),uint(8,16,32,64), float(16,32,64,128), complex(64,128,256), bool, object, string_, unicode_","7f715e8c":"# NumPy\nShort for Numerical Python, NumPy is a foundational package for numerical computing in Python, ndarray is an efficient multidimensional array provinding fast array oriented operations","3b52ffcc":"# 6.Functions","fc983624":"#### Pseudorandom number generation","53fa49dd":"#### Boolean Indexing \/ Masking","143b9984":"# 3.Arithmetic using NumPy arrays","2fc672d6":"# 4.Indexing and slicing"}}