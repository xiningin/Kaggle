{"cell_type":{"3d674a6b":"code","38a13453":"code","808ac220":"code","2350dc01":"code","d3f7f459":"code","f9738227":"code","cb686be6":"code","f095ca5e":"code","d8e1849b":"code","43373717":"code","5baa3b81":"code","32e5a14b":"code","48fefb38":"code","3ba72e4c":"markdown","73d9a0ea":"markdown"},"source":{"3d674a6b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport os\n# import multiprocessing\nimport cv2\nimport math\n\nfrom keras.applications import MobileNet\nfrom keras.losses import sparse_categorical_crossentropy\nfrom tqdm import trange\nplt.rcParams[\"figure.max_open_warning\"] = 300","38a13453":"def strokes_to_img(in_strokes):\n    in_strokes = eval(in_strokes)\n    # make an agg figure\n    fig, ax = plt.subplots()\n    for x,y in in_strokes:\n        ax.plot(x, y, linewidth=12.) #  marker='.',\n    ax.axis('off')\n    fig.canvas.draw()\n    \n    # grab the pixel buffer and dump it into a numpy array\n    X = np.array(fig.canvas.renderer._renderer)\n    plt.close(fig)\n    return (cv2.resize(X, (96, 96)) \/ 255.)[::-1]\n","808ac220":"class_files = os.listdir(\"..\/input\/train_simplified\/\")\nclasses = {x[:-4]:i for i, x in enumerate(class_files)}\nto_class = {i:x[:-4].replace(\" \", \"_\") for i, x in enumerate(class_files)}","2350dc01":"dfs = [pd.read_csv(\"..\/input\/train_simplified\/\" + x, nrows=10000)[[\"word\", \"drawing\"]] for x in class_files]\ndf = pd.concat(dfs)\ndel dfs","d3f7f459":"# mppool = multiprocessing.Pool(6)\nn_samples = df.shape[0]\nbatch_size = 64\n\npick_order = np.arange(n_samples)\npick_per_epoch = n_samples \/\/ batch_size\n\ndef train_gen():\n    while True:  # Infinity loop\n        np.random.shuffle(pick_order)\n        for i in range(pick_per_epoch):\n            c_pick = pick_order[i*batch_size: (i+1)*batch_size]\n            dfs = df.iloc[c_pick]\n            out_imgs = list(map(strokes_to_img, dfs[\"drawing\"]))\n            X = np.array(out_imgs)[:, :, :, :3].astype(np.float32)\n            y = np.array([classes[x] for x in dfs[\"word\"]])\n            yield X, y","f9738227":"tran_datagen = train_gen()\nx,y = next(tran_datagen)","cb686be6":"# Display some images\nfor i in range(12):\n    plt.subplot(2,6,i+1)\n    plt.imshow(x[i])\n    plt.axis('off')\nplt.show()","f095ca5e":"model = MobileNet(input_shape=(96, 96, 3), weights=None, classes=len(classes))\nmodel.compile(optimizer=\"adam\", loss=sparse_categorical_crossentropy)","d8e1849b":"model.fit_generator(tran_datagen, steps_per_epoch=20, epochs=5, verbose=1)\n","43373717":"del tran_datagen\ndel df\n\nimport gc\ngc.collect()","5baa3b81":"test_df = pd.read_csv(\"..\/input\/test_simplified.csv\")","32e5a14b":"n_samples = test_df.shape[0]\npick_per_epoch = math.ceil(n_samples \/ batch_size)\npick_order = np.arange(test_df.shape[0])\n\nall_preds = []\n\nfor i in trange(pick_per_epoch):\n        c_pick = pick_order[i*batch_size: (i+1)*batch_size]\n        dfs = test_df.iloc[c_pick]\n        out_imgs = list(map(strokes_to_img, dfs[\"drawing\"]))\n        X = np.array(out_imgs)[:, :, :, :3].astype(np.float32)\n        preds = model.predict(X)\n        for x in preds:\n            all_preds.append(to_class[np.argmax(x)])\n        if i == 50:  # TODO: let it run till completion\n            break","48fefb38":"fdf = pd.DataFrame({\"key_id\": test_df[\"key_id\"], \"word\": all_preds + ([\"\"] * (test_df.shape[0] - len(all_preds)))})  # TODO: No need to kill it early\nfdf.to_csv(\"mobilenet_submit.csv\", index=False)","3ba72e4c":"# Convnet Baseline\nThis is a simple baseline which converts strokes to matplotlib figure and from there we convert it to numpy arrays. Finally the arrays are threated as images and feed into ConvNets.","73d9a0ea":"# Eval"}}