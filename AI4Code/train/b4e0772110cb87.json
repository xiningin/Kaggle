{"cell_type":{"549d8df4":"code","1ff28d2d":"code","7445239a":"code","5e875cb9":"code","91e21fa3":"code","56b9c751":"code","2bbda398":"code","18aae185":"code","ddb307e3":"code","ab277792":"code","b6c9e0c3":"code","046c858b":"code","4ed17457":"code","8f1cbc09":"code","aaaac59b":"code","e6b5f38a":"code","dd6d8b26":"code","15a457ce":"code","1ded9b7a":"code","c71f91fc":"code","7d615c78":"code","b2b36df3":"code","b0dacf5d":"markdown","c453b4a5":"markdown","158ad564":"markdown","ee9af7d8":"markdown","9be34754":"markdown","4dc5109a":"markdown","eb933e24":"markdown","766bfed1":"markdown","53bd6072":"markdown","7efa8227":"markdown","efac8263":"markdown","97ffdd54":"markdown","5726431f":"markdown","4b09a638":"markdown","b852e3cf":"markdown","f134368c":"markdown","df499c47":"markdown","85150d1a":"markdown","f60347d2":"markdown","54d2a84a":"markdown","28a6779c":"markdown","7468b477":"markdown","0a14891e":"markdown","4c949ed3":"markdown","43bd51ca":"markdown"},"source":{"549d8df4":"import seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set_style('whitegrid')","1ff28d2d":"pokemon = pd.read_csv('..\/input\/Pokemon.csv')","7445239a":"pokemon.head(6)","5e875cb9":"print(list(pokemon))","91e21fa3":"print(len(list(pokemon)))","56b9c751":"print(pokemon.info())","2bbda398":"print(pokemon.describe())","18aae185":"print(pokemon.isnull().sum())","ddb307e3":"pokemon.rename(columns={'Type 1': 'TypeA','Type 2':'TypeB', 'Sp. Atk':'Sp.Atk','Sp. Def':'Sp.Def'}, inplace=True)","ab277792":"pokemon.drop('#', axis=1,inplace=True)","b6c9e0c3":"print(pokemon.groupby(['TypeA']).size())","046c858b":"sns.set_context('poster',font_scale=1.1)\nplt.figure(figsize=(12,9))\nsns.heatmap(pokemon.isnull(),yticklabels=False,cbar=False, cmap='viridis')","4ed17457":"plt.figure(figsize=(9,5))\nax = sns.countplot(x='Generation',data=pokemon,palette='viridis')\nax.axes.set_title(\"Pokemon Generations\",fontsize=18)\nax.set_xlabel(\"Generation\", fontsize=16)\nax.set_ylabel(\"Total\", fontsize=16)","8f1cbc09":"sns.set_style('whitegrid')\nsns.lmplot('Defense','Attack',data=pokemon, hue='Generation',\n           palette='Spectral',size=8,aspect=1.4,fit_reg=False)","aaaac59b":"plt.figure(figsize=(9,5))\na = sns.countplot(y=\"TypeA\", data=pokemon, palette=\"Blues_d\",\n              order=pokemon.TypeA.value_counts().iloc[:7].index)\na.axes.set_title(\"Top 7\",fontsize=18)\na.set_xlabel(\"Total\",fontsize=16)\na.set_ylabel(\"TypeA\", fontsize=16)","e6b5f38a":"plt.figure(figsize=(15,8))\nax = sns.countplot(x='TypeB',data=pokemon,palette='viridis', order=pokemon.TypeB.value_counts().index)\nax.axes.set_title(\"Type B Pokemons\",fontsize=20)\nax.set_xlabel(\"Type\",fontsize=16)\nax.set_ylabel(\"Total\",fontsize=16)\nfor item in ax.get_xticklabels():\n    item.set_rotation(60)","dd6d8b26":"x = pokemon['Total']\n\nbins = np.arange(150, 800, 12)\nplt.figure(figsize=(14,8))\nsns.set_context('poster')\nax = sns.distplot(x, kde=False, bins = bins, color = 'darkred',hist_kws={\"alpha\":0.7})\nax.axes.set_title(\"Total power of pokemons\",fontsize=25)\nax.set_xlabel(\"Total\")\nax.set_ylabel(\"Pokemons\")","15a457ce":"plt.figure(figsize=(10, 7.5))\nsns.boxplot(x='Legendary',y='HP',data=pokemon,palette='winter')","1ded9b7a":"sns.set_style('whitegrid')\nsns.lmplot('Total','Attack',data=pokemon, hue='Legendary',\n           palette='coolwarm',height=8,aspect=1.3,fit_reg=False)","c71f91fc":"plt.figure(figsize=(12,8))\nsns.set_context('poster')\nax = sns.regplot(x=\"Legendary\", y=\"Total\", data=pokemon, x_jitter=.07, fit_reg=False,color=\"darkseagreen\",)\nax.axes.set_title(\"Normal VS Legendary\",fontsize=25)\nax.set_xlabel(\"N vs L\")\nax.set_ylabel(\"Total\")","7d615c78":"sns.set_style('whitegrid')\nsns.set_context('poster',font_scale=1.1)\nsns.lmplot(x=\"HP\", y=\"Attack\", col=\"Legendary\",data=pokemon,\n           palette='coolwarm',height=8,aspect=1.4,fit_reg=True)","b2b36df3":"plt.figure(figsize=(12,8))\nsns.set_context('poster')\nax = sns.regplot(x=\"Generation\", y=\"Total\", data=pokemon, x_jitter=.07, fit_reg=False,color=\"darkseagreen\",)\nax.axes.set_title(\"Power per generation\",fontsize=25)\nax.set_xlabel(\"Generations\")\nax.set_ylabel(\"Total\")","b0dacf5d":"#### Read Data","c453b4a5":"#### Checking legendary vs normal pokemons specific abilities. In this case HP | Attack","158ad564":"#### More Info","ee9af7d8":"#### I was curious about the differences between pokemon generations. I wanted to check their total points, in case newer generations tend to have higher total point score, but it seems random to me.","9be34754":"#### It is expected to wonder if legendary pokemon's stats are differentiated from normal ones. In this example we are going to check hit points.We see that it tends to be higher, this is kinda normal, because legendary pokemons are supposed to be stronger than normal ones.","4dc5109a":"As seen above, there are some missing values on TypeB pokemons. There is no really point doing this, as we already know there are missing values, but i like this trick. So let's visualize it. :D","eb933e24":"#### Missing Values","766bfed1":"#### I believe the most critical stats of a pokemon, are attack and defense. I wanted to check if there is a correlation betwwen generations and those two stats. I see nothing clear here. It is pretty random","53bd6072":"#### I see no point having '#' Column. I am going to delete it.","7efa8227":"### Visualize missing values","efac8263":"###### List all column names","97ffdd54":"#### Imports","5726431f":"I am going to add more into this. Need more numbers and some machine learning on guessing if a pokemon is legendary or perhaps, guessing it's generation, although it seems to me that generation canot be easily guessed.\n\nAnyway, CU around xD","4b09a638":"###### Show me the columns sum","b852e3cf":"#### Let's see how TypeB pokemons are divided by their type . Flying pokemons are clearly the most on our list.","f134368c":"#### Let's see it more clear using a regplot. There is no Legednary Pokemon with less than ~580 total points.","df499c47":"Hello people. My name is Stephen and i am from Greece. This is my first attempt on uploading a Kernel to Kaggle. I am new to Data Science world and i just wanted to share with you, some things i 've learned from tutorials around the web,udemy and of course other kernels on Kaggle site. Especially the Titanic one.\n\nThis kernel has some basic data info commands and much exploratory data analysis. Truth is, that creating this kernel is helping me to further understand all seaborn posibilities. It is too exciting.\n\nWell, i am sorry about my English and i am sorry for the possible mistakes you will probably notice on my Kernel. ","85150d1a":"####  Let's see the top 7 of TypeA pokemons, ordered by Total","f60347d2":"#### As expected, legendary pokemons have generally much higher total points but not much more attack power. I guess their total power is raised a bit on all their stats, not only attack power.","54d2a84a":"#### List the sum of pokemons, grouped by their TypeA.","28a6779c":"###### Show me the first 6 rows","7468b477":"###### I dont really like Type 1, Type 2, Sp. Atk, Sp. Def titles. I hate space between letters. I am going to rename those.","0a14891e":"#### Even more info","4c949ed3":"#### Let's see the amount of pokemons of each generation. We notice that 6th generation has the less amount of pokemons.","43bd51ca":"#### I am interested on checking the distribution of all pokemons, according their total power. I admit that i was expecting to see a more normal one than this."}}