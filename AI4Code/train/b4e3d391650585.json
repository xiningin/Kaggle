{"cell_type":{"545a5496":"code","659a9c29":"code","366896ec":"code","7dc8bfa7":"code","cf1efc9b":"code","a290917c":"code","8ef7f671":"code","fae57a48":"code","891c8f7d":"code","d68c6674":"code","64df81fb":"code","569aa920":"code","88114d8c":"code","c303eeda":"code","13f94f8a":"code","01033faa":"code","8c9f3463":"code","f9b76453":"markdown","42588999":"markdown","f496cf18":"markdown","d4f8984a":"markdown"},"source":{"545a5496":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","659a9c29":"import pandas as pd\nimport re\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n# offline plotly\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n# interactive plots\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow\nfrom bokeh.layouts import column, row\nfrom bokeh.models import Panel, Tabs, LinearAxis, Range1d, BoxAnnotation, LabelSet, Span\nfrom bokeh.models.tools import HoverTool\nfrom bokeh.palettes import Category20, Spectral3, Spectral4, Spectral8\nfrom bokeh.plotting import ColumnDataSource, figure, output_notebook, show\nfrom bokeh.transform import dodge\nfrom datetime import datetime as dt\nfrom math import pi\noutput_notebook()\nfrom IPython.core.display import display, HTML\ndisplay(HTML(\"<style>.container { width:100% !important; }<\/style>\"))\nimport gc\ngc.collect()","366896ec":"#COVID-19 OWID testing data\n#path = \"\/kaggle\/input\/covid19-owid-data\/\"\npath = \"\/kaggle\/input\/coronavirus-covid19-vaccinations-data\/\"\n#Worldmeter\npath2 = \"\/kaggle\/input\/worldmeter\/\"","7dc8bfa7":"#Covide from worldmeter\ndf = pd.read_csv(path2 + \"20210526.csv\",index_col=0)\nremove_row = ['World','North America','Europe','Asia','South America','Africa']\ndf = df[~df['Country'].isin(remove_row)]\ndf = df.sort_values(by = 'Cases',ascending=False).reset_index(drop=True)\ndf = df.drop(columns='#')\ndf.fillna(0,inplace=True)\nremove_row = ['World','North America','Europe','Asia','South America','Africa']\ndf_test_date = pd.read_csv(path2 + 'owid-covid-data.csv')\ndf_test_date = df_test_date[~df_test_date['location'].isin(remove_row)]\ndf_test_date['date'] = pd.to_datetime(df_test_date['date'])","cf1efc9b":"df_test_date = df_test_date[df_test_date['date'] > '2020-11-01' ]","a290917c":"print(\"Start Date\",df_test_date['date'].min())\nprint(\"End Date\",df_test_date['date'].max())","8ef7f671":"df['Country'] = df['Country'].replace({'USA': 'United States'})\n#df['Country'] = df['Country'].replace({'UAE': 'United Arab Emirates'})\n#country_vaccine['Country'] = country_vaccine.replace({'United Arab Emirates':'United Arab Emirates'})","fae57a48":"df['Is_UAE'] = df['Country']=='UAE'\ndf['Is_India'] = df['Country']=='India'\ndf['Testing_Per1000'] = df['Tests'] \/ 1000\ndf['Cases_Per1000'] = df['Cases'] \/ 1000\ndf['Death_Per1000'] = df['NCases'] \/ 1000\ndf['NewCases_Per1000'] = df['Deaths'] \/ 1000\ndf['Population_Per1000'] = df['Population'] \/ 1000\ndf_temp = df.copy()\n\ndef plot_topn(col, n , xa , xy, title):\n    df_f = df_temp.sort_values(col, ascending=False).head(n)\n    fig = px.bar(df_f, x=col, y='Country', text=col, \n                 orientation='h',hover_data=[\"Active\",\"CPM\",\"TPM\",\"Population\"],color='Is_India'\n                ,color_discrete_sequence=['#FFA500', '#393e46'],opacity=0.8,)\n    fig.update_layout(title=title, xaxis_title=xa, yaxis_title=xy, \n                      yaxis_categoryorder = 'total ascending',\n                      showlegend=False,template = 'plotly_white')\n    fig.show()\n\n        \n    \ndef plot_lown(col, n , xa , xy, title):\n    df_f = df_temp.sort_values(col, ascending=False).head(n)\n    fig = px.bar(df_f, x=col, y='Country', text=col, \n                 orientation='h',hover_data=[\"Active\",\"CPM\",\"TPM\",\"Population\"],color='Is_India'\n                ,color_discrete_sequence=['#FFA500', '#393e46'],opacity=0.8,)\n    fig.update_layout(title=title, xaxis_title=xa, yaxis_title=xy, \n                      yaxis_categoryorder = 'total ascending',\n                      showlegend=False,template = 'plotly_white')\n    fig.show()\n\ndef plot_1000(col, n , xa , xy, title):\n    df_f = df_temp.sort_values(col, ascending=False).head(n)\n    fig = px.bar(df_f, x=col, y='Country', text=col, \n                 orientation='h',hover_data=[\"Active\",\"CPM\",\"TPM\",\"Population\"],color='Is_India'\n                ,color_discrete_sequence=['#FFA500', '#393e46'],opacity=0.8,)\n    fig.update_layout(title=title, xaxis_title=xa, yaxis_title=xy, \n                      yaxis_categoryorder = 'total ascending',\n                      showlegend=False,template = 'plotly_white')\n    fig.show()\n    \n        \n#2    \ntotal_test = df_test_date.copy()\ntotal_test['date'] = total_test['date'].apply(pd.to_datetime)\n#total_test['quarter'] = pd.PeriodIndex(total_test.date, freq='Q')\ntotal_test[\"Quarter\"] = total_test.date.dt.quarter\ntotal_test[\"Year\"] = total_test.date.dt.year\ntotal_test.set_index([\"location\"], inplace = True)\ntotal_test = total_test.loc[['United States', 'Russia','United Kingdom', 'India','Australia','United Arab Emirates',\"Israel\",\"Brazil\"\n                            ,\"Saudi Arabia\"]]\ntotal_test.reset_index(inplace = True)\ntotal_test.sort_values('date', ascending= True,inplace=True)   \n\n# plot - test\nfig2 = px.scatter(total_test, \n                 x='date', \n                 y='total_tests', \n                 color='location',template= 'plotly_white',log_y=False,title=\"Testing Rate In Countries\"\n            )\n\n\n#fig3 = px.scatter(total_test, \n#                 x='date', \n#                 y='Recovered', \n#                 color='location',template= 'plotly_white',log_y=True,title=\"Recovered Rate In Countries - log\"\n#            )\n\n\n# plot - test\nfig21 = px.scatter(total_test, \n                 x='date', \n                 y='total_tests', \n                 color='location',template= 'plotly_white',log_y=True,title=\"Testing Rate In Countries -log\"\n            )\n\n\n\n# plot - cases\nfig22 = px.scatter(total_test, \n                 x='date', \n                 y='new_cases', \n                 color='location',template= 'plotly_white',log_y=True,title=\"New Cases In Countries - log\"\n            )\n\n# plot - deaths\nfig23 = px.scatter(total_test, \n                 x='date', \n                 y='total_deaths', \n                 color='location',template= 'plotly_white',log_y=True,title=\"Number of Deaths In Countries - log\"\n            )\n\n\n\n#3\n#fig3 = px.scatter(df, x='Tests', y='Cases', color='Country',size='Population',\n#                 hover_name=\"Country\",hover_data=['Country','CPM','TPM','Population'],\n#           log_x=True, log_y=True, title='Total Test vs Total Cases, Size - Population',,\n#           color_continuous_scale=px.colors.sequential.Plasma,size_max = 30,height =600,template = 'simple_white'\n#      \n#           )\n##4\nfig4 = px.scatter(df, x='Testing_Per1000', y='Cases_Per1000', color='NewCases_Per1000',size='Active',\n                 hover_name=\"Country\",hover_data=['Country','CPM','TPM','Population'],\n           log_x=True, log_y=True, title='Total Test Vs Cases (Per 1000),Size Active \/ Colur New Cases',\n           color_continuous_scale=px.colors.sequential.Plasma,size_max = 30,height =600,template = 'simple_white',opacity=1\n      \n           )\n\n\n\n#4.1 Popultion Per Million\ndf['Population'] = df['Population'] \/ 1000000\n\nfig41 = px.scatter(df, x='TPM', y='CPM', color='Population',size='Population',\n                 hover_name=\"Country\",hover_data=['Country','CPM','TPM','Population'],\n           log_x=True, log_y=True, title='Total Test (Per Million) Vs Total Case (Per Million), Size Population',\n           color_continuous_scale=px.colors.sequential.Plasma,size_max = 30,height =600,template = 'simple_white'\n      ,opacity=1\n           )\n\n\n#5 \n\nfig5 = px.choropleth(df, locations=df['Country'],\n                    color=df['CPM'],locationmode='country names', \n                    hover_name=df['Country'],hover_data=['Cases','Tests','TPM','Population'], \n                    color_continuous_scale=px.colors.diverging.BrBG,template = 'simple_white',\n                    range_color=[1,6000])\n\n#6 \nfig6 = px.choropleth(df, locations=df['Country'],\n                    color=df['CPM'],locationmode='country names', \n                    hover_name=df['Country'],hover_data=['Cases','Tests','TPM','Population'], \n                    color_continuous_scale=px.colors.diverging.BrBG,template='simple_white',range_color=[1,6000]\n            )\n","891c8f7d":"plot_topn('Tests', 20,'Total Test','Country',\"Total Test Taken Per Country\")","d68c6674":"fig2.update_traces(marker=dict(size=3.5),\n                  mode='lines+markers',)\n#fig2.add_annotation( # add a text callout with arrow\n    #text=\"Testing start very late <br>and slow in UK and India\", x='2020-03-17', y=100000, arrowhead=4, ax=0,\n#            ay=-70,showarrow=True)\nfig2.show()\n\n###\n#fig3=fig3.update_traces(marker=dict(size=3.5),\n#                  mode='lines+markers',)\n#fig3.show()\n\n##\nfig21=fig21.update_traces(marker=dict(size=3.5),\n                  mode='lines+markers',)\nfig21.show()\n##\nfig22=fig22.update_traces(marker=dict(size=3.5),\n                  mode='lines+markers',)\nfig22.show()\n##\nfig23=fig23.update_traces(marker=dict(size=3.5),\n                  mode='lines+markers',)\nfig23.show()","64df81fb":"plot_topn('TPM', 20,'Test Per 1 Million','Country',\"Total Test Per Million vs Country\")","569aa920":"fig41.update_coloraxes(colorscale=px.colors.sequential.Cividis_r)\nfig41.update(layout_coloraxis_showscale=True)\nfig41.show()\n\nfig4.update_coloraxes(colorscale=px.colors.sequential.Cividis_r)\nfig4.update(layout_coloraxis_showscale=True)\nfig4.show()","88114d8c":"fig5.update_layout(    title='Covid-19 Total Test (Per Milion People)',\n    template='plotly_white')\n\nfig5.show()\n\nfig6.update_layout(    title='Covid-19 Total Cases (Per Million People)',\n    template='plotly_white',\n)\nfig6.show()","c303eeda":"df = df[df['Cases'] > 5000000]\n\nsource_3 = ColumnDataSource(data = dict(\n    state = df.Country.values,\n    people_per_lab = df.CPM.values, #CASES\n    area_per_lab = df.TPM.values #TEST\n))\n\ntooltips_3 = [\n    (\"Country\", \"@state\"),\n    (\"Cases\", \"@people_per_lab{0.00} M\"),\n    (\"Test\", \"@area_per_lab{0.00} K\")\n]\n\nh_mid = max(df.CPM.values \/100)\/2\nv_mid = max(df.TPM.values \/100)\/2\n\nprint(h_mid)\nprint(v_mid)\n\nsource_labels = ColumnDataSource(data = dict(\n    \nstate = df[(df.CPM >= v_mid ) | (df.TPM >= h_mid  )].Country.values,\n    \npeople_per_lab = df[(df.CPM >= v_mid ) | (df.TPM >= h_mid )].CPM.values,\n    \narea_per_lab = df[(df.TPM >= v_mid ) | (df.CPM >= h_mid )].TPM.values \n    \n))\n\nlabels = LabelSet(x = \"people_per_lab\", y = \"area_per_lab\", text = \"state\", \n        source = source_labels, level = \"glyph\", x_offset = -19, y_offset = -23, render_mode = \"canvas\")\n\nv3 = figure(plot_width = 800, plot_height = 800, tooltips = tooltips_3, title = \"Country\")\nv3.circle(\"people_per_lab\", \"area_per_lab\", source = source_3, size = 13, color = \"blue\", alpha = 0.41)\n\ntl_box = BoxAnnotation(right = v_mid, bottom = h_mid, fill_alpha = 0.1, fill_color = \"orange\")\ntr_box = BoxAnnotation(left = v_mid, bottom = h_mid, fill_alpha = 0.1, fill_color = \"red\")\nbl_box = BoxAnnotation(right = v_mid, top = h_mid, fill_alpha = 0.1, fill_color = \"green\")\nbr_box = BoxAnnotation(left = v_mid, top = h_mid, fill_alpha = 0.1, fill_color = \"orange\")\n\nv3.add_layout(tl_box)\nv3.add_layout(tr_box)\nv3.add_layout(bl_box)\nv3.add_layout(br_box)\n\nv3.add_layout(labels)\n\nv3.xaxis.axis_label = \"Total Cases (Per Million)\"\nv3.yaxis.axis_label = \"Total Test (Per Million)\" \n\n\n## Popultion\nsource_3 = ColumnDataSource(data = dict(\n    state = df.Country.values,\n    people_per_lab = df.Population.values, #CASES\n    area_per_lab = df.TPM.values #TEST\n))\n\ntooltips_3 = [\n    (\"Country\", \"@state\"),\n    (\"Cases\", \"@people_per_lab{0.00} M\"),\n    (\"Test\", \"@area_per_lab{0.00} K\")\n]\n\nh_mid = max(df.CPM.values \/100)\/2\nv_mid = max(df.TPM.values \/100)\/2\n\nprint(h_mid)\nprint(v_mid)\n\nsource_labels = ColumnDataSource(data = dict(\n    \nstate = df[(df.Population >= v_mid ) | (df.TPM >= h_mid  )].Country.values,\n    \npeople_per_lab = df[(df.Population >= v_mid ) | (df.TPM >= h_mid )].Population.values,\n    \narea_per_lab = df[(df.TPM >= v_mid ) | (df.Population >= h_mid )].TPM.values \n    \n))\n\nlabels = LabelSet(x = \"people_per_lab\", y = \"area_per_lab\", text = \"state\", \n        source = source_labels, level = \"glyph\", x_offset = -19, y_offset = -23, render_mode = \"canvas\")\n\nv4 = figure(plot_width = 800, plot_height = 800, tooltips = tooltips_3, title = \"Country\")\nv4.circle(\"people_per_lab\", \"area_per_lab\", source = source_3, size = 13, color = \"blue\", alpha = 0.41)\n\ntl_box = BoxAnnotation(right = v_mid, bottom = h_mid, fill_alpha = 0.1, fill_color = \"orange\")\ntr_box = BoxAnnotation(left = v_mid, bottom = h_mid, fill_alpha = 0.1, fill_color = \"red\")\nbl_box = BoxAnnotation(right = v_mid, top = h_mid, fill_alpha = 0.1, fill_color = \"green\")\nbr_box = BoxAnnotation(left = v_mid, top = h_mid, fill_alpha = 0.1, fill_color = \"orange\")\n\nv4.add_layout(tl_box)\nv4.add_layout(tr_box)\nv4.add_layout(bl_box)\nv4.add_layout(br_box)\n\nv4.add_layout(labels)\n\nv4.xaxis.axis_label = \"Total Population (Per Million) \"\nv4.yaxis.axis_label = \"Total Test (Per Million) \" ","13f94f8a":"show(column(row(v3)))","01033faa":"show(column(row(v4)))","8c9f3463":"#bokeh plot - https:\/\/www.kaggle.com\/rohanrao","f9b76453":"<center><h1>*Testing Rate from 2020 November <\/h1><\/center>\n<center><h2>*Update on 26-05-2021*<\/h2><\/center>","42588999":"## Filtering Countries Cases More than > 550000","f496cf18":"## Analysis - Total Cases (Per Million) vs Total Test (Per Million)","d4f8984a":"## Analysis - Total Test (Per Million) vs Total Population (Per Million)"}}