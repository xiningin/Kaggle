{"cell_type":{"8131fe5a":"code","b1174454":"code","ac7250ae":"code","b312d1e4":"code","b0cf6c08":"code","8053d727":"code","067639ef":"code","3c15aab4":"code","2ac55198":"code","f96d906d":"code","7d76812b":"markdown"},"source":{"8131fe5a":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nimport random\n\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Dropout, Flatten, Dense\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.vgg16 import VGG16\nfrom keras.models import Model\n","b1174454":"src = '..\/input\/cats-versus-dogs\/data\/'","ac7250ae":"# Get list of file names\n_, _, cat_images = next(os.walk(src + 'train\/cats\/'))\n\n# Prepare a 3x3 plot (total of 9 images)\nfig, ax = plt.subplots(3,3, figsize=(20,10))\n\n# Randomly select and plot an image\nfor idx, img in enumerate(random.sample(cat_images, 9)):\n    img_read = plt.imread(src + 'train\/cats\/' + img)\n    ax[int(idx\/3), idx%3].imshow(img_read)\n    ax[int(idx\/3), idx%3].axis('off')\n    ax[int(idx\/3), idx%3].set_title('cats\/'+img)\n\nplt.show()","b312d1e4":"# Get list of file names\n_, _, dog_images = next(os.walk(src + 'train\/dogs\/'))\n\n# Prepare a 3x3 plot (total of 9 images)\nfig, ax = plt.subplots(3,3, figsize=(20,10))\n\n# Randomly select and plot an image\nfor idx, img in enumerate(random.sample(dog_images, 9)):\n    img_read = plt.imread(src + 'train\/dogs\/' + img)\n    ax[int(idx\/3), idx%3].imshow(img_read)\n    ax[int(idx\/3), idx%3].axis('off')\n    ax[int(idx\/3), idx%3].set_title('dogs\/'+img)\n\nplt.show()\n","b0cf6c08":"# Define hyperparameters\nFILTER_SIZE = 3\nNUM_FILTERS = 32\nINPUT_SIZE  = 32\nMAXPOOL_SIZE = 2\nBATCH_SIZE = 16\nSTEPS_PER_EPOCH = 20000\/\/BATCH_SIZE\nEPOCHS = 10\n\nmodel = Sequential()\nmodel.add(Conv2D(\n    NUM_FILTERS, (FILTER_SIZE, FILTER_SIZE), \n    input_shape = (INPUT_SIZE, INPUT_SIZE, 3), \n    activation = 'relu'\n))\nmodel.add(MaxPooling2D(pool_size = (MAXPOOL_SIZE, MAXPOOL_SIZE)))\nmodel.add(Conv2D(NUM_FILTERS, (FILTER_SIZE, FILTER_SIZE), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (MAXPOOL_SIZE, MAXPOOL_SIZE)))\nmodel.add(Flatten())\nmodel.add(Dense(units = 128, activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\nmodel.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","8053d727":"training_data_generator = ImageDataGenerator(rescale = 1.\/255)\ntesting_data_generator = ImageDataGenerator(rescale = 1.\/255)\n\ntraining_set = training_data_generator.flow_from_directory(\n    src+'train\/',\n    target_size = (INPUT_SIZE, INPUT_SIZE),\n    batch_size = BATCH_SIZE,\n    class_mode = 'binary'\n)\n\ntest_set = testing_data_generator.flow_from_directory(\n    src+'validation\/',\n    target_size = (INPUT_SIZE, INPUT_SIZE),\n    batch_size = BATCH_SIZE,\n    class_mode = 'binary'\n)","067639ef":"model.fit_generator(training_set, steps_per_epoch = STEPS_PER_EPOCH, epochs = EPOCHS, verbose=1)\n\nscore = model.evaluate_generator(test_set, steps=100)\n\nfor idx, metric in enumerate(model.metrics_names):\n    print(\"{}: {}\".format(metric, score[idx]))","3c15aab4":"# Define hyperparameters\nINPUT_SIZE = 128 #Change this to 48 if the code is taking too long to run\nBATCH_SIZE = 16\nSTEPS_PER_EPOCH = 200\nEPOCHS = 3\n\nvgg16 = VGG16(include_top=False, weights='imagenet', input_shape=(INPUT_SIZE,INPUT_SIZE,3))\n\n# Freeze the pre-trained layers\nfor layer in vgg16.layers:\n    layer.trainable = False\n\n# Add a fully connected layer with 1 node at the end \ninput_ = vgg16.input\noutput_ = vgg16(input_)\nlast_layer = Flatten(name='flatten')(output_)\nlast_layer = Dense(1, activation='sigmoid')(last_layer)\n#model = Model(input=input_, output=last_layer)\nmodel_final = Model(input_, last_layer)\n\nmodel.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","2ac55198":"training_data_generator = ImageDataGenerator(rescale = 1.\/255)\ntesting_data_generator = ImageDataGenerator(rescale = 1.\/255)\n\ntraining_set = training_data_generator.flow_from_directory(\n    src+'train\/',\n    target_size = (INPUT_SIZE, INPUT_SIZE),\n    batch_size = BATCH_SIZE,\n    class_mode = 'binary'\n)\n\ntest_set = testing_data_generator.flow_from_directory(\n    src+'validation\/',\n    target_size = (INPUT_SIZE, INPUT_SIZE),\n    batch_size = BATCH_SIZE,\n    class_mode = 'binary'\n)","f96d906d":"model.fit_generator(training_set, steps_per_epoch = STEPS_PER_EPOCH, epochs = EPOCHS, verbose=1)\n\nscore = model.evaluate_generator(test_set, steps=100)\n\nfor idx, metric in enumerate(model.metrics_names):\n    print(\"{}: {}\".format(metric, score[idx]))","7d76812b":"Changing this:\nmodel_final = Model(input = model.input, output = predictions)\nto\nmodel_final = Model(model.input, predictions)\n"}}