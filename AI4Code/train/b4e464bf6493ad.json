{"cell_type":{"4a149f98":"code","36e351cf":"code","5d7550a3":"code","2e3113b5":"code","d00fdc32":"code","39b8fd84":"code","b8ee2f17":"code","0d0d3d76":"code","986920ad":"code","a937f501":"code","ba24f508":"code","acba45cc":"code","ca5b96fa":"code","7e5f5d5c":"code","1bcca2e3":"markdown","c79b54ac":"markdown","604a4743":"markdown","508a7d72":"markdown","8c55c42c":"markdown","67c7ba55":"markdown","5d8d286e":"markdown","19b85996":"markdown","40a1faaf":"markdown","525c077e":"markdown","4663fc49":"markdown","4d5d9ec9":"markdown"},"source":{"4a149f98":"import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn import datasets","36e351cf":"from sklearn.linear_model import LinearRegression\n\n# Load dataset\nX, y = datasets.load_diabetes(return_X_y=True)\nX = X[:, np.newaxis, 2] # Use only one feature\n\n# Train data\nX_train = X[:-20]\ny_train = y[:-20]\n\n# Test data\nX_test = X[-20:]\ny_test = y[-20:]\n\n# Create the model, train it and predict\nregr = LinearRegression()\nregr.fit(X_train, y_train)\ny_pred = regr.predict(X_test)\n\n# Plot\nplt.scatter(X_test, y_test,  color='blue')\nplt.plot(X_test, y_pred, color='red')\nplt.show()","5d7550a3":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler","2e3113b5":"# Load and inspect the dataset\niris = datasets.load_iris()\n\nfeatures = iris.data\ntarget = iris.target\nprint(iris.target_names)","d00fdc32":"# Split the dataset into train & test data\nX_train, X_test, y_train, y_test = train_test_split(features, target) #, test_size=0.3, random_state=42)\n\n# Normalize the dataset\nscaler = StandardScaler()\n\nX_train = scaler.fit_transform(X_train) # Fit the transformer to and transform the train data\nX_test = scaler.transform(X_test) # Applies the fitted transform to the test data","39b8fd84":"def train(X_train, X_test, y_train, y_test, model, label = True):\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    acc = accuracy_score(y_test, y_pred)\n    if label: print('Accuracy:', acc)","b8ee2f17":"from sklearn.linear_model import LogisticRegression\ntrain(X_train, X_test, y_train, y_test, LogisticRegression())","0d0d3d76":"%%timeit\ntrain(X_train, X_test, y_train, y_test, LogisticRegression(), False)","986920ad":"from sklearn.svm import LinearSVC\ntrain(X_train, X_test, y_train, y_test, LinearSVC())","a937f501":"%%timeit\ntrain(X_train, X_test, y_train, y_test, LinearSVC(), False)","ba24f508":"from sklearn.tree import DecisionTreeClassifier\ntrain(X_train, X_test, y_train, y_test, DecisionTreeClassifier())","acba45cc":"%%timeit\ntrain(X_train, X_test, y_train, y_test, DecisionTreeClassifier(), False)","ca5b96fa":"from sklearn.ensemble import RandomForestClassifier\ntrain(X_train, X_test, y_train, y_test, RandomForestClassifier())","7e5f5d5c":"%%timeit\ntrain(X_train, X_test, y_train, y_test, RandomForestClassifier(), False)","1bcca2e3":"## 3 - Decision Tree","c79b54ac":"# Machine Learning","604a4743":"Given that we have some data (points) we can define a line (linear function) that best fits them.\n\nThe line function is: ![](02\/images\/linear-fn.svg)\n\nThe function for multiple inputs (dimensions): ![](02\/images\/linear-fn-2.svg)\n\nWhere:\n- `x` = the input (data)\n- `a` = the lines slope (weight).","508a7d72":"### a - Load and inspect the dataset","8c55c42c":"## 2 - Support Vector Machine (SVM)","67c7ba55":"Unlike linear regression, it works with categorical data - it answers if the data point is part of a category, instead of predicting y for x - thus it isn't continous.\n\nGiven that we have some data (points) we can define an S-shape (logistic function) that best divides them.\n\nThe line function is: ![](02\/images\/logistic-fn.svg)\n\n\n- `x0` = the x value of the sigmoid's midpoint\n- `L` = the curve's maximum value\n- `k` = the logistic growth rate or steepness of the curve\n\n\n<img src=\"..\/input\/nlp-in-python-1\/02\/images\/logistic-reg.jpg\" width=\"50%\"\/>","5d8d286e":"## 1 - Logistic Regression","19b85996":"Like linear regression, except it includes a margin to better represent the data\n\n<img src=\"02\/images\/svm.png\" width=\"50%\"\/>","40a1faaf":"## 4 - Random Forest","525c077e":"### b - Split and Normalize the dataset","4663fc49":"### c - Train the model","4d5d9ec9":"## 0 - Linear Regression"}}