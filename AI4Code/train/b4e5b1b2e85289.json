{"cell_type":{"eb7e3a47":"code","207c5958":"code","f6c15a60":"code","b5bdfb57":"code","6d13af16":"code","98c41c63":"code","59903f85":"code","5128e744":"code","f7b51df5":"code","ae03b33e":"code","97aea0e9":"code","fda3fb95":"markdown","b6e49878":"markdown","19535340":"markdown","2d905889":"markdown","198d4d9d":"markdown","9d9726cd":"markdown"},"source":{"eb7e3a47":"# General Libs\nfrom tensorflow import keras\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense, BatchNormalization, Dropout, Flatten\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.optimizers import *\nfrom tensorflow.keras.initializers import *\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n%matplotlib inline\n","207c5958":"im_shape = (150,150)\nTRAINING_DIR = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train'\nTEST_DIR = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/test'\n\nseed = random.randint(1, 1000)\n\nBATCH_SIZE = 32\nnum_classes = 2\n\nlearning_rate = 0.0001","f6c15a60":"data_generator = ImageDataGenerator(preprocessing_function=preprocess_input, validation_split=0.33) #rescale=1.\/255,\n\ntrain_generator = data_generator.flow_from_directory(TRAINING_DIR, target_size=(im_shape[0],im_shape[1]), shuffle=True, seed=seed,\n                                                     class_mode='categorical', batch_size=BATCH_SIZE, subset=\"training\")#, color_mode='grayscale')\n\nvalidation_generator = data_generator.flow_from_directory(TRAINING_DIR, target_size=(im_shape[0],im_shape[1]), shuffle=False, seed=seed,\n                                                     class_mode='categorical', batch_size=BATCH_SIZE, subset=\"validation\")#, color_mode='grayscale')\nnb_train_samples = train_generator.samples\nnb_validation_samples = validation_generator.samples","b5bdfb57":"from keras.preprocessing.image import ImageDataGenerator\n\ntest_generator = ImageDataGenerator(preprocessing_function=preprocess_input)#rescale=1.\/255\n\ntest_generator = test_generator.flow_from_directory(TEST_DIR, target_size=(im_shape[0],im_shape[1]), shuffle=False, seed=seed,\n                                                     class_mode='categorical', batch_size=BATCH_SIZE, subset=\"training\")#, color_mode='grayscale')\nnb_test_samples = test_generator.samples\n","6d13af16":"# Looking for some examples\n\nplt.figure(figsize=(20,10))\nplt.subplot(1, 2, 1)\nimg = train_generator.filepaths[np.random.randint(low=0, high=train_generator.samples)]\nprint(img)\nimg = mpimg.imread(img)\nplt.imshow(img);\n\nplt.subplot(1, 2, 2)\nimg = test_generator.filepaths[np.random.randint(low=0, high=test_generator.samples)]\nprint(img)\nimg = mpimg.imread(img)\nplt.imshow(img);","98c41c63":"# Loading MobileNet without top layer\npre_trained_weights = '..\/input\/keras-pretrained-models\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5'\nbase_model = InceptionV3(weights=pre_trained_weights, include_top=False, input_shape=(im_shape[0], im_shape[1], 3))\n\nx = base_model.output\nx = Flatten()(x)\npredictions = Dense(num_classes, activation='softmax', kernel_initializer='random_uniform')(x)\n\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\n# Freezing pretrained layers\nfor layer in base_model.layers:\n    layer.trainable=False\n    \n#optimizer = Adam(lr=learning_rate)\noptimizer = keras.optimizers.RMSprop(lr=0.0001)\nmodel.compile(optimizer=optimizer,loss='categorical_crossentropy',metrics=['accuracy'])","59903f85":"from sklearn.utils import class_weight\nclass_weights = class_weight.compute_class_weight(\n           'balanced',\n            np.unique(train_generator.classes), \n            train_generator.classes)\nclass_weights","5128e744":"epochs = 10\n\n#Salvar o melhor modelo\ncallbacks_list = [\n    keras.callbacks.ModelCheckpoint(\n        filepath='model.h5',\n        monitor='val_loss', save_best_only=True, verbose=1),\n    keras.callbacks.EarlyStopping(monitor='val_loss', patience=50,verbose=1)\n]\n\nhistory = model.fit(\n        train_generator,\n        steps_per_epoch=nb_train_samples \/\/ BATCH_SIZE,\n        epochs=epochs,\n        callbacks = callbacks_list,\n        validation_data=validation_generator,\n        verbose = 1,\n        validation_steps=nb_validation_samples \/\/ BATCH_SIZE,\n        class_weight = class_weights)\n\n","f7b51df5":"#Vamos ver como foi o treino?\nimport matplotlib.pyplot as plt\n\nhistory_dict = history.history\nloss_values = history_dict['loss']\nval_loss_values = history_dict['val_loss']\n\nepochs_x = range(1, len(loss_values) + 1)\nplt.figure(figsize=(10,10))\nplt.subplot(2,1,1)\nplt.plot(epochs_x, loss_values, 'bo', label='Training loss')\nplt.plot(epochs_x, val_loss_values, 'b', label='Validation loss')\nplt.title('Training and validation Loss and Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\n#plt.legend()\nplt.subplot(2,1,2)\nacc_values = history_dict['accuracy']\nval_acc_values = history_dict['val_accuracy']\nplt.plot(epochs_x, acc_values, 'bo', label='Training acc')\nplt.plot(epochs_x, val_acc_values, 'b', label='Validation acc')\n#plt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Acc')\nplt.legend()\nplt.show()","ae03b33e":"from tensorflow.keras.models import load_model\n# Load the best saved model\nmodel = load_model('model.h5')","97aea0e9":"# Vendo alguns reports\n# Usando sklearn\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport numpy as np\n\n#Confution Matrix and Classification Report\nY_pred = model.predict_generator(test_generator, nb_test_samples \/\/ BATCH_SIZE+1)\ny_pred = np.argmax(Y_pred, axis=1)\nprint('Confusion Matrix')\nprint(confusion_matrix(test_generator.classes, y_pred))\nprint('Classification Report')\ntarget_names = ['Normal', 'Pneumo']\nprint(classification_report(test_generator.classes, y_pred, target_names=target_names))\n","fda3fb95":"As we can, it was not a good result. We experienced a high overfitting. Maybe the unbalanced dataset made the training hard.","b6e49878":"**Abstract:**\n\nThis notebook aims to show how to perform a Transfer Learning model for Pneumonia classification of chest x-ray images. We used InceptionV3, which is available together with keras\/tensorflow framework. Transfer Learning is performed by loading the model trained for ImageNet challenge, but without the top layer. These layers are freezed and then new classification layers are added and trained.\n\n**It is not our goal to develop the best classification model**. The examples here are simple to help students.\n\n---\n\n**TO DO:**\n* Test other models\n* Test a custom model\n* Develop a model to detect viral or bacterian pneumonia\n\n** Thanks to **\n* Paul Mooney for the [dataset](https:\/\/www.kaggle.com\/paultimothymooney\/chest-xray-pneumonia)\n","19535340":"# Evaluation","2d905889":"# Pneumonia Dataset","198d4d9d":"# Transfer Learning","9d9726cd":"# Training"}}