{"cell_type":{"5edcfbf3":"code","d822d4ff":"code","c647d6dd":"code","2790a1ea":"code","550487b4":"code","66b35b48":"code","b57a70ce":"code","ef34bb93":"code","a389d0bc":"code","5bcba4c9":"code","5fd154f1":"code","1e8b56cb":"code","4d744c76":"code","aa39c038":"code","f3e4151d":"code","8ddcd850":"code","1755032f":"code","4bc6ae95":"code","9f23e823":"code","8de6bf43":"code","0ce13647":"code","db4d7646":"code","594f7426":"code","8814f37b":"code","fb7793ac":"code","ad59d8fa":"code","3533b9cd":"code","2dbdbf6b":"code","dc05aa57":"code","c29f16a7":"code","84d65cc5":"code","0c2a83ea":"code","6da936ed":"code","1d5e008d":"code","b0d3eaae":"markdown","da3331a2":"markdown","e5a83a8a":"markdown","c4741fec":"markdown","420e3479":"markdown","df79ebe1":"markdown","ef9e5e65":"markdown","2c824e2f":"markdown","eebc771d":"markdown","21d93885":"markdown","5955fd8c":"markdown","f31799de":"markdown","d78c923c":"markdown","b85bf04e":"markdown","cd92f2d3":"markdown","e637c3b6":"markdown","5916abff":"markdown","b7d07677":"markdown","32c2719d":"markdown","d3b38c6e":"markdown","1cdba7e1":"markdown","b84147e6":"markdown","e6a01458":"markdown","62e00fa1":"markdown","6ded96fb":"markdown","f8e1f5c5":"markdown","ee1bbdb0":"markdown"},"source":{"5edcfbf3":"# import necessary libraries\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport numpy as np\n\nfrom matplotlib import pyplot as plt\n\nfrom nltk.corpus import brown\nfrom nltk.corpus import treebank\nfrom nltk.corpus import conll2000\n\nimport seaborn as sns\n\nfrom gensim.models import KeyedVectors\n\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras import Sequential, Input, Model\nfrom tensorflow.keras.layers import Embedding, Dense, TimeDistributed, LSTM, GRU, Bidirectional, SimpleRNN, RNN\nfrom tensorflow.keras.preprocessing.text import Tokenizer\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle","d822d4ff":"import nltk\nnltk.download('treebank')\nnltk.download('brown')\nnltk.download('conll2000')\nnltk.download('universal_tagset')\n\n# load POS tagged corpora from NLTK\ntreebank_corpus = treebank.tagged_sents(tagset='universal')\nbrown_corpus = brown.tagged_sents(tagset='universal')\nconll_corpus = conll2000.tagged_sents(tagset='universal')\ntagged_sentences = treebank_corpus + brown_corpus + conll_corpus","c647d6dd":"# let's look at the data\ntagged_sentences[11]","2790a1ea":"X = [] # store input sequence\nY = [] # store output sequence\n\nfor sentence in tagged_sentences:\n    X_sentence = []\n    Y_sentence = []\n    for entity in sentence:         \n        X_sentence.append(entity[0])  # entity[0] contains the word\n        Y_sentence.append(entity[1])  # entity[1] contains corresponding tag\n        \n    X.append(X_sentence)\n    Y.append(Y_sentence)","550487b4":"num_words = len(set([word.lower() for sentence in X for word in sentence]))\nnum_tags   = len(set([word.lower() for sentence in Y for word in sentence]))","66b35b48":"print(\"Total number of tagged sentences: {}\".format(len(X)))\nprint(\"Vocabulary size: {}\".format(num_words))\nprint(\"Total number of tags: {}\".format(num_tags))","b57a70ce":"# let's look at first data point\n# this is one data point that will be fed to the RNN\nprint('sample X: ', X[0], '\\n')\nprint('sample Y: ', Y[0], '\\n')","ef34bb93":"# In this many-to-many problem, the length of each input and output sequence must be the same.\n# Since each word is tagged, it's important to make sure that the length of input sequence equals the output sequence\nprint(\"Length of first input sequence  : {}\".format(len(X[0])))\nprint(\"Length of first output sequence : {}\".format(len(Y[0])))","a389d0bc":"# encode X\n\nword_tokenizer = Tokenizer()                      # instantiate tokeniser\nword_tokenizer.fit_on_texts(X)                    # fit tokeniser on data\nX_encoded = word_tokenizer.texts_to_sequences(X)  # use the tokeniser to encode input sequence","5bcba4c9":"# encode Y\n\ntag_tokenizer = Tokenizer()\ntag_tokenizer.fit_on_texts(Y)\nY_encoded = tag_tokenizer.texts_to_sequences(Y)","5fd154f1":"# look at first encoded data point\n\nprint(\"** Raw data point **\", \"\\n\", \"-\"*100, \"\\n\")\nprint('X: ', X[0], '\\n')\nprint('Y: ', Y[0], '\\n')\nprint()\nprint(\"** Encoded data point **\", \"\\n\", \"-\"*100, \"\\n\")\nprint('X: ', X_encoded[0], '\\n')\nprint('Y: ', Y_encoded[0], '\\n')","1e8b56cb":"# make sure that each sequence of input and output is same length\n\ndifferent_length = [1 if len(input) != len(output) else 0 for input, output in zip(X_encoded, Y_encoded)]\nprint(\"{} sentences have disparate input-output lengths.\".format(sum(different_length)))","4d744c76":"# check length of longest sentence\nlengths = [len(seq) for seq in X_encoded]\nprint(\"Length of longest sentence: {}\".format(max(lengths)))","aa39c038":"sns.boxplot(lengths)\nplt.show()","f3e4151d":"# Pad each sequence to MAX_SEQ_LENGTH using KERAS' pad_sequences() function. \n# Sentences longer than MAX_SEQ_LENGTH are truncated.\n# Sentences shorter than MAX_SEQ_LENGTH are padded with zeroes.\n\n# Truncation and padding can either be 'pre' or 'post'. \n# For padding we are using 'pre' padding type, that is, add zeroes on the left side.\n# For truncation, we are using 'post', that is, truncate a sentence from right side.\n\nMAX_SEQ_LENGTH = 100  # sequences greater than 100 in length will be truncated\n\nX_padded = pad_sequences(X_encoded, maxlen=MAX_SEQ_LENGTH, padding=\"pre\", truncating=\"post\")\nY_padded = pad_sequences(Y_encoded, maxlen=MAX_SEQ_LENGTH, padding=\"pre\", truncating=\"post\")","8ddcd850":"# print the first sequence\nprint(X_padded[0], \"\\n\"*3)\nprint(Y_padded[0])","1755032f":"# assign padded sequences to X and Y\nX, Y = X_padded, Y_padded","4bc6ae95":"# word2vec download link (Size ~ 1.5GB): https:\/\/drive.google.com\/file\/d\/0B7XkCwpI5KDYNlNUTTlSS21pQmM\/edit\n\npath = '..\/input\/googlenewsvectorsnegative300\/GoogleNews-vectors-negative300.bin'\n\n# load word2vec using the following function present in the gensim library\nword2vec= KeyedVectors.load_word2vec_format(path, binary=True)","9f23e823":"# word2vec effectiveness\nword2vec.most_similar(positive = [\"King\", \"Woman\"], negative = [\"Man\"])","8de6bf43":"# assign word vectors from word2vec model\n\nEMBEDDING_SIZE  = 300  # each word in word2vec model is represented using a 300 dimensional vector\nVOCABULARY_SIZE = len(word_tokenizer.word_index) + 1\n\n# create an empty embedding matix\nembedding_weights = np.zeros((VOCABULARY_SIZE, EMBEDDING_SIZE))\n\n# create a word to index dictionary mapping\nword2id = word_tokenizer.word_index\n\n# copy vectors from word2vec model to the words present in corpus\nfor word, index in word2id.items():\n    try:\n        embedding_weights[index, :] = word2vec[word]\n    except KeyError:\n        pass","0ce13647":"# check embedding dimension\nprint(\"Embeddings shape: {}\".format(embedding_weights.shape))","db4d7646":"# let's look at an embedding of a word\nembedding_weights[word_tokenizer.word_index['joy']]","594f7426":"# use Keras' to_categorical function to one-hot encode Y\nY = to_categorical(Y)","8814f37b":"# print Y of the first output sequqnce\nprint(Y.shape)","fb7793ac":"# split entire data into training and testing sets\nTEST_SIZE = 0.15\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=TEST_SIZE, random_state=4)","ad59d8fa":"# split training data into training and validation sets\nVALID_SIZE = 0.15\nX_train, X_validation, Y_train, Y_validation = train_test_split(X_train, Y_train, test_size=VALID_SIZE, random_state=4)","3533b9cd":"# print number of samples in each set\nprint(\"TRAINING DATA\")\nprint('Shape of input sequences: {}'.format(X_train.shape))\nprint('Shape of output sequences: {}'.format(Y_train.shape))\nprint(\"-\"*50)\nprint(\"VALIDATION DATA\")\nprint('Shape of input sequences: {}'.format(X_validation.shape))\nprint('Shape of output sequences: {}'.format(Y_validation.shape))\nprint(\"-\"*50)\nprint(\"TESTING DATA\")\nprint('Shape of input sequences: {}'.format(X_test.shape))\nprint('Shape of output sequences: {}'.format(Y_test.shape))","2dbdbf6b":"# total number of tags\nNUM_CLASSES = Y.shape[2]","dc05aa57":"# create architecture\n\nlstm_model = Sequential()\nlstm_model.add(Embedding(input_dim     = VOCABULARY_SIZE,         # vocabulary size - number of unique words in data\n                         output_dim    = EMBEDDING_SIZE,          # length of vector with which each word is represented\n                         input_length  = MAX_SEQ_LENGTH,          # length of input sequence\n                         weights       = [embedding_weights],     # word embedding matrix\n                         trainable     = True                     # True - update embeddings_weight matrix\n))\nlstm_model.add(LSTM(64, return_sequences=True))\nlstm_model.add(TimeDistributed(Dense(NUM_CLASSES, activation='softmax')))","c29f16a7":"lstm_model.compile(loss      =  'categorical_crossentropy',\n                   optimizer =  'adam',\n                   metrics   =  ['acc'])","84d65cc5":"# check summary of the model\nlstm_model.summary()","0c2a83ea":"lstm_training = lstm_model.fit(X_train, Y_train, batch_size=128, epochs=10, validation_data=(X_validation, Y_validation))","6da936ed":"# visualise training history\nplt.plot(lstm_training.history['acc'])\nplt.plot(lstm_training.history['val_acc'])\nplt.title('model accuracy')\nplt.grid()\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc=\"lower right\")\nplt.show()","1d5e008d":"loss, accuracy = lstm_model.evaluate(X_test, Y_test, verbose = 1)\nprint(\"Loss: {0},\\nAccuracy: {1}\".format(loss, accuracy))","b0d3eaae":"# Preprocess data","da3331a2":"We'll use pre-trained word embeddings in following models and allow them to be updated as well. ","e5a83a8a":"Since this is a **many-to-many** problem, each data point will be a different sentence of the corpora.\n\nEach data point will have multiple words in the **input sequence**. This is what we will refer to as **X**.\n\nEach word will have its correpsonding tag in the **output sequence**. This what we will refer to as **Y**.\n\nSample dataset:\n\n|                    X                        |                 Y                |\n|---------------------------------------------|----------------------------------|\n|   Mr. Vinken is chairman of Elsevier        |   NOUN NOUN VERB NOUN ADP NOUN   |\n|     We have no useful information           |      PRON VERB DET ADJ NOUN      |","c4741fec":"# Notebook layout\n1. Preprocess data\n2. Vanilla RNN\n3. Word Embeddings\n4. LSTM\n5. GRU\n6. Bidirectional LSTM\n7. Model Evaluation","420e3479":"## Create model architecture","df79ebe1":"# POS Tagging - An Overview","ef9e5e65":"## Load data","2c824e2f":"### Use one-hot encoding for output sequences (Y)","eebc771d":"To use word embeddings, you can go for either of the following models:\n1. word2vec model: https:\/\/code.google.com\/archive\/p\/word2vec\/\n2. GloVe model : https:\/\/nlp.stanford.edu\/projects\/glove\/\n\nWe're using the word2vec model for no particular reason. Both of these are very efficient in representing words. You can try both and see which one works better.\n\nDimensions of a word embedding is: (VOCABULARY_SIZE, EMBEDDING_DIMENSION)","21d93885":"## Pad sequences","5955fd8c":"The next step after encoding the data is to **define the sequence lengths**. As of now, the sentences present in the data are of various lengths. We need to either pad short sentences or truncate long sentences to a fixed length. This fixed length, however, is a **hyperparameter**.","f31799de":"# LSTM","d78c923c":"## Word embeddings","b85bf04e":"# Model evaluation","cd92f2d3":"Currently, each word and each tag is encoded as an integer. \n\nWe'll use a more sophisticated technique to represent the input words (X) using what's known as **word embeddings**.\n\nHowever, to represent each tag in Y, we'll simply use **one-hot encoding** scheme since there are only 13 tags in the dataset and the LSTM will have no problems in learning its own representation of these tags.","e637c3b6":"Before using RNN, we must make sure the dimensions of the data are what an RNN expects. In general, an RNN expects the following shape\n\nShape of X:\n(#samples, #timesteps, #features)\n\nShape of Y:\n(#samples, #timesteps, #features)\n\n![RNN tensor shape](.\/jupyter resources\/rnn_tensor.png)\n\nNow, there can be various variations in the shape that you use to feed an RNN depending on the type of architecture. Since the problem we're working on has a many-to-many architecture, the input and the output both include number of timesteps which is nothing but the sequence length. But notice that the tensor X doesn't have the third dimension, that is, number of features. That's because we're going to use word embeddings before feeding in the data to an RNN, and hence there is no need to explicitly mention the third dimension. That's because when you use the Embedding() layer in Keras, you the training data will automatically be converted to (#samples, #timesteps, #features) where #features will be the embedding dimention (and note that the Embedding layer is always the very first layer of an RNN). While using the embedding layer we only need to reshape the data to (#samples, #timesteps) which is what we have done. However, note that you'll need to shape it to (#samples, #timesteps, #features) in case you don't use the Embedding() layer in Keras.","5916abff":"The process of classifying words into their __parts of speech__ and labeling them accordingly is known as **part-of-speech tagging**, or simply **POS-tagging**.\n\nThe NLTK library has a number of corpora which contains word and its POS tag. The following table provide information about each tag:\n\n![POS tags](.\/jupyter resources\/pos_tagging.png)","b7d07677":"#### Encode X and Y to integer values\n\nWe'll use the Tokenizer() function from Keras library to encode text sequence to integer sequence","32c2719d":"## Divide data in words (X) and tags (Y)","d3b38c6e":"Next :\n\nPart 5 : https:\/\/www.kaggle.com\/gauravduttakiit\/pos-tagging-part-5","1cdba7e1":"## Split data in training, validation and tesing sets","b84147e6":"## Fit model","e6a01458":"## Vectorise X and Y","62e00fa1":"### Use word embeddings for input sequences (X)","6ded96fb":"RNN will learn the zero to zero mapping while training. So we don't need to worry about the padded zeroes. Please note that zero is not reserved for any word or tag, it's only reserved for padding.","f8e1f5c5":"Previous :\n\nPart 3 : https:\/\/www.kaggle.com\/gauravduttakiit\/pos-tagging-part-3","ee1bbdb0":"## Compile model"}}