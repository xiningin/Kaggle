{"cell_type":{"1db4dd9e":"code","87324c4d":"code","33389c50":"code","858af6fe":"code","bd80a2f1":"code","a30415d7":"code","5e11564c":"code","10b59e82":"code","36f15c38":"code","58a2cd7f":"code","5988aacc":"code","7177a440":"code","f53785da":"code","7e1cbf4b":"code","bc690fd6":"code","05dc5407":"code","7edd8185":"code","289048f1":"code","f851235e":"code","dac2cf9c":"code","706888d9":"code","4ab0e441":"code","cd711bbf":"code","c0564e36":"code","a49a71a9":"code","4964d6b1":"code","9b3574bc":"code","be1bab17":"code","94e5486a":"code","ff891b8e":"markdown","80741b11":"markdown","6dcfaeb7":"markdown","6aa02e5a":"markdown","a5eca942":"markdown","1fac1f62":"markdown","883612f8":"markdown","4ed1d2de":"markdown","593eab68":"markdown","fefa4e43":"markdown","a7f7c0ef":"markdown"},"source":{"1db4dd9e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import StandardScaler\n\nfrom threading import Thread\n\n%matplotlib inline\n# Any results you write to the current directory are saved as output.","87324c4d":"df = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","33389c50":"df.info()","858af6fe":"df.groupby('vendor_id').count()['id'].plot.bar()","bd80a2f1":"one = df.groupby('vendor_id').count()['id'].iloc[0:1]\ntwo = df.groupby('vendor_id').count()['id'].iloc[1:2]\n\nprint('Vendor_id 2 has received ' , np.subtract(two, one).values[0], 'more bookings then Vendor_id 1.')","a30415d7":"f, axes = plt.subplots(2,figsize=(30, 15), sharex=False, sharey = False)\nsns.distplot(df['pickup_latitude'], label = 'pickup_latitude',color=\"y\",bins = 100, ax=axes[0], hist=False).tick_params(labelsize=20)\nsns.distplot(df['pickup_longitude'], label = 'pickup_longitude',color=\"y\",bins =100, ax=axes[1], hist=False).tick_params(labelsize=20)","5e11564c":"f, axes = plt.subplots(2,figsize=(30, 15), sharex=False, sharey = False)\nsns.distplot(df['dropoff_latitude'], label = 'dropoff_latitude',color=\"y\",bins = 100, ax=axes[0], hist=False).tick_params(labelsize=20)\nsns.distplot(df['dropoff_longitude'], label = 'dropoff_longitude',color=\"y\",bins =100, ax=axes[1], hist=False).tick_params(labelsize=20)","10b59e82":"df['passenger_count'].value_counts()[0:6].plot(kind='pie', subplots=True, figsize=(8, 8))\n\npassenger_1_percentage = df['passenger_count'].value_counts().values[0]\/df['passenger_count'].count()\nprint(passenger_1_percentage)","36f15c38":"df.isna().sum()","58a2cd7f":"# approximate radius of earth in km\nR = 6371.0\n\n#df\nlat1 = np.radians(df['pickup_latitude'])\nlon1 = np.radians(df['pickup_longitude'])\nlat2 = np.radians(df['dropoff_latitude']) \nlon2 = np.radians(df['dropoff_longitude'])\n\ndlon = lon2 - lon1\ndlat = lat2 - lat1\n\na = np.sin(dlat \/ 2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon \/ 2)**2\nc = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))\n\ndistance = R * c\n\ndistance_df = pd.DataFrame({'travel_distance_km':distance})\ndf['travel_distance_km'] = distance_df\n\nprint(np.mean(distance_df))\n\n#Test\n\nlat1 = np.radians(test['pickup_latitude'])\nlon1 = np.radians(test['pickup_longitude'])\nlat2 = np.radians(test['dropoff_latitude']) \nlon2 = np.radians(test['dropoff_longitude'])\n\ndlon = lon2 - lon1\ndlat = lat2 - lat1\n\na = np.sin(dlat \/ 2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon \/ 2)**2\nc = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))\n\ndistance = R * c\n\ndistance_df = pd.DataFrame({'travel_distance_km':distance})\ntest['travel_distance_km'] = distance_df\n","5988aacc":"#df\ndf['pickup_datetime'] = pd.to_datetime(df['pickup_datetime'])\ndf['dropoff_datetime'] = pd.to_datetime(df['dropoff_datetime'])\n\ndf['hour_pickup'] = np.array(df['pickup_datetime'].dt.hour)\ndf['day_pickup'] = np.array(df['pickup_datetime'].dt.day_name())\n\n#test\ntest['pickup_datetime'] = pd.to_datetime(test['pickup_datetime'])\n\ntest['hour_pickup'] = np.array(test['pickup_datetime'].dt.hour)\ntest['day_pickup'] = np.array(test['pickup_datetime'].dt.day_name())","7177a440":"sns.set(rc={'figure.figsize':(15,10)})\nsns.distplot(df['travel_distance_km'],hist=False)","f53785da":"sns.distplot(df[ \n        (df['travel_distance_km'] >= 0) & \n        (df['travel_distance_km'] < 200)\n                                        ]['travel_distance_km'],hist=False)","7e1cbf4b":"category_dict = {'0-5': 0,'5-10': 0, '10-15': 0, '15-20': 0, '20-25':0 }\n\nfor x in np.array(df[(df['travel_distance_km'] >= 0) & (df['travel_distance_km'] < 25)]['travel_distance_km']): \n    \n    if x <= 5: \n        category_dict['0-5'] = category_dict['0-5'] + 1\n        \n    elif x > 5 and x <= 10 : \n        category_dict['5-10'] = category_dict['5-10'] + 1\n    \n    elif x > 10 and x <= 15 :\n        category_dict['10-15'] = category_dict['10-15'] + 1\n\n    elif x > 15 and x <= 20 :\n        category_dict['15-20'] = category_dict['15-20'] + 1\n    \n    elif x > 20 and x <= 25 :\n        category_dict['20-25'] = category_dict['20-25'] + 1\n        \npd.DataFrame(category_dict, index=[0]).T.plot(kind='pie', subplots=True, figsize=(8, 8))\nplt.title('Percentage of Trips Between 0 to 25 km')\n\nprint('% of trips between 0 to 5 km for the trip distance between 0 to 25 km dataset : ', category_dict['0-5']\/sum(category_dict.values()))","bc690fd6":"df[(df['travel_distance_km'] >= 0) & (df['travel_distance_km'] < 25) & (df['trip_duration'] < 20000) ]['trip_duration'].hist(bins=300)\n\nplt.title('Duration for Trips between 0 to 25km')\nplt.xlabel('Duration in Seconds')\nplt.ylabel('Frequency')\n\nprint('mode : ', df[(df['travel_distance_km'] >= 0) & (df['travel_distance_km'] < 25) & (df['trip_duration'] < 20000) ]['trip_duration'].mode()[0])\nprint('mean :' , df[(df['travel_distance_km'] >= 0) & (df['travel_distance_km'] < 25) & (df['trip_duration'] < 20000) ]['trip_duration'].mean())\nprint('median :' , df[(df['travel_distance_km'] >= 0) & (df['travel_distance_km'] < 25) & (df['trip_duration'] < 20000) ]['trip_duration'].median())\n\n","05dc5407":"np.log(df[(df['travel_distance_km'] >= 0) & (df['travel_distance_km'] < 25)]['trip_duration']).plot.hist(bins=300)\nplt.title('log(Duration for Trips between 0 to 25km)')\nplt.xlabel('log(Duration in Seconds)')\nplt.ylabel('Frequency')","7edd8185":"sns.scatterplot(\n    x=df[(df['travel_distance_km'] > 0) & (df['travel_distance_km'] < 25) & (df['trip_duration'] < 20000)]['trip_duration'], \n    y=df[(df['travel_distance_km'] > 0) & (df['travel_distance_km'] < 25) & (df['trip_duration'] < 20000)]['travel_distance_km'])","289048f1":"df['day_pickup'] = df['day_pickup'].astype('category').cat.codes\ndf['store_and_fwd_flag'] = df['store_and_fwd_flag'].astype('category').cat.codes\n\ntest['day_pickup'] = test['day_pickup'].astype('category').cat.codes\ntest['store_and_fwd_flag'] = test['store_and_fwd_flag'].astype('category').cat.codes","f851235e":"scaler = StandardScaler()\n\nscaler.fit(df[['vendor_id','passenger_count', \n        'pickup_longitude', 'pickup_latitude',\n       'dropoff_longitude', 'dropoff_latitude', 'store_and_fwd_flag',\n        'travel_distance_km', 'hour_pickup',\n       'day_pickup']])\n\nscaled_features = scaler.transform(df[['vendor_id','passenger_count', \n        'pickup_longitude', 'pickup_latitude',\n       'dropoff_longitude', 'dropoff_latitude', 'store_and_fwd_flag',\n        'travel_distance_km', 'hour_pickup',\n       'day_pickup']])\n\ndf_feat = pd.DataFrame(scaled_features, columns=['vendor_id','passenger_count', \n        'pickup_longitude', 'pickup_latitude',\n       'dropoff_longitude', 'dropoff_latitude', 'store_and_fwd_flag',\n        'travel_distance_km', 'hour_pickup',\n       'day_pickup'])\n\n\nscaler_test = StandardScaler()\n\nscaler_test.fit(test[['vendor_id','passenger_count', \n        'pickup_longitude', 'pickup_latitude',\n       'dropoff_longitude', 'dropoff_latitude', 'store_and_fwd_flag',\n        'travel_distance_km', 'hour_pickup',\n       'day_pickup']])\n\nscaled_features_test = scaler.transform(test[['vendor_id','passenger_count', \n        'pickup_longitude', 'pickup_latitude',\n       'dropoff_longitude', 'dropoff_latitude', 'store_and_fwd_flag',\n        'travel_distance_km', 'hour_pickup',\n       'day_pickup']])\n\ndf_feat_test = pd.DataFrame(scaled_features_test, columns=['vendor_id','passenger_count', \n        'pickup_longitude', 'pickup_latitude',\n       'dropoff_longitude', 'dropoff_latitude', 'store_and_fwd_flag',\n        'travel_distance_km', 'hour_pickup',\n       'day_pickup'])\n\ntest = pd.concat([test['id'],df_feat_test], axis=1)\n","dac2cf9c":"X = df_feat\n\ny = np.log(df['trip_duration'])\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","706888d9":"X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, random_state=42)","4ab0e441":"X_train.shape","cd711bbf":"rmse_rfr = []\n\ndef func_rfr(num): \n    rfr = RandomForestRegressor(n_estimators=num)\n    rfr.fit(X_train, y_train)\n    pred = rfr.predict(X_valid)\n    rmse_rfr.append(np.sqrt(mean_squared_error(y_valid, pred)))","c0564e36":"if __name__ == '__main__':\n    Thread(target = func_rfr(20)).start()\n    Thread(target = func_rfr(50)).start()\n    Thread(target = func_rfr(100)).start()","a49a71a9":"sns.lineplot(y=rmse_rfr, x=[20,50,100], markers=True)","4964d6b1":"rfr = RandomForestRegressor(n_estimators=100)\nrfr.fit(X_train, y_train)\npred = rfr.predict(X_valid)\nscore_rfr = cross_val_score(rfr, X_train, y_train, cv=5, scoring='neg_mean_squared_log_error')","9b3574bc":"print('cross_val_score average: ', abs(np.mean(score_rfr)))\nprint('MAE: ',mean_absolute_error(y_valid, pred))\nprint('MSE: ',mean_squared_error(y_valid, pred))\nprint('RMSE: ',np.sqrt(mean_squared_error(y_valid, pred)))","be1bab17":"pred = rfr.predict(test[['vendor_id','passenger_count',\n       'pickup_longitude', 'pickup_latitude', 'dropoff_longitude',\n       'dropoff_latitude', 'store_and_fwd_flag', 'travel_distance_km',\n       'hour_pickup', 'day_pickup']])","94e5486a":"arr_id = test['id']\nsubmission = pd.DataFrame({'id': arr_id, 'trip_duration': np.exp(pred)})\nprint(submission)\n\nsubmission.to_csv(\"submit_file.csv\", index=False)","ff891b8e":"We can conclude that most trips are between 0 to 25 km. Let's zoom in one more time :","80741b11":"## Predictions","6dcfaeb7":"70.86% of people travel by themselves.\n\n## Data Preprocessing","6aa02e5a":"**Data Exploration **","a5eca942":"The scatter plot shows the relationship between the distance and the time duration. We can see that there is a correlation between trip duration and distance. In other words, the further the distance the more time the taxi will take. \n\nThe trip duration must have a correlation with traffic during peak hours so let's break down the hour and the day of the week in separate columns. \n","1fac1f62":" #### RandomForestRegressor","883612f8":"This is a distribution of the duration for trips only between 0 to 25 km. As we can clearly see, the distribution is skewed to the right.\n\nBelow is the log distribution including the outliers.","4ed1d2de":"## Model Selection","593eab68":"- We can conclude that 82% of the trips are between 0 to 5 km only for the travel distance between 0 to 25 km. ","fefa4e43":"**Data Loading**","a7f7c0ef":"## Feature Engineering \n\nTravel distance based on dropoff and pickup locations: "}}