{"cell_type":{"638fa05d":"code","7da2daf9":"code","43431f39":"code","98cc2bd7":"code","53b03c20":"code","2ab1fe2d":"code","b9fd8047":"code","0410820f":"code","2228df75":"code","09a72268":"code","a7c63ebe":"code","d5d8b74f":"code","bf886ec2":"code","de11b479":"code","1458cdc7":"code","8be1cfbc":"code","87593b87":"code","967f4faf":"code","a3093f62":"code","c61407fe":"code","e975c6de":"code","f31bcea1":"code","14b23bf2":"code","2e1ab85e":"code","66dc02f1":"code","e90e1a45":"code","dbcb99a7":"code","f9d19de7":"code","5a7aa95d":"code","26711095":"code","2eada9ff":"code","dc0f78eb":"code","25623a94":"code","2277c71f":"code","d6fa41f2":"code","11afe317":"code","a93d25a3":"code","041f9c2b":"code","cde1a8a2":"code","359ebca8":"code","2dcddbea":"code","0517e55d":"code","8037d495":"markdown","9ec65aa7":"markdown","ac567c19":"markdown","a5a77432":"markdown","77decc4d":"markdown","cb390cf4":"markdown","0ca780d6":"markdown","18b4946f":"markdown","50a67e6f":"markdown","00de3c5e":"markdown","780d7743":"markdown","cf67d192":"markdown","c0a88ff1":"markdown","56edce41":"markdown","b714e700":"markdown","bd66e426":"markdown","aa276ebf":"markdown"},"source":{"638fa05d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7da2daf9":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntrain.head()","43431f39":"test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nTEST_ID = test['Id']\ntest.head()","98cc2bd7":"## \u76ee\u7684\u5909\u6570\u3068\u306e\u76f8\u95a2\u95a2\u4fc2\u3092\u307f\u308b\n(train.corr()**2)[\"SalePrice\"].sort_values(ascending = False)[1:]\n\n## corr()\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u30c7\u30fc\u30bf\u578b\u304cobject\uff08\u6587\u5b57\u5217\uff09\u306e\u5217\u306f\u9664\u5916","53b03c20":"train.corr()['SalePrice'].sort_values(ascending = False)","2ab1fe2d":"# GrLivArea\ntrain.loc[train.GrLivArea > 4000].loc[train.SalePrice <= 200000]","b9fd8047":"# TotalBsmtSF\ntrain.loc[train.TotalBsmtSF > 6000]","0410820f":"# 1stFlrSF\ntrain.loc[train['1stFlrSF'] > 4000]","2228df75":"# YearRemodAdd\ntrain.loc[1990 < train.YearRemodAdd].loc[train.YearRemodAdd < 2000].loc[train.SalePrice > 600000]","09a72268":"train.drop(train.index[[523, 691, 1169, 1182, 1298]])","a7c63ebe":"all_data = pd.concat((train, test)).reset_index(drop = True)","d5d8b74f":"# object\u3092\u9664\u5916 = \u6570\u5024\u5909\u6570\u2192\u6b20\u640d\u3092\u4e2d\u592e\u5024\u3067\nfor feature in all_data.select_dtypes(exclude=['object']).columns:\n        all_data[feature].fillna(all_data[feature].median(), inplace = True)\n\n# object\u3092\u62bd\u51fa = \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u2192\u6b20\u640d\u3092\u6700\u983b\u5024\u3067\nfor feature in all_data.select_dtypes(include=['object']).columns: \n        all_data[feature].fillna(all_data[feature].value_counts().idxmax(), inplace = True)","bf886ec2":"from scipy.stats import skew\n\n# \u6570\u5024\u5909\u6570\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\n# \u6b6a\u5ea6\u8a08\u7b97\nskewed_feats = train[numeric_feats].apply(lambda x: skew(x.dropna()))\n\nskewed_feats = skewed_feats[skewed_feats > 0.75] # \u7d5e\u308b\nskewed_feats = skewed_feats.index\n\nall_data[skewed_feats] = np.log1p(all_data[skewed_feats])","de11b479":"f_drop_column = [\n    'BsmtFinSF1',\n    'LotFrontage',\n    'WoodDeckSF',\n    '2ndFlrSF',\n    'OpenPorchSF',\n    'HalfBath',\n    'LotArea',\n    'BsmtFullBath',\n    'BsmtUnfSF',\n    'BedroomAbvGr',\n    'ScreenPorch',\n    'PoolArea',\n    'MoSold',\n    '3SsnPorch',\n    'BsmtFinSF2',\n    'BsmtHalfBath',\n    'MiscVal',\n    'Id',\n    'LowQualFinSF',\n    'YrSold',\n    'OverallCond',\n    'MSSubClass',\n    'EnclosedPorch',\n    'KitchenAbvGr'\n]","1458cdc7":"all_data.drop(f_drop_column, axis=1, inplace=True)","8be1cfbc":"MSZoning_map = {'RL':1, 'RM':0, 'C (all)':0, 'FV':1, 'RH':0}\nStreet_map = {\"Pave\":1, \"Grvl\":1}\nAlley_map = {\"Grvl\":1, \"Pave\":1}\nLotShape_map = {\"Reg\":0, \"IR1\":1, \"IR2\":1, \"IR3\":1}\nLandContour_map = {\"Lv1\":0, \"Bnk\":0, \"Low\":1, \"HLS\":1}\nUtilities_map = {\"AllPub\":1, \"NoSeWa\":1}\nLotConfig_map = {\"Inside\":0, \"FR2\":0, \"Corner\":0, \"CulDSac\":1, \"FR3\":1}\nLandSlope_map = {\"Gtl\":1, \"Mod\":1, \"Sev\":1}\nNeighborhood_map = {\n    'CollgCr':1, 'Veenker':1, 'Crawfor':1, 'NoRidge':2, 'Mitchel':0, 'Somerst':1, 'NAmes':1, 'OldTown':0, 'BrkSide':0,\n    'Sawyer':0, 'NridgHt':2, 'NWAmes':0, 'SawyerW':1, 'IDOTRR':0, 'MeadowV':0, 'Edwards':0, 'Timber':1, 'Gilbert':1,\n    'StoneBr':2, 'ClearCr':1, 'NPkVill':0, 'Blmngtn':1, 'BrDale':0, 'SWISU':0, 'Blueste':0,\n}\nCondition1_map = {\n    \"Norm\":0, \"Feedr\":0, \"PosN\":1, \"Artery\":0, \"RRAe\":0, \"RRNn\":1, \"RRAn\":0, \"PosA\":1, \"RRNe\":0\n}\nCondition2_map = {\n    \"Norm\":0, \"Artery\":0, \"RRNn\":0, \"Feedr\":0, \"PosN\":1, \"PosA\":1, \"RRAn\":0, \"RRAe\":0,\n}\nBldgType_map = {\n    \"1Fam\":1, \"2fmCon\":1, \"Duplex\":1, \"TwnhsE\":1, \"Twnhs\":1\n}\nHouseStyle_map = {\n    '2Story':0, '1Story':0, '1.5Fin':0, '1.5Unf':0, 'SFoyer':0, 'SLvl':0, '2.5Unf':0, '2.5Fin':1\n}\nRoofStyle_map = {\n    'Gable':1, 'Hip':1, 'Gambrel':1, 'Mansard':1, 'Flat':1, 'Shed':1\n}\nRoofMatl_map = {\n    'CompShg':0, 'WdShngl':1, 'Metal':0, 'WdShake':0, 'Membran':0, 'Tar&Grv':0, 'Roll':0, 'ClyTile':0\n}\nExterior1st_map = {\n    'VinylSd':1, 'MetalSd':0, 'Wd Sdng':0, 'HdBoard':0, 'BrkFace':1, 'WdShing':0,\n    'CemntBd':1, 'Plywood':0, 'AsbShng':0, 'Stucco':0, 'BrkComm':0, 'AsphShn':0,\n    'Stone':2, 'ImStucc':2, 'CBlock':0\n}\nExterior2nd_map = {\n    'VinylSd':1, 'MetalSd':0, 'Wd Shng':0, 'HdBoard':0, 'Plywood':0, 'Wd Sdng':0,\n    'CmentBd':1, 'BrkFace':0, 'Stucco':0, 'AsbShng':0, 'Brk Cmn':0, 'ImStucc':1,\n    'AsphShn':0, 'Stone':0, 'Other':0, 'CBlock':0\n}\nMasVnrType_map = {\n    'BrkFace':0, 'None':0, 'Stone':1, 'BrkCmn':0\n}\nExterQual_map = {\n    'Gd':0, 'TA':0, 'Ex':1, 'Fa':0\n}\nExterCond_map = {\n    'TA':0, 'Gd':0, 'Fa':0, 'Po':0, 'Ex':1\n}\nFoundation_map = {\n    'PConc':1, 'CBlock':0, 'BrkTil':0, 'Wood':1, 'Slab':0, 'Stone':1\n}\nBsmtQual_map = {\n    'Gd':0, 'TA':0, 'Ex':1, 'Fa':0\n}\nBsmtCond_map = {\n    'TA':1, 'Gd':1, 'Fa':0, 'Po':0\n}\nBsmtExposure_map = {\n    'No':0, 'Gd':1, 'Mn':0, 'Av':0\n}\nBsmtFinType1_map = {\n    'GLQ':1, 'ALQ':0, 'Unf':0, 'Rec':0, 'BLQ':0, 'LwQ':0\n}\nBsmtFinType2_map = {\n    'Unf':0, 'BLQ':0, 'ALQ':1, 'Rec':0, 'LwQ':0, 'GLQ':1\n}\nHeating_map = {\n    'GasA':1, 'GasW':1, 'Grav':0, 'Wall':0, 'OthW':0, 'Floor':0\n}\nHeatingQC_map = {\n    'Ex':1, 'Gd':0, 'TA':0, 'Fa':0, 'Po':0\n}\nCentralAir_map = {\n    'Y':1, 'N':0\n}\nElectrical_map = {\n    'SBrkr':1, 'FuseF':0, 'FuseA':0, 'FuseP':0, 'Mix':0\n}\nKitchenQual_map = {\n    'Gd':0, 'TA':0, 'Ex':1, 'Fa':0\n}\nFunctional_map = {\n    'Typ':1, 'Min1':1, 'Maj1':1, 'Min2':1, 'Mod':1, 'Maj2':0, 'Sev':1\n}\nFireplaceQu_map = {\n    'Gd':0, 'TA':0, 'Fa':0, 'Ex':1, 'Po':0\n}\nGarageType_map = {\n    'Attchd':1, 'Detchd':0, 'BuiltIn':1, 'CarPort':0, 'Basment':0, '2Types':0\n}\nGarageFinish_map = {\n    'RFn':0, 'Unf':0, 'Fin':1\n}\nGarageQual_map = {\n    'TA':0, 'Fa':0, 'Gd':1, 'Ex':1, 'Po':0\n}\nGarageCond_map = {\n    'TA':1, 'Fa':0, 'Gd':0, 'Po':0, 'Ex':0\n}\nPavedDrive_map = {\n    'Y':1, 'N':1, 'P':1\n}\nPoolQC_map = {\n    'Ex':1, 'Fa':0, 'Gd':0\n}\nFence_map = {\n    'MnPrv':1, 'GdWo':1, 'GdPrv':1, 'MnWw':1\n}\nMiscFeature_map = {\n    'Shed':1, 'Gar2':1, 'Othr':0, 'TenC':1\n}\nSaleType_map = {\n    'WD':0, 'New':1, 'COD':0, 'ConLD':0, 'ConLI':0, 'CWD':0, 'ConLw':0, 'Con':1, 'Oth':0\n}\nSaleCondition_map = {\n    'Normal':0, 'Abnorml':0, 'Partial':1, 'AdjLand':0, 'Alloca':0, 'Family':0\n}","87593b87":"all_data[\"MSZoning\"] = all_data.MSZoning.replace(MSZoning_map)\nall_data[\"Street\"] = all_data.Street.replace(Street_map)\n\nall_data[\"Alley\"] = all_data.Alley.replace(Alley_map)\nall_data[\"LotShape\"] = all_data.LotShape.replace(LotShape_map)\nall_data[\"LandContour\"] = all_data.LandContour.replace(LandContour_map)\nall_data[\"Utilities\"] = all_data.Utilities.replace(Utilities_map)\nall_data[\"LotConfig\"] = all_data.LotConfig.replace(LotConfig_map)\nall_data[\"LandSlope\"] = all_data.LandSlope.replace(LandSlope_map)\nall_data[\"Neighborhood\"] = all_data.Neighborhood.replace(Neighborhood_map)\nall_data[\"Condition1\"] = all_data.Condition1.replace(Condition1_map)\nall_data[\"Condition2\"] = all_data.Condition2.replace(Condition2_map)\nall_data[\"BldgType\"] = all_data.BldgType.replace(BldgType_map)\nall_data[\"HouseStyle\"] = all_data.HouseStyle.replace(HouseStyle_map)\n\nall_data[\"RoofStyle\"] = all_data.RoofStyle.replace(RoofStyle_map)\nall_data[\"RoofMatl\"] = all_data.RoofMatl.replace(RoofMatl_map)\nall_data[\"Exterior1st\"] = all_data.Exterior1st.replace(Exterior1st_map)\nall_data[\"Exterior2nd\"] = all_data.Exterior2nd.replace(Exterior2nd_map)\nall_data[\"MasVnrType\"] = all_data.MasVnrType.replace(MasVnrType_map)\nall_data[\"ExterQual\"] = all_data.ExterQual.replace(ExterQual_map)\n\nall_data[\"ExterCond\"] = all_data.ExterCond.replace(ExterCond_map)\nall_data[\"Foundation\"] = all_data.Foundation.replace(Foundation_map)\nall_data[\"BsmtQual\"] = all_data.BsmtQual.replace(BsmtQual_map)\nall_data[\"BsmtCond\"] = all_data.BsmtCond.replace(BsmtCond_map)\n\nall_data[\"BsmtExposure\"] = all_data.BsmtExposure.replace(BsmtExposure_map)\nall_data[\"BsmtFinType1\"] = all_data.BsmtFinType1.replace(BsmtFinType1_map)\nall_data[\"BsmtFinType2\"] = all_data.BsmtFinType2.replace(BsmtFinType2_map)\nall_data[\"Heating\"] = all_data.Heating.replace(Heating_map)\nall_data[\"HeatingQC\"] = all_data.HeatingQC.replace(HeatingQC_map)\nall_data[\"CentralAir\"] = all_data.CentralAir.replace(CentralAir_map)\nall_data[\"Electrical\"] = all_data.Electrical.replace(Electrical_map)\nall_data[\"KitchenQual\"] = all_data.KitchenQual.replace(KitchenQual_map)\nall_data[\"Functional\"] = all_data.Functional.replace(Functional_map)\nall_data[\"FireplaceQu\"] = all_data.FireplaceQu.replace(FireplaceQu_map)\nall_data[\"GarageType\"] = all_data.GarageType.replace(GarageType_map)\nall_data[\"GarageFinish\"] = all_data.GarageFinish.replace(GarageFinish_map)\nall_data[\"GarageQual\"] = all_data.GarageQual.replace(GarageQual_map)\nall_data[\"GarageCond\"] = all_data.GarageCond.replace(GarageCond_map)\nall_data[\"PavedDrive\"] = all_data.PavedDrive.replace(PavedDrive_map)\nall_data[\"PoolQC\"] = all_data.PoolQC.replace(PoolQC_map)\nall_data[\"Fence\"] = all_data.Fence.replace(Fence_map)\n\nall_data[\"MiscFeature\"] = all_data.MiscFeature.replace(MiscFeature_map)\nall_data[\"SaleType\"] = all_data.SaleType.replace(SaleType_map)\nall_data[\"SaleCondition\"] = all_data.SaleCondition.replace(SaleCondition_map)","967f4faf":"# drop_columns = [\n#     'GarageYrBlt', 'TotRmsAbvGrd', 'GarageArea'\n# ]\n\n# all_data.drop(drop_columns, axis=1, inplace=True)","a3093f62":"# log transform the target:\ntrain['SalePrice'] = np.log1p(train['SalePrice'])\ny = train['SalePrice']","c61407fe":"all_data = pd.get_dummies(all_data)\nall_data.shape","e975c6de":"drop_columns = [\n    'LandSlope',\n    'Street',\n    'FireplaceQu',\n    'Alley',\n    'LandContour_0',\n    'Utilities',\n    'MiscFeature',\n    'PavedDrive',\n    'SaleCondition',\n    'Fence',\n    'HouseStyle',\n    'BldgType',\n    'Condition2',\n    'RoofStyle', # \u3053\u3053\u307e\u3067\u306f0\u3060\u3063\u305f\u3084\u3064\n#     'Exterior2nd',\n#     'Condition1',\n#     'LandContour_Lvl',\n#     'Foundation',\n#     'MasVnrArea',\n#     'GarageYrBlt',\n#     'TotRmsAbvGrd',\n#     'Electrical', # \u3053\u3053\u307e\u3067\u306f\u30de\u30a4\u30ca\u30b9\u306e\u3084\u3064\n    'LandContour_Lvl',\n    'Foundation',\n    'MasVnrArea',\n    'GarageYrBlt',\n    'TotRmsAbvGrd',\n    'Electrical',\n    'GarageArea',\n    'YearBuilt',\n    'GarageType',\n    'YearRemodAdd',\n    'LandContour_1', # \u3053\u3053\u307e\u3067\u306f+-0.01\u4ee5\u4e0b\n#     'Condition1',\n#     'LandContour_Lvl',\n#     'Foundation',\n#     'MasVnrArea',\n#     'GarageYrBlt',\n#     'TotRmsAbvGrd',\n#     'Electrical',\n#     'GarageArea',\n#     'YearBuilt',\n#     'GarageType',\n#     'YearRemodAdd',\n#     'LandContour_1',\n#     'MasVnrType',\n#     'ExterCond',\n#     'ExterQual',\n#     'BsmtFinType2',\n#     'LotShape',\n#     'GarageCars' # \u3053\u3053\u307e\u3067\u306f+-0.02\u4ee5\u4e0b\n]\n\nall_data.drop(drop_columns, axis=1, inplace=True)","f31bcea1":"all_data.drop('SalePrice', axis=1, inplace=True)","14b23bf2":"train = all_data[:len(train)]\ntest = all_data[len(train):] # \u3053\u308c\u3067\u4e88\u6e2c\u5024\u3092\u6e2c\u308a\u305f\u3044\ny = y","2e1ab85e":"print(train.shape)\nprint(test.shape)","66dc02f1":"from sklearn.model_selection import train_test_split, KFold\n# train_x, test_x, train_y, test_y = train_test_split(train, y, test_size=0.3, random_state=3)","e90e1a45":"from sklearn.linear_model import ElasticNet\nfrom sklearn.model_selection import cross_val_score\nfrom itertools import product # \u30eb\u30fc\u30d7\u5b9f\u884c\u3092\u52b9\u7387\u5316\u3059\u308b\u3084\u3064\n\n# RMSE\u3092\u6e2c\u308b\u95a2\u6570 (\u30e2\u30c7\u30eb\u3054\u3068)\ndef rmse_cv(model):\n    rmse= np.sqrt(-cross_val_score(model, train, y, scoring='neg_mean_squared_error', cv = 5))\n    return(rmse)","dbcb99a7":"alphas = [0.0005, 0.001, 0.01, 0.03, 0.05, 0.1]\nl1_ratios = [1.5, 1.1, 1, 0.9, 0.8, 0.7, 0.5]","f9d19de7":"# \u3059\u3079\u3066\u306e\u6761\u4ef6\u3067\u3001\u30e2\u30c7\u30eb\u8a55\u4fa1\ncv_elastic = [rmse_cv(ElasticNet(alpha = alpha, l1_ratio=l1_ratio)).mean() \n              for (alpha, l1_ratio) in product(alphas, l1_ratios)]","5a7aa95d":"import matplotlib\nimport matplotlib.pyplot as plt\n\n# \u8a55\u4fa1\u3057\u305f\u3084\u3064\u3092\u30b0\u30e9\u30d5\u5316\nmatplotlib.rcParams['figure.figsize'] = (17.0, 7.0)\n\nidx = list(product(alphas, l1_ratios))\n\np_cv_elastic = pd.Series(cv_elastic, index = idx);\n\np_cv_elastic.plot(title = \"Validation - Just Do It\");\nplt.xlabel(\"alpha - l1_ratio\");\nplt.ylabel(\"rmse\");","26711095":"# Zoom in to the first 10 parameter pairs\nmatplotlib.rcParams['figure.figsize'] = (17.0, 7.0)\n\nidx = list(product(alphas, l1_ratios))[:10]\n\np_cv_elastic = pd.Series(cv_elastic[:10], index = idx);\n\np_cv_elastic.plot(title = \"Validation - Just Do It\");\nplt.xlabel(\"alpha - l1_ratio\");\nplt.ylabel(\"rmse\");","2eada9ff":"from sklearn.linear_model import ElasticNet\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.metrics import mean_squared_error\n\n# Define Model\n# ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=0.5, random_state=0))\nENet = ElasticNet(alpha=0.0005, l1_ratio=0.5, random_state=0)","dc0f78eb":"ENet.fit(train, y)","25623a94":"# submit\u7528\u306etest\ndef predict_cv(model, train_x, train_y, test_x):\n    preds = []\n    preds_test = []\n    va_indexes = []\n    kf = KFold(n_splits=4, shuffle=True, random_state=1234) # train_test_split(train, y, test_size=0.3, random_state=3) 2\u500b\u5206\u5272\n    # \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u5b66\u7fd2\u30fb\u4e88\u6e2c\u3092\u884c\u3044\u3001\u4e88\u6e2c\u5024\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4fdd\u5b58\u3059\u308b\n    for i, (tr_idx, va_idx) in enumerate(kf.split(train_x)): # enumerate \u914d\u5217\u8981\u7d20\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3082\u540c\u6642\u306b\u53d6\u5f97\u3059\u308b\n        tr_x, va_x = train_x.iloc[tr_idx], train_x.iloc[va_idx]\n        tr_y, va_y = train_y.iloc[tr_idx], train_y.iloc[va_idx]\n        model.fit(tr_x, tr_y)\n        tr_pred = model.predict(tr_x)\n        pred = model.predict(va_x)\n        preds.append(pred)\n        pred_test = model.predict(test_x)\n        preds_test.append(pred_test)\n        va_indexes.append(va_idx)\n        print('  score Train : {:.6f}' .format(np.sqrt(mean_squared_error(tr_y, tr_pred))), \n              '  score Valid : {:.6f}' .format(np.sqrt(mean_squared_error(va_y, pred)))) \n    # \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u9023\u7d50\u3057\u3001\u305d\u306e\u5f8c\u5143\u306e\u9806\u756a\u306b\u4e26\u3079\u306a\u304a\u3059\n    va_indexes = np.concatenate(va_indexes)\n    preds = np.concatenate(preds, axis=0)\n    order = np.argsort(va_indexes)\n    pred_train = pd.DataFrame(preds[order])\n    # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u306e\u5e73\u5747\u3092\u3068\u308b\n    preds_test = pd.DataFrame(np.mean(preds_test, axis=0))\n    print('Score : {:.6f}' .format(np.sqrt(mean_squared_error(train_y, pred_train))))\n    return pred_train, preds_test, model","2277c71f":"pred_train, preds_test, model = predict_cv(ENet, train, y, test)\n# preds_test submit\u7528\u306e\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u3002","d6fa41f2":"preds_test","11afe317":"# \u63d0\u51fa\u7528\u306b\u3059\u308b\ny_test = np.expm1(preds_test[0])","a93d25a3":"sub = pd.DataFrame()\nsub['Id'] = TEST_ID\nsub['SalePrice'] = y_test\nsub.to_csv('submission.csv',index=False)","041f9c2b":"# Cross Validation\n# predict_cv(ENet, train, y, test)","cde1a8a2":"# \u4fc2\u6570,\u7387\n# coef = pd.Series(ENet.coef_, index = train.columns)","359ebca8":"# coef.sort_values()","2dcddbea":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf \u63a8\u6e2c\n# ENet_pred = np.expm1(ENet.predict(test))","0517e55d":"# sub = pd.DataFrame()\n# sub['Id'] = TEST_ID\n# sub['SalePrice'] = ENet_pred\n# sub.to_csv('submission.csv',index=False)","8037d495":"# \u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9","9ec65aa7":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5206\u3051\u308b\uff08\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u7528\uff09","ac567c19":"# \u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u304b\u3089\u3001\u30ab\u30e9\u30e0\u3092\u524a\u9664","a5a77432":"# SalePrice\u3068\u306e\u76f8\u95a20.2\u4ee5\u4e0b\u306e\u30ab\u30e9\u30e0\u3092\u524a\u9664","77decc4d":"# \u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","cb390cf4":"# \u30c0\u30df\u30fc\u5909\u6570\u51e6\u7406","0ca780d6":"# \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","18b4946f":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u63a8\u6e2c predict","50a67e6f":"# \u76f8\u95a2\u306e\u9ad8\u3044\u6570\u5024\u5909\u6570\u3067\u3001\u300c\u5916\u308c\u5024\u300d\u3092\u53d6\u308a\u9664\u304f train\u30c7\u30fc\u30bf","00de3c5e":"# \u6b20\u640d\u5024\u306e\u51e6\u7406","780d7743":"# SalePrice\u306e\u5bfe\u6570\u5909\u63db","cf67d192":"# \u30e2\u30c7\u30eb\u5b9a\u7fa9\u524d\u306e\u3001\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u63a2\u7d22","c0a88ff1":"# \u591a\u91cd\u5171\u7dda\u6027\u3092\u5f15\u304d\u8d77\u3053\u3059\u306e\u53ef\u80fd\u6027\u3042\u308b\u30ab\u30e9\u30e0\u3092\u524a\u9664","56edce41":"# \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2 fit","b714e700":"# all_data","bd66e426":"# \u6b6a\u3093\u3060\u6570\u5024\u5909\u6570\u3092\u5bfe\u6570\u5909\u63db","aa276ebf":"# \u5b66\u7fd2\u7528\u30fb\u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u306e\u5b9a\u7fa9"}}