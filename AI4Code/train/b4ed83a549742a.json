{"cell_type":{"7e1419ca":"code","196d0dc3":"code","f9575470":"code","278434e5":"code","b9d240b0":"code","72b2136b":"code","35d3b44d":"code","a676000a":"code","ef64a2d2":"code","12479d99":"code","c19fd700":"code","3f0d5b3a":"code","f24426c7":"code","0b3a43ab":"code","a08a6657":"code","87898f81":"code","b308026b":"code","f7f9ebf5":"code","37cb0e24":"code","38a20251":"code","426abfd8":"code","4b342a88":"code","1c3e4ba7":"code","e455c9e2":"code","b35d52da":"code","9ab8adcc":"code","bbd0d9b2":"code","4fb4a8bd":"code","32921888":"code","f2ceb6bb":"code","994c632f":"code","b62aa9c7":"markdown","2d42cfdd":"markdown","8d296368":"markdown","4bf49c16":"markdown"},"source":{"7e1419ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","196d0dc3":"#import libraries\nimport numpy as np,pandas as pd\nimport matplotlib.pyplot as plt,seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","f9575470":"digitsTrain = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndigitsTrain.head()","278434e5":"digitsTrain.shape","b9d240b0":"digitsTest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ndigitsTest.head()\n","72b2136b":"digitsTrain.info()","35d3b44d":"digitsTrain.isnull().sum()","a676000a":"yTrain = digitsTrain.pop('label') \nyTrain.head()","ef64a2d2":"XTrain = digitsTrain.copy()\nXTrain.head()","12479d99":"from sklearn.preprocessing import MinMaxScaler","c19fd700":"scaler = MinMaxScaler()","3f0d5b3a":"XTrainScaled = scaler.fit_transform(XTrain)","f24426c7":"from sklearn.decomposition import PCA\npca= PCA(random_state=42)\npca.fit(XTrainScaled)\npca.components_","0b3a43ab":"pca.explained_variance_ratio_","a08a6657":"var_cumu = np.cumsum(pca.explained_variance_ratio_)","87898f81":"plt.figure(figsize=[10,8])\nplt.hlines(y=0.95, xmax=1000, xmin=0, colors=\"g\", linestyles=\"--\")\nplt.vlines(x=150, ymax=1, ymin=0, colors=\"r\", linestyles=\"--\")\nplt.plot(var_cumu);\n","b308026b":"from sklearn.decomposition import IncrementalPCA","f7f9ebf5":"pca_final = IncrementalPCA(n_components=150)\nXtrain_pca =pca_final.fit_transform(XTrainScaled)\nXtrain_pca.shape","37cb0e24":"cols = []\nfor i in range(1,151):\n    name = 'PC'+str(i)\n    cols.append(name)\ncols","38a20251":"df = pd.DataFrame(Xtrain_pca,columns=cols)\ndf.head()","426abfd8":"from sklearn.linear_model import LogisticRegression\nlearner_pca = LogisticRegression()\nmodel_pca = learner_pca.fit(Xtrain_pca, yTrain)","4b342a88":"print(model_pca.predict(Xtrain_pca[0:9]))\nprint(yTrain[0:9])","1c3e4ba7":"digitsTest.tail()","e455c9e2":"XTest_pca=pca_final.transform(digitsTest)","b35d52da":"XTest_pca","9ab8adcc":"print(model_pca.predict(XTest_pca))","bbd0d9b2":"Testdf =pd.DataFrame(model_pca.predict(XTest_pca))\nTestdf.head()","4fb4a8bd":"Testdf.rename(columns={0:'Label'},inplace=True)\nTestdf.head()","32921888":"Testdf['ImageId'] = Testdf.index+1\nTestdf.head()\n","f2ceb6bb":"Testdf = Testdf[['ImageId','Label']]\nTestdf.head()","994c632f":"Testdf.to_csv('MNIST.csv',index=False)","b62aa9c7":"#### Perform PCA with 150 components","2d42cfdd":"#### Applying logistic regression","8d296368":"#### Running PCA","4bf49c16":"#### Feature Standardisation"}}