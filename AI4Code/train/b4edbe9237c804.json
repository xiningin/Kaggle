{"cell_type":{"2c9638b0":"code","62c0e73a":"code","4ef76e08":"code","5f5c77d0":"code","102a874b":"code","28916114":"code","01419d4f":"code","269484ca":"code","7c305131":"code","b2d173f3":"code","60dcdaa2":"code","289d1075":"code","2bf91e64":"code","1fa2a95b":"code","a6d12d6b":"code","39ab1198":"code","2ed9abb5":"code","6b4f343f":"code","3f001dad":"code","91e53480":"code","a04a90eb":"code","3f200226":"markdown","95024556":"markdown","c62dfdba":"markdown","052c124f":"markdown","5ecdb025":"markdown","8a80be03":"markdown","b4ae05d9":"markdown","884e6d3b":"markdown","91972e2b":"markdown","4da29ab0":"markdown"},"source":{"2c9638b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nsns.set(style='white', context='notebook', palette='deep')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","62c0e73a":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","4ef76e08":"y_train = train.label\nx_train = train.drop('label', 1)","5f5c77d0":"train.isnull().values.any()","102a874b":"sns.countplot(y_train)","28916114":"train.shape","01419d4f":"n = np.random.randint(0, 42000)\nimg = x_train.iloc[n].to_numpy() #past tutorials use as_matrix() which is now deprecated: https:\/\/stackoverflow.com\/questions\/60164560\/attributeerror-series-object-has-no-attribute-as-matrix-why-is-it-error\nimg = img.reshape((28,28))\nplt.imshow(img)\nplt.title(train.iloc[n,0])\nplt.show()","269484ca":"x_train = x_train\/255.0\ntest = test\/255.0","7c305131":"x_train = x_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint(\"x_train shape: \",x_train.shape)\nprint(\"test shape: \",test.shape)","b2d173f3":"y_train = to_categorical(y_train, num_classes = 10)","60dcdaa2":"x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size = 0.1, random_state=2)\n#for imbalanced datasets, use stratify=True: https:\/\/stackoverflow.com\/a\/38889389","289d1075":"x_train.shape","2bf91e64":"plt.imshow(x_train[0].reshape(28,28)) #using [:,:,0] instead of reshape does the same\nplt.show()","1fa2a95b":"model = Sequential()\n\nmodel.add(Conv2D(64,kernel_size=5,padding = 'Same',activation='relu',input_shape=(28,28,1)))\nmodel.add(Conv2D(64,kernel_size=5,padding = 'Same',activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.40))\n\nmodel.add(Conv2D(64,kernel_size=3,padding = 'Same',activation='relu'))\nmodel.add(Conv2D(64,kernel_size=3,padding = 'Same',activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.40))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = \"relu\"))\nmodel.add(Dropout(0.40))\nmodel.add(Dense(10, activation = \"softmax\"))\n\nmodel.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","a6d12d6b":"epochs = 30  # for better result increase the epochs\nbatch_size = 100","39ab1198":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(x_train)","2ed9abb5":"LR_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience = 2, \n                                            verbose = 1, \n                                            factor = 0.5, \n                                            min_lr = 0.00001)","6b4f343f":"model.fit_generator(datagen.flow(x_train, y_train, batch_size = batch_size),\n                              epochs = epochs, validation_data = (x_val,y_val), steps_per_epoch=x_train.shape[0] \/\/ batch_size, callbacks=[LR_reduction])","3f001dad":"epoch_range = range(1,epochs+1)\nplt.plot(epoch_range, model.history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Validation Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.show()","91e53480":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\ny_pred = model.predict(x_val)\n# Convert predictions classes to one hot vectors \ny_pred_classes = np.argmax(y_pred,axis = 1) \n# Convert validation observations to one hot vectors\ny_true = np.argmax(y_val,axis = 1) \n# compute the confusion matrix\nconf_mat = confusion_matrix(y_true, y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(conf_mat, classes = range(10))","a04a90eb":"results = model.predict(test)\n\n# select the prediction with the maximum probability\nresults = np.argmax(results, axis = 1)\n\nresults = pd.Series(results, name=\"Label\")\n\nsubmission = pd.concat([pd.Series(range(1,28001), name = \"ImageId\"), results], axis = 1)\n\nsubmission.to_csv(\"submission.csv\", index=False)","3f200226":"The model used here is a modified version of a model from this experiment: https:\/\/www.kaggle.com\/cdeotte\/how-to-choose-cnn-architecture-mnist\\","95024556":"As we descend, learning rate needs to decrease to make more minute adjustments.","c62dfdba":"Reshaping feature data https:\/\/stackoverflow.com\/questions\/41848660\/why-the-negative-reshape-1-in-mnist-tutorial\/41848962","052c124f":"Checking the balance of the data","5ecdb025":"Checking to see if there are nulls","8a80be03":"Grayscale normalization of features","b4ae05d9":"ImageDataGenerator generates modified images from existing ones to provide more data (i.e. a flipped 6 should still be a 6)","884e6d3b":"This is my first shot at using a CNN and learned a lot by looking over the following notebooks:  \n1) https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6  \n2) https:\/\/www.kaggle.com\/cdeotte\/how-to-choose-cnn-architecture-mnist","91972e2b":"The confusion matrix is another way of showing model accuracy. Setting normalize=True gives you percentages instead of counts.","4da29ab0":"Encoding labels as arrays e.g. 2 -> [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]"}}