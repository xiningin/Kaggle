{"cell_type":{"06c5d8a3":"code","267dce2b":"code","358e4694":"code","a27b7243":"code","5a53e4b2":"code","aef3294b":"code","1140c548":"code","e5361f9c":"code","f472ad9a":"code","a96becef":"code","efc22bc2":"code","8b46e77d":"code","07781f51":"code","b439855d":"code","c13c1df2":"code","658da6eb":"code","ce91651a":"code","3cb4b243":"code","ce5203c7":"code","434ef211":"code","bc69a3c0":"code","8120c65e":"code","e421e6dc":"code","ffa166d8":"code","4634424c":"code","c885afc8":"code","0cc72ed3":"code","7849b909":"code","d6b0040e":"code","76017dd1":"code","f80ad1d3":"code","f56286af":"code","7e9acd11":"code","5a0c9ff6":"code","6581caf4":"code","8bc85eff":"code","b89208d2":"code","90c1cb32":"code","2da26ca1":"code","3b87b221":"code","3d87dbe7":"code","b5dc66fd":"code","6c1ae143":"code","7f83362b":"code","e0af42e8":"code","382ac0df":"code","3f638279":"code","eb646509":"code","dbce416d":"code","16d31894":"code","b7f1195d":"code","1f7abe65":"code","bf4852a4":"code","d8431b5d":"code","9679066a":"code","65c70f61":"markdown","d65ff68b":"markdown","b4a94912":"markdown","362cf363":"markdown","d02a6783":"markdown","3945fbd2":"markdown","63e4d23b":"markdown","5af61b39":"markdown","446c6d18":"markdown","2be62cad":"markdown","e66525cb":"markdown","f64b2f2f":"markdown","8c8c2270":"markdown","c7e747e1":"markdown","635aa2d8":"markdown","3a2c7f76":"markdown","356be851":"markdown","7d163b2c":"markdown","636f56b7":"markdown","c5fb210e":"markdown","643da560":"markdown","553c5382":"markdown"},"source":{"06c5d8a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","267dce2b":"# Read datatables\nhighschool = pd.read_csv(\"\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv\", encoding=\"windows-1252\")\npoverty = pd.read_csv(\"\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv\", encoding=\"windows-1252\")\nincome = pd.read_csv(\"\/kaggle\/input\/fatal-police-shootings-in-the-us\/MedianHouseholdIncome2015.csv\", encoding=\"windows-1252\")\nrace = pd.read_csv(\"\/kaggle\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv\", encoding=\"windows-1252\")\nkills = pd.read_csv(\"\/kaggle\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv\", encoding=\"windows-1252\")","358e4694":"highschool.head()","a27b7243":"poverty.head()","5a53e4b2":"income.head()","aef3294b":"city.head()","1140c548":"kills.head()","e5361f9c":"geolist = list(poverty[\"Geographic Area\"].unique())    #Create a geographic area list","f472ad9a":"poverty.head()","a96becef":"poverty.info()","efc22bc2":"poverty.poverty_rate.value_counts()","8b46e77d":"poverty.poverty_rate.replace([\"-\"], 0.0, inplace=True)    # Replace undefined values.\npoverty.poverty_rate = poverty.poverty_rate.astype(float) # Change value type to float for analysis\npoverty.info()","07781f51":"geo_poverty_ratio = []      # Create an empty list\nfor i in geolist:\n    x = poverty[poverty[\"Geographic Area\"] == i]\n    y = sum(x.poverty_rate)\/len(x)\n    geo_poverty_ratio.append(y)\npovertydata = pd.DataFrame({'geolist': geolist,'geo_poverty_ratio':geo_poverty_ratio})\nnew_index = (povertydata['geo_poverty_ratio'].sort_values(ascending=False)).index.values\nsorted_poverty = povertydata.reindex(new_index)\nsorted_poverty.head()","b439855d":"# Visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_poverty['geolist'], y=sorted_poverty['geo_poverty_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('States')\nplt.ylabel('Poverty Rate')\nplt.title('Poverty Rate Given States')\nplt.show()","c13c1df2":"# Explore data\nkills.head()","658da6eb":"# Prepera data for analysis\nseperate = kills.name[kills.name != \"TK TK\"].str.split()    # seperate name and surname\na,b = zip(*seperate)                                        # a: name, b:surname\nname_list = a+b                                             # Combine names and surnames\nfrom collections import Counter                             # Import counter to use Counter\nname_count = Counter(name_list)                             # Count names in a list\nmost_common_names = name_count.most_common(15)              # Take most common names from list\nx,y = zip(*most_common_names)                               # Seperate list to tuple. x: names y:count\nx,y = list(x),list(y)                                       # Convert tuple to list    ","ce91651a":"# Create a blank graph \nplt.figure(figsize=(15,10))\n\n# Visualization\nsns.barplot(x=x, y=y) # palette = sns.cubehelix_palette(len(x))\n\n# Customize graph\nplt.xlabel('Name or Surname of killed people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Name or Surname of killed people')\nplt.show()","3cb4b243":"# Explore data\nhighschool.head()","ce5203c7":"# Explore data information\nhighschool.info()","434ef211":"# Replace undefined values for \"percent_completed_hs\" before converting to float\n\nhighschool.percent_completed_hs.replace([\"-\"], 0.0, inplace=True)\n#highschool.percent_completed_hs.value_counts()","bc69a3c0":"# Convert \"percent_completed_hs\" type to float\nhighschool.percent_completed_hs = highschool.percent_completed_hs.astype(float)","8120c65e":"# Take an area_list for highschool data\narea_list = list(highschool[\"Geographic Area\"].unique())","e421e6dc":"# Create a rate_list for high school\nrate_list = []                                             # Define an empty rate_list\nfor i in area_list:                                        # Return a for loop for every area\n    x = highschool[highschool[\"Geographic Area\"] == i]     # Take dataframe for that area\n    rate = sum(x.percent_completed_hs) \/ len(x)            # Sum of records \/ num of records\n    rate_list.append(rate)                                 # Append result to rate_list                                ","ffa166d8":"# Create a new dataframe with only unique areas and rates\nhighschooldata = pd.DataFrame({\"area\": area_list, \"rate\": rate_list})\nhighschooldata.head()","4634424c":"# Sorting data ascending for better visualization\n#highschooldata.rate.sort_values(ascending=True)                         # create a sorted data with index.\nnindex = (highschooldata.rate.sort_values(ascending=True)).index.values  # Create a sorted index array\nhighschooldata_sorted = highschooldata.reindex(nindex)                   # Change index to sorted index\n#highschooldata_sorted          # Value sorted data\n#highschooldata                 # Raw unique data\n#highschool                     # Raw data","c885afc8":"# Create a blank graph area\nplt.figure(figsize=(15,10))\n\n# Visualization\nsns.barplot(x = highschooldata_sorted.area, y = highschooldata_sorted.rate)\n\n# Customize graph \nplt.xticks(rotation=90)\nplt.xlabel(\"States\")\nplt.ylabel(\"High school rate\")\nplt.title(\"High school graduation graph\")\nplt.show()","0cc72ed3":"# Explore data\nrace.head()","7849b909":"# Data information\nrace.info()","d6b0040e":"# Define unknown values and convert them to float\nrace.replace([\"-\"], 0.0, inplace=True)\nrace.replace([\"(X)\"], 0.0, inplace=True)\nrace.loc[:,[\"share_white\", \"share_black\", \"share_native_american\", \"share_asian\", \"share_hispanic\"]] = race.loc[:,[\"share_white\", \"share_black\", \"share_native_american\", \"share_asian\", \"share_hispanic\"]].astype(float)\nrace.info()","76017dd1":"# Area list for race data\narea_race = race[\"Geographic area\"].unique()\narea_race","f80ad1d3":"# Calculate race by area\nrace_white = []\nrace_black = []\nrace_native = []\nrace_asian = []\nrace_hispanic = []\n\nfor i in area_race:\n    x = race[race[\"Geographic area\"] == i]\n    race_white.append(sum(x.share_white) \/ len(x.share_white))\n    race_black.append(sum(x.share_black) \/ len(x.share_black))\n    race_native.append(sum(x.share_native_american) \/ len(x.share_native_american))\n    race_asian.append(sum(x.share_asian) \/ len(x.share_asian))\n    race_hispanic.append(sum(x.share_hispanic) \/ len(x.share_hispanic))\n    ","f56286af":"# Create empty graph\nf,ax = plt.subplots(figsize = (9,15))\n\n# Draw bar plots\nsns.barplot(x= race_white, y= area_race, color=\"green\", alpha=.5, label= \"gray\")\nsns.barplot(x= race_black, y= area_race, color=\"blue\", alpha=.5, label= \"black\")\nsns.barplot(x= race_native, y= area_race, color=\"cyan\", alpha=.5, label= \"native\")\nsns.barplot(x= race_asian, y= area_race, color=\"yellow\", alpha=.5, label= \"asian\")\nsns.barplot(x= race_hispanic, y= area_race, color=\"red\", alpha=.5, label= \"hispanic\")\n\n# Customize legend\nax.legend(loc= \"upper right\", frameon=True)\n\n# Customize titles\nax.set(xlabel=\"Races\", ylabel=\"Area\", title=\"Race distrubution\")\n\n# Close info string\nplt.show()","7e9acd11":"# Poverty data\nsorted_poverty.head()","5a0c9ff6":"# High school data\nhighschooldata_sorted.head()","6581caf4":"# Normalize data\nsorted_poverty[\"geo_poverty_ratio\"] = sorted_poverty[\"geo_poverty_ratio\"] \/ max(sorted_poverty[\"geo_poverty_ratio\"])\nhighschooldata_sorted[\"rate\"] = highschooldata_sorted[\"rate\"] \/ max(highschooldata_sorted[\"rate\"])","8bc85eff":"# Create a new dataframe\nhighschool_poverty = pd.concat([sorted_poverty, highschooldata_sorted], axis=1)\n\n# Sort data\nhighschool_poverty.sort_values(\"geo_poverty_ratio\", inplace=True)\n","b89208d2":"# Create a blank graph\nf, ax = plt.subplots(figsize= (20,10))\n\n# Visualization\nsns.pointplot(x=\"area\", y=\"geo_poverty_ratio\", data=highschool_poverty, color=\"blue\", alpha=0.1)\nsns.pointplot(x=\"area\", y=\"rate\", data=highschool_poverty, color=\"red\", alpha=0.5)\n\n# Show text on graph\nplt.text(10,0.7,\"High school graduation VS poverty\", fontsize=19, style=\"italic\")\n\n# Customize\n#ax.set(xlabel=\"states\", ylabel=\"values\", title=\"High school - poverty ratio\")\nplt.xlabel(\"States\", color=\"red\", fontsize=15)\nplt.ylabel(\"Values\", color=\"green\", fontsize=15)\nplt.title(\"High school - poverty ratio\", color=\"blue\", fontsize=15)\n\n# Add grids to graph\nplt.grid()\n\n# Clear info\nplt.show()","90c1cb32":"# Use highschool_poverty data \n\n# Joint plot\nsns.jointplot(data=highschool_poverty, x=\"geo_poverty_ratio\", y=\"rate\")\n\n# FOR KAGGLE\nplt.savefig('graph.png')\n\n# Clear\nplt.show()","2da26ca1":"# Joint plot with KDE\nsns.jointplot(data=highschool_poverty, x=\"geo_poverty_ratio\", y=\"rate\", kind=\"kde\")\n\n# FOR KAGGLE\nplt.savefig('graph.png')\n\n# Clear\nplt.show()","3b87b221":"###### Same as JointPlot type=kde\nsns.kdeplot(highschool_poverty[\"geo_poverty_ratio\"], highschool_poverty[\"rate\"], shade=True, cut=3)\n\n# FOR KAGGLE\nplt.savefig('graph.png')\n\n# Clear\nplt.show()","3d87dbe7":"# Visualization\nsns.lmplot(data=highschool_poverty, x=\"geo_poverty_ratio\", y=\"rate\")\n\n# Clear\nplt.show()","b5dc66fd":"# Visualization\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)         # SNS PALETTE\nsns.violinplot(data=highschool_poverty, inner=\"points\")\n\n# FOR KAGGLE\nplt.savefig('graph.png')\n\n# Clear\nplt.show()","6c1ae143":"# Correlation of data\nhighschool_poverty.corr()","7f83362b":"# Visualization of correlation\nsns.heatmap(highschool_poverty.corr(), annot=True, linecolor=\"gray\", linewidth=.1, fmt=\".1f\")\n\n# Clear\nplt.show()","e0af42e8":"# Visualization of correlation\nsns.pairplot(highschool_poverty)\n\n# Clear\nplt.show()","382ac0df":"# Explore data\nkills.race.value_counts()","3f638279":"# Prepare data\nlabels = kills.race.value_counts().index\nsizes = kills.race.value_counts().values\ncolors = [\"red\", \"green\", \"cyan\", \"blue\", \"yellow\", \"grey\"]\nexplode = [0,0,0,0,0,0]","eb646509":"# Visualization\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Customization\nplt.title('Killed People According to Races',color = 'blue',fontsize = 15)\n\n# Clear\nplt.show()","dbce416d":"# Explore data\nkills.head()","16d31894":"# Visualization\nsns.boxplot(x=\"gender\", y=\"age\", hue=\"signs_of_mental_illness\", data=kills,  palette=\"PRGn\")\n\n# Clear\nplt.show()","b7f1195d":"# Visualization\nsns.swarmplot(x=\"gender\", y=\"age\", hue=\"signs_of_mental_illness\", data=kills)\n\n# Clear\nplt.show()","1f7abe65":"# Explore data\nkills.head()","bf4852a4":"# Visualization\nsns.countplot(kills.gender)\n\n# Clear\nplt.show()","d8431b5d":"# Visualization\nsns.countplot(kills.race)\n\n# Clear\nplt.show()","9679066a":"# Prepare data\ndf25 =['above25' if i >= 25 else 'below25' for i in kills.age]\ndf = pd.DataFrame({'age':df25})\n\n# Visualization\nsns.countplot(df.age)\n\n# Clear\nplt.show()","65c70f61":"<a id=\"7\"><\/a> \n# 7. Violin plot","d65ff68b":"### poverty_ratio data","b4a94912":"<a id=\"12\"><\/a> \n# 12. Swarm plot","362cf363":"<a id=\"4\"><\/a> \n# 4. Joint plot","d02a6783":"<a id=\"5\"><\/a> \n# 5. KDE plot","3945fbd2":"### Get geographic areas","63e4d23b":"<a id=\"2\"><\/a> \n# 2. Bar plot\n","5af61b39":"### Kills data","446c6d18":"<a id=\"3\"><\/a> \n# 3. Point plot\n\nCompare poverty and high school data","2be62cad":"<a id=\"6\"><\/a> \n# 6. Lm plot","e66525cb":"### Race data","f64b2f2f":"<a id=\"13\"><\/a>\n# 13. Count plot ","8c8c2270":"### Highschool data","c7e747e1":"# Data visualization\n\n### Contents\n* [1. Registering data](#1)\n* [2. Bar plot](#2)\n* [3. Point plot](#3)\n* [4. Joint plot](#4)\n* [5. Kde plot](#5)\n* [6. Violin plot](#6)\n* [7. Heatmap](#7)\n* [8. Pair plot](#8)\n* [9. Pie chart](#9)\n* [10. Lm plot](#10)\n* [11. Box plot](#11)\n* [12. Swarm plot](#12)\n* [13. Count plot](#13)","635aa2d8":"### Prepare dataframes for data visualisation","3a2c7f76":"<a id=\"9\"><\/a>\n# 9. Pair plot ","356be851":"# CONCLUSION\n**I will be happy to hear your comments!!!**\nThanks","7d163b2c":"<a id=\"8\"><\/a> \n# 8. Heatmap","636f56b7":"<a id=\"1\"><\/a> \n# 1. Registering data ","c5fb210e":"<a id=\"11\"><\/a> \n# 11. Box plot","643da560":"<a id=\"10\"><\/a>\n# 10. Pie plot ","553c5382":"### Check dataframes"}}