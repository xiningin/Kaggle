{"cell_type":{"ec22d5c6":"code","305ce96f":"code","4084def9":"code","43d12118":"code","5eafac23":"code","601c1a43":"code","61aa2f7e":"code","8e469408":"code","54158f4e":"code","e3ac1c61":"code","d1789494":"code","db5651ae":"code","0a000d03":"code","196720b7":"code","010a3beb":"code","1bb48fda":"code","33648ff0":"code","4a595d60":"code","7fd3cd5e":"code","04a9aade":"code","b8829957":"code","4898b9c0":"code","39351ee9":"code","5ecec87b":"markdown","3d88ffdc":"markdown","f716a73e":"markdown","f1567719":"markdown","bef9a332":"markdown","90770ca1":"markdown","3e2188b6":"markdown","fc7c88f6":"markdown","ded2d76b":"markdown","ae8534e1":"markdown","5bd4094f":"markdown","569e602b":"markdown","561e0f4e":"markdown","2af8c2a3":"markdown","ae229527":"markdown","ffd33279":"markdown","4d8ca999":"markdown","f6a34951":"markdown","35d819b1":"markdown","44d3c3b3":"markdown","b47bbac4":"markdown","19a9936b":"markdown","2e1a06cf":"markdown","ceb15047":"markdown","c674d5e2":"markdown","5b20b9d5":"markdown","fec21d59":"markdown"},"source":{"ec22d5c6":"import numpy as np         \nimport pandas as pd\nimport matplotlib.pyplot as plt      \nimport random                        \n\nfrom keras.datasets import mnist     \nfrom keras.models import Sequential  \n\nfrom keras.layers.core import Dense, Dropout, Activation \nfrom keras.utils import np_utils                         ","305ce96f":"(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\nprint(\"X_train shape\", X_train.shape)\nprint(\"y_train shape\", y_train.shape)\nprint(\"X_test shape\", X_test.shape)\nprint(\"y_test shape\", y_test.shape)","4084def9":"test_data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv', delimiter = ',', header = 0, usecols = [x for x in range(0, 784)])","43d12118":"for i in range(9):\n    plt.subplot(3,3,i+1)\n    num = random.randint(0, len(X_train))\n    plt.imshow(X_train[num], cmap='gray', interpolation='none')\n    plt.title(\"Class {}\".format(y_train[num]))\n    \nplt.tight_layout()","5eafac23":"X_train = X_train.reshape(60000, 784) \nX_test = X_test.reshape(10000, 784)   \n\nX_train = X_train.astype('float32')   \nX_test = X_test.astype('float32')\n\nX_train \/= 255                        \nX_test \/= 255\n\nprint(\"Training matrix shape\", X_train.shape)\nprint(\"Testing matrix shape\", X_test.shape)","601c1a43":"no_classes = 10\n\nY_train = np_utils.to_categorical(y_train, no_classes)\nY_test = np_utils.to_categorical(y_test, no_classes)","61aa2f7e":"model = Sequential()","8e469408":"model.add(Dense(512, input_shape=(784,))) ","54158f4e":"model.add(Activation('relu'))","e3ac1c61":"model.add(Dropout(0.2))","d1789494":"model.add(Dense(512))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))","db5651ae":"model.add(Dense(10))\nmodel.add(Activation('softmax'))","0a000d03":"model.summary()","196720b7":"from keras.utils import plot_model\nplot_model(model, to_file='model_chart.png', show_shapes=True, show_layer_names=True)\nfrom IPython.display import Image\nImage(\"model_chart.png\")","010a3beb":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","1bb48fda":"history = model.fit(X_train, Y_train,\n          batch_size=128, epochs=10,\n          verbose=1)","33648ff0":"score = model.evaluate(X_test, Y_test)\nprint('Test accuracy:', score[1])","4a595d60":"fig = plt.figure()\nplt.subplot(2,1,1)\nplt.plot(history.history['accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='lower right')\n\nplt.subplot(2,1,2)\nplt.plot(history.history['loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper right')\n\nplt.tight_layout()","7fd3cd5e":"results = model.predict(test_data)","04a9aade":"results = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"submission.csv\",index=False)","b8829957":"submission","4898b9c0":"predicted_classes = model.predict_classes(X_test)\n\ncorrect_indices = np.nonzero(predicted_classes == y_test)[0]\n\nincorrect_indices = np.nonzero(predicted_classes != y_test)[0]","39351ee9":"plt.figure()\nfor i, correct in enumerate(correct_indices[:9]):\n    plt.subplot(3,3,i+1)\n    plt.imshow(X_test[correct].reshape(28,28), cmap='gray', interpolation='none')\n    plt.title(\"Predicted {}, Class {}\".format(predicted_classes[correct], y_test[correct]))\n    \nplt.tight_layout()\n    \nplt.figure()\nfor i, incorrect in enumerate(incorrect_indices[:9]):\n    plt.subplot(3,3,i+1)\n    plt.imshow(X_test[incorrect].reshape(28,28), cmap='gray', interpolation='none')\n    plt.title(\"Predicted {}, Class {}\".format(predicted_classes[incorrect], y_test[incorrect]))\n    \nplt.tight_layout()","5ecec87b":"The first hidden layer has 512 nodes (neurons) whose input is a vector of size 784. Each node will receive an element from each input vector and apply some weight and bias to it.","3d88ffdc":"Dropout randomly selects a few nodes and nullifies their output (deactivates the node). This helps in ensuring that the model is not overfitted to the training dataset.","f716a73e":"The second hidden layer also has 512 nodes and it takes input from the 512 nodes in the previous layer and gives its output to the next subsequent layer.","f1567719":"## Handwritten Digit Classifier using a Simple Neural Network with 99.4% accuracy\n\n### MNIST Dataset\nThe MNIST database (Modified National Institute of Standards and Technology database) is a large database of handwritten digits that is commonly used for training various image processing systems. This dataset is considered to be the \"hello world\" dataset for Computer Vision.\n\nI have written a blog to give a better explanation of the approach I have used, here is the link - https:\/\/medium.com\/analytics-vidhya\/get-started-with-your-first-deep-learning-project-7d989cb13ae5\n\nIt has a training set of 60,000 examples and a test set of 10,000 examples for handwritten digits with a fixed dimension of 28X28 pixels. The goal is to correctly identify digits and find ways to improve the performance of the model. So let's dive into it -","bef9a332":"## Final Output Layer","90770ca1":"NumPy is an advanced Math Library in Python. Matplotlib will be used to plot graphs and for data visualization. We will import the MNIST dataset which is pre-loaded in Keras. We will use the Sequential Model and import the basic layers and util tools.","3e2188b6":"## Data Preprocessing\n\nInstead of a 28 x 28 matrix, we build our network to accept a 784-length vector. Pixel values range from 0 to 255 where 0 is black and 255 is pure white. We will normalize these values by dividing them by 255 so that we get the output pixel values between [0,1] in the same magnitude.\n\nNote that we are working with grayscale images of dimension 28 x 28 pixels. If we have color images, we have 3 channels for RGB, i.e. 28 x 28 x 3, each with pixel value in the range 0 to 255.","fc7c88f6":"The sequential API allows you to create models layer-by-layer.","ded2d76b":"The batch size determines how much data per step is used to compute the loss function, gradients, and backpropagation. Note that the accuracy increases after every epoch. We need to have a balanced number of epochs as higher epochs come at the risk of overfitting the model to the training set and may result in lower accuracy in the test case.","ae8534e1":"## Building a 3-layer Neural Network\n\n![alt text](https:\/\/chsasank.github.io\/assets\/images\/crash_course\/mnist_net.png)\n","5bd4094f":"Plot the accuracy and loss metrics of the model.","569e602b":"## Second Hidden Layer","561e0f4e":"The Softmax Activation represents a probability distribution over n different possible outcomes. Its values are all non-negative and sum to 1. For example, if the final output is: [0, 0.94, 0, 0, 0, 0, 0, 0.06, 0, 0] then it is most probable that the image is that of the digit 1","2af8c2a3":"## Compiling the model\n\nWhen compiling a model, Keras asks you to specify your loss function and your optimizer.","ae229527":"The loss function we'll use here is called categorical cross-entropy and is a loss function well-suited to comparing two probability distributions. The cross-entropy is a measure of how different your predicted distribution is from the target distribution. <br><br>\nOptimizers are algorithms or methods used to change the attributes of the neural network such as weights and learning rate to reduce the losses. Optimizers are used to solve optimization problems by minimizing the loss function. In our case, we use the Adam Optimizer.","ffd33279":"## Model Chart","4d8ca999":"## Load the Dataset","f6a34951":"Since the output will be classified as one of the 10 classes we use one-hot encoding technique to form the output (Y variable). Read more about one-hot encoding here - https:\/\/machinelearningmastery.com\/why-one-hot-encode-data-in-machine-learning\/\n\n","35d819b1":"## Import the required libraries","44d3c3b3":"In artificial neural networks, the activation function of a node defines the output of that node given an input or set of inputs. ReLU stands for rectified linear unit, and is a type of activation function. $$ ReLU: f(x) = max (0,x)$$","b47bbac4":"## Evaluate the model\n\nWe will now evaluate our model against the Testing dataset","19a9936b":"Now let us introspect a few correctly and wrongly classified images to get a better understanding of where the model fails and hopefully take corrective measures to increse its accuracy.","2e1a06cf":"We load the dataset and verify the dimensions of the training and testing sets.","ceb15047":"Congratulations on completing your first Deep Learning model. I hope you understood the basic concepts behind data pre-processing, model framing, training, and testing.\n\nThere are many ways in which we can improve the performance of the model by tuning the hyperparameters, data validation, augmentation, trying different optimizers and avoiding biased training, and many more! \n\nI have written a blog to give a better explanation of the approach I have used, here is the link - https:\/\/medium.com\/analytics-vidhya\/get-started-with-your-first-deep-learning-project-7d989cb13ae5\n\nLet me know if you have any suggestions\/doubts. Happy Kaggling :)","c674d5e2":"## First Hidden Layer","5b20b9d5":"The final layer of 10 neurons in fully-connected to the previous 512-node layer.\nThe final layer should be equal to the number of desired output classes.","fec21d59":"Here we are randomly selecting 9 images from the dataset and plotting them to get an idea of the handwritten digits and their respective classes."}}