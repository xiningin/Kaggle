{"cell_type":{"ad5a184e":"code","73264706":"code","d1e1747b":"code","45fe6404":"code","e17b7f79":"code","76af1e16":"code","42e67495":"code","25bb7c37":"code","f9dc86a8":"code","2f3b8bc6":"code","e50ad7f0":"code","32f24d90":"code","8341162b":"code","c0e67eed":"code","2bfc9a85":"code","5bde9cbe":"code","43e91aed":"code","1ed13b9f":"code","64549575":"code","2616df68":"code","14ed324e":"code","01b19c83":"code","afe5985e":"code","3ac9d425":"code","031c9646":"code","abc46c1c":"code","b46d287a":"code","36bc35f9":"code","1324b8a4":"code","cba9ba44":"code","49b5b371":"markdown","9da3edb9":"markdown","dc7d6dc6":"markdown","a50db1fa":"markdown","1a1eef35":"markdown","224e92af":"markdown","c1de9268":"markdown","c94a4eb1":"markdown","85c2f8c5":"markdown","62b177a5":"markdown","2cf5a881":"markdown","e7746ec1":"markdown","2facc0c0":"markdown","60434f85":"markdown","bca2397d":"markdown","2eb29ee7":"markdown","2e373716":"markdown","462da6a5":"markdown","72de58c2":"markdown","bb18bf41":"markdown"},"source":{"ad5a184e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","73264706":"data = pd.read_csv(\"\/kaggle\/input\/co2-emission-by-vehicles\/CO2 Emissions_Canada.csv\")","d1e1747b":"data.head()","45fe6404":"v1 = data['Fuel Consumption City (L\/100 km)']\nv2 = data['Fuel Consumption Hwy (L\/100 km)']\nv3 = data['Fuel Consumption Comb (L\/100 km)']\nA = np.column_stack([v1, v2])\nx = np.linalg.lstsq(A, v3)\nprint(x[0])","e17b7f79":"avg = np.round(np.average([data['Fuel Consumption City (L\/100 km)'],data['Fuel Consumption Hwy (L\/100 km)']], weights=x[0], axis=0),1)\nprint('avg formula ' ,avg[:5], ' == ', 'Fuel Consumption Comb ', list(data['Fuel Consumption Comb (L\/100 km)'].iloc[:5]))\ndifference = np.abs(data['Fuel Consumption Comb (L\/100 km)']-avg)\nprint('The average difference is: ',np.round(np.average(difference),3),'(L\/100 km)')\nprint('The max difference is: ',np.max(difference),'(L\/100 km)')","76af1e16":"data.isnull().sum()","42e67495":"data.describe()","25bb7c37":"data.describe(include=['O'])","f9dc86a8":"plt.figure(figsize=(15,10))\nsns.heatmap(data.corr(),cmap=\"BrBG\",annot=True)","2f3b8bc6":"cat_data = data.select_dtypes(exclude=['float64', 'int64'])\ncol = cat_data.columns\ncol = col.drop('Model')#more than 2000 different items..  \nfor feature in col:\n  sns.catplot(x=feature, y=\"CO2 Emissions(g\/km)\", data=data, aspect=7)","e50ad7f0":"num_data = data.select_dtypes(include=['float64', 'int64'])\nnum_data = num_data.drop(\"CO2 Emissions(g\/km)\", axis =1)\ncol = num_data.columns\nn_un = num_data.nunique()\n\nfor id, feature in enumerate(col):\n  if n_un[id] <30:\n    sns.catplot(x=feature, y=\"CO2 Emissions(g\/km)\", data=data)\n  else:\n    sns.relplot(x=feature, y='CO2 Emissions(g\/km)', data= data)","32f24d90":"sns.relplot(x='Fuel Consumption Hwy (L\/100 km)', y='CO2 Emissions(g\/km)', data= data)","8341162b":"new_data = data.loc[data['Fuel Consumption Hwy (L\/100 km)']<20]\n\nnew_data = new_data.loc[new_data['Fuel Consumption Hwy (L\/100 km)']>9]\n\ns = new_data.sort_values(by= 'CO2 Emissions(g\/km)', ignore_index=True)\n\nfeature_to_compare = ['Make', 'Vehicle Class', 'Fuel Type', 'Engine Size(L)', 'Cylinders', 'Transmission']\n\nsns.relplot(x='Fuel Consumption Hwy (L\/100 km)', y='CO2 Emissions(g\/km)', data= new_data)\n\nfor f in feature_to_compare:\n  sns.catplot(x=f, y=\"CO2 Emissions(g\/km)\", data=s, height=3, aspect=11)","c0e67eed":"from sklearn.cluster import KMeans\ndef FuelType_vs_FuelConsumption(data, fc = 'Hwy'):\n  feature_dict = {'Hwy': ['Fuel Consumption Hwy (L\/100 km)',11], #11 is the starting point i chose for looking at the graph.\n             'City': ['Fuel Consumption City (L\/100 km)', 14], #14 is the starting point i chose for looking at the graph.\n             'Comb': ['Fuel Consumption Comb (L\/100 km)', np.round(14*0.54977202+11*0.45035134)]} \n  feature, start = feature_dict[fc]\n  centers = []\n  centers2 = []\n  centers3 = []\n  data_to_plot_dict = {}\n  data_for_fuel_plot_dict = {}\n  for i in range (6):\n    spec_data = data.loc[data[feature]<start+1+i]\n    spec_data = spec_data.loc[spec_data[feature]>start+i]\n    data_for_fuel_plot_dict[i] = spec_data\n    cols = spec_data.columns\n    cols = cols.drop(feature)\n    cols = cols.drop('CO2 Emissions(g\/km)')\n    train_data = spec_data.drop(cols, axis=1)\n    spec_data_copy = train_data.copy()\n    train_data = train_data.values\n    neigh = KMeans(n_clusters=2, random_state=42).fit(train_data)\n    labels = neigh.labels_\n    centers.append(neigh.cluster_centers_)\n    tt = spec_data.loc[spec_data['Fuel Type'] == 'E']\n    centers2.append(np.average(tt['CO2 Emissions(g\/km)']))\n    tt = spec_data.loc[spec_data['Fuel Type'] != 'E']\n    centers3.append(np.average(tt['CO2 Emissions(g\/km)']))\n    spec_data_copy['label'] = labels\n    data_to_plot_dict[i] = spec_data_copy\n \n \n  f, ax = plt.subplots(2, 6, figsize=[40,10])\n  for i in range(len(data_to_plot_dict)):\n    center_high_fc = np.round(centers[i][0][1])\n    center_low_fc = np.round(centers[i][1][1])\n    center_high_ft = np.round(centers3[i])\n    center_low_ft = np.round(centers2[i])\n    p = data_to_plot_dict[i]\n    spec_data = data_for_fuel_plot_dict[i]\n    ax[0,i].set_title('centers '+str(center_high_fc)+' \/ '+str(center_low_fc))\n    ax[1,i].set_title('centers '+str(center_high_ft)+' \/ '+str(center_low_ft))\n    sns.swarmplot(x=feature, y='CO2 Emissions(g\/km)', hue='label', data=p, ax=ax[0,i])\n    sns.boxplot(x='Fuel Type', y=\"CO2 Emissions(g\/km)\", data=spec_data.sort_values(by= 'CO2 Emissions(g\/km)', ignore_index=True), ax=ax[1,i])","2bfc9a85":"FuelType_vs_FuelConsumption(data, fc = 'City')","5bde9cbe":"FuelType_vs_FuelConsumption(data, fc = 'Hwy')","43e91aed":"FuelType_vs_FuelConsumption(data, fc = 'Comb')","1ed13b9f":"data['size of a car'] = np.round(np.log(data['Engine Size(L)'] * data['Cylinders'] * data['Fuel Consumption Comb (L\/100 km)']))\nplt.figure(figsize=(20,8))\nsns.barplot(x = \"size of a car\",y=\"CO2 Emissions(g\/km)\",data = data,\n            edgecolor=sns.color_palette(\"bright\", 6))","64549575":"data['size of a car2'] = np.round(np.log(data['Engine Size(L)'] * data['Cylinders'] * data['Fuel Consumption Hwy (L\/100 km)']*data['Fuel Consumption City (L\/100 km)']))\nplt.figure(figsize=(20,8))\nsns.barplot(x = \"size of a car2\",y=\"CO2 Emissions(g\/km)\",data = data)","2616df68":"plt.figure(figsize=(15,10))\nsns.heatmap(data.corr(),cmap=\"BrBG\",annot=True)","14ed324e":"data.nunique()","01b19c83":"data_with_dummis = data.copy()\ndata_to_dummis = ['Make','Vehicle Class','Cylinders','Transmission','Fuel Type']\nperfix_for_data = ['Make','Cls','Cyl','Trans','F']\nfor col, per in zip(data_to_dummis, perfix_for_data):\n  dummi = pd.get_dummies(data_with_dummis[col], prefix=per, drop_first=True)\n  data_with_dummis = data_with_dummis.join(dummi)\n    \nlabels = data_with_dummis['CO2 Emissions(g\/km)']\n\ndata_to_drop = data_to_dummis+['Model', 'CO2 Emissions(g\/km)']\n\ndata_to_drop","afe5985e":"final_data = data_with_dummis.drop(data_to_drop, axis=1)\nfinal_data.head()","3ac9d425":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor","031c9646":"X_train, X_test, y_train, y_test = train_test_split(final_data, labels, test_size= 0.3, random_state=42)","abc46c1c":"lr = LinearRegression().fit(X_train, y_train)\nlr.score(X_test,y_test)","b46d287a":"rf = RandomForestRegressor().fit(X_train, y_train)\nrf.score(X_test,y_test)","36bc35f9":"kn = KNeighborsRegressor().fit(X_train, y_train)\nkn.score(X_test,y_test)","1324b8a4":"#tuned_parameters = {'weights':['uniform', 'distance'],\n                    #'algorithm':['auto', 'ball_tree', 'kd_tree', 'brute'],\n                    #'leaf_size':[10,20,30]}\n#n_folds = 5\n\n#knn =  GridSearchCV( KNeighborsRegressor(), tuned_parameters, cv=n_folds, refit=False)\n#knn.fit(X_train, y_train)\n#knn.best_score_#0.9886276223291075\n#knn.best_params_ #{'algorithm': 'brute', 'leaf_size': 10, 'weights': 'distance'}","cba9ba44":"kn = KNeighborsRegressor(algorithm= 'brute', leaf_size= 10, weights= 'distance').fit(X_train, y_train)\nkn.score(X_test,y_test)","49b5b371":"Now we are going to produce a new feature named 'size of the car' and we will make it in two different ways:\n\n\n1.   Log ( Engine Size * Cylinders * Fuel Consumption Comb )\n2.   Log ( Engine Size * Cylinders * Fuel Consumption Hwy * Fuel Consumption City )\n\nwhy we do use a Log?\n\nwe want our new feature not to have Linear dependency with our previous features.\n\n","9da3edb9":"So i looked even closer and **this is what i found**:","dc7d6dc6":"# **Now is the intresting part.**\nI looked again at the plot from the Fuel Consumption and saw that there are two different distributions.\n\nand i asked myself why is this happening.\n","a50db1fa":"## **What can we learn from the correlation table?**\n\n\n*   all features have a strong positive correlation with CO2 Emissions except FCC(mpg) that has a strong negative correlation with CO2 Emissions\n*   there is a storng correlation between the size of the engine and the number of cilinders\n","1a1eef35":"### **How does the data look like?**","224e92af":"I cant see anything suspicious... and you?","c1de9268":"Now that we are done with the preprocessing stage, we can try different models and compare their results.","c94a4eb1":"**WOW**, we can see that Fuel Type has a strong relationship with the Fuel Consumption.\nWhat makes that empty bubble is the difference between E (Ethanol E85) and others.\n\nWe can see it in the graphs:\n \n\n*  The high level of CO2 from fuel consumption and the high level of CO2 from fuel type are equal. \n*   The low level of CO2 from fuel consumption and the low level of CO2 from fuel type are equal. \n*   The center of each level is equal.\n\n# **Amazing!**","85c2f8c5":"In this notebook we are going to do the following tasks:\n\n*     Data preperation and exploration\n*     Compare the effectiveness of different machine learning models on this data\n\n","62b177a5":"The best model from the ones we tested is the **Random Forest Regressor**, but not by far.  The models can be examined more to find better hyperparameters which can improve results even more.","2cf5a881":"Our new feature has a good correlation with our CO2 data","e7746ec1":"We want to make all the columns numerical, So we will perform one-hot-encoding using the get_dummies function of Pandas.","2facc0c0":"looking for null's:","60434f85":"Some conclusions drom these describe tables are:\n\n\n*   we have 7385 vehicle's in total\n*   the mean and the median of CO2 is around 250\n\n*   **Fuel Consumption City** is higer then **Fuel Consumption Hwy** in all parametes\n*   most of the unique values\thave less then 50 items, Model has more than 2000 items when the most common one (F-150 FFV 4X4) shown 32 times (1.5%)","bca2397d":"How is the Fuel Consumption Comb (L\/100 km) calculated?","2eb29ee7":"\nWe can learn from this that van's have more CO2 emissions","2e373716":"### **Great!** there are no null's in the dataset.\n## 'describe' is a great function for looking at your data and gaining good intuition.","462da6a5":"The data fits our correlation from before.\n\nWhen the parmater rises the CO2 rises as well.","72de58c2":"## ![gas.jpg](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTEhIVFRUVFxUWFRUVFRUWFRUVFRUWFhUXFRUYHSggGBolHRUVITEhJSkrLi4uFx8zODMtNygtLysBCgoKDg0OGhAQGy0fICUtLS0tLS0vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLf\/AABEIAKgBLAMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAAGAAIDBAUBBwj\/xABBEAABAwIEAwYCBwcCBgMAAAABAAIDBBEFEiExBkFREyJhcYGRMqEHFEJSscHRIzNicoKS8BVTFmOissLhF0Nz\/8QAGgEAAwEBAQEAAAAAAAAAAAAAAAECAwQFBv\/EAC0RAAICAQQCAAQEBwAAAAAAAAABAhEDBBIhMRNBBSJRkTJhcbEUFTNCwdHh\/9oADAMBAAIRAxEAPwD25JJJMViSSSTGIqrDuVZcqULu8kVE62znm\/JXMiqU7dT4lXQUIJDF0FOUbkEki4SoMzk5g6oHQ4uXQxOaE5AhoaukLqa82CABjiNouCdm6+vJXsKiEMJe\/TQveTy0v8gFSePrE4+4w3Pjbb5j5LM+k\/Ei2mbSx\/vapzYmgb5Se+fbT1TJuyr9HrHVEtTiL73meWRX5RNNhb2CNSVUwagEEEcLdmMA9baqy4piO3WLxBjQgAsA4nW17aLQqTZty6wBBPkNSF59jVcZJHOOoJ9hySbKjG2GOCYu2oZcaOHxNvqPFU6+KKre6Jz9I9AAd3c3em3uhDD8TfTlxjt3xl11t4jxCZRYg+Jxcw948zqluBxpknEeBGmLSDmY64B5g9Ch57zyWxiWISzfvXlwHLkPQLHqHjYKRkT6p42c4eTiov8AUp+Usg\/rd+qa9yiJQOyf\/Vqj\/fl\/vd+qlir6p208v97v1VKNtzZE2CUY+IjQbIQrHR4fOWDNUSA8+84\/mqVfG6Ma1D\/mVdxvGRGLDVx+Xmg6are693Egm9lQlZM\/E5b\/ALx3uoX10h+273Ua6GpDOdq87uPuV0E9SphCu9igCGyVlN2S72aAPplK64kqJHJLl11Axr9lnUer3H0V6odZpQ9hONMcXd4aEjx0NlLfJtji3FtG4w95WC9ZdJNndfktIAJkSVdiuSuhi7mC7mTJO2XC1czhdzBAHF0OSzBNJCAJLrJx6sytyg6u+Q5lS1+INiaXO2CHQ51Q8Ei2c6Dowan3\/NITNfB4ckeY7v19OXyQhTD65jT37x0TA0dO1dv7fki\/GatsEEsztBFG53sNEO\/RfQFlH2r\/AN5UudM8\/wAx0\/zxTJa9Be4qMlPcFG5wA\/D\/ADmgKKWLwufE5rBcnkhhnCM7\/iLW+ZufkjVso8T5aqUE+SCk6AKt4JmBYWPY4d7PmJbbTQgWNypGcHO5vb42v+iNHO5DU\/5uhbi7ihlOCxpD5en2WeLhzPglJpK2a4sU8stsUC2M0sMJyukN+YGp8NLIXqaiO5tm9QFVrq8vcXOJJJJJPMndUjLdc7ynrQ+GQfDfJbdUN6+6Rd0IPkqLir+GYC+bVu3W9kLLZnl+FuN7ZF7C6YuO2+yJaxro4Tl3A0AFys+mwGaCzo5Q4\/ddt6FPmx\/K0iRpY\/odj5FbxaPMy4Zw7QJzuJJJ3VdytTOzEk81FlTIGxNUzWJMap2NSAmhjUoiXGGymY5MBgpl36orLXhJ0oRQHviSV1DLOAgkmSuqwqgqVTXOvYBJyRSi2X6w90oKp6JsLpDccyL7DW9lq4piDww2GqCsRxGSVjmbaanmQs5TVnoaXT5JQdewnwbFxIe49mmh6ei15qx4+21ef8K0kkfwsDgddSRZEj6qS9jF\/wBX\/pLyIrJhSnX+i87EpSbAj2KBca+lKRj3MpmMe1hIMshORxBscjWkXbe4zX1toLam7xzWvZTFjAWyTHs2kHVoIJkd4WYHa9SF5nHGGOaLWDCL3+EW2F+YJt81pFezmzTiuIoN6T6X5\/tQQydckjo9OouHXWq76WonDSOVh53axwB8w8X9l5TXSlziDYW0sL2uND81B6hVRgptOz6A4c4h+tAujnY+27bFr2\/zNOvrsiIF1t18vNqiwjK8tdyLS5rh4hwsQiDB\/pHrYe69zJ29JRlk9JG2J9Q5KjR5VLtUeuYvC+WaOPNpe7gPujr8lt4YwZ3uGze4303\/AM8F59wzxzA9z3zuEMpFo2PBDT4Nk+EnwuD4L0LCwWQtzfEdSOZc7X80JGc5bmR8T4UKmFsD3EMe9pkDfie1pzZAeQJAueQBWlDE1jQ0ANa0BoA2AAsAFj43xFS0QD6qYNe\/RrQHOef4WMaCSL2ubb+i2I23s431ANiLWvyI6qjMbLmcLN0HUj8OqcyADx81ISmucALk2AToLHE2UBkzbaDr18v1WbPjMe9y4cmMGZzvE22HmsTH8WqzGTFEWN66GQg9ByUylR04NLLI1fH6kvGPEwpmdnDrK4eYYPvHx6LyGtqHOJJJJJuTuST1RLUYLVP1MTu9rc6k+aovwGYGxbZck3N+j6XS49LhW3el9X7f\/Ad7Ekp8NJI42a0nyRxQcBPcGvfILO1sFuxcOiNpDHBp62ULHP2ay1mjjxCXJ5bLhsrBmewhIVskY7jy2+tr7IsqsCfIXZpD3SQL7E+CgZwQX6h5vsp8c30bPXaXHF\/Mvt\/kGf8AiaYOy58w2uq2IVMjz3nEhG\/\/AMeRixLz46KebgqEC5e5aPHk4o4I67SSjJZGuXxwzzWCuLDZ2rfmFt0sjXi4N0\/iLhsRjMw5mn3Q5TPdE+4vbmFvCb6keRqdJFryYXaCcMUgYjTh\/g6OrgbLDODmGul7HmPBaTfo3f8A7o9lsebR581isR0Lzs02RtLwJMzVrwfIC6iHC1QftO\/tQAMw4OTubeSlOEN6lE0fCFQftH2CceC6j7x+SYuT0dUqpoJVu6qyi5Wc1apFRfJX7MdF0RhS5FDK+yyWNlbihjUfcNuiBvqbmgk8wjarmzaLHxdgyH2Wj0727j0NJqHD5PqX+GYx2bfILVmp2lZOAwFsY8lZxSrEMMkrr2jY55\/pBNvksVjkYZ297Z57xjUh1RJbUQhsDB1keWvlIPrEzzaUK1sOaJ8zi0sabkXNzr3Q0WtqdB4hXMVDiGMc45iHSSluhMj3FxI6Xc5x\/pQ3jlRIWtp923a7NzNs3x+Ny49O8ulKlRxt3yZtTTSBxDnEG+o3sTrYHnvunf6fLltYgbgkhp9SbaLUrZWRPdHqzJkAJ7z3NLWk3dy3JsLDWyzJJhmvyQBNSYGXayVEUYHN78xPXK1gOvnZXGU8LA5pmbI3Qhzou8DpcBgcR1scw32WO+o6KF05QMJqcwEEvcxwALixrXgkA2IsdAbdD+C3uHvpCNCJYwX1MLWE04dcGKT7Lbu17Pe45chqQvN21LgQQdQQR6LSxWUvs\/fMzWzQGl3oNzfX35oEH30Z4b9dq5MTxCVrhE4Ze0cADNo5tgTYMjFrDa5HQr1Ku4xooxczteekffJ\/t0Xg1EGtYGb2G\/jz0563Vwac0xM9opOIDUW7EANIvmPeIHlsD4KDGpi1jQXOdmkY3vHSxcL6DRZX0ewZaUvP23ut5NAb+IKu8Qu7sf8A+0f\/AHJhHtGkNNgB5aKGSU9U9zlTlesT1ccQipTdvos+vynukDXc2CnwqS7PRYlVWAvcb6NuDr0SnPbE5licptET2zMNon3HitCagfI0Bxtz0NkGx8SuMwbG27c1if0RvFXDKNNengsYSm+WuDbJGMaSaswavBpgCA4Fvjv4LToWAxja4+LzUdVMWtceoKweEq+0zmO2dqL9f8\/BbKrOeduITl19NEyqoMzd9FEycdqcv2D7rZp6y+haL3utaOcC8SwMud8YAtsUNcRcG93PEcx5tA\/BerSsbzbryKs0VO21rD1UygmdGm1UsEuOV7R4Rwtj9Rh8uZgJYT+0iOzh1HRy984d4igq4hLE8WO4OjmnmCORQjxbww113xgeIHNeWV1E+B5ewuaPtBri2\/spi2uGdmpwwyx8uLo+lu2b94e6aapn3m+4XhmFBkrA4SPPUF7tPmrZw9v8R\/qd+q1o8u0ez\/W2ffb7hc+uR\/fb7heOtoWW5+5XfqDPH3KKFaPV5aoAbqOGpBQdiOMWb8RVjB6wuO5UbkaeNrlhb2gVOskFk9o0VSpbqqZkZdTOAVNVUudtuWijkoyXX13WiGkWAF0lbVHS8qgk12TUFNlYBc7IW+k2Z7aVsceYumlY3ui9msvK4kdLsaP6kse+kOkpbt7TtZBpkhs6x\/if8LfK5PgvLuJ\/pBqqsi2WFjc2XJfOMwAN5DrfQfCGp0kY+WUux+IzZX55X5cze8D8enw2ZuN3dBosirxu4yxt017z7F1ibjw066nxWM7W5cd9Tc8+qY15dfKLgbnZo83HQIsmi7LU3a4vu9zjfoGnYkW5\/LRUi4psjP8AmtcejcwA9SBf\/N05kDrX3Fr2vrbwSGNL0wldTXKgG6K7Q1L9GNe4NO7b6HzHsqCuYWzUn0SAIIFchffdU4VYiKZLPY+GZWfVIchuA2x65gTmuPO6g4iP7Np6SRn\/AKws\/geNzaa5OjnuIHQCzT8wVc4i\/cuPQtPs4FMS7Rfc9Z9bUZWk9FbLtB5LJrrEhvjcjyWDPdwpOja4bqjkObQ\/qhzHcMBN+1y5i4n1ToMSDZ2x3+LUrRxOnDtSOhWOee3G2J4tudXxZjcP8Pxskae2J52tujiOgba+a6HsMiAuRsDbyWux5ynXmliySyY0zmzY4wyVfRar8Pa5rRfcaLBFHFE4PA7wPTmrs2JEOYw7deiWKgC1z6okm3QRaiixDStPfGmbVadLR63KrYTJmjy8x+asdt6LsXRwS7ND6mC30ULXCMC53UIndy2VKe+tymItVUgdz+SDeJMCbIC+PcbhbbwRslFUNbo4G\/5eaiUbOnT6mWF\/Ve0eQ5n00mZt8t++1FdHWNkaHNO6m4rw1j2mWP8AqAQNRV5hfdvwE6t6JRl6Z0avSpxWbF0wxFcMxafdWc6GzUBxzDYrSpq0ZRfdaWeWaWNxi2i0OHaoCwKrYywZd1n0biLFc0mkdSk3HaenU8wIC0IqVp1K88j4ibGWx5v2j7hjQMzibXAsOvLqpJqmR\/emkcGjXU5Q0beQPlr4rTeZKAY1WMU7NnB5G4B0HS5PLTkChHHOInm4deOJ4OUWILxs4HckgnXYahBjuJYov2TDnfG\/L2pPddE8nLrc6t7uvgVSqsVraqYRQRul7O+lhlaSC0lzrgAeZGyLbQ6SBXiFjWzuOtnHMLm518OWt9EzAcCqK57m07W2YM0kkj2sjjZ95zjy8rq5xhgc9NMw1Ra4vaHdw90d43Ze2401\/iCr4bSRVFVHEbxRSODHZTdwG9he41IbvfWx5K0yX2TVuFUrHNhp5ZMQqidREwilHVrbd+Ug\/aGVtuqIqX6N6s5ZK1jhHa4igDXBt\/suEfweOUf1L0rh\/DKSlZkpo2xj7TjrI\/8AnedT5bdAt+LEGgauCW4bSo8YxbhamkicIY2Me0HK5uhzDk7r0N9UF0lA4xveXNBjLg6M3zaDvX6dLeHgvoXiGlgqWOHdElu7IAA9p5WeNfReW\/SFE2njjaGtMz44opH21e4NzOJ\/ucndkLg87cmFSlt01kTnHK1pcejQXE23sBqmMiIWrhkdmjx1TaXD3C5eLHUNad79T0V2mj0AQBbiVpo52TaWK5G3rtYLXODzdgZ3aNFu7qDl+8B0vZMlhNwNiWjoHH+Nn\/kPwPut7Gm5oJB\/CfwXm2HVZje14OrSD59R7L0p8ofHcG4c248iEySCnqLxMd1YD8kO4NLmzne7ib3J5nqtPA5M1Oy\/IFvsSFSjiaztA0WHL2WEuz6TSSWxr9AXxDECKgyD7LtPRbE\/GxLf3fKx1QpUOu4nxKUZuLFc05Oj11pseWS3LroOMJ4o7hu21zf8lcHFFuSE6KAhoCndGVpFJKjgnp91vx+yXEuMf2nw3soZeNDJZrmnohSqBzuv1T8Pp80g6JcX2ZeOlxjX6cnp+GcWdnbTS1ipZOMtfhQk2Ipj4ytFL8weki+fF+4XO4y02UTuMD91CnZlMMZRu\/MHo4V\/S\/cLHcX\/AMKxsT4zIk20sOayiwrLxekJGbpv5JOT+oPSwir8X7hGzjUAWyCx3Q3iM7ZHl8Ytfks1sZVqPRug1WOST7OvS447XDaop99klHWZDb7J+S22S3F0Mvad7J8Na5osF048lrk8DW6J453HpnqZheWkvsGgXJOgA5kkoQx7i1oBipQNNHTEa3\/gB289\/JQcY8WuqyWx3jpmnQbOkI5u\/TkhbDaCasmbBTRlzjyGgaObnu2a0dSiONLlnLPJu4SoikxEh4eHEvBDg4nUOBuCPVEc9dVVrrmOR7jraxDATqTrZo6r0zg76M6ekAkmyz1G+Zw\/Zxn\/AJbD\/wBx18kXzYcHbpypkJ0eJ4fw6L\/t25n3GjSQ3L9x33hdHWF1D22ja0MaNmtAaPYIrbgrByCccKG9lD5NYyilTQFcbYOaqncBrIy7o783W+G\/K+3seS8ZpZix7XC4LHA9Ddpv+S+mpcNJ3XjH0o8LmlqBMxv7Kck6bNlGrm+vxD+vorizFm1mncA5rtD4+yli7fnc+qHuHONjTxCKaDtQ0dxwcGuA5NdcEEDr+Ko4rxVU1TuzjBYHfDFC1znu8LjvOPsPBLazbfCugml4njpye1Jc77jTc3\/iOzfXXwQXxXjprJy4A5SSIm5RnsetrkuOg8gAPHawj6Pp3kGoIhb90WfKf\/FnrmPgjnB8Ap6YfsowHc5Hd6Q+bzqB4CwVWkYvkBOEeBnyvD6pro4uUZOWSS+17asb52PkvT4cGpqanMcULGNc0h9t3h1wc7ycztL7lKD4vLX9PmUsZfmLYxsBd3iOQ+SaCjz6TAoWZntDsliG53XvyvsDZUsQwnIA9o7jrebXEbeXNFuNtAZ3tjb5LO+sNlYWO05X+YPpZIrbcbRT4VpA6aO\/3r28GjMvQ6gNc0tOocCD5FAWCVRp5rP+E6HpsbPHufcowmqwACToTotDFgFiNH2T3MO7Tbzbu0ot4Tqc0GQm5aSPQ7fmsTFXfWKjK2wt3b+Avcn3KgwqrdE\/LtqWn3t8kAbmCyZe1i5tkcfQ6plQ+zXu81WE4bVv6SMzDzCjxOW0Lj1H4rGfZ7\/w57ooD5TqnU3xDzUbin0zrOB6LlfLPocbp2Ezm6DkoKgWaTfkVYYbjzVDE22jcOapP0PLj\/uSsGpt91ewVvf35LMY3Wy0MLaQSqS5o8pZH+Lab5PiuHzVVhXHOKqvzOjz\/LewsnzXLeKrZlG96VB\/EfLe0sTOsL3WLV1D3c9OisVbu6VjypOPNEZNUlH8L+5NY9UteqjZsmEJbTmlmSSdP7lht7pSR6qHVSho6qXaNoyjNU192LBsKnxCobBA3xJ+xGwHVzvDw3JX0HwnwxBQQ9lCLk2MkhHfkd1d0HRuwXOC+FIsPpxEzvPNnTSW1kf+TRsByHiSt\/Kutuz5VIYugp2VLKkMbddXQ1LKgDiyeKcDZW0slO82zC7HWvkkbqx1udjuOYJHNbAallQB5Fg\/0PvzXq6luQfYguXO85JGjL6NPmF6DQ4DTUcRbTQtj01cNXu\/nebud6lbmVQVrO4UWIDRJc3XXFQRlPJUlIngOt\/8sNVEDe7ju7X9EpHbN5u3\/lG\/6KZsDnA22C0XRLBPiB5LwwefqVnPpS1aFUCZnn7unquM531SKbrgy5nE2B3G3l0VkV57MMP2b5f0PkmPYoBHdUmQ+SWlBFzfUqCsuHB3up+R9F2dlxpzVIhjaxz5OxewDMLtOtgQqmKVcwjyOjt4g30U1I+zPFrgVFic13mymUUzow6nJh\/CDj6k8wfZKKtAWsW9Qo5I2fdHssnhR3Q+LZV2aVFiTCALrmMOJZdp3VFtFG7YZT1CqVrJI9zdvIqJ4muUerp\/jMcnyZOCmQ5aeF3sSoKaz\/NX2QlrDqsYz5o9CGlaj5U20Sh7kjI5V2vPVNdIeq12mf8AFxUbdlrtCmOeeigbIeqa6U9UbQerhtvkZWykDZZrnHmFYrJjdUi8lTt5ObNqIv2yUlcBPRMa42XM6KMHlSrslz25LmfwSLtE3MhRscsqXbPqZjwRcLt1gwzPgFnXLRzWnS1zHi7SFufOFtJNuuFwHNFgSLiYHg7FdumA+6V0y6V0gH3UVT8J8k\/MmTHulFgAN+8fM\/ipGan\/ADkoZjaR4\/iKkjOh8rJDFQXke4+OQeQ3PutyazW2GwCzeHossZcerh89VLis5Ebj4H8FsjOXYGtk7zz95xKRG6jiF7JB5KllEcrLKOPT2Vmo2UTmIERsbf5\/gnwssd1G4EbLsBNyT5qkJopSH9o4dbqg09VYldrf1+aru+I+OqYidsd1FLAb2VuiOoRAygaTeyBWCrYSFJuLO1CKnULTyVKqwjoihpgbVUjozmZqFPDiYAs4LbFLbRW6TDGu3aFjLCm7PU03xbNgjtT4B5uIx9Fw1kZRR\/oMZ+wEx\/DcR+wl4TpXx2fTivsgbFRGuOmi6ohPDMX3FE7hmL7pS8LK\/naapwX2BSre3NoVBZtiboll4fjB1aVE7AY+hR4nZjL4nCfcQdY4WtdMLR1REOH4\/FL\/AIeZ\/EhYmiZa+ElTiYOYWsuWHVbTuHW9Smnhr+IoWJilr4S7R7k2qzixGhQxiUUsUofTu828j6clo1lY2Nu6ysLry+a526Jnm9hXg+MZxZ4yu5gqWWYuky3VeppGuF26OQvi9dPA8PylzR8QG\/mEWNhnJA5urTdS0VZm0O6zMJx+OVoN\/O+h9QndqDLdqANy6V1B2q72iBUS3UVU+zClnVHGpssTj4FAUBTZsz3HqT+Kq4tjLIDE13\/2vyX+74nwuQoMIluL+aGPpIf34QOTXH3I\/RHsfo9KwWfuOb0eT6EX\/VRY5L3Drv8ANZHDNdnYH\/7kYd\/ULX\/P2U2NT3s3xWy6M32ZVKNfNItsUozt4fmnyDVSyiOZNcuyHZMe5IQx5TM\/dPgFyR6pyTHXxTQENTuPIKOWO7Q4ck6Y3uVUnqSLNHNUhMtU0mqL8MkDmjwQPG5EOBVdjl6polhO1qd2abE5SqyTBrYsriu0lRlPgreLs2KxyVBQQtrmdVIKyPqhguXDIUBQU\/Wo+qb28fUIWMpTTMUWFBQ90R3IUPYw9UNmYrhmPVFjoJP2I5hJ0kPghntil2pSsKCMzwpv1qND3alLtCiw2mrNUuebuPomMreyIISSWLNEE+HY5nAWi+qa8WcLpJKCyk+hb9g2T8Ka9j+9c9DyXUkIQQtkUgcupKxHbrJ4oktTv\/lP4JJIA85wCTSywvpE\/fR\/yH8V1JNdi9FjgXECYSwNJMT3DduokLnAanxK26ypJJLmu\/tLrf23SSVrgl8kLKlmxcBfrofYqYOvqDdJJIbQyRRPK4kgRC8qvLHdJJAFOoFhqsuN2Zxdy2CSSpCJw5XKSexBSSVCDTDaoPaFpsKSSpEFTEm3asIpJJMaGOCYQkkkUMsm2SSQAxwUZSSSAVl1JJIYlyySSAP\/2Q==)\n\n### **E = Ethanol (E85) is making less CO2 then the other fuels**","bb18bf41":"so.. i looked at a the specific part of the data that had the different distrebutions and tried to look for the responsible features."}}