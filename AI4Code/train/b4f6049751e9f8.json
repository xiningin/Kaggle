{"cell_type":{"1ace2496":"code","8d360d60":"code","10c33eb0":"code","a8433ae1":"code","095e9b35":"code","07c9acf5":"code","e0e68843":"code","e485742a":"code","91fc48c2":"code","a6a0330d":"code","5d4e138c":"code","ef07fdc8":"code","45cc195d":"code","4f0e2018":"code","4fec7fcf":"markdown","825b6d68":"markdown","af9f5e89":"markdown","771c6515":"markdown","4f30338f":"markdown","c3783962":"markdown","c340d535":"markdown","5a7c58ab":"markdown"},"source":{"1ace2496":"import numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport os\nfrom tqdm import tqdm\n\nimport tensorflow as tf\n\nimport keras\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ModelCheckpoint,EarlyStopping\nfrom keras.layers import Dense, Activation, Dropout, Flatten, Input, Convolution2D, ZeroPadding2D, MaxPooling2D, Activation\nfrom keras.layers import Conv2D, AveragePooling2D\nfrom keras.models import Model, Sequential\n\nfrom sklearn.model_selection import train_test_split\n\nfrom keras import metrics\nfrom keras.models import load_model\n\nfrom keras.models import model_from_json\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nimport warnings\nwarnings.filterwarnings('ignore')","8d360d60":"df = pd.read_csv('..\/input\/utk-face-extracted-info\/extracted_info.csv')\ndf.dropna(inplace=True)\ndf = df[df['Age'] <= 90]\ndf = df[df['Age'] >= 0]\ndf = df.reset_index()\ndf = df.drop(columns = {'DateTime', 'Unnamed: 0', 'index'})\n\n'''\n'''\n# df['Name'] = df['Name'].apply(lambda x: '..\/input\/utkface-new\/UTKFace\/' + str(x))\n'''\n'''\nnum_classes = len(df['Age'].unique())\ndf.head()","10c33eb0":"fig = plt.figure(figsize=(22, 5))\nfor i in range(10):  \n    fig.add_subplot(1, 10, i+1)\n    img = mpimg.imread(df.iloc[i]['Name'])\n#     img = np.random.randint(10, size=(h,w))\n    plt.imshow(img)\n    plt.axis('off')\n#     plt.title(\"Figure\" + str(i))\nplt.show()","a8433ae1":"'''\nlen(df[df['Age']>93]['Age']) ------- just 46 people\nclasses = 101 #(0, 100])\nprint(\"number of output classes: \",classes)\n'''\n\ndf['Age'] = df['Age'] - 1","095e9b35":"dff = [1, 2, 3, 4, 5]\n\ntrain = [1, 2, 3, 4, 5]\ndf_test = [1, 2, 3, 4, 5]\nval = [1, 2, 3, 4, 5]\n\ndff[0] = df[df['Race'] == 0]\ndff[1] = df[df['Race'] == 1]\ndff[2] = df[df['Race'] == 2]\ndff[3] = df[df['Race'] == 3]\ndff[4] = df[df['Race'] == 4]\n\ndff[0]['Age'] = dff[0]['Age'].astype('str')\ndff[1]['Age'] = dff[1]['Age'].astype('str')\ndff[2]['Age'] = dff[2]['Age'].astype('str')\ndff[3]['Age'] = dff[3]['Age'].astype('str')\ndff[4]['Age'] = dff[4]['Age'].astype('str')\n\ndf.hist()","07c9acf5":"for i in range(5):\n    df_data = dff[i].Name\n    y_data = dff[i].Age\n#     y2_data = dff[i].Gender\n    X_train, X_test, y_train, y_test = train_test_split(df_data, y_data, test_size=0.20, random_state=40)\n    d = {'Name':X_train,'Age':y_train}\n    df_train = pd.concat(d,axis=1)\n    # df_train.head(3)\n\n    #################################\n\n    df_data = df_train.Name\n    y_data = df_train.Age\n#     y2_data = dff[i].Gender\n    X_train, X_val, y_train, y_val = train_test_split(df_data, y_data, test_size=0.1, random_state=42)\n    d = {'Name':X_train,'Age':y_train}\n    train[i] = pd.concat(d,axis=1)\n\n    ################################\n\n    d = {'Name':X_val,'Age':y_val}\n    val[i] = pd.concat(d,axis=1)\n\n    ################################\n\n    d = {'Name':X_test,'Age':y_test}\n    df_test[i] = pd.concat(d,axis=1)\n\n    ###############################\n\n    train[i]['Age'] = train[i]['Age'].astype('str')\n    df_test[i]['Age'] = df_test[i]['Age'].astype('str')\n    val[i]['Age'] = val[i]['Age'].astype('str')","e0e68843":"len(df[df['Age']>=80])\n# pd.merge(df, train, on='Name')['Race'].hist()","e485742a":"__train = False\n\nbatch = 512\ntrain_gen = ImageDataGenerator(rescale=1.\/255)\ntest_gen = ImageDataGenerator(rescale=1.\/255)\n\nif __train:\n    \n    train_data = [1, 1, 1, 1, 1]\n    val_data = [1, 1, 1, 1, 1]\n    \n    for i in range(5):\n        train_data[i] = train_gen.flow_from_dataframe(dataframe = train[i], \n                                                   #directory = train_folder, \n                                                   x_col = 'Name',\n                                                   y_col = 'Age', seed = 42,\n                                                   batch_size = batch,\n                                                   shuffle = True, \n                                                   class_mode=\"sparse\",\n                                                   target_size = (224, 224))\n\n        val_data[i] = train_gen.flow_from_dataframe(dataframe = val[i], \n                                                   #directory = train_folder, \n                                                   x_col = 'Name',\n                                                   y_col = 'Age', seed = 42,\n                                                   batch_size = batch,\n                                                   shuffle = True, \n                                                   class_mode=\"sparse\",\n                                                   target_size = (224, 224))","91fc48c2":"model = Sequential()\nmodel.add(ZeroPadding2D((1,1),input_shape=(224,224, 3)))\nmodel.add(Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2,2), strides=(2,2)))\n \nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(128, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(128, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2,2), strides=(2,2)))\n \nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(256, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(256, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(256, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2,2), strides=(2,2)))\n \nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2,2), strides=(2,2)))\n \nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2,2), strides=(2,2)))\n \nmodel.add(Convolution2D(4096, (7, 7), activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Convolution2D(4096, (1, 1), activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Convolution2D(2622, (1, 1)))\nmodel.add(Flatten())\n\nif __train:\n    model.load_weights('..\/input\/vggfaceweights\/vgg_face_weights.h5')\n\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(num_classes))\n\nmodel.add(Activation('softmax'))","a6a0330d":"model.output_shape","5d4e138c":"# model.load_weights('..\/input\/model-weights-for-utkface-dataset\/age_model_weights_utk_1.h5')\n# model = load_model(\"..\/input\/model-weights-for-different-races\/classification_age_model_utk.hdf5\")","ef07fdc8":"if __train:\n    Model = [model, model, model, model, model]\n\n    for i in range(5):\n        for layer in Model[i].layers[:-7]:\n            layer.trainable = False\n\n        Model[i].compile(\n          optimizer='adam',\n          loss = tf.losses.SparseCategoricalCrossentropy(from_logits=True),\n          metrics=['accuracy'])\n\n        checkpointer = ModelCheckpoint(\n            filepath=\".\/classification_age_model_utk_\" + str(i) + \".hdf5\"\n            , monitor = \"val_loss\"\n            , verbose=1\n            , save_best_only=True\n            , mode = 'auto'\n        )\n\n        callback = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=4)\n\n        history = Model[i].fit(\n            train_data[i],\n            validation_data=val_data[i],\n            epochs= 20,\n            callbacks = [checkpointer, callback],\n            shuffle=True\n        )\n        Model[i].load_weights(\".\/classification_age_model_utk_\" + str(i) + \".hdf5\")\n        Model[i].save_weights(\"age_model_weights_utk_\" + str(i) + \".h5\")\n\n        ____train = False\n        if ____train:\n            for layer in Model[i].layers[:-2]:\n                layer.trainable = False\n\n            history = Model[i].fit(\n                    train_data[i]\n                    , epochs=10\n                    , validation_data=val_data[i]\n                    , callbacks=[checkpointer]\n                    , shuffle=True\n            )\n            Model[i] = load_model(\".\/classification_age_model_utk_\" + str(i) + \".hdf5\")\n            Model[i].save_weights(\"age_model_weights_utk_\" + str(i) + \".h5\")","45cc195d":"batch = 512\ntest_gen = ImageDataGenerator(rescale=1.\/255)\n\ntest_data_race = [1, 2, 3 ,4 ,5]\ntest_data_race[0] = test_gen.flow_from_dataframe(dataframe = df_test[0],\n                                         x_col = 'Name',\n                                         y_col = 'Age',\n                                         batch_size = batch,\n                                         shuffle = True,\n                                         class_mode='sparse',\n                                         target_size = (224, 224))\ntest_data_race[1] = test_gen.flow_from_dataframe(dataframe = df_test[1],\n                                         x_col = 'Name',\n                                         y_col = 'Age',\n                                         batch_size = batch,\n                                         shuffle = True,\n                                         class_mode='sparse',\n                                         target_size = (224, 224))\ntest_data_race[2] = test_gen.flow_from_dataframe(dataframe = df_test[2],\n                                         x_col = 'Name',\n                                         y_col = 'Age',\n                                         batch_size = batch,\n                                         shuffle = True,\n                                         class_mode='sparse',\n                                         target_size = (224, 224))\ntest_data_race[3] = test_gen.flow_from_dataframe(dataframe = df_test[3],\n                                         x_col = 'Name',\n                                         y_col = 'Age',\n                                         batch_size = batch,\n                                         shuffle = True,\n                                         class_mode='sparse',\n                                         target_size = (224, 224))\ntest_data_race[4] = test_gen.flow_from_dataframe(dataframe = df_test[4],\n                                         x_col = 'Name',\n                                         y_col = 'Age',\n                                         batch_size = batch,\n                                         shuffle = True,\n                                         class_mode='sparse',\n                                         target_size = (224, 224))","4f0e2018":"for iii in range(5):\n    mae = 0\n    print(iii)\n    model.load_weights(\"..\/input\/utkface-racewise-model-weights\/classification_age_model_utk_\" + str(iii) + \".hdf5\")\n    \n    B = model.predict(test_data_race[iii])\n    output_indexes = np.array([i for i in range(0, num_classes)])\n    apparent_predictions = np.sum(B * output_indexes, axis = 1)\n    df_test[iii]['Predictions'] = apparent_predictions\n    count = 0\n    for i in range(len(df_test[iii])):\n        if int(df_test[iii].iloc[i]['Age']) < 16:\n            continue\n        count = count +  1\n        mae = mae + abs(int(df_test[iii].iloc[i]['Age']) - int(df_test[iii].iloc[i]['Predictions']))\n    print(\"MAE is \", mae\/count, \"for race\", iii)","4fec7fcf":"## Loading Previously Trained Model","825b6d68":"## Generating the Test, Train and Validation Datasets","af9f5e89":"## Age, Gender and Race Distribution in the original Dataset","771c6515":"## Training","4f30338f":"## Testing for separate Racial Datasets using Previously Trained Model","c3783962":"## Visualising Some Images in the Dataset","c340d535":"## Visualising Race Distribution In the train dataset.","5a7c58ab":"## Testing MAE For Separate Races"}}