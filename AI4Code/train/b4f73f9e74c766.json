{"cell_type":{"9f8b8f1f":"code","4151804d":"code","72ad5db0":"code","35eaf6d4":"code","8956da0b":"code","ad7e7303":"code","2f954443":"code","c02b0696":"code","0f27dc38":"markdown"},"source":{"9f8b8f1f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4151804d":"# Read training dataset\ntrain_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\n# train_data = pd.read_csv('train.csv')\ntrain_data.head()","72ad5db0":"# Read test dataset\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n# test_data = pd.read_csv('test.csv')\ntest_data.head()","35eaf6d4":"train_data.info()","8956da0b":"# To Identify the percentage of women survived\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","ad7e7303":"# To Identify the percentage of men survived\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","2f954443":"# 1. Random Forest Classifiers\n\nfrom sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\nprint(predictions)\n\n","c02b0696":"# 2. Logistic Regression\n\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LogisticRegression\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = LogisticRegression(random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\nprint(predictions)","0f27dc38":"TWO DIFFERENT CLASSIFIERS USING WHICH WE ARE GOING TO PREDICT\n1. Random Forest Classifiers\n2. Logistic Regression"}}