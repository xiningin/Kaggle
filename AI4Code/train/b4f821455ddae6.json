{"cell_type":{"33e71c39":"code","e14864d8":"code","1003f459":"code","ac01adb5":"code","589017a4":"code","6e81933c":"code","17cb4ee8":"code","fd3048b8":"code","f867a108":"code","ffbaa0a4":"code","7f738b06":"code","a2873162":"code","6ffa1aef":"code","1f1d6c2a":"code","295cc798":"code","8720ae6c":"code","21d107b7":"markdown","a19e8463":"markdown","a389193a":"markdown"},"source":{"33e71c39":"import numpy as np,pandas as pd,pylab as pl\nimport h5py,torch\nfrom tensorflow import image as timage\nfrom torchvision.datasets import CIFAR10 as tcifar10\nfrom torchvision import transforms,utils\nfrom torch.utils.data import DataLoader as tdl\nfrom torch.utils.data import Dataset as tds\nfrom torch.utils.data.dataset import Subset\nimport torch.nn as tnn\nfrom IPython.core.magic import register_line_magic\ndev=torch.device(\"cuda:0\" if torch.cuda.is_available() \n                 else \"cpu\")","e14864d8":"class TData(tds):\n    def __init__(self,X,y):   \n        self.X=torch.tensor(X,dtype=torch.float32)\n        self.y=torch.tensor(y,dtype=torch.int32)\n    def __getitem__(self,index):\n        train_img,train_lbl=self.X[index],self.y[index]\n        return train_img,train_lbl\n    def __len__(self):\n        return self.y.shape[0]","1003f459":"class AlexNN(tnn.Module):\n    def __init__(self,num_classes):\n        super(AlexNN,self).__init__()\n        self.features=tnn.Sequential(\n            tnn.Conv2d(3,64,kernel_size=11,\n                       stride=4,padding=2),\n            tnn.ReLU(inplace=True),\n            tnn.MaxPool2d(kernel_size=3,stride=2),\n            tnn.Conv2d(64,192,kernel_size=5,padding=2),\n            tnn.ReLU(inplace=True),\n            tnn.MaxPool2d(kernel_size=3,stride=2),\n            tnn.Conv2d(192,384,kernel_size=3,padding=1),\n            tnn.ReLU(inplace=True),\n            tnn.Conv2d(384,256,kernel_size=3,padding=1),\n            tnn.ReLU(inplace=True),\n            tnn.Conv2d(256,256,kernel_size=3,padding=1),\n            tnn.ReLU(inplace=True),\n            tnn.MaxPool2d(kernel_size=3,stride=2))\n        self.avgpool=tnn.AdaptiveAvgPool2d((6,6))\n        self.classifier=tnn.Sequential(\n            tnn.Dropout(.5),\n            tnn.Linear(256*6*6,4096),\n            tnn.ReLU(inplace=True),\n            tnn.Dropout(.5),\n            tnn.Linear(4096,4096),\n            tnn.ReLU(inplace=True),\n            tnn.Linear(4096,num_classes))\n    def forward(self,x):\n        x=self.features(x)\n        x=self.avgpool(x)\n        x=x.view(x.size(0),256*6*6)\n        logits=self.classifier(x)\n        probs=tnn.functional.softmax(logits,dim=1)\n        return logits,probs","ac01adb5":"def model_acc(model,data_loader):\n    correct_preds,num_examples=0,0    \n    for features,targets in data_loader:\n        features=features.to(dev)\n        targets=targets.to(dev)\n        logits,probs=model(features)\n        _,pred_labels=torch.max(probs,1)\n        num_examples+=targets.size(0)\n        correct_preds+=(pred_labels==targets).sum()        \n    return correct_preds.float()\/num_examples*100","589017a4":"def display_examples(data_loader):\n    for images,labels in data_loader:  \n        print('Image dimensions: %s'%str(images.shape))\n        print('Label dimensions: %s'%str(labels.shape))\n        n=np.random.randint(1,50)\n        fig=pl.figure(figsize=(11,4))\n        for i in range(n,n+5):\n            ax=fig.add_subplot(1,5,i-n+1,\\\n            xticks=[],yticks=[],title=labels[i].item())\n            ax.imshow((images[i]).reshape(64,64,3))\n        break\ndef show_image(img):\n    npimg=img.numpy()\/2.+.5; tr=(1,2,0)\n    pl.figure(figsize=(10,2))\n    pl.imshow(np.transpose(npimg,tr))\n    pl.xticks([]); pl.show()\ndef show_examples(train_loader,classes,num_examples):\n    dataiter=iter(train_loader)\n    images,labels=dataiter.next()\n    show_image(utils.make_grid(images[0:num_examples]))\n    print('^'.join('%9s'%classes[labels[j]] \n                   for j in range(num_examples)),end='^')","6e81933c":"@register_line_magic\ndef train_run(epochs):\n    epochs=int(epochs)\n    for epoch in range(epochs):\n        model.train()\n        for batch_ids,(features,targets) in enumerate(train_loader):        \n            features=features.to(dev); targets=targets.to(dev)\n            logits,probs=model(features)\n            cost=tnn.functional.cross_entropy(logits,targets)\n            optimizer.zero_grad(); cost.backward()\n            optimizer.step()\n            if not batch_ids%200:\n                print ('Epoch: %03d\/%03d | Batch %03d\/%03d | Cost: %.4f' \n                       %(epoch+1,epochs,batch_ids, \n                         len(train)\/\/batch_size,cost))\n        model.eval()         \n        with torch.set_grad_enabled(False):\n            print('Epoch: %03d\/%03d train acc: %.2f%% valid acc: %.2f%%'%\\\n                  (epoch+1,epochs,\n                   model_acc(model,train_loader),\n                   model_acc(model,valid_loader)))\n@register_line_magic\ndef train_run2(epochs):\n    epochs=int(epochs)\n    for epoch in range(epochs):\n        model.train()\n        for batch_ids,(features,targets) in enumerate(train_loader2):        \n            features=features.to(dev); targets=targets.to(dev)\n            logits,probs=model(features)\n            cost=tnn.functional.cross_entropy(logits,targets.long())\n            optimizer.zero_grad(); cost.backward()\n            optimizer.step()\n            if not batch_ids%50:\n                print ('Epoch: %03d\/%03d | Batch %03d\/%03d | Cost: %.4f' \n                       %(epoch+1,epochs,batch_ids, \n                         len(train2)\/\/batch_size2,cost))\n        model.eval()         \n        with torch.set_grad_enabled(False):\n            print('Epoch: %03d\/%03d train acc: %.2f%% valid acc: %.2f%%'%\\\n                  (epoch+1,epochs,\n                   model_acc(model,train_loader2),\n                   model_acc(model,valid_loader2)))\n@register_line_magic\ndef print_acc(n):\n    if int(n)==1:\n        data_loader=\\\n        [train_loader,valid_loader,test_loader]\n    if int(n)==2:\n        data_loader=\\\n        [train_loader2,valid_loader2,test_loader2]\n    print('Train accuracy: %.4f%%'%\\\n    (model_acc(model,data_loader[0])))\n    print('Valid accuracy: %.4f%%'%\\\n    (model_acc(model,data_loader[1])))\n    print('Test accuracy: %.4f%%'%\\\n    (model_acc(model,data_loader[2])))","17cb4ee8":"random_seed=1; batch_size=128\ntrain_ids=torch.arange(0,44000)\nvalid_ids=torch.arange(44000,50000)\ntr0=(.5,.5,.5)\ntrain_transform=transforms\\\n.Compose([transforms.Resize((70,70)),\n          transforms.RandomCrop((64,64)),\n          transforms.ToTensor(),\n          transforms.Normalize(tr0,tr0)])\ntest_transform=transforms\\\n.Compose([transforms.Resize((70,70)),\n          transforms.CenterCrop((64,64)),\n          transforms.ToTensor(),\n          transforms.Normalize(tr0,tr0)])\ntrain_valid=tcifar10(root='data',train=True,download=True,\n                     transform=train_transform)\ntrain=Subset(train_valid,train_ids)\nvalid=Subset(train_valid,valid_ids)\ntest=tcifar10(root='data',train=False, \n              transform=test_transform)\ntrain_loader=tdl(dataset=train,shuffle=True, \n                 batch_size=batch_size)\nvalid_loader=tdl(dataset=valid,shuffle=True, \n                 batch_size=batch_size)\ntest_loader=tdl(dataset=test,shuffle=False, \n                batch_size=batch_size)","fd3048b8":"classes=('plane','car','bird','cat','deer',\n         'dog','frog','horse','ship','truck')\nshow_examples(valid_loader,classes,7)","f867a108":"fpath='..\/input\/classification-of-handwritten-letters\/'\nf='LetterColorImages_123.h5'\nf=h5py.File(fpath+f,'r')\nkeys=list(f.keys()); print(keys)\nx=np.array(f[keys[1]],dtype='float32')\/255\nx=np.array(timage.resize(x,[64,64]))\\\n.reshape(-1,3,64,64)\ny=np.array(f[keys[2]],dtype='int32')-1\nN=len(y); n=int(.1*N)\nshuffle_ids=np.arange(N)\nnp.random.RandomState(23).shuffle(shuffle_ids)\nx,y=x[shuffle_ids],y[shuffle_ids]\nx_test,x_valid,x_train=x[:n],x[n:2*n],x[2*n:]\ny_test,y_valid,y_train=y[:n],y[n:2*n],y[2*n:]\nx_valid.shape,y_valid.shape","ffbaa0a4":"random_seed=1; batch_size2=128\ntrain2=TData(x_train,y_train)\nvalid2=TData(x_valid,y_valid)\ntest2=TData(x_test,y_test)\ntrain_loader2=tdl(dataset=train2,\n                  batch_size=batch_size2,shuffle=True)\nvalid_loader2=tdl(dataset=valid2,\n                  batch_size=batch_size2,shuffle=True)\ntest_loader2=tdl(dataset=test2,\n                 batch_size=batch_size2,shuffle=False)\ndisplay_examples(valid_loader2)","7f738b06":"torch.manual_seed(random_seed)\nnum_classes=10; learning_rate=.0001\nmodel=AlexNN(num_classes)\nmodel.to(dev)\noptimizer=torch.optim.Adam(model.parameters(),\n                           lr=learning_rate)","a2873162":"%train_run 10","6ffa1aef":"%print_acc 1","1f1d6c2a":"torch.manual_seed(random_seed)\nnum_classes=33; learning_rate=.0001\nmodel=AlexNN(num_classes)\nmodel.to(dev)\noptimizer=torch.optim.Adam(model.parameters(),\n                           lr=learning_rate) ","295cc798":"%train_run2 30","8720ae6c":"%print_acc 2","21d107b7":"## AlexNet Training","a19e8463":"## Data","a389193a":"Reading classics [Deep Learning Models](https:\/\/nbviewer.jupyter.org\/github\/rasbt\/deeplearning-models\/blob\/master\/pytorch_ipynb\/cnn\/cnn-alexnet-cifar10.ipynb)\n\n## Code Modules, Classes & Functions"}}