{"cell_type":{"d405f330":"code","393b7bca":"code","d36780c0":"code","6298c7f5":"code","03d3ea9e":"code","9e186494":"code","598c5662":"code","ceddd894":"code","be8b0dce":"code","014ce471":"code","59fb06c1":"code","a5fa7922":"code","93a9b215":"code","ab2ba714":"code","d93b0aa4":"code","c65a567a":"code","c16987c4":"code","a2ae5061":"code","bc871fa8":"code","1cccb83f":"code","81341f7c":"code","bfeb7ce3":"code","161b8d63":"code","ac0fc6a3":"code","d0bebe8d":"code","5ec918a9":"code","4e54faec":"code","42cc4664":"code","3c6fe0fd":"code","10fc93db":"code","02e78ac0":"code","bed14bf2":"code","501d4d17":"markdown"},"source":{"d405f330":"import pandas as pd\nimport numpy as np\nfrom collections import defaultdict\nimport copy\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nimport json\nimport torch\nfrom sklearn.decomposition import PCA","393b7bca":"train_csv = pd.read_csv('.\/moral_TFT_train.csv')\ntest_csv = pd.read_csv('.\/moral_TFT_test.csv')","d36780c0":"train_csv.head()","6298c7f5":"  train_csv.iloc[:,1:52]","03d3ea9e":"pca_cham = PCA(3)\npca_cham.fit(train_csv.iloc[:,1:52], train_csv.Ranked)","9e186494":"cham = pca_cham.transform(train_csv.iloc[:,1:52])","598c5662":"test_csv.iloc[:,:51]","ceddd894":"test_cham = pca_cham.transform(test_csv.iloc[:,:51])","be8b0dce":"pca_comb = PCA(3)\npca_comb.fit(train_csv.iloc[:,52:], train_csv.Ranked)\ncomb = pca_comb.transform(train_csv.iloc[:,52:])","014ce471":"test_comb= pca_comb.transform(test_csv.iloc[:,51:])","59fb06c1":"train_D = pd.concat([pd.DataFrame(cham),pd.DataFrame(comb)], axis = 1)","a5fa7922":"train_D = pd.concat([train_D, train_csv.drop(columns = 'Ranked', axis = 1)], axis = 1)","93a9b215":"train_L = train_csv.Ranked","ab2ba714":"test_D = pd.concat([pd.DataFrame(test_cham), pd.DataFrame(test_comb)], axis = 1)","d93b0aa4":"test_D = pd.concat([test_D, test_csv], axis= 1)","c65a567a":"# train_D = train_csv.drop('Ranked', axis = 1)\n# test_D = test_csv","c16987c4":"train_D.shape","a2ae5061":"train_D = torch.FloatTensor(np.array(train_D))\ntrain_L = torch.FloatTensor(np.array(train_L))\ntest_D = torch.FloatTensor(np.array(test_D))","bc871fa8":"data_loader = torch.utils.data.DataLoader(dataset=torch.utils.data.TensorDataset(train_D, train_L),\n                                          batch_size=100,\n                                          shuffle=True,\n                                          drop_last=True)","1cccb83f":"linear1= torch.nn.Linear(train_D.shape[1], 512, bias = True)\nlinear2 = torch.nn.Linear(512,512,bias = True)\nlinear3 = torch.nn.Linear(512,512,bias = True)\nlinear4 = torch.nn.Linear(512,512,bias = True)\nlinear5 = torch.nn.Linear(512,1, bias=  True)\nrelu = torch.nn.PReLU()\nsigmoid = torch.nn.Sigmoid()\ndropout = torch.nn.Dropout(p = 0.3)","81341f7c":"torch.nn.init.xavier_uniform_(linear1.weight)\ntorch.nn.init.xavier_uniform_(linear2.weight)\ntorch.nn.init.xavier_uniform_(linear3.weight)\ntorch.nn.init.xavier_uniform_(linear4.weight)\ntorch.nn.init.xavier_uniform_(linear5.weight)","bfeb7ce3":"import random\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","161b8d63":"model = torch.nn.Sequential(linear1, relu, dropout,\n                            linear2, relu, dropout,\n                            linear3, relu, dropout,\n                            linear4, relu, dropout,\n                            linear5,sigmoid).to(device)","ac0fc6a3":"optimizer = torch.optim.Adam(model.parameters(), lr = 0.001)\nloss =torch.nn.BCELoss()#CrossEntropyLoss()","d0bebe8d":"total_batch = len(data_loader)\nmodel.train()\n\n\nfor e in range(20):\n  avg_cost= 0\n  for x, y in data_loader:\n    x = x.to(device)\n    y=  y.to(device)\n    optimizer.zero_grad()\n    h_x = model(x)\n    cost = loss(h_x, y)\n    cost.backward()\n    optimizer.step()\n    avg_cost += cost \/ total_batch\n  print('Epoch {}'.format(e), 'cost {}'.format(avg_cost))","5ec918a9":"with torch.no_grad():\n  model.eval()\n  pred=  model(test_D.to(device))","4e54faec":"pred","42cc4664":"real_pred= []\nfor i in range(3300):\n  real_pred.append(int(torch.round(pred[i]).item()))","3c6fe0fd":"real_pred","10fc93db":"result ={}\nresult['id'] = list(i for i in range(3300))\nresult['result'] = real_pred#torch.argmax(pred,1)","02e78ac0":"pd.DataFrame(result).to_csv('baseline4.csv',index= False)","bed14bf2":"pd.read_csv('baseline4.csv')","501d4d17":"# PCA-> \ub370\uc774\ud130 feature \ucd94\uac00 & Binary Cross Entropy \ub3c4\uc785"}}