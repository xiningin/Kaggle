{"cell_type":{"37bf3f75":"code","cbb2c906":"code","ce83a51e":"code","020bbdb5":"code","6355bdfc":"code","fc08ea9c":"code","09be66ee":"code","62ee0da6":"code","fcc74e32":"code","de402002":"code","50528c70":"code","4963b406":"code","6641634c":"code","04712a48":"code","7556349e":"code","416c948f":"code","9e151773":"code","a1002521":"code","f143db98":"code","7ffa75a1":"code","8399ec9f":"code","c6269598":"code","57b3f957":"code","3e6b2d03":"code","04d0fd04":"code","d282c8b5":"code","f60bd732":"code","3f446f30":"code","3f69f8e4":"code","4d340f26":"code","a1a26e9e":"code","b7bf6fd4":"code","e66cb53c":"code","1d42a214":"code","714926f9":"code","341ea092":"code","f3e00197":"code","ca41a251":"code","cac5de59":"code","90538b83":"code","b109b254":"code","139e9704":"code","e911bd2c":"code","06dae842":"code","e63852af":"code","942654ca":"code","aed7a043":"code","31c1b0aa":"code","fb239ddb":"code","16206488":"code","1b698885":"code","dab9a434":"code","4353ec2f":"code","7a7eeedf":"code","63349ce2":"code","2f6ab666":"code","af5af764":"code","b4121ce7":"code","b8542fb3":"code","369b799f":"code","cd8037b0":"code","596a2061":"code","170d51ac":"code","7bdd402e":"code","3a9f38af":"code","3057378c":"code","d53ae2f9":"code","b58e41bc":"code","faea91fa":"code","832aee91":"code","51f43b47":"code","463a24f0":"code","af538172":"code","e47b3554":"code","18de7cda":"code","bd84c3b6":"code","a5a2283a":"markdown","62286462":"markdown","a7bf6203":"markdown","91603b2c":"markdown","cee50dcc":"markdown","37a236cb":"markdown","e9b4accf":"markdown","69d42afc":"markdown","287fb3a4":"markdown"},"source":{"37bf3f75":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cbb2c906":"insurance= pd.read_csv(\"..\/input\/insurance\/insurance.csv\")\ndf= insurance.copy()\ndf.head(10)","ce83a51e":"df.describe().T","020bbdb5":"df.isnull().values.any()","6355bdfc":"df.info()","fc08ea9c":"dms = pd.get_dummies(df[['sex', 'smoker', 'region']])\ndms.head()","09be66ee":"x= df.drop([\"charges\",'sex', 'smoker', 'region'], axis= 1)","62ee0da6":"from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nfrom sklearn.linear_model import LinearRegression","fcc74e32":"x= pd.concat([x,dms.drop([\"sex_male\",\"smoker_yes\",\"region_southwest\"], axis=1)], axis=1 )\nx.head()","de402002":"y= df[\"charges\"]\ny.head()","50528c70":"df= pd.concat([x,y],axis=1)\ndf.head()","4963b406":"x_tr, x_te, y_tr, y_te= train_test_split(x, y, test_size= .2, random_state= 28)\nprint(\"x_tr: {} \\nx_te: {} \\ny_tr: {} \\ny_te: {}\".format(x_tr.shape, \n                                                         x_te.shape,\n                                                         y_tr.shape,\n                                                         y_te.shape))","6641634c":"linModel= LinearRegression().fit(x_tr, y_tr)","04712a48":"linModel.coef_","7556349e":"linModel.intercept_","416c948f":"from sklearn.metrics import mean_squared_error, r2_score","9e151773":"linModel.score(x_tr, y_tr)","a1002521":"y_pred= linModel.predict(x_te)\ny_pred[0:5]","f143db98":"print(\"Linear Model RMSE: {}\".format( np.sqrt(mean_squared_error(y_te, y_pred)))) ","7ffa75a1":"cv_linModel= -cross_val_score(linModel, \n                             x_tr,\n                             y_tr,\n                             cv= 10,\n                             scoring= \"neg_mean_squared_error\").mean()\n\nprint(\"Tuned Model RMSE: {}\".format(np.sqrt(cv_linModel)))  ","8399ec9f":"y_pred= cross_val_predict(linModel, x_te, y_te, cv=10)","c6269598":"np.sqrt(mean_squared_error(y_te, y_pred))","57b3f957":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale \npca = PCA()","3e6b2d03":"x_tr_reduced= pca.fit_transform(scale(x_tr))","04d0fd04":"np.cumsum(np.round(pca.explained_variance_ratio_, decimals = 4)*100)","d282c8b5":"pcr_model = LinearRegression().fit(x_tr_reduced[:,0:6],y_tr)","f60bd732":"pcr_model.score(x_tr_reduced[:,0:6], y_tr)","3f446f30":"y_pred= pcr_model.predict(x_tr_reduced[:,0:6])","3f69f8e4":"np.sqrt(mean_squared_error(y_tr, y_pred))","4d340f26":"x_te_reduced = PCA().fit_transform(scale(x_te))","a1a26e9e":"y_pred= pcr_model.predict(x_te_reduced[:,0:6])","b7bf6fd4":"np.sqrt(mean_squared_error(y_te, y_pred))","e66cb53c":"from sklearn import model_selection\ncv_10 = model_selection.KFold(n_splits = 10,\n                             shuffle = True,\n                             random_state = 1)","1d42a214":"lm = LinearRegression()\nRMSE = []","714926f9":"for i in np.arange(1, x_tr_reduced.shape[1] + 1):\n    \n    score = np.sqrt(-1*model_selection.cross_val_score(lm, \n                                                       x_tr_reduced[:,:i], \n                                                       y_tr.ravel(), \n                                                       cv=cv_10, \n                                                       scoring='neg_mean_squared_error').mean())\n    RMSE.append(score)\n    \nRMSE","341ea092":"from sklearn.cross_decomposition import PLSRegression, PLSSVD","f3e00197":"x_tr.head()","ca41a251":"y_tr.head()","cac5de59":"pls_model= PLSRegression().fit(x_tr, y_tr)","90538b83":"y_pred= pls_model.predict(x_te)","b109b254":"np.sqrt(mean_squared_error(y_te, y_pred))","139e9704":"r2_score(y_te, y_pred)","e911bd2c":"import matplotlib.pyplot as plt","06dae842":"RMSE = []\n\nfor i in np.arange(1, x_tr.shape[1] + 1):\n    pls = PLSRegression(n_components=i)\n    score = np.sqrt(-1*cross_val_score(pls, x_tr, y_tr, cv=cv_10, scoring='neg_mean_squared_error').mean())\n    RMSE.append(score)\n\n\nplt.plot(np.arange(1, x_tr.shape[1] + 1), np.array(RMSE), '-v', c = \"r\")\nplt.xlabel('Count of Components')\nplt.ylabel('RMSE')\nplt.title('Salary');","e63852af":"pls_model = PLSRegression(n_components = 7).fit(x_tr, y_tr)","942654ca":"y_pred= pls_model.predict(x_te)","aed7a043":"np.sqrt(mean_squared_error(y_te, y_pred))","31c1b0aa":"from sklearn.linear_model import Ridge","fb239ddb":"ridge_model= Ridge().fit(x_tr, y_tr)","16206488":"y_pred= ridge_model.predict(x_te)","1b698885":"np.sqrt(mean_squared_error(y_te, y_pred))","dab9a434":"from sklearn.linear_model import RidgeCV\n\nlambdas= 10**np.linspace(-10,10,500)*0.5\n\nridge_cv = RidgeCV(alphas = lambdas, \n                   scoring = \"neg_mean_squared_error\",\n                   normalize = True)","4353ec2f":"ridge_cv.fit(x_tr, y_tr)","7a7eeedf":"ridge_cv.alpha_","63349ce2":"ridge_tuned = Ridge(alpha = ridge_cv.alpha_, normalize = True).fit(x_tr,y_tr)","2f6ab666":"np.sqrt(mean_squared_error(y_te, ridge_tuned.predict(x_te)))","af5af764":"r2_score(y_te, ridge_tuned.predict(x_te))","b4121ce7":"from sklearn.linear_model import Lasso","b8542fb3":"lasso_model= Lasso().fit(x_tr, y_tr)","369b799f":"np.sqrt(mean_squared_error(y_te, lasso_model.predict(x_te)))","cd8037b0":"from sklearn.linear_model import LassoCV","596a2061":"lasso_cv_model= LassoCV(alphas= None, cv=10, max_iter= 1000, normalize= True).fit(x_tr, y_tr)","170d51ac":"lasso_cv_model.alpha_","7bdd402e":"lasso_tuned= Lasso(alpha= lasso_cv_model.alpha_).fit(x_tr, y_tr)","3a9f38af":"np.sqrt(mean_squared_error(y_te, lasso_tuned.predict(x_te)))","3057378c":"r2_score(y_te, lasso_tuned.predict(x_te))","d53ae2f9":"from sklearn.linear_model import ElasticNet, ElasticNetCV","b58e41bc":"enet_model= ElasticNet().fit(x_tr, y_tr)","faea91fa":"enet_model.get_params()","832aee91":"np.sqrt(mean_squared_error(y_te, enet_model.predict(x_te)))","51f43b47":"r2_score(y_te, enet_model.predict(x_te))","463a24f0":"enet_cv= ElasticNetCV(cv= 10, random_state= 28).fit(x_tr, y_tr)","af538172":"enet_cv.alpha_, enet_cv.l1_ratio","e47b3554":"enet_tuned= ElasticNet(alpha= enet_cv.alpha_, l1_ratio= enet_cv.l1_ratio).fit(x_tr, y_tr)","18de7cda":"np.sqrt(mean_squared_error(y_te, enet_tuned.predict(x_te)))","bd84c3b6":"r2_score(y_te, enet_tuned.predict(x_te))","a5a2283a":"## Model Tuning","62286462":"## Model Tuning","a7bf6203":"# Ridge Regression","91603b2c":"## Model Tuning","cee50dcc":"# PCR Regression","37a236cb":"## PLS Regression","e9b4accf":"# ElasticNet Regression","69d42afc":"## Model Tuning","287fb3a4":"# Lasso Regression"}}