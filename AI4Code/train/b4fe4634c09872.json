{"cell_type":{"28a068ff":"code","41fd627c":"code","5e44bff3":"code","97554537":"code","05289ec4":"code","e3d2a6e3":"code","4e555ccb":"code","73cf9763":"code","89ddf58d":"code","899b4ed5":"code","9c6879bf":"code","6912f4f2":"code","56f05586":"code","d6088e55":"code","058e68be":"code","9322f881":"code","5e0e5a1f":"code","3d5d7998":"code","5e57700b":"code","1ad45d7c":"code","44ad4337":"code","c28f24b8":"code","151cc2f8":"code","dd412dca":"code","b4f921f9":"code","e0295e3d":"code","6b7ef0e9":"code","de21b897":"code","4a853800":"code","08db82be":"code","61e8caa7":"code","9b4d6827":"code","68e49620":"code","39196ad4":"code","e022afad":"code","eacb6e0c":"markdown","484139da":"markdown","eb2e3303":"markdown","222a693f":"markdown","2a0e4f3d":"markdown","d4650700":"markdown","991ca64c":"markdown","4ae5ccb8":"markdown","382907c4":"markdown","b20a6497":"markdown","a1e2f988":"markdown","3fa6a2b3":"markdown","fafe95b2":"markdown","a8553d29":"markdown","642516ed":"markdown","873e8a00":"markdown","7b2919ea":"markdown","4337deec":"markdown","3e1adf1e":"markdown","791f0c67":"markdown","3672e30b":"markdown","2956411b":"markdown","4e3d46be":"markdown","841ed6b2":"markdown","e192551b":"markdown","6f803f88":"markdown","614d5e13":"markdown","a86f1ab8":"markdown","0c8cb835":"markdown","8298c0a4":"markdown","a1de177a":"markdown"},"source":{"28a068ff":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os","41fd627c":"from mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn import metrics","5e44bff3":"train = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ntest = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')","97554537":"X, y = train['text'], train['target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","05289ec4":"vectorizer = TfidfVectorizer(ngram_range=(1,2))\nX_train_vec = vectorizer.fit_transform(X_train).toarray()\nX_test_vec = vectorizer.transform(X_test).toarray()","e3d2a6e3":"len(vectorizer.get_feature_names())","4e555ccb":"def evaluate(y_true, y_predicted):\n    acc = metrics.accuracy_score(y_true, y_pred)\n    precision = metrics.precision_score(y_true, y_pred)\n    recall = metrics.recall_score(y_true, y_pred)\n    f1 = metrics.f1_score(y_true, y_pred)\n    return acc, precision, recall, f1","73cf9763":"from sklearn.linear_model import RidgeClassifier\n\nclf_RC = RidgeClassifier().fit(X_train_vec, y_train)\nprint(clf_RC.score(X_test_vec, y_test))\n\ny_pred = clf_RC.predict(X_test_vec)\ncm = metrics.confusion_matrix(y_test, y_pred)\nfig, ax = plot_confusion_matrix(conf_mat=cm)\nplt.show()\n\nresults_df = pd.DataFrame(data=[[\"Ridge Classifier\", *evaluate(y_test, y_pred)]], \n                          columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])","89ddf58d":"from sklearn.linear_model import LogisticRegression\n\nclf_LR = LogisticRegression().fit(X_train_vec, y_train)\nprint(clf_LR.score(X_test_vec, y_test))\n\ny_pred = clf_LR.predict(X_test_vec)\ncm = metrics.confusion_matrix(y_test, y_pred)\nfig, ax = plot_confusion_matrix(conf_mat=cm)\nplt.show()\n\ndf_LR = pd.DataFrame(data=[[\"Logistic Regressor\", *evaluate(y_test, y_pred)]], \n                          columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\nresults_df = results_df.append(df_LR, ignore_index=True)","899b4ed5":"# from sklearn.linear_model import LogisticRegressionCV\n\n# clf_LRCV = LogisticRegressionCV(cv=5, random_state=0).fit(X_train_vec, y_train)\n# print(clf_LRCV.score(X_test_vec, y_test))\n\n# y_pred = clf_LRCV.predict(X_test_vec)\n# cm = metrics.confusion_matrix(y_test, y_pred)\n# fig, ax = plot_confusion_matrix(conf_mat=cm)\n# plt.show()\n\n# df_LRCV = pd.DataFrame(data=[[\"Logistic Regression Cross-val Estimator\", *evaluate(y_test, y_pred)]],\n#                           columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n# results_df = results_df.append(df_LRCV, ignore_index=True)","9c6879bf":"from sklearn.linear_model import SGDClassifier\n\nclf_SGDC = SGDClassifier().fit(X_train_vec, y_train)\nprint(clf_SGDC.score(X_test_vec, y_test))\n\ny_pred = clf_SGDC.predict(X_test_vec)\ncm = metrics.confusion_matrix(y_test, y_pred)\nfig, ax = plot_confusion_matrix(conf_mat=cm)\nplt.show()\n\ndf_SGDC = pd.DataFrame(data=[[\"Stochastic Gradient Descent Classifier\", *evaluate(y_test, y_pred)]], \n                          columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\nresults_df = results_df.append(df_SGDC, ignore_index=True)","6912f4f2":"# from sklearn.linear_model import PassiveAggressiveClassifier\n\n# clf_PAC = PassiveAggressiveClassifier().fit(X_train_vec, y_train)\n# print(clf_PAC.score(X_test_vec, y_test))\n\n# y_pred = clf_PAC.predict(X_test_vec)\n# cm = metrics.confusion_matrix(y_test, y_pred)\n# fig, ax = plot_confusion_matrix(conf_mat=cm)\n# plt.show()\n\n# df_PAC = pd.DataFrame(data=[[\"Passive Aggressive Classifier\", *evaluate(y_test, y_pred)]], \n#                           columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n# results_df = results_df.append(df_PAC, ignore_index=True)","56f05586":"# from sklearn.linear_model import Perceptron\n\n# clf_Per = Perceptron().fit(X_train_vec, y_train)\n# print(clf_Per.score(X_test_vec, y_test))\n\n# y_pred = clf_Per.predict(X_test_vec)\n# cm = metrics.confusion_matrix(y_test, y_pred)\n# fig, ax = plot_confusion_matrix(conf_mat=cm)\n# plt.show()\n\n# df_Per = pd.DataFrame(data=[[\"Perceptron\", *evaluate(y_test, y_pred)]], \n#                           columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n# results_df = results_df.append(df_Per, ignore_index=True)","d6088e55":"# from sklearn.svm import SVC\n\n# clf_SVC = SVC().fit(X_train_vec, y_train)\n# print(clf_SVC.score(X_test_vec, y_test))\n\n# y_pred = clf_SVC.predict(X_test_vec)\n# cm = metrics.confusion_matrix(y_test, y_pred)\n# fig, ax = plot_confusion_matrix(conf_mat=cm)\n# plt.show()\n\n# df_SVC = pd.DataFrame(data=[[\"Support Vector Classifier\", *evaluate(y_test, y_pred)]], \n#                           columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n# results_df = results_df.append(df_SVC, ignore_index=True)","058e68be":"from sklearn.svm import LinearSVC\n\nclf_LSVC = LinearSVC().fit(X_train_vec, y_train)\nprint(clf_LSVC.score(X_test_vec, y_test))\n\ny_pred = clf_LSVC.predict(X_test_vec)\ncm = metrics.confusion_matrix(y_test, y_pred)\nfig, ax = plot_confusion_matrix(conf_mat=cm)\nplt.show()\n\ndf_LSVC = pd.DataFrame(data=[[\"Linear Support Vector Classifier\", *evaluate(y_test, y_pred)]], \n                          columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\nresults_df = results_df.append(df_LSVC, ignore_index=True)","9322f881":"# from sklearn.naive_bayes import GaussianNB\n\n# clf_GNB = GaussianNB().fit(X_train_vec, y_train)\n# print(clf_GNB.score(X_test_vec, y_test))\n\n# y_pred = clf_GNB.predict(X_test_vec)\n# cm = metrics.confusion_matrix(y_test, y_pred)\n# fig, ax = plot_confusion_matrix(conf_mat=cm)\n# plt.show()\n\n# df_GNB = pd.DataFrame(data=[[\"Gaussian Naive Bayes Classifier\", *evaluate(y_test, y_pred)]], \n#                           columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n# results_df = results_df.append(df_GNB, ignore_index=True)","5e0e5a1f":"from sklearn.naive_bayes import MultinomialNB\n\nclf_MNB = MultinomialNB().fit(X_train_vec, y_train)\nprint(clf_MNB.score(X_test_vec, y_test))\n\ny_pred = clf_MNB.predict(X_test_vec)\ncm = metrics.confusion_matrix(y_test, y_pred)\nfig, ax = plot_confusion_matrix(conf_mat=cm)\nplt.show()\n\ndf_MNB = pd.DataFrame(data=[[\"Multinomial Naive Bayes Classifier\", *evaluate(y_test, y_pred)]], \n                          columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\nresults_df = results_df.append(df_MNB, ignore_index=True)","3d5d7998":"from sklearn.naive_bayes import ComplementNB\n\nclf_CNB = ComplementNB().fit(X_train_vec, y_train)\nprint(clf_CNB.score(X_test_vec, y_test))\n\ny_pred = clf_CNB.predict(X_test_vec)\ncm = metrics.confusion_matrix(y_test, y_pred)\nfig, ax = plot_confusion_matrix(conf_mat=cm)\nplt.show()\n\ndf_CNB = pd.DataFrame(data=[[\"Complement Naive Bayes Classifier\", *evaluate(y_test, y_pred)]], \n                          columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\nresults_df = results_df.append(df_CNB, ignore_index=True)","5e57700b":"# from sklearn.naive_bayes import BernoulliNB\n\n# clf_BNB = BernoulliNB().fit(X_train_vec, y_train)\n# print(clf_BNB.score(X_test_vec, y_test))\n\n# y_pred = clf_BNB.predict(X_test_vec)\n# cm = metrics.confusion_matrix(y_test, y_pred)\n# fig, ax = plot_confusion_matrix(conf_mat=cm)\n# plt.show()\n\n# df_BNB = pd.DataFrame(data=[[\"Bernoulli Naive Bayes Classifier\", *evaluate(y_test, y_pred)]], \n#                           columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n# results_df = results_df.append(df_BNB, ignore_index=True)","1ad45d7c":"# from sklearn.tree import DecisionTreeClassifier\n\n# clf_DTC = DecisionTreeClassifier().fit(X_train_vec, y_train)\n# print(clf_DTC.score(X_test_vec, y_test))\n\n# y_pred = clf_DTC.predict(X_test_vec)\n# cm = metrics.confusion_matrix(y_test, y_pred)\n# fig, ax = plot_confusion_matrix(conf_mat=cm)\n# plt.show()\n\n# df_DTC = pd.DataFrame(data=[[\"Decision Tree Classifier\", *evaluate(y_test, y_pred)]], \n#                           columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n# results_df = results_df.append(df_DTC, ignore_index=True)","44ad4337":"# from sklearn.ensemble import RandomForestClassifier\n\n# clf_RFC = RandomForestClassifier(max_depth=2, random_state=0).fit(X_train_vec, y_train)\n# print(clf_RFC.score(X_test_vec, y_test))\n\n# y_pred = clf_RFC.predict(X_test_vec)\n# cm = metrics.confusion_matrix(y_test, y_pred)\n# fig, ax = plot_confusion_matrix(conf_mat=cm)\n# plt.show()\n\n# df_RFC = pd.DataFrame(data=[[\"Random Forest Classifier\", *evaluate(y_test, y_pred)]], \n#                           columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n# results_df = results_df.append(df_RFC, ignore_index=True)","c28f24b8":"# from sklearn.ensemble import ExtraTreesClassifier\n\n# clf_ETC = ExtraTreesClassifier(n_estimators=100, random_state=0).fit(X_train_vec, y_train)\n# print(clf_ETC.score(X_test_vec, y_test))\n\n# y_pred = clf_ETC.predict(X_test_vec)\n# cm = metrics.confusion_matrix(y_test, y_pred)\n# fig, ax = plot_confusion_matrix(conf_mat=cm)\n# plt.show()\n\n# df_ETC = pd.DataFrame(data=[[\"Extra Trees Classifier\", *evaluate(y_test, y_pred)]], \n#                           columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n# results_df = results_df.append(df_ETC, ignore_index=True)","151cc2f8":"# from sklearn.ensemble import AdaBoostClassifier\n\n# clf_ABC = AdaBoostClassifier(n_estimators=100, random_state=0).fit(X_train_vec, y_train)\n# print(clf_ABC.score(X_test_vec, y_test))\n\n# y_pred = clf_ABC.predict(X_test_vec)\n# cm = metrics.confusion_matrix(y_test, y_pred)\n# fig, ax = plot_confusion_matrix(conf_mat=cm)\n# plt.show()\n\n# df_ABC = pd.DataFrame(data=[[\"Ada Boost Classifier\", *evaluate(y_test, y_pred)]], \n#                           columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n# results_df = results_df.append(df_ABC, ignore_index=True)","dd412dca":"# from sklearn.ensemble import GradientBoostingClassifier\n\n# clf_GBC = GradientBoostingClassifier(n_estimators=100).fit(X_train_vec, y_train)\n# print(clf_GBC.score(X_test_vec, y_test))\n\n# y_pred = clf_GBC.predict(X_test_vec)\n# cm = metrics.confusion_matrix(y_test, y_pred)\n# fig, ax = plot_confusion_matrix(conf_mat=cm)\n# plt.show()\n\n# df_GBC = pd.DataFrame(data=[[\"Gradient Boosting Classifier\", *evaluate(y_test, y_pred)]], \n#                           columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n# results_df = results_df.append(df_GBC, ignore_index=True)","b4f921f9":"# from sklearn.experimental import enable_hist_gradient_boosting\n# from sklearn.ensemble import HistGradientBoostingClassifier\n\n# clf_HGBC = HistGradientBoostingClassifier().fit(X_train_vec, y_train)\n# print(clf_HGBC.score(X_test_vec, y_test))\n\n# y_pred = clf_HGBC.predict(X_test_vec)\n# cm = metrics.confusion_matrix(y_test, y_pred)\n# fig, ax = plot_confusion_matrix(conf_mat=cm)\n# plt.show()\n\n# df_HGBC = pd.DataFrame(data=[[\"Hist Gradient Boosting Classifier\", *evaluate(y_test, y_pred)]], \n#                           columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n# results_df = results_df.append(df_HGBC, ignore_index=True)","e0295e3d":"results_df # to select the best classifier so far to use as base estimator for this classifier","6b7ef0e9":"from sklearn.ensemble import BaggingClassifier\n\nclf_BC = BaggingClassifier(base_estimator=ComplementNB(),\n                           n_estimators=10, random_state=0).fit(X_train_vec, y_train)\nprint(clf_BC.score(X_test_vec, y_test))\n\ny_pred = clf_BC.predict(X_test_vec)\ncm = metrics.confusion_matrix(y_test, y_pred)\nfig, ax = plot_confusion_matrix(conf_mat=cm)\nplt.show()\n\ndf_BC = pd.DataFrame(data=[[\"Bagging Classifier\", *evaluate(y_test, y_pred)]], \n                          columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\nresults_df = results_df.append(df_BC, ignore_index=True)","de21b897":"# from sklearn.neural_network import MLPClassifier\n\n# clf_MLPC = MLPClassifier(learning_rate='adaptive', random_state=1, max_iter=300).fit(X_train_vec, y_train)\n# print(clf_MLPC.score(X_test_vec, y_test))\n\n# y_pred = clf_MLPC.predict(X_test_vec)\n# cm = metrics.confusion_matrix(y_test, y_pred)\n# fig, ax = plot_confusion_matrix(conf_mat=cm)\n# plt.show()\n\n# df_MLPC = pd.DataFrame(data=[[\"Multi-Layer Perceptron\", *evaluate(y_test, y_pred)]], \n#                           columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n# results_df = results_df.append(df_MLPC, ignore_index=True)","4a853800":"results_df.set_index('Model', inplace=True)\nresults_df['Accuracy'].plot(kind='barh', figsize=(12, 8))","08db82be":"results_df['F1 Score'].plot(kind='barh', figsize=(12, 8))","61e8caa7":"results_df","9b4d6827":"test_vec = vectorizer.transform(test['text']).toarray()\npredictions = clf_CNB.predict(test_vec)","68e49620":"submission = pd.DataFrame(predictions, columns=['target'])\nsubmission['id'] = test['id']\nsubmission.set_index('id', inplace=True)\n\nsubmission.to_csv('submission.csv')","39196ad4":"len(predictions)","e022afad":"submission.head()","eacb6e0c":"### [Ridge Classifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.RidgeClassifier.html#sklearn.linear_model.RidgeClassifier)","484139da":"# Models","eb2e3303":"Complement Naive Bayes Classifier has the best performance so far.","222a693f":"### [Logistic Regression](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LogisticRegression.html#sklearn.linear_model.LogisticRegression)","2a0e4f3d":"# Data","d4650700":"### [Gradient Boosting Classifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.GradientBoostingClassifier.html#sklearn.ensemble.GradientBoostingClassifier)","991ca64c":"### [Bagging Classifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.BaggingClassifier.html#sklearn.ensemble.BaggingClassifier)","4ae5ccb8":"## Naive Bayes Classifiers","382907c4":"### [Hist Gradient Boosting Classifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.HistGradientBoostingClassifier.html#sklearn.ensemble.HistGradientBoostingClassifier)","b20a6497":"### [Ada Boost Classifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.AdaBoostClassifier.html#sklearn.ensemble.AdaBoostClassifier)","a1e2f988":"## Splitting the data","3fa6a2b3":"### [C-Support Vector Classifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.svm.SVC.html#sklearn.svm.SVC)","fafe95b2":"## [Multilayer Perceptron](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neural_network.MLPClassifier.html#sklearn.neural_network.MLPClassifier)","a8553d29":"## Support Vector Machines","642516ed":"### [Extra Trees Classifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.ExtraTreesClassifier.html#sklearn.ensemble.ExtraTreesClassifier)","873e8a00":"# Creating Submission File","7b2919ea":"### [Bernoulli Naive Bayes Classifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.naive_bayes.BernoulliNB.html#sklearn.naive_bayes.BernoulliNB)","4337deec":"## Linear Models","3e1adf1e":"### [Complement Naive Bayes Classifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.naive_bayes.ComplementNB.html#sklearn.naive_bayes.ComplementNB)","791f0c67":"### [Multinomial Naive Bayes](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.naive_bayes.MultinomialNB.html#sklearn.naive_bayes.MultinomialNB)","3672e30b":"### [Logistic Regression Cross-validation Estimator](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LogisticRegressionCV.html#sklearn.linear_model.LogisticRegressionCV)","2956411b":"### [Linear Support Vector Classifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.svm.LinearSVC.html#sklearn.svm.LinearSVC)","4e3d46be":"### [Perceptron](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.Perceptron.html#sklearn.linear_model.Perceptron)","841ed6b2":"## Ensemble Methods","e192551b":"# Imports","6f803f88":"### [Random Forest Classifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestClassifier.html#sklearn.ensemble.RandomForestClassifier)","614d5e13":"### [Gaussian Naive Bayes](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.naive_bayes.GaussianNB.html#sklearn.naive_bayes.GaussianNB)","a86f1ab8":"## Model Comparison","0c8cb835":"### [Passive Aggressive Classifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.PassiveAggressiveClassifier.html#sklearn.linear_model.PassiveAggressiveClassifier)","8298c0a4":"## [Decision Tree Classifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier)","a1de177a":"### [Stochastic Gradient Descent Classifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.SGDClassifier.html#sklearn.linear_model.SGDClassifier)"}}