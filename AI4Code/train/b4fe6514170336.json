{"cell_type":{"5c9da2c0":"code","50a067ba":"code","bb6076be":"code","38de6d2a":"code","388eb858":"code","b98be73c":"code","42fa926c":"code","9a209cab":"code","5bbcc8f9":"code","96c60853":"code","bc59af0f":"code","60a35d69":"code","7c4356c4":"code","57b9e8cb":"code","0f902442":"code","eed892c8":"code","63632081":"code","bf4a3c1f":"code","62e28b11":"code","ec097015":"code","19f6d57b":"code","9fd7a4c0":"code","5f9e0530":"code","fc6d10eb":"code","f3d35ed4":"markdown","3ecfa0ba":"markdown","2821f4e3":"markdown","8fc506a0":"markdown"},"source":{"5c9da2c0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\n%matplotlib inline\n\nfrom sklearn.preprocessing import StandardScaler # for data scaling\nfrom sklearn.model_selection import GridSearchCV # hyperparameter optimization\nfrom catboost import CatBoostRegressor, Pool #catagorical gradient boosting\nfrom sklearn.svm import NuSVR, SVR\n\nimport os\nIS_LOCAL = False\nif(IS_LOCAL):\n    PATH=\"..\/input\/LANL\/\"\nelse:\n    PATH=\"..\/input\/\"\nos.listdir(PATH)\n# Any results you write to the current directory are saved as output.","50a067ba":"train = pd.read_csv(PATH+'train.csv', nrows = 6000000, dtype={'acoustic_data': np.int16, 'time_to_failure': np.float32})","bb6076be":"train.head(10)","38de6d2a":"#visualize the dataset\ntrain_ad_sample_df = train['acoustic_data'].values[::100]\ntrain_ttf_sample_df = train['time_to_failure'].values[::100]\n\ndef plot_acc_ttf_data(train_ad_sample_df, train_ttf_sample_df, title = \"acoustic data + ttf\"):\n    fig, ax1 = plt.subplots(figsize = (12, 8))\n    plt.title(title)\n    plt.plot(train_ad_sample_df, color = 'r')\n    ax1.set_ylabel('acoustic data', color='r')\n    plt.legend(['acoustic data'], loc=(0.01, 0.95))\n    ax2 = ax1.twinx()\n    plt.plot(train_ttf_sample_df, color ='b')\n    ax2.set_ylabel('time to failure', color = 'b')\n    plt.legend(['time to faliure'], loc = (0.01, 0.9))\n    plt.grid(True)\n    \nplot_acc_ttf_data(train_ad_sample_df, train_ttf_sample_df)\ndel train_ad_sample_df\ndel train_ttf_sample_df","388eb858":"train = pd.read_csv(PATH+'train.csv', dtype={'acoustic_data': np.int16, 'time_to_failure': np.float32})\nrows = 150000\nsegments = int(np.floor(train.shape[0] \/ rows))\nprint(\"Number of segments: \", segments)","b98be73c":"features = ['mean','max','variance','min', 'stdev', 'quantile(0.01)', 'quantile(0.05)', 'quantile(0.95)', 'quantile(0.99)']\n\nX = pd.DataFrame(index=range(segments), dtype=np.float64, columns=features)\nY = pd.DataFrame(index=range(segments), dtype=np.float64, columns=['time_to_failure'])\n\nfor segment in tqdm(range(segments)):\n    seg = train.iloc[segment*rows:segment*rows+rows]\n    \n    x = seg['acoustic_data'].values\n    y = seg['time_to_failure'].values[-1]\n    \n    Y.loc[segment, 'time_to_failure'] = y\n    X.loc[segment, 'mean'] = x.mean()\n    X.loc[segment, 'stdev'] = x.std()\n    X.loc[segment, 'variance'] = np.var(x)\n    X.loc[segment, 'max'] = x.max()\n    X.loc[segment, 'min'] = x.min()\n#     X.loc[segment, 'kur'] = x.kurtosis()\n#     X.loc[segment, 'skew'] = x.skew()\n    X.loc[segment, 'quantile(0.01)'] = np.quantile(x, 0.01)\n    X.loc[segment, 'quantile(0.05)'] = np.quantile(x, 0.05)\n    X.loc[segment, 'quantile(0.95)'] = np.quantile(x, 0.95)\n    X.loc[segment, 'quantile(0.99)'] = np.quantile(x, 0.99)\n    \n    #FFT transform values -\n    \"\"\"\n    from: 'https:\/\/www.kaggle.com\/gpreda\/lanl-earthquake-eda-and-prediction' kernel\n     FFT is useful for sequence data feature extraction\n     other than FFT there is Wavelet transform, which can be used to extract low level features, \n     Wavelet transform is though a lil bit complex in terms of computation\n    \"\"\"\n    \n    z = np.fft.fft(x)\n    realFFT = np.real(z)\n    imagFFT = np.imag(z)\n    X.loc[segment, 'A0'] = abs(z[0])\n    X.loc[segment, 'Rmean'] = realFFT.mean()\n    X.loc[segment, 'Rstd'] = realFFT.std()\n    X.loc[segment, 'Rmax'] = realFFT.max()\n    X.loc[segment, 'Rmin'] = realFFT.min()\n    X.loc[segment, 'Imean'] = imagFFT.mean()\n    X.loc[segment, 'Istd'] = imagFFT.std()\n    X.loc[segment, 'Imax'] = imagFFT.max()\n    X.loc[segment, 'Imin'] = imagFFT.min()\n    \nX.describe().T","42fa926c":"X.head()","9a209cab":"# Scaling the data\nscaler = StandardScaler()\nscaler.fit(X)\nscaled_X = pd.DataFrame(scaler.transform(X), columns = X.columns)","5bbcc8f9":"scaled_X.head(5)","96c60853":"# process the test data\nsubmission = pd.read_csv('..\/input\/sample_submission.csv', index_col='seg_id')\nX_test = pd.DataFrame(columns = X.columns, dtype = np.float64, index = submission.index)\nX_test.describe()","bc59af0f":"submission.shape, X_test.index.shape","60a35d69":"# process the test data\nfor i, seg_id in enumerate(tqdm(X_test.index)):\n    seg = pd.read_csv('..\/input\/test\/' + seg_id + '.csv')\n    \n    x = pd.Series(seg['acoustic_data'].values)\n    z = np.fft.fft(x)\n    realFFT = np.real(z)\n    imagFFT = np.imag(z)\n    \n    X_test.loc[seg_id, 'mean'] = x.mean()\n    X_test.loc[seg_id, 'stdev'] = x.std()\n    X_test.loc[seg_id, 'variance'] = np.var(x)\n    X_test.loc[seg_id, 'max'] = x.max()\n    X_test.loc[seg_id, 'min'] = x.min()\n    X_test.loc[seg_id, 'quantile(0.01)'] = np.quantile(x, 0.01)\n    X_test.loc[seg_id, 'quantile(0.05)'] = np.quantile(x, 0.05)\n    X_test.loc[seg_id, 'quantile(0.95)'] = np.quantile(x, 0.95)\n    X_test.loc[seg_id, 'quantile(0.99)'] = np.quantile(x, 0.99)\n    X_test.loc[seg_id, 'A0'] = abs(z[0])\n    X_test.loc[seg_id, 'Rmean'] = realFFT.mean()\n    X_test.loc[seg_id, 'Rstd'] = realFFT.std()\n    X_test.loc[seg_id, 'Rmax'] = realFFT.max()\n    X_test.loc[seg_id, 'Rmin'] = realFFT.min()\n    X_test.loc[seg_id, 'Imean'] = imagFFT.mean()\n    X_test.loc[seg_id, 'Istd'] = imagFFT.std()\n    X_test.loc[seg_id, 'Imax'] = imagFFT.max()\n    X_test.loc[seg_id, 'Imin'] = imagFFT.min()","7c4356c4":"# build a model\nX_test.shape","57b9e8cb":"# Scaling the test data\nscaled_test_x = pd.DataFrame(scaler.transform(X_test), columns = X_test.columns)\nscaled_test_x.shape","0f902442":"scaled_test_x.tail()","eed892c8":"train_pool = Pool(X, Y)\nm = CatBoostRegressor(iterations = 10000, loss_function = 'MAE', boosting_type = 'Ordered')\nm.fit(X, Y, silent = True)\nm.best_score_","63632081":"#predictions\npredictions = np.zeros(len(scaled_test_x))\npredictions += m.predict(scaled_test_x)","bf4a3c1f":"submission['time_to_failure'] = predictions","62e28b11":"submission.head()","ec097015":"submission.to_csv('submission.csv')","19f6d57b":"parameters = [{'gamma': [0.001, 0.005, 0.01, 0.02, 0.05, 0.1],\n               'C': [0.1, 0.2, 0.5, 1, 1.5, 2]}]\nreg1 = GridSearchCV(SVR(kernel='rbf', tol=0.01), parameters, cv=5, scoring='neg_mean_absolute_error')\nreg1.fit(scaled_X, Y.values.flatten())","9fd7a4c0":"predictions = reg1.predict(scaled_test_x)\nprint(predictions.shape)","5f9e0530":"submission['time_to_failure'] = predictions\nsubmission.head()","fc6d10eb":"submission.to_csv('submissionSVM.csv')","f3d35ed4":"## MODEL 2 - SVM","3ecfa0ba":"We'll used index of submission file to get the segment id and do all the operations.","2821f4e3":"    this is a supervised learning problem but we need more features\n    feature engineeering\n    we'll use statistical feature learning here in which statistical features such as:\n    mean, variance, standard daviation are used to build new features\n        def gen_features(X):\n            strain = []\n            strain.append(X.mean())\n            strain.append(X.std())\n            strain.append(X.min())\n            strain.append(X.max())\n            strain.append(X.kurtosis()) #tailed data feature\n            strain.append(X.skew()) #skewness\n            strain.append(np.quantile(X,0.01))\n            strain.append(np.quantile(X,0.05))\n            strain.append(np.quantile(X,0.95))\n            strain.append(np.quantile(X,0.99)) #sample distributions of same probabilities\n            return pd.Series(strain)\n            \n    train = pd.read_csv(PATH+'train.csv', iterator=True, chunksize=150_000, dtype={'acoustic_data': np.int16, 'time_to_failure': np.float64})\n    X_train = pd.DataFrame()\n    y_train = pd.Series()\n    for df in train:\n        ch = gen_features(df['acoustic_data'])\n        X_train = X_train.append(ch, ignore_index=True)\n        y_train = y_train.append(pd.Series(df['time_to_failure'].values[-1]))","8fc506a0":"### implement CatBoost Model\n    using gradient boosting based on catagorical features\n    catagorical features can't be related to each other, essentially\n    there are other boosting models available such as XGboost\n    \"\"\"\n    gradient Boosting:\n    Step - 1 - computing gradient of loss fucntion we want to optimize for each input object\n    step - 2 - learning the decision tree which predicts gradients of the loss function\n\n    ELI5 Time\n    step - 1 - first model data with simple models and analyze data for errors\n    step - 2 - errors signify data points that are difficult to fit by a simple model\n    step - 3 - in later models, we particularly focus on those hard to fit data to get them right\n    step - 4 - lastly, we combine all the predictors by giving some weighs to each predictor.\n    \"\"\"\n\n# MODEL - 1 CatBoost"}}