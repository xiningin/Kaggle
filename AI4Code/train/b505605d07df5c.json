{"cell_type":{"d1de4a67":"code","a4001b4f":"code","983017eb":"code","1fa8b8e9":"code","fdd100c8":"code","7738033b":"code","16af2b07":"code","e264ed70":"code","9ab657d6":"code","ba4d57f5":"code","183b6840":"code","a1bd74f2":"code","91e8e054":"code","b2711af9":"code","c23b5acd":"code","509b6f72":"code","1b438693":"code","6ce66549":"code","ca228482":"code","ef99abd8":"markdown"},"source":{"d1de4a67":"import lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error","a4001b4f":"train = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/train.csv\")\ntrain","983017eb":"test = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/test.csv\")\ntest","1fa8b8e9":"sample = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/sample_submission.csv\")\nsample","fdd100c8":"target = train['Pawpularity']\ntrain = train.drop(['Pawpularity','Id'],axis=1)\ntest = test.drop('Id',axis=1)","7738033b":"columns=train.columns.to_list()\nprint(columns)","16af2b07":"def objective(trial,data=train,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param =   {\n        'num_leaves': trial.suggest_int('num_leaves', 20, 200),\n        'objective': trial.suggest_categorical('objective',['regression','rmse']),  \n        'max_depth': trial.suggest_int('max_depth', 5, 20),\n        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-1, 1.0),\n        \"boosting\": \"gbdt\",\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 1e-3),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-3, 1.0),\n        \"bagging_freq\": trial.suggest_int('bagging_freq', 2, 10),\n        \"bagging_fraction\": trial.suggest_uniform('bagging_fraction', 0.1, 1.0),\n        \"feature_fraction\": trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        \"verbosity\": -1,\n    }\n    model = lgb.LGBMRegressor(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","e264ed70":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=100)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","9ab657d6":"study.trials_dataframe()","ba4d57f5":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","183b6840":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","a1bd74f2":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","91e8e054":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['num_leaves','objective','max_depth','learning_rate'])","b2711af9":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","c23b5acd":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","509b6f72":"Best_trial=study.best_trial.params\nprint(Best_trial)","1b438693":"preds = np.zeros((sample.shape[0]))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(train[columns],target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target.iloc[trn_idx],target.iloc[test_idx]\n    model = lgb.LGBMRegressor(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict(test[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","6ce66549":"print(preds.shape)\nprint(preds[0])","ca228482":"subm = sample\nsubm['Pawpularity'] = preds\nsubm.to_csv('submission.csv',index=False)\nsubm","ef99abd8":"{'num_leaves': 36, 'objective': 'rmse', 'max_depth': 9, 'learning_rate': 0.1301326644559257, 'lambda_l1': 0.00024157251504487614, 'lambda_l2': 0.007801083048551378, 'bagging_freq': 6, 'bagging_fraction': 0.14448676238989905, 'feature_fraction': 0.5991867242317428}\n"}}