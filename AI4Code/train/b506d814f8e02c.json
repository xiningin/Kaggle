{"cell_type":{"a07aa6da":"code","c3a5cd48":"code","a2d86407":"code","0220e6ec":"code","ed8f8f53":"code","d7ea18c2":"code","ea22b029":"code","75bd18b5":"code","b9d09339":"code","d06a58b6":"code","7cc0d493":"code","071e4103":"code","3d97d21e":"code","af626e07":"code","179e02c5":"code","a88790b5":"code","d092681b":"code","2f8fd8f1":"code","28ca215a":"markdown","3548701c":"markdown","23777875":"markdown","e2bceaee":"markdown"},"source":{"a07aa6da":"import pandas as pd\nimport numpy as numpy\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c3a5cd48":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ndf = pd.read_csv(\"..\/input\/data-analyst-jobs\/DataAnalyst.csv\")","a2d86407":"df.head(3)","0220e6ec":"#df[\"Size\"].unique()                                # 9 sizes with Unknow and -1.\n#len(df[\"Type of ownership\"].unique())              # 16 categories\n#len(df[\"Industry\"].unique())                       # 89 industry categories\n#len(df[\"Sector\"].unique())                         # 25 sectors\n#len(df[\"Location\"].unique())                       # 253 locations\n#df.shape[0]                                        # 2253 jobs\n#len(df[\"Salary Estimate\"].unique())                # 90 unique values for salary estimate","ed8f8f53":"df.drop(df[df[\"Salary Estimate\"]=='-1'].index, axis=0, inplace=True)\nlen(df[\"Salary Estimate\"].unique())","d7ea18c2":"# Since all the salary data are estimated by glass doors and they are all in the same range\n# We can use average salary as indicator.\n# We have to use regular expression here:\nimport re\ndef get_avg_salary(salary):\n    salary_list = re.findall(r\"\\$(.+?)K\",salary)\n    salary_list = [int(i) for i in salary_list]\n    return sum(salary_list)\/2","ea22b029":"df[\"Avg Salary\"] = df[\"Salary Estimate\"].apply(lambda x : get_avg_salary(x))","75bd18b5":"df[\"Avg Salary\"].median() # 69. Pretty close to what I researched online.\ndf[\"Avg Salary\"].mean() # 72. A bit high according to indeed and monster","b9d09339":"# Good Job Indicator = Salary * 0.8 + Rating * 0.2\ndrop_cols = [\"Unnamed: 0\",\"Salary Estimate\", \"Headquarters\", \"Size\",\"Founded\",\"Revenue\",\"Competitors\", \"Easy Apply\"]\ndf.drop(drop_cols, axis=1, inplace=True)","d06a58b6":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ndf[[\"Rating Scaled\",\"Avg Salary Scaled\"]] = pd.DataFrame(scaler.fit_transform(df[[\"Rating\",\"Avg Salary\"]]))","7cc0d493":"df[\"Good Job Indicator\"] = df[\"Rating Scaled\"]*20 + df[\"Avg Salary Scaled\"]*80\ndf.sort_values(by=\"Good Job Indicator\", ascending=False, inplace=True)\ndf.head() # Best 5 jobs. This result make sense to me.\n# For jobs with lowest salary section, their indicator is 0, which does not make sense.","071e4103":"df.drop(df[df[\"Good Job Indicator\"].isnull()].index, axis=0, inplace=True)\nimport plotly.graph_objects as go\nfig = go.Figure(data=[go.Histogram(x=df[\"Good Job Indicator\"])])\nfig.show()\n# Lets define jobs scoring more than 60 as great jobs and check their company names, location, job description and industry.","3d97d21e":"good_job_df = df[df[\"Good Job Indicator\"]>=60]\ngood_job_df.shape #284 out of 2253 jobs.\ncity_rank = good_job_df.groupby(by=\"Location\").count().reset_index().sort_values(\"Job Title\", ascending=False)[0:20][[\"Location\", \"Job Title\"]]\ncity_rank.rename(columns={\"Job Title\":\"Num of Jobs\"},inplace=True)","af626e07":"import plotly.express as px\nfig = px.bar(city_rank, x='Location', y='Num of Jobs')\nfig.show()","179e02c5":"industry_rank = good_job_df.groupby(by=\"Industry\").count().reset_index().sort_values(\"Job Title\", ascending=False)[0:20][[\"Industry\", \"Job Title\"]]\nindustry_rank.rename(columns={\"Job Title\":\"Num of Jobs\"},inplace=True)\n# fig = px.bar(industry_rank, x='Industry', y='Num of Jobs',width=1000, height=500)\n# fig.show()\nfig = px.pie(industry_rank, values='Num of Jobs', names='Industry', title='Good Jobs Industry Distribution',width=1200, height=600)\nfig.show()","a88790b5":"from wordcloud import WordCloud\nimport nltk\nfrom nltk.corpus import stopwords\njob_description_all = \" \".join(str(x) for x in df[\"Job Description\"]).lower()\njob_description_good = \" \".join(str(x) for x in good_job_df[\"Job Description\"]).lower()\n#Getting rid of stopwords\nSTOPWORDS = stopwords.words('english')\nnew_stopwords = [\"data\",\"analysis\",\"analytics\",\"analyst\",\"ability\",\"work\",\"opportunity\",\"knowledge\",\"experience\",\\\n    \"customer\", \"team\",\"develop\",\"provide\",\"report\",\"system\",\"including\",\"support\",\"use\",\"service\",\"company\",\"reporting\",\"understand\",\"requirement\"]\nSTOPWORDS.extend(new_stopwords)\nSTOPWORDS = set(STOPWORDS)\n\njob_description_all = [word for word in job_description_all.split() if word not in STOPWORDS]\njob_description_good = [word for word in job_description_good.split() if word not in STOPWORDS]\njob_description_all = \" \".join(word for word in job_description_all)\njob_description_good = \" \".join(word for word in job_description_good)\n\n\nwordcloud1 = WordCloud(stopwords=STOPWORDS, background_color=\"white\",width=2000, height=800,max_font_size=100).generate(job_description_all)\nwordcloud2 = WordCloud(stopwords=STOPWORDS, background_color=\"white\",width=2000, height=800,max_font_size=100).generate(job_description_good)","d092681b":"plt.figure(figsize=(20,15), facecolor='k')\nplt.imshow(wordcloud1)\nplt.axis(\"off\")\nplt.tight_layout(pad=0)\nplt.show()","2f8fd8f1":"plt.figure(figsize=(20,15), facecolor='k')\nplt.imshow(wordcloud2)\nplt.axis(\"off\")\nplt.tight_layout(pad=0)\nplt.show()","28ca215a":"## Define a Good Job","3548701c":"## Plotly Data Visualization**","23777875":"## Data Cleaning","e2bceaee":"## Word Clould Comparison"}}