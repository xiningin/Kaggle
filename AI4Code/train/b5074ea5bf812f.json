{"cell_type":{"f891a16c":"code","49a1bdd5":"code","0474fc3a":"code","0fea1be1":"code","f01b2fbb":"code","ad2c4637":"code","6d3ee373":"code","98e51c25":"code","7978f9be":"code","5a1d9c9d":"code","9cc6277a":"code","e8a787f2":"markdown","2f9317ee":"markdown","24634226":"markdown","7577d155":"markdown","f866cef3":"markdown","b6254a51":"markdown"},"source":{"f891a16c":"# Import modules\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport random as r\n\n# If you decide to increase or decrease the font size in figures later, you can turn on the following line of code.\n# plt.rcParams.update({'font.size': 16}) \n\n# Set the backend of matplotlib to the 'inline' backend so that plots appear below the code that produces them\n# (See details at the bottom of this webpage: https:\/\/ipython.readthedocs.io\/en\/stable\/interactive\/plotting.html)\n%matplotlib inline","49a1bdd5":"# These are the data points for the 47ohm resistor (R1) when it is charging\nt1c = np.array([1.3,1.69,2.19,2.84,3.69,4.79,6.22,8.07,10.47,13.6,17.65,22.92,29.75,38.63,50.15,65.1,84.52,109.72,142.44,184.92])\nV1c = np.array([0.106,0.138,0.17,0.189,0.232,0.291,0.392,0.497,0.599,0.733,0.886,1.079,1.278,1.508,1.755,2.003,2.244,2.468,2.669,2.824])\n\n# These are the data points for the 47ohm resistor (R1) when it is discharging\nt1d = np.array([1.3,1.68,2.18,2.83,3.68,4.77,6.19,8.04,10.43,13.53,17.55,22.78,29.56,38.35,49.76,64.57,83.78,108.71,141.06,183.03])\nV1d = np.array([2.599,2.577,2.564,2.526,2.515,2.475,2.415,2.362,2.266,2.175,2.053,1.916,1.734,1.522,1.292,1.03,0.765,0.516,0.312,0.165,])\n","0474fc3a":"# Plotting the 47 ohm resistor charging\nplt.figure('47O charging')\nplt.plot(t1c, V1c, 'kx')\n\n# Attach labels and title\nplt.xlabel('$t$ (seconds)')\nplt.ylabel('$V$ (volts)')\nplt.title('Time-Voltage plot during charging when connected to 47$\\Omega$ resistor')\n\n# Display the figure\nplt.show()\n\n","0fea1be1":"# Since the circuit is attached to a V0 = 3V battery we anticipate that it will have the equation V = V0*(1-exp(-t\/tau)) meaning that if we take DV = V0 - V \n# we should get a decaying exponential just like during discharging\n\n# Define array to subtract V1c from\nV0 = 3*np.ones(20)\n\nDV1 = V0 - V1c\n\n\n\n# Plotting this\nplt.plot(t1c, DV1, 'kx')\nplt.xlabel('$t$ (seconds)')\nplt.ylabel('$\\Delta V$ (volts)')\nplt.title('Plot of $\\Delta V = V_0 - V$ vs time')\n\n# Display the figure\nplt.show()\n","f01b2fbb":"# Plotting the 47 ohm resistor charging\nplt.figure('47O discharging')\nplt.plot(t1d, V1d, 'kx')\n\n# Attach labels and title \nplt.xlabel('$t$ (seconds)')\nplt.ylabel('$V$ (volts)')\nplt.title('Time-Voltage plot during discharging when connected to 47$\\Omega$ resistor')\n\n# Display the figure\nplt.show()\n","ad2c4637":"# Set the figure to save\nplt.figure('Test Figure') \n\n# Save the figure as a file in png, pdf or other formats\nplt.savefig('TestFigure.png', bbox_inches='tight') # The output figure is saved to your project folder by default.\n#plt.savefig('TestFigure.pdf', bbox_inches='tight')\n\n# It's possible to save the figure in png by drag-and-drop: click on the output figure and drag it to a folder on your computer.","6d3ee373":"# Here we plot the natural log of DV = V0-V against time during the charging of the capacitor, this should give us a straight line whose \n# gradient is the inverse of the time constant\n\n# Plot Logs against time\nplt.plot(t1c, np.log(DV1), 'rx')\n\n\n# Attach labels and title \nplt.xlabel('$t$ (seconds)')\nplt.ylabel('$\\ln(\\Delta V)$ ')\nplt.title('$ln(\\Delta V)$ vs $t$ during charging')\n\n# Display the figure\nplt.show()\n","98e51c25":"# Doing the same for discharging\nplt.plot(t1d, np.log(V1d), 'rx')\n\n# Attach labels and title \nplt.xlabel('$t$ (seconds)')\nplt.ylabel('$\\ln(V)$ ')\nplt.title('$\\ln(V)$ vs $t$ during discharging')\n\n# Display the figure\nplt.show()\n","7978f9be":"# Find the line of best fit for the data\nslope, intercept, r_value, p_value, std_err = stats.linregress(t1d, np.log(DV1))\n\nprint(slope, intercept, std_err)\nName = str(np.round(slope,5))+'*t+'+str(np.round(intercept,5))\n\n# Create the line of best fit from the linear fit above\nline = slope*t1d + intercept\n\n# Plot the line of best fit \nplt.plot(t1d, line, 'r', label=Name)\nplt.plot(t1d, np.log(DV1),'kd')\n\n# Attach labels and title\nplt.xlabel('$t$ (seconds)')\nplt.ylabel('$\\ln(\\Delta V)$ ')\nplt.title('$\\ln(\\Delta V)$ vs $t$ during discharging')\n\n# Add a grid to the plot\nplt.grid(alpha=.4,linestyle='--')\n\n# Show the legend in the plot\nplt.legend()\n\n# Display the figure\nplt.show()\n\n","5a1d9c9d":"# Find the line of best fit for the data\nslope1, intercept1, r_value, p_value, std_err1 = stats.linregress(t1d, np.log(V1d))\n\nprint(slope1, intercept1, std_err1)\nName1 = str(np.round(slope1,5))+'*t+'+str(np.round(intercept1,5))\n\n# Create the line of best fit from the linear fit above\nline1 = slope1*t1d + intercept1\n\n# Plot the line of best fit \nplt.plot(t1d, line1, 'r', label=Name1)\nplt.plot(t1d, np.log(V1d),'kd')\n\n# Attach labels and title\nplt.xlabel('$t$ (seconds)')\nplt.ylabel('$\\ln(V)$ ')\nplt.title('$\\ln(V)$ vs $t$ during discharging')\n\n# Add a grid to the plot\nplt.grid(alpha=.4,linestyle='--')\n\n# Show the legend in the plot\nplt.legend()\n\n# Display the figure\nplt.show()\n\n","9cc6277a":"slope_av = 0.5 * (slope+slope1)\n\ntau = -1\/slope_av\n\nR1exact = 47.4\n\nC = tau\/R1exact\n\nrR = 0.05\n\nrC = np.sqrt(rR ** 2 + (0.5*(std_err + std_err1)) ** 2)\n\nprint(tau, '\\n'\n     ,C, '\\n'\n     ,rC)","e8a787f2":"# Compute natural logarithms\n\nSuppose we work out the relationship between $x$ and $y$ is an exponential one in our analysis, we can compute the values of $\\ln(y)$ to linearise the data and plot $x$ vs $\\ln{(y)}$. We will use the first dataset as an example below.","2f9317ee":"# Fit linear models to data\n\nWe can now find the line of best fit in the linearised data by using *simple linear regression*.","24634226":"We now use the `plt.plot` function to produce a scatter plot:","7577d155":"# PHYSICS 121 Lab 1 *RC* Circuits\n\nThis notebook is used to calculate the time constant of the an RC circuit from the values of the voltage under charging or discharging when connected to a 47$\\Omega$ resistor\n","f866cef3":"# Save a figure as a file\n\nTo save the figure with two datasets as a file, we will make use of 'savefig'.","b6254a51":"# Scatter plot for charging and discharging an RC circuit with 47$\\Omega$ resistor"}}