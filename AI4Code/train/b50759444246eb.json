{"cell_type":{"55f9195e":"code","b20004eb":"code","a546c060":"code","3056eb98":"code","0c670413":"code","fb72888a":"code","b7b1f7d3":"code","4c6687bf":"code","01e70cbf":"code","801c4b18":"code","36695314":"code","ab348df0":"code","b6d9810a":"code","b9270a5d":"code","72f357d7":"code","12553bcd":"code","37e54eaa":"code","4d467671":"code","2e4c5d51":"code","42e8aa18":"code","129c31ff":"code","2e4df4bd":"code","658ccbce":"code","25e09263":"code","cde6cee2":"code","f9b087d8":"code","6fd84e55":"code","90897b18":"code","a5715d9a":"code","1786fe8b":"code","f4f25515":"code","7d426af7":"code","d1c64c83":"code","57aeec87":"code","f2448dff":"code","61bf3524":"code","3dcc8eb2":"code","6a1baccf":"code","a12b996a":"code","04a0eee0":"code","b3b58c79":"code","889aca57":"code","b60e3ca0":"code","7192827f":"code","ec718ac1":"code","f6eaba7b":"code","a936be00":"code","8878e2ed":"code","91a6c5c8":"code","6826f781":"code","4b9cbb3f":"code","0f85e220":"code","021ef773":"code","150dbafe":"code","0095e337":"code","f9eb90be":"code","ca158f77":"code","17175946":"code","10f60223":"code","d6768fa6":"code","5839165a":"code","8e58aa89":"code","c7150772":"code","b8b7d1da":"code","84d1d807":"code","c0ee3ec5":"code","4cd09ef1":"code","a7e62745":"code","3dae07bc":"code","4e342351":"code","aae01873":"code","de442130":"code","c14f6907":"code","bb4cc138":"code","3f58fa67":"code","37939787":"code","bdaafc87":"code","d9c3225f":"code","e8e45e01":"code","7035f3e4":"code","5a8353be":"code","163e47dc":"code","6bee642b":"code","837aa7a8":"code","67439934":"code","2145aaab":"markdown","bc4ce4e0":"markdown","e3f2068b":"markdown","94d3d5c7":"markdown","df85eeea":"markdown"},"source":{"55f9195e":"import pandas as pd\nimport numpy as np\nimport pickle\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option('max_columns', None) ","b20004eb":"pwd","a546c060":"df = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","3056eb98":"df.head(30)","0c670413":"test.head()","fb72888a":"df.shape, test.shape # target : price","b7b1f7d3":"df.info() # null 0, date - object","4c6687bf":"test.info() # null 0, date - object","01e70cbf":"df['buy_ym'] = df['date'].apply(lambda x : x[0:6])","801c4b18":"test['buy_ym'] = test['date'].apply(lambda x : x[0:6])","36695314":"df['buy_ym'] = df['buy_ym'].astype(int)","ab348df0":"test['buy_ym'] = test['buy_ym'].astype(int)","b6d9810a":"df.buy_ym.max(), df.buy_ym.min()","b9270a5d":"df.buy_ym.describe()","72f357d7":"df.price.describe()","12553bcd":"sns.boxplot(data = df['price'] )\nfig = plt.gcf()\nfig.set_size_inches(10,5)","37e54eaa":"sns.distplot(df['price'])","4d467671":"print('Skewness : %f' % df.price.skew())\nprint('Kurtosis : %f' % df.price.kurt())  ","2e4c5d51":"cor_mat = df.corr()\nmask = np.array(cor_mat)\nmask[np.tril_indices_from(mask)] = False\n\nflg = plt.gcf()\nplt.figure(figsize = (15,15))\nsns.heatmap(data = cor_mat, mask = mask, square = True, annot = True, cbar = True)","42e8aa18":"data = pd.concat( [df.price, df.grade], axis = 1)\nf, ax = plt.subplots(figsize = (8,6))\nfig = sns.boxplot(x = 'grade', y = 'price', data = data)","129c31ff":"data = pd.concat( [df.price, df.long], axis = 1)\nf, ax = plt.subplots(figsize = (8,6))\nfig = sns.boxplot(x = 'long', y = 'price', data = data)","2e4df4bd":"data = pd.concat( [df.price, df.buy_ym], axis = 1)\nf, ax = plt.subplots(figsize = (8,6))\nfig = sns.boxplot(x = 'buy_ym', y = 'price', data = data)","658ccbce":"data = pd.concat( [df.price, df.buy_ym], axis = 1)\nf, ax = plt.subplots(figsize = (8,6))\nfig = sns.boxplot(x = 'buy_ym', y = 'price', data = df)","25e09263":"data = pd.concat([df.price, df.sqft_living], axis = 1)\nf, ax = plt.subplots(figsize = (4,3))\nfig = sns.regplot(x = 'sqft_living', y = 'price', data = df)","cde6cee2":"data = pd.concat([df.price, df.sqft_living15], axis = 1)\nf, ax = plt.subplots(figsize = (4,3))\nfig = sns.regplot(x = 'sqft_living15', y = 'price', data = data)  # sqft_living\uc5d0 \ube44\ud574 \uac00\uaca9 \ubd84\uc0b0\uc774 \ud06c\ub2e4 \uc989 less specific\ud558\ub2e4","f9b087d8":"data = pd.concat([df.price, df.sqft_above], axis = 1)\nf, ax = plt.subplots(figsize = (4,3))\nfig = sns.regplot(x = 'sqft_above', y = 'price', data = data) ","6fd84e55":"data = pd.concat([df.price, df.yr_built], axis = 1)\nf, ax = plt.subplots(figsize = (4,3))\nfig = sns.regplot(x = 'yr_built', y = 'price', data = data) ","90897b18":"data = pd.concat([df.price, df.bathrooms], axis = 1)\nf, ax = plt.subplots(figsize = (4,3))\nfig = sns.regplot(x = 'bathrooms', y = 'price', data = data) ","a5715d9a":"data = pd.concat([df.price, df.bedrooms], axis = 1)\nf, ax = plt.subplots(figsize = (4,3))\nfig = sns.regplot(x = 'bedrooms', y = 'price', data = data) ","1786fe8b":"data = pd.concat([df.price, df.bathrooms], axis = 1)\nf, ax = plt.subplots(figsize = (12,3))\nfig = sns.boxplot(x = 'bathrooms', y = 'price', data = data) ","f4f25515":"data = pd.concat([df.price, df.bedrooms], axis = 1)\nf, ax = plt.subplots(figsize = (12,3))\nfig = sns.boxplot(x = 'bedrooms', y = 'price', data = data) ","7d426af7":"df.nunique()","d1c64c83":"df.isnull().sum()","57aeec87":"test.isnull().sum()","f2448dff":"df.loc[df.sqft_living > 12500, :]","61bf3524":"df.sqft_living.describe()","3dcc8eb2":"df = df.loc[df.id != 8912] ","6a1baccf":"df.shape","a12b996a":"df.shape","04a0eee0":"df.isnull().sum()","b3b58c79":"df.info()","889aca57":"df.date = pd.to_datetime(df.date)\ntest.date = pd.to_datetime(test.date)","b60e3ca0":"df['buy_year'] = df['date'].dt.year\ntest['buy_year'] = test['date'].dt.year","7192827f":"df['sqft_total_size'] = df['sqft_above'] + df['sqft_basement']\ntest['sqft_total_size'] = test['sqft_above'] + test['sqft_basement']\ndf['total_rooms'] = df['bedrooms'] * df['bathrooms']\ntest['total_rooms'] = test['bedrooms'] * test['bathrooms']","ec718ac1":"df.loc[df.yr_renovated == 2014].count()","f6eaba7b":"df.yr_renovated.max(), ","a936be00":"df.loc[df.yr_renovated != 0]","8878e2ed":"df.query('yr_renovated == 2015').buy_ym.count()","91a6c5c8":"df.query('yr_renovated == 2014').buy_ym.count()","6826f781":"df['yr_built_renovated'] = np.where(df.yr_renovated != 0, df.yr_renovated, df.yr_built)","4b9cbb3f":"test['yr_built_renovated'] = np.where(test.yr_renovated != 0, test.yr_renovated, test.yr_built)","0f85e220":"df.head(30)","021ef773":"df['yr_built_renovated'].min()","150dbafe":"df['after_renovation'] = abs(df.buy_year - df.yr_built_renovated)","0095e337":"test['after_renovation'] = abs(test.buy_year - test.yr_built_renovated)","f9eb90be":"test.head()","ca158f77":"df.after_renovation.describe()","17175946":"sns.barplot(x = 'after_renovation', y = 'price', data = df)","10f60223":"df['sqft_ratio'] = df.sqft_living \/ df.sqft_lot\ntest['sqft_ratio'] = test.sqft_living \/ test.sqft_lot","d6768fa6":"df['perprice'] = df.price \/ df.sqft_living","5839165a":"zipcode_price = df[['zipcode', 'perprice']].groupby(['zipcode']).agg({'mean','var'})","8e58aa89":"zipcode_price.head()","c7150772":"level0 = zipcode_price.columns.get_level_values(0)\nlevel1 = zipcode_price.columns.get_level_values(1)\nzipcode_price.columns = level0 + '_' + level1","b8b7d1da":"# zipcode_price.columns = [\"_\".join(x) for x in zipcode_price.columns.ravel()]","84d1d807":"zipcode_price = zipcode_price.reset_index()","c0ee3ec5":"zipcode_price.head()","4cd09ef1":"df = pd.merge(df, zipcode_price, how = 'left', on = 'zipcode')","a7e62745":"df.head()","3dae07bc":"test = pd.merge(test, zipcode_price, how = 'left', on = 'zipcode')","4e342351":"test.head()","aae01873":"a = set(df.columns)\nb = set(test.columns)","de442130":"print(a-b)\nprint(b-a)","c14f6907":"X_train = df.drop(['date', 'price', 'id', 'perprice', 'buy_year', 'yr_built_renovated'], axis = 1)\nX_test = test.drop(['date', 'id', 'buy_year', 'yr_built_renovated'], axis = 1)","bb4cc138":"X_train.head()","3f58fa67":"X_test.head()","37939787":"target = df.perprice","bdaafc87":"X_train_columns = X_train.columns","d9c3225f":"import lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\n\nparam = {'num_leaves': 8, \n        'min_data_in_leaf': 5, \n         'min_sum_hessian_in_leaf' : 0.001,\n         'min_gain_to_split' : 1,\n        'objective' : 'regression', \n        'max_depth': -1, \n        'learning_rate': 0.01, \n        'boosting' : 'gbdt', \n        'feature_fraction' : 0.5, \n        'bagging_freq': 5, \n        'bagging_fraction': 0.5, \n        'bagging_seed': 11, \n        'metric': 'rmse', \n        'lambda_l1': 0.1, \n        'lambda_l2': 0.1, \n        'verbosity': -1,\n        'random_state': 42}\ny_reg = target # target = df.perprice ","e8e45e01":"# prepare fit model with cross_validation\nfolds = KFold(n_splits= 10, shuffle= True, random_state = 42)\noof = np.zeros(len(X_train))\npred = np.zeros(len(X_test))\nfeature_importance_df = pd.DataFrame()","7035f3e4":"# run model \nfor fold_, (trn_idx, val_idx) in enumerate(folds. split(X_train)):\n    trn_data = lgb.Dataset(X_train.iloc[trn_idx][X_train_columns],\n                           label = y_reg.iloc[trn_idx])\n    val_data = lgb.Dataset(X_train.iloc[val_idx][X_train_columns], \n                          label = y_reg.iloc[val_idx])\n    num_round = 100000\n    clf = lgb.train(param, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval = 1000, early_stopping_rounds = 3000)\n    oof[val_idx] = clf.predict(X_train.iloc[val_idx][X_train_columns], num_iteration = clf.best_iteration)\n    \n    # feature importance\n    fold_importance_df = pd.DataFrame()\n    fold_importance_df['Feature'] = X_train.columns\n    fold_importance_df['importance'] = clf.feature_importance()\n    fold_importance_df['fold'] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis = 0)\n    \n    # predictions\n    pred += clf.predict(X_test[X_train_columns], num_iteration = clf.best_iteration) \/ folds.n_splits\n    \ncv = np.sqrt(mean_squared_error(oof, y_reg))\nprint(cv) ","5a8353be":"pred.shape","163e47dc":"submission = pd.read_csv('..\/input\/sample_submission.csv')","6bee642b":"submission['price'] = pred * X_test.sqft_living","837aa7a8":"submission.head()","67439934":"submission.to_csv('submission.csv', index = False)","2145aaab":"## LGBM Submission","bc4ce4e0":"## Modeling2 - LGBM : target - perprice","e3f2068b":"## \uce90\uae00 \ucf54\ub9ac\uc544\uc640 \ud568\uaed8\ud558\ub294 2nd ML \ub300\ud68c - House Price Prediction\n[https:\/\/www.kaggle.com\/c\/2019-2nd-ml-month-with-kakr] \ud3c9\uac00\ubc29\ubc95 : RMSE","94d3d5c7":"## Preprocessing","df85eeea":"## EDA"}}