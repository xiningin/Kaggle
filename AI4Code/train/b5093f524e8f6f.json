{"cell_type":{"7f2fec59":"code","7c74f693":"code","e1a2236f":"code","72ef9d12":"code","94abed43":"code","450f27c7":"code","7039bee5":"code","130da8b0":"code","a09d6e6a":"code","1b3947cd":"code","c845a9d7":"code","2fa58f31":"code","670bbd23":"code","3a7fc286":"code","ee113524":"code","bb149b0f":"code","e359eac3":"code","56361be4":"code","c777484a":"code","1875a68b":"code","419a7b13":"code","b7e397a3":"code","f3757456":"code","80759b86":"code","43f0c448":"code","ea044353":"code","e88331c3":"code","3a85fd81":"code","f28cec13":"code","c814114f":"code","fc67bead":"code","e9b7e0da":"code","8e8afdf7":"code","c57a8247":"code","feae9b3a":"code","54a0512d":"code","fb6e0072":"code","1e4d95a9":"code","d6bcc16c":"code","928ee078":"code","1480e737":"code","39480f13":"code","4a66554e":"code","6f90364c":"markdown","cfc545b3":"markdown","7dbd75cb":"markdown","8cd5f3e6":"markdown","33119993":"markdown","241a8830":"markdown","e4594716":"markdown","a23f640b":"markdown","6cab25dd":"markdown","045af4e7":"markdown","40e43c61":"markdown","7525a4ec":"markdown","fba458dd":"markdown","28c829b4":"markdown","d1c167f8":"markdown","fcd2c6aa":"markdown","160d051c":"markdown","2722d182":"markdown","a215d2b5":"markdown","57b0319a":"markdown","24f665df":"markdown","b42e1e5e":"markdown","f97bafa0":"markdown","332aecd1":"markdown","172d8da5":"markdown","e1deffe7":"markdown"},"source":{"7f2fec59":"# Importing required modules\nimport os\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","7c74f693":"# To get file paths with connected datasets in Kaggle we are going to run:\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e1a2236f":"# Reading datasets into pandas DataFrame objects\ndf_google = pd.read_csv('\/kaggle\/input\/google-playstore-apps\/Google-Playstore.csv', low_memory=False)\ndf_apple = pd.read_csv('\/kaggle\/input\/763k-ios-app-info\/763K_plus_IOS_Apps_Info.csv', low_memory=False)","72ef9d12":"# Isolating columns we need\ndf_ggl = df_google[['App Name', 'Category', 'Rating', 'Rating Count', 'Maximum Installs', 'Price',\n                    'Content Rating', 'Ad Supported', 'In App Purchases', 'Editors Choice']]\ndf_ggl.columns = ['app_name', 'category', 'rating', 'rating_count', 'max_installs', 'price', 'content_rating', 'ads', 'in_apps', 'editors']\n\ndf_ios = df_apple[['Title', 'Age_Rating', 'Total_Average_Rating', 'Total_Number_of_Ratings', 'Price_USD', 'Primary_Genre', 'Languages']]\ndf_ios.columns = ['app_name', 'content_rating', 'rating', 'rating_count', 'price', 'category', 'language']\ndf_ios = df_ios[['app_name', 'category', 'rating', 'rating_count', 'price', 'content_rating', 'language']]","94abed43":"# Inspect new dataframe\nprint(df_ggl.info())\ndf_ggl.head(5)","450f27c7":"# Removing duplicated data\nprint('Duplicates:\\n',df_ggl.duplicated().value_counts())","7039bee5":"# Null values are met only in rating columns that means these apps most likely are new. Let's drop them for n\ndf_ggl = df_ggl.dropna()","130da8b0":"# Inspect new dataframe\nprint(df_ios.info())\ndf_ios.head()","a09d6e6a":"# Removing duplicated data\nprint('Before:',df_ios.duplicated().value_counts())\ndf_ios.drop_duplicates(inplace=True)\nprint('After:',df_ios.duplicated().value_counts())","1b3947cd":"# Checking null-values (1 null value - drop with ease)\nprint('Nulls:', df_ios.isna().value_counts())\ndf_ios.dropna(inplace=True)\nprint('No nulls:', df_ios.isna().value_counts())","c845a9d7":"# Checking negative values in rating column\ndf_ios[df_ios['rating'] < 0]['rating_count'].value_counts()","2fa58f31":"# Getting rid of null\/negative rating and rating_counts\nprint('Apps in the Ios dataset before:', df_ios.shape[0])\nprint('Apps in the Google dataset before:', df_ggl.shape[0])\nprint()\ndf_ios = df_ios[df_ios['rating'] > 0]\ndf_ggl = df_ggl[df_ggl['rating'] > 0]\nprint('Apps left in the Ios dataset after:', df_ios.shape[0])\nprint('Apps left in the Google dataset after:', df_ggl.shape[0])","670bbd23":"# Also let's cut apps with low rating_count - not very popular (yet) apps\nprint('Apps in the Ios dataset before:', df_ios.shape[0], 'and % of low rating_count apps:', \n      df_ios['rating_count'].value_counts()[:100].sum() \/ df_ios['rating_count'].shape[0] * 100 )\nprint('Apps in the Google dataset before:', df_ggl.shape[0], 'and % of low rating_count apps:', \n      df_ggl['rating_count'].value_counts()[:100].sum() \/ df_ggl['rating_count'].shape[0] * 100 )\ndf_ios = df_ios[df_ios['rating_count'] >= 100]\ndf_ggl = df_ggl[df_ggl['rating_count'] >= 100]\nprint('Apps left in the Ios dataset after:', df_ios.shape[0])\nprint('Apps left in the Google dataset after:', df_ggl.shape[0])","3a7fc286":"df_ios[df_ios['rating'] > 0]['rating'].value_counts()","ee113524":"import statsmodels.api as sm\nfrom statsmodels.formula.api import ols","bb149b0f":"# If we want to make predictional models we need to get rid of outliers\ndf_ggl[(df_ggl['rating_count'] < 50000) & (df_ggl['max_installs'] < 10000000)].shape[0] \/ df_ggl.shape[0]","e359eac3":"# Drawing dependency plot \nax = sns.regplot(data=df_ggl[(df_ggl['rating_count'] < 50000) & (df_ggl['max_installs'] < 10000000)], x='rating_count', y='max_installs')","56361be4":"# Fit simple linear regression model\nmodel = ols('max_installs ~ rating_count', data=df_ggl[(df_ggl['rating_count'] < 50000) & (df_ggl['max_installs'] < 10000000)])\nmodel_fit = model.fit()\n\n# View model summary\nmodel_fit.summary()","c777484a":"# Drawing comparison table\nprint(f\"{'Platform':>20} \\ {'rating':>10} \\ {'reactions per app': >30} \\ {'totall apps': >20} \\ \")\nprint('-' * 91)\nprint(f\"{'Play Market (Google)':>20} \\ {df_ggl['rating'].mean():>10.2f} \\ {df_ggl['rating_count'].sum() \/ df_ggl['app_name'].shape[0]:>30.2f} \\ {df_ggl['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'Appstore (Apple)':>20} \\ {df_ios['rating'].mean():>10.2f} \\ {df_ios['rating_count'].sum() \/ df_ios['app_name'].shape[0]:>30.2f} \\ {df_ios['app_name'].shape[0]:>20} \\ \")","1875a68b":"def english(string):\n    ret = 0\n    for char in string:\n        if ord(char) > 127 or char == '?':\n            ret += 1\n    if ret > 3:\n        return False\n    else:\n        return True\n    \nprint(english('?????? ? ???? ??????'))\nprint(english('\u7231\u5947\u827aPPS -\u300a\u6b22\u4e50\u98822\u300b\u7535\u89c6\u5267\u70ed\u64ad'))\nprint(english('Docs To Go\u2122 Free Office Suite'))\nprint(english('Instachat \ud83d\ude1c'))","419a7b13":"# Language boolean masks\nmask_ios = df_ios['language'].map(lambda x: 'EN' in x)\nmask_ggl = df_ggl['app_name'].map(english)\n\n# Splitting our dataframes to compare them\nios_english = df_ios[mask_ios]\nios_local = df_ios[~mask_ios]\n\nggl_english = df_ggl[mask_ggl]\nggl_local = df_ggl[~mask_ggl]","b7e397a3":"# Let's check how our fuction performs on ios dataframe, where we have separate language column\nprint(f\"There are {df_ios[(~df_ios['app_name'].map(english)) & (mask_ios)]['app_name'].count()} apps our function defined as non-english when they actually are\")\nprint(f\"Out of {df_ios.shape[0]} apps in totall and {ios_local.shape[0]} non-english apps in Appstore dataset\")","f3757456":"plt.style.use('fivethirtyeight')\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(18, 6))\n\n#Printing KDE for each group\ngraph = sns.kdeplot(ggl_english['rating'], color='#FF961F', label='English apps', bw=.1, ax=ax1)\ngraph = sns.kdeplot(ggl_local['rating'], color='#219ebc', label='Non-english apps', bw=.1, ax=ax1)\ngraph = sns.kdeplot(df_ggl['rating'], color='#023047', label='All apps', bw=.1, ax=ax1)\n\n#Printing their means\ngraph.axvline(x = df_ggl['rating'].mean(), color = '#023047', linewidth = 3, alpha = .7)\ngraph.axvline(x = ggl_english['rating'].mean(), color = '#fb8500', linewidth = 3, alpha = .7)\ngraph.axvline(x = ggl_local['rating'].mean(), color = '#219ebc', linewidth = 3, alpha = .7)\n\n#Graphic details\ngraph.text(x = 2.1, y = 0.9, s = \"Play market\", fontsize = 20, weight = 'bold', alpha = .75)\ngraph.text(x = 2.1, y = 0.85, s = 'app rating depending on fee', fontsize = 16, alpha = .85)\ngraph.tick_params(axis = 'both', which = 'major', labelsize = 16)\ngraph.axhline(y = 0, color = 'black', linewidth = 4, alpha = .7)\n#graph.set_yticklabels(labels = [])\ngraph.set_xlim(left = 1.9, right = 5)\ngraph.xaxis.label.set_visible(False)\nax1.legend(loc='center left', bbox_to_anchor=(0.02, 0.60))\n\n#Printing histograms for categorial data\nbins = [1.9, 2.25, 2.75, 3.25, 3.75, 4.25, 4.75, 5]\ngraph = sns.distplot(ios_english['rating'], norm_hist=True, color='#fb8500',\n                     label='English apps', bins=bins, ax=ax2, kde=False, hist_kws={\"histtype\": \"bar\",\"alpha\": .7})\ngraph = sns.distplot(ios_local['rating'], norm_hist=True, color='#219ebc',\n                     label='Non-english apps', bins=bins, ax=ax2, kde=False, hist_kws={\"histtype\": \"bar\", \"alpha\": .7})\ngraph = sns.distplot(df_ios['rating'], norm_hist=True, color='#023047',\n                     label='All apps', bins=bins, ax=ax2, kde=False, hist_kws={\"histtype\": \"step\", \"alpha\": 1, 'linewidth': 5})\n\n#Printing their means\ngraph.axvline(x = ios_english['rating'].mean(), color = '#FF961F', linewidth = 4, alpha = 1)\ngraph.axvline(x = ios_local['rating'].mean(), color = '#219ebc', linewidth = 3, alpha = 1)\ngraph.axvline(x = df_ios['rating'].mean(), color = '#023047', linewidth = 3, alpha = 1)\n\n#Graphic details\ngraph.text(x = 2.1, y = 0.90, s = \"Appstore\", fontsize = 20, weight = 'bold', alpha = .75)\ngraph.text(x = 2.1, y = 0.85, s = 'app rating depending on fee', fontsize = 16, alpha = .85)\ngraph.tick_params(axis = 'both', which = 'major', labelsize = 16)\ngraph.axhline(y = 0, color = 'black', linewidth = 4, alpha = .7)\n#graph.set_yticklabels(labels = [])\ngraph.set_xlim(left = 1.9, right = 5)\n#graph.set_ylim(bottom = 0, top = 0.00001)\ngraph.xaxis.label.set_visible(False)\nax2.legend(loc='center left', bbox_to_anchor=(0.02, 0.60))","80759b86":"# Drawing comparison table\nprint(f\"{'Google':>13} \\ {'rating':>10} \\ {'reactions per app': >30} \\ {'totall apps': >20} \\ \")\nprint('---' * 28)\nprint(f\"{'overall':>13} \\ {df_ggl['rating'].mean():>10.2f} \\ {df_ggl['rating_count'].sum() \/ df_ggl['app_name'].shape[0]:>30.2f} \\ {df_ggl['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'english':>13} \\ {ggl_english['rating'].mean():>10.2f} \\ {ggl_english['rating_count'].sum() \/ ggl_english['app_name'].shape[0]:>30.2f} \\ {ggl_english['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'non-english':>13} \\ {ggl_local['rating'].mean():>10.2f} \\ {ggl_local['rating_count'].sum() \/ ggl_local['app_name'].shape[0]:>30.2f} \\ {ggl_local['app_name'].shape[0]:>20} \\ \")\nprint()\nprint(f\"{'IOS':>13} \\ {'rating':>10} \\ {'reactions per app': >30} \\ {'totall apps': >20} \\ \")\nprint('---' * 28)\nprint(f\"{'overall':>13} \\ {df_ios['rating'].mean():>10.2f} \\ {df_ios['rating_count'].sum() \/ df_ios['app_name'].shape[0]:>30.2f} \\ {df_ios['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'english':>13} \\ {ios_english['rating'].mean():>10.2f} \\ {ios_english['rating_count'].sum() \/ ios_english['app_name'].shape[0]:>30.2f} \\ {ios_english['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'non-english':>13} \\ {ios_local['rating'].mean():>10.2f} \\ {ios_local['rating_count'].sum() \/ ios_local['app_name'].shape[0]:>30.2f} \\ {ios_local['app_name'].shape[0]:>20} \\ \")","43f0c448":"# Splitting our dataframes to compare them\nggl_free = df_ggl[df_ggl['price'] == 0]\nggl_paid = df_ggl[df_ggl['price'] != 0]\nios_free = df_ios[df_ios['price'] == 0]\nios_paid = df_ios[df_ios['price'] != 0]","ea044353":"fig, (ax1, ax2) = plt.subplots(1,2, figsize=(18, 6))\n\n#Printing KDE for each group\ngraph = sns.kdeplot(ggl_paid['rating'], color='#FF961F', label='Paid apps', bw=.1, ax=ax1)\ngraph = sns.kdeplot(ggl_free['rating'], color='#219ebc', label='Free apps', bw=.1, ax=ax1)\ngraph = sns.kdeplot(df_ggl['rating'], color='#023047', label='All apps', bw=.1, ax=ax1)\n\n#Printing their means\ngraph.axvline(x = ggl_paid['rating'].mean(), color = '#fb8500', linewidth = 3, alpha = .7)\ngraph.axvline(x = ggl_free['rating'].mean(), color = '#219ebc', linewidth = 4, alpha = .7)\ngraph.axvline(x = df_ggl['rating'].mean(), color = '#023047', linewidth = 3, alpha = .7)\n\n#Graphic details\ngraph.text(x = 2.1, y = 0.9, s = \"Play market\", fontsize = 20, weight = 'bold', alpha = .75)\ngraph.text(x = 2.1, y = 0.85, s = 'app rating depending on fee', fontsize = 16, alpha = .85)\ngraph.tick_params(axis = 'both', which = 'major', labelsize = 16)\ngraph.axhline(y = 0, color = 'black', linewidth = 4, alpha = .7)\n#graph.set_yticklabels(labels = [])\ngraph.set_xlim(left = 1.9, right = 5)\ngraph.xaxis.label.set_visible(False)\nax1.legend(loc='center left', bbox_to_anchor=(0.02, 0.60))\n\n#Printing histograms for categorial data\nbins = [1.9, 2.25, 2.75, 3.25, 3.75, 4.25, 4.75, 5]\n\ngraph = sns.distplot(ios_paid['rating'], norm_hist=True, color='#FF961F',\n                     label='Paid apps', bins=bins, ax=ax2, kde=False, hist_kws={\"histtype\": \"bar\",\"alpha\": .7})\ngraph = sns.distplot(ios_free['rating'], norm_hist=True, color='#219ebc',\n                     label='Free apps', bins=bins, ax=ax2, kde=False, hist_kws={\"histtype\": \"bar\", \"alpha\": .7})\ngraph = sns.distplot(df_ios['rating'], norm_hist=True, color='#023047',\n                     label='All apps', bins=bins, ax=ax2, kde=False, hist_kws={\"histtype\": \"step\", \"alpha\": 1, 'linewidth': 5})\n\n#Printing their means\ngraph.axvline(x = ios_paid['rating'].mean(), color = '#FF961F', linewidth = 3, alpha = 1)\ngraph.axvline(x = ios_free['rating'].mean(), color = '#219ebc', linewidth = 5, alpha = 1)\ngraph.axvline(x = df_ios['rating'].mean(), color = '#023047', linewidth = 3, alpha = 1)\n\n#Graphic details\ngraph.text(x = 2.1, y = 0.90, s = \"Appstore\", fontsize = 20, weight = 'bold', alpha = .75)\ngraph.text(x = 2.1, y = 0.85, s = 'app rating depending on fee', fontsize = 16, alpha = .85)\ngraph.tick_params(axis = 'both', which = 'major', labelsize = 16)\ngraph.axhline(y = 0, color = 'black', linewidth = 4, alpha = .7)\n#graph.set_yticklabels(labels = [])\ngraph.set_xlim(left = 1.9, right = 5)\n#graph.set_ylim(bottom = 0, top = 0.00001)\ngraph.xaxis.label.set_visible(False)\n#ax2.legend([],[], frameon=False)\nax2.legend(loc='center left', bbox_to_anchor=(0.02, 0.60))","e88331c3":"# Drawing comparison table \nprint(f\"{'Google':>13} \\ {'rating':>20} \\ {'reactions per app': >20} \\ {'totall apps': >20} \\ \")\nprint('---' * 28)\nprint(f\"{'overall':>13} \\ {df_ggl['rating'].mean():>20.2f} \\ {df_ggl['rating_count'].sum() \/ df_ggl['app_name'].shape[0]:>20.2f} \\ {df_ggl['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'free':>13} \\ {ggl_free['rating'].mean():>20.2f} \\ {ggl_free['rating_count'].sum() \/ ggl_free['app_name'].shape[0]:>20.2f} \\ {ggl_free['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'paid':>13} \\ {ggl_paid['rating'].mean():>20.2f} \\ {ggl_paid['rating_count'].sum() \/ ggl_paid['app_name'].shape[0]:>20.2f} \\ {ggl_paid['app_name'].shape[0]:>20} \\ \")\nprint()\nprint(f\"{'IOS':>13} \\ {'rating':>20} \\ {'reactions per app': >20} \\ {'totall apps': >20} \\ \")\nprint('---' * 28)\nprint(f\"{'overall':>13} \\ {df_ios['rating'].mean():>20.2f} \\ {df_ios['rating_count'].sum() \/ df_ios['app_name'].shape[0]:>20.2f} \\ {df_ios['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'free':>13} \\ {ios_free['rating'].mean():>20.2f} \\ {ios_free['rating_count'].sum() \/ ios_free['app_name'].shape[0]:>20.2f} \\ {ios_free['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'paid':>13} \\ {ios_paid['rating'].mean():>20.2f} \\ {ios_paid['rating_count'].sum() \/ ios_paid['app_name'].shape[0]:>20.2f} \\ {ios_paid['app_name'].shape[0]:>20} \\ \")","3a85fd81":"# Inspect given categories\nprint('Play Market content categories:')\nprint(df_ggl['content_rating'].value_counts())\nprint()\nprint('Appstore content categories:')\nprint(df_ios['content_rating'].value_counts())","f28cec13":"# Let's make function to rename existing content_rating categories\ndef content(i):\n    if i == 'Unrated' or i == 'Not yet rated':\n        i = 'Unrated'\n    elif i == 'Everyone' or i == '4+':\n        i = '4+'\n    elif i == 'Everyone 10+' or i == '9+':\n        i = '9+'     \n    elif i == 'Teen' or i == '12+':\n        i = '12+'\n    elif i == 'Mature 17+' or i == '17+':\n        i = '17+'\n    elif i == 'Adults only 18+':\n        i = '18+'\n    return i","c814114f":"# Applying content fuction\ndf_ggl['content_rating'] = df_ggl['content_rating'].map(content)\ndf_ios['content_rating'] = df_ios['content_rating'].map(content)","fc67bead":"# Splitting our dataframes to compare them\nggl_4 = df_ggl[df_ggl['content_rating'] == '4+']\nggl_10 = df_ggl[df_ggl['content_rating'] == '9+']\nggl_12 = df_ggl[df_ggl['content_rating'] == '12+'] \nggl_17 = df_ggl[df_ggl['content_rating'] == '17+']\nggl_18 = df_ggl[df_ggl['content_rating'] == '18+']\nggl_unrated = df_ggl[df_ggl['content_rating'] == 'Unrated']\n\nios_4 = df_ios[df_ios['content_rating'] == '4+']\nios_10 = df_ios[df_ios['content_rating'] == '9+']\nios_12 = df_ios[df_ios['content_rating'] == '12+']\nios_17 = df_ios[df_ios['content_rating'] == '17+']\nios_unrated = df_ios[df_ios['content_rating'] == 'Unrated']","e9b7e0da":"# Drawing comparison table \nprint(f\"{'Google':>8} \\ {'rating':>20} \\ {'reactions per app': >20} \\ {'totall apps': >20} \\ \")\nprint('---' * 28)\nprint(f\"{'overall':>8} \\ {df_ggl['rating'].mean():>20.2f} \\ {df_ggl['rating_count'].sum() \/ df_ggl['app_name'].shape[0]:>20.2f} \\ {df_ggl['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'4+':>8} \\ {ggl_4['rating'].mean():>20.2f} \\ {ggl_4['rating_count'].sum() \/ ggl_4['app_name'].shape[0]:>20.2f} \\ {ggl_4['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'10+':>8} \\ {ggl_10['rating'].mean():>20.2f} \\ {ggl_10['rating_count'].sum() \/ ggl_10['app_name'].shape[0]:>20.2f} \\ {ggl_10['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'12+':>8} \\ {ggl_12['rating'].mean():>20.2f} \\ {ggl_12['rating_count'].sum() \/ ggl_12['app_name'].shape[0]:>20.2f} \\ {ggl_12['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'17+':>8} \\ {ggl_17['rating'].mean():>20.2f} \\ {ggl_17['rating_count'].sum() \/ ggl_17['app_name'].shape[0]:>20.2f} \\ {ggl_17['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'18+':>8} \\ {ggl_18['rating'].mean():>20.2f} \\ {ggl_18['rating_count'].sum() \/ ggl_18['app_name'].shape[0]:>20.2f} \\ {ggl_18['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'Unrated':>8} \\ {ggl_unrated['rating'].mean():>20.2f} \\ {ggl_unrated['rating_count'].sum() \/ ggl_unrated['app_name'].shape[0]:>20.2f} \\ {ggl_unrated['app_name'].shape[0]:>20} \\ \")\n\nprint()\n\nprint(f\"{'IOS':>8} \\ {'rating':>20} \\ {'reactions per app': >20} \\ {'totall apps': >20} \\ \")\nprint('---' * 28)\nprint(f\"{'overall':>8} \\ {df_ios['rating'].mean():>20.2f} \\ {df_ios['rating_count'].sum() \/ df_ios['app_name'].shape[0]:>20.2f} \\ {df_ios['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'4+':>8} \\ {ios_4['rating'].mean():>20.2f} \\ {ios_4['rating_count'].sum() \/ ios_4['app_name'].shape[0]:>20.2f} \\ {ios_4['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'10+':>8} \\ {ios_10['rating'].mean():>20.2f} \\ {ios_10['rating_count'].sum() \/ ios_10['app_name'].shape[0]:>20.2f} \\ {ios_10['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'12+':>8} \\ {ios_12['rating'].mean():>20.2f} \\ {ios_12['rating_count'].sum() \/ ios_12['app_name'].shape[0]:>20.2f} \\ {ios_12['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'17+':>8} \\ {ios_17['rating'].mean():>20.2f} \\ {ios_17['rating_count'].sum() \/ ios_17['app_name'].shape[0]:>20.2f} \\ {ios_17['app_name'].shape[0]:>20} \\ \")\nprint(f\"{'Unrated':>8} \\ {ios_unrated['rating'].mean():>20.2f} \\ {ios_unrated['rating_count'].sum() \/ ios_unrated['app_name'].shape[0]:>20.2f} \\ {ios_unrated['app_name'].shape[0]:>20} \\ \")","8e8afdf7":"# Creating pivot table for content rating for Google\ntable_content_ggl = pd.pivot_table(df_ggl, index=['content_rating'], values = ['rating', 'rating_count', 'app_name'], \n                           aggfunc={'rating':'mean', 'rating_count':'mean', 'app_name':'count'}, margins=True, margins_name='Overall')\ntable_content_ggl = table_content_ggl[['rating', 'rating_count', 'app_name']].rename(columns={'app_name':'totall_apps', 'rating_count':'reactions per app'})\ntable_content_ggl","c57a8247":"\n# Creating pivot table for content rating for IOS\ntable_content_ios = pd.pivot_table(df_ios, index=['content_rating'], values = ['rating', 'rating_count', 'app_name'], \n                           aggfunc={'rating':'mean', 'rating_count':'mean', 'app_name':'count'}, margins=True, margins_name='Overall')\n\ntable_content_ios = table_content_ios[['rating', 'rating_count', 'app_name']].rename(columns={'app_name':'totall_apps', 'rating_count':'reactions per app'})\ntable_content_ios","feae9b3a":"plt.style.use('fivethirtyeight')\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(18, 6))\n\n#Printing KDE for each group\ngraph = sns.kdeplot(ggl_4['rating'], label='4+', color='#FF961F', bw=.1, ax=ax1)\ngraph = sns.kdeplot(ggl_10['rating'], label='9+', color='#FFB703', bw=.1, ax=ax1)\ngraph = sns.kdeplot(ggl_12['rating'], label='12+', color='#d62828', bw=.1, ax=ax1)\ngraph = sns.kdeplot(ggl_17['rating'], label='17+', color='#219EBC', bw=.1, ax=ax1)\ngraph = sns.kdeplot(df_ggl['rating'], label='All apps', bw=.1, color='#023047', ax=ax1)\n\n#Printing their means\ngraph.axvline(x = ggl_4['rating'].mean(), color = '#FF961F', linewidth = 3, alpha = .7)\ngraph.axvline(x = ggl_17['rating'].mean(), color = '#219ebc', linewidth = 3, alpha = .7)\ngraph.axvline(x = ggl_10['rating'].mean(), color = '#FFB703', linewidth = 5, alpha = .7)\ngraph.axvline(x = ggl_12['rating'].mean(), color = '#d62828', linewidth = 3, alpha = .7)\ngraph.axvline(x = df_ggl['rating'].mean(), color = '#023047', linewidth = 3, alpha = .7)\n\n#Graphic details\ngraph.text(x = 2.05, y = 0.9, s = \"Play market\", fontsize = 20, weight = 'bold', alpha = .75)\ngraph.text(x = 2.05, y = 0.85, s = 'app rating depending on content rating', fontsize = 16, alpha = .85)\ngraph.tick_params(axis = 'both', which = 'major', labelsize = 16)\ngraph.axhline(y = 0, color = 'black', linewidth = 4, alpha = .7)\n#graph.set_yticklabels(labels = [])\ngraph.set_xlim(left = 1.9, right = 5)\ngraph.xaxis.label.set_visible(False)\nax1.legend(loc='center left', bbox_to_anchor=(0.02, 0.59))\n\n#Printing histograms for categorial data\nbins = [1.9, 2.25, 2.75, 3.25, 3.75, 4.25, 4.75, 5]\ngraph = sns.distplot(ios_4['rating'], norm_hist=True, label='4+', color='#FF961F',\n                     bins=bins, ax=ax2, kde=False, hist_kws={\"histtype\": \"bar\",\"alpha\": .7})\ngraph = sns.distplot(ios_10['rating'], norm_hist=True, label='9+', color='#FFB703',\n                     bins=bins, ax=ax2, kde=False, hist_kws={\"histtype\": \"bar\",\"alpha\": .7})\ngraph = sns.distplot(ios_12['rating'], norm_hist=True, label='12+', color='#d62828',\n                     bins=bins, ax=ax2, kde=False, hist_kws={\"histtype\": \"bar\",\"alpha\": .7})\ngraph = sns.distplot(ios_17['rating'], norm_hist=True, label='17+', color='#219EBC',\n                     bins=bins, ax=ax2, kde=False, hist_kws={\"histtype\": \"bar\",\"alpha\": .7})\ngraph = sns.distplot(df_ios['rating'], norm_hist=True, label='All apps', color='#023047',\n                     bins=bins, ax=ax2, kde=False, hist_kws={\"histtype\": \"step\", \"alpha\": 1, 'linewidth': 5})\n\n#Printing their means\ngraph.axvline(x = ios_4['rating'].mean(), color = '#FF961F', linewidth = 3, alpha = .7)\ngraph.axvline(x = ios_10['rating'].mean(), color = '#FFB703', linewidth = 5, alpha = .7)\ngraph.axvline(x = ios_12['rating'].mean(), color = '#d62828', linewidth = 3, alpha = .7)\ngraph.axvline(x = ios_17['rating'].mean(), color = '#219ebc', linewidth = 3, alpha = .7)\ngraph.axvline(x = df_ios['rating'].mean(), color = '#023047', linewidth = 3, alpha = .7)\n\n\n#Graphic details\ngraph.text(x = 2.05, y = 0.95, s = \"Appstore\", fontsize = 20, weight = 'bold', alpha = .75)\ngraph.text(x = 2.05, y = 0.90, s = 'app rating depending on content rating', fontsize = 16, alpha = .85)\ngraph.tick_params(axis = 'both', which = 'major', labelsize = 16)\ngraph.axhline(y = 0, color = 'black', linewidth = 4, alpha = .7)\n#graph.set_yticklabels(labels = [])\ngraph.set_xlim(left = 1.9, right = 5)\n#graph.set_ylim(bottom = 0, top = 0.00001)\ngraph.xaxis.label.set_visible(False)\nax2.legend(loc='center left', bbox_to_anchor=(0.02, 0.59))","54a0512d":"# Checking number of categories\nprint('Number of unique categories in Play Market:',df_ggl['category'].unique().shape[0])\nprint('Number of unique categories in Play Market:',df_ios['category'].unique().shape[0])","fb6e0072":"# Creating pivot table for Play Market app categories\ntable_category_ggl = pd.pivot_table(df_ggl, index=['category'], values = ['rating', 'rating_count', 'app_name'], \n                           aggfunc={'rating':'mean', \n                                    'rating_count': ['mean', 'median'],\n                                    'app_name':'count'})\n\ntable_category_ggl.columns = ['totall_apps', 'rating', 'reactions_mean', 'reactions_median']\ntable_category_ggl = table_category_ggl[(table_category_ggl['reactions_mean'] > 10800) \n                                & (table_category_ggl['rating'] > 4.11) & (table_category_ggl['totall_apps'] > 500)]\ntable_category_ggl.sort_values(by=['reactions_mean', 'reactions_median'], ascending=False).head()","1e4d95a9":"# Creating pivot table for Appstore app categories\ntable_category_ios = pd.pivot_table(df_ios, index=['category'], values = ['rating', 'rating_count', 'app_name'], \n                           aggfunc={'rating':'mean', \n                                    'rating_count': ['mean', 'median'],\n                                    'app_name':'count'})\n\ntable_category_ios.columns = ['totall_apps', 'rating', 'reactions_mean', 'reactions_median']\ntable_category_ios = table_category_ios[(table_category_ios['reactions_mean'] > 10800) \n                                & (table_category_ios['rating'] > 4.11) & (table_category_ios['totall_apps'] > 500)]\ntable_category_ios.sort_values(by=['reactions_mean', 'reactions_median'], ascending=False)","d6bcc16c":"# Manually pick categories\nggl_social = df_ggl[df_ggl['category'] == 'Social']\nggl_casino = df_ggl[df_ggl['category'] == 'Casino']\nggl_adventure = df_ggl[df_ggl['category'] == 'Adventure']\nggl_puzzle = df_ggl[df_ggl['category'] == 'Puzzle']\nggl_word = df_ggl[df_ggl['category'] == 'Word']\n\nios_foodrink =df_ios[df_ios['category'] == 'Food & Drink']\nios_photo = df_ios[df_ios['category'] == 'Photo & Video']\nios_finance = df_ios[df_ios['category'] == 'Finance']\nios_reference = df_ios[df_ios['category'] == 'Reference']","928ee078":"plt.style.use('fivethirtyeight')\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(18, 6))\n\n#Printing KDE for each group\ngraph = sns.kdeplot(ggl_social['rating'], label='Social', color='#FFB703', bw=.1, ax=ax1)\ngraph = sns.kdeplot(ggl_casino['rating'], label='Casino', color='#FF961F', bw=.1, ax=ax1)\ngraph = sns.kdeplot(ggl_adventure['rating'], label='Adventure', color='#d62828', bw=.1, ax=ax1)\ngraph = sns.kdeplot(ggl_puzzle['rating'], label='Puzzle', color='#219EBC', bw=.1, ax=ax1)\ngraph = sns.kdeplot(ggl_word['rating'], label='Word', color='#7400b8', bw=.1, ax=ax1)\ngraph = sns.kdeplot(df_ggl['rating'], label='All apps', bw=.1, color='#023047', ax=ax1)\n\n#Printing their means\ngraph.axvline(x = ggl_social['rating'].mean(), color = '#FFB703', linewidth = 3, alpha = .7)\ngraph.axvline(x = ggl_casino['rating'].mean(), color = '#FF961F', linewidth = 3, alpha = .7)\ngraph.axvline(x = ggl_adventure['rating'].mean(), color = '#d62828', linewidth = 3, alpha = .7)\ngraph.axvline(x = ggl_puzzle['rating'].mean(), color = '#219EBC', linewidth = 3, alpha = .7)\ngraph.axvline(x = ggl_word['rating'].mean(), color = '#7400b8', linewidth = 3, alpha = .7)\ngraph.axvline(x = df_ggl['rating'].mean(), color = '#023047', linewidth = 3, alpha = .7)\n\n#Graphic details\ngraph.text(x = 2.05, y = 1.3, s = \"Play market\", fontsize = 20, weight = 'bold', alpha = .75)\ngraph.text(x = 2.05, y = 1.23, s = 'app rating depending on category', fontsize = 16, alpha = .85)\ngraph.tick_params(axis = 'both', which = 'major', labelsize = 16)\ngraph.axhline(y = 0, color = 'black', linewidth = 4, alpha = .7)\n#graph.set_yticklabels(labels = [])\ngraph.set_xlim(left = 1.9, right = 5)\ngraph.xaxis.label.set_visible(False)\nax1.legend(loc='center left', bbox_to_anchor=(0.02, 0.59))\n\n#Printing histograms for categorial data\nbins = [1.9, 2.25, 2.75, 3.25, 3.75, 4.25, 4.75, 5]\ngraph = sns.distplot(ios_foodrink['rating'], norm_hist=True, label='Food & Drink', color='#7400b8', bins=bins, ax=ax2, kde=False, hist_kws={\"histtype\": \"bar\",\"alpha\": .7})\ngraph = sns.distplot(ios_photo['rating'], norm_hist=True, label='Photo & Video', color='#FFB703', bins=bins, ax=ax2, kde=False, hist_kws={\"histtype\": \"bar\",\"alpha\": .7})\ngraph = sns.distplot(ios_finance['rating'], norm_hist=True, label='Finance', color='#d62828', bins=bins, ax=ax2, kde=False, hist_kws={\"histtype\": \"bar\",\"alpha\": .7})\ngraph = sns.distplot(ios_reference['rating'], norm_hist=True, label='Reference', color='#219EBC', bins=bins, ax=ax2, kde=False, hist_kws={\"histtype\": \"bar\",\"alpha\": .7})\ngraph = sns.distplot(df_ios['rating'], norm_hist=True, label='All apps', color='#023047', bins=bins, ax=ax2, kde=False, hist_kws={\"histtype\": \"step\", \"alpha\": 1, 'linewidth': 5})\n\n#Printing their means\ngraph.axvline(x = ios_foodrink['rating'].mean(), color = '#7400b8', linewidth = 3, alpha = .7)\ngraph.axvline(x = ios_photo['rating'].mean(), color = '#FFB703', linewidth = 3, alpha = .7)\ngraph.axvline(x = ios_finance['rating'].mean(), color = '#d62828', linewidth = 3, alpha = .7)\ngraph.axvline(x = ios_reference['rating'].mean(), color = '#219ebc', linewidth = 3, alpha = .7)\ngraph.axvline(x = df_ios['rating'].mean(), color = '#023047', linewidth = 3, alpha = .7)\n\n#Graphic details\ngraph.text(x = 2.05, y = 1.3, s = \"Appstore\", fontsize = 20, weight = 'bold', alpha = .75)\ngraph.text(x = 2.05, y = 1.23, s = 'app rating depending on category', fontsize = 16, alpha = .85)\ngraph.tick_params(axis = 'both', which = 'major', labelsize = 16)\ngraph.axhline(y = 0, color = 'black', linewidth = 4, alpha = .7)\n#graph.set_yticklabels(labels = [])\ngraph.set_xlim(left = 1.9, right = 5)\n#graph.set_ylim(bottom = 0, top = 0.00001)\ngraph.xaxis.label.set_visible(False)\nax2.legend(loc='center left', bbox_to_anchor=(0.02, 0.59))","1480e737":"def names(df, name):\n    '''\n    Looks for names in the app_name columns and returns \n    dataframe with all occurences\n    '''\n    list_ = []\n    for i in df['app_name']:\n        if name.lower() in i.lower():\n            list_.append(i)\n    df2 = df[df['app_name'].isin(list_)].sort_values(['rating_count'], ascending=False)\n    return df2","39480f13":"# Merging dataframes and checking resulting data volume\nresult = pd.merge(df_ggl, df_ios, on='app_name', suffixes=('_ggl', '_ios'))\nprint('Total apps after merge:', result.shape[0])\nprint('Free apps on both markets:',result[(result['price_ggl'] == 0) & (result['price_ios'] == 0)].shape[0])\nprint('Paid apps on both markets:',result[(result['price_ggl'] > 0) & (result['price_ios'] > 0)].shape[0])\nprint('Number of apps that are free in Play Market and paid in Appstore:', result[(result['price_ggl'] == 0) & (result['price_ios'] > 0)].shape[0])\nprint('Number of apps that are paid in Play Market and free in Appstore:', result[(result['price_ggl'] > 0) & (result['price_ios'] == 0)].shape[0])","4a66554e":"question_1 = result[(result['price_ggl'] > 0) & (result['price_ios'] > 0)][['rating_count_ggl', 'rating_count_ios', 'price_ggl', 'price_ios']].mean()\nquestion_1","6f90364c":"## What language to choose: english or local\n\nIos dataset contains information about language. For Play Market dataset we are assuming that if application name includes high unicode characters or consists of question marks mostly it's written on non-english language (which is not 100% sure so we need to keep this in mind)","cfc545b3":"* Games category in Google dataset are split into different categories. One opportunity for us, if we choose to make a game app, we can decide what it would be about.\n* We also calculated a median to account for outliers in such categories as Social for Android. We're interested in categories where applications are generally perceived better by the audience, i.e. those where the median is closer to the mean.\n* Low median value for Social is related to market giants and make this category less viable.\n\nIn Play Market we prepicked 5 categories including 3 games: Casino, Puzzle, Word. And 4 categories in Appstore dataset.","7dbd75cb":"### Can we say, that number of installs depends on number of ratings? \n\nThe data on installs is only available in the Play Market dataset, so let's build a model for it","8cd5f3e6":"As we can see there apps rated 12+ perform better than other content categories on both platforms following by closest category - 9+ with similar average rating but much lower number of reactions on ios. Our choice here is 12+ application for android market with 63k+ ratings per app on average.","33119993":"## What platform is better\n\n1. \"Are the same paid apps on ios have more users?\"\n2. \"Are there any apps that are free on android and paid on ios?\"\n\nTo answer these questions we are going to merge both datasets on app names as a key.","241a8830":"**TO DO:**\n* Check casino with related attributes - there's a chance such apps perform better than most.\n* Test Social and Adventure categories on Play Market for outliers and test again.\n* Look for attribute combination to start as free app in Play Market then making paid version for Appstore.\n* Make further exploration for picked options:\n    * Monetization model \/ average price\n    * Find competitors and clarify app topic","e4594716":"All these categories perform better than average app on the market. Following our previous picks we can't pick Casino here even though it has much better metrics and must be considered for further analysis. Social and Adventure categories have high differences between mean and meadian values and must be checked for outliers.\n\nTo make a conclusion our final choice is free puzzle\/word game for android with 12+ content rating. And second best option is paid photo\/video app for ios.","a23f640b":"### IOS rating columns is categorical data!\n\nWe must keep in mind that ratings in ios dataset are categorical as shown below.","6cab25dd":"Apps in Appstore on average are rated better, but have less reactions. The logic here is that we prioritize number of installs (number of reactions in our case which is related) as it's the main stat leading to high monetization untill the average rating is above the mean. High app rating can be transformed into number of install but that's not the rule. Also apps with comparable number of reactions will be prioritized based on rating. For apps or attributes with average rating below mean the decider is difference between mean and actuall rating.","045af4e7":"The same direct paid applications have a higher response in Play Market (13661 vs 5768 reactions per app in average). Average price for apps on both markets is nearly the same, around $4.40.","40e43c61":"## Preparing data","7525a4ec":"For the sake of practice and for better comparison let's regroup the content rating values into the new categories:\n* 'Unrated' (ggl) and 'Not yet rated' (ios) -> Unrated\n* 'Everyone 10+' (ggl) and '4+' (ios) -> 4+\n* '10+' (ggl) and '9+' (ios) -> 9+ \n* 'Teen' (ggl) and '12+' (ios) -> 12+ \n* 'Mature 17+' (ggl) and '17+' (ios) -> '17+'\n* 'Adults only 18+' (ggl) -> '18+'","fba458dd":"## Categories","28c829b4":"## Cleaning ios dataframe\n1. Look for duplicates.\n2. Check null-values.\n3. Negative ratings - what's that?\n4. Categorize content rating in both dataframes.","d1c167f8":"## Comparing overall means of datasets\n\nThe main metric for us will be the reactions to app ratio (rating counts mean). The secondary metric will be the average rating. \n","fcd2c6aa":"With this model, we will be able to estimate the number of installations for the required parameters, if necessary. We can also predict the demand for our application. ","160d051c":"There are totall of 48 categories in Play Market data and 24 in Appstore, so we are going to implement some limitations based on our metrics, to make result more clear. Limitations based on rating and reactions count are refered to mean values of both datasets and also we limit minimum number of apps into category to escape skewed data. Let's assume cutting all categories with rating and rating counts lower that totall mean values and categories with less than 500 apps in them. \n","2722d182":"For such amount of groups pivot table are preferable:","a215d2b5":"This version of Google dataset is cleaned and prepared for analysis, but Apple dataset needs some cleaning, so we are going to start with it","57b0319a":"Big part of given dataset doesn't have rating and rating_count information. We'll continue with the remaining part and cut this part of dataset as it's not clear for me how these values were obtained. \n\nI suggest cutting off a portion of our data that includes applications with low response rates as we are looking for most popular applications. \nThis will also help us to reduce the impact of new and niche applications on the average rating considered within attribute scores.","24f665df":"English applications are more popular on both platforms, but on android local apps have more loyal audience. There is also a big possibility that some apps that are named with lating letters are non-english apps and vice versa. As a conclusion here we desire to make english app on android as this type of apps has 2.7 times higher reactions to app ratio.","b42e1e5e":"## Content rating comparison","f97bafa0":"We got 8384 apps with perfect matched names. Out of which 13.1% apps are paid just like in Appstore dataset. Appstore has more paid applications Play Market among same apps. That's once again confirms the thesis that it could be better overall to run a paid version of application in the Appstore.\n\nNow let's select the applications that differ in price to answer the second question and those that have the same price to answer the first question.","332aecd1":"Conclusion is we would either prefer making paid app for IOS (with more reactions \/ totall apps ratio) or free app for Play Market, where customers an app at average receives 2 times more ratings which is a synonim of more app installs. If i need to choose one i would pick android option because of the volume and quality of the dataset.","172d8da5":"## Free or paid apps\n\nFor this assumption we will not take into account different ways of monetization, but simply check the statistics for paid and free applications.","e1deffe7":"# What app should i create next?\n\n**Goals:** \n1. Decide what properties are valued better on average amogst mobile app users.\n2. What platform is better to for release.\n\nIn this project i'm going to evaluate different app attributes to decide which characteristics are better perceived by the market. Attributes that's going to be evaluated are app language, content rating, category, is app paid or no. Evaluation parameters are app's average number of reactions (count of rating scores assigned) and \/ or number installs, and average rating. High number of reactions tells us about the demand for the application and high potential income. High average rating indicates that the audience is more loyal to such type of applications.<br\/>The final result will be a full set of application characteristics, determined by indirect evidence. \n\nTo achieve second goal we are going to answer two questions: \"Are the same paid apps on ios have more users?\" and \"Are there any apps that are free on android and paid on ios?\". An affirmative answer to both questions will make the Appstore more attractive for releasing a new application.\n\nI'm going to use two datasets provided by kaggle users, one for each platform. \n* [Google Store dataset](https:\/\/www.kaggle.com\/gauthamp10\/google-playstore-apps) includes Google Play Store App data of 600K+ applications.\n* [Apple Store dateset](https:\/\/www.kaggle.com\/cmqub19\/763k-ios-app-info) includes data on 760K+ applications.\n\n*Real goal of the project to practice pandas exploratory analysis and visualization with seaborn module*\n\n### Conclusions:\n* Our main idea is to make free english puzzle\/word game for Play Market and second best option is eglish paid english photo\/video app for Appstore\n* Free applications find a better response in Play Market, while the number and ratio of paid applications is more attractive in Appstore."}}