{"cell_type":{"31c4bee0":"code","1afc9c99":"code","5cf2a732":"code","56f74318":"code","549ad98a":"code","da1474ad":"code","b81becb1":"code","0800844e":"code","4a1343e0":"code","60848cc0":"code","f784ffab":"code","bb49a31d":"code","c8943d40":"code","8c2a12c6":"code","9ec28223":"code","d2a2bc91":"code","eccb239a":"code","99e17f72":"code","16fb98df":"code","b5010cd3":"code","8434577a":"code","ac75952a":"code","400217ec":"code","89092603":"code","7880e17a":"markdown","697a579c":"markdown","d7bbd97a":"markdown","a95e7d2e":"markdown","dfe3229e":"markdown","367f5067":"markdown","04f28e61":"markdown","f1ee812a":"markdown","e2196d53":"markdown","3d01a467":"markdown","971f6b2f":"markdown","ff9d0a32":"markdown","5335ebb5":"markdown","00f86f20":"markdown","c262c82d":"markdown","fa6f0844":"markdown","463d3ead":"markdown","fc592f89":"markdown","8dbe80f1":"markdown","a61ba3e8":"markdown"},"source":{"31c4bee0":"!pip install -q tensorflow-gpu==2.0.0-beta1","1afc9c99":"import tensorflow as tf\ntf.__version__","5cf2a732":"import xml.etree.ElementTree as ET # For parsing XML\nfrom PIL import Image # to read image\nimport glob\nfrom tqdm import tqdm_notebook\nimport urllib\nimport tarfile\nfrom imageio import imread, imsave, mimsave\nimport shutil\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\nimport os\nfrom tensorflow.keras import layers\nimport time","56f74318":"# Code slightly modified from user: cdeotte | https:\/\/www.kaggle.com\/cdeotte\/supervised-generative-dog-net\n\nROOT = '..\/input\/'\n# list of all image file names in all-dogs\nIMAGES = os.listdir(ROOT + 'all-dogs\/all-dogs')\n# list of all the annotation directories, each directory is a dog breed\nbreeds = os.listdir(ROOT + 'annotation\/Annotation\/') \n\nidxIn = 0; namesIn = []\nimagesIn = np.zeros((25000,64,64,3))\n\n# CROP WITH BOUNDING BOXES TO GET DOGS ONLY\n# iterate through each directory in annotation\nfor breed in breeds:\n    # iterate through each file in the directory\n    for dog in os.listdir(ROOT+'annotation\/Annotation\/'+breed):\n        try: img = Image.open(ROOT+'all-dogs\/all-dogs\/'+dog+'.jpg') \n        except: continue           \n        # Element Tree library allows for parsing xml and getting specific tag values    \n        tree = ET.parse(ROOT+'annotation\/Annotation\/'+breed+'\/'+dog)\n        # take a look at the print out of an xml previously to get what is going on\n        root = tree.getroot() # <annotation>\n        objects = root.findall('object') # <object>\n        for o in objects:\n            bndbox = o.find('bndbox') # <bndbox>\n            xmin = int(bndbox.find('xmin').text) # <xmin>\n            ymin = int(bndbox.find('ymin').text) # <ymin>\n            xmax = int(bndbox.find('xmax').text) # <xmax>\n            ymax = int(bndbox.find('ymax').text) # <ymax>\n            w = np.min((xmax - xmin, ymax - ymin))\n            img2 = img.crop((xmin, ymin, xmin+w, ymin+w))\n            img2 = img2.resize((64,64), Image.ANTIALIAS)\n            imagesIn[idxIn,:,:,:] = np.asarray(img2)\n            namesIn.append(breed)\n            idxIn += 1         ","549ad98a":"# Inspect what the previous code created\nprint(\"imagesIn is a {} with {} {} by {} rgb({}) images. Shape: {}\".format(type(imagesIn), imagesIn.shape[0], imagesIn.shape[1], imagesIn.shape[2], imagesIn.shape[3], imagesIn.shape))","da1474ad":"# normalize the pixel values\nimagesIn = (imagesIn[:idxIn,:,:,:]-127.5)\/127.5 # Normalize the images to [-1, 1]\n\n# this is needed because the gradient functions from TF require float32 instead of float64\nimagesIn = tf.cast(imagesIn, 'float32')","b81becb1":"# Batch and shuffle the data\nBUFFER_SIZE = 60000\nBATCH_SIZE = 256\n\ntrain_dataset = tf.data.Dataset.from_tensor_slices(imagesIn).shuffle(BUFFER_SIZE).batch(BATCH_SIZE)\nprint(train_dataset)","0800844e":"def make_generator_model():\n    model = tf.keras.Sequential()\n    model.add(layers.Dense(8*8*512, use_bias=False, input_shape=(100,)))\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n    \n    model.add(layers.Reshape((8, 8, 512)))\n    assert model.output_shape == (None, 8, 8, 512)\n    \n    model.add(layers.Conv2DTranspose(256, (5, 5), strides=(1, 1),  padding='same', use_bias=False))\n    assert model.output_shape == (None, 8, 8, 256)\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n    \n    model.add(layers.Conv2DTranspose(128, (5, 5), strides=(2, 2),  padding='same', use_bias=False))\n    assert model.output_shape == (None, 16, 16, 128)\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n    \n    model.add(layers.Conv2DTranspose(64, (5, 5), strides=(2, 2),  padding='same', use_bias=False))\n    assert model.output_shape == (None, 32, 32, 64)\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n    \n    model.add(layers.Conv2DTranspose(3, (5,5), strides=(2, 2), padding='same', use_bias=False, activation='tanh'))\n    assert model.output_shape == (None, 64, 64, 3)\n    #model.add(layers.Dense(3, activation='tanh', use_bias=False))\n    print(\"GENERATOR\")\n    model.summary()\n    return model","4a1343e0":"generator = make_generator_model()\n\nnoise = tf.random.normal([1, 100])\n\ngenerated_image = generator(noise,training=False)\n\nplt.imshow(generated_image[0, :, :, 0])","60848cc0":"print(generated_image.shape)\nprint(noise.shape)","f784ffab":"def make_discriminator_model():\n    model = tf.keras.Sequential()\n    model.add(layers.Conv2D(64, (4, 4), \n                            strides=(2, 2), \n                            padding='same', \n                            input_shape=[64, 64, 3]))\n    model.add(layers.LeakyReLU())\n    model.add(layers.Dropout(0.3))\n    \n    model.add(layers.Conv2D(128, (4, 4), \n                            strides=(2, 2), \n                            padding='same'))\n    model.add(layers.LeakyReLU())\n    model.add(layers.Dropout(0.3))\n    \n    model.add(layers.Flatten())\n    model.add(layers.Dense(1, activation='sigmoid'))\n    \n    print(\"DISCRIMINATOR\")\n    model.summary()\n    \n    return model\n    ","bb49a31d":"discriminator = make_discriminator_model()\ndecision = discriminator(generated_image)\nprint (decision)","c8943d40":"# This method returns a helper funciton to compute cross entropy loss\ncross_entropy = tf.keras.losses.BinaryCrossentropy(from_logits=True)","8c2a12c6":"def discriminator_loss(real_output, fake_output):\n    real_loss = cross_entropy(tf.ones_like(real_output), real_output)\n    fake_loss = cross_entropy(tf.zeros_like(fake_output), fake_output)\n    total_loss = real_loss + fake_loss\n    return total_loss","9ec28223":"def generator_loss(fake_output):\n    return cross_entropy(tf.ones_like(fake_output), fake_output)","d2a2bc91":"generator_optimizer = tf.keras.optimizers.Adam(1e-4)\ndiscriminator_optimizer = tf.keras.optimizers.Adam(1e-4)","eccb239a":"EPOCHS = 200\nnoise_dim = 100\nnum_examples_to_generate = 16\n\n# we will reuse this seed overtime (so it's easier)\n# to visualize progress in the animated\nseed = tf.random.normal([num_examples_to_generate, noise_dim])","99e17f72":"# Notice the use of `tf.function`\n# This annotation causes the function to be \"compiled\".\n@tf.function\ndef train_step(images):\n    noise = tf.random.normal([BATCH_SIZE, noise_dim])\n\n    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:\n        generated_images = generator(noise, training=True)\n        real_output = discriminator(images, training=True)\n        fake_output = discriminator(generated_images, training=True)\n        \n        gen_loss = generator_loss(fake_output)\n        disc_loss = discriminator_loss(real_output, fake_output)\n\n    gradients_of_generator = gen_tape.gradient(gen_loss, generator.trainable_variables)\n    gradients_of_discriminator = disc_tape.gradient(disc_loss, discriminator.trainable_variables)\n\n    generator_optimizer.apply_gradients(zip(gradients_of_generator, generator.trainable_variables))\n    discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator, discriminator.trainable_variables))","16fb98df":"def generate_and_save_images(model, epoch, test_input):\n    # Notice `training` is set to False.\n    # This is so all layers run in inference mode (batchnorm).\n    predictions = model(test_input, training=False)\n    \n    fig = plt.figure(figsize=(8,8))\n    for i in range(predictions.shape[0]):\n        plt.subplot(4, 4, i + 1)\n        plt.imshow((predictions[i, :, :, :] + 1.)\/2.)\n        plt.axis('off')\n    plt.savefig('image_at_epoch_{}.png'.format(epoch))\n    plt.show\n    ","b5010cd3":"def train(dataset, epochs):\n    for epoch in range(epochs):\n        start = time.time()\n        \n        for image_batch in dataset:\n            train_step(image_batch)\n    # Generate after the final epoch     \n    generate_and_save_images(generator,epochs,seed)    \n    ","8434577a":"%%time\ntrain(train_dataset, EPOCHS)","ac75952a":"from keras.preprocessing.image import image","400217ec":"%%time\nif not os.path.exists('..\/output_images'):\n    os.mkdir('..\/output_images')\ni_batch_size = 50\nn_images = 10000\nfor i_batch in tqdm_notebook(range(0, n_images, i_batch_size)):\n    noise = np.random.uniform(-1.0, 1.0, [i_batch_size, noise_dim]).astype(np.float32)\n    gen_images = generator(noise, training=False)\n    gen_images = gen_images * 127.5 + 127.5\n    for j in range(i_batch_size):\n        img = image.array_to_img(gen_images[j])\n        imsave(os.path.join('..\/output_images',f'sample_{i_batch + j + 1}.png'), img)\n        if i_batch + j + 1 == n_images:\n            break\nprint(len(os.listdir('..\/output_images')))","89092603":"if os.path.exists('images.zip'):\n    os.remove('images.zip')\nshutil.make_archive('images', 'zip', '..\/output_images')\n","7880e17a":"### Save checkpoints","697a579c":"### Generate and save images","d7bbd97a":"### Train the model","a95e7d2e":"Use the (as yet untrained) discriminator to classify the generated images as real or fake. The model will be trained to output positive values for real images, and negative values for fake images.","dfe3229e":"**TODO: Images \u589e\u5f3a\u5904\u7406**","367f5067":"## Define the loss and optimizers\n\nDefine loss function and optimizers for both models.","04f28e61":"## 1. Crop images","f1ee812a":"The training loop begins with generator receiving a random seed as input. That seed is used to produce an image. The discriminator is then used to classify real images (drawn from the training set) and fakes images (produced by the generator). The loss is calculated for each of these models, and the gradients are used to update the generator and discriminator.","e2196d53":"### Create Datasets","3d01a467":"## Greate the models\n\nBoth the generator and discriminator are defined using the Keras Sequential API","971f6b2f":"## Submit to Kaggle","ff9d0a32":"### The Discriminator\n\nThe discriminator is a CNN-based image classifer.","5335ebb5":"### Generator loss\n\nThe generator's loss quantifies how well it was able to trick the discriminator. Intuitively, if the generator is performing well, the discriminator will classify the fake images as real (or 1). Here, we will compare the discriminators decisions on the generated images to an array of 1s.","00f86f20":"## Define the training loop","c262c82d":"## 2. DCGAN","fa6f0844":"### Discriminator loss\n\nThis method quantifies how well the discriminator is able to distinguish real images from fakes. It compares the discriminator's predictions on real images to an array of 1s, and the discriminator's predictions on fake(generated) images to an array of 0s.","463d3ead":"The discriminator and the generator optimizers are different since we will train two networks separately.","fc592f89":"**\u6b64\u90e8\u5206\u5355\u72ec\u53c2\u8003** [https:\/\/www.kaggle.com\/cmalla94\/dcgan-generating-dog-images-with-tensorflow#Training-loop](https:\/\/www.kaggle.com\/cmalla94\/dcgan-generating-dog-images-with-tensorflow#Training-loop)","8dbe80f1":"### The Generator\n\nThe generator uses [tf.keras.layers.Conv2DTranspose](https:\/\/www.tensorflow.org\/versions\/r2.0\/api_docs\/python\/tf\/keras\/layers\/Conv2DTranspose) (upsampling) layers to produce an image from a seed (random noise). Start with a Dense layer that takes this seed as input, then upsample several times until you reach the desired image size of 64x64x3. Notice the [tf.keras.layers.LeakyReLU](https:\/\/www.tensorflow.org\/versions\/r2.0\/api_docs\/python\/tf\/keras\/layers\/LeakyReLU) activation for each layer, except the output layer which uses tanh.\n","a61ba3e8":"Use the (as yet untrained) generator to create an image."}}