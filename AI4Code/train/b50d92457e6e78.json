{"cell_type":{"d74c6b19":"code","f18a29df":"code","7c543d96":"code","79447fc3":"code","6264ab39":"code","5077a5c9":"code","5a730a29":"code","212b5590":"code","0bc8c17c":"code","05d1d64f":"code","101b6acd":"code","64e35f12":"code","53e23c0f":"code","1ee69d1f":"code","6303a175":"code","b9b54ca4":"code","51f081d2":"code","1c54404a":"code","9c9591de":"code","fca91288":"code","84b30d00":"code","d6c18630":"code","431f9981":"code","e988490b":"code","a8c5ebaa":"code","341986c8":"markdown","e2cda0d4":"markdown","f8db6a41":"markdown","d7e47982":"markdown","91048ad4":"markdown","35125644":"markdown","f05dc3b1":"markdown","84667155":"markdown","0068e5b8":"markdown","e5524755":"markdown","7dd256d4":"markdown","be0a0771":"markdown","fb20c59f":"markdown","4fd6fb88":"markdown","80bf3693":"markdown","31d679ca":"markdown","5c3d604e":"markdown","d347aaab":"markdown","ca2cbe14":"markdown","8d04e8d8":"markdown","86e9827e":"markdown","70d69635":"markdown","7c7ef272":"markdown","3ed85f12":"markdown","56c0407b":"markdown","892a85e5":"markdown","1a9a7677":"markdown","326310c2":"markdown","365e2950":"markdown"},"source":{"d74c6b19":"import numpy as np \nimport pandas as pd\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","f18a29df":"# creating a sample csv file \nsize = 150\ny = np.random.choice(['L1', 'L2', 'L3'], size=size, p=[0.1, 0.6, 0.3]) # labels for our dummy data\ncat1 = np.random.choice(['a','b','c','d', np.nan], size=size, p=[0.2,0.1,0.2,0.45, 0.05])\ncat2 = np.random.choice([0,1, np.nan], size=size, p=[0.5,0.45, 0.05])\n\ndf = pd.DataFrame({'x1': np.random.randn(size), 'x2' : np.random.randn(size),'cat1': cat1, 'cat2':cat2, 'y': y})\n\ndf.to_csv('sample.csv', index=False)","7c543d96":"csv_path = 'sample.csv'\ndf = pd.read_csv(csv_path)\ndf.head()","79447fc3":"zip_file_path = 'zip.zip' # or 'your_npz.npz'\n# uncomment the line below\n# images = np.load(zip_file_path) ","6264ab39":"import zipfile\n# uncomment the folowing lines\n# with zipfile.ZipFile(zip_file_path) as z:\n#     z.extractall()","5077a5c9":"import seaborn as sns\nfrom matplotlib import pyplot as plt\n\n# set the figure sizes\nplt.figure(figsize=(10,5))\nsns.set(rc={'figure.figsize':(10,5)})","5a730a29":"sns.distplot(df['x1'])","212b5590":"sns.countplot(df.y)","0bc8c17c":"sns.boxplot(df.x2, df.y)","05d1d64f":"labels, counts = np.unique(df.y,return_counts=True)\nplt.pie(counts, labels=labels)","101b6acd":"from sklearn import preprocessing","64e35f12":"from sklearn.impute import SimpleImputer\n# here I changed the missing value to 'nan' but most of the times default is good\nimputer = SimpleImputer(missing_values=np.nan, strategy='most_frequent') \ndf[['cat1', 'cat2']] = imputer.fit_transform(df[['cat1','cat2']])","53e23c0f":"minmax = preprocessing.MinMaxScaler((0,1))\ndf[['x1','x2']] = minmax.fit_transform(df[['x1','x2']])\ndf.head()","1ee69d1f":"categorical_features = df.select_dtypes('object').columns\n\n\nle = preprocessing.LabelEncoder()\nfor col in categorical_features:\n    df[col] = le.fit_transform(df[col])\n    \ndf.head()","6303a175":"# adding another dummy categorical feature\ngender = np.random.choice(['Male', 'Female', 'another'], size=size, p=[0.4, 0.4, 0.2])\ndf['gender'] = gender","b9b54ca4":"from sklearn.preprocessing import OneHotEncoder\n\nohe = OneHotEncoder(handle_unknown='ignore', sparse=False)\n\n\noht = pd.DataFrame(ohe.fit_transform(df[['gender']]))\n\noht.index = df.index\n\nnum_df = df.drop(['gender'], axis=1)\n\ndf = pd.concat([num_df, oht],axis=1)","51f081d2":"from sklearn.model_selection import train_test_split\n\ny = df.y\nX = df.drop(['y'], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nprint('train shape: {}\\ntest shape: {}'.format(X_train.shape, X_test.shape))","1c54404a":"# using mean squared error\nfrom sklearn.metrics import mean_squared_error\n\ndef calculate_error(y_pred, y_true):\n    print(mean_squared_error(y_pred, y_true))","9c9591de":"from sklearn.linear_model import RidgeClassifier\n\nmodel = RidgeClassifier(random_state=0)\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)\ncalculate_error(preds, y_test)","fca91288":"from sklearn.linear_model import SGDClassifier\n\nmodel = SGDClassifier(random_state=0)\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)\ncalculate_error(preds, y_test)","84b30d00":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(n_estimators=100, random_state=0)\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)\ncalculate_error(preds, y_test)","d6c18630":"from sklearn.ensemble import AdaBoostClassifier\n\nmodel = AdaBoostClassifier(random_state=0)\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)\ncalculate_error(preds, y_test)","431f9981":"from sklearn.ensemble import GradientBoostingClassifier\n\nmodel = GradientBoostingClassifier(random_state=0)\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)\ncalculate_error(preds, y_test)","e988490b":"from sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier(max_leaf_nodes=200, random_state=0)\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)\ncalculate_error(preds, y_test)","a8c5ebaa":"def save_submission(test_path, preds, path='submission.csv'):    \n    '''\n    test_path: test csv file\n    preds    : predicted label from your model\n    path     : where you want to save the csv file\n    '''\n    test_df = pd.read_csv(test_path)\n    test_df['label_column'] = preds\n    test_df.to_csv(path, index=False)","341986c8":"### RidgeClassifier","e2cda0d4":"### boxplot","f8db6a41":"## Normalizing","d7e47982":"## Ensemble","91048ad4":"### Random forrest","35125644":"### CSV File","f05dc3b1":"### histogram","84667155":"# some of the most needed code snippets \nI'm will put some usefull and most repetitive code snippets in this notebook.<br>\nfeel free to fork this notebook and complete it:)","0068e5b8":"### Label Encoder","e5524755":"<font color='red'>Note: if your feature is 1-D array you shall use reshape(1,-1) before using it with imputer<\/font>","7dd256d4":"# Visualization","be0a0771":"### opening Image Files from Zip\n\nnot recommended for large image datasets","fb20c59f":"### bar chart\nfor label y","4fd6fb88":"## Train-Test Split","80bf3693":"### Extracting Zip file","31d679ca":"# Reading Dataset","5c3d604e":"### GradientBoosting","d347aaab":"# create submission csv","ca2cbe14":"## Decision Tree","8d04e8d8":"### One Hot Encoder","86e9827e":"# Preprocessing","70d69635":"# Baseline Models","7c7ef272":"### pie chart","3ed85f12":"<font color='red'>you can skip this part of the notebook. it's only for creating some dummy data<\/font>","56c0407b":"### AdaBoost","892a85e5":"### SGDClassifier","1a9a7677":"### MinMax","326310c2":"## Linear Models","365e2950":"## Handling <font color='blue'> Nan<\/font> Vaules"}}