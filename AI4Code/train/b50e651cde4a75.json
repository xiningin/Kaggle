{"cell_type":{"0b23179a":"code","75b8730d":"code","60ec95fc":"code","6625a744":"code","d25e38b7":"code","2479e7c1":"code","e69e54d3":"code","285f1670":"code","326e7f88":"code","28c03f77":"code","12e94c07":"code","aebc6a97":"code","2b9f488a":"code","84c80be3":"code","878e2c25":"code","c34b92cb":"code","bcd8fcc5":"code","f21707e2":"code","000305a6":"code","a7213007":"markdown","b1dc7177":"markdown","62a4bdf7":"markdown","c06ace63":"markdown","5d8aa5eb":"markdown","4b82b1f0":"markdown","e47dbc33":"markdown"},"source":{"0b23179a":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","75b8730d":"import pandas as pd","60ec95fc":"X_train.shape, X_test.shape","6625a744":"pd.set_option(\"display.max_columns\", 100)\ndisplay(X_train.head(3))\ndisplay(X_test.head(3))","d25e38b7":"y_train['SalePrice'].hist()","2479e7c1":"y_test['SalePrice'].hist()","e69e54d3":"X_train.isnull().sum().sort_values(ascending=False)[:20]","285f1670":"X_test.isnull().sum().sort_values(ascending=False)[:20]","326e7f88":"X_train.info()","28c03f77":"X_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']","12e94c07":"from sklearn.impute import SimpleImputer\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)","aebc6a97":"from sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=2022)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","2b9f488a":"from xgboost import XGBRegressor\n\nmodel = XGBRegressor()\nmodel.fit(X_tr, y_tr, verbose=False)\npred = model.predict(X_val)","84c80be3":"from sklearn.metrics import mean_squared_error\n\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","878e2c25":"X_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nidx1 = y_train['SalePrice'].quantile(0.005)>y_train['SalePrice']\nidx2 = y_train['SalePrice'].quantile(0.995)<y_train['SalePrice']\n\ny_train = y_train[~(idx1 + idx2)]\nX_train = X_train[~(idx1 + idx2)]\n\nX_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=20222)\n\nmodel = XGBRegressor()\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","c34b92cb":"X_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nidx1 = y_train['SalePrice'].quantile(0.005)>y_train['SalePrice']\nidx2 = y_train['SalePrice'].quantile(0.995)<y_train['SalePrice']\n\ny_train = y_train[~(idx1 + idx2)]\nX_train = X_train[~(idx1 + idx2)]\n\nX_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=20222)\n\nmodel = XGBRegressor(n_estimators=100, max_depth=4, colsample_bytree=0.9)\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","bcd8fcc5":"pred = model.predict(X_test)\noutput = pd.DataFrame({'Id': y_test['Id'], 'SalePrice': pred})\noutput.head()","f21707e2":"output.to_csv(\"000000.csv\", index=False)","000305a6":"pred = model.predict(X_test)\nprint(\"RMSLE : \" + str(rmsle(y_test['SalePrice'], pred)))","a7213007":"## Simple Tuning","b1dc7177":"# Preprocessing","62a4bdf7":"# \uacb0\uacfc \ucc44\uc810","c06ace63":"# Data Load & Simple EDA","5d8aa5eb":"# Model","4b82b1f0":"# Predict & to CSV","e47dbc33":"# Simple Preprocessing"}}