{"cell_type":{"7f798265":"code","51ab095c":"code","e86cbc86":"code","c292b9b0":"code","3bba022b":"code","65b55f9d":"code","6cf187cf":"code","04695659":"code","d230ea22":"code","3a1739fe":"code","e64fd329":"code","92547c7f":"code","b9cd4e6e":"code","f98a78b2":"markdown","93416ca3":"markdown","f0f43b3e":"markdown","8b3ea7da":"markdown","af2d2d2c":"markdown","7f90ebf4":"markdown","adc6c06f":"markdown","a5b1f9a3":"markdown","31b2ffb5":"markdown","a9f0e658":"markdown","d8ba7d4e":"markdown","90454d59":"markdown","a451e661":"markdown","8cd48b0f":"markdown","b807ab4f":"markdown","445f9344":"markdown","1d7c510d":"markdown","23013e05":"markdown","b2f78d2a":"markdown","cf7c19d8":"markdown","381dd396":"markdown","6c214230":"markdown","f37a2a83":"markdown","1d4c1b22":"markdown"},"source":{"7f798265":"!pip install https:\/\/github.com\/andreasvc\/readability\/tarball\/master","51ab095c":"from collections import Counter, defaultdict\nfrom pathlib import Path\nfrom statistics import mean\nimport csv\nimport hashlib\nimport re\n\nfrom more_itertools import flatten\nfrom nltk import word_tokenize\nfrom toolz.itertoolz import partition, sliding_window\nimport doctest\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport nltk\nimport numpy as np\nimport pandas as pd\nimport readability\nimport seaborn as sns\n\n\nnltk.download('punkt')","e86cbc86":"csv_path = 'structured_bulletins.csv'","c292b9b0":"# http:\/\/www.act.org\/content\/act\/en\/research\/reports\/act-publications\/college-choice-report-class-of-2013\/college-majors-and-occupational-choices\/college-majors-and-occupational-choices.html\nLIST_OF_MAJORS = [\n 'architecture',\n 'area studies',\n 'art',\n 'art education',\n 'art history',\n 'asian area studies',\n 'asian languages & literatures',\n 'astronomy',\n 'athletic training',\n 'atmospheric sciences & meteorology',\n 'autobody repair\/technology',\n 'automotive engineering technology',\n 'automotive mechanics\/technology',\n 'aviation & airway science',\n 'aviation management & operations',\n 'avionics technology',\n 'banking & financial support services',\n 'bible studies',\n 'biblical studies',\n 'biochemistry & biophysics',\n 'bioengineering ',\n 'biology',\n 'biomedical engineering',\n 'biomedical engineering technologies',\n 'broadcast',\n 'building technology',\n 'business administration & management',\n 'business economics',\n 'business education',\n 'business quantitative methods',\n 'cad technology',\n 'career & technical education',\n 'carpentry',\n 'cell biology',\n 'cellular biology',\n 'chemical engineering',\n 'chemistry',\n 'chicano studies',\n 'child care services management',\n 'child development',\n 'chiropractic (pre-chiropractic)',\n 'cinema ',\n 'cinematography production',\n 'city planning',\n 'civil engineering',\n 'civil engineering technology',\n 'classical languages & literatures',\n 'clinical & counseling',\n 'clinical assisting',\n 'communication disorder services (e.g.',\n 'communications',\n 'communications technology',\n 'community organization & advocacy',\n 'comparative literature',\n 'computer & information sciences',\n 'computer engineering',\n 'computer engineering technology',\n 'computer networking\/telecommunications',\n 'computer science & programming',\n 'computer software & media applications',\n 'computer system administration',\n 'construction engineering\/management',\n 'construction technology',\n 'construction trades (e.g.',\n 'consumer & family economics',\n 'contracts management',\n 'corrections',\n 'cosmetology ',\n 'counseling & student services',\n 'court reporting',\n 'creative writing',\n 'criminal justice',\n 'criminology',\n 'criticism & conservation',\n 'culinary arts\/chef training',\n 'curriculum & instruction',\n 'dance',\n 'data management technology',\n 'dental assisting',\n 'dental hygiene',\n 'dentistry (pre-dentistry)',\n 'design & visual communications',\n 'diesel mechanics\/technology',\n 'digital communications\/media',\n 'divinity ',\n 'drafting technology',\n 'drug abuse counseling',\n 'early childhood education',\n 'ecology',\n 'economics',\n 'educational administration',\n 'electrical',\n 'electrical',\n 'electrical equip installation & repair',\n 'electrical)',\n 'electromechanical engineering technologies',\n 'electronics & communications engineering',\n 'electronics engineering technologies',\n 'electronics equip installation & repair',\n 'elementary education',\n 'emergency medical technology',\n 'engineering (pre-engineering)',\n 'engineering technology',\n 'english arts education',\n 'english language & literature',\n 'english literature',\n 'english-as-a-second-language education',\n 'environmental control technologies',\n 'environmental health engineering',\n 'environmental science',\n 'ethnic & minority studies',\n 'european area studies',\n 'exercise science\/physiology\/kinesiology',\n 'facilities administration',\n 'family & consumer sciences',\n 'fashion design',\n 'fashion merchandising',\n 'film ',\n 'film production',\n 'finance',\n 'financial planning & services',\n 'fine arts',\n 'fire protection & safety technology',\n 'food & nutrition',\n 'food sciences & technology',\n 'food services management',\n 'foreign languages education',\n 'foreign languages\/literatures',\n 'forestry',\n 'french language & literature',\n 'funeral services & mortuary science',\n 'general',\n 'genetics',\n 'geography',\n 'geological & earth sciences',\n 'german language & literature',\n 'graphic & printing equipment operation',\n 'graphic design',\n 'ground',\n 'hairstyling ',\n 'health & physical education\/fitness',\n 'health education',\n 'health services administration',\n 'health technology',\n 'health-related professions & services',\n 'heating cond\/refrig install\/repair',\n 'history',\n 'horticulture operations & management',\n 'horticulture science',\n 'hospital administration',\n 'hotel management',\n 'human resources development\/training',\n 'human resources management',\n 'industrial design',\n 'industrial engineering',\n 'industrial production technologies',\n 'industrial relations',\n 'information science',\n 'insurance & risk management',\n 'interdisciplinary studies',\n 'interior architecture',\n 'interior design',\n 'international business management',\n 'international relations & affairs',\n 'investments & securities',\n 'journalism',\n 'journalism',\n 'junior high\/middle school education',\n 'labor relations',\n 'landscape architecture',\n 'language arts education',\n 'latin american area studies',\n 'latino studies',\n 'law (pre-law)',\n 'law enforcement',\n 'legal administrative assisting\/secretarial',\n 'legal assistant',\n 'legal studies',\n 'leisure facilities management',\n 'liberal arts & general studies',\n 'library science',\n 'linguistics',\n 'logistics & materials management',\n 'machine tool technology',\n 'management information systems',\n 'management quantitative methods',\n 'managerial economics',\n 'marine biology',\n 'marketing management & research',\n 'mass communications',\n 'massage therapy',\n 'mathematics',\n 'mathematics education',\n 'mechanical drafting\/cad technology',\n 'mechanical engineering',\n 'mechanical engineering technology',\n 'mechanics & repairers',\n 'medical assisting',\n 'medical assisting',\n 'medical laboratory technology',\n 'medical office\/secretarial',\n 'medical radiologic technology',\n 'medical records',\n 'medical technology',\n 'medicine (pre-medicine)',\n 'mental health counseling',\n 'mental health technician',\n 'merchandising',\n 'microbiology & immunology',\n 'middle eastern languages & literatures',\n 'middle eastern)',\n 'military technologies',\n 'ministry ',\n 'motel management',\n 'multi studies',\n 'multimedia effects',\n 'music',\n 'music',\n 'music',\n 'music education',\n 'natural resources conservation',\n 'natural resources management',\n 'north american area studies',\n 'nuclear engineering',\n 'nuclear medicine technology',\n 'nursing',\n 'nursing',\n 'occupational therapy',\n 'occupational therapy assisting',\n 'office supervision & management',\n 'operations management & supervision',\n 'optometry (pre-optometry)',\n 'organizational behavior',\n 'osteopathic medicine',\n 'paralegal assistant',\n 'parks',\n 'parks facilities management',\n 'performance',\n 'personal services',\n 'pharmacy (pre-pharmacy)',\n 'philosophy',\n 'photography',\n 'physical education & coaching',\n 'physical sciences',\n 'physical therapy (pre-physical therapy)',\n 'physical therapy assisting',\n 'physician assisting',\n 'physics',\n 'plumbing',\n 'political science & government',\n 'postsecondary education',\n 'practical (lpn)',\n 'precision production trades',\n 'print',\n 'procurement management',\n 'protective services',\n 'psychiatric health technician',\n 'psychology',\n 'psychology',\n 'public administration',\n 'public administration & services',\n 'public affairs & public policy analysis',\n 'public health',\n 'public relations & organizational communication',\n 'public speaking',\n 'purchasing management',\n 'quality control & safety technologies',\n 'radio & television broadcasting',\n 'radio & television broadcasting technology',\n 'real estate',\n 'rec facilities management',\n 'recreation',\n 'regional planning',\n 'registered (bs\/rn)',\n 'rehabilitation therapy',\n 'religion',\n 'religious education',\n 'respiratory therapy technology',\n 'restaurant services management',\n 'sales',\n 'science education',\n 'secondary education',\n 'secretarial studies & office administration',\n 'small business management\/operations',\n 'social sciences',\n 'social studies\/sciences education',\n 'social work',\n 'sociology',\n 'spanish language & literature',\n 'special education',\n 'special effects',\n 'speech pathology)',\n 'sport & fitness administration\/management',\n 'statistics',\n 'studio arts',\n 'subject-specific',\n 'surgical technology',\n 'surveying technology',\n 'teacher assisting\/aide education',\n 'teacher education',\n 'teacher education',\n 'textile & apparel',\n 'theatre arts\/drama',\n 'theology',\n 'theory & composition',\n 'therapy & rehabilitation',\n 'tourism & travel marketing',\n 'tourism management',\n 'transportation & materials moving (e.g.',\n 'travel management',\n 'urban planning',\n 'urban studies\/urban affairs',\n 'veterinarian assisting\/technology',\n 'veterinary medicine (pre-veterinarian)',\n 'vide production',\n 'vocational (lpn)',\n 'vocational rehabilitation counseling',\n 'webpage design',\n 'welding technology',\n 'wildlife & wildlands management',\n 'women\u2019s studies',\n 'zoology']","3bba022b":"FOLDER_JOB_BULLETINS = Path(\"..\/input\/data-science-for-good-city-of-los-angeles\/cityofla\/CityofLA\/Job Bulletins\")\nREGEXES = {'ANNUAL SALARY': re.compile('ANNUAL ?SALARY'),\n           'DUTIES': re.compile('DUTIES'),\n           'REQS': re.compile('((REQUIREMENTS?)|(\/MINIMUM QUALIFICATIONS))+'),\n           'WHERE TO APPLY': re.compile('(HOW|WHERE) TO APPLY'),\n           'APPLICATION DEADLINE': re.compile('APPLICATION DEADLINE'),\n           'SELECTION PROCESS': re.compile('SELEL?CTION PROCE(SS|DURE)'),\n          }\nwritten_num_to_int = {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, \n                      'six': 6, 'seven': 7, 'eight': 8, 'nine': 9, 'ten': 10,\n                      'eleven': 11, 'twelve': 12}\ntime_length_as_year_fraction = {'day': 1\/365, 'week': 1\/52, 'month': 1\/12, 'year': 1}\n\nEDUCATION_OPTIONS = ['COLLEGE OR UNIVERSITY', 'HIGH SCHOOL', 'APPRENTICESHIP']\nEMPLOYMENT_OPTIONS = ['full-time', 'part-time']\n\n\ndef get_salaries(salary):\n    \"\"\"\n    Salaries having a range, i.e. $100.000 to $200.000:\n    >>> salary = \"\\\\n$64,665 to $94,502 and $83,373 to $121,897\\\\n\\\\nNOTES:\\\\n\\\\n1. Candidates from the eligible list are normally appointed to vacancies in the lower pay grade positions.\\\\n2. The current salary range is subject to change. You may confirm the starting salary with the hiring department before accepting a job offer.\\\\n\"\n    >>> get_salaries(salary)\n    '$64,665 - $94,502'\n\n    Salaries without a range, i.e. $100.000:\n    >>> salary = '$82,350 (flat-rated) '\n    >>> get_salaries(salary)\n    '$82,350 (flat-rated)'\n    \"\"\"\n    if not isinstance(salary, str):\n        return np.NaN\n    salaries = []\n    raw_salaries = re.findall('\\$ *[0-9]{1,3},[0-9]{3} \\(flat-rated\\)', salary)\n    if len(raw_salaries) == 1:\n        return raw_salaries[0]\n    for salary_from, salary_to in list(partition(2, re.findall('\\$ *[0-9]{1,3},[0-9]{3}', salary))):\n        salaries.append(f'{salary_from.replace(\" \", \"\")} - {salary_to.replace(\" \", \"\")}')\n    return np.NaN if len(salaries) == 0 else salaries[0]\n\n\ndef get_working_hours(requirements):\n    \"\"\"\n\n    Only full-time option:\n    >>> requirements = '\\\\nOne year of full-time paid experience with the City of Los Angeles as a Port Police Lieutenant or in a class at that level providing necessary law enforcement, safety, and police services.\\\\n'\n    >>> get_working_hours(requirements)\n    'full-time'\n\n    Full-time and part-time option:\n    >>> requirements = 'Graduation from an accredited four-year college or university with a major in a natural science or education, and one year of full-time or two years of part-time paid or volunteer out of classroom (informal) or in classroom (formal) teaching experience which includes marine or life science in the curriculum;'\n    >>> get_working_hours(requirements)\n    'full-time\/part-time'\n    \"\"\"\n    employment = [x for x in EMPLOYMENT_OPTIONS if x in requirements]\n    return np.NaN if len(employment) == 0 else '\/'.join(employment)\n\ndef get_education(requirements):\n    \"\"\"\n    College or university:\n    >>> requirements = '1. Two years of full-time paid professional experience as a Principal Public Relations Representative or in a class at that level with responsibility for public relations program management and development with the City of Los Angeles; or 2. Graduation from an accredited four-year college or university with a degree in journalism, English, public relations, or communications and two years of full-time paid professional experience in supervising a public relations staff responsible for a comprehensive public information program; or 3.Graduation from an accredited four-year college or university and four years of full-time paid professional experience in public relations managing a comprehensive public information program.'\n    >>> get_education(requirements)\n    'COLLEGE OR UNIVERSITY'\n\n    High school, as the lower of the two \"high school\" and \"college\":\n    >>> requirements = 'One year of high school or college level algebra'\n    >>> get_education(requirements)\n    'HIGH SCHOOL'\n    \"\"\"\n\n    education_reqs = [x for x in EDUCATION_OPTIONS if x in requirements.upper()]\n    return np.NaN if len(education_reqs) == 0 else '\/'.join(education_reqs)\n\n\ndef convert_education_duration_to_num(duration):\n    \"\"\"\n    >>> duration = ('two', 'year')\n    >>> convert_education_duration_to_num(duration)\n    2\n    >>> duration = ('six', 'month')\n    >>> convert_education_duration_to_num(duration)\n    0.5\n    >>> duration = ('five', 'day')\n    >>> round(convert_education_duration_to_num(duration), 3)\n    0.014\n    \"\"\"\n    num = written_num_to_int[duration[0]]\n    frac_of_year = time_length_as_year_fraction[duration[1]]\n    return num * frac_of_year\n\n\ndef extract_education_times(in_str):\n    \"\"\"\n    >>> in_str = '1. Graduation from an accredited four-year college or university with a major in Computer Science, Information Systems, or Geographical Information Systems; or'\n    >>> extract_education_times(in_str)\n    [('four', 'year')]\n    \n    >>> in_str = '3. Two years of full-time paid experience as a Systems Aide with the City of Los Angeles; and'\n    >>> extract_education_times(in_str)\n    [('two', 'year')]\n    \n    >>> in_str = '2. Graduation from an accredited four-year college or university and two years of full-time paid experience in a class at the level of Management Assistant which provides experience in:'\n    >>> extract_education_times(in_str)\n    [('four', 'year'), ('two', 'year')]\n    \n    \"\"\"\n    return re.findall('(one|two|three|four|five|six|seven|eight|nine)[- ]+(year|month|week|week|day)', in_str.lower())\n\n\ndef get_education_years(in_str):\n    \"\"\"\n    >>> in_str = '1. Graduation from an accredited four-year college or university with a major in Computer Science, Information Systems, or Geographical Information Systems; or'\n    >>> get_education_years(in_str)\n    4\n    >>> in_str = '2. Graduation from an accredited six-month college or university and two years of full-time paid experience in a class at the level of Management Assistant which provides experience in:'\n    >>> get_education_years(in_str)\n    2.5\n    \"\"\"\n    if in_str is np.NaN:\n        return in_str\n    years = extract_education_times(in_str)\n    if not years:\n        return np.NaN\n    years = [convert_education_duration_to_num(el) for el in years]\n    years = sum(years)\n    return years\n\n\ndef get_drivers_license_info(requirements):\n    \"\"\"\n    Driver's license is required:\n    >>> requirements = \"A valid California driver's license is required. Applicants will be disqualified and not eligible for hire if their record within the last 36 months reflects three or more moving violations and\/or at-fault accidents, or conviction of a major moving violation (such as DUI).\"\n    >>> get_drivers_license_info(requirements)\n    'R'\n    \n    Driver's license may be required:\n    >>> requirements = \"Some positions may require a valid California driver's license. Candidates may not be eligible for appointment to these positions if their record within the last 36 months reflects three or more moving violations and\/or at-fault accidents, or a conviction of a major moving violation (such as DUI).\"\n    >>> get_drivers_license_info(requirements)\n    'P'\n    \"\"\"\n    if \"driver's license is required\" in requirements:\n        return 'R'\n    if \"may require a valid California driver's license\" in requirements:\n        return 'P'\n    return np.NaN\n\n\ndef get_drivers_license_class(reqs):\n    \"\"\"\n    \n    Driver's license class B:\n    >>> reqs = \"A valid California Class B driver's license may be required prior to appointment.\"\n    >>> get_drivers_license_class(reqs)\n    'B'\n    \n    >>> reqs = 'A valid California Class \"B\" commercial driver\\\\'s license with ...'\n    >>> get_drivers_license_class(reqs)\n    'B'\n    \n    Class A or B:\n    >>> reqs = \"Some positions may require a valid California Class A or B driver's license\"\n    >>> get_drivers_license_class(reqs)\n    'A, B'\n    \n    Class B or C:\n    >>> reqs = \"Some positions may require a valid California Class C or B driver's license prior to appointment.\"\n    >>> get_drivers_license_class(reqs)\n    'B, C'\n    \n    Class C:\n    >>> reqs = \"Some positions may require a valid California Class C driver's license;\"\n    >>> get_drivers_license_class(reqs)\n    'C'\n    \n    >>> reqs = \"Some positions may require a valid California Class B (or A) driver's license\"\n    >>> get_drivers_license_class(reqs)\n    'A, B'\n    \"\"\"\n    license_classes = {'Class A': 'A', 'Class B': 'B', 'Class C': 'C',\n                       'Class \"A\"': 'A', 'Class \"B\"': 'B', 'Class \"C\"': 'C'}\n    \n    if not \"driver's license\" in reqs:\n        return np.NaN\n    \n    licenses = set()\n    licenses.update([abbrv for lic_class, abbrv in license_classes.items() if lic_class in reqs])\n    \n    m = re.findall(\"(?<=Class [A|B|C] \\(or )[A|B|C]\", reqs)\n    if len(m) > 0:\n        licenses.update(m[0])\n        \n    m = re.findall(\"(?<=Class [A|B|C] or )[A|B|C]\", reqs)\n    if len(m) > 0:\n        licenses.update(m[0])\n    \n    return ', '.join(sorted(licenses))\n\n\ndef get_dwp_salary(salary):\n    \"\"\"\n    \n    >>> salary = \"The salary in the Department of Water and Power is $93,542 (flat-rated)\"\n    >>> get_dwp_salary(salary)\n    '$93,542 (flat-rated)'\n    \n    >>> salary = \"The salary range for positions in the Department of Water and Power is $72,328 to $89,864\"\n    >>> get_dwp_salary(salary)\n    '$72,328 - $89,864'\n    \n    >>> salary = \"The salary in the Department of Water and Power is $70,908 to $88,092 and $83,770 to $104,065.\"\n    >>> get_dwp_salary(salary)\n    '$70,908 - $88,092'\n    \"\"\"\n    if not isinstance(salary, str):\n        return np.NaN\n    \n    m = re.search(\"(?<=The salary in the Department of Water and Power is ){1}\\$[0-9]{1,3},[0-9]{3} \\(flat-rated\\)\", salary)\n    if m:\n        return m[0]\n    \n    m = re.search(\"(?<=Department of Water and Power is ){1}\\$[0-9]{1,3},[0-9]{3} to \\$[0-9]{1,3},[0-9]{3}\", salary)\n    if m:\n        return ' - '.join(m[0].split(\" to \"))\n    \n    return np.NaN\n\n\ndef get_additional_licenses(reqs):\n    \"\"\"\n    \n    Medical certificate (WELDER 3796 102816.txt)\n    >>> reqs = \"Some positions may require a valid California Class C driver's license; or a valid Class B driver's license and valid medical certificate approved by the State of California Department of Motor Vehicles, prior to appointment.\"\n    >>> get_additional_licenses(reqs)\n    'Medical Certificate'\n    \n    Medical certificate (WATER UTILITY WORKER 3912 120817.txt)\n    >>> reqs = \"Some positions may require a valid California Class B (or A) driver's license and valid medical certificate approved by the State of California Department of Motor Vehicles prior to appointment.\"\n    >>> get_additional_licenses(reqs)\n    'Medical Certificate'\n    \n    \"\"\"\n    if 'medical certificate' in reqs:\n        return 'Medical Certificate'\n    return np.NaN\n\n\ndef get_exam_type(in_str):\n    \"\"\"\n    OPEN, INT_DEPT_PROM, DEPT_PROM, OPEN_INT_PROM\n    \n    Open only:\n    >>> in_str = \"ONLY ON AN OPEN COMPETITIVE BASIS\"\n    >>> get_exam_type(in_str)\n    'OPEN'\n    \n    Interdepartmental only:\n    >>> in_str = r\"THIS EXAMINATION IS TO BE GIVEN ONLY\\tON AN INTERDEPARTMENTAL PROMOTIONAL BASIS\"\n    >>> get_exam_type(in_str)\n    'INT_DEPT_PROM'\n    \n    Departmental only:\n    >>> in_str = \"ONLY ON A DEPARTMENTAL PROMOTIONAL BASIS\"\n    >>> get_exam_type(in_str)\n    'DEPT_PROM'\n    \n    Open and interdepartmental:\n    >>> in_str = \"INTERDEPARTMENTAL PROMOTIONAL AND AN OPEN COMPETITIVE BASIS\"\n    >>> get_exam_type(in_str)\n    'OPEN_INT_PROM'\n    \"\"\"\n    if pd.isna(in_str):\n        return np.NaN\n    \n    m = re.search(\"ONLY\\s*ON\\s*AN\\s*OPEN\\s*COMPETITIVE\\s*BASIS\", in_str)\n    if m:\n        return 'OPEN'\n    \n    m = re.search(\"THIS\\s*EXAMINATION\\s*IS\\s*TO\\s*BE\\s*GIVEN\\s*ONLY\\s*ON\\s*AN\\s*INTERDEPARTMENTAL\\s*PROMOTIONAL\\s*BASIS\", in_str)\n    if m:\n        return 'INT_DEPT_PROM'\n    \n    m = re.search(\"ONLY\\s*ON\\s*A\\s*DEPARTMENTAL\\s*PROMOTIONAL\\s*BASIS\", in_str)\n    if m:\n        return 'DEPT_PROM'\n    m = re.search(\"INTERDEPARTMENTAL\\s*PROMOTIONAL\\s*AND\\s*AN\\s*OPEN\\s*COMPETITIVE\\s*BASIS\", in_str)\n    if m:\n        return 'OPEN_INT_PROM'\n    return np.NaN\n\n\ndef extract_header(header):\n    items = [item for item in header.split('\\n')]\n    items = [item.strip() for item in items]\n    items = [item.split(':') for item in items if ':' in item]\n    return {item[0]: item[1] for item in items}\n\n\ndef get_class_code(header):\n    return extract_header(header).get('Class Code', np.NaN)\n\n\ndef get_open_date(header):\n    return extract_header(header).get('Open Date', np.NaN)\n\n\n# Find sections\n\ndef get_text_before_next_section(text):\n    m = re.search('\\s+([A-Z]{3,})+', text, re.DOTALL)\n    start = m.start() if m else len(text)\n    return text[:start]\n#     return text[:re.search('\\s+([A-Z]{3,})+', text, re.DOTALL).start()]\n\n\ndef find_sections(req):\n    \"\"\"\n    >>> paragraph = '1. foo\\\\n2. bar'\n    >>> [el.group() for el in find_sections(paragraph)]\n    ['1. foo', '2. bar']\n    \"\"\"\n    return re.finditer('[0-9]\\..*', req)\n\n\n# Find subsections\ndef find_subsections(req):\n    \"\"\"\n    >>> paragraph = 'a. foo\\\\nb. bar'\n    >>> [el.group() for el in find_subsections(paragraph)]\n    ['a. foo', 'b. bar']\n    \"\"\"\n    return re.finditer('[a-z]\\..*', req)\n\n\ndef get_subsections_within_span(subsections, start, end):\n    \"\"\"\n    \"\"\"\n    subsections_within_span = []\n\n    for subsection in subsections:\n        if subsection.start() > start and subsection.end() < end:\n            subsections_within_span.append(subsection)\n            \n    return subsections_within_span\n\n\ndef get_requirement_set_id(in_str):\n    \"\"\"\n    >>> in_str = '1. Graduation from an accredited four-year college or university with a major in Computer Science, Information Systems, or Geographical Information Systems; or'\n    >>> get_requirement_set_id(in_str)\n    '1'\n    \"\"\"\n    m = re.search('(^[0-9](?=\\.))', in_str)\n    return m.group() if m else np.NaN\n\n\ndef get_requirement_set_description(in_str):\n    \"\"\"\n    >>> in_str = '1. Graduation from an accredited four-year college or university with a major in Computer Science, Information Systems, or Geographical Information Systems; or'\n    >>> get_requirement_set_description(in_str)\n    'Graduation from an accredited four-year college or university with a major in Computer Science, Information Systems, or Geographical Information Systems; or'\n    \"\"\"\n    m = re.search('(?<=^[0-9]\\. ).*', in_str)\n    return m.group() if m else np.NaN\n\n\ndef get_requirement_subset_id(in_str):\n    \"\"\"\n    >>> in_str = 'a. the development, analysis, implementation or major modification of new or existing computer-based information systems or relational databases; or'\n    >>> get_requirement_subset_id(in_str)\n    'a'\n    \n    # >>> in_str = '(a)\tSuccessful completion of the Animal Keeper Training program conducted by the Los Angeles Zoo; or '\n    # >>> get_requirement_subset_id(in_str)\n    \"\"\"\n    m = re.search('(^[a-z](?=\\.))', in_str)\n    return m.group() if m else np.NaN\n\n\ndef get_requirement_subset_description(in_str):\n    \"\"\"\n    >>> in_str = 'a. the development, analysis, implementation or major modification of new or existing computer-based information systems or relational databases; or'\n    >>> get_requirement_subset_description(in_str)\n    'the development, analysis, implementation or major modification of new or existing computer-based information systems or relational databases; or'\n    \"\"\"\n    m = re.search('(?<=^[a-z]\\. ).*', in_str)\n    return m.group() if m else np.NaN\n\n\ndef subsection_struct(subsections, start, end):\n    bary = {}\n    subsections_within = get_subsections_within_span(subsections, start, end)\n    for el in subsections_within:\n        bary[get_requirement_subset_id(el.group())] = get_requirement_subset_description(el.group())\n    return bary\n\n\ndef subsections_to_df(req, header):\n    req = get_text_before_next_section(req)\n    sections = list(find_sections(req))\n    if len(sections) == 0:\n        return np.NaN\n    subsections = list(find_subsections(req))\n\n    fooy = defaultdict(dict)\n\n    for head, tail in sliding_window(2, sections):\n        set_id = get_requirement_set_id(head.group())\n        fooy[set_id]['desc'] = get_requirement_set_description(head.group())\n        fooy[set_id]['subsections'] = subsection_struct(subsections, head.end(), tail.start())\n\n\n    last_section = sections[-1]\n    set_id = get_requirement_set_id(last_section.group())\n    fooy[set_id]['desc'] = get_requirement_set_description(last_section.group())\n    fooy[set_id]['subsections'] = subsection_struct(subsections, last_section.end(), len(req) + 1)\n    \n    l = []\n\n    for set_id in fooy.keys():\n        if len(fooy[set_id]['subsections'].items()) == 0:\n            l.append([header, set_id, np.NaN, np.NaN, fooy[set_id]['desc']])\n        else:\n            for el, foo in fooy[set_id]['subsections'].items():\n                l.append([header, set_id, el, foo, fooy[set_id]['desc']])\n\n    df = pd.DataFrame(l, columns=['JOB_CLASS_TITLE', 'REQUIREMENT_SET_ID', 'REQUIREMENT_SUBSET_ID', 'MISC_COURSE_DETAILS', 'REQ_OVERALL_DETAILS'])\n    return df\n\n\ndef get_job_class_title(header):\n    return re.split('\\n|\\t', header)[0]\n\n\ndef get_raw_fnames(fpaths):\n    fnames = [x.name for x in fpaths]\n    return fnames\n\n\ndef files_have_equal_content(fpath_orig, fpath_changed):\n    hex_orig = get_hexdigest_of_fcontent(fpath_orig)\n    hex_changed = get_hexdigest_of_fcontent(fpath_changed)\n    return hex_orig == hex_changed\n\n\ndef output_is_equal_to_orig():\n    print(files_have_equal_content('df_orig.csv', 'df_updated.csv'))\n    print(files_have_equal_content('df_merged_orig.csv', 'df_merged_updated.csv'))\n    \n\ndef get_education_major(in_str, list_of_majors):\n    m = re.search('major in .*', in_str)\n    if not m:\n        return np.NaN\n    in_str = in_str[m.start():m.end()]\n    in_str.lower()\n    majors = [major for major in list_of_majors if major in in_str]\n    reiter = re.finditer('([A-Z][a-z]+)( [A-Z][a-z]+)*', in_str)\n    reiter = [el.group() for el in reiter if el.group() not in ['Education Section', 'Education Department', 'Candidates', 'Personnel Department', 'City', 'City Application', 'Applicants']]\n    majors.extend(reiter)\n    majors = '|'.join([el.capitalize() for el in majors])\n    return majors\n\n\ndef get_list_of_majors():\n    list_of_majors = csv.reader(open('..\/input\/list-of-majors\/list_of_majors.csv'))\n    list_of_majors = [line for line in list_of_majors if len(line) > 0]\n    list_of_majors = [line for line in list_of_majors if not line[0].startswith('#')]\n    list_of_majors = [el.strip() for el in flatten(list_of_majors)]\n    list_of_majors = [el.strip('*') for el in list_of_majors]\n    list_of_majors = [el.strip('&') for el in list_of_majors]\n    list_of_majors = list(flatten([split_majors(el) for el in list_of_majors]))\n    list_of_majors = [el.lower() for el in list_of_majors]\n    return sorted(list_of_majors)\n\n\ndef split_majors(in_str):\n    \n    \"\"\"\n    No option:\n    >>> in_str = 'Accounting Technician'\n    >>> split_majors(in_str)\n    ['Accounting Technician']\n    \n    Two options:\n    >>> in_str = 'Labor\/Industrial Relations'\n    >>> split_majors(in_str)\n    ['Labor Relations', 'Industrial Relations']\n    \n    Three options:\n    >>> in_str = 'Parks\/Rec\/Leisure Facilities Management'\n    >>> split_majors(in_str)\n    ['Parks Facilities Management', 'Rec Facilities Management', 'Leisure Facilities Management']\n    \n    Other patterns could also be handled somewhat easily, but were not because of time constraints. Examples:\n    'Adult Development & Aging\/Gerontology', 'Wildlife & Wildlands Management',\n    'Architectural Drafting\/CAD Technology', 'Diesel Mechanics\/Technology',\n    'Exercise Science\/Physiology\/Kinesiology', 'Physical Therapy (Pre-Physical Therapy)',\n    \n    Some more cleanup would have been good too:\n    'Communication Disorder Services (e.g.', 'Speech Pathology)'\n    \"\"\"\n    options = re.match('\\w+\/\\w+(\/\\w+)*', in_str)\n    if not options:\n        return [in_str]\n    options = options.group(0)\n    in_str = in_str.replace(options, '')\n    in_str = in_str.strip()\n    options = options.split('\/')\n    options = [f'{option} {in_str}' for option in options]\n    return options\n    \n\n# === START: SECTION DETECTION\n\n\ndef load_job_bulletin(fpath):\n    try:\n        with open(fpath) as f:\n            return f.read()\n    except:\n        with open(fpath, encoding='iso-8859-1') as f:\n            return f.read()\n        \n\ndef get_fnames(fpaths):\n    fnames = (x.name for x in fpaths)\n    fnames = (x.upper() for x in fnames)\n    fnames = (re.search('[A-Z]*( [A-Z]*)+', x)[0] for x in fnames)\n    fnames = (x.strip() for x in fnames)\n    return fnames\n\n\ndef extract_content(s, fcontent):\n\n    d = {'HEADER': fcontent[:s[0].start()]}\n\n    for i, pair in enumerate(sliding_window(2, s[s.notnull()])):\n        head, tail = pair\n        d[s.index[i]] = fcontent[head.end():tail.start()]\n\n    d[s.index[-1]] = fcontent[tail.end():-1]\n    return d\n\n\ndef extract_section_by_regex(fcontent, fname):\n    matches = {}\n    matches['FNAME'] = [fname]\n    for name, regex in REGEXES.items():\n        matches[name] = regex.search(fcontent)\n    return matches\n\n\ndef get_sections():\n    fpaths = sorted(FOLDER_JOB_BULLETINS.iterdir())\n    fcontents = [load_job_bulletin(fpath) for fpath in fpaths]\n    fnames = list(get_fnames(fpaths))\n\n    dfs = [extract_section_by_regex(fcontent, fname) for fcontent, fname in zip(fcontents, fnames)]\n    dfs = [pd.DataFrame(df) for df in dfs]\n    df_all = pd.concat(dfs)\n\n    rows = [s[1] for s in df_all.iterrows()]\n    rows = [s[s.notnull()] for s in rows]\n    rows = [s[1:] for s in rows]\n    rows = [extract_content(s, f) for s, f in zip(rows, fcontents)]\n    return pd.DataFrame(rows)\n\n\ndef clean_columns(df):\n    ALLOWED_COLUMNS = set(['FILE_NAME', 'JOB_CLASS_TITLE', 'JOB_CLASS_NO', 'REQUIREMENT_SET_ID',\n                           'REQUIREMENT_SUBSET_ID', 'JOB_DUTIES', 'EDUCATION_YEARS', 'SCHOOL_TYPE',\n                           'EDUCATION_MAJOR', 'FULL_TIME_PART_TIME', 'MISC_COURSE_DETAILS',\n                           'DRIVERS_LICENSE_REQ', 'DRIV_LIC_TYPE', 'ADDTL_LIC', 'EXAM_TYPE',\n                           'ENTRY_SALARY_GEN', 'ENTRY_SALARY_DWP', 'OPEN_DATE'])\n    df.drop(columns=set(df.columns).difference(ALLOWED_COLUMNS))\n    return df\n\n\n# === END: SECTION DETECTION\n\n\ndef main(df):\n\n    df['DRIVERS_LICENSE_REQ'] = df['REQS'].apply(get_drivers_license_info)\n    df['DRIV_LIC_TYPE'] = df['REQS'].apply(get_drivers_license_class)\n    df['ENTRY_SALARY_DWP'] = df['ANNUAL SALARY'].apply(get_dwp_salary)\n    df['ADDTL_LIC'] = df['REQS'].apply(get_additional_licenses)\n    df['EXAM_TYPE'] = df['SELECTION PROCESS'].apply(get_exam_type)\n    df['FULL_TIME_PART_TIME'] = df['REQS'].apply(get_working_hours)\n    df['SCHOOL_TYPE'] = df['REQS'].apply(get_education)\n    df['ENTRY_SALARY_GEN'] = df['ANNUAL SALARY'].apply(get_salaries)\n\n    df['JOB_CLASS_NO'] = df['HEADER'].apply(get_class_code)\n    df['OPEN_DATE'] = df['HEADER'].apply(get_open_date)\n    df['FILE_NAME'] = get_raw_fnames(sorted(FOLDER_JOB_BULLETINS.iterdir()))\n    df['JOB_CLASS_TITLE'] = df['HEADER'].apply(get_job_class_title)\n    df['EDUCATION_MAJOR'] = df['REQS'].apply(get_education_major, args=(LIST_OF_MAJORS,))\n\n    headers = df['JOB_CLASS_TITLE']\n    reqs = df['REQS']\n    l_reqs = [subsections_to_df(req, header) for header, req in zip(headers, reqs)]\n    l_reqs = [req for req in l_reqs if not isinstance(req, float)]\n    df_subsections = pd.concat(l_reqs)\n    df_subsections = df_subsections.reset_index()\n    df_subsections[df_subsections['JOB_CLASS_TITLE'] == 'AIR CONDITIONING MECHANIC']\n    df_merged = pd.merge(df, df_subsections, on='JOB_CLASS_TITLE', how='outer')\n    df_merged[df_merged['JOB_CLASS_TITLE'] == 'SYSTEMS ANALYST']\n    df_merged['EDUCATION_YEARS'] = df_merged['REQ_OVERALL_DETAILS'].apply(get_education_years)\n    \n    return df_merged\n\n\ndf = get_sections()\ndf_merged = main(df)\n\n    \n    \ndf_clean = df_merged.drop(columns=['ANNUAL SALARY', 'APPLICATION DEADLINE', 'HEADER', 'REQS', 'SELECTION PROCESS', 'WHERE TO APPLY', 'index', 'REQ_OVERALL_DETAILS'])\ndf_clean.rename(columns={'DUTIES': 'JOB_DUTIES'}, inplace=True)\n\ncolumn_order = ['FILE_NAME', 'JOB_CLASS_TITLE', 'JOB_CLASS_NO', 'REQUIREMENT_SET_ID', 'REQUIREMENT_SUBSET_ID', 'JOB_DUTIES', 'EDUCATION_YEARS', 'SCHOOL_TYPE', 'EDUCATION_MAJOR', 'FULL_TIME_PART_TIME', 'MISC_COURSE_DETAILS', 'DRIVERS_LICENSE_REQ', 'DRIV_LIC_TYPE', 'ADDTL_LIC', 'EXAM_TYPE', 'ENTRY_SALARY_GEN', 'ENTRY_SALARY_DWP', 'OPEN_DATE']\ndf_clean = df_clean[column_order]","65b55f9d":"df_clean.to_csv(csv_path)","6cf187cf":"df_clean","04695659":"# Code for analysis\ndef get_salary(salary):\n    if 'flat-rated' in salary:\n        return int(df_clean['ENTRY_SALARY_GEN'][19].split()[0].replace('$', '').replace(',', ''))\n    min_sal = int(salary.split(' - ')[0].strip('$').replace(',', ''))\n    max_sal = int(salary.split(' - ')[1].strip('$').replace(',', ''))\n    return mean([min_sal, max_sal])\n\n\ndef draw_barchart_education_time_required(df):\n    df['EDUCATION_YEARS'] = df['EDUCATION_YEARS'].fillna(0)\n    s_education_years = df.drop_duplicates('FILE_NAME').groupby('EDUCATION_YEARS')['FILE_NAME'].count()\n    s_education_years.plot.bar(title='Year spent in education')\n\n\ndef make_network_between_salary_and_school_type(df):\n    labels_income = ['inc_very_low', 'inc_low', 'inc_medium', 'inc_high', 'inc_very_high']\n    s_salaries = df['ENTRY_SALARY_GEN'].fillna(\"0 - 0\")\n    df['ENTRY_SALARY_GEN_MEAN'] = s_salaries.apply(get_salary)\n\n    school_types = df.groupby('FILE_NAME')['SCHOOL_TYPE'].last()\n    school_types = school_types.fillna(\"Not available\")\n    \n    # Get salary bins\n    binned_salaries = df.groupby('FILE_NAME')['ENTRY_SALARY_GEN_MEAN'].max()\n    binned_salaries_as_labels = pd.cut(binned_salaries, bins=5, labels=labels_income)\n    binned_salaries_as_intervals = pd.cut(binned_salaries, bins=5)\n    \n    G = nx.MultiGraph()\n\n    G.add_edges_from(zip(binned_salaries_as_labels, school_types))\n\n    node_colors = ['blue' if node in set(school_types) else 'green' for node in G.nodes()]\n    node_sizes = list(dict(G.degree()).values())\n    node_sizes = [k * 5 for k in node_sizes]\n\n    pos = nx.spring_layout(G,k=2.5,iterations=20)\n    nx.draw(G, pos, with_labels=True, node_color=node_colors, node_size=node_sizes)\n    \ndef make_network_between_salary_and_education_years(df):\n    labels_income = ['inc_very_low', 'inc_low', 'inc_medium', 'inc_high', 'inc_very_high']\n    s_salaries = df['ENTRY_SALARY_GEN'].fillna(\"0 - 0\")\n    df['ENTRY_SALARY_GEN_MEAN'] = s_salaries.apply(get_salary)\n    \n    # Get salary bins\n    binned_salaries = df.groupby('FILE_NAME')['ENTRY_SALARY_GEN_MEAN'].max()\n    binned_salaries_as_labels = pd.cut(binned_salaries, bins=5, labels=labels_income)\n    binned_salaries_as_intervals = pd.cut(binned_salaries, bins=5)\n\n    mapping_salary_bins_to_intervals = dict(zip(binned_salaries_as_labels, binned_salaries_as_intervals))\n\n    # Get education bins\n    labels_education = ['edu_very_short', 'edu_short', 'edu_medium', 'edu_long', 'edu_very_long']\n    binned_education = df.groupby('FILE_NAME')['EDUCATION_YEARS'].max()\n    binned_education_as_labels = pd.cut(binned_education, bins=5, labels=labels_education)\n    binned_education_as_intervals = pd.cut(binned_education, bins=5)\n\n    mapping_education_bins_to_intervals = dict(zip(binned_education_as_labels, binned_education_as_intervals))\n\n    G = nx.MultiGraph()\n\n    G.add_edges_from(zip(binned_salaries_as_labels, binned_education_as_labels))\n    \n    node_colors = ['blue' if node in labels_education else 'green' for node in G.nodes()]\n    node_sizes = list(dict(G.degree()).values())\n    node_sizes = [k * 5 for k in node_sizes]\n    \n    pos = nx.spring_layout(G,k=2.5,iterations=20)\n    nx.draw(G, pos, with_labels=True, node_color=node_colors, node_size=node_sizes)\n    \n\nREADING_LEVEL_BY_GRADE = {pd.Interval(left=13, right=float(\"inf\"), closed='left'): 'College and University',\n                          pd.Interval(left=9, right=12, closed='left'): 'High School',\n                          pd.Interval(left=-float(\"inf\"), right=8, closed='left'): 'Other',}\n\n\ndef get_grade_of_reading_level(score):\n    for iv in READING_LEVEL_BY_GRADE.keys():\n        if score in iv:\n            return READING_LEVEL_BY_GRADE[iv]\n        \n\ndef get_required_reading_skills(df):\n    df['SCHOOL_TYPE'] = df['SCHOOL_TYPE'].fillna('Not available')\n    job_duties = df['JOB_DUTIES']\n    job_duties = job_duties.fillna('empty')\n    job_duties.replace(\"\", \"empty\", inplace=True)\n    job_duties = job_duties.apply(word_tokenize)\n    job_duties = job_duties.apply(readability.getmeasures)\n    job_duties = job_duties.apply(lambda x: x['readability grades']['GunningFogIndex'])\n    job_duties = job_duties.apply(get_grade_of_reading_level)\n\n    df['GUNNING_FOG_INDEX'] = job_duties.values\n\n    reading_levels_required = df.groupby(['SCHOOL_TYPE', 'GUNNING_FOG_INDEX']).size()\n    return reading_levels_required\n\n\ndef draw_barchart_for_required_reading_skills(df):\n    reading_levels_required = get_required_reading_skills(df)\n    reading_levels_required.unstack(level=0).T.plot(kind='bar')\n    \n\ndef draw_heatmap_for_required_reading_skills(df):\n    reading_levels_required = get_required_reading_skills(df)\n    df_reading_levels = reading_levels_required.unstack(level=0).T.fillna(0)\n    df_reading_levels = df_reading_levels.astype(int)\n    df_reading_levels = df_reading_levels.T\n\n    sns.set()\n    f, ax = plt.subplots(figsize=(9, 6))\n    sns.heatmap(df_reading_levels, annot=True, fmt=\"d\", linewidths=.5, ax=ax)","d230ea22":"draw_barchart_education_time_required(df_clean)","3a1739fe":"make_network_between_salary_and_education_years(df_clean)","e64fd329":"make_network_between_salary_and_school_type(df_clean)","92547c7f":"draw_barchart_for_required_reading_skills(df_clean)","b9cd4e6e":"draw_heatmap_for_required_reading_skills(df_clean)","f98a78b2":"The path to store the resulting CSV file:","93416ca3":"#### Average complexity by income as bar chart","f0f43b3e":"#### ---> THE STRUCTURED DATA","8b3ea7da":"## Charts and Interpretations \n\n### Distribution of years spent in education","af2d2d2c":"The third-party library 'readability', installed in the next cell. It analyzes a text and gives an estimation about how easy it is to read and understand. For the 'pip install' to work the internet needs to be turned on in the kernel ('Settings' -> 'Internet Off\/On')","7f90ebf4":"### Does a higher degree pay off in terms of salary?","adc6c06f":"Job applications need to be written in an understandable way. A complex and difficult language might repel potential good applicants. In the following, we study the complexity of the text used in the job bulletins. We calculate the \"Gunning-Fog-Index\", which tells us the education required to understand a text. If the text is rather complicated it will only be accessible to people with a rather high education level.","a5b1f9a3":"The following bar chart gives an overview of average amount of education required Los Angeles jobs. The chart suggests that most jobs require a rather limited amount of educational time.","31b2ffb5":"The next bar chart shows how complicated the duty descriptions are compared to the school type required for the job. For instance, if a job only requires a low education level it should not be written in a language only accessible to people with a university degree.\n\nWe see that most jobs requiring a 'COLLEGE OR UNIVERSITY' degree are written in a language that is of equal level (the blue bars). This is a good sign and means that the language is well adapted to the required education. The area at the right side with the x-axis label \"Not available\" looks interesting. These are the jobs where no school type was given or could be found. Interestingly, most of these jobs are written in a language at the 'College and University' or 'High School' level. ","a9f0e658":"The following heatmap is a different way of displaying the school type required to understand the job duty description. The descriptions are actually well-balanced. However, we see that jobs requiring an \"APPRENTICESHIP\" are often written in a language that requires a \"High School\" diploma to be understood.\n\nThe heatmap shows exactly the same data as the previous bar chart, but given the nature of the heatmap makes certain insights easier to spot. Heatmaps are especially helpful when there are many categories to be plotted.","d8ba7d4e":"#### Average complexity by income as heat map","90454d59":"# Data Cleaning","a451e661":"Similar to the previous question it is also interesting to see if a degree helps in achieving a better salary. The following network analysis connects the type of degree of the job applications and their achieved salaries. Does a higher degree result in better payment?\n\nNode size reflects the number of bulletins of that school type. Again, it turns out that a high degree does not necessarily result in a higher salary, as is indicated by the connect\u00edon of the node 'UNIVERSITY\/APPRENTICESHIP' to the 'inc_low' node. Similarly, there is a high number of jobs having 'COLLEGE OR UNIVERSITY' as the required school type, but again they are connected to the nodes 'inc_low', 'inc_medium', and even 'inc_very_low'. This might send the wrong signals to applicants.","8cd48b0f":"It is important for job applications to see if their education pays of in terms of money. If I invest many years in my education, will I get a better salary? The following network analysis connects length of education with the income achieved. This helps to see if more education actually helps in achieving a better payment.\n\nFor the analysis, the incomes and the educational times were divided into five groups. For incomes, there is 'inc_very_low', 'inc_low', 'inc_medium', 'inc_high', and 'inc_very_high'. Similarly, for education there is 'edu_very_short', 'edu_short', 'edu_medium', 'edu_high', 'edu_very_high'. The scales reflect the income from low to high as well as the duration of education from short to long. The sizes of the nodes represent the number of job bulletins with the respective income\/education duration.\n\nIt turns out that the highest educational time ('edu_very_long') does not result in a high salary, indicated by the connection to the nodes \"inc_low\" and \"inc_medium\". This might give a negative impression to potential applicants and might drive away capable applicants. It should be made clearer that education pays off.","b807ab4f":"# Analyses","445f9344":"This kernel is a contribution to the challenge 'Data Science for Good: City of Los Angeles'. It consists of these major steps:\n1. Turn the data in the text files into a structured format\n2. Save the structured format as a .csv\n3. Apply network analysis to see if education and school type pay off in terms of salary\n4. Find out if the job duty descriptions are written in a way that they are easy to understand for people with the school type given in the requirement of the respective bulletin.","1d7c510d":"### Are the Bulletins texts \"accessible\"? Text Complexity","23013e05":"## Helper Code\n\nWhat follows is the code for the recommendations:","b2f78d2a":"# Setup","cf7c19d8":"The code that turns the job bulletins into a structured format, i.e. a Pandas.DataFrame. This can be stored easily as a .csv file","381dd396":"# Introduction","6c214230":"The following is auxiliary data, a list of majors to determine education.","f37a2a83":"Writing the structured CSV file:","1d4c1b22":"### Does more time spent in education pay off in terms of salary?"}}