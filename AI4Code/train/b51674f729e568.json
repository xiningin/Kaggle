{"cell_type":{"59fcda08":"code","3863561b":"code","c122091c":"code","037c3ff2":"code","2fcf7103":"code","0a62f417":"code","1f425d65":"code","31970ec8":"code","f215d2df":"code","4c47bd2e":"code","8e58be81":"code","6f0d5dd6":"code","33e074ff":"code","94def569":"code","000b629d":"code","0ae27439":"code","a25018a6":"code","84c092e8":"code","4f1620fa":"code","7be67504":"code","4c2b38c1":"code","8f534cab":"code","e8b65cbd":"code","07f6e78e":"code","9373a2df":"code","17e57ed0":"code","0e8b136e":"code","2c3ae96c":"code","40127c7b":"code","102d5153":"code","bfbc4dab":"code","d254e8b8":"code","b059a5e4":"code","ad5509d3":"code","9c625de5":"code","38e63d03":"code","d762569a":"code","5cddf69f":"code","5eeaa672":"code","449cf5f1":"code","0c7b8a47":"code","e313fa6d":"code","3eeefb96":"code","468b7a79":"code","bbca8dc8":"code","7e2120c3":"code","656dbcf8":"code","04e5f02b":"code","93279c5b":"code","a540743e":"code","dc7e0df5":"code","88adf64f":"code","9193d944":"code","49de7f78":"code","79df3919":"code","ede1dbf8":"markdown","31c962e9":"markdown","623ced9c":"markdown","178b4119":"markdown","8a172911":"markdown","6ed60293":"markdown","52226b36":"markdown","4e2d8d97":"markdown","3096260b":"markdown","8100b38b":"markdown","804ca707":"markdown","4850bcec":"markdown","8d1da53f":"markdown","78344b44":"markdown","82768f32":"markdown","90ac409d":"markdown","e38ba0b3":"markdown","39b36fd9":"markdown","bd2e1d70":"markdown","f4f70e2f":"markdown","359d4dea":"markdown","82b360fd":"markdown","38739b4a":"markdown","76e25283":"markdown","ea1b36a0":"markdown","6f991ed1":"markdown"},"source":{"59fcda08":" '''\n\n\u2022\tCrop -  crop name\n\u2022\tcreated_on - date the call was logged by the call agent\n\u2022\tstate_name - the state the call was logged in \n\u2022\tdistrict_name - the district within the state the call was logged in\n\u2022\tquery_type -  the category for the call given by the call agent\n\u2022\tquery_text_raw -  the raw text summary entered by the call agent\n\u2022\tGPS -  the geolocation tag of the farmer\n\u2022\t7d_rainfall -  the rainfall recorded for the last 7 days\n\n'''","3863561b":"'''\n\nQuestion 1: What Category of Calls co-occurs at the Same time of year\n\nQuestion 2: What are Farmers Intreseted in during June 2017\n\nQuestion 3: you build a simple minimalist model to predict categories (query_type) [Multi Class Classification]\n\n'''","c122091c":"import scipy\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier, Pool\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import HashingVectorizer\nfrom matplotlib.ticker import PercentFormatter\nfrom sklearn.metrics import roc_auc_score, confusion_matrix, accuracy_score\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom wordcloud import WordCloud, STOPWORDS","037c3ff2":"df = pd.read_csv(\"\/kaggle\/input\/cotton-dataset\/Cotton.csv\")","2fcf7103":"df.head()","0a62f417":"df.state_name.nunique()","1f425d65":"df.info()  ## there are only very few missing values","31970ec8":"df[[\"lat\", 'long']] = df.GPS.str.split('-', n = -1, expand = True).astype('float')","f215d2df":"df[[\"lat\", 'long']].head()","4c47bd2e":"df[\"created_on\"] = pd.to_datetime(df['created_on'], format = \"%d\/%m\/%y %H:%M\")","8e58be81":"df[\"created_on\"].head()","6f0d5dd6":"print(df[\"created_on\"].max(), 'and' , df[\"created_on\"].min())","33e074ff":"df.query_type.nunique()","94def569":"df_temp = pd.DataFrame(df.query_type.value_counts())\nprint(df_temp)","000b629d":"df_temp[\"cum_percentage\"] = df_temp[\"query_type\"].cumsum()\/df_temp[\"query_type\"].sum()*100\nfig, ax = plt.subplots()\ndf_temp[\"query_type\"].plot(kind = 'bar', color = 'blue', figsize = (13,7))\nax2 = ax.twinx()\nax2.plot(df_temp.index, df_temp[\"cum_percentage\"], color=\"red\", marker=\"s\", ms=8)\nax2.yaxis.set_major_formatter(PercentFormatter())\nax.tick_params(axis=\"y\", colors=\"blue\")\nax2.tick_params(axis=\"y\", colors=\"red\")\nplt.show()","0ae27439":"df_temp.head(10)","a25018a6":"df_temp.head(10).index","84c092e8":"plt.figure(figsize = (20,20))\nwc = WordCloud(max_words = 3000 , width = 1600 , height = 800 , stopwords = STOPWORDS ).generate(\" \".join(df.query_type.fillna('nan')))\nplt.imshow(wc , interpolation = 'bilinear')","4f1620fa":"plt.figure(figsize = (20,20))\nwc = WordCloud(max_words = 3000 , width = 1600 , height = 800 , stopwords = STOPWORDS ).generate(\" \".join(df.query_text_raw.fillna('nan')))\nplt.imshow(wc , interpolation = 'bilinear')","7be67504":"df.query_text_raw.nunique()","4c2b38c1":"df.query_text_raw.nunique()\/len(df)  ## There a quite a questions are repeating ","8f534cab":"df.query_text_raw.value_counts().head(10)","e8b65cbd":"df.state_name.value_counts()","07f6e78e":"df[[\"lat\", 'long', '7d_rainfall']].hist(figsize = (12,10), color = 'blue', edgecolor = 'white')","9373a2df":"## here we are taking monthwise granularity for Co-occurance. which is reasonable for Farming","17e57ed0":"%%javascript\nIPython.OutputArea.prototype._should_scroll = function(lines) {\n    return false;\n}","0e8b136e":"'''\nHere we are taking month-wise granularity for Co-occurance. Which looks reasonable in the below plots\nDetail Explanation is there at the end of all the plots\n\nZoom the browser a little to clearly see the plots\n\n'''\n\ndf = df.dropna()\nfor i in df.query_type.unique():\n    try:\n        plt.figure(figsize = (30,10))\n        plt.rc('xtick',labelsize=13)\n        plt.rc('ytick',labelsize=13)\n        plt.rcParams[\"axes.edgecolor\"] = \"black\"\n        plt.rcParams[\"axes.linewidth\"] = 1\n        plt.title(i, fontsize=40)\n        df_temp = df[df.query_type == i]\n        df_temp['created_on'].groupby([df_temp[\"created_on\"].dt.year.astype('int'), \n                                                 df_temp[\"created_on\"].dt.month.astype('int')]).count().plot(kind=\"bar\", color = 'blue')\n        plt.savefig(i +'.png')\n    except:\n        pass    \n    #break\n    ","2c3ae96c":"'''\nIf we look at the above plots most of the categories looks seasonal. here I am listing the categories which loos seasonal at month-wise granularity\n    \n    1. plant protection  -- It Looks to be Co-occuring in Aug-September Month    \n \n    2. fertilizer use and availability -- It Looks to be Co-occuring in Aug-September Month \n \n    3. market information  -- It Looks to be Co-occuring in Jan-Feb Month\n \n    4. varieties           -- It Looks to be Co-occuring in April-May Month\n \n    5. cultural practices       -- It Looks to be Co-occuring in May-June Month\n \n    6. nutrient management          -- It Looks to be Co-occuring in September Month\n \n    7. biopesticides and biofertilizers      -- It Looks to be Co-occuring in Aug-September Month\n \n    8. seeds                                -- It Looks to be Co-occuring in May Month\n \n    9. field preparation                  -- It Looks to be Co-occuring in May Month\n \n    10. agriculture mechanization             -- It Looks to be Co-occuring in Aug Month\n \n    11. weed management                         -- It Looks to be Co-occuring in June-July Month\n \n    12. government schemes             -- Pattern of Co-occurance is not very clear at first glance (refer-above plot)\n \n    13. sowing time and weather                 -- It Looks to be Co-occuring in April-May Month\n \n    14. water management                         -- It Looks to be Co-occuring Spread across May, June and July\n \n    15. soil testing                             -- It Looks to be Co-occuring in April-may Month\n \n    16. crop insurance            -- Pattern of Co-occurance is not very clear at first glance (refer-above plot)\n \n    17. bio                    -- Pattern of Co-occurance is not very clear at first glance (refer-above plot)\n \n    18. training and exposure visits     -- Pattern of Co-occurance is not very clear at first glance (refer-above plot)\n \n    19. credit                       -- Pattern of Co-occurance is not very clear at first glance (refer-above plot)\n \n    20. organic farming                -- Pattern of Co-occurance is not very clear at first glance (refer-above plot)\n \n    21. power, roads etc.          -- Pattern of Co-occurance is not very clear at first glance (refer-above plot)\n \n    22. seeds and planting material       -- Pattern of Co-occurance is not very clear at first glance (refer-above plot)\n \n    23. post harvest preservation         -- Pattern of Co-occurance is not very clear at first glance (refer-above plot)\n \n    24. storage                     -- Pattern of Co-occurance is not very clear at first glance (refer-above plot)\n \n    25. soil health card          -- Pattern of Co-occurance is not very clear at first glance (refer-above plot)\n \n    26. landscaping                 -- Pattern of Co-occurance is not very clear at first glance (refer-above plot)\n \n    27. nursery management      -- Pattern of Co-occurance is not very clear at first glance (refer-above plot)\n    \n    '''","40127c7b":"df_q2 = df[(df['created_on'] >= '2017-06-01') &  (df['created_on'] <= '2017-06-30')]","102d5153":"df_temp = pd.DataFrame(df_q2.query_type.value_counts())\ndf_temp","bfbc4dab":"df_temp[\"cum_percentage\"] = df_temp[\"query_type\"].cumsum()\/df_temp[\"query_type\"].sum()*100\nfig, ax = plt.subplots()\ndf_temp[\"query_type\"].plot(kind = 'bar', color = 'blue', figsize = (13,7))\nax2 = ax.twinx()\nax2.plot(df_temp.index, df_temp[\"cum_percentage\"], color=\"red\", marker=\"s\", ms=8)\nax2.yaxis.set_major_formatter(PercentFormatter())\nax.tick_params(axis=\"y\", colors=\"blue\")\nax2.tick_params(axis=\"y\", colors=\"red\")\nplt.show()","d254e8b8":"df.columns","b059a5e4":"df['month'] = df['created_on'].dt.month\ndf['day'] = df['created_on'].dt.day\ndf['weekofyear'] = df['created_on'].dt.weekofyear\ndf['weekday'] = df['created_on'].dt.weekday\ndf['weekend'] = (df['created_on'].dt.weekday >=5).astype(int)","ad5509d3":"df.head()","9c625de5":"df_train = df[df.query_type.isin(['plant protection', 'varieties', 'fertilizer use and availability',\n       'nutrient management', 'weed management', 'cultural practices',\n       'biopesticides and biofertilizers', 'market information', 'seeds',\n       'field preparation'])]","38e63d03":"mapper = {'plant protection':1, 'varieties':2, 'fertilizer use and availability':3,\n       'nutrient management':4, 'weed management':5, 'cultural practices':6,\n       'biopesticides and biofertilizers':7, 'market information':8, 'seeds':9,\n       'field preparation':10}","d762569a":"target = df_train['query_type'].map(mapper)","5cddf69f":"df_train = df_train.drop(columns = ['query_type'])","5eeaa672":"\ncolumns = [ 'query_text_raw', 'state_name', 'district_name',\n        '7d_rainfall', 'lat', 'long', 'month', 'day',\n       'weekofyear', 'weekday', 'weekend']\n\ncat_variable = [0,1,2,6,7,8,9,10]","449cf5f1":"df_train[columns].head()","0c7b8a47":"df_train[columns].shape","e313fa6d":"Tf_idf_fitter = TfidfVectorizer(max_features = 20).fit(df_train['query_text_raw'])\nTF_IDF_FEATURES = Tf_idf_fitter.transform(df_train['query_text_raw'])\nTF_IDF_FEATURES = TF_IDF_FEATURES.toarray()","3eeefb96":"tf_idf_features  = pd.Series(range(20)).astype('str') +'_tf_idf_features'","468b7a79":"all_features = columns + list(tf_idf_features)","bbca8dc8":"print(all_features)","7e2120c3":"train_matrix = np.hstack([df_train[columns].values, TF_IDF_FEATURES])","656dbcf8":"df_train = pd.DataFrame(train_matrix, columns =all_features )","04e5f02b":"pd.DataFrame(train_matrix).head()","93279c5b":"param = {  \"loss_function\" : \"MultiClass\",\n           \"eval_metric\":\"Accuracy\",\n           \"learning_rate\":   0.05, \n           \"iterations\":500,\n           \"random_seed\" : 432013,\n           \"max_depth\":   10, \n           \"early_stopping_rounds\" : 50,\n         \"task_type\": 'GPU'\n         \n        }","a540743e":" \nprint(param)\n\ndf_train_columns = all_features \n\ncat_feature_inds =cat_variable\n\nfolds = StratifiedKFold(n_splits=5, shuffle=True, random_state=4590)\noof = np.zeros(len(df_train))\n\nfeature_importance_df = pd.DataFrame()\n\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(df_train, target)):\n    print(\"fold {}\".format(fold_))\n    X_train, y_train = df_train.iloc[trn_idx][df_train_columns], target.iloc[trn_idx]\n    X_valid, y_valid = df_train.iloc[val_idx][df_train_columns], target.iloc[val_idx]\n    _train = Pool(X_train, label=y_train, cat_features = cat_feature_inds)\n    _valid = Pool(X_valid, label=y_valid, cat_features = cat_feature_inds)\n\n    clf = CatBoostClassifier(**param)\n    clf.fit(\n            _train,\n            eval_set=_valid,\n            use_best_model=True,\n            verbose=100,\n            #plot=True\n    )\n\n    oof[val_idx] = clf.predict(df_train.iloc[val_idx][df_train_columns]).flatten()\n\n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"Feature\"] = df_train_columns\n    fold_importance_df[\"importance\"] = clf.feature_importances_\n    fold_importance_df[\"fold\"] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n\n ","dc7e0df5":"for i in range(1):\n    cols = (feature_importance_df[[\"Feature\", \"importance\"]]\n            .groupby(\"Feature\")\n            .mean()\n            .sort_values(by=\"importance\", ascending=False)[:5000].index)\n\n    best_features = feature_importance_df.loc[feature_importance_df.Feature.isin(cols)]\n\n    plt.figure(figsize=(12,12))\n    sns.barplot(x=\"importance\",\n                y=\"Feature\",\n                data=best_features.sort_values(by=\"importance\",\n                                               ascending=False))\n    plt.title('CatBoost Features (avg over folds)')\n    plt.tight_layout()\n    plt.savefig(\"Feature_Imp.png\")\n    plt.show()\n\n\nimp = best_features.groupby('Feature')['importance'].median().sort_values(ascending=False)\n","88adf64f":"CM = confusion_matrix(oof, target)","9193d944":"print(pd.Series(mapper))","49de7f78":"plt.figure(figsize = (12,8))\nsns.heatmap(CM, annot = True, cmap=plt.cm.Blues, fmt=\"d\", linecolor ='black',  linewidths=1)\nplt.savefig(\"Confusion_Matrix.png\")","79df3919":"print(accuracy_score(oof, target ))","ede1dbf8":"# Question 1: What Category of Calls co-occurs at the Same time of year","31c962e9":"# Question 2: What are Farmers Intreseted in during June 2017","623ced9c":"## Uniqe Questions","178b4119":"##  Dataset (CSV file) of farmer calls recorded in India for the past several years. The dataset has the following fields:","8a172911":"## Plotting Pareto","6ed60293":"### Unique Query (Questions)","52226b36":"## 5 Fold - CV: Accuracy of the Model","4e2d8d97":"## Class Code Meaning","3096260b":"## TF-IDF Features","8100b38b":"## Checking for Missing values","804ca707":"## Stacking all Features Together","4850bcec":"## Confusion Matrix\n","8d1da53f":"## Hyper-Parameters\n","78344b44":"## Date Range of Data","82768f32":"## Feature Importance","90ac409d":"## Distribution of Lat-Long and Rain Fall\n","e38ba0b3":"## Top States from where questions are asked","39b36fd9":"# Answer 1: What Category of Calls co-occurs at the Same time of year","bd2e1d70":"## Seasonal Features","f4f70e2f":"## Model Building","359d4dea":"## Top queried questions","82b360fd":"## **Upvote if you like** ","38739b4a":"If we look above 10 Categories are more prominent and consist of about 97% of the data thus for ease we will be using only the above 10 categories for Modeling. Others can be used with more detail analysis and discussion with the team","76e25283":"\nA: Feature Engineering :\na: Seasonal features:\n        \nThis problem has Time Series Component to it. Seeing the Above plots in \"Question 1\". We can Conclude that query_type i.e. Target is seasonal and depends on Date. Target has trend along the year as well ( Not Monotonic trend ) . I am going to use Simple features to capture the Seasonlity\n\na. Week of the Year\nb. fortnight of the Year\nc. Month of the Year\nd. Weekdays\ne. Weekends\n\nCurrently I am choosing not to use Year as a Feature as Its Progressive than Seasonal. But in Future I would love to explore this Angle of including Year as a feature for Classification. As we have 10 Years of Data\n\nAssumption about the above Hypothesis is that created date is same as Call date or the delay is negligible\n\nb: TF-IDF Features:\n a. We will be using Inverse of Term Frequecy as a features to extract features out of raw text (query_text_raw). Using Sklearn feature extraction API\n \n b. As all the text are One liner thus TF- IDF is not a bad idea\n \n C. TF-IDF might not have worked if have long sentencences and Saccasam in the raw text body\nCurrently I want to build the Model to derive the relationship as below\n\nquery_type ~ F( Seasonal_features, query_text_raw, state_name, district_name,7d_rainfall, lat, long, TF-IDF features )\nB: Feature Transformation and Encoding\nMost of the features are High Cardinality Categorical features. Because of High Cardinality One Hot Encoding is Not the way to go It will create a spare matrix with huge Number of features and Model will learn nothing\nThus here we have to do Target Encoding to get the Most out of [query_text_raw, state_name, district_name]\n\nhttps:\/\/contrib.scikit-learn.org\/categorical-encoding\/targetencoder.html\n\nhttp:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/data-munging\/target-encoding.html\n\nC: Model Selection\na : Logistic Regression\nAlthough I want to begin with Logistic regression. Its Less Complex Model and Gives a Baseline for Model Performance. If the relationship between the data is linear then Linear Model is Best way to go. Its works well in production\nHere are some Limitation of Logistic Regression\n\na. It does not capture the Non -Linear Relationship between the data\nb. It does not do well with XOR relationships for eg.\n\n  XOR problem lets say x1={1,1,0,0}, \n  x2={1,0,1,0} and y={0,1,1,0}. \n  Then P(y=1|x1=1)=0.5 and P(y=1|x2=1)=0.5. \n  But P(y=1|x1=1 and x2=1)=0\nBut to use Logistic Regression I have to do all the Target encoding as Sklearn's Logistic Regression API does not have encoding feature thus I am choosing a bit easy way out and Directly going to Implement Non- Linear Gradient Boosting model \"CatBoost\" it handels high cardinality categorical features very well\nb: CatBoost\nCatBoost works very well when there is non linear relationship in the data. Especially Works well when data is large. It handles High Cardinality Features Internally within API no prior encoding is Needed\nHere are some Limitation of Gradient Boosting\n\na. GBM is Tree Based Model and Tree based Models are Not good with monotonic Numerical Features. In oour case it could be \"7d_rainfall Feature\"\n\nUnderstanding with a Example: This is Just for Explanation using a very Small Problem\n\nLets take a regression\n\nx={1,2,3,4}, y={1,4,6,8}.\n\nIf I train a GBM model on above kind of data. and Predict x ={5}, then model will return some average of {1,2,3,4}. instead of close to {10}. While a linear model will be able to capture it\n\nD: Cross - Validation Strategy\n    Here we are going to use K-Fold Cross Validation where k =5\nE: Selecting Loss Function and Metric for Model Evaluation\n   This the hard part. There are many metic availabe for evaluation. To select a metic for evaluation it requires discussion with team and come up with a metric. Here are a few metric for Multiclass classification \n \n   1. Accuracy\n   2. F1 score\n   3. F-beta Score (if some categogies are importnant than others)\n   3. Log Loss\n   4. Weighted Log-loss (if some categogies are importnant than others)\n   5. ROC- AUC\n \n  Here I am choosing a easy way again and using Accuracy for evaluation \nF: Feature Selection\n  various feature selection method can be used to elimeinate the noisy features and improve the model performance for\n  eg.\n \n   1. Forward Elimination\n   2. Backward Elimination\n   3. Based On Permutation Importance\n \n  Currently not using any feature elimination","ea1b36a0":"## Vizualizing Word Cloud","6f991ed1":"# Model Building"}}