{"cell_type":{"bcf3b84b":"code","9a94bbd6":"code","26669ac6":"code","eb7a1dac":"code","b16422ea":"code","ae613000":"code","5d02fa85":"code","f3fde126":"code","c6ccccb2":"code","5d3a3eca":"code","beba8267":"code","b8c9de39":"code","8b83d03d":"code","a440849f":"markdown","48eb1acb":"markdown","e0d3794d":"markdown","b83211cb":"markdown","c4eec7dc":"markdown"},"source":{"bcf3b84b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport pandas as pd\nimport numpy as np\nimport re\nimport string\nimport nltk\nfrom nltk.corpus import stopwords\nstop = set(stopwords.words('english'))\nfrom wordcloud import WordCloud, STOPWORDS\nimport matplotlib as plty\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport sklearn\n\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom subprocess import check_output\n\n%matplotlib inline\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n\nimport plotly.graph_objs as go\nfrom sklearn import preprocessing\nEncode = preprocessing.LabelEncoder()\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ntfid = TfidfVectorizer()\nvect = CountVectorizer()\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.manifold import TSNE\nNB = MultinomialNB()\n\nimport nltk\nfrom nltk.corpus import stopwords\nstopwords = stopwords.words(\"english\")\nfrom sklearn import metrics\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\n\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","9a94bbd6":"chatbot = pd.read_csv(\"..\/input\/Sheet_1.csv\",usecols=['response_id','class','response_text'],encoding='latin-1')\nresume = pd.read_csv(\"..\/input\/Sheet_2.csv\",encoding='latin-1')","26669ac6":"chatbot.head(5)","eb7a1dac":"chatbot['class'].value_counts()","b16422ea":"def cloud(text):\n    wordcloud = WordCloud(background_color=\"blue\",stopwords=stop).generate(\" \".join([i for i in text.str.upper()]))\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.title(\"Chat Bot Response\")\ncloud(chatbot['response_text'])","ae613000":"chatbot['Label'] = Encode.fit_transform(chatbot['class'])","5d02fa85":"chatbot['Label'].value_counts()\n#not_flagged    55\n#flagged        25","f3fde126":"x = chatbot.response_text\ny = chatbot.Label\nx_train,x_test,y_train,y_test = train_test_split(x,y,random_state=1)\nx_train_dtm = vect.fit_transform(x_train)\nx_test_dtm = vect.transform(x_test)\nNB.fit(x_train_dtm,y_train)\ny_predict = NB.predict(x_test_dtm)\nmetrics.accuracy_score(y_test,y_predict)\n\n\n\n\n","c6ccccb2":"rf = RandomForestClassifier(max_depth=10,max_features=10)\nrf.fit(x_train_dtm,y_train)\nrf_predict = rf.predict(x_test_dtm)\nmetrics.accuracy_score(y_test,rf_predict)","5d3a3eca":"Chatbot_Text = chatbot[\"response_text\"]\nlen(Chatbot_Text)","beba8267":"Tf_idf = CountVectorizer(max_features=256).fit_transform(Chatbot_Text.values)","b8c9de39":"tsne = TSNE(\n    n_components=3,\n    init='random', # pca\n    random_state=101,\n    method='barnes_hut',\n    n_iter=200,\n    verbose=2,\n    angle=0.5\n).fit_transform(Tf_idf.toarray())\n\n\n","8b83d03d":"trace1 = go.Scatter3d(\n    x=tsne[:,0],\n    y=tsne[:,1],\n    z=tsne[:,2],\n    mode='markers',\n    marker=dict(\n        sizemode='diameter',\n        color = Chatbot_Text.values,\n        colorscale = 'Portland',\n        colorbar = dict(title = 'TExt'),\n        line=dict(color='rgb(255, 255, 255)'),\n        opacity=0.75\n    )\n)\n\ndata=[trace1]\nlayout=dict(height=800, width=800, title='test')\nfig=dict(data=data, layout=layout)\npy.iplot(fig, filename='3DBubble')\n","a440849f":"****Sheet_1.csv contains 80 user responses, in the response_text column, to a therapy chatbot. Bot said: 'Describe a time when you have acted as a resource for someone else'.  User responded. If a response is 'not flagged', the user can continue talking to the bot. If it is 'flagged', the user is referred to help. ****","48eb1acb":"**Model Building **","e0d3794d":"**Random Forest**","b83211cb":"**Naive Bayes**","c4eec7dc":"**Kindly Up vote if you like**"}}