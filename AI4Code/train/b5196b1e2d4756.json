{"cell_type":{"2391c2e5":"code","eea8baaf":"code","0f90a404":"code","aa4c41e4":"code","d311f97e":"code","f0fe325c":"code","5efd4137":"code","717db45c":"code","831f51b8":"code","f7d94141":"code","28fc5d23":"code","8b5ef185":"code","a93e7b1f":"code","a4f5bf9c":"code","d2402ee8":"code","45d67f27":"code","3ca318e6":"code","3b522a72":"code","2b2b2b85":"code","178fa045":"code","dc5f2c35":"code","bc9dbd14":"code","612fdc20":"code","1d4bc47e":"code","2f903416":"code","03f4e945":"code","d596d4fb":"code","66b60139":"markdown","3286fb1b":"markdown","35cb757e":"markdown","42de3bc6":"markdown","e47167fa":"markdown","21d23dc2":"markdown","4020f387":"markdown","3c529081":"markdown","ac847276":"markdown","4aa1c61e":"markdown","c0f06595":"markdown","fe98d706":"markdown","6a567daf":"markdown","8190d8e9":"markdown","d61f360b":"markdown","67b47ac1":"markdown","287ed7a0":"markdown","f8db99b8":"markdown","196d8b2c":"markdown","7284dc61":"markdown"},"source":{"2391c2e5":"import numpy as np # linear algebra\nimport pandas as pd\npd.set_option(\"display.max_rows\", 101)\nimport os\nprint(os.listdir(\"..\/input\"))\nimport cv2\nimport json\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams[\"font.size\"] = 15\nimport seaborn as sns\nfrom collections import Counter\nfrom PIL import Image\nimport math\nimport seaborn as sns\nfrom collections import defaultdict\nfrom pathlib import Path\nimport cv2\nfrom tqdm import tqdm\nimport glob","eea8baaf":"input_dir = \"..\/input\/\"","0f90a404":"train_df = pd.read_csv(\"..\/input\/severstal-steel-defect-detection\/train.csv\")\nsample_df = pd.read_csv(\"..\/input\/severstal-steel-defect-detection\/sample_submission.csv\")","aa4c41e4":"train_df = train_df.pivot(index='ImageId',columns='ClassId',values='EncodedPixels')\ntrain_df.head()","d311f97e":"train_df = train_df.reset_index()\ntrain_df2 = pd.DataFrame({'ImageId': glob.glob('..\/input\/severstal-steel-defect-detection\/train_images\/*')})\ntrain_df2['ImageId'] = train_df2['ImageId'].apply(lambda x: x.split('\/')[-1])\ntrain_df = pd.merge(train_df, train_df2, how='outer', on='ImageId')","f0fe325c":"train_df.head()","5efd4137":"class_dict = defaultdict(int)\n\nkind_class_dict = defaultdict(int)\n\nno_defects_num = 0\ndefects_num = 0\n\nfor col in range(len(train_df)):\n    labels = train_df.iloc[col]\n    if labels[1:].isna().all():\n        no_defects_num += 1\n    else:\n        defects_num += 1\n    \n    kind_class_dict[sum(labels[1:].isna().values == False)] += 1\n        \n    for idx, label in enumerate(labels[1:].isna().values.tolist()):\n        if label == False:\n            class_dict[idx+1] += 1","717db45c":"print(\"the number of images with no defects: {}\".format(no_defects_num))\nprint(\"the number of images with defects: {}\".format(defects_num))","831f51b8":"fig, ax = plt.subplots()\nsns.barplot(x=list(class_dict.keys()), y=list(class_dict.values()), ax=ax)\nax.set_title(\"the number of images for each class\")\nax.set_xlabel(\"class\")\nclass_dict","f7d94141":"fig, ax = plt.subplots()\nsns.barplot(x=list(kind_class_dict.keys()), y=list(kind_class_dict.values()), ax=ax)\nax.set_title(\"Number of classes included in each image\");\nax.set_xlabel(\"number of classes in the image\")\nkind_class_dict","28fc5d23":"train_size_dict = defaultdict(int)\ntrain_path = Path(\"..\/input\/severstal-steel-defect-detection\/train_images\/\")\n\nfor img_name in train_path.iterdir():\n    img = Image.open(img_name)\n    train_size_dict[img.size] += 1","8b5ef185":"train_size_dict","a93e7b1f":"test_size_dict = defaultdict(int)\ntest_path = Path(\"..\/input\/severstal-steel-defect-detection\/test_images\/\")\n\nfor img_name in test_path.iterdir():\n    img = Image.open(img_name)\n    test_size_dict[img.size] += 1","a4f5bf9c":"test_size_dict","d2402ee8":"palet = [(249, 192, 12), (0, 185, 241), (114, 0, 218), (249,50,12)]","45d67f27":"def name_and_mask(start_idx):\n\n    labels = train_df.iloc[start_idx]\n    mask = np.zeros((256, 1600, 4), dtype=np.uint8)\n\n    for idx, label in enumerate(labels.values[1:]):\n        if label is not np.nan:\n            mask_label = np.zeros(1600*256, dtype=np.uint8)\n            label = label.split(\" \")\n            positions = map(int, label[0::2])\n            length = map(int, label[1::2])\n            for pos, le in zip(positions, length):\n                mask_label[pos-1:pos+le-1] = 1\n            mask[:, :, idx] = mask_label.reshape(256, 1600, order='F')\n    return labels.values[0], mask","3ca318e6":"def show_mask_image(col):\n    name, mask = name_and_mask(col)\n    img = cv2.imread(str(train_path \/ name))\n    fig, ax = plt.subplots(figsize=(15, 15))\n\n    for ch in range(4):\n        contours, _ = cv2.findContours(mask[:, :, ch], cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)\n        for i in range(0, len(contours)):\n            cv2.polylines(img, contours[i], True, palet[ch], 2)\n    ax.set_title(name)\n    ax.imshow(img)\n    plt.show()","3b522a72":"fig, ax = plt.subplots(1, 4, figsize=(15, 5))\nfor i in range(4):\n    ax[i].axis('off')\n    ax[i].imshow(np.ones((50, 50, 3), dtype=np.uint8) * palet[i])\n    ax[i].set_title(\"class color: {}\".format(i+1))\nfig.suptitle(\"each class colors\")\n\nplt.show()","2b2b2b85":"idx_no_defect = []\nidx_class_1 = []\nidx_class_2 = []\nidx_class_3 = []\nidx_class_4 = []\nidx_class_multi = []\nidx_class_triple = []\n\nfor col in range(len(train_df)):\n        \n    labels = train_df.iloc[col][1:]\n    if labels.isna().all():\n        idx_no_defect.append(col)\n    elif (labels.isna() == [False, True, True, True]).all():\n        idx_class_1.append(col)\n    elif (labels.isna() == [True, False, True, True]).all():\n        idx_class_2.append(col)\n    elif (labels.isna() == [True, True, False, True]).all():\n        idx_class_3.append(col)\n    elif (labels.isna() == [True, True, True, False]).all():\n        idx_class_4.append(col)\n    elif labels.isna().sum() == 1:\n        idx_class_triple.append(col)\n    else:\n        idx_class_multi.append(col)","178fa045":"for idx in idx_no_defect[:5]:\n    show_mask_image(idx)","dc5f2c35":"for idx in idx_class_1[:5]:\n    show_mask_image(idx)","bc9dbd14":"for idx in idx_class_2[:5]:\n    show_mask_image(idx)","612fdc20":"for idx in idx_class_3[:5]:\n    show_mask_image(idx)","1d4bc47e":"for idx in idx_class_4[:5]:\n    show_mask_image(idx)","2f903416":"for idx in idx_class_multi[:5]:\n    show_mask_image(idx)","03f4e945":"for idx in idx_class_triple:\n    show_mask_image(idx)","d596d4fb":"for col in tqdm(range(0, len(train_df), 4)):\n    name, mask = name_and_mask(col)\n    if (mask.sum(axis=2) >= 2).any():\n        show_mask_image(col)","66b60139":"## images with defect(contain 3 type label)","3286fb1b":"* All pixels have 1 or less label.","35cb757e":"## check image data\n### image size","42de3bc6":"## import modules and define models","e47167fa":"* We can see 4 type defect","21d23dc2":"## read all text data\n#### file description\n* train_images\/ - folder of training images\n* test_images\/ - folder of test images (you are segmenting and classifying these images)\n* train.csv - training annotations which provide segments for defects (ClassId = [1, 2, 3, 4])\n* sample_submission.csv - a sample submission file in the correct format; note, **each ImageId 4 rows, one for each of the 4 defect classes**","4020f387":"* There are similar numbers of images with and without defects.\n* class is imbalanced","3c529081":"## images with defect(label: 1)","ac847276":"* All image have same shape, (1600, 256).","4aa1c61e":"# Let's visualization masks!","c0f06595":"## images with defect(contain multi label)","fe98d706":"## images with defect(label: 2)","6a567daf":"# Thank you very much for reading my post through to the end.\nPlease tell me when I make mistakes in program and English.  \nI hope this kernel will help.  \nIf you think this kernel is useful, please upvote.  ","8190d8e9":"### How many classes do each image have?","d61f360b":"# Let's Detect Steel Defect!","67b47ac1":"## images with defect(label: 4)","287ed7a0":"## images with defect(label: 3)","f8db99b8":"## images with no defect","196d8b2c":"### First, check the number of each class.","7284dc61":"# Is there the pixel that have multi label?"}}