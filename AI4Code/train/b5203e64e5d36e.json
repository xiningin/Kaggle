{"cell_type":{"460a06ae":"code","7acf0fe0":"code","dd96f8d8":"code","2a2134bf":"code","e5403494":"code","ad9433d6":"code","6e4494f7":"code","55ea81c5":"code","958a0355":"code","9891942e":"code","59f7801c":"code","d68b294e":"code","3c8f8869":"markdown","849bdd26":"markdown","5025176b":"markdown","d983c02f":"markdown","86eb4701":"markdown","0887700b":"markdown","f3ec69c7":"markdown","ee327c97":"markdown","dde390dd":"markdown","4da1843f":"markdown","96758e33":"markdown","369e139a":"markdown","7e6baa13":"markdown"},"source":{"460a06ae":"#installing libraries\n!pip install yfinance\n!pip install bs4","7acf0fe0":"#importing libraries\nimport pandas as pd\n\nimport yfinance as yf\nimport requests\nfrom bs4 import BeautifulSoup\n\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","dd96f8d8":"def plot_graph(stock_data, revenue_data, stock):\n    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=(\"Historical Share Price ($)\", \"Historical Revenue ($)\"), vertical_spacing = .5)\n    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data.Date, infer_datetime_format=True), y=stock_data.Close.astype(\"float\"), name=\"Share Price\"), row=1, col=1)\n    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data.Date, infer_datetime_format=True), y=revenue_data.Revenue.astype(\"float\"), name=\"Revenue\"), row=2, col=1)\n    fig.update_xaxes(title_text=\"Date\", row=1, col=1)\n    fig.update_xaxes(title_text=\"Date\", row=2, col=1)\n    fig.update_yaxes(title_text=\"Price ($)\", row=1, col=1)\n    fig.update_yaxes(title_text=\"Revenue ($ Millions)\", row=2, col=1)\n    fig.update_layout(showlegend=False, height=1000, title=stock, xaxis_rangeslider_visible=True)\n    fig.show()","2a2134bf":"# Using the Ticker function to create a ticker object.\n# ticker symbol of tesla is TSLA\ntesla_data = yf.Ticker('TSLA')\n\n# history function helps to extract stock information.\n# setting period parameter to max to get information for the maximum amount of time.\ntsla_data = tesla_data.history(period='max')\n\n# Resetting the index\ntsla_data.reset_index(inplace=True)\n\n# display the first five rows\ntsla_data.head()","e5403494":"# using requests library to download the webpage\nurl='https:\/\/www.macrotrends.net\/stocks\/charts\/TSLA\/tesla\/revenue'\n\n# Save the text of the response\nhtml_text = requests.get(url).text\n\n# Parse the html data using beautiful_soup.\nsoup=BeautifulSoup(html_text, 'html5lib')","ad9433d6":"# Using beautiful soup extract the table with Tesla Quarterly Revenue.\n# creating new dataframe\ntsla_revenue = pd.DataFrame(columns=[\"Date\", \"Revenue\"])\n\ntables = soup.find_all('table')\ntable_index=0\n\nfor index, table in enumerate(tables):\n    if ('Tesla Quarterly Revenue'in str(table)):\n        table_index=index\n        \nfor row in tables[table_index].tbody.find_all(\"tr\"):\n    col = row.find_all(\"td\")\n    if (col!=[]):\n        date =col[0].text\n        # to remove comma and dollar sign\n        revenue =col[1].text.replace(\"$\", \"\").replace(\",\", \"\")\n        tsla_revenue=tsla_revenue.append({'Date':date,'Revenue':revenue},\n                                           ignore_index=True)\n\n# displaying dataframe\ntsla_revenue","6e4494f7":"# removing null values\ntsla_revenue = tsla_revenue[tsla_revenue['Revenue']!='']\ntsla_revenue","55ea81c5":"plot_graph(tsla_data, tsla_revenue, 'Tesla Historical Share Price & Revenue')","958a0355":"#  ticker symbol of GameStop is GME\ngamestop = yf.Ticker('GME')\n\n# extracting stock information\ngme_data=gamestop.history(period='max')\n\n#reset the index\ngme_data.reset_index(inplace=True)\ngme_data.head()","9891942e":"# using requests library to download the webpage\nurl = 'https:\/\/www.macrotrends.net\/stocks\/charts\/GME\/gamestop\/revenue'\n\n# Save the text of the response\nhtml_data = requests.get(url).text\n\n# parse the html data\nsoup=BeautifulSoup(html_data, 'html5lib')","59f7801c":"# Using beautiful soup extract the table with GameStop Quarterly Revenue\n# creating new dataframe\ngme_revenue = pd.DataFrame(columns=[\"Date\", \"Revenue\"])\ntables = soup.find_all('table')\n\ntable_index=0\nfor index, table in enumerate(tables):\n    if ('GameStop Quarterly Revenue'in str(table)):\n        table_index=index\n        \nfor row in tables[table_index].tbody.find_all(\"tr\"):\n    col = row.find_all(\"td\")\n    if (col!=[]):\n        date =col[0].text\n        # comma and dollar sign is removed\n        revenue =col[1].text.replace(\"$\", \"\").replace(\",\", \"\")\n        gme_revenue=gme_revenue.append({'Date':date,'Revenue':revenue},\n                                       ignore_index=True)\n        \ngme_revenue.head()","d68b294e":"plot_graph(gme_data, gme_revenue, 'GameStop')","3c8f8869":"Extracting essential data from a dataset and displaying it is a necessary part of data science; therefore individuals can make correct decisions based on the data.<p>In this notebook, I will extract stock data of Tesla and GameStop, then display this data in a graph. Some content of this notebook was the final assignment in a Coursera course that I have studied.","849bdd26":"<h2>Description<\/h2>","5025176b":"### Function for graphing","d983c02f":"### yfinance to extract stock data\n","86eb4701":"### Webscraping to extract Tesla revenue data","0887700b":"## 1. Tesla Stock Data","f3ec69c7":"**Thank You**","ee327c97":"# Extracting & Visualizing Stock Data","dde390dd":"### Plot GameStop stock graph","4da1843f":"## 2. GameStop Stock Data","96758e33":"### Webscraping to Extract GME revenue data","369e139a":"### yfinance for extracting stock data\n","7e6baa13":"### Plot Tesla stock graph"}}