{"cell_type":{"d5a5db5e":"code","2129b240":"code","30c339a3":"code","15b3d4cc":"code","92f873dd":"code","6e16a509":"code","233ac62e":"code","57ffec2c":"code","08af7728":"code","df22ffc2":"code","3142f56c":"code","dfa75060":"code","b046336c":"code","f3a81e8c":"code","1769a362":"code","4894cc0d":"code","4facfd4f":"code","057a5282":"code","26a8a9c2":"code","d11dccff":"code","b292f2fc":"code","350df6a3":"code","ac1c5ac2":"code","5bb87b86":"code","cbe0bed8":"code","13b8497a":"code","c160708e":"code","25fe77fa":"code","2912e4a6":"code","1a0fb00a":"markdown","19169b99":"markdown","e7346753":"markdown","69572d40":"markdown","08e1020d":"markdown","7c0e5c9e":"markdown","a47b6927":"markdown","851d175c":"markdown","96493787":"markdown","a5418395":"markdown","6a7fcebc":"markdown"},"source":{"d5a5db5e":"import pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models\nfrom keras.layers.normalization import BatchNormalization\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom keras.utils import np_utils\nfrom keras.layers import Dropout\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nfrom tqdm import tqdm\nimport cv2\nfrom glob import glob\nimport seaborn as sns\nsns.set()\n\nimport sklearn\nimport skimage\nfrom skimage.transform import resize\n\nimport random\nfrom skimage.color import rgb2gray\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import accuracy_score","2129b240":"train = \"..\/input\/skin-cancer-malignant-vs-benign\/train\"\n\ntest = \"..\/input\/skin-cancer-malignant-vs-benign\/test\"\n\n\n\nLOAD_FROM_IMAGES = True\n\ndef get_data(folder):\n    x = []\n    y = []\n    for folderName in os.listdir(folder):\n        if not folderName.startswith(\".\"):\n            if folderName in [\"benign\"]:\n                label = 0\n            elif folderName in [\"malignant\"]:\n                label = 1\n            else:\n                label = 2\n            for image_filename in tqdm(os.listdir(folder +\"\/\" +folderName+\"\/\")):\n                img_file = cv2.imread(folder + \"\/\" +folderName + \"\/\" + image_filename)\n                if img_file is not None:\n                    img_file = skimage.transform.resize(img_file,(224,224,3), mode = \"constant\",anti_aliasing=True)\n                    #img_file = rgb2gray(img_file)\n                    img_arr = np.asarray(img_file)\n                    x.append(img_arr)\n                    y.append(label)\n    x = np.asarray(x)\n    y = np.asarray(y)\n    return x,y\n\nif LOAD_FROM_IMAGES:\n    X_train,y_train = get_data(train)\n    X_test, y_test = get_data(test)\n    \n    np.save(\"xtrain.npy\",X_train)\n    np.save(\"ytrain.npy\",y_train)\n    np.save(\"xtest.npy\",X_test)\n    np.save(\"ytest.npy\",y_test)\nelse:\n    X_train = np.load(\"xtrain.npy\")\n    y_train = np.load(\"ytrain.npy\")\n    X_test = np.load(\"xtest.npy\")\n    y_test = np.load(\"ytest.npy\")","30c339a3":"X_train=X_train.astype('float32')\ny_train\nX_test=X_test.astype('float32')\ny_test","15b3d4cc":"def plot_histogram(a):\n    plt.figure(figsize=(12,6))\n    plt.subplot(1,2,1)\n    plt.hist(a.ravel(),bins=255)\n    plt.subplot(1,2,2)\n    plt.imshow(a,vmin=0,vmax=1)\n    plt.show()\n    \n    \nplot_histogram(X_train[2])","92f873dd":"glob_img = glob(\"..\/input\/skin-cancer-malignant-vs-benign\/train\/benign\/**\")\n\ndef plot(images):\n    z = random.sample(images,3)\n    plt.figure(figsize=(20,20))\n    plt.subplot(131)\n    plt.imshow(cv2.imread(z[0]))\n    plt.subplot(132)\n    plt.imshow(cv2.imread(z[1]))\n    plt.subplot(133)\n    plt.imshow(cv2.imread(z[2]))\n\nplot(glob_img)\n    ","6e16a509":"glob_img = glob(\"..\/input\/skin-cancer-malignant-vs-benign\/train\/malignant\/**\")\n\ndef plot(images):\n    z = random.sample(images,3)\n    plt.figure(figsize=(20,20))\n    plt.subplot(131)\n    plt.imshow(cv2.imread(z[0]))\n    plt.subplot(132)\n    plt.imshow(cv2.imread(z[1]))\n    plt.subplot(133)\n    plt.imshow(cv2.imread(z[2]))\n\nplot(glob_img)","233ac62e":"print(\"Benign\")\n\nglob_img = glob(\"..\/input\/skin-cancer-malignant-vs-benign\/train\/benign\/**\")\ni_=0\nplt.rcParams[\"figure.figsize\"] =(20.0,20.0)\nplt.subplots_adjust(wspace=0,hspace=1)\nfor i in  glob_img[0:20]:\n    img=cv2.imread(i)\n    img=cv2.resize(img,(128,128))\n    plt.subplot(5,5,i_+1)\n    plt.imshow(img);plt.axis(\"off\")\n    i_ +=1","57ffec2c":"print(\"Malignant\")\n\nglob_img = glob(\"..\/input\/skin-cancer-malignant-vs-benign\/train\/malignant\/**\")\ni_=0\nplt.rcParams[\"figure.figsize\"] =(20.0,20.0)\nplt.subplots_adjust(wspace=0,hspace=1)\nfor i in  glob_img[0:20]:\n    img=cv2.imread(i)\n    img=cv2.resize(img,(128,128))\n    plt.subplot(5,5,i_+1)\n    plt.imshow(img);plt.axis(\"off\")\n    i_ +=1","08af7728":"plt.figure(figsize=(8,4))\n\nmap_characters = {0:\"benign\",1:\"malignant\"}\ndict_characters = map_characters\n\ndf = pd.DataFrame()\ndf[\"labels\"]=y_train\nlab = df[\"labels\"]\ndist=lab.value_counts()\nsns.countplot(lab)\nprint(dict_characters)","df22ffc2":"generatordata = ImageDataGenerator(zoom_range = 0.2,height_shift_range = 0.1,\n                                   width_shift_range = 0.2,rotation_range = 12)","3142f56c":"X_train = X_train\/255\nX_test = X_test\/255\n\nX_train_R= X_train.reshape(len(X_train),224,224,3)\nX_test_R= X_test.reshape(len(X_test),224,224,3)\ny_train = np_utils.to_categorical(y_train, num_classes= 2)\ny_test = np_utils.to_categorical(y_test, num_classes= 2)","dfa75060":"model = models.Sequential()\n\nmodel.add(layers.Conv2D(64,(3,3),padding=\"same\",activation=\"relu\",kernel_initializer=\"glorot_uniform\",input_shape=(224,224,3)))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\nmodel.add(layers.Conv2D(64,(3,3),padding=\"same\",activation=\"relu\",kernel_initializer=\"glorot_uniform\"))\nmodel.add(layers.MaxPooling2D((2,2)))\n\nmodel.add(layers.Conv2D(64,(3,3),padding=\"same\",activation=\"relu\",kernel_initializer=\"glorot_uniform\"))\nmodel.add(layers.MaxPooling2D((2,2)))\n\nmodel.add(layers.Flatten())\n\nmodel.add(layers.Dense(128,activation=\"relu\",kernel_initializer=\"normal\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(layers.Dense(2,activation=\"softmax\"))","b046336c":"model.summary()","f3a81e8c":"model.compile(optimizer = \"adam\" , loss = \"binary_crossentropy\", metrics=[\"accuracy\"])","1769a362":"batch_size=32\nepochs=100","4894cc0d":"from keras.callbacks import ReduceLROnPlateau\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=5, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=1e-7)\n","4facfd4f":"from tensorflow.keras.callbacks import EarlyStopping\n\ncustom_early_stopping = EarlyStopping(\n    monitor='val_accuracy', \n    patience=95,\n    restore_best_weights=True\n)","057a5282":"history =  model.fit(generatordata.flow(X_train_R, y_train, batch_size=batch_size),epochs=epochs,\n                              verbose=1,\n                              validation_data =(X_test_R,y_test),callbacks=[learning_rate_reduction,custom_early_stopping])","26a8a9c2":"score = model.evaluate(X_test_R, y_test, batch_size=batch_size, verbose=1)\n\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","d11dccff":"from tensorflow.keras.applications.resnet_v2 import ResNet50V2","b292f2fc":"input_shape = (224,224,3)\nepochs = 100\nbatch_size = 16","350df6a3":"model = ResNet50V2(include_top=True,\n                 weights= None,\n                 input_tensor=None,\n                 input_shape=input_shape,\n                 pooling='max ',\n                 classes=2)\n\nmodel.compile(optimizer = \"adam\" ,\n              loss = \"binary_crossentropy\", \n              metrics=[\"accuracy\"])","ac1c5ac2":"history = model.fit(X_train_R, y_train, validation_split=0.2,\n                    epochs= epochs, batch_size= batch_size, verbose=1,callbacks=[learning_rate_reduction,custom_early_stopping] )","5bb87b86":"score = model.evaluate(X_test_R, y_test, batch_size=batch_size, verbose=1)\n\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","cbe0bed8":"from tensorflow.keras.applications import vgg16\n","13b8497a":"def create_vgg16():  \n  model = vgg16.VGG16(include_top=True, weights=None, input_tensor=None, input_shape=(224,224,3), pooling=\"max\", classes=2)\n\n  return model","c160708e":"vgg16_model = create_vgg16()  \nvgg16_model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])  ","25fe77fa":"vgg16 = vgg16_model.fit(x=X_train_R,\n                        y=y_train, batch_size=32,\n                        epochs=100, verbose=1,\n                        validation_data=(X_test_R, y_test), shuffle=True,callbacks=[learning_rate_reduction,custom_early_stopping])  ","2912e4a6":"score = vgg16_model.evaluate(X_test_R, y_test, batch_size=batch_size, verbose=1)\n\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","1a0fb00a":"# VGG16","19169b99":"# Load and Preprocessing","e7346753":"## Benign","69572d40":"# CNN","08e1020d":"## Data Generator","7c0e5c9e":"## benign","a47b6927":"## malignant","851d175c":"#### Thanks @fanconic for the learning rate","96493787":"# Visualization","a5418395":"## Malignant","6a7fcebc":"# ResNet V2"}}