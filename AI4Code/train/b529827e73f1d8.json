{"cell_type":{"93b76b69":"code","be42aba8":"code","ae41bee0":"code","fe1d57e9":"code","cdf31850":"code","c40bc116":"code","ac700a98":"code","97c87bc3":"code","82b9630a":"code","d8ddb1db":"code","c8507831":"code","9a662312":"code","7922d1c4":"code","a9dff42d":"code","879e93ac":"code","34669264":"code","770775f7":"code","b4a0b2e5":"code","5e924463":"code","6b0edb3b":"code","6f985f6b":"code","3849dec1":"code","de4da3e8":"code","ce852f38":"code","efd1ff04":"code","ecaeb83d":"code","03b8d620":"code","6e508ea2":"code","a6eb4f14":"code","c88b03ff":"code","299d2010":"code","2a466720":"code","6348109b":"code","fd018191":"code","82ee2c17":"code","871e3cd9":"code","ed83ce14":"code","221efc18":"code","fd19c861":"code","fcbabadb":"code","76e4db7c":"code","402e8dad":"code","9c4c8440":"code","2f2fd880":"code","793b9640":"code","eebc7619":"code","7e5ce917":"code","d7acd935":"code","cff3183f":"code","27fd78ff":"code","26e4c266":"code","4bd0dddb":"code","9ee43574":"code","762bffa7":"code","46090620":"code","8b124e48":"code","d806cf0b":"code","14265dc4":"code","a7bf6d6f":"code","f499defb":"code","79457ec5":"code","98d8d5a1":"code","b0793e34":"code","bb119574":"code","38b80c94":"code","d6c349be":"code","5d0368a8":"code","c943aa5e":"code","acac825b":"code","96f27538":"code","5e14c825":"code","c6373a42":"code","5f88a4b3":"code","d6c40920":"code","14d8933e":"code","715c0248":"code","98aed5d8":"code","6f7dad31":"code","c11b0939":"code","4cf7d2a3":"code","aebaa1b6":"code","a55670af":"code","5e19ae6e":"code","82a91bc0":"code","60f608c9":"code","37602ceb":"code","b53ead2b":"markdown","4f81dd26":"markdown","bd265127":"markdown","a0aecbfd":"markdown","c61f08f9":"markdown","a0ef2386":"markdown","a941e525":"markdown","94932e62":"markdown","9e15f3cb":"markdown","2354625b":"markdown","6b9a4e54":"markdown","04010e7f":"markdown","96271b68":"markdown","06139fb8":"markdown","2b3c6a23":"markdown","804b8ab3":"markdown","3f7cb021":"markdown","58afab9d":"markdown","6a072adf":"markdown","e45634ae":"markdown","b396f3f9":"markdown","6f707ab4":"markdown","79e9c737":"markdown","f9bc7b0b":"markdown","db4a3f31":"markdown","13b547ac":"markdown","028f0409":"markdown","c3e10c5b":"markdown","81e935d0":"markdown","38f4b3bc":"markdown","33e77055":"markdown","4cb7cc50":"markdown","3c8006ea":"markdown","1c6ecef6":"markdown","42de3d9c":"markdown"},"source":{"93b76b69":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split , cross_val_score , RepeatedStratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier, plot_tree","be42aba8":"df = pd.read_csv(\"..\/input\/telecom-users\/telecom_users.csv\")\ndf.shape","ae41bee0":"df.head()","fe1d57e9":"df.columns.values","cdf31850":"df.drop(columns=['Unnamed: 0' ], inplace=True) #dropping the first column\ndf.columns","c40bc116":"df.info()","ac700a98":"df.Churn.value_counts()","97c87bc3":"def get_categorical(X, threshold=10):\n    \"\"\"\n        Identifies categorical columns in the dataframe.\n        threshold = 10 because we do not want to include continuous variables like tenure,monthly and \n        total charges which have more than 10 unique values\n    \"\"\"\n    cat_cols = []\n    for col in X.columns:\n       # print(col)\n        if len(X[col].unique()) <= threshold:\n            cat_cols.append(col)\n    return cat_cols\n\n\ndef convert_to_categorical(columns, X):\n    \"\"\"\n       Converts the columns passed in `columns` to categorical datatype\n    \"\"\"\n    print(columns)\n    for col in columns:\n        X[col] = X[col].astype('category')\n    return X\n\n","82b9630a":"df = convert_to_categorical(get_categorical(df), df)\ndf.TotalCharges = pd.to_numeric(df.TotalCharges,errors='coerce')\ndf.SeniorCitizen.astype('str')\ndf.info()","d8ddb1db":"df.isnull().sum()   ","c8507831":"df.dropna(inplace=True)","9a662312":"df.isnull().sum()","7922d1c4":"%matplotlib inline","a9dff42d":"sns.catplot(x='gender', hue='Churn', kind='count', palette='bright', data=df)","879e93ac":"sns.catplot(x='SeniorCitizen',hue='Churn', palette='bright',kind='count',data=df)","34669264":"sns.catplot(x='Dependents',hue='Churn',kind='count',data=df)","770775f7":"sns.catplot(x='Partner',hue='Churn',kind='count',data=df)","b4a0b2e5":"sns.catplot(x='PhoneService', hue='Churn', kind='count', palette='pastel', data=df)","5e924463":"sns.catplot(x='MultipleLines', hue='Churn', kind='count', palette='pastel', data=df)","6b0edb3b":"pd.crosstab(index = df[\"PhoneService\"], columns = df[\"MultipleLines\"])","6f985f6b":"sns.catplot(x='InternetService', hue='Churn', kind='count', palette='pastel', data=df)","3849dec1":"sns.catplot(x='OnlineSecurity', hue='Churn', kind='count', palette='pastel', data=df)","de4da3e8":"pd.crosstab(index = df[\"InternetService\"], columns = df[\"OnlineSecurity\"])","ce852f38":"sns.catplot(x='OnlineBackup', hue='Churn', kind='count', palette='pastel', data=df)","efd1ff04":"pd.crosstab(index = df[\"InternetService\"], columns = df[\"OnlineBackup\"])","ecaeb83d":"sns.catplot(x='DeviceProtection', hue='Churn', kind='count', palette='pastel', data=df)","03b8d620":"pd.crosstab(index = df[\"InternetService\"], columns = df[\"DeviceProtection\"])","6e508ea2":"sns.catplot(x='TechSupport', hue='Churn', kind='count', palette='pastel', data=df)","a6eb4f14":"pd.crosstab(index = df[\"InternetService\"], columns = df[\"TechSupport\"])","c88b03ff":"sns.catplot(x='StreamingTV', hue='Churn', kind='count', palette='pastel', data=df)","299d2010":"pd.crosstab(index = df[\"InternetService\"], columns = df[\"StreamingTV\"])","2a466720":"sns.catplot(x='StreamingMovies', hue='Churn', kind='count', palette='pastel', data=df)","6348109b":"pd.crosstab(index = df[\"InternetService\"], columns = df[\"StreamingMovies\"])","fd018191":"sns.catplot(x='PaperlessBilling', hue='Churn', kind='count', palette='dark', data=df)","82ee2c17":"sns.catplot(y='Contract', hue='Churn', kind='count', palette='dark', data=df)","871e3cd9":"sns.catplot(y='PaymentMethod', hue='Churn', kind='count', palette=\"dark\", data=df)","ed83ce14":"df[['tenure', 'MonthlyCharges', 'TotalCharges']].corr()","221efc18":"df.describe()","fd19c861":"df['Churn']","fcbabadb":"fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15, 5))\ncols = ['TotalCharges', 'MonthlyCharges', 'tenure']\nfor i in range(len(cols)):\n    sns.boxplot(x=df[\"Churn\"], y=cols[i], data=df, ax=axes[i])\nfig.tight_layout()","76e4db7c":"X = df.iloc[:,1:-1]\ny = df.loc[:,['Churn']]","402e8dad":"from sklearn.preprocessing import FunctionTransformer\n\ndef convert_no_services(X):\n    \"\"\"This function replaces 'No Internet\/Phone' Service with 'No' for the apt. variables\"\"\"\n    for col in X.columns.values:\n        for cat in X[col].unique():\n            try:\n                if cat.find('service') != -1:\n\n                    if cat.find('internet') != -1:\n\n                        X[col] = X[col].replace({'No internet service':'No'}).astype(\"category\")\n\n                    elif cat.find('phone') !=  -1:\n\n                        X[col] = X[col].replace({'No phone service':'No'}).astype(\"category\")\n\n            except:\n                pass\n    return X\n\n    \nservices_ = FunctionTransformer(convert_no_services, validate=False)","9c4c8440":"X.head(4)","2f2fd880":"X = services_.fit_transform(X)","793b9640":"X.head(4)","eebc7619":"for col in X.columns:\n    print(col.upper())\n    print(X[col].unique())\n    print()","7e5ce917":"df.info()","d7acd935":"categorical_columns = list(X.select_dtypes(include='category').columns)\nnumeric_columns = list(X.select_dtypes(exclude='category').columns)","cff3183f":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\n\n## Column Transformer\ntransformers = [('one_hot_encoder', OneHotEncoder(drop='if_binary',dtype='int'),categorical_columns),\n               ('Standard_Scaler', StandardScaler(), numeric_columns)]\n\n                \nx_trans = ColumnTransformer(transformers, remainder='passthrough')\n\n## Applying Column Transformer\nX = pd.DataFrame(x_trans.fit_transform(X))\n\n\n## Label encoding --> Yes=1 , No=0\ny_trans = LabelEncoder()\ny = pd.DataFrame(y_trans.fit_transform(y.Churn), columns=[\"Churn\"])\n\n\n\n## Save feature names after one-hot encoding\nfeature_names = list(x_trans.named_transformers_['one_hot_encoder'] \\\n                            .get_feature_names(input_features=categorical_columns))\nfeature_names = feature_names + numeric_columns","27fd78ff":"X.shape, y.shape","26e4c266":"X.head()","4bd0dddb":"X.columns=feature_names\nX.head().T","9ee43574":"X.describe().T","762bffa7":"from sklearn.decomposition import PCA\n","46090620":"scaler = StandardScaler()\nX_scaled = scaler.fit_transform(X) \n# In the transformer, we only standardized the numeric features.\n# PCA works better if the entire dataset is standardized.","8b124e48":"pca = PCA(n_components=2) # reducing the dimensions of the dataset to 2 for visualization ","d806cf0b":"X2D = pca.fit_transform(X_scaled)","14265dc4":"X2D = pd.DataFrame(X2D,columns=['PC1','PC2'])\nX2D","a7bf6d6f":"%matplotlib inline\nplt.figure(figsize=(12,10))\nsns.scatterplot(X2D.iloc[:,0], X2D.iloc[:,1], hue=y.iloc[:,0])\nplt.show()","f499defb":"X.shape, y.shape","79457ec5":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,shuffle=True,\n                                                    stratify=y, random_state=0)\n\n\nX_train.shape, X_test.shape, y_train.shape,  y_test.shape \n","98d8d5a1":"from sklearn.model_selection import RandomizedSearchCV","b0793e34":"XGB = XGBClassifier(random_state=0)","bb119574":"param_grid = {\n    'silent': [False],\n    'max_depth': [ 4, 5, 6, 7, 8],\n    'learning_rate': [0.01,0.05, 0.08, 0.1, 0.1, 0.2, 0.3],\n    'subsample': [0.7, 0.8, 0.9, 1.0],\n    'colsample_bytree': [0.7, 0.8, 0.9, 1.0],\n    'colsample_bylevel': [0.7, 0.8, 0.9, 1.0],\n    'min_child_weight': [0.5, 1.0, 3.0],\n    'gamma': [0, 0.25, 0.5, 1.0],\n    'reg_lambda': [0.1, 1.0, 5.0, 10.0, 50.0, 100.0],\n    'n_estimators': [50, 100, 150, 200, 300],\n    'scale_pos_weight': [1, 1.5, 2, 2.5, 3],\n    'max_delta_step': [1, 2, 3]\n}\n\nclf = XGBClassifier(objective = 'binary:logistic', random_state=0)","38b80c94":"rs_clf = RandomizedSearchCV(clf, param_grid, n_iter=10,\n                            n_jobs=4, verbose=2, cv=3,\n                            scoring= 'roc_auc', refit=True, random_state=0)\n\nimport time\nprint(\"Randomized search..\")\nsearch_time_start = time.time()\nrs_clf.fit(X_train, y_train)\nprint(\"Randomized search time:\", time.time() - search_time_start,\"seconds.\")","d6c349be":"rs_clf.best_estimator_","5d0368a8":"rs_clf.best_params_","c943aa5e":"rs_clf.best_score_","acac825b":"positive = np.count_nonzero(y_train)\nnegative = y_train.shape[0] - positive\npositive, negative","96f27538":"estimate = negative \/ positive\nestimate # Weight for cost-sensitivity parameter of xgboost. (scale_pos_weight)","5e14c825":"xgb_clf = XGBClassifier(colsample_bylevel=0.8, colsample_bytree=0.9, gamma=1.0,\n              learning_rate=0.08, max_delta_step=1, max_depth=4,\n              min_child_weight=1.0, n_estimators=50, reg_lambda=50.0,\n              scale_pos_weight=estimate, silent=False, subsample=1.0,objective = 'binary:logistic')\nxgb_clf.fit(X_train, y_train)","c6373a42":"from sklearn.metrics import accuracy_score,precision_score, recall_score, f1_score\nfrom sklearn.metrics import roc_curve, roc_auc_score\nfrom sklearn.metrics import plot_confusion_matrix, plot_roc_curve, plot_precision_recall_curve\nfrom sklearn.metrics import classification_report, precision_recall_curve\n%matplotlib inline","5f88a4b3":"y_pred = xgb_clf.predict(X_test)   \ny_prob = xgb_clf.predict_proba(X_test)","d6c40920":"y_prob_1 = y_prob[:, 1] # probabilties of positive class i.e Churn","14d8933e":"print(\"Accuracy Score = \",accuracy_score(y_test, y_pred))","715c0248":"print(\" Roc_Auc_Score = \",np.round(roc_auc_score(y_test, y_prob_1),3))","98aed5d8":"plot_roc_curve(xgb_clf, X_test, y_test)\nplt.plot([0,1],[0,1], 'k--',label=\"RandomClassifier(AUC = 0.5)\")\nplt.legend()","6f7dad31":"plt.figure(figsize=(10,10))\nplot_confusion_matrix(xgb_clf, X_test, y_test)","c11b0939":"Precision =  precision_score(y_test, y_pred)\nRecall = recall_score(y_test, y_pred)\nF1 = f1_score(y_test, y_pred)\n\nprint(f'Precision : {Precision}\\nRecall : {Recall}\\nF1 Score : {F1}')","4cf7d2a3":"plot_precision_recall_curve(xgb_clf, X_test, y_test)\nplt.plot(Recall,Precision,marker=\"o\",c='red')\nplt.grid()","aebaa1b6":"print(classification_report(y_test, y_pred))","a55670af":"precisions, recalls, thresholds = precision_recall_curve(y_test, y_prob_1)\ndef plot_precision_recall_vs_threshold(precisions, recalls, thresholds):\n    %matplotlib inline\n    plt.figure(figsize=(10,6))\n    plt.plot(thresholds, precisions[:-1], \"b--\", label=\"Precision\")\n    plt.plot(thresholds, recalls[:-1], 'g-', label=\"Recall\")\n    plt.legend()\n    plt.grid(True)\n    plt.show()","5e19ae6e":"plot_precision_recall_vs_threshold(precisions, recalls, thresholds)","82a91bc0":"from xgboost import plot_importance\nfig, ax = plt.subplots(figsize=(10,8))\nplot_importance(xgb_clf, ax=ax)","60f608c9":"churn_probs = xgb_clf.predict_proba(X)[:,1]\ndf[\"Predicted Churn Prob\"] = churn_probs\nsns.distplot(df[\"Predicted Churn Prob\"])","37602ceb":"df[['customerID', 'Churn', 'Predicted Churn Prob']].tail(10)","b53ead2b":"## Important Features","4f81dd26":"- 10 missing values\n\nWe'll just simply drop these samples since they're very less","bd265127":"# Application\n\nNormally in business setting, we will use the prediction score, rather than the class prediction. This score is used to associate with the subscriber profiles, and can be used to adjust for campaign targeting.","a0aecbfd":"\n**About the dataset**\n\ncustomerID - customer id\n\ngender - client gender (male \/ female)\n\nSeniorCitizen - is the client retired (1, 0)\n\nPartner - is the client married (Yes, No)\n\ntenure - how many months a person has been a client of the company\n\nPhoneService - is the telephone service connected (Yes, No)\n\nMultipleLines - are multiple phone lines connected (Yes, No, No phone service)\n\nInternetService - client's Internet service provider (DSL, Fiber optic, No)\n\nOnlineSecurity - is the online security service connected (Yes, No, No internet service)\n\nOnlineBackup - is the online backup service activated (Yes, No, No internet service)\n\nDeviceProtection - does the client have equipment insurance (Yes, No, No internet service)\n\nTechSupport - is the technical support service connected (Yes, No, No internet service)\n\nStreamingTV - is the streaming TV service connected (Yes, No, No internet service)\n\nStreamingMovies - is the streaming cinema service activated (Yes, No, No internet service)\n\nContract - type of customer contract (Month-to-month, One year, Two year)\n\nPaperlessBilling - whether the client uses paperless billing (Yes, No)\n\nPaymentMethod - payment method (Electronic check, Mailed check, Bank transfer (automatic), Credit \n\ncard (automatic))\n\nMonthlyCharges - current monthly payment\n\nTotalCharges - the total amount that the client paid for the services for the entire time\n\nChurn - whether there was a churn (Yes or No)","c61f08f9":"# XGBoost","a0ef2386":"- About 30-40% of customers have dependents and thus they are less likely to churn.\n- Most Customers are those who do not have anyone who depends on them ","a941e525":"----------------------------------------**THANK YOU**----------------------------------------------","94932e62":"- Most Churn Customers were those who used Electronic Check for Payment.","9e15f3cb":"- Shorter the Contract of a customer, higher the chance that he\/she will churn.","2354625b":"**It's okay if we sacrifice precision for a good recall here, because:**\n\n- we can afford misclassifying a non-churner as a churn customer and puuting extra efforts in oreder to retain him\/her for the company \n- But we cannot afford missing out churn customers and lose them.\n\n- So recall is more important than precision in this case.","6b9a4e54":"*-Continuous Features*","04010e7f":"- There are approx 15-20% of the customers who are senior citizens and most of our customers in the data are younger people.","96271b68":"# Splitting the data into train & test data ","06139fb8":"Area under the curve = 0.85 indicates that the classifier is very good.\n\nThis is so because the classifier is able to detect more numbers of True positives and True negatives than False negatives and False positives.","2b3c6a23":"- About half of the customers in our data set are male while the other half are female and both are equally likely to churn.","804b8ab3":"Tenure-TotalCharges & Tenure-MonthlyCharges are positively correlated","3f7cb021":"**INFERENCE-**\n\n- If the subscribers have Internet services (either DSL or Fiber optic), the subscribers may opt to have other services related to Internet (i.e. streaming TV, device protection).\n\n- But if the subscribers don't have the Internet services, this secondary service will not be available for the subscribers.\n\n***conclusion*** : *No Internet\/Phone service is just creating redundancy. When we preprocess the data, we will replace NO SERVICE with NO and will proceed with only two categories for these features*","58afab9d":"### - *Exploring demographic Caterical features*","6a072adf":"- Customers who use paperless billing methods churn at a comparatively very higher rate than those who does not use paperless billing service.","e45634ae":" Churn Customers have:\n\n- tenure around of 0 to 25 months , mostly 10(mean)\n\n- Monthly Charges from 60 to 85\n\n- Total Charges upto 2000\n","b396f3f9":"The reason for the classifier is not achieving higher F1 scores (like > 95%) is because the churn and no-churn classes are overlapping making it difficult for the classifier to identify a perfect decision boundary without sacrificing either precision or recall.","6f707ab4":" - Around 45-50% Customers have partners while Single customers Churn more\n    \n    ","79e9c737":"# Data Preprocessing","f9bc7b0b":"### - *Exploring features desciribing services used by customers*","db4a3f31":"**INFERENCE-**\n\n- If the subscribers have phone service, they may have multiple lines (yes or no).\n\n- But if the subscribers don't have phone service, the subscribers will never have multiple lines.","13b547ac":"- There is clear imbalance in the two classes\n","028f0409":"*Since the data is imbalanced, accuracy is not a good measure to evaluate the model.*\n\n*So we don't mind if the accuracy of the model is low*","c3e10c5b":"## Visualizatiions \n","81e935d0":"### Model Evaluation","38f4b3bc":"**PROBLEM STATEMENT -**\n\nCustomer churn means shifting from one service provider to its competitor in the market. Customer churn is one of the biggest fears of any industry, particularly for the telecom industry. With an increase in the number of telecom service providers in South Asia, the level of competition is quite high. Although there are many reasons for customer churn, some of the major reasons are service dissatisfaction, costly subscription, and better alternatives. The telecom service providers strive very hard to sustain in this competition. So to sustain this competition they often try to retain their customers than acquiring new ones as it proved to be much costlier. Hence predicting churn in the telecom industry is very important. To reduce customer churn, telecom companies need to predict which customers are at high risk of churn.","33e77055":"## PCA\n","4cb7cc50":"**The data is not linearly separable as the churn and non-churn classes overlap each other**\n","3c8006ea":"### Model Training","1c6ecef6":"# EDA","42de3d9c":"- TotalCharges should be converted to numerical (to find missing values)\n\n- All dtype of categorical features to be converted from dtype=object to dtype=category "}}