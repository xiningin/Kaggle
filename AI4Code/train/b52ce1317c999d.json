{"cell_type":{"2cbacc0b":"code","bebda6ee":"code","1c85ae11":"code","37a171b6":"code","392d9a56":"code","c0032ebd":"code","6735a0b4":"code","f40406a7":"code","9b451323":"code","acd6767b":"code","be050c9a":"code","837c0c11":"code","bb9cf125":"code","2991a879":"code","b8c36f33":"code","978dbb72":"code","7cabe2ff":"code","208bc12a":"code","482bf414":"code","14a22add":"code","1d111c4c":"code","a7b318b5":"code","a85e1ab4":"code","d3a2911b":"code","8114980a":"code","5404887c":"code","2addb033":"code","f9a3026a":"code","b7260f9b":"code","dba419cb":"code","9d13b1f4":"code","bdc190c5":"code","01c2932a":"code","07fafb08":"code","d88f43a6":"code","5f13c794":"code","b67324b5":"code","b7226d70":"code","56f74a1b":"code","26582f23":"code","58e49c07":"code","77fa4836":"code","25cfb518":"markdown","30461872":"markdown","fa62e1e5":"markdown","7d4eead9":"markdown","f8b78b1a":"markdown","f5b91200":"markdown","46928973":"markdown","5c6de818":"markdown","9de98126":"markdown","dad7ec5a":"markdown","8f361596":"markdown","30e470ab":"markdown","fa87d24f":"markdown","573522f3":"markdown","31261651":"markdown","2dce2b6f":"markdown","af287b24":"markdown","506b641f":"markdown","9315ea00":"markdown","7bc8553a":"markdown","ff793739":"markdown","6c10219f":"markdown","7d54df24":"markdown","f1c2a070":"markdown","0da1029d":"markdown","b529939e":"markdown","c2d11427":"markdown","a59673aa":"markdown","c19320e0":"markdown","a4ba814a":"markdown","ce839de4":"markdown","6142870e":"markdown","abda9929":"markdown","30e46448":"markdown","89e1ea0a":"markdown","0c4b9e98":"markdown","d1abbe16":"markdown","987a8ff7":"markdown","f782467b":"markdown"},"source":{"2cbacc0b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.layers import Dropout\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom catboost import CatBoostClassifier","bebda6ee":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')\n\nfull=pd.concat([train,test],ignore_index=True)\ntest.head()","1c85ae11":"full.describe()","37a171b6":"full.isnull().sum()","392d9a56":"full.drop(['Cabin'],axis=1,inplace=True)","c0032ebd":"full.boxplot(column='Fare',by='Pclass',figsize=(16,8))","6735a0b4":"full[['Pclass','Fare']].groupby('Pclass').median()","f40406a7":"full.loc[full.Fare.isnull(),:]","9b451323":"full.Fare.fillna(8.05, inplace=True)\n\nfull.isnull().sum()","acd6767b":"full.boxplot(column='Age',by='Sex',figsize=(16,8))","be050c9a":"full.boxplot(column='Age',by='Pclass',figsize=(16,8))","837c0c11":"Age_mean_median_by_Pclass=full[['Pclass','Age']].groupby('Pclass').aggregate(['mean','median'])\nAge_mean_median_by_Pclass","bb9cf125":"age_class1_fill=Age_mean_median_by_Pclass.iloc[0,0].round(2)\nage_class2_fill=Age_mean_median_by_Pclass.iloc[1,0].round(2)\nage_class3_fill=Age_mean_median_by_Pclass.iloc[2,1].round(2)\n\nfull.loc[full.Pclass==1,'Age']=full.loc[full.Pclass==1,'Age'].fillna(age_class1_fill)\nfull.loc[full.Pclass==2,'Age']=full.loc[full.Pclass==2,'Age'].fillna(age_class2_fill)\nfull.loc[full.Pclass==3,'Age']=full.loc[full.Pclass==3,'Age'].fillna(age_class3_fill)\n\nfull.isnull().sum()","2991a879":"full['Embarked'].value_counts()","b8c36f33":"full['Embarked'].fillna('S',inplace=True)\n\nfull.isnull().sum()","978dbb72":"Ticket_num=full['Ticket'].str.split(' ').str[-1]\nle = LabelEncoder()\nTicket_num=le.fit_transform(Ticket_num)\nfull['Ticket']=Ticket_num\nfull['Ticket']","7cabe2ff":"first_name=full['Name'].str.split(',').str[1]\nname_title=first_name.str.split(' ').str[1]\n\nname_title=name_title.replace([\"Ms.\", \"Mlle.\"], \"Miss.\")\nname_title=name_title.replace([\"Mme.\", \"the\", \"Lady.\", \"Dona.\"], \"Mrs.\")\nname_title=name_title.replace([\"Dr.\", \"Major.\", \"Col.\", \"Sir.\", \"Rev.\", \"Jonkheer.\", \"Capt.\", \"Don.\"], \"Mr.\")\nfull['Name_title']=name_title\n\nfull.drop('Name',axis=1,inplace=True)\nfull['Name_title']","208bc12a":"Sex_map={'male':0,'female':1}\nEmbarked_map={'S':0,'C':1,'Q':2}\nName_title_map={'Mr.':0,'Mrs.':1,'Miss.':2,'Master.':3}\nfull['Sex']=full['Sex'].map(Sex_map)\nfull['Embarked']=full['Embarked'].map(Embarked_map)\nfull['Name_title']=full['Name_title'].map(Name_title_map)\nfull.head()","482bf414":"full['Family_size']=full['SibSp']+full['Parch']\n\nfull.drop(['SibSp','Parch'],axis=1,inplace=True)\n\nfull['Fare']=(full['Fare']-full['Fare'].mean())\/full['Fare'].std()\nfull['Fare']\n\nfull.head()","14a22add":"train=full.loc[full['Survived'].notnull(),:]\ntest=full.loc[full['Survived'].isnull(),:].drop('Survived',axis=1)\n\nX=train.drop(['PassengerId','Survived'],axis=1)\ny=train['Survived']\n\nX_test=test.drop('PassengerId',axis=1)","1d111c4c":"model_RF=RandomForestClassifier(n_estimators=250,class_weight=\"balanced\")\nparam_grid={'max_features':['auto', 'sqrt', 'log2']}\ngrid_RF=GridSearchCV(model_RF,param_grid,cv=5)\n\ngrid_RF.fit(X,y);\n\nprint('best_score=',grid_RF.best_score_)\n\nbest_model_RF=grid_RF.best_estimator_\ny_predict_RF=best_model_RF.predict(X_test)","a7b318b5":"model_LR=LogisticRegression(class_weight=\"balanced\",solver=\"liblinear\",)\nparam_grid={\"C\": [0.001, 0.01, 0.1, 1.],\"penalty\": [\"l1\", \"l2\"]}\ngrid_LR=GridSearchCV(model_LR,param_grid,cv=5)\n\ngrid_LR.fit(X,y);\n\nprint('best_score=',grid_LR.best_score_)\n\nbest_model_LR=grid_LR.best_estimator_\ny_predict_LR=best_model_LR.predict(X_test)","a85e1ab4":"model_svc = SVC(kernel='linear',class_weight='balanced',probability=True)\nparam_grid = {'C': [0.001, 0.01, 0.1, 1.]}\ngrid_svc = GridSearchCV(model_svc, param_grid, cv=5)\n\ngrid_svc.fit(X,y);\n\nprint('best_score=',grid_svc.best_score_)\n\nbest_model_svc=grid_svc.best_estimator_\ny_predict_svc=best_model_svc.predict(X_test)","d3a2911b":"model_ADA=AdaBoostClassifier()\nparam_grid = {'learning_rate': [0.001, 0.01, 0.1, 1.]}\ngrid_ADA = GridSearchCV(model_ADA, param_grid, cv=5)\n\ngrid_ADA.fit(X,y);\n\nprint('best_score=',grid_ADA.best_score_)\n\nbest_model_ADA=grid_ADA.best_estimator_\ny_predict_ADA=best_model_ADA.predict(X_test)","8114980a":"cat_features = [0, 1]\nmodel_cat=CatBoostClassifier(verbose=False)\nparam_grid = {'learning_rate': [0.001, 0.01, 0.1, 1.]}\ngrid_cat = GridSearchCV(model_cat, param_grid, cv=5)\n\ngrid_cat.fit(X,y);\n\nprint('best_score=',grid_cat.best_score_)\n\nbest_model_cat=grid_cat.best_estimator_\ny_predict_cat=best_model_cat.predict(X_test)","5404887c":"X_neural=X.values\ny_neural=to_categorical(y)\nX_test_neural=X_test.values","2addb033":"def create_model(layers=[10],activation='relu',drop=0,optimizer='adam'):\n    np.random.seed(42)\n    tf.random.set_seed(42)\n    \n    model=Sequential()\n    model.add(Dense(layers[0],activation=activation,input_shape=(X_neural.shape[1],)))\n    \n    if len(layers)>1:\n        for layer in layers[1:]:\n            model.add(Dense(layer,activation=activation))\n            \n    model.add(Dropout(drop))\n    model.add(Dense(2,activation='softmax'))\n    model.compile(loss='binary_crossentropy',optimizer=optimizer,metrics=['accuracy'])\n    \n    return model\n    \nmodel=create_model()\nmodel.summary()","f9a3026a":"def test_model(layers=[10],activation='relu',drop=0,optimizer='adam',epochs=50):\n    \n    accuracy_array=[]\n    \n    for cross_val in range(5): #cross validation 5 times\n        X_test_val=X_neural[int(round(cross_val*X.shape[0]\/5,0)):int(round((cross_val+1)*X.shape[0]\/5,0))]\n        y_test_val=y_neural[int(round(cross_val*X.shape[0]\/5,0)):int(round((cross_val+1)*X.shape[0]\/5,0))]\n        \n        if cross_val==0:\n            X_train_val=X_neural[int(round((cross_val+1)*X.shape[0]\/5,0)):]\n            y_train_val=y_neural[int(round((cross_val+1)*X.shape[0]\/5,0)):]\n        \n        elif cross_val==4:\n            X_train_val=X_neural[:int(round(cross_val*X.shape[0]\/5,0))]\n            y_train_val=y_neural[:int(round(cross_val*X.shape[0]\/5,0))]\n            \n        else:\n            X_train_part_one=X_neural[:int(round(cross_val*X.shape[0]\/5,0))]\n            X_train_part_two=X_neural[int(round((cross_val+1)*X.shape[0]\/5,0)):]\n            X_train_val=np.concatenate([X_train_part_one,X_train_part_two],axis=0)\n            \n            y_train_part_one=y_neural[:int(round(cross_val*X.shape[0]\/5,0))]\n            y_train_part_two=y_neural[int(round((cross_val+1)*X.shape[0]\/5,0)):]\n            y_train_val=np.concatenate([y_train_part_one,y_train_part_two],axis=0)\n        \n        model=create_model(layers=layers,activation=activation,drop=drop,optimizer=optimizer)\n        history=model.fit(X_train_val,y_train_val,epochs=epochs,verbose=False)\n        accuracy=history.history['accuracy'][-1]\n        accuracy_array.append(accuracy)\n    \n    accuracy_array=np.array(accuracy_array)\n    accuracy_mean=accuracy_array.mean()\n    print('accuracy=',round(accuracy_mean*100,2),'%')\n\ntest_model()","b7260f9b":"test_model([10])\ntest_model([20])\ntest_model([30])\ntest_model([40])\ntest_model([50])\ntest_model([60])\ntest_model([70])\ntest_model([80])\ntest_model([90])\ntest_model([100])","dba419cb":"test_model([90])\ntest_model([95])\ntest_model([100])\ntest_model([105])\ntest_model([110])","9d13b1f4":"test_model([100,10])\ntest_model([100,20])\ntest_model([100,30])\ntest_model([100,40])\ntest_model([100,50])\ntest_model([100,60])\ntest_model([100,70])\ntest_model([100,80])\ntest_model([100,90])\ntest_model([100,100])","bdc190c5":"test_model([100,15])\ntest_model([100,20])\ntest_model([100,25])","01c2932a":"test_model(layers=[100,20],activation='relu')\ntest_model(layers=[100,20],activation='selu')\ntest_model(layers=[100,20],activation='tanh')\ntest_model(layers=[100,20],activation='sigmoid')\ntest_model(layers=[100,20],activation='softmax')\ntest_model(layers=[100,20],activation='softplus')\ntest_model(layers=[100,20],activation='softsign')\ntest_model(layers=[100,20],activation='elu')\ntest_model(layers=[100,20],activation='exponential')","07fafb08":"test_model(layers=[100,20],activation='tanh',drop=0)\ntest_model(layers=[100,20],activation='tanh',drop=0.1)\ntest_model(layers=[100,20],activation='tanh',drop=0.2)\ntest_model(layers=[100,20],activation='tanh',drop=0.3)\ntest_model(layers=[100,20],activation='tanh',drop=0.4)\ntest_model(layers=[100,20],activation='tanh',drop=0.5)","d88f43a6":"test_model(layers=[100,20],activation='tanh',drop=0.05)\ntest_model(layers=[100,20],activation='tanh',drop=0.1)\ntest_model(layers=[100,20],activation='tanh',drop=0.15)","5f13c794":"test_model(layers=[100,20],activation='tanh',drop=0.04)\ntest_model(layers=[100,20],activation='tanh',drop=0.05)\ntest_model(layers=[100,20],activation='tanh',drop=0.06)","b67324b5":"test_model(layers=[100,20],activation='tanh',drop=0.04,optimizer='adam')\ntest_model(layers=[100,20],activation='tanh',drop=0.04,optimizer='sgd')\ntest_model(layers=[100,20],activation='tanh',drop=0.04,optimizer='RMSprop')\ntest_model(layers=[100,20],activation='tanh',drop=0.04,optimizer='Adagrad')\ntest_model(layers=[100,20],activation='tanh',drop=0.04,optimizer='Adadelta')\ntest_model(layers=[100,20],activation='tanh',drop=0.04,optimizer='Nadam')","b7226d70":"test_model(layers=[100,20],activation='tanh',drop=0.04,optimizer='adam',epochs=50)\ntest_model(layers=[100,20],activation='tanh',drop=0.04,optimizer='adam',epochs=100)\ntest_model(layers=[100,20],activation='tanh',drop=0.04,optimizer='adam',epochs=150)\ntest_model(layers=[100,20],activation='tanh',drop=0.04,optimizer='adam',epochs=200)\ntest_model(layers=[100,20],activation='tanh',drop=0.04,optimizer='adam',epochs=250)\ntest_model(layers=[100,20],activation='tanh',drop=0.04,optimizer='adam',epochs=300)","56f74a1b":"model=create_model(layers=[100,20],activation='tanh',drop=0.04,optimizer='adam')\nmodel.fit(X_neural,y_neural,epochs=250,verbose=False)\ny_predict_neural=model.predict(X_test_neural)\ny_predict_neural[:10]","26582f23":"y_predict_neural=np.array(y_predict_neural).argmax(axis=1)\ny_predict_neural","58e49c07":"result_df=pd.DataFrame({'RF':y_predict_RF,'SVC':y_predict_svc,'ADA':y_predict_ADA,'CAT':y_predict_cat,'NN':y_predict_neural})\nvote_df=result_df.mode(axis=1)\nvote_df","77fa4836":"PassengerId_df=pd.DataFrame({'PassengerId':test.index+1})\nsubmission_df=pd.concat([PassengerId_df,vote_df.astype(int)],axis=1)\nsubmission_df=submission_df.rename({0:'Survived'},axis=1)\nsubmission_df=submission_df.set_index('PassengerId')\nsubmission_df.to_csv('submission.csv')","25cfb518":"# Get the data ready","30461872":"#### Manual adjust activation function","fa62e1e5":"Add family size and normalize fare","7d4eead9":"Plot boxplot of Age by sex","f8b78b1a":"There are so many null in Cabin, so I will drop it","f5b91200":"Prepare data for neural network","46928973":"Convert string data to numberic data","5c6de818":"From boxplot Fare is very skew when I observed from green line, so median might be best choice to fill value","9de98126":"#### Manual adjust epochs","dad7ec5a":"### Experiment with neural network","8f361596":"## RandomForest","30e470ab":"Maybe mode is best choice to fill missing values in embarked","fa87d24f":"## SVC","573522f3":"Next I will fill in Fare value but I need to check Fare distribution first\nI think Fare might relate to Pclass, so I plot a boxplot","31261651":"# Do machine learning","2dce2b6f":"Plot boxplot of Age by Pclass","af287b24":"Adding more epochs might yield better result but cost more training time so I choose 250 epochs","506b641f":"## LogisticRegression","9315ea00":"Explore embarked","7bc8553a":"## Neural Network","ff793739":"#### Manual adjust optimizer","6c10219f":"I'm satisfy with accuracy of dropout 4% provide so I stop digging further","7d54df24":"#### Manual adjust model capacity","f1c2a070":"Extract ticket number and do a label encode","0da1029d":"Choose location with most proability","b529939e":"Split full into train and test and select predictor and target","c2d11427":"Try adding another layer","a59673aa":"I adapt neural network structure from this [notebook](https:\/\/www.kaggle.com\/jamesleslie\/titanic-neural-network-for-beginners#3.-Neural-Network)","c19320e0":"## Predict","a4ba814a":"I see difference of Age in each class, this might be useful information in which value should we fill in age column\nIn class 1 and class 2, it looklike normal distribution when I observe from green line\nIn class 3, it might be a little bit skew\n\nSo in conclude for people who in class 1 and class 2, I fill their age with mean\n\nIn class 3, I fill their age with median","ce839de4":"I use some technique from this [notebook](https:\/\/www.kaggle.com\/ihelon\/titanic-hyperparameter-tuning-with-gridsearchcv)","6142870e":"# Submit","abda9929":"## CatBoost","30e46448":"To avoid equal vote, I will remove least accuracy model which is logistic regression","89e1ea0a":"## AdaBoostClassifier","0c4b9e98":"#### Manual adjust dropout layer","d1abbe16":"## Stacking","987a8ff7":"Extract name title","f782467b":"He is in class 3 and he is the only one who have missing value in Fare, so I fill Fare with 8.05"}}