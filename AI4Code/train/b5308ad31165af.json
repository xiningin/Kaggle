{"cell_type":{"586cb3d9":"code","bb44ff86":"code","c4c5acbe":"code","f30043d4":"code","9668f513":"code","e2ae2933":"code","004aa642":"code","a69657ed":"code","32099d74":"code","466730bd":"code","c8da503c":"code","ecc1b339":"code","b91f8c76":"code","fb68e6c3":"code","07619574":"code","a54fe4f0":"code","fa48b33b":"code","c2467049":"code","72c5f4e8":"code","a30fbb99":"code","8084be83":"code","0daf9f97":"markdown","d8365c44":"markdown","b4c78d45":"markdown","3fda7c0b":"markdown","e476b4b5":"markdown","6d4acbe8":"markdown","ec5feebe":"markdown","024d05e3":"markdown","bfc6e62e":"markdown","d4c206ac":"markdown","b5ba5b50":"markdown"},"source":{"586cb3d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bb44ff86":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\na=pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ntrain.head()\ntest.head()","c4c5acbe":"train.isnull().sum().sort_values(ascending=False)","f30043d4":"train.drop(['Cabin', 'Name', 'Ticket'], axis=1, inplace=True)\n","9668f513":"train['Age']= train['Age'].fillna(train['Age'].mean())\n","e2ae2933":"train['Embarked'].value_counts()\n","004aa642":"train.dropna(subset=['Embarked'],axis = 0 ,inplace = True)","a69657ed":"train = pd.get_dummies(data=train, columns=['Embarked'])\ntrain = pd.get_dummies(data=train, columns=['Sex'])","32099d74":"train['Fare'] = train['Fare'].astype(int, copy=True)\ntrain['Age'] = train['Age'].astype(int, copy=True)","466730bd":"import matplotlib.pyplot as plt \nplt.hist(train['Age'])\nplt.show()","c8da503c":"bins = np.linspace(min(train['Age']), max(train['Age']), 9 )\nlabel = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\ntrain['New_age']= pd.cut(train['Age'], bins, labels=label, include_lowest=True)\ntrain = pd.get_dummies(data=train, columns=['New_age'])","ecc1b339":"train.drop(['Age'], axis=1, inplace=True)\n","b91f8c76":"import matplotlib.pyplot as plt \nplt.hist(train['Fare'])\nplt.show()","fb68e6c3":"bins = np.linspace(min(train['Fare']), max(train['Fare']),  11)\nlabel = ['AB', 'BC', 'CD', 'DE', 'EF', 'FG', 'GH', 'HI', 'IJ', 'JK']\ntrain['New_Fare']= pd.cut(train['Fare'], bins, labels=label, include_lowest=True)\ntrain = pd.get_dummies(data=train, columns=['New_Fare'])\ntrain.drop(['Fare'], axis=1, inplace=True)","07619574":"train.set_index('PassengerId',inplace = True)\ntrain.head()","a54fe4f0":"test.drop(['Cabin', 'Name', 'Ticket'], axis=1, inplace=True)\ntest['Age']= test['Age'].fillna(test['Age'].mean())\ntest.dropna(subset=['Embarked'],axis = 0 ,inplace = True)\ntest = pd.get_dummies(data=test, columns=['Embarked'])\ntest = pd.get_dummies(data=test, columns=['Sex'])\ntest['Fare']= test['Fare'].fillna(test['Fare'].mean())\ntest['Fare'] = test['Fare'].astype(int, copy=True)\ntest['Age'] = test['Age'].astype(int, copy=True)\nbins = np.linspace(min(test['Age']), max(test['Age']), 9 )\nlabel = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\ntest['New_age']= pd.cut(test['Age'], bins, labels=label, include_lowest=True)\ntest = pd.get_dummies(data=test, columns=['New_age'])\ntest.drop(['Age'], axis=1, inplace=True)\nbins = np.linspace(min(test['Fare']), max(test['Fare']),  11)\nlabel = ['AB', 'BC', 'CD', 'DE', 'EF', 'FG', 'GH', 'HI', 'IJ', 'JK']\ntest['New_Fare']= pd.cut(test['Fare'], bins, labels=label, include_lowest=True)\ntest = pd.get_dummies(data=test, columns=['New_Fare'])\ntest.drop(['Fare'], axis=1, inplace=True)\ntest.set_index('PassengerId',inplace = True)\ntest.head()","fa48b33b":"X_train = train.drop(['Survived'], axis=1)\nY_train= train['Survived']\n","c2467049":"from sklearn.naive_bayes import GaussianNB\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","72c5f4e8":"from sklearn.tree import DecisionTreeClassifier\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","a30fbb99":"from sklearn.ensemble import RandomForestClassifier\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","8084be83":"from sklearn.linear_model import SGDClassifier\nsgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\nacc_sgd","0daf9f97":"Now we will fit these X,Y in diff algorithm to check accuracies : ","d8365c44":"**Importing libraries and data , after that we will see inside that wd we have , i mean features :P ******","b4c78d45":"**There**** are also good algo and we can understand data more clearly but i am new and it takes time.. **","3fda7c0b":"# **Missing Values Work :","e476b4b5":"**First of ALL, we have to check missing values NAN in our DATA : \n**As there are many ways to deal NAN as we will make good features to improve our accuracy : ","6d4acbe8":"**First, we will work on just training data : **\nDrop colums which are not necessary, like ticket, Names because survival did not see any name here, as we have Gender column which is enough and also other features can give good accuracy ;) ","ec5feebe":"Now we have both test, train data, and we will fit train data into Train_X , and Train_Y .. to see how it works : Train_X data has independent feature and Train_Y has output which is dependent : ","024d05e3":"**For Ordinal data : making dummies to make feature more clear for algo :**","bfc6e62e":"# Hi, Hope you fine, here my first Titanic project, i could not help on titanic boat but now i am trying to add my contributions here.. ******","d4c206ac":"**We Can See, that our train data is clear now and just like train data, we have to clean of Test data: **","b5ba5b50":"# Thanks a lot for having a look at this notebook. If you found this notebook useful, Do Upvote.\u00b6"}}