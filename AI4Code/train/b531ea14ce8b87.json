{"cell_type":{"4abb1c8d":"code","385ede70":"code","d3f0f6ab":"code","fd1cc218":"code","3c2ea5e5":"code","68e0428d":"code","9e1d8d77":"code","011a6a6d":"code","9202ec54":"code","f2caae16":"code","ffd9899a":"code","6127d94c":"code","941c5537":"code","2d0d7a37":"code","b45e15f6":"code","3dea3a42":"code","77720055":"code","14296845":"code","89a6ee6b":"code","c2b888d0":"code","513d7599":"code","8ddd35e8":"code","2d12fe51":"code","6d0e49a5":"code","0225e7ab":"code","d5a4ba1e":"code","28421368":"code","b7e9ec30":"code","329871c1":"code","011bdf53":"code","1342157b":"code","05a992f8":"code","570ca405":"markdown","7c7d0f2a":"markdown","f46ea431":"markdown","b2d30516":"markdown"},"source":{"4abb1c8d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","385ede70":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom warnings import filterwarnings\nsns.set_theme()\n%config InlineBackend.figure_format = 'retina'\nfilterwarnings('ignore')","d3f0f6ab":"train=pd.read_csv('..\/input\/30-days-of-ml\/train.csv')\ntest=pd.read_csv('..\/input\/30-days-of-ml\/test.csv')","fd1cc218":"train.head()","3c2ea5e5":"test.head()","68e0428d":"missing_train=train.isnull().sum()\nif (missing_train.sum())==0:\n  print('No Null Values in Train set')\nelse:\n  print('Null Values Are Present in Train Set')\n\nmissing_test=train.isnull().sum()\nif (missing_test.sum())==0:\n  print('No Null Values in Test set')\nelse:\n  print('Null Values Are Present in Test Set')","9e1d8d77":"train.info()","011a6a6d":"train.describe(include='all')","9202ec54":"test.describe(include='all')","f2caae16":"categorical_cols=train.select_dtypes(include=['object']).columns.values\nnumerical_cols=train.select_dtypes(include=['float64']).columns.values","ffd9899a":"for i in categorical_cols:\n    print(train[i].value_counts())","6127d94c":"numerical_cols","941c5537":"a=4\nb=5\nc=1\nfig=plt.figure(figsize=(25,20))\nfor i in numerical_cols[:14]:\n    plt.subplot(a,b,c)\n    plt.title('{}'.format(i))\n    plt.xlabel(i)\n    sns.scatterplot(x=train[i],y=train['target'],palette='rocket')\n    c=c+1\nplt.show()","2d0d7a37":"a=5\nb=2\nc=1\nfig=plt.figure(figsize=(25,25))\nfor i in categorical_cols:\n    plt.subplot(a,b,c)\n    plt.title('{}'.format(i))\n    plt.xlabel(i)\n    sns.countplot(train[i])\n    c=c+1\nplt.show()\n        ","b45e15f6":"plt.figure(figsize=(15,12))\ncorrs=train.iloc[:,:-1].corr()\ncorr_feature=corrs.index\nsns.heatmap(train[corr_feature].corr().round(3),annot=True,linecolor='white',cmap='magma',linewidths=2)","3dea3a42":"x_train=train.drop(['target'],axis=1)","77720055":"x_train.head()","14296845":"y_train=train['target']","89a6ee6b":"x_test=test.copy()","c2b888d0":"from sklearn.preprocessing import LabelEncoder","513d7599":"label=LabelEncoder()","8ddd35e8":"for i in categorical_cols:\n    x_train[i]=label.fit_transform(x_train[i])\n    ","2d12fe51":"for i in categorical_cols:\n    x_test[i]=label.fit_transform(x_test[i])","6d0e49a5":"x_train.head()","0225e7ab":"from sklearn.model_selection import train_test_split","d5a4ba1e":"x_train1,x_valid,y_train1,y_valid=train_test_split(x_train,y_train,test_size=0.2,random_state=1)","28421368":"from xgboost import XGBRFRegressor,XGBRegressor","b7e9ec30":"model=XGBRegressor(base_score=0.2,gamma=0.2,learning_rate=0.07,max_depth=3,reg_alpha=21,n_estimators=2000,n_jobs=-1,random_state=1,tree_method='gpu_hist')\nmodel.fit(x_train1,y_train1)","329871c1":"pred=model.predict(x_valid)\npred","011bdf53":"from sklearn.metrics import mean_squared_error","1342157b":"mean_squared_error(y_valid,pred,squared=False)","05a992f8":"# Use the model to generate predictions\npredictions = model.predict(x_test)\n\n# Save the predictions to a CSV file\noutput = pd.DataFrame({'Id': x_test.id,\n                       'target': predictions})\noutput.to_csv('submission.csv', index=False)","570ca405":"**PREPROCESSING THE DATA**","7c7d0f2a":"**SUBMISSION**","f46ea431":"**MODEL BUILDING**","b2d30516":"**EDA**"}}