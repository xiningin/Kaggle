{"cell_type":{"cb18c55f":"code","87a32e79":"code","767f51af":"code","0f73310d":"code","bc721c61":"code","49bafd97":"code","ac237857":"code","c9fcf8fc":"code","fa1fea4a":"code","bf9d5db4":"code","8ac653f5":"code","4944c22f":"code","3edd91ef":"code","80a1e565":"code","7fdb1733":"code","cde7ad34":"code","d910e0b9":"code","45a8e156":"code","12da5899":"code","fdd6a8b9":"code","a1f00f49":"code","9354e422":"code","2676ca41":"markdown","ea541097":"markdown","cbffd6cd":"markdown","db210582":"markdown","df4a3f76":"markdown","381dc345":"markdown","4b60301c":"markdown","51b1af7a":"markdown"},"source":{"cb18c55f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87a32e79":"iris=pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\n#or you can also write this as\n#iris=pd.read_csv(\"..\/input\/iris\/Iris.csv\")","767f51af":"iris.head()","0f73310d":"iris.info()","bc721c61":"iris.describe()","49bafd97":"print(iris[\"Species\"].value_counts())","ac237857":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","c9fcf8fc":"sns.pairplot(iris,hue=\"Species\")\nplt.show()","fa1fea4a":"?sns.pairplot","bf9d5db4":"import tensorflow","8ac653f5":"print(tensorflow.__version__) #you can use this \".__version__\" function with any library to check it's version.","4944c22f":"from pandas import get_dummies\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense","3edd91ef":"feature=iris.drop(columns=[\"Id\",\"Species\"])\nlabel=get_dummies(iris[\"Species\"]) #get_dummies is used to convert your categorical values into nueric binary format","80a1e565":"label.head()","7fdb1733":"from tensorflow.keras.optimizers import Adam\n#optimizers are used to optimize or minimize your loss or error function.","cde7ad34":"sq=Sequential()\nsq.add(Dense(units=10,activation=\"relu\",input_shape=(4,))) \n#units is analogus for neurons. No of neurons in a layer is equals to units defined in your function. It is also a\n#hyperperameter.\nsq.add(Dense(32,activation=\"relu\"))\n#Activation functions are used to make some adjusts in your outputs.\n#There are many activation function. ReLu is one of them.You can also use sigmoid,softmax,ELu,LRelu etc.\nsq.add(Dense(3,activation=\"softmax\"))\n#Softmax is used to get probabilistics optput instead of a specific label output. It provides probability to each \n#and every input labels. The category which will have highest probability will be considered as output for respective\n#observation.\nsq.compile(loss=\"categorical_crossentropy\",\n          optimizer=Adam(lr=0.1),\n          metrics=[\"accuracy\"]\n          )\n#As we have three categories in input labels that why we used categorical_crossentropy.\n#in metrics paramter : List of metrics to be evaluated by the model during training and testing","d910e0b9":"sq.summary()","45a8e156":"?tensorflow.keras.models.Sequential.compile","12da5899":"his=sq.fit(feature,label,epochs=100,batch_size=50,verbose=True)\n#epochs is number of times a complete dataset will pass from each layer. It is also a hypermeter. \n#batch_size is no of samples that will pass through a neuron at a time.\n#There is a another term used in neural network is called as \"iteration\". Iteratoin is = total_no_of_sample\/batch_size","fdd6a8b9":"type(his) #The \"his\" object that we created above is used to keep history of our ANN model","a1f00f49":"plt.figure(figsize=(10,6))\nplt.plot(his.epoch,his.history['loss'])\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.title(\"Epochs V\/S Loss\")\nplt.show()","9354e422":"plt.figure(figsize=(10,6))\nplt.plot(his.epoch,his.history['accuracy'])\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Epochs V\/S Accuracy\")\nplt.show()","2676ca41":"<h1> Now let's create a very simple ANN model<h1>","ea541097":"<h3> Sepal length,Sepal Width,Petal Length,Petal Width are our features <\/h3>\n    \n<h3> Species is our training labels <\/h3>","cbffd6cd":"# Let's do some visulization","db210582":"***In this tutorial we will try to understand that how a Artifical Neural Network model works***","df4a3f76":"<h1>Now let's visulalize how the loss and accuracy varied in each and every epoch<\/h1>","381dc345":"# Thank You.","4b60301c":"<h4> this below line is not a part of our model but this line helps a lot to understad which type of parameters we can pass to a function. Some times we don't remeber the actual parameter of a function, in hat situation it can helps you alot<\/h4>","51b1af7a":"<h1>  Most basic deep learning tutorial for Beginners <\/h1>"}}