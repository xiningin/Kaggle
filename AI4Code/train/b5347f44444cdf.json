{"cell_type":{"94af9b04":"code","2594362d":"code","f9e407ff":"code","4cbfd67e":"code","08e5c3d2":"code","e47b04b2":"code","ded103a6":"code","14c1b178":"code","091e6ac8":"code","1de5f021":"code","15449940":"code","1cd5b08f":"code","b4949f1d":"code","e32908d6":"code","a70c3edf":"code","f5ec9348":"code","c57b0a6c":"code","16d38b00":"code","c23dd440":"code","aab6fb58":"code","20229ca6":"code","d040bfd4":"code","5ad27314":"code","3570d4a0":"code","2b5d6701":"code","ab6eb489":"code","d6df4849":"code","fc6241b9":"code","e6297e2f":"code","437e6b19":"code","8a39fd38":"code","8f93d848":"code","46248248":"code","efe1d513":"code","b957610b":"code","12dceab0":"code","38e1b95c":"code","acdfd075":"code","0bb13d11":"code","97b6eeca":"code","72adac3c":"code","82032200":"code","f24b9ad2":"code","2b39dd75":"code","8a5a379c":"code","d4fca23f":"code","542d5eaa":"code","60f77797":"markdown","6fb8ed64":"markdown","902b557f":"markdown","f89f567e":"markdown","2c636998":"markdown","a71db8f8":"markdown","41c12990":"markdown","18f8ca94":"markdown","e3ce3180":"markdown"},"source":{"94af9b04":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","2594362d":"parser = lambda x: pd.datetime.strptime(x, '%Y-%m-%d %H:%M:%S')","f9e407ff":"dfGeneration_1=pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\ndfWeatherSensor_1=pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')\ndfGeneration_2=pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv')\ndfWeatherSensor_2=pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv')","4cbfd67e":"dfGeneration_1.describe()","08e5c3d2":"dfGeneration_1['DATE_TIME'] = pd.to_datetime(dfGeneration_1['DATE_TIME'], format ='%d-%m-%Y %H:%M')\ndfGeneration_1['DATE'] = dfGeneration_1['DATE_TIME'].dt.date\ndfGeneration_1['DATE'] = pd.to_datetime(dfGeneration_1['DATE'],format = '%Y-%m-%d')\ndfGeneration_1['TIME'] = dfGeneration_1['DATE_TIME'].dt.time\ndfGeneration_1['TIME'] = pd.to_datetime(dfGeneration_1['TIME'], format = '%H:%M:%S')\ndfGeneration_1['HOUR'] = pd.to_datetime(dfGeneration_1['TIME'],format='%H:%M:%S').dt.hour\ndfGeneration_1['MINUTES'] = pd.to_datetime(dfGeneration_1['TIME'],format='%H:%M:%S').dt.minute\ndfGeneration_1.info()\n\ndfGeneration_2['DATE_TIME'] = pd.to_datetime(dfGeneration_2['DATE_TIME'], format ='%Y-%m-%d %H:%M')\ndfGeneration_2['DATE'] = dfGeneration_2['DATE_TIME'].dt.date\ndfGeneration_2['DATE'] = pd.to_datetime(dfGeneration_2['DATE'],format = '%Y-%m-%d')\ndfGeneration_2['TIME'] = dfGeneration_2['DATE_TIME'].dt.time\ndfGeneration_2['TIME'] = pd.to_datetime(dfGeneration_2['TIME'], format = '%H:%M:%S')\ndfGeneration_2['HOUR'] = pd.to_datetime(dfGeneration_2['TIME'],format='%H:%M:%S').dt.hour\ndfGeneration_2['MINUTES'] = pd.to_datetime(dfGeneration_2['TIME'],format='%H:%M:%S').dt.minute\ndfGeneration_2.info()\n\ndfWeatherSensor_1['DATE_TIME'] = pd.to_datetime(dfWeatherSensor_1['DATE_TIME'], format ='%Y-%m-%d %H:%M')\ndfWeatherSensor_1['DATE'] = dfWeatherSensor_1['DATE_TIME'].dt.date\ndfWeatherSensor_1['DATE'] = pd.to_datetime(dfWeatherSensor_1['DATE'],format = '%Y-%m-%d')\ndfWeatherSensor_1['TIME'] = dfWeatherSensor_1['DATE_TIME'].dt.time\ndfWeatherSensor_1['TIME'] = pd.to_datetime(dfWeatherSensor_1['TIME'], format = '%H:%M:%S')\ndfWeatherSensor_1['HOUR'] = pd.to_datetime(dfWeatherSensor_1['TIME'],format='%H:%M:%S').dt.hour\ndfWeatherSensor_1['MINUTES'] = pd.to_datetime(dfWeatherSensor_1['TIME'],format='%H:%M:%S').dt.minute\ndfWeatherSensor_1.info()\n\ndfWeatherSensor_2['DATE_TIME'] = pd.to_datetime(dfWeatherSensor_2['DATE_TIME'], format ='%Y-%m-%d %H:%M')\ndfWeatherSensor_2['DATE'] = dfWeatherSensor_2['DATE_TIME'].dt.date\ndfWeatherSensor_2['DATE'] = pd.to_datetime(dfWeatherSensor_2['DATE'],format = '%Y-%m-%d')\ndfWeatherSensor_2['TIME'] = dfWeatherSensor_2['DATE_TIME'].dt.time\ndfWeatherSensor_2['TIME'] = pd.to_datetime(dfWeatherSensor_2['TIME'], format = '%H:%M:%S')\ndfWeatherSensor_2['HOUR'] = pd.to_datetime(dfWeatherSensor_2['TIME'],format='%H:%M:%S').dt.hour\ndfWeatherSensor_2['MINUTES'] = pd.to_datetime(dfWeatherSensor_2['TIME'],format='%H:%M:%S').dt.minute","e47b04b2":"# let's check for any missing values\n\ndfGeneration_1.isna().sum()","ded103a6":"# let's look at some of the power generation trends\n\ndfGeneration_1.DC_POWER.value_counts()","14c1b178":"# As we can see most of the time stamps show power generated is zero which makes it difficult for us to train a model ","091e6ac8":"dfGeneration_1.AC_POWER.value_counts(normalize=True)","1de5f021":"# same thing can be seen in Ac power generation 46% of the entries show no power generation","15449940":"import matplotlib.pyplot as plt\nplt.figure(figsize=(15,8))\nplt.plot(dfGeneration_1.groupby('DATE')['DAILY_YIELD'].sum())\nplt.title('Daily Yield Plant 1')\nplt.xlabel('Date')\nplt.ylabel('Daily Yield')\n","1cd5b08f":"plt.figure(figsize=(15,8))\nplt.plot(dfGeneration_2.groupby('DATE')['DAILY_YIELD'].sum(),'red')\nplt.title('Daily Yield Plant 2')\nplt.xlabel('Date')\nplt.ylabel('Daily Yield')","b4949f1d":"plt.figure(figsize=(15,8))\nplt.title('AC_POWER Plant 1 VS Plant 2')\nplt.plot(dfGeneration_2.groupby('DATE')['AC_POWER'].sum(),'red')\nplt.plot(dfGeneration_1.groupby('DATE')['AC_POWER'].sum(),'blue')\nplt.xlabel('Date')\nplt.ylabel('AC_POWER')","e32908d6":"plt.figure(figsize=(15,8))\nplt.title('Daily Yield Plant 1 VS Plant 2')\nplt.plot(dfGeneration_2.groupby('DATE')['DAILY_YIELD'].sum(),'red')\nplt.plot(dfGeneration_1.groupby('DATE')['DAILY_YIELD'].sum(),'blue')\nplt.xlabel('Date')\nplt.ylabel('Daily Yield')","a70c3edf":"plant2=dfGeneration_2.groupby('DATE')['DC_POWER'].sum().values","f5ec9348":"from sklearn.preprocessing import MinMaxScaler\n\nscaler=MinMaxScaler(feature_range=(-1,1))\n\nplant2=np.expand_dims(plant2,-1)\nplant2=scaler.fit_transform(plant2)","c57b0a6c":"merged=pd.merge(dfGeneration_1,dfWeatherSensor_1,on='DATE')","16d38b00":"import seaborn as sns\n\nplt.figure(figsize=(18,8))\nsns.heatmap(merged.corr(),annot=True)","c23dd440":"df_plant1 = pd.merge(dfGeneration_1, dfWeatherSensor_1, on='DATE_TIME', how='left')\nplt.figure(figsize=(20,8))\nplt.title(\"Ambient Temperature vs DC Power Plant 1\")\nplt.scatter(df_plant1['AMBIENT_TEMPERATURE'], df_plant1['DC_POWER'], c='c', alpha=0.9,marker='.')\nplt.xlabel(\"Ambient Temperature\")\nplt.ylabel(\"DC Power\")\nplt.grid()\nplt.show()","aab6fb58":"df_plant1 = pd.merge(dfGeneration_1, dfWeatherSensor_1, on='DATE_TIME', how='left')\nplt.figure(figsize=(20,8))\nplt.title(\"MODULE_TEMPERATURE vs DC Power Plant 1\")\nplt.scatter(df_plant1['MODULE_TEMPERATURE'], df_plant1['DC_POWER'], c='c', alpha=0.9,marker='.')\nplt.xlabel(\"MODULE Temperature\")\nplt.ylabel(\"DC Power\")\nplt.grid()\nplt.show()","20229ca6":"df_plant1['temp_diff']=df_plant1['MODULE_TEMPERATURE']-df_plant1['AMBIENT_TEMPERATURE']","d040bfd4":"df_plant1.sample(5)","5ad27314":"plt.scatter(df_plant1['temp_diff'],df_plant1['DC_POWER'])","3570d4a0":"# let's check the effect of the light on the panels","2b5d6701":"plt.scatter(df_plant1['IRRADIATION'],df_plant1['DC_POWER'])","ab6eb489":"plant2=plant2.flatten()","d6df4849":"from math import sqrt\n","fc6241b9":"# As we can see in the graph the Prophet is not able to fit the data very well\nimport fbprophet as fb\n\nds = dfGeneration_1['DATE'].unique()\ny = dfGeneration_1.groupby('DATE')['DC_POWER'].sum()\ndf = pd.DataFrame({'ds':ds, 'y':y})\nop1 = fb.Prophet(changepoint_prior_scale = .25)\nop1.fit(df)\nprediction1 = op1.make_future_dataframe(periods = 7, freq = 'D')\nprediction1 = op1.predict(prediction1)\nop1.plot(prediction1, xlabel = 'DATE', ylabel = 'DC POWER (x10^6)', figsize = (20,10))\nplt.title(\"DC POWER FORECAST FOR PLANT 1\")\nplt.show()","e6297e2f":"values=prediction1.iloc[:,-1]\nvalues=np.expand_dims(values,-1)\nvalues=scaler.inverse_transform(values)\nvalues","437e6b19":"# Now we have ground truth available to us ,\n\n# let's start with our model\n\n\nfrom keras.layers import Bidirectional,LSTM,Dense,Flatten,Conv1D,MaxPooling1D,Dropout,RepeatVector\nfrom keras.models import Sequential\nfrom keras.callbacks import EarlyStopping,ReduceLROnPlateau\n\nearly_stop=EarlyStopping(monitor='loss',patience=5)\n\n\nmodel=Sequential([Conv1D(100,kernel_size=3,input_shape=(7,1),activation='relu'),\n                  \n                 Flatten(),\n                  RepeatVector(7),\n                 LSTM(128,activation='relu',return_sequences=True),\n                 LSTM(128,activation='relu',return_sequences=True),\n                  Bidirectional(LSTM(64,activation='relu')),\n                 Dense(128,activation='relu'),\n                 Dense(1)])\n\nmodel.compile(optimizer='adam',loss='mse',metrics=['mse'])","8a39fd38":"values=prediction1.iloc[:,-1]\nvalues=np.expand_dims(values,-1)\nvalues=scaler.inverse_transform(values)\nvalues","8f93d848":"values=scaler.fit_transform(values)","46248248":"steps=7\ninp1=[]\nout1=[]\n\nfor i in range(len(values)-steps):\n    inp1.append(values[i:i+steps])\n    out1.append(values[i+steps])\n    \ninp1=np.asanyarray(inp1)\nout1=np.asanyarray(out1)\nx_train1=inp1[:27,:,:]\nx_test1=inp1[27:,:,:]\ny_train1=out1[:27]\ny_test1=out1[27:]    ","efe1d513":"predicted=model.fit(x_train1,y_train1,epochs=250)","b957610b":"predict_train=model.predict(x_test1)\nplt.figure(figsize=(20,5))\nplt.plot(predict_train)\nplt.plot(y_test1)\nplt.title('Test Data Line vs Predicted Data Line')","12dceab0":"# Suboptimally  performing equipment identification:\n\n\n","38e1b95c":"merged=pd.merge(dfGeneration_1,dfWeatherSensor_1,on='DATE')\n","acdfd075":"merged.set_index(['DATE_TIME_x'],inplace=True)","0bb13d11":"plt.plot(merged.groupby(['HOUR_x'])['DC_POWER'].sum())","97b6eeca":"part1=dfGeneration_1.loc[dfGeneration_1['SOURCE_KEY']=='1BY6WEcLGh8j5v7']","72adac3c":"merged=pd.merge(part1,dfWeatherSensor_1,on='DATE_TIME',how='left')","82032200":"merged['temp_diff']=merged['AMBIENT_TEMPERATURE']-merged['MODULE_TEMPERATURE']","f24b9ad2":"ready=merged.iloc[:,[2,3,9,13,14,15,18,20]]","2b39dd75":"y=ready['DC_POWER']","8a5a379c":"x=ready.iloc[:,1:]","d4fca23f":"# this model can be further optimized using Random SearchCV, gridSearchCV, (skipping due to shortage of time, you can check hyper paramter optimization\n#in my other notebooks)\n\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.2,random_state=2)\nmodel=xgb.XGBRegressor()\nmodel.fit(x_train,y_train)\naa=model.predict(x_test)","542d5eaa":"plt.figure(figsize=(18,8))\nsns.distplot(y_train,color='red',label='Predicted value')\nsns.distplot(aa,label='Actual value')\nplt.legend()","60f77797":"# we can see there is a strong corerelation between light and power generated","6fb8ed64":"# Disclaimer : I have taken some of the data preprocessing ideas from the other notebooks which can be found of kaggle\n# please upvote if you like this notebook","902b557f":"# let's check if the temeprature outside and temperature of the panel makes any difference","f89f567e":"# as we can see there are no missing values in the data","2c636998":"# # I had to create this notebook on a short notice so please bear with me if you feel the code is not clean, I will soon upload a cleaner version of the notebook.Also I have combined the work from 3 different notebook, if some code is broken or you find completely detached code segment please let me know in comments","a71db8f8":"# Thank you","41c12990":"# Approach : we will first create ground truth for the next seven days using the FB Prophet model , and then we will let our LSTM based model\n# train on this data and make predictions on next 7 days","18f8ca94":"# In this notebook we will try to predict the power generation for the next 7 days on the solar power generation dataset","e3ce3180":"# the error is showing less because the data is scaled in range(-1,1)"}}