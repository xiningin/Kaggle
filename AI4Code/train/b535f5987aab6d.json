{"cell_type":{"c646dded":"code","086ae260":"code","176fb146":"code","8f5b906b":"code","7a59edef":"code","d1b047a9":"code","2d7476e7":"code","c3824c3f":"code","c03b1b89":"code","6bb73155":"code","a097e3f4":"code","133a5bdb":"code","4914fc9c":"code","dfc5278a":"code","2dd1b9bb":"code","8d12a4bd":"code","575ad045":"code","c7c98eaf":"code","3b1dc621":"code","1cc657dc":"code","676a0624":"code","58c6d30a":"code","1f4581c7":"code","9769a8bb":"code","06eb9557":"code","fd9ebcec":"code","e25ebdd9":"code","1d449478":"code","09f4f047":"code","415b7624":"code","98241e3a":"code","dc20b472":"code","02aa616d":"code","c1caaec1":"code","6bac805f":"code","42d0b8ea":"code","acd06e9f":"code","8e4ba11c":"code","7765aa3e":"code","8482ee2c":"code","1ab0adf1":"code","5a633529":"code","98236bfa":"code","1b33b3de":"code","e24df960":"code","6f447edd":"code","04532d0f":"code","21a13c3a":"code","c2687358":"code","9fb3d2d4":"code","f2fe18fe":"code","a6a1ce35":"code","8ab8eecf":"code","3d71e3e8":"code","df5a0bf9":"code","9eead171":"code","f3e66694":"code","a363e244":"code","8f504774":"code","69906736":"code","ed92375e":"code","7aa5ca37":"code","346a5aa6":"code","3c5830ec":"code","097a449a":"code","54a1e1ec":"code","888f4d1a":"code","d7b23c56":"code","d06ab863":"code","9c8dd7b9":"code","849acffa":"code","bf615ea7":"code","6835bc06":"code","81b6aff6":"code","15e68e85":"code","58284613":"code","e54956ba":"code","e2fe99d5":"code","a026d688":"code","23acb539":"code","b862ca8b":"code","6232b76c":"code","d595fe70":"code","6bccd466":"code","17742d9b":"code","1a002602":"code","81950503":"code","3a8d10a6":"code","40696420":"code","2cddc91f":"code","e5aa522c":"code","2fbc9c53":"code","6c7ae232":"code","2dcb2479":"code","8e9b6b9a":"code","96ea9207":"code","9153ad17":"code","e6363091":"code","ea77238f":"code","8f1f29ff":"code","6962f38a":"code","27777c07":"code","cd5d0ada":"code","b31b3faa":"code","d27c6d75":"code","51908a0d":"code","d4e26b06":"code","4db825d4":"code","3819bbfc":"code","3304318b":"code","085379fb":"code","8c92e35d":"code","4793db79":"code","c85c32b0":"code","66e20276":"code","e1aa0631":"code","2f9b0400":"code","ac06574e":"code","470e8c45":"code","3efb869c":"code","078736cb":"code","90b3b313":"code","7ed359db":"code","6e1a6169":"code","cb5ad81f":"code","dff93988":"code","aeb43b7c":"code","b8be19eb":"code","6a1c4172":"code","65698280":"code","a5a3d626":"code","4ea2bb90":"code","c9b54abc":"code","7669a733":"code","aa53a2bd":"code","5649927d":"code","0f154605":"code","30c9409b":"code","8568e8fd":"code","6f48d396":"code","47e25db1":"code","8c35e22b":"code","b17c91d1":"markdown","a08576da":"markdown","36c20fc5":"markdown","c5643be6":"markdown","91da60d0":"markdown","bf42ef8b":"markdown","d3942ed0":"markdown","f8b05b2b":"markdown","1d2787e4":"markdown","a43f3f4f":"markdown","73e6c6c8":"markdown","b4f593b1":"markdown","8d8c4588":"markdown","b6b4a35b":"markdown","f0fd9ae5":"markdown","ec6e82d0":"markdown","bc004672":"markdown","5fb1f9db":"markdown","e346126e":"markdown","d6c5f5fd":"markdown","8033fc70":"markdown","9ef65792":"markdown","e1871893":"markdown","e8a6dcd5":"markdown","b7254e44":"markdown","d6c23220":"markdown","35f1be31":"markdown","ccf1276b":"markdown","42b25337":"markdown","1cde6554":"markdown","2a422772":"markdown","f1df248f":"markdown","00984a85":"markdown","a2f50d5f":"markdown","81e82b26":"markdown","72eb0b7e":"markdown","fa060904":"markdown"},"source":{"c646dded":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\n'''\nAll of the statistics functions are located in the sub-package scipy. \nA list of random variables available can also be obtained from the docstring for the stats sub-package. \nThis module contains a large number of probability distributions as well as a growing library of statistical functions.\n\n'''\nfrom ast import literal_eval\n'''\nliteral_eval: Safely evaluate an expression node or a string containing a Python literal or container display. \nThe string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, \ntuples, lists, dicts, sets, booleans, None, bytes and sets.\n'''\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel, cosine_similarity\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.corpus import wordnet\nimport warnings; warnings.simplefilter('ignore')\n\n'''\nSurprise is a Python scikit for building and analyzing recommender systems that deal with explicit rating data. \nSurprise was designed with the following purposes in mind: Give users perfect control over their experiments. \nProvide tools to evaluate, analyse and compare the algorithms' performance.\n\n'''\nfrom surprise import SVD\nfrom surprise import Dataset\nfrom surprise import Reader\nfrom surprise.model_selection import cross_validate\n\n\npd.pandas.set_option('display.max_columns', None)\n","086ae260":"md = pd.read_csv('..\/input\/the-movies-dataset\/movies_metadata.csv')\nmd.head()","176fb146":"md.columns","8f5b906b":"md.isnull().sum()","7a59edef":"md['genres'][0]","d1b047a9":"md['genres'] = md['genres'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])\n","2d7476e7":"md['genres'][0]","c3824c3f":"vote_counts = md[md['vote_count'].notnull()]['vote_count'].astype('int')\nvote_counts.isnull().sum()","c03b1b89":"vote_averages = md[md['vote_average'].notnull()]['vote_average'].astype('int')\nvote_averages.isnull().sum()","6bb73155":"c = vote_averages.mean()\nc","a097e3f4":"'''\nPandas dataframe.quantile() function return values at the given quantile over requested axis, a numpy.percentile.\n\nNote : In each of any set of values of a variate which divide a frequency distribution into equal groups, \neach containing the same fraction of the total population.\n\nSyntax: DataFrame.quantile(q=0.5, axis=0, numeric_only=True, interpolation=\u2019linear\u2019)\n\nParameters :\nq : float or array-like, default 0.5 (50% quantile). 0 <= q <= 1, the quantile(s) to compute\naxis : [{0, 1, \u2018index\u2019, \u2018columns\u2019} (default 0)] 0 or \u2018index\u2019 for row-wise, 1 or \u2018columns\u2019 for column-wise\nnumeric_only : If False, the quantile of datetime and timedelta data will be computed as well\ninterpolatoin : {\u2018linear\u2019, \u2018lower\u2019, \u2018higher\u2019, \u2018midpoint\u2019, \u2018nearest\u2019}\n\n\n\nReturns : quantiles : Series or DataFrame\n-> If q is an array, a DataFrame will be returned where the index is q, the columns are the columns of self, and the values are the quantiles.\n-> If q is a float, a Series will be returned where the index is the columns of self and the values are the quantiles.\n\n\n'''\n\nm = vote_counts.quantile(0.95)\nm","133a5bdb":"md['year'] = pd.to_datetime(md['release_date'], errors='coerce').apply(lambda x: str(x).split('-')[0] if x != np.nan else np.nan)","4914fc9c":"md['year'][0], md['release_date'][0] ","dfc5278a":"qualified = md[(md['vote_count'] >= m) & (md['vote_count'].notnull()) &\n              (md['vote_average'].notnull())][['title','year','vote_count','vote_average','popularity','genres']]","2dd1b9bb":"qualified.head()","8d12a4bd":"qualified['vote_count'] = qualified['vote_count'].astype('int')\nqualified['vote_average'] = qualified['vote_average'].astype('int')","575ad045":"qualified.shape","c7c98eaf":"def weighted_rating(x):\n    v = x['vote_count']\n    R = x['vote_average']\n    return (v\/(v+m)*R) + (m\/(m+v) * c)","3b1dc621":"'''\nfunc: .apply takes a function and applies it to all values of pandas series.\nconvert_dtype: Convert dtype as per the function\u2019s operation.\nargs=(): Additional arguments to pass to function instead of series.\nReturn Type: Pandas Series after applied function\/operation.\n'''\nqualified['wr'] = qualified.apply(weighted_rating, axis=1)","1cc657dc":"qualified.head()","676a0624":"qualified = qualified.sort_values('wr', ascending=False)\nqualified.head()","58c6d30a":"qualified.head(15)","1f4581c7":"s = md.apply(lambda x: pd.Series(x['genres']), axis=1).stack().reset_index(level=1, drop=True)","9769a8bb":"s[0] # index 0","06eb9557":"s.name = 'genre'","fd9ebcec":"s[0]","e25ebdd9":"gen_md = md.drop('genres',axis=1).join(s)","1d449478":"gen_md.head(2)","09f4f047":"def build_chart(genre, percentile=0.85):\n    df = gen_md[gen_md['genre'] == genre]\n    vote_counts = df[df['vote_count'].notnull()]['vote_count'].astype('int')\n    vote_averages = df[df['vote_average'].notnull()]['vote_average'].astype('int')\n    C = vote_averages.mean()\n    m = vote_counts.quantile(percentile)\n    \n    qualified = df[(df['vote_count'] >= m) & (df['vote_count'].notnull()) & (df['vote_average'].notnull())][['title', 'year', 'vote_count', 'vote_average', 'popularity']]\n    qualified['vote_count'] = qualified['vote_count'].astype('int')\n    qualified['vote_average'] = qualified['vote_average'].astype('int')\n    \n    qualified['wr'] = qualified.apply(lambda x: (x['vote_count']\/(x['vote_count']+m) * x['vote_average']) + (m\/(m+x['vote_count']) * C), axis=1)\n    qualified = qualified.sort_values('wr', ascending=False).head(250)\n    \n    return qualified\n","415b7624":"build_chart('Romance').head(15)","98241e3a":"build_chart('Action').head(15)","dc20b472":"links_small = pd.read_csv('..\/input\/the-movies-dataset\/links_small.csv')\nlinks_small.head()","02aa616d":"links_small = links_small[links_small['tmdbId'].notnull()]['tmdbId'].astype('int')","c1caaec1":"# md['id'][19730], md['id'][29503], md['id'][35587]","6bac805f":"md = md.drop([19730, 29503, 35587])\n","42d0b8ea":"md['id'] = md['id'].astype('int')\n","acd06e9f":"smd = md[md['id'].isin(links_small)]\nsmd.shape","8e4ba11c":"smd.head()","7765aa3e":"smd['tagline'].isnull().sum()","8482ee2c":"smd['tagline'] = smd['tagline'].fillna('')\n","1ab0adf1":"smd['tagline'][1]","5a633529":"smd['overview'][1]","98236bfa":"smd['description'] = smd['overview'] + smd['tagline']\nsmd['description'] = smd['description'].fillna('')","1b33b3de":"smd['description'][1]","e24df960":"#TfidfVectorizer\n\ntf = TfidfVectorizer(analyzer='word', ngram_range=(1,2), \n                     min_df=0, stop_words='english')\ntfidf_matrix = tf.fit_transform(smd['description'])","6f447edd":"tfidf_matrix.shape","04532d0f":"cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","21a13c3a":"cosine_sim[0]","c2687358":"smd.head()","9fb3d2d4":"smd = smd.reset_index()\n","f2fe18fe":"smd.head()","a6a1ce35":"titles = smd['title']","8ab8eecf":"titles[0]","3d71e3e8":"indices = pd.Series(smd.index, index=smd['title'])","df5a0bf9":"indices['Toy Story']","9eead171":"def get_recommendations(title):\n    idx = indices[title]\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:31]\n    movie_indices = [i[0] for i in sim_scores]\n    return titles.iloc[movie_indices]\n","f3e66694":"get_recommendations('Toy Story')","a363e244":"get_recommendations('The Dark Knight').head(8)\n","8f504774":"credits = pd.read_csv('..\/input\/the-movies-dataset\/credits.csv')\nkeywords = pd.read_csv('..\/input\/the-movies-dataset\/keywords.csv')","69906736":"credits.head()","ed92375e":"credits['cast'][0]","7aa5ca37":"keywords.head()","346a5aa6":"keywords['keywords'][0]","3c5830ec":"keywords['id'] = keywords['id'].astype('int')\ncredits['id'] = credits['id'].astype('int')\nmd['id'] = md['id'].astype('int')","097a449a":"md.shape","54a1e1ec":"md = md.merge(credits, on='id')\nmd = md.merge(keywords, on='id')\nmd.head()","888f4d1a":"md.shape, smd.shape","d7b23c56":"smd.head(2)","d06ab863":"links_small.head()","9c8dd7b9":"smd = md[md['id'].isin(links_small)]\n","849acffa":"# observe\nsmd.head()","bf615ea7":"smd.shape","6835bc06":"smd['cast'][0]","81b6aff6":"smd['cast'] = smd['cast'].apply(literal_eval)","15e68e85":"smd['cast'][0]","58284613":"smd['crew'][0]","e54956ba":"smd['crew'] = smd['crew'].apply(literal_eval)","e2fe99d5":"smd['crew'][0]","a026d688":"smd['keywords'][0]","23acb539":"smd['keywords'] = smd['keywords'].apply(literal_eval)","b862ca8b":"smd['keywords'][0]","6232b76c":"smd['cast_size'] = smd['cast'].apply(lambda x: len(x))","d595fe70":"smd['cast_size'][0]","6bccd466":"smd['crew_size'] = smd['crew'].apply(lambda x: len(x))\nsmd['crew_size'][0]","17742d9b":"def get_director(x):\n    for i in x:\n        if i['job'] == 'Director':\n            return i['name']\n    return np.nan\n","1a002602":"smd['director'] = smd['crew'].apply(get_director)\n","81950503":"smd['director'][0]","3a8d10a6":"smd['cast'] = smd['cast'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])","40696420":"smd['cast'][0]","2cddc91f":"smd['cast'] = smd['cast'].apply(lambda x: x[:3] if len(x) >=3 else x)\n","e5aa522c":"smd['cast'][0]","2fbc9c53":"smd['keywords'] = smd['keywords'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])\n","6c7ae232":"smd['keywords'][0]","2dcb2479":"smd['cast'] = smd['cast'].apply(lambda x: [str.lower(i.replace(\" \", \"\")) for i in x])\n","8e9b6b9a":"smd['cast'][0]","96ea9207":"smd['director'] = smd['director'].astype('str').apply(lambda x: str.lower(x.replace(\" \", \"\")))\n","9153ad17":"smd['director'] = smd['director'].apply(lambda x: [x,x,x])\n","e6363091":"smd['director'][0] # three times","ea77238f":"s = smd.apply(lambda x: pd.Series(x['keywords']), axis=1).stack().reset_index(level=1, drop=True)\n","8f1f29ff":"s[0] # wiht index # keword[0]","6962f38a":"s.name = 'keyword'","27777c07":"s = s.value_counts()","cd5d0ada":"s[0:5]","b31b3faa":"s = s[s>1]","d27c6d75":"from nltk.stem.snowball import SnowballStemmer\n","51908a0d":"stemmer = SnowballStemmer('english')\nstemmer.stem('cats')","d4e26b06":"def filter_keywords(x):\n    words = []\n    for i in x:\n        if i in s:\n            words.append(i)\n    return words\n","4db825d4":"smd['keywords'] = smd['keywords'].apply(filter_keywords)\n","3819bbfc":"smd['keywords'][0]","3304318b":"smd['keywords'] = smd['keywords'].apply(lambda x: [stemmer.stem(i) for i in x])\nsmd['keywords'][0]","085379fb":"smd['keywords'] = smd['keywords'].apply(lambda x: [str.lower(i.replace(\" \", \"\")) for i in x])\n","8c92e35d":"smd['keywords'][0]","4793db79":"smd['soup'] = smd['keywords'] + smd['cast'] + smd['director'] + smd['genres']\nsmd['soup'][0]","c85c32b0":"smd['soup'] = smd['soup'].apply(lambda x: ' '.join(x))\nsmd['soup'][0]\n","66e20276":"count = CountVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')\ncount_matrix = count.fit_transform(smd['soup'])\n","e1aa0631":"cosine_sim = cosine_similarity(count_matrix, count_matrix)\n","2f9b0400":"cosine_sim[0]","ac06574e":"smd = smd.reset_index()","470e8c45":"titles = smd['title']\nindices = pd.Series(smd.index, index=smd['title'])\n","3efb869c":"get_recommendations('The Dark Knight').head(8)\n","078736cb":"get_recommendations('Toy Story').head(10)\n","90b3b313":"def improved_recommendations(title):\n    idx = indices[title]\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:26]\n    movie_indices = [i[0] for i in sim_scores]\n    \n    movies = smd.iloc[movie_indices][['title', 'vote_count', 'vote_average', 'year']]\n    vote_counts = movies[movies['vote_count'].notnull()]['vote_count'].astype('int')\n    vote_averages = movies[movies['vote_average'].notnull()]['vote_average'].astype('int')\n    C = vote_averages.mean()\n    m = vote_counts.quantile(0.60)\n    qualified = movies[(movies['vote_count'] >= m) & (movies['vote_count'].notnull()) & (movies['vote_average'].notnull())]\n    qualified['vote_count'] = qualified['vote_count'].astype('int')\n    qualified['vote_average'] = qualified['vote_average'].astype('int')\n    qualified['wr'] = qualified.apply(weighted_rating, axis=1)\n    qualified = qualified.sort_values('wr', ascending=False).head(10)\n    return qualified\n","7ed359db":"improved_recommendations('The Dark Knight')\n","6e1a6169":"improved_recommendations('Toy Story')\n","cb5ad81f":"reader = Reader()","dff93988":"ratings = pd.read_csv('..\/input\/the-movies-dataset\/ratings_small.csv')\nratings.head()","aeb43b7c":"data = Dataset.load_from_df(ratings[['userId', 'movieId', 'rating']], reader)\n","b8be19eb":"# Run 5-fold cross-validation and then print results\n\nsvd = SVD()\ncross_validate(svd, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)\n","6a1c4172":"from surprise.model_selection import train_test_split\n","65698280":"# test set is made of 25% of the ratings.\ntrainset, testset = train_test_split(data, test_size=.25)\n","a5a3d626":"svd.fit(trainset)\npredictions = svd.test(testset)","4ea2bb90":"predictions[0]","c9b54abc":"from surprise import accuracy","7669a733":"accuracy.rmse(predictions)","aa53a2bd":"user_id = 514\nmovie_id = 505\nreal_rating = 3\nsvd.predict(user_id, movie_id, real_rating, verbose=True)\n","5649927d":"ratings[ratings['movieId'] == 505]\n","0f154605":"svd.predict(514 , 505, 3)\n","30c9409b":"def convert_int(x):\n    try:\n        return int(x)\n    except:\n        return np.nan\n","8568e8fd":"id_map = pd.read_csv('..\/input\/the-movies-dataset\/links_small.csv')[['movieId', 'tmdbId']]\nid_map['tmdbId'] = id_map['tmdbId'].apply(convert_int)\nid_map.columns = ['movieId', 'id']\nid_map = id_map.merge(smd[['title', 'id']], on='id').set_index('title')\n#id_map = id_map.set_index('tmdbId')\n","6f48d396":"indices_map = id_map.set_index('id')\n\ndef hybrid(userId, title):\n    idx = indices[title]\n    tmdbId = id_map.loc[title]['id']\n    #print(idx)\n    movie_id = id_map.loc[title]['movieId']\n    \n    sim_scores = list(enumerate(cosine_sim[int(idx)]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:26]\n    movie_indices = [i[0] for i in sim_scores]\n    \n    movies = smd.iloc[movie_indices][['title', 'vote_count', 'vote_average', 'year', 'id']]\n    movies['est'] = movies['id'].apply(lambda x: svd.predict(userId, indices_map.loc[x]['movieId']).est)\n    movies = movies.sort_values('est', ascending=False)\n    return movies.head(10)\n","47e25db1":"hybrid(1, 'Avatar')\n","8c35e22b":"hybrid(500, 'Avatar')\n","b17c91d1":"Keywords\nWe will do a small amount of pre-processing of our keywords before putting them to any use. As a first step, we calculate the frequenct counts of every keyword that appears in the dataset.\n\n","a08576da":"### Hybrid Recommender: Metadata Based and Collaborative Filtering","36c20fc5":"We will reuse the get_recommendations function that we had written earlier. Since our cosine similarity scores have changed, we expect it to give us different (and probably better) results. Let us check for The Dark Knight again and see what recommendations I get this time around.\n\n","c5643be6":"For movie with ID 302, we get an estimated prediction of 3.28. One startling feature of this recommender system is that it doesn't care what the movie is (or what it contains). It works purely on the basis of an assigned movie ID and tries to predict ratings based on how the other users have predicted the movie.\n\n\n","91da60d0":"## Top Action Movies","bf42ef8b":"We see that for our hybrid recommender, we get different recommendations for different users although the movie is the same. Hence, our recommendations are more personalized and tailored towards particular users.\n\n","d3942ed0":"We now have our cast, crew, genres and credits, all in one dataframe. Let us wrangle this a little more using the following intuitions:\n\n* Crew: From the crew, we will only pick the director as our feature since the others don't contribute that much to the feel of the movie.\n\n* Cast: Choosing Cast is a little more tricky. Lesser known actors and minor roles do not really affect people's opinion of a movie. Therefore, we must only select the major characters and their respective actors. Arbitrarily we will choose the top 3 actors that appear in the credits list.\n","f8b05b2b":"Cosine Similarity\nI will be using the Cosine Similarity to calculate a numeric quantity that denotes the similarity between two movies. Mathematically, it is defined as follows:\n\n![image.png](attachment:c203592d-59f0-45cb-b0a3-d41d0d04dca2.png)\n\nSince we have used the TF-IDF Vectorizer, calculating the Dot Product will directly give us the Cosine Similarity Score. Therefore, we will use sklearn's linear_kernel instead of cosine_similarities since it is much faster.\n\n","1d2787e4":"We see that for The Dark Knight, our system is able to identify it as a Batman film and subsequently recommend other Batman films as its top recommendations. But unfortunately, that is all this system can do at the moment. This is not of much use to most people as it doesn't take into considerations very important features such as cast, crew, director and genre, which determine the rating and the popularity of a movie. Someone who liked The Dark Knight probably likes it more because of Nolan and would hate Batman Forever and every other substandard movie in the Batman Franchise.\n\nTherefore, we are going to use much more suggestive metadata than Overview and Tagline. In the next subsection, we will build a more sophisticated recommender that takes genre, keywords, cast and crew into consideration.\n\n","a43f3f4f":"For user_id of 514 rating movie_id of 505, we get an estimated prediction of 3.11 where the true rating is 3. One startling feature of this recommender system is that it doesn't care what the movie is (or what it contains). It works purely on the basis of an assigned movie ID and tries to predict ratings based on how the other users have predicted the movie.\n\n","73e6c6c8":"approach to building the recommender is going to be extremely hacky. What plan on doing is creating a metadata dump for every movie which consists of genres, director, main actors and keywords. then use a Count Vectorizer to create our count matrix as we did in the Description Recommender. The remaining steps are similar to what we did earlier: we calculate the cosine similarities and return movies that are most similar.\n\nThese are steps follow in the preparation of genres and credits data:\n\n* Strip Spaces and Convert to Lowercase from all our features. This way, our engine will not confuse between Johnny Depp and Johnny Galecki.\n\n* Mention Director 3 times to give it more weight relative to the entire cast.\n","b4f593b1":"We have 9099 movies avaiable in our small movies metadata dataset which is 5 times smaller than our original dataset of 45000 movies.\n\n","8d8c4588":"literal_eval: Safely evaluate an expression node or a string containing a Python literal or container display. \nThe string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, \ntuples, lists, dicts, sets, booleans, None, bytes and sets","b6b4a35b":"# Content Based Recommender","f0fd9ae5":"much more satisfied with the results get this time around. The recommendations seem to have recognized other Christopher Nolan movies (due to the high weightage given to director) and put them as top recommendations. enjoyed watching The Dark Knight as well as some of the other ones in the list including Batman Begins, The Prestige and The Dark Knight Rises.\n\nWe can of course experiment on this engine by trying out different weights for our features (directors, actors, genres), limiting the number of keywords that can be used in the soup, weighing genres based on their frequency, only showing movies with the same languages, etc.\n\n","ec6e82d0":"use the TMDB Ratings to come up with our Top Movies Chart. I will use IMDB's weighted rating formula to construct my chart. Mathematically, it is represented as follows:\n\n![image.png](attachment:813f1661-620f-4f6f-93d4-c8d3c341b2f7.png)\n\nwhere,\n\n* v is the number of votes for the movie\n* m is the minimum votes required to be listed in the chart\n* R is the average rating of the movie\n* C is the mean vote across the whole report\n\nThe next step is to determine an appropriate value for m, the minimum votes required to be listed in the chart. We will use 95th percentile as our cutoff. In other words, for a movie to feature in the charts, it must have more votes than at least 95% of the movies in the list.\n\nI will build our overall Top 250 Chart and will define a function to build charts for a particular genre. Let's begin!\n\n","bc004672":"We see that three Christopher Nolan Films, Inception, The Dark Knight and Interstellar occur at the very top of our chart. The chart also indicates a strong bias of TMDB Users towards particular genres and directors.\n\nLet us now construct our function that builds charts for particular genres. For this, we will use relax our default conditions to the 85th percentile instead of 95.\n\n","5fb1f9db":"IMDb is the most authoritative source of entertainment information, with features designed to help fans explore the world of movies and shows and decide what to watch. Get answers\n\n\nThe Movie Database (TMDb) is a popular, user editable database for movies and TV shows.\n\n","e346126e":"Let us first try to build a recommender using movie descriptions and taglines. We do not have a quantitative metric to judge our machine's performance so this will have to be done qualitatively.\n\n","d6c5f5fd":"In this section, I will try to build a simple hybrid recommender that brings together techniques we have implemented in the content based and collaborative filter based engines. This is how it will work:\n\n* Input: User ID and the Title of a Movie\n* Output: Similar movies sorted on the basis of expected ratings by that particular user.\n","8033fc70":"Movies Recommender System\n\n\nThis is the second part of my Springboard Capstone Project on Movie Data Analysis and Recommendation Systems. In my first notebook ( The Story of Film ), I attempted at narrating the story of film by performing an extensive exploratory data analysis on Movies Metadata collected from TMDB. I also built two extremely minimalist predictive models to predict movie revenue and movie success and visualise which features influence the output (revenue and success respectively).\n\nIn this notebook, I will attempt at implementing a few recommendation algorithms (content based, popularity based and collaborative filtering) and try to build an ensemble of these models to come up with our final recommendation system. With us, we have two MovieLens datasets.\n\n* The Full Dataset: Consists of 26,000,000 ratings and 750,000 tag applications applied to 45,000 movies by 270,000 users. Includes tag genome data with 12 million relevance scores across 1,100 tags.\n* The Small Dataset: Comprises of 100,000 ratings and 1,300 tag applications applied to 9,000 movies by 700 users.\n\n\n\n\n","9ef65792":"Metadata Based Recommender\nTo build our standard metadata based content recommender, we will need to merge our current dataset with the crew and the keyword datasets. Let us prepare this data as our first step.\n\n","e1871893":"Unfortunately, Batman and Robin does not disappear from our recommendation list. This is probably due to the fact that it is rated a 4, which is only slightly below average on TMDB. It certainly doesn't deserve a 4 when amazing movies like The Dark Knight Rises has only a 7. However, there is nothing much we can do about this. Therefore, we will conclude our Content Based Recommender section here and come back to it when we build a hybrid engine.\n\n","e8a6dcd5":"A 'kernel method' is made up of two parts:\n1. A mapping into the embedding or feature space\n2. A learning algorithm to discover linear patterns in that space\n\nThe discovered patterns have multitude of applications in pattern mining, clustering, classification etc. Based on such first-level tasks, more intelligent systems viz. recommendation engine, decision making systems etc. can be designed. The mapping is formally called as kernel function. Apart from mapping from a non-linear space to linear space, it represents a similarity metric between the data points (like dot product).\n\nThe main steps in a recommendation system is:\n1. collect data\n2. Prepare the data (e.g. kernel-PCA for dimension reduction)\n3. using this data analyse who likes what and form a pattern; form a regression or classification model to represent the same - e.g. SVM (a kernel method)\n4. Form a ranking table based on some similarity metric (again a kernel function can be used as similarity metric).\n\n","b7254e44":"Keywords occur in frequencies ranging from 1 to 610. We do not have any use for keywords that occur only once. Therefore, these can be safely removed. Finally, we will convert every word to its stem so that words such as Dogs and Dog are considered the same.\n\n","d6c23220":"### Simple Recommender\n\nThe Simple Recommender offers generalized recommnendations to every user based on movie popularity and (sometimes) genre. The basic idea behind this recommender is that movies that are more popular and more critically acclaimed will have a higher probability of being liked by the average audience. This model does not give personalized recommendations based on the user.\n\nThe implementation of this model is extremely trivial. All we have to do is sort our movies based on ratings and popularity and display the top movies of our list. As an added step, we can pass in a genre argument to get the top movies of a particular genre.\n\n","35f1be31":"Therefore, to qualify to be considered for the chart, a movie has to have at least 434 votes on TMDB. We also see that the average rating for a movie on TMDB is 5.244 on a scale of 10. 2274 Movies qualify to be on our chart.\n\n","ccf1276b":"In this notebook, I have built 4 different recommendation engines based on different ideas and algorithms. They are as follows:\n\n* Simple Recommender: This system used overall TMDB Vote Count and Vote Averages to build Top Movies Charts, in general and for a specific genre. The IMDB Weighted Rating System was used to calculate ratings on which the sorting was finally performed.\n\n* Content Based Recommender: We built two content based engines; one that took movie overview and taglines as input and the other which took metadata such as cast, crew, genre and keywords to come up with predictions. We also deviced a simple filter to give greater preference to movies with more votes and higher ratings.\n\n* Collaborative Filtering: We used the powerful Surprise Library to build a collaborative filter based on single value decomposition. The RMSE obtained was less than 1 and the engine gave estimated ratings for a given user and movie.\n\n* Hybrid Engine: We brought together ideas from content and collaborative filterting to build an engine that gave movie suggestions to a particular user based on the estimated ratings that it had internally calculated for that user.\n","42b25337":"We now have a pairwise cosine similarity matrix for all the movies in our dataset. The next step is to write a function that returns the 30 most similar movies based on the cosine similarity score.\n\n","1cde6554":"# Top Movies","2a422772":"Let us see our method in action by displaying the Top 15 Romance Movies (Romance almost didn't feature at all in our Generic Top Chart despite being one of the most popular movie genres).\n\n","f1df248f":"## Top Romance Movies","00984a85":"Popularity and Ratings\nOne thing that we notice about our recommendation system is that it recommends movies regardless of ratings and popularity. It is true that Batman and Robin has a lot of similar characters as compared to The Dark Knight but it was a terrible movie that shouldn't be recommended to anyone.\n\nTherefore, we will add a mechanism to remove bad movies and return movies which are popular and have had a good critical response.\n\nI will take the top 25 movies based on similarity scores and calculate the vote of the 60th percentile movie. Then, using this as the value of  m , we will calculate the weighted rating of each movie using IMDB's formula like we did in the Simple Recommender section.\n\n","a2f50d5f":"We're all set. Let us now try and get the top recommendations for a few movies and see how good the recommendations are.\n\n","81e82b26":"Content Based Recommender\nThe recommender we built in the previous section suffers some severe limitations. For one, it gives the same recommendation to everyone, regardless of the user's personal taste. If a person who loves romantic movies (and hates action) were to look at our Top 15 Chart, s\/he wouldn't probably like most of the movies. If s\/he were to go one step further and look at our charts by genre, s\/he wouldn't still be getting the best recommendations.\n\nFor instance, consider a person who loves Dilwale Dulhania Le Jayenge, My Name is Khan and Kabhi Khushi Kabhi Gham. One inference we can obtain is that the person loves the actor Shahrukh Khan and the director Karan Johar. Even if s\/he were to access the romance chart, s\/he wouldn't find these as the top recommendations.\n\nTo personalise our recommendations more, I am going to build an engine that computes similarity between movies based on certain metrics and suggests movies that are most similar to a particular movie that a user liked. Since we will be using movie metadata (or content) to build this engine, this also known as Content Based Filtering.\n\nI will build two Content Based Recommenders based on:\n\nMovie Overviews and Taglines\nMovie Cast, Crew, Keywords and Genre\nAlso, as mentioned in the introduction, I will be using a subset of all the movies available to us due to limiting computing power available to me.\n\n","72eb0b7e":"Collaborative Filtering\nOur content based engine suffers from some severe limitations. It is only capable of suggesting movies which are close to a certain movie. That is, it is not capable of capturing tastes and providing recommendations across genres.\n\nAlso, the engine that we built is not really personal in that it doesn't capture the personal tastes and biases of a user. Anyone querying our engine for recommendations based on a movie will receive the same recommendations for that movie, regardless of who s\/he is.\n\nTherefore, in this section, we will use a technique called Collaborative Filtering to make recommendations to Movie Watchers. Collaborative Filtering is based on the idea that users similar to a me can be used to predict how much I will like a particular product or service those users have used\/experienced but I have not.\n\nI will not be implementing Collaborative Filtering from scratch. Instead, I will use the Surprise library that used extremely powerful algorithms like Singular Value Decomposition (SVD) to minimise RMSE (Root Mean Square Error) and give great recommendations.\n\n","fa060904":"### Movie Description Based Recommender\n"}}