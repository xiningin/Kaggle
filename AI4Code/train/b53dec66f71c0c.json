{"cell_type":{"58257ef0":"code","647835c3":"code","a90b6098":"code","0bbb23f6":"code","e4aa3e7d":"code","c100a67b":"code","8b314eba":"code","d542b2cb":"code","58a5291d":"code","fd5b6bea":"code","7fa3f82a":"code","91eb5a3f":"code","0e1b570e":"code","ac3688ec":"code","f59f3463":"code","c2420e59":"code","9ca29ca1":"code","a48abe2c":"code","f713dc92":"code","2e4c2d2e":"code","dde7d71a":"code","40c82073":"code","3048dbd2":"code","e3bd4914":"code","5ba454ce":"code","b05b5a4b":"code","e68fcfa1":"code","f490f8ec":"code","35b2e6b2":"code","b5b71dc2":"code","967b7a26":"code","7ce9ab09":"code","3909bcb6":"code","e49cd522":"code","367b116a":"code","b7225886":"code","5b961dbd":"code","da4876a8":"code","455037e3":"code","77513c6f":"code","3be40869":"code","10abf5bb":"code","fc2698cb":"code","9786ac2a":"code","6d3dad70":"code","0ec4b1ca":"code","8dd0d9e3":"code","9afa08b3":"code","c820d4a1":"code","76ee494f":"code","15655abe":"code","0cda90fb":"code","4da47b51":"code","5b5c9b3b":"code","ca1219bb":"code","122b6303":"code","683e7108":"code","8d29784d":"code","3dbf0f08":"code","2c3264ca":"code","d6763ded":"code","45389c83":"code","b43638bd":"code","da8d8d7b":"code","78a20af3":"code","215cf659":"code","99d9e966":"code","1fba343e":"code","54643ab3":"code","e1f83eea":"code","3b3d9844":"code","5a60a33e":"code","78b155b1":"code","5e223d16":"code","08d830c4":"code","46902a0b":"code","3f428d64":"code","da501fcc":"code","da7da8b6":"code","3e7d1c56":"code","62fae80f":"code","967a79af":"markdown","6290573b":"markdown","e5961baa":"markdown","4642caa6":"markdown","b45d88a2":"markdown","ada67f9e":"markdown","aac40467":"markdown","48570412":"markdown","a1b31d72":"markdown","09b94089":"markdown","aa2669c7":"markdown","1fbb1e4b":"markdown","cbfa8451":"markdown","aed5f007":"markdown","67f76abc":"markdown","76262f65":"markdown","8066f984":"markdown","97d3436d":"markdown","244f06f8":"markdown","54302722":"markdown","b4b55d4a":"markdown","fc0ea3bb":"markdown","da43d8ba":"markdown","08b1eb8c":"markdown","acc66af5":"markdown","83e60c49":"markdown","678efa9e":"markdown","35b9de4e":"markdown","feb98f71":"markdown","6ca30d2d":"markdown","e43b15a5":"markdown","aaf87055":"markdown","3e1ace68":"markdown","7b1be545":"markdown","d721c0bc":"markdown","35b341d0":"markdown","0b38a9b1":"markdown","13ce9110":"markdown","90004241":"markdown","3222b26f":"markdown","b9f34ffd":"markdown","a01c4590":"markdown","6f50927a":"markdown","22616066":"markdown","5b418c53":"markdown","3e6cab06":"markdown","788461bb":"markdown","0d72d969":"markdown","2994c363":"markdown","d05771e8":"markdown","654c407e":"markdown","24782d44":"markdown","af001c4a":"markdown","11bbb2f3":"markdown","f6a34fdc":"markdown","b57b294b":"markdown","1a4b1cfa":"markdown","a4a635fd":"markdown","1f38e5a3":"markdown"},"source":{"58257ef0":"# importing the required libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nsns.set_style('darkgrid')\nplt.rcParams['font.size'] =14 \nplt.rcParams['figure.figsize'] = (9, 5)\nplt.rcParams['figure.facecolor'] = '#00000000'","647835c3":"# suppressing the chained operations warning\n\npd.options.mode.chained_assignment = None","a90b6098":"# reading the dataa\n\ngplay = pd.read_csv('..\/input\/googleplaystore\/googleplaystore.csv')\ngplay","0bbb23f6":"gplay.shape\n","e4aa3e7d":"# checking the data types of all the columns \n\ngplay.info()","c100a67b":"def printinfo():\n    temp = pd.DataFrame(index = gplay.columns)\n    temp['data_type'] = gplay.dtypes\n    temp['null_count'] = gplay.isnull().sum()\n    temp['unique_count'] = gplay.nunique()\n    return temp","8b314eba":"# Lets call the function\n\nprintinfo()","d542b2cb":"gplay.Size","58a5291d":"# scaling the size column from kb to mb\n\ngplay.Size = (gplay.Size\/1024).round(1)","fd5b6bea":"gplay.Installs","7fa3f82a":"# fixing the gplay.Installs columns\n\ngplay.Installs.value_counts()","91eb5a3f":"insta = gplay.Installs.str.strip('+').str.replace(',','')\ninstalls = pd.to_numeric(insta, errors='coerce')        # errors ='coerce' will replace the incorrect value with NaN\ngplay.Installs = installs","0e1b570e":"gplay.Installs.isna().value_counts()     ","ac3688ec":"gplay.shape    # shape of the dataframe before dropping a null value","f59f3463":"gplay = gplay[~gplay.Installs.isna()]","c2420e59":"gplay.shape     # shape of the dataframe after droping","9ca29ca1":"gplay.Rating.isna().value_counts()","a48abe2c":"gplay.Rating.value_counts()","f713dc92":"## the below code raises SettingCopyWarning\n\n# gplay.Rating.fillna(median, inplace=True)","2e4c2d2e":"median = gplay.Rating.median()\n\n# the below code won't raise any error\ngplay.Rating[:].fillna(value=median, inplace=True)","dde7d71a":"gplay.Rating.isna().sum()","40c82073":"gplay.Reviews = gplay.loc[:,'Reviews'].astype('int')","3048dbd2":"gplay.Price.value_counts()","e3bd4914":"gplay.Price = gplay.Price.apply(lambda x: 0 if x == '0' else float(x[1:]))","5ba454ce":"gplay[gplay['Type'].isnull()]","b05b5a4b":"gplay['Type'].value_counts()","e68fcfa1":"gplay.Type.fillna('Free', inplace = True)","f490f8ec":"gplay.Type.value_counts()","35b2e6b2":"printinfo()","b5b71dc2":"gplay.drop(['Current Ver','Last Updated', 'Android Ver'], axis = 1, inplace = True)","967b7a26":"printinfo()","7ce9ab09":"# sanity checks on the Rating Column:\ngplay[gplay.Rating<1] | gplay[gplay.Rating >5]","3909bcb6":"# sanity checks on the Reviews column\n\n(gplay.Reviews > gplay.Installs).value_counts()","e49cd522":"gplay[gplay.Reviews > gplay.Installs]","367b116a":"# droping the above rows from our gplay\n\nrowindex = gplay[gplay.Reviews > gplay.Installs].index\ngplay.drop(rowindex, inplace = True)     # droping the ambiguous rows\ngplay.shape","b7225886":"# sanity checks on prices of free apps\n\ngplay.Type.value_counts()","5b961dbd":"gplay.Price.value_counts()","da4876a8":"((gplay.Type == 'Free') & (gplay.Price > 0)).value_counts()","455037e3":"printinfo()","77513c6f":"# checking duplicate rows based on all column value\ngplay[gplay.duplicated()]","3be40869":"gplay.drop_duplicates(inplace  = True)","10abf5bb":"gplay.shape","fc2698cb":"# checking the duplicates apps based on App column only\n\ngplay.duplicated('App').value_counts()","9786ac2a":"# getting the dataframe of duplicates apps name\n\ngplay[gplay.duplicated('App')].sort_values(by='App')","6d3dad70":"# We can drop the above rows from our dataframe\n\ngplay.drop_duplicates('App', inplace = True)\ngplay.shape","0ec4b1ca":"# Create a box plot for the price column\n\ngplay.describe()","8dd0d9e3":"# Checking the apps with price more than 200\n\n(gplay.Price>200).value_counts()","9afa08b3":"gplay[(gplay.Price>200)]","c820d4a1":"gplay[(gplay.Price>200) & (gplay.Installs<=10000) & (gplay.Reviews<=500)]","76ee494f":"# cleaning the Price column considering other variables\n\ngplay = gplay[~((gplay.Price>200) & (gplay.Installs<=10000) & (gplay.Reviews<=500))]","15655abe":"import matplotlib.pyplot as plt","0cda90fb":"# creating a boxplot for paid apps\n\nprint(gplay.Price.describe(), end = '\\n\\n\\n')\ngplay[gplay.Price>0].Price.plot.box()\nplt.show()","4da47b51":"# Check the apps with price more than 200\n\ngplay[gplay.Price>200]","5b5c9b3b":"# cleaning the Price Column again\n\ngplay = gplay[gplay.Price<=200]\ngplay.shape","ca1219bb":"# Creating a histogram of the Reviews\n\nplt.hist(gplay.Reviews)\nplt.grid(axis='y')\nplt.show()","122b6303":"plt.boxplot(gplay.Reviews)\nplt.show()","683e7108":"gplay.Category.value_counts()","8d29784d":"yValues = gplay['Category'].value_counts().index\nxValues = gplay['Category'].value_counts().values","3dbf0f08":"plt.figure(figsize=(15,10))\nplt.xlabel(\"Count\")\nplt.ylabel(\"Category\")\n\ngraph = sns.barplot(x=xValues,y=yValues, palette= \"husl\")\ngraph.set_title(\"Top categories on Google Playstore\", fontsize = 25)\nplt.show()","2c3264ca":"gplay['Content Rating'].value_counts()","d6763ded":"x2 = gplay['Content Rating'].value_counts().index\ny2 = gplay['Content Rating'].value_counts().values","45389c83":"plt.figure(figsize=(8,5))\nplt.bar(x2,y2,width=0.8,color=['#15244C','#FFFF48','#292734','#EF2920','#CD202D','#ECC5F2'])\nplt.title('Content Rating',size = 20)\nplt.ylabel('Apps(Count)')\nplt.xlabel('Content Rating')\nplt.xticks(rotation=45)\nplt.show()","b43638bd":"gplay.Rating.describe()","da8d8d7b":"plt.figure(figsize=(12,7))\nplt.xlabel('Rating')\nplt.ylabel('Frequency')\nsns.kdeplot(gplay.Rating, color='Blue', shade=True)\nplt.title('Distribution of Rating', size=20)\nplt.show()","78a20af3":"plt.figure(figsize=(7,7))\nlabels = gplay.Type.value_counts(sort=True).index\nsizes = gplay.Type.value_counts(sort=True)\ncolors = ['#fcba03','red']\nexplode = (0.2,0)\nplt.pie(sizes, explode, labels, colors, autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title('Percent of Free Vs Paid Apps in store', size = 20)\nplt.show()","215cf659":"# series groupby objects\ngplay.groupby('Category').Installs.sum().sort_values()    ","99d9e966":"# dataframe groupby objects\nhighest_installs = gplay.groupby('Category')[['Installs']].sum().sort_values(by='Installs', ascending=False)","1fba343e":"highest_installs.head()","54643ab3":"x3 = highest_installs.values\nx3 = x3.reshape(-1)\ny3 = highest_installs.index\n\nplt.figure(figsize=(15,12))\nplt.xlabel('Installs')\nplt.ylabel('Category')\n\ngraph = sns.barplot(x=x3,y=y3, alpha=0.9, palette = 'rocket')\ngraph.set_title('Highest Number of Installs', fontsize=25)\n\nplt.show()","e1f83eea":"gplay[gplay.Category == 'FAMILY'].sort_values(by='Installs', ascending=False).head(10)","3b3d9844":"# Creating a function to write the above code for every category for which I want to know the top 10 apps\n\ndef top10installed(cat):\n    global plt\n    top10 = gplay[gplay.Category == cat.upper()].sort_values(by=\"Installs\", ascending = False).head(10)\n    \n    plt.figure(figsize=(12,7))\n    graph=sns.barplot(x=top10.App, y = top10.Installs, palette = 'viridis')\n    graph.set_xticklabels(graph.get_xticklabels(), rotation= 45, horizontalalignment='right')\n    graph.set_xlabel(\"App Names\", size = 20)\n    graph.set_ylabel('Total Installs of Apps', size = 20)\n    graph.set_title(f\"Top 10 {cat} category Apps\", size = 20)\n    \n    plt.show()\n\ntop10installed('Sports')","5a60a33e":"top10expensive=gplay[['App','Price']].sort_values(by = \"Price\",ascending=False).head(10)\ntop10expensive","78b155b1":"labels = top10expensive.App\nprices = top10expensive.Price\n\nplt.figure(figsize=(15,8))\nax=sns.barplot(x = labels, y = prices, palette='twilight_shifted')\nax.set_title('Top 10 Most Expensive Apps')\nplt.xticks(rotation = 90)\nplt.show()","5e223d16":"highestRev = gplay.sort_values(by='Reviews', ascending=False).head(10)\nhighestRev","08d830c4":"# plotting the bar chart for the above graph\n\nplt.figure(figsize=(10,6))\nax = sns.barplot(x = highestRev.App,y = highestRev.Reviews)\nax.set_title(\"Highest Review Apps\")\nplt.xticks(rotation=90)\nplt.show()","46902a0b":"# Using the value_counts function on gplay.Genres column to get the count of apps in every genre\n\ngplay.Genres.value_counts()","3f428d64":"genreCount = gplay.Genres.value_counts(ascending=False).head(50)    # selecting top 50 apps with maximum count\nx = genreCount.index\ny = genreCount.values\n\nplt.figure(figsize=(15,7))\nax=sns.barplot(x = x,y=y, palette = 'deep')\nax.set_title('Count of Apps in different Genres')\nplt.xticks(rotation=90)\nplt.show()","da501fcc":"earning = gplay[['App','Installs','Price']]\nearning['Earning'] = gplay.Installs * gplay.Price\nearning","da7da8b6":"earning['Earning']=earning.Earning.astype('i')","3e7d1c56":"highestEarning = earning.sort_values(by='Earning',ascending=False).head(10)\nhighestEarning","62fae80f":"labels=highestEarning.App\nvalues=highestEarning.Earning\n\nplt.figure(figsize=(12,7))           \nsns.barplot(x=labels, y=values)\nplt.xticks(rotation=90)\nplt.show()","967a79af":"Above are the top 10 most expensive apps on playstore. `LTC AS Legal` is the most expensive app on playstore.","6290573b":"We have some useful information about the dataset. i.e., we can now see the missing number of values of any attribute, its unique count, and its respective data types.","e5961baa":"Change pd.options.mode.chained_assignment\nCan be set to None, \"warn\", or \"raise\". \"warn\" is the default. None will suppress the warning entirely, and \"raise\" will throw a SettingWithCopyError, preventing the operation from going through.","4642caa6":"`Facebook` is the app with maximum number of reviews on playstore.","b45d88a2":"# Q5:\n### Which category App's have most number of installs ?","ada67f9e":"## Histograms:","aac40467":"You'll be using plt.hist() to plot a histogram. Check out its official documentation:\nhttps:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.hist.html","48570412":"There are some irrelevent , + and 'free' text data in the gplay.Installs columns so we will remove them in order to convert our **object type** column into **int type** column, which will be good for anlysis purpose.","a1b31d72":"# Exploratory Analysis and Visualization","09b94089":"There are **11** such records where number of reviews are greater than the number of installs which is ambiguous.So we will drop these apps from our analysis.","aa2669c7":"## BOXPLOT :","1fbb1e4b":"You can adjust the number of bins to improve its **granularity**.","cbfa8451":"# Q7:\n### What are the top 10 expensive Apps in playstore ?","aed5f007":"# Q3:\n### What is the Distribution of Ratings columns for all the apps on play store ?","67f76abc":"From the above graph we come to conclusion that most of the apps in google playstore are rated in between **3.5** to **4.8**.","76262f65":"From the above graph we can see that `92%(Approx.)` of apps in google play store are free and `8%(Approx.)` are paid.","8066f984":"**Family** category has the most number of installs on google play store followed by **Game** & **Tools** category.","97d3436d":"- Outliers in the data can arise due to genuine reasons or because of dubious entries. In the latter case, you should go ahead and remove such entries immediately. Use a boxplot to observe, analyse and remove them.\n- In the fromer case, you should determine wheather or not removing them would add value to your analysis procedure.\n- You can create a boxplot directly from pandas dataframe or the matplotlib way as you have learnt in the previous session. Check out their offcial documentation here:\n- https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.boxplot.html\n-https:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.boxplot.html","244f06f8":"# Q10\n### Which are the apps that have made the highest earning?","54302722":"**Rating** has the most number of null values followed by **Current Ver, Android Ver, Type & Content Rating**","b4b55d4a":"# Sanity Checks : \nSanity checks is the **process of checking that something does not contain elementary mistakes or impossibilities, or is not based on invalid assumptions**.<br>\nThe data that we have needs to make sense and therefore you can perform certain sanity checks on them to ensure they are factually correct as well. Some sanity checks can be :\n\n1. Rating is between 1 & 5 for all the apps.\n2. Number of Reviews is less than or equal to the number of Installs.\n3. Free Apps shouldn't have a price greater than 0.\n","fc0ea3bb":"Now **gplay.Installs** is in correct format but there is one **NaN** value. We can drop the corresponding row because droping a single null value won't affect our analysis. ","da43d8ba":"## Outliers Analysis using BOXPLOT :\nNow you need to start identifying and removing extreme values or outliers from our dataset. These values can tilt our analysis and often provide us with a biased perspective of the data available. This is where you\u2019ll start utilising visualisation to achieve your tasks. And the best visualisation to use here would be the box plot. Boxplots are one of the best ways of analysing the spread of a numeric variable\n\nUsing a box plot you can identify the outliers as follows:","08b1eb8c":"### 4. gplay.Reviews column","acc66af5":"### Problem Statement\n\nThe team at Google Play Store wants to develop a feature that would enable them to boost visibility for the most promising apps. Now, this analysis would require a preliminary understanding of the features that define a well-performing app. You can ask questions like:\n\n1. Top categories on Google Playstore?\n2. Which category of Content are found more?\n3. Distribution of the ratings of the apps?\n4. What percentage of apps are Free and Paid?\n5. Which category of App's have most number of installs?\n6. What are the Top 10 installed apps in different category?\n7. Which are the top expensive Apps?\n8. Which are the Apps with highest number of reviews?\n9. Count of Apps found in different genres?\n10. Which are the apps that have made the highest earning?","83e60c49":"There are **696** such apps which have same name on playstore.","678efa9e":"To answer this question we will draw the distribution graph either using matplotlib histograms or by using the seaborns kdeplot function to build distribution graphs.","35b9de4e":"# Questions & Answers :\nWith the help of Data Analysis, we can answer to many questions which can't be answerd just by looking at the dataset. By querying on the dataset, and understanding the pattern and rate of growth and fall of any values we can come to many conclusions, and get insightfull information from it.","feb98f71":"### 2. gplay.Installs column","6ca30d2d":"Replacing the mising value from our type column with 'free' as it has ocurred the most number of times.","e43b15a5":"# Google Play Store Case Study - Most Promising Apps","aaf87055":"# Q6:\n### What are the Top 10 installed apps in any 'Category' ?","3e1ace68":"Now, we can fix the Rating column which contains a total of 1474 of missing values. Replacing the missing values with the Median value of that entire column.","7b1be545":"## Exploratory Data Analysis","d721c0bc":"# Q9: \n### What are the count of Apps in different genres?","35b341d0":"From the above plots we can clearly see that **Everyone** category has the most number of apps on play store.","0b38a9b1":"# Duplicate Apps Checking :\n","13ce9110":"The top five apps with highest earnings found on google playstore are:-\n1. Minecraft\n2. Hitman Sniper\n3. Grand Theft Auto: San Andreas\n4. Facetune-For Free\n5. Sleep as Android Unlock","90004241":"# Q2:\n### Which category of Apps from the `Content Rating` column is found more on the play store?\n","3222b26f":"Finally, after fixing all the missing values, we should have a look at our data frame, We defined a function as printinfo() . So, it\u2019s time to use that function.\n","b9f34ffd":"## Now we can check for duplicate apps present in our dataframe :","a01c4590":"# Q1:\n### Can we see what are the top `Categories` in the play store, which contains the highest number of apps? \n","6f50927a":"Our Price column has no ambiguous data. ","22616066":"From the above graph, it can be interpreted that the top categories with highest installs are `Productivity`,`News_And_Magazines`,`Game`,`Family` and `Tools`.","5b418c53":"It will be a better if we can define a function to get more useful information about the different attributes of the dataset, also there is one more valid point in defining a function that it will be reusable, and we are going to utilize our defined function several times in future.","3e6cab06":"We can `drop the above duplicate rows` from our dataframe.","788461bb":"### 3. gplay.Rating column","0d72d969":"## Inferences and Conclusion:\nAfter Analyzing the dataset I have got answers to some of the serious & interesting question which any of the android users would love to know.\n\n1. Top categories on Google Playstore?\n2. Which category of Content are found more?\n3. Distribution of the ratings of the apps?\n4. What percentage of apps are Free and Paid?\n5. Which category of App's have most number of installs?\n6. What are the Top 10 installed apps in different category?\n7. Which are the top expensive Apps?\n8. Which are the Apps with highest number of reviews?\n9. Count of Apps found in different genres?\n10. Which are the apps that have made the highest earning?","2994c363":"![](https:\/\/help.ezbiocloud.net\/wp-content\/uploads\/2020\/04\/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA-2020-04-19-%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB-9.41.35.png)","d05771e8":"From the above visualization we can see that **Tools** has the maximum number Apps followed by **Entertainment, Education, Business and Medical**.","654c407e":"### 6. gplay.Type column","24782d44":"There are **1474 cells** in **gplay.Rating** column which are null.","af001c4a":"# Q4:\n### What portion of the apps in playstore are paid and free ?","11bbb2f3":"All the columns have the null_count as zero, which indicates that now the data frame doesn\u2019t contain any missing values.\nNow we are done with the data cleansing part and in a state to start the work for data preparation","f6a34fdc":"We have some of the unwanted columns which will be of not much use in the analysis process. So let's drop those columns.","b57b294b":"Histograms can also be used in conjuction with boxplots for data cleaning and data handling purposes.\nYou can use it to check the spread of a numeric variable. Histograms generally work by **bucketing the entire range of values** that a particular variable takes to specific **bins**. After that, it uses vertical bars to denote the total number of records in a specific bin, which is also known as its **frequency.**","1a4b1cfa":"### 5. gplay.Price column","a4a635fd":"### 1. gplay.Size column","1f38e5a3":"# Q8:\n### Which[](http:\/\/) Apps have the highest number of reviews ?"}}