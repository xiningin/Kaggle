{"cell_type":{"abcc1ae2":"code","ee1835f8":"code","abc6d95f":"code","9e362f7a":"code","aadb43b0":"code","2ef31ec0":"code","89c155a9":"code","5fd8749a":"code","3547c9e8":"code","faa8f827":"code","7664a657":"code","37d46374":"code","35d16a5b":"code","a4aac839":"code","59c3cb78":"code","2412462d":"code","dfd7a2cf":"code","ab70046a":"code","130252ab":"code","28e9603c":"code","feefe331":"code","e3596315":"code","8e6f43b6":"code","b9bd7359":"code","b69f69c1":"code","85692510":"code","186c631e":"code","dba35fca":"code","9af381b7":"code","00fb108d":"code","7fd0fc5b":"code","299a9ddd":"code","61d1581d":"code","f984854b":"code","29e1323b":"code","30dee493":"code","f70f6e76":"markdown","3d2979bd":"markdown","e0ce7e8d":"markdown","d6675815":"markdown"},"source":{"abcc1ae2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ee1835f8":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","abc6d95f":"df = pd.read_csv(\"..\/input\/student-alcohol-consumption\/student-mat.csv\")","9e362f7a":"df.head(10)","aadb43b0":"df = df.drop(['G1','G2'], axis=1)","2ef31ec0":"for i in range(395):\n    df.iloc[i,0] = 0 if df.iloc[i,0] == 'GP' else 1 # 'GP' -> 0 ; 'MS' -> 1\n    \n    df.iloc[i,1] = 0 if df.iloc[i,1] == 'F' else 1 # 'F' -> 0 ; 'M' -> 1\n    \n    df.iloc[i,3] = 0 if df.iloc[i,3] == 'U' else 1 # 'U' -> 0 ; 'R' -> 1\n    \n    df.iloc[i,4] = 0 if df.iloc[i,4] == 'GT3' else 1 # 'GT3' -> 0 ; 'LE3' -> 1\n    \n    df.iloc[i,5] = 0 if df.iloc[i,5] == 'A' else 1 # 'A' -> 0 ; 'T' -> 1\n    \n    # (Mjob)'at_home' -> 0 ; 'health' -> 1 ; 'services' -> 2 ; 'teacher' -> 3 ; 'other' -> 4\n    if df.iloc[i,8] == 'at_home':\n        df.iloc[i,8] = 0\n    elif df.iloc[i,8] == 'health':\n        df.iloc[i,8] = 1\n    elif df.iloc[i,8] == 'services':\n        df.iloc[i,8] = 2\n    elif df.iloc[i,8] == 'teacher':\n        df.iloc[i,8] = 3\n    else:\n        df.iloc[i,8] = 4\n        \n    # (Fjob)'at_home' -> 0 ; 'health' -> 1 ; 'services' -> 2 ; 'teacher' -> 3 ; 'other' -> 4\n    if df.iloc[i,9] == 'at_home':\n        df.iloc[i,9] = 0\n    elif df.iloc[i,9] == 'health':\n        df.iloc[i,9] = 1\n    elif df.iloc[i,9] == 'services':\n        df.iloc[i,9] = 2\n    elif df.iloc[i,9] == 'teacher':\n        df.iloc[i,9] = 3\n    else:\n        df.iloc[i,9] = 4\n        \n    # 'course' -> 0 ; 'home' -> 1 ; 'reputation' -> 2 ; 'other' -> 3 \n    if df.iloc[i,10] == 'course':\n        df.iloc[i,10] = 0\n    elif df.iloc[i,10] == 'home':\n        df.iloc[i,10] = 1\n    elif df.iloc[i,10] == 'reputation':\n        df.iloc[i,10] = 2\n    else:\n        df.iloc[i,10] = 3\n    \n    # 'mother' -> 0 ; 'father' -> 1 ; 'other' -> 2 \n    if df.iloc[i,11] == 'mother':\n        df.iloc[i,11] = 0\n    elif df.iloc[i,11] == 'father':\n        df.iloc[i,11] = 1\n    else:\n        df.iloc[i,11] = 2\n        \n    df.iloc[i,15] = 0 if df.iloc[i,15] == 'no' else 1 # 'no' -> 0 ; 'yes' -> 1\n    \n    df.iloc[i,16] = 0 if df.iloc[i,16] == 'no' else 1 # 'no' -> 0 ; 'yes' -> 1\n    \n    df.iloc[i,17] = 0 if df.iloc[i,17] == 'no' else 1 # 'no' -> 0 ; 'yes' -> 1\n    \n    df.iloc[i,18] = 0 if df.iloc[i,18] == 'no' else 1 # 'no' -> 0 ; 'yes' -> 1\n    \n    df.iloc[i,19] = 0 if df.iloc[i,19] == 'no' else 1 # 'no' -> 0 ; 'yes' -> 1\n    \n    df.iloc[i,20] = 0 if df.iloc[i,20] == 'no' else 1 # 'no' -> 0 ; 'yes' -> 1\n    \n    df.iloc[i,21] = 0 if df.iloc[i,21] == 'no' else 1 # 'no' -> 0 ; 'yes' -> 1\n    \n    df.iloc[i,22] = 0 if df.iloc[i,22] == 'no' else 1 # 'no' -> 0 ; 'yes' -> 1","89c155a9":"df.head()","5fd8749a":"from sklearn.naive_bayes import GaussianNB","3547c9e8":"clf = GaussianNB()","faa8f827":"GaussianNB(priors=None)","7664a657":"print(dir(clf))","37d46374":"[..., '_abc_cache', '_abc_negative_cache', '_abc_negative_cache_version', '_abc_registry', '_estimator_type', '_get_param_names', '_joint_log_likelihood', '_partial_fit', '_update_mean_variance', 'fit', 'get_params', 'partial_fit', 'predict', 'predict_log_proba', 'predict_proba', 'priors', 'score', 'set_params', ...]","35d16a5b":"clf.get_params()","a4aac839":"{'priors': None}","59c3cb78":"data_train = df.sample(frac=0.8, random_state=1)          # 80% des donn\u00e9es avec frac=0.8\ndata_test = df.drop(data_train.index)     # le reste des donn\u00e9es pour le test","2412462d":"Y_train = data_train.G3\nX_train = data_train.drop(\"G3\", axis=1)\n\nY_test = data_test.G3\nX_test = data_test.drop(\"G3\" , axis=1)","dfd7a2cf":"clf.fit(X_train,Y_train)","ab70046a":"result = clf.predict(X_test)","130252ab":"result","28e9603c":"result - Y_test","feefe331":"from sklearn.metrics import accuracy_score\naccuracy_score(result, Y_test)","e3596315":"mask = Y_test != 0\nY_test = Y_test[mask]\nresult = result[mask]\ndivide = len(Y_test[mask])","8e6f43b6":"erreur_relative = sum((result - Y_test)\/Y_test)\/result.shape[0]\nprint (\"L'erreur relative est de :\", erreur_relative)","b9bd7359":"df2 = df.drop(['Dalc','Walc'], axis=1)","b69f69c1":"data_train2 = df2.sample(frac=0.8, random_state=1)          # 80% des donn\u00e9es avec frac=0.8\ndata_test2 = df2.drop(data_train.index)     # le reste des donn\u00e9es pour le test","85692510":"Y_train2 = data_train2.G3\nX_train2 = data_train2.drop(\"G3\", axis=1)\n\nY_test2 = data_test2.G3\nX_test2 = data_test2.drop(\"G3\" , axis=1)","186c631e":"clf.fit(X_train2,Y_train2)","dba35fca":"result2 = clf.predict(X_test2)","9af381b7":"result2","00fb108d":"result2 - Y_test2","7fd0fc5b":"accuracy_score(result2, Y_test2)","299a9ddd":"mask2 = Y_test2 != 0\nY_test2 = Y_test2[mask2]\nresult2 = result2[mask2]\ndivide2 = len(Y_test2[mask2])","61d1581d":"erreur_relative2 = sum((result2 - Y_test2)\/Y_test2)\/result2.shape[0]\nprint (\"L'erreur relative est de :\", erreur_relative2)","f984854b":"sns.jointplot(\"Dalc\", \"Walc\", df, kind='kde')","29e1323b":"sns.boxplot(x=\"Dalc\", y=\"Walc\", data=df)","30dee493":"sns.boxplot(x=\"Walc\", y=\"Dalc\", data=df)","f70f6e76":"**Et si on enl\u00e8ve la consommation d'alcool des crit\u00e8res ?**","3d2979bd":"**Importation et modification du dataset**","e0ce7e8d":"**Utilisation de la m\u00e9thode Naive Bayes**","d6675815":"**Les limites de Naive Bayes : non ind\u00e9pendance des caract\u00e9ristiques**"}}