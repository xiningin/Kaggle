{"cell_type":{"ca9ff53f":"code","667bf683":"code","591f9b3e":"code","a57267ae":"code","45ab44f7":"code","2836c60f":"code","a6b73d53":"code","87e0e590":"code","e95ce965":"code","aa6ed353":"code","c59dddcb":"code","5f953aa9":"code","65c5db4e":"code","a11ced0f":"code","af01dade":"code","d0751e86":"code","8bb338af":"code","31dbd1aa":"markdown","3892bbb5":"markdown","60cffe88":"markdown","9b7649df":"markdown","4ef95699":"markdown","3ff1abdb":"markdown"},"source":{"ca9ff53f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom catboost import CatBoostRegressor, Pool\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","667bf683":"!jupyter nbextension enable --py widgetsnbextension","591f9b3e":"df = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv')","a57267ae":"df.head()","45ab44f7":"def weird_division(n, d):\n    return n \/ d if d else 0\n\ndf['CPM'] = df.apply(lambda x: weird_division(((x['total_revenue']*100)), x['measurable_impressions'])*1000 , axis=1)","2836c60f":"df.isnull().sum()","a6b73d53":"# cond = (df['CPM'] < df['CPM'].quantile(.95)) & (df['CPM'] >= 0)\ncond = (df['CPM'] >= 0)\ndf = df[cond]","87e0e590":"cols = ['total_revenue', 'order_id' , 'line_item_type_id']\ndf = df.drop(cols, axis=1)","e95ce965":"# split train-test-val\nfrom sklearn.model_selection import train_test_split\n\ndf['timestamp'] = df['date'].apply(pd.Timestamp).astype(int)\n\ndf_train = df[df.date < '2019-06-22']\ndf_test = df[df.date >= '2019-06-22']\n\ncond = (df_test['CPM'] < df_test['CPM'].quantile(.95)) & (df_test['CPM'] >= 0)\ndf_test = df_test[cond]\n\ncond = (df_train['CPM'] < df_train['CPM'].quantile(.95)) & (df_train['CPM'] >= 0)\ndf_train = df_train[cond]\n\ndf_train.drop('date', axis=1, inplace=True)\ndf_test.drop('date', axis=1, inplace=True)\n\nX = df_train.drop(['CPM'], axis=1)\ny = df_train.CPM\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, train_size=0.8)","aa6ed353":"X_train","c59dddcb":"X.info()","5f953aa9":"from catboost import CatBoostRegressor, Pool\ncat_columns = [0, 1, 2, 3, 4, 5, 6, 7, 8]\ntrain_pool = Pool(X_train, y_train, cat_features=cat_columns)","65c5db4e":"model = CatBoostRegressor(\n    loss_function = 'RMSE',\n    random_seed=42,\n    logging_level='Silent',\n)","a11ced0f":"model.fit(\n    train_pool,\n    eval_set=(X_val, y_val),\n#     logging_level='Verbose',  # you can uncomment this for text output\n    plot=True,\n    use_best_model=True,\n)","af01dade":"X_test = df_test.drop(['CPM'], axis=1)\ny_test = df_test.CPM","d0751e86":"y_pred = model.predict(X_test)","8bb338af":"from sklearn.metrics import mean_squared_error\nmean_squared_error(y_test, y_pred)","31dbd1aa":"Get predictions","3892bbb5":"Check for Dtypes","60cffe88":"Remove the outliers ","9b7649df":"Check MSE","4ef95699":"Remove unnessecary columns","3ff1abdb":"Let's add CPM"}}