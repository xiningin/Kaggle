{"cell_type":{"bec7c3fd":"code","ea53296a":"code","6df009e1":"code","17bc9cc7":"code","d7c3bdb9":"code","735f3e26":"code","cea01f5b":"code","6bdbbe94":"code","3c46acba":"code","2428ac7b":"markdown","3cd66d8a":"markdown"},"source":{"bec7c3fd":"#Libraries mostly torch\nimport os\nimport json\n\nimport cv2\nimport keras\nfrom keras import backend as K\nfrom keras.models import Model\nfrom keras.layers import Input\nfrom keras.layers.convolutional import Conv2D, Conv2DTranspose\nfrom keras.layers.pooling import MaxPooling2D\nfrom keras.layers.merge import concatenate\nfrom keras.losses import binary_crossentropy\nfrom keras.callbacks import Callback, ModelCheckpoint\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\nfrom glob import glob\n\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport cv2\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nimport os\nimport keras\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import backend as K\nfrom keras.layers import GlobalAveragePooling2D, Dense, Conv2D, BatchNormalization, Dropout\nfrom keras.models import Model, load_model \nimport gc\n!pip install segmentation-models\n!pip install git+https:\/\/github.com\/qubvel\/segmentation_models\n","ea53296a":"trainImgPath = \"\/kaggle\/input\/severstal-steel-defect-detection\/train_images\/\"\ntrainCsv = \"\/kaggle\/input\/severstal-steel-defect-detection\/train.csv\"\ndata=pd.read_csv(trainCsv)\ndata.ClassId=data.ClassId.astype(int)\n\ntrain_Img_Id = []\ntrain_class_Id = []\nfor i in os.listdir(trainImgPath):\n    for j in range(1,5):\n        train_Img_Id.append(i)\n        train_class_Id.append(j)\ntrain_Imgs = pd.DataFrame({'ImageId':train_Img_Id,'ClassId':train_class_Id})\ntrain_Imgs.head(10)\n ","6df009e1":"train_data = pd.merge(train_Imgs,data ,how='outer', on=['ImageId','ClassId']) \ntrain_data = train_data.fillna('') \ntrain_data","17bc9cc7":"train_data = pd.pivot_table(train_data, values='EncodedPixels', index='ImageId',columns='ClassId', aggfunc=np.sum).astype(str)\ntrain_data = train_data.reset_index() # add Index column to one level with classID   \ntrain_data.columns = ['ImageId','Defect_1','Defect_2','Defect_3','Defect_4'] \nhas_defect = []\nstratify = []\nfor index,row in train_data.iterrows():\n    if row.Defect_1 or row.Defect_2 or row.Defect_3 or row.Defect_4: \n        has_defect.append(1)\n    else:\n        has_defect.append(0) \n    if row.Defect_1 != '':\n        stratify.append(1)\n    elif row.Defect_2 != '':\n        stratify.append(2)\n    elif row.Defect_3:\n        stratify.append(3)\n    elif row.Defect_4:\n        stratify.append(4)\n    else:\n        stratify.append(0)\n        \ntrain_data[\"has_defect\"] = has_defect \ntrain_data[\"stratify\"] = stratify \n\ntrain_data.head(5) ","d7c3bdb9":"WIDTH=288\nHEIGHT=288\nTRAINING_SIZE=7095\n\nx_train, x_test = train_test_split(train_data, test_size = 0.1, stratify=train_data['stratify'], random_state=42)\nx_train, x_val = train_test_split(x_train, test_size = 0.2, stratify = x_train['stratify'], random_state=42)\nprint(x_train.shape, x_val.shape, x_test.shape) ","735f3e26":"x_train_classification = x_train[['ImageId','has_defect']]\nx_val_classification = x_val[['ImageId','has_defect']]\nx_test_classification = x_test[['ImageId','has_defect']] \nprint(x_train_classification.shape , x_val_classification.shape,x_test_classification.shape)\nx_train_classification.head()","cea01f5b":"from keras.preprocessing.image import ImageDataGenerator \ntrain_datagen = ImageDataGenerator(rescale=1.\/255., shear_range=0.2, zoom_range=0.05, rotation_range=5,\n                           width_shift_range=0.2, height_shift_range=0.2, horizontal_flip=True, vertical_flip=True)\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_data_generator = train_datagen.flow_from_dataframe(\n        dataframe=x_train_classification.astype(str),\n        directory=trainImgPath,\n        x_col=\"ImageId\",\n        y_col=\"has_defect\",\n        target_size=(WIDTH,HEIGHT),\n        batch_size=16,\n        class_mode='binary') \n\nvalid_data_generator = test_datagen.flow_from_dataframe(\n        dataframe=x_val_classification.astype(str),\n        directory=trainImgPath,\n        x_col=\"ImageId\",\n        y_col=\"has_defect\",\n        target_size=(WIDTH,HEIGHT),\n        batch_size=16,\n        class_mode='binary') ","6bdbbe94":"Classification_Model = keras.applications.xception.Xception(include_top = False, input_shape = (HEIGHT,WIDTH,3))\n\nlayer = Classification_Model.output\nlayer = GlobalAveragePooling2D()(layer)\n\nlayer = Dense(1024, activation='relu')(layer)\nlayer = BatchNormalization()(layer)\nlayer = Dropout(0.3)(layer)\n\nlayer = Dense(512, activation='relu')(layer)\nlayer = BatchNormalization()(layer)\nlayer = Dropout(0.3)(layer)\n\nlayer = Dense(64, activation='relu')(layer)\npredictions = Dense(1, activation='sigmoid')(layer)\nmodel = Model(inputs=Classification_Model.input, outputs=predictions)\nmodel.summary()","3c46acba":"model.compile(optimizer='adam', loss='binary_crossentropy',metrics=['accuracy'])\nTraining = model.fit_generator(train_data_generator, validation_data = valid_data_generator, epochs = 30, verbose=1)","2428ac7b":"# $\\color{ORANGE}{\\text{U-NET IN STEEL   }}$\n\n![maninsteel](https:\/\/wallpapercave.com\/wp\/Me1VNXE.jpg)","3cd66d8a":"The UNET was developed by Olaf Ronneberger et al.[1] for Bio Medical Image Segmentation. The architecture contains two paths. First path is the contraction path (also called as the encoder) which is used to capture the context in the image. The encoder is just a traditional stack of convolutional and max pooling layers. The second path is the symmetric expanding path (also called as the decoder) which is used to enable precise localization using transposed convolutions. Thus it is an end-to-end fully convolutional network. it only contains Convolutional layers and does not contain any Dense layer because of which it can accept image of any size. \n\n*[1]Ronneberger, O., Fischer, P., & Brox, T. (2015, October). U-net: Convolutional networks for biomedical image segmentation. In International Conference on Medical image computing and computer-assisted intervention (pp. 234-241). Springer, Cham.*\n\n![unet](https:\/\/pubs.rsc.org\/image\/article\/2020\/ra\/c9ra05877j\/c9ra05877j-f1_hi-res.gif)"}}