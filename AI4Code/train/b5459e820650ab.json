{"cell_type":{"befba3bc":"code","16b8ba2b":"code","df2944b7":"code","1bb86400":"code","42ac7d8b":"code","efc8f34d":"code","702f1a90":"code","38c992b4":"code","746425f8":"code","b9ad0639":"code","d98de840":"code","3297fcb8":"code","0b0e23e8":"code","d9f3d4c4":"code","1c86fe45":"code","1b55b58b":"code","a55be8e3":"code","5e21bd4c":"code","478fa86c":"code","9f110758":"code","751deacd":"code","5a9c32f6":"code","765de4a6":"code","094cbcc1":"code","3cacda98":"code","38abb5d8":"code","018ee7c8":"code","4e537e79":"code","6bfb79da":"code","f7c2aae0":"code","dedb5b6d":"code","66e937dc":"code","a8ba6ffe":"code","3f6273bd":"code","3a3d6f93":"code","6eec372a":"code","cacdbd20":"code","9600b431":"code","80a8e4f3":"code","f8ff6c41":"code","3c0d176b":"code","30ae31c6":"code","66c2aac2":"code","ee064023":"markdown","69bb2833":"markdown","5ce8fc61":"markdown","40b2262b":"markdown","6ea775a9":"markdown"},"source":{"befba3bc":"from __future__ import division\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\nimport geopandas as gpd\n\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\nsns.set_style('darkgrid')","16b8ba2b":"data = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\n\nprint('Number of features: %s' %data.shape[1])\nprint('Number of examples: %s' %data.shape[0])","df2944b7":"data.head()","1bb86400":"# I want to describe only columns which contain numerical values\n\ndata.drop(['id', 'name', 'host_id', 'host_name', 'neighbourhood_group', 'neighbourhood', 'room_type', 'last_review'], axis=1).describe()","42ac7d8b":"# Printing unique values for string columns\n\nfor col in data[['neighbourhood_group', 'neighbourhood', 'room_type']]:\n    print('Unique values in column: %s' %col)\n    print(data[col].unique()), '\\n'","efc8f34d":"print('Null values in Airbnb dataset: \\n')\nprint(data.isnull().sum())\nprint('\\n')\nprint('Percentage of null values in review columns: ')\nprint(round(data['last_review'].isnull().sum()\/len(data)*100, 2),\"%\")\n\n# For reviews there are many null values so i want to also see percentage to the whole dataset\n# Null values in name, host_name, last_review, reviews_per_month, which for reviews is the same amount. \n# I want to see if it is for the same rows\n# I want to see also how null values for name and host_name are distributed because these amounts are different","702f1a90":"fig, ax = plt.subplots(figsize=(17,6))\nplt.title('Null values in last_review and reviews_per_month', fontsize=15)\nsns.heatmap(data[['last_review','reviews_per_month' ]].isnull(), cmap=\"Blues\", yticklabels=False, ax=ax, cbar_kws={'ticks': [0, 1]})","38c992b4":"null_name = (pd.DataFrame(np.where((data['name'].isnull())))).transpose()\nnull_host_name = (pd.DataFrame(np.where((data['host_name'].isnull())))).transpose()\n\nsum_null = pd.concat([null_name,null_host_name], axis=1, ignore_index=True)\nsum_null.columns = ['Null rows in name', 'Null rows in host_name']\nsum_null\n\n# Null values in name and host_name columns are accidental","746425f8":"# last_review column may be dropped\n\ndata.drop('last_review', axis=1, inplace=True)","b9ad0639":"# Null values for name and host_name I replace with 0. Also reviews_per_month I replace with 0\n\ndata['name'].fillna(value=0, inplace=True)","d98de840":"data['host_name'].fillna(value=0, inplace=True)","3297fcb8":"data['reviews_per_month'].fillna(value=0, inplace=True)","0b0e23e8":"data.isnull().sum()","d9f3d4c4":"data.head()","1c86fe45":"# Evaluation 1 - top 3 hosts; hosts with the biggest amount of listings\n\ntop_3_hosts = (pd.DataFrame(data.host_id.value_counts())).head(3)\ntop_3_hosts.columns=['Listings']\ntop_3_hosts['host_id'] = top_3_hosts.index\ntop_3_hosts.reset_index(drop=True, inplace=True)\ntop_3_hosts","1b55b58b":"# Evaluation 2 - top 3 the hottest neighbourhoood groups\n\ntop_3_neigh = pd.DataFrame(data['neighbourhood_group'].value_counts().head(3))\ntop_3_neigh.columns=['Listings']\ntop_3_neigh['Neighbourhood Group'] = top_3_neigh.index\ntop_3_neigh.reset_index(drop=True, inplace=True)\ntop_3_neigh","a55be8e3":"# Evaluation 3 - average price, availability in year \n\naverage_price_ava = pd.DataFrame(data[['price', 'availability_365']].describe())\naverage_price_ava.columns=['Price', 'Availability in a year']\naverage_price_ava","5e21bd4c":"# Evaluation 4 - most reviewed hosts\n\nrev_group = pd.DataFrame(data.groupby('number_of_reviews').sum()['host_id'])\nmost_reviewed = (rev_group.sort_values('number_of_reviews',ascending=False)).head(3)\nmost_reviewed.columns = ['Host ID']\nmost_reviewed['Number of reviews'] = most_reviewed.index\nmost_reviewed.reset_index(drop=True, inplace=True)\nmost_reviewed","478fa86c":"# Evaluation 5 - the most reviewed hosts per month\n\ngr = pd.DataFrame(data.groupby('reviews_per_month').sum()['host_id'])\nrev = (gr.sort_values('reviews_per_month',ascending=False)).head(3)\nrev.columns = ['Host ID']\nrev['Reviews per month'] = rev.index\nrev.reset_index(drop=True, inplace=True)\nrev","9f110758":"\n# Evaluation 6 - prices in every neighbourhood group\n\n# Brooklyn\nnei1 = data.loc[data['neighbourhood_group'] == 'Brooklyn']\nprice_nei1 = nei1[['price']]\n# Manhattan\nnei2 = data.loc[data['neighbourhood_group'] == 'Manhattan']\nprice_nei2 = nei2[['price']]\n# Queens\nnei3 = data.loc[data['neighbourhood_group'] == 'Queens']\nprice_nei3 = nei3[['price']]\n# Staten Island\nnei4 = data.loc[data['neighbourhood_group'] == 'Staten Island']\nprice_nei4 = nei4[['price']]\n# Bronx\nnei5 = data.loc[data['neighbourhood_group'] == 'Bronx']\nprice_nei5 = nei5[['price']]\n\nprice_list = [price_nei1, price_nei2, price_nei3, price_nei4, price_nei5]\n\n\n\nprice_stats = []\nnei_list = ['Brooklyn', 'Manhattan', 'Queens', 'Staten Island', 'Bronx']\n\n# price statistics for every neighbourhood\n\nfor x in price_list:\n    i = x.describe(percentiles=[.25, .5, .75])\n    i = i.iloc[3:]\n    i.reset_index(inplace=True)\n    i.rename(columns={'index': 'Stats'}, inplace=True)\n    price_stats.append(i)\n\nprice_stats[0].rename(columns={'price': nei_list[0]}, inplace=True)\nprice_stats[1].rename(columns={'price': nei_list[1]}, inplace=True)\nprice_stats[2].rename(columns={'price': nei_list[2]}, inplace=True)\nprice_stats[3].rename(columns={'price': nei_list[3]}, inplace=True)\nprice_stats[4].rename(columns={'price': nei_list[4]}, inplace=True)\n\n# final view of dataframe\n\nstats_df = price_stats\nstats_df = [df.set_index('Stats') for df in stats_df]\nstats_df=stats_df[0].join(stats_df[1:])\nstats_df","751deacd":"# Visualisation 1 - Neighbourhood groups with counts with category room_type\n\nplt.figure(figsize=(15,6))\nsns.countplot(data=data, x='neighbourhood_group', hue='room_type', palette='GnBu_d')\nplt.title('Counts of airbnb in neighbourhoods with room type category', fontsize=15)\nplt.xlabel('Neighbourhood group')\nplt.ylabel(\"Count\")\nplt.legend(frameon=False, fontsize=12)","5a9c32f6":"# Visualisation 2 - distribution of prices\n\nplt.figure(figsize=(15,6))\nsns.violinplot(data=data[data.price <500], x='neighbourhood_group', y='price', palette='GnBu_d')\nplt.title('Density and distribution of prices for each neighbourhood group', fontsize=15)\nplt.xlabel('Neighbourhood group')\nplt.ylabel(\"Price\")","765de4a6":"# Visualisation 3 - top neighbourhoods with category of room type\n\ntop_nei = data['neighbourhood'].value_counts().reset_index().head(10)\ntop_nei = top_nei['index'].tolist()\n\nplt.figure(figsize=(15,6))\nvis_3 = sns.catplot(x='neighbourhood', hue='neighbourhood_group', col='room_type', data=data.loc[data['neighbourhood'].isin(top_nei)], kind='count', palette='GnBu_d')\nvis_3.set_xticklabels(rotation=90)","094cbcc1":"# Visualisation 4 - room types\n\nplt.figure(figsize=(15,6))\nsns.countplot(data=data, x='room_type', palette='GnBu_d')\nplt.title('Counts for room types', fontsize=15)\nplt.xlabel('Room types')\nplt.ylabel(\"Count\")","3cacda98":"# Visualisation 5 - availability in year\n\nplt.figure(figsize=(15,6))\nsns.distplot(data.availability_365, kde=False)\nplt.xlim(0,365)\nplt.title('Availability in year', fontsize=15)\nplt.xlabel('Availibility')\nplt.ylabel(\"Frequency\")","38abb5d8":"# Visualisation 6 - map of hosts\n\nplt.figure(figsize=(10,10))\na = sns.scatterplot(data=data, x='longitude', y='latitude', hue='neighbourhood_group', palette='GnBu_d')\nplt.title('Map of airbnb', fontsize=15)\nplt.xlabel('Latitude')\nplt.ylabel(\"Longitude\")\nplt.legend(frameon=False, fontsize=13)","018ee7c8":"# Visualisation 7 - correlations between values\n\nplt.figure(figsize=(15,8))\nsns.heatmap(data.corr(), annot=True, linewidths=0.1, cmap='Reds')","4e537e79":"# Visualisation 8 - prices in neighbourhoods \n\ndata1 = pd.DataFrame(data.groupby(['neighbourhood_group', 'neighbourhood'])['price'].mean())\ndata1.reset_index(inplace=True)\n\nbronx = (data1[data1['neighbourhood_group'] =='Bronx']).sort_values(by='price',ascending=False).head(10)\nbrooklyn = (data1[data1['neighbourhood_group'] =='Brooklyn']).sort_values(by='price',ascending=False).head(10)\nmanhattan = (data1[data1['neighbourhood_group'] =='Manhattan']).sort_values(by='price',ascending=False).head(10)\nqueens = (data1[data1['neighbourhood_group'] =='Queens']).sort_values(by='price',ascending=False).head(10)\nstaten = (data1[data1['neighbourhood_group'] =='Staten Island']).sort_values(by='price',ascending=False).head(10)\n\nneighs = [bronx, brooklyn, manhattan, queens, staten]\ntitles = ['Bronx', 'Brooklyn', 'Manhattan', 'Queens', 'Staten Island']","6bfb79da":"fig, axs = plt.subplots(5, figsize=(15, 15), gridspec_kw={'hspace': 0.5, 'wspace': 0})\nsns.scatterplot(data=bronx, x='neighbourhood', y='price', ax=axs[0], color='red', s=100)\nsns.scatterplot(data=brooklyn, x='neighbourhood', y='price', ax=axs[1], color='blue', s=100)\nsns.scatterplot(data=manhattan, x='neighbourhood', y='price', ax=axs[2], color='black', s=100)\nsns.scatterplot(data=queens, x='neighbourhood', y='price', ax=axs[3], color='green', s=100)\nsns.scatterplot(data=staten, x='neighbourhood', y='price', ax=axs[4], color='purple', s=100)\n\naxs[0].set_title('Bronx')\naxs[1].set_title('Brooklyn')\naxs[2].set_title('Manhattan')\naxs[3].set_title('Queens')\naxs[4].set_title('Staten Island')\n\nfor ax in axs:\n    ax.set(xlabel='Neighbourhood', ylabel='Price')\n    ax.label_outer()","f7c2aae0":"# Preparing dataset for predictions\n\ndata_pred = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')","dedb5b6d":"data_pred.head()","66e937dc":"data_pred.drop(['name', 'host_name', 'last_review', 'id'], inplace=True, axis=1)","a8ba6ffe":"data_pred['reviews_per_month'] = data_pred['reviews_per_month'].fillna(value=0, inplace=False)","3f6273bd":"data_pred.head()","3a3d6f93":"le = preprocessing.LabelEncoder()\n\nle.fit(data_pred['neighbourhood_group'])\ndata_pred['neighbourhood_group']=le.transform(data_pred['neighbourhood_group'])\n\nle.fit(data_pred['neighbourhood'])\ndata_pred['neighbourhood']=le.transform(data_pred['neighbourhood'])\n\nle.fit(data_pred['room_type'])\ndata_pred['room_type']=le.transform(data_pred['room_type'])","6eec372a":"data_pred.sort_values('price', ascending=True, inplace=True)","cacdbd20":"data_pred = data_pred[11:-6]","9600b431":"lm = LinearRegression()","80a8e4f3":"X = data_pred.drop(['price', 'longitude'], inplace=False, axis=1)\ny = data_pred['price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nlm.fit(X_train, y_train)","f8ff6c41":"predictions = lm.predict(X_test)","3c0d176b":"# Evaluated metrics\n\nmae = metrics.mean_absolute_error(y_test, predictions)\nmse = metrics.mean_squared_error(y_test, predictions)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, predictions))\nr2 = metrics.r2_score(y_test, predictions)\n\nprint('MAE (Mean Absolute Error): %s' %mae)\nprint('MSE (Mean Squared Error): %s' %mse)\nprint('RMSE (Root mean squared error): %s' %rmse)\nprint('R2 score: %s' %r2)","30ae31c6":"# Avtual vs predicted values\n\nerror = pd.DataFrame({'Actual Values': np.array(y_test).flatten(), 'Predicted Values': predictions.flatten()})\nerror.head(10)","66c2aac2":"# Evaluated predictions\n\nplt.figure(figsize=(15,7))\nplt.xlim(-10,350)\nsns.regplot(y=y_test, x=predictions, color='blue')\nplt.title('Evaluated predictions', fontsize=15)\nplt.xlabel('Predictions')\nplt.ylabel('Test')","ee064023":"5. Predictions","69bb2833":"2. Null values","5ce8fc61":"4. Visualisations","40b2262b":"1. Preparing data","6ea775a9":"3. Evaluations"}}