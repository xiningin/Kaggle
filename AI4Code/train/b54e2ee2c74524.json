{"cell_type":{"265b2ec1":"code","a45d9a34":"code","397f22bc":"code","11a9db7b":"code","43708d5a":"code","cee51ca6":"code","0aed1e19":"code","c269e3ba":"code","39e3016b":"code","14dad4d4":"code","73585171":"code","3de6324e":"code","bd1f2bfa":"code","b52c8a91":"code","fc6651fd":"markdown","e434f241":"markdown","b6cb1355":"markdown","7a93f706":"markdown","fabd6f0a":"markdown","c4d6c5f2":"markdown"},"source":{"265b2ec1":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport pickle","a45d9a34":"df = pd.read_csv('..\/input\/caesarean-section-classification\/Caesarian Section Classification Dataset(CSV).csv')\n#df = pd.read_csv('Cesarean .csv')\ndf.head()","397f22bc":"# To know number od rows and column\ndf.shape","11a9db7b":"# To know if missing value is preset and also to know dtypes\ndf.info()","43708d5a":"# Five point summary\ndf.describe().T","cee51ca6":"#To find no. of unique values in categorical columns\n\nfor col in df.select_dtypes(include=object).columns:\n    print('No. of unique values in column '+col+':')\n    print(df[col].value_counts(),'\\n')","0aed1e19":"# Replacing 'low' to 'Low' and 'yes' to 'Yes' \n\ndf['Blood of Pressure'] = df['Blood of Pressure'].replace('low','Low')\ndf['Caesarian'] = df['Caesarian'].replace('yes','Yes')","c269e3ba":"# Plotting countplot\n\nfig = plt.figure(figsize=(15,10))\n\nfig.add_subplot(221)\nplt.title('Delivery No.', fontsize=12)\nsns.countplot(df['Delivery No'])\n\nfig.add_subplot(2,2,2)\nplt.title('Blood of Pressure', fontsize=12)\nsns.countplot(df['Blood of Pressure'])\n\nfig.add_subplot(223)\nplt.title('Heart Problem', fontsize=12)\nsns.countplot(df['Heart Problem'])\n\nfig.add_subplot(2,2,4)\nplt.title('Caesarian', fontsize=12)\nsns.countplot(df['Caesarian'])\n\nplt.show()","39e3016b":"# Encoding using One-Hot encoding\n\ndf_dummy = pd.get_dummies(df,drop_first=True)\ndf_dummy.head()","14dad4d4":"#Separting df_train in independent and dependent variable\nX=df_dummy.drop(['Caesarian_Yes'],axis=1)\ny=df_dummy['Caesarian_Yes']","73585171":"#Splitting df_train in train and test\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)","3de6324e":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n\nlogreg = LogisticRegression(solver='liblinear', fit_intercept=True) \n\nlogreg.fit(X_train, y_train)\n\ny_prob_train = logreg.predict_proba(X_train)[:,1]\ny_pred_train = logreg.predict (X_train)\n\nprint('Confusion Matrix - Train: ', '\\n', confusion_matrix(y_train, y_pred_train))\nprint('Overall accuracy - Train: ', accuracy_score(y_train, y_pred_train))\n\n\ny_prob = logreg.predict_proba(X_test)[:,1]\ny_pred = logreg.predict (X_test)\n\nprint('Confusion Matrix - Test: ','\\n', confusion_matrix(y_test, y_pred))\nprint('Overall accuracy - Test: ', accuracy_score(y_test, y_pred))","bd1f2bfa":"#Fitting whole dataset\nlog_r = logreg.fit(X, y)","b52c8a91":"pickle.dump(log_r, open('caesarean.pkl','wb')) #wb->write binary","fc6651fd":"#### Splitting into train and test:","e434f241":"#### Saving model in pickle:","b6cb1355":"#### Modelling:","7a93f706":"- We can see that in column 'Blood of Pressure' there are 4 unique instead of 3\n- In column Caesarian there should be 2 instead of 3","fabd6f0a":"#### Loading the dataset:","c4d6c5f2":"#### Importing important libraries:"}}