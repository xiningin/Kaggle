{"cell_type":{"56dfc624":"code","fa81b19f":"code","fea40418":"code","ca05a7a7":"code","4d22c0a5":"code","8c8310d3":"code","6b33913b":"code","0539f014":"code","9a50a26b":"code","d9bb1475":"code","1afe6076":"code","af0d0c03":"code","80afc36c":"markdown","7a3d4ad4":"markdown","e2df3ddd":"markdown","9c8f70de":"markdown","103a64df":"markdown","65dd75fe":"markdown","337fec37":"markdown","9250bbbb":"markdown","f7cac052":"markdown","8a82ef76":"markdown","a4a0e572":"markdown","69ea15f9":"markdown"},"source":{"56dfc624":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport numpy as np\nimport pandas as pd\nimport time\nimport glob\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow\nimport os\nimport cv2\nimport shutil","fa81b19f":"base_path = '..\/input\/license-plate-digits-classification-dataset\/CNN letter Dataset\/'\nclasses = os.listdir('..\/input\/license-plate-digits-classification-dataset\/CNN letter Dataset')\nfilepaths = []\nlabels = []\nfor c in classes:\n    flist = os.listdir(base_path + c)\n    for f in flist:\n        fpath = os.path.join(base_path + c + '\/' + f)\n        filepaths.append(fpath)\n        labels.append(c)\nprint ('filepaths: ', len(filepaths), '   labels: ', len(labels))","fea40418":"Fseries=pd.Series(filepaths, name='file_paths')\nLseries=pd.Series(labels, name='labels')\ndf=pd.concat([Fseries,Lseries], axis=1)\ndf=pd.DataFrame(np.array(df).reshape(35500,2), columns = ['file_paths', 'labels'])\nprint(df['labels'].value_counts())","ca05a7a7":"plt.figure(figsize=(14,10))\nfor i in range(20):\n    random = np.random.randint(1,len(df))\n    plt.subplot(4,5,i+1)\n    plt.imshow(cv2.imread(df.loc[random,\"file_paths\"]))\n    plt.title(df.loc[random, \"labels\"], size = 10, color = \"black\") \n    plt.xticks([])\n    plt.yticks([])\n    \nplt.show()","4d22c0a5":"train_df, test_df = train_test_split(df, train_size=0.95, random_state=0)\ntrain_df, valid_df = train_test_split(train_df, train_size=0.9, random_state=0)\nprint(train_df.labels.value_counts())\nprint(valid_df.labels.value_counts())\nprint(test_df.labels.value_counts())","8c8310d3":"target_size=(299,299)\nbatch_size=64","6b33913b":"datagen = ImageDataGenerator(preprocessing_function=tf.keras.applications.inception_resnet_v2.preprocess_input)\ntrain_gen = datagen.flow_from_dataframe(train_df, x_col='file_paths', y_col='labels', target_size=target_size, batch_size=batch_size, color_mode='rgb', class_mode='categorical')\nvalid_gen = datagen.flow_from_dataframe(valid_df, x_col='file_paths', y_col='labels', target_size=target_size, batch_size=batch_size, color_mode='rgb', class_mode='categorical')\ntest_gen = datagen.flow_from_dataframe(test_df, x_col='file_paths', y_col='labels', target_size=target_size, batch_size=batch_size, color_mode='rgb', class_mode='categorical')","0539f014":"base_model = tf.keras.applications.InceptionResNetV2(include_top=False, input_shape=(299,299,3))\nmodel = tf.keras.Sequential([\n    base_model, \n    tf.keras.layers.GlobalAveragePooling2D(), \n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.BatchNormalization(), \n    tf.keras.layers.Dropout(0.2), \n    tf.keras.layers.Dense(35, activation='softmax')\n])","9a50a26b":"lr=0.001\nmodel.compile(loss='categorical_crossentropy', optimizer=Adam(lr=lr), metrics=['accuracy'])","d9bb1475":"patience = 1\nstop_patience = 3\nfactor = 0.5\n\ncallbacks = [\n    tf.keras.callbacks.ModelCheckpoint(\"classify_model.h5\", save_best_only=True, verbose = 0),\n    tf.keras.callbacks.EarlyStopping(patience=stop_patience, monitor='val_loss', verbose=1),\n    tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=factor, patience=patience, verbose=1)\n]","1afe6076":"epochs = 10\nhistory = model.fit(train_gen, validation_data=valid_gen, epochs=epochs, callbacks=callbacks, verbose=1)","af0d0c03":"best_model = model\nbest_model.load_weights('.\/classify_model.h5')\nbest_model.evaluate(test_gen)","80afc36c":"I could keep training past 10 epochs but the loss is already very small and the accuracy is 100%.","7a3d4ad4":"# **Callbacks**","e2df3ddd":"# **Visualize Images**","9c8f70de":"# **Import Libraries**","103a64df":"# **Building CNN Model**","65dd75fe":"# **Predictions on Test Set**","337fec37":"# **Create Dataframe**","9250bbbb":"# **Model Training**","f7cac052":"Dataset is a little inbalanced.","8a82ef76":"# **Splitting Dataframe into Train, Valid, and Test**","a4a0e572":"# **Image Data Generator**","69ea15f9":"Looks like the images are already augmented. "}}