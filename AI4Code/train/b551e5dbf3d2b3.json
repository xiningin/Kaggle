{"cell_type":{"7400a9da":"code","72a3abb4":"code","abdb10b3":"code","ffd0b0d9":"code","fb0af48c":"code","c0ef30cb":"code","59b441ad":"code","f6515830":"code","d3af035c":"code","0b6dd9fb":"code","c2a5f99e":"code","4e1a29b7":"code","383577d2":"code","45e6e1a8":"code","58f16a9d":"code","2ca18c46":"code","1bbb1428":"code","f393d265":"code","92094dac":"code","79b88194":"code","d324498f":"code","6df43ff9":"code","fade0a7d":"markdown"},"source":{"7400a9da":"# \u30e9\u30a4\u30d6\u30e9\u30eaimport\u3057\u3066\u304a\u304d\u307e\u3059\nimport os\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.utils import to_categorical, Sequence\nfrom tensorflow.keras.layers import Dense, Conv1D, GlobalAveragePooling1D, MaxPooling1D, Dropout, Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport cv2","72a3abb4":"# \u30c7\u30fc\u30bf\u4e00\u89a7\u3092DataFrame\u3068\u3057\u3066\u8aad\u307f\u8fbc\u307f\u307e\u3059\ndf_train = pd.read_csv('\/kaggle\/input\/data-science-spring-osaka-2021\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/data-science-spring-osaka-2021\/test.csv')","abdb10b3":"# \u30c7\u30fc\u30bf\u306e\u5148\u982d\u90e8\u5206\u3092\u30c1\u30e9\u30c3\u3068\u898b\u3066\u304a\u304d\u307e\u3057\u3087\u3046\ndf_train.head()","ffd0b0d9":"df_test.head()","fb0af48c":"# \u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\u306e\u65b9\u30821\u500b\u76ee\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_sensor = pd.read_csv('\/kaggle\/input\/data-science-spring-osaka-2021\/train\/train_0000.csv')","c0ef30cb":"df_sensor.head()","59b441ad":"# \u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\u306f\u6570\u767e\u884c\u7a0b\u5ea6\u306e\u53ef\u5909\u9577\u30c7\u30fc\u30bf\u3067\u3059\u3002\n# \u3053\u308c\u3092\u9ad8\u3055\u304cH\u30d4\u30af\u30bb\u30eb\u3001\u5e45\u304c1\u30d4\u30af\u30bb\u30eb\u3001\u30c1\u30e3\u30cd\u30eb\u657020\u306e\u753b\u50cf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\n# \u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306f1d\u306a\u306e\u3067\u3059\u304c\u3042\u3048\u3066\u5e451\u30d4\u30af\u30bb\u30eb\u306e2d\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u306b\u3088\u3063\u3066OpenCV\u306a\u3069\u306e\u753b\u50cf\u95a2\u9023\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u6a5f\u80fd\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\ndef create_image(df, H):\n    X = []\n    for path in df.file_path:\n        arr = pd.read_csv('\/kaggle\/input\/data-science-spring-osaka-2021' + path, index_col=0).values.reshape(1,-1,20)\n        arr = cv2.resize(arr.astype(float), (H, 1))\n        arr = arr.reshape(-1, H, 1, 20)\n        X.append(arr)\n    X = np.concatenate(X)\n    return X","f6515830":"# \u5909\u63db\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\nX_train = create_image(df_train, 512)\nX_test = create_image(df_test, 512)","d3af035c":"# \u30bf\u30fc\u30b2\u30c3\u30c8\u3082\u5909\u63db\u3057\u3066\u304a\u304d\u307e\u3059\u3002\ny_train = df_train.action_seq.values\nle = LabelEncoder()\ny_train = to_categorical(le.fit_transform(y_train))","0b6dd9fb":"# \u30c7\u30fc\u30bf\u306eshape\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\nX_train.shape, y_train.shape, X_test.shape","c2a5f99e":"# \u3055\u3066\u3001\u30c7\u30fc\u30bf\u306b\u7a2e\u3005\u306e\u5909\u63db\u64cd\u4f5c\u3092\u65bd\u3057\u305f\u4e0a\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u30df\u30cb\u30d0\u30c3\u30c1\u3092\u5410\u304d\u51fa\u3057\u3066\u304f\u308c\u308bGenerator\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n# Credit: https:\/\/github.com\/yu4u\/mixup-generator\nclass EskinGenerator(Sequence):\n        'Generates data for Keras'\n        def __init__(self, X_train, y_train, batch_size=32, shuffle=True, alpha=.2, datagen=None):\n            'Initialization'\n            self.batch_size = batch_size\n            self.X_train = X_train\n            self.y_train = y_train\n            self.shuffle = shuffle\n            self.on_epoch_end()\n            self.alpha= alpha\n            self.datagen=datagen\n    \n        def __len__(self):\n            'Denotes the number of batches per epoch'\n            return int(np.floor(len(self.X_train) \/ self.batch_size))\n    \n        def __getitem__(self, index):\n            'Generate one batch of data'\n            # Generate indexes of the batch\n            indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n            # Generate data\n            X, y = self.__data_generation(indexes)\n    \n            return X, y\n    \n        def on_epoch_end(self):\n            'Updates indexes after each epoch'\n            self.indexes = np.arange(len(self.X_train))\n            if self.shuffle == True:\n                np.random.shuffle(self.indexes)\n        \n        def __data_generation(self, batch_ids):\n            if self.alpha>0:\n                _, h, w, c = self.X_train.shape\n                l = np.random.beta(self.alpha, self.alpha, self.batch_size)\n                X_l = l.reshape(self.batch_size, 1, 1, 1)\n                y_l = l.reshape(self.batch_size, 1)\n\n                X1 = self.X_train[batch_ids]\n                X2 = self.X_train[np.flip(batch_ids)] #replaced this with flip\n                X = X1 * X_l + X2 * (1 - X_l)\n                y1 = self.y_train[batch_ids]\n                y2 = self.y_train[np.flip(batch_ids)]\n                y = y1 * y_l + y2 * (1 - y_l) \n            else:\n                X = self.X_train[batch_ids]\n                y = self.y_train[batch_ids]\n        \n            if self.datagen:\n                for i in range(self.batch_size):\n                    X[i] = self.datagen.random_transform(X[i])\n                    X[i] = self.datagen.standardize(X[i]) # Data Augmentation\u306f\u4ed6\u306b\u3082\u69d8\u3005\u53ef\u80fd\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u3001\u662f\u975e\u30bb\u30f3\u30b5\u30fc\u306e\u6c17\u6301\u3061\u306b\u306a\u3063\u3066\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\n            X = X.reshape((-1,X.shape[1], X.shape[3])) # 1D-CNN\u306b\u5165\u308c\u305f\u3044\u306e\u3067\u3001\u51fa\u529b\u306f1D\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n        \n            return X, y","4e1a29b7":"# \u30b7\u30f3\u30d7\u30eb\u306a1D-CNN\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n# \u4ee5\u4e0b\u306f\u3042\u307e\u308a\u7df4\u3089\u308c\u305f\u3082\u306e\u3067\u3082\u306a\u3044\u306e\u3067\u3001\u7686\u3055\u3093\u3067\u6539\u826f\u3067\u304d\u306a\u3044\u304b\u3082\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\ndef create_model(nb_class=11, nb_features=512, nb_channels=20):\n    input = Input((nb_features,nb_channels)) # \u5165\u529b\u5c64\u3001\u3053\u3053\u3067\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u306e\u3067\u5165\u529b\u306e\u7279\u5fb4\u91cf\u6570\uff08\u4eca\u56de\u306e\u5834\u5408\u306f\u76f8\u5bfe\u6642\u9593\u30d5\u30ec\u30fc\u30e0\u6570\uff09\u3068channel\u6570\uff08\u4eca\u56de\u306f\u30bb\u30f3\u30b5\u30fc\u6570\uff09\u3092\u6559\u3048\u3066\u3042\u3052\u308b\n\n    x = Conv1D(64, 8, kernel_initializer='glorot_uniform',\n                 kernel_regularizer=regularizers.l2(l=0.0001), padding='same', activation='relu', input_shape=(nb_features,1))(input)   \n    # https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/Conv1D\n    # \u300c\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u8aad\u3080\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8aad\u3080\u3001\u5fc5\u8981\u304c\u3042\u308c\u3070\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u300d\u3042\u305f\u308a\u306f\u81ea\u8d70\u529b\u3092\u990a\u3046\u4e0a\u3067\u8eab\u306b\u4ed8\u3051\u3066\u304a\u304f\u3068\u3068\u3066\u3082\u597d\u307e\u3057\u3044\u7fd2\u6163\u3067\u3059\u3002\n    # 1\u6b21\u5143\u306e\u7573\u307f\u8fbc\u307f\u51e6\u7406\u3092\u884c\u3046\u3002\n    # 64\u306f\u30c1\u30e3\u30cd\u30eb\uff08\uff1d\u30d5\u30a3\u30eb\u30bf\u3068\u304b\u30ab\u30fc\u30cd\u30eb\u3068\u3082\u3044\u3046\uff09\u306e\u6570\u300264\u7a2e\u985e\u306e\u30d5\u30a3\u30eb\u30bf\u3067\u7573\u307f\u8fbc\u307f\u51e6\u7406\u3092\u884c\u3046\u3002\u305d\u306e\u305f\u3081\u3001\u51fa\u529b\u306f\u30c1\u30e3\u30cd\u30eb\u657064\u306b\u306a\u308b\u3002\u5177\u4f53\u7684\u306a\u51e6\u7406\u306e\u30a4\u30e1\u30fc\u30b8\u306f\u4e2d\u9593\u5171\u6709\u4f1a\u306e\u30b9\u30e9\u30a4\u30c9\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n    # 8\u306f\u30d5\u30a3\u30eb\u30bf\u306e\u30b5\u30a4\u30ba\u3002\u30b5\u30a4\u30ba8\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u306a\u304c\u3089\u7573\u307f\u8fbc\u307f\u51e6\u7406\u3092\u884c\u3046\u3002\n    # kernel_initializer\u306f\u91cd\u307f\u306e\u521d\u671f\u5316\u65b9\u6cd5\u3002\u73fe\u6642\u70b9\u3067\u306f\u6c17\u306b\u3057\u306a\u304f\u3066\u826f\u3044\u3002\n    # kernel_regularizer\u306f\u6b63\u5247\u5316\u306e\u8a2d\u5b9a\u3002\u91cd\u307f\u306eL2\u30ce\u30eb\u30e0\uff08\u5927\u304d\u3055\uff09\u306b\u30da\u30ca\u30eb\u30c6\u30a3\u3092\u304b\u3051\u308b\u3053\u3068\u3067\u904e\u5b66\u7fd2\u3092\u6291\u5236\u3059\u308b\u3002\n    # padding\u306f\u7573\u307f\u8fbc\u307f\u5f8c\u306e\u5916\u5468\u90e8\u306e\u53d6\u308a\u6271\u3044\u3002\u7573\u307f\u8fbc\u307f\u3092\u884c\u3046\u3068\u4f55\u3082\u3057\u306a\u3044\u3068\u51fa\u529b\u30b5\u30a4\u30ba\u304c\u51fa\u529b\u30b5\u30a4\u30ba\u3088\u308a\u5c0f\u3055\u304f\u306a\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u8db3\u308a\u306a\u3044\u5206\u3060\u3051\u30bc\u30ed\u57cb\u3081\u3059\u308b\u3053\u3068\u3067\u5165\u51fa\u529b\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u306b\u306a\u308b\u3088\u3046\u306b\u6307\u5b9a\u3057\u3066\u3044\u308b\u3002\n    # activation\u306f\u7573\u307f\u8fbc\u307f\u51e6\u7406\u5f8c\u306b\u9069\u7528\u3059\u308b\u6d3b\u6027\u5316\u95a2\u6570\u3002relu\u306f\u30e9\u30f3\u30d7\u95a2\u6570(rectified linear unit, ReLU, x<0\u3067y=0, x>=0\u3067y=x)\u3092\u610f\u5473\u3059\u308b\u3002\u306a\u304a\u3001\u975e\u7dda\u5f62\u306a\u6d3b\u6027\u5316\u95a2\u6570\u3092\u631f\u307e\u306a\u3044\u3068\u3001\u5c64\u3092\u91cd\u306d\u3066\u3082\u610f\u5473\u304c\u306a\u3044\uff08\uff11\u5c64\u3068\u7b49\u4fa1\uff09\u3002\n    \n    \n    x = MaxPooling1D(2, padding='same')(x)\n    # \u30d7\u30fc\u30ea\u30f3\u30b0\u306fn\u30de\u30b9\u3054\u3068\u306b\u7d71\u8a08\u91cf\u3092\u3068\u3063\u3066\u51fa\u529b\u3068\u3059\u308b\u3002\u3053\u3053\u3067\u306fMaxPooling\u3067n=2\u306a\u306e\u3067\uff12\u30de\u30b9\u3054\u3068\u306b\u6700\u5927\u5024\u3092\u3068\u3063\u3066\u51fa\u529b\u3068\u3057\u3066\u3044\u308b\u3002\u7d50\u679c\u3001\u51fa\u529b\u30b5\u30a4\u30ba\u306f\u5165\u529b\u306e\u534a\u5206\u306b\u306a\u308b\u3002\n    # \u4ee5\u964d\u3001\u3053\u308c\u3089\u306e\u64cd\u4f5c\u3092\u7e70\u308a\u8fd4\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3068\u601d\u3046\u3002\u305d\u306e\u7d50\u679c\u3001\u30b5\u30a4\u30ba\u304c\u7e2e\u5c0f\u3059\u308b\u3068\u540c\u6642\u306b\u30c1\u30e3\u30cd\u30eb\u6570\u306f\u5897\u3048\u3066\u3044\u304f\u3002\u3053\u308c\u306f\u7279\u5fb4\u62bd\u51fa\u3092\u7e70\u308a\u8fd4\u3057\u306a\u304c\u3089\u62bd\u8c61\u5316\u3057\u3066\u3044\u304f\u3053\u3068\u306b\u76f8\u5f53\u3059\u308b\u3002\n    # \u753b\u50cf\u306b\u5bfe\u3057\u3066\u884c\u308f\u308c\u308bConv2d\u3082\u540c\u69d8\n    \n    x = Conv1D(128, 3, padding='same', activation='relu')(x)\n    x = MaxPooling1D(2, padding='same')(x)\n    x = Conv1D(256, 3, padding='same', activation='relu')(x)\n    x = GlobalAveragePooling1D()(x)\n    # Global\u3068\u3064\u3044\u3066\u3044\u308b\u304c\u3001\u305d\u306e\u610f\u5473\u306f\u300c\u5404\u30c1\u30e3\u30cd\u30eb\u5168\u4f53\u3067\u7d71\u8a08\u91cf\u3092\u3068\u3063\u3066\u51fa\u529b\u3068\u3059\u308b\u300d\u3068\u3044\u3046\u610f\u5473\u3067\u3001\u3053\u3053\u3067\u306fAvarage\u306a\u306e\u3067\u5404256\u30c1\u30e3\u30cd\u30eb\u305d\u308c\u305e\u308c\u306e\u5e73\u5747\u5024\u3092\u3068\u3063\u3066\u51fa\u529b\u3068\u3059\u308b\u3002\u7d50\u679c\u3001\u51fa\u529b\u30b5\u30a4\u30ba256\u306b\u306a\u308b\n\n    x = Dropout(0.4)(x)\n    # \u5b66\u7fd2\u6642\u306b\u78ba\u7387\u7684\u306b40%\u306e\u51fa\u529b\u3092\u30bc\u30ed\u306b\u3059\u308b\u3002\u3053\u3053\u3067\u306f\u76f4\u524d\u304cGlobalAveragePooling\u306a\u306e\u3067\u7279\u5b9a\u306e\u30c1\u30e3\u30cd\u30eb\u60c5\u5831\u306b\u983c\u308a\u5207\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u904e\u5b66\u7fd2\u3092\u6291\u5236\u3059\u308b\u3002\u5b66\u7fd2\u6642\u9593\u306f\u305d\u306e\u5206\u304b\u304b\u308b\u3002\n    \n    x = Dense(256, activation='relu') (x)\n    # \u5168\u7d50\u5408\u5c64\u3092Dense layer\u3068\u3082\u547c\u3076\u3002\n    x = Dense(128, activation='relu') (x)\n    output = Dense(nb_class, activation='softmax') (x)\n    # \u51fa\u529b\u5c64\n    \n    model = Model(inputs=input, outputs=output)\n    # \u30e2\u30c7\u30eb\u306e\u5165\u51fa\u529b\u3092\u5b9a\u7fa9\u3059\u308b\n    model.compile(loss='categorical_crossentropy',optimizer='adam')\n    # \u30e2\u30c7\u30eb\u306e\u640d\u5931\u95a2\u6570\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u5b9a\u7fa9\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\n    \n    return model","383577d2":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u3092\u691c\u5b9a\uff08\u7cbe\u5ea6\u8a55\u4fa1\uff09\u7528\u306b\u5207\u308a\u51fa\u3057\u307e\u3059\u3002\n# \u3053\u3053\u3067\u306f\u5358\u7d14\u306b\u30e9\u30f3\u30c0\u30e0\u30b9\u30d7\u30ea\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u300c\u624b\u5143\u3067\u3082unseen label\u304c\u3042\u308b\u5207\u308a\u65b9\u3092\u3059\u308b\u300d\u3068\u3044\u3046\u306e\u3082\u4e00\u8003\u3067\u3057\u3087\u3046\u3002\n# \u662f\u975e\u69d8\u3005\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nX_train_, X_val, y_train_, y_val = train_test_split(X_train, y_train, test_size=0.33, random_state=71, stratify=y_train)","45e6e1a8":"# EskinGenerator\u306b\u4eca\u56de\u306e\u30c7\u30fc\u30bf\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n# \u3053\u3053\u3067\u3001\u30bf\u30a4\u30e0\u30aa\u30d5\u30bb\u30c3\u30c8\u306f\u305d\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u304carbiterary decision\u3067\u3042\u308a\u3001\u672c\u8cea\u7684\u306b\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5024\u3092\u5909\u3048\u306a\u3044\uff08\u30d1\u30f3\u30c1\u3092\u6253\u3064\u30bf\u30a4\u30df\u30f3\u30b0\u304c\u5c11\u3005\u305a\u308c\u3066\u3082\u3001\u540c\u3058\u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3\u3068\u3044\u3046\u4e8b\u5b9f\u3092\u5909\u3048\u306a\u3044\uff09\u3053\u3068\u304b\u3089\u3001height_shift\u3092\u5165\u308c\u3066\u307f\u307e\u3059\u3002\n# \u4ed6\u306b\u3082\u8272\u3005\u8003\u3048\u3089\u308c\u308b\u3067\u3057\u3087\u3046\u3002\ndatagen = image.ImageDataGenerator(\n    height_shift_range=0.1,  \n)\n\ntrain_generator = EskinGenerator(X_train_, y_train_, alpha=0, batch_size=16, datagen=datagen, shuffle=True)\nval_generator = EskinGenerator(X_val, y_val, alpha=0, batch_size=1, datagen=None, shuffle=False)","58f16a9d":"# \u30b9\u30d7\u30ea\u30c3\u30c8\u3057\u305f\u624b\u5143\u306e\u30c7\u30fc\u30bf\u3067\u30e2\u30c7\u30ea\u30f3\u30b0\u3057\u3066\u307f\u307e\u3059\u3002\nearly_stopping =  EarlyStopping(monitor='val_loss', min_delta=0.0, patience=20)\nmodel = create_model(nb_class=11, nb_features=512, nb_channels=20)\nhistory = model.fit(train_generator, batch_size=16, epochs=999, validation_data=val_generator, callbacks=[early_stopping])","2ca18c46":"# \u7cbe\u5ea6\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# \u3053\u3053\u3067\u306fvalidation set\u306bunseen label\u304c\u542b\u307e\u308c\u306a\u3044\u70b9\u306b\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u306d\u3002\n# \u3088\u308a\u9069\u6b63\u306a\u8a55\u4fa1\u7cfb\u304c\u69cb\u7bc9\u3067\u304d\u306a\u3044\u304b\u3001\u3082\u3063\u3068\u826f\u3044\u3084\u308a\u65b9\u304c\u306a\u3044\u304b\u3082\u8003\u3048\u3066\u307f\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002\ny_val_pred = model.predict(X_val.reshape((-1,512,20)))\naccuracy_score(np.argmax(y_val, axis=1), np.argmax(y_val_pred, axis=1))","1bbb1428":"# early stopping\u3057\u3066\u3044\u305f\u306e\u3067\u3001\u6700\u9069\u306a\u30e9\u30a6\u30f3\u30c9\u6570\u3092\u53d6\u5f97\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nbest_iter = np.argmin(history.history['val_loss'])\nbest_iter","f393d265":"# \u5168\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\u3057\u76f4\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\ntrain_generator = EskinGenerator(X_train, y_train, alpha=0, batch_size=16, datagen=datagen, shuffle=True)\n\nmodel = create_model(nb_class=11, nb_features=512, nb_channels=20)\nhistory = model.fit(train_generator, batch_size=16, epochs=best_iter)","92094dac":"# \u4e88\u6e2c\u78ba\u7387\u3092\u51fa\u529b\u3057\u3066\u307f\u307e\u3059\u3002\ny_pred = model.predict(X_test.reshape(-1,512,20))","79b88194":"# \u5206\u5e03\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# \u307b\u3068\u3093\u3069\u306e\u4e88\u6e2c\u5024\u304c1.0\u8fd1\u3044\u306e\u306b\u5bfe\u3057\u3066\u3001\u81ea\u4fe1\u306a\u3055\u3052\u306a\u51fa\u529b\u304c\u591a\u6570\u8a8d\u3081\u3089\u308c\u307e\u3059\u306d\u3002\n# \u3042\u307e\u308a\u30b9\u30de\u30fc\u30c8\u306a\u3084\u308a\u65b9\u3067\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u4e00\u65e6\u95be\u5024\u3092\u3056\u3063\u304f\u308a\u8a2d\u5b9a\u3057\u3066\u305d\u308c\u4ee5\u4e0b\u3092'jab-jab-bodyhook'\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n# \u3053\u306e\u8fba\u308a\u306e\u65b9\u6cd5\u8ad6\u3082\u3088\u308a\u826f\u3044\u3084\u308a\u65b9\u3092\u63a2\u6c42\u3057\u3066\u3044\u304f\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002\nplt.hist(np.max(y_pred, axis=1), bins=20)\nplt.show()","d324498f":"# \u4e88\u6e2c\u5024\u3092\u6240\u5b9a\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\ndf_sub = pd.read_csv('..\/input\/data-science-spring-osaka-2021\/sample_submission.csv')\ndf_sub['action_seq'] = le.inverse_transform(np.argmax(y_pred, axis=1))\ndf_sub.loc[np.max(y_pred, axis=1)<0.9, 'action_seq'] = 'jab-jab-bodyhook'\ndf_sub","6df43ff9":"# \u51fa\u529b\u3057\u3066\u63d0\u51fa\u3057\u307e\u3059\ndf_sub.to_csv('submission.csv', index=False)","fade0a7d":"# \u305d\u308c\u3067\u306f\u5f15\u304d\u7d9a\u304d\u30c7\u30fc\u30bf\u3068\u30b3\u30f3\u30da\u3092\u304a\u697d\u3057\u307f\u304f\u3060\u3055\u3044\uff01"}}