{"cell_type":{"f5852794":"code","3f95ce73":"code","6383102a":"code","b99cb4e1":"code","887e3059":"code","683c8e6e":"code","69ab79d9":"code","f2668719":"code","f94af09d":"code","d90a1da7":"code","d106a783":"code","ebbb0b3a":"code","caaac5ae":"code","452599b3":"code","677c804b":"code","1ba8a741":"code","f80166d2":"code","46f3900d":"code","26ba756a":"code","dd6fff33":"code","6928f806":"code","c88ebbdb":"code","0dbe042d":"code","7d617f45":"code","fd1f78da":"code","825f25c9":"code","31af5c78":"code","d7eaa381":"code","ab3052db":"code","7134de45":"code","79376097":"code","a0b75800":"code","0622151e":"code","22c82b5e":"code","218fe9ea":"code","50a20ca9":"code","759c24c2":"code","906c8663":"code","b96a58b4":"code","bb5cc53a":"code","1ef4d5e1":"code","9cf78c55":"code","6d60aba5":"code","cd79c101":"code","224e9c42":"code","9484c860":"code","c56e4dfb":"code","dbbac6f1":"code","42631c25":"code","c88353f5":"code","d96ebadf":"code","36e07750":"code","9dda5be7":"code","5da1f26b":"code","b370cb46":"code","7d893816":"code","d3eff185":"code","1469936d":"code","159a296c":"code","b17477e3":"code","8e5faae3":"code","8d4cacba":"code","66575495":"code","cd7bc454":"code","ef033424":"markdown","cb1d6709":"markdown","6722c422":"markdown","c3e2b1b7":"markdown","663c27ff":"markdown","4374f677":"markdown","46c223ba":"markdown","9f8fff3e":"markdown","52e02929":"markdown","7a8ba937":"markdown","8a6ca802":"markdown","7b97ef06":"markdown","cef4f1d2":"markdown","2ce676b6":"markdown","5d1ee904":"markdown","6a1f33f5":"markdown","ce17a702":"markdown","742b267d":"markdown","894e5c1e":"markdown","1ebc3e3f":"markdown","225cd2d7":"markdown","c161c507":"markdown","2792b3f8":"markdown"},"source":{"f5852794":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np","3f95ce73":"df = pd.read_csv(\"..\/input\/kc_house_data.csv\")","6383102a":"df.head()","b99cb4e1":"df.info()","887e3059":"df.date = pd.to_datetime(df['date'])\ndf.yr_built = pd.to_datetime(df.yr_built)\ndf.yr_renovated = pd.to_datetime(df.yr_renovated)","683c8e6e":"df.info()","69ab79d9":"df = df.drop_duplicates()\ndf.isnull().sum()","f2668719":"df.price.skew()","f94af09d":"df.price.plot(kind='hist')","d90a1da7":"np.log(df.price).skew()","d106a783":"np.log(df.price).plot(kind = 'hist')","ebbb0b3a":"df.price = np.log(df.price)","caaac5ae":"corr = df.corr()","452599b3":"mask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","677c804b":"# Create correlation matrix\ncorr_matrix = df.corr().abs()\n\n# Select upper triangle of correlation matrix\nupper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n\n# Find index of feature columns with correlation greater than 0.95\nto_drop = [column for column in upper.columns if any(upper[column] > 0.95)]","1ba8a741":"df = df.drop(df.columns[to_drop], axis=1)","f80166d2":"print (corr['price'].sort_values(ascending=False)[:5], '\\n')\nprint (corr['price'].sort_values(ascending=False)[-5:])","46f3900d":"df.grade.unique()","26ba756a":"grade_pivot = df.pivot_table(index='grade',\n                                  values='price', aggfunc=np.median)","dd6fff33":"grade_pivot","6928f806":"grade_pivot.plot(kind='bar', color='blue')\nplt.xlabel('Grade')\nplt.ylabel('Median Sale Price')\nplt.xticks(rotation=0)\n\nx = df.sqft_living\ny = df.price\n\nz = np.polyfit(x,y,1)\np = np.poly1d(z)\nplt.plot(x,p(x),\"r--\")\n\nplt.show()","c88ebbdb":"df.grade.plot(kind = 'hist')\nplt.show()","0dbe042d":"df.grade.skew()","7d617f45":"df.sqft_living.skew()","fd1f78da":"df.sqft_living = np.log(df.sqft_living)\ndf.sqft_living.plot(kind='hist',color = 'blue')","825f25c9":"df.sqft_living.skew()","31af5c78":"plt.scatter(x=df.sqft_living,y=df.price)\nplt.xlabel('Sqft_Living')\nplt.ylabel('Sale_Price')\nplt.xticks(rotation=0)\n\nx = df.sqft_living\ny = df.price\n\nz = np.polyfit(x,y,1)\np = np.poly1d(z)\nplt.plot(x,p(x),\"r--\")\n\nplt.show()","d7eaa381":"df.sqft_living15.skew()","ab3052db":"np.log(df.sqft_living15).skew()","7134de45":"df.sqft_living15 = np.log(df.sqft_living15)\n\ndf.sqft_living15.plot(kind='hist')","79376097":"plt.scatter(x=df.sqft_living15,y=df.price)\nplt.xlabel('Sqft_Living15')\nplt.ylabel('Sale_Price')\nplt.xticks(rotation=0)\n\nx = df.sqft_living15\ny = df.price\n\nz = np.polyfit(x,y,1)\np = np.poly1d(z)\nplt.plot(x,p(x),\"r--\")\n\nplt.show()","a0b75800":"df.sqft_above.skew()","0622151e":"np.log(df.sqft_above).skew()","22c82b5e":"df.sqft_above = np.log(df.sqft_above)","218fe9ea":"df.sqft_above.plot(kind='hist')","50a20ca9":"plt.scatter(x=df.sqft_above,y=df.price)\nplt.xlabel('Sqft Above')\nplt.ylabel('Sale_Price')\nplt.xticks(rotation=0)\n\nx = df.sqft_above\ny = df.price\n\nz = np.polyfit(x,y,1)\np = np.poly1d(z)\nplt.plot(x,p(x),\"r--\")\n\nplt.show()","759c24c2":"print (corr['price'].sort_values(ascending=False)[:7], '\\n')\nprint (corr['price'].sort_values(ascending=False)[-5:])","906c8663":"df['age_house'] = df.date - df.yr_built\ndf.age_house = pd.to_numeric(df.age_house.dt.days\/365)\ndf.age_house.head()","b96a58b4":"df = df.drop(['date','yr_built'],axis = 'columns')","bb5cc53a":"df = df[df.bedrooms > 1]","1ef4d5e1":"df.yr_renovated = pd.to_numeric(df.yr_renovated)","9cf78c55":"c = df.yr_renovated != 0","6d60aba5":"c = c.map({False:0, True:1})\ndf.yr_renovated = c","cd79c101":"df.info()","224e9c42":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression","9484c860":"reg = LinearRegression()","c56e4dfb":"y = df.price\nX = df.drop(['price', 'id'], axis=1)","dbbac6f1":"cv = cross_val_score(reg,X,y,cv = 5)","42631c25":"np.mean(cv)","c88353f5":"from sklearn.model_selection import train_test_split","d96ebadf":"X_train,X_test,y_train,y_test = train_test_split(X,y,random_state = 42,test_size = 0.3)","36e07750":"reg.fit(X_train,y_train)","9dda5be7":"result = reg.score(X_train,y_train)\nprint(\"Accuracy: %.3f%%\" % (result*100.0))","5da1f26b":"import statsmodels.api as sm\nX1 = sm.add_constant(X_train)\nresult = sm.OLS(y_train, X1).fit()\n#print dir(result)\nprint('The R2 and Adjusted R2 are : {0} %, {1} % ;respectively'.format(result.rsquared*100, result.rsquared_adj*100))","b370cb46":"y_pred = reg.predict(X_test)","7d893816":"from sklearn import metrics\n\nmae = metrics.mean_absolute_error(y_test,y_pred)\nprint(\"Mean Absolute Error is: \", mae)","d3eff185":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nrms = sqrt(mean_squared_error(y_test, y_pred))\nprint(\"Root Mean Square Error is: \", rms)","1469936d":"mape = np.mean(metrics.mean_absolute_error(y_test,y_pred)\/y_test *100)","159a296c":"print('So the Mean Absolute Percentage Error is: {0} %'.format(mape))","b17477e3":"#np.mean(np.abs((y_test - y_pred) \/ y_test)) * 100","8e5faae3":"actual_values = y_test\npredictions = y_pred\nsns.scatterplot(actual_values, predictions)","8d4cacba":"y_train_pred = reg.predict(X_train)\ny_test_pred = reg.predict(X_test)","66575495":"# Plot residuals\nplt.scatter(y_train_pred, y_train_pred - y_train, c = \"blue\", marker = \"s\", label = \"Training data\")\nplt.scatter(y_test_pred, y_test_pred - y_test, c = \"lightgreen\", marker = \"s\", label = \"Validation data\")\nplt.title(\"Linear regression\")\nplt.xlabel(\"Predicted values\")\nplt.ylabel(\"Residuals\")\nplt.legend(loc = \"upper left\")\nplt.hlines(y = 0, xmin = 11.5, xmax = 15.5, color = \"red\")\nplt.show()","cd7bc454":"# Plot predictions\nplt.scatter(y_train_pred, y_train, c = \"blue\", marker = \"s\", label = \"Training data\")\nplt.scatter(y_test_pred, y_test, c = \"lightgreen\", marker = \"s\", label = \"Validation data\")\nplt.title(\"Linear regression\")\nplt.xlabel(\"Predicted values\")\nplt.ylabel(\"Real values\")\nplt.legend(loc = \"upper left\")\nplt.plot([11.5, 15.5], [11.5, 15.5], c = \"red\")\nplt.show()","ef033424":"**Now lets targer sqft living**","cb1d6709":"***now what we are going to do is -- we will drop the variables with correlation > 95%***","6722c422":"**Perfect increase which is justified**","c3e2b1b7":"let us start with **grade**","663c27ff":"******As there are no missing values lets move further to the next steps** i.e to check the correlation before that lets check our Target Variable -- price****","4374f677":"**So finally we have achieved! Peace :)**","46c223ba":"> ***Our Model is off by 1.51%***","9f8fff3e":"We have pretty much covered most of the things","52e02929":"**Let us see the first 5 and last 5 variables which correspond to high +ve or -ve correlation**","7a8ba937":"** Predicting Housing price through Linear Regression and Visualizing Data.**","8a6ca802":"**Now we have converted the price target variable into log form where the Data is Normally Distributed with much less skewness**","7b97ef06":"**Next on the list is  Sqft Above**","cef4f1d2":"**Till now what we have done is --- We have inspected for the datatypes and converted them to the respective form i.e. Data Time series**","2ce676b6":"**Now let us expole more --- lets check if there is any missing Data in our Data Frame**","5d1ee904":"**For more deeper analysis we can go with the following**","6a1f33f5":"**Now lets plot prediction **","ce17a702":"**We can clearly see as the grade increases Median Sale Price also increase not drastically but surely with a decent slope**","742b267d":"**Let us check the correlation factors and features which contribute or bias our result**","894e5c1e":"**This is too much of skewness this may alter our results so, let us fix it**","1ebc3e3f":"**Once again we can see a definiet relationship between Sale Price and Sqft  Living15**","225cd2d7":"**Let's plot residulas **","c161c507":"**Let us check for correlations again**","2792b3f8":"**This looks pretty decent**"}}