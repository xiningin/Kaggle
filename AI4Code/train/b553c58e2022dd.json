{"cell_type":{"a2d46300":"code","0f220b4d":"code","0d21ebd7":"code","a1f7dda1":"code","3d2185bd":"code","d8fc562d":"code","eea9fa1d":"code","0ede1606":"code","1f1f14b8":"code","54da2521":"code","a345ea4a":"code","aec91c1d":"code","703fbbac":"code","54aa4e1f":"code","c081243a":"code","20b75883":"code","0aef424e":"code","57d8c9bd":"code","5412003b":"code","04584289":"code","77677093":"code","5ad890d1":"code","b6e6c8bb":"code","34218ac5":"code","8afa9214":"code","924d11e9":"code","d9c3c494":"code","0dc9ca4a":"code","90a9c2d7":"code","b720c60b":"code","bb9ba40f":"code","3a9d02a5":"code","3ebda064":"code","a0c58616":"code","c998e404":"code","6b45847e":"markdown","2eb2dabc":"markdown","babd3ac9":"markdown","e2586ca6":"markdown","a414b36d":"markdown","2fb9774e":"markdown","a7c21781":"markdown","7bb4a3cd":"markdown","572637a1":"markdown","19eee12c":"markdown","8465a1bf":"markdown","f5d8e19e":"markdown","4b796285":"markdown","5afafc58":"markdown","52ad4502":"markdown"},"source":{"a2d46300":"import numpy as np\nimport pandas as pd\nimport calendar\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go","0f220b4d":"order = pd.read_csv(\"..\/input\/ecommerce-data\/List of Orders.csv\")\norder.head()","0d21ebd7":"details = pd.read_csv(\"..\/input\/ecommerce-data\/Order Details.csv\")\ndetails.head()","a1f7dda1":"target = pd.read_csv(\"..\/input\/ecommerce-data\/Sales target.csv\")\ntarget.head()","3d2185bd":"# Cleaning the order dataset\norder.info()","d8fc562d":"# Changing the Order Date variable to datetime data type\norder['Order Date'] = order['Order Date'].astype('datetime64[ns]')","eea9fa1d":"# Checking null values\norder.isnull().sum()","0ede1606":"# Droping Null Values\norder = order.dropna()\norder.info()","1f1f14b8":"# Cleaning the detail dataset\ndetails.info()","54da2521":"# Null values\ndetails.isnull().sum()","a345ea4a":"# Chaning the Category and Sub-category variable to categorical data type\ndetails['Category'] = details['Category'].astype('category')\ndetails['Sub-Category'] = details['Sub-Category'].astype('category')\ndetails.info()","aec91c1d":"# Cleaning Target dataset\ntarget.info()","703fbbac":"# Coverting Category variable to category data\ntarget['Category'] = target['Category'].astype('category')\ntarget.info()","54aa4e1f":"# Cleanded Details data\ndetails.head()","c081243a":"# Cleaned Order Data\norder.head()","20b75883":"# Cleaned Target Dataset\ntarget.head()","0aef424e":"profits = details.groupby('Order ID').sum().reset_index()\nprofits.head()","57d8c9bd":"df = pd.merge(order, profits)\ndf.head()","5412003b":"df['Year'] = pd.DatetimeIndex(df['Order Date']).year\ndf['Month_Number'] = pd.DatetimeIndex(df['Order Date']).month\ndf['Month'] = df['Month_Number'].apply(lambda x: calendar.month_abbr[x])\n\nyear_month = df.groupby(['Year', 'Month','Month_Number']).sum().sort_values(['Year','Month_Number'])\nyear_month","04584289":"year_month = year_month.reset_index()\nyear_month[\"Color\"] = np.where(year_month[\"Profit\"]<0, 'Loss', 'Profit')\nyear_month_2018 = year_month[year_month['Year']==2018]\nfig = px.bar(year_month_2018, x='Month_Number', y='Profit', color='Color',\n             title=\"Monthly Profit in 2018\",\n             labels=dict(Month_Number=\"Month\", Profit=\"Profit\", Color=\"Results\"),\n             color_discrete_map={\n                 'Loss': '#EC2049',\n                 'Profit': '#2F9599'},\n             hover_data=[\"Month\", \"Profit\"],\n             template='plotly_white')\n\nfig.update_layout(yaxis_tickprefix = '\u20b9', yaxis_tickformat = ',.2f')\n\nfig.update_layout(\n    xaxis = dict(\n        tickvals = [1, 2, 3, 4, 5, 6, 7,8 ,9, 10, 11, 12],\n        ticktext = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    )\n)\nfig.show()\n","77677093":"year_month_2019 = year_month[year_month['Year']==2019]\nfig = px.bar(year_month_2019, x='Month_Number', y='Profit', color='Color',\n             title=\"Monthly Profit in 2019\",\n             labels=dict(Month_Number=\"Month\", Profit=\"Profit\", Color=\"Results\"),\n             color_discrete_map={\n                 'Loss': '#EC2049',\n                 'Profit': '#2F9599'},\n             hover_data=[\"Month\", \"Profit\"],\n             template='plotly_white')\n\nfig.update_layout(yaxis_tickprefix = '\u20b9', yaxis_tickformat = ',.2f')\n\nfig.update_layout(\n    xaxis = dict(\n        tickvals = [1, 2, 3, 4, 5, 6, 7,8 ,9, 10, 11, 12],\n        ticktext = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    )\n)\nfig.show()","5ad890d1":"orders_by_state = order.groupby(['State']).size().reset_index(name='Total Orders').sort_values(['Total Orders'])\norders_by_state","b6e6c8bb":"profit_by_state = df.groupby('State').sum().reset_index().sort_values(['Profit'])\nprofit_by_state[\"Color\"] = np.where(profit_by_state[\"Profit\"]<0, 'Loss', 'Profit')\n\n\nfig = px.bar(profit_by_state, x='State', y='Profit',\n             color='Color', color_discrete_map={\n                 'Loss': '#EC2049',\n                 'Profit': '#2F9599'},\n             title=\"Profit by State\",\n             labels=dict(Color=\"Results\"),\n             template='plotly_white')\n\n# Disabling Zoom\nfig.layout.xaxis.fixedrange = True\nfig.layout.yaxis.fixedrange = True\n\nfig.update_layout(yaxis_tickprefix = '\u20b9', yaxis_tickformat = ',.2f')\n\nfig.update_xaxes(\n        tickangle = -90,\n        title_text = \"States\",\n)\n\n\nfig.show()","34218ac5":"top_customers = df.groupby('CustomerName').sum().reset_index().sort_values(['Quantity'], ascending=False).head(5)\n\ncolors = ['lightslategray',] * 5\ncolors[0] = 'crimson'\n\nfig = go.Figure(data=[go.Bar(\n    x=top_customers['CustomerName'],\n    y=top_customers['Quantity'],\n    marker_color=colors # marker color can be a single color value or an iterable,\n)])\nfig.update_layout(title_text='Top 5 Customers', \n                  template='plotly_white')\nfig.update_xaxes(title_text='Customers')\nfig.update_yaxes(title_text='Total Orders')\n\nfig.show()","8afa9214":"details_category = details.groupby('Category').sum().reset_index()\nfig = px.pie(details_category, values='Quantity', names='Category', color='Category',\n             color_discrete_map={'Clothing':'cyan',\n                                 'Electronics':'royalblue',\n                                 'Furniture':'darkblue'},\n            title='Total Quantity Sold per Category')\nfig.show()","924d11e9":"details_subcategory = details.groupby('Sub-Category').sum().reset_index()\nfig = px.pie(details_subcategory, values='Quantity', names='Sub-Category', color='Sub-Category',\n            title='Total Quantity Sold per Sub-Category')\nfig.show()","d9c3c494":"date_orders = order.groupby('Order Date').size().reset_index(name=\"Orders\")\ndate_orders['Month'] = pd.DatetimeIndex(date_orders['Order Date']).month\ndate_orders['Year'] = pd.DatetimeIndex(date_orders['Order Date']).year\n\ndate_orders_2018 = date_orders[date_orders['Year']==2018]\ndate_orders_2019 = date_orders[date_orders['Year']==2019]\n\nmonth_2018 = date_orders_2018.groupby('Month').sum().reset_index()\nmonth_2019 = date_orders_2019.groupby('Month').sum().reset_index()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    name='2018',\n    x=month_2018['Month'],\n    y=month_2018['Orders'],\n    connectgaps=True # override default to connect the gaps\n))\nfig.add_trace(go.Scatter(\n    name='2019',\n    x=month_2019['Month'],\n    y=month_2019['Orders'],\n    connectgaps=True # override default to connect the gaps\n))\nfig.update_layout(title_text='Monthly Quantity Sold',\n                 template='plotly_dark')\nfig.update_xaxes(title_text='Time')\nfig.update_yaxes(title_text='Orders')\nfig.update_layout(\n    xaxis = dict(\n        tickvals = [1, 2, 3, 4, 5, 6, 7,8 ,9, 10, 11, 12],\n        ticktext = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    )\n)\n\nfig.layout.xaxis.fixedrange = True\nfig.layout.yaxis.fixedrange = True\n\nfig.show()","0dc9ca4a":"fig = px.bar(orders_by_state, y='State', x='Total Orders',\n             title=\"Total Orders by State\", \n             color_discrete_sequence=[\"springgreen\"],\n             template='plotly_white')\n\n# Disabling Zoom\nfig.layout.xaxis.fixedrange = True\nfig.layout.yaxis.fixedrange = True\n\nfig.show()","90a9c2d7":"#\norders_by_city = order.groupby(['City']).size().reset_index(name='Total Orders').sort_values(['Total Orders'])\n\nfig = px.bar(orders_by_city, y='City', x='Total Orders',\n             title=\"Total Orders by City\",\n             template='simple_white')\n\nfig.layout.yaxis.tickmode='linear'\n# Disabling Zoom\nfig.layout.xaxis.fixedrange = True\nfig.layout.yaxis.fixedrange = True\n\nfig.show()","b720c60b":"target_category = target.groupby('Category').max().reset_index()\ndetails_category = details.groupby('Category').sum().reset_index()\n\ntarget_category['Actual_Amount'] = details_category['Profit']\n\nfig = go.Figure(data=[\n    go.Bar(name='Target', x=target_category['Category'], y=target_category['Target'],\n          marker_color='#2b2d42'),\n    go.Bar(name='Actual Amount', x=target_category['Category'], y=target_category['Actual_Amount'],\n          marker_color='#d90429')\n])\n\nfig.update_layout(title_text='Actual vs Target Sales',\n                 template='plotly_white')\n\nfig.update_xaxes(title_text='Categories')\nfig.update_yaxes(title_text='Amount')\n\nfig.update_layout(yaxis_tickprefix = '\u20b9', yaxis_tickformat = ',.2f')\n\n\nfig.layout.xaxis.fixedrange = True\nfig.layout.yaxis.fixedrange = True\n\nfig.show()","bb9ba40f":"customer_seg = df.groupby('CustomerName').sum().reset_index()\ncustomer_seg = customer_seg[['CustomerName', 'Amount', 'Quantity']]\ncustomer_seg.head()","3a9d02a5":"# Standardizing\ncustomer_seg2 = customer_seg[['Amount', 'Quantity']]\nscaler = StandardScaler()\nscaler.fit(customer_seg2)\n\ncustomers_normalized = scaler.transform(customer_seg2)\ncustomers_normalized\n\n# Elbow Method to find best number of clusters\nsse = {}\nfor k in range(1, 11):\n    kmeans = KMeans(n_clusters=k, random_state=42)\n    kmeans.fit(customers_normalized)\n    sse[k] = kmeans.inertia_ # SSE to closest cluster centroid\n\n# Plotting SSE\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=list(sse.keys()),\n    y=list(sse.values()),\n    connectgaps=True # override default to connect the gaps\n))    \n\nfig.update_layout(title_text='The Elbow Method',\n                 template='plotly_white')\nfig.update_xaxes(title_text='k')\nfig.update_yaxes(title_text='SSE')\nfig.layout.xaxis.fixedrange = True\nfig.layout.yaxis.fixedrange = True\n    \nfig.show()","3ebda064":"# KMeans\nmodel = KMeans(n_clusters=3)\nmodel.fit(customers_normalized)\ncustomer_seg['Cluster'] = model.labels_ + 1\ncustomer_seg['Cluster'] = customer_seg['Cluster'].astype('category')\ncustomer_seg.head()","a0c58616":"customer_seg.groupby('Cluster').agg({\n    'Amount':'mean',\n    'Quantity':'count'}).round(2)","c998e404":"fig = px.scatter(customer_seg, x=\"Quantity\", y=\"Amount\",\n                 color=\"Cluster\",\n                 template='plotly_white',\n                 title=\"Amount vs Quantity - Customer Segmentation\")\nfig.layout.xaxis.fixedrange = True\nfig.layout.yaxis.fixedrange = True\n\nfig.show()","6b45847e":"# Data Pre-processing\n## Data Cleaning\nIn this dataset, the data cleaning process will consists of:\n<ol>\n    <li>Changing the variables to appropriate Data types<\/li>\n    <li>Removing Null Values<\/li>\n<\/ol>","2eb2dabc":"Making a new dataframe containing the Amount, Profit and Quantity of the different orders. Then joining it with the Order datasets by taking Order ID as the Primary Key.","babd3ac9":"**Segment 1**: Medium Buyers <br>\n**Segment 2**: Loyal Buyers <br>\n**Segment 3**: Occational Buyers <br>\n<hr>","e2586ca6":"<hr>","a414b36d":"<hr>\n\n# Sales Target\nA sales target is a goal set for a salesperson or sales department measured in revenue or units sold for a specific time.","2fb9774e":"<hr>","a7c21781":"<hr>","7bb4a3cd":"# Sales Trend Analysis\nTrend analysis is to find patterns in data, such as ups & downs. A \u201ctrend\u201d is an upwards or downwards shift in a data set over time. In retail, this analysis of past trends in sales or revenue; allows to predict the future market. This analysis useful for budgeting and forecasting. Total sales of any business on a trend line may obtain some significant information.","572637a1":"The k-value of 3 is the best hyperparameter for our model because the next k-value tend to have a linear trend. ","19eee12c":"The above bar graph illustrates the Target and the Actual Amount of Profits per Quantity. None of the category surpass or even meet the target. The most disappointing Category is Furniture, which managed to have a profit of  Rs. 2298 with the target of Rs. 11.8K","8465a1bf":"<img style=\"margin: 0 auto; max-height: 300px\" src=\"https:\/\/zipforecasting.com\/assets\/images\/topiccluster\/9-types-of-sales-analysis-techniques-for-businesses-800x400.png\" width=900px>\n\n# What is Sales Analysis\n\nSales analysis is mining your data to evaluate the performance of your sales team against its goals. It provides insights about the top performing and underperforming products\/services, the problems in selling and market opportunities, sales forecasting, and sales activities that generate revenue.\n\nRegular sales data analysis provides an understanding of the products that your customers are buying and helps you dissect why they are behaving in a certain way. You can also find patterns in your lead conversions and drop offs. All of these aspects enable you to optimize your sales process.\n\n<img align=\"right\" style=\"max-height:200px\" src=\"https:\/\/www.winacc.com\/wp-content\/uploads\/2018\/09\/Business-Benefits-of-the-Sales-Analysis-Report-Forming-a-Data-Backed-Marketing-Strategy-1080x600.jpg\"\/>\n\n## Importance of Sales Analysis\n<ul>\n    <li>Make data-driven decisions instead of relying on gut instinct<\/li>\n    <li>Find most profitable customers<\/li>\n    <li>Get awareness on the market trends <\/li>\n    <li>Expand your market reach<\/li>\n<\/ul>\n\nHere, I'll conduct a sales analysis on the E-Commerce dataset.","f5d8e19e":"The state with the highest quantity sold Madhya Pradesh, followed by Maharastra and Rajasthan. There is a biggest gap between the quantity sold in Maharastra an Rajasthan with a difference of 58 units. While in case of Cities, it is Indore and Mumbai by a very wide margin.\nChennai, Allahabad and Amritsar have the lowest quantity sold with less than 10 units sold.","4b796285":"<hr>","5afafc58":"# Customer Demographic Analysis\nCustomer demographics are categories of consumer populations that are relevant to a business' purposes, such as marketing and product design. The term also refers to the study of such categories in a business context.","52ad4502":"# Customer Segmentation via Cluster Analysis\nCluster analysis uses mathematical models to discover groups of similar customers based on the smallest variations among customers within each group.\n\n### Cluster Analysis\nCluster analysis is the use of a mathematical model to discover groups of similar customers based on finding the smallest variations among customers within each group.\nThe goal of cluster analysis in marketing is to accurately segment customers in order to achieve more effective customer marketing via personalization. A common cluster analysis method is a mathematical algorithm known as k-means cluster analysis, sometimes referred to as scientific segmentation. The clusters that result assist in better customer modeling and predictive analytics, and are also are used to target customers with offers and incentives personalized to their wants, needs and preferences."}}