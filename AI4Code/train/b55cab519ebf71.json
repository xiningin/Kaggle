{"cell_type":{"19e3b868":"code","4c19a5ac":"code","4fe98d2b":"code","0566d98b":"code","f6f459c7":"code","b1c5709d":"code","d649db44":"code","b90bbecf":"code","beb306b6":"code","1400d91b":"code","8f65f857":"code","a5b090ce":"code","c3a61967":"code","824d7d7e":"markdown","b8c905f3":"markdown","b5194048":"markdown","c123b09f":"markdown","0d09c637":"markdown","abc90b31":"markdown","1de77109":"markdown","956c8f05":"markdown","14b3f3de":"markdown","5b29939a":"markdown","c32112f3":"markdown","76fc2cb5":"markdown","07d97bb8":"markdown","e4468d65":"markdown","0f2f132a":"markdown"},"source":{"19e3b868":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport pylab as pl\nimport numpy as np\n%matplotlib inline","4c19a5ac":"df = pd.read_csv(\"..\/input\/fuelconsumptionco2\/FuelConsumptionCo2.csv\")\n\n# take a look at the dataset\ndf.head()","4fe98d2b":"# summarize the data\ndf.describe()","0566d98b":"cdf = df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB','CO2EMISSIONS']]\ncdf.head(9)","f6f459c7":"viz = cdf[['CYLINDERS','ENGINESIZE','CO2EMISSIONS','FUELCONSUMPTION_COMB']]\nviz.hist()\nplt.show()","b1c5709d":"plt.scatter(cdf.FUELCONSUMPTION_COMB, cdf.CO2EMISSIONS,  color='blue')\nplt.xlabel(\"FUELCONSUMPTION_COMB\")\nplt.ylabel(\"Emission\")\nplt.show()","d649db44":"plt.scatter(cdf.ENGINESIZE, cdf.CO2EMISSIONS,  color='blue')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")\nplt.show()","b90bbecf":"# write your code here\nplt.scatter(cdf.CYLINDERS, cdf.CO2EMISSIONS,  color='blue')\nplt.show()","beb306b6":"msk = np.random.rand(len(df)) < 0.8\ntrain = cdf[msk]\ntest = cdf[~msk]","1400d91b":"plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")\nplt.show()","8f65f857":"from sklearn import linear_model\nregr = linear_model.LinearRegression()\ntrain_x = np.asanyarray(train[['ENGINESIZE']])\ntrain_y = np.asanyarray(train[['CO2EMISSIONS']])\nregr.fit (train_x, train_y)\n# The coefficients\nprint ('Coefficients: ', regr.coef_)\nprint ('Intercept: ',regr.intercept_)","a5b090ce":"plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')\nplt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], '-r')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")","c3a61967":"from sklearn.metrics import r2_score\n\ntest_x = np.asanyarray(test[['ENGINESIZE']])\ntest_y = np.asanyarray(test[['CO2EMISSIONS']])\ntest_y_hat = regr.predict(test_x)\n\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_hat - test_y)))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((test_y_hat - test_y) ** 2))\nprint(\"R2-score: %.2f\" % r2_score(test_y_hat , test_y) )","824d7d7e":"We can plot each of these features:","b8c905f3":"Now, lets plot each of these features vs the Emission, to see how linear is their relation:","b5194048":"## Plot outputs\nwe can plot the fit line over the data:","c123b09f":"## Reading the data","0d09c637":"## Evaluation\nwe compare the actual values and predicted values to calculate the accuracy of a regression model. Evaluation metrics provide a key role in the development of a model, as it provides insight to areas that require improvement.\n\nThere are different model evaluation metrics, lets use MSE here to calculate the accuracy of our model based on the test set:\n\n* Mean absolute error: It is the mean of the absolute value of the errors. This is the easiest of the metrics to understand since it\u2019s just average error.\n* Mean Squared Error (MSE): Mean Squared Error (MSE) is the mean of the squared error. It\u2019s more popular than Mean absolute error because the focus is geared more towards large errors. This is due to the squared term exponentially increasing larger errors in comparison to smaller ones.\n* Root Mean Squared Error (RMSE): This is the square root of the Mean Square Error.\n* R-squared is not error, but is a popular metric for accuracy of your model. It represents how close the data are to the fitted regression line. The higher the R-squared, the better the model fits your data. Best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse).","abc90b31":"## Data Exploration\nLets first have a descriptive exploration on our data.","1de77109":"## Simple Regression Model\nLinear Regression fits a linear model with coefficients  \u03b8=(\u03b81,...,\u03b8n)  to minimize the 'residual sum of squares' between the independent x in the dataset, and the dependent y by the linear approximation.","956c8f05":"## Creating train and test dataset\nTrain\/Test Split involves splitting the dataset into training and testing sets respectively, which are mutually exclusive. After which, you train with the training set and test with the testing set. This will provide a more accurate evaluation on out-of-sample accuracy because the testing dataset is not part of the dataset that have been used to train the data. It is more realistic for real world problems.\n\nThis means that we know the outcome of each data point in this dataset, making it great to test with! And since this data has not been used to train the model, the model has no knowledge of the outcome of these data points. So, in essence, it is truly an out-of-sample testing.\n\nLets split our dataset into train and test sets, 80% of the entire data for training, and the 20% for testing. We create a mask to select random rows using **np.random.rand()** function:","14b3f3de":"## Modeling\nUsing sklearn package to model data.","5b29939a":"## Importing Needed packages","c32112f3":"## About this Notebook\nIn this notebook, we learn how to use scikit-learn to implement simple linear regression. We [download](https:\/\/open.canada.ca\/data\/en\/dataset\/98f1a129-f628-4ce4-b24d-6f16bf24dd64) a dataset that is related to **fuel consumption** and **Carbon dioxide emission** of cars. Then, we split our data into **training** and **test** sets, create a model using training set, evaluate your model using test set, and finally use model to predict unknown value.","76fc2cb5":"## Practice\nplot **CYLINDER** vs the Emission, to see how linear is their relation:","07d97bb8":"Lets select some features to explore more.","e4468d65":"## Train data distribution","0f2f132a":"As mentioned before, Coefficient and Intercept in the simple linear regression, are the parameters of the fit line. Given that it is a simple linear regression, with only 2 parameters, and knowing that the parameters are the intercept and slope of the line, sklearn can estimate them directly from our data. Notice that all of the data must be available to traverse and calculate the parameters."}}