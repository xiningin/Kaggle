{"cell_type":{"4a2b96e9":"code","c9a5efb5":"code","e9f021fd":"code","266181ae":"code","2eeeaab1":"code","6ba75651":"code","8f9f3b52":"code","b68f4b6e":"code","a251c93e":"code","c48b1f2b":"code","de751394":"code","fd995446":"code","c763c33b":"code","0ed75aa9":"code","4a80e3b2":"code","a1e1b77f":"code","d9c78d90":"code","73373b5a":"code","409c24ba":"code","fa067570":"code","f90d2e6a":"code","33dcc981":"code","677cea51":"code","93bc01af":"code","255303f3":"code","15eecd96":"code","2e43d684":"code","2530d102":"code","01f7f4f6":"markdown","28e50f4b":"markdown","1f826bec":"markdown","aa734ffe":"markdown","646b20e0":"markdown","2cc3829a":"markdown","18f3168c":"markdown"},"source":{"4a2b96e9":"from tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint #\u5c0e\u5165tensorflow\nfrom tensorflow import keras\n\nfrom sklearn.model_selection import StratifiedKFold, KFold\n\nfrom kaggle_datasets import KaggleDatasets #\u63a1\u7528Kaggle\u8cc7\u6599\u96c6\nimport transformers\n\nfrom tokenizers import BertWordPieceTokenizer #\u5206\u8a5e\u5668\nfrom tqdm import tqdm #\u9032\u5ea6\u689d\u986f\u793a\nimport numpy as np\n\n#!pip install wandb\n\n#\u57fa\u672c\u6a21\u578b\u5c0e\u5165\nimport os, time\nimport gc\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow_hub as hub\nfrom kaggle_datasets import KaggleDatasets\n\n!pip install bert-tensorflow\nimport bert.tokenization\n\nprint(tf.version.VERSION) #tensorflow\u7248\u672c\u8f38\u51fa","c9a5efb5":"seed = 7\nn_splits = 5\n\n#kkfold = KFold(n_splits).split(x_train)\nkfold = StratifiedKFold(n_splits, shuffle=True, random_state=seed)\ncvscores = []","e9f021fd":"print(transformers.__version__) #tensorflow\u7248\u672c\u8f38\u51fa","266181ae":"# TPU \u6aa2\u6e2c. \ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu) #TPU\u7684\u9023\u63a5\nelse:\n    \n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)\n\n#\u5728TPU\u4e0a\u91dd\u5c0dKaggle\u7528\u6236\u904b\u884cBert\u6a21\u578b","2eeeaab1":"SEQUENCE_LENGTH = 128 #\u4e00\u500b\u8f38\u5165\u5b57\u4e32\u9577\u5ea6\u70ba128\u7684list\n\n#\u8a2d\u7f6eKaggle\u6578\u64da\u7684\u8a2a\u554f\u8def\u5f91\nDATA_PATH =  KaggleDatasets().get_gcs_path('jigsaw-multilingual-toxic-comment-classification')\n#BERT_PATH = KaggleDatasets().get_gcs_path('bert-multi')\n#BERT_PATH_SAVEDMODEL = BERT_PATH + \"\/bert_multi_from_tfhub\"\nWEIGHTS_PATH = '..\/input\/jigsaw-weights'\n\n\nOUTPUT_PATH = \"\/kaggle\/working\"","6ba75651":"# train1 = pd.read_csv(\"\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/jigsaw-toxic-comment-train.csv\")\ntrain1 = pd.read_csv(\"\/kaggle\/input\/jigsawch\/666666.csv\")\nvalid = pd.read_csv('\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/validation.csv')\ntest = pd.read_csv('\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/sample_submission.csv')\n# sub2 = pd.read_csv('..\/input\/ensemble\/submission.csv')","8f9f3b52":"train1 = train1.dropna(how='any')\ntrain1 = train1.sample(n=100000,random_state = seed)","b68f4b6e":"print(train1.head())","a251c93e":"#\u628a\u6587\u5b57\u5207\u5272\u4e26\u8f49\u6210BERT\u6240\u9700\u8981\u7684\u7de8\u78bc\n\n# def get_tokenizer(bert_path=BERT_PATH_SAVEDMODEL):\n#     bert_layer = tf.saved_model.load(bert_path)\n#     bert_layer = hub.KerasLayer(bert_layer, trainable=False)\n#     vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy() \n#     cased = bert_layer.resolved_object.do_lower_case.numpy()\n#     tf.gfile = tf.io.gfile  \n#     tokenizer = bert.tokenization.FullTokenizer(vocab_file, cased)\n  \n#     return tokenizer\n\n# tokenizer = get_tokenizer()","c48b1f2b":"#\u7de8\u78bc\u5668\uff0c\u7528\u65bc\u5c07\u6587\u672c\u7de8\u78bc\u70ba\u6574\u6578\u5e8f\u5217\uff0c\u4ee5\u9032\u884cBERT\u8f38\u5165\n\ndef fast_encode(texts, tokenizer, chunk_size=256, maxlen=512):#\u6279\u6b21\u4e0a\u50b3256\uff0c\u6700\u9577\u5e8f\u5217512\n    \n    tokenizer.enable_truncation(max_length=maxlen)\n    tokenizer.enable_padding(length=maxlen) #\u6700\u5927\u9577\u5ea6\u70ba512\uff0c\u4e0d\u8db3\u6703\u81ea\u52d5\u88dc0\n    all_ids = []\n    \n    for i in tqdm(range(0, len(texts), chunk_size)):\n        text_chunk = texts[i:i+chunk_size].tolist() #\u5c07\u6578\u64da\u8f49\u63db\u70ba\u6700\u63a5\u8fd1Python\u7684\u985e\u578b\n        encs = tokenizer.encode_batch(text_chunk)\n        #print(text_chunk)\n        all_ids.extend([enc.ids for enc in encs])\n        \n    \n    return np.array(all_ids)","de751394":"#\u7528\u65bc\u914d\u7f6e\u7684IMP\u6578\u64da\n\nAUTO = tf.data.experimental.AUTOTUNE\n\n\n# \u914d\u7f6e\nEPOCHS = 5 #\u5b9a\u7fa9\u8a13\u7df4\u904e\u7a0b\u6578\u64da\u8f2a5\u6b21\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync  #\u8cc7\u6599\u96c6\u5927\u5c0f\nMAX_LEN = 192","fd995446":"tokenizer = transformers.DistilBertTokenizer.from_pretrained('distilbert-base-multilingual-cased')# \u4f7f\u7528\u5206\u8a5e\u5668\u52a0\u8f09DistilBERT\n\ntokenizer.save_pretrained('.') #\u5132\u5b58\n\nfast_tokenizer = BertWordPieceTokenizer('vocab.txt', lowercase=False)\nfast_tokenizer  #\u5229\u7528 huggingface tokenizers\u5eab \u91cd\u65b0\u52a0\u8f09\u8a5e\u5411\u91cf\uff0clowercase=False:\u8a5e\u5411\u91cf\u7686\u70ba\u5927\u5beb","c763c33b":"#\u5feb\u901f\u7de8\u78bc\nx_train = fast_encode(train1.comment_text.astype(str), fast_tokenizer, maxlen=MAX_LEN)\nx_valid = fast_encode(valid.comment_text.astype(str), fast_tokenizer, maxlen=MAX_LEN)\nx_test = fast_encode(test.content.astype(str), fast_tokenizer, maxlen=MAX_LEN)\n\ny_train = train1.toxic.values\ny_valid = valid.toxic.values","0ed75aa9":"#\u8a13\u7df4BERT\u6a21\u578b\n\ndef build_model(transformer, max_len=512):  #\u5efa\u7acb\u6a21\u578b\uff0c\u8f38\u5165\u53e5\u5b50\u6700\u5927\u9577\u5ea6512\n    \n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\") #dtype=tf.int \u8fd4\u56de\u6578\u64da\u5143\u7d20\u7684\u6578\u64da\u985e\u578bint\n    sequence_output = transformer(input_word_ids)[0] #BERT\u6a21\u578b\u7684\u8f38\u51fa \n    cls_token = sequence_output[:, 0, :]\n    \n    #\u6fc0\u6d3b\u51fd\u6578\n    out = tf.keras.layers.Dense(300, activation='relu')(cls_token)\n    out = tf.keras.layers.Dense(128, activation='relu')(out)\n    out = tf.keras.layers.Dense(128, activation='relu')(out)\n    out = Dense(1, activation='sigmoid')(out) #relu\u7dda\u6027\u51fd\u6578\u6fc0\u6d3b sigmoid\u975e\u7dda\u6027\u6fc0\u6d3b\u51fd\u6578\n    \n    model = Model(inputs=input_word_ids, outputs=out)\n    model.compile(Adam(lr=1e-5), loss='binary_crossentropy', metrics=['accuracy']) #\u640d\u5931\u51fd\u6578\u7684\u7528\u6cd5\uff0cAdam\u662f\u512a\u5316\u5668\uff0closs\uff1a\u8a08\u7b97\u640d\u5931\n    \n    return model","4a80e3b2":"alldatalen=[]\nfor i in range(100000):\n    alldatalen.append(i)\n# print(alldatalen)","a1e1b77f":"foldlist = []\nnewfoldtrain = []\nnewfoldval = []\nfor x_s_train, y_s_train in kfold.split(x_train, y_train):\n#     print(x_train[x_s_train])\n#     print(y_train[x_s_train])\n#     print(x_s_train)\n    foldlist.append(y_s_train)\n    print(len(x_s_train))\nfor i in range(5):\n    newfoldtrain.append(np.concatenate([foldlist[i],foldlist[(i-1)]]))\n    newfoldval.append(np.setdiff1d(alldatalen,newfoldtrain[i]))\n    print(len(newfoldtrain[i]))\n    print(len(newfoldval[i]))","d9c78d90":"%%time\nwith strategy.scope(): #\u8868\u660e\u5206\u6563\u5f0f\u57f7\u884c\u7684\u7a0b\u5f0f\u78bc\u5340\u584a\n    transformer_layer = (\n        transformers.TFDistilBertModel\n        .from_pretrained('distilbert-base-multilingual-cased')\n    )\n    model = build_model(transformer_layer, max_len=MAX_LEN)","73373b5a":"train_history_list = []","409c24ba":"for a,b in kfold.split(x_train, y_train):\n    print(a,b)\n    print(len(a),len(b))\n    print(type(a),type(b))","fa067570":"# %%time\n# for i in range(5):\n#     x_s_train = x_train[newfoldtrain[i]]\n#     y_s_train = y_train[newfoldtrain[i]]\n#     train_dataset = (\n#         tf.data.Dataset\n#         .from_tensor_slices((x_s_train, y_s_train))\n#         .repeat() #\u91cd\u8907\u6578\u64da\u96c6count\u6b21\u6578\n#         .shuffle(2048) #\u96a8\u6a5f\u6df7\u6d17\u6578\u64da\u96c6\u591a\u5143\u7d20\n#         .batch(BATCH_SIZE) #\u5c07\u6578\u64da\u96c6\u591a\u9023\u7e8c\u5143\u7d20\u5408\u6210\u6279\u6b21\n#         .prefetch(AUTO)#\u5c07\u4e00\u90e8\u5206\u5167\u5b58\u52a0\u8f09\u5230cache\u88e1\u9762\n#     )\n#     x_s_valid = x_train[newfoldval[i]]\n#     y_s_valid = y_train[newfoldval[i]]\n#     valid_dataset =(\n#         tf.data.Dataset\n#         .from_tensor_slices((x_s_valid, y_s_valid))\n#         .batch(BATCH_SIZE)\n#         .cache()\n#         .prefetch(AUTO)\n#     )\n#     n_steps = x_s_train.shape[0] \/\/ BATCH_SIZE #\u8b80\u53d6\u77e9\u9663\u7b2c\u4e00\u7dad\u5ea6\u7684\u9577\u5ea6\n#     train_history = model.fit(\n#         train_dataset,\n#         steps_per_epoch=n_steps,\n#         validation_data=valid_dataset,\n#         epochs=EPOCHS,\n#     ) # \u4f7f\u7528model.fit()\u57f7\u884c\u8a13\u7df4\u904e\u7a0b\n#     train_history_list.append(train_history)\n#     print(\"-----------------------------------------------------------\")","f90d2e6a":"%%time\nfor x_l_train, y_l_train in kfold.split(x_train, y_train):\n    x_s_train = x_train[y_l_train]\n    y_s_train = y_train[y_l_train]\n    train_dataset = (\n        tf.data.Dataset\n        .from_tensor_slices((x_s_train, y_s_train))\n        .repeat() #\u91cd\u8907\u6578\u64da\u96c6count\u6b21\u6578\n        .shuffle(2048) #\u96a8\u6a5f\u6df7\u6d17\u6578\u64da\u96c6\u591a\u5143\u7d20\n        .batch(BATCH_SIZE) #\u5c07\u6578\u64da\u96c6\u591a\u9023\u7e8c\u5143\u7d20\u5408\u6210\u6279\u6b21\n        .prefetch(AUTO)#\u5c07\u4e00\u90e8\u5206\u5167\u5b58\u52a0\u8f09\u5230cache\u88e1\u9762\n    )\n    x_s_valid = x_train[x_l_train]\n    y_s_valid = y_train[x_l_train]\n    valid_dataset =(\n        tf.data.Dataset\n        .from_tensor_slices((x_s_valid, y_s_valid))\n        .batch(BATCH_SIZE)\n        .cache()\n        .prefetch(AUTO)\n    )\n    n_steps = x_s_train.shape[0] \/\/ BATCH_SIZE #\u8b80\u53d6\u77e9\u9663\u7b2c\u4e00\u7dad\u5ea6\u7684\u9577\u5ea6\n    train_history = model.fit(\n        train_dataset,\n        steps_per_epoch=n_steps,\n        validation_data=valid_dataset,\n        epochs=EPOCHS,\n    ) # \u4f7f\u7528model.fit()\u57f7\u884c\u8a13\u7df4\u904e\u7a0b\n    train_history_list.append(train_history)\n    print(\"-----------------------------------------------------------\")","33dcc981":"model.summary() #\u8f38\u51fa\u5404\u5c64\u7684\u8f38\u51fa\u60c5\u6cc1","677cea51":"for history in train_history_list:\n    print(history.history)","93bc01af":"import statistics\n\nhis_val_loss = []\nhis_val_accuracy = []\n\nfor history in train_history_list:\n    his_val_loss.append(statistics.mean(history.history['val_loss']))\n    his_val_accuracy.append(statistics.mean(history.history['val_accuracy']))\nhis_val_loss.append(statistics.mean(his_val_loss))\nhis_val_accuracy.append(statistics.mean(his_val_accuracy))\n\nprint(his_val_loss[-1])\nprint(his_val_accuracy[-1])","255303f3":"# model.load_weights(WEIGHTS_PATH+\"\/weights.h5\")","15eecd96":"# print(train_history)\n# print(train_history_2)","2e43d684":"#model.predict()\u8fd4\u56de\u503c\u662f\u6578\u503c,\u8868\u793a\u6a23\u672c\u5c6c\u65bctoxic\u985e\u5225\u7684\u6982\u7387\n\n'''test_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices(x_test)\n    .batch(BATCH_SIZE)\n)'''\n\n# sub['toxic'] = model.predict(test_dataset, verbose=1)\n\n# sub1 = sub[['id', 'toxic']]","2530d102":"# model.load_weights(\"weights.h5\")","01f7f4f6":"# Preprocessing","28e50f4b":"n_steps = x_valid.shape[0] \/\/ BATCH_SIZE\ntrain_history_2 = model.fit(\n    valid_dataset.repeat(),\n    steps_per_epoch=n_steps,\n    epochs=EPOCHS*2,\n)","1f826bec":"# \u8f49\u5316\u6210\u6578\u64da\u96c6 \u751f\u6210\u5c0d\u61c9\u7684Dataset\n\ntrain_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((x_train, y_train))\n    .repeat() #\u91cd\u8907\u6578\u64da\u96c6count\u6b21\u6578\n    .shuffle(2048) #\u96a8\u6a5f\u6df7\u6d17\u6578\u64da\u96c6\u591a\u5143\u7d20\n    .batch(BATCH_SIZE) #\u5c07\u6578\u64da\u96c6\u591a\u9023\u7e8c\u5143\u7d20\u5408\u6210\u6279\u6b21\n    .prefetch(AUTO)#\u5c07\u4e00\u90e8\u5206\u5167\u5b58\u52a0\u8f09\u5230cache\u88e1\u9762\n)\nvalid_dataset =(\n    tf.data.Dataset\n    .from_tensor_slices((x_valid, y_valid))\n    .batch(BATCH_SIZE)\n    .cache()\n    .prefetch(AUTO)\n)\ntest_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices(x_test)\n    .batch(BATCH_SIZE)\n)","aa734ffe":"model.save_weights(\"weights.h5\")","646b20e0":"# BERT Tokenizer","2cc3829a":"n_steps = x_train.shape[0] \/\/ BATCH_SIZE #\u8b80\u53d6\u77e9\u9663\u7b2c\u4e00\u7dad\u5ea6\u7684\u9577\u5ea6\ntrain_history = model.fit(\n    train_dataset,\n    steps_per_epoch=n_steps,\n    validation_data=valid_dataset,\n    epochs=EPOCHS,\n) # \u4f7f\u7528model.fit()\u57f7\u884c\u8a13\u7df4\u904e\u7a0b","18f3168c":"new=pd.DataFrame({'id':['63812'],\n                  'content':['\u4f60\u662f\u767d\u7661'],\n                  'lang':['zh']}) \ntest = test.append(new,ignore_index = True)\nprint(test.tail())"}}