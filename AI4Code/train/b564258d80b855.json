{"cell_type":{"7604df3a":"code","6ebaa6c9":"code","826297bd":"code","51d67922":"code","6126e1d7":"code","489a35a8":"code","1afa9e67":"code","82d79e10":"code","6736f241":"code","bf3a331f":"code","f179c4cf":"code","c237e1c1":"code","57173471":"code","382e38f3":"code","2f5a9504":"code","4cc07dae":"code","64968b12":"markdown","9b1de88a":"markdown","758964b3":"markdown","a9eb1dcd":"markdown","715b196c":"markdown","a675a41c":"markdown","8aacf37e":"markdown","c3c2e1a7":"markdown","8285948a":"markdown","c96abe73":"markdown","f56d035b":"markdown","84af847e":"markdown","9bdcad7a":"markdown"},"source":{"7604df3a":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","6ebaa6c9":"train_label = pd.read_csv('\/kaggle\/input\/glaucoma-detection\/glaucoma.csv')\ny_train = train_label['Glaucoma']\ntrain_label.head()","826297bd":"from numpy import asarray\n\nfrom PIL import Image\n# load the image\nimage = Image.open('\/kaggle\/input\/glaucoma-detection\/Fundus_Train_Val_Data\/Fundus_Scanes_Sorted\/Validation\/Glaucoma_Positive\/613.jpg')\n# summarize some details about the image\nprint(image.format)\nprint(image.mode)\nprint(image.size)\n# show the image\nimage.show()\npixels = asarray(image)","51d67922":"\n# global centering\n\n# calculate global mean\nmean = pixels.mean()\nprint('Mean: %.3f' % mean)\nprint('Min: %.3f, Max: %.3f' % (pixels.min(), pixels.max()))\n# global centering of pixels\npixels = pixels - mean\n# confirm it had the desired effect\nmean = pixels.mean()\nprint('Mean: %.3f' % mean)\nprint('Min: %.3f, Max: %.3f' % (pixels.min(), pixels.max()))\nprint(pixels)\n\n\n# example of pixel normalization\n# confirm pixel range is 0-255\nprint('Data Type: %s' % pixels.dtype)\nprint('Min: %.3f, Max: %.3f' % (pixels.min(), pixels.max()))\n# convert from integers to floats\npixels = pixels.astype('float32')\n# normalize to the range 0-1\npixels \/= 255.0\nmean = pixels.mean()\nprint('pixel mean = ', mean)\n\n# confirm the normalization\nprint('Min: %.3f, Max: %.3f' % (pixels.min(), pixels.max()))\nprint(pixels)","6126e1d7":"import matplotlib.pyplot as plt\nfig, (ax0, ax1) = plt.subplots(1, 2)\nax0.imshow(image)\nax0.axis('off')\nax0.set_title('image')\nax1.imshow(pixels)\nax1.axis('off')\nax1.set_title('result')\nplt.show()","489a35a8":"from skimage import io\n\ndef imshow(image_RGB):\n  io.imshow(image_RGB)\n  io.show()","1afa9e67":"from keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.resnet50 import preprocess_input","82d79e10":"TRAIN_DIR = '\/kaggle\/input\/glaucoma-detection\/Fundus_Train_Val_Data\/Fundus_Scanes_Sorted\/Train'\n\nTEST_DIR = '\/kaggle\/input\/glaucoma-detection\/Fundus_Train_Val_Data\/Fundus_Scanes_Sorted\/Validation'","6736f241":"'''import os\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten\nfrom keras.preprocessing.image import ImageDataGenerator\n\n\n\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), padding='same', activation='relu', input_shape=(256, 256, 3)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='softmax'))\n\n\n\ntrain_generator = ImageDataGenerator(\n  data_format=\"channels_last\",\n  rescale = 1. \/ 255\n)\n\ntrain_batches = train_generator.flow_from_directory(\n    batch_size=32,\n    directory='.\/dataset\/train',\n    target_size=(256, 256),\n    class_mode='binary'\n)\n\nvalidation_generator = ImageDataGenerator(\n  data_format=\"channels_last\",\n  rescale = 1. \/ 255\n)\n\nvalidation_batches = validation_generator.flow_from_directory(\n    batch_size=32,\n    directory='.\/dataset\/validation',\n    target_size=(256, 256),\n    class_mode='binary'\n)\n\nmodel = create_model()\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\n# Starts training the model\nmodel.fit_generator(train_batches,\n                    epochs=15,\n                    verbose=1,\n                    steps_per_epoch=len(train_batches),\n                    validation_data=validation_batches,\n                    initial_epoch=0,\n                    validation_steps=len(validation_batches)\n                    )\n\ntest_generator = ImageDataGenerator(\n    data_format='channels_last',\n    rescale=1.\/255\n)\n\ntest_batches = test_generator.flow_from_directory(\n    batch_size=1,\n    directory='.\/dataset\/test',\n    target_size=[256, 256],\n    class_mode='binary'\n)\n\nscore = model.evaluate_generator(test_batches, verbose=1)\n\nprint(model.metrics_names)\nprint('test dataset: ' + str(score))'''","bf3a331f":"from keras.applications.resnet50 import ResNet50, preprocess_input\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Dense, Activation, Flatten, Dropout\nfrom keras.models import Sequential, Model \nfrom keras.optimizers import SGD, Adam\nfrom keras.callbacks import TensorBoard\nimport keras\nimport matplotlib.pyplot as plt\n\nHEIGHT = 300\nWIDTH = 300\n\nBATCH_SIZE = 8\nclass_list = [\"class_1\", \"class_2\"]\nFC_LAYERS = [1024, 512, 256]\ndropout = 0.5\nNUM_EPOCHS = 100\nBATCH_SIZE = 8\n\ndef build_model(base_model, dropout, fc_layers, num_classes):\n    for layer in base_model.layers:\n        layer.trainable = False\n\n    x = base_model.output\n    x = Flatten()(x)\n    for fc in fc_layers:\n        print(fc)\n        x = Dense(fc, activation='relu')(x)\n        x = Dropout(dropout)(x)\n    preditions = Dense(num_classes, activation='softmax')(x)\n    finetune_model = Model(inputs = base_model.input, outputs = preditions)\n    return finetune_model\n\nbase_model_1 = ResNet50(weights = 'imagenet',\n                       include_top = False,\n                       input_shape = (HEIGHT, WIDTH, 3))\n\ntrain_datagen = ImageDataGenerator(preprocessing_function = preprocess_input,\n                                   rotation_range = 90,\n                                   horizontal_flip = True,\n                                   vertical_flip = True,\n                                   width_shift_range=0.2,\n                                   height_shift_range=0.2,\n                                   zoom_range=0.1,)\n\ntest_datagen = ImageDataGenerator(preprocessing_function = preprocess_input,\n                                  rotation_range = 90,\n                                  horizontal_flip = True,\n                                  vertical_flip = False)\n\ntrain_generator = train_datagen.flow_from_directory(TRAIN_DIR,\n                                                    target_size = (HEIGHT, WIDTH),\n                                                    batch_size = BATCH_SIZE)\n\ntest_generator = test_datagen.flow_from_directory(TEST_DIR,\n                                                  target_size = (HEIGHT, WIDTH),\n                                                  batch_size = BATCH_SIZE)\n\n\n\n\nresnet50_model = build_model(base_model_1,\n                                      dropout = dropout,\n                                      fc_layers = FC_LAYERS,\n                                      num_classes = len(class_list))\n\nadam = Adam(lr = 0.00001)\nresnet50_model.compile(adam, loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\n\nfilepath = \".\/checkpoints\" + \"RestNet50\" + \"_model_weights.h5\"\ncheckpoint = keras.callbacks.ModelCheckpoint(filepath, monitor = [\"acc\"], verbose= 1, mode = \"max\")\ncb=TensorBoard(log_dir=(\"\/home\/ubuntu\/\"))\ncallbacks_list = [checkpoint, cb]\n\nprint(train_generator.class_indices)\n\nresnet50_model.summary()","f179c4cf":"history = resnet50_model.fit_generator(generator = train_generator, epochs = NUM_EPOCHS, steps_per_epoch = 100, \n                                       shuffle = True, validation_data = test_generator)","c237e1c1":"import matplotlib.pyplot as plt\n%matplotlib inline\nimage_batch,label_batch = train_generator.next()\n\nprint(len(image_batch))\nfor i in range(0,len(image_batch)):\n    image = image_batch[i]\n    print(label_batch[i])\n    imshow(image)","57173471":"from tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom tensorflow.keras.optimizers import RMSprop","382e38f3":"base_model_2 = InceptionV3(weights = 'imagenet',\n                       include_top = False,\n                       input_shape = (HEIGHT, WIDTH, 3))","2f5a9504":"inception_model = build_model(base_model_2,\n                                      dropout = dropout,\n                                      fc_layers = FC_LAYERS,\n                                      num_classes = len(class_list))\ninception_model.compile(optimizer = RMSprop(lr = 0.00001), loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\ninception_model.summary()","4cc07dae":"history_2 = inception_model.fit_generator(generator = train_generator, epochs = NUM_EPOCHS, steps_per_epoch = 100, \n                                       shuffle = True, validation_data = test_generator)","64968b12":"# **Looking at the Data**","9b1de88a":"# **Inception V3**","758964b3":"# **ConvNet**","a9eb1dcd":"# **Modeling**","715b196c":"**This notebook dives into creating a machine learning model to diagnose glaucoma.**\n\n\n***There has not been any solid dataset for glaucoma so I made one and created a model. Please check out my dataset if you are interested.***","a675a41c":"**Visulization**","8aacf37e":"# **Organizing Data**","c3c2e1a7":"I first tried some manual data augmentation and preprocessing.","8285948a":"![](https:\/\/www.reviewofoptometry.com\/CMSImagesContent\/2019\/10\/GlaucDiff1.jpg)","c96abe73":"# **Introduction**","f56d035b":"# **Augmentation**","84af847e":"# **ResNet50**","9bdcad7a":"I took the data from the sources, and seperated them into train and validation folders. Then from those folders, I sorted them into positive and negative cases. You can check out my jupyter notebook linked at the end."}}