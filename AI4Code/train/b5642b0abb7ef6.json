{"cell_type":{"045029f8":"code","53c0e29f":"code","71e65896":"code","ac7ca208":"code","cb4a92cf":"code","088854e7":"code","f3cb3086":"code","5414300f":"code","4e7f8d64":"code","f84aebe4":"code","fe846f26":"code","c12a51d9":"code","2c58c9fd":"code","4bc71027":"code","d391ee6d":"code","779eb9cd":"code","7e90c9ed":"code","23aab3f4":"code","43bf3981":"code","2016d755":"code","b62775c0":"code","9bef8b9f":"code","1484110a":"code","9b88a542":"code","e9d08553":"markdown","ebdd5deb":"markdown","8e2ac7ea":"markdown"},"source":{"045029f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","53c0e29f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sbn","71e65896":"# Let's build the diabetes prediction model.\n\n#Here, you are going to predict bitcoin using Linear Regression.","ac7ca208":"#Read the CSV\n\nbtc = pd.read_csv('\/kaggle\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2021-03-31.csv')\n\n","cb4a92cf":"btc.head(100)","088854e7":"btc.shape","f3cb3086":"btc.info()","5414300f":"btc.describe()","4e7f8d64":"btc.isnull().sum()\/4572257*100","f84aebe4":"#Every row we have 27 % null values.so we delet the nulls.\nbtc.dropna(inplace=True)\nbtc","fe846f26":"#Selecting Feature Here, you need to divide the given columns into two types of variables dependent\n#(or target variable) and independent variable(or feature variables).\n# Total is is features selection and x and y we split the features into dependant and independant variables.\ntotal = ['Open', 'High', 'Low', 'Close','Volume_BTC', 'Volume_Currency', 'Weighted_Price']","c12a51d9":"#for data visualization.\n#correlation helps us to find out which of the fields are related to each other..\nplt.figure(figsize=(15, 15))\nsbn.heatmap(btc.corr(), annot=True, cmap='rainbow', linewidths=1, linecolor='black')","2c58c9fd":"# change the names of column for proper represntation\nbtc.rename(columns={\"Volume_(BTC)\" : \"Volume_BTC\", \"Volume_(Currency)\" : \"Volume_Currency\"}, inplace=True)","4bc71027":"btc.head()","d391ee6d":"#Selecting Feature Here, you need to divide the given columns into two types of variables dependent\n#(or target variable) and independent variable(or feature variables).\n# Total is is features selection and x and y we split the features into dependant and independant variables.\nTotal = ['Open', 'High', 'Low', 'Close','Volume_BTC', 'Volume_Currency', 'Weighted_Price']\nbtc_new_x = ['Open', 'High', 'Low', 'Volume_BTC', 'Volume_Currency', 'Weighted_Price']\nbtc_new_y = ['Close']\n","779eb9cd":"#Splitting Data To understand model performance, dividing the dataset into a training set and a test set is a good strategy.\n#Let's split dataset by using function train_test_split(). You need to pass 3 parameters features, target, and test_set size.\n#Additionally, you can use random_state to select records randomly.\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( btc[btc_new_x], btc[btc_new_x], test_size = 0.3)\n\n#btc_x_train, lcn_x_test, lcn_y_train, lcn_y_test = train_test_split(lcn_x, lcn_y, test_size = 0.2)","7e90c9ed":"#we will first try fitting our data using LinearRegression\n\nfrom sklearn.linear_model import LinearRegression","23aab3f4":"regression_model = LinearRegression()\nregression_model.fit(X_train, y_train)","43bf3981":"#our model is ready!! Time to test accuracy!!!\nregression_model.score(X_test, y_test)","2016d755":"# We got 99% accuracy on our test data also..that means our model is quite good\n#now we can test for actual predictions!!\n\n#we will take some data from test set and try to predict that\n\n#we will take row number 55 from our original dataset, i.e from one before splitting\nsample_data = btc.iloc[55]\nsample_data","b62775c0":"#from above, it's clear that original price was 6.4 and out model predicted it as 6.4 which is pretty much equal","9bef8b9f":"#to make predictions of future values we will need to shift data by 30 days!!\nfuture_set = btc.shift(periods=30).tail(30)","1484110a":"#similarly we can use r2_score to see our accuracy\nfrom sklearn.metrics import r2_score","9b88a542":"predictions = regression_model.predict(X_test)\nprint('Accuracy of model : ', r2_score(predictions, y_test))","e9d08553":"****Problem Relevance & Definition****\n\nA major drawback of crypocurrency trading is the volatility of the market. The currency trades can occur 24\/7 & tracking crypto position can be an impossible task to manage without automation. Automated Machine Learning trading algorithms can assist in managing this task, in order to predict the market's movement. We can use models to classify future movements into three categries: (1) The market will rise (take long position), (2) The market will fall (take short position) (3) The market will move sideways (take no position).\n\nThe problem of predicting a buy (value=1) or sell (value=0) signal for a trading strategy is defined in the classification framework.","ebdd5deb":"****Problem Statment: Bitcoin Prize Prediction****\n\nBitcoin is the longest running and most well known cryptocurrency, first released as open source in 2009 by the anonymous Satoshi Nakamoto. Bitcoin serves as a decentralized medium of digital exchange, with transactions verified and recorded in a public distributed ledger (the blockchain) without the need for a trusted record keeping authority or central intermediary. Included here is historical bitcoin market data at 1-min intervals for select bitcoin exchanges where trading takes place. CSV files for select bitcoin exchanges for the time period of Jan 2012 to September 2020, with minute to minute updates of OHLC (Open, High, Low, Close), Volume in BTC and indicated currency, and weighted bitcoin price.Data contain the total no. rows is 4572257, and columns is 8.","8e2ac7ea":"#Here, the Dataset is broken into two parts in a ratio of 75:25. It means 80% data will be used for model training \n#and 20% for model testing.\n\n\n#Model Development and Prediction First, import the Logistic Regression module and create a Liner Regression. \n\n#Then, fit your model on the train set using fit() and perform prediction on the test set using predict()."}}